{"cell_type":{"46cba0e1":"code","daafd82b":"code","f55b8100":"code","530c3437":"code","9e0b5870":"code","028cf56e":"code","6ef3812f":"code","b9fbb79c":"code","1636b4d0":"code","24119df7":"code","f24c9fb8":"code","c552e13e":"code","cc20159f":"code","60cc9078":"code","ff1cb917":"code","bed7fbf0":"code","35d41273":"code","9dcc6d3c":"code","04bbb7a1":"code","196d8149":"code","61d93e6f":"code","f0e0c14d":"code","a1f037eb":"code","34fba813":"code","50299278":"code","6164ea3e":"code","3e00cb94":"code","31a24bf8":"code","76d5c158":"code","b7f4f085":"markdown","2b207b0c":"markdown","9039450b":"markdown","7c3cfc50":"markdown","7f2ccfe6":"markdown","3d2254df":"markdown","fb9ea631":"markdown","0505633d":"markdown","cb2a3586":"markdown","c0dad104":"markdown","96dcdc6a":"markdown","6bf193e2":"markdown","0ce583c0":"markdown"},"source":{"46cba0e1":"# !pip install mlxtend\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None) # b\u00fct\u00fcn s\u00fctunlar\u0131 g\u00f6ster\n# pd.set_option('display.max_rows', None) # b\u00fct\u00fcn sat\u0131rlar\u0131 g\u00f6ster\npd.set_option('display.width', 500) # yan yana 500 tane g\u00f6ster\npd.set_option('display.expand_frame_repr', False) # \u00e7\u0131kt\u0131n\u0131n tek bir sat\u0131rda olmas\u0131n\u0131 sa\u011flar.\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","daafd82b":"pip install openpyxl","f55b8100":"df_ = pd.read_excel(\"..\/input\/online-retail-iixlsx\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")","530c3437":"df = df_.copy()","9e0b5870":"def outlier_thresholds(dataframe, variable):\n    q1 = dataframe[variable].quantile(0.01)\n    q3 = dataframe[variable].quantile(0.99)\n    interquantile_range = q3 - q1 \n    up_limit = q3 + 1.5 * interquantile_range\n    low_limit = q1 - 1.5 * interquantile_range\n    return low_limit, up_limit","028cf56e":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable ] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","6ef3812f":"def retail_data_prep(dataframe):\n    dataframe.dropna(inplace = True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na = False)] # delete those with C at the beginning\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\") # Replace the outliers in the Quantity variable with the limit values of these variables.\n    replace_with_thresholds(dataframe, \"Price\") # Replace the outliers in the price variable with the limit values of these variables.\n    return dataframe","b9fbb79c":"df = retail_data_prep(df)","1636b4d0":"df_gr = df[df[\"Country\"] == \"Germany\"]","24119df7":"# Indicates how many of each product was purchased.\ndf_gr.groupby([\"Invoice\",\"Description\"]).agg({\"Quantity\":\"sum\"}).head()","f24c9fb8":"df_gr.groupby([\"Invoice\",\"Description\"]).agg({\"Quantity\":\"sum\"}).unstack().iloc[0:5,0:5]","c552e13e":"df_gr.groupby([\"Invoice\",\"Description\"]).agg({\"Quantity\":\"sum\"}).unstack().fillna(0).applymap(lambda x: 1 if x > 0 else 0).iloc[0:5, 0:5]","cc20159f":"def create_invoice_product_df(dataframe, id = False):\n    if id:\n        return dataframe.groupby(['Invoice','StockCode'])['Quantity'].sum().unstack().fillna(0).\\\n            applymap(lambda x: 1 if x>0 else 0)\n    else:\n        return dataframe.groupby(['Invoice','Description'])['Quantity'].sum().unstack().fillna(0).\\\n            applymap(lambda x: 1 if x>0 else 0)","60cc9078":"gr_inv_pro_df = create_invoice_product_df(df_gr, id=True)\ngr_inv_pro_df.head()","ff1cb917":"# which id gives the information of which product\ndef check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)","bed7fbf0":"check_id(df_gr, 21987)","35d41273":"check_id(df_gr, 23235)","9dcc6d3c":"check_id(df_gr, 22747)","04bbb7a1":"# The appriori function is used for the probabilities of all possible product combinations.\nfrequent_itemsets = apriori(gr_inv_pro_df, min_support = 0.01, use_colnames = True)","196d8149":"# support: possibility of products appearing alone\n# sort by support value descending\n# the probability of being observed in all data is 81%.\nfrequent_itemsets.sort_values(\"support\", ascending = False).head()","61d93e6f":"rules = association_rules(frequent_itemsets, metric = \"support\", min_threshold = 0.01)\nrules.sort_values(\"support\", ascending = False).head()","f0e0c14d":"rules.sort_values(\"lift\", ascending = False).head()","a1f037eb":"product_id = 21987\ncheck_id(df, product_id)","34fba813":"sorted_rules = rules.sort_values(\"lift\", ascending=False)","50299278":"sorted_rules","6164ea3e":"sorted_rules.head()","3e00cb94":"\ndef arl_recommender(rules_df, product_id, rec_count=1): # rec_count = ka\u00e7 g\u00f6zlem birimi yazd\u0131r\u0131lmal\u0131\n    sorted_rules = rules_df.sort_values(\"lift\", ascending=False)\n    recommendation_list = []\n    \"\"\"\n    - Browse through the first product sets, if the product_id is found, in the index where I found it\ngo to other product and show that product.\n- The lift of the product I want to buy is expected to be the highest\n    \"\"\"\n    for i, product in enumerate(sorted_rules[\"antecedents\"]):\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"])[0])\n\n    return recommendation_list[0:rec_count]\n","31a24bf8":"# gives recommendations by product.\narl_recommender(rules, 21988, 3)","76d5c158":"# Names of recommended products\ncheck_id(df, 21987)","b7f4f085":"# ASSOCIATION RULE LEARNING ","2b207b0c":"## 1. Data Preprocessing","9039450b":"<center><h1><strong><\/strong><\/h1>\n<img\nsrc=\"https:\/\/www.netclipart.com\/pp\/m\/380-3800206_market-basket-analysis-association-rule.png\" width =\"700\">\n<\/center>","7c3cfc50":"**OBJECTIVE**: To suggest products to users in the product purchasing process by applying association analysis to the online retail II dataset.","7f2ccfe6":"- Calculated only support with **apriori**\n- All other metrics calculated with **association rules**","3d2254df":"- min_support = thresholds value that we set.\n- use_colnames = use column names -> product ids will come","fb9ea631":"1. Data Preprocessing\n2. Preparing ARL Data Structure (Invoice-Product Matrix)\n3. Association Rule Learning","0505633d":"## 3. Association Rule Learning","cb2a3586":"- do according to StockCode if id is entered\n- If id is false, do it according to the description","c0dad104":"\n**Wanted**: \nLet there be only one invoice code in the rows and the names of the variables (products) in the columns.\n\n**Intersection**:\nIn intersections, only the information on whether there is a product in those invoices or not.\n\n**->** Not interested in how much\n\n**->** It is concerned with whether or not it exists.\n\n**->** In other words, the table should be pivoted.\n\n**->** The expressions in the description are requested to pass into the column.","96dcdc6a":"- Rows have baskets (Invoice), columns have products (Description).\n- If a product is in a basket, how many information does it have.\n- Required: lines should be written either present or absent (0 or 1)\n- NaN = 0 must be\n- NaN is padded with zero.","6bf193e2":"###  Making Product Suggestions to Users at the Basket Stage","0ce583c0":"## 2. Preparing ARL Data Structure (Invoice-Product Matrix)"}}