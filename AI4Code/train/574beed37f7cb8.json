{"cell_type":{"1aa60d60":"code","543559f5":"code","f9926e2f":"code","28a5e7c1":"code","7f25ffc8":"code","0fe640ab":"code","e5c707bc":"code","932bb78e":"code","8e28e1fc":"code","063bc188":"code","b6217544":"code","62264641":"code","d1651c01":"code","3bc59e06":"code","964cb2f4":"code","1997ebcb":"code","ef26bd18":"code","e3d15225":"code","a1b6d141":"code","93073c91":"code","f06a3f87":"code","c46cdc57":"code","3be00b22":"code","59c18e26":"code","17962c89":"code","f4d1b3ac":"code","a4977d15":"code","3d453e4e":"code","871d1815":"code","548e7787":"code","cb32b624":"code","2e777c65":"code","8eff0a71":"code","eead26e1":"code","34ea9974":"code","4dc4e3ee":"code","f29c1e88":"code","8d2f7122":"code","9d4a28dd":"code","79154c07":"code","bbc485af":"code","997cbe2a":"code","79a9c741":"code","926ce4c4":"code","d606ff3d":"code","56cde459":"code","1458f745":"code","f8eaaa59":"code","fe8131e9":"code","7de34f52":"code","6b893c7a":"code","2b7e3628":"code","c853b506":"code","08f286e0":"code","9ed400a6":"code","eba50730":"code","24cd32a6":"code","ecc78189":"code","aa36a06b":"code","9067da15":"code","50a2ba7e":"code","ab7c3ee8":"code","6e4877f2":"code","5f0a91f1":"code","73a0b518":"code","8fe382fe":"code","ab7da8bd":"code","a8a18058":"code","bce1f7c2":"code","4c7964e6":"code","10c5f0de":"code","fda766f1":"code","44fff88a":"code","542b0669":"markdown","16a78e55":"markdown","df9c0ef8":"markdown","71bf937e":"markdown","c8e8639a":"markdown","d84454bc":"markdown","c1efe3ff":"markdown","0d244e5e":"markdown","a5c90961":"markdown","e17b346b":"markdown","e3319737":"markdown","be99de03":"markdown","63967c53":"markdown","9bf18281":"markdown","fb6d812c":"markdown","abe99085":"markdown","7ddf9301":"markdown","fae32cf4":"markdown","e85b9069":"markdown","4344c848":"markdown","ab9d3d33":"markdown","489e68f5":"markdown","1a2faf2d":"markdown","ac568a94":"markdown","03f31e3e":"markdown","fd07da7f":"markdown","3f759c27":"markdown","4d8febb8":"markdown","361fb9d1":"markdown","dfd22e27":"markdown","c770e979":"markdown","49b68bdf":"markdown","64f8456a":"markdown","3a321093":"markdown","9635fcf4":"markdown","e84fa8ce":"markdown","2f3630de":"markdown","7b42ee21":"markdown","b9feeb1c":"markdown","1c238eeb":"markdown","82c30de9":"markdown","46729c2b":"markdown"},"source":{"1aa60d60":"import pandas as pd \nimport numpy as np\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('dark')\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n","543559f5":"train= pd.read_csv('..\/input\/titanic\/train.csv')\ntest= pd.read_csv('..\/input\/titanic\/test.csv')","f9926e2f":"train.info()","28a5e7c1":"train.head()","7f25ffc8":"train.dtypes","0fe640ab":"train.shape","e5c707bc":"test.describe()","932bb78e":"test.head()","8e28e1fc":"test.dtypes","063bc188":"test.shape","b6217544":"train.isnull().sum()","62264641":"train['Age'].median()\n\n","d1651c01":"train.isnull().sum()","3bc59e06":"train['Embarked'].mode()[0]","964cb2f4":"train['Age'].fillna(train['Age'].median(),inplace=True)","1997ebcb":"train['Embarked'].fillna(train['Embarked'].mode()[0],inplace= True)","ef26bd18":"train.isnull().sum()","e3d15225":"train.head()","a1b6d141":"test.head()","93073c91":"test.isnull().sum()","f06a3f87":"test['Age'].median()","c46cdc57":"test['Fare'].mode()[0]","3be00b22":"test['Age'].fillna(test['Age'].median() ,inplace= True)\ntest['Fare'].fillna(test['Fare'].mode()[0] , inplace= True)\ntest['Cabin'].fillna(test['Cabin'].mode()[0] , inplace= True)","59c18e26":"test.isnull().sum()","17962c89":"train.plot(kind='box', figsize=(10,8))","f4d1b3ac":"train.plot(kind='box', figsize= (10,8)) ","a4977d15":"test.plot(kind='box', figsize= (10,8))","3d453e4e":"test.plot(kind='box', figsize= (10,8))","871d1815":"train['Survived'].value_counts(normalize=True)","548e7787":"plt.figure(figsize=(10,5))\nplt.title('Survivors and Deads Count', fontsize=14)\nsns.countplot(x=train['Survived'], palette=('#C52219', '#23C552'))\nplt.xlabel(\"Survival & Dead Rate\", fontsize=12)\nplt.ylabel(\"Count\", fontsize=12)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","cb32b624":"train['Sex'].value_counts().to_frame()","2e777c65":"train.groupby('Sex').Survived.mean()","8eff0a71":"fig, axarr = plt.subplots(1, 2, figsize=(10,5))\na = sns.countplot(train['Sex'], ax=axarr[0], palette=('#003f7f','#ff007f')).set_title('Passengers count by sex')\naxarr[1].set_title('Survival rate by sex')\nb = sns.barplot(x='Sex', y='Survived', data=train, palette=('#003f7f','#ff007f'), ci=None, ax=axarr[1]).set_ylabel('Survival rate')","eead26e1":"train['Pclass'].value_counts().to_frame()","34ea9974":"train.groupby('Pclass').Survived.mean()","4dc4e3ee":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\na = sns.barplot(x='Pclass', y='Survived', data=train, palette=\"Greens\", ci=None, ax=axarr[0]).set_ylabel('Survival rate')\naxarr[0].set_title('Survival rate by class')\nb = sns.countplot(x='Pclass', hue='Survived', data=train, palette=('#C52219', '#23C552'), ax=axarr[1]).set_title('Survivors and deads count by class')\n","f29c1e88":"train.groupby(['Pclass', 'Sex']).Survived.mean().to_frame()","8d2f7122":"plt.figure(figsize = [10,5])\nplt.title('Survival rate by sex and class')\ng = sns.barplot(x='Pclass', y='Survived', hue='Sex', palette=('#003f7f','#ff007f'), ci=None, data=train).set_ylabel('Survival rate')","9d4a28dd":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\naxarr[0].set_title('Age distribution')\nf = sns.distplot(train['Age'], color='g', bins=40, ax=axarr[0])\naxarr[1].set_title('Age distribution for the two subpopulations')\ng = sns.kdeplot(train['Age'].loc[train['Survived'] == 1], color='#C52219',\n                shade= True, ax=axarr[1], label='Survived').set_xlabel('Age')\ng = sns.kdeplot(train['Age'].loc[train['Survived'] == 0], color='#23C552',\n                shade=True, ax=axarr[1], label='Not Survived')","79154c07":"plt.figure(figsize=(10,5))\ng = sns.swarmplot(y='Sex', x='Age', hue='Survived', palette=('#C52219', '#23C552'), data=train).set_title('Survived by age and sex')","bbc485af":"plt.figure(figsize=(10,5))\nh = sns.barplot(x='Pclass', y='Age', hue='Survived', palette=('#C52219', '#23C552'), ci=None, data=train).set_title('Survived by age and class')","997cbe2a":"train.Fare.describe().to_frame()","79a9c741":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\nf = sns.distplot(train.Fare, color='g', ax=axarr[0]).set_title('Fare distribution')\nfare_ranges = pd.qcut(train.Fare, 4, labels = ['Low', 'Mid', 'High', 'Very high'])\naxarr[1].set_title('Survival rate by fare category')\ng = sns.barplot(x=fare_ranges, y=train.Survived, palette='mako', ci=None, ax=axarr[1]).set_ylabel('Survival rate')","926ce4c4":"plt.figure(figsize=(10,5))\na = sns.swarmplot(x='Sex', y='Fare', hue='Survived', palette=('#C52219', '#23C552'), data=train).set_title('Survived by fare and sex')\n","d606ff3d":"train['Embarked'].value_counts().to_frame()","56cde459":"train.groupby('Embarked').Survived.mean().to_frame()","1458f745":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\nsns.countplot(train['Embarked'], palette='magma', ax=axarr[0]).set_title('Passengers count by boarding point')\np = sns.countplot(x = 'Embarked', hue = 'Survived', data = train, palette=('#C52219', '#23C552'),\n                  ax=axarr[1]).set_title('Survivors and deads count by boarding point')","f8eaaa59":"train.groupby(['Embarked', 'Pclass']).Survived.sum().to_frame()","fe8131e9":"plt.figure(figsize=(10,5))\ng = sns.countplot(data=train, x='Embarked', hue='Pclass', palette=\"twilight\").set_title('Pclass count by embarking point')","7de34f52":"train['Title'] = train['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntest['Title'] = test['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())","6b893c7a":"train['Title'].value_counts().to_frame()","2b7e3628":"test['Title'].value_counts().to_frame()","c853b506":"train['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ntest['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ntrain['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\ntest['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\n","08f286e0":"train.groupby('Title').Survived.mean()","9ed400a6":"plt.figure(figsize=(10,5))\nplt.title('Survival rate by Title')\ng = sns.barplot(x='Title', y='Survived', palette=\"magma\", ci=None, data=train).set_ylabel('Survival rate')","eba50730":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\na = sns.countplot(train['SibSp'], palette=\"magma\", ax=axarr[0]).set_title('Passengers count by SibSp')\naxarr[1].set_title('Survival rate by SibSp')\nb = sns.barplot(x='SibSp', y='Survived', data=train, palette=\"mako\", ci=None, ax=axarr[1]).set_ylabel('Survival rate')","24cd32a6":"plt.figure(figsize = [10,5])\nplt.title('Survival rate by SibSp')\nsns.countplot(x='SibSp', hue='Survived', palette=('#C52219', '#23C552'), data=train)","ecc78189":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\na = sns.countplot(train['Parch'], palette=\"magma\", ax=axarr[0]).set_title('Passengers count by Parch')\naxarr[1].set_title('Survival rate by Parch')\nb = sns.barplot(x='Parch', y='Survived', data=train, palette=\"mako\", ci=None, ax=axarr[1]).set_ylabel('Survival rate')","aa36a06b":"plt.figure(figsize = [10,5])\nplt.title('Survival rate by Parch')\nsns.countplot(x='Parch', hue='Survived', palette=('#C52219', '#23C552'), data=train)","9067da15":"train['Fam_size'] = train['SibSp'] + train['Parch'] + 1\ntest['Fam_size'] = test['SibSp'] + test['Parch'] + 1","50a2ba7e":"plt.figure(figsize=(10,5))\nplt.title('Survival rate by family size')\ng = sns.barplot(x='Fam_size', y='Survived', palette=\"magma\", ci=None, data=train).set_ylabel('Survival rate')","ab7c3ee8":"plt.figure(figsize=(10,5))\nplt.title('Survival rate by family size')\nsns.countplot(x='Fam_size', hue='Survived', data=train, palette=('#C52219', '#23C552'))","6e4877f2":"# Creation of four groups\ntrain['Fam_type'] = pd.cut(train.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])\ntest['Fam_type'] = pd.cut(test.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])","5f0a91f1":"plt.figure(figsize=(10,5))\nplt.title('Survival rate by family type')\ng = sns.barplot(x=train.Fam_type, y=train.Survived, palette='twilight', ci=None).set_ylabel('Survival rate')","73a0b518":"plt.figure(figsize=(10,5))\nplt.title('Survival rate by family type')\nsns.countplot(x='Fam_type', hue='Survived', data=train, palette=('#C52219', '#23C552'))","8fe382fe":"train['Ticket_lett'] = train.Ticket.apply(lambda x: x[:2])\ntest['Ticket_lett'] = test.Ticket.apply(lambda x: x[:2])","ab7da8bd":"train['Ticket_len'] = train.Ticket.apply(lambda x: len(x))\ntest['Ticket_len'] = test.Ticket.apply(lambda x: len(x))","a8a18058":"y = train['Survived']\nfeatures = ['Pclass', 'Fare', 'Title', 'Embarked', 'Fam_type', 'Ticket_len', 'Ticket_lett']\nX = train[features]\nX.head()","bce1f7c2":"numerical_cols = ['Fare']\ncategorical_cols = ['Pclass', 'Title', 'Embarked', 'Fam_type', 'Ticket_len', 'Ticket_lett']\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Bundle preprocessing and modeling code \ntitanic_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', RandomForestClassifier(random_state=0, n_estimators=500, max_depth=5))\n])\n\n# Preprocessing of training data, fit model \ntitanic_pipeline.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline, X, y, cv=10).mean()))","4c7964e6":"X_test = test[features]\nX_test.head()","10c5f0de":"# Preprocessing of test data, get predictions\npredictions = titanic_pipeline.predict(X_test)","fda766f1":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","44fff88a":"output.tail()","542b0669":"# **Embarked & Pclass**\n\n* Since we don't expect that a passenger's boarding point could change the chance of surviving, we guess this is probably due to the higher proportion of first and second class passengers for those who came from Cherbourg rather than Queenstown and Southampton.\n* To check this, we see the class distribution for the different embarking points.","16a78e55":"Since from the EDA I remember that we have missing values in both train and test data and multiple categorical variables to deal with, we can usepipelines to simplify all the work.","df9c0ef8":"* We see that around 65% of the passengers were male while the remaining 35% were female.\n* The important thing to notice here is that the survival rate for women was four times the survival rate for men and this makes Sex one of the most informative features.","71bf937e":"* Looking at the distribution of the titles, it might be convenient to move the really low-frequency ones into bigger groups.\n* After analyzing them, we can substitute all rare female titles with Miss and all rare male titles with Mr.","c8e8639a":"Let us fill the null values with mean, median or mode according to the requirements.","d84454bc":"Also after looking describe function, we noticed that the minimum value for Fare is zero and that is a bit strange.\nLet's see who these passengers are","c1efe3ff":"All we have to do now is convert them into the submission file!","0d244e5e":"train.describe()","a5c90961":"![](https:\/\/faithmag.com\/sites\/default\/files\/styles\/article_full\/public\/2018-09\/titanic2.jpg?h=6521bd5e&itok=H8td6QVv)","e17b346b":"There are no outliers in train dataset now. lets do it same for test data","e3319737":"We are now ready to make our predictions by simply calling the predict method on the test data.","be99de03":"# **Embarked**\n\n* Embarked tells us where a passenger boarded from.\n* There are three possible values for it: Southampton, Cherbourg and Queenstown.\n* In the training data, more than 70% of the people boarded from Southampton, slightly under 20% from Cherbourg and the rest from Queenstown.\n* Counting survivors by boarding point, we see that more people who embarked from Cherbourg survived than those who died.\n* People who Embarked from Southampton, most of them couldn't survive the disaster.","63967c53":"# Parch\n\nSimilar to the SibSp column, this feature contains the number of parents or children each passenger was traveling with.\nHere we draw the same conclusions as SibSp; we see again that small families had more chances to survive than bigger ones and passengers who traveled alone.","9bf18281":"# **Age & Sex**\n\n* At a first look, the relationship between Age and Survived appears not to be very clear, we notice for sure that there is a peak corresponding to young passengers for those who survived, but apart from that the rest is not very informative.","fb6d812c":"# Age\n\n* Despite this column contains a lot of missing values, we see that in the training data the average age was just under 30 years.\n* Here is the plot of the age distribution in general compared to the one for the survivors and the deads.","abe99085":"We see that in the training data only around 38.4% of the passengers managed to survive the disaster.","7ddf9301":"# Pclass\n\n* There were three classes on the ship and from the plot we see that the number of passengers in the third class was higher than the number of passengers in the first and second classes combined.\n* However, the survival rate by class is not the same, more than 60% of first-class passengers and around half of the second class passengers were rescued, whereas 75% of third class passengers were not able to survive the disaster.\n* For this reason, this is definitely an important aspect to consider.","fae32cf4":"# Sex","e85b9069":"I ran this file On 6th Mar, and as a result i got in to top 5%","4344c848":"Calculate ticket length","ab9d3d33":"# Family Size\n\n* Since we have two seemingly weak predictors, one thing we can do is combine them to get a stronger one.\n* In the case of SibSp and Parch, we can join the two variables to get a family size feature, which is the sum of SibSp, Parch and 1 (who is the passenger himself).\n* Creation of a new Fam_size column","489e68f5":"# **Fare & Sex**\n\n* Looking at the more detailed plot below, we also see for example that all males with fare between 200 and 300 died.\n* For this reason, we can left the Fare feature as it is in order to prevent losing too much information; at deeper levels of a tree, a more discriminant relationship might open up and it could become a good group detector.","1a2faf2d":"* From above tables, we can say that Age, Cabin and Embarked are missing in the train data set, while values in Age, Fare and Cabin are missing in the test data.","ac568a94":"# **SibSp**\n\n* SibSp is the number of siblings or spouses of a person aboard the Titanic.\n* We see that more than 90% of people traveled alone or with one sibling or spouse.\n* The survival rate between the different categories is a bit confusing but we see that the chances of surviving are lower for those who traveled alone or with more than 2 siblings.\n* Furthermore, we notice that no one from a big family with 5 or 8 siblings was able to survive.","03f31e3e":"Now, there are no outliers in the test dataset.","fd07da7f":"# Cabin and Ticket\n\n* The Cabin feature is somewhat problematic as there are many missing values.\n* We can not expect it to help our model too much.\n* On the other side, a correctly engineered Ticket column is the best way to find family groups.\n* Since it is a pity to delete it knowing its full potential, we can create two new columns; one for the ticket first two letters and the second one for the ticket length.","3f759c27":"> ","4d8febb8":"# Name\n\n* The Name column contains useful information as for example we could identify family groups using surnames.\n* In this notebook, however, we extracted only the passengers' title from it, creating a new feature for both train and test data.","361fb9d1":"Let's check for missing values in both training and test data.","dfd22e27":"# **Introduction**\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This is a very unforgetable disaster that no one in the world can forget.","c770e979":"Here is the final result. We have relatively high hopes for this new feature since the survival rate in most cases appears to be either significantly above or below the average survival rate, which should help our model.","49b68bdf":"# **Age, Pclass & Sex**\n\n* Another interesting thing to look at is the relation between Age, Pclass and Survived.\n* We see the influence of Pclass is the important one as there are no super clear horizontal patterns.\n* Also, we note that there were not many children in the first class.","64f8456a":"# **Fare**\n\n* From the description, we see that the Fare distribution is positively skewed, with 75% of data under 31 and a maximum of 512.\n* Just to understand better this feature, the simplest idea here could be creating fare ranges using quartiles.\n* At a first look, we notice that the higher the fare, the higher the possibility of surviving.","3a321093":"# Pclass & Sex\n\n* We can also see the survival rate by Sex and Pclass, which is quite impressive. First class and second class women who were rescued were respectively 97% and 92%, while the percentage drops to 50% for third-class women.\n* Despite that, this is still more than the 37% survival rate for first-class men.","9635fcf4":"# Modeling\n\n* We start by selecting the features we will use and isolating the target.\n* We will not consider Cabin and in the end, we also excluded Age as the relevant information which is being a young man is encoded in the Master title.\n* We also did not use Sex as it is not useful given the Title column: adult males and young children have the same sex but are really different categories as we saw before, so we don't want to confuse our algorithm.\n* If you don't extract the Title column, remember to put Sex in your models as it is pretty important!","e84fa8ce":"# Feature Analysis","2f3630de":"Let us find outliers in train and test data","7b42ee21":"* Here we'll see how our data used to perform a more precise feature selection in the modeling part.\n* We will thus explore one feature at a time in order to determine its importance in predicting if a passenger survived or not.","b9feeb1c":"Import Train and Test Data","1c238eeb":"Extract the first two letters","82c30de9":"Let's focus on the target(survival) and see how many passengers survived.","46729c2b":"# Family Type\n\n* To further summarize the previous trend, as our final feature, Let's create four groups for family size."}}