{"cell_type":{"d9ebd002":"code","2f296817":"code","975ed3d3":"code","48c3e9e5":"code","7523d9c5":"code","5d1dee4d":"code","f91c9d53":"code","af21581e":"code","981ca460":"code","95570a16":"code","760a9af3":"code","4e7af480":"code","98128ee9":"code","a345280e":"code","97dba8a1":"code","8f33fc10":"code","a24011c8":"code","e0f6f590":"code","34e6794f":"code","4ac1ebfc":"code","395440f3":"markdown","b328b091":"markdown","04f89c6c":"markdown","49714341":"markdown","e2dd4a24":"markdown","8c818279":"markdown","01fc59bd":"markdown","6a75da87":"markdown","0da403e1":"markdown","0e79fd2d":"markdown","85d3c148":"markdown"},"source":{"d9ebd002":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f296817":"\n%matplotlib inline\n\n# Start Python Imports\nimport math, time, random, datetime\n\n# Data Manipulation\nimport numpy as np\nimport pandas as pd\n\n# Visualization \nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\n# Preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\n\n# Machine learning\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.pipeline import make_pipeline\n\n\nfrom catboost import CatBoostClassifier, Pool, cv\n\n# Let's be rebels and ignore warnings for now\nimport warnings\nwarnings.filterwarnings('ignore')","975ed3d3":"train = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\n","48c3e9e5":"train","7523d9c5":"train.info()","5d1dee4d":"train.shape","f91c9d53":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False )","af21581e":"train.isnull().sum()\n","981ca460":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False )","95570a16":"# mark zero values as missing or NaN\ntrain.iloc[:,1:6] = train.iloc[:,1:6].replace(0, np.NaN)\n","760a9af3":"# Drop row if more than 2 values are missing.\ntrain.dropna(thresh=2, axis=0, inplace=True)\ntrain.shape","4e7af480":"\nimputer = SimpleImputer(missing_values = np.NAN, strategy = 'mean')\nimputer = imputer.fit(train.iloc[:,1:6])\ntrain.iloc[:,1:6] = imputer.transform(train.iloc[:,1:6])","98128ee9":"train","a345280e":"fig = train.hist(figsize=(9,9))\n","97dba8a1":"sns.countplot(y=\"Pregnancies\", data=train);","8f33fc10":"sns.countplot(y=\"Outcome\", data=train ,);","a24011c8":"X = train.iloc[:, :-1].values\ny = train.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, stratify=y, random_state = 5)\n","e0f6f590":"\n# Scaling features\nstandardscaler = StandardScaler()\nX_train = standardscaler.fit_transform(X_train)\nX_test = standardscaler.transform(X_test)","34e6794f":"LR =  LogisticRegression()\n\nLR.fit(X_train, y_train)\ny_pred = LR.predict(X_test)\nAcc = accuracy_score(y_test, y_pred)\n\nprint( 'Accuracy Logistic Regression:',Acc)\n\n","4ac1ebfc":"\nclassifier_pipeline = make_pipeline(StandardScaler(), LR)\nscores = cross_val_score(classifier_pipeline, X, y, cv=5)\nscores_cv=scores.mean()\n    \nprint('Accuracy Logistic Regression With K-fold :',scores_cv )","395440f3":"# read Data","b328b091":"Ok there are no Nan Data but there are Zero Data So it is Like Nan Data So We Solved it \n","04f89c6c":"Use K-fold Cross Validation ","49714341":"Prepare and Split Data","e2dd4a24":"# Check Missing Data","8c818279":"# Feature :Outcome                   ","01fc59bd":"# Analysis Data","6a75da87":"Build Model :Logistic Regression","0da403e1":"# imports","0e79fd2d":"Scale Data","85d3c148":"## Feature : Pregnancies    "}}