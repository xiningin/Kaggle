{"cell_type":{"4a610af4":"code","7d272ee2":"code","2ec7f62d":"code","f6908eaa":"code","bc7e769f":"code","c6920875":"code","4733156e":"code","b7ad581b":"code","9a5f0fe7":"markdown","d39b39c9":"markdown","61e2ea35":"markdown","f49e7366":"markdown","a3b214ea":"markdown","bbca1c9c":"markdown","0ef11a4d":"markdown"},"source":{"4a610af4":"import matplotlib.pyplot as plt\nimport numpy as np\n\n%matplotlib inline","7d272ee2":"def f(x):\n    return x**2+x+1","2ec7f62d":"x = np.linspace(start=-3, stop=3, num=500) #returns evenly spaced numbers over specified interval\n#print(x);","f6908eaa":"plt.xlim([-3,3])\nplt.ylim([0,8])\nplt.xlabel('x', fontsize=18,color='red');\nplt.ylabel('f(x)',fontsize=18,color='red');\nplt.plot(x,f(x));","bc7e769f":"def df(x):\n    return 2*x+1","c6920875":"plt.figure(figsize=[15, 5])\n\n#Graph for the function\nplt.subplot(1,2,1)\nplt.xlim([-3,3])\nplt.ylim([0,8])\nplt.title('Function')\nplt.xlabel('x', fontsize=18,color='red')\nplt.ylabel('f(x)',fontsize=18,color='red')\nplt.style.use('ggplot')\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 22}                          \nplt.rc('font', **font);\nplt.plot(x,f(x));\n\n#Graph for the slope\nplt.subplot(1,2,2)\nplt.title('Derivative of the function')\nplt.xlabel('x', fontsize=18,color='red')\nplt.ylabel('df(x)',fontsize=18,color='red')\nplt.xlim([-2,3])\nplt.ylim([-3,6])\nplt.style.use('ggplot')\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 22}                          \nplt.rc('font', **font);\nplt.plot(x,df(x),color='red');\n\n","4733156e":"start = 3\nprevious = 0\nlearningrate = 0.1\nprecision = 0.0001\nruncount =0\n\n\nx_list = [start]\ny_list = [df(start)]\n\n#stop the loop once we reach limit\nfor i in range(500):\n    previous  = start \n    #calculate the error (if the slope is very high which means it is very far from zero)\n    gradient = df(previous)\n    #print('slope at the point ' +str(previous)+' is '+ str(gradient))\n    start = previous - learningrate*gradient\n    \n    step_size = abs(start-previous)\n    x_list.append(start)\n    y_list.append(df(start))\n    print(step_size)\n    runcount = runcount+1\n    if(step_size<precision):break\n        \n    \n\nprint('Local Minimum is ', start)    \nprint('slope at the point is ', df(start))\nprint('f(x) is ',f(start))\nprint('loop ran ', runcount)\n    \n","b7ad581b":"plt.figure(figsize=[15, 5])\n\n#Graph for the function\nplt.subplot(1,2,1)\nplt.xlim([-3,3])\nplt.ylim([0,8])\nplt.title('Function')\nplt.xlabel('x', fontsize=18,color='red')\nplt.ylabel('f(x)',fontsize=18,color='red')\nplt.style.use('ggplot')\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 22}                          \nplt.rc('font', **font)\nplt.plot(x,f(x),alpha=0.8);\n\n#Just the below two lines added to superimpose the scatter plot on the existing image\nvalues = np.array(x_list)\nplt.scatter(x_list, f(values), color='green', s=100, alpha=0.6); #scatter plot the previous results\n\n#Graph for the slope\nplt.subplot(1,2,2)\nplt.title('Derivative of the function')\nplt.xlabel('x', fontsize=18,color='red')\nplt.ylabel('df(x)',fontsize=18,color='red')\nplt.xlim([-2,3])\nplt.ylim([-3,6])\nplt.style.use('ggplot')\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 22}                          \nplt.rc('font', **font)\nplt.plot(x,df(x),color='red');\nplt.scatter(x_list, y_list,color='blue',s=100,alpha=0.6);\n\n","9a5f0fe7":"#### To recall, we need to find the point where the slop stops to change when we descend from the right side of the parabola","d39b39c9":"\n\n## $f(x) = x^2 + x +1$","61e2ea35":"# Study about functions and Gradient descent","f49e7366":"### Idea : The point where the slop stops to change when we descend from the right side of the parabola","a3b214ea":"The derivate of the function $f(x) = x^2 + x +1$ is $2x+1$ , so creating a python function for that","bbca1c9c":"# Finding the lowest steep","0ef11a4d":"#### Superimpose the previous outputs on the graph"}}