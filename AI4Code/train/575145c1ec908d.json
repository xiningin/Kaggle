{"cell_type":{"59680d31":"code","0bf5fbd0":"code","791bb44d":"code","d978c598":"code","21c27a5e":"code","cded5170":"code","da423d7e":"code","2a0c3ae0":"code","ef52d957":"code","a25fe408":"code","6bc26ec7":"code","fd28d5ba":"code","5b74a9d0":"code","4951bfe7":"code","6d0adef7":"code","ee167846":"code","9a6f43fa":"code","524f7d06":"code","b9e71f27":"code","cdad1f0e":"code","8832b807":"code","6c16fc15":"code","86a10006":"code","70677348":"code","14fcd58e":"code","30a5c263":"code","5d478a35":"code","8b2b99c5":"code","f052b282":"code","41dd646c":"code","f1595cdc":"code","0a127603":"code","6d9b6eaa":"code","08ab4d24":"code","81361291":"code","0ff28126":"code","fe04d5ed":"code","bba7d2e4":"code","49321cf6":"code","6c018223":"code","2cc5635e":"code","44b9ed65":"markdown","9dae701e":"markdown","9acb1e56":"markdown","8c25b7c9":"markdown","b9652696":"markdown"},"source":{"59680d31":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, cross_val_score\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.svm import SVR\nimport sklearn.neural_network\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures, RobustScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.decomposition import PCA","0bf5fbd0":"### Para que funcione necesitas bajarte los archivos de datos de Kaggle \ndf = pd.read_csv(\"diamonds_train.csv\", index_col=0)","791bb44d":"df.info()","d978c598":"df.head()","21c27a5e":"sns.histplot(data=df['price'])","cded5170":"fig, ax = plt.subplots(ncols=4, figsize=(20, 5))\nsns.boxplot(ax=ax[0], data=df['price'], orient='h')\nax[0].set_xlabel('price')\nsns.boxplot(ax=ax[1], data=df['carat'], orient='h')\nax[1].set_xlabel('carat')\nsns.boxplot(ax=ax[2], data=df['depth'], orient='h')\nax[2].set_xlabel('depth')\nsns.boxplot(ax=ax[3], data=df['table'], orient='h')\nax[3].set_xlabel('table')","da423d7e":"df.shape","2a0c3ae0":"df = df[~(df['carat'] > 3)]\ndf = df[~((df['table'] < 50) | (df['table'] > 80))]\ndf = df = df[~((df['depth'] < 50) | (df['depth'] > 75))]","ef52d957":"df.shape","a25fe408":"sns.heatmap(df.corr(), annot=True)","6bc26ec7":"df['cut'].unique()","fd28d5ba":"df['color'].unique()","5b74a9d0":"df['clarity'].unique()","4951bfe7":"diccionario_cut = {'Fair': 0, 'Good': 1, 'Very Good': 2, 'Premium': 3, 'Ideal': 4}\ndf['cut'] = df['cut'].apply(lambda x: diccionario_cut[x])\ndiccionario_color = dict(zip(['D', 'E', 'F', 'G', 'H', 'I', 'J'], [6, 5, 4, 3, 2, 1, 0]))\ndf['color'] = df['color'].apply(lambda x: diccionario_color[x])\ndiccionario_clarity = dict(zip(['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1'], [7, 6, 5, 4, 3, 2, 1, 0]))\ndf['clarity'] = df['clarity'].apply(lambda x: diccionario_clarity[x])","6d0adef7":"df.head()","ee167846":"seed = 42\n# Hacemos un gr\u00e1fico por columna y grado del polinomio\nfor i in range(len(df.columns) - 1):\n    fig, ax = plt.subplots(ncols=4, figsize=(20, 5), sharey=True)\n    fig.suptitle(f'{df.columns[i]}')\n    X_train, X_test, y_train, y_test = train_test_split(df[df.columns[i]].values.reshape(-1, 1), df['price'], test_size=0.2,random_state=seed)\n\n    for k in range(1, 5):\n        model = LinearRegression()\n        poly_transform = PolynomialFeatures(degree=k)\n        X_poly = poly_transform.fit_transform(X_train, y_train)\n        model.fit(X_poly, y_train)\n        X_train_show, y_train_show = zip(*(sorted(zip(X_train, model.predict(X_poly)))))\n        ax[k - 1].scatter(X_train, y_train, alpha=0.5)\n        ax[k - 1].plot(X_train_show, y_train_show, c='red')\n        ax[k - 1].set_title(f'{k} degree')\n        ax[k - 1].set_ylabel(f'Precio')\n        ax[k - 1].annotate(f'score = {round(model.score(X_poly, y_train), 2)}', xy=(0.05, 0.95), xycoords='axes fraction')","9a6f43fa":"#df = df[~(df['x'] < 2)]\n#df = df[~((df['y'] < 1) | (df['y'] > 80))]\n#df = df = df[~((df['z'] < 1.5) | (df['z'] > 7))]","524f7d06":"df = df.drop(['depth'], axis=1)","b9e71f27":"target = df['price']\ndf = df.drop('price', axis=1)","cdad1f0e":"df.head()","8832b807":"scaler = RobustScaler()\ndf = scaler.fit_transform(df)","6c16fc15":"pca = PCA()\npca.fit(df)\nfig, ax = plt.subplots()\nax.plot(np.cumsum(pca.explained_variance_ratio_))\nax.set_xlabel('number of components')\nax.set_ylabel('cumulative explained variance')\nax.axvline(4, c='green', alpha=0.3)","86a10006":"#------NO USADO------\n#pca = PCA(n_components=4)\n#df = pca.fit_transform(df)","70677348":"df_pred = pd.read_csv(\"diamonds_test.csv\", index_col=0)","14fcd58e":"df_pred.head()","30a5c263":"df_pred = df_pred.drop(['depth'], axis=1)\ndf_pred['cut'] = df_pred['cut'].apply(lambda x: diccionario_cut[x])\ndf_pred['color'] = df_pred['color'].apply(lambda x: diccionario_color[x])\ndf_pred['clarity'] = df_pred['clarity'].apply(lambda x: diccionario_clarity[x])\ndf_pred = scaler.transform(df_pred)\n#df_pred = pca.transform(df_pred) #--> No hacemos esta tranformaci\u00f3n","5d478a35":"seed = 42\nX_train, X_test, y_train, y_test = train_test_split(df, target.values.reshape(-1, 1), test_size=0.2, random_state=seed) ","8b2b99c5":"nnc = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(1250,), alpha=1e-05, learning_rate='constant', solver='lbfgs', \nmax_iter=1000, tol=1e-6, verbose=True)\nnnc.fit(X_train, y_train)\nmean_squared_error(y_test, nnc.predict(X_test), squared=False)","f052b282":"nnc = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(1200,), alpha=1e-05, learning_rate='constant', solver='lbfgs', \nmax_iter=1200, tol=1e-6, verbose=True)\nnnc.fit(df, target)","41dd646c":"mean_squared_error(target, nnc.predict(df), squared=False)","f1595cdc":"predictions_submit = nnc.predict(df_pred)\npredictions_submit","0a127603":"predictions_submit.shape","6d9b6eaa":"sample = pd.read_csv(\"sample_submission.csv\")","08ab4d24":"sample.head()","81361291":"sample.shape","0ff28126":"submission = pd.DataFrame({\"id\": range(len(predictions_submit)), \"price\": predictions_submit})","fe04d5ed":"submission.head()","bba7d2e4":"submission.shape","49321cf6":"def chequeator(df_to_submit):\n    \"\"\"\n    Esta funci\u00f3n se asegura de que tu submission tenga la forma requerida por Kaggle.\n    \n    Si es as\u00ed, se guardar\u00e1 el dataframe en un `csv` y estar\u00e1 listo para subir a Kaggle.\n    \n    Si no, LEE EL MENSAJE Y HAZLE CASO.\n    \n    Si a\u00fan no:\n    - apaga tu ordenador, \n    - date una vuelta, \n    - enciendelo otra vez, \n    - abre este notebook y \n    - leelo todo de nuevo. \n    Todos nos merecemos una segunda oportunidad. Tambi\u00e9n t\u00fa.\n    \"\"\"\n    if df_to_submit.shape == sample.shape:\n        if df_to_submit.columns.all() == sample.columns.all():\n            if df_to_submit.id.all() == sample.id.all():\n                print(\"You're ready to submit!\")\n                submission.to_csv(\".\/submission.csv\", index = False)     \n            else:\n                print(\"Check the ids and try again\")\n        else:\n            print(\"Check the names of the columns and try again\")\n    else:\n        print(\"Check the number of rows and\/or columns and try again\")\n        print(\"\\nMensaje secreto de Clara: No me puedo creer que despu\u00e9s de todo este notebook hayas hecho alg\u00fan cambio en las filas de `diamonds_test.csv`. Lloro.\")\n","6c018223":"chequeator(submission)","2cc5635e":"# import pickle\n#\n# pickle.dump(nnc, open('modelo.p', 'wb'))","44b9ed65":"Modelo","9dae701e":"![image](competi.png)","9acb1e56":"### 2. Carga los datos de `diamonds_test.csv` para predecir.\n\n**\u00bfDe d\u00f3nde saco `diamonds_test.csv`?**","8c25b7c9":"Hacemos todas las transformaciones con el de predicci\u00f3n","b9652696":"## Predicci\u00f3n "}}