{"cell_type":{"5c02c33f":"code","1c327865":"code","57352753":"code","da319036":"code","95617645":"code","1364a21e":"code","b1492bbd":"code","208d4e9b":"code","ddf43b59":"code","46b8bf8d":"code","116db3d2":"code","1302a6c5":"code","e8490912":"code","1a3ae9e7":"code","07699985":"code","60dc3174":"code","fa6f8a8c":"code","e37dea23":"code","3463e374":"code","3399e21a":"code","295ba00b":"code","c0ee3095":"code","1cde5481":"code","2ad3ff1a":"code","4855c7dc":"code","1618044b":"code","2e704ab8":"code","21b9a5fb":"code","90c4971b":"code","66d8435d":"code","2f66d8d7":"code","f407ff19":"code","df5e261d":"code","fc96a3c0":"code","2629f2e2":"code","ee1f4623":"code","cef49b56":"code","d225d5ea":"code","06de4e1e":"code","50de4a20":"code","04d49ac7":"code","bb89121d":"code","6c4f63eb":"code","b34366db":"code","0230b3bf":"code","0b3607d9":"code","eae07eae":"code","0afa5ff1":"code","77c2347c":"code","2aca4d4e":"code","4f6b1cca":"code","100db14a":"code","bf81d60d":"code","3c47da31":"code","5ff46cc2":"code","9388348e":"code","c9f24eca":"code","958ca7cc":"code","1484acd6":"code","c56b71ff":"code","ed471923":"code","b1ddd5ea":"code","b565f0bf":"code","e1b5cd2a":"code","ded58cb1":"code","d00deedb":"code","5b6ce17b":"code","78edabc0":"code","1161f199":"code","96c86ea8":"code","7f886013":"code","d28f8bfc":"code","a05acdf2":"code","0317ef6f":"code","469ded67":"code","89a27161":"code","9753f9f5":"code","01581400":"code","d8f63d37":"code","1cee6574":"code","75c4da56":"code","02aa8962":"code","2e2e1507":"code","f9faf919":"code","6161c3e1":"code","b6e1b57d":"code","d9508f06":"code","594c88e1":"code","e4248fdf":"code","02e5c9fa":"code","14580c22":"code","24fe63b5":"code","7331f799":"code","5331aa59":"code","be7c1ab2":"code","577caaa8":"code","65f33143":"code","561d414b":"code","5a810346":"code","68dffa82":"code","5040acf6":"code","d93798cd":"code","d42b6286":"code","fa15b03f":"code","a3cf3980":"code","db777f12":"code","8955d2d2":"code","afc0e447":"code","2a102b36":"code","a41be494":"code","a621f724":"code","508b53f9":"code","20fe2c09":"code","c5ac0550":"code","812666a1":"code","a17ae930":"markdown","72b79338":"markdown","b9cd830f":"markdown","f5dc4e76":"markdown","0fd007a8":"markdown","204b00d2":"markdown","955c1ee3":"markdown","e120acd1":"markdown","93d6369e":"markdown","ae03aa7b":"markdown","d6d368a3":"markdown","06eb7f0b":"markdown","6be1eb2b":"markdown","5b196001":"markdown","9557ca62":"markdown","16565374":"markdown","c291a606":"markdown","7df500bb":"markdown","50138e31":"markdown","b553418a":"markdown","fd4ece5c":"markdown","92c6e97d":"markdown","e60e19d9":"markdown","93c4b215":"markdown","3211c54e":"markdown","8b8e96e2":"markdown","8f2ccafb":"markdown","c0521d98":"markdown","96e8f33d":"markdown","bf988804":"markdown","0ed4e8e0":"markdown","7fdbfb26":"markdown","b1fcee76":"markdown","9f54ceba":"markdown","bc0f0044":"markdown","75d88065":"markdown","b20572ad":"markdown","a10826f2":"markdown","2b2e2c97":"markdown","120c2271":"markdown","3e7240dc":"markdown","c3d779fe":"markdown"},"source":{"5c02c33f":"import numpy as np","1c327865":"list = [1,2,3]\nprint(list)","57352753":"#converting list to numpy array\nnp.array(list)","da319036":"my_matrix = [[1,2,3],[4,5,6],[7,8,9]]\nmy_matrix","95617645":"np.array(my_matrix)","1364a21e":"np.arange(0,10)","b1492bbd":"np.arange(0,11,2)","208d4e9b":"np.arange(12)","ddf43b59":"#2d Array\n#reshaping in 4 rows and 3 columns\nnp.arange(12).reshape(4,3)","46b8bf8d":"#3d Array\nnp.arange(24).reshape(2, 3, 4)","116db3d2":"a = np.array([20,30,40,50])\nb = np.arange(4)\nc = a-b\nprint(c)","1302a6c5":"b**2","e8490912":"10 * np.sin(a)","1a3ae9e7":"a<35","07699985":"A = np.array([[1,1],[0,1]])\nB = np.array([[2,0],[3,4]])\n\nprint(A*B) #elementwise product\nprint(A@B) #matrix product\nprint(A.dot(B)) #another matrix product","60dc3174":"np.zeros(3)","fa6f8a8c":"np.zeros((5,5))","e37dea23":"np.ones(3)","3463e374":"np.ones((7,7))","3399e21a":"np.linspace(0,10,3)","295ba00b":"np.linspace(0,10,50)","c0ee3095":"np.eye(4)","1cde5481":"np.random.rand(2)","2ad3ff1a":"np.random.rand(5,5)","4855c7dc":"np.random.randn(2)","1618044b":"np.random.randn(5,5)","2e704ab8":"np.random.randint(1,100)","21b9a5fb":"np.random.randint(1,100,10)","90c4971b":"arr = np.arange(25)\nranarr = np.random.randint(0,50,10)","66d8435d":"arr","2f66d8d7":"ranarr","f407ff19":"arr.reshape(5,5)","df5e261d":"a = np.arange(6)\nprint(a)","fc96a3c0":"b = a.reshape(3,2)\nprint(b)","2629f2e2":"np.reshape(a, newshape=(1,6), order='C')","ee1f4623":"ranarr","cef49b56":"ranarr.max()","d225d5ea":"ranarr.argmax()","06de4e1e":"ranarr.min()","50de4a20":"ranarr.argmin()","04d49ac7":"arr","bb89121d":"#vector\narr.shape","6c4f63eb":"#Notice the two sets of brackets\narr.reshape(1,25)","b34366db":"arr.reshape(1,25).shape","0230b3bf":"arr.reshape(25,1)","0b3607d9":"arr.reshape(25,1).shape","eae07eae":"array_example = np.array([[[0, 1, 2, 3],\n                           [4, 5, 6, 7]],\n\n                          [[0, 1, 2, 3],\n                           [4, 5, 6, 7]],\n\n                          [[0 ,1 ,2, 3],\n                           [4, 5, 6, 7]]])","0afa5ff1":"array_example.ndim","77c2347c":"array_example.size","2aca4d4e":"arr.dtype","4f6b1cca":"ranarr = np.random.randint(0,50,10)\nranarr","100db14a":"ranarr.max()","bf81d60d":"ranarr.min()","3c47da31":"ranarr.argmax()","5ff46cc2":"ranarr.argmin()","9388348e":"arr + arr","c9f24eca":"arr * arr","958ca7cc":"arr - arr","1484acd6":"arr\/arr","c56b71ff":"1\/arr","ed471923":"arr**3","b1ddd5ea":"#taking square roots\nnp.sqrt(arr)","b565f0bf":"#taking maximum number in an array\nnp.max(arr)","e1b5cd2a":"np.min(arr)","ded58cb1":"np.argmax(arr)","d00deedb":"np.argmin(arr)","5b6ce17b":"#Calculating sin theta a trignometric function \nnp.sin(arr)","78edabc0":"#Calcualting exponential (e^)\nnp.exp(arr)","1161f199":"#Calculating Logarithms\nnp.log(arr)","96c86ea8":"np.empty(2)","7f886013":"arr = np.array([2, 1, 5, 3, 7, 4, 6, 8])\narr","d28f8bfc":"np.sort(arr)","a05acdf2":"np.argsort(arr)","0317ef6f":"np.lexsort(arr)","469ded67":"np.searchsorted(arr,4)","89a27161":"np.partition(arr,2)","9753f9f5":"a = np.array([1, 2, 3, 4])\nb = np.array([5, 6, 7, 8])","01581400":"np.concatenate((a,b))","d8f63d37":"x = np.array([[1, 2], [3, 4]])\ny = np.array([[5, 6]])","1cee6574":"np.concatenate((x,y), axis=0)","75c4da56":"a = np.array([1,2,3,4,5,6])\na.shape","02aa8962":"a2 = a[np.newaxis,:]\na2.shape","2e2e1507":"row_vector = a[np.newaxis,:]\nrow_vector.shape","f9faf919":"col_vector = a[:,np.newaxis]\ncol_vector.shape","6161c3e1":"a = np.array([1,2,3,4,5,6])\na.shape","b6e1b57d":"b = np.expand_dims(a, axis=1)\nb.shape","d9508f06":"c = np.expand_dims(a, axis=0)\nc.shape","594c88e1":"data = np.array([1,2,3])\n","e4248fdf":"data[1]","02e5c9fa":"data[0:2]","14580c22":"data[1:]","24fe63b5":"data[-2:]","7331f799":"a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])","5331aa59":"print(a[a < 5])","be7c1ab2":"five_up = (a >= 5)\n\nprint(a[five_up])","577caaa8":"divisible_by_2 = a[a%2==0]\n\nprint(divisible_by_2)","65f33143":"c = a[(a > 2) & (a < 11)]\n\nprint(c)","561d414b":"five_up = (a > 5) | (a == 5)\n\nprint(five_up)","5a810346":"b = np.nonzero(a < 5)\n\nprint(b)","68dffa82":"list_of_coordinates= zip(b[0], b[1])\n\nfor coord in list_of_coordinates:\n    print(coord)","5040acf6":"print(a[b])","d93798cd":"not_there = np.nonzero(a == 42)\n\nprint(not_there)","d42b6286":"a = np.array([1,  2,  3,  4,  5,  6,  7,  8,  9, 10])","fa15b03f":"arr1 = a[3:8]\narr1","a3cf3980":"a1 = np.array([[1, 1],\n\n               [2, 2]])\n\na2 = np.array([[3, 3],\n\n               [4, 4]])","db777f12":"np.vstack((a1,a2))","8955d2d2":"np.hstack((a1, a2))","afc0e447":"x = np.arange(1, 25).reshape(2, 12)\nx","2a102b36":"#If you wanted to split this array into three equally shaped arrays, you would run:\nnp.hsplit(x, 3)","a41be494":"# If you wanted to split your array after the third and fourth column, you\u2019d run:\nnp.hsplit(x,(3,4))","a621f724":"a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])","508b53f9":"b1 = a[0, :]\nb1","20fe2c09":"b1[0] = 99\nb1","c5ac0550":"a","812666a1":"b2 = a.copy()\nb2","a17ae930":"# randint\nReturn random integers from low (inclusive) to high (exclusive).","72b79338":"### You may want to take a section of your array or specific array elements to use in further analysis or additional operations. To do that, you\u2019ll need to subset, slice, and\/or index your arrays.","b9cd830f":"# Adding, removing, and sorting elements\nThis section covers np.sort(), np.concatenate()","f5dc4e76":"# How to create an array from existing data\n\n### This section covers slicing and indexing, np.vstack(), np.hstack(), np.hsplit(), .view(), copy()","0fd007a8":"## Concatenation","204b00d2":"# Random\nNumpy also has lots of ways to create random number arrays:\n\n# rand\nCreate an array of the given shape and populate it with random samples from a uniform distribution over `[0,1]`.","955c1ee3":"In addition to sort, which returns a sorted copy of an array, you can use:\n\n<li>argsort, which is an indirect sort along a specified axis,<\/li>\n\n<li>lexsort, which is an indirect stable sort on multiple keys,<\/li>\n\n<li>searchsorted, which will find elements in a sorted array, and<\/li>\n\n<li>partition, which is a partial sort.<\/li>","e120acd1":"# dtype\nYou can also grab the data type of the object in the array.","93d6369e":"You can also expand an array by inserting a new axis at a specified position with np.expand_dims.","ae03aa7b":"Once installed import Numpy as a library to use all functions of numpy.","d6d368a3":"### a tuple of arrays was returned: one for each dimension. The first array represents the row indices where these values are found, and the second array represents the column indices where the values are found.\n\n### If you want to generate a list of coordinates where the elements exist, you can zip the arrays, iterate over the list of coordinates, and print them. For example:","06eb7f0b":"![np_indexing.png](attachment:a9f3633f-d914-4b81-8c32-4aa55fadb5d1.png)","6be1eb2b":"# max, min, argmax, argmin\nThese are useful methods for finding max or min values. Or to find their index locations using argmin or argmax.","5b196001":"### You can stack them vertically with vstack:","9557ca62":"# Linspace\nReturn evenly spaced numbers over a specified interval.","16565374":"<strong>a<\/strong> is the array to be reshaped.\n\n<strong>newshape<\/strong> is the new shape you want. You can specify an integer or a tuple of integers. If you specify an integer, the result will be an array of that length. The shape should be compatible with the original shape.\n\n<strong>order:<\/strong> C means to read\/write the elements using C-like index order, F means to read\/write the elements using Fortran-like index order, A means to read\/write the elements in Fortran-like index order if a is Fortran contiguous in memory, C-like order otherwise. (This is an optional parameter and doesn\u2019t need to be specified.)","c291a606":"To Install Numpy in Anaconda use the command `conda install numpy` or do a pip install in command prompt `pip install numpy`.","7df500bb":"## Shape\nShape is an attribute that arrays have (not a method):","50138e31":"# Creating Empty Array\n\nThe function empty creates an array whose initial content is random and depends on the state of the memory. The reason to use numpy.empty over numpy.zeros (or something similar) is speed - just make sure to fill every element afterwards!","b553418a":"## Size\nsize will tell you the total number of elements of the array. This is the product of the elements of the array\u2019s shape.","fd4ece5c":"# Eye\nCreates an identity matrix","92c6e97d":"# How do you know the shape and size of an array?\n\nThis section covers ndarray.ndim, ndarray.size, ndarray.shape\n\nndarray.ndim will tell you the number of axes, or dimensions, of the array.\n\nndarray.size will tell you the total number of elements of the array. This is the product of the elements of the array\u2019s shape.\n\nndarray.shape will display a tuple of integers that indicate the number of elements stored along each dimension of the array. If, for example, you have a 2-D array with 2 rows and 3 columns, the shape of your array is (2, 3).","e60e19d9":"# max,min,argmax,argmin\n\n<p>These are useful methods for finding max or min values. Or to find their index locations using argmin or argmax<\/p>","93c4b215":"# randn\nReturn a sample (or samples) from the \"standard normal\" distribution. Unlike rand which is uniform:","3211c54e":"### Using the copy method will make a complete copy of the array and its data (a deep copy). To use this on your array, you could run:","8b8e96e2":"# Numpy Operations\n\n## Arithmetic\nYou can easily perform array with array arithmetic, or scalar with array arithmetic. Let's see some examples:","8f2ccafb":"# Universal Array Functions\nNumpy comes with many universal array functions, which are essentially just mathematical operations you can use to perform the operation across the array. Let's show some common ones:","c0521d98":"### You can also stack two existing arrays, both vertically and horizontally. Let\u2019s say you have two arrays, a1 and a2:","96e8f33d":"You can explicitly convert a 1D array with either a row vector or a column vector using np.newaxis. For example, you can convert a 1D array to a row vector by inserting an axis along the first dimension:","bf988804":"Unlike in many matrix languages, the product operator * operates elementwise in NumPy arrays. The matrix product can be performed using the @ operator (in python >=3.5) or the dot function or method:","0ed4e8e0":"# Built In Methods\n\nThere are lots of built in ways to generate Arrays","7fdbfb26":"### You can use the <strong>view<\/strong> method to create a new array object that looks at the same data as the original array (a shallow copy).\n\n### Views are an important NumPy concept! NumPy functions, as well as operations like indexing and slicing, will return views whenever possible. This saves memory and is faster (no copy of the data has to be made). However it\u2019s important to be aware of this - modifying data in a view also modifies the original array!\n\n### Let\u2019s say you create this array:","b1fcee76":"You can visulaize it in this way:","9f54ceba":"# Introduction to Numpy\n\nNumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I\/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.\n\n","bc0f0044":"# How to convert a 1D array into a 2D array (how to add a new axis to an array)\n\n<font size=5> This section covers np.newaxis, np.expand_dims<br>\n<br>\nYou can use np.newaxis and np.expand_dims to increase the dimensions of your existing array.<br>\n<br>\nUsing np.newaxis will increase the dimensions of your array by one dimension when used once. This means that a 1D array will become a 2D array, a 2D array will become a 3D array, and so on.<br><\/font>","75d88065":"# Zeroes and Ones\nGenerate arrays of zeroes and ones","b20572ad":"# Reshape\nReturns an array containing the same data with a new shape.","a10826f2":"# Arange Function\nReturn evenly spaced values within a given interval.","2b2e2c97":"# Basic Operators\nArithimetic operators on arrays apply elementwise. A new array is created and filled with the result.","120c2271":"## ndim\nnumber of axes, or dimensions, of the array.","3e7240dc":"# Array Attributes and Methods\nLet's discuss some useful attributes and methods or an array:","c3d779fe":"# Indexing and slicing\nYou can index and slice NumPy arrays in the same ways you can slice Python lists."}}