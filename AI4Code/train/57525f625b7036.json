{"cell_type":{"fa519894":"code","8d7ab542":"code","d35ba891":"code","8cc79b3d":"code","01a14ac1":"code","e4f0c077":"code","b56d09bd":"code","12504431":"code","3b161b79":"code","521a2350":"code","c4e8455f":"code","0f004054":"code","b3142514":"code","91c92de0":"code","3ad684f0":"code","d9e0c2a6":"code","6079f21d":"code","a8151c32":"code","bee8b76a":"code","40ac3c7f":"code","4fa4e697":"code","fe4a2f0f":"code","90e15168":"code","bf991034":"code","99b6a90f":"code","e943d20f":"code","49841c0b":"code","080acdae":"code","ebdd7c08":"code","45dba8e1":"code","8249a1b1":"code","2ea94f38":"code","c9cf119b":"code","7e960a6a":"code","b67a0735":"code","108b8a59":"code","5ef3c0f9":"code","06d4f9a0":"code","ea141c66":"code","3441e5f8":"code","a5003776":"code","3a5b317d":"code","d2aad722":"code","f86a611a":"code","cdccb00d":"code","a8b55b5f":"code","4c0baed6":"code","3374589f":"code","393343d5":"code","357beb25":"code","05793964":"code","f5a1d878":"code","6e07ea2c":"code","23ebb1bf":"code","6ff3aeb1":"code","1b8b41ce":"code","d49b14d3":"code","a54d1838":"code","cdc37359":"code","acdc7c18":"code","300c13da":"code","5947dfa0":"code","84899f35":"code","a69bfd7f":"code","6ef614f9":"code","ab3904bb":"code","8383703a":"code","d09302ea":"code","75ca47a6":"code","f8519aa5":"code","95e3c05b":"code","1e42b735":"code","58dfc334":"code","8fd65a87":"code","d7dc3090":"code","143e2d9f":"code","c0649566":"code","066d0fd0":"code","56f2d221":"markdown","9a9f263b":"markdown","b8d3821d":"markdown","22919f7a":"markdown","73a5d1d7":"markdown","c9a1f18b":"markdown","1639b243":"markdown","7385f616":"markdown","6129ecf9":"markdown","a2462319":"markdown","f31770c8":"markdown","65f9038c":"markdown","4e76cced":"markdown","34903e0a":"markdown","4e665064":"markdown","32586b8a":"markdown","e6328e90":"markdown","58dc475e":"markdown","d6593bd0":"markdown","933304a2":"markdown","b8e59bd1":"markdown","791d2e4e":"markdown","48b1b034":"markdown","52c9caff":"markdown","13161523":"markdown","f6006323":"markdown","b741cac9":"markdown","307a3658":"markdown","a9413a39":"markdown","05247748":"markdown","da2c7c8f":"markdown","92ad6b25":"markdown","b7766a23":"markdown","68c86152":"markdown","d4d77663":"markdown","48b37a6d":"markdown","c56f086e":"markdown","65ecef70":"markdown","87495ccc":"markdown","5301f76d":"markdown","fba0a39c":"markdown","7dd7f038":"markdown","8d2e56d3":"markdown","e9280073":"markdown","328d645e":"markdown","cd089925":"markdown","f5fac48f":"markdown","e97b9a0b":"markdown","71907bb4":"markdown","0e699630":"markdown","4f14a295":"markdown","0dd60934":"markdown","b7ecd52c":"markdown","2455ef2e":"markdown","917e8baa":"markdown","972f9ceb":"markdown","b816a545":"markdown","e5064435":"markdown","8adb8402":"markdown","d05a5d86":"markdown","b8eab309":"markdown","dcbfa4a1":"markdown","cf1b1fff":"markdown"},"source":{"fa519894":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d7ab542":"import pandas as pd \nimport numpy as np\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nsns.set_style('dark')\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nprint('Setup complete')\nbest=0\norg_best=0","d35ba891":"# Load and display Train data\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_data.head()","8cc79b3d":"train_data.shape","01a14ac1":"# Load and display Test data\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data.head()","e4f0c077":"test_data.shape","b56d09bd":"train_data.info()","12504431":"test_data.info()","3b161b79":"total = train_data.isnull().sum().sort_values(ascending=False)\npercent = (train_data.isnull().sum()\/train_data.isnull().count()*100).sort_values(ascending=False)\nmissing_data = pd.concat([total,percent],axis=1,keys=['Total missing Values','Percent of Missing values'])\nmissing_data","521a2350":"total = test_data.isnull().sum().sort_values(ascending=False)\npercent = (test_data.isnull().sum()\/test_data.isnull().count()*100).sort_values(ascending=False)\nmissing_data = pd.concat([total,percent],axis=1,keys=['Total missing Values','Percent of Missing values'])\nmissing_data","c4e8455f":"corrmat = train_data.corr().abs().sort_values(by='Age',ascending=False)\ncorrmat['Age']","0f004054":"plt.figure(figsize=(8,5))\ng = sns.swarmplot(y='Sex', x='Age', hue='Pclass', data=train_data)","b3142514":"# Filling the Age in both datasets with Median Age group by Sex and Pclass.\ntrain_data['Age'] = train_data.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\ntest_data['Age'] = test_data.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","91c92de0":"train_data[train_data['Embarked'].isnull()]","3ad684f0":"# Filling the missing values in Embarked with S\ntrain_data['Embarked'] = train_data['Embarked'].fillna('S')","d9e0c2a6":"test_data[test_data['Fare'].isnull()]","6079f21d":"fare = test_data.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\ntest_data['Fare'] = test_data['Fare'].fillna(fare)","a8151c32":"Image(\"..\/input\/titanic-blueprint\/titanic.png\")","bee8b76a":"cabins = train_data['Cabin'].unique()\nprint(list(cabins))\n","40ac3c7f":"# Finding Deck from first letter of the cabin. Those whose cabin data is missing we will assign them to 'Z' deck.\ntrain_data['Deck'] = train_data['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'Z')\ntest_data['Deck'] = test_data['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'Z')","4fa4e697":"# Listing all possible Decks\nDecks = train_data['Deck'].unique()\nDecks.sort()\nDecks","fe4a2f0f":"Pclass1 = train_data['Pclass'].apply(lambda s: 1 if s==1 else 0)\nPclass2 = train_data['Pclass'].apply(lambda s: 1 if s==2 else 0)\nPclass3 = train_data['Pclass'].apply(lambda s: 1 if s==3 else 0)\n","90e15168":"lclass = train_data.groupby(['Deck','Pclass']).count().drop(columns=['Survived', 'Sex', 'Age', 'SibSp', 'Parch','Fare', 'Embarked', 'Cabin', 'PassengerId', 'Ticket']).rename(columns={'Name': 'Count'}).transpose()\n","bf991034":"deck_counts = {'A': {}, 'B': {}, 'C': {}, 'D': {}, 'E': {}, 'F': {}, 'G': {}, 'Z': {}, 'T': {}}\ndecks = lclass.columns.levels[0]    \n    \nfor deck in decks:\n    for pclass in range(1, 4):\n        try:\n            count = lclass[deck][pclass][0]\n            deck_counts[deck][pclass] = count \n        except KeyError:\n            deck_counts[deck][pclass] = 0\n                \ndf_decks = pd.DataFrame(deck_counts)","99b6a90f":"deck_percentages={}\nfor col in Decks:\n        deck_percentages[col] = [(count \/ df_decks[col].sum()) * 100 for count in df_decks[col]]","e943d20f":"df_percentages = pd.DataFrame(deck_percentages).transpose()\npclass1 = df_percentages[0]\npclass2 = df_percentages[1]\npclass3 = df_percentages[2]","49841c0b":"plt.figure(figsize=(10, 5))\nplt.bar(Decks, pclass1, color='#b5ffb9', edgecolor='white', width=0.85, label='Passenger Class 1')\nplt.bar(Decks, pclass2, bottom=pclass1, color='red', edgecolor='white', width=0.85, label='Passenger Class 2')\nplt.bar(Decks, pclass3, bottom=pclass1+pclass2, color='blue', edgecolor='white', width=0.85, label='Passenger Class 3')\nplt.xlabel('Deck', size=15, labelpad=20)\nplt.ylabel('Passenger Class Percentage', size=15, labelpad=20)\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), prop={'size': 15})","080acdae":"total_passenger = train_data.groupby('Deck')['Survived'].count()\nnotsurvived_passenger = train_data.groupby(['Survived','Deck'])['Survived'].count()\n\nfor col in Decks:\n        notsurvived_passenger[0][col] = (notsurvived_passenger[0][col]*100) \/\/ total_passenger[col]","ebdd7c08":"for col in Decks:\n        total_passenger[col] = 100","45dba8e1":"notsurvived_passenger[0]","8249a1b1":"plt.figure(figsize=(10, 5))\n\nplt.bar(Decks,total_passenger,label='Survived Passengers')\nplt.bar(Decks,notsurvived_passenger[0],label='Not Survived Passengers}')\nplt.xlabel('Deck', size=15, labelpad=20)\nplt.ylabel('Passenger Survived Percentage', size=15, labelpad=20)\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), prop={'size': 15})","2ea94f38":"train_data['Deck'] = train_data['Deck'].replace(['A', 'B', 'C', 'T'], 'ABCT')\ntrain_data['Deck'] = train_data['Deck'].replace(['D', 'E'], 'DE')\ntrain_data['Deck'] = train_data['Deck'].replace(['F', 'G'], 'FG')\n\ntrain_data['Deck'].value_counts()","c9cf119b":"test_data['Deck'] = test_data['Deck'].replace(['A', 'B', 'C', 'T'], 'ABCT')\ntest_data['Deck'] = test_data['Deck'].replace(['D', 'E'], 'DE')\ntest_data['Deck'] = test_data['Deck'].replace(['F', 'G'], 'FG')\n\ntest_data['Deck'].value_counts()","7e960a6a":"# Dropping Cabin column from both datasets\ntrain_data.drop(['Cabin'], inplace=True, axis=1)\ntest_data.drop(['Cabin'], inplace=True, axis=1)","b67a0735":"train_data[train_data['Fare']==0]","108b8a59":"train_data.groupby('Pclass')['Fare'].mean()","5ef3c0f9":"def fill_zero_fares(row):\n    if row.Fare == 0:\n        row.Fare = train_data.groupby('Pclass')['Fare'].mean()[row.Pclass]\n    return row\ntrain_data = train_data.apply(fill_zero_fares, axis=1)\ntest_data = test_data.apply(fill_zero_fares, axis=1)","06d4f9a0":"train_data['Survived'].value_counts()","ea141c66":"sns.countplot(train_data['Survived']).set_title('Survival and Dead Distribution')","3441e5f8":"train_data['Sex'].value_counts()","a5003776":"fig = plt.subplots(figsize=(6,6))\nsns.countplot(train_data['Sex']).set_title('Passengers count by sex')","3a5b317d":"fig = plt.subplots(figsize=(6,6))\nsns.barplot(x='Sex', y='Survived', data = train_data).set_title('Survived Passengers count by sex')","d2aad722":"train_data['Pclass'].value_counts()","f86a611a":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\nsns.countplot(x=\"Pclass\", data=train_data, ax=axarr[0]).set_title('Distribution by Pclass')\nsns.countplot(x=\"Pclass\", hue='Survived', data=train_data, ax=axarr[1]).set_title('Survival by Pclass')\n","cdccb00d":"sns.barplot(x='Pclass', y='Survived', hue='Sex', data=train_data).set_title(\"Survival rate by sex and class\")","a8b55b5f":"sns.distplot(train_data['Fare']).set_title('Fare distribution')","4c0baed6":"train_data['Fare'].describe()","3374589f":"Fare = pd.qcut(train_data['Fare'], 4, labels = ['Low', 'Midium', 'High', 'Very high'])\nfig = plt.subplots(figsize=(12,6))\nsns.countplot(Fare,hue=\"Survived\", data = train_data).set_title('Survived Passengers count by Fare')","393343d5":"fig = plt.subplots(figsize=(12,6))\nsns.distplot(train_data['Age'])","357beb25":"train_data['Age'].describe()","05793964":"sns.barplot(x='Sex',y='Age',data=train_data)","f5a1d878":"fig = plt.subplots(figsize=(12,6))\nsns.kdeplot(train_data['Age'].loc[train_data['Survived'] == 1],shade= True, label='Survived').set_xlabel('Age')\nsns.kdeplot(train_data['Age'].loc[train_data['Survived'] == 0],shade= True, label='Not Survived')\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), prop={'size': 12})","6e07ea2c":"fig = plt.subplots(figsize=(12,6))\nsns.countplot(train_data['SibSp'])","23ebb1bf":"fig = plt.subplots(figsize=(12,6))\nsns.barplot(x='SibSp', y ='Survived', data=train_data)","6ff3aeb1":"fig = plt.subplots(figsize=(12,6))\nsns.countplot(train_data['Parch'])","1b8b41ce":"fig = plt.subplots(figsize=(12,6))\nsns.barplot(x='Parch', y ='Survived', data=train_data)","d49b14d3":"train_data['Family_size'] = train_data['SibSp'] + train_data['Parch'] + 1\ntest_data['Family_size'] = test_data['SibSp'] + test_data['Parch'] + 1","a54d1838":"fig = plt.subplots(figsize=(12,6))\nsns.barplot(x='Family_size', y ='Survived', data=train_data)","cdc37359":"train_data['Family_type'] = pd.cut(train_data.Family_size, [0,1,4,7,11], labels=['Alone', 'Small', 'Medium', 'Large'])\ntest_data['Family_type'] = pd.cut(test_data.Family_size, [0,1,4,7,11], labels=['Alone', 'Small', 'Medium', 'Large'])\n","acdc7c18":"plt.title('Survival rate by family type')\nsns.barplot(x=train_data.Family_type, y=train_data.Survived).set_ylabel('Survival rate')","300c13da":"train_data['Title'] = train_data['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\ntrain_data['Is_Married'] = 0\ntrain_data['Is_Married'].loc[train_data['Title'] == ('Mrs')] = 1","5947dfa0":"test_data['Title'] = test_data['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\ntest_data['Is_Married'] = 0\ntest_data['Is_Married'].loc[test_data['Title'] == ('Mrs')] = 1","84899f35":"fig = plt.subplots(figsize=(16,6))\nsns.barplot(x='Title', y ='Survived',data=train_data).tick_params(axis='x', labelsize=8)","a69bfd7f":"fig = plt.subplots(figsize=(16,6))\nsns.countplot(x='Title',data=train_data).tick_params(axis='x', labelsize=8)","6ef614f9":"train_data['Title'].value_counts()","ab3904bb":"test_data['Title'].value_counts()","8383703a":"train_data['Title'] = train_data['Title'].replace(['Miss', 'Mrs','Ms', 'Mlle', 'Lady', 'Mme', 'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ntrain_data['Title'] = train_data['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', 'Capt', 'Sir', 'Don', 'Rev'], 'Dr\/Military\/Noble\/Clergy')","d09302ea":"test_data['Title'] = test_data['Title'].replace(['Miss', 'Mrs','Ms', 'Mlle', 'Lady', 'Mme', 'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ntest_data['Title'] = test_data['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', 'Capt', 'Sir', 'Don', 'Rev'], 'Dr\/Military\/Noble\/Clergy')","75ca47a6":"fig = plt.subplots(figsize=(16,6))\nsns.countplot(x='Title',data=train_data).tick_params(axis='x', labelsize=8)","f8519aa5":"fig = plt.subplots(figsize=(16,4))\nsns.barplot(x='Title', y ='Survived',data=train_data)","95e3c05b":"k=10\ncorrmat = train_data.corr()\ncols = corrmat.nlargest(k, 'Survived')['Survived'].index\ncm = np.corrcoef(train_data[cols].values.T)\nsns.set(font_scale=1.25)\nf,ax = plt.subplots(figsize=(10,10))\nhm = sns.heatmap(cm, cbar=True, annot=True,square=True, fmt='.2f',annot_kws={\"size\":10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","1e42b735":"train_data.head()","58dfc334":"test_data.head()","8fd65a87":"y = train_data['Survived']\nfeatures = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\ny_test = pd.read_csv(\"..\/input\/submission1000\/submission_titanic.csv\")\ny_test = y_test['Survived']\norg = accuracy_score(y_test, predictions)\nprint('Accuracy  = ',org*100,'%')","d7dc3090":"y = train_data['Survived']\nfeatures = ['Pclass','Fare','Deck','Family_type','Title','Is_Married']","143e2d9f":"X = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2,n_jobs=-1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)","c0649566":"from sklearn.metrics import accuracy_score\ny_test = pd.read_csv(\"..\/input\/submission1000\/submission_titanic.csv\")\ny_test = y_test['Survived']\na = accuracy_score(y_test, predictions)\nprint('Accuracy  = ',a*100,'%')","066d0fd0":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('new_submission.csv', index=False)\nprint('Your submission was successfully saved!')","56f2d221":"**Now lets have a realtionship between Pclass and Sex.**","9a9f263b":"#### **3. Pclass**","b8d3821d":"* **(549\/891) 61.62%** of passengers did not survived.\n* **(342\/891) 38.38%** of passengers survived.","22919f7a":"#### **6. SibSp**\nSibSp is the number of siblings or spouses of a person aboard the Titanic.","73a5d1d7":"This is the side plan of the RMS Titanic.\n\nSource : https:\/\/commons.wikimedia.org\/wiki\/File:Titanic_side_plan_annotated_English.png","c9a1f18b":"#### **1. Survival rate**","1639b243":"As we already know that there are 3 class in the titanic. We have already find out that Decks A,B,C and T are occupied by class 1 Passengers, and these decks have highest survival rates. Let have a detailed look at the realtionship between class and survival.","7385f616":"## **1. Exploratory Data Analysis**","6129ecf9":"## **Missing Values**\nAs seen from the above data both train_data and test_data have some missing values. Lets have a brief look at the missing data in both the datasets.","a2462319":"#### **2. Sex**","f31770c8":"Let first select the feature for the training of the model","65f9038c":"#### Relationship Between Survived Passengers and Decks","4e76cced":"we see that the Fare distribution is positively skewed, with 75% of data under 32 and a maximum of 512.","34903e0a":"##### **Test Dataset**","4e665064":"As we can clearly visualize that the higher the Fare, the higher is the survival rate","32586b8a":"Since both the features SibSp and Parch are closely related with each other we can combine them and create a new feature, which contain both SibSp and Parch.","e6328e90":"* After performing some searching we found that : Stone, Mrs. George Nelson (Martha Evelyn) has embarked from Southampton. Here is the site for details : https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/martha-evelyn-stone.html\n* Icard, Miss. Amelie who is maid of Mrs. George Nelson also embarked from Southampton with her. Here is the site for more details : https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/amelia-icard.html","58dc475e":"# **Titanic: Machine Learning from Disaster**","d6593bd0":"Since most of the cabins are missing, it is impossible to fill all the missing values. We can group the cabin in an another row called Deck, which will give information about all the passenger decks.","933304a2":"From the data it is clear that the most of the passengers are Male, but the survival rate of female and childrens are high then that of Males.","b8e59bd1":"# Importing Modules & Libraries\nWe begin by loading our standard libraries to have a look at the data.","791d2e4e":"Converting categorical data into numerical fields and then training the Random forest Classifier model.","48b1b034":"### **Heatmap and Correlation**","52c9caff":"##### **Training Dataseet**","13161523":"#### **4. Fare**","f6006323":"We can further group the family size in 4 different categories based on family size","b741cac9":"##### **1. Age**\n\nLet's have a look at the correlation between Age and other numnerical values.","307a3658":"#### **9. Title**","a9413a39":"#### **5. Age**\nLet's first have a look at the distribution of the Age.","05247748":"From the above data it is concluded that Storey, Mr. Thomas is Single, and 3rd Class Passenger. So the fare can be filled with Median of 3rd class passenger with no SibSp and Parch.","da2c7c8f":"### **Model with Feature Selection (Model2)**","92ad6b25":"It is clearly shown that most of the passengers are Males. There are almost 45% more Males than Females. Now have a look at the realtionship between Sex and Survived passengers.","b7766a23":"### **Conclusion**\n**There are many things for a greater chance to survive. Being a female or a child will increase you chances. If you have a higher class ticket you have the more chance of surviving than a third class ticket. As for a man, you are more likely to survive if embark in Cherbourg compare to Southampton or Queenstown. If you also travel with 1 or 3 people than 0 or more than 3 your survival chances are greater. The younger you are will also make your survival chance. So it comes down to many things to surivive on the titanic.**","68c86152":"As we can see that mean age is 29 and approx 75% of passengers are below 36 year. Let see a relation between Age and Sex.","d4d77663":"As seen from the above tables some data are missing:\n * Training set have missing values in Age, Cabin and Embarked columns.\n * Testing set have missing values in Age, Cabin and Embarked columns.\n \nThe percentage of missing values in Age, Embarked and Fare are smaller compared to total sample, but roughly about 78% of the Cabin is missing in both datasets. Missing values in Age, Embarked and Fare can be filled with statistical measures but that wouldn't work for Cabin.","48b37a6d":"![](https:\/\/akm-img-a-in.tosshub.com\/indiatoday\/titanic_647_041416113640.jpg?IWI8WJ3owRLPfIO2GUMAyyypPfwvvcRV&size=770:433)\n\nSource : https:\/\/www.indiatoday.in\/education-today\/gk-current-affairs\/story\/rms-titanic-317933-2016-04-15","c56f086e":"##### **4. Cabin**\nCabin is the most missing feature in the dataset. Cabin can be considered as one of the most important field depending on the location of cabins from the exit points.\n","65ecef70":"As clearly shown that the passengers in Decks B,D,E have more survival percentage than other decks, and these decks are filled with Class1 Passengers.","87495ccc":"#### **Dealing with Missing Values**","5301f76d":"#### **8. Family Size**\nThis feature is the combination of SibSp and Parch","fba0a39c":"* **PassengerId** is the unique id of each passenger. It will not have any effect on the target variable.\n* **Survived** is the target varaible, we are trying to predict having two values **(0,1)**:\n * **1 = Survived**\n * **0 = Not Survived**\n* **Pclass (Passenger Class)** refer to the socio-economic status of the passenger, it is categorical varibale having three values **(1,2,3)**:\n * **1 = Upper Class**\n * **2 = Middle Class**\n * **3 = Lower Class**\n* **Name, Sex and Age** are self explanatory.\n* **SibSp** is the total number of passengers' siblings and spouse.\n* **Parch** is the total number of passengers' parents and childrens.\n* **Ticket** is the ticket number of the passengers'.\n* **Fare** is the passenger fare.\n* **Cabin** is the cabin number of the passengers'.\n* **Embarked** is the port of embarkation having three values:\n * **C = Cherbourg**\n * **Q = Queenstown**\n * **S = Southampton**","7dd7f038":"**Relationship between Fare and Survival rate.**","8d2e56d3":"##### **3. Fare**\nWe have one fair data missing from test dataset. Let's first have a look at the data.","e9280073":"# **Modelling**","328d645e":"### **Model with original Feature (Model1)**","cd089925":"#### **7. Parch**\nParch contains the number of parents or children each passenger was traveling with.","f5fac48f":"As we can see there are almost 15 rows having fare equal to 0. According to me the fare is 0 because the data is missing so they fill 0 in its place. We will fill the fare according to the Pclass.","e97b9a0b":"Now all the missing values are completely filled, Next we will se some correlation between different features.","71907bb4":"**Relation between Age and Survival**","0e699630":"### **Overview of Data**","4f14a295":"##### **5. Fare**\nI have noticed that some fare are ) which it cant be. So have a look at the Fare feature.","0dd60934":"## **Distribution and Coorelation of Data**","b7ecd52c":"It is clear from the above visualization that the rate of Female survived are far more than that of the Male survived. Thus **sex** can be considered as one of the important feature for our model.","2455ef2e":"It is clear that most passengers are in Class3 of the titanic, but the survival rate of Class1 are highest whereas the survival rate for the Class3 are the lowest. Most of the Class3 passengers did not survived.","917e8baa":"##### **2. Embarked**\n\nThere are two missing values in Embarked row in Train dataset. Let first visualize them.","972f9ceb":"The data show that most passengers were alone with no Siblings, and few with 2 or more siblings.\n\nLet have a distribution of survival by SibSp.","b816a545":"grouping title together","e5064435":"From the above bar graph it is clear that Decks A,B,C,T are reserved for class1 Passengers, Deck G is for Class3 Passengers whereas Deck Z are contains all missings values.","8adb8402":"From the above table it is clear that Pclass have a correlation between Age. Thus Pclass can be used to fill missing Age values.","d05a5d86":"***From the above data it is shown that:***\n* Training set has 891 rows and test set has 418 rows\n* Training set have 12 features and test set have 11 features\n* One extra feature in training set is Survived feature, which is the target variable\n\n","b8eab309":"Here we can see that as the size of family increase(SibSp) the rate of survival decreases, the Families with 5 and more sibsp didn't survived.","dcbfa4a1":"let's have a look at the realtionship between Passengers count and sex.","cf1b1fff":"Sex can also be used as a feature which can be used with Pclass to fill Missing values in Age."}}