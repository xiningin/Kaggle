{"cell_type":{"8d0e1477":"code","5163b854":"code","97a518e3":"code","56b39c7c":"code","5fca99e9":"code","8fb7642e":"code","b5a3316f":"code","e7e3dfdd":"code","77a36505":"code","4a5a4c06":"code","78c415fa":"code","aaaa005e":"code","8669b04c":"code","6faae803":"code","bd9c94cf":"code","389ef2bf":"code","9caf6af3":"code","5f609ae5":"markdown","88329dec":"markdown","926c1664":"markdown","dee3443d":"markdown","f0c65f0d":"markdown","1a939e7e":"markdown","25ff3736":"markdown"},"source":{"8d0e1477":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option(\"display.max_columns\", None)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5163b854":"df = pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndf = df.dropna(how=\"all\")\ndf = df.drop_duplicates()\n\ntotal_charges_filter = df.TotalCharges == \" \"\ndf = df[~total_charges_filter]\ndf.TotalCharges = pd.to_numeric(df.TotalCharges)\ndf.head()","97a518e3":"categorical_features = [\n \"gender\",\"SeniorCitizen\",\"Partner\",\"Dependents\",\"PhoneService\",\"MultipleLines\",\"InternetService\",\"OnlineSecurity\",\"OnlineBackup\",\"DeviceProtection\",\n    \"TechSupport\",\"StreamingTV\",\"StreamingMovies\",\"Contract\",\"PaperlessBilling\",\"PaymentMethod\"\n]\nnumerical_features = [\"tenure\",\"MonthlyCharges\",\"TotalCharges\"]\ntarget = \"Churn\"","56b39c7c":"df[numerical_features].describe()","5fca99e9":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(1, 3, figsize=(14, 4))\ndf[df.Churn == \"No\"][numerical_features].hist(bins=30, color=\"blue\", alpha=0.5, ax=ax)\ndf[df.Churn == \"Yes\"][numerical_features].hist(bins=30, color=\"red\", alpha=0.5, ax=ax)","8fb7642e":"ROWS, COLS = 4, 4\nfig, ax = plt.subplots(ROWS, COLS, figsize=(18, 18))\nrow, col = 0, 0\nfor i, categorical_feature in enumerate(categorical_features):\n    if col == COLS - 1:\n        row += 1\n    col = i % COLS\n    df[categorical_feature].value_counts().plot(kind='bar', ax=ax[row, col],color=['blue', 'red', 'green', 'yellow']).set_title(categorical_feature)","b5a3316f":"feature = \"Contract\"\nfig, ax = plt.subplots(1, 2, figsize=(14, 4))\ndf[df.Churn == \"No\"][feature].value_counts().plot(kind=\"bar\", ax=ax[0],color=['blue', 'red', 'green', 'yellow']).set_title(\"not churned\")\ndf[df.Churn == \"Yes\"][feature].value_counts().plot(kind=\"bar\", ax=ax[1],color=['blue', 'red', 'green', 'yellow']).set_title(\"churned\")","e7e3dfdd":"df[target].value_counts().plot(kind='bar').set_title('churned')","77a36505":"from sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline,FeatureUnion\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\nclass ItemSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, key):\n        self.key = key\n    def fit(self, x, y=None):\n        return self\n    def transform(self, df):\n        return df[self.key]","4a5a4c06":"pipeline = Pipeline(\n        [\n            (\"union\",FeatureUnion(\n                transformer_list=[\n                    (\n                    \"categorical_features\",Pipeline(\n                        [\n                            (\"selector\",ItemSelector(key=categorical_features)),\n                            (\"onehot\",OneHotEncoder()),\n                        ]\n                    ),\n                )\n            ] +[\n                    (\n                    \"numerical_features\",Pipeline(\n                    [\n                        (\"selector\",ItemSelector(key=numerical_features)),\n                        (\"scalar\",StandardScaler()),\n                    ]\n                    )\n                )\n            ]\n        )\n    ),\n            (\"classifier\", DecisionTreeClassifier(max_depth=3,random_state=42))\n    ])","78c415fa":"df_train, df_test = train_test_split(df, test_size=0.25, random_state=42)\npipeline.fit(df_train, df_train[target])\npred = pipeline.predict(df_test)","aaaa005e":"from sklearn.metrics import classification_report\nprint(classification_report(df_test[target], pred))","8669b04c":"churned = df.Churn == \"Yes\"\nchurned.loc[df.Churn == \"Yes\"]\n\nnot_churned = df.Churn == \"No\"\nchurned.loc[df.Churn == \"No\"]","6faae803":"remove_amount=df[not_churned].Churn.count() - df[churned].Churn.count() \ndrop_indices = np.random.choice(df[not_churned].index, remove_amount, replace=False)\nbalanced_df =df.drop(drop_indices)","bd9c94cf":"balanced_df[target].value_counts().plot(kind='bar').set_title('churned')","389ef2bf":"df_train, df_test = train_test_split(balanced_df, test_size=0.25, random_state=42)\npipeline.fit(df_train, df_train[target])\npred = pipeline.predict(df_test)","9caf6af3":"print(classification_report(df_test[target], pred))","5f609ae5":"Clients that have a month to month contrac tend to churn way more often","88329dec":"the data set is imbalanced, the amount of \"no churned\" is bigger than the \"churned\" meaning that the model will tend to have more accuracity with non churned clients.","926c1664":"As we can see here the precision of predicting clients that churn and don't churn is more even now meaning that the model will be more accurate than the previus one that had an imbalanced dataset and this model can predict clients that will churn with a much higher precision than the older one, the downside of undersampling is that we loose a bit of precision on the not churned group.","dee3443d":"Lets try to fix it with under sampling, which means to try to even the amount of churned and not churned by removeing samples from the mayority group(not churned in this case)","f0c65f0d":"Senior citizens and clients without phone service are misrepresented","1a939e7e":"As expected, this model is more precise with customers that do not churn","25ff3736":" According to the histograms (blue histogram represents clients that didn't churn and red the ones that did), clients tent to churn way more often on the \n first months and ,in a lesser extent, when the monthly charges are between 60-100.\n"}}