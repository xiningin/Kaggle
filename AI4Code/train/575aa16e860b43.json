{"cell_type":{"acb440e7":"code","f70e1578":"code","fa22210a":"code","ffba3fd4":"code","d6e3ea31":"code","8486c649":"code","d9f075c2":"code","e734986a":"code","06693283":"code","2604d13e":"code","0ef0d5d5":"code","d57e7289":"code","bee2843e":"code","b195b745":"code","170f522a":"code","4b22edd8":"code","e2648d15":"code","f8c1bde1":"code","07a04b9a":"code","6fdd7892":"code","92b80f15":"code","13a3a971":"markdown","c3371fd7":"markdown","c9c8b87e":"markdown","b30f2bf5":"markdown"},"source":{"acb440e7":"# Import libraries\nimport numpy as np\nimport pandas as pd","f70e1578":"# Reading the diagnosis data\ndiagnosisData = pd.read_csv(\"\/kaggle\/input\/respiratory-sound-database\/Respiratory_Sound_Database\/Respiratory_Sound_Database\/patient_diagnosis.csv\", header=None)\ndiagnosisData.columns= [\"Patient No\", \"Disease\"]","fa22210a":"# Reading the demographic data\ndemographicData = pd.read_csv(\"\/kaggle\/input\/respiratory-sound-database\/demographic_info.txt\", delimiter=\" \", header=None)\ndemographicData.columns = [\"Patient No\", \"Age\", \"Gender\", \"BMI for Adults\", \"Weight (Children)\", \"Height (Children)\"]\n\n# Calculating children BMI and adding that as a new column\ndemographicData['BMI for Children'] = demographicData.apply(lambda row: (row[4]\/(row[5])**2)*10000, axis=1)\n# Dropping the Height & Weight for Children columns as they are now replaced by BMI for Children\ndemographicData = demographicData.drop(['Weight (Children)', 'Height (Children)'], axis=1)\n# Adding disease labels to demographic data\ndemographicData.insert(5, \"Disease\", diagnosisData.Disease)","ffba3fd4":"# Combine Adult and Children BMI together in a new df: demographicSummary\ncombined = demographicData['BMI for Adults'].combine_first(demographicData['BMI for Children'])\ndemographicSummary = demographicData.copy()\ndemographicSummary.insert(3, \"BMI\", combined)\ndemographicSummary = demographicSummary.drop([\"BMI for Adults\", \"BMI for Children\"], axis=1)","d6e3ea31":"# Review missing data in the demographic information\nprint(demographicSummary.isnull().sum())","8486c649":"# Eliminate rows with at least three missing values\ndemographicSummary = demographicSummary.dropna(thresh=3)","d9f075c2":"# Review rows with remaining missing values\nmissing_BMI_indices = [i for i,v in enumerate(demographicSummary['BMI'].isnull()) if v==True]\nprint(\"Number of missing BMI data is\", len(missing_BMI_indices))\nmissingData = demographicSummary.iloc[missing_BMI_indices]","e734986a":"# Impute missing values for BMI based on the mean of similar rows\nprint(len(demographicSummary))\nfor index, row in missingData.iterrows():\n    age = row[1]\n    gender = row[2]\n    disease = row[4]\n    if demographicSummary[ (demographicSummary['Gender'] == gender)\n                           & (demographicSummary['Disease'] == disease)\n                           & (age - 5 <= demographicSummary['Age']) & (demographicSummary['Age'] <= age + 5) & (demographicSummary['BMI'].isnull()==False) ]['Patient No'].count()>=3:\n\n        imputeFrom = demographicSummary[ (demographicSummary['Gender'] == gender)\n                           & (demographicSummary['Disease'] == disease)\n                           & (age - 5 <= demographicSummary['Age']) & (demographicSummary['Age'] <= age + 5) & (demographicSummary['BMI'].isnull()==False) ]\n        mean = imputeFrom['BMI'].mean()\n        demographicSummary.at[index, 'BMI'] = mean\n    else:\n        demographicSummary = demographicSummary.drop(index)\nprint(len(demographicSummary)) # row index 7 (pt 108) and 96 (pt 197) have been removed","06693283":"# Reading annotation txt files\nimport glob\npath = r'\/kaggle\/input\/respiratory-sound-database\/Respiratory_Sound_Database\/Respiratory_Sound_Database\/audio_and_txt_files'\nall_files = glob.glob(path + \"\/*.txt\")\ndef AnnotationData(filename, path):\n    \"\"\"\n    For each filename in a given path, extracts the information from the file naming convention and reads the information\n    within the file.\n    Returns two dataframes: one with information on file naming, other with information from the file itself.\n    \"\"\"\n    words = filename[len(path):-4].split('_')\n    recording_info = pd.DataFrame(data = [words], columns = ['Patient number', 'Recording index', 'Chest location','Acquisition mode','Recording equipment'])\n    recording_annotations = pd.read_csv(filename, names = ['t_start', 't_end', 'Crackles', 'Wheezes'], delim_whitespace=True)\n    return (recording_info, recording_annotations)","2604d13e":"# Calling above function to read annotation files\ninfoList = []\nfor filename in all_files:\n    (info, annotation) = AnnotationData(filename, path)\n    # Number of crackles \/ wheezes for all respiratory cycles within each recording are summed\n    crackles = annotation['Crackles'].sum()\n    wheezes = annotation['Wheezes'].sum()\n    # Summed number of crackles \/ wheezes are normalized by the duration of the recording\n    duration = annotation.iloc[-1, 1] - annotation.iloc[0, 0]\n    info['Crackles'] = crackles\/duration # crackles per second\n    info['Wheezes'] = wheezes\/duration # wheezes per second\n    infoList.append(info)","0ef0d5d5":"# Converting infoList to dataframe\ninfo = pd.concat(infoList, axis = 0).sort_values(by=\"Patient number\")\n# As there are several recordings for some patients, the averages of normalized number of crackles and wheezes are taken for each patient\ncrackles_wheezes = info.iloc[:, [0,5,6]].groupby(\"Patient number\").mean().reset_index()","d57e7289":"# Combining crackles_wheezes with demographics summary data to input into Decision Tree\ndem_crackles_wheezes = pd.concat([demographicSummary, crackles_wheezes.iloc[:,[1,2]]], axis=1, sort=False).dropna()","bee2843e":"dataset = dem_crackles_wheezes\nprint(dataset.head())","b195b745":"# Dropping asthma and LRTI cases as these have only 1 patient\ndataset = dataset.drop(dataset[ (dataset.Disease == 'Asthma') | (dataset.Disease == 'LRTI') ].index).reset_index(drop=True)","170f522a":"X = dataset.iloc[:,[1,2,3,5,6]].values\ny = dataset.iloc[:,4].values","4b22edd8":"# encoding categorical data e.g. gender as a dummy variable\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder_X = LabelEncoder()\nX[:,1] = labelencoder_X.fit_transform(X[:,1])\n\n# encoding categorical data e.g. disease outcome as a dummy variable\ny,class_names = pd.factorize(y)","e2648d15":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, stratify=y, random_state = 42)","f8c1bde1":"# Fitting Classifier to the Training Set\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion='entropy',max_depth=3, random_state=42)\nclassifier.fit(X_train, y_train)","07a04b9a":"# Model performance on training set\ny_pred_train =classifier.predict(X_train)\n\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\n\naccuracy = metrics.accuracy_score(y_train, y_pred_train)\nprint(\"Accuracy: {:.2f}\".format(accuracy))\ncm=confusion_matrix(y_train,y_pred_train)\nprint('Confusion Matrix: \\n', cm)\nprint(classification_report(y_train, y_pred_train, target_names=class_names))","6fdd7892":"# Predicting the test results\ny_pred=classifier.predict(X_test)\n\n# Classification results on test set\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(\"Accuracy: {:.2f}\".format(accuracy))\n\nfrom sklearn.metrics import confusion_matrix, classification_report\ncm=confusion_matrix(y_test,y_pred)\nprint('Confusion Matrix: \\n', cm)\nprint(classification_report(y_test, y_pred, target_names=class_names))","92b80f15":"# Visualize the tree by graphiz\nimport graphviz\nfrom sklearn import tree\nfeature_names = ['Age','Gender', 'BMI', 'Crackles', 'Wheezes']\ndot_data = tree.export_graphviz(classifier, out_file=None, filled=True, rounded = True, feature_names=feature_names, class_names=class_names)\ngraph = graphviz.Source(dot_data)\ngraph","13a3a971":"# Multi-class Decision Tree","c3371fd7":"# Handling Missing Data for Decision Tree Analysis","c9c8b87e":"# Importing audio txt annotation files","b30f2bf5":"In this kernel, we have implemented a multi-class decision tree algorithm to classify diseases using the annotation files. These contain information on the number of crackles and wheezes in each recording. \n\nWe first start with rearding the patient diagnosis and demographic info files."}}