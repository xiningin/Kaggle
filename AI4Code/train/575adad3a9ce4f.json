{"cell_type":{"fe813353":"code","c5bee94d":"code","9713a6b3":"code","2ce22d8d":"code","cc1b45ae":"code","fc8eeb0b":"code","deaf8055":"code","ae4dfb79":"code","1f54c306":"code","64e81962":"code","60549ea9":"code","c006aeff":"code","876fe0b6":"code","e3d7a135":"code","37b3f8c8":"code","cd85f8bd":"code","f3b268c8":"code","3d52c5c8":"code","7b4c956e":"code","ecc4fb58":"code","5c0ac731":"code","90427245":"code","ca25a64e":"code","c56f8358":"code","77217b8d":"code","f064ad30":"code","93584bcd":"code","b8dd7d3a":"code","868c86ea":"code","715cd16b":"code","084cbae8":"code","a4b5f7f9":"code","dcc7bbe8":"code","6132f43f":"code","7fd0a864":"code","8baed16b":"code","4a21be8b":"code","3a8ac2c3":"code","bc20acb4":"code","067e0a68":"code","c9e92682":"code","eb97b430":"code","a56cc5f2":"code","a430803e":"code","bcc50b18":"code","50e98271":"code","9e236cb7":"code","f23046ad":"code","de931d9d":"code","166a90d2":"code","61c76dba":"code","46546405":"code","a4c334c2":"code","d64d04a0":"code","edec085f":"code","5033e246":"code","3204833e":"code","887ed6d3":"code","985840a0":"code","c5d31beb":"code","543cf0e2":"code","12ef0e49":"code","83b9d35a":"code","668c12d1":"code","15f0944b":"code","b24aac24":"code","64895b79":"code","f911f37f":"code","159684a0":"code","8e06479e":"code","b765f0bb":"code","5eb94e27":"code","0a6d386e":"code","4dc5d9aa":"code","e68d13b8":"code","f1bac614":"code","44d3b9f5":"code","9d8dc4da":"markdown","1682b4cd":"markdown","0798153c":"markdown","5687b523":"markdown","a41b806d":"markdown","a9afd947":"markdown","cbe80972":"markdown","43a139da":"markdown","bc26936e":"markdown","97fbd982":"markdown","10b2dc9c":"markdown","3038b94d":"markdown","0bc0caa8":"markdown"},"source":{"fe813353":"#from scipy import fft\nfrom scipy import signal as sig\nfrom scipy.fft import fft, fftfreq\nfrom IPython.display import Audio\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport math\nimport wave\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sys\nimport os\nimport librosa, librosa.display\nimport IPython.display as ipd\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport scipy.io.wavfile as wavfile\nimport scipy\nimport scipy.fftpack\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport warnings\nwarnings.simplefilter('ignore')","c5bee94d":"def waveform_plot(file):\n    audio_time_series, sr = librosa.load(file)\n    plt.figure(figsize=(15, 3))\n    librosa.display.waveplot(audio_time_series, alpha=0.5)\n    plt.ylim((-1, 1))\n    source = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive'\n    if source in file:\n        name = file.replace(source + '\/','')\n    plt.title(name)","9713a6b3":"waveform_plot('..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1176_Positive_female_50.wav')","2ce22d8d":"def custom_fft(y, fs):\n    T = 1.0 \/ fs\n    N = y.shape[0]\n    yf = fft(y)\n    xf = np.linspace(0.0, 1.0\/(2.0*T), N\/\/2)\n    vals = 2.0\/N * np.abs(yf[0:N\/\/2])  \n    return xf, vals","cc1b45ae":"def plot_wave(file):\n    demo_audio = file #shorter clip\n    demo_clip, demo_sample_rate = librosa.load(demo_audio, sr=None)\n    demo_xf, demo_vals = custom_fft(demo_clip, demo_sample_rate)\n\n    trace = [go.Scatter(\n    x=np.linspace(0, demo_sample_rate\/len(demo_clip), len(demo_clip)), \n    y=demo_clip\n    )]\n    layout = go.Layout(\n        title = 'Waveform <br><sup>Interactive<\/sup>',\n        yaxis = dict(title='Amplitude'),\n        xaxis = dict(title='Time'),\n        )\n    fig = go.Figure(data=trace, layout=layout)\n    fig.show()\n    \nfile = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1041_Positive_male_39.wav'\nplot_wave(file)","fc8eeb0b":"#Source: https:\/\/www.kaggle.com\/himanshu007121\/audio-analysis-and-augmentation-demo\/\n\ndef plot_fft(file):\n    demo_audio = file #shorter clip\n    demo_clip, demo_sample_rate = librosa.load(demo_audio, sr=None)\n    demo_xf, demo_vals = custom_fft(demo_clip, demo_sample_rate)\n\n    trace = [go.Scatter(\n        x=demo_xf, \n        y=demo_vals,\n        line_color='deeppink'\n    )]\n    layout = go.Layout(\n        title = 'Fast Fourier Transform (FFT) <br><sup>Interactive<\/sup>',\n        yaxis = dict(title='Magnitude'),\n        xaxis = dict(title='Frequency'),\n        )\n    fig = go.Figure(data=trace, layout=layout)\n    fig.show()\n\nfile = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1041_Positive_male_39.wav'\nplot_fft(file)","deaf8055":"# https:\/\/stackoverflow.com\/questions\/23377665\/python-scipy-fft-wav-files --> Answer 2\ndef fft_new(file):\n    fs_rate, signal = wavfile.read(file)\n    #print (\"Frequency sampling\", fs_rate)\n    l_audio = len(signal.shape)\n    #print (\"Channels\", l_audio)\n    if l_audio == 2:\n        signal = signal.sum(axis=1) \/ 2\n    #N = signal.shape[0]\n    N = 20000\n    #print (\"Complete Samplings N\", N)\n    secs = N \/ float(fs_rate)\n    #print (\"secs\", secs)\n    Ts = 1.0\/fs_rate # sampling interval in time\n    #print (\"Timestep between samples Ts\", Ts)\n    t = scipy.arange(0, secs, Ts) # time vector as scipy arange field \/ numpy.ndarray\n    FFT = abs(fft(signal))\n    FFT_side = FFT[range(N\/\/2)] # one side FFT range\n    freqs = scipy.fftpack.fftfreq(signal.size, t[1]-t[0])\n    fft_freqs = np.array(freqs)\n    freqs_side = freqs[range(N\/\/2)] # one side frequency range\n    fft_freqs_side = np.array(freqs_side)\n#     p = plt.plot(freqs_side, abs(FFT_side), \"b\") # plotting the positive fft spectrum\n#     plt.xlabel('Frequency (Hz)')\n#     plt.ylabel('Magnitude')\n#     plt.show()\n    mag = abs(FFT_side)\n    freq = freqs_side\n    return freq, mag","ae4dfb79":"file = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1192_Positive_male_28.wav'\nfreq, mag = fft_new(file)","1f54c306":"def createSeries (series_list):\n    series_list = pd.Series(series_list)  \n    return series_list\n\nfrequencies = createSeries(freq) \nAmplitude = createSeries(mag)\n\n\ndata = {\"frequencies\": frequencies,\n            \"Amplitude\": Amplitude}\ndf1 = pd.concat(data, axis = 1)\ndf1.head()","64e81962":"df2 = df1[df1['frequencies']<1000]\n#df2 = df2[df2['frequencies']>0]","60549ea9":"df2 = df2[df2['frequencies']>0]","c006aeff":"squares1 = []\nfor i in range(51):\n        squares1.append(i * 20)\n\ncols = []\nstring = 'string'\nfor i in range(1000):\n    if i % 20 == 0:\n        string ='(' + str(i) + ',' + str(i+20) + ']'\n        #Append in a list\n        cols.append(string)\n\na = pd.cut(df2.frequencies,bins = squares1, labels = cols)\n# a contains the respective bins for all frequency values in df1","876fe0b6":"def createSeries (series_list):\n  series_list = pd.Series(series_list) \n  return series_list\n\nfreq = a\namp = df2.Amplitude\ndata = {\"freq\": freq,\n        \"amp\": amp}\ndf3 = pd.concat(data,\n               axis = 1)\n  \n# show the dataframe\ndf3.head()","e3d7a135":"# 90th Percentile\ndef q75(x):\n    return x.quantile(0.75)\ndef q90(x):\n    return x.quantile(0.90)\n\ndef percentile(n):\n    def percentile_(x):\n        return np.percentile(x, n)\n    percentile_.__name__ = 'percentile_%s' % n\n    return percentile_\n\n\n\nfinal_data_single_rec = df3.groupby(['freq']).agg({'amp': [percentile(80)]})","37b3f8c8":"final_data_single_rec.head()","cd85f8bd":"final_data_single_rec.columns","f3b268c8":"final_data_single_rec[('amp', 'percentile_80')]","3d52c5c8":"final_data_single_rec.columns = ['_'.join(col) for col in final_data_single_rec.columns.values]","7b4c956e":"final_data_single_rec.head()","ecc4fb58":"final_data_single_rec.columns","5c0ac731":"final_data_single_rec.head()","90427245":"my_series = final_data_single_rec['amp_percentile_80'].squeeze()\n#my_series = my_series.squeeze()","ca25a64e":"my_series","c56f8358":"mn = final_data_single_rec.to_string(index=False, header= False)\nprint(final_data_single_rec.to_string(index=False, header= False))","77217b8d":"type(mn)","f064ad30":"#mn.split(\"delimiter\")\nmy_list = mn.split(\"\\n\")","93584bcd":"type(my_list[0])","b8dd7d3a":"a = my_list\nb =  [float(float(s)) for s in a]","868c86ea":"a","715cd16b":"b","084cbae8":"type(b[0])","a4b5f7f9":"m = final_data_single_rec.to_string(index=False, header= False)","dcc7bbe8":"def createSeries (series_list):\n    series_list = pd.Series(series_list)  \n    return series_list\n\ndef freq_amp(freq, mag):\n    frequencies = createSeries(freq) \n    Amplitude = createSeries(mag)\n    data = {\"frequencies\": frequencies,\n            \"Amplitude\": Amplitude}\n    df1 = pd.concat(data, axis = 1)\n    df2 = df1[df1['frequencies']<1000]\n    return df2\n\ndef percentile(n):\n    def percentile_(x):\n        return np.percentile(x, n)\n    percentile_.__name__ = 'percentile_%s' % n\n    return percentile_","6132f43f":"#from scipy import fft\nfrom scipy import signal as sig\nfrom scipy.fft import fft, fftfreq\nfrom IPython.display import Audio\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport math\nimport wave\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sys\nimport os\nimport librosa, librosa.display\nimport IPython.display as ipd\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport scipy.io.wavfile as wavfile\nimport scipy\nimport scipy.fftpack\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport warnings\nwarnings.simplefilter('ignore')\n\n# Testing Files present at Files\\cough_wavs_sample\n\ndef custom_fft(y, fs):\n    T = 1.0 \/ fs\n    N = y.shape[0]\n    yf = fft(y)\n    xf = np.linspace(0.0, 1.0\/(2.0*T), N\/\/2)\n    vals = 2.0\/N * np.abs(yf[0:N\/\/2])  \n    return xf, vals\n\n# https:\/\/stackoverflow.com\/questions\/23377665\/python-scipy-fft-wav-files --> Answer 2\ndef fft_new(file):\n    fs_rate, signal = wavfile.read(file)\n    #print (\"Frequency sampling\", fs_rate)\n    l_audio = len(signal.shape)\n    #print (\"Channels\", l_audio)\n    if l_audio == 2:\n        signal = signal.sum(axis=1) \/ 2\n    #N = signal.shape[0]\n    N = 20000\n    #print (\"Complete Samplings N\", N)\n    secs = N \/ float(fs_rate)\n    #print (\"secs\", secs)\n    Ts = 1.0\/fs_rate # sampling interval in time\n    #print (\"Timestep between samples Ts\", Ts)\n    t = scipy.arange(0, secs, Ts) # time vector as scipy arange field \/ numpy.ndarray\n    FFT = abs(fft(signal))\n    FFT_side = FFT[range(N\/\/2)] # one side FFT range\n    freqs = scipy.fftpack.fftfreq(signal.size, t[1]-t[0])\n    fft_freqs = np.array(freqs)\n    freqs_side = freqs[range(N\/\/2)] # one side frequency range\n    fft_freqs_side = np.array(freqs_side)\n#     p = plt.plot(freqs_side, abs(FFT_side), \"b\") # plotting the positive fft spectrum\n#     plt.xlabel('Frequency (Hz)')\n#     plt.ylabel('Magnitude')\n#     plt.show()\n    mag = abs(FFT_side)\n    freq = freqs_side\n    return freq, mag\n\n# file = r'C:\\Users\\DELL\\COV_Project\\Files\\cough_wavs_sample\\cleaned_data\\Positive\\1192_Positive_male_28.wav'\n# freq, mag = fft_new(file)\n\ndef createSeries (series_list):\n    series_list = pd.Series(series_list)  \n    return series_list\n\ndef freq_amp(freq, mag):\n    frequencies = createSeries(freq) \n    Amplitude = createSeries(mag)\n    data = {\"frequencies\": frequencies,\n            \"Amplitude\": Amplitude}\n    df1 = pd.concat(data, axis = 1)\n    df2 = df1[df1['frequencies']<1000]\n    return df2\n\ndef percentile(n):\n    def percentile_(x):\n        return np.percentile(x, n)\n    percentile_.__name__ = 'percentile_%s' % n\n    return percentile_\n\ndef raw_to_agg(df2):\n    squares1 = []\n    for i in range(51):\n        squares1.append(i * 20)\n\n    cols = []\n    string = 'string'\n    for i in range(1000):\n        if i % 20 == 0:\n           string ='(' + str(i) + ',' + str(i+20) + ']'\n        #Append in a list\n        cols.append(string)\n\n    a = pd.cut(df2.frequencies,bins = squares1, labels = cols)\n    # a contains the respective bins for all frequency values in data\n    freq = a\n    amp = df2.Amplitude\n    data = {\"freq\": freq, \"amp\": amp}\n    df3 = pd.concat(data, axis = 1)\n    final_data_single_rec = df3.groupby(['freq']).agg({'amp': [percentile(80)]})\n    final_data_single_rec.columns = ['_'.join(col) for col in final_data_single_rec.columns.values]\n    mn = final_data_single_rec.to_string(index=False, header= False)\n    my_list = mn.split(\"\\n\")\n    a1 = my_list\n    b =  [float(float(s)) for s in a1]\n    amp = b\n    return amp\n\ndef final_function(file, data):\n    freq, mag = fft_new(file)\n    df2 = freq_amp(freq, mag)\n    amp = raw_to_agg(df2)\n    to_append = amp\n    gender = file[-13:-7]\n    to_append.append(gender)\n    df_length = len(data)\n    data.loc[df_length] = to_append\n    return data","7fd0a864":"cols = []\nstring = 'string'\nfor i in range(1000):\n    if i % 20 == 0:\n        string ='(' + str(i) + ',' + str(i+20) + ']'\n        #Append in a list\n        cols.append(string)\n\n#Create Dataframe for appending df['Amplitude']\nfinal_data = pd.DataFrame(columns=cols)\nfinal_data_length = len(final_data)\n#final_data.loc[final_data_length] = amp --> ISSUE --> RESOLVED\n\nfinal_data[\"gender\"] = \"\"\nfinal_data","8baed16b":"final_function(\"..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1077_Positive_female_20.wav\", final_data)","4a21be8b":"def fft_new(file):\n    fs_rate, signal = wavfile.read(file)\n    #print (\"Frequency sampling\", fs_rate)\n    l_audio = len(signal.shape)\n    #print (\"Channels\", l_audio)\n    if l_audio == 2:\n        signal = signal.sum(axis=1) \/ 2\n    #N = signal.shape[0]\n    N = 20000\n    #print (\"Complete Samplings N\", N)\n    secs = N \/ float(fs_rate)\n    #print (\"secs\", secs)\n    Ts = 1.0\/fs_rate # sampling interval in time\n    #print (\"Timestep between samples Ts\", Ts)\n    t = scipy.arange(0, secs, Ts) # time vector as scipy arange field \/ numpy.ndarray\n    FFT = abs(fft(signal))\n    FFT_side = FFT[range(N\/\/2)] # one side FFT range\n    freqs = scipy.fftpack.fftfreq(signal.size, t[1]-t[0])\n    fft_freqs = np.array(freqs)\n    freqs_side = freqs[range(N\/\/2)] # one side frequency range\n    fft_freqs_side = np.array(freqs_side)\n#     p = plt.plot(freqs_side, abs(FFT_side), \"b\") # plotting the positive fft spectrum\n#     plt.xlabel('Frequency (Hz)')\n#     plt.ylabel('Magnitude')\n#     plt.show()\n    mag = abs(FFT_side)\n    freq = freqs_side\n    return freq, mag\n\nfreq, mag = fft_new(file)\n\ndef createSeries (series_list):\n    series_list = pd.Series(series_list)  \n    return series_list\n\ndef freq_amp(freq, mag):\n    frequencies = createSeries(freq) \n    Amplitude = createSeries(mag)\n    data = {\"frequencies\": frequencies,\n            \"Amplitude\": Amplitude}\n    df1 = pd.concat(data, axis = 1)\n    df2 = df1[df1['frequencies']<1000]\n    return df2\n\ndf2 = freq_amp(freq, mag)\n\ndef raw_to_agg(df2):\n    squares1 = []\n    for i in range(51):\n        squares1.append(i * 20)\n\n    cols = []\n    string = 'string'\n    for i in range(1000):\n        if i % 20 == 0:\n           string ='(' + str(i) + ',' + str(i+20) + ']'\n           #Append in a list\n           cols.append(string)\n\n    a = pd.cut(df2.frequencies,bins = squares1, labels = cols, ordered=False)\n    # a contains the respective bins for all frequency values in data\n    return a\n\ndef a_to_amp(a, df2):\n    freq = a\n    amp = df2.Amplitude\n    data = {\"freq\": freq, \"amp\": amp}\n    df3 = pd.concat(data, axis = 1)\n    final_data_single_rec = df3.groupby(['freq']).agg({'amp': [percentile(80)]})\n    final_data_single_rec.columns = ['_'.join(col) for col in final_data_single_rec.columns.values]\n    mn = final_data_single_rec.to_string(index=False, header= False)\n    my_list = mn.split(\"\\n\")\n    a1 = my_list\n    b =  [float(float(s)) for s in a1]\n    amp = b\n    return amp\n\namp = a_to_amp(a, df2)\n\ndef gen_add(amp, file):\n    gender = file[-13:-7]\n    gen = 0\n    if gender == 'e_male':\n        gen = 1\n    gen = float(gen)\n    amp.append(gender)\n    return amp\n\ndef final_function(file, data):\n    freq, mag = fft_new(file)\n    df2 = freq_amp(freq, mag)\n    amp = raw_to_agg(df2)\n    amp = a_to_amp(amp, df2)\n    #print(amp)\n    amp = gen_add(amp, file)\n    df_length = len(data)\n    data.loc[df_length]=pd.DataFrame(amp).iloc[df_length]\n    #print(df_length)\n    data.loc[df_length, 'gender'] = file[-13:-7]\n    data.loc[df_length] = amp\n    return data\n\nfile = r'..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1082_Positive_male_26.wav'\nfinal_data = final_function(file, final_data)","3a8ac2c3":"sd = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1082_Positive_male_26.wav'\nsd[-13:-7]","bc20acb4":"cols = []\nstring = 'string'\nfor i in range(1000):\n    if i % 20 == 0:\n        string ='(' + str(i) + ',' + str(i+20) + ']'\n        #Append in a list\n        cols.append(string)\n\n#Create Dataframe for appending df['Amplitude']\nfinal_data = pd.DataFrame(columns=cols)\nfinal_data_length = len(final_data)\n#final_data.loc[final_data_length] = amp --> ISSUE --> RESOLVED\n\nfinal_data[\"gender\"] = \"\"\nfinal_data","067e0a68":"def custom_fft(y, fs):\n    T = 1.0 \/ fs\n    N = y.shape[0]\n    yf = fft(y)\n    xf = np.linspace(0.0, 1.0\/(2.0*T), N\/\/2)\n    vals = 2.0\/N * np.abs(yf[0:N\/\/2])  \n    return xf, vals","c9e92682":"def fft_new(file):\n    fs_rate, signal = wavfile.read(file)\n    #print (\"Frequency sampling\", fs_rate)\n    l_audio = len(signal.shape)\n    #print (\"Channels\", l_audio)\n    if l_audio == 2:\n        signal = signal.sum(axis=1) \/ 2\n    #N = signal.shape[0]\n    N = 20000\n    #print (\"Complete Samplings N\", N)\n    secs = N \/ float(fs_rate)\n    #print (\"secs\", secs)\n    Ts = 1.0\/fs_rate # sampling interval in time\n    #print (\"Timestep between samples Ts\", Ts)\n    t = scipy.arange(0, secs, Ts) # time vector as scipy arange field \/ numpy.ndarray\n    FFT = abs(fft(signal))\n    FFT_side = FFT[range(N\/\/2)] # one side FFT range\n    freqs = scipy.fftpack.fftfreq(signal.size, t[1]-t[0])\n    fft_freqs = np.array(freqs)\n    freqs_side = freqs[range(N\/\/2)] # one side frequency range\n    fft_freqs_side = np.array(freqs_side)\n#     p = plt.plot(freqs_side, abs(FFT_side), \"b\") # plotting the positive fft spectrum\n#     plt.xlabel('Frequency (Hz)')\n#     plt.ylabel('Magnitude')\n#     plt.show()\n    mag = abs(FFT_side)\n    freq = freqs_side\n    return freq, mag","eb97b430":"file = \"..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1090_Positive_male_28.wav\"\nfreq, mag = fft_new(file)","a56cc5f2":"freq","a430803e":"mag","bcc50b18":"def createSeries (series_list):\n    series_list = pd.Series(series_list)  \n    return series_list","50e98271":"def freq_amp(freq, mag):\n    frequencies = createSeries(freq) \n    Amplitude = createSeries(mag)\n    data = {\"frequencies\": frequencies,\n            \"Amplitude\": Amplitude}\n    df1 = pd.concat(data, axis = 1)\n    df2 = df1[df1['frequencies']<1000]\n    return df2","9e236cb7":"test_df2 = freq_amp(freq, mag)","f23046ad":"test_df2.head()","de931d9d":"test_df2.describe()","166a90d2":"squares = []\nfor i in range(51):\n        squares1.append(i * 20)\n\ncols = []\nstrj = 'string'\nfor i in range(1000):\n    if i % 20 == 0:\n        strj ='(' + str(i) + ',' + str(i+20) + ']'\n        #Append in a list\n        cols.append(strj)\n\na = pd.cut(test_df2.frequencies,bins = squares1, labels = cols, ordered=False, retbins=True, right=False)","61c76dba":"def percentile(n):\n    def percentile_(x):\n        return np.percentile(x, n)\n    percentile_.__name__ = 'percentile_%s' % n\n    return percentile_","46546405":"squares1 = []\nfor i in range(51):\n        squares1.append(i * 20)\n\ncols = []\nstrj = 'string'\nfor i in range(1000):\n    if i % 20 == 0:\n        strj ='(' + str(i) + ',' + str(i+20) + ']'\n        #Append in a list\n        cols.append(strj)\n\n#a = pd.cut(test_df2.frequencies,bins = squares1, labels = cols, ordered=False)","a4c334c2":"def p_cut_fn(squares1, cols, test_df2):\n    a = pd.cut(test_df2.frequencies,bins = squares1, labels = cols, ordered=False)\n    return a","d64d04a0":"q = p_cut_fn(squares1, cols, test_df2)","edec085f":"len(squares1)","5033e246":"len(cols)","3204833e":"a","887ed6d3":"def raw_to_agg(df2):\n    squares1 = []\n    for i in range(51):\n        squares1.append(i * 20)\n\n    cols = []\n    strj = 'string'\n    for i in range(1000):\n        if i % 20 == 0:\n           strj ='(' + str(i) + ',' + str(i+20) + ']'\n        #Append in a list\n        cols.append(strj)\n    # a contains the respective bins for all frequency values in data\n    return squares1, cols\n\ndef p_cut_fn(squares1, cols, test_df2):\n    a = pd.cut(test_df2.frequencies,bins = squares1, labels = cols, ordered=False)\n    return a","985840a0":"fg, gh = raw_to_agg(df2)","c5d31beb":"p_cut_fn(fg, gh, df2)","543cf0e2":"# FFT Extraction --> https:\/\/www.kaggle.com\/aravrs\/audio-analysis-and-augmentation-demo\nclip, sample_rate = librosa.load(file, sr=None)\n\n#ax2 = fig.add_subplot(512)\nxf, vals = custom_fft(clip, sample_rate)\n#ax2.set_title('FFT of ' + label + ' with ' + str(sample_rate) + ' Hz')\nplt.plot(xf, vals, 'm')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Magnitude')\nplt.show()\n#ax2.grid()\n# print(xf)\n#print(vals)","12ef0e49":"def fft_plot(file):\n    #file = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1192_Positive_male_28.wav'\n    signal, sr = librosa.load(file)\n    X = np.fft.fft(signal)\n    X_mag = np.absolute(X)\n    \n    plt.figure(figsize=(18, 5))\n    \n    f = np.linspace(0, sr, len(X_mag))\n    f_ratio = 0.05\n    f_bins = int(len(X_mag)*f_ratio)  \n    \n    plt.plot(f[:f_bins], X_mag[:f_bins])\n    plt.xlabel('Frequency (Hz)')\n    source = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive'\n    if source in file:\n        name = file.replace(source + '\/','')\n    plt.title(name)\n    return f[:f_bins], X_mag[:f_bins]","83b9d35a":"def createSeries (series_list):\n    series_list = pd.Series(series_list)  \n    return series_list\n\ndef freq_bin_vs_amp(frequency_list, amplitude_list):\n    frequencies = createSeries(frequency_list) \n    Amplitude = createSeries(amplitude_list)\n    \n    # create a dictonary\n    data = {\"frequencies\": frequencies,\n            \"Amplitude\": Amplitude}\n    df = pd.concat(data, axis = 1)\n    #Create Bins\n    squares = []\n    for i in range(11):\n        squares.append(i * 100)\n    bins = squares\n    df['binned_freq'] = pd.cut(df['frequencies'], bins)\n    # Extract Maximum amplitude for that Bin\n    df = df[df['Amplitude']==df.groupby('binned_freq')['Amplitude'].transform('max')]\n    df = df[['Amplitude', 'binned_freq']].reset_index(drop=True)\n    return df, df['Amplitude'].tolist()\n\n#Idea --> Append df['Amplitude'] to another dataframe","668c12d1":"#Create Dataframe for appending df['Amplitude']\nfinal_data = pd.DataFrame(columns=['0_100','100_200','200_300','300_400','400_500','500_600','600_700',\n                                   '700_800','800_900','900_1000'])\nfinal_data_length = len(final_data)\n#final_data.loc[final_data_length] = amp --> ISSUE","15f0944b":"final_data","b24aac24":"sample, amp = freq_bin_vs_amp(freq, mag)","64895b79":"sample","f911f37f":"amp","159684a0":"#Our Dataframe\ndata = pd.DataFrame([[0,0,0,0,0,0,0,0,0,0]], columns = ['0_100', '100_200', '200_300', '300_400', '400_500', '500_600',\n       '600_700', '700_800', '800_900', '900_1000'])\ndata","8e06479e":"amp #Sample","b765f0bb":"#Appending the sample in the dataframe 'data'\nto_append = list\ndata_length = len(data)\ndata.loc[data_length] = to_append","5eb94e27":"data","0a6d386e":"#Creating function for the entire process\ndef append_row(amp, data):\n    amp = amp.tolist()\n    to_append = list\n    data_length = len(data)\n    data.loc[data_length] = to_append\n    return data","4dc5d9aa":"#Iterating through the entire data","e68d13b8":"def final_function(file):\n    freq, mag = fft_new(file)\n    sample, amp = freq_bin_vs_amp(freq, mag)\n    return sample,amp","f1bac614":"a,b = final_function('..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1189_Positive_male_25.wav')","44d3b9f5":"file = '..\/input\/covid-cough-wavs\/cleaned_data\/Positive\/1164_Positive_male_25.wav' #Sample File\nplot_wave(file) #Plotting Waveform\nplot_fft(file) #Plotting FFT\nfreq, amp = fft_new(file) #extracting Frequency and Magnitude Lists\ndataframe, max_freq_list = freq_bin_vs_amp(freq, amp) #Extracting Dataframe and Max Amplitude Per Frequency Bin list\n#print(max_freq_list)\nAudio(file)","9d8dc4da":"# Final Code","1682b4cd":"### Idea 1","0798153c":"# Final Run","5687b523":"### Method 1 -- Currently Used","a41b806d":"### Method 3: Y-axis not defined correctly","a9afd947":"# Creating Dataframe using Max Amplitude in Each Frequency Bin","cbe80972":"### Method 2","43a139da":"# Visualising audio signal in the time domain","bc26936e":"## Ideas:\n- Each recording returns a list --> Appending these lists \nSource: https:\/\/stackoverflow.com\/questions\/26309962\/appending-a-list-or-series-to-a-pandas-dataframe-as-a-row[Source]\n- Dataframe --> Dictionary --> Appending Dictionaries\nSource: https:\/\/stackoverflow.com\/questions\/26716616\/convert-a-pandas-dataframe-to-a-dictionary","97fbd982":"### All functions for a particular recordings","10b2dc9c":"# Extracting Frequency and Amplitude Values as Lists for each audio recording","3038b94d":"# Drawbacks\n\n- Sound recordings not clear --> Incorrect Classification","0bc0caa8":"# Plotting FFT of single audio files"}}