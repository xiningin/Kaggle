{"cell_type":{"d4f13a50":"code","3efae9d6":"code","5caa66a6":"code","6cb86d5b":"code","14790231":"code","9c8615ab":"code","4438327b":"code","17235480":"code","9a0859ab":"code","5879bf50":"code","48988241":"code","a7a298a2":"code","ba4f64e0":"code","0d3efd5a":"code","a6b6b6a5":"code","108db3b3":"code","838cf6a3":"code","e003f9b9":"code","86cdbd7e":"markdown","384bb288":"markdown","e4e0c6f3":"markdown","e7300d9a":"markdown","3cb92e1f":"markdown","92661c0d":"markdown","815bec79":"markdown","324f49b1":"markdown","65258ac4":"markdown","18f58633":"markdown","b1ccbf73":"markdown","e12f7eb6":"markdown","3d48d507":"markdown","0859c166":"markdown","bb04ec19":"markdown"},"source":{"d4f13a50":"import warnings \nwarnings.filterwarnings('ignore')","3efae9d6":"from sklearn.datasets import load_iris\nfrom sklearn.model_selection import cross_validate\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","5caa66a6":"#Data setup\ndf = pd.read_csv('..\/input\/iris-data\/iris.csv', skiprows=0)\ndf.sample(10)","6cb86d5b":"from sklearn.preprocessing import Imputer\nimputer = Imputer(missing_values='NaN', strategy='median', axis=0)\nimputer = imputer.fit(df.iloc[:,:-1])\nimputed_data = imputer.transform(df.iloc[:,:-1].values)\ndf.iloc[:,:-1] = imputed_data\n\niris = df","14790231":"iris.iloc[:,5].unique()","9c8615ab":"iris.head()","4438327b":"from sklearn.preprocessing import LabelEncoder\nclass_label_encoder = LabelEncoder()\n\niris.iloc[:,-1] = class_label_encoder.fit_transform(iris.iloc[:,-1])","17235480":"iris.head()","9a0859ab":"iris.corr()","5879bf50":"iris.var()","48988241":"sns.pairplot(iris)\nplt.show()","a7a298a2":"import numpy as np\nfrom sklearn.model_selection import train_test_split\n\n# Transform data into features and target\nX = np.array(iris.ix[:, 1:5]) \ny = np.array(iris['Species'])\n\n# split into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)\n","ba4f64e0":"print(X_train.shape)\nprint(y_train.shape)","0d3efd5a":"print(X_test.shape)\nprint(y_test.shape)","a6b6b6a5":"# loading library\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\n# instantiate learning model (k = 3)\nknn = KNeighborsClassifier(n_neighbors = 3)\n\n# fitting the model\nknn.fit(X_train, y_train)\n\n# predict the response\ny_pred = knn.predict(X_test)\n\n# evaluate accuracy\nprint(accuracy_score(y_test, y_pred))\n\n# instantiate learning model (k = 5)\nknn = KNeighborsClassifier(n_neighbors=5)\n\n# fitting the model\nknn.fit(X_train, y_train)\n\n# predict the response\ny_pred = knn.predict(X_test)\n\n# evaluate accuracy\nprint(accuracy_score(y_test, y_pred))\n\n# instantiate learning model (k = 9)\nknn = KNeighborsClassifier(n_neighbors=9)\n\n# fitting the model\nknn.fit(X_train, y_train)\n\n# predict the response\ny_pred = knn.predict(X_test)\n\n# evaluate accuracy\nprint(accuracy_score(y_test, y_pred))","108db3b3":"# creating odd list of K for KNN\nmyList = list(range(1,20))\n\n# subsetting just the odd ones\nneighbors = list(filter(lambda x: x % 2 != 0, myList))\n","838cf6a3":"# empty list that will hold accuracy scores\nac_scores = []\n\n# perform accuracy metrics for values from 1,3,5....19\nfor k in neighbors:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    # predict the response\n    y_pred = knn.predict(X_test)\n    # evaluate accuracy\n    scores = accuracy_score(y_test, y_pred)\n    ac_scores.append(scores)\n\n# changing to misclassification error\nMSE = [1 - x for x in ac_scores]\n\n# determining best k\noptimal_k = neighbors[MSE.index(min(MSE))]\nprint(\"The optimal number of neighbors is %d\" % optimal_k)","e003f9b9":"# plot misclassification error vs k\nplt.plot(neighbors, MSE)\nplt.xlabel('Number of Neighbors K')\nplt.ylabel('Misclassification Error')\nplt.show()","86cdbd7e":"# Question 7\nSplit the dataset into training and test sets with 80-20 ratio.","384bb288":"# Question 1\nImport libraries and load the dataset","e4e0c6f3":"# Question 3 - Dealing with categorical data. \nCan use One Hot Encoding or Label Encoder as model can understand numericals like 0,1,2 better than text\nChange all the classes to numericals (0to2).","e7300d9a":"# Question 2 - Estimating missing values using Imputer functions\nIts not good to remove the records having missing values all the time. We may end up loosing some data points. So, we will have \nto see how to replace those missing values with some estimated values (median)","3cb92e1f":"# Question 6\nPlot the scatter matrix for all the variables.","92661c0d":"# Question 4\nObserve the association of each independent variable with target variable and drop variables from feature set having correlation \nin range -0.1 to 0.1 with target variable.","815bec79":"# Data Pre-processing","324f49b1":"# Question 10\nPlot misclassification error vs k (with k value on X-axis) using matplotlib.","65258ac4":"# Problem statement\n\nDataset:\nThe data set we\u2019ll be using is the Iris Flower Dataset which was first introduced in 1936 by the famous statistician Ronald \nFisher and consists of 50 observations from each of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). \nFour features were measured from each sample: the length and the width of the sepals and petals.\n\nSource: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Iris\n\nTrain the KNN algorithm to be able to distinguish the species from one another given the measurements of the 4 features.","18f58633":"# Question 8 - Model\nBuild the model and train and test on training and test sets respectively using scikit-learn. Print the Accuracy of the model with different values of k=3,5,9.\n\nHint: For accuracy you can check accuracy_score() in scikit-learn","b1ccbf73":"# Question 5\nObserve the independent variables variance and drop such variables having no variance or almost zero variance(variance < 0.1). \nThey will be having almost no influence on the classification.","e12f7eb6":"# Overview\n\n1.Read the problem statement.\n\n2.Get the dataset.\n\n3.Explore the dataset.\n\n4.Pre-processing of dataset.\n\n5.Visualization\n\n6.Transform the dataset for building machine learning model.\n\n7.Split data into train, test set.\n\n7.Build Model.\n\n8.Apply the model.\n\n9.Evaluate the model.\n\n10.Finding Optimal K value\n\n11.Repeat 7,8,9 steps.","3d48d507":"# K-Nearest-Neighbors\nKNN falls in the supervised learning family of algorithms. Informally, this means that we are given a labelled dataset consiting \nof training observations (x,y) and would like to capture the relationship between x and y. More formally, our goal is to learn a\nfunction h:X\u2192Y so that given an unseen observation x, h(x) can confidently predict the corresponding output y.\n\nIn this module we will explore the inner workings of KNN, choosing the optimal K values and using KNN from scikit-learn.","0859c166":"# Question 9 - Cross Validation\nRun the KNN with no of neighbours to be 1,3,5..19 and *Find the optimal number of neighbours from the above list using the Mis \nclassification error\n\nHint:\n\nMisclassification error (MSE) = 1 - Test accuracy score. Calculated MSE for each model with neighbours = 1,3,5...19 and find the \nmodel with lowest MSE","bb04ec19":"# Split the dataset into training and test sets"}}