{"cell_type":{"08ff9b33":"code","d919aa55":"code","7b647323":"code","3086a347":"code","e5261fe1":"code","47407dc3":"code","a7a2104d":"code","8429c52d":"code","c60eef4d":"code","66ada66c":"code","00de064b":"code","923a684b":"code","c188535c":"code","68c4e0c4":"code","66e5a490":"markdown","d4a56a45":"markdown","9d9f0975":"markdown","ade27f3b":"markdown","26ef45bf":"markdown","56a03af7":"markdown","8c11d6f5":"markdown","5d0cee76":"markdown","4faa4179":"markdown","e5e814c7":"markdown"},"source":{"08ff9b33":"!pip install py3dbp","d919aa55":"import numpy as np\nimport pandas as pd\nfrom py3dbp import Packer, Bin, Item\nfrom tqdm import tqdm\nfrom pandas_profiling import ProfileReport\n\nINPUT_DIR = '..\/input\/iamthebestcoderstudent2020'\nMAX_WEIGHT = 10 ** 9","7b647323":"order_sku_df = pd.read_csv(f'{INPUT_DIR}\/order_sku.csv')\nbox_dimension_df = pd.read_csv(f'{INPUT_DIR}\/box_dimension.csv')\nsku_dimenssion_df = pd.read_csv(f'{INPUT_DIR}\/sku_dimenssion.csv')","3086a347":"order_sku_df.info()\norder_sku_df","e5261fe1":"ProfileReport(order_sku_df, progress_bar=False).to_widgets()","47407dc3":"box_dimension_df.info()\nbox_dimension_df","a7a2104d":"ProfileReport(box_dimension_df, progress_bar=False).to_widgets()","8429c52d":"sku_dimenssion_df.info()\nsku_dimenssion_df","c60eef4d":"ProfileReport(sku_dimenssion_df, progress_bar=False).to_widgets()","66ada66c":"box_dimension_df['volume'] = box_dimension_df['length'] * box_dimension_df['width'] * box_dimension_df['height']\nbox_dimension_df.sort_values(['volume', 'id'], inplace=True)\nbox_dimension_df.drop_duplicates('volume', inplace=True)\nbox_dimension_df","00de064b":"df = order_sku_df.copy()\ndf = df.merge(sku_dimenssion_df, how='left', on='sku_id')\ndf","923a684b":"box_numbers = box_dimension_df['box_number'].values\nxs = box_dimension_df['length'].values\nys = box_dimension_df['width'].values\nzs = box_dimension_df['height'].values\n\ndef solve(order_df: pd.DataFrame):\n    for box_number, x, y, z in zip(box_numbers, xs, ys, zs):\n        packer = Packer()\n        packer.add_bin(Bin(box_number, x, y, z, MAX_WEIGHT))\n\n        for _, row in order_df.iterrows():\n            for _ in range(row['quantity']):\n                packer.add_item(Item(row['sku_id'], row['length'], row['width'], row['height'], 1))\n\n        packer.pack()\n\n        for b in packer.bins:\n            if len(b.unfitted_items) == 0:\n                return box_number\n            \n    return 'UNFITTED'","c188535c":"ddf = df.copy()\n\nres_matrix = []\nfor order_number, order_df in tqdm(ddf.groupby('order_number')):\n    res_matrix.append([order_number, solve(order_df)])\n    \nres_df = pd.DataFrame(data=res_matrix, columns=['order_number', 'box_number'])\nres_df","68c4e0c4":"res_df.to_csv('output.csv', index=False)","66e5a490":"# Load","d4a56a45":"# Solve","9d9f0975":"## sku_dimenssion","ade27f3b":"## order_sku","26ef45bf":"# Remove redundant cartons","56a03af7":"# Install py3dpb","8c11d6f5":"The dataset of the dimension information of every packing box (carton)\n\n* **id:** The identifier of the packing box as well as the selection priority\n* **box_number:** The identifier of the packing box\n* **length, width and height:** The dimension information of the packing box","5d0cee76":"The dataset of the dimension information of every SKU\n\n* **sku_id:** The identifier of SKU (Stock Keeping Unit) stored in the warehouse\n* **length, width and height:** The dimension information of the SKU","4faa4179":"* **order_number:** The identifier of the order\n* **sku_id:** The identifier of the purchased item in the order\n* **quantity:** The purchased quantity of the item in the order","e5e814c7":"## box_dimension"}}