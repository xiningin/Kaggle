{"cell_type":{"8377eba5":"code","a3ab703d":"code","adb779d5":"code","1d04d46f":"code","5808661c":"code","5f206762":"code","9501163c":"code","23e71a32":"code","5bd8aa89":"code","56d485ed":"code","c3538dc4":"code","24ec8126":"code","595f0315":"code","98f817bd":"code","49aef9ae":"code","6619292c":"code","06a61994":"code","3847acf8":"code","81c60b5c":"code","0596a4bc":"code","516487f8":"code","1c8b0f6b":"code","8dd3609a":"code","119b4987":"code","1bdc90e1":"code","c94ed543":"code","14c1a85e":"code","80868f64":"code","ae27960c":"markdown","46b55fd0":"markdown","53f9c634":"markdown","f558c38a":"markdown","e07a491a":"markdown","10cef148":"markdown","08ee4955":"markdown","51dc3294":"markdown","caadd09f":"markdown","bd1ef849":"markdown","50b0b018":"markdown","0a4ccd37":"markdown","c6a4352b":"markdown","1dbb70e2":"markdown","694e5959":"markdown","d6737939":"markdown","e626593b":"markdown","953f98c5":"markdown","5ede6389":"markdown"},"source":{"8377eba5":"import pandas as pd\nimport numpy as np\n#from scipy import stats\n#%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.preprocessing import MinMaxScaler\nimport sklearn.metrics as metrics\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.optimizers import Adam\nfrom keras.layers import LSTM\nfrom tensorflow.keras.initializers import GlorotUniform\n#from scipy.ndimage import gaussian_filter1d\n#from scipy.signal import medfilt\nfrom numpy.random import seed\nnp.random.seed(17)\n#import tensorflow\n#tensorflow.random.set_seed(1)\nfrom numpy import array\nimport tensorflow as tf\nimport torch\ntf.random.set_seed(17)\nprint(\"All libraries have been imported\")","a3ab703d":"print('Version of pandas    :', pd.__version__)\nprint('Version of numpy     :', np.__version__)\nprint('Version of matplotlib:', matplotlib.__version__)\nprint('Version of sklearn   :', sklearn.__version__)\nprint('Version of keras     :', keras.__version__)\nprint('Version of tensorflow:', tf.__version__)\nprint('Version of torch     :', torch.__version__)\n","adb779d5":"# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","1d04d46f":"pip install xlrd","5808661c":"pip install openpyxl","5f206762":"import xlrd","9501163c":"df = pd.read_excel('..\/input\/temperature-of-giresun\/temp2017min.xlsx')\ndf.head(10)","23e71a32":"df.info()","5bd8aa89":"df.describe()","56d485ed":"df['Date'] = pd.to_datetime(df['Date'])\ndf_chg = df.set_index(['Date'], drop=True)\ndf_chg.head()","c3538dc4":"plt.figure(figsize=(20,8),)\ndf_chg['Min'].plot();","24ec8126":"fig = plt.figure()\ndf_chg['Min'].plot()\nfig.suptitle('Veri Seti')\nplt.xlabel('Tarih')\nplt.ylabel('S\u0131cakl\u0131k')\nplt.savefig('dataset.jpeg', dpi=300, quality=100, bbox_inches='tight')","595f0315":"split_date_train = pd.Timestamp('2017-04-16')\nsplit_date_test = pd.Timestamp('2017-04-17')\ndf1 = df_chg['Min']\ntrain_min = df1.loc[:split_date_train]\ntest_min = df1.loc[split_date_test:]\nplt.figure()\nplt.xlabel('Tarih')\nplt.ylabel('S\u0131cakl\u0131k')\nax = train_min.plot()\ntest_min.plot(ax=ax)\nplt.legend(['E\u011fitim Seti', 'Test Seti']);\nplt.savefig('train_test.jpeg', dpi=300, quality=100, bbox_inches='tight')","98f817bd":"print('Number of training values: {:,}\\n'.format(train_min.shape[0]))\nprint('Number of test values: {:,}\\n'.format(test_min.shape[0]))","49aef9ae":"train_min_processed = df_chg.iloc[:, 0:1].values\ntrain_min_processed = train_min_processed[0:106:1]\ntest_min_processed = df_chg.iloc[:, 0:1].values\ntest_min_processed = test_min_processed[106:120:1]","6619292c":"scaler = MinMaxScaler(feature_range=(-1,1))\ntrain_min_sc = scaler.fit_transform(train_min_processed)\ntest_min_sc = scaler.fit_transform(test_min_processed)","06a61994":"train_min_sc_df = pd.DataFrame(train_min_sc, columns=['Y'], index=train_min.index)\n\nfor s in range(1,2):\n  train_min_sc_df['X_{}'.format(s)] = train_min_sc_df['Y'].shift(s)\n  \nX_train_min = train_min_sc_df.dropna().drop('Y', axis=1)\ny_train_min = train_min_sc_df.dropna().drop('X_1', axis=1)\n\nX_train_min = X_train_min['X_1']\ny_train_min = y_train_min['Y']\n\nX_train_min = X_train_min.values\ny_train_min = y_train_min.values","3847acf8":"X_train_min_3d = X_train_min.reshape(X_train_min.shape[0], 1, 1)\nX_test_min_3d = test_min_sc.reshape(test_min_sc.shape[0], 1, 1)\n\nprint('Train(Min) Shape:', X_train_min_3d.shape)\nprint('Test(Min) Shape:', X_test_min_3d.shape)","81c60b5c":"lstm_model = Sequential()\ninitializer = GlorotUniform(seed=17)\nlstm_model.add(LSTM(7, input_shape=(1, X_train_min_3d.shape[1]), activation='relu', kernel_initializer=initializer, return_sequences=False))\nlstm_model.add(Dense(1))\nlstm_model.compile(loss='mean_squared_error', optimizer='adam')\nearly_stop = EarlyStopping(monitor='loss', patience=4, verbose=1, restore_best_weights=True, min_delta=0.0001)\nhistory_lstm_model = lstm_model.fit(X_train_min_3d, y_train_min, epochs=100, batch_size=1, verbose=1, shuffle=False, callbacks=[early_stop])","0596a4bc":"lstm_model.summary()","516487f8":"loss = history_lstm_model.history['loss']\nepochs = range(len(loss))","1c8b0f6b":"plt.subplot()\nplt.plot(epochs, loss, color='black')\nplt.ylabel(\"Kay\u0131p (HKO)\")\nplt.xlabel(\"D\u00f6ng\u00fc Say\u0131s\u0131\")\nplt.savefig('epoch.jpeg', dpi=300, quality=100, bbox_inches='tight')","8dd3609a":"y_pred_train_min_lstm = lstm_model.predict(X_train_min_3d)\ny_pred_test_min_lstm = lstm_model.predict(X_test_min_3d)","119b4987":"y_pred_test_min_lstm_new = scaler.inverse_transform(y_pred_test_min_lstm)","1bdc90e1":"plt.figure(figsize=(20,8))\nplt.plot(test_min_processed, label='Reel')\nplt.plot(y_pred_test_min_lstm_new, label='LSTM')\nplt.title(\"LSTM's Forecasting\")\nplt.xlabel('Observation')\nplt.ylabel('Adj Close Scaled')\nplt.legend()\nplt.show();","c94ed543":"plt.figure()\nplt.plot(test_min_processed, label='G\u00f6zlem')\nplt.plot(y_pred_test_min_lstm_new, label='LSTM')\nplt.title(\"LSTM \u00d6ng\u00f6r\u00fc\")\nplt.xlabel('G\u00fcnler')\nplt.ylabel('S\u0131cakl\u0131k')\nplt.legend()\nx = [0,1,2,3,4,5,6,7,8,9,10,11,12,13]\nplt.xticks(x)\nplt.savefig('pred.jpeg', dpi=300, quality=100, bbox_inches='tight')\nplt.show();","14c1a85e":"MAE = metrics.mean_absolute_error(test_min_processed, y_pred_test_min_lstm_new)\nMSE = metrics.mean_squared_error(test_min_processed, y_pred_test_min_lstm_new)\nRMSE = np.sqrt(MSE)\nR2 = metrics.r2_score(test_min_processed, y_pred_test_min_lstm_new)\n\nprint(\"Results of sklearn.metrics:\")\nprint(\"MAE:\", MAE)\nprint(\"MSE:\", MSE)\nprint(\"RMSE:\", RMSE)\nprint(\"R-Squared:\", R2)","80868f64":"y_pred_test_min_lstm_new","ae27960c":"Metrics","46b55fd0":"> Check GPU Device","53f9c634":"> We use shift function that shifts the entire column by 1.","f558c38a":"# LSTM - Traning Model","e07a491a":"> Split train and test again for scale","10cef148":"# Split The Data","08ee4955":"> Version of Libraries","51dc3294":"> There are minimum temperature values between 01.01.2017 and 30.04.2017 for city of [Giresun](https:\/\/www.google.com\/maps\/place\/Giresun,+Giresun+Merkez%2FGiresun\/@40.9042433,38.309194,12z\/data=!3m1!4b1!4m5!3m4!1s0x40636c6b991a79b7:0x2409f2df5be31b5f!8m2!3d40.917532!4d38.392653) in Turkey.","caadd09f":"# Plotting The Data","bd1ef849":"# Scale The Data","50b0b018":"De-normalize data","0a4ccd37":"# Forecasting","c6a4352b":"> LSTM\n\n\n\n*   LSTM has a visible layer with 1 input.\n*   A hidden layer with LSTM neurons.\n*   We used relu activation function for the LSTM neurons.\n*   A loss function is mean_squared_error , and An optimizer is adam.\n*   Stop training when a monitored loss has stopped improving.\n*   The LSTM is trained for 100 epoch and a batch size of 1 is used.","1dbb70e2":"**Time Series Forecasting with LSTM**","694e5959":"# Import Libraries","d6737939":"> We predict our LSTM model","e626593b":"> We will need to convert all our input variables in a 3D vector form.","953f98c5":"Split the data to train and test set by date \"2017-04-17\". That is, the data prior to this date is the traning data and the data from this data onward is the test data and we plotting it again.","5ede6389":"# The Data"}}