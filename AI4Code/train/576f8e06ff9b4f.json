{"cell_type":{"6fae2dc7":"code","138e6799":"code","50ee5f51":"code","5314159a":"code","215cba0d":"code","a4cfd3a5":"code","6fe15357":"code","f093b085":"markdown"},"source":{"6fae2dc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","138e6799":"import time \n\nimport matplotlib.pyplot as plt ","50ee5f51":"def a1(n):\n    start_time = time.time()\n    for i in range(1,n):\n        print(n*n)\n    end_time = time.time()   \n    return end_time-start_time\n\n    ","5314159a":"def a2(n):\n    start_time = time.time()\n    for i in range(1,n):\n        for j in range(1,i):\n            print(n)\n    end_time = time.time()   \n    return end_time-start_time\n\n    ","215cba0d":"x=[]\ny=[]\nfor n in range(1,100):\n    x.append(n)\n    y.append(a2(n))\n    \n   ","a4cfd3a5":"plt.xlabel('List Length') \nplt.ylabel('Time Complexity') \nplt.plot(x, y, label ='Algorithm') \nplt.grid() \nplt.legend() \nplt.show() ","6fe15357":"plt.xlabel('List Length') \nplt.ylabel('Time Complexity') \nplt.plot(x, y, label ='Algorithm') \nplt.grid() \nplt.legend() \nplt.show() ","f093b085":"1. The **complexity of an algorithm** is a function f (n) which measures the time and space used by an algorithm in terms of input size n. \n\n2. In computer science, the **complexity of an algorithm** is a way to classify how efficient an algorithm is, compared to alternative ones. \n\n3. The focus is on how execution time increases with the data set to be processed."}}