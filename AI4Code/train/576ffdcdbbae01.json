{"cell_type":{"6652f575":"code","9c8f4205":"code","0f7b5df0":"code","4852f02b":"code","ddc7d6a2":"code","326ea88c":"code","b0ab3ec0":"code","17c23f52":"code","58166ebb":"code","0db9d4bc":"code","3acc839d":"code","cec9b1ba":"code","241d6223":"code","b59b6707":"code","53b4b96f":"code","6a34ca09":"code","c786b4cc":"code","58372d39":"code","569f81f5":"code","b8a947e4":"code","0322d65f":"code","494799cb":"code","35336c58":"code","84d6fe92":"code","3397349d":"code","a927c0ca":"code","a0170fe1":"code","da88751c":"code","50b7704e":"code","83536858":"code","fd970b9b":"code","35d8ad81":"code","2aed406d":"code","906f39a8":"code","27a181a6":"code","deba4253":"code","909b8510":"code","d3add523":"code","13df632c":"code","194c1887":"code","fb72a6a3":"code","c4e8ae18":"code","5928c814":"code","44a291f2":"code","469fda65":"code","9b51470f":"code","226a2625":"code","80a801e3":"code","d4c257b7":"code","05eaa7c7":"code","fcbed01e":"code","c9519ad1":"code","cf49909f":"code","c1d2f6fd":"code","960725df":"code","9b5be96d":"code","c69278cc":"code","f21a5d5f":"code","f6c6f4e3":"code","c7cf9a5e":"code","863dcd8d":"code","e6e0ec82":"code","0ceca7b9":"code","b922d3b1":"code","4873c226":"code","bc6cc5d4":"code","4c83f32e":"code","00f3a875":"code","cb9ee5af":"code","c91d80fb":"code","201c2d17":"code","99efcc0a":"code","cfaf69de":"code","f8648b4e":"code","cfa7312f":"code","64dddc12":"code","4fd2fbff":"code","d53756db":"code","b6f0d1c2":"code","e862a094":"code","21366e48":"code","211bb34e":"code","b2f6bf32":"code","994cf994":"code","cb1e7642":"code","b27b3853":"code","8906115d":"code","2cb80568":"code","779f6109":"code","d22949cf":"code","10031e9f":"code","d47639a4":"code","4af95e2b":"code","85af057b":"markdown","fcccab1f":"markdown","1067f3d0":"markdown","de2e9ad9":"markdown","175f89dc":"markdown","f981053f":"markdown","df2f6e58":"markdown","259d85cb":"markdown","f7f792bc":"markdown","30e29829":"markdown","6256f557":"markdown","5e6ed0c8":"markdown","29e4ec13":"markdown","9cc446f8":"markdown","251263be":"markdown","f14f53b6":"markdown","f8e33cc3":"markdown","7e0c5e60":"markdown","9936df4f":"markdown","f4dad7eb":"markdown","ac54c763":"markdown","9f8f7b09":"markdown","bddd276a":"markdown","bf01fc91":"markdown","689da187":"markdown","dad9afa9":"markdown","1d4a9532":"markdown"},"source":{"6652f575":"#importing libraries\nimport pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import accuracy_score,confusion_matrix\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","9c8f4205":"pip install openpyxl","0f7b5df0":"#importing data\ndf=pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ndf.head()","4852f02b":"df.info()   #information about the data","ddc7d6a2":"#describe about the data\ndf.describe()","326ea88c":"df.shape","b0ab3ec0":"#finding the null values\ndf.isnull().sum()","17c23f52":"import missingno as msno\nmsno.bar(df)\nplt.show","58166ebb":"#drop the nullvalues\ndf.dropna(inplace=True)","0db9d4bc":"df.isnull().sum()","3acc839d":"df.dtypes # datatypes","cec9b1ba":"def change_into_datetime(col):\n    df[col]=pd.to_datetime(df[col])","241d6223":"df.columns","b59b6707":"for i in ['Date_of_Journey','Dep_Time', 'Arrival_Time']:\n    change_into_datetime(i)","53b4b96f":"df.dtypes","6a34ca09":"df['journey_day']=df['Date_of_Journey'].dt.day\ndf['journey_month']=df['Date_of_Journey'].dt.month\n","c786b4cc":"df.head(10)","58372d39":"df.drop('Date_of_Journey', axis=1, inplace=True)","569f81f5":"# function for extracting hour and minutes\ndef extract_hour(data,col):\n    data[col+'_hour']=data[col].dt.hour\n    \ndef extract_min(data,col):\n    data[col+'_min']=data[col].dt.minute\n    \n\ndef drop_col(data,col):\n    data.drop(col,axis=1,inplace=True)","b8a947e4":"#call the function\n# Departure time is when a plane leaves the gate. \n# Similar to Date_of_Journey we can extract values from Dep_Time\nextract_hour(df,'Dep_Time')\n\n#extracting minutes\nextract_min(df,'Dep_Time')\n\n#drop the column\ndrop_col(df,'Dep_Time')","0322d65f":"#extracting hour\nextract_hour(df,'Arrival_Time')\n\n#extracting min\nextract_min(df,'Arrival_Time')\n\n\n#drop the column\ndrop_col(df,'Arrival_Time')","494799cb":"df.head(10)","35336c58":"duration=list(df['Duration'])\nfor i in range(len(duration)):\n    if len(duration[i].split(' '))==2:\n        pass\n    else:\n        if 'h' in duration[i]: # Check if duration contains only hour\n             duration[i]=duration[i] + ' 0m' # Adds 0 minute\n        else:\n             duration[i]='0h '+ duration[i]","84d6fe92":"df['Duration']=duration","3397349d":"df.head()","a927c0ca":"def hour(x):\n    return x.split(' ')[0][0:-1]\n\ndef minutes(x):\n    return x.split(' ')[1][0:-1]\n\n","a0170fe1":"df['dur_hour']=df['Duration'].apply(hour)","da88751c":"df['dur_min']=df['Duration'].apply(minutes)","50b7704e":"df.head(10)","83536858":"drop_col(df,'Duration')","fd970b9b":"df.dtypes","35d8ad81":"df['dur_hour'] = df['dur_hour'].astype(int)\ndf['dur_min'] = df['dur_min'].astype(int)","2aed406d":"df.dtypes","906f39a8":"column=[column for column in df.columns if df[column].dtype=='object']\ncolumn","27a181a6":"continuous_col =[column for column in df.columns if df[column].dtype!='object']\ncontinuous_col","deba4253":"categorical = df[column]","909b8510":"categorical.head()","d3add523":"categorical['Airline'].value_counts()","13df632c":"plt.figure(figsize=(15,8))\nsns.boxplot(x='Airline',y='Price',data=df.sort_values('Price',ascending=False))","194c1887":"plt.figure(figsize=(15,8))\nsns.boxplot(x='Total_Stops',y='Price',data=df.sort_values('Price',ascending=False))","fb72a6a3":"# As Airline is Nominal Categorical data we will perform OneHotEncoding\nAirline=pd.get_dummies(categorical['Airline'],drop_first=True)","c4e8ae18":"Airline.head()","5928c814":"categorical['Source'].value_counts()","44a291f2":"#Source vs Price\n\nplt.figure(figsize=(15,15))\nsns.catplot(x='Source',y='Price',data=df.sort_values('Price',ascending=False),kind='boxen')","469fda65":"#encoding of source column\nsource=pd.get_dummies(categorical['Source'],drop_first=True)\nsource.head()","9b51470f":"categorical['Destination'].value_counts()","226a2625":"plt.figure(figsize=(15,8))\nsns.boxplot(x='Destination',y='Price',data=df.sort_values('Price',ascending=False))","80a801e3":"#encoding of destination column\ndestination=pd.get_dummies(categorical['Destination'],drop_first=True)\ndestination.head()","d4c257b7":"# now work on route column\ncategorical['Route'].value_counts()\n","05eaa7c7":"categorical['Route1']=categorical['Route'].str.split('\u2192').str[0]\ncategorical['Route2']=categorical['Route'].str.split('\u2192').str[1]\ncategorical['Route3']=categorical['Route'].str.split('\u2192').str[2]\ncategorical['Route4']=categorical['Route'].str.split('\u2192').str[3]\ncategorical['Route5']=categorical['Route'].str.split('\u2192').str[4]","fcbed01e":"categorical.head()","c9519ad1":"drop_col(categorical,'Route')","cf49909f":"categorical.isnull().sum()","c1d2f6fd":"categorical.columns","960725df":"for i in ['Route3', 'Route4', 'Route5']:\n    categorical[i].fillna('None',inplace=True)","9b5be96d":"categorical.isnull().sum()","c69278cc":"for i in categorical.columns:\n    print('{} has total {} categories'.format(i,len(categorical[i].value_counts())))","f21a5d5f":"df.plot.hexbin(x='Arrival_Time_hour',y='Price',gridsize=15)","f6c6f4e3":"# Applying label encoder\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()","c7cf9a5e":"for i in ['Route1', 'Route2', 'Route3', 'Route4', 'Route5']:\n    categorical[i]=encoder.fit_transform(categorical[i])","863dcd8d":"categorical.head()","e6e0ec82":"drop_col(categorical,'Additional_Info')","0ceca7b9":"categorical['Total_Stops'].unique()","b922d3b1":"# encoding Total stops\ndict={'non-stop':0, '2 stops':2, '1 stop':1, '3 stops':3, '4 stops':4}\ncategorical['Total_Stops']=categorical['Total_Stops'].map(dict)","4873c226":"categorical['Total_Stops']","bc6cc5d4":"drop_col(categorical,'Source')\ndrop_col(categorical,'Destination')\ndrop_col(categorical,'Airline')","4c83f32e":"final_df=pd.concat([categorical,Airline,source,destination,df[continuous_col]],axis=1)","00f3a875":"final_df.head()","cb9ee5af":"pd.set_option('display.max_columns',33)\nfinal_df.head()","c91d80fb":"def plot(data,col):\n    fig,(ax1,ax2)=plt.subplots(2,1)\n    sns.distplot(data[col],ax=ax1)\n    sns.boxplot(data[col],ax=ax2)","201c2d17":"plot(final_df,'Price')","99efcc0a":"final_df['Price']=np.where(final_df['Price']>=40000,final_df['Price'].median(),final_df['Price'])","cfaf69de":"plot(final_df,'Price')","f8648b4e":"X=final_df.drop('Price',axis=1)\ny=df['Price']","cfa7312f":"from sklearn.feature_selection import mutual_info_classif\n","64dddc12":"mutual_info_classif(X,y)","4fd2fbff":"imp = pd.DataFrame(mutual_info_classif(X,y),index=X.columns)\nimp","d53756db":"imp.columns=['importance']\nimp.sort_values(by='importance',ascending=False)","b6f0d1c2":"# spiliting the dataset\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=123)","e862a094":"from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\ndef predict(ml_model):\n    print('Model is: {}'.format(ml_model))\n    model= ml_model.fit(X_train,y_train)\n    print(\"Training score: {}\".format(model.score(X_train,y_train)))\n    predictions = model.predict(X_test)\n    print(\"Predictions are: {}\".format(predictions))\n    print('\\n')\n    r2score=r2_score(y_test,predictions) \n    print(\"r2 score is: {}\".format(r2score))\n          \n    print('MAE:{}'.format(mean_absolute_error(y_test,predictions)))\n    print('MSE:{}'.format(mean_squared_error(y_test,predictions)))\n    print('RMSE:{}'.format(np.sqrt(mean_squared_error(y_test,predictions))))\n     \n    sns.distplot(y_test-predictions)      \n          ","21366e48":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor\n","211bb34e":"\npredict(RandomForestRegressor())","b2f6bf32":"predict(LogisticRegression())\n\n    ","994cf994":"predict(KNeighborsRegressor())\n","cb1e7642":"predict(DecisionTreeRegressor())","b27b3853":"from sklearn.svm import SVR\npredict(SVR())","8906115d":"predict(GradientBoostingRegressor())","2cb80568":"from sklearn.model_selection import RandomizedSearchCV\n","779f6109":"random_grid = {\n    'n_estimators' : [100, 120, 150, 180, 200,220],\n    'max_features':['auto','sqrt'],\n    'max_depth':[5,10,15,20],\n    }","d22949cf":"rf=RandomForestRegressor()\nrf_random=RandomizedSearchCV(estimator=rf,param_distributions=random_grid,cv=3,verbose=2,n_jobs=-1,)\n\nrf_random.fit(X_train,y_train)\n\n# best parameter\nrf_random.best_params_","10031e9f":"# best parameter\nrf_random.best_params_","d47639a4":"#predicting the values\nprediction = rf_random.predict(X_test)\n\n#distribution plot between actual value and predicted value\nsns.displot(y_test-prediction)","4af95e2b":"r2_score(y_test,prediction)","85af057b":"As we can see from the table, there are several features that have approx 0 value,so we should remove it after authorizing it.But for now,we are not removing it.","fcccab1f":"###  Handling outliers:\n#### As there is some outliers in price feature,so we replace it  with median.","1067f3d0":"<a id = '5.5'><\/a>\n<p style = \"font-size : 25px; color : 'blue' ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Data Cleaning<\/strong><\/p>","de2e9ad9":"##### From Arrival_time and Dept_time features,we extract hour and minutes and stored in new columns and drop these columns","175f89dc":"#### Finding the categorical value","f981053f":"#### Perform Total_Stops vs Price Analysis","df2f6e58":"#### IF YOU LIKE THE WORK,PLEASE UPVOTE IT.","259d85cb":"### **We observe 2 missing values,I can directly drop these,as these are very less.**","f7f792bc":"# Hypertunning the model","30e29829":"<a id = '5.5'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>After all preprocessing, Our data is ready for the modeling<\/strong><\/p> ","6256f557":"#### Finding the cntinuous value","5e6ed0c8":"From the graph,it is clear that we predicted 84% correctly.","29e4ec13":"## Check For Outliers \n","9cc446f8":"\n### We are using two main Encoding Techniques to covert Categorical data into some numerical format\n\n#### Nominal data -- Data that are not in any order -->one hot encoding\n#### ordinal data -- Data are in order --> labelEncoder","251263be":"##### Lets Apply pre-processing on duration column,Separate Duration hours and minute from duration","f14f53b6":"## After hypertuning,the accuracy increases .\n","f8e33cc3":"# Handling categorical data\n\n","7e0c5e60":"\n### From graph we can see that Jet Airways Business have the highest Price., Apart from the first Airline almost all are having similar median","9936df4f":"<a id = '5.5'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Flight Price Prediction<\/strong><\/p>","f4dad7eb":"![images.jpg](attachment:14dc9a04-741e-4fd0-9ab9-e4e47b34f004.jpg)","ac54c763":"# Feature Selection \nIt is about finding the best feature and having good relation with independent variable                                  \nIssue of dimensionality reduction reduces.\n\nFor this we use mutual_info_classif","9f8f7b09":"#### The datatypes of Date_of_journey,Arrival_Time and Dep_Time is object.So,firstly we convert it into date and time for proper predicion.\n\n**dt.day method will extract only day of that date                           \ndt.month method will extract only month of that date**","bddd276a":"# Models","bf01fc91":"### Seprate the dataset in X and Y columns","689da187":"## Airline vs Price Analysis","dad9afa9":"##### Now ,we extract day and month from Date_of_journey and stored in 2 other columns.\n##### Then there will be no use of 'Date_of_Journey' column,so we drop it.","1d4a9532":"# Importing dataset\n1.Since data is in form of excel file we have to use pandas read_excel to load the data.   \n2.After loading it is important to check null values in a column or a row           \n3.If it is present then following can be done,                                                                                   \n*       Filling NaN values with mean, median and mode using fillna() method                                                           \n*       If Less missing values, we can drop it as well           "}}