{"cell_type":{"d891ff55":"code","39df6042":"code","ab51bd45":"code","dd607515":"code","bae10b8a":"code","f91b8f72":"code","83b1f7e1":"code","dc001f1a":"markdown","17395994":"markdown","6b696af6":"markdown","1d7a4e01":"markdown","f2b4ab5d":"markdown","8ea05655":"markdown"},"source":{"d891ff55":"import os\nimport datetime as dt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","39df6042":"# Input data files are available in the \"..\/input\/\" directory.\ninput_dir = \"..\/input\"\n\nprofessionals = pd.read_csv(os.path.join(input_dir, 'professionals.csv'), parse_dates=True)\nstudents = pd.read_csv(os.path.join(input_dir, 'students.csv'))\nschool_memberships = pd.read_csv(os.path.join(input_dir, 'school_memberships.csv'))\ngroups = pd.read_csv(os.path.join(input_dir, 'groups.csv'))\ngroup_memberships = pd.read_csv(os.path.join(input_dir, 'group_memberships.csv'))\nquestions = pd.read_csv(os.path.join(input_dir, 'questions.csv'))\nanswers = pd.read_csv(os.path.join(input_dir, 'answers.csv'))\nemails = pd.read_csv(os.path.join(input_dir, 'emails.csv'))\nmatches = pd.read_csv(os.path.join(input_dir, 'matches.csv'))\ncomments = pd.read_csv(os.path.join(input_dir, 'comments.csv'))\ntags = pd.read_csv(os.path.join(input_dir, 'tags.csv'))\ntag_users = pd.read_csv(os.path.join(input_dir, 'tag_users.csv'))\ntag_questions = pd.read_csv(os.path.join(input_dir, 'tag_questions.csv'))\n\nprofessionals['professionals_date_joined'] = pd.to_datetime(professionals['professionals_date_joined'])\nstudents['students_date_joined'] = pd.to_datetime(students['students_date_joined'])\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\nanswers['answers_date_added'] = pd.to_datetime(answers['answers_date_added'])\nemails['emails_date_sent'] = pd.to_datetime(emails['emails_date_sent'])\ncomments['comments_date_added'] = pd.to_datetime(comments['comments_date_added'])","ab51bd45":"def compute_3_hop_paths(left_table, right_table, \n                        left_on, right_on,\n                        left_user, right_user,\n                        left_date, right_date, \n                        path_name, left_name, right_name,\n                        reflected = False):\n    users_paths = left_table.merge(right_table, left_on=left_on, right_on=right_on, how='inner')[[\n        left_user, left_date, right_user, right_date]]\n    users_paths = users_paths[users_paths[left_user] != users_paths[right_user]]\n    users_paths['date_created'] = users_paths[[left_date, right_date]].max(axis=1).dt.date\n    users_paths = users_paths.groupby(['date_created', left_user, right_user])[left_date].count().reset_index()\n    users_paths = users_paths.rename(columns={left_date: path_name})\n    users_paths['left_right'] = users_paths[left_user] +  '-' + users_paths[right_user]\n    users_paths = users_paths.pivot(values=path_name, columns='left_right', index='date_created')\n\n    cum_sum_users_paths = users_paths.rolling(window=100000, min_periods=1).sum().stack().reset_index()\n    cum_sum_users_paths[left_name] = cum_sum_users_paths['left_right'].apply(lambda x: x.split('-')[0])\n    cum_sum_users_paths[right_name] = cum_sum_users_paths['left_right'].apply(lambda x: x.split('-')[1])\n    del cum_sum_users_paths['left_right']\n    cum_sum_users_paths = cum_sum_users_paths.rename(columns={0: path_name})\n    \n    if reflected:\n        cum_sum_users_paths = pd.concat([cum_sum_users_paths,\n                                      cum_sum_users_paths[cum_sum_users_paths.columns[[0,1,3,2]]].rename(\n                                          columns={cum_sum_users_paths.columns[2]:cum_sum_users_paths.columns[3],\n                                                   cum_sum_users_paths.columns[3]:cum_sum_users_paths.columns[2]})], axis=0)\n        cum_sum_users_paths = cum_sum_users_paths.drop_duplicates()\n    \n    return cum_sum_users_paths","dd607515":"questioners_answerers_paths = compute_3_hop_paths(\n    left_table = questions, right_table = answers, \n    left_on = 'questions_id', right_on = 'answers_question_id',\n    left_user = 'questions_author_id', right_user = 'answers_author_id', \n    left_date = 'questions_date_added', right_date = 'answers_date_added',\n    path_name = 'questioners_answerers_paths', left_name = 'questioner_id', right_name = 'answerer_id',\n    reflected = False)\nquestioners_answerers_paths.sort_values(by='questioners_answerers_paths', ascending=False).head(5)\nquestioners_answerers_paths.to_parquet(\n    'questioners_answerers_paths.parquet.gzip', compression='gzip')","bae10b8a":"commenters_questioners_paths = compute_3_hop_paths(\n    left_table = comments, right_table = questions, \n    left_on = 'comments_parent_content_id', right_on = 'questions_id',\n    left_user = 'comments_author_id', right_user = 'questions_author_id', \n    left_date = 'comments_date_added', right_date = 'questions_date_added',\n    path_name = 'commenters_questioners_paths', left_name = 'commenter_id', right_name = 'questioner_id',\n    reflected = False)\ncommenters_questioners_paths.sort_values(by='commenters_questioners_paths', ascending=False).head(5)\ncommenters_questioners_paths.to_parquet(\n    'commenters_questioners_paths.parquet.gzip', compression='gzip')","f91b8f72":"commenters_answerers_paths = compute_3_hop_paths(\n    left_table = comments, right_table = answers, \n    left_on = 'comments_parent_content_id', right_on = 'answers_question_id',\n    left_user = 'comments_author_id', right_user = 'answers_author_id', \n    left_date = 'comments_date_added', right_date = 'answers_date_added',\n    path_name = 'commenters_answerers_paths', left_name = 'commenter_id', right_name = 'answerer_id',\n    reflected = False)\ncommenters_answerers_paths.sort_values(by='commenters_answerers_paths', ascending=False).head(5)\ncommenters_answerers_paths.to_parquet(\n    'commenters_answerers_paths.parquet.gzip', compression='gzip')","83b1f7e1":"os.listdir()","dc001f1a":"# II. Functions to Compute Network Path Statistics for Network Closure Effects ##","17395994":"### III.3. This path statistic measures how many previous answer and comment (Q&C) interactions happened between the student who asked the current questioner and the professional who will be considered for the current question. The higher previous Q&C interactions in the past, the higher likelihood of future interactions between them. ###","6b696af6":"# III. Computing Network Path Statistics #","1d7a4e01":"### III.2. This path statistic measures how many previous question and comment (Q&C) interactions happened between the student who asked the current questioner and the professional who will be considered for the current question. The higher previous Q&C interactions in the past, the higher likelihood of future interactions between them. ###","f2b4ab5d":"# I. Loading Relevant Data Tables #","8ea05655":"### III.1. This path statistic measures how many previous question and answer (Q&A) interactions happened between the student who asked the current questioner and the professional who will be considered for the current question. The higher previous Q&A interactions in the past, the higher likelihood of future interactions between them. ###"}}