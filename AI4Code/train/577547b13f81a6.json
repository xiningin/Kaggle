{"cell_type":{"618b76af":"code","2058e375":"code","3ee0e04c":"code","acd375f0":"code","51aecd9f":"code","8cb19057":"code","a5d9d6b1":"code","adc60ce4":"code","cd468ec9":"code","33039143":"code","22e63a8f":"code","a29d7ead":"code","13f9de42":"code","f83f040d":"code","dbdb9938":"code","91183a92":"code","de54b686":"code","d6b4f826":"markdown","6d7f969f":"markdown","4b76d543":"markdown","9ec98b52":"markdown","67ed5202":"markdown","cf51e022":"markdown","e9bf1a54":"markdown","84611a4f":"markdown","ea8a1423":"markdown","b4259b4c":"markdown","fbeb1810":"markdown","5f6a35d3":"markdown","d93e26a4":"markdown","fc9a2848":"markdown"},"source":{"618b76af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2058e375":"df = pd.read_csv('\/kaggle\/input\/data-jobs-listings-glassdoor\/glassdoor.csv')","3ee0e04c":"df.shape","acd375f0":"df.head()","51aecd9f":"for column in df.columns:\n    print(column)","8cb19057":"df['map.country'].isnull().sum()\n","a5d9d6b1":"countriesData = df['map.country'].dropna()\ncountriesData","adc60ce4":"countriesData.unique()","cd468ec9":" #What is great about this function is that it returns always the same output for all inputs corresponding to identifiers of the country\nfrom iso3166 import countries\nprint(countries.get('us'))\nprint(countries.get('USA'))\nprint(countries.get('United States of America'))","33039143":"def rename(country):\n    try:\n        return countries.get(country).alpha3\n    except:\n        return (np.nan)","22e63a8f":"old_sample_number = countriesData.shape[0]\n\ncountriesData = countriesData.apply(rename)\ncountriesData = countriesData.dropna()\n\nnew_sample_number = countriesData.shape[0]\nprint('we lost', old_sample_number-new_sample_number, 'samples after converting')","a29d7ead":"countriesData","13f9de42":"import matplotlib.pyplot as plt\nimport seaborn as sns \nplt.figure(figsize=(24, 6))\nsns.barplot(countriesData.value_counts()[countriesData.value_counts()>150].index, countriesData.value_counts()[countriesData.value_counts()>150].values)","f83f040d":"#Creating a DataFrame that stores the ID of the countries and their count\ncountry_df = pd.DataFrame(data=[countriesData.value_counts().index, countriesData.value_counts().values],index=['country','count']).T","dbdb9938":"#Converting count values to int because this will be important for plotly\ncountry_df['count']=pd.to_numeric(country_df['count'])","91183a92":"country_df.head()","de54b686":"import plotly.express as px\nfig = px.scatter_geo(country_df, locations=\"country\", size='count',\n                     hover_name=\"country\", color='country',\n                     projection=\"natural earth\")\nfig.show()","d6b4f826":"It's time to plot those count: first with a simple barplot using seaborn and next in a bubble world map using plotly express","6d7f969f":"I will convert the 'map.country' values to standardized ones using countries.get but I need to handle exceptions:","4b76d543":"Plotly express can make bubble maps really fast and very high level \n\nSee the doc here: https:\/\/plot.ly\/python\/bubble-maps\/","9ec98b52":"Now all names follow the same convention! ","67ed5202":"Noticing there is not a proper convention for the countries names:","cf51e022":"Thank you for reading!","e9bf1a54":"Obviously this approach had problems for exemple I dropped a third of the samples when renaming the countries to the ISO standard.\n\nAt least this is a functional and pretty bubble map but I'm really not sure it is relevent...","84611a4f":"Analysis this feature column with nan values dropped.","ea8a1423":"That's a lot of samples lost but I don't know better dictionaries that can map those conventionless country names to ISO convention names","b4259b4c":"Wow, that's a lot of information to parse through...\n\nFor now I'm just interested in making a simple bubble map for this data set as we have 'geo' data.","fbeb1810":"Creating a dataframe to help plotly express understand the data.\n\nRead: https:\/\/plot.ly\/python\/px-arguments\/","5f6a35d3":"The problem is that it is not a perfect dictionary and doesnt identify all possible ways to reference to a country:\n\nfor example: countries.get('U.S.A.') would give us an error","d93e26a4":"Counting the number of nan values for the countries for curiosity","fc9a2848":"Will format those to conventional names as best as I can using iso3166 get function:"}}