{"cell_type":{"878452da":"code","e2dc299a":"code","9b514467":"code","203af1fc":"code","78b755a2":"code","3c8e3198":"markdown","4e8b7e5f":"markdown","c12078db":"markdown","1ed38794":"markdown","4920af12":"markdown","15402c8e":"markdown","6e7c1207":"markdown"},"source":{"878452da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nos.chdir('..\/input')\n\n# Any results you write to the current directory are saved as output.","e2dc299a":"# get all file name\nfilenames = [x for x in os.listdir() if x.endswith('.csv') and os.path.getsize(x) > 0]\nprint(filenames)","9b514467":"import plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# make close value trace\n\nr = lambda: random.randint(0,255)\ntraces = []\n\nfor filename in filenames:\n    # random color create\n    color = 'rgb({},{},{})'.format(str(r()),str(r()),str(r()))\n    # get stock name \n    stock_name = filename.replace('.csv', '')\n    # load csv\n    df = pd.read_csv('..\/input\/{}'.format(filename))\n    # create line plot\n    trace = go.Scatter(x=df.Date, y=df['Close'],name=stock_name,line=dict(color = color))\n    traces.append(trace)\n\nlayout = py.graph_objs.Layout(\n    title='Close Plot',\n)\nfig = py.graph_objs.Figure(data=traces, layout=layout)\n\npy.offline.iplot(fig)","203af1fc":"# make log close value trace\n\nr = lambda: random.randint(0,255)\ntraces = []\n\nfor filename in filenames:\n    # random color create\n    color = 'rgb({},{},{})'.format(str(r()),str(r()),str(r()))\n    # get stock name \n    stock_name = filename.replace('.csv', '')\n    # load csv\n    df = pd.read_csv('..\/input\/{}'.format(filename))\n    # create line plot\n    trace = go.Scatter(x=df.Date, y=np.log(df['Close']),name=stock_name,line=dict(color = color))\n    traces.append(trace)\n\nlayout = py.graph_objs.Layout(\n    title='Log Plot',\n)\nfig = py.graph_objs.Figure(data=traces, layout=layout)\n\npy.offline.iplot(fig)","78b755a2":"# make price diff trace\n\nr = lambda: random.randint(0,255)\ntraces = []\n\nfor filename in filenames:\n    # random color create\n    color = 'rgb({},{},{})'.format(str(r()),str(r()),str(r()))\n    # get stock name \n    stock_name = filename.replace('.csv', '')\n    # load csv\n    df = pd.read_csv('..\/input\/{}'.format(filename))\n    # create line plot\n    trace = go.Scatter(x=df.Date, y=df['Close'] - df['Open'],name=stock_name,line=dict(color = color))\n    traces.append(trace)\n\nlayout = py.graph_objs.Layout(\n    title='Price Diff Plot',\n)\nfig = py.graph_objs.Figure(data=traces, layout=layout)\n\npy.offline.iplot(fig)","3c8e3198":"## Please upvote if you like it ;) ","4e8b7e5f":"## Please upvote if you like it ;) ","c12078db":"# Import Module","1ed38794":"# Diff Plot","4920af12":"# Get FileName","15402c8e":"# Close Price Plot","6e7c1207":"# Log Plot"}}