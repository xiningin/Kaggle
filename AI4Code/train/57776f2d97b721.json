{"cell_type":{"431d2df3":"code","e64c2a1d":"code","38ba8c69":"code","0c8c51f3":"code","b0af397c":"code","b77a55f0":"code","9e2a1cf7":"code","c4231907":"markdown","24aecc08":"markdown","49c04632":"markdown","e054002f":"markdown"},"source":{"431d2df3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e64c2a1d":"df = pd.read_csv('\/kaggle\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv').iloc[0:, 1:]\nprint(df.shape)\ndf.head(3)","38ba8c69":"# \uc6d0\ubcf8 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 PAY_0\ub2e4\uc74c\uc774 PAY_2\uc774\ub2c8 \uc21c\uc11c\uc5d0 \ub9de\uac8c \ubcc0\uacbd\ndf.rename(columns = {'PAY_0':'PAY_1',\n                     'default.payment.next.month':'default'}, inplace=True)\ny_target = df['default']\nx_features = df.drop('default', axis=1)","0c8c51f3":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ncorr = x_features.corr()\nplt.figure(figsize=(14, 14))\nsns.heatmap(corr, annot=True, fmt='.1g')","b0af397c":"# BILL_AMT 1~6\uacfc PAY_1~6 \uc0ac\uc774\uc758 \uc0c1\uad00\ub3c4\uac00 \ub192\uc74c\n# \uc774 \uc911 6\uac1c\uc758 \uc18d\uc131\uc744 2\uac1c\uc758 \ucef4\ud3ec\ub10c\ud2b8\ub85c PCA \ubcc0\ud658\ud55c \ub4a4 \uac1c\ubcc4 \ucef4\ud3ec\ub10c\ud2b8\uc758 \ubcc0\ub3d9\uc131 \uc54c\uc544\ubcf4\uae30 \nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\ncols_bill = ['BILL_AMT' + str(i) for i in range(1, 7)]\nprint('\ub300\uc0c1 \uc18d\uc131\uba85:', cols_bill)\n\n# PCA \uac1d\uccb4 \uc0dd\uc131\ud558\uace0 \ubcc0\ub3d9\uc131 \uacc4\uc0b0\uc744 \uc704\ud574 fit \ud638\ucd9c\nscaler = StandardScaler()\ndf_cols_scaled = scaler.fit_transform(x_features[cols_bill])\npca = PCA(n_components=2)\npca.fit(df_cols_scaled)\nprint('PCA components\ubcc4 \ubcc0\ub3d9\uc131:', pca.explained_variance_ratio_)","b77a55f0":"# \uc6d0\ubcf8 \ub370\uc774\ud130 \uc138\ud2b8\uc640 \ube44\uad50\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\nrcf = RandomForestClassifier(n_estimators=300,\n                            random_state=156)\nscores = cross_val_score(rcf, x_features, y_target, scoring='accuracy', cv=3)\n\nprint('CV=3\uc778 \uacbd\uc6b0 \uac1c\ubcc4 fold\uc138\ud2b8 \ubcc4 \uc815\ud655\ub3c4:', scores)\nprint('\ud3c9\uade0 \uc815\ud655\ub3c4: {0:.4f}'.format(np.mean(scores)))","9e2a1cf7":"# 6\uac1c \ucef4\ud3ec\ub10c\ud2b8 PCA \ubcc0\ud658 \ud6c4 \ubd84\ub958 \uc608\uce21 \ube44\uad50\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(x_features)\n\npca = PCA(n_components=6)\ndf_pca = pca.fit_transform(df_scaled)\nscores_pca = cross_val_score(rcf, df_pca, y_target, scoring='accuracy', cv=3)\n\nprint('CV=3\uc778 \uacbd\uc6b0\uc758 PCA \ubcc0\ud658\ub41c \uac1c\ubcc4 fold \uc138\ud2b8\ubcc4 \uc815\ud655\ub3c4:', scores_pca)\nprint('PCA \ubcc0\ud658 \ub370\uc774\ud130 \uc138\ud2b8 \ud3c9\uade0 \uc815\ud655\ub3c4: {0:.4f}'.format(np.mean(scores_pca)))","c4231907":"---","24aecc08":"PCA \uc801\uc6a9 \ud3c9\uade0 \uc815\ud655\ub3c4\ub294 \uc6d0\ub798 \uacb0\uacfc\ubcf4\ub2e4 1~2% \uc800\ud558\ub9cc \ubc1c\uc0dd\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \uc18d\uc131\uc758 1\/4 \uc815\ub3c4\ub85c\ub9cc\uc73c\ub85c \uc774\uc815\ub3c4 \uc218\uce58\uc758 \uc608\uce21 \uc131\ub2a5\uc744 \uc720\uc9c0\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc740 PCA\uc758 \ub6f0\uc5b4\ub09c \uc555\ucd95 \ub2a5\ub825\uc744 \uc798 \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774\ub77c \uc0dd\uac01\ud569\ub2c8\ub2e4.","49c04632":"PCA \uccab\ubc88\uc9f8 \ucd95\uc73c\ub85c\ub3c4 90%\uc758 \ubcc0\ub3d9\uc131\uc744 \uc218\uc6a9\ud560 \uc815\ub3c4\ub85c \uc774 6\uac1c\uc758 \uc0c1\uad00\ub3c4\uac00 \ub9e4\uc6b0 \ub192\uc2b5\ub2c8\ub2e4.","e054002f":"## [Tutorial] PCA - default of credit card clients\n### \ucc45 <\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc> \ud544\uc0ac \ucf54\ub4dc\uc785\ub2c8\ub2e4."}}