{"cell_type":{"715af79f":"code","38524703":"code","debe80f3":"code","ecb4ec6d":"code","9c9e21cb":"code","6870f3eb":"code","f9609a4f":"code","6af813c3":"code","c7ab03f6":"code","d80fe2da":"code","2bf6687b":"code","cd3c5f6c":"code","c62ca563":"code","329047c8":"code","e874546b":"code","59758740":"code","f8c6d222":"markdown","3099ab94":"markdown","31090afe":"markdown","5bbf468a":"markdown","d4a87dc4":"markdown","6b0de1a3":"markdown","ab968511":"markdown","1f343480":"markdown","1d59a358":"markdown"},"source":{"715af79f":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy.stats.mstats import gmean\nimport seaborn as sns\n%matplotlib inline\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","38524703":"sub_path = \"..\/input\/chemistry-models\"\nall_files = os.listdir(sub_path)\nall_files","debe80f3":"import warnings\nwarnings.filterwarnings(\"ignore\")\nouts = [pd.read_csv(os.path.join(sub_path, f), index_col=0) for f in all_files]\nconcat_sub = pd.concat(outs, axis=1)\ncols = list(map(lambda x: \"mol\" + str(x), range(len(concat_sub.columns))))\nconcat_sub.columns = cols\nconcat_sub.reset_index(inplace=True)\nconcat_sub.head()\nncol = concat_sub.shape[1]","ecb4ec6d":"# check correlation\nconcat_sub.iloc[:,1:].corr()","9c9e21cb":"corr = concat_sub.iloc[:,1:].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap='prism', vmin=0.96, center=0, square=True, linewidths=1, annot=True, fmt='.4f')","6870f3eb":"# get the data fields ready for stacking\nconcat_sub['m_max'] = concat_sub.iloc[:, 1:].max(axis=1)\nconcat_sub['m_min'] = concat_sub.iloc[:, 1:].min(axis=1)\nconcat_sub['m_median'] = concat_sub.iloc[:, 1:].median(axis=1)","f9609a4f":"concat_sub.describe()","6af813c3":"cutoff_lo = 0.8\ncutoff_hi = 0.2","c7ab03f6":"rank = np.tril(concat_sub.iloc[:,1:ncol].corr().values,-1)\nm_gmean = 0\nn = 8\nwhile rank.max()>0:\n    mx = np.unravel_index(rank.argmax(), rank.shape)\n    m_gmean += n*(np.log(concat_sub.iloc[:, mx[0]+1]) + np.log(concat_sub.iloc[:, mx[1]+1]))\/2\n    rank[mx] = 0\n    n += 1","d80fe2da":"concat_sub['m_mean'] = np.exp(m_gmean\/(n-1)**2)","2bf6687b":"concat_sub['scalar_coupling_constant'] = concat_sub['m_mean']\nconcat_sub[['id', 'scalar_coupling_constant']].to_csv('stack_mean.csv', \n                                        index=False, float_format='%.6f')","cd3c5f6c":"concat_sub['scalar_coupling_constant'] = concat_sub['m_median']\nconcat_sub[['id', 'scalar_coupling_constant']].to_csv('stack_median.csv', \n                                        index=False, float_format='%.6f')","c62ca563":"concat_sub['scalar_coupling_constant'] = np.where(np.all(concat_sub.iloc[:,1:7] > cutoff_lo, axis=1), 1, \n                                    np.where(np.all(concat_sub.iloc[:,1:7] < cutoff_hi, axis=1),\n                                             0, concat_sub['m_median']))\nconcat_sub[['id', 'scalar_coupling_constant']].to_csv('stack_pushout_median.csv', \n                                        index=False, float_format='%.6f')","329047c8":"concat_sub['scalar_coupling_constant'] = np.where(np.all(concat_sub.iloc[:,1:7] > cutoff_lo, axis=1), \n                                    concat_sub['m_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:7] < cutoff_hi, axis=1),\n                                             concat_sub['m_min'], \n                                             concat_sub['m_mean']))\nconcat_sub[['id', 'scalar_coupling_constant']].to_csv('stack_minmax_mean.csv', \n                                        index=False, float_format='%.6f')","e874546b":"concat_sub['scalar_coupling_constant'] = np.where(np.all(concat_sub.iloc[:,1:7] > cutoff_lo, axis=1), \n                                    concat_sub['m_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:7] < cutoff_hi, axis=1),\n                                             concat_sub['m_min'], \n                                             concat_sub['m_median']))\nconcat_sub[['id', 'scalar_coupling_constant']].to_csv('stack_minmax_median.csv', \n                                        index=False, float_format='%.6f')","59758740":"concat_sub['scalar_coupling_constant'] = concat_sub['mol0'].rank(method ='min') + concat_sub['mol1'].rank(method ='min') + concat_sub['mol2'].rank(method ='min') \nconcat_sub['scalar_coupling_constant'] = (concat_sub['scalar_coupling_constant']-concat_sub['scalar_coupling_constant'].min())\/(concat_sub['scalar_coupling_constant'].max() - concat_sub['scalar_coupling_constant'].min())\nconcat_sub.describe()\nconcat_sub[['id', 'scalar_coupling_constant']].to_csv('stack_rank.csv', index=False, float_format='%.8f')","f8c6d222":"## Averaging Ranks","3099ab94":"# MinMax + Median Stacking","31090afe":"# MinMax + Mean Stacking\n>* MinMax seems more gentle and it outperforms the previous one","5bbf468a":"Best Results : Stack Median","d4a87dc4":"## Stacking the Best Models\n<pre><b>This Kernel shows how the scores can be improved using Stacking Method.\nCredit Goes to the following kernels\nref:\n1. https:\/\/www.kaggle.com\/filemide\/distance-criskiev-hyparam-cont-1-662\n2. https:\/\/www.kaggle.com\/criskiev\/distance-is-all-you-need-lb-1-481\n3. https:\/\/www.kaggle.com\/marcelotamashiro\/lgb-public-kernels-plus-more-features\n4. https:\/\/www.kaggle.com\/scaomath\/no-memory-reduction-workflow-for-each-type-lb-1-28\n5. https:\/\/www.kaggle.com\/fnands\/1-mpnn\/output?scriptVersionId=18233432\n6. https:\/\/www.kaggle.com\/harshit92\/fork-from-kernel-1-481\n7. https:\/\/www.kaggle.com\/xwxw2929\/keras-neural-net-and-distance-features\n8. https:\/\/www.kaggle.com\/marcogorelli\/criskiev-s-distances-more-estimators-groupkfold?scriptVersionId=18843561\n9. https:\/\/www.kaggle.com\/toshik\/schnet-starter-kit\n10.https:\/\/www.kaggle.com\/abazdyrev\/nn-w-o-skew\n\n<\/b><\/pre>","6b0de1a3":"# Pushout + Median Stacking\n>* Pushout strategy is bit aggresive","ab968511":"# Median Stacking","1f343480":"# Mean Stacking","1d59a358":"## Stat Stack"}}