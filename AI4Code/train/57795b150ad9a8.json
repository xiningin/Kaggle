{"cell_type":{"ac47e235":"code","4065c844":"code","70648ecb":"code","3598912a":"code","848ea137":"code","d6474de8":"code","a95d5083":"code","53a0a4a7":"code","3d2e92bd":"code","dc212f28":"code","e59af74f":"code","0fe7d15c":"code","8c89fc5a":"code","27824c3e":"code","2c1e2099":"code","9a80d907":"code","8fa43b75":"code","37948290":"code","b491e769":"code","c6665cf1":"code","fbf7f09e":"code","a2212b80":"code","b24148d4":"code","a184495b":"code","fbe90e45":"code","61403692":"code","4c336025":"code","6f2927e9":"code","b5de2f7e":"code","2fc3c42d":"code","496c5241":"code","ae6cfeeb":"code","866ff767":"code","b379f35f":"code","f827b163":"code","2d3124f9":"code","69b9f8da":"code","80357e52":"code","839e1cc8":"code","bf112b6b":"code","02eedb19":"code","9fb98702":"code","58b53901":"code","5e6f3875":"code","84989df2":"code","9802c3e4":"code","32a58696":"code","14957fb4":"code","9cd3c337":"code","d37b5cd6":"code","52ed19f9":"code","0241e0ec":"code","25478d18":"code","3cb8f893":"code","1b178fb1":"code","ec4862bf":"code","2f8b6306":"code","abd1d6b4":"code","1da46586":"code","3127b8e3":"code","8275aaca":"code","7226c8fa":"code","22bc2794":"code","06da567c":"code","938c9eb6":"code","9ece2888":"code","b0ef7581":"code","d700bf89":"code","88b71841":"code","3b134313":"code","d6d95069":"code","c718a611":"code","5ba26733":"code","cd0b1daf":"code","3b1aeace":"code","6301f718":"code","2fe2e318":"code","6b1be492":"code","9af07a1b":"code","efa01304":"code","032c8a9b":"code","1d3e8cd5":"code","fba1dd62":"code","33648b0b":"code","6d71629a":"code","9efd9471":"code","1b0542de":"code","59e8f066":"code","37d8359e":"code","17603abe":"code","de859034":"code","ac610ac4":"code","c97aab2f":"code","2fa5639c":"code","cba58b3b":"code","091ee755":"code","2548d17a":"code","81ddf65f":"code","2dde3c65":"code","393823eb":"code","13e931b6":"code","cffd361d":"code","d0d31e9b":"code","e1af7c8b":"code","074e099b":"code","c4d23d09":"code","674d202b":"code","a93dbb5d":"code","ee83c745":"code","ff20cbc1":"code","242a8e68":"code","8463f86c":"code","29ffb384":"code","af18e4f4":"code","50981bfe":"code","5a22a0e4":"code","621e8ff0":"code","84802598":"code","6a18cf6f":"code","c51a798b":"code","f17a99e7":"code","15c6ea38":"code","a4701bd9":"code","3745b494":"code","46a43a58":"code","d6481189":"code","19252fc9":"code","48c1632b":"code","e4611bf5":"code","f2321db7":"code","342d48c8":"code","7f06c68d":"code","363ad102":"code","0f1c0568":"code","7064b413":"code","e835d1a4":"code","4f0cf331":"code","df2ba099":"code","cef438c8":"code","c5fb3a02":"code","5537e36b":"code","dc57a2bb":"code","02de478e":"code","e0dace57":"code","d34dff91":"code","ce987089":"code","5ab3fa1b":"code","557f4d5e":"code","114a300e":"code","6dde5e82":"code","80063240":"code","6044b524":"code","459aeeff":"code","e68ec823":"code","87a1d9fe":"code","b9513d23":"code","41de86d7":"code","3d3d37c8":"code","4d26699b":"code","c297925a":"code","5e1e0cbd":"code","1599c585":"code","a934bce9":"code","f9343da7":"code","6c5ea50f":"code","001435c1":"code","2bd077ef":"code","b2f1b919":"code","75ee134d":"code","e3525a43":"code","d15cec45":"code","6abb1106":"code","c35475e6":"code","21d1f064":"code","880f3ab1":"code","dd6f053c":"code","ca594f73":"code","5f429f35":"code","1d7377f9":"code","85b14d70":"code","57fc9e8b":"code","c4edd320":"code","15087d27":"code","dc80dcee":"code","a6dbb7f3":"code","db7814a5":"markdown","f941b300":"markdown","7376d645":"markdown","15943c16":"markdown","5cc06944":"markdown","e5442448":"markdown","05f33b52":"markdown","d4059cea":"markdown","ad86ab6b":"markdown","91b197e8":"markdown","8c775183":"markdown","c8dd3ef7":"markdown","783ad9e5":"markdown","e4aae8c4":"markdown","f385dc4f":"markdown","10bac2a5":"markdown","096823fb":"markdown","50f25dba":"markdown","11f4cbcc":"markdown","8450bd18":"markdown","bf6b7f24":"markdown","f0cac8eb":"markdown","18ad9293":"markdown","0f6ec6f4":"markdown","80e8e605":"markdown","01f51a86":"markdown","a2b87670":"markdown","ce76f2f3":"markdown","d9463335":"markdown","0e42dec7":"markdown","0124c803":"markdown","b059459d":"markdown","3a081023":"markdown","3ecd42af":"markdown"},"source":{"ac47e235":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4065c844":"import seaborn as sns\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\nimport matplotlib.pyplot as plt\nimport gc\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np \nimport pandas as pd","70648ecb":"# sample = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/sample_submission.csv')a","3598912a":"def RemoveNaN(df,nan_data):\n    cols = list(df.columns[df.isnull().sum() != 0])\n\n    print(\"==========List of Columns which has Nan entries in it===========\")\n    print(cols,end=\"\\n\\n\")\n\n    print(\"========Name_of_Column number_of_NaN_values percentage_of_NaN_value=====\\n ========unique_values_of_that_columns======\"\\\n          ,end=\"\\n\\n\")\n    for col in cols:\n        print(col,end=\" \")\n        print(df[col].isna().sum(),end=\" \")\n        print(df[col].isna().sum()\/df.shape[0]*100,end=\"\\n\")\n        if(len(df[col].unique())<100):\n            print(df[col].unique())\n        else:\n            print(col+\" has more than 100 unique values\")\n#         replace_string = input(\"Give the <<Type>> <<Value to replace>> type is one of the following- int or string\\n\")\n#         nan_data[col] = []\n        tokens=0\n        if(type(nan_data[col]) is list):    \n            tokens=nan_data[col][1]\n        else:\n            tokens = nan_data[col]\n        replace_type = tokens\n#         if(replace_type.lower() == \"int\"):\n#             replace_value = tokens[1]\n#             df[col].fillna(int(replace_value),inplace=True)\n#         elif(replace_type.lower() == \"string\"):\n#             replace_value = tokens[1]\n#             df[col].fillna(replace_value,inplace=True)\n        if(replace_type == \"mean\"):\n            df[col].fillna(df[col].mean(),inplace=True)\n#             nan_data[col].append(df[col].mean())\n        elif(replace_type == \"min\"):\n            df[col].fillna(df[col].min(),inplace=True)\n#             nan_data[col].append(df[col].min())\n        elif(replace_type == \"max\"):\n            df[col].fillna(df[col].max(),inplace=True)\n#             nan_data[col].append(df[col].max())\n        elif(replace_type == \"std\"):\n            df[col].fillna(df[col].std(),inplace=True)\n#             nan_data[col].append(df[col].std())\n        elif(replace_type == \"most\"):\n            df[col].fillna(df[col].value_counts().idxmax(),inplace=True)\n#             nan_data[col].append(df[col].value_counts().idxmax())\n        elif(replace_type == \"median\"):\n            df[col].fillna(df[col].median(),inplace=True)\n#             nan_data[col].append(df[col].median())\n        else:\n            df[col].fillna(replace_type,inplace=True)\n#             nan_data[col].append(replace_type)\n        print()\n#     check_NaN(df)\n    print(nan_data)","848ea137":"def merge(df,parent_df,key,method):\n    for col in df:\n        print(col)\n        if col == key:\n            continue\n        if col not in method:\n            print(col)\n            if(len(df[col].unique())<100):\n                print(df[col].unique())\n#             ipt = input()\n#             ipt = ipt.split(\" \")\n#             method[col] = [ ipt[0], float(ipt[1])]\n            method[col] = ['sum', 0.0]\n        fn = method[col][0]\n        val = method[col][1]\n        if(fn == \"ignore\"):\n            continue\n        if(fn == \"mode\"):\n            mf = df.groupby(key)[col].agg(lambda x: pd.Series.mode(x)[0]).reindex(parent_df[key].unique(), fill_value=val)\n            parent_df = parent_df.join(mf,on=key,lsuffix='_1', rsuffix='_2')\n            continue\n        if(fn == \"mean\"):\n            mf = df.groupby(key)[col].agg('mean').reindex(parent_df[key].unique(), fill_value=val)\n            parent_df = parent_df.join(mf,on=key,lsuffix='_1', rsuffix='_2')\n            continue\n        mf = df.groupby(key)[col].agg(eval(fn)).reindex(parent_df[key].unique(), fill_value=val)\n        parent_df = parent_df.join(mf,on=key,lsuffix='_1', rsuffix='_2')\n    return parent_df","d6474de8":"from scipy.stats import norm\nimport matplotlib.pylab as plat \ndef plot_graph(dataset,col):\n    if(dataset[col].dtypes != 'object'):\n        plt.figure(figsize=(10,10))\n#         sns.distplot(dataset[col].dropna(),color='blue',kde=True,kde_kws={'bw' :1.5})\n        try:\n            sns.distplot(dataset[col].dropna(),color='blue',kde=True)\n        except RuntimeError as re:\n            if str(re).startswith(\"Selected KDE bandwidth is 0. Cannot estimate density.\"):\n                sns.distplot(dataset[col].dropna(),color='blue',kde=True,kde_kws={'bw' :1.5})\n            else:\n                raise re\n        plt.show()\n        print(\"There are {} unique values \".format(len(dataset[col].unique())))\n        print(dataset[col].value_counts().head())\n    else:\n        plt.figure(figsize=(20,20))\n        temp = pd.DataFrame()\n        temp[col] = dataset[col].dropna()\n        sns.catplot(x=col,data=temp,kind='count')\n        plat.xticks(rotation=90)\n        del (temp)\n        plt.legend()\n        plt.show()\n        print(\"There are {} unique values \".format(len(dataset[col].unique())))\n        print(dataset[col].value_counts().head())","a95d5083":"bureau = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/bureau.csv')","53a0a4a7":"bureau.head()","3d2e92bd":"bureau.info()","dc212f28":"plot_graph(bureau,'CREDIT_CURRENCY')","e59af74f":"plot_graph(bureau,'DAYS_CREDIT_ENDDATE')","0fe7d15c":"plot_graph(bureau,'AMT_CREDIT_MAX_OVERDUE')","8c89fc5a":"plot_graph(bureau,'AMT_CREDIT_SUM')","27824c3e":"plot_graph(bureau,'AMT_CREDIT_SUM_DEBT')","2c1e2099":"plot_graph(bureau,'AMT_CREDIT_SUM_LIMIT')","9a80d907":"plot_graph(bureau,'AMT_ANNUITY')","8fa43b75":"bureau_nan = {'DAYS_CREDIT_ENDDATE':0, 'DAYS_ENDDATE_FACT':0, 'AMT_CREDIT_MAX_OVERDUE':0,\n              'AMT_CREDIT_SUM':0, 'AMT_CREDIT_SUM_DEBT':0, 'AMT_CREDIT_SUM_LIMIT':0, 'AMT_ANNUITY':0}","37948290":"RemoveNaN(bureau,bureau_nan)","b491e769":"#encoding\nbureau['CREDIT_TYPE'] = LabelEncoder().fit_transform(bureau['CREDIT_TYPE'])\nb_Onehot = ['CREDIT_ACTIVE','CREDIT_CURRENCY']\nbureau = pd.get_dummies(bureau,columns=b_Onehot,drop_first=True)","c6665cf1":"bureau.head()","fbf7f09e":"bureau_bal = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/bureau_balance.csv')","a2212b80":"bureau_bal.head()","b24148d4":"bureau_bal.info()","a184495b":"plot_graph(bureau_bal,'MONTHS_BALANCE')","fbe90e45":"# plot_graph(bureau_bal,'STATUS')","61403692":"bb_Onehot = ['STATUS']\nbureau_bal = pd.get_dummies(bureau_bal,columns=bb_Onehot,drop_first=True)","4c336025":"# bureau_bal.head()\n# bureau_bal['STATUS'].unique()","6f2927e9":"# bureau bal to bureau\nbb_merge = {'MONTHS_BALANCE': ['min',0.0],\n 'STATUS_1': ['sum', 0.0],\n 'STATUS_2': ['sum', 0.0],\n 'STATUS_3': ['sum', 0.0],\n 'STATUS_4': ['sum', 0.0],\n 'STATUS_5': ['sum', 0.0],\n 'STATUS_C': ['sum', 0.0],\n 'STATUS_X': ['sum', 0.0]}\nbureau = merge(bureau_bal,bureau,'SK_ID_BUREAU',bb_merge)","b5de2f7e":"# bureau.head()\ndel bureau_bal\ngc.collect()","2fc3c42d":"cash_bal = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/POS_CASH_balance.csv')","496c5241":"sns.heatmap(cash_bal.corr().abs(),vmin=-1,cmap='coolwarm',annot=True)","ae6cfeeb":"cash_bal.head()","866ff767":"cash_bal_drop = ['CNT_INSTALMENT_FUTURE']\ncash_bal.drop(columns = cash_bal_drop,axis=1,inplace = True)","b379f35f":"cash_bal['SK_ID_PREV'].describe()","f827b163":"cash_bal.isna().sum()","2d3124f9":"cash_bal['CNT_INSTALMENT'].value_counts()","69b9f8da":"plot_graph(cash_bal,'CNT_INSTALMENT')","80357e52":"cash_bal_nan = {'CNT_INSTALMENT': 'median'}","839e1cc8":"RemoveNaN(cash_bal,cash_bal_nan)","bf112b6b":"cb_Onehot = ['NAME_CONTRACT_STATUS']\ncash_bal = pd.get_dummies(cash_bal,columns=cb_Onehot,drop_first=True)","02eedb19":"prev_app = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/previous_application.csv')","9fb98702":"prev_app.isna().sum()","58b53901":"plt.figure(figsize=(20,20))\nsns.heatmap(prev_app.corr().abs(),vmin=-1,cmap='coolwarm',annot=True)\n","5e6f3875":"upper = prev_app.corr().abs().where(np.triu(np.ones(prev_app.corr().shape), k=1).astype(np.bool))\nto_drop_prev_app = [column for column in upper.columns if any(upper[column] >= 0.90)]\nprev_app.drop(columns =to_drop_prev_app,axis=1,inplace = True)","84989df2":"to_drop_prev_app","9802c3e4":"prev_app.drop(columns=['RATE_INTEREST_PRIMARY','RATE_INTEREST_PRIVILEGED'],inplace=True)","32a58696":"prev_app['NAME_TYPE_SUITE'].value_counts()","14957fb4":"plot_graph(prev_app,'AMT_ANNUITY')\n# \n# ","9cd3c337":"plot_graph(prev_app,'PRODUCT_COMBINATION')","d37b5cd6":"plot_graph(prev_app,'NAME_TYPE_SUITE')","52ed19f9":"plot_graph(prev_app,'AMT_DOWN_PAYMENT')","0241e0ec":"plot_graph(prev_app,'RATE_DOWN_PAYMENT')","25478d18":"plot_graph(prev_app,'CNT_PAYMENT')","3cb8f893":"plot_graph(prev_app,'DAYS_FIRST_DRAWING')","1b178fb1":"plot_graph(prev_app,'DAYS_FIRST_DUE')","ec4862bf":"plot_graph(prev_app,'DAYS_LAST_DUE_1ST_VERSION')","2f8b6306":"plot_graph(prev_app,'DAYS_LAST_DUE')","abd1d6b4":"plot_graph(prev_app,'NFLAG_INSURED_ON_APPROVAL')","1da46586":"prev_app_nan = {\"AMT_ANNUITY\":0,\"AMT_DOWN_PAYMENT\":0,\"RATE_DOWN_PAYMENT\":0,\n                \"NAME_TYPE_SUITE\":\"most\",\"CNT_PAYMENT\":0,\"PRODUCT_COMBINATION\":\"most\",\n                \"DAYS_FIRST_DRAWING\":\"most\",\"DAYS_FIRST_DUE\":\"most\",\"DAYS_LAST_DUE_1ST_VERSION\":\"most\",\n               \"DAYS_LAST_DUE\":\"most\",\"NFLAG_INSURED_ON_APPROVAL\":0}","3127b8e3":"RemoveNaN(prev_app,prev_app_nan)","8275aaca":"# ADD encoding\ncategor_prev_app = [i for i in prev_app.columns if prev_app[i].dtypes == 'object']\ncategor_prev_app","7226c8fa":"prev_app['PRODUCT_COMBINATION'].value_counts()","22bc2794":"labelencoder = LabelEncoder()\nLabel_prev_app = ['FLAG_LAST_APPL_PER_CONTRACT','NAME_CONTRACT_STATUS','NAME_CASH_LOAN_PURPOSE','CODE_REJECT_REASON','NAME_CLIENT_TYPE',\n        'NAME_GOODS_CATEGORY','NAME_PORTFOLIO','NAME_SELLER_INDUSTRY','CHANNEL_TYPE','PRODUCT_COMBINATION']\nfor i in Label_prev_app:\n    prev_app[i] = labelencoder.fit_transform(prev_app[i])","06da567c":"# temp_label = []\n# for i in temp_label:\n#     prev_app[i] = labelencoder.fit_transform(prev_app[i])","938c9eb6":"# Ambigious_prev_App = ['NAME_SELLER_INDUSTRY','CHANNEL_TYPE','NAME_YIELD_GROUP','PRODUCT_COMBINATION']","9ece2888":"Onehot_prev_app = ['WEEKDAY_APPR_PROCESS_START','NAME_PAYMENT_TYPE','NAME_TYPE_SUITE','NAME_CONTRACT_TYPE',\n                   'NAME_PRODUCT_TYPE','NAME_YIELD_GROUP']\nprev_app = pd.get_dummies(prev_app,columns=Onehot_prev_app,drop_first=True)","b0ef7581":"# temp2 = ['WEEKDAY_APPR_PROCESS_START']","d700bf89":"cp_merge={'SK_ID_CURR': ['ignore', 0.0],\n 'MONTHS_BALANCE': ['min', 0.0],\n 'CNT_INSTALMENT': ['max', 0.0],\n 'SK_DPD': ['sum', 0.0],\n 'SK_DPD_DEF': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Amortized debt': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Approved': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Canceled': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Completed': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Demand': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Returned to the store': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Signed': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_XNA': ['sum', 0.0]}\nprev_app = merge(cash_bal,prev_app,'SK_ID_PREV',cp_merge)","88b71841":"# cp_merge\ndel cash_bal\ngc.collect()","3b134313":"# prev_app.head()","d6d95069":"installment = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/installments_payments.csv')","c718a611":"installment_nan = {\"DAYS_ENTRY_PAYMENT\":0,\"AMT_PAYMENT\":0}","5ba26733":"plot_graph(installment,'AMT_PAYMENT')","cd0b1daf":"plot_graph(installment,'DAYS_ENTRY_PAYMENT')","3b1aeace":"RemoveNaN(installment,installment_nan)","6301f718":"installment['penalty_days']=installment['DAYS_ENTRY_PAYMENT']-installment['DAYS_INSTALMENT']\ninstallment['penalty_amount']=installment['AMT_PAYMENT']-installment['AMT_INSTALMENT']","2fe2e318":"installment.drop(columns=['DAYS_ENTRY_PAYMENT','DAYS_INSTALMENT','AMT_PAYMENT','AMT_INSTALMENT'],inplace=True)\n# upper = prev_app.corr().abs().where(np.triu(np.ones(prev_app.corr().shape), k=1).astype(np.bool))\n# to_drop_prev_app = [column for column in upper.columns if any(upper[column] >= 0.90)]\n# prev_app.drop(columns =to_drop_prev_app,axis=1,inplace = True)","6b1be492":"installment.head()","9af07a1b":"ip_merge = {'SK_ID_CURR': ['ignore', 0.0],\n 'NUM_INSTALMENT_VERSION': ['mode', 0.0],\n 'NUM_INSTALMENT_NUMBER': ['max', 0.0],\n 'penalty_days': ['sum', 0.0],\n 'penalty_amount': ['sum', 0.0]}\nprev_app = merge(installment,prev_app,'SK_ID_PREV',ip_merge)","efa01304":"# ip_merge\ndel installment\ngc.collect()","032c8a9b":"cred_bal = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/credit_card_balance.csv')","1d3e8cd5":"upper = cred_bal.corr().abs().where(np.triu(np.ones(cred_bal.corr().shape), k=1).astype(np.bool))\nto_drop_cred_bal = [column for column in upper.columns if any(upper[column] >= 0.90)]\ncred_bal.drop(columns =to_drop_cred_bal,axis=1,inplace = True)","fba1dd62":"to_drop_cred_bal","33648b0b":"# for i in credit_bal_nan:\n#     print(\"plot_graph(credit_bal,\\'\"+i+\"\\')\")\n# 'CNT_DRAWINGS_POS_CURRENT'","6d71629a":"plot_graph(cred_bal,'AMT_DRAWINGS_ATM_CURRENT')","9efd9471":"plot_graph(cred_bal,'AMT_DRAWINGS_OTHER_CURRENT')","1b0542de":"plot_graph(cred_bal,'AMT_DRAWINGS_POS_CURRENT')","59e8f066":"plot_graph(cred_bal,'AMT_INST_MIN_REGULARITY')","37d8359e":"plot_graph(cred_bal,'AMT_PAYMENT_CURRENT')","17603abe":"plot_graph(cred_bal,'CNT_DRAWINGS_ATM_CURRENT')","de859034":"plot_graph(cred_bal,'CNT_DRAWINGS_OTHER_CURRENT')","ac610ac4":"plot_graph(cred_bal,'CNT_INSTALMENT_MATURE_CUM')","c97aab2f":"credit_bal_nan = {'AMT_DRAWINGS_ATM_CURRENT': 0,'AMT_DRAWINGS_OTHER_CURRENT': 0,\n                  'AMT_DRAWINGS_POS_CURRENT': 0, 'AMT_INST_MIN_REGULARITY': 0, 'AMT_PAYMENT_CURRENT': 0,\n                  'CNT_DRAWINGS_ATM_CURRENT': 0, 'CNT_DRAWINGS_OTHER_CURRENT': 0, \n                  'CNT_INSTALMENT_MATURE_CUM': 0}","2fa5639c":"RemoveNaN(cred_bal,credit_bal_nan)","cba58b3b":"crb_Onehot = ['NAME_CONTRACT_STATUS']\ncred_bal = pd.get_dummies(cred_bal,columns=crb_Onehot,drop_first=True)","091ee755":"cred_merge = {'SK_ID_CURR': ['ignore', 0.0],\n 'MONTHS_BALANCE': ['min', 0.0],\n 'AMT_BALANCE': ['min', 0.0],\n 'AMT_CREDIT_LIMIT_ACTUAL': ['mean', 0.0],\n 'AMT_DRAWINGS_ATM_CURRENT': ['mean', 0.0],\n 'AMT_DRAWINGS_CURRENT': ['mean', 0.0],\n 'AMT_DRAWINGS_OTHER_CURRENT': ['mean', 0.0],\n 'AMT_DRAWINGS_POS_CURRENT': ['mean', 0.0],\n 'AMT_INST_MIN_REGULARITY': ['mean', 0.0],\n 'AMT_PAYMENT_CURRENT': ['mean', 0.0],\n 'CNT_DRAWINGS_ATM_CURRENT': ['sum', 0.0],\n 'CNT_DRAWINGS_CURRENT': ['sum', 0.0],\n 'CNT_DRAWINGS_OTHER_CURRENT': ['sum', 0.0],\n 'CNT_INSTALMENT_MATURE_CUM': ['sum', 0.0],\n 'SK_DPD': ['sum', 0.0],\n 'SK_DPD_DEF': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Approved': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Completed': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Demand': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Refused': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Sent proposal': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Signed': ['sum', 0.0]}\nprev_app = merge(cred_bal,prev_app,'SK_ID_PREV',cred_merge)","2548d17a":"del cred_bal\ngc.collect()","81ddf65f":"apptrain = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/application_train.csv')","2dde3c65":"apptrain.head()","393823eb":"apptrain.info()","13e931b6":"train=apptrain.drop(columns=['SK_ID_CURR'])\nfor i in train:\n    if (train[i].dtype=='object'):\n        plt.figure(figsize=(10,5))\n        sns.countplot(data=train,x='TARGET',hue=i,palette=\"Set2\")\n#         plat.xticks(rotation=90)\n        plt.show()","cffd361d":"for i in train:\n    if (len(train[i].unique())<=3 and not train[i].dtype=='object'):\n        plt.figure(figsize=(10,5))\n        sns.countplot(data=train,x='TARGET',hue=i,palette=\"Set2\")\n        plt.show()","d0d31e9b":"for i in train:\n    if (len(train[i].unique())>3 and train[i].dtype != 'object'):\n        plt.figure(figsize=(10,10))\n        sns.kdeplot(train.loc[train['TARGET'] == 0, i], label = 'target = 0',bw=0.1)\n        sns.kdeplot(train.loc[train['TARGET'] == 1, i], label = 'target = 1',bw=0.1)\n        plt.legend()\n        plt.show()","e1af7c8b":"apptrain.isna().sum()","074e099b":"apptrain_nan = {'AMT_ANNUITY': 0,\n 'AMT_GOODS_PRICE': 0,\n 'NAME_TYPE_SUITE': 'most',\n 'OWN_CAR_AGE': -1,\n 'OCCUPATION_TYPE': 'unknown',\n 'CNT_FAM_MEMBERS': 1,\n 'EXT_SOURCE_1': 'median',\n 'EXT_SOURCE_2': 'median',\n 'EXT_SOURCE_3': 'median',\n 'APARTMENTS_AVG': 'median',\n 'BASEMENTAREA_AVG': 'median',\n 'YEARS_BEGINEXPLUATATION_AVG': 'median',\n 'YEARS_BUILD_AVG': 'median',\n 'COMMONAREA_AVG': 'median',\n 'ELEVATORS_AVG': 'median',\n 'ENTRANCES_AVG': 'median',\n 'FLOORSMAX_AVG': 'median',\n 'FLOORSMIN_AVG': 'median',\n 'LANDAREA_AVG': 'median',\n 'LIVINGAPARTMENTS_AVG': 'median',\n 'LIVINGAREA_AVG': 'median',\n 'NONLIVINGAPARTMENTS_AVG': 'median',\n 'NONLIVINGAREA_AVG': 'median',\n 'APARTMENTS_MODE': 'median',\n 'BASEMENTAREA_MODE': 'median',\n 'YEARS_BEGINEXPLUATATION_MODE': 'median',\n 'YEARS_BUILD_MODE': 'median',\n 'COMMONAREA_MODE': 'median',\n 'ELEVATORS_MODE': 'median',\n 'ENTRANCES_MODE': 'median',\n 'FLOORSMAX_MODE': 'median',\n 'FLOORSMIN_MODE': 'median',\n 'LANDAREA_MODE': 'median',\n 'LIVINGAPARTMENTS_MODE': 'median',\n 'LIVINGAREA_MODE': 'median',\n 'NONLIVINGAPARTMENTS_MODE': 'median',\n 'NONLIVINGAREA_MODE': 'median',\n 'APARTMENTS_MEDI': 'median',\n 'BASEMENTAREA_MEDI': 'median',\n 'YEARS_BEGINEXPLUATATION_MEDI': 'median',\n 'YEARS_BUILD_MEDI': 'median',\n 'COMMONAREA_MEDI': 'median',\n 'ELEVATORS_MEDI': 'median',\n 'ENTRANCES_MEDI': 'median',\n 'FLOORSMAX_MEDI': 'median',\n 'FLOORSMIN_MEDI': 'median',\n 'LANDAREA_MEDI': 'median',\n 'LIVINGAPARTMENTS_MEDI': 'median',\n 'LIVINGAREA_MEDI': 'median',\n 'NONLIVINGAPARTMENTS_MEDI': 'median',\n 'NONLIVINGAREA_MEDI': 'median',\n 'FONDKAPREMONT_MODE': 'not specified',\n 'HOUSETYPE_MODE': 'unknown',\n 'TOTALAREA_MODE': 'median',\n 'WALLSMATERIAL_MODE': 'unknown',\n 'EMERGENCYSTATE_MODE': 'No',\n 'OBS_30_CNT_SOCIAL_CIRCLE': 0,\n 'DEF_30_CNT_SOCIAL_CIRCLE': 0,\n 'OBS_60_CNT_SOCIAL_CIRCLE': 0,\n 'DEF_60_CNT_SOCIAL_CIRCLE':0,\n 'AMT_REQ_CREDIT_BUREAU_HOUR': 0,\n 'AMT_REQ_CREDIT_BUREAU_DAY': 0,\n 'AMT_REQ_CREDIT_BUREAU_WEEK': 0,\n 'AMT_REQ_CREDIT_BUREAU_MON': 0,\n 'AMT_REQ_CREDIT_BUREAU_QRT': 0,\n 'AMT_REQ_CREDIT_BUREAU_YEAR': 0}","c4d23d09":"RemoveNaN(apptrain,apptrain_nan)","674d202b":"temp_cols = []\nfor i in apptrain:\n    if(i.find('AVG')!=-1 ):\n        temp_cols.append(i)","a93dbb5d":"plt.figure(figsize=(20,20))\nsns.heatmap(apptrain.loc[:,temp_cols].corr().abs(),vmin=-1,cmap='coolwarm',annot=True)","ee83c745":"upper = apptrain.corr().abs().where(np.triu(np.ones(apptrain.corr().shape), k=1).astype(np.bool))\napptrain_drop = [column for column in upper.columns if any(upper[column] >= 0.90)]\napptrain.drop(columns =apptrain_drop,axis=1,inplace = True)","ff20cbc1":"# plt.figure(figsize=(50,50))\n# sns.heatmap(apptrain.corr().abs(),vmin=-1,cmap='coolwarm',annot=True)","242a8e68":"# plt.figure(figsize=(50,50))\n# sns.heatmap(apptrain.corr().abs(),vmin=-1,cmap='coolwarm',annot=True)\napptrain_drop","8463f86c":"# nan_data\n# apptrain['EMERGENCYSTATE_MODE'].value_counts()","29ffb384":"# apptrain.isna().sum()\ncategor_apptrain = [i for i in apptrain.columns if apptrain[i].dtypes == 'object']\ncategor_apptrain","af18e4f4":"apptrain['WALLSMATERIAL_MODE'].value_counts()","50981bfe":"# Encoding\nlabelencoder = LabelEncoder()\nLabel_apptrain = ['NAME_CONTRACT_TYPE','CODE_GENDER','FLAG_OWN_CAR','FLAG_OWN_REALTY','NAME_INCOME_TYPE','NAME_EDUCATION_TYPE',\n         'NAME_FAMILY_STATUS','NAME_HOUSING_TYPE','OCCUPATION_TYPE','ORGANIZATION_TYPE','EMERGENCYSTATE_MODE','NAME_TYPE_SUITE','WEEKDAY_APPR_PROCESS_START','FONDKAPREMONT_MODE','HOUSETYPE_MODE','WALLSMATERIAL_MODE']\nfor i in Label_apptrain:\n    apptrain[i] = labelencoder.fit_transform(apptrain[i])","5a22a0e4":"# Ambigous_apptrain = ['FONDKAPREMONT_MODE','HOUSETYPE_MODE','WALLSMATERIAL_MODE']","621e8ff0":"# Onehot_apptrain = ['NAME_TYPE_SUITE','WEEKDAY_APPR_PROCESS_START','FONDKAPREMONT_MODE','HOUSETYPE_MODE','WALLSMATERIAL_MODE']\n# apptrain = pd.get_dummies(apptrain,columns=Onehot_apptrain,drop_first=True)","84802598":"# apptrain.info()\napptrain_merge = {'SK_ID_PREV': ['ignore', 0.0],\n 'AMT_ANNUITY': ['mean', 0.0],\n 'AMT_APPLICATION': ['mean', 0.0],\n 'AMT_DOWN_PAYMENT': ['mean', 0.0],\n 'HOUR_APPR_PROCESS_START': ['ignore', 0.0],\n 'FLAG_LAST_APPL_PER_CONTRACT': ['sum', 0.0],\n 'NFLAG_LAST_APPL_IN_DAY': ['sum', 0.0],\n 'RATE_DOWN_PAYMENT': ['mean', 0.0],\n 'NAME_CASH_LOAN_PURPOSE': ['mode', 0.0],\n 'NAME_CONTRACT_STATUS': ['mode', 0.0],\n 'DAYS_DECISION': ['min', 0.0],\n 'CODE_REJECT_REASON': ['mode', 0.0],\n 'NAME_CLIENT_TYPE': ['sum', 0.0],\n 'NAME_GOODS_CATEGORY': ['sum', 0.0],\n 'NAME_PORTFOLIO': ['sum', 0.0],\n 'CHANNEL_TYPE': ['mode', 0.0],\n 'SELLERPLACE_AREA': ['mode', 0.0],\n 'NAME_SELLER_INDUSTRY': ['mode', 0.0],\n 'CNT_PAYMENT': ['sum', 0.0],\n 'PRODUCT_COMBINATION': ['mode', 0.0],\n 'DAYS_FIRST_DRAWING': ['min', 0.0],\n 'DAYS_FIRST_DUE': ['min', 0.0],\n 'DAYS_LAST_DUE_1ST_VERSION': ['min', 0.0],\n 'DAYS_LAST_DUE': ['min', 0.0],\n 'NFLAG_INSURED_ON_APPROVAL': ['sum', 0.0],\n 'WEEKDAY_APPR_PROCESS_START_MONDAY': ['sum', 0.0],\n 'WEEKDAY_APPR_PROCESS_START_SATURDAY': ['sum', 0.0],\n 'WEEKDAY_APPR_PROCESS_START_SUNDAY': ['sum', 0.0],\n 'WEEKDAY_APPR_PROCESS_START_THURSDAY': ['sum', 0.0],\n 'WEEKDAY_APPR_PROCESS_START_TUESDAY': ['sum', 0.0],\n 'WEEKDAY_APPR_PROCESS_START_WEDNESDAY': ['sum', 0.0],\n 'NAME_PAYMENT_TYPE_Cashless from the account of the employer': ['sum', 0.0],\n 'NAME_PAYMENT_TYPE_Non-cash from your account': ['sum', 0.0],\n 'NAME_PAYMENT_TYPE_XNA': ['sum', 0.0],\n 'NAME_TYPE_SUITE_Family': ['sum', 0.0],\n 'NAME_TYPE_SUITE_Group of people': ['sum', 0.0],\n 'NAME_TYPE_SUITE_Other_A': ['sum', 0.0],\n 'NAME_TYPE_SUITE_Other_B': ['sum', 0.0],\n 'NAME_TYPE_SUITE_Spouse, partner': ['sum', 0.0],\n 'NAME_TYPE_SUITE_Unaccompanied': ['sum', 0.0],\n 'NAME_CONTRACT_TYPE_Consumer loans': ['sum', 0.0],\n 'NAME_CONTRACT_TYPE_Revolving loans': ['sum', 0.0],\n 'NAME_CONTRACT_TYPE_XNA': ['sum', 0.0],\n 'NAME_PRODUCT_TYPE_walk-in': ['sum', 0.0],\n 'NAME_PRODUCT_TYPE_x-sell': ['sum', 0.0],\n 'NAME_YIELD_GROUP_high': ['sum', 0.0],\n 'NAME_YIELD_GROUP_low_action': ['sum', 0.0],\n 'NAME_YIELD_GROUP_low_normal': ['sum', 0.0],\n 'NAME_YIELD_GROUP_middle': ['sum', 0.0],\n 'MONTHS_BALANCE_1': ['max', 0.0],\n 'CNT_INSTALMENT': ['sum', 0.0],\n 'SK_DPD_1': ['sum', 0.0],\n 'SK_DPD_DEF_1': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Amortized debt': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Approved_1': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Canceled': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Completed_1': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Demand_1': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Returned to the store': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Signed_1': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_XNA': ['sum', 0.0],\n 'NUM_INSTALMENT_VERSION': ['mode', 0.0],\n 'NUM_INSTALMENT_NUMBER': ['max', 0.0],\n 'penalty_days': ['sum', 0.0],\n 'penalty_amount': ['sum', 0.0],\n 'MONTHS_BALANCE_2': ['max', 0.0],\n 'AMT_BALANCE': ['mean', 0.0],\n 'AMT_CREDIT_LIMIT_ACTUAL': ['mean', 0.0],\n 'AMT_DRAWINGS_ATM_CURRENT': ['mean', 0.0],\n 'AMT_DRAWINGS_CURRENT': ['mean', 0.0],\n 'AMT_DRAWINGS_OTHER_CURRENT': ['mean', 0.0],\n 'AMT_DRAWINGS_POS_CURRENT': ['mean', 0.0],\n 'AMT_INST_MIN_REGULARITY': ['mean', 0.0],\n 'AMT_PAYMENT_CURRENT': ['mean', 0.0],\n 'CNT_DRAWINGS_ATM_CURRENT': ['sum', 0.0],\n 'CNT_DRAWINGS_CURRENT': ['sum', 0.0],\n 'CNT_DRAWINGS_OTHER_CURRENT': ['sum', 0.0],\n 'CNT_INSTALMENT_MATURE_CUM': ['sum', 0.0],\n 'SK_DPD_2': ['sum', 0.0],\n 'SK_DPD_DEF_2': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Approved_2': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Completed_2': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Demand_2': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Refused': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Sent proposal': ['sum', 0.0],\n 'NAME_CONTRACT_STATUS_Signed_2': ['sum', 0.0]}\napptrain = merge(prev_app,apptrain,'SK_ID_CURR',apptrain_merge)","6a18cf6f":"# apptrain_merge\n# del prev_app\n# gc.collect()","c51a798b":"bat = {'SK_ID_BUREAU': ['ignore', 0.0],\n 'DAYS_CREDIT': ['min', 0.0],\n 'CREDIT_DAY_OVERDUE': ['min', 0.0],\n 'DAYS_CREDIT_ENDDATE': ['min', 0.0],\n 'DAYS_ENDDATE_FACT': ['sum', 0.0],\n 'AMT_CREDIT_MAX_OVERDUE': ['max', 0.0],\n 'CNT_CREDIT_PROLONG': ['sum', 0.0],\n 'AMT_CREDIT_SUM': ['mean', 0.0],\n 'AMT_CREDIT_SUM_DEBT': ['mean', 0.0],\n 'AMT_CREDIT_SUM_LIMIT': ['mean', 0.0],\n 'AMT_CREDIT_SUM_OVERDUE': ['mean', 0.0],\n 'CREDIT_TYPE': ['mode', 0.0],\n 'DAYS_CREDIT_UPDATE': ['min', 0.0],\n 'AMT_ANNUITY': ['mean', 0.0],\n 'CREDIT_ACTIVE_Bad debt': ['sum', 0.0],\n 'CREDIT_ACTIVE_Closed': ['sum', 0.0],\n 'CREDIT_ACTIVE_Sold': ['sum', 0.0],\n 'CREDIT_CURRENCY_currency 2': ['sum', 0.0],\n 'CREDIT_CURRENCY_currency 3': ['sum', 0.0],\n 'CREDIT_CURRENCY_currency 4': ['sum', 0.0],\n 'MONTHS_BALANCE': ['min', 0.0],\n 'STATUS_1': ['sum', 0.0],\n 'STATUS_2': ['sum', 0.0],\n 'STATUS_3': ['sum', 0.0],\n 'STATUS_4': ['sum', 0.0],\n 'STATUS_5': ['sum', 0.0],\n 'STATUS_C': ['sum', 0.0],\n 'STATUS_X': ['sum', 0.0]}\napptrain = merge(bureau,apptrain,'SK_ID_CURR',bat)","f17a99e7":"apptrain.shape","15c6ea38":"apptrain.to_csv(\"trainapp.csv\",index=False)","a4701bd9":"apptest = pd.read_csv('\/kaggle\/input\/iiitb2020-home-credit-default-risk\/application_test.csv')","3745b494":"apptest.head()","46a43a58":"apptest.info()","d6481189":"apptest_nan={'AMT_ANNUITY': [0, 0], 'AMT_GOODS_PRICE': [0, 0], 'NAME_TYPE_SUITE': ['Unaccompanied', 'Unaccompanied'],\n             'OWN_CAR_AGE': [-1, -1], 'OCCUPATION_TYPE': ['unknown', 'unknown'], 'CNT_FAM_MEMBERS': [1, 1],\n             'EXT_SOURCE_1': ['median', 0.5066961392817232], 'EXT_SOURCE_2': ['median', 0.5660097711985461],\n             'EXT_SOURCE_3': ['median', 0.5352762504724826], 'APARTMENTS_AVG': ['median', 0.0876],\n             'BASEMENTAREA_AVG': ['median', 0.0764], 'YEARS_BEGINEXPLUATATION_AVG': ['median', 0.9816],\n             'YEARS_BUILD_AVG': ['median', 0.7552], 'COMMONAREA_AVG': ['median', 0.0211],\n             'ELEVATORS_AVG': ['median', 0.0],'ENTRANCES_AVG': ['median', 0.1379], 'FLOORSMAX_AVG': ['median', 0.1667],\n             'FLOORSMIN_AVG': ['median', 0.2083], 'LANDAREA_AVG': ['median', 0.0482],\n             'LIVINGAPARTMENTS_AVG': ['median', 0.0756], 'LIVINGAREA_AVG': ['median', 0.0746],\n             'NONLIVINGAPARTMENTS_AVG': ['median', 0.0], 'NONLIVINGAREA_AVG': ['median', 0.0036],\n             'APARTMENTS_MODE': ['median', 0.084], 'BASEMENTAREA_MODE': ['median', 0.0748],\n             'YEARS_BEGINEXPLUATATION_MODE': ['median', 0.9816], 'YEARS_BUILD_MODE': ['median', 0.7648],\n             'COMMONAREA_MODE': ['median', 0.0191], 'ELEVATORS_MODE': ['median', 0.0],\n             'ENTRANCES_MODE': ['median', 0.1379], 'FLOORSMAX_MODE': ['median', 0.1667],\n             'FLOORSMIN_MODE': ['median', 0.2083], 'LANDAREA_MODE': ['median', 0.0459],\n             'LIVINGAPARTMENTS_MODE': ['median', 0.0771], 'LIVINGAREA_MODE': ['median', 0.0731],\n             'NONLIVINGAPARTMENTS_MODE': ['median', 0.0], 'NONLIVINGAREA_MODE': ['median', 0.0011],\n             'APARTMENTS_MEDI': ['median', 0.0874], 'BASEMENTAREA_MEDI': ['median', 0.076],\n             'YEARS_BEGINEXPLUATATION_MEDI': ['median', 0.9816], 'YEARS_BUILD_MEDI': ['median', 0.7585],\n             'COMMONAREA_MEDI': ['median', 0.0209], 'ELEVATORS_MEDI': ['median', 0.0],\n             'ENTRANCES_MEDI': ['median', 0.1379], 'FLOORSMAX_MEDI': ['median', 0.1667],\n             'FLOORSMIN_MEDI': ['median', 0.2083], 'LANDAREA_MEDI': ['median', 0.0487],\n             'LIVINGAPARTMENTS_MEDI': ['median', 0.0765], 'LIVINGAREA_MEDI': ['median', 0.0749],\n             'NONLIVINGAPARTMENTS_MEDI': ['median', 0.0], 'NONLIVINGAREA_MEDI': ['median', 0.0031],\n             'FONDKAPREMONT_MODE': ['not specified', 'not specified'], 'HOUSETYPE_MODE': ['unknown', 'unknown'],\n             'TOTALAREA_MODE': ['median', 0.0688], 'WALLSMATERIAL_MODE': ['unknown', 'unknown'],\n             'EMERGENCYSTATE_MODE': ['No', 'No'], 'OBS_30_CNT_SOCIAL_CIRCLE': [0,0], 'DEF_30_CNT_SOCIAL_CIRCLE': [0,0],\n             'OBS_60_CNT_SOCIAL_CIRCLE': [0,0], 'DEF_60_CNT_SOCIAL_CIRCLE': [0,0],'DAYS_LAST_PHONE_CHANGE':[0,0],\n             'AMT_REQ_CREDIT_BUREAU_HOUR': [0,0], 'AMT_REQ_CREDIT_BUREAU_DAY': [0,0], 'AMT_REQ_CREDIT_BUREAU_WEEK': [0,0],\n             'AMT_REQ_CREDIT_BUREAU_MON': [0,0], 'AMT_REQ_CREDIT_BUREAU_QRT': [0,0], 'AMT_REQ_CREDIT_BUREAU_YEAR': [0,0]}","19252fc9":"RemoveNaN(apptest,apptest_nan)","48c1632b":"# drop code\nupper = apptest.corr().abs().where(np.triu(np.ones(apptest.corr().shape), k=1).astype(np.bool))\napptest_drop = [column for column in upper.columns if any(upper[column] >= 0.90)]\napptest.drop(columns =apptest_drop,axis=1,inplace = True)","e4611bf5":"# encode\ncategor_apptest = [i for i in apptest.columns if apptest[i].dtypes == 'object']\ncategor_apptest","f2321db7":"labelencoder = LabelEncoder()\nLabel_apptest = ['NAME_CONTRACT_TYPE','CODE_GENDER','FLAG_OWN_CAR','FLAG_OWN_REALTY','NAME_INCOME_TYPE',\n                 'NAME_EDUCATION_TYPE','NAME_FAMILY_STATUS','NAME_HOUSING_TYPE','OCCUPATION_TYPE','ORGANIZATION_TYPE',\n                 'EMERGENCYSTATE_MODE','NAME_TYPE_SUITE','WEEKDAY_APPR_PROCESS_START','FONDKAPREMONT_MODE',\n                 'HOUSETYPE_MODE','WALLSMATERIAL_MODE']\nfor i in Label_apptest:\n    apptest[i] = labelencoder.fit_transform(apptest[i])","342d48c8":"# Ambigous_apptest = []","7f06c68d":"# Onehot_test = ['NAME_TYPE_SUITE','WEEKDAY_APPR_PROCESS_START','FONDKAPREMONT_MODE','HOUSETYPE_MODE','WALLSMATERIAL_MODE']\n# apptest = pd.get_dummies(apptest,columns=Onehot_test,drop_first=True)","363ad102":"apptest = merge(prev_app,apptest,'SK_ID_CURR',apptrain_merge)","0f1c0568":"apptest = merge(bureau,apptest,'SK_ID_CURR',bat)","7064b413":"del prev_app\ndel bureau\ngc.collect()","e835d1a4":"apptest.to_csv(\"testapp.csv\",index=False)","4f0cf331":"X = apptrain.drop(columns=['SK_ID_CURR'])\nY = apptest.drop(columns=['SK_ID_CURR'])\ny=X['TARGET']\nX=X.drop(columns =['TARGET'])","df2ba099":"for i in X:\n    if (len(X[i].unique())>3):\n        plt.figure(figsize=(10,10))\n        sns.kdeplot(X.loc[apptrain['TARGET'] == 0, i], label = 'target = 0',bw=0.1)\n        sns.kdeplot(X.loc[apptrain['TARGET'] == 1, i], label = 'target = 1',bw=0.1)\n        plt.legend()\n        plt.show()","cef438c8":"ratio=['AMT_INCOME_TOTAL',\n 'AMT_CREDIT',\n 'AMT_ANNUITY_1',\n 'DAYS_BIRTH',\n 'DAYS_EMPLOYED',\n 'AMT_ANNUITY_2',\n 'AMT_APPLICATION',\n 'AMT_DOWN_PAYMENT',\n 'RATE_DOWN_PAYMENT',\n 'DAYS_CREDIT',\n 'AMT_CREDIT_SUM',\n 'AMT_CREDIT_SUM_DEBT']","c5fb3a02":"for i in ratio:\n    for j in ratio:\n        if(i!=j):\n            X[i+'by'+j]=X[i]\/X[j]\n            Y[i+'by'+j]=Y[i]\/Y[j]","5537e36b":"X = X.fillna(0)\nY = Y.fillna(0)","dc57a2bb":"col = list(X.columns[X.max()>1e10])\ncol1= list(X.columns[X.min()<-1e10])","02de478e":"for i in col1:\n    if(i not in col):\n        col.append(i)\ncol.append('AMT_CREDIT_SUM_DEBTbyDAYS_CREDIT')","e0dace57":"X.drop(columns =col,axis=1,inplace = True)\nY.drop(columns =col,axis=1,inplace = True)","d34dff91":"def getrange(x):\n    q1 = x.quantile(q=0.25)\n    q3 = x.quantile(q=0.75)\n    iqr = q3 - q1\n    outlier_range = iqr*1.5\n    lower_bound = q1 - outlier_range\n    upper_bound = q3 + outlier_range\n    return lower_bound,upper_bound","ce987089":"pd.set_option('mode.chained_assignment', None)\nfor i in X:\n    print(i)\n    if(X[i].max()>2 and not X[i].median()==0):\n        minv,maxv=getrange(X[i])\n        X[i].loc[X[i].astype('float64') > maxv]  = maxv\n        X[i].loc[X[i].astype('float64') < minv]  = minv\n        Y[i].loc[Y[i].astype('float64') > maxv]  = maxv\n        Y[i].loc[Y[i].astype('float64') < minv]  = minv","5ab3fa1b":"X['DAYS_BIRTH']=X['DAYS_BIRTH']\/-365\nY['DAYS_BIRTH']=Y['DAYS_BIRTH']\/-365","557f4d5e":"from sklearn.preprocessing import StandardScaler\nfor i in X:\n    if X[i].max()>3 or X[i].min()<-3:\n        print(i)\n        scaler = StandardScaler()\n        X[[i]]= scaler.fit_transform(X[[i]])\n        Y[[i]]= scaler.transform(Y[[i]])","114a300e":"upper = X.corr().abs().where(np.triu(np.ones(X.corr().shape), k=1).astype(np.bool))\nto_drop_X = [column for column in upper.columns if any(upper[column] >= 0.90)]\nX.drop(columns =to_drop_X,axis=1,inplace = True)\nY.drop(columns =to_drop_X,axis=1,inplace = True)","6dde5e82":"col=['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3','DAYS_BIRTH']\nfor i in col:\n    X[i+'_squared']=X[i]**2\n    Y[i+'_squared']=Y[i]**2\n    X[i+'_cubed']=X[i]**3\n    Y[i+'_cubed']=Y[i]**3","80063240":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'EXT_SOURCE_1_squared'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'EXT_SOURCE_1_squared'], label = 'target = 1',bw=0.1)\nplt.legend()","6044b524":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'EXT_SOURCE_1_cubed'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'EXT_SOURCE_1_cubed'], label = 'target = 1',bw=0.1)\nplt.legend()","459aeeff":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'EXT_SOURCE_2_squared'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'EXT_SOURCE_2_squared'], label = 'target = 1',bw=0.1)\nplt.legend()","e68ec823":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'EXT_SOURCE_2_cubed'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'EXT_SOURCE_2_cubed'], label = 'target = 1',bw=0.1)\nplt.legend()","87a1d9fe":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'EXT_SOURCE_3_squared'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'EXT_SOURCE_3_squared'], label = 'target = 1',bw=0.1)\nplt.legend()","b9513d23":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'EXT_SOURCE_3_cubed'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'EXT_SOURCE_3_cubed'], label = 'target = 1',bw=0.1)\nplt.legend()","41de86d7":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'DAYS_BIRTH_squared'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'DAYS_BIRTH_squared'], label = 'target = 1',bw=0.1)\nplt.legend()","3d3d37c8":"sns.kdeplot(X.loc[apptrain['TARGET'] == 0, 'DAYS_BIRTH_cubed'], label = 'target = 0',bw=0.1)\nsns.kdeplot(X.loc[apptrain['TARGET'] == 1, 'DAYS_BIRTH_cubed'], label = 'target = 1',bw=0.1)\nplt.legend()","4d26699b":"X['TARGET']=y\nc=X.corr()['TARGET']","c297925a":"todrop=[]\nfor i in X:\n    if(not (c[i]>0.005 or c[i]<-0.005)):\n        todrop.append(i)\nX.drop(columns =todrop,axis=1,inplace = True)\nY.drop(columns =todrop,axis=1,inplace = True)","5e1e0cbd":"from sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier","1599c585":"trainX = X.drop(columns=['TARGET'],axis=1)\ntrainY = y\ntest_table = Y","a934bce9":"import re\ntrainX = trainX.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\ntest_table = test_table.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))","f9343da7":"# USED TO FIND BEST PARAMETERS\n# from optuna.integration.lightgbm import LightGBMTunerCV\n# from lightgbm import Dataset\n# train_file = Dataset(trainX, label=trainY,free_raw_data=False)\n# params = {\n#         \"objective\": \"binary\",\n#         \"metric\": \"binary_logloss\",\n#         \"verbosity\": -1,\n#         \"boosting_type\": \"gbdt\",\n#     }\n\n# tuner = LightGBMTunerCV(\n#         params, train_file, early_stopping_rounds=100, folds=KFold(n_splits=5)\n#     )\n\n# tuner.run()\n    \n# print(\"Best score:\", tuner.best_score)\n# best_params = tuner.best_params\n# print(\"Best params:\", best_params)\n# print(\"  Params: \")\n# for key, value in best_params.items():\n#     print(\"    {}: {}\".format(key, value))","6c5ea50f":"model_svm = svm.SVC()\nmodel_svm_linear = svm.LinearSVC()\nmodel_svm_poly = svm.SVC(kernel='poly',probability=True)\nmodel_svm_sigmoid = svm.SVC(kernel='sigmoid',probability=True)\nmodel_svm_nusvc = svm.NuSVC(probability=True)\nmodel_LR = LogisticRegression(max_iter=500,class_weight='balanced',solver='liblinear')\nmodel_random_forest = RandomForestClassifier(random_state=0)\nmodel_naive_bayes = GaussianNB()\nmodel_lgbm = LGBMClassifier(verbosity = -1,\n         feature_pre_filter = False,\n         lambda_l1= 0.0007099817067951657,\n         lambda_l2= 2.2721620492879536e-07,\n         num_leaves= 64,\n         feature_fraction= 0.4,\n         bagging_fraction= 0.9938087600649544,\n         bagging_freq= 1,\n         min_child_samples= 20,\n         learning_rate= 0.01,\n         n_estimators= 1000,\n         class_weight= 'balanced')\nmodel_adaboost = AdaBoostClassifier(random_state=0,n_estimators=200)\nmodel_catboost = CatBoostClassifier(thread_count=-1,random_state=0,border_count=5000,depth=4)\nmodel_gb = GradientBoostingClassifier(random_state=0,learning_rate= 0.01,n_estimators= 1000,max_depth=6)\nmodel_xgb = XGBClassifier(n_estimators= 1000,learning_rate= 0.1,scale_pos_weight=2)","001435c1":"level0 = []\nlevel0.append(('LR',model_LR))\nlevel0.append(('lgbm',model_lgbm))\nlevel0.append(('rf',model_random_forest))\nlevel0.append(('catboost',model_catboost))\nlevel0.append(('xgb',model_xgb))\ncv = StratifiedKFold(n_splits=5)\nmodel_stack_final = StackingClassifier(estimators=level0,final_estimator=model_LR,cv=cv,stack_method='predict_proba',n_jobs=-1,verbose=3)","2bd077ef":"cv = StratifiedKFold(n_splits=5)\nscores = cross_val_score(model_catboost,trainX ,trainY,scoring='roc_auc', cv=cv, n_jobs=-1,verbose=11)\nprint('Mean ROC AUC: %.5f' % np.mean(scores))","b2f1b919":"sample_trainX,sample_testX,sample_trainY,sample_testY = train_test_split(trainX,trainY,train_size=0.8,stratify=trainY)","75ee134d":"def fit_calb_sample(model,x,y,z):\n    isotonic_prob = CalibratedClassifierCV(\n    base_estimator=model,\n    method='isotonic', cv=cv)\n    isotonic_prob.fit(x,y)\n    y_pred = isotonic_prob.predict_proba(z)\n    y_final = [i[1] for i in y_pred]\n    y_final = pd.DataFrame(y_final)\n    return y_final","e3525a43":"def fit_sample(model,x,y,z):\n    model.fit(x,y)\n    y_pred = model.predict_proba(z)\n    y_final = [i[1] for i in y_pred]\n    y_final = pd.DataFrame(y_final)\n    return y_final","d15cec45":"# y_sample_catboost = fit_calb_sample(model_catboost,sample_trainX,sample_trainY,sample_testX)","6abb1106":"# y_sample_lgbm = fit_calb_sample(model_lgbm,sample_trainX,sample_trainY,sample_testX)","c35475e6":"# y_sample_LR = fit_calb_sample(model_LR,sample_trainX,sample_trainY,sample_testX)","21d1f064":"# y_sample_gb = fit_sample(model_gb,sample_trainX,sample_trainY,sample_testX)","880f3ab1":"# y_sample_xgb = fit_calb_sample(model_xgb,sample_trainX,sample_trainY,sample_testX)","dd6f053c":"# y_sample_rf = fit_sample(model_random_forest,sample_trainX,sample_trainY,sample_testX)","ca594f73":"# y_ensemble = 0.4*y_sample_catboost + 0.1*y_sample_lgbm + 0.4*y_sample_xgb + 0.1*y_sample_rf","5f429f35":"# roc_auc_score(sample_testY,y_ensemble)","1d7377f9":"model_svm = svm.SVC()\nmodel_svm_linear = svm.LinearSVC()\nmodel_svm_poly = svm.SVC(kernel='poly',probability=True)\nmodel_svm_sigmoid = svm.SVC(kernel='sigmoid',probability=True)\nmodel_svm_nusvc = svm.NuSVC(probability=True)\nmodel_LR = LogisticRegression(max_iter=500,class_weight='balanced',solver='liblinear')\nmodel_random_forest = RandomForestClassifier(random_state=0)\nmodel_naive_bayes = GaussianNB()\nmodel_lgbm = LGBMClassifier(verbosity = -1,\n         feature_pre_filter = False,\n         lambda_l1= 0.0007099817067951657,\n         lambda_l2= 2.2721620492879536e-07,\n         num_leaves= 64,\n         feature_fraction= 0.4,\n         bagging_fraction= 0.9938087600649544,\n         bagging_freq= 1,\n         min_child_samples= 20,\n         learning_rate= 0.01,\n         n_estimators= 1000,\n         class_weight= 'balanced')\nmodel_adaboost = AdaBoostClassifier(random_state=0,n_estimators=200)\nmodel_catboost = CatBoostClassifier(thread_count=-1,random_state=0,border_count=5000,depth=4)\nmodel_gb = GradientBoostingClassifier(random_state=0,learning_rate= 0.01,n_estimators= 1000,max_depth=6)\nmodel_xgb = XGBClassifier(n_estimators= 1000,learning_rate= 0.1,scale_pos_weight=2)","85b14d70":"y_pred_cat = fit_calb_sample(model_catboost,trainX,trainY,test_table)\ny_pred_cat.to_csv('Catboost_calibrated.csv',index=False)","57fc9e8b":"y_pred_lgbm = fit_calb_sample(model_lgbm,trainX,trainY,test_table)\ny_pred_lgbm.to_csv('LGBM_calibrated.csv',index=False)","c4edd320":"y_pred_xgb = fit_calb_sample(model_xgb,trainX,trainY,test_table)\ny_pred_xgb.to_csv('XGB_calibrated.csv',index=False)","15087d27":"y_pred_rf = fit_calb_sample(model_random_forest,trainX,trainY,test_table)\ny_pred_rf.to_csv('RF_calibrated.csv',index=False)","dc80dcee":"y_final = 0.4*y_pred_cat + 0.1*y_pred_lgbm + 0.4*y_pred_xgb + 0.1*y_pred_rf","a6dbb7f3":"apptest['TARGET']=y_final\napptest[['SK_ID_CURR', 'TARGET']].to_csv('testing_ensemble_cat_lgbm_xgb_rf_4141_calibrated_4.csv',index=False)","db7814a5":"Logistic Regression : 0.76094  \nRandom Forest : 0.75026      \nLightgbm : 0.77585  \nAdaboost : 0.76586  \ncatboost : 0.77701  \nXG Boost : 0.77570  \nGradient Boost : 0.77298  ","f941b300":"##### Removing columns with very less correlation with TARGET","7376d645":"Below we have defined two functions which will be using to train the models and predict the values.\n* fit sample will simply train and predict\n* fit_calb_sample will use CalibratedClassifierCV module with cv=5 and isotonic scaling","15943c16":"##### Creating new features by taking ratio of different combination of these features ","5cc06944":"# MODELS","e5442448":"# installment part\n","05f33b52":"##### Removing highly correlated columns ","d4059cea":"## Cross-Validation","ad86ab6b":"# Previous application","91b197e8":"## Merging bureau and bureau_bal","8c775183":"##### Some more features","c8dd3ef7":"## Standardization","783ad9e5":"## Merging apptrain and prev_app","e4aae8c4":"We have defined a function to fill the nan values(RemoveNan).\n*  It takes dataframe and a dictonary containing all the values which are to be filled for each column in the dataframe.","f385dc4f":"## Merging cash_bal and prev_app","10bac2a5":"## OUTLIERS","096823fb":"# bureau part","50f25dba":"## Ensemble check","11f4cbcc":"catboost : 0.7748506305010502    \nLightgbm : 0.7725437722585644  \nLogistic Regression : 0.7593572296015061  \nXGB : 0.7616103340646833  \nRandom Forest : 0.7191983841223095  \n### Without calibration\ncat:lgbm:LR = 5:5:0 = 0.7748948144469693  \ncat:lgbm:LR = 8:2:0 = 0.7759271738530747  \ncat:lgbm:LR:xgb = 5:1:0:4 = 0.7759566717531883  \ncat:lgbm:LR:xgb = 5:2:0:3 = 0.7764404389924968  \ncat:lgbm:LR:xgb = 6:1:0:3 = 0.7766554876586641  \ncat:lgbm:LR:xgb = 7:1:0:2 = 0.7769492756726465  \ncat:lgbm:LR:xgb:rf = 6:1:0:2:1 = 0.7772929090151405  \n### With calibration\ncat:lgbm:LR:xgb:rf = 5:1:0:3:1 = 0.7789411765238718     \ncat:lgbm:LR:xgb:rf = 4:1:0:4:1 = 0.779104207568059    ","8450bd18":"Here we a taking a sample test to check different combinations for ensemble. For saving the runtime we have commented it for now. ","bf6b7f24":"# Credit card balance part","f0cac8eb":"# Cash_bal part","18ad9293":"## Merging apptrain and bureau","0f6ec6f4":"# Application test nan values","80e8e605":"# Application train values","01f51a86":"## Merging cred_bal and prev_app","a2b87670":"# Final Submission","ce76f2f3":"# Final Data Cleaning","d9463335":"# bureau_bal part","0e42dec7":"We have defined a function to merge two dataframes(merge).\n* It takes two dataframes and a method by which we want to merge them.","0124c803":"## Merging apptest and bureau","b059459d":"We have a defined a function to plot a graph for a feature.\n* It takes dataframe and feature name as an input\n* It plots a distplot with kde for a numerical feature\n* It plot catplot for a categorical feature.\n* At the end of the plot it diplays the number of unique values and the value counts of the starting 5 unique values of that feature","3a081023":"## Merging apptest and prev_app","3ecd42af":"## Merging installment and prev_app"}}