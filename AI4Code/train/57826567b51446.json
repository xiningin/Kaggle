{"cell_type":{"d91fc36f":"code","b528a618":"code","be6e3156":"code","2fac904f":"code","8fff8457":"code","68d2e622":"code","bcd9ef3b":"code","70e6077d":"code","bf0d0783":"code","62eed7ee":"code","bf89da42":"code","0bc629a1":"code","3a6df269":"code","8f9420f8":"code","940cb77f":"code","8e4a6a96":"code","566556a2":"code","850b89f8":"code","0afa9d9e":"code","8952fad8":"code","198fd2c4":"code","6e9e689f":"code","4cd75516":"code","a5644a8d":"code","c39e40e9":"code","7fb5e6f4":"code","1140cd55":"code","1537b866":"code","051e508a":"code","28d6d161":"code","56fdd5c7":"code","6301f1d5":"code","15b1a335":"code","58f3152e":"code","0abee953":"code","183d70ad":"code","83cfc83b":"code","a5db43f9":"code","0d131812":"code","a931dc67":"code","cd5b9565":"code","32fb0c82":"code","386f2d2e":"code","ba6fc2fb":"code","7d14e6d1":"code","6485c239":"code","b411ce0c":"code","7a7f9f6b":"code","0ee70132":"code","6cb62407":"code","bb52e4b7":"code","238c11ae":"code","f769a658":"code","4fa1b196":"code","ff4cd1d9":"code","5b8b678e":"code","873dbc15":"markdown","d1a134bf":"markdown","277db853":"markdown","66bfc189":"markdown","23e138f8":"markdown","d5cd8893":"markdown","5e73705e":"markdown","a93240da":"markdown","e31b3db0":"markdown","8d97af07":"markdown","8c70219f":"markdown","f44233e1":"markdown","7d0c22ba":"markdown","6b5b498f":"markdown","8c011220":"markdown","ee9ece23":"markdown","4b39536f":"markdown","07a68d00":"markdown","250e7e21":"markdown","725a50d8":"markdown","e21be525":"markdown","877d6607":"markdown","ba2dac97":"markdown","2c8108a1":"markdown","963936d2":"markdown","9dad8829":"markdown","4f391aeb":"markdown","711dd703":"markdown"},"source":{"d91fc36f":"# packages\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","b528a618":"# read data\ndf_2018 = pd.read_csv('..\/input\/2020-it-salary-survey-for-eu-region\/IT Salary Survey EU 2018.csv')\ndf_2019 = pd.read_csv('..\/input\/2020-it-salary-survey-for-eu-region\/T Salary Survey EU 2019.csv')\ndf_2020 = pd.read_csv('..\/input\/2020-it-salary-survey-for-eu-region\/IT Salary Survey EU  2020.csv')","be6e3156":"# preview\ndf_2020.head(5)","2fac904f":"# show all columns\nprint(df_2020.columns.tolist())","8fff8457":"# rename columns\ndf_2020.rename(columns = {'Position ':'Position'}, inplace = True)","68d2e622":"# features we ignore in the following\nfeatures_not_used = ['Timestamp',\n                     'Annual brutto salary (without bonus and stocks) one year ago. Only answer if staying in the same country',\n                     'Annual bonus+stocks one year ago. Only answer if staying in same country']","bcd9ef3b":"# categorical features\nfeatures_cat = ['Gender', 'City', 'Position',\n       'Total years of experience', 'Years of experience in Germany',\n       'Seniority level', 'Your main technology \/ programming language',\n       'Other technologies\/programming languages you use often',\n       'Number of vacation days',\n       'Employment status', '\u0421ontract duration',\n       'Main language at work', 'Company size', 'Company type',\n       'Have you lost your job due to the coronavirus outbreak?',\n       'Have you been forced to have a shorter working week (Kurzarbeit)? If yes, how many hours per week',\n       'Have you received additional monetary support from your employer due to Work From Home? If yes, how much in 2020 in EUR']","70e6077d":"# look at an example of a messy \"numerical\" columns\ndf_2020['Number of vacation days'].value_counts()","bf0d0783":"# numeric features\nfeatures_num = ['Age',\n                'Yearly brutto salary (without bonus and stocks) in EUR',\n                'Yearly bonus + stocks in EUR',]","62eed7ee":"# check if we have captured all features\nlen(features_cat + features_num + features_not_used) - len(df_2020.columns)","bf89da42":"# fill missing values\n\n# >>> categorical features\nmissing_text = '_MISSING_'\ndf_2020[features_cat] = df_2020[features_cat].fillna(missing_text)\n\n# >>> numerical features\nmissing_num = -1\ndf_2020[features_num] = df_2020[features_num].fillna(missing_num)","0bc629a1":"# check for outliers\nplt.boxplot(np.log10(df_2020['Yearly brutto salary (without bonus and stocks) in EUR']))\nplt.title('Yearly brutto salary (without bonus and stocks) in EUR')\nplt.ylabel('log10(Salary)')\nplt.grid()\nplt.show()\n\n# remove very high values\ncut_point = 500000\ndf_2020 = df_2020[df_2020['Yearly brutto salary (without bonus and stocks) in EUR'] <= cut_point]\nplt.boxplot(df_2020['Yearly brutto salary (without bonus and stocks) in EUR'])\nplt.title('After removing outliers')\nplt.ylabel('Salary')\nplt.grid()\nplt.show()","3a6df269":"# string cleaning (remove redundant spaces and convert to upper case)\n# => reduce risk of \"hidden\" duplicates\ndef clean_string(x):\n    return x.strip().upper()\n\nfeatures_for_string_cleaning = ['City', 'Position', 'Employment status',\n                                'Your main technology \/ programming language',\n                                'Other technologies\/programming languages you use often',\n                                'Seniority level',\n                                'Have you received additional monetary support from your employer due to Work From Home? If yes, how much in 2020 in EUR',\n                                'Number of vacation days']\n\nfor f in features_for_string_cleaning:\n    df_2020[f] = df_2020[f].apply(clean_string)","8f9420f8":"# reduce number of levels: \"Position\"\ncurrent_feature = 'Position'\nprint('ORIGINAL:', current_feature)\ntemp_count = df_2020[current_feature].value_counts()\nprint(temp_count)\n\n# reduce to levels that occur at least freq_min times\nfreq_min = 3\nkeep_levels = list(temp_count[temp_count.values>=freq_min].index)\ndf_2020[current_feature] = df_2020[current_feature].where(df_2020[current_feature].isin(keep_levels), '_OTHER_')\nprint('\\nREDUCED TO:')\nprint(df_2020[current_feature].value_counts())","940cb77f":"# reduce number of levels: \"Seniority level\"\ncurrent_feature = 'Seniority level'\nprint('ORIGINAL:', current_feature)\ntemp_count = df_2020[current_feature].value_counts()\nprint(temp_count)\n\n# reduce to levels that occur at least freq_min times\nfreq_min = 3\nkeep_levels = list(temp_count[temp_count.values>=freq_min].index)\ndf_2020[current_feature] = df_2020[current_feature].where(df_2020[current_feature].isin(keep_levels), '_OTHER_')\nprint('\\nREDUCED TO:')\nprint(df_2020[current_feature].value_counts())","8e4a6a96":"# reduce number of levels: \"Main language at work\"\ncurrent_feature = 'Main language at work'\n\n# manual adjustment first\ndf_2020[current_feature].loc[df_2020[current_feature]=='\u0420\u0443\u0441\u0441\u043a\u0438\u0439'] = 'Russian'\n\nprint('ORIGINAL:', current_feature)\ntemp_count = df_2020[current_feature].value_counts()\nprint(temp_count)\n\n# reduce to levels that occur at least freq_min times\nfreq_min = 3\nkeep_levels = list(temp_count[temp_count.values>=freq_min].index)\ndf_2020[current_feature] = df_2020[current_feature].where(df_2020[current_feature].isin(keep_levels), '_OTHER_')\nprint('\\nREDUCED TO:')\nprint(df_2020[current_feature].value_counts())","566556a2":"# reduce number of levels: \"Employment status\"\ncurrent_feature = 'Employment status'\nprint('ORIGINAL:', current_feature)\ntemp_count = df_2020[current_feature].value_counts()\nprint(temp_count)\n\n# reduce to levels that occur at least freq_min times\nfreq_min = 2\nkeep_levels = list(temp_count[temp_count.values>=freq_min].index)\ndf_2020[current_feature] = df_2020[current_feature].where(df_2020[current_feature].isin(keep_levels), '_OTHER_')\nprint('\\nREDUCED TO:')\nprint(df_2020[current_feature].value_counts())","850b89f8":"# reduce number of levels: \"Company type\"\ncurrent_feature = 'Company type'\nprint('ORIGINAL:', current_feature)\ntemp_count = df_2020[current_feature].value_counts()\nprint(temp_count)\n\n# reduce to levels that occur at least freq_min times\nfreq_min = 3\nkeep_levels = list(temp_count[temp_count.values>=freq_min].index)\ndf_2020[current_feature] = df_2020[current_feature].where(df_2020[current_feature].isin(keep_levels), '_OTHER_')\nprint('\\nREDUCED TO:')\nprint(df_2020[current_feature].value_counts())","0afa9d9e":"# reduce number of levels: \"Have you received additional monetary support...\"\ncurrent_feature = 'Have you received additional monetary support from your employer due to Work From Home? If yes, how much in 2020 in EUR'\nprint('ORIGINAL:', current_feature)\ntemp_count = df_2020[current_feature].value_counts()\nprint(temp_count)\n\n# reduce to levels that occur at least freq_min times\nfreq_min = 2\nkeep_levels = list(temp_count[temp_count.values>=freq_min].index)\ndf_2020[current_feature] = df_2020[current_feature].where(df_2020[current_feature].isin(keep_levels), '_OTHER_')\nprint('\\nREDUCED TO:')\nprint(df_2020[current_feature].value_counts())","8952fad8":"# reduce number of levels: \"Have you lost your job due to the coronavirus outbreak?\"\ncurrent_feature = 'Have you lost your job due to the coronavirus outbreak?'\nprint('ORIGINAL:', current_feature)\ntemp_count = df_2020[current_feature].value_counts()\nprint(temp_count)\n\n# reduce to levels that occur at least freq_min times\nfreq_min = 2\nkeep_levels = list(temp_count[temp_count.values>=freq_min].index)\ndf_2020[current_feature] = df_2020[current_feature].where(df_2020[current_feature].isin(keep_levels), '_OTHER_')\nprint('\\nREDUCED TO:')\nprint(df_2020[current_feature].value_counts())","198fd2c4":"current_feature = 'City'\n# show all levels\nprint(df_2020[current_feature].value_counts().index.tolist())","6e9e689f":"# replace levels\ndf_2020[current_feature].loc[df_2020[current_feature]=='B\u00d6LINGEN'] = 'BOEBLINGEN'\ndf_2020[current_feature].loc[df_2020[current_feature]=='DUSSELDORF'] = 'DUESSELDORF'\ndf_2020[current_feature].loc[df_2020[current_feature]=='D\u00dcSSELDORF'] = 'DUESSELDORF'\ndf_2020[current_feature].loc[df_2020[current_feature]=='DUSSELDURF'] = 'DUESSELDORF'\ndf_2020[current_feature].loc[df_2020[current_feature]=='N\u00dcRNBERG'] = 'NUREMBERG'\ndf_2020[current_feature].loc[df_2020[current_feature]=='WARSAW, POLAND'] = 'WARSAW'\ndf_2020[current_feature].loc[df_2020[current_feature]=='Z\u00dcRICH'] = 'ZURICH'","4cd75516":"current_feature = 'Number of vacation days'\n# show all levels \nprint(df_2020[current_feature].value_counts().index.tolist())","a5644a8d":"# replace levels\ndf_2020[current_feature].loc[df_2020[current_feature]=='30 IN CONTRACT (BUT THEORETICALLY UNLIMITED)'] = 'UNLIMITED'\ndf_2020[current_feature].loc[df_2020[current_feature]=='23+'] = '23'\ndf_2020[current_feature].loc[df_2020[current_feature]=='(NO IDEA)'] = '_MISSING_'\ndf_2020[current_feature].loc[df_2020[current_feature]=='24 LABOUR DAYS'] = '24'\ndf_2020[current_feature].loc[df_2020[current_feature]=='~25'] = '25'\ndf_2020[current_feature].loc[df_2020[current_feature]=='365'] = 'UNLIMITED'","c39e40e9":"current_feature = 'Total years of experience'\n# show all levels\nprint(df_2020[current_feature].value_counts().index.tolist())","7fb5e6f4":"# replace levels\ndf_2020[current_feature].loc[df_2020[current_feature]=='6 (not as a data scientist, but as a lab scientist)'] = '6'\ndf_2020[current_feature].loc[df_2020[current_feature]=='less than year'] = '1'\ndf_2020[current_feature].loc[df_2020[current_feature]=='15, thereof 8 as CTO'] = '15'\ndf_2020[current_feature].loc[df_2020[current_feature]=='1 (as QA Engineer) \/ 11 in total'] = '11'\ndf_2020[current_feature].loc[df_2020[current_feature]=='383'] = '_MISSING_'\ndf_2020[current_feature].loc[df_2020[current_feature]=='1,5'] = '1.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='2,5'] = '2.5'","1140cd55":"current_feature = 'Years of experience in Germany'\n# show all levels\nprint(df_2020[current_feature].value_counts().index.tolist())","1537b866":"# replace levels\ndf_2020[current_feature].loc[df_2020[current_feature]=='0,3'] = '0.3'\ndf_2020[current_feature].loc[df_2020[current_feature]=='0,5'] = '0.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='1,5'] = '1.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='1,7'] = '1.7'\ndf_2020[current_feature].loc[df_2020[current_feature]=='2,5'] = '2.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='3,5'] = '3.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='4,5'] = '4.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='<1'] = '0.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='< 1'] = '0.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='3 months'] = '0.25'\ndf_2020[current_feature].loc[df_2020[current_feature]=='4 month'] = '0.33'\ndf_2020[current_feature].loc[df_2020[current_feature]=='4 (in Switzerland), 0 (in Germany)'] = '0'\ndf_2020[current_feature].loc[df_2020[current_feature]=='less than year'] = '0.5'\ndf_2020[current_feature].loc[df_2020[current_feature]=='\u2070'] = '_MISSING_'\ndf_2020[current_feature].loc[df_2020[current_feature]=='-'] = '_MISSING_'\ndf_2020[current_feature].loc[df_2020[current_feature]=='6 (not as a data scientist, but as a lab scientist)'] = '6'\ndf_2020[current_feature].loc[df_2020[current_feature]=='3 (in Poland)'] = '0'","051e508a":"current_feature = 'Yearly bonus + stocks in EUR'\n# show all levels\nprint(df_2020[current_feature].value_counts().index.tolist())","28d6d161":"# replace levels\ndf_2020[current_feature].loc[df_2020[current_feature]=='bvg only'] = -1\ndf_2020[current_feature].loc[df_2020[current_feature]=='-'] = -1\ndf_2020[current_feature].loc[df_2020[current_feature]=='-'] = -1\ndf_2020[current_feature].loc[df_2020[current_feature]=='15000+-'] = 15000\ndf_2020[current_feature].loc[df_2020[current_feature]=='Not sure'] = -1\ndf_2020[current_feature].loc[df_2020[current_feature]=='Na'] = -1\ndf_2020[current_feature].loc[df_2020[current_feature]=='depends'] = -1\ndf_2020[current_feature].loc[df_2020[current_feature]=='1150000'] = -1 # seems somewhat high?\n\n# and convert to numeric\ndf_2020[current_feature] = df_2020[current_feature].astype(float)\n\n# for the sake of simplicity we REPLACE THE MISSINGS\/UNKNOWS with 0!!!\ndf_2020[current_feature].loc[df_2020[current_feature]==-1] = 0","56fdd5c7":"df_2020['Total Income (Salary+Bonus)'] = df_2020['Yearly brutto salary (without bonus and stocks) in EUR'] + df_2020['Yearly bonus + stocks in EUR']","6301f1d5":"# update list of numerical features correspondingly!\nfeatures_num.append('Total Income (Salary+Bonus)')","15b1a335":"# add also binned version of age to data frame\ndf_2020['AgeGroup'] = pd.cut(df_2020.Age, bins=[-2,0,20,25,30,35,40,45,50,60,70])\ndf_2020.AgeGroup.value_counts().sort_index().plot(kind='bar')\nplt.title('Age Groups')\nplt.grid()\nplt.show()","58f3152e":"# save prepared data to file\ndf_2020.to_csv('df_2020_cleaned.csv')","0abee953":"# change plot style\nplt.style.use('dark_background')","183d70ad":"# plot distributions of categorical features\nfor f in features_cat:\n    plt.figure(figsize=(14,5))\n    val_c = df_2020[f].value_counts()\n    if len(val_c) <= 20:\n        val_c.plot(kind='bar', color='lightgreen')\n        plt.title(f)\n    else: # if more than 20 levels show only the most frequent 20\n        val_c[0:20].plot(kind='bar', color='lightgreen')\n        plt.title(f + ' - Top 20 only')\n        \n    plt.grid()\n    plt.show()","83cfc83b":"# plot distributions of numerical features\nfor f in features_num:\n    plt.figure(figsize=(14,5))\n    df_2020[f].plot(kind='hist', bins = 50, color='lightgreen')\n    plt.title(f)\n    plt.grid()\n    plt.show()","a5db43f9":"# salary stats\ndf_2020['Yearly brutto salary (without bonus and stocks) in EUR'].describe()","0d131812":"# total income stats\ndf_2020['Total Income (Salary+Bonus)'].describe()","a931dc67":"# change plot style again\nplt.style.use('default')","cd5b9565":"# violinplots show dependency of salary on the following features:\nmy_features = ['Gender', 'Seniority level', 'AgeGroup', 'Company size', 'Company type']\n\nfor f in my_features:\n    plt.style.use('seaborn-pastel')\n    plt.figure(figsize=(12,5))\n    sns.violinplot(data=df_2020, x=f, y='Yearly brutto salary (without bonus and stocks) in EUR')\n    plt.grid()\n    plt.title('Salary by ' + f)\n    plt.show()","32fb0c82":"# alternative visualization: scatterplot salary vs age\nsns.jointplot(x=df_2020['Age'], y=df_2020['Yearly brutto salary (without bonus and stocks) in EUR'],\n              height=5, color='green',\n              joint_kws={'alpha' : 0.3})\nplt.show()","386f2d2e":"# alternative visualization: total income vs age\nsns.jointplot(x=df_2020['Age'], y=df_2020['Total Income (Salary+Bonus)'],\n              height=5, color='green',\n              joint_kws={'alpha' : 0.3})\nplt.show()","ba6fc2fb":"# age stats (excluding missings)\nage4stats = df_2020['Age'][df_2020['Age']>0] # filter \"NAs\" first\nage4stats.describe()","7d14e6d1":"# create wordcloud fpr main tech\/progamming language\nf = 'Your main technology \/ programming language'\ntext_select = df_2020[f][df_2020[f] != '_MISSING_']\ntext = \" \".join(txt for txt in text_select)\n\nstopwords = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=100, max_words=500,\n                      width = 800, height = 600,\n                      background_color='black').generate(text)\n\nplt.figure(figsize=(11,7))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","6485c239":"# create wordcloud for other tech\/PLs\nf = 'Other technologies\/programming languages you use often'\ntext_select = df_2020[f][df_2020[f] != '_MISSING_']\ntext = \" \".join(txt for txt in text_select)\n\nstopwords = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=100, max_words=500,\n                      width = 800, height = 600,\n                      background_color='black').generate(text)\n\nplt.figure(figsize=(11,7))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","b411ce0c":"# select data scientists only\ndf_ds = df_2020[df_2020.Position=='DATA SCIENTIST'].copy()\ndf_ds.head()","7a7f9f6b":"# dimensions\ndf_ds.shape","0ee70132":"# DS salary stats\ndf_ds['Yearly brutto salary (without bonus and stocks) in EUR'].describe()","6cb62407":"# DS total income stats\ndf_ds['Total Income (Salary+Bonus)'].describe()","bb52e4b7":"# DS age stats (excluding missings)\nage4stats_DS = df_ds['Age'][df_ds['Age']>0] # filter \"NAs\" first\nage4stats_DS.describe()","238c11ae":"# change plot style\nplt.style.use('dark_background')","f769a658":"# plot distributions of categorical features (exclude Position)\nfeatures_cat_x = features_cat.copy()\nfeatures_cat_x.remove('Position')\n\nfor f in features_cat_x:\n    plt.figure(figsize=(14,5))\n    val_c = df_ds[f].value_counts()\n    if len(val_c) <= 20:\n        val_c.plot(kind='bar', color='lightgreen')\n        plt.title('Position = Data Scientist - ' + f)\n    else: # if more than 20 levels show only the most frequent 20\n        val_c[0:20].plot(kind='bar', color='lightgreen')\n        plt.title('Position = Data Scientist - ' + f + ' - Top 20 only')\n        \n    plt.grid()\n    plt.show()","4fa1b196":"# plot distributions of numerical features\nfor f in features_num:\n    plt.figure(figsize=(14,5))\n    df_ds[f].plot(kind='hist', bins = 50, color='lightgreen')\n    plt.title('Position = Data Scientist - '+ f)\n    plt.grid()\n    plt.show()","ff4cd1d9":"# change plot style again\nplt.style.use('default')","5b8b678e":"# violinplots show dependency of salary on the following features:\nmy_features = ['Gender', 'Seniority level', 'AgeGroup', 'Company size', 'Company type']\n\nfor f in my_features:\n    plt.style.use('seaborn-pastel')\n    plt.figure(figsize=(12,5))\n    sns.violinplot(data=df_ds, x=f, y='Yearly brutto salary (without bonus and stocks) in EUR')\n    plt.grid()\n    plt.title('Position = Data Scientist - Salary by ' + f)\n    plt.show()","873dbc15":"# We will focus on 2020 data only in the following!","d1a134bf":"<a id='6'><\/a>\n# Data Scientist Drill-Down","277db853":"# Starter Notebook for Salary Survey\n\n## Table of Contents\n* [Data Cleansing](#1)\n* [Explore Categorical Features](#2)\n* [Explore Numerical Features](#3)\n* [Salary vs. Features](#4)\n* [Other Explorations](#5)\n* [Data Scientist - Drill Down](#6)\n\n#### Largest part of this notebook is about data cleaning, e. g. string entries in numerical columns, nonsense levels in categorical columns, hidden duplicates by misspellings or different texts meaning the same thing,... It might still not be perfect, however, so feel free to improve.","66bfc189":"#### Note that (-2,0] represents the missing values!","23e138f8":"### Age","d5cd8893":"### Fix city names","5e73705e":"### Fix experience(s)","a93240da":"<a id='2'><\/a>\n# Explore Categorical Features","e31b3db0":"### Other Evaluations","8d97af07":"### Add sum of salary + bonus as new feature \"Total Income...\":","8c70219f":"Yep, all good!","f44233e1":"### Missing values","7d0c22ba":"<a id='4'><\/a>\n# Salary vs. Features","6b5b498f":"<a id='3'><\/a>\n# Explore Numerical Features","8c011220":"### Fix bonus\/stocks","ee9ece23":"### Export cleansed data","4b39536f":"### We can see that average salary is a bit higher for Data Scientists whereas average age is a little bit lower than in the overall \"population\". However, we have to be careful as our sample of Data Scientists is rather small (110 observations).","07a68d00":"<a id='5'><\/a>\n# Other Explorations","250e7e21":"### Salary vs Features","725a50d8":"### Let's now specialize on the position of Data Scientist.","e21be525":"### Fix vacation days","877d6607":"#### A few features above seem rather numerical than categorical, e. g. Number of vacation days. However, there are several string entries in those columns. Here we would need a more in depth data cleaning:","ba2dac97":"<a id='1'><\/a>\n# Data cleansing","2c8108a1":"### Outliers","963936d2":"### Reduce number of levels","9dad8829":"### Programming Languages and Technologies","4f391aeb":"#### We'll fix that specific column later...","711dd703":"### Clean strings"}}