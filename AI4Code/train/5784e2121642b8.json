{"cell_type":{"8f21792d":"code","5a3f9a5e":"code","c44feef5":"code","29ebe9c7":"code","75f0a5d5":"code","1afe5be1":"code","b718f21d":"code","257df6d5":"code","65bc7978":"code","455cf503":"code","7c4ed65f":"code","c2e4e846":"code","66b271a3":"code","7b317088":"code","540da3ea":"code","552b0b80":"code","0619cb14":"code","fa804d78":"code","164dcc97":"code","ba97ef8e":"code","c96dd7a2":"code","68165ecb":"markdown","ea7bd3ad":"markdown","ebfa70a8":"markdown","25d0d427":"markdown","eb052d43":"markdown","e54db1b8":"markdown","5653a0c4":"markdown","18ffec13":"markdown","64fd23cb":"markdown","8a334490":"markdown"},"source":{"8f21792d":"import plotly\nplotly.__version__\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom plotly import tools\nimport plotly.figure_factory as ff\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport pandas as pd\nimport numpy as np\nimport random","5a3f9a5e":"data = pd.read_csv(\"..\/input\/data.csv\")\nnew_data = data.copy()\ndata.head(3)","c44feef5":"age = data.Age.value_counts(sort=False).reset_index()\nage.sort_values('index', inplace = True)\n\nx = age.iloc[:,0]\ny = age.iloc[:,1]\n\nx = x.tolist()\ny = y.tolist()","29ebe9c7":"trace1 = go.Bar(x = x, y = y, name = 'Age', opacity = 0.7, marker=dict(color='rgb(55, 83, 109)'))\ndata_a = [trace1]\n\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data_a, layout = layout)\niplot(fig)","75f0a5d5":"best_GKs=data[data.Position==\"GK\"]\n\nbest_GKs[\"Wage\"] = best_GKs[\"Wage\"].str.replace(\"\u20ac\",\"\")\nbest_GKs[\"Wage\"]=best_GKs[\"Wage\"].str.replace(\"K\",\"\")\nbest_GKs[\"Wage\"]=best_GKs[\"Wage\"].astype(int)\nbest_GKs[\"Wage\"]=best_GKs[\"Wage\"]*1000  \nnew_index=best_GKs[\"Wage\"].sort_values(ascending=False).index.values\nhighestPaidGk=best_GKs.reindex(new_index)","1afe5be1":"\ntop20_best_GKs=highestPaidGk.head(20)\ndata=[\n    {\n        \"y\": top20_best_GKs.Overall,\n        \"x\": top20_best_GKs.Name,\n        \n        \"mode\":\"markers\",\n        \"marker\":{\"color\":highestPaidGk.GKPositioning,\"size\" :highestPaidGk.GKReflexes,'showscale': True},\n        \"text\":top20_best_GKs.Club   \n    }]\n\niplot(data)","b718f21d":"new_data.sample(3)","257df6d5":"x = new_data[new_data[\"Name\"] == \"L. Messi\"]\ny = new_data[new_data[\"Name\"] == \"Cristiano Ronaldo\"]\nz = new_data[new_data[\"Name\"] == \"Neymar Jr\"]\n\ndata = [go.Scatterpolar(\n  r = [x['Crossing'].values[0],x['Finishing'].values[0],x['ShortPassing'].values[0],x['LongPassing'].values[0],x['Jumping'].values[0],x['Positioning'].values[0]],\n  theta = ['Crossing','Fininshing','ShortPassing','LongPassing','Jumping','Positioning'],\n  fill = 'toself', opacity = 0.8) ]\n\nlayout = go.Layout(polar = dict(radialaxis = dict(visible = True,range = [0, 100])),showlegend = False,\n                   title = \"Stats of {}\".format(x.Name.values[0]))\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename = \"Players Stat\")\n","65bc7978":"data = [ go.Scatterpolar(\n    r = [z['Crossing'].values[0],z['Finishing'].values[0],z['ShortPassing'].values[0],z['LongPassing'].values[0],z['Jumping'].values[0],z['Positioning'].values[0]],\n  theta = ['Crossing','Fininshing','ShortPassing','LongPassing','Jumping','Positioning'],\n  fill = 'toself',opacity = 0.8\n)]\n\nlayout = go.Layout(polar = dict(radialaxis = dict(visible = True,range = [0, 100])),showlegend = False,\n                   title = \"Stats of {}\".format(y.Name.values[0]))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename = \"Players Stat\")","455cf503":"data = [go.Scatterpolar(\n  r = [y['Crossing'].values[0],y['Finishing'].values[0],y['ShortPassing'].values[0],y['LongPassing'].values[0],y['Jumping'].values[0],y['Positioning'].values[0]],\n  theta = ['Crossing','Fininshing','ShortPassing','LongPassing','Jumping','Positioning'],\n  fill = 'toself',opacity = 0.8\n)]\n\nlayout = go.Layout(polar = dict(radialaxis = dict(visible = True,range = [0, 100])),showlegend = False,\n                   title = \"Stats of {}\".format(z.Name.values[0]))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename = \"Players Stat\")","7c4ed65f":"new_data.columns = [x.strip().replace(' ', '_') for x in new_data.columns]","c2e4e846":"inter = new_data.International_Reputation.value_counts()\nfoot = new_data.Weak_Foot.value_counts()\nskill = new_data.Skill_Moves.value_counts()\n\nx = inter.sum()\ny = foot.sum()\nz = skill.sum()\n\ninter = inter.div(x).mul(100).round(2)\nfoot = foot.div(y).mul(100).round(2)\nskill = skill.div(z).mul(100).round(2)","66b271a3":"inter = inter.tolist()\nfoot = foot.tolist()\nskill = skill.tolist()","7b317088":"fig = {\"data\": [{\"values\": inter,\n                  \"labels\": [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\",],\n                  \"domain\": {\"x\": [0, .31]},\n                  \"name\": \"International Reputation\",\n                  \"hoverinfo\":\"label+percent+name\",\n                  \"hole\": .4,\n                  \"type\": \"pie\" },\n                \n                {\"values\": foot,\n                  \"labels\": [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\",],\n                  \"textposition\":\"inside\",\n                  \"domain\": {\"x\": [.33, .65]},\n                  \"name\": \"Weak Foot\",\n                  \"hoverinfo\":\"label+percent+name\",\n                  \"hole\": .4,\n                  \"type\": \"pie\"},\n    \n                {\"values\": skill,\n                  \"labels\": [\"1.0\", \"2.0\",\"3.0\",\"4.0\",\"5.0\",],\n                  \"textposition\":\"inside\",\n                  \"domain\": {\"x\": [.67, 1]},\n                  \"name\": \"Skill Moves\",\n                  \"hoverinfo\":\"label+percent+name\",\n                  \"hole\": .4,\n                  \"type\": \"pie\"\n                }],\n       \n      \"layout\": {\"title\":\"Reputation, weak foot and skill moves\",\"annotations\": [\n                {\"font\": {\"size\": 15},\"showarrow\": False,\"text\": \"Reputation\",\"x\": 0.09,\"y\": 0.5},\n                {\"font\": {\"size\": 15},\"showarrow\": False,\"text\": \"Week Foot\",\"x\": 0.49,\"y\": 0.5},\n                {\"font\": {\"size\": 15},\"showarrow\": False,\"text\": \"Skill Moves\",\"x\": 0.83,\"y\": 0.5 }\n            ]}\n    }\n\niplot(fig, filename='donut')","540da3ea":"#typical Scatter graph\nnew_index=(new_data[\"Overall\"].sort_values(ascending=False)).index.values\nsortedData=new_data.reindex(new_index)\nbest_players=sortedData.head(100)\n\ntrace1=go.Scatter(\n                    x=best_players.Name,\n                    y=best_players.ShortPassing,\n                    mode=\"lines\",\n                    name=\"ShortPassing\",\n                    marker=dict(color=\"rgba(25,125,25,0.5)\"),\n                    text=best_players.Nationality)\ntrace2=go.Scatter(\n                    x=best_players.Name,\n                    y=best_players.Crossing,\n                    mode=\"lines\",\n                    name=\"Crossing\",\n                    marker=dict(color=\"rgba(109,99,109,0.5)\"),\n                    text=best_players.Nationality)\ndata=[trace1,trace2]\nlayout=dict(title=\"Comparision between Crossing and ShortPassing\" ,xaxis=dict(ticklen=5,zeroline=False) )\n\nfig=dict(data=data,layout=layout)\n\niplot(fig)","552b0b80":"player = new_data.Nationality.value_counts(sort=False).reset_index()\nplayer.sort_values('index', inplace = True)\nplayer.reset_index(inplace = True)\nplayer.drop(['level_0'],axis = 1,inplace = True)\nplayer.rename(columns={'index':'COUNTRY'}, inplace=True)","0619cb14":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')","fa804d78":"s1 = pd.merge(df, player, how='inner', on=['COUNTRY'])\ns1.head()","164dcc97":"data = [go.Choropleth(locations = s1['CODE'],z = s1['Nationality'],text = s1['COUNTRY'],\n        colorscale = [\n                        [0, \"rgb(5, 10, 172)\"],\n                        [0.35, \"rgb(40, 60, 190)\"],\n                        [0.5, \"rgb(70, 100, 245)\"],\n                        [0.6, \"rgb(90, 120, 245)\"],\n                        [0.7, \"rgb(106, 137, 247)\"],\n                        [1, \"rgb(220, 220, 220)\"]\n                        ],\n    autocolorscale = False,\n    reversescale = True,\n    marker = go.choropleth.Marker(line = go.choropleth.marker.Line( color = 'rgb(180,180,180)',width = 0.5)),\n    colorbar = go.choropleth.ColorBar(title = 'Number of players'))\n       ]\n\nlayout= go.Layout(title = go.layout.Title(text = 'Players from Different Countries'),\n            geo = go.layout.Geo(\n            showframe = False,\n            showcoastlines = False,\n            projection = go.layout.geo.Projection(type = 'equirectangular')\n            ))\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename = 'd3-world-map')","ba97ef8e":"pos = new_data.Position.value_counts(sort=False).reset_index()\npos.sort_values('index', inplace = True)\n\nx = pos.iloc[:,0]\ny = pos.iloc[:,1]\n\nx = x.tolist()\ny = y.tolist()","c96dd7a2":"trace1 = go.Bar(x = x, y = y, name = 'Age', marker=dict(color='rgb(180,180,180)'))\ndata_a = [trace1]\n\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data_a, layout = layout)\niplot(fig)","68165ecb":"## Number of Players from Each Country","ea7bd3ad":"## Distribution of Position ","ebfa70a8":"We clearly see the participation of European and American countries in huge amount","25d0d427":"## Wages of Goalkeeper","eb052d43":"## Let's See which Player is best among these","e54db1b8":"**More content shortly**<br>\n**Upvote if you find it useful :p**","5653a0c4":"## International Reputation, Skill Moves and Weak Foot","18ffec13":"## Age distribution among players","64fd23cb":"## Comaprison Of Passing","8a334490":"So now we merge code with their respective countries...."}}