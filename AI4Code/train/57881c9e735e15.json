{"cell_type":{"0215df8e":"code","50042a57":"code","fd727c17":"code","fe731d12":"code","a257ae53":"markdown","4f620f9e":"markdown","1d007346":"markdown","3a412c2b":"markdown"},"source":{"0215df8e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport matplotlib.path as path\nimport matplotlib.animation as animation\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\n\n# ~~~~~~~~~~~~~~~~ Begin configuration ~~~~~~~~~~~~~~~~\n\nfile_name = '..\/input\/santa2019leaderboard\/santa-workshop-tour-2019-publicleaderboard.csv' \n\n# Set the range of LB \"action\" we want to see\nmin_score = 0.0\nmax_score = 100000\n\n# Which direction is a better evaluation metric score?\nlower_is_better = True\n\n# A reasonable default\nnum_bins = 100\n\n# ~~~~~~~~~~~~~~~~ End configuration ~~~~~~~~~~~~~~~~\n\n\nscores = pd.read_csv(file_name, parse_dates=['SubmissionDate'])\nscores.Score = scores.Score.astype(np.float32)\n\n# keep the date only\nscores['SubmissionDate'] = scores['SubmissionDate'].apply(lambda x: x.date())\n\n# some kung-fu to figure out the ylim for the last graph\nscores_gb = scores.groupby('TeamName')\nif lower_is_better:\n    scores_final = scores_gb.min()\nelse:\n    scores_final = scores_gb.max()\nmask = (scores_final.Score <= max_score) & (scores_final.Score >= min_score)\nbins = np.linspace(min_score,max_score, num_bins+1)\nymax = np.histogram(scores_final.loc[mask, 'Score'].values, bins)[0].max()\nymax = int(np.ceil(ymax \/ 100.0)) * 100 # round up to nearest 100\n\n# We want the best score submitted for team up to and including a specific date,\n#  so we need to keep a running list of the cumulative dates\ncum_date = []\n\n# Mapping the dates for use in the animation loop\ndates_dict = {e:date for e, date in enumerate(scores['SubmissionDate'].unique())}\n\n# Set up the initial historgram\n#   see: http:\/\/matplotlib.org\/examples\/animation\/histogram.html\nn, _ = np.histogram(scores_final.loc[mask, 'Score'].values, bins)\nfig, ax = plt.subplots()\nleft = np.array(bins[:-1])\nright = np.array(bins[1:])\nbottom = np.zeros(len(left))\ntop = bottom + n\nnrects = len(left)\nnverts = nrects*(1 + 3 + 1)\nverts = np.zeros((nverts, 2))\ncodes = np.ones(nverts, int) * path.Path.LINETO\ncodes[0::5] = path.Path.MOVETO\ncodes[4::5] = path.Path.CLOSEPOLY\nverts[0::5, 0] = left\nverts[0::5, 1] = bottom\nverts[1::5, 0] = left\nverts[1::5, 1] = top\nverts[2::5, 0] = right\nverts[2::5, 1] = top\nverts[3::5, 0] = right\nverts[3::5, 1] = bottom\n\nbarpath = path.Path(verts, codes)\npatch = patches.PathPatch(\n    barpath, facecolor='green', edgecolor='yellow', alpha=0.5)\nax.add_patch(patch)\n\nax.set_xlim(left[0], right[-1])\nax.set_ylim(bottom.min(), top.max())\n\n\ndef animate(e):\n\n    # Grab all the scrores to date, grouped by Team\n    cum_date.append(dates_dict[e])\n    lb_gb = scores.loc[scores['SubmissionDate'].isin(cum_date)].groupby('TeamName')\n\n    # Find the best score of each team\n    if lower_is_better:\n        lb = lb_gb.min()\n    else:\n        lb = lb_gb.max()\n\n    # Throw out scores outside the defined range\n    mask = (lb.Score <= max_score) & (lb.Score >= min_score)\n    \n    # Calculate the new histogram\n    n, _ = np.histogram(lb[mask].Score.values, bins)\n    \n    # Update the figure\n    top = bottom + n\n    verts[1::5,1] = top\n    verts[2::5,1] = top\n    plt.title(dates_dict[e], fontsize=16)\n    \n    return [patch, ]\n\n\nanim = animation.FuncAnimation(fig, animate, frames=len(dates_dict), blit=True)\nanim.save('lb.gif', fps=3, writer='imagemagick')\nplt.show()","50042a57":"DATA_PATH = '..\/input\/santa2019leaderboard\/santa-workshop-tour-2019-publicleaderboard.csv'\ndf = pd.read_csv(DATA_PATH)\ndf['Date'] = pd.to_datetime( df['SubmissionDate'])\ndf.Score = df.Score.astype(np.float32)\n\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\ndef show_teams(df, cutoff):\n    d = df[df['Score'] <= cutoff]\n    plt.figure(figsize=(20,12))\n    best = d[['TeamName','Score']].groupby('TeamName').min().sort_values('Score').index\n    args = dict(data=d, x='Date', y='Score', hue='TeamName', hue_order=best, palette='muted')\n    sns.lineplot(legend=False, **args)\n    sns.scatterplot(legend=('brief' if len(best)<=30 else False), **args)","fd727c17":"# Show all submissions below 80k\nshow_teams(df, 80000)","fe731d12":"# Zoom in at submissions below 70k\nshow_teams(df, 70000)","a257ae53":"Seems like felixoneberlin is on a good track for the Rudolf Prize","4f620f9e":"Credit for following code goes to: https:\/\/www.kaggle.com\/grammati\/santa-s-leaderboard","1d007346":"* Original idea from: https:\/\/www.kaggle.com\/inversion\/leaderboard-progression\n* Code mostly taken from the animation tutorial @ https:\/\/matplotlib.org\/examples\/animation\/histogram.html\n* 03 Dez 2019","3a412c2b":"Sadly the gif doesnt play in the notebook, scroll down to the it in full beauty ;)"}}