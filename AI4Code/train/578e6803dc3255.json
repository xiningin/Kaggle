{"cell_type":{"530e4cf9":"code","807fd47c":"code","66727c15":"code","c8f6edac":"code","66dac82c":"code","69900acd":"code","0802b33c":"code","a7f6127c":"code","ffe8cb2f":"code","eaa793ee":"code","433a0990":"code","9f7364b0":"code","6e3eb36c":"code","82a62493":"code","d6e7ff4e":"code","d4154f04":"code","f5be1c98":"code","adf57708":"code","822d53bc":"code","337a0a2d":"code","570506c3":"code","50a7900f":"code","4ada2c85":"code","cb83a6fe":"code","074d256d":"code","66042427":"code","be813e62":"code","96af8074":"code","cd3f3bdd":"code","01654d77":"markdown","13c11e05":"markdown","20e84fed":"markdown"},"source":{"530e4cf9":"from  datetime import datetime, timedelta\nimport gc\nimport numpy as np, pandas as pd\nimport lightgbm as lgb","807fd47c":"CAL_DTYPES={\"event_name_1\": \"category\", \"event_name_2\": \"category\", \"event_type_1\": \"category\", \n         \"event_type_2\": \"category\", \"weekday\": \"category\", 'wm_yr_wk': 'int16', \"wday\": \"int16\",\n        \"month\": \"int16\", \"year\": \"int16\", \"snap_CA\": \"float32\", 'snap_TX': 'float32', 'snap_WI': 'float32' }\nPRICE_DTYPES = {\"store_id\": \"category\", \"item_id\": \"category\", \"wm_yr_wk\": \"int16\",\"sell_price\":\"float32\" }","66727c15":"pd.options.display.max_columns = 50","c8f6edac":"h = 28 \nmax_lags = 57\ntr_last = 1913\nfday = datetime(2016,4, 25) \nfday","66dac82c":"def create_dt(is_train = True, nrows = None, first_day = 1200):\n    prices = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\", dtype = PRICE_DTYPES)\n    for col, col_dtype in PRICE_DTYPES.items():\n        if col_dtype == \"category\":\n            prices[col] = prices[col].cat.codes.astype(\"int16\")\n            prices[col] -= prices[col].min()\n            \n    cal = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\", dtype = CAL_DTYPES)\n    cal[\"date\"] = pd.to_datetime(cal[\"date\"])\n    for col, col_dtype in CAL_DTYPES.items():\n        if col_dtype == \"category\":\n            cal[col] = cal[col].cat.codes.astype(\"int16\")\n            cal[col] -= cal[col].min()\n    \n    start_day = max(1 if is_train  else tr_last-max_lags, first_day)\n    numcols = [f\"d_{day}\" for day in range(start_day,tr_last+1)]\n    catcols = ['id', 'item_id', 'dept_id','store_id', 'cat_id', 'state_id']\n    dtype = {numcol:\"float32\" for numcol in numcols} \n    dtype.update({col: \"category\" for col in catcols if col != \"id\"})\n    dt = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\", \n                     nrows = nrows, usecols = catcols + numcols, dtype = dtype)\n    \n    for col in catcols:\n        if col != \"id\":\n            dt[col] = dt[col].cat.codes.astype(\"int16\")\n            dt[col] -= dt[col].min()\n    \n    if not is_train:\n        for day in range(tr_last+1, tr_last+ 28 +1):\n            dt[f\"d_{day}\"] = np.nan\n    \n    dt = pd.melt(dt,\n                  id_vars = catcols,\n                  value_vars = [col for col in dt.columns if col.startswith(\"d_\")],\n                  var_name = \"d\",\n                  value_name = \"sales\")\n    \n    dt = dt.merge(cal, on= \"d\", copy = False)\n    dt = dt.merge(prices, on = [\"store_id\", \"item_id\", \"wm_yr_wk\"], copy = False)\n    \n    return dt","69900acd":"def create_fea(dt):\n    lags = [7, 28]\n    lag_cols = [f\"lag_{lag}\" for lag in lags ]\n    for lag, lag_col in zip(lags, lag_cols):\n        dt[lag_col] = dt[[\"id\",\"sales\"]].groupby(\"id\")[\"sales\"].shift(lag)\n\n    wins = [7, 28]\n    for win in wins :\n        for lag,lag_col in zip(lags, lag_cols):\n            dt[f\"rmean_{lag}_{win}\"] = dt[[\"id\", lag_col]].groupby(\"id\")[lag_col].transform(lambda x : x.rolling(win).mean())\n\n    \n    \n    date_features = {\n        \n        \"wday\": \"weekday\",\n        \"week\": \"weekofyear\",\n        \"month\": \"month\",\n        \"quarter\": \"quarter\",\n        \"year\": \"year\",\n        \"mday\": \"day\",\n#         \"ime\": \"is_month_end\",\n#         \"ims\": \"is_month_start\",\n    }\n    \n#     dt.drop([\"d\", \"wm_yr_wk\", \"weekday\"], axis=1, inplace = True)\n    \n    for date_feat_name, date_feat_func in date_features.items():\n        if date_feat_name in dt.columns:\n            dt[date_feat_name] = dt[date_feat_name].astype(\"int16\")\n        else:\n            dt[date_feat_name] = getattr(dt[\"date\"].dt, date_feat_func).astype(\"int16\")","0802b33c":"FIRST_DAY = 350 # If you want to load all the data set it to '1' -->  Great  memory overflow  risk !","a7f6127c":"%%time\n\ndf = create_dt(is_train=True, first_day= FIRST_DAY)\ndf.shape","ffe8cb2f":"df.head()","eaa793ee":"df.info()","433a0990":"%%time\n\ncreate_fea(df)\ndf.shape","9f7364b0":"df.info()","6e3eb36c":"df.head()","82a62493":"df.dropna(inplace = True)\ndf.shape","d6e7ff4e":"cat_feats = ['item_id', 'dept_id','store_id', 'cat_id', 'state_id'] + [\"event_name_1\", \"event_name_2\", \"event_type_1\", \"event_type_2\"]\nuseless_cols = [\"id\", \"date\", \"sales\",\"d\", \"wm_yr_wk\", \"weekday\"]\ntrain_cols = df.columns[~df.columns.isin(useless_cols)]\nX_train = df[train_cols]\ny_train = df[\"sales\"]","d4154f04":"%%time\n\nnp.random.seed(777)\n\nfake_valid_inds = np.random.choice(X_train.index.values, 2_000_000, replace = False)\ntrain_inds = np.setdiff1d(X_train.index.values, fake_valid_inds)\ntrain_data = lgb.Dataset(X_train.loc[train_inds] , label = y_train.loc[train_inds], \n                         categorical_feature=cat_feats, free_raw_data=False)\nfake_valid_data = lgb.Dataset(X_train.loc[fake_valid_inds], label = y_train.loc[fake_valid_inds],\n                              categorical_feature=cat_feats,\n                 free_raw_data=False)# This is a random sample, we're not gonna apply any time series train-test-split tricks here!","f5be1c98":"del df, X_train, y_train, fake_valid_inds,train_inds ; gc.collect()","adf57708":"params = {\n        \"objective\" : \"poisson\",\n        \"metric\" :\"rmse\",\n        \"force_row_wise\" : True,\n        \"learning_rate\" : 0.075,\n#         \"sub_feature\" : 0.8,\n        \"sub_row\" : 0.75,\n        \"bagging_freq\" : 1,\n        \"lambda_l2\" : 0.1,\n#         \"nthread\" : 4\n        \"metric\": [\"rmse\"],\n    'verbosity': 1,\n    'num_iterations' : 1200,\n    'num_leaves': 2**11-1,\n    \"min_data_in_leaf\":  2**12-1,\n}","822d53bc":"%%time\n\nm_lgb = lgb.train(params, train_data, valid_sets = [fake_valid_data], verbose_eval=20) ","337a0a2d":"fig, ax = plt.subplots(figsize=(12,6))\nlgb.plot_importance(m_lgb, max_num_features=30, height=0.8, ax=ax)\nax.grid(False)\nplt.title(\"LightGBM - Feature Importance\", fontsize=15);","570506c3":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (18.0, 4)\n%matplotlib inline \n\nfig, ax = plt.subplots(figsize=(12,8))\nlgb.plot_importance(m_lgb, max_num_features=50, height=0.8, ax=ax)\nax.grid(False)\nplt.title(\"LightGBM - Feature Importance\", fontsize=15)\nplt.show()","50a7900f":"m_lgb.save_model(\"model.lgb\")","4ada2c85":"def create_lag_features_for_test(dt, day):\n    # create lag feaures just for single day (faster)\n    lags = [7, 28]\n    lag_cols = [f\"lag_{lag}\" for lag in lags]\n    for lag, lag_col in zip(lags, lag_cols):\n        dt.loc[dt.date == day, lag_col] = \\\n            dt.loc[dt.date ==day-timedelta(days=lag), 'sales'].values  # !!! main\n\n    windows = [7, 28]\n    for window in windows:\n        for lag in lags:\n            df_window = dt[(dt.date <= day-timedelta(days=lag)) & (dt.date > day-timedelta(days=lag+window))]\n            df_window_grouped = df_window.groupby(\"id\").agg({'sales':'mean'}).reindex(dt.loc[dt.date==day,'id'])\n            dt.loc[dt.date == day,f\"rmean_{lag}_{window}\"] = \\\n                df_window_grouped.sales.values     ","cb83a6fe":"def create_date_features_for_test(dt):\n    # copy of the code from `create_dt()` above\n    date_features = {\n        \"wday\": \"weekday\",\n        \"week\": \"weekofyear\",\n        \"month\": \"month\",\n        \"quarter\": \"quarter\",\n        \"year\": \"year\",\n        \"mday\": \"day\",\n    }\n\n    for date_feat_name, date_feat_func in date_features.items():\n        if date_feat_name in dt.columns:\n            dt[date_feat_name] = dt[date_feat_name].astype(\"int16\")\n        else:\n            dt[date_feat_name] = getattr(\n                dt[\"date\"].dt, date_feat_func).astype(\"int16\")","074d256d":"%%time\n\nalphas = [1.028, 1.023, 1.018]\nweights = [1\/len(alphas)]*len(alphas)  # equal weights\n\nte0 = create_dt(False)  # create master copy of `te`\ncreate_date_features_for_test (te0)\n\nfor icount, (alpha, weight) in enumerate(zip(alphas, weights)):\n    te = te0.copy()  # just copy\n    cols = [f\"F{i}\" for i in range(1, 29)]\n\n    for tdelta in range(0, 28):\n        day = fday + timedelta(days=tdelta)\n        print(tdelta, day.date())\n        tst = te[(te.date >= day - timedelta(days=max_lags))\n                 & (te.date <= day)].copy()\n#         create_fea(tst)  # correct, but takes much time\n        create_lag_features_for_test(tst, day)  # faster  \n        tst = tst.loc[tst.date == day, train_cols]\n        te.loc[te.date == day, \"sales\"] = \\\n            alpha * m_lgb.predict(tst)  # magic multiplier by kyakovlev\n\n    te_sub = te.loc[te.date >= fday, [\"id\", \"sales\"]].copy()\n\n    te_sub[\"F\"] = [f\"F{rank}\" for rank in te_sub.groupby(\"id\")[\n        \"id\"].cumcount()+1]\n    te_sub = te_sub.set_index([\"id\", \"F\"]).unstack()[\n        \"sales\"][cols].reset_index()\n    te_sub.fillna(0., inplace=True)\n    te_sub.sort_values(\"id\", inplace=True)\n    te_sub.reset_index(drop=True, inplace=True)\n    te_sub.to_csv(f\"submission_{icount}.csv\", index=False)\n    if icount == 0:\n        sub = te_sub\n        sub[cols] *= weight\n    else:\n        sub[cols] += te_sub[cols]*weight\n    print(icount, alpha, weight)","66042427":"sub.head(10)","be813e62":"sub.id.nunique(), sub[\"id\"].str.contains(\"validation$\").sum()","96af8074":"sub.shape","cd3f3bdd":"sub2 = sub.copy()\nsub2[\"id\"] = sub2[\"id\"].str.replace(\"validation$\", \"evaluation\")\nsub = pd.concat([sub, sub2], axis=0, sort=False)\nsub.to_csv(\"submission.csv\",index=False)","01654d77":"> This notebook aims to push the public LB under 0.50. Certainly, the competition is not yet at its peak and there clearly remains room for improvement.","13c11e05":"# Credits and comments on changes\n\nThis notebook is based on [m5-first-public-notebook-under-0-50](https:\/\/www.kaggle.com\/kneroma\/m5-first-public-notebook-under-0-50) v.6 by @kkiller \n\nInitially (up to v.6) it's sole purpose was to test accelerated prediction stage (vs original notebook) where I generate lag features only for the days that need sales forecasts. Everything else is unchanged vs the original _kkiller's_ notebook (as in version 6).\n\n**Additional improvements implemented:**\n- v7: greater `num_leaves` and `min_data_in_leaf` values\n- v7: feature importance chart added","20e84fed":"# Prediction stage\n(updated vs original)"}}