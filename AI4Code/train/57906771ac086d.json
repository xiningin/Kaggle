{"cell_type":{"739831f6":"code","2d3c027d":"code","2f3fcc43":"code","c7d1df25":"code","66213ebe":"code","fe0d7b75":"code","615606ba":"code","a740b312":"markdown","f092f7c2":"markdown","790cc8c0":"markdown","19faa638":"markdown","01b5f4ce":"markdown","b620fb50":"markdown"},"source":{"739831f6":"#Libraried\nimport pandas as pd\npd.set_option('display.max_columns', None)\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport datetime\nfrom time import time\nfrom scipy import stats\n\nfrom sklearn.model_selection import GroupKFold\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport os\nimport glob\nimport copy\n\nimport numpy as np\nfrom scipy.integrate import odeint","2d3c027d":"# x_1 = train_df['Date']\n# y_1 = train_df['ConfirmedCases']\n# y_2 = train_df['Fatalities']\n\n# fig = make_subplots(rows=1, cols=1)\n\n# fig.add_trace(\n#     go.Scatter(x=x_1, mode='lines+markers', y=y_1, marker=dict(color=\"mediumaquamarine\"), showlegend=False,\n#                name=\"Original signal\"),\n#     row=1, col=1\n# )\n\n# fig.add_trace(\n#     go.Scatter(x=x_1, mode='lines+markers', y=y_2, marker=dict(color=\"darkgreen\"), showlegend=False,\n#                name=\"Original signal\"),\n#     row=1, col=1\n# )\n\n# fig.update_layout(height=400, width=800, title_text=\"ConfirmedCases (pale) vs. Fatalities (dark) \")\n# fig.show()","2f3fcc43":"# SI model\nN = 2200000          # Total population\nI = np.zeros(200)  # Infected\nS = np.zeros(200)   # Susceptible\n\nr = 10             # This value defines how quickly the disease spreads\nB = 0.01            # Probability of being infected\n\nI[0] = 1           # On day 0, there's only one infected person\nS[0] = N-I[0]      # So the suspecptible people is equal = N - I[0]\n\nfor idx in range(199):\n    S[idx+1] = S[idx] - r*B*I[idx]*S[idx]\/N\n    I[idx+1] = I[idx] + r*B*I[idx]*S[idx]\/N\n","c7d1df25":"sns.lineplot(x=np.arange(200), y=S, label='Susceptible')\nsns.lineplot(x=np.arange(200), y=I, label='Infected')","66213ebe":"N = 2200000        # Total population\ndays = 200          # Period\nE = np.zeros(days)  # Exposed          \nE[0] = 0            # Day 0 exposed\nI = np.zeros(days)  # Infected\nI[0] = 1          # Day 0 infected                                                                \nS = np.zeros(days)  # Susceptible\nS[0] = N - I[0]     # Day 0 susceptible\nR = np.zeros(days)  # Recovered\nR[0] = 0\n\nr = 20              # Number of susceptible could be contactes by an infected\nB = 0.03            # Probability of spread for infected\na = 0.1             # Probability of converted from exposed to infected\nr2 = r             # Number of susceptible could be contactes by an exposed\nB2 = B          # Probability of spread for exposed\ny = 0.1             # Probability of recovered\n\n\nfor idx in range(days-1):\n    S[idx+1] = S[idx] - r*B*S[idx]*I[idx]\/N - r2*B2*S[idx]*E[idx]\/N\n    E[idx+1] = E[idx] + r*B*S[idx]*I[idx]\/N -a*E[idx] + r2*B2*S[idx]*E[idx]\/N\n    I[idx+1] = I[idx] + a*E[idx] - y*I[idx]\n    R[idx+1] = R[idx] + y*I[idx]\n    \nplt.figure(figsize=(16,9))\nsns.lineplot(x=np.arange(200), y=S, label='Susceptible')\nsns.lineplot(x=np.arange(200), y=I, label='Infected')\nsns.lineplot(x=np.arange(200), y=E, label='Exposed')\nsns.lineplot(x=np.arange(200), y=R, label='Recovered')\n\n\n\nI_origin = copy.copy(I)","fe0d7b75":"N = 2200000        # Total population\ndays = 200          # Period\nE = np.zeros(days)  # Exposed          \nE[0] = 0            # Day 0 exposed\nI = np.zeros(days)  # Infected\nI[0] = 1            # Day 0 infected                                                                \nS = np.zeros(days)  # Susceptible\nS[0] = N - I[0]     # Day 0 susceptible\nR = np.zeros(days)  # Recovered\nR[0] = 0\n\nr = 20              # Number of susceptible could be contactes by an infected\nB = 0.03            # Probability of spread for infected\na = 0.1             # Probability of converted from exposed to infected\nr2 = r             # Number of susceptible could be contactes by an exposed\nB2 = B           # Probability of spread for exposed\ny = 0.1             # Probability of recovered\n\n\nfor idx in range(days-1):\n    if idx>10:\n        r = 5\n        r2 = r\n    S[idx+1] = S[idx] - r*B*S[idx]*I[idx]\/N - r2*B2*S[idx]*E[idx]\/N\n    E[idx+1] = E[idx] + r*B*S[idx]*I[idx]\/N -a*E[idx] + r2*B2*S[idx]*E[idx]\/N\n    I[idx+1] = I[idx] + a*E[idx] - y*I[idx]\n    R[idx+1] = R[idx] + y*I[idx]\n\nplt.figure(figsize=(16,9))\nsns.lineplot(x=np.arange(200), y=S, label='Secestible')\nsns.lineplot(x=np.arange(200), y=I, label='Infected')\nsns.lineplot(x=np.arange(200), y=E, label='Exposed')\nsns.lineplot(x=np.arange(200), y=R, label='Recovered')\n\nI_sd = copy.copy(I)","615606ba":"plt.figure(figsize=(16,9))\nsns.lineplot(x=np.arange(200), y=I_origin, label='Infected w\/o social distancing')\nsns.lineplot(x=np.arange(200), y=I_sd, label='Infected w\/ social distancing')","a740b312":"# Questions:\n\n1. Can you tune the parameters used by the model so that it will better fit current status in Alberta?\n\nTips: \n\n* COVID-19 stats in AB can be found from here webiste:https:\/\/covid19stats.alberta.ca\/\n\n* You may want to tweak the parameters such as intitial exposed, \n\n2. As you can see, social distancing is an effective way of \"flattening\" the infected curve. Can you think of any other methods that can also be used for the same purpose? How can we adjust to model to reflect the effects you may come up with? What reasonable assumptions we can make? Can you also plot it along with the \"do nothing\" and \"social distancing\" curves so we can compare them?\n\n3. What are your takeawys from dothing these excercises? As an Albertan, what can we do to help our community during this challening time?\n","f092f7c2":"## Introducing SEIR model (Susceptible, Exposed, Infected and Recovered)\n\nFirst of all let's divide the population into two groups:\n\nTO-BE-COMPLETED","790cc8c0":"## Let's get started with the basic SI model (Susceptible Infected)\n\nFirst of all let's divide the population into two groups:\n\n* The susceptibles, who are healthy people, the number of susceptibles is denoted as S.\n* The infected, who have been infected by the virus, the number of infected is denoted as I.\n\nThe number of the total population is denoted as N.\n\nSo N = S + I\n\nLet's assume each day there will be I[idx] (idx stands for the idx-th day) infected going out and they will meet with r people, and the probability for the contacted people to be infected is B, so we have:\n\n* S[idx+1] = S[idx] - r*B*I[idx]*S[idx]\/N\n* I[idx+1] = I[idx] + r*B*I[idx]*S[idx]\/N\n\nThen we can start programming it:","19faa638":"## What if we implement a social-distancing policy?\n","01b5f4ce":"### Let's plot them together","b620fb50":"What the SI model suggests is that once a people got infected eventually the total population will be infected. But does it sound too simple? How can we improve it?"}}