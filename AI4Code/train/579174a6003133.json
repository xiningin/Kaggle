{"cell_type":{"d052b4a9":"code","21219e37":"code","2508e951":"code","74d62d27":"code","7058fcf7":"code","fa288b8d":"code","a44b6758":"markdown","f85fddf7":"markdown","5a7ff295":"markdown","e8c81590":"markdown","58faa846":"markdown"},"source":{"d052b4a9":"import pandas as pd\nimport numpy as np\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntest['Survived'] = np.nan\ny = train['Survived']\nPassId = test['PassengerId'].values\ndata=train.append(test,ignore_index=True,sort=False)\ndata.drop(['Pclass','Sex','Age','SibSp','Parch','Fare','Cabin','Embarked','PassengerId'],axis=1,inplace=True)","21219e37":"data['Family_name']=data['Name'].str.split(', ').str[0]\ndata['Title']=data['Name'].str.split(', ').str[1].str.split('.').str[0]\ndata['Title'] = data['Title'].replace(['Ms','Mlle'], 'Miss')\ndata['Title'] = data['Title'].replace(['Mme','Dona','the Countess','Lady'], 'Mrs')\ndata['Title'] = data['Title'].replace(['Rev','Mlle','Jonkheer','Dr','Capt','Don','Col','Major','Sir'], 'Mr')\n\n\ndata['Ticket_count'] = data.Ticket.apply(lambda x: data[data['Ticket']==x].shape[0] )","2508e951":"# Female and chil No survide.\nlist1=data[(data['Title']!='Mr') & (data['Survived']==0) ]['Ticket'].tolist()\n\n# Man survive.\nlist2=data[(data['Title']=='Mr') & (data['Survived']==1) ]['Ticket'].tolist()\n\ndata['Ticket_wit_FC_dead']=0\ndata['Ticket_wit_M_alive']=0\n\ndata.loc[data['Ticket'].isin(list1),'Ticket_wit_FC_dead' ]=1\ndata.loc[data['Ticket'].isin(list2),'Ticket_wit_M_alive' ]=1","74d62d27":"import category_encoders as ce\nfrom sklearn import preprocessing\n\ndata['Title_Encode']=np.nan\nce_target_encoder = ce.TargetEncoder(cols=['Title'], smoothing=0.3)\nce_target_encoder.fit(data[:len(y)],y)\ndata['Title_Encode']=ce_target_encoder.transform(data)['Title']\n\nle = preprocessing.LabelEncoder()\ndata['Family_name_Encode']=le.fit_transform(data['Family_name'])\ndata['Ticket_Number_Encode']=le.fit_transform(data['Ticket'])","7058fcf7":"data.drop(['Survived','Name','Ticket','Title','Family_name'],axis=1,inplace=True)\ntrain = data[:len(y)]\ntest = data[len(y):]","fa288b8d":"from xgboost.sklearn import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver='liblinear', max_iter=200)\nmodel.fit(train, y)\n\npd.DataFrame({ 'PassengerId' : PassId, 'Survived': model.predict(test) }).to_csv('submission.csv', index=False)","a44b6758":"## Some EDA with the two remainig features (Name and Ticket).\nFrom Name we will extract Family Name ans Title. Title grouped by sex and age.    \nFrom Ticket we will extract Tickect Cound..","f85fddf7":"## Encode Categorical features.","5a7ff295":"## Building the model, predictions and Submission File","e8c81590":"## Load files and drop not used features","58faa846":"## Time to overfit.\nTwo new features based on tickets groups and Survided."}}