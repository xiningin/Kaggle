{"cell_type":{"f6db514c":"code","c2d57561":"code","a979a5fb":"code","f8fa5114":"markdown","a41159de":"markdown","3b82c004":"markdown","b0c7b062":"markdown","f7f2c70b":"markdown","7c4b0162":"markdown","af3da77b":"markdown","437a1e34":"markdown","e31aaba7":"markdown","bb04de84":"markdown","dab892d4":"markdown"},"source":{"f6db514c":"!cp -r ..\/input\/* .","c2d57561":"import requests\nimport datetime\n\n\ndef get_stock_data(symbol:str,\n                   period_start:datetime=datetime.datetime.fromtimestamp(0),\n                   period_end:datetime=datetime.datetime.now(),\n                   interval='1d',\n                   proxies={},\n                   **option) -> dict:\n    \"\"\"\n    Get stock data for Yahoo finace\n    symbol (str: required): symbol of Thai stock, add '.BK' in case of SET\n    start, end (datetime: optional): start and end date. By default, they are 0 and now respectively.\n    :params\n        - symbol (str): Can be any symbols available on Yahoo Finance\n        - interval (str): Inteval of history (1d [default], 5d, 1m, 5y etc.)\n        - period_start (datetime): Starting observing date\n        - period_end (datetime): Ending observing date\n        - proxy (dict): Optional, in case of you need anonymous requests.\n    :return\n    respone status\n    \"\"\"\n    res = requests.get(f'https:\/\/query1.finance.yahoo.com\/v8\/finance\/chart\/{symbol}',\n                       params={'symbol': f'{symbol}.BK',\n                               'period1': int(period_start.timestamp()),\n                               'period2': int(period_end.timestamp()),\n                               'interval':interval,\n                               'includePrePost':'true',\n                               'events':'div%7Csplit%7Cearn',\n                               'lang':'en-US',\n                               'region': 'TH',\n                               'crumb': 'ikHMww39GL1',\n                               'corsDomain': 'finance.yahoo.com'},\n                       proxies=proxies\n                      )\n    return res\n\nsymbol = 'ALF'\nres = get_stock_data(symbol) # scrape from furthest date to today by default\n\n# Specific range of date\n# res = get_stock_data(symbol, period_start=datetime.date(2012, 6, 30), period_end=(2020, 6, 30))\n\n# We done scraping here, now let's structure them\nimport time\nimport pandas as pd\n\n\ndata = res.json()\nchart = pd.DataFrame(data['chart']['result'][0]['indicators']['quote'][0])\n\ntimestamp = data['chart']['result'][0]['timestamp']\nchart['date'] = timestamp\nchart['date'] = chart['date'].apply(lambda x: datetime.datetime.fromtimestamp(x).date())\nchart = chart[['date'] + list(chart.drop('date', axis=1).columns)]\nchart.head(10)","a979a5fb":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Candlestick(x=chart['date'],\n                open=chart['open'],\n                high=chart['high'],\n                low=chart['low'],\n                close=chart['close'])]\n               )\nfig.update_layout(\n    title=f'Symbol {symbol}'\n)\nfig.show()","f8fa5114":"# Now let's scrape!","a41159de":"## Yahoo finance\nIn this notebook, I should the domain Yahoo finance as it supports alomost all stock markets in the include crytocurrency.","3b82c004":"![](stock-scraper-images\/stonks.jpeg)\n# Greeting\n\nEveryone wants to be rich right? And stock trading is a one of good choices for you to reach your dream. As a Data scientist, we learn much about time series and classifications and also you may want to tests your skills. However, to make stock datasets can be annoying because it involves to web scraping. And believe me, I have done scraping many websites I found that BS4 is a good one but it can be too **UI sensitive**. So, this notebook will show how I scrape stock data in my personal project.\n<br>\n<br>\nDon't forget to upvote and support me at: https:\/\/www.buymeacoffee.com\/batprem","b0c7b062":"# Let's talk about scraping\n## Is Beatifulsoup bad for scraping\n\nShort answer - <b>No<\/b>\n<br>\nBS4, on the otherhand, is less compicated than Scrapy and works well with static pages of which UIs (of hidden data) are rarely changed. However, in the cases of AJAX pages which data on pages can be changed anytime and pages UIs are frequently changed i.e. Facebook, BS4 may not be able to handle differentiations.\n<br>\n<br>\nMoreover, if we plan to scrape AJAX which pages' data updates all the time, requesting the whole page may not a good idea since it will also request othan page interfaces than the data. This uncessary cause high loads for host sites and our machine.\n<br>\n<br>\nThese mean other Beatifulsoup4; Scrapy and Selinium (or any UI-based scraping tools) will be used in this notebook\n<br>\n<br>\n## What to use instead?\nAs I mentioned eariler that BS4 scraping can be sensitive, the answer is easy, just only `requests` is enough. But how? This is what I'm going show you in the next section; STAY TUNE!\n","f7f2c70b":"### How can I do it","7c4b0162":"# Goodbye - ing\nIn this notebook, I show you how to scrape stock data without using BS4 which can hanble the cases of User Interface changes. I also have much more scraping techniques for different websites if you like it please Upvote this notebook or support me at: https:\/\/www.buymeacoffee.com\/batprem.","af3da77b":"#### Plot it","437a1e34":"As I mentioned earlier, AJAX pages are the page of which data change anytime which mean there are APIs transporting data between client and server sides. To capture thess APIs, we just need to use Inspect mode on and click \"XHR\"\n\n![](stock-scraper-images\/Screenshot 2564-06-23 at 12.08.41.png)\n\nAs you see, you will see APIs running behind browser. To make sure which API is the one we want, we need trigger UI to make them reload the data.\n<br>\nFinally, I found the URL <br>\n`https:\/\/query1.finance.yahoo.com\/v8\/finance\/chart\/ALF?symbol=ALF&period1=1622228400&period2=1622563200&useYfid=true&interval=15m&includePrePost=true&events=div%7Csplit%7Cearn&lang=en-US&region=US&crumb=7zgZ%2FgUeOp1&corsDomain=finance.yahoo.com` <br>\nwhich uses get methods to call stock data from backend with include range of timestamp and interval, and that, I use it to be obtain the stock data","e31aaba7":"### Just give me code\n\nOkay, there you go","bb04de84":"Now, we have history price table of the symbol 'ALF'. Next, let's how can I do it.","dab892d4":"#### Request and scrape"}}