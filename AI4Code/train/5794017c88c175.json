{"cell_type":{"b3634fc4":"code","2962e357":"code","8da66a54":"code","ac14cd9e":"code","495fba80":"code","51b7a8cc":"code","9d9970fa":"code","f69b8eee":"code","b0520a95":"code","e2f4c17e":"code","2130d8fb":"code","999a9a3d":"code","400323c1":"code","23e080ff":"markdown","ce4b464f":"markdown","1fedea5d":"markdown"},"source":{"b3634fc4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2962e357":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt","8da66a54":"image = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nsharpening_img = np.array([[-1,-1,-1],[-1,9,-1],[-0,-2,-0]])\nsharped_fix = cv2.filter2D(image, -1, sharpening_img)","ac14cd9e":"plt.figure(figsize=(7,7))\nplt.imshow(image)\nplt.title('ORIGINAL IMAGE'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.imshow(sharped_fix)\nplt.title('SHARPENING IMAGE'), plt.xticks([]), plt.yticks([])","495fba80":"a = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\na1 = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\na = a.sum(axis=-1)","51b7a8cc":"def blur(a):\n    for x in range(1,a.shape[0]-1):\n        for y in range(1,a.shape[1]-1):\n            a[x,y] = (30*a[x,y] + a[x-1,y] + a[x+1,y] + a[x,y-1] + a[x,y+1])\/8.0\n    return a","9d9970fa":"%timeit blur(a)","f69b8eee":"plt.figure(figsize=(7,7))\nplt.imshow(a1, cmap=\"gray\")\nplt.title('ORIGINAL IMAGE'), plt.xticks([]), plt.yticks([])\nblur(a)\nblur(a)\nblur(a)\nplt.figure(figsize=(7,7))\nplt.imshow(a, cmap=\"gray\")\nplt.title('BLURING IMAGE'), plt.xticks([]), plt.yticks([])","b0520a95":"img = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)","e2f4c17e":"edge_Canny = cv2.Canny(img_gray,120,220)","2130d8fb":"sobel_x = cv2.Sobel(img_gray,cv2.CV_64F,1,0,ksize=7)\nsobel_y = cv2.Sobel(img_gray,cv2.CV_64F,0,1,ksize=7)","999a9a3d":"def filter2d(src, kernel):\n    m, n = kernel.shape\n\n    q = int((m-1)\/2)\n    r, s = src.shape[0], src.shape[1]\n\n    app = np.zeros((r, s))\n\n    for y in range(q, r - q):\n        for x in range(q, s - q):\n           \n            app[y][x] = np.sum(src[y-q:y+q+1, x-q:x+q+1]*kernel)\n\n    return app\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1, 1,  1],\n                   [1, -8, 1],\n                   [1, 2,  1]])\n\napp = filter2d(gray, kernel)","400323c1":"plt.subplot(2,2,4),plt.imshow(edge_Canny,cmap = 'gray')\nplt.title('CANNY IMAGE'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,2),plt.imshow(sobel_x,cmap = 'gray')\nplt.title('SOBEL X'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,3),plt.imshow(sobel_y,cmap = 'gray')\nplt.title('SOBEL Y'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,1),plt.imshow(app,cmap = 'gray')\nplt.title('LAPLACIAN IMAGE'), plt.xticks([]), plt.yticks([])\n\nplt.show()","23e080ff":"                ###################### CANNY IMAGE , SOBEL (A,B), DAN LAPLACIAN IMAGE #######################","ce4b464f":"                                  ###################### SHARPENING #############################","1fedea5d":"                                            ############## BLURRING ###################"}}