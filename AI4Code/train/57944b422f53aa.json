{"cell_type":{"deccfaa5":"code","b6ee04c7":"code","a4f3ba38":"code","1e9ac5be":"code","fca771a9":"code","59f9d11f":"code","b942b8c9":"code","b7e16ffc":"code","b4eefa3a":"code","7edc5487":"code","f3ae1958":"code","e9980f95":"code","80d8d2cd":"code","e4d87d28":"code","f20f1444":"code","f9d69b34":"code","7fa9d67c":"code","8a0ef3da":"code","59615386":"code","f3c6105a":"code","39ab4180":"code","63112039":"code","8085a667":"code","a0237b50":"code","4f4e5d7d":"code","7672601e":"code","fbb83842":"code","4c9f1b2d":"code","3807ec3a":"code","81b44343":"code","fdc945d1":"code","32abb4f5":"code","f2fe5625":"markdown","18d9021e":"markdown","20eee11f":"markdown","2abff8bd":"markdown","59e7ddfe":"markdown"},"source":{"deccfaa5":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","b6ee04c7":"(X_train, y_train),(X_test,y_test) = keras.datasets.mnist.load_data('\/kaggle\/input\/mnist-numpy\/mnist.npz')","a4f3ba38":"len(X_train)","1e9ac5be":"len(X_test)","fca771a9":"X_train[0].shape","59f9d11f":"X_train[0]","b942b8c9":"plt.matshow(X_train[0])\nplt.show()","b7e16ffc":"plt.matshow(X_train[1])\nplt.show()","b4eefa3a":"plt.matshow(X_train[2])\nplt.show()","7edc5487":"y_train[2]","f3ae1958":"y_train[:5]","e9980f95":"X_train.shape","80d8d2cd":"X_train = X_train\/255\nX_test = X_test\/255","e4d87d28":"X_train_flattend = X_train.reshape(len(X_train),28*28)\nX_test_flattend = X_test.reshape(len(X_test),28*28)","f20f1444":"X_test_flattend.shape","f9d69b34":"X_train_flattend[0]","7fa9d67c":"model = keras.Sequential([\n    keras.layers.Dense(10, input_shape=(784,),activation = 'sigmoid')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n    )\n\nmodel.fit(X_train_flattend,y_train,epochs = 5)","8a0ef3da":"model.evaluate(X_test_flattend,y_test)","59615386":"plt.matshow(X_test[0])","f3c6105a":"y_predicted = model.predict(X_test_flattend)\ny_predicted","39ab4180":"y_predicted[0]","63112039":"# print the maximum value\nnp.argmax(y_predicted[0])","8085a667":"plt.matshow(X_test[6])","a0237b50":"y_predicted[6]","4f4e5d7d":"# print the maximum value\nnp.argmax(y_predicted[6])","7672601e":"y_predicted_labels =[np.argmax(i) for i in y_predicted]\ny_predicted_labels[:5]","fbb83842":"y_test[:5]","4c9f1b2d":"cm = tf.math.confusion_matrix(y_test,y_predicted_labels)\ncm","3807ec3a":"import seaborn as sns\nplt.figure(figsize = (10,7))\nsns.heatmap(cm , annot = True,fmt = 'd')\nplt.xlabel('Preditions')\nplt.ylabel('truth')\nplt.show","81b44343":"model = keras.Sequential([\n    keras.layers.Dense(100, input_shape=(784,),activation = 'relu'),\n    keras.layers.Dense(10, activation = 'sigmoid')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n    )\n\nmodel.fit(X_train_flattend,y_train,epochs = 5)","fdc945d1":"model.evaluate(X_test_flattend,y_test)","32abb4f5":"y_predicted = model.predict(X_test_flattend)\ny_predicted_labels =[np.argmax(i) for i in y_predicted]\ncm = tf.math.confusion_matrix(y_test,y_predicted_labels)\n\n\nplt.figure(figsize = (10,7))\nsns.heatmap(cm , annot = True,fmt = 'd')\nplt.xlabel('Preditions')\nplt.ylabel('truth')\nplt.show","f2fe5625":"# get predictions","18d9021e":"# add hidden layes","20eee11f":"**Thank You For Having A Look At This Notebook**\n**Please Upvote if this was Helpful.**","2abff8bd":"# Simple Neural Network with MNIST data set.\n\n#### For Binary Classification","59e7ddfe":"# Create Simple NN."}}