{"cell_type":{"c00b513a":"code","f4938922":"code","65708f5d":"code","24c9d6ce":"code","6efc4aeb":"code","b5b41fe8":"code","eb2561a2":"code","7a858d03":"code","58c14910":"code","e69fb440":"code","30711ed8":"code","4fb04499":"code","d6f4e705":"code","3dc9080f":"code","c07b0126":"code","04373a7e":"code","581abba8":"code","604653cb":"code","cf25e416":"code","7348dd45":"code","5856d808":"code","4975d116":"code","b8dbe1b0":"code","a651b67a":"code","85818663":"code","9aec7e0c":"code","6cb7d84b":"code","3a59417a":"code","393a3b9a":"code","92b9bcaf":"code","adf2f309":"markdown","21008b2f":"markdown","99464d64":"markdown","cdd09735":"markdown","9d33c810":"markdown","40d857a8":"markdown","b5f32a99":"markdown","90d31209":"markdown","3b8d1ced":"markdown","54065f9b":"markdown","e4ba4cc3":"markdown","c1b422e2":"markdown","b5082441":"markdown","e6e0aa4f":"markdown","373fc026":"markdown","75b4f84c":"markdown","f67d2052":"markdown","05fa4550":"markdown","fb07179e":"markdown","507153f2":"markdown","edcd6bb7":"markdown","9c01b3d5":"markdown","12fcaf59":"markdown","05dbfbeb":"markdown","251bd88a":"markdown"},"source":{"c00b513a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4938922":"pokemon_data = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")","65708f5d":"pokemon_data.info()","24c9d6ce":"print(pokemon_data.corr())","6efc4aeb":"f, ax = plt.subplots(figsize = (10,10)) # allcocating figure size\nsns.heatmap(pokemon_data.corr(), annot = True, linewidths = .5, fmt = \".1f\", ax=ax)\nplt.show()","b5b41fe8":"print(pokemon_data.head())","eb2561a2":"print(pokemon_data.columns)","7a858d03":"plt.figure(2)\npokemon_data.Defense.plot(kind = \"line\", color = \"orange\", grid = True, linestyle = \":\")\npokemon_data.Speed.plot(color = \"green\", grid = True, linestyle = \":\")\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.title(\"Speed-Defense Line Plot\")\nplt.legend()\nplt.show()","58c14910":"pokemon_data.plot(kind = \"scatter\", x = \"Attack\", y = \"Defense\", color = \"orange\")\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Defence\")\nplt.title(\"Attack vs Defense Scatter Plot\")\nplt.legend()\nplt.show()","e69fb440":"plt.figure(4)\npokemon_data.Speed.plot(kind = \"hist\", color = \"green\", bins = 80)\nplt.xlabel(\"Speed\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Pokemon Data Speed Visualization\")\nplt.show()","30711ed8":"series = pokemon_data[\"Defense\"]\nprint(type(series))","4fb04499":"data_frame = pokemon_data[[\"Defense\"]]\nprint(type(data_frame))","d6f4e705":"defense_bigger_200 = pokemon_data[pokemon_data.Defense > 200]\nprint(defense_bigger_200)","3dc9080f":"defense_bigger_200_and_attack_bigger_100 = pokemon_data[(pokemon_data[\"Defense\"]>200) & (pokemon_data[\"Attack\"]>100)]\n# defense_bigger_200_and_attack_bigger_100 = pokemon_data[np.logical_and(pokemon_data[\"Defense\"] > 200, pokemon_data[\"Attack\"] > 100)]\nprint(defense_bigger_200_and_attack_bigger_100)","c07b0126":"print(pokemon_data[\"Type 1\"].value_counts(dropna = \"False\"))","04373a7e":"print(pokemon_data[\"Type 2\"].value_counts(dropna = \"False\"))","581abba8":"print(pokemon_data.describe())","604653cb":"pokemon_data.boxplot(column = \"Attack\", by = \"Legendary\")\nplt.show()","cf25e416":"pokemon_data.boxplot(column = \"Speed\", by = \"Legendary\")","7348dd45":"pokemon_data.boxplot(column = \"Speed\", by = \"Generation\")","5856d808":"first_part = pokemon_data.head()\nprint(first_part)","4975d116":"melting_data = pd.melt(frame = first_part, id_vars = \"Name\", value_vars = [\"Attack\", \"Speed\"])","b8dbe1b0":"print(melting_data)","a651b67a":"data_head = pokemon_data.head()\ndata_tail = pokemon_data.tail()","85818663":"concatted_data_ver = pd.concat([data_head, data_tail], axis = 0)","9aec7e0c":"print(concatted_data_ver)","6cb7d84b":"concatted_data_hor = pd.concat([data_head,data_tail], axis = 1)\nprint(concatted_data_hor)","3a59417a":"pokemon_data[\"Speed\"] = pokemon_data[\"Speed\"].astype(\"float\")","393a3b9a":"print(pokemon_data[\"Type 2\"].value_counts(dropna = False))\npokemon_data.dropna()\nwithout_NaN = pokemon_data.dropna()","92b9bcaf":"print(without_NaN)","adf2f309":"**Diagnosing and cleaning data**","21008b2f":"Now we have 414 rows. Because \"dropna()\"method drops all rows, which has missing values(NaN)","99464d64":"In the graph, circles are outliers.","cdd09735":"* Diagnosing data means detecting data. Sometimes we have some\n* unwanted(or unclean) values in data, corruptions or missing data (nan).\n* We should handle them. ","9d33c810":"* Concatenating Data (Vertically):\n","40d857a8":"* With \"corr()\" method, we can see the correlation between variables.\n* These correlation can be between -1 and 1.\n* Also we can show these correlations using heat map.( Colorfull version) \n* Correlation between 0 and 1 => positive coorelation\n* Correlation between -1 and 0 => negative correlation","b5f32a99":"* Concatenating Data (Horizontally):","90d31209":"For printing the frequency of pokemon types: ","3b8d1ced":"* Median (quantile 50%) -> middle number of the list\n* Lower quartile (quantile 25%)-> the median between the smallest number and the median.\n* Upper quartile (quantile 75%) -> the median between the largest number and the median.\n\n* Outliers (Ayk\u0131r\u0131): If a value is very higher or lower from remaining part of the list.\n\n* IQR(Outlier) = | Upper quantile - Lower quantile|\n\n* \"describe()\" method gives statistical values of the data\n","54065f9b":"* missing data -> NaN","e4ba4cc3":"* If our x axis is time or sample, generally we use line plot.\n* If we try to understand, there is a correlation between variables or not, we use scatter plot.\n* To understand data distribution, we use histogram plot.\n","c1b422e2":"To get some information our data, we use \"info()\" sunction.","b5082441":"* frame -> Which data we are going to melt.\n* id_vars -> value which remains constant.\n* value_vars -> which varibles we want to see.","e6e0aa4f":"# SCATTER PLOT","373fc026":"We plotted pokemon's attack, according to their legendary.\n","75b4f84c":"* axis = 0 means, vertically concate them.\n","f67d2052":"* \"**pandas**\" library is used for reading csv file.\n* Also this line changes our data type from str800 to DataFrame.","05fa4550":"# HISTOGRAM","fb07179e":"**Tidy Data**","507153f2":"* annot True -> for making numbers visible.\n* linewidth -> width between squares.\n* fnt -> After dot, how many numbers can we see","edcd6bb7":"* We have different data types. For example series and DataFrame.\n* Series are like 1 dimension arrays.","9c01b3d5":"* We use correlation map to understand the relation between variables inside our data.\n* If we have 2 features and the correrlation is 1, it means these variables have positive correlation between each other**. \n","12fcaf59":"shows, which features our data have.","05dbfbeb":"# LINE PLOT","251bd88a":"**Explotary Data Analysis (EDA)**"}}