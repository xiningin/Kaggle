{"cell_type":{"1046e35b":"code","7f7f3e3b":"code","5828ea81":"code","a99bd8e0":"code","56563868":"code","c5d80e36":"code","d2b1afea":"code","b31ebd4c":"code","0305635c":"code","01a2b18c":"code","ce31ddd2":"code","7042e4b5":"code","0335b62e":"code","73822bef":"code","4abad1f7":"code","6812cfb8":"code","958cc4de":"code","ccb2ba94":"code","ecd16801":"code","db6c45be":"code","89dd3d0d":"code","c7addf00":"code","25a39d23":"code","dce79ef1":"code","fc614e0a":"code","847735f8":"code","c2fd0c1b":"code","09f8e909":"code","c0c5fcd1":"code","836cb7d3":"code","60f164be":"code","2acdd04e":"code","cafcdf65":"code","e375cde6":"code","f08f905e":"code","6569acbe":"code","4412ddf3":"code","069bd9dc":"code","d9bbf69f":"code","c96d2239":"code","82e5f9ae":"code","ecd4ea62":"code","895e5d76":"code","582c3df0":"markdown","1eea6157":"markdown","09271125":"markdown","814b75a5":"markdown","ce61346a":"markdown","4974a20f":"markdown","fadbef6e":"markdown","701e7832":"markdown","36b2c9fb":"markdown","0ccf77f0":"markdown","e693c349":"markdown","ccc1c167":"markdown","3074dd42":"markdown","bc7f90b5":"markdown","2735e9bc":"markdown","d5f94121":"markdown","45cefdf8":"markdown","c63970e4":"markdown","805e47ea":"markdown","185b1714":"markdown","5f811da4":"markdown","e12e346f":"markdown","587d75ec":"markdown","e5149dc8":"markdown","75af3847":"markdown","55db0e83":"markdown","0c8d7663":"markdown","dc22b1a7":"markdown","9fa676d6":"markdown","b0d71d88":"markdown","f48e586c":"markdown","9e418574":"markdown","f5090f1a":"markdown"},"source":{"1046e35b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore')\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio.SeqUtils import GC\nfrom collections import Counter\nfrom Bio import pairwise2\nfrom Bio.pairwise2 import format_alignment\ncovid = SeqIO.read('\/kaggle\/input\/covid19-genbank-file\/sequence.gb.txt', \"genbank\")\nrecord = SeqIO.read('\/kaggle\/input\/covid19-genbank-file\/sequence.gb.txt', \"genbank\")\nebola = SeqIO.read('\/kaggle\/input\/ebola-dataset\/sequence(1).gb', \"genbank\")\nrecord = SeqIO.read('\/kaggle\/input\/ebola-dataset\/sequence(1).gb', \"genbank\")\nsars = SeqIO.read('\/kaggle\/input\/sars-coronavirus-tor2\/sequence(3).gb', \"genbank\")\nrecord = SeqIO.read('\/kaggle\/input\/sars-coronavirus-tor2\/sequence(3).gb', \"genbank\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f7f3e3b":"covid = SeqIO.read('\/kaggle\/input\/covid19-genbank-file\/sequence.gb.txt', \"genbank\")\nebola = SeqIO.read('\/kaggle\/input\/ebola-dataset\/sequence(1).gb', \"genbank\")\nsars = SeqIO.read('\/kaggle\/input\/sars-coronavirus-tor2\/sequence(3).gb', \"genbank\")","5828ea81":"# Convert to Extract only the neucleotides\n\nSeqRecord(covid)\nSeqRecord(ebola)\nSeqRecord(sars)\n\n\n\n","a99bd8e0":"# Convert to Extract only the neucleotides\ncovid_seq = covid.seq\nebola_seq = ebola.seq\nsars_seq = sars.seq","56563868":"print('- Covid-19 genome sequence:', len(covid_seq))\nprint('- Ebola genome sequence:', len(ebola_seq))\nprint('- Sars genome sequence:', len(sars_seq))","c5d80e36":"#Count the nucleotides frequency in the DNA\nDNA= covid\nnucleotides={}\nfor n in DNA:\n    if n in nucleotides:\n        nucleotides[n] += 1\n    else:\n        nucleotides[n] =  1\nprint(nucleotides)\n\n#Create a dataframe\nnucl= pd.DataFrame(data=nucleotides, index=[0]).T.reset_index()\nnucleo= nucl.rename(columns={0: 'frequency', 'index': 'nucleotides'})\nnucleotides=nucleo.sort_values(by=['frequency'], ascending=True)","d2b1afea":"#plot the nucleotides frequency\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(7,4))\na= nucleotides['frequency'].plot.bar(color=sns.color_palette('inferno',4), edgecolor='black')\nplt.xticks(rotation=5)\nplt.ylabel(\"Nucleotides frequency\", weight='bold')\nr=[0,1,2,3]\nplt.xticks(r, nucleotides.nucleotides, weight='bold')\nplt.xlabel(\"Nucleotides\", weight='bold', size=20)\nplt.title(\"COVID-19's nucleotides\", weight='bold', size=20)\nplt.show()\n\n","b31ebd4c":"#Count the nucleotides frequency in the DNA\nDNA= ebola\nnucleotides={}\nfor n in DNA:\n    if n in nucleotides:\n        nucleotides[n] += 1\n    else:\n        nucleotides[n] =  1\nprint(nucleotides)\n\n#Create a dataframe\nnucl= pd.DataFrame(data=nucleotides, index=[0]).T.reset_index()\nnucleo= nucl.rename(columns={0: 'frequency', 'index': 'nucleotides'})\nnucleotides=nucleo.sort_values(by=['frequency'], ascending=True)","0305635c":"#plot the nucleotides frequency\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(7,4))\na= nucleotides['frequency'].plot.bar(color=sns.color_palette('seismic',4), edgecolor='black')\nplt.xticks(rotation=5)\nplt.ylabel(\"Nucleotides frequency\", weight='bold')\nr=[0,1,2,3]\nplt.xticks(r, nucleotides.nucleotides, weight='bold')\nplt.xlabel(\"Nucleotides\", weight='bold', size=20)\nplt.title(\"Ebola's nucleotides\", weight='bold', size=20)\nplt.show()\n","01a2b18c":"#Count the nucleotides frequency in the DNA\nDNA= sars\nnucleotides={}\nfor n in DNA:\n    if n in nucleotides:\n        nucleotides[n] += 1\n    else:\n        nucleotides[n] =  1\nprint(nucleotides)\n\n#Create a dataframe\nnucl= pd.DataFrame(data=nucleotides, index=[0]).T.reset_index()\nnucleo= nucl.rename(columns={0: 'frequency', 'index': 'nucleotides'})\nnucleotides=nucleo.sort_values(by=['frequency'], ascending=True)\n\n","ce31ddd2":"#plot the nucleotides frequency\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(7,4))\na= nucleotides['frequency'].plot.bar(color=sns.color_palette('inferno',4), edgecolor='black')\nplt.xticks(rotation=5)\nplt.ylabel(\"Nucleotides frequency\", weight='bold')\nr=[0,1,2,3]\nplt.xticks(r, nucleotides.nucleotides, weight='bold')\nplt.xlabel(\"Nucleotides\", weight='bold', size=20)\nplt.title(\"Sars's nucleotides\", weight='bold', size=20)\nplt.show()","7042e4b5":"print('- Covid-19: ')\nprint(GC(covid_seq))\n\nprint('- Ebola: ')\nprint(GC(ebola_seq))\n\nprint('- Sars: ')\nprint(GC(sars_seq))","0335b62e":"# Transcription of covid ( DNA to mRNA)\ncovid_mRNA = covid_seq.transcribe()\ncovid_mRNA","73822bef":"# Transcription of ebola ( DNA to mRNA)\n\nebola_mRNA = ebola_seq.transcribe()\nebola_mRNA","4abad1f7":"# Transcription of sars ( DNA to mRNA)\n\nsars_mRNA = sars_seq.transcribe()\nsars_mRNA","6812cfb8":"# Translation of covid ( mRNA to Protein)\ncovid_protein = covid_mRNA.translate()\nprint(covid_protein[:70])","958cc4de":"print(f\"Covid-19's genome has {len(covid_protein)} amino acids\")","ccb2ba94":"Proteins = covid_protein.split('*')\nProteins[:5]","ecd16801":"print(f'We have {len(Proteins)} amino acid chains in the covid-19 genome')","db6c45be":"for i in Proteins[:]:\n    if len(i) < 70:\n        Proteins.remove(i)","89dd3d0d":"print(f'We have {len(Proteins)} proteins with  more than 70 amino acids in the covid-19 genome')","c7addf00":"proteinas=pd.DataFrame(Proteins)\nproteinas['amino acid sequence'] = proteinas[0].apply(str)\nproteinas['Protein length'] = proteinas[0].apply(len)\nproteinas.rename(columns={0: \"sequence\"}, inplace=True)\npro=proteinas.drop('sequence', axis=1)\npro= pro.sort_values(by=['Protein length'], ascending=False)","25a39d23":"import seaborn as sns\n\ncm = sns.light_palette(\"red\", as_cmap=True)\n\nr = pro.style.background_gradient(cmap=cm)\nr","dce79ef1":"# Translation of ebola ( mRNA to Protein)\nebola_protein = ebola_mRNA.translate()\nprint(ebola_protein[:70])","fc614e0a":"print(f\"Ebola's genome has {len(ebola_protein)} amino acids\")","847735f8":"Protein = ebola_protein.split('*')\nProtein[:5]","c2fd0c1b":"print(f'We have {len(Protein)} amino acid chains in the Ebola genome')","09f8e909":"for i in Protein[:]:\n    if len(i) < 70:\n        Protein.remove(i)","c0c5fcd1":"print(f'We have {len(Protein)} proteins with  more than 70 amino acids in the ebola genome')","836cb7d3":"proteinas=pd.DataFrame(Protein)\nproteinas['amino acid sequence'] = proteinas[0].apply(str)\nproteinas['Protein length'] = proteinas[0].apply(len)\nproteinas.rename(columns={0: \"sequence\"}, inplace=True)\npro1=proteinas.drop('sequence', axis=1)\npro2= pro1.sort_values(by=['Protein length'], ascending=False)","60f164be":"import seaborn as sns\n\ncm = sns.light_palette(\"red\", as_cmap=True)\n\nr = pro2.style.background_gradient(cmap=cm)\nr","2acdd04e":"# Translation of sars ( mRNA to Protein)\nsars_protein = sars_mRNA.translate()\nprint(sars_protein[:70])\nprint(f\"Sars's genome has {len()} amino acids\")","cafcdf65":"# Check for the count of Amino acids\ncovid_freq = Counter(covid_protein)\nplt.bar(covid_freq.keys(),covid_freq.values())\n\n","e375cde6":"# Check for the count of Amino acids\nebola_freq = Counter(ebola_protein)\nplt.bar(ebola_freq.keys(),ebola_freq.values())","f08f905e":"# Check for the count of Amino acids\nsars_freq = Counter(sars_protein)\nplt.bar(sars_freq.keys(),sars_freq.values())","6569acbe":"Counter(covid_protein).most_common(10)\n\n","4412ddf3":"Counter(ebola_protein).most_common(10)","069bd9dc":"Counter(sars_protein).most_common(10)","d9bbf69f":"cov= covid_seq[0:10]\neb = ebola_seq[0:10]\nsar= sars_seq[0:10]\n","c96d2239":"Al1 = pairwise2.align.globalxx(cov,sar,score_only=True, one_alignment_only=True)\nAl2= pairwise2.align.globalxx(cov,eb,score_only=True, one_alignment_only=True)\nAl3= pairwise2.align.globalxx(sar,eb,score_only=True, one_alignment_only=True)\nprint('The Alignement between Covid-19 and Sars:',Al1)\nprint('The Alignement between Covid-19 and Ebola:',Al2)\nprint('The Alignement between Sars and Ebola:',Al3)","82e5f9ae":"Al=pairwise2.align.globalxx(cov,eb)\nAl","ecd4ea62":"Ali=pairwise2.align.globalxx(cov,sar)\nAli","895e5d76":"Ali=pairwise2.align.globalxx(eb,sar)\nAli","582c3df0":"        6.3) Sars","1eea6157":"\n#                                                                                 Comparative Data Analysis: Covid-19,Sars and Ebola\n\n\n\n\n\n\n\n# 1) The length of genome sequences of Covid-19, Ebola and Sars viruses.\n\n\n# 2) The nucleotides frequency in the DNA of : Covid-19, Sars and Ebola.\n\n\n# 3) GC percentage : Which virus has the most stable DNA?\n\n\n# 4) Transcription And Translation.\n\n\n# 5) The count of Amino acids In : Covid-19, Sars and Ebola.\n\n\n# 6) 10 Most common amino acids In : Covid-19, Sars and Ebola.\n\n\n# 7) Alignment between Covid-19, Sars and Ebola genome sequences.","09271125":"               7.2) The alignment between Covid-19 and sars","814b75a5":"We can see the alignments below:","ce61346a":"# 4.2) Translation of:\n\n                     4.2.a) Covid-19","4974a20f":"           6.1) Covid-19","fadbef6e":"                 1) Covid-19:","701e7832":"                          7.3) The alignment between Sars and Ebola","36b2c9fb":"                      4.2.b) Ebola","0ccf77f0":"                 7.1) The alignment between Covid-19 and Ebola","e693c349":"# 6) 10 Most common amino acids In :","ccc1c167":"# 5) The count of Amino acids In :","3074dd42":"                     4.3.c) sars","bc7f90b5":"#  2) The nucleotides frequency in the DNA of :","2735e9bc":"                        4.2.c) Sars","d5f94121":" \n          From the 3 plots above, we can observe:\n      \n      - The most present nucleotide in both Covid-19 ans Sars is Thymine while the most present nucleotide in Ebola is Adenine.\n      \n      - While Adenine and Thymine are the most present nucleotides in all of Covid-19, Ebola and Sars, the distribution still varies. We can observe that While there is a  big difference between the amount of Cytosine-Guanine(GC) and Adenine-Thymine(AT) in Both of Covid-19 and Sars, The amount of GC is pretty much close to AT which will lead us to assume that the GC percentage of Ebola virus is higher and thus the DNA of Ebola is more stable than that of Covid-19 and Sars. \n      \n      ","45cefdf8":"  - Because the genome sequences are too big, we will study the alignment of the first 20 bases of each of Covid-19, Ebola and Sars.","c63970e4":"# 3) GC percentage : Which virus has the most stable DNA?","805e47ea":"#              4.1) Transcription of: \n             \n             \n                  4.1.a) Covid-19","185b1714":"Dotplot","5f811da4":"                 3) Sars","e12e346f":"In all of Covd-19, Sars and Ebola, The three dominant amino acids are Leusine (L), Serine (S) and Threonine (T). \nNow let's study the 10 most common Amino Acids.","587d75ec":">                5.1) Covid-19","e5149dc8":"        6.2) Ebola","75af3847":"                   4.2.b) Ebola","55db0e83":"               2) Ebola","0c8d7663":"# 4) Transcription And Translation","dc22b1a7":"From the alignements above we can see how :\n       - the most aligned sequences and thus most similar are those of Covid-19 and Sars with the score 16\n       - Then comes Covid-19 and Ebola with the score 12 while Sars and Ebola has the lowest score 11.","9fa676d6":"              5.3) Sars","b0d71d88":"As It was assumed, Ebolavirus has the highest GC percentage of 45.50% which means it has the most stable DNA. Second comes Sars Virus with 40.76% of GC persentage, and the virus that has the least stable DNA is Covid-19 with 37.97%. And as we know, the stability of DNA is essential in order to resist change...","f48e586c":"#        1) The length of genome sequences of Covid-19, Ebola and Sars viruses:           ","9e418574":"  #              7) Alignment : Let's find out the similarities between genome sequences by checking the alignement of the subsequences.","f5090f1a":"                5.2) Ebola"}}