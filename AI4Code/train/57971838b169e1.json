{"cell_type":{"29126999":"code","8596223c":"code","109421dd":"code","88ee63e9":"code","e79dd066":"code","e563a1bb":"code","816b7128":"code","62f7353c":"code","da9e4fa5":"code","4d558a46":"code","477e78ec":"code","15e0cfd1":"code","01a34687":"code","2bb73619":"code","e6e0f269":"code","5918f97e":"code","d35305a9":"code","00855b68":"code","d75f8e27":"code","84b63096":"code","0da27697":"code","d1817c47":"code","4f284391":"code","df72791e":"code","7b5cc904":"code","86a786cd":"code","04ebc90d":"code","59a3c1a4":"code","66d2fb95":"code","92daa9ba":"code","07b2ae55":"code","034caff7":"code","aacb5592":"code","967d8064":"code","1b23e731":"code","51cb643d":"code","cdf28549":"code","09abdb33":"code","49e9ebeb":"code","8418146c":"code","e27e0881":"code","a6b647f1":"code","7bd27f87":"code","c6ec80a5":"code","27cd078e":"markdown","44b6ef87":"markdown","0066e18f":"markdown","e35ef510":"markdown","8d8606aa":"markdown","07570556":"markdown","c4ceeb9e":"markdown","929e9250":"markdown","acc904e8":"markdown","9bb1426d":"markdown","89edb22f":"markdown","e3795af1":"markdown","4a4d726f":"markdown","fb985d1b":"markdown","d1f5037f":"markdown","80149c6d":"markdown","ed05a8e5":"markdown"},"source":{"29126999":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8596223c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","109421dd":"df=pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')","88ee63e9":"df.head()","e79dd066":"(df.astype(np.object)==' ').any()","e563a1bb":"df[df['TotalCharges']==' ']","816b7128":"df=df[df['TotalCharges']!=' ']","62f7353c":"df.info()","da9e4fa5":"df['TotalCharges']=df['TotalCharges'].astype(float)","4d558a46":"df.info()","477e78ec":"plt.figure(figsize=(8,6))\nsns.set(style='whitegrid')\nsns.countplot(data=df, x='Churn')","15e0cfd1":"plt.figure(figsize=(15,9))\n\nplt.subplot(2,2,1)\nsns.barplot(data=df, x='Churn', y='TotalCharges')\n\nplt.subplot(2,2,2)\nsns.barplot(data=df, x='Churn', y='MonthlyCharges')\n\nplt.subplot(2,2,3)\nsns.barplot(data=df, x='Churn', y='tenure')\n\nplt.subplot(2,2,4)\nsns.barplot(data=df, x='Churn', y='SeniorCitizen')\n\nplt.xticks(rotation=45)","01a34687":"plt.figure(figsize=(12,7))\n\nplt.subplot(1,3,1)\nsns.boxplot(data=df, x='Churn', y='TotalCharges')\n\nplt.subplot(1,3,2)\nsns.boxplot(data=df, x='Churn', y='MonthlyCharges')\n\nplt.subplot(1,3,3)\nsns.boxplot(data=df, x='Churn', y='tenure')\n\nplt.xticks(rotation=45)","2bb73619":"df.describe()","e6e0f269":"plt.figure(figsize=(12,6))\ndf[df['Churn']=='Yes'].TotalCharges.plot(kind='hist', color='#ec641b',alpha=0.3, label='Churn=Yes')\ndf[df['Churn']=='No'].TotalCharges.plot(kind='hist',color='#0914bf', alpha=0.3, label='Churn=No')\nplt.legend()","5918f97e":"plt.figure(figsize=(12,6))\ndf[df['Churn']=='Yes'].MonthlyCharges.plot(kind='hist', color='#ec641b',alpha=0.3, label='Churn=Yes')\ndf[df['Churn']=='No'].MonthlyCharges.plot(kind='hist',color='#0914bf', alpha=0.3, label='Churn=No')\nplt.legend()","d35305a9":"plt.figure(figsize=(12,6))\ndf[df['Churn']=='Yes'].tenure.plot(kind='hist', color='#ec641b',alpha=0.3, label='Churn=Yes')\ndf[df['Churn']=='No'].tenure.plot(kind='hist',color='#0914bf', alpha=0.3, label='Churn=No')\nplt.legend()","00855b68":"df.info()","d75f8e27":"plt.figure(figsize=(25,20))\n\nsns.countplot(data=df, x='gender', hue='Churn')\nplt.subplot(3,5,1)\n\nsns.countplot(data=df, x='Partner', hue='Churn')\nplt.subplot(3,5,2)\n\nsns.countplot(data=df, x='Dependents', hue='Churn')\nplt.subplot(3,5,3)\n\nsns.countplot(data=df, x='PhoneService', hue='Churn')\nplt.subplot(3,5,4)\n\nsns.countplot(data=df, x='MultipleLines', hue='Churn')\nplt.subplot(3,5,5)\n\nsns.countplot(data=df, x='InternetService', hue='Churn')\nplt.subplot(3,5,6)\n\nsns.countplot(data=df, x='OnlineSecurity', hue='Churn')\nplt.subplot(3,5,7)\n\nsns.countplot(data=df, x='DeviceProtection', hue='Churn')\nplt.subplot(3,5,8)\n\nsns.countplot(data=df, x='TechSupport', hue='Churn')\nplt.subplot(3,5,9)\n\nsns.countplot(data=df, x='StreamingTV', hue='Churn')\nplt.subplot(3,5,10)\n\nsns.countplot(data=df, x='StreamingMovies', hue='Churn')\nplt.subplot(3,5,11)\n\nsns.countplot(data=df, x='Contract', hue='Churn')\nplt.subplot(3,5,12)\n\nsns.countplot(data=df, x='PaperlessBilling', hue='Churn')\nplt.subplot(3,5,13)\n\nsns.countplot(data=df, x='PaymentMethod', hue='Churn')\nplt.subplot(3,5,14)","84b63096":"df.drop('customerID', axis=1, inplace=True)\ndf.drop('Unnamed: 0', axis=1, inplace=True)","0da27697":"df['Churn']=df['Churn'].map({'Yes':1,'No':0})","d1817c47":"df.head()","4f284391":"ceat_feat=['gender','Partner', 'Dependents', 'PhoneService', 'MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod']","df72791e":"from category_encoders import OrdinalEncoder","7b5cc904":"ordinal_encoder=OrdinalEncoder(cols=ceat_feat, handle_missing='return_none')","86a786cd":"data=ordinal_encoder.fit_transform(df)","04ebc90d":"data.head()","59a3c1a4":"def corr_for_target(data, target, title=None):\n    plt.figure(figsize=(4,14))\n    sns.set(font_scale=1)\n    \n    sns.heatmap(data.corr()[[target]].sort_values(target, ascending=False)[1:], annot=True, cmap=\"coolwarm\")","66d2fb95":"corr_for_target(data,'Churn')","92daa9ba":"from sklearn.model_selection import train_test_split","07b2ae55":"X=data.drop('Churn', axis=1)","034caff7":"y=data['Churn']","aacb5592":"from imblearn.over_sampling import SMOTE","967d8064":"oversample=SMOTE()","1b23e731":"X, y=oversample.fit_resample(X, y)","51cb643d":"X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.3, random_state=123)","cdf28549":"from xgboost import XGBClassifier","09abdb33":"model=XGBClassifier()","49e9ebeb":"model.fit(X_train, y_train)","8418146c":"pred=model.predict(X_test)","e27e0881":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","a6b647f1":"accuracy_score(pred, y_test)","7bd27f87":"confusion_matrix(pred, y_test)","c6ec80a5":"print(classification_report(pred, y_test))","27cd078e":"**Churn yes and not convert to 1 & 0**","44b6ef87":"**Churn data need to data balanced**","0066e18f":"**Category related data visualization**","e35ef510":"**Remove the unclean data**","8d8606aa":"**Data type change**","07570556":"**Model accuracy**","c4ceeb9e":"**Import all necessary libray**","929e9250":"**All category related data display**","acc904e8":"**Figure out total churn data**","9bb1426d":"**Churn data corelation find**","89edb22f":"**Drop the customer ID column**","e3795af1":"**XGB Classifier algorithom apply**","4a4d726f":"**Apply the model selection train test split**","fb985d1b":"**Difference between churn yes and no**","d1f5037f":"**Churn data boxplot display**","80149c6d":"**Import data**","ed05a8e5":"**All category convert to encoder**"}}