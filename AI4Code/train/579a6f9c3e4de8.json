{"cell_type":{"e86013d4":"code","00ea0978":"code","1acf775a":"code","03fb786f":"code","e7e4c22d":"code","3d24afaf":"code","43ce7e54":"code","5d515af7":"code","5c750c87":"code","0b45a581":"code","42f261db":"code","fdae2723":"code","ca15fcb0":"code","fd7b9744":"code","cde95027":"code","15e9e2c7":"code","cafd5494":"code","56cdb83f":"code","1288c697":"code","37806559":"markdown","1481e65d":"markdown","5dd6b744":"markdown","669aa813":"markdown","8d61c3ba":"markdown","a0032313":"markdown","fc8d3024":"markdown","53426cb8":"markdown"},"source":{"e86013d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","00ea0978":"import tensorflow as tf","1acf775a":"mnist_input_train = pd.read_csv('..\/input\/train.csv')\nmnist_input_test = pd.read_csv('..\/input\/test.csv')","03fb786f":"print(mnist_input_train.info())","e7e4c22d":"X_train = np.array(mnist_input_train)[:, 1:785]\ny_train = np.array(mnist_input_train)[:, 0]\nprint(X_train.shape)\nprint(y_train.shape)\n\nX_test = np.array(mnist_input_test)[:, :]\nprint(X_test.shape)","3d24afaf":"X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)","43ce7e54":"X_train.shape","5d515af7":"input_shape = (28, 28, 1)\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')","5c750c87":"X_train \/= 255\nX_test \/= 255","0b45a581":"print('x_train shape:', X_train.shape)\nprint('Number of images in x_train', X_train.shape[0])\nprint('Number of images in x_test', X_test.shape[0])","42f261db":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D","fdae2723":"model = Sequential()\nmodel.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=tf.nn.relu))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation=tf.nn.softmax))","ca15fcb0":"y_train.shape","fd7b9744":"model.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])\n","cde95027":"model.fit(x=X_train,y=y_train, epochs=10)","15e9e2c7":"import matplotlib.pyplot as plt\n%matplotlib inline","cafd5494":"image_index = 4444\nplt.imshow(X_test[image_index].reshape(28, 28),cmap='Greys')\npred = model.predict(X_test[image_index].reshape(1, 28, 28, 1))\nprint(pred.argmax())","56cdb83f":"X_test.shape","1288c697":"predictions = model.predict_classes(X_test, verbose=1)\npd.DataFrame({\"ImageId\":list(range(1,len(predictions)+1)),\n              \"Label\":predictions}).to_csv(\"submission.csv\",\n                                           index=False,\n                                           header=True)","37806559":"# Predict from the Test data","1481e65d":"# Normalizing the data value to the range [0,1]","5dd6b744":"# Defining Model Architecture\n","669aa813":"# Reshaping the Train and Test data","8d61c3ba":"# Import Tensorflow Library","a0032313":"# Fit model on training data","fc8d3024":"# Compiling the model","53426cb8":"# Importing Keras libraries"}}