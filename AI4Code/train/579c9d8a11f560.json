{"cell_type":{"fac1e44c":"code","08ec5aa2":"code","6fb289d5":"code","d5394bdf":"code","0fec0233":"code","bb3125d6":"code","bf4418a2":"code","79ba87a7":"code","ca22d63d":"code","c1e2288d":"code","43f8b0ad":"code","a9b82aad":"code","3a56861a":"code","caba629c":"code","3f7edb27":"code","1ead6dee":"code","de0fcef8":"code","c7eaba67":"code","fe1de694":"code","0d5c6033":"code","74131ee7":"code","4744f53f":"code","895896b7":"code","3f232045":"code","4bafdf21":"code","984229b9":"code","e0f2ed3f":"code","f2e13f04":"code","34fd41c2":"code","aeca1e87":"code","38f6e393":"code","0311d8da":"code","238a0aec":"code","336414c0":"code","8f09158b":"code","948b8845":"code","72c72689":"code","798c9438":"code","bd994d65":"code","fc66bb7c":"code","f73a90b0":"code","6815009a":"code","00b953d7":"code","1b97116f":"code","ff96b5e9":"code","444fcd1e":"code","45e3afa4":"code","392ce493":"code","f54671b9":"code","e104382f":"code","622f839b":"code","917d2da4":"code","fac7eb86":"code","15cfe010":"code","b4e59e9d":"code","b9d6e5b1":"code","d6b0951a":"code","49d447ff":"code","2826c6c0":"code","6992b22b":"code","9022f81c":"code","15c57ee8":"code","62d318a2":"code","db35c088":"code","caddf341":"code","83bd350f":"code","eb1404a7":"code","793bf3f2":"code","88af7e60":"code","01c1d8f9":"code","7a1422ae":"code","1571898d":"code","aa3896f7":"code","0077b7a2":"markdown","95413c9a":"markdown","c5de9cde":"markdown","b48f05e4":"markdown","fb2acf1c":"markdown","f9e0c1fc":"markdown","19df624c":"markdown","affdf748":"markdown","1711776d":"markdown","f376667c":"markdown","bcf5ae4b":"markdown","23b48508":"markdown","ba4ebc5d":"markdown","877948fd":"markdown","077d0f52":"markdown","37087279":"markdown","40a95a75":"markdown","79ebb53f":"markdown","b4073bea":"markdown"},"source":{"fac1e44c":"from warnings import filterwarnings\nfilterwarnings('ignore')\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Lasso , LassoCV\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV","08ec5aa2":"# Hitters veri setini df_base isimli dataframe'e at\u0131yoruz.\nhitters=pd.read_csv(\"..\/input\/hittersds\/Hitters.csv\")\ndf_base=hitters.copy()\ndf_base.head()","6fb289d5":"# base dataframe'in kopyas\u0131n\u0131 al\u0131p, df_eda isimli dataframe'e at\u0131yoruz. Head ile veri setine bak\u0131yoruz.\ndf_eda = df_base.copy()\ndf_eda.head()","d5394bdf":"df_eda.tail()","0fec0233":"# info metotu ile veri setimize bak\u0131yoruz. \n# 20 de\u011f\u015fkeni olan 322 adet g\u00f6zlem mevcut veri setinde. \n# De\u011fi\u015fkenlerin 3 tanesinin(League , Division, NewLeague) veri tipi object, \n# 1 tanesi(Salary) float \n# di\u011ferleri ise int.\n# Salary haricinde NaN degeri olan de\u011fi\u015fken yok. \ndf_eda.info()","bb3125d6":"# Salary de\u011fi\u015fkeninde 59 adet NaN de\u011fer var.\ndf_eda.isnull().sum()","bf4418a2":"df_eda.dropna(inplace=True)","79ba87a7":"df_eda.describe().T","ca22d63d":"sns.distplot(df_eda.Salary,bins=50, kde = False);","c1e2288d":"# De\u011fi\u015fkenlerin birbirleri ile olan korelasyonuna bakal\u0131m.\n# CAtBat, CHits, CHmRun, CRuns ve CRBI de\u011fi\u015fkenlerinin salary ile korelasyonlar\u0131 di\u011fer de\u011fi\u015fkenlere g\u00f6re daha y\u00fcksek.\ndf_eda.corr()","43f8b0ad":"# \u015eimdi CAtBat, CHits, CHmRun, CRuns ve CRBI de\u011fi\u015fkenlerin salary'e kar\u015f\u0131 grafiklerine bakal\u0131m. Do\u011frusal bir ili\u015fki mevcut mu diye.","a9b82aad":"# Salary & CAtBat grafi\u011fini \u00e7izdirelim. Grafi\u011fe g\u00f6re do\u011frusal bir ili\u015fki oldu\u011funu s\u00f6yleyemeyiz.\nsns.lmplot(x=\"Salary\",y=\"CAtBat\",data=df_eda);","3a56861a":"# Salary & CHits grafi\u011fini \u00e7izdirelim. Grafi\u011fe g\u00f6re do\u011frusal bir ili\u015fki oldu\u011funu s\u00f6yleyemeyiz.\nsns.lmplot(x=\"Salary\",y=\"CHits\",data=df_eda);","caba629c":"# Salary & CHmRun grafi\u011fini \u00e7izdirelim. Grafi\u011fe g\u00f6re do\u011frusal bir ili\u015fki oldu\u011funu s\u00f6yleyemeyiz.\nsns.lmplot(x=\"Salary\",y=\"CHmRun\",data=df_eda);","3f7edb27":"# Salary & CRuns grafi\u011fini \u00e7izdirelim. Grafi\u011fe g\u00f6re do\u011frusal bir ili\u015fki oldu\u011funu s\u00f6yleyemeyiz.\nsns.lmplot(x=\"Salary\",y=\"CRuns\",data=df_eda);","1ead6dee":"# Salary & CRBI grafi\u011fini \u00e7izdirelim. Grafi\u011fe g\u00f6re do\u011frusal bir ili\u015fki oldu\u011funu s\u00f6yleyemeyiz.\nsns.lmplot(x=\"Salary\",y=\"CRBI\",data=df_eda);","de0fcef8":"# Years de\u011fi\u015fkenini de kullan\u0131p, years baz\u0131nda CRBI ile Salary aras\u0131nda nas\u0131l bir ili\u015fki oldu\u011funu inceleyelim.","c7eaba67":"#Years de\u011fi\u015fkenini kategorik bir de\u011fi\u015fkene d\u00f6n\u00fc\u015ft\u00fcr\u00fcp, Years Group ad\u0131 ile dataframe ekliyoruz.\ndf_eda[\"Years Group\"] = pd.cut(df_eda.Years,bins=[0,4,8,16,24],labels=['0-4','4-8','8-16','16-24'])","fe1de694":"sns.lmplot(x=\"Salary\",y=\"CRBI\", hue=\"Years Group\", data=df_eda);","0d5c6033":"# Years Group ile Salary aras\u0131nda da net bir do\u011frusal ili\u015fkiden bahsetmek zor. Evet y\u0131l artt\u0131k\u00e7a \u00fccretlerde artma meydana geliyor ama 16-24 aral\u0131\u011f\u0131 \n# en y\u00fcksek \u00fccreti alm\u0131yor. \nsns.catplot(x=\"Years Group\", y=\"Salary\", data=df_eda)","74131ee7":"# CRBI de\u011fi\u015fkenini de kategorik bir de\u011fi\u015fken yap\u0131p \u00fc\u00e7 de\u011fi\u015fkene bakal\u0131m. \ndf_eda[\"CRBI Group\"] = pd.cut(df_eda.CRBI,bins=[0,95.0,230.0,424.5,1659.0],labels=['First_Q','Second_Q','Third_Q','High'])","4744f53f":"# CRBI nin artmas\u0131 ile beraber Salary de art\u0131yor ama net bir do\u011frusal ili\u015fki mevcut de\u011fil.\nsns.catplot(x=\"CRBI Group\", y=\"Salary\", hue=\"Years Group\", data=df_eda, palette=[\"Blue\",\"Red\",\"Yellow\",\"Black\"])","895896b7":"# CRuns de\u011fi\u015fkeninede ayn\u0131 i\u015flemi uygulayal\u0131m.\ndf_eda[\"CRuns Group\"] = pd.cut(df_eda.CRBI,bins=[0,105.5,250.0,497.5,2165.0],labels=['First_Q','Second_Q','Third_Q','High'])","3f232045":"# Sonuc CRBI ile ayn\u0131 diyebiliriz.\nsns.catplot(x=\"CRuns Group\", y=\"Salary\", hue=\"Years Group\", data=df_eda, palette=[\"Blue\",\"Red\",\"Yellow\",\"Black\"])","4bafdf21":"# Daha \u00f6nce kendi olu\u015fturmu\u015f oldu\u011fumuz kategorik de\u011fi\u015fkenleri drop edelim.\ndf_eda = df_eda.drop(['Years Group','CRBI Group','CRuns Group'], axis=1)","984229b9":"# Dataset i\u00e7indeki de\u011fi\u015fken tiplerine bakal\u0131m\ndf_eda.dtypes","e0f2ed3f":"#Object tipleri kategorik yapacag\u0131z.\ndf_eda.League = pd.Categorical(df_eda.League)\ndf_eda.Division = pd.Categorical(df_eda.Division)\ndf_eda.NewLeague = pd.Categorical(df_eda.NewLeague)","f2e13f04":"df_eda.select_dtypes(include=[\"category\"]).head()","34fd41c2":"# Unique degerleri buluyoruz.\nprint(\"League \",df_eda.League.unique())\nprint(\"Division \",df_eda.Division.unique())\nprint(\"NewLeague \",df_eda.NewLeague.unique())","aeca1e87":"# Kategorik de\u011fi\u015fkenlerin frekanslar\u0131na bak\u0131yoruz.\n# Legaue ve NewLeague de\u011fi\u015fkenleri aras\u0131nda fark oldu\u011funu g\u00f6rd\u00fck.\nprint(\"Division\\n\",df_eda.Division.value_counts())\nprint(\"League\\n\",df_eda.League.value_counts())\nprint(\"NewLeague\\n\",df_eda.NewLeague.value_counts())","38f6e393":"#League ve NewLeague say\u0131lar\u0131 lig baz\u0131da farkl\u0131l\u0131k g\u00f6steriyor. Baz\u0131 oyuncular lig de\u011fi\u015ftirmi\u015fe benziyor. Bunlara bakal\u0131m.\n# N liginden A ligine ge\u00e7en oyunculara bak\u0131yoruz.\ndf_eda[((df_eda[\"League\"] == \"N\") & (df_eda[\"NewLeague\"] == \"A\"))]","0311d8da":"# A liginden N ligine ge\u00e7en oyunculara bak\u0131yoruz.\ndf_eda[((df_eda[\"League\"] == \"A\") & (df_eda[\"NewLeague\"] == \"N\"))]","238a0aec":"# A ligi N ligine gore bir t\u0131k daha kaliteli bir lige benziyor.\ndf_eda.groupby(\"League\").aggregate([\"mean\",\"min\",\"max\"])","336414c0":"# E division\u0131nda ucretler W'e gore daha iyi\ndf_eda.groupby(\"Division\")[\"Salary\"].aggregate([\"mean\",\"min\",\"max\",\"median\"])","8f09158b":"# W division'\u0131nda salary de\u011feri 0-500 olan daha fazla g\u00f6zlem mevcut.\n(sns\n .FacetGrid(df_eda, \n               hue=\"Division\", \n               height=5,\n               xlim=(0,3000))\n .map(sns.kdeplot,\"Salary\",shade=True)\n .add_legend() # cut kategorilerinin yaz\u0131lmas\u0131n\u0131 istiyoruz\n);","948b8845":"df_model = df_base.copy()","72c72689":"df_model.isnull().sum()","798c9438":"df_model.groupby(\"Division\")[\"Salary\"].aggregate([\"mean\"])","bd994d65":"# Nan salary degerlerini, division ve years gruplar\u0131 uzerinden dolduruyoruz. E division\u0131 salary degerleri W divisiondan daha yuksek. Ayr\u0131ca years'\u0131nda\n# az da olsa salary ile bir ili\u015fkisi mevcut. Bu sebeple iki de\u011fi\u015fkeni gruplad\u0131m.\ndf_model['Salary'] = df_model.groupby(['Division','Years'])['Salary'].transform(lambda x: x.fillna(x.mean()))\n# W division'\u0131nda dolmayan bir deeri ortalama ile dolduruyorum.\ndf_model[\"Salary\"].fillna(450.876873, inplace=True)\n\ndf_model = pd.get_dummies(df_model ,columns=[\"League\",\"Division\",\"NewLeague\"],drop_first=True)\n\n# C ile ba\u015flayan de\u011fi\u015fkenler oyuncunun kariyeri boyunca yapt\u0131\u011f\u0131 istatistiki de\u011ferlerdir. Oyuncular\u0131n beyzbol oyand\u0131klar\u0131 s\u00fcre farkl\u0131 oldu\u011fundan (Years) istatistiki\n# veriler aras\u0131nda b\u00fcy\u00fck farklar bulunmaktad\u0131r. Bu sebeple y\u0131ll\u0131k ortalamalar\u0131n\u0131 alarak her oyuncu i\u00e7in de\u011fi\u015fkenleri ayn\u0131 \u00f6l\u00e7ekte ifade ettik. \ndf_model[\"AtBat Per Year\"] = df_model[\"CAtBat\"] \/ df_model[\"Years\"]\ndf_model[\"Hits Per Year\"] = df_model[\"CHits\"] \/ df_model[\"Years\"]\ndf_model[\"HmRun Per Year\"] = df_model[\"CHmRun\"] \/ df_model[\"Years\"]\ndf_model[\"Runs Per Year\"] = df_model[\"CRuns\"] \/ df_model[\"Years\"]\ndf_model[\"CRBI Per Year\"] = df_model[\"CRBI\"] \/ df_model[\"Years\"]\ndf_model[\"Walks Per Year\"] = df_model[\"CWalks\"] \/ df_model[\"Years\"]\n# Yeni de\u011fi\u015fkenlerden sonra bunlar\u0131 drop ediyoruz.\ndf_model.drop([\"CAtBat\",\"CHits\",\"CHmRun\",\"CRuns\",\"CRBI\",\"CWalks\"],axis=1, inplace=True)","fc66bb7c":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import LocalOutlierFactor","f73a90b0":"clf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df_model)\noutlier_scores = clf.negative_outlier_factor_\noutlier_scores_sorted = np.sort(outlier_scores)\noutlier_scores_sorted[0:50]","6815009a":"# Outlier skorlar\u0131m\u0131z\u0131 bulduk. Bu de\u011ferler i\u00e7erisinden bir e\u015fik de\u011fer belirlememiz gerekiyor. \ndf_outlier_scores = pd.DataFrame(outlier_scores_sorted)\ndf_outlier_scores.plot(style=\".-\", stacked=True, yticks = [-2.0,-1.9,-1.8,-1.7,-1.6,-1.5,-1.4,-1.3,-1.2,-1.0,-0.9], figsize=(15,20));","00b953d7":"#plt.rcParams['figure.figsize'] = (20.0, 10.0)\n#sns.boxplot(df_outlier_scores)","1b97116f":"esik_deger = outlier_scores_sorted[11]\nesik_deger","ff96b5e9":"esik_gozlem = df_model[outlier_scores == esik_deger]\naykirilar = df_model[outlier_scores < esik_deger]\nesik_gozlem","444fcd1e":"# ayk\u0131r\u0131 gozlemleri indexlerinden kurtar\u0131p bir recarray i\u00e7erisine att\u0131k.\nres = aykirilar.to_records(index= False)\n# t\u00fcm aykiri degerleri esik_gozlem ile ezdik.\nres[:] = esik_gozlem.to_records(index=False)","45e3afa4":"# d\u00fczenlenen aykiri gozlemlerin oldugu res recarray'i aykirilar dataframe'inin indexleri ile beraber bir dataframe yap\u0131p as\u0131l dataframe de\u011ferlerimizi g\u00fcncelledik.\ndf_model[outlier_scores < esik_deger] = pd.DataFrame(res, index = aykirilar.index)","392ce493":"df_model[outlier_scores < esik_deger]","f54671b9":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score","e104382f":"X = df_model.drop('Salary', axis=1)\ny = df_model[[\"Salary\"]]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","622f839b":"y_pred = reg_model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nrmse","917d2da4":"np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))","fac7eb86":"#test hatasi\nnp.sqrt(mean_squared_error(y_test, y_pred))","15cfe010":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import StandardScaler","b4e59e9d":"X = df_model.drop('Salary', axis=1)\ny = df_model[[\"Salary\"]]\n\nscaled_features = X[[\"AtBat\",\"Hits\",\"HmRun\",\"Runs\",\"RBI\",\"Walks\",\"Years\",\"PutOuts\",\"Assists\",\"Errors\",\"AtBat Per Year\",\"Hits Per Year\",\"HmRun Per Year\",\"Runs Per Year\",\"CRBI Per Year\",\"Walks Per Year\"]]\ncategoric_features = X[[\"League_N\",\"Division_W\",\"NewLeague_N\"]]\n\ncols = scaled_features.columns\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(scaled_features)\nX_scaled = pd.DataFrame(X_scaled, columns = cols)\n\nX_scaled = pd.concat([X_scaled, categoric_features], axis=1, join=\"inner\")\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nridge_model=Ridge().fit(X_train,y_train)","b9d6e5b1":"y_pred=ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test,y_pred))","d6b0951a":"ridge_model.coef_","49d447ff":"from sklearn.linear_model import RidgeCV\nalphas1 = np.random.randint(0,1000,1000)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)","2826c6c0":"ridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)","6992b22b":"ridge_cv.fit(X_train, y_train)","9022f81c":"ridge_cv.alpha_","15c57ee8":"ridge_tuned = Ridge(alpha = 0.005).fit(X_train, y_train)\ny_pred = ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","62d318a2":"from sklearn.linear_model import Lasso , LassoCV\nfrom sklearn.preprocessing import StandardScaler","db35c088":"X = df_model.drop('Salary', axis=1)\ny = df_model[[\"Salary\"]]\n\nscaled_features = X[[\"AtBat\",\"Hits\",\"HmRun\",\"Runs\",\"RBI\",\"Walks\",\"Years\",\"PutOuts\",\"Assists\",\"Errors\",\"AtBat Per Year\",\"Hits Per Year\",\"HmRun Per Year\",\"Runs Per Year\",\"CRBI Per Year\",\"Walks Per Year\"]]\ncategoric_features = X[[\"League_N\",\"Division_W\",\"NewLeague_N\"]]\n\ncols = scaled_features.columns\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(scaled_features)\nX_scaled = pd.DataFrame(X_scaled, columns = cols)\n\nX_scaled = pd.concat([X_scaled, categoric_features], axis=1, join=\"inner\")\n\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nlasso_model = Lasso().fit(X_train, y_train)","caddf341":"y_pred = lasso_model.predict(X_test)","83bd350f":"np.sqrt(mean_squared_error(y_test, y_pred))","eb1404a7":"lasso_cv_model = LassoCV(alphas = alphas2, cv = 10).fit(X_train, y_train)","793bf3f2":"lasso_cv_model.alpha_","88af7e60":"lasso_tuned = Lasso(alpha = 3.0679536367065814).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","01c1d8f9":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV\n\nX = df_model.drop('Salary', axis=1)\ny = df_model[[\"Salary\"]]\n\nscaled_features = X[[\"AtBat\",\"Hits\",\"HmRun\",\"Runs\",\"RBI\",\"Walks\",\"Years\",\"PutOuts\",\"Assists\",\"Errors\",\"AtBat Per Year\",\"Hits Per Year\",\"HmRun Per Year\",\"Runs Per Year\",\"CRBI Per Year\",\"Walks Per Year\"]]\ncategoric_features = X[[\"League_N\",\"Division_W\",\"NewLeague_N\"]]\n\ncols = scaled_features.columns\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(scaled_features)\nX_scaled = pd.DataFrame(X_scaled, columns = cols)\n\nX_scaled = pd.concat([X_scaled, categoric_features], axis=1, join=\"inner\")\n\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nenet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","7a1422ae":"elasticNet_cv_model = ElasticNetCV(alphas = alphas2, cv = 10).fit(X_train, y_train)","1571898d":"elasticNet_cv_model.alpha_","aa3896f7":"elasticNet_tuned = ElasticNet(alpha = 0.10772173450159389).fit(X_train, y_train)\ny_pred = elasticNet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","0077b7a2":"# Data Preparation","95413c9a":"### Model Tunning","c5de9cde":"### Tunning","b48f05e4":"### Model","fb2acf1c":"Salary de\u011fi\u015fkeninin yo\u011funluk grafi\u011fine bakal\u0131m.\n* Salary yo\u011funlu\u011funun 0 ile 1000 aras\u0131nda ve gittik\u00e7e azalan miktarda oldu\u011funu g\u00f6rebiliriz.","f9e0c1fc":"### Tunning","19df624c":"### Tahmin","affdf748":"### Tunned Model","1711776d":"# \u00c7oklu Do\u011frusal Regresyon","f376667c":"Hitters veri seti \u00fczerinde s\u0131ras\u0131 ile\n* Ke\u015fif\u00e7i Veri Analizi\n* Veri \u00f6nhaz\u0131rlama (Ayk\u0131r\u0131 g\u00f6zlem, eksik veri)\n* Model Kurma\n* Model Tunning\n* Rapor\n\ni\u015flemlerini yapaca\u011f\u0131z. \n\nHitter veri seti, 1986 sezonuna ait beyzbol verilerini i\u00e7erir. (NewLeague de\u011fi\u015fkeni 1987)","bcf5ae4b":"# Ridge Regression","23b48508":"### Ayk\u0131r\u0131 G\u00f6zlem\n* \u00c7oklu de\u011fi\u015fkenimiz oldu\u011fu i\u00e7in LocalOutlierFactor ile ayk\u0131r\u0131 g\u00f6zlemlerimizi analiz edece\u011fiz. LocalOutlierFactor ile olu\u015fan outlier skorlar\u0131nda bir e\u015fik de\u011fer belirleyece\u011fiz. Bu de\u011ferin alt\u0131 veya \u00fcst\u00fcn\u00fc ayk\u0131r\u0131 g\u00f6zlem kabul edece\u011fiz. Bu ayk\u0131r\u0131 g\u00f6zlemlere ise bask\u0131lama y\u00f6ntemi ile e\u015fik de\u011ferin ait oldu\u011fu g\u00f6zlemi atayaca\u011f\u0131z. E\u015fik de\u011feri bulurken grafikten yard\u0131m ald\u0131k.","ba4ebc5d":"## Ke\u015fif\u00e7i Veri Analizi","877948fd":"### Do\u011frulama - K-Fold CV ","077d0f52":"##Sonuc\n* 20 de\u011fi\u015fkeni olan 322 adet g\u00f6zleme sahip bir veri setimiz mevcut. \n* De\u011fi\u015fkenlerin 3 tanesinin(League , Division, NewLeague) veri tipi object, 1 tanesi(Salary) float di\u011ferleri ise int.\n* Salary haricinde NaN degeri olan de\u011fi\u015fken yok. 59 adet g\u00f6zlemin salary de\u011feri NaN\n* Salary de\u011fi\u015fkeninin yo\u011funlu\u011fu 0 ile 1000 aras\u0131nda ve gittik\u00e7e azalan miktardad\u0131r.\n* De\u011fi\u015fkenlerin birbirleri ile olan korelasyonuna bakt\u0131\u011f\u0131m\u0131zda, CAtBat, CHits, CHmRun, CRuns ve CRBI de\u011fi\u015fkenlerinin salary ile korelasyonlar\u0131 di\u011fer de\u011fi\u015fkenlere g\u00f6re daha y\u00fcksek.\n* Salary'e kar\u015f\u0131 ilgili de\u011fi\u015fkenler ile ayr\u0131 ayr\u0131 \u00e7izdirilen lmplot grafiklerinde net bir do\u011frusal ili\u015fki olmad\u0131\u011f\u0131 g\u00f6zlemlendi.\n* Object veri tipindeki \u00fc\u00e7 de\u011fi\u015fkeni (League, NewLeague ve Division) kategorik de\u011fi\u015fken tipine \u00e7evirip inceledik.\n* Ligler aras\u0131 oyuncu ge\u00e7i\u015fleri oldu\u011funu g\u00f6zlemledik.\n* A ve N liglerinin betimsel istatistiklerini kar\u015f\u0131la\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda , A liginin N ligine gore bir t\u0131k daha kaliteli bir lig olabilece\u011fini d\u00fc\u015f\u00fcnd\u00fck.\n* Divisionlardaki Salarylerin min, max, mean ve median de\u011ferlerini bulduk ve E division\u0131nda ucretlerin W'e gore daha iyi oldu\u011funu g\u00f6zlemledik.\n* Division & Salary FacetGrid grafi\u011fi ile W division'\u0131nda salary de\u011feri 0-500 olan daha fazla g\u00f6zlemin mevcut oldu\u011funu g\u00f6rd\u00fck.","37087279":"# Lasso Regression","40a95a75":"### Tahmin","79ebb53f":"### Dataset i\u00e7indeki kategorik de\u011fi\u015fkenleri inceleyelim","b4073bea":"## Elastic Regression"}}