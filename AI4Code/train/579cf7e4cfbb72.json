{"cell_type":{"774e037f":"code","bb244920":"code","83c0e110":"code","b749bedd":"code","82d909a5":"code","3f962a96":"code","469500a6":"code","7b4078e4":"code","656b2666":"code","692a872d":"code","8875b1f3":"code","c71edf4a":"code","d53afa9a":"code","f7c5a807":"code","fe4d0088":"code","21bdc599":"code","12c226f2":"code","7f4c205e":"code","c5de7967":"code","c2d88547":"code","06dc0697":"code","168f24bd":"code","f2427940":"code","484067c4":"code","f75c7190":"code","ec10d0b5":"code","2d3e25ae":"code","57243980":"code","fdeff648":"code","42027f40":"code","36752ce1":"code","b0b2696c":"code","e5c46db9":"code","f552ea0b":"code","3ee81275":"code","c4dc751f":"code","6830b13a":"code","5becef5b":"code","e7824e91":"code","fca72730":"code","7eb2da99":"code","e4acc609":"markdown","74f09564":"markdown","b5f5f56b":"markdown"},"source":{"774e037f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #graphs\nimport seaborn as sn #graphs\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bb244920":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","83c0e110":"train","b749bedd":"target = train['Survived']","82d909a5":"print('Training data has shape:',train.shape)\nprint('Testing data has shape:',test.shape)","3f962a96":"train.info()","469500a6":"test.info()","7b4078e4":"train.describe()","656b2666":"train.isnull().sum()","692a872d":"test.isnull().sum()","8875b1f3":"print(train.groupby('Sex')['Survived'].value_counts())\nplt.style.use('seaborn')\nsn.countplot(x=train['Sex'],hue=train['Survived'])\nplt.show()","c71edf4a":"print(train.groupby('Sex')['Survived'].mean())\nplt.style.use('seaborn')\nsn.barplot(x=train['Sex'],y=train['Survived'])\nplt.show()","d53afa9a":"print(train.groupby('Pclass')['Survived'].value_counts())\nsn.countplot(x=train['Pclass'],hue=train['Survived'])\nplt.show()","f7c5a807":"print(train.groupby('Pclass')['Survived'].mean())\nsn.barplot(x=train['Pclass'],y=train['Survived'])\nplt.show()","fe4d0088":"print(train.groupby('Survived')['Age'].describe())\ns_fig = sn.FacetGrid(train,hue='Survived',aspect=5)\ns_fig.map(sn.kdeplot,'Age',shade=True)\ns_fig.add_legend()\nplt.show()","21bdc599":"print(train.groupby('Survived')['Fare'].describe())\ns_fig = sn.FacetGrid(train,hue='Survived',aspect=5)\ns_fig.map(sn.kdeplot,'Fare',shade=True)\ns_fig.add_legend()\nplt.show()","12c226f2":"print(train.groupby('Embarked')['Survived'].mean())\nsn.barplot(x=train['Embarked'],y=train['Survived'])\nplt.show()","7f4c205e":"print(train.groupby('Parch')['Survived'].value_counts())\nsn.countplot(x=train['Parch'],hue=train['Survived'])\nplt.show()\nsn.barplot(x=train['Parch'],y=train['Survived'])\nplt.show()","c5de7967":"print(train.groupby('SibSp')['Survived'].value_counts())\nsn.countplot(x=train['SibSp'],hue=train['Survived'])\nplt.show()\nsn.barplot(x=train['SibSp'],y=train['Survived'])\nplt.show()","c2d88547":"new_train = train.drop(columns='Survived')","06dc0697":"total = new_train.append(test,ignore_index=True)","168f24bd":"total.info()","f2427940":"total = total.drop(columns='Cabin')\n","484067c4":"total['Age'].fillna(total['Age'].mean(),inplace=True)\ntotal['Age'] = total['Age'].astype('int8')","f75c7190":"total['Fare']=total['Fare'].fillna(total['Fare'].mean())","ec10d0b5":"total['Embarked'].describe()","2d3e25ae":"total['Embarked'].fillna('S',inplace=True)","57243980":"total","fdeff648":"total.drop(columns=['Name','PassengerId','Ticket'],inplace=True)","42027f40":"total = pd.get_dummies(total,drop_first=True)\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nnumerical_columns = ['Age','Fare']\nfor col in numerical_columns:\n    total[col] = sc.fit_transform(total[col].to_numpy().reshape((-1,1)))","36752ce1":"training = total.iloc[:train.shape[0],:]\ntesting = total.iloc[train.shape[0]:,:]","b0b2696c":"from sklearn.model_selection import cross_val_score,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB","e5c46db9":"lr = LogisticRegression(random_state=6)\nlr.fit(training,target)\nlr.score(training,target)\ncross_val_score(lr,training,target).mean()","f552ea0b":"rfs = RandomForestClassifier(n_estimators=200,criterion='entropy',max_depth=5,max_features='auto',\n                            max_leaf_nodes=7,min_samples_leaf=5,min_samples_split=3)\nrfs.fit(training,target)\nrfs.score(training,target)\ncross_val_score(rfs,training,target).mean()","3ee81275":"knn = KNeighborsClassifier(n_neighbors= 21)\nknn.fit(training,target)\ncross_val_score(knn,training,target).mean()","c4dc751f":"dt = DecisionTreeClassifier(max_depth=6,criterion='gini')\ndt.fit(training,target)\ncross_val_score(dt,training,target).mean()","6830b13a":"nb = GaussianNB()\nnb.fit(training,target)\ncross_val_score(nb,training,target).mean()","5becef5b":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nnew_data = pca.fit_transform(training)\nsn.scatterplot(new_data[:,0],new_data[:,1],hue=target)\nplt.title('Dimensionality Reduction using PCA')\nplt.show()","e7824e91":"df = pd.DataFrame()\ndf['PassengerId']= test['PassengerId']\ndf['Survived']= rfs.predict(testing)\ndf.to_csv('submission2.csv',index=False)","fca72730":"from sklearn.metrics import confusion_matrix\nsn.heatmap(confusion_matrix(target,rfs.predict(training)),annot=True,cmap='plasma')","7eb2da99":"confusion_matrix(target,rfs.predict(training))","e4acc609":" params = {'n_estimators': [200,500,800,1000],\n          'max_depth': [3,5,7],\n          'criterion':['entropy', 'gini'],\n          'min_samples_leaf' : [2, 3, 4, 5],\n          'max_features':['auto'],\n          'min_samples_split': [3, 5, 10],\n          'max_leaf_nodes':[2,3,5,7],\n          }\n\nrfc_cv = GridSearchCV(rfs, params, cv = 4,n_jobs=-1 ,verbose=2).fit(training, target)\n","74f09564":"## Data Dictionary\n\n* Survived: 0 = No, 1 = Yes\n* Pclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n* Sibsp: # of siblings \/ spouses aboard the Titanic\n* Parch: # of parents \/ children aboard the Titanic\n* Ticket: Ticket number\n* Cabin: Cabin number\n* Embarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton","b5f5f56b":"#rfc_cv.best_params_"}}