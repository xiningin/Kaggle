{"cell_type":{"d920e1dc":"code","02217cb1":"code","97bd3202":"code","a55ce6c1":"code","da50c111":"code","fa6a9dd4":"code","c25aaacc":"code","8d17b964":"code","d4792101":"code","3d3021f4":"code","49fdaeb2":"code","c74a3084":"code","17db30a4":"code","04abec0d":"markdown","d740cb2b":"markdown"},"source":{"d920e1dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02217cb1":"import pandas as pd \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.cluster import KMeans\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score\n\nfrom sklearn.model_selection import train_test_split\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\n#https:\/\/www.kaggle.com\/camnugent\/geospatial-feature-engineering-and-visualization","97bd3202":"df1 = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv', index_col = 'id')\n\nX_final1 = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv', index_col = 'id')","a55ce6c1":"X_test = df1.copy()\nX_final = X_final1.copy()","da50c111":"X_test = df1.copy()\nX_test = df1.sample(frac=1)","fa6a9dd4":"agg_features = ['sum','mean','std','max','min','kurt']\nfeatures = X_test.keys().tolist()[:-1]\n\nfor ft in agg_features:\n    \n    class_method = getattr(pd.DataFrame, ft)\n    X_test[ft] = class_method(X_test[features], axis=1)\n    X_final[ft] = class_method(X_final[features], axis=1)","c25aaacc":"X = X_test.drop('target', axis=1)\ny = X_test['target']","8d17b964":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(X)\n\ncols = X.columns\n\n\nX = scaler.transform(X)\nX_final = scaler.transform(X_final)\n\nX = pd.DataFrame(X, columns = cols)\nX_final = pd.DataFrame(X_final, columns = cols)\nX_final.index = X_final1.index","d4792101":"%%time\n#building a price prediction\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LinearRegression\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state = 1)\n\nmodel = LogisticRegression(solver='liblinear', n_jobs = 4)\n\nmodel.fit(X_train, y_train)\ny_pred_test = model.predict(X_valid)\nprint(roc_auc_score(y_valid, y_pred_test))\n\n","3d3021f4":"%%time\n#building a price prediction\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LinearRegression\n\n\nmodel = LinearRegression()\n\nmodel.fit(X_train, y_train)\ny_pred_test = model.predict(X_valid)\nprint(roc_auc_score(y_valid, y_pred_test))","49fdaeb2":"model = LinearRegression()\n\nmodel.fit(X, y)\ny_pred_test = model.predict(X_final)\ny_pred_df = pd.DataFrame(y_pred_test, columns=['target'])\ny_pred_df['id'] = X_final.index","c74a3084":"columns = ['id','target']\n\ny_pred_df[columns]","17db30a4":"filename = 'target.csv'\ny_pred_df[columns].to_csv(filename,index = None)","04abec0d":"Creating submission file","d740cb2b":"# The goal is not in classification really, because the metric is not accuracy, but AUC, so simple LinearRegression gives much better score than LogisticRegression, better scores i managed to get only from neural networks, but there are enough examples of them already"}}