{"cell_type":{"43f2ecef":"code","cb75d58b":"code","66d452e9":"code","2d6a7e6e":"code","10b3b432":"code","48f64c4c":"code","2871b470":"code","1eec74bb":"code","dca0350c":"code","713c68d7":"code","7237221b":"code","a3d6513d":"code","e299a30c":"code","1534e523":"code","63e743ab":"code","fd7f74e4":"code","12be3931":"code","7be1c014":"code","1d62df8c":"code","d0da1436":"code","d145b538":"code","7f82e0f6":"code","b21bb3bc":"code","afa3ecaf":"code","cc04ef58":"code","8ed6b4ad":"code","7d5483f6":"code","3b2678d4":"code","0a36a6a4":"code","f61b2723":"code","7b4503ce":"code","3060e550":"code","3fbc539a":"code","ee897fe7":"code","97a6eae5":"code","9e188f68":"code","a46abdf5":"code","bcb4ea0e":"code","d85ecbc8":"code","524378f9":"code","5f5a5f89":"code","a7e3062a":"code","82011cfb":"code","bb634d3f":"code","16727b89":"code","850bc4bd":"code","dd0c34ae":"code","170f39a1":"code","595b5d12":"code","453d6c26":"code","e5d31574":"code","cca8162b":"code","19827192":"code","8ea664af":"code","96c7e9d2":"code","44ea7147":"code","acb3a4c8":"code","9739bf62":"code","4a80d3f6":"code","f37cd2d0":"code","6f3c9e4f":"code","3223f145":"markdown","de0c2046":"markdown","c6d3e2ac":"markdown","ecc63d47":"markdown","24d71972":"markdown","b909b92f":"markdown","17a7583e":"markdown","c6ce5758":"markdown","f1e74005":"markdown","3b4ea1ac":"markdown","3bc10dea":"markdown","ba394e82":"markdown","08e15eab":"markdown","fefe62e5":"markdown","88616c7f":"markdown","57bfbc7f":"markdown","3bd0e852":"markdown","1a72eacc":"markdown"},"source":{"43f2ecef":"import numpy as np","cb75d58b":"np.pi","66d452e9":"np.e","2d6a7e6e":"np.inf","10b3b432":"import numpy as np\n\na = np.array([1, 2, 3])\nprint(a[0], a[1], a[2])\nprint(a)\na[1] = a[1]*2\nprint(a)\nprint(a.dtype)\nprint(type(a))","48f64c4c":"import numpy as np\n\n\na = np.array([1, 2, 3], dtype='float32')\nprint(a)","2871b470":"import numpy as np\n\na = np.array([[1, 2, 3], [4, 5, 6]])\nprint(a)\nprint(a.shape)\nprint(a[0, 2])\nb = a.reshape(3, 2)\nprint(b)\nprint(b.shape)\nprint(b[0, 1])","1eec74bb":"import numpy as np\n\na = np.zeros((2,2))\nprint(a) ","dca0350c":"import numpy as np\n\nb = np.ones((3,2))\nprint(b)","713c68d7":"import numpy as np\n\nc = np.full((2,2), 7)\nprint(c)","7237221b":"import numpy as np\n\nd = np.eye(2)\nprint(d)\nd = np.eye(4, 5, 1)\nprint(d)\nd = np.eye(4, 5, -2)\nprint(d)","a3d6513d":"import numpy as np\n\ne = np.random.random((2,2))\nprint(e)","e299a30c":"import numpy as np\n\nf = np.arange(2, 15, 3)\nprint(f)","1534e523":"import numpy as np\n\ng = np.linspace(2, 15, 3)\nprint(g)","63e743ab":"import numpy as np\n\ng = np.linspace(-np.pi\/2, np.pi\/2, 3)\nh = np.sin(g)\nprint(h)","fd7f74e4":"import numpy as np\n\nx = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)","12be3931":"print(x + y)\nprint(np.add(x, y))","7be1c014":"print(x - y)\nprint(np.subtract(x, y))","1d62df8c":"print(x * y)\nprint(np.multiply(x, y))","d0da1436":"print(x \/ y)\nprint(np.divide(x, y))","d145b538":"print(np.sqrt(x))","7f82e0f6":"import numpy as np\n\nx = np.array([[1,2],[3,4]])\ny = np.array([9,10])\n\nprint(x @ y)\nprint(x.dot(y))\nprint(np.dot(x, y))","b21bb3bc":"import numpy as np\n\nx = np.array([[1,2],[3,4]])\n\nprint(np.sum(x))\nprint(np.sum(x, axis=0))\nprint(np.sum(x, axis=1))","afa3ecaf":"import numpy as np\n\nx = np.array([[1,2],[3,4]])\n\nprint(x)\nprint(x.T)","cc04ef58":"import pandas as pd\n\ns1 = pd.Series([1, 2, 3])\nprint(s1)\ns2 = pd.Series([1, 2, 3.2])\nprint(s2)\ns3 = pd.Series([1, 2, 3], dtype=float)\nprint(s3)","8ed6b4ad":"import pandas as pd\nimport numpy as np\n\ns = pd.Series([5, 2.7, 3.1, np.inf, np.nan])\nprint(s)\ns[s < 3] = 57\nprint(s)\ns[s == np.inf] = 1000\nprint(s)\ns[np.isnan(s)] = 0\nprint(s)","7d5483f6":"s1 = pd.Series([1, 2, 3, 5], index=['a', 'b', 'c', 'd'])\ns2 = pd.Series({'a':1, 'b':2, 'c':3, 'd':5})\nprint(s1)\nprint(s2)\nprint(s1.describe())","3b2678d4":"import pandas as pd\n\ndata = {\n  \"etudiants\": ['Babacar Faye', 'Fatou Diop', 'Moussa Gueye'],\n  \"notes\": [15, 19, 13]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\ndf","0a36a6a4":"import pandas as pd\nimport numpy as np\n\n\ndata = np.array([['Babacar Faye', 15], ['Fatou Diop', 19], ['Moussa Gueye', 13]])\n\ndf = pd.DataFrame(data, index=['P26 130', 'P26 232', 'P26 100'], columns=['Etudiants', 'Notes'])\ndf","f61b2723":"df.loc['P26 100',:]","7b4503ce":"df.loc['P26 100','Etudiants']","3060e550":"df.loc['P26 100','Notes']","3fbc539a":"import pandas as pd\n\n\ndf = pd.read_csv('..\/input\/world-cities\/worldcities.csv')","ee897fe7":"df","97a6eae5":"df.head()","9e188f68":"df.tail()","a46abdf5":"df.columns","bcb4ea0e":"df.describe()","d85ecbc8":"df[df['city']=='Dakar']","524378f9":"df[['city', 'lat', 'lng']]","5f5a5f89":"df.loc[1, 'city']","a7e3062a":"df.loc[1,:]","82011cfb":"df.loc[1:5,:]","bb634d3f":"df.loc[1:10,['city', 'lat']]","16727b89":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/etudiants\/listeetudiants.csv', sep=' ', index_col=0)","850bc4bd":"df['TP'].unique()","dd0c34ae":"dataset = [['Lait', 'Oignon', 'Noix de muscade', 'Haricots rouges', 'Oeufs', 'Yaourt'],\n           ['Aneth', 'Oignon', 'Noix de muscade', 'Haricots rouges', 'Oeufs', 'Yaourt'],\n           ['Lait', 'Pomme', 'Haricots rouges', 'Oeufs'],\n           ['Lait', 'Tomate', 'Ma\u00efs', 'Haricots rouges', 'Yaourt'],\n           ['Ma\u00efs', 'Oignon', 'Haricots rouges', 'Glace', 'Oeufs']]","170f39a1":"import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\n\nte = TransactionEncoder()\nte_ary = te.fit(dataset).transform(dataset)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\ndf","595b5d12":"from mlxtend.frequent_patterns import fpgrowth\n\nfpgrowth(df, min_support=0.6, use_colnames=True)","453d6c26":"from sklearn import datasets\n\niris = datasets.load_iris()","e5d31574":"print(dir(iris))","cca8162b":"print(iris.target_names)","19827192":"print(iris.target)","8ea664af":"import numpy as np\n\nnp.bincount(iris.target)","96c7e9d2":"import pandas as pd\n\nx = pd.DataFrame(iris.data)\nx.columns = ['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width']\nx['Target'] = iris.target\nx['Target_Names'] = [iris.target_names[i] for i in iris.target]","44ea7147":"x","acb3a4c8":"import matplotlib.pyplot as plt\n\nfig = plt.subplot()\n\nindex_sepal_length = 0\nindex_sepal_width = 1\nindex_petal_lentgh = 2\nindex_petal_width = 3\n\ncolors = ['blue', 'red', 'green']\n\nfor label, color in zip(range(len(iris.target_names)), colors):\n    fig.scatter(iris.data[iris.target==label, index_petal_width], \n                iris.data[iris.target==label, index_sepal_length],\n                label=iris.target_names[label],\n                c=color)\n\nfig.set_xlabel(iris.feature_names[index_petal_width])\nfig.set_ylabel(iris.feature_names[index_sepal_length])\nfig.legend(loc='upper left')\nplt.show()","9739bf62":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\niris_dtrain, iris_dtest, iris_ttrain, iris_ttest = train_test_split(iris.data, iris.target, test_size=0.2, random_state=4)\n","4a80d3f6":"print(iris_dtrain.shape)\nprint(iris_dtest.shape)","f37cd2d0":"print(iris_ttrain.shape)\nprint(iris_ttest.shape)","6f3c9e4f":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(iris_dtrain, iris_ttrain)\niris_tpred = knn.predict(iris_dtest)\nscore = metrics.accuracy_score(iris_ttest, iris_tpred)\nscore","3223f145":"# **3. Mlxtend**\n\n**Mlxtend** (machine learning extensions) est une biblioth\u00e8que Python pour les t\u00e2ches de la science des donn\u00e9es.\n\nNous allons voir **FP-Growth** est un algorithme pour l'extraction des itemsets fr\u00e9quents.","de0c2046":"# **4. Scikit-learn**\n\nScikit-learn est une biblioth\u00e8que Python d\u00e9di\u00e9e \u00e0 l'apprentissage automatique. Elle donne acc\u00e8s \u00e0 un grand nombre d'algorithmes courants. Elle int\u00e9gre plusieurs ensembles de donn\u00e9es, par exemple les de donn\u00e9es iris, diabetes.\n\nNous allons commencer les donn\u00e9es.\n\n## **4.1. Le jeu de donn\u00e9es Iris**\n\nIris est ensemble de donn\u00e9es bien connu qui d\u00e9crit 50 exemples de chacune des 3 esp\u00e8ces de fleurs d'iris (Iris setosa, Iris virginica et Iris versicolor).\n\nLes caract\u00e9ristiques des donn\u00e9es iris sont:\n\n* longueur des s\u00e9pales en cm\n* largeur des s\u00e9pales en cm\n* longueur des p\u00e9tales en cm\n* largeur des p\u00e9tales en cm\n\nLes classes sont les suivantes:\n\n* Iris Setosa\n* Iris Versicolor\n* Iris Virginie\n\n\n![bbb](https:\/\/user.oc-static.com\/upload\/2017\/10\/24\/15088528667743_iris.png)\n\n### **4.2 Chargement des donn\u00e9es**","c6d3e2ac":"# **2. Pandas**\n\n**Pandas** est une biblioth\u00e8que Python qui permet de manipuler des donn\u00e9es.\n\n## **2.1 Series**\n\nUne serie est un vecteur de valeurs.","ecc63d47":"[Documentation sur Numpy](https:\/\/numpy.org\/doc\/stable\/user\/quickstart.html)","24d71972":"## **4.4. L'algorithme des k plus proches voisins (knn)**","b909b92f":"**Visualisation des donn\u00e9es**\n","17a7583e":"# 1.2 Tableau","c6ce5758":"## **2.3 TP :**\n\nCharger le fichier disponible \u00e0 l'adresse \n[http:\/\/www.proba.jussieu.fr\/pageperso\/rebafka\/listeetudiants.csv](http:\/\/www.proba.jussieu.fr\/pageperso\/rebafka\/listeetudiants.csv)","f1e74005":"1. Afficher les types des colonnes\n2. Afficher les valeurs uniques de la colonne 'Sexe'\n3. Calculer les effectifs par modalit\u00e9 des colonnes 'Sexe' et 'TP' avec la m\u00e9thode *value_counts()*","3b4ea1ac":"**Nombre d'exemples pour chaque esp\u00e8ce**","3bc10dea":"[Documentation de Mlxtend](http:\/\/rasbt.github.io\/mlxtend)","ba394e82":"**Numpy** d\u00e9finit par d\u00e9faut la valeur **infinie**.","08e15eab":"## **2.2 DataFrames**\n\nUn **DataFrame** est un tableau \u00e0 deux dimensions avec des lignes et des colonnes.","fefe62e5":"### **4.3 Mettre le donn\u00e9es dans un DataFrame**","88616c7f":"## 1.1 Variables pr\u00e9d\u00e9finies \n\n**Numpy** d\u00e9finit par d\u00e9faut la valeur **pi**.","57bfbc7f":"# **Introduction \u00e0 Numpy, Pandas, Mlxtend et Scikit-learn**","3bd0e852":"# **1. Numpy**\n\n**Numpy** est une biblioth\u00e8que Python utilis\u00e9e pour effectuer des calculs num\u00e9riques.\n\nCommen\u00e7ons par importer **Numpy**:","1a72eacc":"**Numpy** d\u00e9finit par d\u00e9faut la valeur **e**."}}