{"cell_type":{"90f79785":"code","8be59e48":"code","24242d14":"code","a791eac1":"code","1575dd0a":"code","d6e8b4b1":"code","c78fbdca":"code","229807dd":"code","960fdca4":"code","3d6ef6b5":"code","30e27a8a":"code","630bdb7c":"code","36467578":"code","e16c24d4":"code","7e2b05d9":"code","299fdf52":"markdown","19688797":"markdown","adb3ba8e":"markdown","c9113bb7":"markdown"},"source":{"90f79785":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8be59e48":"dataframe = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')\ndataframe = dataframe.drop(columns=[\"Loan_ID\"])\ndataframe.head()","24242d14":"len(dataframe)","a791eac1":"dataframe.info()","1575dd0a":"dataframe.isnull().sum()","d6e8b4b1":"from sklearn.preprocessing import LabelEncoder\ncat_features=[x for x in dataframe.columns if dataframe[x].dtype==\"object\"]\nle=LabelEncoder()\nfor col in cat_features:\n    if col in dataframe.columns:\n        i = dataframe.columns.get_loc(col)\n        dataframe.iloc[:,i] = dataframe.apply(lambda i:le.fit_transform(i.astype(str)), axis=0, result_type='expand')\ndataframe.head(10)","c78fbdca":"X = dataframe.iloc[:, :-1].values\ny = dataframe.iloc[:, -1].values","229807dd":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'most_frequent')\nimputer.fit(X[:, 7:8])\nX[:, 7:8] = imputer.transform(X[:, 7:8])\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\nimputer.fit(X)\nX = imputer.transform(X)","960fdca4":"plt.figure(figsize=(10,10))\nprint(sns.heatmap(dataframe.corr(), annot=True, fmt='.2f'))","3d6ef6b5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","30e27a8a":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train[:, 5:9] = sc.fit_transform(X_train[:, 5:9])\nX_test[:, 5:9] = sc.transform(X_test[:, 5:9])","630bdb7c":"print(X_train)","36467578":"print(X_test)","e16c24d4":"def logistic_regression(X_train,X_test,y_train,y_test):\n  from sklearn.linear_model import LogisticRegression\n  from sklearn.metrics import accuracy_score,classification_report\n  LR = LogisticRegression(random_state = 0)\n  LR.fit(X_train,y_train)\n  print(\"Logistic Regression\\n\",classification_report(y_test, LR.predict(X_test)),\"\\n\")\n  print(accuracy_score(y_test, LR.predict(X_test)),\"\\n\")\n\ndef SVM(X_train,X_test,y_train,y_test):\n  from sklearn.svm import SVC \n  from sklearn.metrics import accuracy_score,classification_report\n  svc = SVC(kernel = 'linear', random_state = 0)\n  svc.fit(X_train,y_train)\n  print(\"SVM\\n\",classification_report(y_test, svc.predict(X_test)),\"\\n\")\n  print(accuracy_score(y_test, svc.predict(X_test)),\"\\n\")\n\n\ndef kernSVM(X_train,X_test,y_train,y_test):\n  from sklearn.svm import SVC \n  from sklearn.ensemble import AdaBoostClassifier\n  from sklearn.metrics import accuracy_score,classification_report\n  kernelsvm = SVC(kernel = 'rbf', random_state = 42)\n  kernelsvm.fit(X_train,y_train)\n  print(\"KernSVM\\n\",classification_report(y_test, kernelsvm.predict(X_test)),\"\\n\")\n  print(accuracy_score(y_test, kernelsvm.predict(X_test)),\"\\n\")\n\ndef Naive_Bayes(X_train,X_test,y_train,y_test):\n  from sklearn.naive_bayes import GaussianNB \n  from sklearn.metrics import accuracy_score,classification_report\n  NB = GaussianNB()\n  NB.fit(X_train,y_train)\n  print(\"Naive_Bayes\\n\",classification_report(y_test, NB.predict(X_test)),\"\\n\")\n  print(accuracy_score(y_test, NB.predict(X_test)),\"\\n\")\n\n","7e2b05d9":"logistic_regression(X_train,X_test,y_train,y_test)\nSVM(X_train,X_test,y_train,y_test)\nkernSVM(X_train,X_test,y_train,y_test)\nNaive_Bayes(X_train,X_test,y_train,y_test)","299fdf52":"Logistic Regression and KernelSVM gives the highest accuracy of 83.76%","19688797":"the missing values can be replaced with most frequent value","adb3ba8e":"Fetching Categorical data from the DF and Encoding","c9113bb7":"The DF has several Categorical data"}}