{"cell_type":{"56c378a0":"code","a5c6a377":"code","ecc6d2b7":"code","a16b89e1":"code","65e5c10f":"code","b19f05a0":"code","ba6322dc":"code","9bfafe79":"code","9869555b":"code","c8482136":"code","19d6fcdf":"code","2a2d7b66":"code","2f7a235c":"code","3795f0cd":"code","7a95c41c":"code","0230872b":"code","bb5e18f6":"code","33a9a729":"code","eb3769c6":"code","ba436dab":"code","dc419ec5":"code","00b63969":"code","4ea3ccad":"markdown","b3705249":"markdown","77e8c70c":"markdown","e0884dfb":"markdown","5ef48503":"markdown","125af335":"markdown","16c01d23":"markdown","4b9b7b44":"markdown","d5634160":"markdown","94a22181":"markdown","1e2b7b78":"markdown","4da95c69":"markdown","88cb07ca":"markdown","28701b0e":"markdown","5e29fb98":"markdown","31203d59":"markdown","8cd636d1":"markdown","98b3718c":"markdown","6e4e7ffc":"markdown","81518181":"markdown","9c75ce2e":"markdown","c3a1c2ef":"markdown","233a3438":"markdown"},"source":{"56c378a0":"# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","a5c6a377":"# put train and test data set into a dataframe\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain.shape","ecc6d2b7":"train.plot(kind='scatter',x='GrLivArea', y='SalePrice')\nplt.title('Dependency between GrLivArea and SalePrice')\nplt.show()\n\ntrain.plot(kind='scatter',x='TotalBsmtSF', y='SalePrice')\nplt.title('Dependency between TotalBsmtSF and SalePrice')\nplt.show()\n\nsns.displot(train['SalePrice'])\nplt.title('SalePrice distribution')\nplt.show()","a16b89e1":"train.drop(index=train[(train['GrLivArea']>4000)&(train['SalePrice']<300000)].index,inplace=True)\ntrain.drop(index=train[train['TotalBsmtSF']>6000].index,inplace=True)\ntrain['SalePrice_log'] = np.log1p(train['SalePrice'].copy(deep=True))","65e5c10f":"cat_var = ['MSZoning','Street','Alley','LotShape','LandContour',\n           'Utilities','LotConfig','Neighborhood','Condition1','Condition2',\n           'BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd',\n           'MasVnrType','Foundation','Heating','Electrical','GarageType','PavedDrive',\n           'Fence','MiscFeature','SaleType','SaleCondition']\n\nfig, axs = plt.subplots(len(cat_var)\/\/2, 2, figsize=(10, 60))\ni,j = 0,0\nfor cat in cat_var:\n    cat_dict = dict(train[cat].value_counts())\n    axs[i,j].bar(cat_dict.keys(),cat_dict.values())\n    axs[i,j].set_title(cat)\n    if j==0:\n        j+= 1\n    else:\n        j = 0\n        i+= 1\nplt.show()","b19f05a0":"cat_del = ['Street','Utilities','RoofMatl','Heating']\ntrain.drop(columns=cat_del,inplace=True)\ntest.drop(columns=cat_del,inplace=True)\nfor cat in cat_del:\n    cat_var.remove(cat)","ba6322dc":"cat_var_label = ['LandSlope','ExterQual','ExterCond','BsmtQual','BsmtCond',\n                 'BsmtExposure','BsmtFinType1','BsmtFinType2','HeatingQC',\n                 'CentralAir','KitchenQual','Functional','FireplaceQu',\n                 'GarageFinish','GarageQual','GarageCond','PoolQC']\n\nfig, axs = plt.subplots(len(cat_var_label)\/\/2+1, 2, figsize=(10, 60))\ni,j = 0,0\nfor cat in cat_var_label:\n    cat_dict = dict(train[cat].value_counts())\n    axs[i,j].bar(cat_dict.keys(),cat_dict.values())\n    axs[i,j].set_title(cat)\n    if j==0:\n        j+= 1\n    else:\n        j = 0\n        i+= 1\nplt.show()","9bfafe79":"cat_del = ['LandSlope','Functional']\ntrain.drop(columns=cat_del,inplace=True)\ntest.drop(columns=cat_del,inplace=True)\nfor cat in cat_del:\n    cat_var_label.remove(cat)\n","9869555b":"# Joining train and test data for preprocessing\ndata = pd.concat([train,test],keys=['train','test'])\n\n# Label encoding\ndata['ExterQual'].replace(['Ex','Gd','TA','Fa','Po'],[4,3,2,1,0],inplace=True)\ndata['ExterCond'].replace(['Ex','Gd','TA','Fa','Po'],[4,3,2,1,0],inplace=True)\ndata['HeatingQC'].replace(['Ex','Gd','TA','Fa','Po'],[4,3,2,1,0],inplace=True)\ndata['KitchenQual'].replace(['Ex','Gd','TA','Fa','Po'],[4,3,2,1,0],inplace=True)\ndata['BsmtQual'].replace(['Ex','Gd','TA','Fa','Po','NA'],[5,4,3,2,1,0],inplace=True)\ndata['BsmtCond'].replace(['Ex','Gd','TA','Fa','Po','NA'],[5,4,3,2,1,0],inplace=True)\ndata['FireplaceQu'].replace(['Ex','Gd','TA','Fa','Po','NA'],[5,4,3,2,1,0],inplace=True)\ndata['GarageQual'].replace(['Ex','Gd','TA','Fa','Po','NA'],[5,4,3,2,1,0],inplace=True)\ndata['GarageCond'].replace(['Ex','Gd','TA','Fa','Po','NA'],[5,4,3,2,1,0],inplace=True)\ndata['BsmtExposure'].replace(['Gd','Av','Mn','No','NA'],[4,3,2,1,0],inplace=True)\ndata['BsmtFinType1'].replace(['GLQ','ALQ','BLQ','Rec','LwQ','Unf','NA'],[6,5,4,3,2,1,0],inplace=True)\ndata['BsmtFinType2'].replace(['GLQ','ALQ','BLQ','Rec','LwQ','Unf','NA'],[6,5,4,3,2,1,0],inplace=True)\ndata['CentralAir'].replace(['N','Y'],[0,1],inplace=True)\ndata['GarageFinish'].replace(['Fin','RFn','Unf','NA'],[3,2,1,0],inplace=True)\ndata['PoolQC'].replace(['Ex','Gd','TA','Fa','NA'],[4,3,2,1,0],inplace=True)\n\ntrain = data.loc['train'].copy(deep=True)\ntest = data.loc['test'].copy(deep=True)","c8482136":"num_var = ['MSSubClass','LotFrontage','LotArea','OverallQual','OverallCond',\n           'YearBuilt','YearRemodAdd','MasVnrArea','BsmtFinSF1','BsmtFinType2',\n           'BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF',\n           'LowQualFinSF','GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath',\n           'HalfBath','BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd','Fireplaces','GarageYrBlt',\n           'GarageCars','GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch',\n           '3SsnPorch','ScreenPorch','PoolArea','MiscVal','MoSold','YrSold']\n\nfig, axs = plt.subplots(len(num_var )\/\/2+1, 2, figsize=(10, 80))\ni,j = 0,0\nfor num in num_var :\n    axs[i,j].scatter(x=train[num],y=train['SalePrice'])\n    axs[i,j].set_title(num)\n    if j==0:\n        j+= 1\n    else:\n        j = 0\n        i+= 1\nplt.show()\n","19d6fcdf":"train.drop(index=train[train['LotFrontage']>300].index,inplace=True)\ntrain.drop(index=train[train['LotArea']>100000].index,inplace=True)\n","2a2d7b66":"print('Number of missing values:')\nmiss_count = pd.isna(train).sum()\ncount_train = len(train)\nfor ind,m in miss_count.items():\n    if m>0:\n        print(ind,':',m,round(m\/count_train*100,2),'%')","2f7a235c":"train.drop(columns=['Id','Alley','FireplaceQu','PoolQC','PoolArea','Fence','MiscFeature'],inplace=True)\ntest.drop(columns=['Id','Alley','FireplaceQu','PoolQC','PoolArea','Fence','MiscFeature'],inplace=True)\ncat_var.remove('Alley')\ncat_var_label.remove('FireplaceQu')\ncat_var_label.remove('PoolQC')\nnum_var.remove('PoolArea')\ncat_var.remove('Fence')\ncat_var.remove('MiscFeature')","3795f0cd":"def fill_missing(feature,value):\n    if value == 'freq':\n        test_freq = test[feature].value_counts().idxmax()\n        test[feature].fillna(test_freq,inplace=True)\n        train_freq = train[feature].value_counts().idxmax()\n        train[feature].fillna(train_freq,inplace=True)\n    elif value == 'median':\n        test_med = test[feature].median()\n        test[feature].fillna(test_med,inplace=True)\n        train_med = train[feature].median()\n        train[feature].fillna(train_med,inplace=True)\n    else:\n        test[feature].fillna(value,inplace=True)\n        train[feature].fillna(value,inplace=True)\n\n\n# replacing missing values with the most frequent value\nfill_missing('MSZoning','freq')\nfill_missing('Exterior1st','freq')\nfill_missing('Exterior2nd','freq')\nfill_missing('MasVnrType','freq')\nfill_missing('Electrical','freq')\n\n# replacing missing values with the median value\nfill_missing('LotFrontage','median')\nfill_missing('MasVnrArea','median')\nfill_missing('KitchenQual','median')\n\n# replacing missing values with category 'NA' or 0\nfill_missing('BsmtQual',0)\nfill_missing('BsmtCond',0)\nfill_missing('BsmtExposure',0)\nfill_missing('BsmtFinType1',0)\nfill_missing('BsmtFinSF1',0)\nfill_missing('BsmtFinType2',0)\nfill_missing('BsmtFinSF2',0)\nfill_missing('BsmtUnfSF',0)\nfill_missing('BsmtFullBath',0)\nfill_missing('BsmtHalfBath',0)\nfill_missing('TotalBsmtSF',0)\nfill_missing('GarageType','NA')\nfill_missing('GarageYrBlt',0)\nfill_missing('GarageFinish',0)\nfill_missing('GarageType','NA')\nfill_missing('GarageCars',0)\nfill_missing('GarageArea',0)\nfill_missing('GarageQual',0)\nfill_missing('GarageCond',0)","7a95c41c":"# Joining bathrooms\ntrain['TotalBath'] = train['BsmtFullBath'] + 0.5*train['BsmtHalfBath'] + train['FullBath'] + 0.5*train['HalfBath']\ntest['TotalBath'] = test['BsmtFullBath'] + 0.5*test['BsmtHalfBath'] + test['FullBath'] + 0.5*test['HalfBath']\ntrain.drop(columns=['BsmtFullBath','BsmtHalfBath','FullBath','HalfBath'],inplace=True)\ntest.drop(columns=['BsmtFullBath','BsmtHalfBath','FullBath','HalfBath'],inplace=True)","0230872b":"# Joining train and test data for preprocessing\ndata = pd.concat([train,test],keys=['train','test'])\n\n# One-hot encoding\ndata_cat = pd.get_dummies(data,columns=cat_var)","bb5e18f6":"# Function for combining columns\ndef combine_col(f,f1,f2):\n    cat = set(data[f1].value_counts().keys())&set(data[f2].value_counts().keys())\n    for c in cat:\n        data_cat[f+'_'+c] = data_cat[f1+'_'+c].combine(data_cat[f2+'_'+c],np.maximum)\n    data_cat.drop(columns=[f1+'_'+c for c in cat],inplace=True)\n    data_cat.drop(columns=[f2+'_'+c for c in cat],inplace=True)\n\n# Combine columns 'Condition1' and 'Condition2', 'Exterior1st' and 'Exterior2nd'\ncombine_col('Condition','Condition1','Condition2')\ncombine_col('Exterior','Exterior1st','Exterior2nd')\n\n# Let's check the number of rows ans columns\ndata_cat.shape\n\ntrain = data_cat.loc['train'].copy(deep=True)\ntest = data_cat.loc['test'].copy(deep=True)","33a9a729":"# Separating X and Y\nX_train = train.drop(columns=['SalePrice','SalePrice_log'])\nY_train = train['SalePrice_log']\nX_test = test.drop(columns=['SalePrice','SalePrice_log'])\n\n# Scaling\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler().fit(X_train)\nX_train_sc = scale.transform(X_train)\nX_test_sc = scale.transform(X_test)","eb3769c6":"from xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import cross_val_score\n\nmodel_xgb = XGBRegressor(random_state=0)\nscore_xgb = np.sqrt(-cross_val_score(model_xgb, X_train_sc, Y_train,scoring=\"neg_mean_squared_error\",cv=4))\nprint('XGBoost accuracy',score_xgb.mean())\n\nmodel_ctb = CatBoostRegressor(random_state=0,verbose=False)\nscore_ctb = np.sqrt(-cross_val_score(model_ctb, X_train_sc, Y_train,scoring=\"neg_mean_squared_error\",cv=4))\nprint('CatBoost accuracy',score_ctb.mean())","ba436dab":"param_ctb = {\n    'iterations': [5000],\n    'learning_rate': [0.01],\n    'depth': [3,4,5],\n    'l2_leaf_reg': [1],\n    'early_stopping_rounds': [300],\n}\n\nmodel_ctb = CatBoostRegressor(random_state=0,verbose=False)\ngrid_search_ctb = model_ctb.grid_search(param_ctb,\n                                        X = X_train_sc,\n                                        y = Y_train,\n                                        cv = 4,\n                                        verbose = False,\n                                        )\n\nprint('CatBoost - tuning hyperparameters')\nprint(grid_search_ctb['params'])","dc419ec5":"model_ctb_up = CatBoostRegressor(iterations = 7000,\n                                 learning_rate = 0.006,\n                                 depth = 5,\n                                 l2_leaf_reg = 1,\n                                 early_stopping_rounds = 300,\n                                 verbose = False,\n                                 random_state=0)\nscore_ctb_up = np.sqrt(-cross_val_score(model_ctb_up, X_train_sc, Y_train,scoring=\"neg_mean_squared_error\",cv=4))\nprint('CatBoost - final parameters')\nprint(score_ctb_up.mean())","00b63969":"model_ctb_up.fit(X_train_sc, Y_train)\nY_predict = np.expm1(model_ctb_up.predict(X_test_sc))\nresult = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nresult['SalePrice'] = Y_predict\nresult.set_index('Id',inplace=True)\nresult[['SalePrice']].to_csv('submission.csv')","4ea3ccad":"Let's create and evaluate models. I decided to use XGBRegressor and CatBoostRegressor.","b3705249":"I decided to delete Street, Utilities, RoofMatl, Heating because they don't have enough distribution.\nThey will most likely screw up my model than improve it.","77e8c70c":"CatBoost gives the better result. Let's use this model and tune hyperparameters.","e0884dfb":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2 id='Modelling'>Modelling<\/h2>\n<\/div>","5ef48503":"I decided to delete LandSlope, Functional because they don't have enough distribution.\nThey will most likely screw up my model than improve it.","125af335":"As we see we have outliers: LotFrontage(>300), LotArea(>100000). Let's delete them.","16c01d23":"Categorical values for label encoding:\n- LandSlope: Slope of property\n- ExterQual: Evaluates the quality of the material on the exterior\n- ExterCond: Evaluates the present condition of the material on the exterior\n- BsmtQual: Evaluates the height of the basement\n- BsmtCond: Evaluates the general condition of the basement\n- BsmtExposure: Refers to walkout or garden level walls\n- BsmtFinType1: Rating of basement finished area\n- BsmtFinType2: Rating of basement finished area (if multiple types)\n- HeatingQC: Heating quality and condition\n- CentralAir: Central air conditioning\n- KitchenQual: Kitchen quality\n- Functional: Home functionality (Assume typical unless deductions are warranted)\n- FireplaceQu: Fireplace quality\n- GarageFinish: Interior finish of the garage\n- GarageQual: Garage quality\n- GarageCond: Garage condition\n- PoolQC: Pool quality","4b9b7b44":"Let's prepare our data before we create a model.","d5634160":"A bit of feature engineering.","94a22181":"Let's explore the data! At first, look at SalePrice and check the dependency.\nObviously, the price depends on the house area (living area and basement area).","1e2b7b78":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2 id='Prediction'>Prediction<\/h2>\n<\/div>","4da95c69":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2>Table of content<\/h2>\n<ul>\n<li><a href=\"#Data-Analysis-and-Preprocessing\">Data Analysis and Preprocessing<\/a><\/li>\n<li><a href=#Modelling>Modelling<\/a><\/li>\n<li><a href=#Prediction>Prediction<\/a><\/li>\n<\/ul>\n<\/div>","88cb07ca":"<h1>Ames Housing Dataset<\/h1>","28701b0e":"We can make conclusions:\n1. There are outliers. Two on the first plot and one on the second one. Let's delete them.\n2. We have a wide and asymmetric range of prices. It's better to use logarithm of a price.","5e29fb98":"The next step is dealing with missing values.","31203d59":"Finally, I make a prediction and write it down.","8cd636d1":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2 id='Data-Analysis-and-Preprocessing'>Data Analysis and Preprocessing<\/h2>\n<\/div>","98b3718c":"Numerical values:\n- MSSubClass: Identifies the type of dwelling involved in the sale.\n- LotFrontage: Linear feet of street connected to property\n- LotArea: Lot size in square feet\n- OverallQual: Rates the overall material and finish of the house\n- OverallCond: Rates the overall condition of the house\n- YearBuilt: Original construction date\n- YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n- MasVnrArea: Masonry veneer area in square feet\n- BsmtFinSF1: Type 1 finished square feet\n- BsmtFinSF2: Type 2 finished square feet\n- BsmtUnfSF: Unfinished square feet of basement area\n- TotalBsmtSF: Total square feet of basement area\n- 1stFlrSF: First Floor square feet\n- 2ndFlrSF: Second floor square feet\n- LowQualFinSF: Low quality finished square feet (all floors)\n- GrLivArea: Above grade (ground) living area square feet\n- BsmtFullBath: Basement full bathrooms\n- BsmtHalfBath: Basement half bathrooms\n- FullBath: Full bathrooms above grade\n- HalfBath: Half baths above grade\n- BedroomAbvGr: Bedrooms above grade (does NOT include basement bedrooms)\n- KitchenAbvGr: Kitchens above grade\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n- Fireplaces: Number of fireplaces\n- GarageYrBlt: Year garage was built\n- GarageCars: Size of garage in car capacity\n- GarageArea: Size of garage in square feet\n- WoodDeckSF: Wood deck area in square feet\n- OpenPorchSF: Open porch area in square feet\n- EnclosedPorch: Enclosed porch area in square feet\n- 3SsnPorch: Three season porch area in square feet\n- ScreenPorch: Screen porch area in square feet\n- PoolArea: Pool area in square feet\n- MiscVal: $Value of miscellaneous feature\n- MoSold: Month Sold (MM)\n- YrSold: Year Sold (YYYY)\n\nLet's check numerical variables.","6e4e7ffc":"Let's explore and sort all the values.\n\nCategorical values for one-hot encoding:\n- MSZoning: Identifies the general zoning classification of the sale.\n- Street: Type of road access to property\n- Alley: Type of alley access to property\n- LotShape: General shape of property\n- LandContour: Flatness of the property\n- Utilities: Type of utilities available\n- LotConfig: Lot configuration\n- Neighborhood: Physical locations within Ames city limits\n- Condition1 and Condition2 - Proximity to various conditions\n- BldgType: Type of dwelling\n- HouseStyle: Style of dwelling\n- RoofStyle: Type of roof\n- RoofMatl: Roof material\n- Exterior1st and Exterior2nd (need to join) - Exterior covering on house\n- MasVnrType: Masonry veneer type\n- Foundation: Type of foundation\n- Heating: Type of heating\n- Electrical: Electrical system\n- GarageType: Garage location\n- PavedDrive: Paved driveway\n- Fence: Fence quality\n- MiscFeature: Miscellaneous feature not covered in other categories\n- SaleType: Type of sale\n- SaleCondition: Condition of sale","81518181":"I delete all the variables which have more than 20% missing values.","9c75ce2e":"Let's combine Condition and Exterior columns","c3a1c2ef":"After some experiments, I got the following parameters.","233a3438":"One-hot encoding"}}