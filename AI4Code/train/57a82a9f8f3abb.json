{"cell_type":{"b78e3265":"code","0009ee83":"code","75e7a231":"code","185b60e2":"code","a96b62cc":"code","f51ad978":"code","db498624":"code","c8710981":"code","9597a3bf":"code","00b10aca":"code","1ea92fce":"code","a8f9a91a":"code","1726ed2f":"code","613ab08d":"code","c2b0229a":"code","92d21c85":"code","01b79eac":"code","fa8326b1":"code","19cd0eaf":"code","a24a8532":"markdown","a752cdf9":"markdown","dcb4d80b":"markdown","3aa9da06":"markdown","0088b990":"markdown","774ecf0d":"markdown","67a25db4":"markdown","49aa7ce7":"markdown","d4aa4ebc":"markdown","12d71769":"markdown","b5e0e0d5":"markdown","085ce4cd":"markdown","c48694fb":"markdown","df6955a2":"markdown","0e4f5215":"markdown","9819dfe5":"markdown"},"source":{"b78e3265":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","0009ee83":"url = '..\/input\/house-prices-advanced-regression-techniques\/housetrain.csv'\ndf = pd.read_csv(url)","75e7a231":"df_float = df.select_dtypes(include=['float64']).copy()\ndf_float.info()","185b60e2":"df_float.describe()","a96b62cc":"df_float['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].mean(), inplace=False)","f51ad978":"df_float['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].mean(), inplace=False)","db498624":"df_float['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].mean(), inplace=False)","c8710981":"df_float.info()","9597a3bf":"lotFrontage = df_float[['LotFrontage']]\nsalePrice = df['SalePrice']","00b10aca":"lr1 = LinearRegression()\nlr1.fit(lotFrontage, salePrice)","1ea92fce":"print(lr1.coef_)\nprint(lr1.intercept_)\nprint(mean_squared_error(salePrice, lr1.predict(lotFrontage)))","a8f9a91a":"masVnrAre = df_float[['MasVnrArea']]\nsalePrice = df['SalePrice']","1726ed2f":"lr2 = LinearRegression()\nlr2.fit(masVnrAre, salePrice)","613ab08d":"print(lr2.coef_)\nprint(lr2.intercept_)\nprint(mean_squared_error(salePrice, lr2.predict(masVnrAre)))","c2b0229a":"garageYrBlt = df_float[['GarageYrBlt']]\nsalePrice = df['SalePrice']","92d21c85":"lr3 = LinearRegression()\nlr3.fit(garageYrBlt, salePrice)","01b79eac":"print(lr3.coef_)\nprint(lr3.intercept_)\nprint(mean_squared_error(salePrice, lr3.predict(garageYrBlt)))","fa8326b1":"f = plt.figure()\nf, ax = plt.subplots(1, 3, figsize=(30, 8))\n\nax = plt.subplot(1, 3, 1)\nplt.ylabel('SalePrice')\nplt.xlabel('LotFrontage')\nax = plt.scatter(lotFrontage, salePrice)\nax = plt.plot(lotFrontage, lr1.predict(lotFrontage), linewidth=5.0, color='orange')\n\nax = plt.subplot(1, 3, 2)\nplt.ylabel('SalePrice')\nplt.xlabel('MasVnrArea')\nax = plt.scatter(masVnrAre, salePrice)\nax = plt.plot(masVnrAre, lr2.predict(masVnrAre), linewidth=5.0, color='orange')\n\nax = plt.subplot(1, 3, 3)\nplt.ylabel('SalePrice')\nplt.xlabel('GarageYrBlt')\nax = plt.scatter(garageYrBlt, salePrice)\nax = plt.plot(garageYrBlt, lr3.predict(garageYrBlt), linewidth=5.0, color='orange')\n\nax = plt.show()","19cd0eaf":"names = ['LotFrontage', 'MasVnrArea',\t'GarageYrBlt']\nheights = [\n           mean_squared_error(salePrice, lr1.predict(lotFrontage)),\n           mean_squared_error(salePrice, lr2.predict(masVnrAre)),\n           mean_squared_error(salePrice, lr3.predict(garageYrBlt))]\n\nf = plt.figure(figsize=(8,8))\nax = plt.bar(names, heights)","a24a8532":"## 3. Filling missing values\n\nFrom the DataFrame information printed above, we can observe the DataFrame has a total of 1460 rows. But looking at the attributes we observe that all of them\nhas less than 1460 non-null values each. So we need to handle this missing values in order to proceed. So, for each attribute we use the method *fillna()*\nto fill the missing values with the their respective mean value.","a752cdf9":"After filling the missing values we can check that each attribute has 1460 non-null values each:","dcb4d80b":"Finally, we use a bar chart to compare the mean squared error of each model.","3aa9da06":"## 7. Results\n\nThe results of ou regression analysis are presented in the charts below. For each analysed atrribute we use a scatter plot to represent the data points (in blue) userd for the analysis. Then we use the predicted values (the output of the model) to plot a line representing the linear model (in orange).","0088b990":"For this litte example, we select only the attributes which represents measurements. So, for our new DataFrame we select only the attributes of the **float64** type. Next with print information about the attributes as well their basic statistics. ","774ecf0d":"We the repeat the same steps of section 4 for the MasVnrAre attribute.","67a25db4":"## 1. Importing libraries\n\nFor this notebook we load some of the most common libraries for Data Science wiht Python:\n* NumPy\n* Pandas\n* Matplotlib\n* scikit-learn","49aa7ce7":"## 2. Loading Data and Selecting Attributes\n\nThen we use Pandas to load data from house pricing competition, into a DataFrame.\n\n\n\n","d4aa4ebc":"## 8. Conclusion\n\nIn this example, we used the Linear Regression as a exploratory data analysis tool. Usign the scikit-learn libray we create Linear Regression models to understand if the target attribute *SalePrice* can be explained in terms of *LotFrontage*, *MasVnrArea* or *GarageYrBlt* individually.\n\nFinally, the results of modeling are presented by printing the coeficients and intercepts of the models as well as ploting them together with the data points.\n","12d71769":"## 4. Regression Analysis for LotFrontage\n\nOnce we handled the missing values for each attribute, we can proceed to the linear regression analysis. In this example we build a linear regression model to explain the SalePrice of a house depending on the LotFrontage measurement. As a first step we save the respective attributes into variables *lotFrontage* and *salePrice*. Instead of the traditional *X* e *y* variables we use the attribute name for clarity purposes.","b5e0e0d5":"# Linear Regression with one variable\n\nIn this example, we use Linear Regression as an exploratory data analysis tool. The objective is to understand how well can we explain the SalePrice of a house using real attributes individually. \n\nGithub version:\nhttps:\/\/github.com\/rodmsmendes\/reinforcementlearning4fun\/blob\/master\/Linear_Regression_with_one_variable.ipynb\n\nKaggle kernel version:\nhttps:\/\/www.kaggle.com\/rodolfomendes\/linear-regression-with-one-variable\/notebook","085ce4cd":"## 6. Regression Analysis for GarageYrBlt","c48694fb":"Next we create an instance of *LinearRegression* class from scikit-learn and call the method *fit()* passing the columns as parameters to create our model. ","df6955a2":"We our model created, print the model coeficient, intercept and measure the mean squared error of the model.","0e4f5215":"## 5. Regression Analysis for MasVnrAre","9819dfe5":"We the repeat the same steps of section 4 for the GarageYrBlt attribute."}}