{"cell_type":{"5adf475c":"code","8069b1f5":"code","00583091":"code","adfa8390":"code","ff860916":"code","dccaab69":"code","e7a5470a":"code","d0d6ccda":"code","495bca7d":"code","b2b271e9":"code","5a710567":"code","26731d3a":"code","031c97d3":"code","f9064dec":"code","89af3c2f":"code","a5bb7820":"code","39c432bc":"code","1236b6db":"code","b4954ada":"code","1772f856":"code","745c091a":"code","0aa4fda5":"code","bc3170b0":"code","713a1a15":"code","ac4d8514":"code","89902bdb":"markdown","32babf3e":"markdown"},"source":{"5adf475c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8069b1f5":"#import numpy for mathematical operations\nimport numpy as np\n\n#import pandas for data manipulation and data handling\nimport pandas as pd\n\n#for visulaization \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import scaling \nfrom sklearn. preprocessing import StandardScaler\n\n#import the data splitting libraries\nfrom sklearn.model_selection import train_test_split\n\n#import decision tree \nfrom sklearn.tree import DecisionTreeClassifier\n\n#import logistic regression\nfrom sklearn.linear_model import LogisticRegression\n\n#import svm \nfrom sklearn.svm import SVC\n\n#import K-NN classifiers\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#import probabilistics model\nfrom sklearn.naive_bayes import GaussianNB\n\n#import voting classifier\nfrom sklearn.ensemble import VotingClassifier\n\n#import libraries for model selection\nfrom sklearn import model_selection\n\n#import library of measure of classification i.e. confusion matrix\nfrom sklearn.metrics import confusion_matrix","00583091":"#Reading the dataset\ndataset = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')\n\n#show top rows. by default show top 5 rows. \ndataset.head()","adfa8390":"#check data shape i.e. numbers of rows and columns\n#first numbers show the numbers of column and second number show numbers of columns.\ndataset.shape","ff860916":"#show the data information like data types , missing values.\ndataset.info()","dccaab69":"#here a divide the dataset like X represented as a number of features and y indicate target column.\n#here we are divide the dataset using index location function. (i.e. iloc)\n\nX = dataset.iloc[:, 3:13].values\ny = dataset.iloc[:, 13].values","e7a5470a":"X.shape","d0d6ccda":"y.shape","495bca7d":"X","b2b271e9":"#Encoding categorical data\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder","5a710567":"#get the categorical features using iloc method. \n\nlabelencoder_X_1 = LabelEncoder()\nX[:, 1] = labelencoder_X_1.fit_transform(X[:, 1])\nlabelencoder_X_2 = LabelEncoder()\nX[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])","26731d3a":"X","031c97d3":"#here transform categorical column using onehot endcoder\n\nfrom sklearn.compose import ColumnTransformer\nct = ColumnTransformer([(\"Geography\", OneHotEncoder(), [1])], remainder = 'passthrough')\nX = ct.fit_transform(X)\nX = X[:, 1:]","f9064dec":"X","89af3c2f":"# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state = 0, stratify = y)","a5bb7820":"X_train.shape","39c432bc":"X_test.shape","1236b6db":"y_train.shape","b4954ada":"# Feature Scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","1772f856":"#Defining the different machine learning models\nmodel1 = LogisticRegression()\nmodel2 = DecisionTreeClassifier(max_depth = 2)\nmodel3 = SVC()\nmodel4 = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nmodel5 = GaussianNB()","745c091a":"#Training the machine learning models\nmodel1.fit(X_train, y_train)\nmodel2.fit(X_train, y_train)\nmodel3.fit(X_train, y_train)\nmodel4.fit(X_train, y_train)\nmodel5.fit(X_train, y_train)","0aa4fda5":"#Making the prediction\ny_pred1 = model1.predict(X_test)\ny_pred2 = model2.predict(X_test)\ny_pred3 = model3.predict(X_test)\ny_pred4 = model4.predict(X_test)\ny_pred5 = model5.predict(X_test)","bc3170b0":"#Confusion matrix\ncm_LogisticRegression = confusion_matrix(y_test, y_pred1)\ncm_DecisionTree = confusion_matrix(y_test, y_pred2)\ncm_SupportVectorClass = confusion_matrix(y_test, y_pred3)\ncm_KNN = confusion_matrix(y_test, y_pred4)\ncm_NaiveBayes = confusion_matrix(y_test, y_pred5)\n","713a1a15":"#10-fold cross-validation \nkfold = model_selection.KFold(n_splits=10, random_state = 0)\nresult1 = model_selection.cross_val_score(model1, X_train, y_train, cv=kfold)\nresult2 = model_selection.cross_val_score(model2, X_train, y_train, cv=kfold)\nresult3 = model_selection.cross_val_score(model3, X_train, y_train, cv=kfold)\nresult4 = model_selection.cross_val_score(model4, X_train, y_train, cv=kfold)\nresult5 = model_selection.cross_val_score(model5, X_train, y_train, cv=kfold)\n","ac4d8514":"\n#Printing the accuracies achieved in cross-validation\nprint('Accuracy of Logistic Regression Model = ',result1.mean())\nprint('Accuracy of Decision Tree Model = ',result2.mean())\nprint('Accuracy of Support Vector Machine = ',result3.mean())\nprint('Accuracy of k-NN Model = ',result4.mean())\nprint('Accuracy of Naive Bayes Model = ',result5.mean())","89902bdb":"**Import Required Libraries**","32babf3e":"**Convert the categorical to numerical using labelencoder.**"}}