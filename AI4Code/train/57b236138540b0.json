{"cell_type":{"1a81de5c":"code","1a2a6089":"code","4f77bdc8":"code","83d1bcc0":"code","547b896f":"code","90fc31a8":"code","f715aa56":"code","b6f1280c":"code","b8de0ea3":"code","2248888e":"code","28bdaaeb":"code","c77b7438":"code","3032c155":"code","9de1497f":"code","e89347b6":"code","d71da738":"code","9ebca2df":"markdown","8bcdac97":"markdown","f0348738":"markdown","460927dc":"markdown","e47c0701":"markdown","92461266":"markdown","d8b54617":"markdown","32f680e3":"markdown","7587d292":"markdown","c77667f3":"markdown"},"source":{"1a81de5c":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom datetime import datetime\nfrom datetime import timedelta\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline\n","1a2a6089":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","4f77bdc8":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","83d1bcc0":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","547b896f":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","90fc31a8":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# dc.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/dc.csv', delimiter=',', nrows = nRowsRead, index_col=0)\ndf1.dataframeName = 'dc.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f715aa56":"df1.head(5)","b6f1280c":"plotPerColumnDistribution(df1, 10, 5)","b8de0ea3":"plotCorrelationMatrix(df1, 8)","2248888e":"plotScatterMatrix(df1, 20, 10)","28bdaaeb":"df1.info()","c77b7438":"df1.shape","3032c155":"df1.isna().sum()","9de1497f":"df1.describe()","e89347b6":"# overall data plot\n\ndf1.iloc[:,:-1].plot()\nplt.gca().invert_xaxis()","d71da738":"# volume plot\n\nplt.figure(figsize=(15,8))\ndf1['volume'].plot(color='black').set(ylabel='volume')\nplt.gca().invert_xaxis()","9ebca2df":"#  DIGITAL CURRENCY MARKET (USD & SAR)\n                --daily historical time series--  \n                \n                \n----\n- This dataset was prepared using  [Alpha Vantage API](https:\/\/rapidapi.com\/alphavantage\/api\/alpha-vantage) \n- API documentation can be found [here](https:\/\/www.alphavantage.co\/documentation\/)\n- This API returns the daily historical time series for a digital currency (e.g., BTC) traded on a specific market (here, SAR\/Sudi Riyal), refreshed daily at midnight (UTC). \n- Prices and volumes are quoted in both the market-specific currency (SAR) and USD.\n- Historical date range: 2018-05-11 to 30.01.2021\n\n----\n","8bcdac97":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","f0348738":"## Exploratory Analysis\n\n### Imports","460927dc":"Now you're ready to read in the data and use the plotting functions to visualize the data.","e47c0701":"Let's take a quick look at what the data looks like:","92461266":"### Let's check 1st file: \/kaggle\/input\/dc.csv","d8b54617":"Correlation matrix:","32f680e3":"Scatter and density plots:","7587d292":"Distribution graphs (histogram\/bar graph) of sampled columns:","c77667f3":"There is 1 csv file in the current version of the dataset:\n"}}