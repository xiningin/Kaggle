{"cell_type":{"abc2c609":"code","ff4425ec":"code","a48fb682":"code","7d5d80cc":"code","1db8f359":"code","a6da2c53":"code","15872f02":"code","a94d68d1":"code","57700eea":"code","5b3d925f":"code","2cba1c52":"code","1599eb65":"code","9fc8902f":"code","a469c52c":"code","eb37a5b8":"code","ee6cc3b9":"code","5c65e142":"code","283a6fda":"code","a1dc7b1e":"code","c548e234":"code","fe4bad2b":"code","36593921":"code","4c4e94ab":"code","1916a782":"code","febf3f44":"code","3e1bc27d":"code","0fc9749b":"code","1b35f91e":"code","1df48835":"code","31f08dc8":"code","7fed3d8d":"code","faccef43":"code","4ce8dac3":"code","b620c449":"code","ab9b75be":"code","e55bfc54":"code","e12c3381":"code","677c24e0":"code","e2a31999":"code","35a2c8d6":"code","de47862c":"code","b5453385":"code","e7b0328e":"code","01e8be32":"code","b4b21f68":"code","58a10e3c":"code","4e10889a":"code","dab91ec5":"code","7584b385":"code","0de2e06a":"code","633e9724":"code","70da5b8b":"markdown","28a6aee5":"markdown","89e456b3":"markdown","1f22c969":"markdown","d6c22fab":"markdown","287d63a5":"markdown","27d42bb8":"markdown","b6768386":"markdown"},"source":{"abc2c609":"import numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport plotly.express as px ","ff4425ec":"cars_df = pd.read_csv('..\/input\/cars1\/CARS.csv')","a48fb682":"cars_df.head()","7d5d80cc":"cars_df.columns","1db8f359":"cars_df.shape","a6da2c53":"cars_df.isnull().sum()","15872f02":"cars_df = cars_df.dropna()","a94d68d1":"# Obtain the summary of the dataframe\ncars_df.info()","57700eea":"# Convert MSRP and Invoice datatype to integer so we need to remove $ sign and comma (,) from these 2 columns\n\ncars_df[\"MSRP\"] = cars_df[\"MSRP\"].str.replace(\"$\", \"\")\ncars_df[\"MSRP\"] = cars_df[\"MSRP\"].str.replace(\",\", \"\")\ncars_df[\"MSRP\"] = cars_df[\"MSRP\"].astype(int)","5b3d925f":"cars_df[\"MSRP\"]","2cba1c52":"cars_df[\"Invoice\"] = cars_df[\"Invoice\"].str.replace(\"$\", \"\")\ncars_df[\"Invoice\"] = cars_df[\"Invoice\"].str.replace(\",\", \"\")\ncars_df[\"Invoice\"] = cars_df[\"Invoice\"].astype(int)","1599eb65":"# Let's view the updated MSRP and Invoice Columns\ncars_df[\"Invoice\"]","9fc8902f":"# Display the updated summary of the dataframe\ncars_df.head()","a469c52c":"cars_df.describe()","eb37a5b8":"sns.pairplot(data = cars_df)","ee6cc3b9":"cars_df.Make.unique()","5c65e142":"fig = px.histogram(cars_df, x = \"Make\",\n                  labels = {\"Make\":\"Manufacturer\"},\n                  title = \"MAKE OF THE CAR\",\n                  color_discrete_sequence = [\"green\"])\n                  \nfig.show()","283a6fda":"cars_df.Type.unique()","a1dc7b1e":"cars_df.Origin.unique()","c548e234":"cars_df.DriveTrain.unique()","fe4bad2b":"# Plot the make of the car and its location\nfig = px.histogram(cars_df, x = \"Make\",\n                  color = \"Origin\",\n                  labels = {\"Make\":\"Manufacturer\"},\n                  title = \"MAKE OF THE CAR Vs LOCATION\")\n                  \nfig.show()","36593921":"cars_df[cars_df['Type'] == 'Hybrid']['Make']","4c4e94ab":"cars_df[cars_df['Type'] == 'Sports']['Make'].value_counts()","1916a782":"cars_df.head()","febf3f44":"# Perform One-Hot Encoding for \"Make\", \"Model\", \"Type\", \"Origin\", and \"DriveTrain\"\ndf_dum = pd.get_dummies(cars_df , columns = ['Make' , 'Model' , 'Type' , 'Origin' , 'DriveTrain'])","3e1bc27d":"df_dum.head()","0fc9749b":"# Invoice feature does not contribute to car price prediction \n\ndf_data = df_dum.drop(['Invoice'] , axis = 1)","1b35f91e":"df_data.shape","1df48835":"# Feeding input features to X and output (MSRP) to y\nX = df_data.drop(\"MSRP\", axis = 1)\ny = df_data[\"MSRP\"]","31f08dc8":"X = np.array(X)","7fed3d8d":"y = np.array(y)","faccef43":"from sklearn.model_selection import train_test_split","4ce8dac3":"X_train, X_test, y_train, y_test= train_test_split(X, y, test_size = 0.2)","b620c449":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, accuracy_score\nfrom math import sqrt","ab9b75be":"LinearRegression_model = LinearRegression()\nLinearRegression_model.fit(X_train , y_train)","e55bfc54":"accuracy_LinearRegression = LinearRegression_model.score(X_test, y_test)\naccuracy_LinearRegression","e12c3381":"from sklearn.tree import DecisionTreeRegressor","677c24e0":"DecisionTree_model = DecisionTreeRegressor()\nDecisionTree_model.fit(X_train , y_train)","e2a31999":"accuracy_DecisionTree = DecisionTree_model.score(X_test, y_test)\naccuracy_DecisionTree","35a2c8d6":"from sklearn.ensemble import RandomForestRegressor","de47862c":"RandomForest_model = RandomForestRegressor(n_estimators = 5 , max_depth = 5)\nRandomForest_model.fit(X_train , y_train)","b5453385":"accuracy_RandomForest= RandomForest_model.score(X_test, y_test)\naccuracy_RandomForest","e7b0328e":"from xgboost import XGBRegressor","01e8be32":"# we can tune the hyperparameters to get better model\n\nmodel = XGBRegressor(learning_rate=0.4 ,n_estimators=20 , max_depth = 5)\nmodel.fit(X_train , y_train)","b4b21f68":"accuracy_XGBoost = model.score(X_test, y_test)\naccuracy_XGBoost","58a10e3c":"y_predict_linear = LinearRegression_model.predict(X_test)\n\nfig = sns.regplot(y_predict_linear, y_test, color = 'red', marker = \"^\")\nfig.set(title = \"Linear Regression Model\", xlabel = \"Predicted Price of the used cars ($)\", ylabel = \"Actual Price of the used cars ($)\")","4e10889a":"RMSE= float(format(np.sqrt(mean_squared_error(y_test, y_predict_linear)), \".3f\"))\nMSE= mean_squared_error(y_test, y_predict_linear)\nMAE= mean_absolute_error(y_test, y_predict_linear)\nr2= r2_score(y_test, y_predict_linear)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2) ","dab91ec5":"y_predict_RandomForest = RandomForest_model.predict(X_test)\n\nfig = sns.regplot(y_predict_RandomForest, y_test, color = 'blue', marker = \"s\")\nfig.set(title = \"Random Forest Regression Model\", xlabel = \"Predicted Price of the used cars ($)\", ylabel= \"Actual Price of the used cars ($)\")","7584b385":"RMSE= float(format(np.sqrt(mean_squared_error(y_test, y_predict_RandomForest)), \".3f\"))\nMSE= mean_squared_error(y_test, y_predict_RandomForest)\nMAE= mean_absolute_error(y_test, y_predict_RandomForest)\nr2= r2_score(y_test, y_predict_RandomForest)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2) ","0de2e06a":"y_predict_XGBoost = model.predict(X_test)\n\nfig = sns.regplot(y_predict_XGBoost, y_test, color = 'green', marker = \"D\")\nfig.set(title = \"XGBoost Model\", xlabel = \"Predicted Price of the used cars ($)\", ylabel = \"Actual Price of the used cars ($)\")","633e9724":"RMSE = float(format(np.sqrt(mean_squared_error(y_test, y_predict_XGBoost)), \".3f\"))\nMSE = mean_squared_error(y_test, y_predict_XGBoost)\nMAE = mean_absolute_error(y_test, y_predict_XGBoost)\nr2 = r2_score(y_test, y_predict_XGBoost)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2) ","70da5b8b":"#  TRAIN AND EVALUATE A DECISION TREE AND RANDOM FOREST MODELS ","28a6aee5":"# this notebook demonstrates how XGBoost performs betters than decision tree , random forest , multiple linear regression in prediction the prices of the cars 'Regression task'","89e456b3":"#  PREPARE THE DATA BEFORE MODEL TRAINING","1f22c969":"# IMPORT LIBRARIES\/DATASETS AND PERFORM EXPLORATORY DATA ANALYSIS","d6c22fab":"#  TRAIN AND EVALUATE A MULTIPLE LINEAR REGRESSION","287d63a5":"#  COMPARE MODELS AND CALCULATE REGRESSION KPIs","27d42bb8":"#  PERFORM DATA VISUALIZATION","b6768386":"#  TRAIN AN XG-BOOST REGRESSOR MODEL"}}