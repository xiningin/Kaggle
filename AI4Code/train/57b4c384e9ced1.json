{"cell_type":{"9ab9e9eb":"code","bc94ba6b":"code","44cca8a2":"code","caf72fda":"code","9e53a131":"code","8d52c61a":"code","2a4aa2d5":"code","97ab6f36":"code","ef35fba2":"code","9e7b75b1":"code","599b99a1":"code","a30f75a3":"code","01c6d173":"code","70d77e97":"code","704cd7a8":"code","1957b91c":"code","ce7209cd":"code","93f546e3":"code","2f1b6b1d":"code","06318b6c":"code","d468f7d5":"code","0589d02e":"code","c051e576":"code","db036a3e":"code","b3f2816c":"code","33ce757b":"code","ddca37f2":"code","9f873644":"code","5a1038a4":"code","b7cfb1bd":"code","9130c94b":"code","2d7c9a57":"code","045d4123":"code","e31cccd9":"code","abe3b782":"code","df8a232c":"code","524d2dbe":"code","b81dee65":"code","94b055c6":"code","9741caeb":"code","59dae1d1":"code","9d9f6bea":"code","b2f2d9d6":"code","d822a006":"code","3373143b":"code","e303e9e3":"code","a5053985":"code","6c74dff7":"code","f58b9880":"code","149fff5d":"code","a6e559b8":"code","bba3e302":"code","b4f00529":"code","18dcdc72":"code","431b6b58":"code","c6ac6c1c":"code","068ca048":"code","a6504a1e":"code","06e0681b":"code","1a99abc1":"code","4e858b1f":"code","ceff8d2d":"code","60a3edc0":"code","dfc66ab2":"code","e9ee653c":"code","4ac48ac5":"code","ff3861bc":"code","bda04d6e":"code","5cb14134":"code","f6ea7982":"code","8cd1a1ac":"code","78e9ccae":"code","819866fe":"code","1453ebeb":"code","d96cce16":"code","3dfe1748":"code","544c39d2":"code","da74f0ed":"code","f49ae8fe":"code","1ab9ad1b":"code","a170c361":"code","cf6f1953":"code","ef117678":"code","c176e45e":"code","449cdd78":"code","e9780e73":"code","3d84a486":"code","833062c8":"code","089360d0":"code","3f7d37ff":"code","c1d9b84c":"code","38de43a8":"code","82aac9c5":"code","379f2e0a":"code","2a81eda5":"code","779b4092":"code","77e60389":"markdown","271c87f8":"markdown","36173fa3":"markdown","525744c0":"markdown","b2d52260":"markdown","ddb4d2f3":"markdown","6a693c3e":"markdown","bfea7498":"markdown","371909b3":"markdown","bf5a3d0e":"markdown","5eaf3935":"markdown","67639372":"markdown","3ece220f":"markdown","80b5b13f":"markdown","b93a1d24":"markdown","eb224a73":"markdown","4a3ce899":"markdown","4cc610e4":"markdown","b835ec9b":"markdown","788185dc":"markdown","9086ad55":"markdown","8374a568":"markdown","ab6dfa25":"markdown","3e5667d6":"markdown","7423633f":"markdown","9c394222":"markdown","fed37a8a":"markdown","4630d8e4":"markdown","7a09017d":"markdown","e18102c1":"markdown","50738905":"markdown","fc145415":"markdown","92f9c66b":"markdown","84c38ea4":"markdown","c34cf097":"markdown","b6fada44":"markdown","080146a7":"markdown","7672be69":"markdown","c59103b0":"markdown","bb3a8217":"markdown","e1d2f63a":"markdown","7f014183":"markdown","53b712a3":"markdown","7b0c0cdd":"markdown","f4521d86":"markdown","18358758":"markdown","022e5c92":"markdown","746d7ddb":"markdown","9a3b5efa":"markdown","ceb3b315":"markdown","dd81dc01":"markdown","beec0723":"markdown","1d09bc66":"markdown","3d0f9712":"markdown","099d7924":"markdown","8aec5ffb":"markdown"},"source":{"9ab9e9eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc94ba6b":"plt.style.available\n#plt.style.use(buraya yaz\u0131labilecek argumanlar)","44cca8a2":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","caf72fda":"train_df.columns","9e53a131":"train_df.head()","8d52c61a":"train_df.describe()","2a4aa2d5":"train_df.info()","97ab6f36":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","ef35fba2":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","9e7b75b1":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","599b99a1":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50) #bins her bir yolcu i\u00e7in bar \n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","a30f75a3":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","01c6d173":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","70d77e97":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","704cd7a8":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","1957b91c":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","ce7209cd":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","93f546e3":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","2f1b6b1d":"# Drop Outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","06318b6c":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","d468f7d5":"train_df.head()","0589d02e":"train_df.columns[train_df.isnull().any()]","c051e576":"train_df.isnull().sum()","db036a3e":"train_df[train_df[\"Embarked\"].isnull()]","b3f2816c":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","33ce757b":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","ddca37f2":"train_df[train_df[\"Embarked\"].isnull()]","9f873644":"train_df[train_df[\"Fare\"].isnull()]","5a1038a4":"train_df[train_df[\"Pclass\"] == 3]","b7cfb1bd":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","9130c94b":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","2d7c9a57":"train_df[train_df[\"Fare\"].isnull()]","045d4123":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\") #annot=True dersek minik karelerin i\u00e7inde coorelation skorlar\u0131n\u0131 da g\u00f6rm\u00fc\u015f oluruz (daha kolay anlayabilmek i\u00e7in)\nplt.show()","e31cccd9":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","abe3b782":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","df8a232c":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","524d2dbe":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","b81dee65":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","94b055c6":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","9741caeb":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.5)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","59dae1d1":"train_df[train_df[\"Age\"].isnull()]","9d9f6bea":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","b2f2d9d6":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","d822a006":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","3373143b":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","e303e9e3":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","a5053985":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","6c74dff7":"train_df[train_df[\"Age\"].isnull()]","f58b9880":"train_df[\"Name\"].head(10)","149fff5d":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","a6e559b8":"train_df[\"Title\"].head(10)","bba3e302":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","b4f00529":"# Convert to Categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","18dcdc72":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","431b6b58":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","c6ac6c1c":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\ntrain_df.head()","068ca048":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","a6504a1e":"train_df[\"Ticket\"].value_counts() #Ticket feature \u0131n\u0131n i\u00e7indekilerden hangisinden ka\u00e7 tane oldu\u011funu g\u00f6rmek i\u00e7in. Alakas\u0131z!","06e0681b":"train_df.head()","1a99abc1":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","4e858b1f":"train_df.head()","ceff8d2d":"train_df[\"Fsize\"].value_counts()","60a3edc0":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","dfc66ab2":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","e9ee653c":"train_df[\"family_size\"].value_counts()","4ac48ac5":"train_df.head(10)","ff3861bc":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","bda04d6e":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","5cb14134":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","f6ea7982":"train_df[\"Embarked\"].head()","8cd1a1ac":"sns.countplot(x =\"Embarked\", data = train_df,)\nplt.show()","78e9ccae":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","819866fe":"train_df[\"Ticket\"].head(20)","1453ebeb":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","d96cce16":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","3dfe1748":"train_df[\"Ticket\"].head(20)","544c39d2":"train_df = pd.get_dummies(train_df, columns=[\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","da74f0ed":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","f49ae8fe":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","1ab9ad1b":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","a170c361":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"],axis = 1, inplace = True)","cf6f1953":"train_df.columns","ef117678":"train_df[\"Sex_female\"] = train_df[\"Sex_0\"]\ntrain_df.drop(labels = [\"Sex_0\"],axis = 1, inplace = True)","c176e45e":"train_df[\"Sex_male\"] = train_df[\"Sex_1\"]\ntrain_df.drop(labels = [\"Sex_1\"],axis = 1, inplace = True)","449cdd78":"train_df.head()","e9780e73":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","3d84a486":"train_df_len","833062c8":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","089360d0":"test.head()","3f7d37ff":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","c1d9b84c":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","38de43a8":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","82aac9c5":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","379f2e0a":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","2a81eda5":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","779b4092":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","77e60389":"<a id = \"11\"><\/a><br>\n# Visualization","271c87f8":"<a id = \"24\"><\/a><br>\n## Embarked","36173fa3":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","525744c0":"# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, Age and PassengerId","b2d52260":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","ddb4d2f3":"* Ya\u015f ile cinsiyet aras\u0131nda ili\u015fki yoktur fakat Parch SibSp ve Pclass ile ili\u015fkisi vard\u0131r.","6a693c3e":"* E\u015f-Karde\u015f say\u0131s\u0131 (SibSp) say\u0131s\u0131 fazla olanlar\u0131n hayatta kala \u015fans\u0131 d\u00fc\u015f\u00fckt\u00fcr.\n* E\u015f-Karde\u015f say\u0131s\u0131 (SibSp) say\u0131s\u0131 0,1 ya da 2 ye e\u015fitse hayatta kalma \u015fans\u0131 fazlad\u0131r.\n* SibSp si 3den d\u00fc\u015f\u00fck olanlar\u0131n hayatta kalma \u015fans\u0131 y\u00fcksek oldu\u011fundan dolayy\u0131 onlardan yeni bir feature olu\u015fturulabilinir.","bfea7498":"* float64(2) : Fare and Age\n* int64(5): Pclass, sibsp, parch, PassengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","371909b3":"<a id = \"21\"><\/a><br>\n# Feature Engineering","bf5a3d0e":"<br>\nPclass de\u011feri 3e e\u015fit olan datalar ile bo\u015f olan Fare variable lar\u0131n\u0131 doldurduk. Bo\u015fluklara Pclass==3 olanlar\u0131n mean lerini hesaplay\u0131p doldurduk.","5eaf3935":"* Cinsiyetin ya\u015f tahmininde bir etkisi yok. Da\u011f\u0131l\u0131mlar \u00e7ok benzer.","67639372":"* Pclass \u0131 1 olanlar\u0131n ya\u015f\u0131 > Pclass \u0131 2 olanlar\u0131n ya\u015f\u0131 > Pclass \u0131 3 olanlar\u0131n ya\u015f\u0131","3ece220f":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","80b5b13f":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","b93a1d24":"1. <font color = 'blue'>\nContent:       \n  \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","eb224a73":"K\u00fc\u00e7\u00fck ailelerin yani aile birey toplamlar\u0131 parch + sibsp + 1 > 5 olanlar\u0131n hayatta kalma ihtimali daha y\u00fcksektir.\nOradaki 1i eklememizin nedeni parch ve sibsp si 0 olanlar\u0131 kaybetmemek i\u00e7in.","4a3ce899":"<a id = \"7\"><\/a><br>\n# Outlier Detection","4cc610e4":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","b835ec9b":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","788185dc":"* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","9086ad55":"<a id = \"27\"><\/a><br>\n## Sex","8374a568":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","ab6dfa25":"* Korelasyon skorlar\u0131n\u0131 daha iyi analiz etmek i\u00e7in male ve female de\u011ferlerine 1 ve 0 bast\u0131rd\u0131k.","3e5667d6":"<a id = \"29\"><\/a><br>\n# Modeling","7423633f":"# TITANIC EDA MACHINE LEARNING \n ### Introduction","9c394222":"<a id = \"22\"><\/a><br>\n## Name -- Title","fed37a8a":"**Mesela** Fare de\u011fi\u015fkeninin bo\u015f oldu\u011fu sat\u0131rlar\u0131 doldurmak i\u00e7in ili\u015fkilendirebilece\u011fimiz bir variable bakt\u0131k ve bunun i\u00e7in \"Pclass\" \u0131n uygun olabilece\u011fin\u015f d\u00fc\u015f\u00fcnd\u00fck.Mesela \u015f\u00f6yle d\u00fc\u015f\u00fcn\u00fcn; Bir \u015fehrin emlak datalar\u0131 elinizde ve o \u015fehirdeki evlerden baz\u0131lar\u0131n\u0131n fiyatlar\u0131, m^2 leri, ya\u015f\u0131 vs bilgileri eksik. Bu bilgileri bulmak ve doldrmak i\u00e7in di\u011fer variable lar ile ili\u015fkisini d\u00fc\u015f\u00fcn\u00fcp uygun variable \u0131n meean de\u011ferleri ile NaN de\u011ferleri datay\u0131 bozmayacak \u015fekilde doldurabiliriz.","4630d8e4":"<img src=\"<img src=\"https:\/\/media.giphy.com\/media\/xT5LMQ8rHYTDGFG07e\/giphy.gif\">\"","7a09017d":"<a id = \"25\"><\/a><br>\n## Ticket","e18102c1":"Yukar\u0131da Pclass ve Survived variable lar\u0131na g\u00f6re gruplad\u0131k. sona mean yazmazsak ya da ba\u015fka bir i\u015flem \u00e7\u0131kt\u0131 vermez. En sonda da Survived variable \u0131na g\u00f6re s\u0131ralad\u0131k sonucu","50738905":"<img src= \"https:\/\/www.historic-uk.com\/wp-content\/uploads\/2017\/04\/the-sinking-of-the-rms-titanic.jpg\" alt =\"Titanic\" style='width: 1500px;'>","fc145415":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","92f9c66b":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin","84c38ea4":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","c34cf097":"<a id = \"26\"><\/a><br>\n## Pclass","b6fada44":"<a id = \"12\"><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","080146a7":"<a id = \"1\"><\/a><br>\n## Load and Check Data","7672be69":"<a id = \"4\"><\/a><br>\n## Categorical Variable Analysis","c59103b0":"<a id = \"23\"><\/a><br>\n## Family Size","bb3a8217":"* Bu iki grafi\u011fe bakarak yorumlar yap\u0131labilir.","e1d2f63a":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. PassengerId\n1. Survived\n1. Pclass\n1. Name\n1. Sex\n1. Age\n1. SibSp\n1. Parch\n1. Ticket\n1. Fare\n1. Cabin\n1. Embarked","7f014183":"#### Ne Yapt\u0131k Biz ?\nYa\u015f ile cinsiyet aras\u0131nda ili\u015fki yoktur fakat Parch SibSp ve Pclass ile ili\u015fkisi vard\u0131r demi\u015ftik. \u00dcstteki kodda ya\u015f tahmininde bulunurken dedik ki ilk \u00f6nce \"Age\" feature \u0131 NaN olanlar\u0131 al ve index_nan_age olarak yeniden adland\u0131r. \u00dczerinde i\u015flem uygulayabilmek i\u00e7in. Alt\u0131nda ki d\u00f6ng\u00fcde i ye index_nan_age i\u00e7inde d\u00f6n dedik komutlar\u0131 index_nan_age i\u00e7inde uygulayabilnesi i\u00e7in. For d\u00f6ng\u00fcs\u00fcnde ki komutta dedik ki \"Age\" i bo\u015f olanlar\u0131n \"SibSp\", \"Parch\", ve \"Pclass\" \u0131na bak. E\u011fer bu \u00fc\u00e7 feature dan Age NaN olanlar ile \"SibSp\", \"Parch\", ve \"Pclass\" \u0131 e\u015fit ise bu \u00fc\u00e7 feature dan e\u015fit olan\u0131n median \u0131n\u0131 bas. Yani k\u0131saca bu \u00fc\u00e7 feature a g\u00f6re ya\u015f bilgisi NaN olanlar\u0131n ya\u015f\u0131n\u0131 predict ettik. Fakat bu verdi\u011fimiz komutlara uymayan bir ki\u015fi varsa ne yapaca\u011f\u0131z ? Yine bir d\u00f6ng\u00fc a\u00e7t\u0131k ve i\u00e7erisine ya \u00fcstteki komutu age_pred i bas zaten \u00f6nceli\u011fimiz bunu yapmas\u0131 , yoksa \"Age\" feature \u0131n\u0131n median \u0131n\u0131 bas dedik. Yani age_pred ile ya\u015f\u0131n\u0131 dolduramad\u0131klar\u0131m\u0131za da age_med ile doldurduk. Sonra da a\u015fa\u011f\u0131da yazd\u0131\u011f\u0131m\u0131z kodu test etmek i\u00e7in \"Age\" feature \u0131 NaN olan var m\u0131 dite sorgulad\u0131k ve olmad\u0131\u011f\u0131n\u0131 g\u00f6rd\u00fck :)","53b712a3":"<a id = \"30\"><\/a><br>\n## Train Test Split","7b0c0cdd":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","f4521d86":"* Title feature \u0131 0 1 2 ve 3 lerden olu\u015fuyordu onlar\u0131 spread etttik. 4 yeni feature elde ettik.","18358758":"Fare de\u011fi\u015fkeni ile Survived de\u011fi\u015fkeninin aras\u0131ndaki korelasyon de\u011feri 0.26 d\u0131r.","022e5c92":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","746d7ddb":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","9a3b5efa":"<a id = \"5\"><\/a><br>\n## Numerical Variable Analysis","ceb3b315":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","dd81dc01":"* Title lar\u0131n yani \u00fcnvanlar\u0131n hayatta kalmaya \u00f6nemini inceleyerek daha detayl\u0131 sonu\u00e7lar elde edebiliriz ve ar\u0131k isimlerin bir \u00f6nemi kalm\u0131yor onlar\u0131 dropluyoruz. Acaba \u00fcnvan\u0131 y\u00fcksek olanlar\u0131n hayatta kalma oran\u0131 daha m\u0131 y\u00fcksek ? ","beec0723":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","1d09bc66":"<a id = \"9\"><\/a><br>\n## Find Missing Value","3d0f9712":"<a id = \"16\"><\/a><br>\n## Age -- Survived","099d7924":"* SibSp ve Parch featurelar\u0131n\u0131 birle\u015ftirebiliriz th=3 .\n* K\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fanslar\u0131 y\u00fcksek\n* Parch(Ebeveyn-\u00c7ocuk) = 3 iken standart sapman\u0131n fazla olmas\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundur.(siyah ince \u00e7izgi std aral\u0131\u011f\u0131n\u0131 ifade eder)","8aec5ffb":" ##### De\u011fi\u015fkenlerin a\u00e7\u0131klamalar\u0131\n1. PassengerId : Yolcu Numaras\u0131 \n1. Survived : 0 ve 1 lerden olu\u015fuyor. 0 \u00f6l\u00fc, 1 hayatta kald\u0131\u011f\u0131n\u0131 belirtir.\n1. Pclass : Yolcular\u0131n s\u0131n\u0131flar\u0131\n1. Name : Yolcular\u0131n isim ve soy isim bilgileri\n1. Sex : Yolcular\u0131n cinsiyet bilgileri \n1. Age : Yolcular\u0131n ya\u015f bilgileri  \n1. SibSp : Siblings(Karde\u015f)and Spouses(E\u015f) . Gemide bulunanlar i\u00e7erisinde.\n1. Parch: Parent(Ebeveyn) and Children(\u00c7ocuk) . Gemide bulunanlar i\u00e7erisinde.\n1. Ticket: Bilet No\n1. Fare: Bilet \u00dccreti\n1. Cabin: Kabin No\n1. Embarked: Yolcunun hangi limandan bindi\u011fini belirtir (C = Cherbourg, Q = Queenstown, S = Southampton)"}}