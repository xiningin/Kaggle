{"cell_type":{"1871ba66":"code","5b6ee747":"code","423f34e5":"code","9e3d4ee2":"code","36db10bd":"code","c734b2f2":"code","bcee3a6f":"code","6b9d812e":"code","5b0bc1d3":"code","c18185d4":"code","4c337b40":"code","632c68eb":"code","29a25765":"code","409dc3cc":"code","f3e72fd6":"code","a6ea9008":"code","288fc05d":"code","733a63ed":"code","af5eecee":"code","4f04ee58":"code","609873e0":"code","38854f59":"code","2b443a55":"code","967df879":"code","7f15b2bc":"markdown","c8931cc0":"markdown","a3db3fe0":"markdown","2201dc11":"markdown","ec53ad71":"markdown","eabc3b00":"markdown","587b05d7":"markdown","2f6bbd0b":"markdown","86477b47":"markdown"},"source":{"1871ba66":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom catboost import CatBoostClassifier, Pool, cv\nimport os\nimport math\nfrom sklearn.metrics import roc_auc_score\nimport fastai_structured as fs\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5b6ee747":"train_df = pd.read_csv(\"\/kaggle\/input\/ps-reducing-memory-size-for-ieee\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/ps-reducing-memory-size-for-ieee\/test.csv\")\ntrain_df.head()","423f34e5":"fs.train_cats(train_df)\nfs.apply_cats(test_df, train_df)","9e3d4ee2":"nas = {}\ndf_trn, y_trn, nas = fs.proc_df(train_df, 'isFraud', na_dict=nas)   ## Avoid creating NA columns as total cols may not match later\ndf_test, _, _ = fs.proc_df(test_df, na_dict=nas)\ndf_trn.head()","36db10bd":"def auc(x,y): \n    return roc_auc_score(x,y)\ndef print_score(m):\n    res = [auc(m.predict(train_X), train_y), auc(m.predict(val_X), val_y)]\n    print(res)","c734b2f2":"train_X, val_X, train_y, val_y = train_test_split(df_trn, y_trn, test_size=0.7, random_state=42)","bcee3a6f":"del train_df, test_df","6b9d812e":"del df_trn, y_trn","5b0bc1d3":"cat_params = {\n    'loss_function': 'Logloss',\n    'custom_loss':['AUC'],\n    'logging_level':'Silent',\n    'task_type' : 'CPU',\n    'early_stopping_rounds' : 100\n}\n\nmodel1 = CatBoostClassifier(**cat_params)","c18185d4":"model2 = RandomForestClassifier(n_estimators = 100, min_samples_leaf=10, max_features=0.5,\n                           max_depth = 4, n_jobs=-1)","4c337b40":"Catfeats = ['ProductCD'] + \\\n           [\"card\"+f\"{i+1}\" for i in range(6)] + \\\n           [\"addr\"+f\"{i+1}\" for i in range(2)] + \\\n           [\"P_emaildomain\", \"R_emaildomain\"] + \\\n           [\"M\"+f\"{i+1}\" for i in range(9)] + \\\n           [\"DeviceType\", \"DeviceInfo\"] + \\\n           [\"id_\"+f\"{i}\" for i in range(12, 39)]\n\n# removing columns dropped earlier when we weeded out the empty columns\n\n#Catfeats = list(set(Catfeats)- set(cols_dropped))\n\nmodel1.fit(train_X, train_y, cat_features = Catfeats)","632c68eb":"model2.fit(train_X, train_y)","29a25765":"print_score(model1)","409dc3cc":"print_score(model2)","f3e72fd6":"preds1 = model1.predict(val_X)","a6ea9008":"preds2 = model2.predict(val_X)","288fc05d":"test_preds1 = model1.predict(df_test)","733a63ed":"test_preds2 = model2.predict(df_test)","af5eecee":"stacked_predictions = np.column_stack((preds1, preds2))\nstacked_test_predictions = np.column_stack((test_preds1, test_preds2))","4f04ee58":"meta_model = linear_model.LogisticRegression()","609873e0":"meta_model.fit(stacked_predictions, val_y)","38854f59":"final_predictions = meta_model.predict(stacked_test_predictions)","2b443a55":"submission = pd.read_csv('\/kaggle\/input\/ps-reducing-memory-size-for-ieee\/sample_submission.csv')\nsubmission.head()","967df879":"submission['isFraud'] = final_predictions \nsubmission.to_csv('stacking_v1.csv', index=False)","7f15b2bc":"### Specify & fit models on training set","c8931cc0":"### Specify meta model & fit it on stacked validation set predictions","a3db3fe0":"### Submit predictions","2201dc11":"### Handling categorical data","ec53ad71":"### Use meta model to make preditions on the stacked predictions of test set","eabc3b00":"### Defining function to calculate the evaluation metric","587b05d7":"### Splitting into training & validation sets","2f6bbd0b":"### Make predictions on validation AND test set","86477b47":"### Form a new dataset for validation & test by stacking the predictions"}}