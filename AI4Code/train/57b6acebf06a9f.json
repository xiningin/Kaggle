{"cell_type":{"e46fe3ec":"code","6858d8a4":"code","0fe27d34":"code","7699a191":"code","6654d085":"code","cdabb0cd":"code","54bf83c3":"code","37eb25cb":"code","bd18b0a9":"code","557e8343":"code","29c1f2da":"code","fc552010":"code","40338293":"code","fba411a7":"markdown","916471a1":"markdown","3ab3cf0c":"markdown","b9ab296a":"markdown","b2141add":"markdown","9e88adca":"markdown","90e4d44e":"markdown","446c1a65":"markdown"},"source":{"e46fe3ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6858d8a4":"import urllib3\nimport matplotlib.pyplot as plt\nimport cv2\nimport time\nfrom tqdm import tqdm\nfrom PIL import Image\n# PIL is python imaging library.\nfrom urllib.request import urlopen\nimport pytesseract\n\n\n# Libraries fro DL. \nfrom keras.applications.vgg16 import VGG16\nfrom keras.layers import Flatten, Dense, Conv2D, MaxPooling2D, Input, Dropout\nfrom keras.models import Model, Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam","0fe27d34":"df = pd.read_json(\"\/kaggle\/input\/vehicle-number-plate-detection\/Indian_Number_plates.json\", lines=True)\ndf.head()\n","7699a191":"\nprint(df.shape)\n","6654d085":"# Make a seprate directory to save number plates.\n# You have to run this operation only once.\n\nos.mkdir(\"Indian Number Plates\")\n","cdabb0cd":"# In dataset dictionary we will capture specific properties of every image.\n# Have run this portion in local.\n\ndataset = dict()\ndataset[\"image_name\"] = list()\ndataset[\"image_width\"] = list()\ndataset[\"image_height\"] = list()\ndataset[\"top_x\"] = list()\ndataset[\"top_y\"] = list()\ndataset[\"bottom_x\"] = list()\ndataset[\"bottom_y\"] = list()\n","54bf83c3":"#Code was not working here , hence I ran it in local\n\ncounter = 0\n\nfor index, row in tqdm(df.iterrows()):\n    # Iterate over DataFrame rows as (index, Series) pairs.\n    # Here series is a pandas series.\n    # print(\"Trying to fetch image: \",row[\"content\"])\n    res = urlopen(row[\"content\"])\n    # This line here is trying to access the url being pointed to in each row, where iamge is saved.\n    \n    img = Image.open(res)\n    img = img.convert('RGB')\n    # Returns a converted copy of this image.\n    \n    img.save(\"Indian Number Plates\/licensed_car{}.jpeg\".format(counter), \"JPEG\")\n    # Saves the image under the given filename.\n    \n    # Create a dataset for all the images with properties.\n    dataset[\"image_name\"].append(\"licensed_car{}\".format(counter))\n\n    data = row[\"annotation\"]\n    \n    dataset[\"image_width\"].append(data[0][\"imageWidth\"])\n    dataset[\"image_height\"].append(data[0][\"imageHeight\"])\n    dataset[\"top_x\"].append(data[0][\"points\"][0][\"x\"])\n    dataset[\"top_y\"].append(data[0][\"points\"][0][\"y\"])\n    dataset[\"bottom_x\"].append(data[0][\"points\"][1][\"x\"])\n    dataset[\"bottom_y\"].append(data[0][\"points\"][1][\"y\"])\n    \n    counter += 1\nprint(\"Downloaded {} car images.\".format(counter))\n","37eb25cb":"\ndf_changed = pd.DataFrame(dataset)\n\ndf_changed.to_csv(\"ConvertedImagesProperties.csv\", index=False)\n","bd18b0a9":"license_plate_df = pd.read_csv(\"ConvertedImagesProperties.csv\")\nlicense_plate_df[\"image_name\"] = license_plate_df[\"image_name\"] + \".jpeg\"\nlicense_plate_df.drop([\"image_width\", \"image_height\"], axis=1, inplace=True)\nlicense_plate_df.head()","557e8343":"random_test_samples = np.random.randint(0, len(df), 5)\nreduced_df = license_plate_df.drop(random_test_samples, axis=0)","29c1f2da":"WIDTH = 224\nHEIGHT = 224\nCHANNEL = 3\n\ndef get_number(index):\n    image = cv2.imread(\"Indian Number Plates\/\" + license_plate_df[\"image_name\"].iloc[index])\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, dsize=(WIDTH, HEIGHT))\n\n    tx = int(license_plate_df[\"top_x\"].iloc[index] * WIDTH)\n    ty = int(license_plate_df[\"top_y\"].iloc[index] * HEIGHT)\n    bx = int(license_plate_df[\"bottom_x\"].iloc[index] * WIDTH)\n    by = int(license_plate_df[\"bottom_y\"].iloc[index] * HEIGHT)\n    print(\"Original image with rectangle boundary->\")\n    image_with_boundary = cv2.rectangle(image, (tx, ty), (bx, by), (0, 0, 255), 1)\n    plt.imshow(image_with_boundary)\n    plt.show()\n\n    #Crop the image\n    im2 = image.copy()\n    im2_crop = im2[ty:by, tx:bx]\n    print(\"Cropped image ->\")\n    plt.imshow(im2_crop)\n    plt.show()\n\n    \n    #Preprocessing of image\n    #Converting to grayscale\n    gray = cv2.cvtColor(im2_crop, cv2.COLOR_BGR2GRAY) \n    #perform thresholding\n    ret,thresh1 = cv2.threshold(np.array(gray), 125, 255, cv2.THRESH_BINARY)\n    \n    #Applying tesseract\n    custom_config = r'--oem 3 --psm 6'\n    string_num = pytesseract.image_to_string(thresh1, config=custom_config)\n    if(len(string_num) == 0):\n        print(\"Can not read image\")\n        return 1\n    else:\n        print(string_num)\n        return 0","fc552010":"get_number(4)","40338293":"miss_count = 0\nfor i in range (0,len(license_plate_df)):\n    print(\"Figure {}\".format(i))\n    miss_count += get_number(i)\n    print(\"------------------\")\nprint(\"Total images miss {}\".format(miss_count))","fba411a7":"## Need to run it only once.","916471a1":"# Input dataset","3ab3cf0c":"# Imports","b9ab296a":"# Preprocessing of data","b2141add":"I wrote a simple script to download and save all images to a directory while recording their respected annotation information to a dictionary. The informations that I recorded were image_width, image_height, x and y coordinates of top left corner and x and y coordinates of bottom right corner of the bounding box ([top_x, top_y, bottom_x, bottom_y]).\n\nAt first, I thought all images are JPEG. However, a quick inspection of downloaded images showed that this assumption was wrong. Some of the images are GIF. So, before saving images, I converted them to JPEG images with three (RGB) channels by using PIL.Image module.","9e88adca":"# Using tesseract","90e4d44e":"## Need to run it only once.","446c1a65":"## This too is needed once."}}