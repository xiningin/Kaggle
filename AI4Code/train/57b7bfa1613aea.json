{"cell_type":{"78e8e2bf":"code","f529dbfd":"code","5a352f3a":"code","16f165d3":"code","08fae802":"code","cc8e7d9a":"code","71fd2e2d":"code","e8d01910":"code","814ccb5c":"code","b1d03c60":"code","64c4da37":"code","3a516dac":"code","e4fdf324":"code","d5cfc405":"code","45c31a61":"code","bb2e0736":"code","743e4d06":"code","738cc2d1":"code","dd8e950d":"code","99aae9db":"code","697a75dd":"code","fa540e75":"code","7b770065":"code","29d81566":"code","ca1fec35":"code","112f3b7d":"code","e91e9d3b":"code","2cdb5145":"markdown","a56c5aa3":"markdown","7fce1d64":"markdown","af3b1ab3":"markdown"},"source":{"78e8e2bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f529dbfd":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.linear_model import LinearRegression","5a352f3a":"data = pd.read_csv('..\/input\/101-simple-linear-regressioncsv\/1.01. Simple linear regression.csv')\ndata.head()","16f165d3":"# feature\nx = data['SAT']\n\n# target\ny = data['GPA']","08fae802":"x_matrix = x.values.reshape(-1, 1)\nreg = LinearRegression()\nreg.fit(x_matrix, y)","cc8e7d9a":"# R-squared\ndisplay(reg.score(x_matrix, y))\n\n# coefficiants\ndisplay(reg.coef_)\n\n# intercept\ndisplay(reg.intercept_)","71fd2e2d":"new_data = pd.DataFrame(data = [1730, 1750], columns = ['SAT'])\nreg.predict(new_data)","e8d01910":"new_data['Predicated_GPA'] = reg.predict(new_data)\nnew_data","814ccb5c":"plt.scatter(x, y)\nyhat = reg.coef_ * x_matrix + reg.intercept_\n\nfig = plt.plot(x, yhat, lw = 4, c = 'orange', label = 'Regression Line')\nplt.xlabel('SAT', fontsize = 20)\nplt.ylabel('GPA', fontsize = 20)\nplt.show()","b1d03c60":"data = pd.read_csv('..\/input\/102-multiple-linear-regression\/1.02 Multiple linear regression.csv')\ndata.head()","64c4da37":"data.describe()","3a516dac":"x = data[['SAT', 'Rand 1,2,3']]\ny = data['GPA']","e4fdf324":"reg.fit(x, y)\n\n# R-squared\nr2 = reg.score(x, y)\ndisplay(reg.score(x, y))\n\n# coefficiants\ndisplay(reg.coef_)\n\n# intercept\ndisplay(reg.intercept_)","d5cfc405":"n = x.shape[0]\np = x.shape[1]\n\nadjusted_r2 = 1 - (1 - r2) * (n - 1) \/ (n - p - 1)\nadjusted_r2","45c31a61":"from sklearn.feature_selection import f_regression","bb2e0736":"p_values = f_regression(x, y)[1]\np_values.round(3)","743e4d06":"reg_summary = pd.DataFrame(data = x.columns.values, columns = ['Features'])\nreg_summary['Coefficiants'] = reg.coef_\nreg_summary['P-values'] = p_values.round(3)\n\nreg_summary","738cc2d1":"plt.scatter(x['SAT'], y)\nyhat = reg.coef_ * x + reg.intercept_\n\nfig = plt.plot(x, yhat, lw = 4, c = 'orange', label = 'Regression Line')\nplt.xlabel('SAT', fontsize = 20)\nplt.ylabel('GPA', fontsize = 20)\nplt.ylim(2.25,4)\nplt.xlim(1600, 2100)\nplt.show()","dd8e950d":"from sklearn.preprocessing import StandardScaler","99aae9db":"scaler = StandardScaler()\nscaler.fit(x)","697a75dd":"x_scaled = scaler.transform(x)\n\nreg = LinearRegression()\nreg.fit(x_scaled, y)","fa540e75":"reg.coef_, reg.intercept_","7b770065":"reg_summary = pd.DataFrame([['Bias'], ['SAT'], ['Rand 1,2,3']], columns = ['Features'])\nreg_summary['Weights'] = reg.intercept_, reg.coef_[0], reg.coef_[1]\n\nreg_summary","29d81566":"new_data = pd.DataFrame([[1700, 2], [1750, 3]], columns = ['SAT', 'Rand 1,2,3'])\nnew_data","ca1fec35":"new_scaled_data = scaler.transform(new_data)\nreg.predict(new_scaled_data)","112f3b7d":"reg_simple = LinearRegression()\nx_simple_matrix = x_scaled[:,0].reshape(-1, 1)\nreg_simple.fit(x_simple_matrix, y)","e91e9d3b":"reg_simple.predict(new_scaled_data[:,0].reshape(-1, 1))","2cdb5145":"# Multiple Linear Regression with standardization","a56c5aa3":"# Simple Linear Regression","7fce1d64":"### Making predictions with standardized coefficiants","af3b1ab3":"# Multiple Linear Regression"}}