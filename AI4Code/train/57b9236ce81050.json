{"cell_type":{"f683895a":"code","86f14850":"code","b69e123d":"code","e26e7c6a":"code","802fac13":"code","7ed0211d":"code","da164792":"code","9b002c04":"code","91d2dbe6":"code","eea1ee31":"code","0ec9795c":"code","9b86c8b4":"code","088ee7f8":"code","50dcc15c":"code","b038f8a1":"code","8c9d83d9":"code","434f0715":"code","2271a32e":"code","ba61ad56":"code","6b5c7b4f":"code","cb233f02":"code","cccc9cba":"code","836fb9df":"markdown"},"source":{"f683895a":"import keras\nfrom keras.datasets import cifar10\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nimport pydot\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","86f14850":"# Load the data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","b69e123d":"\ntrain.head()","e26e7c6a":"\ntest.head()","802fac13":"x_train = train.drop(labels = [\"label\"],axis = 1) \ny_train = train[\"label\"]","7ed0211d":"\n# Normalize data set to 0-to-1 range\nx_train = x_train.astype('float32')\ntest = test.astype('float32')\nx_train \/= 255\ntest \/= 255","da164792":"y_train = keras.utils.to_categorical(y_train, 10)\n","9b002c04":"test.values","91d2dbe6":"x_train","eea1ee31":"### Reshaping\nx_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","0ec9795c":"dataAug = ImageDataGenerator(\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False)  # randomly flip images\n\ndataAug.fit(x_train)","9b86c8b4":"### Splitting into training and validation set\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.2, random_state=42)","088ee7f8":"lr_reduce = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.5, min_lr=0.000001)","50dcc15c":"### Designing the model\nmodel = Sequential()\n\nmodel.add(Conv2D(64, (3, 3), input_shape=(28,28,1), activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, (3, 3),activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides = (2,2)))\nmodel.add(Dropout(0.15))\n\nmodel.add(Conv2D(128, (3, 3), activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, (3, 3),activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=256, kernel_size = (3,3), activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(512, activation=\"relu\"))\n\nmodel.add(Dense(10, activation=\"softmax\"))\n","b038f8a1":"model.compile(\n    loss='categorical_crossentropy',\n    optimizer=\"adam\",\n    metrics=['accuracy']\n)","8c9d83d9":"model.fit(\n    x_train,\n    y_train,\n    batch_size=64,\n    epochs=30,\n    validation_data=(x_val, y_val),\n    shuffle=True,\n    callbacks = [lr_reduce]\n)\n","434f0715":"model.summary()","2271a32e":"plot_model(model, to_file='Model.png')\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","ba61ad56":"results = model.predict(test)\n","6b5c7b4f":"results = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")","cb233f02":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","cccc9cba":"submission","836fb9df":"![](https:\/\/miro.medium.com\/max\/584\/1*2lSjt9YKJn9sxK7DSeGDyw.jpeg)"}}