{"cell_type":{"d90c26fe":"code","be8e7225":"code","650855b1":"code","dd537cb4":"code","15d22ef9":"markdown","795817f8":"markdown"},"source":{"d90c26fe":"%%writefile copy_opponent.py\n    \ndef copy_opponent_agent(observation, configuration):\n    if observation.step > 0:\n        return observation.lastOpponentAction\n    else:\n        return 0","be8e7225":"%%writefile submission.py\n\nimport pandas as pd\n    \ndef anti_copy_opponent_agent (observation, configuration):\n    \n    # I don't see how to use any global variables, so will save everything to a CSV file\n    # Using pandas for this is too much, but it can be useful later\n    def save_history(history, file = 'history.csv'):\n        pd.DataFrame(history).to_csv(file, index = False)\n\n    def load_history(file = 'history.csv'):\n        return pd.read_csv(file).to_dict('records')\n    \n    if observation.step == 0:\n        history = [{'step': 2, 'competitorStep': None}]\n        save_history(history)\n        return 2 #a lot of people use thist strategy, let's beat them on the first step by returning 2 insteas of 1\n    else:\n        history = load_history()\n        history[-1]['competitorStep'] = observation.lastOpponentAction\n        step = (history[-1]['step'] + 1) % 3\n        history.append({'step': step, 'competitorStep': None})\n        save_history(history)\n        return step","650855b1":"from kaggle_environments import evaluate, make, utils\nenv = make(\"rps\", debug=True)","dd537cb4":"env.reset()\nenv.run([\"submission.py\", \"copy_opponent.py\"])\nenv.render(mode=\"ipython\", width=1000, height=700)","15d22ef9":"Let's check it:","795817f8":"For every public strategy (except random), it is easy to construct an algorithm that beats it.\nThe first baseline public strategy is mirroring. Let's beat it."}}