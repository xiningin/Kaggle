{"cell_type":{"5dac5040":"code","86eb5c0e":"code","6dcd1f78":"code","4d2483a5":"code","37021cf1":"code","ac1de22b":"code","bb7a6374":"code","271463a8":"code","a1c8b785":"code","068eae02":"code","97343c7e":"code","203820ea":"code","174abf3e":"code","8bde1554":"code","1831295f":"code","9afebeab":"code","2c9cbb73":"code","decd3829":"code","fbfe2992":"code","218cfaa0":"code","30160a1d":"code","11f0be40":"code","2547b038":"code","fe6adad9":"code","847df2ac":"code","7e68cfb3":"code","f2013990":"code","0e60b80e":"code","7c67e884":"code","f62015bf":"code","c177065e":"code","bf1dc843":"code","01b3be82":"code","f4dd49b3":"code","9062ef74":"code","8a3d1d7a":"code","98c12e9a":"code","6e72dc2b":"code","0c34ecd3":"code","a42964e7":"code","b9f00cf8":"code","e2116671":"code","c995d035":"code","c1cd28ad":"code","fac50677":"code","76dca6d5":"code","c348d8f1":"code","fa912b6b":"code","d8cb8fe3":"code","ac1f49bd":"code","0013b780":"code","1513a679":"code","1b3dc877":"markdown","4441c251":"markdown","951bfd0b":"markdown","2d0d9f36":"markdown","bfebe0b6":"markdown","d190ddda":"markdown","e873eb54":"markdown","c8e7a140":"markdown","c9ae793a":"markdown","ebd5cb6a":"markdown","86765256":"markdown","b9c56b39":"markdown","1043f92b":"markdown","5781e3a9":"markdown","8c8685a0":"markdown","79873b4b":"markdown"},"source":{"5dac5040":"#load libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt   #for plotting\nfrom sklearn import tree          #for decision trees\nfrom sklearn import preprocessing","86eb5c0e":"#read data\ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')","6dcd1f78":"games.head(10)","4d2483a5":"games.info()","37021cf1":"players.head(10)","ac1de22b":"players.info()","bb7a6374":"#clean height data\n#convert string into normal format and replace values\nreplacement_values = {'5-6':'66','5-7':'67','5-8':'68','5-10':'70','5-11':'71','5-9':'69',\n                      '6-0':'72','6-1':'73','6-2':'74',\n                      '6-3':'75','6-4':'76','6-5':'77','6-6':'78','6-7':'79'}\n\nplayers['height'].replace(to_replace=replacement_values,inplace=True)\nplayers['height'] = players['height'].astype('int32',copy=False)","271463a8":"#position value counts and number of positions\nprint(\"Player position value counts: \",players['position'].value_counts(),sep='\\n')\nprint('\\n',\"Number of Positions: \",players['position'].unique().size,sep='')","a1c8b785":"players['height'].hist()","068eae02":"#note: order by number of players descending\nplayers['height'].hist(by=players['position'],figsize=(10,10))","97343c7e":"players['weight'].hist()","203820ea":"#note: order by number of players descending\nplayers['weight'].hist(by=players['position'],figsize=(10,10))","174abf3e":"#drop collegeName and displayName - not needed in analysis\ndrops = ['collegeName','displayName']\nplayers = players.drop(columns=drops)\n\n#split table into offensive and defensive players\noffensive_positions = ['WR','QB','TE','RB','FB','HB','P','LS','K']\ndefensive_positions = ['CB','OLB','FS','SS','MLB','DE','LB','ILB','DB','S','NT','DT']\noffensive_players = players[players['position'].isin(offensive_positions)] #subset of players\ndefensive_players = players[players['position'].isin(defensive_positions)] #subset of players","8bde1554":"#number of defensive players\ndefensive_players.shape","1831295f":"defensive_players['position'].value_counts()","9afebeab":"defensive_players['height'].hist(figsize=(10,10))","2c9cbb73":"defensive_players['height'].hist(by=defensive_players['position'],figsize=(10,10))","decd3829":"#now can use a histogram\ndefensive_players['weight'].hist(figsize=(10,10))","fbfe2992":"defensive_players['weight'].hist(by=defensive_players['position'],figsize=(10,10))","218cfaa0":"plays.head()","30160a1d":"#average number of plays per game\nave_num_plays_per_game = len(plays['playId'])\/len(plays['gameId'].unique())\nprint(ave_num_plays_per_game)","11f0be40":"plays.info()","2547b038":"less_important_columns = ['gameId', 'playId', 'playDescription', 'quarter', 'down', 'yardsToGo','possessionTeam',\n                          'yardlineSide', 'yardlineNumber','preSnapVisitorScore', 'preSnapHomeScore', 'gameClock',\n                          'absoluteYardlineNumber', 'penaltyCodes', 'penaltyJerseyNumbers','isDefensivePI']\nplays.drop(columns=less_important_columns,inplace=True)","fe6adad9":"plays.info()","847df2ac":"#number of missing values in each column\nplays.isna().sum()","7e68cfb3":"plays['playType'].value_counts()","f2013990":"plays['offenseFormation'].value_counts()","0e60b80e":"plays['personnelO'].value_counts()","7c67e884":"plays['personnelD'].value_counts()","f62015bf":"plays['typeDropback'].value_counts()","c177065e":"plays['passResult'].value_counts()","bf1dc843":"plays['defendersInTheBox'].value_counts()","01b3be82":"plays['numberOfPassRushers'].value_counts()","f4dd49b3":"#yards gained\nplays['offensePlayResult'].hist()","9062ef74":"print(plays['offensePlayResult'].mean())\nprint(plays['playResult'].mean())","8a3d1d7a":"print(plays['defendersInTheBox'].groupby(plays['passResult']).mean())\nprint(plays['defendersInTheBox'].corr(plays['offensePlayResult']))","98c12e9a":"#type of dropback\nprint(plays['offensePlayResult'].groupby(plays['typeDropback']).mean())","6e72dc2b":"#offense formation and play result\nplays['offensePlayResult'].groupby(plays['offenseFormation']).mean()","0c34ecd3":"plays['offensePlayResult'].groupby(plays['defendersInTheBox']).mean()","a42964e7":"#drop rows with missing values\ncleaned_plays = plays.dropna()","b9f00cf8":"print(plays['personnelO'].unique().size,plays['personnelD'].unique().size,sep='\\n')","e2116671":"cleaned_plays['personnelO'].value_counts().loc[lambda x: x > 500]","c995d035":"offense_counts = cleaned_plays['personnelO'].value_counts()\ndefense_counts = cleaned_plays['personnelD'].value_counts()\n\ncleaned_plays = cleaned_plays[cleaned_plays['personnelO'].isin(offense_counts[offense_counts > 500].index)]\ncleaned_plays = cleaned_plays[cleaned_plays['personnelD'].isin(defense_counts[defense_counts > 500].index)]","c1cd28ad":"cleaned_plays['personnelD'].value_counts()","fac50677":"cleaned_plays.info()","76dca6d5":"#multiply yards gained by -1 to measure defensive sucess rather than offensive success\ny = cleaned_plays['playResult']*-1","c348d8f1":"DummyDF = pd.get_dummies(cleaned_plays[['offenseFormation','personnelO','personnelD','typeDropback']])\ncleaned_numeric = cleaned_plays[['defendersInTheBox','numberOfPassRushers']].to_numpy(copy=True)\nX = np.concatenate((DummyDF.to_numpy(copy=True),cleaned_numeric),axis=1)","fa912b6b":"#average over 10 random states\ndecision_trees = []\n\nfor i in range(10):\n    clf = tree.DecisionTreeRegressor(random_state=i+1)\n    clf.fit(X,y)\n    decision_trees.append(clf)","d8cb8fe3":"s = np.zeros(26)\n\nfor t in decision_trees:\n    s += t.feature_importances_\n    \naverage_importances = s\/10","ac1f49bd":"average_importances","0013b780":"#map feature importance to columns\n#feature importance array -> dictionary or dataframe with column:importance\ncolumn_importances = {}#column_name:column_importance\n\nfor i in range(len(DummyDF.columns)):\n    column_importances[DummyDF.columns[i]] = average_importances[i]\n    \ncolumn_importances['defendersInTheBox'] = average_importances[24]\ncolumn_importances['numberOfPassRushers'] = average_importances[25]\ncolumn_importances","1513a679":"#add all the values for each column\noffenseForm = column_importances['offenseFormation_EMPTY'] + column_importances['offenseFormation_I_FORM'] + column_importances['offenseFormation_PISTOL'] + column_importances['offenseFormation_SHOTGUN'] + column_importances['offenseFormation_SINGLEBACK'] + column_importances['offenseFormation_WILDCAT']\npersonnelO = column_importances['personnelO_1 RB, 1 TE, 3 WR']+column_importances['personnelO_1 RB, 2 TE, 2 WR']+column_importances['personnelO_2 RB, 1 TE, 2 WR']\npersonnelD = column_importances['personnelD_2 DL, 3 LB, 6 DB']+column_importances['personnelD_2 DL, 4 LB, 5 DB']+column_importances['personnelD_3 DL, 2 LB, 6 DB']\npersonnelD = column_importances['personnelD_3 DL, 3 LB, 5 DB']+column_importances['personnelD_3 DL, 4 LB, 4 DB']+column_importances['personnelD_4 DL, 1 LB, 6 DB']\npersonnelD = column_importances['personnelD_4 DL, 2 LB, 5 DB']+column_importances['personnelD_4 DL, 3 LB, 4 DB']\ntypeDropback = column_importances['typeDropback_DESIGNED_ROLLOUT_LEFT']+column_importances['typeDropback_DESIGNED_ROLLOUT_RIGHT']\ntypeDropback = column_importances['typeDropback_SCRAMBLE']+column_importances['typeDropback_SCRAMBLE_ROLLOUT_LEFT']\ntypeDropback = column_importances['typeDropback_SCRAMBLE_ROLLOUT_RIGHT']+column_importances['typeDropback_TRADITIONAL']+column_importances['typeDropback_UNKNOWN']\n\n\n# print column importances\nprint(\"Offense Formation Importance:\",offenseForm)\nprint(\"Offensive Personnel Importance:\",personnelO)\nprint(\"Defensive Personnel Importance:\",personnelD)\nprint(\"Type of Dropback Importance:\",typeDropback)\nprint(\"Number of Defenders in the Box Importance:\",column_importances['defendersInTheBox'])\nprint(\"Number of Pass Rushers Importance:\",column_importances['numberOfPassRushers'])","1b3dc877":"### Games table","4441c251":"### Players table","951bfd0b":"## Correlations between variables and results\nWe want to see if there are any correlations between the variables and play\/pass result","2d0d9f36":"# Analysis of Football Defense\n### Collaborators: \n#### Gabriel Berlin; kaggle.com\/gberlin email is gabeberlin@gmail.com\n#### Danila Rozhevskii; kaggle.com\/danilarozhevskii email is jorryvtanke@yandex.ru","bfebe0b6":"The players's weight is normally distributed with a heavy left-tail, meaning a lot of very heavy players.","d190ddda":"## Introduction and Methodology\nThe main idea of this competetion is to measure defensive performance on the plays in the given data.\n\nFirst, we did basic analysis of the data. We looked for correlations between the predictor variables and the response variables\n\nBased on the information of plays' outcomes, our goal was to identify predictor and response variables and build a regression decision tree in order to find the ones that impacts offense play result the most. \n\nThe data is both quantative and categorical. That's why we need to convert all catergorical columns to numpy array with dummy variables and then combine them back with quantative categories.\n\nThen we fit the data in and build the decision tree. We then map feature importances to columns and create a dictionary with all the predictors and associated with them importances.","e873eb54":"There are a lot of values for the offensive and defensive personnel columns, but only a few are common. We will only use the most relevant values.","c8e7a140":"There are 27 columns. Many of them are not as useful in this analysis.","c9ae793a":"# Exploratory Data Analysis\n","ebd5cb6a":"# Decision Tree Regression\n\nWe use decision tree to predict offense play result (yards gained\/lost). We will predict offense play result rather than play result, becuase the former does not include penalties. This way we will understand the importance of different factors independent of penalties.\n\nThese variables are all categorical and have to be changed into a dummy table: offenseFormation, personnelO, personnelD, typeDropback, (passResult)\n\nQuantitative: defendersInTheBox, numberOfPassRushers, (offensePlayResult)\n\npassResult and playResult are response variables","86765256":"Yards gained without penalties is slightly higher with penalties. Average of 0.2 more yards gained when there is a penalty. That means, on average, penalties slightly help the offense.","b9c56b39":"# Conclusions\nAccording to the decision tree, the two most important variables are defenders in the box and number of pass rushers. Coaches should focus on these two variables when making decisions about defense.","1043f92b":"The players's height is fairly normally distributed.","5781e3a9":"# Plays Data Table\nThis is the table that we will use in most of our analysis.","8c8685a0":"Focus on defensive players. Split players into offensive and defensive tables.","79873b4b":"The data is not totally clean. The personnel columns have many unneeded values. There are also missing values in this dataset. We will train our models on a large subset of the data that doesn't contain missing values and contains only common offensive and defensive personnel."}}