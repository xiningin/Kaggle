{"cell_type":{"7b99134c":"code","e7ecf5b4":"code","122304b2":"code","df6fe941":"code","991ed3de":"code","95579683":"code","6e28d14e":"code","bc9113f7":"code","b21ece6c":"code","7099b46e":"code","2a3be290":"code","13d9426f":"code","ad92c438":"code","7b0996df":"code","1fc044e0":"code","47b7d1fb":"code","5580c614":"code","07678996":"code","08e21ff1":"code","2480125b":"code","a0252ee2":"code","cfc2b1f8":"code","8443dfb5":"code","9b0a3d1c":"code","18c6d57a":"markdown","abfad1da":"markdown","75e64835":"markdown","74b1fafa":"markdown","246706d5":"markdown"},"source":{"7b99134c":"from __future__ import print_function\n\nfrom collections import defaultdict, deque\nimport datetime\nimport pickle\nimport time\nimport torch.distributed as dist\nimport errno\n\nimport collections\nimport os\nimport numpy as np\nimport torch\nimport torch.utils.data\nfrom PIL import Image, ImageFile\nimport pandas as pd\nfrom tqdm import tqdm\nfrom torchvision import transforms\nimport torchvision\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection.mask_rcnn import MaskRCNNPredictor\n\nimport numpy as np\nimport pandas as pd\nimport pydicom\nimport os\nimport matplotlib.pyplot as plt\nimport glob\nimport torchvision\nimport torch\nfrom skimage.transform import resize\nfrom matplotlib.patches import Rectangle\nimport torch\nimport torchvision\nimport torchvision.transforms as T\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport pandas as pd\nfrom skimage import io, transform\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.rpn import AnchorGenerator\nfrom PIL import Image","e7ecf5b4":"input_path = '\/kaggle\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/'","122304b2":"input_file = os.listdir(input_path)\ninput_files = list(dict.fromkeys(input_file))\nprint(len(input_files))","df6fe941":"df1 = pd.read_csv('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train.csv')","991ed3de":"classes = list(df1['class_name'].values)\nclasses = list(dict.fromkeys(classes))","95579683":"df = df1[df1['class_name']!= 'No finding']","6e28d14e":"input_files = list(set(df['image_id'].values))","bc9113f7":"from shapely.geometry import Polygon","b21ece6c":"def plot_maskimage(img,mask,size):\n    color = ['r','b','g','y','w','c','m','w','c','m','r','b','g','y','w','c','m','w','c','m']\n    #plt.imshow(img,cmap='gray')\n    #for ii in range(size):\n    #    plt.gca().add_patch(Rectangle((xmin[ii], ymin[ii]), (xmax[ii]-xmin[ii]), (ymax[ii]-ymin[ii]),linewidth=1,edgecolor=color[i],facecolor='none'))\n    #plt.show()\n    for mas in mask:\n        plt.imshow(mas,cmap='gray')\n        plt.show()","7099b46e":"def overlap_percentage(dff):\n    #print('dff before',dff)\n    xmin = list(dff['x_min'].values)\n    class_ids = list(dff['class_id'].values)\n    size = len(xmin)\n    percentages = []\n    for i in range(size-1):\n        a = dff.iloc[[i]]\n        b = dff.iloc[[i+1]]\n        xmin0 = a['x_min'].values\n        ymin0 = a['y_min'].values\n        xmax0 = a['x_max'].values\n        ymax0 = a['y_max'].values\n        xmin1 = b['x_min'].values\n        ymin1 = b['y_min'].values\n        xmax1 = b['x_max'].values\n        ymax1 = b['y_max'].values\n        x1 = [xmin0,ymax0]\n        x2 = [xmax0,ymax0]\n        x3 = [xmax0,ymin0]\n        x4 = [xmin0,ymin0]\n        y1 = [xmin1,ymax1]\n        y2 = [xmax1,ymax1]\n        y3 = [xmax1,ymin1]\n        y4 = [xmin1,ymin1]\n        x = [x1,x2,x3,x4]\n        y = [y1,y2,y3,y4]\n        poly_1 = Polygon(x)\n        poly_2 = Polygon(y)\n        iou = poly_1.intersection(poly_2).area \/ poly_1.union(poly_2).area\n        percentages.append(iou*100)\n    #print('overlap percentage --- ',percentages)\n    #print('class_ids  --- ',class_ids)\n    for t in range(len(percentages)):\n        z = percentages[t]\n        class_comp = []\n        positions = []\n        if z > float(95):\n            print('above 95% -----',z)\n            position = t\n            print('position',position)\n            class_id_ol = class_ids[position]\n            class_id_ol1 = class_ids[position+1]\n            print('class_ids',class_id_ol,class_id_ol1)\n            class_comp.append(class_id_ol)\n            class_comp.append(class_id_ol1)\n            positions.append(position)\n        if len(class_comp)>=2:\n            if class_comp[0] == class_comp[1]:\n                #print('matched')\n                #print('position matched',positions)\n                dff.reset_index(drop=True, inplace=True)\n                print(dff)\n                dff = dff.drop([positions[0]])\n                print(dff)\n            else:\n                dff = dff\n    return dff","2a3be290":"num_classes = 14","13d9426f":"def masks_generation(img,dff):\n    m = img.shape[0]\n    n = img.shape[1]\n    #all_classids = list(np.arange(0,15))\n    #class_ids = list(dff['class_id'].values)\n    mask = np.zeros((num_classes,m,n))\n    #print(class_ids)\n    #for s in all_classids:\n    #print(s)\n    \n    for dd in dff.values:\n        #print('dd',dd)\n        s = dd[2]\n        xmin = dd[4]\n        xmax = dd[5]\n        ymin = dd[6]\n        ymax = dd[7]\n        ax = int(xmin)\n        ax1 =int(xmax)\n        ay = int(ymin)\n        ay1 = int(ymax)\n        mask[s,ay:ay1,ax:ax1] = 1\n    #plot_maskimage(img,mask,len(class_ids))\n    return mask","ad92c438":"class traindataset(torch.utils.data.Dataset):\n\n    def __init__(self, df, input_files, transform):\n        super().__init__()\n\n        self.input_files = input_files\n        self.df = df\n        self.transform = transform\n        \n    def __len__(self) -> int:\n        return len(input_files)\n\n    def __getitem__(self, index: int):\n        img_id = self.input_files[index]\n        df = self.df\n        dff = df[df['image_id'] == img_id]\n        dff = dff.sort_values(by=['x_min'])\n        \n        \n        '''class_name = dff['class_name'].values\n        class_id = list(dff['class_id'].values)\n        class_id = [m+1 for m in class_id]\n        xmin1 = list(dff['x_min'].values)\n        ymin1 = list(dff['y_min'].values)\n        xmax1 = list(dff['x_max'].values)\n        ymax1 = list(dff['y_max'].values)\n        print('before class_id',class_id)\n        olp = overlap_percentage(dff)\n        print(olp)\n        dff  = olp'''\n        \n        \n        image_path  = '..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/'+img_id+'.dicom'\n        img_pixel = pydicom.read_file(image_path).pixel_array\n        #print('bits stored',pydicom.read_file(image_path).BitsStored)\n        img_numpy = img_pixel.astype(np.float32())\n        img_tensor = torch.from_numpy(img_numpy).unsqueeze(0)\n        #print('...m',type(img_tensor))\n        \n        mask = masks_generation(img_pixel,dff)\n        #print(mask)\n        \n        \n        class_name = dff['class_name'].values\n        class_id = list(dff['class_id'].values)\n        #class_id = [m+1 for m in class_id]\n        xmin = list(dff['x_min'].values)\n        ymin = list(dff['y_min'].values)\n        xmax = list(dff['x_max'].values)\n        ymax = list(dff['y_max'].values)\n        \n        \n        #df_boxes = [xmin,ymin,xmax,ymax]\n        #df_boxes1 = [xmin1,ymin1,xmax1,ymax1]\n        area = []\n        boxe = []\n        size_of_bbox = len(xmin)\n        #print(xmin,ymin,xmax,ymax,area,boxes)\n        for i in range(size_of_bbox):\n            box = [xmin[i],ymin[i],xmax[i],ymax[i]] \n            w = xmax[i]-xmin[i]\n            h = ymax[i]-ymin[i]\n            a = w*h\n            area.append(a)\n            boxe.append(box)\n            #print('bounding box'+str(i),box)\n            #print('width&heigth'+str(i),w,h)\n            #print('class_id'+str(i),class_id[i])\n            \n        boxes = torch.as_tensor(boxe, dtype=torch.float32)\n        labels = torch.as_tensor(class_id, dtype=torch.int64)\n        masks = torch.as_tensor(mask, dtype=torch.uint8)\n        image_id = torch.tensor([index])\n        #iscrowd = torch.zeros((size_of_bbox,), dtype=torch.int64)\n        #print('masks',masks.shape)\n        target = {}\n        target[\"boxes\"] = boxes\n        target[\"labels\"] = labels\n        target[\"masks\"] = masks\n        target[\"image_id\"] = image_id\n        #target[\"area\"] = torch.as_tensor(area,dtype=torch.float32)\n        #target[\"iscrowd\"] = torch.as_tensor(iscrowd,dtype=torch.float32)\n        #if boxes==[]:\n         #   boxes=torch.FloatTensor(0,4)\n          #  area = torch.FloatTensor(0,1)\n           # class_id = torch.LongTensor(0,1)\n            #iscrowd = torch.IntTensor(0,1)\n\n            #target = {}\n            #target[\"boxes\"] = boxes\n            #target[\"labels\"] = class_id\n            #target[\"area\"] = area\n            #target[\"iscrowd\"] = iscrowd\n        if self.transform is not None:\n            print('ok')\n            img, target = self.transform(img_tensor, target)\n        return img_tensor, target\ntraindata = traindataset(df,input_files,transform = None)\n#traindata_loader = torch.utils.data.DataLoader(traindata, batch_size=1, shuffle=True, num_workers=1,collate_fn=collate_fn)","7b0996df":"for i in traindata:\n    print(i)\n    break","1fc044e0":"!pip install pycocotools","47b7d1fb":"class SmoothedValue(object):\n    \"\"\"Track a series of values and provide access to smoothed values over a\n    window or the global series average.\n    \"\"\"\n\n    def __init__(self, window_size=20, fmt=None):\n        if fmt is None:\n            fmt = \"{median:.4f} ({global_avg:.4f})\"\n        self.deque = deque(maxlen=window_size)\n        self.total = 0.0\n        self.count = 0\n        self.fmt = fmt\n\n    def update(self, value, n=1):\n        self.deque.append(value)\n        self.count += n\n        self.total += value * n\n\n    def synchronize_between_processes(self):\n        \"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"\n        if not is_dist_avail_and_initialized():\n            return\n        t = torch.tensor([self.count, self.total], dtype=torch.float64, device='cuda')\n        dist.barrier()\n        dist.all_reduce(t)\n        t = t.tolist()\n        self.count = int(t[0])\n        self.total = t[1]\n\n    @property\n    def median(self):\n        d = torch.tensor(list(self.deque))\n        return d.median().item()\n\n    @property\n    def avg(self):\n        d = torch.tensor(list(self.deque), dtype=torch.float32)\n        return d.mean().item()\n\n    @property\n    def global_avg(self):\n        return self.total \/ self.count\n\n    @property\n    def max(self):\n        return max(self.deque)\n\n    @property\n    def value(self):\n        return self.deque[-1]\n\n    def __str__(self):\n        return self.fmt.format(\n            median=self.median,\n            avg=self.avg,\n            global_avg=self.global_avg,\n            max=self.max,\n            value=self.value)\n\n\ndef all_gather(data):\n    \"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"\n    world_size = get_world_size()\n    if world_size == 1:\n        return [data]\n\n    # serialized to a Tensor\n    buffer = pickle.dumps(data)\n    storage = torch.ByteStorage.from_buffer(buffer)\n    tensor = torch.ByteTensor(storage).to(\"cuda\")\n\n    # obtain Tensor size of each rank\n    local_size = torch.tensor([tensor.numel()], device=\"cuda\")\n    size_list = [torch.tensor([0], device=\"cuda\") for _ in range(world_size)]\n    dist.all_gather(size_list, local_size)\n    size_list = [int(size.item()) for size in size_list]\n    max_size = max(size_list)\n\n    # receiving Tensor from all ranks\n    # we pad the tensor because torch all_gather does not support\n    # gathering tensors of different shapes\n    tensor_list = []\n    for _ in size_list:\n        tensor_list.append(torch.empty((max_size,), dtype=torch.uint8, device=\"cuda\"))\n    if local_size != max_size:\n        padding = torch.empty(size=(max_size - local_size,), dtype=torch.uint8, device=\"cuda\")\n        tensor = torch.cat((tensor, padding), dim=0)\n    dist.all_gather(tensor_list, tensor)\n\n    data_list = []\n    for size, tensor in zip(size_list, tensor_list):\n        buffer = tensor.cpu().numpy().tobytes()[:size]\n        data_list.append(pickle.loads(buffer))\n\n    return data_list\n\n\ndef reduce_dict(input_dict, average=True):\n    \"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"\n    world_size = get_world_size()\n    if world_size < 2:\n        return input_dict\n    with torch.no_grad():\n        names = []\n        values = []\n        # sort the keys so that they are consistent across processes\n        for k in sorted(input_dict.keys()):\n            names.append(k)\n            values.append(input_dict[k])\n        values = torch.stack(values, dim=0)\n        dist.all_reduce(values)\n        if average:\n            values \/= world_size\n        reduced_dict = {k: v for k, v in zip(names, values)}\n    return reduced_dict\n\n\nclass MetricLogger(object):\n    def __init__(self, delimiter=\"\\t\"):\n        self.meters = defaultdict(SmoothedValue)\n        self.delimiter = delimiter\n\n    def update(self, **kwargs):\n        for k, v in kwargs.items():\n            if isinstance(v, torch.Tensor):\n                v = v.item()\n            assert isinstance(v, (float, int))\n            self.meters[k].update(v)\n\n    def __getattr__(self, attr):\n        if attr in self.meters:\n            return self.meters[attr]\n        if attr in self.__dict__:\n            return self.__dict__[attr]\n        raise AttributeError(\"'{}' object has no attribute '{}'\".format(\n            type(self).__name__, attr))\n\n    def __str__(self):\n        loss_str = []\n        for name, meter in self.meters.items():\n            loss_str.append(\n                \"{}: {}\".format(name, str(meter))\n            )\n        return self.delimiter.join(loss_str)\n\n    def synchronize_between_processes(self):\n        for meter in self.meters.values():\n            meter.synchronize_between_processes()\n\n    def add_meter(self, name, meter):\n        self.meters[name] = meter\n\n    def log_every(self, iterable, print_freq, header=None):\n        i = 0\n        if not header:\n            header = ''\n        start_time = time.time()\n        end = time.time()\n        iter_time = SmoothedValue(fmt='{avg:.4f}')\n        data_time = SmoothedValue(fmt='{avg:.4f}')\n        space_fmt = ':' + str(len(str(len(iterable)))) + 'd'\n        log_msg = self.delimiter.join([\n            header,\n            '[{0' + space_fmt + '}\/{1}]',\n            'eta: {eta}',\n            '{meters}',\n            'time: {time}',\n            'data: {data}',\n            'max mem: {memory:.0f}'\n        ])\n        MB = 1024.0 * 1024.0\n        for obj in iterable:\n            data_time.update(time.time() - end)\n            yield obj\n            iter_time.update(time.time() - end)\n            if i % print_freq == 0 or i == len(iterable) - 1:\n                eta_seconds = iter_time.global_avg * (len(iterable) - i)\n                eta_string = str(datetime.timedelta(seconds=int(eta_seconds)))\n                print(log_msg.format(\n                    i, len(iterable), eta=eta_string,\n                    meters=str(self),\n                    time=str(iter_time), data=str(data_time),\n                    memory=torch.cuda.max_memory_allocated() \/ MB))\n            i += 1\n            end = time.time()\n        total_time = time.time() - start_time\n        total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n        print('{} Total time: {} ({:.4f} s \/ it)'.format(\n            header, total_time_str, total_time \/ len(iterable)))\n\n\ndef collate_fn(batch):\n    return tuple(zip(*batch))\n\n\ndef warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor):\n\n    def f(x):\n        if x >= warmup_iters:\n            return 1\n        alpha = float(x) \/ warmup_iters\n        return warmup_factor * (1 - alpha) + alpha\n\n    return torch.optim.lr_scheduler.LambdaLR(optimizer, f)\n\n\ndef mkdir(path):\n    try:\n        os.makedirs(path)\n    except OSError as e:\n        if e.errno != errno.EEXIST:\n            raise\n\n\ndef setup_for_distributed(is_master):\n    \"\"\"\n    This function disables printing when not in master process\n    \"\"\"\n    import builtins as __builtin__\n    builtin_print = __builtin__.print\n\n    def print(*args, **kwargs):\n        force = kwargs.pop('force', False)\n        if is_master or force:\n            builtin_print(*args, **kwargs)\n\n    __builtin__.print = print\n\n\ndef is_dist_avail_and_initialized():\n    if not dist.is_available():\n        return False\n    if not dist.is_initialized():\n        return False\n    return True\n\n\ndef get_world_size():\n    if not is_dist_avail_and_initialized():\n        return 1\n    return dist.get_world_size()\n\n\ndef get_rank():\n    if not is_dist_avail_and_initialized():\n        return 0\n    return dist.get_rank()\n\n\ndef is_main_process():\n    return get_rank() == 0\n\n\ndef save_on_master(*args, **kwargs):\n    if is_main_process():\n        torch.save(*args, **kwargs)\n\n\ndef init_distributed_mode(args):\n    if 'RANK' in os.environ and 'WORLD_SIZE' in os.environ:\n        args.rank = int(os.environ[\"RANK\"])\n        args.world_size = int(os.environ['WORLD_SIZE'])\n        args.gpu = int(os.environ['LOCAL_RANK'])\n    elif 'SLURM_PROCID' in os.environ:\n        args.rank = int(os.environ['SLURM_PROCID'])\n        args.gpu = args.rank % torch.cuda.device_count()\n    else:\n        print('Not using distributed mode')\n        args.distributed = False\n        return\n\n    args.distributed = True\n\n    torch.cuda.set_device(args.gpu)\n    args.dist_backend = 'nccl'\n    print('| distributed init (rank {}): {}'.format(\n        args.rank, args.dist_url), flush=True)\n    torch.distributed.init_process_group(backend=args.dist_backend, init_method=args.dist_url,\n                                         world_size=args.world_size, rank=args.rank)\n    torch.distributed.barrier()\n    setup_for_distributed(args.rank == 0)","5580c614":"import warnings\nwarnings.filterwarnings('ignore')","07678996":"def train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq):\n    model.train()\n    metric_logger = MetricLogger(delimiter=\"  \")\n    metric_logger.add_meter('lr', SmoothedValue(window_size=1, fmt='{value:.6f}'))\n    header = 'Epoch: [{}]'.format(epoch)\n\n    lr_scheduler = None\n    if epoch == 0:\n        warmup_factor = 1. \/ 1000\n        warmup_iters = min(1000, len(data_loader) - 1)\n\n        lr_scheduler = warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor)\n\n    for images, targets in metric_logger.log_every(data_loader, print_freq, header):\n        images = list(image.to(device) for image in images)\n        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n        print('image_id',targets[0]['image_id'])\n        print('image--',images[0].shape)\n        print('targets--',targets[0]['boxes'].shape,targets[0]['labels'],targets[0]['masks'].shape)\n        loss_dict = model(images, targets)\n        print('loss_dict-----',loss_dict)\n        losses = sum(loss for loss in loss_dict.values())\n        print('losses-----',losses)\n        # reduce losses over all GPUs for logging purposes\n        loss_dict_reduced = reduce_dict(loss_dict)\n        losses_reduced = sum(loss for loss in loss_dict_reduced.values())\n        print('losses_reduced-----',losses_reduced)\n        optimizer.zero_grad()\n        print('zero grad over')\n        losses.backward()\n        print('losses backward over')\n        optimizer.step()\n        print('optimizer step over')\n        if lr_scheduler is not None:\n            print('lr_scheduler',lr_scheduler)\n            lr_scheduler.step()\n            print('lr_scheduler')\n        metric_logger.update(loss=losses_reduced, **loss_dict_reduced)\n        metric_logger.update(lr=optimizer.param_groups[0][\"lr\"])","08e21ff1":"device = torch.device('cuda:0')\n#device = torch.device('cpu')\n\nmodel_ft = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)\nin_features = model_ft.roi_heads.box_predictor.cls_score.in_features\nmodel_ft.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\nin_features_mask = model_ft.roi_heads.mask_predictor.conv5_mask.in_channels\nhidden_layer = 256\nmodel_ft.roi_heads.mask_predictor = MaskRCNNPredictor(in_features_mask, hidden_layer, num_classes)\nmodel_ft.to(device)\n\nfor param in model_ft.parameters():\n    param.requires_grad = True","2480125b":"data_loader = torch.utils.data.DataLoader(\n    traindata, batch_size=1, shuffle=False, num_workers=1,\n    collate_fn=lambda x: tuple(zip(*x)))","a0252ee2":"params = [p for p in model_ft.parameters() if p.requires_grad]\noptimizer = torch.optim.SGD(params, lr=0.0005, momentum=0.9, weight_decay=0.0005)\nlr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,\n                                               step_size=5,\n                                               gamma=0.1)","cfc2b1f8":"num_epochs = 10\nfor epoch in range(num_epochs):\n    train_one_epoch(model_ft, optimizer, data_loader, device, epoch, print_freq=100)\n    if (epoch%2) == 0:\n        torch.save(model_ft.state_dict(),'.\/mask_rcnn_statedict_epoch'+str(epoch)+'.pth')\n        torch.save(model_ft,'.\/mask_rcnn_epoch'+str(epoch)+'.pth')\n    lr_scheduler.step()","8443dfb5":"print(type(device))","9b0a3d1c":"cv = torch.tensor([0,10])\ncv = cv.to(device)","18c6d57a":"def plot_image(img,df_boxes):\n    #print(df_boxes)\n    #xmin,ymin,xmax,ymax = [[df_bo[0],j[1],j[2],j[3]] for j in range(len(df_boxes))]\n    xmin = df_boxes[0]\n    ymin = df_boxes[1]\n    xmax = df_boxes[2]\n    ymax = df_boxes[3]\n    img_resize = img\n    color = ['r','b','g','y','w','c','m','w','c','m','r','b','g','y','w','c','m','w','c','m']\n    #print('xmin,ymin,xmax,ymax',xmin,ymin,xmax,ymax)\n    plt.imshow(img_resize,cmap='gray')\n    for i in range(len(ymax)):\n        plt.gca().add_patch(Rectangle((xmin[i], ymin[i]), (xmax[i]-xmin[i]), (ymax[i]-ymin[i]),linewidth=1,edgecolor=color[i],facecolor='none'))\n    plt.show()\n    for i in range(len(ymax)):\n        mask = np.zeros(img_resize.shape)\n        ax = int(xmin[i])\n        ax1 =int(xmax[i])\n        ay = int(ymin[i])\n        ay1 = int(ymax[i])\n        mask[ay:ay1,ax:ax1] = 1\n        #print('mask',mask[bx:by])\n        #masked = img_resize*mask\n        mask_img = img_resize[int(ymin[i]):int(ymax[i]),int(xmin[i]):int(xmax[i])]\n        #plt.imshow(mask_img,cmap='gray')\n        #plt.show()\n        plt.imshow(mask,cmap='gray')\n        plt.show()\n        #return img_tensor\n    ","abfad1da":"images = glob.glob('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/*.dicom')","75e64835":"for i in images:\n    j = pydicom.read_file(i).pixel_array\n    mask = np.ones(j.shape)\n    mask[50:100,150:250] = 0\n    plt.imshow(j*mask)\n    plt.show()\n    print(j)\n    break","74b1fafa":"def plot_image(img,df_boxes):\n    #print(df_boxes)\n    #xmin,ymin,xmax,ymax = [[df_bo[0],j[1],j[2],j[3]] for j in range(len(df_boxes))]\n    xmin = df_boxes[0]\n    ymin = df_boxes[1]\n    xmax = df_boxes[2]\n    ymax = df_boxes[3]\n    img_resize = img\n    color = ['r','b','g','y','w','c','m','w','c','m','r','b','g','y','w','c','m','w','c','m']\n    #print('xmin,ymin,xmax,ymax',xmin,ymin,xmax,ymax)\n    plt.imshow(img_resize,cmap='gray')\n    for i in range(len(ymax)):\n        plt.gca().add_patch(Rectangle((xmin[i], ymin[i]), (xmax[i]-xmin[i]), (ymax[i]-ymin[i]),linewidth=1,edgecolor=color[i],facecolor='none'))\n    plt.show()\n    for i in range(len(ymax)):\n        mask = np.zeros(img_resize.shape)\n        ax = int(xmin[i])\n        ax1 =int(xmax[i])\n        ay = int(ymin[i])\n        ay1 = int(ymax[i])\n        mask[ay:ay1,ax:ax1] = 1\n        #print('mask',mask[bx:by])\n        #masked = img_resize*mask\n        mask_img = img_resize[int(ymin[i]):int(ymax[i]),int(xmin[i]):int(xmax[i])]\n        #plt.imshow(mask_img,cmap='gray')\n        #plt.show()\n        plt.imshow(mask,cmap='gray')\n        plt.show()\n        #return img_tensor\n    ","246706d5":"def masks_generation(img,dff):\n    img1 = img.shape[0]\n    img2 = img.shape[1]\n    all_classids = list(np.arange(0,15))\n    class_ids = list(dff['class_id'].values)\n    mask_list = []\n    print(class_ids)\n    for s in all_classids:\n        print(s)\n        if s in class_ids:\n            dd = dff[dff['class_id']==s]\n            mask = np.zeros((img1,img2))\n            xmin = list(dd['x_min'].values)\n            xmax = list(dd['x_max'].values)\n            ymin = list(dd['y_min'].values)\n            ymax = list(dd['y_max'].values)\n            for xm in range(len(xmin)):\n                ax = int(xmin[xm])\n                ax1 =int(xmax[xm])\n                ay = int(ymin[xm])\n                ay1 = int(ymax[xm])\n                mask[ay:ay1,ax:ax1] = 1\n            mask_list.append(mask)\n            #print(ax,ax1,ay,ay1,mask)\n        else:\n            mask = np.zeros(img.shape)\n            mask_list.append(mask)\n    plot_maskimage(img,mask_list,len(class_ids))\n    return mask_list"}}