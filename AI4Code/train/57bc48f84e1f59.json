{"cell_type":{"9d8dee8d":"code","88ec3067":"code","36ba0d8b":"code","808f1a6f":"code","46f86fb0":"code","3c7b3f7a":"code","792c89f6":"code","82dfaa1e":"code","15f5fb92":"code","bac3565c":"code","094f1fa6":"code","6ddf0d35":"code","c0405c17":"code","e9123bb2":"code","9552a0af":"code","7e759640":"code","804a3a3a":"code","b0b5a91c":"code","edbe4f95":"code","7dc283a9":"code","9ab20242":"code","a3fb0913":"code","d796ced8":"code","e4f7307a":"code","4e84a70d":"markdown","84bac79f":"markdown","436fb302":"markdown","ef45699b":"markdown","6399cdc1":"markdown","b106de89":"markdown","81461aa9":"markdown"},"source":{"9d8dee8d":"from nltk.corpus import stopwords                         # to load stopwords and remove the stopwords from text\nfrom nltk import wordpunct_tokenize                       # Tokenize text \nfrom nltk.tokenize import RegexpTokenizer                 # Tokenize text by regular expression\nfrom nltk.stem.porter import PorterStemmer                # convert words to root words like cats to cat\nfrom nltk.stem.wordnet import WordNetLemmatizer           # the same portertstemmer\n# FOR CLASSIFIAR\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom torch.autograd import Variable             # for transfer inputs to autograde vaiable to requires grad\nfrom string import punctuation                  # load punctuation like (\">?\/][]!`\") and remove then from text\nfrom gensim.models import Word2Vec             # to load word vectors to represnet any text to numerical numbers \n\nimport pandas as pd                            # to read file as dataframe\nimport numpy as np                             # Linear algebra library\nimport torch                                   # pytorch Framework \nimport torch.nn as nn                          # import neural netowrk from torch framework\nimport collections\nimport nltk\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport re\nimport string","88ec3067":"def clean(text):\n    text=text.lower()\n    stp=set(stopwords.words(\"english\"))\n    placesp = re.compile('[\/(){}\\[\\]\\|@,;]')\n    removech= re.compile('[^0-9a-z #+_]')\n    st=WordNetLemmatizer()\n    text=re.sub(placesp,' ',text)\n    text=re.sub(removech,' ',text)\n    text=text.split()\n    text=[w for w in text if not w in stp]\n    text=[st.lemmatize(w) for w in text]\n    text=\" \".join(text)\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation))\n    return text","36ba0d8b":"\"\"\"\n Read Glove File take url of file return the two dictionaries ( word to index and word to vector in embedding )\n and one list of index to word  \n (glove file url) --> words_to_index, index_to_words, word_to_vec_map\n \n \"\"\"\ndef read_glove_vecs(glove_file):\n    with open(glove_file, 'r',encoding='UTF-8') as f:\n        words = set()\n        word_to_vec_map = {}\n        for line in f:\n            line = line.strip().split()\n            curr_word = line[0]\n            words.add(curr_word)\n            word_to_vec_map[curr_word] = np.array(line[1:], dtype=np.float64)\n        \n        i = 1\n        words_to_index = {}\n        index_to_words = {}\n        for w in sorted(words):\n            words_to_index[w] = i\n            index_to_words[i] = w\n            i = i + 1\n    return words_to_index, index_to_words, word_to_vec_map","808f1a6f":"\"\"\"\nWord Embeddings of words take dictionary of word to embedding and word to index\nand return Embeddings Matrix [index,Embedding] \n\n\"\"\"\n\ndef pretrained_embedding_layer(word_to_vec_map, word_to_index):\n    vocab_len = len(word_to_index) + 1\n    emb_matrix = np.zeros((vocab_len,300))\n    for word, index in word_to_index.items():\n        emb_matrix[index, :] = word_to_vec_map[word]\n    return emb_matrix","46f86fb0":"\"\"\"\nTransfer sentence to indeces word in Embedding\ntake text and word to index dictionary \nreturn list of indeces word in Embedding\n\n\"\"\"\ndef transfer_sent(text,word_to_index):\n    text=text.split(' ')\n    ret=[]\n    for w in text:\n        if w in word_to_index and w !=\"\":\n            ret.append(word_to_index[w])\n    return ret","3c7b3f7a":"\"\"\"\ncalculate the Max Length in every column in Data Frame \ntake Data Frame \nreturn Max lenght of columns\n\n\"\"\"\n\ndef retmax(dftrain):\n\n    lomax,temax,kemax=0,0,0\n    for i in range(dftrain.shape[0]):\n\n        temax=max(temax,len(np.array(dftrain.loc[i,'text'])))\n\n        kemax=max(kemax,len(np.array(dftrain.loc[i,'keyword'])))\n\n        lomax=max(lomax,len(np.array(dftrain.loc[i,'location'])))\n\n        return kemax,lomax,temax","792c89f6":"\"\"\"\nConvert Data Frame to Matrix 2D by Adding padding zeros to every columns that not have lenght not equal max\nlenght.\ntake Data Frame list of Max Lenghts of Columns\nreturn Matrix after convert\n\n\"\"\"\n\ndef convert2D(Xs,max_lens):\n    \n    X_indices = np.zeros((Xs[0].shape[0], sum(max_lens)))\n    pls=0\n    for i in range(Xs[0].shape[0]):\n        pls=0\n     \n        for j in range(0,len(Xs[0][i])):\n            X_indices[i][j+pls]=Xs[0][i][j]\n        pls=max_lens[0]\n\n        for j in range(0,len(Xs[1][i])):\n            X_indices[i][j+pls]=Xs[1][i][j]\n        pls=max_lens[1]+max_lens[0]\n\n        for j in range(0,len(Xs[2][i])):\n            X_indices[i][j+pls]=Xs[2][i][j]\n    return X_indices","82dfaa1e":"!ls \"..\/input\/glove6b300dtxt\"","15f5fb92":"sample_submission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\ndftest = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ndftrain = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")","bac3565c":"print(\"shape of data\",dftrain.shape)\ndftrain.head(5)","094f1fa6":"print(\"Number of NAN value in keyword\",dftrain.keyword.isnull().sum())\nprint(\"Number of NAN value in location\",dftrain.location.isnull().sum())","6ddf0d35":"dftrain.head()\ndftrain.keyword.value_counts()","c0405c17":"dftrain=dftrain.drop(['id'],axis=1)","e9123bb2":"\"\"\"\nCall read_glove_vecs function and then call pretrained_embedding_layer to calc word Embedding of Words\n\n\"\"\"\n\nword_to_index, index_to_word, word_to_vec_map = read_glove_vecs(\"..\/input\/glove6b300dtxt\/glove.6B.300d.txt\")\nword_embedding=pretrained_embedding_layer(word_to_vec_map, word_to_index)","9552a0af":"dftrain=dftrain.dropna(axis=0)\nlabels=dftrain.target\ndftrain=dftrain.reset_index()","7e759640":"kews=dftest.keyword.values\nkews=list(set(kews))\nlocs=dftest.location.values\nlocs=list(set(locs))","804a3a3a":"# TO CLEAN data using Function clean \nfor i in range(dftrain.shape[0]):\n    dftrain.at[i,'keyword']=transfer_sent(clean(dftrain.loc[i,'keyword']),word_to_index)\n    dftrain.at[i,'location']=transfer_sent(clean(dftrain.loc[i,'location']),word_to_index)\n    dftrain.at[i,'text']=transfer_sent(clean(dftrain.loc[i,'text']),word_to_index)\n    \nfor i in range(dftest.shape[0]):\n    if type(dftest.loc[0,'keyword'])==float:\n        dftest.at[0,'keyword']=kews[np.random.randint(1,221)]\n    if type(dftest.loc[0,'location'])==float:\n        dftest.at[0,'location']=locs[np.random.randint(1,1602)]\n        \n    \n    dftest.at[i,'keyword']=transfer_sent(clean(str(dftest.loc[i,'keyword'])),word_to_index)\n    dftest.at[i,'location']=transfer_sent(clean(str(dftest.loc[i,'location'])),word_to_index)\n    dftest.at[i,'text']=transfer_sent(clean(dftest.loc[i,'text']),word_to_index)\n    \n    ","b0b5a91c":"kemax,lomax,temax=retmax(dftrain)","edbe4f95":"print(\"Max len of text\",temax)\nprint(\"Max len of location\",lomax)\nprint(\"Max len of keyword\",kemax)\n\ndftrain=np.array(convert2D([dftrain.keyword,dftrain.location,dftrain.text],[0,0,25]),dtype=np.int64)\ndftest=np.array(convert2D([dftest.keyword,dftest.location,dftest.text],[0,0,25]),dtype=np.int64)","7dc283a9":"model = OneVsRestClassifier(LogisticRegression(penalty='l2', C=1.0))","9ab20242":"model.fit(dftrain,labels)","a3fb0913":"y_pred=model.predict(dftest)","d796ced8":"sample_submission['target']=y_pred","e4f7307a":"sample_submission.to_csv(\"submission.csv\", index=False)","4e84a70d":"## Perprocessing Data \n\n1. Remove NAN value from data\n2. Remove punctuation like .,\/][]';! from Data\n3. tokenize data by space the most tokenization using in English text","84bac79f":"### Read Glove File py passing url of file","436fb302":"### Word representation using glove text 300dim","ef45699b":"### begore any thing you must read dataset carefully and then import libraires (from packages first import package) ","6399cdc1":"### Show files in inputs using ls","b106de89":"### Removing id column ... to delete row use axis=0 column use axis=1 ","81461aa9":"### Eexploration data"}}