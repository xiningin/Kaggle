{"cell_type":{"487f9394":"code","402b88cd":"code","afb3f745":"code","87378fbf":"code","3ec5f5a5":"code","7f1e574b":"code","580f2db5":"code","efa6bead":"code","a4c22c21":"code","91e6f2ab":"code","d14e9324":"code","f60b67b7":"code","a71bb940":"code","df315122":"code","64c80b8e":"code","6cf60488":"code","fc29888a":"code","014c02b8":"code","7bb2a2be":"code","7a4022eb":"code","ea5bfdc4":"code","82dfd0b1":"code","7c381c54":"code","18e8ba62":"code","28a9592e":"code","3bda76d9":"code","c40aea35":"code","240d994a":"code","6549c00a":"code","5ece2c33":"code","de9c3d47":"code","01ca5c84":"markdown","4d4aa439":"markdown","a0ddbe8a":"markdown","b950c688":"markdown","87bda001":"markdown","c438cd60":"markdown","6377a63a":"markdown","78ba89c3":"markdown","25f376ce":"markdown","ff53ffe0":"markdown","4189ad9a":"markdown","fc26aa66":"markdown","b6a8a9b9":"markdown","2ea4517c":"markdown","60319d68":"markdown","7897c778":"markdown","bfd4f52d":"markdown","2e6e5ff2":"markdown","77f7b2ec":"markdown","3f9745aa":"markdown","9a7e164d":"markdown"},"source":{"487f9394":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","402b88cd":"data = pd.read_csv('..\/input\/Video_Games_Sales_as_at_22_Dec_2016.csv')\n","afb3f745":"data.info()","87378fbf":"data.columns","3ec5f5a5":"data.shape ","7f1e574b":"data.head()\n#Shows first five datas","580f2db5":"data.tail()\n#Shows last five datas","efa6bead":"data.corr()\n#It gives us corrolation between dataframes\n#If number close to 1, there is right proportion between dataframes\n#If number close to - 1, there is inverse ratio between dataframes\n#If number is 0, dataframes are irrelevant.","a4c22c21":"#CORRELATION MAP\n\nf,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","91e6f2ab":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\n#You can use \"-.\", \":\", \"-\", \"--\" for linestyle\n# \"gca\" stands for 'get current axis'\n\nax = plt.gca()\ndata.plot(kind='line',x='Year_of_Release',y='NA_Sales',linewidth=1,grid=True,linestyle = '-.', ax=ax)\ndata.plot(kind='line',x='Year_of_Release',y='JP_Sales', color='red',linewidth=1, grid=True,linestyle = ':', ax=ax)\nplt.legend(loc='upper right')\nplt.title(\"Comparison of North America Sales and Japan Sales\")\nplt.show()\n","d14e9324":"#Scatter Plot\n#Scatter plot is better when there is a corrolation between dataframes\n# x = global sales, y = na sales\ndata.plot(kind='scatter', x='NA_Sales', y='Global_Sales',alpha = 0.5,color = 'red')\nplt.xlabel('North America Sales')              \nplt.ylabel('Global Sales')\nplt.title('Sales of North America and Global Scatter Plot')            # title = title of plot","f60b67b7":"# Histogram\n# bins = number of bar in figure\n#color types= b:blue, c:cyan, r:red, g:green, y:yellow\ndata.Critic_Score.plot(kind = 'hist',color=\"r\", bins = 50,figsize = (12,12))\nplt.show()","a71bb940":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata.plot(kind = \"hist\",y = \"Critic_Score\",bins = 50,range= (0,100),normed = True,ax = axes[0])\ndata.plot(kind = \"hist\",y = \"Critic_Score\",bins = 50,range= (0,100),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","df315122":"data.plot()\n#so confusing","64c80b8e":"data.plot(subplots = True)\nplt.show()","6cf60488":"#Filtering\ndata[np.logical_and(data['NA_Sales']>10, data['EU_Sales']>10 )]\n#If we want, we can use \"&&\" instead of comma","fc29888a":"data[\"Developer_on_what\"] = data.Developer + \" \"+ data.Platform\ndata","014c02b8":"meanTotalSales = sum(data.Global_Sales)\/len(data.Global_Sales)\ndata[\"Global_Sales_Status\"] = [\"above average\" if i > meanTotalSales else \"average below\" for i in data.Global_Sales]","7bb2a2be":"data.loc[:, ['Name', 'Global_Sales', 'Global_Sales_Status']]","7a4022eb":"data.describe()\n# count = Number of entries\n# mean = Avarage of entries\n# std = Standart deviation\n# min = Mininmum entry\n# 25% = First quartile\n# 50% = Second quartile or median\n# 75% = Third quartile\n# max = Maximum entry","ea5bfdc4":"print(data['Publisher'].value_counts(dropna =False))\n","82dfd0b1":"data.boxplot(column='Global_Sales',by = 'Global_Sales_Status', figsize=(10,10))","7c381c54":"df_new=data.head() #make new dataframe\ndf_new","18e8ba62":"# melt func\n# id_vars is the variable which need to be left unaltered which is \u201cName\u201d\n# value_vars is what we want to melt\nmelted_df = pd.melt(frame=df_new,id_vars = 'Name', value_vars= ['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales'])\nmelted_df","28a9592e":"melted_df.pivot(index = 'Name', columns = 'variable',values='value')\n#returns previous shape","3bda76d9":"conct1=data.head()\nconct2=data.tail()\n#If we want concatenate two dataframes:\n\nconc_dataframe = pd.concat([conct1,conct2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\n# ignore_index: boolean, default False. If True, do not use the index values on the concatenation axis\n#If False, use previous index values\nconc_dataframe","c40aea35":"data.dtypes","240d994a":"data['Name'] = data['Name'].astype('category')","6549c00a":"data[\"Year_of_Release\"].value_counts(dropna =False)\n# As you see, there are 269 NaN values.","5ece2c33":"new_data=data\nnew_data[\"Year_of_Release\"].dropna(inplace = True)\nnew_data[\"Year_of_Release\"].value_counts(dropna =False)\n# As you see there are no NaN values.","de9c3d47":"#data[\"Year_of_Release\"] = data[\"Year_of_Release\"].fillna(data[\"Year_of_Release\"].mean())\n#data[\"Year_of_Release\"].value_counts(dropna =False)\n#data['Year_of_Release'] = new_df['Year_of_Release'].astype('int')","01ca5c84":"**I wanna see the sales status.**","4d4aa439":"**Defining new column using another column**","a0ddbe8a":"That was my first Kernel. Thanks for reading","b950c688":"**Scatter Plot**","87bda001":"**Plotting all data **","c438cd60":"**<h2>Missing Data<\/h2>** <br><\/br>\n\nIf you encounter with missing data: <br><\/br>\n* Fill it with fillna()\n* Drop it with dropna()\n* Fill missing values with test statistics like **mean** \n","6377a63a":"**Change data type of a column:** ","78ba89c3":"**<h2>Data Types<\/h2>**<br><\/br>\nThere are 7 data types: object, boolean, datetime, timedelta, integer, float and categorical<br><\/br><br><\/br>\n**object:** String<br><\/br>\n**int64:** Integer numbers<br><\/br>\n**float64:** Float point numbers<br><\/br>\n**bool:** True\/False values<br><\/br>\n**datetime64:** Date and time values<br><\/br>\n**timedelta[ns]:** Differences between two datetimes <br><\/br>\n**category:** Finite list of text values<br><\/br><br><\/br>\nWe can make conversion data types","25f376ce":"Histogram subplot with non-cumulative and cumulative","ff53ffe0":"<h2>**Reshape Data ** <\/h2> <b><\/b>\n\nData tables often come in a format that makes sense to the human who created the table, but that\u2019s difficult for analysis. To make analysis easier we can reshape the data into a more computer-friendly form and that' s why we reshape.<b><\/b>\n\nWe use melt() function for reshape.","4189ad9a":"**<h2>Concatenating Data<\/h2>**","fc26aa66":"**Box plots:**  Visualize basic statistics like outliers, min\/max or quantiles <br> <\/br>\nFor example: Compare global sales of games that are above avarage or not","b6a8a9b9":"**<h2>Pivoting Data<\/h2>**<br><\/br>\nReverse of melting.","2ea4517c":"***Note!!! :*** If some values in column are missing (NaN) and then converted to numeric, always dtype is float. You cannot convert values to int. Only to float, because type of NaN is float. If you wanna convert column data type but there are NaN values, first you should fill NaN values. You can use **fillna()** function.","60319d68":"Welcome. We're gonna look at video games statics in this Kernel. We will learn data visualization, data cleaning  and beginning of the data science","7897c778":"**Drop NaN Values**","bfd4f52d":"**Fill NaN Values**","2e6e5ff2":"I've got too many NaN values in \"Year_of_Relase\" column and that column's type is float. I wanna change to integer column type but first I must fill NaN values. I use fillna() function for that.  I fill with mean of the years.\n","77f7b2ec":"**Histogram**","3f9745aa":"Let' s look frequency of **game publisher**","9a7e164d":"**Line Plot**"}}