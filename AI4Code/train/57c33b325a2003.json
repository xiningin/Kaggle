{"cell_type":{"1dc67cc9":"code","b0449c17":"code","3deca5cf":"code","8d435b15":"code","a7d4bdcb":"code","6dba6dbc":"code","95c81b54":"code","6914857d":"code","f67968a6":"code","ccafb054":"code","a1912958":"code","65b86dec":"code","275422fe":"code","f2c01dfd":"code","4312960c":"code","7a065d6e":"code","627c9b07":"code","7f792843":"code","b1b1e75c":"code","21704cc0":"markdown","7a65980c":"markdown","37a5aa90":"markdown","bd7bc733":"markdown","e11feafa":"markdown","57c13183":"markdown","fc3e1c59":"markdown","3b39fd72":"markdown","ce3ebfb3":"markdown"},"source":{"1dc67cc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport cv2\nimport matplotlib.image as mpimg\nimport os\nfrom PIL import Image\nimport seaborn as sns\nfrom sklearn.model_selection import  train_test_split\nfrom keras.utils import to_categorical\nfrom sklearn.utils import shuffle\nfrom tensorflow.keras.applications.resnet50 import ResNet50\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0449c17":"\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory='..\/input\/tomato-leaf-disease\/Tomato Leaf Diseases\/Training Set\/',\n    labels='inferred',\n    label_mode='categorical',\n    batch_size=32,\n    image_size=(256, 256))\nvalidation_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory='..\/input\/tomato-leaf-disease\/Tomato Leaf Diseases\/Validation Set\/',\n    labels='inferred',\n    label_mode='categorical',\n    batch_size=32,\n    image_size=(256, 256))","3deca5cf":"class_names = train_ds.class_names\nclasses = train_ds.class_names\n\nprint(class_names)\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n  for i in range(9):\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(images[i].numpy().astype(\"uint8\"))\n    plt.title(class_names[i])\n    plt.axis(\"off\")\n","8d435b15":"\ndata_augmentation = tf.keras.models.Sequential(\n  [\n    tf.keras.layers.experimental.preprocessing.RandomFlip(\"horizontal\", \n                                                 input_shape=(256, \n                                                              256,\n                                                              3)),\n     tf.keras.layers.experimental.preprocessing.RandomRotation(0.1),\n     tf.keras.layers.experimental.preprocessing.RandomZoom(0.1),\n  ]\n)","a7d4bdcb":"data_augmentation = tf.keras.models.Sequential(\n  [\n    tf.keras.layers.experimental.preprocessing.RandomFlip(\"horizontal\", \n                                                 input_shape=(256, \n                                                              256,\n                                                              3)),\n     tf.keras.layers.experimental.preprocessing.RandomRotation(0.1),\n    tf.keras.layers.experimental.preprocessing.RandomContrast(0.1),\n     tf.keras.layers.experimental.preprocessing.RandomZoom(0.1),\n  ]\n)\n\nmodel = tf.keras.models.Sequential([\n    # This is the first convolution\n    data_augmentation,\n    tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(256, 256, 3)),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.Dropout(0.25),\n\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dropout(0.25),\n    # 512 neuron hidden layer\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n\nadam = tf.keras.optimizers.Adam(lr=0.01, decay=1e-6)\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate=1e-2,\n    decay_steps=10000,\n    decay_rate=0.9)\noptimizer = tf.keras.optimizers.SGD(learning_rate=lr_schedule)\nmodel.compile(\n    loss='categorical_crossentropy', \n    optimizer=optimizer, \n    metrics=['accuracy']\n)","6dba6dbc":"class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self,epoch,logs={}):\n    if logs.get('accuracy') is not None and logs.get('accuracy') > 0.985:\n      print(\"\\n reached 98.5% accuracy so canceling training!\")\n      self.model.stop_training=True","95c81b54":"epochs = 100\nfilepath=\"CNNweights.best.hdf5\"\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]\n#callbacks=myCallback()\nhistory = model.fit(train_ds, batch_size=32, epochs=epochs,\nvalidation_data=validation_ds,callbacks=callbacks_list)","6914857d":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","f67968a6":"model.save('saved_model\/my_model')\nnew_model = tf.keras.models.load_model(filepath)\nnew_model.summary()\n","ccafb054":"converter = tf.lite.TFLiteConverter.from_keras_model(new_model)\ntflite_model = converter.convert()\n\n# Save the model.\nwith open('CNNmodel.tflite', 'wb') as f:\n  f.write(tflite_model)","a1912958":"#image='\/kaggle\/input\/TomatoLeaf\/a.png'\n#image='\/kaggle\/input\/TomatoLeaf\/4a52febc9b1b81772f71572702326631.jpg'\nimage='\/kaggle\/input\/TomatoLeaf\/septoria-leaf-spot3.jpg'\n\n\n\nimg = tf.keras.preprocessing.image.load_img(\n    image, target_size=(256, 256)\n)\nplt.imshow(img)\nplt.show()\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0) # Create a batc\npred=new_model.predict_classes(img_array)\n\nprint(f'the predicted label is: {class_names[int(pred)]}')\nprint(f' the model is sure about it in :{new_model.predict(img_array)[0][pred]}')\n\n\nplt.show()\n\n","65b86dec":"plt.figure(figsize=(10, 10))\n\npred=(int(pred))\nprint(class_names[pred])\npath = f\"..\/input\/tomato-leaf-disease\/Tomato Leaf Diseases\/Training Set\/{class_names[pred]}\/\"   \nimport random\npics=[]\nfor r, d, f in os.walk(path):\n    for file in f:\n        pics.append(os.path.join(r, file))\n        \nfor i in range(0,9):\n    plt.subplot(331+i)\n    img= cv2.imread(pics[random.randint(0, 999)])\n    plt.imshow(img)\n    \nplt.show()\n          ","275422fe":"ResNetModel = ResNet50(weights=None,input_shape=(256,256,3),include_top=False)\nfor layer in ResNetModel.layers:\n  layer.trainable=False\n  \n# Print the model summary\n#ResNetModel.summary()","f2c01dfd":"from tensorflow.keras import Model\n\nlast_layer = ResNetModel.get_layer('conv5_block3_out')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output\nx = tf.keras.layers.Flatten()(last_output)\nx = tf.keras.layers.Dense(10,activation='softmax')(x)           \n\nResNetModel = Model(ResNetModel.input, x) \n\n\nResNetModel.compile(\n    loss='categorical_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)\n#ResNetModel.summary()","4312960c":"epochs=50\nfilepath=\"RESNETweights.best.hdf5\"\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]\n\nhistory = ResNetModel.fit(train_ds, batch_size=32, epochs=epochs,\nvalidation_data=validation_ds,callbacks=callbacks_list)","7a065d6e":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","627c9b07":"converter = tf.lite.TFLiteConverter.from_keras_model(ResNetModel)\ntflite_model = converter.convert()\n\n# Save the model.\nwith open('RESNETmodel.tflite', 'wb') as f:\n  f.write(tflite_model)","7f792843":"#image='\/kaggle\/input\/TomatoLeaf\/a.png'\n#image='\/kaggle\/input\/TomatoLeaf\/4a52febc9b1b81772f71572702326631.jpg'\nimage='\/kaggle\/input\/TomatoLeaf\/septoria-leaf-spot3.jpg'\n\n\n\nimg = tf.keras.preprocessing.image.load_img(\n    image, target_size=(256, 256)\n)\nplt.imshow(img)\nplt.show()\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0) # Create a batc\npred=ResNetModel.predict_classes(img_array)\n\nprint(f'the predicted label is: {class_names[int(pred)]}')\nprint(f' the model is sure about it in :{ResNetModel.predict(img_array)[0][pred]}')\n\n\nplt.show()\n\n","b1b1e75c":"plt.figure(figsize=(10, 10))\n\npred=(int(pred))\nprint(class_names[pred])\npath = f\"..\/input\/tomato-leaf-disease\/Tomato Leaf Diseases\/Training Set\/{class_names[pred]}\/\"   \nimport random\npics=[]\nfor r, d, f in os.walk(path):\n    for file in f:\n        pics.append(os.path.join(r, file))\n        \nfor i in range(0,9):\n    plt.subplot(331+i)\n    img= cv2.imread(pics[random.randint(0, 999)])\n    plt.imshow(img)\n    \nplt.show()\n          ","21704cc0":"using Keras- preprocessing to manage the dataset","7a65980c":"Loading the best Model from training!","37a5aa90":"two optional callbacks to customize, i prefer using the Checkpoint one here.","bd7bc733":"showing some pictures from the category that was predicted","e11feafa":"Taking a look at the diffrenet categories","57c13183":"0.973 accuracy on val set! thats amazing! ","fc3e1c59":"Adding some dataAugmentation to the data set","3b39fd72":"Simple model with couple of dropouts.","ce3ebfb3":"Trying out Resnet50 *not finished yet*"}}