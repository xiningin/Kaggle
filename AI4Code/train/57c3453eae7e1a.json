{"cell_type":{"d5f518ac":"code","930e6c8e":"code","4e7d59cf":"code","d72adb5c":"code","a3fa76b6":"code","6bc147f8":"code","fb38fb9c":"code","4c63d169":"code","487779d5":"code","c6ce1b3f":"code","2425ab34":"code","f03bfd65":"code","78091b99":"code","abd50415":"code","3ccfd3e6":"code","2436e0c1":"code","73aabdf1":"code","fc18faee":"code","57c41fac":"code","9c910afb":"code","3d4bf9ce":"code","acecbe99":"code","409d1743":"code","5904d281":"code","4a4cd573":"code","a63cbf9c":"code","3e713cb8":"code","5a7cd3c4":"code","a931df9f":"code","01f9258f":"code","6fcc2d9d":"code","40d18293":"code","d04e40eb":"code","2ba49191":"code","d6c7268f":"code","576d7083":"code","a1e911f2":"code","805c64e1":"code","1521c455":"code","43158dd6":"code","7b29092e":"code","45c96580":"code","e93d5a2b":"code","53f59240":"code","b2227f71":"code","1a2c409d":"code","011226b1":"code","4957fa86":"code","9113396c":"code","b14d91f7":"code","1999b784":"code","ade8f74d":"code","d1568870":"code","f14b96de":"code","1de28f98":"code","0ddbdb3e":"code","7e162345":"code","1ca8d69b":"code","c070b98b":"code","70180da6":"code","47ef2898":"code","945020e1":"code","fab65c9f":"code","fd61f5d7":"code","4827c514":"code","4f03d811":"code","2ecc4080":"code","75777dd2":"code","2490326c":"code","115c5b99":"code","79cd0e24":"code","e21eed5e":"code","fb37e32b":"code","15587102":"code","63bf8e34":"code","1948aaf9":"code","8e46aedd":"code","25d28996":"code","e1b4e4f4":"code","d35cff15":"code","a9704af5":"code","0af62970":"code","522850f3":"code","6bfa840b":"code","a113b495":"code","5d52cd5d":"code","16414aca":"code","c60191e9":"code","3cacfc9e":"code","82c31edf":"code","cad52186":"code","2643e998":"code","09f74a3b":"code","503d67b7":"code","9da188d2":"code","b518884e":"code","7c09965e":"code","ab42773f":"code","628eb315":"code","9347ce13":"code","4b10a11a":"code","019d5a99":"code","d2799cd5":"code","9a8f61b9":"code","2e8efd7b":"code","bbe8216d":"code","40993ce5":"code","ba873767":"code","f7b3b29c":"code","270c20cf":"code","7d41add3":"code","3b74f004":"code","48da230b":"code","563ee3de":"code","9cfa9b64":"code","4d43c9bc":"code","49d9ba30":"code","fe7693bb":"code","52a3eee8":"code","557bd5fe":"code","b40b8528":"code","2b5e4a2d":"code","2fe59c02":"code","e775777d":"code","7dca436f":"code","a43ad104":"markdown","80483755":"markdown","57398e42":"markdown","244d4143":"markdown","955703be":"markdown","c8fba62a":"markdown","e7730fda":"markdown","6db2631f":"markdown","21a0092d":"markdown","e118ba8e":"markdown","62ceaa14":"markdown","a781c011":"markdown","1440bd95":"markdown","33000240":"markdown","eca0acf6":"markdown","ca7db986":"markdown","d59b8f5d":"markdown","c0dc79be":"markdown","9f91a46c":"markdown","512a589d":"markdown","7b6f5106":"markdown","a36f188e":"markdown","bfb10497":"markdown","5d5993eb":"markdown","518c3a71":"markdown","1585beee":"markdown","facf4cb8":"markdown","fe5e4fd1":"markdown","67544de9":"markdown","9ac794cc":"markdown","7eea53a3":"markdown","85e94b18":"markdown","d57d4d21":"markdown","24ff688b":"markdown","0bb9f3fe":"markdown","466a5d88":"markdown","6c893133":"markdown","9249b113":"markdown","01949a2f":"markdown","6c48b33c":"markdown","669ddaf1":"markdown","1f7b0d70":"markdown","7c9bbb4e":"markdown","7d888cfa":"markdown","4be94612":"markdown","b8707a2d":"markdown","fc4ac2c1":"markdown","7325b340":"markdown","4b306dcd":"markdown","aaf4c7e9":"markdown","58de86b3":"markdown","5fcd190c":"markdown","b05b21e7":"markdown","5e4d97b4":"markdown","f212d803":"markdown","299ce78e":"markdown","ecb0d1fc":"markdown","645a73c6":"markdown","7c020d09":"markdown","5152cf4a":"markdown","775c3806":"markdown","c9e4a2a4":"markdown","82afbe72":"markdown","5e0e6f10":"markdown","c8f0c47a":"markdown","85f01334":"markdown","f1544a15":"markdown","dab02e33":"markdown","6bc2e391":"markdown","a5953dd5":"markdown","32c54631":"markdown","221211be":"markdown","45b25c49":"markdown","1da88811":"markdown","5a1fece3":"markdown","4c5874b3":"markdown","93c5159a":"markdown"},"source":{"d5f518ac":"import numpy as np\nimport seaborn as sns\nsns.set_style('darkgrid')\nsns.set(color_codes=True)\nfrom datetime import datetime\nimport pandas as pd\npd.options.mode.chained_assignment = None\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport re\nfrom string import Template\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","930e6c8e":"df = pd.read_csv('\/kaggle\/input\/ipldata\/matches.csv',parse_dates=['date'], dayfirst=True)\nprint('='*20 + 'Exploratory Data Analysis' + '='*20)\nprint('='*20 + 'SHAPE' + '='*20)\nprint(df.shape)\nprint('\\n\\n')\nprint('='*20 + 'INFO' + '='*20)\ndf.info()\nprint('\\n\\n')\nprint('='*20 + 'DESCRIBE' + '='*20)\nprint(df.describe())\nprint('\\n\\n')\n\n","4e7d59cf":"print('='*20 + 'NA CHECK' + '='*20)\nprint(df.isna().any())\nprint(df.isna().sum())\nprint('\\n\\n')\nprint('='*20 + 'UNIQUE VALUES' + '='*20)\n# I will only check those col for unique values where I'm not sure what possible values can the col take. For others it would be a sanity check, like wickets can't be more than 10 etc\nprint('\\n Result')\nprint(df.result.unique())\nprint('\\n toss_decision')\nprint(df.toss_decision.unique())\nprint('\\n winner')\nprint(df.winner.unique())\nprint('\\n win_by_runs')\nprint(df.win_by_runs.unique())\nprint('\\n win_by_wickets')\nprint(df.win_by_wickets.unique())","d72adb5c":"# Drop ump3 col \ndf1 = df.drop(columns='umpire3')\n# Sort by season, date (2nd level sort),city\ndf1 = df1.sort_values(by=['season','date','city'])\n\ndf1.replace({'Rising Pune Supergiant':'Rising Pune Supergiants', 'Delhi Daredevils': 'Delhi Capitals', 'Bengaluru':'Bangalore'}, inplace=True)\n\n# Removing leading\/trailing whitespaces and changing to upper case\n# TODO: There has to be a better way to do this!\ndf1.city = df1.city.str.strip().str.upper()\ndf1.team1 = df1.team1.str.strip().str.upper()\ndf1.team2 = df1.team2.str.strip().str.upper()\ndf1.toss_winner = df1.toss_winner.str.strip().str.upper()\ndf1.toss_decision = df1.toss_decision.str.strip().str.upper()\ndf1.result = df1.result.str.strip().str.upper()\ndf1.winner = df1.winner.str.strip().str.upper()\ndf1.player_of_match = df1.player_of_match.str.strip().str.upper()\ndf1.venue = df1.venue.str.strip().str.upper()\ndf1.umpire1 = df1.umpire1.str.strip().str.upper()\ndf1.umpire2 = df1.umpire2.str.strip().str.upper()\n\n\n# df1['team1'].value_counts()\ndf1.head()\n","a3fa76b6":"# Let's address all team names by their initials. This will result in cleaner plot labels\/ticks\ndf1.replace({\n'CHENNAI SUPER KINGS': 'CSK',\n'DELHI CAPITALS': 'DC',\n'KINGS XI PUNJAB': 'KXIP',\n'KOLKATA KNIGHT RIDERS': 'KKR',\n'MUMBAI INDIANS': 'MI',\n'RAJASTHAN ROYALS': 'RR',\n'ROYAL CHALLENGERS BANGALORE': 'RCB',\n'SUNRISERS HYDERABAD': 'SRH',\n'DECCAN CHARGERS': 'DCH',\n'GUJARAT LIONS':'GL',\n'KOCHI TUSKERS KERALA': 'KTK',\n'RISING PUNE SUPERGIANTS':'RPS',\n'PUNE WARRIORS':'PW'\n}, inplace=True)\n","6bc147f8":"#We would need a team list at some point\nteam1_elements = df1.team1.value_counts().index.tolist()\nteam2_elements = df1.team2.value_counts().index.tolist()\nteam_list = list(set(team1_elements + team2_elements))\nteam_list.sort()\nprint(team_list)\nprint(\"Total number of teams: \"+ str(len(team_list)))","fb38fb9c":"trivial_teams = [\n 'DCH',\n 'GL',\n 'KTK',\n 'RPS',\n 'PW']\n\n# trivial_teams","4c63d169":"imp_teams = [team for team in team_list if team not in trivial_teams]\n\n# declare vars holding these team names\ncsk = 'CSK'\ndc = 'DC'\nkxip = 'KXIP'\nkkr ='KKR'\nmi = 'MI'\nrr = 'RR'\nrcb = 'RCB'\nsrh = 'SRH'\ndch = 'DCH'\ngl = 'GL'\nktk = 'KTK'\nrps = 'RPS'\npw = 'PW'\n\nimp_teams","487779d5":"champ_teams = [csk,kkr,mi]","c6ce1b3f":"# line\/marker colors matching the uniforms of the imp teams\nimp_cities = ['MUMBAI',\n'BANGALORE',  \n'KOLKATA',\n'DELHI',\n'CHENNAI']\nimp_cities.sort()\n# ipl_city_palette = [\"#FFFF3C\", \"#00008B\", \"#2E0854\",\"#004BA0\",\"#EC1C24\"]\nipl_line_palette = [\"#FFFF3C\", \"#00008B\",  \"#2E0854\",\"#ED1B24\",\"#004BA0\", \"#EC1C24\",\"pink\",\"#FF822A\"]\nipl_marker_palette = [\"#0081E9\", \"#EF1B23\",  \"#B3A123\",\"#DCDDDF\",\"#D1AB3E\", \"#2B2A29\",\"#254AA5\",\"#000000\"]\nipl_city_palette = {'BANGALORE':\"#EC1C24\", 'CHENNAI': \"#FFFF3C\", 'DELHI':\"#00008B\" , 'KOLKATA':\"#2E0854\" , 'MUMBAI':\"#004BA0\"}\nipl_team_palette = {csk:\"#FFFF3C\", dc:\"#00008B\", kxip:\"#ED1B24\", kkr:\"#2E0854\",mi:\"#004BA0\", rr:\"pink\",rcb:\"#EC1C24\",srh:\"#FF822A\"}\n\nimp_cities","2425ab34":"\ndef plot(xlabel, ylabel, title,  y_lim, y_init = 0, y_interval=10):\n    \"\"\"custom func to prevent repetition while plotting matplotlib plots\"\"\"\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.title(title)\n    plt.yticks(range(y_init, y_lim + y_interval, y_interval))\n    plt.show()\n\ndef plot_sns(g, xlabel=\"\", ylabel=\"\", title=\"\", y = 1.07 , y_lim=100, y_init = 0, y_interval=10, rot = 90,face_grid=True):\n    \"\"\"custom func to prevent repetition while plotting Seaborn plots\"\"\"\n    if face_grid is True:\n        g.fig.suptitle(title, y = y)\n    else:\n        g.set(title = title)\n    g.set(xlabel = xlabel, ylabel = ylabel)\n    plt.yticks(range(y_init, y_lim + y_interval, y_interval))\n    plt.xticks(rotation=rot)\n    plt.show()","f03bfd65":"dict_city_homeground = {\n    'CHANDIGARH': kxip, \n    'MOHALI': kxip,\n    'DHARAMSALA': kxip,\n    'CHENNAI': csk, \n    'BANGALORE': rcb, \n    'HYDERABAD': srh,\n    'VISAKHAPATNAM': dch,\n    'RAJKOT': gl, \n    'PUNE': rps, \n    'KOCHI': ktk, \n    'MUMBAI': mi, \n    'KOLKATA': kkr, \n    'JAIPUR': rr,\n    'DELHI': dc\n}\n\n# create a new column indicating which is the home team for the match\ndf1['home_team'] = None\n        \nfor row in df1.itertuples():\n     df1.at[row.Index, 'home_team'] = dict_city_homeground.get(df1.at[row.Index,'city'], \"\")\n        \ndf1.tail()\n","78091b99":"team1vc = df1[~df1.team1.isin(trivial_teams)].team1.value_counts()\nteam2vc = df1[~df1.team2.isin(trivial_teams)].team2.value_counts()\nmatches_per_team = (team1vc + team2vc).sort_index()","abd50415":"df1['toss_and_match_winners_same'] = df1.winner == df1.toss_winner\ndf1['home_team_victorious'] = df1.winner == df1.home_team\ndef get_match_loser(row):\n    loser = ''\n    if row['winner'] == row['team1']:\n        loser = row['team2']\n    else:\n        loser = row['team1']\n    return loser\n\ndef get_toss_loser(row):\n    loser = ''\n    if row['toss_winner'] == row['team1']:\n        loser = row['team2']\n    else:\n        loser = row['team1']\n    return loser\n\ndf1['loser'] = df1.apply(get_match_loser, axis = 1)\ndf1['toss_loser'] = df1.apply(get_toss_loser, axis = 1)\n\nmatch_winners = df1.winner.value_counts().drop(labels=trivial_teams).sort_index()\nmatch_losers = df1.loser.value_counts().drop(labels=trivial_teams).sort_index()\ntoss_winners = df1.toss_winner.value_counts().drop(labels=trivial_teams).sort_index()\ntoss_losers = df1.toss_loser.value_counts().drop(labels=trivial_teams).sort_index()\ndf1.head()","3ccfd3e6":"df1['day'] = pd.DatetimeIndex(df1['date']).day_name()\nday_vc = df1['day'].value_counts()\n\norder=['Sunday', 'Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']\ng = sns.catplot(x=\"day\", data = df1, kind=\"count\", order = order, height=5, aspect = 1.5)\nplot_sns(g, ylabel = \"No of matches\",title =\"Matches played on each day of the week\", y_lim = 160, y_interval = 20)\n","2436e0c1":"def calc_match_ratio_of_day(team):\n    days = ['Sunday', 'Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']\n    match_ratio_per_day = []\n    is_team_involved = (df1.team1==team) | (df1.team2==team)\n    for day in days:\n        match_ratio_per_day.append( len( df1[ is_team_involved & (df1.day==day) ]) *100 \/\/ len(df1[ is_team_involved ]))\n    \n    return match_ratio_per_day\n\nx_days = ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n\n\nplt.figure(figsize=(12,5))\nplt.plot(x_days, calc_match_ratio_of_day(mi), marker='o', markerfacecolor='b', markersize=7, color='skyblue', linewidth=4,label='MI')\nplt.plot(x_days, calc_match_ratio_of_day(csk),marker=(8,2,0), markerfacecolor='orange', markersize=9, color='y', linewidth=3, linestyle=\"--\",label='CSK')\nplt.plot(x_days, calc_match_ratio_of_day(kkr), marker='d', markerfacecolor='purple', markersize=5, color='darkblue', linewidth=2,linestyle=\"-.\",label='KKR')\nplt.plot(x_days, calc_match_ratio_of_day(rcb), marker='x', markerfacecolor='m', markersize=5, color='r', linewidth=1,linestyle=\":\",label='RCB')\nplt.ylim([0,30])\nplt.legend()\nplt.ylabel('%age of matches played')\nplt.title('Matches played on different days')\nplt.show()\n","73aabdf1":"def calc_win_ratio_of_day(team):\n    days = ['Sunday', 'Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']\n    win_ratio_per_day = []\n    for day in days:\n        win_ratio_per_day.append( len( df1[ (df1.winner==team) & (df1.day==day) ]) *100 \/\/ len(df1[df1.winner==team]))\n    \n    return win_ratio_per_day\n\nx_days = ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n\nplt.figure(figsize=(12,5))\nplt.plot(x_days, calc_win_ratio_of_day(mi), marker='o', markerfacecolor='b', markersize=7, color='skyblue', linewidth=4,label='MI')\nplt.plot(x_days, calc_win_ratio_of_day(csk),marker=(8,2,0), markerfacecolor='orange', markersize=9, color='#FFDB58', linewidth=3, linestyle=\"--\",label='CSK')\nplt.plot(x_days, calc_win_ratio_of_day(kkr), marker='d', markerfacecolor='purple', markersize=5, color='darkblue', linewidth=2,linestyle=\"-.\",label='KKR')\nplt.plot(x_days, calc_win_ratio_of_day(rcb), marker='x', markerfacecolor='m', markersize=5, color='r', linewidth=1,linestyle=\":\",label='RCB')\n\nplt.ylim([0,30])\nplt.legend()\nplt.ylabel('%age of matches won')\nplt.title('Performance on different days')\nplt.show()\n","fc18faee":"fig, ax = plt.subplots(nrows = 2, ncols = 4, figsize=(20,10), sharex=False, sharey=True)\n\ndef add_subplot(ax=ax, x=x_days , team='Mumbai Indians', m='o', mc='b', ms=12, c='skyblue', lw=6, ls =\"solid\", label='', labelc='b'):\n    ax.plot(x, calc_win_ratio_of_day(team), marker=m, markerfacecolor=mc, markersize=ms, color=c, linewidth=lw, linestyle=ls, label=label)\n#     ax.set_yticks(range(0, 45, 5))\n    ax.set_title(label,color=labelc)\n\nadd_subplot(ax=ax[0,0], team=mi,m='o',mc='b', c='skyblue',label='MI',labelc = 'b')\nadd_subplot(ax=ax[0,1], team=csk,m='X',mc='#E56717', c='#FFDB58',label='CSK',labelc = '#E56717')\nadd_subplot(ax=ax[0,2], team=kkr,m='D',mc='#FFDB58', c='darkblue', label='KKR',labelc = 'darkblue')\nadd_subplot(ax=ax[0,3], team=rcb,m='8',mc='black', ms=10, c='r', label='RCB',labelc = 'r')\nadd_subplot(ax=ax[1,0], team=rr,m='d',mc='b', c='pink',label='RR',labelc = 'b')\nadd_subplot(ax=ax[1,1], team=kxip,m='d',mc='#BCC6CC', c='r', label='KXIP',labelc = 'r')\nadd_subplot(ax=ax[1,2], team=srh,m='d',mc='black', c='#E56717', label='SRH',labelc = '#E56717')\nadd_subplot(ax=ax[1,3], team=dc,m='d',mc='r', c='Blue',label='DC',labelc = 'b')\n\n# fig.suptitle('Performance on different days', fontsize=20)\nplt.setp(ax[:, 0], ylabel='% of Matches Won')\nfig.tight_layout()","57c41fac":"plt.figure(figsize=(8,5))\ng = sns.barplot(x=matches_per_team.index, y=matches_per_team, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g,ylabel = 'No of matches', title = 'Matches played by each team', \n     y_lim = matches_per_team.max(), y_interval = 20, face_grid=False)\n\n\n","9c910afb":"plt.figure(figsize=(8,5))\ng = sns.barplot(x=match_winners.index, y=match_winners, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g,ylabel = 'No of matches', title = 'Matches won by each team', \n     y_lim = match_winners.max(), y_interval = 20, face_grid=False)","3d4bf9ce":"match_win_ratio = (match_winners.sort_index()*100 \/\/ matches_per_team.sort_index())\nplt.figure(figsize=(8,5))\ng = sns.barplot(x=match_win_ratio.index, y = match_win_ratio,\n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age of matches won\",title =\"Win %age of each team\", y_lim = match_win_ratio.max(), \n         y_interval=10,  face_grid=False)\n\n","acecbe99":"toss_win_ratio = (toss_winners*100 \/\/ matches_per_team.sort_index())\nplt.figure(figsize=(8,5))\ng = sns.barplot(x=toss_win_ratio.index, y = toss_win_ratio, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age of tosses won\",title =\"Toss %age of each team\", y_lim = toss_win_ratio.max(), \n         y_interval=10,  face_grid=False)","409d1743":"match_win_ratio = (match_winners.sort_index()*100 \/\/ matches_per_team.sort_index()).sort_values(ascending=False)\ntoss_win_ratio = (toss_winners.sort_index()*100 \/\/ matches_per_team.sort_index()).sort_values(ascending=False)\nmatch_win_ratio_col_name = \"Matches Won %age\"\ntoss_win_ratio_col_name = \"Tosses Won %age\"\ndf_combo = pd.DataFrame({match_win_ratio_col_name:match_win_ratio, toss_win_ratio_col_name:toss_win_ratio}).sort_values([match_win_ratio_col_name], ascending = False)\n# we shud pass figsize as an argument instead of calling it separately as we are not operating on a single column, instead multiple columns\ndf_combo.plot(color=[\"SkyBlue\",\"IndianRed\"],kind='bar', grid=True, figsize=(20,7))\nplot(xlabel = 'Teams', ylabel = '%age of matches\/tosses won', title = 'Matches Won %age vs Tosses Won %age', \n     y_lim = df_combo[[match_win_ratio_col_name,toss_win_ratio_col_name]].values.max())","5904d281":"same_toss_and_match_winners = df1['toss_winner'] == df1['winner']\nmatch_winner_toss_winner = df1[same_toss_and_match_winners]['winner'].value_counts().sort_index()\nmatch_winner_toss_winner_ratio = (match_winner_toss_winner *100 \/\/ toss_winners)\nmatch_winner_toss_winner_ratio = match_winner_toss_winner_ratio.drop(labels=trivial_teams)\nplt.figure(figsize=(8,5))\ng = sns.barplot(x=match_winner_toss_winner_ratio.index, y = match_winner_toss_winner_ratio, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age\",title =\"%age of matches won after winning toss\", y_lim = 75, \n         y_interval=10,  face_grid=False)\n","4a4cd573":"diff_toss_and_match_winners = df1['toss_winner'] != df1['winner']\nmatch_loser_toss_winner = df1[diff_toss_and_match_winners]['toss_winner'].value_counts().sort_index()\n\nmatch_loser_toss_winner_ratio = (match_loser_toss_winner *100 \/\/ toss_winners)\nmatch_loser_toss_winner_ratio = match_loser_toss_winner_ratio.drop(labels=trivial_teams)\nplt.figure(figsize=(8,5))\n\ng = sns.barplot(x=match_loser_toss_winner_ratio.index, y = match_loser_toss_winner_ratio, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age\",title =\"%age of matches lost after winning toss\", y_lim = 70, \n         y_interval=10,  face_grid=False)","a63cbf9c":"match_winner_toss_loser = df1['toss_loser'] == df1['winner']\nmatch_winner_toss_loser = df1[match_winner_toss_loser]['winner'].value_counts().sort_index()\nmatch_winner_toss_loser_ratio = (match_winner_toss_loser*100 \/\/ toss_losers)\nmatch_winner_toss_loser_ratio = match_winner_toss_loser_ratio.drop(labels=trivial_teams)\n\nplt.figure(figsize=(8,5))\n\ng = sns.barplot(x=match_winner_toss_loser_ratio.index, y = match_winner_toss_loser_ratio, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age\",title =\"%age of matches won after losing toss\", y_lim = 70, \n         y_interval=10,  face_grid=False)","3e713cb8":"match_loser_toss_loser = df1['toss_loser'] == df1['loser']\nmatch_loser_toss_loser = df1[match_loser_toss_loser]['loser'].value_counts().sort_index()\n\nmatch_loser_toss_loser_ratio = (match_loser_toss_loser*100 \/\/ toss_losers)\nmatch_loser_toss_loser_ratio = match_loser_toss_loser_ratio.drop(labels=trivial_teams)\nplt.figure(figsize=(8,5))\n\ng = sns.barplot(x=match_loser_toss_loser_ratio.index, y = match_loser_toss_loser_ratio, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age\",title =\"%age of matches lost after losing toss\", y_lim = 70, \n         y_interval=10,  face_grid=False)\n","5a7cd3c4":"won_at_home_vc = df1[df1['winner'] == df1['home_team']].winner.value_counts()\nplayed_at_home_vc = df1['home_team'].value_counts()\n\nwon_at_home_col = \"Won at home\"\nplayed_at_home_col = \"Played at home\"\nplayed_col = \"Total Played\"\ndf_win_home_ratio = pd.DataFrame({played_col: matches_per_team, played_at_home_col: played_at_home_vc, \n                                  won_at_home_col:won_at_home_vc}).sort_values([played_col], ascending=False)\n\ndf_win_home_ratio[won_at_home_col] = df_win_home_ratio[won_at_home_col].fillna(0).astype(np.int64)\ndf_win_home_ratio[played_at_home_col] = df_win_home_ratio[played_at_home_col].fillna(0).astype(np.int64)\ndf_win_home_ratio[played_col] = df_win_home_ratio[played_col].fillna(0).astype(np.int64)\n\ndf_win_home_ratio = df_win_home_ratio[0:8].sort_index()\n# we shud pass figsize as an argument instead of calling it separately as we are not operating on a single column, instead multiple columns\ndf_win_home_ratio.plot(color=[\"SkyBlue\",\"IndianRed\",'green'],kind='bar', grid=True, figsize=(10,5))\nplt.legend(loc=\"upper left\", bbox_to_anchor=(1,1))\nplot(xlabel='', ylabel = 'No of matches', title = 'Home ground analysis', \n     y_lim = df_win_home_ratio[played_col].values.max(), y_interval = 20)","a931df9f":"home_matches_won_ratio = (df_win_home_ratio[won_at_home_col].sort_index()*100 \/\/ df_win_home_ratio[played_at_home_col].sort_index())\nplt.figure(figsize=(8,5))\ng = sns.barplot(x=home_matches_won_ratio.index, y = home_matches_won_ratio, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age\",title =\"%age of matches won on home ground\", y_lim = 80, \n         y_interval=10,  face_grid=False)\n","01f9258f":"# Plot no of matches per season\nplt.figure(figsize=(10,5))\nmatches_per_season = df1.season.value_counts().sort_index()\n# print(matches_per_season)\ng = sns.barplot(x=matches_per_season.index, y = matches_per_season)\nplot_sns(g, ylabel = \"No of matches\",title =\"Matches in every season\", y_lim = matches_per_season.max(), y_interval=10,  face_grid=False)\n\n# Plot no of matches per season in which team decided to chase after winning toss\nplt.figure(figsize=(10,5))\nchases_per_season = df1[df1.toss_decision == \"FIELD\"].groupby('season')['toss_decision'].count()\n# print(chases_per_season)\ng = sns.barplot(x=chases_per_season.index, y = chases_per_season)\nplot_sns(g, ylabel = \"No of matches\",title =\"Decided to chase on winning toss\", y_lim = chases_per_season.max(), y_interval=10,  face_grid=False)\n\n\n","6fcc2d9d":"# Plot which cities hosted most matches per season\nplt.figure(figsize=(18,8))\nmatches_per_imp_cities = df1[df1.city.isin(imp_cities)]\ny_lim = matches_per_imp_cities.groupby(['season','city']).count().max(level=0).id.max()\ng = sns.countplot(x = matches_per_imp_cities.season, data = matches_per_imp_cities, hue = matches_per_imp_cities.city, palette = ipl_city_palette)\nplot_sns(g, ylabel = \"No of matches\",title = \"Cities hosting max matches\", y_lim = y_lim, y_interval=4,  face_grid=False)\n\n\n","40d18293":"plt.figure(figsize=(18,5))\nmatches_per_city = df1.city.value_counts()\n# print(matches_per_city)\ng = sns.barplot(x=matches_per_city[matches_per_city >= 10].index, y = matches_per_city[matches_per_city >= 10])\nplot_sns(g, ylabel = \"No of matches\",title =\"Matches in every city\", y_lim = matches_per_city[matches_per_city >= 10].max(), y_interval=10, face_grid=False)\n","d04e40eb":"plt.figure(figsize=(18,4))\nmatches_per_venue = df1.venue.value_counts()\ng = sns.barplot(x=matches_per_venue[matches_per_venue >= 15].index, y = matches_per_venue[matches_per_venue >= 15])\nplot_sns(g, ylabel = \"No of matches\",title =\"Matches in every venue\", y_lim = matches_per_venue[matches_per_venue >= 10].max(), y_interval=10, face_grid=False)\n","2ba49191":"# Plot which teams won most matches per season\nplt.figure(figsize=(18,8))\nwinners_per_season = df1[df1.winner.isin(champ_teams)].sort_values(by=['winner'])\ny_lim = winners_per_season.groupby(['season','winner']).count().max(level=0).id.max()\ng = sns.countplot(x = winners_per_season.season, data = winners_per_season, hue = winners_per_season.winner, palette = ipl_team_palette)\nplot_sns(g, ylabel = \"No of matches\",title = \"Teams winning max matches\", y_lim = y_lim, y_interval=3,  face_grid=False)\n\n","d6c7268f":"# Plot who won most MOMs per season\nplt.figure(figsize=(18,7))\n\ns = df1.groupby(['season']).player_of_match.value_counts()\ns = s.reset_index(name='no')\ns = s[s.groupby(['season'])['no'].transform('max') == s['no']]\ng = sns.barplot(x=s.player_of_match, y = s.no, hue=s.season, dodge=False)\nplot_sns(g, ylabel = \"No of MOM awards\",title =\"Players who won most MOMs\/season\", y_lim = s.no.max(), y_interval=1, face_grid=False)\n\n","576d7083":"plt.figure(figsize=(20,8))\nmom_series = df1.player_of_match.value_counts()\n# print(mom_series.head(30))\ng = sns.barplot(x=mom_series[mom_series >= 10].index, y = mom_series[mom_series >= 10])\nplot_sns(g, ylabel = \"No of MOM awards\",title =\"Players who won MOM most times\", y_lim = mom_series.max(), y_interval=5, face_grid=False)\n\n","a1e911f2":"season_list = df1.season.value_counts().sort_index().index.tolist()\nseason_winner_list = [\n    rr,\n    dch,\n    csk,\n    csk,\n    kkr,\n    mi,\n    kkr,\n    mi,\n    srh,\n    mi,\n    csk,\n    mi\n]\n\nseason_runnerup_list = [\n    csk,\n    rcb,\n    mi,\n    rcb,\n    csk,\n    csk,\n    kxip,\n    csk,\n    rcb,\n    rps,\n    srh,\n    csk\n]\n\ndf_summary = pd.DataFrame({'season': season_list, 'Winner': season_winner_list, 'Runner Up': season_runnerup_list})\n\nfig, ax = plt.subplots(1,2, figsize=(15,5))\n\nwinner_vc = df_summary['Winner'].value_counts()\nwinner_vc.sort_values(ascending=False).plot(ax = ax[0], color=\"SkyBlue\", kind='bar', grid=True)\nax[0].set_ylabel('Title Wins')\nax[0].set_yticks(range(0, 5, 1))\n\nfinalist_vc = df_summary.Winner.append(df_summary['Runner Up']).value_counts()\nfinalist_vc.sort_values(ascending=False).plot(ax = ax[1], color=\"SkyBlue\", kind='bar', grid=True)\nax[1].set_ylabel('Finals Played')\nax[1].set_yticks(range(0, 10, 1))\n    \nfig.tight_layout()\n","805c64e1":"csk_involved = (df1['team1'] == csk) | (df1['team2'] == csk)\nmi_involved = (df1['team1'] == mi) | (df1['team2'] == mi)\nkkr_involved = (df1['team1'] == kkr) | (df1['team2'] == kkr)\nrcb_involved = (df1['team1'] == rcb) | (df1['team2'] == rcb)\n\nmi_vs_csk_vc = df1[csk_involved & mi_involved]['winner'].value_counts()\nmi_vs_kkr_vc = df1[kkr_involved & mi_involved]['winner'].value_counts()\nmi_vs_rcb_vc = df1[rcb_involved & mi_involved]['winner'].value_counts()\ncsk_vs_kkr_vc = df1[csk_involved & kkr_involved]['winner'].value_counts()\ncsk_vs_rcb_vc = df1[csk_involved & rcb_involved]['winner'].value_counts()\nkkr_vs_rcb_vc = df1[rcb_involved & kkr_involved]['winner'].value_counts()\n\nfig, ax = plt.subplots(nrows = 1, ncols = 6, figsize=(20,8), sharey=True)\n\nax[0].set_ylabel('Matches Won')\nax[0].set_yticks(range(0, 30, 1))\n\ndef new_subplot(df = None, width = 0.3, title = \"\", ax = None, color = \"SkyBlue\", kind = 'bar', grid = True):\n    df.plot(title = title, width = width, ax = ax, color = color, kind = kind, grid = grid)\n\nnew_subplot(mi_vs_csk_vc, title=\"MI vs CSK\", ax = ax[0])\nnew_subplot(mi_vs_kkr_vc, title=\"MI vs KKR\", ax = ax[1])\nnew_subplot(mi_vs_rcb_vc, title=\"MI vs RCB\", ax = ax[2])\nnew_subplot(csk_vs_kkr_vc, title=\"CSK vs KKR\", ax = ax[3])\nnew_subplot(csk_vs_rcb_vc, title=\"CSK vs RCB\", ax = ax[4])\nnew_subplot(kkr_vs_rcb_vc, title=\"KKR vs RCB\", ax = ax[5])\n\nfig.tight_layout()\n\n","1521c455":"mi_vs_csk_mom_vc = df1[csk_involved & mi_involved]['player_of_match'].value_counts()\nplt.figure(figsize=(15,5))\ng = sns.barplot(x=mi_vs_csk_mom_vc.index, y = mi_vs_csk_mom_vc)\nplot_sns(g, ylabel = \"MOM awards\",title =\"MOM winners in MI vs CSK matches\", y_lim = mi_vs_csk_mom_vc.max(), y_interval=1, face_grid=False)\n","43158dd6":"mi_vs_kkr_mom_vc = df1[kkr_involved & mi_involved]['player_of_match'].value_counts()\nplt.figure(figsize=(15,5))\ng = sns.barplot(x=mi_vs_kkr_mom_vc.index, y = mi_vs_kkr_mom_vc)\nplot_sns(g, ylabel = \"MOM awards\",title =\"MOM winners in MI vs KKR matches\", y_lim = mi_vs_kkr_mom_vc.max(), y_interval=1, face_grid=False)\n","7b29092e":"winner_fielding_first = df1[df1.toss_decision == 'FIELD'].winner.value_counts().sort_index()\nplt.figure(figsize=(8,5))\n\nwinner_fielding_first = winner_fielding_first.drop(labels=trivial_teams)\n# print(winner_fielding_first)\ng = sns.barplot(x=winner_fielding_first.index, y = winner_fielding_first, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"No of matches won\",title =\"Matches won fielding first\", y_lim = winner_fielding_first.max(), \n         y_interval=10,  face_grid=False)\n","45c96580":"winner_batting_first = df1[df1.toss_decision == 'BAT'].winner.value_counts().sort_index()\n# print(winner_batting_first)\nplt.figure(figsize=(8,5))\n\n# not using trivial_teams list here as Kochi team has not won even a single match batting first\nwinner_batting_first = winner_batting_first.drop(labels=[gl,rps,dch,pw])\ng = sns.barplot(x=winner_batting_first.index, y = winner_batting_first, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"No of matches won\",title =\"Matches won batting first\", y_lim = winner_batting_first.max(), \n         y_interval=10,  face_grid=False)\n","e93d5a2b":"g = sns.catplot(x='winner', data = df1,kind=\"count\", height=5, aspect = 3, hue=\"toss_decision\")\nplot_sns(g, ylabel = \"No of matches\",title =\"Toss decisions in the matches won\", y_lim = 65, y_interval=10)\n","53f59240":"match_win_col_name = \"Matches Won\"\ntoss_win_col_name = \"Tosses Won\"\ndf_combo = pd.DataFrame({match_win_col_name: match_winners, toss_win_col_name: toss_winners}).sort_values(['Matches Won'], ascending=False)\n# we shud pass figsize as an argument instead of calling it separately as we are not operating on a single column, instead multiple columns\ndf_combo.plot(color=[\"SkyBlue\",\"IndianRed\"],kind='bar', grid=True, figsize=(10,5))\nplot(xlabel = 'Teams', ylabel = 'No of matches', title = 'Match Wins vs Toss Wins', \n     y_lim = df_combo[[match_win_col_name, toss_win_col_name]].values.max())\n\n","b2227f71":"toss_win_ratio = (toss_winners*100 \/\/ matches_per_team.sort_index())\nplt.figure(figsize=(8,5))\ng = sns.barplot(x=toss_win_ratio.index, y = toss_win_ratio, \n                palette = ipl_line_palette, linewidth=2.5, edgecolor=ipl_marker_palette)\nplot_sns(g, ylabel = \"%age of tosses won\",title =\"Toss %age of each team\", y_lim = toss_win_ratio.max(), \n         y_interval=10,  face_grid=False)","1a2c409d":"def calc_points(row,team):\n    val=0\n    if row['winner'] == team:\n        val = 1\n    else:\n        val = 0\n    return val\n\n\ndef plot_team_journey(team):\n    fig = plt.figure()\n    chrt = 0\n    for season in season_list:\n        title = f'{team}\\'s journey in IPL {season}'\n\n        df_season = df1[df1['season'] == season]\n        is_team_in_team1 = df_season['team1'] == team\n        is_team_in_team2 = df_season['team2'] == team\n\n        df_team = df_season[is_team_in_team1 | is_team_in_team2].sort_values(by='id')\n        if len(df_team) != 0:\n\n            df_team['outcome'] = df_team.apply(calc_points, args=(team,), axis = 1)\n            chrt += 1 \n            ax = fig.add_subplot(3,4, chrt)\n            df_team.plot(x='date', y = 'outcome', kind = 'line', marker = 'D',markerfacecolor='b', rot = 45, ax = ax, \n                              figsize = (20,12), sharey = True, legend = None, color = 'IndianRed')\n            plt.yticks([0,1], ['Lost','Won'])\n            plt.xlabel(season)\n            plt.tick_params(bottom=False,  labelbottom=False)\n\n    plt.suptitle(title, fontsize=25, color='royalblue')\n    plt.show()\n    \n\n\nplot_team_journey(mi)\nplot_team_journey(kkr)\nplot_team_journey(rcb)\nplot_team_journey(csk)\n","011226b1":"plt.figure(figsize=(12,7))\ndf_win_by_runs = df1[df1['win_by_runs'] > 0]\ng=sns.swarmplot(x='season', y='win_by_runs', data=df_win_by_runs)\n\nplot_sns(g, ylabel = \"Runs\",title =\"Victory margin by runs\", y_lim = 150, \n         y_interval=10,  face_grid=False)\n","4957fa86":"plt.figure(figsize=(12,7))\ndf_win_by_wickets = df1[df1['win_by_wickets'] > 0]\ng=sns.swarmplot(x='season', y='win_by_wickets', data=df_win_by_wickets)\nplot_sns(g, ylabel = \"Wickets\",title =\"Victory margin by wickets\", y_lim = 10, \n         y_interval=1,  face_grid=False)","9113396c":"plt.figure(figsize=(14,6))\nsns.violinplot(y='season', x='toss_and_match_winners_same',data=df1)\nplt.xlabel('')\nplt.ylabel('')\nplt.title('Won match as well as toss? ')\nplt.show()\n","b14d91f7":"plt.figure(figsize=(14,6))\nsns.violinplot(y='season', x='home_team_victorious',data=df1)\nplt.xlabel('')\nplt.ylabel('')\nplt.title('Won match played on home ground? ')\nplt.show()\n","1999b784":"plt.figure(figsize=(14,10))\nsns.heatmap(pd.crosstab(df1.winner, df1.day),annot=True,cmap='YlGnBu', linewidths=1)\nplt.title(\"Matches won by teams on different days of the week\")\nplt.xlabel('')\nplt.ylabel('')\nplt.show()\n","ade8f74d":"plt.figure(figsize=(14,8))\nsns.heatmap(pd.crosstab(df1.season, df1.day, values = df1.win_by_runs, aggfunc = 'mean'), annot=True,cmap='YlGnBu', linewidths=3)\nplt.title(\"Victory margin in runs\")\nplt.xlabel('')\nplt.ylabel('')\nplt.show()","d1568870":"plt.figure(figsize=(14,10))\nsns.heatmap(pd.crosstab(df1.season, df1.day, values = df1.win_by_wickets, aggfunc = 'mean'), annot=True,cmap='YlGnBu', linewidths=3)\nplt.title(\"Victory margin in wickets\")\nplt.xlabel('')\nplt.ylabel('')\nplt.show()","f14b96de":"plt.figure(figsize=(18,8))\ng = sns.swarmplot(x='day',y =df1[df1.win_by_wickets > 0].win_by_wickets, data =df1)\nplot_sns(g, title='Day-wise distribution of wins by wickets',ylabel='Wickets',y_lim=10,y_interval=1, face_grid=False)\n\nplt.figure(figsize=(18,8))\ng = sns.swarmplot(x='day',y = df1[df1.win_by_runs > 0].win_by_runs, data =df1)\ny_lim = df1.win_by_runs.max()\nplot_sns(g, title='Day-wise distribution of wins by runs',ylabel='Runs',y_lim =y_lim,y_interval=10, face_grid=False)\n\nplt.figure(figsize=(18,8))\ng = sns.swarmplot(x = df1[~df1.winner.isin(trivial_teams)].winner, y=df1[df1.win_by_wickets > 0].win_by_wickets, data =df1)\nplot_sns(g, title='Team-wise distribution of wins by wickets',ylabel='Wickets',y_lim=10,y_interval=2, face_grid=False)\n\n\n","1de28f98":"plt.figure(figsize=(18,8))\ng = sns.swarmplot(x = df1[~df1.winner.isin(trivial_teams)].winner, y=df1[df1.win_by_runs > 0].win_by_runs, data =df1)\ny_lim = df1.win_by_runs.max()\nplot_sns(g, title='Team-wise distribution of wins by runs',ylabel='Runs',y_lim =y_lim,y_interval=20, face_grid=False)\n","0ddbdb3e":"print('\\n DL applied \\n ')\nprint(df1.dl_applied.value_counts())\nprint(len(df1[df1.result == 'TIE']))","7e162345":"df2 = pd.read_csv('\/kaggle\/input\/ipldata\/deliveries.csv')\ndf2.head()","1ca8d69b":"print('='*20 + 'Exploratory Data Analysis' + '='*20)\nprint('='*20 + 'SHAPE' + '='*20)\nprint(df2.shape)\nprint('\\n\\n')\nprint('='*20 + 'INFO' + '='*20)\ndf2.info()\nprint('\\n\\n')\nprint('='*20 + 'DESCRIBE' + '='*20)\nprint(df2.describe())\nprint('\\n\\n')\n","c070b98b":"print('='*20 + 'NA CHECK' + '='*20)\nprint(df2.isna().any())\nprint(df2.isna().sum())\nprint('\\n\\n')\nprint('='*20 + 'UNIQUE VALUES' + '='*20)\ndf2.apply(lambda x: pd.unique(x).tolist())","70180da6":"\n# I will only check those col for unique values where I'm not sure what possible values can the col take. For others it would be a sanity check, like wickets can't be more than 10 etc\nprint('\\n over')\nprint(df2.over.unique())\nprint('\\n ball')\nprint(df2.ball.unique())\nprint('\\n batting_team')\nprint(df2.batting_team.unique())\nprint('\\n bowling_team')\nprint(df2.bowling_team.unique())\nprint('\\n is_super_over')\nprint(df2.is_super_over.unique())\nprint('\\n penalty_runs')\nprint(df2.penalty_runs.unique())\nprint('\\n dismissal_kind')\nprint(df2.dismissal_kind.unique())","47ef2898":"# Looks like it is already sorted, but sorting again just in case...\ndf2 = df2.sort_values(by=['match_id','inning','over','ball'])\n\ndf2.replace({'Rising Pune Supergiant':'Rising Pune Supergiants', 'Delhi Daredevils': 'Delhi Capitals'}, inplace=True)\n\ndf2.fillna('', inplace=True)\n\n# Removing leading\/trailing whitespaces and changing to upper case\n# TODO: There has to be a better way to do this!\ndf2.batting_team = df2.batting_team.str.strip().str.upper()\ndf2.bowling_team = df2.bowling_team.str.strip().str.upper()\ndf2.batsman = df2.batsman.str.strip().str.upper()\ndf2.non_striker = df2.non_striker.str.strip().str.upper()\ndf2.bowler = df2.bowler.str.strip().str.upper()\ndf2.player_dismissed = df2.player_dismissed.str.strip().str.upper()\ndf2.fielder = df2.fielder.str.strip().str.upper()\n\ndf2.head()","945020e1":"most_balls_faced_vc = df2.batsman.value_counts()\nplt.figure(figsize=(18,5))\n\nmost_balls_faced_vc = most_balls_faced_vc[most_balls_faced_vc >= 2000]\ng = sns.barplot(x=most_balls_faced_vc.index, y = most_balls_faced_vc)\nplot_sns(g, ylabel = \"Deliveries\",title =\"Most balls faced across all seasons\", y_lim = most_balls_faced_vc.max(), y_interval=500, face_grid=False)\n\n\n","fab65c9f":"\ndot_balls_batsman = df2[ df2['batsman_runs'] == 0]['batsman'].value_counts()\ndot_balls_batsman = dot_balls_batsman[dot_balls_batsman > 900]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = dot_balls_batsman.index, y = dot_balls_batsman)\nplot_sns(g, title =\"Batsmen who faced most dot balls\", y_lim = dot_balls_batsman.max(), y_interval=200, face_grid=False)\n","fd61f5d7":"# %%timeit\ndef calc_dot_ball_faced_streak(df):\n    df['dotball_streak1'] = (df['batsman_runs'] == 0).cumsum()\n    df['cumsum'] = np.nan\n    df.loc[df.batsman_runs>0, 'cumsum'] = df['dotball_streak1']\n    df['cumsum'] = df['cumsum'].fillna(method='ffill')\n    df['cumsum'] = df['cumsum'].fillna(0)\n    df['dotball_streak'] = df['dotball_streak1'] - df['cumsum']\n    df.drop(['dotball_streak1', 'cumsum'], axis=1, inplace=True)\n    return df\n\ndf3 = df2[['match_id','batsman','batsman_runs']]\ndf_dotball_streak = df3.groupby('batsman').apply(calc_dot_ball_faced_streak).sort_values(['batsman','match_id'])\ndf_dotball_streak = df_dotball_streak.sort_values('dotball_streak', ascending=False)\ndf_dotball_streak = df_dotball_streak.groupby('batsman').dotball_streak.max().sort_values(ascending=False)\ndf_dotball_streak = df_dotball_streak.reset_index()\ndf_dotball_streak = df_dotball_streak.nlargest(20,'dotball_streak')\n\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = df_dotball_streak.batsman, y = df_dotball_streak.dotball_streak)\nplot_sns(g, title =\"Batsman who faced most consecutive dot-balls across matches\", y_lim = int(df_dotball_streak.dotball_streak.max()), y_interval=5, face_grid=False)\n","4827c514":"# df3 = df2[['match_id','batsman','batsman_runs']]\n# df_dotball_streak = df3.groupby(['match_id','batsman']).apply(calc_dot_ball_faced_streak).sort_values(['dotball_streak'])\n# df_dotball_streak = df_dotball_streak.sort_values('dotball_streak', ascending=False)\n# df_dotball_streak = df_dotball_streak.groupby('batsman').dotball_streak.max().sort_values(ascending=False)\n# df_dotball_streak = df_dotball_streak.reset_index()\n# df_dotball_streak = df_dotball_streak.nlargest(20,'dotball_streak')\n\n\n# plt.figure(figsize=(18,5))\n# g = sns.barplot(x = df_dotball_streak.batsman, y = df_dotball_streak.dotball_streak)\n# plot_sns(g, title =\"Batsman who faced most consecutive dot-balls in an inning\", y_lim = int(df_dotball_streak.dotball_streak.max()), y_interval=3, face_grid=False)\n\n","4f03d811":"# %load_ext line_profiler","2ecc4080":"\ndef calc_dot_ball_bowled_streak(df):\n    df['dotball_streak1'] = ( df['dotball_bowler'].to_numpy() == 1).cumsum()\n    df['cumsum'] = np.nan\n    df.loc[df['dotball_bowler'].to_numpy() == 0, 'cumsum'] = df['dotball_streak1']\n    df['cumsum'] = df['cumsum'].fillna(method='ffill').fillna(0)\n    df['dotball_streak'] = df['dotball_streak1'].to_numpy() - df['cumsum'].to_numpy()\n    df.drop(['dotball_streak1', 'cumsum'], axis=1, inplace=True)\n    return df\n\ndf2['dotball_bowler'] = ((df2['wide_runs'].to_numpy() == 0) & (df2['noball_runs'].to_numpy() == 0) & (df2['batsman_runs'].to_numpy() == 0)).astype(int)\ndf3 = df2[['match_id','bowler','dotball_bowler']]\n# %lprun -f calc_dot_ball_bowled_streak df3.groupby('bowler').apply(calc_dot_ball_bowled_streak).sort_values(['bowler','match_id'])\ndf_dotball_streak = df3.groupby('bowler').apply(calc_dot_ball_bowled_streak).sort_values(['bowler','match_id'])\ndf_dotball_streak = df_dotball_streak[df_dotball_streak.dotball_streak>=0][['match_id','bowler','dotball_streak']]\n\ndf_dotball_streak = df_dotball_streak.sort_values('dotball_streak', ascending=False)\ndf_dotball_streak = df_dotball_streak.groupby('bowler').dotball_streak.max().sort_values(ascending=False)\ndf_dotball_streak = df_dotball_streak.reset_index()\ndf_dotball_streak = df_dotball_streak.nlargest(20,'dotball_streak')\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = df_dotball_streak.bowler, y = df_dotball_streak.dotball_streak)\nplot_sns(g, title =\"Bowlers who bowled most consecutive dot-balls across matches\", y_lim = int(df_dotball_streak.dotball_streak.max()), y_interval=2, face_grid=False)\n","75777dd2":"# df2['dotball_bowler'] = ((df2['wide_runs'].values == 0) & (df2['noball_runs'].values == 0) & (df2['batsman_runs'].values == 0)).astype(int)\n# df3 = df2[['match_id','bowler','dotball_bowler']]\n# df_dotball_streak = df3.groupby(['match_id','bowler']).apply(calc_dot_ball_bowled_streak).sort_values(['dotball_streak'])\n\n# df_dotball_streak = df_dotball_streak.sort_values('dotball_streak', ascending=False)\n# df_dotball_streak = df_dotball_streak.groupby('bowler').dotball_streak.max().sort_values(ascending=False)\n# df_dotball_streak = df_dotball_streak.reset_index()\n# df_dotball_streak = df_dotball_streak.nlargest(20,'dotball_streak')\n# df_dotball_streak\n# plt.figure(figsize=(18,5))\n# g = sns.barplot(x = df_dotball_streak.bowler, y = df_dotball_streak.dotball_streak)\n# plot_sns(g, title =\"Bowlers who bowled most consecutive dot-balls in an inning\", y_lim = int(df_dotball_streak.dotball_streak.max()), y_interval=2, face_grid=False)\n","2490326c":"df3 = df2[['match_id','bowler','dotball_bowler']]\n\ndf_max_dotballs = df3.groupby(['match_id','bowler']).dotball_bowler.sum().sort_values(ascending=False)\ndf_max_dotballs = df_max_dotballs.reset_index(name=\"no\")\ndf_max_dotballs = df_max_dotballs[df_max_dotballs.no > 17]\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = df_max_dotballs.bowler, y = df_max_dotballs.no)\nplot_sns(g, title =\"Bowler with max dot balls in an innings\", y_lim = df_max_dotballs.no.max(), y_interval=3, face_grid=False)\n\n","115c5b99":"non_striker_batsman = df2.non_striker.value_counts()\nnon_striker_batsman\nnon_striker_batsman = non_striker_batsman[non_striker_batsman > 2000]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = non_striker_batsman.index, y = non_striker_batsman)\nplot_sns(g, title =\"Batsmen as non-striker for most balls\", y_lim = non_striker_batsman.max(), y_interval=500, face_grid=False)\n","79cd0e24":"legbye_batsman = df2.groupby('batsman').legbye_runs.sum().sort_values(ascending=False)\nlegbye_batsman = legbye_batsman.reset_index(name=\"no\")\nlegbye_batsman = legbye_batsman[legbye_batsman.no > 40]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = legbye_batsman.batsman, y = legbye_batsman.no)\nplot_sns(g, title =\"Batsmen with most runs from leg byes\", y_lim = legbye_batsman.no.max(), y_interval=10, face_grid=False)\n","e21eed5e":"most_runs_vc = df2.groupby('batsman')['batsman_runs'].sum().sort_values(ascending=False)\nvc = most_runs_vc[most_runs_vc > 2200]\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Most runs scored\", y_lim = vc.max(), y_interval=500, face_grid=False)\n","fb37e32b":"vc = df2['player_dismissed'].value_counts()\nplt.figure(figsize=(18,5))\nvc = vc[vc >= 80][1:]\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g,title =\"Batsmen who has been dismissed most\", y_lim = vc.max(), y_interval=20, face_grid=False)\n","15587102":"most_bowler_faced = df2[df2.batsman == 'V KOHLI']['bowler'].value_counts()\n# print(most_bowler_faced)\nplt.figure(figsize=(18,5))\n\nmost_bowler_faced = most_bowler_faced[most_bowler_faced >= 50]\ng = sns.barplot(x = most_bowler_faced.index, y = most_bowler_faced)\nplot_sns(g,title =\"Bowler who bowled most balls to Kohli\", y_lim = most_bowler_faced.max(), y_interval=10, face_grid=False)\n\n","63bf8e34":"most_bowler_faced = df2[df2.batsman == 'CH GAYLE']['bowler'].value_counts()\n# print(most_bowler_faced)\nplt.figure(figsize=(18,5))\n\nmost_bowler_faced = most_bowler_faced[most_bowler_faced >= 40]\ng = sns.barplot(x = most_bowler_faced.index, y = most_bowler_faced)\nplot_sns(g,title =\"Bowler who bowled most balls to Gayle\", y_lim = most_bowler_faced.max(), y_interval=10, face_grid=False)\n\n","1948aaf9":"most_sixes_vc = df2[df2['batsman_runs'] == 6]['batsman'].value_counts()\n# print(most_sixes_vc)\nplt.figure(figsize=(18,5))\n\nmost_sixes_vc = most_sixes_vc[most_sixes_vc >= 80]\ng = sns.barplot(x = most_sixes_vc.index, y = most_sixes_vc)\nplot_sns(g, ylabel = \"No of sixes\",title =\"Batsmen who hit most 6s\", y_lim = most_sixes_vc.max(), y_interval=30, face_grid=False)\n\n","8e46aedd":"most_fours_vc = df2[df2['batsman_runs'] == 4]['batsman'].value_counts()\n# print(most_fours_vc)\nplt.figure(figsize=(18,5))\n\nmost_fours_vc = most_fours_vc[most_fours_vc >= 250]\ng = sns.barplot(x = most_fours_vc.index, y = most_fours_vc)\nplot_sns(g, ylabel = \"No of fours\",title =\"Batsmen who hit most 4s\", y_lim = most_fours_vc.max(), y_interval=50, face_grid=False)\n\n","25d28996":"most_balls_bowled_vc = df2.bowler.value_counts()\nplt.figure(figsize=(18,5))\n\nmost_balls_bowled_vc = most_balls_bowled_vc[most_balls_bowled_vc >= 1700]\ng = sns.barplot(x = most_balls_bowled_vc.index, y = most_balls_bowled_vc)\nplot_sns(g, ylabel = \"Deliveries\",title =\"Bowlers who bowled most deliveries\", y_lim = most_balls_bowled_vc.max(), y_interval=500, face_grid=False)\n\n","e1b4e4f4":"most_runs_given_vc = df2.groupby('bowler')[['noball_runs','batsman_runs','wide_runs']].apply(lambda x : x.astype(int).sum())\nvc = most_runs_given_vc.sum(axis=1).sort_values(ascending=False)\nvc = vc[vc > 2300]\n# print(vc)\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Most runs conceded\", y_lim = vc.max(), y_interval=500, face_grid=False)\n","d35cff15":"max_wide_and_no_balls_bowlers_vc = df2[(df2['wide_runs'] != 0) | (df2['noball_runs'] != 0)]['bowler'].value_counts()\nplt.figure(figsize=(18,5))\nvc =  max_wide_and_no_balls_bowlers_vc\nvc = vc[vc > 70]\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Bowlers who bowled most wide and no balls\", y_lim = vc.max(), y_interval=20, face_grid=False)\n","a9704af5":"dismissal_kind_vc = df2['dismissal_kind'].value_counts()\n# print(dismissal_kind_vc)\ndismissals_not_by_bowler = ['run out','retired hurt', 'obstructing the field','']\ndismissals_by_bowler_vc = dismissal_kind_vc.drop(labels = dismissals_not_by_bowler)\nplt.figure(figsize=(18,5))\n# print(dismissals_by_bowler_vc.index)\nmost_wickets_vc = df2[df2['dismissal_kind'].isin(dismissals_by_bowler_vc.index)]['bowler'].value_counts()\n# print(most_wickets_vc.head(20))\nmost_wickets_vc = most_wickets_vc[most_wickets_vc >= 100]\ng = sns.barplot(x = most_wickets_vc.index, y = most_wickets_vc)\nplot_sns(g, ylabel = \"Wickets\",title =\"Highest wicket takers across all seasons\", y_lim = most_wickets_vc.max(), y_interval=20, face_grid=False)\n\n","0af62970":"dismissal_kind_vc = df2['dismissal_kind'].value_counts()\nplt.figure(figsize=(10,5))\ng = sns.barplot(x = dismissal_kind_vc[1:7].index, y = dismissal_kind_vc[1:7])\nplot_sns(g, title =\"Mode of dismissals\", y_lim = dismissal_kind_vc[1:7].max(), y_interval=500, face_grid=False)\n\n","522850f3":"plt.figure(figsize=(16,6))\n\nstar_batsmen = ['V KOHLI','MS DHONI','CH GAYLE','AB DE VILLIERS','SK RAINA','RG SHARMA']\ndismiss_type = ~df2.dismissal_kind.isin(dismissals_not_by_bowler)\ndismiss_type = ~df2.dismissal_kind.isin(['caught'])\ndismissals = df2[df2.player_dismissed.isin(star_batsmen) & dismiss_type]\ndismissals = dismissals[['player_dismissed','dismissal_kind']]\ndismissals = dismissals.groupby(['player_dismissed']).dismissal_kind.value_counts()\ndismissals = dismissals.reset_index(name='no')\n\ng = sns.pointplot(x=dismissals.player_dismissed, y = dismissals.no, hue=dismissals.dismissal_kind, dodge=False)\nplot_sns(g, ylabel = \"No of dismissals\",title =\"Ways of getting dismissed (excludes 'caught')\", y_lim = dismissals.no.max(), y_interval=2, face_grid=False)\n# dismissals\n\n","6bfa840b":"\nfielder_vc = df2.fielder.value_counts()\nplt.figure(figsize=(18,5))\nfielder_vc = fielder_vc[1:]\n# print(fielder_vc.head(20))\nfielder_vc = fielder_vc[fielder_vc >= 40]\ng = sns.barplot(x = fielder_vc.index, y = fielder_vc)\nplot_sns(g, ylabel = \"Dismissals\",title =\"Fielders (including wicket-keepers) who affected most dismissals\", y_lim = fielder_vc.max(), y_interval=25, face_grid=False)\n","a113b495":"wicket_keepers = ['MS Dhoni','KD Karthik','RV Uthappa','PA Patel','NV Ojha','WP Saha','AC Gilchrist','KC Sangakkara','SV Samson']\nwicket_keepers = [x.upper() for x in wicket_keepers]\nwicket_keepers_vc = df2[df2['fielder'].isin(wicket_keepers)].fielder.value_counts()\nplt.figure(figsize=(12,5))\n# print(wicket_keepers_vc.head(20))\ng = sns.barplot(x = wicket_keepers_vc.index, y = wicket_keepers_vc)\nplot_sns(g, ylabel = \"Dismissals\",title =\"Wicket-keepers who affected most dismissals (including run-outs)\", y_lim = wicket_keepers_vc.max(), y_interval=25, face_grid=False)\n","5d52cd5d":"\nfielder_exlcuding_wk_vc = fielder_vc.drop(labels=wicket_keepers)\nplt.figure(figsize=(15,5))\n# print(fielder_exlcuding_wk_vc.head(20))\nfielder_exlcuding_wk_vc = fielder_exlcuding_wk_vc[fielder_vc > 10]\ng = sns.barplot(x = fielder_exlcuding_wk_vc.index, y = fielder_exlcuding_wk_vc)\nplot_sns(g, ylabel = \"Dismissals\",title =\"Fielders (excluding wicket-keepers) who affected most dismissals\", y_lim = fielder_exlcuding_wk_vc.max(), y_interval=25, face_grid=False)\n","16414aca":"max_wide_balls_bowlers_vc = df2[df2['wide_runs'] != 0]['bowler'].value_counts()\nplt.figure(figsize=(18,5))\nvc =  max_wide_balls_bowlers_vc\n# print(max_noballs_bowlers_vc.head(20))\nvc = vc[vc > 50]\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Bowlers who bowled most wide balls\", y_lim = vc.max(), y_interval=20, face_grid=False)\n","c60191e9":"max_noballs_bowlers_vc = df2[df2['noball_runs'] != 0]['bowler'].value_counts()\nplt.figure(figsize=(18,5))\n# print(max_noballs_bowlers_vc.head(20))\nmax_noballs_bowlers_vc = max_noballs_bowlers_vc[max_noballs_bowlers_vc > 7]\ng = sns.barplot(x = max_noballs_bowlers_vc.index, y = max_noballs_bowlers_vc)\nplot_sns(g, title =\"Bowlers who bowled most no-balls\", y_lim = max_noballs_bowlers_vc.max(), y_interval=5, face_grid=False)\n","3cacfc9e":"noball_runs_exc_freehit_vc = df2[df2['noball_runs'] != 0].groupby('bowler')['total_runs'].sum().sort_values(ascending=False)\nnoball_runs_exc_freehit_vc = noball_runs_exc_freehit_vc[noball_runs_exc_freehit_vc > 25]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = noball_runs_exc_freehit_vc.index, y = noball_runs_exc_freehit_vc)\nplot_sns(g, title =\"Most runs given off noballs (excludes free hits)\", y_lim = noball_runs_exc_freehit_vc.max(), y_interval=10, face_grid=False)\n","82c31edf":"dot_balls_vc = df2[ (df2['wide_runs'] == 0) & (df2['noball_runs'] == 0) & (df2['batsman_runs'] == 0)]['bowler'].value_counts()\n# print(dot_balls_vc)\ndot_balls_vc = dot_balls_vc[dot_balls_vc > 800]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = dot_balls_vc.index, y = dot_balls_vc)\nplot_sns(g, title =\"Bowlers with max dot balls\", y_lim = dot_balls_vc.max(), y_interval=200, face_grid=False)\n","cad52186":"gayle_most_runs_vc = df2[df2.batsman == 'CH GAYLE'].groupby('bowler')['batsman_runs'].sum().sort_values(ascending=False)\nvc = gayle_most_runs_vc[gayle_most_runs_vc > 60]\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Bowlers against which Gayle scored most runs\", y_lim = vc.max(), y_interval=20, face_grid=False)\n","2643e998":"gayle_sixes_vc = df2[(df2.batsman == 'CH GAYLE') & (df2.batsman_runs == 6)].bowler.value_counts()\n# print(gayle_sixes_vc)\ngayle_sixes_vc = gayle_sixes_vc[gayle_sixes_vc > 4]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = gayle_sixes_vc.index, y = gayle_sixes_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 6s by Gayle\", y_lim = gayle_sixes_vc.max(), y_interval=2, face_grid=False)\n","09f74a3b":"gayle_fours_vc = df2[(df2.batsman == 'CH GAYLE') & (df2.batsman_runs == 4)].bowler.value_counts()\ngayle_fours_vc = gayle_fours_vc[gayle_fours_vc > 5]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = gayle_fours_vc.index, y = gayle_fours_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 4s by Gayle\", y_lim = gayle_fours_vc.max(), y_interval=2, face_grid=False)\n","503d67b7":"raina_most_runs_vc = df2[df2.batsman == 'SK RAINA'].groupby('bowler')['batsman_runs'].sum().sort_values(ascending=False)\nvc = raina_most_runs_vc\nvc = vc[vc > 70]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Bowlers against which Raina scored most runs\", y_lim = vc.max(), y_interval=20, face_grid=False)\n","9da188d2":"kohli_most_runs_vc = df2[df2.batsman == 'V KOHLI'].groupby('bowler')['batsman_runs'].sum().sort_values(ascending=False)\nvc = kohli_most_runs_vc\nvc = vc[vc > 70]\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Bowlers against which Kohli scored most runs\", y_lim = vc.max(), y_interval=20, face_grid=False)\n","b518884e":"abd_sixes_vc = df2[(df2.batsman == 'AB DE VILLIERS') & (df2.batsman_runs == 6)].bowler.value_counts()\nabd_sixes_vc = abd_sixes_vc[abd_sixes_vc > 3]\n\nplt.figure(figsize=(12,5))\ng = sns.barplot(x = abd_sixes_vc.index, y = abd_sixes_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 6s by ABD\", y_lim = abd_sixes_vc.max(), y_interval=2, face_grid=False)\n","7c09965e":"abd_fours_vc = df2[(df2.batsman == 'AB DE VILLIERS') & (df2.batsman_runs == 4)].bowler.value_counts()\nabd_fours_vc = abd_fours_vc[abd_fours_vc > 5]\n\nplt.figure(figsize=(15,5))\ng = sns.barplot(x = abd_fours_vc.index, y = abd_fours_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 4s by ABD\", y_lim = abd_fours_vc.max(), y_interval=2, face_grid=False)\n","ab42773f":"msd_sixes_vc = df2[(df2.batsman == 'MS DHONI') & (df2.batsman_runs == 6)].bowler.value_counts()\nmsd_sixes_vc = msd_sixes_vc[msd_sixes_vc > 3]\n\nplt.figure(figsize=(15,5))\ng = sns.barplot(x = msd_sixes_vc.index, y = msd_sixes_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 6s by MSD\", y_lim = msd_sixes_vc.max(), y_interval=2, face_grid=False)\n","628eb315":"msd_fours_vc = df2[(df2.batsman == 'MS DHONI') & (df2.batsman_runs == 4)].bowler.value_counts()\nmsd_fours_vc = msd_fours_vc[msd_fours_vc > 4]\n\nplt.figure(figsize=(15,5))\ng = sns.barplot(x = msd_fours_vc.index, y = msd_fours_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 4s by MSD\", y_lim = msd_fours_vc.max(), y_interval=2, face_grid=False)\n","9347ce13":"raina_sixes_vc = df2[(df2.batsman == 'SK RAINA') & (df2.batsman_runs == 6)].bowler.value_counts()\nraina_sixes_vc = raina_sixes_vc[raina_sixes_vc > 3]\n\nplt.figure(figsize=(12,5))\ng = sns.barplot(x = raina_sixes_vc.index, y = raina_sixes_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 6s by Raina\", y_lim = raina_sixes_vc.max(), y_interval=2, face_grid=False)\n","4b10a11a":"kohli_sixes_vc = df2[(df2.batsman == 'V KOHLI') & (df2.batsman_runs == 6)].bowler.value_counts()\nkohli_sixes_vc = kohli_sixes_vc[kohli_sixes_vc > 2]\n\nplt.figure(figsize=(15,5))\ng = sns.barplot(x = kohli_sixes_vc.index, y = kohli_sixes_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 6s by Kohli\", y_lim = kohli_sixes_vc.max(), y_interval=2, face_grid=False)\n","019d5a99":"rohit_sixes_vc = df2[(df2.batsman == 'RG SHARMA') & (df2.batsman_runs == 6)].bowler.value_counts()\nrohit_sixes_vc = rohit_sixes_vc[rohit_sixes_vc > 3]\n\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = rohit_sixes_vc.index, y = rohit_sixes_vc)\nplot_sns(g, title =\"Bowlers who were hit for most 6s by Rohit\", y_lim = rohit_sixes_vc.max(), y_interval=2, face_grid=False)\n","d2799cd5":"gayle_out_bowler_vc = df2[(df2.player_dismissed == 'CH GAYLE') & (~df2.dismissal_kind.isin(dismissals_not_by_bowler) )].bowler.value_counts()\ngayle_out_bowler_vc = gayle_out_bowler_vc[gayle_out_bowler_vc > 2]\n\nplt.figure(figsize=(12,5))\ng = sns.barplot(x = gayle_out_bowler_vc.index, y = gayle_out_bowler_vc)\nplot_sns(g, title =\"Bowlers who dismissed Gayle most times\", y_lim = gayle_out_bowler_vc.max(), y_interval=2, face_grid=False)\n","9a8f61b9":"ABD_out_bowler_vc = df2[(df2.player_dismissed == 'AB DE VILLIERS') & (~df2.dismissal_kind.isin(dismissals_not_by_bowler) )].bowler.value_counts()\nABD_out_bowler_vc = ABD_out_bowler_vc[ABD_out_bowler_vc > 2]\n\nplt.figure(figsize=(10,4))\ng = sns.barplot(x = ABD_out_bowler_vc.index, y = ABD_out_bowler_vc)\nplot_sns(g, title =\"Bowlers who dismissed ABD most times\", y_lim = ABD_out_bowler_vc.max(), y_interval=2, face_grid=False)\n","2e8efd7b":"MSD_out_bowler_vc = df2[(df2.player_dismissed == 'MS DHONI') & (~df2.dismissal_kind.isin(dismissals_not_by_bowler) )].bowler.value_counts()\nMSD_out_bowler_vc = MSD_out_bowler_vc[MSD_out_bowler_vc > 2]\n\nplt.figure(figsize=(10,4))\ng = sns.barplot(x = MSD_out_bowler_vc.index, y = MSD_out_bowler_vc)\nplot_sns(g, title =\"Bowlers who dismissed MSD most times\", y_lim = MSD_out_bowler_vc.max(), y_interval=2, face_grid=False)\n","bbe8216d":"kohli_out_bowler_vc = df2[(df2.player_dismissed == 'V KOHLI') & (~df2.dismissal_kind.isin(dismissals_not_by_bowler) )].bowler.value_counts()\nkohli_out_bowler_vc = kohli_out_bowler_vc[kohli_out_bowler_vc > 2]\n\nplt.figure(figsize=(12,5))\ng = sns.barplot(x = kohli_out_bowler_vc.index, y = kohli_out_bowler_vc)\nplot_sns(g, title =\"Bowlers who dismissed Kohli most times\", y_lim = kohli_out_bowler_vc.max(), y_interval=2, face_grid=False)\n","40993ce5":"run_out_fielder_vc = df2[df2.dismissal_kind == 'run out'].fielder.value_counts()\nvc = run_out_fielder_vc[run_out_fielder_vc > 8]\nplt.figure(figsize=(15,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Fielders affecting most run outs\", y_lim = vc.max(), y_interval=5, face_grid=False)\n","ba873767":"run_out_batsman_vc = df2[df2.dismissal_kind == 'run out'].player_dismissed.value_counts()\nvc = run_out_batsman_vc[run_out_batsman_vc > 8]\n# print(vc)\nplt.figure(figsize=(15,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Batsman who were dismissed most via run outs\", y_lim = vc.max(), y_interval=5, face_grid=False)\n","f7b3b29c":"batsman_run_out = df2[(df2.dismissal_kind == 'run out') & (df2.batsman == df2.player_dismissed)].non_striker.value_counts()\nnonstriker_run_out = df2[(df2.dismissal_kind == 'run out') & (df2.non_striker == df2.player_dismissed)].batsman.value_counts()\n\nvc = (batsman_run_out + nonstriker_run_out).sort_values(ascending=False)\nvc = vc[vc > 10]\nplt.figure(figsize=(18,5))\ng = sns.barplot(x = vc.index, y = vc)\nplot_sns(g, title =\"Batsman who ran others out most\", y_lim = 25, y_interval=5, face_grid=False)\n","270c20cf":"plt.figure(figsize=(12,5))\nbin_edges = np.arange(-0.5,7.5)\nplt.hist(df2.batsman_runs,bins=bin_edges)\nplt.ylabel('Runs')\nplt.title('Comparison of dots, singles, doubles, triples, 4s and 6s')\nplt.show()","7d41add3":"plt.figure(figsize=(12,5))\ndf_dhoni_kohli = df2[(df2.batsman == 'MS DHONI') | (df2.batsman == 'V KOHLI')][['batsman','batsman_runs']]\nbin_edges = np.arange(-0.5,7.5)\nplt.hist(df_dhoni_kohli[df_dhoni_kohli.batsman == 'MS DHONI'].batsman_runs, bins = bin_edges, alpha = 0.5)\nplt.hist(df_dhoni_kohli[df_dhoni_kohli.batsman == 'V KOHLI'].batsman_runs, bins = bin_edges, alpha = 0.3)\nplt.legend(('MS DHONI','V KOHLI'))\nplt.ylabel('Runs')\nplt.title('DHONI v KOHLI: Comparison of dots, singles, doubles, triples, 4s and 6s')\nplt.show()","3b74f004":"def ecdf(data):\n    \"\"\"Compute ECDF for a one-dimensional array of measurements.\"\"\"\n    # Number of data points: n\n    n = len(data)\n\n    # x-data for the ECDF: x\n    x = np.sort(data)\n\n    # y-data for the ECDF: y\n    y = np.arange(1, n+1) \/ n\n\n    return x, y\n\n\ndef pearson_r(x, y):\n    \"\"\"Compute Pearson correlation coefficient between two arrays.\"\"\"\n    # Compute correlation matrix: \n    corr_mat = np.corrcoef(x,y)\n\n    # Return entry [0,1]\n    return corr_mat[0,1]","48da230b":"print(pearson_r(df1.season , df1.win_by_runs))\nprint(pearson_r(df1.season , df1.win_by_wickets))\nprint(pearson_r(df1.home_team_victorious , df1.win_by_wickets))\nprint(pearson_r(df1.home_team_victorious , df1.win_by_runs))\nprint(pearson_r(df1.toss_and_match_winners_same , df1.win_by_wickets))\nprint(pearson_r(df1.toss_and_match_winners_same , df1.win_by_runs))","563ee3de":"plt.figure(figsize=(12,5))\nx_vers , y_vers = ecdf(df2.batsman_runs)\nplt.plot(x_vers, y_vers, marker = '.' , linestyle = 'none')\nplt.xlabel('Batsman Runs')\nplt.ylabel('ECDF')\nplt.title('Batsman Runs-Comparison of dots, singles, doubles, triples, 4s and 6s')\nplt.show()","9cfa9b64":"plt.figure(figsize=(12,5))\nx_vers , y_vers = ecdf(df2.total_runs)\nplt.plot(x_vers, y_vers, marker = '.' , linestyle = 'none')\nplt.xlabel('Total Runs')\nplt.ylabel('ECDF')\nplt.title('Total runs off a ball')\nplt.show()","4d43c9bc":"plt.figure(figsize=(12,5))\nx_vers , y_vers = ecdf(df1.win_by_runs)\nplt.plot(x_vers, y_vers, marker = '.' , linestyle = 'none')\nplt.xlabel('Victory margin in runs')\nplt.ylabel('ECDF')\nplt.margins(0.1)\nplt.show()","49d9ba30":"plt.figure(figsize=(12,5))\nx_vers , y_vers = ecdf(df1.win_by_wickets)\nplt.plot(x_vers, y_vers, marker = '.' , linestyle = 'none')\nplt.xlabel('Victory margin in wickets')\nplt.ylabel('ECDF')\nplt.margins(0.02)\nplt.show()","fe7693bb":"df_corr = df2[df2.batsman == 'MS DHONI'].groupby('match_id').batsman_runs.sum().to_frame(name = 'score').reset_index()\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['score','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['RPS','CSK'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\nprint(df_corr.head(10))\nprint(f'Correlation between MSD\\'s scores and team\\s victory is POSITIVE as expected: { pearson_r(df_corr.score, df_corr.victorious)}' )\nplt.plot(df_corr.score, df_corr.victorious, marker='.', linestyle='none')\nplt.xlabel('MSD\\'s score')\nplt.ylabel('Match result')\nplt.yticks((0,1), ['Lost','Won']);","52a3eee8":"df_corr = df2[df2.batsman == 'MS DHONI'].groupby('match_id').batsman_runs.sum().to_frame(name = 'score').reset_index()\ndf_corr = df_corr[df_corr.score >= 50]\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['score','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['RPS','CSK'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\ndf_corr\nprint(f'Correlation between MSD\\'s 50+ scores and team\\s victory turns NEGATIVE: { pearson_r(df_corr.score, df_corr.victorious)}' )\nplt.plot(df_corr.score, df_corr.victorious, marker='.', linestyle='none')\nplt.xlabel('MSD\\'s score')\nplt.ylabel('Match result')\nplt.yticks((0,1), ['Lost','Won']);","557bd5fe":"df_corr = df2[df2.batsman == 'V KOHLI'].groupby('match_id').batsman_runs.sum().to_frame(name = 'score').reset_index()\ndf_corr = df_corr[df_corr.score >= 50]\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['score','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['RCB'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\n# df_corr\nprint(f'Correlation between KOHLI\\'s 50+ scores and team\\s victory is POSITIVE: { pearson_r(df_corr.score, df_corr.victorious)}' )\nplt.plot(df_corr.score, df_corr.victorious, marker='.', linestyle='none')\nplt.xlabel('KOHLI\\'s score')\nplt.ylabel('Match result')\nplt.yticks((0,1), ['Lost','Won']);","b40b8528":"df_corr = df2[df2.batsman == 'CH GAYLE'].groupby('match_id').batsman_runs.sum().to_frame(name = 'score').reset_index()\ndf_corr = df_corr[df_corr.score >= 50]\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['score','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['RCB'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\n# df_corr\nprint(f'Correlation between GAYLE\\'s 50+ scores and team\\s victory is POSITIVE: { pearson_r(df_corr.score, df_corr.victorious)}' )\nplt.plot(df_corr.score, df_corr.victorious, marker='.', linestyle='none')\nplt.xlabel('GAYLE\\'s score')\nplt.ylabel('Match result')\nplt.yticks((0,1), ['Lost','Won']);","2b5e4a2d":"df_corr = df2[df2.batsman == 'AB DE VILLIERS'].groupby('match_id').batsman_runs.sum().to_frame(name = 'score').reset_index()\ndf_corr = df_corr[df_corr.score >= 50]\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['score','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['RCB'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\n# df_corr\nprint(f'Correlation between ABD\\'s 50+ scores and team\\s victory is weak positive: { pearson_r(df_corr.score, df_corr.victorious)}' )\nplt.plot(df_corr.score, df_corr.victorious, marker='.', linestyle='none')\nplt.xlabel('ABD\\'s score')\nplt.ylabel('Match result')\nplt.yticks((0,1), ['Lost','Won']);","2fe59c02":"df_corr = df2[df2.batsman == 'SK RAINA'].groupby('match_id').batsman_runs.sum().to_frame(name = 'score').reset_index()\ndf_corr = df_corr[df_corr.score >= 50]\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['score','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['GL','CSK'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\n# df_corr\nprint(f'Correlation between RAINA\\'s 50+ scores and team\\s victory is NEGLIGIBLE: { pearson_r(df_corr.score, df_corr.victorious)}' )\nplt.plot(df_corr.score, df_corr.victorious, marker='.', linestyle='none')\nplt.xlabel('RAINA\\'s score')\nplt.ylabel('Match result')\nplt.yticks((0,1), ['Lost','Won']);","e775777d":"df_corr = df2[df2.batsman == 'RG SHARMA'].groupby('match_id').batsman_runs.sum().to_frame(name = 'score').reset_index()\ndf_corr = df_corr[df_corr.score >= 50]\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['score','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['DCH','MI'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\n# df_corr\nprint(f'Correlation between ROHIT\\'s 50+ scores and team\\s victory is weak positive: { pearson_r(df_corr.score, df_corr.victorious)}' )\nplt.plot(df_corr.score, df_corr.victorious, marker='.', linestyle='none')\nplt.xlabel('ROHIT\\'s score')\nplt.ylabel('Match result')\nplt.yticks((0,1), ['Lost','Won']);","7dca436f":"df_corr = df2[~df2.dismissal_kind.isin(dismissals_not_by_bowler)]\ndf_corr = df_corr.groupby(['match_id']).bowler.value_counts()\ndf_corr = df_corr.reset_index(name='wickets')\ndf_corr = df_corr[df_corr.bowler == 'SL MALINGA']\ndf_corr = df_corr[df_corr.wickets > 3]\ndf_corr = pd.merge(df_corr, df1, left_on='match_id', right_on='id')\ndf_corr = df_corr[['wickets','winner']]\ndf_corr['victorious'] = (df_corr.winner.isin(['MI'])).astype(int)\ndf_corr.drop(columns='winner', inplace=True)\nprint(df_corr)\nprint(f'Correlation between MALINGA\\'s 4+ wickets and team\\s victory is weak positive: { pearson_r(df_corr.wickets, df_corr.victorious)}' )\n","a43ad104":"### Slightly surprising this one. How can Sunrisers and Royals have better win %age than KKR? While Sunrisers joined IPL very late, it has been a very good side. KKR on the other hand had a horrible first 3 seasons where they were not even in top 5. Remember SRK's comment at the end of the 2nd season when KKR finished last: \"I'm releived. They can't do any worse than this next time\" or something like that.","80483755":"> MI has absolutely pumelled KKR","57398e42":"# ***Assumptions***\n* Rising Pune Supergiant and Rising Pune Supergiants are considered to be one single team. Pune Warriors is treated independently.\n* Delhi Daredevils and Delhi Capitals are considred as one team.\n* Sunrisers Hyderabad and Deccan Chargers are considered as different teams.\n* While Bangalore city was renamed to Bengaluru, we will continue to use Bangalore as RCB team name also has the word Bangalore.\n* Boundaries include 6s and 4s\n","244d4143":"> The dot ball streak here cuts across matches\/seasons. For eg. Gambhir who has the highest streak of 19 dot balls, is distributed across 4 matches; Watson\u2019s 16 is distributed across 2 matches","955703be":"#### From a Bowler\u2019s perspective, a dot ball represents no Run scored of the bat, and extras(byes & legbyes) are considered as dot balls, and error balls(no ball and wide) are not, as they are counted as runs, and gets added to their bowling figure. From Batsman perspective : A ball which does not fetch any run from  a bat is a dot ball.","c8fba62a":"# Which team has highest win% in IPL's history?","e7730fda":"> ..and the award of bravest man goes to ... Bhajji!","6db2631f":"# Who was dismissed most no of times in IPL's history?","21a0092d":"# Who won most MOMs in MI vs KKR contests?","e118ba8e":"> CSK was ofcourse banned for the 2016 and 2017 editions","62ceaa14":"> ### Let's create some convenient columns which help in easy plotting","a781c011":"> How was that for a surprise? Kings XI Punjab has won more matches chasing than CSK and KKR. One would have thought with MS and Virat being master chasers, CSK and RCB would be miles ahead of KPXI.","1440bd95":"# Which team has won most matches in IPL's history?","33000240":"# How many matches get played on weekdays vs weekend?","eca0acf6":"### Have used color-pairs of each team as per their current uniforms","ca7db986":"# 'deliveries' datset begins here","d59b8f5d":"## DL method has been applied in 19 out of 737 matches. Overall, only 9 matches have resulted in a tie!","c0dc79be":"# FUNFACTS unearthed from this dataset\n* RCB wins 25% of the matches played on Saturday while mere 4% on Mondays. Talk about monday blues.. Hope Kohli reads this..\n* Across all seasons, CSK stands 2nd in the tally of match winners despite not playing in 2 seasons. It has the highest win%: 60\n* Sunrisers and Royals have better win %age than KKR\n* No, RCB doesn't loses toss most. It's Sunrisers!\n* Yusuf Pathan has won more MOMs than Watson, Raina, Kohli. Twice that of Jadeja\n* Kochi has never won a match batting first\n* Kings XI Punjab has won more matches chasing than CSK and KKR\n* Deepak Chahar has bowled the max number of dot balls in an innings: 22\n* Gambhir has faced 19 consecutive dot balls, distributed across 4 matches\n* Irfan Pathan has scored more runs from leg byes than Kohli\n* Dhawan has scored more runs than Gayle!\n* Uthappa has scored more runs than ABD, Watson!\n* Parthiv has scored more runs than Yuvi,Viru and Pollard!\n* Chawla bowled 3157 balls (3rd highest) giving only 32 no-balls\/wide-balls.That's incredible discipline from the most unlikely cricketer: Chawla!!\n* Malinga bowled 2974 balls (5th highest) giving 147 no-balls\/wide-balls!\n* Bravo bowled 2711 balls (6th highest) giving 125 no-balls\/wide-balls!\n* Sreesanth bowled 947 balls (6th highest) giving 67 no-balls\/wide-balls i.e. 30% of the balls and double the extras! But then he had reasons ;)\n* Sreesanth has bowled the most no-balls in IPL's history.\n* Amit Mishra is the only spinner in the top 30 list of bowlers who have bowled most no-balls.\n","9f91a46c":"# *Initial Observations*\n* A total of 756 entries\n* Data not arranged by season inc\/dec order\n* City data missing for 7 matches\n* Match-winner data missing for 4 matches\n* MOM data missing for 4 matches\n* On-field umpires data missing for 2 matches\n* Third umpire data is missing for all matches (so, we will drop this column altogether)\n* There are a total of 18 columns in this dataset. We will drop\/combine\/introduce some columns as seen fit\n* We have converted date column from Object to datetime64 type\n* Pune team's name has been repeated with an extra 's'. Wikipedia says: \"The team name was announced (as Rising Pune Supergiants) on 18 January 2016. The owners changed the team name to Rising Pune Supergiant on 26 March 2017. \" Also, there was a Pune Warriors team.\n* Delhi Daredevils was renamed as Delhi Capitals from the 2019 edition.\n\n# *Interesting Facts uncovered so far*\n* A total of 756 matches played across 12 IPL seasons. 9 of them resulted in a tie while 4 fetched no result.\n* Max victory margin by runs is 146\n* Max victory margin by wickets is 10. That's pretty obvious but do you know which team had won a match by 10 wickets most number of times? Stay tuned..\n* On an average teams won with 13 runs or 3 wickets\n","512a589d":"### No team has ever won by 10 wickets on a Saturday and Tuesday. On the contrary, most 10-wicket victories have come on a Sunday.","7b6f5106":"# How was the trend of victory margin (runs) for every season?","a36f188e":"# How did the main teams fared against each other?","bfb10497":"# Who bowled most deliveries in IPL's history?","5d5993eb":"> As expected, given the champion team that CSK is, since it didn't do so well chasing, it's batting-first numbers will be much better. ","518c3a71":"# Data Cleaning\n* Drop unnecessary column(s)\n* Combine duplicated city names\n* Prevent duplication by removing leading\/trailing whitespaces across the dataframe\n* Prevent duplication by converting all text columns to upper case (Not a fan of this move but I guess it fits well for this dataset)\n* Combine teams that have been renamed.","1585beee":"> ### Let's create a mapping of home team and grounds. This is based on https:\/\/en.wikipedia.org\/wiki\/List_of_Indian_Premier_League_venues","facf4cb8":"> ### There will be cases where we will just concentrate on champion teams to reduce clutter from plots. RCB fans, sorry, but one can't be called a champ without ever winning ;) !\n> ","fe5e4fd1":"# Who won most titles?\n> Data about title wins and finals played is collected manually from outside this dataset","67544de9":"# Which cities hosted most matches in the history of IPL?","9ac794cc":"> One would have imagined RCB would be at the bottom as Kohli keeps loosing toss!","7eea53a3":"# Who won most MOMs in MI vs CSK contests?","85e94b18":"> Not sure how to interpret this stat as leg bye is not an accurate indicator of poor batting\/bowling. But just the fact that Irfan Pathan had more runs from leg byes than Kohli is amazing!","d57d4d21":"### Leg Byes are added to the team's total, but not to the number of runs scored by the batsman nor to the runs conceded by the bowler.","24ff688b":"> As seen from the plot above, most of the teams were winning by 5-8 wickets","0bb9f3fe":"> Someone from RCB camp really needs to look this ;)","466a5d88":"# Which team won most matches when batting first?","6c893133":"# Which team has played most matches in IPL's history?","9249b113":"# Which city hosted most matches\/season?","01949a2f":"# Which team won most matches\/season?","6c48b33c":"### Noteworthy mentions: \n#### 2009 for KKR where they lost 9 matches on the trot\n#### 2014 for KKR where they won 9 matches on the trot going on the lift the trophy","669ddaf1":"# Which team has highest toss-win% in IPL's history?","1f7b0d70":"> As seen above, overall the victory margin has increased. Not surprising!","7c9bbb4e":"> Finally Mr Dinda appears!","7d888cfa":"> Explain me this: How has Kulkarni bowled more to Kohli than Bhajji?","4be94612":"# Who played the most deliveries in IPL's history?","b8707a2d":"> Do you see the beauty in the above couple of MSD stats?","fc4ac2c1":"> * No of matches varied cos of change in format \n> * As expected, chasing is becoming the preferred choice.","7325b340":"> * 2009 edition was moved to South Africa so local venues\n> * Mumbai has hosted max matches in various editions other than 2012 and 2019 editions","4b306dcd":"### Most comprehensive victories in terms of runs as well as wickets has come for RCB","aaf4c7e9":"> There's no corelation here","58de86b3":"> Above plot is hands down the most boring and obvious of the lot!","5fcd190c":"# Which grounds hosted most matches in the history of IPL?","b05b21e7":"# Exploring matches.csv first","5e4d97b4":"# What are the most common mode of dismissals in IPL's history?","f212d803":"# How was the trend of victory margin (wickets) for every season?","299ce78e":"# Who won most MOMs in the history of IPL?","ecb0d1fc":"* > A quick analysis shows that this dataset is plagued by the same problems (like duplicated names etc) as the previous dataset barring the date problem as there is no date column here. So we will give this dataset the same cleaning treatment.\n* > Most of the values in columns related to dismissal have NaN values; makes sense as not every delivery results in a dismissal.\n* > Most runs of a ball has been shown as 10 on some occasions. Breakup is shown as 'batsman_runs' and 'extra_runs', 5 each for all such instances. Not sure how that's possible. I checked the preceding record for all such cases - no no-balls, so we can rule out the free-hit angle\n* > Innings column seems to have values greater than 2. Not sure what that means, but hopefully it doesn't affect our analysis.\n* > Longest over has been a 9-ball one","645a73c6":"From the ECDF plot, it's clear that:\n* ~58% matches are won by 0 runs i.e. batting second\n* 90% of the macthes when batting first are won by less than 40 runs","7c020d09":"> That's one heck of a stat! Surprises:\n* > Kohli gets bowled out so often!\n* > Gayle hardly runs himself out while Raina does most often! Who would have guessed that!","5152cf4a":"> From ECDF plot, its clear that:\n* ~40% were dot balls and ~40% were singles.\n* 79% of the times 1 or less run were scored","775c3806":"# Who won most MOMs\/season?","c9e4a2a4":"### This stat proves that toss cannot decide the match's result if you are good enough (and if you don't receive call from unknown numbers). Top teams like MI and CSK have won more matches than tosses.","82afbe72":"> ### *Given the flak that RCB receives, I was surprised to know that they have actually made it to finals on 3 occasions. That's one more than KKR !*","5e0e6f10":"> This one's very surprising. I always thought Bhuvi bowled well to Gayle with his swing and what not","c8f0c47a":"# Which team won most matches while chasing?","85f01334":"# Who scored most runs in IPL's history?","f1544a15":"## *Facts uncovered so far*\n* A total of 756 matches played across 12 IPL seasons. 9 of them resulted in a tie while 4 fetched no result.\n* Max victory margin by runs is 146\n* On an average teams won with 13 runs or 3 wickets\n* Most matches (76) were played in the 2013 edition while the least (57) were played in 2009 edition.\n* Gayle(21) won the most MOMs followed closely by ABD(20). While Gayle was the obvious one here, but I was personally surprised to know that ABD would be so close.\n* MI played the most matches and also won the most matches as well as tosses. Kochi ranked least on all three fronts.\n* S Ravi (106) and Dharamsena (87) officiated as on-field umpires most number of times.\n* DL method was applied in 19 matches. That's 2.5% of all matches. Most number of affected matches (4) happened in 2016\n","dab02e33":"### No surprises here. MI, CSK and KKR have won most of the matches. (CSK even when not playing for 2 years :), WOW!)","6bc2e391":"# Match-Win% vs Toss-Win% in IPL's history?","a5953dd5":"#### For some of the dates in 2018 and 2019 seasons, the months and days were exchanged. Must use dayfirst to resolve this.","32c54631":"### We will consider only the imortant teams in most of our analysis\n","221211be":"# Highest wicket takers in IPL's history?","45b25c49":"> These are amazing stats: \n* MSD's top 5 scores have resulted in Loss!\n","1da88811":"### There are some teams which have played only limited seasons. For better understanding of the data, we should exclude them from our analysis\n","5a1fece3":"> Sreesanth clearly was on a mission.","4c5874b3":"# Who conceded most runs in IPL's history?","93c5159a":"### This data is sure to destroy the confidence that many cricket lovers have about their knowledge of the game. For starters, did you know that MSD hit the most sixes against Steyn? Chawla is the most disciplined bowler when it came to no-balls and awide-balls, way ahead of others? Stay tuned to get the shocking answer! By exploring this data, I intend to highlight freakish insights. Also, along the way we would establish the impact of winning toss, playing on home ground etc"}}