{"cell_type":{"a491f9d1":"code","bcf35e8e":"code","462bebec":"code","97be7e89":"code","9e5a5ab5":"code","174c4dd6":"code","d7dcd1e0":"code","6c77cac6":"code","7ac20a3e":"code","8d8b604d":"code","0fb5868c":"code","88d4f7c3":"code","21853bfa":"code","9d945ada":"code","75c9f5dc":"code","f7f1d275":"code","cfad3bd3":"code","32544bcd":"code","952bd538":"code","89f3d88a":"code","963004ad":"code","5d51aff8":"code","692a4c8c":"code","1e159fd2":"code","3a7c41ee":"code","812ef88e":"code","9a6e746f":"code","988851d5":"code","a89caa7a":"code","0c15dcae":"code","4a5d08ee":"code","b4b0262b":"code","e54c44bd":"code","343df106":"code","85b3d95b":"code","cf74b2d1":"code","1a71d5a7":"code","76aec85b":"code","0e7fb299":"code","0c68a030":"code","bd7c0788":"code","c0e8eb25":"code","004e6c25":"code","e1afa7aa":"code","a49234d0":"code","9804c5a1":"code","325c9f61":"code","ea66899f":"code","c58993d6":"code","a3ba2476":"code","b2bce2dd":"markdown","006d1539":"markdown","3a86c048":"markdown","5a062994":"markdown","151da734":"markdown","103c2937":"markdown","54c18858":"markdown","6d435d24":"markdown","dabade58":"markdown","c0b5c7f5":"markdown","9002c096":"markdown","ff9ad481":"markdown","14f3423a":"markdown","9f7cc9a5":"markdown","3676ce98":"markdown","7020bf10":"markdown","1b4efea7":"markdown","12493099":"markdown","9bb7dff8":"markdown","31813132":"markdown","9a2672fd":"markdown","9dcaab40":"markdown","c2a2dd67":"markdown","07c5e6e6":"markdown","d78f272c":"markdown","5fc9e838":"markdown","47c298d4":"markdown","805b7cc7":"markdown"},"source":{"a491f9d1":"import pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nimport numpy as np\nimport pandas_profiling as pp\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns","bcf35e8e":"# data load\n\n\"..\/input\/\"\nX_full = pd.read_csv(\"..\/input\/learn-together\/train.csv\", index_col=0)\ntest = pd.read_csv(\"..\/input\/learn-together\/test.csv\", index_col=0)\n","462bebec":"X_full.dtypes","97be7e89":"X_full.iloc[:,10:-1] = X_full.iloc[:,10:-1].astype(\"category\")\ntest.iloc[:,10:] = test.iloc[:,10:].astype(\"category\")\n\nTARGET = 'Cover_Type'\nX = X_full.copy()\ny = X_full[TARGET]","9e5a5ab5":"print(X.shape)\nX.head()","174c4dd6":"print(y.value_counts(), '\\n', 'sum of y count is ', y.value_counts().sum())","d7dcd1e0":"X.describe()","6c77cac6":"X.isna().sum().sum()","7ac20a3e":"f,ax = plt.subplots(figsize=(9,5))\nsns.heatmap(X.corr(),annot=True, linewidths=.2, fmt='.1f', ax=ax)\nplt.show()","8d8b604d":"X.plot(kind='scatter', x='Vertical_Distance_To_Hydrology',\n       y='Horizontal_Distance_To_Hydrology', alpha=0.5,color='darkblue', figsize = (12,9))\n\nplt.title('Vertical And Horizontal Distance To Hydrology')\nplt.xlabel(\"Vertical Distance\")\nplt.ylabel(\"Horizontal Distance\")\n\nplt.show()","0fb5868c":"X.plot(kind='scatter', x='Aspect', \n              y='Hillshade_3pm', alpha=0.5, \n              color='grey', figsize = (12,9))\n\nplt.title('Vertical And Horizontal Distance To Hydrology')\nplt.xlabel(\"Vertical Distance\")\nplt.ylabel(\"Horizontal Distance\")\n\nplt.show()","88d4f7c3":"box1 = go.Box(y=X[\"Vertical_Distance_To_Hydrology\"],\n                name = 'Vertical Distance',marker = dict(color = 'rgb(100,125,219)'))\n\nbox2 = go.Box(y=X[\"Horizontal_Distance_To_Hydrology\"],\n                name = 'Horizontal Distance', marker = dict(color = 'rgb(59, 19, 224)'))\n\ndata = [box1, box2]\nlayout = dict(autosize=False, width=800,height=500, title='Distance To Hydrology', paper_bgcolor='rgb(243, 243, 243)', \n              plot_bgcolor='rgb(243, 243, 243)', margin=dict(l=40,r=30,b=80,t=100,))\n\nfig = dict(data=data, layout=layout)\niplot(fig)","21853bfa":"box3 = go.Box(y=X[\"Hillshade_Noon\"],name = 'Hillshade Noon',\n                marker = dict(color = 'rgb(255,111,145)'))\n\nbox4 = go.Box(y=X[\"Hillshade_3pm\"],name = 'Hillshade 3pm',\n                marker = dict(color = 'rgb(132,94,194)'))\n\ndata = [box3, box4]\nlayout = dict(autosize=False, width=700,height=500, title='Hillshade 3pm and Noon', paper_bgcolor='rgb(243, 243, 243)', \n              plot_bgcolor='rgb(243, 243, 243)', margin=dict(l=40,r=30,b=80,t=100,))\n\nfig = dict(data=data, layout=layout)\niplot(fig)","9d945ada":"f,ax=plt.subplots(1,2,figsize=(15,7))\nX.Vertical_Distance_To_Hydrology.plot.hist(ax=ax[0],bins=30,\n                                                  edgecolor='black',color='crimson') \n                                       \nax[0].set_title('Vertical Distance To Hydrology')\nx1=list(range(-150,350,50))\nax[0].set_xticks(x1)\n\nX.Horizontal_Distance_To_Hydrology.plot.hist(ax=ax[1],bins=30,\n                                                    edgecolor='black',color='darkmagenta') \n                                                                                                        \nax[1].set_title('Horizontal Distance To Hydrology')\nx2=list(range(0,1000,100))\nax[1].set_xticks(x2)\n\nplt.show","75c9f5dc":"soil_types = X.iloc[:,14:-1].sum(axis=0)\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=soil_types.index, y=soil_types.values, palette=\"rocket\")\n\nplt.xticks(rotation= 75)\nplt.ylabel('Total')\nplt.title('Count of Soil Types With Value 1', color = 'darkred',fontsize=12)\n\nplt.show()","f7f1d275":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nX['Euclidean_distance_to_hydro'] = (X.Vertical_Distance_To_Hydrology**2 + X.Horizontal_Distance_To_Hydrology**2)**.5\n\nf, axes = plt.subplots(1, 3, figsize=(15, 5), sharex=True, sharey=True)\n\nsns.distplot(X.Horizontal_Distance_To_Hydrology, color=\"b\", ax=axes[0])\nsns.distplot(X.Vertical_Distance_To_Hydrology, color=\"b\", ax=axes[1])\nsns.distplot(X['Euclidean_distance_to_hydro'], color=\"g\", ax=axes[2])\n","cfad3bd3":"sns.violinplot(x=TARGET, y='Horizontal_Distance_To_Hydrology', data=X)","32544bcd":"def euclidean(df):\n    df['Euclidean_distance_to_hydro'] = (df.Vertical_Distance_To_Hydrology**2 \n                                         + df.Horizontal_Distance_To_Hydrology**2)**.5\n\n    return df\n# Calculate euclidian dist in two cols\nX = euclidean(X)\ntest = euclidean(test)","952bd538":"from itertools import combinations\n\ndef distances(df):\n    cols = [\n        'Horizontal_Distance_To_Roadways',\n        'Horizontal_Distance_To_Fire_Points',\n        'Horizontal_Distance_To_Hydrology',\n    ]\n    \n    df['distance_mean'] = df[cols].mean(axis=1)\n    df['distance_sum'] = df[cols].sum(axis=1)\n    df['distance_road_fire'] = df[cols[:2]].mean(axis=1)\n    df['distance_hydro_fire'] = df[cols[1:]].mean(axis=1)\n    df['distance_road_hydro'] = df[[cols[0], cols[2]]].mean(axis=1)\n    \n    df['distance_sum_road_fire'] = df[cols[:2]].sum(axis=1)\n    df['distance_sum_hydro_fire'] = df[cols[1:]].sum(axis=1)\n    df['distance_sum_road_hydro'] = df[[cols[0], cols[2]]].sum(axis=1)\n    \n    df['distance_dif_road_fire'] = df[cols[0]] - df[cols[1]]\n    df['distance_dif_hydro_road'] = df[cols[2]] - df[cols[0]]\n    df['distance_dif_hydro_fire'] = df[cols[2]] - df[cols[1]]\n    \n    # Vertical distances measures\n    colv = ['Elevation', 'Vertical_Distance_To_Hydrology']\n    \n    df['Vertical_dif'] = df[colv[0]] - df[colv[1]]\n    df['Vertical_sum'] = df[colv].sum(axis=1)\n    \n    return df\n\nX = distances(X)\ntest = distances(test)","89f3d88a":"X.head(200)","963004ad":"f, axes = plt.subplots(1, 3, figsize=(15, 5), sharex=True, sharey=True)\n\nsns.distplot(X['Hillshade_9am'], color=\"y\", ax=axes[0])\nsns.distplot(X['Hillshade_Noon'], color=\"b\", ax=axes[1])\nsns.distplot(X['Hillshade_3pm'], color=\"g\", ax=axes[2])\n","5d51aff8":"X[['Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm']].kurt()","692a4c8c":"def shade(df):\n    SHADES = ['Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm']\n    \n    df['shade_noon_diff'] = df['Hillshade_9am'] - df['Hillshade_Noon']\n    df['shade_3pm_diff'] = df['Hillshade_Noon'] - df['Hillshade_3pm']\n    df['shade_all_diff'] = df['Hillshade_9am'] - df['Hillshade_3pm']\n    df['shade_sum'] = df[SHADES].sum(axis=1)\n    df['shade_mean'] = df[SHADES].mean(axis=1)\n    return df\n\nX = shade(X)\ntest = shade(test)","1e159fd2":"sns.violinplot(x=TARGET, y='Elevation', data=X)","3a7c41ee":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Hillshade_9am', y='Elevation', \n                hue=TARGET, data=X, y_jitter=True)","812ef88e":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Hillshade_Noon', y='Elevation', \n                hue=TARGET, data=X, y_jitter=True)","9a6e746f":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Hillshade_3pm', y='Elevation', \n                hue=TARGET, data=X, y_jitter=True)","988851d5":"\nf, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Euclidean_distance_to_hydro', y='Elevation', \n                hue=TARGET, data=X)","a89caa7a":"def elevation(df):\n    df['ElevationHydro'] = df['Elevation'] - 0.25 * df['Euclidean_distance_to_hydro']\n    return df\n\nX = elevation(X)\ntest = elevation(test)\nf, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Euclidean_distance_to_hydro', y='ElevationHydro', \n                hue=TARGET, data=X)","0c15dcae":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Vertical_Distance_To_Hydrology', y='Elevation', \n                hue=TARGET, data=X)","4a5d08ee":"def elevationV(df):\n    df['ElevationV'] = df['Elevation'] - df['Vertical_Distance_To_Hydrology']\n    return df\n\nX = elevationV(X)\ntest = elevationV(test)\nf, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Vertical_Distance_To_Hydrology', y='ElevationV', \n                hue=TARGET, data=X)","b4b0262b":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Horizontal_Distance_To_Hydrology', y='Elevation', \n                hue=TARGET, data=X)","e54c44bd":"def elevationH(df):\n    df['ElevationH'] = df['Elevation'] - 0.19 * df['Horizontal_Distance_To_Hydrology']\n    return df\n\nX = elevationH(X)\ntest = elevationH(test)\nf, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Horizontal_Distance_To_Hydrology', y='ElevationH', \n                hue=TARGET, data=X)","343df106":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Horizontal_Distance_To_Roadways', y='Elevation', \n                hue=TARGET, data=X)","85b3d95b":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Horizontal_Distance_To_Fire_Points', y='Elevation', \n                hue=TARGET, data=X)","cf74b2d1":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='distance_road_fire', y='Elevation', \n                hue=TARGET, data=X)","1a71d5a7":"def kernel_features(df):\n    df['Elevation2'] = df['Elevation']**2\n    df['ElevationLog'] = np.log1p(df['Elevation'])\n    return df\n\nX = kernel_features(X)\ntest = kernel_features(test)","76aec85b":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Aspect', y='Elevation', \n                hue=TARGET, data=X)","0e7fb299":"f, axes = plt.subplots(1, 1, figsize=(15, 15), sharex=True, sharey=True)\nsns.scatterplot(x='Slope', y='Elevation', \n                hue=TARGET, data=X)","0c68a030":"# drop label \nif TARGET in X.columns:\n    X.drop(TARGET, axis=1, inplace=True)","bd7c0788":"report = pp.ProfileReport(X)\n\nreport.to_file(\"report.html\")\n\nreport","c0e8eb25":"from sklearn.ensemble import (\n    RandomForestClassifier,\n    ExtraTreesClassifier,\n    AdaBoostClassifier,\n)\nfrom lightgbm import LGBMClassifier\nfrom mlxtend.classifier import StackingCVClassifier\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nSEED = 1234\n\nmodels = {\n    'LGBM': LGBMClassifier(n_estimators=400, metric='multi_logloss', num_leaves=100,\n                           verbosity=0, random_state=SEED, n_jobs=-1), \n    \n    'Random Forest': RandomForestClassifier(n_estimators=700,\n                                            n_jobs=-1, random_state=SEED),\n    \n    'Extra Tree': ExtraTreesClassifier(max_depth=500, n_estimators=450,\n                                       n_jobs=-1, oob_score=False, random_state=SEED,\n                                       warm_start=True)\n    }\n","004e6c25":"clf = models['Random Forest']\n\ndef feature_importances(clf, X, y, figsize=(18, 6)):\n    clf = clf.fit(X, y)\n    \n    importances = pd.DataFrame({'Features': X.columns, \n                                'Importances': clf.feature_importances_})\n    \n    importances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\n    fig = plt.figure(figsize=figsize)\n    sns.barplot(x='Features', y='Importances', data=importances)\n    plt.xticks(rotation='vertical')\n    plt.show()\n    return importances\n    \nimportances = feature_importances(clf, X, y)    ","e1afa7aa":"def select(importances, edge):\n    c = importances.Importances >= edge\n    cols = importances[c].Features.values\n    return cols\n\ncol = select(importances, 0.004)\nX = X[col]\ntest = test[col]    ","a49234d0":"# cross validation\nfrom sklearn.model_selection import KFold, cross_val_score\n\n# model selection functions\n\ncv = KFold(n_splits=10, shuffle=True, random_state=SEED)\n\ndef cross_val(models, X=X, y=y):\n    r = dict()\n    for name, model in models.items():\n        cv_results = cross_val_score(model, X, y, cv=cv, scoring='accuracy')\n        r[name] = cv_results\n        \n        print(name, 'Accuracy Mean {0:.4f}, Std {1:.4f}'.format(\n              cv_results.mean(), cv_results.std()))\n    return r\n    \ndef choose_best(results):\n    errors = dict()\n\n    for name, arr in results.items():\n        errors[name] = arr.mean()\n\n    best_model =  [m for m, e in errors.items() \n                   if e == max(errors.values())][0]\n    return best_model","9804c5a1":"results = cross_val(models)","325c9f61":"best_model_name = choose_best(results)\n\nmodel = models[best_model_name]","ea66899f":"def predict(model, filename, X=X, y=y, test=test):\n    model.fit(X, y)\n    predicts = model.predict(test)\n\n    output = pd.DataFrame({'ID': test.index,\n                       TARGET: predicts})\n    output.to_csv(filename+'.csv', index=False)\n    return predicts\n","c58993d6":"estimators = [m for m in models.values()]\n\nstack = StackingCVClassifier(classifiers=estimators,\n                             meta_classifier=model,\n                             cv=cv,\n                             use_probas=True,\n                             use_features_in_secondary=True,\n                             verbose=1,\n                             random_state=SEED,\n                             n_jobs=-1)\n\npredict_stack = predict(stack, 'stacked')\nprint('Ready!')","a3ba2476":"print('Predited are', predict_stack)","b2bce2dd":"Let's validate our model(s)","006d1539":"Compare H and V distance separately","3a86c048":"## Elevation analysis\n\nElevation is the most important feature (see feature importance section). Hence we would compare this with other features (bivariate analysis), and make some transformations creating new features that help our tree algos to make better splits.","5a062994":"#### Plot shade bassed vs elevation","151da734":"### Forked from [Evimar](https:\/\/www.kaggle.com\/evimarp\/top-6-roosevelt-national-forest-competition) and [Fatih Belgin](https:\/\/www.kaggle.com\/fatihbilgin\/quick-eda-and-data-visualization-for-beginners)","103c2937":"Let's see soil_types variables","54c18858":"### Interpretation\n\nHere we can see the variation in the amount of sunlight among three different day hours.\nBetween 9 am and noon, we see how the sunlight is increasing with a high positive kurtosis (>1) a huge peak in approx 225, that is almost the max value measurable (254). \n","6d435d24":"Normal negative values for deep distance, we get tailled representation both.","dabade58":"## Shade analysis","c0b5c7f5":"### Interpretation\nThe first plot (horizontal distance to hydrology)\nAs expected, vegetation seems to be more abundant near hydrology.\nWe see that our third graph looks like the first, this is because the horizontal distance has a wider distribution compared to the vertical one.  \nHowever, this Euclidean distance is also better suited to the line, which will improve our model.","9002c096":"## Feautures importances","ff9ad481":"## Profiling the dataset","14f3423a":"### Stacked model","9f7cc9a5":"We notice u a big difference in median 32 for V and 180 for H. With outliers in uper box","3676ce98":"There is no NANs!!! Wonderfull databases :) but not hard work :\/  \n\nLet's make a descriptive stats before training our first model\n","7020bf10":"We se that type _8, type_7, type_15 , type_25 are likely empty. We'l see them  before applying ML.","1b4efea7":"## I'll try out without using correlated feature.","12493099":"Some feature need to be ride of before model.","9bb7dff8":"Reduce feature less than 0.004","31813132":"\nMost important correlations are:  \n`Horizontal Distance To Hydrology` and `Vertical Distance To Hydrology` with `70%`.  \n`Aspect` and `Hillshade 3pm` with `60%`;  \n`Hillshade Noon` and `Hillshade 3pm` with `60%`;  \n`Elevation` and `Horizontal Distance To Roadways` with `60%`.","9a2672fd":"Let's use boxplot to see outliers and some patterns.","9dcaab40":"#### Viz of corr columns","c2a2dd67":"Excellent!! all features are numeric\n`Soil_TypeX` and `Wilderness_AreaX` are OHE features of categorical variables. Hence they need to be transformed to binary columns.","07c5e6e6":"The dataset is **balanced**, there are only 7 values for the label (Cover_Type), and each type have same sample size (2160 rows)\nIt is a multiclassification problem.","d78f272c":"### Make a model","5fc9e838":"## Distances analysis\n\nDistances features are: \n- Vertical_Distance_To_Hydrology\n- Horizontal_Distance_To_Hydrology\n- Horizontal_Distance_To_Roadways\n- Horizontal_Distance_To_Fire_Points","47c298d4":"Let's see what give us `Horizontal_Distance_To_Hydrology` vs TARGET","805b7cc7":"Hillshade noon have more light which is expected, shade_3pm is normal also as expected, because of less sun light part."}}