{"cell_type":{"30a0e2aa":"code","adc552b2":"code","84297c7b":"code","d6ec67a5":"code","5943feef":"code","c0dbd974":"code","6f7e7d69":"code","7c13f8e6":"code","b5bdcb26":"code","a216330a":"code","3ac5f045":"code","5408ef3c":"code","0e08e560":"code","531a687b":"code","cfbf1a18":"code","24ee7139":"code","d743a56e":"code","8441612f":"code","cffc0359":"code","2142344e":"code","c412f794":"code","2cc7ab01":"code","821dd39c":"code","e7fb799d":"code","fc1a52c3":"code","0768bf84":"code","3e4f6507":"code","d63efc5f":"code","c5d64f5b":"code","264b0cd9":"code","f942c3d4":"code","57279678":"code","dde5a27a":"code","c305c4ff":"code","de03c624":"code","0a5fb0d4":"code","cd356617":"markdown","34929a9f":"markdown","b9fb1d87":"markdown","53f37595":"markdown","0b9912a7":"markdown","767e678d":"markdown","5132c593":"markdown","f34bf3cd":"markdown","467bc407":"markdown","92c5102b":"markdown"},"source":{"30a0e2aa":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image as im\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n%matplotlib inline\n\nfrom colorama import Fore, Back, Style\nred = Fore.RED\ngrn = Fore.GREEN\nblu = Fore.BLUE\nylw = Fore.YELLOW\nwht = Fore.WHITE\nmag = Fore.MAGENTA\n\npalette = sns.color_palette(\"bright\",15)\nsns.palplot(palette)\nsns.set_palette(\"Paired\")","adc552b2":"data = pd.read_csv('..\/input\/goodreads-books-100k\/GoodReads_100k_books.csv')\ndata.head()","84297c7b":"data.isnull().sum()","d6ec67a5":"def clean(feature):\n    cleaned_feature = list()\n    for feat in data[feature]:\n        if len(feat.split(',')) > 1:\n            temp = feat.split(',')\n            for a in temp:\n                cleaned_feature.append(a)\n        else:\n            cleaned_feature.append(feat)\n    return cleaned_feature","5943feef":"def plot_barplot(x,y,df):\n    sns.set(style = 'darkgrid',font_scale=0.25,rc={\"grid.linewidth\": 0.2});\n    plt.figure(dpi=250);\n    sns.barplot(y=y,x=x,\n                palette=palette, \n                edgecolor=\".9\",\n                data=df );\n    plt.legend(title=f'{x} by {y}', fontsize='10', title_fontsize='14');","c0dbd974":"def plot_distribution(data,feat,color,alpha=1):\n    sns.set(font_scale=1);\n    sns.displot(data[feat],color=color,kde=True,aspect=15\/10,alpha = alpha,);\n    print(f'{red}Max value of {feat} is {data[feat].max()}\\n{blu}Min value of {feat} is {data[feat].min()}\\n{grn}Std value of {feat} is {data[feat].std()}\\n{ylw}Mean value of {feat} is {data[feat].mean()}\\n{mag}Median value of {feat} is {data[feat].median()}')","6f7e7d69":"book_mask = np.load('..\/input\/book-mask-for-wordcloud\/book_mask2.npy')\nmask = im.fromarray(book_mask)\nplt.title(\"Book Mask\");\nplt.axis('off');\nmaskplot = plt.imshow(mask);","7c13f8e6":"def plot_wordcloud(text, mask=None, max_words=200, max_font_size=100, color = 'white',title = None, title_size=30):\n\n    cloud = WordCloud(background_color=color,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 7,\n                    width=400, \n                    height=200,\n                    mask = mask,\n                         )\n    texts = ''.join(text)                                                                                                                                                                                                                                                             \n    cloud.generate_from_text(str(texts))\n    \n    plt.figure(figsize=(10,16))\n    plt.imshow(cloud);\n    plt.title(title, fontdict={'size': title_size, 'color': 'black', 'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout() ","b5bdcb26":"all_authors = clean('author')\nauthors = pd.DataFrame(all_authors, columns = ['authors'])\nauthor_counts = authors.value_counts()\nauthors['books_count'] = authors['authors'].apply(lambda x: author_counts[x])\nsorted_authors = authors.sort_values(by='books_count',ascending=False)\nsorted_authors = sorted_authors.drop_duplicates(['authors'])\nsorted_authors = sorted_authors.reset_index(drop = True)","a216330a":"plot_barplot('books_count','authors',sorted_authors[:100])","3ac5f045":"plot_wordcloud(sorted_authors.authors[:100],mask=book_mask,title=\"WordCloud of Authors\")","5408ef3c":"plot_distribution(sorted_authors[:1000],'books_count','green',0.6);","0e08e560":"book_format = pd.DataFrame(data['bookformat'].values, columns = ['format'])\nbook_format['format'] = book_format['format'].fillna('None')\nformat_counts = book_format['format'].value_counts()\nbook_format['format_count'] = book_format['format'].apply(lambda x: format_counts[x])\nsorted_format = book_format.sort_values(by='format_count',ascending=False)\nsorted_format = sorted_format.drop_duplicates(['format'])\nsorted_format = sorted_format.reset_index(drop = True)","531a687b":"plot_barplot('format_count','format',sorted_format[:25])","cfbf1a18":"plot_distribution(sorted_format[:25],'format_count','orange');","24ee7139":"data['genre'] = data['genre'].fillna('None')\nall_genres = clean('genre')\ngenres = pd.DataFrame(all_genres, columns = ['genres'])\ngenre_counts = genres.value_counts()\ngenres['genre_count'] = genres['genres'].apply(lambda x: genre_counts[x])\nsorted_genres = genres.sort_values(by='genre_count',ascending=False)\nsorted_genres = sorted_genres.drop_duplicates(['genres'])\nsorted_genres = sorted_genres.reset_index(drop = True)","d743a56e":"plot_barplot('genre_count','genres',sorted_genres[:110])","8441612f":"plot_wordcloud(sorted_genres.genres[:1000],mask=book_mask,title=\"WordCloud of Genres\")","cffc0359":"plot_distribution(sorted_genres[:120],'genre_count','lime',0.4);","2142344e":"division_factor = 1000\nsteps = int(data['pages'].max() \/\/ division_factor)\nbins = np.linspace(data['pages'].min(),data['pages'].max(), steps, dtype = int)","c412f794":"pages = pd.DataFrame(pd.cut(data['pages'],bins = bins).values, columns = ['pages_bins'])\npages_counts = pages['pages_bins'].value_counts()\npages['page_count'] = pages['pages_bins'].apply(lambda x: pages_counts[x])\nsorted_pages = pages.sort_values(by='page_count',ascending=False)\nsorted_pages = sorted_pages.drop_duplicates(['pages_bins'])\nsorted_pages = sorted_pages[sorted_pages['page_count'] !=0]\nsorted_pages = sorted_pages.reset_index(drop = True)","2cc7ab01":"plot_distribution(sorted_pages[:4],'page_count','red',0.4)","821dd39c":"plot_barplot('page_count','pages_bins',sorted_pages)","e7fb799d":"division_factor = 100\nsteps = int(3000 \/\/ division_factor)\nbins = np.linspace(data['pages'].min(),3000, steps, dtype = int)","fc1a52c3":"new_pages = pd.DataFrame(pd.cut(data['pages'][data['pages'] < 3000],bins = bins).values, columns = ['new_pages_bins'])\nnew_pages_counts = new_pages['new_pages_bins'].value_counts() \nnew_pages['page_count'] = new_pages['new_pages_bins'].apply(lambda x: new_pages_counts[x])\nsorted_new_pages = new_pages.sort_values(by='page_count',ascending=False)\nsorted_new_pages = sorted_new_pages[sorted_new_pages['page_count'] >= 1]\nsorted_new_pages = sorted_new_pages.drop_duplicates(['new_pages_bins'])\nsorted_new_pages = sorted_new_pages.reset_index(drop = True)","0768bf84":"plot_barplot('page_count','new_pages_bins',sorted_new_pages)","3e4f6507":"plot_distribution(data,'rating','rebeccapurple',0.8);","d63efc5f":"division_factor = 1500\nsteps = int(data['reviews'].max() \/\/ division_factor)\nbins = np.linspace(data['reviews'].min(),data['reviews'].max(), steps, dtype = int)","c5d64f5b":"reviews = pd.DataFrame(pd.cut(data['reviews'],bins = bins).values, columns = ['reviews_bins'])\nreviews_counts = reviews['reviews_bins'].value_counts()\nreviews['review_count'] = reviews['reviews_bins'].apply(lambda x: reviews_counts[x])\nsorted_reviews = reviews.sort_values(by='review_count',ascending=False)\nsorted_reviews = sorted_reviews.drop_duplicates(['reviews_bins'])\nsorted_reviews = sorted_reviews[sorted_reviews['review_count'] !=0]\nsorted_reviews = sorted_reviews.reset_index(drop = True)","264b0cd9":"plot_barplot('review_count','reviews_bins',sorted_reviews)","f942c3d4":"division_factor = 100\nsteps = int(3000 \/\/ division_factor)\nbins = np.linspace(data['reviews'].min(),3000, steps, dtype = int)","57279678":"new_reviews = pd.DataFrame(pd.cut(data['reviews'][data['reviews'] < 3000],bins = bins).values, columns = ['new_reviews_bins'])\nnew_reviews_counts = new_reviews['new_reviews_bins'].value_counts() \nnew_reviews['review_count'] = new_reviews['new_reviews_bins'].apply(lambda x: new_reviews_counts[x]).astype(float)\nsorted_new_reviews = new_reviews.sort_values(by='review_count',ascending=False)\nsorted_new_reviews = sorted_new_reviews.drop_duplicates(['new_reviews_bins'])\nsorted_new_reviews = sorted_new_reviews.reset_index(drop = True)","dde5a27a":"plot_barplot('review_count','new_reviews_bins',sorted_new_reviews)","c305c4ff":"division_factor = 100\nsteps = int(5000 \/\/ division_factor)\nbins = np.linspace(data['totalratings'].min(),5000, steps, dtype = int)","de03c624":"new_tratings = pd.DataFrame(pd.cut(data['totalratings'][data['totalratings'] < 5000],bins = bins).values, columns = ['new_tratings_bins'])\nnew_tratings_counts = new_tratings['new_tratings_bins'].value_counts() \nnew_tratings['trating_count'] = new_tratings['new_tratings_bins'].apply(lambda x: new_tratings_counts[x]).astype(float)\nsorted_new_tratings = new_tratings.sort_values(by='trating_count',ascending=False)\nsorted_new_tratings = sorted_new_tratings.drop_duplicates(['new_tratings_bins'])\nsorted_new_tratings = sorted_new_tratings.reset_index(drop = True)","0a5fb0d4":"plot_barplot('trating_count','new_tratings_bins',sorted_new_tratings)","cd356617":"## **Total Ratings**","34929a9f":"### Most of the reviews are in 0-1500 range .. let's divide in the similar way we did with pages","b9fb1d87":"## **Authors**","53f37595":"## **Pages**","0b9912a7":"### Most of the books are in 0-1000 range .. let's divide them further","767e678d":"## **Book Format**","5132c593":"# Welcome to the Goodreads 100k dataset \n# ![goodreads-logo-white.png](attachment:e346944f-e47d-484c-9d20-0a781a55a72d.png)","f34bf3cd":"## **Avg Ratings**","467bc407":"## **Reviews**","92c5102b":"## **Genre**"}}