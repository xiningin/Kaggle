{"cell_type":{"a73b4483":"code","8629ffdf":"code","d7a02aa9":"code","f58de9c9":"code","dac4ea24":"code","e80bffad":"code","fd9b81a3":"code","afb8c77c":"code","820d63ad":"code","29ea1a5e":"code","c7d34142":"code","11389aeb":"code","28d2ed6e":"code","26c95df3":"code","3fa8cb2d":"code","6aa0ce94":"code","98ff1851":"code","acf10d4b":"code","9c29f7bf":"code","2f6769e0":"code","29537858":"code","16a12f39":"code","21769567":"code","fef83161":"code","5a98f890":"code","47d2e745":"code","df4d2d36":"code","17b944ff":"code","0e69a60f":"code","30fe9f6b":"code","a3619d20":"code","a077ec50":"code","e38fcba5":"code","c39998f6":"code","0425ce9a":"code","2e9cca2c":"code","ebd29965":"code","f02638f3":"code","57d6363b":"code","7cf7840f":"markdown","35c24290":"markdown","943686ec":"markdown","9fdb9557":"markdown","b66452aa":"markdown","9f0336f9":"markdown","ad199275":"markdown","4a78d319":"markdown","8ff62efe":"markdown","16d4e96f":"markdown","cda0ab8e":"markdown","d1a585ca":"markdown"},"source":{"a73b4483":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8629ffdf":"import seaborn as sns\nimport sklearn \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.ensemble import IsolationForest \nfrom sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM\nimport scipy\n%matplotlib notebook\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 10\nRANDOM_SEED=1\nLABELS=[\"NORMAL\" ,\"FRAUD\"]\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv1D, MaxPooling1D, Dense, Flatten, Dropout, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard","d7a02aa9":"data=pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")","f58de9c9":"data.head()","dac4ea24":"data.info()","e80bffad":"data.isnull().values.any()","fd9b81a3":"countclass=pd.value_counts(data[\"Class\"], sort=True)\ncountclass.plot(kind='bar' , rot=0)\nplt.title('Transaction Class Distribution')\nplt.xticks(range(2) , LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")","afb8c77c":"fraud=data[data['Class']==1]\nnormal=data[data['Class']==0]","820d63ad":"print(fraud.shape)","29ea1a5e":"print(normal.shape)","c7d34142":"fraud.Amount.describe()","11389aeb":"normal.Amount.describe()","28d2ed6e":"f, (ax1 ,ax2)= plt.subplots(2, 1, sharex=True)\nf.suptitle('Amount per transaction by class')\nbins=10\nax1.hist(fraud.Amount , bins=bins)\nax1.set_title(\"Fraud\")\nax2.hist(normal.Amount , bins=bins )\nax2.set_title(\"Normal\")\nplt.xlabel(\"Amount($)\")\nplt.ylabel(\"No. of Transaction\")\nplt.xlim(0,40000)\nplt.yscale(\"log\")\nplt.show();","26c95df3":"data.hist(figsize=(30, 20));","3fa8cb2d":"data1=data.sample(frac =0.1 , random_state=2)\ndata1.shape","6aa0ce94":"data.shape","98ff1851":"Fraud=data1[data1['Class']==1]\nValid=data1[data1['Class']==0]\noutlier_fraction=len(Fraud)\/float(len(Valid))","acf10d4b":"print(outlier_fraction)\nprint(\"Fraud Cases : {}\".format(len(Fraud)))\n\nprint(\"Valid Cases : {}\".format(len(Valid)))","9c29f7bf":"corrmat=data1.corr()\ntop_corr_featues=corrmat.index\nplt.figure(figsize=(40,20))\npr=sns.heatmap(data[top_corr_featues].corr(),annot=True )","2f6769e0":"#Create independent and Dependent Features\ncolumns = data1.columns.tolist()\n# Filter the columns to remove data we do not want \ncolumns = [c for c in columns if c not in [\"Class\"]]\n# Store the variable we are predicting \ntarget = \"Class\"\n# Define a random state \nstate = np.random.RandomState(42)\nX = data1[columns]\nY = data1[target]\nX_outliers = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))\n# Print the shapes of X & Y\nprint(X.shape)\nprint(Y.shape)","29537858":"scalar = StandardScaler()\n\nX = data.drop('Class', axis=1)\ny = data.Class\n\nX_train_v, X_test, y_train_v, y_test = train_test_split(X, y, \n                                                    test_size=0.3, random_state=42)\nX_train, X_validate, y_train, y_validate = train_test_split(X_train_v, y_train_v, \n                                                            test_size=0.2, random_state=42)\n\nX_train = scalar.fit_transform(X_train)\nX_validate = scalar.transform(X_validate)\nX_test = scalar.transform(X_test)","16a12f39":"print(f\"TRAINING: X_train: {X_train.shape}, y_train: {y_train.shape}\\n{'_'*55}\")\nprint(f\"VALIDATION: X_validate: {X_validate.shape}, y_validate: {y_validate.shape}\\n{'_'*50}\")\nprint(f\"TESTING: X_test: {X_test.shape}, y_test: {y_test.shape}\")\n","21769567":"def print_score(label, prediction, train=True):\n    if train:\n        print(\"Train Result:\\n================================================\")\n        print(f\"Accuracy Score: {accuracy_score(label, prediction) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(\"Classification Report:\", end='')\n        print(f\"\\tPrecision Score: {precision_score(label, prediction) * 100:.2f}%\")\n        print(f\"\\t\\t\\tRecall Score: {recall_score(label, prediction) * 100:.2f}%\")\n        print(f\"\\t\\t\\tF1 score: {f1_score(label, prediction) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(y_train, prediction)}\\n\")\n        \n    elif train==False:\n        print(\"Test Result:\\n================================================\")        \n        print(f\"Accuracy Score: {accuracy_score(label, prediction) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(\"Classification Report:\", end='')\n        print(f\"\\tPrecision Score: {precision_score(label, prediction) * 100:.2f}%\")\n        print(f\"\\t\\t\\tRecall Score: {recall_score(label, prediction) * 100:.2f}%\")\n        print(f\"\\t\\t\\tF1 score: {f1_score(label, prediction) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(label, prediction)}\\n\") ","fef83161":"X_train_d=np.expand_dims(X_train,-1)\nX_test_d=np.expand_dims(X_test,-1)\nX_validate_d=np.expand_dims(X_validate,-2)","5a98f890":"print(f\"TRAINING:X_train:{X_train_d.shape},y_train:{y_train.shape}\\n{'_'*100}\")\nprint(f\"VALIDATE:X_validate:{X_validate_d.shape},y_validate:{y_validate.shape}\\n{'_'*100}\")\nprint(f\"TESTING:X_test{X_test_d.shape},y_test:{y_test.shape}\")","47d2e745":"epochs = 20\nmodel = Sequential()\nmodel.add(Conv1D(32, 2, activation='relu', input_shape=X_train_d[0].shape))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.1))\n\nmodel.add(Conv1D(64, 2, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv1D(128, 2, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1, activation='sigmoid'))","df4d2d36":"model.summary()","17b944ff":"# weights = {0:1, 1:5}\nmodel.compile(optimizer=Adam(0.0001), loss='binary_crossentropy', metrics=[keras.metrics.AUC()])\nr = model.fit(X_train_d, y_train, \n              validation_data=(X_validate_d, y_validate),\n              batch_size=500, \n              epochs=epochs, \n#               class_weight=weights\n             )","0e69a60f":"score = model.evaluate(X_test_d, y_test)","30fe9f6b":"print(score)","a3619d20":"y_train_pred = model.predict(X_train_d)\ny_test_pred = model.predict(X_test_d)\n\nprint_score(y_train, y_train_pred.round(), train=True)\nprint_score(y_test, y_test_pred.round(), train=False)","a077ec50":"#Create independent and Dependent Features\ncolumns = data1.columns.tolist()","e38fcba5":"# Filter the columns to remove data we do not want \ncolumns = [c for c in columns if c not in [\"Class\"]]","c39998f6":"# Store the variable we are predicting \ntarget = \"Class\"","0425ce9a":"# Define a random state \nstate = np.random.RandomState(42)\nX = data1[columns]\nY = data1[target]\nX_outliers = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))\n","2e9cca2c":"# Print the shapes of X & Y\nprint(X.shape)\nprint(Y.shape)","ebd29965":"classifiers = {\n    \"Isolation Forest\":IsolationForest(n_estimators=100, max_samples=len(X), \n                                       contamination=outlier_fraction,random_state=state, verbose=0),\n    \"Local Outlier Factor\":LocalOutlierFactor(n_neighbors=20, algorithm='auto', \n                                              leaf_size=30, metric='minkowski',\n                                              p=2, metric_params=None, contamination=outlier_fraction),\n    \n}","f02638f3":"type(classifiers)","57d6363b":"n_outliers = len(Fraud)\nfor i, (clf_name,clf) in enumerate(classifiers.items()):\n    #Fit the data and tag outliers\n    if clf_name == \"Local Outlier Factor\":\n        y_pred = clf.fit_predict(X)\n        scores_prediction = clf.negative_outlier_factor_\n    elif clf_name == \"Support Vector Machine\":\n        clf.fit(X)\n        y_pred = clf.predict(X)\n    else:    \n        clf.fit(X)\n        scores_prediction = clf.decision_function(X)\n        y_pred = clf.predict(X)\n     #Reshape the prediction values to 0 for Valid transactions , 1 for Fraud transactions\n    y_pred[y_pred == 1] = 0\n    y_pred[y_pred == -1] = 1\n    n_errors = (y_pred != Y).sum()\n    # Run Classification Metrics\n    print(\"{}: {}\".format(clf_name,n_errors))\n    print(\"Accuracy Score :\")\n    print(accuracy_score(Y,y_pred))\n    print(\"Classification Report :\")\n    print(classification_report(Y,y_pred))","7cf7840f":"# Exploratory Data Analysis","35c24290":"ALGORITHM'S USED :- \n    1. CNN\n    2. Isolation Forest \n    3. LocationFactorOutliner\n    \n\n","943686ec":"Isolation Forest detected 45 errors versus Local Outlier Factor detecting 79 errors \nAccuracy Score :\n    \nLocal Outlier Factor :99.72262209894316% \nIsolation Forest:99,84199992977775%\nCNN :- 99.93%\n    \nWe can say that CNN was much was detailed and useful in detecting fraud","9fdb9557":"# Observations \/ Conclusion","b66452aa":"CORRELATION","9f0336f9":"**Understanding the need for this analysis** \n\nCredit card fraud is when someone uses another person's credit card or account information to make unauthorized purchases or access funds through cash advances. \nCredit card fraud doesn\u2019t just happen online; it happens in brick-and-mortar stores, too. \nAs a business owner, you can avoid serious headaches \u2013 and unwanted publicity \u2013 by recognizing potentially fraudulent use of credit cards in your payment environment\n\n\n\n #### PURPOSE\n  The Credit Card Fraud Detection Problem includes modeling past credit card transactions with the knowledge of the ones that turned out to be a fraud. This model is then used to identify whether a new transaction is fraudulent or not. Our aim here is to detect 100% of the fraudulent transactions while minimizing the incorrect fraud classifications.","ad199275":"# Model Prediction","4a78d319":"# Credit Card Fraud Detection","8ff62efe":"### IMPORT LIBRARY","16d4e96f":"## Isolation Forest & Local Outlier Factor","cda0ab8e":"Convolutional Neural Network (CNNs)","d1a585ca":"# PRE PROCCESS THE DATA"}}