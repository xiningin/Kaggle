{"cell_type":{"d686e3fa":"code","63decf36":"code","b72bf8c5":"code","c7bbeed6":"code","71b20c57":"code","2880aaba":"code","8fd4176b":"code","4330762a":"code","c034fe09":"code","02903ca7":"code","5989b757":"code","51bcb3cd":"code","48502d4b":"code","91b5242c":"code","81da65e2":"code","595f185b":"code","1fba32d0":"code","446b0bfa":"code","91adea21":"code","9abe63f2":"code","3b0604bc":"code","0ab98beb":"code","398542bf":"code","57f9b04f":"code","3933699e":"code","9d81f72e":"code","852d46ff":"code","14c48704":"code","adce2a30":"code","3aa8ff04":"code","793a9d5f":"code","865eafb3":"code","63af42ee":"code","56f13f41":"code","c96822b3":"code","91f315dc":"code","d8e05fcb":"code","3de4c7ad":"code","2daad7fc":"code","ba25b32b":"code","baf6e746":"code","3a1a4f58":"code","0adf891d":"code","eb9468e8":"markdown","daa4ec87":"markdown","df0c237c":"markdown","65183a41":"markdown","dfe0346f":"markdown","7b2808d8":"markdown","7c94a577":"markdown","5079c6cd":"markdown","6c5c2bc6":"markdown","e38508cd":"markdown","37ad7dce":"markdown","fffb65a4":"markdown","14e4347b":"markdown","8571cba5":"markdown","8d000c8e":"markdown","141b5dd9":"markdown","3e62cd58":"markdown","e3d0e58f":"markdown","77fc3a73":"markdown","640b89fa":"markdown","1ac885db":"markdown","a30ebf21":"markdown","f1ae774b":"markdown","1087ad0d":"markdown","22f392c4":"markdown","d0d15e2b":"markdown"},"source":{"d686e3fa":"import sklearn\nsklearn.__version__","63decf36":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None) #For displaying all the columns of dataset\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.model_selection import RandomizedSearchCV\nimport pickle","b72bf8c5":"!pip install openpyxl -q ","c7bbeed6":"def extract_date_hour(dataset, col):\n    '''This function will create two columns containing Hours and Minutes\n       extracted from `col` column and then dropped it from the dataset.'''\n    \n    dataset[col + '_hour'] = dataset[col].dt.hour\n    dataset[col + '_minute'] = dataset[col].dt.minute\n    dataset.drop(col, axis=1, inplace=True)\n    \n    return dataset","71b20c57":"df = pd.read_excel('..\/input\/flight-price\/Data_Train.xlsx')\ndf.head(2)","2880aaba":"df.isnull().sum().sum()","8fd4176b":"df.dropna(inplace=True)","4330762a":"df.info()","c034fe09":"# Changing the datatype from object to datetime. \ndf['Date_of_Journey'] = pd.to_datetime(df['Date_of_Journey'])\ndf['Dep_Time']        = pd.to_datetime(df['Dep_Time'])\ndf['Arrival_Time']    = pd.to_datetime(df['Arrival_Time'])\n\n\n#Extracting Day and Month.\ndf['Day']   = df['Date_of_Journey'].dt.day\ndf['Month'] = df['Date_of_Journey'].dt.month\ndf.drop('Date_of_Journey', axis=1, inplace=True)\n\n\n#Extracting Hour and Minute.\ndf = extract_date_hour(df, 'Arrival_Time')\ndf = extract_date_hour(df, 'Dep_Time')","02903ca7":"df.head(2)","5989b757":"duration = list(df['Duration'])\nfor i in range(len(duration)):\n    if len(duration[i].split(' ')) == 2:\n        pass\n    else:\n        if 'h' in duration[i]:\n            duration[i]=duration[i] + ' 0m'\n        else:\n            duration[i]='0h '+ duration[i]\n\ndf['Duration'] = duration","51bcb3cd":"df['Hour']   = df['Duration'].apply(lambda x:x.split(' ')[0][0:-1]).astype('int32')\ndf['Minute'] = df['Duration'].apply(lambda x:x.split(' ')[1][0:-1]).astype('int32')\ndf.drop('Duration', axis=1, inplace=True)","48502d4b":"cat = [i for i in df.columns if df[i].dtype == 'O']\ncat","91b5242c":"px.pie(data_frame=df, values=df['Airline'].value_counts(),\n       names=df['Airline'].value_counts().index, hole=0.55)","81da65e2":"px.histogram(data_frame=df, x='Airline', y='Price')","595f185b":"px.box(data_frame=df.sort_values('Price',ascending=False), x='Airline', y='Price')","1fba32d0":"px.histogram(data_frame=df, x='Total_Stops', y='Price', width=600, height=400)","446b0bfa":"fig, ax = plt.subplots(1, 2, figsize=(16,6))\nsns.countplot(df['Source'], palette='cool', ax=ax[0])\nsns.countplot(df['Destination'], palette='cool', ax=ax[1])\nplt.show()","91adea21":"df['Route_1']=df['Route'].str.split('\u2192').str[0]\ndf['Route_2']=df['Route'].str.split('\u2192').str[1]\ndf['Route_3']=df['Route'].str.split('\u2192').str[2]\ndf['Route_4']=df['Route'].str.split('\u2192').str[3]\ndf['Route_5']=df['Route'].str.split('\u2192').str[4]\n\n\ndf['Route_1'].fillna('None',inplace=True)\ndf['Route_2'].fillna('None',inplace=True)\ndf['Route_3'].fillna('None',inplace=True)\ndf['Route_4'].fillna('None',inplace=True)\ndf['Route_5'].fillna('None',inplace=True)","9abe63f2":"df['Additional_Info'].value_counts()","3b0604bc":"df[cat].head(3)","0ab98beb":"airline = pd.get_dummies(df['Airline'])\nsource  = pd.get_dummies(df['Source'], prefix='s')\ndesti   = pd.get_dummies(df['Destination'], prefix='d')\nt_stops = pd.get_dummies(df['Total_Stops'])","398542bf":"label = LabelEncoder()\nfor i in [\"Route_1\",\"Route_2\",\"Route_3\",\"Route_4\",\"Route_5\"]:\n    df[i] = label.fit_transform(df[i])","57f9b04f":"df.drop(['Airline', 'Source', 'Destination', 'Route', 'Additional_Info', 'Total_Stops'],\n       axis=1, inplace=True)","3933699e":"data = pd.concat([df, airline, source, desti, t_stops], axis=1)\ndata.head(2)","9d81f72e":"data.columns","852d46ff":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nsns.distplot(data['Price'], color='r', ax=ax[0])\nsns.boxplot (data['Price'], color='r', ax=ax[1])\nplt.suptitle('Outlier Detection of Target Variable')\nfig.show()","14c48704":"data['Price'] = data['Price'].apply(lambda x:df['Price'].median() if x > 40000 else x)","adce2a30":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nsns.distplot(data['Price'], color='g', ax=ax[0])\nsns.boxplot (data['Price'], color='g', ax=ax[1])\nplt.suptitle('Outlier Removal of Target Variable')\nfig.show()","3aa8ff04":"data['Price'] = np.log(data['Price'])","793a9d5f":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nsns.distplot(data['Price'], color='b', ax=ax[0])\nsns.boxplot (data['Price'], color='b', ax=ax[1])\nplt.suptitle('Log Transformation of Target Variable')\nfig.show()","865eafb3":"data.columns","63af42ee":"data.drop(['Route_1', 'Route_2', 'Route_3', 'Route_4', 'Route_5'], axis=1, inplace=True)","56f13f41":"X = data.drop('Price', axis=1)\ny = data['Price']","c96822b3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","91f315dc":"linear = LinearRegression()\nmodel = linear.fit(X_train, y_train)\n\nprint(f'Training Score - {(model.score(X_train, y_train) * 100).round(2)}%')\nprint(f'Testing Score  - {(model.score(X_test, y_test) * 100).round(2)}%')","d8e05fcb":"KNR = KNeighborsRegressor()\nmodel = KNR.fit(X_train, y_train)\n\nprint(f'Training Score - {(model.score(X_train, y_train) * 100).round(2)}%')\nprint(f'Testing Score  - {(model.score(X_test, y_test) * 100).round(2)}%')","3de4c7ad":"DTR = DecisionTreeRegressor()\nmodel = DTR.fit(X_train, y_train)\n\nprint(f'Training Score - {(model.score(X_train, y_train) * 100).round(2)}%')\nprint(f'Testing Score  - {(model.score(X_test, y_test) * 100).round(2)}%')","2daad7fc":"RFR = RandomForestRegressor()\nmodel = RFR.fit(X_train, y_train)\n\nprint(f'Training Score - {(model.score(X_train, y_train) * 100).round(2)}%')\nprint(f'Testing Score  - {(model.score(X_test, y_test) * 100).round(2)}%')","ba25b32b":"n_estimators=[int(x) for x in np.linspace(start=100,stop=1200,num=3)]\n\nmax_features=['auto','sqrt']\n\nmax_depth=[int(x) for x in np.linspace(5,30,num=6)]\n\nmin_samples_split=[5,10,15,20,25,30]\n\nrandom_grid={\n    'n_estimators':n_estimators,\n    'max_features':max_features,\n    'max_depth':max_depth,\n    'min_samples_split':min_samples_split\n}","baf6e746":"model = RandomizedSearchCV(estimator=RFR, param_distributions=random_grid, cv=5, verbose=2, n_jobs=-1)\n\nprint('Model Training...\\n')\nmodel.fit(X_train, y_train)\nprint('Training Completed !!!')","3a1a4f58":"print(f'Training Score - {(model.score(X_train, y_train) * 100).round(2)}%')\nprint(f'Testing Score  - {(model.score(X_test, y_test) * 100).round(2)}%')","0adf891d":"pickle.dump(model, open('model.pkl', 'wb'))","eb9468e8":"#### Clearly, Jet Airway has the maximum price range.","daa4ec87":"#### Clearly, the outliers have been removed but, the distribution is still not looking good. Therefore let's see what happens if we perform Log Transformation","df0c237c":"#### Now, it is looking much better","65183a41":"## Seperating Dependent & Independent Variable","dfe0346f":"## Final Result","7b2808d8":"## Exploratory Data Analysis | Feature Engineering","7c94a577":"## Loading Dataset","5079c6cd":"## Model Training\n* <h4> Linear Regression        <\/h4>\n* <h4> KNeignbors Regressor     <\/h4>\n* <h4> Decision Tree Regressor  <\/h4>\n* <h4> Random Forest Regressor  <\/h4>","6c5c2bc6":"### Working with Airlines columns","e38508cd":"### Cleaning the 'Route' column","37ad7dce":"## Helper Functions","fffb65a4":"### Working with Categorical Columns","14e4347b":"#### Clearly, this column mostly contains No info, so it is of no use.","8571cba5":"## Saving Model","8d000c8e":"## Merging the cleaned Dataset","141b5dd9":"![](https:\/\/media.cntraveler.com\/photos\/607f3c487774091e06dd5d21\/16:9\/w_2560%2Cc_limit\/Breeze%2520Airways_166655077_303814634409055_8038496796049085212_n.jpeg)","3e62cd58":"## Dropping unnesessary columns","e3d0e58f":"### Cleaning the 'Duration' column","77fc3a73":"### Working with Total_Stops","640b89fa":"#### As the Nan values are less, so dropping it.","1ac885db":"#### Clearly, Random Forest is giving best Test Score. Let's select it's parameters using Randomized Search CV.","a30ebf21":"## Importing Required Libraries","f1ae774b":"### Working with Datetime columns\n#### As the columns are of object type, converting them to datetime.","1087ad0d":"## Outliers Detection","22f392c4":"## Splitting Train & Test Dataset","d0d15e2b":"## Encoding categorical data"}}