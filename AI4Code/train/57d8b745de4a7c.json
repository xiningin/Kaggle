{"cell_type":{"7dd10056":"code","aab979f1":"code","05be010d":"code","2225d74f":"code","f803eff1":"code","e0dde53b":"code","22d70597":"code","e542ee09":"code","33667b5b":"code","40b35aef":"code","37ea925e":"markdown"},"source":{"7dd10056":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aab979f1":"train_data_path = \"..\/input\/train.csv\"\ntest_data_path = \"..\/input\/test.csv\"\n\ntrain_data = pd.read_csv(train_data_path)\ntest_data = pd.read_csv(test_data_path)","05be010d":"print(train_data.head(0))\nprint(train_data.describe())\n\n# Cleaning data\n# train_data = train_data.dropna()\ntrain_data = train_data.fillna(train_data.mode())\nprint(train_data.isna().sum())\n\ntrain_data_modified = train_data.replace(\"male\", 1)\ntrain_data_modified = train_data_modified.replace(\"female\", 0)\nlabel = train_data[\"Survived\"]","2225d74f":"# Chosen column as features for the model\nfeatures_chosen = [\"Pclass\",\"Parch\",\"Sex\",\"SibSp\",\"Fare\"]\n\nX = train_data_modified[features_chosen]\nX = X.astype('float64')\nlabel = label.astype('float64')\ntrain_data_modified.head(3)\n","f803eff1":"# Model 1 linear regression model.\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score\nlinear_model = LinearRegression()\nlinear_model = linear_model.fit(X,label)\n\n# Model 2 LogisticRegression model\nfrom sklearn.linear_model import LogisticRegression\nlogisticRegression_model = LogisticRegression()\nlogisticRegression_model = logisticRegression_model.fit(X,label)\n\n# Model 2 RandomForest model\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nRandomForest_model = RandomForestClassifier(n_estimators=700)\nRandomForest_model = RandomForest_model.fit(X,label)","e0dde53b":"def get_predictions(input_data, label, model):\n    predictions = model.predict(input_data)\n    for i in range(0, len(predictions)):\n        if predictions[i] > 0.5:\n            predictions[i] = 1\n        else:\n            predictions[i] = 0\n    accuracy_rate = accuracy_score(label, predictions)\n    print(accuracy_rate)\n    return predictions","22d70597":"predictions1 = get_predictions(X, label, linear_model)\npredictions2 = get_predictions(X, label, logisticRegression_model)\npredictions3 = get_predictions(X, label, RandomForest_model)","e542ee09":"## Test data cleansing\ntest_data_modified = test_data[features_chosen]\n\n# Get all the required label\nlabel_data_path = \"..\/input\/gender_submission.csv\"\nlabel_data = pd.read_csv(label_data_path)\n\n#test_data_modified = test_data_modified.astype('float64')\n\ntest_data_modified.isnull().sum()\nnull_data = test_data_modified[test_data_modified.isnull().any(axis=1)]\n\nlabel_data = label_data.drop('PassengerId', axis=1)\n\ndata = pd.concat([test_data_modified, label_data], axis=1)\n#data = data.dropna()\ndata = data.fillna(data.median())\n\ndata = data.replace(\"male\", 1)\ndata = data.replace(\"female\", 0)\n\nlabel_data = data['Survived']\ntest_data_modified = data[features_chosen].astype('float64')","33667b5b":"result_1 = get_predictions(test_data_modified, label_data, linear_model)\nresult_2 = get_predictions(test_data_modified, label_data, logisticRegression_model)\nresult_3 = get_predictions(test_data_modified, label_data, RandomForest_model)","40b35aef":"label_data = pd.read_csv(label_data_path)\nlabel_data['Survived'] = result_2.astype('int64')\n\nlabel_data.to_csv('submission.csv', index=False)","37ea925e":"As you can see result 1 give the best result which is the linear_model"}}