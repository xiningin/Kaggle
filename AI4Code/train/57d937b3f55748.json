{"cell_type":{"1856f08c":"code","3cc5f0b2":"code","1ea67d78":"code","a745dd88":"code","44e2c72d":"code","1a75932b":"code","89c13aa5":"code","aaa884f0":"code","ef89d655":"code","079269a8":"code","211d054f":"code","330edd36":"code","c0275d94":"code","af47bae3":"code","09c59011":"code","adea71e8":"code","0b7c2b70":"code","d215a0aa":"code","afcd8edd":"code","0fdc2084":"code","d88e01f8":"code","9ab23248":"code","c84ed4d0":"code","5a4120f0":"code","b3c91ebf":"code","52fe1bf7":"code","47d4a775":"code","e3698fa0":"code","8b0a3813":"code","e2b79153":"code","3e8a5757":"code","b076cf18":"code","f0bfb693":"code","8c833347":"code","e3062c96":"code","3167d165":"code","93e7252b":"code","c15c38e6":"code","63c44b6a":"code","5b397c76":"code","4ec1ebb5":"code","46089c28":"markdown","8996e4dc":"markdown","145c3cb7":"markdown","b48a62c9":"markdown","4f9437c5":"markdown","18b5344c":"markdown","5133748c":"markdown","267be7ce":"markdown","22e0fbbc":"markdown","bea4db8b":"markdown","3f2c61a1":"markdown","75e81484":"markdown","68826933":"markdown"},"source":{"1856f08c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cc5f0b2":"# import required libaries\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport calendar\nimport re\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n#data visualization\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n%matplotlib inline\n\n#setting styles\nsns.set(rc = {'figure.figsize':(10,6)})\nsns.set_style('whitegrid')\ntitle_font = {'family': 'Arial',\n        'color':  'darkred',\n        'weight': 'normal',\n        'size': 14,}\nlabel_font = {'family': 'Arial',\n              'color' : 'black',\n              'size': 12}","1ea67d78":"#load data\ndf = pd.read_csv('..\/input\/sdfadgdadfda\/medium_data.csv')","a745dd88":"df.head()","44e2c72d":"df.shape, df.dtypes, df.isna().sum()","1a75932b":"#drop 'id', 'url' and 'subtitle' columns\ndrop_cols = ['id', 'url', 'subtitle']\ndf.drop(columns = drop_cols, inplace = True)","89c13aa5":"df.isna().sum()","aaa884f0":"#drop duplicates\ndf.drop_duplicates(subset='title', inplace=True)","ef89d655":"#change datatype for 'date' column\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = pd.DatetimeIndex(df['date']).year\ndf['month'] = pd.DatetimeIndex(df['date']).month\ndf['day'] = pd.DatetimeIndex(df['date']).day","079269a8":"df.sort_values(by= 'month', ascending = True).reset_index()","211d054f":"#convert day to day group \ndef convert_daygp(day):\n    if day in range(1,11):\n        return '1-10 days'\n    elif day in range(11,21):\n        return '11-20 days'\n    elif day in range(21,32):\n        return '21-31 days'","330edd36":"df['daygp'] = df['day'].apply(convert_daygp)","c0275d94":"df_month = df.groupby('month')['publication'].count().reset_index()\ndf_month['month'] = df_month['month'].apply(lambda x: calendar.month_abbr[x])","af47bae3":"fig = px.line(data_frame= df_month, x= 'month', y = 'publication', title= 'Monthly publication rate')\nfig.show()","09c59011":"#create datafrome to plot\ndf_daygp = df.groupby(['month', 'daygp'])['title'].count().reset_index()\ndf_daygp['month'] = df_daygp['month'].apply(lambda x: calendar.month_abbr[x])\ndf_daygp.rename(columns={'title':'count'}, inplace=True)\ndf_daygp = df_daygp[['month', 'daygp', 'count']]","adea71e8":"df_daygp","0b7c2b70":"fig = px.bar(data_frame= df_daygp, x='month',y = 'count',color = 'daygp',  title= 'Monthly Publication by day group')\nfig.show()","d215a0aa":"df['publication'].value_counts()","afcd8edd":"fig = px.histogram(df, x='publication', color = 'publication', title= 'Top Publication in 2020' )\nfig.show()","0fdc2084":"# the startup publication\ndf_stu = df[df['publication']=='The Startup'].groupby('month')['publication'].count().reset_index()\ndf_stu.rename(columns={'publication': 'The Startup'}, inplace= True)\n\n# the data driven investor publication\ndf_ddi = df[df['publication']=='Data Driven Investor'].groupby('month')['publication'].count().reset_index()\ndf_ddi.rename(columns={'publication': 'Data Driven Investor'}, inplace= True)\n\n# the UX Collective publication\ndf_uxc = df[df['publication']=='UX Collective'].groupby('month')['publication'].count().reset_index()\ndf_uxc.rename(columns={'publication': 'UX Collective'}, inplace= True)\n\n# the better marketing publication\ndf_marketing = df[df['publication']=='Better Marketing'].groupby('month')['publication'].count().reset_index()\ndf_marketing.rename(columns={'publication': 'Better Marketing'}, inplace= True)\n\n# the better humans publication\ndf_humans = df[df['publication']=='Better Humans'].groupby('month')['publication'].count().reset_index()\ndf_humans.rename(columns={'publication': 'Better Humans'}, inplace= True)","d88e01f8":"df_publication = pd.concat([df_stu, df_ddi['Data Driven Investor'], df_uxc['UX Collective'], df_marketing['Better Marketing'], df_humans['Better Humans']], axis = 1)","9ab23248":"df_publication['month'] = df_publication['month'].apply(lambda x: calendar.month_abbr[x])","c84ed4d0":"df_publication.columns","5a4120f0":"fig = px.line(df_publication, x='month', y=df_publication.columns[1:], title= 'Published rate of different publication on each month')\nfig.show()","b3c91ebf":"df_claps = df.sort_values(by = 'claps', ascending = False)[:10].reset_index()","52fe1bf7":"df_claps","47d4a775":"df_claps = df_claps.groupby('publication').count().reset_index()","e3698fa0":"df_claps","8b0a3813":"df_claps = df_claps[['publication', 'title']]\ndf_claps.rename(columns={'title':'count'},inplace=True)","e2b79153":"df_claps","3e8a5757":"fig = px.bar(df_claps, x = 'publication',y= 'count', color = 'publication', title= 'Count on each publication for top 10 claps' )\nfig.show()","b076cf18":"#clean text\nremove_chars = ['<strong class=\"markup--strong markup--h3-strong\">', '<\/strong>', '\\xa0', '\\u200a\u2014\\u200a']\ndef clean_title(title):\n    for char in remove_chars:\n        title = title.replace(char, '')\n    return title\n    ","f0bfb693":"stopwords = set(STOPWORDS)","8c833347":"df['title'] = df['title'].apply(clean_title)","e3062c96":"text = [' '\" \".join(word for word in df['title'].astype(str))]","3167d165":"wordcloud = WordCloud(max_font_size=None, stopwords=stopwords,  background_color='white',width=1200, height=800).generate(str(text))\nplt.figure(figsize=(10, 6))\nplt.imshow(wordcloud)\nplt.title('Most frequent words in 2020 published articles', fontdict= title_font)\nplt.axis(\"off\")\nplt.show()","93e7252b":"#relation between reading_time and response in both year\nfig = px.scatter(data_frame= df, x= 'reading_time', y='responses', title= 'Relation between reading_time and claps')\nfig.show()","c15c38e6":"#relation between reading_time and claps in both year\nfig = px.scatter(data_frame= df, x= 'reading_time', y='claps', title= 'Relation between reading_time and claps')\nfig.show()","63c44b6a":"#relation between responses and claps in both year\nfig = px.scatter(data_frame= df, x= 'responses', y='claps', title= 'Relation between claps and responses')\nfig.show()","5b397c76":"# relation between responses and claps\nsns.lmplot(x = 'responses', y= 'claps', data = df, height= 6, markers= 'o', aspect= 1.4)\nplt.show()","4ec1ebb5":"#average reading time of top 10 articles\ndf_avg= df.sort_values(by = 'claps', ascending = False)[:10]\navg_rtime = df_avg['reading_time'].mean()\navg_rtime","46089c28":"# Monthly publication by day group","8996e4dc":"Articles that long for 4-5 minuntes read gets highest responses.","145c3cb7":"Obviously, May and Oct are top published month for 2020. ","b48a62c9":"# Publications of highest claps articles","4f9437c5":"There is a slightly increased published rate in second day group in Feb and Oct. There is absolutely same published rate for the rest months.","18b5344c":"Although '**Better Marketing**' is at no.4 for the publication rate, it appears **6 times** on the top 10 claps board.\n","5133748c":"Also, 4-5 mins long articles get more claps count. ","267be7ce":"# Published rate of different publication on each month","22e0fbbc":"# Data Preprocessing","bea4db8b":"***Using, Make, Way, design*** are most frequent words according to the data.","3f2c61a1":"# Month wise publication","75e81484":"#  Wordcloud for the titles of the whole year","68826933":"# Relation between reading_time, claps and responses"}}