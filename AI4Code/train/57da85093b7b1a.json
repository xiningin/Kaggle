{"cell_type":{"b8a69011":"code","f9df5f77":"code","9b18bcd0":"code","7fce930d":"code","37484d1d":"code","30c268ce":"code","b7660900":"code","53e59836":"code","4cebbf5c":"code","f246639c":"code","b24e197e":"code","76c29e85":"code","162138e2":"code","024eadfa":"code","8c36ca20":"code","33f02ae8":"code","3c1f081c":"code","f9942640":"code","f7c453db":"code","3509cfa0":"code","336d43d1":"code","0736cd4b":"code","d3ebc437":"code","c6996d65":"code","41abe266":"code","fb61c4ce":"code","c3414f15":"code","09c6894b":"code","c47bc48e":"markdown"},"source":{"b8a69011":"import numpy\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas import read_csv\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error","f9df5f77":"#SARIMA model.\ndf = read_csv('..\/input\/personal\/sales.csv', usecols=[0,1])\ndf.tail()","9b18bcd0":"# df.drop([36,37,38,39,40,41,42,43,44,45,46,47],axis=0,inplace=True)\ndf.drop([58,59],axis=0,inplace=True)\ndf","7fce930d":"# list(df['Year'].values)[-10:]","37484d1d":"# updated_year =[i.replace('2021', '2020') for i in list(df['Year'].values)[-10:]]\n# updated_year","30c268ce":"# for i in range(len(updated_year)):\n#     df.Year[i+48] = updated_year[i]","b7660900":"df","53e59836":"# Convert Month into Datetime\ndf['Year']=pd.to_datetime(df['Year'])\ndf.head()","4cebbf5c":"df.set_index('Year',inplace=True)\ndf.head()","f246639c":"df.describe()","b24e197e":"df.plot()","76c29e85":"from statsmodels.tsa.stattools import adfuller\n\n#HYPOTHESIS TEST:\n#Ho: It is non stationary\n#H1: It is stationary\n\ndef adfuller_test(sales):\n    \n    result=adfuller(sales)\n    \n    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n    \n    for value,label in zip(result,labels):\n        print(label+' : '+str(value) )\n    \n    if result[1] <= 0.05:\n        print(\"strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary\")\n    else:\n        print(\"weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary \")","162138e2":"adfuller_test(df['REFRIGERATOR'])","024eadfa":"# df['Seasonal First Difference']=df['REFRIGERATOR']-df['REFRIGERATOR'].shift(20)\n# df.head()","8c36ca20":"# # Again test dickey fuller test\n# adfuller_test(df['Seasonal First Difference'].dropna())","33f02ae8":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nfrom pandas.plotting import autocorrelation_plot\nautocorrelation_plot(df['REFRIGERATOR'])\nplt.show()","3c1f081c":"import statsmodels.api as sm\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(df['REFRIGERATOR'].iloc[13:],lags=21,ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(df['REFRIGERATOR'].iloc[13:],lags=21,ax=ax2)","f9942640":"model=sm.tsa.statespace.SARIMAX(df['REFRIGERATOR'],order=(1, 1, 1),seasonal_order=(1,1,1,12))\nresults=model.fit()","f7c453db":"df['forecast']=results.predict(start=39,end=57,dynamic=True)\ndf[['REFRIGERATOR','forecast']].plot(figsize=(12,8))","3509cfa0":"from pandas.tseries.offsets import DateOffset\n\n#Here USING FOR LOOP we are adding some additional data for prediction purpose:\n\nfuture_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,24)]","336d43d1":"#Convert that list into DATAFRAME:\n\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)","0736cd4b":"#CONCATE THE ORIGINAL AND THE NEWLY CREATED DATASET FOR VISUALIZATION PURPOSE:\nfuture_df=pd.concat([df,future_datest_df])","d3ebc437":"#PREDICT\nfuture_df['forecast'] = results.predict(start = 58, end = 70, dynamic= True)  \nfuture_df[['REFRIGERATOR', 'forecast']].plot(figsize=(12, 8))","c6996d65":"df = read_csv('..\/input\/personal\/sales.csv', usecols=[0,1])\ndf.tail()","41abe266":"df.drop([36,37,38,39,40,41,42,43,44,45,46,47],axis=0,inplace=True)\ndf.drop([58,59],axis=0,inplace=True)\ndf","fb61c4ce":"list(df['Year'].values)[-10:]","c3414f15":"updated_year =[i.replace('2021', '2020') for i in list(df['Year'].values)[-10:]]\nupdated_year","09c6894b":"for i in range(len(updated_year)):\n    df.Year[i+48] = updated_year[i]\ndf","c47bc48e":"## Without 2020"}}