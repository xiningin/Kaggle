{"cell_type":{"8b9f9377":"code","09390cea":"code","5a490ad8":"code","9b1239fd":"code","2f2fa11e":"code","4e46d774":"code","7bf2f488":"code","4465a57d":"code","730db59c":"code","a16f6ba5":"code","f222c7d4":"code","eca4e790":"code","dd03093a":"code","9c133f47":"code","8c726b2a":"code","6ffad398":"code","f16a552d":"code","6b04de98":"code","99675b5b":"code","ba24624a":"code","b20d8146":"code","ffd94511":"code","a61e0a86":"code","e9625cdb":"code","92165ddb":"code","6316e5f0":"code","435a4d73":"code","e11f4df9":"code","7fe84bc2":"code","8529dd79":"code","9292b187":"code","2c82927c":"code","a6615d92":"code","c10954e2":"code","a47f0bbb":"code","01b92026":"code","20ba25ae":"code","515d8b68":"code","7a91b524":"code","9dab24dd":"code","49b47a1f":"code","9f05fbbf":"code","90799bd5":"code","b4bb873f":"code","1eda5471":"code","b7c11167":"code","ccbd3f33":"code","c428c3a7":"code","5138cec0":"code","4ca337a8":"code","5246774d":"code","1d26c2fe":"code","cdafd2dd":"code","9d9abf26":"code","f53197b7":"code","1005b880":"code","f4318a49":"markdown","42063fb9":"markdown","0c0dde5f":"markdown","3813484f":"markdown","c6c71e9f":"markdown","7b0d0954":"markdown","9656a24d":"markdown","9c359204":"markdown","c99a10b8":"markdown","cd51f87f":"markdown","a4a83bee":"markdown","ef5fc00f":"markdown","0e79edb1":"markdown","7f9b1ada":"markdown","16755d19":"markdown","1b559118":"markdown","41d18986":"markdown","ed7247d9":"markdown","3deadae5":"markdown","4402f86f":"markdown","a77a4484":"markdown","25139bcb":"markdown","35a8b433":"markdown","86c78a9a":"markdown","052839fd":"markdown","e972f318":"markdown","3f26cc34":"markdown","ab321818":"markdown","de51fd59":"markdown","bb1906e4":"markdown","328b9a3d":"markdown","b88b5675":"markdown","c3f4f3e9":"markdown","210c090c":"markdown","eeb05306":"markdown"},"source":{"8b9f9377":"import numpy as np \nimport pandas as pd \n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nsns.set_style(\"whitegrid\")\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os \nprint(os.listdir(\"..\/input\"))","09390cea":"training = pd.read_csv(\"..\/input\/machine-learning-hebei-north-university-big-data\/train.csv\")\ntesting = pd.read_csv(\"..\/input\/machine-learning-hebei-north-university-big-data\/test.csv\")\ntraining.head()","5a490ad8":"#\u5c06Age,Fare\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\u6570\u636e\ntypes_train = training.dtypes\nnum_values = types_train[(types_train == float)]\n\nprint(\"These are the numerical features:\")\nprint(num_values)","9b1239fd":"training.describe()","2f2fa11e":"#\u67e5\u770b\u7f3a\u5931\u503c\u4e2a\u6570\ndef null_table(training, testing):\n    print(\"Training Data Frame\")\n    print(pd.isnull(training).sum()) \n    print(\" \")\n    print(\"Testing Data Frame\")\n    print(pd.isnull(testing).sum())\n\nnull_table(training, testing)","4e46d774":"#\u5220\u9664Cabin,Ticket\u7279\u5f81\ntraining.drop(labels = [\"Cabin\", \"Ticket\"], axis = 1, inplace = True)\ntesting.drop(labels = [\"Cabin\", \"Ticket\"], axis = 1, inplace = True)\n\nnull_table(training, testing)","7bf2f488":"copy = training.copy()\ncopy.dropna(inplace = True)\nsns.distplot(copy[\"Age\"])","4465a57d":"#the median will be an acceptable value to place in the NaN cells\ntraining[\"Age\"].fillna(training[\"Age\"].median(), inplace = True)\ntesting[\"Age\"].fillna(testing[\"Age\"].median(), inplace = True) \ntraining[\"Embarked\"].fillna(\"S\", inplace = True)\ntesting[\"Fare\"].fillna(testing[\"Fare\"].median(), inplace = True)\n\nnull_table(training, testing)","730db59c":"training.head()","a16f6ba5":"testing.head()","f222c7d4":"sns.barplot(x=\"Sex\", y=\"Survived\", data=training)\nplt.title(\"Distribution of Survival based on Gender\")\nplt.show()\n\ntotal_survived_females = training[training.Sex == \"female\"][\"Survived\"].sum()\ntotal_survived_males = training[training.Sex == \"male\"][\"Survived\"].sum()\n\nprint(\"Total people survived is: \" + str((total_survived_females + total_survived_males)))\nprint(\"Proportion of Females who survived:\") \nprint(total_survived_females\/(total_survived_females + total_survived_males))\nprint(\"Proportion of Males who survived:\")\nprint(total_survived_males\/(total_survived_females + total_survived_males))","eca4e790":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=training)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Distribution of Survival Based on Class\")\nplt.show()\n\ntotal_survived_one = training[training.Pclass == 1][\"Survived\"].sum()\ntotal_survived_two = training[training.Pclass == 2][\"Survived\"].sum()\ntotal_survived_three = training[training.Pclass == 3][\"Survived\"].sum()\ntotal_survived_class = total_survived_one + total_survived_two + total_survived_three\n\nprint(\"Total people survived is: \" + str(total_survived_class))\nprint(\"Proportion of Class 1 Passengers who survived:\") \nprint(total_survived_one\/total_survived_class)\nprint(\"Proportion of Class 2 Passengers who survived:\")\nprint(total_survived_two\/total_survived_class)\nprint(\"Proportion of Class 3 Passengers who survived:\")\nprint(total_survived_three\/total_survived_class)","dd03093a":"sns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=training)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival Rates Based on Gender and Class\")","9c133f47":"sns.barplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", data=training)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival Rates Based on Gender and Class\")","8c726b2a":"survived_ages = training[training.Survived == 1][\"Age\"]\nnot_survived_ages = training[training.Survived == 0][\"Age\"]\nplt.subplot(1, 2, 1)\nsns.distplot(survived_ages, kde=False)\nplt.axis([0, 100, 0, 100])\nplt.title(\"Survived\")\nplt.ylabel(\"Proportion\")\nplt.subplot(1, 2, 2)\nsns.distplot(not_survived_ages, kde=False)\nplt.axis([0, 100, 0, 100])\nplt.title(\"Didn't Survive\")\nplt.subplots_adjust(right=1.7)\nplt.show()","6ffad398":"sns.stripplot(x=\"Survived\", y=\"Age\", data=training, jitter=True)","f16a552d":"sns.pairplot(training)","6b04de98":"training.sample(5)","99675b5b":"testing.sample(5)","ba24624a":"set(training[\"Embarked\"])","b20d8146":"from sklearn.preprocessing import LabelEncoder\n\nle_sex = LabelEncoder()\nle_sex.fit(training[\"Sex\"])\n\nencoded_sex_training = le_sex.transform(training[\"Sex\"])\ntraining[\"Sex\"] = encoded_sex_training\nencoded_sex_testing = le_sex.transform(testing[\"Sex\"])\ntesting[\"Sex\"] = encoded_sex_testing\n\nle_embarked = LabelEncoder()\nle_embarked.fit(training[\"Embarked\"])\n\nencoded_embarked_training = le_embarked.transform(training[\"Embarked\"])\ntraining[\"Embarked\"] = encoded_embarked_training\nencoded_embarked_testing = le_embarked.transform(testing[\"Embarked\"])\ntesting[\"Embarked\"] = encoded_embarked_testing","ffd94511":"training.sample(5)","a61e0a86":"testing.sample(5)","e9625cdb":"training[\"FamSize\"] = training[\"SibSp\"] + training[\"Parch\"] + 1\ntesting[\"FamSize\"] = testing[\"SibSp\"] + testing[\"Parch\"] + 1","92165ddb":"training[\"IsAlone\"] = training.FamSize.apply(lambda x: 1 if x == 1 else 0)\ntesting[\"IsAlone\"] = testing.FamSize.apply(lambda x: 1 if x == 1 else 0)","6316e5f0":"for name in training[\"Name\"]:\n    training[\"Title\"] = training[\"Name\"].str.extract(\"([A-Za-z]+)\\.\",expand=True)\n    \nfor name in testing[\"Name\"]:\n    testing[\"Title\"] = testing[\"Name\"].str.extract(\"([A-Za-z]+)\\.\",expand=True)","435a4d73":"training.head()","e11f4df9":"titles = set(training[\"Title\"]) #making it a set gets rid of all duplicates\nprint(titles)","7fe84bc2":"title_list = list(training[\"Title\"])\nfrequency_titles = []\n\nfor i in titles:\n    frequency_titles.append(title_list.count(i))\n    \nprint(frequency_titles)","8529dd79":"titles = list(titles)\n\ntitle_dataframe = pd.DataFrame({\n    \"Titles\" : titles,\n    \"Frequency\" : frequency_titles\n})\n\nprint(title_dataframe)","9292b187":"title_replacements = {\"Mlle\": \"Other\", \"Major\": \"Other\", \"Col\": \"Other\", \"Sir\": \"Other\", \"Don\": \"Other\", \"Mme\": \"Other\",\n          \"Jonkheer\": \"Other\", \"Lady\": \"Other\", \"Capt\": \"Other\", \"Countess\": \"Other\", \"Ms\": \"Other\", \"Dona\": \"Other\"}\n\ntraining.replace({\"Title\": title_replacements}, inplace=True)\ntesting.replace({\"Title\": title_replacements}, inplace=True)\n\nle_title = LabelEncoder()\nle_title.fit(training[\"Title\"])\n\nencoded_title_training = le_title.transform(training[\"Title\"])\ntraining[\"Title\"] = encoded_title_training\nencoded_title_testing = le_title.transform(testing[\"Title\"])\ntesting[\"Title\"] = encoded_title_testing\n#Again, here's how to do it manually","2c82927c":"training.drop(\"Name\", axis = 1, inplace = True)\ntesting.drop(\"Name\", axis = 1, inplace = True)","a6615d92":"training.sample(5)","c10954e2":"testing.sample(5)","a47f0bbb":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\n#We need to reshape our data since the Scaler takes in arrays\nages_train = np.array(training[\"Age\"]).reshape(-1, 1)\nfares_train = np.array(training[\"Fare\"]).reshape(-1, 1)\nages_test = np.array(testing[\"Age\"]).reshape(-1, 1)\nfares_test = np.array(testing[\"Fare\"]).reshape(-1, 1)\n\ntraining[\"Age\"] = scaler.fit_transform(ages_train)\ntraining[\"Fare\"] = scaler.fit_transform(fares_train)\ntesting[\"Age\"] = scaler.fit_transform(ages_test)\ntesting[\"Fare\"] = scaler.fit_transform(fares_test)","01b92026":"training.head()","20ba25ae":"testing.head()","515d8b68":"from sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier","7a91b524":"from sklearn.metrics import make_scorer, accuracy_score ","9dab24dd":"from sklearn.model_selection import GridSearchCV","49b47a1f":"X_train = training.drop(labels=[\"PassengerId\", \"Survived\"], axis=1) #define training features set\ny_train = training[\"Survived\"] #define training label set\nX_test = testing.drop(\"PassengerId\", axis=1) #define testing features set\n#we don't have y_test, that is what we're trying to predict with our model","9f05fbbf":"X_train.head()","90799bd5":"from sklearn.model_selection import train_test_split #to create validation data set\n\nX_training, X_valid, y_training, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=0) #X_valid and y_valid are the validation sets","b4bb873f":"svc_clf = SVC() \n\nparameters_svc = {\"kernel\": [\"rbf\", \"linear\"], \"probability\": [True, False], \"verbose\": [True, False]}\n\ngrid_svc = GridSearchCV(svc_clf, parameters_svc, scoring=make_scorer(accuracy_score))\ngrid_svc.fit(X_training, y_training)\n\nsvc_clf = grid_svc.best_estimator_\n\nsvc_clf.fit(X_training, y_training)\npred_svc = svc_clf.predict(X_valid)\nacc_svc = accuracy_score(y_valid, pred_svc)","1eda5471":"print(\"The Score for SVC is: \" + str(acc_svc))","b7c11167":"linsvc_clf = LinearSVC()\n\nparameters_linsvc = {\"multi_class\": [\"ovr\", \"crammer_singer\"], \"fit_intercept\": [True, False], \"max_iter\": [100, 500, 1000, 1500]}\n\ngrid_linsvc = GridSearchCV(linsvc_clf, parameters_linsvc, scoring=make_scorer(accuracy_score))\ngrid_linsvc.fit(X_training, y_training)\n\nlinsvc_clf = grid_linsvc.best_estimator_\n\nlinsvc_clf.fit(X_training, y_training)\npred_linsvc = linsvc_clf.predict(X_valid)\nacc_linsvc = accuracy_score(y_valid, pred_linsvc)\n\nprint(\"The Score for LinearSVC is: \" + str(acc_linsvc))","ccbd3f33":"rf_clf = RandomForestClassifier()\nparameters_rf = {\"n_estimators\": [4, 5, 6, 7, 8, 9, 10, 15], \"criterion\": [\"gini\", \"entropy\"], \"max_features\": [\"auto\", \"sqrt\", \"log2\"], \n                 \"max_depth\": [2, 3, 5, 10], \"min_samples_split\": [2, 3, 5, 10]}\ngrid_rf = GridSearchCV(rf_clf, parameters_rf, scoring=make_scorer(accuracy_score))\ngrid_rf.fit(X_training, y_training)\n\nrf_clf = grid_rf.best_estimator_\n\nrf_clf.fit(X_training, y_training)\npred_rf = rf_clf.predict(X_valid)\nacc_rf = accuracy_score(y_valid, pred_rf)\n\nprint(\"The Score for Random Forest is: \" + str(acc_rf))","c428c3a7":"logreg_clf = LogisticRegression()\n\nparameters_logreg = {\"penalty\": [\"l2\"], \"fit_intercept\": [True, False], \"solver\": [\"newton-cg\", \"lbfgs\", \"liblinear\", \"sag\", \"saga\"],\n                     \"max_iter\": [50, 100, 200], \"warm_start\": [True, False]}\n\ngrid_logreg = GridSearchCV(logreg_clf, parameters_logreg, scoring=make_scorer(accuracy_score))\ngrid_logreg.fit(X_training, y_training)\n\nlogreg_clf = grid_logreg.best_estimator_\n\nlogreg_clf.fit(X_training, y_training)\npred_logreg = logreg_clf.predict(X_valid)\nacc_logreg = accuracy_score(y_valid, pred_logreg)\n\nprint(\"The Score for Logistic Regression is: \" + str(acc_logreg))","5138cec0":"knn_clf = KNeighborsClassifier()\n\nparameters_knn = {\"n_neighbors\": [3, 5, 10, 15], \"weights\": [\"uniform\", \"distance\"], \"algorithm\": [\"auto\", \"ball_tree\", \"kd_tree\"],\n                  \"leaf_size\": [20, 30, 50]}\n\ngrid_knn = GridSearchCV(knn_clf, parameters_knn, scoring=make_scorer(accuracy_score))\ngrid_knn.fit(X_training, y_training)\n\nknn_clf = grid_knn.best_estimator_\n\nknn_clf.fit(X_training, y_training)\npred_knn = knn_clf.predict(X_valid)\nacc_knn = accuracy_score(y_valid, pred_knn)\n\nprint(\"The Score for KNeighbors is: \" + str(acc_knn))","4ca337a8":"gnb_clf = GaussianNB()\n\nparameters_gnb = {}\n\ngrid_gnb = GridSearchCV(gnb_clf, parameters_gnb, scoring=make_scorer(accuracy_score))\ngrid_gnb.fit(X_training, y_training)\n\ngnb_clf = grid_gnb.best_estimator_\n\ngnb_clf.fit(X_training, y_training)\npred_gnb = gnb_clf.predict(X_valid)\nacc_gnb = accuracy_score(y_valid, pred_gnb)\n\nprint(\"The Score for Gaussian NB is: \" + str(acc_gnb))","5246774d":"dt_clf = DecisionTreeClassifier()\n\nparameters_dt = {\"criterion\": [\"gini\", \"entropy\"], \"splitter\": [\"best\", \"random\"], \"max_features\": [\"auto\", \"sqrt\", \"log2\"]}\n\ngrid_dt = GridSearchCV(dt_clf, parameters_dt, scoring=make_scorer(accuracy_score))\ngrid_dt.fit(X_training, y_training)\n\ndt_clf = grid_dt.best_estimator_\n\ndt_clf.fit(X_training, y_training)\npred_dt = dt_clf.predict(X_valid)\nacc_dt = accuracy_score(y_valid, pred_dt)\n\nprint(\"The Score for Decision Tree is: \" + str(acc_dt))","1d26c2fe":"from xgboost import XGBClassifier\n\nxg_clf = XGBClassifier()\n\nparameters_xg = {\"objective\" : [\"reg:linear\"], \"n_estimators\" : [5, 10, 15, 20]}\n\ngrid_xg = GridSearchCV(xg_clf, parameters_xg, scoring=make_scorer(accuracy_score))\ngrid_xg.fit(X_training, y_training)\n\nxg_clf = grid_xg.best_estimator_\n\nxg_clf.fit(X_training, y_training)\npred_xg = xg_clf.predict(X_valid)\nacc_xg = accuracy_score(y_valid, pred_xg)\n\nprint(\"The Score for XGBoost is: \" + str(acc_xg))","cdafd2dd":"model_performance = pd.DataFrame({\n    \"Model\": [\"SVC\", \"Linear SVC\", \"Random Forest\", \n              \"Logistic Regression\", \"K Nearest Neighbors\", \"Gaussian Naive Bayes\",  \n              \"Decision Tree\", \"XGBClassifier\"],\n    \"Accuracy\": [acc_svc, acc_linsvc, acc_rf, \n              acc_logreg, acc_knn, acc_gnb, acc_dt, acc_xg]\n})\n\nmodel_performance.sort_values(by=\"Accuracy\", ascending=False)","9d9abf26":"svc_clf.fit(X_train, y_train)","f53197b7":"submission_predictions = svc_clf.predict(X_test)","1005b880":"submission = pd.DataFrame({\n        \"PassengerId\": testing[\"PassengerId\"],\n        \"Survived\": submission_predictions\n    })\n\nsubmission.to_csv(\"titanic.csv\", index=False)\nprint(submission.shape)","f4318a49":"### \u6a21\u578b\u6d4b\u8bd5","42063fb9":"### \u4e3a\u4e86\u8bc4\u4f30\u6211\u4eec\u7684\u6a21\u578b\u6027\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528skLearning\u5ea6\u91cf\u6807\u51c6\u4e2d\u7684make_scorer\u548c\u51c6\u786e\u6027\u5f97\u5206\u51fd\u6570\u6765\u8bc4\u4f30\u6211\u4eec\u7684\u6a21\u578b\u6027\u80fd\u3002\n","0c0dde5f":"### \u6211\u4eec\u53ef\u4ee5\u5c06SibSp\u548cPACH\u7ec4\u5408\u6210\u4e00\u4e2a\u540d\u4e3a\u5bb6\u5ead\u5927\u5c0f\u7684\u7efc\u5408\u7279\u5f81\uff0c\u5b83\u8868\u793a\u6bcf\u4e2a\u6210\u5458\u7684\u5bb6\u5ead\u6210\u5458\u603b\u6570\u3002","3813484f":"### \u4ece\u6761\u72b6\u56fe\u7684\u805a\u7c7b\u548c\u76f4\u65b9\u56fe\u7684\u751f\u5b58\u5206\u5e03\u770b\uff0c\u4f3c\u4e4e\u5e74\u9f84\u8f83\u5c0f\u7684\u4e58\u5ba2\u6bd4\u5e74\u9f84\u8f83\u5927\u7684\u4e58\u5ba2\u66f4\u6709\u53ef\u80fd\u5b58\u6d3b","c6c71e9f":"### \u8fd9\u4e2aiSone\u529f\u80fd\u4e5f\u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u6211\u4eec\u6b63\u5728\u5904\u7406\u7684\u6570\u636e\uff0c\u544a\u8bc9\u6211\u4eec\u4e58\u5ba2\u662f\u5426\u5728\u8239\u4e0a\u3002","7b0d0954":"### \u6211\u4eec\u5c06\u6027\u522b\u6539\u4e3a\u53cc\u91cd\u6027\uff0c\u5973\u6027\u4e3a1\uff0c\u7537\u6027\u4e3a0\u3002\u6211\u4eec\u5bf9\u767b\u8239\u4e5f\u662f\u8fd9\u6837\u505a\u7684\u3002\u6211\u4eec\u5728\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u4e0a\u8fdb\u884c\u540c\u6837\u7684\u8fc7\u7a0b\uff0c\u4e3a\u673a\u5668\u5b66\u4e60\u51c6\u5907\u6211\u4eec\u7684\u6570\u636e\u3002","9656a24d":"## \u6a21\u578b\u62df\u5408\u3001\u4f18\u5316\u548c\u9884\u6d4b\n### \u65e2\u7136\u6211\u4eec\u7684\u6570\u636e\u5df2\u7ecf\u88ab\u6b63\u786e\u5730\u5904\u7406\u548c\u683c\u5f0f\u5316\u4e86\uff0c\u5e76\u4e14\u6211\u4eec\u7406\u89e3\u4e86\u6211\u4eec\u6b63\u5728\u5904\u7406\u7684\u4e00\u822c\u6570\u636e\u4ee5\u53ca\u8d8b\u52bf\u548c\u5173\u8054\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u6784\u5efa\u6211\u4eec\u7684\u6a21\u578b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u6ed1\u96ea\u677f\u4e2d\u5bfc\u5165\u4e0d\u540c\u7684\u5206\u7c7b\u5668\u3002\u6211\u4eec\u5c06\u5c1d\u8bd5\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\uff0c\u770b\u770b\u54ea\u4e00\u79cd\u9884\u6d4b\u7684\u51c6\u786e\u6027\u6700\u597d\u3002","9c359204":"### KNeighbors\u6a21\u578b","c99a10b8":"### \u4e0b\u9762\u662f\u4e00\u5bf9\u56fe\u7684\u6700\u7ec8\u7d2f\u79ef\u56fe\uff0c\u5b83\u663e\u793a\u4e86\u6240\u6709\u4e0d\u540c\u7279\u6027\u4e4b\u95f4\u7684\u5173\u7cfb\u3002","cd51f87f":"## \u52a0\u8f7d\u548c\u67e5\u770b\u6570\u636e\u96c6","a4a83bee":"## \u7279\u5f81\u91cd\u65b0\u6807\u5ea6\n### \u5982\u679c\u4f60\u770b\u770b\u4e0a\u9762\u7684\u5e74\u9f84\u548c\u7968\u4ef7\u7279\u5f81\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u503c\u4e0e\u5176\u4ed6\u7279\u5f81\u6709\u5f88\u5927\u7684\u504f\u5dee\u3002\u5f53\u6211\u4eec\u5efa\u6a21\u65f6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u4f7f\u8fd9\u4e9b\u7279\u6027\u770b\u8d77\u6765\u6bd4\u5176\u4ed6\u7279\u6027\u66f4\u91cd\u8981\u3002\u6269\u5927\u5b83\u4eec\u7684\u89c4\u6a21\u5c06\u662f\u6709\u76ca\u7684\uff0c\u56e0\u6b64\u5b83\u4eec\u66f4\u5177\u6709\u4ee3\u8868\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528MinMaxScaler\u6216StandardScaler\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u6211\u5c06\u4f7f\u7528StandardScaler\u6765\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002\u8fd9\u4e9b\u6b65\u9aa4\u5982\u4e0b\u6240\u793a","ef5fc00f":"### \u4f7f\u7528GridSearch\u4ea4\u53c9\u9a8c\u8bc1\u6765\u4e3a\u6211\u4eec\u9009\u62e9\u7684\u6a21\u578b\u5bfb\u627e\u6700\u4f18\u7684\u53c2\u6570\uff0c\u5e76\u7528\u6765\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b\u3002","0e79edb1":"### age","7f9b1ada":"## \u5bfc\u5165\u5305\n","16755d19":"## \u9a8c\u8bc1\u6570\u636e\u96c6\n### \u867d\u7136\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u96c6\uff0c\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u8fd9\u4e9b\u5206\u7c7b\u5668\u5bf9\u6570\u636e\u8fdb\u884c\u8fc7\u5ea6\u5339\u914d\u662f\u5f88\u5bb9\u6613\u7684\u3002\u56e0\u6b64\uff0c\u6709\u7b2c\u4e09\u4e2a\u6570\u636e\u96c6\u79f0\u4e3a\u9a8c\u8bc1\u6570\u636e\u96c6\u662f\u6709\u7528\u7684\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u7684\u6a21\u578b\u4e0d\u4e0e\u6570\u636e\u8fc7\u5ea6\u5339\u914d\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528skLearning\u7684TRANTEST_Split\u51fd\u6570\u6765\u751f\u6210\u7b2c\u4e09\u4e2a\u6570\u636e\u96c6\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9a8c\u8bc1\u6570\u636e\u96c6\u6765\u68c0\u9a8c\u6a21\u578b\u7684\u603b\u4f53\u7cbe\u5ea6\u3002","1b559118":"### LogisiticRegression\u6a21\u578b","41d18986":"## \u7ed8\u56fe\u548c\u53ef\u89c6\u5316\u6570\u636e","ed7247d9":"## \u521b\u9020\u7efc\u5408\u7279\u5f81\n### \u521b\u5efa\u6211\u4eec\u8ba4\u4e3a\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u9884\u6d4b\u76ee\u6807\u4ef7\u503c\u7684\u7efc\u5408\u7279\u5f81\u662f\u6709\u7528\u7684\u3002","3deadae5":"### \u63d0\u4ea4\u6a21\u578b","4402f86f":"## \u8bc4\u4ef7\u793a\u8303\u4e1a\u7ee9\n### \u5728\u505a\u4e86\u8fd9\u4e48\u591a\u7684\u6a21\u578b\u548c\u9884\u6d4b\u4e4b\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u8bc4\u4f30\u548c\u89c2\u5bdf\u54ea\u79cd\u6a21\u578b\u8868\u73b0\u6700\u597d\uff0c\u4ee5\u53ca\u5728\u6211\u4eec\u7684\u6d4b\u8bd5\u96c6\u4e0a\u4f7f\u7528\u54ea\u79cd\u6a21\u578b\u3002","a77a4484":"### \u6211\u4eec\u770b\u4e00\u770b\u5e74\u9f84\u5217\u7684\u5206\u5e03\uff0c\u770b\u770b\u5b83\u662f\u503e\u659c\u7684\u8fd8\u662f\u5bf9\u79f0\u7684\u3002\u8fd9\u5c06\u5e2e\u52a9\u6211\u4eec\u786e\u5b9a\u66ff\u6362NaN\u503c\u7684\u503c","25139bcb":"## \u5904\u7406NA\u503c\n","35a8b433":"### \u867d\u7136\u770b\u8d77\u6765\u4e0d\u50cf\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u4eceName\u5217\u4e2d\u63d0\u53d6\u4e00\u4e9b\u6709\u7528\u7684\u4fe1\u606f\u3002\u4e0d\u662f\u771f\u6b63\u7684\u540d\u5b57\u672c\u8eab\uff0c\u800c\u662f\u4ed6\u4eec\u7684\u540d\u5b57\u7684\u6807\u9898\uff0c\u5982\u5973\u58eb\u6216\u5148\u751f\uff0c\u8fd9\u4e5f\u53ef\u80fd\u63d0\u4f9b\u4e00\u4e2a\u63d0\u793a\uff0c\u4e58\u5ba2\u662f\u5426\u5e78\u5b58\u4e0b\u6765\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u8fd9\u4e2a\u6807\u9898\uff0c\u7136\u540e\u5bf9\u5b83\u8fdb\u884c\u7f16\u7801\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u201c\u6b32\u671b\u90fd\u5e02\u201d\u6240\u505a\u7684\u90a3\u6837\u3002","86c78a9a":"### class","052839fd":"### RandomForest\u6a21\u578b","e972f318":"### GaussianNB\u6a21\u578b","3f26cc34":"### \u4e0a\u8239\u6709\u4e09\u4e2a\u503c\uff1as\uff0cc\uff0cq\uff0c\u6211\u4eec\u5c06\u7528\u6570\u5b57\u6765\u8868\u793a\u8fd9\u4e9b\u503c\u3002","ab321818":"### \u8fd9\u4e00\u7279\u5f81\u7f29\u653e\u53ef\u80fd\u5141\u8bb8\u66f4\u9ad8\u7684\u7cbe\u5ea6\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u6a21\u578b\uff0c\u56e0\u4e3a\u51cf\u8f7b\u4e86\u91cd\u91cf\u7684\u5e45\u5ea6\uff01","de51fd59":"### \u6240\u6709\u7684\u7279\u5f81\u73b0\u5728\u90fd\u662f\u6570\u5b57\u5f62\u5f0f\u3002\u6211\u4eec\u7684\u6a21\u578b\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002\u7136\u800c\uff0c\u5728\u6211\u4eec\u8fd9\u6837\u505a\u4e4b\u524d\uff0c\u6211\u4eec\u5728\u67e5\u770b\u9884\u5904\u7406\u6570\u636e\u65f6\u8fd8\u9700\u8981\u6ce8\u610f\u5176\u4ed6\u4e00\u4e9b\u4e8b\u60c5\u3002\u7279\u522b\u662f\u5e74\u9f84\u548c\u7968\u4ef7\u7684\u7279\u5f81\u503c\u3002","bb1906e4":"### \u5728\u8bad\u7ec3\/\u6d4b\u8bd5\u96c6\u4e2d\u5b9a\u4e49\u7279\u5f81","328b9a3d":"### XGBoost\u6a21\u578b","b88b5675":"## \u7279\u5f81\u5de5\u7a0b\n### \u56e0\u4e3a\u201c\u6027\u522b\u201d\u548c\u201c\u5f00\u59cb\u201d\u5217\u4e2d\u7684\u503c\u662f\u7edd\u5bf9\u503c\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u8fd9\u4e9b\u5b57\u7b26\u4e32\u8868\u793a\u4e3a\u6570\u503c\uff0c\u4ee5\u4fbf\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u8fdb\u884c\u5206\u7c7b\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u70ed\u7f16\u7801\u6765\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b","c3f4f3e9":"### svc\u6a21\u578b","210c090c":"### DecisionTree\u6a21\u578b","eeb05306":"### LinearSCV\u6a21\u578b"}}