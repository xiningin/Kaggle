{"cell_type":{"c3bdd1db":"code","bca15383":"code","8ecd4de6":"code","4bd87ba8":"code","4beee20f":"markdown","38c0aadb":"markdown","079d369d":"markdown"},"source":{"c3bdd1db":"from IPython.display import clear_output\n!pip3 install rx \nclear_output()","bca15383":"from rx import of,operators as op","8ecd4de6":"DATA = of(1,5,8,10,2,9,12)","4bd87ba8":"DATA.pipe(\n   op.scan(lambda accValue, newValue: accValue + newValue, 0)\n).subscribe(lambda result: print(\"result = {0}\".format(result)))","4beee20f":"accumulator_func: This function is applied to all the values from the source observable.\n\nseed:(optional) The initial value to be used inside the accumular_func.","38c0aadb":"# scan(accumulator_func, seed=NotSet)","079d369d":"This operator will \n\n### apply an accumulator function \nex) (lambda accValue, newValue: accValue + newValue, 0)\n\n### to the values coming \n\n### from the source observable \n\nand return an observable with new values."}}