{"cell_type":{"8bd4b0f4":"code","f9e78f11":"code","5363c758":"code","4d7bfdbe":"code","fbc7f45c":"code","3a72769e":"code","8e3b501b":"code","37fb4cff":"code","62907ecd":"code","aeb7e475":"code","65f340ee":"code","ae4b3dd1":"code","9813c754":"code","ab06d04a":"code","aeb2d754":"code","60a4810b":"code","005504c1":"code","b58afc4c":"code","472a23fd":"code","2699e5e6":"code","bc801fcc":"code","4573e4de":"code","95b87d5f":"code","470e8d86":"code","772e56be":"code","24695ea6":"code","debf8290":"code","0696eea3":"code","3a9f2388":"code","596aa844":"code","92ee1012":"code","2e2c3cbe":"code","54349289":"code","f2824b45":"code","1604d8e8":"code","33e3280a":"code","779aafda":"code","d1ee5e2d":"code","da0f6304":"code","a9e7e395":"code","140a239c":"code","07cbad67":"code","05cadf69":"code","6f4a511f":"markdown","c081d0cf":"markdown","b56ad8ac":"markdown","23c2112a":"markdown","87825d03":"markdown","8a7841b3":"markdown","7b33215d":"markdown","94a766e7":"markdown","796d379d":"markdown","ca29cfb5":"markdown"},"source":{"8bd4b0f4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\n","f9e78f11":"housing = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nhousing.shape","5363c758":"price = housing.SalePrice\nhousing.drop([\"Id\",\"SalePrice\"],1,inplace = True)","4d7bfdbe":"test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest.shape","fbc7f45c":"test_id = test.Id\ntest.drop(\"Id\",1,inplace = True)","3a72769e":"housing.hist(bins=50, figsize=(24,21))\nplt.show()","8e3b501b":"# one of the way to handle null values\nfor col in housing.columns:\n    if housing[col].dtypes == 'O':        \n        housing[col].fillna(\"None\",inplace = True)\n        test[col].fillna   (\"None\",inplace = True) ","37fb4cff":"# another way to handle null values\nfrom sklearn.impute import SimpleImputer\n\ncat_vars = []\nnum_vars = []\n\nimputer = SimpleImputer(strategy=\"median\")\n\nfor col in housing.columns:\n    if housing[col].dtypes == 'O':        \n        cat_vars.append(col)\n    else:\n        num_vars.append(col)\n\nimputer.fit(housing[num_vars])\nhousing[num_vars] = imputer.transform(housing[num_vars])\n\nimputer.fit(test[num_vars])\ntest[num_vars] = imputer.transform(test[num_vars])","62907ecd":"# Removie the outliers\nfrom sklearn.ensemble import IsolationForest\n\nclf = IsolationForest(max_samples = 100, random_state = 42)\nclf.fit(housing[num_vars])\ny_noano = clf.predict(housing[num_vars])\ny_noano = pd.DataFrame(y_noano, columns = ['Top'])\ny_noano[y_noano['Top'] == 1].index.values\n\ntrain_numerical = housing[num_vars].iloc[y_noano[y_noano['Top'] == 1].index.values]\ntrain_numerical.reset_index(drop = True, inplace = True)\n\ntrain_categoric = housing[cat_vars].iloc[y_noano[y_noano['Top'] == 1].index.values]\ntrain_categoric.reset_index(drop = True, inplace = True)\n\ntrain = housing.iloc[y_noano[y_noano['Top'] == 1].index.values]\ntrain.reset_index(drop = True, inplace = True)","aeb7e475":"for col in cat_vars:\n    print(col,\":\")\n    print(housing[col].value_counts())\n    print(\"\\n\")","65f340ee":"ord_vars = [\"BsmtCond\",\"CentralAir\",\"PoolQC\",\"Fence\",\"PavedDrive\",\"SaleCondition\",\"GarageFinish\",\"MiscFeature\",\"GarageQual\",\"Electrical\",\"GarageCond\",\"KitchenQual\",\"FireplaceQu\",\"BsmtExposure\",\"GarageType\",\"BsmtFinType1\",\"Heating\",\"HeatingQC\",\"BsmtFinType2\",\"Condition1\",\"Condition2\",\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\",\"BsmtQual\"]\nnon_ord_vars = [\"MSZoning\",\"Alley\",\"LotShape\",\"LandContour\",\"SaleType\",\"LotConfig\",\"LandSlope\",\"Neighborhood\",\"Functional\"]\ndrop_vars = [\"Utilities\",\"Street\"]","ae4b3dd1":"from sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()","9813c754":"housing[ord_vars] = ordinal_encoder.fit_transform(housing[ord_vars])\ntest[ord_vars]    = ordinal_encoder.fit_transform(test[ord_vars])","ab06d04a":"for col in cat_vars:\n    housing[col] = housing[col].astype(\"category\")\n    housing[col] = housing[col].cat.codes + 1\n    test[col]    = test[col].astype(\"category\")\n    test[col]    = test[col].cat.codes + 1","aeb2d754":"housing.drop(drop_vars,1,inplace=True)\ntest.drop   (drop_vars,1,inplace=True)","60a4810b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(housing,price,test_size=0.2, random_state=42)","005504c1":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","b58afc4c":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X_train,y_train)","472a23fd":"scores = cross_val_score(lin_reg, X_train, y_train,scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-scores)\nlin_rmse_scores","2699e5e6":"display_scores(lin_rmse_scores)","bc801fcc":"y_pred = lin_reg.predict(X_test)\nlin_mse = mean_squared_error(y_test, y_pred)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","4573e4de":"from sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor()\ntree_reg.fit(X_train,y_train)","95b87d5f":"scores = cross_val_score(tree_reg, X_train, y_train,scoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-scores)\ntree_rmse_scores","470e8d86":"display_scores(tree_rmse_scores)","772e56be":"y_pred = tree_reg.predict(X_test)\nlin_mse = mean_squared_error(y_test, y_pred)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","24695ea6":"from sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor()\nforest_reg.fit(X_train,y_train)","debf8290":"scores = cross_val_score(forest_reg, X_train, y_train,scoring=\"neg_mean_squared_error\", cv=10)\nrf_rmse_scores = np.sqrt(-scores)\nrf_rmse_scores","0696eea3":"display_scores(rf_rmse_scores)","3a9f2388":"y_pred = forest_reg.predict(X_test)\nrf_mse = mean_squared_error(y_test, y_pred)\nrf_rmse = np.sqrt(rf_mse)\nrf_rmse","596aa844":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n ]\n\nforest_reg = RandomForestRegressor()\n\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,scoring='neg_mean_squared_error',return_train_score=True)","92ee1012":"grid_search.fit(X_train, y_train)\ngrid_search.best_params_","2e2c3cbe":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","54349289":"forest_reg_best = RandomForestRegressor(max_features = 8, n_estimators = 30)\nforest_reg_best.fit(X_train,y_train)","f2824b45":"y_pred = forest_reg_best.predict(X_test)\nrf_mse = mean_squared_error(y_test, y_pred)\nrf_rmse = np.sqrt(rf_mse)\nrf_rmse","1604d8e8":"# check feature importance\nfeature_importances = grid_search.best_estimator_.feature_importances_","33e3280a":"attributes = X_train.columns","779aafda":"sorted(zip(feature_importances, attributes), reverse=True)","d1ee5e2d":"drop_cols = ['LotConfig','Functional','PoolQC','Fence','SaleCondition','BsmtCond','EnclosedPorch','Electrical','LowQualFinSF','BsmtHalfBath','Alley','3SsnPorch','Condition2','MiscVal','Heating','MiscFeature']","da0f6304":"X_train.drop(drop_cols,1,inplace = True)\nX_test.drop(drop_cols,1,inplace = True)\ntest.drop(drop_cols,1,inplace=True)","a9e7e395":"param_grid = [\n {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n ]\n\nforest_reg = RandomForestRegressor()\n\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,scoring='neg_mean_squared_error',return_train_score=True)","140a239c":"grid_search.fit(X_train, y_train)\ngrid_search.best_params_","07cbad67":"forest_reg_best = RandomForestRegressor(max_features = 8, n_estimators = 30)\nforest_reg_best.fit(X_train,y_train)\ny_test_pred = forest_reg_best.predict(test)","05cadf69":"# lets prepare for the prediction submission\nsub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_test_pred\nsub.to_csv('submission.csv',index=False)","6f4a511f":"### Final Model","c081d0cf":"### Decision Tree Regressor","b56ad8ac":"# Handling null values","23c2112a":"### Linear Regression","87825d03":"### drop features with low importance","8a7841b3":"# Prediction on test data and submission to kaggle","7b33215d":"### Fine-Tune Random Forest Regressor Model","94a766e7":"### Model with best hyper parameters","796d379d":"### Random Forest Regressor","ca29cfb5":"# Training the Models"}}