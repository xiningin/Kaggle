{"cell_type":{"1ff0dfc7":"code","d6a06569":"code","e6e1b5d9":"code","96a3fb76":"code","f6968ff2":"code","3d260371":"code","5eea7a67":"code","2c7b8e8e":"code","a6373eeb":"code","57af8430":"code","2189a253":"code","680df786":"code","d8732b81":"code","030f681f":"code","155743be":"code","a2a98bb6":"markdown","271cd6b2":"markdown","ae3b0c6c":"markdown","619bbbe8":"markdown","7fc8ac4c":"markdown","0736e2fb":"markdown","24c8783b":"markdown","357f55ca":"markdown","6dd0fd00":"markdown"},"source":{"1ff0dfc7":"import glob\n\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport seaborn as sns\n\n%matplotlib inline  ","d6a06569":"!ls ..\/input\/g2net-gravitational-wave-detection","e6e1b5d9":"sub = pd.read_csv(\"..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv\")\ndf_training_labels = pd.read_csv(\"..\/input\/g2net-gravitational-wave-detection\/training_labels.csv\")","96a3fb76":"df_training_labels.head()","f6968ff2":"g = sns.countplot(df_training_labels[\"target\"])\ng.set_title(\"Count of each target\")","3d260371":"train_id = \"00000e74ad\"\nsignal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id[0]}\/{train_id[1]}\/{train_id[2]}\/{train_id}.npy\")","5eea7a67":"colors = [\"blue\", \"orange\", \"olive\"]\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id}', fontsize=16)","2c7b8e8e":"train_id_gallery = \"0920c46762\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","a6373eeb":"train_id_gallery = \"2dba065d99\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","57af8430":"train_id_gallery = \"5ba2069e22\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","2189a253":"train_id_gallery = \"ffffcf161a\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","680df786":"train_id_gallery = \"0015c1981e\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","d8732b81":"train_id_gallery = \"5b3e52c96c\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","030f681f":"train_id_gallery = \"b6ef59cd9a\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","155743be":"train_id_gallery = \"fffff2180b\"\nsignal_array = signal_array = np.load(f\"..\/input\/g2net-gravitational-wave-detection\/train\/{train_id_gallery[0]}\/{train_id_gallery[1]}\/{train_id_gallery[2]}\/{train_id_gallery}.npy\")\n\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, ax in zip(range(signal_array.shape[0]) , axs):\n    ax.plot(np.arange(0,signal_array.shape[1]), signal_array[i,:], color=colors[i])\n    ax.set_title(f\"Row {i}\")\n    ax.set_xlabel(\"Time (1\/2048 sec)\")\n_ = fig.suptitle(f'Signals of {train_id_gallery}', fontsize=16)","a2a98bb6":"# Visualizations","271cd6b2":"## Visualize signal\n\n### <span style=\"color: orange; \">\u2193\u2193\u2193 If you want to check other signals, you should change \"train_id\".<\/span>","ae3b0c6c":"# Preparation\n\n## Gorl of this competition\n\nIn this competition, you\u2019ll aim to detect GW signals from the mergers of binary black holes. Specifically, you'll build a model to analyze simulated GW times-series data from a network of Earth-based detectors.\n\n## Evaluation\n\n[Area under the ROC curve](https:\/\/en.wikipedia.org\/wiki\/Receiver_operating_characteristic)","619bbbe8":"- Each data sample (npy file) contains 3 time series for LIGO Hanford, LIGO Livingston, and Virgo.\n- Each spans are 2 sec and is sampled at 2,048 Hz.","7fc8ac4c":"## Load data","0736e2fb":"### target = 0","24c8783b":"## Gallery\n\n### target = 1","357f55ca":"Labels for signal presence and absence are provided equally.","6dd0fd00":"## train labels\n\nThere ara two columns:\n\n- id: Id of sample\n- target: present of signal(ttarget=1 is \"present\")"}}