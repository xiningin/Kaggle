{"cell_type":{"44318412":"code","5d359740":"code","d88da55d":"code","3010074f":"code","12e12f62":"code","0b083106":"code","f16c1f24":"code","4145898c":"code","e7167176":"code","4e18c84c":"code","b02a3436":"code","f2e15ed1":"code","a1f5c6e8":"code","227d3bf8":"code","5119adb3":"code","bf31de51":"code","e3fca700":"code","45ba43c7":"code","25e2a6d1":"code","2e7cbe3e":"code","dda58c4a":"code","a7bb3a4b":"markdown","e0a0a79b":"markdown"},"source":{"44318412":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# import sweetviz as sv\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d359740":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(train.info())","d88da55d":"print(np.shape(train))","3010074f":"X_train = train.iloc[:,1:]\ny_train = train.iloc[:,0]","12e12f62":"X_train = X_train\/255.0\ntest_data = test_data\/255.0\nX_train = X_train.values.reshape(-1,28,28,1)\ntest_data = test_data.values.reshape(-1,28,28,1)","0b083106":"X_train.shape,test_data.shape","f16c1f24":"import tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Lambda, Flatten, Dense\nfrom keras.utils.np_utils import to_categorical ","4145898c":"y_train = to_categorical(y_train,num_classes=10)","e7167176":"y_train","4e18c84c":"X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.1, random_state=42)","b02a3436":"from matplotlib import pyplot as plt\nplt.imshow(X_train[0][:,:,0], cmap='gray')","f2e15ed1":"model = Sequential()\nmodel.add(Conv2D(32, (5,5),padding='Same', activation='relu', kernel_initializer='glorot_uniform', input_shape=(28, 28, 1)))\nmodel.add(Conv2D(32, (5,5),padding='Same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n          \nmodel.add(Conv2D(64, (3,3), padding='Same', activation='relu'))\nmodel.add(Conv2D(64, (3,3), padding='Same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\n          \nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","a1f5c6e8":"model.summary()","227d3bf8":"from keras.optimizers import RMSprop\nopt = RMSprop(lr=0.001)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","5119adb3":"from keras.preprocessing.image import ImageDataGenerator,img_to_array,load_img\nimport itertools","bf31de51":"datagen = ImageDataGenerator(rotation_range=10, zoom_range = 0.1, width_shift_range=0.1, height_shift_range=0.1)\ndatagen.fit(X_train)\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=86),\n                              epochs = 30, validation_data = (X_test,y_test),verbose = 2,\n                              steps_per_epoch=X_train.shape[0]\/86)","e3fca700":"# fitted = model.fit(X_train,y_train,epochs=20,batch_size=32,validation_data=(X_test, y_test))\nfig, ax = plt.subplots()\n\n\nax.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax.legend(loc='best', shadow=True)","45ba43c7":"pred = model.predict(test_data)\npred","25e2a6d1":"prediction = np.argmax(pred, axis = 1)\nprediction","2e7cbe3e":"submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission['Label'] = prediction\nsubmission.head(10)","dda58c4a":"submission.to_csv(\"submission.csv\", index=False, header=True)","a7bb3a4b":"## MODEL:\n### CNN KERAS","e0a0a79b":"### DATA AUGMENTATION"}}