{"cell_type":{"1fd8c6eb":"code","ace3d138":"code","461c544d":"code","226a819b":"code","678499ed":"code","abb27bb5":"code","30c2acfe":"code","5c1ed5ca":"code","0833be7d":"code","96e2529c":"code","0288942e":"code","f37d6ef3":"code","e996c0b5":"code","bb68809e":"code","ac71dc11":"code","8f62ce6d":"code","6053a821":"code","c8abb91a":"code","1b28ffce":"markdown","ed013dfb":"markdown","71029c1f":"markdown","e971f012":"markdown","e62bcfe9":"markdown","8afcf454":"markdown"},"source":{"1fd8c6eb":"# Importing the usual libraries and filter warnings\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.pyplot import xticks\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ace3d138":"\n#train = pd.read_csv('train.csv')\n#test = pd.read_csv('test.csv')\n\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nprint(train.shape,test.shape)\n#In the beginning it's important to check the size of your train and test data which later helps in \n#deciding the sample size while testing your model on train data","461c544d":"train.head(5)","226a819b":"test.head(5)","678499ed":"# Lets see if we have a null value in the whole dataset\n#Usuall we will check isnull().sum() but here in our dataset number of columns are huge\nprint(np.unique([train.isnull().sum()]))\nprint(np.unique([test.isnull().sum()]))","abb27bb5":"y = train['label']\ndf_train = train.drop(columns=[\"label\"],axis=1)\nprint(y.shape,df_train.shape)","30c2acfe":"#Looks like the values are equally distributed in the dataset\ny.value_counts()","5c1ed5ca":"sns.countplot(y)","0833be7d":"df_train = df_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","96e2529c":"#Lets display first 50 images\nplt.figure(figsize=(15,8))\nfor i in range(50):\n    plt.subplot(5,10,i+1)\n    plt.imshow(df_train[i].reshape((28,28)),cmap='binary')\n    plt.axis(\"off\")\nplt.tight_layout()\nplt.show()\n","0288942e":"y = train['label']\ndf_train = train.drop(columns=[\"label\"],axis=1)\nprint(y.shape,df_train.shape)","f37d6ef3":"# Normalize the dataset\ndf_train = df_train \/ 255\ntest = test \/ 255","e996c0b5":"# Loading \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier","bb68809e":"seed = 2\ntest_size = 0.2\n\nX_train, X_test, y_train, y_test = train_test_split(df_train,y, test_size = test_size , random_state = seed)\nprint(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","ac71dc11":"#KNN\n# we use n_neighbours-10 since we know our target variables are in the range of [0-9]\nknn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\naccuracy = accuracy_score(y_test,y_pred)\nprint('Accuracy: %f' % accuracy)\n","8f62ce6d":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntest = test \/ 255","6053a821":"y_pred_test = knn.predict(test)","c8abb91a":"submission = pd.DataFrame({\"ImageId\": list(range(1, len(y_pred_test)+1)),\"Label\": y_pred_test})\n\nsubmission.to_csv(\"submission_digit1.csv\", index=False)","1b28ffce":"*Lets try to visualize how are these digits written*","ed013dfb":"# Visualization\n - Its quite evident that this is a multiclass classification problem and the target classes are almost uniformly distributed in the dataset having digits from 0-9\n - Its good that target variable is not skewed or non-uniformly distributed , like have just 100 samples of digit \"3\" in a dataset of 42000 rows","71029c1f":"Let me try to explain what above reshape means <br>\nWe have got ourselves a 28x28 pixel image whose pixel values are all stacked in a single row. <br>\n*In order to view these 784 column values as an image we convert it into a 28x28x1 matrix , here 1 stands for number of color channels, if we had a colored picture we would have used 3* <br>\nFinally the value (-1) , -1 in a reshape function means you donot have to worry about the dimension , the function will calculate it for you.\nIn our case -1 represents the no of rows of our dataset or no of images , if you replace -1 with 42000(no of rows of train dataset) then also it will work fine","e971f012":"<img src = \"https:\/\/images.unsplash.com\/photo-1474546652694-a33dd8161d66?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1062&q=80\" width=500 height=500\/>","e62bcfe9":"# Normalize the Dataset\n - The range of pixel values is from 0-255<br>\n - In order to normalize our data and bring it all to the range of [0-1] we divide the values in dataset by 255\n ","8afcf454":"# Digit Recognizer Lets Get Started without Deep Learning...\n\n - Although this dataset is best suited for beginners of Deep Learning ,<br>\n - However K-Nearest Neighbour algorithm gives an amazing prediction with 96% accuracy.<br>\n - Lets analyze this dataset from point of view of beginners who haven't worked on deep learning yet.."}}