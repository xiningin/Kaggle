{"cell_type":{"49b9bb69":"code","0eea7bca":"code","8de79632":"code","a2097520":"code","bdc41be0":"code","8f40fd33":"code","0a655e37":"code","b65fea11":"code","66037185":"code","fb0a1041":"code","13a445f7":"code","dd767ded":"code","cdc0c6a1":"code","79efb67d":"code","db307e92":"code","d3cd6505":"code","0f3c4ac2":"code","6aa3f2a4":"code","d16bbd43":"code","47e0d7b4":"code","534e35e5":"code","85735560":"code","7268c001":"code","f93dc977":"code","0d8850b2":"code","1b9f904c":"code","30677bec":"code","50439829":"code","0ef43067":"code","39086203":"code","a36a9992":"code","5b2d4038":"code","7362af88":"code","32da3f98":"code","e5bb51dd":"code","53b0871b":"code","ce2bb7fa":"code","3c159006":"code","9d3430ff":"code","9a050d76":"code","f5fe60fd":"code","761b65c2":"code","e992d01f":"code","c0a3afb5":"code","c37e82f5":"code","706ce408":"code","51cb30db":"code","2b81dc91":"code","b2ee5b9f":"code","7cc45ab4":"code","a1e39905":"code","8422213e":"code","e70f476e":"code","2bb46c4b":"code","384db1e1":"code","ba72c2a0":"markdown","85401a97":"markdown","c1724709":"markdown","ebcbe259":"markdown","66e0c605":"markdown","1dd47578":"markdown","264af161":"markdown","477bb747":"markdown","31ff7c3c":"markdown","ae82c80b":"markdown","9b758ea2":"markdown","b136f44b":"markdown","8ecb65a0":"markdown","2d385204":"markdown","4deb4b00":"markdown","46221b4c":"markdown","76e5f406":"markdown","0799c072":"markdown","221cd3c4":"markdown","709fbc87":"markdown","8535aa79":"markdown","e2188841":"markdown","64758f48":"markdown","0fe36f74":"markdown","4f2a36fc":"markdown","d6edaaa7":"markdown","8742faa7":"markdown","1579037b":"markdown","da095837":"markdown","48d36200":"markdown","4bfae7dc":"markdown","c26cb511":"markdown","1a2ba5b6":"markdown","fdda50b7":"markdown","8bd6c00e":"markdown","0cfe5676":"markdown","3a3b41a3":"markdown","b197852d":"markdown","a859d968":"markdown","e03a4b6f":"markdown","65dac000":"markdown","0ebf8527":"markdown","f270d321":"markdown","d852fec9":"markdown","758706ed":"markdown","e3dd18bd":"markdown","04aa27b6":"markdown","5d227f26":"markdown","1daba0d8":"markdown","8b95628c":"markdown","fb8df06a":"markdown","20195df4":"markdown","b183de10":"markdown","0ea5a7b8":"markdown","2b98fbd6":"markdown","1cd1217a":"markdown","06a14774":"markdown"},"source":{"49b9bb69":"## Import libraries:\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import cross_val_score,GridSearchCV,RepeatedStratifiedKFold\nfrom sklearn.neighbors import KNeighborsClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","0eea7bca":"## Load and show some train data:\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","8de79632":"## Thanks to Nadezda Demidova for having corrected these data\n## (https:\/\/www.kaggle.com\/demidova\/titanic-eda-tutorial-with-seaborn)\n\ntrain_data.loc[train_data['PassengerId'] == 631, 'Age'] = 48\n\ntrain_data.loc[train_data['PassengerId'] == 69, ['SibSp', 'Parch']] = [0,0]\ntest_data.loc[test_data['PassengerId'] == 1106, ['SibSp', 'Parch']] = [0,0]","a2097520":"## Data structure in train set:\ntrain_data.info()","bdc41be0":"## Data structure in test set:\ntest_data.info()","8f40fd33":"## In both sets drop column Cabin because there are less than 23% of the population\ntrain_data.drop([\"Cabin\"], axis=1, inplace=True)\ntest_data.drop([\"Cabin\"], axis=1, inplace=True)","0a655e37":"## In the train set impute Embarked with the most common value\ntrain_data['Embarked'].fillna(train_data.Embarked.mode()[0],inplace=True)","b65fea11":"## In test set impute Fare. I will use the mean value from Pclass\n\n## Let's see the Fare mean by Pclass\nFare_mean_by_Pclass = test_data.groupby(\"Pclass\").Fare.mean()\nsns.barplot(x=Fare_mean_by_Pclass.index, y=Fare_mean_by_Pclass)\nplt.ylabel(\"Fare mean\")\nplt.show()\nprint(Fare_mean_by_Pclass)","66037185":"## In test set impute missing Fare values with the mean value from Pclass\nfor pclass in Fare_mean_by_Pclass.index:\n    test_data[\"Fare\"][(test_data.Fare.isna()) &\\\n                       (test_data.Pclass == pclass)] = \\\n        Fare_mean_by_Pclass[pclass]","fb0a1041":"## In both sets impute Age\n\n## Names include a title. Let's extract the title from Name \n## This could help us to impute Age based on title's age mean\nfor dataset in [train_data, test_data]:\n    dataset['Title'] = dataset.Name.str.extract(r'([A-Za-z]+)\\.',expand=False)","13a445f7":"## Let's see the age distribution by Title\nAge_mean_by_title = pd.concat([train_data,test_data]).groupby(\"Title\").Age.mean()\n\nplt.figure(figsize=(16,5))\nsns.barplot(x=Age_mean_by_title.index, y=Age_mean_by_title)\nplt.ylabel(\"Age mean\")\nplt.show()","dd767ded":"## ## In both sets impute Age values with age mean by title\nfor dataset in [train_data, test_data]:\n    for title in Age_mean_by_title.index:\n        dataset[\"Age\"][(dataset.Age.isna()) &\\\n                       (dataset.Title == title)] = \\\n        Age_mean_by_title[title]  ","cdc0c6a1":"train_data.info()","79efb67d":"test_data.info()","db307e92":"sns.countplot(x=train_data.Survived)\nplt.show()\nprint(\"Survived: {0:d} ({1:.2%})\".\\\n      format(sum(train_data.Survived),\\\n             sum(train_data.Survived)\/train_data.shape[0]))\nprint(\"Not Survived: {0:d} ({1:.2%})\".\\\n      format(train_data.shape[0]-sum(train_data.Survived),\\\n             1-sum(train_data.Survived)\/train_data.shape[0]))","d3cd6505":"sns.barplot(x='Pclass', y='Survived', data=train_data)\nplt.show()","0f3c4ac2":"pd.crosstab(train_data['Sex'], train_data['Title'])","6aa3f2a4":"## Re-assign titles\nfor dataset in [train_data, test_data]:\n    dataset['Title'] = dataset['Title'].replace(['Mlle', 'Ms'], 'Miss')\n    dataset['Title'] = dataset['Title'].replace(['Mme',\"Countess\",\"Lady\",\"Dona\"], 'Mrs')    \n    dataset['Title'] = dataset['Title'].replace(['Capt',\"Col\",\"Don\",\"Jonkheer\",\\\n                                                 \"Major\", \"Rev\",\"Sir\"],\"Other\")\n    dataset.loc[((dataset.Title == \"Dr\") & (dataset.Sex==\"female\")), 'Title'] = \"Mrs\"\n    dataset.loc[((dataset.Title == \"Dr\") & (dataset.Sex==\"male\")), 'Title'] = \"Mr\"","d16bbd43":"plt.figure(figsize=(16,5))\nsns.barplot(x='Title', y='Survived', data=train_data)\nplt.show()","47e0d7b4":"sns.factorplot(x=\"Pclass\", y=\"Survived\", hue=\"Title\", data=train_data,\\\n              kind=\"bar\", size=4, aspect=3, palette=\"muted\")\nplt.show()","534e35e5":"## Create feature Female_Children_Classes_12 based on \n## Women and male children (Master) traveling in Pclass 1 or 2\nfor dataset in [train_data, test_data]:\n    dataset['Female_Children_Classes_12'] = 0\n    dataset.loc[((dataset.Sex==\"female\") | (dataset.Title==\"Master\")) & \\\n                (dataset.Pclass<=2), 'Female_Children_Classes_12'] = 1","85735560":"sns.barplot(x='Sex', y='Survived', data=train_data)\nplt.show()","7268c001":"## Create feature Age_Range based on the equal split of Age into five ranges\nall_ages = list(\\\n                pd.concat([train_data[\"Age\"],test_data[\"Age\"]]).\\\n                quantile([0.0,.2,.4,.6,.8,1]))\ntrain_data[\"Age_Range\"] = \\\npd.cut(train_data[\"Age\"],bins=all_ages, labels=[1,2,3,4,5],\\\n       include_lowest=True)\n\ntest_data[\"Age_Range\"] = \\\npd.cut(test_data[\"Age\"],bins=all_ages, labels=[1,2,3,4,5],\\\n       include_lowest=True)","f93dc977":"sns.barplot(x='Age_Range', y='Survived', data=train_data)\nplt.show()","0d8850b2":"sns.factorplot(x=\"Pclass\", y=\"Survived\", hue=\"Age_Range\", data=train_data,\\\n              kind=\"bar\", size=4, aspect=3, palette=\"muted\")\nplt.show()","1b9f904c":"## Create feature Child\nChild_limit_age = 16\nfor dataset in [train_data, test_data]:\n    dataset['Child'] = \\\n    dataset.Age.map(lambda x: 1 if x <=Child_limit_age else 0)","30677bec":"sns.barplot(x='Child', y='Survived', data=train_data)\nplt.show()","50439829":"sns.barplot(x='SibSp', y='Survived', data=train_data)\nplt.show()","0ef43067":"sns.barplot(x='Parch', y='Survived', data=train_data)\nplt.show()","39086203":"## Create features: Num_Family_Members and Alone\nfor dataset in [train_data, test_data]:\n    dataset[\"Num_Family_Members\"] = 1 + dataset.SibSp + dataset.Parch\n    dataset['Alone'] = dataset[\"Num_Family_Members\"].\\\n    map(lambda s: 1 if s == 1 else 0)","a36a9992":"sns.barplot(x='Num_Family_Members', y='Survived', data=train_data)\nplt.show()","5b2d4038":"## Count the number of pasengers with the same ticket id\n## If this number is greater than 1, then that passenger is not alone\nall_tickets = \\\npd.concat([train_data, test_data]).groupby('Ticket').PassengerId.count()\n\nfor dataset in [train_data, test_data]:\n    dataset[\"Num_Group_Members\"] = 1\n    for ticket in list(all_tickets.index):\n        num_group_members = all_tickets[ticket]\n        dataset.loc[dataset.Ticket == ticket, 'Num_Group_Members'] = \\\n        num_group_members\n        dataset.loc[dataset.Ticket == ticket, 'Group_Id'] = ticket\n        if num_group_members > 1:\n            dataset.loc[dataset.Ticket == ticket, 'Alone'] = 0","7362af88":"pd.concat([train_data,test_data])[[\"Name\",\"Ticket\",\"Num_Group_Members\",\\\n                                   \"Num_Family_Members\",\"SibSp\",\"Parch\"]].sort_values(by=\"Ticket\").head(10)","32da3f98":"sns.barplot(x='Num_Group_Members', y='Survived', data=train_data)\nplt.show()","e5bb51dd":"sns.factorplot(x=\"Num_Group_Members\", y=\"Survived\", hue=\"Sex\", data=train_data,\\\n              kind=\"bar\", size=4, aspect=3, palette=\"muted\")\nplt.show()","53b0871b":"## Create feature Survival_in_group based on \n## the number of survived passengers per group\ntrain_tickets_survivors = train_data.groupby('Group_Id').Survived.sum()\nfor dataset in [train_data, test_data]:\n    dataset[\"Survival_in_group\"] = 0       \n    for group in list(train_tickets_survivors.index):\n        dataset.loc[(dataset.Group_Id == group), 'Survival_in_group'] = train_tickets_survivors[group]","ce2bb7fa":"sns.barplot(x='Survival_in_group', y='Survived', data=train_data)\nplt.show()","3c159006":"sns.factorplot(x=\"Survival_in_group\", y=\"Survived\", hue=\"Sex\", data=train_data,\\\n              kind=\"bar\", size=4, aspect=3, palette=\"muted\")\nplt.show()","9d3430ff":"## Cross table Survival_in_Group x Survived for women passengers\npd.crosstab(train_data['Survival_in_group'][train_data.Sex==\"female\"],\\\n            train_data['Survived'][train_data.Sex==\"female\"])","9a050d76":"## Cross table Survival_in_Group x Survived for Master passengers\npd.crosstab(train_data['Survival_in_group'][train_data.Title==\"Master\"],\\\n            train_data['Survived'][train_data.Title==\"Master\"])","f5fe60fd":"## Create feature Master_And_Survival_Group\nfor dataset in [train_data, test_data]:\n    dataset['Master_And_Survival_Group'] = 0\n    dataset.loc[((dataset.Title==\"Master\")&(dataset.Survival_in_group>0)),'Master_And_Survival_Group'] = 1","761b65c2":"## Create feature Women_in_group based on \n## the number of female passengers per group\nwomen_in_group = pd.concat([train_data[(train_data.Sex==\"female\")],\\\n                            test_data[(test_data.Sex==\"female\")]]).\\\ngroupby('Group_Id').PassengerId.count()\n\nfor dataset in [train_data, test_data]:\n    dataset[\"Women_in_group\"] = 0\n    for group in list(women_in_group.index):\n        dataset.loc[(dataset.Group_Id == group), 'Women_in_group'] = women_in_group[group]","e992d01f":"## Create feature Men_in_group based on the number of \n## male passengers (title=Mr and age>25) with children per group\nParent_Age = 25\nmen_in_group = pd.concat([train_data[(train_data.Title==\"Mr\") & \\\n                                    (train_data.Parch>0) & \\\n                                    (train_data.Age>=Parent_Age)],\\\n                            test_data[(test_data.Title==\"Mr\") & \\\n                                    (test_data.Parch>0) & \\\n                                    (test_data.Age>=Parent_Age)]]).\\\ngroupby('Group_Id').PassengerId.count()\n\nfor dataset in [train_data, test_data]:\n    dataset[\"Men_in_group\"] = 0\n    for group in list(men_in_group.index):\n        dataset.loc[(dataset.Group_Id == group),'Men_in_group'] = men_in_group[group]","c0a3afb5":"## Create feature Alone_Mr for all male passengers \n## (title=Mr and Alone=1)\nfor dataset in [train_data, test_data]:\n    dataset[\"Alone_Mr\"] = 0\n    dataset.loc[(dataset.Title==\"Mr\")&(dataset.Alone==1),'Alone_Mr'] = 1","c37e82f5":"## Create feature Women_in_survival_group based on the number of\n## female passengers traveling in a group with at least one survivor\nwomen_in_survival_group = pd.concat([train_data[(train_data.Sex==\"female\") & \\\n                                      (train_data.Survival_in_group>=1)],\\\n                            test_data[(test_data.Sex==\"female\") & \\\n                                     (test_data.Survival_in_group>=1)]]).\\\ngroupby('Group_Id').PassengerId.count()\n\nfor dataset in [train_data, test_data]:\n    dataset[\"Women_in_survival_group\"] = 0\n    for group in list(women_in_survival_group.index):\n        dataset.loc[(dataset.Group_Id == group),'Women_in_survival_group'] = women_in_survival_group[group]","706ce408":"## Create feature Master_in_group based on the number of male passengers\n## (title Master) per group\nmaster_in_group = pd.concat([train_data[train_data.Title==\"Master\"],\\\n                             test_data[test_data.Title==\"Master\"]]).\\\ngroupby('Group_Id').PassengerId.count()\n\nfor dataset in [train_data, test_data]:\n    dataset[\"Master_in_group\"] = 0\n    for group in list(master_in_group.index):\n        dataset.loc[(dataset.Group_Id == group),'Master_in_group'] = master_in_group[group]","51cb30db":"## Cross table Women_in_group x Survived \n## for passengers that could be the father in a family\npd.crosstab(train_data['Women_in_group']\\\n            [(train_data.Title==\"Mr\")&(train_data.Age>=Parent_Age)],\\\n            train_data['Survived']\\\n            [(train_data.Title==\"Mr\")&(train_data.Age>=Parent_Age)])","2b81dc91":"## Cross table Women_in_survival_group x Survived \n## for male passengers title Mr in a group where a woman survived\npd.crosstab(train_data['Women_in_survival_group']\\\n            [(train_data.Title==\"Mr\")&(train_data.Survival_in_group>=1)],\\\n            train_data['Survived']\\\n            [(train_data.Title==\"Mr\")&(train_data.Survival_in_group>=1)])","b2ee5b9f":"## Create feature Fare_Range based on the equal split of Fare into five ranges\nall_fares = list(pd.concat([train_data[\"Fare\"],test_data[\"Fare\"]]).\\\n                 quantile([0.0,.2,.4,.6,.8,1]))\ntrain_data[\"Fare_Range\"] = pd.cut(\\\n                                  train_data[\"Fare\"],bins=all_fares,\\\n                                  labels=[1,2,3,4,5], include_lowest=True)\ntest_data[\"Fare_Range\"] = pd.cut(\\\n                                 test_data[\"Fare\"],bins=all_fares,\\\n                                 labels=[1,2,3,4,5], include_lowest=True)","7cc45ab4":"sns.barplot(x='Fare_Range', y='Survived', data=train_data)\nplt.show()","a1e39905":"sns.barplot(x='Embarked', y='Survived', data=train_data)\nplt.show()","8422213e":"## Create dummy variables from categorical features\nfor feature in [\"Title\",\"Sex\",\"Pclass\",\"Embarked\"]:\n    train_data = pd.concat([train_data,\\\n                             pd.get_dummies(train_data[feature], prefix=feature)],\\\n                            axis=1)\n    test_data = pd.concat([test_data,\\\n                             pd.get_dummies(test_data[feature], prefix=feature)],\\\n                            axis=1)","e70f476e":"## Drop unused columns\n\ny_train = train_data['Survived']\n\ntrain_data.drop([\"PassengerId\",\"Survived\",\"Name\",\"Sex\",\"Age\",\\\n                 \"Ticket\",\"Fare\",\"Pclass\",\"Embarked\",\"Title\",\\\n                 \"Group_Id\"],\\\n                axis=1, inplace=True)\n\nX_train = train_data.values","2bb46c4b":"random_state = 7\n\n## Define grid params\nparam_grid = {\"n_neighbors\":[3,4,5,6,7],\\\n             \"weights\":[\"uniform\",\"distance\"],\\\n             \"p\":[1,2]}\n\n## Define Kfold\nkfold = RepeatedStratifiedKFold(n_splits=5,n_repeats=3,random_state=random_state)\n\n## Define model\nmodel = KNeighborsClassifier()\n\n## Define and execute Grid Search\ngrid_search = GridSearchCV(model, param_grid=param_grid,\\\n                                       scoring=\"accuracy\",cv=kfold)\ngrid_result = grid_search.fit(X_train, y_train)\n\n## Get and print results\nbest_acc_score=grid_result.best_score_\nbest_params=grid_result.best_params_\nbest_model=grid_result.best_estimator_\n\nprint(\"Accuracy: {:6f}\".format(best_acc_score))\nprint(\"Params: {}\".format(best_params))","384db1e1":"## Fit best model on all training data set\nbest_model.fit(X_train, y_train)\n\n## Prepare test data set\ntest_PassengerId = test_data.PassengerId\ntest_data.drop([\"PassengerId\",\"Name\",\"Sex\",\"Age\",\\\n                 \"Ticket\",\"Fare\",\"Pclass\",\"Embarked\",\"Title\",\\\n                 \"Group_Id\"],axis=1, inplace=True)\nX_test = test_data.values\n\n## Predict using the best model from training\ny_pred = best_model.predict(X_test)\n\n## Save file to submit\ndf_output = pd.DataFrame({'PassengerId': test_PassengerId, \\\n                       'Survived': y_pred.astype(int)})\ndf_output.to_csv(\"Titanic_submission_jql_knn.csv\",index=False)","ba72c2a0":"...and the test data set is also complete","85401a97":"I will be looking at all features and how they are correlated to survival\n\n#### Pclass\nLet's start with the passenger class (Pclass)","c1724709":"- Passengers with the most expensive tickets were more likely to survive","ebcbe259":"### Modeling","66e0c605":"- It's kind of distributed, so doesn't seem very useful ","1dd47578":"- Like in the plot of Num_Family_Members, it looks like in 2-4-passenger groups, odds favor the group survivability\n\nLet's break it by gender","264af161":"- In groups where there was at least one survivor, but none of them was a woman (first row) there were 62 survived adult men, but men survived less when at least one woman survived","477bb747":"#### Clean data\n\nLet's impute missing values in train and test data sets","31ff7c3c":"#### Ticket\nThe ticket number itself is not important, but different people with the same ticket could represent a group (family members, a friend, or a nanny). Let's create a new feature to group passengers sharing the same ticket\n\nSince families could have been splitted between the train set and the test sets, let's consider all data from both sets. Also, I will update feature Alone by setting it to 0 (false) for those people traveling together on the same ticket id (even though they are not family)","ae82c80b":"- This feature is very strong in predicting survival likelihood in groups. In fact, it seems that almost all women survived when at least one passenger survived in a group.\n\nLet's see some numbers..","9b758ea2":"#### Name\nI don't think that the passenger's name was important, but maybe the title could have  influenced in some cases. Let's see the distribution of titles by sex","b136f44b":"- Somehow it seems that passengers embarked at Cherbourg, France were more lucky. Probably this could be correlated with passenger class","8ecb65a0":"#### Categorical features: Title, Sex, Pclass, and Embarked","2d385204":"#### Training the model\n\nI will use GridSearch and K-Nearest Neighbors to model data, evaluate it with a Repeated Kfold on training data set, and take the final model to predict on test data set","4deb4b00":"#### Fare\nBesides Age, Fare is another continuous feature. It could be correlated to the ticket class.  I will keep a five-range discrete feature instead of the continuous feature","46221b4c":"Now let's see the survival rate by gender","76e5f406":"- Some of them have the same family surname (like family on ticket 110413), but not all of them are relatives (like passengers on ticket 110152)\n- Some members of the same group are in the train set, and remaining members are in the test set\n\nIn the other hand, there could be passengers from the same family but having different tickets. For the moment, I will not go into those details","0799c072":"Now let's see some numbers to confirm the usability of these features","221cd3c4":"*Thank you !*","709fbc87":"#### Select features for training","8535aa79":"- \"Master\" is used primarly for male children\n- \"Miss\", \"Mlle\", and \"Mme\" are used for young women","e2188841":"My prior assumptions about survival preferences are:\n- Women and children first\n- Passengers in first class (upper class)","64758f48":"Let's look at Parents+Children (Parch)","0fe36f74":"- When there is at least one survivor in the group, all male child survived except one\n\nI will create a specific feature for this finding","4f2a36fc":"Let's see some passengers' names and the number of passengers on the same ticket ...","d6edaaa7":"- It seems that some titles were more lucky to survive. It confirms the preference for ladies (\"Mrs\", \"Miss\") and male children (\"Master\")\n\nLet's combine the last two plots","8742faa7":"- 891 records in train set \n- Missing values for features: Age, Cabin, Embarked","1579037b":"- 418 records in test set\n- Missing values for features: Age, Fare, Cabin","da095837":"- I am missing a strong feature that predicts survival in adult men\n- My hypothesis is that, in family groups, the father didn't survive, but the mother and children did\n- For adult men traveling alone, a few of them could have survived due to features like Passenger class\n\nTo follow up this hypothesis I will create new features","48d36200":"- 2-4-passenger families were more likely to survive\n- This confirms the low rate of survival for passengers traveling alone as seen in SibSp and Parch","4bfae7dc":"#### Age\nNow let's see the survival rate by age. Since it is a continuous number, I will break it into five discrete categories. I will consider the age of passengers in both train and test sets to make sure that passengers in the same age fit in the same ranges in both sets","c26cb511":"#### Load data","1a2ba5b6":"### Prepare data","fdda50b7":"- Now it looks that being a child is a little bit more relevant feature","8bd6c00e":"#### Sex","0cfe5676":"- Almost all passengers in first and second class and Titles:Mrs,Miss, and Master did survive\n- Around half of passengers in third class and title Mrs\/Miss survived, and Master was close to that\n\nI will create a specific feature for this finding","3a3b41a3":"#### Import Libraries","b197852d":"- It looks like parents traveling with children was decisive to favor the family chances to survive\n- In both plots SibSp and Parch, when number = 0 (traveling alone), it seems that odds are to not survive\n\nLet's create a feature to identify number of family passengers, and passengers traveling alone","a859d968":"Let's see the survival rate by number of group passengers","e03a4b6f":"- This feature looks good. When a passenger survives, then the rest of the group has big chances to survive too\n\nLet's break it by gender","65dac000":"- This confirms the general preference for ladies as seen above with the female titles\n- Sex is a categorical feature that, eventually, I will transform to binary variables","0ebf8527":"### Feature engineering\n\nWe have to identify which features could be relevant to discriminate the likelihood to survive\n\nFirst let's see the survival distribution in the train dataset","f270d321":"#### SibSp\nNow let's see the influence of the number of family members. I expect that traveling with family was more decisive than traveling alone","d852fec9":"- I think we can group \"Miss\", \"Mlle\" and \"Ms\" as \"Miss\"\n- Also \"Mme\", \"Countess\" and \"Lady\" into \"Mrs\" (there is a female Dr too)\n- And finally \"Capt\", \"Col\", \"Don\", \"Dr\", \"Jonkheer\",\"Major\", \"Rev\",\"Sir\" into \"Other\"\n- I will left \"Master\" and \"Mr\" as they are","758706ed":"#### Predict on test data set and submit","e3dd18bd":"- The mean fare of tickets in first class is considerably higher than the other classes","04aa27b6":"- When there is at least one survivor in the group, most women survived","5d227f26":"- This plot shows that first come the Pclass, and then comes the age\n\nI was expecting more survived children in general. I will create a specific feature for children","1daba0d8":"Let's start with Siblings+Spouse (SibSp)","8b95628c":"- First class passengers had more chances to survive (as expected)","fb8df06a":"Now let's see data structure again","20195df4":"- Most adult men did not survived when there were at least one woman in the group","b183de10":"#### Embarked\nThe port where passengers embarked doesn't sound like important. Let's see its distribution","0ea5a7b8":"- There are some visible missing values in feature Cabin\n- Names include a title (Mr, Mrs, Miss, etc.)\n\nLet's see the data structure in train and test data sets to identify all missing values","2b98fbd6":"- Women in 2-4-member groups survived. I guess that:\n    - either one group's member did not survive and the rest did,\n    - or most of the 2-4 member groups survived, and just a few groups did not survive (the entire group)\n\nI will get into more details about survival rate in groups.\nFirst let's identify groups where at least one member survived","1cd1217a":"- It looks like uniformly distributed, so not very powerful for predictions.  Maybe Pclass has more influence...","06a14774":"OK, now the train data set is complete"}}