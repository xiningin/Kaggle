{"cell_type":{"96c98e9e":"code","058f232f":"code","ed6e3425":"code","175d35ea":"code","02cf3888":"code","7c0a7828":"code","3dd3fbc4":"code","376d20ea":"code","f717afdd":"code","82385db4":"code","936e0e89":"code","17bf2488":"code","4f030f4f":"code","2c39b56c":"code","d809fee1":"code","526de7e3":"code","9ca38335":"code","6088befb":"code","ea22e57a":"code","40e64868":"code","9d4f7b29":"code","86e54563":"code","7e45d931":"code","d1f3a840":"code","72871568":"code","927a31bb":"code","736c23d8":"code","e85534fb":"code","e61c33b9":"code","c9590ba3":"code","47e983d0":"code","9430c66b":"code","49721b53":"code","f2f62218":"code","d64e3671":"code","9cbdc354":"code","28500d0f":"code","0f284e21":"code","efc23e16":"code","1af9efb8":"code","7f48fce5":"code","f8b8c53d":"code","4db247e2":"code","c290b8b7":"code","12e2007e":"markdown","84c06e0b":"markdown","2ea2af00":"markdown","65ca4fb5":"markdown","7b8cd6eb":"markdown","6407879d":"markdown","bab56227":"markdown","1481c436":"markdown","cbceb714":"markdown","0a146e62":"markdown","47a4ba1e":"markdown","0f94367b":"markdown","1a10f186":"markdown","efc0ed04":"markdown","8b9195e8":"markdown","a7fe5000":"markdown","d720355f":"markdown","0665eb65":"markdown","f390f95c":"markdown","287e9139":"markdown","a84bf61a":"markdown","ca757b9b":"markdown","9da9caa2":"markdown","5411c494":"markdown","6f31a747":"markdown","3b9c6e5c":"markdown","48c35795":"markdown","5e05bc26":"markdown","368f105c":"markdown","2a46ac23":"markdown","c650ef61":"markdown","134fe3be":"markdown","bda00c9a":"markdown","d84a183a":"markdown","f6ee0a9a":"markdown","6920761c":"markdown","3ed97ea5":"markdown","c17f7b19":"markdown","a11df0de":"markdown"},"source":{"96c98e9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfrom matplotlib.pyplot import plot\n\npd.set_option('display.max_rows', 50000)\npd.set_option('display.max_columns', 50000)\npd.set_option('display.width', 100000000)\n\n# Downloaded country income class from the below link:\n# https:\/\/datatopics.worldbank.org\/world-development-indicators\/the-world-by-income-and-region.html","058f232f":"# CSV files which are a part of kaggle's competition data\nt2_covid_death_first_df = pd.read_csv('\/kaggle\/input\/hackathon\/task_2-COVID-19-death_cases_per_country_after_frist_death-till_26_June.csv')\nbcg_atlas_df = pd.read_csv('\/kaggle\/input\/hackathon\/BCG_world_atlas_data-2020.csv')\nbcg_country_data_df = pd.read_csv('\/kaggle\/input\/hackathon\/BCG_country_data.csv')\nt2_bcg_atlas_july7_df = pd.read_csv('\/kaggle\/input\/hackathon\/task_2-BCG_world_atlas_data-bcg_strain-7July2020.csv')\nbcg_strain_hackathon_df = pd.read_csv('\/kaggle\/input\/hackathon\/BCG-Strain.csv')\n\n# CSV files collected from external source\n\n#Source: https:\/\/github.com\/owid\/covid-19-data\/tree\/master\/public\/data\nt2_owid_covid_data_df = pd.read_csv('..\/input\/bcgcovid19owidcovidaugust24\/owid-covid-data-august24.csv') \n\n#Source: https:\/\/datatopics.worldbank.org\/world-development-indicators\/the-world-by-income-and-region.html\ncountries_by_income_df = pd.read_excel('\/kaggle\/input\/countries-by-income-class\/CLASS.xls')\ncountries_by_income_df = countries_by_income_df[['Economy','Code','Income group']].copy()\n\n# Source: Nicole Ritza, Nigel Curtis ,Mapping the global use of different BCG vaccine strains\n#http:\/\/blisty.cz\/video\/TB.pdf\n# The below file was manually created using the above bcg map as reference\nbcg_strain_details_df = pd.read_csv('..\/input\/bcg-strain-details\/bcg_strain_details.csv')\n\n#Source: https:\/\/apps.who.int\/immunization_monitoring\/globalsummary\/timeseries\/tswucoveragebcg.html\nbcg_coverage_df = pd.read_excel('..\/input\/bcg-coverage-estimates\/coverage_estimates_series.xls', sheet_name='BCG')","ed6e3425":"bcg_strain_details_df","175d35ea":"bcg_strain_hackathon_df.head()","02cf3888":"bcg_coverage_df = pd.read_excel('..\/input\/bcg-coverage-estimates\/coverage_estimates_series.xls', sheet_name='BCG')\nbcg_coverage_years = list(bcg_coverage_df.columns)\n# coverage_years = [int(x) for x in coverage_years]\n# bcg_coverage_df.head()\n# bcg_coverage_df = ['location'] + bcg_coverage\n# print(bcg_coverage_years)\nfor c in ['Region','ISO_code','Vaccine']:\n    bcg_coverage_years.remove(c)\nbcg_coverage_df = bcg_coverage_df[bcg_coverage_years]\nbcg_coverage_df = bcg_coverage_df.set_index('Cname')\nbcg_coverage_df = bcg_coverage_df.T.reset_index()\nbcg_coverage_df.rename({'index':'Year'},axis=1,inplace=True)\nbcg_coverage_df['Year'] = bcg_coverage_df['Year'].astype('int')\nbcg_coverage_df.sort_values('Year',inplace=True)\nbcg_coverage_countries = list(bcg_coverage_df.columns)\nbcg_coverage_countries.remove('Year')\n# print(bcg_coverage_countries)\nbcg_coverage_df.head()","7c0a7828":"\nbcg_atlas_df = pd.read_csv('\/kaggle\/input\/hackathon\/BCG_world_atlas_data-2020.csv')\n\n#past_bcg_countries_list and no_bcg_countries_list are populated manually using the BCG Atlas graph attached above\npast_bcg_countries_list = ['Australia','New Zealand','Ecuador','Spain','France','United Kingdom','Germany','Slovakia','Austria','Czech Republic',\n                          'Switzerland','Sweden','Finland','Norway','Denmark','Israel']\nno_bcg_countries_list = ['United States', 'Canada','Italy','Netherlands','Belgium']\n\n\nall_countries = list(bcg_atlas_df['Contry Name (Mandatory field)'].str.strip().unique())\nall_countries = [x if x!='United States of America' else 'United States' for x in all_countries ]\nall_countries = [x if 'Germany' not in x else 'Germany' for x in all_countries ]\nall_countries = [x if 'Slovak' not in x else 'Slovakia' for x in all_countries ]\nwith_bcg_countries_list = list(set(all_countries) - set(past_bcg_countries_list) - set(no_bcg_countries_list))","3dd3fbc4":"bcg_atlas_df.head()","376d20ea":"t2_owid_covid_data_df = pd.read_csv('..\/input\/bcgcovid19owidcovidaugust24\/owid-covid-data-august24.csv')\n\ncountries_above_1000_cases = t2_owid_covid_data_df[t2_owid_covid_data_df['total_cases'] > 1000]['location'].unique().tolist()\n\nt2_owid_covid_data_df = t2_owid_covid_data_df[t2_owid_covid_data_df['location'].isin(countries_above_1000_cases)]\nowid_covid_replace = {'Congo':'Congo, Rep.',\n 'Democratic Republic of Congo':'Congo, Dem. Rep.',\n 'Iran': 'Iran, Islamic Rep.',\n 'Kyrgyzstan':'Kyrgyz Republic',\n 'Macedonia':'Macedonia, FYR',\n 'Russia':'Russian Federation',\n 'South Korea':'Korea, Rep.',\n 'Yemen':'Yemen, Rep.'}\nt2_owid_covid_data_df.replace(owid_covid_replace,inplace=True)\ncountries_above_1000_cases = t2_owid_covid_data_df['location'].unique().tolist()","f717afdd":"t2_owid_covid_data_df.head()","82385db4":"countrie_income_replace = {'British Virgin Islands':'Virgin Islands (British)','Egypt, Arab Rep.':'Egypt', \n                               'Hong Kong SAR, China':'Hong Kong','Macao SAR, China': 'Macao, China',\n                                'Marshall Islands':'Marshall Islands, Rep.', 'North Macedonia':'Macedonia, FYR',\n                                'Slovak Republic':'Slovakia', 'St. Martin (French part)':'St. Martin (french part)',\n                                'S\u00e3o Tom\u00e9 and Principe':'Sao Tome and Principe', 'Taiwan, China':'Taiwan', 'Venezuela, RB':'Venezuela'}\ncountries_by_income_df.replace(countrie_income_replace,inplace=True)\ncountries_by_income_df = countries_by_income_df.loc[countries_by_income_df['Economy'].isin(countries_above_1000_cases)] ","936e0e89":"countries_by_income_df['Income group'].unique()","17bf2488":"def find_income_group(location):\n    if countries_by_income_df[countries_by_income_df['Economy'] == location]['Income group'].tolist()[0] == 'High income':\n        return 'High'\n    else:\n        return 'Middle'\nt2_owid_covid_data_df = t2_owid_covid_data_df.loc[t2_owid_covid_data_df['location'].isin(countries_by_income_df['Economy'].tolist())]\nt2_owid_covid_data_df['income_group'] = t2_owid_covid_data_df['location'].apply(find_income_group)","4f030f4f":"# past_bcg_countries_list\n# no_bcg_countries_list\n# with_bcg_countries_list\ndef find_vaccine_group(location):\n    if location in past_bcg_countries_list:\n        return 'discontinued'\n    elif location in no_bcg_countries_list:\n        return 'never'\n    elif location in with_bcg_countries_list:\n        return 'current'\n    else:\n        return 'never'\nt2_owid_covid_data_df['bcg_vaccine_status'] = t2_owid_covid_data_df['location'].apply(find_vaccine_group)\nt2_owid_covid_data_df.head()","2c39b56c":"import matplotlib.pyplot as plt\n# (t2_owid_covid_data_df[t2_owid_covid_data_df['location']=='India'])\nt2_owid_covid_data_df['positivity_rate'] = (t2_owid_covid_data_df['total_cases']\/t2_owid_covid_data_df['total_tests'])*100\nt2_owid_covid_data_df['positivity_rate'] = t2_owid_covid_data_df.groupby(['location'],sort=False)['positivity_rate'].apply( \nlambda x:x.ffill()) #fillna(method='bfill',inplace=True)\nt2_owid_covid_data_df['positivity_rate'].fillna(0,inplace=True)\nt2_owid_covid_data_df['date'] = pd.to_datetime(t2_owid_covid_data_df['date'])","d809fee1":"import matplotlib.pyplot as plt\n# (t2_owid_covid_data_df[t2_owid_covid_data_df['location']=='India'])\nt2_owid_covid_data_df['fatality_rate'] = t2_owid_covid_data_df['new_deaths_smoothed_per_million']\nt2_owid_covid_data_df['date'] = pd.to_datetime(t2_owid_covid_data_df['date'])","526de7e3":"t2_covid_death_first_df = t2_covid_death_first_df.T\nt2_covid_death_first_df.columns = t2_covid_death_first_df.iloc[0]\nt2_covid_death_first_df = t2_covid_death_first_df.drop(t2_covid_death_first_df.index[[0,1,2]])\nt2_covid_death_first_df.fillna(method='ffill',inplace=True)\nt2_covid_death_first_df.dropna(axis=1,inplace=True)","9ca38335":"covid_death_first_replace = {'Congo':'Congo, Rep.', 'Iran':'Iran, Islamic Rep.', 'Kyrgyzstan': 'Kyrgyz Republic', 'Macedonia':'Macedonia, FYR',  \n                            'Russia':'Russian Federation', 'South Korea':'Korea, Rep.', }\nt2_covid_death_first_df = t2_covid_death_first_df.rename(columns = covid_death_first_replace)\ncounty_drop_list_mortality  = list(set(list(t2_covid_death_first_df.columns)) - set(t2_owid_covid_data_df['location']))\nt2_covid_death_first_df.drop(county_drop_list_mortality,inplace=True,axis=1)","6088befb":"t2_covid_death_first_df.head()","ea22e57a":"# t2_owid_groupby = t2_owid_covid_data_df.groupby(['location','income_group','bcg_vaccine_status'])","40e64868":"bcg_atlas_to_replace = {'Germany (East)':'Germany', 'Germany (West)':'Germany', 'Slovak Republic':'Slovakia', \n 'United States of America':'United States','mexico':'Mexico'}\nbcg_atlas_df['Contry Name (Mandatory field)'] = bcg_atlas_df['Contry Name (Mandatory field)'].str.strip()\nbcg_atlas_df.replace(bcg_atlas_to_replace,inplace=True)\nbcg_atlas_df.head()\n# set(bcg_atlas_df['Contry Name (Mandatory field)'].str.strip()) - set(t2_owid_covid_data_df['location'])","9d4f7b29":"def find_bcg_strain(location):\n    result_list = bcg_strain_details_df[bcg_strain_details_df['Country']==location]['BCG_Strain'].tolist()\n    if len(result_list) > 0:\n        return result_list[0]\n    else:\n        return 'NA'\n\nt2_owid_covid_data_df['BCG Strain'] = t2_owid_covid_data_df['location'].apply(find_bcg_strain)\nt2_owid_covid_data_df['BCG Strain'] = t2_owid_covid_data_df['BCG Strain'].fillna('NA')","86e54563":"t2_owid_covid_data_df['BCG Strain'].value_counts()","7e45d931":"time_series_features = ['location','date','total_cases','new_cases','new_cases_smoothed','total_deaths','new_deaths','new_deaths_smoothed',\n                        'total_cases_per_million','new_cases_per_million','new_cases_smoothed_per_million','total_deaths_per_million',\n                        'new_deaths_per_million','new_deaths_smoothed_per_million','new_tests','total_tests','total_tests_per_thousand',\n                        'positive_rate','new_tests_per_thousand','new_tests_smoothed','new_tests_smoothed_per_thousand',\n                        'tests_per_case','positivity_rate','tests_units','stringency_index','fatality_rate','BCG Strain','bcg_vaccine_status','continent']\n\ncommon_features = ['BCG Strain', 'bcg_vaccine_status', 'continent']\nlocation_specific_features = ['location'] + list(set(t2_owid_covid_data_df.columns) - set(time_series_features)) + common_features\n","d1f3a840":"owid_covid_time_series_df = t2_owid_covid_data_df[time_series_features].copy()\nowid_covid_location_specific_df = t2_owid_covid_data_df[location_specific_features].copy().drop_duplicates()","72871568":"continents=list(owid_covid_location_specific_df.continent.unique())\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport math\n\nncols=2\nnrows = math.ceil(len(continents)\/ncols)\n\nsubplot_order = ['']*len(continents)\nfor index, cont in enumerate(continents):\n    row = index%nrows\n    col = index%ncols\n    new_ind = ncols*row+col\n    subplot_order[new_ind] = cont\n\nfig = make_subplots(rows=nrows, cols=ncols, subplot_titles=subplot_order)#, column_widths=[0.7, 0.3])\n\n\nfor index, cont in enumerate(continents):\n    row = index%nrows+1\n    col = index%ncols+1\n    temp_df = owid_covid_time_series_df[owid_covid_time_series_df['continent'] == cont]\n    for loc in list(temp_df.location.unique()):\n        temp_df1 = temp_df[temp_df['location']==loc]\n        fig.add_trace(\n            go.Scatter(\n                x=temp_df1['date'],\n                y=temp_df1['new_deaths_smoothed_per_million'],\n                mode='lines',\n                name=loc\n            ),\n            row=row,\n            col=col\n        )\n    \n    if row==2:\n        fig.update_yaxes(title_text=\"New deaths per million(smoothed)\", row=row, col=col)\n\nfig.update_layout(legend_title='Country')\nfig.show()","927a31bb":"continents=list(owid_covid_location_specific_df.continent.unique())\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport math\n\nsubplot_order = ['']*len(continents)\nfor index, cont in enumerate(continents):\n    row = index%nrows\n    col = index%ncols\n    new_ind = ncols*row+col\n    subplot_order[new_ind] = cont\n\nncols=2\nnrows = math.ceil(len(continents)\/ncols)\nfig = make_subplots(rows=nrows, cols=ncols, subplot_titles=subplot_order)#, column_widths=[0.7, 0.3])\n\n\nfor index, cont in enumerate(continents):\n    row = index%nrows+1\n    col = index%ncols+1\n    temp_df = owid_covid_time_series_df[owid_covid_time_series_df['continent'] == cont]\n    for loc in list(temp_df.location.unique()):\n        temp_df1 = temp_df[temp_df['location']==loc]\n        fig.add_trace(\n            go.Scatter(\n                x=temp_df1['date'],\n                y=temp_df1['positivity_rate'],\n                mode='lines',\n                name=loc\n            ),\n            row=row,\n            col=col\n        )\n    \n    if row==2:\n        fig.update_yaxes(title_text=\"Positivity rate\", row=row, col=col)\n\nfig.update_layout(legend_title='Country')\nfig.show()","736c23d8":"def find_val_per_mill(location):\n    case_per_mill = owid_covid_time_series_df[owid_covid_time_series_df['location'] == location]['total_cases_per_million'].max()\n    death_per_mill = owid_covid_time_series_df[owid_covid_time_series_df['location'] == location]['total_deaths_per_million'].max()\n    #tests_per_thous = owid_covid_time_series_df[owid_covid_time_series_df['location'] == location]['total_tests_per_thousand'].max()\n    #median_stringency_index = owid_covid_time_series_df[owid_covid_time_series_df['location']==location]['stringency_index'].median()\n    return case_per_mill, death_per_mill#, tests_per_thous,median_stringency_index\n    \nowid_covid_location_specific_df['total_cases_per_million'],owid_covid_location_specific_df['total_deaths_per_million'] = zip(*owid_covid_location_specific_df['location'].apply(find_val_per_mill))","e85534fb":"owid_covid_location_specific_df.sort_values('total_deaths_per_million',ascending=False,inplace=True)\ntop10_most_affected = owid_covid_location_specific_df['location'].iloc[0:10].tolist()\nbottom10_most_affected = owid_covid_location_specific_df['location'].iloc[-10:].tolist()","e61c33b9":"import plotly.express as px\nbcg_coverate_melted_df = bcg_coverage_df.melt(id_vars='Year',value_name='BCG Coverage(in %)')\ntop10_affected_bcg_cvg_df = bcg_coverate_melted_df[bcg_coverate_melted_df['Cname'].isin(top10_most_affected)]\nbottom10_affected_bcg_cvg_df = bcg_coverate_melted_df[bcg_coverate_melted_df['Cname'].isin(bottom10_most_affected)]\n","c9590ba3":"top10_most_affected","47e983d0":"bottom10_most_affected","9430c66b":"px.line(top10_affected_bcg_cvg_df, x='Year' , y='BCG Coverage(in %)', color='Cname')","49721b53":"px.line(bottom10_affected_bcg_cvg_df, x='Year' , y='BCG Coverage(in %)', color='Cname')","f2f62218":"px.scatter(owid_covid_location_specific_df, x='gdp_per_capita',y='hospital_beds_per_thousand',hover_data=['location'], \n           size='population')","d64e3671":"px.scatter(owid_covid_location_specific_df, x='hospital_beds_per_thousand',y='total_deaths_per_million', \n           color='bcg_vaccine_status',hover_data=['location'])","9cbdc354":"owid_covid_location_specific_df.columns","28500d0f":"px.scatter(owid_covid_location_specific_df, x='median_age',y='total_deaths_per_million', \n           color='bcg_vaccine_status',hover_data=['location'])","0f284e21":"import seaborn as sns\nprint('Median total deaths per million for respective bcg vaccine status:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df.groupby(['bcg_vaccine_status'])['total_deaths_per_million'].agg('median'))\nprint('\\n********************************************************************')\nprint('********************************************************************\\n')\nprint('Mean total deaths per million for respective bcg vaccine status:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df.groupby(['bcg_vaccine_status'])['total_deaths_per_million'].agg('mean'))\n\n\nplt.figure(figsize=(15,7))\nplt.title('BCG Vaccine Status Vs Total deaths per million')\nsns.violinplot(x ='bcg_vaccine_status',y='total_deaths_per_million',data=owid_covid_location_specific_df)","efc23e16":"print('Median total cases per million for respective bcg vaccine status:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df.groupby(['bcg_vaccine_status'])['total_cases_per_million'].agg('median'))\nprint('\\n********************************************************************')\nprint('********************************************************************\\n')\nprint('Mean total cases per million for respective bcg vaccine status:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df.groupby(['bcg_vaccine_status'])['total_cases_per_million'].agg('mean'))\n\n\nplt.figure(figsize=(15,7))\nplt.title('')\nsns.violinplot(x = 'bcg_vaccine_status',y='total_cases_per_million',data = owid_covid_location_specific_df)","1af9efb8":"print('Median total deaths per million for respective bcg strains:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df[owid_covid_location_specific_df['bcg_vaccine_status']=='current'].groupby(['BCG Strain'])['total_deaths_per_million'].agg('median'))\nprint('\\n********************************************************************')\nprint('********************************************************************\\n')\nprint('Mean total deaths per million for respective bcg strains:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df[owid_covid_location_specific_df['bcg_vaccine_status']=='current'].groupby(['BCG Strain'])['total_deaths_per_million'].agg('mean'))\n\n\nplt.figure(figsize=(15,7))\nplt.title('')\nsns.violinplot(x = 'BCG Strain',y='total_deaths_per_million',data = owid_covid_location_specific_df[owid_covid_location_specific_df['bcg_vaccine_status']=='current'])","7f48fce5":"print('Median total cases per million for respective bcg strains:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df[owid_covid_location_specific_df['bcg_vaccine_status']=='current'].groupby(['BCG Strain'])['total_cases_per_million'].agg('median'))\nprint('\\n********************************************************************')\nprint('********************************************************************\\n')\nprint('Mean total cases per million for respective bcg strains:')\nprint('------------------------------------------------------------------')\nprint(owid_covid_location_specific_df[owid_covid_location_specific_df['bcg_vaccine_status']=='current'].groupby(['BCG Strain'])['total_cases_per_million'].agg('mean'))\n\n\nplt.figure(figsize=(15,7))\nplt.title('')\nsns.violinplot(x = 'BCG Strain',y='total_cases_per_million',data = owid_covid_location_specific_df[owid_covid_location_specific_df['bcg_vaccine_status']=='current'])","f8b8c53d":"# owid_covid_time_series_df['stringency_index'] = owid_covid_time_series_df['stringency_index'].fillna(0)\n# px.scatter(data_frame=owid_covid_time_series_df,x='date',y='stringency_index',size='positivity_rate',color='location')\n# from plotly.subplots import make_subplots\n# import plotly.graph_objects as go\n# fig = go.Figure()\n# fig.add_trace(go.Scatter(\n#     x= owid_covid_time_series_df['date'], y =owid_covid_time_series_df['positivity_rate'], mode='lines'))\n# fig.show()","4db247e2":"\n\ndef find_vaccination_timing(vaccination_timing):\n    if vaccination_timing != vaccination_timing:\n        return -1\n    if('At birth' in vaccination_timing or 'After birth' in vaccination_timing or \n       'Newborn' in vaccination_timing):\n        return 0\n    elif('1 year' in vaccination_timing):\n        return 1\n    elif('4 years' in vaccination_timing):\n        return 4\n    elif ('school' in vaccination_timing or 'School' in vaccination_timing or \n          'After infancy' in vaccination_timing):\n        return 5\n    elif ('six years' in vaccination_timing):\n        return 6\n    elif ('7 years' in vaccination_timing):\n        return 7\n    elif('primary school graduates' in vaccination_timing):\n        return 9\n    elif( '12, 13 years' in vaccination_timing):\n        return 12\nbcg_atlas_df['bcg_vaccination_timing'] = bcg_atlas_df['Vaccination Timing (age)'].apply(find_vaccination_timing)\n\ndef find_unique_vaccination_timing(location):\n    timing_list = bcg_atlas_df[bcg_atlas_df['Contry Name (Mandatory field)'] == location]['bcg_vaccination_timing'].tolist()\n    if len(timing_list) == 0:\n        return -1\n    return timing_list[-1]\n    \n    \nowid_covid_location_specific_df['bcg_vaccination_timing'] = owid_covid_location_specific_df['location'].apply(find_unique_vaccination_timing)","c290b8b7":"sns.violinplot(x ='bcg_vaccination_timing',y='total_deaths_per_million',data=owid_covid_location_specific_df)","12e2007e":"**Observations:**\n* Similar to the previous observation, number of positive cases per million population is high for Americas and Europe.","84c06e0b":"**Observation**\n* Among the 10 most affected countries, 6 countries doesn't have any BCG vaccination","2ea2af00":"# Deaths per million vs BCG Strains used for vaccination","65ca4fb5":"# Current BCG Vaccination status\nSource: http:\/\/www.bcgatlas.org\/index.php\n\n![bcg_status.jpg](attachment:bcg_status.jpg)\n","7b8cd6eb":"# Finding the top 10 most affected and top10 least affected countries in terms of total deaths per million","6407879d":"**Observations**\n* Deaths per million positive covid19 cases are high in Americas and Europe\n* Europe has bent the curve when it comes to new death per million covid19 cases\n* It can also be observed that some of the asian countries like India hasn't reached the peak yet.\n","bab56227":"### Fatality rate over time after the first death","1481c436":"**Observation:**\n* It can be clearly observed that the average deaths per million is very high for countries which either discontinued or never had a bcg vaccination policy.","cbceb714":"# Conclusion:\n* From the above observations, it can be seen that countries with active BCG vaccination policy has reported lesser deaths per million.\n* In particular, BCG strains such as BCG Japan, Serum Institute India, and countries which uses mixture of more than one strain has lesser deaths per million within the BCG vaccinated countries.\n* Countries which does BCG vaccination immediately after the birth or during the early childhood has reported lesser number of deaths per million.\n* Americas and Europe are the most affected countries with higher fatality. Incidently, most of these countries doesn't have active BCG vaccination policy.\n* Countries with higher median age has reported higher deaths per million.\n\n* Eventhough, there is a clear correlation between BCG vaccination and fatality due to covid, we may not be able to arrive at any conclusion without considering other factors like DNA, prior treatment with anti-malarial drugs, etc.","0a146e62":"**Observation:**\n* Except BCG Brazil, the distribution of covid19 positive cases tends to follow the same distribution.\n","47a4ba1e":"## Select only middle income and higher income countries from t2_owid_covid_data_df","0f94367b":"### Finding positivity rate over time","1a10f186":"### We consider only countries with cases above 1000","efc0ed04":"<center> <h1>BCG - COVID-19 AI Challenge<\/h1> <\/center>\n<center> <h3>Task 2: \"BCG - COVID-19\" - Find Insights that Could Help the Clinical Trials <\/h3> <\/center>","8b9195e8":"# 10 lease affected countries are as follows","a7fe5000":"# Mapping the global use of different BCG vaccine strains\nSource: Nicole Ritza, Nigel Curtis. Mapping the global use of different BCG vaccine strains\n[http:\/\/blisty.cz\/video\/TB.pdf]\nhttp:\/\/www.bcgatlas.org\/index.php\n![bcg_mapping_img.png](attachment:bcg_mapping_img.png)","d720355f":"## Hospital beds per thousand Vs Per Capita GDP & Population\nNote: Size of bubble is proportional to the population of the country. Hover over the data points for more information.","0665eb65":"# Reading the CSV Files","f390f95c":"**Observation:**\n* Countries which doesn't have an active BCG vaccination policy seems to report an increased number of deaths despite having more number of hospital beds.","287e9139":"# NOTE:\n\n* Due to lack of data from low income countries, in this analysis we consider data only from middle income and high income countries.\n* We also restrict ourselves to countries which has reported more than 1000 covid cases. \n","a84bf61a":"# Top 10 most affected countries are as follows","ca757b9b":"## Preprocess BCG coverage data of different countries (1980-2019)","9da9caa2":"# BCG Vaccination policy  vs Total cases per million","5411c494":"**Observation:**\n* Population for which BCG vaccination is done at birth or early childhood has reported lesser number of deaths per million.","6f31a747":"## References:\n* Abhibhav Sharma, et al., BCG vaccination policy and preventive chloroquine usage: do they have an impact on COVID-19 pandemic?\n* Nicole Ritza, Nigel Curtis. Mapping the global use of different BCG vaccine strains [http:\/\/blisty.cz\/video\/TB.pdf]\n* http:\/\/www.bcgatlas.org\/index.php\n","3b9c6e5c":"**Observation:**\n* With the increase in the median age of the population the number of fatalities too increases.\n* This reiterates the fact that elder people are at more risk of contracting corona virus.","48c35795":"**Observation:**\n* Irrespective of BCG vaccination policy, distribution of the infection is similar across countries with different BCG vaccination policy.","5e05bc26":"**Observations**\n* The least affected countries all have an active BCG vaccination policy","368f105c":"**Observations:**\n* Countries with lower population and higher per capita GDP tends to have more number of hopital beds","2a46ac23":"### Finding fatality rate over time","c650ef61":"# BCG Coverage details of 10 least affected countries","134fe3be":"### Total deaths per million Vs Number of hospital beds per thousand\nNote: Size of the bubble is proportional to the *population density*","bda00c9a":"# Median age Vs Total deaths per million","d84a183a":"### Positivity rate over time","f6ee0a9a":"# BCG Vaccination Policy Vs Deaths per million","6920761c":"### Fatality depending on the continent","3ed97ea5":"# BCG Coverage details of 10 most affected countries","c17f7b19":"# Vaccination timing Vs Total deaths per million","a11df0de":"**Observatiopns:**\n* Mean and Median deaths of BCG Japan and countries like India which had mixed approached tends to be very less."}}