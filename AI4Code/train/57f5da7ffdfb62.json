{"cell_type":{"fb9ece71":"code","49ed307a":"code","625d8f6c":"code","4f0e7cbc":"code","bedc89c9":"code","0b352253":"code","734d86ca":"code","6748b426":"code","9cad2260":"code","cf568cd6":"code","3fca2c7e":"code","84131bed":"code","5837ca64":"markdown","7b78ff17":"markdown","c1a34739":"markdown","1db23761":"markdown","8305aefa":"markdown","93b5c314":"markdown"},"source":{"fb9ece71":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","49ed307a":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","625d8f6c":"learning_rate = 0.5\ntraining_epochs = 50\nbatch_size =10\nScaler = preprocessing.StandardScaler()","4f0e7cbc":"#train_data=pd.read_csv('electric_power_train_data.csv')\ntrain_data=pd.read_csv('\/kaggle\/input\/sejongyjelectricpowerprediction\/electric_power_train_data.csv')\n#test_data=pd.read_csv('electric_power_test_data.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/sejongyjelectricpowerprediction\/electric_power_test_data.csv')\ntrain_data['Date'] = train_data['Date']%1000000\/10000\ntest_data['Date'] = test_data['Date']%1000000\/10000\n\nx_train_data=train_data.loc[:,[i for i in train_data.keys()[:-1]]]\ny_train_data=train_data[train_data.keys()[-1]]\n\nx_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)\nx_train_data = Scaler.fit_transform(x_train_data)  ####baseline\uacfc \ucc28\uc774\uc810 \uc5ec\uae30\uc11c Scaler \uc0ac\uc6a9\ud574\uc90c\n\nx_train_data=torch.FloatTensor(x_train_data)\ny_train_data=torch.FloatTensor(y_train_data)","bedc89c9":"train_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","0b352253":"linear1 = torch.nn.Linear(3,1,bias=True)\nrelu= torch.nn.ReLU()\n\ntorch.nn.init.xavier_uniform_(linear1.weight)\n\n","734d86ca":"model = torch.nn.Sequential(linear1).to(device)","6748b426":"# \uc190\uc2e4\ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218\nloss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","9cad2260":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","cf568cd6":"with torch.no_grad():\n\n  x_test_data=test_data.loc[:,[i for i in test_data.keys()[:]]]\n  x_test_data=np.array(x_test_data)\n  x_test_data = Scaler.transform(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)","3fca2c7e":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","84131bed":"submit=pd.read_csv('electric_power_submit_data.csv')\nfor i in range(len(correct_prediction)):\n  submit['ElectricPower'][i]=correct_prediction[i].item()\n\nsubmit","5837ca64":"baseline\uacfc \ucc28\uc774\uc810 :\n\n\uc120\ud615 \ud68c\uadc0 --> \ub525\ub7ec\ub2dd \ubaa8\ub378","7b78ff17":"\ubaa8\ub378 \ud559\uc2b5","c1a34739":"Test \ub370\uc774\ud130","1db23761":"baseline\uacfc \ucc28\uc774\uc810 : \n\nbatch \uc0ac\uc6a9","8305aefa":"baseline \uacfc \ucc28\uc774\uc810 : \n\n\uc815\ud655\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud574 batch_size\uc640 Scaler\ub97c \uc0ac\uc6a9","93b5c314":"https:\/\/youtu.be\/ySTVSzwO1vA\n\nbaseline \uacfc \ucc28\uc774\uc810:\n\n \uc120\ud615\ud68c\uadc0 --> NN layer #1 \ubc29\ubc95\uc73c\ub85c \ubc14\uafb8\uc5b4 \ud488\n Xavier \ucd08\uae30\ud654 \/ relu \/ Adam \ucd5c\uc801\ud654 \uc0ac\uc6a9"}}