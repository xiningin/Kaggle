{"cell_type":{"c531fff1":"code","8cca7cc1":"code","56af4ab4":"code","c6ce52f6":"code","cbb1435d":"code","d9ffecc4":"code","01dc460c":"code","6fd0547f":"code","0d8a75e6":"code","e117a9f7":"code","c7c1fb61":"code","f2c60c75":"code","83ee634d":"code","9b049224":"code","04cdf2bb":"code","b69c3857":"code","3238b156":"code","84e7a6fa":"code","2977920a":"code","ef77cd34":"code","9e3669ff":"code","500afa7a":"code","2f5831bc":"code","f31df29b":"code","07fd3eab":"code","0cb4feba":"code","528578e4":"code","58becae9":"code","b2978f17":"code","7eaad6f9":"code","08ac9f62":"code","58d220fe":"code","fa34b664":"code","eec5efaf":"code","11a41e1e":"code","192e34e1":"code","3d07ffad":"code","895bac03":"code","2bbc575e":"code","3401fe5f":"code","f994fba1":"code","bf6b22c2":"code","e1d6e97d":"code","f2e1bb7f":"code","f55071f3":"code","8b9af1ae":"code","af0dfcf5":"code","ec60c250":"markdown","324bc9c0":"markdown","5a10a8f1":"markdown","49b3b904":"markdown","84b3577a":"markdown","bfc151f4":"markdown","42ecd1e0":"markdown","92e11ea5":"markdown","72f5f58a":"markdown","895dfe6b":"markdown","b987750d":"markdown","3e7dd92a":"markdown","80e01274":"markdown","0d96fc77":"markdown","e5d4ae0e":"markdown"},"source":{"c531fff1":"\nimport numpy as np \nimport pandas as pd \n\n","8cca7cc1":"path = \"..\/input\/eda-for-biginner-updated-to-english-ver\"","56af4ab4":"traindf = pd.read_csv(path+\"\/traindf.csv\")\ntraindf","c6ce52f6":"tmp = traindf[traindf[\"landmark_id\"]==7]\ntmp","cbb1435d":"import cv2\nimport matplotlib.pyplot as plt","d9ffecc4":"for a in tmp[\"path\"]:\n    img = cv2.imread(a)\n    plt.figure()\n    plt.imshow(img)","01dc460c":"dfcnt = pd.read_csv(path+\"\/dfcnt.csv\")\ndfcnt","6fd0547f":"plt.scatter(dfcnt[\"id\"],dfcnt[\"count\"])","0d8a75e6":"traindf","e117a9f7":"dfcnt","c7c1fb61":"tmp1 = dfcnt[\"id\"].iloc[0]\ntmp1","f2c60c75":"tmpdf1 = traindf[traindf[\"landmark_id\"]==tmp1]\ntmpdf1","83ee634d":"tlist = []\nvlist = []","9b049224":"tlist.append(tmpdf1.iloc[0].values)\ntlist","04cdf2bb":"vlist.append(tmpdf1.iloc[1].values)","b69c3857":"# \u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059","3238b156":"from tqdm import tqdm","84e7a6fa":"import os\nos.path.exists(\".\/tdf.csv\")","2977920a":"tlist = []\nvlist = []","ef77cd34":"if os.path.exists(\".\/tdf.csv\")==False:\n    \n\n    \n\n    tmp1 = dfcnt[\"id\"].values #.values\u3067numpy. for\u6587\u306fnumpy\u306e\u307b\u3046\u304c\u65e9\u3044\u3068\u304d\u304c\u3042\u308b\u3002\n\n    for a in tqdm(range(len(dfcnt))):\n\n        tmpdf1 = traindf[traindf.landmark_id.values==tmp1[a]]\n        tlist.append(tmpdf1.iloc[0].values)\n        vlist.append(tmpdf1.iloc[1].values)","9e3669ff":"tdf = pd.DataFrame(tlist,columns=tmpdf1.columns)\ntdf[\"repair_id\"]=np.arange(0,len(tdf),1)\ntdf","500afa7a":"vdf = pd.DataFrame(vlist,columns=tmpdf1.columns)\nvdf[\"repair_id\"]=np.arange(0,len(vdf),1)\nvdf","2f5831bc":"if os.path.exists(\".\/tdf.csv\"):\n    tdf = pd.read_csv(\".\/tdf.csv\")\n    vdf = pd.read_csv(\".\/vdf.csv\")","f31df29b":"tdf.to_csv(\"tdf.csv\",index=False)\nvdf.to_csv(\"vdf.csv\",index=False)","07fd3eab":"tdf2 = tdf.iloc[:10,:]\nvdf2 = vdf.iloc[:10,:]","0cb4feba":"tdf2","528578e4":"vdf2","58becae9":"import torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch import nn, optim\nfrom torch.nn import functional as F\nfrom torchvision.models import resnet18\nfrom albumentations import Normalize, Compose\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tqdm.notebook import tqdm\nfrom sklearn.model_selection import train_test_split\nimport os\nimport glob\nimport multiprocessing as mp\n\n\n\nif torch.cuda.is_available():\n    device = 'cuda:0'\n    torch.set_default_tensor_type('torch.cuda.FloatTensor')\nelse:\n    device = 'cpu'\nprint(f'Running on device: {device}')","b2978f17":"preprocess = Compose([\n    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], p=1)\n])\n\n# resnext\u306a\u3069\u306epre-train\u30e2\u30c7\u30eb\u306f\u5168\u3066\u3001\u540c\u3058\u65b9\u6cd5\u3067\u6b63\u898f\u5316\u3055\u308c\u305f\u5165\u529b\u753b\u50cf\u3092\u4f7f\u7528\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u305d\u308c\u306e\u5909\u63db\u3092\u3053\u306e\u95a2\u6570\u3067\u884c\u3046\u3002\u5024\u306fdefault\u3002\n# Compose\u306f\u4eca\u56de\u3042\u307e\u308a\u3001\u610f\u5473\u3092\u306a\u3055\u306a\u3044\n# https:\/\/betashort-lab.com\/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9\/albumentations%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\/ \u306b\u8a73\u7d30\u306f\u66f8\u3044\u3066\u3042\u308b","7eaad6f9":"# \u753b\u50cf\u3092\u3069\u308c\u3060\u3051\u5c0f\u3055\u304f\u3059\u308b\u304b\u306e\u51e6\u7406\nROWS = 32\nCOLS = 32","08ac9f62":"class GLDataset(Dataset):\n    \n    def __init__(self,img_pass,labels,preprocess=None):\n        self.img_pass = img_pass\n        self.labels = labels\n        self.preprocess = preprocess\n        \n    def __len__(self):\n        return len(self.img_pass)\n    \n    def __getitem__(self,idx):\n        \n        # \u3053\u3053\u304b\u3089dataset\u306b\u98df\u308f\u305b\u308b\u524d\u306e\u524d\u51e6\u7406\u306e\u8a18\u8ff0\u3002\n        \n        img_pass = self.img_pass[idx]\n        label = self.labels[idx]\n        \n        land = cv2.imread(img_pass)\n        land = cv2.resize(land,(ROWS,COLS),interpolation = cv2.INTER_CUBIC)\n        land = cv2.cvtColor(land,cv2.COLOR_BGR2RGB) # augment\u3092\u4f7f\u3046\u3068\u304d\u306bBGR\u304b\u3089RGB\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n        \n        if self.preprocess is not None: # \u3053\u3053\u3067\u3001\u524d\u51e6\u7406\u3092\u5165\u308c\u3066normalization\u3057\u3066\u3044\u308b\u3002\n                augmented = self.preprocess(image=land) # preprocess\u306eimage\u3092face\u3067\u8aad\u3080\n                land = augmented['image'] # https:\/\/betashort-lab.com\/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9\/albumentations%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\/\u3000\u306b\u66f8\u3044\u3066\u3042\u308b\n                \n        return {'landmarks': land.transpose(2, 0, 1), 'label': np.array([label], dtype=int)}  # pytorch\u306fchannnl, x, y\u306e\u5f62\u3002\u3053\u308c\u306f\u8f9e\u66f8\u578b\u3067\u8fd4\u3057\u3066\u3044\u308b\u3002(\u6271\u3044\u3084\u3059\u3044\u3068\u3044\u3046\u3060\u3051\u304b\u3082\u3002)\n        \n        \n        \n        \n        \n        \n        \n        ","58d220fe":"land = cv2.imread(tdf2[\"path\"].iloc[0])","fa34b664":"plt.imshow(land)","eec5efaf":"land = cv2.resize(land,(ROWS,COLS),interpolation = cv2.INTER_CUBIC)","11a41e1e":"plt.imshow(land)","192e34e1":"land = cv2.cvtColor(land,cv2.COLOR_BGR2RGB) # augment\u3092\u4f7f\u3046\u3068\u304d\u306bBGR\u304b\u3089RGB\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002","3d07ffad":"plt.imshow(land)","895bac03":"augmented = preprocess(image=land) # preprocess\u306eimage\u3092face\u3067\u8aad\u3080\nland = augmented['image']","2bbc575e":"plt.imshow(land)","3401fe5f":"land.shape","f994fba1":"land=land.transpose(2, 0, 1)","bf6b22c2":"land.shape","e1d6e97d":"# instance\u5316\ntrain_dataset = GLDataset(\n    img_pass=tdf2[\"path\"],\n    labels=tdf2[\"repair_id\"].to_numpy(),\n    preprocess=preprocess\n)\n#val_dataset = FaceValDataset(\n\nval_dataset = GLDataset(\n    img_pass=vdf2[\"path\"],\n    labels=vdf2[\"repair_id\"].to_numpy(),\n    preprocess=preprocess\n)","f2e1bb7f":"print(train_dataset[0])","f55071f3":"BATCH_SIZE = 2\n\n#NUM_WORKERS = mp.cpu_count()\nNUM_WORKERS = 0 # \u3053\u3053\u30920\u306b\u3057\u306a\u3044\u3068\u52d5\u304b\u306a\u3044\u3002cpu\u306e\u4ed5\u69d8\u500b\u6570\u3002\u2190\u5b9f\u306f\u52d5\u304f\u3053\u3068\u304c\u5224\u660e\u3002class\u306e\u4e2d\u8eab\u6b21\u7b2c\uff01","8b9af1ae":"#NUM_WORKERS = mp.cpu_count()\n#NUM_WORKERS","af0dfcf5":"## DataLoader\u306fimport torch.utils.data.Dataset\u3067import\u6e08\u307f\u306e\u3082\u306e\ntrain_dataloader = DataLoader(\n    train_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=False, #https:\/\/schemer1341.hatenablog.com\/entry\/2019\/01\/06\/024605 \u3092\u53c2\u8003. id\u304c\u308f\u304b\u3089\u306a\u304f\u306a\u308b\n    num_workers=NUM_WORKERS\n)\nval_dataloader = DataLoader(\n    val_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=False,\n    num_workers=NUM_WORKERS\n)","ec60c250":"## 1\u30641\u3064\u8ffd\u3063\u3066\u3001\u4f55\u3084\u3063\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304f\u3002","324bc9c0":"# 2. Dataset","5a10a8f1":"# \u3053\u3053\u304b\u3089pytorch","49b3b904":"# \u304a\u3055\u3089\u3044","84b3577a":"# \u521d\u65e5\u306f\u3053\u3053\u307e\u3067\u304b\u306a\u30fb\u30fb\u30fb","bfc151f4":"# 3. DataLoader","42ecd1e0":"# Dataset\u306einstance\u5316","92e11ea5":"# 1. transform\u306e\u5b9a\u7fa9","72f5f58a":"# \u3053\u306e\u6642\u70b9\u3067\u3001landmark id\u306e\u7a2e\u985e\u306f\u5168\u90e8\u306781313\u500b\u3001\u6700\u5c0f\u679a\u6570\u306f2\u679a\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b(\u524d\u56de\u306f138982\u304c6272\u500b\u306b\u6ce8\u76ee\u3057\u3066\u305f)\u306e\u3067\u3001\n# \u5404landmark id\u3054\u3068\u306b1\u679a\u8a13\u7df4\u30c7\u30fc\u30bf(traindata)\u3001\uff11\u679a\u691c\u8a3c\u30c7\u30fc\u30bf(validation)\u306b\u3057\u3066pytorch\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002","895dfe6b":"## This notebook is just for test.\n## This cannot make a complete model because of memory error.\n## Thank you.","b987750d":"# 1.\u524d\u56de\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d","3e7dd92a":"## dfcnt\u306eid\u3067filtering\u3057\u3066\u3001\u4e00\u756a\u4e0a\u306b\u304d\u305f\u3084\u3064\u3092train data, \u4e0a\u304b\u30892\u3064\u76ee\u3092validation\u3068\u3059\u308b\n## \u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001\uff11\u500b\u3067\u8aac\u660e","80e01274":"# \u3053\u306e\u30b5\u30a4\u30c8\u304c\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u304f\u66f8\u3044\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8ff7\u3063\u305f\u3089\u3053\u3053\u3092\u898b\u308b\nhttps:\/\/qiita.com\/takurooo\/items\/e4c91c5d78059f92e76d","0d96fc77":"# \u304a\u3055\u3089\u30442\u3000import collection\u3092\u4f7f\u3063\u3066\u3001\u5404id\u306e\u500b\u6570\u3092\u6570\u3048\u305f\u3002\u305d\u308c\u3092count\u6570\u3054\u3068\u306b\u4e26\u3079\u305f\u306e\u304c\u3001dfcnt","e5d4ae0e":"# \u5168\u90e8\u3084\u3063\u3066\u3082\u826f\u3044\u304c\u3001\u81ea\u5206\u3067\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f10\u679a\u304f\u3089\u3044\u3067\u30c6\u30b9\u30c8\u3059\u308b\u307b\u3046\u304c\u52b9\u7387\u7684"}}