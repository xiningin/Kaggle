{"cell_type":{"0e4b1c97":"code","814fb062":"code","01af6daf":"code","77e16224":"code","adbf4b73":"code","e5ea29e9":"code","db0a8cba":"code","c424da7c":"code","c072ce56":"code","e0d6e153":"code","44d3649f":"code","cc376a68":"code","38067213":"code","fcc98f8c":"code","f982e705":"code","4d1cd213":"code","ed209bc2":"code","43b79c54":"code","7a687432":"code","5eb47d03":"code","7419776a":"code","a3e50bbf":"code","b0af01a9":"code","47507e2c":"code","17e2af5f":"code","2d0b7092":"code","a7866d8e":"code","8db8fb64":"code","3de526e2":"code","623e0ed9":"code","02f0eea3":"code","f9bea293":"code","da98267b":"code","49c2d6f4":"code","7f203ac0":"code","d716c021":"markdown","4f858e82":"markdown","aa8d32cf":"markdown","0a7a7141":"markdown","22559629":"markdown","1bea1904":"markdown","aa357c15":"markdown","939d384b":"markdown","5b3a6845":"markdown","a777055e":"markdown","b0c383a0":"markdown","a57627c3":"markdown","42e8e97f":"markdown","db95236b":"markdown","15dd49a4":"markdown","296bb006":"markdown","1015ff46":"markdown"},"source":{"0e4b1c97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# lesson\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter # Next libriary\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","814fb062":"a = [1, 2, 3, 4, 5]\nplt.plot(a)\nplt.show()","01af6daf":"plt.style.available","77e16224":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_data.head()","adbf4b73":"test_data = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data.head()\n# Lesson\ntest_PassengerId = test_data[\"PassengerId\"]","e5ea29e9":"print('Shape of train csv: \\t', train_data.shape)\nprint('Shape of test csv: \\t', test_data.shape)\n# Lesson\ntrain_data.columns","db0a8cba":"test_data.head()","c424da7c":"train_data.info()","c072ce56":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"age\"\n    output: bar plot & value count\n    \"\"\"\n    var = train_data[variable]\n    \n    varValue = var.value_counts()\n    \n    plt.figure(figsize = (9, 3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","e0d6e153":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","44d3649f":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor n in category2:\n    print(\"{} \\n\".format(train_data[n].value_counts()))","cc376a68":"def plot_hist(variable):\n    \"\"\"\n    input: variable ex: \"Fare\"\n    output: histogram plot & value counts\n    \"\"\"\n    plt.figure(figsize = (9, 3))\n    plt.hist(train_data[variable], bins = 20)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} dist with histogram\".format(variable))\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, train_data[variable].value_counts()))","38067213":"numericValue = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericValue:\n    plot_hist(n)","fcc98f8c":"train_data.columns","f982e705":"train_data[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","4d1cd213":"# Pcall for survived\ntrain_data[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","ed209bc2":"# Sex for survived\ntrain_data[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","43b79c54":"# Sibsp for survived\ntrain_data[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","7a687432":"# Parch for survived\ntrain_data[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","5eb47d03":"def det_outliers(data, features):\n    outliers_in = []\n    \n    for c in features:\n        # Firs Q\n        Q1 = np.percentile(data[c], 25)\n        # Third Q\n        Q3 = np.percentile(data[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        # outlier_step\n        outlier_step = IQR * 1.5\n        # detect outliers and indices\n        outlier_list_col = data[(data[c] < Q1 - outlier_step) | (data[c] > Q3 + outlier_step)].index\n        outliers_in.extend(outlier_list_col)\n        \n    outliers_in = Counter(outliers_in)\n    multiple_outliers = list(i for i, v in outliers_in.items() if v > 2)\n    \n    return multiple_outliers","7419776a":"# Outlier datalarni chiqarish\ntrain_data.loc[det_outliers(train_data, [\"Age\", \"SibSp\", \"Fare\", \"Parch\"])]","a3e50bbf":"train_length = len(train_data)\nall_data = pd.concat([train_data, test_data], axis=0).reset_index(drop = True)","b0af01a9":"all_data.head()","47507e2c":"all_data.columns[all_data.isnull().any()]","17e2af5f":"all_data.isnull().sum()","2d0b7092":"all_data[all_data[\"Embarked\"].isnull()]","a7866d8e":"all_data.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","8db8fb64":"all_data[\"Embarked\"] = all_data[\"Embarked\"].fillna(\"C\")","3de526e2":"print(all_data[all_data[\"Embarked\"].isnull()])\nprint(all_data.isnull().sum())","623e0ed9":"all_data[all_data[\"Fare\"].isnull()]","02f0eea3":"all_data[\"Fare\"] = all_data[\"Fare\"].fillna(np.mean(all_data[all_data[\"Pclass\"] == 3][\"Fare\"]))","f9bea293":"print(all_data[all_data[\"Fare\"].isnull()], \"\\n\")\nprint(all_data.isnull().sum())","da98267b":"np.mean(all_data[all_data[\"Pclass\"] == 3][\"Fare\"])","49c2d6f4":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","7f203ac0":"# survived female %\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)\n# survived male %\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","d716c021":"<a id = \"9\"><br>\n# Find Missing value","4f858e82":"By Random Forest Regressor","aa8d32cf":"<a id = \"10\"><br>\n# Fill Missing value\n* Embarked\n* Fare","0a7a7141":"float = age and Fare <br>\nint = PassengerId, Survived, Pclass, SibSp, ..<br>\nobjects = Name, Sex, Cabin, Embarked<br>","22559629":"<a id = \"8\"><br>\n# Missing Value\n* Find Missing value\n* Fill Missing value","1bea1904":"# End","aa357c15":"<a id = \"5\"><br>\n# Numerical Variable","939d384b":"<a id = \"7\"><br>\n# Outlier Detection","5b3a6845":"<a id = \"6\"><br>\n# Basic Data Analysis\n\n* Survived\n    * Pcall\n    * Sex\n    * Sibsp\n    * Parch","a777055e":"<font color = \"green\"><br>\n## category2","b0c383a0":"# Just interest","a57627c3":"<a id=\"1\"><\/a><br>\n# 1. Load and Check Data","42e8e97f":"<a id=\"2\"><\/a><br>\n<font color = \"blue\">\n# 2. Variable Description\n<font color = \"black\">\nPassengerId: id number of passengers                  <br>: number<br>\nSurvived: passenger survived number = 1 or 0          <br>: number<br>\nPclass: passanger classes 1, 2, 3                     <br>: number<br>\nName: name of passengers                              <br>: object<br>\nSex: sex of passengers                                <br>: object<br>\nAge: age of passengers                                <br>: float64<br>\nSibSp: number of Siblings, spouses                    <br>: number<br>\nParch: number of parent and children                  <br>: number<br>\nTicket: ticket seriyasi                               <br>: object<br>\nFare: fare of ticket                                  <br>: float64<br>\nCabin: cabin category                                 <br>: object<br>\nEmbarked: S:Southampthon, C: Cherystone, Q: Quenstown <br>: object<br>","db95236b":"<a id = \"3\"><br>\n# Univariate Variable Analysis\n    * Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp, and Parch\n    * Numerical Variable: Fare, Age and PassengerId","15dd49a4":"<a id = \"4\"><br>\n## Categorical Variable","296bb006":"<br><font color = \"blue\">\n# Intoduction\n\n<font color = \"black\">  \nThe RMS Titanic, a luxury steamship, sank in the early hours of April 15, 1912, off the coast of Newfoundland in the North Atlantic after sideswiping an iceberg during its maiden voyage. Of the 2,240 passengers and crew on board, more than 1,500 lost their lives in the disaster\n<br>    \n<font color = \"red\">\n## Content:\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing value](#9)\n    * [Fill Missing value](#10)","1015ff46":"### outlier <br>\n1, 2, 3, 6,5,7, 8, 11, 12, 15, 16, 19, 21, 150: list<br>\n1 Qu = Q2 (1,2, 3, 6, 5, 7, 8) -- median -- 6<br>\n----- 2 Qu = median(1, 2, 3, 6,5,7, 8, 11, 12, 15, 16, 19, 21, 150) -- 9.5<br>\n3 Qu = Q3 (11, 12, 15, 16, 19, 21, 150) -- median -- 16<br>\nIQr = Q3 - Q1 = 16 - 6 = 10<br>\nOutlierd.step = Iqr * 1.5 = 15<br>\n....."}}