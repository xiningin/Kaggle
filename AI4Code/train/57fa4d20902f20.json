{"cell_type":{"8bcfccbd":"code","b35d2966":"code","c2e9e27b":"code","b09604ea":"code","dd66794d":"code","4119d7ed":"code","79ae657a":"code","f2a90a21":"code","c7f67392":"code","f146eca2":"code","37c7cf7d":"code","9228f30c":"code","f752bc69":"code","ef00fdf0":"code","3a5f6421":"code","85ea5ebe":"code","d503bc86":"code","432b0748":"code","d7146431":"code","a0db4b80":"code","910bb97b":"code","953f8adf":"code","0d7dbd1b":"code","d52a06af":"code","2fa1243a":"code","15820688":"code","c4614373":"code","01a7e7a9":"code","86fd21d8":"code","0567c5ad":"code","d99ec57b":"code","669fce4e":"code","4d613b2f":"code","31dbd76a":"code","6ad6225b":"code","c1b0e3bd":"code","fae31009":"code","0e3947e5":"code","82b2d5ff":"code","68639b67":"code","6c8038b0":"code","044f1b32":"code","2697a5be":"code","060a6cbd":"code","9a1cbe43":"code","5bfe1890":"code","c11dda16":"code","1cc97f7d":"code","adca8e8d":"code","e506c4ab":"code","585c36f5":"code","c1831746":"code","7a2c3236":"code","fa5c326e":"code","20308259":"code","13713055":"code","171d7baa":"code","c945fb69":"code","277ef568":"code","d4a22dcc":"code","56712491":"code","2be9b88f":"code","1386b7c5":"code","49a80b19":"code","098c6193":"code","bcbfd584":"markdown","dbd5d2e3":"markdown","1d2a0faf":"markdown","681eeea8":"markdown","3ae11815":"markdown","440e6781":"markdown","079652ea":"markdown","8a29791d":"markdown","40c3c36d":"markdown","731fbfd1":"markdown","fc6b0016":"markdown","a196b858":"markdown","d0b77459":"markdown","534ed6c8":"markdown","e9f277e8":"markdown","34ab7ae4":"markdown","a1ec5f16":"markdown","40872281":"markdown","30604bbb":"markdown","da3e49b7":"markdown","630f9029":"markdown","9a5a820a":"markdown","f6cca216":"markdown","d16a641b":"markdown","dcd66dd8":"markdown","eda7cba9":"markdown"},"source":{"8bcfccbd":"import os\nimport time\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nimport keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation, CuDNNGRU, Conv1D, CuDNNLSTM\nfrom keras.layers import Bidirectional, GlobalMaxPool1D\nfrom keras.models import Model\nfrom keras import initializers, regularizers, constraints, optimizers, layers\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b35d2966":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Train shape : \",train_df.shape)\nprint(\"Test shape : \",test_df.shape)","c2e9e27b":"## split to train and val\ntrain_df, val_df = train_test_split(train_df, test_size=0.1, random_state=2018)\n\n## some config values \nembed_size = 300 # how big is each word vector\nmax_features = 50000 # how many unique words to use (i.e num rows in embedding vector)\nmaxlen = 100 # max number of words in a question to use\n\n## fill up the missing values\ntrain_X = train_df[\"question_text\"].fillna(\"_na_\").values\nval_X = val_df[\"question_text\"].fillna(\"_na_\").values\ntest_X = test_df[\"question_text\"].fillna(\"_na_\").values\n\n## Tokenize the sentences\ntokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(train_X))\ntrain_X = tokenizer.texts_to_sequences(train_X)\nval_X = tokenizer.texts_to_sequences(val_X)\ntest_X = tokenizer.texts_to_sequences(test_X)\n\n## Pad the sentences \ntrain_X = pad_sequences(train_X, maxlen=maxlen)\nval_X = pad_sequences(val_X, maxlen=maxlen)\ntest_X = pad_sequences(test_X, maxlen=maxlen)\n\n## Get the target values\ntrain_y = train_df['target'].values\nval_y = val_df['target'].values","b09604ea":"inp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size)(inp)\nx = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nprint(model.summary())","dd66794d":"## Train the model \nhistory = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","4119d7ed":"pred_noemb_val_y_gru = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1:.4f}, Precision is {2:.4f} and Recall is {3:.4f}\".format(thresh, metrics.f1_score(val_y, (pred_noemb_val_y_gru>thresh).astype(int)), metrics.precision_score(val_y, (pred_noemb_val_y_gru>thresh).astype(int)),metrics.recall_score(val_y, (pred_noemb_val_y_gru>thresh).astype(int))))","79ae657a":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_noemb_val_y_gru>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_noemb_val_y_gru>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_noemb_val_y_gru>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","f2a90a21":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","c7f67392":"pred_noemb_test_y_gru = model.predict([test_X], batch_size=1024, verbose=1)","f146eca2":"del model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","37c7cf7d":"inp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size)(inp)\nx = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nprint(model.summary())","9228f30c":"## Train the model \nhistory = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","f752bc69":"pred_noemb_val_y_lstm = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_noemb_val_y_lstm>thresh).astype(int)), metrics.precision_score(val_y, (pred_noemb_val_y_lstm>thresh).astype(int)),metrics.recall_score(val_y, (pred_noemb_val_y_lstm>thresh).astype(int))))","ef00fdf0":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_noemb_val_y_lstm>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_noemb_val_y_lstm>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_noemb_val_y_lstm>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","3a5f6421":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","85ea5ebe":"pred_noemb_test_y_lstm = model.predict([test_X], batch_size=1024, verbose=1)","d503bc86":"del model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","432b0748":"!ls ..\/input\/embeddings\/","d7146431":"EMBEDDING_FILE = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE))\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n        \ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nx = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","a0db4b80":"history = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","910bb97b":"pred_glove_val_y_gru = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_glove_val_y_gru>thresh).astype(int)), metrics.precision_score(val_y, (pred_glove_val_y_gru>thresh).astype(int)),metrics.recall_score(val_y, (pred_glove_val_y_gru>thresh).astype(int))))","953f8adf":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_glove_val_y_gru>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_glove_val_y_gru>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_glove_val_y_gru>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","0d7dbd1b":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","d52a06af":"pred_glove_test_y_gru = model.predict([test_X], batch_size=1024, verbose=1)","2fa1243a":"del word_index, embeddings_index, all_embs, embedding_matrix, model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","15820688":"EMBEDDING_FILE = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE))\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n        \ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nx = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","c4614373":"history = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","01a7e7a9":"pred_glove_val_y_lstm = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_glove_val_y_lstm>thresh).astype(int)), metrics.precision_score(val_y, (pred_glove_val_y_lstm>thresh).astype(int)),metrics.recall_score(val_y, (pred_glove_val_y_lstm>thresh).astype(int))))","86fd21d8":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_glove_val_y_lstm>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_glove_val_y_lstm>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_glove_val_y_lstm>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","0567c5ad":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","d99ec57b":"pred_glove_test_y_lstm = model.predict([test_X], batch_size=1024, verbose=1)","669fce4e":"del word_index, embeddings_index, all_embs, embedding_matrix, model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","4d613b2f":"EMBEDDING_FILE = '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE) if len(o)>100)\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n        \ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nx = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","31dbd76a":"history = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","6ad6225b":"pred_fasttext_val_y_gru = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_fasttext_val_y_gru>thresh).astype(int)), metrics.precision_score(val_y, (pred_fasttext_val_y_gru>thresh).astype(int)),metrics.recall_score(val_y, (pred_fasttext_val_y_gru>thresh).astype(int))))","c1b0e3bd":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_fasttext_val_y_gru>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_fasttext_val_y_gru>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_fasttext_val_y_gru>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","fae31009":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","0e3947e5":"pred_fasttext_test_y_gru = model.predict([test_X], batch_size=1024, verbose=1)","82b2d5ff":"del word_index, embeddings_index, all_embs, embedding_matrix, model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","68639b67":"EMBEDDING_FILE = '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE) if len(o)>100)\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n        \ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nx = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","6c8038b0":"history = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","044f1b32":"pred_fasttext_val_y_lstm = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_fasttext_val_y_lstm>thresh).astype(int)), metrics.precision_score(val_y, (pred_fasttext_val_y_lstm>thresh).astype(int)),metrics.recall_score(val_y, (pred_fasttext_val_y_lstm>thresh).astype(int))))","2697a5be":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_fasttext_val_y_lstm>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_fasttext_val_y_lstm>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_fasttext_val_y_lstm>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","060a6cbd":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","9a1cbe43":"pred_fasttext_test_y_lstm = model.predict([test_X], batch_size=1024, verbose=1)","5bfe1890":"del word_index, embeddings_index, all_embs, embedding_matrix, model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","c11dda16":"EMBEDDING_FILE = '..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE, encoding=\"utf8\", errors='ignore') if len(o)>100)\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n        \ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nx = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","1cc97f7d":"history = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","adca8e8d":"pred_paragram_val_y_gru = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_paragram_val_y_gru>thresh).astype(int)), metrics.precision_score(val_y, (pred_paragram_val_y_gru>thresh).astype(int)),metrics.recall_score(val_y, (pred_paragram_val_y_gru>thresh).astype(int))))","e506c4ab":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_paragram_val_y_gru>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_paragram_val_y_gru>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_paragram_val_y_gru>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","585c36f5":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","c1831746":"pred_paragram_test_y_gru = model.predict([test_X], batch_size=1024, verbose=1)","7a2c3236":"del word_index, embeddings_index, all_embs, embedding_matrix, model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","fa5c326e":"EMBEDDING_FILE = '..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE, encoding=\"utf8\", errors='ignore') if len(o)>100)\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n        \ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nx = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\nx = GlobalMaxPool1D()(x)\nx = Dense(16, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","20308259":"history = model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","13713055":"pred_paragram_val_y_lstm = model.predict([val_X], batch_size=1024, verbose=1)\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_paragram_val_y_lstm>thresh).astype(int)), metrics.precision_score(val_y, (pred_paragram_val_y_lstm>thresh).astype(int)),metrics.recall_score(val_y, (pred_paragram_val_y_lstm>thresh).astype(int))))","171d7baa":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_paragram_val_y_lstm>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_paragram_val_y_lstm>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_paragram_val_y_lstm>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","c945fb69":"#Train\/Test loss v\/s Epoch\ndata = pd.DataFrame(data={'Train': history.history['loss'], 'Test': history.history['val_loss']})\nax = sns.lineplot(data=data, palette=\"pastel\", linewidth=2.5, dashes=False)\nax.set(xlabel='Epoch', ylabel='Loss', title='Loss')\nsns.despine()\nplt.show()","277ef568":"pred_paragram_test_y_lstm = model.predict([test_X], batch_size=1024, verbose=1)","d4a22dcc":"del word_index, embeddings_index, all_embs, embedding_matrix, model, inp, x, history, data, ax\nimport gc; gc.collect()\ntime.sleep(10)","56712491":"pred_val_y_gru = 0.34*pred_glove_val_y_gru + 0.33*pred_fasttext_val_y_gru + 0.33*pred_paragram_val_y_gru \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_val_y_gru>thresh).astype(int)), metrics.precision_score(val_y, (pred_val_y_gru>thresh).astype(int)),metrics.recall_score(val_y, (pred_val_y_gru>thresh).astype(int))))","2be9b88f":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_val_y_gru>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_val_y_gru>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_val_y_gru>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","1386b7c5":"pred_val_y_lstm = 0.34*pred_glove_val_y_lstm + 0.33*pred_fasttext_val_y_lstm + 0.33*pred_paragram_val_y_lstm \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    print(\"At threshold {0}, F1 score is {1}, Precision is {2} and Recall is {3}\".format(thresh, metrics.f1_score(val_y, (pred_val_y_lstm>thresh).astype(int)), metrics.precision_score(val_y, (pred_val_y_lstm>thresh).astype(int)),metrics.recall_score(val_y, (pred_val_y_lstm>thresh).astype(int))))","49a80b19":"#Plot of F1 score, Precision and Recall for different thresholds \nf1s = []\nprecisions = []\nrecalls = []\n    \nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    f1 = metrics.f1_score(val_y, (pred_val_y_lstm>thresh).astype(int))\n    precision = metrics.precision_score(val_y, (pred_val_y_lstm>thresh).astype(int))\n    recall = metrics.recall_score(val_y, (pred_val_y_lstm>thresh).astype(int))\n\n    f1s.append(f1)\n    precisions.append(precision)\n    recalls.append(recall)\n\n    data = pd.DataFrame(data = {\n        'F1': f1s,\n        'Precision': precisions,\n        'Recall': recalls})\nsns.lineplot(data=data, palette='muted', linewidth=2.5, dashes=False)\nsns.despine()\nplt.show()","098c6193":"pred_test_y_gru = 0.34*pred_glove_test_y_gru + 0.33*pred_fasttext_test_y_gru + 0.33*pred_paragram_test_y_gru\npred_test_y_gru = (pred_test_y_gru>0.35).astype(int)\nout_df = pd.DataFrame({\"qid\":test_df[\"qid\"].values})\nout_df['prediction'] = pred_test_y_gru\nout_df.to_csv(\"submission.csv\", index=False)","bcbfd584":"Train the model using train sample and monitor the metric on the valid sample. This is just a sample model running for 2 epochs. Changing the epochs, batch_size and model parameters might give us a better model.","dbd5d2e3":"The result seems to better than individual pre-trained models and so we let us create a submission file using this model blend.","1d2a0faf":"**Averaging all 3 embeddings - Bidirectional GRU Model**","681eeea8":"**8. Paragram Embeddings - Bidirectional LSTM model:**\n\nIn this section, we can use the paragram embeddings and build the model and make predictions.","3ae11815":"Now let us get the test set predictions as well and save them","440e6781":"**Averaging all 3 embeddings - Bidirectional LSTM Model**","079652ea":"So we got some baseline GRU and LSTM model without pre-trained embeddings. Now let us use the provided embeddings and rebuild the model again to see the performance. \n\n","8a29791d":"Now let us get the validation sample predictions and also get the best threshold for F1 score. ","40c3c36d":"**4. Glove Embeddings - Bidirectional LSTM model:**\n\n* In this section, let us use the Glove embeddings and rebuild the LSTM model.","731fbfd1":"Results seem to be better than the model without pretrained embeddings.","fc6b0016":"**Observations:**\n * Overall pretrained embeddings seem to give better results comapred to non-pretrained model. \n * The performance of the different pretrained embeddings are almost similar.\n \n**Final Blend:**\n\nThough the results of the models with different pre-trained embeddings are similar, there is a good chance that they might capture different type of information from the data. So let us do a blend of these three models by averaging their predictions.","a196b858":"Train the model using train sample and monitor the metric on the valid sample. This is just a sample model running for 2 epochs. Changing the epochs, batch_size and model parameters might give us a better model.","d0b77459":"\n**References:**\n\nThanks to the below kernels which helped me with this one. \n1. https:\/\/www.kaggle.com\/jhoward\/improved-lstm-baseline-glove-dropout\n2. https:\/\/www.kaggle.com\/sbongo\/do-pretrained-embeddings-give-you-the-extra-edge","534ed6c8":"**7. Paragram Embeddings - Bidirectional GRU model:**\n\nIn this section, we can use the paragram embeddings and build the model and make predictions.","e9f277e8":"**5. Wiki News FastText Embeddings - Bidirectional GRU model:**\n\nNow let us use the FastText embeddings trained on Wiki News corpus in place of Glove embeddings and rebuild the GRU model.","34ab7ae4":"**1. Without Pretrained Embeddings - Bidirectional GRU model:**\n\nNow that we are done with all the necessary preprocessing steps, we can first train a Bidirectional GRU model. We will not use any pre-trained word embeddings for this model and the embeddings will be learnt from scratch. Please check out the model summary for the details of the layers used. ","a1ec5f16":"Now that our model building is done, it might be a good idea to clean up some memory before we go to the next step.","40872281":"Now that our model building is done, it might be a good idea to clean up some memory before we go to the next step.","30604bbb":"Next steps are as follows:\n * Split the training dataset into train and val sample. Cross validation is a time consuming process and so let us do simple train val split.\n * Fill up the missing values in the text column with '_na_'\n * Tokenize the text column and convert them to vector sequences\n * Pad the sequence as needed - if the number of words in the text is greater than 'max_len' trunacate them to 'max_len' or if the number of words in the text is lesser than 'max_len' add zeros for remaining values.","da3e49b7":"We have four different types of embeddings.\n * GoogleNews-vectors-negative300 - https:\/\/code.google.com\/archive\/p\/word2vec\/\n * glove.840B.300d - https:\/\/nlp.stanford.edu\/projects\/glove\/\n * paragram_300_sl999 - https:\/\/cogcomp.org\/page\/resource_view\/106\n * wiki-news-300d-1M - https:\/\/fasttext.cc\/docs\/en\/english-vectors.html\n \n A very good explanation for different types of embeddings are given in this [kernel](https:\/\/www.kaggle.com\/sbongo\/do-pretrained-embeddings-give-you-the-extra-edge). Please refer the same for more details..\n\n**   **\n\n\n**3. Glove Embeddings - Bidirectional GRU model:**\n\nIn this section, let us use the Glove embeddings and rebuild the GRU model.","630f9029":"**2. Without Pretrained Embeddings - Bidirectional LSTM model:**\n\nNow second we are training a Bidirectional LSTM model. We will not use any pre-trained word embeddings for this model and the embeddings will be learnt from scratch. Please check out the model summary for the details of the layers used. ","9a5a820a":"**Notebook Objective:**\n\nObjective of the notebook is to look at the different pretrained embeddings provided in the dataset and to see how they are useful in the model building process. \n\nFirst let us import the necessary modules and read the input data.","f6cca216":"**6. Wiki News FastText Embeddings - Bidirectional LSTM model:**\n\nNow let us use the FastText embeddings trained on Wiki News corpus in place of Glove embeddings and rebuild the LSTM model.","d16a641b":"Results seem to be better than the model without pretrained embeddings.","dcd66dd8":"Now let us get the validation sample predictions and also get the best threshold for F1 score. ","eda7cba9":"Now let us get the test set predictions as well and save them"}}