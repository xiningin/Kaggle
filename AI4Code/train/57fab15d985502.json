{"cell_type":{"745d7fd0":"code","2fedd11c":"code","f51d9c4b":"code","f8f07828":"code","c64e9e60":"code","09db039c":"code","7a73c41d":"markdown","ae232e66":"markdown"},"source":{"745d7fd0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nimport gc\nwarnings.filterwarnings('ignore')\nimport lightgbm as lgb\nfrom sklearn.model_selection import GroupKFold, StratifiedKFold, train_test_split\nfrom sklearn import metrics\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2fedd11c":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        if col!='open_channels':\n            col_type = df[col].dtypes\n            if col_type in numerics:\n                c_min = df[col].min()\n                c_max = df[col].max()\n                if str(col_type)[:3] == 'int':\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)\n                else:\n                    if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                        df[col] = df[col].astype(np.float16)\n                    elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        df[col] = df[col].astype(np.float32)\n                    else:\n                        df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n","f51d9c4b":"def read_data():\n    print('loading and preparing the data')\n    train1 = pd.read_csv('\/kaggle\/input\/best-filter-and-featureengineering\/final_train1.csv')\n    train1 = reduce_mem_usage(train1)\n    train2 = pd.read_csv('\/kaggle\/input\/best-filter-and-featureengineering\/final_train2.csv')\n    train2 = reduce_mem_usage(train2)\n    train3 = pd.read_csv('\/kaggle\/input\/best-filter-and-featureengineering\/final_train3.csv')\n    train3 = reduce_mem_usage(train3)\n    \n    train = pd.concat([train1, train2, train3], axis = 1)\n    del train1, train2, train3\n    gc.collect()\n    print('train data loaded')\n    \n    test1 = pd.read_csv('\/kaggle\/input\/best-filter-and-featureengineering\/final_test1.csv')\n    test1 = reduce_mem_usage(test1)\n    test2 = pd.read_csv('\/kaggle\/input\/best-filter-and-featureengineering\/final_test2.csv')\n    test2 = reduce_mem_usage(test2)\n    test3 = pd.read_csv('\/kaggle\/input\/best-filter-and-featureengineering\/final_test3.csv')\n    test3 = reduce_mem_usage(test3)\n    \n    test = pd.concat([test1, test2, test3], axis = 1)\n    del test1, test2, test3\n    gc.collect()\n    print('test data loaded')\n    \n    submission = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time':str})\n    \n    return train, test, submission","f8f07828":"train, test, submission = read_data()\nprint(f'Train data have {train.shape[0]} rows and {train.shape[1]} columns.')\nprint(f'Test data have {test.shape[0]} rows and {test.shape[1]} columns.')\n\ny_train = train['open_channels']\ndel train['open_channels']\ngc.collect()\n\nprint(f'  train.shape =', train.shape)\nprint('y_train.shape =', y_train.shape)\nprint(f'   test.shape =', test.shape)","c64e9e60":"def run_lgb(train, test, y_train, params):\n    kf = StratifiedKFold(n_splits = 5, shuffle = True, random_state = 42)\n    oof_pred = np.zeros(len(train))\n    y_pred = np.zeros(len(test))\n     \n    for fold, (tr_ind, val_ind) in enumerate(kf.split(train, y_train)):\n        x_train, x_val = train.iloc[tr_ind], train.iloc[val_ind]\n        y_trainlgb, y_val = y_train[tr_ind], y_train[val_ind]\n        train_set = lgb.Dataset(x_train, y_trainlgb)\n        val_set = lgb.Dataset(x_val, y_val)\n        \n        model = lgb.train(params, train_set, num_boost_round = 10000, early_stopping_rounds = 50, \n                         valid_sets = [train_set, val_set], verbose_eval = 100)\n        \n        oof_pred[val_ind] = model.predict(x_val)\n        \n        y_pred += model.predict(test) \/ kf.n_splits\n        \n    rmse_score = np.sqrt(metrics.mean_squared_error(y_train, oof_pred))\n    # want to clip and then round predictions (you can get a better performance using optimization to found the best cuts)\n    oof_pred = np.round(np.clip(oof_pred, 0, 10)).astype(int)\n    round_y_pred = np.round(np.clip(y_pred, 0, 10)).astype(int)\n    f1 = metrics.f1_score(y_train, oof_pred, average = 'macro')\n    \n    \n    print(f'Our oof rmse score is {rmse_score}')\n    print(f'Our oof macro f1 score is {f1}')\n    return round_y_pred","09db039c":"params = {'boosting_type': 'gbdt',\n          'metric': 'rmse',\n          'objective': 'regression',\n          'n_jobs': -1,\n          'seed': 236,\n          'num_leaves': 280,\n          'learning_rate': 0.026623466966581126,\n          'max_depth': 73,\n          'lambda_l1': 2.959759088169741,\n          'lambda_l2': 1.331172832164913,\n          'bagging_fraction': 0.9655406551472153,\n          'bagging_freq': 9,\n          'colsample_bytree': 0.6867118652742716}\n\n# run model and predict\nround_y_pred = run_lgb(train, test, y_train, params)\nsubmission['open_channels'] = round_y_pred\nsubmission.to_csv('submission.csv', index = False)","7a73c41d":"### Biuld a Model","ae232e66":"### Load the Data"}}