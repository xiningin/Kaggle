{"cell_type":{"50ef9952":"code","7621ae22":"code","0817e872":"code","8a30f25a":"code","71bdecfa":"code","e14d9e7e":"code","a7d3e565":"code","c13894f1":"code","5159eb74":"code","2aa79a26":"code","92d57de8":"code","b98c85a8":"code","035e77cf":"code","7f6f86ea":"code","07553627":"code","8e89dd86":"code","cafaa435":"code","a410f40c":"code","6eaf07ca":"code","3aa2c8a7":"code","b934023a":"code","b8a6a7f5":"code","db338528":"code","5cf01370":"code","9369b505":"code","b4217a83":"code","94d72d6f":"code","9310004c":"code","d60082fc":"code","fb7a5f14":"code","9ba8f389":"code","432137e6":"code","a8e89997":"code","4257b07c":"code","0752b70e":"code","deed907a":"markdown","47c361ee":"markdown","64adb3c3":"markdown","6feaa0b6":"markdown","83f22d9b":"markdown","82edbb37":"markdown","3578a5ed":"markdown","0944f119":"markdown","fa9f7260":"markdown","dd8c6ca7":"markdown","65c9e954":"markdown","fbf9d25c":"markdown","d3f5d0fa":"markdown","fc7dd7f4":"markdown","b4b14650":"markdown","c02beaa7":"markdown","49b53706":"markdown","f8a93063":"markdown","58ec527e":"markdown","e8c2244c":"markdown","bd3f49d3":"markdown"},"source":{"50ef9952":"!pip install plotly","7621ae22":"import os\nimport pandas as pd\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom datetime import date, time, datetime\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nimport plotly.figure_factory as ff\nimport plotly.express as px\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0817e872":"file_path = '\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv'\n\ndf = pd.read_csv(file_path)\ndf.head()","8a30f25a":"scatter = [go.Scatter(x = df['reading score'],\n                      y = df['writing score'],\n                      mode ='markers')] \n\nfig = go.Figure(scatter)\n\niplot(fig)","71bdecfa":"data = [go.Scatter(x = df['reading score'],\n                   y = df['writing score'],\n                   mode = 'markers',\n                   marker = dict(size = 12,\n                                 color = 'rgb(0, 189, 255)',\n                                 symbol = 'diamond',\n                                 opacity = 0.75,\n                                 line={'color': 'black',\n                                       'width': 1.5}))]\n\nlayout = go.Layout(title=dict(text='Reading Score & Writing Score',\n                              y=0.9,\n                              x=0.5,\n                              xanchor= 'center',\n                              yanchor= 'top'),\n                   xaxis={'title':'Reading Score'},\n                   yaxis=dict(title = 'Writing Score'),\n                   hovermode = 'closest',\n                   template = 'plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e14d9e7e":"trace_male = (go.Scatter(x=df[df['gender']=='male']['math score'],\n                         showlegend=True,\n                         text='Male',\n                         y = df[df['gender']=='male']['writing score'],\n                         name='Male',\n                         mode='markers',\n                         marker = dict(color= 'cornflowerblue',\n                                       size = 9,\n                                       opacity = 0.55)))\n\ntrace_female = (go.Scatter(x=df[df['gender'] == 'female']['math score'],\n                           showlegend=True,\n                           text='Female',\n                           y = df[df['gender'] == 'female']['writing score'],\n                           name = 'Female',\n                           mode = 'markers',\n                           marker = dict(color = 'darkorange',\n                                         size = 9,\n                                         opacity = 0.55)))\n        \ndata=[trace_male,trace_female]\n\nlayout= go.Layout(title = 'Math Score & Writing Score',\n                  xaxis = dict(title = 'Math Score'),\n                  yaxis = dict(title = 'Writing Score'),\n                  width = 700,\n                  height = 450,\n                  template = 'simple_white')\n\nfig = go.Figure(data=data,layout=layout)   \niplot(fig)","a7d3e565":"data = [go.Scatter(x = df['reading score'],\n                   y = df['writing score'],\n                   mode = 'markers',\n                   text=df['math score'],\n                   marker=dict(size = 14,\n                               color = df['math score'],\n                               showscale = True,\n                               colorscale = 'Cividis',\n                               colorbar = dict(title='Math Score'),\n                               opacity = 0.6))]\n\nlayout = go.Layout(title=dict(text='Reading Score - Writing Score - Math Score',\n                              y = 0.9,\n                              x = 0.5,\n                              xanchor = 'center',\n                              yanchor = 'top'),\n                   xaxis = dict(title = 'Reading Score'),\n                   yaxis =dict(title = 'Writing Score'),\n                   template='simple_white')\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","c13894f1":"data = []\nfor i in df['parental level of education'].unique():\n    data.append(go.Scatter(x = df[df['parental level of education'] == i]['reading score'],\n                           y = df[df['parental level of education'] == i]['math score'],\n                           mode = 'markers',\n                           name = str(i),\n                           showlegend = True,\n                           marker = dict(size = 12,\n                                          opacity = 0.65)))\n\nlayout = go.Layout(title = 'Scores by Level of Education',\n                   xaxis = dict(title='Reading Score'),\n                   yaxis = dict(title='Math Score'),\n                   template = 'plotly_white')\n\nfig = go.Figure(data=data, layout = layout)\niplot(fig)","5159eb74":"data = [go.Scatter(x = df['reading score'],\n                   y = df['writing score'],\n                   mode = 'markers',\n                   text = df['math score'],\n                   marker = dict(size = df['math score'] * 0.5,\n                                 color = '#FFAE00',\n                                 showscale = False,\n                                 opacity = 0.5,\n                                 line = dict(color = 'black', \n                                             width = 0.5)))]\n\nlayout = go.Layout(title=dict(text = 'Reading Score - Writing Score - Math Score',\n                              y = 0.9,\n                              x = 0.5,\n                              xanchor = 'center',\n                              yanchor = 'top'),\n                   xaxis = dict(title = 'Reading Score'),\n                   yaxis = dict(title = 'Writing Score'),\n                   template ='plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","2aa79a26":"auto_mpg = pd.read_csv('\/kaggle\/input\/autompg-dataset\/auto-mpg.csv', na_values = '?')\n\nauto_mpg = auto_mpg.dropna()\n\ndata = go.Scatter3d(x = auto_mpg['horsepower'],\n                    y = auto_mpg['mpg'],\n                    z = auto_mpg['displacement'],\n                    mode = 'markers',\n                    marker = dict(color = auto_mpg['weight'],\n                                  showscale = True,\n                                  colorbar = dict(title = 'Weight'),\n                                  colorscale = 'brwnyl',\n                                  opacity = 0.7))\n\nlayout = go.Layout(title = dict(text='Horsepower - MPG - Displacement - Weight',\n                                y = 0.9,\n                                x = 0.5,\n                                xanchor = 'center',\n                                yanchor = 'top'),\n                   scene = dict(xaxis = dict(title = 'Horsepower'),\n                                yaxis = dict(title = 'MPG'),\n                                zaxis = dict(title = 'Displacement')),\n                   font = dict(size = 12),\n                   template = 'plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","92d57de8":"students_df = pd.DataFrame({'date': [date(year = 2020 + i, month = 1, day = 1) for i in range(10)],\n                            'students': np.random.randint(25,60,10),\n                            'lecturers': np.random.randint(10, 20, 10)})\n\nstudents_df.head()","b98c85a8":"line = [go.Scatter(x = students_df['date'],\n                   y = students_df['students'],\n                   mode = 'lines')] \n\nfig = go.Figure(data = line)\niplot(fig)","035e77cf":"data = go.Scatter(x = students_df['date'],\n                  y = students_df['students'],\n                  mode = 'lines',\n                  name = 'students')\n\nlayout = go.Layout(title={'text': \"Number of Students by Years\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis = dict(title = 'Year'),\n                   yaxis = dict(title = 'Student'),\n                   template = 'plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","7f6f86ea":"student = go.Scatter(x = students_df['date'],\n                     y = students_df['students'],\n                     mode = 'lines',\n                     name = 'students',\n                     marker = dict(color = 'darkorange'))\n\nlecturer = go.Scatter(x = students_df['date'],\n                     y = students_df['lecturers'],\n                     mode = 'lines',\n                     name = 'lecturers',\n                     marker = dict(color = 'royalblue'))\n\n\nlayout = go.Layout(title={'text': \"Number of Students & Lecturers by Years\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis = dict(title = 'Year'),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = [student, lecturer], layout = layout)\niplot(fig)","07553627":"fig = make_subplots(rows = 1,\n                    cols = 2,\n                    shared_yaxes = True,\n                    subplot_titles = (\"2020-2024\", \"2025-2029\"))\n\nfig.add_trace(go.Scatter(x = students_df['date'][0:5],\n                         y = students_df['students'][0:5],\n                         mode = 'lines',\n                         showlegend = False,\n                         name = 'students20-24',\n                         line = dict(color = '#18FF01',\n                                     width = 3,\n                                     dash = 'dashdot')),\n              row = 1, col = 1)\n                                      \nfig.add_trace(go.Scatter(x = students_df['date'][5:10],\n                         y = students_df['students'][5:10],\n                         mode = 'lines',\n                         showlegend = False,\n                         name = 'students25-29',\n                         line = dict(color = '#01AAFF',\n                                     width = 3,\n                                     dash = 'dash')),\n              row = 1, col = 2)\n\nfig.update_yaxes(title_text = \"Students\", row = 1, col = 1)\nfig.update_yaxes(title_text = \"Students\", row = 1, col = 2)\n\nfig.update_layout(title=dict(text ='Number of Students by Years',\n                             y = 0.9,\n                             x = 0.5,\n                             xanchor = 'center',\n                             yanchor = 'top'),\n                  template = 'simple_white')\n\niplot(fig)","8e89dd86":"bar = go.Figure(go.Bar(x = df.groupby('gender').agg({'reading score':'mean'}). \\\n                       reset_index()['gender'],\n                       y = df.groupby('gender').agg({'reading score':'mean'}). \\\n                       reset_index()['reading score']))\niplot(bar)","cafaa435":"data = go.Bar(x = df.groupby('gender').agg({'math score':'mean'}). \\\n              reset_index()['gender'],\n              y = df.groupby('gender').agg({'math score':'mean'}). \\\n              reset_index()['math score'],\n              width = [0.7, 0.7],\n              marker = dict(color = 'cornflowerblue',\n                            opacity = 0.7,\n                            line_color = 'black',\n                            line_width = 2))\n\nlayout = go.Layout(title='Avg Math Scores by Gender',\n                   xaxis = dict(title='Gender'),\n                   yaxis =dict(title='Math Score'),\n                   width = 700,\n                   height = 700,\n                   template = 'plotly_white')\n\nfig=go.Figure(data = data,\n              layout = layout)\nfig.update_yaxes(range = [0, 100])\niplot(fig)","a410f40c":"data = go.Bar(x = df.groupby('gender').agg({'reading score':'mean'}). \\\n              reset_index()['gender'],\n              y = df.groupby('gender').agg({'reading score':'mean'}). \\\n              reset_index()['reading score'],\n              width=[0.5, 0.5],\n              text =round(df.groupby('gender').agg({'reading score':'mean'}).reset_index()['reading score'],2),\n              textposition= 'outside',\n              textfont = dict(size = 26,\n                             color = 'deeppink'),\n              marker = dict(color = 'pink',\n                            line_color = 'deeppink',\n                            line_width = 3,\n                            opacity = 0.65))\n\nlayout = go.Layout(title = {'text': \"Avg Reading Scores by Gender\",\n                           'y':0.9,\n                           'x':0.5,\n                           'xanchor': 'center',\n                           'yanchor': 'top'},\n                   xaxis = dict(title = 'Gender'),\n                   yaxis =dict(title = 'Reading Score'),\n                   width = 600,\n                   height = 600,\n                   template = 'simple_white')\n\nfig=go.Figure(data = data, layout = layout)\nfig.update_yaxes(range = [0,100])\niplot(fig)","6eaf07ca":"trace1 = go.Bar(x = df.groupby('gender').agg({'reading score':'mean'}).reset_index()['gender'],\n                text = round(df.groupby('gender').agg({'reading score':'mean'}).reset_index()['reading score'],2),\n                textposition = 'auto',\n                y = df.groupby('gender').agg({'reading score':'mean'}).reset_index()['reading score'],\n                name = 'Reading Score',\n                textfont = dict(size = 16),\n                marker = dict(color = '#06F5E3',\n                            opacity = 0.65))\n\ntrace2 = go.Bar(x = df.groupby('gender').agg({'writing score':'mean'}).reset_index()['gender'],\n                text = round(df.groupby('gender').agg({'writing score':'mean'}).reset_index()['writing score'],2),\n                textposition = 'auto',\n                y = df.groupby('gender').agg({'writing score':'mean'}).reset_index()['writing score'],\n                name = 'Writing Score',\n                textfont = dict(size = 16),\n                marker=dict(color='#FEAD00',\n                            opacity = 0.65))\n\ntrace3 = go.Bar(x = df.groupby('gender').agg({'math score':'mean'}).reset_index()['gender'],\n                text =round(df.groupby('gender').agg({'math score':'mean'}).reset_index()['math score'],2),\n                textposition= 'auto',\n                y = df.groupby('gender').agg({'math score':'mean'}).reset_index()['math score'],\n                name = 'Math Score',\n                textfont = dict(size = 16),\n                marker=dict(color='#CC00FE',\n                            opacity = 0.65))\n\nlayout = go.Layout(title={'text': \"Avg Scores by Gender\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   barmode = 'group',legend=dict(x = 0.05,\n                                                 y = 1.0,\n                                                 bgcolor='rgba(255, 255, 255, 0)',\n                                                 bordercolor='rgba(255, 255, 255, 0)'),\n                   xaxis = dict(title = 'Gender'),\n                   yaxis = dict(title = 'Score'),\n                   template ='plotly_white')\n\nfig = go.Figure(data = [trace1,\n                        trace2,\n                        trace3],\n                layout=layout)\nfig.update_yaxes(range=[0,100])\niplot(fig)","3aa2c8a7":"parental_avg = pd.DataFrame(df.groupby(['parental level of education']).mean())\nparental_avg = parental_avg.reset_index()\n\ntrace1 = go.Bar(x = parental_avg['parental level of education'],\n                y = parental_avg['math score'],\n                name = 'math score',\n                marker = dict(color ='#F2E80C',\n                              opacity = 0.7))\n\ntrace2 = go.Bar(x = parental_avg['parental level of education'],\n                y = parental_avg['reading score'],\n                name ='reading score',\n                marker = dict(color ='#44F20C',\n                             opacity = 0.7))\n\ntrace3 = go.Bar(x = parental_avg['parental level of education'],\n                y = parental_avg['writing score'],\n                name='writing score',\n                marker = dict(color = '#F20CE1',\n                              opacity = 0.7))\n\nlayout = go.Layout(title = 'Avg Scores by Level of Education',\n                   barmode = 'stack',\n                   xaxis = dict(title='Level of Education'),\n                   yaxis =dict(title='Score'),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = [trace1, trace2, trace3], layout=layout)\niplot(fig)","b934023a":"pie = go.Figure(data=[go.Pie(labels = df['race\/ethnicity'].value_counts().keys(),\n                             values = df['race\/ethnicity'].value_counts().values)])\n\niplot(pie)","b8a6a7f5":"colors = ['#28F20C', '#0CF2F2', '#F27F0C', '#F20C52']\n\nfig = go.Figure(data=[go.Pie(labels=df['race\/ethnicity'].value_counts().keys(),\n                             values=df['race\/ethnicity'].value_counts().values)])\n\nfig.update_traces(hoverinfo='value', textinfo='label',\n                  textfont_size=16,\n                  textposition ='auto',\n                  showlegend=False,\n                  marker=dict(colors = colors))\n\nfig.update_layout(title={'text': \"Race\/Ethnicity Gropus\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                 template='simple_white')\niplot(fig)","db338528":"colors = ['#14CFE8', '#E814C1']\n\nfig = go.Figure(data=[go.Pie(labels = df['lunch'].value_counts().keys(),\n                             values = df['lunch'].value_counts().values,\n                             pull = [0, 0.25])])\n\nfig.update_traces(hoverinfo ='label',\n                  textinfo ='percent',\n                  textfont_size = 20,\n                  textposition ='auto',\n                  marker=dict(colors=colors,\n                              line = dict(color = 'black',\n                                          width = 1.5)))\n\nfig.update_layout(title={'text': \"Percentages of Lunch Types\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  template='plotly_white')\n\niplot(fig)","5cf01370":"colors = ['#D7DD19', '#6FDD19', '#19DDA5', '#195ADD','#A219DD','#DD1984']\n\nfig = go.Figure(data=[go.Pie(labels = df['parental level of education'].value_counts().keys(),\n                             values = df['parental level of education'].value_counts().values)])\n\nfig.update_traces(hoverinfo='label',\n                  textinfo='value',\n                  hole = 0.4,\n                  textfont_size = 22,\n                  textposition ='auto',\n                  marker=dict(colors = colors,\n                              line = dict(color = 'white',\n                                          width = 2)))\n\nfig.update_layout(title={'text': \"Parental Level of Education\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                          template='simple_white')\n\niplot(fig)","9369b505":"hist = go.Figure(go.Histogram(x = df['reading score']))\niplot(hist)","b4217a83":"data = [go.Histogram(x = df['math score'],\n                     xbins = dict(start = 0,\n                                  end = 100,\n                                  size = 5),\n                     marker=dict(color ='#FFE400',\n                                 line = dict(color='black',\n                                             width=2)))]\n\nlayout = go.Layout(title ='Math Scores Histogram',\n                   xaxis = dict(title='Score'),\n                   yaxis =dict(title='Frequency'),\n                   width=700,height=450, template = 'simple_white')\n\nfig = go.Figure(data = data, layout = layout)\n\niplot(fig)","94d72d6f":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df[df['gender']=='male']['reading score'],\n                           xbins = dict(start = 0,\n                                        end =100,\n                                        size =5),\n                           name='Male',\n                           marker=dict(color = '#0891EF',\n                                       opacity = 0.5)))\n\nfig.add_trace(go.Histogram(x=df[df['gender']=='female']['reading score'],\n                           xbins = dict(start = 0,\n                                        end =100,\n                                        size =5),\n                           name='Female',\n                           marker =dict(color ='#FF00E0',\n                                        opacity = 0.5)))\n\nfig.update_layout(title='Reading Scores Histogram',\n                  barmode='overlay',\n                  xaxis = dict(title='Score'),\n                  yaxis =dict(title='Frequency'),\n                  width=700,\n                  height=450)\niplot(fig)","9310004c":"hist_data = []\ngroup_labels=[]\nfor i in range(len(df['race\/ethnicity'].unique())):\n    hist_data.append(df[df['race\/ethnicity'] == df['race\/ethnicity'].unique()[i]]['math score'])\n    group_labels.append(df['race\/ethnicity'].unique()[i])\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size= 5)\n\nfig.update_layout(title={'text': \"Math Scores Distplot\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  barmode='overlay',\n                  template='plotly_white')\n\niplot(fig)","d60082fc":"heatmap = go.Figure(go.Heatmap(x=df['gender'],\n                    y= df['test preparation course'],\n                    z = df['math score'].values.tolist()))\niplot(heatmap)","fb7a5f14":"data = [go.Heatmap(x=df['gender'],\n                   y= df['parental level of education'],\n                   z = df['math score'].values.tolist(),\n                   colorscale = 'Magma')]\n\nlayout = go.Layout(title={'text': \"Gender & Level of Education\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis = dict(title='Gender'),\n                   yaxis =dict(title='Level of Education'),\n                   width=600,\n                   height=450,\n                   template='plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","9ba8f389":"box = go.Figure(go.Box(y = df['reading score'],\n                       name = 'reading score'))\niplot(box)","432137e6":"data = go.Box(y=df['math score'],\n              name = 'Math Score',\n              marker_color='#91E26B')\n\nlayout = go.Layout(title={'text': \"Math Score\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   width = 600,\n                   height = 600)\n\nfig = go.Figure(data = data, layout=layout)\niplot(fig)","a8e89997":"data = [go.Box(x =df['reading score'],\n               showlegend=False,\n               name = 'Reading Score'),\n        go.Box(x=df['writing score'],\n               showlegend=False,\n               name = 'Writing Score'),\n        go.Box(x=df['math score'],\n               showlegend=False,\n               name = 'Math Score')]\n\nlayout = go.Layout(title={'text': \"Scores\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   width = 700,\n                   height=450,\n                   template='plotly_dark')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","4257b07c":"fig = make_subplots(rows=1,cols=2,shared_yaxes=True,subplot_titles=(\"Male\", \"Female\"))\n\nfig.add_trace(go.Box(y =df[df['gender']=='male']['writing score'],\n                     showlegend=False,\n                     name = 'Writing Score',\n                     marker_color='#1760E1'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['gender']=='male']['math score'],\n                     showlegend=False ,\n                     name = 'Math Score',\n                     marker_color='#17E160'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['gender']=='male']['reading score'],\n                     showlegend=False ,\n                     name = 'Reading Score',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['gender']=='female']['writing score'],\n                     showlegend=False,\n                     name = 'Writing Score',\n                     marker_color='#1760E1'),\n              row=1,col=2)\n\nfig.add_trace(go.Box(y =df[df['gender']=='female']['math score'] ,\n                     showlegend=False,\n                     name = 'Math Score',\n                     marker_color='#17E160'),\n              row=1,col=2)\n\nfig.add_trace(go.Box(y =df[df['gender']=='female']['reading score'],\n                     showlegend=False ,\n                     name = 'Reading Score',\n                     marker_color='#E1E117'),\n              row=1,col=2)\n\nfig.update_layout(title={'text': \"Scores by Gender\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","0752b70e":"colors = ['#4BA7CF','#CF5B4B','#B764D6','#E3885B','#5BE3E1']\n\nfig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\n\nfig.add_trace(go.Bar( y = df['race\/ethnicity'].value_counts().values.tolist(), \n                      x = df['race\/ethnicity'].value_counts().index, \n                      text=df['race\/ethnicity'].value_counts().values.tolist(),\n                      textfont=dict(size = 18,\n                                    color = 'white'),\n                      name = 'race\/ethnicity',\n                      textposition = 'auto',\n                      showlegend=False,\n                      marker=dict(color = colors)),\n              row = 1, col = 1)\n\nfig.add_trace(go.Pie(labels=df['race\/ethnicity'].value_counts().keys(),\n                     values=df['race\/ethnicity'].value_counts().values,\n                     textfont = dict(size = 18,\n                                     color = 'white'),\n                     textposition='auto',\n                     showlegend = False,\n                     name = 'race\/ethnicity',\n                     marker=dict(colors = colors)),\n              row = 1, col = 2)\n\nfig.update_layout(title={'text': 'Race\/Ethnicity',\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  template='plotly_dark')\n\niplot(fig)","deed907a":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#3F5075; \">Stacked Bar Charts<\/span>","47c361ee":"<a id = \"2\"><\/a><h1 id=\"Load and Check Data\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Load and Check Data<\/span><\/h1>\n\nThis dataset consists of the marks secured by the students in various subjects.","64adb3c3":"<a id = \"13\"><\/a><h1 id=\"Subplots\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Subplots<\/span><\/h1>\n- Subplots method provides a way to plot **multiple plots** on a **single figure**.\n- Use <code>make_subplots<\/code> to create a subplot, then define the size of the subplot with <code>rows<\/code> and <code>cols<\/code>\n- Set the title of each plot with <code>subplot_titles<\/code>","6feaa0b6":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#3F5075; \">What is Plotly?<\/span>\n\nPlotly is an interactive, open-source plotting library that supports over 40 unique chart types covering a wide range of statistical, financial, geographic, scientific, and 3-dimensional use-cases.\n\nPlotly's Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.\n\n\n\n![image.png](attachment:6cb79bf9-99ec-4a8f-aca5-3bfdaa28d830.png)","83f22d9b":"<a id = \"11\"><\/a><h1 id=\"Heatmaps\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Heatmaps<\/span><\/h1>\n\n- Heatmaps allow the visualization of **3 features**.\n- Categorical or continuous features along the x and y axis to make up a grid, and then a 3rd continuous feature displayed through color.\n- X and Y axis are seperated into intervals to form a grid.\n- **Categorical** features also can be defined on the **x** and **y** axis.\n- Use <code>go.Heatmap<\/code> to define a heatmap.","82edbb37":"<a id = \"3\"><\/a><h1 id=\"Scatter Plots\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Scatter Plots<\/span><\/h1>\n\n- Scatter plots allow the comparison of two variables for a set of data.\n- Depending on the trend of scatter points, we could interpret a correlation.\n- We can create scatter plots with <code>go.Scatter<\/code>\n- Set the title of graph by using <code>title<\/code> in **layout**.\n- We have to set mode as markers to get scatter, otherwise it come ups with lines.\n- The <code>x<\/code> and <code>y<\/code> parameters inside the **title** dictionary represent the position of the title.\n- We can also specify the size of output with <code>width<\/code> and <code>height<\/code>\n- We have to put the data and layout parts we filled in into the figure we created with <code>go.Figure<\/code>","3578a5ed":"<a id = \"5\"><\/a><h1 id=\"3D Scatter Plots\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">3D Scatter Plots<\/span><\/h1>","0944f119":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#3F5075; \">Scatter Plots by Using For Loop<\/span>","fa9f7260":"<span style=\"color:#3F5075;\n             font-size:140%;\n             font-family:Verdana;\">\nIf you liked this notebook, please upvote \ud83d\ude0a\n    \n<span style=\"color:#3F5075;\n             font-size:140%;\n             font-family:Verdana;\">\nIf you have any suggestions or questions, feel free to comment!\n    \n<span style=\"color:#3F5075;\n             font-size:140%;\n             font-family:Verdana;\">\nBest Wishes!","dd8c6ca7":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#3F5075; \">Donut Charts<\/span>\n\n- A donut chart is a pie chart with a hole in the center.\n- Use <code>hole<\/code> to define a hole. In this parameter, **larger values** come up with **bigger holes**.","65c9e954":"<a id = \"10\"><\/a><h1 id=\"Distplots\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Distplots<\/span><\/h1>\n\n- Distribution Plots, or Distplots, typically layer three plots on top of one another.\n- The first is a histogram, where each data point is placed inside a bin of similar values.\n- The second is a rug plot - marks are placed along the x-axis for every data point, which lets you see the distribution of values inside each bin.\n- Lastly, Distribution plots often include a \"kernel density estimate\", or KDE line that tries to describe the shape of the distribution.\n- Use <code>create_distplot<\/code> to define a distplot.","fbf9d25c":"<a id = \"6\"><\/a><h1 id=\"Line Charts\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Line Charts<\/span><\/h1>\n\n- A line chart displays a series of data points (markers) connected by line segments.\n- It is similar to a scatter plot except that the measurement points are ordered (typically by their x-axis value) and joined with straight line segments.\n- Often used to visualize a trend in data over intervals of time - known as a time series.\n- To create a line chart, tune the <code>mode<\/code> parameter as \"line\".\n- Like scatter plots, you can edit marker qualities like line color,line width, etc. in <code>line<\/code> parameter.","d3f5d0fa":"<a id = \"1\"><\/a><h1 id=\"Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Libraries and Utilities<\/span><\/h1>\n\nWe need to install plotly first.","fc7dd7f4":"<a id = \"12\"><\/a><h1 id=\"Box Plots\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Box Plots<\/span><\/h1>\n- Box Plots visualize the variation of a feature by depicting the **continuous numerical** data through quartiles.\n- Seperate the data based on a categorical feature to compare the continuous feature based on catergory.\n- Create a Box Plot with <code>go.Box<\/code>\n- The Box Plot is a way of visually displaying the data distribution through their quartiles.\n- Quartiles seperate the data into four equal parts.\n- **Q1** represents the **first quartile** and is the 25th percentile.\n- **Q2 (the median)** is the 50th percentile and shows that 50% of the scores.\n- Finally, **Q3**, the 75th percentile, is the central point that lies between the median (Q2) and the highest number of the distribution.\n- If we hover over the plot, we can display the median, max, min values and quartiles.","b4b14650":"<a id = \"9\"><\/a><h1 id=\"Histograms\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Histograms<\/span><\/h1>\n\n- A histogram displays an accurate representation of the overall distribution of a **continuous feature**.\n- In graphical objects, <code>go.Histogram<\/code> can be used to create a histogram.\n- To create a histogram, we divide the entire range of values of the continuous feature into a series of intervals.\n- This series of intervals are known as **\"bins\"**.\n- Change the bin size with <code>size<\/code> to get either more or lesss detail.\n- Determine the starting, ending and interval size with <code>xbins<\/code>","c02beaa7":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#3F5075; \">Grouped Bar Charts<\/span>\n\n- A grouped bar chart extends the bar chart, plotting numeric values for levels of two categorical variables instead of one.\n- Bars are grouped by position for levels of one categorical variable, with color indicating the secondary category level within each group.\n- Use <code>barmode<\/code> to define the type of the bar chart.","49b53706":"<span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:28px; color:#FBFAFC; \">Plotly Tutorial \ud83d\udcca\ud83d\udcc8<\/span>","f8a93063":"- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Libraries and Utilities<\/span>](#1)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Load and Check Data<\/span>](#2)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Scatter Plots<\/span>](#3)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Bubble Charts<\/span>](#4)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">3D Scatter Plots<\/span>](#5)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Line Charts<\/span>](#6)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Bar Charts<\/span>](#7)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Pie Charts<\/span>](#8)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Histograms<\/span>](#9)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Distplots<\/span>](#10)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Heatmaps<\/span>](#11)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Box Plots<\/span>](#12)\n- [<span style=\"font-weight: bold; font-family:Verdana; font-size:16px; color:#3F5075; \">Subplots<\/span>](#13)","58ec527e":"<a id = \"8\"><\/a><h1 id=\"Pie Charts\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Pie Charts<\/span><\/h1>\n\n- A pie chart is a circular statistical graphic, which is divided into slices to illustrate numerical proportion.\n- In a pie chart, the arc length of each slice, is proportional to the quantity it represents. While it is named for its resemblance to a pie which has been sliced, there are variations on the way it can be presented.\n- Create a Pie Chart with <code>go.Pie<\/code>","e8c2244c":"<a id = \"7\"><\/a><h1 id=\"Bar Charts\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Bar Charts<\/span><\/h1>\n- A bar chart presents **categorical data** with rectangular bars with heights (or lengths) proportional to the values that they represent.\n- Built a bar chart with <code>go.Bar<\/code>\n- Use <code>text<\/code> to display values on each bar.\n- Bars can be edited with <code>marker<\/code>","bd3f49d3":"<a id = \"4\"><\/a><h1 id=\"Bubble Charts\"><span class=\"label label-default\" style=\"background-color:#3F5075; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Bubble Charts<\/span><\/h1>\n\n- A bubble chart is a type of chart that displays **three dimensions** of data.\n- Bubble charts can be considered a variation of the scatter plot, in which the data points are replaced with bubbles.\n- Define the third variable with <code>size<\/code> in bubble charts."}}