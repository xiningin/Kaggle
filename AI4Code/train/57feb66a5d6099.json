{"cell_type":{"ffad41bc":"code","5bc79f9d":"code","e0c5570d":"code","69321564":"code","7ef11eaf":"code","77562a81":"code","e77336ec":"code","b8a222a2":"code","4ac19472":"code","fea938ea":"code","1a6d7fcd":"code","c7a1e7c7":"code","f2eac091":"code","f896e9ca":"code","b2dfb52c":"code","a4910793":"code","ae6fc49c":"code","f96aa93b":"code","42ed2eef":"code","7f908573":"code","a9003599":"markdown","f6a70283":"markdown"},"source":{"ffad41bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5bc79f9d":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom keras.utils.np_utils import to_categorical\n\nimport matplotlib.pyplot as plt","e0c5570d":"df_train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\ndf_train.head()","69321564":"# check for null values in the columns to drop any irrelvant columns\ndf_train.isnull().sum()","7ef11eaf":"print(df_train.shape)\ndf_train = df_train.dropna(thresh=2)\ndf_train.shape","77562a81":"# replace all the Nan \ndf_train['keyword'] = df_train['keyword'].fillna(\"nokeyword\")\ndf_test['keyword'] = df_test['keyword'].fillna(\"nokeyword\")\ndf_train['location'] = df_train['location'].fillna(\"nolocation\")","e77336ec":"#plot the counter value plot for the target \ndf_train['target'].value_counts().plot.bar()","b8a222a2":"import string\nimport re\nimport nltk\nimport tqdm\n\ntqdm.tqdm(nltk.download('punkt'))\npunct = string.punctuation\nstopwords = nltk.corpus.stopwords.words()\nwl = nltk.WordNetLemmatizer()","4ac19472":"def text_preprocessing(text):\n    text = text.lower()\n    text = \"\".join(word for word in text if word not in punct)\n    text = re.split(\"\\W+\", text)\n    text = \" \".join(wl.lemmatize(word) for word in text if word not in stopwords)\n    return text\ndf_train['clean_text'] = df_train['text'].apply(lambda x: text_preprocessing(x))\ndf_test['clean_text'] = df_test['text'].apply(lambda x: text_preprocessing(x))\n\ndf_train.head()","fea938ea":"#hyper parameter\nvocab_size = 10000\nembedding_dim = 16\nmax_len = 150\ntrunc_type = \"post\"\noov_tok = \"<OOV>\"\ntraining_size = 20000","1a6d7fcd":"#Tokenzing the text\ntokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(df_train['clean_text'])\nword_index = tokenizer.word_index","c7a1e7c7":"#create the input word sequence and new features \n\ntrain_word_sequence = tokenizer.texts_to_sequences(df_train['clean_text'])\ntrain_padd_sequence = pad_sequences(train_word_sequence, maxlen=max_len, truncating=trunc_type)\nprint(train_padd_sequence.shape)\nprint(train_padd_sequence.reshape(7613*150).max())\n#train_padd_sequence = train_padd_sequence \/ 9999.0\n\ntest_word_sequence = tokenizer.texts_to_sequences(df_test['clean_text'])\ntest_padd_sequence = pad_sequences(test_word_sequence, maxlen=max_len, truncating=trunc_type)\n#test_padd_sequence = test_padd_sequence \/ 9999.0\n\ndf_train['text_len'] = df_train['text'].apply(lambda x : len(x) - x.count(\" \"))\ndf_test['text_len'] = df_test['text'].apply(lambda x : len(x) - x.count(\" \"))\n\n# get the count of capital words in the text\n\ndef count_capital(text):\n    text = re.split(\"\\W+\", text)\n    count = sum([1 for word in text if word.isupper()])\n    return count\n\ndf_train['capital'] = df_train['text'].apply(lambda x: count_capital(x))\ndf_test['capital'] = df_test['text'].apply(lambda x: count_capital(x))\n\n# get the number of hashtags in the text\ndef count_hashtag(text):\n    count = sum([1 for word in text if word == \"#\"])\n    return count\ndf_train['hashtag'] = df_train['text'].apply(lambda x: count_hashtag(x))\ndf_test['hashtag'] = df_test['text'].apply(lambda x: count_hashtag(x))\n\ndf_train.head()\npd.plotting.hist_series(df_train['text_len'])\nprint(df_train['text_len'].max())\n","f2eac091":"bins = np.linspace(0,150,20)\nplt.hist(df_train['text_len'] ** 1\/2, bins)\nplt.title(\"Text len distribution\")\nplt.show()","f896e9ca":"from sklearn.feature_extraction.text import CountVectorizer\ntfidf_vect= CountVectorizer()\n#print(df_train['keyword'])\nx_feature_keyword = tfidf_vect.fit_transform(df_train['keyword'])\nx_feature_keyword = x_feature_keyword.toarray()\n\nx_test_keyword = tfidf_vect.fit_transform(df_test['keyword'])\nx_test_keyword = x_test_keyword.toarray()","b2dfb52c":"#Create the Input feature: the text , text_len and capital word count\nX_features = pd.concat([df_train['capital'], df_train['hashtag'], df_train['text_len'], pd.DataFrame(x_feature_keyword), pd.DataFrame(train_padd_sequence)],axis=1 )\nX_test_features = pd.concat([df_test['capital'], df_test['hashtag'], df_test['text_len'], pd.DataFrame(x_test_keyword), pd.DataFrame(test_padd_sequence)],axis=1 )\nX_features.head()","a4910793":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_features, df_train['target'], test_size = 0.2)\nprint(X_train.shape)","ae6fc49c":"# Create the model\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_len+2),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True)),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Dense(64, activation = \"relu\"),\n    tf.keras.layers.Dense(1, activation = \"sigmoid\")\n])\nmodel.summary()","f96aa93b":"#compliling and Training the model\nmodel.compile(optimizer=\"adam\", loss = tf.keras.losses.binary_crossentropy, metrics = [\"accuracy\"])\nhistory = model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 2)","42ed2eef":"y_pred = model.predict_classes(X_test_features)\n\nsample_sub=pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')\n\ny_pred = np.round(y_pred).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pred})\nsub.to_csv('submission.csv',index=False)\n","7f908573":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(sample_sub['target'],y_pred)\n\nprint(cm)\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\n\nplt.title('Confusion matrix')\nfig.colorbar(cax)\n\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n","a9003599":"**we can drop the rows where both the keyword and location are NaN\nbut none of the rows have both the columns Nan","f6a70283":"# Text Preprocessing"}}