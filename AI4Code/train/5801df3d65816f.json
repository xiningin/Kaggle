{"cell_type":{"d4c745c7":"code","66a3fa39":"code","5eac0a27":"code","7034e632":"code","c3439b90":"code","f123302b":"code","2d9e640e":"code","ea593bc7":"code","32a32ca3":"code","edefdcd6":"code","b95a10d1":"code","23af1823":"code","fc27acb2":"code","fe2981e8":"code","23957036":"code","ebf44020":"code","4627ec28":"code","88aa4e0b":"code","d0aaeb7c":"code","3ae99805":"code","0d193c42":"code","4c5c8aa3":"code","f6c4bc3e":"code","1a64ca21":"code","e66ab22b":"code","9872cdba":"code","f52ad8b8":"code","aae4deae":"code","bdeb369c":"code","6ba72130":"code","7eaefbdf":"code","92f6ea83":"code","64d59ae0":"code","c390d9cd":"code","882b84aa":"code","4c3eeb09":"code","b72d8072":"code","ee3f4bcc":"code","1ef559da":"code","9d2c6c51":"code","b205bd18":"code","76abfe59":"code","e99645b6":"code","c900d0e2":"code","4e81e975":"code","b5285502":"code","0ac1094b":"code","81fe4a6f":"code","a4e2c21d":"code","8df61580":"code","02b750da":"code","155db38a":"code","58108806":"code","2d6bd55c":"code","3969710e":"code","d6fa5165":"code","c4de20e0":"code","6e71aa50":"code","10513b54":"code","86723fce":"code","87a4c44a":"code","24c9ecf9":"code","d126e44f":"code","34770497":"code","672d75a3":"code","5d8674a4":"code","1c3ead6b":"code","92599480":"code","8188a55f":"code","12bc48c2":"code","97bf66e5":"code","adb7af06":"code","89172022":"code","ce17205d":"code","9e4d00b3":"code","347b996d":"code","29e4e155":"code","1f47be11":"code","fedf997c":"code","616b55f7":"code","21534aef":"code","82d3d9cc":"code","9f33867a":"code","f25c2a10":"code","60867bb3":"code","3d2468f9":"code","7feacbc9":"code","ad5226ca":"code","038e8c00":"code","a0d76453":"code","5318a4ea":"code","bb3df912":"code","a8f815fc":"code","c3f87d7a":"code","e194eba9":"code","985e8bbc":"code","7bd9948f":"code","c68c483d":"code","d54b7586":"code","d1305791":"code","5555091d":"code","0d0d0ab7":"code","9d75d98b":"code","faf5c480":"code","d1848154":"code","79d326ad":"code","fd327c4f":"code","7d59ae29":"code","e62da9f0":"code","afac94bf":"code","cc8ad139":"code","2e5d1782":"code","cf99255d":"code","035ceb54":"code","51c3fbaf":"code","10280b07":"code","ceda6352":"code","76907800":"code","5ba8e89f":"code","bc57e8d6":"code","e0628155":"code","1976d76e":"code","b6257a18":"code","2ea299f8":"code","6194f4b4":"code","38db828c":"code","d56b3688":"code","5451194b":"code","7063fd4d":"code","04e4c2fd":"code","e268c8a3":"code","f53c9e53":"code","6a20ee41":"code","c131cb67":"code","d708665a":"code","1a36a7f7":"code","c70137ac":"code","c67f608f":"code","7ce4580f":"code","fb4ba856":"code","dd7e8492":"code","b3ed7f93":"code","ba59ec2c":"code","e894c8c4":"code","81825ea8":"code","ac919c3e":"code","122be72e":"code","740820b8":"code","59a4bf82":"code","d50644c0":"code","d53fbcb8":"code","e3ba68b9":"code","5a8ea5d0":"code","b6f477cd":"code","4285fe3a":"code","8eb76626":"markdown","a7645023":"markdown","fbb46519":"markdown","b285ac0a":"markdown","572e84d1":"markdown","c89f0901":"markdown","bf8d90b1":"markdown","6a26f142":"markdown","b8d374f2":"markdown","465d2738":"markdown","b16e2936":"markdown","d57e0f62":"markdown","1e42ff31":"markdown","58bd9cf5":"markdown","b480f082":"markdown","33204e93":"markdown","6c74b806":"markdown","a477f002":"markdown","38fd4d5a":"markdown","4053cad2":"markdown","5dcb61bf":"markdown","426b9f91":"markdown","d7b7c332":"markdown","e8caeef3":"markdown","b6dabca4":"markdown","06a74f92":"markdown","38be32d9":"markdown","2f97dbf4":"markdown","72fa8bbb":"markdown","622e9aff":"markdown","3497cb78":"markdown","ad411757":"markdown","3ce5bc3e":"markdown","61a2951d":"markdown","eed1cbe6":"markdown","e69d58d5":"markdown","f12e532d":"markdown","91d44152":"markdown","80315373":"markdown","722774c4":"markdown"},"source":{"d4c745c7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport matplotlib.patches as patches\nimport seaborn as sns\nfrom ipywidgets import interact\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio","66a3fa39":"#loading pffscouting data\npffs = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\n#checking its shape\npffs.shape","5eac0a27":"#checking 1st 5 rows\npffs.head()","7034e632":"#checking summary\npffs.info()","c3439b90":"#checking for null values\npffs.isnull().sum()","f123302b":"# unique games played can be determined by the game ID.\npffs.gameId.nunique()","2d9e640e":"#Play identifier, not unique across games (numeric)\npffs.playId.nunique()","ea593bc7":"# counting different types of snap details\nprint(\"Unique NFL Snap Details values and their counts :\")\npffs_sd = pffs.pivot_table(index = ['snapDetail'], aggfunc = 'size') \npffs_sd = pffs_sd.reset_index()\npffs_sd.columns= [\"Snap Details\", \"Counts\"]\npffs_sd = pffs_sd.sort_values(\"Counts\", ascending = False)\nprint(pffs_sd)","32a32ca3":"px.bar(pffs_sd, x=\"Snap Details\", y=\"Counts\", title=\"Distinct Count Of Snap Details\", color=\"Snap Details\")","edefdcd6":"fig = px.scatter(pffs, x='hangTime', y='operationTime')\n\nfig.update_traces(marker=dict(size=6,\n                              line=dict(width=0.5,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()","b95a10d1":"# Counting different types of kick played\nKick_type = pffs['kickType'].value_counts().reset_index()","23af1823":"Kick_type.rename(columns = {'index' : 'Type_of_kick', 'kickType' : 'Count'}, inplace=True)","fc27acb2":"Kick_type","fe2981e8":"# Creating and printing of a pie chart of different types of kick count played in the game\nfig= px.pie(Kick_type, values='Count', names='Type_of_kick', title='count of Kick Type',width=800,height=600)\nfig.show()","23957036":"#loading the players dataset\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\n\n#checking the shape of players dataset\nplayers.shape","ebf44020":"#checking the first 5 rows of the dataset\nplayers.head()","4627ec28":"#checking the summary of the dataset\nplayers.info()","88aa4e0b":"#dropping the null values present in the dataset\nplayers = players.dropna()\n\n#rechecking the shape of the dataset after dropping the null values\nplayers.shape","d0aaeb7c":"#checking the counts of unique values\nplayers['height'].value_counts()","3ae99805":"#Parsing object as string and splitting height values into feet and inch\nheight_new = players[\"height\"].str.split(\"-\", n = 1, expand = True)\nheight_new.columns = ['Feet', 'Inch']\nplayers[\"height_feet\"] = pd.to_numeric(height_new[\"Feet\"])\nplayers[\"height_inch\"] = pd.to_numeric(height_new[\"Inch\"])","0d193c42":"# Column - height_feet\nfor i in players[\"height_feet\"]:\n    if i > 7:\n        j = 0.0833333 * i\n        players[\"height_feet\"].replace({i : j}, inplace=True)\n        \n# Column - height_inch\nplayers[\"height_inch\"] = 0.0833333 * players[\"height_inch\"]\n\n# Converting Nan values to zero in height_inch column \nfor i in players[\"height_inch\"]:\n    players[\"height_inch\"] = players[\"height_inch\"].fillna(0)\n\n# combining two height columns\nplayers[\"height_feet\"] = players[\"height_feet\"] + players[\"height_inch\"]\n\n\n","4c5c8aa3":"#dropping height and height_inch column\nplayers = players.drop(['height','height_inch'], axis=1)","f6c4bc3e":"#rechecking top 5 rows\nplayers.head()","1a64ca21":"#rounding up players height upto 1 decimal\nplayers['height_feet'] = players['height_feet'].round(decimals = 1)","e66ab22b":"#convering dtype of birthdate object \nplayers[\"birthDate\"] = pd.to_datetime(players[\"birthDate\"])","9872cdba":"#creating a 'birthYear' column\nplayers['birthYear'] = pd.DatetimeIndex(players['birthDate']).year\nplayers[\"birthYear\"].value_counts()","f52ad8b8":"#rechecking the dataset\nplayers.head()","aae4deae":"#exploring statistical informations\nplayers.describe()","bdeb369c":"#checking for outliers\nfor i in players.columns:\n    fig = px.box(players, x=i,  width=800, height=400) \n    fig.show()","6ba72130":"#Vizualizing player's height by histogram\npx.histogram(players, x=\"height_feet\", title=\"Player's Height In Feet\", nbins=10, color_discrete_sequence=[\"coral\"])","7eaefbdf":"# Vizualizing birthyear by histogram plot\npx.histogram(players, x=\"birthYear\", title=\"Birth Year Of Players\", color_discrete_sequence=[\"darkred\"])","92f6ea83":"# Creating Histogram plot to vizualize weight of the players\npx.histogram(players, x=\"weight\", nbins=10,title=\"Player's Weight In lbs (pounds)\", color_discrete_sequence=[\"darkblue\"])\n","64d59ae0":"print(\"Unique college names and their counts : \")\ncollege_names = players.pivot_table(index = ['collegeName'], aggfunc = 'size') \ncollege_names = college_names.reset_index()\ncollege_names.columns= [\"College Names\", \"Counts\"]\ncollege_names = college_names.sort_values(\"Counts\", ascending = False)\nprint(college_names)","c390d9cd":"# Creating Tree map plot for vizualizing colleges\npx.treemap(college_names, path=['College Names'], values='Counts', color='Counts', title=\"Arrangement Of Colleges From Highest To Lowest Number Of Players\")\n","882b84aa":"#creating dataframe for top10 colleges\ntop_colleges = college_names[0:10]","4c3eeb09":"#vizualizing top10 collleges using piechart\npx.pie(top_colleges, values='Counts', names='College Names', title='Top 10 Colleges Having Higher Number Of Players')\n","b72d8072":"#replacing abbrevated words with keywords\nplayers[\"Position\"].replace({\"WR\": \"Wide Receiver\", \"CB\": \"Corner Back\", \"DE\": \"Defensive End\", \"OLB\": \"Outside Linebacker\",\n                           \"TE\": \"Tight End\", \"T\": \"Tackle\", \"RB\": \"Running Back\", \"G\": \"Guard\", \"DT\": \"Defensive Tackle\",\n                           \"ILB\": \"Inside Linebacker\", \"FS\": \"Free Safety\", \"SS\": \"Strong Safety\", \"C\": \"Center\", \"K\": \"Kicker\",\n                           \"P\": \"Punter\", \"NT\": \"Nose Tackle\", \"LS\": \"Long Snapper\", \"LB\": \"Linebacker\", \"DB\": \"Defensive Back\",\n                           \"MLB\" : \"Middle Linebacker\", \"FB\": \"Full Back\", \"OT\": \"Offensive Tackle\", \"QB\": \"Quarter Back\",\n                           \"OG\": \"Offensive guard\", \"S\": \"Safety\", \"HB\": \"Half Back\"}, inplace=True)\nplayers[\"Position\"]","ee3f4bcc":"print(\"Unique position values and their counts :\")\npos_val = players.pivot_table(index = ['Position'], aggfunc = 'size') \npos_val = pos_val.reset_index()\npos_val.columns= [\"Positions\", \"Counts\"]\npos_val = pos_val.sort_values(\"Counts\", ascending = False)\nprint(pos_val)","1ef559da":"#  Creating Bar plot to vizualize position\npx.bar(pos_val, x=\"Positions\", y=\"Counts\", title=\"Arrangement Of Positions From Frequently Used To Least Used\", color=pos_val[\"Counts\"])\n","9d2c6c51":"@interact\ndef summary(Positions = list(players['Position'].value_counts().index)):\n    x = players[players['Position']== Positions]\n    z = players.drop(['nflId','collegeName','displayName','Position','birthDate','birthYear'],axis=1)\n    for i in z:\n        print('Minimum', i, x[i].min())\n        print('Average', i, x[i].mean())\n        print('Maximum', i, x[i].max())\n        print('--------------------------------------------------')","b205bd18":"print('Positions which requires tall players', players[players['height_feet']>6.5]['Position'].unique())\nprint('Position which requires players having high in weight:', players[players['weight']>350]['Position'].unique())","76abfe59":"#loading the dataset\ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\n\n#checking the shape of the dataset\ngames.shape","e99645b6":"#checking first five rows\ngames.head()","c900d0e2":"#Concating elements of columns gameDate and gameTimeEastern\ngames['date']=games.gameDate.str.cat(games.gameTimeEastern)\ngames.head()","4e81e975":"#checking the summary\ngames.info()","b5285502":"# converting the object to datetime data type \ngames['date'] = pd.to_datetime(games['date'], format=\"%m\/%d\/%Y%H:%M:%S\")","0ac1094b":"# creating a table for number of games played in particular season\nSeason = games.pivot_table(index =['season'],aggfunc ='size')\nSeason = Season.reset_index()\nSeason.columns =['Seasons','Total games']\nSeason = Season.sort_values('Total games',ascending = False)\nprint(Season)","81fe4a6f":"#creating a barplot of total game count vs seasons using plotly \nfig = px.pie(Season,names= 'Seasons',values ='Total games',title = 'SEASONS',width=500, height=500)\nfig.show()","a4e2c21d":"# Creating a table for Unique NFL weeks and their counts\nprint(\"Unique NFL weeks and their counts :\")\ng_week = games.pivot_table(index = ['week'], aggfunc = 'size') \ng_week = g_week.reset_index()\ng_week.columns= [\"Weeks\", \"Counts\"]\ng_week = g_week.sort_values(\"Counts\", ascending = False)\nprint(g_week)","8df61580":"# Creating Bar plot of Weeks vs Counts\npx.bar(g_week, x=\"Weeks\", y=\"Counts\", title=\"NFL Weeks\", color=\"Weeks\")","02b750da":"# Creating a table for Unique NFL dates and their Counts\nprint(\"Unique NFL dates and their counts :\")\ng_date = games.pivot_table(index = ['gameDate'], aggfunc = 'size') \ng_date = g_date.reset_index()\ng_date.columns= [\"Date\", \"Counts\"]\ng_date = g_date.sort_values(\"Counts\", ascending = False)\nprint(g_date)","155db38a":"# Creating Bar plot\npx.bar(g_date, x=\"Date\", y=\"Counts\", title='Dates On Which NFL Events Occurred', color=\"Counts\")\n","58108806":"print(\"Data type of gameDate column before parsing : \", games[\"gameDate\"].dtypes)\ngames[\"gameDate\"] = pd.to_datetime(games[\"gameDate\"])\nprint(\"Data type of gameDate column after parsing : \", games[\"gameDate\"].dtypes)\nprint(games[\"gameDate\"].head())","2d6bd55c":"games['gameYear'] = pd.DatetimeIndex(games['gameDate']).year\nprint(games[\"gameYear\"])","3969710e":"# Creating a table for different years vs total games played on those years to check the correctness of data given for seasons\nprint(\"Unique NFL years and their counts :\")\ng_year = games.pivot_table(index = ['gameYear'], aggfunc = 'size') \ng_year = g_year.reset_index()\ng_year.columns= [\"Year\", \"Counts\"]\ng_year = g_year.sort_values(\"Counts\", ascending = False)\nprint(g_year)","d6fa5165":"# Creating Bar plot\npx.bar(g_year, x=\"Year\", y=\"Counts\", title=\"Distinct Count Of NFL Event Years\", color=\"Year\",width=800, height=600)","c4de20e0":"games[\"gameMonthName\"] = games[\"gameDate\"].dt.month_name()\nprint(games[\"gameMonthName\"])","6e71aa50":"print(\"Unique NFL months and their counts :\")\ng_month = games.pivot_table(index = ['gameMonthName'], aggfunc = 'size') \ng_month = g_month.reset_index()\ng_month.columns= [\"Month\", \"Counts\"]\ng_month = g_month.sort_values(\"Counts\", ascending = False)\nprint(g_month)","10513b54":"# Creating Bar plot\npx.bar(g_month, x=\"Month\", y=\"Counts\", title=\"Distinct Count Of NFL Event Months\", color=\"Month\",width=900, height=600)","86723fce":"print(\"Unique NFL timings and their counts :\")\ng_time = games.pivot_table(index = ['gameTimeEastern'], aggfunc = 'size') \ng_time = g_time.reset_index()\ng_time.columns= [\"Time\", \"Counts\"]\ng_time = g_time.sort_values(\"Counts\", ascending = False)\nprint(g_time)","87a4c44a":"# Creating Bar plot\npx.bar(g_time, x=\"Time\", y=\"Counts\", title=\"Distinct Count Of NFL Event Timings\", color=\"Counts\",width=800, height=600)\n","24c9ecf9":"#loading dataset\npd.pandas.set_option('display.max_columns', None)\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')","d126e44f":"#checking shape\nplays.shape","34770497":"#checking top 5 rows\nplays.head()","672d75a3":"#checking summary of the dataset\nplays.info()","5d8674a4":"#checking for null values\nplays.isnull().sum()","1c3ead6b":"#checking statistical distibutions\nplays.describe()","92599480":"#plotting a correlation map\nfig=plt.figure(figsize=(14,10))\ncorr=plays.corr('pearson')\nsns.heatmap(corr,cmap='RdBu_r',annot=True)\nplt.show()","8188a55f":"print(\"Unique NFL game quarter values and their counts :\")\nplay_qrtr = plays.pivot_table(index = ['quarter'], aggfunc = 'size') \nplay_qrtr = play_qrtr.reset_index()\nplay_qrtr.columns= [\"Quarter\", \"Counts\"]\nplay_qrtr = play_qrtr.sort_values(\"Counts\", ascending = False)\nprint(play_qrtr)","12bc48c2":"# Creating Bar plot to vizualize quarter\npx.bar(play_qrtr, x=\"Quarter\", y=\"Counts\", title=\"Distinct Count Of NFL Game Quarters\", color=\"Quarter\")\n","97bf66e5":"print(\"Unique NFL game downs and their counts :\")\ng_down = plays.pivot_table(index = ['down'], aggfunc = 'size') \ng_down = g_down.reset_index()\ng_down.columns= [\"Down\", \"Counts\"]\ng_down = g_down.sort_values(\"Counts\", ascending = False)\nprint(g_down)","adb7af06":"# Creating Bar plot to vizualize down\npx.bar(g_down, x=\"Down\", y=\"Counts\", title=\"Distinct Count Of NFL Game Downs\", color=\"Down\")\n","89172022":"print(\"Unique NFL yards to go and their counts :\")\ng_yards = plays.pivot_table(index = ['yardsToGo'], aggfunc = 'size') \ng_yards = g_yards.reset_index()\ng_yards.columns= [\"Yards To Go\", \"Counts\"]\ng_yards = g_yards.sort_values(\"Counts\", ascending = False)\nprint(g_yards)","ce17205d":"# Creating Bar plot\npx.bar(g_yards, x=\"Yards To Go\", y=\"Counts\", title=\"Distinct Count Of Yards To Go In NFL Game\", color=\"Yards To Go\")\n","9e4d00b3":"plays[\"possessionTeam\"].replace({\"ARI\": \"Arizona Cardinals\", \"KC\": \"Kansas City Chiefs\", \"TEN\": \"Tennessee Titans\", \"TB\": \"Tampa Bay Buccaneers\",\n                           \"SF\": \"San Francisco 49ers\", \"SEA\": \"Seattle Seahawks\", \"PIT\": \"Pittsburgh Steelers\", \"PHI\": \"Philadelphia Eagles\",\n                            \"NYJ\": \"New York Jets\", \"NYG\": \"New York Giants\", \"NO\": \"New Orleans Saints\", \"NE\": \"New England Patriots\", \n                             \"MIA\": \"Miami Dolphins\", \"ATL\": \"Atlanta Falcons\", \"LA\": \"Los Angeles Rams\", \"JAX\": \"Jacksonville Jaguars\", \n                             \"IND\": \"Indianapolis Colts\", \"BAL\": \"Baltimore Ravens\", \"BUF\": \"Buffalo Bills\", \"CAR\": \"Carolina Panthers\", \n                             \"CIN\": \"Cincinnati Bengals\", \"CLE\": \"Cleveland Browns\", \"DAL\": \"Dallas Cowboys\", \"DET\": \"Detroit Lions\", \n                             \"GB\": \"Green Bay Packers\", \"HOU\": \"Houston Texans\", \"WAS\": \"Washington Football Team\", \"DEN\": \"Denver Broncos\", \n                             \"MIN\": \"Minnesota Vikings\", \"CHI\": \"Chicago Bears\", \"LAC\": \"Los Angeles Chargers\", \"OAK\": \"Oakland Raiders\", \n                             \"LV\": \"Las Vegas Raiders\"}, inplace=True)","347b996d":"print(\"Unique NFL possession teams and their counts :\")\np_team = plays.pivot_table(index = ['possessionTeam'], aggfunc = 'size') \np_team = p_team.reset_index()\np_team.columns= [\"Possession Team\", \"Counts\"]\np_team = p_team.sort_values(\"Counts\", ascending = False)\nprint(p_team)","29e4e155":"# Creating Bar plot\npx.bar(p_team, x=\"Possession Team\", y=\"Counts\", title=\"Distinct Count Of NFL Possession Teams\", color=\"Counts\")","1f47be11":"print(\"Unique NFL special teams play type and their counts :\")\ngp_type = plays.pivot_table(index = ['specialTeamsPlayType'], aggfunc = 'size') \ngp_type = gp_type.reset_index()\ngp_type.columns= [\"Special Teams Play Type\", \"Counts\"]\ngp_type = gp_type.sort_values(\"Counts\", ascending = False)\nprint(gp_type)","fedf997c":"# Creating Bar plot\npx.bar(gp_type, x=\"Special Teams Play Type\", y=\"Counts\", title=\"Distinct Count Of NFL Special Teams Play Type\", color=\"Counts\")\n","616b55f7":"print(\"Unique NFL special teams result and their counts :\")\ngp_res = plays.pivot_table(index = ['specialTeamsResult'], aggfunc = 'size') \ngp_res = gp_res.reset_index()\ngp_res.columns= [\"Special Teams Result\", \"Counts\"]\ngp_res = gp_res.sort_values(\"Counts\", ascending = False)\nprint(gp_res)","21534aef":"# Creating Bar plot\npx.bar(gp_res, x=\"Special Teams Result\", y=\"Counts\", title=\"Distinct Count Of NFL Special Teams Result\", color=\"Counts\")\n","82d3d9cc":"plays[\"yardlineSide\"].replace({\"ARI\": \"Arizona Cardinals\", \"KC\": \"Kansas City Chiefs\", \"TEN\": \"Tennessee Titans\", \"TB\": \"Tampa Bay Buccaneers\",\n                           \"SF\": \"San Francisco 49ers\", \"SEA\": \"Seattle Seahawks\", \"PIT\": \"Pittsburgh Steelers\", \"PHI\": \"Philadelphia Eagles\",\n                            \"NYJ\": \"New York Jets\", \"NYG\": \"New York Giants\", \"NO\": \"New Orleans Saints\", \"NE\": \"New England Patriots\", \n                             \"MIA\": \"Miami Dolphins\", \"ATL\": \"Atlanta Falcons\", \"LA\": \"Los Angeles Rams\", \"JAX\": \"Jacksonville Jaguars\", \n                             \"IND\": \"Indianapolis Colts\", \"BAL\": \"Baltimore Ravens\", \"BUF\": \"Buffalo Bills\", \"CAR\": \"Carolina Panthers\", \n                             \"CIN\": \"Cincinnati Bengals\", \"CLE\": \"Cleveland Browns\", \"DAL\": \"Dallas Cowboys\", \"DET\": \"Detroit Lions\", \n                             \"GB\": \"Green Bay Packers\", \"HOU\": \"Houston Texans\", \"WAS\": \"Washington Football Team\", \"DEN\": \"Denver Broncos\", \n                             \"MIN\": \"Minnesota Vikings\", \"CHI\": \"Chicago Bears\", \"LAC\": \"Los Angeles Chargers\", \"OAK\": \"Oakland Raiders\", \n                             \"LV\": \"Las Vegas Raiders\"}, inplace=True)","9f33867a":"print(\"Unique NFL yardline sides and their counts :\")\ng_yard = plays.pivot_table(index = ['yardlineSide'], aggfunc = 'size') \ng_yard = g_yard.reset_index()\ng_yard.columns= [\"Yard Line Side\", \"Counts\"]\ng_yard = g_yard.sort_values(\"Counts\", ascending = False)\nprint(g_yard)","f25c2a10":"# Creating Bar plot\npx.bar(g_yard, x=\"Yard Line Side\", y=\"Counts\", title=\"Distinct Count Of NFL Yardline Sides\", color=\"Counts\")","60867bb3":"print(\"Unique NFL yardline numbers and their counts :\")\ng_yard = plays.pivot_table(index = ['yardlineNumber'], aggfunc = 'size') \ng_yard = g_yard.reset_index()\ng_yard.columns= [\"Yard Line Number\", \"Counts\"]\ng_yard = g_yard.sort_values(\"Counts\", ascending = False)\nprint(g_yard)","3d2468f9":"# Creating Bar plot\npx.bar(g_yard, x=\"Yard Line Number\", y=\"Counts\", title=\"Distinct Count Of NFL Yard Line Numbers\", color=\"Yard Line Number\")","7feacbc9":"plays[\"gameClockhour\"] = pd.to_datetime(plays[\"gameClock\"], format=\"%H:%M:%S\").dt.hour\nprint(plays[\"gameClockhour\"])","ad5226ca":"print(\"Unique NFL game hours and their counts :\")\ng_hour = plays.pivot_table(index = ['gameClockhour'], aggfunc = 'size') \ng_hour = g_hour.reset_index()\ng_hour.columns= [\"Game Hour\", \"Counts\"]\ng_hour = g_hour.sort_values(\"Counts\", ascending = False)\nprint(g_hour)","038e8c00":"# Creating Bar plot\npx.bar(g_hour, x=\"Game Hour\", y=\"Counts\", title=\"Distinct Count Of NFL Game Hours\", color=\"Counts\")\n","a0d76453":"print(\"Unique NFL penalty codes and their counts :\")\ng_code = plays.pivot_table(index = ['penaltyCodes'], aggfunc = 'size') \ng_code = g_code.reset_index()\ng_code.columns= [\"Penalty Codes\", \"Counts\"]\ng_code = g_code.sort_values(\"Counts\", ascending = False)\nprint(g_code)","5318a4ea":"# Creating Bar plot\npx.bar(g_code, x=\"Penalty Codes\", y=\"Counts\", title=\"Distinct Count Of NFL Penalty Codes\", color=\"Counts\")","bb3df912":"print(\"Unique NFL penalty yards and their counts :\")\ngp_yard = plays.pivot_table(index = ['penaltyYards'], aggfunc = 'size') \ngp_yard = gp_yard.reset_index()\ngp_yard.columns= [\"Penalty Yards\", \"Counts\"]\ngp_yard = gp_yard.sort_values(\"Counts\", ascending = False)\nprint(gp_yard)","a8f815fc":"# Creating Histogram plot\npx.histogram(plays, x=\"penaltyYards\", nbins=15 , title=\"Distinct Count Of NFL Visitor Teams\", color_discrete_sequence=[\"royalblue\"])\n","c3f87d7a":"print(\"Unique NFL pre-snap home scores and their counts :\")\ng_home = plays.pivot_table(index = ['preSnapHomeScore'], aggfunc = 'size') \ng_home = g_home.reset_index()\ng_home.columns= [\"Pre-Snap Home Score\", \"Counts\"]\ng_home = g_home.sort_values(\"Counts\", ascending = False)\nprint(g_home)","e194eba9":"# Creating Histogram plot\npx.histogram(plays, x=\"preSnapHomeScore\", nbins=25, title=\"Distinct Count Of NFL Pre-Snap Home Scores\", color_discrete_sequence=[\"red\"])\n","985e8bbc":"print(\"Unique NFL pre-snap visitor scores and their counts :\")\ng_visitor = plays.pivot_table(index = ['preSnapVisitorScore'], aggfunc = 'size') \ng_visitor = g_visitor.reset_index()\ng_visitor.columns= [\"Pre-Snap Visitor Score\", \"Counts\"]\ng_visitor = g_visitor.sort_values(\"Counts\", ascending = False)\nprint(g_visitor)","7bd9948f":" #Creating Histogram plot\npx.histogram(plays, x=\"preSnapVisitorScore\", nbins=25, title=\"Distinct Count Of NFL Pre-Snap Visitor Scores\", color_discrete_sequence=[\"blueviolet\"])\n","c68c483d":"print(\"Unique NFL pass results and their counts :\")\ng_res = plays.pivot_table(index = ['passResult'], aggfunc = 'size') \ng_res = g_res.reset_index()\ng_res.columns= [\"Pass Results\", \"Counts\"]\ng_res = g_res.sort_values(\"Counts\", ascending = False)\nprint(g_res)","d54b7586":"# Creating Bar plot\npx.bar(g_res, x=\"Pass Results\", y=\"Counts\", title=\"Distinct Count Of NFL Pass Results\", color=\"Counts\")\n","d1305791":"print(\"Unique NFL kick lengths and their counts :\")\ng_kick = plays.pivot_table(index = ['kickLength'], aggfunc = 'size') \ng_kick = g_kick.reset_index()\ng_kick.columns= [\"Kick Length\", \"Counts\"]\ng_kick = g_kick.sort_values(\"Counts\", ascending = False)\nprint(g_kick)","5555091d":"# Creating Bar plot\npx.bar(g_kick, x=\"Kick Length\", y=\"Counts\", title=\"Distinct Count Of NFL Kick lengths\", color=\"Kick Length\")\n","0d0d0ab7":"print(\"Unique NFL kick return yardages and their counts :\")\ng_yard = plays.pivot_table(index = ['kickReturnYardage'], aggfunc = 'size') \ng_yard = g_yard.reset_index()\ng_yard.columns= [\"Kick Return Yardage\", \"Counts\"]\ng_yard = g_yard.sort_values(\"Counts\", ascending = False)\nprint(g_yard)","9d75d98b":"# Creating Histogram plot\npx.histogram(plays, x=\"kickReturnYardage\", nbins=25 , title=\"Distinct Count Of NFL Kick Return Yardages\",  color_discrete_sequence=[\"mediumvioletred\"])\n","faf5c480":"print(\"Unique NFL play results and their counts :\")\ngp_res = plays.pivot_table(index = ['playResult'], aggfunc = 'size') \ngp_res = gp_res.reset_index()\ngp_res.columns= [\"Play Result\", \"Counts\"]\ngp_res = gp_res.sort_values(\"Counts\", ascending = False)\nprint(gp_res)","d1848154":"# Creating Histogram plot\npx.histogram(plays, x=\"playResult\", nbins=10, title=\"Distinct Count Of NFL Play Results\", color_discrete_sequence=[\"blue\"])\n","79d326ad":"print(\"Unique NFL absolute yardline numbers and their counts :\")\ng_abyl = plays.pivot_table(index = ['absoluteYardlineNumber'], aggfunc = 'size') \ng_abyl = g_abyl.reset_index()\ng_abyl.columns= [\"Absolute YardLine Number\", \"Counts\"]\ng_abyl = g_abyl.sort_values(\"Counts\", ascending = False)\nprint(g_abyl)","fd327c4f":"# Creating Bar plot\npx.bar(g_abyl, x=\"Absolute YardLine Number\", y=\"Counts\", title=\"Distinct Count Of NFL Absolute Yard Line Number\", color=\"Absolute YardLine Number\")\n","7d59ae29":"# loading the tracking2018 dataset\ntracking_2018 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\")","e62da9f0":"#checking its shape\ntracking_2018.shape","afac94bf":"#cheking 1st 5 rows\ntracking_2018.head()","cc8ad139":"# Fetching the information of each column of tracking_2018 data frame\ntracking_2018.info()","2e5d1782":"# Counting the Null Values\ntracking_2018.isnull().sum()","cf99255d":"# splitting date from datetime\ntracking_2018['date'] = pd.DatetimeIndex(tracking_2018['time']).date\nprint(tracking_2018[\"date\"])","035ceb54":"#Listing out unique values from date column\nprint(\"Unique NFL dates and their counts :\")\ntr18_date = tracking_2018.pivot_table(index = ['date'], aggfunc = 'size') \ntr18_date = tr18_date.reset_index()\ntr18_date.columns= [\"Date\", \"Counts\"]\ntr18_date = tr18_date.sort_values(\"Counts\", ascending = False)\nprint(tr18_date)","51c3fbaf":"# Visualizing NFL dates by Bar plot\npx.bar(tr18_date, x=\"Date\", y=\"Counts\", title=\"Distinct Count Of NFL Dates\", color=\"Counts\")","10280b07":"# Creating a table of coordinates of players position of home team opponents team and foot ball through out the play of playId == 36 and gameId == 2018123000\ndata_18= tracking_2018.query('playId == 36 and gameId == 2018123000')\nprint(data_18[[\"x\", \"y\", \"team\"]])","ceda6352":"# players location throughout the game\npx.scatter(data_18, x=\"x\", y=\"y\", color=\"team\",width=1000,height=800)","76907800":"# Creating a table of coordinates of players position of home team opponents team and foot ball through out the play of playId == 36 and gameId == 2018102107\ndata_18 = tracking_2018.query('playId == 36 and gameId == 2018102107')\nprint(data_18[[\"x\", \"y\", \"team\"]])","5ba8e89f":"# players location throughout the game\npx.scatter(data_18, x=\"x\", y=\"y\", color=\"team\",width=1000,height=800)\n","bc57e8d6":"# Creating a table of coordinates of players position of home team opponents team and foot ball through out the play of position == \"CB\" and gameId == 2018111900\ndata_18 = tracking_2018.query('position == \"CB\" and gameId == 2018111900')\nprint(data_18[[\"x\", \"y\", \"team\"]])","e0628155":"# players location throughout the game\npx.scatter(data_18, x=\"x\", y=\"y\", color=\"team\",width=1000,height=800)","1976d76e":"# Creating a table of coordinates of players position of home team opponents team and foot ball through out the play of position == \"RB\" and gameId == 2018093009\ndata_18 = tracking_2018.query('position == \"RB\" and gameId == 2018093009')\nprint(data_18[[\"x\", \"y\", \"team\"]])","b6257a18":"# players location throughout the game\npx.scatter(data_18, x=\"x\", y=\"y\", color=\"team\",width=1000,height=800)","2ea299f8":"# Creating a table of coordinates of players position of home team opponents team and foot ball through out the play of position == \"LB\" and gameId == 2018111900\ndata_18 = tracking_2018.query('position == \"LB\" and gameId == 2018111900')\nprint(data_18[[\"x\", \"y\", \"team\"]])","6194f4b4":"# players location throughout the game\npx.scatter(data_18, x=\"x\", y=\"y\", color=\"team\",width=1000,height=800)","38db828c":"tracking_2018['date'] = pd.DatetimeIndex(tracking_2018['date'])\nrslt_df = tracking_2018[tracking_2018['date'] == '2018-10-09']\nprint(rslt_df.head())","d56b3688":"# Animation of a game done using coordinates and time \n# this animation shows the game played in 2018-10-09\nfig = px.scatter(rslt_df, x=\"x\", y=\"y\", animation_frame=\"time\", color=\"team\")\nfig.show()","5451194b":"rslt_df = tracking_2018[tracking_2018['date'] == '2018-11-30']\nprint(rslt_df.head())","7063fd4d":"#this animation shows the game played in 2018-11-30\nfig = px.scatter(rslt_df, x=\"x\", y=\"y\", animation_frame=\"time\", color=\"team\")\nfig.show()","04e4c2fd":"#loading the dataset\ntracking_2019 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv\")","e268c8a3":"#checking shape of the dataset\ntracking_2019.shape","f53c9e53":"#checking summary of the dataset\ntracking_2019.info()","6a20ee41":"tracking_2019['date'] = pd.DatetimeIndex(tracking_2019['time']).date\nprint(tracking_2019[\"date\"])","c131cb67":"print(\"Unique NFL dates and their counts :\")\ntr19_date = tracking_2019.pivot_table(index = ['date'], aggfunc = 'size') \ntr19_date = tr19_date.reset_index()\ntr19_date.columns= [\"Date\", \"Counts\"]\ntr19_date = tr19_date.sort_values(\"Counts\", ascending = False)\nprint(tr19_date)","d708665a":"px.bar(tr19_date, x=\"Date\", y=\"Counts\", title=\"Distinct Count Of NFL Dates\", color=\"Counts\")","1a36a7f7":"#checking for null value\ntracking_2019.isnull().sum()","c70137ac":"#Creating a table of coordinates of players position of home team opponents team and foot ball through out the play of playId == 36 and gameId == 2019122900\ndata_19 = tracking_2019.query('playId == 36 and gameId == 2019122900')\nprint(data_19[[\"x\", \"y\", \"team\"]])","c67f608f":" px.scatter(data_19, x=\"x\", y=\"y\", color=\"team\",width=1000,height=800)","7ce4580f":"#Creating a table of coordinates of players position of home team opponents team and foot ball through out the play of playId == 3554 and gameId == 2019090901\ndata_19 = tracking_2019.query('playId == 3554 and gameId == 2019090901')\nprint(data_19[[\"x\", \"y\", \"team\"]])","fb4ba856":"fig = px.scatter(data_19, x=\"x\", y=\"y\", color=\"team\",width=1000,height=800)\nfig.show()\n#  players location throughout the game","dd7e8492":"tracking_2019['date'] = pd.DatetimeIndex(tracking_2019['date'])\nrslt_df = tracking_2019[tracking_2019['date'] == '2019-09-10']\nprint(rslt_df.head())","b3ed7f93":"#This animation shows the game played in 2019-09-10\nfig = px.scatter(rslt_df, x=\"x\", y=\"y\", animation_frame=\"time\", color=\"team\")\nfig.show()","ba59ec2c":"#loading the dataset\ntracking_2020 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv\")","e894c8c4":"#checking shape of the dataset\ntracking_2020.shape","81825ea8":"#checking first five rows\ntracking_2020.head()","ac919c3e":"#checking the summary of the dataset\ntracking_2020.info()","122be72e":"#creating another column \"date\" and storing date from 'time' column in it\ntracking_2020['date'] = pd.DatetimeIndex(tracking_2020['time']).date","740820b8":"tracking_2020.head()","59a4bf82":"#checking for null values\ntracking_2020.isnull().sum()","d50644c0":"#Listing out unique values from date column\nprint(\"Unique NFL dates and their counts :\")\ntr20_date = tracking_2020.pivot_table(index = ['date'], aggfunc = 'size') \ntr20_date = tr20_date.reset_index()\ntr20_date.columns= [\"Date\", \"Counts\"]\ntr20_date = tr20_date.sort_values(\"Counts\", ascending = False)\nprint(tr20_date)","d53fbcb8":"# Visualizing NFL dates by Bar plot\npx.bar(tr20_date, x=\"Date\", y=\"Counts\", title=\"Distinct Count Of NFL Dates\", color=\"Counts\")","e3ba68b9":"# Creating a table of coordinates of players position of home team opponents team and foot ball through out the play \n#of playId = 40 and gameId == 2021010300\ndata_20 = tracking_2020.query('playId == 40 and gameId == 2021010300')\nprint(data_20[[\"x\", \"y\", \"team\"]])","5a8ea5d0":"# players location throughout the game\nfig = px.scatter(data_20, x=\"x\", y=\"y\", color=\"team\",width=1000,height=600)\nfig.show()\n","b6f477cd":"tracking_2020['date'] = pd.DatetimeIndex(tracking_2020['date'])\nrslt_df20 = tracking_2020[tracking_2020['date'] == '2020-11-27']\nprint(rslt_df20.head())","4285fe3a":"#This animation shows the game played in 2020-11-27\nfig = px.scatter(rslt_df20, x=\"x\", y=\"y\", animation_frame=\"time\", color=\"team\")\nfig.show()","8eb76626":"# Plays Data","a7645023":"*Observation*\n1. Kickoff playtype has highest counts (nearly 39%)\n2. Field goal has very low on count as compared to others","fbb46519":"*Observation*\n1. so many null values are present in 'o', 'dir', 'nflId', 'jerseyNumber' and 'position' column","b285ac0a":"*Observation*:\n1. 13.5% (most) players are from Alabama college","572e84d1":"*Observation*\n1. Dtype of 'time' column is object","c89f0901":"*Observation*\n1. Most of the players are in height of 6.2-6.3\n2. only 6 people are below 5.5ft","bf8d90b1":"*Observation*\n- Most shot played is perfect with great accuracy(ok).","6a26f142":"*Observation*\n1. \"Kickoff Team Recovery\", \"Blocked Punt\", \"Blocked Kick Attempt\" have worst results\n2. \"Downed\", \"Out of Bounds\", \"Kick Attempt No Good\" results are not pretty good","b8d374f2":"*Observation:*\n1. In december most games are played.\n2. Least games are played in january.(could be the games played due to some problem and played in other year not according to the season.)","465d2738":"*Observation*\n1. Most games played in only three days. one is 01\/03\/2021 , 12\/29\/2018 ,12\/30\/2018\n2. Most of the days (half of total days the total events organized) contains only a single game.","b16e2936":"*Observation*\n1. Quarter 5 have too much less counts as compared to other quarter","d57e0f62":"*Observation*\n1. so many null values are present in 'o', 'dir', 'nflId', 'jerseyNumber' and 'position' column","1e42ff31":"*Observation*\n1. In some rows season and date are not accordingly matched as games are conducted in 2021 but there is no season information given to those dates.\n2. This can conclude that* some games of season 2020 is conducted in 2021* due to some problem or crisis most probably CoVID-19.","58bd9cf5":"# Tracking2020 Data","b480f082":"#                                            NFL BIG DATA BOWL 2022\n\n\n                                                     TEAM : Data Dictators\n                                                     \n                                                            Members\n                                                      \n                                                   1. Soumya Sourav Behera (Leader)\n                                                   2. J. Venkateswar Achary","33204e93":"*Observation*\n1. Las Vegas Raiders and Oakland Raiders have very low Possession team counts","6c74b806":"*Observation*\n1. We have most players available for wide reciever and corner back position\n2. Very less number of players are for half bacj, safety, offensive guard position","a477f002":"*Observation*\n\n1. Some of the values are in feet-inch format and some are in inch format","38fd4d5a":"# Players Data","4053cad2":"*Observation*\n1. \"gameDate\" and \"date\" is in object type ","5dcb61bf":"*Observation*\n1. Dtype of 'time' column is object","426b9f91":"# PFF Scouting data","d7b7c332":"*Observation*\n1. SUNDAY is a favorable day for conducting of event.\n2. Most games played on 30th Dec 2018.","e8caeef3":"*Observation*\n1. so many null values are present in 'o', 'dir', 'nflId', 'jerseyNumber' and 'position' column","b6dabca4":"# Tracking2018 Data","06a74f92":"# Tracking2019 Data","38be32d9":"*Observation*\n1. only 7 players have birth year in 1972-1980\n2. Birthyear of 1999 players are the younger ones","2f97dbf4":"*Observation*\n1. PlayResult -vely correlated with kickReturnYardage and +vely correlated with kicklength, penaltyYards, yardlineNumber.\n2. kickReturnYardage is -vely correlated with down, yardsToGo and +vely correlated with kickLength\n3. kickLength is -vely correlated with down, yardsToGo\n4. preSnapVisitorScore is +vely correlated with preSnapHomeScore and quarter","72fa8bbb":"*Observation*\n1. Most of the games are played at 1pm.\n2. From which we can conclude that the game is heavily played and enjoyed in afternoon.(NO GAMES PLAYED IN MORNING SESSION)","622e9aff":"# Games Data","3497cb78":"*Observation:*\n1. Operation time is lies between 1.5 sec to 2.5 sec.\n2. Hang time of the player is varies from 2 to 5 seconds.","ad411757":"*Observation*\n1. Maximum of players are in weight of 200-249lbs","3ce5bc3e":"*Observation*\n1. Trend of frequency of counts per week is first high then decreased significantly till week 11(41)\n2. After 11th week counts again increased to highest counts(48).","61a2951d":"*Observation:*\n1. More than half of the shots played is normal deep kick with decent hang time(most played kick) denoted by D.\n1. Surprise kick are most rare as the name suggested.","eed1cbe6":"*Observation*\n1. Highest games are played in 2020.\n2. Lowest in 2018.\n3. Although they are almost equal to each other.","e69d58d5":"# Importing Necessary Libraries","f12e532d":"*Observation*\n1. Dtype of 'time' column is object","91d44152":"*Observation*\n1. SUNDAY is a favorable day for conducting of event.\n2. Most games played on 3rd Jan 2021.","80315373":"*Observation*\n- *SUNDAY* is a favorable day for conducting of event.\n- Most games played on *29th dec 2019*.","722774c4":"*Observation*\n1. Null values are present in 'birthDate', 'collegeName' columns\n2. Height column is in object Dtype\n3. birthDate in in object Dtype"}}