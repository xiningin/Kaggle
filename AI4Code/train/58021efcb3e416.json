{"cell_type":{"ae332c85":"code","f2b7aaa0":"code","c8faa26d":"code","08a312cf":"code","215d9425":"code","07f56b6b":"code","b0b08c4d":"code","52486808":"code","3dc6d509":"code","59ee3039":"code","973cd5b2":"markdown","ec0c4596":"markdown","c64687e1":"markdown","ad294851":"markdown","a57eb066":"markdown","1bdee4cb":"markdown","bc7b3290":"markdown","e916caad":"markdown","0d3e5234":"markdown"},"source":{"ae332c85":"from __future__ import print_function, division\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision\nimport time\nimport os\nimport copy\n\nfrom os import listdir, makedirs, getcwd, remove\nfrom os.path import isfile, join, abspath, exists, isdir, expanduser\nfrom torch.optim import lr_scheduler\nfrom skimage import io, transform\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, utils\nfrom torchvision import datasets, models, transforms\nfrom torch.autograd import Variable\nfrom IPython.display import clear_output\n\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.ion()   # interactive mode","f2b7aaa0":"image_size = 128","c8faa26d":"humpback_whales_path = '\/kaggle\/input' \ntrain_path = os.path.join(humpback_whales_path,'train.csv')\nhumpback_whales_train_path = os.path.join(humpback_whales_path,'train')","08a312cf":"class WhalesDS(Dataset):\n    \"\"\" Humpback Whale Identification Challenge dataset. \"\"\"\n    def __init__(self, csv_file, root_dir, transform=None):\n        \"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"\n        self.whales_frame = self.encode()\n        self.root_dir = root_dir\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.whales_frame)\n\n    def __getitem__(self, idx):\n        img_name = os.path.join(self.root_dir,\n                                self.whales_frame.iloc[idx, 0])\n        image = io.imread(img_name)\n        label = self.whales_frame.iloc[idx,1]\n        sample = {'image': image, 'label': label}\n\n        if self.transform:\n            sample = self.transform(sample)\n\n        return sample\n\n    def encode(self):\n        \"\"\" Encoding \"\"\"\n        df = pd.read_csv(train_path)\n        unique_classes = pd.unique(df['Id'])\n        encoding = dict(enumerate(unique_classes))\n        encoding = {value: key for key, value in encoding.items()}\n        df = df.replace(encoding)\n        return df ","215d9425":"whales_ds = WhalesDS(csv_file=train_path,\n                     root_dir=humpback_whales_train_path)\n\nfig = plt.figure()\n\nfor i in range(len(whales_ds)):\n    sample = whales_ds[i]\n    print(i, sample['image'].shape, sample['label'])\n\n    ax = plt.subplot(1, 4, i + 1)\n    ax.set_title('Sample #{}'.format(i))\n    ax.axis('off')\n    plt.imshow(sample['image'])\n\n    if i == 3:\n        plt.show()\n        break","07f56b6b":"class Rescale(object):\n    \"\"\"Rescale the image in a sample to a given size.\n\n    Args:\n        output_size (tuple or int): Desired output size. If tuple, output is\n            matched to output_size. If int, smaller of image edges is matched\n            to output_size keeping aspect ratio the same.\n    \"\"\"\n\n    def __init__(self, output_size):\n        assert isinstance(output_size, (int, tuple))\n        self.output_size = output_size\n\n    def __call__(self, sample):\n        image, label = sample['image'], sample['label']\n\n        h, w = image.shape[:2]\n        if isinstance(self.output_size, int):\n            if h > w:\n                new_h, new_w = self.output_size * h \/ w, self.output_size\n            else:\n                new_h, new_w = self.output_size, self.output_size * w \/ h\n        else:\n            new_h, new_w = self.output_size\n\n        new_h, new_w = int(new_h), int(new_w)\n\n        img = transform.resize(image, (new_h, new_w))\n\n        return {'image': img, 'label': label}\n\n\nclass RandomCrop(object):\n    \"\"\"Crop randomly the image in a sample.\n\n    Args:\n        output_size (tuple or int): Desired output size. If int, square crop\n            is made.\n    \"\"\"\n\n    def __init__(self, output_size):\n        assert isinstance(output_size, (int, tuple))\n        if isinstance(output_size, int):\n            self.output_size = (output_size, output_size)\n        else:\n            assert len(output_size) == 2\n            self.output_size = output_size\n\n    def __call__(self, sample):\n        image, label = sample['image'], sample['label']\n\n        h, w = image.shape[:2]\n        new_h, new_w = self.output_size\n\n        top = np.random.randint(0, h - new_h)\n        left = np.random.randint(0, w - new_w)\n\n        image = image[top: top + new_h,\n                      left: left + new_w]\n\n        return {'image': image, 'label': label}\n\n\nclass ToTensor(object):\n    \"\"\"Convert ndarrays in sample to Tensors.\"\"\"\n\n    def __call__(self, sample):\n        image, label = sample['image'], sample['label']\n\n        # swap color axis because\n        # numpy image: H x W x C\n        # torch image: C X H X W\n        \"\"\" The original code didn't expect gray scale images \"\"\"\n        gray_scale_image = torch.zeros([image_size,image_size]).shape == image.shape\n        if gray_scale_image:\n            image = np.stack((image,)*3, axis=-1)\n        image = image.transpose((2, 0, 1))\n        return {'image': torch.from_numpy(image),\n                'label': torch.tensor(label)}","b0b08c4d":"scale = Rescale(int(image_size*1.25))\ncrop = RandomCrop(image_size)\ncomposed = transforms.Compose([Rescale(int(image_size*1.25)),\n                               RandomCrop(image_size)])\n\n# Apply each of the above transforms on sample.\nfig = plt.figure()\nsample = whales_ds[65]\nfor i, tsfrm in enumerate([scale, crop, composed]):\n    transformed_sample = tsfrm(sample)\n\n    ax = plt.subplot(1, 3, i + 1)\n    ax.set_title(type(tsfrm).__name__)\n\n    plt.imshow(transformed_sample['image'])\nplt.show()","52486808":"transformed_dataset = WhalesDS(csv_file=train_path,\n                                           root_dir=humpback_whales_train_path,\n                                           transform=transforms.Compose([\n                                               Rescale(int(image_size*1.25)),\n                                               RandomCrop(image_size),\n                                               ToTensor()\n                                           ]))\n\nfor i in range(len(transformed_dataset)):\n    sample = transformed_dataset[i]\n\n    print(i, sample['image'].size(), sample['label'])\n\n    if i == 3:\n        break","3dc6d509":"dataloader = DataLoader(transformed_dataset, batch_size=4,\n                        shuffle=True, num_workers=4)","59ee3039":"# Helper function to show a batch\ndef show_whale_batch(sample_batched):\n    \"\"\"Show whales for a batch of samples.\"\"\"\n    images_batch, labels_batch = \\\n            sample_batched['image'], sample_batched['label']\n    batch_size = len(images_batch)\n    im_size = images_batch.size(2)\n\n    grid = utils.make_grid(images_batch)\n    plt.imshow(grid.numpy().transpose((1, 2, 0)))\n\n    for i in range(batch_size):\n        plt.title('Batch from dataloader')\n\nfor i_batch, sample_batched in enumerate(dataloader):\n    print(i_batch, sample_batched['image'].size(),\n          sample_batched['label'])\n    # observe 4th batch and stop.\n    if i_batch == 3:\n        plt.figure()\n        show_whale_batch(sample_batched)\n        plt.axis('off')\n        plt.ioff()\n        plt.show()\n        break","973cd5b2":"### Our Own customizable Whales Class  <a class=\"anchor\" id=\"second-bullet\"><\/a>\nTo handle this entire dataset we're going to be creating our own class to him. In this we define what will be the dataframe, what is the root directory, and what transformations we are going to pass to it. <br\/> \nAnother thing we need to create ( this is where the **magic** happens ) is the \\__getitem__ , we're going to be using this to iterate throught the dataset <br\/>\nLast but not least we are going to be using the same encoding as [here](https:\/\/www.kaggle.com\/jhonatansilva31415\/whales-a-simple-guide\/) , you can find out more in the [Video](https:\/\/www.youtube.com\/watch?v=AXcTm4gFerE)","ec0c4596":"### This is the best way I've found to work with all of this images!\n\nWe all had problems when we needed to work with HUGE (* Ok, this isn't a huge dataset, but it's large* :D ) dataset of images. But, calm down, we're here to help you!! <br\/>\nWe all want to play around with all of these whales, but that can be a challenge. If you've also have the problem of working with large image datasets, this is the Kernel for you.\n\nThinking about exploring this dataset and creating a simpler model? I've also created a more hands on approach to this competition, you can find the Kernel <br\/><br\/>\n*  [Whales. A Simple Guide!](https:\/\/www.kaggle.com\/jhonatansilva31415\/whales-a-simple-guide\/)\n\nTo make a more in depth explanation on the details of this Kernel I've made this video on YouTube \n## Full Video Explanation of this Kernel\n[How to work with large image datasets](https:\/\/www.youtube.com\/watch?v=myYMrZXpn6U)\n## Full Video Explanation of the previous Kernel\n[KAGGLE KERNELS - HOW TO START AT 2019](https:\/\/www.youtube.com\/watch?v=AXcTm4gFerE)\n\n<br\/> \nIf you are still here ( I'm glad you are .0. ) let's move on :D \n\n## Notebook Content\n1. [The Libraries we all Like](#first-bullet)\n2. [Our Own customizable Whales Class](#second-bullet)\n3. [Having a look at the dataset](#third-bullet)\n4. [Transforming our images ](#forth-bullet)\n5. [Transforming one Whale](#fifth-bullet)\n6. [Creating our transformed dataset](#sixth-bullet)\n7. [Loading it upl](#seventh-bullet)\n\n#### Disclaimer\nThis tutorial was just possible by the great documentation from the PyTorch website, I've made some adaptations from the [DATA LOADING AND PROCESSING TUTORIAL](https:\/\/pytorch.org\/tutorials\/beginner\/data_loading_tutorial.html)","c64687e1":"### Creating our transformed dataset  <a class=\"anchor\" id=\"sixth-bullet\"><\/a>\nWith all of this created we can now instantiate our WhalesDS and pass our transform to the class and that's it!","ad294851":"### Having a look at the dataset <a class=\"anchor\" id=\"third-bullet\"><\/a>\nWe can instantiate our WhalesDS model and pass the csv path file ( If you've downloaded this Kernel into your **personal computer**, change this to the location of the files). Then we can iterate through it and explore the images ( already a matrix ) with sample['image'] and remember our labels are being transformed on the instantiation of the dataset, so you wont be getting \"new_whale\" **but a number**.","a57eb066":"### Transforming one Whale  <a class=\"anchor\" id=\"fifth-bullet\"><\/a>\n We can test this out with a random sample whales_ds[65] ( Not that **random** hah )  ","1bdee4cb":"### Loading it up  <a class=\"anchor\" id=\"seventh-bullet\"><\/a>\nNow we can use the [DataLoader](https:\/\/pytorch.org\/docs\/stable\/data.html) and iterate throughout our dataset! This is **IT** <br\/>\nYou can now play around with any model","bc7b3290":"### Resources  <a class=\"anchor\" id=\"seventh-bullet\"><\/a>\nHere are some resources that I put together ( disclaimer here, this blog posts are from my site haha )\n\n### Building a very simple sequential model <a class=\"anchor\" id=\"seventh-bullet\"><\/a>\n\nThis is a great way to play around if you are a begginner in the area. If you don't know much from building Neural Networks I have a few resources \n\n1. [Creating a Perceptron](https:\/\/jhonatandasilva.com\/build-your-own-perceptron\/)\n2. [What are the building blocks of Deep Learning](https:\/\/jhonatandasilva.com\/perceptrons\/) \n3. [Play around with Neural Nets](https:\/\/jhonatandasilva.com\/play-with-nn\/)\n4. [Training your Neural Net](https:\/\/jhonatandasilva.com\/training-your-neural-networks\/)\n5. [When all comes together](https:\/\/jhonatandasilva.com\/mnist-pytorch\/) \n\nExploring more on the Vision side there's also\n\n1. [How Neural Nets sees the world ](https:\/\/jhonatandasilva.com\/how-nn-sees-the-world\/)\n\n<img src=\"https:\/\/jhonatandasilva.com\/wp-content\/uploads\/2018\/12\/cnns.gif\" alt=\"drawing\" width=\"400\"\/>\n\nYou can Look it up more resources on CNNs here\n\n* [CNNs made it easy](https:\/\/jhonatandasilva.com\/cnns-made-it-easy\/) \n* [How the layers of CNNs works](https:\/\/jhonatandasilva.com\/cnns-layers\/)\n","e916caad":"### The Libraries we all Like <a class=\"anchor\" id=\"first-bullet\"><\/a>\nPandas, Numpy, Matplotlib are in pratically all the Kernels I see. A part from that, we are going to be using **PyTorch** ","0d3e5234":"### Transforming our images  <a class=\"anchor\" id=\"forth-bullet\"><\/a>\n\u0143ow  we have control over our labels and images. This let us have some work and prepare this to our model. Here we are using some personalized solutions, we are creating our **Rescale**, or **RandomCrop** and Transforming it to **Tensor**, you can have a look at some out of the box solutions from PyTorch [here](https:\/\/pytorch.org\/docs\/stable\/torchvision\/transforms.html)!\n<br\/>\nBut let me tell you why is good to create our own functions, this dataset has different type of images, RGB, grayscale, sometimes **PyTorch** only allows one type of image, and this will led you to a crazy trobleshooting with crazy errors (*Believe me hahah*). <br\/>\nIt is **worth** the time to create this classes."}}