{"cell_type":{"076dda95":"code","bf10aa93":"code","89434823":"code","74d37862":"code","58fa6aef":"code","fa87b668":"code","d302a914":"code","989466cd":"code","1edf09d6":"code","c430bc45":"code","6d981f2f":"code","4d2ba41a":"code","1e617e80":"code","76017f21":"code","e98c34aa":"code","cc4fc5d7":"code","a6807638":"code","a1d2a620":"code","be3d1948":"code","fea593d8":"code","b1cd43b5":"code","b168ab6b":"code","598767d0":"markdown","b52fcd77":"markdown","0c5e0f10":"markdown"},"source":{"076dda95":"!pip uninstall kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","bf10aa93":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","89434823":"!kaggle competitions download -c 18011765watermelon-price","74d37862":"!unzip 18011765watermelon-price.zip","58fa6aef":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","fa87b668":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","d302a914":"# \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\nlearning_rate = 0.3\ntraining_epochs = 50\nbatch_size = 10\n","989466cd":"train_data=pd.read_csv('train_water_melon_price.csv',header=None,skiprows=[0], usecols=range(1,9))\ntest_data=pd.read_csv('test_watermelon_price.csv',header=None,skiprows=[0], usecols=range(1,8))","1edf09d6":"x_train_data=train_data.loc[:,0:7]\ny_train_data=train_data[[8]]\n\nx_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)\n\n\nx_train_data=torch.FloatTensor(x_train_data)\ny_train_data=torch.FloatTensor(y_train_data)\nprint(x_train_data)\nprint(y_train_data)\n","c430bc45":"train_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)","6d981f2f":"data_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","4d2ba41a":"linear1 = torch.nn.Linear(7,1024,bias=True)\nlinear2 = torch.nn.Linear(1024,512,bias=True)\nlinear3= torch.nn.Linear(512,1,bias=True)\nrelu= torch.nn.ReLU()","1e617e80":"# Random Init => Xavier Init\n\ntorch.nn.init.xavier_uniform_(linear1.weight)\n\ntorch.nn.init.xavier_uniform_(linear2.weight)\n\ntorch.nn.init.xavier_uniform_(linear3.weight)\n\n\n","76017f21":"# ======================================\n# relu\ub294 \ub9e8 \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ube7c\ub294 \uac83\uc774 \uc88b\ub2e4.\n# ======================================\nmodel = torch.nn.Sequential(linear1,relu,\n                            linear2,relu,\n                            linear3,\n                            ).to(device)","e98c34aa":"# \uc190\uc2e4\ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218\nloss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","cc4fc5d7":"total_batch = len(data_loader)\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n    \n\nprint('Learning finished')","a6807638":"# Test the model using test sets\nwith torch.no_grad():\n\n  x_test_data=test_data.loc[:,:]\n  x_test_data=np.array(x_test_data)\n\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)","a1d2a620":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","be3d1948":"submit=pd.read_csv('submit_sample.csv')\nsubmit","fea593d8":"for i in range(len(correct_prediction)):\n \n  submit['Expected'][i]=correct_prediction[i].item()\n\nsubmit","b1cd43b5":"submit.to_csv('submit.csv',index=False,header=True)\n","b168ab6b":"!kaggle competitions submit -c 18011765watermelon-price -f submit.csv -m \"Message\"","598767d0":"[\uba54\ub274\uc5bc] https:\/\/pytorch.org\/docs\/stable\/nn.init.html#torch.nn.init.xavier_uniform_","b52fcd77":"![\ub300\uccb4 \ud14d\uc2a4\ud2b8](https:\/\/user-images.githubusercontent.com\/11758940\/83336289-229ec200-a2ed-11ea-9fb8-88a51198e475.png)","0c5e0f10":"[\uba54\ub274\uc5bc] https:\/\/pytorch.org\/docs\/stable\/nn.html#crossentropyloss"}}