{"cell_type":{"793f43bf":"code","b7c301b2":"code","2f96fb7d":"code","3a56fc62":"code","a0cc3113":"code","4d97d762":"code","b48d9caf":"code","41a55830":"code","60b46a97":"code","c0f18e2a":"markdown","1030e9b2":"markdown","b4b5948f":"markdown","70b50b7e":"markdown","2853a5a8":"markdown","3321703d":"markdown"},"source":{"793f43bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7c301b2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier","2f96fb7d":"data_train = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_test.csv')","3a56fc62":"from sklearn.model_selection import train_test_split","a0cc3113":"le = preprocessing.LabelEncoder()\ndata_train_df = pd.DataFrame(data_train)\ndata_train_df_encoded = data_train_df.apply(le.fit_transform)\ndata_test_df = pd.DataFrame(data_test)\ndata_test_df_encoded = data_test_df.apply(le.fit_transform)","4d97d762":"x_test = data_test_df_encoded.drop(['play'],axis=1)\ny_test = data_test_df_encoded['play']\nprint(x_test)","b48d9caf":"x_train = data_train_df_encoded.drop(['play'],axis=1)\ny_train = data_train_df_encoded['play']\nprint(x_train)","41a55830":"knn_ = np.arange(1,9)\ntrain_accuracy =np.empty(len(knn_))\ntest_accuracy = np.empty(len(knn_))\n\nfor i,k in enumerate(knn_):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(x_train, y_train)\n    train_accuracy[i] = knn.score(x_train, y_train)\n    test_accuracy[i] = knn.score(x_test, y_test) ","60b46a97":"plt.title('KNN in Descision Tree')\nplt.plot(knn_, test_accuracy, label='Test')\nplt.plot(knn_, train_accuracy, label='Train')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","c0f18e2a":"*lalu kita panggil, dataset yang akan kita gunakan....*","1030e9b2":"*selanjutnya kita akan split datset..*","b4b5948f":"*berikut data test...*","70b50b7e":"*dan dibawah adalah data train...*","2853a5a8":"*lalu kita masuk ke proses KNN...*","3321703d":"*pertama kita masukkan library yang akan kita gunakan.....*"}}