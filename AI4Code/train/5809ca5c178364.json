{"cell_type":{"dbbc83ea":"code","432867f3":"code","56122737":"code","de80f3b2":"code","6c355d54":"code","58b208ec":"code","508d8f80":"code","46c438b3":"code","4b49dbae":"code","86606b26":"code","db556de8":"code","2d226fb9":"code","c4e813dd":"code","1391d71e":"code","2a451f65":"code","05ce9219":"code","5dda60ed":"code","47857599":"code","b9651f5c":"code","a632fe1e":"code","fea30fa8":"code","e85cc8a3":"code","3b83e3ef":"code","e87ede18":"code","bfd43fe9":"code","504efe5a":"code","26fc1677":"code","4a1d3a79":"code","ed2c7dd8":"code","9b17e43d":"code","30008364":"code","274c1a89":"code","55368a30":"code","06afd41f":"code","dd5cdf50":"code","417288a3":"code","25af6805":"markdown","59b137b2":"markdown","8a9d3333":"markdown","ece57a2a":"markdown","0e953204":"markdown","9dec4ca1":"markdown","5bca66cb":"markdown","9b76ab5f":"markdown","2e170333":"markdown","5c3447cc":"markdown","ee4a1d7a":"markdown","0c57594f":"markdown","da1b8a46":"markdown","e53af641":"markdown","9a672187":"markdown","b42d8ed7":"markdown","5a421455":"markdown","5ca7f166":"markdown","fa60f19e":"markdown"},"source":{"dbbc83ea":"import re\nimport matplotlib.pyplot as plt\nimport string\nfrom nltk.corpus import stopwords\nimport nltk\nfrom nltk.corpus import wordnet\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize.treebank import TreebankWordDetokenizer\nfrom collections import Counter\nfrom wordcloud import WordCloud\nfrom nltk.corpus import stopwords\nimport nltk\nfrom gensim.utils import simple_preprocess\nfrom nltk.corpus import stopwords\nimport gensim\nfrom sklearn.model_selection import train_test_split\nimport spacy\nimport pickle\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt \nimport tensorflow as tf\nimport keras\nimport numpy as np\nimport pandas as pd\nprint('Done')","432867f3":"train = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')","56122737":"train.head(15)","de80f3b2":"#Let's get the dataset lenght\nlen(train)","6c355d54":"#Is there any other different value than neutral, negative and positive?\ntrain['sentiment'].unique()","58b208ec":"#How's distributed the dataset? Is it biased?\ntrain.groupby('sentiment').nunique()","508d8f80":"#Let's keep only the columns that we're going to use\ntrain = train[['selected_text','sentiment']]\ntrain.head()","46c438b3":"#Is there any null value?\ntrain[\"selected_text\"].isnull().sum()","4b49dbae":"#Let's fill the only null value.\ntrain[\"selected_text\"].fillna(\"No content\", inplace = True)","86606b26":"def depure_data(data):\n    \n    #Removing URLs with a regular expression\n    url_pattern = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    data = url_pattern.sub(r'', data)\n\n    # Remove Emails\n    data = re.sub('\\S*@\\S*\\s?', '', data)\n\n    # Remove new line characters\n    data = re.sub('\\s+', ' ', data)\n\n    # Remove distracting single quotes\n    data = re.sub(\"\\'\", \"\", data)\n        \n    return data","db556de8":"temp = []\n#Splitting pd.Series to list\ndata_to_list = train['selected_text'].values.tolist()\nfor i in range(len(data_to_list)):\n    temp.append(depure_data(data_to_list[i]))\nlist(temp[:5])","2d226fb9":"def sent_to_words(sentences):\n    for sentence in sentences:\n        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations\n        \n\ndata_words = list(sent_to_words(temp))\n\nprint(data_words[:10])","c4e813dd":"len(data_words)","1391d71e":"def detokenize(text):\n    return TreebankWordDetokenizer().detokenize(text)","2a451f65":"data = []\nfor i in range(len(data_words)):\n    data.append(detokenize(data_words[i]))\nprint(data[:5])","05ce9219":"data = np.array(data)","5dda60ed":"labels = np.array(train['sentiment'])\ny = []\nfor i in range(len(labels)):\n    if labels[i] == 'neutral':\n        y.append(0)\n    if labels[i] == 'negative':\n        y.append(1)\n    if labels[i] == 'positive':\n        y.append(2)\ny = np.array(y)\nlabels = tf.keras.utils.to_categorical(y, 3, dtype=\"float32\")\ndel y","47857599":"len(labels)","b9651f5c":"from keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import regularizers\nfrom keras import backend as K\nfrom keras.callbacks import ModelCheckpoint\nmax_words = 5000\nmax_len = 200\n\ntokenizer = Tokenizer(num_words=max_words)\ntokenizer.fit_on_texts(data)\nsequences = tokenizer.texts_to_sequences(data)\ntweets = pad_sequences(sequences, maxlen=max_len)\nprint(tweets)","a632fe1e":"print(labels)","fea30fa8":"#Splitting the data\nX_train, X_test, y_train, y_test = train_test_split(tweets,labels, random_state=0)\nprint (len(X_train),len(X_test),len(y_train),len(y_test))","e85cc8a3":"#model0 = Sequential()\n#model0.add(layers.Embedding(max_words, 15))\n#model0.add(layers.SimpleRNN(15))\n#model0.add(layers.Dense(3,activation='softmax'))\n\n\n#model0.compile(optimizer='rmsprop',loss='categorical_crossentropy', metrics=['accuracy'])\n#Implementing model checkpoins to save the best metric and do not lose it on training.\n#checkpoint0 = ModelCheckpoint(\"best_model0.hdf5\", monitor='val_accuracy', verbose=1,save_best_only=True, mode='auto', period=1,save_weights_only=False)\n#history = model0.fit(X_train, y_train, epochs=5,validation_data=(X_test, y_test),callbacks=[checkpoint0])","3b83e3ef":"model1 = Sequential()\nmodel1.add(layers.Embedding(max_words, 20))\nmodel1.add(layers.LSTM(15,dropout=0.5))\nmodel1.add(layers.Dense(3,activation='softmax'))\n\n\nmodel1.compile(optimizer='rmsprop',loss='categorical_crossentropy', metrics=['accuracy'])\n#Implementing model checkpoins to save the best metric and do not lose it on training.\ncheckpoint1 = ModelCheckpoint(\"best_model1.hdf5\", monitor='val_accuracy', verbose=1,save_best_only=True, mode='auto', period=1,save_weights_only=False)\nhistory = model1.fit(X_train, y_train, epochs=70,validation_data=(X_test, y_test),callbacks=[checkpoint1])","e87ede18":"model2 = Sequential()\nmodel2.add(layers.Embedding(max_words, 40, input_length=max_len))\nmodel2.add(layers.Bidirectional(layers.LSTM(20,dropout=0.6)))\nmodel2.add(layers.Dense(3,activation='softmax'))\nmodel2.compile(optimizer='rmsprop',loss='categorical_crossentropy', metrics=['accuracy'])\n#Implementing model checkpoins to save the best metric and do not lose it on training.\ncheckpoint2 = ModelCheckpoint(\"best_model2.hdf5\", monitor='val_accuracy', verbose=1,save_best_only=True, mode='auto', period=1,save_weights_only=False)\nhistory = model2.fit(X_train, y_train, epochs=70,validation_data=(X_test, y_test),callbacks=[checkpoint2])","bfd43fe9":"from keras import regularizers\nmodel3 = Sequential()\nmodel3.add(layers.Embedding(max_words, 40, input_length=max_len))\nmodel3.add(layers.Conv1D(20, 6, activation='relu',kernel_regularizer=regularizers.l1_l2(l1=2e-3, l2=2e-3),bias_regularizer=regularizers.l2(2e-3)))\nmodel3.add(layers.MaxPooling1D(5))\nmodel3.add(layers.Conv1D(20, 6, activation='relu',kernel_regularizer=regularizers.l1_l2(l1=2e-3, l2=2e-3),bias_regularizer=regularizers.l2(2e-3)))\nmodel3.add(layers.GlobalMaxPooling1D())\nmodel3.add(layers.Dense(3,activation='softmax'))\nmodel3.compile(optimizer='rmsprop',loss='categorical_crossentropy',metrics=['acc'])\ncheckpoint3 = ModelCheckpoint(\"best_model3.hdf5\", monitor='val_accuracy', verbose=1,save_best_only=True, mode='auto', period=1,save_weights_only=False)\nhistory = model3.fit(X_train, y_train, epochs=70,validation_data=(X_test, y_test),callbacks=[checkpoint3])","504efe5a":"#Let's load the best model obtained during training\nbest_model = keras.models.load_model(\"best_model2.hdf5\")","26fc1677":"test_loss, test_acc = best_model.evaluate(X_test, y_test, verbose=2)\nprint('Model accuracy: ',test_acc)","4a1d3a79":"predictions = best_model.predict(X_test)","ed2c7dd8":"from sklearn.metrics import confusion_matrix\nmatrix = confusion_matrix(y_test.argmax(axis=1), np.around(predictions, decimals=0).argmax(axis=1))","9b17e43d":"import seaborn as sns\nconf_matrix = pd.DataFrame(matrix, index = ['Neutral','Negative','Positive'],columns = ['Neutral','Negative','Positive'])\n#Normalizing\nconf_matrix = conf_matrix.astype('float') \/ conf_matrix.sum(axis=1)[:, np.newaxis]\nplt.figure(figsize = (15,15))\nsns.heatmap(conf_matrix, annot=True, annot_kws={\"size\": 15})","30008364":"sentiment = ['Neutral','Negative','Positive']","274c1a89":"sequence = tokenizer.texts_to_sequences(['this experience has been the worst , want my money back'])\ntest = pad_sequences(sequence, maxlen=max_len)\nsentiment[np.around(best_model.predict(test), decimals=0).argmax(axis=1)[0]]","55368a30":"sequence = tokenizer.texts_to_sequences(['this data science article is the best ever'])\ntest = pad_sequences(sequence, maxlen=max_len)\nsentiment[np.around(best_model.predict(test), decimals=0).argmax(axis=1)[0]]","06afd41f":"sequence = tokenizer.texts_to_sequences(['i hate youtube ads, they are annoying'])\ntest = pad_sequences(sequence, maxlen=max_len)\nsentiment[np.around(best_model.predict(test), decimals=0).argmax(axis=1)[0]]","dd5cdf50":"sequence = tokenizer.texts_to_sequences(['i really loved how the technician helped me with the issue that i had'])\ntest = pad_sequences(sequence, maxlen=max_len)\nsentiment[np.around(best_model.predict(test), decimals=0).argmax(axis=1)[0]]","417288a3":"#Saving weights and tokenizer so we can reduce training time on SageMaker\n\n# serialize model to JSON\nmodel_json = best_model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nbest_model.save_weights(\"model-weights.h5\")\nprint(\"Model saved\")\n\n# saving tokenizer\nwith open('tokenizer.pickle', 'wb') as handle:\n    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)\nprint('Tokenizer saved')","25af6805":"# Label encoding\n\nAs the dataset is categorical, we need to convert the sentiment labels from Neutral, Negative and Positive to a float type that our model can understand. To achieve this task, we'll implement the to_categorical method from Keras.","59b137b2":"## Confusion matrix\n\nAlright, we all know the accuracy is not a good metric to measure how well a model is. That's the reason why I like to always see its confusion matrix, that way I have a better understanding of its classification and generalization ability. Let's plot it.","8a9d3333":"## Single LSTM layer model","ece57a2a":"We've reached the end of this notebook. I just wanted to highlight a few things before let you go.\n\nAs you could see, very simple networks can achieve fantastic results. To go beyond, always the best approach is to build a model that underfit the data, then optimize it to overfit and finally start tuning your hyperparameters to achieve the metric that the business needs to reach. The way you tune the model is up to you, there's no magic formula for it, but adding regularization always works, as well as dropout. \n\nIf you have any doubt, please feel free to comment :)","0e953204":"# Data sequencing and splitting\n\nWe'll implement the Keras tokenizer as well as its pad_sequences method to transform our text data into 3D float data, otherwise our neural networks won't be able to be trained on it.","9dec4ca1":"# Data exploration","5bca66cb":"# Best model validation\n(Before final commit, the best model obtained was the BidRNN)","9b76ab5f":"# Overview\n\nThis project is based on the dataset available at https:\/\/www.kaggle.com\/c\/tweet-sentiment-extraction\/overview which is composed of about 20k tweets to train sentiment predictors.\n\nThis notebook will guide you through the process of tweets cleaning (a very basic NLP task when dealing with text data), training a few Deep Learning models with different architectures and finally inferencing on test text.","2e170333":"If you check the val_accuracy metric in the training logs you won't find better score than the one achieved by the BidRNN. Again, the previous model is not the best for this task becaue is majorly used for short translation tasks, but the good thing to notice is its speed to train.\n\nLet's move on.","5c3447cc":"Again, the model's score is very poor, but keep in mind it hasn't gone through hyperparameter tuning. Let's see how it performs on some test text.","ee4a1d7a":"# Data importing","0c57594f":"## SimpleRNN model (Bonus)","da1b8a46":"## Bidirectional LTSM model","e53af641":"# Imports","9a672187":"## 1D Convolutional model\n\nBefore diving into this model, I know by prior experience that it tends to overfit extremely fast on small datasets. In this sense, just will implement it to show you how to do it in case it's of your interest.","b42d8ed7":"# Preparing model for AWS SageMaker","5a421455":"### The next steps about data cleaning will be:\n\n* Remove URLs from the tweets\n* Tokenize text\n* Remove emails\n* Remove new lines characters\n* Remove distracting single quotes\n* Remove all punctuation signs\n* Lowercase all text\n* Detokenize text\n* Convert list of texts to Numpy array","5ca7f166":"# Model building\n\nAlright, in the next cells I'll guide you through the process of building 3 Recurrent Neural Networks. I'll implement sequential models from the Keras API to achieve this task. Essentially, I'll start with a single layer **LSTM** network which is known by achieving good results in NLP tasks when the dataset is relatively small (I could have started with a SimpleRNN which is even simpler, but to be honest it's actually not deployed in production environments because it is too simple - however I'll leave it commented in case you want to know it's built). The next one will be a Bidirectional LSTM model, a more complex one and this particular one is known to achieve great metrics when talking about text classification. To go beyond the classic NLP approach, finally we'll implement a very unusual model: a Convolutional 1D network, known as well by delivering good metrics when talking about NLP. If everything goes ok, we should get the best results with the BidRNN, let's see what happens.\n\nLet's get hands on:","fa60f19e":"# Data cleaning\n\nEven when the dataset is a little bit biased, we'll keep it this way because the differences are not significant."}}