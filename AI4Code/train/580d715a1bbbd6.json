{"cell_type":{"777e5cf9":"code","71153631":"code","9176ae9f":"code","971f457f":"code","0e7253d8":"code","c4b96164":"code","76ae7045":"code","f0b14687":"code","0f36f6cb":"code","ceaed474":"code","fb8a24df":"code","3d758e61":"code","7cf20835":"code","c632159a":"code","a2b6db5b":"code","f92679f0":"code","dc0ad45c":"code","8f875f88":"code","d2d5db9a":"code","e79511b5":"code","16cb9ee6":"code","b272aece":"code","55ef78e2":"code","a26729c9":"code","d3db5ba6":"code","0fb19c26":"code","1cdee9f0":"code","6b61e01d":"code","564cba33":"code","13632526":"code","e52911a8":"code","c51862fe":"code","0d828ec4":"code","eb31b1ee":"code","bd176a29":"code","9072406d":"code","c12874b6":"code","45e2e5ff":"code","c76fdc8c":"code","7fbaa6e8":"code","4c0f61e6":"code","1f1b0f08":"code","95c4d897":"code","14909201":"code","e8164e55":"code","37299197":"code","fb87dfc0":"code","c35f2654":"code","75e76943":"code","54b04172":"markdown","007b90fd":"markdown","da8d17b0":"markdown","8bb703eb":"markdown","ae27f1be":"markdown","a5f86987":"markdown","ff1b9984":"markdown","26778e4d":"markdown","cac4aaa3":"markdown","8793d0df":"markdown","615a0ce6":"markdown","e4dc2ab6":"markdown","78a28ca6":"markdown","7f60d115":"markdown","0d439db7":"markdown","138d838e":"markdown","b073a0e1":"markdown"},"source":{"777e5cf9":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom scipy import stats\nfrom scipy.stats import norm,skew\n\nfrom sklearn.preprocessing import RobustScaler, StandardScaler\nfrom sklearn.linear_model import LinearRegression, Ridge,Lasso,ElasticNet\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.base import BaseEstimator,TransformerMixin,RegressorMixin,clone\n\nimport xgboost as xgb\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","71153631":"data = pd.read_csv(\"\/kaggle\/input\/autompg-dataset\/auto-mpg.csv\")\ndata.head()","9176ae9f":"data.drop(\"car name\",inplace=True,axis=1)","971f457f":"data = data.rename(columns = {\"mpg\":\"target\"})","0e7253d8":"data.shape","c4b96164":"data.info()","76ae7045":"data['horsepower']=data['horsepower'].replace('?','150')\ndata['horsepower']=data['horsepower'].astype('int')\n'?' in data['horsepower']","f0b14687":"data.describe().T","0f36f6cb":"data.isnull().sum()","ceaed474":"sns.distplot(data.horsepower);","fb8a24df":"data_corr = data.corr()","3d758e61":"sns.clustermap(data_corr,annot=True);\nplt.title(\"Correlation Between Features\");\nplt.show();","7cf20835":"threshold = 0.75\nfilter_ = np.abs(data_corr[\"target\"]) > threshold\ncorr_features = data_corr.columns[filter_].tolist()\n\nsns.heatmap(data[corr_features].corr(),annot=True,fmt=\".2f\");\nplt.title(\"Correlation Between Features\");\nplt.show();","c632159a":"# result: multicollinearity","a2b6db5b":"sns.pairplot(data,diag_kind=\"kde\",markers=\"+\");\nplt.show();","f92679f0":"#cylinders and origin can be categorical","dc0ad45c":"plt.figure();\nsns.countplot(data[\"cylinders\"]);","8f875f88":"print(data[\"cylinders\"].value_counts());","d2d5db9a":"plt.figure();\nsns.countplot(data[\"origin\"]);","e79511b5":"print(data[\"origin\"].value_counts())","16cb9ee6":"for i in data.columns:\n    plt.figure();\n    sns.boxplot(x=i,data=data,orient=\"v\")","b272aece":"th = 2\n\nQ1_hp = data.horsepower.quantile(0.25)\nQ3_hp = data.horsepower.quantile(0.75)\nIQR_hp = Q3_hp - Q1_hp\nprint(IQR_hp)\n\ntop_limit_hp = Q3_hp + th * IQR_hp\ntop_limit_hp\n\nbottom_limit_hp = Q1_hp - th * IQR_hp\nbottom_limit_hp\n\nfilter_hp_bottom = bottom_limit_hp < data.horsepower\nfilter_hp_top = data.horsepower < top_limit_hp\nfilter_hp = filter_hp_bottom & filter_hp_top\n\ndata = data[filter_hp]\ndata.shape","55ef78e2":"th = 2\n\nQ1_ac = data.acceleration.quantile(0.25)\nQ3_ac = data.acceleration.quantile(0.75)\nIQR_ac = Q3_ac - Q1_ac\nprint(IQR_ac)\n\ntop_limit_ac = Q3_ac + th * IQR_ac\ntop_limit_ac\nbottom_limit_ac = Q1_ac - th * IQR_ac\nbottom_limit_ac\n\nfilter_ac_bottom = bottom_limit_ac < data.acceleration\nfilter_ac_top = data.acceleration < top_limit_ac\nfilter_ac = filter_ac_bottom & filter_ac_top\n\ndata = data[filter_ac]\ndata.shape","a26729c9":"# target - dependent variable","d3db5ba6":"sns.distplot(data.target,fit=norm);","0fb19c26":"(mu,sigma) = norm.fit(data[\"target\"])\nprint(\"mu: {}, sigma: {}\".format(mu,sigma))","1cdee9f0":"# qq plot\nplt.figure();\nstats.probplot(data[\"target\"],plot = plt);\nplt.show();","6b61e01d":"data[\"target\"] = np.log1p(data[\"target\"])","564cba33":"plt.figure();\nsns.distplot(data.target,fit=norm);","13632526":"# qq plot\nplt.figure();\nstats.probplot(data[\"target\"],plot = plt);\nplt.show();","e52911a8":"# feature - independent variable\nskewed_features = data.apply(lambda x: skew(x.dropna())).sort_values(ascending=False)","c51862fe":"skewness = pd.DataFrame(skewed_features,columns=[\"skewed\"])\nskewness","0d828ec4":"# cylinders & origin","eb31b1ee":"data[\"cylinders\"] = data[\"cylinders\"].astype(str) \ndata[\"origin\"] = data[\"origin\"].astype(str) ","bd176a29":"data = pd.get_dummies(data)","9072406d":"data.head()","c12874b6":"x = data.drop([\"target\"],axis=1)\ny = data.target","45e2e5ff":"test_size = 0.9\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=test_size,random_state=42)","c76fdc8c":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","7fbaa6e8":"lr = LinearRegression()\nlr.fit(x_train,y_train)\nprint(\"LR Coef: \", lr.coef_)\ny_pred = lr.predict(x_test)\nmse = mean_squared_error(y_test,y_pred)\nprint(\"LR MSE: \",mse)","4c0f61e6":"ridge = Ridge(random_state=42,max_iter=10000)\nalphas = np.logspace(-4,-0.5,30)\ntuned_params = [{'alpha':alphas}]\nn_folds = 5\n\nclf = GridSearchCV(ridge,tuned_params, cv=n_folds,scoring=\"neg_mean_squared_error\",refit=True)\nclf.fit(x_train,y_train)\nscores = clf.cv_results_[\"mean_test_score\"]\nscores_std = clf.cv_results_[\"std_test_score\"]\n\nprint(\"Ridge Coef: \", clf.best_estimator_.coef_)\nridge = clf.best_estimator_\n\nprint(\"Ridge Best Estimator: \",ridge)\ny_pred = clf.predict(x_test)\nmse = mean_squared_error(y_test,y_pred)\nprint(\"Ridge MSE: \",mse)","1f1b0f08":"plt.figure();\nplt.semilogx(alphas,scores);\nplt.xlabel(\"alpha\");\nplt.ylabel(\"score\");\nplt.title(\"Ridge(L2)\");","95c4d897":"lasso = Lasso(random_state=42,max_iter=10000)\nalphas = np.logspace(-4,-0.5,30)\ntuned_params = [{'alpha':alphas}]\nn_folds = 5\n\nclf = GridSearchCV(lasso,tuned_params, cv=n_folds,scoring=\"neg_mean_squared_error\",refit=True)\nclf.fit(x_train,y_train)\nscores = clf.cv_results_[\"mean_test_score\"]\nscores_std = clf.cv_results_[\"std_test_score\"]\n\nprint(\"Lasso Coef: \", clf.best_estimator_.coef_)\nlasso = clf.best_estimator_\n\nprint(\"Lasso Best Estimator: \",lasso)\ny_pred = clf.predict(x_test)\nmse = mean_squared_error(y_test,y_pred)\nprint(\"Lasso MSE: \",mse)","14909201":"plt.figure();\nplt.semilogx(alphas,scores);\nplt.xlabel(\"alpha\");\nplt.ylabel(\"score\");\nplt.title(\"Lasso(L1)\");","e8164e55":"parametersGrid = {\"alpha\": alphas,\n                  \"l1_ratio\": np.arange(0.0, 1.0, 0.05)}\n\neNet = ElasticNet(random_state=42, max_iter=10000)\nclf = GridSearchCV(eNet, parametersGrid, cv=n_folds, scoring='neg_mean_squared_error', refit=True)\nclf.fit(x_train, y_train)\n\n\nprint(\"ElasticNet Coef: \",clf.best_estimator_.coef_)\nprint(\"ElasticNet Best Estimator: \",clf.best_estimator_)\n\n\ny_pred = clf.predict(x_test)\nmse = mean_squared_error(y_test,y_pred)\nprint(\"ElasticNet MSE: \",mse)","37299197":"parametersGrid = {'nthread':[4], #when use hyperthread, xgboost may become slower\n              'learning_rate': [.03, 0.05, .07], \n              'max_depth': [5, 6, 7],\n              'min_child_weight': [4],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500,1000]}\n\nmodel_xgb = xgb.XGBRegressor()\n\nclf = GridSearchCV(model_xgb, parametersGrid, cv = n_folds, scoring='neg_mean_squared_error', refit=True, n_jobs = 5, verbose=True)\n\nclf.fit(x_train, y_train)\nmodel_xgb = clf.best_estimator_\n\ny_pred = clf.predict(x_test)\nmse = mean_squared_error(y_test,y_pred)\nprint(\"XGBRegressor MSE: \",mse)","fb87dfc0":"class AveragingModels():\n    def __init__(self,models):\n        self.models = models\n    \n    def fit(self,x,y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        for model in self.models_:\n            model.fit(x,y)   \n        return self\n    \n    def predict(self,x):\n        predictions = np.column_stack([model.predict(x) for model in self.models_])\n        return np.mean(predictions,axis=1)","c35f2654":"averaged_models = AveragingModels(models = (model_xgb, lasso))\naveraged_models.fit(x_train, y_train)","75e76943":"y_pred = averaged_models.predict(x_test)\nmse = mean_squared_error(y_test,y_pred)\nprint(\"Averaged Models MSE: \",mse)","54b04172":"**Split**","007b90fd":"**Standardization**","da8d17b0":"***Skewness***","8bb703eb":"### Regularization : Lasso Regression (L1)","ae27f1be":"* Linear Regression MSE: 0.02281172799933069\n* Ridge MSE: 0.021114200897180854\n* Lasso MSE: 0.016898274596698744\n* ElasticNet MSE: 0.017530265653211696","a5f86987":"## Regularization : ElasticNet","ff1b9984":"## XGBoost","26778e4d":"***One Hot Encoding***","cac4aaa3":"## Exploratory Data Analysis (EDA)","8793d0df":"*Horsepower*","615a0ce6":"## Averaging Models ","e4dc2ab6":"## Outlier Detection","78a28ca6":"## Train Test Split & Standardization","7f60d115":"## Regularization : Ridge Regression (L2)","0d439db7":"## Linear Regression","138d838e":"*Acceleration*","b073a0e1":"## Feature Engineering"}}