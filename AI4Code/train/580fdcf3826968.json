{"cell_type":{"938aa5aa":"code","03330ec0":"code","08b7eb12":"code","850727a1":"code","2a38661b":"code","e2ddb36f":"code","71fb8d7d":"code","1a1a89ab":"code","911cf3e1":"code","6fd08ade":"code","aa78e450":"code","85713ce8":"code","97899cbd":"code","2c1bea1b":"code","9e30de88":"code","573c6ed9":"code","1d62884e":"code","ede7e648":"code","9ea9a66c":"code","2a93a118":"code","38d7a336":"code","7ec1eb5d":"code","ab2336cf":"markdown"},"source":{"938aa5aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport gc\nimport re\nimport nltk\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nnp.random.seed(0)\nfrom keras.models import Model\nfrom keras.layers import Dense, Input, Dropout, LSTM, Activation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom collections import defaultdict\nfrom collections import  Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional, Dropout,SpatialDropout1D\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nnp.random.seed(1)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","03330ec0":"train= pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest=pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ntrain.head()","08b7eb12":"train.isnull().sum(axis=0)","850727a1":"test.isnull().sum(axis=0)","2a38661b":"keyword_cnt = train.keyword.value_counts()\nkeyword_cnt","e2ddb36f":"train_fake = train[train['target'] == 1]\nkeyword_cnt_fake = train_fake.keyword.value_counts()\nkeyword_cnt_fake","71fb8d7d":"train['target_mean']=train.groupby('keyword')['target'].transform('mean')\nfig=plt.figure(figsize=(10,72),dpi=100)\nsns.countplot(y=train.sort_values(by='target_mean',ascending=False)['keyword'],\n              hue=train.sort_values(by='target_mean',ascending=False)['target'])\nplt.tick_params(axis='x',labelsize=15)\nplt.tick_params(axis='y',labelsize=12)\nplt.legend(loc=1)\nplt.title('Keywords distribution by target')\nplt.show()\ntrain.drop(columns=['target_mean'],inplace=True)","1a1a89ab":"from wordcloud import WordCloud, STOPWORDS\ndef plot_wordcloud(text, mask=None, max_words=200, max_font_size=100, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='black',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()\ntrain_df0 = train[train['target']==0]\ntrain_df1 = train[train['target']==1]\nplot_wordcloud(train_df0['text'], title=\"Real Tweet Word Cloud\")\nplot_wordcloud(train_df1['text'], title=\"Fake Tweet Word Cloud\")","911cf3e1":"from nltk.stem.porter import PorterStemmer\nn_corpus=[]\nfor text in tqdm(train['text']):\n    text = re.sub(r'https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub(r'<.*?>', '', text)\n    text = re.sub(r'[^a-zA-Z0-9]+', ' ', text)\n    text = re.sub(r'[0-9]', '', text)\n    text = text.lower()\n    text = nltk.word_tokenize(text)\n    ps = PorterStemmer()\n    text = [ps.stem(word) for word in text if not word in set(stopwords.words('english'))]\n    text = ' '.join(text)\n    n_corpus.append(text)","6fd08ade":"train['text_n']=n_corpus\ntrain.drop('text',axis=1)","aa78e450":"n_corpus=[]\nfor text in tqdm(test['text']):\n    text = re.sub(r'https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub(r'<.*?>', '', text)\n    text = re.sub(r'[^a-zA-Z0-9]+', ' ', text)\n    text = re.sub(r'[0-9]', '', text)\n    text = text.lower()\n    text = nltk.word_tokenize(text)\n    ps = PorterStemmer()\n    text = [ps.stem(word) for word in text if not word in set(stopwords.words('english'))]\n    text = ' '.join(text)\n    n_corpus.append(text)","85713ce8":"test['text_n']=n_corpus\ntest.drop('text',axis=1)","97899cbd":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","2c1bea1b":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\nimport tokenization","9e30de88":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","573c6ed9":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","1d62884e":"#downloading bert layer\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","ede7e648":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","9ea9a66c":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","2a93a118":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","38d7a336":"train_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=3,\n    batch_size=16\n)\n\nmodel.save('model.h5')","7ec1eb5d":"test_pred = model.predict(test_input)\nsubmission=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\nsubmission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)\n\n","ab2336cf":"# ****Creating BERT model"}}