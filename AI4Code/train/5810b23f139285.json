{"cell_type":{"86726a2a":"code","cdf20c71":"code","d8188c4e":"code","61d84442":"code","b06b3ca6":"code","fb740b81":"code","f4e8466b":"code","6f01a315":"code","fee3417b":"code","52a86923":"code","ba9fbdae":"code","8d495189":"code","50980561":"code","9c318379":"code","35cc62ff":"code","d0c32f45":"code","de82ea73":"code","259fdc19":"code","0fd7f763":"code","422f9e85":"code","48345ce7":"code","5b965b6c":"code","b220f80a":"code","e944f127":"code","c30570f7":"code","e752b2f4":"code","71084a76":"code","5a255a07":"code","95b38aac":"markdown","53ce6968":"markdown","62bfbc2e":"markdown","44f36330":"markdown","6d2d0f5b":"markdown","61847ded":"markdown","2255a183":"markdown","a98a4393":"markdown","3301d38f":"markdown","63360b49":"markdown","588fad30":"markdown","733e7dcc":"markdown","df205407":"markdown","08af7396":"markdown"},"source":{"86726a2a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns               # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\nfrom subprocess import check_output\n\nimport warnings                                            # Ignore warning related to pandas_profiling\nwarnings.filterwarnings('ignore') \n\n\ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cdf20c71":"df = pd.read_csv('..\/input\/matches.csv')","d8188c4e":"df.head()","61d84442":"df.isnull().sum()","b06b3ca6":"df.drop(['umpire3'], axis = 1, inplace = True)","fb740b81":"df.columns","f4e8466b":"print(df['winner'].unique())\nprint(df['city'].unique())","6f01a315":"df.replace('Rising Pune Supergiant','Rising Pune Supergiants', inplace = True)\ndf.replace('Bangalore','Bengaluru', inplace = True)","fee3417b":"#fill missing values\ndf['city'].fillna(df['venue'], inplace = True)\ndf['winner'].fillna(df['result'], inplace = True)\ndf['player_of_match'].fillna(df['result'], inplace = True)\ndf['umpire1'].fillna('unknown', inplace = True)\ndf['umpire2'].fillna('unknown', inplace = True)","52a86923":"total_num_of_matches = df.groupby('season')['id'].count()\nplt.figure(figsize=(10,5))\nax = sns.countplot(\"season\", data = df, palette='viridis')\nplt.title('Total number of matches b\/w 2008-2018')\nplt.ylabel('Number of Matches.')\nannot_plot(ax,0.08,1)\nplt.show()","ba9fbdae":"plt.figure(figsize=(12,7))\nax = sns.countplot(\"winner\", data = df, order = df['winner'].value_counts().index,palette='viridis')\nplt.title(\"Total number of wins by each team b\/w 2008-2018\")\nplt.xticks(rotation=45, ha = 'right')\nplt.ylabel('Number of matches')\nannot_plot(ax,0.08,1)\nplt.show()","8d495189":"max_times_winner = df.groupby('season')['winner'].value_counts()\nmax_times_winner","50980561":"groups = max_times_winner.groupby('season')\nfig = plt.figure()\ncount = 1\n\nfor year, group in groups:\n    ax = fig.add_subplot(4,3,count)\n    ax.set_title(year)\n    ax = group[year].plot.bar(figsize = (10,15), width = 0.8)\n    \n    count+=1;\n    \n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('Matches Won')\n    \n    total_of_matches = []\n    for i in ax.patches:\n        total_of_matches.append(i.get_height())\n    total = sum(total_of_matches)\n    \n    for i in ax.patches:\n        ax.text(i.get_x()+0.2, i.get_height()-1.5,s= i.get_height(),color=\"black\",fontweight='bold')\nplt.tight_layout()\nplt.show()","9c318379":"plt.figure(figsize = (12,6))\nax = sns.catplot('winner', col='season',aspect=1, data = df, col_wrap = 2, kind = 'count',legend=True ,order = df['winner'].value_counts().index,palette='viridis')\nax.set_xticklabels(rotation=90, ha = 'right')\nax.set( ylabel = 'Number of matches')\nplt.ylabel('Number of Matches')\nplt.show()","35cc62ff":"plt.figure(figsize=(12,7))\nax = sns.countplot(\"winner\", data = df, hue = 'toss_decision',order = df['winner'].value_counts().index,palette='viridis')\nplt.title(\"Total number of wins for every team b\/w 2008-2018\")\nplt.xticks(rotation=45, ha = 'right')\nplt.ylabel('Number of Matches')\nannot_plot(ax,0.08,1)\nplt.show()","d0c32f45":"Total_matches_played = df['team1'].value_counts() + df['team2'].value_counts()\n\ntoss_won = df['toss_winner'].value_counts()\ntoss_win_success_rate = (toss_won\/Total_matches_played)*100\ntoss_win_success_rate_sort = toss_win_success_rate.sort_values(ascending = False)\nplt.figure(figsize = (10,5))\nax = sns.barplot(x =toss_win_success_rate_sort.index, y = toss_win_success_rate_sort,palette='viridis')\nplt.xticks(rotation = 45, ha = 'right')\nplt.ylabel('Toss Win success ratio.')\nannot_plot(ax,0.08,1)\nplt.show()","de82ea73":"plt.figure(figsize=(12,6))\n\nax = sns.countplot(\"player_of_match\", data = df,order = df['player_of_match'].value_counts()[:20].index,palette='viridis')\nplt.title(\"Total number of Player of the match. \")\nplt.xticks(rotation=90, ha = 'right')\nplt.ylabel('Number of Player of the match')\nplt.xlabel('Name of the top 20 Player of the match.')\nannot_plot(ax,0.08,1)\nplt.show()","259fdc19":"matches_won = df.groupby('winner').count()\ntotal_matches = df['team1'].value_counts()+ df['team2'].value_counts()\n\nmatches_won['Total matches'] = total_matches\nwin_df = matches_won[[\"Total matches\",\"result\"]]","0fd7f763":"ax = win_df[['Total matches','result']].sort_values('Total matches',ascending=False).plot.bar(figsize=(12,6))\nplt.ylabel('Total number of matches played')\nannot_plot(ax,0.08,1)","422f9e85":"sucess_ratio = round((matches_won['id']\/total_matches),4)*100\nsucess_ratio_sort = sucess_ratio.sort_values(ascending = False)\nplt.figure(figsize = (10,7))\nax = sns.barplot(x = sucess_ratio_sort.index, y = sucess_ratio_sort, palette='viridis' )\nannot_plot(ax,0.08,1)\nplt.xticks(rotation=45, ha = 'right')\nplt.ylabel('Success rate of wining')\nplt.show()","48345ce7":"each_season_winner = df.groupby('season')['season','winner'].tail(1)\neach_season_winner_sort = each_season_winner.sort_values('season',ascending = True)\neach_season_winner_sort","5b965b6c":"sns.countplot('winner', data = each_season_winner_sort)\nplt.xticks(rotation = 45, ha = 'right')\nplt.ylabel('Number of seasons won by any team.')\nplt.show()","b220f80a":"plt.figure(figsize = (12,6))\nvenue = df[['city','winner','season']]\nvenue_season = venue[venue['season'] == 2018]\nax = sns.countplot('city', data = venue_season, hue = 'winner' )\nplt.xticks(rotation=30, ha = 'right')\nplt.ylabel('Number of matches.')\nplt.show()","e944f127":"df['winner'].unique()","c30570f7":"df.replace('Sunrisers Hyderabad','SRH',inplace = True)\ndf.replace('Rising Pune Supergiants','RPS',inplace = True)\ndf.replace('Kolkata Knight Riders','KKR',inplace = True)\ndf.replace('Mumbai Indians','MI',inplace = True)\ndf.replace('Delhi Daredevils','DD',inplace = True)\ndf.replace('Gujarat Lions','GL',inplace = True)\ndf.replace('Chennai Super Kings','CSK',inplace = True)\ndf.replace('Rajasthan Royals','RR',inplace = True)\ndf.replace('Deccan Chargers','DC',inplace = True)\ndf.replace('Pune Warriors','PW',inplace = True)\ndf.replace('Kochi Tuskers Kerala','KTK',inplace = True)\ndf.replace('no result','Draw',inplace = True)\ndf.replace('Royal Challengers Bangalore','RCB',inplace = True)\ndf.replace('Kings XI Punjab','KXP',inplace = True)\n\n\n","e752b2f4":"city_winner = df.groupby('city')['winner'].value_counts()\n\ncount=1\nfig = plt.figure()\n\ngroups=city_winner.groupby('city')\nfor city,group in groups:\n    ax = fig.add_subplot(8,4,count)\n    ax.set_title(city)\n    ax=group[city].plot(kind=\"bar\",figsize=(13,20),width=0.8)\n    \n    count=count+1\n    \n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('Matches Won')\n    \n    totals = []\n    for i in ax.patches:\n        totals.append(i.get_height())\n        #print(i.get_height())\n    total = sum(totals)\n    \n    for i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n        ax.text(i.get_x()+0.2, i.get_height()-0.9,s= i.get_height(),color=\"black\",fontweight='bold')\n    \n    \nplt.tight_layout()\nplt.show()","71084a76":"df.replace('Dubai International Cricket Stadium','Dubai ICS', inplace = True)","5a255a07":"winner_city = df.groupby('winner')['city'].value_counts()\n\ncount=1\nfig = plt.figure()\n\ngroups=winner_city.groupby('winner')\nfor winner,group in groups:\n    ax = fig.add_subplot(7,2,count)\n    ax.set_title(winner)\n    ax=group[winner].plot(kind=\"bar\",figsize=(12,20),width=0.8)\n    \n    count+=1\n    \n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('Matches Won')\n    \n    totals = []\n    for i in ax.patches:\n        totals.append(i.get_height())\n        #print(i.get_height())\n    total = sum(totals)\n    \n    for i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n        ax.text(i.get_x()+0.2, i.get_height()-0.9,s= i.get_height(),color=\"black\",fontweight='bold')\n    \n    \nplt.tight_layout()\nplt.show()","95b38aac":"**Interpretation:** well, you have your answer :)","53ce6968":"**Second way of plotting graph for all the season winners.******","62bfbc2e":"## Effect of home ground:","44f36330":"## Do you know who won the most player of the match?","6d2d0f5b":"## Number of matches won by each team b\/w 2008-18:","61847ded":"**Interpretaion:** well, you can see in 2018 all the teams won most of the matches at their home ground.","2255a183":"### Data cleaning: drop umpire3 column as you can see it has too much missing values.","a98a4393":"## Each Season Winner:","3301d38f":"## Total number of wins by each team b\/w 2008-18:","63360b49":"## Total number of matches b\/w 2008-2018","588fad30":"## Success rate of winning matches:","733e7dcc":"**first way of plotting graph for all the season winners.**","df205407":"## does toss winning affects the match winner? ","08af7396":"## Graphs for all the season winners:"}}