{"cell_type":{"3305d1ac":"code","5f3e3181":"code","31eb56a1":"code","6efe39e6":"code","6ad35c9d":"code","1cfbec11":"code","7394ac4d":"code","ab64c3df":"code","dc2fd129":"code","d5403d90":"code","fe6758fc":"code","772eb4fb":"code","d1969024":"code","f6794247":"code","b6b8323f":"code","9b1924ba":"code","d38e2400":"code","695aaa97":"code","ab9a7757":"code","969c3263":"code","17a73910":"code","e36d6950":"code","71246d1a":"code","c4f8fe1d":"code","a369ee4b":"code","cd0c984c":"code","827ffed0":"code","75e1530f":"code","f8bfb26c":"code","14aa4b3c":"code","2aebe9e2":"code","18b0b588":"code","04b9e49f":"code","f8960a0c":"code","97251cc0":"code","31d4e82c":"code","f2547ddb":"code","5274c39a":"code","6a849d4c":"code","1b32f9ba":"code","5b16a0f6":"code","c0f01085":"code","989e11aa":"code","bbea6b14":"code","2fd13676":"code","89a35927":"code","f2724fab":"code","68dc801c":"code","ce255ed5":"code","0ee28be1":"code","d3c7dedd":"code","dbe57cc9":"code","ac455ba0":"code","bd73b1fa":"code","7f410a37":"code","9e4086c0":"code","e27697ef":"code","d0d8b587":"code","0bf21fec":"code","4cb04c65":"code","ffb5bbee":"code","185ec890":"code","019383cf":"code","ff800c9e":"code","2f0b1c63":"code","f3f97de2":"code","24eed2d4":"code","4a95b85f":"code","37d942b4":"code","1c0ceae6":"code","d89f15b7":"code","16c600d6":"code","eba0d387":"code","b4e3f04c":"code","1e925cc5":"code","a8cc1d40":"code","4503fd8e":"code","b8c5552d":"code","71852d7e":"code","53f67302":"code","dad6a121":"code","a448c71e":"code","b790cb93":"code","230e9a99":"code","935d5993":"code","7eb02055":"code","81d4cf62":"code","f0f1483a":"code","66b6e388":"code","60c609f0":"code","b085008a":"code","e3158cab":"code","6fe065aa":"code","68d03f1c":"code","fbb85540":"code","0eb2cafd":"code","e4117dd3":"code","2690129f":"code","255ce546":"code","9d6f000b":"code","5522da01":"markdown","bc444389":"markdown","a438ecee":"markdown","4a9c21ea":"markdown","7696c5fb":"markdown","e9ed4fdd":"markdown","355fedaa":"markdown","4b33ad4d":"markdown"},"source":{"3305d1ac":"import numpy as np \nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import style\nstyle.use('ggplot')\n\nimport seaborn as sns\nsns.set()\n\nfrom IPython.display import HTML\ndisplay(HTML(\"<style>.container { width:98% !important; }<\/style>\"))\n\nimport timeit\nfrom tqdm import tqdm\n\nfrom ipywidgets import interact\nimport ipywidgets as widgets\n\nfrom scipy import fftpack\n\nfrom os import listdir\nprint(listdir(\"..\/input\"))","5f3e3181":"train_nrows = !wc -l ..\/input\/train.csv\ntrain_nrows_val = int(train_nrows[0].split()[0])\nprint('train.csv contains {:,} rows'.format(train_nrows_val))","31eb56a1":"!head ..\/input\/train.csv","6efe39e6":"start_time = timeit.default_timer()\nmax_precision = 0\ncount = 0\nwith open('..\/input\/train.csv', 'r') as f:\n    while count<10: #True: #count <10:\n        line = f.readline()\n        if not line: \n            break\n        else: \n            print(line.rstrip())\n            if count > 0:\n                print(line[:-1].split('.')[1])\n                if '.' in line: \n                    str_len = len(line[:-1].split('.')[1])\n                    print(str_len)\n                    if max_precision < str_len:\n                        print(line)\n                    max_precision = max_precision if max_precision > str_len else str_len\n                print(line)\n                print(line.split('.')[1])\n        count +=1\nprint (max_precision)\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","6ad35c9d":"column_names = !head -n1 ..\/input\/train.csv\nprint(column_names[0].split(','))","1cfbec11":"df_train_sample = pd.read_csv('..\/input\/train.csv', skiprows = 0, nrows=100,\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64}) ","7394ac4d":"def display_df_with_preset_precision(df, precision):\n    curr_precision = pd.get_option(\"display.precision\")\n    pd.set_option(\"display.precision\", precision)\n    display(df)\n    pd.set_option(\"display.precision\", curr_precision)\n    \ndisplay_df_with_preset_precision(df_train_sample.head(9), max_precision)","ab64c3df":"try:\n    del(df_train_sample)    \nexcept NameError:\n    pass","dc2fd129":"start_time = timeit.default_timer()\nfrom collections import Counter\ndiff_ttf_2_counter_dict = Counter()\ntry:\n    del(df_train_iter)    \nexcept NameError:\n    pass\ndf_train_iter = pd.read_csv('..\/input\/train.csv', chunksize=train_nrows_val\/\/100,\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64},iterator=True)\ntime_to_failure_diffs_set = set()\ndf_after_jumping_up_points = pd.DataFrame()\ndf_after_long_jumps_down_points=pd.DataFrame()\nfor df in df_train_iter:\n    df['diff_in_time_to_failure']=df['time_to_failure'].diff()\n    nparr_ = df['diff_in_time_to_failure'].values\n    nparr_ = nparr_[~np.isnan(nparr_)]\n    diff_ttf_2_counter_dict += Counter(nparr_)\n\n    df_jumps_up = df.loc[(df['diff_in_time_to_failure'] > 0)]\n    df_long_jumps_down = df.loc[(df['diff_in_time_to_failure'] < -0.0001)]\n    df_after_jumping_up_points=df_after_jumping_up_points.append(df_jumps_up)\n    df_after_long_jumps_down_points=df_after_long_jumps_down_points.append(df_long_jumps_down)\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","d5403d90":"len(list(diff_ttf_2_counter_dict.keys()))","fe6758fc":"diff_ttf_2_counter_dict","772eb4fb":"# positive jumps\n{k: v for k, v in diff_ttf_2_counter_dict.items() if k>0}","d1969024":"10.**max_precision","f6794247":"negative_diff_tff_2_counter_dict = Counter()","b6b8323f":"for k, v in diff_ttf_2_counter_dict.items():\n    if k<=0:\n        negative_diff_tff_2_counter_dict[int(-k*(10.**max_precision))] += v \nnegative_diff_tff_2_counter_dict","9b1924ba":"#time diff within sampling frames\ntime_diff_within_sampling_frames_2_count_dict = {k: v for k, v in negative_diff_tff_2_counter_dict.items() if k<100}\ntime_diff_within_sampling_frames_2_count_dict","d38e2400":"#time diff between sampling frames\ntime_diff_between_sampling_frames_2_count_dict = {round(k\/(10.**max_precision),6): v for k, v in negative_diff_tff_2_counter_dict.items() if k>=100}\ntime_diff_between_sampling_frames_2_count_dict","695aaa97":"print(df_after_jumping_up_points.shape)\ndisplay_df_with_preset_precision(df_after_jumping_up_points, max_precision)","ab9a7757":"display_df_with_preset_precision(df_after_long_jumps_down_points.head(),max_precision)","969c3263":"np.unique(np.diff(df_after_long_jumps_down_points.index))","17a73910":"len(np.where(np.diff(df_after_long_jumps_down_points.index)==8192)[0])","e36d6950":"len(np.where(np.diff(df_after_long_jumps_down_points.index)==4095)[0])","71246d1a":"len(np.where(np.diff(df_after_long_jumps_down_points.index)==4096)[0])","c4f8fe1d":"max(time_diff_within_sampling_frames_2_count_dict.keys())\/(10.**max_precision)*8192","a369ee4b":"np.mean(list(time_diff_between_sampling_frames_2_count_dict.keys()))","cd0c984c":"(max(time_diff_within_sampling_frames_2_count_dict.keys())\/(10.**max_precision)*8192)\/np.mean(list(time_diff_between_sampling_frames_2_count_dict.keys()))","827ffed0":"start_time = timeit.default_timer()\ntry:\n    del(df_train_iter)    \nexcept NameError:\n    pass\n\ndf_train_iter = pd.read_csv('..\/input\/train.csv', chunksize=train_nrows_val\/\/100,\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64},iterator=True) #use chunksize to iterate\ndf_before_jumping_up_points = pd.DataFrame()\nfor df in df_train_iter:\n    if len(df.index.intersection(df_after_jumping_up_points.index-1)) > 0:\n        try:\n            df_before_jumping_up_points=df_before_jumping_up_points.append(df.loc[df.index.intersection(df_after_jumping_up_points.index-1),:])\n        except KeyError:\n            print('KeyError')\n            pass\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","75e1530f":"print(df_before_jumping_up_points.shape)\ndf_before_jumping_up_points","f8bfb26c":"start_time = timeit.default_timer()\n\ntry:\n    del(df_train_tail)    \nexcept NameError:\n    pass\ndf_train_tail = pd.read_csv('..\/input\/train.csv', skiprows = train_nrows_val-100000, iterator=False, names=column_names[0].split(','))\ndf_train_tail['acoustic_data'] = df_train_tail['acoustic_data'].astype(np.int16)\ndf_train_tail['time_to_failure'] = df_train_tail['time_to_failure'].astype(np.float64)\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","14aa4b3c":"df_train_tail.tail()","2aebe9e2":"# TTF steps\ndf_train_tail.tail(20000)['time_to_failure'].plot();","18b0b588":"start_time = timeit.default_timer()\n\ntry:\n    del(df_train_head)    \nexcept NameError:\n    pass\ndf_train_head = pd.read_csv('..\/input\/train.csv', skiprows = 0, nrows = 100000, iterator=False)\n\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","04b9e49f":"# TTF step in the first section\ndf_train_head.head(20000)[8192:8192+4096]['time_to_failure'].plot();","f8960a0c":"set(df_train_head.head(20000)[8192:8192+4095]['time_to_failure'].diff())","97251cc0":"n=0\nset(df_train_head.head(2000000)['time_to_failure'].diff())","31d4e82c":"index_ranges = [(ent[0],ent[1]) for ent in zip([0]+list(df_after_jumping_up_points.index)[:-1],list(df_before_jumping_up_points.index))]\nindex_ranges","f2547ddb":"train_set_lengths =np.array([ent[1]-ent[0] for ent in zip([0]+list(df_before_jumping_up_points.index)[:-1],list(df_before_jumping_up_points.index))])\ntrain_set_lengths","5274c39a":"train_set_lengths.mean(), train_set_lengths.std()","6a849d4c":"range_index = 3\nwindow_size = 15000\nwindow_offset = -window_size\nstart_time = timeit.default_timer()\ntry:\n    del(df_sample)    \nexcept NameError:\n    pass\ndf_sample = pd.read_csv('..\/input\/train.csv', skiprows = index_ranges[range_index][0], nrows= index_ranges[range_index][1]-index_ranges[range_index][0],\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64})\ndf_sample.columns=['acoustic_data','time_to_failure']\nprint(df_sample.index)\n\nfig, axs = plt.subplots(nrows=1, ncols=2, sharex=False)\nfig.set_size_inches(32,4)\ndf_sample['acoustic_data'].plot(ax=axs[0]);\nplt.show()\ndf_sample['time_to_failure'].plot(ax=axs[1]);\nplt.show()\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","1b32f9ba":"max_time_to_failure_points = pd.read_csv('..\/input\/train.csv', skiprows = 0, nrows= 1, dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64})['time_to_failure'].append(df_after_jumping_up_points['time_to_failure'])\nmax_time_to_failure_points","5b16a0f6":"max_time_to_failure_points.values[:-1]","c0f01085":"decline_angle_tangents = np.array([ent[0]\/ent[1] for ent in zip(max_time_to_failure_points.values[:-1], max_time_to_failure_points.index[1:])])\nprint(decline_angle_tangents.mean())\nprint(decline_angle_tangents.std())","989e11aa":"try:\n    del(df_sample)    \nexcept NameError:\n    pass","bbea6b14":"test_seg_files = listdir(\"..\/input\/test\")\ntest_seg_files[:5]","2fd13676":"len(test_seg_files)","89a35927":"os.path.join(\"..\/input\/test\",test_seg_files[0])","f2724fab":"!wc -l {os.path.join(\"..\/input\/test\",test_seg_files[0])}","68dc801c":"!head {os.path.join(\"..\/input\/test\",test_seg_files[0])}","ce255ed5":"\ndef plot_test_seg_by_index(idx):\n    df_test_seg = pd.read_csv(os.path.join(\"..\/input\/test\",test_seg_files[idx]), dtype={'acoustic_data': np.int16})\n    (df_test_seg['acoustic_data']-df_test_seg['acoustic_data'].mean()).plot();","0ee28be1":"interact(plot_test_seg_by_index, idx=widgets.IntSlider(min=0,max=len(test_seg_files)-1,step=1,value=0));","d3c7dedd":"# make sure that all seg files have the same length: 150,000 samples:\nseg_files_lengths = !for filename in ..\/input\/test\/*; do wc -l $filename; done\n{ent.split(' ')[0] for ent in seg_files_lengths}","dbe57cc9":"(max(time_diff_within_sampling_frames_2_count_dict.keys())\/(10.**max_precision)*150000)","ac455ba0":"np.mean(list(time_diff_between_sampling_frames_2_count_dict.keys()))*(150000\/4096)","bd73b1fa":"start_time = timeit.default_timer()\ntry:\n    del(df_sample)    \nexcept NameError:\n    pass\n\nrange_index=0 #first training sequence is the shortest one\ndf_sample = pd.read_csv('..\/input\/train.csv', skiprows = index_ranges[range_index][0], nrows= index_ranges[range_index][1]-index_ranges[range_index][0],\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64})\ndf_sample.columns=['acoustic_data','time_to_failure']\n\nfig, axs = plt.subplots(nrows=1, ncols=2, sharex=False)\nfig.set_size_inches(32,4)\ndf_sample['acoustic_data'].plot(ax=axs[0]);\nplt.show()\nprint ('time_to_failure decline rate = {:.16f}'.format(df_sample['time_to_failure'][0]\/df_sample['time_to_failure'].shape[0]))\ndf_sample['time_to_failure'].plot(ax=axs[1]);\nplt.show()\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","7f410a37":"df_sample['time_to_failure'][0]\/df_sample['time_to_failure'].shape[0]","9e4086c0":"df_sample['time_to_failure'].shape[0]","e27697ef":"df_sample['acoustic_data'].head()\n","d0d8b587":"df_sample['acoustic_data'].mean()","0bf21fec":"train_values = (df_sample['acoustic_data']-df_sample['acoustic_data'].mean()).values\ntrain_values","4cb04c65":"df_test_seg = pd.read_csv(os.path.join(\"..\/input\/test\",test_seg_files[0]), dtype={'acoustic_data': np.int16})\ndf_test_seg.head()","ffb5bbee":"df_test_seg['acoustic_data'].mean()","185ec890":"test_values = (df_test_seg['acoustic_data']-df_test_seg['acoustic_data'].mean()).values","019383cf":"print(train_values.shape, test_values.shape)","ff800c9e":"from scipy import signal\nsignal_corr = signal.correlate(np.square(train_values), np.square(test_values),mode='valid', method='fft')","2f0b1c63":"signal_corr.shape","f3f97de2":"pd.DataFrame(signal_corr).plot()","24eed2d4":"def correlation_with_test_seg_idx(idx):\n    df_test_seg = pd.read_csv(os.path.join(\"..\/input\/test\",test_seg_files[idx]), dtype={'acoustic_data': np.int16})\n    test_values = (df_test_seg['acoustic_data']-df_test_seg['acoustic_data'].mean()).values\n    signal_corr = signal.correlate(np.square(train_values), np.square(test_values),mode='same', method='fft')\n    pd.DataFrame(signal_corr).plot();","4a95b85f":"interact(correlation_with_test_seg_idx, idx=widgets.IntSlider(min=0,max=len(test_seg_files)-1,step=1,value=0));","37d942b4":"from scipy.signal import spectrogram\n\nM = 1024\nN = 1024\nfreqs, times, Sx = signal.spectrogram(df_test_seg['acoustic_data'].values, fs=1, window='hanning',\n                                      nperseg=N, noverlap=M - 100,\n                                      detrend=False, scaling='spectrum')\n\nf, ax = plt.subplots(figsize=(4.8, 2.4))\nax.pcolormesh(times, freqs \/ 1000, 10 * np.log10(Sx), cmap='viridis')\nax.set_ylabel('Frequency [kHz]')\nax.set_xlabel('Time [s]');","1c0ceae6":"f, t, Sxx = spectrogram(df_test_seg['acoustic_data'].values)\nplt.pcolormesh(t, f, 10 * np.log10(Sxx))\nplt.show()\nplt.plot(Sxx)\nplt.ylabel('Frequency [Hz]')\nplt.xlabel('Time [sec]')\nplt.show()","d89f15b7":"from skimage import util\n\nM = 1024\n\nslices = util.view_as_windows(df_test_seg['acoustic_data'].values, window_shape=(M,), step=100)\nprint(f'data shape: {df_test_seg[\"acoustic_data\"].values.shape}, Sliced data shape: {slices.shape}')","16c600d6":"win = np.hanning(M + 1)[:-1]\nslices = slices * win\nslices = slices.T\nprint('Shape of `slices`:', slices.shape)\nspectrum = np.fft.fft(slices, axis=0)[:M \/\/ 2 + 1:-1]\nspectrum = np.abs(spectrum)","eba0d387":"L=df_test_seg['acoustic_data'].values.shape[0]","b4e3f04c":"rate = 10\nf, ax = plt.subplots(figsize=(4.8, 2.4))\n\nS = np.abs(spectrum)\nS = 20 * np.log10(S \/ np.max(S))\n\nax.imshow(S, origin='lower', cmap='viridis',\n          extent=(0, L, 0, rate \/ 2 \/ 1000))\nax.axis('tight')\nax.set_ylabel('Frequency [kHz]')\nax.set_xlabel('Time [s]');","1e925cc5":"yf = fftpack.fft(df_test_seg['acoustic_data'].values)\nplt.plot(np.abs(yf))\nplt.grid()\nplt.show()","a8cc1d40":"display_df_with_preset_precision(df_after_long_jumps_down_points.head(),max_precision)","4503fd8e":"range_index=15 #first training sequence is the shortest one\nstart_time = timeit.default_timer()\ntry:\n    del(df_sample)    \nexcept NameError:\n    pass\ndf_sample = pd.read_csv('..\/input\/train.csv', skiprows = index_ranges[range_index][0], nrows= index_ranges[range_index][1]-index_ranges[range_index][0],\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64})\ndf_sample.columns=['acoustic_data','time_to_failure']\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","b8c5552d":"df_sample.index\nindex_ranges[range_index]\nixs_of_indexes = np.where(np.all([df_after_long_jumps_down_points.index <= index_ranges[range_index][1],df_after_long_jumps_down_points.index >= index_ranges[range_index][0]-1],axis=0))[0]\nixs_of_indexes1 = np.where(np.logical_and(df_after_long_jumps_down_points.index <= index_ranges[range_index][1],\n                        df_after_long_jumps_down_points.index >= index_ranges[range_index][0]))[0]\nixs_of_indexes,ixs_of_indexes1","71852d7e":"np.array_equal(ixs_of_indexes1,ixs_of_indexes)","53f67302":"indexes = df_after_long_jumps_down_points.index[ixs_of_indexes].union(index_ranges[range_index])","dad6a121":"np.unique(np.diff(indexes))","a448c71e":"frame_indexes = list(zip(indexes[:-1],indexes[1:]))","b790cb93":"len(list(frame_indexes))","230e9a99":"#MEAN (Bias) is removed \nlow_path_filter_n_freqs = 2048\navg_len=1\nframe_sequence_offset = -frame_indexes[0][0]\ndef show_frame_and_fft(sequence_idx):\n    fig, axs = plt.subplots(nrows=1, ncols=3, sharex=False)\n    the_df = df_sample[frame_sequence_offset+frame_indexes[sequence_idx][0]:frame_sequence_offset+frame_indexes[sequence_idx][1]]\n    print(the_df.shape)\n    diff_ttf = the_df['time_to_failure'].diff()[1:]    \n    acustic_data_series = the_df['acoustic_data']\n    \n    print('ttf = {:.9f}'.format(the_df['time_to_failure'].mean()))\n    print('diff_ttf.mean = {:.9f}, diff_ttf.std = {:.9f}'.format(diff_ttf.mean(), diff_ttf.std()))\n    print('acustic.mean = {:.9f}, acustic.std = {:.9f}'.format(acustic_data_series.mean(), acustic_data_series.std()))\n    \n    (acustic_data_series - acustic_data_series.mean()).plot(ax=axs[0]);\n    fig.set_size_inches(32,4)\n    \n    acustic_data_rft = fftpack.rfft(acustic_data_series-acustic_data_series.mean())\n    acustic_data_ft = fftpack.fft(acustic_data_series-acustic_data_series.mean())\n    \n    rfreqs = fftpack.rfftfreq(acustic_data_rft.size,diff_ttf.mean())\n    freqs = fftpack.fftfreq(acustic_data_ft.size, diff_ttf.mean())    \n    rfreqs = -rfreqs\n    \n    the_dict = {}\n    for idx in range(len(acustic_data_rft)):\n        if rfreqs[idx] in the_dict:\n            the_dict[rfreqs[idx]] = (the_dict[rfreqs[idx]]+np.abs(acustic_data_rft[idx]))\/2.\n        else: \n            the_dict[rfreqs[idx]] = np.abs(acustic_data_rft[idx])\n    unique_rfreqs = np.unique(rfreqs)\n    print(\"arrays are equal is {}\".format(np.array_equal(sorted(unique_rfreqs),unique_rfreqs)))\n    \n    pd.DataFrame.from_dict({'acustic_data_rft_amp': [the_dict[ent] for ent in unique_rfreqs][:low_path_filter_n_freqs], \n                            'rfreqs':unique_rfreqs[:low_path_filter_n_freqs]}).set_index('rfreqs').plot(ax=axs[1])\n    pd.DataFrame.from_dict({'acustic_data_ft_amp': (np.abs(acustic_data_ft)[len(freqs)\/\/2:]), \n                            'freqs':freqs[len(freqs)\/\/2:]}).set_index('freqs').plot(ax=axs[2])","935d5993":"print('range_index = {}'.format(range_index))\ninteract(show_frame_and_fft, sequence_idx=widgets.IntSlider(min=0,max=len(list(frame_indexes))-1,step=1,value=0));","7eb02055":"def calc_fft_amp_per_sequence_index(sequence_idx):\n    the_df = df_sample[frame_sequence_offset+frame_indexes[sequence_idx][0]:frame_sequence_offset+frame_indexes[sequence_idx][1]]\n\n    diff_ttf = the_df['time_to_failure'].diff()[1:]   \n    acustic_data_series = the_df['acoustic_data']\n    \n    print('ttf = {:.9f}'.format(the_df['time_to_failure'].mean()))\n    print('diff_ttf.mean = {:.9f}, diff_ttf.std = {:.9f}'.format(diff_ttf.mean(), diff_ttf.std()))\n    print('acustic.mean = {:.9f}, acustic.std = {:.9f}'.format(acustic_data_series.mean(), acustic_data_series.std()))    \n    \n    acustic_data_rft = fftpack.rfft(acustic_data_series-acustic_data_series.mean())\n       \n    rfreqs = -fftpack.rfftfreq(len(acustic_data_rft),diff_ttf.mean())   \n    \n    the_dict = {}\n    for idx in range(len(acustic_data_rft)):\n        if rfreqs[idx] in the_dict:\n            the_dict[rfreqs[idx]] = (the_dict[rfreqs[idx]]+np.abs(acustic_data_rft[idx]))\/2.\n        else: \n            the_dict[rfreqs[idx]] = np.abs(acustic_data_rft[idx])\n    \n    unique_rfreqs = np.unique(rfreqs)\n    \n    return pd.DataFrame.from_dict({'acustic_data_rft_amp': [the_dict[ent] for ent in unique_rfreqs][:low_path_filter_n_freqs], \n                                   'rfreqs':unique_rfreqs[:low_path_filter_n_freqs]}).set_index('rfreqs')","81d4cf62":"(calc_fft_amp_per_sequence_index(0)['acustic_data_rft_amp']).values[:low_path_filter_n_freqs]","f0f1483a":"def features_row_per_sequence_index(sequence_idx):\n    the_df = df_sample[frame_sequence_offset+frame_indexes[sequence_idx][0]:frame_sequence_offset+frame_indexes[sequence_idx][1]]\n\n    diff_ttf = the_df['time_to_failure'].diff()[1:]   \n    acustic_data_series = the_df['acoustic_data']   \n    \n    acustic_data_rft = fftpack.rfft(acustic_data_series-acustic_data_series.mean())\n       \n    rfreqs = -fftpack.rfftfreq(len(acustic_data_rft),diff_ttf.mean())   \n    \n    the_dict = {}\n    for idx in range(len(acustic_data_rft)):\n        if rfreqs[idx] in the_dict:\n            the_dict[rfreqs[idx]] = (the_dict[rfreqs[idx]]+np.abs(acustic_data_rft[idx]))\/2.\n        else: \n            the_dict[rfreqs[idx]] = np.abs(acustic_data_rft[idx])\n    \n    unique_rfreqs = np.unique(rfreqs)\n    \n    return [acustic_data_series.mean()]+[the_dict[ent] for ent in unique_rfreqs][:low_path_filter_n_freqs][1:]+[the_df['time_to_failure'].mean()]","66b6e388":"start_time = timeit.default_timer()\npd.DataFrame(np.array([features_row_per_sequence_index(idx) for idx in range(len(list(frame_indexes)))])).to_csv('..\/working\/feat_rfft_data_for_range_index_{}_nfreqs_{}.csv'.format(range_index, low_path_filter_n_freqs))\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","60c609f0":"def plot_test_seg_by_index(idx):\n    df_test_seg = pd.read_csv(os.path.join(\"..\/input\/test\",test_seg_files[idx]), dtype={'acoustic_data': np.int16})\n    (df_test_seg['acoustic_data']-df_test_seg['acoustic_data'].mean()).plot();","b085008a":"#MEAN (Bias) is removed \ndiff_ttf_mean = -0.000000001\navg_len=1\nframe_sequence_offset = -frame_indexes[0][0]\ndef show_test_frame_and_fft_by_idx(idx):\n    df_test_seg = pd.read_csv(os.path.join(\"..\/input\/test\",test_seg_files[idx]), dtype={'acoustic_data': np.int16})\n    fig, axs = plt.subplots(nrows=1, ncols=3, sharex=False)\n\n    print(df_test_seg.shape)\n    \n    acustic_data_series = df_test_seg['acoustic_data']\n   \n    print('acustic.mean = {:.9f}, acustic.std = {:.9f}'.format(acustic_data_series.mean(), acustic_data_series.std()))\n    \n    (acustic_data_series - acustic_data_series.mean()).plot(ax=axs[0]);\n\n    fig.set_size_inches(32,4)\n    \n    acustic_data_rft = fftpack.rfft(acustic_data_series-acustic_data_series.mean())\n    acustic_data_ft = fftpack.fft(acustic_data_series-acustic_data_series.mean())\n    \n    rfreqs = fftpack.rfftfreq(acustic_data_rft.size,diff_ttf_mean)\n    freqs = fftpack.fftfreq(acustic_data_ft.size, diff_ttf_mean)\n        \n    rfreqs = -rfreqs\n    \n    the_dict = {}\n    for idx in range(len(acustic_data_rft)):\n        if rfreqs[idx] in the_dict:\n            the_dict[rfreqs[idx]] = (the_dict[rfreqs[idx]]+np.abs(acustic_data_rft[idx]))\/2.\n        else: \n            the_dict[rfreqs[idx]] = np.abs(acustic_data_rft[idx])\n    unique_rfreqs = np.unique(rfreqs)\n    print(\"arrays are equal is {}\".format(np.array_equal(sorted(unique_rfreqs),unique_rfreqs)))\n    \n    pd.DataFrame.from_dict({'acustic_data_rft_amp': [the_dict[ent] for ent in unique_rfreqs][:low_path_filter_n_freqs], \n                            'rfreqs':unique_rfreqs[:low_path_filter_n_freqs]}).set_index('rfreqs').plot(ax=axs[1])\n    pd.DataFrame.from_dict({'acustic_data_ft_amp': (np.abs(acustic_data_ft)[len(freqs)\/\/2:]), \n                            'freqs':freqs[len(freqs)\/\/2:]}).set_index('freqs').plot(ax=axs[2])","e3158cab":"interact(show_test_frame_and_fft_by_idx, idx=widgets.IntSlider(min=0,max=len(test_seg_files)-1,step=1,value=0));","6fe065aa":"def test_features_row_per_sequence_index(idx):\n    df_test_seg = pd.read_csv(os.path.join(\"..\/input\/test\",test_seg_files[idx]), dtype={'acoustic_data': np.int16}) \n    acustic_data_series = df_test_seg['acoustic_data'] \n    \n    acustic_data_rft = fftpack.rfft(acustic_data_series-acustic_data_series.mean())\n       \n    rfreqs = -fftpack.rfftfreq(len(acustic_data_rft),diff_ttf_mean)   \n    \n    the_dict = {}\n    for idx in range(len(acustic_data_rft)):\n        if rfreqs[idx] in the_dict:\n            the_dict[rfreqs[idx]] = (the_dict[rfreqs[idx]]+np.abs(acustic_data_rft[idx]))\/2.\n        else: \n            the_dict[rfreqs[idx]] = np.abs(acustic_data_rft[idx])\n    \n    unique_rfreqs = np.unique(rfreqs)\n    \n    return [acustic_data_series.mean()]+[the_dict[ent] for ent in unique_rfreqs][:low_path_filter_n_freqs][1:]#+[the_df['time_to_failure'].mean()","68d03f1c":"len(test_features_row_per_sequence_index(0))","fbb85540":"start_time = timeit.default_timer()\npd.DataFrame(np.array([test_features_row_per_sequence_index(idx) for idx in range(len(test_seg_files))])).to_csv('..\/working\/feat_test_rfft_data_nfeatures_{}.csv'.format(low_path_filter_n_freqs))\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","0eb2cafd":"range_index=12 \nsequence_length = 4096\nstart_time = timeit.default_timer()\ntry:\n    del(df_sample)    \nexcept NameError:\n    pass\ndf_sample = pd.read_csv('..\/input\/train.csv', skiprows = index_ranges[range_index][0], nrows= index_ranges[range_index][1]-index_ranges[range_index][0],\n                       dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64})\ndf_sample.columns=['acoustic_data','time_to_failure']\nprint(df_sample.shape[0]\/sequence_length)\nprint('elapsed time: {:.2f} sec'.format(timeit.default_timer()-start_time))","e4117dd3":"#MEAN (Bias) is removed \navg_len=2\nsequence_offset = 0\ndef show_frame_and_cwt(sequence_idx):\n    fig, axs = plt.subplots(nrows=1, ncols=3, sharex=False)\n\n    print(df_sample[sequence_offset+sequence_length*sequence_idx:sequence_offset+sequence_length*sequence_idx+sequence_length].shape)\n    df_sample[sequence_offset+sequence_length*sequence_idx:sequence_offset+sequence_length*sequence_idx+sequence_length]['time_to_failure'].plot(ax=axs[0]);\n    \n    acustic_data_series = df_sample[sequence_offset+sequence_length*sequence_idx:sequence_offset+sequence_length*sequence_idx+sequence_length]['acoustic_data']\n    acustic_data_series_zero_mean = (acustic_data_series - acustic_data_series.mean())\n    acustic_data_series_zero_mean.plot(ax=axs[1])\n    fig.set_size_inches(32,4)\n    \n    acustic_data_cwt = signal.cwt(acustic_data_series_zero_mean, signal.morlet, #signal.morlet, signal.ricker\n                                  np.arange(1,31))\n    axs[2].imshow(acustic_data_cwt, cmap='PRGn', aspect='auto',)\n    print(len(acustic_data_cwt))\n    print(acustic_data_cwt.shape)","2690129f":"interact(show_frame_and_cwt, sequence_idx=widgets.IntSlider(min=0,max=df_sample.shape[0]\/sequence_length,step=1,value=0));","255ce546":"import pywt \nfrom pywt import wavedec\n#MEAN (Bias) is removed \navg_len=2\nsequence_offset = 0\ndef show_frame_and_dwt(sequence_idx):\n    fig, axs = plt.subplots(nrows=1, ncols=2, sharex=False)\n\n    print(df_sample[sequence_offset+sequence_length*sequence_idx:sequence_offset+sequence_length*sequence_idx+sequence_length].shape)\n    df_sample[sequence_offset+sequence_length*sequence_idx:sequence_offset+sequence_length*sequence_idx+sequence_length]['time_to_failure'].plot(ax=axs[0]);\n    \n    acustic_data_series = df_sample[sequence_offset+sequence_length*sequence_idx:sequence_offset+sequence_length*sequence_idx+sequence_length]['acoustic_data']\n    acustic_data_series_zero_mean = (acustic_data_series - acustic_data_series.mean())\n    acustic_data_series_zero_mean.plot(ax=axs[1])\n\n    fig.set_size_inches(32,4)\n    \n    acustic_data_dwt_coeffs = wavedec(acustic_data_series_zero_mean,'db1', level=1)\n    print(len(acustic_data_dwt_coeffs))\n    print((acustic_data_dwt_coeffs[0]).shape)\n    print(acustic_data_dwt_coeffs)","9d6f000b":"interact(show_frame_and_dwt, sequence_idx=widgets.IntSlider(min=0,max=df_sample.shape[0]\/sequence_length,step=1,value=0));","5522da01":"## Correlations","bc444389":"## Spectrogram","a438ecee":"### Fourier transform per sampling frame","4a9c21ea":"### Test frames","7696c5fb":"## Wavelets transform per sampling sequence","e9ed4fdd":"## Discrete wavelet transform","355fedaa":"### TTF Precision - Check MAX precision","4b33ad4d":"## EDA"}}