{"cell_type":{"04a83172":"code","2f5972a8":"code","c42619b6":"code","09937751":"code","09f2422f":"code","e2955065":"code","973cc5da":"code","430da906":"code","e7dba49a":"code","e13a90cf":"code","defeca1d":"code","8e8f75c0":"code","2971d45a":"code","7aa1a6f1":"code","35b7c407":"code","249461b2":"code","d1d30463":"code","df7208b3":"code","5de5f7e6":"code","3a944f1a":"code","12e2dcb8":"code","9673585c":"code","f27e4975":"code","02d74946":"code","35ec1e9e":"code","eb8cd143":"code","810798a9":"code","c03d4f82":"code","50f51023":"code","79a938a9":"code","e6570bf1":"code","591863fa":"code","5c9c599e":"code","f5a1c2fc":"code","fd6804e4":"code","b1d5fcf1":"code","4536e556":"code","ef30321d":"code","cae2f1e5":"code","6f511afd":"code","15412f0d":"code","a8003d06":"code","6d44d46d":"code","141fef6c":"code","d00974ba":"markdown","e4fccba8":"markdown","3dadb6cc":"markdown","f83e505e":"markdown","ba2f1ddc":"markdown","32f516e4":"markdown","7cdb76e3":"markdown","b9f31a50":"markdown","84a6438f":"markdown","c02fc898":"markdown","94ad921e":"markdown","9a913f7c":"markdown","7f3ed41e":"markdown","9f9343f6":"markdown"},"source":{"04a83172":"import pandas as pd\nimport numpy as np\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport io\nimport plotly.offline as py#visualization\npy.init_notebook_mode(connected=True)#visualization\nimport plotly.graph_objs as go#visualization\nimport plotly.tools as tls#visualization\nimport plotly.figure_factory as ff#visualization\n\nimport seaborn as sns\nimport plotly.express as px\n\nimport pydicom # for DICOM images\nfrom skimage.transform import resize\n\n# SKLearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport os\nimport random\nimport re\nimport math\nimport time\nfrom IPython.display import display_html\nimport missingno as msno \nimport gc\nimport cv2\nimport matplotlib.image as mpimg\n\n# Set Color Palettes for the notebook (https:\/\/color.adobe.com\/)\ncolors_nude = ['#FFE61A','#B2125F','#FF007B','#14B4CC','#099CB3']\nsns.palplot(sns.color_palette(colors_nude))\n\n# Set Style\nsns.set_style(\"whitegrid\")\nsns.despine(left=True, bottom=True)\n\n\nimport warnings\n\nwarnings.filterwarnings('ignore') # Disabling warnings for clearer outputs\n\n\nseed_val = 42\nrandom.seed(seed_val)\nnp.random.seed(seed_val)","2f5972a8":"# loading datasets\n\ntrain = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\nsample = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/sample_submission.csv')","c42619b6":"train.sample(5)","09937751":"test.sample(5)","09f2422f":"# loading datasets\n\ntrain = pd.read_csv('..\/input\/melanomaextendedtabular\/external_upsampled_tabular.csv')\ntest = pd.read_csv('..\/input\/melanomaextendedtabular\/test_tabular.csv')\nsample = pd.read_csv('..\/input\/melanomaextendedtabular\/sample_submission.csv')","e2955065":"# checking column names\n\nprint(\n    f'Train data has {train.shape[1]} features, {train.shape[0]} observations and Test data {test.shape[1]} features, {test.shape[0]} observations.\\nTrain features are:\\n{train.columns.tolist()}\\nTest features are:\\n{test.columns.tolist()}'\n)","973cc5da":"# renaming column names for easier use\n\ntrain.columns = [\n    'img_name','sex', 'age', 'location', 'target','width','height'\n]\n\ntest.columns = ['img_name','sex', 'age', 'location','width', 'height']","430da906":"# Checking missing values:\n\ndef missing_percentage(df):\n\n    total = df.isnull().sum().sort_values(\n        ascending=False)[df.isnull().sum().sort_values(ascending=False) != 0]\n    percent = (df.isnull().sum().sort_values(ascending=False) \/ len(df) *\n               100)[(df.isnull().sum().sort_values(ascending=False) \/ len(df) *\n                     100) != 0]\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n\n\nmissing_train = missing_percentage(train)\nmissing_test = missing_percentage(test)\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 6))\n\nsns.barplot(x=missing_train.index,\n            y='Percent',\n            data=missing_train,\n            palette=colors_nude,\n            ax=ax[0])\n\nsns.barplot(x=missing_test.index,\n            y='Percent',\n            data=missing_test,\n            palette=colors_nude,\n            ax=ax[1])\n\nax[0].set_title('Train Data Missing Values')\nax[1].set_title('Test Data Missing Values')","e7dba49a":"# Directory\ndirectory = '..\/input\/siim-isic-melanoma-classification'\n\n# Import the 2 csv s\ntrain_df = pd.read_csv(directory + '\/train.csv')\ntest_df = pd.read_csv(directory + '\/test.csv')\n\nprint('Train has {:,} rows and Test has {:,} rows.'.format(len(train_df), len(test_df)))\n\n# Change columns names\nnew_names = ['dcm_name', 'ID', 'sex', 'age', 'anatomy', 'diagnosis', 'benign_malignant', 'target']\ntrain_df.columns = new_names\ntest_df.columns = new_names[:5]","e13a90cf":"df1_styler = train_df.head().style.set_table_attributes(\"style='display:inline'\").set_caption('Head Train Data')\ndf2_styler = test_df.head().style.set_table_attributes(\"style='display:inline'\").set_caption('Head Test Data')\n\ndisplay_html(df1_styler._repr_html_() + df2_styler._repr_html_(), raw=True)","defeca1d":"f, (ax1, ax2) = plt.subplots(1, 2, figsize = (16, 6))\n\nmsno.matrix(train_df, ax = ax1, color=(107\/255, 196\/255, 171\/255), fontsize=10)\nmsno.matrix(test_df, ax = ax2, color=(136\/255, 136\/255, 130\/255), fontsize=10)\n\nax1.set_title('Train Missing Values', fontsize = 16)\nax2.set_title('Test Missing Values', fontsize = 16);","8e8f75c0":"#labels\nlab = train[\"sex\"].value_counts().keys().tolist()\n\n#values\nval = train[\"sex\"].value_counts().values.tolist()\n\ntrace1 = go.Pie(labels = lab ,\n               values = val ,\n               marker = dict(colors =  [ 'royalblue' ,'lime'],\n                             line = dict(color = \"white\",\n                                         width =  1.3)\n                            ),\n               rotation = 90,\n               hoverinfo = \"label+value+text\",\n               hole = .5\n              )\nlayout = go.Layout(dict(title = \"Gender Distribution\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                       )\n                  )\n\n\nlab2 = train[\"age\"].value_counts().keys().tolist()\n\n#values\nval2 = train[\"age\"].value_counts().values.tolist()\n\ntrace2 = go.Pie(labels = lab2 ,\n               values = val2 ,\n               marker = dict(colors =  [ 'royalblue' ,'lime'],\n                             line = dict(color = \"white\",\n                                         width =  1.3)\n                            ),\n               rotation = 90,\n               hoverinfo = \"label+value+text\",\n               hole = .5\n              )\nlayout = go.Layout(dict(title = \"Age Distribution\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                       )\n                  )\n\ndata = [trace1,trace2]\nfig  = go.Figure(data = data,layout = layout)\npy.iplot(fig)\n","2971d45a":"# Filling missing  values with 'unknown' and '-1' tags:\n\nfor df in [train, test]:\n    df['location'].fillna('unknown', inplace=True)\n    \ntrain['sex'].fillna('unknown', inplace=True)\n\ntrain['age'].fillna(-1, inplace=True)","7aa1a6f1":"# Plotting interactive sunburst:\n\nfig = px.sunburst(data_frame=train,\n                  path=['target', 'sex', 'location'],\n                  color='sex',\n                  color_discrete_sequence=colors_nude,\n                  maxdepth=-1,\n                  title='Sunburst Chart Benign\/Malignant > Sex > Location')\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=50, l=0, r=0, b=0))\nfig.show()","35b7c407":"# Impute for anatomy\ntrain_df['anatomy'].fillna('torso', inplace = True) ","249461b2":"anatomy = test_df.copy()\nanatomy['flag'] = np.where(test_df['anatomy'].isna()==True, 'missing', 'not_missing')\n\n# Figure\nf, (ax1, ax2) = plt.subplots(1, 2, figsize = (16, 6))\n\nsns.countplot(anatomy['flag'], hue=anatomy['sex'], ax=ax1, palette=colors_nude)\n\nsns.distplot(anatomy[anatomy['flag'] == 'missing']['age'],\n             hist=False, rug=True, label='Missing', ax=ax2, \n             color=colors_nude[2], kde_kws=dict(linewidth=4, bw=0.1))\n\nsns.distplot(anatomy[anatomy['flag'] == 'not_missing']['age'], \n             hist=False, rug=True, label='Not Missing', ax=ax2, \n             color=colors_nude[3], kde_kws=dict(linewidth=4, bw=0.1))\n\nax1.set_title('Gender for Anatomy', fontsize=16)\nax2.set_title('Age Distribution for Anatomy', fontsize=16)\nsns.despine(left=True, bottom=True);","d1d30463":"# Figure\nf, (ax1, ax2) = plt.subplots(1, 2, figsize = (16, 6))\n\na = sns.countplot(train_df['anatomy'], ax=ax1, palette = colors_nude)\nb = sns.countplot(train_df['diagnosis'], ax=ax2, palette = colors_nude)\n\na.set_xticklabels(a.get_xticklabels(), rotation=35, ha=\"right\")\nb.set_xticklabels(b.get_xticklabels(), rotation=35, ha=\"right\")\n\nfor p in a.patches:\n    a.annotate(format(p.get_height(), ','), \n           (p.get_x() + p.get_width() \/ 2., \n            p.get_height()), ha = 'center', va = 'center', \n           xytext = (0, 4), textcoords = 'offset points')\n    \nfor p in b.patches:\n    b.annotate(format(p.get_height(), ','), \n           (p.get_x() + p.get_width() \/ 2., \n            p.get_height()), ha = 'center', va = 'center', \n           xytext = (0, 4), textcoords = 'offset points')\n    \nax1.set_title('Anatomy Frequencies', fontsize=16)\nax2.set_title('Diagnosis Frequencies', fontsize=16)\nsns.despine(left=True, bottom=True);","df7208b3":"print(\n    f'Number of unique Patient ID\\'s in train set: {train_df.nunique()}, Total: {train_df.count()}\\nNumber of unique Patient ID\\'s in test set: {test_df.nunique()}, Total: {test_df.count()}'\n)","5de5f7e6":"print('Train .dcm number of images:', len(list(os.listdir('..\/input\/siim-isic-melanoma-classification\/train'))), '\\n' +\n      'Test .dcm number of images:', len(list(os.listdir('..\/input\/siim-isic-melanoma-classification\/test'))), '\\n' +\n      'Train .jpeg number of images:', len(list(os.listdir('..\/input\/siim-isic-melanoma-classification\/jpeg\/train'))), '\\n' +\n      'Test .jpeg number of images:', len(list(os.listdir('..\/input\/siim-isic-melanoma-classification\/jpeg\/test'))), '\\n' +\n      '-----------------------', '\\n' +\n      'There is the same number of images as in train\/ test .csv datasets')","3a944f1a":"# Add Image Path\n\n# === DICOM ===\n# Create the paths\npath_train = directory + '\/train\/' + train_df['dcm_name'] + '.dcm'\npath_test = directory + '\/test\/' + test_df['dcm_name'] + '.dcm'\n\n# Append to the original dataframes\ntrain_df['path_dicom'] = path_train\ntest_df['path_dicom'] = path_test\n\n# === JPEG ===\n# Create the paths\npath_train = directory + '\/jpeg\/train\/' + train_df['dcm_name'] + '.jpg'\npath_test = directory + '\/jpeg\/test\/' + test_df['dcm_name'] + '.jpg'\n\n# Append to the original dataframes\ntrain_df['path_jpeg'] = path_train\ntest_df['path_jpeg'] = path_test\n","12e2dcb8":"# Save the files\ntrain_df.to_csv('train_clean.csv', index=False)\ntest_df.to_csv('test_clean.csv', index=False)","9673585c":"# === DICOM ===\n# Create the paths\npath_train = directory + '\/train\/' + train_df['dcm_name'] + '.dcm'\npath_test = directory + '\/test\/' + test_df['dcm_name'] + '.dcm'\n\n# Append to the original dataframes\ntrain_df['path_dicom'] = path_train\ntest_df['path_dicom'] = path_test\n\n# === JPEG ===\n# Create the paths\npath_train = directory + '\/jpeg\/train\/' + train_df['dcm_name'] + '.jpg'\npath_test = directory + '\/jpeg\/test\/' + test_df['dcm_name'] + '.jpg'\n\n# Append to the original dataframes\ntrain_df['path_jpeg'] = path_train\ntest_df['path_jpeg'] = path_test","f27e4975":"def show_images(data, n = 5, rows=1, cols=5, title='Default'):\n    plt.figure(figsize=(16,4))\n\n    for k, path in enumerate(data['path_dicom'][:n]):\n        image = pydicom.read_file(path)\n        image = image.pixel_array\n        \n        # image = resize(image, (200, 200), anti_aliasing=True)\n\n        plt.suptitle(title, fontsize = 16)\n        plt.subplot(rows, cols, k+1)\n        plt.imshow(image)\n        plt.axis('off')","02d74946":"# Show Benign Samples\nshow_images(train_df[train_df['target'] == 0], n=10, rows=2, cols=5, title='Benign Sample')","35ec1e9e":"fig, axes = plt.subplots(nrows=2, ncols=6, figsize=(16,6))\nplt.suptitle(\"B&W\", fontsize = 16)\n\nfor i in range(0, 2*6):\n    data = pydicom.read_file(train_df['path_dicom'][i])\n    image = data.pixel_array\n    \n    # Transform to B&W\n    # The function converts an input image from one color space to another.\n    image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n    image = cv2.resize(image, (200,200))\n    \n    x = i \/\/ 6\n    y = i % 6\n    axes[x, y].imshow(image, cmap=plt.cm.bone) \n    axes[x, y].axis('off')","eb8cd143":"fig, axes = plt.subplots(nrows=2, ncols=6, figsize=(16,6))\nplt.suptitle(\"Without Gaussian Blur\", fontsize = 16)\n\nfor i in range(0, 2*6):\n    data = pydicom.read_file(train_df['path_dicom'][i])\n    image = data.pixel_array\n    \n    # Transform to B&W\n    # The function converts an input image from one color space to another.\n    image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\n    image = cv2.resize(image, (200,200))\n    \n    x = i \/\/ 6\n    y = i % 6\n    axes[x, y].imshow(image, cmap=plt.cm.bone) \n    axes[x, y].axis('off')","810798a9":"fig, axes = plt.subplots(nrows=2, ncols=6, figsize=(16,6))\nplt.suptitle(\"With Gaussian Blur\", fontsize = 16)\n\nfor i in range(0, 2*6):\n    data = pydicom.read_file(train_df['path_dicom'][i])\n    image = data.pixel_array\n    \n    # Transform to B&W\n    # The function converts an input image from one color space to another.\n    image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\n    image = cv2.resize(image, (200,200))\n    image=cv2.addWeighted(image, 4, cv2.GaussianBlur(image, (0,0) ,256\/10), -4, 128)\n    \n    x = i \/\/ 6\n    y = i % 6\n    axes[x, y].imshow(image, cmap=plt.cm.bone) \n    axes[x, y].axis('off')","c03d4f82":"fig, axes = plt.subplots(nrows=2, ncols=6, figsize=(16,6))\nplt.suptitle(\"Hue, Saturation, Brightness\", fontsize = 16)\n\nfor i in range(0, 2*6):\n    data = pydicom.read_file(train_df['path_dicom'][i])\n    image = data.pixel_array\n    \n    # Transform to B&W\n    # The function converts an input image from one color space to another.\n    image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)\n    image = cv2.resize(image, (200,200))\n    \n    x = i \/\/ 6\n    y = i % 6\n    axes[x, y].imshow(image, cmap=plt.cm.bone) \n    axes[x, y].axis('off')","50f51023":"# Necessary Imports\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\nimport torchvision.transforms as transforms\nimport torchvision","79a938a9":"# Select a small sample of the .jpeg image paths\nimage_list = train_df.sample(12)['path_jpeg']\nimage_list = image_list.reset_index()['path_jpeg']\n\n# Show the sample\nplt.figure(figsize=(16,6))\nplt.suptitle(\"Original View\", fontsize = 16)\n    \nfor k, path in enumerate(image_list):\n    image = mpimg.imread(path)\n        \n    plt.subplot(2, 6, k+1)\n    plt.imshow(image)\n    plt.axis('off')","e6570bf1":"WEIGHT = 1","591863fa":"submission = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\ntest = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\nsub_best = pd.read_csv('..\/input\/eda-modelling-of-the-external-data-inc-ensemble\/external_meta_ensembled.csv')","5c9c599e":"files_sub = [\n    '..\/input\/minmax-ensemble-0-9526-lb\/submission.csv',\n    '..\/input\/new-basline-np-log2-ensemble-top-10\/submission.csv',\n    '..\/input\/stacking-ensemble-on-my-submissions\/submission_mean.csv',\n    '..\/input\/analysis-of-melanoma-metadata-and-effnet-ensemble\/ensembled.csv',\n    '..\/input\/eda-modelling-of-the-external-data-inc-ensemble\/external_meta_ensembled.csv',\n    '..\/input\/submission-exploration\/submission.csv',\n    '..\/input\/siim-isic-melanoma-classification-ensemble\/submission.csv',\n    '..\/input\/stacking-ensemble-on-my-submissions\/submission_median.csv',\n    '..\/input\/analysis-of-melanoma-metadata-and-effnet-ensemble\/blended_effnets.csv'\n]\nfiles_sub = sorted(files_sub)\nprint(len(files_sub))\nfiles_sub","f5a1c2fc":"for file in files_sub:\n    test[file.replace(\".csv\", \"\")] = pd.read_csv(file).sort_values('image_name')[\"target\"]\ntest['id'] = test.index","fd6804e4":"test.head()","b1d5fcf1":"test.columns","4536e556":"test[\"diff_good1\"] =  test['..\/input\/new-basline-np-log2-ensemble-top-10\/submission'] - test['..\/input\/stacking-ensemble-on-my-submissions\/submission_mean']\ntest[\"diff_good1\"] =  test['..\/input\/eda-modelling-of-the-external-data-inc-ensemble\/external_meta_ensembled'] - test['..\/input\/siim-isic-melanoma-classification-ensemble\/submission']\ntest[\"diff_good2\"] = test['..\/input\/analysis-of-melanoma-metadata-and-effnet-ensemble\/blended_effnets'] - test['..\/input\/stacking-ensemble-on-my-submissions\/submission_median']\n\ntest[\"diff_bad1\"] = test['..\/input\/minmax-ensemble-0-9526-lb\/submission'] - test['..\/input\/submission-exploration\/submission']","ef30321d":"test[\"sub_best\"] = test['..\/input\/analysis-of-melanoma-metadata-and-effnet-ensemble\/ensembled']\ncol_comment = [\"id\", \"image_name\", \"patient_id\", \"sub_best\"]\ncol_diff = [column for column in test.columns if \"diff\" in column]\ntest_diff = test[col_comment + col_diff].reset_index(drop=True)\n\ntest_diff[\"diff_avg\"] = test_diff[col_diff].mean(axis=1) # the mean trend","cae2f1e5":"# Apply the post-processing technique in one line (as explained in the pseudo-code of my post.\ntest_diff[\"sub_new\"] = test_diff.apply(lambda x: (1+WEIGHT*x[\"diff_avg\"])*x[\"sub_best\"] if x[\"diff_avg\"]<0 else (1-WEIGHT*x[\"diff_avg\"])*x[\"sub_best\"] + WEIGHT*x[\"diff_avg\"] , axis=1)","6f511afd":"submission[\"target\"] = sub_best[\"target\"]\nsubmission.head()","15412f0d":"test_diff.head()","a8003d06":"submission.loc[test[\"id\"], \"target\"] = test_diff[\"sub_new\"].values","6d44d46d":"submission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","141fef6c":"plt.hist(submission.target,bins=100)\nplt.show()","d00974ba":"# Loading the Data","e4fccba8":"# Please don't forget to upvote this notebook\nThank you","3dadb6cc":"# Sanity Check","f83e505e":"# Differences in distribution by age and gender","ba2f1ddc":"# Sunburstt","32f516e4":"# Check missing values","7cdb76e3":"# Train: ANATOMY Variable","b9f31a50":"# Torchvision.transforms","84a6438f":"![](https:\/\/images11.domashnyochag.ru\/upload\/img_cache\/157\/1572dda59b3e8ac590349e412550149f_ce_1200x627x0x0_fitted_1200x630.jpg)\n\n# Analysis of SIIM-ISIC Melanoma Classification Metadata and Images\n\nSkin cancer is common cancer type and despite beign mostly non malignant, due to high case numbers it's pretty serious diasease and can lead serious cases if not detected, treated in time. It's usually diagnosed by eye for primarily and followed by further clinical analysis if needed. Even though the rares outcome is called melanoma it's the most deadly one, so early detection is pretty important. For this task using computer aided diagnosis might be helpful for primarily steps and early detections. Better detection might save thousands of lives.\n\n\n\nMany thanks :\nhttps:\/\/www.kaggle.com\/datafan07\/eda-modelling-of-the-external-data-inc-ensemble\nhttps:\/\/www.kaggle.com\/datafan07\/analysis-of-melanoma-metadata-and-effnet-ensemble\nhttps:\/\/www.kaggle.com\/andradaolteanu\/siim-melanoma-competition-eda-augmentations\n    \n    \n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/epMqgs7g4cc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","c02fc898":"# Post-Processing Technique\n\nThis work was adapted from the 1st place solution of the Jigsaw 2020 competition: https:\/\/www.kaggle.com\/rafiko1\/1st-place-jigsaw-post-processing-example","94ad921e":"# Unique Patients","9a913f7c":"# Anatomy and Diagnosis","7f3ed41e":"# Test: ANATOMY Variable","9f9343f6":"# CSV Files , Test + Train"}}