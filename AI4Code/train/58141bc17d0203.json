{"cell_type":{"a5ecd0f7":"code","ce80f056":"code","d9d9ded2":"code","e5cc3ccf":"code","5545d629":"code","c6f128db":"code","9236875c":"code","1c767c1c":"code","3558b378":"code","18468c6f":"code","b2960b12":"code","6a40b200":"code","9dcdb518":"markdown","b66febf2":"markdown","26d118e2":"markdown","073f4f11":"markdown","ea04a007":"markdown","8d6a9d17":"markdown","2e3b1634":"markdown"},"source":{"a5ecd0f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce80f056":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport plotly.express as px","d9d9ded2":"# Not limiting the column number when displaying dataframe\npd.set_option(\"display.max_columns\", None)","e5cc3ccf":"df = pd.read_csv(\"..\/input\/beginners-classification-dataset\/classification.csv\", sep = \",\", skipinitialspace = True)\ndf.head()","5545d629":"from sklearn.model_selection import train_test_split\n\nX = df.drop([\"success\"], axis = 1).values\ny = df[\"success\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)","c6f128db":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","9236875c":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","1c767c1c":"try:\n    get_ipython().magic('matplotlib inline')\n    get_ipython().magic('config InlineBackend.figure_formats = set([\"retina\"])')\nexcept NameError:\n    pass\n\ndef plot_classifier(model, X, Z, proba = False, xlabel = None, ylabel = None):\n    \n    plt.figure(figsize = (16, 10))\n    plt.set_cmap(\"RdYlBu\")\n    \n    x_min = X[:, 0].min() - 1\n    x_max = X[:, 0].max() + 1\n    \n    y_min = X[:, 1].min() - 1\n    y_max = X[:, 1].max() + 1\n    \n    xx, yy = np.meshgrid(\n        np.linspace(x_min, x_max, 1000),\n        np.linspace(y_min, y_max, 1000)\n    )\n\n    if proba:\n        zz = model.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]\n        plt.imshow(zz.reshape(xx.shape), \n                   origin = \"lower\", \n                   aspect = \"auto\", \n                   extent = (x_min, x_max, y_min, y_max), \n                   vmin = 0, \n                   vmax = 1, \n                   alpha = 0.25)\n    else: \n        zz = model.predict(np.c_[xx.ravel(), yy.ravel()])\n        plt.contourf(xx, yy, zz.reshape(xx.shape), \n                     alpha = 0.25, \n                     vmin = 0, \n                     vmax = 1)\n\n    plt.scatter(X[:, 0], X[:, 1], c=Z)\n    \n    if xlabel is not None:\n        plt.xlabel(xlabel)\n       \n    if ylabel is not None:\n        plt.ylabel(ylabel)\n        \n    plt.xlim(x_min, x_max)\n    plt.ylim(y_min, y_max)\n\n    plt.title(\"Desicion Border Graphics\")\n    plt.show()","3558b378":"# Hard decision border (without probability coloring)\nplot_classifier(model, X_train, y_train, proba = False, xlabel = \"Age\", ylabel = \"Interest\")","18468c6f":"# Soft decision border (with probability coloring)\nplot_classifier(model, X_train, y_train, proba = True, xlabel = \"Age\", ylabel = \"Interest\")","b2960b12":"# Hard decision border (without probability coloring)\nplot_classifier(model, X_test, y_test, proba = False, xlabel = \"Age\", ylabel = \"Interest\")","6a40b200":"# Soft decision border (with probability coloring)\nplot_classifier(model, X_test, y_test, proba = True, xlabel = \"Age\", ylabel = \"Interest\")","9dcdb518":" # **<span style = \"color: #f1c40f;\">TABLE OF CONTENTS<\/span>**\n \n\n**IMPORTING LIBRARIES**\n\n**LOADING & DISPLAYING DATA**\n\n**BUILDING & TRAINING MODEL**\n\n**VISUALIZING THE ALGORITHM'S DECISION BORDER**\n\n\n# **<span style = \"color: #f1c40f;\">IMPORTING LIBRARIES<\/span>**","b66febf2":"# **<span style = \"color: #f1c40f;\">VISUALIZING THE ALGORITHM'S DECISION BORDER<\/span>**","26d118e2":"# **<span style = \"color: #f1c40f;\">BUILDING & TRAINING MODEL<\/span>**","073f4f11":"# **<span style = \"color: #f1c40f;\">LOADING & DISPLAYING DATA<\/span>**","ea04a007":"### **Test data**","8d6a9d17":"# <h1 style = \"background: #fdfefe; border:0; color:black\"><b>Decision Border Visualizer<\/b><\/h1>","2e3b1634":"### **Train data**"}}