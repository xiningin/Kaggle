{"cell_type":{"48349725":"code","92dc08f3":"code","612c1987":"code","07878fbe":"code","fb89a843":"code","2a348153":"code","37e7f0d9":"code","44593d13":"code","89bac5b6":"code","70d9f72a":"code","ad27a6b6":"code","56e5cc1d":"code","63142cc8":"code","5220fe4b":"code","bfd58750":"code","f84ad5ef":"code","44bac531":"code","8da397fd":"markdown","3fa7ec04":"markdown"},"source":{"48349725":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","92dc08f3":"data = pd.read_csv('\/kaggle\/input\/voicegender\/voice.csv')","612c1987":"data.info()","07878fbe":"data.head()","fb89a843":"# We need to classificate to genders, so we have to make labels integer rather than object. I decided to make 1 as man, 0 as woman. (I'm not sexist, it is only for implementation, no offense :) )\ndata.label = [1 if each == 'male' else 0 for each in data.label]","2a348153":"# Our new data\ndata.label.head() # 1's are for male","37e7f0d9":"data.label.tail() # 0's are for females","44593d13":"y = data.label.values # set y as our genders\nx_data = data.drop(['label'],axis=1) # other features in x_data ","89bac5b6":"# Normalization process is important for making data relevant, \n# which means it is kind of a protection of small datas for avoiding pressure of big datas. (Ex: 0.01 cannot be observed due to 1024.92)  \n# This process makes all values between 0 and 1\n\nx = (x_data - np.min(x_data)) \/ (np.max(x_data)-np.min(x_data)).values","70d9f72a":"# train test split\n# import necessary libraries\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n# we have to transpoze our arrays in order to set features and samples correctly\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T\n\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)\n# As it can be seen below, it became [total feature,total sample]","ad27a6b6":"# Initializing parameters\ndef initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01) # weight\n    b = 0.0 # bias\n    return w, b","56e5cc1d":"# Sigmoid function\n# Calculation of z\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head","63142cc8":"# Forward and Backward Propagations \ndef forward_backward_propagation(w,b,x_train,y_train):\n    \n    # Forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    # Backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] \n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","5220fe4b":"# Updating parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = [] # for storing all costs\n    cost_list2 = [] # for storing once every 10 costs\n    index = [] # for storing index in order to show on plot\n    \n    # Updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # We update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","bfd58750":"# Prediction\ndef predict(w,b,x_test):\n    \n    # x_test is a input for Forward Propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n","f84ad5ef":"# Let's gather all the classes\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # Initialize\n    dimension =  x_train.shape[0] # It's 20 because samples of our data has 20 features \n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 500) ","44bac531":"# Let's make the whole thing using sklearn library\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"Test accuracy {}\".format(lr.score(x_test.T,y_test.T)))\n# As it can be seen, we have better accuracy thx to sklearn :)","8da397fd":"Firstly, look the data for what we have:","3fa7ec04":"Note: Formulas has been taken from Kaan Can's kernel.\nhttps:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners"}}