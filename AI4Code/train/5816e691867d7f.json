{"cell_type":{"e57786aa":"code","c4dd6ff5":"code","dcd78372":"code","b83e7068":"code","cb97e62b":"code","db43ff7f":"code","61a1bf68":"code","403dda74":"code","ed010fbd":"code","3e0814fe":"code","25827078":"code","c3d3d900":"code","841b8b4f":"code","71fe4c17":"code","70afc656":"code","98e32fa6":"code","18394d40":"code","bb190ac3":"code","cf7fdc44":"code","1424ad8f":"markdown","fded4e40":"markdown","2c4335d6":"markdown","c9d800d5":"markdown"},"source":{"e57786aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4dd6ff5":"from google.cloud import bigquery","dcd78372":"client = bigquery.Client()\ndataset_ref = client.dataset('stackoverflow', project='bigquery-public-data')\ndataset = client.get_dataset(dataset_ref)","b83e7068":"tables = list(client.list_tables(dataset))\nfor table in tables:\n    print(table.table_id)","cb97e62b":"table_posts_questions_ref = dataset_ref.table('posts_questions')\ntable_posts_questions = client.get_table(table_posts_questions_ref)\ntable_posts_questions.schema","db43ff7f":"query_1 = \"\"\"\n            SELECT COUNT(*) AS questions\n            FROM `bigquery-public-data.stackoverflow.posts_questions` \n            WHERE answer_count > 0\n            \"\"\"\nsafe_query_1_job = client.query(query_1)\ntable_1 = safe_query_1_job.to_dataframe()\ntable_1","61a1bf68":"# ALL YEARS\ncount_questions_have_answers = table_1.questions[0]\ncount_questions = table_posts_questions.num_rows\nprint(\"count questions have answers = \", count_questions_have_answers, \"; count all questions = \", count_questions)\nprint(\"the is percentage of questions that have been answered over the years \", count_questions_have_answers \/ count_questions * 100, \"%\")","403dda74":"# EVERY YEAR\nquery_1_1 = \"\"\"\n            SELECT EXTRACT(YEAR FROM creation_date) AS year,\n                  ROUND(100 * SUM(IF(answer_count > 0, 1, 0)) \/ COUNT(*), 1) AS percentage_of_questions_with_answers\n            FROM `bigquery-public-data.stackoverflow.posts_questions`\n            GROUP BY year\n            ORDER BY year\n            \"\"\"\nsafe_query_1_1_job = client.query(query_1_1)\ntable_1_1 = safe_query_1_1_job.to_dataframe()\ntable_1_1","ed010fbd":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","3e0814fe":"plt.figure(figsize=(14, 4))\nsns.barplot(x='year', y='percentage_of_questions_with_answers', data=table_1_1)\n","25827078":"table_users_ref = dataset_ref.table(\"users\")\ntable_users = client.get_table(table_users_ref)\ntable_users.schema","c3d3d900":"# average reputation per year among all users\nquery_2 = \"\"\"\n            SELECT  EXTRACT(YEAR FROM creation_date) AS date,\n                    AVG(reputation) AS reputation\n            FROM `bigquery-public-data.stackoverflow.users`\n            GROUP BY date\n            ORDER BY date\n            \"\"\"\nsafe_query_2_job = client.query(query_2)\ntable_2 = safe_query_2_job.to_dataframe()\ntable_2","841b8b4f":"plt.figure(figsize=(14, 4))\nsns.barplot(x='date', y='reputation', data=table_2)","71fe4c17":"table_badges_ref = dataset_ref.table('badges')\ntable_badges = client.get_table(table_badges_ref)\ntable_badges.schema","70afc656":"# number of badges per year for all users\nquery_3 = \"\"\"\n            SELECT  EXTRACT(YEAR FROM date) AS date,\n                    COUNT(user_id) AS count_badges\n            FROM `bigquery-public-data.stackoverflow.badges`\n            GROUP BY date\n            ORDER BY date\n            \"\"\"\nsafe_query_3_job = client.query(query_3)\ntable_3 = safe_query_3_job.to_dataframe()\ntable_3","98e32fa6":"plt.figure(figsize=(14, 4))\nsns.barplot(x='date', y='count_badges', data=table_3)","18394d40":"query_4 = \"\"\"\n            SELECT  name AS name,\n                    COUNT(user_id) AS gold\n            FROM `bigquery-public-data.stackoverflow.badges`\n            WHERE class = 1\n            GROUP BY name\n            ORDER BY gold DESC\n            LIMIT 10\n            \"\"\"\nsafe_query_4_job = client.query(query_4)\ntable_4 = safe_query_4_job.to_dataframe()\ntable_4","bb190ac3":"plt.figure(figsize=(14, 4))\nsns.barplot(x='name', y='gold', data=table_4)","cf7fdc44":"query_5 = \"\"\"\n            SELECT  EXTRACT(DAYOFWEEK FROM q.creation_date) AS day_week,\n                    SUM(IF(a.parent_id IS NOT NULL AND EXTRACT(MINUTE FROM q.creation_date) - EXTRACT(MINUTE FROM a.creation_date) < 60, 1, 0)) \/ COUNT(1) AS percent\n            FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n            LEFT JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                 ON q.id = a.parent_id\n            GROUP BY day_week\n            ORDER BY percent\n            \"\"\"\nsafe_query_5_job = client.query(query_5)\ntable_5 = safe_query_5_job.to_dataframe()\ntable_5","1424ad8f":"# Which day of the week has most questions answered within an hour?\n\n\u0412 \u043a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u044b \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0430?","fded4e40":"# What is the reputation and badge count of users across different tenures on StackOverflow?\n\n\u041a\u0430\u043a\u043e\u0432\u0430 \u0440\u0435\u043f\u0443\u0442\u0430\u0446\u0438\u044f \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u043a\u043e\u0432 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 StackOverflow \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f?","2c4335d6":"# What are 10 of the \u201ceasier\u201d gold badges to earn?\n\n\u041a\u0430\u043a\u0438\u0435 10 \u0437\u043e\u043b\u043e\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u043a\u043e\u0432 \u00ab\u043b\u0435\u0433\u0447\u0435\u00bb \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c?\n","c9d800d5":"# What is the percentage of questions that have been answered over the years?\n\n\u041a\u0430\u043a\u043e\u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0434\u0430\u043d\u044b \u043e\u0442\u0432\u0435\u0442\u044b \u0437\u0430 \u044d\u0442\u0438 \u0433\u043e\u0434\u044b?"}}