{"cell_type":{"74ef5d74":"code","2e1bf433":"code","c6f4c597":"code","e1ef1c19":"code","97fb9908":"code","419a78c8":"code","ca9126be":"code","2f371246":"code","1e7118c7":"code","a32cb16d":"code","1796c60b":"code","ad607236":"code","57de6594":"code","86553e33":"code","e8e37357":"code","74630802":"code","68020ce4":"code","df403055":"code","df2a711b":"code","9c50144b":"code","fdccb125":"code","a32d3454":"code","a169e709":"code","5881d640":"code","ed60d1d3":"code","0e6a9834":"code","2194f378":"code","14d4f4ee":"code","15059d1d":"code","554c6911":"code","c78d4642":"markdown","10cac407":"markdown","2184ccb5":"markdown","5f442abf":"markdown","13ec279d":"markdown","2379fbe4":"markdown","ad056a3a":"markdown","9aac2f45":"markdown","26cf72e0":"markdown","ce73b89d":"markdown","b2443822":"markdown","d5170a96":"markdown","7a11e6cc":"markdown","7b0ebdf8":"markdown","b4cf206d":"markdown","dd09d1e0":"markdown","1250a25a":"markdown","eb5a1bbd":"markdown","6014ac62":"markdown","208bcf1d":"markdown","82d0fcf4":"markdown","3f35ab3c":"markdown"},"source":{"74ef5d74":"import glob\nimport warnings\nimport numpy as np \nimport pandas as pd\nimport plotly as py\nimport seaborn as sns\nimport statistics as stat\nimport plotly.express as px\nimport plotly.graph_objs as go\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndistricts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv')\nproducts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv')\n\neng_path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data'\neng_files = glob.glob(eng_path + \"\/*.csv\")\n\nfiles = []\n\nfor file in eng_files:\n    df = pd.read_csv(file, index_col = None, header = 0)\n    district_id = file.split('\/')[4].split('.')[0]\n    df['district_id'] = district_id\n    files.append(df)\n    \nengagement = pd.concat(files)\nengagement = engagement.reset_index(drop = True)\nengagement['time'] = pd.to_datetime(engagement['time'])","2e1bf433":"districts.head(3)","c6f4c597":"districts.info()","e1ef1c19":"round(len(districts.query(\"state != state\")) \/ len(districts) * 100, 1)","97fb9908":"districts.dropna(inplace = True)","419a78c8":"for i in ['pct_black\/hispanic', 'pct_free\/reduced']:\n    districts[i] = districts[i].apply(lambda x: float(x.split(',')[0][1:]) + 0.1)\n\ndistricts['pp_total_raw'] = districts['pp_total_raw'].apply(lambda x: int(x.split(',')[0][1:]) + 1000)\n\ndistricts.drop('county_connections_ratio', axis = 1, inplace = True)\n\ndistricts.head(3)","ca9126be":"products.head(3)","2f371246":"products.info()","1e7118c7":"products['Basic_category'] = 'x'\nfor i in range(len(products)):\n    if pd.isna(products['Primary Essential Function'][i]) == False:\n        products['Basic_category'][i] = products['Primary Essential Function'][i].split('-')[0][:-1]\n        \nproducts.head(3)","a32cb16d":"engagement.head(3)","1796c60b":"engagement.info()","ad607236":"state_abb = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District Of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\ndistricts['state_abb'] = districts['state'].map(state_abb)\n\nfig = go.Figure()\nlayout = dict(\n    title_text = \"Count of districts in the available States\",\n    title_font = dict(\n            family = \"monospace\",\n            size = 25,\n            color = \"black\"\n            ),\n    geo_scope = 'usa'\n)\n\nfig.add_trace(\n    go.Choropleth(\n        locations = districts['state_abb'].value_counts().to_frame().reset_index()['index'],\n        zmax = 1,\n        z = districts['state_abb'].value_counts().to_frame().reset_index()['state_abb'],\n        locationmode = 'USA-states',\n        marker_line_color = 'white',\n        geo = 'geo',\n        colorscale = \"cividis\", \n    )\n)\n            \nfig.update_layout(layout)   \nfig.show()\n\nplt.figure(figsize = (15, 8))\nsns.set_style(\"white\")\na = sns.barplot(data = districts['state'].value_counts().reset_index(), x = 'state', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14, color = '#283655')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.5 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 15, color = '#283655')\n\nplt.show()","57de6594":"fig = px.pie(districts['locale'].value_counts().reset_index().rename(columns = {'locale': 'count'}), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = ' The count of districts <br>in each type <br>of areas', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#283655')],\n                  showlegend = False)\n                  \nfig.show()","86553e33":"colors = ['#90afc5', '#336b87', '#763626']\n\nfig = plt.figure(figsize = (15, 11))\nfor i in range(len(districts.columns.tolist()[3:6])):\n    plt.subplot(2, 2, i+1)\n    sns.set_style(\"white\")\n    plt.title(districts.columns.tolist()[3:6][i], size = 20, fontname = 'monospace', color = colors[i])\n    a = sns.kdeplot(districts[districts.columns.tolist()[3:6][i]], color = colors[i], shade = True, alpha = 0.9, linewidth = 1.5, edgecolor = 'black')\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace')\n    plt.yticks([])\n    for j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\n        a.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(h_pad = 3)\n\nplt.figtext(0.07, 1.05, 'Distribution of characteristics of school districts', fontsize = 30, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.84, 0.37, 'Conclusion', fontsize = 25, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.98, 0.15, '''The average number of students who identified themselves\nas Black or Hispanic is 23.2%. The most common value is 10%.\n\nThe average number of students eligible for free orreduced-price\nlunch is 38%. The most common values are ~30% and ~50%.\n\nPer-pupil total expenditure (sum of local and federal \nexpenditure) is 11 205 $. The most common value is 9 000 \\$.''', fontsize = 13, fontname = 'monospace', color = '#283655', ha = 'right')\n\nplt.show()","e8e37357":"dist_area_group = districts.groupby('locale').agg({'pct_black\/hispanic': 'mean', 'pct_free\/reduced': 'mean', 'pp_total_raw': 'mean'}).reset_index()\n\ncolors = ['#90afc5', '#336b87', '#763626']\n\nfig = plt.figure(figsize = (13, 12))\nfor i in range(len(dist_area_group.columns.tolist()[1:])):\n    plt.subplot(2, 2, i+1)\n    sns.set_style(\"white\")\n    plt.title(dist_area_group.columns.tolist()[1:][i], size = 20, fontname = 'monospace', y = 1.09, color = colors[i])\n    plt.grid(color = 'gray', linestyle = ':', axis = 'y', zorder = 0,  dashes = (1,7))\n    a = sns.barplot(data = dist_area_group, x = 'locale', y = dist_area_group.columns.tolist()[1:][i], color = colors[i])\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace', size = 14)\n    plt.yticks([])\n    \n    for j in ['right', 'top', 'left']:\n        a.spines[j].set_visible(False)\n    for j in ['bottom']:\n        a.spines[j].set_linewidth(1.4)\n      \n    if i < 2:\n        for p in a.patches:\n            height = p.get_height()\n            a.annotate(f'{int(height*100)} %', (p.get_x() + p.get_width() \/ 2, p.get_height()-0.03), \n                   ha = 'center', va = 'center', \n                   size = 18,\n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   color = 'white',\n                   fontname = 'monospace')\n    else:\n        for p in a.patches:\n            height = p.get_height()\n            a.annotate(f'{int(height)} $', (p.get_x() + p.get_width() \/ 2, p.get_height()-1000), \n                   ha = 'center', va = 'center', \n                   size = 18,\n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   color = 'white',\n                   fontname = 'monospace')\n            \nplt.figtext(0.07, 1.05, 'Characteristics of school districts by locale', fontsize = 30, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.83, 0.34, 'Conclusion', fontsize = 25, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.99, 0.15, '''The largest count of students who identified themselves\nas Black or Hispanic are in large cities.\nThe smallest count is in the suburbs and rural areas.\n\nIn cities and towns half of the students are eligible\nfor free or reduced-price lunch.\n\nThe highest total expenses per student is in rural area.''', fontsize = 13, fontname = 'monospace', color = '#283655', ha = 'right')\n        \nfig.tight_layout(pad = 3)\n\nplt.show()","74630802":"# Very important! The data is filled in incorrectly, which is why maaany people has an error, because of which, for example, Adobe Inc company has 3, not 4 products.\nfor i in [' ', '.']:\n    for k in range(len(products)):\n        if pd.isna(products['Provider\/Company Name'][k]) == False:\n            products['Provider\/Company Name'][k] = products['Provider\/Company Name'][k].strip(i)\n\n# Let's fix the long name\nproducts['Provider\/Company Name'] = np.where(products['Provider\/Company Name'] == 'Savvas Learning Company | Formerly Pearson K12 Learning', 'Savvas Learning Company', products['Provider\/Company Name'])\n\nplt.figure(figsize = (15, 8))\nsns.set_style(\"white\")\nplt.title('TOP-15 of learning providers\/companies', size = 35, x = 0.48, y = 1.06, fontname = 'monospace', color = '#283655')\na = sns.barplot(data = products['Provider\/Company Name'].value_counts().reset_index().head(15), x = 'Provider\/Company Name', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14, color = '#283655')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.5 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 15, color = '#283655')\n\nplt.show()","68020ce4":"fig = px.pie(products['Sector(s)'].value_counts().reset_index().rename(columns = {'Sector(s)': 'count'}).head(15), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626', 'a43820'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Sector of education <br>where the product is used', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#283655')],\n                  showlegend = False)\n                  \nfig.show()","df403055":"plt.figure(figsize = (12, 12))\nsns.set_style(\"white\")\nplt.title('Count of products by subcategory', size = 35, x = 0.2, y = 1.06, fontname = 'monospace', color = '#283655')\na = sns.barplot(data = products['Primary Essential Function'].value_counts().reset_index(), x = 'Primary Essential Function', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 10, color = '#283655')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(1 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 11, color = '#283655')\n\nplt.show()\n##########\nfig = px.pie(products.query(\"Basic_category != 'x'\")['Basic_category'].value_counts().reset_index().rename(columns = {'Basic_category': 'count'}), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Count of products <br>by category', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#283655')],\n                  showlegend = False)\n                  \nfig.show()","df2a711b":"merged_data = pd.merge(products, engagement, left_on = 'LP ID', right_on = 'lp_id')\nmerged_data['district_id'] = merged_data['district_id'].astype('int64')\nmerged_data = pd.merge(merged_data, districts, on = 'district_id')\nmerged_data.drop(['URL', 'lp_id', 'state_abb'], axis = 1, inplace = True)\nmerged_data.head(3)","9c50144b":"st_ac\u0441ess = merged_data.groupby(['state', 'time']).agg({'pct_access': 'mean'}).reset_index()\nst_eng = merged_data.groupby(['state', 'time']).agg({'engagement_index': 'mean'}).reset_index()\nloc_ac\u0441ess = merged_data.groupby(['locale', 'time']).agg({'pct_access': 'mean'}).reset_index()\nloc_eng = merged_data.groupby(['locale', 'time']).agg({'engagement_index': 'mean'}).reset_index()\ncat_ac\u0441ess = merged_data.groupby(['Basic_category', 'time']).agg({'pct_access': 'mean'}).reset_index()\ncat_eng = merged_data.groupby(['Basic_category', 'time']).agg({'engagement_index': 'mean'}).reset_index()\n\nfor i in [st_ac\u0441ess, st_eng, loc_ac\u0441ess, loc_eng, cat_ac\u0441ess, cat_eng]:\n    i['day_of_week'] = i['time'].dt.dayofweek\n    \nst_ac\u0441ess.head(3)","fdccb125":"fig = px.line(st_ac\u0441ess, x=\"time\", y=\"pct_access\", color=\"state\", line_group=\"state\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of pct_access of all products by states', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=2.7,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=2.25,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","a32d3454":"fig = px.line(st_eng, x=\"time\", y=\"engagement_index\", color=\"state\", line_group=\"state\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of engagement index of all products by states', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=1150,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=900,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","a169e709":"months_map = {1:\"January\",2:\"February\",3:\"March\",4:\"April\",\n              5:\"May\",6:\"June\",7:\"July\",8:\"August\",9:\"September\",\n              10:\"October\",11:\"November\",12:\"December\"}\n\nfor i in [st_ac\u0441ess, st_eng]:\n    i['state_abb'] = i['state'].map(state_abb)\n    i['month'] = i.time.dt.month.map(months_map)\n\n    fig = px.choropleth(data_frame = i.groupby(['state', 'state_abb', 'month']).agg({i.columns[2]: 'mean'}).reset_index(), locations = \"state_abb\", locationmode = \"USA-states\",\n                    color = i.groupby(['state', 'state_abb', 'month']).agg({i.columns[2]: 'mean'}).reset_index()[i.groupby(['state', 'state_abb', 'month']).agg({i.columns[2]: 'mean'}).reset_index().columns[3]], scope = \"usa\",\n                    color_continuous_scale = \"cividis\", animation_frame = \"month\", hover_name = \"state\")\n    \n    fig.update_layout(title_text = f'Monthly dynamics of {i.columns[2]}', title_font = dict(family = \"monospace\",size = 25,color = \"black\")) \n    \n    fig.show()","5881d640":"cov_imp = pd.DataFrame(st_ac\u0441ess['state'].unique().tolist()).rename(columns = {0: 'state'})\n\n# We have no information about Texas during the start of pandemic\ncov_imp = cov_imp.query(\"state != 'Texas'\").reset_index()\ncov_imp.drop('index', axis = 1, inplace = True)\n\nfor i in ['mean_access', '1w_acess_change%', '2w_acess_change%', 'mean_eng', '1w_eng_change%', '2w_eng_change%']:\n    cov_imp[i] = 0.0\n\nstates = cov_imp['state'].unique().tolist()\n\nfor i in states:\n    cov_imp['mean_access'][states.index(i)] = round(st_ac\u0441ess.query(\"time >= '2020-03-09' & time <= '2020-03-13' & state == @i\")['pct_access'].mean(), 2)\n    cov_imp['1w_acess_change%'][states.index(i)] = round((st_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['pct_access'].mean() \/ cov_imp['mean_access'][states.index(i)] - 1) * 100, 1)\n    cov_imp['2w_acess_change%'][states.index(i)] = round((st_ac\u0441ess.query(\"time >= '2020-03-23' & time <= '2020-03-27' & state == @i\")['pct_access'].mean() \/ st_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['pct_access'].mean() - 1) * 100, 1)\n    cov_imp['mean_eng'][states.index(i)] = round(st_eng.query(\"time >= '2020-03-09' & time <= '2020-03-13' & state == @i\")['engagement_index'].mean(), 1)\n    cov_imp['1w_eng_change%'][states.index(i)] = round((st_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['engagement_index'].mean() \/ cov_imp['mean_eng'][states.index(i)] - 1) * 100, 1)\n    cov_imp['2w_eng_change%'][states.index(i)] = round((st_eng.query(\"time >= '2020-03-23' & time <= '2020-03-27' & state == @i\")['engagement_index'].mean() \/ st_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['engagement_index'].mean() - 1) * 100, 1)\n\ndef color_values(val):\n    color = 'red' if val < 0 else 'green'\n    return 'color: %s' % color\n\nslice_ = ['1w_acess_change%', '2w_acess_change%', '1w_eng_change%', '2w_eng_change%']\nslice_2 = ['mean_access', '1w_acess_change%', '2w_acess_change%']\nslice_3 = ['mean_eng', '1w_eng_change%', '2w_eng_change%']\ncov_imp.style.applymap(color_values, subset = slice_).set_precision(1).set_properties(**{'background-color': '#fafafa'}, subset=slice_2).set_properties(**{'background-color': '#f7f7f7'}, subset=slice_3)","ed60d1d3":"fig = px.line(loc_ac\u0441ess, x=\"time\", y=\"pct_access\", color=\"locale\", line_group=\"locale\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of pct_access of all products by locale', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=2,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=1.75,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","0e6a9834":"fig = px.line(loc_eng, x=\"time\", y=\"engagement_index\", color=\"locale\", line_group=\"locale\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of engagement index of all products by locale', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=700,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=610,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","2194f378":"cov_imp2 = pd.DataFrame(loc_ac\u0441ess['locale'].unique().tolist()).rename(columns = {0: 'locale'})\n\nfor i in ['mean_access', '1w_acess_change%', '2w_acess_change%', 'mean_eng', '1w_eng_change%', '2w_eng_change%']:\n    cov_imp2[i] = 0.0\n\nlocales = cov_imp2['locale'].unique().tolist()\n\nfor i in locales:\n    cov_imp2['mean_access'][locales.index(i)] = round(loc_ac\u0441ess.query(\"time >= '2020-03-09' & time <= '2020-03-13' & locale == @i\")['pct_access'].mean(), 2)\n    cov_imp2['1w_acess_change%'][locales.index(i)] = round((loc_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['pct_access'].mean() \/ cov_imp2['mean_access'][locales.index(i)] - 1) * 100, 1)\n    cov_imp2['2w_acess_change%'][locales.index(i)] = round((loc_ac\u0441ess.query(\"time >= '2020-03-23' & time <= '2020-03-27' & locale == @i\")['pct_access'].mean() \/ loc_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['pct_access'].mean() - 1) * 100, 1)\n    cov_imp2['mean_eng'][locales.index(i)] = round(loc_eng.query(\"time >= '2020-03-09' & time <= '2020-03-13' & locale == @i\")['engagement_index'].mean(), 1)\n    cov_imp2['1w_eng_change%'][locales.index(i)] = round((loc_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['engagement_index'].mean() \/ cov_imp2['mean_eng'][locales.index(i)] - 1) * 100, 1)\n    cov_imp2['2w_eng_change%'][locales.index(i)] = round((loc_eng.query(\"time >= '2020-03-23' & time <= '2020-03-27' & locale == @i\")['engagement_index'].mean() \/ loc_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['engagement_index'].mean() - 1) * 100, 1)\n\ncov_imp2.style.applymap(color_values, subset = slice_).set_precision(1).set_properties(**{'background-color': '#fafafa'}, subset=slice_2).set_properties(**{'background-color': '#f7f7f7'}, subset=slice_3)","14d4f4ee":"fig = px.line(cat_ac\u0441ess.query(\"Basic_category != 'x'\"), x=\"time\", y=\"pct_access\", color=\"Basic_category\", line_group=\"Basic_category\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of pct_access of all products by product category', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=4.5,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=3.8,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","15059d1d":"fig = px.line(cat_eng.query(\"Basic_category != 'x'\"), x=\"time\", y=\"engagement_index\", color=\"Basic_category\", line_group=\"Basic_category\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of engagement index of all products by product category', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=1900,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=1600,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","554c6911":"cov_imp3 = pd.DataFrame(cat_eng.query(\"Basic_category != 'x'\")['Basic_category'].unique().tolist()).rename(columns = {0: 'Basic_category'})\n\nfor i in ['mean_access', '1w_acess_change%', '2w_acess_change%', 'mean_eng', '1w_eng_change%', '2w_eng_change%']:\n    cov_imp3[i] = 0.0\n\ncategories = cov_imp3['Basic_category'].unique().tolist()\n\nfor i in categories:\n    cov_imp3['mean_access'][categories.index(i)] = round(cat_ac\u0441ess.query(\"time >= '2020-03-09' & time <= '2020-03-13' & Basic_category == @i\")['pct_access'].mean(), 2)\n    cov_imp3['1w_acess_change%'][categories.index(i)] = round((cat_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['pct_access'].mean() \/ cov_imp3['mean_access'][categories.index(i)] - 1) * 100, 1)\n    cov_imp3['2w_acess_change%'][categories.index(i)] = round((cat_ac\u0441ess.query(\"time >= '2020-03-23' & time <= '2020-03-27' & Basic_category == @i\")['pct_access'].mean() \/ cat_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['pct_access'].mean() - 1) * 100, 1)\n    cov_imp3['mean_eng'][categories.index(i)] = round(cat_eng.query(\"time >= '2020-03-09' & time <= '2020-03-13' & Basic_category == @i\")['engagement_index'].mean(), 1)\n    cov_imp3['1w_eng_change%'][categories.index(i)] = round((cat_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['engagement_index'].mean() \/ cov_imp3['mean_eng'][categories.index(i)] - 1) * 100, 1)\n    cov_imp3['2w_eng_change%'][categories.index(i)] = round((cat_eng.query(\"time >= '2020-03-23' & time <= '2020-03-27' & Basic_category == @i\")['engagement_index'].mean() \/ cat_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['engagement_index'].mean() - 1) * 100, 1)\n\ncov_imp3.style.applymap(color_values, subset = slice_).set_precision(1).set_properties(**{'background-color': '#fafafa'}, subset=slice_2).set_properties(**{'background-color': '#f7f7f7'}, subset=slice_3)","c78d4642":"For those who don't know: to immediately filter the plotly chart, click twice on the category that you want to see.","10cac407":"# Basic information and preprocessing","2184ccb5":"**Changes in the average student activity indicators on school days 1 and 2 weeks after the announcement of the pandemic in every locale.**","5f442abf":"**Impact of COVID-19 on Digital learning in every product category**\n\nHere we can notice a clear difference in the impact of the announcement of a pandemic between young students and adult students (teachers and specialists). LC-Learning & Curriculum is most often aimed at teaching schoolchildren who saw the pandemic as an excellent opportunity to relax (-40.2% of mean pct_access on first week), which cannot be said about CM-Classroom Management, where adult students found an excellent opportunity to receive additional education (+8% on first week and +12.1% on second week of mean pct_access \/ +77.4% of engagement index on first week).","13ec279d":"![](https:\/\/i1.wp.com\/grepbeat.com\/wp-content\/uploads\/2020\/02\/Learn-Platform-logo.png?w=330&ssl=1)","2379fbe4":"Information about pct_black\/hispanic, pct_free\/reduced, county_connections_ratio and pp_total_raw is presented in the form of [intervals](https:\/\/proofwiki.org\/wiki\/Definition:Real_Interval\/Notation\/Reverse-Bracket), where \"[a, b[\" means that a \u2264 x < b. All values in pct_black\/hispanic and pct_free\/reduced values have an interval of 20%, for a more understandable view we can convert them to a single value with a deviation of +- 10%. The information about county_connections_ratio is represented by the most abstract value from 18% to 100% and, unfortunately, this information is of no use. All values of of pp_total_raw have an interval of 2000, following the example of the previous two columns, we convert the values to a single value with a deviation of +- 1000.","ad056a3a":"**PRODUCTS**","9aac2f45":"Let's highlight the basic categories from Primary Essential Function.","26cf72e0":"**Changes in the average student activity indicators on school days 1 and 2 weeks after the announcement of the pandemic in every state.**\n\nThere are no information about Texas during the start of pandemic, therefore, this state does not participate in the analysis.","ce73b89d":"So, we have 24.5% of missing information.","b2443822":"**DISTRICTS**","d5170a96":"# Students activity","7a11e6cc":"The organizers and creators of the data warn us about that there are many missing data marked as 'NaN' indicating that the data was suppressed to maximize anonymization of the dataset.","7b0ebdf8":"The product file includes information about the characteristics of the top 372 products with most users in 2020:\n\n1. **LP ID** - the unique identifier of the product.\n2. **URL**\n3. **Product Name**\n4. **Provider\/Company Name**\n5. **Sector(s)** - sector of education where the product is used.\n6. **Primary Essential Function** - the basic function of the product. There are two layers of labels here. Products are first labeled as one of these three categories: LC = Learning & Curriculum, CM = Classroom Management, and SDO = School & District Operations. Each of these categories have multiple sub-categories with which the products were labeled.","b4cf206d":"The districts file includes information about the characteristics of school districts, including data from NCES (2018-19), FCC (Dec 2018), and Edunomics Lab:\n\n1. **distrist_id**\n2. **state**\n3. **locale**\n4. **pct_black\/hispanic** - percentage of students in the districts identified as Black or Hispanic based on 2018-19 NCES data.\n5. **pct_free\/reduced** - percentage of students in the districts eligible for free or reduced-price lunch based on 2018-19 NCES data.\n6. **county_connections_ratio** - ratio (residential fixed high-speed connections over 200 kbps in at least one direction\/households) based on the county level data from FCC From 477 (December 2018 version).\n7. **pp_total_raw** - per-pupil total expenditure (sum of local and federal expenditure) from Edunomics Lab's National Education Resource Database on Schools (NERD$) project.","dd09d1e0":"**ENGAGEMENT**","1250a25a":"# Districts","eb5a1bbd":"The engagement file includes information about engagement of students with learning products in various school districts for the entire year 2020:\n\n1. **time** - date.\n2. **lp_id** - the unique identifier of the product.\n3. **pct_access** - percentage of students in the district have at least one page-load event of a given product and on a given day.\n4. **engagement_index** - total page-load events per one thousand students of a given product and on a given day.\n5. **district_id**","6014ac62":"# Products","208bcf1d":"**Changes in the average student activity indicators on school days 1 and 2 weeks after the announcement of the pandemic in every product category.**","82d0fcf4":"**Impact of COVID-19 on Digital learning in every state**\n\nAt the beginning, I would like to make a note that the summer holidays are allocated with a generalized interval from June 1 to August 31. In fact, in all states, children have summer holidays at different times, moreover, in one state, the dates of holidays may differ in different schools. I would also like to note that every weekend in all states there is a drop in student activity indicators.\n\n1. **Florida** - during the next two weeks after the announcement of COVID-19 as a pandemic, almost all students stopped studying (-96%), however, classes resumed in the third week.\n\n2. **Illinois** - during the next two weeks after the announcement of COVID-19 as a pandemic, there was a strong decrease in percentage of students who had at least one page-load (-38.9% on second week), however, there was a significant increase in the first week of mean of total page-loaded events per one thousand students (+30.8%), but then there was a return to the general trend.\n\n3. **Indiana** - during the next two weeks after the announcement of COVID-19 as a pandemic, there was a strong decrease in percentage of students who had at least one page-loaded (-49.5% on first week and -31.8% on second), the situation returned to normal in the fifth week just like a mean of total page-loaded events per one thousand students, which had a more moderate decrease (-20.9% on first week and -31.9% on second).\n\n4. **Michigan** - students stopped studying after the pandemic was announced, making only a minor attempt to study again in May.\n\n5. **Minnesota** - unfortunately, the data for Minnesota is incorrect, however, it can definitely be said that in the first week after the announcement of the pandemic, student activity indicators decreased by half.\n\n6. **Missouri** - there was a strong decrease of 90% in both indicators in the first week, however, the situation returned to normal the next week.\n\n7. **New Jersey** - the pandemic has had almost no impact on students activity, except that the mean of total page-loaded events per one thousand students has increased on 34.3% on first week.\n\n8. **New York** - percentage of students who have at least one page-loaded has not changed at all, but as in New Jersey the mean of total page-loaded events per one thousand students has increased on 50.7% on first week.\n\n9. **North Carolina** - based on the data, we can safely say that students from North Carolina stopped studying until the beginning of the next academic year.\n\n10. **Utah** - students from had a similar situation with New Jersey and New York, however, in the first week they had a stronger decrease in the percentage of students who had at least one page-loaded and strong increase of mean of total page-loaded events per one thousand students(+43.4% on second week).\n\n11. **Virginia** - both indicators were significantly reduced only in the first week after the announcement of the pandemic and already in the second week both indicators returned to normal.\n\n12. **Washington** - both indicators were significantly reduced only in the first week after the announcement of the pandemic and normalized only in the fourth week.\n\n13. **Wisconsin** - in the first two weeks after the announcement of the pandemic, both indicators of student activity were rapidly decreasing (on second week pct_access -72.6% and engagement index -83.7%), however, everything returned to normal in the third week.","3f35ab3c":"**Impact of COVID-19 on Digital learning in every locale**\n\nBased on the above data, there are many interesting points. Students from rural areas are the most interested in distance learning, while students from cities are the least interested. With the already low activity in the first week after the announcement of the pandemic, the activity indicators of students from cities decreased by 74.3% and 60%, while the percentage of students in rural areas who had at least one page-load decreased by 32.4% and the indicator mean of total page-loaded events per one thousand students increased by 3.3%. Of course, students in rural areas are more interested in distance education because of the distance from educational institutions that are more accessible in the city. But it is much more difficult to explain the sharp decline in interest in distance learning of students from the city. Educational institutions in cities, like many other socially and economically important places, were closed primarily to limit the spread of the coronavirus, which should have led to the reform of education and the introduction of distance learning on the scale of the whole country. Students from rural areas were more prepared for distance learning, as it was not something new for them, but for most students from cities it was. Nevertheless, in this case, students who studied remotely before the pandemic are considered, so in general, due to the closure of educational institutions, there should have been a huge increase in the activity of students in distance learning. Why we don't observe it? They are too lazy. We all were students, and only a few of us were ready to study independently at home. Therefore, COVID-19 even affected the decrease in the activity of those students who studied remotely before the pandemic. Many students saw an opportunity to relax, and they used it. As for the future of distance learning, already at the beginning of the academic year 2020-2021 we see absolutely normal indicators that should not change much anymore."}}