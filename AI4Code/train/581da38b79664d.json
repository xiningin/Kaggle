{"cell_type":{"ce379ace":"code","367cc90a":"code","af62ca77":"code","025148e8":"code","9dc3e8c2":"code","ad2bfbca":"code","e8148b13":"code","751d345d":"code","61710b84":"code","014b2348":"code","1e564599":"code","d7846722":"code","be12d40f":"code","729150e6":"code","1b4ee858":"code","c4a8b530":"code","652fcadf":"code","011ee702":"code","5a683c59":"code","27c8fc8a":"code","0e42c49f":"code","6a5ea670":"code","427db9e7":"code","f5b9c308":"code","f8c53463":"code","d76b51b3":"markdown","7554eeea":"markdown","c047cbaf":"markdown","433228bc":"markdown","b97629a5":"markdown","078282d5":"markdown","0c90c781":"markdown","8931473a":"markdown","46ac6084":"markdown","bdce00aa":"markdown","7cafd016":"markdown","cf0a1c60":"markdown","dbf5a664":"markdown"},"source":{"ce379ace":"#Import Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nimport os\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure","367cc90a":"#Changing Working directory and printing files in it\nos.chdir(\"..\/input\")\nprint(os.listdir(\"..\/input\"))","af62ca77":"#Reading Emergency-911 calls into dataframe df\ndf=pd.read_csv('911.csv')","025148e8":"#First Part-Cleaning Data\n\n#1. Column 'title' consists of Emergency Category and Emergency Description.Splitting it into two columns \n#'title_emr'-Emergency Category AND 'title_emrdesc'-Emergency Description\ndf['title_emr'],df['title_emrdesc']=df['title'].str.split(':').str","9dc3e8c2":"#2 Column description consists of station, rest all other information is repeated\n#Extracting 'Station+6 characters after station' in column 'desc' ans storing it in column 'station'\ndf['station']=df['desc'].str.extract(('(Station......)'), expand=True)\n#Removing Word 'Station', character ':',';' from the column 'station' and storing the cleaned data in the\n#column again\ndf['station']=df['station'].str.replace(('Station'),'')\ndf['station']=df['station'].str.replace((':'),'')\ndf['station']=df['station'].str.replace((';'),'')","ad2bfbca":"#3 Column 'timeStamp' contains date and time\n#Extracting date and time from column'timeStamp' and storing it in column 'date' and 'time' respectively\ndf['date']=df['timeStamp'].str.extract(('(....-..-..)'), expand=True)\ndf['time']=df['timeStamp'].str.extract(('(..:..:..)'), expand=True)","e8148b13":"#Second Part-Droping Repetitive Data Columns\n#Dropping columns 'desc','title' and 'timeStamp' which contains repetitive information\ndf=df.drop(columns=['desc','title','timeStamp'])","751d345d":"#Third Part-Checking for Repetitive Data\n#1-Length of current dataset\nlen(df)","61710b84":"#Third Part-Checking for Repetitive Data\n#2-Drop duplicates\ndf.drop_duplicates()\n#3-Compare with earlier length value to know the number of rows which are dropped\nlen(df)","014b2348":"#Fourth Part-Removing NA values\n#1-Checking for columns with NA values\n(df.isna().sum()\/len(df))*100\n#Result shows 12% of zip,0.03% of twp and 35% of station values are NA\n#We can drop NA values of zip and twp since these are less than 20%, station NA values are 35% too high to be dropped","1e564599":"#2-Drop NA values from 'zip' and 'twp' columns\ndf=df.dropna(subset=['zip', 'twp'])\n#3-Checking for columns with NA values AGAIN\n(df.isna().sum()\/len(df))*100","d7846722":"#Fifth Part-Column Datatype correction\n#Converting zip code in column zip to integer type \ndf['zip']=df['zip'].astype('int')","be12d40f":"#Cleaned up Data\ndf","729150e6":"#Ploting histogram by grouping it by emergency category and plotting the frequency\nplot=df.groupby(['title_emr'])['e'].count().plot.bar(title='Categorization of 911 Calls', figsize=(5,5), fontsize=10)\n#Setting X and Y axis Label\nplot.set_xlabel('Type of Emergency')\nplot.set_ylabel('Frequency')","1b4ee858":"#Setting Date as Datetime object\ndf['date']=pd.to_datetime(df['date'], format='%Y-%m-%d')\n#Extracting YEAR and MONTH out of date and storing it in a column 'year' and 'month' respectively\ndf['year']=df['date'].dt.year\ndf['month']=df['date'].dt.month","c4a8b530":"df.groupby(['year','month'])['e'].count()","652fcadf":"#Creating Monthwise 911 calls received for each year \nYear1=df[df['year']==2015].groupby(['month'])['e'].count().to_frame()\nYear2=df[df['year']==2016].groupby(['month'])['e'].count().to_frame()\nYear3=df[df['year']==2017].groupby(['month'])['e'].count().to_frame()\nYear4=df[df['year']==2018].groupby(['month'])['e'].count().to_frame()\n#Plotting Each Year line plot\nplt.plot(Year1.index, Year1.e)\nplt.plot(Year2.index, Year2.e)\nplt.plot(Year3.index, Year3.e)\nplt.plot(Year4.index, Year4.e)\n#Formatting the lineplot\nplt.legend(['2015', '2016', '2017', '2018'], loc='lower right')\nplt.xlabel('Month No.')\nplt.ylabel('Frequency of Call')\nplt.title('Yearwise 911 calls')\nplt.show()","011ee702":"#Setting time as Datetime object\ndf['time']=pd.to_datetime(df['time'], format='%H:%M:%S')\n#Extracting hour out of column 'time' and storing it in a column 'time'\ndf['hour']=df['time'].dt.hour","5a683c59":"df.groupby(['month','hour'])['e'].count()","27c8fc8a":"#Creating hourwise 911 calls received for each month\nMonth1=df[df['month']==1].groupby(['hour'])['e'].count().to_frame()\nMonth2=df[df['month']==2].groupby(['hour'])['e'].count().to_frame()\nMonth3=df[df['month']==3].groupby(['hour'])['e'].count().to_frame()\nMonth4=df[df['month']==4].groupby(['hour'])['e'].count().to_frame()\nMonth5=df[df['month']==5].groupby(['hour'])['e'].count().to_frame()\nMonth6=df[df['month']==6].groupby(['hour'])['e'].count().to_frame()\nMonth7=df[df['month']==7].groupby(['hour'])['e'].count().to_frame()\nMonth8=df[df['month']==8].groupby(['hour'])['e'].count().to_frame()\nMonth9=df[df['month']==9].groupby(['hour'])['e'].count().to_frame()\nMonth10=df[df['month']==10].groupby(['hour'])['e'].count().to_frame()\nMonth11=df[df['month']==11].groupby(['hour'])['e'].count().to_frame()\nMonth12=df[df['month']==12].groupby(['hour'])['e'].count().to_frame()\n\n#Plotting Each Month line plot\nplt.plot(Month1.index, Month1.e)\nplt.plot(Month2.index, Month2.e)\nplt.plot(Month3.index, Month3.e)\nplt.plot(Month4.index, Month4.e)\nplt.plot(Month5.index, Month5.e)\nplt.plot(Month6.index, Month6.e)\nplt.plot(Month7.index, Month7.e)\nplt.plot(Month8.index, Month8.e)\nplt.plot(Month9.index, Month9.e)\nplt.plot(Month10.index, Month10.e)\nplt.plot(Month11.index, Month11.e)\nplt.plot(Month12.index, Month12.e)\n\n#Formatting the lineplot\nplt.legend(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'], loc='best')\nplt.xlabel('Hour.')\nplt.ylabel('Frequency of Call')\nplt.title('Monthwise 911 calls')\nfigure(figsize=(100,100))\nplt.show()","0e42c49f":"a=df.groupby(['zip'])['e'].count().to_frame()\nb=a[a.e<50]['e'].plot.bar(figsize=(15,15), title='Zip Codes with less than 50- 911 incidents')\nb.set_xlabel('ZipCodes')\nb.set_ylabel('Frequency')","6a5ea670":"#Sorting Zip Codes on basis of no of incidence and selecting top 10 zip codes\nb=a.sort_values(by='e', axis=0, ascending=False).head(10)['e'].plot.bar(title='Top 10 Zip Codes with 911 Incidents')\nb.set_xlabel('ZipCodes')\nb.set_ylabel('Frequency')","427db9e7":"a=df['title_emr']\nb=df['twp']\npd.crosstab(a, b, rownames=['a'], colnames=['b']).apply(lambda r: r*100\/r.sum(), axis=0)","f5b9c308":"a=df['title_emr']\nb=df['title_emrdesc']\npd.crosstab(a, b, rownames=['a'], colnames=['b']).apply(lambda r: r*100\/r.sum(), axis=0)","f8c53463":"a=df.groupby(['station'])['e'].count().to_frame()\nb=a.sort_values(by='e', axis=0, ascending=False).head(10)['e'].plot.bar(title='Top 10 station with 911 Incidents')\nb.set_xlabel('Station')\nb.set_ylabel('Frequency')","d76b51b3":"Q9. Percentage Crosstabulated data b\/w  Emergency Category vs Emergency Description","7554eeea":"Q3. Plotting Yearwise 911 calls seperately for each year in a single line plot","c047cbaf":"Q7. Top 10 Zip Codes with highest '911 incidents' ","433228bc":"Q2. Yearwise and Monthwise distribution of 911 calls?","b97629a5":"Q8. Percentage Crosstabulated data b\/w  Emergency Category and Township","078282d5":"Cleaning Data, Checking for Duplicated Data and Removing NA values","0c90c781":"Q5.Plotting Monthwise 911 calls seperately for each month across 24 hours in a single line plot","8931473a":"Q10. Top 10 station receiving maximum no calls","46ac6084":"Q4. Monthwise and hourwise distribution of 911 calls?","bdce00aa":"# Present appropriate visualization of your analysis of the 'Emergency-911 Calls' dataset on Kaggle. This data contains 326k rows and 9 columns. The recommended approach here again is the same-ask questions and answer them using the apt visualizations, tabulations etc.","7cafd016":"The above two plot shows how trend of 911 calls vary across years, months and during the day. Dec,Jan, Feb, Mar has maximum no of 911 calls in between 7am-5pm","cf0a1c60":"Q6. Zip Codes which had less than 50 '911 incidents' ","dbf5a664":"Q1. Checking the Category Type of 911 Calls?"}}