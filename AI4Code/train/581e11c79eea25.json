{"cell_type":{"ac39db84":"code","7e3be153":"code","308c1cf5":"code","9ddd99ed":"code","99cf61bd":"code","de968bc8":"code","b991e57e":"code","35b30ceb":"code","5cd7751e":"code","46c8594c":"code","dfbcada5":"code","3d995a73":"code","3bac1ff0":"code","8fa6706d":"code","42b0665f":"code","965f17f3":"code","0fb0593b":"code","87ac1667":"code","4a00b5f5":"code","28bd90b7":"code","5076046e":"code","f09b206f":"code","40f305e6":"code","a83157f1":"code","3275cf2a":"code","be53b574":"code","576ed396":"code","267042a7":"code","3ae8c5d8":"code","ebbc1a61":"code","74084188":"code","fc7f3c8f":"code","b5147e0c":"markdown","ebdf7054":"markdown","cb202745":"markdown","8b9cced6":"markdown","64fdc59b":"markdown","948cd6c6":"markdown","da088b42":"markdown","1671c639":"markdown","13604b82":"markdown","7c977736":"markdown","1ffe07ae":"markdown","d6841afb":"markdown","6af9a06f":"markdown","e9453667":"markdown","7107af34":"markdown","0a3dba18":"markdown","a9843837":"markdown","1d77e2e5":"markdown","8eef2c06":"markdown","b2ddd228":"markdown","d52dac65":"markdown"},"source":{"ac39db84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e3be153":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nimport warnings\n\nplt.style.use(\"ggplot\")\nwarnings.filterwarnings(\"ignore\")","308c1cf5":"data_dictionary = {\"ID\": \"Customer's unique identifier\",\n\"Year_Birth\": \"Customer's birth year\",\n\"Education\": \"Customer's education level\",\n\"Marital_Status\": \"Customer's marital status\",\n\"Income\": \"Customer's yearly household income\",\n\"Kidhome\": \"Number of children in customer's household\",\n\"Teenhome\": \"Number of teenagers in customer's household\",\n\"Dt_Customer\": \"Date of customer's enrollment with the company\",\n\"Recency\": \"Number of days since customer's last purchase\",\n\"Complain\": \"1 if customer complained in the last 2 years, 0 otherwise\",\n\"MntWines\": \"Amount spent on wine in last 2 years\",\n\"MntFruits\": \"Amount spent on fruits in last 2 years\",\n\"MntMeatProducts\": \"Amount spent on meat in last 2 years\",\n\"MntFishProducts\": \"Amount spent on fish in last 2 years\",\n\"MntSweetProducts\": \"Amount spent on sweets in last 2 years\",\n\"MntGoldProds\": \"Amount spent on gold in last 2 years\",\n\"MntWines\": \"Amount spent on wine in last 2 years\",\n\"MntFruits\": \"Amount spent on fruits in last 2 years\",\n\"MntMeatProducts\": \"Amount spent on meat in last 2 years\",\n\"MntFishProducts\": \"Amount spent on fish in last 2 years\",\n\"MntSweetProducts\": \"Amount spent on sweets in last 2 years\",\n\"MntGoldProds\": \"Amount spent on gold in last 2 years\",\n\"NumDealsPurchases\": \"Number of purchases made with a discount\",\n\"AcceptedCmp1\": \"1 if customer accepted the offer in the 1st campaign, 0 otherwise\",\n\"AcceptedCmp2\": \"1 if customer accepted the offer in the 2nd campaign, 0 otherwise\",\n\"AcceptedCmp3\": \"1 if customer accepted the offer in the 3rd campaign, 0 otherwise\",\n\"AcceptedCmp4\": \"1 if customer accepted the offer in the 4th campaign, 0 otherwise\",\n\"AcceptedCmp5\": \"1 if customer accepted the offer in the 5th campaign, 0 otherwise\",\n\"Response\": \"1 if customer accepted the offer in the last campaign, 0 otherwise\",\n\"NumWebPurchases\": \"Number of purchases made through the company\u2019s web site\",\n\"NumCatalogPurchases\": \"Number of purchases made using a catalogue\",\n\"NumStorePurchases\": \"Number of purchases made directly in stores\",\n\"NumWebVisitsMonth\": \"Number of visits to company\u2019s web site in the last month\"}","9ddd99ed":"data = pd.read_csv(\"\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv\", sep=\"\\t\")\ndata","99cf61bd":"def basic_insights(dataframe):\n    \n    cols = list(dataframe.columns)\n    null_vals = dataframe.isna().sum()\n    tot = len(dataframe)\n    dtypes = [i.__str__() for i in dataframe.dtypes.values]\n    \n    insights = pd.DataFrame()\n    insights[\"Total Missing\"] = null_vals\n    insights[\"Missing Percentage\"] = np.round((null_vals \/ tot) * 100, 1)\n    insights[\"Data Types\"] = dtypes\n    insights = insights.reindex(cols)\n    insights[\"Meaning\"] = \"Not Mentioned\"\n    for i in data_dictionary:\n        insights.loc[i, \"Meaning\"] = data_dictionary[i]\n        \n    return insights\n\nbasic_insights(data)","de968bc8":"plt.figure(figsize=(8,6))\nsns.distplot(data[\"Income\"], kde=False)\nplt.axvline(data[\"Income\"].median(), color=\"red\", label=f\"Median ={np.round(data['Income'].median(),1)}\")\nplt.axvline(data[\"Income\"].mean(), color=\"green\", label=f\"Mean ={np.round(data['Income'].mean(),1)} \")\nplt.xlim([0,150000])\nplt.legend();","b991e57e":"data[\"Income\"].fillna(data[\"Income\"].mean(), inplace=True)\ndata.set_index(\"ID\", inplace=True)","35b30ceb":"data[\"Age\"] = 2021 - data[\"Year_Birth\"]\ndata.drop(\"Year_Birth\", axis=1, inplace=True)\nplt.figure(figsize=(8,6))\nsns.histplot(data[\"Age\"])\nplt.title(\"Age Distribution\")\nplt.axvline(data[\"Age\"].median(), color=\"red\", label=f\"Median of Age : {data['Age'].median()}\")\nplt.axvline(data[\"Age\"].mean(), color=\"green\", label=f\"Mean of Age : {data['Age'].mean()}\");","5cd7751e":"data[\"Education\"].value_counts()","46c8594c":"labels = list(data[\"Education\"].value_counts().index)\nvalues = list(data[\"Education\"].value_counts().values)\n\nplt.figure(figsize=(6, 6))\nplt.pie(values, labels=labels, autopct=\"%.2f\")\nplt.title(\"Percentage of Education Level\");","dfbcada5":"education_mapping = {\"PhD\" : 0,\n                     \"Master\" : 1,\n                     \"2n Cycle\" : 1,\n                     \"Graduation\" : 2,\n                     \"Basic\"  : 3}\n\ndata[\"Education\"].replace(education_mapping, inplace=True)","3d995a73":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"Marital_Status\", data=data, order=data[\"Marital_Status\"].value_counts().index)\nplt.title(\"Counts of All Marital Status\");","3bac1ff0":"marital_mapping = {\"Married\" : 1, # Together living will 1, otherwise 0\n                   \"Together\" : 1,\n                   \"Single\" : 0,\n                   \"Divorced\" : 0,\n                   \"Widow\" : 0, \n                   \"Alone\" : 0,\n                   \"YOLO\" : 0,\n                   \"Absurd\" : 0}\n\ndata[\"Marital_Status\"].replace(marital_mapping, inplace=True)","8fa6706d":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.countplot(data[\"Kidhome\"])\nplt.title(\"Count of Kidhome\")\nplt.subplot(1,2,2)\nsns.countplot(data[\"Teenhome\"])\nplt.title(\"Count of Teenhome\");","42b0665f":"data[\"Living_Young\"] = data[\"Kidhome\"] + data[\"Teenhome\"]\ndata.drop([\"Kidhome\", \"Teenhome\"], axis=1, inplace=True)\nplt.figure(figsize=(7,5))\nsns.countplot(y=\"Living_Young\", data=data)\nplt.title(\"Count of Total Value Youngs at Home\");","965f17f3":"data[\"Engagement_Days\"] = pd.Series(pd.to_datetime(\"20-09-2021\") - pd.to_datetime(data[\"Dt_Customer\"]), dtype=\"str\").str.split(\" \", expand=True).loc[:,0].astype(int)\ndata.drop(\"Dt_Customer\", axis=1, inplace=True)","0fb0593b":"plt.figure(figsize=(8,6))\nsns.histplot(data[\"Engagement_Days\"])\nplt.title(\"Engagement Days Distribution\")\nplt.axvline(data[\"Engagement_Days\"].median(), color=\"red\", label=f\"Median of Engagement Days : {data['Engagement_Days'].median()}\")\nplt.axvline(data[\"Engagement_Days\"].mean(), color=\"green\", label=f\"Mean of Engagement Days : {data['Engagement_Days'].mean()}\")\nplt.legend();","87ac1667":"cols = [\"MntWines\", \"MntFruits\", \"MntMeatProducts\", \"MntFishProducts\", \"MntSweetProducts\", \"MntGoldProds\"]\nplt.figure(figsize=(16,12))\nfor i in range(1,6):\n    plt.subplot(2,3,i)\n    sns.histplot(data[cols[i-1]],bins=15)\n    plt.title(cols[i-1]);","4a00b5f5":"data[\"Amounts_Total\"] = data[\"MntWines\"] + data[\"MntFruits\"] + data[\"MntMeatProducts\"] + data[\"MntFishProducts\"] + data[\"MntSweetProducts\"] + data[\"MntGoldProds\"]\ndata.drop([\"MntWines\", \"MntFruits\", \"MntMeatProducts\", \"MntFishProducts\", \"MntSweetProducts\", \"MntGoldProds\"], axis=1, inplace=True)","28bd90b7":"cols = [\"NumDealsPurchases\", \"NumWebPurchases\", \"NumCatalogPurchases\", \"NumStorePurchases\", \"NumWebVisitsMonth\"]\nplt.figure(figsize=(16,12))\nfor i in range(1,6):\n    plt.subplot(2,3,i)\n    sns.histplot(data[cols[i-1]], color=\"green\", bins=15)\n    plt.title(cols[i-1])","5076046e":"data[\"Purchases_Total\"] = data[\"NumDealsPurchases\"] + data[\"NumWebPurchases\"] + data[\"NumCatalogPurchases\"] + data[\"NumStorePurchases\"] + data[\"NumWebVisitsMonth\"]\ndata.drop([\"NumDealsPurchases\", \"NumWebPurchases\", \"NumCatalogPurchases\", \"NumStorePurchases\", \"NumWebVisitsMonth\"], axis=1, inplace=True)\ndata.drop([\"AcceptedCmp3\", \"AcceptedCmp4\", \"AcceptedCmp5\", \"AcceptedCmp1\", \"AcceptedCmp2\", \"Z_CostContact\", \"Z_Revenue\"], axis=1, inplace=True)","f09b206f":"data","40f305e6":"plt.figure(figsize=(10,8))\nsns.heatmap(data.corr(), annot=True)\nplt.title(\"Correlation Between Features\");","a83157f1":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer","3275cf2a":"scaler = MinMaxScaler()\nX_sc = scaler.fit_transform(data)\n\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(2,10))\nvisualizer.fit(X_sc)\nvisualizer.show();","be53b574":"k = 5 # Optimal number of clusters by elbow point \nkmeans = KMeans(n_clusters=k, random_state=0)\nkmeans.fit(X_sc)\nclusters = kmeans.predict(X_sc)\n\ndata[\"Clusters\"] = clusters + 1\ndata[\"Clusters\"] = data[\"Clusters\"].astype(str)\ndata[\"Clusters\"] = \"Cluster_\" + data[\"Clusters\"]\ndata","576ed396":"desc = data.groupby(\"Clusters\").mean()\ndesc","267042a7":"summary = pd.DataFrame(index=desc.columns, columns=[\"Max_Valued_Cluster\", \"Min_Valued_Cluster\"])\nfor col in desc.columns:\n    summary.loc[col, \"Max_Valued_Cluster\"] = desc[col].idxmax()\n    summary.loc[col, \"Min_Valued_Cluster\"] = desc[col].idxmin()\n    \nsummary","3ae8c5d8":"def cluster_dist(feature):\n    colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"]\n    all_clusters = list(desc.index)\n    col_name = feature\n    plt.figure(figsize = (15, 10))\n    for i in range(len(colors)):\n        plt.subplot(2, 3, i+1)\n        sns.histplot(data.loc[data[\"Clusters\"] == all_clusters[i], col_name], color=colors[i], bins=15)\n        plt.title(f\"Distribution of {col_name} for {all_clusters[i]}\")","ebbc1a61":"cluster_dist(\"Age\")","74084188":"cluster_dist(\"Income\")","fc7f3c8f":"cluster_dist(\"Amounts_Total\")","b5147e0c":"### Marital Status Column ","ebdf7054":"#### Amounts_Total ","cb202745":"## Exploratory Data Analysis ","8b9cced6":"# Customer Personality Analysis","64fdc59b":"## Context ","948cd6c6":"#### Age ","da088b42":"#### Data Dictionary ","1671c639":"### Amount Columns","13604b82":"### Education Column ","7c977736":"### Purchases Columns","1ffe07ae":"## Living_Young = Kidhome + Teenhome ","d6841afb":"Customer Personality Analysis is a detailed analysis of a company\u2019s ideal customers. It helps a business to better understand its customers and makes it easier for them to modify products according to the specific needs, behaviors and concerns of different types of customers.\n\nCustomer personality analysis helps a business to modify its product based on its target customers from different types of customer segments. For example, instead of spending money to market a new product to every customer in the company\u2019s database, a company can analyze which customer segment is most likely to buy the product and then market the product only on that particular segment. ","6af9a06f":"### Problem Statement ","e9453667":"## Each of Clusters Important Feature Distribution ","7107af34":"## Modeling for KMeans Algorithm","0a3dba18":"### Age Column ","a9843837":"### Kidhome & Teenhome Columns","1d77e2e5":"## Handling Missing Values","8eef2c06":"### Dt_Customer Column ","b2ddd228":"Data dictionary includes meanings of all columns at the dataset.","d52dac65":"#### Income"}}