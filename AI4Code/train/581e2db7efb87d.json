{"cell_type":{"e02995f6":"code","c4479b96":"code","0f13bd10":"code","3fda0a37":"code","83ae003c":"code","d55b3f39":"code","b90c6396":"code","7c8dd601":"code","85e1132f":"code","46d8904b":"code","363e6110":"code","69ee4bf9":"code","fbbbf2b1":"code","0ae657dc":"code","476675ac":"code","12d8d225":"code","e23485da":"code","9630281f":"markdown","98e7dd4f":"markdown","f1b90c65":"markdown"},"source":{"e02995f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport altair as alt\nalt.data_transformers.disable_max_rows()\nfrom datetime import date\nfrom dateutil import parser\n\n# Visualize\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.offline as pyo\nfrom IPython.display import Image\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4479b96":"df = pd.read_csv(\"\/kaggle\/input\/how-much-would-a-car-cost-for-ml\/car_evaluation.csv\", delimiter=',', encoding='utf8')\ndf.head(2)","0f13bd10":"df.isnull().sum()","3fda0a37":"import holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')","83ae003c":"#Code by Kohei-mu https:\/\/www.kaggle.com\/koheimuramatsu\/industrial-accident-causal-analysis\/notebook\n\nbuy_cnt = np.round(df['buying'].value_counts(normalize=True) * 100)\nhv.Bars(buy_cnt).opts(title=\"Buying Count\", color=\"green\", xlabel=\"Buying\", ylabel=\"Percentage\", yformatter='%d%%')\\\n                .opts(opts.Bars(width=500, height=300,tools=['hover'],show_grid=True)).opts(xrotation=45)","d55b3f39":"#Code by Kohei-mu https:\/\/www.kaggle.com\/koheimuramatsu\/industrial-accident-causal-analysis\/notebook\n\nclass_cnt = np.round(df['class'].value_counts(normalize=True) * 100)\nhv.Bars(class_cnt).opts(title=\"Class Count\", color=\"red\", xlabel=\"Class\", ylabel=\"Percentage\", yformatter='%d%%')\\\n                .opts(opts.Bars(width=500, height=300,tools=['hover'],show_grid=True)).opts(xrotation=45)","b90c6396":"#Code by Aristotle  https:\/\/www.kaggle.com\/aristotle609\/kickstarter-project-eda\/notebook\n\ndef HChart(df,x_axis,y_axis,color_axis):\n    chart = alt.Chart(df).mark_bar().encode(\n        x = x_axis,\n        y = y_axis,\n        color = color_axis\n    )\n    display(chart)","7c8dd601":"#Plotting the state of the project\nHChart(df.sample(100) , \"buying\" , \"count()\" , 'buying')","85e1132f":"#Plotting the state of the project\nHChart(df.sample(100) , \"maint\" , \"count()\" , 'maint')","46d8904b":"#Plotting the state of the project\nHChart(df.sample(100) , \"doors\" , \"count()\" , 'doors')","363e6110":"#Plotting the state of the project\nHChart(df.sample(100) , \"persons\" , \"count()\" , 'persons')","69ee4bf9":"#Plotting the state of the project\nHChart(df.sample(100) , \"lug_boot\" , \"count()\" , 'lug_boot')","fbbbf2b1":"#Plotting the state of the project\nHChart(df.sample(100) , \"safety\" , \"count()\" , 'safety')","0ae657dc":"#Plotting the state of the project\nHChart(df.sample(100) , \"class\" , \"count()\" , 'class')","476675ac":"#Codes by Pooja Jain https:\/\/www.kaggle.com\/jainpooja\/av-guided-hackathon-predict-youtube-likes\/notebook\n\ntext_cols = ['buying', 'lug_boot', 'safety', 'class']\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nwc = WordCloud(stopwords = set(list(STOPWORDS) + ['|']), random_state = 42)\nfig, axes = plt.subplots(2, 2, figsize=(20, 12))\naxes = [ax for axes_row in axes for ax in axes_row]\n\nfor i, c in enumerate(text_cols):\n  op = wc.generate(str(df[c]))\n  _ = axes[i].imshow(op)\n  _ = axes[i].set_title(c.upper(), fontsize=24)\n  _ = axes[i].axis('off')\n\n#_ = fig.delaxes(axes[3]) If you want only 3 wordClouds ","12d8d225":"#Code from Carl Macbride Ellis https:\/\/www.kaggle.com\/carlmcbrideellis\/treeplot-see-your-classification-tree\n\n!pip install treeplot\n\n\n# import treeplot package:\nimport treeplot\n# and the random forest classifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# read in the data\ntrain_data = pd.read_csv('..\/input\/how-much-would-a-car-cost-for-ml\/car_evaluation.csv')\n\n# select some features\nfeatures = [\"buying\", \"lug_boot\", \"maint\", \"persons\", \"doors\", \"class\"]\n\nX_train       = pd.get_dummies(train_data[features])\ny_train       = train_data[\"safety\"]\n\n# perform the classification and the fit\nclassifier = RandomForestClassifier(criterion='gini', n_estimators=100, \n        min_samples_split=2, min_samples_leaf=10, max_features='auto')\nclassifier.fit(X_train, y_train)","e23485da":"# now make the plot\nax = treeplot.plot(classifier)","9630281f":"#Oh So tiny leaves that we can't read anything. But it's still a tree. ","98e7dd4f":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT5-K5kYSMoskFaMmbB7TvC7qJlmDvI35VCMDRimmYzr5Y47TuHvuAXyWPb6RbQ5suxtMA&usqp=CAU)youtube.com","f1b90c65":"#All the other features have the same values then it's useless plotting bars with the same height.\n\nExcept class (below)."}}