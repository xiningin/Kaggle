{"cell_type":{"f6565d2a":"code","11e37e94":"code","25f97a39":"code","d1b61dcd":"code","6a7a1942":"code","703f1ed9":"code","b129c259":"code","4d412e40":"code","dcc18e06":"code","4f2a3a2c":"code","27e7d057":"code","24df798f":"code","46cda63b":"code","d26bc4e1":"code","90545f0d":"code","1c3d093c":"code","b6392d49":"code","2451e073":"code","a93ae1a6":"code","9b9ddae4":"code","c4c94a2c":"code","a5c863ca":"code","682b5792":"code","327bfa26":"code","baabba1d":"code","1aba6f35":"code","54bf0e2c":"code","d798a0c9":"code","438c5dc8":"code","8837ca58":"code","1c228f24":"code","9beda683":"code","d9bd53ac":"code","43cc2b8a":"code","c2fc41bb":"code","ec04faa3":"code","ca12504b":"markdown","4875d859":"markdown","a0b2e138":"markdown","3e179e4d":"markdown","976e9e05":"markdown","b85e6f7c":"markdown","fde8293e":"markdown","256dbb46":"markdown","b4a8601e":"markdown","6a9068ea":"markdown","3f8e7858":"markdown","ce8582ad":"markdown","049537b2":"markdown","d3b74cff":"markdown","96a053e8":"markdown","7eb701bc":"markdown","a8a43ece":"markdown","f8002ce8":"markdown","dda4d71e":"markdown","116f2478":"markdown","a3127370":"markdown","4c50b7f9":"markdown","8334d638":"markdown","80d46482":"markdown","cae43f52":"markdown"},"source":{"f6565d2a":"# for numerical analyiss\nimport numpy as np\n\n# to store and process data in dataframe\nimport pandas as pd\n\n# to interface with operating system\nimport os\n\n# for offline ploting\nimport matplotlib.pyplot as plt\n\n# interactive visualization\nimport plotly.express as px\nimport seaborn as sns; sns.set()\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# for trendlines\nimport statsmodels","11e37e94":"# Create an empty list\nfiles = []\n\n# Fill the list with the file names of the CSV files in the Kaggle folder\nfor dirname, _, filenames in os.walk('..\/input\/econfin'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))\n\nfor dirname, _, filenames in os.walk('..\/input\/cac40'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))\n\n# Sort the file names\nfiles = sorted(files)\n\n# Output the list of sorted file names\nfiles","25f97a39":"# Read the CSV files through list comprehension, which can be broken into three parts\n# 1. OUTPUT EXPRESSION [pd.read_csv(f, na_values=['.'])] --- Note: this turns character '.' values into missing value\n# 2. INPUT SEQUENCE [for f] \n# 3. CONDITION (OPTIONAL) [in files] \nseries = [pd.read_csv(f, na_values=['.']) for f in files]\n\n# Define series name, which becomes the dictionary key\nseries_name = ['cac','btc','cpi','gold','snp','high_yield_bond','inv_grade_bond','moderna','employment','tesla_robinhood','trea_20y_bond','trea_10y_yield','tesla','fed_bs','wti']\n\n# series name = dictionary key, series = dictionary value\nseries_dict = dict(zip(series_name, series))","d1b61dcd":"# 0. CAC 40\ncac = series_dict['cac']\ncac['Date'] = pd.to_datetime(cac['Date'])\ncac.rename(columns={'Adj Close':'cac'}, inplace=True)\ncac['cac_return'] = cac['cac'].pct_change()\ncac['cac_volatility_1m'] = (cac['cac_return'].rolling(20).std())*(20)**(1\/2) # Annualize daily standard deviation\ncac['cac_volatility_1y'] = (cac['cac_return'].rolling(252).std())*(252)**(1\/2) # 252 trading days per year\ncac = cac[['Date','cac','cac_return','cac_volatility_1m','cac_volatility_1y']]\n# Calculate 1-month forward cumulative returns\ncac['one_month_forward_cac_return'] = cac['cac_return'][::-1].rolling(window=20, min_periods=1).sum()[::-1]","6a7a1942":"# 1. S&P \nsnp = series_dict['snp']\nsnp['Date'] = pd.to_datetime(snp['Date'])\nsnp.rename(columns={'Adj Close':'snp'}, inplace=True)\nsnp['snp_return'] = snp['snp'].pct_change()\nsnp['snp_volatility_1m'] = (snp['snp_return'].rolling(20).std())*(20)**(1\/2) # Annualize daily standard deviation\nsnp['snp_volatility_1y'] = (snp['snp_return'].rolling(252).std())*(252)**(1\/2) # 252 trading days per year\nsnp = snp[['Date','snp','snp_return','snp_volatility_1m','snp_volatility_1y']]\n# Calculate 1-month forward cumulative returns\nsnp['one_month_forward_snp_return'] = snp['snp_return'][::-1].rolling(window=20, min_periods=1).sum()[::-1]","703f1ed9":"# 2. Bitcoin\nbtc = series_dict['btc']\nbtc['Date'] = pd.to_datetime(btc['Date'])\nbtc.rename(columns={'Adj Close':'btc'}, inplace=True)\nbtc['btc_return'] = btc['btc'].pct_change()\nbtc['btc_volatility_1m'] = (btc['btc_return'].rolling(20).std())*(20)**(1\/2) \nbtc['btc_volatility_1y'] = (btc['btc_return'].rolling(252).std())*(252)**(1\/2) \nbtc = btc[['Date','btc','btc_return','btc_volatility_1m','btc_volatility_1y']]\nbtc['one_month_forward_btc_return'] = btc['btc_return'][::-1].rolling(window=20, min_periods=1).sum()[::-1]","b129c259":"# 3. Gold\ngold = series_dict['gold']\ngold['Date'] = pd.to_datetime(gold['DATE'])\ngold.rename(columns={'GOLDPMGBD228NLBM':'gold'}, inplace=True)\ngold['gold_lag1'] = gold['gold'].shift(1)\ngold['gold_lag2'] = gold['gold'].shift(2)\ngold['gold'] = gold['gold'].fillna(gold['gold_lag1'])\ngold['gold'] = gold['gold'].fillna(gold['gold_lag2'])\ngold[\"gold\"] = gold[\"gold\"].astype('float64')\ngold['gold_return'] = gold['gold'].pct_change()\ngold['gold_volatility_1m'] = (gold['gold_return'].rolling(20).std())*(20)**(1\/2) \ngold['gold_volatility_1y'] = (gold['gold_return'].rolling(252).std())*(252)**(1\/2) \ngold = gold[['Date','gold','gold_return','gold_volatility_1m','gold_volatility_1y']]\ngold['one_month_forward_gold_return'] = gold['gold_return'][::-1].rolling(window=20, min_periods=1).sum()[::-1]","4d412e40":"# 4. High Yield Bond\nhigh_yield_bond = series_dict['high_yield_bond']\nhigh_yield_bond['Date'] = pd.to_datetime(high_yield_bond['Date'])\nhigh_yield_bond.rename(columns={'Adj Close':'high_yield_bond'}, inplace=True)\nhigh_yield_bond['high_yield_bond_return'] = high_yield_bond['high_yield_bond'].pct_change()\nhigh_yield_bond['high_yield_bond_volatility_1m'] = (high_yield_bond['high_yield_bond_return'].rolling(20).std())*(20)**(1\/2)\nhigh_yield_bond['high_yield_bond_volatility_1y'] = (high_yield_bond['high_yield_bond_return'].rolling(252).std())*(252)**(1\/2)\nhigh_yield_bond = high_yield_bond[['Date','high_yield_bond','high_yield_bond_return','high_yield_bond_volatility_1m',\n                                   'high_yield_bond_volatility_1y']]\nhigh_yield_bond['one_month_forward_high_yield_bond_return'] = high_yield_bond['high_yield_bond_return'][::-1].rolling(window=20, min_periods=1).sum()[::-1]","dcc18e06":"# 5. Investment Grade Bond\ninv_grade_bond = series_dict['inv_grade_bond']\ninv_grade_bond['Date'] = pd.to_datetime(inv_grade_bond['Date'])\ninv_grade_bond.rename(columns={'Adj Close':'inv_grade_bond'}, inplace=True)\ninv_grade_bond['inv_grade_bond_return'] = inv_grade_bond['inv_grade_bond'].pct_change()\ninv_grade_bond['inv_grade_bond_volatility_1m'] = (inv_grade_bond['inv_grade_bond_return'].rolling(20).std())*(20)**(1\/2)\ninv_grade_bond['inv_grade_bond_volatility_1y'] = (inv_grade_bond['inv_grade_bond_return'].rolling(252).std())*(252)**(1\/2)\ninv_grade_bond = inv_grade_bond[['Date','inv_grade_bond','inv_grade_bond_return','inv_grade_bond_volatility_1m',\n                                 'inv_grade_bond_volatility_1y']]\ninv_grade_bond['one_month_forward_inv_grade_bond_return'] = inv_grade_bond['inv_grade_bond_return'][::-1].rolling(window=20, min_periods=1).sum()[::-1]","4f2a3a2c":"# 6. Crude Oil WTI\nwti = series_dict['wti']\nwti['Date'] = pd.to_datetime(wti['DATE'])\nwti.rename(columns={'WTISPLC':'wti'}, inplace=True)\nwti['wti_return'] = wti['wti'].pct_change()\nwti['wti_volatility_1m'] = wti['wti_return'].rolling(20).std()*(20)**(1\/2)\nwti['wti_volatility_1y'] = wti['wti_return'].rolling(252).std()*(252)**(1\/2)\nwti = wti[['Date','wti','wti_return','wti_volatility_1m','wti_volatility_1y']]\nwti['one_month_forward_wti_return'] = wti['wti_return'][::-1].rolling(window=20, min_periods=1).sum()[::-1]","27e7d057":"#7. Inflation\ncpi = series_dict['cpi']\ncpi['Date'] = pd.to_datetime(cpi['DATE'])\ncpi.rename(columns={'CUUR0000SEHE':'cpi'}, inplace=True)\ncpi = cpi[['Date','cpi']]","24df798f":"#8. Employment\nemployment = series_dict['employment']\nemployment['Date'] = pd.to_datetime(employment['DATE'])\nemployment.rename(columns={'PAYEMS_CHG':'employment'}, inplace=True)\nemployment = employment[['Date','employment']]","46cda63b":"#9. US Fed's Balance Sheet\nfed_bs = series_dict['fed_bs']\nfed_bs['Date'] = pd.to_datetime(fed_bs['DATE'])\nfed_bs.rename(columns={'WALCL':'fed_bs'}, inplace=True)\nfed_bs = fed_bs[['Date','fed_bs']]","d26bc4e1":"cac.tail(10)","90545f0d":"# Import datasets with Pandas method read_csv\nnber_recession_indicator_month = pd.read_csv('..\/input\/nber-based-recession-indicators-united-states\/USRECM.csv')\nnber_recession_indicator_day = pd.read_csv('..\/input\/nber-based-recession-indicators-united-states\/USRECD.csv')\n\n# Convert data types\nnber_recession_indicator_day[\"Date\"] = pd.to_datetime(nber_recession_indicator_day[\"date\"])\nnber_recession_indicator_day[\"recession\"] = nber_recession_indicator_day[\"value\"].astype('bool')\n\n# Subset data columns\nnber_recession_indicator_day = nber_recession_indicator_day[[\"Date\",\"recession\"]]","1c3d093c":"# Merge datasets together\nasset_classes = [btc,cpi,gold,high_yield_bond,inv_grade_bond,employment,fed_bs,wti]\n\nbaseline = pd.merge(cac,nber_recession_indicator_day,how='left',left_on='Date', right_on=\"Date\")\n\nfor asset_class in asset_classes:\n    baseline = pd.merge(baseline,asset_class,how='left',left_on='Date', right_on=\"Date\")\n\n# Backfilling missing values,  \nbaseline.loc[baseline.Date >= '2020-03-01', \"recession\"] = 1\nbaseline[\"recession\"] = baseline[\"recession\"].fillna(0).astype(bool)\n\nbaseline.info()","b6392d49":"baseline.tail()","2451e073":"# Index Date\nbaseline.set_index('Date', inplace=True)\nbaseline.tail()","a93ae1a6":"# Re-sample the dataset every year and calculate the sum of returns\nbaseline_yearly_return = baseline[[\"cac_return\", \"btc_return\", \"gold_return\", \"high_yield_bond_return\",  \n                            \"inv_grade_bond_return\", \"wti_return\"]].dropna().resample('Y').sum().reset_index()\n\nprint(baseline_yearly_return['Date'].min()) # 2010-12-31\nbaseline_yearly_return.head()","9b9ddae4":"# Re-sample the dataset every year and calculate the mean of 1-year volatility\nbaseline_yearly_volatility_1y = baseline[[\"cac_volatility_1y\", \"btc_volatility_1y\", \"gold_volatility_1y\", \n                                          \"high_yield_bond_volatility_1y\", \"inv_grade_bond_volatility_1y\", \n                                          \"wti_volatility_1y\"]].dropna().resample('Y').mean().reset_index()\n\nbaseline_yearly = baseline_yearly_return.merge(baseline_yearly_volatility_1y, left_on='Date', right_on='Date')\n\nbaseline_yearly.head()","c4c94a2c":"# Reshape dataset wide to tall with method melt\nbaseline_yearly_reshaped = baseline_yearly.melt(id_vars='Date', var_name='key', value_name='value')\nbaseline_yearly_reshaped.head()","a5c863ca":"baseline_yearly_reshaped['metric'] = np.where(baseline_yearly_reshaped['key'].str.contains(pat = 'return'), 'return', 'volatility')\nbaseline_yearly_reshaped['position']= baseline_yearly_reshaped['key'].str.find('_') \nbaseline_yearly_reshaped['asset_class']= baseline_yearly_reshaped['key'].str.slice(0,3,1)\nbaseline_yearly_reshaped = baseline_yearly_reshaped[['Date','metric','asset_class','value']]\nbaseline_yearly_reshaped.head()","682b5792":"# Display return and volatility for each asset class\nprint(baseline_yearly_reshaped[baseline_yearly_reshaped['metric'] == 'return'].groupby('asset_class').mean())\nprint(baseline_yearly_reshaped[baseline_yearly_reshaped['metric'] == 'volatility'].groupby('asset_class').mean())","327bfa26":"baseline.tail()","baabba1d":"# Reset index\nbaseline.reset_index(inplace=True)\nbaseline.tail()","1aba6f35":"# Output summary statistics\nbaseline[[\"cac_return\", \"cac_volatility_1y\", \"btc_return\", \"btc_volatility_1y\", \"gold_return\", \"gold_volatility_1y\", \n                  \"high_yield_bond_return\", \"high_yield_bond_volatility_1y\", \"inv_grade_bond_return\", \n                  \"inv_grade_bond_volatility_1y\", \"wti_return\", \"wti_volatility_1y\"]].describe()","54bf0e2c":"# Plot a jointplot with a regression line\nsns.jointplot(x = 'gold_return', y = 'cac_return', data = baseline, kind='reg')","d798a0c9":"def plot_chart(series):\n    fig = px.scatter(baseline[baseline[series].notnull()], x=\"Date\", y=series, color=\"recession\", color_discrete_sequence=['#636EFA', '#FFA15A'], width=1200)\n    fig.update_traces(mode='markers', marker_size=4)\n    fig.update_layout(title=series, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","438c5dc8":"plot_chart(\"cac\")","8837ca58":"plot_chart(\"gold\")","1c228f24":"plot_chart('btc')","9beda683":"# Plot pairplot\nbaseline_returns = baseline[[\"cac_return\", \"btc_return\", \"gold_return\", \"high_yield_bond_return\", \"inv_grade_bond_return\", \"wti_return\", \"recession\"]]\n\nsns.pairplot(baseline_returns, hue=\"recession\")","d9bd53ac":"def plot_chart_vol_ret(series):\n    fig = px.scatter(baseline[baseline[series+'_return'].notnull()], x=series + '_volatility_1m', \n                     y='one_month_forward_' + series + '_return', width=800,\n                     trendline = 'ols')\n    fig.update_layout(title=str(series) + ' volatility vs one-month forward return', xaxis_title='', yaxis_title='')\n    fig.show()\n    \ndef plot_chart_vol_ret_by_recession(series):\n    fig = px.scatter(baseline[baseline[series+'_return'].notnull()], x=series + '_volatility_1m', \\\n                     color='recession', y='one_month_forward_' + series + '_return', \n                     color_discrete_sequence=['#636EFA', '#FFA15A'], width=800,\n                     trendline = 'ols')\n    fig.update_layout(title=str(series) + ' volatility vs one-month forward return', xaxis_title='', yaxis_title='')\n    fig.show()","43cc2b8a":"plot_chart_vol_ret('cac')","c2fc41bb":"plot_chart_vol_ret_by_recession('cac')","ec04faa3":"# Plot heatmap of the relationships across different asset classes\nbaseline_corr = baseline[['cac_return', 'cac_volatility_1y', 'btc_return', 'btc_volatility_1y',\n                         'gold_return', 'gold_volatility_1y', 'high_yield_bond_return', 'high_yield_bond_volatility_1y',\n                         'inv_grade_bond_return', 'inv_grade_bond_volatility_1y', 'wti_return', 'wti_volatility_1y',\n                         'recession']].dropna().corr()\n\nfig, ax = plt.subplots(figsize=(20,10)) \nsns.heatmap(baseline_corr, annot=True, ax = ax)","ca12504b":"<a id=\"section-three\"><\/a>\n# 3. WHAT DO DECADES OF ASSET RETURNS TELL US ABOUT INVESTING?","4875d859":"S&P500 mostly decline during recessions. This is not surprising. 1929-1933 Great Depression vs 2020 Great Compression. What is driving the strong rebound?","a0b2e138":"The relationship is at best weak.","3e179e4d":"<a id=\"section-five\"><\/a>\n# 5. REFERENCES\n\n[Can Volatility Predict Returns?](https:\/\/www.firstandmainfinancial.com\/sites\/default\/files\/users\/erikwolfersnew\/PDFs\/Can%20Volatility%20Predict%20Returns_%20%281%29.pdf), 2016, Dimensional Fund Advisors.\n\n[Risk and volatility: econometric models and financial practice](https:\/\/www.nobelprize.org\/uploads\/2018\/06\/engle-lecture.pdf), 2003, Nobel Lecture.\n\nDatasets are from [Yahoo Finance](https:\/\/finance.yahoo.com\/), [Federal Reserve Bank of St. Louis](https:\/\/fred.stlouisfed.org\/)  \n","976e9e05":"<a id=\"subsection-two-one\"><\/a>\n## 2.1 Draw Packages","b85e6f7c":"For more details on method melt [HERE](https:\/\/www.geeksforgeeks.org\/python-pandas-melt\/)","fde8293e":"snp_return vs gold_return. snp_return vs btc_return. Past volatility correlates negatively with returns.","256dbb46":"<a id=\"subsection-three-three\"><\/a>\n## 3.3 Question 3: Does volatility foretell future return?    ","b4a8601e":"Empirical distributions: Recession vs. Not. Distributions are mostly more spread out during recessions. Which pairs have relationships? Positive relationships: (S&P500 & High Yield Bond, Investment Grade Bond & High Yield Bond).","6a9068ea":"Details on list comprehension [HERE](https:\/\/towardsdatascience.com\/comprehending-the-concept-of-comprehensions-in-python-c9dafce5111).   \nDetails on dictionary data structure [HERE](https:\/\/realpython.com\/python-dicts\/).","3f8e7858":"# TABLE OF CONTENTS\n\n* [1. INTRODUCTION](#section-one)\n* [2. SETUP](#section-two)\n    - [2.1 Draw Packages](#subsection-two-one)\n    - [2.2 Import Data](#subsection-two-two)\n    - [2.3 Wrangle Data](#subsection-two-three)\n* [3. WHAT DO DECADES OF ASSET RETURNS TELL US ABOUT INVESTING?](#section-three)\n    - [3.1 Question 1: What is the risk\/return profile for different asset class?](#subsection-three-one)\n    - [3.2 Question 2: Which asset class is a good hedge against recession?](#subsection-three-two)\n    - [3.3 Question 3: Does volatility foretell future return?](#subsection-three-three)\n* [4. CONCLUSION](#section-four)\n* [5. REFERENCES](#section-five)","ce8582ad":"The relationship between snp volatility and one-month forward return is stronger when there is no recession.","049537b2":"<a id=\"subsection-three-two\"><\/a>\n## 3.2 Question 2: Which asset class is a good hedge against recession?","d3b74cff":"<a id=\"section-four\"><\/a>\n# 4. CONCLUSION","96a053e8":"<a id=\"section-two\"><\/a>\n# 2. SETUP","7eb701bc":"Details on merge, join, and concat [HERE](https:\/\/realpython.com\/pandas-merge-join-and-concat\/).","a8a43ece":"Some claim that Bitcoin serves a good hedge against recession\/market crash, e.g. [HERE](https:\/\/medium.com\/@sanneh.si\/bitcoin-confirmed-as-a-hedge-against-the-stock-market-crash-71390a55d4c3). 2020 is the first time Bitcoin-as-a-hedge-against-market-crash hypothesis is tested. Unfortunately, it seems to move somewhat in tandem with S&P500. Time will tell. Perhaps, this time is different.","f8002ce8":"<a id=\"subsection-two-two\"><\/a>\n## 2.2 Import Data","dda4d71e":"<a id=\"section-one\"><\/a>\n# 1. INTRODUCTION\n\nThe Covid19 pandemic has driven the economies around the world into deep recessions. The various forms of mandated lockdowns have caused both supply-side and demand-side shocks to the world economies. The scale of the economic downturn is unprecedented. In this notebook, we will first explore the risk\/return profile of different asset classes (e.g., S&P500, Bonds, Gold, Oil, Bitcoin, etc.). Then, we explore which asset class is a good hedge against recession. Is the conventional wisdom that gold is a good hedge against recession true? Finally, the Covid19 pandemic has heightened the volatilities of asset returns. What is the relationship between asset volatilities and returns? Do asset return volatilities historically foretell future returns? ","116f2478":"S&P and gold returns seem uncorrelated.","a3127370":"Gold does not seem to be a good hedge against recession.","4c50b7f9":"Details on method resample [HERE](https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-resample\/).","8334d638":"<a id=\"subsection-two-three\"><\/a>\n## 2.3 Wrangle Data","80d46482":"The conventional wisdom: Gold is a good hedge against recession. Is it true?","cae43f52":"<a id=\"subsection-three-one\"><\/a>\n## 3.1 Question 1: What is the risk\/return profile for different asset class?"}}