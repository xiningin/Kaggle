{"cell_type":{"f86a89e0":"code","628e2504":"code","999c0736":"code","b4c792c8":"code","4aa00ead":"code","d09dfd64":"code","66f0cb88":"code","0868671a":"code","15a9ab3f":"code","baed33aa":"code","eea6a307":"code","d60b7ed3":"code","92139477":"code","9ea93732":"code","e902ec89":"code","b242bcab":"code","a9e9dd21":"code","f24a690c":"code","3e075c02":"code","5428cc75":"code","3e1a1594":"code","1eb1e864":"code","c502dba7":"code","6cc3870f":"code","e54a7076":"code","f133ccd6":"code","0cca67c7":"code","aa599dda":"code","9810c582":"code","6d15b346":"code","a05f02eb":"code","d717e2b6":"code","9ac1db30":"code","bd958eaf":"code","4cd25a36":"code","f78da82c":"code","c2ce2169":"code","081c70c1":"code","d70f1c25":"code","93ca13c2":"code","a052c120":"code","46f5a0a5":"code","409378c6":"code","b1d28271":"code","aa7e7297":"code","3d0776d2":"code","43bf38fd":"code","f2a862b9":"code","32c9ee34":"code","96aad67c":"code","fef9ebb6":"code","79768d8e":"code","9ef79d0e":"code","20573e33":"code","217a01fa":"code","97193d22":"code","d5e49c78":"code","4f91a6b5":"code","6518d47b":"code","142161d0":"code","4e6f087d":"code","73752983":"code","ea878f51":"code","aaaa07a2":"code","8ff4485a":"code","6827adbc":"code","f3b29adb":"code","5ab4ce3d":"code","5cd35c19":"markdown","f521e880":"markdown","661bdcd4":"markdown","65e78e39":"markdown","8f341934":"markdown","fbc25285":"markdown","21be0270":"markdown","8b75bd24":"markdown","caa32b32":"markdown","a99d5a7c":"markdown","9bc1be45":"markdown","3ccb1798":"markdown","90fbbecb":"markdown","9c1d8e41":"markdown","e465a0d9":"markdown","e9bb5ca3":"markdown"},"source":{"f86a89e0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nimport os\nimport warnings\nfrom wordcloud import WordCloud, STOPWORDS \nfrom matplotlib.colors import ListedColormap\nimport squarify\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostRegressor, GradientBoostingRegressor, GradientBoostingClassifier\nimport xgboost as xgb\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report\nimport scipy.stats as stats\nimport statistics as stat\n","628e2504":"# Oculta\u00e7\u00e3o de erros futuros\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Definica\u00e7\u00e3o da paleta de cores dos gr\u00e1ficos\ncores = sns.color_palette(\"RdBu\", n_colors=7)\ncores2 = sns.cubehelix_palette(8, start=2.5, rot=0.4)\n#cores = sns.diverging_palette(255, 133, l=60, n=7, center=\"dark\")\n#cores = sns.cubehelix_palette(8, start=2.5, rot=0.4)\n#sns.palplot(sns.diverging_palette(323.1, 254.5, s = 99, l = 47, n=12))\n#sns.palplot(sns.color_palette('muted'))\n#sns.palplot(sns.cubehelix_palette(8, start=3, rot=0.3))","999c0736":"#start = np.linspace(0.1, 3, 30)\n#rot = np.linspace(0.1, 1, 10)\n\n#for i in start:\n #   for a in rot:\n  #      sns.palplot(sns.cubehelix_palette(8, start=i, rot=a))\n   #     plt.title(str(a))\n    #    plt.xlabel(str(i))\n     #   plt.show()\n    ","b4c792c8":"print(os.listdir(\"..\/input\"))","4aa00ead":"heroes = pd.read_csv('..\/input\/heroes.csv', sep = ',' )\nmatch_patch = pd.read_csv('..\/input\/match_patch.csv', sep = ',' )\nmatches = pd.read_csv('..\/input\/matches.csv', sep = ',' )\npicks_bans = pd.read_csv('..\/input\/picks_bans.csv', sep = ',' )\nplayer_matches = pd.read_csv('..\/input\/player_matches.csv', sep = ',' )","d09dfd64":"matches_train, matches_valid = train_test_split(matches, test_size=0.2, random_state=42, stratify=matches['radiant_win'])\nmatch_valid = set(matches_valid['match_id'])\nmatches_unique = set(matches['match_id'])","66f0cb88":"\n#sample = 0.2\n#match_valid = random.sample(matches_unique, int(len(matches_unique)*sample))\n#print('Tamanho da amostra de valida\u00e7\u00e3o:', sample)\n#print()\n#print('Quantidade de partidas de treino: ', len(matches_unique)-len(match_valid))\n#print('Quantidade de partidas de teste: ', len(match_valid))","0868671a":"# Remo\u00e7\u00e3o de colunas que n\u00e3o ser\u00e3o utilizadas para o modelo\ndrop = ['Unnamed: 0', 'match_seq_num', 'picks_bans', 'radiant_team_id', 'dire_team_id','radiant_team_name', \n        'dire_team_name', 'radiant_team_complete', 'dire_team_complete', 'radiant_captain', 'dire_captain',\n        'radiant_gold_adv', 'lobby_type', 'human_players', 'radiant_xp_adv', 'teamfights', 'draft_timings', 'version', 'game_mode',  'engine']\n\nfor i in drop:\n    matches = matches.drop(i, axis=1)","15a9ab3f":"def basic_details(df):\n    b = pd.DataFrame()\n    b['Missing value'] = df.isnull().sum()\n    b['N unique value'] = df.nunique()\n    b['dtype'] = df.dtypes\n    return b","baed33aa":"print(\"Dimens\u00e3o do dataset: Matches\")\nprint(\"Colunas:\", matches.shape[1],\"\\nlinhas:\", matches.shape[0])\nbasic_details(matches)","eea6a307":"matches.drop(['match_id', 'leagueid'], axis = 1).describe().round(2).T","d60b7ed3":"matches['radiant_win'].unique()","92139477":"a = matches['match_id'].groupby(matches['radiant_win']).count()\n\na.plot(kind ='barh',rot=0, figsize=(18,3), color = cores,\n      title = 'Distribui\u00e7\u00e3o de vit\u00f3rias por time')\nplt.ylabel(\"Team\")\nplt.yticks([])\nplt.xlabel(\"Quantidade de partidas\")\nplt.text(0, 1,' Radiant team', {'color': 'w', 'fontsize': 14,  'va': 'center'})\nplt.text(1, 0,' Dire team', {'color': 'w', 'fontsize': 14,  'va': 'center'})\nplt.show()","9ea93732":"plt.rcParams['figure.figsize'] = (15,5)\nsns.heatmap(matches.corr(), annot = True, cmap = cores2)\nplt.title('Matriz de Correla\u00e7\u00e3o')\nplt.show()\n\nprint('Percebe-se que, conforme esperado, a vari\u00e1vel \"radiant_win\" possui correla\u00e7\u00e3o positiva com as vari\u00e1veis') \nprint('referentes ao time Radiant e correla\u00e7\u00e3o negativa com as vari\u00e1veis referentes ao time Dire.')","e902ec89":"a = matches[['barracks_status_dire', 'barracks_status_radiant', 'radiant_win']].corr()\na['radiant_win']\n","b242bcab":"plt.rcParams['figure.figsize'] = (18,5)\nsns.distplot(matches['barracks_status_radiant'].loc[(matches['radiant_win']==0)], color = random.choice(cores), label= 'Radiant')\nsns.distplot(matches['barracks_status_dire'].loc[(matches['radiant_win']==1)], color = random.choice(cores), label= 'Dire')\nplt.title('Distribui\u00e7\u00e3o de barrack_status por time vencedor')\nplt.xlabel('barrack_status')\nplt.legend(loc = 'upper left')\nplt.show()","a9e9dd21":"sns.pairplot(x_vars='radiant_score', y_vars='dire_score', hue='radiant_win', data=matches, size=7, palette= cores)","f24a690c":"a = pd.merge(matches, match_patch, left_on = 'match_id', right_on = 'match_id', how = 'left')\n\na = a.pivot_table(values = 'match_id',\n                   index = 'patch',\n                   columns = 'radiant_win',\n                   aggfunc = 'count').reset_index()\n\ncor1 = random.choice(cores)\ncor2 = random.choice(cores)\n\nplt.fill_between(a['patch'], a[True], color=cor1, alpha=0.2, label = 'Radiant')\nplt.plot(a['patch'], a[True], color=cor2, alpha=0.7, label = 'Radiant')\nplt.fill_between(a['patch'], a[False], color=cor2, alpha=0.2, label = 'Dire')\nplt.plot(a['patch'], a[False], color=cor2, alpha=0.7, label = 'Dire')\nplt.title('Distribui\u00e7\u00e3o de vit\u00f3rias por time e vers\u00e3o')\nplt.xlabel('Vers\u00e3o (patch)')\nplt.legend(loc = 'upper left')\nplt.show()","3e075c02":"a.columns = ['patch', 'False', 'True']\nchi2, p, dof, expected = stats.chi2_contingency([a['True'], a['False']])\nprint('Teste qui-quadrado de independ\u00eancia das vari\u00e1veis vers\u00e3o da partida e radiant_win')\nprint('Estat\u00edstica de teste qui-quadrado de independ\u00eancia: ',chi2)\nprint(\"p-valor: {:.6f}\".format(p))\nprint('Graus de liberdade: ',dof)","5428cc75":"# Remo\u00e7\u00e3o de colunas que n\u00e3o serr\u00e3o utilizadas para o modelo\npicks_bans = picks_bans.drop('Unnamed: 0', axis=1)","3e1a1594":"print(\"Dimens\u00e3o do dataset: Picks and bans\")\nprint(\"Colunas:\", picks_bans.shape[1],\"\\nlinhas:\", picks_bans.shape[0])\nbasic_details(picks_bans)","1eb1e864":"print('Moda e mediana da vari\u00e1vel hero_id na tabela pick_bans')\nprint('Moda: ', stat.mode(picks_bans['hero_id']))\nprint('Mediana: ', stat.median(picks_bans['hero_id']))","c502dba7":"# Remo\u00e7\u00e3o de colunas que n\u00e3o serr\u00e3o utilizadas para o modelo\nplayer_matches = player_matches.drop('Unnamed: 0', axis=1)","6cc3870f":"print(\"Dimens\u00e3o do dataset: Player Matches\")\nprint(\"Colunas:\", player_matches.shape[1],\"\\nlinhas:\", player_matches.shape[0])\nbasic_details(player_matches)","e54a7076":"player_matches.drop(['match_id','hero_id', 'account_id', 'player_slot'], axis =1) .describe().round(0).T","f133ccd6":"plt.rcParams['figure.figsize'] = (15,5)\nsns.heatmap(player_matches.corr(), annot = True, cmap = cores2)\nplt.title('Matriz de Correla\u00e7\u00e3o')\nplt.show()","0cca67c7":"a = pd.merge(player_matches, matches, left_on = 'match_id', right_on = 'match_id', how = 'left')\n\na = a.pivot_table(values = 'match_id',\n                   index = 'kills',\n                   columns = 'radiant_win',\n                   aggfunc = 'count').reset_index()\na.columns = ['kills', 'False', 'True']\na.fillna(0, inplace=True)\nchi2, p, dof, expected = stats.chi2_contingency([a['True'], a['False']])\nprint('Teste qui-quadrado de independ\u00eancia das vari\u00e1veis kills e radiant_win')\nprint('Estat\u00edstica de teste qui-quadrado de independ\u00eancia: ',chi2)\nprint(\"p-valor: {:.6f}\".format(p))\nprint('Graus de liberdade: ',dof)","aa599dda":"a = pd.merge(player_matches, matches, left_on = 'match_id', right_on = 'match_id', how = 'left')\n\na = a.pivot_table(values = 'match_id',\n                   index = 'last_hits',\n                   columns = 'radiant_win',\n                   aggfunc = 'count').reset_index()\na.columns = ['kills', 'False', 'True']\na.fillna(0, inplace=True)\nchi2, p, dof, expected = stats.chi2_contingency([a['True'], a['False']])\nprint('Teste qui-quadrado de independ\u00eancia das vari\u00e1veis last_hits e radiant_win')\nprint('Estat\u00edstica de teste qui-quadrado de independ\u00eancia: ',chi2)\nprint(\"p-valor: {:.6f}\".format(p))\nprint('Graus de liberdade: ',dof)","9810c582":"a = pd.merge(player_matches, matches, left_on = 'match_id', right_on = 'match_id', how = 'left')\n\na = a.pivot_table(values = 'match_id',\n                   index = 'last_hits',\n                   columns = 'kills',\n                   aggfunc = 'count').reset_index()\n#a.columns = ['last_hits', 'False', 'True']\na.fillna(0, inplace=True)\nchi2, p, dof, expected = stats.chi2_contingency(a)\nprint('Teste qui-quadrado de independ\u00eancia das vari\u00e1veis last_hits e kills')\nprint('Estat\u00edstica de teste qui-quadrado de independ\u00eancia: ',chi2)\nprint(\"p-valor: {:.6f}\".format(p))\nprint('Graus de liberdade: ',dof)","6d15b346":"var = ['kills', 'deaths', 'assists', 'last_hits']\n\nplt.rcParams['figure.figsize'] = (18,20)\n\nf, ax = plt.subplots(ncols= 2, nrows = 4)\nfor i in range(0,4):\n    ax[i,0].hist(player_matches[var[i]], color = random.choice(cores2), bins = 25)\n    ax[i,0].set_title('Histograma: '+var[i])\n    a = ax[i,1].boxplot(player_matches[var[i]], patch_artist=True)\n    plt.setp(a['boxes'], color=random.choice(cores2))\n    plt.setp(a['medians'], color=random.choice(cores2))\n    ax[i,1].set_title('Boxplot: '+var[i])               \nplt.show()","a05f02eb":"# Removendo partidas fora da per\u00edodo temporal de amostra\nmatch_patch = match_patch[match_patch['match_id'].isin(matches_unique)]","d717e2b6":"print(\"Dimens\u00e3o do dataset: match_patch\")\nprint(\"Colunas:\", match_patch.shape[1],\"\\nlinhas:\", match_patch.shape[0])\nbasic_details(match_patch)","9ac1db30":"print('Moda e mediana da vari\u00e1vel patch na tabela match_patch')\nprint('Moda: ', stat.mode(match_patch['patch']))\nprint('Mediana: ', stat.median(match_patch['patch']))","bd958eaf":"a = match_patch.pivot_table(values = 'match_id',\n                index=['patch'], \n                aggfunc='count').reset_index()\n\na['match_id'].plot(kind = 'bar', figsize=(18,5), color = cores2,\n      title = 'Distribui\u00e7\u00e3o de partidas por vers\u00e3o (patch)')\nplt.xlabel(\"Vers\u00e3o do jogo (patch)\")\nplt.ylabel(\"Quantidade de partidas\")\n#plt.legend()\nplt.show()","4cd25a36":"# Padroniza\u00e7\u00e3o do nome da coluna de identifica\u00e7\u00e3o do her\u00f3i\nheroes.rename(columns = {'id': 'hero_id'}, inplace=True)","f78da82c":"print(\"Dimens\u00e3o do dataset: Heroes\")\nprint(\"Colunas:\", heroes.shape[1],\"\\nlinhas:\", heroes.shape[0])\nbasic_details(heroes)","c2ce2169":"print('Estat\u00edsticas da vari\u00e1vel legs')\nprint()\nprint(heroes['legs'].describe().round(2))\nprint()\nprint()\nprint('Moda da vari\u00e1vel attack_type: ', stat.mode(heroes['attack_type']))\nprint('Moda da vari\u00e1vel primary_attr: ', stat.mode(heroes['primary_attr']))","081c70c1":"a = heroes.pivot_table(values = 'hero_id',\n                index=['primary_attr'], \n                aggfunc='count').reset_index()\nb = heroes.pivot_table(values = 'hero_id',\n                index=['attack_type'], \n                aggfunc='count').reset_index()\n\nplt.rcParams['figure.figsize'] = (18,5)\nf, ax = plt.subplots(ncols= 2)\nax[0].bar(a['primary_attr'], a['hero_id'], color = random.choice(cores))\nax[0].set_title('Ataque prim\u00e1rio')\nax[1].bar(b['attack_type'], b['hero_id'], color = random.choice(cores))\nax[1].set_title('Tipo de ataque')\nplt.show()\n","d70f1c25":"hero_var = pd.merge(picks_bans[picks_bans['is_pick']==True], matches, left_on = ['match_id'], right_on = ['match_id'], how = 'left')\nhero_var= pd.merge(hero_var, player_matches, left_on = ['match_id','hero_id'], right_on = ['match_id','hero_id'], how = 'left')\nhero_var= pd.merge(hero_var, heroes, left_on = ['hero_id'], right_on = ['hero_id'], how = 'left')\nhero_var= pd.merge(hero_var, match_patch, left_on = ['match_id'], right_on = ['match_id'], how = 'left')","93ca13c2":"a = pd.DataFrame(hero_var['localized_name'].value_counts()).reset_index().head()\na.columns = ['localized_name', 'qtd_pick']\n\nplt.rcParams['figure.figsize'] = (15,8)\nplt.bar(a['localized_name'], a['qtd_pick'], color = random.choice(cores))\nplt.title(\"Top 5 de her\u00f3is mais escolhidos\")\n# Create labels\nlabel = a['qtd_pick']\n# Text on the top of each barplot\nfor i in range(len(a['qtd_pick'])):\n    plt.text(x = i-.25 , y = a['qtd_pick'][i]-500, s = label[i], size = 32, color='w')\n#plt.ylabel(\"Her\u00f3i\/ Vers\u00e3o do jogo(patch)\")\nplt.xlabel(\"Quantidade de partidas\")\nplt.tick_params()\nplt.xticks( size = 16)\nplt.yticks([])\nplt.tick_params(axis='both', which='both', bottom=False, top=False,\n                labelbottom=True, left=False, right=False, labelleft=False)\nplt.show()","a052c120":"cmap = ListedColormap(cores)\n\nhero_var['localized_name'] = hero_var['localized_name'].str.upper()\nfrequencies = hero_var.groupby('localized_name').count()\n\nwordcloud = WordCloud(width = 1000, height = 500, background_color = 'white',max_words=100, colormap = cmap).generate_from_frequencies(frequencies['is_pick'])\nplt.figure(figsize=(18,10))\nplt.title('Her\u00f3is mais escolhidos')\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.savefig(\"heroes_pick.png\", bbox_inches='tight')\nplt.show()","46f5a0a5":"# Cria\u00e7\u00e3o de uma vari\u00e1vel que identifique se o her\u00f3i venceu a partida\nhero_var['hero_win']=0\nhero_var['hero_win'].loc[(hero_var['is_pick']==True) & (hero_var['team']== 0) & (hero_var['radiant_win']==True)]=1\nhero_var['hero_win'].loc[(hero_var['is_pick']==True) & (hero_var['team']== 1) & (hero_var['radiant_win']==False)]=1","409378c6":"# Cria\u00e7\u00e3o de vari\u00e1veis m\u00e9dias por heroi\nhero_var['win_rate'] = hero_var['hero_win']\n\nhero_var = hero_var.pivot_table(values =['assists','barracks_status_dire', 'barracks_status_radiant', 'deaths',\n                                          'dire_score', 'duration', 'hero_win', 'win_rate', 'is_pick', 'kills', 'last_hits', \n                                          'legs', 'negative_votes', 'positive_votes', 'radiant_score',\n                                          'tower_status_dire','tower_status_radiant'],\n                                index=['hero_id', 'localized_name', 'patch'],\n                                aggfunc= {'is_pick':'count',\n                                          'hero_win': 'sum',\n                                          'assists': 'mean',\n                                          'barracks_status_dire': 'mean', \n                                          'barracks_status_radiant': 'mean', \n                                          'deaths': 'mean',\n                                          'dire_score': 'mean',\n                                          'duration': 'mean',\n                                          'win_rate': 'mean',\n                                          'kills': 'mean',\n                                          'last_hits': 'mean',\n                                          'legs': 'mean',\n                                          'negative_votes': 'mean',\n                                          'positive_votes': 'mean',\n                                          'radiant_score': 'mean',\n                                          'tower_status_dire': 'mean',\n                                          'tower_status_radiant': 'mean'}).reset_index()\nhero_var.sample(10)","b1d28271":"f, ax = plt.subplots(ncols= 2)\nax[0].hist(hero_var['is_pick'], color = random.choice(cores), bins = 50)\nax[0].set_title('Distribui\u00e7\u00e3o da quantidade de escolhas por her\u00f3i (is_pick)')\nax[1].hist(hero_var['win_rate'], color = random.choice(cores), bins = 50)\nax[1].set_title('Distribui\u00e7\u00e3o da m\u00e9dia de vit\u00f3rias (win_mean)')\nplt.rcParams['figure.figsize'] = (18,5)\nplt.show()","aa7e7297":"plt.scatter(hero_var['is_pick'], hero_var['win_rate'], c = random.choice(cores), edgecolors=random.choice(cores))\nplt.title('Distribui\u00e7\u00e3o de quantidade de escolha (is_pick) por taxa de vit\u00f3rias (win_rate)')\nplt.xlabel('Quantidade de escolhas (is_pick)')\nplt.axvline(10, color='red')\nplt.axhline(0.5, color='blue')\nplt.ylabel('Taxa de vit\u00f3rias(win_rate)')\nplt.rcParams['figure.figsize'] = (18,5)\nplt.show()","3d0776d2":"# Exclus\u00e3o de win_rates de her\u00f3is com poucos jogos (menores ou iguais a 10)\nhero_var['win_rate'].loc[(hero_var['is_pick']<=10)] = 0","43bf38fd":"a = hero_var.sort_values('hero_win', ascending = False).head(15)\na = a.sort_values('hero_win')\n\nplt.rcParams['figure.figsize'] = (15,8)\nplt.barh(a['localized_name']+ ' - ' + a['patch'].astype('str'), a['hero_win'], color = random.choice(cores))\nplt.title(\"Top 15 de her\u00f3is mais vit\u00f3riosos por vers\u00e3o\")\nplt.ylabel(\"Her\u00f3i\/ Vers\u00e3o do jogo(patch)\")\nplt.xlabel(\"Quantidade de vit\u00f3rias\")\nplt.show()","f2a862b9":"a = hero_var.sort_values('win_rate', ascending = True).tail(15)\n\nplt.rcParams['figure.figsize'] = (15,8)\nplt.barh(a['localized_name']+ ' - ' + a['patch'].astype('str'), a['win_rate'], color = random.choice(cores))\nplt.title(\"Top 15 de her\u00f3is por win_rate\")\nplt.ylabel(\"Her\u00f3i\/ Vers\u00e3o do jogo(patch)\")\nplt.xlabel(\"Taxa de sucesso (win_rate) de her\u00f3is com mais de 10 partidas jogadas\")\nplt.show()","32c9ee34":"matches_train = matches[~matches['match_id'].isin(match_valid)]\nmatches_valid = matches[matches['match_id'].isin(match_valid)]\npicks_bans_train = picks_bans[~picks_bans['match_id'].isin(match_valid)]\npicks_bans_valid = picks_bans[picks_bans['match_id'].isin(match_valid)]\nplayer_matches_train = player_matches[~player_matches['match_id'].isin(match_valid)]\nplayer_matches_valid = player_matches[player_matches['match_id'].isin(match_valid)]\n\nprint('matches: ', matches_train.shape, matches_valid.shape)\nprint('picks_bans: ', picks_bans_train.shape, picks_bans_valid.shape)\nprint('picks_bans n\u00famero de partidas: ', picks_bans_train['match_id'].nunique(), picks_bans_valid['match_id'].nunique())\nprint('player_matches n\u00famero de partidas: ', player_matches_train['match_id'].nunique(), player_matches_valid['match_id'].nunique())","96aad67c":"hero_var = pd.merge(picks_bans_train[picks_bans_train['is_pick']==True], matches_train, left_on = ['match_id'], right_on = ['match_id'], how = 'left')\nhero_var= pd.merge(hero_var, player_matches_train, left_on = ['match_id','hero_id'], right_on = ['match_id','hero_id'], how = 'left')\nhero_var= pd.merge(hero_var, heroes, left_on = ['hero_id'], right_on = ['hero_id'], how = 'left')\nhero_var= pd.merge(hero_var, match_patch, left_on = ['match_id'], right_on = ['match_id'], how = 'left')","fef9ebb6":"# Cria\u00e7\u00e3o de uma vari\u00e1vel que identifique se o her\u00f3i venceu a partida\nhero_var['hero_win']=0\nhero_var['hero_win'].loc[(hero_var['is_pick']==True) & (hero_var['team']== 0) & (hero_var['radiant_win']==True)]=1\nhero_var['hero_win'].loc[(hero_var['is_pick']==True) & (hero_var['team']== 1) & (hero_var['radiant_win']==False)]=1","79768d8e":"# Cria\u00e7\u00e3o de vari\u00e1veis m\u00e9dias por heroi\nhero_var['win_rate'] = hero_var['hero_win']\n\nhero_var = hero_var.pivot_table(values =['assists','barracks_status_dire', 'barracks_status_radiant', 'deaths',\n                                          'dire_score', 'duration', 'hero_win', 'win_rate', 'is_pick', 'kills', 'last_hits', \n                                          'legs', 'negative_votes', 'positive_votes', 'radiant_score',\n                                          'tower_status_dire','tower_status_radiant'],\n                                index=['hero_id', 'localized_name', 'patch'],\n                                aggfunc= {'is_pick':'count',\n                                          'hero_win': 'sum',\n                                          'assists': 'mean',\n                                          'barracks_status_dire': 'mean', \n                                          'barracks_status_radiant': 'mean', \n                                          'deaths': 'mean',\n                                          'dire_score': 'mean',\n                                          'duration': 'mean',\n                                          'win_rate': 'mean',\n                                          'kills': 'mean',\n                                          'last_hits': 'mean',\n                                          'legs': 'mean',\n                                          'negative_votes': 'mean',\n                                          'positive_votes': 'mean',\n                                          'radiant_score': 'mean',\n                                          'tower_status_dire': 'mean',\n                                          'tower_status_radiant': 'mean'}).reset_index()\nhero_var.sample(10)","9ef79d0e":"radiant = picks_bans[(picks_bans['is_pick']==True)&(picks_bans['team']==0)].sort_values(['match_id', 'hero_id'])\ndire = picks_bans[(picks_bans['is_pick']==True)&(picks_bans['team']==1)].sort_values(['match_id', 'hero_id'])","20573e33":"picks_radiant = ['pick_radiant_1', 'pick_radiant_2', 'pick_radiant_3', 'pick_radiant_4', 'pick_radiant_5']\nfor i in range(0, 5):\n    picks_radiant[i] = radiant[i::5][['match_id','hero_id']]\n    \npicks_dire = ['pick_dire_1', 'pick_dire_2', 'pick_dire_3', 'pick_dire_4', 'pick_dire_5']\nfor i in range(0, 5):\n    picks_dire[i] = dire[i::5][['match_id','hero_id']]","217a01fa":"matches_radiant = matches\na = 1\nfor i in picks_radiant:\n    matches_radiant = pd.merge(matches_radiant, i, left_on =['match_id'], right_on = ['match_id'], how='left')\n    matches_radiant['team'] = 0\n    matches_radiant.rename(columns={'hero_id': 'pick_'+ str(a)}, inplace=True)     \n    a = a +1\nmatches_radiant = matches_radiant.drop(['tower_status_dire', 'barracks_status_dire', 'dire_score'], axis = 1)\nmatches_radiant.rename(columns={'tower_status_radiant': 'tower_status',\n                                'barracks_status_radiant': 'barracks_status',\n                                'radiant_score': 'score'}, inplace=True) \n\nmatches_dire = matches\na = 1\nfor i in picks_dire:\n    matches_dire = pd.merge(matches_dire, i, left_on =['match_id'], right_on = ['match_id'], how='left')\n    matches_dire.rename(columns={'hero_id': 'pick_'+ str(a)}, inplace=True)\n    matches_dire['team'] = 1\n    matches_dire.rename(columns={'hero_id': 'pick_'+ str(a)}, inplace=True)     \n    a = a +1\nmatches_dire = matches_dire.drop(['tower_status_radiant', 'barracks_status_radiant', 'radiant_score'], axis = 1)\nmatches_dire.rename(columns={'tower_status_dire': 'tower_status',\n                             'barracks_status_dire': 'barracks_status',\n                             'dire_score': 'score'}, inplace=True) \n    \nprint(matches_radiant.shape, matches_dire.shape)","97193d22":"df = matches_radiant.append(matches_dire).sort_values('match_id')","d5e49c78":"df['win'] = 0\ndf['win'].loc[(df['team']== 0) & (df['radiant_win']==True)]=1\ndf['win'].loc[(df['team']== 1) & (df['radiant_win']==False)]=1","4f91a6b5":"df = pd.merge(df, match_patch, left_on =['match_id'], right_on = ['match_id'], how='left')\ndf = pd.merge(df, hero_var, left_on =['pick_1', 'patch'], right_on = ['hero_id', 'patch'], how='left', suffixes = ('', '_mean1'))\ndf = pd.merge(df, hero_var, left_on =['pick_2', 'patch'], right_on = ['hero_id', 'patch'], how='left', suffixes = ('', '_mean2'))\ndf = pd.merge(df, hero_var, left_on =['pick_3', 'patch'], right_on = ['hero_id', 'patch'], how='left', suffixes = ('', '_mean3'))\ndf = pd.merge(df, hero_var, left_on =['pick_4', 'patch'], right_on = ['hero_id', 'patch'], how='left', suffixes = ('', '_mean4'))\ndf = pd.merge(df, hero_var, left_on =['pick_5', 'patch'], right_on = ['hero_id', 'patch'], how='left', suffixes = ('', '_mean5'))","6518d47b":"#Preenchimento de dados nulos\n#Como todas as v\u00e1ri\u00e1veis s\u00e3o positivas, utilizamos um valor negativo, para a identifica\u00e7\u00e3o caso seja preciso.\nfor c in df.columns:\n    df[c].fillna(-1, inplace=True)","142161d0":"# Remo\u00e7\u00e3o de vari\u00e1veis de tipo object\n# Neste modelo estas vari\u00e1veis possuem inumeros registros, o que inviabiliza a \"dumifica\u00e7\u00e3o\"\nobjeto = df.select_dtypes(include='object').columns\nfor c in objeto:\n    df = df.drop(c, axis =1)\n    #df[c]=df[c].astype('str')\n    #df[c]=df[c].astype('category').cat.codes","4e6f087d":"train = df[~df['match_id'].isin(match_valid)]\nvalid = df[df['match_id'].isin(match_valid)]\n\nprint(train.shape, valid.shape)\nprint('N\u00famero de partidas: ', train['match_id'].nunique(), valid['match_id'].nunique())","73752983":"feats = [c for c in df.columns if c not in ['win','radiant_win', 'match_id', 'hero_win']]\n\nfeats = [c for c in feats if c not in ['start_time', 'duration','tower_status', 'barracks_status',\n        'lobby_type', 'human_players', 'leagueid','positive_votes', 'negative_votes', \n        'engine', 'version','score']]","ea878f51":"models = {'RandomForestClassifier': RandomForestClassifier(random_state=42),\n          'RandomForestRegressor': RandomForestRegressor(random_state=42),\n          'ExtraTrees': ExtraTreesRegressor(random_state=42),\n          'GradientBoostingRegressor':GradientBoostingRegressor(random_state=42),\n          'GradientBoostingClassifier':GradientBoostingClassifier(random_state=42),\n          'XGB': xgb.XGBRegressor(objective ='binary:logistic', colsample_bytree = 0.3, learning_rate = 0.1, max_depth = 5, alpha = 10, n_estimators = 10),\n          'DecesionTree':DecisionTreeRegressor(random_state=42),\n          'LinearRegression': LinearRegression(),\n          'LogisticRegression': LogisticRegression(random_state=42),\n          'AdaBoost': AdaBoostRegressor(random_state=42),\n          'KNN1': KNeighborsRegressor(n_neighbors=1),\n          'KNN3': KNeighborsRegressor(n_neighbors=3),\n          'KNN11': KNeighborsRegressor(n_neighbors=11),\n          'MLPClassifier': MLPClassifier(hidden_layer_sizes=(30, 30, 30), max_iter=1000)}","aaaa07a2":"def run_model(model, train, valid, feats, y_name):\n    model.fit(train[feats], train[y_name])\n    preds = model.predict(valid[feats])\n    preds[preds>0.5] = 1\n    preds[preds==0.5] = 1\n    preds[preds<0.5] = 0\n    return accuracy_score(valid[y_name], preds)","8ff4485a":"scores = []\nnames = []\nfor name, model in models.items():\n    score = run_model(model, train, valid, feats, 'win')\n    scores.append(score)\n    names.append(name)    \nmodel_acuracy = pd.DataFrame(names, columns = ['model'])\nmodel_acuracy['score'] = pd.DataFrame(scores)\nmodel_acuracy = model_acuracy.sort_values('score', ascending = False).reset_index( drop = True)\nmodel_acuracy","6827adbc":"def evaluate(model, test_features, test_labels):\n    predictions = model.predict(test_features)\n    errors = abs(predictions - test_labels)\n    mape = 100 * np.mean(errors \/ test_labels)\n    accuracy = 100 - mape\n    print('Model Performance')\n    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n    print('Accuracy = {:0.2f}%.'.format(accuracy))\n    \n    return accuracy","f3b29adb":"model = GradientBoostingRegressor(random_state=42)\nmodel.fit(train[feats], train['win'])\n\npreds = model.predict(valid[feats])\npreds[preds>=0.5] = 1\npreds[preds<0.5] = 0\ngbr_accuracy = accuracy_score(valid['win'], preds)\nprint('Gradient Boosting Regressor')\nprint()\nprint('Accuracy Score :',gbr_accuracy)\nprint()\nprint('Report:')\nprint(classification_report(valid['win'], preds))\n\nplt.rcParams['figure.figsize'] = (9,3)\nsns.heatmap(confusion_matrix(valid['radiant_win'], preds), annot = True, fmt=\"d\", cmap = cores2)\nplt.title('Matriz de Confus\u00e3o')\nplt.show()\n\nplt.rcParams['figure.figsize'] = (15,8)\npd.Series(model.feature_importances_, index=feats).sort_values().tail(15).plot.barh(color=cores2)\nplt.title('Feature Importances - Top 15')\nplt.show()","5ab4ce3d":"model = GradientBoostingClassifier(random_state=42)\nmodel.fit(train[feats], train['win'])\n\npreds = model.predict(valid[feats])\npreds[preds>=0.5] = 1\npreds[preds<0.5] = 0\ngbr_accuracy = accuracy_score(valid['win'], preds)\nprint('Gradient Boosting Classifier')\nprint()\nprint('Accuracy Score :',gbr_accuracy)\nprint()\nprint('Report:')\nprint(classification_report(valid['win'], preds))\n\nplt.rcParams['figure.figsize'] = (9,3)\nsns.heatmap(confusion_matrix(valid['radiant_win'], preds), annot = True, fmt=\"d\", cmap = cores2)\nplt.title('Matriz de Confus\u00e3o')\nplt.show()\n\nplt.rcParams['figure.figsize'] = (15,8)\npd.Series(model.feature_importances_, index=feats).sort_values().tail(15).plot.barh(color=cores2)\nplt.title('Feature Importances - Top 15')\nplt.show()","5cd35c19":"Tratamento de dados: picks_bans","f521e880":"Tratamento de dados: Matches","661bdcd4":"Visualiza\u00e7\u00e3o: matches","65e78e39":"Prepara\u00e7\u00e3o do modelo","8f341934":"Tratamento dos dados: player_matches","fbc25285":"Cria\u00e7\u00e3o do dataset principal","21be0270":"### Cria\u00e7\u00e3o das vari\u00e1veis m\u00e9dias dos her\u00f3is de Treino\nComo essas vari\u00e1veis s\u00e3o conhecidas somente ap\u00f3s o t\u00e9rmino da partida, n\u00e3o utilizaremos as partidas de valida\u00e7\u00e3o em sua composi\u00e7\u00e3o","8b75bd24":"Configura\u00e7\u00f5es","caa32b32":"### Cria\u00e7\u00e3o e visualiza\u00e7\u00e3o das vari\u00e1veis m\u00e9dias dos her\u00f3is","a99d5a7c":"Tratamento de dados: match_patch","9bc1be45":"Importa\u00e7\u00e3o de bibliotecas","3ccb1798":"### Tratamento e visualiza\u00e7\u00e3o de dados","90fbbecb":"Tratamento de dados: heroes","9c1d8e41":"Importa\u00e7\u00e3o das bases de dados","e465a0d9":"Defini\u00e7\u00e3o das partidas de amostra de valida\u00e7\u00e3o","e9bb5ca3":"Defini\u00e7\u00e3o dos melhores modelos"}}