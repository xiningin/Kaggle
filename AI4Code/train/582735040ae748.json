{"cell_type":{"b7135f49":"code","e3811ab2":"code","bfdc0af2":"code","2f795855":"code","50e6443f":"code","1cb25e9c":"code","e284ec07":"code","028a3986":"code","c958fca5":"code","9ea73212":"markdown","d6e63dca":"markdown","fb9c05bc":"markdown","309bc0e0":"markdown","4b53f444":"markdown","fdffb6b2":"markdown","7eec5c42":"markdown","727a7327":"markdown","4f0acd0c":"markdown","90f27344":"markdown","a6a9ba1c":"markdown","91ea1038":"markdown","29046a2d":"markdown","2a33209f":"markdown","03913d88":"markdown","aeb1d517":"markdown"},"source":{"b7135f49":"import umap\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.figure(figsize=(20,10))","e3811ab2":"kannada_train = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")","bfdc0af2":"kannada_train_sampled = kannada_train.sample(n = 10000, random_state = 123)","2f795855":"kannada_train_sampled.groupby('label')['label'].count()","50e6443f":"\nimage = np.array(kannada_train_sampled.iloc[2,1:785], dtype='float')\npixels = image.reshape((28, 28))\nplt.imshow(pixels, cmap='gray')\nplt.title(kannada_train_sampled.iloc[2,0])\nplt.show()","1cb25e9c":"data = kannada_train_sampled.iloc[:, 1:].values.astype(np.float32)\ntarget = kannada_train_sampled['label'].values","e284ec07":"%time reduce = umap.UMAP(random_state = 123) #just for reproducibility\n%time  embedding = reduce.fit_transform(data)","028a3986":"df = pd.DataFrame(embedding, columns=('x', 'y'))\ndf[\"class\"] = target\n","c958fca5":"plt.scatter(df.x, df.y, s= 5, c=target, cmap='Spectral')\nplt.colorbar(boundaries=np.arange(11)-0.5).set_ticks(np.arange(10))\nplt.title('Kannada MNIST clustered (dimensions reduced - Visulization) with UMAP', fontsize=20);\n","9ea73212":"### UMAP() function for dimensionality reduction. \n\n`UMAP()` takes other hyperparameters like \n\n    n_neighbors\n    min_dist\n    n_components\n    metric\n\nby default, `n_components` is set to 2 which makes the reduced dimension into 2","d6e63dca":"The objective of this notebook is to show how one of the fastest dimensionality reduction techniques UMAP (which is also a great tSNE alternative) groups similar digits of Kannada MNIST dataset. \n\nAs we know before, the dataset is an MNIST-like dataset with first column as label and 784 (28 x 28) pixel values","fb9c05bc":"### UMAP\n\nUniform Manifold Approximation and Projection (UMAP) is a dimension reduction technique that can be used for visualisation similarly to t-SNE, but also for general non-linear dimension reduction.","309bc0e0":"`random_state` parameter is set for reproducibility\n","4b53f444":"### Kannada MNIST clustered (dimensions reduced - Visulization) with UMAP","fdffb6b2":"### Converting the output embedding into a dataframe \n### And, Renaming the columns in it for easier access","7eec5c42":"### Visualizing a sample digit","727a7327":"Adding the target column for visualization labelling","4f0acd0c":"### Read Training dataset","90f27344":"A simple scatter plot with x and y, color from target label","a6a9ba1c":"### Reference\n\n+ [`umap` Python Package Github](https:\/\/github.com\/lmcinnes\/umap)\n+ [UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction](https:\/\/arxiv.org\/abs\/1802.03426)","91ea1038":"### Looking at the label distribution after random sampling","29046a2d":"### Loading required libraries starting from `umap` ","2a33209f":"As, we can see `UMAP` has done a pretty good job in identifying distinct groups in the dataset purely based on the dimensions \/ columns (pixel values).\n\nUMAP is definitely a good-fast alternative wherever you think tSNE could be useful. ","03913d88":"### To reduce the execution time for learning purpose, We'll take only 10K rows randomly sampled out of 60K rows from the training dataset","aeb1d517":"Since we have just two dimensions, let's name it x and y"}}