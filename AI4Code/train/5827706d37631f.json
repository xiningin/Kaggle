{"cell_type":{"fc0eda66":"code","f8f29878":"code","3563fbf9":"code","9f34c81b":"code","7bbef06e":"code","b78a645a":"code","f053ebf5":"code","7809ebc0":"code","9c0a105e":"code","d00d40e0":"code","f004d22c":"code","16f7e626":"code","3e55d357":"code","a628e182":"code","1aa6e17f":"code","ea34eee9":"code","d4399494":"code","2d6d1621":"code","a515a472":"code","8fbe300a":"code","64f8b7c8":"code","0bbc7693":"code","e0cb5674":"code","433d994b":"code","9fd21006":"code","3d8ba2b2":"code","168bc785":"code","55260cad":"code","ed92a0ee":"code","c10e1769":"code","dc178878":"code","b8d0eeb4":"code","41665c24":"code","9cdfcb11":"code","329260b4":"code","3cfdf575":"code","696abf37":"code","3213d248":"code","6bd939b3":"code","e622b0fb":"code","7e627711":"code","e933c594":"code","a4f93b2c":"code","e4e1ca10":"code","1797ef94":"code","9b8c6393":"code","a5c2aa70":"code","de3ce5c8":"code","0d2f9717":"code","39a4d396":"code","5721deb1":"code","e4f9f51a":"code","31fbd286":"code","a303d552":"code","ade988ef":"code","6ab4bf22":"code","53bff591":"code","e5c49f9b":"code","9f4e9000":"code","f5ed1c76":"code","339da6a7":"code","10a17cd8":"code","1099ace6":"code","35df4292":"code","12918598":"code","2524f674":"code","6b8a8934":"code","48ce4d5b":"code","6b226eda":"code","2aa741c4":"code","264f1a43":"code","4ac24e81":"code","d2e337ce":"code","76c1f9a2":"code","80f3b371":"code","1285a1bf":"code","bf09f325":"code","f2663fed":"code","27feefc1":"code","5bb998e3":"code","61328486":"code","915b5f90":"code","58329561":"code","8cfaa193":"code","1b84b50a":"code","502ffad0":"code","c84898a6":"code","7ef9115a":"code","550a8d3c":"code","aae0aeb7":"code","c47507a2":"markdown","5ed10701":"markdown","5a86011f":"markdown","075d6771":"markdown","724aaf20":"markdown","0120013f":"markdown","cd80c5ff":"markdown","3210644f":"markdown","e13da216":"markdown","99bd402c":"markdown","7ebe3bbe":"markdown","5e3423eb":"markdown","4681da2d":"markdown","bf234942":"markdown","fac600d8":"markdown","1cf0eb04":"markdown","4fd3c822":"markdown","084c4d51":"markdown","2469cd37":"markdown","f7944a89":"markdown","0256a418":"markdown","0f5e393a":"markdown","67d86487":"markdown","c8d484b1":"markdown","e53e597c":"markdown","5051d9dc":"markdown","a7a82a78":"markdown","55c68b51":"markdown","5bc0dbf8":"markdown","2f00506c":"markdown","1266f52e":"markdown","5a8243bf":"markdown","e47a6fb9":"markdown","9fe9f7d6":"markdown","c01f774b":"markdown","c034cc13":"markdown","cc9021a9":"markdown","85910297":"markdown","c4fb61a7":"markdown","4e314819":"markdown","d9f02e77":"markdown","b04b060c":"markdown","2e00c781":"markdown","c70b908b":"markdown"},"source":{"fc0eda66":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme()\nsns.set_style('dark')\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectKBest, chi2, f_regression\nfrom scipy.stats import pearsonr\nfrom scipy import stats\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error","f8f29878":"url='https:\/\/raw.githubusercontent.com\/Praveen3ravi\/PROJECT\/main\/train-chennai-sale.csv'\ndf = pd.read_csv(url)\nprint(df.columns)\nprint('The total number of features:',df.shape[1])","3563fbf9":"df=df.drop(['PRT_ID','REG_FEE','COMMIS'],axis=1)","9f34c81b":"print(\"Total number of features in the data is:\",df.shape[1])\npd.DataFrame(df.dtypes.value_counts()).T","7bbef06e":"categorical_features = [x for x in df.columns \n                if not (df[x].dtype == np.float64 \n                        or df[x].dtype == np.int64)]\nprint(categorical_features)","b78a645a":"numerical_features=[x for x in df.columns if df[x].dtype==np.int64 or df[x].dtype==np.float64]\nprint(numerical_features)","f053ebf5":"print('The data has {} categorical features'.format(len(categorical_features)))\nprint('The data has {} numerical_features'.format(len(numerical_features)))","7809ebc0":"pd.DataFrame(df.isnull().sum()).T","9c0a105e":"# df['N_BEDROOM'].value_counts()         #1_BHK=3796; 2_BHK=2352; 3_BHK=707; 4_BHK=254;\n# df['N_BATHROOM'].value_counts()      # 1_BATHROOM is 5594; 2_BATHROOM is 1515\n# df['AREA'].value_counts()            #1.chrompet, 2.karapakam, 3.KK, 4.Velacherry, 5.Anna Nagar, 6.Adyar, 7.T Nagar.\n# df['QS_OVERALL'].value_counts() \n# df['SALE_COND'].value_counts()       #Equal.\n# df['PARK_FACIL'].value_counts()      # Equal.\n# df['UTILITY_AVAIL'].value_counts()   #NoSewer = 3700; AllPub = 1887; ELO = 1522;\n# df['STREET'].value_counts()          # More equally same.\n# df['AREA'].unique()\n# df['SALE_COND'].unique()\n# df['BUILDTYPE'].unique()\n# df['UTILITY_AVAIL'].unique()\n# df['STREET'].unique()\n# df['PARK_FACIL'].unique()\n# df['N_BEDROOM'].unique()\n# df['N_BATHROOM'].unique()\n# df['N_ROOM'].unique()\n# df[['N_BEDROOM','SALE_COND']].groupby('SALE_COND').count()","d00d40e0":"df['N_BEDROOM']=df['N_BEDROOM'].fillna(df['N_BEDROOM'].mean())\ndf['N_BATHROOM']=df['N_BATHROOM'].fillna(df['N_BATHROOM'].mean())\ndf['QS_OVERALL']=df['QS_OVERALL'].fillna(df['QS_OVERALL'].mean())\n\ndf['N_BEDROOM'] = np.floor(df['N_BEDROOM'])\ndf['N_BATHROOM'] = np.floor(df['N_BATHROOM'])","f004d22c":"pd.DataFrame(df.isnull().sum()).T","16f7e626":"df['PARK_FACIL'].replace(['Noo'],['No'],inplace=True)\ndf['STREET'].replace(['Pavd','NoAccess'],['Paved','No Access'],inplace=True)\ndf['UTILITY_AVAIL'].replace(['NoSewr ','NoSeWa','All Pub'],['No Sewer','No Sewer','AllPub'],inplace=True)\ndf['BUILDTYPE'].replace(['Comercial','Other'],['Commercial','Others'],inplace=True)\ndf['SALE_COND'].replace(['Ab Normal','Partiall','PartiaLl','Adj Land'],['AbNormal','Partial','Partial','AdjLand'],inplace=True)\ndf['AREA'].replace(['Ana Nagar','Ann Nagar','Karapakam','Chrompt','Chrmpet','Chormpet','Adyr','Velchery','KKNagar','TNagar'],\n['Anna Nagar','Anna Nagar','Karapakkam','Chrompet','Chrompet','Chrompet','Adyar','Velachery','KK Nagar','T Nagar'],\ninplace=True)","3e55d357":"# pd.DataFrame(df.isnull().sum()).T\ndf.info()","a628e182":"df['DATE_SALE']=pd.to_datetime(df['DATE_SALE'])\ndf['DATE_BUILD']=pd.to_datetime(df['DATE_BUILD'])\npd.DataFrame(df.dtypes.value_counts()).T","1aa6e17f":"df['BUILD_YEAR'] = df['DATE_BUILD'].dt.year\ndf['SALE_YEAR'] = df['DATE_SALE'].dt.year","ea34eee9":"df[\"SOLD_AGE\"]=df['SALE_YEAR']-df['BUILD_YEAR']","d4399494":"df.drop(['DATE_SALE','DATE_BUILD','NO. YEARS PASSED_FROM_SALE(2022-SALE_YEAR)','1+0.04','POWER(Z,Y)','CURRENT YEAR'],axis=1,inplace=True)","2d6d1621":"plt.figure(figsize=(25,15))\nprint('BEFORE INFLATION AND AFTER INFLATION.')\nplt.subplot(221)\nsns.lineplot(x = \"BUILD_YEAR\", y = df[\"SALES_PRICE\"].values, data = df,hue='AREA')\nplt.title('BUILD_YEAR vs SALES_PRICE')\nplt.subplot(222)\nsns.lineplot(x = \"BUILD_YEAR\", y = df[\"INF_PRICE\"].values, data = df,hue='AREA')\nplt.title('BUILD_YEAR vs INF_PRICE')\nplt.subplot(223)\nsns.lineplot(x = \"SALE_YEAR\", y = df[\"INF_PRICE\"].values, data = df,hue='AREA')\nplt.title('SALE_YEAR vs INF_PRICE')\nplt.subplot(224)\nsns.lineplot(x = \"SALE_YEAR\", y = df[\"SALES_PRICE\"].values, data = df,hue='AREA')\nplt.title('SALE_YEAR vs SALES_PRICE')\nplt.show()","a515a472":"plt.figure(figsize=(20,5))\nplt.subplot(221)\nsns.lineplot(x = \"SALE_YEAR\", y = df[\"SALES_PRICE\"], data = df)\nplt.title('SALE_YEAR vs SALES_PRICE')\nplt.subplot(222)\nsns.lineplot(x = \"SALE_YEAR\", y = df[\"INF_PRICE\"], data = df)\nplt.title('SALE_YEAR vs INF_PRICE')\nplt.show()","8fbe300a":"A=df['AREA'].groupby(df['AREA']).count()\nB=df['AREA'].groupby(df['BUILDTYPE']).count()\nC=df['AREA'].groupby(df['UTILITY_AVAIL']).count()\nD=df['AREA'].groupby(df['STREET']).count()\nE=df['AREA'].groupby(df['MZZONE']).count()\nF=df['AREA'].groupby(df['PARK_FACIL']).count()","64f8b7c8":"sns.set_theme(style=\"darkgrid\",palette=\"pastel\")\nplt.figure(figsize=(20,16))\nplt.subplot(231)\nsns.barplot(x=A.index,y=A.values,data=df)\nplt.xticks(rotation=15)\nplt.title('NO. OF HOUSES (AREA WISE)')\nplt.subplot(232)\nsns.barplot(x=B.index,y=B.values,data=df)\nplt.xticks(rotation=15)\nplt.title('NO. OF HOUSES (BUILDTYPE WISE)')\nplt.subplot(233)\nsns.barplot(x=C.index,y=C.values,data=df)\nplt.xticks(rotation=15)\nplt.title('NO. OF HOUSES (UTILITY_AVAIL WISE)')\nplt.subplot(234)\nsns.barplot(x=D.index,y=D.values,data=df)\nplt.xticks(rotation=15)\nplt.title('NO. OF HOUSES (STREET WISE)')\nplt.subplot(235)\nsns.barplot(x=E.index,y=E.values,data=df)\nplt.xticks(rotation=15)\nplt.title('NO. OF HOUSES (MZZONE)')\nplt.subplot(236)\nsns.barplot(x=F.index,y=F.values,data=df)\nplt.xticks(rotation=15)\nplt.title('NO. OF HOUSES (PARK_FACILITY)')\nplt.show()","0bbc7693":"sns.set_theme(style=\"darkgrid\",palette=\"pastel\")\nplt.figure(figsize=(20,16))\nplt.subplot(231)\nsns.barplot(x='AREA',y='SALES_PRICE',data=df,order=df.groupby('AREA')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['AREA'])\nplt.xticks(rotation=15)\nplt.title('MEAN SALES_PRICE (AREA WISE)')\nplt.subplot(232)\nsns.barplot(x='BUILDTYPE',y='SALES_PRICE',data=df,order=df.groupby('BUILDTYPE')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['BUILDTYPE'])\nplt.xticks(rotation=15)\nplt.title('MEAN SALES_PRICE (BUILDTYPE WISE)')\nplt.subplot(233)\nsns.barplot(x='UTILITY_AVAIL',y='SALES_PRICE',data=df,order=df.groupby('UTILITY_AVAIL')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['UTILITY_AVAIL'])\nplt.xticks(rotation=15)\nplt.title('MEAN SALES_PRICE (UTILITY_AVAIL WISE)')\nplt.subplot(234)\nsns.barplot(x='STREET',y='SALES_PRICE',data=df,order=df.groupby('STREET')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['STREET'])\nplt.xticks(rotation=15)\nplt.title('MEAN SALES_PRICE (STREET WISE)')\nplt.subplot(235)\nsns.barplot(x='PARK_FACIL',y='SALES_PRICE',data=df)\nplt.xticks(rotation=15)\nplt.title('MEAN SALES_PRICE (PARK_FACIL)')\nplt.subplot(236)\nsns.barplot(x='MZZONE',y='SALES_PRICE',data=df)\nplt.xticks(rotation=15)\nplt.title('MEAN SALES_PRICE (MZZONE)')\nplt.show()","e0cb5674":"df.columns","433d994b":"plt.figure(figsize=(17,5))\nplt.subplot(121)\nsns.lineplot(x=df['AREA'],y=df['SALES_PRICE'])\nplt.title('Finding is there an order in AREA vs SALES_PRICE')\nplt.subplot(122)\nsns.barplot(x='AREA',y='SALES_PRICE',data=df,order=df.groupby('AREA')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['AREA'])\nplt.title('Finding is there an order in AREA vs SALES_PRICE')\nplt.show()","9fd21006":"plt.figure(figsize=(17,5))\nplt.subplot(121)\nsns.lineplot(x=df['BUILDTYPE'],y=df['SALES_PRICE'])\nplt.title('Finding is there an order in BUILDTYPE vs SALES_PRICE')\nplt.subplot(122)\nsns.barplot(x='BUILDTYPE',y='SALES_PRICE',data=df,order=df.groupby('BUILDTYPE')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['BUILDTYPE'])\nplt.title('Finding is there an order in BUILDTYPE vs SALES_PRICE')\nplt.show()","3d8ba2b2":"plt.figure(figsize=(17,8))\nplt.subplot(121)\nsns.lineplot(x=df['UTILITY_AVAIL'],y=df['SALES_PRICE'])\nplt.title('Finding is there an order in UTILITY_AVAIL vs SALES_PRICE')\nplt.subplot(122)\nsns.barplot(x='UTILITY_AVAIL',y='SALES_PRICE',data=df,order=df.groupby('UTILITY_AVAIL')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['UTILITY_AVAIL'])\nplt.title('Finding is there an order in UTILITY_AVAIL vs SALES_PRICE')\nplt.show()","168bc785":"plt.figure(figsize=(17,8))\nplt.subplot(121)\nsns.lineplot(x=df['MZZONE'],y=df['SALES_PRICE'])\nplt.title('Finding is there an order in MZZONE vs SALES_PRICE')\nplt.subplot(122)\nsns.barplot(x='MZZONE',y='SALES_PRICE',data=df,order=df.groupby('MZZONE')['SALES_PRICE'].mean().reset_index().sort_values('SALES_PRICE')['MZZONE'])\nplt.title('Finding is there an order in MZZONE vs SALES_PRICE')\nplt.show()","55260cad":"sns.pairplot(df,x_vars=[\"INT_SQFT\", \"SOLD_AGE\",\"SALE_YEAR\",\"BUILD_YEAR\"], y_vars=[\"SALES_PRICE\"],\n             height=5,aspect=.8, kind=\"reg\")\nplt.show()","ed92a0ee":"sns.pairplot(df,x_vars=[\"QS_ROOMS\", \"QS_BATHROOM\",\"QS_BEDROOM\",\"QS_OVERALL\"], y_vars=[\"SALES_PRICE\"],\n             height=5, aspect=.8, kind=\"reg\")\nplt.show()","c10e1769":"sns.pairplot(df,x_vars=[\"N_BEDROOM\", \"N_BATHROOM\",\"N_ROOM\"], y_vars=[\"SALES_PRICE\"],\n             height=5, aspect=.8, kind=\"reg\")\nplt.show()","dc178878":"#----------------------------------------\n#BUILDTYPE WISE MIN.AVG.MAX Sales_Prices:-\n#----------------------------------------\nbuildtype_fltr_C = df['BUILDTYPE']=='Commercial'\ncommercial=df.loc[buildtype_fltr_C]\nmin = commercial['SALES_PRICE'].min()\nmean= commercial['SALES_PRICE'].mean()\nmedian = commercial['SALES_PRICE'].median()\nmax = commercial['SALES_PRICE'].max()\nindex=['Minimun_Sales_Price','Average_Sales_Price','Median_Sales_Price','Maximum_Sales_Price']\ncomm = pd.DataFrame([min,mean,median,max],columns=['Commercial'],index=index)\n\nbuildtype_fltr_H = df['BUILDTYPE']=='House'\nHouse=df.loc[buildtype_fltr_H]\nmin = House['SALES_PRICE'].min()\nmean= House['SALES_PRICE'].mean()\nmedian = House['SALES_PRICE'].median()\nmax = House['SALES_PRICE'].max()\nhouse = pd.DataFrame([min,mean,median,max],columns=['House'],index=index)\n\nbuildtype_fltr_O = df['BUILDTYPE']=='Others'\nOthers=df.loc[buildtype_fltr_O]\nmin = Others['SALES_PRICE'].min()\nmean= Others['SALES_PRICE'].mean()\nmedian = Others['SALES_PRICE'].median()\nmax = Others['SALES_PRICE'].max()\nothers = pd.DataFrame([min,mean,median,max],columns=['Others'],index=index)\n\nBuild_type_mmm = pd.concat([comm,house,others],axis=1)\nBuild_type_mmm = pd.DataFrame(Build_type_mmm.T)\nBuild_type_mmm[\"Build_type\"]=[\"Commercial\",\"House\",\"Others\"]","b8d0eeb4":"plt.figure(figsize=(15,12))\nplt.subplot(221)\nsns.barplot(x=\"Build_type\",y=\"Minimun_Sales_Price\",data=Build_type_mmm)\nplt.title('BUILD_TYPE vs MINIMUM_SALE_PRICE')\nplt.subplot(222)\nsns.barplot(x=\"Build_type\",y=\"Average_Sales_Price\",data=Build_type_mmm)\nplt.title('BUILD_TYPE vs AVERAGE_SALE_PRICE')\nplt.subplot(223)\nsns.barplot(x=\"Build_type\",y=\"Median_Sales_Price\",data=Build_type_mmm)\nplt.title('BUILD_TYPE vs MEDIAN_SALE_PRICE')\nplt.subplot(224)\nsns.barplot(x=\"Build_type\",y=\"Maximum_Sales_Price\",data=Build_type_mmm)\nplt.title('BUILD_TYPE vs MAXIMUM_SALE_PRICE')\nplt.show()","41665c24":"#----------------------------\n#AREA WISE MIN.AVG.MAX Sales_Prices:-\n#----------------------------\nmean=df.groupby('AREA')['SALES_PRICE'].mean()\nmean_=mean.values\nmax=df.groupby('AREA')['SALES_PRICE'].max()\nmax_=max.values\nmin=df.groupby('AREA')['SALES_PRICE'].min()\nmin_=min.values\nmedian=df.groupby('AREA')['SALES_PRICE'].median()\nmedian_=min.values\nArea_mmm=pd.DataFrame([min_,mean_,median_,max_],columns=mean.index,index=['Minimun_Sales_Price','Average_Sales_Price','Median_Sales_Price','Maximum_Sales_Price']).T\nArea_mmm[\"AREA\"]=[\"Adyar\",\"Anna Nagar\",\"Chrompet\",\"KK Nagar\",\"Karapakam\",\"T Nagar\",\"Velachery\"]","9cdfcb11":"plt.figure(figsize=(18,12))\nplt.subplot(221)\nsns.barplot(x='AREA',y='Minimun_Sales_Price',data=Area_mmm)\nplt.title('AREA vs MINIMUM_SALE_PRICE')\nplt.subplot(222)\nsns.barplot(x='AREA',y='Average_Sales_Price',data=Area_mmm)\nplt.title('AREA vs AVERAGE_SALE_PRICE')\nplt.subplot(223)\nsns.barplot(x='AREA',y='Median_Sales_Price',data=Area_mmm)\nplt.title('AREA vs MEDIAN_SALE_PRICE')\nplt.subplot(224)\nsns.barplot(x='AREA',y='Maximum_Sales_Price',data=Area_mmm)\nplt.title('AREA vs MAXIMUM_SALE_PRICE')\nplt.show()","329260b4":"mean=pd.DataFrame(df[['AREA', 'BUILDTYPE','SALES_PRICE']].groupby(['BUILDTYPE','AREA'])['SALES_PRICE'].mean())\nmedian=pd.DataFrame(df[['AREA', 'BUILDTYPE','SALES_PRICE']].groupby(['BUILDTYPE','AREA'])['SALES_PRICE'].median())\nmax=pd.DataFrame(df[['AREA', 'BUILDTYPE','SALES_PRICE']].groupby(['BUILDTYPE','AREA'])['SALES_PRICE'].max())\nmin=pd.DataFrame(df[['AREA', 'BUILDTYPE','SALES_PRICE']].groupby(['BUILDTYPE','AREA'])['SALES_PRICE'].min())","3cfdf575":"mmm_df = pd.concat([min,mean['SALES_PRICE'].rename('Average'),median['SALES_PRICE'].rename('Median'),max['SALES_PRICE'].rename('Maximum')],axis=1)\ncolumn =['Minimum','Average','Median','Maximum']\nmmm__df = pd.DataFrame(mmm_df)\nmmm__df.rename(columns={'SALES_PRICE':'Minimum'},inplace=True)\nmmm__df['BUILDTYPE']=['Commercial','Commercial','Commercial','Commercial','Commercial','Commercial','Commercial',\n                      'House','House','House','House','House','House','House',\n                      'Others','Others','Others','Others','Others','Others','Others']\nmmm__df['AREA']=[\"Adyar\",\"Anna Nagar\",\"Chrompet\",\"KK Nagar\",\"Karapakam\",\"T Nagar\",\"Velachery\",\n                 \"Adyar\",\"Anna Nagar\",\"Chrompet\",\"KK Nagar\",\"Karapakam\",\"T Nagar\",\"Velachery\",\n                 \"Adyar\",\"Anna Nagar\",\"Chrompet\",\"KK Nagar\",\"Karapakam\",\"T Nagar\",\"Velachery\"]","696abf37":"plt.figure(figsize=(18,5))\nsns.barplot(x='AREA',y='Minimum',data=mmm__df,hue='BUILDTYPE')\nplt.title('MINIMUM SALES PRICE OF EACH BUILDTYPE AND AREA')\nplt.show()","3213d248":"plt.figure(figsize=(18,5))\nsns.barplot(x='AREA',y='Average',data=mmm__df,hue='BUILDTYPE')\nplt.title('AVERAGE SALES PRICE OF EACH BUILDTYPE AND AREA')\nplt.show()","6bd939b3":"plt.figure(figsize=(18,5))\nsns.barplot(x='AREA',y='Maximum',data=mmm__df,hue='BUILDTYPE')\nplt.title('MAXIMUM SALES PRICE OF EACH BUILDTYPE AND AREA')\nplt.show()","e622b0fb":"df.head(2)","7e627711":"pd.DataFrame(df.dtypes.value_counts()).T","e933c594":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","a4f93b2c":"df['PARK_FACIL']=le.fit_transform(df['PARK_FACIL'])\ndf['AREA']=le.fit_transform(df['AREA'])\ndf['BUILDTYPE']=le.fit_transform(df['BUILDTYPE'])\ndf['SALE_COND']=le.fit_transform(df['SALE_COND'])\ndf['UTILITY_AVAIL']=le.fit_transform(df['UTILITY_AVAIL'])\ndf['STREET']=le.fit_transform(df['STREET'])\ndf['MZZONE']=le.fit_transform(df['MZZONE'])","e4e1ca10":"df.head()","1797ef94":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectKBest, chi2, f_regression\nfrom scipy.stats import pearsonr","9b8c6393":"X=df.drop(['SALES_PRICE','INF_PRICE'],axis=1)\ny=df['SALES_PRICE']","a5c2aa70":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=1)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","de3ce5c8":"import seaborn as sns\n#Using Pearson Correlation\nplt.figure(figsize=(18,10))\ncor = X_train.corr()\nsns.heatmap(cor, annot=True,cmap='RdYlGn')\nplt.show()","0d2f9717":"def correlation(dataset, threshold):\n    col_corr = set()  # Set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold: # we are use absolute() to even focus on -ve coeff value\n                colname = corr_matrix.columns[i]  # getting the name of column\n                col_corr.add(colname)\n    return col_corr","39a4d396":"corr_features = correlation(X_train, 0.8)\nlen(set(corr_features))\nprint('This column are highly correlated with another column:',corr_features)","5721deb1":"cwf_train=X_train.drop(corr_features,axis=1)\ncwf_test=X_test.drop(corr_features,axis=1)","e4f9f51a":"cwf_train.shape\n# y_train.shape","31fbd286":"train = pd.concat([cwf_train,y_train],axis=1)\ntest = pd.concat([cwf_test,y_test],axis=1)","a303d552":"new_df=pd.concat([train,test],axis=0)\nnew_df.shape\nprint(\"PREVIOUSLY THE NO. OF FEATURE IS:\",df.shape)\nprint(\"NOW THE NO. OF FEATURE IS:\",new_df.shape)\nprint(\"{} FEATURE IS BEEN REDUCED AFTER CORRELATION WITHIN INDEPENDENT FEATURES INCLUDING INF_PRICE\".format(df.shape[1]-new_df.shape[1]))","ade988ef":"#correlation matrix\ncorrmat = new_df.corr()\nplt.figure(figsize=(40, 10))\nsns.heatmap(corrmat, cbar=True, fmt='.2f', annot=True, cmap='RdYlGn', square=True)\ni=pd.DataFrame(new_df[new_df.columns[:]].corr()['SALES_PRICE'][:]).T\ni=i.iloc[0]\npd.DataFrame(i).T","6ab4bf22":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectKBest, chi2, f_regression\nfrom scipy.stats import pearsonr\nscaler=StandardScaler()\nminmax=MinMaxScaler()","53bff591":"X=new_df.drop(['SALES_PRICE'],axis=1)\ny=new_df['SALES_PRICE']","e5c49f9b":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=1)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","9f4e9000":"best_features_X = SelectKBest(score_func=f_regression,k=10).fit_transform(X,y)\n# print(best_features_X.scores_)","f5ed1c76":"correlation_list=[]\nfor column in X.columns:\n  corr_list=pearsonr(X[column],y)\n  correlation_list.append([column,corr_list[0],corr_list[1]])","339da6a7":"corr_df=pd.DataFrame(correlation_list,columns=['Features','Correlation','P-Value'])\ncorr_df.sort_values(by='P-Value',inplace=True)\ncorr_df.T","10a17cd8":"model_training_feature1 = corr_df['Features']\nmodel_training_feature1 = model_training_feature1.to_list()\nmodel_training_feature = corr_df['Features']\nmodel_training_feature = model_training_feature.to_list()\nmodel_training_feature","1099ace6":"new_df = pd.DataFrame(new_df,columns=model_training_feature)\nnew_df=pd.concat([new_df,df['SALES_PRICE']],axis=1)","35df4292":"new_df.head(2)","12918598":"X=new_df.drop(['SALES_PRICE'],axis=1)\ny=new_df['SALES_PRICE']","2524f674":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=1)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","6b8a8934":"#if VIF is more than 4 then we have change the feature. \nfrom sklearn.linear_model import LinearRegression\nlr_model=LinearRegression()\nlr_model.fit(X_train,y_train)\nr2=lr_model.score(X_train,y_train)\nvif=1\/(1-r2)\nvif","48ce4d5b":"df=new_df\n# df.head()","6b226eda":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xg\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nscaler=StandardScaler()\nminmax=MinMaxScaler()","2aa741c4":"X=new_df.drop('SALES_PRICE',axis=1)\ny=df['SALES_PRICE']","264f1a43":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=1)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","4ac24e81":"X_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","d2e337ce":"from sklearn.model_selection import cross_val_score","76c1f9a2":"from sklearn.linear_model import LinearRegression\nlr_model=LinearRegression()\nimport xgboost as xg\n# xg_model = XGBRegressor()\nxg_model= xg.XGBRegressor(colsample_bytree=0.4,\n                 gamma=2,                 \n                 learning_rate=0.01,\n                 max_depth=4,\n                 min_child_weight=1.5,\n                 n_estimators=10000,                                                                    \n                ) \nrf = RandomForestRegressor(n_estimators= 1000, max_depth = 4, max_features='sqrt')","80f3b371":"CV_Linear_regression = cross_val_score(lr_model,X_train_scaled,y_train,cv=10).mean()\nprint(\"The cross_validation score of an Linear_Regression model is:\",CV_Linear_regression)","1285a1bf":"CV_XG_Boost = cross_val_score(xg_model,X_train_scaled,y_train,cv=10).mean()\nprint(\"The cross_validation score of an XG_Boost model is:\",CV_XG_Boost)","bf09f325":"CV_RandomForest = cross_val_score(rf,X_train_scaled,y_train,cv=10).mean()\nprint(\"The cross_validation score of an XG_Boost model is:\",CV_RandomForest)","f2663fed":"print(\"The cross_validation score of an Linear_Regression model is:\",CV_Linear_regression)\nprint(\"The cross_validation score of an XG_Boost model is:\",CV_XG_Boost)\nprint(\"The cross_validation score of an Random_Forest model is:\",CV_RandomForest)","27feefc1":"from sklearn.linear_model import LinearRegression\nlr_model=LinearRegression()","5bb998e3":"lr_model.fit(X_train,y_train)","61328486":"lr_y_pred=lr_model.predict(X_test)","915b5f90":"print(r2_score(y_test,lr_y_pred))","58329561":"import xgboost as xg\n# xg_model = XGBRegressor()\nxg_model= xg.XGBRegressor(colsample_bytree=0.4,\n                 gamma=2,                 \n                 learning_rate=0.01,\n                 max_depth=4,\n                 min_child_weight=1.5,\n                 n_estimators=10000,                                                                    \n                )","8cfaa193":"xg_model.fit(X_train_scaled,y_train)","1b84b50a":"xg_y_pred=xg_model.predict(X_test_scaled)","502ffad0":"print(\"XGBoost model Rsquared metric:\",r2_score(y_test,xg_y_pred))","c84898a6":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Instantiate model \nrf = RandomForestRegressor(n_estimators= 1000, max_depth = 4, max_features='sqrt')\n\n# Train the model on training data\nrf.fit(X_train, y_train);\n\n# Use the forest's predict method on the test data\nrf_pred = rf.predict(X_test)","7ef9115a":"print(\"Random forest Regressor model Rsquared metric\",r2_score(y_test,rf_pred))","550a8d3c":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xg\n\nmodel1 = LinearRegression()\nmodel2 = RandomForestRegressor(random_state=1)\nmodel3 = GradientBoostingRegressor(random_state=1)\nmodel4 = DecisionTreeRegressor(random_state=1)\n# model4 = xg.XGBRegressor(random_state=1) \n# # we need to give the list of models that we are trying to combine\n# model.fit(x_train,y_train) # to train all of the models\n# preds = model.predict(x_test)\n# model.score(x_test,y_test) # prediction\n\n# model = VotingRegressor(estimators=[('Linear_Regg', model1), ('Random_Forest', model2), ('Gradient_Boosting', model3),('Decision_Tree',model4)])\nmodel = VotingRegressor(estimators=[('Linear_Regg', model1), ('Random_Forest', model2), ('Gradient_Boosting', model3)])\nmodel.fit(X_train,y_train)\net_y_pred=model.predict(X_test)\nprint(\"Ensemble Technique Rsquared metric\",r2_score(y_test,et_y_pred))","aae0aeb7":"print(\"XGBoost model Rsquared metric:\",r2_score(y_test,xg_y_pred))\nprint(\"Ensemble Technique Rsquared metric:\",r2_score(y_test,et_y_pred))\nprint(\"Random forest Regressor model Rsquared metric:\",r2_score(y_test,rf_pred))\nprint(\"Linear Regg model Rsquared metric:\",r2_score(y_test,lr_y_pred))","c47507a2":"## **WITH CROSS VALIDATION.**","5ed10701":"### **DROPPING UNWANTED FEATURES.**","5a86011f":"- ***Graph \"SALE_YEAR vs SALES_PRICE\" in general we see that the price has been increased.But decreased in 2004-2005(Tsunami : \"https:\/\/en.wikipedia.org\/wiki\/2004_Indian_Ocean_Tsunami\" and decreased in 2008-2010).***\n\n- ***Graph \"SALE_YEAR vs INF_PRICE\" in general we see that the price has been decreased. But increased slightly on 2012-2013.***","075d6771":" -------------------------------------------------------","724aaf20":"- ***In above all the graphs there is an linear trend. For Encoding this categorical variable we use Label Encoding.***","0120013f":"##**CORRELATION WITH TARGET VARIABLE.**","cd80c5ff":"- ***In above graph i have checked other few features has a linear relationship with target_variable('SALES_PRICE'). No features has the linear relationship with the target_variable('SALES_PRICE').***","3210644f":"###**CREATING NEW FEATURES FOR DATE_SALE & DATE_BUILD.**","e13da216":"### **4th MODEL IS ENSEMBLE TECHNIQUE.**","99bd402c":"### **R_SQUARED_SCORES.**\n-  **The cross_validation score of an Linear_Regression model is : 0.7846207107682147**\n-  **The cross_validation score of an XG_Boost model is : 0.9991105715153005**\n-  **The cross_validation score of an Random_Forest model is : 0.7923506517314066**\n-  **The cross_validation score of an Ensemble_technic model is : 0.9619503418611233**","7ebe3bbe":"#**CHENNAI HOUSE PRICE PREDICTION.**\n\n#**Problem Statement**:\n\nReal estate transactions are quite opaque sometimes and it may be difficult for a newbie to know the fair price of any given home. Thus, multiple real estate websites have the functionality to predict the prices of houses given different features regarding it. Such forecasting models will help buyers to identify a fair price for the home and also give insights to sellers as to how to build homes that fetch them more money. Chennai house sale price data is shared here and the participants are expected to build a sale price prediction model that will aid the customers to find a fair price for their homes and also help the sellers understand what factors are fetching more money for the houses?\n\nData : 'https:\/\/raw.githubusercontent.com\/Praveen3ravi\/PROJECT\/main\/train-chennai-sale.csv'\n\nMinimum Requirements\nIt is not sufficient to just fit a model - the model must be analysed to find the important factors that contribute towards the price. Also, it will be better to give a forecast range (range of permissible values) rather than a single estimate as it will help the customers to negotiate.","5e3423eb":"- **BUILDTYPE** - Number of \"House\" building type is higher than \"Commercial\" and \"Other\" building type.\n- **AREA** - Number of building in \"Chrompet\" is higher than other area's. \"T Nagar\" has low number of building when compared with other area's.\n- **UTILITY_AVAILABLE** - \"NoSewer\" building is higher than \"ALLPUB\" and \"ELO\" building.","4681da2d":"### **DROPPING THE FEATURES WHICH MAKE NO SENSE.**\n\n*Droping ['DATE_SALE','DATE_BUILD'] because we have retrieved the years from those both the features. Droping['PRT_ID'] because we dont need this feature for modeling. Droping ['QS_ROOMS','QS_OVERALL','QS_BATHROOM','MZZONE','QS_BEDROOM'] because they are proprietary(masked) features. Last but not the least, they have less relation with the target variable.*","bf234942":"###**FILLING THE NULL VALUES.**","fac600d8":"![reg.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAVcAAACTCAMAAAAN4ao8AAABYlBMVEX\/\/\/+jrLAAOGWQp8aep6zL0dIAJVro1Qzn6+6Sn7Di5ebx9PZ7jKHBydPx8\/PP1NaHoMIAHVf5+vxab4t2h52YpLTg5Omosr9qfpdAYYIAKl0AM2IAL2AAAE0AIlkAKFy1vL\/Z3N7t2QMAFlSrs7eXoaaJmKtQaYeyu8eZrsqitc\/EysyBnL\/G0eEAEFIAADXV3egAAEe9xc+4xtrK1OP59M7Z4Ov8+ugAAHEAADs4W38RQWzM0tovUHWywdZgeJMtLS07Ozv17a338b\/x5osAAAB1dXVeXl7r2jft3ljYyRjw43r799uloThWZlT+\/fSKioru4Gjs3Eu4ry5DWVibmT0AHWlgYGA0UFwAE2p2fkrMwCKupACwqjNrdU8eRF\/066LNzrJmeYaWlT6dnEeJi0Tv4nNLS0syMjIoREG4sX+9sVPNwjmhlAA9OAMAAFp0gnt3bQZyhaeJj17OuwC9tG8V55XQAAAbyklEQVR4nO2djYOaVrbA0UHnKiqK8qH4AYroyGjUmUwaBU2TtE3TdpOmu337tslu+na33fe2u++r7\/9\/514QAVFhRjNJOycZ5OMC+uNw7jn3Hi4UdevCL8vHk6Vk3vbvux1hrPxRj8\/lckc9\/vsqFnPsM\/Disc\/wHkq\/f\/xzVI9\/ivdOloFlTgfTkFkvSxxMeM5XJvxSZELXYuF\/hSZ2Flhm6n1KT1KUgGABIarHqbBAcZSKNwq4CNfDUyS4yxTHCXYhvCwwXOCY+XdwT7xvssFVL1PwP8\/zOqXrurmsZMpwI+tl3qKmuX4FinBlmGR4PkPl+j1mOquYNV0S4UhWDuqoSkYP3gN3XIFrzpwzYBB5fUZhvezhIoAawaQqijLlcLVEcU6Zek+ditiAchJMqrj4Es\/75Y4r5krxAGiGCE4AxQEr4CoAsCqDsHUgXGGeMXNU37S5Mi5X6Y4rliBXhO90iyr3MxYlibwJXGcALCcAsr6UJ8iSfMbUM1Nd6E0toq8WxSyxHcCEJZDAMX+NXMvBFcj+MxmYqCqeRfgfh+cEkzi7ggC1mmByeJljGMotROY4pAcOKR438ngvRZwe+IB8Twr6A70Dn+KDEOvoZ+jzRz\/FeyjIEo57Aj7odv1KhMtVK3EkF6u0ZB3a0HxIwkUXKodilA6a2jvZKvrRG8B+nXLH9Thyx\/U48ovmKmZuS\/iefivnfTdtuDMG3ZIwOfU2Tpt\/N8HFLYaGt2MHhHfD9Ra7jG6Hq3rH9Shyx\/U4csf1OHLH9Tjyjrj+6vyBG3BlogtX5WKUxjtsPSuXjSk5NnrZraeN0yRGZMxfswktP+uUooscoywRaYuWKXRcScQprISRZRbF2HJyErnoAHnOxY\/k5DGl3kIhv5BK0ImjCp3YBIsA0lHl\/Mo917jj\/H651qpvZeNdkPGSHHoxQtfK8xCsxpGxAlhj46RHpgpSdG9OyWEmW\/2pvsIiuxN7MVNfr6qXdViqLuWQcrOcbC\/7+JZCWi4IVk1JJJS9gIzNpfCd\/AUTdPCcY6yug4GD4MyZGVyeReBl7xK6beAtN1ydbL5iwsws0ZmvVWvJmjVrgQ7bhHpyqzqXW9aslkxXJbGWrFdgAvPzuozLJeF\/zZrX51W5PrfqsMHLtbZZoxYIV0Wl6axGTGcCm88E+U87k9V61rsqgWBWI7vT68L2Z2pthQnXQuCkFxgNNWYW2GSeDIbYcIKGDc6KRYdd0f0jhnU1f3KCzvG+yLcOdiCflyfrwieD1cncW5yZlTrpvNU0S3lzqnYy\/b7YQXkeldLCyByZoinDKr5j9k3e4dqaimbZyovmSDTNKtNH1fK0w\/QFKa32VSgUkWsKIUQbCBkpg1YVmCnQGsqqXaSibAK2Z+lUtqDgVbRRyGKuCby7kUUKjZcN2FqAPzrbhQ+DTuGSmGvQrhOu6HwgFBeCcHY2PBkLzNkFJxSv0GVxOERnl0goDgXhZDFG40tmWBwIaHFyhQtRAmjlmQDkBoIwKCJ0VVwMhcHVFTM4uSyOr6BCXCDhEl83R1Z3bH1pMmZpirmaViM\/Z3QdAc+SKEl8yRwxUqmJYFWv31g6+ir3BJ03GzmRqfWrpVm\/Iem9aclsVPuS2KhE58oaXaQVtC7NGnRWSaW6qoEUUMmCRqdSdKFb6HKJLm2v6iZWXGEzVlsoasBRCl0FqHYZmMOFstu5MhfCoojOz9DgqsgUF2OYH16cXw3Gl8XFVfFscHW+GF+Mz4XFOXPOFKEIV4SSRFMxV1hxgorFM2FwcXVCtoEucycnTJE5x9s3uCZLnUm+PLVGmOtoaiGrarXMtDw38\/OWWbJ4RFZVxJHDtZQu52fVuZgZmXK\/Wq\/2SxXCtdnrV\/h4XGGigaaxWF9BaVNGIYWJQpmCYXQLtJItaHiVhmiXa6KQYg2lYGQVI4VpaphrAeZAv3dzZYoDZjy+AFpCcQBci1dnxeHFeFC8vDgpXqDxeHExLF6BUp5zY6CNimceriewbnjGDIXFBZTG24ArZg0bfVxXdsASQBvrfJ9nOnlRV0dTURJLZjrZNPPNmpme9lQLr6qhnEm4CrxYFXK6zos6V+\/36tVpqZKxuU7rKJodSHCawtEq5mokDNVQNUZJqaC7KpswaAaUMsthZqkEa6gpWMVphs1VAe1VNMNQYTbFEq7I4dotGOoOruh8gUDpigPQNMFWxeHluTAYL04WsDwAggObK+jrWXEAmniGNZvse3Z2wpwUB8Mh6PPFkHAVbK6g12fDKw\/XuezW5TlwoXLlatOs5KDqkfSZ3JPBT7BkuQdOwKyelnKzuqXPZrCLtZQkS87l5q2cVJWr8yRUWZYFk54Mk1pV19e+WWsrV0VVtYSi0JgqVE+saiRSWRUihpSaonH1DrwBJ9mIVylZg1T6LMsqCRUuCOyhKQouo0ExmpROGIrNNbTeglpmuMCGE+zr8OTsogh4LtFF8WJAlBWbycFgURyeFS9Pzq7QsHhZPBsWhwjX+ldXVxew7qJ4JVwOFlD94W0wucRzg8sL4OrWW5XV75freK4uy7W+RTzUumy7TMR1wkv2qrrtpMr4A++Clz0+Fy6Wzpv5tbqG+lkrX8h1Y1cVO2vYdb3Pv11X\/atl2t0jKLQKdRiZC55zvA4Lir4IwV1a+QObxWyPoVjcLLOSyyFUcms\/azxKBqV24wCslW6tF+SwBDf1iHGB5vDdOOkOB\/XmcrYA97a4DvJuKY5NdY8HlmDdDLfeaRxLUaYVpxklbrtLelu7C9ofad1AlNCLeZ12lxgyCJw0RtMf14vZThgO9VqSOsRBYrcTRpcbfa9bbNdO\/ZJzBG+xH+aO63Hkjutx5I7rceQXzfU2663bO\/UxROS9kuQPItd5ENBIsbcqmwHcjWSGBI\/4Fq4taONpwwjCFaKKErlkDGGUw3I9yp1\/3EerQmLYA4hy2MN9eFy5O65HkTuux5E7rkeSW+dq5veKOdtfyO+BoAgH7UU4c1hTX7RkOWVvCX8fTeFAR3UOlyk10\/tF3l+kNF93tTDlzmEOmu6UN1oZjYNlyHny4grawY5KbpRl82CdAvJkNTIFI2\/N8ootdTkA9pDJcvQKLDpgzwWtUFS+5EdTr2\/krclJOR1Yt63Tpul8y+XhsOJkkYC2Ho5AIqGsLtYhhVappQ9Rq8rnkr2Kb51Vrkmm1HPXzefyvLwFbNqOTLlOyDawNrv60FrbN3V8CrsFK23ndoVu2oXAVthsWJmQft5Ix8RXa+79AXXdXOp9SaylW+lkPd2qy+lWyyqXhHq1J7dgXbrVrEtiZ77ES7LcbDX9qGr2aHZmiG1pCflxVSad4nINd5XL9kK9BvM1uW6mkzW8rV7b2LXp7SIvhP8iDSGkqeveMkVxO8S1VbdvKDu7mmFDttEo6+lIp52ed1UjPfFqwpkLPy7l\/wHMSK43K3xtPDXTFdPUocLmq+KSmZb5UT4v1M2pmuwL07k4muaFeU\/Io7kPbE3fzhVNZkJT5nm5XhX16rxX6cFCLZ0Tl01JrNSkepLPpOVyjt\/NlQnlSnMarSmqomkJJUEbqQSbNWiNVWglYWgKUMbWI6VocbhqWbiGSlaFmaxGq7iLU80qBqzKKglONQyykjaMkM5PP1dZACA468rKCVVT6oymeqnUm3bMhsSDmrbkecWslMWRNZ1NG71pr9\/QMz5LupPrKDcdmbNe3hJmfX7GZKqmJfVzopUr5+d6CTWEci7f4SReDGpsBK4G1klaVUiaF\/xkA7hqCP6pBVXJ0lRKVemCoW4mLGznah+t0NUSHK1pWZzSVFA0JQuXLlHoAkt8IrqQyBpQYJ++Toi+Ls1qvieLgp4Wx2K13xyXJF7P1WozoSdWlmLT6pf59Nzs9Uu5yFyb1JRpJFG\/n8\/lSjl+JnYspt+fVlG\/aqFpuSnUhdIIjcyOlQ+a2hhccZanxqIUbbBdNatmU6pCa1kadbWsotJKLK4cq6IuXBc6VcgmCvi+xxmMWU1BKnDVYK4AZkHJJuhN2+TnWhPzs4pY4fX+DPV0a5mvzGZqdVq6KkmiJVi6ZFpqrmpWrWkNzfs4cTCOvk54cSRMRqOK2ND5Wb81h4VSfWQxpdGcKQkdoTFCHbM5uw5XjeuCrcNcu6rSTaSywJXFfi6YXOCKMw2VbDcWV6yZhUSiq6YSXYNFWrdAc3AOTLMLXElSrgJ8wUaEcJ37f4HU5+ezXpPnJass8rWeKCatZb1Sn5VhXm\/q4rKa1kV5WZv1c03YUu357ev2eqsmNDv5Sk7NTzv5sZmZibVaxsyLOXMqlsfTfmc8ypjjZSufnk2vYQdAp1S4zxWNyXKaCnqaAD0rgDlcc+1msygGV5rFhtqA+ImGHQEx3ARKARmqZkBgBrMGqyUQYnENtulNBPwsqJ2J\/1rDH7Ua+SNpbDitDdZB5Q21OM6Ll0nlHfR1V36W3yl2toHO1ustOER5nu\/hah\/OQv7JLbmVxO4AHLOVlDc8rih+Fu0kZCU0uFc1XEVr+NMrGs0am\/tt9bPsNfQqv5725OnT3gkd4hAo1DQMwbVlFReUd8UFdb4vbTpTO8ofJi6AyjvsbneOer1jbj3VseLY+k6wsXIV6\/UDxbF0WD7nseJYitI7UdpdIkgp6Wl36Y0OdNROb6PdRelGayLZL8r62FDBH0i6TgMlF6G1Lor4BxpEhzmqGdpOiCI16e2V67QT7pXQHMY7uZM7uZM7uZNfrRwv8+9DGaPwOPmByaMcFYQJG8zgPRS+cYyh6PlOcMT7Q4nU+SBeSYAacusIR53Ik+OMSW5O6o13lV2s3WBfU7TEwxNAak89DldBLavvKKr59NPPbrL7cfLar5PeGk2Cryo5lnymUMqnN9g\/Ktd8L6iBam\/7iLMfPNePWZh0u751KdLo082G7xGQqFzno+BbGKVR8NU5a\/nAuRYe2fA+Vbxr7TZc+rBczXJQX4XyL1ZfH63YfcZ61h6Fazz5ULk6vgb3yFn+zJvxecc1IA+evP38FEv79NXb+zsKohWN7Md4WnjkS0D9wLkK1V2eVGyu95+eOtL+5rfP8efjrWV7o5VpS4GTlX3kb\/0+IFduHOkgG3ITrvnGmPr8wbat8bi+cKFirr\/7lnA9\/XxL6WlpPeaf9jL1cWAza\/dhHYLrvLEOG\/kYDvnN7MCLZ9tv1jhcv\/zh1CfttjOzBaycTKbdVyS\/\/JcYZ9qU3VxnE\/dlS5mRBWwn0cLzG3H98tmL7Rujc33x9elWeRK2g4674FsHCpP32Ne1jpoNHQzQpBLpqDfh+njbbUokMtenAR31SdgpEMmnqB3oZenR6q28cxWZPp4Ry\/sualyugui2rH7xdGfJiFwfPFvVVW\/a7ecbbJ+F7GKVmlg2Woz4avUa70+PxFVv4LGazNUZGxM4kTrb8eKUuFylexy6RzK8noXeop6SkY732DWpv\/\/X9jcf\/a592t7HlcmbtgQeL642Zbm0+7GosDam3VxzNbJPfwI\/R200HJUSl6Cvy9GOXeNxRRR+zbYOf6lnWx0BRyJxdb2A5+3noKx\/eH7a\/vN3Xpuw09T4xH4Ko+OBrSpEPD5YKeRJ791cmxN7DDx83zMlXy+AIO3wwWJx1e8hyiS32v3XsOPu9xJG4fq1Y1nbv\/mo3X7zBuN8\/tEf28\/\/9M0K7DYX9v7GZbXHA2x5LMGGG6s3Q0Ze28LV0czrvnQmFld8kt4EZt7+cMVQXHOnNYvA9Qsb609\/aP\/053Z7nsQw29\/B\/2\/frLhu2\/XtaRCsSHIcmx43KMgVdXybHQnnqk\/8QFeqmZtHc2Jj+wOMQHFfv41QcD9Xx7a2\/\/DRc6Kpz13j6tqBrSeCcPfLwBcrkYEZPWuCXHEesLxxpHCuy4bP3ZAaTn9VaUKUSZX2dAfE4mrbgOzr753lneNS7OX6wGGIjeubr4Bp+6uPvnPW\/dTe6g3Ycnr6RYArZcqlkk+bAlxJumsrEzxSOFfO6U3U7XuyMnH2M+3P6mjPc8NRuZrYcEsPKRwM\/JszuJ95b5fx2cvVbmE5fUOcgVIbZn6ymwVOAfBXBOzWsOPFiych9abgV6IAVzvxtBTsf99Zb+UbE9tTDahnfpePhSUiV+Eevg845A8G+F05Avu4fum4rR+BacXOwBtg2V5ZgL+SaVAjo8iTxy5w1tdtUGmQYRhHwXyBnVy5Kg6vELGuxLmKKlH1dcpQCD9dbAcDywiv7N7HdeVifQX11G\/sGay4v2k7xmEf1o2KyxZ8uZwtXAGPu7hysxhncMJY+mofp9PA2jkZEZvQjzQqTwz7mn9oUq\/sYCATobLfV+TVKiAAl5XYVeIN\/PGvruu6x0H+eosLdnq6Ow4MSoR4K9nAZoAn2dP9RiPKUePUW9yDZw84iklGe+\/lPq6eeh\/7AWBZn5\/ub8lay5NX4etfvX27dZ+wSxEljvUYAKEZKfEoCtd8w65l7z+jksmc2Yz2mvJ9XJ8BxD9\/a4cFMPnot+1vf7+OYbc3ae8TqOuebGm9vB9mWrZyFTI3aDGLwtXE3st4+Jevwczyk6hNGxHsa\/ur3wPC7978CTdlf9P+yo2yftjR\/ujK\/QfbLEUoPwpfyhDHbStXa7SZY2UbZ3F\/bLCbaw9OKpBjmY1v\/jLUuRgJiEGuwfFsX9h3PfhUf\/zTc3vWwfp5JD\/g\/ud+StlP1hXK\/dA47Qlw3Wws2sqVr2GDxxAPy2kmrJBWbn2yv9p2ufbDfCYdrthDUuTF8\/tU\/16cNwp7uSI1RURFHrZPnBaXv\/qbsH6I6F099ldQyo+cr5frwdsQnf8i5Dh77GutAU5WpmFnYMwaOCwwRxvBxYasuKr3tpUlfsWXpPkqVsLVmms25RF1Tfa+G3C58upxFAtgy5NTjxl9+SlFFTz9XOBuhRjZsEu2h2tzAr9fnNi\/homcI+nqa37XDe4NBsoRXYgV14LNk3XJerrzHr\/yauoXMaBiebIu\/iPJKUytE+CehrpbYeZhD1eOKFPsJOkIkKThqmdAnMBJKtE6eFZcsykWI9WWa5X1pqa8ePL47dOnT98+uR+PqV8+ca4V7eZpPXj8NbG+fm3Zx\/VwGZAu1+XKe+IDqLn0dytjb\/ZieB4212zKqIpsis01FI8xuMEXDpWXijPzMRvYkvM1YYT5Xx6uV8U95+nvN6yOrCByri3OuT3zArEmD7BplaL5rF4hXFEqpTR0PCar18amgr\/+uuLq14+2L\/DyZbBAp+lVhbBIzMO1eE7ebuJrYxGSxNvKY0vATCInzdtc7QaUWUBTpYccCQYw9fjp8pgrZ+SgpmJTssT6bexBRr7NdEpu0\/ojjO9HJVhkJte9Zmu3HWCuSIPY1bn3UvCjEkzFBtG2SjXqDUtQju+Rr1ex4bk2mhnjnoHVQhwfCwvmqmYmNIZZ1fHUkNYaG3yF0TUkg9tTR04NXfhbMEkLy7SZTJY86hfW8OhwXfdVFc8X5NNBqOMfnm\/E7ACwi3u\/kP7QU\/mtewakezHrRIm4App932NDwOoTvGQYBzKxpN\/FfVcQ++OPm7pEXt+0J563ua6VlEPINi++l53EDWk3L4MKWkusSD5jpwnZj2ujPu6BjMEWdwyvDapUBbAKaC0rz4k5uHHVyzgDq62WQ4bmJHkxydLaJm7VV654Tl7INVyvF84Hm4UjS4CrTi6ueA9\/leW\/233ZEyhTIRrdvzem+GbESwdcPRXVcsbaDhfL0+xhqi77ZWLbU9EpYUISOErrPq\/tXO0X5Fyd25cbz19cLG7waF+Aa84+CzG3T5xgAPSVeWh7C4B0GjVfVHIjAtaeKDPFsQhEbpxe1R\/JSXm0w+y7I7e7fJ5ut6+44ZsqFsnr+YY30VRb1u0DwXYqX5rQNSBI2MnCRHMZlvDURiLL8nPDUeGb++B5K1mN51iENYC5XAcX8DNJ\/sX5eWhvaz9G1e1ytQKP3b16skh77gPPYCARXTjJaRdga9gEZJoGqbsy8orrgV8yEEEePD4NSQJfcb06Pyc+KkOh8VUY13wjxpN+LleO8wbBD559SU1n61XCQ1edew+jHVlaVVsA0mB5y1h7BrfElQrtM1txRcIVvoUGi\/WmsfetchRqxUiZ99hXad1xc\/+VQnzZ6aplkJPQSmdRRCAu1xQ7TxKatqHN5diDxlwx5MlpSEMhhsW4RunKawNOTvCaa53KwzXvDATXGL79mirjKINiKlzOjVfUh7GyICW3fZDVddsTGOGKa26xJPA6KNeCSmSfzX61pd4auBUVgxBD\/cff\/\/7376H6OjuDaKE43Nxnv2z6r6j301vP4tJVfq4S61HaNdeUc+trs5Vt5dkDc0X2sFLXGV6+SpQUh1uMo5qp09f\/eP2zYwIXttmNKx6u2POH+nDXMwNxxPWzUikFewQGu2ofgMALwB7UviI7tcUXxYW95zOk4qnar1KEucWJvean1\/88\/eTn\/7MX7G2xH872cM3hSPU\/\/2tvYmtEWccF7KzBskaj4oJNZVK+5u2bSwjXTz8LNm7xpVJpM3nevR9Ba8kt\/3273f7Hf7efCx7vMtzx2iFuOyFDcSbF\/M\/\/vgJD6vHTrGs\/NgZcCUbDSBkaqyzLGnivGjEKrHqYlpe1bHL9WKFe+gcmEHHgW9qe90Y6RbkTCv182v653X4D9dbKAizOT2J+oRXXHnYGUO8fOBiYpyFwFSlkwa2qR27JDYpEWl9TbHKOWwZmDbADqRHUWT2e1SzlwG3bQa5Z8uCs76FZ5wXnG6Nj+BVnATr7ffv1P9vPVWrothAISIgZGa245nFdr78mPQMIlL5WoYRdMeJ+we2EmGsGbCnbG2GsrKKkjFGFpUvKgd3XQL1lOG1bf\/PSsNtpRsFdfVy5xcWC4l7\/\/Po5mNfhcMhcd2Ahrz\/w4FCmlQjmilbOAFgCj3OA7cBhBynh\/IMZfuJ8entoqSppp9kYzsfDdaWeDGLcGq54vS\/q4Xrf95TbjcN30g\/jpbmaU44fbWV\/dGYeeSyBMKon5dFGFL7mOjy\/3DjSxfliY10UWXOFYIDi3avJPIzY7bpVCFduRXVprcAqE3AMjv1mSXtkkuwjn9MhLOshIzGs662BHR6c2RpKolqwBRd4MfbTxy7Xr99SeUpcJ8jwN9Uouz+2QEIBXiXt2jbaChjZgzoDYYJ9ASP4PHKoBB2ey\/ML8nniaSzkYgddDlccDOTtXi7+QAOKOfkDBTsOUAGro7PsO8CKe2hfRhtNJ8h1sBhgDR2en+PwSyAxGARd1\/MHSPI4efTTq7M3klW+C5gCQyc8sc4SeQdYoe5KRCu320EnTS9U\/JfQv4vxMtz2F\/a2Ggh3yU6ulycn1xvY4d2MQ+LJfFMP62DdXN6\/cUh2iz\/\/lUNZVQ2Olv1eyPvNddPdPdR4RMceje9QXP2ZYIfiqveCv\/9QXCvL444kO++Lh5B+r5T0JLHNcoeRaq0RaIKzDnTkWa1xzWeqo8mB3mBgLjveZxBxQsIBhNMbwVyYwxyY4Soj\/X2r6kIlEz\/lMoJEewrvOnKE4Vlt+X\/i6qx0UgEAYAAAAABJRU5ErkJggg==)","1cf0eb04":"## **DISTRIBUTION OF THE DATA.**","4fd3c822":"# **ENCODING THE CATEGORICAL FEATURES.**","084c4d51":"### **R_SQUARED_SCORES.**\n-  **The cross_validation score of an Linear_Regression model is : 0.7770987851132124**\n-  **The cross_validation score of an XG_Boost model is : 0.9988690787850739**\n-  **The cross_validation score of an Random_Forest model is : 0.7925536232237124**","2469cd37":"##-----------------------------------------**THE END**-------------------------------------","f7944a89":"## -  **RESPECTIVE WITH MINIMUM PRICE OF EACH AREA.**\n-  **COMMERCIAL** - *(LOW - HIGH)* - Karapakkam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\",\"Anna Nagar\",\"T Nagar\"]. \"T Nagar\" is the first highest according to the \"Sales_Price\".\n-  **HOUSE** - *(LOW - HIGH)* - Again Karapakam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\",\"Anna Nagar\",\"T Nagar\"]. Again \"T Nagar\" is the first highest according to the \"Sales_Price\".\n- **OTHERS** - *(LOW - HIGH)* - Again Karapakam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\",\"Anna Nagar\",\"T Nagar\"]. Again \"T Nagar\" is the first highest according to the \"Sales_Price\".","0256a418":"# **MACHINE LEARNING MODEL:**\n- *Will try all the regression model and use which will give me the highest score in my cross_validation\/test data*.","0f5e393a":"***This measures the multi-colinearity. If it is more than 5, then we should investigate our features.***\n-  **Multicollinearity** - is the occurrence of high intercorrelations among two or more independent variables in a multiple regression model. ... In general, multicollinearity can lead to wider confidence intervals that produce less reliable probabilities in terms of the effect of independent variables in a model.","67d86487":"###**SPELLING CORRECTIONS.**","c8d484b1":"##**CORRELATION WITHIN THE FEATURES.**","e53e597c":"###**APPLIED INFLATION TO 4% FOR MY TARGET VARIABLE.**\n\n**What is Inflation** : 'https:\/\/en.wikipedia.org\/wiki\/Inflation'","5051d9dc":"### **1st MODEL IS LINEAR REGRESSION.**","a7a82a78":"# **FEATURE IMPORTANCE.**","55c68b51":"# **DATA VISUALISATION.**","5bc0dbf8":"##**QUESTIONS TO BUYERS** \n- Before answering them. I would like to ask them whether they have any expections\/wishes regarding the build type,location, price,...utility?\n- **ANSWER OF BUYERS** \n- He wants to buy a \"HOUSE\" building with all amenities.\n- **ANSWER TO BUYERS** \n- I would let him know that the average sales_price of \"house\" building is lesser than \"Others\" & \"Commercial\" type buildings. When it comes to the location i would suggest my buyer to buy in Karapakam, because the price of price and also it is near to the beach. \n-  Minmum price = 26,40,250.00\n-  Average price = 62,66,439.00\n-  Maximum price = 99,66,750.00\nThe Maximum price of \"House\" building in karapakkam is 9966750.00(Ninty nine lakhs sixty six thousand seven fifty) and the average price is 62,66,439.00(sixty two lakhs sixty six thousand four hundred and thirty nine). Since the buyer need with all amenity, he\/she can negotiate the price between (90,00,000 - 95,00,000).","2f00506c":"## -  **RESPECTIVE WITH AVERAGE PRICE OF EACH AREA.**\n-  **COMMERCIAL** - *(LOW - HIGH)* - Karapakkam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\",\"Anna Nagar\",\"T Nagar\"]. \"T Nagar\" is the first highest according to the \"Sales_Price\".\n-  **HOUSE** - *(LOW - HIGH)* - Again Karapakam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\"\"Anna Nagar\",\"T Nagar\"]. Again \"T Nagar\" is the first highest according to the \"Sales_Price\".\n- **OTHERS** - *(LOW - HIGH)* - Again Karapakam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\",\"Anna Nagar\",\"T Nagar\"]. Again \"T Nagar\" is the first highest according to the \"Sales_Price\".","1266f52e":"- ***In above graph i have checked other few features has a linear relationship with target_variable('SALES_PRICE'). [\"N_ROOMS\",\"N_BEDROOM\"] has the linear relationship with the target_variable(SALES_PRICE). But \"N_BATHROOM\" has no linear relationship with the target_variable('SALES_PRICE').***","5a8243bf":"#**BEST MODEL:**\n- ***My XGBoost model give me the high accuracy which is close to 1.***.\n- ***Followed by Ensemble Technique, RandomForest Regressor and Linear Regression.***","e47a6fb9":"-  **COMMERCIAL** - In all graphs, the Minimum,Average,Median and Maximum Price of commercial building is higher than \"House\" and \"Others\" building type.\n-  **House** - Minimum price of \"House\" price is higher than \"Others\" building type, but Maximum,Average and Median Price lower than \"Others\" building type.\n-  **Others** - Minimum price of \"Others\" price is lower than \"House\" building type, but Maximum,Average and Median Price higher than \"House\" building type.","9fe9f7d6":"- ***In above graph i have checked whether if there is a linear relationship with target_variable('SALES_PRICE').Only \"INT_SQFT\" has the clear linear relation with the target_variable('SALES_PRICE'), others are flatten.***","c01f774b":"### **3rd MODEL IS RANDOM FOREST.**","c034cc13":"##**REALTION WITH TARGET VARIABLE.**","cc9021a9":"### **INTERPRETATION.**","85910297":"## -  **RESPECTIVE WITH MAXIMUM PRICE OF EACH AREA.**\n-  **COMMERCIAL** - *(LOW - HIGH)* - Karapakkam area has the lowest price when compared with other area's. Followed with [\"Chrompet\",\"Adyar\",\"Velachery\",\"KK Nagar\",\"Anna Nagar\",\"T Nagar\"]. \"T Nagar\" is the first highest according to the \"Sales_Price\".\n-  **HOUSE** - *(LOW - HIGH)* - Again Karapakam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\"\"Anna Nagar\",\"T Nagar\"]. Again \"T Nagar\" is the first highest according to the \"Sales_Price\".\n- **OTHERS** - *(LOW - HIGH)* - Again Karapakam area has the lowest price when compared with other area's. Followed with [\"Adyar\",\"Chrompet\",\"Velachery\",\"KK Nagar\",\"Anna Nagar\",\"T Nagar\"]. Again \"T Nagar\" is the first highest according to the \"Sales_Price\".","c4fb61a7":"# **SUGGESTION TO BUYERS AND REAL ESTATE AGENTS.**","4e314819":"##**ANSWER TO REAL ESTATE AGENT** \n- If any agent want to build any type of building in chennai. I would suggest him to build a \"Commercial\" building. When it comes to the location I would suggest him \"T Nagar\", as the first choice because the 'average\/minimum\/maximum sales_price' of \"T Nagar\" is higher than other Area. I would suggest the agent to build with the \"Parking facility\" and with \"All_Utility\" . Gravel type street fetches more money than Paved street. I will strongly suggest not to construct any type of building which has no access to the building.","d9f02e77":"### **2nd MODEL IS XGBOOST.**","b04b060c":"## **WITHOUT CROSS_VALIDATION.**","2e00c781":"#**SUPERVISED REGRESSION PROBLEM.**\n   We have the \"*target variable(df[\"SALES_PRICE\"])*\" and the type of *Target variable is continuous*. Since we are trying to predict a continuous value, it is called Regression problem","c70b908b":"#**VARIANCE INFLATION FACTOR.**\n\n*Variance inflation factor (VIF) is a measure of the amount of multicollinearity in a set of multiple regression variables. Mathematically, the VIF for a regression model variable is equal to the ratio of the overall model variance to the variance of a model that includes only that single independent variable.*"}}