{"cell_type":{"310271cd":"code","cadc2da0":"code","c09563c7":"code","a49b596b":"code","92ed37fe":"code","498fe2fe":"code","c4bcc55f":"code","3c097564":"code","03c9e05f":"code","410f604f":"code","cb82f58e":"code","11d7025c":"code","9fcb270e":"code","6eb31922":"code","761fe3f3":"markdown","d05d5ff4":"markdown"},"source":{"310271cd":"!pip install googletrans","cadc2da0":"#Libraries\nimport googletrans\nimport json\nimport nltk\nimport re\nimport pandas as pd\nimport requests\nimport spacy\nfrom nltk.stem import WordNetLemmatizer\nfrom googletrans import Translator\nfrom random import randint","c09563c7":"#Load data\ndata = ...\nkw_dict = data.set_index('keyword').to_dict()['topic']\nwith open('..\/input\/topic-answers\/intent_answers.json') as json_file:\n    topic_dict = json.load(json_file)","a49b596b":"def preprocessing(text):\n    #lowercase text\n    text = \n    #delete punctuation\n    text = \n    #process the text with spacy and change words to their lemmas\n    text = nlp(text)\n    text = [token.lemma_.lower() for token in text]\n    \n    #last step?\n    ...\n\n","92ed37fe":"def detect_intent(...,...):\n    # add default return value\n    ...\n    # \n    if ... :\n        ...\n    else:\n       ...\n    \n    return intent","498fe2fe":"def provide_answer_simple(...):\n    #choose answer randomly\n    ...\n    \n    #return value - search the detected intent in topic_answers dict and return the random answer ","c4bcc55f":"def provide_answer(intent,topic_dict, ...)\n    \n    answer_nr = randint(0,len(topic_dict[intent])-1)\n    \n    if ... :\n        \n    else:\n        return topic_dict[intent][str(answer_nr)].format(name=name,\n                                                  fun=get_fun_fact())","3c097564":"def augment(text):\n    \n    lang_codes = list(googletrans.LANGCODES.values())\n    language = lang_codes[randint(0,len(lang_codes) - 1)]\n    \n    translation = translator.translate(text, src='en', dest=language).text\n    time.sleep(0.1)\n    text = translator.translate(translation, src=language, dest='en').text\n    time.sleep(0.1)\n    \n    return text","03c9e05f":"def get_fun_fact():\n    text = requests.get('https:\/\/uselessfacts.jsph.pl\/random.txt?language=en').text\n    return text[1:]","410f604f":"def listen_answer(name,topic_dict,enable_augment,kw_dict):\n    question = ... #user defined\n    # if a special word written exit the context menu\n    if ...\n        \n    else:\n        \n        \n        \n        return True","cb82f58e":"def bot_controller(run = True):\n    #get a name from user ...\n    ...\n    while run:\n        run = listen_answer(name=name,\n                            topic_dict=topic_dict,\n                            kw_dict=kw_dict,\n                            enable_augment = ENABLE_AUGMENT)\n    print('It was pleasure to meet you. Have a nice day.')","11d7025c":"def welcome():\n    \n    #print a welcome message \n    ...\n    #wait for the user input\n    ...\n    ##advanced - how woud we validate the name\n    \n    print(f'Hi {name}, what can I do for you?')\n    \n    return name","9fcb270e":"def extract_validate_name(text):\n    found_name = False\n    extracted = nlp(text)\n    for ent in extracted.ents:\n        if ent.label_ == 'PERSON':\n            name = ent.text\n            found_name = True\n    if not found_name:\n        print('Sorry, I don\\'t know that name, can you repeat it just to make sure?')\n        name = input()\n    return name\n    ","6eb31922":"bot_controller()","761fe3f3":"# Try improving our chatbot:\n* add language detection -> if user speaks a different language than english, tell them the bot supports only English (little bit of googling will help\n* try adding memory (2 level conversation) -> bot will react in a certain way in case user inputs some data (for example age, ask something back, etc.)\n* add text-to-speech from here https:\/\/www.kaggle.com\/sebastianpoliak\/text-to-speech?scriptVersionId=62554916\n* advanced - implement a spellchecker (don't be afraid to google)","d05d5ff4":"**What should be chatbot able to do?**\n* wait for a question\n* provide answer\n* remember some info (for example name of the user)\n* understand various versions of the same question\n* not care about the casing of letters \n----\n* connect to other data sources -> to provide answers"}}