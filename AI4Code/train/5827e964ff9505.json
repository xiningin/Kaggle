{"cell_type":{"958e58ef":"code","321e922e":"code","547eace3":"code","cbde3e26":"code","6d66a78d":"code","02aaa40f":"code","e6ab7522":"code","c7fec2e4":"code","a025ed52":"code","b676a3d7":"code","d6303987":"code","471b713b":"code","f782e5c9":"code","24d4eee6":"code","c77b3013":"markdown","eec8c7aa":"markdown","496daeb6":"markdown","bda885cf":"markdown","be2b78db":"markdown","648554c9":"markdown","901311ba":"markdown","f1cb997c":"markdown","f73d0007":"markdown","9c2beffd":"markdown"},"source":{"958e58ef":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# make sure the value of resolution is a lowercase L,\n#  for 'low', not a numeral 1\nmy_map = Basemap(projection='ortho', lat_0=50, lon_0=-100,\n              resolution='l', area_thresh=1000.0)\n \nmy_map.drawcoastlines()\n \nplt.show()","321e922e":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# make sure the value of resolution is a lowercase L,\n#  for 'low', not a numeral 1\nmy_map = Basemap(projection='ortho', lat_0=50, lon_0=-100,\n              resolution='l', area_thresh=1000.0)\n \nmy_map.drawcoastlines()\nmy_map.drawcountries()\nmy_map.fillcontinents(color='coral')\n \nplt.show()","547eace3":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# make sure the value of resolution is a lowercase L,\n#  for 'low', not a numeral 1\nmy_map = Basemap(projection='ortho', lat_0=50, lon_0=-100,\n              resolution='l', area_thresh=1000.0)\n \nmy_map.drawcoastlines()\nmy_map.drawcountries()\nmy_map.fillcontinents(color='coral')\nmy_map.drawmapboundary()\n \nplt.show()","cbde3e26":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# make sure the value of resolution is a lowercase L,\n#  for 'low', not a numeral 1\nmy_map = Basemap(projection='ortho', lat_0=50, lon_0=-100,\n              resolution='l', area_thresh=1000.0)\n \nmy_map.drawcoastlines()\nmy_map.drawcountries()\nmy_map.fillcontinents(color='coral')\nmy_map.drawmapboundary()\n \nmy_map.drawmeridians(np.arange(0, 360, 30))\nmy_map.drawparallels(np.arange(-90, 90, 30))\n \nplt.show()","6d66a78d":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# make sure the value of resolution is a lowercase L,\n#  for 'low', not a numeral 1\nmy_map = Basemap(projection='ortho', lat_0=0, lon_0=-100,\n              resolution='l', area_thresh=1000.0)\n \nmy_map.drawcoastlines()\nmy_map.drawcountries()\nmy_map.fillcontinents(color='coral')\nmy_map.drawmapboundary()\n \nmy_map.drawmeridians(np.arange(0, 360, 30))\nmy_map.drawparallels(np.arange(-90, 90, 30))\n \nplt.show()","02aaa40f":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# make sure the value of resolution is a lowercase L,\n#  for 'low', not a numeral 1\nmy_map = Basemap(projection='robin', lat_0=0, lon_0=-100,\n              resolution='l', area_thresh=1000.0)\n \nmy_map.drawcoastlines()\nmy_map.drawcountries()\nmy_map.fillcontinents(color='coral')\nmy_map.drawmapboundary()\n \nmy_map.drawmeridians(np.arange(0, 360, 30))\nmy_map.drawparallels(np.arange(-90, 90, 30))\n \nplt.show()","e6ab7522":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the latitudes and longitudes.\nlats, lons = [], []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n        \n# Display the first 5 lats and lons.\nprint('lats', lats[0:5])\nprint('lons', lons[0:5])","c7fec2e4":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the latitudes and longitudes.\nlats, lons = [], []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n \n# --- Build Map ---\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \neq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,\n              lat_0=0, lon_0=-130)\neq_map.drawcoastlines()\neq_map.drawcountries()\neq_map.fillcontinents(color = 'gray')\neq_map.drawmapboundary()\neq_map.drawmeridians(np.arange(0, 360, 30))\neq_map.drawparallels(np.arange(-90, 90, 30))\n \nx,y = eq_map(lons, lats)\neq_map.plot(x, y, 'ro', markersize=6)\n \nplt.show()","a025ed52":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the data we are interested in.\nlats, lons = [], []\nmagnitudes = []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n        magnitudes.append(float(row[4]))\n \n# --- Build Map ---\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \neq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,\n              lat_0=0, lon_0=-130)\neq_map.drawcoastlines()\neq_map.drawcountries()\neq_map.fillcontinents(color = 'gray')\neq_map.drawmapboundary()\neq_map.drawmeridians(np.arange(0, 360, 30))\neq_map.drawparallels(np.arange(-90, 90, 30))\n \nx,y = eq_map(lons, lats)\neq_map.plot(x, y, 'ro', markersize=6)\n \nplt.show()","b676a3d7":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the data we are interested in.\nlats, lons = [], []\nmagnitudes = []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n        magnitudes.append(float(row[4]))\n        \n# --- Build Map ---\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n \neq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,\n              lat_0=0, lon_0=-130)\neq_map.drawcoastlines()\neq_map.drawcountries()\neq_map.fillcontinents(color = 'gray')\neq_map.drawmapboundary()\neq_map.drawmeridians(np.arange(0, 360, 30))\neq_map.drawparallels(np.arange(-90, 90, 30))\n \nmin_marker_size = 2.5\nfor lon, lat, mag in zip(lons, lats, magnitudes):\n    x,y = eq_map(lon, lat)\n    msize = mag * min_marker_size\n    eq_map.plot(x, y, 'ro', markersize=msize)\n \nplt.show()","d6303987":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the data we are interested in.\nlats, lons = [], []\nmagnitudes = []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n        magnitudes.append(float(row[4]))\n        \n# --- Build Map ---\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef get_marker_color(magnitude):\n    # Returns green for small earthquakes, yellow for moderate\n    #  earthquakes, and red for significant earthquakes.\n    if magnitude < 3.0:\n        return ('go')\n    elif magnitude < 5.0:\n        return ('yo')\n    else:\n        return ('ro')\n \neq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,\n              lat_0=0, lon_0=-130)\neq_map.drawcoastlines()\neq_map.drawcountries()\neq_map.fillcontinents(color = 'gray')\neq_map.drawmapboundary()\neq_map.drawmeridians(np.arange(0, 360, 30))\neq_map.drawparallels(np.arange(-90, 90, 30))\n \nmin_marker_size = 2.5\nfor lon, lat, mag in zip(lons, lats, magnitudes):\n    x,y = eq_map(lon, lat)\n    msize = mag * min_marker_size\n    marker_string = get_marker_color(mag)\n    eq_map.plot(x, y, marker_string, markersize=msize)\n \nplt.show()","471b713b":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the data we are interested in.\nlats, lons = [], []\nmagnitudes = []\ntimestrings = []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n        magnitudes.append(float(row[4]))\n        timestrings.append(row[0])\n        \n# --- Build Map ---\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef get_marker_color(magnitude):\n    # Returns green for small earthquakes, yellow for moderate\n    #  earthquakes, and red for significant earthquakes.\n    if magnitude < 3.0:\n        return ('go')\n    elif magnitude < 5.0:\n        return ('yo')\n    else:\n        return ('ro')\n \neq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,\n              lat_0=0, lon_0=-130)\neq_map.drawcoastlines()\neq_map.drawcountries()\neq_map.fillcontinents(color = 'gray')\neq_map.drawmapboundary()\neq_map.drawmeridians(np.arange(0, 360, 30))\neq_map.drawparallels(np.arange(-90, 90, 30))\n \nmin_marker_size = 2.5\nfor lon, lat, mag in zip(lons, lats, magnitudes):\n    x,y = eq_map(lon, lat)\n    msize = mag * min_marker_size\n    marker_string = get_marker_color(mag)\n    eq_map.plot(x, y, marker_string, markersize=msize)\n    \ntitle_string = \"Earthquakes of Magnitude 1.0 or Greater\\n\"\ntitle_string += \"%s through %s\" % (timestrings[-1], timestrings[0])\nplt.title(title_string)\n \nplt.show()","f782e5c9":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the data we are interested in.\nlats, lons = [], []\nmagnitudes = []\ntimestrings = []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n        magnitudes.append(float(row[4]))\n        timestrings.append(row[0])\n        \n# --- Build Map ---\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef get_marker_color(magnitude):\n    # Returns green for small earthquakes, yellow for moderate\n    #  earthquakes, and red for significant earthquakes.\n    if magnitude < 3.0:\n        return ('go')\n    elif magnitude < 5.0:\n        return ('yo')\n    else:\n        return ('ro')\n\n# Make this plot larger.\nplt.figure(figsize=(16,12))\n\neq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,\n              lat_0=0, lon_0=-130)\neq_map.drawcoastlines()\neq_map.drawcountries()\neq_map.fillcontinents(color = 'gray')\neq_map.drawmapboundary()\neq_map.drawmeridians(np.arange(0, 360, 30))\neq_map.drawparallels(np.arange(-90, 90, 30))\n \nmin_marker_size = 2.5\nfor lon, lat, mag in zip(lons, lats, magnitudes):\n    x,y = eq_map(lon, lat)\n    msize = mag * min_marker_size\n    marker_string = get_marker_color(mag)\n    eq_map.plot(x, y, marker_string, markersize=msize)\n    \ntitle_string = \"Earthquakes of Magnitude 1.0 or Greater\\n\"\ntitle_string += \"%s through %s\" % (timestrings[-1][:10], timestrings[0][:10])\nplt.title(title_string)\n\nplt.show()","24d4eee6":"import csv\n\n# Open the earthquake data file.\nfilename = '..\/input\/earthquake_data.csv'\n\n# Create empty lists for the data we are interested in.\nlats, lons = [], []\nmagnitudes = []\ntimestrings = []\n\n# Read through the entire file, skip the first line,\n#  and pull out just the lats and lons.\nwith open(filename) as f:\n    # Create a csv reader object.\n    reader = csv.reader(f)\n    \n    # Ignore the header row.\n    next(reader)\n    \n    # Store the latitudes and longitudes in the appropriate lists.\n    for row in reader:\n        lats.append(float(row[1]))\n        lons.append(float(row[2]))\n        magnitudes.append(float(row[4]))\n        timestrings.append(row[0])\n        \n# --- Build Map ---\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef get_marker_color(magnitude):\n    # Returns green for small earthquakes, yellow for moderate\n    #  earthquakes, and red for significant earthquakes.\n    if magnitude < 3.0:\n        return ('go')\n    elif magnitude < 5.0:\n        return ('yo')\n    else:\n        return ('ro')\n \neq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,\n              lat_0=0, lon_0=-130)\neq_map.drawcoastlines()\neq_map.drawcountries()\n#eq_map.fillcontinents(color = 'gray')\neq_map.bluemarble()\neq_map.drawmapboundary()\neq_map.drawmeridians(np.arange(0, 360, 30))\neq_map.drawparallels(np.arange(-90, 90, 30))\n \nmin_marker_size = 2.25\nfor lon, lat, mag in zip(lons, lats, magnitudes):\n    x,y = eq_map(lon, lat)\n    msize = mag * min_marker_size\n    marker_string = get_marker_color(mag)\n    eq_map.plot(x, y, marker_string, markersize=msize)\n    \ntitle_string = \"Earthquakes of Magnitude 1.0 or Greater\\n\"\ntitle_string += \"%s through %s\" % (timestrings[-1][:10], timestrings[0][:10])\nplt.title(title_string)\n \nplt.show()","c77b3013":"# Adding color\nThere's one more change we can make, to generate a more meaningful visualization. We will use some different colors to represent the magnitudes as well. Let's make small earthquakes green, moderate earthquakes yellow, and significant earthquakes red. The following version includes a function that identifies the appropriate color for each earthquake:","eec8c7aa":"Comment line that colors the continents, and replace it with a call to bluemarble. ","496daeb6":"The np.arange() arguments tell where your latitude and longitude lines should begin and end, and how far apart they should be spaced.\n\nChanging the latitude and longitude parameters in the original Basemap definition to 0 and -100. Output should be the map centered along the equator:","bda885cf":"# Making a simple map\nMaking a simple map of the world. map of the globe, with good clean coastlines:","be2b78db":"# Adding a title\nAdding a title to the map. Our title needs to include the date range for these earthquakes, which requires us to pull in a little more data when we parse the raw text. To make the title, we'll use the dates of the first and last earthquakes. Since the file includes the most recent earthquakes first, we need to use the last items as the starting date:","648554c9":"We create empty lists to contain the latitudes and longitudes. Then we use the with statement to ensure that the file closes properly once it has been read, even if there are errors in processing the file.\n\nWith the data file open, we initialize a csv reader object. The next() function skips over the header row. Then we loop through each row in the data file, and pull out the information we want.","901311ba":"Adding detail\nadding some more detail to this map, starting with country borders. Adding the following lines after map.drawcoastlines():","f1cb997c":"Now changing the kind of map we're producing. Changing the projection type to \u2018robin\u2019.We should end up with a Robinson projection instead of a globe:","f73d0007":"# Plotting earthquakes\nUsing what we learned about plotting a set of points, we can now make a simple plot of these points:","9c2beffd":"**Earthquakes Visualization :**\n\nWe are new to Visualization ,tried to explore and choosen Natural distasters . \nThese are very painful for mankind and tracking them is much necessary. \nSo explored on the same. Below are the references for this work\n\nhttps:\/\/earthquake.usgs.gov\/earthquakes\/feed\/v1.0\/csv.php #For the data\n    \nhttps:\/\/canvas.instructure.com\/courses\/1133362\/pages\/book-5-dot-6-python-visualizing-big-data #for the process to be followed\n\nInstalling packages:\n    \nhttps:\/\/github.com\/conda-forge\/basemap-feedstock\n    \nhttps:\/\/github.com\/conda-forge\/basemap-data-hires-feedstock\n"}}