{"cell_type":{"b04afa96":"code","44764f46":"code","a583d2d7":"code","3ffa2308":"code","e9e9b3f7":"code","eb82cc99":"code","811df1de":"code","697aa649":"code","5d46295b":"code","70e4c79c":"markdown","27acb6a8":"markdown","538ab610":"markdown"},"source":{"b04afa96":"import pandas as pd\nimport numpy as np\nimport os\nfrom glob import glob\nimport itertools\nimport fnmatch\nimport random\nimport matplotlib.pylab as plt\nimport seaborn as sns\nimport cv2\nfrom scipy.misc import imresize, imread\nimport sklearn\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, StratifiedKFold, learning_curve, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, make_scorer, accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nimport keras\nfrom keras import backend as K\nfrom keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential, model_from_json\nfrom keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta\nfrom keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization, Conv2D, MaxPool2D, MaxPooling2D\n%matplotlib inline\nprint(\"don\")","44764f46":"# Create a new directory\nbase_dir = 'data'\nos.mkdir(base_dir)\n\n\n#[CREATE FOLDERS INSIDE THE BASE DIRECTORY]\n\n\n# create a path to 'base_dir' to which we will join the names of the new folders\n# train_dir\ntrain_dir = os.path.join(base_dir, 'train')\nos.mkdir(train_dir)\n\n# val_dir\nval_dir = os.path.join(base_dir, 'test')\nos.mkdir(val_dir)\n\n\n# [CREATE FOLDERS INSIDE THE TRAIN, VALIDATION AND TEST FOLDERS]\n# Inside each folder we create seperate folders for each class\n\n# create new folders inside train_dir\none = os.path.join(train_dir, '1')\nos.mkdir(one)\n\nzero = os.path.join(train_dir, '0')\nos.mkdir(zero)\n# create new folders inside val_dir\none = os.path.join(val_dir, '1')\nos.mkdir(one)\n\nzero = os.path.join(val_dir, '0')\nos.mkdir(zero)","a583d2d7":"from glob import glob\nimagePatches = glob('\/kaggle\/input\/IDC_regular_ps50_idx5\/**\/*_class0.png', recursive=True)\nlen(imagePatches)","3ffa2308":"from glob import glob\nimagePatches = glob('\/kaggle\/input\/IDC_regular_ps50_idx5\/**\/*_class1.png', recursive=True)\nlen(imagePatches)","e9e9b3f7":"os.listdir('\/kaggle\/working\/data\/train\/1')","eb82cc99":"from glob import glob\nimport os\nimport cv2\nfrom pathlib import Path    \nimagePatches = glob('\/kaggle\/input\/IDC_regular_ps50_idx5\/**\/*_class1.png', recursive=True)\nfor filename in imagePatches[0:60000]:\n    #print(filename)\n    cv_img = cv2.imread(filename)\n    name='\/kaggle\/working\/data\/train\/1\/'+Path(filename).name\n   # print(x)\n    cv2.imwrite(name, cv_img)\n    \n     \ncount=0\nfor filename in imagePatches[60000:78786]:\n    cv_img = cv2.imread(filename)\n    name='\/kaggle\/working\/data\/test\/1\/'+Path(filename).name\n    count+=1\n    print(count)\n    cv2.imwrite(name, cv_img)\n    \nprint('don')","811df1de":"from glob import glob\nimport os\nimport cv2\nfrom pathlib import Path    \nimagePatches = glob('\/kaggle\/input\/IDC_regular_ps50_idx5\/**\/*_class0.png', recursive=True)\nfor filename in imagePatches[0:180000]:\n    #print(filename)\n    cv_img = cv2.imread(filename)\n    name='\/kaggle\/working\/data\/train\/0\/'+Path(filename).name\n   # print(x)\n    cv2.imwrite(name, cv_img)\n    \n     \ncount=0\nfor filename in imagePatches[190000:198738]:\n    cv_img = cv2.imread(filename)\n    name='\/kaggle\/working\/data\/test\/0\/'+Path(filename).name\n    count+=1\n    print(count)\n    cv2.imwrite(name, cv_img)\n    \nprint('don')","697aa649":"image_name = \"\/kaggle\/input\/IDC_regular_ps50_idx5\/9135\/1\/9135_idx5_x1701_y1851_class1.png\" #Image to be used as query\ndef plotImage(image_location):\n    image = cv2.imread(image_name)\n    image = cv2.resize(image, (50,50))\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    return\nplotImage(image_name)","5d46295b":"from keras.models import load_model\nfrom keras.preprocessing import image\nimport numpy as np\n\n\n# dimensions of our images\nimg_width, img_height = 50, 50\n\n# load the model we saved\nmodel = load_model('model.h5')\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\n\n# predicting images\nimg = image.load_img('\/kaggle\/input\/IDC_regular_ps50_idx5\/12935\/1\/12935_idx5_x2001_y1201_class1.png', target_size=(img_width, img_height))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict_classes(images, batch_size=10)\nprint(classes)\n","70e4c79c":"*Step 1: Import Modules*","27acb6a8":"*Step 3: Preprocess Data*","538ab610":"*Step 2: Explore Data*"}}