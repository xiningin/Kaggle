{"cell_type":{"d6e39171":"code","92f5afa1":"code","d59b5320":"code","33b8a5fa":"code","854c6ea2":"code","264b7b98":"code","143e2035":"code","71a6a8e6":"code","42cb2de2":"code","539faab8":"code","87fba429":"code","67270b16":"code","62b532f5":"code","f38dc17a":"code","37bbff45":"code","a740a1fb":"code","b47beac9":"code","e4eaa9aa":"code","8ab14e56":"code","3662dea3":"code","12719d12":"code","6f28753e":"code","187d32df":"code","0c9ebdc2":"code","b1d92a66":"code","1a28603a":"code","0705a0d0":"code","c011ac6d":"code","1eae402c":"code","2c7a52a4":"code","01ddef1d":"code","3833219f":"code","c1e76d72":"code","42bd124a":"code","6e099dd1":"code","fc0eec98":"code","427c3909":"markdown","e3bf2f36":"markdown","07578445":"markdown","cb3b2d4d":"markdown","32839b79":"markdown","a3175830":"markdown","3986fa1d":"markdown","ad33e791":"markdown","b41795fb":"markdown","15f5d53a":"markdown","9150c9e5":"markdown","5bd129a9":"markdown","93046e13":"markdown","bb28ce1f":"markdown","32c22d8d":"markdown","5a36ae24":"markdown"},"source":{"d6e39171":"###########################################\n# Uploading the necessary libraries\n###########################################\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\nimport plotly \nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff","92f5afa1":"###########################################\n# Upload CSV data\n###########################################\n\ndf = pd.read_csv('..\/input\/top-play-store-games\/android-games.csv')\ndf.head(201)","d59b5320":"###########################################\n# Detailed review for dataset\n###########################################\n\ndf.info()","33b8a5fa":"df.isnull().sum()","854c6ea2":"df.sample(10)","264b7b98":"###########################################\n# Let's make 'installs' column a numerical variable by doing a small adjustment.\n###########################################","143e2035":"# ALTERNATIVE CODE for doing a small adjustment in \"installs\" column\n\n\n# def in_thousand(df):\n#     if df.split(\".\")[1].split(\" \")[1] == \"k\":\n#         return int(df.split(\".\")[0])*1000\n    \n#     elif df.split(\".\")[1].split(\" \")[1] == \"M\":\n#         return int(df.split(\".\")[0])*1000000\n    \n#     else:\n#         return df\n    \n# df['installs'] = df.installs.apply(in_thousand)\n# df= df.rename(columns={'installs': 'installs_in_million'})","71a6a8e6":"df[\"installs_in_million\"] = df.installs.apply(lambda x: float(x.split(\" \")[0])*1000000 if \"M\" in x else float(x.split(\" \")[0])*1000 )","42cb2de2":"df.drop('installs', axis = 1, inplace = True)","539faab8":"df.head(10)","87fba429":"df['installs_in_million'].value_counts()","67270b16":"df.info()","62b532f5":"fig = px.histogram(df, x=\"category\", title='Game Categories', color_discrete_sequence=['indianred'])\n\n\n\nfig.update_layout(xaxis={'categoryorder':'total descending'},\n    title_text='Total Count of Games in Each Category', # title of plot\n    xaxis_title_text='Category', # xaxis label\n    yaxis_title_text='Count', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1 # gap between bars of the same location coordinates\n)\n\n\nfig.show()","f38dc17a":"free = df[df['paid']==False][['installs_in_million',\"category\"]]","37bbff45":"fig = px.bar(free, x= free[\"category\"], y=free[\"installs_in_million\"], labels={'y':'Total Ratings'})\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","a740a1fb":"df['category'].value_counts()  #df['category'].value_counts(normalize=True)","b47beac9":"fig = px.histogram(df, x= 'total ratings', title='Total Ratings of the Games', color_discrete_sequence=['indianred'])\n\nfig.update_layout(\n    title_text='Total Ratings of the Games', # title of plot\n    xaxis_title_text='Total ratings', # xaxis label\n    yaxis_title_text='Count', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1 # gap between bars of the same location coordinates\n)\n\n\nfig.show()","e4eaa9aa":"fig = px.box(df, x= 'total ratings', hover_data = df[['title','category']])\nfig.update_traces(quartilemethod=\"inclusive\")\nfig.show()","8ab14e56":"total_ratings_by_category = df.groupby('category')['total ratings'].mean()\ntotal_ratings_by_category","3662dea3":"install_by_category = df.groupby('category')['installs_in_million'].mean()\ninstall_by_category","12719d12":"import plotly.graph_objs as go\n\ndata = [\n    go.Bar(x= list(total_ratings_by_category.index), y=list(total_ratings_by_category.values), name='Total Ratings by Category',offsetgroup=0),\n    go.Bar(x= list(total_ratings_by_category.index), y=list(install_by_category.values), name='Install by Category', yaxis='y2',offsetgroup=1)\n]\n\n# Add titles and color the font of the titles to match that of the traces\n# 'SteelBlue' and 'DarkOrange' are the defaults of the first two colors.\n\ny1 = go.YAxis(title='Total Ratings', titlefont=go.Font(color='SteelBlue'))\ny2 = go.YAxis(title= 'Installation', titlefont=go.Font(color='DarkOrange'))\n\n# update second y axis to be position appropriately\ny2.update(overlaying='y', side='right')\n\n# Add the pre-defined formatting for both y axes \nlayout = go.Layout( yaxis1 = y1, yaxis2 = y2)\n\n\n\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(title='Total Ratings & Installs by Categories',xaxis={'categoryorder':'total descending'}, bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1) # gap between bars of the same location coordinates)\nfig.update_xaxes(title_text=\"Categories\")\niplot(fig)","6f28753e":"growth_by_category_30 = df.groupby('category')['growth (30 days)'].mean()\ngrowth_by_category_60 = df.groupby('category')['growth (60 days)'].mean()","187d32df":"data = [\n    go.Bar(x= list(total_ratings_by_category.index), y=list(growth_by_category_30.values), name='Growth by Category in 30 days',offsetgroup=0),\n    go.Bar(x= list(total_ratings_by_category.index), y=list(growth_by_category_60.values), name='Growth by Category in 60 days', yaxis='y2',offsetgroup=1)\n]\n\n# Add titles and color the font of the titles to match that of the traces\n# 'SteelBlue' and 'DarkOrange' are the defaults of the first two colors.\n\ny1 = go.YAxis(title='Growth in 30 days', titlefont=go.Font(color='SteelBlue'))\ny2 = go.YAxis(title= 'Growth in 60 days', titlefont=go.Font(color='DarkOrange'))\n\n# update second y axis to be position appropriately\ny2.update(overlaying='y', side='right')\n\n# Add the pre-defined formatting for both y axes \nlayout = go.Layout( yaxis1 = y1, yaxis2 = y2)\n\n\n\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(title='Growth Trend in 30 and 60 days',xaxis={'categoryorder':'total descending'}, bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1) # gap between bars of the same location coordinates)\nfig.update_xaxes(title_text=\"Categories\")\niplot(fig)","0c9ebdc2":"top_ranked_games = df[df['rank']<6][['rank','title','category', 'total ratings', 'installs_in_million', '5 star ratings']]\ntop_ranked_games","b1d92a66":"top_20 = df.sort_values(by='installs_in_million', ascending=False).head(20)\ntop_20","1a28603a":"data = [\n    go.Scatter(x= list(top_20['title'].values), y=list(top_20['5 star ratings'].values), name='5 star ratings'),\n    go.Bar(x= list(top_20['title'].values), y=list(top_20['installs_in_million'].values), name='Top 20 Games by Installation', yaxis='y2', opacity = 0.5)\n]\n\n# Add titles and color the font of the titles to match that of the traces\n# 'SteelBlue' and 'DarkOrange' are the defaults of the first two colors.\n\ny1 = go.YAxis(title='5 Star Ratings', titlefont=go.Font(color='SteelBlue'))\ny2 = go.YAxis(title= 'Installs in Million', titlefont=go.Font(color='DarkOrange'))\n\n# update second y axis to be position appropriately\ny2.update(overlaying='y', side='right')\n\n# Add the pre-defined formatting for both y axes \nlayout = go.Layout( yaxis1 = y1, yaxis2 = y2)\n\n\n\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout( bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1) # gap between bars of the same location coordinates)\nfig.update_xaxes(title_text=\"Game Title\")\niplot(fig)","0705a0d0":"total_ratings_by_category = df.groupby('category')['total ratings'].mean()\ntotal_ratings_by_category","c011ac6d":"trend = df[df['paid']==False][['average rating',\"category\"]].sort_values(by = 'average rating', ascending = False)\ntrend","1eae402c":"fig = px.histogram(trend, x= \"average rating\", title='Total Ratings of the Games', color_discrete_sequence=['indianred'])\n\nfig.update_layout(\n    title_text='Aveage Rating Trends of Free Games', # title of plot\n    xaxis_title_text='Average Ratings', # xaxis label\n    yaxis_title_text='Count', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1 # gap between bars of the same location coordinates\n)\n\n\nfig.show()","2c7a52a4":"df[\"average rating\"].value_counts()","01ddef1d":"df['paid'].value_counts(normalize=True)","3833219f":"paid_free= df['paid'].value_counts()\nlabel =['Free','Paid']\nfig = px.pie(paid_free, values=df['paid'].value_counts().values, names=label,\n             title='Paid & Free Games')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","c1e76d72":"dfx = df[df['paid']==False][['category']].value_counts()\ndfx","42bd124a":"import plotly.graph_objects as go\n\nlabels = dfx.index\nvalues = dfx.values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial'\n                            )])\nfig.show()","6e099dd1":"dfxt = df[df['paid']==True][['category']].value_counts()\ndfxt","fc0eec98":"import plotly.graph_objects as go\n\nlabels = dfxt.index\nvalues = dfxt.values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial'\n                            )])\nfig.show()","427c3909":"### THANKS!","e3bf2f36":"\n******************************************************************************************************************************\n#### As Game Action category have a greater number of installs with respect to other categories as shown in Figure above. \n******************************************************************************************************************************","07578445":"## PieChart of Paid Games by Categories","cb3b2d4d":"## Analysis of Top 20 Games","32839b79":"## Conclusion","a3175830":"** There are two main types of apps in google paly store, free and paid. Such applications can be used for games, \n  movies, education and video, etc. There are other categories of applications, such as All of these apps are \n  available on the Google Play Store.\n\n** The categories used by the applications of these games are Word, Trivia, Simulation, Sports, Strategy, Racing, \n  Role_Playing, Puzzle, Music, Educational, Card, Casino, Casual, Board, Action, Adventure and Arcade.\n\n** While the Game Casino category is in the first place in the growth for 30 days, the Game Board category appears \n  in the first place in the growth for 60 days. Accordingly, it will be a more accurate method to examine the growth \n  kinematics of games that can be examined in long-term prediction.","3986fa1d":"\n******************************************************************************************************************************\n#### The count values of the games in all categories in our dataset are displayed in this Figure.\n******************************************************************************************************************************","ad33e791":"\n******************************************************************************************************************************\n#### Looking at the outliers in the Total Ratings boxplot, the trend in the Count-Total Rate graph is more clearly understood.\n******************************************************************************************************************************","b41795fb":"\n******************************************************************************************************************************\n      ** Now, the \"installs\" column in our dataset has been brought to the desired format and is ready to be analyzed. **\n******************************************************************************************************************************\n","15f5d53a":"\n******************************************************************************************************************************\n\n#### Now, the \"installs\" column in our dataset has been brought to the desired format and is ready to be analyzed. \n******************************************************************************************************************************","9150c9e5":"## Introduction\n\nAs it is known, Google Play Store allows many games to be downloaded by users. Thousands of users install millions of apps every day. The Play Store offers millions of applications in many categories to users for free or paid.\nTo determine which games are more popular among users, we need to examine the ratings users give for games.\nThus, Google can examine which of the games it offers is more popular, the effects of the price of the game on its popularity and make improvements.\n\nIn addition, application performance and efficiency can be increased by developers. The analysis will not only be useful for developers, but also the user. The content of Google play store apps will be characterized on a certain scale. Thus, as a result of this analysis, it can be determined that it will be profitable to upload advertisements to the game. ","5bd129a9":"## PieChart of Free Games by Categories","93046e13":"# Explotary Data Analysis (EDA) for Top Games on Google Play Store","bb28ce1f":"\n******************************************************************************************************************************\n#### As we can see in this pie chart, most of the games in this dataset are available to users for free.\n******************************************************************************************************************************","32c22d8d":"# As a result of these examination; \n\n  ** it was seen that none of the columns in the dataset had null values. \n  \n  ** In order to be sure of this, random samples were taken from our dataset and analyzed.\n     It was observed that there were no abnormal values. \n\n  ** In addition, the types of columns in the dataset are examined.\n     As a result, it was determined that there are 11 numeric columns and 4 categorical columns. \n\n\nAt this point, it has been noticed that: \n  \n  ** The \"installs\" column is seen as an object even though it has numeric values. This column needs to be corrected.","5a36ae24":"\n******************************************************************************************************************************\n#### This figure shows that the installation values and 5 stars rating values of the 20 most downloaded games in the same graphic.\n******************************************************************************************************************************"}}