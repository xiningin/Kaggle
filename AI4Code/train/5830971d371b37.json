{"cell_type":{"e95ae020":"code","2d61ecc5":"code","372d893d":"code","baf0624e":"code","38776a33":"code","555f3f85":"code","96513d0b":"code","3e1ae832":"code","5039b893":"code","b6447c8d":"code","69a970aa":"code","e5aa7aec":"code","6e024274":"code","1ffdde48":"code","a7245fed":"code","1ec6c31a":"code","4d967c79":"code","3faf13d7":"code","dedccfdc":"markdown","88d65647":"markdown","4ebae70a":"markdown","3835f118":"markdown","5ebc22ea":"markdown","2b5138da":"markdown"},"source":{"e95ae020":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\ndata_vw = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vw.csv')\ndata_vw.head()\n","2d61ecc5":"d = data_vw\nd[\"age_of_car\"] = 2020 - d[\"year\"]\nd = d.drop(columns = [\"year\"])\nd[\"price_k\"] = d[\"price\"]\/1000\nd = d.drop(columns = [\"price\"])\nd[\"mileage_k\"] = d[\"mileage\"]\/1000\nd = d.drop(columns = [\"mileage\"])\n\n\nmodels = data_vw.model.unique()\nmodel_mapper = {}\n\nfor i in range(len(models)):\n   model_mapper[models[i]]=i\n\nmodel = d[\"model\"]\nfor i in range(len(model)):\n    model[i]=model_mapper[model[i]]\nmodels = d.model.unique()\n\ntransmissions = data_vw.transmission.unique()\ntransmissions_mapper = {}\n\nfor i in range(len(transmissions)):\n   transmissions_mapper[transmissions[i]]=i\n\ntransmission = d[\"transmission\"]\nfor i in range(len(transmission)):\n    transmission[i]=transmissions_mapper[transmission[i]]\ntransmissions = d.transmission.unique()\n\nfuelTypes = data_vw.fuelType.unique()\nfuelTypes_mapper = {}\n\nfor i in range(len(fuelTypes)):\n   fuelTypes_mapper[fuelTypes[i]]=i\n\nfuelType = d[\"fuelType\"]\nfor i in range(len(fuelType)):\n    fuelType[i]=fuelTypes_mapper[fuelType[i]]\nfuelTypes = d.fuelType.unique()\nd.sample(10)","372d893d":"mileage = d.mileage_k\nprice = d.price_k\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(mileage,price, test_size=0.3 )\n\nmileage = np.array(X_train).reshape((-1, 1))\n\nprice = np.array(y_train)\n\nprint(mileage,price)","baf0624e":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(mileage, price)\nprint(model.coef_,'* X + ', model.intercept_)\ntest= np.array(X_test).reshape((-1, 1))\ny_t= np.array(y_test).reshape((-1, 1))\ny_pred = model.predict(test)\n","38776a33":"import matplotlib.pyplot as plt\nplt.scatter(mileage, price, color='black')\nplt.plot(test, y_pred, color='blue', linewidth=3)\nplt.xticks(())\nplt.yticks(())\nplt.show()","555f3f85":"from sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nimport sklearn.metrics as sm\nimport math\nprint('Intercepts: ', model.intercept_)\nprint('Coefficients: ', model.coef_)\nprint(\"Mean absolute error =\", round(sm.mean_absolute_error(test, y_pred), 2))\nprint(\"RMSE = \" ,math.sqrt(round(sm.mean_squared_error(test, y_pred), 2)))\nprint(\"Mean squared error =\", round(sm.mean_squared_error(test, y_pred), 2)) \nprint(\"Median absolute error =\", round(sm.median_absolute_error(test, y_pred), 2)) \nprint(\"Explain variance score =\", round(sm.explained_variance_score(test, y_pred), 2)) \nprint(\"R2 score =\", round(sm.r2_score(test, y_pred), 2))\n","96513d0b":"d.sample(10)","3e1ae832":"mileage = d.mileage_k\nprice = d.price_k\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(mileage,price, test_size=0.3 )\n\n","5039b893":"#!\/usr\/bin\/env python\nfrom pylab import *\nfrom scipy.optimize import curve_fit\n\nx = np.array(X_train)\ny = np.array(y_train)\ndef func(x, a, c, d):\n    return a*np.exp(c*x)+d","b6447c8d":"popt, pcov = curve_fit(func, x, y, p0=(1, 1e-6, 1))\nprint(popt)\nprint(pcov)","69a970aa":"xx = np.linspace(0, 200, 70)\nyy = func(xx, *popt)\nplot(x, y, 'ko') \nplot(xx, yy)\nX_test=np.array(X_test)\ny_pred = func(X_test, *popt)\nprint (func(0, *popt))\nprint (y_pred)\n","e5aa7aec":"price = np.array(y_test)\nimport sklearn.metrics as sm\nfrom sklearn.metrics import mean_squared_error\nprint('Intercepts: ',func(0, *popt ))\nprint('Coefficients: ', popt)\nprint(\"Mean squared error: %.2f\" % mean_squared_error(price, y_pred))\n      \nprint(\"Mean absolute error =\", round(sm.mean_absolute_error(price, y_pred), 2)) \nprint(\"Mean squared error =\", round(sm.mean_squared_error(price, y_pred), 2)) \nprint(\"RMSE = \" ,math.sqrt(round(sm.mean_squared_error(price, y_pred), 2)))\nprint(\"Median absolute error =\", round(sm.median_absolute_error(price, y_pred), 2)) \nprint(\"Explain variance score =\", round(sm.explained_variance_score(price, y_pred), 2)) \nprint(\"R2 score =\", round(sm.r2_score(price, y_pred), 2))","6e024274":"d.sample(10)","1ffdde48":"featuers = d.drop(['price_k'], axis=1) \nlabels = d.price_k\nX_train, X_test, y_train, y_test =train_test_split(featuers, labels, test_size=0.3)\n\ndata = np.array(X_train)\nprice = np.array(y_train)\nprice_x = np.array(y_train)\n\nmodel = LinearRegression()\nmodel.fit(data, price)\nprint(model.coef_, model.intercept_)\neq=\"\"\nfor i in range(len(model.coef_)):\n    if i !=len(model.coef_)-1:\n       eq=eq +str(model.coef_[i])+'* X'+str(i+1)+' + '\n    else:\n        eq=eq +str(model.coef_[i])+'* X'+str(i+1)\n\nprint(eq) \n","a7245fed":"data_test = np.array(X_test)\nprice = np.array(y_test)\nprint(len(price))\nprint(len(y_pred))\n\ny_pred = model.predict(data_test)\nimport math  \nimport sklearn.metrics as sm\nprint('Intercepts: ', model.intercept_)\nprint('Coefficients: ', model.coef_)\n# The mean squared error metric\nfrom sklearn.metrics import mean_squared_error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(price, y_pred))\n      \nprint(\"Mean absolute error =\", round(sm.mean_absolute_error(price, y_pred), 2)) \nprint(\"Mean squared error =\", round(sm.mean_squared_error(price, y_pred), 2)) \nprint(\"RMSE = \" ,math.sqrt(round(sm.mean_squared_error(price, y_pred), 2)))\nprint(\"Median absolute error =\", round(sm.median_absolute_error(price, y_pred), 2)) \nprint(\"Explain variance score =\", round(sm.explained_variance_score(price, y_pred), 2)) \nprint(\"R2 score =\", round(sm.r2_score(price, y_pred), 2))","1ec6c31a":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nd.sample(10)","4d967c79":"featuers = d.drop(['price_k'], axis=1) \nlabels = d.price_k\n\n\n\nX_train, X_test, y_train, y_test =train_test_split(featuers, labels, test_size=0.3)\n\nx = np.array(X_train)\ny = np.array(y_train)\n\ntransformer = PolynomialFeatures(degree=2, include_bias=False)\ntransformer.fit(x)\nx_ = transformer.transform(x)\n\nx_ = PolynomialFeatures(degree=2, include_bias=False).fit_transform(x)\n\nmodel = LinearRegression().fit(x_, y)\nr_sq = model.score(x_, y)\nprint('coefficient of determination:', r_sq)\nprint('intercept:', model.intercept_)\nprint('coefficients:', model.coef_)","3faf13d7":"X_test = np.array(X_test)\nx_ = PolynomialFeatures(degree=2, include_bias=False).fit_transform(X_test)\ny_pred = model.predict(x_)\nprice = np.array(y_test)\nfrom sklearn.metrics import mean_squared_error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(price, y_pred))\n      \nprint(\"Mean absolute error =\", round(sm.mean_absolute_error(price, y_pred), 2)) \nprint(\"Mean squared error =\", round(sm.mean_squared_error(price, y_pred), 2)) \nprint(\"RMSE = \" ,math.sqrt(round(sm.mean_squared_error(price, y_pred), 2)))\nprint(\"Median absolute error =\", round(sm.median_absolute_error(price, y_pred), 2)) \nprint(\"Explain variance score =\", round(sm.explained_variance_score(price, y_pred), 2)) \nprint(\"R2 score =\", round(sm.r2_score(price, y_pred), 2))\n","dedccfdc":"# ** **Simple Non-linear model (Exponential model using)** **","88d65647":"# ** **Simple linear model ( use any attribute)** **","4ebae70a":"# ** **Multiple linear model (Polynomial model)** **","3835f118":"# ** **Data Transformation** **","5ebc22ea":"# ** **Import Dataset** **","2b5138da":"# ** **Multiple linear model (use at least two attributes)** **"}}