{"cell_type":{"30547988":"code","4f5dfe3a":"code","cdcd51c4":"code","b6abb733":"code","11010872":"code","71fe7092":"code","d40b2e64":"code","a8552c35":"code","1e12537a":"code","db510543":"code","9e4470cc":"code","0c3622b2":"code","36e09c8a":"code","2740efc9":"code","fb90e80c":"code","7ab7a102":"code","71f02b16":"code","b11915f4":"code","fab73479":"code","d54fe5e3":"code","06248ebc":"code","f2272d62":"code","2eadd641":"code","8ff61090":"code","46667cad":"code","da41a73a":"code","c619ae77":"code","f64f4569":"code","1d0cc431":"code","9089f1cb":"markdown"},"source":{"30547988":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","4f5dfe3a":"data = pd.read_csv('..\/input\/Seasons_Stats.csv')","cdcd51c4":"data.info()","b6abb733":"data.corr()  # correlation","11010872":"# correlation map\nf,ax = plt.subplots(figsize=(20, 20))\nsns.heatmap(data.corr(), annot = True, linewidths = 1, fmt = '.1f',ax = ax)\nplt.show()","71fe7092":"data.head(10)  # First 10 data","d40b2e64":"data.sample(10)","a8552c35":"data.columns  # Columns","1e12537a":"data.shape  # Data shape","db510543":"data.dtypes  # Data types","9e4470cc":"data.describe()  # Description of datas","0c3622b2":"# Line Plot\ndata.PTS.plot(kind = 'line', color = 'b', label = 'Points', linewidth = 1.5, alpha = 0.4, grid = True, linestyle = ':')\ndata.AST.plot(kind = 'line', color = 'r', label = 'Assists', linewidth = 1.5, alpha = 0.4, grid = True, linestyle = '-.')\nplt.legend(loc = 'upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Points - Assists Line Plot')\nplt.show()","36e09c8a":"# Scatter Plot \ndata.plot(kind = 'scatter', x = 'PTS', y = 'WS', alpha = 0.3, color = 'red')\nplt.xlabel('Points')\nplt.ylabel('Win Shares')\nplt.title('Points - Win Shares Scatter Plot')\nplt.show()","2740efc9":"# Histogram\n# G : Game\ndata.G.plot(kind = 'hist', bins = 50, figsize = (10, 10))\nplt.title('Game Histogram')\nplt.xlabel('Number of Player')\nplt.show()","fb90e80c":"x = data['PTS'] > 2500  # Who score over 2500 points\ndata[x]","7ab7a102":"totalScore = data.PTS + data.AST   # totalScore = Points + Assist\ndata[\"TotalScore\"] = totalScore\nnewData = data.copy()\nnewData.sort_values('TotalScore', axis = 0, ascending = False, inplace = True, na_position = 'last')\nnewData[\"ScoreLevel\"] = [\"Legendary\" if i > 4000 else \"Perfect\" if i > 3000 else \"Very Good\" if i > 2000 else \"Good\" for i in newData.TotalScore]\nnewData.loc[:1000,[\"Player\",\"Year\",\"Pos\",\"TotalScore\",\"ScoreLevel\"]]","71f02b16":"print(data['Pos'].value_counts(dropna = False))  # Frequency of player positions","b11915f4":"data.boxplot(column = 'MP') # Minute Played\nplt.show()","fab73479":"# melting\ndata_new = data.sample(5)\nmelted = pd.melt(frame = data_new, id_vars = 'Player', value_vars = ['PTS', 'AST'])\nmelted","d54fe5e3":"# Reverse of melting\n# pivot()\nmelted.pivot(index = 'Player', columns = 'variable', values = 'value')","06248ebc":"data.info()","f2272d62":"data['Player'].value_counts(dropna=False) # counts of player values\n#There are 67 nan values","2eadd641":"data.dropna(axis = 0,subset = ['Player'],inplace = True) # drop nan values","8ff61090":"assert data['Player'].notnull().all() # returns nothing because we drop nan values","46667cad":"data['3P'].isnull().sum() # counts of nan values of column '3P'","da41a73a":"data['3PA'].isnull().sum() # counts of nan values of column '3PA'","c619ae77":"data['3P%'].isnull().sum() # counts of nan values of column '3P%'","f64f4569":"# Fill columns with average\n# 3P: 3-Point Field Goals, 3PA: 3-Point Attempt Field Goals, 3P%: 3-Point Field Goal Percentage\ndata['3P'].fillna(data['3P'].mean(),inplace = True)\ndata['3PA'].fillna(data['3PA'].mean(),inplace = True)\ndata['3P%'].fillna(data['3P%'].mean(),inplace = True)","1d0cc431":"data.info()","9089f1cb":"**Line Plot - Scatter Plot - Histogram Plot**"}}