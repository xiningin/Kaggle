{"cell_type":{"64692def":"code","9d377364":"code","73e24bb5":"code","a7df7859":"code","f8b03626":"code","a9c69844":"code","d32562f7":"code","ca8bdcec":"code","530361d5":"code","7de1c3b4":"code","9e600dbf":"code","47c8ff0f":"code","708024f8":"code","3d994ba0":"code","5d6cb816":"code","01b920d2":"code","b5b4673f":"code","089e9cb4":"code","eba28bce":"code","8418a5b9":"code","7ae181c7":"code","bbcd5031":"code","8a29b4fa":"code","4a1e88bf":"code","dbc67081":"code","8547a57f":"code","796b0ff3":"code","fe902c33":"code","c82a5497":"code","c001581e":"markdown"},"source":{"64692def":"from sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nimport matplotlib.pylab as pylab\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport matplotlib as mpl\nimport xgboost as xgb\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport sys\nimport csv\nimport os","9d377364":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","73e24bb5":"warnings.filterwarnings('ignore')\n%matplotlib inline","a7df7859":"df_train=pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')","f8b03626":"df_train.shape","a9c69844":"df_train.columns","d32562f7":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","ca8bdcec":"#function for missing data\ndef missing_data(df_train):\n    total = df_train.isnull().sum().sort_values(ascending=False)\n    percent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return(missing_data.head(20))","530361d5":"missing_data(df_train)","7de1c3b4":"df_train.winPlacePerc=df_train.winPlacePerc.fillna('0.4782')","9e600dbf":"df_train['matchType'].value_counts()","47c8ff0f":"df_train=df_train.drop(['Id', 'groupId', 'matchId'],axis=1)","708024f8":"df_train.info()","3d994ba0":"df_train['winPlacePerc']=df_train['winPlacePerc'].astype(\"float\")","5d6cb816":"encoded=pd.get_dummies(df_train)","01b920d2":"encoded.head()","b5b4673f":"dependent_all=encoded['winPlacePerc']","089e9cb4":"independent_all=encoded.drop(['winPlacePerc'],axis=1)","eba28bce":"x_train,x_test,y_train,y_test=train_test_split(independent_all,dependent_all,test_size=0.3,random_state=100)","8418a5b9":"linregr = LinearRegression()\nlinregr.fit(x_train, y_train)\npred_linreg = linregr.predict(x_train)","7ae181c7":"\nprint(\"accuracy score for train using linearregression is\",linregr.score(x_train,y_train))\nprint(\"accuracy score for test using linearregression is\",linregr.score(x_test,y_test))","bbcd5031":"#random Forest\nrfr = RandomForestRegressor()","8a29b4fa":"rfr.fit(x_train,y_train)","4a1e88bf":"predicted = rfr.predict(x_train)","dbc67081":"print(\"accuracy score for train using randomforest\",rfr.score(x_train,y_train))\nprint(\"accuracy score for test using randomforest\",rfr.score(x_test,y_test))","8547a57f":"#decisiontreeregressor\ndtr = DecisionTreeRegressor()","796b0ff3":"dtr.fit(x_train,y_train)","fe902c33":"predicted=dtr.predict(x_train)","c82a5497":"print(\"accuracy score for train using Decision_tree\",dtr.score(x_train,y_train))\nprint(\"accuracy score for test using Decision_tree\",dtr.score(x_test,y_test))","c001581e":"**PUBG** Win Prediction"}}