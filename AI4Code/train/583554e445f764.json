{"cell_type":{"2c1befe3":"code","db08ca1e":"code","1d899397":"code","6b5d9211":"code","120f0df0":"code","b02d877d":"code","4451c7e9":"code","9d1ce5b8":"code","18e038f5":"code","4631c472":"code","8c26d669":"markdown","8e96c8a2":"markdown","fc7efb95":"markdown","cb152df6":"markdown","a78ec5ff":"markdown","74f175f8":"markdown"},"source":{"2c1befe3":"!pip install mplfinance\nimport mplfinance as mpf","db08ca1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport pathlib\nfrom tqdm.auto import tqdm\nimport json\nfrom multiprocessing import Pool, cpu_count\nimport time\nimport requests as re\nfrom datetime import datetime, timedelta, timezone\nfrom dateutil.relativedelta import relativedelta, FR\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nfrom matplotlib_venn import venn2, venn3\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('seaborn-colorblind')\n\nimport warnings\nwarnings.simplefilter('ignore')","1d899397":"df = pd.read_csv('..\/input\/nmrusdt-binance-daily-ohlcv\/binance_nmrusdt.csv')\ndf = df.drop_duplicates(subset=['time'], keep='last')\nprint(df.shape)\ndf.head()","6b5d9211":"df.tail()","120f0df0":"# convert dataframe for mplfinance\ndf.index = pd.to_datetime(df['time'])\ndel df['time']\ndf.columns = ['Open', 'High', 'Low', 'Close', 'Volume']\n","b02d877d":"# plot candles via mplfinance (daily, with 5 & 25 days moving average)\nprint('daily')\nmpf.plot(\n    df\n    , type='candle'\n    , volume=True\n    , figratio=(12,4)\n    , mav=(5, 25)\n    , style='yahoo'\n)","4451c7e9":"# weekly\nd_ohlcv = {'Open': 'first',\n           'High': 'max',\n           'Low': 'min',\n           'Close': 'last',\n           'Volume': 'sum'}\n\ndf_w = df.resample('W-MON', closed='left', label='left').agg(d_ohlcv)\nprint(df_w.head())","9d1ce5b8":"print('weekly')\nmpf.plot(\n    df_w\n    , type='candle'\n    , volume=True\n    , figratio=(12,4)\n    , mav=(5, 25)\n    , style='yahoo'\n)","18e038f5":"df['day'] = pd.to_datetime(df.index).day\ndf['month'] = pd.to_datetime(df.index).month\ndf['year'] = pd.to_datetime(df.index).year\ndf['dayofweek'] = pd.to_datetime(df.index).dayofweek\ndf['ym'] = df['year'].astype(str) + '_' + df['month'].astype(str)\nprint(df.shape)\ndf.tail()","4631c472":"buys = df.query('day == 25')['Close'].cumsum().values\nsells = df.query('day == 5')['Close'].cumsum().values\nyms = df.query('day == 5')['ym'].values\nassert len(buys) == len(sells)\n\nplt.plot(yms, sells - buys, color='r', lw=7, alpha=0.7)\nplt.xticks(rotation=45, ha='right')\nplt.xlabel('order closed year-month')\nplt.ylabel('cumulative profits (USD)')\nplt.title('backtest')","8c26d669":"# Plot candles","8e96c8a2":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBISERISFBARGBgYGBgZHBwZGRoaGhkaGBwaHBkYIRkhITAmHB44HxoYJjsnKy8xNTU1GiU7QDszPy40NjEBDAwMEA8QGhIRGDQhJSE0ND02MTQ0NDQ0NjQ0NDE0MTY2MTQ0MTQ0NDQ0NDQ0NDE9MTQ0MTE0MTQ0NDQxNDQ2Nv\/AABEIAJ8BPQMBIgACEQEDEQH\/xAAcAAEAAgIDAQAAAAAAAAAAAAAAAQIDBAUGBwj\/xAA8EAACAQMDAgMGBAQFAwUAAAABAgADBBEFEiExQQZRYRMicYGh8AcUMrFCUpHBFWLR4fEjJJIzNVOCg\/\/EABYBAQEBAAAAAAAAAAAAAAAAAAABAv\/EABwRAQEBAQEBAAMAAAAAAAAAAAABETEhQRJRcf\/aAAwDAQACEQMRAD8A9I0LRaFlQShRRVCqASANzNjlmP8AExM5KIgIiIAGWEqy5+MKYFpMiTAREQJiIgTERAmIiAlpWWgIiICIiAiIgJVhkYyR6jGfrLRAxo2eDjcMfP1HOcZyOfKZJSome+COQRjIOCMjPHQmRTfPBwGHUZ+o74zxn0gZIiICIiAiIgIiQTiAY4kygXPJ69h5f78nmXkltUnTvFf4fWeo1Eqsvs3AIZkwpfOMbuOSMHnrz8J3GJUa8RIJgTEAxAmQV\/rJkwIU\/wBZaVYf1kq39YEyCcQxxCr3PX9vvj+kAo7nr+0tEQJiIgTERAS0rLQEREBERAREQEREBKVEz3II5BHY4I6dD1PWXiBjR88HAYdRn4cjpkc4ziZJjdM9DgjofkRyO456GKdTPBGCOo58geCQMjnrAsSR2+Pn8vPtJBzyJMxnjnt368fD6cSXxWSJAMEgdZUCcdZRRnkj4Djj\/fnElRnk\/IeXX68\/SXme+rwiImkIiIGvEiTAqRjkffrLAxK4x0\/p\/eBeQ74GcH\/c8CQ74Gevl6k9BIVOdxxnnHHQE9B9M+eIF0zjnGee2OM8Dr5d5LHH39IJxIUdz9\/fEAB3P\/H3xLRECYiIExEQJiIgJaVnVfGfji10xNrn2lcjKUlPvejO38C+p5PYHBgc\/qmpUbSk9evVVEUcs30AHUnyAyTOhaf+MFlUuDSejVp0icLVYg\/NkAyq+oLdecTzjWLy61C6sq+pVTStq7e4ykBEpqwFQouTtPIG5gT0znGJtUNE0W5W+S1fU\/aW9tcV1ao1A039iOP0ruIJI8uIH0HRqq6h0ZWVgCrKQVYHkEEcEesyT5p8FeObrTGCg+0tyctSY8DPJZG\/gb6HPI7j33w54kttQoirb1M4xuQ4FRCf4WXt355BxwTA5mIiAiIgIiICY6iZ5BwR0PPkRyARkc9JkiBRHz2II6j5A8Hv1HIl5iqJnkYDDODjPyPTI74z2k03znggjgg9uAevQ8EdIDG34fPjjt6dOBL46SZj\/T8P24\/bjoPOZ5\/F6uTiTIIzxKhsHB+R\/t8efpLbnReIiVCIiBrxEQEMcAnBPoO\/pEQMaqQdxAzz5cAnt9CfhMwkE94WAxzmWkSYCIiBMRECYiIEyGYAEkgADJJ4AA6nM43XNctrGia1xVVF6AdWdv5VXqzf8nAng3jf8QrnUS1NM0bbPCA+84HQ1GHXz2jgepGYHePF\/wCJbO5s9KVq1Vsg1EUv+kEkU1AO8gAndjAAyM9R5Fq1jd0333VG6R6hZs10qKzkY3HLjLHkZPqJv+EtWt7OubmrSrvURc0RTqGmu85B3svvbdp7HnkEEGcvR1Oprt41O8rqjvSqLbAe7TSsSrIvfhtpUk5JyO4EDF4qu6dXTdEp06lNnSlXVlVgzIzOmAyg5UnBxnrF21Kj+XfTqy0zeUGtbiixDvSZ2VaincCwRuMEDI2nzxNXXtP\/AMLqWapUxeUwK1bBDCk7FWpU8cqWUDJ653dxiWudLqU6um3lWsKjXtT2xwuCG9qu7PYkls8AQOU\/Lf4PVNjd6VaXVSo6slQs2GVgqqikr03BhzjkntgzrtS7u9Pv6rIGtqyO3uKQQgY7hTPUOmCODkHAnoHjq+pXdXUrOvUC1rRjcWrkgErsRqtvnr\/mHfPouD0jTNb09KYF1pJuauSWqtd1kLZPAKqCOBgZ74gev+BvxKoX22hX20bjgDnFOqf8pPRv8p8+Ce3oE+U9f1Czr+z\/ACun\/lQu7f8A9epW3527f1j3cYbp13ek9C8M\/iFdabUFlqiVGVQuGOGq0lYAruwffXBB\/mHrwIHtUTXsrynWprVpOrowyrKQVI+M2ICIiAiIgJiqU88jAYZwcfQ99ucHA8pliBSm+7PGCOCDjIPXBx6EH5y8xVEJ5H6gDjyPoeOmcHjylqbhs+YOCOMg9cHHTgg\/OBCrjgDj5ccftx9ZdhkYkxJJOLqgODg\/I\/29Dz85eVZcjEgE5wfXB9Psj4yc6LxETSNeIiAgnHJgnEqBnk\/L\/X94EgZ5PyH9\/wB5eRJEBJkSYCIiBMRECYiIHzF4\/wBSq19TvPauzCnXq00BJwqI5VQB24GTjqSTMth4z9lSSl\/hWjPsULuqW252wMbmbfyx7mbGoeJ7zT9S1X8rWCe0uq2\/KI+dlWpt\/Wpx+punnN\/xh+I1S9tFs0RhTYJ7R6mw1XZSr\/wKqKu4dhk4HTkEOGW6uNSNW3t9Ms99R1qf9vQ2tTCIqbVbdhKZxuIPVmPnGpVLelp9vQVUW9pXNQ1GVRvCjO0e2XhsHHAY4InKeC9bqG1r6c1lc1qL5LPZqwuEznBYqMVFzxh+xPUACdfsvDd1dPWWzt69VabbSWVUZc5wGTcdre6eAT0gcjpn+HXVGu19e1aN01ff7X2b1g6MvvKVUgZ385Ppj0zeL761rJplna3DVRQptTaoabUwS7rjCNz2\/bny2ba8016y2g8NM1fcUK\/nq4YuuQwxjAOQZW88I3q03ZNDrU3Fw1ZX9qamygAStt7PPv4ODv8A1HGMQOH1bw4KGpvp7XVMBXVTWqDYg3KH3Nydo5x1nJ\/h5bLTv61yxV0saVeuSOVcoCqYPqW3D4RZUqWpjVNTvqtRTSFAkUFX3mq5ppw2cKNi5+JnW9ItaNV3WtcrQUIzBijOGdcbUwp4zzz2xA7R42uGvbHTdSc7qjLUt6zDAG+kxZCQMAEqzNwJbUNWsNQ1n2lylanb1USmSx2NSYIoWoQCQVyO\/GGz2nA+HdLtLgVPzOopa7du0NSepv3btx90jbjA\/wDKch41SjUK3A1dL2qxVGAoGkVVVwreR6AdO8Ds34O3VSjqlxaLXD0itQnaco7Iyhaq\/Ed\/I89J7lPnz8E\/\/dv\/AMKv7pPoOAiIgIiICIiAmKqh6r+oA4ycA+h4OBnHIGeJliBRKgOcduCO4+I7cYPzl5Rl5ByRj6jyx8hzLwEgjPaQWx8+gkIvc9T1\/wBPhyZN9xV4iJUa8RIzAgc8\/f31loiBMkSJMBJkSYCIiBMRECYiIHy94hFI6xeCsWFM3tbeVALhPbNuKg8E4zOS8F6da17rUUKe0pJaXT0i4w3uFfZuQOjbT9TN240a1rXHiC6uWuAtrcnAo7Ms1evVQZ3jGAwXpjgmdBxA7xoGs\/4dpZr0qi\/mK93Tyqvh\/YW43cgHKhn3KQRyG7zYvbMVtfaha3rJSu6gqB6L5\/8AUUuchWxkOXGD0mhZaloS0qS1dMu2qBVDstcgM+BuYDdwCckD1lPCt7aJrdvWpj2FuKuR7Vx7g2EHc5OP1Z5J7iBq6z4dubTUxZlz7V6iinUyy7xVbalTI5GSecZwQw5nY\/BftbTVqn5zUqSLaGoKi1K74qEo6gU1I9\/DYOOD0xzNLVvEtKtQqK1QfmbO6NS0qD3g9JqpJQnBDBSFYZ4wABwDngLG0vdTvGZKRrVnfe52gKCTkliMKi8enkIG54W1v8nb3a1bD8zb1zRV8s6IGpFmQb1BGfezj0Ez6tUS6twLbw+9Elgwqoa1QFRnIGVwQfPPaRrC16l8dOWvZrTr3FEMlrn8qtVtqZAxnI7475nbrS0uqSVrS08SBntkqn2IolcClneu85xzxnnrA8namwAYqwDZwSDg464Pedr07xHYW9pQpnSqFeuPaGs9YcEliaewgkkbcA5A5HfrJ1yulxpuiW9FhUqoLpWpp77qz1EKgqOckAkCcf4g8L1LGlTavWoLWc80A26qiEZDPgbV+GfLGecB6Z4c0+jb+JnShSWmhtA+1c7QXVC2M9BmesTxb8PdcN\/r5uDTCf8AalNobd+gIuc4HXr0ntMBERAREQEREBERASrNiGbEhR3PX6D0+vWZt+RRR3PU\/ePrLxEsmIRESjXjEiTAr0+H7en35S0ESvT4ffEC8mVZcjHPyJH1EqjH9LdeOcHB9fLPB4ycQMkmRJgIiTAREQJiIgeAatrFTTNQ1ejWsqNandVvaFaobayCpUqUmUjgj3j8x6GcBrniGhc0vZppdnbtuDb6e7dgZyvPYz6J8Q+HrXUKJo3FMMOdrDh0P8yt2P0PcGeGeJ\/AlTTK6VKyvWst67np4DhSeUYHhW7A\/pPHOeAG5peo6b+UpajURfzVpTFuKOBitUxi3rn0VQ2fVB0wu7rPheyqVhcpT083LGiQCCR7A8kVc9C3BwpIz2mTVX0ypVthZ216F3\/9VajKzOuUwqbScNgP\/UTuN7440l7ZbMWN\/SoLwadJ1phj0O8htznz3E5IyeYHQfDOivf3dK0R1Rqm\/DMCQNiM5yBz0Uj5ztXhvxdd2ululPTbWrbIxSq7qTuaocgVAG97hlXJGMACa+gXaU9UpXumaZe1aVBTup+87bqiVEyWVW2jnIz\/ACmcZa\/4jptK4D2dZKVwnsXFejUCNnO0gnGHHvFTnuYHMOLrV7Vxa6HYoqON1SgiU3BAJ2ZZgSMEEgek634b1xrKpVqLTV\/aUKlHBJXAqAe9wOox0nZNM8SUrK30enSqglLlrm52g+6WIphenJ9iXBxmcbR\/w9dWqo7K9nUeqgdRgIlYHY4yOCpZecfwn4QNbwd4judPrlrajSqVHAQBkZ2xnOECsDk\/2nK3H4g1i779L0jeS24tanfu\/iJy+d2fOYvE1kmkva0KFfdd0merVqpjClwooopPPCAsQf8A5PXjmvBv4bXF8\/5u+L06TsX2nirWLHJb\/IpJzk8nsOQYFfwQsqjag9YI3s0ourNj3QzFNq5\/m4Jx5Ce9TU06wpW1JaNCmqIowFUYA8z6nuSeTNuAiIgIiICIiAiVZsDP36CSue\/35Sb7gjbzmWlH6dceXx+Hf4SEOTzwfLn059e3w6SblxcZIiJpCIiBrxEQEGIgQDjg9O3+n7ASWQHr8vMfOTBbH31gVpsejdQBkgYB9R1xyDxnImSUamDjPbkHuO3HlxkfORTc9D+oYz5H1HJwM5688QMkRECYiIExEQJlKlNWUqyhlYEEEAgg9QQeol4geTeKvw1qUKovtJYo6Nv9jxwf5qZbj\/6t8j0E6JYX+lhW\/P2d890Xc1GVwgLF2JBUkbW7EY65n0pOo+NfAdtqSl8eyuAPdqqP1YHAcfxL69R2PYh4XqGomhVL6f8AnrWjUC4BqOrPtHJ3KcMMk464z6zsVW\/qN4erm4vRVqVq9M01esalRVRirAoxJXlSfgROP8SrdWVoulXtqCadRqlvWDcKh\/Wqnb76EnOCQQSMjgCaTaZStLbS9QdPbC4a4L0W91CKDhAu4c85z8oHLeBPDunVqZub2+tl2swW3astIsQBgu\/6lQk\/wj59pxOstX1G\/NKhbW5ZSaVNLVB7MojFQwfA3rjne2Bj+UcTP4Y8HXOq1nejTFGhvYl2BKICSdid3YDjA8hkjM988MeF7XTqWygnvHG525eoR\/M3l5KMAeUDqvgj8M6VqVubwivccMAfep0yOmM\/rYfzHgcYHGZ6NEQEREBERAREQEqzADJ+\/T4wzYGZAHOT8h9\/AfCS35FAOcn1+Q+8SxOBmAc9DK7cnJ+X05+PEnzwAMnJ+Q\/v8eB8Idc9OD2P31HpLxL+Mw1VWz9\/eZaUZc8jr2P326ceklWz2iX5RaIiVGvERAREE4gCcQo7mQo7n\/iXEBIdAcehyDxkHpxn0JHzkyYFEbPBxuAGfX1HPTORz5S8q6Zx2I5B8u3f0JloExEQJiIgTERAS0rLQNDWNJoXdFqFekro3Y9QezBuqt6jmee2P4OWyXAerdVatBSStIrtPJ6NUDcjz2qufTv6jEDFbW6UkVERURQAqqAqqB0AA4AmWIgIiICIiAiIgJDHAz9\/0gnAzKhcnJ+Q\/v8AHj6yW\/pQDJyfkPvqePlLxESYjGeOR8x\/cevHT1lwcyZjbjkdO45\/qP8AQdcyc9XrJERNISpXkHuP28vh0\/pLRFmhERA14nB+FPEdHULda1MndgB1II2vgZXOMMM9xOcgCZUDuf8Aj\/frzLERAmSJEkQEmRJgIiIExEQJiIgTERAS0rLQEREBERAREQEREBERAREQEREBERAxEY5HTuP7j68Y5zMsSAAOgkkxUxESoRE878b\/AImUbCutvTQ1XAJqfwhem0ZYcnGenHT5B\/\/Z)\n\nThis notebook is demonstrating a simple trading strategy to make profit, usinging the OHLCV data of NMR\/USDT fetched from [Binance](https:\/\/accounts.binance.com\/en\/register?ref=121841880).","fc7efb95":"# Libraries","cb152df6":"# Trading strategy EDA\nBuy 1 NMR in 25th, Sell that 1 NMR in 5th","a78ec5ff":"DONE!","74f175f8":"# Load data"}}