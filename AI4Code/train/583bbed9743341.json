{"cell_type":{"6e952b90":"code","3d7fded9":"code","4984282d":"code","23ad7520":"code","f4ddb2e7":"code","e8546270":"code","767f2a1e":"code","20c05448":"code","45b16352":"code","cc6cdbad":"code","299a2a7e":"markdown","be4f9ddb":"markdown","2617e1b6":"markdown","5cf9bcb6":"markdown","18e3879b":"markdown","36df38ff":"markdown","7a8d44e5":"markdown","b3df5e86":"markdown"},"source":{"6e952b90":"# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder, normalize, StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3d7fded9":"# Reading the dataset\ndf = pd.read_csv(\"..\/input\/logistic-regression\/Social_Network_Ads.csv\")\ndf.head()","4984282d":"X = df.drop([\"User ID\", \"Purchased\"], axis=1)\ny = df[[\"Purchased\"]]","23ad7520":"sns.pairplot(df.drop([\"User ID\"], axis=1))","f4ddb2e7":"features_num = [\"Age\", \"EstimatedSalary\"]\nfeatures_cat = [\"Gender\"]\n\npreprocessor = ColumnTransformer([(\"OneHotEncoder\", OneHotEncoder(), features_cat),\n                                 (\"Normalization\", StandardScaler(), features_num)], remainder=\"passthrough\")\n\nX = preprocessor.fit_transform(X)","e8546270":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","767f2a1e":"model = LogisticRegression()\nmodel.fit(X_train, y_train)","20c05448":"model.score(X_test, y_test)","45b16352":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix","cc6cdbad":"# 1. Defining the param gird\nparam_grid = {\n    \"penalty\": [\"l1\", \"l2\", \"elasticnet\", \"none\"],\n    \"C\": np.logspace(-3, 3, 7)\n}\n# 2. Defining the RandomizedSearchCV class\nmodel_rscv = RandomizedSearchCV(model, param_grid, cv=10)\nmodel_rscv.fit(X_train, y_train)\n\n# 3. Getting the best params and score\nprint(model_rscv.best_params_)\nprint(model_rscv.best_score_)\n\n# 4. Getting the prediciting for testing data\ny_pred = model_rscv.best_estimator_.fit(X_train, y_train).predict(X_test)\n\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test, y_pred))","299a2a7e":"Even after performing RandomizedGridSearchCV, we don't see improvement in the model (~88%). We will stick with these parameters.","be4f9ddb":"## 3: Feature Engineering","2617e1b6":"## 2: EDA\n\nPlotting pairplot to visualize the distribution of data","5cf9bcb6":"### RandomizedSearchCV","18e3879b":"# Logistic Regression on Social Network Ads","36df38ff":"## 1: Importing libraries and reading the dataset","7a8d44e5":"## 4: Training and Fitting the model","b3df5e86":"## 5: Hyperparameter Tuning\n\n\nHyperparameter tuning is an important step in model building, it defines the parameters of an estimator till a max accuracy is reached. We will be performing 2 hyperparameter tuning operations one after the other\n- RandomizedSearchCV - To arrive at a paramter combination that will be likely close to the best combination, this process will occur quickly and help us difine our GridSearchCV parameters\n- GridSearchCV - This is run once the RandomizedSearchCV is complete, this will be an extensive search to find the best paramters\n"}}