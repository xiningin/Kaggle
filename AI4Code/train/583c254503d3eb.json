{"cell_type":{"b4933fc2":"code","4ddb8d24":"code","548f435c":"code","d2c8b43f":"code","97a249c0":"code","af41a1be":"code","def7e10f":"code","4e69ad3c":"code","15199f67":"code","9ebe0f69":"code","0b178360":"code","3161b897":"code","4a907d7a":"code","1d1c3791":"code","fd899f55":"code","df030290":"code","58ca8355":"code","e07514c4":"code","a1eeade2":"code","96bd9853":"code","a8a10cdc":"code","b450a67c":"code","1323d29c":"code","a65eeae1":"code","0fea4622":"code","8a5d6069":"code","88af6b53":"code","ae1e6a29":"code","03e92701":"code","0782fc49":"code","0aa529c7":"code","dba85194":"code","f2089640":"code","9c0be3f5":"code","dc7e6551":"code","a1da3f2d":"code","0ead4614":"code","a8a3beba":"markdown","bd12547c":"markdown","2a29e1c0":"markdown"},"source":{"b4933fc2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ddb8d24":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score, roc_curve, confusion_matrix, classification_report","548f435c":"df=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","d2c8b43f":"df.head()","97a249c0":"df.describe().T","af41a1be":"from pandas_profiling import ProfileReport \n\nprofile = ProfileReport( df, title='Pandas profiling report ' , html={'style':{'full_width':True}})\n\nprofile.to_notebook_iframe()","def7e10f":"#Check Missing Values : \ndf.isna().sum().plot(kind='bar')","4e69ad3c":"#Now let's look to the data : \nplt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(12, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","15199f67":"#Now , replce 0 values with nan so we can impute the values : \ndf[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","9ebe0f69":"#Check Nan values : \n#Check Missing Values : \ndf.isna().sum().plot(kind='bar')","0b178360":"#To best impute missing data , we will divide our data sets into two :\n#Diabetes & NO Diabetes :\nDiabetes = df[(df['Outcome'] != 0)]\nNo_diab = df[(df['Outcome'] == 0)]","3161b897":"Diabetes['Glucose'].mean()","4a907d7a":"Diabetes.hist(figsize=(15,12));","1d1c3791":"No_diab.hist(figsize=(15,12));","fd899f55":"# #according to the data distribution :\n# # we will impute missing values with median , according to Diabetes and no diabetes data sets : \n\n# df.loc[(df['Outcome'] == 0 ) & (df['Insulin'].isnull()), 'Insulin'] = No_diab['Insulin'].median()\n# df.loc[(df['Outcome'] == 1 ) & (df['Insulin'].isnull()), 'Insulin'] = Diabetes['Insulin'].median()\n# df.loc[(df['Outcome'] == 0 ) & (df['Glucose'].isnull()), 'Glucose'] = No_diab['Glucose'].median()\n# df.loc[(df['Outcome'] == 1 ) & (df['Glucose'].isnull()), 'Glucose'] = Diabetes['Glucose'].median()\n# df.loc[(df['Outcome'] == 0 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = No_diab['SkinThickness'].median()\n# df.loc[(df['Outcome'] == 1 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = Diabetes['SkinThickness'].median()\n# df.loc[(df['Outcome'] == 0 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = No_diab['BloodPressure'].median()\n# df.loc[(df['Outcome'] == 1 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = Diabetes['BloodPressure'].median()\n# df.loc[(df['Outcome'] == 0 ) & (df['BMI'].isnull()), 'BMI'] = No_diab['BMI'].median()\n# df.loc[(df['Outcome'] == 1 ) & (df['BMI'].isnull()), 'BMI'] = Diabetes['BMI'].median()\n\n","df030290":"#according to the data distribution :\n# we will impute missing values with median , according to Diabetes and no diabetes data sets : \n\ndf.loc[(df['Outcome'] == 0 ) & (df['Insulin'].isnull()), 'Insulin'] = No_diab['Insulin'].mean()\ndf.loc[(df['Outcome'] == 1 ) & (df['Insulin'].isnull()), 'Insulin'] = Diabetes['Insulin'].mean()\ndf.loc[(df['Outcome'] == 0 ) & (df['Glucose'].isnull()), 'Glucose'] = No_diab['Glucose'].mean()\ndf.loc[(df['Outcome'] == 1 ) & (df['Glucose'].isnull()), 'Glucose'] = Diabetes['Glucose'].mean()\ndf.loc[(df['Outcome'] == 0 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = No_diab['SkinThickness'].mean()\ndf.loc[(df['Outcome'] == 1 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = Diabetes['SkinThickness'].mean()\ndf.loc[(df['Outcome'] == 0 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = No_diab['BloodPressure'].mean()\ndf.loc[(df['Outcome'] == 1 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = Diabetes['BloodPressure'].mean()\ndf.loc[(df['Outcome'] == 0 ) & (df['BMI'].isnull()), 'BMI'] = No_diab['BMI'].mean()\ndf.loc[(df['Outcome'] == 1 ) & (df['BMI'].isnull()), 'BMI'] = Diabetes['BMI'].mean()\n\n","58ca8355":"df.isnull().sum().plot(kind='bar')","e07514c4":"df.hist(figsize=(15,12));","a1eeade2":"df.columns","96bd9853":"print(df.shape)","a8a10cdc":"#Spliting Data : \n\nx=df.iloc[:,:-1].values\ny=df.iloc[:,-1].values\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.20, random_state = 0)\n\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","b450a67c":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\n\nx_train_std = ss.fit_transform(x_train)\nx_test_std = ss.transform(x_test)","1323d29c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nknn = KNeighborsClassifier()\n\nparam_grid = {'n_neighbors':[5,10,15,25,30,50]}\n\ngrid_knn = GridSearchCV(knn,param_grid,scoring='roc_auc',cv = 10,refit = True,n_jobs=-1)","a65eeae1":"grid_knn.fit(x_train_std,y_train)\nprint(\"Best Score ==> \", grid_knn.best_score_)\nprint(\"Tuned Paramerers ==> \",grid_knn.best_params_)\nprint(\"Accuracy on Train set ==> \", grid_knn.score(x_train_std,y_train))\nprint(\"Accuracy on Test set ==> \", grid_knn.score(x_test_std,y_test))","0fea4622":"y_pred_K = grid_knn.best_estimator_.predict(x_test_std)\ncnf_matrix = confusion_matrix(y_test, y_pred_K)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","8a5d6069":"print(classification_report(y_test, y_pred_K))","88af6b53":"from sklearn.svm import SVC\n\nsvc = SVC(probability=True)\n\nparam_grid = {'kernel':['rbf','linear'],'C':[0.01,0.1,1,0.001],'gamma':[0.1,0.01,0.2,0.4]}\n\ngrid_svc = GridSearchCV(svc,param_grid,cv = 10,refit = True,scoring='roc_auc',n_jobs=-1)","ae1e6a29":"y_pred_s=grid_svc.fit(x_train_std,y_train)\nprint(\"Best Score ==> \", grid_svc.best_score_)\nprint(\"Tuned Paramerers ==> \",grid_svc.best_params_)\nprint(\"Accuracy on Train set ==> \", grid_svc.score(x_train_std,y_train))\nprint(\"Accuracy on Test set ==> \", grid_svc.score(x_test_std,y_test))","03e92701":"y_pred_s = grid_svc.best_estimator_.predict(x_test_std)\ncnf_matrix = confusion_matrix(y_test, y_pred_s)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","0782fc49":"print(classification_report(y_test, y_pred_s))","0aa529c7":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state=0)\n\nparam_grid ={\n    'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n    'max_iter': list(range(100,800,100)),\n    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n}\n\ngrid_lr = GridSearchCV(lr,param_grid,scoring='accuracy',cv = 10,refit = True)","dba85194":"y_red_l=grid_lr.fit(x_train_std,y_train)\nprint(\"Best Score ==> \", grid_lr.best_score_)\nprint(\"Tuned Paramerers ==> \",grid_lr.best_params_)\nprint(\"Accuracy on Train set ==> \", grid_lr.score(x_train_std,y_train))\nprint(\"Accuracy on Test set ==> \", grid_lr.score(x_test_std,y_test))","f2089640":"y_red_l = grid_lr.best_estimator_.predict(x_test_std)\ncnf_matrix = confusion_matrix(y_test, y_red_l)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","9c0be3f5":"print(classification_report(y_test, y_red_l))","dc7e6551":"from sklearn.ensemble import VotingClassifier\n\nclassifiers = [('knn',grid_knn),('tree',grid_lr),('svc',grid_svc)]\n\nvtc = VotingClassifier(classifiers)","a1da3f2d":"\nvtc.fit(x_train_std,y_train)\ny_pred_v=vtc.predict(x_test_std)\nprint(\"Accuracy on Train set ==> \", vtc.score(x_train_std,y_train))\nprint(\"Accuracy on Test set ==> \", vtc.score(x_test_std,y_test))","0ead4614":"\nprint(classification_report(y_test, y_pred_v))","a8a3beba":"**Now let's try combining these results and see if we can do better :**","bd12547c":"**From the above EDA :**\n\n**we have the following observations :**\n\n\n1-Columns ( Glucise , Blood Pressure , Skin Thickness , Insulin , BMI ) has no logical 0 values , specially skin thickness and insulin.\n\n2-Pregnancies have some outliers\n\n3-Target ( outcome) is unbalanced the number of non-diabetic is 268 the number of diabetic patients is 500\n\n4- we observe also some skew in the data but we can deal with that later \n","2a29e1c0":"**Now let's look to our data after modification :**"}}