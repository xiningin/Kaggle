{"cell_type":{"9064c1c8":"code","330a61e4":"code","c7561487":"code","e93406fd":"code","8f794696":"code","3910d721":"code","fed8a2ea":"code","695b6410":"code","99171007":"code","934e8523":"code","a2fa7448":"code","edd74c81":"code","837e012e":"code","7fd24ef9":"code","8dac2dc2":"markdown","00020187":"markdown"},"source":{"9064c1c8":"# I start with importing the nessary libraries\nimport numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","330a61e4":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","c7561487":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","e93406fd":"# I start with making the feature Sex from strings to float (numbers), so it is usable for the machinelearning.\n# I will do so for all the features that I will prepare.\n# To be able to use the \"new\" features I will have to prepare both the train_data and the test_data the same way.\ntrain_data[\"Sex\"] = train_data[\"Sex\"].astype(\"category\")\ntrain_data[\"Sex\"] = train_data[\"Sex\"].cat.codes\n\ntest_data[\"Sex\"] = test_data[\"Sex\"].astype(\"category\")\ntest_data[\"Sex\"] = test_data[\"Sex\"].cat.codes","8f794696":"# First to check if the passenger is a child, all the ages need to be filled. This I will do by using the mean age from\n# the train set.\nmean_age = train_data[\"Age\"].mean()","3910d721":"train_data[\"Age_filled\"] = train_data[\"Age\"].fillna(mean_age)\n\ntest_data[\"Age_filled\"] = test_data[\"Age\"].fillna(mean_age)","fed8a2ea":"# I will mark if the passenger is a child (below 18) or is a female or male.\n# This I will do by using a while loop to run through the passengers, then if they are under 18 they will be marked as\n# a child and it will be saved in a list.\n# If they are not under 18 they will be tested if they are female, and if not they are marked as a male and in both\n# cases it are saved in a list. This list is then made into a new column.\n# \"c\" is used as counter for loop, so I also need to know when it needs to stop (the number of rows) for this I use len()\n# and saves it in a variable\ntrain_len = len(train_data[\"PassengerId\"])\nlsex = []\nc = 0\nwhile c < train_len:\n    if train_data[\"Age_filled\"][c] < 18:\n        lsex.append(\"child\")\n        c = c + 1\n    elif train_data[\"Sex\"][c] == 0:\n        lsex.append(\"female\")\n        c = c + 1\n    else:\n        lsex.append(\"male\")\n        c = c + 1\ntrain_data[\"TypeP\"] = lsex\ntrain_data[\"TypeP\"] = train_data[\"TypeP\"].astype(\"category\")\ntrain_data[\"TypeP\"] = train_data[\"TypeP\"].cat.codes","695b6410":"test_len = len(test_data[\"PassengerId\"])\nlsex2 = []\nb = 0\nwhile b < test_len:\n    if test_data[\"Age_filled\"][b] < 18:\n        lsex2.append(\"child\")\n        b = b + 1\n    elif test_data[\"Sex\"][b] == 0:\n        lsex2.append(\"female\")\n        b = b + 1\n    else:\n        lsex2.append(\"male\")\n        b = b + 1\ntest_data[\"TypeP\"] = lsex2\ntest_data[\"TypeP\"] = test_data[\"TypeP\"].astype(\"category\")\ntest_data[\"TypeP\"] = test_data[\"TypeP\"].cat.codes","99171007":"# To get the last name the str.split() funktion is used. Because the last name is first in the string and seperated\n# from the rest of the name by a comma, this function can separate the last name by using the comma, and it can then be\n# extracted by taking the first element and saving it in a new column.\ntrain_data[\"LastName\"] = train_data[\"Name\"].str.split(\",\").str[0]\ntrain_data[\"LastName\"] = train_data[\"LastName\"].astype(\"category\")\ntrain_data[\"LastName\"] = train_data[\"LastName\"].cat.codes","934e8523":"test_data[\"LastName\"] = test_data[\"Name\"].str.split(\",\").str[0]\ntest_data[\"LastName\"] = test_data[\"LastName\"].astype(\"category\")\ntest_data[\"LastName\"] = test_data[\"LastName\"].cat.codes","a2fa7448":"# All that needs to be done with the column \"Ticket\" is to make it into catagories and then into numbers.\ntrain_data[\"Ticket\"] = train_data[\"Ticket\"].astype(\"category\")\ntrain_data[\"Ticket\"] = train_data[\"Ticket\"].cat.codes\ntest_data[\"Ticket\"] = test_data[\"Ticket\"].astype(\"category\")\ntest_data[\"Ticket\"] = test_data[\"Ticket\"].cat.codes","edd74c81":"train_data.head()","837e012e":"test_data.head()","7fd24ef9":"# I have now prepared all the features that need to be prepared,\n# and I can therefore use all features in the machinelearning.\n\n#I will use the RandomForestClassifier.\nfrom sklearn.ensemble import RandomForestClassifier\n\ny_train = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"LastName\", \"TypeP\"]\nX_test = test_data[features].copy()\nX_train = train_data[features].copy()\n\n# I mark that I will use the RandomForestClassifier and fit the model.\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X_train, y_train)\n\n# Then use the information that the model have gathered from the information from the features in the train_data vs. who\n# survived in the train data.\npredictions = model.predict(X_test)\n\n# Then I make the file to submit\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8dac2dc2":"Then I import the train and test files and saves them as dataframes","00020187":"After having imported the data files I need to make the features that I have chosen ready for the machinelearning.\n\nThe features are:\n\nSex and TypeP (Type person) - because TypeP tells if it is a female, male or child, but does not tell if it is a boy or a girl, and therefore Sex is also used. This information is importaint, because children and females was saved first.\n\nLastName, SibSp and Parch- because this tells if they have any family on the ship, and they are more likely to survive as a group. LastName tells which other passengers the passenger belongs to, while the two other features tells the number.\n\nTicket - because this is an ID for all the tickets purchased together. As not all persons in the travel groups will necessarily be in the same family, for example a nanny or maid. \n\nPClass - because this affects where they stay on the ship (higher \/ lower levels)."}}