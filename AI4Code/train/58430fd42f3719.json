{"cell_type":{"7d96dc91":"code","ab46480b":"code","62770af4":"code","f1cdffca":"code","15b0a98d":"code","4cb80ebc":"code","43b5e6af":"code","a575c602":"code","c246f792":"code","33d6be2e":"code","e50bf108":"code","6aa56d0e":"code","d25eb5e6":"code","e55f33da":"code","b305918a":"code","23d788e0":"code","cd672c2a":"code","285b68d4":"code","887ad8c3":"code","a8e9b94d":"code","750928b2":"code","3a2f6d91":"code","724d6d11":"code","2d39497e":"code","a36baa74":"code","9e6561ad":"code","99efc4a7":"code","75f8af8c":"code","515c7b82":"code","9df0ba33":"code","c6d645f5":"code","f6d5cd59":"code","d18c95c6":"markdown","efc4c865":"markdown"},"source":{"7d96dc91":"#Ignore this code block and continue (it's for my use)\n# Set your own project id here\n#PROJECT_ID = 'your-google-cloud-project'\n#from google.cloud import storage\n#storage_client = storage.Client(project=PROJECT_ID)","ab46480b":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nfrom PIL import Image\nimport os","62770af4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f1cdffca":"#Train set\nNormal_train = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL')\nPneumonia_train = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA')","15b0a98d":"#Validation set\nNormal_val = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/NORMAL')\nPneumonia_val = os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/PNEUMONIA')","4cb80ebc":"print(Normal_train[:3])\nprint(Pneumonia_train[:3])\nprint(Normal_val[:3])\nprint(Pneumonia_val[:3])","43b5e6af":"## Visualization for Normal Patients\nplt.figure(figsize = (10,10))\nfor i in range(4):\n    plt.subplot(1, 4 , i+1)\n    img = cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL' + \"\/\" + Normal_train[i])\n    plt.imshow(img)\n    plt.title('NORMAL : 1')\n    plt.tight_layout()\nplt.show()","a575c602":"## Visualization for PNEUMONIA Patients\nplt.figure(figsize = (10,10))\nfor i in range(4):\n    plt.subplot(1, 4 , i+1)\n    img = cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA' + \"\/\" + Pneumonia_train[i])\n    plt.imshow(img)\n    plt.title('PNEUMONIA : 1')\n    plt.tight_layout()\nplt.show()","c246f792":"image_arr_train =[]\nlabels_train = []\n\nfor img in Normal_train:\n    try:\n        image = cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')  #Read in the image with PIL image function in colour mode.\n        resize_img = image_from_array.resize((32, 32))  #Resize the image to 32 * 32\n        image_arr_train.append(np.array(resize_img))\n        labels_train.append(0)\n        \n    except AttributeError:\n        print(\"An error occured while reading in the image\")\n\nfor img in Pneumonia_train:\n    try:\n        image=cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')\n        resize_img = image_from_array.resize((32, 32))\n        image_arr_train.append(np.array(resize_img))\n        labels_train.append(1)\n        \n    except AttributeError:\n        print(\"An error occur while reading the image\")","33d6be2e":"plt.imshow(image_arr_train[1])\nplt.show()","e50bf108":"# Read and preprocess evaluation images\nimage_arr_val =[]\nlabels_val = []\n\nfor img in Normal_val:\n    try:\n        image = cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/NORMAL\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')  #Read in the image with PIL image function in colour mode.\n        resize_img = image_from_array.resize((32, 32))  #Resize the image to 32 * 32\n        image_arr_val.append(np.array(resize_img))\n        labels_val.append(0)\n        \n    except AttributeError:\n        print(\"An error occured while reading in the image\")\n\nfor img in Pneumonia_val:\n    try:\n        image=cv2.imread('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/PNEUMONIA\/' + img)\n        image_from_array = Image.fromarray(image, 'RGB')\n        resize_img = image_from_array.resize((32, 32))\n        image_arr_val.append(np.array(resize_img))\n        labels_val.append(1)\n        \n    except AttributeError:\n        print(\"An error occur while reading the image\")","6aa56d0e":"plt.imshow(image_arr_val[-1])\nplt.show()","d25eb5e6":"#shuffle images by getting the rows and using np.random for shuffle\n\n#Train\ntrain_data = np.array(image_arr_train)\ntrain_labels = np.array(labels_train)\nidx = np.arange(train_data.shape[0])\nnp.random.shuffle(idx)\ntrain_data = train_data[idx]\ntrain_labels = train_labels[idx]\n\n#Validation\nval_data = np.array(image_arr_val)\nval_labels = np.array(labels_val)\nidx = np.arange(val_data.shape[0])\nnp.random.shuffle(idx)\nval_data = val_data[idx]\nval_labels = val_labels[idx]","e55f33da":"print(\"Shape of train set {}\".format(train_data.shape))\nprint(\"Shape of val set {}\".format(val_data.shape))","b305918a":"# visualize many at a go\nW_grid = 15\nL_grid = 15\nfig, axes = plt.subplots(W_grid, L_grid, figsize=(25, 25))\naxes = axes.ravel() # To flatten to get W_grid * L_grid\n\nn_training = len(train_data)\n\nfor i in np.arange(0, W_grid*L_grid):\n    index = np.random.randint(0, n_training) #pick a random number\n    axes[i].imshow(train_data[index])\n    axes[i].set_title(train_labels[index]) #set label of image as title ... you can comment this line \n    axes[i].axis('off') #comment this line to see effect\nplt.subplots_adjust(hspace=0.4) #adjust spaces between images ...comment to see","23d788e0":"# visualize many at a go\nW_grid = 4\nL_grid = 4\nfig, axes = plt.subplots(W_grid, L_grid, figsize=(25, 25))\naxes = axes.ravel() # To flatten to get W_grid * L_grid\n\nn_training = len(val_data)\n\nfor i in np.arange(0, W_grid*L_grid):\n    index = np.random.randint(0, n_training) #pick a random number\n    axes[i].imshow(val_data[index])\n    axes[i].set_title(val_labels[index]) #set label of image as title ... you can comment this line \n    axes[i].axis('off') #comment this line to see effect\nplt.subplots_adjust(hspace=0.4) #adjust spaces between images ...comment to see","cd672c2a":"X_train_gray = np.sum(train_data\/3, axis=3, keepdims=True)\nX_test_gray  = np.sum(val_data\/3, axis=3, keepdims=True)","285b68d4":"X_train_gray.shape","887ad8c3":"X_train_gray_norm = (X_train_gray - 128)\/128 \nX_test_gray_norm = (X_test_gray - 128)\/128","a8e9b94d":"i = 700\nplt.imshow(X_train_gray[i].squeeze(), cmap='gray') #gray scale image\nplt.figure()\nplt.imshow(train_data[i]) #actual image\nplt.figure()\nplt.imshow(X_train_gray_norm[i].squeeze(), cmap='gray') #normalized gray scale image","750928b2":"i = 10\nplt.imshow(X_test_gray[i].squeeze(), cmap='gray') #gray scale image\nplt.figure()\nplt.imshow(val_data[i]) #actual image\nplt.figure()\nplt.imshow(X_test_gray_norm[i].squeeze(), cmap='gray') #normalized gray scale image","3a2f6d91":"# Import train_test_split from scikit library\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Dense, Flatten, Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard\n\nfrom sklearn.model_selection import train_test_split","724d6d11":"image_shape = X_train_gray[i].shape\nimage_shape","2d39497e":"cnn_model = Sequential()\n\ncnn_model.add(Conv2D(filters=6, kernel_size=(5, 5), activation='relu', input_shape=(32,32,1)))\ncnn_model.add(AveragePooling2D())\n\ncnn_model.add(Conv2D(filters=16, kernel_size=(5, 5), activation='relu'))\ncnn_model.add(AveragePooling2D())\n\ncnn_model.add(Flatten())\n\ncnn_model.add(Dense(units=120, activation='relu'))\n\ncnn_model.add(Dense(units=84, activation='relu'))\n\ncnn_model.add(Dense(units=2, activation = 'softmax'))","a36baa74":"#Plot model\nfrom keras.utils import plot_model\nplot_model(cnn_model, to_file='model.png')","9e6561ad":"cnn_model.summary()","99efc4a7":"cnn_model.compile(loss ='sparse_categorical_crossentropy', optimizer=Adam(lr=0.001),metrics =['accuracy'])","75f8af8c":"history = cnn_model.fit(X_train_gray_norm,\n                        train_labels,\n                        batch_size=50,\n                        nb_epoch=200,\n                        verbose=1\n                        )","515c7b82":"score = cnn_model.evaluate(X_test_gray_norm, val_labels,verbose=1)\nprint('Test Accuracy : {:.4f}'.format(score[1]))","9df0ba33":"#get the predictions for the test data\npredicted_classes = cnn_model.predict_classes(X_test_gray_norm)\n#get the indices to be plotted\ny_true = val_labels","c6d645f5":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, predicted_classes)\nplt.figure(figsize = (8,8))\nsns.heatmap(cm, annot=True)","f6d5cd59":"L = 4\nW = 4\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel() # \n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(val_data[i])\n    axes[i].set_title(\"Prediction={}\\n True={}\".format(predicted_classes[i], y_true[i]))\n    axes[i].axis('off')\n\nplt.subplots_adjust(wspace=1)","d18c95c6":"The model consists of the following layers: \n\n- STEP 1: THE FIRST CONVOLUTIONAL LAYER #1\n    - Input = 32x32x1\n    - Output = 28x28x6\n    - Output = (Input-filter+1)\/Stride* => (32-5+1)\/1=28\n    - Used a 5x5 Filter with input depth of 3 and output depth of 6\n    - Apply a RELU Activation function to the output\n    - pooling for input, Input = 28x28x6 and Output = 14x14x6\n\n\n    * Stride is the amount by which the kernel is shifted when the kernel is passed over the image.\n\n- STEP 2: THE SECOND CONVOLUTIONAL LAYER #2\n    - Input = 14x14x6\n    - Output = 10x10x16\n    - Layer 2: Convolutional layer with Output = 10x10x16\n    - Output = (Input-filter+1)\/strides => 10 = 14-5+1\/1\n    - Apply a RELU Activation function to the output\n    - Pooling with Input = 10x10x16 and Output = 5x5x16\n\n- STEP 3: FLATTENING THE NETWORK\n    - Flatten the network with Input = 5x5x16 and Output = 400\n\n- STEP 4: FULLY CONNECTED LAYER\n    - Layer 3: Fully Connected layer with Input = 400 and Output = 120\n    - Apply a RELU Activation function to the output\n\n- STEP 5: ANOTHER FULLY CONNECTED LAYER\n    - Layer 4: Fully Connected Layer with Input = 120 and Output = 84\n    - Apply a RELU Activation function to the output\n\n- STEP 6: FULLY CONNECTED LAYER\n    - Layer 5: Fully Connected layer with Input = 84 and Output = 43","efc4c865":"# STEP 4: MODEL TRAINING"}}