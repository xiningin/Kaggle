{"cell_type":{"c7a05490":"code","696f528b":"code","8bbf0d79":"code","c361f5b8":"code","95497c87":"code","f6a1723a":"code","ad3a4cce":"code","003b9e2f":"code","fdd0d916":"code","1deaf4c4":"code","2035ce23":"code","c6ff5c7e":"code","557d7725":"code","bb60986b":"code","42addc28":"code","b6cb26a7":"code","d7c806a9":"code","cf5aa375":"markdown","c6499224":"markdown","13936e81":"markdown","bac5c22d":"markdown","400144e6":"markdown","9c2329de":"markdown","4da05603":"markdown","5b55abf8":"markdown"},"source":{"c7a05490":"import pandas as pd\nimport numpy as np\nimport random\n\nimport os\nimport glob\n\nimport cv2\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.models import Sequential\nfrom keras.layers import SeparableConv2D, BatchNormalization, Dropout, BatchNormalization, MaxPooling2D, Conv2D, Flatten, Dense, MaxPool2D\nfrom keras.callbacks import ReduceLROnPlateau, LearningRateScheduler, EarlyStopping\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport warnings\nwarnings.filterwarnings('ignore')","696f528b":"train_path = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/*\/*')\ntest_path = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/*\/*')\nval_path = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/*\/*')","8bbf0d79":"train, test = train_test_split(train_path, test_size=.2, shuffle=True)\n\nprint('Images for training:', len(train))\nprint('Images for validation:', len(test))","c361f5b8":"normal = len([x for x in train_path if 'NORMAL' in x])\npneumonia = len([x for x in train_path if 'PNEUMONIA' in x])","95497c87":"img_size = 180\ndef inp_process(file):\n    data = []\n    for f in file:\n        try:\n            part = f.split('\/')\n            assert part[-2] in ['NORMAL','PNEUMONIA']\n            label = 1 if part[-2] == 'PNEUMONIA' else 0\n            img = cv2.imread(f, cv2.IMREAD_GRAYSCALE)\n            r_siz = cv2.resize(img, (img_size, img_size))\n        except Exception as e:\n            raise Exception(e)\n        data.append([r_siz, label])\n    return np.array(data)\n\n\ndef feature_label(data):\n    x, y = [], []\n    for feature, label in data:\n        x.append(feature)\n        y.append(label)\n    return x, y\n\ndef prepara(data, x=True):\n    if x == True:\n        data = np.array(data)\/255.\n        data = data.reshape(-1,img_size,img_size, 1)\n    else:\n        np.array(data)\n    return data","f6a1723a":"train = inp_process(train_path)\ntest = inp_process(test_path)\nval = inp_process(val_path)","ad3a4cce":"'''x_train, y_train = feature_label(train)\nx_test, y_test = feature_label(test)\nx_val, y_val = feature_label(val)'''","003b9e2f":"'''x_train = prepara(x_train, True)\ny_train = prepara(y_train, False)\n\nx_test = prepara(x_test, True)\ny_test = prepara(y_test, False)\n\nx_val = prepara(x_val, True)\ny_val = prepara(x_val, False)'''","fdd0d916":"x_train = []\ny_train = []\n\nx_val = []\ny_val = []\n\nx_test = []\ny_test = []\n\nfor feature, label in train:\n    x_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in val:\n    x_val.append(feature)\n    y_val.append(label)\n\nfor feature, label in test:\n    x_test.append(feature)\n    y_test.append(label)","1deaf4c4":"x_train = np.array(x_train) \/ 255.\nx_val = np.array(x_val) \/ 255.\nx_test = np.array(x_test) \/ 255.","2035ce23":"x_train = x_train.reshape(-1, img_size, img_size, 1)\ny_train = np.array(y_train)\n\nx_test = x_test.reshape(-1, img_size, img_size, 1)\ny_test = np.array(y_test)\n\nx_val = x_val.reshape(-1, img_size, img_size, 1)\ny_val = np.array(y_val)","c6ff5c7e":"model = Sequential()\nmodel.add(Conv2D(16, 3, activation='relu', padding='same',input_shape = (img_size,img_size,1)))\nmodel.add(Conv2D(16, 3, activation='relu', padding='same'))\nmodel.add(MaxPooling2D())\n\nmodel.add(SeparableConv2D(32, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(32, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(SeparableConv2D(64, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(64, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\n'''model.add(SeparableConv2D(128, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(128, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())'''\n\nmodel.add(Dropout(.2))\n\n'''model.add(SeparableConv2D(256, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(256, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())'''\n\nmodel.add(Dropout(.2))\n\nmodel.add(Flatten())\n\n'''model.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(.7))\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(.5))'''\n\nmodel.add(Dense(64, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(.3))\n\nmodel.add(Dense(1, activation='sigmoid'))","557d7725":"weight_normal = len(x_train) \/ (2*normal)\nweight_pneumonia = len(x_train) \/ (2*normal)\n\nclass_weight = {0:weight_normal, 1:weight_pneumonia}","bb60986b":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","42addc28":"epochs = 30\nbatch_size = 100\n\nstop = EarlyStopping(monitor='val_loss', patience=15, mode='min', verbose=1, restore_best_weights=True)\nredutor = ReduceLROnPlateau(monitor='val_accuracy', patience=3, verbose=1, factor=0.5, min_lr=0.00001)","b6cb26a7":"history_vanilla = model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(x_test, y_test), class_weight=class_weight,\n                            callbacks = [stop, redutor])","d7c806a9":"fig, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].plot(history_vanilla.history['accuracy'])\naxes[0].plot(history_vanilla.history['val_accuracy'])\naxes[0].set_xlabel('Epochs')\naxes[0].set_ylabel('Acur\u00e1cia')\naxes[0].legend(['Acur\u00e1cia em Treino','Acur\u00e1cia em Teste'])\naxes[0].grid(True)\n\naxes[1].plot(history_vanilla.history['loss'])\naxes[1].plot(history_vanilla.history['val_loss'])\naxes[1].set_xlabel('Epochs')\naxes[1].set_ylabel('Erro')\naxes[1].legend(['Erro em Treino','Erro em Teste'])\naxes[1].grid(True)","cf5aa375":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Preprocessing<\/p>","c6499224":"Preparing the images","13936e81":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Input<\/p>","bac5c22d":"Normalization ","400144e6":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Import<\/p>","9c2329de":"Placing the images in the same format","4da05603":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Model<\/p>","5b55abf8":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Result<\/p>"}}