{"cell_type":{"1c37a79a":"code","e71ff829":"code","a0c871f7":"code","8999f7fc":"code","3747978b":"code","2b0fa70d":"code","6d3103b2":"code","9c343bbb":"code","988fbcce":"code","d164b0fb":"code","a586a5d8":"code","f02e3ef4":"code","a26d75cc":"code","117a6ab5":"code","97f60517":"code","1aee16e1":"code","866779a1":"code","6202a3d1":"code","7bb664a4":"code","33a50d18":"code","c2697a82":"code","30e52dc0":"code","737b75cd":"code","43e912a6":"code","5f3798ed":"code","8d58f057":"code","21162931":"code","239b96e7":"code","ddfba673":"code","ba5f8026":"code","46d0f190":"code","05df5cae":"code","e4d19717":"code","56049f14":"code","96aa1d45":"code","437871bc":"code","d895b6d3":"code","866c3368":"code","ddfd4db1":"markdown","d360cc4a":"markdown","257cf027":"markdown","2e7e6cb1":"markdown","142a20f0":"markdown","64b4e473":"markdown","c8766c6f":"markdown","b88dc9fe":"markdown","b8179543":"markdown","105fc271":"markdown","1bd37d92":"markdown"},"source":{"1c37a79a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport eli5\n\nfrom collections import Counter\nimport missingno as msno\n\n\nimport plotly\nsns.set_style('darkgrid')","e71ff829":"df=pd.read_csv('..\/input\/data.csv')","a0c871f7":"df.columns","8999f7fc":"df.info()","3747978b":"df.describe().T","2b0fa70d":"df.drop(['Unnamed: 0','Photo','Flag','Club Logo'],axis=1,inplace=True)","6d3103b2":"msno.bar(df.sample( 18207 ),(28,10),color='red')","9c343bbb":"df.isnull().sum()","988fbcce":"missing_height = df[df['Height'].isnull()].index.tolist()\nmissing_weight = df[df['Weight'].isnull()].index.tolist()\nif missing_height == missing_weight:\n    print('They are same')\nelse:\n    print('They are different')","d164b0fb":"df.drop(df.index[missing_height],inplace =True)","a586a5d8":"df.isnull().sum()","f02e3ef4":"df.drop(['Loaned From','Release Clause','Joined'],axis=1,inplace=True)","a26d75cc":"#Number of countries available and top 5 countries with highest number of players\nprint('Total number of countries : {0}'.format(df['Nationality'].nunique()))\nprint(df['Nationality'].value_counts().head(5))\nprint('--'*40)\nprint(\"\\nEuropean Countries have most players\")","117a6ab5":"#Total number of clubs present and top 5 clubs with highest number of players\nprint('Total number of clubs : {0}'.format(df['Club'].nunique()))\nprint(df['Club'].value_counts().head(5))","97f60517":"#Player with maximum Potential and Overall Performance\nprint('Maximum Potential : '+str(df.loc[df['Potential'].idxmax()][1]))\nprint('Maximum Overall Perforamnce : '+str(df.loc[df['Overall'].idxmax()][1]))","1aee16e1":"pr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\nprint('BEST IN DIFFERENT ASPECTS :')\nprint('_________________________\\n\\n')\ni=0\nwhile i < len(pr_cols):\n    print('Best {0} : {1}'.format(pr_cols[i],df.loc[df[pr_cols[i]].idxmax()][1]))\n    i += 1","866779a1":"#Cleaning some of values so that we can interpret them \ndef value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\ndf['Value'] = df['Value'].apply(value_to_int)\ndf['Wage'] = df['Wage'].apply(value_to_int)","6202a3d1":"df.head().T","7bb664a4":"#Top earners\nprint('Most valued player : '+str(df.loc[df['Value'].idxmax()][1]))\nprint('Highest earner : '+str(df.loc[df['Wage'].idxmax()][1]))\nprint(\"--\"*40)\nprint(\"\\nTop Earners\")","33a50d18":"sns.jointplot(x=df['Age'],y=df['Potential'],\n              joint_kws={'alpha':0.1,'s':5,'color':'red'},\n              marginal_kws={'color':'red'})\n\n","c2697a82":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\nfrom math import pi\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(10, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1","30e52dc0":"sns.lmplot(data = df, x = 'Age', y = 'SprintSpeed',lowess=True,scatter_kws={'alpha':0.01, 's':5,'color':'green'}, \n           line_kws={'color':'red'})","737b75cd":"sns.lmplot(x = 'BallControl', y = 'Dribbling', data = df,col = 'Preferred Foot',scatter_kws = {'alpha':0.1,'color':'orange'},\n           line_kws={'color':'red'})","43e912a6":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(15, 15))\n    ax = sns.heatmap(corr,mask=mask,square=True,linewidths=.8,cmap=\"YlGnBu\")","5f3798ed":"cols = ['Age','Overall','Potential','Acceleration','SprintSpeed',\"Agility\",\"Stamina\",'Strength','Preferred Foot']\ndf_small = df[cols]","8d58f057":"sns.pairplot(df_small, hue ='Preferred Foot',palette=[\"black\", \"red\"],plot_kws=dict(s=50, alpha =0.8),markers=['^','v'])","21162931":"player_features = [\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Penalties'\n]","239b96e7":"df=pd.read_csv('..\/input\/data.csv')","ddfba673":"#DROP UNNECESSARY VALUES\ndrop_cols = df.columns[28:54]\ndf = df.drop(drop_cols, axis = 1)\ndf = df.drop(['Unnamed: 0','ID','Photo','Flag','Club Logo','Jersey Number','Joined','Special','Loaned From','Body Type', 'Release Clause',\n               'Weight','Height','Contract Valid Until','Wage','Value','Name','Club'], axis = 1)\ndf = df.dropna()\ndf.head()","ba5f8026":"\n    \n#Turn Preferred Foot into a binary indicator variable\ndef right_footed(df):\n    if (df['Preferred Foot'] == 'Right'):\n        return 1\n    else:\n        return 0\n\n#Create a simplified position varaible to account for all player positions\ndef simple_position(df):\n    if (df['Position'] == 'GK'):\n        return 'GK'\n    elif ((df['Position'] == 'RB') | (df['Position'] == 'LB') | (df['Position'] == 'CB') | (df['Position'] == 'LCB') | (df['Position'] == 'RCB') | (df['Position'] == 'RWB') | (df['Position'] == 'LWB') ):\n        return 'DF'\n    elif ((df['Position'] == 'LDM') | (df['Position'] == 'CDM') | (df['Position'] == 'RDM')):\n        return 'DM'\n    elif ((df['Position'] == 'LM') | (df['Position'] == 'LCM') | (df['Position'] == 'CM') | (df['Position'] == 'RCM') | (df['Position'] == 'RM')):\n        return 'MF'\n    elif ((df['Position'] == 'LAM') | (df['Position'] == 'CAM') | (df['Position'] == 'RAM') | (df['Position'] == 'LW') | (df['Position'] == 'RW')):\n        return 'AM'\n    elif ((df['Position'] == 'RS') | (df['Position'] == 'ST') | (df['Position'] == 'LS') | (df['Position'] == 'CF') | (df['Position'] == 'LF') | (df['Position'] == 'RF')):\n        return 'ST'\n    else:\n        return df.Position\n\n#Get a count of Nationalities in the Dataset, make of list of those with over 250 Players (our Major Nations)\nnat_counts = df.Nationality.value_counts()\nnat_list = nat_counts[nat_counts > 250].index.tolist()\n\n#Replace Nationality with a binary indicator variable for 'Major Nation'\ndef major_nation(df):\n    if (df.Nationality in nat_list):\n        return 1\n    else:\n        return 0\n\n#Create a copy of the original dataframe to avoid indexing errors\ndf1 = df.copy()\n\n#Apply changes to dataset to create new column\n\ndf1['Right_Foot'] = df1.apply(right_footed, axis=1)\ndf1['Simple_Position'] = df1.apply(simple_position,axis = 1)\ndf1['Major_Nation'] = df1.apply(major_nation,axis = 1)\n\n#Split the Work Rate Column in two\ntempwork = df1[\"Work Rate\"].str.split(\"\/ \", n = 1, expand = True) \n#Create new column for first work rate\ndf1[\"WorkRate1\"]= tempwork[0]   \n#Create new column for second work rate\ndf1[\"WorkRate2\"]= tempwork[1]\n#Drop original columns used\ndf1 = df1.drop(['Work Rate','Preferred Foot','Real Face', 'Position','Nationality'], axis = 1)\ndf1.head()\n","46d0f190":"#Split ID as a Target value\ntarget = df1.Overall\ndf2 = df1.drop(['Overall'], axis = 1)\n\n#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df2, target, test_size=0.2)\n\n#One Hot Encoding\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\nprint(X_test.shape,X_train.shape)\nprint(y_test.shape,y_train.shape)","05df5cae":"#Applying Linear Regression\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))","e4d19717":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Linear Prediction of Player Rating\")\nplt.show()","56049f14":"#Applying Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))","96aa1d45":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Logistic Prediction of Player Rating\")\nplt.show()","437871bc":"from sklearn.linear_model import Perceptron\n\nclf = Perceptron(tol=1e-3, random_state=0)\n\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))","d895b6d3":"clf.score(X_test,y_test)","866c3368":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Percep Prediction of Player Rating\")\nplt.show()","ddfd4db1":"`Left Footed Players` vs `Right Footed Players`","d360cc4a":"`Potential` tends to fall as you grow old","257cf027":"<a id=\"5\"><\/a> <br>\n# 5.Modelling","2e7e6cb1":"<a id=\"4\"><\/a> <br>\n# 4. Exploratory Data Analysis","142a20f0":"**Lowest correlation** among the goalkeeping side with other columns and high among themselves \n\n**High correlation** between `Dribbling`, `Volleys`, `Passing` etc...","64b4e473":"As the `age` increases the `sprint speed` decreases","c8766c6f":"<a id=\"2\"><\/a> \n# 2. Data Cleaning","b88dc9fe":"<font color=\"red\" size=5><center>FIFA <\/center><\/font>","b8179543":"`48` is repeating many times  check if all of them are same `ID` or not","105fc271":"<a id=\"3\"><\/a>\n# 3. Data Analysis","1bd37d92":"### From the plot we can infer many things. \n* Firstly, most of the people are right footed xD\n* Some unusual behavior in `Potential` vs `Overall`\n* `Accelaration` and `SprintSpeed` follow a proper linear relationship\n* `Agility` vs `SprintSpeed`, `Agility` vs `Accelaration` and `Agility` vs `Stamina` have somewhat linear relationship"}}