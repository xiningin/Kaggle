{"cell_type":{"941c4ad1":"code","58198c26":"code","5db18dad":"code","70a1614d":"code","0b0cc76c":"code","f0a9c433":"code","c923ca2a":"code","ac438480":"code","192c14c2":"code","e5121c89":"markdown","4e58a5de":"markdown","cfe54259":"markdown","99aabdba":"markdown","b206c2a9":"markdown","282234d6":"markdown","8d6c7915":"markdown","ff886581":"markdown","0c9c5505":"markdown","ea5e8d29":"markdown","b8d172d9":"markdown","46a75600":"markdown"},"source":{"941c4ad1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58198c26":"import torch\nimport torch.nn as nn\nimport numpy as np","5db18dad":"data = np.array([[1, 2],\n                 [1, 3],\n                 [1, 4]]).astype(np.float32)","70a1614d":"bn_torch = nn.BatchNorm1d(num_features=2)\ndata_torch = torch.from_numpy(data)\nbn_output_torch = bn_torch(data_torch)\nprint(bn_output_torch)","0b0cc76c":"help(nnn.B)","f0a9c433":"import torch\nfrom torch import nn\nbn = nn.BatchNorm2d(num_features=2,eps=1e-5, affine=False, track_running_stats=False)#\u8fd9\u91cc\u7684B\u53ef\u4ee5\u6307\u4ee3\u4e09\u7ef4\u5377\u79ef\u4e2d\u7684\u7279\u5f81\u4f4d\nx = torch.rand(2,3,4,4) #B,C,H,W\nofficial_bn = bn(x)   # \u5b98\u65b9\u4ee3\u7801\nprint(official_bn)\nx1 = x.permute(1, 2, 3, 0).reshape(3, -1) # \u5bf9(N, H, W)\u8ba1\u7b97\u5747\u503c\u65b9\u5dee\nmean = x1.mean(dim=1).reshape(1, 3, 1, 1)\n# x1.mean(dim=1)\u540e\u7ef4\u5ea6\u4e3a(3,)\nstd = x1.std(dim=1, unbiased=False).reshape(1, 3, 1, 1)\nmy_bn = (x - mean)\/std\nprint(my_bn)\nprint((official_bn-my_bn).sum())  # \u8f93\u51fa\u8bef\u5dee","c923ca2a":"import torch\nfrom torch import nn\nln = nn.LayerNorm(normalized_shape=[3, 5, 5], eps=1e-8, elementwise_affine=False)\nx = torch.rand(2, 3, 5, 5)\nofficial_ln = ln(x)   # \u5b98\u65b9\u4ee3\u7801\nprint(official_ln)\nx1 = x.reshape(2, -1)  # \u5bf9\uff08C,H,W\uff09\u8ba1\u7b97\u5747\u503c\u65b9\u5dee\nmean = x1.mean(dim=1).reshape(2, 1, 1, 1)\nstd = x1.std(dim=1, unbiased=False).reshape(2, 1, 1, 1)\nmy_ln = (x - mean)\/std\nprint(my_ln)\nprint((official_ln-my_ln).sum())","ac438480":"import torch\nfrom torch import nn\nIn = nn.InstanceNorm2d(num_features=5, eps=1e-5, affine=False, track_running_stats=False)\nx = torch.rand(2, 3, 5, 5)\nofficial_In = In(x)   # \u5b98\u65b9\u4ee3\u7801\nprint(official_In)\nx1 = x.reshape(2,3, -1)  # \u5bf9\uff08H,W\uff09\u8ba1\u7b97\u5747\u503c\u65b9\u5dee\nmean = x1.mean(dim=-1).reshape(2, 3, 1, 1)\nstd = x1.std(dim=-1, unbiased=False).reshape(2, 3, 1, 1)\nmy_In = (x - mean)\/std\nprint(my_In)\nprint((official_In-my_In).sum())","192c14c2":"import torch\nfrom torch import nn\ngn = nn.GroupNorm(num_groups=2, num_channels=4, eps=1e-5, affine=False)\n# \u5206\u6210\u4e864\u7ec4\uff0c\u4e5f\u5c31\u662f\u8bf4\u84dd\u8272\u533a\u57df\u4e3a\uff085\uff0c5, 5\uff09\nx = torch.rand(2, 4, 5, 5)\nofficial_gn = gn(x)   # \u5b98\u65b9\u4ee3\u7801\nprint(official_gn.shape)\nx1 = x.reshape(2,2,4\/\/2,5,5)  # \u5bf9\uff08H,W\uff09\u8ba1\u7b97\u5747\u503c\u65b9\u5dee\nx1 = x.reshape(2,2,-1)\nmean = x1.mean(dim=-1).reshape(2,2,-1)\nstd = x1.std(dim=-1, unbiased=False).reshape(2, 2, -1)\nmy_gn = ((x1 - mean)\/std).reshape(2, 2, 2, 5,5)\nmy_gn = my_gn.reshape(2,4,5,5)\nprint((official_gn-my_gn).sum())","e5121c89":"# BatchNormalize2d","4e58a5de":"\u8981\u5c06`model.eval()`\u8f6c\u5230\u6d4b\u8bd5\u9636\u6bb5\uff0c\u624d\u80fd\u56fa\u5b9a\u4f4f`running_mean`\u548c`running_var`\u3002\u6709\u65f6\u5019\u5982\u679c\u662f\u5148\u9884\u8bad\u7ec3\u6a21\u578b\u7136\u540e\u52a0\u8f7d\u6a21\u578b\uff0c\u91cd\u65b0\u8dd1\u6d4b\u8bd5\u7684\u65f6\u5019\u7ed3\u679c\u4e0d\u540c\uff0c\u6709\u4e00\u70b9\u6027\u80fd\u4e0a\u7684\u635f\u5931\uff0c\u8fd9\u4e2a\u65f6\u5019\u5341\u6709\u516b\u4e5d\u662f`trainning`\u548c`track_running_stats`\u8bbe\u7f6e\u7684\u4e0d\u5bf9\uff0c\u8fd9\u91cc\u9700\u8981\u591a\u6ce8\u610f","cfe54259":"**Args:**\n- affine: \u662f\u5426\u9700\u8981\u4eff\u5c04\uff0c\u5373gamma\u548cbeta, \u8fd9\u4e0d\u662f\u5168\u8fde\u63a5\u5c42\uff0c\u800c\u662f\u5c3a\u5ea6\u504f\u79fb\u4e0e\u7f29\u653e\uff0c \u82e5\u4e3aFalse\uff0c\u5219gamma=1\u548cbeta=0, batchnomalize\u5c42\u4e0d\u4f1a\u66f4\u65b0\u548c\u5b66\u4e60\n- num_features: \u7279\u5f81\u7684\u6570\u91cf\n- eps\uff1a \u4e00\u822c\u53d6\u503c\u4e3a1e-5\n- track_running_stats\uff1a \u6307\u5b9a\u662f\u5426\u8ddf\u8e2a\u5f53\u524dbatch\u7684\u7edf\u8ba1\u7279\u6027","99aabdba":"- \u6570\u636e\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u6570\u636e\u4e0d\u81f3\u4e8e\u5728relu\u4e4b\u524d\u4e0d\u4f1a\u56e0\u4e3a\u6570\u636e\u7684\u8fc7\u5927\u800c\u5bfc\u81f4\u7f51\u7edc\u4e0d\u7a33\u5b9a","b206c2a9":"![image.png](attachment:image.png)","282234d6":"BN\u5c42\u4e2d\u7684`running_mean`\u548c`running_var`\u7684\u66f4\u65b0\u662f\u5728`forward()`\u64cd\u4f5c\u4e2d\u8fdb\u884c\u7684\uff0c\u800c\u4e0d\u662f`optimizer.step()`\u4e2d\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u5982\u679c\u5904\u4e8e\u8bad\u7ec3\u72b6\u6001\uff0c\u5c31\u7b97\u4f60\u4e0d\u8fdb\u884c\u624b\u52a8`step()`\uff0cBN\u7684\u7edf\u8ba1\u7279\u6027\u4e5f\u4f1a\u53d8\u5316\u7684","8d6c7915":"# Group Norm","ff886581":"\u4e00\u822c\u6765\u8bf4\uff0c`trainning`\u548c`track_running_stats`\u6709\u56db\u79cd\u7ec4\u5408\n\n- `trainning=True, track_running_stats=True`\u8fd9\u4e2a\u662f\u671f\u671b\u4e2d\u7684\u8bad\u7ec3\u9636\u6bb5\u7684\u8bbe\u7f6e\uff0c\u6b64\u65f6BN\u5c06\u4f1a\u8ddf\u8e2a\u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u4e2dbatch\u7684\u7edf\u8ba1\u7279\u6027\u3002\n- `trainning=True, track_running_stats=False`\u6b64\u65f6BN\u53ea\u4f1a\u8ba1\u7b97\u5f53\u524d\u8f93\u5165\u7684\u8bad\u7ec3batch\u7684\u7edf\u8ba1\u7279\u6027\uff0c\u53ef\u80fd\u6ca1\u6cd5\u5f88\u597d\u5730\u63cf\u8ff0\u5168\u5c40\u7684\u6570\u636e\u7edf\u8ba1\u7279\u6027\u3002\n- `trainning=False, track_running_stats=True`\u8fd9\u4e2a\u662f\u671f\u671b\u4e2d\u7684\u6d4b\u8bd5\u9636\u6bb5\u7684\u8bbe\u7f6e\uff0c\u6b64\u65f6BN\u4f1a\u7528\u4e4b\u524d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4e2d\u7684\uff08\u5047\u8bbe\u5df2\u7ecf\u4fdd\u5b58\u4e0b\u4e86\uff09running_mean\u548crunning_var\u5e76\u4e14\u4e0d\u4f1a\u5bf9\u5176\u8fdb\u884c\u66f4\u65b0\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u53ea\u9700\u8981\u8bbe\u7f6emodel.eval()\u5176\u4e2dmodel\u4e2d\u542b\u6709BN\u5c42\uff0c\u5373\u53ef\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\n- `trainning=False, track_running_stats=False` \u6548\u679c\u540c(2)\uff0c\u53ea\u4e0d\u8fc7\u662f\u4f4d\u4e8e\u6d4b\u8bd5\u72b6\u6001\uff0c\u8fd9\u4e2a\u4e00\u822c\u4e0d\u91c7\u7528\uff0c\u8fd9\u4e2a\u53ea\u662f\u7528\u6d4b\u8bd5\u8f93\u5165\u7684batch\u7684\u7edf\u8ba1\u7279\u6027\uff0c\u5bb9\u6613\u9020\u6210\u7edf\u8ba1\u7279\u6027\u7684\u504f\u79fb\uff0c\u5bfc\u81f4\u7cdf\u7cd5\u6548\u679c\u3002","0c9c5505":"# Instance Norm","ea5e8d29":"![image.png](attachment:image.png)","b8d172d9":"<font corlor='red'>**BN\uff0cLN\uff0cIN\uff0cGN\u4ece\u5b66\u672f\u5316\u4e0a\u89e3\u91ca\u5dee\u5f02\uff1a**<\/font>\n- BatchNorm\uff1a**batch**\u65b9\u5411\u505a\u5f52\u4e00\u5316\uff0c\u7b97NHW\u7684\u5747\u503c\uff0c\u5bf9\u5c0fbatchsize\u6548\u679c\u4e0d\u597d\uff1bBN\u4e3b\u8981\u7f3a\u70b9\u662f\u5bf9batchsize\u7684\u5927\u5c0f\u6bd4\u8f83\u654f\u611f\uff0c\u7531\u4e8e\u6bcf\u6b21\u8ba1\u7b97\u5747\u503c\u548c\u65b9\u5dee\u662f\u5728\u4e00\u4e2abatch\u4e0a\uff0c\u6240\u4ee5\u5982\u679cbatchsize\u592a\u5c0f\uff0c\u5219\u8ba1\u7b97\u7684\u5747\u503c\u3001\u65b9\u5dee\u4e0d\u8db3\u4ee5\u4ee3\u8868\u6574\u4e2a\u6570\u636e\u5206\u5e03\n- LayerNorm\uff1achannel\u65b9\u5411\u505a\u5f52\u4e00\u5316\uff0c\u7b97CHW\u7684\u5747\u503c\uff0c\u4e3b\u8981\u5bf9RNN\u4f5c\u7528\u660e\u663e\uff1b\n- InstanceNorm\uff1a\u4e00\u4e2achannel\u5185\u505a\u5f52\u4e00\u5316\uff0c\u7b97H*W\u7684\u5747\u503c\uff0c**\u7528\u5728\u98ce\u683c\u5316\u8fc1\u79fb\uff1b\u56e0\u4e3a\u5728\u56fe\u50cf\u98ce\u683c\u5316\u4e2d\uff0c\u751f\u6210\u7ed3\u679c\u4e3b\u8981\u4f9d\u8d56\u4e8e\u67d0\u4e2a\u56fe\u50cf\u5b9e\u4f8b\uff0c\u6240\u4ee5\u5bf9\u6574\u4e2abatch\u5f52\u4e00\u5316\u4e0d\u9002\u5408\u56fe\u50cf\u98ce\u683c\u5316\u4e2d\uff0c\u56e0\u800c\u5bf9HW\u505a\u5f52\u4e00\u5316\u3002\u53ef\u4ee5\u52a0\u901f\u6a21\u578b\u6536\u655b\uff0c\u5e76\u4e14\u4fdd\u6301\u6bcf\u4e2a\u56fe\u50cf\u5b9e\u4f8b\u4e4b\u95f4\u7684\u72ec\u7acb\u3002**\n- GroupNorm\uff1a\u5c06channel\u65b9\u5411\u5206group\uff0c\u7136\u540e\u6bcf\u4e2agroup\u5185\u505a\u5f52\u4e00\u5316\uff0c\u7b97(C\/\/G)HW\u7684\u5747\u503c\uff1b\u8fd9\u6837\u4e0ebatchsize\u65e0\u5173\uff0c\u4e0d\u53d7\u5176\u7ea6\u675f\u3002\n- SwitchableNorm\u662f\u5c06BN\u3001LN\u3001IN\u7ed3\u5408\uff0c\u8d4b\u4e88\u6743\u91cd\uff0c\u8ba9\u7f51\u7edc\u81ea\u5df1\u53bb\u5b66\u4e60\u5f52\u4e00\u5316\u5c42\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u65b9\u6cd5\u3002","46a75600":"# Layer Norm"}}