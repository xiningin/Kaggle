{"cell_type":{"a121d3a0":"code","c85010aa":"code","66b19924":"code","4dcc6630":"code","6f2fc25b":"code","a74614b8":"code","943e4903":"code","a0586d07":"code","96e42fcb":"code","338dc2c7":"code","61ab5599":"code","be8463c3":"code","1e2b0e31":"code","7e2809cf":"code","9830d894":"markdown","8cba28d5":"markdown","38b0f463":"markdown","46aa8619":"markdown","01e3dd1a":"markdown","8c7550f4":"markdown","227c479c":"markdown","23e79212":"markdown","82cd5f2e":"markdown"},"source":{"a121d3a0":" !pip install apyori\n","c85010aa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","66b19924":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndata=pd.read_csv('\/kaggle\/input\/market-basket-optimisationcsv\/Market_Basket_Optimisation.csv')\n\ndata.head(5)","4dcc6630":"len(data)","6f2fc25b":"## We need a list of transactions\ntransactions=[]\nfor i in range(0,7500): ## rows\n    transactions.append([str(data.values[i,j]) for j in range (0,20) ])# Columns \n## must be strings","a74614b8":"#transactions","943e4903":"from apyori import apriori\n\nrules=apriori(transactions=transactions,\n              min_support=0.003,## (min 3 times per day  * 7 days)\/7501 \n              min_confidence=0.2,## you can try different values depending on the business requirements\n              min_lift = 3,  ## relevance of the rule... good lift is at least 3. Rules below 3 are not relevant--based on the experience\n              min_length=2, ## 2 products to have at the end, A and B\n              max_length=2) ","a0586d07":"rules","96e42fcb":"results=list(rules) ## we put rules into a list\n#results","338dc2c7":"results[5]","61ab5599":"## 0.004% that french fries and almonds will appear in the basket\n## o.21% that french fries will appear at the basket if almonds are also bought","be8463c3":"def inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    confidences = [result[2][0][2] for result in results]\n    lifts       = [result[2][0][3] for result in results]\n    return list(zip(lhs, rhs, supports, confidences, lifts))\n\n\n    \nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])","1e2b0e31":"resultsinDataFrame","7e2809cf":"resultsinDataFrame.nlargest(n=10, columns=\"Lift\") ## 10 rows","9830d894":"### Putting the results well organised into a Pandas DataFrame","8cba28d5":"## Importing the libraries","38b0f463":"### Displaying the results sorted by descending lifts","46aa8619":"# Apriori","01e3dd1a":"### Displaying the results non sorted","8c7550f4":"## Visualising the results","227c479c":"### Displaying the first results coming directly from the output of the apriori function","23e79212":"## Data Preprocessing","82cd5f2e":"## Training the Apriori model on the dataset"}}