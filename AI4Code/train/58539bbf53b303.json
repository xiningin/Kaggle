{"cell_type":{"549c60be":"code","f98fb3c5":"code","d12c180a":"code","f6261e1c":"code","7f31d026":"code","3d0b16d4":"code","163c088d":"code","5f517f9a":"code","53778e34":"code","8eb232eb":"code","737795f5":"code","38998f4e":"code","87fe509c":"code","140218ca":"code","1e5ab6bd":"markdown","50f38b85":"markdown","86e1e899":"markdown","fc25e706":"markdown","c8c9cfce":"markdown","2c13f9c6":"markdown","8328038d":"markdown","386e27de":"markdown","258f7f9b":"markdown","baa9187a":"markdown","a724c516":"markdown","4620f031":"markdown","66f9c293":"markdown"},"source":{"549c60be":"import numpy as np #library used for working with arrays.\nimport matplotlib.pyplot as plt #data visualization and graphical plotting library.\nimport pandas as pd #library written for the Python programming language for data manipulation.\nimport sys #system-specific parameters and functions","f98fb3c5":"dataset = pd.read_csv('..\/input\/insurance-premium-prediction\/insurance.csv')\ndataset.head() #returns top 5 rows from dataset.","d12c180a":"num_lst = []\ncat_lst = []\n\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\n\nfor column in dataset:\n    plt.figure(column, figsize = (5,5))\n    plt.title(column)\n    if is_numeric_dtype(dataset[column]):\n        dataset[column].plot(kind = 'hist')\n        num_lst.append(column)\n    elif is_string_dtype(dataset[column]):\n        dataset[column].value_counts().plot(kind = 'bar')\n        cat_lst.append(column)\n        \nprint(num_lst)\nprint(cat_lst)","f6261e1c":"#checking nan values\nprint(dataset.isnull().sum().sum())","7f31d026":"X = dataset.iloc[:, :-1].values #returns all rows and first column\ny = dataset.iloc [:, -1].values #returns all rows and last column","3d0b16d4":"#Encoding the Independent Variable (Sex and Smoker)\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 1] = le.fit_transform(X[:, 1]) \nX[:, 4] = le.fit_transform(X[:, 4]) \n\nnp.set_printoptions(threshold=sys.maxsize)\nprint(X[:5,:10])\n","163c088d":"#Encoding the Independent Variable (Region)\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [5])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\n\nnp.set_printoptions(threshold=sys.maxsize)\nprint(X[:5,:10])","5f517f9a":"#we don't use feature scaling.\n#Scaling does not affect your statistical inference in regression models \u2014 the estimates are adjusted appropriately and the p-values will be the same.","53778e34":"from sklearn.model_selection import train_test_split\ntrain_X,test_X,train_y,test_y=train_test_split(X,y,test_size=0.2,random_state=0)\n#test_size - represent the proportion of the dataset to include in the train split.","8eb232eb":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree=2)\nX_poly = poly_reg.fit_transform(train_X)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_poly,train_y)\n","737795f5":"y_pred = model.predict(poly_reg.fit_transform(test_X))","38998f4e":"np.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), test_y.reshape(len(test_y),1)),1)[:10])","87fe509c":"plt.subplots(figsize=(15,6))  \n\n# Age vs Expenses\nplt.subplot(1,2,1)\nplt.scatter(dataset['age'], y, color = 'red')\nplt.scatter(dataset['age'], model.predict(poly_reg.fit_transform(X)), color = 'blue')\nplt.title('Actual Expenses and Predicted Expenses', fontsize = 16)\nplt.xlabel('Age', fontsize = 14)\nplt.ylabel('Expenses',fontsize = 14)\n\n# BMI vs Expenses\nplt.subplot(1,2,2)\nplt.scatter(dataset['bmi'], y, color = 'red')\nplt.scatter(dataset['bmi'], model.predict(poly_reg.fit_transform(X)), color = 'blue')\nplt.title('Actual Expenses and Predicted Expenses', fontsize = 16)\nplt.xlabel('BMI', fontsize = 14)\nplt.ylabel('Expenses',fontsize = 14)\nplt.show()\n","140218ca":"from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score\nprint(\"MSE : \",mean_squared_error(y_pred,test_y))\nprint(\"MAE : \",mean_absolute_error(y_pred,test_y))\nprint(\"R Score :\",r2_score(y_pred,test_y))\n\n#The essential step in any machine learning model is to evaluate the accuracy of the model. \n#The Mean Squared Error, Mean absolute error, and R-Squared or Coefficient of determination metrics are used to evaluate the performance of the model in regression analysis.","1e5ab6bd":"**Training the Polynomial Regression model on the Training set.**","50f38b85":"**Predicting the Test set results.**","86e1e899":"**Thank you for your attention.**","fc25e706":"**Visualizing of Actual Expenses and Predicted Expenses for 'Age' and 'BMI' features.**","c8c9cfce":"**Conclusion.**\nFor all the metrics we can see that the Polynomial Regression has the highest accuracy than the Linear Regression algorithm (https:\/\/www.kaggle.com\/mysha1rysh\/multiple-linear-regression-for-beginners). \n","2c13f9c6":"**Import the dataset.** The insurance.csv dataset contains 1338 observations (rows) and 7 features (columns). The dataset contains 4 numerical features and 3 nominal features.","8328038d":"**Hi Everyone! Thank you for your time in my work. In this notebook we are going to predict Future Medical Expenses.**\nIn the previous example i worked with Linear Regression https:\/\/www.kaggle.com\/mysha1rysh\/multiple-linear-regression-for-beginners . Now i will work with **Polynomial Regression**.","386e27de":"**Splitting the dataset into the training set and test set.**","258f7f9b":"**Import libraries.**","baa9187a":"**Evaluating the accuracy of the model.**","a724c516":"**Visualization of how our features are distributed.**","4620f031":"**Encoding the Independent Variables.**","66f9c293":"**Comparison of predicted and actual Expenses.**"}}