{"cell_type":{"441fe023":"code","166d1f2c":"code","37a61483":"code","41ed99c8":"code","18434daf":"code","0795ca33":"code","621ec091":"code","e28ed328":"code","77edce73":"code","832a8675":"code","c27ec87f":"code","a9c37f4c":"code","d2d00abb":"code","e3f0c7f2":"code","5894d2a6":"code","f0ace5e3":"code","833b9490":"code","3bc83afe":"code","65f41b1e":"code","22fa7e56":"code","64f89657":"code","3281d250":"code","6c6b76b9":"code","de20c258":"code","fb29f186":"code","a7aa28b7":"code","dd1f3aaf":"code","dcee4fb2":"code","13f92d00":"code","8f7eecbe":"code","56b6fd65":"code","9d5424ae":"code","732d17da":"code","100cf790":"markdown","25fd90b7":"markdown","08015706":"markdown","72dc90f2":"markdown","053be3f3":"markdown","b5cbbc91":"markdown","610ad776":"markdown","369b5da9":"markdown","3698aa6f":"markdown","eb53e33d":"markdown","4d84f756":"markdown","e8632fcd":"markdown","6f3a19c1":"markdown","9a9f7176":"markdown","56a220c8":"markdown","58b16968":"markdown","1ff31950":"markdown","2b116fab":"markdown","0ef3fe79":"markdown","2690792a":"markdown"},"source":{"441fe023":"!pip install pyecharts","166d1f2c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pyecharts.charts import Map,Geo\nfrom pyecharts import options as opts\nfrom pyecharts.globals import ThemeType","37a61483":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","41ed99c8":"def ReadData(year):\n    return pd.read_csv(f\"\/kaggle\/input\/world-happiness\/{year}.csv\")","18434daf":"df2015 = ReadData(2015)\ndf2016 = ReadData(2016)\ndf2017 = ReadData(2017)\ndf2018 = ReadData(2018)\ndf2019 = ReadData(2019)","0795ca33":"datasets = ((\"2015\", df2015), (\"2016\", df2016), (\"2017\", df2017), (\"2018\", df2018), (\"2019\", df2019))\nfor year,data in datasets:\n    print(f\"Shape of the {year} data : {data.shape}\\n\")","621ec091":"for year,data in datasets:\n    print(f\"NaN values in {year} data :\\n  {data.isna().sum()} \\n\")","e28ed328":"df2018.dropna(axis = 0, inplace = True)","77edce73":"df2015.columns = df2015.columns.map(lambda x: str(x) + '_2015')\ndf2016.columns = df2016.columns.map(lambda x: str(x) + '_2016')\ndf2017.columns = df2017.columns.map(lambda x: str(x) + '_2017')\ndf2018.columns = df2018.columns.map(lambda x: str(x) + '_2018')\ndf2019.columns = df2019.columns.map(lambda x: str(x) + '_2019')","832a8675":"df = df2015.merge(df2016, how = \"inner\", left_on = \"Country_2015\", right_on = \"Country_2016\")\ndf = df.merge(df2017, how = \"left\", left_on = \"Country_2015\", right_on = \"Country_2017\")\ndf = df.merge(df2018, how = \"left\", left_on = \"Country_2015\", right_on = \"Country or region_2018\")\ndf = df.merge(df2019, how = \"left\", left_on = \"Country_2015\",right_on = \"Country or region_2019\")","c27ec87f":"df.drop(['Country_2016','Region_2016','Country_2017','Country or region_2018','Country or region_2019']\n        ,axis = 1, inplace = True)","a9c37f4c":"df.isna().sum()","d2d00abb":"df.dropna(axis = 0, inplace = True)","e3f0c7f2":"sub_data = pd.concat([df[\"Country_2015\"],df[\"Happiness Score_2015\"],df[\"Happiness Score_2016\"],df[\"Happiness.Score_2017\"], df[\"Score_2018\"] ,df[\"Score_2019\"]], axis = 1)","5894d2a6":"sub_data = pd.melt(sub_data,id_vars = [\"Country_2015\"], value_vars = [\"Happiness Score_2015\",\"Happiness Score_2016\",\"Happiness.Score_2017\",\"Score_2018\",\"Score_2019\"], var_name = \"Years\",value_name = \"Happiness Score\")","f0ace5e3":"sub_data[\"Years\"][sub_data[\"Years\"] == \"Happiness Score_2015\"] = 2015\nsub_data[\"Years\"][sub_data[\"Years\"] == \"Happiness Score_2016\"] = 2016\nsub_data[\"Years\"][sub_data[\"Years\"] == \"Happiness.Score_2017\"] = 2017\nsub_data[\"Years\"][sub_data[\"Years\"] == \"Score_2018\"] = 2018\nsub_data[\"Years\"][sub_data[\"Years\"] == \"Score_2019\"] = 2019","833b9490":"plt.figure(figsize = (30,40))\nsns.barplot(x = \"Years\",y= \"Happiness Score\", data = sub_data, hue = \"Country_2015\", palette = \"viridis\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Happiness Score\")\nplt.title(\"Happiness Scores by Years\")\nplt.show()","3bc83afe":"df_economy = pd.concat([df[\"Economy (GDP per Capita)_2015\"],df[\"Economy (GDP per Capita)_2016\"],df[\"Economy..GDP.per.Capita._2017\"],df[\"GDP per capita_2018\"], df[\"GDP per capita_2019\"] ,df[\"Country_2015\"]], axis = 1)","65f41b1e":"df_economy = pd.melt(df_economy,id_vars = [\"Country_2015\"], value_vars = [\"Economy (GDP per Capita)_2015\",\"Economy (GDP per Capita)_2016\",\"Economy..GDP.per.Capita._2017\",\"GDP per capita_2018\",\"GDP per capita_2019\"], var_name = \"Years\",value_name = \"Economy(GDP per Capita)\")","22fa7e56":"df_economy[\"Years\"][df_economy[\"Years\"] == \"Economy (GDP per Capita)_2015\"] = 2015\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"Economy (GDP per Capita)_2016\"] = 2016\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"Economy..GDP.per.Capita._2017\"] = 2017\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"GDP per capita_2018\"] = 2018\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"GDP per capita_2019\"] = 2019","64f89657":"plt.figure(figsize = (30,42))\nsns.lineplot(x= \"Years\", y=\"Economy(GDP per Capita)\",\n             data= df_economy,hue=\"Country_2015\", palette = \"viridis\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Economy(GDP per Capita)\")\nplt.title(\"Mean GDP per Capita by Years\")\nplt.show()","3281d250":"sub_data = df[[\"Country_2015\",\"Score_2019\",\"Freedom to make life choices_2019\",\"Healthy life expectancy_2019\",\"Social support_2019\"]]","6c6b76b9":"df_largest_score = sub_data.nlargest(5,\"Score_2019\")\ndf_lowest_score = sub_data.nsmallest(5,\"Score_2019\")","de20c258":"df_largest_score = df_largest_score.drop([\"Score_2019\"], axis = 1)","fb29f186":"df_largest_score = pd.melt(df_largest_score,id_vars= ['Country_2015'] ,value_vars=[\"Freedom to make life choices_2019\",\"Healthy life expectancy_2019\",\"Social support_2019\"])\ndf_largest_score = df_largest_score.reset_index()","a7aa28b7":"df_lowest_score = df_lowest_score.drop([\"Score_2019\"], axis = 1)","dd1f3aaf":"df_lowest_score = pd.melt(df_lowest_score,id_vars= ['Country_2015'] ,value_vars=[\"Freedom to make life choices_2019\",\"Healthy life expectancy_2019\",\"Social support_2019\"])\ndf_lowest_score = df_lowest_score.reset_index()","dcee4fb2":"plt.figure(figsize = (25,10))\nplt.subplot(1,2,1)\nplt.ylim((0,2))\nsns.barplot(x='Country_2015', y='value', hue='variable', data=df_largest_score ,palette = 'viridis')\nplt.title(\"Countries That Have Best Scores\")\n\n\n\nplt.subplot(1,2,2)\nplt.ylim((0,2))\nsns.barplot(x='Country_2015', y='value', hue='variable', data= df_lowest_score,palette = 'viridis')\nplt.title(\"Countries That Have Worst Scores\")\nplt.show()","13f92d00":"df[\"Score_difference\"] = 0\nfor i in range(len(df)):\n    df[\"Score_difference\"].iloc[i] = df[\"Score_2019\"].iloc[i] - df[\"Happiness Score_2015\"].iloc[i] ","8f7eecbe":"score_difference_top5 = df.nlargest(5,\"Score_difference\")\nscore_difference_bottom5 = df.nsmallest(5,\"Score_difference\")","56b6fd65":"plt.figure(figsize = (25,10))\nplt.subplot(1,2,1)\nsns.barplot(x = \"Country_2015\", y = \"Score_difference\", data = score_difference_top5, palette = \"viridis\")\nplt.ylabel(\"Score Difference\")\nplt.xlabel(\"Country\")\nplt.title(\"Top 5 Happiness Score Increase\")\n\nplt.subplot(1,2,2)\nsns.barplot(x = \"Country_2015\", y = \"Score_difference\", data = score_difference_bottom5, palette = \"viridis\")\nplt.ylabel(\"Score Difference\")\nplt.xlabel(\"Country\")\nplt.title(\"Top 5 Happiness Score Decrease\")\nplt.show()","9d5424ae":"score_data = pd.concat([df[\"Country_2015\"],df[\"Happiness Score_2015\"],df[\"Happiness Score_2016\"],df[\"Happiness.Score_2017\"], df[\"Score_2018\"] ,df[\"Score_2019\"]], axis = 1)\nscore_data[\"Score_difference\"] = 0\nfor i in range(len(sub_data)):\n    score_data[\"Score_difference\"].iloc[i] = score_data[\"Score_2019\"].iloc[i] - score_data[\"Happiness Score_2015\"].iloc[i] ","732d17da":"scoresGroupByCountry = score_data.groupby([\"Country_2015\",\"Score_difference\"]).sum().reset_index()\ncountry = list(scoresGroupByCountry[\"Country_2015\"])\ndiff = list(scoresGroupByCountry[\"Score_difference\"])\nlist1 = [[country[i],diff[i]] for i in range(scoresGroupByCountry.shape[0])] \nmap_1 = Map(init_opts=opts.InitOpts(width='1000px', height='460px',theme=ThemeType.ROMANTIC)) \nmap_1.add('Rank Difference', \n list1, \n maptype='world',\n is_map_symbol_show=False) \nmap_1.set_series_opts(label_opts=opts.LabelOpts(is_show=False)) \nmap_1.set_global_opts(visualmap_opts=opts.VisualMapOpts(max_=611,is_piecewise=True,pieces=[\n {\"max\": -3},\n {\"max\": -2, \"max\":-1},\n {\"max\": -1, \"max\": 0},\n {\"max\": 0, \"max\": 1},\n {\"max\": 1, \"max\": 2},\n {\"max\": 2, \"max\": 3}]),\n  title_opts=opts.TitleOpts(\n title='Happiness Score Difference By Countries',\n pos_left='center',\n padding=0,\n item_gap=2,\n title_textstyle_opts= opts.TextStyleOpts(color='Black',\n font_weight='bold',\n font_family='Courier New',\n font_size=30), \n subtitle_textstyle_opts= opts.TextStyleOpts(color='grey',\n font_weight='bold',\n font_family='Courier New',\n font_size=13)), \n legend_opts=opts.LegendOpts(is_show=False))\nmap_1.render_notebook()","100cf790":"In this part, I first wanted to look at the changes in the happiness score of countries from 2015 to 2019. So I added a feature that gives the score differences to the data by creating a for loop. After that, I got the countries with the highest increase and the highest decrease. Then I visualized it using barplot.","25fd90b7":"# Economy vs Year by Countries","08015706":"# Happiness Score vs Year by Country","72dc90f2":"# Happiness Score Difference By Countries\n","053be3f3":"Steps are the same with happiness score visualization. Only difference is that I use lineplot in Seaborn library.","b5cbbc91":"Since the year column names appear as rows when I melt, I edited and replaced the column name with the year corresponding to each column name. Then I used the lineplot function in Seaborn library and made a graphic that shows us each years happiness scores by country. ","610ad776":"# Countries With the Highest Increase and Decrease","369b5da9":"\n# World Happiness Report Visualization\n","3698aa6f":"![happiness-text-design-vector-illustration-men-women-building-painting-big-letters-isolated-white-background-flat-male-129986607.jpg](attachment:83ffe5c3-6552-4dca-b668-884b5b95f837.jpg)","eb53e33d":"In this part, I visualized the score difference by country using the  visualization of [\u00d6zg\u00fcr Do\u011fan's](https:\/\/www.kaggle.com\/ozgurdogan646) [Forbes Top 2000 Pre-Post Pandemic Analysis ](https:\/\/www.kaggle.com\/ozgurdogan646\/forbes-top-2000-pre-post-pandemic-analysis).\n","4d84f756":"As you can see, the World Happiness Report shows us the happiness scores of the years from 2015 to 2019 and some of the features that affect this score. Happiness can be associated with many things and can affect many things. Therefore, it is very important to understand and analyze this data. By understanding and  making visualizations with these data, I wanted to both improve myself and make easier examples for those who are just at the beginning, like me.","e8632fcd":"# Happiness Scores Top and Bottom Countries In 2019","6f3a19c1":"In this section, first I created a sub-data to look at the change in happiness scores over the years. For this sub data, I concatenate the score values of the years in the table. Then I melted the dataset by years. \n","9a9f7176":"While doing this, I first determined the countries I wanted by using the nlargest() and nsmallest() functions. The reason I don't use the max() and min() functions is because they only return a number as output. In these functions, we can directly see the data with the values we want.","56a220c8":"# Importing Libraries","58b16968":"Here, I found the highest scoring and lowest scoring countries according to the scores of the countries and compared some fetaurs. These characteristics were health, freedom, and social support scores. The reason I looked at these was because I wanted to see if these traits affect the happiness score.","1ff31950":"When we analyze the data, we must check the NaN values. As you can see in the below, there is only 1 NaN value in datasets. If there are several NaN values in the dataset, we can drop them. However, in datasets with a large number of NaN values, filling with a median or mean may give better results than discarding.","2b116fab":"Now we can merge the data on Country columns to make easier to analyze. In order to see which feature belongs to which country, I will add a suffix at the end of the features that says which year it belongs to.","0ef3fe79":"# Data Merge","2690792a":"# Data Analyze"}}