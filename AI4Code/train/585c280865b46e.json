{"cell_type":{"d8d10b1c":"code","34e3be15":"code","b0073ce9":"code","b1ecda3a":"code","3be8a39f":"code","c2e80bdc":"code","7086a284":"code","8ec4b79e":"code","82df8bae":"code","16371275":"code","46cd0c2a":"code","cbf24e4b":"code","5b53fe5c":"code","0a9367aa":"code","c177db02":"code","43e423ef":"code","bf70e568":"code","07c13296":"code","0dba1416":"code","e1d7d72b":"code","b12f3131":"code","15ba86d3":"code","9042d64f":"code","80671929":"code","1b82caf8":"code","6fa71c7b":"code","dc104cc8":"code","db87dd43":"code","e4ef61ab":"code","7c3fcd7e":"code","18dbc8ca":"code","1da7c719":"code","94d1476b":"code","a782b5df":"code","12f0ecbb":"code","dea9e267":"code","da2fc078":"code","82e3fdd8":"code","c4c841cc":"code","3c04cd4b":"markdown","203f0931":"markdown","e62a80f4":"markdown","a041569d":"markdown","84667ca3":"markdown","f34567dc":"markdown","8e6989fd":"markdown","ba67c78b":"markdown","6435fd51":"markdown","0802ddfe":"markdown","f6e29ab9":"markdown","dae19229":"markdown","0c15a70c":"markdown","b8423c43":"markdown","ff274a15":"markdown","4dbd160f":"markdown","2f11a978":"markdown"},"source":{"d8d10b1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34e3be15":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\n","b0073ce9":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","b1ecda3a":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","3be8a39f":"m.shape\nm = m.transpose()\nm.shape","c2e80bdc":"pData.head(2)","7086a284":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","8ec4b79e":"df.describe()","82df8bae":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","16371275":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","46cd0c2a":"if 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])","cbf24e4b":"lg = list(genes[1].values)\nlen(lg), len(set(lg))","5b53fe5c":"!pip install mygene\nimport mygene\nmg = mygene.MyGeneInfo()","0a9367aa":"list_histone_genes_from_wiki = ['H1F0' , 'H1FNT' , 'H1FOO' , 'H1FX' ,\n'HIST1H1A' , 'HIST1H1B' , 'HIST1H1C' , 'HIST1H1D' , 'HIST1H1E' , 'HIST1H1T' ,\n'H2AFB1' , 'H2AFB2' , 'H2AFB3' , 'H2AFJ' , 'H2AFV' , 'H2AFX' , 'H2AFY' , 'H2AFY2' , 'H2AFZ' ,\n'HIST1H2AA' , 'HIST1H2AB' , 'HIST1H2AC' , 'HIST1H2AD' , 'HIST1H2AE' , 'HIST1H2AG' , 'HIST1H2AI' , 'HIST1H2AJ' , 'HIST1H2AK' , 'HIST1H2AL' , 'HIST1H2AM' ,\n'HIST2H2AA3' , 'HIST2H2AC' ,\n'H2BFM' , 'H2BFS' , 'H2BFWT' ,\n'HIST1H2BA' , 'HIST1H2BB' , 'HIST1H2BC' , 'HIST1H2BD' , 'HIST1H2BE' , 'HIST1H2BF' , 'HIST1H2BG' , 'HIST1H2BH' , 'HIST1H2BI' , \n'HIST1H2BJ' , 'HIST1H2BK' , 'HIST1H2BL' , 'HIST1H2BM' , 'HIST1H2BN' , 'HIST1H2BO' ,\n'HIST2H2BE' ,\n'HIST1H3A' , 'HIST1H3B' , 'HIST1H3C' , 'HIST1H3D' , 'HIST1H3E' , 'HIST1H3F' , 'HIST1H3G' , 'HIST1H3H' , 'HIST1H3I' , 'HIST1H3J' ,\n'HIST2H3C' ,\n'HIST3H3' ,\n'HIST1H4A' , 'HIST1H4B' , 'HIST1H4C' , 'HIST1H4D' , 'HIST1H4E' , 'HIST1H4F' , 'HIST1H4G' , 'HIST1H4H' , 'HIST1H4I' , 'HIST1H4J' , 'HIST1H4K' , 'HIST1H4L' ,\n'HIST4H4' ]\nlen(list_histone_genes_from_wiki)\n","c177db02":"len(list_histone_genes_from_wiki), len( set(list_histone_genes_from_wiki) & set(genes[1].values) )","43e423ef":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nstr_reducer = 'UMAP'\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [10]: # [0,10, 50]: # range(10,100,10):\n\n    m3 = m2.copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros' +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","bf70e568":"    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + ' Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n  ","07c13296":"# top12 expressed histone genes:\nfor g in ['H1FX', 'H2AFZ', 'H2AFV', 'H1F0', 'H2AFY', 'HIST1H2AC', 'H2AFJ', 'HIST1H2BD', 'HIST1H4H', 'H2AFY2', 'HIST1H4C', 'H2AFX']: #list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","0dba1416":"\n        \n# top12 REPLICATION DEPENDENT expressed histone genes:\nfor g in ['HIST1H2AC', 'HIST1H2BD', 'HIST1H4H', 'HIST1H4C', 'HIST1H2BN',\n       'HIST1H2BC', 'HIST1H1C', 'HIST1H2BE', 'HIST1H1D', 'HIST1H2BJ',\n       'HIST1H1E', 'HIST2H2BE', 'HIST2H2AC', 'HIST1H3J', 'HIST1H3H']:# ['H1FX', 'H2AFZ', 'H2AFV', 'H1F0', 'H2AFY', 'HIST1H2AC', 'H2AFJ', 'HIST1H2BD', 'HIST1H4H', 'H2AFY2', 'HIST1H4C', 'H2AFX']: #list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()         ","e1d7d72b":"l = ['HIST1H1A', 'HIST1H1B', 'HIST1H1C', 'HIST1H1D', 'HIST1H1E', 'HIST1H1T', 'HIST1H2AA', 'HIST1H2AB', 'HIST1H2AC', 'HIST1H2AD', 'HIST1H2AE', 'HIST1H2AG', 'HIST1H2AI', 'HIST1H2AJ', 'HIST1H2AK', 'HIST1H2AL', 'HIST1H2AM', 'HIST2H2AA3', 'HIST2H2AC', 'HIST1H2BA', 'HIST1H2BB', 'HIST1H2BC', 'HIST1H2BD', 'HIST1H2BE', 'HIST1H2BF', 'HIST1H2BG', 'HIST1H2BH', 'HIST1H2BI', 'HIST1H2BJ', 'HIST1H2BK', 'HIST1H2BL', 'HIST1H2BM', 'HIST1H2BN', 'HIST1H2BO', 'HIST2H2BE', 'HIST1H3A', 'HIST1H3D', 'HIST1H3E', 'HIST1H3F', 'HIST1H3G', 'HIST1H3H', 'HIST1H3I', 'HIST1H3J', 'HIST2H3C', 'HIST3H3', 'HIST1H4A', 'HIST1H4B', 'HIST1H4C', 'HIST1H4D', 'HIST1H4E', 'HIST1H4F', 'HIST1H4G', 'HIST1H4H', 'HIST1H4I', 'HIST1H4J', 'HIST1H4K', 'HIST1H4L', 'HIST4H4']\n\n        \n# top12 REPLICATION DEPENDENT expressed histone genes:\ncolor_by = np.zeros(m.shape[0])\nfor g in l :\n    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    \nif 1:    \n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)    \n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by SUM of S-phase hostones' )#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    \n    plt.show()    \nif 1:    \n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)    \n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= (color_by != 0), alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by SUM of S-phase hostones' )#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    \n    plt.show()        ","b12f3131":"c = 0\n\nst = pd.DataFrame()\ni = 0\nfor g in list_histone_genes_from_wiki: #  ['cp_dose', 'cp_type','cp_time','y_sum']:\n    IX = np.where( genes[1].values == g)[0][0]\n    s1 = m[:,IX].toarray().ravel().sum()\n    s2 = m2[:,IX].toarray().ravel().sum()\n    # print(g,s1,s2)\n    st.loc[i,'gene'] = g\n    st.loc[i,'Expression sum'] = s1\n    st.loc[i,'Expressed cells count'] = (m[:,IX].toarray().ravel() != 0).sum()\n    st.loc[i,'Expression sum for normalized matrix'] = s2\n    \n    i += 1\n    \nst.sort_values('Expression sum', ascending = False ).head(50)","15ba86d3":"g = 'HIST1H2AC' # S-phase of cell cycle expressed gene\n\ndef get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 3):\n    import time\n\n    IX1 = np.where( genes[1] == g)[0][0]\n    v1 = m2[:,IX1].toarray().ravel()\n\n    s = np.asarray( m.sum(axis = 0)).ravel()\n    IX = np.argsort(s)[::-1][:n_top_expressed2look] # indices for top expressed\n    v2 = m2[:,IX].toarray() # convert top expressed to numpy array from sparse \n\n    #t0 = time.time()\n    d = pd.DataFrame()\n    d['gene'] = genes[1].values[IX]\n    if (np.abs(v1).sum() != 0):\n        cr = np.corrcoef(v1,v2.T)[0,:][1:] # some strange reindex to extract correlation vector from matrix ( I do not know why matrix her)\n        #print(time.time()-t0,'seconds passed')\n    else:\n        cr = np.ones(len(d)) * np.nan\n    d['correlation'] = cr\n    d['Abs correlation'] = np.abs(cr)\n\n    d = d.sort_values('Abs correlation', ascending = False)\n\n    str_result = ''\n    cc = 0\n    for i in range(n_correlations2return+1):\n        if d['gene'].iat[i] != g:\n            str_result += d['gene'].iat[i]\n            str_result += ' '\n            str_result += str(np.round(d['correlation'].iat[i] ,2) )\n            str_result += ' '\n            cc += 1\n        if cc >= n_correlations2return:\n            break\n    df_corr_stat = d \n    return str_result, df_corr_stat\nimport time\nt0 = time.time()\nstr_result, df_corr_stat = get_top_correlated_genes(g)\nprint(time.time() - t0,'seconds passed')\nprint( str_result )\n\nprint()\nstr_result, df_corr_stat = get_top_correlated_genes(g , n_top_expressed2look = 10000 )\nprint(time.time() - t0,'seconds passed')\nprint( str_result )\n","9042d64f":"import time\nt0 = time.time()\n\nl_histone_replication_dependent = []\nl_histone_replication_independent = []\nfor g in list_histone_genes_from_wiki: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    ensembl_id = genes[0].iat[i]\n    i = np.where(st['gene'].values == g)\n    \n    if 1: # g.startswith('H1'):\n        # print(g,ensembl_id)\n        g_inf = mg.getgene(ensembl_id.split('.')[0] )\n        if not isinstance(g_inf,dict): # '' is no\n            continue \n        s = g_inf.get( 'summary', 'NO summary info' )\n        if 'replication-dependent' in s.lower():\n            l_histone_replication_dependent.append(g)\n            st.loc[st.index[i], 'Replication Dependent' ] = True\n        elif 'replication-independent'  in s.lower():\n            l_histone_replication_independent.append(g)\n            st.loc[st.index[i], 'Replication Dependent' ] = False\n        else:\n            pass\n            #print()# #'No histone')\n        # print(s)\n        IX = st.index[i]\n        st.loc[IX,'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n        st.loc[IX,'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n        st.loc[IX,'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n        \n        str_corr_info, df_corr_info = get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 5)\n        st.loc[IX,'Top Correlated'] = str_corr_info\n        \n        if 0:\n            st.loc[IX,'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n        \n\nprint(  time.time()-t0 , 'seconds passed')\nprint('l_histone_replication_dependent', len(l_histone_replication_dependent ), l_histone_replication_dependent )\nprint()\nprint('l_histone_replication_independent',len(l_histone_replication_independent ),  l_histone_replication_independent )\nst.sort_values('Expression sum', ascending = False ).head(50)","80671929":"st.sort_values('Expression sum', ascending = False ).head(50)","1b82caf8":"st[st['Replication Dependent']==True].sort_values('Expression sum', ascending = False ).head(50)","6fa71c7b":"st[st['Replication Dependent']==True].sort_values('Expression sum', ascending = False ).head(50)['gene'].values","dc104cc8":"list_top_expressed_histone_genes = list( st.sort_values('Expression sum', ascending = False ).head(12)['gene'] )\nprint( list_top_expressed_histone_genes)","db87dd43":"for g in list_top_expressed_histone_genes[:6]: # list_histone_genes_from_wiki: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    ensembl_id = genes[0].iat[i]\n    if 1: # g.startswith('H1'):\n        print(g,ensembl_id)\n        g_inf = mg.getgene(ensembl_id.split('.')[0] )\n        if not isinstance(g_inf,dict): # '' is no\n            print('No info obtained')\n            print()\n            continue \n        s = g_inf.get( 'summary', 'NO summary info' )\n        if 'histone' in s.lower():\n            print('Histone')\n        else:\n            print('No histone')\n        print(s)","e4ef61ab":"\nt = pd.DataFrame()\nfor g in list_top_expressed_histone_genes: # list_histone_genes_from_wiki: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    t[g] =  m[:,i].toarray().ravel()\n    \n\ncorr = t.corr()\nc = np.triu(corr.values, 1).ravel()\nprint(np.max(c), ' max correlation' )\nprint(np.sort(c)[-5:], ' top values of correlation matrix')\ncorr ","7c3fcd7e":"\nt = pd.DataFrame()\nfor g in list_top_expressed_histone_genes: # list_histone_genes_from_wiki: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    t[g] =  m2[:,i].toarray().ravel()\n    \n\ncorr = t.corr()\nc = np.triu(corr.values, 1).ravel()\nprint(np.max(c), ' max correlation' )\nprint(np.sort(c)[-5:], ' top values of correlation matrix')\n# corr ","18dbc8ca":"\nt = pd.DataFrame()\nfor g in list_top_expressed_histone_genes: # list_histone_genes_from_wiki: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    t[g] =  m2[:,i].toarray().ravel() != 0 \n    \n\ncorr = t.corr()\nc = np.triu(corr.values, 1).ravel()\nprint(np.max(c), ' max correlation' )\nprint(np.sort(c)[-5:], ' top values of correlation matrix')\n# corr ","1da7c719":"import time\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1]\nlen(IX)\n\ng = 'H1FX'\ni = np.where(genes[1].values == g)[0][0] #.iat[i]\nv =  m2[:,i].toarray().ravel() \n\nt0 = time.time() \nt = pd.DataFrame()\nfor j in range(500): # range(len(genes)): #  list_top_expressed_histone_genes: # list_histone_genes_from_wiki: # range( len(genes) ):\n    #i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    i = IX[j]\n    v2 =  m2[:,i].toarray().ravel() #  != 0 \n    cf = np.corrcoef(v,v2)# [1,2,2],[3,4,0])\n    g2 = genes[1].iat[i]\n    t.loc[g2,'correlation to '+str(g)] = cf[0,1]\n    t.loc[g2,'Abs correlation to '+str(g)] = np.abs(  cf[0,1] )\n    if j%100 == 0:\n        print(j, time.time()-t0, 'seconds passed')\nt.sort_values('Abs correlation to '+str(g),ascending = False).head(50)","94d1476b":"# HIST1H2AC \ng = 'HIST1H2AC' # S-phase of cell cycle expressed gene\n\nimport time\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1]\nlen(IX)\n\ni = np.where(genes[1].values == g)[0][0] #.iat[i]\nv =  m2[:,i].toarray().ravel() \n\nt0 = time.time() \nt = pd.DataFrame()\nfor j in range(500): # range(len(genes)): #  list_top_expressed_histone_genes: # list_histone_genes_from_wiki: # range( len(genes) ):\n    #i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    i = IX[j]\n    v2 =  m2[:,i].toarray().ravel() #  != 0 \n    cf = np.corrcoef(v,v2)# [1,2,2],[3,4,0])\n    g2 = genes[1].iat[i]\n    t.loc[g2,'correlation to '+str(g)] = cf[0,1]\n    t.loc[g2,'Abs correlation to '+str(g)] = np.abs(  cf[0,1] )\n    if j%100 == 0:\n        print(j, time.time()-t0, 'seconds passed')\nt.sort_values('Abs correlation to '+str(g),ascending = False).head(50)","a782b5df":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\ncell_cycle_genes_reactome_extended = d[0].values","12f0ecbb":"# HIST1H2AC \ng = 'HIST1H2AC' # S-phase of cell cycle expressed gene\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","dea9e267":"\nfig = plt.figure(figsize = (15,7) )\n\nfor g in list_top_expressed_histone_genes: # list_histone_genes_from_wiki: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    v =  m2[:,i].toarray().ravel()\n    v = np.sort(v)\n    #v = np.log10(1+v)\n    plt.plot(v,label = g)\nplt.legend()\nplt.grid()\nplt.title('Log10 of expression')\nplt.xlabel('cells ordered by expression')\nplt.show()\n\nfig = plt.figure(figsize = (15,7) )\n\nfor g in list_top_expressed_histone_genes: # list_histone_genes_from_wiki: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    v =  m[:,i].toarray().ravel()\n    v = np.sort(v)\n    #v = np.log10(1+v)\n    plt.plot(v,label = g)\nplt.legend()\nplt.grid()\nplt.title('Expression counts')\nplt.xlabel('cells ordered by expression')\nplt.show()","da2fc078":"import time\nt0 = time.time()\n\nfig = plt.figure(figsize = (15,7) )\nc = 0\n\nfor g in list_top_expressed_histone_genes: # list_histone_genes_from_wiki: #  ['cp_dose', 'cp_type','cp_time','y_sum']:\n    IX = np.where( genes[1].values == g)[0][0]\n    c+=1; fig.add_subplot(1, 4 , c) \n    sns.scatterplot(x=r[:,0], y=r[:,1] , hue =  ( m[:,IX].toarray().ravel() != 0 )  )\n    \n    plt.title(g)\n    if c%4 == 0:\n        plt.show()\n        print(time.time()-t0, 'seconds passed')\n        fig = plt.figure(figsize = (15,7) )\n        c = 0\n        ","82e3fdd8":"import time\nt0 = time.time()\n\nfig = plt.figure(figsize = (15,7) )\nc = 0\n\nfor g in list_top_expressed_histone_genes: # list_histone_genes_from_wiki: #  ['cp_dose', 'cp_type','cp_time','y_sum']:\n    IX = np.where( genes[1].values == g)[0][0]\n    c+=1; fig.add_subplot(1, 4 , c) \n    sns.scatterplot(x=r[:,0], y=r[:,1] , hue = m[:,IX].toarray().ravel()  )\n    \n    plt.title(g)\n    if c%4 == 0:\n        plt.show()\n        print(time.time()-t0, 'seconds passed')\n        fig = plt.figure(figsize = (15,7) )\n        c = 0\n        ","c4c841cc":"import time\nt0 = time.time()\n\n\nfig = plt.figure(figsize = (15,7) )\nc = 0\n\nfor g in list_histone_genes_from_wiki: #  ['cp_dose', 'cp_type','cp_time','y_sum']:\n    IX = np.where( genes[1].values == g)[0][0]\n    c+=1; fig.add_subplot(1, 4 , c) \n    sns.scatterplot(x=r[:,0], y=r[:,1] , hue = m2[:,IX].toarray().ravel()  )\n    \n    plt.title(g)\n    if c%4 == 0:\n        plt.show()\n        print(time.time()-t0, 'seconds passed')\n        fig = plt.figure(figsize = (15,7) )\n        c = 0\n        ","3c04cd4b":"# Search top correlated to histone genes among all top expressed genes ","203f0931":"# Histone genes and cell cycle\n\n###  Histones are subdivided into canonical replication-dependent histones that are expressed during the S-phase of the cell cycle and replication-independent histone variants, expressed during the whole cell cycle. ","e62a80f4":"# Load information files: genes annotations, cells info etc...","a041569d":"# Normalization and log ","84667ca3":"# UMAP visualization","f34567dc":"# Load count matrix and convert it to sparse matrix csr_matrix","8e6989fd":"# What is about \n\nHere we analyse sciPlex2 subdataset looking at histone genes.\nThere are 76 histone genes (according to wikipedia).\nMain part of histone genes produces protein from which nucleosomes are made (histone octomers).\nThey play important role in many processes in cell.\nIn particular the paper dicusses a lot drugs \"HDAC\" (Histone deacetylase)\n\nSee for futher info on histones:\nhttps:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/228144\n\nIn particular histones play role at cell cycle and some histones should be expressed at S-phase.\n\n\n------------------\n\n\n#### Conclusions: \n\nAt the moment, unfortunately, expected outcomes not yet obtained:\n\n\nThe hope was to see \"S\"-phase of cell cycle (since replication-dependent histones are expressed at S-phase) , but seems it is not so easy.\n\n\n\nCorrelations of histone genes is not so big - max is 0.56 for H1FX H1F0 (both are linker histones - not those which construct nucleosome and not S-phase expressed). \n\nWe see some higher levels of expressions some histone genes for cell affected by SAHA (HDAC) drug, does it correspond to bio sense ? \n\n--------------------\n\nWith mygene package we get the following: \n\n**l_histone_replication_dependent** 58 ['HIST1H1A', 'HIST1H1B', 'HIST1H1C', 'HIST1H1D', 'HIST1H1E', 'HIST1H1T', 'HIST1H2AA', 'HIST1H2AB', 'HIST1H2AC', 'HIST1H2AD', 'HIST1H2AE', 'HIST1H2AG', 'HIST1H2AI', 'HIST1H2AJ', 'HIST1H2AK', 'HIST1H2AL', 'HIST1H2AM', 'HIST2H2AA3', 'HIST2H2AC', 'HIST1H2BA', 'HIST1H2BB', 'HIST1H2BC', 'HIST1H2BD', 'HIST1H2BE', 'HIST1H2BF', 'HIST1H2BG', 'HIST1H2BH', 'HIST1H2BI', 'HIST1H2BJ', 'HIST1H2BK', 'HIST1H2BL', 'HIST1H2BM', 'HIST1H2BN', 'HIST1H2BO', 'HIST2H2BE', 'HIST1H3A', 'HIST1H3D', 'HIST1H3E', 'HIST1H3F', 'HIST1H3G', 'HIST1H3H', 'HIST1H3I', 'HIST1H3J', 'HIST2H3C', 'HIST3H3', 'HIST1H4A', 'HIST1H4B', 'HIST1H4C', 'HIST1H4D', 'HIST1H4E', 'HIST1H4F', 'HIST1H4G', 'HIST1H4H', 'HIST1H4I', 'HIST1H4J', 'HIST1H4K', 'HIST1H4L', 'HIST4H4']\n\n**l_histone_replication_independent** 15 ['H1F0', 'H1FNT', 'H1FOO', 'H1FX', 'H2AFB1', 'H2AFB2', 'H2AFB3', 'H2AFJ', 'H2AFV', 'H2AFX', 'H2AFY', 'H2AFY2', 'H2AFZ', 'H2BFM', 'H2BFWT']\n\n\n------------------\n\n#### Dataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n ----------\n \n Version 6:  change normalization \/ log order\n \n ","ba67c78b":"# Expression of histone genes","6435fd51":"# Expression analysis ","0802ddfe":"# Visuzalization colored by histone genes (normalized expression sum)","f6e29ab9":"# Look at duplicates","dae19229":"# Histone genes info","0c15a70c":"# Correlation analysis ","b8423c43":"# Visualization colored by top expressed histone genes","ff274a15":"# Visualization colored by S-phase active histones ","4dbd160f":"# Visualization colored by top expressed histone genes, by boolean - expressed or not","2f11a978":"# Create columns with information on each cell (drug, dose, etc)"}}