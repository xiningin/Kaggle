{"cell_type":{"0518f84b":"code","14e083bf":"code","8fed9cff":"code","45160451":"code","4a75dbbe":"code","3d209202":"code","00df9a29":"code","3de2b3c4":"code","2b30ac7e":"code","fde9c6bd":"code","cbf456f1":"code","079cb307":"code","fdb89df0":"code","3c31033f":"code","cc6cc495":"code","e0fb85d8":"code","52a1c70a":"code","7c6f91f2":"code","5be50df9":"code","c9d382e1":"code","dcceec81":"code","909c380b":"code","8dbd2617":"code","38fc1a81":"code","011eb24d":"code","85188dd1":"code","f1c0ae8d":"code","650f13be":"code","cfc34aaa":"code","8d53cd34":"code","014c49c7":"code","681de204":"code","34ea13e5":"code","7f054c56":"code","2afcdeed":"code","8adc53d9":"code","2703857c":"code","dd46f98c":"code","8d760dbc":"code","70f17eb0":"code","b51c2508":"code","66e9e5d9":"code","04aae4dd":"code","5bade992":"code","a92a04e9":"markdown","1ad66c67":"markdown","afe9f9c8":"markdown","34e11779":"markdown","f2c0a19f":"markdown","f4eb0ed5":"markdown","8e8cfc3e":"markdown","83dfe4f8":"markdown","54bc34d8":"markdown","d03ceffc":"markdown","4cdc32b4":"markdown","0d3c4b84":"markdown","44219018":"markdown","d259b863":"markdown","beaea2f7":"markdown"},"source":{"0518f84b":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom pandas.core.common import SettingWithCopyWarning\nwarnings.simplefilter(action=\"ignore\", category=SettingWithCopyWarning)\nfrom sklearn.model_selection import train_test_split,cross_val_predict\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, \\\n    roc_auc_score, confusion_matrix, classification_report, plot_roc_curve","14e083bf":"df = pd.read_csv(\"..\/input\/cardiovascular-disease-dataset\/cardio_train.csv\", sep = \";\")","8fed9cff":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.float_format', lambda x :'% 3f' % x)","45160451":"df.head()","4a75dbbe":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","3d209202":"check_df(df)","00df9a29":"df = df.drop('id', axis=1)\ndf.head()","3de2b3c4":"#convert it to age by years\ndf[\"age\"] = round(df[\"age\"] \/ 365)","2b30ac7e":"df.head()","fde9c6bd":"def outlier_thresholds(dataframe, col_name, q1=0.10, q3=0.90):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","cbf456f1":"def check_outlier(dataframe, col_name, q1=0.10, q3=0.90):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","079cb307":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","fdb89df0":"cat_cols, num_cols, cat_but_car = grab_col_names(df)\n\nfor col in num_cols:\n    print(col, check_outlier(df, col))","3c31033f":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","cc6cc495":"for col in num_cols:\n    replace_with_thresholds(df, col)","e0fb85d8":"for col in num_cols:\n    print(col, check_outlier(df, col))","52a1c70a":"df.isnull().values.any()","7c6f91f2":"df.head()","5be50df9":"df.loc[(df[\"age\"] < 18), \"NEW_AGE\"] = \"Young\"\ndf.loc[(df[\"age\"] > 18) & (df[\"age\"] < 56), \"NEW_AGE\"] = \"Mature\"\ndf.loc[(df[\"age\"] >= 56), \"NEW_AGE\"] = \"Old\"","c9d382e1":"cols1 = df[\"weight\"]\ncols2 = df[\"height\"] \/ 100","dcceec81":"df[\"bmi\"] = (cols1) \/ (cols2)**2","909c380b":"df.head()","8dbd2617":"df.loc[(df[\"bmi\"] < 18.5), \"NEW_BMI\"] = \"under\"\ndf.loc[(df[\"bmi\"] >= 18.5) & (df[\"bmi\"] <= 24.99) ,\"NEW_BMI\"] = \"healthy\"\ndf.loc[(df[\"bmi\"] >= 25) & (df[\"bmi\"] <= 29.99) ,\"NEW_BMI\"]= \"over\"\ndf.loc[(df[\"bmi\"] >= 30), \"NEW_BMI\"] = \"obese\"","38fc1a81":"df[\"ap_hi\"].max()","011eb24d":"df.loc[(df[\"ap_lo\"])<=89, \"BLOOD_PRESSURE\"] = \"normal\"\ndf.loc[(df[\"ap_lo\"])>=90, \"BLOOD_PRESSURE\"] = \"hyper\"\ndf.loc[(df[\"ap_hi\"])<=120, \"BLOOD_PRESSURE\"] = \"normal\"\ndf.loc[(df[\"ap_hi\"])>120, \"BLOOD_PRESSURE\"] = \"normal\"\ndf.loc[(df[\"ap_hi\"])>=140, \"BLOOD_PRESSURE\"] = \"hyper\"","85188dd1":"df.head()","f1c0ae8d":"df.groupby('age')['cardio'].mean()","650f13be":"df.groupby(\"smoke\")[\"cardio\"].mean()","cfc34aaa":"from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler","8d53cd34":"# label encoder\ndef label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col].astype(str))\n    return dataframe\n\nbinary_cols = [col for col in df.columns if df[col].dtypes == \"O\"\n               and len(df[col].unique()) == 2]\n\nfor col in df.columns:\n    label_encoder(df, col)","014c49c7":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe\n\nohe_cols = [col for col in df.columns if 10 >= len(df[col].unique()) > 2]\n\none_hot_encoder(df, ohe_cols, drop_first=True).head()","681de204":"rs = RobustScaler()\ndf[num_cols] = rs.fit_transform(df[num_cols])","34ea13e5":"y = df[\"cardio\"]\nX = df.drop([\"cardio\"], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20, random_state=1)","7f054c56":"log_model = LogisticRegression().fit(X_train, y_train)","2afcdeed":"# Train Accuracy\ny_pred = log_model.predict(X_train)\naccuracy_score(y_train, y_pred)","8adc53d9":"y_prob = log_model.predict_proba(X_test)[:, 1]\n\ny_pred = log_model.predict(X_test)","2703857c":"def plot_confusion_matrix(y, y_pred):\n    acc = round(accuracy_score(y, y_pred), 2)\n    cm = confusion_matrix(y, y_pred)\n    sns.heatmap(cm, annot=True, fmt=\".0f\")\n    plt.xlabel('y_pred')\n    plt.ylabel('y')\n    plt.title('Accuracy Score: {0}'.format(acc), size=10)\n    plt.show()\n\nplot_confusion_matrix(y_test, y_pred)","dd46f98c":"accuracy_score(y_test, y_pred)","8d760dbc":"precision_score(y_test, y_pred)","70f17eb0":"recall_score(y_test, y_pred)","b51c2508":"f1_score(y_test, y_pred)","66e9e5d9":"plot_roc_curve(log_model, X_test, y_test)\nplt.title('ROC Curve')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.show()","04aae4dd":"roc_auc_score(y_test, y_prob)","5bade992":"print(classification_report(y_test, y_pred))","a92a04e9":"Evaluate the success of the model with train set","1ad66c67":"Adjust thresholds and check the outliers","afe9f9c8":"Replacing outliers with upper and lower limit","34e11779":"Which features have outliers?","f2c0a19f":"Scale the data,\n\nI used RobustScaler because it robust the outliers","f4eb0ed5":"**Feature Engineering**","8e8cfc3e":"First look at the data","83dfe4f8":"Using the label encoder for data types object and unique values equal to 2","54bc34d8":"Build the model and train","d03ceffc":"Evaluate the model accuracy with test set","4cdc32b4":"Define the target variable and features,\nSplit the data by train and test. Test size is 20% and train size is 80%","0d3c4b84":"Data description\nThere are 3 types of input features:\n\nObjective: factual information;\nExamination: results of medical examination;\nSubjective: information given by the patient.\nFeatures:\n\nAge | Objective Feature | age | int (days)\nHeight | Objective Feature | height | int (cm) |\nWeight | Objective Feature | weight | float (kg) |\nGender | Objective Feature | gender | categorical code |\nSystolic blood pressure | Examination Feature | ap_hi | int |\nDiastolic blood pressure | Examination Feature | ap_lo | int |\nCholesterol | Examination Feature | cholesterol | 1: normal, 2: above normal, 3: well above normal |\nGlucose | Examination Feature | gluc | 1: normal, 2: above normal, 3: well above normal |\nSmoking | Subjective Feature | smoke | binary |\nAlcohol intake | Subjective Feature | alco | binary |\nPhysical activity | Subjective Feature | active | binary |\nPresence or absence of cardiovascular disease | Target Variable | cardio | binary |\nAll of the dataset values were collected at the moment of medical examination.","44219018":"We were able to separate the variables in the data set as categorical and numerical.","d259b863":"Using one-hot-encoder for categorical cols","beaea2f7":"**DATA PREP & EDA**"}}