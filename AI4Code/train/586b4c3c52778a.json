{"cell_type":{"f1e9b895":"code","e4b2d273":"code","cd245ea8":"code","bc4b5d2e":"code","5830c0aa":"code","f56cd1c7":"code","1cd1a378":"code","9acb3d3c":"code","6c371b09":"code","9383baae":"code","168eb132":"code","d4697b10":"code","35413b91":"code","480a96ba":"code","f5ba6d6e":"code","96015ade":"code","ce67533a":"code","34e79ffd":"code","a6cd813f":"code","cd57751d":"code","702fc7fd":"code","7e893be8":"code","7ffce865":"code","6227dc5f":"code","7f9a7d2b":"code","27a3b18f":"code","6f9b327a":"code","628e9531":"code","2b3c55cd":"code","15bafdff":"code","cccf68b6":"code","8dd5a540":"code","3632a485":"code","a9bade41":"code","21829d7f":"code","2fb99537":"code","2a3bc1ce":"code","71bd3adb":"code","39ed00b0":"code","11e4036d":"code","0b56bbd5":"code","08587d8d":"code","b6c87eac":"code","8643a647":"code","68e4dcd7":"code","565c095f":"code","1c2853ca":"code","1cceb2fb":"code","cbac9cba":"code","b2eac737":"code","6c45a69d":"code","d13ff7d2":"code","caa18ec9":"code","74d6a2ed":"markdown","e58eee24":"markdown","bef3fc73":"markdown","e1a6b072":"markdown","c4677f10":"markdown","3b622c8b":"markdown","23ef9fd7":"markdown","e65af316":"markdown","b9eb36db":"markdown","eaedef8c":"markdown","caa52aec":"markdown","e499430d":"markdown","18281b2d":"markdown","5b0f3270":"markdown","d751dfd0":"markdown","a10fe14d":"markdown","578bbd9d":"markdown","f6645c4e":"markdown","6b08045e":"markdown"},"source":{"f1e9b895":"# Linear Algebra, Data Manipulation\nimport numpy as np\nimport pandas as pd\n\n# Plots\nimport seaborn as sns\npal_hls = sns.hls_palette(100, l=.3, s=.8).as_hex() # Seaborn Color Palette for colors\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nsns.set_style('darkgrid')\n\n# Interactive Plots\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\nimport plotly.graph_objects as go\ninit_notebook_mode()\n\n# Ignore Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e4b2d273":"games = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/games.csv\")\ngames","cd245ea8":"games[\"month\"] = games[\"gameDate\"].apply(lambda x: int(x.split(\"\/\")[0]))\ngames[\"day\"] = games[\"gameDate\"].apply(lambda x: int(x.split(\"\/\")[1]))\ngames[\"hour\"] = games[\"gameTimeEastern\"].apply(lambda x: int(x.split(\":\")[0]))","bc4b5d2e":"def plotlybar(data, column, title):\n    df = pd.DataFrame()\n\n    df[column] = data[column].value_counts().index # Gets all the unique seasons\n    df[\"gamesCount\"] = data[column].value_counts().values # Gets the gamesCount for those unique seasons\n    df[\"percent\"] = round(df.gamesCount \/ len(data) * 100, 1) # The Percent of games played that season\n\n    # Bar plot using plotly bar plot\n    fig = px.bar(df, \n                y='gamesCount',\n                x=column,\n                text='percent',\n                height=600, width=950,\n                title=f\"<b>{title}<\/b>\", color=pal_hls[:len(df)])\n    fig.update_traces(texttemplate='%{text}%', textposition='outside') # The text at the top of the bar plot\n    fig.update_layout(\n        xaxis = dict(dtick = 1),\n        showlegend=False) # Fixing the problem with the x ticks here\n    fig.show()","5830c0aa":"plotlybar(games, \"season\", \"Number of Games Played Every Season\")","f56cd1c7":"title_font_dict = {\"fontsize\": 16, \"fontweight\": \"bold\"}\n\nplt.figure(figsize=(10, 5), dpi=100)\nsns.countplot(x='season', data=games, hue='month', lw=2)\nplt.title('Games in Year\/Season', fontdict=title_font_dict)\nplt.legend([\"January\", \"September\", \"October\", \"November\", \"December\"],\n               loc='center right', bbox_to_anchor=(1.2, 0.5), ncol=1)\nplt.show()","1cd1a378":"plotlybar(games, \"month\", \"Number of Games Played Every Month\")","9acb3d3c":"plotlybar(games, \"day\", \"Number of Games Held Every Day\")","6c371b09":"plotlybar(games, \"gameTimeEastern\", \"Number of Games played on different gameTimeEastern\")","9383baae":"plotlybar(games, \"hour\", \"Number of Games played on different gameTimeEastern(ignoring minutes)\")","168eb132":"plotlybar(games, \"week\", \"Number of Games Held Every week\")","d4697b10":"players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\nplayers","35413b91":"players_heights = players[\"height\"] # Get the Height data from DataFrame\nplayers_heights = players_heights.apply(lambda x: x.split(\"-\")) # Split the heights by hyphen (\"-\")\n\n# Convert Heights to Centimeters and add them to DataFrame\nplayers[\"height\"] = players_heights.apply(lambda x: int(x[0]) * 12 + int(x[1]) if len(x) == 2 else int(x[0])) * 2.54\n\n# Convert Weights to Kilograms and them to DataFrame\nplayers[\"weight\"] = round(players.weight * 0.453592, 2)\n\nplayers","480a96ba":"players[\"birthYear\"] = 0\nplayers[\"birthMonth\"] = 0","f5ba6d6e":"#There are NA values in birthDate so that we should drop them\nplayers.dropna(subset=[\"birthDate\"], inplace=True)","96015ade":"for idx, row in players.iterrows():\n    if len(row['birthDate'].split('\/')) == 3: # 05\/17\/1994 \n        players.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('\/')[0]\n        \n    elif len(row['birthDate'].split('-')) == 3: # 1995-05-05\n        players.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('-')[1]","ce67533a":"players","34e79ffd":"fig = plt.figure(figsize=(20, 15), dpi=80)\n\nbirth_year_dist = players.birthYear.value_counts().sort_index()\nax1 = fig.add_subplot(221)\nsns.barplot(x=birth_year_dist.index, y=birth_year_dist.values, ax=ax1)\nax1.tick_params(axis='x', rotation=45)\nax1.set_title(\"Birth Year Distribution\", fontdict=title_font_dict)\n\nbirth_month_dist = players.birthMonth.value_counts().sort_index()\nax2 = fig.add_subplot(222)\nsns.barplot(x=birth_month_dist.index, y=birth_month_dist.values, ax=ax2)\nax2.set_title(\"Birth Month Distribution\", fontdict=title_font_dict)\n\nax3 = fig.add_subplot(223)\nsns.histplot(players.weight, ax=ax3)\nax3.set_title(\"Weight(Kg) Distribution\", fontdict=title_font_dict)\n\nax4 = fig.add_subplot(224)\nsns.histplot(players.height, ax=ax4, bins=10)\nax4.set_title(\"Height(cm) Distribution\", fontdict=title_font_dict);","a6cd813f":"fig = plt.figure(figsize=(20, 12), dpi=80)\ntitle_font_dict = {\"fontsize\": 16, \"fontweight\": \"bold\"}\n\nax1 = fig.add_subplot(211)\nsns.boxplot(players.weight, ax=ax1, width=0.5)\nax1.set_title(\"Weight(Kg) Distribution\", fontdict=title_font_dict)\n\nax2 = fig.add_subplot(212)\nsns.boxplot(players.height, ax=ax2, width=0.5)\nax2.set_title(\"Height(cm) Distribution\", fontdict=title_font_dict);","cd57751d":"print(f\"Youngest Player Born in: {players.birthYear.max()}\")\nprint(f\"Oldest Player Born in: {players.birthYear.min()}\")","702fc7fd":"plt.figure(figsize=(10, 6), dpi=100)\nsns.regplot(x=players.weight, y=players.height, line_kws={\"color\": \"orange\"})\nplt.title(\"Player Weight(Kg) vs Player Height(cm)\");","7e893be8":"# Seeing Which college has given the most number of players\n\ncollege_count = players.collegeName.value_counts()[:25]\n\nfig = px.bar(x=college_count.index, y=college_count.values,\n             labels={\"x\":\"College Name\", \"y\":\"Count\"}, title=\"<b>Players College Count<\/b>\")\nfig.update_layout(\n  width=1300,\n  height=500,\n)\nfig.show()","7ffce865":"position_count = players.Position.value_counts()\n\nfig = px.bar(x=position_count.index, y=position_count.values,\n             labels={\"x\":\"Position\", \"y\":\"Count\"}, title=\"<b>Players Position Count<\/b>\")\nfig.update_layout(\n  width=1300,\n  height=500,\n)\nfig.show()","6227dc5f":"plays = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/plays.csv\")\nplays","7f9a7d2b":"plt.figure(figsize=(15, 12))\nsns.heatmap(plays.corr(), annot=True)","27a3b18f":"plays.info()","6f9b327a":"plotlybar(plays, \"quarter\", \"Number of Plays every quater\")","628e9531":"plotlybar(plays, \"down\", \"Number of Plays every down\")","2b3c55cd":"plotlybar(plays, \"yardsToGo\", \"Number of Plays every yardsToGo\")","15bafdff":"plotlybar(plays, \"specialTeamsPlayType\", \"Number of Playes per specialTeamsPlayType\")","cccf68b6":"plotlybar(plays, \"possessionTeam\", \"Number of Playes per possessionTeam\")","8dd5a540":"plt.figure(figsize=(10, 12), dpi=100)\n\nax1 = plt.subplot(211)\nsns.histplot(plays.kickLength, ax=ax1)\nax1.set_title(\"Kick Length Distribution\", fontdict=title_font_dict)\nax1.set_xticks(np.arange(0, 85, 10));\n\nax2 = plt.subplot(212)\nsns.boxplot(plays.kickLength, ax=ax2, width=0.5)\nax2.set_title(\"Kick Length Distribution\", fontdict=title_font_dict)\nax2.set_xticks(np.arange(0, 85, 10));","3632a485":"columns = [\"quarter\", \"down\", \"preSnapHomeScore\", \"preSnapVisitorScore\", \"kickReturnYardage\", \"kickLength\", \"yardsToGo\", \"kickBlockerId\",\n           \"yardlineNumber\", \"penaltyYards\", \"playResult\"]\n\nplays_temp = plays[columns]\nplays_temp","a9bade41":"plt.figure(figsize=(12, 8), dpi=80)\nsns.heatmap(plays_temp.corr(), annot=True)\nplt.title(\"Correlation Heat Map\", fontdict=title_font_dict);","21829d7f":"plt.figure(figsize=(15, 6), dpi=100)\n\nax1 = plt.subplot(121)\nsns.boxplot(\n    x = plays_temp.quarter,\n    y = plays_temp.preSnapHomeScore,\n    ax=ax1\n)\nax1.set_title(\"quarter vs preSnapHomeScore\", fontdict=title_font_dict)\n\nax2 = plt.subplot(122)\nsns.boxplot(\n    x = plays_temp.quarter,\n    y = plays_temp.preSnapVisitorScore,\n    ax=ax2\n)\nax2.set_title(\"quarter vs preSnapVisitorScore\", fontdict=title_font_dict);","2fb99537":"plt.figure(figsize=(15, 6), dpi=100)\n\nax1 = plt.subplot(121)\nsns.boxplot(\n    x = plays_temp.down,\n    y = plays_temp.kickReturnYardage,\n    ax=ax1\n)\nax1.set_title(\"down vs kickReturnYardage\", fontdict=title_font_dict)\n\nax2 = plt.subplot(122)\nsns.boxplot(\n    x = plays_temp.down,\n    y = plays_temp.kickLength,\n    ax=ax2\n)\nax2.set_title(\"down vs kickLength\", fontdict=title_font_dict);","2a3bc1ce":"plt.figure(figsize=(25, 8))\n\nax1 = plt.subplot(131)\nsns.boxplot(\n    x = plays_temp.yardsToGo,\n    y = plays_temp.kickReturnYardage,\n    ax=ax1\n)\nax1.set_title(\"yardsToGo vs kickReturnYardage\", fontdict=title_font_dict)\n\nax2 = plt.subplot(132)\nsns.boxplot(\n    x = plays_temp.yardsToGo,\n    y = plays_temp.kickLength,\n    ax=ax2\n)\nax2.set_title(\"yardsToGo vs kickLength\", fontdict=title_font_dict);\n\nax3 = plt.subplot(133)\nsns.boxplot(\n    x = plays_temp.yardsToGo,\n    y = plays_temp.kickBlockerId,\n    ax=ax3\n)\nax3.set_title(\"yardsToGo vs kickBlockerId\", fontdict=title_font_dict);","71bd3adb":"plt.figure(figsize=(20, 10))\n\nax1 = plt.subplot(121)\nsns.regplot(\n    x = plays_temp.yardlineNumber,\n    y = plays_temp.playResult,\n    ax=ax1, line_kws={\"color\": \"orange\"}, scatter_kws={\"color\": \"#396EB0\"},\n)\nax1.set_title(\"yardlineNumber vs playResult\", fontdict=title_font_dict)\n\nax2 = plt.subplot(122)\nsns.regplot(\n    x = plays_temp.yardlineNumber,\n    y = plays_temp.kickLength,\n    ax=ax2, line_kws={\"color\": \"#396EB0\"}, scatter_kws={\"color\": \"orange\"},\n    marker=\"+\"\n)\nax2.set_title(\"yardlineNumber vs kickLength\", fontdict=title_font_dict);","39ed00b0":"plt.figure(figsize=(20, 10))\n\nax1 = plt.subplot(121)\nsns.regplot(\n    x = plays_temp.kickLength,\n    y = plays_temp.kickReturnYardage,\n    ax=ax1, line_kws={\"color\": \"orange\"}, scatter_kws={\"color\": \"#396EB0\"},\n)\nax1.set_title(\"kickLength vs kickReturnYardage\", fontdict=title_font_dict)\n\nax2 = plt.subplot(122)\nsns.regplot(\n    x = plays_temp.kickLength,\n    y = plays_temp.playResult,\n    ax=ax2, line_kws={\"color\": \"#396EB0\"}, scatter_kws={\"color\": \"orange\"},\n    marker=\"+\"\n)\nax2.set_title(\"kickLength vs playResult\", fontdict=title_font_dict);","11e4036d":"tracking2020 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')\ntracking2020.head()","0b56bbd5":"# Downloading and Saving Field Image for BackGround\nimport urllib.request\nurllib.request.urlretrieve(\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c5\/AmFBfield.svg\/1200px-AmFBfield.svg.png\", \"field.png\")\n\nfrom PIL import Image\n#set a local image as a background\nimage_filename = 'field.png'\nplotly_logo = Image.open(image_filename)","08587d8d":"def plot_tracking_data(gameId, playId=False, position=False):\n    team_names = [\"home\", \"away\", \"football\"]\n    colors = [\"#396EB0\", \"#116530\", \"red\"]\n    \n    if playId:\n        temp_tracking_df = tracking2020.query(f'gameId == {gameId} and playId == {playId}')\n        teams = 3\n    elif position:\n        temp_tracking_df = tracking2020.query(f'gameId == {gameId} and position == \"{position}\"')\n        teams = 2\n        \n    fig = go.Figure()\n    \n    for i in range (teams):\n        fig.add_trace(go.Scatter(\n            x = temp_tracking_df.query(f\"team == '{team_names[i]}'\").x,\n            y = temp_tracking_df.query(f\"team == '{team_names[i]}'\").y,\n            mode = \"markers\",\n            name=team_names[i],\n            marker=dict(color=colors[i])\n        ))\n        \n    if playId:\n        title = f\"<b>Tracking Data - gameId = {gameId} and playId = {playId}<\/b>\"\n    elif position:\n        title = f\"<b>Tracking Data - gameId = {gameId} and position = {position}<\/b>\"\n        \n    fig.update_layout(\n        template=\"plotly_white\",\n        autosize=False,\n        width=1000,\n        height=550,\n        images= [dict(source=plotly_logo,\n                      xref=\"paper\", yref=\"paper\",x=0, y=1, sizex=1, sizey=1,\n                      layer=\"below\", opacity=0.5)],\n        xaxis=dict(showgrid=False),\n        yaxis=dict(showgrid=False),\n        title=title,\n        xaxis_title=\"x\",\n        yaxis_title=\"y\",\n    )\n    fig.show()","b6c87eac":"plot_tracking_data(gameId=2020092707, playId=1186)","8643a647":"plot_tracking_data(gameId=2020102600, playId=250)","68e4dcd7":"plot_tracking_data(gameId=2021010307, playId=2460)","565c095f":"temp_tracking_df = tracking2020.query(f'gameId == 2021010307 and position == \"RB\"')\n","1c2853ca":"plot_tracking_data(gameId=2020102508, position=\"CB\")","1cceb2fb":"plot_tracking_data(gameId=2020101112, position=\"LB\")","cbac9cba":"plot_tracking_data(gameId=2020102507, position=\"RB\")","b2eac737":"import base64\n\ndef animated_game(gameId, playId, speed):\n    temp_tracking_df = tracking2020[tracking2020['gameId'] == gameId]\n\n    temp_tracking_query = (tracking2020['gameId'] == gameId) & (tracking2020['playId'] == playId)\n\n    temp_tracking_df = (\n        tracking2020[temp_tracking_query][['x', 'y', 'time', 'nflId', 'team', 'displayName']]\n        .fillna(0.)\n        .sort_values(['team', 'time'])\n    )\n\n    fig = px.scatter(\n        temp_tracking_df,\n        x='x',\n        y='y',\n        animation_frame='time',\n        color='team',\n        animation_group=\"nflId\",\n        hover_name=\"displayName\"\n    )\n    fig.update_traces(marker=dict(size=12,line=dict(width=2,color='DarkSlateGrey')),\n                      selector=dict(mode='markers'))\n    fig.update_layout(\n        template=\"plotly_white\",\n        autosize=False,\n        width=1000,\n        height=600,\n        title=f'Animation Every Players in the play {playId} of Game {gameId}',\n        images= [dict(source=plotly_logo,\n                      xref=\"paper\", yref=\"paper\",x=0, y=1, sizex=1, sizey=1,\n                      layer=\"below\", opacity=0.5)],\n        xaxis=dict(showgrid=False),\n        yaxis=dict(showgrid=False)\n    )\n    fig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = speed\n    fig.show()","6c45a69d":"gameId = 2021010300\nplayId = 40\nspeed = 60\n\nanimated_game(gameId, playId, speed)","d13ff7d2":"gameId = 2020111510\nplayId = 1987\nspeed = 60\n\nanimated_game(gameId, playId, speed)","caa18ec9":"gameId = 2020121302\nplayId = 1320\nspeed = 60\n\nanimated_game(gameId, playId, speed)","74d6a2ed":"# <center>4. Tracking Data<\/center>","e58eee24":"# <center>1. Game Data<\/center>\n### <b>Game Data:<\/b> The <i>games.csv<\/i> contains the teams playing in each game. The key variable is gameId","bef3fc73":"### Get Birth Year and Birth Month from the birthDate","e1a6b072":"#### This gives us a better representation and tells us that most of the games started at 13, 16 and 20 hours.","c4677f10":"### Make Derative Features (month, day, hour)","3b622c8b":"# <center>2. Player Data<\/center>\n### <b>Player Data:<\/b> The <i>players.csv<\/i> contains player-level information from players that pariticipated in any of the tracking data files. The key variable is nflId","23ef9fd7":"#### Very few Games were Held on 5, 12, 19, 26 and 31 day of the months.","e65af316":"## <center>Imports<\/center>","b9eb36db":"#### Most of the Players are Born between 1991 and 1997\n#### Most of the Players weight between 80 to 120 kgs\n#### Most of the players have the height between 185cm to 195cm","eaedef8c":"#### Alabama College has given the most number of Players","caa52aec":"### Animating Tracking Data using Plotly","e499430d":"### Data Visualization","18281b2d":"#### Most of the Games were Held at 13, 16:25, 20:20, 16:05 and 20:15 gameTime Eastern","5b0f3270":"#### The Games were held from Sepetember to January. There are especially many games held in December, and rarely any games held in January","d751dfd0":"#### As the Years Pass the Number of Games Held Every Year\/Season Increased","a10fe14d":"#### Highest Number of Players play at WR Positon and very few Players play at HB Position","578bbd9d":"#### It seems that players with higher weight tend to be longer and vice versa is also possible","f6645c4e":"### Convert Height to Centimeters and Weight to Kilograms","6b08045e":"# <center>3. Play Data<\/center>\n### <b>Play Data:<\/b> The <i>plays.csv<\/i> file contains play-level information from each game. The key variable are gameId and playId"}}