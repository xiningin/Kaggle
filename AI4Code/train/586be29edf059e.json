{"cell_type":{"cb57225b":"code","11d0c9e4":"code","c2e78ad3":"code","71074341":"code","9fb30f23":"code","7830baea":"code","c30b4ce4":"code","a8e61d3d":"code","38d54551":"code","9da9cebf":"code","fea9723c":"code","cebecf59":"code","843c0954":"code","b05cc918":"markdown","93894433":"markdown","19b57952":"markdown","c9261192":"markdown","a6a102d3":"markdown","ef3b26cc":"markdown","6e7f2e11":"markdown","fc655d88":"markdown","a9c3a36c":"markdown","58b03c90":"markdown","55bced6a":"markdown","00cf3d23":"markdown","ba3e168b":"markdown"},"source":{"cb57225b":"# Importing libraries and resources\nimport pandas as pd\n\nimport numpy as np\n\nimport plotly\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n#from plotly.offline import init_notebook_mode, iplot\n#init_notebook_mode(connected=True)\nplotly.tools.set_credentials_file(username = 'bscunha', api_key = 'QoHRVgmNUWhee8y9LinC')","11d0c9e4":"# Loading the Pok\u00e9mon csv file to pandas dataframe\npokemon = pd.read_csv('https:\/\/raw.githubusercontent.com\/matheusmota\/dataviz2018\/master\/resources\/datasets\/Pokemon.csv')\npokemon.rename(columns = {'Type 1': 'Type', 'Type 2': 'Subtype', 'Sp. Atk': 'SpAtk', 'Sp. Def': 'SpDef'}, inplace = True)\npokemon.head() # preview of the first lines of the dataframe","c2e78ad3":"types = (pokemon.groupby('Type')['Total'].count())\ntypes_name = types.keys().tolist()\ndata_types = go.Bar(name = 'Type', x = types_name, y = types.values) # text=types, textposition = 'auto'\n\nsubtypes = (pokemon.groupby('Subtype')['Total'].count())\nsubtypes_name = subtypes.keys().tolist()\ndata_subtypes = go.Bar(name = 'Subtype', x = subtypes_name, y = subtypes.values)\n\nlayout = go.Layout(\n    barmode = 'group', title = 'Number of Pok\u00e9mons by type',\n    xaxis = dict(title = 'Type'), yaxis = dict(title = 'Number of Pokemon')\n)\n\nfig = go.Figure(data = [data_types, data_subtypes], layout = layout)\npy.iplot(fig, filename = 'Number of Pok\u00e9mons by type')","71074341":"pokemon.Attack.describe()","9fb30f23":"# Just proving the theory that at least 103 of the 150 Pok\u00e9mons must be from 45 to 99 points of attack\npokemon[(pokemon.Attack >= 45) & (pokemon.Attack < 100)].count().tolist()[0]","7830baea":"attack_distplot = ff.create_distplot([pokemon.Attack], ['Attack'], bin_size = 5)\nattack_distplot['layout'].update(title = 'Attack Distplot')\npy.iplot(attack_distplot, filename = 'Attack Distplot')","c30b4ce4":"# Finding the strongest and the weakest Pok\u00e9mons, based on 'Total' attribute\n# Colors took from <http:\/\/pokepalettes.com\/>\nsort_by_total = pokemon.sort_values(by = 'Total', ascending = False)\nsort_by_total.head(1).append(sort_by_total.tail(1))","a8e61d3d":"Mewtwo = pokemon[pokemon.Name == 'Mewtwo']\nWeedle = pokemon[pokemon.Name == 'Weedle']\nattributes = ['HP','Attack', 'Defense', 'Speed', 'Sp. Atk', 'Sp. Def']\n\ndata = [\n    go.Scatterpolar(\n        name = 'Mewtwo',\n        r = [Mewtwo.HP, Mewtwo.Attack, Mewtwo.Defense, Mewtwo.Speed, Mewtwo.SpAtk, Mewtwo.SpDef],\n        theta = attributes, fill = 'toself', marker = dict(color = '#837b9c')\n    ),\n    go.Scatterpolar(\n        name = 'Weedle',\n        r = [Weedle.HP, Weedle.Attack, Weedle.Defense, Weedle.Speed, Weedle.SpAtk, Weedle.SpDef],\n        theta = attributes, fill = 'toself', marker = dict(color = '#cd7310')\n    )\n]\n\nlayout = go.Layout(\n    polar = dict(radialaxis = dict(visible = True, range = [0, 160])),\n    showlegend = True, title = 'Weedle vs Mewtwo Stats Comparison'\n)\n\nfig = go.Figure(data = data, layout = layout)\n\nfig.layout.images = [\n    dict(source = 'https:\/\/raw.githubusercontent.com\/PokeAPI\/sprites\/master\/sprites\/pokemon\/150.png',\n    xref = 'paper', yref = 'paper', x = 0.95, y = 0.3, sizex = 0.4, sizey = 0.4, xanchor = 'center', yanchor = 'bottom'),\n\n    dict(source='https:\/\/raw.githubusercontent.com\/PokeAPI\/sprites\/master\/sprites\/pokemon\/13.png',\n    xref = 'paper', yref = 'paper', x = 0.05, y = 0.3, sizex = 0.4, sizey = 0.4, xanchor = 'center', yanchor = 'bottom')\n]\n\npy.iplot(fig, filename = 'Weedle vs Mewtwo Stats Comparison')","38d54551":"pokemon.corr()","9da9cebf":"pokemon.corr().abs().where(np.triu(np.ones(pokemon.corr().shape), k=1).astype(np.bool)).stack().nlargest(2)","fea9723c":"data = go.Scatter(\n    x = pokemon.SpDef, y = pokemon.Total,\n    mode = 'markers', text = pokemon.Name,\n    marker = dict(size = 10, color = pokemon.SpAtk, showscale = True)\n)\n\nlayout = go.Layout(\n    title = 'Scatter plot of Total by the Sp. Def, colored on Sp. Atk',\n    xaxis = dict(title = 'Sp. Def'), yaxis = dict(title = 'Total'),\n    showlegend = False\n)\n\ncorrelation_stats = go.Figure(data = [data], layout = layout)\n\npy.iplot(correlation_stats)","cebecf59":"hp = go.Box(y = pokemon.HP, name = 'HP')\nattack = go.Box(y = pokemon.Attack, name = 'Attack')\ndefense = go.Box(y = pokemon.Defense, name = 'Defense')\nsp_atk = go.Box(y = pokemon.SpAtk, name = 'Sp. Atk')\nsp_def = go.Box(y = pokemon.SpDef, name = 'Sp. Def')\nspeed = go.Box(y = pokemon.Speed, name = 'Speed')\n\nlayout = go.Layout(\n    title = 'Boxplots of all characteristics',\n    xaxis = dict(title = 'Characteristic'), yaxis = dict(title = 'Value')\n)\n\nfig = go.Figure(data = [hp, attack, defense, sp_atk, sp_def, speed], layout = layout)\n\npy.iplot(fig, filename = 'characteristics_boxplot')","843c0954":"data = []\nfor i in range(5, 11):\n    trace = {\n        'type': 'violin',\n        'x': max(pokemon.iloc[:,i]),\n        'y': pokemon.iloc[:,i],\n        'name': list(pokemon.columns)[i],\n        'box': {'visible': True},\n        'meanline': {'visible': True}\n    }\n    data.append(trace)\n        \nfig = {\n    'data': data,\n    'layout' : {\n        'title': 'Violin plot of all stats',\n        'yaxis': {'zeroline': False}\n    }\n}\n\npy.iplot(fig, filename = 'violin', validate = False)","b05cc918":"The following scatter graphic shows the correlation of the 3 most correlated numeric variables of the Pok\u00e9mon dataframe, where the x -axis represents the 'Sp. Def' points, the y-axis represents the 'Total' points and the color is given by the 'Sp. Atk' points.","93894433":"---\n## BOX PLOT - another way to visualize distribution\nThe box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum <http:\/\/www.physics.csbsju.edu\/stats\/box2.html>.  \nThe values of a distribution are clustered around some central value. The interquartile range (IQR) tells how spread out the median the values of a distribution are; it can also be used to tell when some of the other values are \"too far\" from the central value. These \"too far away\" points are called **outliers**, because they _lie outside_ the range in which we expect them <https:\/\/www.purplemath.com\/modules\/boxwhisk3.htm>.  \nThe IQR is the length of the box in the plot (from first to third quartiles, wich represents 50% of the data). An outlier is any value that lies more than one and a half times the length of the box from either end of the box (below fisrt quartile - 1.5 times the IQR and above third quartile + 1.5 times the IQR).  \nThe following box plots show the distribution of all numeric attributes of the Pok\u00e9mon dataframe and its respectives outliers:","19b57952":"---\n## BAR CHART - representing the number of Pok\u00e9mons by type and subtype\nEach Pok\u00e9mon has a main type (Type 1) and can have a secondary type (Type 2), where both of them determine weakness\/resistance to attacks of other Pok\u00e9mons.  \nThe following graphic represents the number of Pok\u00e9mons by each type\/subtype.  \nIt is possible to see that **water** is the predominant type and **poison\/flying** are the predominant subtypes of Pok\u00e9mon.","c9261192":"---\n<center><h1>The Pok\u00e9mon dataset<\/h1><\/center>\n\n---","a6a102d3":"The **HP** outliers are:\n* Chansey - 250;\n* Snorlax - 160 and\n* Wigglytuff - 140.","ef3b26cc":"---\n## VIOLIN PLOT - visualizing distribution and statistical information of all numeric attributes\nA violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.  \nThis can be an effective and attractive way to show multiple distributions of data at once, but keep in mind that the estimation procedure is influenced by the sample size, and violins for relatively small samples might look misleadingly smooth <https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html>.  \nThe following violin plots show the distribution of all numeric attributes of the Pok\u00e9mon dataframe and its respectives outliers:","6e7f2e11":"# Especializa\u00e7\u00e3o em Ci\u00eancia de Dados - Turma 2018.1 - Facens\n## Aula 3 | Exerc\u00edcio 1\n\n* **Data de entrega:** 28\/out\/2018 11:59 AM\n* **Professor:**  Matheus Mota\n* **Aluno:**  Bruno Cunha\n* **RA:** 130029","fc655d88":"The **Defense** outliers are:\n* Cloyster - 180 and\n* Onix - 160.","a9c3a36c":"---\n## RADAR CHART - comparing the stats of the strongest and the weakest Pok\u00e9mons\nRadar Charts are a way of comparing multiple quantitative variables and are also useful for seeing which variables are scoring high or low within a dataset, making them ideal for displaying performance <https:\/\/datavizcatalogue.com\/methods\/radar_chart.html>.  \nThe following radar graphic compares the quantitave characteristics of the weekest and the strongest Pok\u00e9mons, based on 'Total' attribute.","58b03c90":"# Quest\u00e3o \u00fanica - Plotly Python\n\nUtilizando um ou mais [datasets da disciplina](https:\/\/github.com\/matheusmota\/dataviz2018\/tree\/master\/resources\/datasets), usando o [Plotly Python](https:\/\/plot.ly\/python\/), construa:\n\n* Um gr\u00e1fico de linha\n* **Um gr\u00e1fico de barras**\n* **Um histograma**\n* **Um gr\u00e1fico radar**\n* **Um gr\u00e1fico de caixa**\n* **Um gr\u00e1fico de violino**\n\nDeixe claro qual o dataset escolhido e as vari\u00e1veis.\n\n","55bced6a":"## About the Pok\u00e9mon dataset:\n\n`#` - pokedex entry number of the Pok\u00e9mon  \n`Name` - Pok\u00e9mon's name  \n`Type 1` - each Pok\u00e9mon has a type that determines weakness\/resistance to attacks of other Pok\u00e9mons  \n`Type 2` - some Pok\u00e9mon are dual type. This is the secondary one  \n`Total` - sum of all stats that come after this  \n`HP` - Hit Points, defines how much damage a Pok\u00e9mon can withstand before fainting  \n`Attack` - the base modifier for normal attacks  \n`Defense` - the base damage resistance against normal attacks  \n`Sp. Atk` - the base modifier for special attacks  \n`Sp. Def` - the base damage resistance against special attacks  \n`Speed` - determines which Pok\u00e9mon attacks first each round  \n`Stage` - level of evolution of each Pok\u00e9mon  \n`Legendary` - boolean that identifies if the Pok\u00e9mon is legendary  \n___","00cf3d23":"---\n## SCATTER PLOT - analysing correlation between the most correlated attributes\nScatter plots are used when you want to show the relationship between two variables and are sometimes called correlation plots because they show how two variables are correlated <https:\/\/chartio.com\/learn\/dashboards-and-charts\/what-is-a-scatter-plot\/>.  \nThe corr() method returns a matrix that represents the correlation, from -1 (100% inversely proportional) to 1 (100% directly proportional), of all numeric variables of the given dataframe. In this case, the principal diagonal has the corretlations between the numeric variables and themselves, that is always 1.  \nUsing Pandas and NumPy libraries it is possbile to list the most correlated variables, as shown below:","ba3e168b":"---\n ## HISTOGRAM - distribution of Pok\u00e9mons by the Attack attribute\n A histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin <https:\/\/seaborn.pydata.org\/tutorial\/distributions.html>.  \nThe following distplot represents the distribution of the attribute 'Attack', with a bin size of 5.  \nUsing the describe method over the 'Attack' field it is possible to see that the mean value is 72 and the standard deviation is 27, what implies that at least 103 pok\u00e9mons (68,27% of 150 pok\u00e9mons) must have from 45 to 99 points of attack, according to the Empirical Rule <http:\/\/www.oxfordmathcenter.com\/drupal7\/node\/290>."}}