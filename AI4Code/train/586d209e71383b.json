{"cell_type":{"3b8476bf":"code","0b302d53":"code","53d0326e":"code","447577ef":"code","9cc16a70":"markdown"},"source":{"3b8476bf":"import torch\nfrom torch.nn import functional as F\nimport pytorch_lightning as pl\nfrom pl_examples.basic_examples.mnist_datamodule import MNISTDataModule\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2","0b302d53":"class LitClassifier(pl.LightningModule):\n    def __init__(self, hidden_dim: int = 128, learning_rate: float = 0.0001):\n        super().__init__()\n        self.save_hyperparameters()\n        self.l1 = torch.nn.Linear(28*28, self.hparams.hidden_dim)\n        self.l2 = torch.nn.Linear(self.hparams.hidden_dim, 10)\n \n    def forward(self, x):\n        x = x.view(x.size(0), -1)\n        x = torch.relu(self.l1(x))\n        x = torch.relu(self.l2(x))\n        return x\n \n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        y_hat = self(x)\n        loss = F.cross_entropy(y_hat, y)\n        return loss\n \n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        probs = self(x)\n        acc = self.accuracy(probs, y)\n        return acc\n \n    def test_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        acc = self.accuracy(logits, y)\n        return acc\n \n    def accuracy(self, logits, y):\n        acc = torch.sum(torch.eq(torch.argmax(logits, -1), y).to(torch.float32)) \/ len(y)\n        return acc\n \n    def validation_epoch_end(self, outputs) -> None:\n        self.log(\"val_acc\", torch.stack(outputs).mean(), prog_bar=True)\n \n    def test_epoch_end(self, outputs) -> None:\n        self.log(\"test_acc\", torch.stack(outputs).mean())\n \n    def configure_optimizers(self):\n        return torch.optim.Adam(self.parameters(), lr=self.hparams.learning_rate)\n","53d0326e":"if __name__ == \"__main__\":\n    dm = MNISTDataModule(batch_size=32)\n    model = LitClassifier()\n    trainer = pl.Trainer(max_epochs=100)\n    trainer.fit(model, datamodule=dm)\n    trainer.test(model, datamodule=dm)","447577ef":"model","9cc16a70":"# MNIST Pytorch Lightning Sample\nThis notebook referred to the following scripts.<br\/>\nhttps:\/\/github.com\/PyTorchLightning\/pytorch-lightning\/blob\/master\/pl_examples\/basic_examples\/simple_image_classifier.py"}}