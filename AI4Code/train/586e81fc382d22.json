{"cell_type":{"13cba179":"code","1b634f9f":"code","92340774":"code","775bb3bd":"code","0f1280ea":"code","ec62b4de":"code","f0616a45":"code","cb944d6f":"code","ec07a3b9":"code","ee9119d4":"code","3506d059":"code","22ae616d":"code","e5b89ce8":"code","1d2cc3b5":"code","5a0c7bcd":"code","f3778c0f":"code","d8ddbf66":"code","b5617e28":"code","0ee8a5bc":"markdown","c4ebed6f":"markdown","ca528915":"markdown","4b42e1d6":"markdown","fc544e46":"markdown","750dc03d":"markdown","218bcf66":"markdown","a2d872e6":"markdown"},"source":{"13cba179":"! pip install monk-colab","1b634f9f":"#Using mxnet-gluon backend \n\n# When installed using pip\nfrom monk.gluon_prototype import prototype\n\n\n# When installed manually (Uncomment the following)\n#import os\n#import sys\n#sys.path.append(\"monk_v1\/\");\n#sys.path.append(\"monk_v1\/monk\/\");\n#from monk.gluon_prototype import prototype","92340774":"# Download trained weights","775bb3bd":"! wget --load-cookies \/tmp\/cookies.txt \"https:\/\/docs.google.com\/uc?export=download&confirm=$(wget --save-cookies \/tmp\/cookies.txt --keep-session-cookies --no-check-certificate 'https:\/\/docs.google.com\/uc?export=download&id=14iiAm_F0Aqbn3YXE7JBI26osSukVE4Gu' -O- | sed -rn 's\/.*confirm=([0-9A-Za-z_]+).*\/\\1\\n\/p')&id=14iiAm_F0Aqbn3YXE7JBI26osSukVE4Gu\" -O cls_lego_trained.zip && rm -rf \/tmp\/cookies.txt","0f1280ea":"! unzip -qq cls_lego_trained.zip ","ec62b4de":"ls workspace\/Project-Lego-Classifier","f0616a45":"# Load project in inference mode\n\ngtf = prototype(verbose=1);\ngtf.Prototype(\"Project-Lego-Classifier\", \"Gluon-Densenet161\", eval_infer=True);\n\n#Other trained models - uncomment \n#gtf.Prototype(\"Project-Lego-Classifier\", \"Gluon-Densenet169\", eval_infer=True);\n#gtf.Prototype(\"Project-Lego-Classifier\", \"Gluon-Densenet201\", eval_infer=True);","cb944d6f":"# Infer","ec07a3b9":"img_name = \"workspace\/test\/1.png\"\npredictions = gtf.Infer(img_name=img_name);\nfrom IPython.display import Image\nImage(filename=img_name) ","ee9119d4":"img_name = \"workspace\/test\/2.png\"\npredictions = gtf.Infer(img_name=img_name);\nfrom IPython.display import Image\nImage(filename=img_name) ","3506d059":"img_name = \"workspace\/test\/3.png\"\npredictions = gtf.Infer(img_name=img_name);\nfrom IPython.display import Image\nImage(filename=img_name) ","22ae616d":"ls \/kaggle\/input\/lego-brick-images\/","e5b89ce8":"import os\n\nif os.path.isfile(\"\/kaggle\/input\/lego-brick-images\/LEGO\\ brick\\ images\\ v1\/.DS_Store\"):\n    os.system(\"rm -r \/kaggle\/input\/lego-brick-images\/LEGO\\ brick\\ images\\ v1\/.DS_Store\");","1d2cc3b5":"# Using mxnet-gluon backend \nfrom monk.gluon_prototype import prototype\n\n# For pytorch backend\n#from monk.pytorch_prototype import prototype\n\n# For Keras backend\n#from monk.keras_prototype import prototype","5a0c7bcd":"# Create Project and Experiment\n\ngtf = prototype(verbose=1);\ngtf.Prototype(\"Project-Lego-Classifier\", \"Sample-Experiment\");","f3778c0f":"gtf.Default(dataset_path=\"\/kaggle\/input\/lego-brick-images\/LEGO brick images v1\/\", \n            model_name=\"densenet161\", \n            freeze_base_network=False,\n            num_epochs=10);","d8ddbf66":"# Make updates\ngtf.update_batch_size(32);\ngtf.update_save_intermediate_models(False);\n\n# Important to eload post updates\ngtf.Reload();","b5617e28":"#Start Training\ngtf.Train();\n\n#Read the training summary generated once you run the cell and training is completed","0ee8a5bc":"## Install Monk Manually (Not recommended)\n \n### Step 1: Clone the library\n - git clone https:\/\/github.com\/Tessellate-Imaging\/monk_v1.git\n \n \n \n \n### Step 2: Install requirements \n - Linux\n     - Cuda 9.0\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu90.txt`\n     - Cuda 9.2\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu92.txt`\n     - Cuda 10.0\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu100.txt`\n     - Cuda 10.1\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu101.txt`\n     - Cuda 10.2\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cu102.txt`\n     - CPU (Non gpu system)\n         - `cd monk_v1\/installation\/Linux && pip install -r requirements_cpu.txt`\n \n \n  - Windows\n     - Cuda 9.0 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu90.txt`\n     - Cuda 9.2 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu92.txt`\n     - Cuda 10.0 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu100.txt`\n     - Cuda 10.1 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu101.txt`\n     - Cuda 10.2 (Experimental support)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cu102.txt`\n     - CPU (Non gpu system)\n         - `cd monk_v1\/installation\/Windows && pip install -r requirements_cpu.txt`\n         \n         \n  - Mac\n     - CPU (Non gpu system)\n         - `cd monk_v1\/installation\/Mac && pip install -r requirements_cpu.txt`\n         \n         \n  - Misc\n      - Colab (GPU)\n          - `cd monk_v1\/installation\/Misc && pip install -r requirements_colab.txt`\n      - Kaggle (GPU)\n          - `cd monk_v1\/installation\/Misc && pip install -r requirements_kaggle.txt`\n \n \n \n### Step 3: Add to system path (Required for every terminal or kernel run)\n - `import sys`\n - `sys.path.append(\"monk_v1\/\");`","c4ebed6f":"# Training","ca528915":"# Using trained classifier for demo","4b42e1d6":"## Using pip (Recommended)\n\n  - colab (gpu) \n      - All bakcends: `pip install -U monk-colab`\n      \n\n  - kaggle (gpu) \n      - All backends: `pip install -U monk-kaggle`\n      \n\n  - cuda 10.2\t\n      - All backends: `pip install -U monk-cuda102`\n      - Gluon bakcned: `pip install -U monk-gluon-cuda102`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda102`\n      - Keras backend: `pip install -U monk-keras-cuda102`\n      \n\n  - cuda 10.1\t\n      - All backend: `pip install -U monk-cuda101`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda101`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda101`\n\t  - Keras backend: `pip install -U monk-keras-cuda101`\n      \n\n  - cuda 10.0\t\n      - All backend: `pip install -U monk-cuda100`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda100`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda100`\n\t  - Keras backend: `pip install -U monk-keras-cuda100`\n      \n\n  - cuda 9.2\t\n      - All backend: `pip install -U monk-cuda92`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda92`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda92`\n\t  - Keras backend: `pip install -U monk-keras-cuda92`\n      \n\n  - cuda 9.0\t\n      - All backend: `pip install -U monk-cuda90`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cuda90`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cuda90`\n\t  - Keras backend: `pip install -U monk-keras-cuda90`\n      \n\n  - cpu \t\t\n      - All backend: `pip install -U monk-cpu`\n\t  - Gluon bakcned: `pip install -U monk-gluon-cpu`\n\t  - Pytorch backend: `pip install -U monk-pytorch-cpu`\n\t  - Keras backend: `pip install -U monk-keras-cpu`","fc544e46":"# Training custom classifier from scratch","750dc03d":"# Table of contents\n\n\n## Install Monk\n\n\n## Using pretrained model for classifying type of lego bricks in the images\n\n\n## Training a classifier from scratch","218bcf66":"# Install Monk","a2d872e6":"### How to change hyper parameters and models \n  - Docs - https:\/\/github.com\/Tessellate-Imaging\/monk_v1#4\n  - Examples - https:\/\/github.com\/Tessellate-Imaging\/monk_v1\/tree\/master\/study_roadmaps\/1_getting_started_roadmap"}}