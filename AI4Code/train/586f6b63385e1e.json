{"cell_type":{"d62f6bb0":"code","8794c081":"code","0551942f":"code","f53603c6":"code","aedc893b":"code","21a0152e":"code","3f789ed3":"code","2affcb1e":"code","1f147b36":"code","3a823a3d":"code","e0f20e16":"code","2846398b":"code","59a0951f":"code","3958c102":"code","1e3e8103":"code","98e616ef":"code","8244ea99":"code","cbbc38c7":"code","f2c8175c":"code","18e4aec1":"markdown","dce56d6c":"markdown","dd519b7b":"markdown","e3a8a68f":"markdown","c76d9d48":"markdown","d608d503":"markdown","c2730f36":"markdown","8c45b9f8":"markdown","5228cc20":"markdown"},"source":{"d62f6bb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8794c081":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","0551942f":"train_data = pd.read_csv(\"\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv\")","f53603c6":"train_data.head()","aedc893b":"train_data.shape","21a0152e":"train_data[\"Profession\"]=pd.factorize(train_data.Profession)[0]\ntrain_data[\"CITY\"]=pd.factorize(train_data.CITY)[0]\ntrain_data[\"STATE\"]=pd.factorize(train_data.STATE)[0]\ntrain_data[\"Married\/Single\"]=pd.factorize(train_data['Married\/Single'])[0]\ntrain_data[\"House_Ownership\"]=pd.factorize(train_data.House_Ownership)[0]\ntrain_data[\"Car_Ownership\"]=pd.factorize(train_data.Car_Ownership)[0]","3f789ed3":"xtrain=train_data.drop(\"Risk_Flag\",axis=1)\nytrain=train_data[\"Risk_Flag\"]","2affcb1e":"from sklearn.model_selection import train_test_split","1f147b36":"X_train, X_test, y_train, y_test = train_test_split(xtrain, ytrain, test_size=0.2)","3a823a3d":"from sklearn.ensemble import RandomForestClassifier\nRFClassifier= RandomForestClassifier(criterion='entropy', random_state=0)\nRFClassifier.fit(X_train,y_train)","e0f20e16":"from xgboost import XGBClassifier\nhelp(XGBClassifier)","2846398b":"my_model = XGBClassifier(n_estimators=500, use_label_encoder=False)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_test, y_test)],\n             verbose=False)","59a0951f":"y_pred_0= RFClassifier.predict(X_test)\ny_pred = my_model.predict(X_test)","3958c102":"print(my_model)\ny_pred","1e3e8103":"y_pred_0","98e616ef":"from sklearn.metrics import roc_auc_score","8244ea99":"auc = roc_auc_score(y_test, y_pred_0)\nprint(auc)","cbbc38c7":"auc = roc_auc_score(y_test, y_pred)\nprint(auc)","f2c8175c":"# Save test predictions to file\noutput = pd.DataFrame({'id': X_test.index,\n                       'risk_flag': y_pred})\noutput.to_csv('submission.csv', index=False)","18e4aec1":"# Predict on test_data set","dce56d6c":"# Convert datatype of selected fields","dd519b7b":"# Train\/Test Split","e3a8a68f":"# Import Datasets","c76d9d48":"# Drop the dependent variable from the train dataset","d608d503":"# Import Python Libraries","c2730f36":"# Check How Dataset Looks Like","8c45b9f8":"# Evaluate based on ROC_AUC ","5228cc20":"# Train your model"}}