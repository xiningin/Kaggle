{"cell_type":{"2c6e075b":"code","20483f0d":"code","c6a69322":"code","a3f7746d":"code","bf1df22e":"code","64a86bbd":"code","1dd6835b":"code","7fc88ac3":"code","c39ee798":"code","f896caa1":"code","ead335eb":"code","d3695ae0":"code","c91b46e7":"code","5fb7e555":"code","f062cb23":"code","51bb3970":"code","a50407f1":"code","1698bf62":"code","c33e1c50":"code","6f1a11f1":"code","57862c23":"code","6b7555dc":"code","565a53db":"code","dbe13d59":"code","9e7152e4":"code","48b17690":"markdown","7c3041e7":"markdown","a9a719ca":"markdown","7023fa58":"markdown","97358fca":"markdown","2f6ef04d":"markdown","c2e1c0d1":"markdown","f5158c5e":"markdown","b3da874c":"markdown","d95b0667":"markdown","b5bd29eb":"markdown"},"source":{"2c6e075b":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.set_option('display.max_columns', 10000)\n","20483f0d":"train = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ntrain = train.drop(['ID'],1)     # train\uc758 ID\ub97c Drop \uc2dc\ucf1c\uc90c\ntrain = train.reset_index(drop=True)     # train\uc758 index\ub97c \ucd08\uae30\ud654 \uc2dc\ucf1c\uc90c\nprint(train.shape)\ntrain.head()","c6a69322":"test = pd.read_csv(\"\/kaggle\/input\/test.csv\")\ntest = test.drop(['ID'],1)     # train\uc758 ID\ub97c Drop \uc2dc\ucf1c\uc90c\ntest = test.reset_index(drop=True)     # train\uc758 index\ub97c \ucd08\uae30\ud654 \uc2dc\ucf1c\uc90c\nprint(test.shape)\ntest.head()","a3f7746d":"submission = pd.read_csv(\"\/kaggle\/input\/submission.csv\")\nprint(submission.shape)\nsubmission.head()","bf1df22e":"list(train.dtypes[train.dtypes == 'object'].index)","64a86bbd":"# from sklearn.preprocessing import LabelEncoder\n# cols = ['A','B']\n\n# for c in cols:\n#     lbl = LabelEncoder() \n#     lbl.fit(list(train[c].values)) \n#     train[c] = lbl.transform(list(train[c].values))     # unique_column\uc744 \uc804\ubb34 label_encoding\ud568\n\n# print('Shape all_data: {}'.format(train.shape))\n","1dd6835b":"# from sklearn.preprocessing import LabelEncoder\n# cols = ['A','B']\n\n# for c in cols:\n#     lbl = LabelEncoder() \n#     lbl.fit(list(test[c].values)) \n#     test[c] = lbl.transform(list(test[c].values))     # unique_column\uc744 \uc804\ubb34 label_encoding\ud568\n\n# print('Shape all_data: {}'.format(test.shape))\n","7fc88ac3":"train = train.drop(['A','B'],1)\ntest = test.drop(['A','B'],1)","c39ee798":"train.head()","f896caa1":"# train['END_TM'] = pd.to_datetime(train['END_TM'], format='%Y-%m-%d %H:%M:%S')\n# train['year'] = train['END_TM'].dt.year\n# train['month'] = train['END_TM'].dt.month\n# train['day'] = train['END_TM'].dt.day\n# train['weekday'] = train['END_TM'].dt.weekday # (0:\uc6d4, 1:\ud654, 2:\uc218, 3:\ubaa9, 4:\uae08, 5:\ud1a0, 6:\uc77c)\n# # datetime\uc744 \uc815\uc0c1\uc801\uc73c\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95\n# train.head()","ead335eb":"# test['END_TM'] = pd.to_datetime(test['END_TM'], format='%Y-%m-%d %H:%M:%S')\n# test['year'] = test['END_TM'].dt.year\n# test['month'] = test['END_TM'].dt.month\n# test['day'] = test['END_TM'].dt.day\n# test['weekday'] = test['END_TM'].dt.weekday # (0:\uc6d4, 1:\ud654, 2:\uc218, 3:\ubaa9, 4:\uae08, 5:\ud1a0, 6:\uc77c)\n# # datetime\uc744 \uc815\uc0c1\uc801\uc73c\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95\n# test.head()","d3695ae0":"train = train.drop(['END_TM'],1)\ntest = test.drop(['END_TM'],1)","c91b46e7":"y = pd.DataFrame(train['Y'])\ny.head()","5fb7e555":"X = train.drop(['Y'],1)\nX.head()","f062cb23":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split (X,y, random_state=0)","51bb3970":"print(X.shape, y.shape, \"-->\", X_train.shape, y_train.shape, X_valid.shape,y_valid.shape)","a50407f1":"import lightgbm as lgb\nlgbm = lgb.LGBMRegressor (objective = 'regression', num_leaves=144,\n                         learning_rate=0.005,n_estimators=720, max_depth=13,\n                         metric='rmse', is_training_metric=True, max_bin=55,\n                         bagging_fraction=0.8, verbose=-1, bagging_freq=5, feature_fraction=0.9)","1698bf62":"lgbm.fit(X_train, y_train)","c33e1c50":"\nfrom sklearn.metrics import mean_squared_error\n\n# #=== MSE ===#\n# pred_train = lgbm.predict(X_train)\n# pred_valid = lgbm.predict(X_valid)\n# print(mean_squared_error(pred_train, y_train))\n# print(mean_squared_error(pred_valid, y_valid))\n\n#=== RMSE ===#\n\npred_train = lgbm.predict(X_train)\npred_valid = lgbm.predict(X_valid)\n\ndef rmse(predictions, targets):\n    return np.sqrt(mean_squared_error(predictions, targets))\n\nprint(rmse(pred_train, y_train))\nprint(rmse(pred_valid, y_valid))\n# \uc704\uc5d0\ub294 MSE\uc774\uba70, RMSE\ub97c \uad6c\ud560\ub54c\ub294 \ud574\ub2f9\uc73c\ub85c \uc9c4\ud589","6f1a11f1":"(pred_train - y_train['Y']).mean()","57862c23":"pd.DataFrame(pred_train)","6b7555dc":"pd.DataFrame(y_train)","565a53db":"test.head()","dbe13d59":"pred_test = lgbm.predict(test)\npred_test","9e7152e4":"submission = submission.drop(\"Y\",1)\npred_test = pd.DataFrame(pred_test)\n\nsubmission_final = pd.concat([submission,pred_test],axis=1)\n\nsubmission_final.columns = ['ID','Y']\nsubmission_final.to_csv(\"submission_fianl.csv\", index=False)\nsubmission_final.tail()","48b17690":"# Import Dataset\n- \ubd84\uc11d\uc5d0 \ud544\uc694\ud55c Dataset\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4","7c3041e7":"# Calculate MSE (Loss function)\n- X_train \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud55c \uc608\uce21\uac12 Pred_train\uacfc y_train\uac04\uc758 \ucc28\uc774 --- (1)\n- X_valid \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud55c \uc608\uce21\uac12 Pred_valid\uc640 y_valid\uac04\uc758 \ucc28\uc774 --- (2)\n- (1)\uacfc (2)\uac00 \ucc28\uc774\uac00 \ud06c\ub2e4\uba74 Overfitting\uc774\ubbc0\ub85c \ud5a5\ud6c4 \uc608\uce21\uc5d0 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc74c","a9a719ca":"# Find column having a string data\n- Model\uc740 string(\ubb38\uc790) data\ub294 \ubd84\uc11d\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n- dataset\uc5d0\uc11c string\uc744 \uac00\uc9c0\uace0 \uc788\ub294 column\uc744 \ucc3e\uc544\uc11c \uc22b\uc790\ub85c \ubc14\uafd4\uc8fc\uac70\ub098 \uc9c0\uc6cc\uc57c Model\uc774 \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","7023fa58":"# Train the model\n- Train data\ub97c \uc0ac\uc6a9\ud558\uc5ec Model\uc744 \ud559\uc2b5\uc2dc\ud0b4","97358fca":"# Import Model (LightGBM)","2f6ef04d":"# Split the dataset(3) (X, y -> X_train, y_train, X_valid, y_valid)\n- \uc55e\uc5d0\uc11c \ubd84\ub9ac\ud55c X\uc640 y\ub97c train\uacfc valid\ub85c \ubd84\ub9ac\ud574\uc90d\ub2c8\ub2e4.\n- \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ubd84\ub9ac\ud558\ub294 \uc774\uc720\ub294 \ubaa8\ub378\uc774 overfitting\uc774 \ub418\uc5c8\ub294\uc9c0 \uac80\uc99d\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.\n- \uc774\ud574\uac00 \uc5b4\ub824\uc6b8 \uc2dc \uae30\uc874\uc5d0 \ubc30\ud3ec\ud55c Machine Learning Pipeline\uc744 \ucc38\uace0\ud574\uc8fc\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4.","c2e1c0d1":"# Change data from string to numeric(using Label Encoding)\n- \uc55e\uc5d0\uc11c \ucc3e\uc544\uc900 string data\ub97c numerical data(\uc22b\uc790\ud615)\uc73c\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4.\n- \uc5ec\uae30\uc11c\ub294 Label Encoding\uc774\ub77c\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. (Label Encoding\uc740 \uc784\uc758\ub85c \uc21c\uc11c\ub300\ub85c 1\ubd80\ud130 \uc9c0\uc815\ud574\uc11c \ubc14\uafd4\uc90d\ub2c8\ub2e4.)","f5158c5e":"# Predict wafer thick (with test dataset)\n- \uc55e\uc5d0 \uac80\uc99d\uc744 \ud1b5\ud574 \ubaa8\ub378\uc774 \ud559\uc2b5\uc774 \uc798 \ub418\uc5c8\ub294\uc9c0 \ud655\uc778\uc774 \ub418\uc5c8\ub2e4\uba74 Test dataset\uc744 \uac00\uc9c0\uace0 \uc608\uce21\ud574\ubd04","b3da874c":"# Submit the result\n- test dataset\uc744 \uac00\uc9c0\uace0 \uc608\uce21\ud55c \uacb0\uacfc\ub97c submission dataset\uc5d0 import\ud558\uc5ec kaggle\uc5d0 \uc81c\ucd9c!","d95b0667":"# Split the dataset(2) (train -> X \/ y)\n- train \ub370\uc774\ud130\ub97c X\ubcc0\uc218\uc640 y\ubcc0\uc218\ub85c \ubd84\ub9ac\ud574\uc90d\ub2c8\ub2e4.\n- \ud574\ub2f9\uc740 \ubaa8\ub378\uc744 \ub3cc\ub9ac\uae30\uc804\uc5d0 \uc0ac\uc804 \uacfc\uc815\uc774\ubbc0\ub85c \ud2b9\ubcc4\ud55c \uc774\uc720\uc5c6\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4.","b5bd29eb":"# Import Library\n- \ubd84\uc11d\uc5d0 \ud544\uc694\ud55c Library\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4"}}