{"cell_type":{"79c200ee":"code","86ec9c7c":"code","4eb32719":"code","48641c03":"code","a39a84e7":"code","5fc5735c":"code","8dfd3489":"code","c5a10d96":"code","ff18249e":"code","7141d10c":"code","44f2d09e":"code","d644872a":"code","41a7029b":"code","c04f1a2f":"code","1816e7a7":"code","78abf3b4":"code","ad88eafc":"code","04393ece":"code","64c68832":"code","464351b9":"code","72b5ec87":"code","2471b51a":"code","74ce2592":"code","f4770b43":"markdown","0eac1db3":"markdown","b606121c":"markdown","18808f52":"markdown","48819bb0":"markdown","72b85267":"markdown","034739a0":"markdown","d2c46045":"markdown","467c9bfb":"markdown","b2861e3b":"markdown","f153d439":"markdown","ce09b301":"markdown","635d7253":"markdown","2d2aa2a3":"markdown","b7a11a34":"markdown","68dadb40":"markdown","7107f922":"markdown","f6120ee7":"markdown","14c41fa3":"markdown","84fc2973":"markdown"},"source":{"79c200ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86ec9c7c":"import pandas as pd","4eb32719":"student=pd.read_csv(\"..\/input\/student-grade-prediction\/student-mat.csv\")","48641c03":"student","a39a84e7":"student.school","5fc5735c":"student[\"Mjob\"]","8dfd3489":"student['Fjob'][3]","c5a10d96":"student.iloc[0]","ff18249e":"student.iloc[:,0]","7141d10c":"student.iloc[:3,0]","44f2d09e":"student.iloc[1:3,0]","d644872a":"student.iloc[[0,1,2,3,4,5,6,7,8,21,13,12],[0,2,4]]","41a7029b":"student.iloc[-5] #the 5th last row data","c04f1a2f":"student.iloc[-5:] #data of last 5 rows","1816e7a7":"student.loc[0,'school']","78abf3b4":"student.loc[:,['school','age','Mjob','Fjob']]","ad88eafc":"student.set_index(\"school\")","04393ece":"student.loc[(student.school==\"MS\") & (student.Mjob==\"other\") & (student.age>=19)]","64c68832":"student.loc[student.Mjob.isin ([\"services\",\"teacher\"])]","464351b9":"student.loc[(student.Fjob.isin([\"health\",\"at_home\"])) & (student.Mjob.isin([\"teacher\"]))]","72b5ec87":"student[\"character\"]=\"Good\"\nstudent","2471b51a":"student['personality']=student.character\nstudent","74ce2592":"df=student.loc[0:99,[\"school\",\"famsize\"]]\ndf\n\n# the other ways to do same are listed below as comments.\n\n\n\n#cols = [\"school\",\"famsize\"]\n#df = school.loc[:99, cols]\n\n\n#or\n\n#cols_idx = [0, 4] # school is at index 0 and famsize at index 4\n\n#df = reviews.iloc[:100, cols_idx]\"\"\"","f4770b43":"**Conditional selection**","0eac1db3":"**Manipulating the index**\nLabel-based selection derives its power from the labels in the index.\nThe set_index() method can be used to do the job","b606121c":"Observe, \n A column named character is added at the end of the DataFrame.","18808f52":"Reaching a specific value in pandas is super easy. Just use indexing operator once more to specify the position","48819bb0":"The : operator, means \"everything\". When combined with other selectors, however, it can be used to indicate a range of values. For example, to select the school column from just the first, second, and third row, we would do:-","72b85267":"It's also possible to pass a list  of both rows and columns we need:-","034739a0":"For selecting a column,\n**The indexing operator [] has a advantage that it can handle column names with reserved characters in them (e.g. if here we had a  \"school name\"column), student.school name wouldn't work. why?\nBecause of the space in the column name**","d2c46045":"**Label-based selection**\n\n**loc** follows this approach.\nFor example, to get the first entry in student, we would now do the following:","467c9bfb":"Negative numbers can be used in selection.\nThis will start counting forwards from the end of the values.\nSo for example here are the last five elements of the dataset. we will have option of using\ndf.tail(5) or df.iloc[-5:]","b2861e3b":"**Acessing a particular column in DataFrame:**\n1. df.columnname\n2. df[\"columnname\"]\n ","f153d439":"**iloc** is conceptually simpler than loc because it ignores the dataset's indices. When we use iloc we treat the dataset like a big matrix (a list of lists), one that we have to index into by position. \n**loc**, uses the information in the indices to do its work. Since dataset usually has meaningful indices, it's usually easier to do things using loc instead. \n\nFor example, here's one operation that's much easier using loc","ce09b301":"**Hi Kagglers**,\n> \n> Happy to see you back !\n> \n> > **For Data Analysis**, \n> > > Selecting specific values of a pandas DataFrame or Series to work on is the first step.\n> \n> > > **Data Scientists** use these basic yet effective ways of indexing and slicing DataFrame almost daily.\n> \n> If there is any point in the notebook, you need better explanation about, Please let me know in comments.\n\nHappy to help !\n","635d7253":"**Assigning data** to new column\n        1. create new column\n        2.Add values to that column\n        \nSay, \n here we wanna add character of student ","2d2aa2a3":"**Index-based selection**\nselecting data based on its numerical position in the data.\n**iloc** follows this approach.\n\nTo select the first row of data in a DataFrame, use the below way. ","b7a11a34":"Pandas comes with a few built-in conditional selectors.\n\nThe first is **isin**. \nisin is lets you select data whose value \"is in\" a list of values. \nFor example, here's how we can use it to select students whose mother works in service sector or is a teacher. ","68dadb40":"Lets start by reading a csv file. ","7107f922":"Or, to select just the second and third entries, we would do:","f6120ee7":"Both loc and iloc are row-first, column-second. To get a column with iloc, we can do the following:","14c41fa3":"Select the character column from student and assign the result to the variable personality","84fc2973":"Create a variable df containing the school and famsize columns of the first 100 records."}}