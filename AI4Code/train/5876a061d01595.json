{"cell_type":{"63de6fb3":"code","4f20275f":"code","31f40ded":"markdown","4bdada2e":"markdown","6de38f15":"markdown"},"source":{"63de6fb3":"!pip install pycbc","4f20275f":"import numpy, pylab, glob, os\nimport pycbc.types\n\n# Let's pick some files to plot\nfnames = glob.glob('\/kaggle\/input\/g2*\/train\/0\/0\/0\/*.npy')[0:10]\nfor fname in fnames:\n    \n    # load the specific 2s sample\n    dat = numpy.load(fname)\n    \n    fig, axes = pylab.subplots(1, 3, figsize=[9,2], dpi=100)\n    pylab.title(os.path.basename(fname))\n    for i in range(3):\n        # convert the data to a TimeSeries instance\n        ts = pycbc.types.TimeSeries(dat[i, :], epoch=0, delta_t=1.0\/2048) \n        \n        # whiten the data (i.e. normalize the noise power at different frequencies)\n        ts = ts.whiten(0.125, 0.125)\n        \n        # calculate the qtransform\n        time, freq, power = ts.qtransform(.002, logfsteps=100, qrange=(10, 10), frange=(20, 512))\n\n        pylab.sca(axes[i])\n        pylab.pcolormesh(time, freq, power, vmax=15, vmin=0)\n        pylab.xlim(.25, 1.75)\n        pylab.yscale('log')\n    pylab.show()","31f40ded":"# Install the PyCBC gravitational-wave analysis toolkit\n* https:\/\/github.com\/gwastro\/pycbc\n\nPyCBC is a python package developed by the community of GW astronomers to help analyze gravitational-wave data, detect signals, and even estimate the parameters of a source binary. It's meant to be accessible and welcomes contributions.","4bdada2e":"# Plot the q-transform of the data\n\nA constant q-transform (https:\/\/en.wikipedia.org\/wiki\/Constant-Q_transform) is a common method to visualize gravitational-wave data. Almost all time-frequency figures in the gravitaitonal-wave literature use this method. ","6de38f15":"Some of the signals should be pretty easy to spot by eye here! "}}