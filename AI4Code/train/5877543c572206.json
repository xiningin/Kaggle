{"cell_type":{"4c4624a0":"code","4b21f7e6":"code","1a54a0dc":"code","7d94f209":"code","c26ea3e1":"code","1545b0e5":"code","d2fffee8":"code","6fa84f31":"code","646de779":"code","6bc7262d":"code","04976e64":"code","ddf28da3":"code","91dfa64f":"code","832e4528":"code","64c18bc0":"code","06886645":"code","757d1be4":"code","769aaddc":"code","c79596d8":"markdown","921816db":"markdown","2e338198":"markdown","075740d5":"markdown","6dd380e6":"markdown","1bff0346":"markdown","8a4843e8":"markdown","b4a8b90f":"markdown","9ef9ba2e":"markdown","7ce0b448":"markdown","3e825275":"markdown","f860c67e":"markdown"},"source":{"4c4624a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b21f7e6":"data  =pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndata.head()","1a54a0dc":"data.info()\nprint('data shape is like','\\n',data.shape)\n#In the Datasets we have only 12 Features and we don't want the user [id] features \n#It is independent with stroke ","7d94f209":"data.drop(columns = 'id' ,axis = 1 ,inplace = True)\ndata.head()","c26ea3e1":"import seaborn as sn\nfrom matplotlib import pyplot as plt\nf ,ax = plt.subplots(figsize = (5 ,5))\ncorr = data.corr(method = 'pearson')\nsn.heatmap(corr ,linewidths = 0.2 ,annot = True)\nsn.pairplot(data ,diag_kind = 'kde')\n# In the data visulization avg_gulose_level and bmi have outliers","1545b0e5":"column = data.columns\nfor i in range(len(column)):\n    print('-'*25 ,'\\n' ,column[i],'\\n',data[column[i]].unique())","d2fffee8":"data = pd.get_dummies(data ,columns = ['gender' ,'ever_married' ,\n                                       'work_type' , 'Residence_type' ,\n                                        'smoking_status' ])\n\ndata.head()","6fa84f31":"print(data['stroke'].value_counts())\nsn.histplot(data.stroke)\n### This Dataset is imbalanced with class 0","646de779":"print(data.isnull().sum())\ndata.describe()","6bc7262d":"# Use the mean to fill the  missing value in bmi\ndata.bmi.fillna(value = 28.89 ,inplace = True)","04976e64":"from imblearn.over_sampling import SMOTE\nX = data.drop(columns = 'stroke')\nY = data.stroke\nsmote = SMOTE()\nx_smote ,y_smote = smote .fit_resample(X ,Y)\ny_smote.value_counts()\nsn.histplot(y_smote)","ddf28da3":"from sklearn.model_selection import train_test_split\nX_train ,X_test ,y_train ,y_test = train_test_split( x_smote ,y_smote , test_size = .3 , random_state = 41 ,shuffle = True) ","91dfa64f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix ,mean_squared_error ,accuracy_score ,plot_confusion_matrix\nfrom xgboost import XGBClassifier\nmodels_name = ['Forest' ,'Boosting' ,'Logistic']\nmodels = dict()\nmodels[0] = RandomForestClassifier()\nmodels[1] = XGBClassifier()\nmodels[2] = LogisticRegression()","832e4528":"from sklearn.pipeline import Pipeline\nrmse = []\nacc =[]\nmodel = []\nfor i in range(3):\n    pipe = Pipeline([('Scaledata' ,StandardScaler()),('models' ,models[i])])\n    model.append(pipe.fit(X_train ,y_train))\n    error = mean_squared_error(y_test ,pipe.predict(X_test))\n    r_sqr = pipe.score(X_test ,y_test)   \n    accuracy = accuracy_score(y_test ,pipe.predict(X_test))\n    rmse.append(np.sqrt(error))\n    acc.append(accuracy)\n","64c18bc0":"# Types of Model's Accuracy rate and rmse\nd = pd.DataFrame(columns = ['Models' ,'rmse' ,'Accuracy' ,'Cross_val_score'] )\nd.rmse = rmse\nd.Models = models_name\nd.Accuracy = acc\nd","06886645":"# Cross Valdating\nfrom sklearn.model_selection import cross_val_score\nCV = []\nfor i in range(3):\n    CV.append(np.mean(cross_val_score(model[i] ,X_test ,y_test ,cv = 6)))\nd.Cross_val_score = CV\nd","757d1be4":"d","769aaddc":"color = ['Accent' ,'ocean' ,'summer']\nfor i in range(3):\n    disp = plot_confusion_matrix( model[i] ,X_test ,y_test ,display_labels = ['Hva a Stroke' ,'Not Have a stroke'] ,cmap = plt.cm.ocean )\n    disp.ax_.set_title(models_name[i])\n    plt.show\n","c79596d8":"### Load the Data","921816db":"### Visualize the datasets","2e338198":"# Train the Model\n_________________________________","075740d5":"### Using the SMOTE OverSampling method to treat the class imbalances","6dd380e6":"### Now Encode  data in the Features using panda's Dummies function","1bff0346":"### Remove unwanted features","8a4843e8":"### Check the datatype","b4a8b90f":"### check the class imbalance","9ef9ba2e":"### Cross Validation ","7ce0b448":"### Treat the missing values","3e825275":"### Now split the data for training and testing","f860c67e":"### Now we want to see the unique values in each Features\n"}}