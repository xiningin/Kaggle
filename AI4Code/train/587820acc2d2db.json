{"cell_type":{"9fda5740":"code","681b1e75":"code","59a17a68":"code","4ff930a2":"code","90aa44be":"code","55881cf1":"code","5cc633ae":"code","d2367631":"code","796663bc":"code","58e10528":"code","ee349c13":"code","fb4d0349":"code","8439ddb5":"code","8799ab00":"code","443c6c61":"markdown"},"source":{"9fda5740":"#importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","681b1e75":"name = ['Samplecodenumber','ClumpThickness','UniformityofCellSize','UniformityofCellShape','MarginalAdhesion','SingleEpithelialCellSize','BareNuclei','BlandChromatin','NormalNucleoli','Mitoses','Class1']","59a17a68":"bc = pd.read_csv(\"..\/input\/breast-cancer\/breast-cancer-wisconsin.csv\",header=None, names=name)\nbc.head(8)","4ff930a2":"bc.isnull().sum()\nbc.isna().sum()","90aa44be":"bc.drop('BareNuclei',axis=1, inplace=True)","55881cf1":"X = bc.iloc[:, 1:-1].values\nY = bc.iloc[:, -1].values","5cc633ae":"print(\"Cancer data set dimensions : {}\".format(bc.shape))","d2367631":"# Phase1 Categorical Data\n#Encoding categorical data values\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder_Y = LabelEncoder()\nY = labelencoder_Y.fit_transform(Y)","796663bc":"#Phase2\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)","58e10528":"#Phase3\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","ee349c13":"#Using Logistic Regression Algorithm to the Training Set\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state = 0)\nlr.fit(X_train, Y_train)\n\n#Using KNeighborsClassifier Method of neighbors class to use Nearest Neighbor algorithm\nfrom sklearn.neighbors import KNeighborsClassifier\nkNN = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nkNN.fit(X_train, Y_train)\n\n#Using SVC method of svm class to use Support Vector Machine Algorithm\nfrom sklearn.svm import SVC\nlsvc = SVC(kernel = 'linear', random_state = 0)\nlsvc.fit(X_train, Y_train)\n\n#Using SVC method of svm class to use Kernel SVM Algorithm\nfrom sklearn.svm import SVC\nrbf = SVC(kernel = 'rbf', random_state = 0)\nrbf.fit(X_train, Y_train)\n\n#Using GaussianNB method of na\u00efve_bayes class to use Na\u00efve Bayes Algorithm\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, Y_train)\n\n#Using DecisionTreeClassifier of tree class to use Decision Tree Algorithm\n\nfrom sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\ndtc.fit(X_train, Y_train)\n\n#Using RandomForestClassifier method of ensemble class to use Random Forest Classification algorithm\n\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nrfc.fit(X_train, Y_train)","fb4d0349":"classifier =  RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, Y_train)\nY_pred = classifier.predict(X_test)","8439ddb5":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, Y_pred)\ncm","8799ab00":"#test the three models with the test data and print their accuracy scores\n\n#print('classifier: {}'.format(sc.score(X_test, y_test)))\nprint('lr: {}'.format(lr.score(X_test, Y_test)))\nprint('kNN: {}'.format(kNN.score(X_test, Y_test)))\nprint('lsvc: {}'.format(lsvc.score(X_test, Y_test)))\nprint('rdf: {}'.format(rbf.score(X_test, Y_test)))\nprint('gnbr: {}'.format(gnb.score(X_test, Y_test)))\nprint('dtc: {}'.format(dtc.score(X_test, Y_test)))\nprint('rfc: {}'.format(rfc.score(X_test, Y_test)))","443c6c61":"# 5. Use breast cancer dataset and apply Gaussian na\u00efve bayes to create a classification model for predicting whether a person suffers from cancer or not. Check the accuracy of your model"}}