{"cell_type":{"2da3af00":"code","6e5f1fda":"code","eb8146c4":"code","516f30c4":"code","27439b78":"code","97aa8a94":"code","1d781e8e":"code","002cebef":"code","2cb83b99":"code","51387bdf":"code","2600430f":"code","442679cc":"code","92e04f9b":"code","3f88c10d":"code","678a244c":"code","65e6a3dd":"code","5d93c205":"code","3bc31558":"code","a484f7ef":"code","d3200258":"code","68967a6e":"markdown","b16df605":"markdown","f300d903":"markdown","f8b0d0f9":"markdown"},"source":{"2da3af00":"import os\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras import layers, callbacks, optimizers\nimport matplotlib.pyplot as plt\nimport numpy as np","6e5f1fda":"# Define paths for train, validate, test dir\nBASE_DIR = '..\/input\/intel-image-classification'\nTRAIN_DIR = os.path.join(BASE_DIR, \"seg_train\/seg_train\")\nVALIDATE_DIR = os.path.join(BASE_DIR, 'seg_test\/seg_test')","eb8146c4":"LABEL_NAMES = sorted(np.array(os.listdir(TRAIN_DIR)))\nprint(LABEL_NAMES)","516f30c4":"# Use data augmentation for training data to prevent overfiting\nSIZE = (150, 150)\nBATCH_SIZE = 20\n\ntrain_datagen = image.ImageDataGenerator(rescale=1\/255,\n                                        rotation_range=30,\n                                        shear_range=0.1,\n                                        zoom_range=0.1,\n                                        width_shift_range=0.1,\n                                        height_shift_range=0.1,\n                                        horizontal_flip=True,\n                                        fill_mode='reflect',)\ntrain_gen = train_datagen.flow_from_directory(TRAIN_DIR,\n                                             target_size=SIZE,\n                                             class_mode='categorical',\n                                             batch_size=BATCH_SIZE)\n\nvalidate_datagen = image.ImageDataGenerator(rescale=1\/255)\nvalidate_gen = validate_datagen.flow_from_directory(VALIDATE_DIR,\n                                               target_size=SIZE,\n                                               class_mode='categorical',\n                                               batch_size=BATCH_SIZE)","27439b78":"# See if data is imbalanced\nfor label in os.listdir(TRAIN_DIR):\n    images_dir = os.path.join(TRAIN_DIR, label)\n    count = len(os.listdir(images_dir))\n\n    print(label)\n    print(f'Train: {count}')\n    print()","97aa8a94":"# Preview images from each classes\ni = 1\nfig = plt.figure(figsize=((10, 10)))\nfor cls in os.listdir(TRAIN_DIR):\n    path = os.path.join(TRAIN_DIR, cls)\n    img_path = os.listdir(path)[0]\n    img = plt.imread(os.path.join(path, img_path))\n    fig.add_subplot(2, 3, i)\n    plt.imshow(img)\n    plt.xlabel(cls)\n    plt.xticks([])\n    plt.yticks([])\n    i+=1","1d781e8e":"# Review image after augmentation\nim_batch, label_batch = train_gen.next()\nfig = plt.figure(figsize=(15, 15))\ni = 0\nrow = 5\ncol = int(np.ceil(BATCH_SIZE \/ 5))\n\nindex = 0\nfig, ax = plt.subplots(row, col, figsize=(15, 15))\nfor i in range(row):\n    for j in range(col):\n        ax[i][j].imshow(im_batch[index])\n        ax[i][j].set_title(LABEL_NAMES[np.argmax(label_batch[index])])\n        ax[i][j].set_xticks([])\n        ax[i][j].set_yticks([])\n        index += 1","002cebef":"# Load pretrained model\nconv_base = keras.applications.VGG16(include_top=False,\n                                         weights='imagenet', \n                                         input_shape=SIZE+(3,))","2cb83b99":"# Freeze the pretrained model\nconv_base.trainable = False","51387bdf":"# Add classifier layers on top of feature extractor\nmodel = keras.Sequential([\n    conv_base,\n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(len(LABEL_NAMES), activation='softmax')\n])\nmodel.summary()","2600430f":"# Configure model\nmodel.compile(optimizer='adam', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])\n\nfirst_train_path = 'trained_top_layer.h5'\ncheckpoint = callbacks.ModelCheckpoint(first_train_path,\n                                       monitor='val_loss',\n                                       mode='min',\n                                       save_best_only=True)\nCALLBACKS = [checkpoint]","442679cc":"# Train with new data\nhist = model.fit(train_gen,\n                epochs=15,\n                callbacks=CALLBACKS,\n                validation_data=validate_gen)","92e04f9b":"# Create function to visualize loss and accuracy of training and validation\ndef plot_hist():\n    loss = hist.history['loss']\n    val_loss = hist.history['val_loss']\n    acc = hist.history['accuracy']\n    val_acc = hist.history['val_accuracy']\n    epochs = range(len(loss))\n    \n    # PLot loss and accuracy for tuning\n    plt.plot(epochs, loss, 'b', label='Training Loss')\n    plt.plot(epochs, val_loss, 'r', label='Validation Loss')\n    plt.title('Training and Validation Loss')\n    plt.legend()\n    plt.show()\n    \n    plt.plot(epochs, acc, 'b', label='Training Accuracy')\n    plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\n    plt.title('Training and Validation Accuracy')\n    plt.legend()\n    plt.show()","3f88c10d":"plot_hist()","678a244c":"# Load previous model with the lowest validation loss\nmodel = keras.models.load_model(first_train_path)","65e6a3dd":"# Unfreeze all layers of base model\nfor layer in model.layers:\n    if layer.name == 'vgg16':\n        layer.trainable = True\n        \nmodel.summary()","5d93c205":"# Recompile model, apply lower learning rate\nmodel.compile(optimizer=optimizers.Adam(lr=1e-5), \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])\n\nclassifier_path = 'intel_image_classifier.h5'\ncheckpoint = callbacks.ModelCheckpoint(classifier_path,\n                                      monitor='val_loss',\n                                      mode='min',\n                                      save_best_only=True)\nCALLBACKS = [checkpoint]","3bc31558":"hist = model.fit(train_gen,\n                epochs=10,\n                callbacks=CALLBACKS,\n                validation_data=validate_gen)","a484f7ef":"plot_hist()","d3200258":"best_model = keras.models.load_model(classifier_path)\nbest_model.evaluate(validate_gen)","68967a6e":"# Transfer learning\nLoad the features extractor and freeze it. Then put it on top of our classifier layers","b16df605":"# Prepare data ","f300d903":"# Fine tuning\nUnfreeze all the base model or some of its layers","f8b0d0f9":"Reference: https:\/\/keras.io\/examples\/vision\/image_classification_efficientnet_fine_tuning\/"}}