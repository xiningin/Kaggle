{"cell_type":{"f938d8eb":"code","34f8b842":"code","66601379":"code","53b32a9d":"code","f2b7d11c":"code","e545adba":"code","1a14334b":"code","04dcba8b":"code","f26bd7ae":"code","fab387a6":"code","ffb84a07":"code","b17d6b8e":"code","bea1528e":"code","d349a9d0":"code","e9db726d":"code","4f34ec30":"code","4e1f153c":"code","56fc846d":"code","7b10feda":"code","6c4f4c59":"code","c9aa17fd":"code","f244ff99":"code","02787522":"code","48ab27af":"code","4b185129":"code","8ea142f4":"code","b61653b8":"code","03b00f8e":"code","5c3a6382":"code","31d6b5d5":"code","3fc91f7a":"code","2a5c2b17":"code","06acbe29":"code","e7c12a1b":"code","e68e9d90":"code","1f796361":"code","72081024":"code","e3d277dc":"code","3595a73b":"code","96a3a7b9":"code","e9b1098b":"code","efdf705b":"code","22ec2558":"code","32a9da35":"code","b07c244e":"code","997632a3":"code","d453a600":"code","47247b66":"code","9dcc5d45":"code","2eacec9c":"code","7566d31f":"code","1235a65c":"markdown","4fb0bc82":"markdown","73f74bcc":"markdown"},"source":{"f938d8eb":"import pandas as pd\nimport numpy as np\nimport ast\n\nimport re\nimport os","34f8b842":"ls ..\/input\/siim-covid19-resized-to-512px-jpg\/meta.csv","66601379":"FOLDER = '..\/input\/siim-covid19-detection'","53b32a9d":"# train set\ntrain_study_df = pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\ntrain_image_df = pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')","f2b7d11c":"train_study_df.head()","e545adba":"train_image_df.head()","1a14334b":"print('# studies in train set:', train_image_df.StudyInstanceUID.nunique())\nprint('# images in train set:', train_image_df.id.nunique())","04dcba8b":"# test set\ndef get_df_from_folder(phase='test'):\n    list_test_studies = os.listdir(os.path.join(FOLDER, phase))\n\n    ret_studies = []\n    ret_images = []\n\n    for study in list_test_studies:\n        series = os.path.join(FOLDER, phase, study)\n        for sr in os.listdir(series):\n            images = os.path.join(FOLDER, phase, study, sr)\n            for image in os.listdir(images):\n                ret_studies.append(study+'_study')\n                ret_images.append(image.replace('.dcm','')+'_image')\n    return pd.DataFrame({'id':ret_images, 'StudyInstanceUID':ret_studies})","f26bd7ae":"test_image_df = get_df_from_folder('test')","fab387a6":"sam_sub = pd.read_csv('..\/input\/siim-covid19-detection\/sample_submission.csv')\nsam_sub['id'].map(lambda x: x.endswith('image')).sum()","ffb84a07":"test_image_df.id.isin(sam_sub[sam_sub['id'].map(lambda x: x.endswith('image'))].id).mean()","b17d6b8e":"print('# studies in test set:', test_image_df.StudyInstanceUID.nunique())\nprint('# images in test set:', test_image_df.id.nunique())","bea1528e":"wh_df = pd.read_csv('..\/input\/siim-covid19-resized-to-512px-jpg\/meta.csv')\nwh_df.columns = ['image_id', 'height', 'width', 'split']\nwh_train = wh_df[wh_df.split=='train']\nwh_test = wh_df[wh_df.split=='test']","d349a9d0":"print('Number of unique study:', train_image_df.StudyInstanceUID.nunique())\nassert train_study_df.id.nunique() == train_image_df.StudyInstanceUID.nunique() # cf the consistent number","e9db726d":"# a study may contain multiple images\ntrain_img_cnt_study = train_image_df.StudyInstanceUID.value_counts()\nprint('#study havin more than 1 images in train set', (train_img_cnt_study > 1).sum())\nprint('Max number of images a study can have in train set', train_img_cnt_study.max())","4f34ec30":"test_img_cnt_study = test_image_df.StudyInstanceUID.value_counts()\nprint('#study havin more than 1 images in test set', (test_img_cnt_study > 1).sum())\nprint('Max number of images a study can have in test set', test_img_cnt_study.max())","4e1f153c":"# confirm that bounding boxes only takes 2 categories: opacity\/none\ntrain_image_df.label.map(lambda x: set(re.findall('[a-z]+', x))).astype(str).value_counts()","56fc846d":"4294+2040","7b10feda":"train_image_df['StudyInstanceUID'] = train_image_df.StudyInstanceUID + '_study'","6c4f4c59":"print('Counting #study for each classification label')\nprint(train_study_df.drop('id', axis=1).sum(axis=0))","c9aa17fd":"anns = []\nfor i, row in train_image_df.iterrows():\n    image_id = row['id']\n    if(pd.notna(row['boxes'])):\n        labels = ast.literal_eval(row['boxes'])\n        df = pd.DataFrame(labels)\n        df['id'] = image_id\n        anns.append(df)\n    else:\n        anns.append(pd.DataFrame())\n    \nanns = pd.concat(anns)","f244ff99":"anns['x_min'] = anns['x']\nanns['y_min'] = anns['y']\nanns['x_max'] = anns['x_min'] + anns['width']\nanns['y_max'] = anns['y_min'] + anns['height']\n\nanns['class_name'] = 'opacity'\nanns['class_id'] = 1","02787522":"anns = anns.merge(train_image_df[['id']], on='id', how='right')","48ab27af":"anns['class_id'] = anns['class_id'].fillna(0)\nanns['class_name'] = anns['class_name'].fillna('none')\n\nanns['class_id'] = anns['class_id'].astype(int)","4b185129":"anns = anns.drop(['x','y','width','height'],axis=1)","8ea142f4":"anns['image_id'] = anns['id'].map(lambda x: x.replace('_image',''))","b61653b8":"anns_wh = anns.merge(wh_train, on='image_id')","03b00f8e":"anns_wh.head()","5c3a6382":"anns_wh = anns_wh[['image_id', 'width', 'height', 'class_id', 'class_name', 'x_min', 'y_min', 'x_max', 'y_max']]","31d6b5d5":"SIZE = 512\n\nfor col in [ 'x_min', 'x_max']:\n    anns_wh[col] = anns_wh[col] \/ anns_wh['width'] * 512\n    \nfor col in ['y_min', 'y_max']:\n    anns_wh[col] = anns_wh[col] \/ anns_wh['height'] * 512\n    \n    \nanns_wh['width'] = 512\nanns_wh['height'] = 512","3fc91f7a":"print('#images having at least 1 bbox not none:', (anns_wh.groupby('image_id').class_id.sum() > 0 ).sum())","2a5c2b17":"anns_wh.to_csv('bbox_train_meta_512.csv', index=False)","06acbe29":"wh_test = wh_test[['image_id']]\nwh_test['width'] = 512\nwh_test['height'] = 512","e7c12a1b":"wh_test.to_csv('bbox_test_meta_512.csv', index=False)","e68e9d90":"import matplotlib.pyplot as plt\nimport cv2\n\ncolor_palletes = [\n    (123, 141, 245),\n    (123, 193, 239),\n    (230, 193, 239),\n    (230, 79, 239),\n    (71, 79, 239),\n    (71, 170, 90),\n    (201, 170, 38),\n    (201, 47, 46),\n    (201, 240, 219),\n    (0, 43, 255),\n    (0, 255, 255),\n    (102, 114, 41),\n    (255, 242, 235),\n    (54, 0, 0)\n]\n\n\ndef draw_boxes(img_id, meta_df, img_folder, plot_rad=False, figsize=(10,15), return_img=False):\n    df = meta_df[meta_df.image_id == img_id]\n    img = cv2.imread(img_folder + '\/' + img_id + '.jpg')\n    if(not return_img):\n        print(meta_df[meta_df.image_id==img_id][['class_name', 'x_min', 'y_min', 'x_max', 'y_max', 'width', 'height']])\n    for i, row in meta_df[meta_df.image_id == img_id].iterrows():\n        x1, y1, x2, y2, cls_id, cls_name = int(row['x_min']), int(row['y_min']), \\\n                                            int(row['x_max']), int(row['y_max']), \\\n                                            int(row['class_id']), row['class_name']\n        \n        c = color_palletes[cls_id]\n        cv2.rectangle(img, (x1, y1), (x2, y2), c, 2)\n        if(plot_rad):\n            rad_id = row['rad_id']\n            cv2.putText(img, cls_name + '-' + rad_id, (x1, y1), cv2.FONT_HERSHEY_SIMPLEX, 0.7, c, 2)\n        else:\n            cv2.putText(img, cls_name, (x1, y1), cv2.FONT_HERSHEY_SIMPLEX, 0.7, c, 2)\n    \n    if(not return_img):\n        plt.figure(figsize=figsize)\n        plt.imshow(img)\n    else:\n        return img\n    \ndef show_values_on_bars(axs, h_v=\"v\", space=0.4):\n    def _show_on_single_plot(ax):\n        if h_v == \"v\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_height())\n                ax.text(_x, _y, value, ha=\"center\") \n        elif h_v == \"h\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_width())\n                ax.text(_x, _y, value, ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)\n        ","1f796361":"im_folder = '..\/input\/siim-covid19-resized-to-512px-jpg\/train'\ndraw_boxes('ffd9b6cf2961', anns_wh, im_folder)","72081024":"import seaborn as sns\nax = sns.countplot(anns_wh[anns_wh.class_id==1].image_id.value_counts())\nplt.xlabel('k')\nplt.ylabel('Number of images having k bboxes')\nplt.title('How many bboxes in 1 images (only consider postive image)')\nshow_values_on_bars(ax)\nplt.show()","e3d277dc":"study_lookup = train_image_df.set_index('id')['StudyInstanceUID'].to_dict()","3595a73b":"anns_wh_study = anns_wh.copy()\nanns_wh_study['StudyInstanceUID'] = anns_wh_study['image_id'].map(lambda x: study_lookup[x+'_image'])\nanns_wh_study = anns_wh_study.merge(train_study_df.rename({'id':'StudyInstanceUID'}, axis=1), on='StudyInstanceUID')","96a3a7b9":"anns_wh_study[anns_wh_study['Negative for Pneumonia']==1]","e9b1098b":"anns_wh_study[anns_wh_study.class_id==1]['Negative for Pneumonia'].max()","efdf705b":"CLF_COLS = ['Negative for Pneumonia', 'Typical Appearance', 'Indeterminate Appearance', 'Atypical Appearance']","22ec2558":"anns_wh_study.head()","32a9da35":"print('Number of images (clf label = x | the image does not have opacity bbox(es)):')\nprint(anns_wh_study[anns_wh_study.class_id==0].drop_duplicates('image_id')[CLF_COLS].sum().rename('x'))","b07c244e":"print('Number of images (clf label = x | the image has opacity bbox(es)):')\nprint(anns_wh_study[anns_wh_study.class_id==1].drop_duplicates('image_id')[CLF_COLS].sum().rename('x'))","997632a3":"print('Number of images (the image has\/does not have opacity bbox(es)) | clf label = Negative for Pneumonia:')\nprint(anns_wh_study[anns_wh_study['Negative for Pneumonia']==1].drop_duplicates('image_id').class_id.value_counts().sort_index())","d453a600":"print('Number of images (the image has\/does not have opacity bbox(es)) | clf label = Typical Appearance:')\nprint(anns_wh_study[anns_wh_study['Typical Appearance']==1].drop_duplicates('image_id').class_id.value_counts().sort_index())","47247b66":"print('Number of images (the image has\/does not have opacity bbox(es)) | clf label = Indeterminate Appearance:')\nprint(anns_wh_study[anns_wh_study['Indeterminate Appearance']==1].drop_duplicates('image_id').class_id.value_counts().sort_index())","9dcc5d45":"print('Number of images (the image has\/does not have opacity bbox(es)) | clf label = Atypical Appearance:')\nprint(anns_wh_study[anns_wh_study['Atypical Appearance']==1].drop_duplicates('image_id').class_id.value_counts().sort_index())","2eacec9c":"train_image_df","7566d31f":"# Counting number of images having bbox opacity in each study\nprint('How many images with opacity bboxes on train set for each study? Maximum number is:')\ntrain_image_df.groupby('StudyInstanceUID').apply(lambda df: df.boxes.notnull().sum()).max()","1235a65c":"# 1. Basic info","4fb0bc82":"# 2. Generate OD annotations","73f74bcc":"# 3. The relation ship between classification label and object detection label"}}