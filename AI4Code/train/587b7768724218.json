{"cell_type":{"46af12cf":"code","69a14ce8":"code","3b477dce":"code","3da98843":"code","0bc64a34":"code","87c07426":"code","6e0f55b4":"code","b543076b":"code","c42bfc34":"code","b55adb9e":"code","1f607692":"code","9210b187":"code","1bb1963b":"code","52b21e4b":"code","0ed9c2d2":"code","bf1aa65a":"code","2e24db97":"code","6c6e7d8b":"code","6f69bc18":"markdown","087a543f":"markdown","5f1da305":"markdown","a2e8c335":"markdown","d859c470":"markdown","25370997":"markdown"},"source":{"46af12cf":"import numpy as np\nfrom numba import jit, njit\nimport os\nfrom tqdm import tqdm\nimport pandas as pd\n\nimport janestreet","69a14ce8":"train = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv', nrows=100)\ntrain = train.query('date > 85').reset_index(drop = True) \ntrain = train[train['weight'] != 0]\nfeatures_mean = []\nfeatures = [c for c in train.columns if 'feature' in c]\n\nfor i in features:\n    x = train[i].mean()  \n    features_mean.append(x)\n    train[i] = train[i].fillna(x)\n    \ntrain['action'] = ((train['resp'].values) > 0).astype(int)\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\nX_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T","3b477dce":"th = 0.503\nf = np.median\nf_mean = np.mean(train[features[1:]].values,axis=0)\n\n\nenv = janestreet.make_env()\n\n\nfor (test_df, pred_df) in tqdm(env.iter_test()):\n    \n    if test_df['weight'].item() > 0:\n        \n        x_tt = test_df.loc[:, features].values\n        \n        if np.isnan(x_tt[:, 1:].sum()):\n            x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n        \n        pred = np.array([0.50012])\n        \n        \n        pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n        break\n    else:\n        pred_df.action = 0\n        \n    env.predict(pred_df)","3da98843":"################ SLOW ################\nslow = %timeit -o test_df['weight'].item() > 0","0bc64a34":"################ FASTER ################\nfast = %timeit -o test_df['weight'].values[0] > 0","87c07426":"print(\"Accelerated by {:.1f} %\".format((1-fast.average\/slow.average)*100))","6e0f55b4":"################ SLOW ################\nslow = %timeit -o test_df.loc[:, features].values","b543076b":"################ FASTER ################\n# First you need the numerical index of your features. This has to be done just one time. \n# Notice!! The order in test_df is not the same as in train.\n\ntest_df_columns = ['weight'] + [f'feature_{i}' for i in range(130)] + ['date']\nfeatures = [c for c in train.columns if 'feature' in c]\nindex_features = [n for n,col in enumerate(test_df_columns) if col in features]","c42bfc34":"fast = %timeit -o test_df.values[0][index_features].reshape(1,-1)","b55adb9e":"print(\"Accelerated by {:.1f} %\".format((1-fast.average\/slow.average)*100))","1f607692":"################ SLOW ################\nslow = %timeit -o np.where(pred >= th, 1, 0).astype(int)","9210b187":"################ BETTER ################\n%timeit (pred >= th).astype(int)","1bb1963b":"################ FASTER ################\nfast = %timeit -o int(pred >= th)","52b21e4b":"print(\"Accelerated by {:.1f} %\".format((1-fast.average\/slow.average)*100))","0ed9c2d2":"################ SLOW ################\nslow = %timeit -o pred_df.action = 0","bf1aa65a":"################ BETTER ################\n%timeit pred_df[\"action\"] = 0","2e24db97":"################ FASTER ################\nfast = %timeit -o pred_df[\"action\"].values[0] = 0","6c6e7d8b":"print(\"Accelerated by {:.1f} %\".format((1-fast.average\/slow.average)*100))","6f69bc18":"After some \"Notebook Timeouts\" I decided to accelerate the prediction loop. The image below shows some common lines which I see a lot in the most notebooks. In the most cases this kind of loop is fast enough but not if you want to use more than one NN model.\n\nIn this notebook I want to show, how to improve the first two and the last marked part. The Fillna part was already discussed in [this](https:\/\/www.kaggle.com\/gogo827jz\/optimise-speed-of-filling-nan-function) great notebook.","087a543f":"# Action\n## 1.1 Get Action","5f1da305":"# Get x_tt values","a2e8c335":"# Weight not 0","d859c470":"## 1.2 Declare Action","25370997":"![image.png](attachment:image.png)"}}