{"cell_type":{"bc84a3a3":"code","89dac981":"code","1eb81fe5":"code","655ddf6e":"code","08237991":"code","12781f25":"code","b3f1e942":"code","2372573d":"code","de12c3c7":"code","e2a1e0b9":"code","1404981c":"markdown","f948c112":"markdown","16706152":"markdown","9706bf9a":"markdown","41086e3d":"markdown","bda824bc":"markdown","5289eef5":"markdown","730796ea":"markdown","8660eecf":"markdown","ceb5c6ce":"markdown","87202842":"markdown","c97fb823":"markdown"},"source":{"bc84a3a3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n%matplotlib inline\nsns.set_style('white')","89dac981":"df = pd.read_csv('..\/input\/rolling-stones-top-500-songs-of-all-time\/rollingstone.csv')\ndf.drop('Unnamed: 0',axis=1,inplace=True)","1eb81fe5":"top_10_artists = df['Artist'].value_counts().head(10)\nplt.barh(top_10_artists.index, top_10_artists)\nplt.show()","655ddf6e":"df['Ranking'] = np.arange(499,-1, -1)\na = df['Popularity'].value_counts()","08237991":"fig, (ax1, ax2) = plt.subplots(1,2, figsize=(11,5))\n\nfig.suptitle('COMPARING QUALITY AND POPULARITY', fontdict={'fontsize':24})\n\nax1.scatter(df['Ranking'], df['Popularity'])\nax1.set_title('Popularity vs. ranking')\nax1.set_xlabel('Popularity')\nax1.set_ylabel('Rank')\nax2.hist(df['Popularity'])\nax2.set_title('Popularity Distribution')\nplt.show()","12781f25":"df.sort_values(by='Popularity', axis =0, ascending=False).head(10).iloc[:, np.r_[:2 ,6]]","b3f1e942":"df.loc[:, ['Artist', 'Title', 'Popularity']].tail(10)","2372573d":"# create a dataframe with just the features so we can iterate over it\nfeatures = df.copy().iloc[:, np.r_[7:18,-3:-1]]\n\n# convert duration column from milliseconds to seconds\nfeatures['duration_sec'] = features['duration_ms'] \/ 1000 \/ 60 \nfeatures['duration_sec'] = round(features['duration_sec'], 2)\nfeatures2 = features.drop('duration_ms', axis=1)\n\n# setup subplots\nrows = 4\ncols = 4\nfig, ax = plt.subplots(rows, cols, figsize=(20,15)) #  \ntitles = features2.columns.values\nfig.suptitle('DISTRIBUTION OF AUDIO FEATURES', fontweight= 'bold')\n# counter to choose which feature to plot\ntitle_no = 0 \n\n# given that we have odd size let's deactivate plots that go over array size\nwhile title_no < titles.size:\n        for row in range(rows):\n            for col in range(cols):\n                if title_no >= titles.size:\n                    ax[row,col].set_visible(False)\n                    sns.distplot(features2[titles[0]])\n                else:\n                    sns.distplot(features2[titles[title_no]], kde=False, ax=ax[row,col])\n                    sns.despine()\n                    title_no +=1","de12c3c7":"rows = 4\ncols = 4\nfig, ax = plt.subplots(rows, cols, figsize=(20,15)) #  \ntitles = features2.columns.values\nfig.suptitle('VIOLINPLOT DISTRIBUTION OF AUDIO FEATURES', fontweight= 'bold')\n# counter to choose which feature to plot\ntitle_no = 0 \n\n# given that we have odd size let's deactivate plots that go over array size\nwhile title_no < titles.size:\n        for row in range(rows):\n            for col in range(cols):\n                if title_no >= titles.size:\n                    ax[row,col].set_visible(False)\n                    sns.distplot(features2[titles[0]])\n                else:\n                    sns.violinplot(features2[titles[title_no]], ax=ax[row,col])\n                    sns.despine()\n                    title_no +=1","e2a1e0b9":"data = pd.concat([features2, df['Ranking']], axis=1)\nsns.heatmap(data.corr(), cmap='coolwarm')\nplt.show()","1404981c":"Let's also check how these features correlate with with themslves and with ranking.","f948c112":"# How are the audio features distributed?","16706152":"A few quick takeaways:\n* **danceability** seems to be very evenly distributed;\n* **C** is the prevalent key;\n* **major** is by far the prevalent **mode** and **4\/4** dominates **time signatures**;\n* **duration** is mostly comprised between **2 and 5 minutes**;\n* there is some tendency towards 'happy' (**valence**) and 'energetic' (**liveliness**);\n* both **speechiness** and **acousticness** receive a penalty.","9706bf9a":"These results are not intuitive (at least to me). I would have expected, say, the Rolling Stones' *Satisfaction* to be way more popular than the Eurythmics *Sweet dreams*. It might be worth looking into how the `popularity` score is calculated before drawing any conclusions.","41086e3d":"Let's explore the distribution of the audio features (I'll plot both a standard histogram and a violinplot).","bda824bc":"While most songs seem to be fairly popular (as evidenced by the skewness of the distribution) - ranking is not correlated with popularity. Let's inspect the most popular 10 songs as well as the 10 highest ranked's popularity scores.","5289eef5":"Let's plot the top 10 artists by number of mentions, to begin.","730796ea":"# Is popularity correlated to quality?","8660eecf":"# Setup","ceb5c6ce":"One might wonder whether the 'best' songs - i.e. the ones ranked higher by *Rolling Stone* are also the most popular; viceversa, it is legitimate to ask whether a song's (relatively) low ranking makes it less popular. Let's check by adding a `Ranking` column to our dataframe and correlating it to the `popularity` column. \n","87202842":"(Perhaps surprisingly) no one feature seems to be a significant predictor of rank (with acousticness and instrumentalness receiving a modest penalty, as noted). ","c97fb823":"# Who are the most voted artists?"}}