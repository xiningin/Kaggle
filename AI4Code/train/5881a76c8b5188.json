{"cell_type":{"eaef002c":"code","aace2a9e":"code","c844655b":"code","c152a495":"code","bbc2ef43":"code","e0ee8252":"code","95bcd0f8":"code","e4c9abc2":"code","343a4236":"code","f57d5397":"code","0cdaa471":"code","8cd0b731":"code","f27166a2":"code","22a37900":"code","d8458662":"code","54ffe452":"code","b9792fb6":"code","6ff03f30":"markdown","19492f05":"markdown","2293f290":"markdown","6ff45d34":"markdown","ccd76aa2":"markdown","21315891":"markdown","ad2b1e5c":"markdown","fb6728eb":"markdown"},"source":{"eaef002c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","aace2a9e":"import numpy as np\nimport pandas as pd\nimport gc\nfrom  pathlib import Path\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","c844655b":"path = Path('\/kaggle\/input\/ashrae-energy-prediction\/')\nbuilding_file = path \/ 'building_metadata.csv'\nweather_file = path \/ 'weather_train.csv'\ntrain_file = path \/ 'train.csv'\ntest_file = path \/ 'test.csv'\nweathertest_file = path \/ 'weather_test.csv'\n#sample_file = path \/ 'sample_submission.csv'","c152a495":"%%time\nmydateparser = lambda x: pd.datetime.strptime(x, \"%Y-%m-%d %H:%M:%S\")\nwt = pd.read_csv(weather_file, parse_dates=['timestamp'], date_parser=mydateparser )\ntestwt = pd.read_csv(weathertest_file, parse_dates=['timestamp'], date_parser=mydateparser)","bbc2ef43":"allwt = pd.concat([wt, testwt], axis=0)","e0ee8252":"allwt","95bcd0f8":"from fastai.tabular.transform import add_datepart\nadd_datepart(allwt, field_name='timestamp', prefix=\"ts\", drop=False, time=True)","e4c9abc2":"allwt.tsYear","343a4236":"allwt[\"nYear\"] = allwt.tsYear  - 2016\nallwt[\"nMonth\"] = allwt.nYear * 12 + allwt.tsMonth","f57d5397":"wts = allwt.groupby(['site_id', 'nMonth'])['air_temperature'].agg(['min', 'max', 'mean']).reset_index()","0cdaa471":"f, axes = plt.subplots(4, 4,figsize=(25,30))\nplt.subplots_adjust(hspace=0.5)\nfor i in range(0,16):\n    wts[ (wts.site_id == i) & (wts.nMonth.isin(range(1,13)))].plot('nMonth', ['min', 'mean', 'max'], \n                                       title=f'site:{i}', \n                                       figure = f, ax=axes[ (i\/\/ 4), (i % 4) ], \n                                       grid=True)","8cd0b731":"f, axes = plt.subplots(4, 4,figsize=(25,30) , sharey = True)\nplt.subplots_adjust(hspace=0.5)\nfor i in range(0,16):\n    wts[ (wts.site_id == i) & (wts.nMonth.isin(range(1,13)))].plot('nMonth', ['min', 'mean', 'max'], title=f'site:{i}', figure = f, ax=axes[ (i\/\/4), (i % 4) ])","f27166a2":"f, axes = plt.subplots(4, 4,figsize=(25,30))\nplt.subplots_adjust(hspace=0.5)\nfor i in range(0,16):\n    wts[ (wts.site_id == i) & (wts.nMonth.isin(range(1,37)))].plot('nMonth', ['min', 'mean', 'max'], \n                                       title=f'site:{i}', \n                                       figure = f, ax=axes[ (i \/\/ 4), (i % 4) ], \n                                       grid=True)","22a37900":"f, axes = plt.subplots(4, 4,figsize=(25,30), sharey=True)\nplt.subplots_adjust(hspace=0.5)\nfor i in range(0,16):\n    wts[ (wts.site_id == i) & (wts.nMonth.isin(range(1,37)))].plot('nMonth', ['min', 'mean', 'max'], \n                                                           title=f'site:{i}', \n                                                           figure = f, ax=axes[ (i\/\/4), (i % 4) ], )","d8458662":"heatdf = wts [ (wts.site_id == 0) & (wts.nMonth.isin(range(1,13))) ][['mean']].reset_index()\nheatdf.index = heatdf.index + 1\nheatdf = heatdf.T\nheatdf.drop('index', axis=0, inplace=True)\nfor i in range(1,16):\n    temp = wts [ (wts.site_id == i) & (wts.nMonth.isin(range(1,13))) ][['mean']].reset_index()\n    temp.index = temp.index + 1\n    temp = temp.T\n    heatdf = pd.concat( [heatdf, temp.drop('index', axis=0)], axis=0 )","54ffe452":"heatdf","b9792fb6":"fig = plt.figure( figsize=(25,15))\nax = fig.add_subplot(111)\nax.set_xlabel('Month in 2016')\nax.set_title(label='HeatMap for Average Temperature in 2016 for 16 station ')\n\nax.set_xticks(np.arange(13))\nax.set_yticks(np.arange(16))\nax.set_xticklabels( [ i for i in range(1,13)] )\nax.set_yticklabels( [ f'site_{i}' for i in range(0,16) ])\n\n# Loop over data dimensions and create text annotations.\nfor i in range(12):\n    for j in range(16):\n        text = ax.text(i, j, \n                       heatdf.iloc[j, i].round(2),\n                       ha=\"center\", va=\"center\", color=\"black\")\n\nim = ax.imshow( heatdf , interpolation='nearest' , cmap='coolwarm')\nplt.show()","6ff03f30":"### Group hourly data to monthly and getting Min, Max and Mean.","19492f05":"Lets see the weather data we have in train and test set","2293f290":"# Heatmap","6ff45d34":"## 36 months","ccd76aa2":"## **Any interesting insight you found? **\n## Can we figure out the station is from which city ? Please comment","21315891":"### Plot on the same y-axis scale","ad2b1e5c":"# Please **upvote** if you found this kernel is helpful.","fb6728eb":"## Peek on weather data in year 2016"}}