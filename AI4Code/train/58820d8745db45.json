{"cell_type":{"cf5299e0":"code","8e8b2a91":"code","b838fec4":"code","b8c2d4e3":"code","077dfdc8":"code","0a28553c":"code","06e489d5":"code","3aab740f":"code","6cd9a108":"code","3a6d4aa9":"code","1368ef77":"code","4bf46a5e":"code","8a7454a3":"code","eb206f8f":"code","ffbaf10e":"code","bc3eb5ef":"code","51465a19":"code","a117339e":"code","a3ce5725":"code","026a1927":"code","273109c9":"code","c32ab3db":"code","512a6c70":"code","e9d78b3a":"code","f681bb8d":"code","3a78aabd":"code","49784507":"code","4601db41":"code","4d4e829f":"markdown","9b821b9f":"markdown","565277e0":"markdown","1707a59e":"markdown"},"source":{"cf5299e0":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","8e8b2a91":"insurance_data = pd.read_csv('..\/input\/health-insurance-dataset\/Health_insurance.csv')\ninsurance_data.head()","b838fec4":"import warnings\nwarnings.filterwarnings('ignore')","b8c2d4e3":"sns.scatterplot(x='age',y='charges',data=insurance_data);","077dfdc8":"sns.scatterplot(x='age',y='charges',hue='smoker',data=insurance_data);","0a28553c":"sns.relplot(kind='scatter',x='bmi',y='charges',hue='smoker',data=insurance_data);","06e489d5":"sns.regplot(x='age',y='charges',data=insurance_data);","3aab740f":"sns.distplot(x=insurance_data.age,bins=10, hist_kws=dict(edgecolor=\"k\", linewidth=2));","6cd9a108":"sns.lmplot(x=\"bmi\", y=\"charges\", hue=\"smoker\", data=insurance_data);","3a6d4aa9":"sns.kdeplot(x=insurance_data.age,y=insurance_data.bmi);","1368ef77":"sns.lineplot(x=\"region\", y=\"charges\", data=insurance_data);","4bf46a5e":"sns.lineplot(x=\"region\", y=\"charges\",hue='sex',style='smoker', data=insurance_data,markers=True);","8a7454a3":"sns.lineplot(x=\"region\", y=\"charges\",hue='smoker',style='smoker', data=insurance_data,markers=True);","eb206f8f":"insurance_data.groupby('region').agg({'charges':'sum'}).plot.pie(\n    subplots=True,autopct='%.1f%%',wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'},textprops={'size': 'x-large'})\nlegend = plt.legend('')\nlegend.remove()\nplt.show()","ffbaf10e":"sns.barplot(x='sex',y=\"charges\",hue='smoker',ci=False, data=insurance_data);","bc3eb5ef":"sns.barplot(x='children',y=\"age\",hue='sex',ci=False, data=insurance_data);","51465a19":"sns.boxplot(x=\"sex\", y=\"age\",hue='smoker', data=insurance_data);","a117339e":"sns.boxplot(x=\"sex\", y=\"bmi\",hue='smoker', data=insurance_data);","a3ce5725":"sns.boxplot(x='region',y=\"charges\",hue='sex', data=insurance_data);","026a1927":"sns.boxplot(x='region',y=\"charges\",hue='smoker', data=insurance_data);","273109c9":"sns.swarmplot(x='region',y=\"charges\",hue='smoker', data=insurance_data);","c32ab3db":"sns.barplot(x='region',y=\"charges\",hue='smoker', data=insurance_data,ci=False);\nsns.swarmplot(x='region',y=\"charges\",hue='smoker', data=insurance_data);","512a6c70":"sns.countplot(x='region', data=insurance_data);","e9d78b3a":"sns.violinplot(x='children',y=\"age\",hue='smoker',ci=False, data=insurance_data);","f681bb8d":"sns.pairplot(data=insurance_data,hue='smoker');","3a78aabd":"from sklearn.preprocessing import LabelEncoder\n\nfor col_name in insurance_data.select_dtypes('object'):\n  insurance_data[col_name] = LabelEncoder().fit_transform(insurance_data[col_name])\n\ninsurance_data.head()","49784507":"insurance_data.corr()","4601db41":"plt.figure(figsize = (15,8))\nsns.heatmap(insurance_data.corr(),annot=True);","4d4e829f":"Smokers are paying more charges as compared to non-smokers","9b821b9f":"# **Numeric Data Plotting**","565277e0":"# **Categorical Data plotting**","1707a59e":"# **Seaborn**\n\n\n![](https:\/\/drive.google.com\/uc?export=view&id=1W9mbS5ADsvAxC6rU9VbbDUh5Af-A131Y)\n\n\nFrom the documents\n\n\nSeaborn is a library for making attractive and informative statistical graphics in Python. It is built on top of matplotlib and tightly integrated with the Python Data Science stack, including support for numpy and pandas data structures and statistical routines from scipy and statsmodels.\n\nSome of the features that seaborn offers are\n\n* Several built-in themes that improve on the default matplotlib aesthetics\n* Tools for choosing color palettes to make beautiful plots that reveal patterns in your data\n* Functions for visualizing univariate and bivariate distributions or for comparing them between subsets of data\n* Tools that fit and visualize linear regression models for different kinds of independent and dependent variables\n* Functions that visualize matrices of data and use clustering algorithms to discover structure in those matrices\n* A function to plot statistical timeseries data with flexible estimation and representation of uncertainty around the estimate\n* High-level abstractions for structuring grids of plots that let you easily build complex visualizations\n\nSeaborn aims to make visualization a central part of exploring and understanding data. The plotting functions operate on dataframes and arrays containing a whole dataset and internally perform the necessary aggregation and statistical model-fitting to produce informative plots.\n\nSeaborn should be thought of as a complement to matplotlib, not a replacement for it. When using seaborn, it is likely that you will often invoke matplotlib functions directly to draw simpler plots already available through the pyplot namespace. Further, while the seaborn functions aim to make plots that are reasonably \u201cproduction ready\u201d (including extracting semantic information from Pandas objects to add informative labels), full customization of the figures will require a sophisticated understanding of matplotlib objects.\n"}}