{"cell_type":{"c2208297":"code","da64acce":"code","909e0311":"code","f0d43782":"code","f658728f":"code","1fa6e85d":"code","54c754b1":"code","2d5a7ecd":"code","8951c966":"code","f58961fd":"code","40244b86":"code","638b13ec":"code","5ff2e2ff":"code","13f9b296":"code","7a2178e0":"code","db802b82":"code","480a0e9e":"code","60d2919f":"code","f3502006":"code","e5712311":"code","43588fb3":"code","1adf4b55":"code","23707c55":"code","644b949a":"code","773f2ed4":"code","506f9476":"code","e3683fdc":"markdown","00926cf2":"markdown","ec5a9f59":"markdown","4085a7ec":"markdown","9a014916":"markdown","270ea801":"markdown","fb25cdd7":"markdown","4084e0bc":"markdown","32440a09":"markdown","019148cb":"markdown","1f2ae7ed":"markdown","f19edaa6":"markdown","791866c7":"markdown","9c24edd2":"markdown","62b9834e":"markdown","688edef8":"markdown","89dabd92":"markdown","8a65029e":"markdown","f4a8a211":"markdown","03ade060":"markdown"},"source":{"c2208297":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# What do we say to python warnings? NOT TODAY\nimport warnings\nwarnings.filterwarnings(\"ignore\")","da64acce":"# I like the style \"ggplot\"\nplt.style.use('ggplot')","909e0311":"pal = \"Set2\"","f0d43782":"dtypes={\"user_id\":\"str\",\n\"yob\":\"int\",\n\"sex\":\"category\",\n\"height\":\"int\",\n\"weight\":\"float\",\n\"shoulder_circumference\":\"int\",\n\"years_here\":\"int\",\n\"satisfaction_weather\":\"category\",\n\"sweating\":\"category\",\n\"outdoor_hr_weekday\":\"int\",\n\"outdoor_hr_weekend\":\"int\",\n\"hsps\":\"float\",\n\"swls\":\"int\",\n\"extraversion\":\"float\",\n\"agreeableness\":\"float\",\n\"conscientiousness\":\"float\",\n\"emotional_stability\":\"float\",\n\"openness_to_experiences\":\"float\"}","f658728f":"metadata = pd.read_csv(\"\/kaggle\/input\/longitudinal-personal-thermal-comfort-preferences\/enth_surveys_renamed.csv\", dtype=dtypes)","1fa6e85d":"metadata.info()","54c754b1":"metadata.head()","2d5a7ecd":"metadata.info()","8951c966":"# Let's include the data type \"category\" (you can pass a list with more than one type or just a string with the data type name)\nmd_cat = metadata.select_dtypes(include=[\"category\", \"object\"])\n# check it out\nmd_cat.head()","f58961fd":"cols = list(md_cat.columns)\ncols","40244b86":"# Drop \"user_id\"\ncols.pop(0)","638b13ec":"# Drop \"sex\" (once \"user_id\" is dropped, \"sex\" is the frist element)\ncols.pop(0)","5ff2e2ff":"# Define your figure and axes\nfig, axes = plt.subplots(2, 2, figsize=(10,8))\n# Flatten your axes\naxes = axes.flatten()\n\n# here is the loop, we are using the index (i) to select the axis\n# and the column (col) to plot the histogram\nfor i, col in enumerate(cols):\n    ax = axes[i]\n    plot1 = sns.countplot(data=md_cat, y=col, hue=\"sex\", ax=ax, palette=pal)\n\n# This will avoid the subplots to overlap\nplt.tight_layout()","13f9b296":"md_cont = metadata.select_dtypes(include=[\"float\", \"int\"])\n# Let's add our columns of interest\nmd_cont[\"sex\"] = metadata.sex\nmd_cont[\"enjoy_ourdoor\"] = metadata.enjoy_ourdoor\nmd_cont.head()","7a2178e0":"sns.stripplot(x=\"sex\", y=\"height\", data=md_cont)","db802b82":"sns.stripplot(x=\"sex\", y=\"height\", hue=\"enjoy_ourdoor\", data=md_cont)","480a0e9e":"cols = list(md_cont.columns)\ncols","60d2919f":"cols.pop(-1)","f3502006":"cols.pop(-1)","e5712311":"len(cols)","43588fb3":"# Define your figure and axes\nfig, axes = plt.subplots(7, 5, figsize=(20,16))\n# Flatten your axes\naxes = axes.flatten()\n\n# here is the loop, we are using the index (i) to select the axis\n# and the column (col) to plot the histogram\nfor i, col in enumerate(cols):\n    ax = axes[i]\n    plot1 = sns.stripplot(data=md_cont, y=col, x=\"sex\", hue=\"enjoy_ourdoor\", ax=ax, palette=pal)\n\n# Remove last axis\naxes[-1].axis('off')\n\n# This will avoid the subplots to overlap\nplt.tight_layout()","1adf4b55":"# First, create the FacetGrid, selecting your grouping columns\n# for column (\"col\") and rows (\"row\")\n# You can choose only one of them\ng = sns.FacetGrid(md_cont, col=\"sex\", row=\"enjoy_ourdoor\")\n\n# Then, you \"map\" that grid\n# here you specify the type of plot you want\n# and the feature to plot\ng.map(sns.boxplot,\"height\", palette=pal)","23707c55":"md_corr = md_cont[[\"yob\",\"height\",\"weight\",\"shoulder_circumference\"]]","644b949a":"correlation_matrix = md_corr.corr(method=\"pearson\")","773f2ed4":"correlation_matrix","506f9476":"sns.heatmap(correlation_matrix, cmap=\"coolwarm\", vmin=-1, vmax=1)","e3683fdc":"Here you specify the variable for you `x` and `y` axis. We can also add a `hue` parameter: ","00926cf2":"## Customization\nThis is an optional step but is nice to know it in case you want to customize your visualizations. Matplotlib offer a los of style sheets you can choose from, you can check them all in [this galery](https:\/\/matplotlib.org\/stable\/gallery\/style_sheets\/style_sheets_reference.html). You can use the default one or select the one you want with this line of code:","ec5a9f59":"Now we are going to use a new kind of plot named [stripplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.html). This plot is a mix between a countplot and a scatterplot: it will plot a point for each row present in each value. This plot works great with our data because, despite being continuos data types, most of our features are discrete limited scales (check the [GitHub Repository](https:\/\/github.com\/buds-lab\/longitudinal-personal-thermal-comfort) to learn more about each column and the scores used there).\n\nLet's plot a single stripplot:","4085a7ec":"## Load data\nAs you probably have seen in the data set description, there is also a [GitHub a repository](https:\/\/github.com\/buds-lab\/longitudinal-personal-thermal-comfort). There you can find a table with the data type of each column.\n\nHere we are creating a dictionary with some of the columns and the correct data type. In general when reading a file, category features are not recognized as categorical data (if you are lucky you'll get an integer). But you can pass a parameter when reading the file with those data types. This step is not mandatory, you can always convert the data types after reading the file (if is needed), but doing it now will make the plotting easier. ","9a014916":"And let's check the total number of features we are going to plot to choose our grid size:","270ea801":"And remember to use [FacetGrid](https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html) when you want to plot a feature splitting it by one or two categorical features. Like this:","fb25cdd7":"# Continuous columns\nNow is time for the continuous columns. We can select them like before. We will also keep some categorical columns to use as `hue` features.","4084e0bc":"# Correlation\nAnother important exploratory technique, specially if you are about to train a machine learning model, is to check the correlation between your continuos features. First step is to create the correlation matrix: this is just a matrix with the correlation value in each feature-feature intersection. Several correlation coefficients exist to quantify it and the methods are available in more than one library. As we are using pandas, we will use the [correlation method](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.corr.html) that comes with it:","32440a09":"# *Enth* metadata exploratory data analysis\nIn this notebook we are going to explore the *Enth* metadata. Basic python knowledge is needed and being familiar with pandas and data visualization will help a lot. I suggest to check these courses first:\n\n- [Python](https:\/\/www.kaggle.com\/learn\/python)\n- [Pandas](https:\/\/www.kaggle.com\/learn\/pandas)\n- [Data visualization](https:\/\/www.kaggle.com\/learn\/data-visualization)\n\nWe are going to use [Seaborn](https:\/\/seaborn.pydata.org\/), a library based on [Matplotlib](https:\/\/matplotlib.org\/). Seaborn plot nicer graphics with a simpler sintax handling the same elements defined in matplotlib. You will find in this notebook links to both documentations. \n\n# Content\n\n- [Customization](#Customization)\n- [Load data](#Load-data)\n- [Categorical columns](#Categorical-columns)\n- [Continuous columns](#Continuous-columns)\n- [Correlation](#Correlation)","019148cb":"# Summary\nIn this notebook we covered the following subjects:\n\n- How to choose a [matplotlib stylesheet](https:\/\/matplotlib.org\/stable\/gallery\/style_sheets\/style_sheets_reference.html)\n- How to choose a [matplotlib palette](https:\/\/matplotlib.org\/stable\/tutorials\/colors\/colormaps.html)\n- [Matplotlib subplots](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.subplots.html)\n- [Seaborn countplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html)\n- [Seaborn striplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.html)\n- [Seaborn FacetGrid](https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html)\n- [Seaborn heatmaps](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html)","1f2ae7ed":"As you see, the logic for all the plots is pretty similar. Let's select the columns we want for our subplots:","f19edaa6":"Another useful tool when customizing is the color palette. [These all are the available palettes](https:\/\/matplotlib.org\/stable\/tutorials\/colors\/colormaps.html). You can also create your own color palette but that part is not covered in this notebook (but is easy to google ;) ).\n\nHere I will allocate the palette I like in a variable; this is not mandatory, you can explicitly write the name of the palette in each plot (but I always write the name wrong, so is easier for me to have a variable with an easy name).","791866c7":"We are going to drop `sex` and `enjoy_ourdoor`; do you remember how to drop the last element of a list? if you don't know the total lenght of the list you can use -1 to select the last item.","9c24edd2":"## Import libraries","62b9834e":"And as we learned in the previous notebook, we can create a subplot easily using a simple loop. Check the comments in each line:","688edef8":"Adn this is the matrix obtained:","89dabd92":"# Categorical columns\nLet's start with the categorical features. [The pandas method `select_dtypes`](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.select_dtypes.html) is designed to filter the columns of the desired type(s).","8a65029e":"There are [a lot of plots you can choose for visualizing categorical data](https:\/\/seaborn.pydata.org\/tutorial\/categorical.html) but in this section we'll focus on [countplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html#seaborn.countplot). This plot will count the rows that belong to each category and will return a barplot. We covered a detailed explanation on this in the [previous notebook](https:\/\/www.kaggle.com\/ponybiam\/01-enth-time-series-eda), pleas check it out.\n\nThese are the columns we have, we are not going to use `user_id` and sex will be our `hue` feature. We have to drop them.","f4a8a211":"We have a lot of columns with information about each user, some of them are categorical features and other continuous. Take some time to learn about the data (you can find it in the [data set description](https:\/\/www.kaggle.com\/claytonmiller\/longitudinal-personal-thermal-comfort-preferences) and in the [Github repository](https:\/\/github.com\/buds-lab\/longitudinal-personal-thermal-comfort)).","03ade060":"To visualize correlation, [heatmaps](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html) are usually the most suitable plots. This plot will show a grid with different color intensity based on the value of our correlation coefficient. As we the value moves between -1 and 1 we can specify those values to make the color scale fit those limits:"}}