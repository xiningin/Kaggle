{"cell_type":{"72619b9d":"code","6d7815d5":"code","20ed423a":"code","a87307a1":"code","b0532a0d":"code","4e38d1e2":"code","c0ffb481":"code","0a52a165":"code","18f7e3ac":"code","dd2e74fb":"code","6fe8cd58":"code","7fc7d099":"code","bd343ff0":"code","a72ef11f":"code","da6eb2fb":"code","63581c1f":"code","a5d1ea96":"code","a5fc0551":"markdown","e4a66b24":"markdown","5769c87a":"markdown","6defc3f1":"markdown","b753034e":"markdown","a01066e2":"markdown","14bb494b":"markdown","bae33238":"markdown"},"source":{"72619b9d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","6d7815d5":"train_df=pd.read_csv('\/kaggle\/input\/iba-ml1-mid-project\/train.csv')\ntrain_df.head()","20ed423a":"train_df.isnull().sum()","a87307a1":"from sklearn.impute import SimpleImputer\n\n#Filling Age\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['age']])\ntrain_df[['age']]=imputer.fit_transform(train_df[['age']])\n\n#Filling number_dependent_family_members\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['number_dependent_family_members']])\ntrain_df[['number_dependent_family_members']]=imputer.fit_transform(train_df[['number_dependent_family_members']])\n\n#Filling monthly_income\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['monthly_income']])\ntrain_df[['monthly_income']]=imputer.fit_transform(train_df[['monthly_income']])\n\n#Filling number_of_credit_lines\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['number_of_credit_lines']])\ntrain_df[['number_of_credit_lines']]=imputer.fit_transform(train_df[['number_of_credit_lines']])\n\n#Filling real_estate_loans\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['real_estate_loans']])\ntrain_df[['real_estate_loans']]=imputer.fit_transform(train_df[['real_estate_loans']])\n\n#Filling ratio_debt_payment_to_income\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['ratio_debt_payment_to_income']])\ntrain_df[['ratio_debt_payment_to_income']]=imputer.fit_transform(train_df[['ratio_debt_payment_to_income']])\n\n#Filling credit_line_utilization\n#But we need to convert datatype of column to float, cuz datas are numeric but they are in string datatype\ntrain_df['credit_line_utilization'] = pd.to_numeric(train_df['credit_line_utilization'],errors='coerce')\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['credit_line_utilization']])\ntrain_df[['credit_line_utilization']]=imputer.fit_transform(train_df[['credit_line_utilization']])\n\n#Filling number_of_previous_late_payments_up_to_59_days\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['number_of_previous_late_payments_up_to_59_days']])\ntrain_df[['number_of_previous_late_payments_up_to_59_days']]=imputer.fit_transform(train_df[['number_of_previous_late_payments_up_to_59_days']])\n\n#Filling number_of_previous_late_payments_up_to_89_days\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['number_of_previous_late_payments_up_to_89_days']])\ntrain_df[['number_of_previous_late_payments_up_to_89_days']]=imputer.fit_transform(train_df[['number_of_previous_late_payments_up_to_89_days']])\n\n#Filling number_of_previous_late_payments_90_days_or_more\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(train_df[['number_of_previous_late_payments_90_days_or_more']])\ntrain_df[['number_of_previous_late_payments_90_days_or_more']]=imputer.fit_transform(train_df[['number_of_previous_late_payments_90_days_or_more']])","b0532a0d":"train_df.isnull().sum()","4e38d1e2":"from sklearn.model_selection import train_test_split #for split the data\nfrom sklearn.metrics import accuracy_score  #for accuracy_score\nfrom sklearn.metrics import confusion_matrix #for confusion matrix\n\n\nall_features = train_df.drop(\"defaulted_on_loan\",axis=1)\nTargeted_feature = train_df[\"defaulted_on_loan\"]\n\nX_train,X_test,y_train,y_test = train_test_split(all_features,Targeted_feature,test_size=0.3,random_state=42)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape\n","c0ffb481":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import cross_val_predict #prediction\n\nmodel = Pipeline(steps=[\n    ('imputer',SimpleImputer(strategy='median')),\n    ('scaler',StandardScaler()),\n\n    ('classifier',RandomForestClassifier())\n])\nmodel.fit(X_train,y_train)\nprediction_rm=model.predict_proba(X_test)[:,1]\nroc_auc_score(y_test,prediction_rm)\nprint('The accuracy of the Random Forest Classifier is',round(roc_auc_score(y_test,prediction_rm)*100,2),\"%\")","0a52a165":"model.get_params().keys()","18f7e3ac":"parameters={\n    'classifier__n_estimators':[700],\n    'classifier__bootstrap':[True],\n    'classifier__max_depth':range(1,7),\n    'classifier__max_features':['sqrt'],\n    'classifier__min_samples_split':[5],\n    'classifier__min_samples_leaf':[4]\n}","dd2e74fb":"from sklearn.model_selection import GridSearchCV\ngridsearch=GridSearchCV(model,parameters,cv=4)","6fe8cd58":"gridsearch.fit(X_train,y_train)","7fc7d099":"test_df=pd.read_csv('\/kaggle\/input\/iba-ml1-mid-project\/test.csv')\ntest_df.head()","bd343ff0":"#Filling Age\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['age']])\ntest_df[['age']]=imputer.fit_transform(test_df[['age']])\n\n#Filling number_dependent_family_members\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['number_dependent_family_members']])\ntest_df[['number_dependent_family_members']]=imputer.fit_transform(test_df[['number_dependent_family_members']])\n\n#Filling monthly_income\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['monthly_income']])\ntest_df[['monthly_income']]=imputer.fit_transform(test_df[['monthly_income']])\n\n#Filling number_of_credit_lines\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['number_of_credit_lines']])\ntest_df[['number_of_credit_lines']]=imputer.fit_transform(test_df[['number_of_credit_lines']])\n\n#Filling real_estate_loans\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['real_estate_loans']])\ntest_df[['real_estate_loans']]=imputer.fit_transform(test_df[['real_estate_loans']])\n\n#Filling ratio_debt_payment_to_income\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['ratio_debt_payment_to_income']])\ntest_df[['ratio_debt_payment_to_income']]=imputer.fit_transform(test_df[['ratio_debt_payment_to_income']])\n\n#Filling credit_line_utilization\n#But we need to convert datatype of column to float, cuz datas are numeric but they are in string datatype\ntest_df['credit_line_utilization'] = pd.to_numeric(test_df['credit_line_utilization'],errors='coerce')\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['credit_line_utilization']])\ntest_df[['credit_line_utilization']]=imputer.fit_transform(test_df[['credit_line_utilization']])\n\n#Filling number_of_previous_late_payments_up_to_59_days\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['number_of_previous_late_payments_up_to_59_days']])\ntest_df[['number_of_previous_late_payments_up_to_59_days']]=imputer.fit_transform(test_df[['number_of_previous_late_payments_up_to_59_days']])\n\n#Filling number_of_previous_late_payments_up_to_89_days\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['number_of_previous_late_payments_up_to_89_days']])\ntest_df[['number_of_previous_late_payments_up_to_89_days']]=imputer.fit_transform(test_df[['number_of_previous_late_payments_up_to_89_days']])\n\n#Filling number_of_previous_late_payments_90_days_or_more\nimputer=SimpleImputer(strategy='median')\nimputer.fit_transform(test_df[['number_of_previous_late_payments_90_days_or_more']])\ntest_df[['number_of_previous_late_payments_90_days_or_more']]=imputer.fit_transform(test_df[['number_of_previous_late_payments_90_days_or_more']])","a72ef11f":"test_df.isnull().sum()","da6eb2fb":"from sklearn.model_selection import GridSearchCV\n\npredictions=gridsearch.predict_proba(test_df)[:,1]\npredictions","63581c1f":"ids=test_df['Id']\noutput=pd.DataFrame({'Id':ids,'predicted':predictions})\noutput","a5d1ea96":"output.to_csv('submission.csv',index=False)","a5fc0551":"And for getting desirable result I created ids variable to assign all IDs and our predictions is goingg to predictions variable","e4a66b24":"Yeeey! Finally we get somehow good result, it is good news. But we can modify & strengthen our model. Yes it is model which I was searching","5769c87a":"Now let's import our gridsearch model to our code, and strengthen our Random Forest model with the help of it, but before  we need to define parameters and best values of them to  get good prediction result. Let's check!","6defc3f1":"Now time to work on our test data frame, to check our model. Firstly we import data then imputing all missing values, and check our new model gridsearch","b753034e":"# **Filling missing Values with Imputation method**","a01066e2":"We see there are lots of missing values in all dataframes, except ID and defaulted_on_loan, so firstly need to fill all missing values before modeling:","14bb494b":"I will insert our train data for  modelling","bae33238":"After imputation there is no missing value in our train data"}}