{"cell_type":{"172e9d10":"code","afc824db":"code","6905224f":"code","e7a0f74c":"code","b6c102e8":"code","0ceca319":"code","dae65589":"code","f67337b0":"code","e53dfa5b":"code","988f948b":"code","8d62c2ea":"code","5fe4b647":"code","7334367e":"code","c53e062d":"code","73008cb8":"markdown","80896b69":"markdown","efa2eb1d":"markdown","de888a82":"markdown","35e0e0a8":"markdown","dc252018":"markdown","c48d27f9":"markdown","12d7f4e0":"markdown","9d4ad283":"markdown","82dc69eb":"markdown","0f4bb132":"markdown","91aba83e":"markdown","95811f92":"markdown","9e95a7e4":"markdown","39dee2fb":"markdown","181a8e3c":"markdown","286352eb":"markdown","258b7bb1":"markdown"},"source":{"172e9d10":"#Import libraries\nimport numpy as np, pandas as pd, scipy.stats as sts, csv, matplotlib.pyplot as plt\n\n#Read dataset\ndf = pd.read_csv(\"..\/input\/new_client_data.csv\", header=0)","afc824db":"#The Product Managers want to know about free and premium users, not unlimited or any others.\nmemberships_to_compare = ['free','premium']\n\n#As well only for users that donwloaded the new_client\nctype_to_compare = ['new_client']\n\n#Only to plot up to the lifespan=30\nlifespans_to_plot = 30","6905224f":"#Get rid of any users that are not in the users we want to study\nq1_df = df.loc[(df['client'].isin(ctype_to_compare)) & df['membership_type'].isin(memberships_to_compare)]\n#Keeping the original dataframe to reuse it for further analysis","e7a0f74c":"#Summarise the users dataframe by counting the users per lifespan and membership\nq1_sum_df = q1_df.groupby(['lifespan','membership_type'])['user_id'].count().reset_index(level=(0,1))\n\nq1_sum_df.columns = ['lifespan','membership_type','count_of_users']","b6c102e8":"#Pivot the prior table to graph the users on the membership_type, up to lifespan=30\npv_q1_df = q1_sum_df.pivot(index='lifespan', columns='membership_type', values='count_of_users').head(lifespans_to_plot+1)\n#Build the stacked bar plot\npv_q1_df.plot.bar(stacked=True, figsize=(12,8))\n#Show the plot\nplt.show()","0ceca319":"#Sort descending the summarised dataframe, then group by membership type and perform a cummulative sum. \ncum_df = q1_sum_df.sort_index(0, ascending=False)\ncum_df['cum_sum'] = cum_df.groupby(['membership_type'])['count_of_users'].cumsum()\n\n#Sort in an ascending manner\ncum_df = cum_df.sort_index(0, ascending=True)","dae65589":"#Pivot the prior table to graph the users on the membership_type, up to lifespan=30\npv_q1_cum_df = cum_df.pivot(index='lifespan', columns='membership_type', values='cum_sum').fillna(value=0).head(lifespans_to_plot+1)\n#Build the stacked bar plot\npv_q1_cum_df.plot.bar(stacked=True, figsize=(12,8))\n#Show the plot\nplt.show()","f67337b0":"#Separate 2 dataframes \nfr_sum_df = q1_sum_df.loc[q1_sum_df['membership_type'].isin(['free'])]\nprem_sum_df = q1_sum_df.loc[q1_sum_df['membership_type'].isin(['premium'])]","e53dfa5b":"pv_fr_df = fr_sum_df.pivot(index='lifespan', columns='membership_type', values='count_of_users').fillna(value=0).head(lifespans_to_plot+1)\n#Build the stacked bar plot\npv_fr_df.plot.bar(stacked=True, figsize=(12,8))\n#Show the plot\nplt.show()\n\nprem_sum_df = prem_sum_df.pivot(index='lifespan', columns='membership_type', values='count_of_users').fillna(value=0).head(lifespans_to_plot+1)\n#Build the stacked bar plot\nprem_sum_df.plot.bar(stacked=True, figsize=(12,8))\n#Show the plot\nplt.show()","988f948b":"#Get the dataframe with all the data and split it into two with new_client and web_client\nls_newc_df = pd.DataFrame(columns=('count_all','count_1hub'))\nls_oldc_df = pd.DataFrame(columns=('count_all','count_1hub'))\n#,'client'\n\n#Get an auxiliar DF for users of the new client and users of the old client\nfl_newc_df = df.loc[df['client'].isin(['new_client'])]\nfl_oldc_df = df.loc[df['client'].isin(['web_client'])]\n\n#Get the series for all the proportions per lifespan for all new client users\nls_newc_df['count_all'] = fl_newc_df.groupby('lifespan')['user_id'].count()\nls_newc_df['count_1hub'] = fl_newc_df.groupby('lifespan')['joined_at_least_1_hub'].count()\n#Calculate the proportion\nls_newc_df['proportion'] = ls_newc_df['count_1hub']\/ls_newc_df['count_all']\n\n#Do the same as before for old client users\nls_oldc_df['count_all'] = fl_oldc_df.groupby('lifespan')['user_id'].count()\nls_oldc_df['count_1hub'] = fl_oldc_df.groupby('lifespan')['joined_at_least_1_hub'].count()\n#Calculate the proportion\nls_oldc_df['proportion'] = ls_oldc_df['count_1hub']\/ls_oldc_df['count_all']\n\n#Convert both DFs to series for ease of use, and because we don't need the other columns\n#Additionally the variable names are not amazing to say the least, that needs to improve\n\nnewc_ser = ls_newc_df['proportion']\nwebc_ser = ls_oldc_df['proportion']","8d62c2ea":"#Count the total number per group (web_client and new_client)\ntotal_webclient = fl_oldc_df['user_id'].count()\ntotal_newclient = fl_newc_df['user_id'].count()\n\n#We need to know the number of users in both groups \nprint('New Client sample size: ' + str(total_newclient))\nprint('Web Client sample size: ' + str(total_webclient))","5fe4b647":"nwc_mean = newc_ser.mean()\nwbc_mean = webc_ser.mean()\n\nprint('New Client mean: ' + str(nwc_mean))\nprint('Web Client mean: ' + str(wbc_mean))","7334367e":"nwc_var = newc_ser.var()\nwbc_var = webc_ser.var()\nnwc_std = newc_ser.std()\nwbc_std = webc_ser.std()\n\nprint('New Client variance: ' + str(nwc_var))\nprint('Web Client variance: ' + str(wbc_var))\nprint('New Client variance: ' + str(nwc_std))\nprint('Web Client variance: ' + str(wbc_std))","c53e062d":"#Perform the t-test with non-equal variances\ntstat = sts.ttest_ind(newc_ser, webc_ser, equal_var=False)\n\nprint(tstat)","73008cb8":"# Data Science Exercise\n\n### CONTEXT \n\nXYZ recently launched a desktop client in a gradually manner while using the web client. Players can download it and use it to access the platform.\n\nThe dataset *new_client_data.csv* is prepared to answer some questions made by the Product Managers.\nColumn *first_day* is the first day that a user played a match after the experiment start date, *latest_day* when they were last seen playing and *lifespan* the difference between the two previous dates.\n\nThe new client became available (experiment start date) to a subset of users on 2017-10-11 (11 October 2017).\n\nThe questions asked were:\n1. Create a bar plot showing the cumulative number of users who used the new client and were retained for at least 0, 1, 2,\u2026 days. Using stacked\/grouped bars (or similar) plot premium and free users separately. Only show data for up to 30 days.\n2. The product team would like to know if the new client has led to increased activity in hubs (hubs is one of the many competition types on Faceit that users can choose to play their favourite games). They therefore asked you whether you could test if the following hypothesis is true:\n    H0: The *proportion of users who used the new client and joined at least one hub is larger than the proportion of users who are using the old web client and joined at least one hub*\n    \nAdditionally to answering the questions, a feedback for the Product team will be provided. ","80896b69":"### Set-up some variables we will use later on to avoid magic numbers","efa2eb1d":"### Plot both membership_types separatedly, un-cummulatively. ","de888a82":"### Summarise the data in the user's dataframe by counting the number of users per *lifespan* and *membership_type*","35e0e0a8":"### Summarise the data by calculating the proportion of users that joined at least 1 hub versus all users per each lifespan","dc252018":"### Question 2\n\n#### Approach\n1. **Summarise** the data by calculating the proportion of users that joined at least 1 hub versus all users (#count(users_joined_al1_hub) \/ #(total_users)) per each lifespan\n2. **Describe** the groups (new_client users vs old_client users)\n3. Perform a **t-test** (type dependant on the descriptions obtained before)\n4. **Analyse** results to see if the means are truly different for both population","c48d27f9":"### Conclusion\n\nThe results are not significant at p < .10 and therefore we can not reject H0.\n\nWe can not infer that the new client has yield more users using the HUB feature. ","12d7f4e0":"### Question 1\n\n#### Approach\n1. **Filter** dataset by users who used the *new_client* and have either *free* or *premium* memberships.\n2. **Count** the number of users per *lifespan* tier, grouped by *membership_type*.\n3. **Order** in a descending fashion by *lifespan*.\n4. Perform a **cummulative sum** over the counted users per membership.\n5. **Graph** for up to *lifespan*=30.","9d4ad283":"### Import libraries and read the CSV dataset into a Pandas dataframe","82dc69eb":"### Filter from the dataframe the users that are not within the groups to study","0f4bb132":"### Side-step\n*We will explore the data at this point by pivoting the table over membership_type and see its joint distribution*","91aba83e":"The number of premium users per lifespan is really small compared with the free users.\nIf we do the cummulative number of users per lifespan the quantities might still be too different, therefore we have 2 options to improve visualisation quality. \n1. Remove lifespan=0 and plot it separatedly, because then we can check if the magnitudes can be better represented.\n2. Plot *free* and *premium* users in separated graphs (not separatedly in a stacked\/grouped bar graph, as the assignment required)\n\nWill try the second approach since the first one is entirely dependant on visualisation limitations and from expertise it is known that will not provide a considerably better plot. ","95811f92":"### Describes the groups (new_client users vs old_client users)","9e95a7e4":"### Perform t-test\nSince the sample sizes are different and the variances are different we will use Welch's t-test ","39dee2fb":"*The graphs don't have the best practices for visualisation, and some horrors like the x axis for the second graph not being continuous or in any scale, lack of titles, and it is due to limitations on my experience ploting in Python and time constrains. By no means I pretend this to be a perfect result.* ","181a8e3c":"The plot ignores some lifespans since in those there were no premium users, but it is evident how difficult is to tell magnitudes between both membership_types.\nMakes sense to plot both groups differently ","286352eb":"### Conclusion\nA good alternative to plotting this information if the stakeholders would like to know the acceptance of the new client by the players or preference patterns would be to plot the *proportion* of premium users over free users (#premium\/#free) by both old and new clients, maybe comparatively in the same graph. ","258b7bb1":"### Produce the *cummulative* plot for *free* and *premium* users by *lifespan*."}}