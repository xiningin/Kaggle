{"cell_type":{"eca64d7e":"code","e66565eb":"code","212b9fc9":"code","6ffd0d66":"code","04a7ab5b":"code","cbe69ce8":"code","69f540bc":"code","7a070633":"code","aacc3997":"code","79883b5d":"code","d7ffb420":"code","d24fb44b":"code","c354b13e":"code","b955704d":"code","33bf2876":"code","aa62ce37":"code","9a87df99":"code","ce1a3d2b":"markdown","dfd69ebe":"markdown","5277d2fc":"markdown","2e8cd740":"markdown","a4bf982f":"markdown"},"source":{"eca64d7e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\nfrom sklearn.model_selection import cross_val_score, RepeatedStratifiedKFold, ShuffleSplit\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e66565eb":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsub_lr = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","212b9fc9":"target = train['Survived']\ntrain.drop('Survived', axis = 1, inplace = True)\n\ndf = pd.concat([train, test], axis = 0, ignore_index = True)","6ffd0d66":"# categorical\nfeat_cat = [col for col in df.columns if df[col].dtypes == 'object']\nfeat_cat","04a7ab5b":"# Embarked, fillna with 'X' value\ndf['Embarked'] = df['Embarked'].fillna('X')\n\n# Ticket, fillna with 'X', split string and take first split \ndf['Ticket'] = df['Ticket'].fillna('X').map(lambda x:str(x).split()[0] if len(str(x).split()) > 1 else 'X')\n\n# Cabin, fillna with 'X' and take first letter\ndf['Cabin'] = df['Cabin'].fillna('X').map(lambda x: x[0].strip())\n\n# Name, take only surnames\ndf['Name'] = df['Name'].map(lambda x: x.split(',')[0])","cbe69ce8":"# numerical\nfeat_num = df.dtypes[df.dtypes != \"object\"]\nfeat_num","69f540bc":"# family\ndf['Family'] = df['SibSp'] + df['Parch'] + 1 \ndef f(col):\n    if col == 1:\n        val = 'Single'\n    elif col == 2:\n        val = 'Couple'\n    elif col == 3:\n        val = 'Small_family'\n    elif col in [4, 5]:\n        val = 'Mid_family'\n    elif col in [6, 7]:\n        val = 'Big_family'\n    else:\n        val = 'Super_family'\n    return val\ndf['FamilySize'] = df['Family'].apply(f)\n\n# age, fare\naux = df.groupby([\"Pclass\",\"Embarked\",\"Sex\"])[[\"Age\",\"Fare\"]].mean()\ndf[\"MultiIndex\"] = pd.MultiIndex.from_frame(df[[\"Pclass\",\"Embarked\",\"Sex\"]])\ndf.loc[df[\"Age\"].isna(),\"Age\"] = df.loc[df[\"Age\"].isna(),\"MultiIndex\"].map(aux[\"Age\"])\ndf.loc[df[\"Fare\"].isna(),\"Fare\"] = df.loc[df[\"Fare\"].isna(),\"MultiIndex\"].map(aux[\"Fare\"])\ndf.drop(columns=[\"MultiIndex\"], inplace=True)\n\ndef f(col):\n    if col < 10:\n        val = '10s'\n    elif 10 <= col < 20:\n        val = '20s'\n    elif 20 <= col < 30:\n        val = '30s'\n    elif 30 <= col < 40:\n        val = '40s'\n    elif 40 <= col < 50:\n        val = '50s'\n    elif 50 <= col < 60:\n        val = '60s'\n    elif 60 <= col < 70:\n        val = '70s'\n    elif 70 <= col < 80:\n        val = '80s'\n    elif 80 <= col < 90:\n        val = '90s'\n    else:\n        val = '100s'\n    return val\ndf['AgeSize'] = df['Age'].apply(f)\n\ndef f(col):\n    if col < 5:\n        val = 'Super_cheap'\n    elif 5 <= col < 10:\n        val = 'Very_cheap'\n    elif 10 <= col < 20:\n        val = 'Cheap'\n    elif 20 <= col < 40:\n        val = 'Moderate'\n    elif 40 <= col < 100:\n        val = 'Expensive'\n    elif 100 <= col < 200:\n        val = 'Very_expensive'\n    elif 200 <= col < 300:\n        val = 'Super_expensive'\n    else:\n        val = 'Mega_expensive'\n    return val\ndf['FareSize'] = df['Fare'].apply(f)","7a070633":"comb = list(itertools.combinations(['Pclass', 'Sex', 'Cabin', 'Embarked', 'FamilySize', 'AgeSize', 'FareSize'], 2))\ncomb","aacc3997":"for c1, c2 in comb:\n    df.loc[:, c1 + '_' + c2] = df[c1].astype(str) + '_' + df[c2].astype(str)","79883b5d":"feat_num = ['Age', 'SibSp', 'Pclass', 'Parch', 'Fare', 'Family']\nfeat_onehot = ['Cabin', 'Embarked',\n               'Pclass_Sex', 'Pclass_Cabin', 'Pclass_Embarked', 'Sex_Cabin', 'Sex_Embarked', 'Cabin_Embarked']\nfeat_label = ['Sex','FamilySize', 'AgeSize', 'FareSize'] #['Name', 'Ticket']","d7ffb420":"def label_encoder(col):\n    le = LabelEncoder()\n    return le.fit_transform(col)\n\ndf_num = df[feat_num]\ndf_onehot = pd.get_dummies(df[feat_onehot])\ndf_label = df[feat_label].apply(label_encoder)","d24fb44b":"#df_all = pd.concat([df_num, df_onehot], axis=1)\ndf_all = pd.concat([df_num, df_onehot, df_label], axis=1)\n\ndf_all.isnull().values.sum(), df_all.shape","c354b13e":"X = df_all[:train.shape[0]].values\ny = target.values\n\nX_test = df_all[train.shape[0]:].values","b955704d":"params = {'penalty': 'l2', 'C': 15.724316694262722, 'class_weight': {0: 1.1, 1: 1}}\n \nmodel = LogisticRegression(**params, solver = 'lbfgs', random_state = 1337)\n\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=2, random_state=1337)\nscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(f'Average Accuracy: {np.mean(scores)}')","33bf2876":"model.fit(X, y)\npreds = model.predict(X_test)","aa62ce37":"# Saving the result\nsub_lr['Survived'] = preds\nsub_lr.to_csv(\"submission_lr.csv\", index=False)","9a87df99":"sub_lr['Survived'].hist()","ce1a3d2b":"## Encoding","dfd69ebe":"## Load libraries","5277d2fc":"## Read data","2e8cd740":"## Feature engineering","a4bf982f":"## Logistic Regression"}}