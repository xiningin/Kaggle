{"cell_type":{"4f433b18":"code","9b66bf3f":"code","d8ecdfca":"code","d9bb34cb":"code","ef4d2878":"code","fb02e38c":"code","42f8174c":"code","725001ae":"code","8e260578":"code","76012ae7":"code","c20746a1":"code","da0afccc":"code","fe296d2e":"code","c518fdc8":"code","16afe1a0":"code","4c38c2de":"code","329f4f0b":"code","ebe70525":"code","ec7476dd":"code","c1e169a7":"code","ffb58350":"code","ddc676e8":"code","a2bca0ea":"code","bbc1a7fd":"code","dd222e79":"code","27ec4839":"code","c133fb48":"code","c3771031":"code","1f2085be":"code","8abbe10e":"code","681244dc":"code","1bd23ef5":"code","beb16464":"code","ecfd2e0b":"code","f0997247":"code","4529285e":"code","2bb3340f":"code","8a5d00d3":"code","0b09db83":"code","a6c35ca7":"code","5a1dcbfb":"markdown","7a9e44a4":"markdown","c76b2f7a":"markdown","37ba3290":"markdown","2ccc618d":"markdown","2e05c80d":"markdown","0e5b17da":"markdown","ccf6c1be":"markdown","0750b670":"markdown","017ac89b":"markdown","78dae7f5":"markdown","b7039b26":"markdown","7dec7a24":"markdown","e3dfeebd":"markdown","3642f0de":"markdown","ffff1cad":"markdown"},"source":{"4f433b18":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","9b66bf3f":"median_house_hold_in_come = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","d8ecdfca":"percentage_people_below_poverty_level.info()","d9bb34cb":"percentage_people_below_poverty_level['Geographic Area'].unique()","ef4d2878":"# (-) value to (0) value\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\n# (object) to (flot) variable\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\n# We took geographic area names and stored them in a list\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\n# We ranked the georaphic area data according to the average poverty rate.\n# We placed it in the (area_poverty_ratio) list\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\n# We created a new data using (area_list) and (area_povert_ratio) \ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\n# and sorted it from largest to smallest\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","fb02e38c":"kill.head()","42f8174c":"kill.name.value_counts()","725001ae":"# We take all data except the data with the name (TK TK), and return it to a String value\nseparate = kill.name[kill.name != 'TK TK'].str.split() \na,b = zip(*separate) \n#we throw the received names into (name_list)\nname_list = a+b\n# we combine those with the same names\nname_count = Counter(name_list)         \n# We take the 15 most popular names and put them in (most_common_names)\nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n\n# visualization\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')","8e260578":"percent_over_25_completed_highSchool.info()","76012ae7":"percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","c20746a1":"# (-) value to (0) value\npercent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True)\n# (object) to (flot) variable\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\n# We took geographic area names and stored them in a list\n# We placed it in the (area_highschool) list\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n    \n# sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")","da0afccc":"share_race_city.info()","fe296d2e":"share_race_city.head()","c518fdc8":"# (-) value to (0) value\nshare_race_city.replace(['-'],0.0,inplace = True)\n# (X) value to (0) value\nshare_race_city.replace(['(X)'],0.0,inplace = True)\n# (object) to (flot) variable\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\n# We took geographic area names and stored them in a list\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area']==i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha = 0.5,label='White' )\nsns.barplot(x=share_black,y=area_list,color='blue',alpha = 0.7,label='African American')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha = 0.6,label='Native American')\nsns.barplot(x=share_asian,y=area_list,color='yellow',alpha = 0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of State's Population According to Races \")","16afe1a0":"sorted_data.info()","4c38c2de":"sorted_data.head()","329f4f0b":"# We divide the data (area_poverty_ratio) by the highest value, we discard (sorted_data)\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max( sorted_data['area_poverty_ratio'])\n# We divide the data (area_highschool_ratio) by the highest value, we discard (sorted_data2)\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max( sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualization\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()","ebe70525":"# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind=\"kde\", height=7)\nplt.savefig('graph.png')\nplt.show()","ec7476dd":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,height=5, ratio=3, color=\"r\")","c1e169a7":"# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"area_poverty_ratio\", y=\"area_highschool_ratio\", data=data)\nplt.show()","ffb58350":"sns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=3)\nplt.show()","ddc676e8":"kill.race.head(15)","a2bca0ea":"kill.race.value_counts()","bbc1a7fd":"# we delete the empty data\nkill.race.dropna(inplace = True)\nlabels = kill.race.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n# visualization\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races',color = 'blue',fontsize = 15)","dd222e79":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","27ec4839":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","c133fb48":"# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=kill, palette=\"PRGn\")\nplt.show()","c3771031":"# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\nsns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=kill)\nplt.show()","1f2085be":"sns.pairplot(data)\nplt.show()","8abbe10e":"# Manner of death\nsns.countplot(kill.gender)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"gender\",color = 'blue',fontsize=15)","681244dc":"# kill weapon\narmed = kill.armed.value_counts()\n#print(armed)\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)","1bd23ef5":"# age of killed people\nabove25 =['above25' if i >= 25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age':above25})\nsns.countplot(x=df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of killed people',color = 'blue',fontsize=15)","beb16464":"# Race of killed people\nsns.countplot(data=kill, x='race')\nplt.title('Race of killed people',color = 'blue',fontsize=15)","ecfd2e0b":"# Most dangerous cities\ncity = kill.city.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=city[:12].index,y=city[:12].values)\nplt.xticks(rotation=45)\nplt.title('Most dangerous cities',color = 'blue',fontsize=15)","f0997247":"# most dangerous states\nstate = kill.state.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=state[:20].index,y=state[:20].values)\nplt.title('Most dangerous state',color = 'blue',fontsize=15)","4529285e":"# Having mental ilness or not for killed people\nsns.countplot(kill.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental illness')\nplt.title('Having mental illness or not',color = 'blue', fontsize = 15)","2bb3340f":"# Threat types\nsns.countplot(kill.threat_level)\nplt.xlabel('Threat Types')\nplt.title('Threat types',color = 'blue', fontsize = 15)","8a5d00d3":"# Flee types\nsns.countplot(kill.flee)\nplt.xlabel('Flee Types')\nplt.title('Flee types',color = 'blue', fontsize = 15)","0b09db83":"# Having body cameras or not for police\nsns.countplot(kill.body_camera)\nplt.xlabel('Having Body Cameras')\nplt.title('Having body cameras or not on Police',color = 'blue',fontsize = 15)","a6c35ca7":"# Kill numbers from states in kill data\nsta = kill.state.value_counts().index[:10]\nsns.barplot(x=sta,y = kill.state.value_counts().values[:10])\nplt.title('Kill Numbers from States',color = 'blue',fontsize=15)","5a1dcbfb":"## Joint Plot","7a9e44a4":"* Swarm Plot","c76b2f7a":"<a id=\"2\"><\/a> <br>\n# Poverty rate of each state\n* Bar Plot","37ba3290":"# Race rates according in kill data ,\n* Pie Chart","2ccc618d":"# Kill Properties","2e05c80d":"<a id=\"3\"><\/a> <br>\n# Most common 15 Name or Surname of killed people\n* Bar Plot","0e5b17da":"<a id=\"1\"><\/a> <br>\n# Read datas","ccf6c1be":"* Cubehelix plot","0750b670":"* Pair Plot","017ac89b":"* correlation map","78dae7f5":"<a id=\"6\"><\/a> <br>\n# High School Graduation rate vs Poverty rate of each state","b7039b26":"<a id=\"5\"><\/a> <br>\n# Percentage of state's population according to races that are black,white,native american, asian and hispanic","7dec7a24":"<a id=\"7\"><\/a> <br>\n# Kill properties","e3dfeebd":"<a id=\"4\"><\/a> <br>\n# High school graduation rate of the population that is older than 25 in states","3642f0de":"* Lmplot ","ffff1cad":"# INTRODUCTION\n\n1. [Read datas](#1)\n2. [Poverty rate of each state](#2)\n3. [Most common 15 Name or Surname of killed people](#3)\n4. [High school graduation rate of the population that is older than 25 in states](#4)\n5. [Percentage of state's population according to races that are black,white,native american, asian and hispanic](#5)\n6. [High school graduation rate vs Poverty rate of each state](#6)\n7. [Kill properties](#7)\n    * Manner of death\n    * Kill weapon\n    * Age of killed people\n    * Race of killed people\n    * Most dangerous cities\n    * Most dangerous states\n    * Having mental ilness or not for killed people\n    * Threat types\n    * Flee types\n    * Having body cameras or not for police\n\n8. [Race rates according to states in kill data](#8)\n9. [Kill numbers from states in kill data](#9)\n\n    Plot Contents:\n10. Bar Plot\n11. Point Plot\n12. Joint Plot\n13. Pie Chart\n14. Lm Plot\n15. Kde Plot\n16. Violin Plot\n17. Heatmap\n18. Box Plot\n19. Swarm Plot\n20. Pair Plot\n21. Count Plot"}}