{"cell_type":{"f8d4b67f":"code","51e2b745":"code","e0c4a229":"code","c572b9f8":"code","5720c93b":"code","17b3f8a4":"code","b635c2c7":"code","13a848ce":"code","7eb00ea3":"code","f622d829":"code","fc275f2e":"code","0f500244":"code","53dd3c06":"code","c035bb41":"code","fad91665":"code","ce01e067":"code","8ea98b19":"code","8f74b8a4":"code","c147a261":"code","d2b9f15d":"code","ab414905":"code","5b9ae9f0":"code","92febd22":"code","2395fb33":"code","089a694c":"code","1adf7342":"code","a3abba17":"code","49038a6a":"code","26509894":"code","2d698920":"code","7aab7fe5":"code","29a11310":"code","f8a8ecbf":"code","6375d064":"code","9a4b1bd9":"code","79119241":"code","ae90a3e6":"code","09ce7480":"code","2da1b421":"code","12dedcab":"code","b19b4e30":"code","5715cfe8":"code","db04bb90":"code","e7430af7":"code","d41ace9f":"code","9764c62d":"code","cf73ea3f":"code","ca31370b":"code","7a1e80ee":"code","9a2f2c41":"code","36d0e60c":"code","7e5249b7":"code","279a826f":"code","00b0a58a":"code","b95ebc50":"code","5a85d6ec":"code","2d14913c":"code","4492338c":"code","0428fa19":"code","a0674cb7":"code","e0a2eec2":"markdown","af02821b":"markdown","5f84a065":"markdown","314039e7":"markdown","eb231b9a":"markdown","4496e379":"markdown","927d2f3c":"markdown","f1403c0c":"markdown","33d16270":"markdown","6e85eea4":"markdown","78ec53bc":"markdown","08873b78":"markdown","fef84f9e":"markdown","bbe7effa":"markdown","ac67a9ff":"markdown","9b427047":"markdown","d6beba36":"markdown","b95505cc":"markdown","fd77cc8f":"markdown","6ab9116f":"markdown","1d2795f8":"markdown","fcd507bf":"markdown","af46dc3a":"markdown","33daa750":"markdown","a8eb3533":"markdown","8aaab2e4":"markdown","6fef0789":"markdown","73838531":"markdown","c45ee7df":"markdown","c9bdaacb":"markdown","0a8d932e":"markdown","3c0a8011":"markdown","71feb066":"markdown","a81a898f":"markdown"},"source":{"f8d4b67f":"import pandas as pd\nimport numpy as np\nimport os\nimport cv2\nfrom collections import Counter, defaultdict\nimport random\nfrom datetime import date\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\nfrom kaggle_datasets import KaggleDatasets\n\nimport tensorflow as tf\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score, classification_report\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nSEED = 2020\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntf.random.set_seed(SEED)\nos.environ['PYTHONHASHSEED'] = str(SEED)\n\n# from IPython.core.interactiveshell import InteractiveShell\n# InteractiveShell.ast_node_interactivity = \"all\"","51e2b745":"DATA_PATH = '\/kaggle\/input\/siim-isic-melanoma-classification\/'\nos.listdir(DATA_PATH)","e0c4a229":"trainMeta = pd.read_csv(DATA_PATH + 'train.csv')\ntestMeta = pd.read_csv(DATA_PATH + 'test.csv')\nsampleSubmission = pd.read_csv(DATA_PATH + 'sample_submission.csv')","c572b9f8":"trainMeta.head()","5720c93b":"trainMeta.tail()","17b3f8a4":"print(\"Train data shape: \",trainMeta.shape)","b635c2c7":"trainMeta.describe()","13a848ce":"# missing values in the train-dataset\ntrainMeta.info()","7eb00ea3":"print(\"Number of unique patients in train-data: \",trainMeta.patient_id.nunique())\nprint(\"Average number of images per patient in train-data: \",trainMeta.image_name.nunique()\/trainMeta.patient_id.nunique())","f622d829":"testMeta.head()","fc275f2e":"testMeta.tail()","0f500244":"print(\"Test data shape: \",testMeta.shape)","53dd3c06":"# missing values in the test-dataset\ntestMeta.info()","c035bb41":"print(\"Number of unique patients in test-data: \",testMeta.patient_id.nunique())\nprint(\"Average number of images per patient in test-data: \",testMeta.image_name.nunique()\/testMeta.patient_id.nunique())","fad91665":"def getPiechartDistribution(feature):\n    fig = go.Figure(data=[go.Pie(labels=feature.value_counts().index.values,\n                             values=feature.value_counts().values)])\n\n    fig = fig.update_traces(hoverinfo='label+percent',\n                      textinfo='value',\n                      textfont_size=20,\n                      marker=dict(line=dict(color='#000000', width=1)))\n\n    return fig","ce01e067":"# target distribution\n\ngetPiechartDistribution(trainMeta.benign_malignant).update_layout(title_text=\"Target Distribution of the Train-data\")","8ea98b19":"print(\"Patients with missing value of sex: \")\nfor id in trainMeta[trainMeta.sex.isna()].patient_id.unique():\n    print(id)\n#     print(id in trainMeta[trainMeta.sex.notna()].patient_id.unique())\n    \n# patients with missing values are not in patients with not-null sex value","8f74b8a4":"# lets check if there is any patient with more than one sex\n\nif len(np.unique(list(map(len,trainMeta.groupby(['patient_id'])['sex'].unique().values)))) == 1:\n    print(\"There are no patients with more than one sex\")\nelse:\n    print(\"There are patient with more than one sex\")","c147a261":"getPiechartDistribution(trainMeta.groupby(['patient_id'])['sex'].first().fillna(\"NA\")).update_layout(title_text=\"Distribution of sex feature in train data\")","d2b9f15d":"getPiechartDistribution(testMeta.groupby(['patient_id'])['sex'].first().fillna(\"NA\")).update_layout(title_text=\"Distribution of sex feature in test data\")","ab414905":"fig = px.histogram(trainMeta.fillna(\"NA\"), x=\"sex\", y=\"target\",color='benign_malignant',barmode=\"group\",title=\"Distribution of sex wrt to target\")\nfig.show()","5b9ae9f0":"trainMeta.fillna(\"NA\").groupby(['sex','anatom_site_general_challenge'])['target'].aggregate(['sum','count','mean']).reset_index().style.background_gradient(cmap='Reds')","92febd22":"hist_data = [trainMeta.age_approx.fillna(0).values, testMeta.age_approx.fillna(0).values]\ngroup_labels = ['train-age','test-age']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=5.).update_layout(title='Train & Test Age distribution')\nfig.show()","2395fb33":"hist_data = [trainMeta[trainMeta.target==1].age_approx.fillna(0).values, trainMeta[trainMeta.target==0].age_approx.fillna(0).values]\ngroup_labels = ['Malignant','Benign']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=5.,colors=['rgb(200,0,0)','rgb(0,200,0)']).update_layout(title='Distribution of age wrt target')\nfig.show()","089a694c":"fig = px.box(trainMeta.fillna(-1),x='sex',y='age_approx',color='target',title=\"Distribution of age wrt sex\")\n\nfig.show()","1adf7342":"trainMeta[trainMeta.age_approx>=60].fillna(\"NA\").groupby(['age_approx','anatom_site_general_challenge'])['target'].aggregate(['sum','count','mean']).sort_values(by='mean',ascending=False).reset_index().style.background_gradient(cmap='Reds') ","a3abba17":"fig = px.histogram(trainMeta.fillna(\"NA\"), x=\"anatom_site_general_challenge\", y=\"benign_malignant\",color='benign_malignant',barmode=\"group\",title=\"Distribution of Anatom-site wrt to target\")\nfig.show()","49038a6a":"fig = px.histogram(testMeta.fillna(\"NA\"), x=\"anatom_site_general_challenge\", y=\"anatom_site_general_challenge\",barmode=\"group\",title=\"Distribution of Anatom-site in the Test Data\")\nfig.show()","26509894":"fig = px.histogram(trainMeta.fillna(\"NA\"), x=\"diagnosis\", y=\"target\",color='benign_malignant',barmode=\"group\",title=\"Distribution of diagnosis wrt to target\")\nfig.show()","2d698920":"# there is no overlapping of patients between train & test set\n\nset(trainMeta.patient_id.unique()).intersection(set(testMeta.patient_id.unique()))","7aab7fe5":"hist_data = [trainMeta[trainMeta.target==1].groupby('patient_id')['image_name'].count().values, trainMeta[trainMeta.target==0].groupby('patient_id')['image_name'].count().values]\ngroup_labels = ['Malignant','Benign']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=1.,colors=['rgb(200,0,0)','rgb(0,200,0)']).update_layout(title='Distribution of images\/patient in Train-data wrt target')\nfig.show()","29a11310":"hist_data = [testMeta.groupby('patient_id')['image_name'].count().values]\n\nfig = ff.create_distplot(hist_data, bin_size=1.,group_labels=['test-data']).update_layout(title='Distribution of images\/patient in Test-data')\nfig.show()","f8a8ecbf":"hist_data = [trainMeta[trainMeta.target==1].fillna(0).groupby(['patient_id'])['age_approx'].max().values - trainMeta[trainMeta.target==1].fillna(0).groupby(['patient_id'])['age_approx'].min().values, trainMeta[trainMeta.target==0].fillna(0).groupby(['patient_id'])['age_approx'].max().values - trainMeta[trainMeta.target==0].fillna(0).groupby(['patient_id'])['age_approx'].min().values]\ngroup_labels = ['Malignant','Benign']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=1.,colors=['rgb(200,0,0)','rgb(0,200,0)']).update_layout(title='Distribution of age-diff of patients wrt to target in Train-data')\nfig.show()","6375d064":"hist_data = [testMeta.fillna(0).groupby(['patient_id'])['age_approx'].max().values - testMeta.fillna(0).groupby(['patient_id'])['age_approx'].min().values]\n\nfig = ff.create_distplot(hist_data, bin_size=1.,group_labels=['test-data']).update_layout(title='Distribution of age-diff of patients in Test-data')\nfig.show()","9a4b1bd9":"for patient_id in np.random.choice(trainMeta[trainMeta.target==1].fillna(\"NA\").patient_id.unique(),size=1,replace=False):\n    x = trainMeta[trainMeta.patient_id == patient_id].sort_values(['age_approx','image_name'])\n    \n    r, c = int(np.ceil(x.shape[0]\/5)), 5\n    \n    fig, ax = plt.subplots(r,c, figsize=(20,4*r))\n    \n    fig = fig.suptitle(f'{patient_id} Sex: {x.sex.values[0]}',fontsize=20)\n    \n    for i, image_name in enumerate(x.image_name.values):\n        img = cv2.imread(DATA_PATH + f'jpeg\/train\/{image_name}.jpg')\n        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n        \n        if x.benign_malignant.values[i] == \"malignant\":\n            color = \"red\"\n        else:\n            color = \"black\"\n        \n        if r>1:\n            ax[i\/\/5,i%5].imshow(img)\n            ax[i\/\/5,i%5].set_title(f\"{x.age_approx.values[i]} {x.benign_malignant.values[i]} {x.anatom_site_general_challenge.values[i]}\",color=color)\n        else:\n            ax[i%5].imshow(img)\n            ax[i%5].set_title(f\"{x.age_approx.values[i]} {x.benign_malignant.values[i]} {x.anatom_site_general_challenge.values[i]}\",color=color)\n    \n    plt.savefig(f'{x.target.sum()}_{patient_id}_{x.sex.values[0]}.png')\n\nplt.show()","79119241":"for patient_id in np.random.choice(trainMeta[trainMeta.target==0].fillna(\"NA\").patient_id.unique(),size=1,replace=False):\n    x = trainMeta[trainMeta.patient_id == patient_id].sort_values(['age_approx','image_name'])\n    \n    r, c = int(np.ceil(x.shape[0]\/5)), 5\n    \n    fig, ax = plt.subplots(r,c, figsize=(20,4*r))\n    \n    fig = fig.suptitle(f'{patient_id} Sex: {x.sex.values[0]}',fontsize=20)\n    \n    for i, image_name in enumerate(x.image_name.values):\n        img = cv2.imread(DATA_PATH + f'jpeg\/train\/{image_name}.jpg')\n        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n        \n        if x.benign_malignant.values[i] == \"malignant\":\n            color = \"red\"\n        else:\n            color = \"black\"\n        \n        if r>1:\n            ax[i\/\/5,i%5].imshow(img)\n            ax[i\/\/5,i%5].set_title(f\"{x.age_approx.values[i]} {x.benign_malignant.values[i]} {x.anatom_site_general_challenge.values[i]}\",color=color)\n        else:\n            ax[i%5].imshow(img)\n            ax[i%5].set_title(f\"{x.age_approx.values[i]} {x.benign_malignant.values[i]} {x.anatom_site_general_challenge.values[i]}\",color=color)\n    \n    plt.savefig(f'{x.target.sum()}_{patient_id}_{x.sex.values[0]}.png')\n\nplt.show()","ae90a3e6":"for patient_id in np.random.choice(testMeta.fillna(\"NA\").patient_id.unique(),size=1,replace=False):\n    x = testMeta[testMeta.patient_id == patient_id].sort_values(['age_approx','image_name'])\n    \n    r, c = int(np.ceil(x.shape[0]\/5)), 5\n    \n    fig, ax = plt.subplots(r,c, figsize=(20,4*r))\n    \n    fig = fig.suptitle(f'{patient_id} Sex: {x.sex.values[0]}',fontsize=20)\n    \n    for i, image_name in enumerate(x.image_name.values):\n        img = cv2.imread(DATA_PATH + f'jpeg\/test\/{image_name}.jpg')\n        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n        \n        if r>1:\n            ax[i\/\/5,i%5].imshow(img)\n            ax[i\/\/5,i%5].set_title(f\"{x.age_approx.values[i]} {x.anatom_site_general_challenge.values[i]} {image_name}\")\n        else:\n            ax[i%5].imshow(img)\n            ax[i%5].set_title(f\"{x.age_approx.values[i]} {x.anatom_site_general_challenge.values[i]} {image_name}\")\n    \n#     plt.savefig(f'{x.target.sum()}_{patient_id}_{x.sex.values[0]}.png')\n\nplt.show()","09ce7480":"image_folder_path = '..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'\nimageName = np.random.choice(trainMeta[trainMeta.target==1].image_name.values)\nsampleImage = cv2.imread(os.path.join(image_folder_path, f'{imageName}.jpg'))[:,:,::-1]\nplt.title(f'{imageName} - {trainMeta[trainMeta.image_name==imageName].target.values}')\nplt.imshow(sampleImage)","2da1b421":"transforms = ['Identity','RandomBrightness','RandomContrast','Crop','FlipLeftRight','FlipUpDown','RandomSaturation','Rot90','Rot180','Rot270']\n\ndef randAugment(image=sampleImage,N=3):\n    \n    augmentations = np.random.choice(transforms,N,replace=False)\n    \n    image = tf.cast(image, tf.float32) \/ 255.0\n    \n    for transform in augmentations:\n\n        if transform=='Identity':\n            continue\n\n        elif transform=='RandomBrightness':\n            image = tf.image.random_brightness(image,max_delta=0.2)\n        \n        elif transform=='RandomContrast':\n            image = tf.image.random_contrast(image,1.0,3.0)\n        \n        elif transform=='Crop':\n#             image = tf.image.random_crop(image,[512,512,3])\n            image = tf.image.central_crop(image,0.5)\n    \n        elif transform=='FlipLeftRight':\n            image = tf.image.flip_left_right(image)\n            \n        elif transform=='FlipUpDown':\n            image = tf.image.flip_up_down(image)\n        \n        elif transform=='RandomSaturation':\n            image = tf.image.random_saturation(image,0.6,1.5)\n        \n        elif transform=='Rot90':\n            image = tf.image.rot90(image,k=1)\n        \n        elif transform=='Rot180':\n            image = tf.image.rot90(image,k=2)\n            \n        elif transform=='Rot270':\n            image = tf.image.rot90(image,k=3)\n        \n    image = tf.image.resize(image,(450,600))\n#     image = cv2.resize(image.numpy(),(600,450))\n#     print(np.all(image1.numpy()==image1))\n        \n    return image, augmentations","12dedcab":"r, c = 3, 5\n\nfig, ax = plt.subplots(r,c, figsize=(25,5*r))\n\nfig = fig.suptitle(f\"Image Augmentation of {imageName} - {trainMeta[trainMeta.image_name==imageName].target.values}\",fontsize=20)\n\nfor i in range(r*c):\n    img, augmentations = randAugment(sampleImage,5)\n\n    ax[i\/\/5,i%5].imshow(img)\n    ax[i\/\/5,i%5].set_title(\"-\".join(augmentations[:2]) + \"\\n\" + \"-\".join(augmentations[2:]))\n\n#     plt.savefig(f'{x.target.sum()}_{patient_id}_{x.sex.values[0]}.png')\n\nplt.show()","b19b4e30":"def stratified_group_k_fold(X, y, groups, k, seed=None):\n    labels_num = np.max(y) + 1\n    y_counts_per_group = defaultdict(lambda: np.zeros(labels_num))\n    y_distr = Counter()\n    for label, g in zip(y, groups):\n        y_counts_per_group[g][label] += 1\n        y_distr[label] += 1\n\n    y_counts_per_fold = defaultdict(lambda: np.zeros(labels_num))\n    groups_per_fold = defaultdict(set)\n\n    def eval_y_counts_per_fold(y_counts, fold):\n        y_counts_per_fold[fold] += y_counts\n        std_per_label = []\n        for label in range(labels_num):\n            label_std = np.std([y_counts_per_fold[i][label] \/ y_distr[label] for i in range(k)])\n            std_per_label.append(label_std)\n        y_counts_per_fold[fold] -= y_counts\n        return np.mean(std_per_label)\n    \n    groups_and_y_counts = list(y_counts_per_group.items())\n    random.Random(seed).shuffle(groups_and_y_counts)\n\n    for g, y_counts in sorted(groups_and_y_counts, key=lambda x: -np.std(x[1])):\n        best_fold = None\n        min_eval = None\n        for i in range(k):\n            fold_eval = eval_y_counts_per_fold(y_counts, i)\n            if min_eval is None or fold_eval < min_eval:\n                min_eval = fold_eval\n                best_fold = i\n        y_counts_per_fold[best_fold] += y_counts\n        groups_per_fold[best_fold].add(g)\n\n    all_groups = set(groups)\n    \n    for i in range(k):\n        train_groups = all_groups - groups_per_fold[i]\n        test_groups = groups_per_fold[i]\n\n        train_indices = [i for i, g in enumerate(groups) if g in train_groups]\n        test_indices = [i for i, g in enumerate(groups) if g in test_groups]\n\n        yield train_indices, test_indices","5715cfe8":"def get_stratify_group(row):\n    stratify_group = row['sex']\n#     stratify_group += f'_{row[\"age_approx\"]}'\n    stratify_group += f'_{row[\"anatom_site_general_challenge\"]}'\n    stratify_group += f'_{row[\"target\"]}'\n    return stratify_group","db04bb90":"%%time\n\ntrain = trainMeta.copy()\ntrain['stratify_group'] = train.fillna(\"NA\").apply(get_stratify_group, axis=1)\ntrain['stratify_group'] = train['stratify_group'].astype('category').cat.codes\n\ntrain['fold'] = 0\n\nk = 5\nfor fold_ind, (train_ind, val_ind) in enumerate(stratified_group_k_fold(trainMeta, train.stratify_group.values, trainMeta.patient_id.values, k=k, seed=SEED)):\n    train.loc[val_ind,'fold'] = fold_ind\n\ntrain.fold.value_counts(normalize=True)","e7430af7":"for i in range(5):\n    for j in range(i+1,5):\n        print(f\"fold_{i} intersection fold_{j}: {set(train[train.fold==i].patient_id).intersection(set(train[train.fold==j].patient_id))}\")","d41ace9f":"fig = px.histogram(train.fillna(\"NA\"), x=\"benign_malignant\", y=\"target\",color='fold',barmode=\"group\",title=\"Distribution of Targets wrt to Folds\")\nfig.show()","9764c62d":"fig = px.histogram(train.fillna(\"NA\"), x=\"anatom_site_general_challenge\", y=\"anatom_site_general_challenge\",color='fold',barmode=\"group\",title=\"Distribution of Anatom-site wrt folds\")\nfig.show()","cf73ea3f":"fig = px.histogram(train.fillna(\"NA\"), x=\"sex\", y=\"sex\",color='fold',barmode=\"group\",title=\"Distribution of Sex wrt folds\")\nfig.show()","ca31370b":"fig = px.histogram(train.fillna(\"NA\"), x=\"age_approx\", y=\"age_approx\",color='fold',barmode=\"group\",title=\"Distribution of Age wrt folds\")\nfig.show()","7a1e80ee":"train.head()","9a2f2c41":"# train.to_csv('train_StratifiedGroupK(5)Fold(SEED2020)(Group_sex_anatomsite_target).csv',index=False)","36d0e60c":"y = train.target\nfolds = train.fold\nX = train.drop(['target','benign_malignant','diagnosis','stratify_group','fold','image_name'],axis=1)\nX.head()","7e5249b7":"X.sex = X.sex.fillna(\"unknown\")\nX.anatom_site_general_challenge = X.anatom_site_general_challenge.fillna(\"unknown\")\nX.age_approx = X.age_approx.fillna(0)\n\nX_test = testMeta.copy()\nX_test.anatom_site_general_challenge = X_test.anatom_site_general_challenge.fillna(\"unknown\")","279a826f":"def labelEncoder(train,val,test,columns):\n    for col in columns:\n        le = LabelEncoder()    \n        train[f'le_{col}'] = le.fit_transform(train[col])\n        val[f'le_{col}'] = le.transform(val[col])\n        test[f'le_{col}'] = le.transform(test[col])\n    \n    return train,val,test\n\ndef oneHotEncode(train,val,test,cols):\n    train['temp'] = 0\n    val['temp'] = 1\n    test['temp'] = 2\n    \n    temp = pd.get_dummies(pd.concat([train,val,test],axis=0),columns=cols,drop_first=True)\n    \n    train = temp[temp.temp==0]\n    val = temp[temp.temp==1]\n    test = temp[temp.temp==2]\n    \n    train.drop(['temp'],inplace=True,axis=1)\n    val.drop(['temp'],inplace=True,axis=1)\n    test.drop(['temp'],inplace=True,axis=1)\n    \n    return train, val, test\n\n\ndef standardScale(X_train,X_val,test,cols):\n    \n    for col in cols:\n        ss = StandardScaler()\n        X_train[f'std_{col}'] = ss.fit_transform(X_train[col].values.reshape(-1,1))\n        X_val[f'std_{col}'] = ss.transform(X_val[col].values.reshape(-1,1))\n        test[f'std_{col}'] = ss.transform(test[col].values.reshape(-1,1))\n\n    return X_train, X_val, test\n\n\ndef targetEncode(X_train,y_train,X_val,X_test,cols):\n    \n    X = pd.concat([X_train,y_train],axis=1)\n    \n    alpha = 15\n    global_mean = y_train.mean()\n    \n    for col in cols:\n        encodings = dict((X.groupby([col])['target'].sum() + alpha*global_mean)\/(alpha + X.groupby([col])['target'].count()))\n        X_train[f'te_{col}'] = X_train[col].map(encodings).fillna(global_mean)\n        X_val[f'te_{col}'] = X_val[col].map(encodings).fillna(global_mean)\n        X_test[f'te_{col}'] = X_test[col].map(encodings).fillna(global_mean)\n    \n    return X_train, X_val, X_test\n\n\ndef featureInteractions(X_train,X_val,X_test,cols):\n    \n    for i in range(len(cols)):\n        for j in range(i+1,len(cols)):\n            X_train[f'{cols[i]}_{cols[j]}'] = f'{X_train[cols[i]]}_{X_train[cols[j]]}'\n            X_val[f'{cols[i]}_{cols[j]}'] = f'{X_val[cols[i]]}_{X_val[cols[j]]}'\n            X_test[f'{cols[i]}_{cols[j]}'] = f'{X_test[cols[i]]}_{X_test[cols[j]]}'\n    \n    return X_train, X_val, X_test\n    \n    \n    \ndef preprocessData(X_train,y_train,X_val,X_test):\n    \n    data = [X_train,X_val,X_test]\n    \n    # Sun-Exposed or not feature\n#     for X in data:\n#         X['sun_exposed'] = X.anatom_site_general_challenge.map({'torso':1,'lower extremity':2,'upper extremity':2,'head\/neck':3,'unknown':0,'palms\/soles':0,'oral\/genital':0})\n    \n    # Feature Interactions\n#     X_train, X_val, X_test = featureInteractions(X_train,X_val,X_test,['sex','age_approx','anatom_site_general_challenge'])\n#     X_train[\"_\".join(['sex','age_approx','anatom_site_general_challenge'])] = f'{X_train[\"sex\"]}_{X_train[\"age_approx\"]}_{X_train[\"anatom_site_general_challenge\"]}'\n#     X_val[\"_\".join(['sex','age_approx','anatom_site_general_challenge'])] = f'{X_val[\"sex\"]}_{X_val[\"age_approx\"]}_{X_val[\"anatom_site_general_challenge\"]}'\n#     X_test[\"_\".join(['sex','age_approx','anatom_site_general_challenge'])] = f'{X_test[\"sex\"]}_{X_test[\"age_approx\"]}_{X_test[\"anatom_site_general_challenge\"]}'\n\n    \n    \n    X_train, X_val, X_test = standardScale(X_train,X_val,X_test,['age_approx'])\n    \n    \n#     X_train,X_val,X_test = labelEncoder(X_train,X_val,X_test,['sex','age_approx','anatom_site_general_challenge'])\n#     X_train, X_val, X_test = targetEncode(X_train,y_train,X_val,X_test,\n#                                           [col for col in ['sex','age_approx','anatom_site_general_challenge','sex_age_approx','sex_anatom_site_general_challenge','age_approx_anatom_site_general_challenge',\"_\".join(['sex','age_approx','anatom_site_general_challenge'])] if col in X_train.columns])\n    X_train, X_val, X_test = oneHotEncode(X_train,X_val,X_test,cols=[col for col in ['anatom_site_general_challenge','sex','sex_age_approx','sex_anatom_site_general_challenge','age_approx_anatom_site_general_challenge'] if col in X_train.columns])\n    \n    \n    # Drop unwanted columns\n    dropCols = list(X_train.dtypes[X_train.dtypes=='object'].index.values) + ['age_approx']\n    X_train = X_train.drop(dropCols,axis=1)\n    X_val = X_val.drop(dropCols,axis=1)\n    X_test = X_test.drop(dropCols,axis=1)\n        \n#     print(X_train.columns)\n    \n    return X_train, X_val, X_test","00b0a58a":"def trainOnMetaData(X,y,X_test,folds):\n    \n    CVScores = []\n    \n    valPred = y.copy()\n    \n    testPred = {}\n    \n    for fold in range(k):\n        val_idx = X[folds==fold].index\n        train_idx = X[folds!=fold].index\n        \n        X_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n        X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        test = X_test[X_train.columns].copy()\n        \n        # Preprocessing\n        X_train, X_val, test = preprocessData(X_train,y_train,X_val,test)\n            \n        model = LogisticRegression(n_jobs=-1,random_state=SEED,max_iter=100)\n        \n        model.fit(X_train,y_train)\n        \n        print(f'\\nFold {fold}: ')\n        print('----------------')\n        \n        valPred.iloc[val_idx] = model.predict_proba(X_val)[:,1]\n        \n        valScore = roc_auc_score(y_val,valPred.iloc[val_idx])\n        print(\"Validation Score: \",valScore)\n        CVScores.append(valScore)\n        \n        print(\"\\nCoeff: \",dict(zip(X_train.columns,model.coef_[0])))\n#         print(\"\\nFeature Importance: \",dict(zip(X_train.columns,model.feature_importances_)))\n        \n        testPred[f'fold_{fold}'] = model.predict_proba(test)[:,1]\n    \n    print(f\"\\nMean CV Score: {np.mean(CVScores)} +\/- {np.std(CVScores)}\")\n    \n    return CVScores, valPred, pd.DataFrame(testPred)","b95ebc50":"CVScores, valPred, testPred = trainOnMetaData(X,y,X_test,folds)","5a85d6ec":"def visualizeResults(CVScores,valPred,testPred):\n    \n    fig, ax = plt.subplots(1,3,figsize=(18,5))\n    fig.suptitle(\"Results\",fontsize=20)\n    \n    sns.barplot(x=list(range(k)),y=CVScores, ax=ax[0])\n    ax[0].set_title(f\"CV-Scores of {k}-Folds\")\n    \n    sns.kdeplot(testPred.mean(axis=1),shade=True,ax=ax[1])\n    ax[1].set_title(\"Distribution of Testset Predictions\")\n    \n    sns.kdeplot(valPred[y==0],label='benign',shade=True,ax=ax[2])\n    sns.kdeplot(valPred[y==1],label='malignant',shade=True,ax=ax[2])\n    ax[2].set_title('Distribution of Cross-Validation set Predictions')","2d14913c":"visualizeResults(CVScores,valPred,testPred)","4492338c":"hist_data = [valPred[folds==fold] for fold in range(k)]\ngroup_labels = [f'fold_{fold}' for fold in range(k)]\n\nfig = ff.create_distplot(hist_data, group_labels, show_hist=False).update_layout(title='Distribution of Cross Validation Set Predictions wrt of folds')\nfig.show()","0428fa19":"def saveResults(valPred,testPred,CVScores,modelName):\n    \n    sampleSubmission.iloc[:,1] = testPred.mean(axis=1)\n    sampleSubmission.to_csv(f'{date.today()}_Test_{modelName}_{np.mean(CVScores)}.csv',index=False)\n    \n    val = pd.DataFrame(train['image_name']) \n    val['target'] = valPred\n\n    val.to_csv(f'{date.today()}_Val_{modelName}_{np.mean(CVScores)}.csv',index=False)","a0674cb7":"saveResults(valPred,testPred,CVScores,'LogisticRegression')\nos.listdir('\/kaggle\/working\/')","e0a2eec2":"## 7. Inference","af02821b":"### About Melanoma\n\nThe most serious type of **skin cancer**.  \n**Melanoma** occurs when the pigment-producing cells that give colour to the skin become cancerous.  \n**Symptoms** might include a new, unusual growth or a change in an existing mole. Melanomas can occur anywhere on the body.  \n**Treatment** may involve surgery, radiation, medication or in some cases, chemotherapy.\n\n\n---\n\n\n### Objetive\n\nIn this competition, you\u2019ll identify melanoma in images of skin lesions. In particular, you\u2019ll use images within the same patient and determine which are likely to represent a melanoma. Using patient-level contextual information may help the development of image analysis tools, which could better support clinical dermatologists.\n\nMelanoma is a deadly disease, but if caught early, most melanomas can be cured with minor surgery. Image analysis tools that automate the diagnosis of melanoma will improve dermatologists' diagnostic accuracy. Better detection of melanoma has the opportunity to positively impact millions of people.\n\n\n---\n\n\n### Dataset\n\nThe images are provided in DICOM format. This can be accessed using commonly-available libraries like pydicom, and contains both image and metadata. It is a commonly used medical imaging data format.\n\nImages are also provided in JPEG and TFRecord format (in the jpeg and tfrecords directories, respectively). Images in TFRecord format have been resized to a uniform 1024x1024.\n\nMetadata is also provided outside of the DICOM format, in CSV files. See the Columns section for a description.\n\n\n---\n\n\n### Evaluation Metric: ROC-AUC\n\n**What is AUC - ROC Curve?**\n\nAUC - ROC curve is a performance measurement for classification problem at various thresholds settings. ROC is a probability curve and AUC represents degree or measure of separability. It tells how much model is capable of distinguishing between classes. Higher the AUC, better the model is at predicting 0s as 0s and 1s as 1s. By analogy, Higher the AUC, better the model is at distinguishing between patients with disease and no disease.  \n\nThe ROC curve is plotted with TPR against the FPR where TPR is on y-axis and FPR is on the x-axis.\n\n![roc auc](https:\/\/miro.medium.com\/max\/722\/1*pk05QGzoWhCgRiiFbz-oKQ.png)\nsource: [https:\/\/towardsdatascience.com\/understanding-auc-roc-curve-68b2303cc9c5](https:\/\/towardsdatascience.com\/understanding-auc-roc-curve-68b2303cc9c5)\n\nHere is the link to a great [video](https:\/\/youtu.be\/4jRBRDbJemM) on **roc-auc**\n\n---\n\n<font color=\"red\" size=5> Please!!! Upvote this kernel if you find it useful. <\/font>","5f84a065":"* **Torso** has more samples in the dataset, maybe because most of the lesions happen to be in this part of the body\n* Body-parts with **larger area** tend to have more samples and more **Melanoma-positive** cases.","314039e7":"#### Images of a random Patient with Melanoma from the train-data","eb231b9a":"### Overview of the Train Data","4496e379":"#### Images of a random Patient from the test-data","927d2f3c":"## 4. Data Augmentation","f1403c0c":"* Nearly same distribution of sex in train and test sets","33d16270":"### Image Data\n\n---\nUse the \u201c**ABCDE rule**\u201d to look for some of the common signs of melanoma, one of the deadliest forms of skin cancer:\n![ABCDE](https:\/\/fwderm.com\/media\/2017\/05\/ABCDEskincancer.jpg)\n[Source](https:\/\/fwderm.com\/skin-conditions\/moles\/)\n\n---\n\n**Moles**  \n\nMoles are common. Almost every adult has a few moles. Adults who have light skin often have more moles. They may have 10 to 40 moles on their skin. This is normal.\n\nYou should not be overly worried about your moles.  \n\n---\n\n**But you should know**:\n* A type of skin cancer, melanoma, can grow in or near a mole.  \n* Caught early and treated, melanoma can be cured.  \n* The first sign of melanoma is often a change to a mole \u2014 or a new mole on your skin.  \n* Checking your skin can help you find melanoma early. A dermatologist can show you how to examine your skin and tell you how often you should check your skin.  \n\n---\n","6e85eea4":"* All patients with missing value of sex have target value of 0.\n* What could be the reason behind this?","78ec53bc":"## 3. EDA","08873b78":"### Anatom-site","fef84f9e":"* Similar kind of distribution of the smaples can be seen in the Test-Data also.","bbe7effa":"### Random Augmentations","ac67a9ff":"#### Sex and Anatom-site relation","9b427047":"### Over view of the Test Data","d6beba36":"### Age","b95505cc":"### Diagnosis","fd77cc8f":"## 5. Validation Strategy - Stratified Group K-Fold\nhttps:\/\/www.kaggle.com\/jakubwasikowski\/stratified-group-k-fold-cross-validation","6ab9116f":"#### Images of a random Patient without Melanoma from the train-data","1d2795f8":"#### Images per patient in train Data wrt to target","fcd507bf":"### Sample Image","af46dc3a":"## [SIIM-ISIC Melanoma Classification](https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/)\n\n\n![melanoma](https:\/\/media.giphy.com\/media\/3o85xJ2vIqjPGDA8HC\/giphy.gif)","33daa750":"* Patients with age more than **60** are more prone to catch melanoma, maybe this could be because of **Low immunity**","a8eb3533":"#### Age and Anatom-site relation","8aaab2e4":"### Training","6fef0789":"### Patient wise data exploration","73838531":"## 6. Base Model using Meta-data","c45ee7df":"* Positive cases have median value of age more than the negative cases.\n* Males of age more than **60** & females of age more than **55** are more prone to catch melanoma.\n* Males have age distribution slightly higher than females\n* Here -1 indicates missing values. We can see that patients with missing sex values also have missing age values and do not have melanoma","c9bdaacb":"<font color=\"red\" size=5> Please!!! Upvote this kernel if you find it useful. <\/font>","0a8d932e":"#### Images per patient in test Data","3c0a8011":"## 1. Importing necessary libraries","71feb066":"### Sex","a81a898f":"## 2. Loading Dataset"}}