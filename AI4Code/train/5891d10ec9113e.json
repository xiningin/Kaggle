{"cell_type":{"df0a0e4a":"code","a2a6a2df":"code","860d2200":"code","ad2a7d36":"markdown","cade5dab":"markdown","44eae35c":"markdown","bc74bae4":"markdown"},"source":{"df0a0e4a":"%%writefile \"anti_geo.py\"\n\nimport operator\nimport numpy as np\nimport cmath\nfrom collections import namedtuple\n\nbasis = np.array([1, cmath.exp(2j * cmath.pi * 1 \/ 3), cmath.exp(2j * cmath.pi * 2 \/ 3)])\nHistMatchResult = namedtuple(\"HistMatchResult\", \"idx length\")\n\ndef find_all_longest(seq, max_len=None): \n        result = []\n        i_search_start = len(seq) - 2\n        while i_search_start > 0:\n            i_sub = -1\n            i_search = i_search_start\n            length = 0\n            while i_search >= 0 and seq[i_sub] == seq[i_search]:\n                length += 1\n                i_sub -= 1\n                i_search -= 1\n                if max_len is not None and length > max_len: break\n            if length > 0: result.append(HistMatchResult(i_search_start + 1, length))\n            i_search_start -= 1\n\n        return sorted(result, key=operator.attrgetter(\"length\"), reverse=True)\n\ndef complex_to_probs(z):\n        probs = (2 * (z * basis.conjugate()).real + 1) \/ 3\n        if min(probs) < 0: probs -= min(probs)\n        return probs \/ sum(probs)\n\nopp_hist = []\nmy_opp_hist = []\noffset = 0\nlast_feat = None\n\ndef agent(obs, conf):\n    global action, opp_hist, my_opp_hist, offset, last_feat\n\n    if obs.step == 0:\n        action = np.random.choice(3)\n    else:\n        my_opp_hist.append((obs.lastOpponentAction, action))\n        opp_hist.append(action)\n\n        if last_feat is not None:\n            this_offset = (basis[(opp_hist[-1] + 1) % 3]) * last_feat.conjugate()\n            offset = (1 - .01) * offset + .01 * this_offset\n\n        hist_match = find_all_longest(my_opp_hist, 20)\n        if not hist_match:\n            pred = 0\n        else:\n            feat = basis[opp_hist[hist_match[0].idx]]\n            last_feat = complex_to_probs(feat \/ abs(feat)) @ basis\n            pred = last_feat * offset * cmath.exp(2j * cmath.pi * 1\/9)\n\n        probs = complex_to_probs(pred)\n        if probs[np.argmax(probs)] > .334:\n            action = (int(np.argmax(probs))+1)%3\n        else:\n            action = (np.random.choice(3, p=probs)+1)%3\n\n    return action","a2a6a2df":"%%writefile \"geo.py\"\n\nimport operator\nimport numpy as np\nimport cmath\nfrom typing import List\nfrom collections import namedtuple\nimport traceback\nimport sys\n\n\nbasis = np.array(\n    [1, cmath.exp(2j * cmath.pi * 1 \/ 3), cmath.exp(2j * cmath.pi * 2 \/ 3)]\n)\n\nHistMatchResult = namedtuple(\"HistMatchResult\", \"idx length\")\n\ndef find_all_longest(seq, max_len=None) -> List[HistMatchResult]:\n    \"\"\"\n    Find all indices where end of `seq` matches some past.\n    \"\"\"\n    result = []\n\n    i_search_start = len(seq) - 2\n\n    while i_search_start > 0:\n        i_sub = -1\n        i_search = i_search_start\n        length = 0\n\n        while i_search >= 0 and seq[i_sub] == seq[i_search]:\n            length += 1\n            i_sub -= 1\n            i_search -= 1\n\n            if max_len is not None and length > max_len:\n                break\n\n        if length > 0:\n            result.append(HistMatchResult(i_search_start + 1, length))\n\n        i_search_start -= 1\n\n    result = sorted(result, key=operator.attrgetter(\"length\"), reverse=True)\n\n    return result\n\n\ndef probs_to_complex(p):\n    return p @ basis\n\n\ndef _fix_probs(probs):\n    \"\"\"\n    Put probs back into triangle. Sometimes this happens due to rounding errors or if you\n    use complex numbers which are outside the triangle.\n    \"\"\"\n    if min(probs) < 0:\n        probs -= min(probs)\n\n    probs \/= sum(probs)\n\n    return probs\n\n\ndef complex_to_probs(z):\n    probs = (2 * (z * basis.conjugate()).real + 1) \/ 3\n    probs = _fix_probs(probs)\n    return probs\n\n\ndef z_from_action(action):\n    return basis[action]\n\n\ndef sample_from_z(z):\n    probs = complex_to_probs(z)\n    return np.random.choice(3, p=probs)\n\n\ndef bound(z):\n    return probs_to_complex(complex_to_probs(z))\n\n\ndef norm(z):\n    return bound(z \/ abs(z))\n\n\nclass Pred:\n    def __init__(self, *, alpha):\n        self.offset = 0\n        self.alpha = alpha\n        self.last_feat = None\n\n    def train(self, target):\n        if self.last_feat is not None:\n            offset = target * self.last_feat.conjugate()   # fixed\n\n            self.offset = (1 - self.alpha) * self.offset + self.alpha * offset\n\n    def predict(self, feat):\n        \"\"\"\n        feat is an arbitrary feature with a probability on 0,1,2\n        anything which could be useful anchor to start with some kind of sensible direction\n        \"\"\"\n        feat = norm(feat)\n\n        # offset = mean(target - feat)\n        # so here we see something like: result = feat + mean(target - feat)\n        # which seems natural and accounts for the correlation between target and feat\n        # all RPSContest bots do no more than that as their first step, just in a different way\n        \n        result = feat * self.offset\n\n        self.last_feat = feat\n\n        return result\n    \n    \nclass BaseAgent:\n    def __init__(self):\n        self.my_hist = []\n        self.opp_hist = []\n        self.my_opp_hist = []\n        self.outcome_hist = []\n        self.step = None\n\n    def __call__(self, obs, conf):\n        try:\n            if obs.step == 0:\n                action = np.random.choice(3)\n                self.my_hist.append(action)\n                return action\n\n            self.step = obs.step\n\n            opp = int(obs.lastOpponentAction)\n            my = self.my_hist[-1]\n\n            self.my_opp_hist.append((my, opp))\n            self.opp_hist.append(opp)\n\n            outcome = {0: 0, 1: 1, 2: -1}[(my - opp) % 3]\n            self.outcome_hist.append(outcome)\n\n            action = self.action()\n\n            self.my_hist.append(action)\n\n            return action\n        except Exception:\n            traceback.print_exc(file=sys.stderr)\n            raise\n\n    def action(self):\n        pass\n\n\nclass Agent(BaseAgent):\n    def __init__(self, alpha=0.01):\n        super().__init__()\n\n        self.predictor = Pred(alpha=alpha)\n\n    def action(self):\n        self.train()\n\n        pred = self.preds()\n\n        return_action = sample_from_z(pred)\n\n        return return_action\n\n    def train(self):\n        last_beat_opp = z_from_action((self.opp_hist[-1] + 1) % 3)\n        self.predictor.train(last_beat_opp)\n\n    def preds(self):\n        hist_match = find_all_longest(self.my_opp_hist, max_len=20)\n\n        if not hist_match:\n             return 0\n\n        feat = z_from_action(self.opp_hist[hist_match[0].idx])\n\n        pred = self.predictor.predict(feat)\n\n        return pred\n    \n    \nagent = Agent()\n\n\ndef call_agent(obs, conf):\n    return agent(obs, conf)\n","860d2200":"from kaggle_environments import evaluate, make, utils\nenv = make(\"rps\", debug=True)\n\nnum_win=0\nnum_loss=0\nnum_matches=0\n\nfor _ in range(500):\n    env.reset()\n    result=env.run([\"anti_geo.py\", \"geo.py\"])\n    reward=result[-1][0][\"observation\"][\"reward\"]\n    if reward>20:\n        num_win+=1\n    if reward<-20:\n        num_loss+=1\n    num_matches+=1\n    \n    print(f\"{reward:+4.0f}, {num_matches:2d} matches, {num_win\/num_matches:5.1%} win, {num_loss\/num_matches:5.1%} loss\")\n","ad2a7d36":"[Geometry Bot](https:\/\/www.kaggle.com\/superant\/rps-geometry-silver-rank-by-minimal-logic \n) is a work of art. Simple, elgant, and difficult to beat.\n\nIn [Anti Opposition Transition Matrix](https:\/\/www.kaggle.com\/superant\/anti-opp-transition-matrix-beating-stochastic) it is shown how to beat stochastic bots.\n\nThis notebook shows how to beat Geometry Bot using the same simple technique.\n\nWith apologies for mangling superant's code ...","cade5dab":"## Geo Bot","44eae35c":"# Beating Geobot","bc74bae4":"# Evaluation"}}