{"cell_type":{"8aa6f566":"code","30402f95":"code","7ae30466":"code","2a7c6748":"code","b6675196":"code","1c12b2d5":"code","c2a5e0c6":"code","951ea376":"markdown","f8ec46df":"markdown","53219f30":"markdown","0443063a":"markdown","8ea38ef1":"markdown","541efb30":"markdown","9cdda279":"markdown","595e0ab2":"markdown"},"source":{"8aa6f566":"import sqlite3  #connection with the database\n\nimport pandas as pd  #query data stored in pandas\npd.options.display.float_format = \"{:.2f}\".format  #reformat the pandas dataframe output in order to show the plain values\nimport numpy as np  #pandas built upon numpy, so it is necessary\n\nimport matplotlib.pyplot as plt  #plotting module\nimport matplotlib.patches as mpatches  #create my own legends and colors on the figures\nimport matplotlib.ticker as ticker  #provides broader customization options on the axes tickers\n\nimport seaborn as sns  #built upon matplotlib and pandas, used for visualization\n\nimport datetime  #SQL query date parsing","30402f95":"sql_database = '\/kaggle\/input\/secondhand-car-market-data-parsing-dataset-v1\/kaggle_sqlite'\nconn = sqlite3.connect(sql_database)  #conn object with the SQLite DB\n\ncar_data_df = pd.DataFrame()  #empty DF\ncar_data_df = pd.read_sql(\"\"\"\n                            SELECT \n                                brand_name as 'brand',\n                                strftime('%m', upload_date) as 'upload_month',\n                                ad_price as 'price',\n                                mileage as 'mileage'\n                            FROM advertisements\n                            JOIN brand ON advertisements.brand_id = brand.brand_id\n                            WHERE brand_name IN ('BMW','AUDI', 'MERCEDES-BENZ');\n                            \"\"\",\n                            conn)  #SQL query; used pandas 'read_sql' method\nprint('Dataframe basic info:\\n')\nprint(car_data_df.info())\nprint('\\n\\nDataframe data (top 5 rows):\\n')\nprint(car_data_df.head())\nprint('\\n\\nDataframe description:\\n')\nprint(car_data_df[['mileage','price']].describe())","7ae30466":"fig, axes = plt.subplots(2,2, figsize = (25,15))  #initialize the figure and axes\nsns.set(style = 'darkgrid')  #modifying the style of the figure\n\n#grouped dataframes\nax00b_grouped_df = car_data_df.groupby(by=['upload_month']).count().reset_index()  #three brands combined\ncar_data_df_grouped = car_data_df.groupby(by=['upload_month', 'brand']).count().reset_index()  #separated by brands\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\n#creating the barplot for all three brands combined; subplot[0,0]\nax00a = sns.barplot(\n                ax=axes[0,0],\n                x=car_data_df.upload_month,\n                y=car_data_df.price,\n                palette = \"GnBu_d\",\n                errcolor = '#FF5511',\n                capsize = 0.2)\n\nax00a.set_xlabel('Month', fontsize=15.0)  #x label\nax00a.set_ylabel('Price (in million HUF)', fontsize=15.0)  #y label\n\n#secondary axis; lineplot\nax00b = ax00a.twinx()  #creating the secondary y-axis for the lineplot; subplot[0,0]\nax00b = sns.lineplot(\n        x=ax00b_grouped_df.upload_month,\n        y=ax00b_grouped_df.price,\n        linewidth = 1.5,\n        color = '#FF5511',\n        marker = 'x',\n        markersize = 15.0,\n        markeredgecolor = '#FF5511',\n        markeredgewidth = 3.0)\n\nax00b.set_ylabel('Total number of advertisements (count)', fontsize=15.0)\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\n#creating the barplot for AUDI brand; subplot[0,1]\nax01a = sns.barplot(\n        ax=axes[0,1],\n        x=car_data_df.upload_month.loc[car_data_df['brand']=='AUDI'],\n        y=car_data_df.price.loc[car_data_df['brand']=='AUDI'],\n        palette = \"Blues\",\n        errcolor = '#BBC400',\n        capsize = 0.2)\n\nax01a.set_xlabel('Month', fontsize=15.0)\nax01a.set_ylabel('Price (in million HUF)', fontsize=15.0)\nax01a.set_title('AUDI')\n\n#secondary axis; lineplot\nax01b = ax01a.twinx() #creating the secondary y-axis for the lineplot; subplot[0,1]\nax01b = sns.lineplot(\n        x=car_data_df_grouped.upload_month.loc[car_data_df_grouped['brand']=='AUDI'],\n        y=car_data_df_grouped.price.loc[car_data_df_grouped['brand']=='AUDI'],\n        linewidth = 0,\n        color = '#BBC400',\n        marker = 'o',\n        markersize = 15.0,\n        markeredgecolor = '#BBC400',\n        markeredgewidth = 3.0)\n\nax01b.set_ylabel('Total number of advertisements (count)', fontsize=15.0)\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\n#creating the barplot for BMW brand; subplot[1,0]\nax10a = sns.barplot(\n        ax=axes[1,0],\n        x=car_data_df.upload_month.loc[car_data_df['brand']=='BMW'],\n        y=car_data_df.price.loc[car_data_df['brand']=='BMW'],\n        palette = \"Greys\",\n        errcolor = '#0068C4',\n        capsize = 0.2)\n\nax10a.set_xlabel('Month', fontsize=15.0)\nax10a.set_ylabel('Price (in million HUF)', fontsize=15.0)\nax10a.set_title('BMW')\n\n#secondary axis; lineplot\nax10b = ax10a.twinx() #creating the secondary y-axis for the lineplot; subplot[0,1]\nax10b = sns.lineplot(\n        x=car_data_df_grouped.upload_month.loc[car_data_df_grouped['brand']=='BMW'],\n        y=car_data_df_grouped.price.loc[car_data_df_grouped['brand']=='BMW'],\n        linewidth = 0,\n        color = '#0068C4',\n        marker = 'o',\n        markersize = 15.0,\n        markeredgecolor = '#0068C4',\n        markeredgewidth = 3.0)\n\nax10b.set_ylabel('Total number of advertisements (count)', fontsize=15.0)\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\n#creating the barplot for MERCEDES-BENZ brand; subplot[1,1]\nax11a = sns.barplot(\n        ax=axes[1,1],\n        x=car_data_df.upload_month.loc[car_data_df['brand']=='MERCEDES-BENZ'],\n        y=car_data_df.price.loc[car_data_df['brand']=='MERCEDES-BENZ'],\n        palette = \"Greens\",\n        errcolor = '#000000',\n        capsize = 0.2)\n\nax11a.set_xlabel('Month', fontsize=15.0)\nax11a.set_ylabel('Price (in million HUF)', fontsize=15.0)\nax11a.set_title('MERCEDES-BENZ')\n\n#secondary axis; lineplot\nax11b = ax11a.twinx()  #creating the secondary y-axis for the lineplot; subplot[1,1]\nax11b = sns.lineplot(\n        x=car_data_df_grouped.upload_month.loc[car_data_df_grouped['brand']=='MERCEDES-BENZ'],\n        y=car_data_df_grouped.price.loc[car_data_df_grouped['brand']=='MERCEDES-BENZ'],\n        linewidth = 0,\n        color = '#000000',\n        marker = 'o',\n        markersize = 15.0,\n        markeredgecolor = '#000000',\n        markeredgewidth = 3.0)\n\nax11b.set_ylabel('Total number of advertisements (count)', fontsize=15.0)\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\nfig.savefig('month_price_fig1.png')","2a7c6748":"fig2, axes2 = plt.subplots(2,figsize = (25,20), sharex = True)  #initialize the figure and axes\nfig2.subplots_adjust(hspace = 0.01)  #reducing the space between the subplots\nsns.set(style = 'darkgrid')  #modifying the style\n\n#visualization parameters\npalette = {'AUDI':'#BBC400', 'BMW':'#0068C4', 'MERCEDES-BENZ':'#000000'}\nbmw_patch = mpatches.Patch(color='#0068C4', label='BMW')\naudi_patch = mpatches.Patch(color='#BBC400', label='AUDI')\nmerc_patch = mpatches.Patch(color='#000000', label='MERCEDES-BENZ')\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n#creating the lineplot; subplot[0]\nax00 = sns.lineplot(\n                x=car_data_df_grouped.upload_month,\n                y=car_data_df_grouped.price,\n                hue = car_data_df_grouped.brand,\n                palette = palette,\n                linewidth = 2.5,\n                ax=axes2[0])\n\nax00.set_ylabel('Count of advertisements', fontsize = 20.0)\nax00.tick_params(axis='y', labelsize=15.0)\n\nax00.legend(handles=[bmw_patch, audi_patch, merc_patch], title = 'Brand', fontsize=20.0)  #creating the legend manually\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\n#creating the height values of the stacked bars\ntop_bmw = car_data_df_grouped.price.loc[car_data_df_grouped['brand']=='BMW'].copy()\ntop_bmw.reset_index(drop=True, inplace=True)\n\ntop_audi = car_data_df_grouped.price.loc[car_data_df_grouped['brand']=='AUDI'].copy()\ntop_audi.reset_index(drop=True, inplace=True)\n\ntop_merc = car_data_df_grouped.price.loc[car_data_df_grouped['brand']=='MERCEDES-BENZ'].copy()\ntop_merc.reset_index(drop=True, inplace=True)\n\n#creating the lineplot; subplot[1]\nax01 = sns.barplot(\n                x=car_data_df_grouped.upload_month.loc[car_data_df_grouped['brand']=='MERCEDES-BENZ'].reset_index(drop=True),\n                y=top_bmw + top_audi + top_merc,\n                color = '#000000')\n\nax01 = sns.barplot(\n                x=car_data_df_grouped.upload_month.loc[car_data_df_grouped['brand']=='AUDI'].reset_index(drop=True),\n                y=top_bmw + top_audi,\n                color = '#BBC400')\n\nax01 = sns.barplot(\n                x=car_data_df_grouped.upload_month.loc[car_data_df_grouped['brand']=='BMW'].reset_index(drop=True),\n                y=top_bmw,\n                color = '#0068C4')\n\n#creating the data labels for the columns\nfor month in np.sort(car_data_df_grouped.upload_month.unique()):\n    month=int(month)\n    plt.text(\n        int(month-1)-0.1,\n        int(top_bmw.iloc[month-1] + top_audi.iloc[month-1] + top_merc.iloc[month-1]) +10,\n        str(top_bmw.iloc[month-1] + top_audi.iloc[month-1] + top_merc.iloc[month-1]),\n        fontsize = 'large',\n        fontstyle = 'normal')\n\n\nax01.set_ylabel('Count of advertisements', fontsize = 20.0)\nax01.tick_params(axis='y', labelsize=15.0)\n\nax01.set_xlabel('Month', fontsize = 15.0)\nax01.tick_params(axis='x', labelsize=15.0)\n\nax01.legend(handles=[bmw_patch, audi_patch, merc_patch], title = 'Brand', fontsize=20.0) #creating the legend manually\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\nfig2.savefig(\"month_count_fig2.png\")","b6675196":"#trim the extreme values from the dataset\n#removing rows with price less than 100 000 HUFs, more than 20 000 000 HUFs and milage less than 1500 kms and higher than 400 000 kms\ncar_data_df_trimmed = car_data_df.copy().drop(car_data_df.loc[(car_data_df.mileage>400000)|(car_data_df.mileage<1500)|(car_data_df.price<100000)|(car_data_df.price>20000000)].index, inplace = False)\n\nfig3, ax3 = plt.subplots(1, figsize = (25,20))\nax3= sns.scatterplot(\n            x=car_data_df_trimmed.price,\n            y=car_data_df_trimmed.mileage,\n            alpha = 0.2,\n            hue = car_data_df_trimmed.brand,\n            palette = {'AUDI':'#BBC400','BMW':'#0068C4','MERCEDES-BENZ':'#000000'})\n\nax3.ticklabel_format(style='plain', axis='y')  #y-axis scientific notation turned off\nax3.tick_params(axis='y', labelsize=20.0)\nax3.set_ylabel('Mileage', fontsize = 25.0)\n\nax3.ticklabel_format(style='sci', axis='x', scilimits=(6,6))  #x-axis scientific notation turned off\nax3.tick_params(axis='x', labelsize=20.0, labelrotation=45)\nax3.set_xlabel('Price (in million HUF)', fontsize = 25.0)\n\nax3.legend(handles=[bmw_patch, audi_patch, merc_patch], title = 'Brand', fontsize=20.0)\n\nfig3.savefig('mileage_price_fig3.png')\n","1c12b2d5":"fig4, ax4 = plt.subplots(2, figsize = (25,20), sharex=False)\nax00 = sns.distplot(\n                a=car_data_df.price.loc[(car_data_df.brand=='AUDI')],\n                bins=100,\n                color = '#BBC400',\n                hist=True,\n                kde=False,\n                kde_kws={'shade': True, 'linewidth': 3},\n                ax=ax4[0])\nax00 = sns.distplot(\n                a=car_data_df.price.loc[(car_data_df.brand=='BMW')],\n                bins=100,\n                color = '#0068C4',\n                hist=True,\n                kde=False,\n                kde_kws={'shade': True, 'linewidth': 3},\n                ax=ax4[0])\n\nax00 = sns.distplot(\n                a=car_data_df.price.loc[(car_data_df.brand=='MERCEDES-BENZ')],\n                bins=100,\n                color = '#000000',\n                hist=True,\n                kde=False,\n                kde_kws={'shade': True, 'linewidth': 3},\n                ax=ax4[0])\n\nax4[0].ticklabel_format(style='plain', axis='y')\nax4[0].tick_params(axis='y', labelsize=20.0)\nax4[0].set_ylabel('Count of advertisements', fontsize = 25.0)\n\nax4[0].ticklabel_format(style='sci', axis='x', scilimits=(6,6))\nax4[0].tick_params(axis='x', labelsize=20.0, labelrotation=45)\nax4[0].set_xlabel('Price (in million HUF)', fontsize = 25.0)\n\nax4[0].legend(handles=[bmw_patch, audi_patch, merc_patch], title = 'Brand', fontsize=20.0)\n\n\"\"\"--------------------------------------------------------------------------\"\"\"\n\ncar_data_df_price_trimmed = car_data_df.copy().drop(car_data_df.loc[(car_data_df.price<100000)|(car_data_df.price>20000000)].index, inplace = False)\n\nax01 = sns.distplot(\n                a=car_data_df_price_trimmed.price.loc[(car_data_df_price_trimmed.brand=='AUDI')],\n                bins=100,\n                color = '#BBC400',\n                hist=True,\n                kde=False,\n                kde_kws={'shade': True, 'linewidth': 3},\n                ax=ax4[1])\nax01 = sns.distplot(\n                a=car_data_df_price_trimmed.price.loc[(car_data_df_price_trimmed.brand=='BMW')],\n                bins=100,\n                color = '#0068C4',\n                hist=True,\n                kde=False,\n                kde_kws={'shade': True, 'linewidth': 3},\n                ax=ax4[1])\n\nax01 = sns.distplot(\n                a=car_data_df_price_trimmed.price.loc[(car_data_df_price_trimmed.brand=='MERCEDES-BENZ')],\n                bins=100,\n                color = '#000000',\n                hist=True,\n                kde=False,\n                kde_kws={'shade': True, 'linewidth': 3},\n                ax=ax4[1])\n\nax4[1].ticklabel_format(style='plain', axis='y')  #y-axis scientific notation turned off\nax4[1].tick_params(axis='y', labelsize=20.0)\nax4[1].set_ylabel('Count of advertisements', fontsize = 25.0)\n\nax4[1].ticklabel_format(style='sci', axis='x', scilimits=(6,6))  #x-axis scientific notation turned off\nax4[1].tick_params(axis='x', labelsize=20.0, labelrotation=45)\nax4[1].set_xlabel('Price (in million HUF); trimmed price: 100 000< price < 20 000 000', fontsize = 25.0)\n#ax4[1].xaxis.set_major_locator(ticker.MaxNLocator(30))\n#ax4[1].xaxis.set_minor_locator(ticker.MaxNLocator(30))\n\nax4[1].legend(handles=[bmw_patch, audi_patch, merc_patch], title = 'Brand', fontsize=20.0)\n\nfig4.savefig('price_dist_fig4.png')","c2a5e0c6":"fig5, ax5 = plt.subplots(1, figsize = (25,20))\n\nax00=sns.boxplot(\n                x='upload_month',\n                y='price',\n                data=car_data_df,\n                hue = 'brand',\n                whis=[10, 90],\n                sym=\"\",\n                palette = {'AUDI':'#BBC400','BMW':'#0068C4','MERCEDES-BENZ':'#FFFFFF'},\n                )\n\nax5.ticklabel_format(style='sci', axis='y', scilimits=(6,6))  #y-axis scientific notation turned off\nax5.tick_params(axis='y', labelsize=20.0)\nax5.set_ylabel('Price in million HUF (from 10th to 90th percentiles)', fontsize = 25.0)\n\n\nax5.tick_params(axis='x', labelsize=20.0)\nax5.set_xlabel('Month', fontsize = 25.0)\n\nmerc_patch = mpatches.Patch(color='#FFFFFF', label='MERCEDES-BENZ')\n\nax5.legend(handles=[bmw_patch, audi_patch, merc_patch], title = 'Brand', fontsize=20.0)\n\nfig5.savefig('boxplot_fig5.png')","951ea376":"# Data_query\n\nI have only queried basic information about the dataset:\n* brand\n* upload date \/ only upload month had been loaded into the pandas DF\n* price of the advertisement\n* mileage of the car\n\nThe resulting df has 7597 rows, basic information are being printed out","f8ec46df":"# Seaborn.Distplot\n\nAs a next plot I wanted to examine the distribution of the prices, so I've used seaborn's distplot with a 100 bins. I've also created a subplot, with the previously trimmed dataset. I've plotted all the brands on the same charts, so I needed to create three plots on top of each other for both of the charts.","53219f30":"# Seaborn.Lineplot_&_Seaborn.Barplot\n\nI wanted to visualize the distribuiton of the published advertisements by brands in order to idenitfy if there is a significant difference amongst the brands all in seaborn. For this examination I've used a lineplot and a stacked barchart. For a better chart I've also used the 'sharex' parameter for the subplots, so the x-axis is commonly used by the two charts.  \nThe challneges:\n* Lineplot\n    * used my brand separated grouped df, so I had the counts of the advertisements by brand in every month\n    * customizing the legend manually -> I used the patches object of the matplotlib\n* Stacked Barchart\n    * seaborn does not support the 'stacked' parameter (as far as I know), so I had to figure out a different solution\n        * I have created three barcharts for every month and I've displayed them on the top of each other\n        * the heights of the bars are the result of the month-by-month summary of the advertisement, e.g. I wanted to show the Mercedes advertisement on the top, so the bottom of this bar is 'bmw+audi' and the top is 'bmw+audi+mercedes'; rule of thumb:\n            * bmw = bmw\n            * audi = bmw + audi\n            * mercedes = bmw + audi + mercedes\n        * for each month I've created a reindexed (from zero) Series for every brand\n    * Also wanted to show the total value of stacked bars\n        * 'plt.text' is serving for this customization: x and y coordinates had to be provided and the text itself\n        * I have iterated over the unique month values (x coordinate), and for all of them I've selected the corresponding count value (y coordinate and text)\n        * for some reason I had to decrease the month value by 1, I'm guessing the x-axis has zero indexing, with reduced month it was fitting perfectly","0443063a":"# Seaborn.Scatterplot\n\nThe next chart is a scatterplot, which is showing the relation between the price of a car (x-axis) and the milage  it ran (y-axis). For a better view, I have trimmed the outlier values of the dataset, so all the advertisements, which:  \n* price is below 100 000 HUF (about 350 Euros) \n* price is higher than 20 000 000 HUFs (about 65 000 Euros)\n* mileage less than 1500 kms\n* mileage higher than 400 000 kms  \n\nhad been eliminated! To achieve this I've used pandas 'drop' and '.loc' methods with multiple conditions.  \nPloting the dataset was quite easy, all I had to do as an extra-task was to provide the coloring palette, which I've used in the previous charts.  \nIt was a little bit more complicated to properly format the tick values on the axes, but 'ticklabel_format' method and it's 'style' parameter did the job! It is also possible to determine the number of digits by the 'scilimits' of the same method. For legend I've reused the previous patchscheme.\n\nIt is easy to identify some 'columns' in the pricing of the cars regardless of it's milage or brand.","8ea38ef1":"# Seaborn.Boxplot\n\nThe most compact plotting technique, a boxplot is representing many information and it is quite easy to create:  \n* For every month I've created three boxplots for the brands\n* I set the whiskers to represent the data from the 10th to the 90th percentile\n* I've turned off the outlier values\n* I've used a slightly modified color palette and legend patches  \n\nWhat should be recognised is the mean value is not varying greatly in any month amongst the brands, so in a certain month the mean price of the advertisement is almost a same regardless if it is a BMW, Audi or Mercedes.","541efb30":"# Seaborn.Barplot\n\nThe first figure is containing four subplots:\n* Mean price (y-axis) \/ Month (x-axis); Count of advertisements (secondary y-axis) \/ Month (x-axis)\n    * subplot 1: all three brands combined\n    * subplot 2: Audi\n    * subplot 3: BMW\n    * subplot 4: Mercedes-Benz\n\nThe challenges in order to create this plot:\n* creating the figure frame and determining the subplot where the chart should be plotted\n    * 'ax' paramter was serving well\n    * pandas' '.loc' method was handy for the data selection\n* creating the secondary y-axis\n    * 'ax.twinx()' had became useful\n* plot the count of the advertisements rather than sum\n    * creating the grouped copy of the dataframe (all brands combined and separately by brands) \/ 'df.groupby' method\n    * created a lineplot\n    \n\nThe key takeaways:\n* I have run the web scraping more frequently in certain periods of the year\n* The lower amount of observation is resulting higher standard deviation ","9cdda279":"# Seaborn plotting notebook\n\nWith this notebook I am going to demonstrate some basic capabilities of the **Seaborn Python** module. For the data visualizaiton I've used my own dataset, that I've gathered in a web scraping project. Further details about the web scraping could be found on [GitHub](https:\/\/github.com\/atttilakiss\/Project-HaHU_KA).  \nFor the analysis I've queried the some basic details of the \"holy trinity\" (at least in Hungary) advertisements: Audi, BMW, Mercedes-Benz\n\n## Table of contents\n[Modules](#Modules)  \n[Data_query](#Data_query)  \n[Seaborn.Barplot](#Seaborn.Barplot)  \n[Seaborn.Lineplot & Seaborn.Barplot](#Seaborn.Lineplot_&_Seaborn.Barplot)  \n[Seaborn.Scatterplot](#Seaborn.Scatterplot)  \n[Seaborn.Distplot](#Seaborn.Distplot)  \n[Seaborn.Boxplot](#Seaborn.Boxplot)\n\n","595e0ab2":"# Modules\n\nThe following modules were used in order to achieve the data plotting"}}