{"cell_type":{"0bf3e307":"code","95eec9a3":"code","a1c88a69":"code","d85d44de":"code","5cd68900":"code","f9eaa955":"code","d4ca1b50":"code","780f27d1":"code","f63b0688":"code","7333cf31":"code","8fa888f5":"code","b6f06c5a":"code","e950b7ab":"code","50035eef":"code","516fde94":"code","5a30a611":"code","f090c35e":"code","9b4541b7":"code","d557c089":"code","c4cc7556":"code","34bcc842":"code","bc944434":"code","d36b4b66":"code","646ad284":"code","c687ef43":"code","038b809a":"code","0fc24541":"code","ec7c289f":"code","2f48ef30":"code","ff66df74":"markdown","e52cf022":"markdown","e171c178":"markdown","1d5c6e92":"markdown","203e1ab1":"markdown","b00193c1":"markdown","aa78ef31":"markdown","828e2a07":"markdown","e51bbbcd":"markdown","60036126":"markdown","6c6f3c8c":"markdown"},"source":{"0bf3e307":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom tqdm import tqdm\nfrom sklearn.svm import SVC\nfrom keras.models import Sequential\nfrom keras.layers.recurrent import LSTM, GRU\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.embeddings import Embedding\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils import np_utils\nfrom sklearn import preprocessing, decomposition, model_selection, metrics, pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom keras.layers import GlobalMaxPooling1D, Conv1D, MaxPooling1D, Flatten, Bidirectional, SpatialDropout1D\nfrom keras.preprocessing import sequence, text\nfrom keras.callbacks import EarlyStopping\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nimport json\n\nstop_words = stopwords.words('english')","95eec9a3":"train = pd.read_json('..\/input\/whats-cooking-kernels-only\/train.json')\ntest = pd.read_json('..\/input\/whats-cooking-kernels-only\/test.json')\nsub = pd.read_csv('..\/input\/whats-cooking-kernels-only\/sample_submission.csv')","a1c88a69":"type(train)","d85d44de":"train.head()","5cd68900":"test.head()","f9eaa955":"def multiclass_logloss(actual, predicted, eps=1e-15):\n    \"\"\"Multi class version of Logarithmic Loss metric.\n    :param actual: Array containing the actual target classes\n    :param predicted: Matrix with class predictions, one probability per class\n    \"\"\"\n    # Convert 'actual' to a binary array if it's not already:\n    if len(actual.shape) == 1:\n        actual2 = np.zeros((actual.shape[0], predicted.shape[1]))\n        for i, val in enumerate(actual):\n            actual2[i, val] = 1\n        actual = actual2\n\n    clip = np.clip(predicted, eps, 1 - eps)\n    rows = actual.shape[0]\n    vsota = np.sum(actual * np.log(clip))\n    return -1.0 \/ rows * vsota","d4ca1b50":"lbl_enc = preprocessing.LabelEncoder()\ny = lbl_enc.fit_transform(train.cuisine.values)","780f27d1":"y","f63b0688":"type(train.ingredients)","7333cf31":"train.ingredients.str.join(' ').head()","8fa888f5":"xtrain, xvalid, ytrain, yvalid = train_test_split(train.ingredients.str.join(' '), y, \n                                                  stratify=y, \n                                                  random_state=42, \n                                                  test_size=0.1, shuffle=True)","b6f06c5a":"xtrain.head()","e950b7ab":"ytrain","50035eef":"print (xtrain.shape)\nprint (xvalid.shape)","516fde94":"# Always start with these features. They work (almost) everytime!\n# tfv = TfidfVectorizer(min_df=3,  max_features=None, \n#             strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n#             ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1,\n#             stop_words = 'english')\n\ntfv = TfidfVectorizer(max_features=None, \n            strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1,\n            )\n\n# Fitting TF-IDF to both training and test sets (semi-supervised learning)\ntfv.fit(list(xtrain) + list(xvalid))\nxtrain_tfv =  tfv.transform(xtrain) \nxvalid_tfv = tfv.transform(xvalid)","5a30a611":"# Fitting a simple Logistic Regression on TFIDF\nclf = LogisticRegression(C=1.0)\nclf.fit(xtrain_tfv, ytrain)\npredictions = clf.predict_proba(xvalid_tfv)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","f090c35e":"ctv = CountVectorizer(analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3), stop_words = 'english')\n\n# Fitting Count Vectorizer to both training and test sets (semi-supervised learning)\nctv.fit(list(xtrain) + list(xvalid))\nxtrain_ctv =  ctv.transform(xtrain) \nxvalid_ctv = ctv.transform(xvalid)","9b4541b7":"xtrain_ctv","d557c089":"# Fitting a simple Logistic Regression on Counts\nclf = LogisticRegression(C=1.0)\nclf.fit(xtrain_ctv, ytrain)\npredictions = clf.predict_proba(xvalid_ctv)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","c4cc7556":"# Fitting a simple Naive Bayes on TFIDF\nclf = MultinomialNB()\nclf.fit(xtrain_tfv, ytrain)\npredictions = clf.predict_proba(xvalid_tfv)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","34bcc842":"# load the GloVe vectors in a dictionary:\n\nembeddings_index = {}\nf = open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.200d.txt')","bc944434":"f","d36b4b66":"for line in tqdm(f):\n    values = line.split()\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","646ad284":"# this function creates a normalized vector for the whole sentence\ndef sent2vec(s):\n    words = str(s).lower()\n    words = word_tokenize(words)\n    words = [w for w in words if not w in stop_words]\n    words = [w for w in words if w.isalpha()]\n    M = []\n    for w in words:\n        try:\n            M.append(embeddings_index[w])\n        except:\n            continue\n    M = np.array(M)\n    v = M.sum(axis=0)\n    if type(v) != np.ndarray:\n        return np.zeros(300)\n    return v \/ np.sqrt((v ** 2).sum())","c687ef43":"# create sentence vectors using the above function for training and validation set\nxtrain_glove = [sent2vec(x) for x in tqdm(xtrain)]\nxvalid_glove = [sent2vec(x) for x in tqdm(xvalid)]","038b809a":"xtrain_glove = np.array(xtrain_glove)\nxvalid_glove = np.array(xvalid_glove)","0fc24541":"xtrain_glove","ec7c289f":"# Fitting a simple xgboost on glove features\nclf = xgb.XGBClassifier(nthread=10, silent=False)\nclf.fit(xtrain_glove, ytrain)\npredictions = clf.predict_proba(xvalid_glove)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","2f48ef30":"# Fitting a simple xgboost on glove features\nclf = xgb.XGBClassifier(max_depth=7, n_estimators=200, colsample_bytree=0.8, \n                        subsample=0.8, nthread=10, learning_rate=0.1, silent=False)\nclf.fit(xtrain_glove, ytrain)\npredictions = clf.predict_proba(xvalid_glove)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","ff66df74":"I am trying to understand the kernel of Abhishek in Spooky Author Competition\nThe Orginal Kernel is [Approaching (Almost) Any NLP Problem on Kaggle\n](https:\/\/www.kaggle.com\/abhishek\/approaching-almost-any-nlp-problem-on-kaggle). Therefore most of the code is from that Kernel\n","e52cf022":"## Count Vectorizer and LR","e171c178":"## TF -IDF and LR","1d5c6e92":"# Glove Vectors","203e1ab1":"Let's start building our very first model.\n\nOur very first model is a simple TF-IDF (Term Frequency - Inverse Document Frequency) followed by a simple Logistic Regression.","b00193c1":"We use the LabelEncoder from scikit-learn to convert text labels to integers, 0, 1 2","aa78ef31":"# Metric Code","828e2a07":"# XGBoost","e51bbbcd":"## Multinomial Naive Bayes","60036126":"# Building Basic Models","6c6f3c8c":"Before going further it is important that we split the data into training and validation sets. We can do it using train_test_split from the model_selection module of scikit-learn."}}