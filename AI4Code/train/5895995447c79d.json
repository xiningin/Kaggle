{"cell_type":{"83438b6c":"code","b6a88215":"code","a0f73021":"code","c6c72ed2":"code","00b4ac3b":"code","a84a8e8f":"code","ad8f5c5c":"code","bed8ca8c":"code","5976998b":"code","940bfcf6":"code","65723496":"code","24ada6aa":"code","73b5dc8b":"code","6ce2b3b1":"markdown","73fc1d91":"markdown","5082966e":"markdown","5aa2b9b1":"markdown","065eb594":"markdown","66afe243":"markdown","bd3b4af6":"markdown","e661eedc":"markdown","83bf3a1f":"markdown","86d107c7":"markdown","14cbe09f":"markdown","41f938f5":"markdown","43c7c37f":"markdown","cfdab8a0":"markdown"},"source":{"83438b6c":"import numpy as np \nimport pandas as pd \nfrom scipy import stats\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b6a88215":"train_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv\", low_memory=False)\ntest_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv\", low_memory=False)\nsample_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/sample_submission.csv\", low_memory=False)\n\n\n#print(train_data.head())\ntrain_data.head()","a0f73021":"# train data set missing data\nmissingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)\n\n# test data set missing data\nmissingDataTest = test_data.isna().sum()\nprint(missingDataTest)","c6c72ed2":"# replace missing train data\ntrain_data['MMWR Week'].fillna(method = 'pad', inplace = True)\ntrain_data['COVID-19 Deaths'].fillna(method = 'pad', inplace = True)\ntrain_data['Total Deaths'].fillna(method = 'pad', inplace = True)\n\n# let's drop the Month, Week-Ending Date, and Footnote data because it isn't going to be used in the models\ntrain_data = train_data.drop('Month', axis=1)\ntrain_data = train_data.drop('Week-Ending Date', axis=1)\ntrain_data = train_data.drop('Footnote', axis=1)\n\ntest_data = test_data.drop('Month', axis=1)\n\n# check if the data set is fixed\nmissingDataTrain = train_data.isna().sum()\nmissingDataTest = test_data.isna().sum()\nprint(missingDataTrain)\nprint(missingDataTest)","00b4ac3b":"# Create a new dataframe with only the data we're going to need.\ndf = pd.DataFrame({'Start Date' : train_data['Start Date'], 'COVID-19 Deaths': train_data['COVID-19 Deaths'], 'MMWR Week': train_data['MMWR Week'], 'Total Deaths': train_data['Total Deaths'], 'Race and Hispanic Origin Group': train_data['Race and Hispanic Origin Group'], 'Age Group': train_data['Age Group']})\n\n# calculate mean and std\nmean = df['COVID-19 Deaths'].mean()\nstd = df['COVID-19 Deaths'].std()\n\n# use mean and std to create an upper and lower bound within 6.5 stds to remove outliers (number of stds was found through trial and error aswell as research)\ntrain_data = df[(df['COVID-19 Deaths'] < mean + std*6.5) & (df['COVID-19 Deaths'] > mean - std*6.5)]\n\nprint(train_data.describe())","a84a8e8f":"# create X and y\nfeatures = ['Age Group', 'Race and Hispanic Origin Group', 'MMWR Week', 'Total Deaths']\nX = pd.get_dummies(train_data[features])\ny = train_data['COVID-19 Deaths']","ad8f5c5c":"# create a column 'Time' which is the 'Start Date' column represented in seconds\ntrain_data['Start Date'] = pd.to_datetime(train_data['Start Date'], errors='coerce')\nX['Time'] = (train_data['Start Date'] - train_data['Start Date'].min()).dt.total_seconds()\n\n# do it to test data as well\ntest_data['Start Date'] = pd.to_datetime(test_data['Start Date'], errors='coerce')","bed8ca8c":"# create train and test splits\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.40, random_state = 42)","5976998b":"from sklearn.linear_model import LinearRegression\n\nols = LinearRegression().fit(X_train, y_train)\n\npredictions = ols.predict(X_test)\n\n# create a data frame to run describe() on\ndf = pd.DataFrame({'Actual': y_test, 'Predicted': predictions})\nprint(df.describe())\n\n# cross validation\nscores = cross_val_score(ols, X_test, y_test, cv=5)\n# print highest out of all calculated scores\nprint(scores)\nprint(scores.max())","940bfcf6":"from sklearn.linear_model import Ridge\n\nridge = Ridge(normalize=True).fit(X_train, y_train)\n\npredictions = ridge.predict(X_test)\n\n# create a data frame to run describe() on\ndf = pd.DataFrame({'Actual': y_test, 'Predicted': predictions})\nprint(df.describe())\n\n# cross validation\nscores = cross_val_score(ridge, X_test, y_test, cv=5)\n# print highest out of all calculated scores\nprint(scores)\nprint(scores.max())","65723496":"from sklearn.linear_model import Lasso\n\nlasso = Lasso().fit(X, y)\n\npredictions = lasso.predict(X_test)\n\n# create a data frame to run describe() on\ndf = pd.DataFrame({'Actual': y_test, 'Predicted': predictions})\nprint(df.describe())\n\n# cross validation\nscores = cross_val_score(lasso, X_test, y_test, cv=5)\n# print highest out of all calculated scores\nprint(scores)\nprint(scores.max())","24ada6aa":"from sklearn.linear_model import ElasticNet\n\nelastic = ElasticNet().fit(X, y)\n\npredictions = elastic.predict(X_test)\n\n# create a data frame to run describe() on\ndf = pd.DataFrame({'Actual': y_test, 'Predicted': predictions})\nprint(df.describe())\n\n# cross validation\nscores = cross_val_score(elastic, X_test, y_test, cv=5)\n# print highest out of all calculated scores\nprint(scores)\nprint(scores.max())","73b5dc8b":"# generate X_test\nX_test = pd.get_dummies(test_data[features])\n# create new col 'Time' to match the feature set in the training model\nX_test['Time'] = (test_data['Start Date'] - test_data['Start Date'].min()).dt.total_seconds()\n\npredictions = ols.predict(X_test)\n# round all COVID-19 Death predictions to 0 if they're negative\npredictions[predictions < 0] = 0\npredictions = np.around(predictions, 0)\n\noutput = pd.DataFrame({'id': sample_data.id, 'COVID-19 Deaths': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","6ce2b3b1":"**Building model**","73fc1d91":"**Building model and evalating model**","5082966e":"# Ridge Regression","5aa2b9b1":"# Clean up data \/ Outliers","065eb594":"# Load data ","66afe243":"**Ordinary Least Squares(OLS) scored the highest overall so the final submission will be generated using it**","bd3b4af6":"**Building and evaluating model**","e661eedc":"# Elastic Net Regression","83bf3a1f":"# Lasso Regression","86d107c7":"# Setting up data \/ Feature Engineering","14cbe09f":"# Missing data","41f938f5":"# Ordinary Least Squares","43c7c37f":"**Building and evaluating model**","cfdab8a0":"# Submission"}}