{"cell_type":{"317c33db":"code","a95826fa":"code","d6c56cb7":"code","72537394":"code","763c74df":"code","c7f44a18":"code","eda4cf7b":"code","ef203c54":"code","1ea2fc2e":"code","a963d37a":"code","a768779e":"code","b9246ec4":"code","f298c833":"code","3c537a0b":"code","2c647250":"code","57a6e9e6":"code","fbfdcd97":"code","78784046":"code","b855036a":"code","d171036f":"code","53e19045":"code","20aa2edb":"code","da9c61e0":"code","c9d4b425":"code","38863a02":"code","15d1a7ad":"code","f2b699ee":"code","2e3cc1e2":"code","2668a05a":"code","3e764111":"code","77b91f6f":"code","9fcf269c":"code","755e1438":"code","497ba98b":"code","0e68abe8":"code","bcca8426":"markdown","ff999654":"markdown","fced9d3c":"markdown"},"source":{"317c33db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a95826fa":"import numpy as np\nimport pandas as pd\nimport datetime \nimport seaborn as sns\nimport plotly.offline as py\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go","d6c56cb7":"#Load the data\n\nweather_train = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/weather_train.csv\")\ntrain_data = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/train.csv\")\nbuilding_metadata = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/building_metadata.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/test.csv\")\nweather_test = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/weather_test.csv\")","72537394":"weather_train.head()","763c74df":"train_data.head()","c7f44a18":"building_metadata.head()","eda4cf7b":"train_data.dtypes","ef203c54":"train_data.memory_usage()","1ea2fc2e":"#Reduce Memory Usuage \ndef reduce_mm_usage(df, verbose=True):\n    type_list = ['int16','int32','int64','float16','float32','float64']\n    \n    print(\"Inital memory usage in KB\", df.memory_usage().sum()\/1024)\n    initial_mm = df.memory_usage().sum()\/1024\n    for col in df.columns:\n        if df[col].dtypes in type_list:\n            \n            col_min = df[col].min()\n            col_max = df[col].max()\n            \n            if str(df[col].dtypes)[:3]==\"int\":\n                \n                if col_min > np.iinfo(np.int8).min and col_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif col_min > np.iinfo(np.int16).min and col_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif col_min > np.iinfo(np.int32).min and col_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif col_min > np.iinfo(np.int64).min and col_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n                    \n            else:\n                \n                if col_min > np.finfo(np.float16).min and col_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif col_min > np.finfo(np.float32).min and col_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else: #col_min > np.finfo(np.float64).min and col_max < np.finfo(np.float64).max:\n                    df[col] = df[col].astype(np.float64)\n    \n    end_mm = df.memory_usage().sum()\/1024\n    print(\"after memory usuage in KB\", df.memory_usage().sum()\/1024)\n    print(\"percetage reduction in memory\", ( (initial_mm-end_mm)\/initial_mm) )\n    return df","a963d37a":"train_data = reduce_mm_usage(train_data)","a768779e":"test_data = reduce_mm_usage(test_data)","b9246ec4":"building_metadata = reduce_mm_usage(building_metadata)","f298c833":"weather_train = reduce_mm_usage(weather_train)","3c537a0b":"weather_test = reduce_mm_usage(weather_test)","2c647250":"#null values \ntrain_data.isnull().sum()","57a6e9e6":"train_data.timestamp = pd.to_datetime(train_data.timestamp, format='%Y-%m-%d %H:%M:%S')\ntrain_data = train_data.set_index('timestamp')","fbfdcd97":"#groupby buliding_id and meter_id, roll on monthly data over summation of meter reading \n\ntrain_data = train_data.groupby([pd.Grouper(freq='M'),'building_id','meter'], as_index=True)['meter_reading'].sum().reset_index()","78784046":"train_data.head()","b855036a":"train_data.timestamp = train_data.timestamp.dt.strftime(\"%Y-%m-%d\")","d171036f":"plt.figure(figsize=(18,12))\nlm = sns.scatterplot(x='timestamp',y=\"meter_reading\",data=train_data, hue='meter', palette='tab20b',s=100)","53e19045":"#Distribution of target variable that is meter_reading \nplt.figure(figsize=(18,12))\nsns.distplot(train_data.meter_reading)","20aa2edb":"#Missing Data Analysis\n\ndef miss_data(df):\n    x = ['column_name','missing_data', 'missing_in_percentage']\n    missing_data = pd.DataFrame(columns=x)\n    columns = df.columns\n    for col in columns:\n        icolumn_name = col\n        imissing_data = df[col].isnull().sum()\n        imissing_in_percentage = (df[col].isnull().sum()\/df[col].shape[0])*100\n        \n        missing_data.loc[len(missing_data)] = [icolumn_name, imissing_data, imissing_in_percentage]\n    print(missing_data)\n        ","da9c61e0":"miss_data(train_data)","c9d4b425":"miss_data(test_data)","38863a02":"miss_data(weather_train)","15d1a7ad":"miss_data(weather_test)","f2b699ee":"miss_data(building_metadata)","2e3cc1e2":"train_data.corr()['meter_reading'].sort_values()","2668a05a":"sns.heatmap(train_data.corr(), cmap=\"rainbow\", vmin=-0.01, vmax=1)","3e764111":"def plot_dist(df, column):\n    plt.figure(figsize=(18,12))\n    ax = sns.distplot(df[column].dropna())\n    ax.set_title(column+\" Distribution\", fontsize=16)\n    plt.xlabel(column, fontsize=12)\n    #plt.ylabel(\"distribution\", fontsize=12)\n    plt.show()","77b91f6f":"plot_dist(train_data, \"meter_reading\")","9fcf269c":"plot_dist(weather_train, \"air_temperature\")","755e1438":"weather_train.dtypes","497ba98b":"plot_dist(weather_train, \"dew_temperature\")","0e68abe8":"plot_dist(weather_train, \"sea_level_pressure\")","bcca8426":"*Now Check the Correlation of target variable with others:::::::*","ff999654":"*Reduce the memory Usage \nreduce the size of Integer to min size used in the column:*","fced9d3c":"Check the distribution of variable in training data (train_data, weather_data) ::::: "}}