{"cell_type":{"e9f0379f":"code","b88e61b5":"code","93ef4ef2":"code","525a06e8":"code","aa0db960":"code","f46069fa":"code","96fb5cbd":"code","cc935c3c":"code","5a301f89":"code","274b5d2f":"code","60914b7f":"code","a60d6f13":"code","58ba0a2e":"code","cb84edd5":"code","3b3f8c6a":"code","023534f6":"code","2a9e294c":"code","a38279a5":"code","a289fef3":"markdown","850fa2ab":"markdown","cb8e07f6":"markdown","2ae91d73":"markdown","4153dcb2":"markdown","2ce8f527":"markdown","2bd40c35":"markdown","e216549c":"markdown","6dc7b19c":"markdown","fbab194f":"markdown","1039ad11":"markdown","b08e4d15":"markdown"},"source":{"e9f0379f":"import pandas as pd, numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics import roc_curve, roc_auc_score","b88e61b5":"train = pd.read_csv('..\/input\/reddit_train.csv',encoding='latin-1')\ntest = pd.read_csv('..\/input\/reddit_test.csv',encoding='latin-1')","93ef4ef2":"train.head()","525a06e8":"train[train.REMOVED==1][['BODY']].iloc[1,0]","aa0db960":"train[train.REMOVED==0][['BODY']].iloc[1,0]","f46069fa":"lens = train.BODY.str.len()\nlens.mean(), lens.std(), lens.max()","96fb5cbd":"lens.hist();","cc935c3c":"train.describe()","5a301f89":"len(train),len(test)","274b5d2f":"import re, string\nre_tok = re.compile(f'([{string.punctuation}\u201c\u201d\u00a8\u00ab\u00bb\u00ae\u00b4\u00b7\u00ba\u00bd\u00be\u00bf\u00a1\u00a7\u00a3\u20a4\u2018\u2019])')\ndef tokenize(s): return re_tok.sub(r' \\1 ', s).split()","60914b7f":"n = train.shape[0]\nvec = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n               min_df=10, max_df=0.5, strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1 )\ntrn_term_doc = vec.fit_transform(train['BODY'])\ntest_term_doc = vec.transform(test['BODY'])","a60d6f13":"trn_term_doc, test_term_doc","58ba0a2e":"def pr(y_i, y):\n    p = x[y==y_i].sum(0)\n    return (p+1) \/ ((y==y_i).sum()+1)","cb84edd5":"x = trn_term_doc\ntest_x = test_term_doc","3b3f8c6a":"def get_mdl(y):\n    y = y.values\n    r = np.log(pr(1,y) \/ pr(0,y))\n    m = LogisticRegression(C=4, dual=True)\n    x_nb = x.multiply(r)\n    return m.fit(x_nb, y), r","023534f6":"preds = np.zeros((len(test), 1))\n\nprint('fitting')\nm,r = get_mdl(train['REMOVED'])\npreds = m.predict_proba(test_x.multiply(r))[:,1]","2a9e294c":"submission = pd.concat([pd.DataFrame(preds), test['REMOVED']], axis=1)\nsubmission.to_csv('submission.csv', index=False)","a38279a5":"roc_auc_score(test['REMOVED'], preds)","a289fef3":"This creates a *sparse matrix* with only a small number of non-zero elements (*stored elements* in the representation  below).","850fa2ab":"There are a few empty comments that we need to get rid of, otherwise sklearn will complain.","cb8e07f6":"## Building the model\n\nWe'll start by creating a *bag of words* representation, as a *term document matrix*. We'll use ngrams, as suggested in the NBSVM paper.","2ae91d73":"It turns out that using TF-IDF gives even better priors than the binarized features used in the paper. I don't think this has been mentioned in any paper before, but it improves leaderboard score from 0.59 to 0.55.","4153dcb2":"Fit a model for one dependent at a time:","2ce8f527":"## Introduction\n\nThis kernel shows how to use NBSVM (Naive Bayes - Support Vector Machine) to create a strong baseline for the [Toxic Comment Classification Challenge](https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge) competition. NBSVM was introduced by Sida Wang and Chris Manning in the paper [Baselines and Bigrams: Simple, Good Sentiment and Topic Classi\ufb01cation](https:\/\/nlp.stanford.edu\/pubs\/sidaw12_simple_sentiment.pdf). In this kernel, we use sklearn's logistic regression, rather than SVM, although in practice the two are nearly identical (sklearn uses the liblinear library behind the scenes).\n\nIf you're not familiar with naive bayes and bag of words matrices, I've made a preview available of one of fast.ai's upcoming *Practical Machine Learning* course videos, which introduces this topic. Here is a link to the section of the video which discusses this: [Naive Bayes video](https:\/\/youtu.be\/37sFIak42Sc?t=3745).","2bd40c35":"## Looking at the data\n\nThe training data contains a row per comment, with an id, the text of the comment, and 6 different labels that we'll try to predict.","e216549c":"The length of the comments varies a lot.","6dc7b19c":"Here's a couple of examples of comments, one toxic, and one with no labels.","fbab194f":"And finally, create the submission file.","1039ad11":"We'll create a list of all the labels to predict, and we'll also create a 'none' label so we can see how many comments have no labels. We can then summarize the dataset.","b08e4d15":"Here's the basic naive bayes feature equation:"}}