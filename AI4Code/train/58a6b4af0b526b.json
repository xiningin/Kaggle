{"cell_type":{"6797923b":"code","f631f849":"code","724e6c59":"code","fd95aa76":"code","984d69c6":"code","8e296841":"code","c73fe823":"code","dd032126":"code","d9c3d07f":"code","43b552bf":"code","2e5a8a54":"code","b0e2c946":"code","28ecf404":"code","a4e6cdc5":"code","bdc31f97":"code","6305b1c4":"code","a364ec9a":"code","093bbab8":"code","9de3cdaa":"code","0c5fd47f":"code","380cb6f4":"code","767410f7":"code","e7a008e3":"code","88ca2414":"code","1d725b86":"code","b0283c2f":"code","d5c931a7":"code","eb1dea5b":"code","c09ab265":"code","abd5ac56":"code","1d09fb2d":"code","f175f41f":"code","ab072127":"code","25d133eb":"code","33763663":"code","07cd6165":"code","861bfe54":"code","37db10fe":"code","f8374ed1":"code","2a5eb18c":"code","d3a8422c":"code","16f8251d":"code","8b94fd08":"code","2cdb6e4a":"code","10bd63be":"code","61818b83":"code","996d3d39":"code","67a862f4":"markdown","e8ff9a5a":"markdown","0f12905b":"markdown","43a6fb76":"markdown","0c4e6818":"markdown","178fdbaa":"markdown","c7fabbc8":"markdown","694f2c12":"markdown","48f7381b":"markdown","6f4fbacf":"markdown","cbf2d4c4":"markdown","8f650b2d":"markdown","31c241a0":"markdown","b4efc4b3":"markdown","0ab1ca2d":"markdown","5e726adf":"markdown","88a88aa0":"markdown","ebfbc9f4":"markdown","bc6c92dc":"markdown","4c5382e0":"markdown","58dd244d":"markdown"},"source":{"6797923b":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\n\n# visualization\nfrom pandas.tools.plotting import scatter_matrix\nfrom matplotlib import pyplot\n%matplotlib inline\n\n# machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis","f631f849":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","724e6c59":"full_test = pd.read_csv('..\/input\/test.csv')","fd95aa76":"train.shape","984d69c6":"train.head()","8e296841":"test.shape","c73fe823":"test.head()","dd032126":"train.columns","d9c3d07f":"print(train.describe())","43b552bf":"train.corr()","2e5a8a54":"train.isnull().sum(axis = 0)","b0e2c946":"test.isnull().sum(axis = 0)","28ecf404":"def mean_age_finder(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","a4e6cdc5":"train['Age'] = train[['Age', 'Pclass']].apply(mean_age_finder, axis = 1)","bdc31f97":"most_frequent_embarked = train['Embarked'].value_counts().index[0]      #Output: 'S'\ntrain['Embarked'].fillna(most_frequent_embarked, inplace = True)","6305b1c4":"train.isnull().sum()","a364ec9a":"del train['Cabin']","093bbab8":"train.isnull().sum()","9de3cdaa":"# Finding the mean age of each passenger class:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize = (12, 8))\nsns.boxplot(x = 'Pclass', y = 'Age', data = test)","0c5fd47f":"def mean_age_finder_test(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 42\n        elif Pclass == 2:\n            return 27\n        else:\n            return 24\n    else:\n        return Age","380cb6f4":"test['Age'] = test[['Age', 'Pclass']].apply(mean_age_finder_test, axis = 1)","767410f7":"test.isnull().sum()","e7a008e3":"#Replacing the missing value of 'Fare' column with mean value:\n\ntest['Fare'].fillna(test['Fare'].mean(), inplace = True)","88ca2414":"del test['Cabin']","1d725b86":"test.isnull().sum()","b0283c2f":"sex = pd.get_dummies(train['Sex'], drop_first = True)\nembarked = pd.get_dummies(train['Embarked'], drop_first = True)","d5c931a7":"train.drop(['Name', 'Sex', 'Ticket', 'Embarked'], axis = 1, inplace = True)\ntrain = pd.concat([train, sex, embarked], axis = 1)","eb1dea5b":"train.head(2)","c09ab265":"sex = pd.get_dummies(test['Sex'], drop_first = True)\nembarked = pd.get_dummies(test['Embarked'], drop_first = True)","abd5ac56":"test.drop(['Name', 'Sex', 'Ticket', 'Embarked'], axis = 1, inplace = True)\ntest = pd.concat([test, sex, embarked], axis = 1)","1d09fb2d":"test.head()","f175f41f":"del train['PassengerId']\ndel test['PassengerId']","ab072127":"del train['Fare']\ndel test['Fare']","25d133eb":"X=train.copy()\ndel X['Survived']\ny=train['Survived']\nX_test=test.copy()\nprint(X.shape)\nprint(y.shape)\nprint(X_test.shape)","33763663":"X.head()","07cd6165":"print(train.groupby('Survived').size())","861bfe54":"X.plot(kind='box',subplots=True,layout=(2,4),sharey=False)\npyplot.show()","37db10fe":"X.hist()\npyplot.show()","f8374ed1":"scatter_matrix(X)\npyplot.show()","2a5eb18c":"print(X.shape)\nprint(y.shape)\nprint(train.shape)","d3a8422c":"X_train ,X_val,y_train,y_val=train_test_split(X,y,test_size=0.20,random_state=7)","16f8251d":"models=[]\nmodels.append(('LR',LogisticRegression()))\nmodels.append(('LDA',LinearDiscriminantAnalysis()))\nmodels.append(('KNN',KNeighborsClassifier()))\nmodels.append(('CART',DecisionTreeClassifier()))\nmodels.append(('NB',GaussianNB()))\nmodels.append(('SVM',SVC()))\n\nresults=[]\nnames=[]\nfor name,model in models:\n    kfold=KFold(n_splits=10,random_state=42)\n    cv_result=cross_val_score(model,X_train,y_train,cv=kfold,scoring='accuracy')\n    results.append(cv_result)\n    names.append(name)\n    msg=\"%s: %f (%f)\" % (name,cv_result.mean(),cv_result.std())\n    print(msg)","8b94fd08":"svm=SVC()\nsvm.fit(X_train,y_train)\n","2cdb6e4a":"linear_svc = LogisticRegression()\nlinear_svc.fit(X_train, y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train,y_train) * 100, 2)\nacc_linear_svc","10bd63be":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train, y_train)\ndtree_predictions = dtree.predict(X_test)\n\ndtree_accuracy = round(dtree.score(X_train, y_train) * 100, 2)\nprint('Decision Tree Model Accuracy: ', dtree_accuracy)","61818b83":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 100)\nrfc.fit(X_train, y_train)\nrfc_predictions = rfc.predict(X_test)\n\nrfc_accuracy = round(rfc.score(X_train, y_train) * 100, 2)\nprint('Random Forest Model Accuracy: ', rfc_accuracy)","996d3d39":"submission = pd.DataFrame({\n        \"PassengerId\": full_test[\"PassengerId\"],\n        \"Survived\": rfc_predictions\n    })\nsubmission.to_csv('submission.csv',index = False)","67a862f4":"get number of classes in Survived","e8ff9a5a":"**visualize Date**","0f12905b":"# Titanic Data Science Solutions\n\n\n### This notebook is a companion to the book [Data Science Solutions](https:\/\/www.amazon.com\/Data-Science-Solutions-Startup-Workflow\/dp\/1520545312). \n\nThe notebook walks us through a typical workflow for solving data science competitions at sites like Kaggle.\n\nThere are several excellent notebooks to study data science competition entries. However many will skip some of the explanation on how the solution is developed as these notebooks are developed by experts for experts. The objective of this notebook is to follow a step-by-step workflow, explaining each step and rationale for every decision we take during solution development.\n\n## Workflow stages\n\nThe competition solution workflow goes through seven stages described in the Data Science Solutions book.\n\n1. Question or problem definition.\n2. Acquire training and testing data.\n3. Wrangle, prepare, cleanse the data.\n4. Analyze, identify patterns, and explore the data.\n5. Model, predict and solve the problem.\n6. Visualize, report, and present the problem solving steps and final solution.\n7. Supply or submit the results.\n\nThe workflow indicates general sequence of how each stage may follow the other. However there are use cases with exceptions.\n\n- We may combine mulitple workflow stages. We may analyze by visualizing data.\n- Perform a stage earlier than indicated. We may analyze data before and after wrangling.\n- Perform a stage multiple times in our workflow. Visualize stage may be used multiple times.\n- Drop a stage altogether. We may not need supply stage to productize or service enable our dataset for a competition.\n\n\n## Question and problem definition\n\nCompetition sites like Kaggle define the problem to solve or questions to ask while providing the datasets for training your data science model and testing the model results against a test dataset. The question or problem definition for Titanic Survival competition is [described here at Kaggle](https:\/\/www.kaggle.com\/c\/titanic).\n\n> Knowing from a training set of samples listing passengers who survived or did not survive the Titanic disaster, can our model determine based on a given test dataset not containing the survival information, if these passengers in the test dataset survived or not.\n\nWe may also want to develop some early understanding about the domain of our problem. This is described on the [Kaggle competition description page here](https:\/\/www.kaggle.com\/c\/titanic). Here are the highlights to note.\n\n- On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. Translated 32% survival rate.\n- One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew.\n- Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.\n\n## Workflow goals\n\nThe data science solutions workflow solves for seven major goals.\n\n**Classifying.** We may want to classify or categorize our samples. We may also want to understand the implications or correlation of different classes with our solution goal.\n\n**Correlating.** One can approach the problem based on available features within the training dataset. Which features within the dataset contribute significantly to our solution goal? Statistically speaking is there a [correlation](https:\/\/en.wikiversity.org\/wiki\/Correlation) among a feature and solution goal? As the feature values change does the solution state change as well, and visa-versa? This can be tested both for numerical and categorical features in the given dataset. We may also want to determine correlation among features other than survival for subsequent goals and workflow stages. Correlating certain features may help in creating, completing, or correcting features.\n\n**Converting.** For modeling stage, one needs to prepare the data. Depending on the choice of model algorithm one may require all features to be converted to numerical equivalent values. So for instance converting text categorical values to numeric values.\n\n**Completing.** Data preparation may also require us to estimate any missing values within a feature. Model algorithms may work best when there are no missing values.\n\n**Correcting.** We may also analyze the given training dataset for errors or possibly innacurate values within features and try to corrent these values or exclude the samples containing the errors. One way to do this is to detect any outliers among our samples or features. We may also completely discard a feature if it is not contribting to the analysis or may significantly skew the results.\n\n**Creating.** Can we create new features based on an existing feature or a set of features, such that the new feature follows the correlation, conversion, completeness goals.\n\n**Charting.** How to select the right visualization plots and charts depending on nature of the data and the solution goals.","43a6fb76":"get the head of train data","0c4e6818":"check train shape","178fdbaa":"**Columns name in train data**","c7fabbc8":"Output csv file","694f2c12":"## Refactor Release 2017-Jan-29\n\nWe are significantly refactoring the notebook based on (a) comments received by readers, (b) issues in porting notebook from Jupyter kernel (2.7) to Kaggle kernel (3.5), and (c) review of few more best practice kernels.\n\n### User comments\n\n- Combine training and test data for certain operations like converting titles across dataset to numerical values. (thanks @Sharan Naribole)\n- Correct observation - nearly 30% of the passengers had siblings and\/or spouses aboard. (thanks @Reinhard)\n- Correctly interpreting logistic regresssion coefficients. (thanks @Reinhard)\n\n### Porting issues\n\n- Specify plot dimensions, bring legend into plot.\n\n\n### Best practices\n\n- Performing feature correlation analysis early in the project.\n- Using multiple plots instead of overlays for readability.","48f7381b":"Build models","6f4fbacf":"the same we don in train data","cbf2d4c4":"Clean Test Data","8f650b2d":"Evaluate Model","31c241a0":"**Now there are no values**","b4efc4b3":"Split data ","0ab1ca2d":"**Describe the data**","5e726adf":"Delete Cabin Column","88a88aa0":"****categorical data****","ebfbc9f4":"Age Null Values","bc6c92dc":"## Acquire data\n\nThe Python Pandas packages helps us work with our datasets. We start by acquiring the training and testing datasets into Pandas DataFrames. We also combine these datasets to run certain operations on both datasets together.","4c5382e0":"**Check Null Values**","58dd244d":"Data Cleaning"}}