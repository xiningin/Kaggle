{"cell_type":{"b545f804":"code","e86ae2c1":"code","78845fb2":"code","141f935e":"code","7e730123":"code","38adb7f4":"code","c63a399c":"code","176629a0":"code","cebc2ded":"code","6f456edd":"code","a1d7d110":"markdown","c459bbc7":"markdown","55863ca0":"markdown","526bad50":"markdown","aefa76c1":"markdown","ce392a96":"markdown","415c428f":"markdown"},"source":{"b545f804":"#Data management\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nimport cv2\nimport re\nimport string\nimport os\n\n#Model management\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers,models\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping\nimport torch\nimport joblib\n\n#data visualize\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","e86ae2c1":"class setting:\n    amount_data = 10000\n    train_folder = \"..\/input\/resized-plant2021\/img_sz_256\"\n    test_folder = \"..\/input\/resized-plant2021\/img_sz_256\"\n    x_col = \"image\"\n    y_col = \"labels\"\n    target_size = (128,128)\n    batch_size = 32\n    seed = 57","78845fb2":"train_df = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/train.csv\")[:setting.amount_data]\n\ntrain_datagen = ImageDataGenerator(rescale = 1\/255.,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    validation_split = 0.10,\n    zoom_range = 0.2,\n    shear_range = 0.2,\n    vertical_flip = False)\n\ntrain_ds = train_datagen.flow_from_dataframe(\n    train_df,\n    directory = setting.train_folder,\n    x_col = setting.x_col,\n    y_col = setting.y_col,\n    target_size = setting.target_size,\n    class_mode='categorical',\n    batch_size = setting.batch_size,\n    subset = \"training\",\n    shuffle = True,\n    seed = setting.seed,\n    validate_filenames = False\n)\n\nvalidate_ds = train_datagen.flow_from_dataframe(\n    train_df,\n    directory = setting.train_folder,\n    x_col = setting.x_col,\n    y_col = setting.y_col,\n    target_size = setting.target_size,\n    class_mode='categorical',\n    batch_size = setting.batch_size,\n    subset = \"validation\",\n    shuffle = True,\n    seed = setting.seed,\n    validate_filenames = False\n)","141f935e":"test_df = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/train.csv\")[setting.amount_data:]\ntest_df.index = range(len(test_df))\n\ntest_datagen = ImageDataGenerator(rescale = 1\/255.)\ntest_ds = test_datagen.flow_from_dataframe(\n    test_df,\n    directory = setting.test_folder,\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = setting.target_size,\n    class_mode= 'categorical',\n)","7e730123":"def get_VGG():\n    model = keras.Sequential()\n    model.add(layers.Conv2D(64,(3,3), padding=\"same\", activation=\"relu\", input_shape=(*setting.target_size,3)))\n    model.add(layers.Conv2D(64,(3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.MaxPool2D())\n    model.add(layers.Conv2D(128, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.Conv2D(128, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.MaxPool2D())\n    model.add(layers.Conv2D(256, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.Conv2D(256, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.Conv2D(256, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.MaxPool2D())\n    model.add(layers.Conv2D(512, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.Conv2D(512, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.Conv2D(512, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.MaxPool2D())\n    model.add(layers.Conv2D(512, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.Conv2D(512, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.Conv2D(512, (3,3), padding=\"same\", activation=\"relu\"))\n    model.add(layers.MaxPool2D())\n    ######\n    model.add(layers.Flatten())\n    model.add(layers.Dense(4096,activation=\"relu\"))\n    model.add(layers.Dropout(0.2))\n    model.add(layers.Dense(2048,activation=\"relu\"))\n    model.add(layers.Dropout(0.2))\n    model.add(layers.Dense(12, activation=\"softmax\"))\n    model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.0001), \n                  loss='categorical_crossentropy',\n                  metrics=[\"accuracy\"])\n    return model\n\ndef get_CNN():\n    model=keras.Sequential()\n    model.add(layers.Conv2D(64,(3,3),activation='relu',padding='same',input_shape=(*setting.target_size,3)))\n    model.add(layers.MaxPooling2D(2,2))\n    model.add(layers.Conv2D(64,(3,3),activation='relu',padding='same'))\n    model.add(layers.MaxPooling2D(2,2))\n    model.add(layers.Conv2D(64,(3,3),activation='relu',padding='same'))\n    model.add(layers.MaxPooling2D(2,2))\n    model.add(layers.Conv2D(128,(3,3),activation='relu',padding='same'))\n    model.add(layers.MaxPooling2D(2,2))\n    model.add(layers.Flatten())\n    model.add(layers.Dense(12,activation='softmax'))\n\n    # Compile the Model\n    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n        loss='categorical_crossentropy',\n        metrics=['accuracy'])\n    return model","38adb7f4":"model = get_VGG()","c63a399c":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, CSVLogger\ndef fit_model(train_x,train_y,model):\n    ES = EarlyStopping(monitor='val_loss', \n                       patience=5, \n                       verbose=1,\n                       min_delta=0.001,\n                       restore_best_weights=True)\n    model.fit(train_x,train_y,\n              epochs=30,\n              validation_split=0.05,\n              callbacks = [ES])\n\ndef fit_generator_model(train_ds,validate_ds,model):\n\n    ES = EarlyStopping(monitor='val_loss', patience=10, verbose=1,min_delta=0.001,restore_best_weights=True)\n    callbacks=[ES]\n    \n    model.fit(train_ds,\n              epochs=30,\n              validation_data =validate_ds,\n              callbacks = callbacks)\n\n\n    \n    \ndef get_submission(test_x,submission_id,model):\n    Ztest = model.predict(test_x).argmax(axis=1)\n    Ztest = pd.Series(Ztest,name=\"labels\")\n    ID = submission_id\n    submission = pd.concat([ID,Ztest],axis=1)\n    print(submission)\n    submission.to_csv(\"submission.csv\",index=False)\n    return submission","176629a0":"fit_generator_model(train_ds,validate_ds,model)","cebc2ded":"model.evaluate(test_ds)","6f456edd":"submission = get_submission(test_ds,test_df[\"image\"],model)","a1d7d110":"* **Input** : Path , setting etc.\n\n* **output**: train_data , test_data , train_label","c459bbc7":"# FineTune model and submission","55863ca0":"# Prepare data","526bad50":"# Get Models","aefa76c1":"* Input : -\n\n* output: model\n","ce392a96":"test","415c428f":"* **Input** : 1. train_x, 2. train_y , 3. test_x, 4. model , 5. relabels_dict\n\n* **output**: submission\n"}}