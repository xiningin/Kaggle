{"cell_type":{"17c3a80b":"code","77c8581e":"code","0536957a":"code","53bde1e1":"code","029d81aa":"code","4507fa5b":"code","a3a0229a":"code","b8aecf0c":"code","b234d6bc":"code","06d1ca6a":"code","d2dd6728":"code","3b2f08f2":"code","b1763fb6":"code","71d9b6cf":"code","9b36c175":"code","68559b08":"code","05aa6fad":"code","998c9056":"code","e545b931":"code","57099c3a":"code","169b9b31":"code","80e54aae":"code","309f6666":"code","ef18c0aa":"code","e2963373":"code","476bd300":"code","24cc6e1d":"code","51f923dd":"code","0e1723d6":"code","5cbbffc6":"code","2bd9057f":"code","9b846cb5":"code","cfa46785":"code","23c9c556":"code","34bdc3c3":"code","84bb9df9":"code","87b5ad6a":"code","24ab491b":"code","2be46a31":"code","a186c391":"code","d1ffd46a":"code","773a77ee":"code","72aaa7a8":"code","da039d4b":"code","708cf7db":"code","be241921":"code","444407f8":"code","dd7240e6":"code","63b91fb9":"code","88bda338":"code","9d10635f":"code","677d241c":"code","a3d3149a":"code","f34aa670":"code","8d6288b6":"code","c6b48c39":"code","55557a75":"code","912b8c8c":"code","f4157132":"code","c0253e1f":"code","ffcbff17":"code","dc4c5e7b":"code","0666da15":"code","65f79bc3":"code","5a2a7455":"code","e104fcc1":"code","1ae0dbc4":"code","26a0631d":"code","2ae8461f":"code","c53b4aba":"code","7ed23e19":"code","96248bcf":"code","3ebb3e4a":"code","5b75e7ab":"code","78533f09":"code","c7b72a23":"code","937d167f":"code","463e5312":"code","dc563ce8":"code","1dbe9f0c":"code","0f2a8b1d":"code","90c79156":"code","9616fcdb":"code","4515d350":"code","5334d813":"code","f0a0dfa7":"code","5c943f0b":"code","a53c0daa":"markdown","e5a99e00":"markdown","dfd0e5e9":"markdown","5517afa6":"markdown","23849950":"markdown"},"source":{"17c3a80b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77c8581e":"df = pd.read_csv('..\/input\/titanic\/train.csv')","0536957a":"test = pd.read_csv('..\/input\/titanic\/test.csv')","53bde1e1":"df","029d81aa":"df = df.set_index('PassengerId')","4507fa5b":"df.describe()","a3a0229a":"df.info()","b8aecf0c":"df.isnull().sum()","b234d6bc":"df.corr()","06d1ca6a":"import seaborn as sns\nimport matplotlib.pyplot as plt","d2dd6728":"sns.catplot(y='Age',data=df,col='Survived',kind='box')","3b2f08f2":"df.groupby('Survived').mean().transpose()","b1763fb6":"sns.countplot(y='Pclass',data=df)","71d9b6cf":"df","9b36c175":"df['Sex'].value_counts()","68559b08":"df.drop('Cabin',axis=1,inplace=True)","05aa6fad":"with_age = df[~df['Age'].isna()]\nwitho_age = df[df['Age'].isna()]","998c9056":"with_age.groupby('Survived').describe().transpose().loc['Age']","e545b931":"witho_age","57099c3a":"def fill_age(x,y):\n    if pd.isnull(x):\n        if y==0:\n            return 31\n        else:\n            return 28\n    return x\ndf['Age']=df.apply(lambda x:fill_age(x['Age'],x['Survived']),axis=1)","169b9b31":"df.isnull().sum()","80e54aae":"df","309f6666":"df.groupby('Sex').describe().transpose().loc['Survived':'Age']","ef18c0aa":"df.groupby('Pclass').describe().transpose().loc[:'Age']","e2963373":"df['Pclass'] = df['Pclass'].map({1:3,2:2,3:1})","476bd300":"test['Pclass'] = test['Pclass'].map({1:3,2:2,3:1})","24cc6e1d":"df['Sex'] = df['Sex'].map({'male':0,'female':1})","51f923dd":"test['Sex'] = test['Sex'].map({'male':0,'female':1})","0e1723d6":"df","5cbbffc6":"sns.countplot(y='Embarked',data=df,hue='Survived')","2bd9057f":"q = len(df[(df['Embarked']=='Q')&(df['Survived']==1)])\/len(df)\nc = len(df[(df['Embarked']=='C')&(df['Survived']==1)])\/len(df)\ns = len(df[(df['Embarked']=='S')&(df['Survived']==1)])\/len(df)","9b846cb5":"q,c,s","cfa46785":"def sr_emark_place(y):\n    if y=='S':\n        return s\n    elif y=='C':\n        return c\n    else:\n        return q\ndf['srate_wrt_emark_place'] = df['Embarked'].apply(sr_emark_place)","23c9c556":"test['srate_wrt_emark_place'] = test['Embarked'].apply(sr_emark_place)","34bdc3c3":"df.drop('Embarked',axis=1,inplace=True)","84bb9df9":"test.drop('Embarked',axis=1,inplace=True)","87b5ad6a":"df","24ab491b":"df.drop('Name',axis=1,inplace=True)","2be46a31":"df","a186c391":"df['Age'].describe()","d1ffd46a":"sns.histplot(x='Age',data=df)","773a77ee":"def age_range(x):\n    if 0<=x<=19:\n        return 'Kids and teens'\n    elif 20<=x<=40:\n        return 'Men and women'\n    elif 41<=x<=60:\n        return 'Aged people'\n    else:\n        return 'Super old'\ndf['AgeRange'] = df['Age'].apply(age_range)","72aaa7a8":"test['AgeRange'] = test['Age'].apply(age_range)","da039d4b":"sns.countplot(x='AgeRange',data=df,hue='Survived')","708cf7db":"mw = len(df[(df['AgeRange']=='Men and women')&(df['Survived']==1)])\/len(df)\nap = len(df[(df['AgeRange']=='Aged people')&(df['Survived']==1)])\/len(df)\nkt = len(df[(df['AgeRange']=='Kids and teens')&(df['Survived']==1)])\/len(df)\nso = len(df[(df['AgeRange']=='Super old')&(df['Survived']==1)])\/len(df)","be241921":"mw,ap,kt,so","444407f8":"def srate_wrt_ar(x):\n    if x=='Super old':\n        return so\n    elif x=='Kids and teens':\n        return kt\n    elif x=='Aged people':\n        return ap\n    else:\n        return mw\ndf['Srate_wrt_AgeRange'] = df['AgeRange'].apply(srate_wrt_ar) ","dd7240e6":"test['Srate_wrt_AgeRange'] = test['AgeRange'].apply(srate_wrt_ar)","63b91fb9":"test.drop('Cabin',axis=1,inplace=True)","88bda338":"test.drop('Ticket',inplace=True,axis=1)","9d10635f":"df.drop('Ticket',axis=1,inplace=True)","677d241c":"df","a3d3149a":"test = test.set_index('PassengerId')","f34aa670":"test.drop('Name',axis=1,inplace=True)","8d6288b6":"test","c6b48c39":"df","55557a75":"test.groupby('Sex').mean().transpose().loc['Age']","912b8c8c":"def test_age(x):\n    if pd.isnull(x):\n        return 31\n    return x\ntest['Age'] = test['Age'].apply(test_age)","f4157132":"test.isnull().sum()","c0253e1f":"test['Fare'].mean()","ffcbff17":"def fill_fare(x):\n    if pd.isnull(x):\n        return 35.62\n    return x\ntest['Fare'] = test['Fare'].apply(fill_fare)","dc4c5e7b":"df","0666da15":"test","65f79bc3":"df.drop('AgeRange',axis=1,inplace=True)\ntest.drop('AgeRange',axis=1,inplace=True)","5a2a7455":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","e104fcc1":"X = df.drop('Survived',axis=1)\ny = df['Survived']\nX_train,X_test,y_train,y_test = train_test_split(X,y,stratify=y,test_size=0.3,random_state=1)","1ae0dbc4":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","26a0631d":"from sklearn.model_selection import GridSearchCV,cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","2ae8461f":"param_grid = [{'penalty':['l1','l2'],'C':[0.001,0.01,0.1,1,10,100]}]\ngm = GridSearchCV(LogisticRegression(),param_grid=param_grid,cv=10)\ngm.fit(X_train,y_train)","c53b4aba":"gm.score(X_test,y_test)","7ed23e19":"gm.best_estimator_","96248bcf":"param_grid = [{'kernel':['rbf'],'gamma':[0.001,0.01,0.1,1,10,100],'C':[0.001,0.01,0.1,1,10,100]},{'kernel':['linear'],'C':[0.001,0.01,0.1,1,10,100]}]\ngm = GridSearchCV(estimator=SVC(),param_grid=param_grid,cv=10)","3ebb3e4a":"gm.fit(X_train,y_train)","5b75e7ab":"gm.best_estimator_","78533f09":"gm.score(X_test,y_test)","c7b72a23":"param_grid = [{'criterion':['gini','entropy']}]\ngm = GridSearchCV(estimator=DecisionTreeClassifier(),param_grid=param_grid,cv=10)\ngm.fit(X_train,y_train)\ngm.score(X_test,y_test)","937d167f":"param_grid = [{'n_estimators':[10,40,50,100],'criterion':['gini','entropy']}]\ngm = GridSearchCV(estimator=RandomForestClassifier(),param_grid=param_grid,cv=10)\ngm.fit(X_train,y_train)\ngm.score(X_test,y_test)","463e5312":"score = []\nfor i in range(2,12):\n    model = KNeighborsClassifier(n_neighbors=i)\n    model.fit(X_train,y_train)\n    score.append(model.score(X_test,y_test))","dc563ce8":"score","1dbe9f0c":"from sklearn.pipeline import make_pipeline\npipe_svc = make_pipeline(StandardScaler(),SVC(kernel='rbf',C=100,gamma=0.01))\npipe_svc.fit(X,y)","0f2a8b1d":"pred = pipe_svc.predict(test)","90c79156":"pred","9616fcdb":"test","4515d350":"test['Predictions'] = pred","5334d813":"test.columns[:-1]","f0a0dfa7":"submission = test.drop(test.columns[:-1],axis=1).reset_index()\nsubmission.columns = ['PassengerId','Survived']\nsubmission = submission.set_index('PassengerId')","5c943f0b":"submission.to_csv('submission.csv')","a53c0daa":"From the above output we can see that women have a higher survivability rate than men.","e5a99e00":"Here we can clearly see that people in class 1 have a higher probability of survival. So I will reverse the cardinality.","dfd0e5e9":"Survivability rate wrt AgeRange","5517afa6":"Let's drop the cabin column since it is empty for most of the rows","23849950":"We can clearly see that those who belong to class 1 in 'Pclass' have a higher probability of survival"}}