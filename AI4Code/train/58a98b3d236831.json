{"cell_type":{"a46d77c5":"code","d8624958":"code","954c5094":"code","17a7f6f6":"code","922600fb":"code","5c9cf081":"code","77d7be85":"code","2571b9d9":"code","7984086c":"code","52211327":"code","13cff4d9":"code","f7300715":"code","a23b334a":"code","2106bb70":"code","3569500b":"code","e2fa0891":"code","48f2a603":"code","3ac5e1a9":"code","00748baa":"code","872d5078":"code","fdca10d3":"code","35b8925d":"code","36c58635":"code","ad117357":"markdown","d23fbb42":"markdown","54add19a":"markdown","00b97e95":"markdown","89d30946":"markdown","52ac8460":"markdown","79e04160":"markdown","9ac06c1d":"markdown"},"source":{"a46d77c5":"import numpy as np\nimport pandas as pd \nimport os\nimport pathlib\nimport PIL\nfrom pathlib import Path\nfrom PIL import Image, ImageDraw\nfrom math import sqrt\nimport ast\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nimport warnings\nwarnings.filterwarnings('ignore')","d8624958":"train = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/test.csv\")\nsub = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/example_sample_submission.csv\")\n\npath = Path('..\/input\/tensorflow-great-barrier-reef\/train_images')\nfilepaths = list(path.glob(r'**\/*.jpg'))","954c5094":"# checking the train test lengths\nprint(\"Number of training samples: \", len(train))\nprint(\"Number of testing samples: \", len(test))","17a7f6f6":"train.head(150)","922600fb":"# lets see how many frames with no starfishes\ntrain_clean = train.loc[train[\"annotations\"] != \"[]\"]\nprint(f\"No starfishes in {len(train)-len(train_clean)} samples.\")\nprint(f\"The clean train set has {len(train_clean)} images for us to work with.\")","5c9cf081":"train_clean.head()","77d7be85":"# Checking out the number of sequences\nlen(train_clean.sequence.value_counts())","2571b9d9":"# rows per each sequence\nprint(\"Sequence Samples\")\nprint(train_clean.sequence.value_counts())","7984086c":"seq_df = train_clean.sequence.value_counts().to_frame()\nplt.figure(figsize=(16, 9))\nsns.barplot(x=seq_df.index, y=list(seq_df.sequence), palette=\"Greens_d\")\nplt.title(\"Distribution of Sequences\")\nplt.xlabel(\"Sequence Id\")\nplt.ylabel(\"Frequency\")\nplt.show()","52211327":"num_boxes = []\nannotations_clean = []\nfor elem in train_clean.annotations:\n    ann = ast.literal_eval(elem)\n    num_boxes.append(len(ann))\n    annotations_clean.append(ann)","13cff4d9":"# adding num boxes per row and changing the annotations column to a proper python parseable list of dictionaries\ntrain_clean[\"num_boxes\"] = num_boxes\ntrain_clean[\"annotations\"] = annotations_clean","f7300715":"train_clean.head()","a23b334a":"print(\"#box Frequency\")\nprint(train_clean.num_boxes.value_counts())","2106bb70":"# number of bounding boxes in the clean train datasets\nprint(f\"Number of Bounding Boxes in the dataset: {train_clean.num_boxes.sum()}\")","3569500b":"box_count = train_clean.num_boxes.value_counts().to_frame()","e2fa0891":"plt.figure(figsize=(16, 9))\nsns.barplot(x=box_count.index, y=list(box_count.num_boxes), palette=\"Greens_d\")\nplt.title(\"Distribution of Num_boxes\")\nplt.xlabel(\"# of Boxes\")\nplt.ylabel(\"Frequency\")\nplt.show()","48f2a603":"#structure of a annotation\nlist(train_clean[\"annotations\"])[0]","3ac5e1a9":"# generating paths for input images\nsrc = '..\/input\/tensorflow-great-barrier-reef\/train_images'\npaths = []\nfor row in train_clean.image_id:\n    vid_num = row.split('-')[0]\n    img_num = row.split('-')[1]\n    paths.append(os.path.join(src,f'video_{vid_num}',img_num+'.jpg'))","00748baa":"train_clean['paths'] = paths","872d5078":"# classic way of iterating through and drawing the bounding boxes on an image\ndef vis_boxes(img_path, bboxes):\n    coords = []\n    for box in bboxes:\n        x1 = box['x']\n        y1 = box['y']\n        x2 = x1 + box['width']\n        y2 = y1 + box['height']\n        coords.append([x1, y1, x2, y2])\n        \n    img = Image.open(img_path)\n    img1 = img.copy()\n    draw = ImageDraw.Draw(img1)\n    for elem in coords:\n        draw.rectangle(elem, outline='red', width=7)\n    \n    return img1","fdca10d3":"train_clean.head()","35b8925d":"# number of bounding boxes per each sequence\ntrain_clean.groupby('sequence').num_boxes.sum().to_frame()","36c58635":"# lets plot a few\n# some inspiration from https:\/\/www.kaggle.com\/sjyangkevin\/eda-bounding-box-analysis-annotated-videos\n\nplt.figure(figsize=(16, 9))\nn_images = 9\ncount = 0\nr,c = int(sqrt(n_images)), int(sqrt(n_images))\ntrain_plot = train_clean.sample(n = n_images)\n\nfor _, row in train_plot.iterrows():\n    img_path = row['paths']\n    bboxes = row['annotations']\n    plt.subplot(r, c, count + 1)\n    img_out = vis_boxes(img_path, bboxes)\n    plt.imshow(img_out)\n    count+=1\n\nplt.show()\nplt.tight_layout()","ad117357":"**\u770b\u7740\u76d2\u5b50**","d23fbb42":"**\u7bb1\u5b50\u7684\u6570\u91cf**","54add19a":"**\u5e8f\u5217\u5206\u5e03**","00b97e95":"**\u8fb9\u754c\u6846\u6570\u91cf\u7684\u5206\u5e03**","89d30946":"\u770b\u8d77\u6765\u5f88\u591a\u8fd9\u6837\u7684\u76f8\u6846\u6ca1\u6709\u6d77\u661f","52ac8460":"**\u6765\u770b\u4e00\u4e9b\u4f8b\u5b50**","79e04160":"# **\u5bfc\u5165\u5e93**","9ac06c1d":"**\u5177\u6709\u6700\u5927\u8fb9\u754c\u6846\u7684\u5e8f\u5217**"}}