{"cell_type":{"16644389":"code","1598358f":"code","dc3027de":"code","161a439d":"code","df9fb1c6":"code","04279bdf":"code","fb8f1485":"code","59c60133":"code","aca7ad85":"code","bce03dfd":"code","ee4f2802":"code","25801405":"code","9216bad3":"code","8f864f29":"markdown","86179751":"markdown","8094537c":"markdown","d4ae16f3":"markdown","c2d19f51":"markdown","a593390c":"markdown","eb698f4d":"markdown","953645df":"markdown","2a99f237":"markdown"},"source":{"16644389":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Comment this if the data visualisations doesn't work on your side\n%matplotlib inline\n\nplt.style.use('bmh')\n","1598358f":"df = pd.read_csv(\"..\/input\/ramen-ratings.csv\")\nprint(df.shape)\ndf.head(5)","dc3027de":"df.info()\ndf.describe(include=\"all\")","161a439d":"columns = ['Style','Country','Stars','Top Ten']\nfor col in columns : \n    if df[col].dtypes == \"object\" : print(col,\":\" ,df[col].unique().tolist(),\"\\n\")","df9fb1c6":"#df = pd.read_csv(\"..\/input\/ramen-ratings.csv\")\n# Store preprocess dataframe to df 1\ndf1=df.copy()","04279bdf":"# Fix spaces in column name\ndf1.columns = [c.replace(' ', '_') for c in df1.columns]\n\n# Stars - Replace 'Unrated'\ndf1.Stars = df1['Stars'].replace(to_replace='Unrated',value='-1')\n\n# Stars - Convert data type from object to float\ndf1.Stars = df1.Stars.astype(float)\n\n# Top Ten - Replace '\\n'\ndf1.Top_Ten = df1.Top_Ten.replace(to_replace='\\n',value=np.nan)\n\n# Top Ten - Slice column into 2 and drop the column \ndf1[['Topten_Year','Topten_Rank']] = df1['Top_Ten'].str.split('#', expand=True)\ndf1 = df1.drop('Top_Ten', axis=1)\n\n# Top Ten - Set rank as float \ndf1.Topten_Rank = df1.Topten_Rank.astype(float)","fb8f1485":"df1[df1.Topten_Rank.notnull()].head(5)\ndf1.info()","59c60133":"df1.head(10)","aca7ad85":"# Preparing data \ndf1_brand_histograms= df1.groupby(['Brand']).agg({'Variety':pd.Series.nunique,'Stars':'mean'})\n\n# Generate plot and styling 1 out of 2\nfig = go.Figure(data=go.Histogram(x=df1_brand_histograms[\"Variety\"],\n                 marker=dict(color=\"rgba(20,189,204,0.2)\",line=dict(color='#14BDCC', width=1)),\n                 hoverinfo=\"x+y+z+text\",\n                 name = \"Variety\",\n                 hoverlabel = dict(bgcolor=\"rgba(20,189,204,1)\",bordercolor=\"rgba(20,189,204,0.5)\",\n                       font=dict(family=\"Arial\",size=10,color='rgba(255,255,255,1)'))\n                ))\n\n# Update xaxis properties\nfig.update_xaxes(title=dict(font=dict(size=12, color='#1A1817')),\n                 ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10,hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=False, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson')\nfig.update_xaxes(title_text=\"<b>VARIETY<\/b> (total variety)\")\n\n# Update yaxis properties\nfig.update_yaxes(title= dict(font=dict(size=12, color='#1A1817'),),ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10, hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson',)\nfig.update_yaxes(title_text=\"<b>BRAND<\/b> (total)\")\n\nfig.update_layout(    \n    font=dict(family=\"Raleway, sans-serif\", size=12, color='#98928E'),\n    plot_bgcolor=\"#fffaf7\",\n    showlegend=False,\n    paper_bgcolor = \"#fffaf7\",\n    height = 500,\n    annotations=[go.layout.Annotation(text=\"<b>Most brand has at most 4 variety<\/b>\",x=-0.05,y=1.18,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family=\" Raleway,sans-serif\", size=16, color='#1A1817')),\n                 go.layout.Annotation(text=\"Total brands by total variety of ramen\",x=-0.05,y=1.12,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family='Raleway,sans-serif', size=14, color='#98928E'))]\n)\nfig.show()","bce03dfd":"# Generate plot and styling 2 out of 2\nfig = go.Figure(data=go.Histogram(x=df1_brand_histograms[\"Stars\"],\n                 cumulative_enabled=True,\n                marker=dict(color=\"rgba(20,189,204,0.2)\",line=dict(color='#14BDCC', width=1)),\n                 showlegend=False,\n                 hoverinfo=\"x+y+z+text\",\n                 hoverlabel = dict(bgcolor=\"rgba(20,189,204,1)\",bordercolor=\"rgba(20,189,204,0.5)\",\n                       font=dict(family=\"Arial\",size=10,color='rgba(255,255,255,1)'))\n                ))\n\n# Update xaxis properties\nfig.update_xaxes(title=dict(font=dict(size=12, color='#1A1817')),\n                 ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10,hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=False, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson')\nfig.update_xaxes(title_text=\"<b>STARS<\/b> (average ratings)\")\n\n# Update yaxis properties\nfig.update_yaxes(title= dict(font=dict(size=12, color='#1A1817'),),ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10, hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson',)\nfig.update_yaxes(title_text=\"<b>BRAND<\/b> (total cummulative)\")\n\nfig.update_layout(    \n    font=dict(family=\"Raleway, sans-serif\", size=12, color='#98928E'),\n    plot_bgcolor=\"#fffaf7\",\n    showlegend=False,\n    paper_bgcolor = \"#fffaf7\",\n    height = 500,\n    annotations=[go.layout.Annotation(text=\"<b>Most brand rated less than 4<\/b>\",x=-0.05,y=1.18,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family=\" Raleway,sans-serif\", size=16, color='#1A1817')),\n                 go.layout.Annotation(text=\"Total brands (cummulative) by average ratings\",x=-0.05,y=1.12,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family='Raleway,sans-serif', size=14, color='#98928E')),]\n)\nfig.show()","ee4f2802":"# Preparing data\ndf2 = df1.groupby('Country').agg({'Variety':pd.Series.nunique,\n                                  'Brand':pd.Series.nunique, \n                                  'Stars':'mean',\n                                  'Review_#':['mean','sum'],\n                                  \n                                 })\ndf2.columns =df2.columns.get_level_values(0)+\"_\"+df2.columns.get_level_values(1)\ndf3 = df1.groupby(['Country','Brand']).agg({\n                                  'Stars':'mean',\n                                  'Review_#':'mean'\n                                 })\n\n# Generate plot and styling\ncolorscale1 = [\n[0,'rgba(0,204,204,.5)'],\n[0.5,'rgba(0,102,102,.5)'], \n[1,'rgba(0,25,51,.5)']]\n\ncolorscale1_line = [\n[0,'rgba(0,204,204,1)'],\n[0.5,'rgba(0,102,102,1)'], \n[1,'rgba(0,25,51,1)']]\n\nfig = go.Figure(data=  go.Scatter(\n        x=df2[\"Variety_nunique\"],\n        y=df2[\"Brand_nunique\"],\n        name =\"Country\",\n        mode=\"markers\",\n        text = df2.index,\n        marker=dict(\n            color=\"rgba(20,189,204,0.2)\",\n            size=15,\n            line=dict(color='#14BDCC', width=1)),\n        hoverinfo=\"x+y+z+text\",\n        hoverlabel = dict(\n                       bgcolor=\"rgba(20,189,204,1)\",\n                       bordercolor=\"rgba(20,189,204,0.5)\",\n                       font=dict(\n                           family=\"Arial\", \n                           size=10, \n                           color='rgba(255,255,255,1)'))))\n\n\n# Update xaxis properties\nfig.update_xaxes(title=dict(font=dict(size=12, color='#1A1817')),\n                 ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10,hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson')\n\nfig.update_xaxes(title_text=\"<b>VARIETY<\/b> (total)\")\n\n# Update yaxis properties\nfig.update_yaxes(title= dict(font=dict(size=12, color='#1A1817'),),ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10, hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson',)\n\nfig.update_yaxes(title_text=\"<b>BRAND<\/b> (total)\")\n\nfig.update_layout(    \n    font=dict(family=\"Raleway, sans-serif\", size=12, color='#98928E'),\n    plot_bgcolor=\"#fffaf7\",\n    showlegend=True,\n    paper_bgcolor = \"#fffaf7\",\n    height = 500,\n    annotations=[go.layout.Annotation(text=\"<b>Brand and variety are proportional with 1:5 ratio<\/b>\",x=-0.05,y=1.18,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family=\" Raleway,sans-serif\", size=16, color='#1A1817')),\n                 go.layout.Annotation(text=\"Total brands and ramen varieties by country\",x=-0.05,y=1.12,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family='Raleway,sans-serif', size=14, color='#98928E')),]\n)\nfig.show()","25801405":"# Preparing data\ndf2 = df1.groupby('Country').agg({'Variety':pd.Series.nunique,\n                                  'Brand':pd.Series.nunique, \n                                  'Stars':'mean',\n                                  'Review_#':['mean','sum'],\n                                  \n                                 })\ndf2.columns =df2.columns.get_level_values(0)+\"_\"+df2.columns.get_level_values(1)\ndf3 = df1.groupby(['Country','Brand']).agg({\n                                  'Stars':'mean',\n                                  'Review_#':'mean'\n                                 })\n\n# Generate plot and styling\ncolorscale1 = [\n[0,'rgba(0,204,204,.5)'],\n[0.5,'rgba(0,102,102,.5)'], \n[1,'rgba(0,25,51,.5)']]\n\ncolorscale1_line = [\n[0,'rgba(0,204,204,1)'],\n[0.5,'rgba(0,102,102,1)'], \n[1,'rgba(0,25,51,1)']]\n\nfig = go.Figure(data=  go.Scatter(x=df2[\"Review_#_mean\"],\n               y=df2[\"Stars_mean\"],\n               mode=\"markers\",\n               name=\"Country\",\n               hoverinfo=\"x+y+z+text\",\n               text = df2.index,\n               marker=dict(color=(df2[\"Review_#_sum\"]), size=15,\n                           colorbar=dict(title= dict(text=\"<b>TOTAL<br>REVIEWS<\/b>\",font=dict(size=12, color='#1A1817'),),x=1.02, y=0.95,yanchor=\"top\", len=1, ),colorscale=colorscale1,\n                           line=dict(color=df2[\"Review_#_sum\"],width=1,colorscale=colorscale1_line)), \n               \n              ))\n\n\n\n# Update xaxis properties\nfig.update_xaxes(title=dict(font=dict(size=12, color='#1A1817')),\n                 ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10,hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson')\nfig.update_xaxes(title_text=\"<b>REVIEWS<\/b> (average per ramen)\")\n\n# Update yaxis properties\nfig.update_yaxes(title= dict(font=dict(size=12, color='#1A1817'),),ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10, hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson',)\nfig.update_yaxes(title_text=\"<b>STARS<\/b> (rating)\")\n\nfig.update_layout(    \n    font=dict(family=\"Raleway, sans-serif\", size=12, color='#98928E'),\n    plot_bgcolor=\"#fffaf7\",\n    showlegend=True,\n    paper_bgcolor = \"#fffaf7\",\n    height = 500,\n    annotations=[go.layout.Annotation(text=\"<b>Most countries with high total reviews, generously rate ramens<\/b>\",x=-0.05,y=1.18,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family=\" Raleway,sans-serif\", size=16, color='#1A1817')),\n                 go.layout.Annotation(text=\"Countries average stars and reviews color coded by total reviews\",x=-0.05,y=1.12,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family='Raleway,sans-serif', size=14, color='#98928E')),]\n)\nfig.show()","9216bad3":"# Preparing data \ntop_brand = df1.groupby('Brand').count()['Variety'][df1.groupby('Brand').count()['Variety']>20].index.values # Listing brands with 20+ variety\ndf1_top_brand =  df1.loc[df1['Brand'].isin(top_brand)] # Filtering the brand\ndf1_brand_heatmaps = df1_top_brand.groupby(['Country','Brand']).agg({'Stars':'mean','Review_#':'mean'})\n\n# Generate plot and styling\nfig = go.Figure(data=go.Heatmap(\n        x=df1_brand_heatmaps.index.get_level_values(0),\n        y=df1_brand_heatmaps.index.get_level_values(1),\n        z=df1_brand_heatmaps['Stars'],\n    colorbar=dict(title= dict(text='<b>RATINGS<\/b><br>(average)',font=dict(size=12, color='#1A1817'),) )\n\n))\n# Update xaxis properties\nfig.update_xaxes(title=dict(text=\"<b>COUNTRY<\/b>\",font=dict(size=12, color='#1A1817')),\n                 ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10,hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson')\n\n\n# Update yaxis properties\nfig.update_yaxes(title= dict(text = \"<b>BRAND<\/b>\",font=dict(size=12, color='#1A1817'),),ticks=\"outside\", tickwidth=0.5, tickcolor='#F2E9E1', ticklen=10, hoverformat=\",.1f\",\n                 showline=True, linewidth=2, linecolor='#F2E9E1',\n                 showgrid=True, gridwidth=1, gridcolor='#F2E9E1',\n                 zeroline=True, zerolinewidth=1, zerolinecolor='crimson',)\n\nfig.update_layout(    \n    xaxis_nticks=len(df1_brand_heatmaps.index.get_level_values(0)),\n    yaxis_nticks=len(df1_brand_heatmaps.index.get_level_values(1)),\n    font=dict(family=\"raleway, sans-serif\", size=10, color='#98928E'),\n    plot_bgcolor=\"#fffaf7\",\n    showlegend=True,\n    paper_bgcolor = \"#fffaf7\",\n    height = 500,\n    annotations=[go.layout.Annotation(text=\"<b>Nissin has the most presence in contries<\/b>\",x=-0.05,y=1.18,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family=\" Raleway,sans-serif\", size=16, color='#1A1817')),\n                 go.layout.Annotation(text=\"Average rating by brand and country\",x=-0.05,y=1.12,xref=\"paper\",yref=\"paper\",showarrow=False,\n                                      xanchor=\"left\",yanchor=\"top\",align=\"left\",font=dict(family='Raleway,sans-serif', size=14, color='#98928E')),]\n                 )\n\nfig.show()","8f864f29":"#### 2.4 What is the leading global brand?\nTo answer this, I am using the brand's presence in countries regardless of their rating. Nissin has the most present worldwide though the ratings do not seem to be outstanding. Nissin has mostly average ratings, orange to red color, with even one low score, purple indicating rating as little as 2 out of 5.\nCouple worth-noting things are,\n- My Kuali is astonishingly scored ~5 (look for the yellow-colored box) in all countries it presents, but bear in mind; this average rating doesn't take into account the total number of reviews. Look forward to trying this ramen!\n- Indomie doesn't seem to perform well in Nigeria. ","86179751":"#### 1.3 Operations\nSo, putting things together, some of procedures will be excuted during preprocesing are\n1. Add underscore for column name that has space\n2. __Stars:__ Replace 'Unrated' to '-1' and change its data type to float\n3. __Top Ten:__ replace '\\n' to blank and break the column into 2 (year and rank)","8094537c":"#### 2.3 How strict a country judge a\u00a0Ramen?\nSince the ratings are 0\u20135, most countries with high total reviews, indicated by darker green color, tend to have average scores above 3, predominantly above 3.5.","d4ae16f3":"#### 1.2 Investigate categories of each observable 'object' columns\n* __Style__ has nan value which is meaningless. We know from earlier observation that there are only 2 of them. We can just do nothing about it since its not sizeable but it's worth checking what are the other values of these 2 rows\n* __Country__ column seems normal\n* __Starts__ has 'Unrated' value which is later will cause problem when we're converting it to float. Thus it shall somewhat convert to other value before converting. It's also interesting to know how whether it has a sizeable presence or not\n* __Top Ten__ indicates 2 information which are the year and rank of the noodle. For later ease of exploration, we can split this column into 2. We'll also convert the '\\n' into blank","c2d19f51":"### 2. Exploratory\nTo explore, I am curious to know\u00a0: <br>\n`1.` What are the average variety and ratings for each brand? <br>\n`2.` Which country has the highest competition? <br>\n`3.` How strict a country judge a Ramen? <br>\n`4.` What is the leading global brand? <br>","a593390c":"#### 2.2 Which country has the highest competition?\nCompetition level here is identified by both the number of brands and varieties. As you might expect, Japan has the highest number of brands, 58 and types, 333. The number of the brand to variety ratio seems to be proportional, at least for the top 10.\n\n","eb698f4d":"#### 2.1 What are the average variety and ratings for each brand?\n\nAnchoring at brand, we can see that most brands have at most 4 variety with one outlier brand that has almost ~400 variety. Reviewers seems also rather selective in rating that most ramen are below 4.","953645df":"#### 1.1 Data types and completeness\n* Some column name have spaces between words\n* __Style__ missing 2 values indicated by its 2578 count while others are 2580  \n* __Stars__ are currently stored as object whilst it seems to provide more context if stored as float \n* __Top Ten__ seems to indicate whether or not the ramen has been to a \"Top\" meals or not\n* __Top Ten__ has most frequent value of '\\n' indicating there are rows with meaningless value\n","2a99f237":"### 1. Preprocessing the data"}}