{"cell_type":{"0160caa5":"code","e93789c2":"code","752c6699":"code","5d1c1028":"code","74671d56":"code","887ace98":"code","000a8590":"code","a177a922":"code","5877cba2":"code","11d9f6d9":"code","174d2da9":"code","6665a928":"code","b98107f8":"code","710c2d59":"code","513c150b":"code","13759738":"code","2836cdf7":"code","f09528f7":"markdown","288b5a5d":"markdown","61f7902a":"markdown","e1403e5a":"markdown","02e6dbac":"markdown"},"source":{"0160caa5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","e93789c2":"import plotly.express as px\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier","752c6699":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata.info()\ndata.head()","5d1c1028":"data['Age'] = data['Age'].fillna(data['Age'].mean())\ndata['Age'] = data['Age'].astype('int')\n\ndata = data.drop('Ticket', 1)\ndata = data.drop('Cabin', 1)\ndata = data.drop('Name', 1)\n\ndata = data.replace('male', 0.0001)\ndata = data.replace('female', 1000)\n\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata = data.replace('Q', 10)\ndata = data.replace('S', 20)\ndata = data.replace('C', 30)","74671d56":"\ndata.groupby('Embarked').count()\ndata.info()\ndata.head()","887ace98":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.info()","000a8590":"test['Age'] = test['Age'].fillna(test['Age'].mean())  \ntest = test.drop('Ticket', 1)\ntest = test.drop('Cabin', 1)\ntest = test.drop('Name', 1)\n\ntest['Fare'] = test['Fare'].fillna(6.9500)\n\ntest = test.replace('male', 0.0001)\ntest = test.replace('female', 1000)\n\ntest = test.replace('Q', 10)\ntest = test.replace('S', 20)\ntest = test.replace('C', 30)\ntest.head()","a177a922":"test.info()","5877cba2":"y = data['Survived']\ndata = data.drop('Survived', 1)\nscaler = StandardScaler()\nX_train_st = scaler.fit_transform(data)\nX_test_st = scaler.transform(test)\n","11d9f6d9":"alg = LogisticRegression()\nalg.fit(X_train_st, y)\ny_pred = alg.predict(X_test_st)\npred = pd.DataFrame(y_pred)\npred.head()","174d2da9":"gs = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\n\npid = gs['PassengerId']\npred = pd.concat([pred,pid], 1)\nmerged = pred.merge(gs, on = 'PassengerId')","6665a928":"merged.columns = ['SurvivedPred', 'Pid', 'Survived']\nmerged['diff'] = merged['SurvivedPred'] - merged['Survived'] \nmerged.groupby('diff').count()\nprint('accuracy =', 394\/418)","b98107f8":"reslog = merged.drop('Survived', 1)\nreslog['diff'] = reslog['SurvivedPred']\nreslog = reslog.drop('diff', 1)\nreslog.columns = ['Survived', 'PassengerId']\nreslog.to_csv('result_log.csv', index=False)\nreslog","710c2d59":"score = accuracy_score(gs.drop('PassengerId', 1), reslog.drop('PassengerId', 1))\nscore","513c150b":"alg = DecisionTreeClassifier(random_state = 5, max_depth = 12)\nalg.fit(X_train_st, y)\ny_pred = alg.predict(X_test_st)\npred = pd.DataFrame(y_pred)","13759738":"score = accuracy_score(gs.drop('PassengerId', 1), pred)\nscore","2836cdf7":"pred = pd.concat([pid, pred], 1)\npred.columns = ['PassengerId', 'Survived']\npred.to_csv('result_DTC.csv', index=False)\npred","f09528f7":"**Decision Tree:**","288b5a5d":"#### Import libraries:","61f7902a":"**Logistic regression:**","e1403e5a":"## Model development:","02e6dbac":"## Overview and preprocessing:"}}