{"cell_type":{"c9c6ed10":"code","f9b8dbdb":"code","188f5a6d":"code","4403bd4e":"code","57afcb08":"code","ef534529":"code","988ca4ae":"code","6f9ef932":"code","2d3f12a4":"code","e8c86b16":"code","3504df94":"code","bcf33858":"code","eacb612b":"code","4c7f1384":"code","b15ffd71":"code","66ca4210":"code","e551113d":"code","27053e93":"code","f7d5f428":"code","4e17a1ff":"code","79707030":"code","53d0d16c":"code","6b791b8b":"code","eddffa93":"code","57578b9a":"code","21ff664b":"code","94ce84dd":"code","fc7bd389":"code","6bc04edb":"code","122fa4ef":"markdown","59b9ad08":"markdown","06b7a45d":"markdown","2e526f7e":"markdown","673f5572":"markdown","4f27efff":"markdown","d306720f":"markdown","8feab3c5":"markdown"},"source":{"c9c6ed10":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f9b8dbdb":"df = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndf.head() #i had already deleted the column Id and since i tried to run another command in the same line it was showing an error and thus i haven't removed the command from the notebook","188f5a6d":"df.describe()","4403bd4e":"df.info()","57afcb08":"df['Species'].value_counts()","ef534529":"#checking the number of null values in the dataset\ndf.isnull().sum()\n#the zeroes indicate no null values in the dataset","988ca4ae":"df['SepalLengthCm'].hist()","6f9ef932":"df['SepalWidthCm'].hist()","2d3f12a4":"df['PetalLengthCm'].hist()","e8c86b16":"df['PetalWidthCm'].hist()","3504df94":"colors = ['red', 'blue', 'yellow']\nspecies = ['Iris-setosa', 'Iris-virginica','Iris-versicolor']","bcf33858":"for i in range(3): #this is for Sepal Length v Sepal Width\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'], c = colors[i], label = species[i])\n    plt.xlabel(\"Sepal Length\")\n    plt.ylabel(\"Sepal Width\")\n    plt.legend() #this displays the classes in the top right of the graph","eacb612b":"rang = ['green', 'purple', 'orange']\nfor i in range(3): #this is for Petal Length v Petal Width\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'], c = rang[i], label = species[i])\n    plt.xlabel(\"Petal Length\")\n    plt.ylabel(\"Petal Width\")\n    plt.legend() #this displays the classes in the top right of the graph","4c7f1384":"for i in range(3):\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'], c = colors[i], label = species[i])\n    plt.xlabel(\"Sepal Length\")\n    plt.ylabel(\"Petal Length\")\n    plt.legend() #this displays the classes in the top right of the graph","b15ffd71":"for i in range(3):\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['SepalWidthCm'], x['PetalWidthCm'], c = rang[i], label = species[i])\n    plt.xlabel(\"Sepal Width\")\n    plt.ylabel(\"Petal Width\")\n    plt.legend() #this displays the classes in the top right of the graph","66ca4210":"df.corr()","e551113d":"fig, ax = plt.subplots(figsize = (4,4))\nsns.heatmap(df.corr(), annot = True, ax=ax, cmap = 'coolwarm')","27053e93":"from sklearn.preprocessing import LabelEncoder as le\n","f7d5f428":"df['Species'] = le().fit_transform(df['Species'])\ndf.head()","4e17a1ff":"from sklearn.model_selection import train_test_split\n#test - 30\n#train - 70\nX = df.drop(columns = ['Species'])\nY = df['Species']\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.30)\n","79707030":"#Logistic Regression - only the name contains regression but it is basically a classification model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()","53d0d16c":"model.fit(x_train, y_train)","6b791b8b":"print(\"Accuracy\",model.score(x_test, y_test)) #this accuracy can be further increased by hyper parameter tuning","eddffa93":"#knn - k nearest neighbours\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel2 = KNeighborsClassifier()","57578b9a":"model2.fit(x_train, y_train)","21ff664b":"print(\"Accuracy\", model2.score(x_test, y_test))","94ce84dd":"#decision tree\nfrom sklearn.tree import DecisionTreeClassifier\nmodel3 = DecisionTreeClassifier()","fc7bd389":"model3.fit(x_train, y_train)","6bc04edb":"print(\"Accuracy of DTC : \", model3.score(x_test, y_test))","122fa4ef":"## Histograms","59b9ad08":"## Loading the dataset","06b7a45d":"## Label Encoder - converting target class names to numbers","2e526f7e":"# Making a heatmap of the correlation matrix","673f5572":"## Training and Testing","4f27efff":"## Making the correlation matrix","d306720f":"## Scatterplots","8feab3c5":"## Preprocessing the data"}}