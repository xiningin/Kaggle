{"cell_type":{"55426349":"code","7d55f6dc":"code","6ba84d44":"code","2fd069b3":"code","e1d3ab0e":"code","54a0a05a":"code","3e61c2e6":"code","d09fbdb2":"code","b0089771":"code","1c7e59ee":"code","dab87c4d":"markdown","a48fcaae":"markdown","0c5e7739":"markdown","f99969d7":"markdown","51685f01":"markdown","e72d263e":"markdown","4306c6b6":"markdown","b6cada82":"markdown","3a66adfc":"markdown","92936579":"markdown","70bce27a":"markdown"},"source":{"55426349":"# Import packages\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\n%matplotlib inline\n\nfrom pandas import DataFrame\nfrom subprocess import check_output\nfrom ast import literal_eval\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","7d55f6dc":"# Data info\ndf_columns = pd.read_csv('..\/input\/leagueoflegends\/_columns.csv',sep=',')\ndf_original = pd.read_csv('..\/input\/leagueoflegends\/LeagueofLegends.csv',sep=',')\n\ndf_original[['bResult','goldblue','bKills','bTowers', 'bInhibs', 'bDragons', 'bBarons', 'bHeralds']].head(3)","6ba84d44":"#Look the information of the dataframe\ndf_original.info()\ndf = df_original.copy(deep=True)","2fd069b3":"# Transform all the columns containing pseudo lists to real lists\n\ndf['goldblue'] = df['goldblue'].apply(literal_eval)\ndf['bKills'] = df['bKills'].apply(literal_eval)\ndf['bTowers'] = df['bTowers'].apply(literal_eval)\ndf['bInhibs'] = df['bInhibs'].apply(literal_eval)\ndf['bDragons'] = df['bDragons'].apply(literal_eval)\ndf['bBarons'] = df['bBarons'].apply(literal_eval)\ndf['bHeralds'] = df['bHeralds'].apply(literal_eval)\n\ndf['goldred'] = df['goldred'].apply(literal_eval)\ndf['rKills'] = df['rKills'].apply(literal_eval)\ndf['rTowers'] = df['rTowers'].apply(literal_eval)\ndf['rInhibs'] = df['rInhibs'].apply(literal_eval)\ndf['rDragons'] = df['rDragons'].apply(literal_eval)\ndf['rBarons'] = df['rBarons'].apply(literal_eval)\ndf['rHeralds'] = df['rHeralds'].apply(literal_eval)","e1d3ab0e":"# Capturing only the information that interests us from the data lists\n\ndata = pd.DataFrame()\n\ndata['blue_tag'] = df['blueTeamTag']\ndata['blue_result'] = df['bResult']\ndata['blue_end_gold'] = df['goldblue'].apply(max)\ndata['blue_kills'] = df['bKills'].apply(len)\ndata['blue_towers'] = df['bTowers'].apply(len)\ndata['blue_inhibs'] = df['bInhibs'].apply(len)\ndata['blue_dragons'] = df['bDragons'].apply(len)\ndata['blue_barons'] = df['bBarons'].apply(len)\ndata['blue_heralds'] = df['bHeralds'].apply(len)\n\ndata['red_tag'] = df['redTeamTag']\ndata['red_result'] = df['rResult']\ndata['red_end_gold'] = df['goldred'].apply(max)\ndata['red_kills'] = df['rKills'].apply(len)\ndata['red_towers'] = df['rTowers'].apply(len)\ndata['red_inhibs'] = df['rInhibs'].apply(len)\ndata['red_dragons'] = df['rDragons'].apply(len)\ndata['red_barons'] = df['rBarons'].apply(len)\ndata['red_heralds'] = df['rHeralds'].apply(len)\n\ndata = data[(data['blue_tag'] == 'C9') | (data['red_tag'] == 'C9')]\ndata = data.reset_index(drop=True)\n\ndata['winner'] = np.where(data['blue_result'] == 1, 1, 2)\n\n\ndata","54a0a05a":"fig = plt.figure(figsize=(12,12))\n\nsns.set_style('darkgrid')\nsns.heatmap(data[['blue_end_gold','blue_kills', 'blue_towers', 'blue_inhibs', 'blue_dragons', 'blue_barons', 'blue_heralds',\n                  'red_end_gold','red_kills','red_towers','red_inhibs', 'red_dragons', 'red_barons', 'red_heralds', 'winner']].corr(), annot=True, square=True, cmap='coolwarm')","3e61c2e6":"X = data[['blue_end_gold','blue_kills', 'blue_towers', 'blue_inhibs', 'blue_dragons', 'blue_barons', 'blue_heralds',\n          'red_end_gold','red_kills','red_towers','red_inhibs', 'red_dragons', 'red_barons', 'red_heralds']]\ny = data['winner']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","d09fbdb2":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix,classification_report\n\nlogmodel = LogisticRegression(max_iter=1000)\nlogmodel.fit(X_train, y_train)\n\npredictions = logmodel.predict(X_test)","b0089771":"cr = classification_report(y_test, predictions)\nprint('Classification Report : \\n', cr)\n\nacc = round(logmodel.score(X_test, y_test) * 100, 2)\nprint(\"Accuracy of Logistic Regression: \" + str(acc) + \"%\")\n\ncm = confusion_matrix(y_test,predictions)\nsns.heatmap(cm, annot=True, fmt=\"d\", xticklabels=['2 win', '1 win'], yticklabels=['2 win', '1 win'],);","1c7e59ee":"# Predict the TSM x C9 match\nx1 = [[62729, 16, 9, 2, 1, 0, 0,\n       56672, 9, 4, 0, 3, 1, 0]]\n\npred = logmodel.predict_proba(x1).reshape(-1,1)\n\nwin = round(logmodel.predict(x1)[0], 2)\nprint(\"Winner is :\", win)\n\nfir_prob = round(pred[0][0] * 100, 2)\nsec_prob = round(pred[1][0] * 100, 2) \nprint(\"First team (blue) win probability is: \" + str(fir_prob) + \"%\")\nprint(\"Second team (red) win probability is: \" + str(sec_prob) + \"%\")","dab87c4d":"We can see that with this configuration, only in one of the 101 cases used for testing, the prediction made was wrong (99.01% of accuracy).","a48fcaae":"## Manipulating the Dataset\n\n1. Note that the type of most of the columns we are going to use are as objects, despite being filled with integers. Thus, the conversion of these columns is necessary.\n2. In addition, it is noted that certain columns are filled with 'lists' (pseudo lists), characterizing the value for each minute of the match, this should also be changed so that the data is more easily manipulated.\n3. In this case we are only interested in the matches that Cloud9 (C9) participated in, so we will do a filter on the dataframe to collect only the lines that have C9 in any of the name tags.\n4. We will also create a new column called `winner`, which will make interpreting who won the match more practical than analyzing the `bResult` and `rResult` columns. The `winner` column will have the number 1 if the blue team wins the match and the number 2 if the red team wins.","0c5e7739":"## Explore the Dataset\n\nA good indicator of how well your team is doing in a match is how many objectives your team has taken. These objectvies are:\n\n- Gold: Gold is earned by killing monsters, players and constructions, and must be spent on items to strengthen and assist your champion.\n- Player kills: Killing players provides extra cash in addition to slowing your competitor's progress.\n- Tower kills: Towers are placed in each lane of the map and must be taken in order for your team to advance.\n- Inhibitor kills: Inhibitors are placed in each team base, and must be taken in order for your team to take the inner towers and eventually win the game.\n- Dragon kills: The Dragon is a powerful neutral monster that gives you and your teammates buffs and gold, which help establish a competitive edge over the other team.\n- Baron kills: The Baron is the most powerful monster on the map that gives your team a very competitve edge over the other team.\n- Herald kills: The Rift Herald is the third most powerful neutral monster that gives you and your teammates buffs and gold, which help establish a competitive edge over the other team.\n\nWe will use these as our source of data when predicting the outcome of each match.","f99969d7":"## Conclusion\n\nWe were able to draw some conclusions from the presented study:\n\n1. Through the heatmap, it is evident that taking down the largest number of towers is extremely important, even more than the number of inhibitors. Furthermore, in certain situations where the player is in doubt as to whether it is worth sacrificing once to destroy a tower, it is apparently very beneficial.\n2. The prediction of who won the match from the factors used may seem silly once the match is over. But the same prediction can become more interesting in real time, by providing players with information about what the priorities should be during the game to reverse a game in which they are being defeated, for example.\n3. Although Logistic Regression is a relatively simple method, its accuracy reaches 100%, depending on the `random_state` used (=102, for example). However, in order to become more didactic, a `random_state` was purposely defined that would generate less than 100% accuracy, making the confusion matrix more understandable.","51685f01":"## Create and Train the Model\n\nWith our data split, we can create a logistic regression model and fit it to our training data\n","e72d263e":"## Testing the Predictor\n\nLet is simulate the test of the first row of the `data` dataset, in a **TSM x C9** match, where C9 lose the match, trying to predict who will win the match from the data provided.","4306c6b6":"\n\nFrom this heat map, we can see that the correlation for each objective is:\n\n- Towers Kills: **~.87** (Strong correlation)\n- Inhibitors Kills: **~.71** (Strong\/Moderate correlation)\n- Enemies Kills: ~.69 (Strong\/Moderate correlation)\n- Barons Kills: ~.60 (Moderate correlation)\n- Dragons Kills: ~.53 (Moderate correlation)\n- Gold Earn: ~.32 (Weak correlation)\n- Heralds Kills: ~.15 (Weak correlation)\n","b6cada82":"## Split the Data\n\nWe want to split our data into a set that we train the model on and a set we test the model with. Using Scikit-learn, we can split our data so that we train on the majority (66.6%) and test the rest (33.3%) to see how we do.\n","3a66adfc":"![Logo](https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/b\/b5\/League_of_Legends_logo_2019.png\/220px-League_of_Legends_logo_2019.png)\n\n## Introduction\nLeague of Legends (LoL) is a multiplayer online battle arena game developed and published by Riot Games for Microsoft Windows and macOS. Inspired by Warcraft III: The Frozen Throne mod Defense of the Ancients, the game follows a freemium model and is supported by microtransactions. In League of Legends, players assume the role of a \"champion\" with unique abilities and battle against a team of other players or computer-controlled champions. There are always two teams, the blue ones, which start at the bottom of the map and the red ones, which start at the top of the map. The goal is usually to destroy the opposing team Nexus, a structure that lies at the heart of a base protected by defensive structures, such as towers and inhibitors. To increase the strength of the champions, certain bosses can be defeated, such as dragon, baron, and herald. Each League of Legends match is discrete, with all champions starting relatively weak but increasing in strength by accumulating items and experience throughout the game. Champions span a variety of roles and blend a mixture of fantasy tropes. \n\n![Map](https:\/\/gamehag.com\/img\/uploaded\/Lci2gbpdudF4PppLvaGAEizERRhVdi.jpg)\n\nLeague of Legends has an active and widespread competitive scene, which is commonly described as the preeminent global eSport and a major factor towards the industry's legitimisation. In North America and Europe, Riot Games organises the League Championship Series (LCS), located in Los Angeles and the League of Legends European Championship (LEC), located in Berlin, respectively, each of which consists of 10 professional teams. Similar regional competitions exist in China (LPL), South Korea (LCK), and various other regions. These regional competitions culminate with the annual World Championship. \n\n","92936579":"## Evaluate the Created Model\n\nNow that we have a model, we can see how well we predicted the outcomes of the matches","70bce27a":"## The Dataset\n\nWe will analyze the dataset available in Kaggle, found [here](https:\/\/www.kaggle.com\/chuckephron\/leagueoflegends), which according to the [author](https:\/\/www.kaggle.com\/chuckephron), is a dataset with League of Legends competitive matches between 2015-2018. The matches include the NALCS, EULCS, LCK, LMS, and CBLoL leagues as well as the World Championship and Mid-Season Invitational tournaments.\n\nThe dataset in question is quite extensive and complete, but luckily, very well documented. The file `_columns.csv` seeks to clarify the meaning of each column of the data, while, of course, each line is a specific item. From these columns presented, we will mention here which ones will interest us for the analysis of the matches:\n\n- `blueTeamTag` Blue Team's tag name (ex. Cloud9 is C9)\n- `bResult` Result of the match for Blue Team 1 is a win, 0 is a loss \n- `goldblue`\tBlue Team's total gold value by minute\n- `bKills`\tList of Blue Team's kills - [Time in minutes, Victim, Killer, Assist1, Assist2, Assist3, Assist4, x_pos, y_pos]\n- `bTowers`\tList of minutes that Blue Team destroyed a tower and Tower Location\n- `bInhibs`\tList of minutes that Blue Team destroyed an inhibitor and Location\n- `bDragons`\tList of minutes that Blue Team killed a dragon\n- `bBarons`\tList of minutes that Blue Team killed a baron\n- `bHeralds`\tList of minutes that Blue Team killed a rift herald \n- `redTeamTag` Red Team's tag name (ex. Cloud9 is C9)\n- `bResult` Result of the match for Red Team 1 is a win, 0 is a loss \n- `goldblue`\tRed Team's total gold value by minute\n- `bKills`\tList of Red Team's kills - [Time in minutes, Victim, Killer, Assist1, Assist2, Assist3, Assist4, x_pos, y_pos]\n- `bTowers`\tList of minutes that Red Team destroyed a tower and Tower location\n- `bInhibs`\tList of minutes that Red Team destroyed an inhibitor and location\n- `bDragons`\tList of minutes that Red Team killed a dragon\n- `bBarons`\tList of minutes that Red Team killed a baron\n- `bHeralds`\tList of minutes that Red Team killed a rift herald "}}