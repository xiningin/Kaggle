{"cell_type":{"4a354f1d":"code","64215cf3":"code","690492ec":"code","a8987301":"code","14603cdb":"code","d1e98ac2":"code","ea17fb9e":"code","cb9e59a6":"code","8fc87adb":"code","1e4e24a6":"code","73975044":"code","cd9c18b3":"code","109de9d5":"code","02b63265":"code","4ce29de9":"code","dcda2aaa":"code","453a20be":"code","0af5fed0":"code","b430f772":"code","eabf66ce":"code","3acfe23b":"code","01eb307e":"code","b155826a":"code","e4c9d7a5":"code","97948431":"code","078ee40d":"code","76992e88":"code","a5e1502e":"code","15a7d3b6":"code","63d8bbfb":"code","ba29c6c3":"code","ec9b604e":"code","8a2176a3":"code","0f632726":"code","030c39c9":"code","2012f891":"code","73d280bf":"code","01af3a78":"code","deda7a14":"code","46fdfc67":"code","a9dc6726":"code","7224d21c":"code","76a954f6":"code","8e548d99":"code","c1cf439a":"code","2a84a03e":"code","beebdee6":"code","ea0eb2ca":"code","6455a91e":"code","524a4ca3":"code","dcab2f84":"code","76e5bbf8":"code","34450ab9":"code","923a61f6":"code","4ca8f465":"code","e0d5cd4d":"code","517d0dea":"code","959571ff":"code","30487bfa":"code","8a6b10d0":"code","c5b621e5":"code","5770a8ac":"code","75fdf8ef":"code","fb9600e3":"code","8c2cbe36":"code","2c2e925b":"markdown","1a4fbfaf":"markdown","c6a794ad":"markdown","10065b39":"markdown","c74c46c8":"markdown","05db13c8":"markdown","d68224d9":"markdown","3cc5713c":"markdown","ada8a74b":"markdown","d0a366cd":"markdown","c2b50683":"markdown"},"source":{"4a354f1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy             as np # linear algebra\nimport pandas            as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn           as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.cluster       import KMeans\n\nfrom tqdm import tqdm\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","64215cf3":"Mall_Customers = pd.read_csv('..\/input\/Mall_Customers.csv')","690492ec":"Mall_Customers['Gender'].value_counts().plot('bar')","a8987301":"class pre_processing:\n    \n    def __init__(self, data):\n        self.data   = data\n    \n    def missing_percent_plot(self):\n        missing_col = list(self.data.isna().sum() != 0)\n\n        try:\n            if True not in missing_col:\n                raise ValueError(\"There is no missing values.\")\n\n            self.data = self.data.loc[:,missing_col]\n            missing_percent = (self.data.isna().sum()\/ self.data.shape[0]) * 100\n\n            df = pd.DataFrame()\n            df['Total']        = self.data.isna().sum()\n            df['perc_missing'] = missing_percent\n            p = sns.barplot(x=df.perc_missing.index, y='perc_missing', data=df); plt.xticks(rotation=90)\n            plt.xticks(rotation=45);p.tick_params(labelsize=14)\n        except:\n            return print('There is no missing values...')\n        return df.sort_values(ascending =False, by='Total', axis =0)\n    \n    def reduce_mem_usage(self, verbose=True):\n    \n        numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n        start_mem = self.data.memory_usage().sum() \/ 1024**2 # Memory total(Ram)\n\n        for col in tqdm(self.data.columns):\n            col_type = self.data[col].dtypes\n            \n            if col_type in numerics:\n                c_min = self.data[col].min()\n                c_max = self.data[col].max()\n\n                # Int\n                if str(col_type)[:3] == 'int':\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        self.data[col] = self.data[col].astype(np.int8)\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        self.data[col] = self.data[col].astype(np.int16)\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        self.data[col] = self.data[col].astype(np.int32)\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        self.data[col] = self.data[col].astype(np.int64)  \n\n                # Float\n                else:\n                    if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                        self.data[col] = self.data[col].astype(np.float16)\n                    elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        self.data[col] = self.data[col].astype(np.float32)\n                    else:\n                        self.data[col] = self.data[col].astype(np.float64)\n\n        end_mem = self.data.memory_usage().sum() \/ 1024**2\n        if verbose: \n            print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n        return self.data\n    \n    def value_symmetry(self, target):\n        return self.data[target].value_counts().plot('bar')\n    \n    def kde_plots(self, columns : list, hue_col : str):\n        \n        \n        for c in columns:\n            # hue loop\n            for hue_value in self.data[hue_col].unique():\n                sns.distplot(self.data[self.data[hue_col] == hue_value][c], hist = False, label=hue_value)\n            plt.show()\n    \n    def plots(self, columns : list, hue_col):\n        _, axs = plt.subplots(int(round(len(columns) \/ 2, 0)), 5,figsize=(12,12))\n        \n        for n, c in enumerate(columns):\n            # hue loop\n            for hue_value in self.data[hue_col].unique():\n                sns.distplot(self.data[self.data[hue_col] == hue_value][c], hist = False, label=hue_value, ax=axs[n\/\/5][n%5])\n            plt.tight_layout()\n        plt.show()\n            ","14603cdb":"Mall_Customers_instance = pre_processing(Mall_Customers)","d1e98ac2":"columns=['Annual Income (k$)','Spending Score (1-100)', 'Age']\nhue_col = 'Gender'","ea17fb9e":"Mall_Customers_instance.plots(columns, hue_col)","cb9e59a6":"Mall_Customers_instance.missing_percent_plot()","8fc87adb":"len(Mall_Customers), len(Mall_Customers.CustomerID.unique())","1e4e24a6":"le = LabelEncoder()\nMall_Customers.Gender = le.fit_transform(Mall_Customers.Gender)","73975044":"le.classes_","cd9c18b3":"Mall_Customers.head()","109de9d5":"origin = Mall_Customers.copy()","02b63265":"ss = StandardScaler()\nMall_Customers = pd.DataFrame(ss.fit_transform(Mall_Customers), columns=Mall_Customers.columns)","4ce29de9":"inertia_list = []\nfor n_clusters in range(1, 10):\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42).fit(Mall_Customers)\n    inertia_list.append(kmeans.inertia_)","dcda2aaa":"sns.lineplot(x= [i for i in range(1, 10)], y=inertia_list,marker=True)","453a20be":"kmeans = KMeans(n_clusters=4, random_state=42).fit(Mall_Customers)\nnew_Mall_Customers = pd.concat([pd.DataFrame(kmeans.labels_, columns=['labels']), Mall_Customers], axis=1)","0af5fed0":"from sklearn.decomposition import PCA","b430f772":"pca=PCA(n_components=4)\npca.fit(Mall_Customers)\npca.explained_variance_ratio_.sum()","eabf66ce":"pca_Mall_Customers = pd.DataFrame(pca.fit_transform(Mall_Customers))","3acfe23b":"new_Mall_Customers['labels'] = kmeans.labels_\norigin['labels']             = kmeans.labels_","01eb307e":"# Multi-dimmention visualization with standardized and pca applied data\npd.tools.plotting.parallel_coordinates(new_Mall_Customers, 'labels', color=('#556270', '#C7F464', '#FF6B6B', '#000000'))","b155826a":"# plot with raw data\npd.tools.plotting.parallel_coordinates(origin, 'labels', color=('#556270', '#C7F464', '#FF6B6B', '#000000'))","e4c9d7a5":"# plot with standardized data\nss_origin = pd.DataFrame(ss.fit_transform(Mall_Customers), columns=Mall_Customers.columns)\nss_origin['labels'] = kmeans.labels_\npd.tools.plotting.parallel_coordinates(ss_origin, 'labels', color=('#556270', '#C7F464', '#FF6B6B', '#000000'))","97948431":"inertia_list = []\nfor n_clusters in range(1, 10):\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42).fit(origin)\n    inertia_list.append(kmeans.inertia_)\n# with raw data\nsns.lineplot(x= [i for i in range(1, 10)], y=inertia_list,marker=True)","078ee40d":"del origin['labels']","76992e88":"kmeans = KMeans(n_clusters=2, random_state=42).fit(origin)\norigin['labels'] = kmeans.labels_","a5e1502e":"pd.tools.plotting.parallel_coordinates(origin, 'labels', color=('#556270', '#C7F464'))","15a7d3b6":"del origin['labels']","63d8bbfb":"pca=PCA(n_components=3)\npca.fit(origin)\npca.explained_variance_ratio_.sum()","ba29c6c3":"origin_3d_pca = pd.DataFrame(pca.fit_transform(origin))","ec9b604e":"inertia_list = []\nfor n_clusters in range(1, 10):\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42).fit(origin_3d_pca)\n    inertia_list.append(kmeans.inertia_)\n    \n# with raw data\nsns.lineplot(x= [i for i in range(1, 10)], y=inertia_list,marker=True)","8a2176a3":"kmeans = KMeans(n_clusters=2, random_state=42).fit(origin_3d_pca)\norigin_3d_pca['labels'] = kmeans.labels_","0f632726":"Two_clusters_labels = list(kmeans.labels_)","030c39c9":"pd.tools.plotting.parallel_coordinates(origin_3d_pca, 'labels', color=('#556270', '#C7F464'))","2012f891":"origin_3d_pca.rename(index=str, columns={0:'zero', 1:'first', 2:'second'}, inplace=True)\norigin_3d_pca.labels[origin_3d_pca.labels == 0] = 'negative' \norigin_3d_pca.labels[origin_3d_pca.labels == 1] = 'positive'","73d280bf":"import plotly.graph_objs as go\nimport plotly            as py\nfrom plotly.offline      import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)    #THIS LINE IS MOST IMPORTANT AS THIS WILL DISPLAY PLOT ON \n#NOTEBOOK WHILE KERNEL IS RUNNING\n\n\ndata = []\nclusters = []\ncolors = ['rgb(228,26,28)','rgb(55,126,184)','rgb(77,175,74)']\n\nfor i in range(len(origin_3d_pca.labels.unique())):\n    name = origin_3d_pca.labels.unique()[i]\n    color = colors[i]\n    x = origin_3d_pca[ origin_3d_pca['labels'] == name ]['zero']\n    y = origin_3d_pca[ origin_3d_pca['labels'] == name ]['first']\n    z = origin_3d_pca[ origin_3d_pca['labels'] == name ]['second']\n    \n    trace = dict(\n        name = name,\n        x = x, y = y, z = z,\n        type = \"scatter3d\",    \n        mode = 'markers',\n        marker = dict( size=3, color=color, line=dict(width=0) ) )\n    data.append( trace )\n    \n    cluster = dict(\n        color = color,\n        opacity = 0.3,\n        type = \"mesh3d\",    \n        x = x, y = y, z = z )\n    data.append( cluster )\n\nlayout = dict(\n    width=800,\n    height=550,\n    autosize=False,\n    title='Market Customer Segmentation',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'        \n    ),\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig)\n\n# IPython notebook\n# py.iplot(fig, filename='pandas-3d-scatter-iris', validate=False)\n# url = py.plot(fig, filename='pandas-3d-scatter-iris', validate=False)","01af3a78":"del origin_3d_pca['labels']","deda7a14":"origin_3d_pca.head()","46fdfc67":"kmeans = KMeans(n_clusters=5, random_state=42).fit(origin_3d_pca)\norigin_3d_pca['labels'] = kmeans.labels_\nFive_clusters_labels = list(kmeans.labels_)","a9dc6726":"origin_3d_pca.labels[origin_3d_pca.labels == 0] = 'a' \norigin_3d_pca.labels[origin_3d_pca.labels == 1] = 'b'\norigin_3d_pca.labels[origin_3d_pca.labels == 2] = 'c' \norigin_3d_pca.labels[origin_3d_pca.labels == 3] = 'd'\norigin_3d_pca.labels[origin_3d_pca.labels == 4] = 'e'","7224d21c":"data = []\nclusters = []\ncolors = ['rgb(228,26,28)', 'rgb(55,126,184)', \n          'rgb(77,175,74)', 'rgb(0,255,199)', \n          'rgb(0,0,255)']\n\nfor i in range(len(origin_3d_pca.labels.unique())):\n    name = origin_3d_pca.labels.unique()[i]\n    color = colors[i]\n    x = origin_3d_pca[ origin_3d_pca['labels'] == name ]['zero']\n    y = origin_3d_pca[ origin_3d_pca['labels'] == name ]['first']\n    z = origin_3d_pca[ origin_3d_pca['labels'] == name ]['second']\n    \n    trace = dict(\n        name = name,\n        x = x, y = y, z = z,\n        type = \"scatter3d\",    \n        mode = 'markers',\n        marker = dict( size=3, color=color, line=dict(width=0) ) )\n    data.append( trace )\n    \n    cluster = dict(\n        color = color,\n        opacity = 0.3,\n        type = \"mesh3d\",    \n        x = x, y = y, z = z )\n    data.append( cluster )\n\nlayout = dict(\n    width=800,\n    height=550,\n    autosize=False,\n    title='Market Customer Segmentation(Five cluster)',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'        \n    ),\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig)\n\n# IPython notebook\n# py.iplot(fig, filename='pandas-3d-scatter-iris', validate=False)\n# url = py.plot(fig, filename='pandas-3d-scatter-iris', validate=False)","76a954f6":"origin_ss = ss.fit_transform(origin)\npca=PCA(n_components=3)\npca.fit(origin_ss)\norigin_ss_pca = pd.DataFrame(pca.transform(origin_ss))\npca.explained_variance_ratio_.sum()","8e548d99":"kmeans = KMeans(n_clusters=5, random_state=42).fit(origin_ss_pca)\norigin_ss_pca['labels'] = kmeans.labels_","c1cf439a":"origin_ss_pca.labels[origin_ss_pca.labels == 0] = 'a' \norigin_ss_pca.labels[origin_ss_pca.labels == 1] = 'b'\norigin_ss_pca.labels[origin_ss_pca.labels == 2] = 'c' \norigin_ss_pca.labels[origin_ss_pca.labels == 3] = 'd'\norigin_ss_pca.labels[origin_ss_pca.labels == 4] = 'e'","2a84a03e":"origin_ss_pca.rename(index=str, columns={0:'zero', 1:'first', 2:'second'}, inplace=True)","beebdee6":"data = []\nclusters = []\ncolors = ['rgb(228,26,28)', 'rgb(55,126,184)', \n          'rgb(77,175,74)', 'rgb(0,255,199)', \n          'rgb(0,0,255)']\n\nfor i in range(len(origin_ss_pca.labels.unique())):\n    name = origin_ss_pca.labels.unique()[i]\n    color = colors[i]\n    x = origin_ss_pca[ origin_ss_pca['labels'] == name ]['zero']\n    y = origin_ss_pca[ origin_ss_pca['labels'] == name ]['first']\n    z = origin_ss_pca[ origin_ss_pca['labels'] == name ]['second']\n    \n    trace = dict(\n        name = name,\n        x = x, y = y, z = z,\n        type = \"scatter3d\",    \n        mode = 'markers',\n        marker = dict( size=3, color=color, line=dict(width=0) ) )\n    data.append( trace )\n    \n    cluster = dict(\n        color = color,\n        opacity = 0.3,\n        type = \"mesh3d\",    \n        x = x, y = y, z = z )\n    data.append( cluster )\n\nlayout = dict(\n    width=800,\n    height=550,\n    autosize=False,\n    title='Market Customer Segmentation(Five cluster)',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'        \n    ),\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig)\n\n# IPython notebook\n# py.iplot(fig, filename='pandas-3d-scatter-iris', validate=False)\n# url = py.plot(fig, filename='pandas-3d-scatter-iris', validate=False)","ea0eb2ca":"del origin_ss_pca['labels']\nkmeans = KMeans(n_clusters=4, random_state=42).fit(origin_ss_pca)\norigin_ss_pca['labels'] = kmeans.labels_\n\norigin_ss_pca.labels[origin_ss_pca.labels == 0] = 'a' \norigin_ss_pca.labels[origin_ss_pca.labels == 1] = 'b'\norigin_ss_pca.labels[origin_ss_pca.labels == 2] = 'c' \norigin_ss_pca.labels[origin_ss_pca.labels == 3] = 'd'","6455a91e":"data = []\nclusters = []\ncolors = ['rgb(228,26,28)', 'rgb(55,126,184)', \n          'rgb(77,175,74)', 'rgb(0,255,199)']\n\nfor i in range(len(origin_ss_pca.labels.unique())):\n    name = origin_ss_pca.labels.unique()[i]\n    color = colors[i]\n    x = origin_ss_pca[ origin_ss_pca['labels'] == name ]['zero']\n    y = origin_ss_pca[ origin_ss_pca['labels'] == name ]['first']\n    z = origin_ss_pca[ origin_ss_pca['labels'] == name ]['second']\n    \n    trace = dict(\n        name = name,\n        x = x, y = y, z = z,\n        type = \"scatter3d\",    \n        mode = 'markers',\n        marker = dict( size=3, color=color, line=dict(width=0) ) )\n    data.append( trace )\n    \n    cluster = dict(\n        color = color,\n        opacity = 0.3,\n        type = \"mesh3d\",    \n        x = x, y = y, z = z )\n    data.append( cluster )\n\nlayout = dict(\n    width=800,\n    height=550,\n    autosize=False,\n    title='Market Customer Segmentation(Four cluster)',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'        \n    ),\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig)\n\n# IPython notebook\n# py.iplot(fig, filename='pandas-3d-scatter-iris', validate=False)\n# url = py.plot(fig, filename='pandas-3d-scatter-iris', validate=False)","524a4ca3":"del origin_ss_pca['labels']\nkmeans = KMeans(n_clusters=2, random_state=42).fit(origin_ss_pca)\norigin_ss_pca['labels'] = kmeans.labels_\n\norigin_ss_pca.labels[origin_ss_pca.labels == 0] = 'a' \norigin_ss_pca.labels[origin_ss_pca.labels == 1] = 'b'","dcab2f84":"data = []\nclusters = []\ncolors = ['rgb(228,26,28)', 'rgb(55,126,184)']\n\nfor i in range(len(origin_ss_pca.labels.unique())):\n    name = origin_ss_pca.labels.unique()[i]\n    color = colors[i]\n    x = origin_ss_pca[ origin_ss_pca['labels'] == name ]['zero']\n    y = origin_ss_pca[ origin_ss_pca['labels'] == name ]['first']\n    z = origin_ss_pca[ origin_ss_pca['labels'] == name ]['second']\n    \n    trace = dict(\n        name = name,\n        x = x, y = y, z = z,\n        type = \"scatter3d\",    \n        mode = 'markers',\n        marker = dict( size=3, color=color, line=dict(width=0) ) )\n    data.append( trace )\n    \n    cluster = dict(\n        color = color,\n        opacity = 0.3,\n        type = \"mesh3d\",    \n        x = x, y = y, z = z )\n    data.append( cluster )\n\nlayout = dict(\n    width=800,\n    height=550,\n    autosize=False,\n    title='Market Customer Segmentation(Two cluster)',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'        \n    ),\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig)\n\n# IPython notebook\n# py.iplot(fig, filename='pandas-3d-scatter-iris', validate=False)\n# url = py.plot(fig, filename='pandas-3d-scatter-iris', validate=False)","76e5bbf8":"Two_clusters  = origin.copy()\nFive_clusters = origin.copy()","34450ab9":"Two_clusters['labels'] = Two_clusters_labels\nFive_clusters['labels'] = Five_clusters_labels","923a61f6":"columns=['Annual Income (k$)','Spending Score (1-100)', 'Age']\nhue_col = 'labels'\n\nTwo_clusters_instance = pre_processing(Two_clusters)\n \nTwo_clusters_instance.value_symmetry(hue_col)\nTwo_clusters_instance.plots(columns, hue_col)","4ca8f465":"columns=['Annual Income (k$)','Spending Score (1-100)', 'Age']\nhue_col = 'labels'\n\nFive_clusters_instance = pre_processing(Five_clusters)\n \nFive_clusters_instance.value_symmetry(hue_col)\nFive_clusters_instance.plots(columns, hue_col)","e0d5cd4d":"Two_clusters['labels']  = Two_clusters_labels\nFive_clusters['labels'] = Five_clusters_labels","517d0dea":"sns.scatterplot(x=\"Age\", y=\"Annual Income (k$)\",\n                hue=\"labels\", \n                sizes=(1, 8), linewidth=0,\n                data=Two_clusters)","959571ff":"sns.scatterplot(y=\"Spending Score (1-100)\", x=\"Annual Income (k$)\",\n                hue=\"labels\", \n                sizes=(1, 8), linewidth=0,\n                data=Two_clusters)","30487bfa":"# 'Female', 'Male'\nsns.boxplot(x=\"Gender\", y=\"Annual Income (k$)\", hue='labels',data=Two_clusters)","8a6b10d0":"Two_clusters.head()","c5b621e5":"sns.pairplot(Two_clusters.drop(['CustomerID'], axis=1), hue=\"labels\")","5770a8ac":"sns.scatterplot(x=\"Age\", y=\"Annual Income (k$)\",\n                hue=\"labels\", \n                sizes=(1, 8), linewidth=0,\n                palette = ['#ff0000', '#ffc300', '#00ffff', '#00ff00', '#000000'],\n                data=Five_clusters)","75fdf8ef":"sns.scatterplot(y=\"Spending Score (1-100)\", x=\"Annual Income (k$)\",\n                hue=\"labels\", \n                sizes=(1, 8), linewidth=0,\n                palette = ['#ff0000', '#ffc300', '#00ffff', '#00ff00', '#000000'],\n                data=Five_clusters)","fb9600e3":"# 'Female', 'Male'\nsns.boxplot(x=\"Gender\", y=\"Annual Income (k$)\", hue='labels',data=Five_clusters)","8c2cbe36":"sns.pairplot(Five_clusters.drop(['CustomerID'], axis=1), hue=\"labels\")","2c2e925b":"- Spending score indicate, score that market company measured. Basically if you're young, then whatever your state of bank account company measure your spending score higher. However if you're old, then whatever your state of bank account company measure your spending score lower. Finally, if your income is average income, then whatever your age, company measure your spending score at middle score. ","1a4fbfaf":"- If we apply standardization and pca with 3 components, we get 86% of remaining variance ratio while non-standardized data get 99% of remaining variance ratio.","c6a794ad":"- Lets examine raw data also","10065b39":"- Let's analise with Two and five clusters ","c74c46c8":"- What about standardization and pca applied data.","05db13c8":"- Non-standardized data make shoulder method useful.","d68224d9":"- Also, let's see 4 and 2 clusters on this standardized and pca applied data.","3cc5713c":"- Let's visualize 3 dimensional scatter plot","ada8a74b":"- Seems like there is more clusters than two.","d0a366cd":"- We applied pca to make possible visualizing 3d plot.","c2b50683":"- Raw data with two clusters looks more clear."}}