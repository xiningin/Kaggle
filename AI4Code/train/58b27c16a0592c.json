{"cell_type":{"9e80057c":"code","133d5216":"code","8b5ee628":"code","8c39833d":"code","702b62f7":"code","554e93e4":"code","792a38b2":"code","292b4ae7":"code","9ddf2283":"code","e8240629":"code","075e3251":"code","9b977f99":"code","219fc50c":"code","6e84fd7a":"code","63092baa":"code","6be05edb":"code","e9e1a140":"code","d8be9421":"code","6a8c943b":"code","661966fb":"code","81caf63e":"code","185810e9":"markdown","f92e53bc":"markdown","66ccce99":"markdown"},"source":{"9e80057c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","133d5216":"df = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")","8b5ee628":"df.head()","8c39833d":"df.info()","702b62f7":"df[\"Platform\"].value_counts()","554e93e4":"df.isnull().sum()","792a38b2":"df.dropna(inplace=True)","292b4ae7":"df.describe().T","9ddf2283":"df.corr()","e8240629":"f,ax = plt.subplots(figsize = (15,15))\nsns.heatmap(df.corr(),annot = True,fmt = \".3f\",linewidths = 3.1,linecolor = \"black\",square = True,vmin = 0.1)","075e3251":"f,ax = plt.subplots(figsize = (15,15))\ndata = df.loc[df.Platform == \"DS\",:]\ndata_corr = np.triu(data.corr())\nsns.heatmap(data_corr,annot = True,fmt = \".3f\",linewidths = 3.1,linecolor = \"black\",square = True,vmin = 0.1);","9b977f99":"new_data = df.iloc[:,[5,6]]","219fc50c":"new_data.NA_Sales.mean()","6e84fd7a":"t = new_data.NA_Sales.mean()\nnew_data[\"Effect_rate\"] = [\"perfect\" if value >= t  else \"low\" for value in new_data[\"NA_Sales\"]]","63092baa":"new_data.head()","6be05edb":"def lineplot(x,y):\n    \"\"\" x : data 1\n        y : data 2\n        return : LinePlot\n    \"\"\"\n    f,ax = plt.subplots(figsize = (9,5))\n    x.plot(kind = \"line\",linestyle = \":\",alpha = 0.5,linewidth = 3,color = \"r\",ax = ax,grid = True,)\n    y.plot(kind = \"line\",linestyle = \"-.\",alpha = 0.5,linewidth = 3,color = \"b\",ax = ax,grid = True)\n    plt.xlabel(\"Axis X\")\n    plt.ylabel(\"Axis Y\")\n    plt.show()","e9e1a140":"liste = df.select_dtypes(\"float64\",\"int64\").columns\nnum = [0,1,2,3,4]\nprint([lineplot(df[liste[i]],df[liste[i+1]]) for i in num])","d8be9421":"def scatterPlot(x,y,hue = None):\n    \"\"\" x : data 1\n        y : data 2\n        hue : If you want 3. dimension you will should use it\n        return : ScatterPlot\n    \"\"\"\n    f,ax = plt.subplots(figsize = (9,9))\n    return sns.scatterplot(x,y,hue)","6a8c943b":"liste = df.select_dtypes(\"float64\",\"int64\").columns\nnum = [0,1,2,3,4]\nprint([scatterPlot(df[liste[i]],df[liste[i+1]]) for i in num])","661966fb":"def histogram(x):\n    \"\"\" x : data 1\n\n        return : Histogram\n    \"\"\"\n    f,ax = plt.subplots(figsize = (9,9))\n    return plt.hist(x,bins = 50)","81caf63e":"histogram(df[\"Year\"])","185810e9":"# Introduction\n\nThe Data gives us information for video games.\n\n1. [Load Data & Look Data](#1)\n1. [Visualization Data](#2)","f92e53bc":"<a id = \"2\"><\/a>\n# Basic Visualization Data","66ccce99":"<a id = \"1\"><\/a>\n# Load Data & Look Data"}}