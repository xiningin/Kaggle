{"cell_type":{"9ce808d1":"code","3efdce0d":"code","41faa22f":"code","b42cf234":"code","3ba945a0":"code","29d8dbb6":"code","dd9f472b":"code","c5c70266":"code","568d7037":"code","f7856655":"code","f2921b8e":"code","ade01894":"code","117fb293":"code","df6edc44":"markdown","90c96664":"markdown","b0e7fc1d":"markdown","52b21b23":"markdown","f736ffb4":"markdown","2d63e5e2":"markdown","f01a4bec":"markdown","e6977476":"markdown","14ba41c5":"markdown","6afb43b6":"markdown","ed1934c5":"markdown","e28f16ea":"markdown","97482da1":"markdown","99add89a":"markdown","ec11f7df":"markdown"},"source":{"9ce808d1":"import numpy as np\nimport pandas as pd\nfrom copy import deepcopy\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3efdce0d":"def custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)","41faa22f":"pink = [\"#861388\",\"#E15A97\",\"#EEABC4\",\"#C799A6\",\"#4B2840\"]\nblue = [\"#C6EBBE\",\"#A9DBB8\",\"#5887FF\",\"#55C1FF\",\"#E9D2F4\"]\ncustom_palette(pink)\ncustom_palette(blue)","b42cf234":"train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')\n\ndisplay(train_df.head())\ndisplay(test_df.head())\ndisplay(sample_submission.head())","3ba945a0":"print('Rows and Columns in train dataset:', train_df.shape)\nprint('Rows and Columns in test dataset:', test_df.shape)","29d8dbb6":"display(sum(train_df.isnull().sum()))\ndisplay(sum(test_df.isnull().sum()))","dd9f472b":"cont_features = [feature for feature in train_df.columns if 'cont' in feature]\ncat_features = [feature for feature in train_df.columns if 'cat' in feature]","c5c70266":"num_rows, num_cols = 6, 2\nf, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(16, 24))\nf.suptitle('Distribution of Continuous Features in Tran Dataset', fontsize=16)\n\nfor index, column in enumerate(train_df[cont_features].columns):\n    i,j = (index \/\/ num_cols, index % num_cols)\n    sns.kdeplot(train_df.loc[train_df['target'] == 0, column], color=pink[2], shade=True, ax=axes[i,j])\n    sns.kdeplot(train_df.loc[train_df['target'] == 1, column], color=blue[3], shade=True, ax=axes[i,j])\n\nf.delaxes(axes[5, 1])\nplt.tight_layout()\nplt.show()","568d7037":"num_rows, num_cols = 6, 2\nf, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(16, 24))\nf.suptitle('Distribution of Continuous Features in Test Dataset', fontsize=16)\n\nfor index, column in enumerate(test_df[cont_features].columns):\n    i,j = (index \/\/ num_cols, index % num_cols)\n    sns.kdeplot(test_df[column], color=pink[1], shade=True, ax=axes[i,j])\n\nf.delaxes(axes[5, 1])\nplt.tight_layout()\nplt.show()","f7856655":"corr = train_df[cont_features].corr().abs()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\nfig, ax = plt.subplots(figsize=(14, 14))\n\n#plot heatmap\nsns.heatmap(corr, mask=mask, annot=True, fmt=\".2f\", cmap='coolwarm',\n            cbar_kws={\"shrink\": .8}, vmin=0, vmax=1)\n\n# yticks\nplt.yticks(rotation=0)\nplt.show()","f2921b8e":"chart_df = pd.DataFrame(train_df[cont_features].corrwith(train_df['target']))\nchart_df.columns = ['corr']\nfig = px.bar(\n    chart_df['corr'], \n    y=\"corr\",\n    title='Correlation of Continuous Features with Target'\n)\n\nfig.show()","ade01894":"train_0_df = train_df.loc[train_df['target'] == 0]\ntrain_1_df = train_df.loc[train_df['target'] == 1]\n\nnum_rows, num_cols = 10,2\nfig = make_subplots(rows=num_rows, cols=num_cols)\n\nfor index, column in enumerate(train_df[cat_features].columns):\n    i,j = ((index \/\/ num_cols)+1, (index % num_cols)+1)\n    data = train_0_df.groupby(column)[column].count().sort_values(ascending=False)\n    data = data if len(data) < 10 else data[:10]\n    fig.add_trace(go.Bar(\n        x = data.index,\n        y = data.values,\n        marker_color=pink[1],\n        name='target: 0', \n    ), row=i, col=j)\n\n    data = train_1_df.groupby(column)[column].count().sort_values(ascending=False)\n    data = data if len(data) < 10 else data[:10]\n    fig.add_trace(go.Bar(\n        x = data.index,\n        y = data.values,\n        marker_color=blue[3],\n        name='target: 1', \n    ), row=i, col=j)\n    \n    fig.update_xaxes(title=column, row=i, col=j)\n    fig.update_layout(barmode='stack')\n    \nfig.update_layout(\n    autosize=False,\n    width=1200,\n    height=1600,\n    showlegend=False,\n)\nfig.show()","117fb293":"num_rows, num_cols = 10,2\nfig = make_subplots(rows=num_rows, cols=num_cols)\n\nfor index, column in enumerate(test_df[cat_features].columns):\n    i,j = ((index \/\/ num_cols)+1, (index % num_cols)+1)\n    data = train_0_df.groupby(column)[column].count().sort_values(ascending=False)\n    data = data if len(data) < 10 else data[:10]\n    fig.add_trace(go.Bar(\n        x = data.index,\n        y = data.values,\n        marker_color=blue[2],\n    ), row=i, col=j)\n\n    fig.update_xaxes(title=column, row=i, col=j)\n    fig.update_layout(barmode='stack')\n    \nfig.update_layout(\n    autosize=False,\n    width=1200,\n    height=1600,\n    showlegend=False,\n)\nfig.show()","df6edc44":"<h1 id=\"title\" style=\"color:white;background:black;\">\n    <\/br>\n    <center>\n        [TPS - Mar 2021] Basic EDA\n    <\/center>\n<\/h1>","90c96664":"# References\n- https:\/\/www.kaggle.com\/ruchi798\/tps-march-2021-eda-rapids\n- https:\/\/www.kaggle.com\/andreshg\/tps-march-a-complete-study#2.-Feature-Engineering-%F0%9F%94%A7\n- https:\/\/www.kaggle.com\/dwin183287\/tps-mar-2021-eda-models","b0e7fc1d":"# Import Libraries \ud83d\udcda","52b21b23":"## Test","f736ffb4":"# Categorical Features","2d63e5e2":"## Train","f01a4bec":"# Reading the csv\ud83d\udcda","e6977476":"## Missing values","14ba41c5":"## Correlation of Continuous Features with Target","6afb43b6":"## Check Train & Test shape","ed1934c5":"## Train","e28f16ea":"# Basic EDA - Continuous Features","97482da1":"# General Info.\ud83d\udd0e","99add89a":"## Test","ec11f7df":"## Correlation for Continuous Features in Train"}}