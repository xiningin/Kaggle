{"cell_type":{"7ce47ebd":"code","fafb0e50":"code","14db12b5":"code","851dffbf":"code","66050d0a":"code","85e8d53f":"code","aea7c6d6":"code","7cb55062":"code","aa6a7430":"code","868b5809":"code","b5732be3":"code","8a0947ea":"code","3b193689":"code","c67a8328":"code","2ec6e004":"code","d6406402":"code","f3b521a9":"code","fcdccc9c":"code","4672d57a":"code","fdefce17":"code","7deeca9d":"code","f6fe248d":"code","4899663c":"code","4ba4f07f":"code","fddd56c3":"code","c5850981":"code","59f1d7f6":"code","d8ab0070":"code","9828d38a":"code","a83222e2":"code","c7e20389":"code","8621ce6c":"code","3ae16f0a":"code","3e31e96f":"code","b72fc76d":"code","1524192c":"code","5431c6b2":"code","7d8fbc6a":"code","8dc614ae":"code","dbba09df":"code","0c4dbc9b":"code","00aba1ab":"code","20c2ce66":"code","0691560f":"code","8b614dfa":"code","f72ddfa0":"code","531f649a":"code","320bfd9d":"code","8e22cdf8":"code","9a35bbda":"code","d49ffdee":"code","9170c349":"code","7499dcce":"code","b366ec3f":"code","fedf0f2f":"code","49321936":"code","fce88972":"code","21944ba0":"code","3039a3c8":"code","51dd8594":"code","1de91ef8":"code","3af382e9":"markdown","35f1868c":"markdown","0f64791a":"markdown","5b2ae415":"markdown","7763ea5f":"markdown","01b11513":"markdown","84b486f0":"markdown","d372a93b":"markdown","cef0a882":"markdown"},"source":{"7ce47ebd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns","fafb0e50":"pd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);\n\npd.set_option('display.float_format', lambda x: '%.0f' % x)\nimport matplotlib.pyplot as plt","14db12b5":"df_2010_2011 = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")","851dffbf":"df = df_2010_2011.copy()","66050d0a":"df.head()","85e8d53f":"# Unique products\ndf[\"Description\"].nunique()","aea7c6d6":"# Each products counts are..\ndf[\"Description\"].value_counts().head()","7cb55062":"# Best-seller\ndf.groupby(\"Description\").agg({\"Quantity\":\"sum\"}).head()","aa6a7430":"df.groupby(\"Description\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\", ascending = False).head()","868b5809":"# Unique invoice\ndf[\"Invoice\"].nunique()","b5732be3":"df[\"TotalPrice\"] = df[\"Quantity\"]*df[\"Price\"]","8a0947ea":"df.head()","3b193689":"# The top invoices for price\ndf.groupby(\"Invoice\").agg({\"TotalPrice\":\"sum\"}).head()","c67a8328":"# The most expensive product is \"POSTAGE\"\ndf.sort_values(\"Price\", ascending = False).head()","2ec6e004":"df[\"Country\"].value_counts().head()","d6406402":"df.isnull().sum()","f3b521a9":"df.dropna(inplace = True)","fcdccc9c":"df.shape","4672d57a":"df.describe([0.01,0.05,0.10,0.25,0.50,0.75,0.90,0.95, 0.99]).T","fdefce17":"for feature in [\"Quantity\",\"Price\",\"TotalPrice\"]:\n\n    Q1 = df[feature].quantile(0.01)\n    Q3 = df[feature].quantile(0.99)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if df[(df[feature] > upper) | (df[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(df[(df[feature] > upper) | (df[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")","7deeca9d":"df.head()","f6fe248d":"df[\"InvoiceDate\"].min()","4899663c":"df[\"InvoiceDate\"].max()","4ba4f07f":"import datetime as dt\ntoday_date = dt.datetime(2011,12,9)","fddd56c3":"today_date","c5850981":"df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()","59f1d7f6":"df[\"Customer ID\"] = df[\"Customer ID\"].astype(int)","d8ab0070":"(today_date - df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).head()","9828d38a":"temp_df = (today_date - df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))","a83222e2":"temp_df.rename(columns={\"InvoiceDate\": \"Recency\"}, inplace = True)","c7e20389":"temp_df.head()","8621ce6c":"recency_df = temp_df[\"Recency\"].apply(lambda x: x.days)","3ae16f0a":"recency_df.head()","3e31e96f":"temp_df = df.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})","b72fc76d":"temp_df.head()","1524192c":"temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"}).head()","5431c6b2":"freq_df = temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"})\nfreq_df.rename(columns={\"Invoice\": \"Frequency\"}, inplace = True)\nfreq_df.head()","7d8fbc6a":"monetary_df = df.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"})","8dc614ae":"monetary_df.head()","dbba09df":"monetary_df.rename(columns={\"TotalPrice\": \"Monetary\"}, inplace = True)","0c4dbc9b":"print(recency_df.shape,freq_df.shape,monetary_df.shape)","00aba1ab":"rfm = pd.concat([recency_df, freq_df, monetary_df],  axis=1)","20c2ce66":"rfm.head()","0691560f":"rfm[\"RecencyScore\"] = pd.qcut(rfm['Recency'], 5, labels = [5, 4, 3, 2, 1])","8b614dfa":"rfm[\"FrequencyScore\"] = pd.qcut(rfm['Frequency'], 5, labels = [1, 2, 3, 4, 5])","f72ddfa0":"rfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels = [1, 2, 3, 4, 5])","531f649a":"rfm.head()","320bfd9d":"(rfm['RecencyScore'].astype(str) + \n rfm['FrequencyScore'].astype(str) + \n rfm['MonetaryScore'].astype(str)).head()","8e22cdf8":"rfm[\"RFM_SCORE\"] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str) + rfm['MonetaryScore'].astype(str)","9a35bbda":"rfm.head()","d49ffdee":"rfm.describe().T","9170c349":"rfm[rfm[\"RFM_SCORE\"] == \"555\"].head()","7499dcce":"rfm[rfm[\"RFM_SCORE\"] == \"111\"].head()","b366ec3f":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","fedf0f2f":"rfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)\nrfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)\nrfm.head()","49321936":"rfm[[\"Segment\", \"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"count\"])","fce88972":"rfm[rfm[\"Segment\"] == \"Need Attention\"].head()","21944ba0":"rfm[rfm[\"Segment\"] == \"New Customers\"].index","3039a3c8":"new_df = pd.DataFrame()\nnew_df[\"NewCustomerID\"] = rfm[rfm[\"Segment\"] == \"New Customers\"].index","51dd8594":"new_df.head()","1de91ef8":"new_df.to_csv(\"new_customers.csv\")","3af382e9":"### Monetary","35f1868c":"## Data Understanding","0f64791a":"Data Preparation","5b2ae415":"Within this table, information about 3 customer groups were analyzed and actions related to these analyzes were determined.\n\n1. Cant Loose Them: This group consists of 81 customers. The Recency average is 141, the Frequency average is 184, and the Monetary average is 2346.\n\n2. Horse Risk: This group consists of 577 customers. Recency averages are 164, Frequency averages are 57, and Monetary averages are 950.\n\n3. Need Attention: This group consists of 208 customers. Recency averages are 50, Frequency averages are 42, Monetary averages are 833.\n\nYorumlar\n\nThe most risky and potentially focused customers on this table are the \"Can't Loose Them\" class. This class is the most valuable customer class in this table. Recency value is low, but it is the highest when looking at Frequence. In other words, this customer is the class with the highest potential to leave us. Considering all customer classes, Monetary is one of the customers with the highest value, but this group of customers has not recently exchanged. He approached leaving our company. This is the most important customer class for our company.\n\nA class that should not be lost is the \"Horse Risk\" group of customers. This group is also one of the highest classes in Frequency. It also attracts attention as it is the third-class customer group that is the most customer. Recency value of this group is low. This is an indication that this group has not been shopping recently. It is necessary to bring these customers back to the company.\n\nIn the \"Need Attention\" class, frequency and recency values \u200b\u200bare an average customer group. This customer group is also a class that needs attention because it has the potential to shift to both regions. As an action suggestion, if supported by promotions, discounts and loyalty to the company, this customer group can be shifted towards loyal customers or potential loyal customers. However, as a result of such action attempts, they may also shift to the \"horse risk\" group or they may also be included in the \"about to sleep\" class.\n\nAs actions to be taken for these groups, their loyalty should be increased through promotions, discounts and special team campaigns. Special activities should be carried out for these customer groups. Actions to be taken for these groups will provide higher efficiency compared to other customer classes. For this reason, information about these 3 customer groups should be extracted and this customer information should be shared with the business intelligence department. These departments, which have a business intelligence department, should be directed to departments such as purchasing and marketing by removing the contact information of these customers and they should mobilize these customers regarding their own business areas.\n\nBelow, information about the \"Need Attention\" customer group has been extracted as \"new_customers.csv\" file. This file is prepared to be sent to the business intelligence department.","7763ea5f":"### Recency","01b11513":"## RFM SCORES","84b486f0":"### Frequency","d372a93b":"## Evaluation and Action Proposal","cef0a882":"# RFM ANALYSIS FOR ONL\u0130NE RETAIL DATA SET\n\n## Data Set Information:\n\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Online+Retail+II\n\nThis Online Retail II data set contains all the transactions occurring for a UK-based and registered, non-store online retail between 01\/12\/2009 and 09\/12\/2011.The company mainly sells unique all-occasion gift-ware. Many customers of the company are wholesalers.\n\n## Attribute Information:\n\nInvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.\nStockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\nDescription: Product (item) name. Nominal.\nQuantity: The quantities of each product (item) per transaction. Numeric.\nInvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated.\nUnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).\nCustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\nCountry: Country name. Nominal. The name of the country where a customer resides."}}