{"cell_type":{"70fd13b0":"code","3d481c3b":"code","6b2c9ff2":"code","943b6fee":"code","5a81f8c0":"code","695a1edb":"code","00667114":"code","ca276bd2":"code","8eaf7ad1":"code","ffd907af":"code","3e59c231":"code","b952a6fd":"code","16bbd1b7":"markdown"},"source":{"70fd13b0":"# importar librer\u00edas necesarias para nuestro modelo\nimport tensorflow as tf\nimport numpy as np\nimport sklearn\nfrom matplotlib import pyplot as plt\nfrom tensorflow import keras as keras","3d481c3b":"IMAGE_SIZE = (224, 224, 3) # el tama\u00f1o con el que pre-procesaremos nuestras imagenes\n\ndef preprocess_data(train_directory, test_directory):\n    generator = keras.preprocessing.image.ImageDataGenerator()\n\n    train_dataset = generator.flow_from_directory(batch_size = 32,\n    directory = train_directory,\n    shuffle = True,\n    target_size = IMAGE_SIZE[:2],\n    class_mode = 'binary'\n    )\n\n    val_dataset = generator.flow_from_directory(batch_size = 32,\n    directory = test_directory,\n    shuffle = True,\n    target_size = IMAGE_SIZE[:2],\n    class_mode = 'binary'\n    )\n    return train_dataset, val_dataset","6b2c9ff2":"train_generator, test_generator = preprocess_data('..\/input\/chest-xray-pneumonia\/chest_xray\/train',\n                                                 '..\/input\/chest-xray-pneumonia\/chest_xray\/test')\n# creamos los generadores con nuestra funci\u00f3n hecha previamente","943b6fee":"# importamos nuestro modelo entrenado previamente\nbase_model = tf.keras.applications.EfficientNetB0(\n                                            include_top = False,\n                                            weights = 'imagenet'\n                                            )","5a81f8c0":"base_model.trainable = False\ninputs = keras.Input(shape=IMAGE_SIZE) # le a\u00f1adimos una capa con entrada del tama\u00f1o de nuestra imagen\nx = base_model(inputs) # le damos la capa de entrada a nuestro modelo\nx = keras.layers.Conv2D(128, 3, activation = 'relu')(x) # capa de extracci\u00f3n de caracter\u00edsticas (entrenable)\nx = keras.layers.GlobalAveragePooling2D()(x) # aplanamos nuestros filtros a una dimensi\u00f3n\noutputs = keras.layers.Dense(1, activation='sigmoid')(x)","695a1edb":"# declaramos el modelo\nmodel = keras.Model(inputs, outputs)","00667114":"# sumario de nuestro modelo y sus capas\nmodel.summary()\n# como se observa, tenemos un tama\u00f1o de entrada de 224, 224, 3 (224*224 y los 3 canales de color RGB)\n# y un tama\u00f1o de salida de 1, que es una decisi\u00f3n binaria que puede ser 0 o 1 si predice falso o verdadero, respectivamente.","ca276bd2":"# compilamos el modelo con el optimizador Adam (Adaptive Momentum with Stochastic Gradients)\nmodel.compile(optimizer = keras.optimizers.Adam(), loss = 'binary_crossentropy', metrics = ['accuracy'])","8eaf7ad1":"# entrenar el modelo con ambos sets de datos para conseguir la precisi\u00f3n de entrenamiento y la precisi\u00f3n de validaci\u00f3n\nmodel.fit(train_generator, epochs = 4, validation_data = test_generator)\n# nuestro modelo, en 5 \u00e9pocas, alcanza una precisi\u00f3n de 98% en el set de entrenamiento y de 82% sobre el set de validaci\u00f3n.","ffd907af":"# guardamos nuestro modelo (44.5MB)\nmodel.save('PneuNetV2.h5')","3e59c231":"# comprimimos nuestro modelo a TensorFlow Lite\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()","b952a6fd":"# guardar el modelo comprimido (25MB --- 18MB) con una reducci\u00f3n de +25%\n# este modelo cuantizado con TensorFlow Lite permite su uso en microcontroladores o dispositivos m\u00f3biles.\nwith open('PneuNetV2_Lite.tflite', 'wb') as f:\n  f.write(tflite_model)","16bbd1b7":"# PneuNetV2\nAlgoritmo de Aprendizaje Profundo para clasificaci\u00f3n de im\u00e1genes por radiograf\u00eda hacia un diagn\u00f3stico preciso de enfermedades com\u00fanes de pulm\u00f3n, ya sean virales o bacterianas.\n\nEste modelo usa aprendizaje por transferencia en el modelo EfficientNetB0 de clasificaci\u00f3n mediante redes neuronales convolucionales (CNNs), entrenado previamente en el set de datos ImageNet. Esto hace que su error sea a\u00fan menor que entrenar un modelo desde el principio. Adem\u00e1s, el haber sido entrenado en un set de datos m\u00e1s extenso previamente, hace que se puedan utilizar menos im\u00e1genes y a\u00fan as\u00ed tener una precisi\u00f3n mayor. Incluso, al ser un modelo desarrollado con la librer\u00eda de aprendizaje profundo TensorFlow y TensorFlow Lite, permite una compresi\u00f3n de 25-50% de su tama\u00f1o original para uso en sistemas embedidos, microcontroladores, celulares, o con poca capacidad de procesamiento, manteniendo la misma precisi\u00f3n.\n\n## Set de datos\nLas radiograf\u00edas utilizadas para este modelo usan el set de datos de radiograf\u00edas de pacientes del ***Guangzhou Women and Children\u2019s Medical Center***, en China. Este set de datos es p\u00fablico y est\u00e1 alojado en la plataforma de ciencia de datos [Kaggle](https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia). Cuenta con +5000 radiograf\u00edas, divididas en sets de entrenamiento y de prueba."}}