{"cell_type":{"113501db":"code","ccbc061f":"code","0677511c":"code","d9be6f08":"code","65606a1e":"code","eed3b298":"code","ce6d62b0":"code","9af44535":"code","b58f0cbb":"code","e1baf4bc":"code","f77d92db":"code","371fdc10":"code","c7a37b1e":"code","9b68111f":"code","a07171cc":"code","4402727c":"code","4fed12f8":"code","f635c1b8":"code","ca60649f":"code","18078d29":"code","6ef957f8":"code","e7512dc6":"code","d819686c":"code","17bb8ee4":"code","58b15cc3":"code","fff66dd7":"code","de9bc604":"code","42687666":"markdown","244fe8cb":"markdown","b821d420":"markdown","e71f8708":"markdown","61f941e6":"markdown","6d8a3be7":"markdown","fd6ac195":"markdown","d9f002a9":"markdown","cbb2c235":"markdown","0bb47b2d":"markdown"},"source":{"113501db":"!pip install lifetimes","ccbc061f":"import pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt","0677511c":"from lifetimes.plotting import *\nfrom lifetimes.utils import *\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes.plotting import plot_frequency_recency_matrix\nfrom lifetimes.plotting import plot_probability_alive_matrix\nfrom lifetimes.plotting import plot_period_transactions\nfrom lifetimes.utils import calibration_and_holdout_data\nfrom lifetimes.plotting import plot_calibration_purchases_vs_holdout_purchases\nfrom lifetimes.plotting import plot_history_alive\nfrom lifetimes import GammaGammaFitter","d9be6f08":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf_customer = pd.read_csv(\"..\/input\/customer-order-dataset\/order data.csv\")\ndf_customer.head()","65606a1e":"sns.set_palette(\"husl\")\nsns.set(rc={'image.cmap': 'coolwarm'})\n%matplotlib inline","eed3b298":"df_customer['Order date'] = pd.to_datetime(df_customer['Order date']).dt.date","ce6d62b0":"# Remove rows which have null customer id value \ndf_customer = df_customer[pd.notnull(df_customer['Customer ID'])]\n\n# selecting rows who have ordered quantity greater than zero. to avoid human error\ndf_customer = df_customer[(df_customer['Quantity']>0)]","9af44535":"# creating new column of sales Which is the total amount of orderd amount\ndf_customer['Sales'] = df_customer['Quantity'] * df_customer['Price']\n\n# Dropping other columns\ncols_of_interest = ['Customer ID', 'Order date', 'Sales']\ndf_customer = df_customer[cols_of_interest] ","b58f0cbb":"print(df_customer.head())\nprint(df_customer['Customer ID'].nunique())","e1baf4bc":"# summary_data_from_transaction_data function convert datafarme into required format with frequency\t,recency ,T\ndata = summary_data_from_transaction_data(df_customer, 'Customer ID', 'Order date', monetary_value_col='Sales', observation_period_end='2019-12-31')\ndata.head()","f77d92db":"#Plotting Frequency Distribution of our data\ndata['frequency'].plot(kind='hist', bins=50)\nprint(data['frequency'].describe())\nprint(sum(data['frequency'] == 0)\/float(len(data)))","371fdc10":"# similar API to scikit-learn and lifelines.\n# fitting BetaGeoFitter Model on our data\nbgf = BetaGeoFitter(penalizer_coef=0.0)\nbgf.fit(data['frequency'], data['recency'], data['T'])\nprint(bgf)","c7a37b1e":"#plotting plot_frequency_recency_matrix on our data\nfig = plt.figure(figsize=(12,8))\nplot_frequency_recency_matrix(bgf)","9b68111f":"fig = plt.figure(figsize=(12,8))\nplot_probability_alive_matrix(bgf)","a07171cc":"# Pridciting purchase customer vise with number of times he\/she will purchase control with variable t \nt = 1\ndata['predicted_purchases'] = bgf.conditional_expected_number_of_purchases_up_to_time(t, data['frequency'], data['recency'], data['T'])\ndata.sort_values(by='predicted_purchases').tail(5)","4402727c":"#Comparing expected purchasing behavior dependent on the fitted model parameters, and comparing it to the real data\n#Our predicted data is very close to the actual data as shown in the graph\nplot_period_transactions(bgf)","4fed12f8":"summary_cal_holdout = calibration_and_holdout_data(df_customer, 'Customer ID', 'Order date',\n                                        calibration_period_end='2019-01-01',\n                                        observation_period_end='2019-12-31' )   \nprint(summary_cal_holdout.head())","f635c1b8":"bgf.fit(summary_cal_holdout['frequency_cal'], summary_cal_holdout['recency_cal'], summary_cal_holdout['T_cal'])\nplot_calibration_purchases_vs_holdout_purchases(bgf, summary_cal_holdout)","ca60649f":"t = 10 #predict purchases in 10 periods\nindividual = data.loc['M0000094']\n# The below function is an alias to `bfg.conditional_expected_number_of_purchases_up_to_time`\nbgf.predict(t, individual['frequency'], individual['recency'], individual['T'])","18078d29":"#viewing data of perticular cusotmer \ndata.loc['M0000094']","6ef957f8":"# viewing history allive plot of indivisual customer\n# This can be use for marketting purposes and related application \nfig = plt.figure(figsize=(12,8))\nid = 'M0000094'\ndays_since_birth = 365\nsp_trans = df_customer.loc[df_customer['Customer ID'] == id]\nplot_history_alive(bgf, days_since_birth, sp_trans, 'Order date')","e7512dc6":"# from graph we can observe that this customer has made two sales in short interval and after that it's probablity of being alive kept decreasing\nfig = plt.figure(figsize=(12,8))\nid = 'M0000101'\ndays_since_birth = 365\nsp_trans = df_customer.loc[df_customer['Customer ID'] == id]\nplot_history_alive(bgf, days_since_birth, sp_trans, 'Order date')","d819686c":"# Shows customers wise summary genrated by our model\nreturning_customers_summary = data[data['frequency']>0]\n\nprint(returning_customers_summary.head())\nprint(len(returning_customers_summary))","17bb8ee4":"#calculating correaltion between frequency and monetary_value\nreturning_customers_summary[['monetary_value', 'frequency']].corr()","58b15cc3":"ggf = GammaGammaFitter(penalizer_coef = 0)\nggf.fit(returning_customers_summary['frequency'],\n        returning_customers_summary['monetary_value'])\nprint(ggf)","fff66dd7":"# Calculating average predicted profit customer wise\nprint(ggf.conditional_expected_average_profit(\n        data['frequency'],\n        data['monetary_value']\n    ).head(10))","de9bc604":"# Calculating Customer Life time value with time and discount_rate paramters which is non mendatory\n\nbgf.fit(data['frequency'], data['recency'], data['T'])\n\nprint(ggf.customer_lifetime_value(\n    bgf, #the model to use to predict the number of future transactions\n    data['frequency'],\n    data['recency'],\n    data['T'],\n    data['monetary_value'],\n    time=12, # months\n    discount_rate=0.01 # monthly discount rate ~ 12.7% annually\n).head(10))","42687666":"In most cases value of a firm is profits from existing and future customers (a.k.a. Customer Equity). Research done by Frederick Reichheld of Bain & Company (the inventor of the net promoter score) shows increasing customer retention rates by 5% increases profits by 25% to 95% (Reichheld 2001).\n\nIt is possible to calculate Customer Equity (CE) because Customer Lifetime Value (CLV) can be measured with a reasonable degree of precision.\n\nCLV is the present value of the future (net) cash flows associated with the customer (Gupta and Lehmann 2003). It is a forward-looking concept, not to be confused with historic customer profitability.\n\nNot all customers are equally important to a firm. Maintaining long-term relation with all of them (especially the loss makers) is not optimal because eventually marketing is all about attracting and retaining profitable customers (Kotler and Armstrong 1996). Hence the objective of CLV is firstly on general topics of firm\u2019s profitability and secondly as an input in customer acquisition decision and customer acquisition\/retention trade-offs (Berger and Nasr 1998).","244fe8cb":"calibration_and_holdout_data() function quickly split a simple transactions dataset into calibration and holdout periods. We will first fit the model to a calibration period of 1 year","b821d420":"### Predicting customer lifetime value and future purchases","e71f8708":"converting string to date in python format whcih can be easily handle in python code","61f941e6":"omparing predicted vs holdout transactions thorugh graph","6d8a3be7":"from history alive graph we can observe that after each purchase customers probablity of being alive increases. with time it's start decreasing till his next purchase.","fd6ac195":"# **To calculate customer life time value** in thorugh lifetimes package\nwe need data in follwing format  \n\n**1- Recency (derived from t\u2093): **the age of the customer at the moment of his last purchase, which is equal to the duration between a customer\u2019s first purchase and their last purchase\n\n**2- Frequency (x): **the number of periods in which the customer has made a repeat purchase \n\n**3- Age of the customer (T):** the age of the customer at the end of the period under study, which is equal to the duration between a customer\u2019s first purchase and the last day in the dataset\n","d9f002a9":"## Objective","cbb2c235":"lifetimes is python package which is use for analysis of Customer Lifetime value it has diffrent function and graphs available which aids analysis ","0bb47b2d":"The primary goal of this work is to build a probabilistic model for forecasting customer lifetime value in non-contractual setting on an individual level.\n\nUsing the results of this exercise, managers should be able to:\n\n1.Distinguish active customers from inactive customers.\n2.Generate transaction forecasts for individual customers.\n3.Predict the purchase volume of the entire customer base."}}