{"cell_type":{"43e7613b":"code","d41d83ba":"code","77bc658e":"code","0589e18b":"code","54f68445":"code","d872b82e":"code","1244fc6a":"code","911b51c6":"code","9d7a7d2d":"code","cfbc3e58":"code","07a3eb2e":"code","06e52e52":"code","269750f3":"code","eacbe12a":"code","2cf75ef0":"code","41c27cd5":"code","851ee79a":"code","b55b963f":"code","82109e75":"code","0cb56b13":"code","fe0eb311":"code","5db349e4":"code","6a8ebfe0":"code","1343003c":"code","631912c5":"code","7228dce8":"code","0dad30eb":"code","42d52062":"code","2109395a":"code","7ac62596":"code","5d966d2d":"code","fb3bdf36":"code","216b132b":"code","a6fa3a3c":"code","2a36a82c":"code","ca2b2725":"markdown"},"source":{"43e7613b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \nfile_path = '\/kaggle\/input\/predicting-a-pulsar-star\/pulsar_stars.csv'\ndata = pd.read_csv(file_path)\ndata.describe()\n\n# Any results you write to the current directory are saved as output.","d41d83ba":"data.columns","77bc658e":"target = data[' Mean of the integrated profile']\nsns.distplot(target)\nplt.show()","0589e18b":"target = data[' Mean of the integrated profile']\nsns.distplot(np.log(target))\nplt.show()","54f68445":"fig = plt.figure(figsize=(10, 5))\n\nfig.add_subplot(1, 2, 1)\nsns.distplot(data[' Excess kurtosis of the integrated profile'])\n\nfig.add_subplot(1, 2, 2)\nsns.distplot(data[' Standard deviation of the DM-SNR curve'])\n\nplt.tight_layout()\nplt.show()","d872b82e":"print(data.isnull().sum())\nmin1 = data[' Excess kurtosis of the integrated profile'][0]\n\nfor r in data[' Excess kurtosis of the integrated profile']:\n    if(min1 > r):\n        min1 = r\nprint(min1)\n\nfor i in range(len(data[' Excess kurtosis of the integrated profile'])):\n    data[' Excess kurtosis of the integrated profile'][i] -= min1 - 1","1244fc6a":"fig = plt.figure(figsize=(10, 5))\n\nfig.add_subplot(1, 2, 1)\nsns.distplot(np.log(data[' Excess kurtosis of the integrated profile']))\n\nfig.add_subplot(1, 2, 2)\nsns.distplot(np.log(data[' Standard deviation of the DM-SNR curve']))\n    \nplt.tight_layout()\nplt.show()","911b51c6":"main = np.log(data[' Standard deviation of the DM-SNR curve'])\n\ntarget_log = np.log(target)","9d7a7d2d":"fig = plt.figure(figsize=(10, 10))\n\nfig.add_subplot(2, 2, 1)\n\nsns.scatterplot(data[' Standard deviation of the DM-SNR curve'], target)\n\nfig.add_subplot(2, 2, 2)\nsns.scatterplot(main, target)\n\nfig.add_subplot(2, 2, 3)\nsns.scatterplot(data[' Standard deviation of the DM-SNR curve'], target_log)\n\nfig.add_subplot(2, 2, 4)\nsns.scatterplot(main, target_log)\n\nplt.tight_layout()\nplt.show()","cfbc3e58":"min_x = main.min()\nmax_x = main.max()","07a3eb2e":"t0 = 0\nt1 = 1\nhmn = t0 + t1 * min_x\nhmx = t0 + t1 * max_x\n\nfig, ax = plt.subplots()\n\nsns.scatterplot(main, target_log, ax=ax)\n\nsns.lineplot(x=[min_x, max_x], y=[hmn, hmx], ax=ax)","06e52e52":"J = 0\nfor i in range(len(data[' Standard deviation of the DM-SNR curve'])):\n    J += (np.exp(t0 + t1 * main[i]) - data[' Mean of the integrated profile'][i])**2\nJ \/= 2 * len(data[' Standard deviation of the DM-SNR curve'])\nprint(J)","269750f3":"sns.regplot(main, target_log)\nplt.show()","eacbe12a":"# t1_arr = []\n# t2_arr = []\n# J_arr = []\n# best_t1 = -1\n# best_t2 = -1\n# best_J = 1000000\n# for i in np.arange(-2.5, 2.5, 0.1):\n#     for j in np.arange(0.0, 2.0, 0.1):\n#         tmp_J = 0\n#         for k in range(len(data[' Standard deviation of the DM-SNR curve'])):\n#             tmp_J += (np.exp(i + j * main[k]) - data[' Mean of the integrated profile'][k])**2\n#         tmp_J \/= 2 * len(data[' Standard deviation of the DM-SNR curve'])\n#         if tmp_J < best_J:\n#             best_i = i\n#             best_j = j\n#             best_J = tmp_J\n#         t1_arr.append(i)\n#         t2_arr.append(j)\n#         J_arr.append(min(tmp_J, 10000))\n# print(best_J)\n# print(i)\n# print(j)","2cf75ef0":"# import plotly.offline as py\n# import plotly.graph_objs as go\n# py.init_notebook_mode(connected=True)\n\n# trace1 = go.Scatter3d(\n#     x=t1_arr,\n#     y=t2_arr,\n#     z=J_arr,\n#     mode='markers',\n#     marker=dict(\n#         size=5,\n#         line=dict(\n#             color='rgba(217, 217, 217, 0.14)',\n#             width=0.1\n#         ),\n#         opacity=1\n#     ),\n#     name = 'price'\n# )\n# fig = go.Figure(data=trace1)\n# py.iplot(fig)","41c27cd5":"t0_best = t0\nt1_best = t1\nhmn = t0_best + t1_best * min_x\nhmx = t0_best + t1_best * max_x\n\n# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0432\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c\nfig, ax = plt.subplots()\n# \u0434\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0430 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u044c \u0441 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0442\u043e\u0447\u043a\u0430\u043c\u0438\nsns.scatterplot(main, target_log, ax=ax)\n# \u043f\u0440\u044f\u043c\u0430\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 h\nsns.lineplot(x=[min_x, max_x], y=[hmn, hmx], ax=ax)\nplt.show()","851ee79a":"# \u0412\u043e\u0437\u044c\u043c\u0451\u043c \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f 0.01\nt0_best = t0\nt1_best = t1\n\nalpha = 0.01\n# \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\neps = 0.002\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nc = 1\n\n# \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\nJ_t0 = 0\nfor i in range(len(data[' Standard deviation of the DM-SNR curve'])):\n    J_t0+= (t0_best + t1_best * main[i] - target_log[i])\n# \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\nJ_t0 \/= len(data[' Standard deviation of the DM-SNR curve'])\n# \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nJ_t0 *= alpha\n\n# \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_1 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\nJ_t1 = 0\nfor i in range(len(data[' Standard deviation of the DM-SNR curve'])):\n    J_t1 += (t0_best + t1_best * main[i] - target_log[i]) * main[i]\n# \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\nJ_t1 \/= len(data[' Standard deviation of the DM-SNR curve'])\n# \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nJ_t1 *= alpha\n\n# \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\nt0_best = t0_best - J_t0\nt1_best = t1_best - J_t1\n\n# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b, \u043f\u043e\u043a\u0430 J_t0 \u0438 J_t1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n# \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f J_t0 \u0438 J_t1 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c t0_best \u0438 t1_best\n# \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u043d eps, \u0442\u043e \u043c\u044b \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nwhile (abs(J_t0) > eps or abs(J_t1) > eps):\n    # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n    J_t0 = 0\n    for i in range(len(data[' Standard deviation of the DM-SNR curve'])):\n        J_t0+= (t0_best + t1_best * main[i] - target_log[i])\n    # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    J_t0 \/= len(data[' Standard deviation of the DM-SNR curve'])\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    J_t0 *= alpha\n\n    # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_1 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n    J_t1 = 0\n    for i in range(len(data[' Standard deviation of the DM-SNR curve'])):\n        J_t1 += (t0_best + t1_best * main[i] - target_log[i]) * main[i]\n    # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    J_t1 \/= len(data[' Standard deviation of the DM-SNR curve'])\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    J_t1 *= alpha\n    # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\n    t0_best = t0_best - J_t0\n    t1_best = t1_best - J_t1\n    c += 1\n    print(c)\n    print(\"{0} {1}\".format(J_t0, J_t1))\n    print(\"{0} {1}\".format(t0_best, t1_best))\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432\nprint(c)\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u043d\u0430\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f J_t0 \u0438 J_t1, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nprint(J_t0, J_t1)\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\nprint(t0_best, t1_best)\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\nhmn = t0_best + t1_best * min_x\nhmx = t0_best + t1_best * max_x\nfig, ax = plt.subplots()\nsns.scatterplot(main, target_log, ax=ax)\nsns.lineplot(x=[min_x, max_x], y=[hmn, hmx], ax=ax)\nplt.show()","b55b963f":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J \u0432 \u0442\u043e\u0447\u043a\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u044f t0, t1 \n# \u0432 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (0, 1)\n# \u0435\u0441\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0448\u043b\u0430 \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0432\u0437\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0443 e^(h(x))\n# \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e np.exp \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\nJ = 0\nfor i in range(len(data[' Standard deviation of the DM-SNR curve'])):\n    J += (np.exp(t0 + t1 * main[i]) - data[' Mean of the integrated profile'][i])**2\nJ \/= 2 * len(data[' Standard deviation of the DM-SNR curve'])\nprint(J)\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J \u0432 \u0442\u043e\u0447\u043a\u0435 t0_best, t1_best\n# \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0435\u0441\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0448\u043b\u0430 \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0432\u0437\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0443 e^(h(x))\n# \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e np.exp \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\nJ = 0\nfor i in range(len(data[' Standard deviation of the DM-SNR curve'])):\n    J += (np.exp(t0_best + t1_best * main[i]) - data[' Mean of the integrated profile'][i])**2\nJ \/= 2 * len(data[' Standard deviation of the DM-SNR curve'])\nprint(J)","82109e75":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u0433\u043e\u0434\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\nattribs = data.select_dtypes(exclude='object').drop(' Mean of the integrated profile', axis=1).copy()\n\n# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0441\u0435 10 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0444\u0438\u0433\u0443\u0440\u0435\nfig = plt.figure(figsize=(20,25))\nfor i in range(len(attribs.columns)):\n    fig.add_subplot(4, 3, i+1)\n    # \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u043c NaN \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    sns.distplot(attribs.iloc[:, i].dropna())\n    plt.xlabel(attribs.columns[i])\n    \nplt.tight_layout()\nplt.show()","0cb56b13":"features = [' Skewness of the integrated profile', ' Excess kurtosis of the integrated profile', ' Mean of the DM-SNR curve', ' Standard deviation of the DM-SNR curve', ' Excess kurtosis of the DM-SNR curve', ' Skewness of the DM-SNR curve']\nprint(len(features)) # 8\ntheta0 = 0\nthetaJ = [1 for i in range(len(features))]\n# thetaJ = [1, 1, 1, 1, 1, 1, 1, 1]","fe0eb311":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J\nthetaJnp = np.array(thetaJ)\nX = data[features]\n#print(X)\nhtheta = thetaJnp.dot(np.transpose(X))\nJ = 0\nfor i in range(len(htheta)):\n    J += (t0 + htheta[i] - data[' Mean of the integrated profile'][i])**2\nJ \/= 2 * len(htheta)\nprint(J)","5db349e4":"# \u0412\u043e\u0437\u044c\u043c\u0451\u043c \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f 0.0001\nalpha = 0.00001\n# \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\neps = 0.001\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nc = 1\n\nX = data[features]\n\n# \u0437\u0430\u0434\u0430\u0451\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0435\ntheta0_best = 0\ntheta_best = [1 for i in range(len(features))]\nhtheta_best = np.array(theta_best).dot(np.transpose(X))\n\ncont = True\n# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b, \u043f\u043e\u043a\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 eps\nwhile True:  \n    # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n    J_theta0 = 0\n    for i in range(len(htheta_best)):\n        J_theta0 += (theta0_best + htheta_best[i] - data[' Mean of the integrated profile'][i])\n    # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    J_theta0 \/= len(htheta_best)\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    J_theta0 *= alpha\n\n    J_theta = [0 for i in range(len(features))]\n    for j in range(len(features)):\n        # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_j \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n        J_theta[j] = 0\n        for i in range(len(htheta_best)):\n            J_theta[j] += (theta0_best + htheta_best[i] - data[' Mean of the integrated profile'][i]) * data[features[j]][i]\n        # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n        J_theta[j] \/= len(htheta_best)\n        # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n        J_theta[j] *= alpha\n    # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u0442\u0430\n    theta0_best = theta0_best - J_theta0\n    theta_best = np.subtract(theta_best, J_theta)\n    htheta_best = np.array(theta_best).dot(np.transpose(X))\n    # \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n    J = 0\n    for i in range(len(htheta_best)):\n        J += (theta0_best + htheta_best[i] - data[' Mean of the integrated profile'][i])**2\n    J \/= 2 * len(htheta_best)\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d J, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442\u0441\u044f\n    # \u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f, \u0442\u043e \u0446\u0438\u043a\u043b \u043d\u0443\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u0441\u043a\u043e\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c alpha\n    print(J)\n    # \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 200 \u0448\u0430\u0433\u043e\u0432, \u0438\u043d\u0430\u0447\u0435 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043e\u043b\u0433\u043e \u0441\u0445\u043e\u0434\u0438\u0442\u0441\u044f\n    c += 1\n    if c == 100:\n        break\n    # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f J_theta0 \u0438 J_theta \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c theta0_best \u0438 theta_best\n    # \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u043d eps, \u0442\u043e \u043c\u044b \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n    continue_loop = False\n    for i in range(len(J_theta)):\n        if abs(J_theta[i]) > eps:\n            continue_loop = True\n            break\n    continue_loop = continue_loop or abs(J_theta0) > eps\n    if not continue_loop:\n        break   \n\nprint('t0 =', theta0_best)\nfor i in range(len(theta_best)):\n    print('t', i + 1, ' = ', theta_best[i], sep=\"\")","6a8ebfe0":"attribs = data.select_dtypes(exclude='object').drop(' Mean of the integrated profile', axis=1).copy()\n\n# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0441\u0435 10 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0444\u0438\u0433\u0443\u0440\u0435\nfig = plt.figure(figsize=(20,25))\nfor i in range(len(attribs.columns)):\n    fig.add_subplot(4, 3, i+1)\n    # \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u043c NaN \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    sns.distplot(attribs.iloc[:, i].dropna())\n    plt.xlabel(attribs.columns[i])\n    \nplt.tight_layout()\nplt.show()","1343003c":"features = [' Skewness of the integrated profile', ' Excess kurtosis of the integrated profile', ' Mean of the DM-SNR curve', ' Standard deviation of the DM-SNR curve', ' Excess kurtosis of the DM-SNR curve', ' Skewness of the DM-SNR curve']\n","631912c5":"X_corr = data[features + [' Mean of the integrated profile']]\nX_corr.describe()\n\nx_corr_info =  X_corr.corr()\nf, ax = plt.subplots(figsize=(14, 12))\nsns.heatmap(x_corr_info, annot=True)\nplt.show()","7228dce8":"features = [' Skewness of the integrated profile', ' Excess kurtosis of the integrated profile', ' Mean of the DM-SNR curve', ' Standard deviation of the DM-SNR curve']\n\nprint(len(features))\ntheta0 = 0\nthetaJ = [1 for i in range(len(features))]","0dad30eb":"thetaJnp = np.array(thetaJ)\nX = data[features]\nhtheta = thetaJnp.dot(np.transpose(X))\nJ = 0\nfor i in range(len(htheta)):\n    J += (t0 + htheta[i] - data[' Mean of the integrated profile'][i])**2\nJ \/= 2 * len(htheta)\nprint(J)","42d52062":"alpha = 0.00022\n# \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\neps = 0.001\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nc = 2\n\nX = data[features]\n\n# \u0437\u0430\u0434\u0430\u0451\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0435\ntheta0_best = 0\ntheta_best = [1 for i in range(len(features))]\nhtheta_best = np.array(theta_best).dot(np.transpose(X))\n\ncont = True\n# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b, \u043f\u043e\u043a\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 eps\nwhile True:  \n    # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n    J_theta0 = 0\n    for i in range(len(htheta_best)):\n        J_theta0 += (theta0_best + htheta_best[i] - data[' Mean of the integrated profile'][i])\n    # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    J_theta0 \/= len(htheta_best)\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    J_theta0 *= alpha\n\n    J_theta = [0 for i in range(len(features))]\n    for j in range(len(features)):\n        # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_j \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n        J_theta[j] = 0\n        for i in range(len(htheta_best)):\n            J_theta[j] += (theta0_best + htheta_best[i] - data[' Mean of the integrated profile'][i]) * data[features[j]][i]\n        # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n        J_theta[j] \/= len(htheta_best)\n        # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n        J_theta[j] *= alpha\n\n    # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u0442\u0430\n    theta0_best = theta0_best - J_theta0\n    theta_best = np.subtract(theta_best, J_theta)\n    htheta_best = np.array(theta_best).dot(np.transpose(X))\n    # \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n    J = 0\n    for i in range(len(htheta_best)):\n        J += (theta0_best + htheta_best[i] - data[' Mean of the integrated profile'][i])**2\n    J \/= 2 * len(htheta_best)\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d J, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442\u0441\u044f\n    # \u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f, \u0442\u043e \u0446\u0438\u043a\u043b \u043d\u0443\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u0441\u043a\u043e\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c alpha\n    print(J)\n    # \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 200 \u0448\u0430\u0433\u043e\u0432, \u0438\u043d\u0430\u0447\u0435 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043e\u043b\u0433\u043e \u0441\u0445\u043e\u0434\u0438\u0442\u0441\u044f\n    c += 1\n    if c == 100:\n        break\n    # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f J_theta0 \u0438 J_theta \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c theta0_best \u0438 theta_best\n    # \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u043d eps, \u0442\u043e \u043c\u044b \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n    continue_loop = False\n    for i in range(len(J_theta)):\n        if abs(J_theta[i]) > eps:\n            continue_loop = True\n            break\n    continue_loop = continue_loop or abs(J_theta0) > eps\n    if not continue_loop:\n        break   \n\nprint('t0 =', theta0_best)\nfor i in range(len(theta_best)):\n    print('t', i + 1, ' = ', theta_best[i], sep=\"\")","2109395a":"X1 = data[features][:len(data[features]) \/\/ 2]\nX2 = data[features][len(data[features]) \/\/ 2:]\ny1 = data[' Mean of the integrated profile'][:len(data[features]) \/\/ 2]\ny2 = data[' Mean of the integrated profile'][len(data[features]) \/\/ 2:]","7ac62596":"from sklearn.linear_model import LinearRegression\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1 y1\nlreg = LinearRegression().fit(X1, y1)\nprint(lreg.score(X1, y1))\nprint(lreg.score(X2, y2))","5d966d2d":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1\ny_pred1 = lreg.predict(X1)\nJ = 0\nfor i in range(len(y_pred1)):\n    J += (y1[i] - y_pred1[i])**2\nJ \/= 2 * len(y_pred1)\nprint(J)\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X2\ny_pred2 = lreg.predict(X2)\nJ = 0\nfor i in range(len(y_pred2)):\n    J += (y2[i + len(y_pred1)] - y_pred2[i])**2\nJ \/= 2 * len(y_pred2)\nprint(J)","fb3bdf36":"from sklearn.ensemble import GradientBoostingRegressor\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1 y1\ngbr = GradientBoostingRegressor(learning_rate=0.02).fit(X1, y1)\nprint(gbr.score(X1, y1))\nprint(gbr.score(X2, y2))","216b132b":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1\ny_pred_gbr1 = gbr.predict(X1)\nJ = 0\nfor i in range(len(y_pred_gbr1)):\n    J += (y1[i] - y_pred_gbr1[i])**2\nJ \/= 2 * len(y_pred_gbr1)\nprint(J)\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X2\ny_pred_gbr2 = gbr.predict(X2)\nJ = 0\nfor i in range(len(y_pred_gbr2)):\n    J += (y2[i + len(y_pred_gbr1)] - y_pred_gbr2[i])**2\nJ \/= 2 * len(y_pred_gbr2)\nprint(J)","a6fa3a3c":"from sklearn.ensemble import AdaBoostRegressor\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1 y1\nada = AdaBoostRegressor().fit(X1, y1)\nprint(ada.score(X1, y1))\nprint(ada.score(X2, y2))","2a36a82c":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1\ny_pred_ada1 = ada.predict(X1)\nJ = 0\nfor i in range(len(y_pred_ada1)):\n    J += (y1[i] - y_pred_ada1[i])**2\nJ \/= 2 * len(y_pred_ada1)\nprint(J)\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X2\ny_pred_ada2 = ada.predict(X2)\nJ = 0\nfor i in range(len(y_pred_ada2)):\n    J += (y2[i + len(y_pred_ada1)] - y_pred_ada2[i])**2\nJ \/= 2 * len(y_pred_ada2)\nprint(J)","ca2b2725":"\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f"}}