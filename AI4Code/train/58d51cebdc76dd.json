{"cell_type":{"b760630c":"code","1e00faab":"code","0ac8ec3f":"code","a6c344b6":"code","50507af6":"code","8c06ce5f":"code","84c17be1":"code","51446cac":"code","6b866597":"code","e337a422":"code","0bfdc55d":"markdown","70539d34":"markdown","4870f441":"markdown","b1e6bc88":"markdown","8566029b":"markdown","8cc0fe21":"markdown","38793538":"markdown","5df66af3":"markdown","d8dfc86c":"markdown","eb18a119":"markdown","cac53990":"markdown","e6e9986c":"markdown"},"source":{"b760630c":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","1e00faab":"dataset = pd.read_csv('..\/input\/restaurant-reviews\/Restaurant_Reviews.tsv', delimiter = '\\t', quoting = 3)","0ac8ec3f":"import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer #used fr stemming the word\ncorpus = []\nfor i in range(0, dataset.shape[0]):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])  \n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\n","a6c344b6":"print(corpus)","50507af6":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features= 1600)\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n\n","8c06ce5f":"print(len(X[0]))","84c17be1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= .2, random_state = 0)","51446cac":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm  import SVC\nfrom sklearn.linear_model import LogisticRegression\n# classifier = GaussianNB()\nclassifier = RandomForestClassifier(n_estimators=1000, criterion='entropy')\n# classifier = SVC(kernel='rbf')\n# classifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n","6b866597":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","e337a422":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","0bfdc55d":"## Creating the Bag of Words model","70539d34":"## Cleaning the texts","4870f441":"# I will be happy if you give your feedback.","b1e6bc88":"## Importing the dataset","8566029b":"## Splitting the dataset into the Training set and Test set","8cc0fe21":"## It will be a basic example for bag of words model.","38793538":"## Importing the libraries","5df66af3":"## Making the Confusion Matrix","d8dfc86c":"## Predicting the Test set results","eb18a119":"# Natural Language Processing","cac53990":"## Training the Naive Bayes model on the Training set","e6e9986c":"## Here you can see our bag of words model is 79% accurate."}}