{"cell_type":{"0ad1eb17":"code","c06c0493":"code","79c4666d":"code","f3031ea8":"code","dd48b986":"code","7b88d86a":"code","5c725038":"code","7fe566e8":"code","2a6ec77a":"code","8c6e52c3":"code","e8b47edd":"code","401201a7":"code","8b1a4910":"code","ae64f2fc":"code","456625b2":"code","29743317":"code","010a177c":"code","3e922dfe":"code","2659fd85":"code","b27b472f":"code","c6df2a7b":"code","9cbebea8":"code","4840b034":"code","7ae72d8e":"code","4b10c115":"code","0df5ce38":"code","33f02155":"code","eb4c605b":"code","f408089d":"code","0ded64a8":"code","39ca05fd":"code","3e82301e":"code","554a8f68":"code","39987578":"code","16d8e9ac":"code","f966f57e":"code","b01c06c2":"code","bed5a10f":"code","3a53020c":"code","10378f98":"code","8a396dec":"code","45205cab":"code","41bf6564":"code","e56cf1a9":"code","b3e35b3e":"code","3c6951ae":"code","0863e830":"code","8e398d96":"code","ae593fed":"code","67fdbfc5":"code","238a7918":"code","a7ef7bc7":"code","f2273a64":"code","c1e63963":"code","37d927ee":"code","f53693b9":"code","54ca6b08":"code","08cf36f6":"code","0d6795b4":"code","556b1cfe":"code","cf6ed7a4":"code","642e613c":"code","5942f064":"code","1553e7a0":"code","f8cba826":"code","8e129eab":"code","2af51ac2":"code","5a7c3e15":"code","f5728fb6":"code","182b7712":"code","ca60281b":"code","4135bb72":"code","aa242602":"code","0de451f3":"code","1283dd7c":"markdown","d87517e7":"markdown"},"source":{"0ad1eb17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, RidgeCV\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, BaggingRegressor, VotingClassifier\nfrom sklearn.model_selection import train_test_split, cross_validate\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c06c0493":"df=pd.read_csv('..\/input\/titanic\/train.csv')\ndf.shape","79c4666d":"df.columns","f3031ea8":"df.head()","dd48b986":"df.info()","7b88d86a":"df.isnull().sum()","5c725038":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","7fe566e8":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=df)","2a6ec77a":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=df)","8c6e52c3":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=df)","e8b47edd":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='SibSp',data=df)","401201a7":"sns.countplot(x='SibSp',data=df)","8b1a4910":"sns.distplot(df['Age'].dropna())","ae64f2fc":"df['Age'].hist()","456625b2":"df['Fare'].hist(bins=40,figsize=(10,8))","29743317":"sns.boxplot(x='Pclass',y='Age',data=df)","010a177c":"def impute_age(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass==1:\n            return 37\n        elif Pclass==2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age     \n","3e922dfe":"df['Age']=df[['Age','Pclass']].apply(impute_age,axis=1)","2659fd85":"df_test=pd.read_csv('..\/input\/titanic\/test.csv')\ntest_id=df_test[\"PassengerId\"]\ndf_test['Age']=df_test[['Age','Pclass']].apply(impute_age,axis=1)","b27b472f":"df.drop('Cabin',axis=1,inplace=True)\ndf_test.drop('Cabin',axis=1,inplace=True)","c6df2a7b":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","9cbebea8":"sns.heatmap(df_test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","4840b034":"df.info()\ndf['Sex'].unique()\ndf['Embarked'].unique()","7ae72d8e":"df_test.info()","4b10c115":"#label_encode= preprocessing.LabelEncoder()\n#df['Sex']=label_encode.fit_transform(df['Sex'])\n#df['Sex'].unique()\n#df['Embarked']=label_encode.fit_transform(df['Embarked'].astype(str))\n#df['Embarked'].unique()\nSex=pd.get_dummies(df['Sex'],drop_first=True)\nSex_test=pd.get_dummies(df_test['Sex'],drop_first=True)\nEmbarked=pd.get_dummies(df['Embarked'],drop_first=True)\nEmbarked_test=pd.get_dummies(df_test['Embarked'],drop_first=True)","0df5ce38":"df_test.drop(['Name','Sex','Embarked','Ticket'],axis=1,inplace=True)\ndf_test.head","33f02155":"df.drop(['Name','Sex','Embarked','Ticket'],axis=1,inplace=True)\ndf.head()","eb4c605b":"df_test=pd.concat([df_test,Sex_test,Embarked_test],axis=1)\ndf_test.head()","f408089d":"df_test.info","0ded64a8":"df=pd.concat([df,Sex,Embarked],axis=1)\n#df=df[[\"PassengerId\",\"Pclass\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Male\",\"Q\",\"S\",\"Survived\"]]\ndf.head()","39ca05fd":"df=df[[\"PassengerId\",\"Pclass\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"male\",\"Q\",\"S\",\"Survived\"]]\ndf.head()","3e82301e":"X=df.drop('Survived',axis=1)\ny=df.Survived\nX_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=42)\nmodels= [LinearSVC(), SVC(kernel='rbf'),KNeighborsClassifier(), RandomForestClassifier(),DecisionTreeClassifier(),GradientBoostingClassifier(), GaussianNB()]\nmodel_names=['LinearSVM','rbfSVM','KNeighbors','RandomForestClassifier','DecisionTree','GradientBoostingClassifier','GaussianNB']\naccu=[]\n\nfor model in range(len(models)):\n    clf=models[model]\n    clf.fit(X_train,y_train)\n    pred=clf.predict(X_test)\n    accu.append(accuracy_score(pred,y_test))\nmodels={'Model': model_names,'Accuracy':accu}\n\nmodel_df=pd.DataFrame(models)\n\nmodel_df","554a8f68":"def feature_scaling(X_train, X_test, y_train,y_test, name_scaler):\n    models=[LinearSVC(), SVC(kernel='rbf'),KNeighborsClassifier(), RandomForestClassifier(), DecisionTreeClassifier(), GradientBoostingClassifier(), GaussianNB()]\n    accu_score=[]\n    for i in range(len(models)):\n        clf=models[model]\n        clf.fit(X_train, y_train)\n        pred=clf.predict(X_test)\n        accu_score.append(accuracy_score(pred, y_test))\n    model_df[name_scaler]=np.array(accu_score)","39987578":"scalers= [MinMaxScaler(), StandardScaler()]\nnames =['Accuracy_MinMax','Accuracy_Standard']\nfor i in range(len(scalers)):\n    scaler=scalers[i]\n    scaler.fit(df)\n    scaled_df=scaler.transform(df)\n    X=scaled_df[:,0:9]\n    Y=df.Survived.to_numpy()\n    X_train, X_test, y_train, y_test=train_test_split(X,Y, test_size=0.2, random_state=42)\n    feature_scaling(X_train,X_test, y_train, y_test, names[i])\nmodel_df","16d8e9ac":"scaler= MinMaxScaler()\nX=df.drop('Survived',axis=1)\ny=df.Survived\nX_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=42)","f966f57e":"X_train =scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)\nmodel, test_accuracy=[], []","b01c06c2":"#knn\nparams_dict={'n_neighbors': [i+1 for i in range(50)], 'n_jobs': [-1]}\nknn_clf=RandomizedSearchCV(estimator= KNeighborsClassifier(),param_distributions=params_dict, scoring='accuracy', cv=10)\nknn_clf.fit(X_train, y_train)","bed5a10f":"knn_clf.best_params_","3a53020c":"knn_clf.best_score_","10378f98":"pred=knn_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('KNN')\ntest_accuracy.append(accuracy)\nprint(\"KNN Accuracy:\", accuracy)","8a396dec":"#SvM\nparams_dict={'C':[0.1,1,10,100,1000],'gamma':[1,0.1,0.01,0.001,0.0001],'kernel':['linear','rbf']}\nsvm_clf=RandomizedSearchCV(estimator=SVC(), param_distributions=params_dict,scoring='accuracy',cv=10)\nsvm_clf.fit(X_train, y_train)","45205cab":"svm_clf.best_params_","41bf6564":"svm_clf.best_score_","e56cf1a9":"pred=svm_clf.predict(X_test)\naccuracy= accuracy_score(y_test, pred)\n\nmodel.append('SVM')\ntest_accuracy.append(accuracy)\nprint(\"SVM Accuracy:\", accuracy)","b3e35b3e":"#decision tree\nparams_dict={'criterion': ['gini', 'entropy'], 'max_depth':[4,5,6,7,8,9,10,11,12,15,20,30,40,50,70,90,120,150]}\ndt_clf=RandomizedSearchCV(estimator=DecisionTreeClassifier(), param_distributions=params_dict,scoring='accuracy',cv=10)\ndt_clf.fit(X_train, y_train)","3c6951ae":"dt_clf.best_params_","0863e830":"dt_clf.best_score_","8e398d96":"pred=dt_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('Decision Tree')\ntest_accuracy.append(accuracy)\nprint(\"Decision Tree Accuracy:\", accuracy)","ae593fed":"#random forest\nparams_dict={'n_estimators':[100,200,300,400,500], 'max_features':['auto','sqrt','log2']}\nrf_clf=RandomizedSearchCV(estimator=RandomForestClassifier(n_jobs=-1),param_distributions=params_dict,scoring='accuracy',cv=10)\n\nrf_clf.fit(X_train,y_train)","67fdbfc5":"rf_clf.best_params_","238a7918":"rf_clf.best_score_","a7ef7bc7":"pred=rf_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('Random Forest')\ntest_accuracy.append(accuracy)\n\nprint(\"Random Forest Accuracy:\", accuracy)","f2273a64":"#gradientboosting\nparams_dict={'n_estimators':[100,200,300,400,500,600,700]}\ngb_clf=RandomizedSearchCV(estimator=GradientBoostingClassifier(), param_distributions=params_dict,cv=10)\n\ngb_clf.fit(X_train,y_train)","c1e63963":"gb_clf.best_params_","37d927ee":"gb_clf.best_score_","f53693b9":"pred=gb_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('GradientBoosting')\ntest_accuracy.append(accuracy)\nprint(\"GradientBoosting Accuracy:\", accuracy)","54ca6b08":"#adaboost classifier\n#params_dict={'n_estimators': list(range(1,201,20))}\n#ada_clf=GridSearchCV(AdaBoostClassifier(DecisionTreeClassifier(criterion='entropy',max_depth=100), algorithm='SAMME.R'), param_grid=params_dict,cv=10)\n#ada_clf.fit(X_train, y_train)","08cf36f6":"#ada_clf.best_params_","0d6795b4":"#ada_clf.best_score_","556b1cfe":"#pred=ada_clf.predict(X_test)\n#accuracy=accuracy_score(y_test, pred)\n\n#model.append('AdaBoostClassifier')\n#test_accuracy.append(accuracy)\n\n#print(\"AdaBoost Classifier Accuracy:\", accuracy)","cf6ed7a4":"#voting classifier\n#hard voting\n#h_vote_clf=VotingClassifier([('logistic regression', LogisticRegression(C=0.1,penalty='l2')),('knn',KNeighborsClassifier(n_jobs=-1,n_neighbors=16)),('svm', SVC(C=1,gamma=1,kernel='rbf')),('random forests', RandomForestClassifier(max_features='log2',n_estimators=300)),('gradient boosting', GradientBoostingClassifier(n_estimators=100)),],voting='hard')","642e613c":"#h_vote_clf.fit(X_train,y_train)","5942f064":"#h_vote_clf.score(X_train,y_train)","1553e7a0":"#pred=h_vote_clf.predict(X_test)\n#accuracy=accuracy_score(y_test,pred)\n\n#model.append('Hard voting')\n#test_accuracy.append(accuracy)\n#print(\"Hard Voting Accuracy:\",accuracy)","f8cba826":"#softvoting\n#s_vote_clf=VotingClassifier([('logistic regression', LogisticRegression(C=0.1,penalty='l2')),('knn',KNeighborsClassifier(n_jobs=-1,n_neighbors=16)),('svm', SVC(C=1,gamma=1,kernel='rbf',probability=True)),('random forests', RandomForestClassifier(max_features='log2',n_estimators=300)),('gradient boosting', GradientBoostingClassifier(n_estimators=100)),],voting='soft')","8e129eab":"#s_vote_clf.fit(X_train,y_train)","2af51ac2":"#s_vote_clf.score(X_train,y_train)","5a7c3e15":"\n#pred=s_vote_clf.predict(X_test)\n#accuracy=accuracy_score(y_test,pred)\n\n#model.append('Soft voting')\n#test_accuracy.append(accuracy)\n#print(\"Soft Voting Accuracy:\",accuracy)\n","f5728fb6":"#final evaluation\n#final=pd.DataFrame({'Model':model,'Test Accuracy': test_accuracy})","182b7712":"#final","ca60281b":"df_test.isnull().any()","4135bb72":"df_test['Fare']=df_test['Fare'].fillna((df_test['Fare'].mean()))","aa242602":"submission_pred=clf.predict(df_test)\ndf=pd.DataFrame({\"PassengerId\":test_id.values,\"Survived\":submission_pred,})","0de451f3":"df.to_csv(\"Submission.csv\",index=False)","1283dd7c":"**This is my first notebbok.**\n\n**Any mistakes or sugesstions please comment.**","d87517e7":"**IMPORT TEST DATA**"}}