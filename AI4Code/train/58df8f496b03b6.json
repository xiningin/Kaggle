{"cell_type":{"4b3cec52":"code","882f48e5":"code","0a8bbd98":"code","2e64f249":"code","47089e4b":"code","06408352":"code","1adbec9a":"code","7e28cbae":"code","2cc7b830":"code","7437ebef":"code","2c3c7cb2":"code","bd79ad0d":"code","f1ab854c":"code","34b1811e":"code","4fd4c0cc":"code","fa591ab7":"code","340612a3":"code","83aa2f18":"code","f7d03512":"code","a3e77dd4":"code","26d8975c":"code","06e69172":"code","eedcec98":"code","3c186669":"code","c2aa4641":"code","650b37ec":"code","6029174a":"code","fcf2798d":"code","80a13f0a":"code","5cd563b1":"code","274822f1":"code","5e4689ca":"code","496264e5":"code","ce84b20c":"code","28952b15":"code","7ebc0cc1":"code","0494c605":"code","dfe18e23":"code","0b9f8df2":"code","25b92e7b":"markdown","f3b4adbb":"markdown","1950c4f0":"markdown","238b917a":"markdown","0f530f18":"markdown","c11bf3a5":"markdown","d0d3926d":"markdown","6d9807a4":"markdown","fdf31916":"markdown","ecb98faa":"markdown","658a0750":"markdown","5a4c245e":"markdown","7a67d996":"markdown","fa44f27c":"markdown","d93032be":"markdown","f1c97eb0":"markdown"},"source":{"4b3cec52":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","882f48e5":"train = pd.read_csv('..\/input\/titanic\/train.csv')","0a8bbd98":"train.head()","2e64f249":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","47089e4b":"train.info()","06408352":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=train,palette='RdBu_r')","1adbec9a":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')","7e28cbae":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')","2cc7b830":"sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30)","7437ebef":"train['Age'].hist(bins=30,color='darkred',alpha=0.7)","2c3c7cb2":"sns.countplot(x='SibSp',data=train)","bd79ad0d":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","f1ab854c":"train['Fare'].value_counts()","34b1811e":"plt.figure(figsize=(12,15))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","4fd4c0cc":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","fa591ab7":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","340612a3":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","83aa2f18":"train.drop('Cabin',axis=1,inplace=True)","f7d03512":"train.head()","a3e77dd4":"train.dropna(inplace=True)","26d8975c":"train.info()","06e69172":"sex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)","eedcec98":"# sex","3c186669":"# embark","c2aa4641":"train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","650b37ec":"train = pd.concat([train,sex,embark],axis=1)","6029174a":"train.head()","fcf2798d":"from sklearn.model_selection import train_test_split","80a13f0a":"X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), \n                                                    train['Survived'], test_size=0.30, \n                                                    random_state=101)","5cd563b1":"# X_train","274822f1":"# y_train","5e4689ca":"from sklearn.linear_model import LogisticRegression","496264e5":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","ce84b20c":"predictions = logmodel.predict(X_test)","28952b15":"X_test","7ebc0cc1":"from sklearn.metrics import classification_report","0494c605":"print(classification_report(y_test,predictions))","dfe18e23":"from sklearn.metrics import confusion_matrix","0b9f8df2":"print(confusion_matrix(y_test,predictions))","25b92e7b":"## Converting Categorical Features \n\nWe'll need to convert categorical features to dummy variables using pandas! Otherwise our machine learning algorithm won't be able to directly take in those features as inputs.","f3b4adbb":"Now apply that function!","1950c4f0":"Let's move on to evaluate our model!","238b917a":"## Training and Predicting","0f530f18":"Now let's check that heat map again!","c11bf3a5":"___\n## Data Cleaning\nWe want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation).\nHowever we can be smarter about this and check the average age by passenger class. For example:\n","d0d3926d":"## The Data\n\nLet's start by reading in the titanic_train.csv file into a pandas dataframe.","6d9807a4":"Great! Let's go ahead and drop the Cabin column and the row in Embarked that is NaN.","fdf31916":"**Thanks**","ecb98faa":"# Exploratory Data Analysis\n\nLet's begin some exploratory data analysis! We'll start by checking out missing data!\n\n## Missing Data\n\nWe can use seaborn to create a simple heatmap to see where we are missing data!","658a0750":"We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age.","5a4c245e":"# Logistic Regression with Python\n\nFor this lecture we will be working with the [Titanic Data Set from Kaggle](https:\/\/www.kaggle.com\/c\/titanic). This is a very famous data set and very often is a student's first step in machine learning! \n\nWe'll be trying to predict a classification- survival or deceased.\nLet's begin our understanding of implementing Logistic Regression in Python for classification.\n\nWe'll use a \"semi-cleaned\" version of the titanic data set, if you use the data set hosted directly on Kaggle, you may need to do some additional cleaning not shown in this lecture notebook.\n\n## Import Libraries\nLet's import some libraries to get started!","7a67d996":"## Evaluation","fa44f27c":"Great! Our data is ready for our model!\n\n# Building a Logistic Regression model\n\nLet's start by splitting our data into a training set and test set (there is another test.csv file that you can play around with in case you want to use all this data for training).\n\n## Train Test Split","d93032be":"Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\"\n\nLet's continue on by visualizing some more of the data! Check out the video for full explanations over these plots, this code is just to serve as reference.","f1c97eb0":"We can check precision,recall,f1-score using classification report!"}}