{"cell_type":{"69178321":"code","f034f028":"code","7fbdc25d":"code","be085b02":"code","19bfe331":"code","d66c60ac":"code","a4832d83":"code","46a49536":"code","fb264a2a":"code","7d8abbe7":"code","80bd95fd":"code","04fd65b1":"code","e2fcdf5b":"code","edf6ca7e":"code","08acaa51":"code","c0bf6b2e":"code","08a83e74":"code","c9c06a78":"code","1cc0981f":"code","1892b35a":"code","adf7db87":"code","ed8fabc2":"code","0c52c3ae":"code","eba4899e":"code","22dd8883":"code","0d7f0ded":"code","61fb3958":"code","5fba2d68":"code","4cbfa620":"code","9a62b6c0":"code","22b55702":"markdown"},"source":{"69178321":"!git clone https:\/\/github.com\/oshimamasara\/CNN-DATASET-NOTE.git","f034f028":"%cd CNN-DATASET-NOTE","7fbdc25d":"!find train -type f | wc -l","be085b02":"import gc\ngc.collect()","19bfe331":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.preprocessing import image\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom tqdm import tqdm\n\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","d66c60ac":"col_Names=[\"id\", \"label\"]\ntrain = pd.read_csv(\"train_after.csv\",names=col_Names)","a4832d83":"import time\ntime.sleep(5)","46a49536":"train_image = []\nfor i in tqdm(range(train.shape[0])):\n#for i in range(1):\n    img = image.load_img('train\/'+train['id'][i]+'.png',  grayscale=True)\n    #print(type(img))\n    #print(img.mode)\n    img = image.img_to_array(img)\n    #img = img\/255\n    train_image.append(img)\nX = np.array(train_image)","fb264a2a":"del train_image","7d8abbe7":"del img","80bd95fd":"gc.collect()","04fd65b1":"y=train['label'].values\n\ny = to_categorical(y)","e2fcdf5b":"time.sleep(5)","edf6ca7e":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)","08acaa51":"del X\ndel y","c0bf6b2e":"gc.collect()","08a83e74":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(128,128,1)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(26, activation='softmax'))","c9c06a78":"print(model.input_shape)\nprint(model.output_shape)","1cc0981f":"model.summary()","1892b35a":"model.compile(loss='categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])","adf7db87":"time.sleep(5)","ed8fabc2":"fit = model.fit(X_train, y_train, epochs=15, validation_data=(X_test, y_test))","0c52c3ae":"score = model.evaluate(X_test, y_test, verbose=1)\nprint(\"\u30ed\u30b9\u3000\" + str(score[0]))\nprint(\"\u7cbe\u5ea6\u3000\" + str(score[1]))","eba4899e":"fig, (axL, axR) = plt.subplots(ncols=2, figsize=(10,4))\ndef plot_history_loss(hist):\n    axL.plot(fit.history['loss'],label=\"loss for training\")\n    axL.plot(fit.history['val_loss'],label=\"loss for validation\")\n    axL.set_title('model loss')\n    axL.set_xlabel('epoch')\n    axL.set_ylabel('loss')\n    axL.legend(loc='upper right')\n\ndef plot_history_acc(hist):\n    axR.plot(fit.history['acc'],label=\"acc for training\")\n    axR.plot(fit.history['val_acc'],label=\"acc for validation\")\n    axR.set_title('model accuracy')\n    axR.set_xlabel('epoch')\n    axR.set_ylabel('accuracy')\n    axR.legend(loc='right')\n\nplot_history_loss(fit)\nplot_history_acc(fit)","22dd8883":"model.save('abc.h5') ","0d7f0ded":"import tensorflow as tf\nconverter = tf.lite.TFLiteConverter.from_keras_model_file('abc.h5')\ntflite_model = converter.convert()\nopen('abc.tflite', 'wb').write(tflite_model)","61fb3958":"from IPython.display import FileLink, HTML\nfile_url = FileLink(r'abc.tflite')\nfile_url","5fba2d68":"import os\nos.path.getsize('abc.tflite')","4cbfa620":"!pip install dropbox","9a62b6c0":"import sys\nimport dropbox\n\nfrom dropbox.files import WriteMode\nfrom dropbox.exceptions import ApiError, AuthError\n\n# Access token\nTOKEN = 'K7Y8L-2ZaWEAAAAAAAAA5Jm2og2zzQygeVLpQ6PaRI60B6HJ2jTADXShH9aWkmNu'\n\nLOCALFILE = 'abc.tflite'\nBACKUPPATH = '\/abc.tflite' # Keep the forward slash before destination filename\n\n\n# Uploads contents of LOCALFILE to Dropbox\ndef backup():\n    with open(LOCALFILE, 'rb') as f:\n        # We use WriteMode=overwrite to make sure that the settings in the file\n        # are changed on upload\n        print(\"Uploading \" + LOCALFILE + \" to Dropbox as \" + BACKUPPATH + \"...\")\n        try:\n            dbx.files_upload(f.read(), BACKUPPATH, mode=WriteMode('overwrite'))\n        except ApiError as err:\n            # This checks for the specific error where a user doesn't have enough Dropbox space quota to upload this file\n            if (err.error.is_path() and\n                    err.error.get_path().error.is_insufficient_space()):\n                sys.exit(\"ERROR: Cannot back up; insufficient space.\")\n            elif err.user_message_text:\n                print(err.user_message_text)\n                sys.exit()\n            else:\n                print(err)\n                sys.exit()\n\n\n# Adding few functions to check file details\ndef checkFileDetails():\n    print(\"Checking file details\")\n\n    for entry in dbx.files_list_folder('').entries:\n        print(\"File list is : \")\n        print(entry.name)\n\n\n# Run this script independently\nif __name__ == '__main__':\n    # Check for an access token\n    if (len(TOKEN) == 0):\n        sys.exit(\"ERROR: Looks like you didn't add your access token. Open up backup-and-restore-example.py in a text editor and paste in your token in line 14.\")\n\n    # Create an instance of a Dropbox class, which can make requests to the API.\n    print(\"Creating a Dropbox object...\")\n    dbx = dropbox.Dropbox(TOKEN)\n\n    # Check that the access token is valid\n    try:\n        dbx.users_get_current_account()\n    except AuthError as err:\n        sys.exit(\n            \"ERROR: Invalid access token; try re-generating an access token from the app console on the web.\")\n\n    try:\n        checkFileDetails()\n    except Error as err:\n        sys.exit(\"Error while checking file details\")\n\n    print(\"Creating backup...\")\n    # Create a backup of the current settings file\n    backup()\n\n    print(\"Done!\")","22b55702":"#### LINK 404 error\n\n```https:\/\/www.kaggleusercontent.com\/k\/22303981\/eyJlbmMiOiAiQTEyOENCQy1IUzI1NiIsICJhbGciOiAiZGlyIn0..fnG8RiGj-roa370uOc0LRA.B5cb_3ulOxKJt5wBCq087KPrjC1EEqtaVGrvGJvdRvX-H3v0w3ObmnNxx5wc8iR6y39P-W0iI5OdIOGQ94ho7ezJIFv4MQS5z1iw6BkSPjI.BlZJ4k9UEZyto_iCoXRlBA\/proxy\/notebooks\/abc.tflite```\n"}}