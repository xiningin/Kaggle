{"cell_type":{"345a80c6":"code","20cfd8c3":"code","08a79510":"code","33b7e1e1":"code","bdfc51bd":"code","0c9ccb7f":"code","8ae21f7e":"code","b131a99f":"code","9196d1f3":"code","c345d4b8":"code","a649a4ba":"code","3a184e96":"code","59f2309a":"code","ee52ec74":"code","04b9eb39":"code","572da00e":"code","3edcd59b":"code","faf29372":"code","40eb45f3":"code","8f6ba974":"markdown","d99f1faa":"markdown","d41d7882":"markdown","55404d40":"markdown","ff73972c":"markdown","44f95de4":"markdown","ea54bcfc":"markdown","a6ffee86":"markdown","3cbfad59":"markdown","5ba1f5be":"markdown","cfa3ba21":"markdown","e501cc3c":"markdown","b751d9e9":"markdown","55e1c993":"markdown","53a46f93":"markdown","8bacc045":"markdown","384a3c16":"markdown"},"source":{"345a80c6":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.optimizers import Adam, Adamax\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.models import Model, load_model\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport seaborn as sns\nsns.set_style('darkgrid')\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom IPython.core.display import display, HTML","20cfd8c3":"sdir=r'..\/input\/meat-quality-assessment-based-on-deep-learning'\nslist=os.listdir(sdir)\nclasses=[]\nfilepaths=[]\nlabels=[]\nfor d in slist:\n    dpath=os.path.join(sdir, d)\n    if os.path.isdir(dpath):\n        classes.append(d)\nclass_count=len(classes)\nfor klass in classes:   \n    classpath=os.path.join(sdir,klass)\n    filelist=os.listdir(classpath)    \n    for f in filelist:\n        fpath=os.path.join(classpath, f)\n        filepaths.append(fpath)\n        labels.append(klass)\nprint ('number of files: ', len(filepaths), '   number of labels: ', len(labels))\nfile_series=pd.Series(filepaths, name='filepaths')\nlabel_series=pd.Series(labels, name='labels')\ndf=pd.concat([file_series, label_series], axis=1)\nprint (df.head())","08a79510":"balance=df['labels'].value_counts()\nprint (balance)","33b7e1e1":"train_split=.8\ntest_split=.1\ndummy_split=test_split\/(1-train_split)\ntrain_df, dummy_df=train_test_split(df, train_size=train_split, shuffle=True, random_state=123)\ntest_df, valid_df= train_test_split(dummy_df, train_size=dummy_split, shuffle=True, random_state=123)\nprint ('train size: ', len(train_df), '  test size: ', len(test_df), '   valid size: ', len(valid_df))\nlength=len(test_df)","bdfc51bd":"batch_size=80\ndef scalar(x):\n    return x\/127.5-1 # rescales pixels to range -1 to +1\ntrgen=tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=scalar, horizontal_flip=True)\ntrain_gen=trgen.flow_from_dataframe(train_df, x_col='filepaths', y_col='labels', target_size=(224,224), class_mode='categorical',\n                                   batch_size=batch_size, shuffle=True, seed=123)\ntvgen=tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=scalar)\nvalid_gen=tvgen.flow_from_dataframe(valid_df, x_col='filepaths', y_col='labels', target_size=(224,224), class_mode='categorical',\n                                   batch_size=batch_size, shuffle=False)\n# determine test generator batch size and steps to go through the test set exactly once for predictions\ntest_batch_size=sorted([int(length\/n) for n in range(1,length+1) if length % n ==0 and length\/n<=batch_size],reverse=True)[0]  \ntest_steps=int(length\/test_batch_size)\ntest_gen=tvgen.flow_from_dataframe(test_df, x_col='filepaths', y_col='labels', target_size=(224,224), class_mode='categorical',\n                                   batch_size=test_batch_size, shuffle=False)\ntest_labels=test_gen.labels","0c9ccb7f":"def show_training_samples(gen):\n    class_dict=gen.class_indices\n    new_dict={}\n    # make a new dictionary with keys and values reversed\n    for key, value in class_dict.items(): # dictionary is now {numeric class label: string of class_name}\n        new_dict[value]=key        \n    images,labels=next(gen) # get a sample batch from the generator\n    plt.figure(figsize=(15, 15))\n    length=len(labels)\n    if length<25:   #show maximum of 25 images\n        r=length\n    else:\n        r=25\n    for i in range(r):\n        plt.subplot(5, 5, i + 1)\n        image=(images[i]+1 )\/2 # scale images between 0 and 1 becaue pre-processor set them between -1 and +1\n        plt.imshow(image)\n        index=np.argmax(labels[i])\n        class_name=new_dict[index]\n        plt.title(class_name, color='blue', fontsize=16)\n        plt.axis('off')\n    plt.show()\n    ","8ae21f7e":"show_training_samples(test_gen)","b131a99f":"img_shape=(224,224,3)\nneurons=512\ndropout=.3\nlr=.001\nfreeze=True\nbase_model=tf.keras.applications.MobileNetV2( include_top=False, input_shape=img_shape, pooling='max', weights='imagenet') \nif freeze:\n    base_model.trainable=False\nx=base_model.output\nx=tf.keras.layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001 )(x)\nx =tf.keras.layers.Dense(neurons, kernel_regularizer = regularizers.l2(l = 0.016),activity_regularizer=regularizers.l1(0.006),\n                bias_regularizer=regularizers.l1(0.006) ,activation='relu', kernel_initializer= tf.keras.initializers.GlorotUniform(seed=123))(x)\nx=tf.keras.layers.Dropout(rate=dropout, seed=123)(x)\noutput=tf.keras.layers.Dense(class_count, activation='softmax',kernel_initializer=tf.keras.initializers.GlorotUniform(seed=123))(x)\nmodel=Model(inputs=base_model.input, outputs=output)\nmodel.compile(Adamax(lr=lr), loss='categorical_crossentropy', metrics=['accuracy']) \n","9196d1f3":"def print_in_color(txt_msg,fore_tupple,back_tupple,):\n    #prints the text_msg in the foreground color specified by fore_tupple with the background specified by back_tupple \n    #text_msg is the text, fore_tupple is foregroud color tupple (r,g,b), back_tupple is background tupple (r,g,b)\n    rf,gf,bf=fore_tupple\n    rb,gb,bb=back_tupple\n    msg='{0}' + txt_msg\n    mat='\\33[38;2;' + str(rf) +';' + str(gf) + ';' + str(bf) + ';48;2;' + str(rb) + ';' +str(gb) + ';' + str(bb) +'m' \n    print(msg .format(mat), flush=True)\n    print('\\33[0m', flush=True) # returns default print color to back to black\n    return","c345d4b8":"class LRA(keras.callbacks.Callback):\n    def __init__(self,model, patience,stop_patience, threshold, factor, dwell, model_name, freeze,end_epoch):\n        super(LRA, self).__init__()\n        self.model=model\n        self.patience=patience # specifies how many epochs without improvement before learning rate is adjusted\n        self.stop_patience=stop_patience\n        self.threshold=threshold # specifies training accuracy threshold when lr will be adjusted based on validation loss\n        self.factor=factor # factor by which to reduce the learning rate\n        self.dwell=dwell\n        self.lr=float(tf.keras.backend.get_value(model.optimizer.lr)) # get the initiallearning rate and save it in self.lr\n        self.highest_tracc=0.0 # set highest training accuracy to 0\n        self.lowest_vloss=np.inf # set lowest validation loss to infinity\n        self.count=0 # initialize counter that counts epochs with no improvement\n        self.stop_count=0 # initialize counter that counts how manytimes lr has been adjustd with no improvement  \n        self.end_epoch=end_epoch # value of the number of epochs to run\n        best_weights=self.model.get_weights() # set a class vaiable so weights can be loaded after training is completed\n        msg=' '\n        if freeze==True:\n            msgs=f' Starting training using  base model { model_name} with weights frozen to imagenet weights initializing LRA callback'\n        else:\n            msgs=f' Starting training using base model { model_name} training all layers '            \n        print_in_color (msgs, (244, 252, 3), (55,65,80)) \n            \n    def on_epoch_begin(self, epoch, logs=None): # just used to print data from previous epoch\n        if epoch != 0:\n            msgs=f'for epoch {epoch} '\n            msgs=msgs + LRA.msg\n            print_in_color(msgs, (255,255,0), (55,65,80))\n            \n    def on_epoch_end(self, epoch, logs=None):  # method runs on the end of each epoch\n        lr=float(tf.keras.backend.get_value(self.model.optimizer.lr)) # get the current learning rate\n        v_loss=logs.get('val_loss')  # get the validation loss for this epoch\n        acc=logs.get('accuracy')  # get training accuracy \n        #print ( '\\n',v_loss, self.lowest_vloss, acc, self.highest_tracc)\n        if acc < self.threshold: # if training accuracy is below threshold adjust lr based on training accuracy\n            if acc>self.highest_tracc: # training accuracy improved in the epoch\n                LRA.msg= f' training accuracy improved from  {self.highest_tracc:7.4f} to {acc:7.4f} learning rate held at {lr:10.8f}'\n                self.highest_tracc=acc # set new highest training accuracy\n                LRA.best_weights=self.model.get_weights() # traing accuracy improved so save the weights\n                self.count=0 # set count to 0 since training accuracy improved\n                self.stop_count=0 # set stop counter to 0\n                if v_loss<self.lowest_vloss:\n                    self.lowest_vloss=v_loss             \n            else: \n                # training accuracy did not improve check if this has happened for patience number of epochs\n                # if so adjust learning rate\n                if self.count>=self.patience -1:\n                    self.lr= lr* self.factor # adjust the learning by factor\n                    tf.keras.backend.set_value(self.model.optimizer.lr, self.lr) # set the learning rate in the optimizer\n                    self.count=0 # reset the count to 0\n                    self.stop_count=self.stop_count + 1\n                    if self.dwell:\n                        self.model.set_weights(LRA.best_weights) # return to better point in N space                        \n                    else:\n                        if v_loss<self.lowest_vloss:\n                            self.lowest_vloss=v_loss\n                    msgs=f' training accuracy {acc:7.4f} < highest accuracy of {self.highest_tracc:7.4f} '\n                    LRA.msg=msgs + f' for {self.patience } epochs, lr adjusted to {self.lr:10.8f}'                    \n                else:\n                    self.count=self.count +1 # increment patience counter\n                    LRA.msg=f' training accuracy {acc:7.4f} < highest accuracy of {self.highest_tracc:7.4f} '\n                    #print_in_color(msg, (255,255,0), (55,65,80))\n        else: # training accuracy is above threshold so adjust learning rate based on validation loss\n            if v_loss< self.lowest_vloss: # check if the validation loss improved\n                msgs=f' validation loss improved from {self.lowest_vloss:8.5f} to {v_loss:8.5}, saving best weights'\n                LRA.msg=msgs + f' learning rate held at {self.lr:10.8f}'\n                #print_in_color(msg, (0,255,0), (55,65,80))\n                self.lowest_vloss=v_loss # replace lowest validation loss with new validation loss                \n                LRA.best_weights=self.model.get_weights() # validation loss improved so save the weights\n                self.count=0 # reset count since validation loss improved  \n                self.stop_count=0                    \n            else: # validation loss did not improve\n                if self.count>=self.patience-1:\n                    self.lr=self.lr * self.factor # adjust the learning rate\n                    self.stop_count=self.stop_count + 1 # increment stop counter because lr was adjusted                    \n                    msgs=f' val_loss of {v_loss:8.5f} > {self.lowest_vloss:8.5f} for {self.patience} epochs'\n                    LRA.msg=msgs + f', lr adjusted to {self.lr:10.8f}'\n                    self.count=0 # reset counter\n                    tf.keras.backend.set_value(self.model.optimizer.lr, self.lr) # set the learning rate in the optimizer\n                    if self.dwell:\n                        self.model.set_weights(LRA.best_weights) # return to better point in N space\n                else: \n                    self.count =self.count +1 # increment the patience counter\n                    LRA.msg=f' validation loss of {v_loss:8.5f} > {self.lowest_vloss:8.5f}'\n                    #print_in_color(msg, (255,255,0), (55,65,80)) \n                if acc>self.highest_tracc:\n                    self.highest_tracc= acc\n        if epoch==self.end_epoch:\n            print_in_color(LRA.msg, (255,255,0), (55,65,80)) # print out data for the final epoch\n        if self.stop_count> self.stop_patience - 1: # check if learning rate has been adjusted stop_count times with no improvement\n            LRA.msg=f' training has been halted at epoch {epoch + 1} after {self.stop_patience} adjustments of learning rate with no improvement'\n            print_in_color(LRA.msg, (0,255,0), (55,65,80))\n            self.model.stop_training = True # stop training","a649a4ba":"patience=1\nstop_patience=4\nthreshold=.9\nfactor=.5\ndwell=False\nmodel_type='MobilenetV2'\nepochs=6\ncallbacks=[LRA(model=model,patience=patience,stop_patience=stop_patience, threshold=threshold,\n                   factor=factor,dwell=dwell, model_name=model_type, freeze=freeze, end_epoch=epochs - 1 )]","3a184e96":"history=model.fit(x=train_gen,  epochs=epochs, verbose=2, callbacks=callbacks,  validation_data=valid_gen,\n               validation_steps=None,  shuffle=False,  initial_epoch=0)","59f2309a":"def tr_plot(tr_data, start_epoch):\n    #Plot the training and validation data\n    tacc=tr_data.history['accuracy']\n    tloss=tr_data.history['loss']\n    vacc=tr_data.history['val_accuracy']\n    vloss=tr_data.history['val_loss']\n    Epoch_count=len(tacc)+ start_epoch\n    Epochs=[]\n    for i in range (start_epoch ,Epoch_count):\n        Epochs.append(i+1)   \n    index_loss=np.argmin(vloss)#  this is the epoch with the lowest validation loss\n    val_lowest=vloss[index_loss]\n    index_acc=np.argmax(vacc)\n    acc_highest=vacc[index_acc]\n    plt.style.use('fivethirtyeight')\n    sc_label='best epoch= '+ str(index_loss+1 +start_epoch)\n    vc_label='best epoch= '+ str(index_acc + 1+ start_epoch)\n    fig,axes=plt.subplots(nrows=1, ncols=2, figsize=(20,8))\n    axes[0].plot(Epochs,tloss, 'r', label='Training loss')\n    axes[0].plot(Epochs,vloss,'g',label='Validation loss' )\n    axes[0].scatter(index_loss+1 +start_epoch,val_lowest, s=150, c= 'blue', label=sc_label)\n    axes[0].set_title('Training and Validation Loss')\n    axes[0].set_xlabel('Epochs')\n    axes[0].set_ylabel('Loss')\n    axes[0].legend()\n    axes[1].plot (Epochs,tacc,'r',label= 'Training Accuracy')\n    axes[1].plot (Epochs,vacc,'g',label= 'Validation Accuracy')\n    axes[1].scatter(index_acc+1 +start_epoch,acc_highest, s=150, c= 'blue', label=vc_label)\n    axes[1].set_title('Training and Validation Accuracy')\n    axes[1].set_xlabel('Epochs')\n    axes[1].set_ylabel('Accuracy')\n    axes[1].legend()\n    plt.tight_layout\n    #plt.style.use('fivethirtyeight')\n    plt.show()\n","ee52ec74":"tr_plot(history, 0)","04b9eb39":"base_model.trainable=True\nfine_tune_epochs=8\ntotal_epochs=epochs + fine_tune_epochs\nhistory=model.fit(x=train_gen,  epochs=total_epochs, verbose=2, callbacks=callbacks,  validation_data=valid_gen,\n               validation_steps=None,  shuffle=False,  initial_epoch=epochs)\ntr_plot(history,epochs)","572da00e":"def display_eval_metrics(e_data):\n    msg='Model Metrics after Training'\n    print_in_color(msg, (255,255,0), (55,65,80))\n    msg='{0:^24s}{1:^24s}'.format('Metric', 'Value')\n    print_in_color(msg, (255,255,0), (55,65,80))\n    for key,value in e_data.items():\n        print (f'{key:^24s}{value:^24.5f}')\n    acc=e_data['accuracy']* 100\n    return acc","3edcd59b":"subject='meat'\nsave_dir = r'.\/'\ne_dict=model.evaluate( test_gen, batch_size=test_batch_size, verbose=1, steps=test_steps, return_dict=True)\nacc=display_eval_metrics(e_dict)\nmsg=f'accuracy on the test set is {acc:5.2f} %'\nprint_in_color(msg, (0,255,0),(55,65,80))\nsave_id=str (model_type +  '-' + subject +'-'+ str(acc)[:str(acc).rfind('.')+3] + '.h5')\nsave_loc=os.path.join(save_dir, save_id)\nmodel.save(save_loc)\npreds=model.predict(test_gen, batch_size=test_batch_size, verbose=0, steps=None)","faf29372":"def print_info( test_gen, preds, print_code, save_dir, subject ):\n    class_dict=test_gen.class_indices\n    labels= test_gen.labels\n    file_names= test_gen.filenames \n    error_list=[]\n    true_class=[]\n    pred_class=[]\n    prob_list=[]\n    new_dict={}\n    error_indices=[]\n    y_pred=[]\n    for key,value in class_dict.items():\n        new_dict[value]=key             # dictionary {integer of class number: string of class name}\n    # store new_dict as a text fine in the save_dir\n    classes=list(new_dict.values())     # list of string of class names\n    dict_as_text=str(new_dict)\n    dict_name= subject + '-' +str(len(classes)) +'.txt'  \n    dict_path=os.path.join(save_dir,dict_name)    \n    with open(dict_path, 'w') as x_file:\n        x_file.write(dict_as_text)    \n    errors=0      \n    for i, p in enumerate(preds):\n        pred_index=np.argmax(p)        \n        true_index=labels[i]  # labels are integer values\n        if pred_index != true_index: # a misclassification has occurred\n            error_list.append(file_names[i])\n            true_class.append(new_dict[true_index])\n            pred_class.append(new_dict[pred_index])\n            prob_list.append(p[pred_index])\n            error_indices.append(true_index)            \n            errors=errors + 1\n        y_pred.append(pred_index)    \n    if print_code !=0:\n        if errors>0:\n            if print_code>errors:\n                r=errors\n            else:\n                r=print_code           \n            msg='{0:^28s}{1:^28s}{2:^28s}{3:^16s}'.format('Filename', 'Predicted Class' , 'True Class', 'Probability')\n            print_in_color(msg, (0,255,0),(55,65,80))\n            for i in range(r):\n                msg='{0:^28s}{1:^28s}{2:^28s}{3:4s}{4:^6.4f}'.format(error_list[i], pred_class[i],true_class[i], ' ', prob_list[i])\n                print_in_color(msg, (255,255,255), (55,65,60))\n                #print(error_list[i]  , pred_class[i], true_class[i], prob_list[i])               \n        else:\n            msg='With accuracy of 100 % there are no errors to print'\n            print_in_color(msg, (0,255,0),(55,65,80))\n    if errors>0:\n        plot_bar=[]\n        plot_class=[]\n        for  key, value in new_dict.items():        \n            count=error_indices.count(key) \n            if count!=0:\n                plot_bar.append(count) # list containg how many times a class c had an error\n                plot_class.append(value)   # stores the class \n        fig=plt.figure()\n        fig.set_figheight(len(plot_class)\/3)\n        fig.set_figwidth(10)\n        plt.style.use('fivethirtyeight')\n        for i in range(0, len(plot_class)):\n            c=plot_class[i]\n            x=plot_bar[i]\n            plt.barh(c, x, )\n            plt.title( ' Errors by Class on Test Set')\n    if len(classes)<= 20:\n        # create a confusion matrix and a test report        \n        y_true= np.array(labels)        \n        y_pred=np.array(y_pred)        \n        cm = confusion_matrix(y_true, y_pred )\n        clr = classification_report(y_true, y_pred, target_names=classes)\n        length=len(classes)\n        if length<8:\n            fig_width=8\n            fig_height=8\n        else:\n            fig_width=length\n            fig_height=length\n        plt.figure(figsize=(fig_width, fig_height))\n        sns.heatmap(cm, annot=True, vmin=0, fmt='g', cmap='Blues', cbar=False)       \n        plt.xticks(np.arange(length)+.5, classes, rotation= 90)\n        plt.yticks(np.arange(length)+.5, classes, rotation=0)\n        plt.xlabel(\"Predicted\")\n        plt.ylabel(\"Actual\")\n        plt.title(\"Confusion Matrix\")\n        plt.show()    \n        print(\"Classification Report:\\n----------------------\\n\", clr)","40eb45f3":"print_code=20\nprint_info( test_gen, preds, print_code, save_dir, subject)","8f6ba974":"### create subclass of Keras callbacks to control the learning rate","d99f1faa":"### create train, test andvalid generators","d41d7882":"### define function to plot training results","55404d40":"### check the balance of the dataset","ff73972c":"### instantiate the custom callback","44f95de4":"### define function to create confusion matrix and classification report","ea54bcfc":"### train the model","a6ffee86":"### define handy function to print text in specified RGB foreground and background colors","3cbfad59":"####import needed modules","5ba1f5be":"###  gather the image files into a data frame","cfa3ba21":"### create the model using MobilenetV2 transfer learning","e501cc3c":"### split df into train, test and valid dataframe","b751d9e9":"### evaluate the model and make predictions on the test set","55e1c993":"#### dataset is fully balanced","53a46f93":"### fine tune the model","8bacc045":"### define function to print results of model.evaluate","384a3c16":"### define function to show some images"}}