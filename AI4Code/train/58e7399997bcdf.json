{"cell_type":{"920aa593":"code","5ed5636d":"code","9c965121":"code","ed426130":"code","6fc4799f":"code","c0cca722":"code","3cefa1b8":"code","7b85f6d7":"code","19bc474a":"code","6070813f":"code","00c002ee":"code","55781bb1":"code","4ee8bbb9":"code","6ca1f02f":"code","2ffde864":"code","58305af2":"code","316c56a1":"code","ee543ec8":"code","7dd6e8bf":"code","bb64d6ef":"code","1a8ad7f2":"code","0a7b7927":"code","63ef4c01":"code","7563fced":"code","2fc1657a":"code","30addf23":"code","4b06b72a":"code","e4e864ef":"code","88b64ff2":"code","24e12a59":"code","31be99c7":"code","49bb136c":"code","e13bc328":"code","2543ab67":"code","377004cc":"code","ab4f1b66":"code","d4e44bde":"markdown","435ae992":"markdown","f69cf4ad":"markdown","2f689a6c":"markdown","67e22a65":"markdown","1f45e45c":"markdown","d69ae0f6":"markdown","a78891d5":"markdown","aecf7560":"markdown","8158a0a2":"markdown","38d2b850":"markdown"},"source":{"920aa593":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5ed5636d":"df = pd.read_csv('\/kaggle\/input\/did-it-rain-in-seattle-19482017\/seattleWeather_1948-2017.csv')","9c965121":"print(df.shape)\ndf.head()","ed426130":"df['RAIN'].value_counts()","6fc4799f":"for column in df:\n    print(column)\n    print(df[column].isnull().sum().sum())","c0cca722":"df.dropna(inplace=True)","3cefa1b8":"corr = df.corr()\nsns.heatmap(data=df.corr(),annot=True,cmap=\"coolwarm\",linewidths=1,fmt=\".2f\",linecolor=\"gray\")","7b85f6d7":"sns.pairplot(df, palette=\"husl\",hue='RAIN')","19bc474a":"sns.displot(data=df,palette=\"husl\", x='TMIN', y='TMAX', hue='RAIN', kind='kde')","6070813f":"rain = pd.get_dummies(df['RAIN'], drop_first=True)","00c002ee":"df = df.drop('RAIN', axis=1)\ndf = pd.concat([df, rain], axis=1)\nprint(df.shape)\ndf.head()","55781bb1":"df.columns = ['DATE', 'PRCP', 'TMAX', 'TMIN', 'RAIN']\ndf.head()","4ee8bbb9":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics","6ca1f02f":"x.shape, y.shape","2ffde864":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)","58305af2":"from sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression()\nlogistic.fit(x_train, y_train)\nprediction_lr = logistic.predict(x_test)\nprint(classification_report(y_test,prediction_lr))","316c56a1":"plt.figure(figsize=(10, 10))\ny_pred_proba = logistic.predict_proba(x_train)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_proba)\nauc = metrics.roc_auc_score(y_train, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM train, auc=\"+str(auc))\n\ny_pred_proba = logistic.predict_proba(x_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM test, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","ee543ec8":"from sklearn.ensemble import RandomForestClassifier\nrforest = RandomForestClassifier()\nrforest.fit(x_train, y_train)\nprediction_rf = rforest.predict(x_test)\nprint(classification_report(y_test, prediction_rf))","7dd6e8bf":"plt.figure(figsize=(10, 10))\ny_pred_proba = forest.predict_proba(x_train)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_proba)\nauc = metrics.roc_auc_score(y_train, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM train, auc=\"+str(auc))\n\ny_pred_proba = forest.predict_proba(x_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM test, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","bb64d6ef":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 4)\nknn.fit(x_train, y_train)\ny_pred4 = knn.predict(x_test)\nprint(metrics.accuracy_score(y_test, y_pred4))\n#acc_knn = round(knn.score(x_train, y_train)*100 ,2)\n#print(acc_knn)\n\nplt.figure(figsize=(10, 10))\ny_pred_proba = knn.predict_proba(x_train)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_proba)\nauc = metrics.roc_auc_score(y_train, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM train, auc=\"+str(auc))\n\ny_pred_proba = knn.predict_proba(x_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM test, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","1a8ad7f2":"df.dropna(inplace=True)","0a7b7927":"ds2 = \"target_class\"","63ef4c01":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","7563fced":"y_test.mean()","2fc1657a":"x_train.head()","30addf23":"y_test.head()","4b06b72a":"from keras.models import Sequential\nfrom keras.layers import Flatten, Dense\nfrom keras.layers import Embedding, SimpleRNN\n\nmodel = Sequential()\nmodel.add(Embedding(2000, 8, input_length=20))\nmodel.add(SimpleRNN(32))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\nmodel.summary()\nhistory = model.fit(x_train, y_train,\n                    epochs=30,\n                    batch_size=16,\n                    validation_split=0.2)","e4e864ef":"plt.figure(figsize=(10, 10))\ny_pred_proba = model.predict_proba(x_train)#[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_proba)\nauc = metrics.roc_auc_score(y_train, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM train, auc=\"+str(auc))\n\ny_pred_proba = model.predict_proba(x_test)#[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM test, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","88b64ff2":"print(history.history.keys())","24e12a59":"result=model.evaluate(x_test, y_test)\nprint(\"test loss:{}\\ntest accuracy:{}\".format(result[0],result[1])) ","31be99c7":"import keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.layers import Dropout","49bb136c":"modelAnn = Sequential([\n    Dense(32, activation='relu', input_dim=3),\n    Dropout(0.5),\n    Dense(16, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\nmodelAnn.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\nmodelAnn.summary()","e13bc328":"history = modelAnn.fit(x_train, y_train, batch_size=10, epochs=10,verbose=2)","2543ab67":"print(history.history.keys())","377004cc":"prediction_nn = modelAnn.predict(x_test)\nprediction_nn = [1 if y>=0.5 else 0 for y in prediction_nn]\nprint(classification_report(y_test, prediction_nn))","ab4f1b66":"plt.figure(figsize=(10, 10))\ny_pred_proba = modelAnn.predict_proba(x_train)#[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_proba)\nauc = metrics.roc_auc_score(y_train, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM train, auc=\"+str(auc))\n\ny_pred_proba = modelAnn.predict_proba(x_test)#[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"SVM test, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","d4e44bde":"\u041e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","435ae992":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u2013 \u044d\u0442\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432. \u041e\u043d\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u0443\u044e \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u0438 \u043d\u0435 \u0434\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.","f69cf4ad":"# 2. \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441","2f689a6c":"# 5. ANN","67e22a65":"# 4. RNN","1f45e45c":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","d69ae0f6":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443 RAIN \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 0 \u0438\u043b\u0438 1","a78891d5":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","aecf7560":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","8158a0a2":"# 3. KNN","38d2b850":"#  1. \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f"}}