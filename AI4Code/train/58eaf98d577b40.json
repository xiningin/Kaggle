{"cell_type":{"d1a7f440":"code","70b907c2":"code","6a67bfca":"code","a6897f9e":"code","52acb391":"code","d89e92b3":"code","f1a329cd":"code","6d26a1ff":"code","4bea7cff":"code","b6578d4f":"code","5e060f40":"code","4bff324e":"code","fcb6ae6d":"code","03a4a4b5":"code","dab24e13":"code","312c7130":"code","ddbd0836":"code","ad1a6936":"code","6659a2e8":"code","f2cb8dd0":"code","e60b285a":"code","9e6a6313":"code","f196bcc6":"code","a3b18f05":"code","ab6fd8b1":"code","82987723":"code","2da44731":"code","3de61d67":"code","02a517a5":"code","20675894":"code","795104ff":"code","bfa85015":"code","8ae790df":"code","6ff716f0":"code","2557fab4":"code","afdeadf8":"code","b69eef78":"code","0c9d8304":"code","46c3947a":"code","5ecfc50f":"code","bc98829a":"code","d507655e":"code","a486d6c5":"code","e7bced41":"code","d62223ef":"code","45b22ec2":"code","582591b7":"code","e9bee569":"code","5512ba94":"code","5d2809c7":"code","5b570a08":"code","8d632312":"code","c08725ac":"code","b02e4186":"code","c224fe7a":"code","03f000ff":"code","d4f79f5b":"code","534331cd":"code","7feb938c":"code","f4cb891b":"code","7e53d682":"code","5b254c8e":"code","08fab30b":"code","0ccff1ba":"code","37d6841b":"code","59fa2154":"code","49fb3c7c":"code","9e83e6e7":"code","f4add42d":"code","6b2c1178":"code","a0be3538":"code","8c3b5506":"code","7f86ce98":"code","0a960a53":"code","120698ad":"code","fa54b1a6":"code","fc107ba5":"code","72d84f44":"code","17eff500":"code","ef193f32":"code","62e784e5":"code","c3330bf4":"code","ca7016d4":"code","4cc7a5c0":"code","ff8eb0d8":"code","2a5f1b85":"code","d2ebb7f8":"code","b3a52b12":"code","8acb9a74":"code","9682f163":"code","bba41bad":"code","0ed55847":"code","25fe65bd":"code","0f050f7d":"code","47cff061":"code","038f95f9":"code","b873d228":"code","af5dc2a1":"code","2010b630":"code","ee9e4ca5":"code","62a82021":"code","ad0fca6f":"code","a2c27ae9":"code","57fd5ef1":"code","9050dc19":"code","83b5a9cc":"code","edb668f2":"code","86de9145":"code","0ec40330":"code","17aacea7":"code","b6d3e135":"code","d22a471e":"code","31733079":"code","cd7fba66":"code","8f2fa721":"code","6948d7fc":"code","ad55b907":"code","7c97b909":"code","2c7018ad":"code","12a30264":"code","5b6c5e51":"code","97de9dfe":"code","ed19c743":"code","6efa3f4b":"code","0cecaec5":"code","779c78cf":"code","5fd64e3d":"code","472e3b61":"code","635d5d6c":"code","f5d6c1df":"code","38a74876":"code","46824760":"code","4824abb1":"code","9cb0f954":"code","4b06ecf1":"code","452e6327":"code","2a3bee52":"code","b22c6da9":"code","7c75f42e":"code","5a2a66d1":"code","251fb064":"code","30fc6cd8":"code","359579f0":"code","23c77829":"code","d36a0557":"code","c352eb2d":"code","c9d5828a":"markdown","a84c20d0":"markdown","f072983e":"markdown","6c3dff4f":"markdown","193f1df1":"markdown","338e313f":"markdown","84592dbc":"markdown","fcc0beca":"markdown","97f4ce24":"markdown","904ca378":"markdown","f0744c5b":"markdown","ce870b39":"markdown","445fe7d9":"markdown","6af40c94":"markdown","ea243e5b":"markdown","5c71de4e":"markdown","298cb5cc":"markdown","fce89d78":"markdown","b38df7fd":"markdown","239ae64f":"markdown","28a79fc6":"markdown","ad88b11f":"markdown","bf68bdcb":"markdown","2247cc07":"markdown","108fa4a3":"markdown","9c5a86a9":"markdown","11816432":"markdown","f0dc8caf":"markdown","9917e757":"markdown","09ba52ae":"markdown","2ba0d360":"markdown","44cf0450":"markdown","c2e0c057":"markdown","4d1adc7b":"markdown","b6ba7d03":"markdown","2126043a":"markdown","81eb3cb8":"markdown","510b2a8b":"markdown","a6f7d530":"markdown","a17f7480":"markdown","149a11e8":"markdown","d4384ff4":"markdown","f0be70bb":"markdown","e09a7621":"markdown","d784bc3c":"markdown","923da5fa":"markdown","d9d8af01":"markdown","337019b0":"markdown","c886031c":"markdown","0d2c648c":"markdown","c473e993":"markdown","d10b22e6":"markdown","d269ca6d":"markdown","2a6b8382":"markdown","8f10ad30":"markdown","66df9ada":"markdown","f23642f3":"markdown","ac2c88c1":"markdown","c55dc7bd":"markdown","323f33d6":"markdown","71a59942":"markdown","f5855a95":"markdown","3c497925":"markdown","1b83b5e6":"markdown","247fe1a4":"markdown","efad0cc1":"markdown","c692fe46":"markdown","7c5a8cdf":"markdown","264097d1":"markdown","fe80bca1":"markdown","08eaa8ee":"markdown","0c71fe36":"markdown","edd28bf1":"markdown","6fd59320":"markdown","5a660f4c":"markdown","8fed3eff":"markdown","46c8554d":"markdown","c90dd1ca":"markdown","0c2ce215":"markdown","f3cb9d8e":"markdown","57f00b18":"markdown","f2d9f3a1":"markdown","a4991e38":"markdown","e2580402":"markdown","b1bbf189":"markdown","a72ff621":"markdown","d835dba4":"markdown","dac8ff08":"markdown","31763baf":"markdown","adb4a39d":"markdown","87a50563":"markdown","cd59b39d":"markdown","a8bead71":"markdown","989b8fb6":"markdown","09ae526a":"markdown","9d4568ba":"markdown","ae0afa8c":"markdown","353302b0":"markdown","1048da05":"markdown","23947101":"markdown"},"source":{"d1a7f440":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity, linear_kernel\nfrom surprise import Reader, SVD, Dataset\nfrom surprise.model_selection import cross_validate\nfrom sklearn.neighbors import NearestNeighbors\nfrom mlxtend.frequent_patterns import apriori,association_rules\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom kneed import KneeLocator\nfrom sklearn.decomposition import TruncatedSVD","70b907c2":"from warnings import filterwarnings\nfilterwarnings('ignore')\n# display all columns of the dataframe\npd.options.display.max_columns = None\n# display all rows of the dataframe\npd.options.display.max_rows = None\n# return an output value upto 6 decimals\npd.options.display.float_format = '{:.6f}'.format","6a67bfca":"df_movies=pd.read_csv('..\/input\/movieratings\/movies.csv')\nprint(df_movies.shape)\ndf_movies.head()","a6897f9e":"df_movies.info()","52acb391":"df_ratings =pd.read_csv('..\/input\/movieratings\/ratings.csv')\nprint(df_ratings.shape)\ndf_ratings.head()","d89e92b3":"df_ratings.info()","f1a329cd":"genres_df = pd.DataFrame(df_movies.genres.str.split('|').tolist()).stack().unique()\ngenres_df = pd.DataFrame(genres_df, columns = ['genres'])\ndf_movies = df_movies.join(df_movies.genres.str.get_dummies())\n\n#Using regular expressions to find a year stored between parentheses\n#We specify the parantheses so we don't conflict with movies that have years in their titles\ndf_movies['year'] = df_movies.title.str.extract('(\\(\\d\\d\\d\\d\\))',expand=False)\n#Removing the parentheses\ndf_movies['year'] = df_movies.year.str.extract('(\\d\\d\\d\\d)',expand=False)\n#Removing the years from the 'title' column\ndf_movies['title'] = df_movies.title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\n#Applying the strip function to get rid of any ending whitespace characters that may have appeared\ndf_movies['title'] = df_movies['title'].apply(lambda x: x.strip())\n\n#Every genre is separated by a | so we simply have to call the split function on |\ndf_movies['genres'] = df_movies.genres.str.replace('|',',')\n\ndf_movies.head()","6d26a1ff":"data = pd.merge(df_movies, df_ratings, on=\"movieId\")\n##Removing unwanted feature (timestamp) from ratings dataset\ndata.drop('timestamp',axis=1,inplace=True)\ndata.head()","4bea7cff":"data.info()","b6578d4f":"data.shape","5e060f40":"data.dtypes","4bff324e":"missing_value = pd.DataFrame({\n    'Missing Value': data.isnull().sum(),\n    'Percentage': (data.isnull().sum() \/ len(data))*100\n})","fcb6ae6d":"missing_value.sort_values(by='Percentage', ascending=False)","03a4a4b5":"data.dropna(inplace=True)","dab24e13":"data['year']=data['year'].astype('int64')","312c7130":"data.reset_index(inplace=True,drop=True)","ddbd0836":"# set the figure size\nplt.figure(figsize=(10,8))\n\n# plot heatmap to check null values\n# isnull(): returns 'True' for a missing value\n# cbar: specifies whether to draw a colorbar; draws the colorbar for 'True' \nsns.heatmap(data.isnull(), cbar=False)\n\n# display the plot\nplt.show()","ad1a6936":"data.describe(include=np.number)","6659a2e8":"data.describe(include = object)","f2cb8dd0":"corr_matrix=data.corr()\ncorr_matrix","e60b285a":"plt.figure(figsize=(11,9))\ndropSelf = np.zeros_like(corr_matrix)\ndropSelf[np.triu_indices_from(dropSelf)] = True\n\nsns.heatmap(corr_matrix, cmap=sns.diverging_palette(220, 10, as_cmap=True), annot=True, fmt=\".2f\", mask=dropSelf)\n\nsns.set(font_scale=1.5)","9e6a6313":"user_ratings =data[['userId','rating']].groupby('userId').mean()","f196bcc6":"fig = plt.figure(figsize = (8,8))\nuser_ratings.plot(kind = 'hist', bins = 100, figsize = (8,8), color = 'blue')\nplt.plot()\nplt.xlabel('User Ratings')\nplt.title('Average User Ratings')\nplt.ylabel('Frequency')","a3b18f05":"plt.hist(data['year'], bins=25)\nplt.show()","ab6fd8b1":"### considering only the genre columns for the test\ntest = df_movies.iloc[:,3:22].sum()\ntest=test.iloc[1:]\nprint(test)","82987723":"print(type(pd.to_numeric(test)))\nprint(type(test.to_numpy().reshape(18,)[0]))\n# genre_sum = np.hstack((np.asarray(genre_list).reshape(18,1), test.to_numpy().reshape(18,)))\n# genre_sum[:,1] = genre_sum[:,1].astype('int64')\ntest2 = test.to_numpy().reshape(18,)","2da44731":"genre_list=['action', 'adventure','animation', 'childrens', 'comedy', 'crime', 'documentary', 'drama','fantasy', 'noir', 'horror', 'musical', 'mystery', 'romance', 'scifi','thriller', 'war', 'western']\nx = np.arange(18)\nplt.figure(figsize = (10,5))\nplt.bar(x, test2, color = 'g')\nplt.xticks(x, genre_list, rotation = 'vertical')\nplt.xlabel('Genre')\nplt.ylabel('Number of Movies')\nplt.title('Movies per Genre')\nsns.set(font_scale=1.5)\nplt.show()","3de61d67":"ratings = pd.DataFrame(data.groupby('title')['rating'].mean())\nratings['num of ratings'] = pd.DataFrame(data.groupby('title')['rating'].count())\nsns.jointplot(x='rating',y='num of ratings',data=ratings,alpha=1.0,height = 8)","02a517a5":"df_ratings.drop('timestamp',axis=1,inplace=True)\n##Calculating the average rating for each user id\nratings_grouped_by_users = df_ratings.groupby('userId').agg([np.size, np.mean])\nratings_grouped_by_users = ratings_grouped_by_users.drop('movieId', axis = 1)\nratings_grouped_by_users.head()","20675894":"ratings_grouped_by_users['rating']['size'].sort_values(ascending=False).head(10).plot(kind='bar',figsize=(10,8))","795104ff":"##Average rating for each movie\nratings_grouped_by_movies = df_ratings.groupby('movieId').agg([np.mean], np.size)\nprint(ratings_grouped_by_movies.shape)\nratings_grouped_by_movies = ratings_grouped_by_movies.drop('userId', axis=1)\nratings_grouped_by_movies.head()","bfa85015":"#top20 highest rated movies\nratings_grouped_by_movies['rating']['mean'].sort_values(ascending=False).head(20).plot(kind='barh', figsize=(7,6));","8ae790df":"### movies having the average rating less than 1.5\nlow_rated_movies_filter = ratings_grouped_by_movies['rating']['mean']< 1.5\nlow_rated_movies = ratings_grouped_by_movies[low_rated_movies_filter]\nlow_rated_movies.head()","6ff716f0":"low_rated_movies.head(20).plot(kind='barh', figsize=(7,5));","2557fab4":"df = data[['movieId', 'rating']].groupby('movieId').mean()","afdeadf8":"df.head()","b69eef78":"genres_df.count()","0c9d8304":"data1=data.copy()\ndata1.drop('genres', inplace = True, axis=1)","46c3947a":"data1.head()","5ecfc50f":"for genres in genres_df.genres:\n    df = data1[data1[genres] == True]\n    df = data1[data1.set_index('movieId').index.isin(df.set_index('movieId').index)]\n    df = df[['movieId', 'rating']].groupby('movieId').mean()\n    sns.distplot(df.rating, hist = False, kde = True, label = genres)\nplt.legend(loc = (1.10,0), ncol = 2)\nplt.xlim(0,8)\nplt.xlabel('Movie Rating')\nplt.ylabel('Density')\nplt.title('Average Movie Ratings by Genre')\nplt.figure(figsize=(20,20))\nplt.show()","bc98829a":"for genres in genres_df.genres:\n    df2 = df_movies[df_movies[genres] == True]\n    df2 = df_ratings[df_ratings.set_index('movieId').index.isin(df2.set_index('movieId').index)]\n    df2 = df2[['movieId', 'rating']].groupby('movieId').std()\n    sns.distplot(df2.rating, hist = False, kde = True, label = genres)\nplt.legend(loc = (1.10,0), ncol = 2)\nplt.xlim(0,3)\nplt.ylim(0,1.6)\nplt.xlabel('Stdev')\nplt.ylabel('Density')\nplt.title('Stdev Movie Ratings by Genre')\nplt.figure(figsize=(20,20))\nplt.show()","d507655e":"df_movies.head()","a486d6c5":"###Considering the genres and movie title\ntitle_genre=df_movies.iloc[:,1:23]","e7bced41":"title_genre.drop('genres',axis=1,inplace=True)\ntitle_genre.set_index('title',inplace=True)","d62223ef":"print(title_genre.shape)\ntitle_genre.head()","45b22ec2":"pca = PCA(n_components=20)\npca.fit(title_genre)\npca_samples = pca.transform(title_genre)","582591b7":"pcs = ['PC'+str(i) for i in range(1,21)]\npca.explained_variance_\nplt.figure(figsize=(10, 5))\nplt.bar(pcs, pca.explained_variance_)\nplt.ylabel('Eigenvalues')\nplt.xlabel('Principal Components')\nplt.xticks(rotation=90)\nplt.show()","e9bee569":"plt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.show()","5512ba94":"pca = PCA(n_components=15)\npca.fit(title_genre)\npca_samples = pca.transform(title_genre)","5d2809c7":"np.cumsum(pca.explained_variance_ratio_)","5b570a08":"dfx = pd.DataFrame(pca_samples)\n#the dataframe of pca samples\ndfx.head()","8d632312":"ssd = []\nsscore = []\nfor k in range(2,10):\n    kmeans = KMeans(n_clusters=k, random_state=4)\n    kmeans.fit(dfx)\n    ssd.append(kmeans.inertia_)\n    ss = silhouette_score(dfx, kmeans.labels_)\n    sscore.append(ss)","c08725ac":"fig, ax = plt.subplots(figsize=(15,5))\nax.plot(range(2,10), ssd, 'r')\nax.set_xlabel('No. Clusters')\nax.set_ylabel('SSD')\nplt.show()","b02e4186":"kl = KneeLocator(range(2,10), ssd, curve=\"convex\", direction=\"decreasing\")\nkl.elbow","c224fe7a":"new_clusters = KMeans(n_clusters = 5, random_state = 4)\n# fit the model with no.of clusters obtained from above\nnew_clusters.fit(title_genre)\n# append the cluster label for each point in the dataframe 'title_genre'\ntitle_genre['Cluster'] = new_clusters.labels_","03f000ff":"a=title_genre['Cluster'].value_counts() #No.of clusters formed in the data \na","d4f79f5b":"plt.figure(figsize=(12,8))\nsns.countplot(data=title_genre,x='Cluster')\n# set the axes and plot labels\n# set the font size using 'fontsize'\nplt.title('Size of Cluster', fontsize = 15)\nplt.xlabel('Clusters', fontsize = 15)\nplt.ylabel('Number of values', fontsize = 15)\nplt.show()","534331cd":"Cluster0 = title_genre[title_genre['Cluster']==0].drop('Cluster',axis=1).mean()","7feb938c":"Cluster0.sort_values(ascending=False)[0:15]","f4cb891b":"Cluster1 = title_genre[title_genre['Cluster']==1].drop('Cluster',axis=1).mean()","7e53d682":"Cluster1.sort_values(ascending=False)[0:15]","5b254c8e":"def cluster_plot(data, nclusters):\n    import matplotlib.pyplot as plt\n    from sklearn.cluster import KMeans\n    X = data.copy()\n    km = KMeans(n_clusters=nclusters, init='random', n_init=10, max_iter=300, tol=1e-04, random_state=0)\n    y_km = km.fit_predict(X)\n    # Visualize it:\n    plt.figure(figsize=(8, 6))\n    plt.scatter(X.iloc[:,0], X.iloc[:,1], c=km.labels_.astype(float))\n    # plot the centroids\n    plt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], s=250, marker='*', c='red', label='centroids')\n    plt.legend(scatterpoints=1)\n    plt.grid()\n    plt.show()","08fab30b":"cluster_plot(dfx,5)","0ccff1ba":"movie_rating = pd.merge(df_movies,df_ratings, how='left', on='movieId')","37d6841b":"movie_rating.isnull().sum()","59fa2154":"movie_rating.dropna(inplace=True)","49fb3c7c":"movie_rating.reset_index(inplace=True,drop=True)","9e83e6e7":"movie_rating['userId']=movie_rating['userId'].astype('int64')","f4add42d":"movie_rating.tail()","6b2c1178":"df=movie_rating.copy()\n#  dropping the duplicates that are present in the data based on movie title and genres\ndf.drop_duplicates(subset=['title','genres'],inplace=True) ","a0be3538":"df.reset_index(inplace=True,drop=True) #upon dropping the values reseting the index","8c3b5506":"df.shape # the shape of the dataset after dropping the duplicates","7f86ce98":"df.head() #Final dataset","0a960a53":"#TFidf vectorizer has been used considering the genres column as content\n#this nlp technique removes all unwanted english words like 'a' and 'the'\ntf = TfidfVectorizer(ngram_range=(1,2), stop_words='english')\ntfidf_matrix = tf.fit_transform(df['genres'])\ntfidf_matrix.shape","120698ad":"##Calculating the similarity between values from the matrix obtained above using linear kernel\nsimil = linear_kernel(tfidf_matrix, tfidf_matrix)\nsimil.shape","fa54b1a6":"id=df['movieId'].values ##Assigning the movie titles to the variable id","fc107ba5":"#Creating the dataframe with similarity vales and movie titles as columns\nsimil = pd.DataFrame(simil, index=id, columns=id)\nsimil.columns = df['title']\nsimil['title'] = df['title'].values","72d84f44":"simil.head(10) ","17eff500":"##A user defined function to recommend the movies based on the title I provide for the function\ndef simil_rec(ttl):\n    idx = simil[simil['title']==ttl]\n    idx = idx.drop('title', axis=1).T\n    idx.columns = ['values']\n    idx = idx.sort_values(by='values', ascending=False)\n    return idx","ef193f32":"simil_rec('Sudden Death').head(10) #Top 10 movies that are most similar to the 'Sudden Death'","62e784e5":"df[df['title']=='Kiss of the Dragon']['genres']","c3330bf4":"df[df['title']=='Best of the Best']['genres']","ca7016d4":"df[df['title']=='Sudden Death']['genres']","4cc7a5c0":"##Dropping the duplicates based on userid and title to create user item interaction matrix\nmovie_rating = movie_rating.drop_duplicates(['userId', 'title'])","ff8eb0d8":"movie_rating.shape #shape of the dataset upon dropping the duplicates","2a5f1b85":"##Calculating the rating count for each movie \nmovie_rating_count = movie_rating.groupby('title').agg('count').reset_index().iloc[:,[0,4]]\nmovie_rating_count = movie_rating_count.rename(columns={'Action': 'MovieRatingCount'})\nmovie_rating_count.head()","d2ebb7f8":"##Merging the rating count column with main dataset\nmovie_rating_count = pd.merge(movie_rating, movie_rating_count, how='left', on='title')\nmovie_rating_count.head()","b3a52b12":"##Upon merging few columns have been created changing their names\nmovie_rating_count.rename(columns={'Action_x':'Action','Action_y':'MovieRatingCount'},inplace=True)","8acb9a74":"movie_rating_count.describe()","9682f163":"movie_rating_count2 = movie_rating_count[movie_rating_count['MovieRatingCount']>=50]\n##Creating the pivot table with greater than 50 movie rating count\nmovie_rating_pivot = movie_rating_count2.pivot(index='title', columns='userId', values='rating')\nmovie_rating_pivot = movie_rating_pivot.fillna(0)\nmovie_rating_pivot.head()    ##User-item interaction matrix","bba41bad":"movie_rating_count2.shape #Shape of the user item interaction dataset","0ed55847":"##Recommending similar movies using KNearestNeighbors\nmodel_knn = NearestNeighbors(metric='cosine')\nmodel_knn.fit(movie_rating_pivot)","25fe65bd":"##The distances and indices are being calculated with neighbors being 6\ndistances, indices = model_knn.kneighbors(movie_rating_pivot, n_neighbors=6)","0f050f7d":"result = pd.DataFrame(indices, columns=['movie0', 'movie1', 'movie2', 'movie3', 'movie4', 'movie5'])\nresult.head()\n#The result dataframe consits of the different indices of movies based on the distance","47cff061":"result.shape ##Shape of the resultant dataframe","038f95f9":"mov = pd.DataFrame(movie_rating_pivot.index).reset_index()","b873d228":"##With this for loop replacing the indices in the result dataframe with movie titles of that corresponding ones\nresult2  = result.copy()\nfor i in range(0, 6):\n    movies = pd.DataFrame(movie_rating_pivot.index).reset_index()\n    movies = movies.rename(columns={'index':f'movie{i}'})\n    result2 = pd.merge(result2, movies, on=[f'movie{i}'], how='left')\n    result2 = result2.drop(f'movie{i}', axis=1)\n    result2 = result2.rename(columns={'title':f'movie{i}'})","af5dc2a1":"result2.head(20) ","2010b630":"movie_rating_pivot.shape","ee9e4ca5":"##By seeing the shape of the above dataframe intially considering it be 600 components\nsvd = TruncatedSVD(random_state=4, n_components=600)\nsvd.fit(movie_rating_pivot)","62a82021":"#Plotting the graph for svd components considering the explained variance ratio\nplt.plot(svd.explained_variance_ratio_)\nplt.show()","ad0fca6f":"##Fitting the model by considering 100 components\nsvd = TruncatedSVD(random_state=4, n_components=100)\nsvd.fit(movie_rating_pivot)","a2c27ae9":"movie_rating_svd = svd.fit_transform(movie_rating_pivot)","57fd5ef1":"movie_rating_svd.shape  ##Shape of the dataframe after svd","9050dc19":"##by using corrcoef finding out the which movies are highly correlated with each other\ncorr = np.corrcoef(movie_rating_svd)\ncorr.shape","83b5a9cc":"corr ##Correlation values","edb668f2":"##Listing out the movie titles into the movie_list\nmovie_title = movie_rating_pivot.index\nmovie_list = list(movie_title)\n##Considering any one movie here for example 'Alien'\nmovie_Alien = movie_list.index('Alien')\nmovie_Alien","86de9145":"corr_movie_Alien= corr[movie_Alien] ##Finding out all movies which are correlated with 'Alien'","0ec40330":"movie_title[(corr_movie_Alien)>0.6] ##Taking the correlation cutoff to be greater than 0.6","17aacea7":"#Considering the movie rating count to be greater than or equal to 15\nmovie_rating_count2 = movie_rating_count[movie_rating_count['MovieRatingCount']>=15]\n##Removing duplicates based on the userid and title\nmovie_rating_count2 = movie_rating_count2.drop_duplicates(subset=['userId', 'title'])","b6d3e135":"movie_rating_count.rating.value_counts() ##The range of rating.","d22a471e":"##The Reader class is used to parse a file containing ratings.It orders the data in format of (userid,title,rating) and even by\n##considering the rating scale\nreader = Reader(rating_scale=(0.5,5.0))\ndata = Dataset.load_from_df(movie_rating_count2[['userId', 'title', 'rating']], reader)","31733079":"svd = SVD()\ncross_validate(svd, data, measures=['rmse'], cv=3, return_train_measures=True)\n##The dataset is divided into train and test and with 3 folds the rmse has been calculated","cd7fba66":"trainset = data.build_full_trainset()\nsvd.fit(trainset) ##Fitting the trainset with the help of svd","8f2fa721":"#Storing all the movie titles in items\nitems = movie_rating_count2['title'].unique()\n##Considering the user '662' \ntest = [[662, iid, 4] for iid in items]\n##Finding the user predictions(ratings) for all the movies\npredictions = svd.test(test)\npred = pd.DataFrame(predictions)","6948d7fc":"a=pred.sort_values(by='est', ascending=False) ##Sorting the values based on the estimated predictions","ad55b907":"a[0:10] ##TOP 10","7c97b909":"simil.head()","2c7018ad":"simil.shape","12a30264":"movie_rating.head()","5b6c5e51":"md2 = movie_rating[['movieId', 'title']] ","97de9dfe":"md2.shape","ed19c743":"md2.drop_duplicates(inplace=True)","6efa3f4b":"#here I have considered the content based to filter based on the similar titles and collaborative for the user.\ndef hybrid_rec(ttl, userid):\n    idx = simil[simil['title']==ttl]\n    idx = idx.drop('title', axis=1).T\n    idx.columns = ['values']\n    idx['movieId'] = simil.index\n    idx = idx.sort_values(by='values', ascending=False).head(25)\n \n    items = idx['movieId'].unique()\n    test = [[userid, iid, 4] for iid in items]\n    predictions = svd.test(test)\n    pred = pd.DataFrame(predictions)\n    pred = pred.merge(md2, left_on='iid', right_on='movieId')\n    pred = pred.sort_values(by='est', ascending=False)\n    return pred","0cecaec5":"hybrid_rec('I Am Legend',5) ##passing the movie name and user id","779c78cf":"total_rating_count=movie_rating.groupby(['movieId','genres']).count()['rating'].reset_index()\n##Calculating the total rating count for movie based on movie and genre.","5fd64e3d":"movie_df=pd.merge(movie_rating,total_rating_count,how='left',on='movieId') ##merging with the main dataset","472e3b61":"movie_df.head()","635d5d6c":"movie_df.drop('genres_y',axis=1,inplace=True) #Dropping the duplicated columns\n##Renaming the duplicated columns\nmovie_df.rename(columns={'genres_x':'genres','rating_y':'total_rating_count','rating_x':'user_rating'},inplace=True)","f5d6c1df":"avg_rating=movie_rating.groupby(['movieId','genres']).mean()['rating'].reset_index() \n##Calculating the average rating for each movie based on the each movie and genre.","38a74876":"movie_df=pd.merge(movie_df,avg_rating,how='left',on='movieId') ##merging with the main the dataset\nmovie_df.drop('genres_y',axis=1,inplace=True) ##dropping the duplicated columns\nmovie_df.rename(columns={'genres_x':'genres','rating':'avg_rating'},inplace=True) #Renaming the columns","46824760":"movie_df.head()","4824abb1":"mov=movie_df[['movieId','title','genres','total_rating_count','avg_rating']].copy()\nmov.drop_duplicates(subset=['title'],inplace=True) ##dropping the duplicates based on the title\nmov.reset_index(inplace=True,drop=True) #reseting the index","9cb0f954":"mov.shape","4b06ecf1":"##Mean average rating across all the movies\nC= mov['avg_rating'].mean()\nC","452e6327":"#movies having total count greater than 85%\nm= mov['total_rating_count'].quantile(0.85) \nm","2a3bee52":"#movies having vote count greater than 85% from the list will be taken\nlists_movies = mov.copy().loc[mov['total_rating_count'] >= m]\nlists_movies.shape","b22c6da9":"def weighted_rating(x, m=m, C=C):\n    v = x['total_rating_count']\n    R = x['avg_rating']\n    # Calculation based on the formula (m=19.0, c=3.293)\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","7c75f42e":"# Define a new feature 'score' and calculate its value with `weighted_rating()`\nlists_movies['score'] = lists_movies.apply(weighted_rating, axis=1)","5a2a66d1":"lists_movies.head(3)","251fb064":"#Sort movies based on score calculated above\nlists_movies = lists_movies.sort_values('score', ascending=False)\n\n#Print the top 10 movies\nlists_movies[['title', 'total_rating_count', 'avg_rating', 'score']].head(10)","30fc6cd8":"plt.figure(figsize=(12,4))\nplt.barh(lists_movies['title'].head(10),lists_movies['score'].head(10), align='center',color='black')\nplt.gca().invert_yaxis()\nplt.xlabel(\"Popularity score\")\nplt.title(\"Popular Movies\" )","359579f0":"movie_rating1=movie_rating.copy()\nmovie_rating1=movie_rating.iloc[:,3:23]\n#Considering the genres for the association analysis\nmovie_rating1.head()","23c77829":"freq_items = apriori(movie_rating1,min_support=0.05,use_colnames=True)\n##The Apriori algorithm uses frequent itemsets to generate association rules, and it is designed to work on the databases that contain transactions.","d36a0557":"freq_items","c352eb2d":"df_ar = association_rules(freq_items,metric='lift',min_threshold = 1.00)\n##Association rules are \"if-then\" statements, that help to show the probability of relationships between data items\n##Sorting the values based on the lift.\ndf_ar = df_ar.sort_values(by='lift',ascending = False)\ndf_ar.head(15)","c9d5828a":"From the above plot, I can see that the SSD is decreasing as the number of clusters increases.","a84c20d0":"The above data recomends the movie for the particular user.This also estimates the user ratings for each of the movie.","f072983e":"### 4.2.1 Summary Statistics <a id='Summary_Statistics'><\/a>","6c3dff4f":"Upon seeing the above plot I consider the components 100 as it is approaching towards 0 after that and elbow is clearly forming around 100.","193f1df1":"### 7.2.1.2 Using KNN <a id='knn'><\/a>","338e313f":"**Upon dropping the null values the index range differs thus the indexes need to be reset**","84592dbc":"1. The rule (Mystery) -> (Thriller), has the highest lift. In terms of support however, it was merely 5.4%.\n\n2. The rule (Sci-Fi) -> (Action, Adventure) has the second highest lift, but the support remains almost equal 5.2%.","fcc0beca":"Now, There are **No missing values** present in the dataset","97f4ce24":"<table align=\"center\" width=60%>\n    <tr>\n        <td width=\"25%\">\n            <img src=\"memory based.jpg\">\n        <\/td>\n    <\/tr>\n<\/table>","904ca378":"#### Stdev Movie Ratings by Genre","f0744c5b":"For further analysis considering the data for movie rating count to be greather than the 50.Which means atleast 50 users should have been rated the movie.","ce870b39":"From,the above cummulative explained variance I can see from prinicipal component 15 the variance is almost one.\n\nHence I consider 15 components.","445fe7d9":"### This data set consists of:\n\n * 100,000 ratings (0.5-5.0) from 671 users on  9066 movies.\n\n * Each user has rated at least 20 movies.\n\n**Movies:** \n\n**1 - movieId** : Unique id for each movie.\n\n**2 - title** : Name of the movie.\n\n**3 - genres** : list of genres of movie(Type-ex:Comedy)\n\n**Ratings:**\n\n**4 - userId** : Unique id for each user.\n\n**5 - movieId** : Unique id for each movie.\n\n**6 - ratings** : Values which are rated by the user for each movie (0.5-5.0)","6af40c94":"# 2. Set Options <a id='set_options'><\/a>","ea243e5b":"## Table of Contents\n\n1. **[Import Libraries](#import_lib)**\n2. **[Set Options](#set_options)**\n3. **[Read Data](#Read_Data)**\n    - 3.1 -[Movies](#mov)\n    - 3.2 -[Ratings](#rat)\n4. **[Exploratory Data Analysis](#data_preparation)**\n    - 4.1 - [Preparing the Dataset](#Data_Preparing)\n        - 4.1.1 - [Merging datasets](#merging)\n        - 4.1.2 - [Data  Info](#info)\n        - 4.1.3 - [Data Dimension](#Data_Shape)\n        - 4.1.4 - [Data Types](#Data_Types)\n        - 4.1.5 - [Missing Values](#Missing_Values)\n    - 4.2 - [Understanding the Dataset](#Data_Understanding)\n        - 4.2.1 - [Summary Statistics](#Summary_Statistics)\n        - 4.2.2 - [Correlation](#correlation)\n        - 4.2.3 - [Analyze Features](#analyze_fea)\n5. **[Dimensionality Reduction](#dim_red)**\n    - 5.1 - [PCA(Prinicipal Component analysis)](#pca)\n6. **[K-Means Clustering](#kmean)**\n7. **[Recommendations systems](#rec_sys)**\n    - 7.1 - [Content Based](#content)\n    - 7.2 - [Collaborative Based](#collab)\n        - 7.2.1 - [Memory Based](#memory)\n            - 7.2.1.1 - [Using KNN](#knn)\n            - 7.2.1.2 - [Using SVD](#svd)\n        - 7.2.2 - [Model Based](#model)\n        \n   - 7.3 - [Hybrid Based](#hybrid)\n   - 7.4 - [Popularity Based](#pop)\n   - 7.5 - [Association Analysis](#Asso)\n8. **[Conclusion](#conclu)**\n9. **[References](#Refer)**","5c71de4e":"### 4.1.1 Merge all above dataframes <a id='merging'><\/a>","298cb5cc":"From the above table , I infer:\n\n    1.  There are 99997 values present in the dataset\n    \n    2.  The maximum value for rating is 5 and where as the minimum value is 0.5 and the average rating is 3.5","fce89d78":"Hybrid recommender systems combine two or more recommendation strategies in different ways to benefit from their complementary advantages.This is a combination of both content and collaborative based filtering methods.","b38df7fd":"From above, I can see that the standard deviation of all of the different genres are around the same at approx. \n1 with density of 1.5. However, there are two notable outliers, \nFor comedy, I see that the stdev is approx. 1 with a density greater than 3. This means that people either typically really likes the comedy movie or they dont. This makes sense in real life as well since everyone's tase in comedy is different despite all of the movies being categorized under one branch.","239ae64f":"The above plot shows bottom 20 low rated movies.","28a79fc6":"### 6. K-Means Clustering <a id='kmean'><\/a>","ad88b11f":"From above plot, I can see that on average, user are rating movies 3-4 more frequently than any other rating. \nThis makes sense since people are less inclined to rate movies lower than a 3 if they didn't enjoy the movie. \nAdditionally, I can see the cause of the right-skewed distribution for the average movie ratings per genre.","bf68bdcb":"### 3.1 Movies <a id='mov'><\/a>","2247cc07":"### 4.1.4 Data Types <a id='Data_Types'><\/a>","108fa4a3":"# 1. Import Libraries <a id='import_lib'><\/a>","9c5a86a9":"From the above plot, I see the users are rating mostly 3's and 4's for the movies.","11816432":"# 3. Read Data <a id='Read_Data'><\/a>","f0dc8caf":"### 7.1 Content based <a id='content'><\/a>","9917e757":"**Visualising missing values using Heatmap**","09ba52ae":"### 7.2 Model Based - Surprise <a id='model'><\/a>","2ba0d360":"#### Average User Ratings","44cf0450":"Visualizing the correlation matrix with heatmap","c2e0c057":"In this dataset I have **1 float , 3 object and 22 int columns**","4d1adc7b":"I have only **1 column with very few missing values(7)** in the dataset","b6ba7d03":"**Inferences:**\n1. Animation and Children are bit highly correlated in the data (0.66)\n    \n2. Action and Adventure,Fantasy and children,Scifi and Action are bit moderately correlated.","2126043a":"## 4.1 Preparing the Dataset <a id='Data_Preparing'><\/a>","81eb3cb8":"### 4.1.2 Data Info <a id='info'><\/a>","510b2a8b":"Recommending the similar movies by using SVD(Singular Value Decomposition).","a6f7d530":"Item-Item Collaborative Filtering: \u201cUsers who liked this item also liked \u2026\u201d\n\nUser-Item Collaborative Filtering: \u201cUsers who are similar to you also liked \u2026\u201d","a17f7480":"#### Number  of movies per each genre","149a11e8":"#### Num of ratings for each rating","d4384ff4":"Cross checking with the result obtained above .Since the movie sudden death belongs to the genre action all the recommended movies also belongs to the same genre.","f0be70bb":"## 7.3 Hybrid Based <a id='hybrid'><\/a>","e09a7621":"**Handling Missing Values**","d784bc3c":"### 7.2.1.2 Using SVD <a id='svd'><\/a>","923da5fa":"#### No.of movies released in each year.","d9d8af01":"## 7. Recommendation Systems <a id='rec_sys'><\/a>","337019b0":"## 4.2 Understanding the Dataset <a id='Data_Understanding'><\/a>","c886031c":"I used a density distribution plot in order to get the distribution of the average movie rating per genre. \nFrom above, I can see that people are rarely ratings movies lower than a 3 star, which contributes to a right-skewed distributiion.The Thriller is bit normally distributed.","0d2c648c":"# Data Dictionary","c473e993":"It is a type of recommendation system which works on the principle of popularity and or anything which is in trend.","d10b22e6":"**Numeric Variables**","d269ca6d":"# Problem Statement \ud83c\udfa5\ud83c\udf7f","2a6b8382":"The above are few movies which are highly correlated with the movie 'Alien'.Similarly I can recommend for any movie considering the correlation.","8f10ad30":"Within recommendation systems, there is a group of models called collaborative-filtering, which tries to find similarities between users or between items based on recorded user-item preferences or ratings.\nThis also predictes the ratings for the user for all the items.","66df9ada":"### 3.2 Ratings <a id='rat'><\/a>","f23642f3":"### 5.1 PCA(Principal component analysis) <a id='pca'><\/a>","ac2c88c1":"<table align=\"center\" width=100%>\n    <tr>\n        <td width=\"25%\">\n            <img src=\"https:\/\/media4.giphy.com\/media\/3FqNDjbZCNs37HnRC7\/giphy.gif?cid=6c09b952ijib6wwq3elx2hw5vhqtiiml8w20cfwup0zp8j9v&rid=giphy.gif&ct=s\">\n        <\/td>\n        <td>\n            <div align=\"center\">\n                <font color=\"#FF5733 \";size=500px>\n                    <b>Thank You!\n                    <\/b>\n                <\/font>\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>","c55dc7bd":"#### Movies with high average rating","323f33d6":"In this dataset i have 100004 records across 26 features","71a59942":"The above plot shows the movies that can be recommended based on the popularity and trend.","f5855a95":"#### Movies with low average rating","3c497925":"Recommender systems are one of the most successful and widespread application of machine learning technologies in business. You can find large scale recommender systems in retail, video on demand, or music streaming.\n\nOur objective is to recommend movies to users based on their previous watch or based on user interest.","1b83b5e6":"Since,there are very few missing values present in the data, I am dropping the null values.","247fe1a4":"## 8. Conclusion <a id='conclu'><\/a>","efad0cc1":"### 4.2.3 Analyse Features <a id='analyze_fea'><\/a>","c692fe46":"## 5.Dimensionality Reduction <a id='dim_red'><\/a>","7c5a8cdf":"#### Merging the dataframes","264097d1":"From the plot,I can see first few principal components holds most the variance.","fe80bca1":"From the above plot I can infer most of the movies present in the dataset were released from year 2000.","08eaa8ee":"The above shows the recomendation for the movies based on the distance and  recommending similar movies.","0c71fe36":"### 4.1.5 Missing Values <a id='Missing_Values'><\/a>","edd28bf1":"<table align=\"center\" width=100%>\n    <tr>\n        <td width=\"45%\">\n            <img src=\"https:\/\/miro.medium.com\/max\/1132\/1*N0-ikjPv4RUVvS-6KCgLPg.jpeg\">\n        <\/td>\n        <td>\n            <div align=\"center\">\n                <font color=\"#B49A06 \";size=1500px>\n                    <b>MovieLens(100K) Recommendation System\n                    <\/b>\n                <\/font>\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>","6fd59320":"Association analysis enables you to identify items that have an affinity for each other. It is frequently used to analyze transactional data (also called market baskets) to identify items that often appear together in transactions.Association analysis is also used for identifying dependent or associated events.","5a660f4c":"### 4.1.3 Data Dimensions <a id='Data_Shape'><\/a>","8fed3eff":"**Categorical Variables**","46c8554d":"The above plot shows the top 10 users who have rated most of the movies .The User 547 have rated most of the movies.","c90dd1ca":"Collaborative filtering is a technique that can filter out items that a user might like on the basis of reactions by similar users. It works by searching a large group of people and finding a smaller set of users with tastes similar to a particular user.","0c2ce215":"## 7.4 Popularity Based <a id='pop'><\/a>","f3cb9d8e":"### 4.2.2 Correlation <a id='correlation'><\/a>","57f00b18":"The above data explains that in the Cluster0 most of the movies present belongs to the Drama genre next to that is genre Romance. ","f2d9f3a1":"### 7.2 Collaboratrive Filtering <a id='collab'><\/a>","a4991e38":"http:\/\/www.tjprc.org\/publishpapers\/2-45-1368509642-20.%20Movie%20Ranking%20using%20-full.pdf\n\nhttps:\/\/sci-hub.se\/https:\/\/ieeexplore.ieee.org\/document\/8663822\n\nhttps:\/\/scihub.se\/https:\/\/www.researchgate.net\/publication\/319487277_Design_and_Implementation_of_Movie_Recommendation_System_based_on_Knn_Collaborative_Filtering_Algorithm\n\nhttp:\/\/www.riejournal.com\/article_106395_c6c0038f1bf5d4c421bd552d0541d6be.pdf\n\nhttps:\/\/www.irjet.net\/archives\/V7\/i7\/IRJET-V7I7199.pdf\n\nhttps:\/\/blog.cambridgespark.com\/nowadays-recommender-systems-are-used-to-personalize-your-experience-on-the-web-telling-you-what-120f39b89c3c\n","e2580402":"From the elbow plot I cannot decide arbitrarly how many no.of clusters to be considered.Hence I used KneeLocator to find the elbow for the curve.","b1bbf189":"#### Average Movie Ratings by Genre","a72ff621":"From the above table, I infer:\n\n    1. The movie Forest Grump has been rated the most among all the movies with frequency of 341.\n    \n    2. Out of all geres the Drama genre movie has been watched and rated most with the frequency 7756.","d835dba4":"The above plot shows the 4 different types of clusters that are formed and 4 different centroids.","dac8ff08":"1)I cannot recommend the movies always based on collaborative filtering because that does not perform well in cold-start scenarios (where little data is available on new users and new items) remains a challenge and performs poorly.\n\n2)The content based filtering is not always prefered as this does not consider the user activity to recommend the items.\n\n3)The popularity based filtering always recommend the items that are on trend irrespective of user choices.\n\n4)Hybrid recommender systems usually show higher accuracy than Collaborative Filtering or Content-based Models.They are capable to address the cold-start problem better since if you don\u2019t have any ratings for a user or an item you could use the metadata from the user or item to make a prediction.\n\nSo,Hybrid recommendation system would be best to recommend when compared to other recommended systems.","31763baf":"Below is the variation that holds by each component.","adb4a39d":"#### Top 10 users who have rated most of the movies","87a50563":"Short list items based on similrity of content. Apply CF on the shortlisted items.","cd59b39d":"## 7.5 Association Analysis <a id='Asso'><\/a>","a8bead71":"Similarly,In the Cluster1 most of the movies present in that cluster belongs to Drama genre next to that is genre Comedy.","989b8fb6":"# 4. Exploratory Data Analysis <a id='data_preparation'><\/a>","09ae526a":"## 7.2.1 Memory Based (Similar Movies) <a id='memory'><\/a>","9d4568ba":"Content-based filtering uses item features to recommend other items similar to what the user likes, based on their previous actions or explicit feedback.\nHere I have considered the content genres of the movies.","ae0afa8c":"From the above plot,Most of the movies are from Drama genre next to that is Comedy.\n\nDocumentary,Film-noir,musical genres have least no.of movies.","353302b0":"The above plot shows top 20 movies with high average rating.","1048da05":"Describing the cluster 0","23947101":"## 9. References <a id='Refer'><\/a>"}}