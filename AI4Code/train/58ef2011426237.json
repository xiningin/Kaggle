{"cell_type":{"6694e63a":"code","92c61a52":"code","130aa15a":"code","03557bf4":"code","644e51e2":"code","382ec520":"code","cd05c8a3":"code","7aa6ccf6":"code","9d9a9809":"code","9b309629":"code","aa7f7f2e":"code","32fee3d8":"code","a9fef2e5":"code","51aaf2c6":"code","1ce0572d":"code","23ff6fba":"code","61bd8a61":"code","a567b0f9":"code","acf3420d":"code","8db380b2":"code","50c339f0":"code","910573fe":"code","350239e7":"code","b7bce8b5":"code","1d38438e":"code","48a8971f":"code","d9a897f4":"code","d78d6a65":"code","2fe3eb1a":"code","a1c8e65a":"code","26034f31":"code","f2e930da":"code","779534ed":"code","64355c90":"code","e1886be1":"code","53bdf91d":"code","a640d7bf":"code","dd890092":"code","3ef13725":"code","4d2c3f8e":"code","3799ce99":"code","9f9d7cd5":"code","ecdfa52a":"code","b434285d":"code","d6214ba2":"code","7ef55a97":"code","a20afed0":"markdown","c2a5e6f0":"markdown","256a13aa":"markdown","6658870c":"markdown","1a7f3069":"markdown","2065ee1c":"markdown","5c69120b":"markdown","d05728e2":"markdown","2b978ba8":"markdown","a1f43cc6":"markdown","b82bd2ff":"markdown","3f700b77":"markdown","4c14135b":"markdown","2e3b0e2b":"markdown","2e656293":"markdown","7ad687cf":"markdown","f1874b87":"markdown","56dce548":"markdown","52fd20df":"markdown","35ca7eb0":"markdown","50610490":"markdown","1b421c78":"markdown","13ca786b":"markdown","4da5617c":"markdown","99df537a":"markdown","e019ccd8":"markdown","9cf57d79":"markdown","73fb40c7":"markdown","7fb1ab32":"markdown"},"source":{"6694e63a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92c61a52":"from keras.preprocessing.image import ImageDataGenerator, load_img\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom matplotlib import pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Dropout, Dense, MaxPooling2D, BatchNormalization, Flatten\nimport random\nimport os\nfrom zipfile import ZipFile\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom PIL import Image\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau","130aa15a":"ZipFile(\"\/kaggle\/input\/dogs-vs-cats\/train.zip\",\"r\").extractall()\nZipFile(\"\/kaggle\/input\/dogs-vs-cats\/test1.zip\", \"r\").extractall()\n","03557bf4":"train_dir = \".\/train\/\"\ntest_dir = \".\/test1\/\"\nIMG_HEIGHT = 128\nIMG_WIDTH = 128\nIMG_CHANNEL = 3\nIMG_SIZE = (IMG_WIDTH, IMG_HEIGHT)\nbatch_size = 64\nepochs = 50","644e51e2":"Dtrain = os.listdir(train_dir)\ncategories = []\nfor filename in Dtrain:\n    category = filename.split(\".\")[0]\n    if category == \"dog\":\n        categories.append(\"dog\")\n    else:\n        categories.append(\"cat\")\ndf = pd.DataFrame({\n    \"filename\" : Dtrain,\n    \"category\" : categories\n})","382ec520":"print(df.head())\nprint(df.tail())","cd05c8a3":"df.category.value_counts().plot.bar()\nplt.title(str(len(df[df['category'] == 'cat']))+\" cats\" + \" | \" +str(len(df[df['category'] == 'dog']))+\" dogs\", fontsize=18)\nplt.ylabel(len(df), fontsize = 14)\nplt.show()","7aa6ccf6":"model=Sequential()\n\nmodel.add(Conv2D(32, (3,3), input_shape=(IMG_WIDTH, IMG_HEIGHT, IMG_CHANNEL), activation=\"relu\"))\nmodel.add((MaxPooling2D(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), activation=\"relu\"))\nmodel.add((MaxPooling2D(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3,3), activation=\"relu\"))\nmodel.add((MaxPooling2D(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation=\"relu\"))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(2, activation=\"sigmoid\"))\n\nmodel.compile(loss='binary_crossentropy',optimizer=Adam(lr=0.0001, decay=1e-6),metrics=['accuracy'])\n\nmodel.summary()","9d9a9809":"sampel = random.choice(df.filename)\nimg = load_img(train_dir+sampel)\nplt.imshow(img)","9b309629":"train_df, validate_df = train_test_split(df, test_size = 0.2, random_state = 42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)\n","aa7f7f2e":"train_df.category.value_counts().plot.bar()\nplt.ylabel(len(train_df), fontsize = 14)\nplt.title(str(len(train_df[train_df['category'] == 'dog']))+\" Dogs  |  \"+str((len(train_df[train_df['category'] == 'cat'])))+\" Cats\", fontsize=18)\nplt.show()","32fee3d8":"validate_df.category.value_counts().plot.bar()\nplt.ylabel(len(train_df), fontsize = 14)\nplt.title(str(len(validate_df[validate_df['category'] == 'cat']))+\" Cats  |  \"+str((len(validate_df[validate_df['category'] == 'dog'])))+\" Dogs\", fontsize=18)\nplt.show()","a9fef2e5":"earlystop = EarlyStopping(patience=10)\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\ncallbacks = [earlystop, learning_rate_reduction]","51aaf2c6":"train_datagen = ImageDataGenerator(rotation_range=20,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMG_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size,\n    color_mode=\"rgb\",\n    shuffle=True\n)","1ce0572d":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMG_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size,\n    color_mode=\"rgb\",\n    shuffle=True\n)","23ff6fba":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMG_SIZE,\n    class_mode='categorical',\n    color_mode=\"rgb\",\n    shuffle=True\n)","61bd8a61":"plt.figure(figsize=(12,12))\nfor i in range(0,8):\n    plt.subplot(2, 4, i+1)\n    for x_batch, y_batch in example_generator:\n        img = x_batch[0]\n        plt.imshow(img)\n        break\nplt.tight_layout()\nplt.show()","a567b0f9":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=len(train_df)\/\/64,\n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=len(validate_df)\/\/64,\n    callbacks=callbacks\n)","acf3420d":"model.save_weights(\"CatsVsDogs.h5\")\n","8db380b2":"fig,(ax1, ax2) = plt.subplots(2, 1, figsize = (12,12))\nax1.plot(history.history[\"loss\"], color= \"red\", label = \"Training loss\")\nax1.plot(history.history[\"val_loss\"], color= \"b\", label = \"Validation loss\")\n\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history[\"accuracy\"], color = \"red\", label = \"Training accuracy\")\nax2.plot(history.history[\"val_accuracy\"], color = \"b\", label = \"Validation accuracy\")\n\nax2.set_xticks(np.arange(1,epochs, 1))\nax2.set_yticks(np.arange(0, 1, 0.1))\n\nlegend = plt.legend(loc = \"best\", shadow = True)\nplt.tight_layout()\nplt.show()","50c339f0":"Dtest = os.listdir(test_dir)\ndf_test = pd.DataFrame({\n    \"filename\" : Dtest\n})","910573fe":"test_dataGen = ImageDataGenerator(1.\/255)\n\ntest_gen = test_dataGen.flow_from_dataframe(\n    df_test,\n    test_dir,\n    target_size = IMG_SIZE,\n    x_col = \"filename\",\n    y_col = None,\n    batch_size = batch_size,\n    class_mode = None,\n    shuffle = True,\n    color_mode=\"rgb\",\n\n)","350239e7":"predicted = model.predict(test_gen)\ndf_test[\"category\"] = np.argmax(predicted, axis=-1)\n","b7bce8b5":"print(\"Train Accuracy:{:.3f}\".format(history.history['accuracy'][-1]))\nprint(\"Test Accuracy:{:.3f}\".format(history.history['val_accuracy'][-1]))\n","1d38438e":"df_test[\"category\"] = df_test[\"category\"].replace({1 : \"cat\", 0 : \"dog\"})\ndf_test['category'].value_counts().plot.bar()\nplt.ylabel(len(df_test), fontsize = 14)\nplt.title(str(len(df_test[df_test['category'] == 'dog']))+\" Dogs  |  \"+str((len(df_test[df_test['category'] == 'cat'])))+\" Cats\", fontsize=18)\nplt.show()","48a8971f":"sample_test = df_test.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(test_dir+filename, target_size=IMG_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(\"{}\".format(category))\nplt.tight_layout()\nplt.show()","d9a897f4":"submission_df = df_test.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","d78d6a65":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","2fe3eb1a":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","a1c8e65a":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D\n\nnum_classes = 2\nresnet_weights_path = 'https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n\nmy_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# Indicate whether the first layer should be trained\/changed or not.\nmy_new_model.layers[0].trainable = False\n","26034f31":"my_new_model.compile(optimizer='sgd', \n                     loss='categorical_crossentropy', \n                     metrics=['accuracy'])","f2e930da":"!ls images\/train\/upright","779534ed":"from tensorflow.keras.preprocessing.image import load_img\nimg = load_img('images\/kaggle\/input\/dogs-vs-cats\/train.zip')\nimg","64355c90":"from tensorflow.keras.preprocessing.image import load_img\nimg = load_img('kaggle\/input\/dogs-vs-cats\/train.zip')\nimg","e1886be1":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocess_input)\n\ntrain_generator = data_generator.flow_from_directory(\n                                        directory='images\/train',\n                                        target_size=(image_size, image_size),\n                                        batch_size=10,\n                                        class_mode='categorical')\n\n\n\nvalidation_generator = data_generator.flow_from_directory(\n                                        directory='images\/val',\n                                        target_size=(image_size, image_size),\n                                        class_mode='categorical')\n\n\n\n# fit_stats below saves some statistics describing how model fitting went\n# the key role of the following line is how it changes my_new_model by fitting to data\nfit_stats = my_new_model.fit_generator(train_generator,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator,\n                                       validation_steps=1)\n\n#step_4.check()","53bdf91d":"filenames = validation_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(validation_generator,steps = nb_samples)\n","a640d7bf":"import numpy as np\npred = np.argmax(predict, axis=1)","dd890092":"from sklearn.metrics import confusion_matrix,accuracy_score\nconfusion_matrix(pred,test_generator.labels)","3ef13725":"accuracy_score(pred,test_generator.labels)","4d2c3f8e":"from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\ndata_generator_with_aug = ImageDataGenerator(preprocessing_function=preprocess_input,\n                                   horizontal_flip=True,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2)\n\ntrain_generator_aug = data_generator_with_aug.flow_from_directory(\n        'images\/train',\n        target_size=(image_size, image_size),\n        batch_size=24,\n        class_mode='categorical')","3799ce99":"data_generator_no_aug = ImageDataGenerator(preprocessing_function=preprocess_input)\nvalidation_generator_no_aug = data_generator_no_aug.flow_from_directory(\n        'images\/val',\n        target_size=(image_size, image_size),\n        class_mode='categorical')","9f9d7cd5":"fit_stats = my_new_model.fit_generator(train_generator_aug,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator_no_aug,\n                                       validation_steps=1)\n","ecdfa52a":"test_datagen = ImageDataGenerator(preprocess_input)\n\ntest_generator = test_datagen.flow_from_directory(\n        'images\/val',\n        target_size=(image_size, image_size),\n        color_mode=\"rgb\",\n        shuffle = False,\n        class_mode='categorical',\n        batch_size=1)\n\nfilenames = test_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(test_generator,steps = nb_samples)","b434285d":"import numpy as np\npred = np.argmax(predict, axis=1)","d6214ba2":"from sklearn.metrics import confusion_matrix,accuracy_score\nconfusion_matrix(pred,test_generator.labels)","7ef55a97":"accuracy_score(pred,test_generator.labels)","a20afed0":"Show sample\n","c2a5e6f0":"Fit Model","256a13aa":"Import Libraries","6658870c":"Test Generator","1a7f3069":"Prepare Test set","2065ee1c":"Predict Model","5c69120b":"Data Augumentation","d05728e2":"Build Model","2b978ba8":"Prepare Traning Data","a1f43cc6":"Define Constants","b82bd2ff":"Fit Model","3f700b77":"Plot Train and Validation","4c14135b":"Show model accuracy","2e3b0e2b":"Prepare Data","2e656293":"Validation Generator","7ad687cf":"Get Data from Zipfile","f1874b87":"Submission","56dce548":"Show how Generator works","52fd20df":"Callbacks","35ca7eb0":"Compile the Model","50610490":"Traning Generator","1b421c78":"See Total In count","13ca786b":"Example Generator","4da5617c":"Virtualize Training","99df537a":"Plot Test Data","e019ccd8":"Show the result","9cf57d79":"Save model's weights","73fb40c7":"Split Data to Train and Validation set","7fb1ab32":"Plot Data"}}