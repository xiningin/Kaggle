{"cell_type":{"af6979db":"code","4c245dec":"code","e4e9cc2b":"code","f822f09f":"code","a641a0dd":"code","b7f6f036":"code","6d185b94":"code","6de670c7":"code","15758b52":"code","323d2b41":"code","dd92205a":"code","1ed0340b":"code","09b83405":"code","5ede86b4":"code","0a3dc1ac":"code","14dce95e":"code","814aa305":"code","1060455e":"code","347e0aaf":"code","487e6d4b":"code","069ab983":"code","8011b39e":"code","c3927bba":"code","daa5a146":"code","ef359da5":"code","7fcb942f":"code","bba8af8c":"code","58315655":"code","1d088a26":"code","0074be96":"code","f98554f9":"code","7a8327a6":"code","bfa9fd07":"code","a50705bb":"code","7a1366f5":"code","79f81f86":"code","66598a3b":"code","10d1d6fd":"code","874f0188":"code","33a6405a":"code","d23c0049":"code","350cb9a7":"code","6ce13de6":"code","99b2db28":"code","01ed7bf7":"code","b13f835f":"code","3654efba":"code","4a457296":"code","9e24a7e4":"code","0e6a6a8b":"code","5e111c94":"code","f788d6cf":"code","5e07b914":"code","ab7f82dc":"code","2af57de3":"code","2b7ed2a9":"code","29a49054":"code","406a8110":"code","216d1526":"code","27ea1c92":"code","5bd1cd36":"code","f71634ca":"code","09474fab":"code","52b0bfce":"code","d96e42da":"code","1d16aaa3":"code","01df5f6d":"code","650e2664":"code","6b9c6112":"code","049d32e7":"code","a8ff326a":"code","6ca5dfc0":"code","a15d8514":"code","e076a19e":"code","da196384":"code","69abc733":"code","bef2e051":"code","518eab25":"code","d831b6e4":"code","5d15a35a":"code","1ce4d8ba":"code","91b63f25":"code","4fd570ea":"code","5a651a2b":"code","5fa9f786":"code","b2bf336b":"code","f9746d22":"code","721ab7fa":"code","a6491c96":"code","5824b1ef":"code","0d111212":"code","7106f6cb":"code","982de344":"code","a31f8f1a":"code","f0b3985e":"markdown","b7a79178":"markdown","558494fd":"markdown","c1d7ab07":"markdown","d1238178":"markdown","a9bc95ab":"markdown","6cf3c7ae":"markdown","8df3dcb2":"markdown","5efe170e":"markdown","ddb24255":"markdown","a6e74125":"markdown","711c5d4e":"markdown","82181072":"markdown","e709e0db":"markdown","272f9ec8":"markdown","d846c03d":"markdown","4cde64a0":"markdown","21a3d686":"markdown","ba80b776":"markdown","bad4e90b":"markdown","09d771ae":"markdown","08efe80f":"markdown","7af5e8f0":"markdown","1fe64131":"markdown","c7d88818":"markdown","0c93823f":"markdown","a3176272":"markdown","01360f06":"markdown","af03d9fe":"markdown","08f46d48":"markdown","dde27068":"markdown","527a1149":"markdown","a33a0029":"markdown","07fae159":"markdown","98836bde":"markdown","d96d2a37":"markdown","40702231":"markdown","c0854f41":"markdown","77e9c969":"markdown","b90decd6":"markdown","4711b013":"markdown"},"source":{"af6979db":"!pip install folium","4c245dec":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n### so that u dont have warnings\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot","e4e9cc2b":"df=pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')\ndf.head()","f822f09f":"df.shape","a641a0dd":"df.dtypes","b7f6f036":"len(df['name'].unique())","6d185b94":"df.isna().sum()","6de670c7":"feature_na=[feature for feature in df.columns if df[feature].isnull().sum()>0]\nfeature_na","15758b52":"#% of missing values\nfor feature in feature_na:\n    print('{} has {} % missing values'.format(feature,np.round(df[feature].isnull().sum()\/len(df)*100,4)))","323d2b41":"df['rate'].unique()","dd92205a":"df.dropna(axis='index',subset=['rate'],inplace=True)","1ed0340b":"df.shape","09b83405":"def split(x):\n    return x.split('\/')[0]","5ede86b4":"df['rate']=df['rate'].apply(split)","0a3dc1ac":"df.head()","14dce95e":"df['rate'].unique()","814aa305":"df.replace('NEW',0,inplace=True)","1060455e":"df.replace('-',0,inplace=True)","347e0aaf":"df.replace('-',0,inplace=True)","487e6d4b":"df['rate']=df['rate'].astype(float)","069ab983":"df['rate'].unique()","8011b39e":"df.groupby('name')['rate'].mean()","c3927bba":"df.groupby('name')['rate'].mean().nlargest(20).plot.bar()","daa5a146":"df_rate=df.groupby('name')['rate'].mean().to_frame()\ndf_rate=df_rate.reset_index()\ndf_rate.columns=['restaurant','rating']\ndf_rate.head(10)","ef359da5":"df_rate.shape","7fcb942f":"sns.set_style(style='whitegrid')\nsns.distplot(df_rate['rating'])","bba8af8c":"plt.figure(figsize=(10,7))\nchains=df['name'].value_counts()[0:20]\nsns.barplot(x=chains,y=chains.index,palette='deep')\nplt.title(\"Most famous restaurants chains in Bangaluru\")\nplt.xlabel(\"Number of outlets\") ","58315655":"x=df['online_order'].value_counts()\nlabels=['accepted','not accepted']\nplt.pie(x,explode=[0.0,0.1],autopct='%1.1f%%')","1d088a26":"x=df['online_order'].value_counts()\nlabels=['accepted','not accepted']","0074be96":"fig = px.pie(df, values=x, names=labels,title='Pie chart')\nfig.show()","f98554f9":"x=df['book_table'].value_counts()\nlabels=['not book','book']\nplt.pie(x,explode=[0.0,0.1],autopct='%1.1f%%')","7a8327a6":"x=df['book_table'].value_counts()\nlabels=['not book','book']","bfa9fd07":"trace=go.Pie(labels=labels, values=x,\n               hoverinfo='label+percent', textinfo='value', \n               textfont=dict(size=25),\n              pull=[0, 0, 0,0.2, 0]\n               )","a50705bb":"iplot([trace])","7a1366f5":"df['rest_type'].isna().sum()","79f81f86":"df['rest_type'].dropna(inplace=True)","66598a3b":"df['rest_type'].isna()","10d1d6fd":"len(df['rest_type'].unique())","874f0188":"plt.figure(figsize=(20,12))\ndf['rest_type'].value_counts().nlargest(20).plot.bar(color='red')\nplt.gcf().autofmt_xdate()","33a6405a":"trace1 = go.Bar( \n        x = df['rest_type'].value_counts().nlargest(20).index,\n        y = df['rest_type'].value_counts().nlargest(20),\n        name= 'rest_type')\niplot([trace1])","d23c0049":"df.groupby('name')['votes'].max().nlargest(10).plot.bar()","350cb9a7":"trace1 = go.Bar( \n        x = df.groupby('name')['votes'].max().nlargest(10).index,\n        y = df.groupby('name')['votes'].max().nlargest(10),\n        name= 'name')\niplot([trace1])","6ce13de6":"df.groupby('location')['name'].unique()","99b2db28":"restaurant=[]\nlocation=[]\nfor key,location_df in df.groupby('location'):\n    location.append(key)\n    restaurant.append(len(location_df['name'].unique()))\n","01ed7bf7":"df_total=pd.DataFrame(zip(location,restaurant))\ndf_total.columns=['location','restaurant']\ndf_total.set_index('location',inplace=True)\ndf_total.sort_values(by='restaurant').tail(10)","b13f835f":"df_total.sort_values(by='restaurant').tail(10).plot.bar()\n","3654efba":"df_total.sort_values(by='restaurant').tail(10).index","4a457296":"trace1 = go.Bar( \n        x = df_total['restaurant'].nlargest(10).index,\n        y = df_total['restaurant'].nlargest(10),\n        name= 'Priority')","9e24a7e4":"iplot([trace1])","0e6a6a8b":"locations=pd.DataFrame({\"Name\":df['location'].unique()})","5e111c94":"locations['new_Name']='Bangalore '+locations['Name']","f788d6cf":"locations.head()","5e07b914":"!pip install geopy","ab7f82dc":"from geopy.geocoders import Nominatim","2af57de3":"lat_lon=[]\ngeolocator=Nominatim(user_agent=\"app\")\nfor location in locations['Name']:\n    location = geolocator.geocode(location)\n    if location is None:\n        lat_lon.append(np.nan)\n    else:    \n        geo=(location.latitude,location.longitude)\n        lat_lon.append(geo)","2b7ed2a9":"locations['geo_loc']=lat_lon","29a49054":"locations.head()","406a8110":"locations.to_csv('zomato_locations.csv',index=False)","216d1526":"Rest_locations=pd.DataFrame(df['location'].value_counts().reset_index())","27ea1c92":"Rest_locations.columns=['Name','count']\nRest_locations.head()","5bd1cd36":"Restaurant_locations=Rest_locations.merge(locations,on='Name',how=\"left\").dropna()\nRestaurant_locations.head()","f71634ca":"def generateBaseMap(default_location=[12.97, 77.59], default_zoom_start=12):\n    base_map = folium.Map(location=default_location, zoom_start=default_zoom_start)\n    return base_map","09474fab":"len(Restaurant_locations['geo_loc'])","52b0bfce":"Restaurant_locations.isna().sum()","d96e42da":"np.array(Restaurant_locations['geo_loc'])","1d16aaa3":"#### unzip it\nlat,lon=zip(*np.array(Restaurant_locations['geo_loc']))","01df5f6d":"Restaurant_locations['lat']=lat\nRestaurant_locations['lon']=lon","650e2664":"Restaurant_locations[['lat','lon','count']].values.tolist()","6b9c6112":"import folium\nfrom folium.plugins import HeatMap\n#basemap=generateBaseMap()","049d32e7":"df2= df[df['cuisines']=='North Indian']\ndf2.head()\n\n","a8ff326a":"df3= df[df['cuisines']=='South Indian']\nsouth_india=df2.groupby(['location'],as_index=False)['url'].agg('count')\nsouth_india.columns=['Name','count']\nsouth_india=south_india.merge(locations,on=\"Name\",how='left').dropna()\nsouth_india['lan'],south_india['lon']=zip(*south_india['geo_loc'].values)","6ca5dfc0":"south_india=south_india.drop(['geo_loc'],axis=1)","a15d8514":"south_india.head()","e076a19e":"\ncuisines=df['cuisines'].value_counts()[:20]\nsns.barplot(cuisines,cuisines.index)\nplt.xlabel('Count')\nplt.title(\"Most popular cuisines of Bangalore\")","da196384":"cuisines=df['cuisines'].value_counts()[:10]\ntrace1 = go.Bar( \n        x = cuisines.index,\n        y = cuisines,\n        name= 'Cuisines')\niplot([trace1])","69abc733":"df['approx_cost(for two people)'].value_counts()","bef2e051":"len(df['approx_cost(for two people)'].value_counts())","518eab25":"df['approx_cost(for two people)'].isna().sum()","d831b6e4":"df.dropna(axis='index',subset=['approx_cost(for two people)'],inplace=True)","5d15a35a":"df['approx_cost(for two people)'].isna().sum()","1ce4d8ba":"df['approx_cost(for two people)'].unique()","91b63f25":"def is_float(x):\n    try:\n        float(x)\n    except :\n        return False \n    return True","4fd570ea":"df[~df['approx_cost(for two people)'].apply(is_float)]","5a651a2b":"df['approx_cost(for two people)'].dtype","5fa9f786":"type(df['approx_cost(for two people)'][0])","b2bf336b":"df['approx_cost(for two people)']=df['approx_cost(for two people)'].apply(lambda x: x.replace(',',''))","f9746d22":"df['approx_cost(for two people)']=df['approx_cost(for two people)'].astype(int)","721ab7fa":"df['approx_cost(for two people)']","a6491c96":"plt.figure(figsize=(10,7))\nsns.scatterplot(x=\"rate\",y='approx_cost(for two people)',hue='online_order',data=df)\nplt.show()","5824b1ef":"sns.boxplot(x='online_order',y='votes',data=df)","0d111212":"sns.boxplot(x='online_order',y='approx_cost(for two people)',data=df)","7106f6cb":"fig = px.box(df,x='online_order',y='approx_cost(for two people)')\nfig.show()","982de344":"plt.figure(figsize=(6,6))\nsns.distplot(df['approx_cost(for two people)'])\nplt.show()","a31f8f1a":"px.histogram(df, x=\"approx_cost(for two people)\")","f0b3985e":"* the rate is clrean\n\n\n* now we go to remove (NEW)","b7a79178":"### Now we can know what is highest voted restaurant","558494fd":"#### Which are the top restaurant chains in Bangaluru?","c1d7ab07":"* we convert str to int\n","d1238178":"* here will know,  What is the ratio b\/w restaurants that provide and do not provide table booking ?","a9bc95ab":"### total restaurants at different locations of Bengalore","6cf3c7ae":"### Calc the rating distribution","8df3dcb2":"* def function to remove (\/) from rate ","5efe170e":"### Total number of variety of restaurants ie north indian,south Indian","ddb24255":"##### We have found out latitude and longitude of each location listed in the dataset using geopy.\n##### This is used to plot maps.","a6e74125":"### Clculate of missing values","711c5d4e":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Importing Libraries<\/p>","82181072":"\n![rr](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhMTExMWFRUWGR0VGBYWGBoWFRUXGBIaGBUXFxgYHSggGBolHRgWITEhJSkrLi4uGB8zODMsNygtLysBCgoKDg0OGxAQGy0mICYtLS0tLS8tLS8rKy8vLTYtKy8tLS0vLS0tLS0vLS8tLy0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAJgBSwMBIgACEQEDEQH\/xAAbAAEAAQUBAAAAAAAAAAAAAAAABQECAwQGB\/\/EAEcQAAEDAQQFBwYKCgMBAQAAAAEAAhEDBBIhMQUGE0FRImFxgZGhsjJSU3Kx0QcUNUKTwcLS4fAVFiMzNGKCkqLTQ6PxVGP\/xAAbAQACAwEBAQAAAAAAAAAAAAAAAwIEBQEGB\/\/EAEIRAAEDAgIGBgUKBQQDAAAAAAEAAhEDIQQxBRJBUWFxE4GRobHwIjLB0eEGFBUzQlKCkrLiIzRTYnKiwtLxFkOz\/9oADAMBAAIRAxEAPwD0NFddb53cUut87uK+Yah4do963dZWorrrfO7igpg5GTwg4ropk7u0e9GsFaiIoLqIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEK5+Ivb9\/wCef2q1GOg\/nEcFV7YyyOXuTHel6W3b7+vx5hRFrKiIiWpIiIhCIiIQiIiEIiIhCIr6VBzshP551u2Ow73jq96tUMHVrEaosdpBjt29SW+q1ouo9FOmg3ze4LSraOki6YG\/mVutoiswSw63DI96W3EtOdlHopE6MEeVj1LRr0Swwf8A1VK+CrUAHPFt+fUUxlVr8lYiIqqYiIiEIiIhCIiIQqFclpLXamDds7TVAzeGlzP6Y8rpy6VIa9VC2wWotMHZ3ZGcOIae4lczRpBjQ1ogNEAdC19G4akQatVuteAJgWAJmLmxEC3XkmUcOa5LdaAI538MjdbP67VvRD6N\/wB5P12rehH0b\/vLCsdeneEX3t52ug9q1g3CTeg1OOizFqju5bX67VvQ\/wDXU+8n67V\/Q\/8AW\/7yjviP\/wCtb6QqrbHH\/JVOWdQ7iD9UdCn0eC\/pN7CofRtT77u5SH67VvRD6N\/3lT9dq3oh9G\/7yxIoauF\/oNTPos\/1XdyntB6y7YhrwASYlsiDuBByXRryu22nZ16YbgXgyfVLe\/FeprL0vh6NPo6lJuqHB0jYCCBbt5WnaqDWvp1H0nmS0i++RKqiIsZMV+wd5p7E2DvNPYsUIpyzcfzftRfz\/wBrLsHeaexNg7zVihZKgwb0faK6NQg2NuPHkuGfP\/arsHeaexX06LsiMD3LXRDXtaZg9v7UEE+firnCDBRES11EREIRERCEREQhFWky8QJjnVEUmkAgkSOyevYgqbpFrQACMOcK7at84doUAtt9GnSp7Su66MIAEkk+SAACS48AJXocJjq+IdqUqQt\/dAAyEmFTfRa3M58LlSu0b53eE2jfO7woezvoVX7MbSlUi81lVhY5zRmRe8rqMjgsdakWOLXCCE3F4nEYWC+mIO0OkTu9WZ5hRZSa4xJB3EKc2rfO7wte1U2vjlARzhRCLPqaW6Rpa+mCD\/d8E0YaDId3LZtNlu4hwcFroiy6rmudLWwN0k+N1YaCMzKIiJa6iIiEIiIhC5\/X75PtPqDxtWno6zUHU6hqOhwy5Qa7CCAAcDPK3HIde5r98n2n1B42rT0bWoBt2qBJfJMEm7cOAIxGPP8Ah6DRUdDePWdnl6rVZwsw+J+zln9pbNp0fZQwEPJIBkB7CTAcQeYnAQBhEZmUbo+zOaHbS4brZbfbi7YtLjBxwJOG+IEFXCvYsAWiARltBgbt7HM74mMncROvTtFmNOiHAAioXPaAfJcThexJAhu8nE8BOmSyfs+bbhGfcrbRUj7ee4ZX52tB55rS0tSpsqltMywBoBkOk3BJkYZzktRT4r2Ibt0GNpOIeCBJ52iebLHCN0q+iS3ZNAABki9iS8x5W67djAZlJe0C4I5BOpPcYbquyzI4bVpIiJaeoXS38TZvVf46a9aXkulv4mzeq\/x0160qemPqqH4\/Fq8\/W\/mqv4f0qqIiwlxXspgkC8McMiqXW+d3FZWui6QwTn87celGkY8gDAn527HirQpgwBqyf89sR54petG\/uWF7IjGZVamTej7RVHvmMIj871Wpk3o+0Uu3pau4eI33zUr2lWotqxWF1THJo3+5Z61jote2kXkPeCWyCQY54gdEq3htFYnEM6RjbbJMTy9+SW\/EMaYKjkWW1WZ1Mw7qPFadqe5rZawPPAuu98Km6i9tTo3CHZXIEcySAOcxxUzUbq62Y4AnuF+xYrZpGnRxqPDZ3b+wblWw6QpVQTTeHRmOHSDiuH07ou0VHVamDSDyrzhyQ0TAgGTliue1atdRtqo3XGS8AicwXBpB6ivVf+O0Dhi5lQl4E7NSYmMpjcdbiQRZYP0nim12ipT1WOMCZ1omJz3bNXr2r2REReQC9EqLap2XeexayJtN7WmXNnr+BlRcCcitx1naeboWGtZ4yxWFUhMfWpuHqRxn4R3KIYRtWaxNBewHK8Fs62Nc1tGu1t8UKgqvbvuBjg5w523p7VoAxiM1L7UVgOWWOGBbJDTO\/Agnt3rb0DiGNZUon1jBF87ZCbSIy3TuVbEghzXxIGfkXvwyUNZtKi3WmhsmODKBNR73gAguYWhggnOTPQeCl9PNEsO8yOwj3lYbDoinZhyXhjb20IYCCTOUFxkRAiMhCu0g9lWHNdiM2nAxxWhpN5dhHUnAa5gxImxEkCdgBtnnbYoNcw1g6mCGCwnrzO+TyGXFRj3gAkkADEk4ABRDtZrKHRtOu6Y9\/crNYKNepTLW3A2RiCbxxwkd\/UvO9Y9GvoOaHvDi4E3RPJEwJnjiqeitC4bEUtes+Scg05W2mDfhkBHVSx+NxlNxNFgDBm5wzMxAEi3jw2+u0qgcA5pBBxBGIKyLjfg0qvNCo0yWtfyZ3SyXAc2R612jCBmsPGYUYfEvoa0wc+8dxE8ZWphq\/TUW1IzGStDDwVIWbahNqEro2feTpKxIqujcqJJEKQRERcQuf1++T7T6g8bVF2O1XbzbpMmcLuURGLSpTX75PtPqDxtWjoq0MY438RJw48mB3rc0e8sw8j77vBitYT\/2Wn1bfmWU6TEzsnf4ZTPo+YKw6SaBBpuiIxLOrHZ9KkBpKzY8kRuE4jAb893etTSdsoupwwAHfjM5cegq984qb\/H3Kw0gkDoyFiGlW+jPazr\/AONWu0sIgNIzzuHcY+Z0KLVVPpn71Z6CnuRzpJPHFERLTlC6W\/ibN6r\/AB0160vJdLfxNm9V\/jpr1pU9MfVUPx+LV5+r\/NVfw\/pVURFhLiBx4lC88e9EXdY71yAiurZN6PtK1ZhTvXRIGGZOXKKnTY54LW5mw7QuOIFyq6ctVSi2g2k8sBY4mA0yRcg8pp849qiDbar3squdywBBAAaOScA0zhyjnOfRE5brDQtGzaarwaYN27dGcee048kR9avqas0fmvqMAEQC0gRzvaT3r6MxzKtBgoEHVsYMjgJEiyyKH8OtUdVyMRwsZ7ZWCy2l9Wz1XVDeLKgAMAYXGGMB\/MVrraruYxjaVPEDEuOZdxJGZnHDDgtVeL01VZVxXoGYaATvImfGOpadAQ02iSSBw83UBrJSGze1zg1tQXeccS1oHK3b1F6j6o3XG0C9VuEhpwY0HeQC6XEA9Anjlm13wqUhxZJ63P8Acu41BbFipniSf8o+pegwIq1aAoVXGHNkxYxAgTyIk7dq7i8NRbQbiSJdMCSYGewROW32LSCuSq3lOHAx2GEXjKjejcWnYSOxNF0RUIRQXVlbSWRa948UvHirDarW5BLLSVnuDgsdSnwVl48UvHiouqMIgjwXQCDmqQqrT1nrVLJRFcBrhIDmElrgHODWkGDvc2RG\/mWvq\/pllrpbRoLSDdc04lpic94g5qdXBVaLNZzYGWyxzEjMTxTGguZ0gymJ4rfrU7wImJyPArhdN6Lp2mu1ofefhTFxph2MASXY4nP2r0BjJDuYGOkiB+eZcJqiJtlEfzt7iD9S3dDdNSpa4NnEwLHKATeeUcMrop0KOIbUFUSGgGL7iRlG5dnYdCfE6TKYaGtzkOvAu33iWjldUdizqT1leG02EmAKgknISx49pCg\/jlP0je0KnpbAVGYk9G1zgRMw51zneDzve6qUa1MMElreExAyylbKLGyoCJDpB3yrgR5w7Vm\/Na\/9N35Xe5M6en94doVyK4UwcA4E8BmrbhygqNShVpkB7SCeCk2ox3qmURCIzRKU1z+v3yfafUHjapjQuqFCpRZUeal54vGCABjgAIUPr98n2n1B42rqNH0a7rPZdk5oAaC4OLmnfBlsyJjknOM16jQTGvou1hPpOt1MSatapSYSx2rdt+pyt\/Uey8an9zfurTfqdQ27WXqlw03PIkTLXNbnGXK7lL\/FLWMRUac8C58HmyJwORz43hgs9nv7eltLt\/YvvXZLZ2lLInNbpw9L7kXHik08dXk\/xCbHwKjTqPZeNT+4fdWja9UaAo1ajS8FgeWyQfJB8rk5GOwqE03Wtu1qNBqzfPJFWqGlt\/khjW0YIuxv966DQN82S2Offx2gG0JJuimYxdjEk96XTp0arHkU41bXEHgQl\/P8QzEUqZeTrXz3ETPbbr3LPS1Is0CTUJgTygO67gsdfVOw0y0PqOaXGGh1RoLiBJAkY4LQ1p1dtTq5r2Yl18AOAfs6jYAENcCORhMTmSomx6n22u+aw2QODqj37SoW7w3lHvgKD2NB1RR9x6yrLMTULQ52I5jb2Sub160c2z6QoUmkloaSJzxNMwYzXpC4L4TWBuk6DRkKcDoGzXerC0+0NFEDL+J+oLtNxdUc5xkkM\/SFVERedTlkaWkgcrt\/BYiFftnce4e5WJj3NIt4AeBK4AVVXVMm9H2irVdUyb0faK43J3L2hBzVqpKqqupkYkQOgqGrMmMs\/jwXZWvarQGKlS0ASN490rW0w\/ktHEz2D8VGMtBFSnJJvOAM4zux7QvQ4LDYZ+GFV9OSAdpvHWBwhLLiHQr9NaN+MPa\/aXQGhsXS45nnHFbNj\/YMuiq6M8TdA4wAcOKg9e6zaT6TnPutcLoGMS10nLmI7FBUtJ0gMarY570+zFauGe+tSbVo0nEHKATwiwjZsV5oY6kGPqtA3HVt2kL03QFLaUmkuJzk5kmTxU1Z7OGZYnjvUBoU1KVFjCYIkxgYkk\/Wt742\/wA7uC8\/TxWFpPLg0l0n0rbTs9LzmqOIY59R0ERJ85KVq0w4QVi+KsiLvv7VH\/G3+d3BPjb\/ADu4JrtIYZxlzCTlk33pIo1BkfFUtFAtJG7isay\/G3+d3BYSVk1jSJmnMbjFuuT3qwzW+0qrFaGFzXBrrhIgOAEtPGDgVlXPaz6d2IuMPLO\/h+KlhqL69QMZ8Bz83T6VJ9R4a3NRuvVsrChTo7ZlQAi8CIqujEGo6YIBDTAAMx1xerur9pApVqVYBpcC9rSQbofy2nGCYHeoS0ViZc4yc12Nn0gNH6OpPLb7qpvXZjlPaXyTuAaB3L0rm1abadCjD3OdEED0rX3AARtNhvWljGtwWGic5mw259amq9Sqaoa5p2cXg4OIdtL0BobGUSZlRlOy2RrvLAcDEGoBBmI6VEWH4QqlRxAoswE+U5Rta2Bz3OuAXiSW7sSSfaVq0dHY0yKlJjeTgZPsssOhj6DZBe4cgV1ulbU28yC04yRMtzyMFRw0lT\/+dn+f3lz1bTJplgugjfiZhdINFs\/+hnZU+6tLCYN9PWNcRMRDnbBf1TyzXmPlPWbVNH5qQYDp1gzaQRGuOJy2RN10NgtI2bP2bRh\/N95Z9uPRt7XfeWrZ6RY1rTBgZ5yCJBHMQtqxUQ97WnAE7s8lYLG8e0+9ZLC+zbTYZDluWzo+qC8C40YHEXp7yVKqOtdiFF7QCTIJx\/BUvHivHadxTaeJDQCfRBz4u38l6nRVFwokOzDj4DdC3qzJHsWm+iRmFbePFLx4rz9atTqmS0zzC1WtLdq5\/X75PtPqDxtVtp0pZ61noUqhqNNF17ktY9jokAEOeJEH2q7X75PtPqDxtXPOWvouoWYcxtc7wYr+Bphz3O2jVIPH0h7VJ2wWSoA2\/VbBmWUGNOE79rz9wXSnXOjt2vuVLgY5pm7flzmmYvRHI471w6LQGKeMo2dyvVcKyqAKhJiYvlNj3KUoGyMkX6rpcXTUo03Ox3TtR+ZW7o\/Stns9K0tYaz3VwYvNYxjZa4YBryQOV3AKEp0ZY48MeoZ\/nmWFRGKdcCN3cpvZ0gLXuJEgkTmQQRs3hdJpvStltT6T3Gs0sbduXGPpmc8C8T\/4tOnWsgqUqt6qNk8PhlFjL0Fphx2pw5PeVDKqkcS8mTHYuU6ApsDGEgAEATvmfErX130iLRpChVa0taWkAGJgGmMYwXpC8l0t\/E2b1X+OmvWlm6acXU6Djmek8QsJzGsxFRrchqDsaqoiLAUkV9KkZEg96tpPhwPAj2q\/+vxe5Nphtid+VtnNRdJsParrp9F4verw5oLb7cCMcxdx3b+pYarsBjMdP1qlbJnR9ab0nRyWgGADcNIOViIuLxmo6utHxW7pOsLIxr2MDi992SYjkOdhA\/l70tmmXsosq3WOLolknCWk578uCi9b9IF5pUmhuMVLznxm2oy6G3Tv3yufpFznXRTeXcGtLpxiRAkjnheur1K2F9DCt9AttqgWJm8QZm2aThqNKs3Wqm4JmZuN2YjmpHS9TaXHhl0XZIEkB19wMGOACg7Y4hzDBwM949y7qmCyy0muBa6SYIggXnHEHpHatRZ2Ox4wtXomsBsCbxBNyIg7+9dpN1hPE+5eefC8JZZz\/M\/wtXEWmzljW45tnuXe\/Cx+7o\/1+Fq4vSf7un0D2Beu+SYjR9Hm7\/6OWVpD6x3nYvcQqqgVV8oZ6o5Begdmiq2mTkFRSFiPI\/DnVvC0G1n6rjFiUqo7VErRNJ3AqSs7eRMd\/Mrqs3XT7Fqvrtp0to8w1sTx6AN5WrQwooVIbJkHd8VXc4vHWsttrNp06lS75LZz37u0wvGbVaDVrFzjMnGcjysScRmZOa6DWXXY1Q6nTY1lMxJOLjBkY5cFxfxlvFbFNhaPPuC9NovBuw7XOq2ceNwFvabcy4A2M\/m\/gPtFSXwo17os9EZNYXR0w1vhcoCtym4Kmv2k21q15uLRTpgfRB5\/ycQr2jsOamNp1NjA89ZAaO4lZ\/yj9Ckxo2n3H2KR0do1lOw2erdAqVXPJdvLA4hg6Ig9a5zSNne57nNqXROUcy77Wam2iyyWYZ0qLb3SWhvbLCetccGXn9viVxmKqfMRVBMue\/bsL3x3ADksnR2Cp18YaTxIDQd1\/R3c1ho2VxgzHPC3f23p39rvvLdstlvAucYYMzx5gsVotbW5ANHOJce1UjjK5+0vRHQGjT61OY3k2711midYWXKdOo5xc1oa5zgA111sZg4dan6RJxa13TgPrXlJt44DtA9i9D1J04ytT2RP7SmMj85m4g74mD1KnjdI4uhS12QYzkZDesrHfJ7AtHSU28xLu0X7vAKds7HZukfNg47ulbSokLyWMxlXF1ekqm8R1eSeN1XoYenQZq0xAz2nxn3KqIiqpy5\/X75PtPqDxtXPOzK6HX75PtPqDxtUXopo2zCRIDm4cSXQ0fX0Are0aJoR\/e7wYruBMGoeDf8ActJFK6wtI2N675JEtumQHGCS3fmMccpUcynkbze1WzZaLH6zdbznC37KwRHNx7VGuGJUvQbmcAMJJIAxyxOC13aPfUqQwMMnBoqUwThiBLhikUA5zjAJSmVACZK1KjABdcC1444hw5udYluW6zupch4Mbr3lU3bgeIOUrSThl59txyOXKE5pBEjz582hQ2lv4mzeq\/x0160vJdLfxNm9V\/jpr1pVNMfVUPx+LVg1v5qr+H9KqiIsJcV+y9XtVjhBjhgsxDBHJdjz8\/QqPum8Rn1RiQnuptyBE8zunaAoBxWJXVMm9H2irVdUyb0faKW3J3L2hSOaz2S2lgIIDmnNp71tDSjGjkUwOiAO7NRiK7R0piqNPo2PtssDHKQY8OCU\/D03GSFfaK7nm844+xWIioveXuLnGScymgACAuB+Fj93R\/r8LVxek\/3dPoHsC7T4WP3dH+vwtXF6T\/d0+gewL6p8lP5Cjzd+tywtIfWO5f7V7iFVUCzWXyupfKaDdbVbvhbzzElYYUlYvI\/PFZDGOEdqssx5Mc59q2sPhugqzrTIOxVX1NduSvqnA5d65HXVtR1Gm1r6dNm91SoymC4jKXkTyQe0rr6g5LveuA+FuzufYaUCQ2oCcMr1JzWntMda06ABxTQ7aCN21cpV3UP4jQCQduWXAjxXK1dUrY\/FrA5uYLajHNIiZBGBWhbNXbTSZffTNzMuYQQBMEmCcOdeoarWxtr0a1lOps3Po7OW4ljrha6PVcqaHslWlT2Vo2d1lNtFoYXPvFrSHPJeAZeSDdxiDiZwvVa1Kk4sdOtIAG03z7PS2TlxV1umcS46xa0jM2I75MdhXj1J8deCzaO0fta1B3JuX2X5MQwuF484AB\/JUv8Aq5UfXa2kA+k6pdFRvKaBtIOI8kgSDPBekWfUGx0xLabvOwqO385TW4h2GebG4Mxu39uXJWNKV6FfDhrXXPpNNjBG+8iQS07RzC4vWI7avUrte1zHGGYm8GtYG4tIkYgqAqWF9Jzw9sG8ZGfzjw516mdWbNfAipHrngs41PspcJY43dxeSMDOInEcyUNJ0KtAYem1wDSBcD2HjuWdo2rVwmLOIxDmuBbENaQbAR6x\/tG34ea6R5DGM6z1fiVzdpDnzgvTfhPrustKm+jQoQ6+11+i0w6A5gBERgKnYq1bDRr2Q1bJRoGo5gfTvsbdMwYPeOlFSpTpMFZzvRJAmLC8eluE5nZbetM6ZZUb0fRnIk3F15R8UPAf2qU1ctBs9elUBHltm75pMOHYSvS7LoykQ51Wy06UnkMIpucBdE3i2W5z1CTC09Q7PRt3xqo+hS2Laxp0XNpgXmtE3icZmWoNalVpu9KWzqk7DI2Gb537FXGPoMd9UZIO3YbLuLB85ZLf5O7NLL5T+gexUtx5PX+d6wGt1cG5vB36iqBM1AeXgtBERYatrn9fvk+0+oPG1Y7HSax9PEg8lwPOa4YXnmu+SOvDfk1++T7T6g8bVfoOxVLRWDrr2sMu2haS0ltovkTkTmM8wV6PRAmjAz1z4MTsO4N13OMCGz\/qUTpe5do3L0cqb0eVfN6I3cFiBMZu\/sHuU7rRomoxlJznB90mngwtMG84ThwwlRn6PrXb2yfdzvcu7EwMYhNqsLYaRkOHvI71o0arXUw4HafHjB7ls1qbXU2XgcHO3kfNZwWBtmZuDp6T7ldaT+z9V\/ib0HzVgseL6Y4uA7XD+RVwHkCDYge5DNaJBXR6Xp03FoqA4gi8MxjIkb1BaM0WyqagLnANiCAJIM58FMaYPKA5p7SfqAWjoWs1m0nfA7CVaZUb05FSIG\/lt87d0BVKJe2gdU3t+pcPppkWmzeq\/wAdNesLy3WKkW2qyzva\/wAdP3r1JUdLGaOHP+fiFTqmcVVP+P6VVERYaFma2pw\/xB9oRzanD\/ED2Ba6JvS7L\/m+Cjq+YWXYu83uV9Sk6G4bvrK10XA5oBEHtH\/Fdg7\/AD2rLsXeb3JsXeb3LEijLNx7R\/xXb7\/Pasuxd5vctLStepRp320XVHTAa0E4wcXQDAw9i2EU6b6bXAuZI2jWieEgAjqUHtc5pAdB3xMdtlw2sdlr24MD7NVY1szdHK5UXoLgRhHBR1o1UfUwuVmtaDH7O852UAnAA9XUvSlVelw\/yqfh2hlGi1oGQDsrztbvKy36Ke5xca7uwbo898hXtougcnuWazUXB2RWqi8zTc1hBAy4\/tWsQSM+74qYOM\/irLO3DHid3OopFe+kSXa2p37+pJ6C0T3KXqiZ9y1bVYKdag6jVaS17bpGXDHmIOIPEBaUIj6SOvr6l\/8AL4I6C0T3Lzm06oaU0fUe6w\/t6TjN3DE7i5hIh26WHGOoVbYNO207N9NtlYcH1CC1105gS9zz0C7PFeior5+UdaPUE75+Hw3gpXzJu9NWtX6Vis7KFIYDEuPlPefKe7ny6AANymCBG+VDoqJ0mSSSySd5+Cb0A3rcNI3wYP5C34E5OUIkJdLHdHrQyZM55dyk6jO3z2rZ05omnaqL6NQG67I72uHkuHOPwXlTdA6X0c5zbMzb0ZJDYvNBJxIbeD2E8xjpXpiK5R05Vo+q0RuJt4JTsI12ZXnLdGaa0h+yq0xZKLsHughzm72w57nu6JaDvK9Q0FomlZaFOz0mwymIxzcSZc50fOJknpWqi5W05VqkazBAyE28J743AIbhA3I+e1SVFhvO6vYq20EjDHFRiKn8+\/hmnq5z9reTw4pnQ3Bnu+Ky7F3m9ysc0jMQrVcqZLdg7x7h4p11z+vvyfafUHjbK6DQtpr0KLKQsz3Bt7lcps3nl2V0xnxWC12ZlVj6bxeY9pa4HeCIIUXo9mlLKwUaNqoVaTMGG00nuqtaMml9N7Q+BvIlbWisVSpNLX1CwyTMAyCAIyMer1yk1SYjV1gYtMXExlH3ip61W2u4ACz1m4z5VU+5av7eZ+Lvnzrpvf3Xb3etT9JaZ9LYPoK3+5P0lpn0tg+grf7louxOEcZOIP5R7GqLarwIFL\/UferNJ6PtFb\/iqDpa92U+d0rUs2gazHtds6hukOjZuEwZzW9+ktM+lsH0Fb\/cn6S0z6WwfQVv9yX0mBmenO\/1f2p7cdiGt1RTtzS12Ou917YvGEeS4\/UtRmh64cTsn47rrlt\/pLTPpbB9BW\/3J+kdM+lsH0Fb\/con6PJJ6Y34ftXG4yu0QKfeuQ1k0bVdbrFTuOa4tqHlAiGh9KXY7sCvQVEaM0VUbVfabTW29pqAMv3bjKdMGRTpMk3WzicZJxUusnSGIZULadIy1gIBOZkyT7ByXGaznF7hBMW5CEREWcpoiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEIiIhCIiIQiIiEL\/2Q==)\n<h1><center> Online Order<\/center><\/h1>","e709e0db":"* We can observe that North Indian,chinese,South Indian and Biriyani are most common.\n* It means Bengalore is more influenced by North Indian culture more than South","272f9ec8":"* here we change the name of columns from(name , rate) to (restorant and rating)","d846c03d":"![HERE](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTUolCmySFuP3kJnmkPvN58SBKttzm434yP6Q&usqp=CAU)\n\n <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Introduction<\/p>\nZomato is an Indian multinational restaurant aggregator and food delivery company founded by Dipinder Goyal, Pankaj Chadah and Junian Patidar in 2008\n\n\n\n","4cde64a0":"##### from this scattterplot,we can come up with a conclusion ya most of the highest rated accepts online order and they r budgeted too","21a3d686":"* we can  using plotly to How many of the restuarants do not accept online orders?","ba80b776":"### geographical analysis\n*  I need Latitudes & longitudes for each of the place for geaographical Data analysis,so to fetch lat,lon of each place,use Geopy","bad4e90b":"#### from this boxplot,we can observe that median number of votes for both categories vary.\n#### Restaurants accepting online orders get more votes from customers as there is a rating option poping up after each order through zomato application.","09d771ae":"#### Is there any difference b\/w price of restaurants accepting and not accepting online orders?","08efe80f":"* Know we using I love using ploty. ploty showing more information about data","7af5e8f0":"* Wow the big prsentage accept look on chart will see 64.4% accept is good","1fe64131":"### calculate avg rating of each resturant","c7d88818":"### Is there any difference b\/w votes of restaurants accepting and not accepting online orders?","0c93823f":"* Now let's see this","a3176272":"* we can now plot this columns ( **cost vs rating**)","01360f06":"* This is percentage for columns have massing value we found ( rate have 15.0337%) and phone have2.3358% missing values and location have 0.0406% now we know the big missing value in columns (rate)","af03d9fe":"##### distribution of cost for 2 people","08f46d48":"#### How many types of restaurants we have?","dde27068":"* now we can clean the rate columns from the missing value.","527a1149":"*  Almost more than 50 percent of restaurants has rating between 3 and 4. Restaurants having rating more than 4.5 are very rare.","a33a0029":"* Now columns is clean","07fae159":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Loading Data<\/p>","98836bde":"### Now we Anlyse Approx cost for 2 people","d96d2a37":"* we can plot this number to understand more","40702231":"### Geting the all NAN features","c0854f41":"#### Statisticn method equal: \n* we see in (**Yes**) (min=40, median=450) and in (**No**) (min=50,median=500)\n* Restaurants accepting online orders are more affordable than Restaurants who are accepting online orders","77e9c969":"* we see the most vote for (By Brewski Company)","b90decd6":"* now we can how many rest do not accept online order","4711b013":"* very good it's very clean know.\n "}}