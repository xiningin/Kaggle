{"cell_type":{"f9db754e":"code","ea48b278":"code","ab63ea35":"code","b723a2ae":"code","44449f3c":"code","26b1610c":"code","18d9d1ea":"code","9d3cc47a":"code","091b2cc8":"code","3cc32037":"code","8a80b0bb":"code","92b4f81e":"code","f1fd3482":"code","9fe6d902":"code","2560e9a0":"code","1ab07e3d":"code","f62379b1":"code","078f1e34":"code","20230e3b":"code","8755ddf4":"code","136c480c":"code","ce3cd3c9":"code","f0362e8c":"code","7fe0d710":"code","413ecf71":"code","6bb8230e":"code","6e3294fb":"code","9b34ea46":"markdown","611de85a":"markdown","9c4af2a1":"markdown","164b3771":"markdown","9c26f8d8":"markdown","13884247":"markdown","47124880":"markdown","5fe79545":"markdown","79b1fce2":"markdown","67c3dbd7":"markdown","4c99f748":"markdown","04c2598d":"markdown","47197c6f":"markdown","769e4e38":"markdown","c4b6d60d":"markdown","46be1b69":"markdown","09ba2283":"markdown","fa0583d0":"markdown","af159102":"markdown"},"source":{"f9db754e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.warn_explicit\n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea48b278":"#Loading Data\ndata = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")","ab63ea35":"data.head()","b723a2ae":"data.describe()","44449f3c":"data.info()","26b1610c":"#lets drop some variables\ndata.drop([\"Date\",\"Location\",\"WindGustDir\",\"WindDir9am\",\"WindDir3pm\",\"RainToday\"],axis=1,inplace=True)","18d9d1ea":"data.RainTomorrow.value_counts()","9d3cc47a":"#RainTomorrow must be object type\ndata.astype({'RainTomorrow': 'object'}).dtypes","091b2cc8":"data.RainTomorrow = [1 if each == \"Yes\" else 0 for each in data.RainTomorrow]","3cc32037":"#done\ndata.RainTomorrow.value_counts()","8a80b0bb":"#done\ndata.info()","92b4f81e":"#to be taken mean values each  variables\nvariable_list = [each for each in data.columns]\n#except RainTomorrow because it is not numeric values\nvariable_list.remove(\"RainTomorrow\")\nvariable_list","f1fd3482":"data[\"MinTemp\"].mean()","9fe6d902":"#Let's get rid of missing values :)\nfor i in variable_list:\n    average_value = data[i].mean()\n    data[i].fillna(average_value,inplace=True)","2560e9a0":"#Done\ndata.info()","1ab07e3d":"y = data.RainTomorrow.values\nx_data = data.drop([\"RainTomorrow\"],axis=1)","f62379b1":"x = (x_data - np.min(x_data))\/(np.max(x_data) - np.min(x_data)).values","078f1e34":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","20230e3b":"x_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","8755ddf4":"print(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","136c480c":"def initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n","ce3cd3c9":"def sigmoid(z):\n    \n    y_head = 1\/(1 + np.exp(-z))\n    return y_head\n","f0362e8c":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients\n","7fe0d710":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = [] #her 10 adimda bir costlari depolamak icin(ilerde analiz edebilmek icin...)\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion): #kac kere forward-backward iteration yapacagimizi dongu icinde...\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update ->weight bias burada guncellenecek ad\u0131m say\u0131s\u0131na gore(number of iterations)\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.figure(figsize=(15,9))\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost\n\n","413ecf71":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","6bb8230e":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \n#learning rate arttikca hizli ogrenir...\nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 3, num_iterations = 300)    ","6e3294fb":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","9b34ea46":"# Linear Regression","611de85a":"# Fixing Data","9c4af2a1":"* Logistic Regression","164b3771":"* to be consistent with min and max values","9c26f8d8":"* Forward Backward Propagation","13884247":"* as you can see some some variables is missing and unnecesarily","47124880":"# Normalization","5fe79545":"* Initialize and Sigmoid Function","79b1fce2":"# Read csv","67c3dbd7":"* to fill missing values, existing values must be avaraged","4c99f748":"* Updating(Learning)","04c2598d":"* Prediction","47197c6f":"# Splitting the Data(According to x and y)","769e4e38":"* RainTomorrow consisting of no or yes is binary. It must be 0 or 1 instead of no or yes ","c4b6d60d":"# Sklearn with LR","46be1b69":"# Train-Test Split","09ba2283":"* Sigmoid Function","fa0583d0":"# Missing Values","af159102":"* Our purpose is guessing tomorrow whether rainy or not"}}