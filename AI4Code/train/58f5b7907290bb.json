{"cell_type":{"bbb0c4c9":"code","cf12ebac":"code","6d2e5f77":"code","5f6b9666":"code","3593f2f5":"code","a4e98e2a":"code","cb037062":"code","6ec7069f":"code","c71e621a":"code","1c427e84":"markdown"},"source":{"bbb0c4c9":"\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","cf12ebac":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","6d2e5f77":"data = pd.read_csv(\"\/kaggle\/input\/headbrain\/headbrain.csv\")","5f6b9666":"print(data.shape)\ndata.head()","3593f2f5":"X = data['Head Size(cm^3)'].values\nY = data['Brain Weight(grams)'].values","a4e98e2a":"#mean of X and Y\nmean_x = np.mean(X)\nmean_y = np.mean(Y)\n\n#total no of val\nm = len(X)\n\n#finding b0 and b1\nnumer = 0\ndenom = 0\nfor i in range(m):\n    numer += (X[i] - mean_x) * (Y[i]- mean_y)\n    denom += (X[i] - mean_x) ** 2\nb1 = numer\/denom\nb0 = mean_y - (b1 * mean_x)\n\nprint(b1 , b0)","cb037062":"max_x = np.max(X) + 100\nmin_x = np.min(X) - 100\n\nx = np.linspace(min_x, max_x, 1000)\ny = b0 +b1*x\n\nplt.plot(x, y, color = '#58b970', label = 'Regression Line')\nplt.scatter(X, Y, c='#ef5423', label = 'Scatter Plot')\n\n\nplt.xlabel('Head Size(cm^3)')\nplt.ylabel('Brain Weight(grams)')\nplt.legend()\nplt.show()","6ec7069f":"# linear model using least quare method \n# to check how good our model is \n\nss_t = 0\nss_r = 0\nfor i in range (m):\n    y_pred = b0 + b1 *X[i]\n    ss_t += (Y[i] - mean_y) ** 2 #total sum of square\n    ss_r += (Y[i] - y_pred) ** 2 #total sum of square of residuals\nr2 = 1- (ss_r\/ ss_t)\nprint (r2)","c71e621a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# cannot use rank 1 matric in scikit learn\nX = X.reshape(m, 1)\n\n#creating model\nreg = LinearRegression()\n\n# fitting training data\nreg = reg.fit(X, Y)\n\n# Y prediction \nY_pred = reg.predict(X)\n\n# Calculating R2 Score \nr2_score = reg.score(X, Y)\n\nprint(r2_score)","1c427e84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session"}}