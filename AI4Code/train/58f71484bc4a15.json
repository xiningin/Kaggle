{"cell_type":{"3419eda6":"code","b58da852":"code","cb04a336":"code","dc0bc638":"code","689d3346":"code","3873309f":"code","11d222fe":"code","dae6bf9b":"code","402dc945":"code","e3b5bdc4":"code","88629fc0":"code","7d15571f":"code","b34c811b":"code","9b4bdbed":"code","48147131":"code","fae4a1ea":"code","69219737":"code","e71dacc6":"code","bc8e521b":"code","970fd148":"code","e44a334e":"code","3038c2ae":"code","09152f54":"code","08fc6a0c":"code","5e83ba39":"code","bb12c19f":"code","d338a4be":"code","e8907a07":"code","bff1ce26":"code","d37ae271":"code","fefc1919":"code","f471619b":"code","5913b711":"code","0647a8f2":"code","d05fd33c":"code","6a949f56":"code","7e9345b7":"code","f763df46":"code","c4434b1d":"code","a148c65b":"code","5c93d6bc":"code","526a87b2":"code","a1dd92d0":"code","86d94640":"code","17c4a236":"code","1eaada8c":"code","1c0a2bcc":"code","1415a223":"markdown","ef81ef15":"markdown","f28f87a2":"markdown","e2f7b95f":"markdown","0871ea82":"markdown","9df1c8c8":"markdown","e08d1ddf":"markdown","12842267":"markdown","00f03db4":"markdown","13b0cc47":"markdown","b4f4efba":"markdown","cacb9fea":"markdown","f75b31e6":"markdown","699ccc39":"markdown","a90d222f":"markdown","88e5e409":"markdown","6871d79c":"markdown","d48de321":"markdown"},"source":{"3419eda6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# import os\n# print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b58da852":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# https:\/\/github.com\/SohierDane\/BigQuery_Helper\nfrom bq_helper import BigQueryHelper","cb04a336":"# bigQuery\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d8\u30eb\u30d1\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\nblockchain_helper = BigQueryHelper(active_project=\"bigquery-public-data\",dataset_name=\"bitcoin_blockchain\")","dc0bc638":"# \u30c6\u30fc\u30d6\u30eb\u4e00\u89a7\nblockchain_helper.list_tables()","689d3346":"blockchain_helper.head('blocks')","3873309f":"blockchain_helper.head('transactions')","11d222fe":"# \u5e74\u6708\u65e5\u306b\u5909\u63db\n# \u65e5\u5225\u306b\u30d6\u30ed\u30c3\u30af\u6570\u3092\u53d6\u5f97\nquery = \"\"\" WITH time AS \n            (\n                SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n                    block_id\n                FROM `bigquery-public-data.bitcoin_blockchain.blocks`\n            )\n            SELECT COUNT(block_id) AS blocks,\n                EXTRACT(DATE FROM trans_time) AS date\n            FROM time\n            GROUP BY date\n            ORDER BY date\n        \"\"\"\n# \u30af\u30a8\u30ea\u5b9f\u884c\u306e\u969b\u306e\u30b5\u30a4\u30ba\uff08GB\uff09\u3092\u51fa\u529b \nblockchain_helper.estimate_query_size(query)","dae6bf9b":"# query_to_pandas_safe()\uff1a\u30b5\u30a4\u30ba\u304c1GB\u4ee5\u4e0a\u306e\u30af\u30a8\u30ea\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\nq1 = blockchain_helper.query_to_pandas_safe(query) ","402dc945":"q1.head(5)\n","e3b5bdc4":"q1.tail(5)","88629fc0":"plt.bar(q1['date'], q1['blocks'])\nplt.show()","7d15571f":"# ascending=False\uff1a\u964d\u9806\nq1.sort_values('blocks', ascending=False).head(10)","b34c811b":"query = \"\"\"WITH time AS\n            (\n                SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time, transaction_id\n                FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n            )\n            SELECT COUNT(transaction_id) AS transactions,\n                EXTRACT(MONTH FROM trans_time) AS month,\n                EXTRACT(YEAR FROM trans_time) AS year\n            FROM time\n            GROUP BY year, month\n            ORDER BY year, month\n            \"\"\"\n# check size of query\nblockchain_helper.estimate_query_size(query)\n","9b4bdbed":"q4 = blockchain_helper.query_to_pandas(query)","48147131":"import matplotlib.pyplot as plt\nplt.plot(q4.transactions)\nplt.title(\"Monthly Bitcoin Transactions\")\nplt.show()","fae4a1ea":"q4.sort_values('transactions', ascending=False).reset_index(drop=True).head()","69219737":"query = \"\"\"WITH time AS\n            (\n                SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time, transaction_id\n                FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n            )\n            SELECT COUNT(transaction_id) AS transactions,\n                EXTRACT(YEAR FROM trans_time) AS year\n            FROM time\n            GROUP BY year\n            ORDER BY year\n            \"\"\"\n# check size of query\nblockchain_helper.estimate_query_size(query)","e71dacc6":"q5 = blockchain_helper.query_to_pandas(query) ","bc8e521b":"import matplotlib.pyplot as plt\nplt.plot(q5.transactions)\nplt.title(\"Every Year Bitcoin Transactions\")\nplt.show()","970fd148":"q5.sort_values('transactions', ascending=False).reset_index(drop=True)","e44a334e":"query = \"\"\"\nSELECT  o.output_pubkey_base58, sum(o.output_satoshis) as output_sum from \n    `bigquery-public-data.bitcoin_blockchain.transactions`JOIN\n    UNNEST(outputs) as o \n    where o.output_pubkey_base58 not in (select i.input_pubkey_base58\n    from UNNEST(inputs) as i)\n    group by o.output_pubkey_base58 order by output_sum desc limit 10\n\"\"\"\nprint (str(round((blockchain_helper.estimate_query_size(query)),2))+str(\" GB\"))","3038c2ae":"q6 = blockchain_helper.query_to_pandas(query) ","09152f54":"#1bitcoin=100,000,000satoshi\nq6[\"output_sum\"]=q6[\"output_sum\"].apply(lambda x: float(x\/100000000))","08fc6a0c":"q6","5e83ba39":"import matplotlib.pyplot as plt; plt.rcdefaults()\nimport numpy as np\nimport matplotlib.pyplot as plt\nobjects = q6[\"output_pubkey_base58\"]\ny_pos = np.arange(len(objects))\nperformance = q6[\"output_sum\"][:10]\nplt.bar(y_pos, performance, align='center', alpha=0.5)\nplt.xticks(y_pos, objects, rotation=90)\nplt.ylabel('Bitcoins')\nplt.title('Bitcoins Addresses Who received Most number of bitcoins')\nplt.show()","bb12c19f":"query = \"\"\"\n        WITH time AS \n            (\n                SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n                    inputs.input_pubkey_base58 AS input_key,\n                    outputs.output_pubkey_base58 AS output_key,\n                    outputs.output_satoshis AS satoshis,\n                    transaction_id AS trans_id\n                FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n                    JOIN UNNEST (inputs) AS inputs\n                    JOIN UNNEST (outputs) AS outputs\n                WHERE outputs.output_pubkey_base58 = '1LNWw6yCxkUmkhArb2Nf2MPw6vG7u5WG7q'\n            )\n        SELECT input_key, output_key, satoshis, trans_id,\n            EXTRACT(DATE FROM trans_time) AS date\n        FROM time\n        --ORDER BY date\n        \"\"\"\n\nprint (str(round((blockchain_helper.estimate_query_size(query)),2))+str(\" GB\"))","d338a4be":"q7 = blockchain_helper.query_to_pandas(query) ","e8907a07":"# make a datatime type transformation\nq7['date'] = pd.to_datetime(q7.date)\nq7 = q7.sort_values('satoshis',ascending=False)\n# convert satoshis to bitcoin\nq7['bitcoin'] = q7['satoshis'].apply(lambda x: float(x\/100000000))","bff1ce26":"q7","d37ae271":"q7.shape","fefc1919":"q7_mod=q7.loc[:,\"date\":\"bitcoin\"]","f471619b":"q7_mod.groupby([q7_mod['date'].dt.year, q7_mod['date'].dt.month]).sum()","5913b711":"QUERY = \"\"\"\nSELECT\n    inputs.input_pubkey_base58 AS input_key, count(*)\nFROM `bigquery-public-data.bitcoin_blockchain.transactions`\n    JOIN UNNEST (inputs) AS inputs\nWHERE inputs.input_pubkey_base58 IS NOT NULL\nGROUP BY inputs.input_pubkey_base58 order by count(*) desc limit 1000\n\"\"\"\nblockchain_helper.estimate_query_size(QUERY) ","0647a8f2":"q8 = blockchain_helper.query_to_pandas(QUERY) ","d05fd33c":"q8.head()","6a949f56":"# lets query all transactions this person was involved in\nq_input = \"\"\"\n        WITH time AS \n            (\n                SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n                    inputs.input_pubkey_base58 AS input_key,\n                    outputs.output_pubkey_base58 AS output_key,\n                    outputs.output_satoshis AS satoshis,\n                    transaction_id AS trans_id\n                FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n                    JOIN UNNEST (inputs) AS inputs\n                    JOIN UNNEST (outputs) AS outputs\n                WHERE inputs.input_pubkey_base58 = '1NxaBCFQwejSZbQfWcYNwgqML5wWoE3rK4'\n            )\n        SELECT input_key, output_key, satoshis, trans_id,\n            EXTRACT(DATE FROM trans_time) AS date\n        FROM time\n        --ORDER BY date\n        \"\"\"\nblockchain_helper.estimate_query_size(q_input)","7e9345b7":"xxx = blockchain_helper.query_to_pandas(q_input)\n","f763df46":"q9=xxx\nq9.head()","c4434b1d":"# \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u5e74\u6708\u65e5\u306b\u5909\u63db\nq9['date'] = pd.to_datetime(q9.date)\nq9 = q9.sort_values('date')\nq9['bitcoin'] = q9['satoshis'].apply(lambda x: float(x\/100000000))","a148c65b":"q9.head()","5c93d6bc":"q9.tail()","526a87b2":"q9[[\"bitcoin\"]].describe()","a1dd92d0":"len(q9)","86d94640":"# input_key \u3068 output_key \u304c\u540c\u3058\nq9_same=q9[q9[\"input_key\"]==q9[\"output_key\"]]","17c4a236":"len(q9_same)","1eaada8c":"# 1\u65e5\u3042\u305f\u308a\u306e\u53d6\u5f15\u56de\u6570\nq9['date'].value_counts().head()","1c0a2bcc":"plt.bar(q9.index, q9.values)\nplt.show()","1415a223":"## \u6708\u5225\u53d6\u5f15\u91cf","ef81ef15":"\u5e74\u3005\u53d6\u5f15\u91cf\u304c\u5897\u3048\u3066\u304d\u3066\u3044\u308b\u3002","f28f87a2":"## \u65e5\u5225\u30d6\u30ed\u30c3\u30af\u6570\u53d6\u5f97","e2f7b95f":"\u81ea\u5df1\u53d6\u5f15\u56de\u6570\uff1a1,896,875  \n\u7dcf\u53d6\u5f15\u56de\u6570\u306e\u534a\u5206\u3092\u5360\u3081\u308b","0871ea82":"\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u3002","9df1c8c8":"**2017\u5e7410\u6708\u301c12\u6708**\u306e\u53d6\u5f15\u91cf\u304c\u6700\u3082\u591a\u3044","e08d1ddf":"## \u30a2\u30c9\u30ec\u30b9\u5225\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u53d6\u5f97\u679a\u6570","12842267":"## \u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u6700\u5927\u53d6\u5f97\u8005\n\u30a2\u30c9\u30ec\u30b9\uff1a1LNWw6yCxkUmkhArb2Nf2MPw6vG7u5WG7q","00f03db4":"\u53d6\u5f15\u6570\uff1a40819","13b0cc47":"2014\u5e743\u670812\u65e5\u304b\u3089\u53d6\u5f15\u958b\u59cb","b4f4efba":"## \u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u6700\u5927\u53d6\u5f15\u8005\n\u30a2\u30c9\u30ec\u30b9\uff1a1NxaBCFQwejSZbQfWcYNwgqML5wWoE3rK4","cacb9fea":"## \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","f75b31e6":"\u7dcf\u53d6\u5f15\u56de\u6570\uff1a3,794,124","699ccc39":"## \u5e74\u5225\u53d6\u5f15\u91cf","a90d222f":"\u53d6\u5f15\u56de\u6570\u3084\u81ea\u5df1\u53d6\u5f15\u306e\u591a\u3055\u3092\u8003\u3048\u308b\u3068\u3001**\u30a2\u30c9\u30ec\u30b9\uff081NxaBCFQwejSZbQfWcYNwgqML5wWoE3rK4\uff09\u306f\u53d6\u5f15\u4ea4\u63db\u6240\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3002**","88e5e409":"**2010\u5e747\u670812\u65e5\u301c16\u65e5** \u306e\u6d41\u5165\u6570\u304c\u6700\u3082\u591a\u3044\u3002\n\n**2010\/07\/11**  \n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u7cfb\u30cb\u30e5\u30fc\u30b9\u3092\u4e2d\u5fc3\u306b\u53d6\u308a\u6271\u3046\u96fb\u5b50\u63b2\u793a\u677f\u3067\u3042\u308bSlashdot\u306b\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u304c\u53d6\u308a\u4e0a\u3052\u3089\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u591a\u304f\u306e\u4eba\u3005\u306b\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u304c\u77e5\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002  https:\/\/slashdot.org  \n**2010\/07\/12**  \n\u4ee5\u964d5\u65e5\u9593\u30670.008\u30c9\u30eb\u304b\u30890.08\u30c9\u30eb\u3078\u3068\u4e0a\u6607","6871d79c":"0.00005\u304b\u3089100\u679a\u307e\u3067\u306e\u306e\u5c0f\u53e3\u53d6\u5f15\u304c\u591a\u3044","d48de321":"## \u30a2\u30c9\u30ec\u30b9\u5225\u53d6\u5f15\u6570"}}