{"cell_type":{"d576a6ce":"code","158afc6b":"code","4ee4b737":"code","3f627850":"code","fbcf0479":"code","69d9d07c":"code","6a210ba4":"code","462578b1":"code","a96e7571":"code","88c2d0ee":"code","8b81ba79":"code","7cc60527":"code","ac8c5ea5":"code","acff4cc7":"code","d1678809":"markdown","865035e8":"markdown","886ac48e":"markdown","76a99042":"markdown","5bb86ad5":"markdown","5ba27669":"markdown","06108cca":"markdown"},"source":{"d576a6ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","158afc6b":"import time\nimport copy\nimport numpy as np\nimport pandas as pd\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom plotly import tools\nfrom plotly.graph_objs import *\nfrom plotly.offline import init_notebook_mode, iplot, iplot_mpl\ninit_notebook_mode()","4ee4b737":"data = pd.read_csv(\"..\/input\/bitmex-trades\/bitmex.csv\")\ndata['Date'] = pd.to_datetime(data['Date'])\ndata = data.set_index('Date')\nprint(data.index.min(), data.index.max())\ndata.head()","3f627850":"date_split = '2018-01-01'\ntrain = data[:date_split]\ntest = data[date_split:]\ntest = test[:1500]\nlen(train), len(test)","fbcf0479":"def plot_train_test(train, test, date_split):\n    \n    data = [\n        Candlestick(x=train.index, open=train['Open'], high=train['High'], low=train['Low'], close=train['Close'], name='train'),\n        Candlestick(x=test.index, open=test['Open'], high=test['High'], low=test['Low'], close=test['Close'], name='test')\n    ]\n    layout = {\n         'shapes': [\n             {'x0': date_split, 'x1': date_split, 'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper', 'line': {'color': 'rgb(0,0,0)', 'width': 1}}\n         ],\n        'annotations': [\n            {'x': date_split, 'y': 1.0, 'xref': 'x', 'yref': 'paper', 'showarrow': False, 'xanchor': 'left', 'text': ' test data'},\n            {'x': date_split, 'y': 1.0, 'xref': 'x', 'yref': 'paper', 'showarrow': False, 'xanchor': 'right', 'text': 'train data '}\n        ]\n    }\n    figure = Figure(data=data, layout=layout)\n    iplot(figure)","69d9d07c":"plot_train_test(train, test, date_split)","6a210ba4":"class Environment1:\n    \n    def __init__(self, data, history_t=90):\n        self.data = data\n        self.history_t = history_t\n        self.reset()\n        \n    def reset(self):\n        self.t = 0\n        self.done = False\n        self.profits = 0\n        self.positions = []\n        self.position_value = 0\n        self.history = [0 for _ in range(self.history_t)]\n        return [self.position_value] + self.history # obs\n    \n    def step(self, act):\n        reward = 0\n        \n        # act = 0: stay, 1: buy, 2: sell\n        if act == 1:\n            self.positions.append(self.data.iloc[self.t, :]['Close'])\n        elif act == 2: # sell\n            if len(self.positions) == 0:\n                reward = -1\n            else:\n                profits = 0\n                for p in self.positions:\n                    profits += (self.data.iloc[self.t, :]['Close'] - p)\n                reward += profits\n                self.profits += profits\n                self.positions = []\n        \n        # set next time\n        self.t += 1\n        self.position_value = 0\n        for p in self.positions:\n            self.position_value += (self.data.iloc[self.t, :]['Close'] - p)\n        self.history.pop(0)\n        self.history.append(self.data.iloc[self.t, :]['Close'] - self.data.iloc[(self.t-1), :]['Close'])\n        \n        # clipping reward\n        if reward > 0:\n            reward = 1\n        elif reward < 0:\n            reward = -1\n        \n        return [self.position_value] + self.history, reward, self.done # obs, reward, done","462578b1":"env = Environment1(train)\nprint(env.reset())\nfor _ in range(3):\n    pact = np.random.randint(3)\n    print(env.step(pact))","a96e7571":"\ndef train_dqn(env):\n\n    class Q_Network(chainer.Chain):\n\n        def __init__(self, input_size, hidden_size, output_size):\n            super(Q_Network, self).__init__(\n                fc1 = L.Linear(input_size, hidden_size),\n                fc2 = L.Linear(hidden_size, hidden_size),\n                fc3 = L.Linear(hidden_size, output_size)\n            )\n\n        def __call__(self, x):\n            h = F.relu(self.fc1(x))\n            h = F.relu(self.fc2(h))\n            y = self.fc3(h)\n            return y\n\n        def reset(self):\n            self.zerograds()\n\n    Q = Q_Network(input_size=env.history_t+1, hidden_size=100, output_size=3)\n    Q_ast = copy.deepcopy(Q)\n    optimizer = chainer.optimizers.Adam()\n    optimizer.setup(Q)\n\n    epoch_num = 50\n    step_max = len(env.data)-1\n    memory_size = 200\n    batch_size = 20\n    epsilon = 1.0\n    epsilon_decrease = 1e-3\n    epsilon_min = 0.1\n    start_reduce_epsilon = 200\n    train_freq = 10\n    update_q_freq = 20\n    gamma = 0.97\n    show_log_freq = 5\n\n    memory = []\n    total_step = 0\n    total_rewards = []\n    total_losses = []\n\n    start = time.time()\n    for epoch in range(epoch_num):\n\n        pobs = env.reset()\n        step = 0\n        done = False\n        total_reward = 0\n        total_loss = 0\n\n        while not done and step < step_max:\n\n            # select act\n            pact = np.random.randint(3)\n            if np.random.rand() > epsilon:\n                pact = Q(np.array(pobs, dtype=np.float32).reshape(1, -1))\n                pact = np.argmax(pact.data)\n\n            # act\n            obs, reward, done = env.step(pact)\n\n            # add memory\n            memory.append((pobs, pact, reward, obs, done))\n            if len(memory) > memory_size:\n                memory.pop(0)\n\n            # train or update q\n            if len(memory) == memory_size:\n                if total_step % train_freq == 0:\n                    shuffled_memory = np.random.permutation(memory)\n                    memory_idx = range(len(shuffled_memory))\n                    for i in memory_idx[::batch_size]:\n                        batch = np.array(shuffled_memory[i:i+batch_size])\n                        b_pobs = np.array(batch[:, 0].tolist(), dtype=np.float32).reshape(batch_size, -1)\n                        b_pact = np.array(batch[:, 1].tolist(), dtype=np.int32)\n                        b_reward = np.array(batch[:, 2].tolist(), dtype=np.int32)\n                        b_obs = np.array(batch[:, 3].tolist(), dtype=np.float32).reshape(batch_size, -1)\n                        b_done = np.array(batch[:, 4].tolist(), dtype=np.bool)\n\n                        q = Q(b_pobs)\n                        maxq = np.max(Q_ast(b_obs).data, axis=1)\n                        target = copy.deepcopy(q.data)\n                        for j in range(batch_size):\n                            target[j, b_pact[j]] = b_reward[j]+gamma*maxq[j]*(not b_done[j])\n                        Q.reset()\n                        loss = F.mean_squared_error(q, target)\n                        total_loss += loss.data\n                        loss.backward()\n                        optimizer.update()\n\n                if total_step % update_q_freq == 0:\n                    Q_ast = copy.deepcopy(Q)\n\n            # epsilon\n            if epsilon > epsilon_min and total_step > start_reduce_epsilon:\n                epsilon -= epsilon_decrease\n\n            # next step\n            total_reward += reward\n            pobs = obs\n            step += 1\n            total_step += 1\n\n        total_rewards.append(total_reward)\n        total_losses.append(total_loss)\n\n        if (epoch+1) % show_log_freq == 0:\n            log_reward = sum(total_rewards[((epoch+1)-show_log_freq):])\/show_log_freq\n            log_loss = sum(total_losses[((epoch+1)-show_log_freq):])\/show_log_freq\n            elapsed_time = time.time()-start\n            print('\\t'.join(map(str, [epoch+1, epsilon, total_step, log_reward, log_loss, elapsed_time])))\n            start = time.time()\n            \n    return Q, total_losses, total_rewards\n    ","88c2d0ee":"Q, total_losses, total_rewards = train_dqn(Environment1(train))","8b81ba79":"def plot_loss_reward(total_losses, total_rewards):\n\n    figure = tools.make_subplots(rows=1, cols=2, subplot_titles=('loss', 'reward'), print_grid=False)\n    figure.append_trace(Scatter(y=total_losses, mode='lines', line=dict(color='skyblue')), 1, 1)\n    figure.append_trace(Scatter(y=total_rewards, mode='lines', line=dict(color='orange')), 1, 2)\n    figure['layout']['xaxis1'].update(title='epoch')\n    figure['layout']['xaxis2'].update(title='epoch')\n    figure['layout'].update(height=400, width=900, showlegend=False)\n    iplot(figure)\n    ","7cc60527":"plot_loss_reward(total_losses, total_rewards)","ac8c5ea5":"Q, total_losses, total_rewards = train_dqn(Environment1(test))","acff4cc7":"plot_loss_reward(total_losses, total_rewards)","d1678809":"## Data","865035e8":"## Taking Only the Subset of entire Data","886ac48e":"## Training loss","76a99042":"## Deep Q network","5bb86ad5":"## Imports","5ba27669":"## Testing loss","06108cca":"## Environment"}}