{"cell_type":{"fad13eac":"code","72f26a9e":"code","e4ff0fe6":"code","b577e08a":"code","57dbec3f":"code","6cbe7829":"code","1df236c9":"code","578cb1ec":"code","40006806":"code","46e037fd":"code","261fee7c":"code","bf233469":"code","216d62d8":"code","29d4bb55":"code","9417f45a":"code","efc429dc":"code","bf986531":"code","9a0baa51":"code","27b66093":"code","940e0cec":"code","d09c6a4e":"code","bb33fbb7":"code","a94b4691":"code","7010c1ee":"code","01e9eb29":"code","a44e9f12":"code","67d169e9":"code","7076f5e8":"code","59465cf1":"code","e295c6ba":"code","e1b82852":"code","cd1ffab4":"code","2da80cea":"code","281b0518":"code","18f897fc":"code","6cc14fd1":"code","32fb1104":"code","d04e7ab5":"code","56fa8771":"code","637004d0":"code","cccce3a3":"code","a40eefa0":"code","9a1b2f4a":"code","a9a808ad":"code","45eab90a":"code","71e57355":"code","34f30603":"code","d8d2a485":"code","f5cc06ba":"code","669b3566":"code","11cf228c":"code","3a9cd8db":"code","a5a9114c":"code","28aa6406":"code","6cc0c410":"code","5761d6a9":"code","8fe83ac1":"code","70ee0977":"code","9ace9a83":"code","236dae4b":"code","2e577ac0":"code","5da83556":"code","460fcc21":"code","dfc1becd":"code","e501a4a0":"code","7d47c6de":"code","db94e0ca":"code","e91db9d1":"code","bff7aaff":"code","bfcf31a0":"code","b074f8d4":"code","3eda3b14":"code","dc98abaf":"code","3093438f":"code","2f569b5a":"code","6f939937":"code","fedd679a":"code","9c1118ea":"code","0c704a85":"code","ef0bdcff":"code","41ede086":"code","af0bd015":"code","d5e0f2a5":"code","c90d2c23":"code","f5662c36":"code","a0937fc3":"code","9b8ee747":"markdown","8c5cb37b":"markdown","3da9ea40":"markdown","29add61b":"markdown","84732a62":"markdown","714cc8ea":"markdown","61909ed3":"markdown","f68f3ce8":"markdown","6835cb95":"markdown","29e4918a":"markdown","50d1a47f":"markdown","37dae6a5":"markdown","15ca856f":"markdown","c7bdee92":"markdown","905958f2":"markdown","23cb5653":"markdown","d98d3686":"markdown","38e00d02":"markdown","401acd28":"markdown","11e31b0f":"markdown","c8d722d2":"markdown","758feee5":"markdown","d3b0fd35":"markdown","4a489f94":"markdown","6551622b":"markdown","fa9a482e":"markdown","033c687e":"markdown","329bd680":"markdown","357db989":"markdown","536492cb":"markdown","84fe0e03":"markdown","a461cfb7":"markdown","1be1d8f2":"markdown","1d483891":"markdown","bd6f279f":"markdown","9a683dfb":"markdown","bac522a6":"markdown","18771812":"markdown","626b15a7":"markdown","9b1daf2e":"markdown","cbf269d9":"markdown","84b29446":"markdown","af2df809":"markdown","729baa59":"markdown","909b194e":"markdown","d2c9e2c5":"markdown","518a7d02":"markdown","1cd86b5f":"markdown","695cc263":"markdown","0ee433b0":"markdown","02978b38":"markdown","e94072e7":"markdown","c8515ea0":"markdown","9406dfe0":"markdown","caaf16d2":"markdown","b474d9a6":"markdown","89823302":"markdown","18bd28e3":"markdown","1f8d74c4":"markdown","ec340c6b":"markdown","d2bdfb33":"markdown","501aa0e9":"markdown","3965bd64":"markdown","d414b72b":"markdown","8a5ec92f":"markdown","8123d423":"markdown","8827bfcd":"markdown","0b2abfbf":"markdown","348a7ca7":"markdown","7cf1a379":"markdown","164a3bec":"markdown","41fd610d":"markdown","85db0e3f":"markdown","f9f51cc8":"markdown","51bcbba0":"markdown","78cc1c18":"markdown","67067bbb":"markdown","6b459994":"markdown","c1cf2b55":"markdown","c4775d38":"markdown","ff1aec7e":"markdown","88b8ca08":"markdown","a607ad0d":"markdown","618cbfb8":"markdown","5bac6916":"markdown","83127bd3":"markdown","6a943b11":"markdown","b9399571":"markdown","fca6c931":"markdown","9c52ac7c":"markdown","8276acc3":"markdown","1e4524cb":"markdown","512ce0cf":"markdown"},"source":{"fad13eac":"import warnings\nwarnings.simplefilter('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os#Walking through directores\n\nimport plotly.graph_objects as go # Generate Graphs\nfrom plotly.subplots import make_subplots #To Create Subplots\n\nfrom sklearn import decomposition #pca\nfrom sklearn.preprocessing import StandardScaler # Standardization ((X - X_mean)\/X_std)\n\nfrom sklearn.neighbors import KNeighborsClassifier #KNN Model\nfrom sklearn.ensemble import RandomForestClassifier #RandomForest Model\nfrom sklearn.linear_model import LogisticRegression #Logistic Model\n\nfrom sklearn.model_selection import train_test_split # Splitting into train and test\n\nfrom sklearn.model_selection import GridSearchCV# Hyperparameter Tuning\nfrom sklearn.model_selection import cross_val_score#cross validation score\n\nfrom sklearn.metrics import classification_report # text report showing the main classification metrics\nfrom sklearn.metrics import confusion_matrix #to get confusion_matirx \n\npd.set_option('display.max_columns', None)#Setting Max Columns Display to Max inorder to get glance of all features in dataframe","72f26a9e":"missing_values = ['?', '--', ' ', 'NA', 'N\/A', '-'] #Sometimes Missing Values are't in form of NaN\ndf = pd.read_csv('..\/input\/cardiovascular-disease-dataset\/cardio_train.csv', delimiter = ';', na_values = missing_values)\nprint('There are Total {} datapoints in the dataset with {} Features listed as {}:'.format(df.shape[0], df.shape[1], df.columns.values))","e4ff0fe6":"df.head()","b577e08a":"features_with_null = [features for feature in df.columns if df[feature].isnull().sum()>0]\nif features_with_null:\n    print('Features with Null Values {}'.format(features_with_null))\nelse:\n    print('Dataset contains no Null Values')","57dbec3f":"df.info()","6cbe7829":"df.drop(columns=['id'], inplace=True)","1df236c9":"duplicate_sum = df.duplicated().sum()\nif duplicate_sum:\n    print('Duplicates Rows in Dataset are : {}'.format(duplicate_sum))\nelse:\n    print('Dataset contains no Duplicate Values')","578cb1ec":"duplicated = df[df.duplicated(keep=False)]\nduplicated = duplicated.sort_values(by=['gender', 'height', 'weight'], ascending= False)\nduplicated.head()","40006806":"df.drop_duplicates(keep = 'first', inplace = True)\nprint('Total {} datapoints remaining with {} features'.format(df.shape[0], df.shape[1]))","46e037fd":"Continuous_features = [feature for feature in df.columns if len(df[feature].unique())>25]\nprint('Continuous Values are : {}'.format(Continuous_features))","261fee7c":"df[Continuous_features].head()","bf233469":"df[Continuous_features].describe()","216d62d8":"fig = go.Figure()\n\nfig.add_trace(go.Box(x=df['height'], name = 'Height', boxpoints='outliers',))\nfig.add_trace(go.Box(x=df['weight'], name = 'Weight', boxpoints='outliers',))\n\nfig.update_layout(title_text=\"Box Plot for Weight and Height with Outliers\")\nfig.show()","29d4bb55":"\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Height Distribution\", \"Weight Distribution\"))\n\ntrace0 = go.Histogram(x=df['height'], name = 'Height')\ntrace1 = go.Histogram(x=df['weight'], name = 'Weight')\n\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig.update_xaxes(title_text=\"Height\", row=1, col=1)\nfig.update_yaxes(title_text=\"Total Count\", row=1, col=1)\n\nfig.update_xaxes(title_text=\"Weight\", row=1, col=2)\nfig.update_yaxes(title_text=\"Total Count\", row=1, col=2)\n\nfig.update_layout(title_text=\"Histograph\", height=700)\n\n\nfig.show()","9417f45a":"def outliers(df_out, drop = False):\n    for each_feature in df_out.columns:\n        feature_data = df_out[each_feature]\n        Q1 = np.percentile(feature_data, 25.) # 25th percentile of the data of the given feature\n        Q3 = np.percentile(feature_data, 75.) # 75th percentile of the data of the given feature\n        IQR = Q3-Q1 #Interquartile Range\n        outlier_step = IQR * 1.5 #That's we were talking about above\n        outliers = feature_data[~((feature_data >= Q1 - outlier_step) & (feature_data <= Q3 + outlier_step))].index.tolist()  \n        print('For the feature {}, No of Outliers is {}'.format(each_feature, len(outliers)))\noutliers(df[['height', 'weight']])","efc429dc":"outline_free_df = df.copy()\noutline_free_df[['height', 'weight']] = np.log(outline_free_df[['height', 'weight']])\noutliers(outline_free_df[['height', 'weight']])","bf986531":"outline_free_df = outline_free_df[(outline_free_df['weight'] > outline_free_df['weight'].quantile(0.005)) & (outline_free_df['weight'] < outline_free_df['weight'].quantile(0.995))]\noutline_free_df = outline_free_df[(outline_free_df['height'] > outline_free_df['height'].quantile(0.005)) & (outline_free_df['height'] < outline_free_df['height'].quantile(0.995))]\noutliers(outline_free_df[['height', 'weight']])","9a0baa51":"print('Handling outliners cost us {} datapoints'.format(len(df)-len(outline_free_df)))","27b66093":"outline_free_df = outline_free_df[outline_free_df['ap_lo']>=0]\noutline_free_df = outline_free_df[outline_free_df['ap_hi']>=0]","940e0cec":"print('There are total {} observations where ap_hi < ap_lo'.format(len(outline_free_df[outline_free_df['ap_hi'] < outline_free_df['ap_lo']])))","d09c6a4e":"cleaned_data = outline_free_df[outline_free_df['ap_hi'] >= outline_free_df['ap_lo']].reset_index(drop=True)\nprint('Total observations preserved : {}'.format(len(cleaned_data)))","bb33fbb7":"print('As per our assumptions we have total {} outliers'.format(len(cleaned_data[(cleaned_data[\"ap_hi\"]>250) | (cleaned_data[\"ap_lo\"]>200)])))","a94b4691":"cleaned_data = cleaned_data[(cleaned_data[\"ap_hi\"]<=250) & (cleaned_data[\"ap_lo\"]<=200)]","7010c1ee":"print('Total {} datapoints remaining with {} features'.format(cleaned_data.shape[0], cleaned_data.shape[1]))","01e9eb29":"cleaned_data.head()","a44e9f12":"cleaned_data['age'] = cleaned_data['age'].div(365).apply(lambda x: int(x))","67d169e9":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=cleaned_data['age'], name = 'Age'))\nfig.show()","7076f5e8":"duplicate_sum = cleaned_data.duplicated().sum()\nif duplicate_sum:\n    print('Duplicates Rows in Dataset are : {}'.format(duplicate_sum))\nelse:\n    print('Dataset contains no Duplicate Values')","59465cf1":"duplicated = cleaned_data[cleaned_data.duplicated(keep=False)]\nduplicated = duplicated.sort_values(by=['gender', 'height', 'weight'], ascending= False)\nduplicated.head()","e295c6ba":"cleaned_data.drop_duplicates(keep = 'first', inplace = True)\nprint('Total {} datapoints remaining with {} features'.format(cleaned_data.shape[0], df.shape[1]))","e1b82852":"fig = go.Figure(data=[go.Bar(x = cleaned_data[cleaned_data['cardio'] == 0]['age'].value_counts().index.to_list(), \n                             y =cleaned_data[cleaned_data['cardio'] == 0]['age'].value_counts().values, name = 'Non CVD'),\n                      go.Bar(x = cleaned_data[cleaned_data['cardio'] == 1]['age'].value_counts().index.to_list(), \n                             y =cleaned_data[cleaned_data['cardio'] == 1]['age'].value_counts().values, name = 'CVD')]\n               )\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, title_text=\"Distribution of Age groups grouped by Target Value\", \n                  yaxis=dict(\n        title='Total Count',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),     xaxis=dict(\n        title='Age',\n        titlefont_size=16,\n        tickfont_size=14,\n    ))\nfig.show()","cd1ffab4":"fig = go.Figure([go.Pie(labels=cleaned_data[cleaned_data['cardio'] == 0]['age'].value_counts().index.to_list(),values=cleaned_data[cleaned_data['cardio'] == 0]['age'].value_counts().values)])\nfig.update_layout(title_text=\"Distribution of Age group for Non CVD\", template=\"plotly_white\")\nfig.data[0].marker.line.color = 'rgb(255, 255, 255)'\nfig.data[0].marker.line.width = 2\nfig.update_traces(textposition='inside')\nfig.show()","2da80cea":"fig = go.Figure([go.Pie(labels=cleaned_data[cleaned_data['cardio'] == 1]['age'].value_counts().index.to_list(),values=cleaned_data[cleaned_data['cardio'] == 1]['age'].value_counts().values)])\nfig.update_layout(title_text=\"Distribution of Age group for CVD\", template=\"plotly_white\")\nfig.data[0].marker.line.color = 'rgb(255, 255, 255)'\nfig.data[0].marker.line.width = 2\nfig.update_traces(textposition='inside')\nfig.show()","281b0518":"\nfig = make_subplots(rows=2, cols=2, subplot_titles=(\"Height Distribution for CVD Population\", \"Height Distribution for non CVD Population\", \"Weight Distribution for CVD Population\", \"Weight Distribution for non CVD Population\"))\n\ntrace0 = go.Histogram(x=np.exp(cleaned_data[cleaned_data['cardio'] == 0]['height']), name = 'Non CVD')\ntrace1 = go.Histogram(x=np.exp(cleaned_data[cleaned_data['cardio'] == 1]['height']), name = 'CVD')\n\ntrace2 = go.Histogram(x=np.exp(cleaned_data[cleaned_data['cardio'] == 0]['weight']), name = 'Non CVD')\ntrace3 = go.Histogram(x=np.exp(cleaned_data[cleaned_data['cardio'] == 1]['weight']), name = 'CVD')\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 2)\n\nfig.update_xaxes(title_text=\"Height\", row=1, col=1)\nfig.update_yaxes(title_text=\"Total Count\", row=1, col=1)\n\nfig.update_xaxes(title_text=\"Height\", row=1, col=2)\nfig.update_yaxes(title_text=\"Total Count\", row=1, col=2)\n\nfig.update_xaxes(title_text=\"Weight\", row=2, col=1)\nfig.update_yaxes(title_text=\"Total Count\", row=2, col=1)\n\nfig.update_xaxes(title_text=\"Weight\", row=2, col=2)\nfig.update_yaxes(title_text=\"Total Count\", row=2, col=2)\n\nfig.show()","18f897fc":"fig = go.Figure(data=[go.Bar(x = cleaned_data[cleaned_data['cardio'] == 0]['ap_hi'].value_counts().index.to_list(), \n                             y =cleaned_data[cleaned_data['cardio'] == 0]['ap_hi'].value_counts().values, name = 'Non CVD'),\n                      go.Bar(x = cleaned_data[cleaned_data['cardio'] == 1]['ap_hi'].value_counts().index.to_list(), \n                             y =cleaned_data[cleaned_data['cardio'] == 1]['ap_hi'].value_counts().values, name = 'CVD')]\n               )\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, title_text=\"Distribution of Systolic blood pressure Values grouped by Target Value\", \n                  yaxis=dict(\n        title='Total Count',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),     xaxis=dict(\n        title='Systolic Blood Pressure Values',\n        titlefont_size=16,\n        tickfont_size=14,\n    ))\nfig.show()","6cc14fd1":"fig = go.Figure([go.Pie(labels=cleaned_data[cleaned_data['cardio'] == 0]['ap_hi'].value_counts().index.to_list(),values=cleaned_data[cleaned_data['cardio'] == 0]['ap_hi'].value_counts().values)])\nfig.update_layout(title_text=\"Distribution of Systolic blood pressure values for Non CVD\", template=\"plotly_white\")\nfig.data[0].marker.line.color = 'rgb(255, 255, 255)'\nfig.data[0].marker.line.width = 2\nfig.update_traces(textposition='inside')\nfig.show()","32fb1104":"fig = go.Figure([go.Pie(labels=cleaned_data[cleaned_data['cardio'] == 1]['ap_hi'].value_counts().index.to_list(),values=cleaned_data[cleaned_data['cardio'] == 1]['ap_hi'].value_counts().values)])\nfig.update_layout(title_text=\"Distribution of Systolic blood pressure values for CVD\", template=\"plotly_white\")\nfig.data[0].marker.line.color = 'rgb(255, 255, 255)'\nfig.data[0].marker.line.width = 2\nfig.update_traces(textposition='inside')\nfig.show()","d04e7ab5":"fig = go.Figure(data=[go.Bar(x = cleaned_data[cleaned_data['cardio'] == 0]['ap_lo'].value_counts().index.to_list(), \n                             y =cleaned_data[cleaned_data['cardio'] == 0]['ap_lo'].value_counts().values, name = 'Non CVD'),\n                      go.Bar(x = cleaned_data[cleaned_data['cardio'] == 1]['ap_lo'].value_counts().index.to_list(), \n                             y =cleaned_data[cleaned_data['cardio'] == 1]['ap_lo'].value_counts().values, name = 'CVD')]\n               )\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, title_text=\"Distribution of Diastolic blood pressure Values grouped by Target Value\", \n        yaxis=dict(\n        title='Total Count',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),     xaxis=dict(\n        title='Diastolic Blood Pressure Values',\n        titlefont_size=16,\n        tickfont_size=14,\n    ))\nfig.show()","56fa8771":"fig = go.Figure([go.Pie(labels=cleaned_data[cleaned_data['cardio'] == 0]['ap_lo'].value_counts().index.to_list(),values=cleaned_data[cleaned_data['cardio'] == 0]['ap_lo'].value_counts().values)])\nfig.update_layout(title_text=\"Distribution of Daistolic blood pressure values for Non CVD\", template=\"plotly_white\")\nfig.data[0].marker.line.color = 'rgb(255, 255, 255)'\nfig.data[0].marker.line.width = 2\nfig.update_traces(textposition='inside')\nfig.show()","637004d0":"fig = go.Figure([go.Pie(labels=cleaned_data[cleaned_data['cardio'] == 1]['ap_lo'].value_counts().index.to_list(),values=cleaned_data[cleaned_data['cardio'] == 1]['ap_lo'].value_counts().values)])\nfig.update_layout(title_text=\"Distribution of Daistolic blood pressure values for CVD\", template=\"plotly_white\")\nfig.data[0].marker.line.color = 'rgb(255, 255, 255)'\nfig.data[0].marker.line.width = 2\nfig.update_traces(textposition='inside')\nfig.show()","cccce3a3":"Categorial_features = [feature for feature in cleaned_data.columns if len(cleaned_data[feature].unique())<25]\nprint('Categorial Values are : {}'.format(Categorial_features))","a40eefa0":"for each_feature in Categorial_features:\n    print('No of Categorial Values in Feature {} is {} as {}'.format(each_feature, len(cleaned_data[each_feature].unique()), cleaned_data[each_feature].unique()))","9a1b2f4a":"fig = go.Figure([go.Pie(labels=['Not Having CVD', 'Having CVD'],values=cleaned_data['cardio'].value_counts().values)])\nfig.update_layout(title_text=\"Pie chart of Target Variable\", template=\"plotly_white\")\nfig.data[0].marker.line.color = 'rgb(255, 255, 255)'\nfig.data[0].marker.line.width = 2\nfig.update_traces(hole=.4,)\nfig.show()","a9a808ad":"\nfig = make_subplots(rows=2, cols=3,subplot_titles=(\"Alchoal Distribution\", \"Gender Distribution\", \"Choslesterol Distribution\", \"Glucose Distribution\", \"Smoking Distribution\", \"Fitness Distribution\"), specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=['Non Alchoalic', 'Alchoalic'],values=cleaned_data['alco'].value_counts().values, name = 'Alchoal Status'), 1, 1)\nfig.add_trace(go.Pie(labels=['Female', 'Male'],values=cleaned_data['gender'].value_counts().values, name = 'Gender Status'), 1, 2)\n\nfig.add_trace(go.Pie(labels=['Normal', 'Above Normal', 'Well Above Normal'],values=cleaned_data['cholesterol'].value_counts().values, name = 'Cholesterol Level Status'), 1, 3)\nfig.add_trace(go.Pie(labels=['Normal', 'Above Normal', 'Well Above Normal'],values=cleaned_data['gluc'].value_counts().values, name = 'Glucose Level Status'), 2, 1)\n\nfig.add_trace(go.Pie(labels=['Non Smoker', 'Smoker'],values=cleaned_data['smoke'].value_counts().values, name = 'Smoking Status'), 2, 2)\nfig.add_trace(go.Pie(labels=['Not Involved in Physical Activites', 'Involved in Physical Activites'],values=cleaned_data['active'].value_counts().values, name = 'Fitness Status'), 2, 3)\n\nfig.update_traces(hole=.4,)\nfig.update_layout(title_text=\"Distribution of Various Categorial Values\")\n\nfig.show()\n","45eab90a":"target_value = cleaned_data['cardio']\ncleaned_data_for_pca = cleaned_data.drop(['cardio'], axis=1)","71e57355":"scaled_data = StandardScaler().fit_transform(cleaned_data_for_pca)\n\npca = decomposition.PCA()\npca.n_components = 2\npca_data = pca.fit_transform(scaled_data)\n\npca_data = np.vstack((pca_data.T, target_value)).T\npca_df = pd.DataFrame(data = pca_data, columns = ('first', 'second', 'label'))","34f30603":"fig = go.Figure(data=go.Scattergl(\n    x = pca_df['first'], \n    y = pca_df['second'],\n    mode='markers',\n    marker_color=pca_df['label']\n))\n\nfig.show()","d8d2a485":"def BMI(data):\n    return np.exp(data['weight']) \/ (np.exp(data['height'])\/100)**2 \n \ncleaned_data['bmi'] = cleaned_data.apply(BMI, axis=1)","f5cc06ba":"def pulse(data):\n    return np.subtract(data['ap_hi'], data['ap_lo'])\n \ncleaned_data['pulse'] = cleaned_data.apply(pulse, axis=1)","669b3566":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.rcParams['figure.figsize'] = (20, 15) \nsns.heatmap(cleaned_data.corr(), annot = True, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Corelation Between Features', fontsize = 30)\nplt.show()","11cf228c":"X = cleaned_data.drop(['cardio', 'bmi', 'weight', 'gluc', 'gender', 'smoke', 'alco', 'active'], axis =1)\nY = cleaned_data['cardio']","3a9cd8db":"scaler = StandardScaler()\nstandard_X = scaler.fit_transform(X)","a5a9114c":"X_train, X_test, y_train, y_test = train_test_split(standard_X, Y, test_size=0.2, random_state=42, shuffle = True)","28aa6406":"params = {'n_neighbors':list(range(0, 51)),\n          'weights':['uniform', 'distance'],\n          'p':[1,2]}","6cc0c410":"\"\"\"knn = KNeighborsClassifier()\nknn_grid_cv = GridSearchCV(knn, param_grid=params, cv=10) \nknn_grid_cv.fit(X_train, y_train)\nprint(\"Best Hyper Parameters:\\n\",knn_grid_cv.best_params_)\"\"\"\n\nprint(\"Best Hyper Parameters: {'n_neighbors': 50, 'p': 1, 'weights': 'uniform'}\")","5761d6a9":"knn = KNeighborsClassifier(n_neighbors=50, p=1, weights='uniform')\nknn.fit(X_train, y_train) ","8fe83ac1":"params = { \n    'n_estimators': [10, 50, 100, 150, 200, 300, 400, 500],\n    'max_depth' : [10,20,30,40,50],\n    'criterion' : ['entropy','gini']\n}","70ee0977":"'''rfc_gridcv = RandomForestClassifier(random_state=42)\nrfc_gridcv = GridSearchCV(estimator=rfc_gridcv, param_grid=params, cv= 10, n_jobs = -1)\nrfc_gridcv.fit(X_train, y_train)\nprint(\"Best Hyper Parameters:\\n\",rfc_gridcv.best_params_)'''\n\nprint(\"Best Hyper Parameters:{'criterion': 'entropy', 'max_depth': 10, 'n_estimators': 100}\")\n","9ace9a83":"rfc = RandomForestClassifier(random_state=42, n_estimators=100, max_depth= 10, criterion = 'entropy')\nrfc.fit(X_train, y_train)","236dae4b":"params_for_l1 = { \n    'C' :  np.logspace(0, 4, 10),\n    'solver' : ['liblinear', 'saga']\n}\n\nparams_for_l2 = { \n    'C' :  np.logspace(0, 4, 10),\n    'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n}\n\nparams_for_elasticnet = { \n    'C' :  np.logspace(0, 4, 10),\n    'l1_ratio' : np.arange (0.1, 1.0, 0.1),\n    'solver' : ['saga']\n}","2e577ac0":"'''logreg_with_l1_gridcv = LogisticRegression(penalty = 'l1')\nlogreg_with_l1_gridcv = GridSearchCV(estimator=logreg_with_l1_gridcv, param_grid=params_for_l1, cv= 10, n_jobs = -1)\nlogreg_with_l1_gridcv.fit(X_train, y_train)\nprint(\"Best Hyper Parameters:\\n\",logreg_with_l1_gridcv.best_params_)'''\n\nprint(\"Best Hyper Parameters:{'C': 166.81005372000593, 'solver': 'saga'}\")","5da83556":"logreg_with_l1 = LogisticRegression(penalty = 'l1', C = 166.81005372000593, solver = 'saga')\nlogreg_with_l1.fit(X_train, y_train)","460fcc21":"'''logreg_with_l2_gridcv = LogisticRegression(penalty = 'l2')\nlogreg_with_l2_gridcv = GridSearchCV(estimator=logreg_with_l2_gridcv, param_grid=params_for_l2, cv= 10, n_jobs = -1)\nlogreg_with_l2_gridcv.fit(X_train, y_train)\nprint(\"Best Hyper Parameters:\\n\",logreg_with_l2_gridcv.best_params_)'''\n\nprint(\"Best Hyper Parameters:{'C': 1.0, 'solver': 'liblinear'}\")","dfc1becd":"logreg_with_l2 = LogisticRegression(penalty = 'l2', C = 1.0, solver = 'liblinear')\nlogreg_with_l2.fit(X_train, y_train)","e501a4a0":"'''logreg_with_elasticnet_gridcv = LogisticRegression(penalty = 'elasticnet')\nlogreg_with_elasticnet_gridcv = GridSearchCV(estimator=logreg_with_elasticnet_gridcv, param_grid=params_for_elasticnet, cv= 10, n_jobs = -1)\nlogreg_with_elasticnet_gridcv.fit(X_train, y_train)\nprint(\"Best Hyper Parameters:\\n\",logreg_with_elasticnet_gridcv.best_params_)'''\n\n\nprint(\"Best Hyper Parameters:{'C': 1291.5496650148827, 'l1_ratio': 0.6, 'solver': 'saga'}\")","7d47c6de":"logreg_with_elasticnet = LogisticRegression(penalty = 'elasticnet', C = 1291.5496650148827, l1_ratio =  0.6, solver = 'saga')\nlogreg_with_elasticnet.fit(X_train, y_train)","db94e0ca":"scores = cross_val_score(knn, X_train, y_train, cv=10)\nprint('KNN Model gives an average accuracy of {0:.2f} % with minimun of {1:.2f} % and maximum of {2:.2f} % accuracy'.format(scores.mean() * 100, scores.min() * 100, scores.max() * 100))","e91db9d1":"Y_hat = knn.predict(X_test)\nprint(classification_report(y_test, Y_hat))","bff7aaff":"plt.rcParams['figure.figsize'] = (5, 5) \nsns.heatmap(confusion_matrix(y_test, Y_hat), annot = True, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Corelation Between Features')\nplt.show()","bfcf31a0":"print('True Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][1]))\nprint('True Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][0]))\nprint('False Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][1]))\nprint('False Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][0]))","b074f8d4":"scores = cross_val_score(rfc, X_train, y_train, cv=10)\nprint('Random Forest Model gives an average accuracy of {0:.2f} % with minimun of {1:.2f} % and maximum of {2:.2f} % accuracy'.format(scores.mean() * 100, scores.min() * 100, scores.max() * 100))","3eda3b14":"Y_hat = rfc.predict(X_test)\nprint(classification_report(y_test, Y_hat))","dc98abaf":"plt.rcParams['figure.figsize'] = (5, 5) \nsns.heatmap(confusion_matrix(y_test, Y_hat), annot = True, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Corelation Between Features')\nplt.show()","3093438f":"print('True Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][1]))\nprint('True Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][0]))\nprint('False Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][1]))\nprint('False Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][0]))","2f569b5a":"scores = cross_val_score(logreg_with_l1, X_train, y_train, cv=10)\nprint('Logistic Model with L1 Penalty gives an average accuracy of {0:.2f} % with minimun of {1:.2f} % and maximum of {2:.2f} % accuracy'.format(scores.mean() * 100, scores.min() * 100, scores.max() * 100))","6f939937":"Y_hat = logreg_with_l1.predict(X_test)\nprint(classification_report(y_test, Y_hat))","fedd679a":"plt.rcParams['figure.figsize'] = (5, 5) \nsns.heatmap(confusion_matrix(y_test, Y_hat), annot = True, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Corelation Between Features')\nplt.show()","9c1118ea":"print('True Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][1]))\nprint('True Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][0]))\nprint('False Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][1]))\nprint('False Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][0]))","0c704a85":"scores = cross_val_score(logreg_with_l2, X_train, y_train, cv=10)\nprint('Logistic Model with L2 Penalty gives an average accuracy of {0:.2f} % with minimun of {1:.2f} % and maximum of {2:.2f} % accuracy'.format(scores.mean() * 100, scores.min() * 100, scores.max() * 100))","ef0bdcff":"Y_hat = logreg_with_l2.predict(X_test)\nprint(classification_report(y_test, Y_hat))","41ede086":"plt.rcParams['figure.figsize'] = (5, 5) \nsns.heatmap(confusion_matrix(y_test, Y_hat), annot = True, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Corelation Between Features')\nplt.show()","af0bd015":"print('True Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][1]))\nprint('True Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][0]))\nprint('False Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][1]))\nprint('False Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][0]))","d5e0f2a5":"scores = cross_val_score(logreg_with_elasticnet, X_train, y_train, cv=10)\nprint('Logistic Model with Elasticnet Penalty gives an average accuracy of {0:.2f} % with minimun of {1:.2f} % and maximum of {2:.2f} % accuracy'.format(scores.mean() * 100, scores.min() * 100, scores.max() * 100))","c90d2c23":"Y_hat = logreg_with_elasticnet.predict(X_test)\nprint(classification_report(y_test, Y_hat))","f5662c36":"plt.rcParams['figure.figsize'] = (5, 5) \nsns.heatmap(confusion_matrix(y_test, Y_hat), annot = True, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Corelation Between Features')\nplt.show()","a0937fc3":"print('True Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][1]))\nprint('True Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][0]))\nprint('False Positive Cases : {}'.format(confusion_matrix(y_test, Y_hat)[0][1]))\nprint('False Negative Cases : {}'.format(confusion_matrix(y_test, Y_hat)[1][0]))","9b8ee747":"One way is Transforming variables. <br>\nTransforming variables can also eliminate outliers. Natural log of a value reduces the variation caused by extreme values","8c5cb37b":"## Distribution of the Numerical Values","3da9ea40":"After going through the description provided by the Distributer, Following information is gathered :\n>* gender has 2 categorial values as { 1 : Women, 2 : Male } \n>* cholesterol has 3 categorial values as { 1: Normal, 2: Above Normal, 3: Well Above Normal }\n>* gluc has 3 categorial values as { 1: Normal, 2: Above Normal, 3: Well Above Normal }\n>* Remaining Categories are just binary values","29add61b":"# End Notes\n\n> * With this we finish our analysis on this dataset. <br>\n> * I would again like to thanks [Svetlana Ulianova](https:\/\/www.kaggle.com\/sulianova) for providing this dataset. <br>\n> * We analysed the dataset, explored about different Datascience Pipelines and in the end trained a predictive model. <br>\n\nIt was a nice learning experience and I hope Readers of this Kernel aquired some usefull information from this analysis. <br> <br>\nIt's my first analysis I even did and it was fun. If you like this Kernel, the way I presented insights, the analysis etc then feel free to Upvote this Kernel. It'll boost my spirits, keeping me motivated to create more Kernels like this one <br>\nAnd Everyone can't not perfect at their first attempt. I'm always open for learning. If you want to correct something, advice, wanna share new strageties or techniques then feel free to comment them out. I'll love to hear some great advices \/ feedback from the community. <br> <br>\nHappy Kaggling :D !","84732a62":"Guess we have some duplicate rows. Let's have a small lookup over duplicated rows","714cc8ea":"## Feature Selection","61909ed3":"Well We always standardize so as to get mean of whole dataset as 0 and Variance (StD) as 1 <br>\nWorking of PCA is beyond the scope. Feel free to refer google to explore the maths behind it <br>\nJust now enjoy this visualization","f68f3ce8":"## Random Forest","6835cb95":"## PCA ?","29e4918a":">In our Data Analysis, We will try to analyze to find out the below stuffs :\n* Missing \/ Duplicate Values \n* All the Continuous Values\n* Distribution of the Numerical Values\n* Categorial Values \/ Discrete Values\n* Cardinality of Categorial Values \/ Discrete Values\n","50d1a47f":"> * n_estimators :> No of Decision Trees to be used\n> * max_depth :> Depth of Each Tree\n> * criterion :> Measure the quality of a split","37dae6a5":"# Evaluation for Random Forest","15ca856f":"Here We will use :\n> *  cross_val_score :> Evaluate a Score by Cross-Validation \n> * classification_report :> Text Report showing the Main Classification Metrics. We'll gonna draw Confussion Matrix too","c7bdee92":"We can observe lot's of outliers ( Points below Lower Fence and Above Upper Fence ) <br>\nTo explain more about Outliers and result of this Box Plot, I'll use IQR Interquartile Range","905958f2":"# What are cardiovascular diseases?\n\n\nCardiovascular diseases (CVDs) are a group of disorders of the heart and blood vessels and they include:\n>* Coronary heart disease \u2013 disease of the blood vessels supplying the heart muscle\n>* Cerebrovascular disease \u2013 disease of the blood vessels supplying the brain\n>* Peripheral arterial disease \u2013 disease of blood vessels supplying the arms and legs\n>* Rheumatic heart disease \u2013 damage to the heart muscle and heart valves from rheumatic fever, caused by streptococcal bacteria\n>* Congenital heart disease \u2013 malformations of heart structure existing at birth\n>* Deep vein thrombosis and pulmonary embolism \u2013 blood clots in the leg veins, which can dislodge and move to the heart and lungs\n\n<img  src=\"https:\/\/www.heart.org\/-\/media\/images\/health-topics\/consumer-healthcare\/istock529114056.jpg?la=en&hash=94CE873BB4478FEEAE058CB5FDEE2CB0A53A2C85\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\n\nAccording to World Health Organisation, \n>CVDs are the number 1 cause of death globally i.e More people die annually from CVDs than from any other cause.\nAn estimated 17.9 million people died from CVDs in 2016, representing 31% of all global deaths. Of these deaths, 85% are due to heart attack and stroke\n\nFrom the above facts and figures, we can easily conclude that Cardiovascular disease (CVD) accounts for the majority of death and hospitalization, health care expenditures and loss of productivity in developed country\n\n\n","23cb5653":"Interesting! We just converted our age from days to year and we got huge amount of duplicacy. That was unexpected <br>\nLet's have a look over duplicate rows to get more insights about this cause","d98d3686":"Keeping a basic concept in my mind, if a column contains continuous values then it will have good quantity of Unique Values. <br>\nTaking 25 as that threshold :\n> df[feature].unique())>25\n\nwill do our work","38e00d02":"| Preprocessing    |      Total Datapoints      |  Datapoints Lost |\n|----------|:-------------:|------:|\n| Duplicates Removed |  69976 | 24  |\n| Outliner Removed |  68346 | 1630  |\n| Negative Values Removed |    68338   |   8 |\n| ap_hi < ap_lo Removed | 67156 |    1182 |\n| Removed via Threshold  | 67118 |    38 |\n| Duplicates Removed (Age - Days :> Year)  | 63938 |    3180 |\n    ","401acd28":"# Evaluation for KNN","11e31b0f":"## K-Nearest Neighbors","c8d722d2":"Without losing data we are able to reduce good amount of outliers. <br>\nNow, We can define 0.005 and 0.995 Quantile range to handle the remaining outliers","758feee5":"Since we have many hyperparameters that we are required to tune inoder to get best out of model, we'll gonna perform some hyperparamters tuning <br>\nWe have some tradational techniques like gridsearch and randomsearch as well as techniques based on Bayesian optimization like hyperopt <br>\nHere, We will use GridSearch <br>\n\n<img  src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQh9a3whJq8CKeHVk8_3DMA32oOTfO8Ourl3KctJUdVE030Q_4x&usqp=CAU\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\nIn simple language, GridSearch tries all possible cominations of parameters given to train model inorder to select best parameters\nFeel free to research more about these techniques. <br>","d3b0fd35":"By looking over the graph, We can conclude that :\n> * Our Population has highest no of people having 120 mmHg Systolic Blood Pressure \n> * If a person is not having CVD, then There's more likely (48.7 %) that he \/ she has 120 mmHg Systolic Blood Pressure \n> * In case of CVD, We can't claim such strong assumption since no Pressure value is dominating the destribution ","4a489f94":"Well i must say we got some unusual kind of distribution by rounding of the Age data when was reduced to years <br>\nOnly takeaway is :\n>* Most of the people in dataset belongs to 49 to 60 age group. (We haven't round off the age i.e. One won't complete his current age unless his birthday arives ( if it makes sense )  \n>* We have an outlier with age as 29 (smallest value) but let's ignore it.\n>* Maximun age in our Dataset is 64\n","6551622b":"## IQR Interquartile Range\n\n<img  src=\"https:\/\/miro.medium.com\/max\/1400\/1*2c21SkzJMf3frPXPAR_gZA.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n","fa9a482e":"Similarly There's a relation bewteen Systolic Diastolic blood pressure that derives pulse rate","033c687e":"We doesn't require column name 'id'. Better to remove it","329bd680":"Features like Weight and Height are well distribuited for Non - CVD and CVD Population <br>\nNothing much for takeaway","357db989":"## Importing Necessary Libraries","536492cb":"As we researched, Substracting Diastolic blood pressure from Systolic blood pressure gives Pulse Pressure that can't be negative <br>\nTherefore, ap_hi > ap_lo","84fe0e03":"> * C :> Defines Strength of regularization ( smaller values specify stronger regularization )\n> * penalty :> Used to specify the norm used in the penalization\n> * solver :> Algorithm to use in the optimization problem. Different Solver supports different penalty. Hence we cane 3 cases here\n","a461cfb7":"## Logistic Regression\n\n","1be1d8f2":"> * n_neighbors :> That's our 'K' <br>\n> * weights :> Uniform gives same weight to all points while in Distance, closer neighbors of a query point will have a greater influence than neighbors which are further away <br>\n> * p:> if 1, use manhattan_distance to calculate distance , if 2 use euclidean_distance <br>","1d483891":"## Box Plot","bd6f279f":"# Model Evaluation\n\nTime to evaluate to find the best model for our use-case\n\n<img  src=\"https:\/\/www.datavedas.com\/wp-content\/uploads\/2018\/05\/4-MODEL-EVALUATION-AND-VALIDATION-S-1.jpg\" alt=\"FDR\" width=\"600\" height=\"400\"\/>","9a683dfb":"# Role of Data Science\n\nAI, also known as machine intelligence, can be defined as a branch of computer science that mimics the human mind process. <br>\nOne of the most popular technologies of AI is called machine learning, which enables algorithms to understand and learn data. <br>\n>These trending technolologies are applied in cardiovascular medicine including :\n>* Crecision medicine\n>* Clinical prediction\n>* Cardiac imaging analysis\n>* Intelligent robots\n\nIn this Dataset named \"Cardiovascular Disease dataset\", We'll try to analyze and gather the insights of dataset provided by [Svetlana Ulianova](https:\/\/www.kaggle.com\/sulianova) and predict the possibility of a person having Cardiovascular disease based on various parameters specified in this dataset","bac522a6":"As per our observations from our analysis, we'll gonna train this dataset over few models and compare them for our best use","18771812":"## Missing \/ Duplicate Values","626b15a7":"Now time to train knn model with these parameters","9b1daf2e":"# Feature Engineering\n\n<img  src=\"https:\/\/img-a.udemycdn.com\/course\/750x422\/1304050_ee0f_8.jpg\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\n","cbf269d9":"Let's check counts of features in different relations","84b29446":"Principal component analysis (PCA) is a technique for reducing the dimensionality of such datasets, increasing interpretability but at the same time minimizing information loss.","af2df809":"We all whenever we have height and weight, we can calculate BMI. It seems better to get another Feature BMI. Who knows we may get some better insights\n\n<img  src=\"https:\/\/secretsofhealthyeating.com\/wp-content\/uploads\/2018\/09\/BMI-Formula-768x377.jpg\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n","729baa59":"Since we have total datapoints as 70000, we can even conclude from above data that we have no Null Values","909b194e":"## Continuous Values","d2c9e2c5":">* Consist of combination of  Multiple Decision Trees <br>\n>* Each individual tree in the random forest spits out a class prediction and the class with the most votes becomes our model\u2019s prediction <br>\n>* Based on Bagging Technique\n\n<img  src=\"https:\/\/miro.medium.com\/max\/592\/1*i0o8mjFfCn-uD79-F1Cqkw.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>","518a7d02":"Well That's good quality of data that we'll gonna lose.\nSo, Rather than of using this problem Let's explore other techniques to hangle this problem","1cd86b5f":"# Evaluation for Logistic Model with L2 Penalty","695cc263":"# Evaluation for Logistic Model with Elasticnet Penalty","0ee433b0":"> * We trained KNN, RandomForest and Logistic Regression with different penality and reveived almost similar results. \n> * Here We dealing with a problem of a disease impacting a human health. So, We can't put someone's health in danger with our reckless decision \n> * We need to have an accurate model. \n> * In such cases, it's not a big threat if our model predict a Non CVD case as CVD (False Positive) because medical staff can later examine him\/her.\n> * But We can't risk of predicting a CVD case as Non CVD (False Negative) because in that case we'll be jeopardizing with that person's life.\n\n## Considering False Negative as a major factor, We will choose Random Forest as our model for the probelm since it's having the fine accuracy with Lower False Negative Cases.","02978b38":"# Confusion Matrix\n\nHave a look at this picture to have a better understanding of confusion matrix\n\n<img  src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/2\/26\/Precisionrecall.svg\/1200px-Precisionrecall.svg.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\n\nIn our case :\n> * True Positive :  No of Cases Predicted with CVD and Actually had CVD\n> * True Negative : No of Cases Predicted with No CVD and Actually had No CVD\n> * False Positive : No of Cases Predicted with CVD and Actually had No CVD\n> * False Negative : No of Cases Predicted with No CVD and Actually had  CVD","e94072e7":"* From Pie charts it's clear that no age group dominates Non CVD or CVD portion i.e. Age groups are uniformly distributed\n* But if you examine bar graph carefully, you get an interesting pattern:\n> * People with low age groups have lower chance of having CVD\n> * After reaching a peak point which is in this case is age group of 53 plot shows a delince shape for Non CVD and Increasing cases of CVD\n> * This clearly shows People with higher age groups have more chance of having CVD","c8515ea0":">*  Uses a Logistic Function to Model a Categorical Dependent variable\n\n<img  src=\"https:\/\/miro.medium.com\/max\/2400\/1*RqXFpiNGwdiKBWyLJc_E7g.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>","9406dfe0":"<h1><center>Data Science And Cardiovascular diseases (CVDs)<\/center><\/h1>\n<img src=\"https:\/\/villa-medica.com\/wp-content\/uploads\/2017\/07\/villa-medica-cardiovascular-infographic-1-compressor.jpg\" alt=\"drawing\" width=\"600\" height=\"400\"\/>\n","caaf16d2":"Now time to train rfc model (random forest) with these parameters","b474d9a6":"# Life Cycle of a Data Science Project\n\n\n<img  src=\"https:\/\/mk0analyticsindf35n9.kinstacdn.com\/wp-content\/uploads\/2020\/04\/Screenshot-2020-04-15-at-10.08.12-AM-768x630.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\nHey! Don't forget about the main aspects of any Data Science Project. Through this Kernel, Let's Dive into every layer of a Data Science Project.\n","89823302":"# Evaluation for Logistic Model with L1 Penalty","18bd28e3":"## Feature Scaling","1f8d74c4":"Now we have some new feature, let's build up a heat map to get to know about correlation between variables","ec340c6b":"Similarly I'll train few more potential model that may perform well on this dataset and will compare in the end, selecting the best model for our use - case","d2bdfb33":"We have Age in Days. Let's do some wrangling and and Age of person in Years","501aa0e9":"# Data Analysis \n\n\n<img  src=\"https:\/\/miro.medium.com\/max\/1400\/1*PKXC0FeXQc5LVmqhJ8HnVg.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n","3965bd64":"Let's Dive into our CSV File to get a glance of what we are dealing with","d414b72b":"Categorial Values are some kind of biased towards a particular value. I don't think we'll get some usefull insights from ploting their distribution in CVD and Non CVD <br>\nFeel free to have a close look on the chart to get better insights of distrubution of Categorial Features","8a5ec92f":"## Conclusion\n\n","8123d423":"But don't forget we have converted our weight and height via natural log function to reduce outliers <br>\nIn order to calculate BMI, We'll calculate inverse of log and then we'll apply the formula of BMI <br>\n> The inverse of log is exp","8827bfcd":"By looking over the graph, We can conclude that :\n\n> * Our Population has highest no of people having 80 mmHg Daistolic Blood Pressure\n> * If a person is not having CVD, then There's more likely (55.3 %) that he \/ she has 120 mmHg Daistolic Blood Pressure  \n> * If a person is having CVD, then There's more likely (42.5 %) that he \/ she has 120 mmHg Systolic Blood Pressure with second mostly likely case (31.9 %) of having 90mmHg Daistolic Blood Pressure ","0b2abfbf":"Interquartile range gives another measure of variability. <br>\nIt equally divides the distribution into four equal parts called quartiles : \n>* First 25% is 1st quartile (Q1), i.e. 25 % of the data in the distribution will the less than Q1\n>* Middle one is 2nd quartile (Q2) i.e. 50 % of the data in the distribution will the less than Q2\n>* Last one is 3rd quartile (Q3) i.e. 75 % of the data in the distribution will the less than Q3\n\nThe interquartile range is the distance between the third and the first quartile i.e. :\n\n> IQR = Q3- Q1\n\nAs a rule of thumb, observations can be qualified as outliers when they lie more than 1.5 IQR below the first quartile or 1.5 IQR above the third quartile. <br>\n>Outliers = Q1 \u2013 1.5 * IQR\n<br>or<br>\n>Outliers = Q3 + 1.5 * IQR\n\n<img  src=\"https:\/\/i2.wp.com\/makemeanalyst.com\/wp-content\/uploads\/2017\/05\/IQR-1.png?resize=431%2C460\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\n","348a7ca7":"We finally get rid of all the outliers from height and pretty good amount from weight. <br>\nMaintaining the momentum why not let's get rid of ap_hi and ap_lo values that are negative","7cf1a379":"# Modelling\n\nTime to do some Machine Learning\n\n<img  src=\"https:\/\/miro.medium.com\/max\/624\/1*9AWKjTkBm-Tr6UKnQmzSsA.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\nFirst of all, Let's divide our dataset into Training and Testing Datapoints","164a3bec":"Here we will going to :\n> * Derive new features for better insights\n> * Feature Selection\n> * Feature Scaling","41fd610d":"> * Datapoint is classified by a plurality vote of its neighbors, with the object being assigned to the class most common among its k nearest neighbors\n\n<img  src=\"https:\/\/res.cloudinary.com\/dyd911kmh\/image\/upload\/f_auto,q_auto:best\/v1531424125\/KNN_final_a1mrv9.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n","85db0e3f":"Clearly it's a balanced dataset","f9f51cc8":"Here We gonna use Standardization formula i.e. Substracting mean of feature followed by division by standard deviation in order to set feature's mean to 0 and std to 1\n\n<img  src=\"https:\/\/365datascience.com\/wp-content\/uploads\/2018\/10\/image4-9.jpg\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\nWe have a nice function from Sklearn library that will let us achieve our goal","51bcbba0":"Grid Search takes lot of time. So, I'm gonna comment that section out <br>\nDon't worry ! I already ran it and recevied the Best Hyper Parameters for KNN at the time of this kernel creation that i'll gonna print out <br>\nFeel free to experiment with parameters and re-run the grid search by yourself to obtain new Hyper - Parameters. <br>\nWho knows they may give better results than defined by mine :) !","78cc1c18":"We just converted age from days to year. <br>\nLet's make sure we didn't created any duplicacy ","67067bbb":"## Categorial Values","6b459994":"## What are Outlier ?\n\nAn Outlier is a data point that differs significantly from other observations. <br>\nAn outlier may be due to variability in the measurement or it may indicate experimental error. <br>\nAn outlier can cause serious problems in statistical analyses and prediction.\n\n<img  src=\"https:\/\/miro.medium.com\/max\/1400\/1*TbUF_HTQ6jOhO8EoPnmekQ.jpeg\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\nThere are various ways to detect outliers like :\n>* Using Scatter Plot\n>* Using Z - Test\n>* Using IQR Interquartile Range\n>* Box Plot\n\nSo, What do we do ? Like we always remove Outliers ? \n>Depends. In some cases even outliers are linked to some important features that you don't wanna lose\n\nWe'll get our solution in a second. Just bare with me <br>\nIn this Kernel, I'll use Box - Plot and IQR Interquartile Range to detect Outliers","c1cf2b55":"Before diving into distribution on the Continuous Variables, let's have some glance on basic stastical stuffs","c4775d38":"We have multiple feature with various scales. We don't want our model to give priority to smaller \/ bigger values just because of difference in scale. <br>\nHence, Feature Scaling is performed during the data pre-processing to handle highly varying magnitudes or values or units <br>\n","ff1aec7e":"Basically, you would like to have features with good amount of correlation with target feature and low correlation with any independent feature <br>\nIn simple words, high correlation within independent features means both wanna represent same thing and even if you drop one of the feature, you won't lose much quality data \n\n>* ap_hi has the correlated with quite features but since it has the maximum correlation with Target Value, We can't afford to ignore it <br>\n>* Similar case is with pulse and ap_lo\n\n>* Unfortunately our newly formed feature 'bmi' doesn't have good correlation with target + corelates with ap_lo\n>* Similar case is with weight\n\n>* 'gender' is the least correlated feature + adding correlation with smoke and height \n\n>* Features like height, smoke, alco, active have quite low amount of correlation with target feature\n\nPreserving Good data, We'll gonna drop 'bmi',  'weight',  'gluc',  'gender',  'height',  'smoke',  'alco',  'active'","88b8ca08":"Well, That's our whole dataset in 2D. Though visually it seems they kind of forms some clusters, they still have lots disturbance.<br>\nPCA is quite old technique and have more algorithms like TSNE and UMap that can give better visualization but that's not our focus here. <br>\nDon't forget we have lots of things yet to do. We need to Classify man :D ","a607ad0d":"Having irrelevant features in your data can decrease the accuracy of the models and make your model learn based on irrelevant features. <br>\nSo, We do feature selection ( automatically or manually ) to select good data\n\n<img  src=\"https:\/\/miro.medium.com\/max\/694\/0*gz5XuPZfN0wAi66I\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\nWe have various techniques for feature selection. Here ill stuck to more tradational way i.e. using correlational matrix","618cbfb8":"Duplicate Rows doesn't contribue to our prediction. Rather they just increase the training size. It's usual to get rid of duplicates from our dataset","5bac6916":">So, this Dataset contains the following Features :\n* id :> It's just the Id no of the row. Not revelant \n* age :> It's the age of a person in Days\n* gender :> It's the gender of the person  \n* height :> It's the height of the person in cm\n* weight :> It's the weight of the person in kg\n* ap_hi :> It's the Systolic blood pressure i.e. Pressure exerted when Blood is ejected in arteries. Normal value : 120mmhg or Below\n* ap_low :> It's the Diastolic blood pressure i.e. Pressure exerted when Blood exerts between arteries and heartbeats. Normal Value : 80mmhg or Below\n* cholesterol :> It's the Cholestreol value (Cholesterol is a type of fat found in your blood) of your blood. In Adults, 200 mg\/dL is desired with 200 and 239 mg\/dL as Boderline High. In Children, 170 mg\/dL is desired with 170 and 199 mg\/dL as Boderline High\n* gluc :> It's the Glucose Level. They're less than 100 mg\/dL after not eating (fasting) for at least 8 hours. And they're less than 140 mg\/dL 2 hours after eating. For most people without diabetes, blood sugar levels before meals hover around 70 to 80 mg\/dL\n* smoke :> It contain Binary Values stating whether Person is a Smoker or not i.e.  {0 : 'Not a Smoker', 1 : 'Smoker'} \n* alco :> It contain Binary Values stating whether Person is an alchoalic or not i.e.  {0 : 'Not a Alchoalic', 1 : 'Alchoalic'} \n* active :> It contain Binary Values stating whether Person is involved in physical activites or not i.e.  {0 : 'Not involved in Physical Activites', 1 : 'involved in physical activites'} \n* cardio :> It's our Target Value Binary Values stating whether Person has Cardiovascular diseases (CVDs) or Not i.e.  {0 : 'Not Have CVD', 1 : 'Have CVD'} ","83127bd3":"In other words, we can convert out 12D dataset (because of 12 features) in 2D in order to visualize it <br>\nIs't it cool?","6a943b11":"If you're not a doctor or not aware of domain that much then it's a good practice to google and look-up for some domain knowlegde like i did and realized the highest pressure recorded in an individual was 370\/360.<br>\n\n<img  src=\"https:\/\/pbs.twimg.com\/media\/DOkphshW4AA-PuQ?format=jpg&name=medium\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n\nBaically I'm feeling safe to assume some threshold let say, 250 and 200 for ap_hi and ap_lo respectively as upperbound. <br>\nValues after that will be dropped as outliers","b9399571":"##  New features \n","fca6c931":"Above observations enlightens some keypoints that can make anyone curios about this dataset:\n>* Minimum and Maximun Height sounds faulty. Although the smallest and tallest human ever known were of 54.64 cm and 251.46 cm respectively but here it just look like some kind of error \n>* Same conclusions can be made for minimum weight as described here\n>* Systolic blood pressure and Diastolic blood pressure can't be negative\n>* If Systolic blood pressure and Diastolic blood pressure are more than 180 and 120mmHg respectively, it's an emergency case. But here we are dealing with 16020mmHg and 11000mmHg repectively which looks quite fishy \n\nUmm so what does it mean?<br>\nAhh ! I see. Outliers","9c52ac7c":"| Features with Strong Correlation with Target Value  |      Correlation with Target Value      |  Strong Correlation with another feature |\n|----------|:-------------:|------:|\n| age |    0.24   |   ap_hi ( 0.21 ) |\n| ap_hi |  0.43 | pulse ( 0.82 ) ap_lo ( 0.72 ) weight ( 0.26 ) age ( 0.21 )|\n| ap_lo |  0.33 | ap_hi ( 0.72 ) bmi ( 0.23 ) weight ( 0.24 )|\n| cholesterol | 0.21 |    gluc ( 0.44 ) |\n| pulse  | 0.33 |    ap_hi ( 0.82 ) |","8276acc3":"Okay. To address this problem, let me take an example. Suppose a person aged 20 is haivng his birth day on 7th June and it's May right now. <br>\nWe divided age with 365 to order to get age years. Thus keeping my age as 20 ignoring the fact he's gonna 21 within 30 days. <br>\nConverting Age from days to Year results in loss of important data. <br>\nRight now, We have two options:\n\n> * Keeping Age in Days\n> * Dropping Duplicate rows (keeping age in year)\n\nInorder to build a generalized predictive model, it's better drop these rows. <br>\nSlight change in days of a person's age should not be taken into consideration for determing CVD, provided we have other features that we'll be far valueable than this.","1e4524cb":"Feel free to refer the concepts explained above to understand this distribution","512ce0cf":"If you are wondering what's Cross - Validation is the it's :\n<br>\n<img  src=\"https:\/\/scikit-learn.org\/stable\/_images\/grid_search_cross_validation.png\" alt=\"FDR\" width=\"600\" height=\"400\"\/>\n<br>\nBasically, dataset is divided in k equal parts. Then one of that part is used as test part and other for training. <br>\nAnd this step is repeated until every K-fold serve as the test set.\n\n# Why Cross Validation?\n\n> * Well, if we use train_test_split, then we get our accuracy according to the split of the data. \n> * If we change re-split in different order, then we'll get another new accuracy ( you can try yourself too in your kernels just by changing random_state defined in train_test_split (sklearn)\n> * In order to get an exact idea of the accuracy, we use Cross Validation"}}