{"cell_type":{"f8a4e152":"code","b9a86e24":"code","060880d3":"code","802bd530":"code","f0712734":"code","cff3b8a1":"code","a7d701e3":"code","3b2a235d":"code","c9c9084f":"code","5448d811":"code","00e8a9a7":"code","379b3311":"code","32c8a2a5":"code","49cbd760":"code","8ae2fc13":"code","985ec473":"code","c6db4cb9":"code","ba539b41":"code","42d16fa7":"code","2b14e16f":"markdown","f022171b":"markdown","03593544":"markdown","fc3eca19":"markdown","0862dfbe":"markdown","c721cc8f":"markdown","698917bb":"markdown","9f2943c4":"markdown","2f199ade":"markdown"},"source":{"f8a4e152":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom itertools import cycle, islice\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9a86e24":"interactions = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/interactions.csv')\n\ninteractions.head().append(interactions.tail())","060880d3":"interactions.info()","802bd530":"print(f\"min interactions date: {interactions['start_date'].min()}\")\nprint(f\"max interactions date: {interactions['start_date'].max()}\")","f0712734":"items = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/items.csv')\n\nitems.head().append(items.tail())","cff3b8a1":"items.info()","a7d701e3":"users = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/users.csv')\n\nusers.head().append(users.tail())","3b2a235d":"users.info()","c9c9084f":"submission = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/sample_submission.csv')\nsubmission.head()","5448d811":"print(submission.shape)\nprint(submission['Id'].nunique())","00e8a9a7":"class PopularRecommender():\n    def __init__(self, max_K=100, days=30, item_column='item_id', dt_column='date'):\n        self.max_K = max_K\n        self.days = days\n        self.item_column = item_column\n        self.dt_column = dt_column\n        self.recommendations = []\n        \n    def fit(self, df):\n        min_date = df[self.dt_column].max().normalize() - pd.DateOffset(days=self.days)\n        self.recommendations = df.loc[df[self.dt_column] > min_date, self.item_column].value_counts().head(self.max_K).index.values\n    \n    def recommend(self, users=None, N=10):\n        recs = self.recommendations[:N]\n        if users is None:\n            return recs\n        else:\n            return list(islice(cycle([recs]), len(users)))","379b3311":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u0442\u044b \u0432 datetime \u0444\u043e\u0440\u043c\u0430\u0442\ninteractions['start_date'] = pd.to_datetime(interactions['start_date'])","32c8a2a5":"# \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\npop = PopularRecommender(days=30, dt_column='start_date')\npop.fit(interactions)","49cbd760":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 user id \u0438\u0437 submission\npred_pop = pd.DataFrame({'user_id': submission['Id'].unique()})\n\n# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0441\u0440\u0430\u0437\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 id\npred_pop['item_id'] = pop.recommend(pred_pop['user_id'], N=10)\npred_pop.head()","8ae2fc13":"# \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0432 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0438 \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0440\u0430\u043d\u043a\n# \u0440\u0430\u043d\u043a = \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\npred_pop = pred_pop.explode('item_id')\npred_pop.head()","985ec473":"pred_pop['rank'] = pred_pop.groupby('user_id').cumcount() + 1\npred_pop.head()","c6db4cb9":"def make_submission(df, id_col='user_id', predicted_col='item_id'):\n    \n    df_copy = df.copy()\n    df_copy.loc[:, id_col] = df_copy[id_col].astype(str)\n    df_copy.loc[:, predicted_col] = df_copy[predicted_col].astype(str)\n    df_copy = df_copy.groupby(id_col, as_index=False).agg({predicted_col: lambda x: ' '.join(list(x))})\n    df_copy.rename(columns={id_col: 'Id', predicted_col: 'Predicted'}, inplace=True)\n    \n    return df_copy[['Id', 'Predicted']]","ba539b41":"submission_pop = make_submission(pred_pop)\nsubmission_pop.head()","42d16fa7":"submission_pop.to_csv('submission_pop.csv', index=False)","2b14e16f":"### \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0441 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c\u0438 \u0432 \u043d\u0443\u0436\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430","f022171b":"# \u0411\u0435\u0439\u0437\u043b\u0430\u0439\u043d \u2116 1 - \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0432\u0441\u0435\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u043d\u0438\u0433\u0438","03593544":" \u042d\u0442\u043e\u0442 \u0441\u0430\u0431\u043c\u0438\u0442 \u043e\u0442\u0440\u0430\u0436\u0435\u043d \u043d\u0430 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435 \u043a\u0430\u043a `popular_baseline`","fc3eca19":"### \u041a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \n- \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0442\u0441\u0442\u0432\u0438\u044f \n- \u0432\u044b\u0434\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0430\u0439\u0442\u0435\u043c\u043e\u0432 \n- \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0434\u043d\u0435\u0439 (days)\n\n\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a https:\/\/www.kaggle.com\/sharthz23\/metrics-validation-strategies-and-baselines","0862dfbe":"### `users`\n\n\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445\n\n- `user_id` - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, int64\n- `age` - \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0438\u0434\u0430 \"M_N\"\n- `sex` - \u043f\u043e\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, 1\/0","c721cc8f":"# \ud83d\udcdd \u0414\u0430\u043d\u043d\u044b\u0435 \n\n\n\n### `interactions` \n\n\u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u043d\u0438\u0433\n\n- `user_id` - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, int64\n- `item_id` - ID \u043a\u043d\u0438\u0433\u0438, int64\n- `progress` - \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u043f\u043e \u0447\u0442\u0435\u043d\u0438\u044e \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445, int8\n- `rating` - \u0440\u0435\u0439\u043d\u0442\u0438\u043d\u0433 \u043a\u043d\u0438\u0433\u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c, \u043e\u0442 1 \u0434\u043e 5, \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n- `start_date` - \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0442\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c","698917bb":"# \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0430\u0431\u043c\u0438\u0442\u0430\n\n\u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0438","9f2943c4":"### `items` \n\n\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0430\u0445\n\n- `item_id` - ID \u043a\u043d\u0438\u0433\u0438, int64\n- `title` - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0441\u0442\u0440\u043e\u043a\u0430\n- `genres` - \u0436\u0430\u043d\u0440\u044b, \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c ','\n- `authors` - \u0430\u0432\u0442\u043e\u0440\u044b, \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c ','\n- `year` - \u0433\u043e\u0434 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438, \u0441\u0442\u0440\u043e\u043a\u0430 (\u043d\u0430\u0439\u0434\u0438\u0442\u0435, \u043f\u043e\u0447\u0435\u043c\u0443 \ud83e\udd14)\n","2f199ade":"# \ud83e\udd13 \u041f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432:\n    \n- \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043a\u043d\u0438\u0433\n- \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\n- \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u043f\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443    "}}