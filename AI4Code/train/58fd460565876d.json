{"cell_type":{"82cb6ce9":"code","f778e06e":"code","49d74941":"code","159fa5e0":"code","547cd60e":"code","23d4b48d":"code","ebe8f2bd":"code","2fe8f4d0":"code","9ac73fcf":"markdown"},"source":{"82cb6ce9":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M","f778e06e":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","49d74941":"def preprocess(df):\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp': 0, 'ctl_vehicle': 1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n    del df['sig_id']\n    return df\n\ntrain = preprocess(train_features)\ntest = preprocess(test_features)\n\ndel train_targets['sig_id']","159fa5e0":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss","547cd60e":"def create_model():\n    model = tf.keras.Sequential([\n    tf.keras.layers.Input(len(list(train_features.columns))),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dense(2048, activation=\"relu\"),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(2048, activation=\"relu\"),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(206, activation=\"sigmoid\")\n    ])\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=[\"accuracy\",\"binary_crossentropy\"])\n    return model","23d4b48d":"ss.loc[:, train_targets.columns] = 0\nres = train_targets.copy()\nfor n, (tr, te) in enumerate(KFold(n_splits=5, random_state=0, shuffle=True).split(train_targets)):\n    print(f'Fold {n}')\n    \n    model = create_model()\n    \n    model.fit(train.values[tr],\n              train_targets.values[tr],\n              epochs=13, batch_size=128,\n             )\n    \n    ss.loc[:, train_targets.columns] += model.predict(test_features)\n    res.loc[te, train_targets.columns] = model.predict(train.values[te])\n    print('')\n    \nss.loc[:, train_targets.columns] \/= (n+1)\n\nmetrics = []\nfor _target in train_targets.columns:\n    metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\n","ebe8f2bd":"print(f'OOF Metric: {np.mean(metrics)}')","2fe8f4d0":"ss.to_csv('submission.csv', index=False)","9ac73fcf":"Just switch https:\/\/www.kaggle.com\/stanleyjzheng\/baseline-nn-with-k-folds model to multilabel with small changes."}}