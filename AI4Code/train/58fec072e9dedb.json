{"cell_type":{"af481780":"code","f1f97c43":"code","1e2453dd":"code","b102bb98":"code","c344d320":"code","cf916963":"code","7487ec8f":"code","19aab3ae":"code","1b3ea831":"code","04e9d5f0":"code","48b6a8a5":"code","58541ac4":"code","efd264fc":"code","67ebcafe":"code","f33f942a":"code","ab51585d":"code","f1734ac3":"code","03c085c8":"code","89375592":"markdown","4f20b7c3":"markdown","22705273":"markdown","ebe7493c":"markdown","97a3f8b9":"markdown","56c1d265":"markdown","2d573618":"markdown","c63598a0":"markdown","5d68136f":"markdown","8d9b9c23":"markdown","a31ae6cb":"markdown"},"source":{"af481780":"import matplotlib.pyplot as plt","f1f97c43":"plt.plot([1,2,3,2.5]) #Default is lineplot\nplt.show()","1e2453dd":"plt.plot([1, 2, 3, 4], [1, 4, 9, 16])  # first parameter is x, second is y\nplt.show()","b102bb98":"plt.plot([1, 2, 3, 4], [10, 20, 25, 30]) # makes a line plot\nplt.scatter([0.6, 3.8, 1.2, 2.5], [11, 25, 9, 26])  # makes a scatter plot\nplt.show()","c344d320":"import numpy as np\n\nx = np.linspace(-4,4)  # default num = 50 values\ny1, y2, y3, y4 = x**2, x**3, x**4, x**5","cf916963":"# Object Oriented Interface\nfig, ax = plt.subplots()\nax.plot(x, y1, 'red')\nax.plot(x, y2, 'blue')\nfig.show()","7487ec8f":"# create a figure object with with 4 subplots as 2 by 2\nfig, ax = plt.subplots(nrows=2,ncols=2)\nfig.show()","19aab3ae":"fig, axes = plt.subplots(nrows=2, ncols=2)\naxes[0,0].set_title('Upper Left')\naxes[0,1].set_title('Upper Right')\naxes[1,0].set_title('Lower Left')\naxes[1,1].set_title('Lower Right')\n\naxes[0,0].plot(x, y1, 'red')\naxes[0,1].plot(x, y2, 'blue')\naxes[1,0].plot(x, y3, 'green')\naxes[1,1].plot(x, y4, 'orange')\n\nfig.tight_layout();  # this reduces the space in between the subplots","1b3ea831":"X_line,Y_line = [1, 2, 3, 4],[10, 20, 25, 30]\nX_scatter,Y_scatter = [0.6, 3.8, 1.2, 2.5], [11, 25, 9, 26]","04e9d5f0":"fig, ax = plt.subplots()\n\nax.plot(X_line,Y_line,'red',label='Line')\nax.scatter(X_scatter,Y_scatter ,c='green',label='Scatter') \nax.set_title('Demonstration of customization') # To set title\nax.set_xlabel('X-AXIS') # Set X-AXIS label\nax.set_ylabel('Y-AXIS') # Set Y-AXIS label\nax.legend() # To show label\nfig.show()","48b6a8a5":"fig, ax = plt.subplots()\n\nax.plot(X_line,Y_line,'red',label='Line',marker='o') # To set marker\nax.scatter(X_scatter,Y_scatter ,c='green',label='Scatter',marker='^') # To set marker\nax.grid() # To set grid\nfig.show()","58541ac4":"fig, ax = plt.subplots()\n\nax.plot(X_line,Y_line,'red',label='Line',marker='o') \nax.scatter(X_scatter,Y_scatter ,c='green',label='Scatter',marker='^') \n\nfor n,scatter_annot in enumerate(zip(X_scatter,Y_scatter),1):\n  ax.annotate('Scatter ' + str(n) , xy = (scatter_annot[0],scatter_annot[1]+0.3)) # To annotate data points\n\n\nfig.show()\n","efd264fc":"fig, ax = plt.subplots(figsize=(10,6)) # To set figure size\n\nax.scatter(X_line,Y_line,c='red',label='Scatter 1',marker='o') \nax.scatter(X_scatter,Y_scatter ,c='green',label='Scatter 2',marker='^') \n\nax.set_xlim(0,5) # To set x Limit\nax.set_ylim(0,40) # To set y Limit\n\nax.set_xticks(range(0,6)) # To set x ticks\nax.set_yticks(range(0,40,4)) # To set y ticks\n\nax.legend(loc='upper left') # To set location of legend\nfig.show()","67ebcafe":"x = np.linspace(-np.pi, np.pi, 200)\nsine, cosine = np.sin(x), np.cos(x)","f33f942a":"fig, ax = plt.subplots()\nax.plot(x, sine, color='red', linestyle='--', linewidth=1.2)\nax.plot(x, cosine, color='#110013', linestyle=':', linewidth=4)\nfig.show()","ab51585d":"# Top 10 countries in the Rio Olympics\ncountries = ['USA','GBR','CHN','RUS','GER','JPN','FRA','KOR','ITA','AUS']\ngold = [46,27,26,19,17,12,10,9,8,8]\nsilver = [37,23,18,18,10,8,18,3,12,11]\nbronze = [38,17,26,19,15,21,14,9,8,10]","f1734ac3":"fig, ax = plt.subplots(figsize=(11,5.5))\nax.bar(np.arange(10), gold, color=\"#FFDF00\", width=0.4, label='Gold')\nax.bar(np.arange(10)+0.4, silver, color=\"#C0C0C0\", width=0.4, label='Silver')\n\nax.set_xticks(np.arange(0.2,10.2, 1))\nax.set_xticklabels(countries)\n\nfor x,g,s in zip(np.arange(10), gold, silver):\n    ax.text(x-0.1, g+0.5, g) # annotating the golds\n    ax.text(x+0.3, s+0.5, s) # annotating the silvers\n\nax.set_title('Gold and Silver Medals at Rio', size=16)\nax.set_xlabel('Country', size=14)\nax.set_ylabel('Number of medals', size=14)\nax.legend(loc='upper right');","03c085c8":"iqs = np.random.normal(loc=100, scale=10, size=300)\n# np.random.normal produces a normal distribution around 100 of 300 points\n# scale = 10 means standard deviation \n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,4))\n\nax[0].hist(iqs, bins=28, edgecolor='k')\nax[0].set_title('Frequency histogram')\n    \nax[1].hist(iqs, bins=18, color = 'red', edgecolor='k', density=True)\nax[1].set_title('Density (normed) histogram');\n","89375592":"# **Anatomy of a \"Plot\"**\n\n<img src=\"https:\/\/drive.google.com\/uc?id=1Z1PRQAkr3FKRbH7YN4tfbIx-NWP_kPw5\" width='450' height='380'\/>\n","4f20b7c3":"# **Line Charts**\n\nA line chart or line graph is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments. This type of chart is used to plot time-series data, mathematical functions or continous relashionships between variables.","22705273":"# **Object Oriented Interface (OOI) vs pyplot**","ebe7493c":"## **Object Oriented Interface**\n\nWhat you do when plotting with the object oriented interface, is to create the objects and then call methods for every object to make changes specifically to that object. The `plt.subplots` function creates a figure object and an Subplot (Axes) object at the same time, then we can create a plot by calling methods on those objects.","97a3f8b9":"# **Histograms**\n\nA histogram is a graphical representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable (quantitative variable). It is a kind of bar graph. To construct a histogram, the first step is to \"bin\" the range of values, that is, divide the entire range of values into a series of intervals, and then count how many values fall into each interval. The bins are usually specified as consecutive, non-overlapping intervals of a variable. The bins (intervals) must be adjacent, and are often (but are not required to be) of equal size.\n\nHistograms give a rough sense of the density of the underlying distribution of the data.","56c1d265":"<font color='red'><b>The usefulness of the OOI is clearer when working with multiple subplots in one figure.<\/b><\/font> We've mentioned before that a figure can have more than one `Axes` on it.  If you want your axes to be on a regular grid system, then it's easiest to use `plt.subplots(...)` to create a figure and add the axes to it automatically.","2d573618":"# **Bar plots**\n\nA bar chart or bar graph is a chart or graph that presents data with rectangular bars with lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally.\n\nThis type of graph can also be used to show comparisons among categories. One axis of the chart shows the specific categories being compared, and the other axis represents a discrete value. Some bar graphs present bars clustered in groups of more than one.","c63598a0":"# Matplotlib\n\n<img src=\"https:\/\/drive.google.com\/uc?id=1Mt-X1TIyO2mbE9sl3Qw-UQ4hgJpQPxig\" width='550' height='300'\/>\n\n\n**Matplotlib** is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python interpreter and IPython shell, the jupyter notebook, web application servers, and graphical user interface toolkits.\n\nMatplotlib tries to make easy things easy and hard things possible. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and other extension code to provide good performance even for large arrays.","5d68136f":"## **Pyplot**\n\n`matplotlib.pyplot` is a collection of command style functions. Each pyplot function makes some change to a figure: e.g. creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. ","8d9b9c23":"**Linestyles**: are commonly used to distinguish between lines. There are a few predefined linestyles available to use. Note that there are some advanced techniques to specify some custom line styles. [Here](http:\/\/matplotlib.org\/1.3.0\/examples\/lines_bars_and_markers\/line_demo_dash_control.html) is an example of a custom dash pattern.\n\nlinestyle          | description\n-------------------|------------------------------\n'-'                | solid\n'--'               | dashed\n'-.'               | dashdot\n':'                | dotted\n'None'             | draw nothing\n' '                | draw nothing\n''                 | draw nothing","a31ae6cb":"# **Customization**"}}