{"cell_type":{"fd15ed16":"code","cea18a4e":"code","789295e0":"code","da0fa9b9":"code","e4fbef5f":"code","3a8187ab":"code","adfea2fd":"code","fdc1d6fb":"code","bf2fcf04":"code","5e79ac3c":"code","12e4854a":"code","2308e3b0":"code","1e302ff8":"code","0d9bde5d":"code","3381aeca":"code","557929f1":"code","1174be65":"code","dfb85c93":"code","1aad92b8":"code","1229197c":"code","f6dcf7a0":"code","064f844d":"code","a823f22d":"code","cef618b8":"code","e0022c93":"code","f7330d93":"code","c240f600":"code","19a8887b":"code","6b2dc896":"code","4fc1165f":"code","ae5a9879":"code","88ea96a9":"code","785af767":"code","1e929e7e":"markdown","11ac8e2d":"markdown"},"source":{"fd15ed16":"!pip install openpyxl\n!pip install seaborn==0.11.0 \n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport openpyxl\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport missingno\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#matplotlib inline\nimport re\n\n# Encoders\nfrom category_encoders import TargetEncoder\nfrom sklearn.preprocessing import LabelEncoder\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# Strategic imports\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.model_selection import GridSearchCV, train_test_split, RepeatedStratifiedKFold, cross_val_score\nfrom sklearn.model_selection import StratifiedKFold, StratifiedShuffleSplit\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\n# Machine learning Models\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import StackingClassifier, VotingClassifier\n\n# imports to mute warnings\npd.options.display.max_rows=200\npd.set_option('mode.chained_assignment', None)\n\nfrom warnings import simplefilter\nfrom sklearn.exceptions import ConvergenceWarning\nsimplefilter(\"ignore\", category=ConvergenceWarning)\nsimplefilter(\"ignore\", category=RuntimeWarning)\n\nimport os\nfolder_path = '..\/input\/titanic'\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\ngender_submission_df = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","cea18a4e":"gender_submission_df.head()","789295e0":"train_df.head()","da0fa9b9":"test_df.head()","e4fbef5f":"print(test_df.shape)","3a8187ab":"print(gender_submission_df.shape)","adfea2fd":"print(train_df.shape)","fdc1d6fb":"print(test_df.columns)","bf2fcf04":"print(test_df.info())","5e79ac3c":"print(train_df.info())","12e4854a":"test_df.describe()","2308e3b0":"gender_submission_df.describe()","1e302ff8":"train_df.sort_values(by=\"Ticket\", ascending=False).head()","0d9bde5d":"test_df.sort_values(by=\"Ticket\", ascending=True).head()","3381aeca":"test_df.corr()","557929f1":"gender_submission_df.corr()","1174be65":"test_df.dropna()","dfb85c93":"train_df.isna()","1aad92b8":"test_df.isna().sum()","1229197c":"train_df.isna().sum()","f6dcf7a0":"def numeric_eda1(test_df, hue=None):\n    \"\"\"Given dataframe, generate EDA of numeric data\"\"\"\n    print(\"\\nTo check: \\nDistribution of numeric data\")\n    display(test_df.describe().T)\n    columns = test_df.select_dtypes(include=np.number).columns\n    figure = plt.figure(figsize=(20, 10))\n    figure.add_subplot(1, len(columns), 1)\n    for index, col in enumerate(columns):\n        if index > 0:\n            figure.add_subplot(1, len(columns), index + 1)\n        sns.boxplot(y=col, data=test_df, boxprops={'facecolor': 'None'})\n    figure.tight_layout()\n    plt.show()\n    \n     # Plot the pairwise joint distributions\n    print(\"\\nTo check pairwise joint distribution of numeric data\")\n    if hue==None:\n        sns.pairplot(test_df.select_dtypes(include=np.number))\n    else:\n        sns.pairplot(test_df.select_dtypes(include=np.number).join(test_df[[hue]]), hue=hue)\n    plt.show()   \n\ndef categorical_eda1(test_df, hue=None):\n    \"\"\"Given dataframe, generate EDA of categorical data\"\"\"\n    print(\"\\nTo check: \\nUnique count of non-numeric data\\n\")\n    print(test_df.select_dtypes(include=['object', 'category']).nunique())\n    # Plot count distribution of categorical data\n    for col in test_df.select_dtypes(include='category').columns:\n        fig1 = sns.catplot(x=col, kind=\"count\", data=test_df, hue=hue)\n        fig1.set_xticklabels(rotation=90)\n        plt.show()\n\ndef eda1(test_df):\n    \"\"\"Given dataframe, generate exploratory data analysis\"\"\"\n    # check that input is pandas dataframe\n    if type(test_df) != pd.core.frame.DataFrame:\n        raise TypeError(\"Only pandas dataframe is allowed as input\")\n        \n    # replace field that's entirely space (or empty) with NaN\n    test_df = test_df.replace(r'^\\s*$', np.nan, regex=True)\n    print(\"Preview of data:\")\n    #display(df.head.unique())\n    display(test_df.head(40))\n    print(\"\\nTo check: \\n (1) Total number of entries \\n (2) Column types \\n (3) Any null values\\n\")\n    print(test_df.info())\n\n    # generate count statistics of duplicate entries\n    if len(test_df[test_df.duplicated()]) > 0:\n        print(\"\\n***Number of duplicated entries: \", len(test_df[test_df.duplicated()]))\n        display(test_df[test_df.duplicated(keep=False)].sort_values(by=list(test_df.columns)).head())\n    else:\n        print(\"\\nNo duplicated entries found\")\n\n    # EDA of categorical data\n    categorical_eda1(test_df)\n    \n    # EDA of numeric data\n    numeric_eda1(test_df)#hue='City_name')\n        \n    # Plot time series plot of numeric data\n    #time_series_plot(df)","064f844d":"eda1(test_df)","a823f22d":"# seaborn color palettes we will be using \n\npalette_1 = sns.color_palette('Accent', 6)\npalette_2 = sns.color_palette('Set1', 6)\npalette_3 = sns.color_palette('BrBG')\npalette_4 = sns.color_palette('CMRmap')\npalette_5 = sns.color_palette('Paired', 6)\npalette_6 = sns.color_palette('RdYlBu')\npalette_binary_1 = sns.color_palette('Accent_r', 2)\npalette_binary_2 = sns.color_palette('Set1', 2)\npalette_binary_3 = sns.color_palette('Set2', 2)\n\nplt.style.use('fivethirtyeight')","cef618b8":"train_df = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')","e0022c93":"plt.figure(figsize=(12, 8))\nsns.set(font_scale=1.5)\nsns.set_style('white')\n\ncorr = train_df.corr()\n\n# Generate a mask for the upper triangle\n#mask = np.triu(np.ones_like(corr, dtype=bool))\n\nsns.heatmap(corr, cmap='coolwarm', annot=True, annot_kws={'size':15})\nplt.show()","f7330d93":"plt.figure(figsize=(12, 8))\nsns.set(font_scale=1.5)\nsns.set_style('white')\n\ncorr = gender_submission_df.corr()\n\n# Generate a mask for the upper triangle\n#mask = np.triu(np.ones_like(corr, dtype=bool))\n\nsns.heatmap(corr, cmap='coolwarm', annot=True, annot_kws={'size':15})\nplt.show()","c240f600":"plt.figure(figsize=(15, 8))\nplt.style.use('fivethirtyeight')\n#sns.set_style('ticks')\nPROPS = {\n    'boxprops':{'facecolor':'none', 'edgecolor':'black', 'linewidth':0.3},\n    'medianprops':{'color':'black', 'linewidth':1.5},\n    'whiskerprops':{'color':'black', 'linewidth':0.3},\n    'capprops':{'color':'black', 'linewidth':0.3},\n}\n\nsns.boxplot(x='Pclass', data=test_df, y='Age', hue='Sex', showfliers=False,  **PROPS)\nsns.stripplot(data=test_df, x='Pclass', hue='Sex', y='Age', palette=palette_binary_3, dodge=True)\n\nsns.despine()\nplt.legend(loc='upper right')\nplt.show()","19a8887b":"temp = train_df.copy()\ntemp['Cabin'] = temp.Cabin.str.extract(pat='([A-Z])')\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 8))\nplt.style.use('fivethirtyeight')\n\nsns.countplot(data=temp, x='Cabin', hue='Pclass', ax=ax[0], palette=palette_1)\nax[0].set_title('Pclass-Cabin Proportions', x=0.28, y=1.04, size=25)\n\ntemp.Cabin.fillna('missing', inplace=True)\ntemp_missing = temp.loc[temp.Cabin == 'missing']\n\nsns.countplot(data=temp_missing, x='Cabin', hue='Pclass', palette=palette_1)\nax[1].set_title('Missing Cabin proportions', x=0.27, y=1.04, size=25)\n\nsns.despine()\nplt.show()","6b2dc896":"temp = train_df.copy()\ntemp['Cabin'] = temp.Cabin.str.extract(pat='([A-Z])')\ntemp.Cabin.fillna('missing', inplace=True)\n\nsns.set(font_scale=1.4)\nplt.style.use('fivethirtyeight')\n\nfig, ax = plt.subplots(2, 2, figsize=(16, 17))\nsns.countplot(data=temp, x='Cabin', hue='Pclass', ax=ax[0, 0], palette=palette_5)\nax[0, 0].set_title('Cabin-Pclass proportions', x=0.28, y=1.04, size=25)\n\n\n\ntemp.Cabin.replace({'A':'ABC', 'B':'ABC', 'C':'ABC', \n                    'D':'DE', 'E':'DE', 'F':'FG', \n                    'G':'FG', 'T':'ABC', 'missing':'M'}, inplace=True)\n\n\nsns.countplot(data=temp, x='Cabin', hue='Pclass', ax=ax[0, 1], palette=palette_5)\nax[0, 1].set_title('Deck-Pclass Proportions', x=0.27, y=1.04, size=25)\nax[0, 1].set_xlabel('Deck', size=18)\n\n\n\n\nsns.barplot(data=temp, x='Cabin', y='Survived', hue='Pclass', ax=ax[1, 0], palette=palette_5)\nax[1, 0].set_title('Deck Survival rate', x=0.18, y=1.02, size=25)\nax[1, 0].set_xlabel('Deck', size=18)\n\n\nsns.barplot(data=temp, x='Cabin', y='Fare', hue='Pclass', ax=ax[1, 1], palette=palette_5)\nax[1, 1].set_title('Deck Fare', x=0.1, y=1.02, size=25)\nax[1, 1].set_xlabel('Deck', size=18)\n\nsns.despine()\nplt.show()\n","4fc1165f":"def imputer(df):\n    \n    # imputing missing age values\n    \n    age_impute_series = df.groupby(['Pclass', 'Sex']).Age.transform('mean')\n    df.Age.fillna(age_impute_series, inplace=True)\n    \n    # imputing Cabin missing value.\n    df.Cabin = df.Cabin.str.extract(pat='([A-Z])')\n    \n    df.Cabin.fillna('M', inplace=True)\n    \n    df['Deck'] = df.Cabin.replace({'A':'ABC', 'B':'ABC', 'C':'ABC', 'D':'DE', 'E':'DE', 'F':'FG', \n                                   'G':'FG', 'T':'ABC'}) # we will drop the Cabin here and only take Deck from here on with us!!\n    \n    df.drop('Cabin', axis=1, inplace=True)\n    \n    # lets just finally fill all the left over missig value with the mode of the feature.\n    for feature in df.columns:\n        df[feature].fillna(df[feature].mode()[0], inplace=True)\n        \n    return df","ae5a9879":"train_df_imputed = imputer(train_df.copy())\ntest_df_imputed = imputer(test_df.copy())","88ea96a9":"cat_features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Deck', 'Embarked']\n\nplt.figure(figsize=(16, 14))\nsns.set(font_scale= 1.2)\nplt.style.use('fivethirtyeight')\n\nfor i, feature in enumerate(cat_features):\n    plt.subplot(2, 3, i+1)\n    sns.countplot(data=train_df_imputed, x=feature, hue='Survived', palette=palette_6)  \n    \nsns.despine()","785af767":"num_features = ['Fare', 'Age']\nplt.style.use('fivethirtyeight')\n\nplt.figure(figsize=(16, 14))\nfor i, feature in enumerate(num_features):\n    plt.subplot(2, 2, i+1)\n    plt.hist(x=[train_df_imputed[feature][train_df_imputed['Survived'] == 1], train_df_imputed[feature][train_df_imputed['Survived']==0]],\n            stacked=True, label=['Survived', 'Not Survived'], bins=20, color=['orange', 'b'])\n    plt.legend()\n    plt.xlabel(f'{feature}', fontsize=15)\n    plt.ylabel('Count', fontsize=15)\n\nfor i, feature in enumerate(num_features):\n    plt.subplot(2, 2, i+3)\n    sns.kdeplot(data=train_df_imputed, x=feature, hue='Survived', fill=True, palette=palette_binary_3)\n    \nsns.despine()","1e929e7e":"num_features = ['Fare', 'Age']\nplt.style.use('fivethirtyeight')\n\nplt.figure(figsize=(16, 14))\nfor i, feature in enumerate(num_features):\n    plt.subplot(2, 2, i+1)\n    plt.hist(x=[train_df_imputed[feature][train_imputed['Survived'] == 1], train_imputed[feature][train_imputed['Survived']==0]],\n            stacked=True, label=['Survived', 'Not Survived'], bins=20, color=['orange', 'b'])\n    plt.legend()\n    plt.xlabel(f'{feature}', fontsize=15)\n    plt.ylabel('Count', fontsize=15)\n\nfor i, feature in enumerate(num_features):\n    plt.subplot(2, 2, i+3)\n    sns.kdeplot(data=train_imputed, x=feature, hue='Survived', fill=True, palette=palette_binary_3)\n    \nsns.despine()","11ac8e2d":"**Exploratory Data Analysis**"}}