{"cell_type":{"841f0cf8":"code","4244e7e5":"code","20ba1e4e":"code","41d6a1b8":"code","e61483ac":"code","f90ca0c4":"code","2d686e16":"code","5430e5ef":"markdown","69df98af":"markdown","3a039417":"markdown","a4ab8045":"markdown"},"source":{"841f0cf8":"from sklearn.datasets import make_blobs\nfrom scipy.stats import norm\nfrom numpy import mean\nfrom numpy import std\n","4244e7e5":"def fit_distribution(data):\n    mu = mean(data)\n    sigma = std(data)\n    print(mu, sigma)\n    dist = norm(mu, sigma)\n    return dist","20ba1e4e":"# generate 2d classification dataset\nX, y = make_blobs(n_samples=100, centers=2, n_features=2, random_state=1)\n# sort data into classes\nXy0 = X[y == 0]\nXy1 = X[y == 1]\nprint(Xy0.shape, Xy1.shape)","41d6a1b8":"priory0 = len(Xy0) \/ len(X) #p(y=0)\npriory1 = len(Xy1) \/ len(X) #p(y=1)\nprint(priory0, priory1)","e61483ac":"distX1y0 = fit_distribution(Xy0[:, 0])\ndistX2y0 = fit_distribution(Xy0[:, 1])\ndistX1y1 = fit_distribution(Xy1[:, 0])\ndistX2y1 = fit_distribution(Xy1[:, 1])","f90ca0c4":"def probability(X, prior, dist1, dist2):\n    return prior * dist1.pdf(X[0]) * dist2.pdf(X[1])\n ","2d686e16":"Xpredict, ypredict = X[15], y[15]\nprob_0 = probability(Xpredict, priory0, distX1y0, distX2y0)\nprob_1 = probability(Xpredict, priory1, distX1y1, distX2y1)\nclass_label = 0 if prob_0>prob_1 else 1\nprint(f'predict label:{class_label}')\nprint(f'True label: y={ypredict}')","5430e5ef":"# Predictions","69df98af":"# Importing the libraries","3a039417":"# Generating Dataset","a4ab8045":"# Defining the training function"}}