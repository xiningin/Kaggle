{"cell_type":{"aab2e2d9":"code","388146d4":"code","e9234941":"code","5e87fb49":"code","f3d5616f":"code","c81d419a":"code","921829e0":"code","cb38fae2":"code","9d97bef9":"code","8ed63aa1":"markdown","e31be232":"markdown","fab559e7":"markdown","cb30c308":"markdown","34e31be1":"markdown","b830c40e":"markdown","1a9056c2":"markdown","f1bfbb4c":"markdown","ad347764":"markdown"},"source":{"aab2e2d9":"!pip install mtcnn","388146d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport cv2 as cv2\nfrom cv2 import CascadeClassifier, rectangle\nfrom cv2 import destroyAllWindows\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.patches import Rectangle, Circle\nfrom mtcnn.mtcnn import MTCNN\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e9234941":"images_dir = '..\/input\/face-mask-detection\/images\/'","5e87fb49":"from IPython.display import YouTubeVideo\n\nYouTubeVideo('w4tigQn-7Jw', width = 450)","f3d5616f":"filename = '..\/input\/face-mask-detection\/images\/maksssksksss1.png'\npixels = cv2.imread(filename)\n\n#creating a detector with default weights\ndetector = MTCNN()\n\nfaces = detector.detect_faces(pixels)\n\nfor face in faces:\n    print(face)","c81d419a":"def draw_image_with_boxes(filename, result_list):\n    # load the image\n    data = pyplot.imread(filename)\n    # plot the image\n    plt.imshow(data)\n    # get the context for drawing boxes\n    ax = pyplot.gca()\n    # plot each box\n    for result in result_list:\n        # get coordinates\n        x, y, width, height = result['box']\n        # create the shape\n        rect = Rectangle((x, y), width, height, fill=False, color='red')\n        # draw the box\n        ax.add_patch(rect)\n        # draw the dots on eyes nose ..\n        for key, value in result['keypoints'].items():\n            # create and draw dot\n            dot = Circle(value, radius=2, color='red')\n            ax.add_patch(dot)\n    # show the plot\n    pyplot.show()","921829e0":"filename = '..\/input\/face-mask-detection\/images\/maksssksksss10.png'\npixels = cv2.imread(filename)\n# create the detector, using default weights\ndetector = MTCNN()\n# detect faces in the image\nfaces = detector.detect_faces(pixels)\n# display faces on the original image\ndraw_image_with_boxes(filename, faces)","cb38fae2":"filename = '..\/input\/face-mask-detection\/images\/maksssksksss121.png'\npixels = cv2.imread(filename)\n# create the detector, using default weights\ndetector = MTCNN()\n# detect faces in the image\nfaces = detector.detect_faces(pixels)\n# display faces on the original image\ndraw_image_with_boxes(filename, faces)","9d97bef9":"def draw_faces(filename, result_list):\n    #loading the image\n    data = cv2.imread(filename)\n    \n    # plot each face as subplot\n    for i in range(len(result_list)):\n        x1, y1, width, height = result_list[i]['box']\n        x2, y2 = x1 + width, y1 + height\n        \n        #define subplot\n        plt.subplot(1, len(result_list), i+1)\n        plt.axis('off')\n        \n        plt.imshow(data[y1:y2, x1:x2])\n    \n    pyplot.show()\n\n    \nfilename = '..\/input\/face-mask-detection\/images\/maksssksksss121.png'\npixels = cv2.imread(filename)\n# create the detector, using default weights\ndetector = MTCNN()\n# detect faces in the image\nfaces = detector.detect_faces(pixels)\n\n#Let's apply the defined function\ndraw_faces(filename, faces)","8ed63aa1":"**I have shared a clip that can help you to understand the working of MTCNN algo**","e31be232":"**I will be looking for applying Multi-task Cascade Convolutional Neural Network, or MTCNN for short**","fab559e7":"# Let's get started with MTCNN\n\n**Credits to [Dilan Jayasekara](https:\/\/towardsdatascience.com\/face-detection-with-deep-learning-using-multi-tasked-cascased-cnn-8721435531d5) for this implementation help!!**\n\n**Let us first use a sample image to show the working process of MTCNN Algorithm**\n\n![Architecture](https:\/\/miro.medium.com\/max\/700\/1*ICM3jnRB1unY6G5ZRGorfg.png)","cb30c308":"**Now, let's draw boxes around the region of interest**","34e31be1":"**Let's look at some Unmasked images as well**","b830c40e":"# Introduction\n\n**I have used Dataset for Face Masks Detection of [Larxel](https:\/\/www.kaggle.com\/andrewmvd\/face-mask-detection) for applying Computer Vision based algorithms to detect masks and unmasked faces**\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F793761%2Fd0744f78b0471c0605b98debd7b2d88d%2FUntitled.png?generation=1590132045583855&alt=media)\n\n# About The Dataset\n\n> **Masks play a crucial role in protecting the health of individuals against respiratory diseases, as is one of the few precautions available for COVID-19 in the absence of immunization. With this dataset, it is possible to create a model to detect people wearing masks, not wearing them, or wearing masks improperly.\nThis dataset contains 853 images belonging to the 3 classes, as well as their bounding boxes in the PASCAL VOC format.\nThe classes are:**\n\n> **With mask**\n\n> **Without mask**\n\n> **Mask worn incorrectly**.","1a9056c2":"# Extracting Each face\n\n**We can demonstrate this by extracting each face and plotting them as separate subplots. You could just as easily save them to file. The draw_faces() below extracts and plots each detected face in a photograph**","f1bfbb4c":"**Sample image is loaded**","ad347764":"**WORK IN PROGRESS**"}}