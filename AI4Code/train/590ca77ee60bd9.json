{"cell_type":{"1607cb29":"code","b8c4af98":"code","a0f890fd":"code","1b32c76c":"code","4f17dd47":"code","810ea534":"code","b92c877c":"code","2ce1ecec":"code","907d4090":"code","a01a332c":"code","caf97b00":"code","2b1ac63f":"code","b428a699":"code","ac859724":"code","cf2caf77":"code","ecde464d":"code","6e3b4970":"code","8adee3f5":"code","54e25c41":"code","a931fe78":"code","d511d941":"code","7215693e":"code","dc5c8f30":"code","d4d2f203":"code","7df77d7b":"code","3a65644d":"code","1e2ef9a9":"code","268881cb":"code","c2a826a7":"code","69706483":"code","392eb108":"code","1be9f7bb":"code","9478d64e":"code","f36f0b0d":"code","f35d968f":"code","8fe240f9":"code","30f32995":"code","2a5476d3":"code","ac8f3e7c":"markdown","54f77f9d":"markdown","a2ec78fb":"markdown","d214a9f3":"markdown","9566edbb":"markdown","3fa8cd70":"markdown","a2c6b04a":"markdown","6804ce07":"markdown","28a6959b":"markdown","6d8aebd3":"markdown","30c7a2a8":"markdown","f51b06eb":"markdown","b395ee5f":"markdown","a2b2bc77":"markdown","5410cab5":"markdown","dd29d818":"markdown","fbdfe284":"markdown","76f1cf57":"markdown","c7f26288":"markdown","b0d22973":"markdown","4550b399":"markdown","b518e1ba":"markdown","536502ff":"markdown"},"source":{"1607cb29":"pip install dataprep","b8c4af98":"import pandas as pd\nimport numpy as np\n\n# data visualization library \nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(context='notebook', style='darkgrid', palette='colorblind', font='sans-serif', font_scale=1, rc=None)\nmatplotlib.rcParams['figure.figsize'] =[8,8]\nmatplotlib.rcParams.update({'font.size': 15})\nmatplotlib.rcParams['font.family'] = 'sans-serif'\n","a0f890fd":"# dataprep\nfrom dataprep.eda import *\nfrom dataprep.eda.missing import plot_missing\nfrom dataprep.eda import plot_correlation","1b32c76c":"covid = pd.read_csv('..\/input\/symptoms-and-covid-presence\/Covid Dataset.csv')\ncovid","4f17dd47":"covid.info()","810ea534":"covid.describe(include='all')","b92c877c":"covid.columns","2ce1ecec":"plot_missing(covid)","907d4090":"# create a table with data missing \nmissing_values=covid.isnull().sum() # missing values\n\npercent_missing = covid.isnull().sum()\/covid.shape[0]*100 # missing value %\n\nvalue = {\n    'missing_values ':missing_values,\n    'percent_missing %':percent_missing  \n}\nframe=pd.DataFrame(value)\nframe\n","a01a332c":"sns.countplot(x='COVID-19',data=covid)","caf97b00":"covid[\"COVID-19\"].value_counts().plot.pie(explode=[0.1,0.1],autopct='%1.1f%%',shadow=True)\nplt.title('number of cases');","2b1ac63f":"sns.countplot(x='Breathing Problem',data=covid)","b428a699":"sns.countplot(x='Breathing Problem',hue='COVID-19',data=covid)","ac859724":"sns.countplot(x='Fever',hue='COVID-19',data=covid);","cf2caf77":"sns.countplot(x='Dry Cough',hue='COVID-19',data=covid)","ecde464d":"sns.countplot(x='Sore throat',hue='COVID-19',data=covid)","6e3b4970":"from sklearn.preprocessing import LabelEncoder\ne=LabelEncoder()","8adee3f5":"covid['Breathing Problem']=e.fit_transform(covid['Breathing Problem'])\ncovid['Fever']=e.fit_transform(covid['Fever'])\ncovid['Dry Cough']=e.fit_transform(covid['Dry Cough'])\ncovid['Sore throat']=e.fit_transform(covid['Sore throat'])\ncovid['Running Nose']=e.fit_transform(covid['Running Nose'])\ncovid['Asthma']=e.fit_transform(covid['Asthma'])\ncovid['Chronic Lung Disease']=e.fit_transform(covid['Chronic Lung Disease'])\ncovid['Headache']=e.fit_transform(covid['Headache'])\ncovid['Heart Disease']=e.fit_transform(covid['Heart Disease'])\ncovid['Diabetes']=e.fit_transform(covid['Diabetes'])\ncovid['Hyper Tension']=e.fit_transform(covid['Hyper Tension'])\ncovid['Abroad travel']=e.fit_transform(covid['Abroad travel'])\ncovid['Contact with COVID Patient']=e.fit_transform(covid['Contact with COVID Patient'])\ncovid['Attended Large Gathering']=e.fit_transform(covid['Attended Large Gathering'])\ncovid['Visited Public Exposed Places']=e.fit_transform(covid['Visited Public Exposed Places'])\ncovid['Family working in Public Exposed Places']=e.fit_transform(covid['Family working in Public Exposed Places'])\ncovid['Wearing Masks']=e.fit_transform(covid['Wearing Masks'])\ncovid['Sanitization from Market']=e.fit_transform(covid['Sanitization from Market'])\ncovid['COVID-19']=e.fit_transform(covid['COVID-19'])\ncovid['Dry Cough']=e.fit_transform(covid['Dry Cough'])\ncovid['Sore throat']=e.fit_transform(covid['Sore throat'])\ncovid['Gastrointestinal ']=e.fit_transform(covid['Gastrointestinal '])\ncovid['Fatigue ']=e.fit_transform(covid['Fatigue '])","54e25c41":"covid.head()","a931fe78":"covid.dtypes.value_counts()","d511d941":"covid.describe(include='all')","7215693e":"covid.hist(figsize=(20,15));","dc5c8f30":"plot_correlation(covid)","d4d2f203":"corr=covid.corr()\ncorr.style.background_gradient(cmap='coolwarm',axis=None)","7df77d7b":"covid=covid.drop('Running Nose',axis=1)\ncovid=covid.drop('Chronic Lung Disease',axis=1)\ncovid=covid.drop('Headache',axis=1)\ncovid=covid.drop('Heart Disease',axis=1)\ncovid=covid.drop('Diabetes',axis=1)\ncovid=covid.drop('Gastrointestinal ',axis=1)\ncovid=covid.drop('Wearing Masks',axis=1)\ncovid=covid.drop('Sanitization from Market',axis=1)\ncovid=covid.drop('Asthma',axis=1)","3a65644d":"covid=covid.drop('Fatigue ',axis=1)","1e2ef9a9":"corr=covid.corr()\ncorr.style.background_gradient(cmap='coolwarm',axis=None)","268881cb":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score","c2a826a7":"x=covid.drop('COVID-19',axis=1)\ny=covid['COVID-19']\n                             ","69706483":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20)","392eb108":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\n#Fit the model\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\n#Score\/Accuracy\nacc_logreg=model.score(x_test, y_test)*100\nacc_logreg","1be9f7bb":"#Train the model\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)\n#Fit\nmodel.fit(x_train, y_train)\n#Score\/Accuracy\nacc_randomforest=model.score(x_test, y_test)*100\nacc_randomforest","9478d64e":"#Train the model\nfrom sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)\n#Fit\nGBR.fit(x_train, y_train)\nacc_gbk=GBR.score(x_test, y_test)*100\nacc_gbk","f36f0b0d":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=20)\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_test)\n#Score\/Accuracy\nacc_knn=knn.score(x_test, y_test)*100\nacc_knn\n","f35d968f":"from sklearn import tree\nt = tree.DecisionTreeClassifier()\nt.fit(x_train,y_train)\ny_pred = t.predict(x_test)\n#Score\/Accuracy\nacc_decisiontree=t.score(x_test, y_test)*100\nacc_decisiontree","8fe240f9":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(x_train,y_train)\n#Score\/Accuracy\nacc_gaussian= model.score(x_test, y_test)*100\nacc_gaussian","30f32995":"#Import svm model\nfrom sklearn import svm\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n#Train the model using the training sets\nclf.fit(x_train, y_train)\n#Predict the response for test dataset\ny_pred = clf.predict(x_test)\n#Score\/Accuracy\nacc_svc=clf.score(x_test, y_test)*100\nacc_svc\n","2a5476d3":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes',   \n              'Decision Tree', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n              acc_randomforest, acc_gaussian, acc_decisiontree,\n               acc_gbk]})\nmodels.sort_values(by='Score', ascending=False)","ac8f3e7c":"## svm","54f77f9d":"### COVID-19 (target)","a2ec78fb":"#### feature that we gonna delelte :\nRunning Nose \/ Asthma \/Chronic Lung Disease \/ Headache \/ Heart Disease \/ Diabetes \/ Fatigue \/ Gastrointestinal \/ Wearing Masks \/ Sanitization from Market","d214a9f3":"## DecisionTreeClassifier","9566edbb":"like we see our data is clean 0 missing values","3fa8cd70":"# info about our data after transformation ","a2c6b04a":"# feature transformation","6804ce07":"# finding missing value","28a6959b":"## Dry Cough","6d8aebd3":"### KNeighborsClassifier","30c7a2a8":"## GradientBoostingRegressor","f51b06eb":"##  RandomForestRegressor","b395ee5f":"# data analysis","a2b2bc77":"# data vizualisation","5410cab5":"# correlation betwenn features ","dd29d818":"## Sore throat","fbdfe284":"# machine learning algo","76f1cf57":"##  naive_bayes","c7f26288":"## Logistic Regression","b0d22973":"# import library","4550b399":"## Fever","b518e1ba":"# feature selection ","536502ff":"### Breathing Problem"}}