{"cell_type":{"da40bb16":"code","6b30eee0":"code","7a0b1aea":"code","3551acc7":"code","77b7086a":"code","a0762143":"code","c5ccc005":"code","42450997":"code","29f70325":"code","25034dfe":"code","6005abbe":"code","9537e01e":"code","55e7784b":"code","ea191fbd":"code","5d5c1237":"code","c2517117":"code","5497573f":"code","6890ff61":"code","c384b175":"code","c54f70a3":"code","dbf37202":"code","81a34007":"code","c3c39433":"code","c03ff520":"code","f3d1d526":"code","086dabaf":"code","a05b8ea7":"code","e8c776ea":"code","62832e28":"code","5b5ce341":"code","64e08d6a":"code","a4a4a038":"code","faf30740":"code","73929575":"code","6167cbbc":"code","71e3c391":"code","a3978449":"code","5d682f69":"code","1c2141c8":"code","7440d15b":"code","7ab0aa6b":"code","858437a0":"code","7061b4f5":"code","6775220f":"code","019b1475":"code","97f95005":"markdown","c0286a3b":"markdown","8523ed69":"markdown","4e8cc59d":"markdown","2c85413d":"markdown","79138fd1":"markdown","09f2df29":"markdown","4a98ffc6":"markdown","a63d1e98":"markdown","adac9cf5":"markdown","e5057c1f":"markdown","0993a523":"markdown","b1c54304":"markdown","4b735bf5":"markdown","adb6d736":"markdown","6d22c75d":"markdown","089566cd":"markdown","e90bf8d4":"markdown","52f98058":"markdown","71228369":"markdown","be7a9e5d":"markdown","e8c46287":"markdown"},"source":{"da40bb16":"# DataFrame\nimport pandas as pd\n\n# Matplot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Scikit-learn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.manifold import TSNE\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense, Dropout, Embedding, Flatten, Conv1D, MaxPooling1D, LSTM\nfrom keras import utils\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\n\n# nltk\nimport nltk\nfrom nltk.corpus import stopwords\nfrom  nltk.stem import SnowballStemmer\n\n# Word2vec\nimport gensim\n\n# Utility\nimport re\nimport numpy as np\nimport os\nfrom collections import Counter\nimport logging\nimport time\nimport pickle\nimport itertools\n\n# Set log\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)","6b30eee0":"nltk.download('stopwords')","7a0b1aea":"# DATASET\nDATASET_COLUMNS = [\"target\", \"ids\", \"date\", \"flag\", \"user\", \"text\"]\nDATASET_ENCODING = \"ISO-8859-1\"\nTRAIN_SIZE = 0.8\n\n# TEXT CLENAING\nTEXT_CLEANING_RE = \"@\\S+|https?:\\S+|http?:\\S|[^A-Za-z0-9]+\"\n\n# WORD2VEC \nW2V_SIZE = 300\nW2V_WINDOW = 7\nW2V_EPOCH = 32\nW2V_MIN_COUNT = 10\n\n# KERAS\nSEQUENCE_LENGTH = 300\nEPOCHS = 32\nBATCH_SIZE = 1024\n\n# SENTIMENT\nPOSITIVE = \"POSITIVE\"\nNEGATIVE = \"NEGATIVE\"\nNEUTRAL = \"NEUTRAL\"\nSENTIMENT_THRESHOLDS = (0.4, 0.7)\n\n# EXPORT\nKERAS_MODEL = \"model.h5\"\nWORD2VEC_MODEL = \"model.w2v\"\nTOKENIZER_MODEL = \"tokenizer.pkl\"\nENCODER_MODEL = \"encoder.pkl\"","3551acc7":"dataset_filename = os.listdir(\"..\/input\")[0]\ndataset_path = os.path.join(\"..\",\"input\",dataset_filename)\nprint(\"Open file:\", dataset_path)\ndf = pd.read_csv(dataset_path, encoding =DATASET_ENCODING , names=DATASET_COLUMNS)","77b7086a":"print(\"Dataset size:\", len(df))","a0762143":"df.head(5)","c5ccc005":"decode_map = {0: \"NEGATIVE\", 2: \"NEUTRAL\", 4: \"POSITIVE\"}\ndef decode_sentiment(label):\n    return decode_map[int(label)]","42450997":"%%time\ndf.target = df.target.apply(lambda x: decode_sentiment(x))","29f70325":"target_cnt = Counter(df.target)\n\nplt.figure(figsize=(16,8))\nplt.bar(target_cnt.keys(), target_cnt.values())\nplt.title(\"Dataset labels distribuition\")","25034dfe":"stop_words = stopwords.words(\"english\")\nstemmer = SnowballStemmer(\"english\")","6005abbe":"def preprocess(text, stem=False):\n    # Remove link,user and special characters\n    text = re.sub(TEXT_CLEANING_RE, ' ', str(text).lower()).strip()\n    tokens = []\n    for token in text.split():\n        if token not in stop_words:\n            if stem:\n                tokens.append(stemmer.stem(token))\n            else:\n                tokens.append(token)\n    return \" \".join(tokens)","9537e01e":"%%time\ndf.text = df.text.apply(lambda x: preprocess(x))","55e7784b":"df_train, df_test = train_test_split(df, test_size=1-TRAIN_SIZE, random_state=42)\nprint(\"TRAIN size:\", len(df_train))\nprint(\"TEST size:\", len(df_test))","ea191fbd":"%%time\ndocuments = [_text.split() for _text in df_train.text] ","5d5c1237":"w2v_model = gensim.models.word2vec.Word2Vec(size=W2V_SIZE, \n                                            window=W2V_WINDOW, \n                                            min_count=W2V_MIN_COUNT, \n                                            workers=8)","c2517117":"w2v_model.build_vocab(documents)","5497573f":"words = w2v_model.wv.vocab.keys()\nvocab_size = len(words)\nprint(\"Vocab size\", vocab_size)","6890ff61":"%%time\nw2v_model.train(documents, total_examples=len(documents), epochs=W2V_EPOCH)","c384b175":"w2v_model.most_similar(\"love\")","c54f70a3":"%%time\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(df_train.text)\n\nvocab_size = len(tokenizer.word_index) + 1\nprint(\"Total words\", vocab_size)","dbf37202":"%%time\nx_train = pad_sequences(tokenizer.texts_to_sequences(df_train.text), maxlen=SEQUENCE_LENGTH)\nx_test = pad_sequences(tokenizer.texts_to_sequences(df_test.text), maxlen=SEQUENCE_LENGTH)","81a34007":"labels = df_train.target.unique().tolist()\nlabels.append(NEUTRAL)\nlabels","c3c39433":"encoder = LabelEncoder()\nencoder.fit(df_train.target.tolist())\n\ny_train = encoder.transform(df_train.target.tolist())\ny_test = encoder.transform(df_test.target.tolist())\n\ny_train = y_train.reshape(-1,1)\ny_test = y_test.reshape(-1,1)\n\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","c03ff520":"print(\"x_train\", x_train.shape)\nprint(\"y_train\", y_train.shape)\nprint()\nprint(\"x_test\", x_test.shape)\nprint(\"y_test\", y_test.shape)","f3d1d526":"y_train[:10]","086dabaf":"embedding_matrix = np.zeros((vocab_size, W2V_SIZE))\nfor word, i in tokenizer.word_index.items():\n  if word in w2v_model.wv:\n    embedding_matrix[i] = w2v_model.wv[word]\nprint(embedding_matrix.shape)","a05b8ea7":"embedding_layer = Embedding(vocab_size, W2V_SIZE, weights=[embedding_matrix], input_length=SEQUENCE_LENGTH, trainable=False)","e8c776ea":"model = Sequential()\nmodel.add(embedding_layer)\nmodel.add(Dropout(0.5))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.summary()","62832e28":"model.compile(loss='binary_crossentropy',\n              optimizer=\"adam\",\n              metrics=['accuracy'])","5b5ce341":"callbacks = [ ReduceLROnPlateau(monitor='val_loss', patience=5, cooldown=0),\n              EarlyStopping(monitor='val_acc', min_delta=1e-4, patience=5)]","64e08d6a":"%%time\nhistory = model.fit(x_train, y_train,\n                    batch_size=BATCH_SIZE,\n                    epochs=EPOCHS,\n                    validation_split=0.1,\n                    verbose=1,\n                    callbacks=callbacks)","a4a4a038":"%%time\nscore = model.evaluate(x_test, y_test, batch_size=BATCH_SIZE)\nprint()\nprint(\"ACCURACY:\",score[1])\nprint(\"LOSS:\",score[0])","faf30740":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n \nepochs = range(len(acc))\n \nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n \nplt.figure()\n \nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n \nplt.show()","73929575":"def decode_sentiment(score, include_neutral=True):\n    if include_neutral:        \n        label = NEUTRAL\n        if score <= SENTIMENT_THRESHOLDS[0]:\n            label = NEGATIVE\n        elif score >= SENTIMENT_THRESHOLDS[1]:\n            label = POSITIVE\n\n        return label\n    else:\n        return NEGATIVE if score < 0.5 else POSITIVE","6167cbbc":"def predict(text, include_neutral=True):\n    start_at = time.time()\n    # Tokenize text\n    x_test = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=SEQUENCE_LENGTH)\n    # Predict\n    score = model.predict([x_test])[0]\n    # Decode sentiment\n    label = decode_sentiment(score, include_neutral=include_neutral)\n\n    return {\"label\": label, \"score\": float(score),\n       \"elapsed_time\": time.time()-start_at}  ","71e3c391":"predict(\"MPs vote to reject 12 December election plan - but Boris Johnson is likely to try again for a pre-Christmas poll\")","a3978449":"predict(\"IS leader Abu Bakr al-Baghdadi was killed in US operation in Syria, President Donald Trump confirms\")","5d682f69":"predict('He was a sick and depraved man, and now he\u2019s gone. Baghdadi was vicious and violent and he died in a vicious and violent way. US President Donald Trump says the \u201cworld is now a much safer place\u201d after the killing of IS leader Abu Bakr al-Baghdadi')","1c2141c8":"predict('I bought this property for $1.5 million: Condo resident yells profanities at security guards over visitor parking')","7440d15b":"%%time\ny_pred_1d = []\ny_test_1d = list(df_test.target)\nscores = model.predict(x_test, verbose=1, batch_size=8000)\ny_pred_1d = [decode_sentiment(score, include_neutral=False) for score in scores]","7ab0aa6b":"def plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n\n    cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, fontsize=30)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90, fontsize=22)\n    plt.yticks(tick_marks, classes, fontsize=22)\n\n    fmt = '.2f'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontsize=25)\n    plt.xlabel('Predicted label', fontsize=25)","858437a0":"%%time\n\ncnf_matrix = confusion_matrix(y_test_1d, y_pred_1d)\nplt.figure(figsize=(12,12))\nplot_confusion_matrix(cnf_matrix, classes=df_train.target.unique(), title=\"Confusion matrix\")\nplt.show()","7061b4f5":"print(classification_report(y_test_1d, y_pred_1d))","6775220f":"accuracy_score(y_test_1d, y_pred_1d)","019b1475":"model.save(KERAS_MODEL)\nw2v_model.save(WORD2VEC_MODEL)\npickle.dump(tokenizer, open(TOKENIZER_MODEL, \"wb\"), protocol=0)\npickle.dump(encoder, open(ENCODER_MODEL, \"wb\"), protocol=0)","97f95005":"### Dataset details\n* **target**: the polarity of the tweet (0 = negative, 2 = neutral, 4 = positive)\n* **ids**: The id of the tweet ( 2087)\n* **date**: the date of the tweet (Sat May 16 23:58:44 UTC 2009)\n* **flag**: The query (lyx). If there is no query, then this value is NO_QUERY.\n* **user**: the user that tweeted (robotickilldozr)\n* **text**: the text of the tweet (Lyx is cool)","c0286a3b":"### Train","8523ed69":"### Evaluate","4e8cc59d":"### Accuracy Score","2c85413d":"This notebook is forked from https:\/\/www.kaggle.com\/paoloripamonti\/twitter-sentiment-analysis ","79138fd1":"### Build Model","09f2df29":"### Read Dataset","4a98ffc6":"### Predict","a63d1e98":"### Tokenize Text","adac9cf5":"### Settings","e5057c1f":"### Classification Report","0993a523":"### Pre-Process dataset","b1c54304":"# Twitter Sentiment Analysis","4b735bf5":"### Confusion Matrix","adb6d736":"### Word2Vec ","6d22c75d":"### Split train and test","089566cd":"### Embedding layer","e90bf8d4":"### Map target label to String\n* **0** -> **NEGATIVE**\n* **2** -> **NEUTRAL**\n* **4** -> **POSITIVE**","52f98058":"### Label Encoder ","71228369":"### Save model","be7a9e5d":"### Compile model","e8c46287":"### Callbacks"}}