{"cell_type":{"4d4f19c7":"code","b3cc032a":"code","5f8f43bf":"code","444f737b":"code","67c8d314":"code","73557591":"code","0219146f":"code","f93e7bfc":"code","6c48836e":"markdown"},"source":{"4d4f19c7":"from PIL import Image\nimport sys\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.metrics import roc_auc_score\n\nimport torch\nfrom torchvision.transforms import transforms\nfrom torch.utils.data import DataLoader, Dataset\n\nsys.path.append('..\/input\/efficient-net-deps-1\/')\nfrom efficientnet_pytorch.model import EfficientNet\nfrom tqdm.notebook import tqdm","b3cc032a":"root_path = '..\/input\/ranzcr-clip-catheter-line-classification\/'\ntest_imgs = root_path+ 'test\/'\n\nsubmission = pd.read_csv(root_path+'sample_submission.csv')","5f8f43bf":"class LoadData(Dataset):\n    def __init__(self, df, transform, test=False):\n        super().__init__()\n        self.df = df\n        self.transform = transform\n        self.test = test\n        \n    def __getitem__(self, idx):\n        row = self.df.iloc[idx]\n        if not self.test:\n            img = Image.open(train_imgs+row[0]+'.jpg').convert('RGB')\n            labels = torch.from_numpy(row[1:-1].astype(np.float32).values)\n        \n            return self.transform(img), labels \n        else:\n            img = Image.open(test_imgs+row[0]+'.jpg').convert('RGB')\n            return self.transform(img)\n        \n    def __len__(self): return len(self.df)","444f737b":"def build_model(model='effnet'):\n    #building the model for transfer learning\n    if model == 'effnet':\n        effnet = EfficientNet.from_name('efficientnet-b2', num_classes=11)\n        return effnet","67c8d314":"BATCH_SIZE = 32\nDEVICE = 'cuda'\nIMG_SIZE = 256\n\ntransform = transforms.Compose([transforms.Resize((IMG_SIZE, IMG_SIZE)),\n                                transforms.ToTensor(),\n                                transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                                     std=[0.229, 0.224, 0.225])])\n\ntest_ds = LoadData(submission, transform, test=True)\ntest_dl = DataLoader(test_ds, BATCH_SIZE, shuffle=False)","73557591":"#path to your saved best model\nmodel_path = '..\/input\/effnet-model\/model_92.pt'\nmodel = build_model().to(DEVICE)\nmodel.load_state_dict(torch.load(model_path, map_location=DEVICE))","0219146f":"model.eval()\nout = []\nwith torch.no_grad():\n    for data in tqdm(test_dl, total=len(test_dl)):\n        out.append((model(data.to(DEVICE)).sigmoid()).cpu())","f93e7bfc":"preds = torch.cat(out).numpy()\nsolution = pd.DataFrame(preds, columns=submission.columns[1:])\nsolution['StudyInstanceUID'] = submission['StudyInstanceUID']\nsolution = solution.reindex(columns=list(submission))\nsolution.to_csv('submission.csv', index=False)","6c48836e":"**Training notebook can be found [here](https:\/\/www.kaggle.com\/bipinkrishnan\/efficientnet-b2-no-cross-validation-lb-0-921)**"}}