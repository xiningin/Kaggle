{"cell_type":{"80f5b196":"code","5d2d1fa4":"code","162c9bda":"code","f296c7ce":"code","20eab3e9":"code","69460af0":"code","d1f75dd6":"code","7a0ab485":"code","3e495d6a":"code","9425ef09":"code","eb6a0ccc":"code","402a8ca4":"markdown","40f4f4d8":"markdown","67761f7f":"markdown","605e7f34":"markdown"},"source":{"80f5b196":"import os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport openslide\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport cv2\nfrom tqdm.notebook import tqdm\nimport skimage.io\nfrom skimage.transform import resize, rescale\nimport glob","5d2d1fa4":"train = pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/train.csv')\ntrain_images_path = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/'\ntrain_label_mask_path = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_label_masks\/'\nimg_type = \"*.tiff\"","162c9bda":"def sanity_tally(train_images_path, train_label_mask_path, img_type):\n    total_img_list = [os.path.basename(img_name) for img_name\n                      in glob.glob(os.path.join(train_images_path, img_type))]\n    ## get the image_name\n    total_img_list = [x[:-5] for x in total_img_list]\n    \n    mask_img_list  = [os.path.basename(img_name) for img_name \n                      in glob.glob(os.path.join(train_label_mask_path, img_type))]\n    \n    # note that the image name in train_label_mask will always be in this format: abcdefg_mask.tiff; therefore I needed to\n    # remove the last 10 characters to tally with the images in train_images.\n    mask_img_list  = [x[:-10] for x in mask_img_list]\n    set_diff1      = set(total_img_list) - set(mask_img_list)\n    set_diff2      = set(mask_img_list)  - set(total_img_list)\n    \n    if set(total_img_list)  == set(mask_img_list):\n        print(\"Sanity Check Status: True\")\n    else:\n        print(\"Sanity Check Status: Failed. \\nThe elements in train_images_path but not in the train_label_mask_path is {} and the number is {}.\\n\\n\\nThe elements in train_label_mask_path but not in train_images_path is {} and the number is {}\".format(\n                set_diff1, len(set_diff1), set_diff2, len(set_diff2)))\n    \n    return set_diff1, set_diff2","f296c7ce":"set_diff1, set_diff2 = sanity_tally(train_images_path,train_label_mask_path, img_type)","20eab3e9":"remove_images = list(set_diff1)\nnew_train = train[~train.image_id.isin(remove_images)]","69460af0":"new_train = new_train.reset_index(drop=True)","d1f75dd6":"new_train","7a0ab485":"save_dir = \"\/kaggle\/train\/\"\nos.makedirs(save_dir, exist_ok=True)\n\ntrain_images_path = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/'\ntrain_label_mask_path = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_label_masks\/'\nimg_type = \"*.tiff\"","3e495d6a":"for img_id in tqdm(new_train.image_id):\n    load_path = train_images_path + img_id + '.tiff'\n    save_path = save_dir + img_id + '.jpg'\n    \n    biopsy = skimage.io.MultiImage(load_path)\n    img = cv2.resize(biopsy[-1], (512, 512))\n    cv2.imwrite(save_path, img)","9425ef09":"for img_id in tqdm(new_train.image_id):\n    load_path = train_label_mask_path + img_id + '_mask' + '.tiff'\n    save_path = save_dir + img_id + '.jpg'\n    \n    biopsy = skimage.io.MultiImage(load_path)\n    img = cv2.resize(biopsy[-1], (512, 512))\n    cv2.imwrite(save_path, img)","eb6a0ccc":"!tar -czf images.tar.gz ..\/train\/*.png","402a8ca4":"Next, I conveniently borrowed [xhlulu's panda resize and save train data kernel](https:\/\/www.kaggle.com\/xhlulu\/panda-resize-and-save-train-data) and save the image as png file, where all of them are resized to 512x512.","40f4f4d8":"As the organizer has already mentioned that \n\n**train_label_masks: Segmentation masks showing which parts of the image led to the ISUP grade. Not all training images have label masks.**\n\nTherefore, this simple notebook aims to check how many images in the training images folder that are not labelled with masks.","67761f7f":"For simplicity sake, I want to have a bijective relationship between the train_images folder and the train_label_masks folder; and since the set difference is small (100), I can make do to delete these 100 images that are not **annotated** by the pathologists.","605e7f34":"From the sanity check above, and assuming that each image's name in the train_images should necessarily match the ones in train_label_masks, we can deduce that the masked images in train_label_masks is a subset of the images in the train_images. That is to say, all masked images in train_label_masks has a corresponding image in the train_images, but there exists 100 images in train_images that do not have a mask. Whether we decide to keep these \"un-labelled\" images is up to you to decide."}}