{"cell_type":{"f035cb0b":"code","c3ae3a05":"code","30ea12bd":"code","5a154bd4":"code","6900afcd":"code","6fe61680":"code","02242774":"code","20cbec72":"code","1686abc8":"code","f2e41729":"code","e0a6d09e":"code","3f673dc9":"code","53823f01":"code","b379f93b":"code","8cdbcbb6":"code","eb9985fa":"code","ece37b1b":"code","408c8074":"code","1ddf91aa":"code","de434b17":"code","c11931ed":"code","7d9bed54":"code","93755764":"code","bb057946":"code","bb583579":"code","59d9dac8":"code","9e298ab0":"code","85dbf770":"code","d383146c":"markdown","06d1f6f5":"markdown","d1734819":"markdown","45f25575":"markdown","c8364248":"markdown","1c3a5970":"markdown","28a54b17":"markdown","de5527e9":"markdown","493e570e":"markdown","b662bc8b":"markdown","0d8fe3c3":"markdown","39d24534":"markdown","06d5e29d":"markdown","6f556f19":"markdown","4588eb9c":"markdown","5c3589a3":"markdown","9286fded":"markdown","834e2ade":"markdown"},"source":{"f035cb0b":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix  ","c3ae3a05":"df = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\",sep=r'\\s*,\\s*',\n                           header=0, encoding='ascii', engine='python')\ndf","30ea12bd":"df.plot.scatter(x='platelets', y='age', title='Platelets',color = \"red\")","5a154bd4":"df['ejection_fraction'].value_counts().sort_index().plot.bar()","6900afcd":"import seaborn as sns\nsns.distplot(df['serum_sodium'], bins=10, kde=True)","6fe61680":"sns.boxplot( 'age','diabetes',data=df)","02242774":"for col in df.columns:\n    df[col].value_counts().plot.bar()\n    plt.show()","20cbec72":"\ndf_dedupped = df.drop_duplicates()\n\n# there were duplicate rows\nprint(df.shape)\nprint(df_dedupped.shape)","1686abc8":"for col in df.columns:\n    pct_missing = np.mean(df[col].isnull())\n    print('{} - {}%'.format(col, round(pct_missing*100)))","f2e41729":"for c in df.columns:\n    print (\"---- %s ---\" % c)\n    print (df[c].value_counts().sort_index())","e0a6d09e":"df[['anaemia','diabetes','high_blood_pressure','sex','smoking']] = df[['anaemia','diabetes','high_blood_pressure','sex','smoking']].astype(bool)","3f673dc9":"quantile_list = [0, .25, .5, .75, 1.]\nquantiles = df['age'].quantile(quantile_list)\nquantiles","53823f01":"fig, ax = plt.subplots()\ndf['age'].hist(bins=30, color='#A9C5D3', \n                             edgecolor='black', grid=False)\nfor quantile in quantiles:\n    qvl = plt.axvline(quantile, color='r')\n    ax.legend([qvl], ['Quantiles'], fontsize=10)\n    ax.set_title('Age', fontsize=12)\nax.set_xlabel('Age of patient', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)","b379f93b":"quantile_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\ndf['age_quantile_label'] = pd.qcut(df['age'], \n                                   q=quantile_list,       \n                                   labels=quantile_labels)","8cdbcbb6":"encoder = LabelEncoder()\nage_labels = encoder.fit_transform(df['age_quantile_label'])\nage_mappings = {index: label for index, label in \n                  enumerate(encoder.classes_)}\nage_mappings","eb9985fa":"df['age_quantile_label'] = age_labels\ndf","ece37b1b":"final_df = df[['anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time', 'age_quantile_label', 'DEATH_EVENT']]\nfinal_df","408c8074":"X=final_df.iloc[:,:-1]\ny=final_df.iloc[:,-1]\nX_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.2)","1ddf91aa":"sc_train = StandardScaler()\nsc_train.fit_transform(X_train)\nsc_test = StandardScaler()\nsc_test.fit_transform(X_test)","de434b17":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)","c11931ed":"accuracy_score(y_train, dt.predict(X_train)),accuracy_score(y_test, dt.predict(X_test))","7d9bed54":"false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","93755764":"max_depths = np.linspace(1, 32, 32, endpoint=True)\ntrain_results = []\ntest_results = []\nfor max_depth in max_depths:\n   dt = DecisionTreeClassifier(max_depth=max_depth)\n   dt.fit(X_train, y_train)\n   train_pred = dt.predict(X_train)   \n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   # Add auc score to previous train results\n   train_results.append(roc_auc)   \n   y_pred = dt.predict(X_test)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   # Add auc score to previous test results\n   test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(max_depths, train_results, \"b\", label=\"Train AUC\")\nline2, = plt.plot(max_depths, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUCscore\")\nplt.xlabel(\"Treedepth\")\nplt.show()","bb057946":"min_samples_splits = np.linspace(0.1, 1.0, 10, endpoint=True)\ntrain_results = []\ntest_results = []\nfor min_samples_split in min_samples_splits:\n   dt = DecisionTreeClassifier(min_samples_split=min_samples_split)\n   dt.fit(X_train, y_train)   \n   train_pred = dt.predict(X_train)\n   false_positive_rate, true_positive_rate, thresholds =    roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)   \n   y_pred = dt.predict(X_test)   \n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\n\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(min_samples_splits, train_results, \"b\", label=\"Train AUC\")\nline2, = plt.plot(min_samples_splits, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"min samples split\")\nplt.show()","bb583579":"classifier = DecisionTreeClassifier(criterion= 'entropy', max_depth=None,max_features= 6, min_samples_leaf= 3)\nclassifier.fit(X, y)","59d9dac8":"accuracy_score(y_train, classifier.predict(X_train)),accuracy_score(y_test, classifier.predict(X_test))","9e298ab0":"cf_matrix=confusion_matrix(y_test,classifier.predict(X_test))","85dbf770":"sns.heatmap(cf_matrix, annot=True)","d383146c":"Finding quantile","06d1f6f5":"Let us now transform it","d1734819":"\n\n---\n\n","45f25575":"# Data Preproccesing","c8364248":"# Importing all the important libraries","1c3a5970":"---\n","28a54b17":"# Data Visualisation","de5527e9":"Using quantile bin the age ","493e570e":"# Time to find the model","b662bc8b":"Let us now convert this catagorical data to numeric one","0d8fe3c3":"## Finding the best value","39d24534":"## Scaling and converting the data","06d5e29d":"### Binning Age ","6f556f19":"## Importing data","4588eb9c":"Let us split the data first","5c3589a3":"### Converting the dtype \nConverting all the booleans having int64 as dtype to bool ","9286fded":"### Checking out the features","834e2ade":"# Data analysis"}}