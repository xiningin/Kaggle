{"cell_type":{"56dacc70":"code","f1f1b262":"code","4e296784":"code","35d0d6ee":"code","c2aa9dd8":"code","2f72983e":"code","0397f60a":"code","8d5d01dd":"code","c61d514a":"code","55c451a3":"code","dcd999ff":"code","db1a9574":"code","275dbba5":"code","5e0490a3":"code","0f737066":"code","d712e1cc":"code","ab041a40":"code","cc4de140":"code","e5604ccc":"code","e6185c67":"code","42c25b26":"code","4b34d713":"code","db05c13c":"code","8febf5ab":"code","5804722f":"code","7ba62488":"code","e6ec2f32":"code","f8e94591":"code","50e7fdb9":"code","07a3e3c8":"code","c8e79893":"code","af37b50e":"code","be53069d":"code","6c26fed7":"code","51704735":"code","3eb40e6c":"code","df52ed0d":"code","2d4570ee":"code","d4441642":"code","44479f3c":"code","3889910c":"code","3d6ed3e7":"code","3a3c6334":"code","0a4fbfdb":"code","eccc7f0f":"code","ab572849":"code","340f97f4":"code","a4f6900f":"code","d8cde1d3":"code","cba714f6":"code","d925f3b5":"code","e1bc4fd2":"code","694103aa":"code","2134ff3f":"code","8926bdeb":"code","f23b2346":"code","0534ea4f":"code","ccd07673":"code","cf2df5b1":"code","5a3e9607":"code","2de2b81d":"code","9f1db389":"code","be9d8fd5":"code","409db6c9":"code","6708d2ba":"code","1bfd55f1":"code","29007e9c":"code","52f2576c":"code","df74c82a":"code","7073fc69":"code","89762d01":"code","fd2759d7":"code","95a25bfa":"code","6464a449":"code","a58f901f":"code","3e711c65":"code","46f8fa6e":"code","b88224b0":"code","d491ef80":"code","142dd6dd":"code","e73314d0":"markdown","2ab0adfd":"markdown","311701c3":"markdown","47233738":"markdown","cc70abe1":"markdown","9cced3bf":"markdown","3bbc40d0":"markdown","1da621e4":"markdown","30b4e76a":"markdown","b1a44362":"markdown","573fac84":"markdown","c93c7232":"markdown","8b0645cd":"markdown","7b49486b":"markdown","931c97e5":"markdown","b9d8cf8f":"markdown","d8f78e25":"markdown","3d381390":"markdown","13de45d0":"markdown"},"source":{"56dacc70":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy.stats import pearsonr\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f1f1b262":"#Since these datasets are coming from BigQuery, we'll have to import them from there\nfrom google.cloud import bigquery\nfrom bq_helper import BigQueryHelper","4e296784":"client = bigquery.Client()\n\ndataset_ref = client.dataset(\"ncaa_basketball\", project=\"bigquery-public-data\")\n\ndataset = client.get_dataset(dataset_ref)","35d0d6ee":"tables = list(client.list_tables(dataset))\n\nfor table in tables:  \n    print(table.table_id)","c2aa9dd8":"# Construct a reference to the \"full\" table\ntable_ref = dataset_ref.table(table_id='mbb_games_sr')\n\n# API request - fetch the table\ntable = client.get_table(table_ref)","2f72983e":"client.list_rows(table, max_results=10).to_dataframe()","0397f60a":"query = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.ncaa_basketball.mbb_games_sr`\n        \"\"\"\nquery2 = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.ncaa_basketball.mbb_historical_tournament_games`\n        \"\"\"\nquery3 = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.ncaa_basketball.mbb_historical_teams_seasons`\n        \"\"\"\nquery4 = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.ncaa_basketball.mbb_players_games_sr`\n        \"\"\"\nquery5 = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.ncaa_basketball.mbb_teams_games_sr`\n        \"\"\"","8d5d01dd":"mbb_games = client.query(query)\nmbb_games_sr = mbb_games.to_dataframe()\nmbb_games_sr.head()","c61d514a":"mbb_tournament = client.query(query2)\nmbb_tournament_sr = mbb_tournament.to_dataframe()\nmbb_tournament_sr.head()","55c451a3":"mbb_historic = client.query(query3)\nmbb_historic_sr = mbb_historic.to_dataframe()\nmbb_historic_sr.head()","dcd999ff":"mbb_players = client.query(query4)\nmbb_players_sr = mbb_players.to_dataframe()\nmbb_players_sr.head()","db1a9574":"mbb_teams = client.query(query5)\nmbb_teams_sr = mbb_teams.to_dataframe()\nmbb_teams_sr.head()","275dbba5":"#Ensuring all objects are Pandas dataframes.\ntype(mbb_games_sr)\ntype(mbb_tournament_sr)\ntype(mbb_historic_sr)\ntype(mbb_players_sr)\ntype(mbb_teams_sr)","5e0490a3":"pd.options.display.max_rows = 150\npd.options.display.max_columns = None","0f737066":"np.sum(mbb_games_sr.isnull()).max()","d712e1cc":"mbb_games_sr.isnull().sum()","ab041a40":"print(mbb_games_sr.shape) #season number is the first of the two (i.e. 2013\/2014 season listed as 2013)\nprint(mbb_tournament_sr.shape)\nprint(mbb_historic_sr.shape) #could maybe do which conferences were up and down over the years?\nprint(mbb_players_sr.shape)\nprint(mbb_teams_sr.shape)","cc4de140":"mbb_tournament_sr = mbb_tournament_sr.sort_values('season')","e5604ccc":"mbb_games_sr[(mbb_games_sr['tournament'] == \"NCAA\") & (mbb_games_sr['h_market'] == \"Louisville\")]","e6185c67":"mbb_teams_sr = mbb_teams_sr.sort_values('season')\nmbb_players_sr = mbb_players_sr.sort_values(\"season\")","42c25b26":"positions = ['G', 'G-F'] #Since PF and C don't shoot 3's normally.\nncaa_tourny = ['South Regional', 'Midwest Regional', 'East Regional', 'West Regional', 'Final Four', 'National Championship']\n\nbenchmark = mbb_players_sr[~mbb_players_sr['three_points_pct'].isnull() & mbb_players_sr['position'].isin(positions)]\nbenchmark = benchmark[benchmark['division_name'] == 'NCAA Division I']\nbenchmark = benchmark[benchmark['played'] == True] #They have to at least attpt 1. otherwise metric is skewed.\nbenchmark = benchmark[(benchmark['three_points_att'] > 0.0) & (~benchmark['three_points_att'].isnull())]\n\n#THIS ADDED LATER for 3pt vs free throw analysis if possible.\n#benchmark = benchmark[benchmark['free_throws_att'] > 0.0]\n\nncaa_tourn_bench = benchmark[(benchmark['tournament'] == 'NCAA') & (benchmark['tournament_type'].isin(ncaa_tourny))]\n\nbenchmark = benchmark[~benchmark['tournament_type'].isin(ncaa_tourny)] #Now it will be opposite to tournament analysis below.","4b34d713":"full_name_3pt_avg = benchmark[['full_name', 'height', 'three_points_made', 'three_points_att', 'three_points_pct']]\nfull_name_3pt_avg = full_name_3pt_avg[full_name_3pt_avg['three_points_att'] > 0.0]\nheights = full_name_3pt_avg.groupby('full_name').agg({'height':'mean'}) #for consistency\nfull_name_3pt_avg = full_name_3pt_avg.groupby('full_name').agg({'three_points_pct':'mean'})\nfull_name_3pt_avg['height'] = heights['height']\nfull_name_3pt_avg","db05c13c":"fig, ax = plt.subplots()\n\nsns.scatterplot(data = full_name_3pt_avg, x = 'height', y = 'three_points_pct')\nax.set_xlim(60, 90)\nplt.show()","8febf5ab":"scl_avg_df = pd.DataFrame(columns=['School', 'Average 3pt %', 'Conference'])\nscl_avg_df","5804722f":"benchmark_3pt_att_means = benchmark.groupby(['conf_name','team_market'], as_index=False).agg({'three_points_att':'mean'})\n\nschools_attavg = zip(benchmark_3pt_att_means['team_market'], benchmark_3pt_att_means['three_points_att'])\n\nfor school, att_mean in schools_attavg:\n    avg_3s = benchmark[(benchmark['team_market'] == school) & (benchmark['three_points_att'] >= att_mean)]['three_points_pct'].mean()\n    \n    conf_alias = benchmark[benchmark['team_market'] == school]['conf_alias'].iloc[0]\n    \n    new_row = {'School':school, 'Average 3pt %':avg_3s, 'Conference':conf_alias}\n    scl_avg_df = scl_avg_df.append(new_row, ignore_index = True)","7ba62488":"scl_avg_df ","e6ec2f32":"sorted_3avg_overall = scl_avg_df.sort_values('Average 3pt %', ascending=False).reset_index(drop=True)","f8e94591":"#For family interest :)\nsorted_3avg_overall[sorted_3avg_overall['School'] == 'Louisville']","50e7fdb9":"fig, ax = plt.subplots(figsize=(10,6))\n\ntop_15 = sorted_3avg_overall.iloc[:15]\norder = [school for school in top_15['School'][::-1]]\nsns.barplot(data = top_15, y = 'School', x = 'Average 3pt %', order = top_15.sort_values('Average 3pt %', ascending=False).School, palette = 'Oranges')\n\nax.set_title(\"Top 15 3pt Percentages, Seasons 13\/14 - 17\/18 (Regular Season)\")\n\nplt.show() ","07a3e3c8":"conf_avg = sorted_3avg_overall.groupby('Conference', as_index=False).agg({'Average 3pt %':'mean'}).sort_values('Average 3pt %', ascending = False)\nconf_avg = conf_avg.reset_index(drop=True)","c8e79893":"per_conf = benchmark.groupby('conf_alias', as_index = False)","af37b50e":"top_conferences = ['SUMMIT', 'BIG10', 'BIGEAST', 'MWC', 'BIGSKY', 'IVY', 'SOUTHERN', 'ACC', 'AAC', 'BIG12']\nconf_sorted = sorted_3avg_overall[sorted_3avg_overall['Conference'].isin(top_conferences)]\n\nax = sns.violinplot(data=conf_sorted, x='Conference', y='Average 3pt %', gridsize=100, scale_hue=True)\nax.tick_params(axis='x', labelrotation= 90)","be53069d":"main_power_5 = ['ACC', 'BIG10', 'BIG12', 'PAC12', 'SEC']\n\nmain5_sorted = sorted_3avg_overall[sorted_3avg_overall['Conference'].isin(main_power_5)]\n\nax = sns.violinplot(data=main5_sorted, x='Conference', y='Average 3pt %', gridsize=100, scale_hue=True)\nax.tick_params(axis='x')\nax.set_title(\"Regular Season Avg. 3pt Percentage of Power 5 Conferences (Seasons 13\/14 - 17\/18)\")\nplt.show()","6c26fed7":"power5_conf = ['ACC', 'BIG10', 'BIG12', 'PAC12', 'SEC', 'AAC', 'CUSA', 'MAC', 'MWC', 'SUNBELT']\n\nncaa_tourn_bench_topc = ncaa_tourn_bench[ncaa_tourn_bench['conf_alias'].isin(power5_conf)]\n\nncaa_tourn_bench_topc['conf_alias'].unique()","51704735":"ncaa_tourn_bench_topc['three_points_pct'].unique()","3eb40e6c":"ncaa_tourn_bench_topc.head()","df52ed0d":"acc_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'ACC']['three_points_pct']\naac_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'AAC']['three_points_pct']\npac12_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'PAC12']['three_points_pct']\nmac_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'MAC']['three_points_pct']\nmwc_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'MWC']['three_points_pct']\nsec_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'SEC']['three_points_pct']\nbig10_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'BIG10']['three_points_pct']\nbig12_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'BIG12']['three_points_pct']\nsunbelt_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'SUNBELT']['three_points_pct']\ncusa_3s = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'CUSA']['three_points_pct']","2d4570ee":"print('Number of ACC schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'ACC']['team_market'].unique())))\nprint('Number of AAC schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'AAC']['team_market'].unique())))\nprint('Number of PAC12 schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'PAC12']['team_market'].unique())))\nprint('Number of MAC schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'MAC']['team_market'].unique())))\nprint('Number of MWC schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'MWC']['team_market'].unique())))\nprint('Number of SEC schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'SEC']['team_market'].unique())))\nprint('Number of BIG10 schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'BIG10']['team_market'].unique())))\nprint('Number of BIG12 schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'BIG12']['team_market'].unique())))\nprint('Number of SUNBELT schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'SUNBELT']['team_market'].unique())))\nprint('Number of CUSA schools: ' + str(len(ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'CUSA']['team_market'].unique())))","d4441642":"#Power 5 Conferences Histogram of 3pt % in the NCAA Tournament.\nfig, ax = plt.subplots(figsize = (8, 6))\n\nax.hist(acc_3s, label = 'ACC', histtype = 'step', color = 'steelblue')\nax.hist(big10_3s, label = 'BIG10', histtype = 'step', color = 'limegreen')\nax.hist(big12_3s, label = 'BIG12', histtype = 'step', color = 'gold')\nax.hist(pac12_3s, label = 'PAC12', histtype = 'step', color = 'orangered')\nax.hist(sec_3s, label = 'SEC', histtype = 'step', color = 'indigo')\n\nax.set_ylabel(\"Number of Records\")\nax.set_xlabel(\"3pt Percentage\")\nax.set_title(\"Power 5 Conference NCAA Tournament 3pt % Distribution (Seasons 13\/14 - 17\/18)\")\nax.legend()\n\nplt.show()","44479f3c":"ncaa_tourn_bench_acc = ncaa_tourn_bench_topc[ncaa_tourn_bench_topc['conf_alias'] == 'ACC']\n","3889910c":"pitt_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Pittsburgh']['three_points_pct']\nlou_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Louisville']['three_points_pct']\nvir_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Virginia']['three_points_pct']\nncst_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'North Carolina State']['three_points_pct']\nunc_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'North Carolina']['three_points_pct']\nsyr_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Syracuse']['three_points_pct']\nduke_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Duke']['three_points_pct']\nnd_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Notre Dame']['three_points_pct']\nmia_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Miami (FL)']['three_points_pct']\nfsu_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Florida State']['three_points_pct']\nvtech_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Virginia Tech']['three_points_pct']\nclem_3s = ncaa_tourn_bench_acc[ncaa_tourn_bench_acc['team_market'] == 'Clemson']['three_points_pct']","3d6ed3e7":"#ACC Schools Histogram of 3pt % in the NCAA Tournament.\nfig, ax = plt.subplots(figsize = (9, 7))\n\nax.hist(lou_3s, label = 'Louisville', histtype = 'step', color = 'red')\nax.hist(unc_3s, label = 'North Carolina', histtype = 'step', color = 'darkturquoise')\nax.hist(duke_3s, label = 'Duke', histtype = 'step', color = 'blue')\nax.hist(vir_3s, label = 'Virginia', histtype = 'step', color = 'sandybrown')\nax.hist(fsu_3s, label = 'Florida State', histtype = 'step', color = 'maroon')\n\nax.set_ylabel(\"Number of Records\")\nax.set_xlabel(\"3pt Percentage\")\nax.set_ylim(0, 24)\nax.set_title(\"Power 5 Conference NCAA Tournament 3pt % Distribution of Players (Seasons 13\/14 - 17\/18)\")\nax.legend()\n\nplt.show()","3a3c6334":"mbb_tournament_sr","0a4fbfdb":"mbb_tournament_sr_win_seed_sorted = mbb_tournament_sr[mbb_tournament_sr['round'] != 68]\nmbb_tournament_sr_win_seed_sorted = mbb_tournament_sr_win_seed_sorted.sort_values('win_seed')\n","eccc7f0f":"#Histogram of win seeds, 1984 - 2018.\nfig, ax = plt.subplots(figsize = (8,6))\n\nn, bin1, patches = ax.hist(mbb_tournament_sr_win_seed_sorted['win_seed'], label = 'Winning Seed Number', color = 'tab:green', bins = 15)\n\npatches[9].set_fc('tab:red')\n\nax.set_ylabel(\"Number of Wins\")\nax.set_xlabel(\"Winning Seed Number\")\nax.set_ylim(0, 500)\nax.set_title(\"NCAA Tournament Winning Seeds (1984 - 2017)\")\nax.legend()\n\nplt.show()","ab572849":"schools, wins = np.unique(mbb_tournament_sr_win_seed_sorted['win_school_ncaa'], return_counts = True)","340f97f4":"school_wins = pd.DataFrame(schools, wins).reset_index()\nschool_wins.columns = ['number_wins', 'school']\nschool_wins_gt40 = school_wins[school_wins['number_wins'] > 40]","a4f6900f":"fig, ax = plt.subplots(figsize = (10,6))\norder = ['Duke', 'North Carolina', 'Kansas', 'Kentucky', 'UConn', 'Arizona', 'Michigan St.', 'Syracuse', 'Louisville', 'UCLA', 'Florida']\n\npalette = sns.color_palette([\"#1236E0\",\"#2DBEE7\",\"#F2EF4E\", \"#1C5FD8\", \"#138398\", \"#A23B11\", \"#33A211\", \"#DFA01C\", \"#E91F1C\",\"#1BE7DF\",\"#ECAC24\"])\n\nsns.barplot(data = school_wins_gt40, x = 'school', y = 'number_wins', order = order, palette = palette)\n\nax.set_xlabel(\"School\")\nax.set_ylabel(\"Number of Wins\")\nax.set_title(\"Schools with >40 NCAA Tournament Wins (1984 - 2017)\")\nax.tick_params(axis='x', labelrotation = 90)\nax.set_ylim(0, 100)\n\nplt.show()","d8cde1d3":"uofl = benchmark[benchmark['team_market'] == 'Louisville']\nuofl_df = uofl.groupby('scheduled_date', as_index=False).agg({'three_points_pct':'mean'})\nuofl_free_throws = uofl.groupby('scheduled_date', as_index=False).agg({'free_throws_pct':'mean'})\n\nuofl_df_final = uofl_df.merge(uofl_free_throws)\nuofl_df_final['scheduled_date'] = pd.to_datetime(uofl_df_final['scheduled_date'])\n\nuofl_df_final.set_index('scheduled_date', inplace=True)","cba714f6":"fig, ax = plt.subplots(figsize = (10,8))\n\nscat = ax.scatter(uofl_df_final['three_points_pct'], uofl_df_final['free_throws_pct'], c = uofl_df_final.index)\n\nax.set_xlabel(\"Three Point Percentage\")\nax.set_ylabel(\"Free Throw Percentage\")\nax.set_title(\"Louisville Regular Season 3pt % vs. Free Throw % per Game (Seasons 13\/14 - 17\/18) \")\n\nax.legend()\nplt.show()\n","d925f3b5":"mbb_teams_sr\n\ntourny = ['NCAA', 'Conference']\n\n\nmbb_teams_sr_cleaned = mbb_teams_sr[~pd.isnull(mbb_teams_sr)]\nmbb_teams_sr_cleaned = mbb_teams_sr_cleaned[(mbb_teams_sr_cleaned['division_name'] == 'NCAA Division I') & (mbb_teams_sr_cleaned['opp_division_name'] == 'NCAA Division I')] #Only D1 Games","e1bc4fd2":"grped_df = mbb_teams_sr_cleaned.groupby('market')[['fast_break_pts', 'points_off_turnovers']]\n\ncorrs = grped_df.corr(method ='pearson')\ncorrs = pd.DataFrame([corrs.iloc[i] for i in np.arange(0, corrs.shape[0], 2)])","694103aa":"corrs = corrs[['points_off_turnovers']]\ncorrs.reset_index(inplace = True)\ncorrs = corrs[['level_0', 'points_off_turnovers']]\ncorrs.columns = ['School', 'FBP to POT ratio']\ncorrs","2134ff3f":"corrs = corrs.sort_values('FBP to POT ratio', ascending = False)\ncorrs = corrs[~pd.isnull(corrs['FBP to POT ratio'])]\n\n#we can look in this corr stuff a bit more.","8926bdeb":"\n#HERE IS WHERW WE ADDED THE CONDTION TO FILTER FOR NCAA\/CONF GAMES. what does the nan even represent? how can we even be sure?\nmbb_teams_sr_cleaned = mbb_teams_sr_cleaned[(~mbb_teams_sr_cleaned['points_game'].isnull()) & (~mbb_teams_sr_cleaned['three_points_made'].isnull()) & (~mbb_teams_sr_cleaned['three_points_pct'].isnull())]\n\nmbb_teams_sr_cleaned['tournament'].fillna('Regular', inplace=True)","f23b2346":"#Shooting the 3 ball well yeild more points?\nfig, ax = plt.subplots(figsize = (12,8))\n\nsns.scatterplot(x = mbb_teams_sr_cleaned['three_points_made'], y = mbb_teams_sr_cleaned['points_game'], alpha = 0.5, hue=mbb_teams_sr_cleaned['tournament'])\n\nplt.show() #It is obvious, how about doing 3pt pct vs. points per game.","0534ea4f":"fig, ax = plt.subplots(figsize = (12,8))\n\nsns.scatterplot(x = mbb_teams_sr_cleaned['three_points_pct'], y = mbb_teams_sr_cleaned['points_game'], alpha = 0.5, hue=mbb_teams_sr_cleaned['tournament'])\n\nplt.show()","ccd07673":"mbb_teams_sr_cleaned[['assists', 'turnovers']].isnull().sum()\n\nast_to_df = mbb_teams_sr_cleaned.groupby('market')[['assists', 'turnovers']].agg({'assists':'mean', 'turnovers':'mean'})\n","cf2df5b1":"pd.set_option(\"display.precision\", 8)\nast_to_df['ast:to ratio'] = ast_to_df['assists'] \/ ast_to_df['turnovers']\n\nast_to_df = ast_to_df.sort_values('ast:to ratio', ascending=False)","5a3e9607":"top30_astto = ast_to_df.iloc[:30]","2de2b81d":"top30_schools = top30_astto.index[:30]","9f1db389":"\nsns.set_style(\"darkgrid\")\nx = sns.jointplot(data = ast_to_df, x = 'assists', y = 'turnovers', kind = 'hex', palette='Accent')\nx.fig.suptitle(\"Assists vs. Turnovers Overall\")\nx.fig.subplots_adjust(top=0.93)\nplt.show()","be9d8fd5":"sns.set_style(\"darkgrid\")\nx = sns.jointplot(data = top30_astto, x = 'assists', y = 'turnovers', kind = 'hex', color = 'orangered')\nx.fig.suptitle(\"Assists vs. Turnovers (Top 30 A:T Ratio Teams)\")\nx.fig.subplots_adjust(top=0.93)\nplt.show()","409db6c9":"top30_astto_df = mbb_teams_sr_cleaned[mbb_teams_sr_cleaned['market'].isin(top30_schools)]","6708d2ba":"postseason = ['NCAA', 'Conference']\nonly_tournament = mbb_teams_sr_cleaned[mbb_teams_sr_cleaned['tournament'].isin(postseason)]","1bfd55f1":"only_tournament = mbb_teams_sr_cleaned\n\nsns.set_style(\"darkgrid\")\nx = sns.jointplot(data = mbb_teams_sr_cleaned, x = 'assists', y = 'turnovers', color = 'turquoise', hue = 'tournament', alpha = 0.3)\nx.fig.suptitle(\"Assists vs. Turnovers All Teams\")\nx.fig.subplots_adjust(top=0.93)\nplt.show()","29007e9c":"\nx = sns.jointplot(data = top30_astto_df, x = 'assists', y = 'turnovers', color = 'turquoise', hue = 'tournament', alpha = 0.7)\nx.fig.suptitle(\"Assists vs. Turnovers (Top 30 A:T Ratio Teams)\")\nx.fig.subplots_adjust(top=0.93)\nplt.show()","52f2576c":"x = sns.jointplot(data = only_tournament, x = 'assists', y = 'turnovers', color = 'turquoise', hue = 'tournament', alpha = 0.7)\nx.fig.suptitle(\"Assists vs. Turnovers (Only Postseason Games)\")\nx.fig.subplots_adjust(top=0.93)\nplt.show()","df74c82a":"power_5 = ['ACC', 'BIG10', 'BIG12', 'PAC12', 'SEC']\n\nmbb_teams_sr_cleaned[['opp_two_points_pct', 'opp_three_points_pct', 'opp_turnovers', 'opp_points_game']].isnull().sum()\n\nmbb_teams_sr_cleaned_p5 = mbb_teams_sr_cleaned[mbb_teams_sr_cleaned['conf_alias'].isin(power_5)]\ndefense_df = mbb_teams_sr_cleaned_p5.groupby('market')[['opp_two_points_pct', 'opp_three_points_pct', 'opp_turnovers', 'opp_points_game']].agg({'opp_two_points_pct':'mean', 'opp_three_points_pct':'mean', 'opp_turnovers':'mean', 'opp_points_game':'mean'})\ndefense_df","7073fc69":"defense_df = defense_df.sort_values(['opp_two_points_pct', 'opp_three_points_pct', 'opp_turnovers', 'opp_points_game'], ascending=[True, True, False, True])\ndefense_df['combined_pct_two_points_threes'] = (defense_df['opp_two_points_pct'] + defense_df['opp_three_points_pct']) \/ 2\ndefense_df = defense_df.sort_values('combined_pct_two_points_threes')\n","89762d01":"top30_defense = defense_df.iloc[:30]","fd2759d7":"top30_defense_list = top30_defense.index.tolist() #IN POWER 5 CONFERENCES","95a25bfa":"benchmark_power_5 = [\"Yes\" if benchmark['conf_alias'].iloc[i] in power_5 else \"No\" for i in range(benchmark.shape[0])]\n\nbenchmark['Power5'] = benchmark_power_5","6464a449":"power5_schools = [benchmark.iloc[i]['team_market'] for i in range(benchmark.shape[0]) if benchmark.iloc[i]['Power5'] == \"Yes\"]\npower5_schools = np.unique(power5_schools)\n\nIn_Power_5 = [\"Yes\" if mbb_tournament_sr_win_seed_sorted['win_market'].iloc[i] in power5_schools else \"No\" for i in range(mbb_tournament_sr_win_seed_sorted.shape[0])]\nmbb_tournament_sr_win_seed_sorted['Power5'] = In_Power_5","a58f901f":"top30d_power5 = [\"Yes\" if mbb_tournament_sr_win_seed_sorted['win_market'].iloc[i] in top30_defense_list else \"No\" for i in range(mbb_tournament_sr_win_seed_sorted.shape[0])]\n\nmbb_tournament_sr_win_seed_sorted['Top30_Defense'] = top30d_power5","3e711c65":"#We can do the same for power 5 conferences too\nround_list = np.sort(mbb_tournament_sr_win_seed_sorted['round'].unique())[::-1]\nseasons = mbb_teams_sr_cleaned['season'].unique()\n\nfig, ax = plt.subplots()\n\nfor round in round_list:\n    ax = sns.countplot(x=\"win_seed\", \n                data=mbb_tournament_sr_win_seed_sorted[(mbb_tournament_sr_win_seed_sorted['round'] == round) & (mbb_tournament_sr_win_seed_sorted['season'].isin(seasons))], \n                hue=\"Top30_Defense\", hue_order = ['Yes', 'No'], palette = {\"Yes\":\"tab:red\", \"No\":\"lightpink\"})\n    ax.set_title('Tournament Round Of: ' + str(round))\n    plt.show()","46f8fa6e":"sorted_3avg_overall_filtered = sorted_3avg_overall[sorted_3avg_overall['Average 3pt %'] >= 37.0]\ngt37_schools = sorted_3avg_overall_filtered['School'].tolist()","b88224b0":"ast_to_schools = top30_astto.index.tolist()\nfull_list = mbb_tournament_sr_win_seed_sorted['win_market'].tolist()\n\nast_to_list = [True if full_list[i] in ast_to_schools else False for i in range(len(full_list))]\ngt37_list = [True if full_list[i] in gt37_schools else False for i in range(len(full_list))]\n\nmbb_tournament_sr_win_seed_sorted['Top30_A:T_ratio'] = ast_to_list\nmbb_tournament_sr_win_seed_sorted['>=37% 3pt Avg'] = gt37_list","d491ef80":"#fig, ax = plt.subplots() if we really wanted we could go by season. But since the aggregate of seasons here is just\n#5 seasons, I think this is okay since it is kinda the point to get an aggreagate view of this kind of thing.\n\nfor round in round_list:\n    ax = sns.catplot(x=\"win_seed\", \n                data=mbb_tournament_sr_win_seed_sorted[(mbb_tournament_sr_win_seed_sorted['round'] == round) & (mbb_tournament_sr_win_seed_sorted['season'].isin(seasons))], \n                hue=\"Power5\", hue_order = ['Yes', 'No'], palette = {\"Yes\":\"tab:red\", \"No\":\"lightpink\"}, col = \">=37% 3pt Avg\", col_order = [True, False], kind='count')\n    ax.fig.suptitle('Tournament Round of: ' + str(round))\n    \n    plt.show()","142dd6dd":"for round in round_list:\n    ax = sns.catplot(x=\"win_seed\", \n                data=mbb_tournament_sr_win_seed_sorted[(mbb_tournament_sr_win_seed_sorted['round'] == round) & (mbb_tournament_sr_win_seed_sorted['season'].isin(seasons))], \n                hue=\"Power5\", hue_order = ['Yes', 'No'], palette = {\"Yes\":\"tab:red\", \"No\":\"lightpink\"}, col = \"Top30_A:T_ratio\", col_order = [True, False], kind='count')\n    ax.fig.suptitle('Tournament Round of: ' + str(round))\n    \n    \n    plt.show()","e73314d0":"Here we can get a sense of which conferences among the Power 5 shoot a lot of 3s. It's interesting how this graph and the next histogram below of ACC teams follow a similar shape pattern.","2ab0adfd":"We can be certain since there are many more regular season games than post season games, but looking at the above graphs, it seems that there is about the same kind of distribution of assists to turnovers in postseason play.","311701c3":"As expected, the graph declines as the seed number goes lower but has a small slight increase into seeds 10 and 11. \nOne might wonder if it makes you want to bet on the 10 seeds more than the other lower seeds for upsets.\n\nThis data doesn't include the Virginia upset in 2018. The above graph also does not count the play-in games.","47233738":"# Teams Dataset","cc70abe1":"A lot of schools are very similar to each other in terms of their overall 3pt percentage. These are the top 15 teams and even they don't separate very much.","9cced3bf":"We can see there is a bit of a correlation with shooting the 3 better and making more 3 pointers that scores also increase. Teams that rely on shooting 3s more generally are the teams that have higher box score totals, whether you look at college or the NBA.","3bbc40d0":"Not too much association, as you wouldn't want to let one affect the other. I think for any college it might be a little startling if you let shooting well in one category affect the other. It would assume that shooting free throws better would automatically mean shooting 3s better. However, this isn't the case nor should it ever be.","1da621e4":"Okay, not really any correlation for height and 3pt shooting.","30b4e76a":"Now, based off the saying \"defense wins championships\", we'll see how much of that applies here. Based off of knowledge of NCAA Tournament history, I'll assume they come from a Power 5 conference. ","b1a44362":"It seems even within the top 30 assist:turnover ratio teams, that as the number of assists go up the amount of turnovers also goes up. It also seems to be where the majority of teams in this group are (within the top right quadrant).","573fac84":"From making this graph just for fun, we can see there is no real correlation between height and 3-point percentage. Perhaps this way be encouraging to some.","c93c7232":"Looking at just the Power 5 conferences, we can see that the Big10 has a wide variety of 3pt shooting percentages. The ACC and PAC12 seem to be fairly consistent. ","8b0645cd":"With these plots, we can get a general idea of who may win a NCAA tournament game based on some parameters. The only problem is that this is based on stats from 2013-2018. We must also filter for the seasons 2013\/2018 for these graphs so the data is consistent with which seasons are represented.","7b49486b":"# Insights & Analysis\n\nJudging by seeds and who won tournament games, we can see that having a good assist to turnover ratio and shooting the 3 well engenders good results according to recent NCAA Tournament history. In addition, being in good standing in terms of defense metrics, such as holding opponents to low field goal percentage, forcing turnovers, and lower point totals for the opponent. \n\nMoreover, schools within a Power 5 Conference (ACC, BIG10, BIG12, PAC12, SEC) generally have won more games in NCAA Tournament history. \n\nI do believe with better quality data, I could have gotten more out of analyzing data of holistic detail behind colelge basketball teams. However, this analysis was primarily for exploratry purposes since there is only so much to look at and analyze, especially given that you can't transfer over much data to the tables with more variables since the tables with individual player data only contain information from 5 recent seasons total.\n\nI believe with appropirate data, we could analyze our standing if coming from the perspective of one university. This is something I touched on lightly in this notebook with the University of Louisville.","931c97e5":"Below is the same kind of plotting, except just for winning seeds based on if they belong to a Power 5 conference.","b9d8cf8f":"From this kind of graph, we can get a sense of what teams like to shoot 3s. From watching college basketball during these seasons, Duke and Virginia were more 3-point shooting heavy teams than Louisville or Florida State.\n\nIt's intriguing to note from the above graph and even this one how there are more records of players that shot 100% from 3 in a game than just below 100%. This is probably from either a low amount of attempted threes or players who are hot continuing to shoot and maintain 100% accuracy.","d8f78e25":"# Tournament Dataset","3d381390":"Duke, North Carolina, Syracuse, and Louisville are all currently in the ACC. \n\n1986 was the first year the NCAA completely implemented the 3-point line.\n\n","13de45d0":"It's interesting to see the Summit league have the highest minimum average 3-point percentage. Generally, however, all of these 10 conferences fall within the same general range of percentages of shooting 3s. "}}