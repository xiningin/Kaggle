{"cell_type":{"753c1a0d":"code","7294ae8f":"code","1a724012":"code","4da8f6df":"code","8ddfbf32":"code","6243566d":"code","a9677281":"code","a85f4023":"code","96bde098":"code","6585e269":"code","685f7a76":"code","02b6621e":"code","ea7bde41":"code","ca98dc54":"code","ecbfff0b":"code","613b58f4":"code","76cdde8d":"code","025dca61":"code","6724bbe8":"code","d28f3d56":"code","72105f5e":"markdown","e2a994ff":"markdown","930b3447":"markdown","08eed1b6":"markdown","2b1c848f":"markdown","7bbf9fc4":"markdown","df0c696e":"markdown","c6e30a9f":"markdown","314f7aaa":"markdown","baeb8dd8":"markdown"},"source":{"753c1a0d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \n\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense , Activation\nfrom tensorflow.keras.utils import to_categorical","7294ae8f":"df = load_digits().images\ndf.shape","1a724012":"target = load_digits().target\ntarget.shape","4da8f6df":"df[0]","8ddfbf32":"target[0]","6243566d":"plt.style.use('ggplot')","a9677281":"s=1\nplt.figure(figsize=(10,10))\nfor i in range(10):\n    \n    plt.subplot(5,2,s)\n    plt.imshow(df[i],cmap=\"gray\",interpolation=\"bicubic\")\n    plt.xticks([])\n    plt.yticks([])\n    s +=1\nplt.show()","a85f4023":"classes = [0,1,2,3,4,5,6,7,8,9]","96bde098":"X = df\ny = target\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.35,random_state=42)","6585e269":"w,h  = df[0].shape","685f7a76":"X_train = X_train.reshape(len(X_train),w*h)\nX_test  = X_test.reshape(len(X_test),w*h)","02b6621e":"y_train_cat = to_categorical(y_train)\ny_test_cat = to_categorical(y_test)","ea7bde41":"def  Prediction_cat(model,image):\n    global w,h\n    pred = model.predict(image)\n    \n    color = [\"red\"]*10\n    num = pred.argmax()\n    color[num]  = \"blue\"\n    \n    plt.figure(figsize=(10,4))\n    \n    plt.subplot(1,2,1)\n    plt.imshow(image.reshape(w,h),cmap=\"gray\",interpolation=\"bicubic\")\n    plt.xticks([])\n    plt.yticks([])\n    plt.title(\"Image\")\n    \n    plt.subplot(1,2,2)\n    plt.bar(x=[0,1,2,3,4,5,6,7,8,9],height=pred.flatten(),color=color)\n    plt.xlabel(\"Digits\")\n    plt.ylabel(\"probability\")\n    plt.title(\"Prediction\")\n    plt.xticks([0,1,2,3,4,5,6,7,8,9])\n    plt.show()","ca98dc54":"model = Sequential()\n\nmodel.add(Dense(64,input_shape=X_train[0].shape,activation=\"relu\"))\n\nmodel.add(Dense(128,activation=\"relu\"))\n\nmodel.add(Dense(64,activation=\"relu\"))\n\nmodel.add(Dense(10,activation=\"softmax\"))","ecbfff0b":"model.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=[\"acc\"])","613b58f4":"history = model.fit(X_train,y_train_cat,batch_size=32,epochs=20,validation_split=0.1)","76cdde8d":"result = model.evaluate(X_test.reshape(629,64),y_test_cat)","025dca61":"for i in range(len(model.metrics_names)):\n    print(model.metrics_names[i],\":\",result[i])","6724bbe8":"plt.plot(history.history[\"acc\"])\nplt.plot(history.history[\"val_acc\"])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Acc\")\nplt.legend([\"Training\",\"Validation\"])\nplt.show()","d28f3d56":"for i in range(5):\n    Prediction_cat(model,X_test[i].reshape(1,-1))","72105f5e":"<a id=\"t4.\"><\/a>\n# 4. Result","e2a994ff":"<a id=\"t3.3\"><\/a>\n## 3.3 Model","930b3447":"<a id=\"t3.2\"><\/a>\n## 3.2 Function for models","08eed1b6":"<h1><center>The Digit Dataset<\/center><\/h1>\n\n<center><img src=\"https:\/\/qph.fs.quoracdn.net\/main-qimg-6d3edad38106c4c34c16e325eaf5a8b0.webp\"><\/center>","2b1c848f":"# **Introduction**\nThis dataset is made up of 1797 8x8 images. Each image, like the one shown below, is of a hand-written digit. In order to utilize an 8x8 figure like this, we\u2019d have to first transform it into a feature vector with length 64.\n\n## Contents\n\n\n1. [Import data and python packages](#t1.)\n    * Import packages\n    * Import data\n    * Data shape and info\n2. [Data visualization](#t2.)\n\n3. [Classification](#t3.)\n\n    3.1 [Split data for train and test](#t3.1)\n    \n    3.2 [Functions for model](#t3.2)\n    \n    3.3 [Model](#t3.3)\n\n4. [Result](#t4.)","7bbf9fc4":"<a id=\"t1.\"><\/a>\n# 1. Import data and python packages","df0c696e":"<a id=\"t3.1\"><\/a>\n## 3.1 Split data for train and test","c6e30a9f":"<a id=\"t2.\"><\/a>\n# 2. Data visualization","314f7aaa":"# If you like it, then don't forget upvote :)","baeb8dd8":"<a id=\"t3.\"><\/a>\n# 3. Classification"}}