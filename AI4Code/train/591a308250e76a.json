{"cell_type":{"e48369c9":"code","50eb8e5a":"code","e35080d3":"code","db177a7b":"code","d2ba962c":"code","fce742ed":"code","2e781894":"code","473c6f7a":"code","cb28e385":"code","de0bcfae":"code","6cd0e2ca":"code","cc8bcc9a":"code","0cd7ec48":"code","44932bfd":"code","4b93f702":"code","306f94ad":"code","b930690c":"code","b0c66d9d":"code","c10b9ca0":"code","7ebb6d05":"code","e2057f5f":"code","941fbe62":"code","4638f5ec":"code","43fd3e14":"code","ecf92e48":"code","cb0080dc":"code","30f3a5dc":"code","150baa7d":"code","879c0c36":"code","652cd61e":"code","426b156f":"code","4bc879cb":"code","16f673ac":"code","f36142a9":"code","831f24d7":"code","aa80aa11":"code","f373846e":"code","007b5cbe":"code","d5c19f30":"code","5568ac43":"code","5bd79a66":"code","7c28dc8c":"code","0e653938":"code","429baf79":"code","e989b819":"code","6736d7d6":"code","77facd84":"code","67c89390":"code","d2bcdf9b":"code","72aa8a6b":"code","875519e7":"code","db3b551c":"code","59595887":"code","65b7c232":"code","ef4a2b6a":"code","b3181000":"code","7717134b":"code","a58fcb2e":"code","519e5d90":"code","99274262":"code","3799ecaf":"code","11acad13":"code","723487c9":"code","7f1cd0c7":"code","65ef7fd6":"code","4967742e":"code","bcab53a2":"code","07a8a744":"code","43d8c42b":"code","675929d2":"code","3e385a35":"code","f371ea98":"code","a5efb707":"code","64fcdf42":"code","62a86728":"code","ed767802":"code","4ca7a51f":"code","9b19b4a5":"code","5729cb4f":"code","2effc942":"code","6300b739":"code","ea5e5c72":"code","72400ce5":"code","d09f4f35":"code","5bfeb536":"code","fb0975df":"code","8066ac35":"code","b0ec85a2":"code","7fa845ed":"code","15ca96a2":"code","816b2ccb":"code","f7207a38":"code","1ba7e264":"code","28959890":"code","47b553e6":"code","0aebe20a":"code","b031444d":"markdown","69ff15cb":"markdown","1212306f":"markdown","bce4e623":"markdown","de885e7a":"markdown","3594c398":"markdown","19dbc51e":"markdown","19ac8755":"markdown","6871f307":"markdown","3731df43":"markdown","4bb98181":"markdown","3a9e6d76":"markdown","6bce143d":"markdown","6c584801":"markdown","1fdb30b6":"markdown","1275ac9a":"markdown","09ef3a0a":"markdown","2564f6fc":"markdown","60f95e5c":"markdown","54322fd1":"markdown","1b5b5bb2":"markdown","843e68a1":"markdown","92469474":"markdown","8ceceee0":"markdown"},"source":{"e48369c9":"import pandas as pd\nimport numpy as np   \nimport matplotlib.pyplot as plt  \nimport seaborn as sns \nimport warnings\nwarnings.filterwarnings(\"ignore\")","50eb8e5a":"#upload dataset from system\n'''from google.colab import files\nuploaded = files.upload()'''","e35080d3":"#we can upload the dataset from github :\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/Somali19\/dataset\/main\/netflix_titles.csv')\n","db177a7b":"'''import io\ndf = pd.read_csv(io.BytesIO(uploaded['netflix_titles.csv']))  '''\ndf","d2ba962c":"df.shape","fce742ed":"df.head()","2e781894":"df.tail()","473c6f7a":"df.info()","cb28e385":"df.director.unique()","de0bcfae":"df.cast.unique()","6cd0e2ca":"df.duplicated().sum() #check for duplicate value","cc8bcc9a":"df.isnull().sum() #null value","0cd7ec48":"print(\"Percentage Of Missing Values\")\nPerc_Of_Missing_Values=df.isna().sum()\/len(df)*100\nPerc_Of_Missing_Values[Perc_Of_Missing_Values!=0]","44932bfd":"only_missing=Perc_Of_Missing_Values[Perc_Of_Missing_Values!=0]\nonly_missing.plot(kind=\"bar\")\nplt.title(\"% Age of Missing Values\")\nplt.show()","4b93f702":"df.drop(\"cast\",axis=1,inplace=True)\ndf.drop(\"director\",axis=1,inplace=True)\ndf.drop(\"show_id\",axis=1,inplace=True)\ndf.drop(\"description\",axis=1,inplace=True)","306f94ad":"df[\"country\"]=df[\"country\"].fillna(df[\"country\"].mode()[0])\ndf[\"rating\"]=df[\"rating\"].fillna(df[\"rating\"].mode()[0])","b930690c":"df[df.date_added.isna()]","b0c66d9d":"df=df[df[\"date_added\"].notna()]","c10b9ca0":"df.isna().sum()","7ebb6d05":"df['year_added'] = df['date_added'].apply(lambda x: x.split(\" \")[-1])\ndf['year_added'].head()","e2057f5f":"df['month_added'] = df['date_added'].apply(lambda x: x.split(\" \")[0])\ndf['month_added'].head()","941fbe62":"df.replace({'TV Show': 0, 'Movie': 1}, df[\"type\"]) #replace tv show with 0 and movie with 1","4638f5ec":"df[\"rating\"].unique() #list of unique rating","43fd3e14":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}  #replacing ratings ages with some category (older kids , adults , teens , kids)","ecf92e48":"df['target_ages'] = df['rating'].replace(ratings_ages)  #replace the ratings with above category\ndf['target_ages'].unique() ","cb0080dc":"df","30f3a5dc":"import plotly.graph_objects as go\nval = df['type'].value_counts().index\ncnt = df['type'].value_counts().values\n\nfig = go.Figure([go.Bar(x=val, y=cnt, marker_color='darkturquoise')])\nfig.update_layout(title_text='Netflix Sources Distribution', title_x=0.5)\nfig.show()\n#movie and tv show distribution","150baa7d":"countries=pd.crosstab(df[\"country\"],[\"type\"]).sort_values(by=\"type\",ascending=False)\ncountries.head(10).plot(kind=\"bar\")\nplt.legend()\nplt.title(\"COUNTRY WITH HIGHEST NUMBER OF SHOWS\")\nplt.show()\n#country based on show ","879c0c36":"df[\"type\"].value_counts().plot(kind=\"pie\",autopct=\"%1.1f%%\")\nplt.title(\"%AGE OF MOVIES AND TV SHOWS\")\nplt.legend()\nplt.show()\n#percentage of movie and tv show","652cd61e":"df_movie = df[df['type']=='Movie'].groupby('release_year').count()\ndf_tv = df[df['type']=='TV Show'].groupby('release_year').count()\n\n\ndf_movie.reset_index(level=0, inplace=True)\ndf_tv.reset_index(level=0, inplace=True)\n\n# fig = px.line(data_movie, x=\"release_year\", y=\"type\")\n# fig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_movie['release_year'], y=df_movie['type'],\n                    mode='lines',\n                    name='Movies', marker_color='mediumpurple'))\nfig.add_trace(go.Scatter(x=df_tv['release_year'], y=df_tv['type'],\n                    mode='lines',\n                    name='TV Shows', marker_color='lightcoral'))\nfig.update_layout(title_text='Trend Movies vs TV Shows in recent years', title_x=0.5)\nfig.show()\n#trend of movies and tv shows in recent year (from 1930 to 2020)","426b156f":"df_movie = df[df['type']=='Movie'].groupby('year_added').count()\ndf_tv = df[df['type']=='TV Show'].groupby('year_added').count()\n\n\ndf_movie.reset_index(level=0, inplace=True)\ndf_tv.reset_index(level=0, inplace=True)\n\n# fig = px.line(data_movie, x=\"year_added\", y=\"type\")\n# fig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_movie['year_added'], y=df_movie['type'],\n                    mode='lines',\n                    name='Movies', marker_color='mediumpurple'))\nfig.add_trace(go.Scatter(x=df_tv['year_added'], y=df_tv['type'],\n                    mode='lines',\n                    name='TV Shows', marker_color='lightcoral'))\nfig.update_layout(title_text='Trend Movies vs TV Shows in year added', title_x=0.5)\nfig.show()\n#trend of movies and tv shows in year added (from 2008 to 2020)","4bc879cb":"df_movie = df[df['type']=='Movie'].groupby('month_added').count()\ndf_tv = df[df['type']=='TV Show'].groupby('month_added').count()\n\n\ndf_movie.reset_index(level=0, inplace=True)\ndf_tv.reset_index(level=0, inplace=True)\n\n# fig = px.line(data_movie, x=\"year_added\", y=\"type\")\n# fig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_movie['month_added'], y=df_movie['type'],\n                    mode='lines',\n                    name='Movies', marker_color='mediumpurple'))\nfig.add_trace(go.Scatter(x=df_tv['month_added'], y=df_tv['type'],\n                    mode='lines',\n                    name='TV Shows', marker_color='lightcoral'))\nfig.update_layout(title_text='Trend Movies vs TV Shows in month added', title_x=0.5)\nfig.show()\n#Trend Movies vs TV Shows in month added (from august to september)","16f673ac":"df_tv = df[df[\"type\"] == \"TV Show\"]\ndf_movie = df[df[\"type\"] == \"Movie\"]\n\nmovie_ratings = df_movie.groupby(['target_ages'])['type'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,8)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='target_ages',y='count',data=movie_ratings)\nplt.title('Top Movie Ratings Based On Rating System',size='20')\nplt.show()\n#movie rating ","f36142a9":"tv_ratings = df_tv.groupby(['target_ages'])['type'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,8)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='target_ages',y='count',data=tv_ratings)\nplt.title('Top TV Show Ratings Based On Rating System',size='20')\nplt.show()\n#tv show rating based on rating system","831f24d7":"import plotly.express as px\ndef generate_rating_df(df):\n    rating_df = df.groupby(['rating', 'target_ages']).agg({'type': 'count'}).reset_index()\n    rating_df = rating_df[rating_df['type'] != 0]\n    rating_df.columns = ['rating', 'target_ages', 'counts']\n    rating_df = rating_df.sort_values('target_ages')\n    return rating_df\n\n\nrating_df = generate_rating_df(df)\nfig = px.bar(rating_df, x='rating', y='counts', color='target_ages', title='Ratings of Movies And TV Shows Based On Target Age Groups',  labels={'counts':'COUNT', 'rating':'RATINGS', 'target_ages':'TARGET AGE GROUPS' })\nfig.show()\n#Ratings of Movies And TV Shows Based On Target Age Groups","aa80aa11":"plt.figure(figsize=(12,10))\nsns.set(style=\"whitegrid\")\nax = sns.countplot(y=\"release_year\", data=df_movie, palette=\"coolwarm\", order=df_movie['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF MOVIES', fontsize=15, fontweight='bold')\nplt.show()\n#release year of movies","f373846e":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"release_year\", data=df_tv, palette=\"coolwarm\", order=df_tv['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF TV Show', fontsize=15, fontweight='bold')\nplt.show()\n#release year of tv show","007b5cbe":"from collections import Counter\ncountry_data = df['country']\ncountry_count = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(\n    ', ',',').split(',')))).sort_values(ascending=False)\ntop20country = country_count.head(10)\nplt.figure(figsize=(15,5))\nsns.barplot(x= top20country.index, y=top20country, palette=\"pastel\")\nplt.xticks(rotation=50)\nplt.title('Top 10 countries with most contents', fontsize=15, fontweight='bold')\nplt.show()","d5c19f30":"rating_order_movie =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nrating_order_tv =  [ 'TV-Y', 'TV-G', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14', 'R', 'TV-MA']\nmovie_rating = df_movie['rating'].value_counts()[rating_order_movie]\ntv_rating = df_tv['rating'].value_counts()[rating_order_tv].fillna(0)\ndef rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(15, 7))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()","5568ac43":"rating_barplot(movie_rating,'Movie', 1500)","5bd79a66":"rating_barplot(tv_rating,'TV Show' , 600, 1500)","7c28dc8c":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_movie['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'black',colormap='vlag', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","0e653938":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_tv['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'lightblue', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","429baf79":"#label encoding\nfrom sklearn.preprocessing import LabelEncoder\n'''target_ages_enc = LabelEncoder()\ntarget_ages_enc.fit(df['target_ages'])\ndf['target_ages_enc'] = target_ages_enc.transform(df['target_ages'])'''\n#adults is replaced by 0 , teens is replaced by 1 , older kids is replaced by 2 and kids is replaced by 3","e989b819":"#df.drop('target_ages', axis='columns', inplace=True)","6736d7d6":"type_enc = LabelEncoder()\ntype_enc.fit(df['type'])\ndf['type_enc'] = type_enc.transform(df['type'])\n# movie is replaced by 1 and tv show is replaced by 0","77facd84":"df.drop('type', axis='columns', inplace=True)","67c89390":"title_enc = LabelEncoder()\ntitle_enc.fit(df['title'])\ndf['title_enc'] = title_enc.transform(df['title'])","d2bcdf9b":"df.drop('title', axis='columns', inplace=True)","72aa8a6b":"country_enc = LabelEncoder()\ncountry_enc.fit(df['country'])\ndf['country_enc'] = country_enc.transform(df['country'])","875519e7":"df.drop('country', axis='columns', inplace=True)","db3b551c":"df['date_added_date'] = df['date_added'].apply(lambda x: x.split(\",\")[-2])\ndf['date_added_date'].head()","59595887":"df","65b7c232":"df['date_added_dates'] = df['date_added_date'].apply(lambda x: x.split(\" \")[-1])\ndf['date_added_dates'].head()","ef4a2b6a":"df","b3181000":"df.drop('date_added', axis='columns', inplace=True)","7717134b":"df.drop('date_added_date', axis='columns', inplace=True)","a58fcb2e":"df","519e5d90":"month_added_enc = LabelEncoder()\nmonth_added_enc.fit(df['month_added'])\ndf['month_added_enc'] = month_added_enc.transform(df['month_added'])","99274262":"df.drop('month_added', axis='columns', inplace=True)","3799ecaf":"year_added_enc = LabelEncoder()\nyear_added_enc.fit(df['year_added'])\ndf['year_added_enc'] = year_added_enc.transform(df['year_added'])","11acad13":"df.drop('year_added', axis='columns', inplace=True)","723487c9":"release_year_enc = LabelEncoder()\nrelease_year_enc.fit(df['release_year'])\ndf['release_year_enc'] = release_year_enc.transform(df['release_year'])","7f1cd0c7":"df","65ef7fd6":"df.drop('release_year', axis='columns', inplace=True)","4967742e":"df","bcab53a2":"rating_enc = LabelEncoder()\nrating_enc.fit(df['rating'])\ndf['rating_enc'] = rating_enc.transform(df['rating'])","07a8a744":"df.drop('rating', axis='columns', inplace=True)","43d8c42b":"duration_enc = LabelEncoder()\nduration_enc.fit(df['duration'])\ndf['duration_enc'] = duration_enc.transform(df['duration'])","675929d2":"df.drop('duration', axis='columns', inplace=True)","3e385a35":"listed_in_enc = LabelEncoder()\nlisted_in_enc.fit(df['listed_in'])\ndf['listed_in_enc'] = listed_in_enc.transform(df['listed_in'])","f371ea98":"df.drop('listed_in', axis='columns', inplace=True)","a5efb707":"target_ages_enc = LabelEncoder()\ntarget_ages_enc.fit(df['target_ages'])\ndf['target_ages_enc'] = target_ages_enc.transform(df['target_ages'])","64fcdf42":"df.drop('target_ages', axis='columns', inplace=True)","62a86728":"df","ed767802":"from sklearn.feature_selection import VarianceThreshold","4ca7a51f":"constant_filter = VarianceThreshold(threshold=0)\nconstant_filter.fit(df)\n\nlen(df.columns[constant_filter.get_support()])\n\nconstant_columns = [column for column in df.columns\n                    if column not in df.columns[constant_filter.get_support()]]\n\ndf.drop(labels=constant_columns, axis=1, inplace=True)","9b19b4a5":"df","5729cb4f":"qconstant_filter = VarianceThreshold(threshold=0.16)\nqconstant_filter.fit(df)","2effc942":"len(df.columns[qconstant_filter.get_support()])","6300b739":"qconstant_columns = [column for column in df.columns\n                    if column not in df.columns[qconstant_filter.get_support()]]\n\nprint(len(qconstant_columns))","ea5e5c72":"corrmat = df.corr()\nplt.subplots(figsize=(12,10))\nsns.heatmap(corrmat)","72400ce5":"colormap = plt.cm.RdBu\nplt.subplots(figsize=(15,14))\nsns.heatmap(df.corr(), linewidths=0.1, vmax=1.0, square=True, cmap=colormap, linecolor='black' , annot=True)","d09f4f35":"def correlation(dataset, threshold):\n    col_corr = set() # Set of all the names of deleted columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if  (corr_matrix.iloc[i, j] >= threshold) :\n                colname = corr_matrix.columns[i] # getting the name of column\n                col_corr.add(colname)\n    return col_corr\n","5bfeb536":"corr_features = correlation(df , 0.8)\nlen(set(corr_features))","fb0975df":"df.cov()","8066ac35":"y = df.iloc[:,[10]] #target column","b0ec85a2":"df.drop(df.columns[10], axis=1, inplace=True)","7fa845ed":"x=df","15ca96a2":"from sklearn.model_selection import train_test_split\nxtr,xts,ytr,yts = train_test_split(x,y,test_size=0.2)","816b2ccb":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlist=[]\nfor i in range(1,21):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(xtr,ytr)\n    pred=knn.predict(xts)\n    res1=accuracy_score(yts,pred)\nprint(\"K Nearest Neighbors Top 5 Success Rates is:\" , \"{:.2f}%\".format(100*res1))","f7207a38":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier()\n\nrf.fit(xtr,ytr)\npred1=rf.predict(xts)\nres2=accuracy_score(yts,pred1)\nprint(\"Random Forest Classifier Success Rate is :\", \"{:.2f}%\".format(100*res2))\n","1ba7e264":"lst = [res1 , res2]","28959890":"lst","47b553e6":"lst2 = [\"KNearestNeighbours\" , \"RandomForest\"]","0aebe20a":"plt.rcParams['figure.figsize']=20,8\nsns.set_style('darkgrid')\nax = sns.barplot(x=lst2, y=lst, palette = \"husl\", saturation =2.0)\nplt.xlabel('Classifier Models', fontsize = 20 )\nplt.ylabel('% of Accuracy', fontsize = 20)\nplt.title('Accuracy of different Classifier Models', fontsize = 20)\nplt.xticks(fontsize = 12, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 12)\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy() \n    ax.annotate(f'{round(height,2)}%', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","b031444d":"About the Dataset - \n\n*   This dataset consists of tv shows and movies available on Netflix.\n*    The dataset is collected from Flixable which is a third-party Netflix search engine.\n\n\n\n","69ff15cb":"Content :\n\n      Import required libraries\n      Import the dataset\n      Data Exploration\n      Data Preprocessing\n      Data Analysis and Visualization\n      Feature Engineering\n      Feature Selection\n      Spliting : training and testing dataset\n      Modeling\n      ","1212306f":"We will drop those Rows.They are only 10 Rows .Becoz it is difficult to add date of those Rows","bce4e623":"##Exploratory Data Analysis and Visualization","de885e7a":"##Modeling","3594c398":"##Feature Engineering","19dbc51e":"##Data Preprossing","19ac8755":"![picture](https:\/\/www.it-tech.co.za\/wp-content\/uploads\/2020\/09\/netflix.jpg)\n\n\n\n\n\n\n\n","6871f307":"    So, the dataset have 7787 rows and 12 columns","3731df43":"##Import the required libraries ","4bb98181":"The Dataset Contains : 7787 rows and 12 columns.","3a9e6d76":"Aim :  To analyse the data and various factors affecting the trend of Movies and Shows available on Netflix. Data Visualization was a primary aim and was implemented using Plotly. Building a NETFLIX Movies and TV Shows Prediction Model based on the dataset.","6bce143d":"Let's make New Columns:","6c584801":"## Import the dataset","1fdb30b6":"Display the Dataset","1275ac9a":"Quasi Constant Removal","09ef3a0a":"## Data Exploration","2564f6fc":"Check the Cleaned dataset","60f95e5c":"**NETFLIX - Movies and TV Shows Prediction**","54322fd1":"Fill the missing values:","1b5b5bb2":"Fix the Date_added Column:","843e68a1":"##Feature Selection","92469474":"The missing values and not required column :\n\n    \"show_id\": Not that important. so i will be dropping this.\n    \"director\": Very less information-not needed for the analysis so I will be dropping this.\n    \"cast\": there are too many diferent values so I will be dropping this.\n    \"country\":Important variable hence we need to fix this.\n    \"date_added\": there are just a few cases, so lets scrap them.\n    \"rating\": there are just a few cases, so lets fix them.\n    \"Description\": Not that Important.So i will be dropping this.","8ceceee0":" Drop (cast,director,show id,description) columns:"}}