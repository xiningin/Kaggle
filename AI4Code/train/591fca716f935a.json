{"cell_type":{"41ed30c2":"code","a2ece7c9":"code","e924ed81":"code","4301d47b":"code","e88d13b0":"code","df378788":"code","fe20d732":"code","78dac7bc":"markdown","d6de6133":"markdown","9b5e592c":"markdown","26e1fb3a":"markdown","85802c1c":"markdown"},"source":{"41ed30c2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport math\n\n","a2ece7c9":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndataset = pd.read_csv('\/kaggle\/input\/ads-ctr-optimisation\/Ads_CTR_Optimisation.csv')\ndataset.head()\n## Goal: to figure out which ad that has the highest conversion rate","e924ed81":"#N=10000 # number of rounds  the ad  has been shown \nN=600 ## OR 600, we can test different number of rounds and find the fastest way\nd=10 # number of ads\n\nads_selected=[]\n\nnumber_of_selections=[0]*d ## 0, then 1. It will be incremented everytime the ad is selected [0,0,0,0,0,0,0,0,0,0]\n# Number of times the ad i was selected up to round n\n\nsum_of_rewards =[0]*d # The sum of rewards of the ad i up to round n [0,0,0,0,0,0,0,0,0,0]\n\ntotal_reward=0\n","4301d47b":"## Start a For-Loop up to round 10 000\n#Our Tasks:\n#- 1- Average reward of ad i up to round n\n#- 2- the Confidence Interval at round n\n#- 3- Select the ad with the highest UCB\n\n\nfor n in range(0,N): # From 0 to 10000\n    ## We want to select the ad, start with the first ad\n    ad=0 ## it initializes from 0 and then it will go to the ad 1, ad 2, and so on\n    max_upper_bound=0  ## we will update this\n    \n    #Another loop to go through each ad from 1 to 10 (which is d)\n    for i in range(0,d): # n is the user\n        ## The average reward\n        if (number_of_selections[i]>0): # at least one ad has been selected, because we don't want to divide by zero\n            average_reward = sum_of_rewards[i] \/ number_of_selections[i]\n            \n            delta_i=math.sqrt(3\/2 * math.log(n + 1)\/number_of_selections[i]) ## Confidence Interval\n          \n            \n            upper_bound=average_reward+delta_i\n        else:\n            # we have to select the ad, if it was not selected\n            upper_bound=1e400 #if that ad was not selected, we select the crazy number\n            # Apparently some python trick that developers use\n            \n        if (upper_bound)>max_upper_bound: ## if the current upper_bound is bigger than the max_upper_bound we update the max_upper_bound\n            max_upper_bound=upper_bound \n            ad=i\n        # We selected the ad that has not been selected yet\n        # We selected the ad with the maximum upper_bound\n        \n    #Now we need to update everything we have (ads_Selected, numbers_of_selection, sums_of_rewards, total_reward)\n    ads_selected.append(ad)\n    number_of_selections[ad]+=1 \n    # incrementing the selected ad by 1\n    #Well, since this ad was just selected in this new round, well, therefore, we need to update the\n    #element of index add basically the index of the ad was just selected inside this numbers of selections\n    \n    reward=dataset.values[n, ad] #the reward for each user\n    sum_of_rewards[ad]=sum_of_rewards[ad]+reward \n    total_reward=total_reward+reward\n        \n    \n","e88d13b0":"plt.hist(ads_selected)\nplt.title('Histogram of ads selections')\nplt.xlabel('Ads')\nplt.ylabel('Number of times each ad was selected')\nplt.show()","df378788":"## The ad4 has the highest CTR in comparison with others","fe20d732":"## We need to experiment in which rounds we can identify\n\n# N=10000 --> N=5000\n# 500 is already hard to say, not enough to identify the best ad\n\n#600 is already better","78dac7bc":"## Importing the dataset","d6de6133":"## Visualising the results","9b5e592c":"## Implementing UCB","26e1fb3a":"## Importing the libraries","85802c1c":"# Upper Confidence Bound (UCB)"}}