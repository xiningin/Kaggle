{"cell_type":{"cf34c67d":"code","e205c4a6":"code","3264db5e":"code","5bb35d1c":"code","7dfe28de":"code","a60469f1":"code","c10487fa":"code","eb909da2":"code","9d1cd18a":"code","08eb987e":"code","a291744e":"code","00426117":"code","9227a5e4":"code","46644989":"code","77754999":"code","2aa2187f":"code","ee4d3d9b":"markdown","bd46b5d8":"markdown","bac8e78e":"markdown","45b27eea":"markdown","2ddd2b5d":"markdown","148563b6":"markdown","826daa28":"markdown","43c39658":"markdown","8f5d55d6":"markdown"},"source":{"cf34c67d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n%matplotlib inline\nfrom sklearn import tree\nfrom sklearn.metrics import r2_score\n\nfrom sklearn.metrics import accuracy_score","e205c4a6":"# Loading the data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n# Store our test passenger IDs for easy access\nPassengerId = test['PassengerId']\n\n# Showing overview of the train dataset\ntrain.head()\n","3264db5e":"full_data = [train, test]\n\n# Feature that tells whether a passenger had a cabin on the Titanic\ntrain['Has_Cabin'] = train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ntest['Has_Cabin'] = test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n\n# Create new feature FamilySize as a combination of SibSp and Parch\nfor dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n# Create new feature IsAlone from FamilySize\nfor dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \n    \n# Remove all NULLS in the Embarked column    \nfor dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n# Remove all NULLS in the Fare column\nfor dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\n# Remove all NULLS in the Age column\nfor dataset in full_data:\n    dataset['Age'] = dataset['Age'].fillna(train['Age'].mean())\n    \n# Define function to extract titles from passenger names\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n    \n# Group all non-common titles into one single grouping \"Rare\"\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nfor dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Master\": 2, \"Mrs\": 3, \"Miss\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] ;\n    \n","5bb35d1c":"# Feature selection: remove variables no longer containing relevant information\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp']\ntrain = train.drop(drop_elements, axis = 1)\ntest  = test.drop(drop_elements, axis = 1)","7dfe28de":"!pip install pycaret","a60469f1":"!python3.7 -m pip install --upgrade pip","c10487fa":"from pycaret.classification import *\nclf1 = setup(data = train, \n             target = 'Survived',\n             numeric_imputation = 'mean',\n             categorical_features = ['Sex','Embarked', 'Pclass', 'Parch', 'Has_Cabin', 'IsAlone', 'Title'], \n             silent = True,\n            remove_outliers = True,\n            normalize = True)","eb909da2":"compare_models()","9d1cd18a":"model = create_model('lr')","08eb987e":"tune_model(model)","a291744e":"plot_model(estimator = model, plot = 'auc')","00426117":"plot_model(estimator = model, plot = 'feature')","9227a5e4":"plot_model(estimator = model, plot = 'confusion_matrix')","46644989":"predictions = predict_model(model, data=test)\npredictions.head()","77754999":"submissions=pd.DataFrame({\"PassengerId\": PassengerId,\n                         \"Survived\": predictions['Label']})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","2aa2187f":"submissions","ee4d3d9b":"# Plot curve","bd46b5d8":"# Choose and Create Best Model ","bac8e78e":"# Delete Columns","45b27eea":"# Setup Pycaret classification","2ddd2b5d":"# EDA & Feature Engineering","148563b6":"# Prediction","826daa28":"# Tune Model","43c39658":"# Install Pycaret","8f5d55d6":"# Compare models"}}