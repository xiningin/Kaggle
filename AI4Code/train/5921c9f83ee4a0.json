{"cell_type":{"b42114ae":"code","b0957faf":"code","40e64e29":"code","e2b046b0":"code","21e1b51d":"code","7221af3e":"code","e6348683":"code","845e27da":"code","7a84c769":"code","8d1dcaf7":"code","215ab815":"code","97b6366e":"code","ba377676":"code","7e8cb415":"code","a191e287":"code","4e234a9f":"code","77d5c041":"code","c57e0625":"code","6aaf8ab0":"code","ac6e7036":"code","aa11da87":"code","fd19de39":"code","716e1c2c":"code","402d880d":"code","954e51ab":"code","442ea774":"code","521d6e4c":"code","9b4bd39a":"code","5a3f5e77":"code","dd63dc08":"code","b32dece9":"code","a640bf8b":"code","8b924f82":"code","e65475b6":"code","6692a5a2":"code","8b4fe3be":"code","f69adab0":"code","c2ce393f":"code","ecb92b13":"code","2f66aca6":"code","2071f1c2":"code","8ad78139":"code","75945376":"code","0467346f":"code","5558e72e":"markdown","4af59ef6":"markdown","82bb8dc1":"markdown","b42da947":"markdown","72c6a179":"markdown","c761a934":"markdown","f98a0c67":"markdown","5730683a":"markdown","a87e52b8":"markdown","fb70857e":"markdown","19b5f0ce":"markdown","7b0e1729":"markdown","459d8ef5":"markdown","7c64ed87":"markdown","28c5832a":"markdown","809fa5df":"markdown","ce215780":"markdown","829f4ba3":"markdown","b5a23408":"markdown","fdf89a66":"markdown","1930a167":"markdown","4a711107":"markdown","76644876":"markdown","2a77018c":"markdown","fa602c5b":"markdown","fc32f4cc":"markdown","d1f3de96":"markdown","978e618d":"markdown","2fe58182":"markdown","1a441bf1":"markdown","cea2dd3d":"markdown","a04143ca":"markdown","63a93124":"markdown","a45fe52c":"markdown","ba7ca981":"markdown","27ec517b":"markdown"},"source":{"b42114ae":"import numpy as np\nimport pandas as pd","b0957faf":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","40e64e29":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')","e2b046b0":"df.head()","21e1b51d":"df.info()","7221af3e":"df.isnull().sum()","e6348683":"df['zip'] = df['zip'].fillna(df.groupby('twp')['zip'].transform('max'))","845e27da":"df.isnull().sum()","7a84c769":"df.shape","8d1dcaf7":"df = df.dropna()","215ab815":"df.shape","97b6366e":"df.isnull().sum()","ba377676":"df.head()","7e8cb415":"df['zip'].value_counts().head()","a191e287":"df['twp'].value_counts().head()","4e234a9f":"df['title'].nunique()","77d5c041":"reson=[]\ndef reasons(x):\n    reson.append(x.split(':')[0])\ndf['title'].apply(reasons)\ndf['reason'] = reson","c57e0625":"Sub_reason=[]\ndef sub_reasons(x):\n    sub_reason = x.split(':')[1]\n    Sub_reason.append(sub_reason.replace(' -',''))\ndf['title'].apply(sub_reasons)\ndf['sub_reasons'] = Sub_reason","6aaf8ab0":"df['reason'].value_counts()","ac6e7036":"plt.figure(figsize=(8,5),dpi=100)\nsns.countplot(x ='reason',data= df)\nplt.title('Reason count',fontsize=10)\nplt.ylabel('Emergency reason count',fontsize=10)\nplt.xlabel('Reasons',fontsize=10);","aa11da87":"type(df['timeStamp'].iloc[0])","fd19de39":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","716e1c2c":"days=[]\nhours =[]\nmonths =[]\ndayofweek =[]\ndef hdmcol(x):\n    days.append(x.day)\n    hours.append(x.hour)\n    months.append(x.month)\n    dayofweek.append(x.dayofweek)\npd.to_datetime(df['timeStamp'])\ndf['timeStamp'].apply(hdmcol)\ndf['day'] = days\ndf['hour'] = hours\ndf['month'] = months\ndf['dayofweek'] = dayofweek\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['day_of_week'] = df['dayofweek'].map(dmap)\ndf.drop('dayofweek', inplace = True,axis =1)\ndf.head()","402d880d":"plt.figure(figsize=(12,5),dpi=200)\nsns.countplot(x='day_of_week',data = df, hue = 'reason')\nplt.title('Day of week vs. reason count on that day',fontsize=17)\nplt.legend(loc=(1.05,0.5))\nplt.ylabel('Emergency reson count',fontsize=13)\nplt.xlabel('Day of week',fontsize=13);","954e51ab":"plt.figure(figsize=(12,5),dpi=200)\nsns.countplot(x='month',data=df,hue='reason')\nplt.title('Month vs. reason count on that month',fontsize=17)\nplt.legend(loc=(1.05,0.5))\nplt.ylabel('Emergency reson count',fontsize=13)\nplt.xlabel('Month',fontsize=13);","442ea774":"def day_night(x):\n    if x in range(7,20):\n        return 'Day hour'\n    elif x in range(0,7):\n        return 'Night hour'\n    else:\n        return 'Night hour'","521d6e4c":"df['day_night']=df['hour'].apply(day_night)","9b4bd39a":"plt.figure(figsize=(12,5),dpi=200)\nsns.countplot(x='day_night',data=df,hue='reason')\nplt.title('Day and Night vs. Emergency reason count in day and night',fontsize=17)\nplt.legend(loc=(1.05,0.5))\nplt.ylabel('Emergency reson count',fontsize=13)\nplt.xlabel('Day and Night hours',fontsize=13);","5a3f5e77":"plt.figure(figsize=(18,6),dpi=200)\nsns.countplot(x='hour',data=df,hue='reason')\nplt.title('Hours vs. Emergency reason count in day and night',fontsize=17)\nplt.legend(loc=(1.05,0.5))\nplt.ylabel('Emergency reson count',fontsize=13)\nplt.xlabel('Hours',fontsize=13);","dd63dc08":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='twp',data=df[df['reason']=='Fire'].sort_values(by='twp'))\nplt.title('Township vs. Fire emergency count',fontsize=20)\nplt.ylabel('Fire Count',fontsize=15)\nplt.xlabel('Township',fontsize=15)\nplt.xticks(rotation=90);","b32dece9":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='sub_reasons',data=df[df['reason']=='Fire'])\nplt.title('Sub_reasons count for Fire reason',fontsize=20)\nplt.ylabel('Sub reason count for Fire',fontsize=15)\nplt.xlabel('Sub reasons count',fontsize=15)\nplt.xticks(rotation=90);","a640bf8b":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='twp',data=df[df['sub_reasons']==' FIRE ALARM'].sort_values(by='twp'))\nplt.title('Township vs. FIRE ALARM count',fontsize=20)\nplt.ylabel('FIRE ALARM Count',fontsize=15)\nplt.xlabel('Township',fontsize=15)\nplt.xticks(rotation=90);","8b924f82":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='twp',data=df[df['reason']=='EMS'].sort_values(by='twp'))\nplt.title('Township vs. EMS emergency count',fontsize=20)\nplt.ylabel('EMS Count',fontsize=15)\nplt.xlabel('Township',fontsize=15)\nplt.xticks(rotation=90);","e65475b6":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='twp',data=df[(df['sub_reasons']==' FALL VICTIM')].sort_values(by='twp'))\nplt.title('Township vs. FALL VICTIM count',fontsize=20)\nplt.ylabel(' FALL VICTIM Count',fontsize=15)\nplt.xlabel('Township',fontsize=15)\nplt.xticks(rotation=90);","6692a5a2":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='twp',data=df[(df['sub_reasons']==' RESPIRATORY EMERGENCY')].sort_values(by='twp'))\nplt.title('Township vs. RESPIRATORY EMERGENCY count',fontsize=20)\nplt.ylabel(' RESPIRATORY EMERGENCY Count',fontsize=15)\nplt.xlabel('Township',fontsize=15)\nplt.xticks(rotation=90);","8b4fe3be":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='twp',data=df[df['reason']=='Traffic'].sort_values(by='twp'))\nplt.title('Township vs. traffic emergency count',fontsize=20)\nplt.ylabel('Traffic Count',fontsize=15)\nplt.xlabel('Township',fontsize=15)\nplt.xticks(rotation=90);","f69adab0":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='sub_reasons',data=df[df['reason']=='Traffic'])\nplt.title('Sub_reasons count for Traffic reason',fontsize=20)\nplt.ylabel('Sub reason count for Traffic',fontsize=15)\nplt.xlabel('Sub reasons count',fontsize=15)\nplt.xticks(rotation=90);","c2ce393f":"plt.figure(figsize=(20,5),dpi=200)\nsns.countplot(x='twp',data=df[df['sub_reasons']==' VEHICLE ACCIDENT'].sort_values(by='twp'))\nplt.title('Township vs. VEHICLE ACCIDENT count',fontsize=20)\nplt.ylabel(' VEHICLE ACCIDENT Count',fontsize=15)\nplt.xlabel('Township',fontsize=15)\nplt.xticks(rotation=90);","ecb92b13":"def date(x):\n    return x.date()\ndf['date'] = df['timeStamp'].apply(date)\ndf.head()","2f66aca6":"plt.figure(figsize=(20,5),dpi=200)\ndf[df['reason']=='Fire'].groupby('date').count()['twp'].plot()\nplt.title('Date vs. fire emergency count',fontsize=20)\nplt.ylabel('Fire Count',fontsize=15)\nplt.xlabel('Date',fontsize=15)\nplt.xticks(rotation=90);","2071f1c2":"plt.figure(figsize=(20,5),dpi=200)\ndf[df['reason']=='EMS'].groupby('date').count()['twp'].plot()\nplt.title('Date vs. EMS emergency count',fontsize=20)\nplt.ylabel('EMS Count',fontsize=15)\nplt.xlabel('Date',fontsize=15)\nplt.xticks(rotation=90);","8ad78139":"plt.figure(figsize=(20,5),dpi=200)\ndf[df['reason']=='Traffic'].groupby('date').count()['twp'].plot()\nplt.title('Date vs. Traffic emergency count',fontsize=20)\nplt.ylabel('Traffic Count',fontsize=15)\nplt.xlabel('Date',fontsize=15)\nplt.xticks(rotation=90);","75945376":"data1 = df.groupby(by=['day_of_week','hour']).count()['reason'].unstack()\ndata1","0467346f":"plt.figure(figsize=(15,10),dpi=200)\nsns.heatmap(data1,linewidths=1)\nplt.xlabel('Hours',fontsize=15)\nplt.ylabel('Day of week',fontsize=15)\nplt.title('Emergency count on specific day in specific time frame',fontsize=20);","5558e72e":"<h4><b>Township with most EMS emergency<\/b><\/h4>","4af59ef6":"In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. We will create a new column called \"Reason\" that contains this string value. \n\nFor example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS.","82bb8dc1":"<h4><b>what are the emergency reason count in day and night?<\/b><\/h4>\n<ul>\n    <li>For day hour = 7 - 19<\/li>\n    <li>For night hour = 00-6 and 18-00<\/li>\n<\/ul>","b42da947":"<li><h5><b>Norristown<\/b> has most EMS emergencies<\/h5><\/li>\n<li><h5><b>Fall victim and Respiratory<\/b> are the sub reason due to which most of the EMS emergency occurs<\/h5><\/li>\n<li><h5><b>Lower Providence,Abington and Lower Merion<\/b> are the township for the most fall victims<\/h5><\/li>\n<li><h5><b>Norristown and Lower Merion<\/b> are the township for the most Respiratory emergency implies that air pollution is higher than other cities<\/h5><\/li>","72c6a179":"How many unique title codes are there? ","c761a934":"<h4><b>Now total null values are 462 which we will drop directly<\/b><\/h4>","f98a0c67":"## Creating new features","5730683a":"<h4><b>Township with most Traffic emergency<\/b><\/h4>","a87e52b8":"____\n** Import numpy and pandas **","fb70857e":"Check the info() of the df ","19b5f0ce":"What is the most common Reason for a 911 call based off of this new column? ","7b0e1729":"**Create a new column called 'Date' that contains the date from the timeStamp column.** ","459d8ef5":"<h3>Key Observation for the township<\/h3>\n\n<li><h5><b>Lower Merion and Abington<\/b> has most emergencies occurs.<\/h5><\/li>\n<li><h5>These cities needs better medical service and traffic control systems<\/h5><\/li>\n<li><h5>One way is to encourage the people to use public transport this will decrease the no of vehicles on road and thus lower the traffic emergency also reduce the pollution.<\/h5><\/li>\n<li><h5>Provide the guidelines for the maintain good health and regular health chekups.<\/h5><\/li>","7c64ed87":"## Data and Setup","28c5832a":"create a countplot of 911 calls by Reason.","809fa5df":"<h4><b>Dealing with the null value<\/b><\/h4>","ce215780":"**We will create 3 new columns called Hour, Month, and Day of Week based off of the timeStamp column.**\n**We will map the actual string names to the day of the week: **\n\n    dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","829f4ba3":"## Basic Questions","b5a23408":"# 911 Calls Analysis Project","fdf89a66":"\n* lat : String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zipcode\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Dummy variable (always 1)\n","1930a167":"Read in the csv file as a dataframe called df ","4a711107":"<h3> Observations for Emergency reasons and their respective sub reasons with township<\/h3>","76644876":"<li><h5><b>Lower Merion and Upper Merion<\/b> has most Traffic emergencies<\/h5><\/li>\n<li><h5><b>Vehicle accidents<\/b> is the sub reason due to which most of the Traffic emergency occurs<\/h5><\/li>\n<li><h5><b>Lower Merion<\/b> are the township for the most Vehicle accidents occurs<\/h5><\/li>","2a77018c":"<h4><b>Township with most Fire emergency<\/b><\/h4>","fa602c5b":"<h3>Lets see the emergency count on specific day in specific time frame<\/h3>","fc32f4cc":"<h4><b>It is clerly seen that most of the emergency occurs during day hours for each day of the week except on weekend it is less than any other day<\/b><\/h4>","d1f3de96":"<ul>\n<li><h5><b>Emergency calls in day time is large due to the high crowd in the prime time<\/b><\/h5><\/li>\n<li><h5><b>Prime time is between 8:00 to 18:00 where most of the emergency calls occurs<\/b><\/h5><\/li>\n<li><h5><b>Prime time for the traffic emergency is between the 11:00 to 17:00 due to the office crowd<\/b><\/h5><\/li>","978e618d":"<h3> 3 separate plots with each plot representing a Reason for the 911 calls grouping dates<\/h3>","2fe58182":"<li><h5><b>Lower merion<\/b> has most Fire emergencies<\/h5><\/li>\n<li><h5><b>Fire alarm<\/b> is the sub reason due to which most of the fire emergency occurs<\/h5><\/li>\n<li><h5><b>Lower Merion and Abington<\/b> are the township for the most fire alarm<\/h5><\/li>","1a441bf1":"What are the top 5 zipcodes from which most 911 calls recived? ","cea2dd3d":"What are the top 5 townships (twp) from which most 911 calls recived? ","a04143ca":"**Now do the same for Month:**","63a93124":"** Import visualization libraries and set %matplotlib inline. **","a45fe52c":"<li><h5><b>Fire and Traffic<\/b> is peak between the 2018 to 2019<\/h5><\/li>\n<li><h5><b>EMS<\/b> emergency is quiet same from 2016<\/h5><\/li>","ba7ca981":"<h3><b> Sub reasons due to which fire emergency occurs<\/b><\/h3>","27ec517b":"<h5><b>EMS emergency is high throughout the week while fire emergency is lower and quiet similiar for all days<\/b><\/h5> "}}