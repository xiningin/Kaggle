{"cell_type":{"06819cf7":"code","d74c88d7":"code","252f86e0":"code","f4fa676a":"code","baf3946b":"code","b974ef78":"code","bbaadee7":"code","edbb9c00":"code","f7341fb6":"code","c8842f41":"code","ccdb5885":"code","8f561cdf":"code","4dea79db":"code","ccf2e4a2":"code","5d76a3e4":"code","7529d431":"code","49b15649":"code","47cbbc71":"code","ade745ab":"code","b93c7858":"code","172346ff":"code","22a3965a":"code","d133654d":"code","4b42304f":"code","d464b2b3":"code","04490248":"code","e7f1c63a":"code","95ab790a":"code","339e8c44":"code","bad9d893":"code","0340087b":"code","b923dc45":"code","35663f1c":"code","17eb35bc":"code","8d2f0e03":"code","5dbc855a":"code","faac6812":"code","182f7655":"code","f236fd39":"code","3fdba1b7":"code","96b90651":"code","e9d2c65c":"code","0323fe3f":"code","39a50ff2":"code","726cb6fe":"code","9312034c":"code","0ee9b8ba":"code","c8f70bf9":"code","f01d3e25":"code","2dc7aeb6":"code","6785ce74":"code","9dd3e07f":"markdown","200fbf53":"markdown","7b0c39b1":"markdown","f95c5d6f":"markdown","542e9582":"markdown","722ae6e3":"markdown","fef2a7e1":"markdown","fc9fd1fb":"markdown","c9b9645e":"markdown"},"source":{"06819cf7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport scipy.optimize as opt\nfrom sklearn import preprocessing\nimport pylab as pl\n","d74c88d7":"df = pd.read_csv('..\/input\/satisfaction_v2.csv')\ndf.head()","252f86e0":"df.info()","f4fa676a":"df.columns","baf3946b":"df.describe().round(2)","b974ef78":"df['satisfaction_v2'].unique()","bbaadee7":"sns.countplot(x = 'satisfaction_v2', data = df, order = df['satisfaction_v2'].value_counts().index)\nplt.xticks(rotation=0)","edbb9c00":"pd.crosstab(df['satisfaction_v2'], df['Age'], dropna=True, normalize='columns')","f7341fb6":"k = pd.crosstab(df['Age'],df['satisfaction_v2'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False, figsize=(25, 5))\nplt.show()","c8842f41":"df['Customer Type'].unique()","ccdb5885":"sns.countplot(x = 'Customer Type', data = df, order = df['Customer Type'].value_counts().index)\nplt.xticks(rotation=0)","8f561cdf":"pd.crosstab(df['satisfaction_v2'], df['Customer Type'], dropna=True, normalize='columns')","4dea79db":"k = pd.crosstab(df['Customer Type'],df['satisfaction_v2'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False)\nplt.show()","ccf2e4a2":"k = pd.crosstab(df['Age'],df['Customer Type'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False, figsize=(25, 5))\nplt.show()","5d76a3e4":"df['Type of Travel'].unique()","7529d431":"sns.countplot(x = 'Type of Travel', data = df, order = df['Type of Travel'].value_counts().index)\nplt.xticks(rotation=0)","49b15649":"pd.crosstab(df['satisfaction_v2'], df['Type of Travel'], dropna=True, normalize='columns')","47cbbc71":"k = pd.crosstab(df['Type of Travel'],df['satisfaction_v2'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False)\nplt.show()","ade745ab":"k = pd.crosstab(df['Age'],df['Type of Travel'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False, figsize=(25, 5))\nplt.show()","b93c7858":"df['Class'].unique()","172346ff":"sns.countplot(x = 'Class', data = df, order = df['Class'].value_counts().index)\nplt.xticks(rotation=0)","22a3965a":"pd.crosstab(df['satisfaction_v2'], df['Class'], dropna=True, normalize='columns')","d133654d":"k = pd.crosstab(df['Class'],df['satisfaction_v2'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False)\nplt.show()","4b42304f":"k = pd.crosstab(df['Age'],df['Class'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False, figsize=(25, 5))\nplt.show()","d464b2b3":"df['Gender'].unique()","04490248":"sns.countplot(x = 'Gender', data = df, order = df['Gender'].value_counts().index)\nplt.xticks(rotation=0)","e7f1c63a":"pd.crosstab(df['satisfaction_v2'], df['Gender'], dropna=True, normalize='columns')","95ab790a":"k = pd.crosstab(df['Gender'],df['satisfaction_v2'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False)\nplt.show()","339e8c44":"k = pd.crosstab(df['Age'],df['Gender'], dropna=True, normalize='columns')\nk.plot.bar(stacked=False, figsize=(25, 5))\nplt.show()","bad9d893":"plt.figure(figsize=(20,10))\nsns.countplot(x = 'Age', data = df, order = df['Age'].value_counts().index)\nplt.xticks(rotation=90)","0340087b":"df.Gender[df.Gender == 'Male'] = 1\ndf.Gender[df.Gender == 'Female'] = 0\n\ndf.satisfaction_v2[df.satisfaction_v2 == 'satisfied'] = 1\ndf.satisfaction_v2[df.satisfaction_v2 == 'neutral or dissatisfied'] = 0\n\ndf['Type of Travel'][df['Type of Travel'] == 'Personal Travel'] = 1\ndf['Type of Travel'][df['Type of Travel'] == 'Business travel'] = 0\n\ndf['Customer Type'][df['Customer Type'] == 'Loyal Customer'] = 1\ndf['Customer Type'][df['Customer Type'] == 'disloyal Customer'] = 0\n\ndf.Class[df.Class == 'Eco'] = 1\ndf.Class[df.Class == 'Business'] = 2\ndf.Class[df.Class == 'Eco Plus'] = 3\n\npd.options.mode.chained_assignment = None\n\ndf = df.apply(pd.to_numeric, errors='coerce')","b923dc45":"df.head(1000)","35663f1c":"sat_df = df[['Age','Gender','Flight Distance','Customer Type','Class','satisfaction_v2']]\nsat_df['satisfaction_v2'] = sat_df['satisfaction_v2'].astype('int')\nsat_df.head()","17eb35bc":"sat_df.shape","8d2f0e03":"X = np.asarray(sat_df[['Age','Gender','Flight Distance','Customer Type','Class']])\nX[0:5]","5dbc855a":"y = np.asarray(sat_df['satisfaction_v2'])\ny[0:5]","faac6812":"from sklearn import preprocessing\nX = preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","182f7655":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4 )\nprint('Train set:', X_train.shape, y_train.shape)\nprint('Test set:', X_test.shape, y_test.shape)","f236fd39":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nLR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)\nLR","3fdba1b7":"yhat = LR.predict(X_test)\nyhat","96b90651":"yhat_prob = LR.predict_proba(X_test)\nyhat_prob","e9d2c65c":"# Jaccard index\nfrom sklearn.metrics import jaccard_similarity_score\njaccard_similarity_score(y_test, yhat)","0323fe3f":"# Confusion matrix\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport itertools\ndef plot_confusion_matrix(cm, classes, \n                         normalize=False,\n                         title='Confusion matrix',\n                         cmap=plt.cm.Blues):\n    \n    if normalize : \n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n    \n    print(cm)\n    \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks,classes)\n    \n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i,j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i,j] > thresh else \"black\")\n    \n    plt.tight_layout()\n    plt.ylabel(\"True label\")\n    plt.xlabel(\"Predicted label\")\n\nprint(confusion_matrix(y_test, yhat, labels=[1,0]))","39a50ff2":"cnf_matrix = confusion_matrix(y_test, yhat, labels=[1,0])\nnp.set_printoptions(precision=2)\n\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=['churn=1','churn=0'],normalize= False, title='Confusion matrix')","726cb6fe":"print(classification_report(y_test, yhat))","9312034c":"# Log Loss\nfrom sklearn.metrics import log_loss\nlog_loss(y_test, yhat_prob)","0ee9b8ba":"a = 19\nk =  0\nds = 2051\nct = 1\ncs = 2","c8f70bf9":"from sklearn.preprocessing import Normalizer\n# g = np.reshape(1,-1)\ng= np.array([[a,k,ds,ct,cs]])\n# g = preprocessing.StandardScaler().fit(g).transform(g)\n# g = preprocessing.StandardScaler().fit(g.reshape(1, -1)).transform(g.reshape(1, -1))\nZ = preprocessing.Normalizer().fit(g.reshape(1, -1))\nZ","f01d3e25":"B = Z.transform(g)\nB","2dc7aeb6":"y_prob = LR.predict(B)\ny_prob","6785ce74":"y_prob = LR.predict_proba(B)\ny_prob\n","9dd3e07f":"### **3. *Normalize data* : ** <a id=\"Norm\"><\/a> ","200fbf53":"### **1. *Introduction* ** : <a id=\"Intro\"><\/a> ","7b0c39b1":"### ** 6. *Prediction using test set* :**  <a id=\"Pre\"><\/a> ","f95c5d6f":"### ** 7. *Evaluation* :**  <a id=\"Eva\"><\/a> ","542e9582":"### **2. *Exploration* :** <a id=\"Exp\"><\/a> ","722ae6e3":"### ** 5. *Modeling Logistic Regression*** : <a id=\"Mod\"><\/a> ","fef2a7e1":"### ** 4. *Train \/ Test Data set* ** : <a id=\"T\/T\"><\/a> ","fc9fd1fb":"![](https:\/\/cdn.pixabay.com\/photo\/2017\/01\/09\/12\/49\/mistake-1966448_960_720.jpg)\n\nIs it possible to know if a new customer gonna be satisfied or not, basing on his personnal information such as : gender, age, type of travel ... ? <br>\n<br>\nTo figure it out,first i explore the data \" US Airline passenger satisfaction survey \" , and second i use the machine learning classification technique called Logistic regression.\n\n[1. Introduction : ](#Intro) <br>\n[2. Exploration :](#Exp) <br>\n[3. Normalize Data :](#Norm) <br>\n[4. Train\/Test Data set :](#T\/T) <br>\n[5. Modeling Logistic Regression :](#Mod) <br>\n[6. Prediction using test set :](#Pre) <br>\n[7. Evaluation :](#Eva) <br>\n[8. Prediction using random data :](#Pre2) <br>\n\n\n\n","c9b9645e":"### ** 8. *Prediction using random data* :**  <a id=\"Pre2\"><\/a> "}}