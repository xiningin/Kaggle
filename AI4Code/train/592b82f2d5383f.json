{"cell_type":{"3abbfe0f":"code","422059c8":"code","e8e07a14":"code","17505b0b":"code","17befcc2":"code","7ee1000b":"code","f461248f":"code","ee3edded":"code","ac40d966":"code","8cd99795":"code","16f924c9":"code","76e4d0d9":"code","2bdd758e":"markdown","db669668":"markdown","7c2167fe":"markdown","ef8d6849":"markdown","d80d20a3":"markdown","af128ae8":"markdown","491c6a22":"markdown","b4f0095d":"markdown","9aea534b":"markdown","7cb5f9fb":"markdown","66ec4ea2":"markdown","2455f5da":"markdown","569583b0":"markdown","03345b32":"markdown","fc202528":"markdown"},"source":{"3abbfe0f":"# import all libs\nimport pandas as pd\nimport sqlite3\nimport matplotlib.pyplot as plt\nimport plotly.express as px","422059c8":"path = '..\/input\/soccer\/database.sqlite'\nconn = sqlite3.connect(path)\ntables = pd.read_sql(\"SELECT * FROM sqlite_master WHERE type='table';\", conn)\ntables","e8e07a14":"num_of_contests = pd.read_sql(\"\"\"SELECT name, season, count(DISTINCT stage) as num_of_stages\n                         FROM Match\n                         LEFT JOIN League\n                         ON Match.league_id = League.id\n                         GROUP BY league_id, season \n                         LIMIT 10;\"\"\", conn)\nnum_of_contests","17505b0b":"Average_player_score = pd.read_sql(\"\"\"SELECT Country.name as country_name, League.name as league_name, season, avg(home_team_goal+away_team_goal) as avg_score\n                                      FROM Match\n                                      LEFT JOIN Country\n                                      ON Country.id = Match.country_id\n                                      LEFT JOIN League\n                                      ON League.id = Match.league_id\n                                      GROUP BY Match.country_id, season;\"\"\",conn)\nAverage_player_score","17befcc2":"country_list = pd.read_sql(\"\"\"SELECT name\n                              FROM Country;\"\"\", conn)\nseason_list = pd.read_sql(\"\"\"SELECT DISTINCT season\n                        FROM Match;\"\"\", conn)\ncolor_list = ['gold', 'olivedrab', 'darkred', 'dimgray', 'seagreen', 'slateblue', 'orange', 'darkgreen', 'indigo', 'lightpink', 'steelblue']\ni = 0\nfor item in country_list.name:\n    cur = Average_player_score[Average_player_score.country_name == item]\n    X = cur.season\n    Y = cur.avg_score\n    plt.plot(X, Y, label=item, color=color_list[i])\n    i += 1\nplt.xticks(X, list(season_list.season), rotation=90)\nplt.legend(loc='best',bbox_to_anchor=(0.9, 0.2, 0.5, 0.5))\nplt.show()","7ee1000b":"increase_rate = pd.read_sql(\"\"\"WITH weights AS(\n                               SELECT '2009'AS 'year', 0.05 AS 'weight'\n                               UNION\n                               SELECT '2010'AS 'year', 0.07 AS 'weight'\n                               UNION\n                               SELECT '2011'AS 'year', 0.09 AS 'weight'\n                               UNION\n                               SELECT '2012'AS 'year', 0.11 AS 'weight'\n                               UNION\n                               SELECT '2013'AS 'year', 0.14 AS 'weight'\n                               UNION\n                               SELECT '2014'AS 'year', 0.16 AS 'weight'\n                               UNION\n                               SELECT '2015'AS 'year', 0.18 AS 'weight'\n                               UNION\n                               SELECT '2016'AS 'year', 0.20 AS 'weight'),\n                               \n                               basis AS (SELECT Country.name AS country_name, substr(season, 6, 5) AS basis_year, avg(home_team_goal+away_team_goal) AS total_goal_basis\n                               FROM Match\n                               LEFT JOIN Country\n                               ON Country.id = Match.country_id\n                               GROUP BY Match.country_id, season),\n                               \n                               end AS (SELECT Country.name AS country_name, substr(season, 0, 5) AS next_year, avg(home_team_goal+away_team_goal) AS total_goal_end\n                               FROM Match\n                               LEFT JOIN Country\n                               ON Country.id = Match.country_id\n                               GROUP BY Match.country_id, season)\n                               \n                               SELECT basis.country_name, sum((total_goal_end - total_goal_basis)\/total_goal_end * weight) as avg_increase_rate\n                               FROM basis \n                               LEFT JOIN end\n                               ON basis.country_name = end.country_name \n                               AND basis.basis_year = end.next_year\n                               LEFT JOIN weights\n                               ON weights.year = basis.basis_year\n                               GROUP BY basis.country_name\n                               HAVING total_goal_end IS NOT NULL;\n                               \"\"\",conn)\nincrease_rate","f461248f":"X = increase_rate.country_name\nY = increase_rate.avg_increase_rate\nfig, ax = plt.subplots()\nax.scatter(X, Y)\nfor i, txt in enumerate(X):\n    ax.annotate(txt, (X[i], Y[i]))\nplt.xticks([\"Country\"])\nplt.show()","ee3edded":"player_api_id = 155782\nplayer_query = \"\"\"SELECT strftime('%Y', date) as year, round(avg(overall_rating),2) as avg_rate, round(avg(potential),2) as avg_potential\n                  FROM Player_Attributes\n                  WHERE player_api_id = {}\n                  GROUP BY year;\n                  \"\"\".format(player_api_id)\nplayer = pd.read_sql(player_query, conn)\nplayer","ac40d966":"X = player.year\nY_rate = player.avg_rate\nY_potential = player.avg_potential\nplt.plot(X, Y_rate, label = 'average rating')\nplt.plot(X, Y_potential, label = 'average potential')\nplt.legend(loc='best',bbox_to_anchor=(0.9, 0.2, 0.5, 0.5))\nplt.show()","8cd99795":"player_ability = pd.read_sql(\"\"\"SELECT player_fifa_api_id as id, avg(heading_accuracy) AS head_acc , avg(curve) AS curve, avg(ball_control) AS ball_control, avg(acceleration) AS acceleration, avg(agility) AS agility, avg(balance) AS balance, avg(positioning) AS positioning, avg(vision) AS vision\n                                FROM Player_Attributes\n                                GROUP BY player_fifa_api_id;\"\"\", conn)\nplayer_ability","16f924c9":"# data standardize \nfor col_name in player_ability.columns[1:]:\n    col_max = max(player_ability[col_name])\n    col_min = min(player_ability[col_name])\n    player_ability[col_name] = player_ability[col_name].apply(lambda x: round((x-col_min)\/(col_max - col_min),2))\nplayer_ability","76e4d0d9":"id = 233885\nplayer_metric = player_ability[player_ability.id == id].values[0][1:]\ncol_name = player_ability.columns[1:]\ndf = pd.DataFrame(dict(r = player_metric,theta = col_name))\nfig = px.line_polar(df, r='r', theta='theta', line_close=True)\n\nfig.update_traces(fill='toself')\nfig.show()","2bdd758e":"<font size = 5> Using scatter to make result more clear","db669668":"<font size=6>**Q2  Team analysis**<br>\n<font size = 5> **- a.The average goal of countries for each league.(only show 10 rows as result)<br>**\n             ","7c2167fe":"<font size=5 >Connect to sqlite and check tables","ef8d6849":"<font size=5> From the above plot, we found that Poland, Scotland and Portugal has great prospect since they are making progress by a high rate, however, performance of England, Italy, Spain and Germany are relatively stable, combined with the result in question a, we found that countries with stable performance are soccer - powerful country and countries which keep making progress are not that excellent actually. From that we realize that it's quite hard to determine who is the most potential only by the goal increasing rate because for excellent candidate, there's less space for imporving themselves. On the contrary, countries with high increasing rate probably start with low level. Thus, we need more metrics to assess a team","d80d20a3":"<font size = 5> Then choose one player by his id and plot the radar chart to assess its ability, for palyer whose id is **233885**, we can see his strength and shortages from the radar chart.","af128ae8":"<font size = 5> **-b. Briefly explain which team is the most potential one in the future?** <br>\n<font size = 5> Well for this question, we compute weighted average goal increasing rate for each team.\n<font size = 5> Why weighted average? The span of all leagues last for 8 years, it's quite a long period, and the prospect of one team depends more on recent performance and less on previous performance, so we add weights into it. In addition, we assume that all of leagues share the same rules so goal for each season is comparable.","491c6a22":"<font size=5> From the plor we know that Netherlands, Germany have relatively good performance in most of leagues, Switzerland seems also have good ability but also \nvery unstable.Countries like Poland and France, they performs poor at the begining but keep making progress every year.","b4f0095d":"<font size = 5> ","9aea534b":"<font size=5> From combined line chart we found that both potential and rating of player 505942 are roughly keeping a increaing trends from 2007 to 2016, we believe that he is a great player with good prospect.","7cb5f9fb":"<font size=5> **b. Data Visualization** <br> When someone need to check player's overall ability, it's difficult to compare and analyze only by the rows of data,we need vivid ways (radar chart preferred) to represent this information.","66ec4ea2":"<font size = 5> First, we choose metrics from table Player_Attributes that can completely assess one's ability, then we process data<br>\n> <font size = 4>heading_accuracy <br>curve<br>ball_contorl<br>acceleration<br>agility<br>balance<br>positioning<br>vision ","2455f5da":"<font size=6>**Q3  Player analysis**<br>\n<font size=5> **a. Assess player's potential and ability with years** <br> You can type player's name or his player_api_id to check his trends.<br>\nFor instance, check player whose player_api_id is **505942**\n   ","569583b0":"<font size=6 > **Abstract**<br>\n<font size=5 > Comprehensive application of SQL with connected to sqlite using python.","03345b32":"<font size = 5> We apply line chart to represent above data more clearly","fc202528":"<font size=6 > **Q1**<br>\n    <font size=5 > How many contests were hold for each leagues? (just list 10 rows of result)"}}