{"cell_type":{"b794ad05":"code","124c7748":"code","d025c221":"code","a79db024":"code","e833c2ec":"code","80d29845":"code","c27c2917":"code","8dc2de50":"code","0735e6f8":"code","c11df1e7":"code","03f97238":"code","8f98b66b":"code","f2b08068":"code","15768054":"code","bbbf428f":"code","5454f46b":"code","14ac760a":"code","905d1a82":"code","28257faf":"code","4c060c42":"code","07c173c2":"code","6c320a49":"code","4e72ed5a":"code","219979bf":"code","a93b8fe8":"code","7bd913d2":"code","ee61cdb2":"code","8f90f39b":"code","78f94181":"code","2bc9be9e":"code","d91adaca":"code","26e0d676":"code","32525927":"code","516d1f13":"code","2e6f9311":"code","19c5cdd2":"code","bfd4e34b":"code","816805f6":"code","a8108234":"code","06bc996f":"code","373aa537":"code","235a5e3b":"code","2aa8880e":"code","7146b83a":"code","a80edda0":"code","b27f5a11":"code","d548368e":"code","c4a748e6":"code","e8d98f10":"code","11646cce":"code","c9c536f4":"code","ee0f052f":"code","cdbd2197":"code","73faae15":"code","814f7587":"code","869b0f21":"code","9ac4ec72":"code","1fff254c":"code","5503bbd4":"code","f4830923":"code","13317580":"code","c2da3ecf":"code","650bcd7f":"code","4b038b60":"code","bfa013cb":"code","94163695":"code","e4c1f382":"code","5a813cdb":"code","12ee5979":"code","ef585736":"code","3afc4d1b":"code","99156564":"markdown","981061de":"markdown","be5aa9af":"markdown","888481d8":"markdown","c36f5281":"markdown","68f012b7":"markdown","61f9e7fc":"markdown"},"source":{"b794ad05":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","124c7748":"df = pd.read_csv('..\/input\/insurance-prediction\/train_SJC.csv')\ndf_test=pd.read_csv(\"..\/input\/insurance-prediction\/Test_SJC.csv\")","d025c221":"df.head()","a79db024":"df1=df.rename(columns={\"Unnamed: 0\":\"ClaimNumber\",\"Unnamed: 1\":\"DateTimeOfAccident\",\"Unnamed: 3\":\"Age\",\"Unnamed: 4\":\"Gender\",\"Unnamed: 5\":\"MaritalStatus\",\"Unnamed: 6\":\"DependentChildren\",\"Unnamed: 8\":\"WeeklyWages\",\"Unnamed: 9\":\"PartTimeFullTime\",\"Unnamed: 10\":\"HoursWorkedPerWeek\",\"Unnamed: 12\":\"ClaimDescription\",\"Unnamed: 13\":\"InitialIncurredCalimsCost\",\"Unnamed: 14\":'UltimateIncurredClaimCost'},inplace=False)","e833c2ec":"df2=df1.drop(df1.index[0])\ndf2.head()","80d29845":"df2.info()","c27c2917":"df2.describe()","8dc2de50":"df2.isnull().sum()","0735e6f8":"plt.figure(figsize=(14,6))\nx = df2.columns\ny = df2.isnull().sum()\nsns.barplot(x, y).set_title(\" Missing Values\")\nax = plt.gca()\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width()\/ 2.0, height + 2,\n           int(height), fontsize = 14, ha = 'center', va = 'bottom')\n\nax.set_xlabel(\"Columns\")\nax.set_ylabel(\"Missing values count\")\nplt.xticks(rotation = 90)\nplt.show()","c11df1e7":"df2['MaritalStatus'].value_counts()","03f97238":"df2['MaritalStatus'].mode()","8f98b66b":"df2['MaritalStatus']=df2['MaritalStatus'].fillna(\"S\")","f2b08068":"df2['WeeklyWages'].value_counts()","15768054":"df2['HoursWorkedPerWeek'].value_counts()","bbbf428f":"df2 = df2.fillna(df2.median())","5454f46b":"df2.isnull().sum()","14ac760a":"df2.info()","905d1a82":"df2['Gender'].value_counts()","28257faf":"df2['UltimateIncurredClaimCost']=df2['UltimateIncurredClaimCost'].astype(np.float64)\nlog_UltimateIncurredClaimCost=np.log(df2['UltimateIncurredClaimCost'])","4c060c42":"df2.info()","07c173c2":"df2['HoursWorkedPerWeek']=df2['HoursWorkedPerWeek'].astype(np.float64)\ndf2['InitialIncurredCalimsCost']=df2['InitialIncurredCalimsCost'].astype(np.float64)\ndf2['Age']=df2['Age'].astype(np.int32)\ndf2['WeeklyWages']=df2['WeeklyWages'].astype(np.float64)\ndf2['InitialIncurredCalimsCost']=df2['InitialIncurredCalimsCost'].astype(np.float64)\ndf2['DependentChildren']=df2['DependentChildren'].astype(np.float64)","6c320a49":"df2=df2[df2.UltimateIncurredClaimCost<np.quantile(df2['UltimateIncurredClaimCost'],0.85)]","4e72ed5a":"df2.info()","219979bf":"df2['DependentChildren'].value_counts()","a93b8fe8":"sns.boxplot(data=df2,x='HoursWorkedPerWeek')","7bd913d2":"df2.corr()","ee61cdb2":"plt.figure(figsize=(20,15))\nsns.barplot(x='DependentChildren',y='UltimateIncurredClaimCost',data=df2)\nplt.show()","8f90f39b":"fig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(df2.corr(),cmap='YlGnBu',square=True,annot=True)\nplt.show","78f94181":"df2['DependentChildren'].max(), df2['DependentChildren'].min(), df2['DependentChildren'].median()","2bc9be9e":"sns.countplot(data=df2,hue='Gender',x='DependentChildren')","d91adaca":"sns.catplot(data=df2,x='WeeklyWages',col='Gender',kind='violin')","26e0d676":"plt.figure(figsize=(12,10))\nsns.scatterplot(x='HoursWorkedPerWeek',y='UltimateIncurredClaimCost',data=df2)\nplt.show()","32525927":"df2['WeeklyWages']=np.log1p(df2['WeeklyWages'])","516d1f13":"sns.catplot(data=df2,x='Age',col='Gender',kind='box')","2e6f9311":"\nsns.countplot(data=df2,x='Gender')","19c5cdd2":"plt.figure(figsize=(12,10))\nsns.barplot(x='DependentsOther',y='UltimateIncurredClaimCost',data=df2)\nplt.show()","bfd4e34b":"plt.figure(figsize=(15,10))\nsns.barplot(x='Age',y='UltimateIncurredClaimCost',data=df2)\nplt.xticks(rotation=90)\nplt.show()","816805f6":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","a8108234":"# 0-Female , 1- Male\ndf2['Gender'] = le.fit_transform(df2['Gender'])\n\n# 0 - Married  1-Single ,2-unknown.\ndf2['MaritalStatus'] = le.fit_transform(df2['MaritalStatus'])\n\n# 0 -FullTime and 1 -partTime                                      \ndf2['PartTimeFullTime']=le.fit_transform(df2['PartTimeFullTime'])\ndf2['ClaimDescription']=le.fit_transform(df2['ClaimDescription'])\n","06bc996f":"df2.head()","373aa537":"feature_cols=['Age', 'Gender','MaritalStatus','DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost']\nX=df2[feature_cols]\ny=df2['UltimateIncurredClaimCost']\nX.head()","235a5e3b":"print(X.shape)\nprint(y.shape)","2aa8880e":"from sklearn.model_selection import train_test_split\nX_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state =30)\nprint(X_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","7146b83a":"\nfrom sklearn.preprocessing import StandardScaler\n# creating a standard scaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nx_test = sc.fit_transform(x_test)","a80edda0":"#reg.fit(X_train, y_train)","b27f5a11":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nlr=LinearRegression()","d548368e":"lr.fit(X_train,y_train)\ny_pred=lr.predict(x_test)\nprint(lr.score(X_train,y_train))\nprint(lr.score(x_test, y_test))\nprint('RMSE :',np.sqrt(mean_squared_error(y_test, y_pred)))","c4a748e6":"#ridge\nfrom sklearn.linear_model import Ridge, Lasso\nridge = Ridge()\nridge.fit(X_train,y_train)\nprint(\"Train:\",ridge.score(X_train,y_train))\nprint(\"Test:\",ridge.score(x_test,y_test))\ny_pred = ridge.predict(x_test)\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","e8d98f10":"y_pred","11646cce":"pip install xgboost","c9c536f4":"from xgboost import XGBRegressor","ee0f052f":"Val = XGBRegressor(\n                    learning_rate = 0.01,\n                    n_estimators = 10000,\n                    max_depth = 3,\n                    min_child_weight = 0,\n                    gamma = 0,\n                    subsample = 0.7,\n                    colsample_bytree = 0.7,\n                    objective = 'reg:squarederror',\n                    nthread = 1,\n                    scale_pos_weight = 1,\n                    seed = 27,\n                    reg_alpha = 0.00006\n                    )\nxgb_model = Val.fit(X_train, y_train)\npreds_n = xgb_model.predict(x_test)\nprint((f\"RMSE: {np.sqrt(mean_squared_error(y_test, preds_n))}\"))","cdbd2197":"df_test","73faae15":"df_test['MaritalStatus'].value_counts()","814f7587":"df_test.isnull().sum()","869b0f21":"df_test['MaritalStatus'].mode()","9ac4ec72":"df_test['MaritalStatus']=df_test['MaritalStatus'].fillna(\"S\")","1fff254c":"df_test.isnull().sum()","5503bbd4":"df_test['Gender'].value_counts()","f4830923":"df_test['HoursWorkedPerWeek']=df_test['HoursWorkedPerWeek'].astype(np.float64)\ndf_test['InitialIncurredCalimsCost']=df_test['InitialIncurredCalimsCost'].astype(np.float64)\ndf_test['Age']=df_test['Age'].astype(np.int32)\ndf_test['WeeklyWages']=df_test['WeeklyWages'].astype(np.float64)\ndf_test['InitialIncurredCalimsCost']=df_test['InitialIncurredCalimsCost'].astype(np.float64)\ndf_test['DependentChildren']=df_test['DependentChildren'].astype(np.float64)","13317580":"df_test.info()","c2da3ecf":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","650bcd7f":"# 0-Female , 1- Male\ndf_test['Gender'] = le.fit_transform(df_test['Gender'])\n\n# 0 - Married  1-Single ,2-unknown.\ndf_test['MaritalStatus'] = le.fit_transform(df_test['MaritalStatus'])\n\n# 0 -FullTime and 1 -partTime                                      \ndf_test['PartTimeFullTime']=le.fit_transform(df_test['PartTimeFullTime'])\ndf_test['ClaimDescription']=le.fit_transform(df_test['ClaimDescription'])\n","4b038b60":"cols=['Age', 'Gender','MaritalStatus','DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost']\nX_new=df_test[cols]\nX_new.head()","bfa013cb":"print(X_new.shape)","94163695":"from sklearn.preprocessing import StandardScaler\n# creating a standard scaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nx_test = sc.fit_transform(x_test)","e4c1f382":"y_pred_n=lr.predict(X_new)","5a813cdb":"y_pred_n","12ee5979":"preds = xgb_model.predict(X_new)","ef585736":"preds","3afc4d1b":"sub=pd.read_csv('..\/input\/insurance-prediction\/sample_submission.csv')\nsub['UltimateIncurredClaimCost'] = preds\nsub.to_csv('submission_linears.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","99156564":"###### ","981061de":"# Creating model","be5aa9af":"# EDA","888481d8":"<h3>Number of Male is dominated here","c36f5281":"# Data Loading","68f012b7":"# scaling","61f9e7fc":"# Data Preprocessing"}}