{"cell_type":{"9b14b903":"code","4fc66c42":"code","9fb72b98":"code","004a6db8":"code","c05da408":"code","1ecb0b79":"code","71f9c47d":"code","6f59a2a4":"code","98e695a6":"code","91a541c0":"code","aa629faf":"code","edaec5ee":"code","f9661dcf":"code","1eefd602":"code","1193a7b4":"code","0dd1e5d7":"code","b8c46101":"code","ed2ce422":"code","8f02e48f":"code","dda29ce9":"code","cde9dce5":"code","3ffc61b8":"code","c4e0f8eb":"code","d1a1fbd3":"markdown","8b5226a6":"markdown","bac3755e":"markdown","7cb8285d":"markdown","7ea7d01a":"markdown","73d6a677":"markdown","65b68ae8":"markdown","389db41d":"markdown","4e2d7d08":"markdown","5ecdbe65":"markdown","416e6473":"markdown","062dcd32":"markdown","a3a33c0a":"markdown","74bcb009":"markdown","1ddcf9c6":"markdown","8b002e83":"markdown","d6387a7d":"markdown","39fc0a2a":"markdown"},"source":{"9b14b903":"!pip install solt","4fc66c42":"import pandas as pd\nimport os\nimport shutil\nfrom tensorflow import keras\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom keras.layers import MaxPool2D,Convolution2D,Flatten,Dense,MaxPooling2D,Dropout,LSTM\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom PIL import Image\nimport warnings\nwarnings.simplefilter(\"ignore\")\nimport os, cv2, json\nfrom PIL import Image\nimport solt\nimport solt.transforms as slt\nimport random\nrandom.seed(64)","9fb72b98":"# Copying the data\nshutil.copytree('..\/input\/cat-and-dog\/training_set\/training_set\/','train')\nshutil.copytree('..\/input\/cat-and-dog\/test_set\/test_set\/','test')\nos.remove('train\/cats\/_DS_Store')\nos.remove('train\/dogs\/_DS_Store')","004a6db8":"fig, ax = plt.subplots(1, 4, figsize=(16, 8))\npath='..\/input\/cat-and-dog\/training_set\/training_set\/cats'\nfor i in range(4):\n    \n    c=random.choice(os.listdir(path))\n    ax[i].imshow(Image.open(path+'\/'+c))\n    ax[i].axis(\"off\")\n","c05da408":"fig, ax = plt.subplots(1, 4, figsize=(16, 8))\npath='..\/input\/cat-and-dog\/training_set\/training_set\/dogs'\nfor i in range(4):\n    \n    c=random.choice(os.listdir(path))\n\n    ax[i].imshow(Image.open(path+'\/'+c))\n    ax[i].axis(\"off\")\nplt.show()","1ecb0b79":"# Making Augmented data for cats\npath_cats='train\/cats'\npath_dogs='train\/dogs'\n\n# Making DataContainer\nims=[]\ns='I'*len(os.listdir(path_cats))\nfor i in os.listdir(path_cats):\n    im=Image.open(path_cats+'\/'+i)\n    im=im.resize((225,225))\n    ims.append(np.array(im, dtype=np.uint8))\ncatty=tuple(ims)\ndc_cats = solt.DataContainer(catty, s)\n\n#Making data container for Dogs\nims=[]\ns='I'*len(os.listdir(path_dogs))\nfor i in os.listdir(path_dogs):\n    im=Image.open(path_dogs+'\/'+i)\n    im=im.resize((225,225))\n    ims.append(np.array(im, dtype=np.uint8))\nduggy=tuple(ims)\ndc_dogs=solt.DataContainer(duggy, s)","71f9c47d":"w=225\nh=225\n# Creating The Stream\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((h,w),'r'),\n    slt.Crop((w,w),'r'),\n    slt.HSV((0, 10), (0, 10), (0, 10)),\n    slt.Blur(k_size=7, blur_type='m'),\n    solt.SelectiveStream([\n        slt.CutOut(40, p=1),\n        slt.Crop((w,w),'r'),\n        slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n        solt.Stream(),\n        solt.Stream(),\n    ], n=3)    ])\n","6f59a2a4":"# Making augmented images and adding them to the folder\ncount=0\nfor i in range(4):\n    dc_res = stream(dc_cats, return_torch=False)\n    \n    img_res= dc_res.data\n    for i in range(len(img_res)) :\n        im = Image.fromarray(img_res[i].squeeze())\n        im.save('train\/cats\/'+str(count)+'.jpg')\n        count+=1\n\n","98e695a6":"# MAking augmented images and adding them to the folder\ncount=0\nfor i in range(4):\n    dc_res = stream(dc_dogs, return_torch=False)\n    \n    img_res= dc_res.data\n    for i in range(len(img_res)) :\n        im = Image.fromarray(img_res[i].squeeze())\n        im.save('train\/dogs\/'+str(count)+'.jpg')\n        count+=1\n","91a541c0":"fig, ax = plt.subplots(1, 4, figsize=(16, 8))\n\nfor i in range(4):\n    \n    c=random.choice(os.listdir('train\/cats'))\n    if len(c)<10:\n        ax[i].set_title('Augmented Image')\n        ax[i].imshow(Image.open('train\/cats\/'+c))\n    else:\n        ax[i].set_title('Original Image')\n        ax[i].imshow(Image.open('train\/cats\/'+c))\n    ax[i].axis(\"off\")\n","aa629faf":"fig, ax = plt.subplots(1, 4, figsize=(16, 8))\n\nfor i in range(4):\n    \n    c=random.choice(os.listdir('train\/dogs'))\n    if len(c)<10:\n        ax[i].set_title('Augmented Image')\n        ax[i].imshow(Image.open('train\/dogs\/'+c))\n    else:\n        ax[i].set_title('Original Image')\n        ax[i].imshow(Image.open('train\/dogs\/'+c))\n    ax[i].axis(\"off\")\nplt.show()","edaec5ee":"\ndatagen = ImageDataGenerator(validation_split=0.1, rescale=1.\/255)\n\ntraining_set = datagen.flow_from_directory('train', \n                                                    target_size = (64, 64), \n                                                    batch_size = 32,subset='training')\nvalidation_set=datagen.flow_from_directory('train',target_size = (64, 64), \n                                                    batch_size = 32,subset='validation')\n","f9661dcf":"# Creating a model\n\nmodel=Sequential()\nmodel.add(Convolution2D(32,(3,3),input_shape=(64,64,3),activation='relu',kernel_initializer='glorot_normal',bias_initializer='glorot_normal'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(2048,activation='relu',kernel_initializer='glorot_normal',bias_initializer='glorot_normal'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(100,activation='relu',kernel_initializer='glorot_normal',bias_initializer='glorot_normal'))\nmodel.add(Dense(units=2,activation='softmax',  kernel_initializer='glorot_normal', bias_initializer='glorot_normal'))","1eefd602":"model.summary()","1193a7b4":"model.compile(optimizer= 'adam', loss= 'categorical_crossentropy', metrics= ['accuracy'])\n","0dd1e5d7":"fitted_model = model.fit(training_set,\n                        steps_per_epoch = 200,\n                        epochs = 32,\n                        validation_data = validation_set,\n                        validation_steps = 100)","b8c46101":"# Loss\nplt.plot([i for i in range(32)],fitted_model.history['loss'])\nplt.plot([i for i in range(32)],fitted_model.history['val_loss'])","ed2ce422":"#Accuracy\nplt.plot([i for i in range(32)],fitted_model.history['accuracy'])\nplt.plot([i for i in range(32)],fitted_model.history['val_accuracy'])","8f02e48f":"def image_prediction(path):\n    imm=Image.open(path)\n    imm=imm.resize((64,64))\n    x=np.array(imm)\n    x=np.expand_dims(x,axis=0)\n    classs=model.predict_classes(x)\n    l=os.listdir('train')\n    l.sort()\n    return l[classs[0]]","dda29ce9":"imagee=Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4003.jpg')\nimagee","cde9dce5":"# Let's make prediction for the above image\nimage_prediction('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4003.jpg')\n","3ffc61b8":"imagee=Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4004.jpg')\nimagee","c4e0f8eb":"# Let's make prediction for the above image\nimage_prediction('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4004.jpg')\n","d1a1fbd3":"# Having a Look at some Random Images","8b5226a6":"# Predictions :)","bac3755e":"# Doing Image Augmentation Using SOLT","7cb8285d":"# Training the model","7ea7d01a":"# Compiling the model","73d6a677":"## Dogs ","65b68ae8":"# Having a look at the results after Augmentation :)","389db41d":"## Dogs :)","4e2d7d08":"![](https:\/\/i.pinimg.com\/originals\/9c\/42\/33\/9c42330f319510cefb2fbe0df1399345.gif)","5ecdbe65":"# Creating Data For The Model","416e6473":"The original images size of 8000 is now 40000 :)","062dcd32":"# Cat V Dog Model Using SOLT Image Augmentation","a3a33c0a":"# Having a Look at the data","74bcb009":"![](https:\/\/github.com\/MIPT-Oulu\/solt\/raw\/master\/doc\/source\/_static\/logo.png)\n![](https:\/\/www.freeiconspng.com\/uploads\/blue-plus-icon-12.png)\n![](https:\/\/keras.io\/img\/logo.png)","1ddcf9c6":"## Cats :)","8b002e83":"## Cats :)","d6387a7d":"# Model","39fc0a2a":"# Importing the packages"}}