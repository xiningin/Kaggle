{"cell_type":{"a9adbde5":"code","1149975f":"code","4698dd68":"code","8afed214":"code","d2c190e3":"code","b8f78572":"code","e92b55bc":"code","a2824584":"code","a4a11193":"code","0311965b":"code","fd2beb2e":"code","772cdeff":"code","ad87368c":"markdown","9d37156a":"markdown","a70ca98c":"markdown","9991efe4":"markdown","7a503efd":"markdown","6ee429c7":"markdown"},"source":{"a9adbde5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1149975f":"fpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/family_data.csv'\ndata = pd.read_csv(fpath, index_col='family_id')\n\nfpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')","4698dd68":"data.head()","8afed214":"submission.head()","d2c190e3":"family_size_dict = data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))","b8f78572":"DAILY_QUOTA = 250\n\ndaily_quotas = N_DAYS * [DAILY_QUOTA]\nassigned_days = len(data)*[-1]","e92b55bc":"non_assigned_families = []\n\nfor i in data.iterrows():\n    n_people = i[1]['n_people']\n    assigned = False\n    for j in range(9):\n        if daily_quotas[i[1][f'choice_{j}'] - 1] > n_people: \n            daily_quotas[i[1][f'choice_{j}'] - 1] -= n_people\n            assigned_days[i[0]] = i[1][f'choice_{j}']\n            assigned = True\n            break\n            \n    if not assigned:\n        non_assigned_families.append(i[0])\n","a2824584":"for family_id in non_assigned_families:\n    day_id = np.argsort(daily_quotas)[-1]\n    daily_quotas[day_id] -= data.iloc[family_id].n_people\n    assigned_days[family_id] = day_id + 1","a4a11193":"submission['assigned_day'] = assigned_days","0311965b":"def cost_function(prediction):\n\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n        \n    #print (\"PA: \", penalty, accounting_cost)\n    penalty += accounting_cost\n\n    return penalty","fd2beb2e":"def partial_accounting_cost_helper(visitors_per_day, idx):\n    res = 0\n\n    nd = visitors_per_day[idx]\n    if idx != 99:\n        ndplus = visitors_per_day[idx + 1]\n    else:\n        ndplus = nd\n    \n    res += (nd - 125) \/ 400. * (nd ** (0.5 + abs(nd - ndplus)\/50.))\n    \n    if idx != 0:\n        ndminus = visitors_per_day[idx - 1]\n        res += (ndminus - 125) \/ 400. * (ndminus ** (0.5 + abs(ndminus - nd)\/50.))\n    \n    return res\n\ndef partial_accounting_cost(visitors_per_day, old_day, new_day):\n    res = partial_accounting_cost_helper(visitors_per_day, old_day) + partial_accounting_cost_helper(visitors_per_day, new_day)\n    \n    #if abs(old_day - new_day) == 1:\n    #    d = max(old_day, new_day)\n    #    res += (visitors_per_day[d - 1] - 125) \/ 400. * (visitors_per_day[d - 1] ** (0.5 + abs(visitors_per_day[d] - visitors_per_day[d - 1])\/50.))\n        \n    return res\n\ndef partial_penalty_cost(family_id, day):\n    family_data = data.iloc[family_id]\n    n = family_data.n_people\n    d = day + 1\n\n    # Calculate the penalty for not getting top preference\n    if d == family_data.choice_0:\n        penalty = 0\n    elif d == family_data.choice_1:\n        penalty = 50\n    elif d == family_data.choice_2:\n        penalty = 50 + 9 * n\n    elif d == family_data.choice_3:\n        penalty = 100 + 9 * n\n    elif d == family_data.choice_4:\n        penalty = 200 + 9 * n\n    elif d == family_data.choice_5:\n        penalty = 200 + 18 * n\n    elif d == family_data.choice_6:\n        penalty = 300 + 18 * n\n    elif d == family_data.choice_7:\n        penalty = 300 + 36 * n\n    elif d == family_data.choice_8:\n        penalty = 400 + 36 * n\n    elif d == family_data.choice_9:\n        penalty = 500 + 36 * n + 199 * n\n    else:\n        penalty = 500 + 36 * n + 398 * n\n\n    return penalty","772cdeff":"# Start with the sample submission values\nbest = submission['assigned_day'].tolist()\nvisitors_per_day = submission.merge(data.n_people, on=\"family_id\").groupby('assigned_day').n_people.sum().tolist()\n\nscore = cost_function(best)\nnew = None\n# loop over each family\nfor fam_id, _ in enumerate(best):\n    # loop over each family choice\n    n_people = data.iloc[fam_id].n_people\n    for pick in range(10):\n        new_day = choice_dict[f'choice_{pick}'][fam_id] - 1\n        old_day = best[fam_id] - 1\n        new_score = score\n\n        if old_day == new_day:\n            break\n            \n        if visitors_per_day[old_day] - n_people < 125 or visitors_per_day[new_day] + n_people > 300:\n            break\n        \n        new_score -= partial_penalty_cost(fam_id, old_day)\n        new_score -= partial_accounting_cost(visitors_per_day, old_day, new_day)\n        \n        visitors_per_day[old_day] -= n_people\n        visitors_per_day[new_day] += n_people\n            \n        new_score += partial_penalty_cost(fam_id, new_day)\n        new_score += partial_accounting_cost(visitors_per_day, old_day, new_day)\n   \n        if abs(new_day - old_day) == 1 or old_dat:\n            temp = best.copy()\n            temp[fam_id] = new_day + 1 # add in the new pick\n            new_score = cost_function(temp)\n\n        if new_score < score:\n            score = new_score\n            best[fam_id] = new_day + 1\n            print (score, cost_function(best), old_day, new_day)\n        else:\n            visitors_per_day[old_day] += n_people\n            visitors_per_day[new_day] -= n_people\n        \nsubmission['assigned_day'] = best\n#score = cost_function(new)\n\n#submission.to_csv(f'submission_{score}.csv')\n#print(f'Score: {score}')","ad87368c":"## Simple Opimization Approach\n\nFor each family, loop over their choices, and if keep it if the score improves. There's a lot of easy improvement that can be made to this code.","9d37156a":"## Greedy initialization\n\nThe optimization function punishes us for having unequal distibution over the days. So I set the quota of each day to 210. And then I assign the day to each family according to their wishes, as long as the quota for this day is not exceeded.","a70ca98c":"## Create some lookup dictionaries and define constants\n\nYou don't need to do it this way. :-)","9991efe4":"## Cost Function\nVery un-optimized  ;-)","7a503efd":"If there still some families left, which wishes we were not able to fullfill, we just assign them to the least visited days.","6ee429c7":"## Read in the family information and sample submission"}}