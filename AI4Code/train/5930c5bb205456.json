{"cell_type":{"833889d5":"code","193893be":"code","a5a3f949":"code","1eb77b71":"code","8faee86b":"code","5757e49e":"code","341cb46c":"code","72cd3a11":"code","6974b543":"code","b0a03b5d":"code","09ed3572":"code","8f5a36c1":"code","50158baf":"code","63548b15":"code","3fc907d2":"code","402ffc08":"code","3cfd4aa8":"code","f5e4c00b":"code","e3c63874":"code","7aad757d":"code","4f29502c":"code","5d7415f5":"code","be97a3a1":"code","b7c90247":"code","d285a9c6":"code","b45b63ff":"code","fecfa487":"code","aaaef9a7":"code","b208bcda":"code","ed379437":"code","7ceacf7e":"code","c23780e6":"code","037e600b":"code","926b91e3":"code","2777801d":"code","02958dd9":"code","79b3c766":"code","96a2a642":"code","a3b28e32":"code","939b37c1":"code","20c74935":"code","bffffe03":"code","e86696a0":"code","e922487c":"code","b8faa48a":"code","2622459a":"code","c12f084d":"code","a6da1a78":"code","9e7bfaee":"code","14b309d4":"code","5d7b4743":"code","c6226afb":"code","a9e9bcd8":"code","9bb47b07":"code","c6d5f8a0":"code","ee657ad5":"code","6c98efa1":"code","c3a18026":"code","2bb11e95":"code","c0527c04":"code","8b42abaf":"code","656546d3":"code","f3c2d53c":"code","a03bc520":"code","26ab5497":"code","18a935c9":"code","36098086":"code","af80df5d":"code","8005392d":"code","1ae3bf7d":"code","70f63b88":"code","17af2a78":"code","3f7bc910":"code","1138a58f":"code","e21282ae":"code","0df8a4f1":"code","fbe0daec":"code","6fa4d660":"code","b1642e71":"code","0b92b752":"code","c2de7b60":"code","c2e642ac":"code","91225eeb":"code","5854816c":"code","59d4ce81":"code","148cfc96":"code","98e842ee":"code","f9126910":"code","d7825b98":"code","c7365140":"code","53d876c4":"code","cb512751":"code","c4263448":"code","dd4cd4b9":"markdown","c0e18159":"markdown","b5784787":"markdown","b0e76687":"markdown","c69c5535":"markdown","b64428ba":"markdown","c4f7287f":"markdown","b28dd503":"markdown","19d276ac":"markdown","47a125dc":"markdown","bc7a8342":"markdown","cb711dcc":"markdown","598f91d7":"markdown","5ce06959":"markdown","b8fa4df7":"markdown","181d6890":"markdown","446e42c9":"markdown","7299a6c0":"markdown","d20e2e92":"markdown","7a20e728":"markdown","885ab096":"markdown","178ea493":"markdown","84af18a0":"markdown","9fbdf339":"markdown","6f955335":"markdown","d3165b7f":"markdown","a9534dd7":"markdown","21d938cd":"markdown","58c8b864":"markdown","baa1b89e":"markdown","f51288fe":"markdown","36dac1cf":"markdown","dcb9ee84":"markdown","318d010c":"markdown","dccc9b19":"markdown","b29d101d":"markdown","9e02ade0":"markdown","2056a663":"markdown","58ab59cc":"markdown","6070246c":"markdown","5a61ae77":"markdown","1aab6833":"markdown","be279ed4":"markdown","ccc80f34":"markdown","53e1fd98":"markdown","9380e89d":"markdown","b33f382f":"markdown","f2af0d76":"markdown","e7e1ea2a":"markdown","33f9698b":"markdown","d26f3aae":"markdown","d9f51b4f":"markdown","a02182e3":"markdown","9cef05fc":"markdown","e9620e6f":"markdown","4b73bb05":"markdown","9d2a224d":"markdown","fedf5604":"markdown","7d1a7023":"markdown","c6df7b36":"markdown","cc2a66c8":"markdown","a11ace32":"markdown","911cfd45":"markdown","531b53c0":"markdown","94bbdc57":"markdown","4ee21eb2":"markdown","7293b5c0":"markdown","1b85d3cd":"markdown","5ff70f9f":"markdown","328a1913":"markdown","ef953414":"markdown","cdfab4bc":"markdown","61c962e2":"markdown","15dd0828":"markdown","8732c8b8":"markdown","965f5a08":"markdown"},"source":{"833889d5":"# Some basic libs\n!python3.7 -m pip install --upgrade pip\n!pip install chart_studio\nimport numpy as np \n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\n# Plotly to create interactive graph\nimport chart_studio.plotly as py\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=False)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nimport plotly.express as px\n\n%matplotlib inline\n\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n\n# To remove un-necessary warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","193893be":"deliveries = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv') \nmatches = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')","a5a3f949":"deliveries.head()","1eb77b71":"x=['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']\n\nmatches.replace(x,y,inplace = True)\ndeliveries.replace(x,y,inplace = True)","8faee86b":"matches['season'] = matches['date'].str[:4].astype(int)\nmatches","5757e49e":"data = [go.Histogram(x=matches['season'], marker=dict(color='#EB89B5', line=dict(color='#000000', width=1)), opacity=0.75)]\nlayout = go.Layout(title='Matches In Every Season ',xaxis=dict(title='Season',tickmode='linear'),\n                    yaxis=dict(title='Count'),bargap=0.2, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","341cb46c":"venue_matches=matches.groupby('venue').count()[['id']].sort_values(by='id',ascending=False).head()\nser = pd.Series(venue_matches['id']) \nser","72cd3a11":"venue_matches=matches.groupby('venue').count()[['id']].reset_index()\n\ndata = [{\"y\": venue_matches['id'],\"x\": venue_matches['venue'], \n          \"marker\": {\"color\": \"lightblue\", \"size\": 12},\n         \"line\": {\"color\": \"red\",\"width\" : 2,\"dash\" : 'dash'},\n          \"mode\": \"markers+lines\", \"name\": \"Women\", \"type\": \"scatter\"}]\n\nlayout = {\"title\": \"Stadiums Vs. Matches\", \n          \"xaxis\": {\"title\": \"Matches Played\", }, \n          \"yaxis\": {\"title\": \"Stadiums\"},\n          \"autosize\":False,\"width\":900,\"height\":700,\"plot_bgcolor\":\"rgb(245,245,245)\"}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6974b543":"bowlers=deliveries.groupby('bowler').sum().reset_index()\nbowl=deliveries['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(bowl,left_on='bowler',right_on='index',how='left')\nbowlers=bowlers[['bowler_x','total_runs','bowler_y']]\n\nbowlers.rename({'bowler_x':'bowler','total_runs':'runs_given','bowler_y':'balls'},axis=1,inplace=True)\nbowlers\nbowlers['overs']=(bowlers['balls']\/\/6)\nbowl","b0a03b5d":"bowlers.tail(3)","09ed3572":"matches['Season'] = pd.DatetimeIndex(matches['date']).year\nseason_data=matches[['id','Season', 'venue']].merge(deliveries, left_on = 'id', right_on = 'id', how = 'left')\nseason_data.head()","8f5a36c1":"list1 = [\"TA Boult\"]\nboult_data = season_data[season_data[\"bowler\"].isin(list1)]\nboult_data2 = season_data[season_data[\"bowler\"].isin(list1)]\n\ndismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct=boult_data[boult_data[\"dismissal_kind\"].isin(dismissal_kinds)]\nct=ct.groupby('Season').sum().reset_index()\nct.rename({'is_wicket':'wickets'}, axis=1, inplace=True)\nct = ct[['Season', 'wickets']]\n\nballs = boult_data.groupby('Season').count()\nballs = balls['inning']\n\nmatches_per_season = boult_data.groupby('Season')['id'].nunique().reset_index()\nmatches_per_season.rename({'id':'matches played'}, axis=1, inplace=True)\n\nboult_data=boult_data.groupby('Season').sum().reset_index()\nboult_data.drop(['is_wicket'], axis=1, inplace=True)\n\nboult_data = boult_data[['Season', 'total_runs']]\nboult_data = pd.merge(boult_data, ct, on=\"Season\")\nboult_data = pd.merge(boult_data, balls, on=\"Season\")\nboult_data = pd.merge(boult_data, matches_per_season, on=\"Season\")\n\nboult_data.rename({'inning':'balls bowled', 'total_runs':'runs_given'}, axis=1, inplace=True)\nboult_data['overs']=(boult_data['balls bowled']\/\/6)\nboult_data['economy']=(boult_data['runs_given']\/boult_data['overs'])\n\nboult_data.head(6)","50158baf":"data = [go.Bar(x=boult_data['Season'],y=boult_data['wickets'],opacity=0.4)]\n\nlayout = go.Layout(title='Season-wise Wickets',\n                   yaxis=dict(title='Wickets'),bargap=0.3, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","63548b15":"trace1 = go.Scatter(\n    x = boult_data['Season'].values,\n    y=boult_data['economy'].values,\n    mode = 'lines+markers',\n    name = 'Wickets'\n)\n\ntrace2 = go.Scatter(\n    x = boult_data['Season'].values,\n    y = boult_data['matches played'].values,\n    mode = 'markers',\n    name = 'Matches'\n)\n\nlayout = go.Layout(title=\"Economy Rate of in Different Seasons\",\n                   xaxis=dict(title=\"Season\"),\n                   yaxis=dict(title=\"Economy Rate\"),\n                  plot_bgcolor='rgb(245,245,245)')\n\n\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3fc907d2":"def preprocess_pwrplay_death_overs(df):\n    dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \n    ct=df[df[\"dismissal_kind\"].isin(dismissal_kinds)]\n    ct=ct.groupby('Season').sum().reset_index()\n    ct.rename({'is_wicket':'wickets'}, axis=1, inplace=True)\n    ct = ct[['Season', 'wickets']]\n\n    balls = df.groupby('Season').count()\n    balls = balls['inning']\n\n    matches_per_season = df.groupby('Season')['id'].nunique().reset_index()\n    matches_per_season.rename({'id':'matches played'}, axis=1, inplace=True)\n\n    df=df.groupby('Season').sum().reset_index()\n    df.drop(['is_wicket'], axis=1, inplace=True)\n\n    df = df[['Season', 'total_runs']]\n    df = pd.merge(df, ct, on=\"Season\")\n    df = pd.merge(df, balls, on=\"Season\")\n    df = pd.merge(df, matches_per_season, on=\"Season\")\n\n    df.rename({'inning':'balls bowled', 'total_runs':'runs_given'}, axis=1, inplace=True)\n    df['overs']=(df['balls bowled']\/\/6)\n    df['economy']=(df['runs_given']\/df['overs'])\n\n    return df\n\ndef preprocess_middle_overs(df):\n    \n    balls = df.groupby('Season').count()\n    balls = balls['inning']\n\n    matches_per_season = df.groupby('Season')['id'].nunique().reset_index()\n    matches_per_season.rename({'id':'matches played'}, axis=1, inplace=True)\n\n    df=df.groupby('Season').sum().reset_index()\n    df.drop(['is_wicket'], axis=1, inplace=True)\n\n    df = df[['Season', 'total_runs']]\n    df = pd.merge(df, balls, on=\"Season\")\n    df = pd.merge(df, matches_per_season, on=\"Season\")\n\n    df.rename({'inning':'balls bowled', 'total_runs':'runs_given'}, axis=1, inplace=True)\n    df['overs']=(df['balls bowled']\/\/6)\n    df['economy']=(df['runs_given']\/df['overs'])\n\n    return df","402ffc08":"list1 = [\"TA Boult\"]\nboult_data = season_data[season_data[\"bowler\"].isin(list1)]\nboult_data_powerplay = boult_data.loc[(boult_data['over'] <=6 )]\nboult_data_middle_overs = boult_data.loc[(boult_data['over'] >6 ) & (boult_data['over'] <= 15)]\nboult_data_death_overs = boult_data.loc[(boult_data['over'] >= 16 )]\n\nboult_data_powerplay = preprocess_pwrplay_death_overs(boult_data_powerplay)\nboult_data_powerplay.head(6)","3cfd4aa8":"boult_data_death_overs = preprocess_pwrplay_death_overs(boult_data_death_overs)\nboult_data_death_overs.head(6)","f5e4c00b":"boult_overs_2020 = {\n    'Stage of Match': ['Powerplay', 'Middle Overs', 'Death Overs'],\n    'Overs Bowled': [36, 5, 14]\n}\n\nboult_overs_2020 = pd.DataFrame(boult_overs_2020)\nboult_overs_2020","e3c63874":"temp_series = boult_overs_2020['Overs Bowled'].value_counts()\nlabels = ['Powerplay', 'Middle Overs', 'Death Overs']\nvalues = (np.array([36, 5, 14]))\ncolors = ['turquoise', 'crimson', 'yellow']\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values,hole=.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='label+percent', textfont_size=13,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))\nfig.update_layout(title=\"Overs Bowled by Boult in 2020 Season\",\n                  titlefont={'size': 30},\n                  )\nfig.show()","7aad757d":"boult_before_2020_overs = {\n    'Stage of Match': ['Powerplay', 'Middle Overs', 'Death Overs'],\n    'Overs Bowled': [68, 16, 45]\n}\n\nboult_before_2020_overs = pd.DataFrame(boult_before_2020_overs)\nboult_before_2020_overs","4f29502c":"temp_series = boult_before_2020_overs['Overs Bowled'].value_counts()\nlabels = ['Powerplay', 'Middle Overs', 'Death Overs']\nvalues = (np.array([68, 16, 45]))\ncolors = ['turquoise', 'crimson', 'yellow']\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values,hole=.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='label+percent', textfont_size=13,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))\nfig.update_layout(title=\"Overs Bowled by Boult before 2020 Season\",\n                  titlefont={'size': 30},\n                  )\nfig.show()\n# plt.savefig(\u201cfig_overs.png\u201d)","5d7415f5":"boult_pwrplay_wickets = {\n    'Season': [2015, 2016, 2017, 2018, 2019, 2020],\n    'wickets': [1,1,1,6,0,16]\n    }\n\nboult_pwrplay_wickets = pd.DataFrame(boult_pwrplay_wickets)\n\ntrace1 = go.Scatter(\n    x = boult_pwrplay_wickets['Season'].values,\n    y = boult_pwrplay_wickets['wickets'].values,\n    mode = 'lines+markers',\n    name = 'Wickets'\n)\n\nlayout = go.Layout(title=\"Wickets taken by Boult in Powerplay\",\n                   xaxis=dict(title=\"Season\"),\n                   yaxis=dict(title=\"Wickets Taken\"),\n                  plot_bgcolor='rgb(245,245,245)')\n\ndata = [trace1]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","be97a3a1":"season=matches[['id','season','winner']]\ncomplete_data=deliveries.merge(season,how='inner',left_on='id',right_on='id')","b7c90247":"powerplay_data=complete_data[complete_data['over']<=6]","d285a9c6":"powerplay_dismissals=powerplay_data.dropna(subset=['dismissal_kind']).groupby(['season','id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].max()\npowerplay_dismissals=powerplay_dismissals.reset_index()\npowerplay_dismissals\npowerplay_dismissals_first=powerplay_data[ powerplay_data['inning']==1].dropna(subset=['dismissal_kind']).groupby(['season','id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_first=powerplay_dismissals_first.reset_index()\n\npowerplay_dismissals_second=powerplay_data[ powerplay_data['inning']==2].dropna(subset=['dismissal_kind']).groupby(['season','id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_second=powerplay_dismissals_second.reset_index()","b45b63ff":"powerplay_dismissals_first  ##","fecfa487":"# powerplay_dismissals_bowler = powerplay_data.dropna(subset=['dismissal_kind']).groupby(['season','id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].max()\ndismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \npowerplay_dismissals=powerplay_data[powerplay_data[\"dismissal_kind\"].isin(dismissal_kinds)]","aaaef9a7":"powerplay_dismissals1 = powerplay_dismissals.groupby(['season', 'bowler'])['dismissal_kind'].agg(['count']).reset_index().groupby(['season', 'bowler'])['count'].max().to_frame().reset_index()\npowerplay_dismissals2 = powerplay_dismissals1.groupby(['season'])['count'].max() # # max powerplay dismissals every year","b208bcda":"powerplay_dismissals2 ##","ed379437":"season_2020 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 16) & (powerplay_dismissals1['season'] == 2020)]\nseason_2020","7ceacf7e":"season_2019 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 15) & (powerplay_dismissals1['season'] == 2019)]\nseason_2019","c23780e6":"season_2018 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 14) & (powerplay_dismissals1['season'] == 2018)]\nseason_2018","037e600b":"season_2017 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 10) & (powerplay_dismissals1['season'] == 2017)]\nseason_2017","926b91e3":"season_2016 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 14) & (powerplay_dismissals1['season'] == 2016)]\nseason_2016","2777801d":"season_2015 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 11) & (powerplay_dismissals1['season'] == 2015)]\nseason_2015","02958dd9":"season_2014 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 14) & (powerplay_dismissals1['season'] == 2014)]\nseason_2014","79b3c766":"season_2013 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 16) & (powerplay_dismissals1['season'] == 2013)]\nseason_2013","96a2a642":"season_2012 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 12) & (powerplay_dismissals1['season'] == 2012)]\nseason_2012","a3b28e32":"season_2011 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 12) & (powerplay_dismissals1['season'] == 2011)]\nseason_2011","939b37c1":"season_2010 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 8) & (powerplay_dismissals1['season'] == 2010)]\nseason_2010","20c74935":"season_2009 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 11) & (powerplay_dismissals1['season'] == 2009)]\nseason_2009","bffffe03":"season_2008 = powerplay_dismissals1.loc[(powerplay_dismissals1['count'] >= 13) & (powerplay_dismissals1['season'] == 2008)]\nseason_2008","e86696a0":"frames = [season_2008, season_2009, season_2010, season_2011, season_2012,\n         season_2013, season_2014, season_2015, season_2016, season_2017,\n         season_2018, season_2019, season_2020]\n\nmost_wickets_powerplay = pd.concat(frames)\nmost_wickets_powerplay.rename({'count': 'wickets'}, axis=1, inplace=True)\nmost_wickets_powerplay\n\nimport plotly.express as px\n\nfig = px.bar(most_wickets_powerplay, y='wickets', x='bowler', text='season')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title = 'Season-Wise Maximum Powerplay Wickets')\nfig.show()","e922487c":"# matches.drop(['season'], axis=1, inplace=True)\nMOTM = matches[['season', 'city', 'player_of_match', 'venue', 'team1', 'team2', 'toss_decision', 'winner', 'eliminator']]\nMOTM\n\nMOTM_boult = MOTM.loc[(MOTM['player_of_match'] == 'TA Boult')]\nMOTM_boult\n\ntemp_series = MOTM_boult.season.value_counts()\nlabels = (np.array(temp_series.index))\nvalues = (np.array((temp_series \/ temp_series.sum())*100))\ncolors = ['turquoise', 'crimson']\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values,hole=.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='label+percent', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))\nfig.update_layout(title=\"MOTM Awards\",\n                  titlefont={'size': 30},\n                  )\nfig.show()","b8faa48a":"list1 = [\"TA Boult\"]\nboult_data2 = season_data[season_data[\"bowler\"].isin(list1)]\n\ndismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct=boult_data2[boult_data2[\"dismissal_kind\"].isin(dismissal_kinds)]\n\nct = ct.loc[(ct['Season'] == 2020)]\nct\nboult_2020_venue = ct.venue.value_counts().rename_axis('Venue').reset_index(name='Wickets')\n\nfig = px.bar(boult_2020_venue, y='Wickets', x='Venue')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title = '')\nfig.update_traces(width=0.3)\nfig.show()","2622459a":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct=boult_data2[boult_data2[\"dismissal_kind\"].isin(dismissal_kinds)]\n\nct = ct.loc[ct['Season'] == 2020]\nct\n\nboult_2020_batsmen = ct.batsman.value_counts().rename_axis('Batsman').reset_index(name='Number of Wickets')\nboult_2020_batsmen\n\ntrace = go.Table(\n    header=dict(values=[\"Batsman\",\"Number of Wickets\"],\n                fill = dict(color = 'red'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[boult_2020_batsmen['Batsman'], boult_2020_batsmen['Number of Wickets']],\n               fill = dict(color = ['lightsalmon', 'rgb(245, 245, 249)']),\n               align = ['center'], font_size=13))\n\nlayout = dict(\n    width=830,\n    height=410,\n    autosize=False,\n    title='Wickets of Boult in 2020 Season',\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","c12f084d":"boult_data_middle_overs = preprocess_middle_overs(boult_data_middle_overs)\nboult_data_middle_overs = boult_data_middle_overs[['Season', 'overs', 'economy']]\n\ntrace = go.Table(\n    header=dict(values=['Season', 'overs', 'economy'],\n                fill = dict(color = 'red'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[boult_data_middle_overs['Season'], boult_data_middle_overs['overs'], boult_data_middle_overs['economy']],\n               fill = dict(color = ['lightsalmon', 'rgb(245, 245, 249)']),\n               align = ['center'], font_size=13))\n\nlayout = dict(\n    width=830,\n    height=410,\n    autosize=False,\n    title='',\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","a6da1a78":"list1 = [\"JJ Bumrah\"]\nbumrah_data = season_data[season_data[\"bowler\"].isin(list1)]\nbumrah_data_powerplay = bumrah_data.loc[(bumrah_data['over'] <=6 )]\nbumrah_data_middle_overs = bumrah_data.loc[(bumrah_data['over'] >6 ) & (bumrah_data['over'] <= 15)]\nbumrah_data_death_overs = bumrah_data.loc[(bumrah_data['over'] >= 16 )]\n\nbumrah_data_powerplay = preprocess_pwrplay_death_overs(bumrah_data_powerplay)\nbumrah_data_powerplay.head(10)","9e7bfaee":"bumrah_data_middle_overs = preprocess_pwrplay_death_overs(bumrah_data_middle_overs)\nbumrah_data_middle_overs.head(10)","14b309d4":"bumrah_data_death_overs = preprocess_pwrplay_death_overs(bumrah_data_death_overs)\nbumrah_data_death_overs.head(10)","5d7b4743":"json_file = []\n\njson_file.append({'Stage': 'Powerplay', 'Bumrah Economy': 6.176, 'Boult Economy': 6.72 })\njson_file.append({'Stage': 'Middle Overs', 'Bumrah Economy': 5.125, 'Boult Economy': 11.00})\njson_file.append({'Stage': 'Death Overs', 'Bumrah Economy': 9.600, 'Boult Economy': 10.00})\n\ncombined_df = pd.DataFrame(json_file)\ncombined_df","c6226afb":"trace1 = go.Scatter(\n    x = combined_df['Stage'].values,\n    y = combined_df['Bumrah Economy'].values,\n    mode = 'lines+markers',\n    name = 'Bumrah'\n)\n\ntrace2 = go.Scatter(\n    x = combined_df['Stage'].values,\n    y = combined_df['Boult Economy'].values,\n    mode = 'lines+markers',\n    name = 'Boult'\n)\n\nlayout = go.Layout(title=\"\",\n                   xaxis=dict(title=\"Stage\"),\n                   yaxis=dict(title=\"Economy\"),\n                  plot_bgcolor='rgb(245,245,245)')\n\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a9e9bcd8":"json_file = []\n\njson_file.append({'Stage': 'Powerplay', 'Bumrah Wickets': 7, 'Boult Wickets': 16 })\njson_file.append({'Stage': 'Middle Overs', 'Bumrah Wickets': 13, 'Boult Wickets': 2})\njson_file.append({'Stage': 'Death Overs', 'Bumrah Wickets': 7, 'Boult Wickets': 7})\n\ncombined_df = pd.DataFrame(json_file)\ncombined_df","9bb47b07":"trace1 = go.Bar(x=combined_df['Stage'],y=combined_df['Bumrah Wickets'],name='Bumrah',  marker = dict(line=dict(color='#000000', width=1.5)))\ntrace2 = go.Bar(x=combined_df['Stage'],y=combined_df['Boult Wickets'],name='Boult',  marker = dict(line=dict(color='#000000', width=1.5)))\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(title=\"\",\n                   xaxis=dict(title=\"Stage\"),\n                   yaxis=dict(title=\"Wickets\"),\n                  plot_bgcolor='rgb(245,245,245)')\n\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","c6d5f8a0":"season=matches[['id','season','winner', 'venue']]\ncomplete_data=deliveries.merge(season,how='inner',left_on='id',right_on='id')\n\ncomplete_data","ee657ad5":"high_scores=complete_data.groupby(['id', 'inning','batting_team','bowling_team', 'season', 'venue'])['total_runs'].sum().reset_index() \nhigh_scores=high_scores[high_scores['total_runs']>=200]\nhss = high_scores.nlargest(10,'total_runs')","6c98efa1":"high_scoring_venues = high_scores.venue.value_counts().rename_axis('venue').reset_index(name='Number of Scores')\nhigh_scoring_venues.at[1, 'Number of Scores'] += high_scoring_venues.at[6, 'Number of Scores'] # M Chinnaswamy Stadium AND M.Chinnaswamy Stadium are the same\nhigh_scoring_venues.drop([6], axis=0, inplace=True)\nhigh_scoring_venues\n\ndata = [{\"y\": high_scoring_venues['Number of Scores'],\"x\": high_scoring_venues['venue'], \n          \"marker\": {\"color\": \"lightblue\", \"size\": 12},\n         \"line\": {\"color\": \"red\",\"width\" : 2,\"dash\" : 'dash'},\n          \"mode\": \"markers+lines\", \"name\": \"Women\", \"type\": \"scatter\"}]\n\nlayout = {\"title\": \"Stadiums Vs. 200+ Scores\", \n          \"xaxis\": {\"title\": \"Scores of 200+\", }, \n          \"yaxis\": {\"title\": \"Stadiums\"},\n          \"autosize\":False,\"width\":1000,\"height\":800,\"plot_bgcolor\":\"rgb(245,245,245)\"}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c3a18026":"hss","2bb11e95":"trace = go.Table(\n    header=dict(values=[\"Inning\",\"Batting Team\",\"Bowling Team\", \"Total Runs\", \"Season\"],\n                fill = dict(color = 'red'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[hss['inning'], hss['batting_team'], hss['bowling_team'], hss['total_runs'], hss['season']],\n               fill = dict(color = ['lightsalmon', 'rgb(245, 245, 249)']),\n               align = ['center'], font_size=13))\n\nlayout = dict(\n    width=830,\n    height=410,\n    autosize=False,\n    title='Highest scores of IPL',\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","c0527c04":"high_scores=high_scores[high_scores.batting_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'RPS']\nhigh_scores=high_scores[high_scores.bowling_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'PW']","8b42abaf":"high_scores=high_scores.groupby(['inning','batting_team']).count().reset_index()\nhigh_scores.drop([\"bowling_team\",\"total_runs\"],axis=1,inplace=True)\nhigh_scores.rename(columns={\"id\":\"total_times\"},inplace=True)\n\nhigh_scores_1 = high_scores[high_scores['inning']==1]\nhigh_scores_2 = high_scores[high_scores['inning']==2]\n\ntot = high_scores_1.sort_values(by = 'total_times',ascending=False).head(2)","656546d3":"\ntrace1 = go.Bar(x=high_scores_1['batting_team'],y=high_scores_1['total_times'],name='Ist Innings',  marker = dict(line=dict(color='#000000', width=1.5)))\ntrace2 = go.Bar(x=high_scores_2['batting_team'],y=high_scores_2['total_times'],name='IInd Innings', marker = dict(line=dict(color='#000000', width=1.5)))\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('At Ist Innings','At IInd Innings'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\niplot(fig)","f3c2d53c":"high_scores=complete_data.groupby(['id', 'inning','batting_team','bowling_team', 'venue'])['total_runs'].sum().reset_index()\nhigh_scores1=high_scores[high_scores['inning']==1]\nhigh_scores2=high_scores[high_scores['inning']==2]\nhigh_scores1=high_scores1.merge(high_scores2[['id','inning', 'total_runs']], on='id')\nhigh_scores1.rename(columns={'inning_x':'inning_1','inning_y':'inning_2','total_runs_x':'inning1_runs','total_runs_y':'inning2_runs'},inplace=True)\nhigh_scores1=high_scores1[high_scores1['inning1_runs']>=199]\nhigh_scores1['is_score_chased']=1\nhigh_scores1['is_score_chased'] = np.where(high_scores1['inning1_runs']<=high_scores1['inning2_runs'], 'yes', 'no')","a03bc520":"high_scores_chased = high_scores1.loc[(high_scores1['is_score_chased'] == 'yes')]\nhigh_scores_chased.sort_values(by = ['inning2_runs'], ascending=True, inplace=True)\nhigh_score_chased_venues = high_scores_chased.venue.value_counts().rename_axis('Venue').reset_index(name='count')\nhigh_score_chased_venues.at[2, 'count'] += high_score_chased_venues.at[0, 'count']\nhigh_score_chased_venues.drop([0], axis=0, inplace=True)\nhigh_score_chased_venues","26ab5497":"data = [{\"y\": high_score_chased_venues['count'],\"x\": high_score_chased_venues['Venue'], \n          \"marker\": {\"color\": \"lightblue\", \"size\": 12},\n         \"line\": {\"color\": \"red\",\"width\" : 2,\"dash\" : 'dash'},\n          \"mode\": \"markers+lines\", \"name\": \"Women\", \"type\": \"scatter\"}]\n\nlayout = {\"title\": \"Stadiums Vs. 200+ Scores Chased\", \n          \"yaxis\": {\"title\": \"Stadiums\"},\n          \"autosize\":False,\"width\":1000,\"height\":800,\"plot_bgcolor\":\"rgb(245,245,245)\"}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","18a935c9":"slices=high_scores1['is_score_chased'].value_counts().reset_index().is_score_chased\nlist(slices)\nlabels=['No','Yes']\nslices","36098086":"trace0 = go.Pie(labels=labels, values=slices,\n              hoverinfo='label+value',  marker = dict(line=dict(color='#000000', width=2)))\n\nlayout=go.Layout(title='200 score chased ?')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","af80df5d":"high_scores=deliveries.groupby(['id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()\nhigh_scores1=high_scores[high_scores['inning']==1]\nhigh_scores2=high_scores[high_scores['inning']==2]\nhigh_scores1=high_scores1.merge(high_scores2[['id','inning', 'total_runs']], on='id')\nhigh_scores1.rename(columns={'inning_x':'inning_1','inning_y':'inning_2','total_runs_x':'inning1_runs','total_runs_y':'inning2_runs'},inplace=True)\nhigh_scores1=high_scores1[high_scores1['inning1_runs']>=199]\nhigh_scores1['is_score_chased']=1\nhigh_scores1['is_score_chased'] = np.where(high_scores1['inning1_runs']<=high_scores1['inning2_runs'], 'yes', 'no')\n\nhigh_scores_chased = high_scores1.loc[(high_scores1['is_score_chased'] == 'yes')]\nhigh_scores_chased.sort_values(by = ['inning2_runs'], ascending=True, inplace=True)\nhigh_scores_chased.tail(100)","8005392d":"team_chasing = high_scores_chased.bowling_team.value_counts().rename_axis('Team').reset_index(name='Wins')\n\ndata = [go.Bar(x=team_chasing['Team'].values,y=team_chasing['Wins'].values,\n                name='Total Matches',\n                marker=dict(color='rgb(255,140,0)',\n                            line=dict(color='rgb(8,48,107)',width=1.5,)),opacity=0.7)]\n\nlayout = go.Layout(title='Successful 200+ Chases',xaxis = dict(tickmode='linear',title=\"Team\"),\n                   yaxis=dict(title='Wins'), plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","1ae3bf7d":"successful_chases = high_scores1.loc[(high_scores1['is_score_chased'] == 'yes')]\nsuccessful_chases","70f63b88":"srh_vs_rr = deliveries.loc[(deliveries['id'] == 335990)]\nkxip_vs_rcb = deliveries.loc[(deliveries['id'] == 419112)]\nkkr_vs_kxip = deliveries.loc[(deliveries['id'] == 419139)]\nrcb_vs_csk1 = deliveries.loc[(deliveries['id'] == 548318)]\ncsk_vs_kxip = deliveries.loc[(deliveries['id'] == 729283)]\nsrh_vs_kxip = deliveries.loc[(deliveries['id'] == 734007)]\nkxip_vs_kkr = deliveries.loc[(deliveries['id'] == 734049)]\ngl_vs_dc = deliveries.loc[(deliveries['id'] == 1082632)]\nkkr_vs_csk = deliveries.loc[(deliveries['id'] == 1136565)]\nrcb_vs_csk2 = deliveries.loc[(deliveries['id'] == 1136584)]\nrcb_vs_kkr = deliveries.loc[(deliveries['id'] == 1175372)]\nkxip_vs_rr = deliveries.loc[(deliveries['id'] == 1216527)]\nrcb_vs_mi = deliveries.loc[(deliveries['id'] == 1216547)]\n\narray = [srh_vs_rr, kxip_vs_rcb, kkr_vs_kxip, rcb_vs_csk1,csk_vs_kxip, srh_vs_kxip, kxip_vs_kkr, gl_vs_dc,\n        kkr_vs_csk, rcb_vs_csk2, rcb_vs_kkr, kxip_vs_rr, rcb_vs_mi]\n\narray_names = ['SRH vs RR', 'kxip_vs_rcb', 'kkr_vs_kxip', 'rcb_vs_csk1','csk_vs_kxip', 'srh_vs_kxip', 'kxip_vs_kkr', \n               'gl_vs_dc',\n        'kkr_vs_csk', 'rcb_vs_csk2', 'rcb_vs_kkr', 'kxip_vs_rr', 'rcb_vs_mi']","17af2a78":"import plotly.express as px\n\ndef plot_overwise_bar_graph(df, name):\n\n    df = df.loc[(df['inning'] == 2)]\n\n    df = df.groupby('over').sum().reset_index()\n    df['over']+=1\n\n    trace2 = go.Scatter(x=df['over'],y = df['is_wicket'], name='Wicket', mode='markers')\n\n    data = [go.Bar(x=df['over'],y=df['total_runs'],opacity=0.4, name='Runs'), trace2]\n\n    layout = go.Layout(title=name,\n                       yaxis=dict(title='Runs'),bargap=0.2, plot_bgcolor='rgb(245,245,245)')\n\n    fig = go.Figure(data=data, layout=layout)\n    fig.update_xaxes(tick0=1, dtick=1)\n\n    iplot(fig)","3f7bc910":"ii = 0\nfor arr in array:\n    plot_overwise_bar_graph(arr, array_names[ii])\n    ii+=1","1138a58f":"def preprocess(df, name):\n    df = df.loc[(df['inning'] == 2)]\n\n    df = df.groupby('over').sum().reset_index()\n    df['over']+=1\n    trace2 = go.Scatter(x=df['over'],y = df['total_runs'], name=name, mode='markers')\n    return trace2","e21282ae":"trace_array = []\nii = 0\n\nfor arr in array:\n    trace_array.append(preprocess(arr, array_names[ii]))\n    ii+=1\n    \n    \ndata = trace_array\n\nlayout = go.Layout(title='Runs in Each Over',xaxis = dict(tickmode='linear',title=\"Over\"),\n                                    yaxis = dict(title= \"Runs\"), plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data,layout=layout)\nfig.add_hline(y=18)\n\niplot(fig)","0df8a4f1":"def powerplay(df):\n    df = df.loc[(df['over'] <= 6)]\n    df = df.loc[(df['inning'] == 2)]\n    df = df.groupby('over').sum().reset_index()\n    \n    return df['total_runs'].sum()\n\ndef middle_overs(df):\n\n    df = df.loc[(df['over'] > 6) & (df['over'] <= 15)]\n    df = df.loc[(df['inning'] == 2)]\n    df = df.groupby('over').sum().reset_index()\n    \n    return df['total_runs'].sum()\n\ndef death_overs(df):\n    df = df.loc[(df['over'] >= 16)]\n    df = df.loc[(df['inning'] == 2)]\n    df = df.groupby('over').sum().reset_index()\n    \n    return df['total_runs'].sum()\n\ndef powerplay_wickets(df):\n    df = df.loc[(df['over'] <= 6)]\n    df = df.loc[(df['inning'] == 2)]\n    df = df.groupby('over').sum().reset_index()\n    \n    return df['is_wicket'].sum()\n\ndef middle_overs_wickets(df):\n\n    df = df.loc[(df['over'] > 6) & (df['over'] <= 15)]\n    df = df.loc[(df['inning'] == 2)]\n    df = df.groupby('over').sum().reset_index()\n    \n    return df['is_wicket'].sum()\n\ndef death_overs_wickets(df):\n    df = df.loc[(df['over'] >= 16)]\n    df = df.loc[(df['inning'] == 2)]\n    df = df.groupby('over').sum().reset_index()\n    \n    return df['is_wicket'].sum()\n    \n    ","fbe0daec":"array = [srh_vs_rr, kxip_vs_rcb, kkr_vs_kxip, rcb_vs_csk1,csk_vs_kxip, srh_vs_kxip, kxip_vs_kkr, gl_vs_dc,\n        kkr_vs_csk, rcb_vs_csk2, rcb_vs_kkr, kxip_vs_rr, rcb_vs_mi]\n\npowerplay_overs1 = []\nmiddle_overs1 = []\ndeath_overs1 = []\n\nii = 0\njson_file = []\n\nfor arr in array:\n    powerplay_overs1.append(powerplay(arr))\n    middle_overs1.append(middle_overs(arr))\n    death_overs1.append(death_overs(arr))\n    \n    \n    json_file.append({'Stage': 'Powerplay', 'Runs': powerplay(arr), 'Match': array_names[ii]})\n    json_file.append({'Stage': 'Middle Overs', 'Runs': middle_overs(arr), 'Match': array_names[ii]})\n    json_file.append({'Stage': 'Death Overs', 'Runs': death_overs(arr), 'Match': array_names[ii]})\n    ii+=1\n    \ndf = pd.DataFrame(json_file)\n\nfig = px.box(df, x='Stage', y=\"Runs\", points=\"all\")\nfig.show()","6fa4d660":"powerplay_overs1 = []\nmiddle_overs1 = []\ndeath_overs1 = []\n\nii = 0\njson_file = []\n\nfor arr in array:\n    \n    json_file.append({'Stage': 'Powerplay', 'Wickets': powerplay_wickets(arr), 'Match': array_names[ii]})\n    json_file.append({'Stage': 'Middle Overs', 'Wickets': middle_overs_wickets(arr), 'Match': array_names[ii]})\n    json_file.append({'Stage': 'Death Overs', 'Wickets': death_overs_wickets(arr), 'Match': array_names[ii]})\n    ii+=1\n    \ndf = pd.DataFrame(json_file)\n\nfig = px.box(df, x='Stage', y=\"Wickets\")\nfig.show()","b1642e71":"df = rcb_vs_csk1\ndf = df.loc[(df['over'] <= 6)]\ndf = df.loc[(df['inning'] == 2)]\n\ndf = df.groupby('over').sum().reset_index()\ndf\n","0b92b752":"rcb_vs_csk1","c2de7b60":"json_file = []\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 139, 'Match': 'KXIP vs RR'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 75, 'Match': 'KXIP vs RR'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 4, 'Match': 'KXIP vs RR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 144, 'Match': 'SRH vs RR'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 61, 'Match': 'SRH vs RR'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 5, 'Match': 'SRH vs RR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 170, 'Match': 'GL vs DC'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 32, 'Match': 'GL vs DC'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'GL vs DC'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 105, 'Match': 'KXIP vs SRH'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 102, 'Match': 'KXIP vs SRH'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'KXIP vs SRH'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 105, 'Match': 'RCB vs CSK - 1'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 98, 'Match': 'RCB vs CSK - 1'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'RCB vs CSK - 1'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 100, 'Match': 'RCB vs CSK - 2'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 96, 'Match': 'RCB vs CSK - 2'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'RCB vs CSK - 2'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 127, 'Match': 'KXIP vs CSK'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 73, 'Match': 'KXIP vs CSK'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'KXIP vs CSK'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 86, 'Match': 'RCB vs KKR'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 107, 'Match': 'RCB vs KKR'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'RCB vs KKR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 95, 'Match': 'CSK vs KKR'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 103, 'Match': 'CSK vs KKR'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'CSK vs KKR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 178, 'Match': 'KXIP vs RCB'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 16, 'Match': 'KXIP vs RCB'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'KXIP vs RCB'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 166, 'Match': 'KKR vs KXIP'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 33, 'Match': 'KKR vs KXIP'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'KKR vs KXIP'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 122, 'Match': 'KXIP vs KKR'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 57, 'Match': 'KXIP vs KKR'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 15, 'Match': 'KXIP vs KKR'})\n\ndf = pd.DataFrame(json_file)\n\nfig = px.box(df, x='Batsmen', y=\"Runs\", title = \"Distribution of Batsman Runs\")\nfig.show()","c2e642ac":"import pandas as pd\nimport plotly.express as px\n\njson_file = []\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 139, 'Match': 'KXIP vs RR'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 75, 'Match': 'KXIP vs RR'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rate': 4, 'Match': 'KXIP vs RR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 144, 'Match': 'SRH vs RR'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 61, 'Match': 'SRH vs RR'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rate': 5, 'Match': 'SRH vs RR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 170, 'Match': 'GL vs DC'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 32, 'Match': 'GL vs DC'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rate': 0, 'Match': 'GL vs DC'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 105, 'Match': 'KXIP vs SRH'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 102, 'Match': 'KXIP vs SRH'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rate': 0, 'Match': 'KXIP vs SRH'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 105, 'Match': 'RCB vs CSK - 1'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 98, 'Match': 'RCB vs CSK - 1'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rate': 0, 'Match': 'RCB vs CSK - 1'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 100, 'Match': 'RCB vs CSK - 2'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 96, 'Match': 'RCB vs CSK - 2'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rate': 0, 'Match': 'RCB vs CSK - 2'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 127, 'Match': 'KXIP vs CSK'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 73, 'Match': 'KXIP vs CSK'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rate': 0, 'Match': 'KXIP vs CSK'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 86, 'Match': 'RCB vs KKR'})\njson_file.append({'Batsmen': 'Middle Order', 'Strike Rate': 107, 'Match': 'RCB vs KKR'})\njson_file.append({'Batsmen': 'Lower Order', 'Strike Rates': 0, 'Match': 'RCB vs KKR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Strike Rate': 95, 'Match': 'CSK vs KKR'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 103, 'Match': 'CSK vs KKR'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'CSK vs KKR'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 178, 'Match': 'KXIP vs RCB'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 16, 'Match': 'KXIP vs RCB'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'KXIP vs RCB'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 166, 'Match': 'KKR vs KXIP'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 33, 'Match': 'KKR vs KXIP'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 0, 'Match': 'KKR vs KXIP'})\n\njson_file.append({'Batsmen': 'Top Order', 'Runs': 122, 'Match': 'KXIP vs KKR'})\njson_file.append({'Batsmen': 'Middle Order', 'Runs': 57, 'Match': 'KXIP vs KKR'})\njson_file.append({'Batsmen': 'Lower Order', 'Runs': 15, 'Match': 'KXIP vs KKR'})\n\ndf = pd.DataFrame(json_file)\n\nfig = px.box(df, x='Batsmen', y=\"Runs\", title = \"Distribution of Batsman Runs\")\nfig.show()","91225eeb":"season=matches[['id','season','winner', 'date']]\ncomplete_data=deliveries.merge(season,how='inner',left_on='id',right_on='id')\ncomplete_data = complete_data.loc[(complete_data['id'] == 335990) | \n                                 (complete_data['id'] == 419112) |\n                                  (complete_data['id'] == 419139) |\n                                   (complete_data['id'] == 548318) |\n                                    (complete_data['id'] == 729283) |\n                                     (complete_data['id'] == 734007) |\n                                      (complete_data['id'] == 734049) |\n                                       (complete_data['id'] == 1082632) |\n                                        (complete_data['id'] == 1136565) |\n                                         (complete_data['id'] == 1136584) |\n                                          (complete_data['id'] == 1175372) |\n                                           (complete_data['id'] == 1216527) |\n                                            (complete_data['id'] == 1216547)]\n\ncomplete_data = complete_data.loc[(complete_data['inning'] == 2)]\n\ncomplete_data2 = complete_data\n\ncomplete_data = complete_data.groupby(['id', 'batsman', 'bowling_team', 'batting_team']).sum().reset_index()\ncomplete_data","5854816c":"complete_data2 = complete_data2.groupby(['id', 'batsman', 'bowling_team', 'batting_team']).count().reset_index()\ncomplete_data2 = complete_data2[['id', 'batsman', 'bowling_team', 'batting_team', 'ball']]\ncomplete_data2.rename({'ball': 'Balls Played'}, axis=1, inplace = True)\ncomplete_data2","59d4ce81":"complete_data['Balls Played'] = complete_data2['Balls Played']\ncomplete_data","148cfc96":"complete_data['Strike Rate'] = complete_data['batsman_runs']*100\/complete_data['Balls Played']\ncomplete_data","98e842ee":"fig = px.scatter(complete_data, x=\"Balls Played\", y=\"Strike Rate\",\n         size=\"batsman_runs\", color=\"batsman\")\n\nfig.add_vrect(x0=0, x1=18, line_width=0, fillcolor=\"red\", opacity=0.2)\nfig.add_vrect(x0=18, x1=35, line_width=0, fillcolor=\"orange\", opacity=0.2)\nfig.add_vrect(x0=35, x1=70, line_width=0, fillcolor=\"green\", opacity=0.2)\n\n\nfig.show()","f9126910":"season=matches[['id','season','winner', 'date']]\ncomplete_data=deliveries.merge(season,how='inner',left_on='id',right_on='id')\ncomplete_data = complete_data.loc[(complete_data['id'] == 335990) | \n                                 (complete_data['id'] == 419112) |\n                                  (complete_data['id'] == 419139) |\n                                   (complete_data['id'] == 548318) |\n                                    (complete_data['id'] == 729283) |\n                                     (complete_data['id'] == 734007) |\n                                      (complete_data['id'] == 734049) |\n                                       (complete_data['id'] == 1082632) |\n                                        (complete_data['id'] == 1136565) |\n                                         (complete_data['id'] == 1136584) |\n                                          (complete_data['id'] == 1175372) |\n                                           (complete_data['id'] == 1216527) |\n                                            (complete_data['id'] == 1216547)]\n\ncomplete_data = complete_data.loc[(complete_data['inning'] == 2)]\n\ncomplete_data2 = complete_data\n\ncomplete_data = complete_data.groupby(['id', 'bowler', 'bowling_team', 'batting_team']).sum().reset_index()\ncomplete_data","d7825b98":"complete_data2 = complete_data2.groupby(['id', 'bowler', 'bowling_team', 'batting_team']).count().reset_index()\ncomplete_data2 = complete_data2[['id', 'bowler', 'bowling_team', 'batting_team', 'ball']]\ncomplete_data2['over'] = complete_data2['ball']\/\/6\ncomplete_data2 = complete_data2[['id', 'bowler', 'ball', 'over']]\ncomplete_data2","c7365140":"complete_data['over'] = complete_data2['over']\ncomplete_data['ball'] = complete_data2['ball']\ncomplete_data","53d876c4":"complete_data = complete_data[['id', 'bowler', 'bowling_team', 'batting_team', 'over', 'ball', 'total_runs', 'is_wicket']]\ncomplete_data","cb512751":"complete_data['run per ball'] = complete_data['total_runs']\/complete_data['ball']\ncomplete_data","c4263448":"complete_data.rename({'ball': 'Balls Bowled'}, axis=1, inplace=True)\nfig = px.scatter(complete_data, x=\"Balls Bowled\", y=\"run per ball\",\n         size=\"is_wicket\", color=\"bowler\")\n\n# fig.add_hline(y=30)\n# fig.add_vline(x=24)\n\nfig.add_hrect(y0=0, y1=1.2, line_width=0, fillcolor=\"green\", opacity=0.2)\nfig.add_hrect(y0=1.2, y1=2.0, line_width=0, fillcolor=\"orange\", opacity=0.2)\nfig.add_hrect(y0=2.0, y1=3.3, line_width=0, fillcolor=\"red\", opacity=0.2)\n\n\nfig.show()","dd4cd4b9":"<a id=\"top\"><\/a>\n<h1 style=\"font-family:verdana;\"> <center>\ud83c\udfc6 All about IPL : Indian Premier league \ud83c\udfc6<\/center> <\/h1>\n<p><center style=\"color:#159364; font-family:cursive;\">Let's start with a little intro<\/center><\/p>\n\n***\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n    \ud83d\udccc &nbsp;The Indian Premier League (IPL) is a professional Twenty20 cricket league in India contested during March or April and May of every year by eight teams representing eight different cities in India.The league was founded by the Board of Control for Cricket in India (BCCI) in 2008. The IPL has an exclusive window in ICC Future Tours Programme. Currenly it's 14th season of IPL\n<\/div>\n","c0e18159":"## Contents:\n\n- [Necessary Libraries](#s1)\n- [Loading Dataset](#s2)\n- [Basic analysis](#s3)\n - [Matches in Every Season](#ss1)\n - [Venue of Most Matches](#ss2)\n- [Renaissance of Boult](#s4)\n- [Successful 200+ run chase](#s5)","b5784787":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccHowever, a more interesting table to look at would be the number of times teams have put scores in excess of 200 runs, both in the first and second innings.\n","b0e76687":"# Bowler Analysis","c69c5535":"### Venues","b64428ba":"![image.png](attachment:75c1cb8a-b66c-4f57-99aa-36cbbdd9372b.png)","c4f7287f":"![image.png](attachment:62e1bd64-fa29-4b4b-aac1-4d30ae760712.png)","b28dd503":"### Distribtion of Boult's overs","19d276ac":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul> \n            <li> The green region contains the bowlers who have bowled economically. It also contains most of the bigger bubbles (more wickets taken) indicating that these are the prime bowlers for their respective teams and the opposition has played them cautiously. On examination (by hovering over the bubbles), we find that the green region mainly contains front-line spinners like M. Muralitharan, Sunil Narine, Amit Mishra, Washington Sundar, Axar Patel, Yuzvender Chahal, etc. Spinners generally bowl in the power plays for middle overs which would be the reason for their economical bowling <\\li>\n                <br>\n             <li>The yellow region contains the maximum number of bubbles. Most bowlers end up conceding between 1.25 to 2 runs per ball, i.e. an economy of 8 to 12. They are the frontline fast bowlers or spinners who have to bowl the difficult overs.<\\li> \n                 <br>\n             <li>The third region contains few circles but at more than 2 runs per ball, or an economy of over 12, it is clear that every match would have at least one bowler who has to face the carnage.  <\\li>                 \n        <\/ul>\n<\/div>\n\n\n\n\n","47a125dc":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccWe look at the highest scores in the IPL so far. All these are first innings scores. The highest successful run chase in the IPL history is 226 runs, chased by Rajasthan Royals against Kings XI Punjab. \n","bc7a8342":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccSo, the odds of chasing at the Chinnaswamy Stadium are the highest. The small ground and the dew factor are the reasons for successful run chases.\n","cb711dcc":"<p style=\"font-size:15px; font-family:verdana;\">In December 2018, the team changed its name from the <span style=\"color:crimson;\">Delhi Daredevils<\/span> to the <span style=\"color:crimson;\">Delhi Capitals<\/span><br>\n    <span style=\"color:green;\">Sunrisers Hyderabad<\/span> replaced the <span style=\"color:green;\">Deccan Chargers<\/span> in 2012 and debuted in 2013 (But i consider them same in this kernel) .<p>\n","598f91d7":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccIf you guessed RR vs KXIP, you are right! This is that famous match where Rahul Tewatia redeemed himself after a slow start.\n","5ce06959":"# Batsman Analysis","b8fa4df7":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccThe following plot is also interesting because the team hardly scores any runs in the death overs barring the 18th over. But that is enough to take them over the finishing line. \n","181d6890":"\n1. The red region has many bubbles :\n        a. Most bubbles are small indicating that the batsman did not score many runs \n        b. Most bubbles are over a strike rate of 100 which indicates that the new batsman did not waste too many balls to get set.\n    \n    \n2. The yellow region contains medium sized bubbles. It contains the middle order batsmen like MS Dhoni, Yusuf Pathan, Sam Billings, Maxwell, Pollard. Quite a few of them have a strike rate over 200. These contributions in the range of 20-40 runs, at a strike rate of over 150, are vital in any run chase to provide the required momentum towards the end of the innings. Most batsmen in this region have played the role of finishers for their respective teams.\n\n\n3. The green region contains large scores coming from the top order batsmen. It is interesting to note that in 11 out of 13 run chases, a batsman played more than 40 balls.The strike rate of all these batsmen is well over 100 indicating that they effectively anchored the run chase.\n","446e42c9":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc Boult bowled significantly <b>lesser number of powerplay overs and more death overs <\/b>. This explains why his economy rate was higher in the earlier seasons. Also, having Bumrah, Pattinson and Coulter-Nile in the same team would have given the Mumbai captain the luxury of using Boult primarily as a powerplay bowler in the season.","7299a6c0":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li> WHEN THE IPL BEGAN, ANY 200+ SCORE BATTING FIRST WAS CONSIDERED A WINNING SCORE. <\\li>\n             <li>HOWEVER, WITH POWER HITTERS LINING UP IN ALL TEAMS, NO SCORE CAN BE CONSIDERED SAFE TODAY.<\\li> \n             <li>SO, WHAT ARE THE KEY FACTORS TO CHASE DOWN A 200+ SCORE? <\\li>\n             <li>IS THERE A SET PATTERN THAT CAN BE UNCOVERED FOR SUCCESSFUL CHASES?\n<\/li>\n        <\/ul>\n<\/div>","d20e2e92":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccThe following bubble plot shows the distribution of the runs conceded per ball against the ball bowled by different bowlers in the 2nd innings. The size of the bubble is proportional to the wickets taken. This plot can be primarily divided into three regions","7a20e728":"<a id=\"s2\"><\/a>\n## 2. Loading Dataset","885ab096":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccHe had his best season in terms of economy going just over 7 runs an over.\n","178ea493":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccDouble click on a legend to look at a particular match","84af18a0":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc However, Boult is not a particularly effective bowler in the middle overs. Though the sample size is less, ie, Boult has only bowled a few overs, it can be argued that his economy could be the reason for the lesser number of overs bowled.\n","9fbdf339":"1. The median score in the powerplay is 72 runs @ 12 runs\/over. \n2. The median score in the middle overs (7-15) is 90 runs @ 10 runs\/over. \n3. The median score in the death overs is 45 runs @ 9 runs\/over. \n\n\nThe decreasing run rate corresponding to the median score indicates that :\n1. It is difficult to chase more than 45-50 runs in the death overs, the only real exception being 79 runs being chased down by Russell\u2019s KKR in the last 5 overs.\n2. Good start is required in powerplay at about 12 runs\/over\n3. Consolidate in the middle overs\n\n\nIn such a scenario, the start provided by the openers is extremely vital to your chances of winning the match. Also, even if you lose wickets in the middle overs, you need to keep the scoring momentum going.\n","6f955335":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccWhile RCB seem to be masters at putting up mammoth scores on the board in the first innings, they have only managed 200+ runs twice in the second innings. CSK and KXIP seem to be the best chasers when it comes to chasing big totals. \n","d3165b7f":"<a href=\"#top\" class=\"btn btn-success btn-lg active\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Go to TOP<\/a>","a9534dd7":"## Distribution of Runs","21d938cd":"# Scores of Batsmen","58c8b864":"<a id=\"ss3\"><\/a>\n### 3.2 Venue of Most Matches","baa1b89e":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccMost batsmen target a specific bowler in T20 games. This ensures that the batsman protects his wicket against the best bowlers in the opposition and scores runs against the other bowlers. In a high scoring encounter, the many times most bowlers end up having economies in excess of 10. We would like to examine how run chases are constructed; are certain bowlers dealt with cautiously while others are taken to the cleaners?","f51288fe":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc What is surprising is that Delhi Capitals played with only 3 overseas players, benching Boult in the 2019 season despite his solid 2018 Season. ","36dac1cf":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccThe importance of the top order batsmen is further validated as the median loss of wickets is 1.\nSo ideally, at the end of the powerplay, our scoreboard should be 72\/1 or better than it.\nThe above results are further validated by the distribution of runs showing the batsman\u2019s contribution in the chase. \n","dcb9ee84":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccWhile T20 has become a batsman\u2019s game in recent times, 200+ is still a winning score on nearly 84% of the occasions.\n","318d010c":"<a id=\"s4\"><\/a>\n## 4. RENAISSANCE OF TRENT BOULT IN 2020 SEASON\n","dccc9b19":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccThe impact of these performances can be measured by Man of the Match awards. Boult has won 75% of his MOTM Awards in Season 2020 which shows his impact for MI in the season.\n","b29d101d":"<blockquote><p style=\"font-size:16px; color:#159364; font-family:verdana;\">I will keep updating the notebook as and when I get a new question to be analysed.<br>\nThank You For Having A Look At This Notebook \ud83d\ude03<\/p><\/blockquote>\n\n### If this kernels impress you,give them an <font size=\"+2\" color=\"red\"><b>Upvote<\/b><\/font>.<br>","9e02ade0":"#### Boult scarcely bowled in the middle overs, a high economy rate may be the reason.","2056a663":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc Because the ground size in cricket is not fixed, it is safe to assume that the probability that these high scores are witnessed is higher for smaller grounds than the bigger grounds.","58ab59cc":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc<b>SRH vs KXIP\n","6070246c":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccClearly, they complement each other well. While Bumrah was not as effective in the death overs as he was in the earlier seasons, he still dealt huge blows to the opposition in the middle overs.\n","5a61ae77":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc As expected, MA Chinnaswamy, Bengaluru (one of the smaller stadiums) is at the top of the list.\nLet\u2019s check out the grounds with the highest successful chases.\n","1aab6833":"#### Bumrah is very effective in middle overs as he picks up wickets as wells as stems the run flow","be279ed4":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccNow we look at the distribution of the runs scored in different overs and see if any patterns are evident. Notice the line y=18. If we confine ourselves to the region y>=18, we find that every winning team in the 2nd innings has had at least 2 or more overs of 18 runs at some stage in their innings. So, YOU NEED TO SCORE over 18 runs for at least 2 overs to chase 200+ runs!\n","ccc80f34":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc <b>Note:<\\b> (Delhi Capitals & Delhi Daredevils), (Kings XI Punjab & Punjab Kings), (Sunrisers Hyderabad & Deccan Chargers) are considered to be the same franchise.","53e1fd98":"### Boult Dismissals in 2020","9380e89d":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccTrent Boult was traded from Delhi Capitals to Mumbai Indians before the 2020 Season. He played only 5 games in the entire 2019 Season for Delhi despite being fit the entire season. In the next season, he picked 25 wickets for Mumbai wreaking havoc in the opposition while achieving the 3rd position in the highest wicket takers table. Ironically, he produced a MoM performance in the final against his previous franchise, Delhi Capitals, leading the Mumbai Indians to victory in the 2020 Season. We look at the factors that lead to his incredible comeback in the 2020 Season.\n","b33f382f":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc<b>Note: Size of bubble is proportional to runs scored","f2af0d76":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccHardly 13 matches have been won! And SRH (or the erstwhile Deccan Chargers) has never chased down a target over 200 runs! So, what makes it so difficult to chase 200+ runs despite teams having power hitters? Scoreboard pressure does seem to be one of the main reasons. Remember the recent IPL Final where CSK had put up more than 190 runs and KKR seemed to be cruising at the halfway stage? Once a wicket fell, the incoming batsman had a tough job keeping up with the required run rate. And in trying to up the run rate, the KKR batsmen capitulated handing CSK a comfortable win in the end. ","e7e1ea2a":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccBoult had his best season in IPL in 2020 where he scalped 25 wickets albeit being the 3rd highest wicket-taker in the season.","33f9698b":"**Idea for Visualizations is taken from @Pawan Jain**","d26f3aae":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccBut what were the reasons for his brilliant performances? Was it just that he was in good form? Was his role in the team different? Did the team composition affect his performance?\n","d9f51b4f":"<a id=\"s3\"><\/a>\n## 3. Some Basic Analysis","a02182e3":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc One thing that must be kept in mind while making comparisons between 2020 and the previous seasons is that the 2020 Season was played in the UAE while the earlier seasons were played in India. In the UAE, teams were finding it difficult to post scores in excess of 150 runs and hence, this could have played a part in aiding the bowlers.","9cef05fc":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccThe 2020 IPL was played in the UAE. Some venues assist seam bowlers more. We look at the distribution of wickets to see if Boult had a good performance at a specific venue.\n","e9620e6f":"\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>So Eden Gardens, M Chinnaswamy, Wankhede and Feroz Shah Kotla are statiums with most matches<\/li>\n            <li>Since eliminators, qualifiers and finals of each season were played here<\/li>\n        <\/ul>\n<\/div>","4b73bb05":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc Boult was impressive in the powerplay overs. \nApart from Bumrah, Mumbai Indians also had James Pattinson and Nathan Coulter Nile in their ranks and they eased the burden of Boult\u2019s shoulders. ","9d2a224d":"<a id=\"s1\"><\/a>\n## 1. Loading Libraries","fedf5604":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccLet\u2019s check out the grounds with the highest successful chases.\n","7d1a7023":"### Plots of Runs per Over and Wickets in Successful Run Chases","c6df7b36":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccCan you guess which game the following graph belongs to? Look at the graph, from the 10th to the 15th over, the chasing team is really struggling, hardly scoring 10 runs an over. The team starts its fightback from the 16th over and look at over no 18! 30 runs are scored in that over.  \n","cc2a66c8":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc16 wickets taken by Boult in the powerplay overs is the joint highest number of wickets during any season of IPL. In the 2021 season, the highest was 10 wickets by Deepak Chahar.\n","a11ace32":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc Most of these batsmen bat in the top order and form the fulcrum of their respective teams. By dismissing them, Boult eased the pressure on the other bowlers. \n\n","911cfd45":"<a id=\"ss1\"><\/a>\n### 3.1 Matches in Every Season","531b53c0":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc On an average, he bowled 2.4 overs on average in the powerplay at an economy of 6.722. \nHaving played 15 matches during the season, this meant that on average, Boult guaranteed  his team a wicket in every match during the powerplay overs. To understand the significance of his powerplay heroics we look at the next plot.","94bbdc57":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>The year 2013 has most number of matches.<\/li>\n            <li>It is due to the increased number of teams in 2011-13. 10 teams in 2011, 9 in 2012 and 2013<\/li>\n        <\/ul>\n<\/div>","4ee21eb2":"#### Primarily used as a powerplay bowler in 2020 as he bowled 2.4 overs on average in the powerplay, picking 16 wickets at an economy of 6.722","7293b5c0":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccWe can conclude from these patterns that the best bowlers are respected by batsmen (for protecting their wicket), and batsmen generally target one bowler who ends up having a very high economy.  \n","1b85d3cd":"![](https:\/\/etimg.etb2bimg.com\/photo\/74508790.cms)","5ff70f9f":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccThe wickets are evenly spaced out. Boult has taken 6 wickets in Sharjah as well which is known to be a slow pitch assisting spinners. \n","328a1913":"## Bumrah","ef953414":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccWhile the scatter plot does provide a good overview of the over by over analysis, it would be more interesting to look at the runs scored in the powerplay, middle overs and death overs.\n","cdfab4bc":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccUnsurprisingly, the top order has contributed more than 120 runs in nearly all run chases and the middle order also contributes around 70-80 runs. The median contribution from the lower order is 0!! You would think that the lower order would need to contribute some runs towards the end of the innings. In fact the only game in which the lower order has contributed more than 10 runs is in the IPL Final 2014 between KKR and KXIP. This clearly indicates that you need two proper batsmen going into the final overs of a big run chase.\n","61c962e2":"<a id=\"s5\"><\/a>\n## Target of 200 or More","15dd0828":"<div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udcccOne thing that derails most run chases is the fall of wickets at regular intervals. Incoming batsmen find it difficult to get set and the scoreboard pressure leads to fall of wickets. Also, in trying to play themselves in, many batsmen eat up many deliveries and put pressure on subsequent batsmen. However, few things clearly stand out in successful run chases.","8732c8b8":" <div class=\"alert alert-block alert-info\"><p style='color:black;'> \ud83d\udccc While Boult was ineffective in the middle overs, he was complimented well by Bumrah who had a miserly economy of 5.125 having bowled 24 overs in the middle overs.\n","965f5a08":"While Boult was ineffective in the middle overs, he was complimented well by Bumrah who had a miserly economy of 5.125 having bowled 24 overs in the middle overs.\n"}}