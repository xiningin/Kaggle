{"cell_type":{"f9fbd40f":"code","852189c2":"code","1f2bfe2e":"code","3b2de052":"code","4fe3d7d4":"code","79bce064":"code","a88366e2":"code","8c1bc334":"code","1558141d":"code","b9d09e64":"code","f1b094c0":"code","28a3dcf2":"code","51e3783e":"code","d7f19e9d":"code","fc1e32b9":"code","f73173a0":"code","218e2d04":"code","9e16eb8c":"code","93a3df7a":"code","5bf76168":"code","8cedea12":"code","6c00c2bb":"code","95a88ff7":"code","f24f3c26":"code","51d648a9":"code","05f4851f":"code","79d0f88f":"code","a7412db6":"code","bef0a247":"code","46df0fcf":"code","8bc21bf7":"code","af9a303d":"code","333dac41":"code","4fe7041b":"code","c9208425":"code","f7d0e074":"code","f0b3463a":"code","dcdf52ed":"code","5137856b":"code","e73a55cc":"code","a334ecae":"code","144b137e":"code","6fc543de":"code","3d3c9fd0":"code","f149908b":"code","6a14d4fd":"code","72d1d43c":"code","30748c2f":"code","8d8c5f25":"code","ccf8e151":"code","8884bbcf":"code","a0a1d7d6":"code","ebabb4ff":"code","bdb657a9":"code","c04bfe99":"code","ac2cbb4f":"markdown","1189cf33":"markdown","fc666ef2":"markdown","a301b0bc":"markdown","d6ecf92f":"markdown","98d93984":"markdown","61bff0fc":"markdown","216b99c9":"markdown","05c6e75c":"markdown","9b35edc4":"markdown","02605ebb":"markdown","07089284":"markdown","9ea746d1":"markdown","5de3a855":"markdown","4ebcdf66":"markdown","73f95490":"markdown","bf560d3c":"markdown","d3619d00":"markdown","b6e70a48":"markdown","eeea99c8":"markdown"},"source":{"f9fbd40f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","852189c2":"data = pd.read_csv('\/kaggle\/input\/t20matches\/t20_matches.csv')","1f2bfe2e":"data.head()","3b2de052":"data.info()","4fe3d7d4":"data.shape","79bce064":"psl = data[(data['home'] == 'Karachi Kings') | (data['home'] == 'Lahore Qalandars') | (data['home'] == 'Multan Sultans')\n                | (data['home'] == 'Quetta Gladiators') | (data['home'] == 'Peshawar Zalmi')\n                | (data['home'] == 'Islamabad United')].copy()","a88366e2":"psl","8c1bc334":"psl = psl.set_index(['date'])","1558141d":"psl.drop(['match_id', 'series_id'], axis = 1, inplace=True)","b9d09e64":"psl.head()","f1b094c0":"psl['winner'].value_counts()","28a3dcf2":"# First batted\npsl['win_by_runs'].count()","51e3783e":"# First bowled\npsl['win_by_wickets'].count()","d7f19e9d":"teams = ['Peshawar Zalmi', 'Quetta Gladiators', 'Islamabad United', 'Karachi Kings', 'Lahore Qalandars' ]","fc1e32b9":"psl.columns","f73173a0":"psl.rename(columns={'win_by_runs': 'Win-Batted First', 'win_by_wickets': 'Win-Bowled First'}, inplace=True)","218e2d04":"dic = {}\nfor i in teams:\n    ans = psl[psl['winner'] == i]['Win-Batted First'].count()\n    print(f'When {i} batted first win {ans} times')\n    if i not in dic:\n        dic[i] = ans        ","9e16eb8c":"dic","93a3df7a":"bat_first = pd.Series(dic)","5bf76168":"bat_first","8cedea12":"# Batting First\n\nbat_first.plot.bar(title='Matches Won when Batting First', xlabel='Teams', ylabel='No. of Matches', rot=15, color=['indianred'])\nfor a,b in zip([0,1,2,3,4], bat_first.values): \n    plt.text(a-0.05, b+0.019, str(b))\nplt.show()","6c00c2bb":"dic2 = {}\nfor i in teams:\n    ans = psl[psl['winner'] == i]['Win-Bowled First'].count()\n    print(f'When {i} bowled first win {ans} times')\n    if i not in dic2:\n        dic2[i] = ans        ","95a88ff7":"dic2","f24f3c26":"bowl_first = pd.Series(dic2)","51d648a9":"bowl_first","05f4851f":"bowl_first.values","79d0f88f":"bowl_first.plot.bar(title='Matches Won when Bowling First', xlabel='Teams', ylabel='No. of Matches', rot=15, color=['navy'])\nfor a,b in zip([0,1,2,3,4], bowl_first.values): \n    plt.text(a-0.05, b+0.019, str(b))\nplt.show()","a7412db6":"bat_bowl_first = pd.Series({'Batting First': bat_first.sum() , 'Bowling First': bowl_first.sum()})","bef0a247":"bat_bowl_first.plot.pie(autopct = \"%.2f%%\", label='Number of Matches Won', figsize=(5,5), colors=['firebrick', 'sandybrown'])\nplt.show()\n","46df0fcf":"df = pd.DataFrame({'Matches Win when Batted First': bat_first, 'Matches Win when Bowled First': bowl_first})","8bc21bf7":"df","af9a303d":"df[['Matches Win when Batted First', 'Matches Win when Bowled First']].plot(width =0.75 ,color=['navy', 'darkorange'], kind='bar', title='Matches Won - Batting First vs Bowling First')\nfor a,b,c in zip([0,1,2,3,4], [5,3,3,4,3], [7,9,8,3,2]): \n    plt.text(a-0.25, b+0.05, str(b))\n    plt.text(a+0.08, c+0.021, str(c))\nplt.show()","333dac41":"max_runs = psl.groupby('innings1')['innings1_runs'].max()","4fe7041b":"max_runs","c9208425":"max_runs.plot.bar(title='Max Target Given in Entire Tournament', color=['y'], xlabel='TEAMS', rot=15, ylabel='SCORES')\nfor a,b in zip([0,1,2,3,4], max_runs.values): \n    plt.text(a-0.2, b+0.1, str(b))\nplt.show()","f7d0e074":"dic = {}\nfor i in teams:\n    ans = psl[(psl['innings1'] == i) | (psl['innings2'] == i)]['result'].count()\n    won = psl[psl['winner'] == i]['result'].count()\n    percent = (won\/ans * 100).round(2)\n    batting = psl[psl['winner'] == i]['Win-Batted First'].count()\n    per_bat = (batting\/won * 100).round(2)\n    bowling = psl[psl['winner'] == i]['Win-Bowled First'].count()\n    per_bowl = (bowling\/won * 100).round(2)\n    print(f'{i} played {ans} matches and won {won} matches -------> {percent}%')\n    print(f'Out of {won} won matches {batting} won on batting first ----------> {per_bat} ')\n    print(f'Out of {won} won matches {bowling} won on bowling first ----------> {per_bowl}\\n')\n    \n    if i not in dic:\n        dic[i] = {'Matches': ans, 'Won':won, 'Bat': batting, 'Bowl':bowling, 'Win%':percent, 'Win-Bat%':per_bat,\\\n                 'Win-Bowl%':per_bowl}","f0b3463a":"dic","dcdf52ed":"a = pd.Series(dic)","5137856b":"a","e73a55cc":"df = pd.DataFrame(dic).T","a334ecae":"df","144b137e":"df['Win%'].plot(kind='bar', title='Win Percentage', rot=15, color=['crimson'])\nfor a,b in zip([0,1,2,3,4], df['Win%'].values): \n    plt.text(a-0.2, b+0.4, str(b)+'%',)\nplt.show()","6fc543de":"df[['Win-Bat%', 'Win-Bowl%']].plot(rot=15, kind='bar', title='Matches Won - Batting First vs Bowling First')\nplt.show()","3d3c9fd0":"for i in teams:\n    tot = psl[(psl['home'] == i) | (psl['away'] == i)].shape[0]\n    win = psl[psl['winner'] == i].shape[0]\n    \n    print(f'{i} won {win} matches out of {tot} matches')","f149908b":"for i in teams:\n    for j in teams:\n                win = psl[(psl['innings2'] == i) & (psl['winner'] == i) &\\\n                         (psl['innings1'] == j) ].shape[0]\n                playd = psl[(psl['innings2'] == i) &\\\n                           (psl['innings1'] == j) ].shape[0]\n                if playd != 0:\n                    print(f'{i} Won {win*100\/playd : .2f}% of the time when bowled first against {j} -------> Won = {win} Played = {playd} ')\n    print('\\n')","6a14d4fd":"for i in teams:\n    for j in teams:\n                win = psl[(psl['innings1'] == i) & (psl['winner'] == i) &\\\n                         (psl['innings2'] == j) ].shape[0]\n                playd = psl[(psl['innings1'] == i) &\\\n                           (psl['innings2'] == j) ].shape[0]\n                if playd != 0:\n                    print(f'{i} Won {win*100\/playd : .2f}% of the time when batted first against {j} -------> Won = {win} Played = {playd} ')\n    print('\\n')","72d1d43c":"#Lowest Total and Defended\n\n\npsl[psl['innings1_runs'] == psl[psl['innings1'] == psl['winner']]['innings1_runs'].min()]","30748c2f":"# Lowest Total\n\nlowest = psl[psl['innings1_runs'] == psl['innings1_runs'].min()].copy()\n","8d8c5f25":"lowest","ccf8e151":"psl[psl['innings1_runs'] == psl['innings1_runs'].max()]","8884bbcf":"# Highest total not chased\n\npsl[psl['innings1'] == psl['winner']]['innings1_runs'].max()","a0a1d7d6":"psl[psl['innings1_runs'] == psl['innings1_runs'].max()]","ebabb4ff":"# Max Runs and Chased\n\nrun = psl[psl['innings1_runs'] == psl['innings1_runs'].max()].copy()","bdb657a9":"run","c04bfe99":"psl[psl['innings1_runs'] == 111.0]","ac2cbb4f":"## Batting\/ Bowling Comparison\n#### In PSL 61.70% of the matches were won on Bowling First while matches won on batting first were 38.30%.","1189cf33":"## When Batting First","fc666ef2":"### Highest Total Not Chased","a301b0bc":"### Lowest Total in the Entire Tournament\n##### Match played between LQ and PZ where LQ batted first gave target of 59.","d6ecf92f":"## Head to Head Match Comparison - When Bowled First","98d93984":"### Maximum Runs in the Tournament by Individual Team","61bff0fc":"## When Bowling First","216b99c9":"### Highest Total in the Tournament\n##### Match was played between LQ and QG where LQ batted first gave highest total of 201.","05c6e75c":"### Number of Matches Won by Bowling First","9b35edc4":"### Win% - Batting vs Bowling","02605ebb":"## Head to Head Match Comparison - When Batted First","07089284":"## Objective\nThe objective of this data analysis report is to track the PSL team\u2019s performance throughout the PSL tournament. The comparative analysis is carried out to find the best team performance against each other, their winning percentage and top scores upon their decision of batting or bowling first.\n\n## Introduction\nThe\u00a0Pakistan Super League\u00a0(PSL) is a professional\u00a0Twenty20\u00a0cricket\u00a0league contested during February and March of every year by six teams representing six cities in\u00a0Pakistan. The league was founded on 9 September 2015 with five teams and now comprises six teams. Each team playing matches in\u00a0double round robin\u00a0format; the top four teams with the best record qualify for the playoffs and culminate in the championship game, the PSL Cup Final. The league is based in the\u00a0Pakistan Cricket Board\u00a0office in\u00a0Lahore.\n\n## Scope\nThe analysis performed only on PSL 2016 and PSL 2017 data.\n\n## Methodology\nThe t20 match data was imported from 'T20 matches' data which included all of the match data played anywhere between June, 2003 and April, 2017. Data was filtered on the basis of team names to get the PSL match data only. Now analysis was performed on the acquired data which contained PSL_2016 and PSL_2017 tournament data. Team\u2019s performance was evaluated on the basis of batting and bowling, their winning and losing percentage were found. And lastly, findings of individual team were made on the basis of both tournaments. (2016 & 2017) ","9ea746d1":"## Conclusion\n* PZ won highest number of matches (05nos.) when decided to bat first.\n* QG won highest number of matches (09nos.) when decided to bowl first.\n* Team which decides to bowl first has greater chance to win the match a\/c to PSL16 and PSL 17 stats.\n* Lahore Qalandars holds the record of setting highest target (201) and lowest target (59) in PSL tournaments.\n* PZ always won when batted first against KK and LQ.\n* QG never lost to KK in PSL16 and PSL17.\n* When bowling first, IU never lost to QG and LQ.\n* KK never won any match against QG.\n* LQ won against IU only when bowled first.","5de3a855":"## Team Winning Percentage","4ebcdf66":"### To get PSL data only\nInorder to get only PSL data, data is fetched using Team's Name","73f95490":"# Setting Match date as dataframe index","bf560d3c":"### Lowest Total Defended\n##### Played between IU and KK. KK batted first gave target of 126\/10 and defended.","d3619d00":"## Checking Number of Matches won by each Team","b6e70a48":"### Highest Total and Chased\n##### Played between LQ and QG. LQ batted first gave target of 201\/2 and lost.","eeea99c8":"### Number of Matches Won by Batting First"}}