{"cell_type":{"8f0789e8":"code","b56a6858":"code","6591be3b":"code","4273092e":"code","4b4cb971":"code","c81af483":"code","8b6561f9":"code","2729520c":"code","f7f5eea3":"code","e4339809":"code","47084152":"markdown"},"source":{"8f0789e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b56a6858":"import os\nimport random \nimport h5py\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport pandas as pd\nimport matplotlib.pyplot as plt","6591be3b":"imagepaths=[]\nfor root,dirs,files in os.walk(\"\/kaggle\/input\/soli-data\/dsp\",topdown=False):\n    for name in files:\n        path = os.path.join(root,name)\n        if path.endswith(\"h5\"):\n            imagepaths.append(path)","4273092e":"print(\"Total files : \",len(imagepaths))\n\nrandom.shuffle(imagepaths)","4b4cb971":"def load_data(paths_list):\n    with h5py.File(paths_list[0], 'r') as f:\n        data = f['ch{}'.format(0)][()]\n        if(data.shape[0]<=100):\n            data=np.pad(data,((0,100-data.shape[0]),(0,0)))# paddin with 100 frames\n        else:\n            data=data[:100]\n        y = f['label'][()]\n        label=y[0]\n\n    for hfile in paths_list:\n        with h5py.File(hfile, 'r') as f:\n            for channel in range(4):\n                rdata = f['ch{}'.format(channel)][()]\n                if(rdata.shape[0]<=100):\n                    rdata=np.pad(rdata,((0,100-rdata.shape[0]),(0,0)))\n                else:\n                    rdata=rdata[:100]\n                data=np.dstack((data,rdata))\n                y = f['label'][()]\n                label=np.concatenate((label,y[0]))\n    data=np.swapaxes(data,1,2)\n    data=np.swapaxes(data,0,1)\n    return data,label\n","c81af483":"print(\"train data: \")\ntrain_x,train_y=load_data(imagepaths[:500])\nprint(train_x.shape)\nprint(\"test data: \")\n\ntest_x,test_y=load_data(imagepaths[500:750])\nprint(test_x.shape)\nval_x,val_y=load_data(imagepaths[750:1000])\n","8b6561f9":"model= keras.models.Sequential([\n keras.layers.Dense(512,activation='relu'),\n keras.layers.LSTM(512),\n keras.layers.Dense(12,activation='softmax')])\n# checkpoint_cb=tf.keras.callbacks.ModelCheckpoint(\"\/home\/ee\/mtech\/eet192341\/codes\/rnn_deep\/rnn_deep.h5\",save_best_only=True)\noptimizer = keras.optimizers.Adam(lr=0.001)\nmodel.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer,metrics=[\"sparse_categorical_accuracy\"])\nhistory = model.fit(train_x,train_y,verbose=2, epochs=50,validation_data=(val_x,val_y))","2729520c":"\npd.DataFrame(history.history).plot(figsize=(16,10))\nplt.grid(True)\nplt.show()","f7f5eea3":"model.evaluate(test_x,test_y)","e4339809":"from sklearn.metrics import confusion_matrix\ny_pred=model.predict_classes(test_x)\nacc=(test_y==y_pred)\/len(test_y)\nprint(\"accuracy \",acc)\nc=confusion_matrix(test_y,y_pred)\nlabel_name=[\"pinch index\",\"palm tilt\",\"finger slide\",\"pinch pinky\",\"slow swip\",\"fast swip\",\"push\",\"pull\",\"finger rub\",\"circle\",\"hold\",\"background\"]\n\nfig = plt.figure(figsize=[22,18])\nimport seaborn as sns\nsns.heatmap(c, annot=True,annot_kws={\"size\": 13},xticklabels=label_name,yticklabels=label_name)","47084152":"confusion matrix"}}