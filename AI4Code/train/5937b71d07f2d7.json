{"cell_type":{"e741c020":"code","b3f8fc1f":"code","62164ddb":"code","3c80be29":"code","c99cac2c":"code","505fb6d3":"code","f041f5ed":"code","16a7dd4c":"code","4b1b54bf":"code","5889b40b":"code","8cff6495":"code","448a6eb2":"code","7a385533":"code","07a7880c":"code","015b1e3f":"code","742f4559":"code","59512a12":"code","42998a0e":"code","10752159":"code","b25a5216":"code","78cd447a":"code","ccd295d2":"code","996a5ea8":"code","8297cc52":"code","fa7e2451":"code","59ce70e8":"code","7910c70b":"code","2f9efb45":"code","2d3edea2":"code","0be649a9":"code","20c6e669":"code","4b95463d":"code","b906c475":"code","fb296546":"code","d48b26c8":"code","67c0ff31":"code","7edac076":"code","4a056345":"code","33971e36":"code","742ec09f":"markdown","e9a29051":"markdown","3c817d4f":"markdown","ec2f466d":"markdown","0490828a":"markdown","6302cdc1":"markdown","08295310":"markdown","bcebd935":"markdown","310e16b4":"markdown","eb6b39e5":"markdown","12148396":"markdown","f0f39d40":"markdown","e0b8cfb8":"markdown","6c953eed":"markdown","90b227bc":"markdown","cf5ca8fd":"markdown","0539111d":"markdown","883009cc":"markdown","9a6dc95c":"markdown","717b1ef0":"markdown","e712e6bc":"markdown","0432b2ec":"markdown","0ba46137":"markdown","9bd3ada7":"markdown"},"source":{"e741c020":"from ast import literal_eval\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n\nfrom surprise import SVD, Dataset, Reader\nfrom surprise.model_selection import cross_validate","b3f8fc1f":"# Pandas config\ndef pandas_config():\n    # display 10 rows and all the columns\n    pd.set_option('display.max_rows', 10)\n    pd.set_option('display.max_columns', None)\n\n    \npandas_config()","62164ddb":"# Loading the dataset\ncredits_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","3c80be29":"credits_df.head()","c99cac2c":"movies_df.head()","505fb6d3":"# Chaning column name from movie_id to id\n\nprint(f'Previous column names {credits_df.columns.tolist()}')\ncredits_df.columns = ['id', 'title', 'cast', 'crew']\nprint(f'Current column names {credits_df.columns.tolist()}')","f041f5ed":"# Merging credits_df with movies_df on id\ndf = movies_df.merge(credits_df, on='id')\ndf.head()","16a7dd4c":"# Here we will have `title_x` & `title_y` which will be identical since movies \n# are same, so dropping any one of them & chaning the name of the other to `title`\n\ndf.drop(['title_x'], axis='columns', inplace=True)\ncolumns = df.columns.tolist()\ncolumns[columns.index('title_y')] = 'title'\ndf.columns = columns\ndf.head()","4b1b54bf":"# Mean vote(rating) across the report\nC = df.vote_average.mean()\nC","5889b40b":"# Minimum votes required to be listed in the chart\nm = df.vote_count.quantile(0.9)\nm","8cff6495":"# Filtering out the movies that qualify for the chart\nqualified_movies = df.copy().loc[df.vote_count >= m]\n\nprint(qualified_movies.shape)\nqualified_movies.sample(5)","448a6eb2":"def weighted_rating(df_row, m=m, C=C):\n    v = df_row.vote_count\n    R = df_row.vote_average\n\n    # Calculation based on the IMDB formula\n    return (v \/ (v + m) * R) + (m \/ (m + v) * C)","7a385533":"# Define a new feature 'score' and calculate its value with `weighted_rating()`\nqualified_movies['score'] = qualified_movies.apply(weighted_rating, axis='columns')\nqualified_movies.score[:10]","07a7880c":"# Sort movies based on score calculated above\nqualified_movies = qualified_movies.sort_values('score', ascending=False)","015b1e3f":"# Get top 15 movies\nqualified_movies[['title', 'vote_count', 'vote_average', 'score']].head(15)","742f4559":"df.overview[:5]","59512a12":"# This function can be used to understand TfidfVectorizer & CountVectorizer\ndef vectorizer_example(vectorizer):\n    # Documents\n    docs = [\n        'I\\'m cool but powered by python I\\'m awesome', \n        'Bond, James Bond'\n    ]\n    \n    doc_matrix = vectorizer.fit_transform(docs)\n    return pd.DataFrame(\n        doc_matrix.toarray(), columns=vectorizer.get_feature_names()\n    )\n\n\nvectorizer_example(TfidfVectorizer(stop_words='english'))","42998a0e":"def get_tfidf(df: pd.DataFrame):\n    tfidf = TfidfVectorizer(stop_words='english')\n    df.overview = df.overview.fillna('')\n    tfidf_matrix = tfidf.fit_transform(df.overview)\n    return tfidf_matrix\n\n\ntfidf_matrix = get_tfidf(df)\ntfidf_matrix.shape","10752159":"def compute_cosine_similarity(matrix):\n    cosine_simi = linear_kernel(matrix, matrix)\n    return cosine_simi\n\n\ncosine_sim = compute_cosine_similarity(tfidf_matrix)\nprint(cosine_sim)","b25a5216":"linear_kernel([[1, 2, 3]], [[1, 2, 3]])","78cd447a":"# Construct a reverse map of indices and movie titles & drop duplicate indexes\nindices = pd.Series(df.index, index=df.title).drop_duplicates()\n\n\nprint(len(cosine_sim))\nprint(len(indices))","ccd295d2":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(df, title, cosine_sim=cosine_sim, top=10):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the `top` most similar movies\n    sim_scores = sim_scores[1:top + 1]\n\n    # Get the movie indices (only if the indexes are well sorted in continuous manner\n    # eg. 1, 2, 3, 4 and not like 1, 3, 4 since the index given by enumerate is used\n    # to get movie index)\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]\n\n\nget_recommendations(df, 'The Dark Knight Rises')","996a5ea8":"get_recommendations(df, 'The Avengers')","8297cc52":"# Parse the stringified features into their corresponding python objects\ndef eval_features(df, features):\n    for feature in features:\n        df[feature] = df[feature].apply(literal_eval)\n\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\neval_features(df, features)","fa7e2451":"# Get the director's name from the crew feature. If director is not listed, return NaN\ndef get_director(crew_dict):\n    for crew_info in crew_dict:\n        if crew_info['job'] == 'Director':\n            return crew_info['name']\n    return np.nan\n\n\nprint(df.loc[1, 'crew'])\ndf['director'] = df['crew'].apply(get_director)","59ce70e8":"# Returns the list top 3 elements or entire list, whichever is more.\ndef get_list(x):\n    if isinstance(x, list):\n        names = [_dict['name'] for _dict in x]\n        return names[:3]  # top 3\n    # Return empty list in case of missing\/malformed data\n    return []\n\n\n# These features are of dict type and have 'name' key in them\nfeatures = ['cast', 'keywords', 'genres']\nfor feature in features:\n    df[feature] = df[feature].apply(get_list)\n\n    \n# Print the new features of the first 3 films\ndf[['title', 'cast', 'director', 'keywords', 'genres']].head(3)","7910c70b":"# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(' ', '')) for i in x]\n    else:\n        # Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(' ', ''))\n        else:\n            return ''\n\n\n# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\nfor feature in features:\n    df[feature] = df[feature].apply(clean_data)\n\n    \ndf.head()","2f9efb45":"def create_soup(x):\n    keywords_str = ' '.join(x.keywords)\n    cast_str = ' '.join(x.cast)\n    director_str = x.director\n    genres_str = ' '.join(x.genres)\n    return f'{keywords_str} {cast_str} {director_str} {genres_str}'\n\n\ndf['soup'] = df.apply(create_soup, axis='columns')\ndf.soup[:5]","2d3edea2":"vectorizer_example(CountVectorizer(stop_words='english'))","0be649a9":"def get_count_matrix(df: pd.DataFrame):\n    count = CountVectorizer(stop_words='english')\n    count_matrix = count.fit_transform(df.soup)\n    return count_matrix\n\n\ncount_matrix = get_count_matrix(df)\ncosine_sim_2 = compute_cosine_similarity(count_matrix)","20c6e669":"# Reset index of our main DataFrame and construct reverse mapping as before\ndf = df.reset_index()\nindices = pd.Series(df.index, index=df.title)","4b95463d":"get_recommendations(df, 'The Dark Knight Rises', cosine_sim_2)","b906c475":"get_recommendations(df, 'The Godfather', cosine_sim_2)","fb296546":"reader = Reader()\nratings = pd.read_csv('..\/input\/the-movies-dataset\/ratings_small.csv')\nratings.sample(5)","d48b26c8":"data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)","67c0ff31":"svd = SVD()\ncross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5)","7edac076":"trainset = data.build_full_trainset()\nsvd.fit(trainset)","4a056345":"# Let us pick user with user Id 1 and check the ratings she\/he has given.\nratings[ratings['userId'] == 1]","33971e36":"svd.predict(1, 302, 3)","742ec09f":"While our system has done a decent job of finding movies with similar plot descriptions, the quality of recommendations is not that great. \"The Dark Knight Rises\" returns all Batman movies while it is more likely that the people who liked that movie are more inclined to enjoy other Christopher Nolan movies. This is something that cannot be captured by the present system.","e9a29051":"The next step would be to convert the names and keyword instances into lowercase and strip all the spaces between them. This is done so that our vectorizer doesn't count the Johnny of `Johnny Depp` and `Johnny Galecki` as the same.","3c817d4f":"The `credits_df` contains the following features:-\n\n* movie_id - A unique identifier for each movie.\n* cast - The name of lead and supporting actors.\n* crew - The name of Director, Editor, Composer, Writer etc.\n\nThe `movies_df` has the following features:- \n\n* budget - The budget in which the movie was made.\n* genre - The genre of the movie, Action, Comedy ,Thriller etc.\n* homepage - A link to the homepage of the movie.\n* id - This is infact the movie_id as in the first dataset.\n* keywords - The keywords or tags related to the movie.\n* original_language - The language in which the movie was made.\n* original_title - The title of the movie before translation or adaptation.\n* overview - A brief description of the movie.\n* popularity - A numeric quantity specifying the movie popularity.\n* production_companies - The production house of the movie.\n* production_countries - The country in which it was produced.\n* release_date - The date on which it was released.\n* revenue - The worldwide revenue generated by the movie.\n* runtime - The running time of the movie in minutes.\n* status - \"Released\" or \"Rumored\".\n* tagline - Movie's tagline.\n* title - Title of the movie.\n* vote_average -  average ratings the movie recieved.\n* vote_count - the count of votes recieved.","ec2f466d":"### Single Value Decomposition\n\nOne way to handle the `scalability` and `sparsity` issue created by content filtering recommender is to leverage a **`latent factor model`** to capture the similarity between users and items. Essentially, we want to `turn the recommendation problem into an optimization problem`. We can view it as how good we are in predicting the rating for items given a user. One common metric is Root Mean Square Error (RMSE). **`The lower the RMSE, the better the performance`**.\n\nNow talking about latent factor you might be wondering what is it? It is a broad idea which describes a property or concept that a user or an item have. For instance, for music, latent factor can refer to the genre that the music belongs to. `SVD` decreases the dimension of the utility matrix by extracting its latent factors. Essentially, we map each user and each item into a latent space with dimension r. Therefore, it helps us better understand the relationship between users and items as they become directly comparable. The below figure illustrates this idea.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*GUw90kG2ltTd2k_iv3Vo0Q.png)","0490828a":"The next steps are the same as what we did with our plot description based recommender. One important difference is that we use the **`CountVectorizer()`** instead of TF-IDF. This is because we do not want to down-weight the presence of an actor\/director if he or she has acted or directed in relatively more movies. It doesn't make much intuitive sense.","6302cdc1":"## Collaborative Filtering\n\n![](https:\/\/media.giphy.com\/media\/QWPIBMUCSXRL2\/giphy.gif)\n\nOur content based engine suffers from some severe limitations. It is only capable of suggesting movies which are close to a certain movie. That is, it is not capable of capturing tastes and providing recommendations across genres.\n\nAlso, the engine that we built is not really personal in that it doesn't capture the personal tastes and biases of a user. Anyone querying our engine for recommendations based on a movie will receive the same recommendations for that movie, regardless of who she\/he is.\n\nTherefore, in this section, we will use a technique called Collaborative Filtering to make recommendations to Movie Watchers.\nIt is basically of two types:-\n\n*  **`User based filtering`**-  These systems recommend products to a user that similar users have liked. For measuring the similarity between two users we can either use pearson correlation or cosine similarity.\nThis filtering technique can be illustrated with an example. In the following matrixes, each row represents a user, while the columns correspond to different movies except the last one which records the similarity between that user and the target user. Each cell represents the rating that the user gives to that movie. Assume user E is the target.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*9NBFo4AUQABKfoUOpE3F8Q.png)\n\nSince user A and F do not share any movie ratings in common with user E, their similarities with user E are not defined in Pearson Correlation. Therefore, we only need to consider user B, C, and D. Based on Pearson Correlation, we can compute the following similarity.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*jZIMJzKM1hKTFftHfcSxRw.png)\n\nFrom the above table we can see that user D is very different from user E as the Pearson Correlation between them is negative. He rated Me Before You higher than his rating average, while user E did the opposite. Now, we can start to fill in the blank for the movies that user E has not rated based on other users.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*9TC6BrfxYttJwiATFAIFBg.png)\n\nAlthough computing user-based CF is very simple, it suffers from several problems. One main issue is that users\u2019 preference can change over time. It indicates that precomputing the matrix based on their neighboring users may lead to bad performance. To tackle this problem, we can apply item-based CF.\n\n* **`Item Based Collaborative Filtering`** - Instead of measuring the similarity between users, the item-based CF recommends items based on their similarity with the items that the target user rated. Likewise, the similarity can be computed with Pearson Correlation or Cosine Similarity. The major difference is that, with item-based collaborative filtering, we fill in the blank vertically, as oppose to the horizontal manner that user-based CF does. The following table shows how to do so for the movie Me Before You.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*LqFnWb-cm92HoMYBL840Ew.png)\n\nIt successfully avoids the problem posed by dynamic user preference as item-based CF is more static. However, several problems remain for this method. First, the main issue is **`scalability`**. The computation grows with both the customer and the product. The `worst case complexity is O(mn)` with m users and n items. In addition, **`sparsity`** is another concern. Take a look at the above table again. Although there is only one user that rated both Matrix and Titanic rated, the similarity between them is 1. In extreme cases, we can have millions of users and the similarity between two fairly different movies could be very high simply because they have similar rank for the only user who ranked them both.","08295310":"So, the mean rating for all the movies is approx 6 on a scale of 10.\n\nThe next step is to determine an appropriate value for m, the minimum votes required to be listed in the chart. We will use `90th percentile` as our cutoff. In other words, for a movie to feature in the charts, it must have more votes than at least 90% of the movies in the list.\n\nA `quantile` defines a particular part of a data set, i.e. a quantile determines how many values in a distribution are above or below a certain limit. Special quantiles are the `quartile (quarter)`, the `quintile (fifth)` and `percentiles (hundredth)`.","bcebd935":"## Content Based Filtering\n\nIn this recommender system the `content` of the movie (overview, cast, crew, keyword, tagline etc) `is used to find its similarity` with other movies. Then the movies that are most likely to be similar are recommended.\n\n![](https:\/\/image.ibb.co\/f6mDXU\/conten.png)","310e16b4":"We see that there are 481 movies which qualify to be in this list. Now, we need to calculate our metric for each qualified movie. To do this, we will define a function, **`weighted_rating()`** and define a new feature **`score`**, of which we'll calculate the value by applying this function to our DataFrame of qualified movies","eb6b39e5":"For movie with ID 302, we get an estimated prediction of **2.669**. One startling feature of this recommender system is that it doesn't care what the movie is (or what it contains). It works purely on the basis of an assigned movie ID and tries to predict ratings based on how the other users have predicted the movie.","12148396":"Since we have used the TF-IDF vectorizer, calculating the dot product will directly give us the cosine similarity score. Therefore, we will use sklearn's **`linear_kernel()`** instead of `cosine_similarities()` since it is faster.","f0f39d40":"# TMDB Movies Recommendation System \n\nHere [The Movies Dataset](https:\/\/www.kaggle.com\/rounakbanik\/the-movies-dataset) by [Rounak Banik](https:\/\/www.kaggle.com\/rounakbanik) and [TMDB 5000 Movie Dataset](https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata) datasets are used to build `demographic based`, `content based` and `collaborative filtering based` recommendation systems.\n\n> **Understanding theses recommendation systems**\n>\n> - **`Demographic Filtering`** - They offer `generalized recommendations` to every user, based on movie popularity and\/or genre. The System recommends the same movies to users with `similar demographic features`. Since each user is different, this approach is considered to be too simple. The basic idea behind this system is that movies that are more popular and critically acclaimed will have a higher probability of being liked by the average audience.\n>\n> - **`Content Based Filtering`** - They suggest similar items based on a particular item. This system uses item metadata, such as genre, director, description, actors, etc. for movies, to make these recommendations. The general idea behind these recommender systems is that if a person liked a particular item, he or she will also like an item that is similar to it.\n>\n> - **`Collaborative Filtering`** - This system matches persons with similar interests and provides recommendations based on this matching. Collaborative filters do not require item metadata like its content-based counterparts.\n\n![](https:\/\/media.giphy.com\/media\/SJkvVMzUIjNngDL4gY\/giphy.gif)","e0b8cfb8":"We are now in a position to create our `metadata soup`, which is a string that contains all the metadata that we want to feed to our vectorizer (namely actors, director and keywords).","6c953eed":"We see that over 20,000 different words were used to describe the 4800 movies in our dataset.\n\nWith this matrix in hand, we can now compute a similarity score. There are several candidates for this; such as the euclidean, the Pearson and the [cosine similarity scores](https:\/\/en.wikipedia.org\/wiki\/Cosine_similarity). There is no right answer to which score is the best. Different scores work well in different scenarios and it is often a good idea to experiment with different metrics.\n\nWe will be using the cosine similarity to calculate a numeric quantity that denotes the similarity between two movies. We use the cosine similarity score since it is independent of magnitude and is relatively easy and fast to calculate. Mathematically, it is defined as follows:\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAa0AAAB1CAMAAADKkk7zAAAAh1BMVEX\/\/\/8AAAD5+fnFxcWtra3z8\/P8\/Pzw8PBycnL09PTo6Oj39\/e9vb3g4ODBwcGXl5ednZ3Pz8\/c3NyIiIiOjo5FRUXS0tJ+fn64uLimpqZPT0\/d3d1tbW1jY2NXV1c9PT02NjZ3d3cvLy9TU1NdXV0YGBggICBISEg5OTkqKioLCwsTExMdHR2pbwthAAARwklEQVR4nO1d2YKiOhBNARJAIIGETVkVtbX7\/7\/vJiCILTPdLr3ckfPQ4xoYDlU5VamUCE2YMGHChAkTng2+YS1Z8tNnMeFzyMhBm716P30aEz4DnGQ1UjbxT5\/HhM8BYmSBqf\/0aUz4DDDMEQusyRX+L5CskF5HxPrp85jwGcRiyvIi\/6dPY8KECRN+BKZ1DvzTJzThL\/DyrGIsapFmteG8+wA+f0GZmeZMQPm+U5zQA2\/BCI9wSfoC7Pz9GVmbg6d6SAWShGr+\/FvPc0IDF2CgBdX1y\/nb3ls+NC7FS2EfUR4FhT3F0j8ABuVgsnJ29vBNzGARnn1c3XPpBeNNNgn+n8AaqpOZ6PYwFa+7xSJQzz6tQfMBe7WYMh8\/AecNtD+9VSXG6izZa5KtfG7yzZT5+BloZ1PXAHON42h7tu7l1zsXW0uaTWT9FAxYjMZZoeHM+IHKh\/pRArr7BUlouqJy8tKVSWl8P3AAbOS6Y5IgJQEuH\/taK+Q1qGJN04zME1\/w4snAfgDeAS6vu26XNI6jNgLzeGN9x2kLxQdDfMEm72PpCd+BVXbpCp2UUEIjiMRj5ZiS8uu6EfT2Pg+RaZkXX5rw9bDT5cVrcyppQiFUwifGSRt1qRsmGZoTiDBWkynk+gGo+eVlN+M2LA4hnSMvSknzahtt4aTcqchO6j8p\/wlfhzAfBLp64\/IUjwcrTRdGxSEgqqVltrAoj2aQCo3Bc8NThPBI3Z865ecFzgfxr642TxQ10RJNQVj81aiKNAMraK6SNqer2Y0moZE\/Kfhvhl7RwTO\/HrMXp+L+hfyzKs17Vk2oO+NLRthp8WXrhHywRqK4xsuYufhpGl8c30mrp4234nR0ytZplhpGmmVplKhfsQRID5rqNoiThAdSAV5i5tmXVjR\/4uB4B\/uxu1pXkxyaqZ1B8AWV6j7sF7sW5dsGDiv14+9MUN8AwvG3GDSJVSeA8vGX0rGHcG11WhL+BDIAMEbfUY5szSp44997UhPGYW3TA8Bs7K2erQy2UzT6K0DAWQCMzkuCrTfu+CF9W9Ev0IVsuLKvhyp5\/CH+OQQB0l5hNfaWYOsQpFm9h+wPE9tdSIcL9grl+y84xj8GF8QdvhrqDMw6ryfY2rDQ8+JildrjX78H1jAs0J1k9I6ZMEQGVIsLodT7V1TYHh918xayAbJHR1whfVc\/GE9sfQRr9VoUhbCtk87AaZe869myAILLhY37UKkgAmSaJIlMAOpIn9j6EOTg+b7v7ABOc3zvoXq2fIDdg5MHikdeRMzVAT0HW8ogLzO7XrgF6+Yf7QBvI2lS3ip3R4Rko2mhuwAi4O4qq8NfwJbuf3k2C\/NWEihujJFDriuLxKnQ7oWJkPEiXGERnCcTdL7YAOzz9bqA8vEKXjhCguIjpIaxv4MtnbPLF+cxWyJvV4yFEBZJHvZfn1GjKVBw0rRiWLev22SoLIUXlAtFS797dHaifo8vKIPQDiREsw5IITnwr19inMPm0oc4iw0VlL1GI1+I9ztpAvEjQphw0dBjZQZWdxqa07Fyr98JUzt3BNYXLs2coEfR5RUyNXmX++UYWw5v3Ap7wI2Eq0Z4m3QXIj\/gsszh\/7MCPv+RG2s+ljtuCkz9lzG20FxqrvGV0ivhrJpZy38Txwn3wiM7xpR9\/QM0TjwPhZ46Q47n+cjVhKgINalvLPn8yJZDiI2b11TLTxzF9zyMMDtQz5Gfk39Dz\/9r8BkTu7klQkob\/6knPPGWSIkDKWNm5E2Q5slaST3JnnaZ7u8Ispi+ErTYlo7O9mW0plVAI0a2DGGyLZIjW95LGkdBLATBvlznK2Yb2zy0og2sXhhOiv2eYb46\/O0iWy+LJFoJLx\/tE20nhrSCSGNljHCUy\/eXgdyWZjd1yHYwremNwQVZBhKJuQMcZHpQWIoDpaZbmQgkFRXokS0bIrQ0ah\/p2iGNs8rCUeEhhUNsmiJaqgthLbWGWyfu5kGPstN3Jei6IbigYCm6syGIFIKxNEFWncn3Q9gEu2C\/l17RLbskn704DZV\/RVK2ga4Vp8NUv7ckM4ZFgrEvF1gdmZtJ5U7anfgTyesfNmwVgi3sCbOhhbjl7QNtJjki2BKXvjUCBsKZGl1aRzFnJ+jdgZiULQoCudVTWZSYQxZjyxI2JlcRdRuYYnpBU0eplt3ahzIYqW+jNPPUx6DnZfQw1qMOcyfck1oXAf6brOE+siWJ2a\/P2WrmLb8qV2+B0BTxa3slectWqzLUIprx+G+zVtXsSNMRhoW8OtnGwzsRtTLlyJaZbJtpq1E0akn\/MhRSA3gMRuVTj2T\/oMPci0EGxqv2UPdssRG2hG3pMWS+SWRdQ7x5x5YjlXy1CaveUeHBTekqHVttlhVDINmqNyrS3fT1wJC1lgIeS1udNdYr6Fh1tmUN7jGvS9nqyoPQq2\/LPR2m32z\/sMPci\/40E8lbejiy5YyyJeItf7HwRNRa8Bjbb+\/Y4mpzH+aslxheZPRIj95GPW5jQiCX65Ria3ExNl7UIiiW85ai7Xxhxm1G5TRvqdVpqK\/ro6Tb6ekwv3SXjrSFRKgMxMVUwg\/W0bbMfS4T14UU73Lt3CmZYEvMJ05WVAS7m\/ZKkiBs5i2dy2h+lsEH2b1SHokwMYGp7W0RiZtCMSoRBjSa0Cs9ROs2N2QXkyZ8ByZrhCgsqgyW6BVgQyLhI4tY\/qFbgEMqn0eq+LNQbShTI90AI+JpaSN1If61kZ\/DSmt8HQ8+uvNXUGVCBopDrnNhaPMKcmNRWDI6kHezla2yqPV1SlL\/zvv7B1GBuNstjNTPXRlHxcgP3+dZdC9s3TzXPiykw3YrGvVQmqFuzRW1cZ5Oo9pF\/NC5UisdSTG\/gytmS3W0xskSduk2NqrJ1cGRT+hOiHA4+uVfDHjQOCp3UHV7MIRZev6Cuv7YEVaejrLTfcbd\/j6KxWhZM0AgQsZS3lHuEV77oZlG0ZLf1K7C0a6DfZniteLrhkja\/+WyuOV8R8BAJfcsHS2LMy+K+SfShNEZW+4r9OGDLRx82rAlA\/xCytATUnmaki3nNrbqK8V3cHkU7VoB36q610flBvx0m96T2NPt3ZDr2PgE85E6ZEtcRK0zroatJgyUbDVtl\/QSmkVKcaGk\/ryDrd39hdPaTSWofvrxZ74JijYoiv5cx9MztiwRx64644ov2cIrKHD7Oalk72Arv3vxyqJfUCb323HGFhMStm8Hc8bWvJQPera2IGOD2+etsLpbm4Tky9KdvxdnbJXR+gBZl5FMh7ZVygeSLUvXFRUO0ohvZ4vSuz2hS56wPeiQLQ18ddvXEjaa8MK2Nqlh5PAayat9O1uGd\/dScfzXFOg\/iiFbeTlHAcDxMoyztY0Yi4rXppHq7Ww9oB5Re3K2nC3FOn+FfaszztjqPWEgLQ\/vYHXXvNU339JnM3OGb6jTxrSThLppiiGeY3PegC12EF4ue+32LPxh3pLXWdGaUvmb2fLTjq04K6JqfAfSB0OQLvL30jytSv4Us9iAraLmhJP60MRSR03YqOSerdklWzcpeI13FYmVB0tk1NcPofZ9CW1eaygZaTn0D6JjS9G1Q3PdwzcALJeC7J6thWBLls4qltSEiqIsM9jwO9iK+s7FilxB2NwwBfUiQxdMhYg9l23ZSQDE11GoCVdoUP89W6W0KLKBLUkSksNeNpq7ma1B++mCIgz4+tBpIDIImy2z2Pq\/ZZdvQcdWtMjznaagZJ3n+Vr2WLiwLXMtPpMvBPIqvitPuD5JQrCQ9ur9vVRgBErSz3W40lBcM+0ZivHOs7pDuEO25mObCMwb2cKnJoSOmLLUNL26sN4hfbnsknjIY8ZTZDbOs7pDXHjCC9xqWza722t5\/PfWv30h\/mxbH7N1q21x7YoAaz66e8EmV5ijbv0rXpIJti5+4aWBGskNpvJRjZGyG\/mEGSfCJV3vgtqeADN8jvFcFLYJHelnF8vdVfr83RDjN4HiUa7+G71cXXHbXbYlk3DEzND2\/xOmoI8tJim+15azXomF\/IpJidxmnCSUCIhI78JG5R7aGUlD9nJxQ+ha0\/oz5schmjEIH2835C487bRsN+E6zGrJFt7BtrnWhDEWGWVTzTrEUpZmW4sKOZuLNXCLyDoRK4It0\/ohAsj7EHnmqW0xpodRtDJREEw\/\/XQb1KixZXUPg9IcN33Xr2heHTTpbGPkby82lYa87bWbAzmZUxjt+zoUh+1ldZmRAcNqoqBgPbF1G0jSXmF6GP4Qhrk4tyBPmF7zYJ6sLzyhe0xduMV24OJwNFjzYk0JupJBItv7r+LJE96GtFvciiAbTP7Ls9ZtuF4fGvp01bis3IqP1qYkr\/WAcZ+e9JIBzWMGhoks4ws6Kj4J+kwGXp9l34fKVNdSrdkMoYfURxexVZ93ElMXG2ik08KJuS6bw2TCxDC10f3Ln88Jpe5VpLr9U+dKZ+24Ms2vhwZRtfcqw+oXt1BYv47KPbWMTFm2WEQmZpGr1tO8dRO86mQMFNaj0YPCKQrllp0ZeVns6vfVTf5A7tvleiw+J6+VFsfZns6RvVvsCjLZ1k1IyEn8KSmwsZvez3VkSU0\/l52R1feMqvwU5JkExqL7FDillO2oiUIxxEjz5AmfQaUObnOngJGyQCWt7TiBsfxJg3joGq0KLiuo8Hp1nLYmMXgXzn5bFREY6T3hFlFVGW0NyBi0swAsLulFXsletYXKEUT\/Rs7pm+Ed3ZmeD1NVijGybmzlnuVY4eZFpiaw1itC6yhJMB1KyRnhl8kvDu1+YCEJxb+xOhnYVbC6zZ3+Wak\/H5m25u1ui\/mL7DMhvtiJCEyPJuXzQQSma2xk8SSFZfPeprk3qmRi6yrQbs+nNqygSNILSTijDCJLSHfyBoaYdPS+1Yu3P25H89jAmbrsQhLOYloCT5KE7atmp5z\/FEUbj4NVwzHfFA1aFsTZoFJJaWMoXFWRYENXIwGqO3ZnR5h1v4ds85OpeGzg5WbttkNMxVdlopc2P5mB1SkBfx1o9la1HnCQKVLrYWxM2jo1xRIQV3cm\/8WY0uz4fhisjhtzB5LQZ8N+FVrk9EMchxFI7O0zVNg8DpjTYNFe6pPICPNhAlAbk\/JCY\/Bj+hDHLGsbIZmnCpolG278dYtkbIHL1l4mXXgNTMepN41ROX0Pq2XNl85y6cv9y37C3mDUXS2D47LK3PFZ29fX4R2vFos8McTSRLrlxzzYjFcd5HzyhFcibZdH4ug445sZyGK4fF1FRr4GgGzsW7q9sLqATNHa5sxeJwIxgbKWY6SRUa+3YojRjIW1da4pBJmAZJzayAGeHL2SorquLbecN78JJDBaxGTSIO4NRm1\/8thlR383D9tN63Y\/xCgp6opOCY0rQYDKuT67rkRK95PTWocHhuTJvrJHJk7iad66Etq+CYvza9Ors5NZhKXsDDe\/eufWbPKD18ILCtmv7NQo03HP3dPHPyfoZC9xV0HTwHpXcPXJBjMTPoRZS5nhRv31pWdJp5huP\/SRmMkugSHrozSXD\/cBeWT3hNv8vwiNKCT09AspZ3ZhWfBh4xw9lg3k1FNdtmkN4yvsLSY18ShEMi3eV9Ag7f1q7sdsCVEom932zas8er7FDmcTW48COXCM6u76JuEqRDZpweV881GrPyRFYYr1fnHL03iCQnocQtwGgq2vOvmnQ7yqLbOPXzVrYwlneIR0aJ+wLb9YhJh0FTRhHCXCGR5hoomtByLcrSyv6iYrhb6vnv0EW066ipes\/1ycnpvj5AkfB6UGJzkV0xZugmLegn3SE2J+SMJeVeqEeH7YDRFOtvVQpOBEdmdQ1ptKFPO0lcf34OO9RUIUErUXGU4VxY5yGsKKC+ZNWYsHQYjC9SkZSM534Wtxwj\/efSxE4SnvpNv8jF9V0zif4uMHgW5YcLqYyrkVzBVl\/vGaofe2YKcKGuX8h4UUMYQ5TVwPgv2yz+\/cUuovDvXUhvtb4CzOdhjcAquCu7qjTvg8Mvjrj358AjMKH7fhnvAQGHB32wQXph+A+yaw7d2KTd1P++a+Ccm9IkOIwkf8ZOOEz8C\/P3a1LnYHTfjH8R9wYiZCyjFLIwAAAABJRU5ErkJggg==)","90b227bc":"We get a `mean Root Mean Sqaure Error` of 0.89 approx which is more than good enough for our case. Let us now train on our dataset and arrive at predictions.","cf5ca8fd":"## Demographic Filtering\n\n![](https:\/\/media.giphy.com\/media\/fzZzoftMBR8is\/giphy.gif)\n\nBefore getting started with this \n* We need a `metric` to score or rate movie \n* Calculate the score for every movie \n* Sort the scores and recommend the best rated movie to the users.\n\nWe can use the average ratings of the movie as the score but using this won't be fair enough since a movie with 8.9 average rating and only 3 votes cannot be considered better than the movie with 7.8 as as average rating but 40 votes. \n\nSo, I'll be using `IMDB's weighted rating (wr)` which is given as :-\n![](https:\/\/image.ibb.co\/jYWZp9\/wr.png)\n\nwhere,\n* v is the number of `votes for the movie`\n* m is the `minimum votes` required to be listed in the chart\n* R is the `average rating` of the movie\n* C is the `mean vote` across the whole report\n\nWe already have `v (vote_count)` and `R (vote_average)` and C can be calculated as ","0539111d":"Now enough said , let's see how to implement this.\nSince the dataset we used before did not have userId(which is necessary for collaborative filtering) let's load another dataset. We'll be using the [**Surprise** ](https:\/\/surprise.readthedocs.io\/en\/stable\/index.html) library to implement SVD.","883009cc":"We are now in a good position to define our recommendation function. These are the following steps we'll follow :-\n* Get the index of the movie given its title.\n* Get the list of cosine similarity scores for that particular movie with all movies. Convert it into a list of tuples where the first element is its position and the second is the similarity score.\n* Sort the aforementioned list of tuples based on the similarity scores; that is, the second element.\n* Get the top 10 elements of this list. Ignore the first element as it refers to self (the movie most similar to a particular movie is the movie itself).\n* Return the titles corresponding to the indices of the top elements.","9a6dc95c":"---\n\nI'll wrap things up there. If you want to find some other answers then go ahead `edit` this kernel. If you have any `questions` then do let me know.\n\nIf this kernel helped you then don't forget to \ud83d\udd3c `upvote` and share your \ud83c\udf99 `feedback` on improvements of the kernel.\n\n![](https:\/\/media.giphy.com\/media\/N2fDcOGHsEEA8\/giphy.gif)\n\n---","717b1ef0":"Diagonal elements are 1 since those are same movies so they have same plot & other values are how much one movie has similar plot to the other.","e712e6bc":"### Credits, Genres and Keywords Based Recommender\n\nIt goes without saying that the quality of our recommender would be increased with the usage of better metadata. That is exactly what we are going to do in this section. We are going to build a recommender based on the following metadata: the 3 top actors, the director, related genres and the movie plot keywords.\n\nFrom the cast, crew and keywords features, we need to extract the three most important actors, the director and the keywords associated with that movie. Right now, our data is present in the form of `stringified` lists , we need to convert it into a safe and usable structure","0432b2ec":"### Plot description based Recommender\n\nWe will compute pairwise similarity scores for all movies based on their plot descriptions and recommend movies based on that `similarity score`. The plot description is given in the `overview` feature of our dataset.","0ba46137":"For any of you who has done even a  bit of text processing before knows we need to convert the `word vector of each overview`. Now we'll compute `Term Frequency-Inverse Document Frequency (TF-IDF)` vectors for each overview.\n\nNow if you are wondering what is term frequency, it is the `relative frequency of a word in a document and is given as (term instances \/ total instances)`. `Inverse Document Frequency` is the relative count of documents containing the term is given as `log(number of documents\/documents with term)`. The overall importance of each word to the documents in which they appear is equal to **`TF * IDF`**.\n\nThis will give you a matrix where each column represents a word in the overview vocabulary (all the words that appear in at least one document) and each row represents a movie, as before.This is done to reduce the importance of words that occur frequently in plot overviews and therefore, their significance in computing the final `similarity score`.\n\nFortunately, `scikit-learn` gives you a built-in `TfIdfVectorizer` class that produces the TF-IDF matrix.","9bd3ada7":"We see that our recommender has been successful in capturing more information due to more metadata and has given us (arguably) better recommendations. It is more likely that Marvels or DC comics fans will like the movies of the same production house. Therefore, to our features above we can add `production_company` . We can also increase the weight of the director, by adding the feature multiple times in the soup."}}