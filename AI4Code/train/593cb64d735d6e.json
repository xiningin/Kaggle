{"cell_type":{"0416f146":"code","672b67be":"code","39d2ab0e":"code","0ec80111":"code","a2878d88":"code","65cd36ed":"code","2f2eecbd":"code","2be9a644":"code","fdf8bca4":"code","e7d258dd":"code","e8ff897b":"code","d1a2852c":"code","540698cc":"code","f539ce54":"code","6f655d83":"code","b24678d7":"code","66b630ee":"code","b718d2bc":"code","85273858":"code","ead307ec":"code","ad012ae7":"code","2b3aa5dd":"code","9717a485":"code","d47ef31e":"code","37050e28":"code","eddda3f2":"code","be2b3072":"code","fe41d659":"code","ed86c63e":"code","404f5b23":"code","09678002":"code","771cd87f":"code","86b0e3f6":"code","06cefcec":"code","73a32c56":"code","fb3af491":"code","73c58e28":"code","cc41282b":"code","3f2590f9":"code","debb9545":"code","00bee30e":"code","fc8d65bd":"code","12224274":"code","5fa85ff7":"code","cbdf6a8d":"code","c6da4bb5":"code","254dfeb3":"code","4d857f61":"code","15589bad":"code","208f6421":"code","9bef144d":"code","ad2c5659":"code","f27ba2ec":"code","06b1e0c1":"code","368d186f":"code","d639a8bd":"code","fe603a7d":"code","23bebbe8":"code","b247778a":"code","190a4a2d":"code","d605e5c1":"code","1a92b788":"code","8d456669":"code","fc8a3905":"code","d27a5f7c":"code","3ae77e23":"code","e59a8f39":"code","701934e4":"code","c4fbe7e3":"code","bef038a3":"code","522ccb3a":"code","3f948945":"code","4360330f":"code","6c4d41c4":"code","62aa6212":"markdown","23ddaf51":"markdown","38cd3f49":"markdown","76721c92":"markdown","d6270527":"markdown","6f709531":"markdown","5c956b0e":"markdown","d53f6b5e":"markdown","aaf294f5":"markdown","69a13684":"markdown","67cfb06f":"markdown","725c93a9":"markdown","57411111":"markdown","ea7172d5":"markdown","4becec7d":"markdown","aa9d79c8":"markdown","f298c325":"markdown","93f78a95":"markdown","efbceb5d":"markdown","2802e65f":"markdown","cd471a57":"markdown","d5beff38":"markdown","3affb45b":"markdown","2e34be28":"markdown","cf40996b":"markdown","80febfdf":"markdown","9de1bb51":"markdown","42cee327":"markdown","6c2aed2f":"markdown","44e58ac0":"markdown","46ab1b7b":"markdown","e798df7a":"markdown","de136b57":"markdown","43a52525":"markdown","7963472c":"markdown","2402cc93":"markdown","979331b3":"markdown","23fd91a8":"markdown","548ad322":"markdown","0f03c62b":"markdown","17a3abcc":"markdown","37c125fd":"markdown","868bad6c":"markdown","dde6a97c":"markdown","f68449cb":"markdown","63eef308":"markdown","1a4b0fe5":"markdown"},"source":{"0416f146":"import plotly.graph_objects as go\nfig = go.Figure(data =\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        x=[-9, -6, -5 , -3, -1], # horizontal axis\n        y=[0, 1, 4, 5, 7] # vertical axis\n    ))\n#x axis\nfig.update_xaxes(visible=False)\n\n#y axis    \nfig.update_yaxes(visible=False)\nfig.show()","672b67be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39d2ab0e":"!pip install pywaffle\nfrom pywaffle import Waffle","0ec80111":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nimport plotly.express as px\n\nimport matplotlib as mpl\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.lines import Line2D\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nfrom textwrap import wrap\n\nimport warnings\nwarnings.filterwarnings('ignore')","a2878d88":"df=pd.read_csv(\"..\/input\/human-resources-data-set\/HRDataset_v14.csv\")\ndf.head().style.set_caption(\"District Dataframe\").set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen','border': '1.5px  solid white'})","65cd36ed":"df.shape","2f2eecbd":"df.info()","2be9a644":"df.describe().T #Prints Statistical Data of numerical values","fdf8bca4":"ccol=df.select_dtypes(include=[\"object\"]).columns\nncol=df.select_dtypes(include=[\"int\",\"float\"]).columns","e7d258dd":"print(\"The number of Categorical columns are:\",len(ccol))\nprint(\"The number of Numerical columns are:\",len(ncol))","e8ff897b":"ncol","d1a2852c":"for i in ncol:\n    print(i,\"-\",df[i].nunique())\n    \n#DaysLateLast30----How many days the employee arrived late to work in the last 30 days","540698cc":"ccol","f539ce54":"for i in ccol:\n    print(i,\"-\",df[i].nunique())","6f655d83":"ncol","b24678d7":"df[\"Position\"]","66b630ee":"t=(df.groupby(\"Position\")[\"EmpID\"].count()).sort_values(ascending =True)\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(15,10))\nplots=sns.barplot(x=t.index,y=t.values)\n# Iterrating over the bars one-by-one\nfor bar in plots.patches:\n   \n  # Using Matplotlib's annotate function and\n  # passing the coordinates where the annotation shall be done\n  # x-coordinate: bar.get_x() + bar.get_width() \/ 2\n  # y-coordinate: bar.get_height()\n  # free space to be left to make graph pleasing: (0, 8)\n  # ha and va stand for the horizontal and vertical alignment\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=12, xytext=(0, 8),\n                   textcoords='offset points',\n                   bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.2))\n    \nplt.xticks(rotation=90) #Rotating the Label\nplt.title(\"Count of employees in each position\",size=25,weight=\"bold\") #Title of the plot\nplt.xlabel(\"Position\",fontsize=20) #Title of x-axis\nplt.tick_params(labelsize=10) #Varying label size\nplt.tight_layout()\n","b718d2bc":"z=df.groupby(\"State\")[\"EmpID\"].count()\nsns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(15,10))\nplots=sns.barplot(x=z.index,y=z.values)\n# Iterrating over the bars one-by-one\nfor bar in plots.patches:\n   \n  # Using Matplotlib's annotate function and\n  # passing the coordinates where the annotation shall be done\n  # x-coordinate: bar.get_x() + bar.get_width() \/ 2\n  # y-coordinate: bar.get_height()\n  # free space to be left to make graph pleasing: (0, 8)\n  # ha and va stand for the horizontal and vertical alignment\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=12, xytext=(0, 8),\n                   textcoords='offset points')\nplt.xticks(rotation=90) #Rotating the Label\nplt.title(\"Count of employees in every State\",size=25,weight=\"bold\") #Title of the plot\nplt.xlabel(\"State\",fontsize=20) #Title of x-axis\nplt.ylabel(\"Employee Count\",fontsize=20)\nplt.tick_params(labelsize=10) #Varying label size\nplt.tight_layout()\n","85273858":"y=df[[\"EmpID\",\"Department\",\"State\"]].groupby([\"State\",\"Department\"])[\"EmpID\"].count()","ead307ec":"table = pd.pivot_table(df, values='EmpID', index=['State', 'Department'],aggfunc=lambda x: len(x.unique()))\ntable.rename({\"EmpID\":\"Count of Employees\"},axis=1,inplace=True)\ntable","ad012ae7":"table.reset_index(drop=False,inplace=True)","2b3aa5dd":"t=table[table[\"State\"]==\"MA\"].reset_index()\nt.sort_values(by=[\"Count of Employees\"],ascending=False,inplace=True)\nt[\"Department\"]=t[\"Department\"].apply(lambda x:x.strip())","9717a485":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(15,10))\nplots=sns.barplot(x=t[\"Count of Employees\"],y=t[\"Department\"])\nfor p in plots.patches:\n    width = p.get_width()\n    plt.text(5+p.get_width(), p.get_y()+0.55*p.get_height(),\n             '{:1.2f}'.format(width),\n             ha='center', va='center',\n             bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.2))\n\nplt.yticks(rotation=0) #Rotating the Label\nplt.title(\"Massachusetts Department Distribution\",size=25,weight=\"bold\") #Title of the plot\nplt.xlabel(\"Employee Count\",fontsize=20) #Title of x-axis\nplt.ylabel(\"Department\",fontsize=20)\nplt.tick_params(labelsize=10) #Varying label size\nplt.tight_layout()","d47ef31e":"x=df.groupby(\"Sex\")[\"EmpID\"].count()\/df[\"EmpID\"].count()\nx","37050e28":"plt.figure(figsize=(8,8))\n# Create a Donut Chart\nplt.pie(x,labels=x.index,wedgeprops = { 'linewidth' : 5, 'edgecolor' : 'white' },autopct='%2.1f%%',shadow=True)\nplt.rc(\"font\",size=13)\n# add a circle at the center to transform it in a donut chart\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.title(\"Female vs Male Distribution\",size=20,loc=\"center\")\n\nplt.tight_layout()","eddda3f2":"k=df.groupby(\"ManagerID\")[\"EmpID\"].count()\nsns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(20,10))\nplots=sns.barplot(x=k.index,y=k.values,estimator=sum)\nfor bar in plots.patches:\n   \n  # Using Matplotlib's annotate function and\n  # passing the coordinates where the annotation shall be done\n  # x-coordinate: bar.get_x() + bar.get_width() \/ 2\n  # y-coordinate: bar.get_height()\n  # free space to be left to make graph pleasing: (0, 8)\n  # ha and va stand for the horizontal and vertical alignment\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=12, xytext=(0, 8),\n                   textcoords='offset points',\n                   bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.2))\n#plt.xticks(rotation=0) #Rotating the Label\nplt.title(\"Manager Wise Split of Employees\",size=25,weight=\"bold\") #Title of the plot\nplt.xlabel(\"Manager ID\",fontsize=20) #Title of x-axis\nplt.ylabel(\"Employee Count\",fontsize=20)\nplt.tick_params(labelsize=14) #Varying label size\nplt.tight_layout()\n","be2b3072":"j=df.groupby(\"Department\")[\"EmpID\"].count().reset_index(drop=False)","fe41d659":"plt.figure(figsize=(10,10))\nsquarify.plot(sizes=j['EmpID'], label=j['Department'],color=[\"grey\",\"green\",\"blue\", \"red\",\"yellow\",\"orange\",\"indigo\"], alpha=.5)\nplt.rc('font', size=8)          \nplt.axis('off')\nplt.show()","ed86c63e":"df[\"DOB\"]","404f5b23":"import datetime\nfrom datetime import date,datetime\nfrom dateutil.relativedelta import relativedelta","09678002":"w=date.today()\nw=w.strftime(\"%Y-%m-%d\")","771cd87f":"def days_between(d1, d2):\n    d1 = datetime.strptime(d1, \"%Y-%m-%d\")\n    d2 = datetime.strptime(d2, \"%Y-%m-%d\")\n    return abs(relativedelta(d2, d1).years)","86b0e3f6":"d=pd.to_datetime(df[\"DOB\"]).apply(lambda x:x.strftime(\"%Y-%m-%d\"))\ndf[\"Age\"]=d.apply(lambda x:days_between(x, w))\ndf[\"Age\"]","06cefcec":"plt.figure(figsize=(8,6))\nsns.set_theme(style=\"darkgrid\")\nplt.grid(True)\nax=sns.kdeplot(df[\"Age\"],shade=True,color=\"red\")\nax.grid(which='major', axis='x', zorder=0, color='#DFFF00', linewidth=0.4)\nax.grid(which='major', axis='y', zorder=0, color='#DFFF00', linewidth=0.4)\nplt.rc('font', size=10,weight=\"bold\")\nplt.xticks(rotation=20)\nplt.tight_layout()","73a32c56":"plt.figure(figsize=(8,6))\nsns.set_theme(style=\"darkgrid\")\nsns.kdeplot(df.loc[(df[\"Sex\"]==\"F\"),\"Salary\"],shade=True,color=\"red\",label=\"Female\",alpha=0.1)\nsns.kdeplot(df.loc[(df[\"Sex\"]==\"M \"),\"Salary\"],shade=True,color=\"yellow\",label=\"Male\",alpha=0.1) #shade=True\nplt.legend()","fb3af491":"plt.figure(figsize=(8,8))\nsns.violinplot(y=df[\"Salary\"], x=df[\"Sex\"])","73c58e28":"df.loc[(df[\"Salary\"]==df[\"Salary\"].max()),:]","cc41282b":"p=df[[\"EmpID\",\"ManagerID\",\"Salary\"]].copy().dropna()\np.head()","3f2590f9":"#Need to check whether employees with high pay belong to a certain class of managers\np=(p.groupby(\"ManagerID\").agg({\"EmpID\":\"count\",\"Salary\":\"mean\"})).sort_values(by=\"Salary\")\np.rename({\"EmpID\":\"Count of Employees\"},axis=1,inplace=True)\np","debb9545":"plt.figure(figsize=(10,10))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(p.index, p.Salary,s=200,edgecolor=\"yellow\")  #c=p.index, cmap='viridis',edgecolor=\"yellow\", linewidth=1\n \n# Add titles (main and on axis)\nplt.xlabel(\"Manager ID\")\nplt.ylabel(\"MEAN Salary\")\nplt.title(\"Manager ID vs Mean Salary\")\n\n# Show the graph\nplt.show()","00bee30e":"from mpl_toolkits.mplot3d import Axes3D\n\nsns.set_style(\"darkgrid\")\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\n\nx = p['Count of Employees']\ny = p['Salary']\nz = p.index\n\nax.set_xlabel(\"Count of Employees\")\nax.set_ylabel(\"Mean Salary\")\nax.set_zlabel(\"Manager ID\")\n\nax.scatter(x, y, z,c=\"yellow\")\n\nplt.show()","fc8d65bd":"df[\"PerformanceScore\"] # PIP means Performance Improvement Plans-----meaning they are poorly performing.","12224274":"df[\"PerformanceScore\"].unique()","5fa85ff7":"dic=dict(zip(df[\"PerformanceScore\"].unique(),[4,3,2,1]))\ndf[\"PS\"]=df[\"PerformanceScore\"].apply(lambda x:dic[x])","cbdf6a8d":"c=df[[\"EmpID\",\"ManagerID\",\"PS\"]].copy()\nc.dropna(inplace=True)\nc.head()","c6da4bb5":"d=c.groupby([\"ManagerID\",\"PS\"])[\"EmpID\"].count()\nd=pd.DataFrame(d)\nd #Gives an account of the count of employees having certain performance scores under various managers. ","254dfeb3":"ori=d.reset_index()\ngood=ori[ori[\"PS\"]>=3]\nbad=ori[ori[\"PS\"]<3]\n\ngood.shape,bad.shape","4d857f61":"g=pd.DataFrame(good.groupby(\"ManagerID\")[\"EmpID\"].sum()).reset_index()\nb=pd.DataFrame(bad.groupby(\"ManagerID\")[\"EmpID\"].sum()).reset_index()\n\ng=g.rename(columns={\"EmpID\":\"Count of Employees\"})\nb=b.rename(columns={\"EmpID\":\"Count of Employees\"})","15589bad":"b","208f6421":"# Reorder the dataframe\nb = b.sort_values(by=[\"Count of Employees\"])\n\n# initialize the figure\nplt.figure(figsize=(20,10))\nax = plt.subplot(111, polar=True)\nplt.axis('off')\n\n# Constants = parameters controling the plot layout:\nupperLimit = 100\nlowerLimit = 30\nlabelPadding = 4\n\n# Compute max and min in the dataset\nmax = b['Count of Employees'].max()\n\n# Let's compute heights: they are a conversion of each item value in those new coordinates\n# In our example, 0 in the dataset will be converted to the lowerLimit (10)\n# The maximum will be converted to the upperLimit (100)\nslope = (max - lowerLimit) \/ max\nheights = slope * b[\"Count of Employees\"] + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(b.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(b.index)+1))\nangles = [element * width for element in indexes]\nangles\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=heights, \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"white\",\n    color=\"#61a4b2\",\n)\n\n# Add labels\nfor bar, angle, height, label in zip(bars,angles, heights, b[\"ManagerID\"].astype(\"int\")):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle, \n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, \n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\") \n\nax.set_title(\"Count of UNDER-Performing Employees Manager-Wise\",pad=50)","9bef144d":"# Reorder the dataframe\ng = g.sort_values(by=[\"Count of Employees\"])\n\n# initialize the figure\nplt.figure(figsize=(20,10))\nax = plt.subplot(111, polar=True)\nplt.axis('off')\n\n# Constants = parameters controling the plot layout:\nupperLimit = 100\nlowerLimit = 30\nlabelPadding = 4\n\n# Compute max and min in the dataset\nmax = g['Count of Employees'].max()\n\n# Let's compute heights: they are a conversion of each item value in those new coordinates\n# In our example, 0 in the dataset will be converted to the lowerLimit (10)\n# The maximum will be converted to the upperLimit (100)\nslope = (max - lowerLimit) \/ max\nheights = slope * g[\"Count of Employees\"] + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(g.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(g.index)+1))\nangles = [element * width for element in indexes]\nangles\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=np.power(heights,2), \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"white\",\n    color=\"#ff0000\",\n)\n\n# Add labels\nfor bar, angle, height, label in zip(bars,angles, np.power(heights,2), g[\"ManagerID\"].astype(\"int\")):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle, \n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, \n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\") \n\nax.set_title(\"Count of OVER-Performing Employees Manager-Wise\",pad=50)","ad2c5659":"h=pd.DataFrame(df.groupby([\"Sex\",\"PS\"])[\"EmpID\"].count()).reset_index()\nh","f27ba2ec":"fig=px.bar(h, x='PS', y='EmpID', color='Sex', title='Performance Score Gender-Wise',text=\"EmpID\",\n      labels={'PS': 'Performance Score', 'EmpID': 'Count of Employees'},\n      barmode=\"group\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n# Set fontsize and uniformtext_mode='hide' says to hide the text if it won't fit\nfig.update_layout(uniformtext_minsize=10)\nfig","06b1e0c1":"df[\"DateofHire\"]","368d186f":"df[\"DateofTermination\"]","d639a8bd":"df[\"TermReason\"] #Describes the reason for leaving the job","fe603a7d":"v=df[[\"EmpID\",\"DateofHire\",\"DateofTermination\",\"TermReason\"]].copy()\nv.dropna(inplace=True) #Removing those employees who are still working in the company\nv.head()","23bebbe8":"v.shape  #Looks like 311-104=207 employees have been retained by the company","b247778a":"v.TermReason.nunique(),v.TermReason.unique() #One of the employees' was a Gangster lol.","190a4a2d":"v1=pd.DataFrame(v.groupby(\"TermReason\")[\"EmpID\"].count()).reset_index()\nv1","d605e5c1":"plt.figure(figsize=(20,20))\nsns.set_theme()\nsns.scatterplot(data=v1.sort_values(by=[\"EmpID\"]), x=\"TermReason\", y=\"EmpID\", size=\"EmpID\",color=\"blue\", legend=False, sizes=(2000, 10000), alpha=0.8, linewidth=6)\nplt.xlabel(\"Various Reasons\",size=25)\nplt.ylabel(\"Number of Employees\",size=25)\nplt.title(\"To determine why the majority of employees are leaving the company\", loc=\"center\")\nplt.yticks(fontsize=20) \nplt.xticks(fontsize=15,rotation=60) \n# show the graph\nplt.tight_layout()","1a92b788":"w=df[[\"EmpID\",\"DateofHire\",\"DateofTermination\",\"Department\"]].copy()\nw.dropna(inplace=True) #Removing those employees who are still working in the company\nw.head()","8d456669":"w1=pd.DataFrame(w.groupby(\"Department\")[\"EmpID\"].count()).reset_index()\nw1","fc8a3905":"# Reorder it based on the values\nordered_df = w1.sort_values(by='EmpID')\nmy_range=range(1,len(w1.index)+1)\n \n# The horizontal plot is made using the hline function\nplt.hlines(y=my_range, xmin=0, xmax=ordered_df['EmpID'], color='skyblue')\nplt.plot(ordered_df['EmpID'], my_range, \"o\")\n \n# Add titles and axis names\nplt.yticks(my_range, ordered_df['Department'])\nplt.title(\"Department Distribution of Turn-Over Rate\", loc='center')\nplt.xlabel('No of Employees',size=20)\nplt.ylabel('Department',size=20)\n\n# Show the plot\nplt.show()","d27a5f7c":"n=df[[\"EmpID\",\"DateofHire\",\"Sex\"]].copy()\nn[\"DateofHire\"]=pd.to_datetime(n[\"DateofHire\"])\nn[\"Group\"]=n[\"DateofHire\"].apply(lambda x:int(x.year))","3ae77e23":"n=pd.DataFrame(n.groupby(\"Group\")[\"EmpID\"].count())\nn","e59a8f39":"fig = px.bar(n, x=n.index, y='EmpID',color='EmpID',\n             labels={'EmpID':'Count of Employees',\"Group\":\"Year of Hiring\"}, height=400)\nfig.update_layout(\n    font_family=\"Stencil\",\n    font_color=\"black\",\n    title_font_family=\"Times New Roman\",\n    title_font_color=\"red\",\n    legend_title_font_color=\"green\"\n)\nfig.update_xaxes(title_font_family=\"Arial\",\n                 title_font_color=\"Green\")\nfig.update_yaxes(title_font_family=\"Arial\",\n                 title_font_color=\"Green\")\nfig.update_layout(\n    title={\n        'text': \"Bar Chart\",\n        'y':0.9,\n        'x':0.42,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","701934e4":"n=n.reset_index()","c4fbe7e3":"n_categories = n.shape[0]\n#colors = [plt.cm.inferno_r(i\/float(n_categories)) for i in range(n_categories)]\ncolors = [plt.cm.Set3(i\/float(n_categories)) for i in range(n_categories)]\n\nfig = plt.figure(\n    FigureClass=Waffle,\n    plots={\n        '111': {\n            'values': n[\"EmpID\"],\n            'labels': [\"{0} ({1})\".format(df[0], df[1]) for df in n[['Group', 'EmpID']].itertuples()],\n            'legend': {'loc': 'upper left', 'bbox_to_anchor': (1.05, 1), 'fontsize': 12},\n            'title': {'label': 'Year-Wise Distribution', 'loc': 'center', 'fontsize':18}\n        },\n    },\n    rows=7,\n    colors=colors,\n    figsize=(16, 9)\n)","bef038a3":"corr_m=df.drop([i for i in ncol if \"ID\" in i],axis=1).corr()","522ccb3a":"plt.figure(figsize=(10,10))\nsns.heatmap(corr_m,annot=True,linewidths=.5,cmap=\"CMRmap\")","3f948945":"plt.figure(figsize=(10,10))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(x=df[\"SpecialProjectsCount\"],y=df[\"Salary\"],hue=df[\"Sex\"])\nplt.ylim([0,2.6e5])\nplt.xlabel(\"Special Projects Count\",size=20)\nplt.ylabel(\"Salary\",size=20)","4360330f":"#df[\"EmpSatisfaction\"].value_counts()","6c4d41c4":"#df[\"RecruitmentSource\"].value_counts() #vs Performance Score","62aa6212":"#### Majority of Employees belong to the Production Wing of the company.","23ddaf51":"#### The top three reasons for the Employees to leave the company were:\n\n1. A better position in another company leading to career upgrowth.(~20%)\n\n2. Lack of Job Satisfaction(unhappiness)\n\n3. A better salary offered by rival companies.","38cd3f49":"## 7. Probability Distribution of Pay-Rate among various employees.","76721c92":"# Importing Reqd Libraries to get started.","d6270527":"## 5. Department wise count of employees.","6f709531":"### a. Manager-Wise Split: ","5c956b0e":"### Well there's not much of a trend that I can observe. Please let me know if you find any useful insights in the comments below. ","d53f6b5e":"# Basic EDA:","aaf294f5":"# Isolating numerical columns and categorical columns:","69a13684":"#### A women with the name Janet King is paid the highest salary in the company.\n\n#### The plot shows that women are given high paid jobs as compared to men.","67cfb06f":"#### There are more Female employees than Males.(56.6% to 43.4%)","725c93a9":"**Future Analysis kept in mind**:\n\nRecruitment Source :Relationships between Recruiting Sources and Employee Performance, Absenteeism,Employee Satisfaction\n\nLate last 30 days to categorise Sincere employees\n\nPerformance Score vs Salary","57411111":"# Reading the Dataset.","ea7172d5":"## 4. Employee count under each manager.","4becec7d":"Distribution within Massachusetts:","aa9d79c8":"#### Looks Like the Production Dept has lost a chunk of employees ever since the beginning.","f298c325":"#### As seen from the above table, the only state which handles Production is Massachusetts. Rest all other states don't have any production unit. So if you are hired as a Production Technician, you will be heading to Massachusetts for your work.","93f78a95":"Looks like there is only one Significant correlation which we can check, i.e. the one between Salary and SpecialProjectsCount.","efbceb5d":"#### Conclusion:\n\nManager with ID=18 has the best lot of employees, because there are less employees underperforming and more employees overperforming.","2802e65f":"#### A performance improvement plan is also referred to as a **PIP** and an alternative name is a performance action plan. PIP is an HR leverage tool that outlines specific steps for the employee to take to improve and goals for them to work towards.","cd471a57":"## 10. Date of termination having any connection with manager?","d5beff38":"### b. Gender Wise Split:","3affb45b":"## 9. Performance Score Manager-wise to check which manager is leading a better team.","2e34be28":"## 2. Count of employees in every state.","cf40996b":"#### Again has been proven that Women are more efficient compared to Men.","80febfdf":"# What are the visualisations I have tried\/checked (Some of them are in the form of Hypothesis) :\n\n1. Count of employees in each position. (Allows to check vacancies and stuff)\n2. Count of employees in every state.\n3. Female-Male Gender Ratio within the company.\n4. Employee count under each manager.\n5. Dept wise count of employees.\n6. Age Distribution of employees.\n7. Probability Distribution of Pay-Rate among various employees.\n8. Pay Rate wrt Manager working under.\n9. Performance Score Manager-wise to check which manager is leading a better team.\n10. Date of termination having any connection with manager?\n11. Employees leaving from a particular dept?\n12. Employees joining the company per year. ","9de1bb51":"## 6. Age Distribution of employees.","42cee327":"# Don't forget to leave your comments and feedbacks on how I can improve my visualizations. Upvoting will motivate me in my future endeavours.","6c2aed2f":"Through this Waffle visual, I have tried to show that year 2011 has the most number of recruitments.","44e58ac0":"## THANK YOU!","46ab1b7b":"## 12. Employees joining the company per year. ","e798df7a":"#### Looks like Managers with IDs 3,9,15,30 have a less number of employees working under them.","de136b57":"## 8. Pay Rate wrt Manager working under.","43a52525":"#### Majority of the employees seems to be middle aged, with 35 being the mode(Higher probabilty of finding) ","7963472c":"## 1. Count of employees in each position. (Allows to check vacancies and stuff)","2402cc93":"#### I have assumed that the highest rating is 4 and the lowest rating is 1.\n\n'Exceeds'------------------4\n\n'Fully Meets'--------------3\n\n'Needs Improvement'--------2\n\n'PIP'----------------------1(Very Poor)\n","979331b3":"Greetings to Kagglers from all around the world! I have conducted a small Descriptive Analysis on the HR Data set--which consists of the the details of employees of a XYZ company. Although my analysis is not yet complete, I would like to share whatever I have done so far and will ensure its completion in the near future.\n\nAs I am a beginner in this field, please mention any kind of suggestions in the comments and Upvoting my work will really inspire me to create even more beautiful visualisations.\n\nSo, let's get started.","23fd91a8":"#### Looks like the company weighs more preference to \"Production Technician\" background while hiring employees.","548ad322":"#### Highest paid employee is working under Manager with ID=9","0f03c62b":"(i) Salary distribution based on Gender","17a3abcc":"![newplot (1).png](attachment:02655f75-7270-4671-a3b4-6d358fe7b7bb.png)","37c125fd":"### Looks like ManagerID seems to have missing values.(Possible Reason:As you will see further down, there are some Employees with higher posts, who don't require Manager supervision.)","868bad6c":"#### Looking for some correlations among the numerical columns:","dde6a97c":"#### Looks like **MASSACHUSETTS** has a higher employee number. Might suggest that the company's based on this state.","f68449cb":"#### The year 2011 was the Golden Year, with most of the recruitment taking place.(83 Employees employed)","63eef308":"## 3. Female-Male Gender Ratio within the company.","1a4b0fe5":"## 11. Employees leaving from a particular dept?"}}