{"cell_type":{"ad81b61c":"code","1df634fd":"code","c0096da8":"code","157081b8":"code","40b73e95":"code","611d2b53":"code","93d05662":"code","d3c7752d":"code","29635943":"code","fcb3eaec":"code","80f0e46b":"code","e10ba7b0":"code","4d643ed7":"code","55e5e380":"code","b0d3e4b1":"code","0b2658c4":"code","6d255099":"code","cc33db9a":"code","3b37a1ab":"code","bae2b672":"code","36adc138":"code","46af52fb":"code","1488f23c":"code","46e4df25":"code","fb4e28af":"code","c1311efd":"code","65ba4bda":"code","8d540016":"code","4bfea088":"code","48869061":"code","175ad34b":"code","7b848181":"code","0f13cd85":"code","6cf7729b":"code","8880753b":"markdown","a369f5b5":"markdown","f4d8b204":"markdown","5c849e77":"markdown","230b951d":"markdown","87266d22":"markdown","edb9e307":"markdown","cf752e05":"markdown","1737291a":"markdown","826efd05":"markdown","faefa361":"markdown","f1c2b62c":"markdown","5cf339f4":"markdown","31a789fd":"markdown","ebe3ed2a":"markdown","9bc524dd":"markdown","b56d318a":"markdown","a81c408c":"markdown","f47161ab":"markdown","090f54e5":"markdown","71c8dfc2":"markdown","54db73a8":"markdown","0bbb10c4":"markdown","c9862e38":"markdown","5f88e4c7":"markdown","1676f742":"markdown","b29b09d8":"markdown","3f22ced1":"markdown","e8ded8bb":"markdown","857e8cd1":"markdown","bf02d9f1":"markdown","b8927132":"markdown","c15ad30d":"markdown","98e75024":"markdown","7e290dfe":"markdown","d76fbf6d":"markdown","ac539337":"markdown","74f59661":"markdown"},"source":{"ad81b61c":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pytesseract\nfrom PIL import Image\nplt.style.use('dark_background')","1df634fd":"img_ori = cv2.imread('..\/input\/car-plate-detection\/images\/Cars1.png')\n\nheight, width, channel = img_ori.shape\n\nplt.figure(figsize=(12, 10))\nplt.imshow(img_ori, cmap='gray')\nplt.axis('off')\nplt.savefig('Car.png',bbox_inches = 'tight')\nplt.show()","c0096da8":"gray = cv2.cvtColor(img_ori, cv2.COLOR_BGR2GRAY)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(gray, cmap='gray')\nplt.axis('off')\nplt.savefig('Car-GrayScale.png',bbox_inches = 'tight')\nplt.show()","157081b8":"structuringElement = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))\n\nimgTopHat = cv2.morphologyEx(gray, cv2.MORPH_TOPHAT, structuringElement)\nimgBlackHat = cv2.morphologyEx(gray, cv2.MORPH_BLACKHAT, structuringElement)\n\nimgGrayscalePlusTopHat = cv2.add(gray, imgTopHat)\ngray = cv2.subtract(imgGrayscalePlusTopHat, imgBlackHat)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(gray, cmap='gray')\nplt.axis('off')\nplt.savefig('Car-Contrast.png',bbox_inches = 'tight')\nplt.show()","40b73e95":"img_blurred = cv2.GaussianBlur(gray, ksize=(5, 5), sigmaX=0)\n\nimg_thresh = cv2.adaptiveThreshold(\n    img_blurred, \n    maxValue=255.0, \n    adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C, \n    thresholdType=cv2.THRESH_BINARY_INV, \n    blockSize=19, \n    C=9\n)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(img_thresh, cmap='gray')\nplt.axis('off')\nplt.savefig('Car-Adaptive-Thresholding.png',bbox_inches = 'tight')\nplt.show()","611d2b53":"contours, _= cv2.findContours(\n    img_thresh, \n    mode=cv2.RETR_LIST, \n    method=cv2.CHAIN_APPROX_SIMPLE\n)\n\ntemp_result = np.zeros((height, width, channel), dtype=np.uint8)\n\ncv2.drawContours(temp_result, contours=contours, contourIdx=-1, color=(255, 255, 255))\n\nplt.figure(figsize=(12, 10))\nplt.imshow(temp_result)\nplt.axis('off')\nplt.savefig('Car-Contours.png',bbox_inches = 'tight')\nplt.show()","93d05662":"temp_result = np.zeros((height, width, channel), dtype=np.uint8)\n\ncontours_dict = []\n\nfor contour in contours:\n    x, y, w, h = cv2.boundingRect(contour)\n    cv2.rectangle(temp_result, pt1=(x, y), pt2=(x+w, y+h), color=(255, 255, 255), thickness=2)\n    \n    # insert to dict\n    contours_dict.append({\n        'contour': contour,\n        'x': x,\n        'y': y,\n        'w': w,\n        'h': h,\n        'cx': x + (w \/ 2),\n        'cy': y + (h \/ 2)\n    })\n\nplt.figure(figsize=(12, 10))\nplt.imshow(temp_result, cmap='gray')\nplt.axis('off')\nplt.savefig('Car-Boxes.png',bbox_inches = 'tight')\nplt.show()","d3c7752d":"MIN_AREA = 80\nMIN_WIDTH, MIN_HEIGHT = 2, 8\nMIN_RATIO, MAX_RATIO = 0.25, 1.0\n\npossible_contours = []\n\ncnt = 0\nfor d in contours_dict:\n    area = d['w'] * d['h']\n    ratio = d['w'] \/ d['h']\n    \n    if area > MIN_AREA \\\n    and d['w'] > MIN_WIDTH and d['h'] > MIN_HEIGHT \\\n    and MIN_RATIO < ratio < MAX_RATIO:\n        d['idx'] = cnt\n        cnt += 1\n        possible_contours.append(d)\n        \n# visualize possible contours\ntemp_result = np.zeros((height, width, channel), dtype=np.uint8)\n\nfor d in possible_contours:\n#     cv2.drawContours(temp_result, d['contour'], -1, (255, 255, 255))\n    cv2.rectangle(temp_result, pt1=(d['x'], d['y']), pt2=(d['x']+d['w'], d['y']+d['h']), color=(255, 255, 255), thickness=2)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(temp_result, cmap='gray')\nplt.axis('off')\nplt.savefig('Car-Boxes-byCharSize.png',bbox_inches = 'tight')\nplt.show()","29635943":"MAX_DIAG_MULTIPLYER = 5 # 5\nMAX_ANGLE_DIFF = 12.0 # 12.0\nMAX_AREA_DIFF = 0.5 # 0.5\nMAX_WIDTH_DIFF = 0.8\nMAX_HEIGHT_DIFF = 0.2\nMIN_N_MATCHED = 3 # 3\n\ndef find_chars(contour_list):\n    matched_result_idx = []\n    \n    for d1 in contour_list:\n        matched_contours_idx = []\n        for d2 in contour_list:\n            if d1['idx'] == d2['idx']:\n                continue\n\n            dx = abs(d1['cx'] - d2['cx'])\n            dy = abs(d1['cy'] - d2['cy'])\n\n            diagonal_length1 = np.sqrt(d1['w'] ** 2 + d1['h'] ** 2)\n\n            distance = np.linalg.norm(np.array([d1['cx'], d1['cy']]) - np.array([d2['cx'], d2['cy']]))\n            if dx == 0:\n                angle_diff = 90\n            else:\n                angle_diff = np.degrees(np.arctan(dy \/ dx))\n            area_diff = abs(d1['w'] * d1['h'] - d2['w'] * d2['h']) \/ (d1['w'] * d1['h'])\n            width_diff = abs(d1['w'] - d2['w']) \/ d1['w']\n            height_diff = abs(d1['h'] - d2['h']) \/ d1['h']\n\n            if distance < diagonal_length1 * MAX_DIAG_MULTIPLYER \\\n            and angle_diff < MAX_ANGLE_DIFF and area_diff < MAX_AREA_DIFF \\\n            and width_diff < MAX_WIDTH_DIFF and height_diff < MAX_HEIGHT_DIFF:\n                matched_contours_idx.append(d2['idx'])\n\n        # append this contour\n        matched_contours_idx.append(d1['idx'])\n\n        if len(matched_contours_idx) < MIN_N_MATCHED:\n            continue\n\n        matched_result_idx.append(matched_contours_idx)\n\n        unmatched_contour_idx = []\n        for d4 in contour_list:\n            if d4['idx'] not in matched_contours_idx:\n                unmatched_contour_idx.append(d4['idx'])\n\n        unmatched_contour = np.take(possible_contours, unmatched_contour_idx)\n        \n        # recursive\n        recursive_contour_list = find_chars(unmatched_contour)\n        \n        for idx in recursive_contour_list:\n            matched_result_idx.append(idx)\n\n        break\n\n    return matched_result_idx\n    \nresult_idx = find_chars(possible_contours)\n\nmatched_result = []\nfor idx_list in result_idx:\n    matched_result.append(np.take(possible_contours, idx_list))\n\n# visualize possible contours\ntemp_result = np.zeros((height, width, channel), dtype=np.uint8)\n\nfor r in matched_result:\n    for d in r:\n        #cv2.drawContours(temp_result, d['contour'], -1, (255, 255, 255))\n        cv2.rectangle(temp_result, pt1=(d['x'], d['y']), pt2=(d['x']+d['w'], d['y']+d['h']), color=(255, 255, 255), thickness=2)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(temp_result, cmap='gray')\nplt.axis('off')\nplt.savefig('Car-Boxes-byContourArrangement.png',bbox_inches = 'tight')\nplt.show()","fcb3eaec":"result_idx = find_chars(possible_contours)\n\nmatched_result = []\nfor idx_list in result_idx:\n    matched_result.append(np.take(possible_contours, idx_list))\ntemp_result = np.zeros((height, width, channel), dtype=np.uint8)\n\nfor r in matched_result:\n    for d in r:\n        #cv2.drawContours(temp_result, d['contour'], -1, (255, 255, 255))\n        cv2.rectangle(img_ori, pt1=(d['x'], d['y']), pt2=(d['x']+d['w'], d['y']+d['h']), color=(0, 0, 255), thickness=2)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(img_ori, cmap='gray')\nplt.axis('off')\nplt.savefig('Car-OverlappingBoxes.png',bbox_inches = 'tight')\nplt.show()","80f0e46b":"PLATE_WIDTH_PADDING = 1.3 # 1.3\nPLATE_HEIGHT_PADDING = 1.5 # 1.5\nMIN_PLATE_RATIO = 3\nMAX_PLATE_RATIO = 10\n\nplate_imgs = []\nplate_infos = []\n\nfor i, matched_chars in enumerate(matched_result):\n    sorted_chars = sorted(matched_chars, key=lambda x: x['cx'])\n\n    plate_cx = (sorted_chars[0]['cx'] + sorted_chars[-1]['cx']) \/ 2\n    plate_cy = (sorted_chars[0]['cy'] + sorted_chars[-1]['cy']) \/ 2\n    \n    plate_width = (sorted_chars[-1]['x'] + sorted_chars[-1]['w'] - sorted_chars[0]['x']) * PLATE_WIDTH_PADDING\n    \n    sum_height = 0\n    for d in sorted_chars:\n        sum_height += d['h']\n\n    plate_height = int(sum_height \/ len(sorted_chars) * PLATE_HEIGHT_PADDING)\n    \n    triangle_height = sorted_chars[-1]['cy'] - sorted_chars[0]['cy']\n    triangle_hypotenus = np.linalg.norm(\n        np.array([sorted_chars[0]['cx'], sorted_chars[0]['cy']]) - \n        np.array([sorted_chars[-1]['cx'], sorted_chars[-1]['cy']])\n    )\n    \n    angle = np.degrees(np.arcsin(triangle_height \/ triangle_hypotenus))\n    \n    rotation_matrix = cv2.getRotationMatrix2D(center=(plate_cx, plate_cy), angle=angle, scale=1.0)\n    \n    img_rotated = cv2.warpAffine(img_thresh, M=rotation_matrix, dsize=(width, height))\n    \n    img_cropped = cv2.getRectSubPix(\n        img_rotated, \n        patchSize=(int(plate_width), int(plate_height)), \n        center=(int(plate_cx), int(plate_cy))\n    )\n    \n    if img_cropped.shape[1] \/ img_cropped.shape[0] < MIN_PLATE_RATIO or img_cropped.shape[1] \/ img_cropped.shape[0] < MIN_PLATE_RATIO > MAX_PLATE_RATIO:\n        continue\n    \n    plate_imgs.append(img_cropped)\n    plate_infos.append({\n        'x': int(plate_cx - plate_width \/ 2),\n        'y': int(plate_cy - plate_height \/ 2),\n        'w': int(plate_width),\n        'h': int(plate_height)\n    })\n    \n    plt.subplot(len(matched_result), 1, i+1)\n    plt.imshow(img_cropped, cmap='gray')\n    plt.axis('off')\n    plt.savefig('Car-Plates(Rotated).png',bbox_inches = 'tight')\n    plt.show()","e10ba7b0":"longest_idx, longest_text = -1, 0\nplate_chars = []\n\nfor i, plate_img in enumerate(plate_imgs):\n    plate_img = cv2.resize(plate_img, dsize=(0, 0), fx=1.6, fy=1.6)\n    _, plate_img = cv2.threshold(plate_img, thresh=0.0, maxval=255.0, type=cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n    \n    # find contours again (same as above)\n    contours, _ = cv2.findContours(plate_img, mode=cv2.RETR_LIST, method=cv2.CHAIN_APPROX_SIMPLE)\n    \n    plate_min_x, plate_min_y = plate_img.shape[1], plate_img.shape[0]\n    plate_max_x, plate_max_y = 0, 0\n\n    for contour in contours:\n        x, y, w, h = cv2.boundingRect(contour)\n        \n        area = w * h\n        ratio = w \/ h\n\n        if area > MIN_AREA \\\n        and w > MIN_WIDTH and h > MIN_HEIGHT \\\n        and MIN_RATIO < ratio < MAX_RATIO:\n            if x < plate_min_x:\n                plate_min_x = x\n            if y < plate_min_y:\n                plate_min_y = y\n            if x + w > plate_max_x:\n                plate_max_x = x + w\n            if y + h > plate_max_y:\n                plate_max_y = y + h\n                \n    img_result = plate_img[plate_min_y:plate_max_y, plate_min_x:plate_max_x]\n    \n    img_result = cv2.GaussianBlur(img_result, ksize=(3, 3), sigmaX=0)\n    _, img_result = cv2.threshold(img_result, thresh=0.0, maxval=255.0, type=cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n    img_result = cv2.copyMakeBorder(img_result, top=10, bottom=10, left=10, right=10, borderType=cv2.BORDER_CONSTANT, value=(0,0,0))\n    plt.subplot(len(plate_imgs), 1, i+1)\n    plt.imshow(img_result, cmap='gray')\n    plt.axis('off')\n    plt.savefig('Car-Plates(Thresholding).png',bbox_inches = 'tight')\n    plt.show()\n    break\n","4d643ed7":"img = 255-img_result\nplt.imshow(img, 'gray')\nplt.axis('off')\nplt.savefig('Car-Plates(Negative).png',bbox_inches = 'tight')\nplt.show()\n#border is black because remember i set the background to be black","55e5e380":"def find_contours(dimensions, img) :\n\n    # Find all contours in the image\n    cntrs, _ = cv2.findContours(img.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n    # Retrieve potential dimensions\n    lower_width = dimensions[0]\n    upper_width = dimensions[1]\n    lower_height = dimensions[2]\n    upper_height = dimensions[3]\n    \n    # Check largest 5 or  15 contours for license plate or character respectively\n    cntrs = sorted(cntrs, key=cv2.contourArea, reverse=True)[:15]\n    \n    ii = cv2.imread('contour.jpg')\n    \n    x_cntr_list = []\n    target_contours = []\n    img_res = []\n    for cntr in cntrs :\n        # detects contour in binary image and returns the coordinates of rectangle enclosing it\n        intX, intY, intWidth, intHeight = cv2.boundingRect(cntr)\n        \n        # checking the dimensions of the contour to filter out the characters by contour's size\n        if intWidth > lower_width and intWidth < upper_width and intHeight > lower_height and intHeight < upper_height :\n            x_cntr_list.append(intX) #stores the x coordinate of the character's contour, to used later for indexing the contours\n\n            char_copy = np.zeros((44,24))\n            # extracting each character using the enclosing rectangle's coordinates.\n            char = img[intY:intY+intHeight, intX:intX+intWidth]\n            char = cv2.resize(char, (20, 40))\n            \n            cv2.rectangle(ii, (intX,intY), (intWidth+intX, intY+intHeight), (50,21,200), 2)\n            plt.imshow(ii, cmap='gray')\n            plt.axis('off')\n\n            # Make result formatted for classification: invert colors\n            char = cv2.subtract(255, char)\n\n            # Resize the image to 24x44 with black border\n            char_copy[2:42, 2:22] = char\n            char_copy[0:2, :] = 0\n            char_copy[:, 0:2] = 0\n            char_copy[42:44, :] = 0\n            char_copy[:, 22:24] = 0\n\n            img_res.append(char_copy) # List that stores the character's binary image (unsorted)\n            \n    # Return characters on ascending order with respect to the x-coordinate (most-left character first)\n            \n    plt.show()\n    # arbitrary function that stores sorted list of character indeces\n    indices = sorted(range(len(x_cntr_list)), key=lambda k: x_cntr_list[k])\n    img_res_copy = []\n    for idx in indices:\n        img_res_copy.append(img_res[idx])# stores character images according to their index\n    img_res = np.array(img_res_copy)\n\n    return img_res","b0d3e4b1":"# Find characters in the resulting images\ndef segment_characters(image) :\n\n    # Preprocess cropped license plate image\n    img_lp = cv2.resize(image, (333, 75))\n\n    LP_WIDTH = img_lp.shape[0]\n    LP_HEIGHT = img_lp.shape[1]\n\n    # Make borders white\n    img_lp[0:3,:] = 255\n    img_lp[:,0:3] = 255\n    img_lp[72:75,:] = 255\n    img_lp[:,330:333] = 255\n\n    # Estimations of character contours sizes of cropped license plates\n    dimensions = [LP_WIDTH\/6,\n                       LP_WIDTH\/2,\n                       LP_HEIGHT\/10,\n                       2*LP_HEIGHT\/3]\n    plt.imshow(img_lp, cmap='gray')\n    plt.axis('off')\n    plt.show()\n    cv2.imwrite('contour.jpg', img_lp)\n    \n\n    # Get contours within cropped license plate\n    char_list = find_contours(dimensions, img_lp)\n\n    return char_list","0b2658c4":"char = segment_characters(img)","6d255099":"plt.style.use('ggplot')","cc33db9a":"for i in range(len(char)):\n    plt.subplot(1, len(char), i+1)\n    plt.imshow(char[i], cmap='gray')\n    plt.axis('off')\nplt.savefig('Car-Plates-Char(Seperated).png',bbox_inches = 'tight')\n","3b37a1ab":"import tensorflow as tf\nfrom sklearn.metrics import f1_score \nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.models import Sequential\nfrom keras.models import Sequential,model_from_json\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, MaxPooling2D, Dropout, Conv2D\nimport tensorflow.keras.backend as K","bae2b672":"\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, width_shift_range=0.1, height_shift_range=0.1)\npath = '..\/input\/alpr-character-train\/data'\ntrain_generator = train_datagen.flow_from_directory(\n        path+'\/train',  # this is the target directory\n        target_size=(28,28),  # all images will be resized to 28x28\n        batch_size=1,\n        class_mode='sparse')\n\nvalidation_generator = train_datagen.flow_from_directory(\n        path+'\/val',  # this is the target directory\n        target_size=(28,28),  # all images will be resized to 28x28 batch_size=1,\n        class_mode='sparse')","36adc138":"def f1score(y, y_pred):\n    return f1_score(y, tf.math.argmax(y_pred, axis=1), average='micro') \n\ndef custom_f1score(y, y_pred):\n    return tf.py_function(f1score, (y, y_pred), tf.double)","46af52fb":"def store_keras_model(model, model_name):\n    model_json = model.to_json() # serialize model to JSON\n    with open(\".\/{}.json\".format(model_name), \"w\") as json_file:\n        json_file.write(model_json)\n    model.save_weights(\".\/{}.h5\".format(model_name)) # serialize weights to HDF5\n    print(\"Saved model to disk\")\n\ndef load_keras_model(model_name):\n    # Load json and create model\n    json_file = open('.\/{}.json'.format(model_name), 'r')\n    loaded_model_json = json_file.read()\n    json_file.close()\n    model = model_from_json(loaded_model_json)\n    # Load weights into new model\n    model.load_weights(\".\/{}.h5\".format(model_name))\n    return model","1488f23c":"K.clear_session()\nmodel = Sequential()\nmodel.add(Conv2D(16, (22,22), input_shape=(28, 28, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(32, (16,16), input_shape=(28, 28, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(64, (8,8), input_shape=(28, 28, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(128, (4,4), input_shape=(28, 28, 3), activation='relu', padding='same'))\n\nmodel.add(MaxPooling2D(pool_size=(4,4)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(36, activation='softmax'))\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer=optimizers.Adam(lr=0.0001), metrics=[custom_f1score])","46e4df25":"model.summary()","fb4e28af":"class stop_training_callback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_custom_f1score') > 0.99):\n              self.model.stop_training = True","c1311efd":"batch_size = 1\ncallbacks = [stop_training_callback()]\nmodel.fit_generator(\n      train_generator,\n      steps_per_epoch = train_generator.samples \/\/ batch_size,\n      validation_data = validation_generator, \n      epochs = 80, verbose=1, callbacks=callbacks)","65ba4bda":"store_keras_model(model, 'model_LicensePlate')","8d540016":"pre_trained_model = load_keras_model('model_LicensePlate')\nmodel = pre_trained_model ","4bfea088":"print(pre_trained_model.summary())","48869061":"def fix_dimension(img):\n    new_img = np.zeros((28,28,3))\n    for i in range(3):\n        new_img[:,:,i] = img \n    return new_img\n  \ndef show_results():\n    dic = {}\n    characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i,c in enumerate(characters):\n        dic[i] = c\n\n    output = []\n    for i,ch in enumerate(char): #iterating over the characters\n        img_ = cv2.resize(ch, (28,28), interpolation=cv2.INTER_AREA)\n        img = fix_dimension(img_)\n        img = img.reshape(1,28,28,3) #preparing image for the model\n        y_ = model.predict_classes(img)[0] #predicting the class\n        character = dic[y_] #\n        output.append(character) #storing the result in a list\n        \n    plate_number = ''.join(output)\n    \n    return plate_number\n\nprint(show_results())","175ad34b":"# Segmented characters and their predicted value.\nplt.figure(figsize=(10,6))\nfor i,ch in enumerate(char):\n    img = cv2.resize(ch, (28,28), interpolation=cv2.INTER_AREA)\n    plt.subplot(3,4,i+1)\n    plt.imshow(img,cmap='gray')\n    title_obj = plt.title(f'predicted: {show_results()[i]}')\n    plt.setp(title_obj, color='black')\n    plt.axis('off')\nplt.show()","7b848181":"img_1 = Image.fromarray(img_result)\ntxt = pytesseract.image_to_string(img_1)\nprint(\"Plate number is: \", txt)","0f13cd85":"char = segment_characters(img_result)","6cf7729b":"txt = ' '\nfor i in range(len(char)):\n    plt.subplot(1, len(char), i+1)\n    plt.imshow(char[i], cmap='gray')\n    img_1 = Image.fromarray(char[i])\n    img_1= img_1.convert(\"RGB\") \n    txt += pytesseract.image_to_string(img_1,lang ='eng',config='--psm 6')[0]\n    plt.axis('off')\nprint(txt)","8880753b":"# Separating the Characters in the Plate","a369f5b5":"# Maximize Contrast","f4d8b204":"Now, let us take the output for each character and see, how pytesseract does","5c849e77":"### ****My model can be improved drastically by increasing the amount of training model. Currently the alphanumeric dataset only has roughly 1000 files.****","230b951d":"It is still a bit faulty, compared to my model","87266d22":"# Imposing Boxes on Original Image of Car","edb9e307":"# Took These F1-Score from my other projects","cf752e05":"# Training and Validation Data Processing","1737291a":"# Convert Image to Grayscale","826efd05":"# A function to seperate the characters","faefa361":"# Libraries for Model Training","f1c2b62c":"# Adaptive Thresholding","5cf339f4":"Taking output directly from the img ","31a789fd":"# Training","ebe3ed2a":"# Finding Contours to locate plate","9bc524dd":"# Selecting Boxes by Arrangement of Contours\n","b56d318a":"> As one can see my trained model is better but only valid for English, while pytesseract works for quite many laguages","a81c408c":"# Predicting the Output and Showcasing the Result ","f47161ab":"# Selecting Boxes by Char Size","090f54e5":"### Took these too from my other project. It is to save and load a pretrained model. So, that we don't have to re train the model again and again","71c8dfc2":"# Thresholding Again to Find Chars","54db73a8":"### Checking if the model is the same","0bbb10c4":"# Segmented characters and their predicted value","c9862e38":"> Drawing Boxes on the characters of license plate(To see progress)","5f88e4c7":"# Model for Training","1676f742":"# Rotate Plate Images","b29b09d8":"## Loading the Pre-Trained Model(remove the Comments and run it)","3f22ced1":"# Seeing the output through Pytesseract","e8ded8bb":"> Separating the Characters in the Plate to identify them seperatly and using the model definied later for it","857e8cd1":"# Making a Condition for Ending the Training Quickly once the required accuracy is achieved","bf02d9f1":"> Making the Chars more distinctive","b8927132":"# Header Files for Pre Processing Image","c15ad30d":"# A function to find Contours again in the cropped license plate","98e75024":"# Data Preparation","7e290dfe":"# Read Input Image","d76fbf6d":"# Storing the Model, we just trained\n","ac539337":"# Taking Negative Again","74f59661":"# License Plate Detection\n"}}