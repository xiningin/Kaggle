{"cell_type":{"bf5c1c0f":"code","9f3ddbda":"code","42953c70":"code","e08375f5":"code","498c2b9b":"code","cea2a555":"code","7f069241":"code","b0709f33":"code","52339d0f":"code","91a5f50c":"code","0d261e18":"code","081f56e2":"code","ae6bdb60":"markdown","4b5e9c93":"markdown","98a1a64e":"markdown","43363dcf":"markdown","e804c591":"markdown","701d2002":"markdown","78584039":"markdown","e04ec218":"markdown","1728fb7c":"markdown","be612fda":"markdown","53fc8707":"markdown","0e12c7c2":"markdown","b547bfa0":"markdown"},"source":{"bf5c1c0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","9f3ddbda":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\ndf=pd.read_csv(\"\/kaggle\/input\/restaurant-scores-san-francisco\/Restaurant_Scores_-_LIVES_Standard.csv\")\n#Convert to DateTime\ndf[\"inspection_date\"]=pd.to_datetime(df[\"inspection_date\"])\n#Drop unnecessary columns\ndf = df.drop([\"Analysis Neighborhoods\",\"Current Supervisor Districts\",\"Current Police Districts\",\"SF Find Neighborhoods\",\"Neighborhoods\",\"business_phone_number\"],axis=1)\ndf.head()","42953c70":"#Consolidate Inspection Types\ndf=df.replace(to_replace =['Routine - Unscheduled', 'Reinspection\/Followup', 'Routine - Scheduled'], value='Routine')\ndf=df.replace(to_replace =['New Construction', 'New Ownership', 'New Ownership - Followup'], value='New')\ndf=df.replace(to_replace =['Structural Inspection', 'Non-inspection site visit', 'Foodborne Illness Investigation', 'Special Event', 'Multi-agency Investigation', 'Administrative or Document Review', 'Community Health Assessment'], value='Investigation')\ndf=df.replace(to_replace =['Complaint', 'Complaint Reinspection\/Followup'], value='Complaint')","e08375f5":"#Consolidate Risk Magnitude\ndf['risk_category'] = df['risk_category'].replace({'Low Risk':1, 'Moderate Risk':2, 'High Risk':3}) ","498c2b9b":"#Consolidate Types of Violation\nhygiene_v = dict.fromkeys(['Unclean or degraded floors walls or ceilings', 'Wiping cloths not clean or properly stored or inadequate sanitizer', 'Moderate risk vermin infestation', 'Unclean nonfood contact surfaces', 'Foods not protected from contamination', 'Unclean hands or improper use of gloves', 'High risk vermin infestation', 'Inadequately cleaned or sanitized food contact surfaces', 'Low risk vermin infestation', 'Unclean or unsanitary food contact surfaces', 'Employee eating or smoking', 'Contaminated or adulterated food', 'Unsanitary employee garments hair or nails', 'Other low risk violation', 'Unclean unmaintained or improperly constructed toilet facilities', 'Other moderate risk violation', 'Sewage or wastewater contamination', 'Food in poor condition', 'Other high risk violation', 'Reservice of previously served foods', 'Discharge from employee nose mouth or eye', 'Improperly washed fruits and vegetables'], 'Hygiene')\ninfralack_v = dict.fromkeys(['Inadequate and inaccessible handwashing facilities', 'Inadequate or unsanitary refuse containers or area or no garbage service', 'No thermometers or uncalibrated thermometers', 'Improper or defective plumbing', 'No hot water or running water', 'Inadequate ventilation or lighting', 'Inadequate warewashing facilities or equipment', 'Inadequate sewage or wastewater disposal', 'Insufficient hot water or running water',\"Mobile food facility with unapproved operating conditions\",\"No restroom facility within 200 feet of mobile food facility\"],'Lack Infrastructure')\nlegal_v = dict.fromkeys(['Food safety certificate or food handler card not available', 'Unapproved or unmaintained equipment or utensils', 'Permit license or inspection report not posted', 'No plan review or Building Permit', 'Unapproved  living quarters in food facility', 'Unpermitted food facility', 'Unapproved food source', 'Mobile food facility stored in unapproved location', 'Mobile food facility not operating with an approved commissary',\"Improperly displayed mobile food permit or signage\"],'Legal')\nnoncompliance_v = dict.fromkeys(['High risk food holding temperature', 'Inadequate food safety knowledge or lack of certified food safety manager', 'Improper storage of equipment utensils or linens', 'Improper food storage', 'Improper thawing methods', 'Moderate risk food holding temperature', 'Improper cooling methods', 'Improper storage use or identification of toxic substances', 'Improper food labeling or menu misrepresentation', 'Non service animal', 'Noncompliance with shell fish tags or display', 'Noncompliance with HAACP plan or variance', 'Inadequate HACCP plan record keeping', 'Inadequate dressing rooms or improper storage of personal items', 'Improper reheating of food', 'Inadequate procedures or records for time as a public health control', 'Worker safety hazards', 'No person in charge of food facility', 'Improper cooking time or temperatures', 'Unauthorized or unsafe use of time as a public health control measure', 'Consumer advisory not provided for raw or undercooked foods', 'Noncompliance with Gulf Coast oyster regulation', 'Noncompliance with Cottage Food Operation'],'Noncompliance')\ndf = df.replace(hygiene_v)\ndf = df.replace(infralack_v)\ndf = df.replace(legal_v)\ndf = df.replace(noncompliance_v)","cea2a555":"def label_function(val):\n    return f'{val:.0f}%'\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 7))\ndf.groupby(\"inspection_type\").size().plot(kind=\"pie\",autopct=label_function,textprops={\"fontsize\":15},colors=[\"tomato\",\"gold\",\"skyblue\",\"violet\"],ax=ax1)\naxh1=ax1.set_ylabel(\"         Types of Inspection Done\",size=20,loc=\"bottom\")\ndf.groupby(\"violation_description\").size().plot(kind=\"pie\",autopct=label_function,textprops={\"fontsize\":15},ax=ax2)\naxh2=ax2.set_ylabel(\"Major Types of Violations by Restaurants\",size=20,loc=\"bottom\")\naxh1.set_rotation(0)\naxh2.set_rotation(0)","7f069241":"fig, ax = plt.subplots(ncols=1, figsize=(15, 5))\ndf.groupby(\"risk_category\").size().plot(kind=\"pie\",autopct=label_function,textprops={\"fontsize\":15},colors=[\"tomato\",\"gold\",\"skyblue\"],labels=[\"High\",\"Medium\",\"Low\"],ax=ax)\naxh=ax.set_ylabel(\"Restaurant Overall Health Risk Category\",size=15,loc=\"bottom\")\naxh.set_rotation(0)","b0709f33":"newdf= df[df['business_latitude'] != 0]\nnewdf= newdf[newdf['business_longitude'] != 0]","52339d0f":"ax = sns.jointplot(x=\"business_latitude\", y=\"business_longitude\",data=newdf, size=10,hue=\"inspection_type\");\nsns.despine\nax.fig.suptitle(\"Location Wise Inspection Map\",fontsize=20)\nplt.xlabel('Longitude', fontsize=12)\nplt.ylabel('Latitude', fontsize=12)\nplt.show()","91a5f50c":"ax = sns.jointplot(x=\"business_latitude\", y=\"business_longitude\",data=newdf, size=10,hue=\"violation_description\");\nsns.despine\nax.fig.suptitle(\"Location Wise Violation Map\",fontsize=20)\nplt.xlabel('Longitude', fontsize=12)\nplt.ylabel('Latitude', fontsize=12)\nplt.show()","0d261e18":"ax = sns.jointplot(x=\"business_latitude\", y=\"business_longitude\",data=newdf, size=10,hue=\"risk_category\");\nsns.despine\nax.fig.suptitle(\"Location Wise Health Risk Map\",fontsize=20)\nplt.xlabel('Longitude', fontsize=12)\nplt.ylabel('Latitude', fontsize=12)\nplt.show()","081f56e2":"ax=df.plot(x=\"inspection_date\",y=\"inspection_score\",kind=\"scatter\",figsize=(20,7),c=\"risk_category\")","ae6bdb60":"### Thank you so much for viewing.","4b5e9c93":"#### **Violation**","98a1a64e":"# 2. Lets visualize Location of Restaurants in San Francisco\n### Will first clear outliers and then use JointPlot for better understanding","43363dcf":"### **From the dataset, we have consolidated below fields:** \n#### * **Inspection Types**   have been categorized to Routine, Investigation, Complaint, New\n#### * **Violation Types**    have been categorized to Hygiene, Lack Infrastructure, Legal, Non Compliance\n#### * **Risk Types**         have been categorized to High Risk, Medium Risk, Low Risk\n\n-------------------------------------------------------------------------------------------------------------------------------\n### Demostration:","e804c591":"# Preparation and Analysis of Data","701d2002":"#### **Health Risk**","78584039":"# 1. Let's Observe the Inspection Details","e04ec218":"\n\n### From above demostration it is clear that majority of *inspections are done routinely*. And most common type of *violation done by restaurant owners is hygiene*.","1728fb7c":"# Source of Dataset\n### [Restaurant Scores - LIVES Standard](https:\/\/catalog.data.gov\/dataset\/restaurant-scores-lives-standard)","be612fda":"### Now that our data is ready,","53fc8707":"#### **Inspection**","0e12c7c2":"# 3. Time Series of Inspection Score","b547bfa0":"### **Let's view a sample portion of the dataset**"}}