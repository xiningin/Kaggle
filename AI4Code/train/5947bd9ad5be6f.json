{"cell_type":{"f02dacae":"code","8395c6d9":"code","be8836ee":"code","d18e319a":"code","7517b9f9":"code","33535e89":"code","1b8c1ad1":"code","75fbcc69":"code","3d670a13":"code","4f4c96b1":"code","6c5b8de9":"markdown","97141e8e":"markdown","e5235c74":"markdown","377f8a85":"markdown","f3bd7f21":"markdown"},"source":{"f02dacae":"!pip install ngboost","8395c6d9":"# basic libraries\nimport pandas as pd\nimport numpy as np\nimport numpy.random as rd\nimport gc\nimport multiprocessing as mp\nimport os\nimport sys\nimport pickle\nfrom glob import glob\nimport math\nfrom datetime import datetime as dt\nfrom pathlib import Path\nimport scipy.stats as st\nimport re\nimport shutil\nfrom tqdm import tqdm_notebook as tqdm\nimport datetime\nts_conv = np.vectorize(datetime.datetime.fromtimestamp) # \u79d2ut(10\u6841) \u21d2 \u65e5\u4ed8\n\n# \u30b0\u30e9\u30d5\u63cf\u753b\u7cfb\nimport matplotlib\nfrom matplotlib import font_manager\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib import rc\n\nfrom matplotlib import animation as ani\nfrom IPython.display import Image\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\n#rc('text', usetex=True)\nfrom IPython.display import display # Allows the use of display() for DataFrames\nimport seaborn as sns\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\nsns.set_style(\"whitegrid\", {'grid.linestyle': '--'})\nred = sns.xkcd_rgb[\"light red\"]\ngreen = sns.xkcd_rgb[\"medium green\"]\nblue = sns.xkcd_rgb[\"denim blue\"]\n\n# pandas formatting\npd.set_option(\"display.max_colwidth\", 100)\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\npd.options.display.float_format = '{:,.5f}'.format\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'","be8836ee":"# ngboost\nfrom ngboost.ngboost import NGBoost\nfrom ngboost.learners import default_tree_learner\nfrom ngboost.scores import MLE\nfrom ngboost.distns import Normal, LogNormal\n\n# skleran\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# lightgbm\nimport lightgbm as lgb","d18e319a":"X, y = load_boston(True)\nrd.seed(71)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2)","7517b9f9":"%%time\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_valid = lgb.Dataset(X_valid, y_valid, reference=lgb_train)\nmodel = lgb.train({'objective': 'regression', \n           'metric': \"mse\",\n           'learning_rate': 0.01,\n           'seed': 71},\n            lgb_train, \n            num_boost_round=99999,\n            valid_sets=[lgb_valid], \n            early_stopping_rounds=100, \n            verbose_eval=500)\n\ny_pred_lgb = model.predict(data=X_valid)","33535e89":"%%time\nrd.seed(71)\nngb = NGBoost(Base=default_tree_learner, Dist=Normal, #Normal, LogNormal\n              Score=MLE(), natural_gradient=True, verbose=False, )\nngb.fit(X_train, y_train, X_val=X_valid, Y_val=y_valid)\n\ny_preds = ngb.predict(X_valid)\ny_dists = ngb.pred_dist(X_valid)\n\n\n# test Mean Squared Error\ntest_MSE = mean_squared_error(y_preds, y_valid)\nprint('ngb Test MSE', test_MSE)\n\n#test Negative Log Likelihood\ntest_NLL = -y_dists.logpdf(y_valid.flatten()).mean()\nprint('ngb Test NLL', test_NLL)","1b8c1ad1":"offset = np.ptp(y_preds)*0.1\ny_range = np.linspace(min(y_valid)-offset, max(y_valid)+offset, 200).reshape((-1, 1))\ndist_values = y_dists.pdf(y_range).transpose()\n\nplt.figure(figsize=(25, 120))\nfor idx in tqdm(np.arange(X_valid.shape[0])):\n    \n    plt.subplot(35, 3, idx+1)\n    plt.plot(y_range, dist_values[idx])\n    \n    plt.vlines(y_preds[idx], 0, max(dist_values[idx]), \"r\", label=\"ngb pred\")\n    plt.vlines(y_pred_lgb[idx], 0, max(dist_values[idx]), \"purple\", label=\"lgb pred\")\n    plt.vlines(y_valid[idx], 0, max(dist_values[idx]), \"pink\", label=\"ground truth\")\n    plt.legend(loc=\"best\")\n    plt.title(f\"idx: {idx}\")\n    plt.xlim(y_range[0], y_range[-1])\nplt.tight_layout()\nplt.show()","75fbcc69":"plt.figure(figsize=(8,6))\nplt.scatter(x=y_preds, y=y_pred_lgb, s=20)\nplt.plot([8,50], [8,50], color=\"gray\", ls=\"--\")\nplt.xlabel(\"NGBoost\")\nplt.ylabel(\"LightGBM\")\nplt.title(\"NGBoost vs LightGBM\")\nplt.show()","3d670a13":"plt.figure(figsize=(8,6))\nplt.scatter(y=y_preds, x=y_valid, s=20)\nplt.plot([8,50], [8,50], color=\"gray\", ls=\"--\")\nplt.ylabel(\"NGBoost\")\nplt.xlabel(\"Ground truth\")\nplt.title(\"NGBoost vs Ground truth\")\nplt.show()","4f4c96b1":"plt.figure(figsize=(8,6))\nplt.scatter(y=y_pred_lgb, x=y_valid, s=20)\nplt.plot([8,50], [8,50], color=\"gray\", ls=\"--\")\nplt.ylabel(\"LightGBM\")\nplt.xlabel(\"Ground truth\")\nplt.title(\"LightGBM vs Ground truth\")\nplt.show()","6c5b8de9":"# Draw result graph\n**point**  \n* NGBoost\u306f\u5206\u5e03\u3092\u8868\u793a\u3067\u304d\u308b\uff08\u4eca\u56de\u306f\u6b63\u898f\u5206\u5e03\uff09\n* \u30b0\u30e9\u30d5\u3092\u76ee\u8996\u3067\u898b\u305f\u611f\u60f3\u3068\u3057\u3066\u306fLightGBM\u304cgt\u306b\u8fd1\u3044\u3082\u306e\u3082\u3042\u308c\u3070\u3001NGBoost\u304cgt\u306b\u8fd1\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308a\u3001\u4e94\u5206\u4e94\u5206\uff1f","97141e8e":"# NGBoost \u3084\u3063\u3066\u307f\u305f\u30e1\u30e2\n\n* model\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u304d\u3061\u3093\u3068\u3084\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u306a\u306e\u3067\u3069\u3061\u3089\u304c\u6027\u80fd\u304c\u3044\u3044\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u3048\u3044\u3084\u3063\u3068\u4f7f\u3063\u305f\u611f\u89e6\u3067\u306f\u3053\u308c\u304f\u3089\u3044\u306e\u30c7\u30fc\u30bf\u306a\u3089\u905c\u8272\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n* \u5206\u5e03\u304c\u7b97\u51fa\u3067\u304d\u308b\u306e\u306f\u4f7f\u3044\u3069\u3053\u308d\u304c\u3042\u308b\u304b\u3082\u3067\u3059\u306d\u3002\n","e5235c74":"# NGBoost model","377f8a85":"## Data preparation","f3bd7f21":"# LightGBM model"}}