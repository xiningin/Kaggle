{"cell_type":{"abcb1a2f":"code","9c9be8c7":"code","6f6e9d1a":"code","15fd1be2":"code","6fac4218":"code","ef299481":"code","1c7b63d2":"code","01fe5edd":"code","16a1a5d1":"code","55d0f360":"code","10f13db3":"code","4992df07":"code","5a24ffb6":"code","a6a52636":"code","bea970e0":"code","f3332d72":"code","1217e0a3":"code","38ffc3d6":"markdown","984567a1":"markdown","f6eabaca":"markdown","58e9dbd1":"markdown","59b6c249":"markdown","f4dcc5c2":"markdown","c228167d":"markdown","d16c99b6":"markdown","27a82b09":"markdown","796e1021":"markdown","eb782452":"markdown","88ae6c55":"markdown","3e880a29":"markdown","5503be26":"markdown"},"source":{"abcb1a2f":"import numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec # Alignments \n\nimport seaborn as sns # theme & dataset\nprint(f\"Matplotlib Version : {mpl.__version__}\")\nprint(f\"Seaborn Version : {sns.__version__}\")\n\n# for visualization samples\nimport pandas as pd\n\nnetflix_titles = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","9c9be8c7":"plt.rcParams['figure.dpi'] = 200","6f6e9d1a":"fig, ax = plt.subplots(2, 3, figsize=(8, 5))\nplt.show()","15fd1be2":"fig, ax = plt.subplots(2, 3, figsize=(16, 10))\nax[0][0].set_title('this 1')\nax[0][1].set_title('this 2')\nax[0][2].set_title('this 3')\nax[1][0].set_title('this 4')\nax[1][1].set_title('this 5')\nax[1][2].set_title('this 6')\nplt.show()","6fac4218":"fig, ax = plt.subplots(2, 3, figsize=(8, 5))\nfor i,iax in np.ndenumerate(ax.flatten()):\n    iax.set_title(f'this {i[0]}')\nplt.show()","ef299481":"fig, ax = plt.subplots(2, 3, figsize=(8, 5))\nfor i,iax in np.ndenumerate(ax.flatten()):\n    iax.set_title(f'this {i[0]}')\nplt.tight_layout()\nplt.show()","1c7b63d2":"fig = plt.figure(figsize=(8, 5)) # initialize figure\n\nax = [None for _ in range(6)] # list to save many ax for setting parameter in each\n\ntotal_size=(3,4)\n\nax[0] = plt.subplot2grid(total_size, (0,0), colspan=4)\nax[1] = plt.subplot2grid(total_size, (1,0), colspan=1)\nax[2] = plt.subplot2grid(total_size, (1,1), colspan=1)\nax[3] = plt.subplot2grid(total_size, (1,2), colspan=1)\nax[4] = plt.subplot2grid(total_size, (1,3), colspan=1,rowspan=2)\nax[5] = plt.subplot2grid(total_size, (2,0), colspan=3)\n\n\nfor i,iax in np.ndenumerate(ax): \n    iax.set_title(f'ax[{i[0]}]') # make ax title for distinguish:)\n    iax.set_xticks([]) # to remove x ticks\n    iax.set_yticks([]) # to remove y ticks\n    \nfig.tight_layout()\nplt.show()\n","01fe5edd":"fig = plt.figure(figsize=(8, 5))\n\nax = [None for _ in range(3)]\n\n\nax[0] = fig.add_axes([0.1,0.1,0.8,0.4]) # x, y, dx, dy\nax[1] = fig.add_axes([0.15,0.6,0.25,0.6])\nax[2] = fig.add_axes([0.5,0.6,0.4,0.3])\n\nfor ix in range(3):\n    ax[ix].set_title('ax[{}]'.format(ix))\n    ax[ix].set_xticks([])\n    ax[ix].set_yticks([])\n\nplt.show()","16a1a5d1":"gradient = np.linspace(0, 1, 256)\ngradient = np.vstack((gradient, gradient))\n\n\ndef plot_color_gradients(cmap_category, cmap_list):\n    # Create figure and adjust figure height to number of colormaps\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows-1)*0.1)*0.22\n    fig, axes = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1-.35\/figh, bottom=.15\/figh, left=0.2, right=0.99)\n\n    axes[0].set_title(cmap_category + ' colormaps', fontsize=14)\n\n    for ax, name in zip(axes, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))\n        ax.text(-.01, .5, name, va='center', ha='right', fontsize=10,\n                transform=ax.transAxes)\n\n    # Turn off *all* ticks & spines, not just the ones with colormaps.\n    for ax in axes:\n        ax.set_axis_off()","55d0f360":"pus=('Perceptually Uniform Sequential', [\n            'viridis', 'plasma', 'inferno', 'magma', 'cividis'])\nplot_color_gradients(pus[0], pus[1])","10f13db3":"sq=('Sequential', [\n            'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',\n            'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',\n            'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'])\nplot_color_gradients(sq[0], sq[1])","4992df07":"sq2=('Sequential (2)', [\n            'binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',\n            'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',\n            'hot', 'afmhot', 'gist_heat', 'copper'])\nplot_color_gradients(sq2[0], sq2[1])","5a24ffb6":"dv=('Diverging', [\n            'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',\n            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])\nplot_color_gradients(dv[0], dv[1])","a6a52636":"cyc=('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])\nplot_color_gradients(cyc[0],cyc[1])","bea970e0":"ql=('Qualitative', [\n            'Pastel1', 'Pastel2', 'Paired', 'Accent',\n            'Dark2', 'Set1', 'Set2', 'Set3',\n            'tab10', 'tab20', 'tab20b', 'tab20c'])\nplot_color_gradients(ql[0],ql[1])","f3332d72":"mis=('Miscellaneous', [\n            'flag', 'prism', 'ocean', 'gist_earth', 'terrain', 'gist_stern',\n            'gnuplot', 'gnuplot2', 'CMRmap', 'cubehelix', 'brg',\n            'gist_rainbow', 'rainbow', 'jet', 'nipy_spectral', 'gist_ncar'])\nplot_color_gradients(mis[0],mis[1])","1217e0a3":"4. ","38ffc3d6":"# 1. Alignments\nyou can show multiple plots with custom alignment\n* subplots\n* subplot2grid\n* add_axes\n* gridspec, add_subplot","984567a1":"**perceptually uniform sequential**   \nit is used often for signal data","f6eabaca":"**Quantative**   \ncategorical variable","58e9dbd1":"`ax.flatten()` converts 2d ax array into 1d ax array   \nHowever graph looks frustrating   \nyou can solve this porblem by `plt.tight_layout()`","59b6c249":"# 0. setting\nset the dpi for matlab  \nmatlab has row dpi set by default, so setting this up is nice to you ","f4dcc5c2":"#### ","c228167d":"and add some tiltle each plots","d16c99b6":"**Diverging**   \ncolormap for median value   \nit is used for checking bias","27a82b09":"but this code looks dizzy   \nin compact way,","796e1021":"perfect!!   \nif you want custom size subplot(not same size),  \n`plt.subplot2grid()` can do this ","eb782452":"# 3. etc\n**span** \n* axvspan : vertical span\n* axhspan : horizontal span","88ae6c55":"**this notebook is visualizing tutorial for noob**  \n(or some other people)  \nit is inspired by this [notebook](https:\/\/www.kaggle.com\/subinium\/simple-matplotlib-visualization-tips)\nwe will use matlab and seaborn in this notebook","3e880a29":"# 2. Colormap\n\n* diverging\n* qualitative\n* sequential","5503be26":"if you want to more custom size,you can programmingly use `plt.add_axes()`"}}