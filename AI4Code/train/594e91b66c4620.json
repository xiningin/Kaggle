{"cell_type":{"4683d9f1":"code","68d9b91a":"code","feec95ae":"code","96540a66":"code","ca639e05":"code","fd982aa8":"code","b5ccab5c":"code","fbcb2cad":"code","36274524":"code","7ca138a4":"code","f3512be4":"code","a8ccffb6":"code","d70af25e":"code","761a4c28":"code","5fc1f712":"code","8744a898":"markdown","52c7af3f":"markdown","9f9814fd":"markdown","4e98848e":"markdown","ca553b14":"markdown","5882b188":"markdown","6786f1e7":"markdown","c6d766b9":"markdown","ce4350ca":"markdown","ab6c9896":"markdown","366193f6":"markdown","b83e804a":"markdown","326d65ce":"markdown","df25e7f6":"markdown","2dff1a6b":"markdown","02381e28":"markdown","f87cb739":"markdown","5fa5ff02":"markdown","fffbdc76":"markdown","fb071554":"markdown","e421f9d0":"markdown","5bf39ff1":"markdown","42dec7df":"markdown","e19ef686":"markdown"},"source":{"4683d9f1":"%config InlineBackend.figure_formats = ['svg']\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport numpy as np\nimport pandas as pd\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom plotly.subplots import make_subplots\nfrom statsmodels.graphics.tsaplots import plot_acf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom tqdm import tqdm\nwarnings.filterwarnings(\"ignore\")\n\n\n","68d9b91a":"sales_path='..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv'\nprice_path='..\/input\/m5-forecasting-accuracy\/sell_prices.csv'\ncalendar_path='..\/input\/m5-forecasting-accuracy\/calendar.csv'","feec95ae":"def reduce_usage_mem(df):\n    for col in  df.columns:\n        if str(df[col].dtype)=='int64':\n            df[col]=df[col].astype('int16')\n        if str(df[col].dtype)=='float64':\n            df[col]=df[col].astype('float16')\n    return df","96540a66":"sales_df=reduce_usage_mem(pd.read_csv(sales_path))\nsales_df.head()","ca639e05":"calendar_df=reduce_usage_mem(pd.read_csv(calendar_path)[:1941])\ncalendar_df","fd982aa8":"price_df=reduce_usage_mem(pd.read_csv(price_path))\nprice_df.head()","b5ccab5c":"sales_ca=sales_df[sales_df['state_id']=='CA'].loc[:,'d_1':].sum(axis=0)\nsales_wi=sales_df[sales_df['state_id']=='WI'].loc[:,'d_1':].sum(axis=0)\nsales_tx=sales_df[sales_df['state_id']=='TX'].loc[:,'d_1':].sum(axis=0)\n\nstate_sales_df=pd.DataFrame({'sales_ca':list(sales_ca),\n                             'sales_wi':list(sales_wi),\n                             'sales_tx':list(sales_tx),\n                             'date':list(calendar_df['date']),\n                             'weekday':calendar_df['weekday'],\n                              'wday':calendar_df['wday'],\n                              'month':calendar_df['month'],\n                             'event_type_1':calendar_df['event_type_1'],\n                             'event_type_2':calendar_df['event_type_2']})\n\n\nfig=go.Figure()\nfig.add_trace(go.Scatter(y=state_sales_df['sales_ca'],x=state_sales_df['date'],mode='lines',name='California(CA)'))\nfig.add_trace(go.Scatter(y=state_sales_df['sales_wi'],x=state_sales_df['date'],mode='lines',name='Wisconsin(WI)'))\nfig.add_trace(go.Scatter(y=state_sales_df['sales_tx'],x=state_sales_df['date'],mode='lines',name='Texas(TX)'))\nfig.update_layout(title='Aggregate sales per state',\n                  xaxis_title='year',\n                  yaxis_title='sales')\n\n","fbcb2cad":"state_ca_trend=seasonal_decompose(state_sales_df['sales_ca'],freq=180).trend\nstate_wi_trend=seasonal_decompose(state_sales_df['sales_wi'],freq=180).trend\nstate_tx_trend=seasonal_decompose(state_sales_df['sales_tx'],freq=180).trend\n\n\nfig=go.Figure()\nfig.add_trace(go.Scatter(y=state_ca_trend,x=state_sales_df['date'],mode='lines',name='California(CA)'))\nfig.add_trace(go.Scatter(y=state_wi_trend,x=state_sales_df['date'],mode='lines',name='Wisconsin(WI)'))\nfig.add_trace(go.Scatter(y=state_tx_trend,x=state_sales_df['date'],mode='lines',name='Texas(TX)'))\nfig.update_layout(title='Sales trend per state',\n                  xaxis_title='year',\n                  yaxis_title='sales')","36274524":"from tqdm import tqdm\ndf=sales_df.iloc[:,6:]\nx=set(np.array(df).flatten())\nfull_sales_array=np.array(df).flatten()\ny=[]\n\nfor i in tqdm(x):\n    y.append(np.count_nonzero(df==i)\/len(full_sales_array))\n       \nfig=go.Figure()\nfig.add_trace(go.Bar(x=[np.count_nonzero(df==0)],y=['zero unit sales'],orientation='h',name=np.count_nonzero(df==0)))\nfig.add_trace(go.Bar(x=[np.count_nonzero(df)],y=['nonzero unit sales'],orientation='h',name=np.count_nonzero(df)))\nfig.update_layout(width=700,\n                  height=300,\n                  xaxis_title='Count')\n\nfig1=px.bar(x=list(x),y=y,title='Probability density of unit sales figures')\nfig1.update_layout(xaxis_title='unit sales figures',\n                  yaxis_title='probability')\n\nfig.show()\nfig1.show()","7ca138a4":"sales_states_weekly=state_sales_df.groupby(by=['weekday','wday'],\n                                           as_index=False)['sales_ca',\n                                                           'sales_wi',\n                                                           'sales_tx'].agg('mean')\n\nfig=make_subplots(rows=1,cols=3)\nfig.append_trace(go.Bar(x=sales_states_weekly['weekday'],y=sales_states_weekly['sales_ca'],name='California(CA)'),row=1,col=1)\nfig.append_trace(go.Bar(x=sales_states_weekly['weekday'],y=sales_states_weekly['sales_wi'],name='Wisconsin(WI)'),row=1,col=2)\nfig.append_trace(go.Bar(x=sales_states_weekly['weekday'],y=sales_states_weekly['sales_tx'],name='Texas(TX)'),row=1,col=3)\nfig.update_layout(\n                  title='Walmart weekly sales',\n                  xaxis_title='weekday',\n                  yaxis_title='Average sale')","f3512be4":"sales_states_monthly=state_sales_df.groupby(by=['month'],\n                                           as_index=False\n                                           )['sales_ca',\n                                             'sales_wi',\n                                             'sales_tx'].agg('mean')\n\nsales_states_monthly['month_name']=['Jan','Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec']\nfig=make_subplots(rows=1,cols=3)\nfig.append_trace(go.Line(x=sales_states_monthly['month_name'],y=sales_states_monthly['sales_ca'],name='California(CA)'),row=1,col=1)\nfig.append_trace(go.Line(x=sales_states_monthly['month_name'],y=sales_states_monthly['sales_wi'],name='Wisconsin(WI)'),row=1,col=2)\nfig.append_trace(go.Line(x=sales_states_monthly['month_name'],y=sales_states_monthly['sales_tx'],name='Texas(TX)'),row=1,col=3)\nfig.update_layout(\n                  title='Walmart monthly sales',\n                  xaxis_title='month',\n                  yaxis_title='Average sale')","a8ccffb6":"walmart_sales=sales_df.loc[:,'d_1':].sum(axis=0)\nplot_acf(walmart_sales,lags=60,title='Autocorrelation sales')\nplt.ylabel('correlation')\nplt.xlabel('time lag')\nplt.show()","d70af25e":"total_sales_hobbies=sales_df[sales_df['cat_id']=='HOBBIES'].loc[:,'d_1':].sum(axis=0)\ntotal_sales_household=sales_df[sales_df['cat_id']=='HOUSEHOLD'].loc[:,'d_1':].sum(axis=0)\ntotal_sales_foods=sales_df[sales_df['cat_id']=='FOODS'].loc[:,'d_1':].sum(axis=0)\n\ncategory_sales_df=pd.DataFrame({'sales_foods':list(total_sales_foods),\n                             'sales_hobbies':list(total_sales_hobbies),\n                             'sales_household':list(total_sales_household),\n                             'date':list(calendar_df['date']),\n                              'event_type_1':calendar_df['event_type_1'],\n                             'event_type_2':calendar_df['event_type_2']},\n                               )\nno_event_sales_category=category_sales_df.iloc[:,:3][category_sales_df['event_type_1'].isna()].mean()\ncat_sales_on_events=category_sales_df.groupby(['event_type_1'],as_index=False)['sales_foods',\n                                                           'sales_hobbies',\n                                                           'sales_household'].agg('mean')\n\ncat_sales_on_events['sales_foods_diff']=cat_sales_on_events['sales_foods']-no_event_sales_category[0]\ncat_sales_on_events['sales_hobbies_diff']=cat_sales_on_events['sales_hobbies']-no_event_sales_category[1]\ncat_sales_on_events['sales_household_diff']=cat_sales_on_events['sales_household']-no_event_sales_category[2]\nfig=go.Figure()\nfig.add_trace(go.Bar(x=cat_sales_on_events['sales_foods_diff'],y=cat_sales_on_events['event_type_1'],orientation='h',name='foods'))\nfig.add_trace(go.Bar(x=cat_sales_on_events['sales_hobbies_diff'],y=cat_sales_on_events['event_type_1'],orientation='h',name='hobbies'))\nfig.add_trace(go.Bar(x=cat_sales_on_events['sales_household_diff'],y=cat_sales_on_events['event_type_1'],orientation='h',name='household'))\nfig.update_layout(width=700,\n                  height=500,\n                  title='Effect of events on sales per category',\n                 yaxis_title='Effect of events on sales per category',\n                 xaxis_title='Deviation from average sales')","761a4c28":"state_cat_sales=pd.melt(sales_df.groupby(['state_id','cat_id'],as_index=False,axis=0).agg('mean'),\n                        id_vars=['state_id','cat_id'],var_name='d',value_name='sales')\n\nstate_cat_sales=state_cat_sales.merge(calendar_df[['snap_CA','snap_TX','snap_WI','d']],on='d')\n\nsnap_CA_sales=state_cat_sales[state_cat_sales['state_id']=='CA'].groupby(['cat_id','snap_CA'],as_index=False).agg('mean')\nsnap_WI_sales=state_cat_sales[state_cat_sales['state_id']=='WI'].groupby(['cat_id','snap_WI'],as_index=False).agg('mean')\nsnap_TX_sales=state_cat_sales[state_cat_sales['state_id']=='TX'].groupby(['cat_id','snap_TX'],as_index=False).agg('mean')\n\nfig,axes=plt.subplots(1,3,figsize=(12,5))\nsnap_CA_sales.pivot(\"cat_id\", \"snap_CA\", \"sales\").plot(kind='bar',ax=axes[0],ylabel='avg sales')\nsnap_WI_sales.pivot(\"cat_id\", \"snap_WI\", \"sales\").plot(kind='bar',ax=axes[1])\nsnap_TX_sales.pivot(\"cat_id\", \"snap_TX\", \"sales\").plot(kind='bar',ax=axes[2])\n","5fc1f712":"price_df_1=price_df.merge(sales_df[['item_id','cat_id','dept_id']].drop_duplicates(),on='item_id').reset_index(drop=True)\ndel price_df\nprice_df_final=price_df_1.groupby(['wm_yr_wk','cat_id','dept_id'],as_index=False).agg('mean')\ndel price_df_1\nprice_df_final=price_df_final[price_df_final['wm_yr_wk']<=11613]\n\n\nsales_df_1=sales_df.melt(id_vars=['id','item_id','dept_id','cat_id','store_id','state_id'],\n              var_name='d',value_name='sales')\ndel sales_df\nsales_df_2=sales_df_1.merge(calendar_df[['d','date','wm_yr_wk']].drop_duplicates(),on='d')\ndel sales_df_1\nsales_df_final=sales_df_2.groupby(['wm_yr_wk','cat_id','dept_id'],as_index=False).agg('mean')\n\n\nprice_df_final['sales']=sales_df_final['sales']\n\nfor dept,row in zip(price_df_final['dept_id'].unique(),range(1,8)):\n        fig=make_subplots(rows=1,cols=2)\n        sales_trend=seasonal_decompose(price_df_final[price_df_final['dept_id']==dept]['sales'],freq=30).trend\n        price_trend=seasonal_decompose(price_df_final[price_df_final['dept_id']==dept]['sell_price'],freq=30).trend\n        \n        fig.append_trace(go.Line(x=price_df_final[price_df_final['dept_id']==dept]['wm_yr_wk']\n                ,y=sales_trend,name=dept+' weekly average sales trend'),row=1,col=1)\n        \n        fig.append_trace(go.Line(x=price_df_final[price_df_final['dept_id']==dept]['wm_yr_wk']\n                ,y=price_trend,name=dept+' weekly average sell price trend'),row=1,col=2)\n        \n        fig.update_layout(xaxis_title='week_id')\n        fig.show()  ","8744a898":"### Aggregate weekly average sales per state\n","52c7af3f":"### Effect of events on sales per category","9f9814fd":"**Key finding(s):**\n\n* Number of zero unit sales figures is more than double than that of non zero ones.\n* This seems to be a case of Tweedie distribution.","4e98848e":"### Zero vs non zero elements in sales","ca553b14":"<h2>Evaluation Metics used: <\/h2>\n\n**r2_score** to evaluate the performance of our model.\n\n**Why?**\n\n* **r2_score** evaluates the performance of a model by calculating the percentage of the differnce between **variance around mean of data** and **variance around the model fitted to the data** which is easy to calculate and gives a good idea about the performance of model. \n\n* If r2_score is 0.60, it means that the **fitted model** has 60% less variance than the **mean variance**, which is a good fit.\n\n\n**MAPE(Mean Absolute Percentage Error)** to evaluate our predictions.\n\n**Why?**\n* Unlike other evaluation metrics like MAE and RMSE, MAPE is scale independent i.e it does not depend on the range of values.\n\n**MSE(mean_squared_error)** can be used as a loss function.\n\n**Why?**\n* Unlike MAE and MAPE, **MSE** has a non linear gradient which results in slowing down the weight updates as the model approaches close to 0.  ","5882b188":"<h4>Key finding(s)<\/h4>\n\n\n\n*   Walmart stores in both **California** and **Wisconsin** show an **upward trend** in **average aggregate sales** where **Wisconsin** stores show more consistent growth than **California**. \n*   Walmart stores in **Texas** show a **constant trend** in sales after July 2012 \n\n","6786f1e7":"### Historical sales data","c6d766b9":"### Product price data","ce4350ca":"<h4>Key finding(s):<\/h4>\n\n* The average sales of **California** and **Texas** are highest in **August** where **Wisconsin** shows highest average sales in **February**.\n* All 3 states show a major dip in average sales in the month of **May** \n* Average sales in all states differ widely for each month. This pattern shows us that **month of year** is an important factor to predict unit sales.","ab6c9896":"#M5 Forecasting - Accuracy\nThis is the **fifth iteration** of **Makridakis competition** organized by  **Makridakis Open Forecasting Centre (MOFC)** at the **University of Nicosia**.","366193f6":"### State wise aggregate sales  \n\n\n> Aggregate sales of all stores per state from day 0 to day 1941\n\n\n\n\n\n","b83e804a":"<h2>Business objective:<\/h2>\n\n> To **forecast unit sales figures** of retail goods for next **28 days** based on historical unit sales time series data made available by Walmart.\n\n<h2>Data information:<\/h2>\n\n>  The M5 dataset consists of the following files:\n1. **calendar.csv** - Contains information about the day of the week, special events for dates on which the products are sold.\n2. **sales_train_validation.csv** - Contains the historical daily unit sales data per product and store [d_1 - d_1913].\n3. **sell_prices.csv** - Contains information about the price of the products sold per store and date.\n4. **sales_train_evaluation.csv** - Includes sales [d_1 - d_1941] (labels used for the public leaderboard)\n\n\n> The **historical sales data** we are working with, comprises sales figures for  **3049 unique products** sold in **3 states** having **10 stores** in total, all stores having **3 product categories** further divided into **7 departments** in total. \n\nThe aggregation hierarchy in sales data is shown below.\n<img src='https:\/\/miro.medium.com\/max\/3000\/1*lPCqY7i6GRRx_eirsSov-Q.jpeg'>\n\n\n\n\n\n\n\n","326d65ce":"<h4>Key finding(s):<\/h4>\n\n* **FOODS_1, HOBBIES_2, and HOUSEHOLD_2** departments show a downward sales trend when their prices are up.\n\n* The above plots show that change in price can effect unit sales.","df25e7f6":"### Calender data","2dff1a6b":"### Sales trend vs price trend per department","02381e28":"<h4>Key finding(s):<\/h4>\n\n* On zooming in, almost same seasonal pattern can be observed in all 3 states followed by a major dip in sales on 25 december (Christmas) as the stores are closed on that day. \n\n* An anomaly can be noticed in the aggregate sales pattern of **Texas**. Only on June 15,2015 there is an unusual spike in sales which doesn't seem to be the case with other states.\n\n\n\n\n\n","f87cb739":"### State wise sales trend\nAggregate sales trend per state","5fa5ff02":"<h4>Key finding(s):<\/h4>\n\n* Average sales of **FOODS** category in all states increases on **SNAP days**.\n* Considering SNAP can be an beneficial to predict unit sales.","fffbdc76":"<h4>Key finding(s):<\/h4>\n\n* The last observation in our **time series(unit sales)** shows high correlation with observation at every 6th, 7th, and 8th time lag.\n* It shows even higher correlation with 7th and 28th time lag.\n* Using past observations at time lags showing higher correlation as a feature(lag features) can also help in making accurate sales predictions.  ","fb071554":"<h4>Key finding(s):<\/h4>\n\n* In all three states, average sales are noticeably higher on **weekends**(Saturday and Sunday) than weekdays.\n\n* This pattern shows that **day of week** can be an important factor to be considered to predict unit sales.   ","e421f9d0":"<h4>Key finding(s):<\/h4>\n\n* On **national events** we can notice a significant drop in average sales for all categories.\n* Average sales of **FOODS** category incereases on **sporting events**.\n* This plot shows that calendar events can be an important factor to predict unit sales.","5bf39ff1":"### Aggregate monthly average sales per state","42dec7df":"### Effect of SNAP days on sales per state per category","e19ef686":"### Walmart sales auto correlation plot\nTo know more about auto correlation plot visit https:\/\/www.dummies.com\/programming\/big-data\/data-science\/autocorrelation-plots-graphical-technique-for-statistical-data\/"}}