{"cell_type":{"880519ea":"code","8f7cdf88":"code","ddc17b2c":"code","2059f927":"code","1e483eac":"code","0e491f04":"code","18027ea3":"code","43691583":"code","96264d87":"code","8f2e86ad":"code","2bffd828":"code","685ef22b":"code","5cd43ee8":"code","49cb213e":"code","ddbf76ca":"code","9ae9a846":"code","e89fd3ec":"code","6edae114":"code","692f16da":"code","9486e50f":"code","ecae7dad":"code","276e24d1":"code","9954c16d":"code","fd9acf47":"code","7e997138":"code","d21d36a6":"code","912b629a":"code","faaf1179":"code","18d124aa":"code","e7799f58":"code","43e7e81b":"code","76c20910":"code","b838b60e":"code","1a900eb5":"code","9a6277c4":"code","5a020a6e":"code","a0f10b86":"code","82ed13cf":"code","00f1ad88":"code","387689d2":"code","78a1fbd6":"code","a3e7eb14":"code","24648094":"code","3298654c":"code","fed598a9":"code","0f3c0af7":"code","772bb4fc":"code","9df2776f":"code","10d2e7b2":"code","7e760969":"code","01f59873":"code","da6e106e":"code","d6477e5d":"code","1f0534aa":"code","122ae1c5":"code","fecdfefd":"code","dee515fe":"code","d8173381":"code","030def55":"code","78e058ad":"code","ffc54137":"code","69c16cfc":"code","6a302b2e":"code","cf25b2bd":"code","0abfb5f8":"code","0dd2b08a":"code","140e115e":"code","da67d79c":"code","ff8d91aa":"code","0f883f8d":"code","1f57c6dd":"code","138a786b":"code","44fb9207":"code","61378a55":"code","70fb7e18":"code","2e28f18e":"code","1c26f90d":"code","ebbab0ae":"code","162518c0":"code","1c8fa16d":"code","8bdd53a7":"code","bc4b1636":"code","b118e443":"code","3ec46215":"code","c8ff0af9":"code","be94d74e":"code","5597b2fd":"code","e6cf5553":"code","e461fc3a":"markdown","3876a0a2":"markdown","6bd65019":"markdown","e074371f":"markdown","76d384ae":"markdown","4a1708aa":"markdown","1a1826c0":"markdown","33cc34c8":"markdown","3ba88842":"markdown","1d195afd":"markdown","dfd2dc11":"markdown","61c52a58":"markdown","7741ae91":"markdown","d7bb0fc8":"markdown","b24b4896":"markdown","cc9c9210":"markdown","f6fc2300":"markdown","cfb85d4e":"markdown","dada233d":"markdown","d4dcb8f1":"markdown","624195da":"markdown","a38d8767":"markdown","dcf2f910":"markdown","be5e5376":"markdown","9b1e07fc":"markdown","b1aece7f":"markdown","4d509f1e":"markdown","d3b76457":"markdown","207cd9ed":"markdown","5a3e3f35":"markdown","63a0aa74":"markdown","5ccaf3ef":"markdown","0ffbfeec":"markdown","088dfa71":"markdown","310d9184":"markdown","ce617905":"markdown","b3a3971b":"markdown","3128fa2e":"markdown","047d2a36":"markdown","c5ac019a":"markdown","d266d46c":"markdown","010d721a":"markdown","b693919e":"markdown","9ab24b0b":"markdown","a7e36551":"markdown"},"source":{"880519ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f7cdf88":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \nplt.style.use('fivethirtyeight')","ddc17b2c":"train = pd.read_csv('\/kaggle\/input\/bigmart-sales-data\/Train.csv')","2059f927":"test = pd.read_csv('\/kaggle\/input\/bigmart-sales-data\/Test.csv')","1e483eac":"train.head()","0e491f04":"shape = train.shape\nprint('The train data had {} rows and {} columns'.format(shape[0],shape[1]))","18027ea3":"train.info()","43691583":"for i,j in enumerate(train.columns):\n    print(i,j)","96264d87":"train.duplicated().sum()","8f2e86ad":"def missing_value(df):\n    nan = df.isnull().sum()\n    nan_proportion = (nan\/len(df))*100\n    nan_table = pd.concat([nan,nan_proportion],axis=1).rename(columns = {0:'missing values',1:'precent of missing values'})\n    return nan_table","2bffd828":"missing_value(train)","685ef22b":"for col in train.columns:\n    print('Column' ,col,'had', train[col].nunique(),'unique value and its type is',train[col].dtype)","5cd43ee8":"train['Item_Fat_Content'].unique()","49cb213e":"train['Item_Weight'] = train['Item_Weight'].fillna(train['Item_Weight'].mode()[0])\ntrain['Outlet_Size'] = train['Outlet_Size'].fillna(train['Outlet_Size'].mode()[0])","ddbf76ca":"assert train['Item_Weight'].isnull().sum() == 0\nassert train['Outlet_Size'].isnull().sum() == 0","9ae9a846":"missing_value(train)","e89fd3ec":"train['Item_Fat_Content']=train['Item_Fat_Content'].replace('reg','Regular')\ntrain['Item_Fat_Content']=train['Item_Fat_Content'].replace(['low fat','LF'],'Low Fat')","6edae114":"assert train['Item_Fat_Content'].nunique() == 2","692f16da":"train['Item_Fat_Content'].unique()","9486e50f":"train['Item_Identifier']=train['Item_Identifier'].apply(lambda x:x[0:2])","ecae7dad":"train['Item_Identifier'].unique()","276e24d1":"train[['Item_Identifier','Item_Fat_Content' ,'Item_Type','Outlet_Identifier' ,'Outlet_Size','Outlet_Location_Type','Outlet_Type']]=train[['Item_Identifier','Item_Fat_Content' ,'Item_Type','Outlet_Identifier' ,'Outlet_Size','Outlet_Location_Type','Outlet_Type']].astype('category')","9954c16d":"train[['Item_Identifier','Item_Fat_Content' ,'Item_Type','Outlet_Identifier' ,'Outlet_Size','Outlet_Location_Type','Outlet_Type']].info()","fd9acf47":"train.head()","7e997138":"train.info()","d21d36a6":"test.head()","912b629a":"shape = test.shape\nprint('The test data had {} rows and {} columns'.format(shape[0],shape[1]))","faaf1179":"test.info()","18d124aa":"for i,j in enumerate(test.columns):\n    print(i,j)","e7799f58":"test.duplicated().sum()","43e7e81b":"missing_value(test)","76c20910":"for col in test.columns:\n    print('Column' ,col,'had', test[col].nunique(),'unique value and its type is',test[col].dtype)","b838b60e":"test['Item_Fat_Content'].unique()","1a900eb5":"test['Item_Weight'] = test['Item_Weight'].fillna(test['Item_Weight'].mode()[0])\ntest['Outlet_Size'] = test['Outlet_Size'].fillna(test['Outlet_Size'].mode()[0])","9a6277c4":"assert test['Item_Weight'].isnull().sum() == 0\nassert test['Outlet_Size'].isnull().sum() == 0","5a020a6e":"missing_value(test)","a0f10b86":"test['Item_Fat_Content']=test['Item_Fat_Content'].replace('reg','Regular')\ntest['Item_Fat_Content']=test['Item_Fat_Content'].replace(['low fat','LF'],'Low Fat')","82ed13cf":"assert test['Item_Fat_Content'].nunique() == 2","00f1ad88":"test['Item_Fat_Content'].unique()","387689d2":"test['Item_Identifier']=test['Item_Identifier'].apply(lambda x:x[0:2])","78a1fbd6":"test['Item_Identifier'].unique()","a3e7eb14":"test[['Item_Identifier','Item_Fat_Content' ,'Item_Type','Outlet_Identifier' ,'Outlet_Size','Outlet_Location_Type','Outlet_Type']]=test[['Item_Identifier','Item_Fat_Content' ,'Item_Type','Outlet_Identifier' ,'Outlet_Size','Outlet_Location_Type','Outlet_Type']].astype('category')","24648094":"test[['Item_Identifier','Item_Fat_Content' ,'Item_Type','Outlet_Identifier' ,'Outlet_Size','Outlet_Location_Type','Outlet_Type']].info()","3298654c":"test.head()","fed598a9":"test.info()","0f3c0af7":"df = pd.concat([train,test])","772bb4fc":"df.head()","9df2776f":"df.info()","10d2e7b2":"df.describe()","7e760969":"plt.figure(figsize=(12,6))\nplt.hist(df.Item_Weight,bins=30)\nplt.xlabel('Item Weight')\nplt.ylabel('Count')\nplt.title('Graph of Item Weight')\nplt.show()","01f59873":"plt.figure(figsize=(12,6))\nsns.violinplot(x=df.Item_Weight,bins=30)\nplt.xlabel('Item Weight')\nplt.title('Graph of Item Weight')\nplt.show()","da6e106e":"plt.figure(figsize=(12,6))\nplt.pie(df.Item_Fat_Content.value_counts(),explode=[0.1,0.1],labels=['Low Fat','Regular'],autopct='%.1f%%',shadow=True)\nplt.axis('equal')\nplt.title('Graph of Item Fat Content')\nplt.show()","d6477e5d":"df.Item_Fat_Content.value_counts()","1f0534aa":"plt.figure(figsize=(12,6))\nplt.hist(df.Item_Visibility,bins=20,color='red')\nplt.xlabel('Item Visibility')\nplt.ylabel('Count')\nplt.title('Graph of Item Visibility')\nplt.show()","122ae1c5":"plt.figure(figsize=(12,6))\nsns.boxplot(df.Item_Visibility,color='red')\nplt.xlabel('Item Visibility')\nplt.title('Graph of Item Visibility')\nplt.show()","fecdfefd":"#initializing plot\nax = df.Item_Type.value_counts().plot.barh(color = '#007482', fontsize = 15)\n\n#giving a title\nax.set(title = 'Graph of Item Type')\n\n#x-label\nax.set_xlabel('Item Type', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(12, 10)\n\n#shwoing the plot\nplt.show()","dee515fe":"df.Item_Type.value_counts(normalize=True)","d8173381":"plt.figure(figsize=(12,6))\nsns.violinplot(df.Item_MRP,bins=20,color='orange')\nplt.xlabel('Item MRP')\nplt.title('Graph of Item MRP')\nplt.show()","030def55":"#initializing plot\nax = df.Outlet_Establishment_Year.value_counts().sort_index().plot.bar(color = '#007482', fontsize = 15)\n\n#giving a title\nax.set(title = 'Graph of Outlet Establishment Year')\n\n#x-label\nax.set_xlabel('Year', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(12, 10)\n\n#shwoing the plot\nplt.show()","78e058ad":"plt.figure(figsize=(12,6))\nplt.pie(df.Outlet_Size.value_counts(),explode=[0.1,0.1,0.1],labels=['Medium', 'small', 'High'],autopct='%.1f%%',shadow=True)\nplt.axis('equal')\nplt.title('Graph of Outlet Size')\nplt.show()","ffc54137":"df.Outlet_Size.value_counts()","69c16cfc":"plt.figure(figsize=(12,6))\nplt.pie(df.Outlet_Location_Type.value_counts(),explode=[0.1,0.1,0.1],labels=['Tier 3', 'Tier 2', 'Tier 1'],autopct='%.1f%%',shadow=True)\nplt.axis('equal')\nplt.title('Graph of Outlet Location Type')\nplt.show()","6a302b2e":"df.Outlet_Location_Type.value_counts()","cf25b2bd":"#initializing plot\nax = df.Outlet_Type.value_counts().plot.barh(color = '#007482', fontsize = 15)\n\n#giving a title\nax.set(title = 'Graph of Outlet Type')\n\n#x-label\nax.set_xlabel('Outlet Type', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(12, 10)\n\n#shwoing the plot\nplt.show()","0abfb5f8":"df.Outlet_Type.value_counts(normalize=True)","0dd2b08a":"plt.figure(figsize=(12,6))\nplt.hist(df.Item_Outlet_Sales,bins=30)\nplt.xlabel('Item Outlet Sales')\nplt.ylabel('Count')\nplt.title('Graph of Item Outlet Sales')\nplt.show()","140e115e":"df_outlier = train.Item_Outlet_Sales\ndf_outlier_Q1 = df_outlier.quantile(0.25)\ndf_outlier_Q3 = df_outlier.quantile(0.75)\ndf_outlier_IQR = df_outlier_Q3 - df_outlier_Q1\ndf_outlier_lower = df_outlier_Q1 - (1.5 * df_outlier_IQR)\ndf_outlier_upper = df_outlier_Q3 + (1.5 * df_outlier_IQR)\n(df_outlier_lower,df_outlier_upper)","da67d79c":"index = train.query('Item_Outlet_Sales >= 6501.8699 or Item_Outlet_Sales <= -2566.3261').index","ff8d91aa":"train.drop(index,inplace=True)\ntrain = train.reset_index(drop=True)","0f883f8d":"train['Item_Identifier'] = train['Item_Identifier'].cat.codes\ntrain['Item_Fat_Content'] = train['Item_Fat_Content'].cat.codes\ntrain['Item_Type'] = train['Item_Type'].cat.codes\ntrain['Outlet_Identifier'] = train['Outlet_Identifier'].cat.codes\ntrain['Outlet_Size'] = train['Outlet_Size'].cat.codes\ntrain['Outlet_Location_Type'] = train['Outlet_Location_Type'].cat.codes\ntrain['Outlet_Type'] = train['Outlet_Type'].cat.codes","1f57c6dd":"test['Item_Identifier'] = test['Item_Identifier'].cat.codes\ntest['Item_Fat_Content'] = test['Item_Fat_Content'].cat.codes\ntest['Item_Type'] = test['Item_Type'].cat.codes\ntest['Outlet_Identifier'] = test['Outlet_Identifier'].cat.codes\ntest['Outlet_Size'] = test['Outlet_Size'].cat.codes\ntest['Outlet_Location_Type'] = test['Outlet_Location_Type'].cat.codes\ntest['Outlet_Type'] = test['Outlet_Type'].cat.codes","138a786b":"plt.figure(figsize=(15,12))\nsns.heatmap(train.corr(),annot=True,cmap='Blues')","44fb9207":"train.head()","61378a55":"from sklearn.model_selection import train_test_split","70fb7e18":"X = train.drop('Item_Outlet_Sales',axis=1)\ny = train['Item_Outlet_Sales']","2e28f18e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)","1c26f90d":"from sklearn.linear_model import LinearRegression","ebbab0ae":"lm=LinearRegression()","162518c0":"lm.fit(X_train,y_train)","1c8fa16d":"lm.intercept_","8bdd53a7":"lm.coef_","bc4b1636":"predict = lm.predict(X_test)","b118e443":"plt.figure(figsize=(12,6))\nplt.scatter(y_test,predict,color='grey')\nplt.ylabel('predict')\nplt.xlabel('y_test')\nplt.show()","3ec46215":"from sklearn.metrics import mean_squared_error,r2_score","c8ff0af9":"RMSE  = np.sqrt(mean_squared_error(y_test,predict))\nRMSE ","be94d74e":"test_predict = lm.predict(test)","5597b2fd":"test['Item_Outlet_Sales'] = test_predict","e6cf5553":"test","e461fc3a":"This columns need to be category\n- Item_Identifier\n- Item_Fat_Content \n- Item_Type\n- Outlet_Identifier \n- Outlet_Size\n- Outlet_Location_Type\n- Outlet_Type","3876a0a2":"***Train and fit a Linear regression model on the training set***","6bd65019":"Some columns had missing value:\n- Item_Weight\n- Outlet_Size","e074371f":"This columns need to be category\n- Item_Identifier\n- Item_Fat_Content \n- Item_Type\n- Outlet_Identifier \n- Outlet_Size\n- Outlet_Location_Type\n- Outlet_Type","76d384ae":"***Define***\n\nConvert Item_Identifier values to the first 2 digits\n\n\n**Code**","4a1708aa":"**Code**","1a1826c0":"# Concat Train and Test Data for Exploratory Data ","33cc34c8":"***Define***\n\nSome columns had missing value:\n- Item_Weight\n- Outlet_Size","3ba88842":"# Gather","1d195afd":"**Code**","dfd2dc11":"**Code**","61c52a58":"Some columns had missing value:\n- Item_Weight\n- Outlet_Size","7741ae91":"### ***The Test Data After Cleaning***","d7bb0fc8":"**Test**","b24b4896":"**Code**","cc9c9210":"**Test**","f6fc2300":"**Test**","cfb85d4e":"***Define***\n- The \"Item_Fat_Content\" column had 5 different classes not 2 as should be( Low Fat and Regular) since each value is not different.\n\nWe will replace :\n\n'low fat', 'LF'  == 'Low Fat'\n\n'reg' == 'Regular'\n","dada233d":"# Split the train data into training set and testing set using train_test_split","d4dcb8f1":"**code**","624195da":"***Define***\n- The \"Item_Fat_Content\" column had 5 different classes not 2 as should be( Low Fat and Regular) since each value is not different.\n\nWe will replace :\n\n'low fat', 'LF'  == 'Low Fat'\n\n'reg' == 'Regular'","a38d8767":"**Code**","dcf2f910":"# Exploratory Data Analysis","be5e5376":"# Linear Regression","9b1e07fc":"**Test**","b1aece7f":"- The \"Item_Fat_Content\" column had 5 different classes not 2 as should be( Low Fat and Regular) since each value is not different.\n\nWe should replace :\n\n'low fat', 'LF'  == 'Low Fat'\n\n'reg' == 'Regular'","4d509f1e":"**Test**","d3b76457":"### ***The Train Data After Cleaning***","207cd9ed":"- The \"Item_Fat_Content\" column had 5 different classes not 2 as should be( Low Fat and Regular) since each value is not different.\n\nWe should replace :\n\n'low fat', 'LF'  == 'Low Fat'\n\n'reg' == 'Regular'","5a3e3f35":"# Predictions and Evaluations","63a0aa74":"***Remove Outliers***","5ccaf3ef":"**Test**","0ffbfeec":"***Define***\n\nSome columns had missing value:\n- Item_Weight\n- Outlet_Size","088dfa71":"# Prepare The Data For The Model","310d9184":"# Assess Test Data","ce617905":"***convert category data into numeric***","b3a3971b":"# Cleaning Train Data","3128fa2e":"**Test**","047d2a36":"***Define***\n\nConvert Item_Identifier values to the first 2 digits\n\n\n**Code**","c5ac019a":"# Clean Test Data","d266d46c":"# Assess Training Data","010d721a":"### Linear Regression Project\n#### In this project we will be working with a Bigmart sales data set, indicating the sales of bigmart. We will try to create a model that will predict sales in future based of the features of the past sales.\n#### This data set contains the following features:\n- Item_Identifier: It is a unique product ID assigned to every distinct item. It consists of an alphanumeric string of length 5\n- Item_Weight This: field includes the wieght of the product\n- Item_Fat_Content: This attribute is categorical and describes whether the product is low fat or not. There are 2 categories    of this attribute: ['Low Fat', 'Regular']. However, it is important to note that 'Low Fat' has also been written as 'low fat' and 'LF' in dataset, whereas, 'Regular' has been referred as 'reg' as well\n- Item_Visibility: This field mentions the percentage of total display area of all products in a store allocated to the particular product\n- Item_Type: This is a categorical attribute and describes the food category to which the item belongs. There are 16 different categories listed as follows: ['Dairy', 'Soft Drinks', 'Meat', 'Fruits and Vegetables', 'Household', 'Baking Goods', 'Snack Foods', 'Frozen Foods', 'Breakfast', 'Health and Hygiene', 'Hard Drinks', 'Canned', 'Breads', 'Starchy Foods', 'Others', 'Seafood']\n- Item_MRP: This is the Maximum Retail Price (list price) of the product\n\n- Outlet_Identifier: It is a unique store ID assigned. It consists of an alphanumeric string of length 6\n- Outlet_Establishment_Year: This attribute mentions the year in which store was established\n- Outlet_Size :The attribute tells the size of the store in terms of ground area covered. It is a categorical value and described in 3 categories: ['High', 'Medium', 'Small']\n- Outlet_Location_Type: This field has categorical data and tells about the size of the city in which the store is located through 3 categories: ['Tier 1', 'Tier 2', 'Tier 3']\n- Outlet_Type: This field contains categorical value and tells whether the outlet is just a grocery store or some sort of supermarket. Following are the 4 categories in which the data is divided: ['Supermarket Type1', 'Supermarket Type2', 'Grocery Store','Supermarket Type3']\n- Item_Outlet_Sales: This is the outcome variable to be predicted. It contains the sales of the product in the particulat store","b693919e":"***Define***\n\nThis columns need to be category\n- Item_Identifier\n- Item_Fat_Content \n- Item_Type\n- Outlet_Identifier \n- Outlet_Size\n- Outlet_Location_Type\n- Outlet_Type","9ab24b0b":"***Define***\n\nThis columns need to be category\n- Item_Identifier\n- Item_Fat_Content \n- Item_Type\n- Outlet_Identifier \n- Outlet_Size\n- Outlet_Location_Type\n- Outlet_Type","a7e36551":"**Test**"}}