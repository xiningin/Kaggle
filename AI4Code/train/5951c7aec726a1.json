{"cell_type":{"635a4ddc":"code","c952b0db":"code","0c7c3539":"code","dbdb31ee":"code","1fad288f":"code","11a74df6":"code","d1855ebb":"code","80cbf600":"code","6e19c851":"code","478d4658":"code","685e65c8":"code","045ee41a":"code","27b41fca":"code","28086e40":"code","462b134b":"code","5a7f47e7":"code","687823ac":"code","0922dabc":"code","6fd18f40":"code","df456b41":"code","4a5fd526":"code","eed467e0":"code","d37f5fc3":"code","3311f1c7":"code","5ec32182":"code","a08127c2":"code","4aa1faaa":"code","34d7e68c":"code","01fbdf2a":"code","2b744d18":"code","c1a2cd94":"code","6bd1152c":"markdown","1ed6f0eb":"markdown","469b3216":"markdown","bee1e1de":"markdown","b39b69e1":"markdown","50b7e6b7":"markdown","7f648c81":"markdown","70d652c0":"markdown","dadb0e0e":"markdown","3c6626c1":"markdown"},"source":{"635a4ddc":"import numpy as np\nimport pandas as pd \nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import  GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import precision_score, recall_score\nimport sklearn.metrics as metrics\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","c952b0db":"pd.options.mode.chained_assignment = None  # default='warn'\nsns.set(style='whitegrid', palette='Set2', font_scale=1.2)","0c7c3539":"train_data=pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data=pd.read_csv('..\/input\/titanic\/test.csv')","dbdb31ee":"train_data.head()","1fad288f":"train_data.describe()","11a74df6":"print('\\nNull \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \\n{}'.format(train_data.isnull().sum()))\nprint('\\nNull \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \\n{}'.format(test_data.isnull().sum()))\n\nprint('\\\u0414\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 {}'.format(train_data.duplicated().sum()))\nprint('\u0414\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 {}'.format(test_data.duplicated().sum()))","d1855ebb":"print('\u0427\u0438\u0441\u043b\u043e \u043f\u043e\u0433\u0440\u0443\u0437\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0440\u0442\u0430\\n{}'.format(train_data['Embarked'].value_counts()))","80cbf600":"train_data['Embarked'].fillna(value='S', inplace=True)\ntest_data['Fare'].fillna(value=test_data.Fare.mean(), inplace=True)","6e19c851":"mean_age_miss = round(train_data[train_data[\"Name\"].str.contains('Miss.', na=False)]['Age'].mean())\nmean_age_mrs = round(train_data[train_data[\"Name\"].str.contains('Mrs.', na=False)]['Age'].mean())\nmean_age_mr = round(train_data[train_data[\"Name\"].str.contains('Mr.', na=False)]['Age'].mean())\nmean_age_master = round(train_data[train_data[\"Name\"].str.contains('Master.', na=False)]['Age'].mean())","478d4658":"print('\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 Miss. title {}'.format(mean_age_miss))\nprint('\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 Mrs. title {}'.format(mean_age_mrs))\nprint('\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 Mr. title {}'.format(mean_age_mr))\nprint('\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 Master. title {}'.format(mean_age_master))","685e65c8":"def fill_age(name_age):\n    \n    name = name_age[0]\n    age = name_age[1]\n    \n    if pd.isnull(age):\n        if 'Mr.' in name:\n            return mean_age_mr\n        if 'Mrs.' in name:\n            return mean_age_mrs\n        if 'Miss.' in name:\n            return mean_age_miss\n        if 'Master.' in name:\n            return mean_age_master\n        if 'Dr.' in name:\n            return mean_age_master\n        if 'Ms.' in name:\n            return mean_age_miss\n    else:\n        return age","045ee41a":"train_data['Age'] = train_data[['Name', 'Age']].apply(fill_age,axis=1)\ntest_data['Age'] = test_data[['Name', 'Age']].apply(fill_age,axis=1)","27b41fca":"fig, (ax1,ax2) = plt.subplots(1, 2, figsize=(14,5))\nsns.heatmap(train_data.isnull(),cmap='copper', ax=ax1)\nsns.heatmap(train_data.isnull(), cmap='copper', ax=ax2)\nplt.tight_layout()","28086e40":"train_data['Cabin'] = pd.Series(['X' if pd.isnull(i) else i[0] for i in train_data['Cabin']])\ntest_data['Cabin'] = pd.Series(['X' if pd.isnull(i) else i[0] for i in test_data['Cabin']])","462b134b":"plt.figure(figsize=(12,5))\nplt.title('\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0437\u043c\u0430\u0445\u0430 Cabin \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e Fare')\nsns.boxplot(x='Cabin',y='Fare',data=train_data, palette='Set2')\nplt.tight_layout()","5a7f47e7":"print('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Fare \u0434\u043b\u044f Cabin B {}'.format(train_data[train_data['Cabin']=='B']['Fare'].mean()))\nprint('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Fare \u0434\u043b\u044f Cabin C {}'.format(train_data[train_data['Cabin']=='C']['Fare'].mean()))\nprint('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Fare \u0434\u043b\u044f Cabin D {}'.format(train_data[train_data['Cabin']=='D']['Fare'].mean()))\nprint('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Fare \u0434\u043b\u044f Cabin E {}'.format(train_data[train_data['Cabin']=='E']['Fare'].mean()))","687823ac":"def reasign_cabin(cabin_fare):\n    \n    cabin = cabin_fare[0]\n    fare = cabin_fare[1]\n    \n    if cabin=='X':\n        if (fare >= 113.5):\n            return 'B'\n        if ((fare < 113.5) and (fare > 100)):\n            return 'C'\n        if ((fare < 100) and (fare > 57)):\n            return 'D'\n        if ((fare < 57) and (fare > 46)):\n            return 'D'\n        else:\n            return 'X'\n    else:\n        return cabin\n      \ntrain_data['Cabin'] = train_data[['Cabin', 'Fare']].apply(reasign_cabin, axis=1)\ntest_data['Cabin'] = test_data[['Cabin', 'Fare']].apply(reasign_cabin, axis=1)","0922dabc":"plt.figure(figsize=(12,5))\nplt.title('\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0437\u043c\u0430\u0445\u0430 Cabin \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e Fare')\nsns.boxplot(x='Cabin',y='Fare',data=train_data, palette='Set2')\nplt.tight_layout()","6fd18f40":"print('\\nNull \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \\n{}'.format(train_data.isnull().sum()))","df456b41":"fig, axx = plt.subplots(1, 3, figsize=(20,5))\naxx[0].set_title('\u0427\u0438\u0441\u043b\u043e Siblins\/Spouses')\nsns.countplot(x='SibSp', data=train_data, ax=axx[0])\naxx[1].set_title('\u0427\u0438\u0441\u043b\u043e parents\/children')\nsns.countplot(x='Parch', data=train_data, ax=axx[1])\naxx[2].set_title('\u0427\u0438\u0441\u043b\u043e Classes')\nsns.countplot(x='Pclass', data=train_data, ax=axx[2])\nplt.tight_layout()","4a5fd526":"def create_alone_feature(SibSp_Parch):\n    if (SibSp_Parch[0]+SibSp_Parch[1])==0:\n        return 1\n    else:\n        return 0\n \ntrain_data['Alone'] = train_data[['SibSp','Parch']].apply(create_alone_feature, axis=1)\ntrain_data['Familiars'] = 1 + train_data['SibSp'] + train_data['Parch']\n\ntest_data['Alone'] = test_data[['SibSp','Parch']].apply(create_alone_feature, axis=1)\ntest_data['Familiars'] = 1 + test_data['SibSp'] + test_data['Parch']","eed467e0":"ig, axx = plt.subplots(2, 3, figsize=(20,10))\naxx[0,0].set_title('\u0412\u044b\u0436\u0438\u0432\u0448\u0438\u0435')\nsns.countplot(x='Survived', data=train_data, ax=axx[0,0])\naxx[0,1].set_title('\u0412\u044b\u0436\u0438\u0432\u0448\u0438\u0435 \u043f\u043e \u043f\u043e \u043f\u043e\u043b\u0443')\nsns.countplot(x='Survived', hue='Sex', data=train_data, ax=axx[0,1])\naxx[0,2].set_title('\u0412\u044b\u0436\u0438\u0432\u0448\u0438\u0435 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 Pclass')\nsns.countplot(x='Survived', hue='Pclass', data=train_data, ax=axx[0,2])\naxx[1,0].set_title('\u0421\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u0435\u043c\u044b\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0435')\nsns.countplot(x='Survived', hue='Alone', data=train_data, ax=axx[1,0])\naxx[1,1].set_title('\u0421\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u0435\u043c\u044b\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0435')\nsns.countplot(x='Familiars', hue='Survived', data=train_data, ax=axx[1,1])\naxx[1,2].set_title('\u041e\u0434\u0438\u043d\u043e\u043a\u0438\u0435 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 Pclass')\nsns.countplot(x='Pclass', hue='Alone', data=train_data, ax=axx[1,2])\nplt.tight_layout()","d37f5fc3":"train_data['Sex']= train_data['Sex'].map({\"female\": 1, \"male\": 0})\ntest_data['Sex']= test_data['Sex'].map({\"female\": 1, \"male\": 0})\n\ncategories = {\"S\": 1, \"C\": 2, \"Q\": 3}\ntrain_data['Embarked']= train_data['Embarked'].map({\"S\": 1, \"C\": 2, \"Q\": 3})\ntest_data['Embarked']= test_data['Embarked'].map({\"S\": 1, \"C\": 2, \"Q\": 3})\n\ncategories = train_data.Cabin.unique()\ntrain_data['Cabin'] = train_data.Cabin.astype(\"category\").cat.codes\ntest_data['Cabin'] = test_data.Cabin.astype(\"category\").cat.codes","3311f1c7":"train_data = train_data.drop(['Name','Ticket','PassengerId'], axis=1)\ntest_data = test_data.drop(['Name','Ticket','PassengerId'], axis=1)\ntrain_data.head()","5ec32182":"LABEL = 'Survived'\ny = train_data[LABEL]\ntrain_data = train_data.drop(LABEL, axis=1)  \n\nscaler = MinMaxScaler()\nscaled_train = scaler.fit_transform(train_data)\nscaled_test = scaler.transform(test_data)\n\nscaled_train = pd.DataFrame(scaled_train, columns=train_data.columns, index=train_data.index)\nscaled_test = pd.DataFrame(scaled_test, columns=test_data.columns, index=test_data.index)\n\nscaled_train.head()","a08127c2":"X_train, X_test, y_train, y_test=train_test_split(scaled_train, y, test_size=0.33, random_state=42) ","4aa1faaa":"rf=RandomForestClassifier()\nclf=GridSearchCV(estimator=rf, param_grid={'max_depth':[4, 6, 8, 10], \n                                          'min_samples_split':[20, 30, 40, 50], \n                                          'min_samples_leaf':[20, 30, 40, 50], \n                                          'n_estimators':[100]}, cv=5)\nclf.fit(X_train, y_train)\nclf.score(X_test, y_test)","34d7e68c":"best_clf=clf.estimator\nbest_clf.fit(X_train, y_train)\nfeature_imp = pd.Series(best_clf.feature_importances_, index=scaled_train.columns).sort_values(ascending=False)\n\n#print(\"Accuracy: {}\".format(metrics.accuracy_score(y_test, y_pred)))\n\nplt.figure(figsize=(10,6))\nsns.barplot(x=feature_imp, y=feature_imp.index)\n# Add labels to your graph\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")\nplt.tight_layout()","01fbdf2a":"new_train = scaled_train.drop(['Alone','Parch','Embarked'], axis=1)\nnew_test = scaled_test.drop(['Alone','Parch','Embarked'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(new_train, y, test_size=0.2)\nrf=RandomForestClassifier()\nclf=GridSearchCV(estimator=rf, param_grid={'max_depth':[4, 5, 7], \n                                          'min_samples_split':[20, 30, 40, 50], \n                                          'min_samples_leaf':[15, 20, 25], \n                                          'n_estimators':[350, 400]})\nclf.fit(X_train, y_train)\nbest_clf=clf.estimator\n\nbest_clf.fit(X_train, y_train)\n\ny_pred = best_clf.predict(X_test)\n\nprint(\"   Accuracy: {}\".format(metrics.accuracy_score(y_test, y_pred)))\n\nprint(metrics.classification_report(y_test,y_pred))\n\nprediction = clf.predict(new_test)","2b744d18":"clf.best_params_","c1a2cd94":"pd.DataFrame({\n    \"PassengerId\": range(892, len(prediction)+892),\n    \"Survived\": prediction\n    }).to_csv('submission.csv', index=False, header=True)","6bd1152c":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u043d\u0430 \u0442\u0435\u043f\u043b\u043e\u0432\u043e\u0439 \u043a\u0430\u0440\u0442\u0435, \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Cabin \u0443\u0442\u0435\u0440\u044f\u043d\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u0443\u044e \u0431\u0443\u043a\u0432\u0443 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0431\u0443\u043a\u0432\u043e\u0439 X.","1ed6f0eb":"\u041e\u0442\u0431\u0440\u043e\u0441\u0438\u043c \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b: Name \u0438 Ticket.","469b3216":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 (RandomForestClassifier) \u0438 GridSearchCV \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. ","bee1e1de":"\u0421\u0443\u0434\u044f \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c, \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439 \u0431\u044b\u043b\u0438 \u043e\u0434\u0438\u043d\u043e\u043a\u0438 \u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u043b\u043e \u043a 3-\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443 (\u043d\u0438\u0437\u0448\u0435\u043c\u0443). \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u043b\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u0441 \u0441\u0435\u043c\u044c\u0435\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 SibSp (\u0411\u0440\u0430\u0442\u044c\u044f\/\u0441\u0435\u0441\u0442\u0440\u044b\/\u0441\u0443\u043f\u0440\u0443\u0433\u0438) \u0438 Parch (\u0420\u043e\u0434\u0438\u0442\u0435\u043b\u0438\/\u0414\u0435\u0442\u0438), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u0435\u043c\u044c\u0438.","b39b69e1":"\u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 Sex, Cabin \u0438 Embarked \u0441 \u0446\u0438\u0444\u0440\u0430\u043c\u0438. ","50b7e6b7":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043c\u0435\u043d\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u0441\u044f \u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c. \u0423\u0434\u0430\u043b\u0438\u043c \u2018Alone\u2019, \u2018Parch\u2019 and \u2018Embarked\u2019.","7f648c81":"\u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435. ","70d652c0":"\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c \u043f\u043e\u0440\u0442\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f S (\u0421\u0430\u0443\u0442\u0433\u0435\u043c\u043f\u0442\u043e\u043d), \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u043c.","dadb0e0e":"\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043b\u044e\u0434\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0430 \u043a\u0430\u044e\u0442\u0430, \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b\u0438 \u0437\u0430 \u043d\u0438\u0437\u043a\u0438\u0439 \u0442\u0430\u0440\u0438\u0444, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0441\u0435, \u0443 \u043a\u043e\u0433\u043e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0442\u0430\u0440\u0438\u0444 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 X, \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u043c .\u0418\u0437\u043c\u0435\u043d\u0438\u043c \u0434\u043b\u044f \u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Cabin, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","3c6626c1":"\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0442\u0438\u0442\u0443\u043b\u044b (Miss, Mr, Mrs, Master, Dr) \u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445, \u0430 \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0438\u0442\u0443\u043b\u043e\u043c."}}