{"cell_type":{"76951196":"code","ad4ebcb7":"code","a16f679f":"code","6bae4ac9":"code","c62d39da":"code","97d68a3d":"code","3be85af3":"code","3d909947":"code","32f8359c":"code","c73dd5b4":"code","1b359337":"code","87cbb875":"code","358412c8":"code","b154448b":"code","46e5c7ea":"code","b831bfbc":"code","a7455e0b":"code","00d7a3a7":"code","520fffb9":"code","9409e571":"code","9b596697":"code","6149d3ee":"code","5c439ee1":"code","b686f615":"code","56a9b387":"code","0f6c4990":"markdown","f3101263":"markdown","7b06a523":"markdown","ee5b696f":"markdown","ca70c8e7":"markdown","304479d3":"markdown","dd564883":"markdown","619afb17":"markdown","1db7b46e":"markdown","02351977":"markdown","c775e312":"markdown","ddb486c3":"markdown","260e19e8":"markdown","7ac1cbf3":"markdown","a19fcdd0":"markdown"},"source":{"76951196":"MAX_SAMPLE = None # set a small number (e.g. 500) for experimentation, set None for production.\n","ad4ebcb7":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl\n","a16f679f":"import os\nimport re\nimport json\nimport time\nimport datetime\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nrandom.seed(123)\nnp.random.seed(456)\n","6bae4ac9":"train_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\ntrain = pd.read_csv(train_path)\ntrain = train[:MAX_SAMPLE]\n\npaper_train_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\npapers = {}\nfor paper_id in train['Id'].unique():\n    with open(f'{paper_train_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper\n","c62d39da":"sample_submission_path = '..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv'\nsample_submission = pd.read_csv(sample_submission_path)\n\npaper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/test'\nfor paper_id in sample_submission['Id']:\n    with open(f'{paper_test_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper\n","97d68a3d":"all_labels = set()\n\nfor label_1, label_2, label_3 in train[['dataset_title', 'dataset_label', 'cleaned_label']].itertuples(index=False):\n    all_labels.add(str(label_1).lower())\n    all_labels.add(str(label_2).lower())\n    all_labels.add(str(label_3).lower())\n    \nprint(f'No. different labels: {len(all_labels)}')\n","3be85af3":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()\n\ndef totally_clean_text(txt):\n    txt = clean_text(txt)\n    txt = re.sub(' +', ' ', txt)\n    return txt\n","3d909947":"literal_preds = []\n\nfor paper_id in sample_submission['Id']:\n    paper = papers[paper_id]\n    text_1 = '. '.join(section['text'] for section in paper).lower()\n    text_2 = totally_clean_text(text_1)\n    \n    labels = set()\n    for label in all_labels:\n        if label in text_1 or label in text_2:\n            labels.add(clean_text(label))\n    \n    literal_preds.append('|'.join(labels))\n","32f8359c":"literal_preds[:5]\n","c73dd5b4":"MAX_LENGTH = 64  # max no. words for each sentence.\nOVERLAP = 20  # if a sentence exceeds MAX_LENGTH, we split it to multiple sentences with overlapping\n\nPREDICT_BATCH = 64000 \n\n# NEW (Emma): Replaced with paths to the BERT model that is trained by us.\n# PRETRAINED_PATH = '..\/input\/coleridge-bert-models\/output'\nPRETRAINED_PATH = '..\/input\/bert-with-more-keywords-1\/output'\nTEST_INPUT_SAVE_PATH = '.\/input_data'\nTEST_NER_DATA_FILE = 'test_ner_input.json'\n# TRAIN_PATH = '..\/input\/coleridge-bert-models\/train_ner.json'\n# VAL_PATH = '..\/input\/coleridge-bert-models\/train_ner.json'\nTRAIN_PATH = '..\/input\/bert-with-more-keywords-1\/train_ner.json'\nVAL_PATH = '..\/input\/bert-with-more-keywords-1\/train_ner.json'\n\nPREDICTION_SAVE_PATH = '.\/pred'\nPREDICTION_FILE = 'test_predictions.txt'\n","1b359337":"train = train.groupby('Id').agg({\n    'pub_title': 'first',\n    'dataset_title': '|'.join,\n    'dataset_label': '|'.join,\n    'cleaned_label': '|'.join\n}).reset_index()\n\nprint(f'No. grouped training rows: {len(train)}')\n","87cbb875":"def clean_training_text(txt):\n    \"\"\"\n    Similar to the default clean_text function but without lowercasing.\n    \"\"\"\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt)).strip()\n\ndef shorten_sentences(sentences):\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences\n","358412c8":"test_rows = []  # test data in NER format\npaper_length = []  # store the number of sentences each paper has\n\nfor paper_id in sample_submission['Id']:\n    # load paper\n    paper = papers[paper_id]\n    \n    # extract sentences\n    sentences = [clean_training_text(sentence) for section in paper \n                 for sentence in section['text'].split('.')\n                ]\n    sentences = shorten_sentences(sentences)  # make sentences short\n    sentences = [sentence for sentence in sentences if len(sentence) > 10]  # only accept sentences with length > 10 chars\n    \n    # Only take sentences with more than 4 words (NEW):\n    #sentences = [sentence for sentence in sentences if len(sentence.split(' ')) > 4]\n    \n    # Only take sentences with a capital anywhere in the sentence (NEW):\n    sentences = [sentence for sentence in sentences if sentence[1:].lower() != sentence[1:]]\n    \n    # Only take sentences that contain the word 'data' or 'study':\n    sentences = [sentence for sentence in sentences if any(word in sentence.lower() for word in ['data', 'study'])]  # , 'from', 'using'])]\n        \n    # collect all sentences in json\n    for sentence in sentences:\n        #print(\"++++++\", sentence, \"++++++\")\n        sentence_words = sentence.split()\n        dummy_tags = ['O']*len(sentence_words)\n        test_rows.append({'tokens' : sentence_words, 'tags' : dummy_tags})\n    \n    # track which sentence belongs to which data point\n    paper_length.append(len(sentences))\n    \nprint(f'total number of sentences: {len(test_rows)}')\n","b154448b":"os.environ[\"MODEL_PATH\"] = f\"{PRETRAINED_PATH}\"\nos.environ[\"TRAIN_FILE\"] = f\"{TRAIN_PATH}\"\nos.environ[\"VALIDATION_FILE\"] = f\"{VAL_PATH}\"\nos.environ[\"TEST_FILE\"] = f\"{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}\"\nos.environ[\"OUTPUT_DIR\"] = f\"{PREDICTION_SAVE_PATH}\"\n","46e5c7ea":"# copy my_seqeval.py to the working directory because the input directory is non-writable\n!cp \/kaggle\/input\/coleridge-packages\/my_seqeval.py .\/\n\n# make necessart directories and files\nos.makedirs(TEST_INPUT_SAVE_PATH, exist_ok=True)\n","b831bfbc":"def bert_predict():\n    !python ..\/input\/kaggle-ner-utils\/kaggle_run_ner.py \\\n    --model_name_or_path \"$MODEL_PATH\" \\\n    --train_file \"$TRAIN_FILE\" \\\n    --validation_file \"$VALIDATION_FILE\" \\\n    --test_file \"$TEST_FILE\" \\\n    --output_dir \"$OUTPUT_DIR\" \\\n    --report_to 'none' \\\n    --seed 123 \\\n    --do_predict\n","a7455e0b":"bert_outputs = []\n\nfor batch_begin in range(0, len(test_rows), PREDICT_BATCH):\n    # write data rows to input file\n    with open(f'{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}', 'w') as f:\n        for row in test_rows[batch_begin:batch_begin+PREDICT_BATCH]:\n            json.dump(row, f)\n            f.write('\\n')\n    \n    # remove output dir\n    !rm -r \"$OUTPUT_DIR\"\n    \n    # do predict\n    bert_predict()\n    \n    # read predictions\n    with open(f'{PREDICTION_SAVE_PATH}\/{PREDICTION_FILE}') as f:\n        this_preds = f.read().split('\\n')[:-1]\n        bert_outputs += [pred.split() for pred in this_preds]\n","00d7a3a7":"# get test sentences\ntest_sentences = [row['tokens'] for row in test_rows]\n\ndel test_rows\n","520fffb9":"bert_dataset_labels = []  # store all dataset labels for each publication\n\nfor length in paper_length:\n    labels = set()\n    for sentence, pred in zip(test_sentences[:length], bert_outputs[:length]):\n        curr_phrase = ''\n        for word, tag in zip(sentence, pred):\n            if tag == 'B': # start a new phrase\n                if curr_phrase:\n                    labels.add(curr_phrase)\n                    curr_phrase = ''\n                curr_phrase = word\n            elif tag == 'I' and curr_phrase: # continue the phrase\n                curr_phrase += ' ' + word\n            else: # end last phrase (if any)\n                if curr_phrase:\n                    labels.add(curr_phrase)\n                    curr_phrase = ''\n        # check if the label is the suffix of the sentence\n        if curr_phrase:\n            labels.add(curr_phrase)\n            curr_phrase = ''\n    \n    # record dataset labels for this publication\n    bert_dataset_labels.append(labels)\n    \n    del test_sentences[:length], bert_outputs[:length]\n","9409e571":"bert_dataset_labels[:5]\n","9b596697":"def jaccard_similarity(s1, s2):\n    l1 = s1.split(\" \")\n    l2 = s2.split(\" \")    \n    intersection = len(list(set(l1).intersection(l2)))\n    union = (len(l1) + len(l2)) - intersection\n    return float(intersection) \/ union\n\nfiltered_bert_labels = []\n\nfor labels in bert_dataset_labels:\n    filtered = []\n    \n    for label in sorted(labels, key=len):\n        label = clean_text(label)\n        if len(filtered) == 0 or all(jaccard_similarity(label, got_label) < 0.75 for got_label in filtered):\n            filtered.append(label)\n    \n    filtered_bert_labels.append('|'.join(filtered))\n","6149d3ee":"filtered_bert_labels[:5]\n","5c439ee1":"final_predictions = []\n\nfor i, (literal_match, bert_pred) in enumerate(zip(literal_preds, filtered_bert_labels)):\n#     if literal_match:\n#         final_predictions.append(literal_match)\n#     else:\n#         final_predictions.append(bert_pred)\n    # NEW (Emma): Only use the BERT predictions:\n    final_predictions.append(bert_pred)\n","b686f615":"sample_submission['PredictionString'] = final_predictions\nsample_submission.head()\n","56a9b387":"sample_submission.to_csv(f'submission.csv', index=False)\n","0f6c4990":"This notebook gives a simple combination of literal matching and Named Entity Recognition using BERT (base model from huggingface).\n\nThe training phase of the BERT model was done in another kernel: Pytorch BERT for Named Entity Recognition.\n\n(Search for \"NEW\" to find the new featueres added to this notebook.)","f3101263":"# Import","7b06a523":"### Filter based on Jaccard score and clean","ee5b696f":"### Restore Dataset labels from predictions","ca70c8e7":"### Paths and Hyperparameters","304479d3":"### Create a knowledge bank","dd564883":"### Matching on test data","619afb17":"# Literal matching","1db7b46e":"### Do predict and collect results","02351977":"# Aggregate final predictions and write submission file","c775e312":"# Install packages","ddb486c3":"# Bert prediction","260e19e8":"Group by publication, training labels should have the same form as expected output.","7ac1cbf3":"### Transform data to NER format","a19fcdd0":"# Load data"}}