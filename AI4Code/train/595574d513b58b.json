{"cell_type":{"3517c8c1":"code","2ce1183c":"code","aa037dd0":"code","6ad0d367":"code","0a3a258b":"code","94bb87ec":"code","1c0701d4":"code","3c48412a":"code","03e1eea0":"code","01a3fdda":"code","f6cbb2df":"code","dbc9fd91":"code","39c82a2f":"code","c67e865e":"code","54ac8bee":"code","c6dddd0b":"code","e3686c83":"code","e3c792c2":"code","fe0804ec":"code","1659be08":"code","3486dba9":"code","16906cf5":"code","05dd9df5":"code","0209de95":"code","0bfc979b":"code","e8d3cce6":"code","46bbc29e":"code","fb94520c":"code","585cdfe2":"code","09374b79":"code","4d3e5ffa":"code","d5f2c1f7":"code","efc49e07":"code","fad81fba":"markdown","b1f8f93f":"markdown","c23092d4":"markdown","99d44725":"markdown","ec58d6ac":"markdown","6efcfdca":"markdown","9d1a29a4":"markdown","2a0c01b9":"markdown","d086add1":"markdown","37e23694":"markdown","eb1b7fd8":"markdown","97c90cab":"markdown","3b5926b2":"markdown","dc6a205a":"markdown","839d999d":"markdown","f66e5d8d":"markdown"},"source":{"3517c8c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\nimport lightgbm as lgb\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom scipy import stats\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ce1183c":"train_df = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/test.csv')","aa037dd0":"print(\"Train Shape: \", train_df.shape)\nprint(\"Test Shape: \", test_df.shape)","6ad0d367":"train_df.head()","0a3a258b":"test_df.head()","94bb87ec":"train_df.describe()","1c0701d4":"train_df.isnull().sum(axis=0).head(15)","3c48412a":"for col in train_df.columns:\n    print(f\"{col}: \", train_df[col].nunique())","03e1eea0":"for col in test_df.columns:\n    print(f\"{col}: \", test_df[col].nunique())","01a3fdda":"train_df.drop(\"id\", axis=1, inplace=True)\ntest_ids = test_df[\"id\"].values\ntest_df.drop(\"id\", axis=1, inplace = True)","f6cbb2df":"train_cols = [col for col in train_df.columns]\nfig, axes = plt.subplots(7, 2, figsize=(20,20))\ni=0\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.4)\nfor col in train_cols:\n    row = i\/\/2\n    column = i%2\n    sns.boxplot(data = train_df, x=col, ax=axes[row, column])\n    i+=1\nfig.show()","dbc9fd91":"outlier_cols = [\"song_duration_ms\", \"instrumentalness\", \"energy\", \"liveness\", \"loudness\", \"speechiness\", \"tempo\"]\nmin_max_outliers_df = {\"column\":[], \"Min value\":[], \"Max Value\":[]}\nfor col in outlier_cols:\n    min_max_outliers_df[\"column\"].append(col)\n    min_max_outliers_df[\"Min value\"].append(train_df[col].min())\n    min_max_outliers_df[\"Max Value\"].append(train_df[col].max())\nmin_max_outliers_df = pd.DataFrame(min_max_outliers_df)","39c82a2f":"min_max_outliers_df","c67e865e":"for col in test_df.columns:\n    train_df[col] = train_df[col].fillna(value=train_df[col].median())\n    test_df[col] = test_df[col].fillna(value=train_df[col].median())","54ac8bee":"from scipy import stats\nz = np.abs(stats.zscore(train_df))\ntrain_df_cleaned = train_df[(z < 3).all(axis=1)]\nprint('Original dataset shape', train_df.shape)\nprint(\"Dataset without outliers' shape\", train_df_cleaned.shape)","c6dddd0b":"fig, axes = plt.subplots(7, 2, figsize=(20,20))\ni=0\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.4)\nfor col in train_cols:\n    row = i\/\/2\n    column = i%2\n    sns.boxplot(data = train_df_cleaned, x=col, ax=axes[row, column])\n    i+=1\nfig.show()","e3686c83":"train_df[\"instrumentalness\"] = np.log(train_df[\"instrumentalness\"].values)","e3c792c2":"params_lgb = {\n    \"task\": \"train\",\n    \"boosting_type\": \"gbdt\",\n    \"objective\": \"binary\",\n    'subsample': 0.95312,\n    'learning_rate': 0.001635,\n    \"max_depth\": 3,\n    \"feature_fraction\": 0.2256038826485174,\n    \"bagging_fraction\": 0.7705303688019942,\n    \"min_child_samples\": 290,\n    \"reg_alpha\": 14.68267919457715,\n    \"reg_lambda\": 66.156,\n    \"max_bin\": 772,\n    \"min_data_per_group\": 177,\n    \"bagging_freq\": 1,\n    \"cat_smooth\": 96,\n    \"cat_l2\": 17,\n    \"verbosity\": -1,\n    'random_state':42,\n    'n_estimators':5000,\n    'colsample_bytree':0.1107,\n    'is_unbalance':True\n    }","fe0804ec":"params_xgb = {\n    'max_depth': 15,\n    'n_estimators': 11500,\n    'learning_rate': 0.01700342969369311,\n    'subsample': 0.30000000000000004,\n    'colsample_bytree': 0.9,\n    'colsample_bylevel': 0.2,\n    'min_child_weight': 2.7454477004662747,\n    'reg_lambda': 127.50463543261313,\n    'reg_alpha': 0.000742660058158055,\n    'gamma': 0.48066399265944365,\n    'tree_method':'gpu_hist'\n}","1659be08":"rgr1 = lgb.LGBMRegressor(**params_lgb)\nrgr2 = XGBRegressor(**params_xgb)","3486dba9":"X, y = train_df.drop(\"song_popularity\", axis=1).values, train_df[\"song_popularity\"].values\ntrain_df.drop(\"song_popularity\", axis=1, inplace=True)","16906cf5":"def get_oof_preds(clf, skf, X, y):\n    oof_val_preds = []\n    oof_scores = []\n    y_val = []\n    oof_test_preds = np.zeros((test_df.shape[0],), dtype=np.float32)\n    for train_index, test_index in skf.split(X, y):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        clf.fit(X_train, y_train)\n        val_preds = get_cv_preds(clf, X_test)\n        oof_val_preds.append(val_preds)\n        oof_scores.append(roc_auc_score(y_test, val_preds))\n        test_preds = np.array(get_cv_preds(clf, test_df.values))\n        y_val.extend(y_test)\n        oof_test_preds += test_preds\n    oof_val_preds = [pred for oof_pred in oof_val_preds for pred in oof_pred.tolist()]\n    oof_test_preds = [pred\/5 for pred in oof_test_preds]\n    return y_val, oof_val_preds, oof_test_preds, oof_scores","05dd9df5":"def get_cv_preds(clf, x_test):\n    preds = clf.predict(x_test)\n    return preds","0209de95":"skf = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\nskf.get_n_splits(X, y)","0bfc979b":"val_set, oof_preds, test_preds, oof_scores = get_oof_preds(rgr1, skf, X, y)","e8d3cce6":"val_set1, oof_preds1, test_preds1, oof_scores1 = get_oof_preds(rgr2, skf, X, y)","46bbc29e":"roc_auc_score(val_set1, oof_preds1)","fb94520c":"roc_auc_score(val_set, oof_preds)","585cdfe2":"sample_submission_df1 = pd.read_csv(\"\/kaggle\/input\/song-popularity-prediction\/sample_submission.csv\")\nsample_submission_df1.head()","09374b79":"final_preds = (np.array(test_preds) + np.array(test_preds1))\/2","4d3e5ffa":"sample_submission_df1[\"id\"] = test_ids\nsample_submission_df1[\"song_popularity\"] = final_preds","d5f2c1f7":"sample_submission_df1.head()","efc49e07":"sample_submission_df1.to_csv('submission.csv', index=False)","fad81fba":"We can visualize the data to see if the outliers have been handled better or not.","b1f8f93f":"# Data Description\nLet's first know what each column means before getting started with any EDA\n\n<b>id<\/b>: The Spotify ID for the track.\n\n<b>song_duration_ms<\/b>: The duration of the track in milliseconds.\n\n<b>acousticness<\/b>: A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n\n<b>danceability<\/b>: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n\n<b>energy<\/b>: Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n\n<b>instrumentalness<\/b>: Predicts whether a track contains no vocals. \u201cOoh\u201d and \u201caah\u201d sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \u201cvocal\u201d. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n\n<b>key<\/b>: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on. If no key was detected, the value is -1.\n\n<b>liveness<\/b>: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n\n<b>loudness<\/b>: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.\n\n<b>audio_mode<\/b>: Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n\n<b>speechiness<\/b>: Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n\n<b>tempo<\/b>: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n\n<b>time_signature<\/b>: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).\n\n<b>audio_valence<\/b>: A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n<b>song_popularity<\/b>: The popularity of the track. The value will be between 0 and 1, with 1 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.","c23092d4":"# Model Definition\nHere we are going to define Model Hyperparameters, taken from some of the excellent notebooks, mentioned in the references","99d44725":"# Dealing with Null Values\n\nSince there are Null values present in the data, the data needs to be imputed. We can replace the values with mean, median or some new value which is not possible for that particular column.\nHere,Median seems to perform better, so we can use median instead of mean, in order to fill the Null Values.\n\nAlso, we can never replace Null in the target column, if any target column entry contains NaN, then we need to drop that row altogether, instead of filling the target column. Here, in this case, there are no Null values in target column.Hence, that's not required.","ec58d6ac":"# Handling outliers using Z-Score Method\nLet us look at how to handle the outliers, we can make use of IQR or Z-Score method. Here I am going to use Z-Score method from scipy.stats and are going to clean the data.\nAlso, we need to be careful not to loose too much of training data.","6efcfdca":"# Load the Libraries","9d1a29a4":"# Load the DataFrames","2a0c01b9":"# Check for Outliers\nWe can use box plot inorder to find out if there are any outliers.  As we can see, there are quite a few columns that contain outliers. So, we need to handle them, otherwise they can effect the performance of our model. Before proceeding with outlier detection techniques, we need to inspect te outliers to see if they are indeed valid entries or invalid entries","d086add1":"# Inspect the DataFrames","37e23694":"As we can see, 3 columns have negative minimum values, with 2 of those values close to 0(instrumentalness and energy), so we can clip those values to 0, since instrumentalness and energy take on values in the range 0.0 to 1.0, however, loudness can take values from range -60 to 0. Hence, loudness column doesn't represent any wrong information, hence we need to handle the distributin, to get the values close to normal distribution by applying feature transformations.\n","eb1b7fd8":"Now, most of the columns have been handled in a much better way.But still instrumentalness is a peculiar column and that needs to be looked into even more carefully.","97c90cab":"# Check for Null values in Each Column","3b5926b2":"# References\n1) https:\/\/ahsieh53632.github.io\/music-attributes-and-popularity\/ \n\n2) https:\/\/dhruv-khurjekar.medium.com\/investigating-spotifys-danceability-index-other-song-attributes-1983142f7dfd \n\n3) https:\/\/rpubs.com\/PeterDola\/SpotifyTracks \n\n4) https:\/\/towardsdatascience.com\/what-makes-a-song-likeable-dbfdb7abe404#:~:text=Tracks%20with%20high%20valence%20sound,fast%2C%20loud%2C%20and%20noisy \n\n5) https:\/\/www.software.com\/src\/explore-the-data-behind-your-most-productive-music-for-coding \n\n6) https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/175614\n\n7) https:\/\/www.kaggle.com\/ankurlimbashia\/xgboost-optuna-without-any-eda","dc6a205a":"# Number of Unique values for each column","839d999d":"# Stratified K-Fold CV and Prediction\nHere, we are going to apply stratified K-Fold cross validation in order to make predictions on test data and also check OOF AUC score on train_Data","f66e5d8d":"As we can see from above, id is unique for each song, hence that doesn't seem to add too much of a value to our model.Hence,we can safely drop the id column from both train and test data, after saving test id's in another variable."}}