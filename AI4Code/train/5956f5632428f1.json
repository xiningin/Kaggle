{"cell_type":{"fd0cf513":"code","56db3356":"code","94d30c07":"code","e9ddba95":"code","d538a7c7":"code","a89acbf0":"code","a681c850":"code","79c281b8":"code","5c2de789":"code","dc941130":"code","de27ed68":"code","6726cb45":"code","a16b8b25":"code","c97e7013":"code","2b80376b":"code","6218e10e":"code","e87233e2":"code","304f9dda":"code","2a04c65f":"code","af672813":"code","c6de73e4":"code","2bfd491a":"markdown","f7550d92":"markdown","3e3aa547":"markdown","0f274028":"markdown","bcb66e47":"markdown","1e8ee79c":"markdown","0191051e":"markdown","c4dceea9":"markdown"},"source":{"fd0cf513":"# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","56db3356":"# Importing the dataset\n#..\/input\/predict-the-churn-for-customer-dataset\/\ndata_train = pd.read_csv('..\/input\/predict-the-churn-for-customer-dataset\/Train File.csv')\ndata_test = pd.read_csv('..\/input\/predict-the-churn-for-customer-dataset\/Test File.csv')","94d30c07":"# Removing irrelevant data\ntest_customerId = data_test['customerID']\ndata_train.drop(['customerID'], axis=1, inplace=True)\ndata_test.drop(['customerID'], axis=1, inplace=True)","e9ddba95":"a4_dims = (11.7, 8.27)\nax = plt.subplots(figsize=a4_dims)\ncolors = ['#94aa2a','#F7DC6F']\nax = (data_train['gender'].value_counts()*100.0 \/len(data_train)).plot.pie(autopct='%.1f%%', labels = ['Male', 'Female'],figsize =(5,5), fontsize = 12,colors = colors )\n","d538a7c7":"features = ['PhoneService','MultipleLines','InternetService','OnlineSecurity',\n           'OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\ncolors1 =['#f45905','#c70d3a','#512c62']\ncolors2 =['#94aa2a','#e47312','#d55252']\ncolors3= ['#A04000','#D68910','#F7DC6F']\nfig, axes = plt.subplots(nrows = 3,ncols = 3,figsize = (15,12))\nfor i, item in enumerate(features):\n    if i < 3:\n        ax = data_train[item].value_counts().plot(kind = 'bar',ax=axes[i,0],rot = 0, color=colors1)\n        \n    elif i >=3 and i < 6:\n        ax = data_train[item].value_counts().plot(kind = 'bar',ax=axes[i-3,1],rot = 0,color = colors2)\n        \n    elif i < 9:\n        ax = data_train[item].value_counts().plot(kind = 'bar',ax=axes[i-6,2],rot = 0,color=colors3)\n    ax.set_title(item)","a89acbf0":"a4_dims = (11.7, 8.27)\nax = plt.subplots(figsize=a4_dims)\ncolors = ['#512c62','#f45905']\nax = (data_train['Churn'].value_counts()*100.0 \/len(data_train)).plot.pie(autopct='%.1f%%', labels = ['NO', 'Yes'],figsize =(5,5), fontsize = 12,colors = colors )\n","a681c850":"dims = (10, 8)\nax = plt.subplots(figsize=dims)\n\nax = sns.kdeplot(data_train.MonthlyCharges[(data_train[\"Churn\"] == 'No') ],\n                color=\"red\", shade = True)\nax = sns.kdeplot(data_train.MonthlyCharges[(data_train[\"Churn\"] == 'Yes') ],\n                ax =ax, color=\"skyblue\", shade= True)\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right')\nax.set_ylabel('Density')\nax.set_xlabel('Monthly Charges')\nax.set_title('churn vs monthly charges distribution')","79c281b8":"# Check and null values in the data\n#data_train.info()\ndata_train.fillna(data_train.mean(), inplace=True)\ndata_test.fillna(data_test.mean(), inplace=True)","5c2de789":"#data_train.info()","dc941130":"# Datatype conversion\ndata_train['TotalCharges'] = pd.to_numeric(data_train['TotalCharges'])\ndata_test['TotalCharges'] = pd.to_numeric(data_test['TotalCharges'])","de27ed68":"# Convert categorical data to numerical values\nlabelEncoder = LabelEncoder()\n\ndata_train['gender'] = labelEncoder.fit_transform(data_train['gender'])\ndata_train['Partner'] = labelEncoder.fit_transform(data_train['Partner'])\ndata_train['Dependents'] = labelEncoder.fit_transform(data_train['Dependents'])\ndata_train['PhoneService'] = labelEncoder.fit_transform(data_train['PhoneService'])\ndata_train['MultipleLines'] = labelEncoder.fit_transform(data_train['MultipleLines'])\ndata_train['InternetService'] = labelEncoder.fit_transform(data_train['InternetService'])\ndata_train['OnlineSecurity'] = labelEncoder.fit_transform(data_train['OnlineSecurity'])\ndata_train['OnlineBackup'] = labelEncoder.fit_transform(data_train['OnlineBackup'])\ndata_train['DeviceProtection'] = labelEncoder.fit_transform(data_train['DeviceProtection'])\ndata_train['TechSupport'] = labelEncoder.fit_transform(data_train['TechSupport'])\ndata_train['StreamingTV'] = labelEncoder.fit_transform(data_train['StreamingTV'])\ndata_train['StreamingMovies'] = labelEncoder.fit_transform(data_train['StreamingMovies'])\ndata_train['Contract'] = labelEncoder.fit_transform(data_train['Contract'])\ndata_train['PaperlessBilling'] = labelEncoder.fit_transform(data_train['PaperlessBilling'])\ndata_train['PaymentMethod'] = labelEncoder.fit_transform(data_train['PaymentMethod'])\ndata_train['Churn'] = labelEncoder.fit_transform(data_train['Churn'])\n\ndata_test['gender'] = labelEncoder.fit_transform(data_test['gender'])\ndata_test['Partner'] = labelEncoder.fit_transform(data_test['Partner'])\ndata_test['Dependents'] = labelEncoder.fit_transform(data_test['Dependents'])\ndata_test['PhoneService'] = labelEncoder.fit_transform(data_test['PhoneService'])\ndata_test['MultipleLines'] = labelEncoder.fit_transform(data_test['MultipleLines'])\ndata_test['InternetService'] = labelEncoder.fit_transform(data_test['InternetService'])\ndata_test['OnlineSecurity'] = labelEncoder.fit_transform(data_test['OnlineSecurity'])\ndata_test['OnlineBackup'] = labelEncoder.fit_transform(data_test['OnlineBackup'])\ndata_test['DeviceProtection'] = labelEncoder.fit_transform(data_test['DeviceProtection'])\ndata_test['TechSupport'] = labelEncoder.fit_transform(data_test['TechSupport'])\ndata_test['StreamingTV'] = labelEncoder.fit_transform(data_test['StreamingTV'])\ndata_test['StreamingMovies'] = labelEncoder.fit_transform(data_test['StreamingMovies'])\ndata_test['Contract'] = labelEncoder.fit_transform(data_test['Contract'])\ndata_test['PaperlessBilling'] = labelEncoder.fit_transform(data_test['PaperlessBilling'])\ndata_test['PaymentMethod'] = labelEncoder.fit_transform(data_test['PaymentMethod'])","6726cb45":"#data_train.info()","a16b8b25":"# Seperating the data\nX_train = data_train.drop(['Churn'], axis=1)\ny_train = data_train['Churn']\n\nX_test = data_test","c97e7013":"# Building the Logistic Regression model\nfrom sklearn.linear_model import LogisticRegression\nlr_model = LogisticRegression()\nresult = lr_model.fit(X_train, y_train)","2b80376b":"from sklearn import metrics\nprediction = lr_model.predict(X_test)","6218e10e":"prediction","e87233e2":"df_predicted = pd.DataFrame(columns=['customerID','Churn'])","304f9dda":"df_predicted['customerID'] = test_customerId\ndf_predicted['Churn'] = prediction\n\ndf_predicted['Churn'] = df_predicted['Churn'].replace(dict({1:'Yes',0:'No'}))\n\ndf_predicted.head()","2a04c65f":"df_predicted.count()","af672813":"df_predicted.to_csv('submission.csv', index=False)","c6de73e4":"from IPython.display import FileLink\nFileLink(r'submission.csv')","2bfd491a":"## Removing Irrelevant data","f7550d92":"## Predict the churn for customer data","3e3aa547":"# Visualization of Customer data with features\n### Customer Gender Distribution ","0f274028":"## Distribution of services and customers are availing","bcb66e47":"## Distrimution of churn rate","1e8ee79c":"# Data Manipulation","0191051e":"## churn vs monthly charges distribution","c4dceea9":"# Modeling using Logistic Regression"}}