{"cell_type":{"2ed4255d":"code","9c5d205c":"code","dfe5cc97":"code","3972cc8b":"code","ad7905d8":"code","359c533d":"code","c329a581":"code","be4ec204":"code","e57483d2":"code","1da279a6":"code","c56ad835":"code","6ae972b6":"code","8916502c":"code","66b494e7":"code","a4a8c39a":"code","8510fa8b":"code","e45dc5e9":"code","60242cf6":"code","53ada135":"code","47f02472":"code","77596fb3":"code","08f4d2d6":"code","8e7da453":"code","2973cec7":"code","30608988":"code","690304df":"code","f129b7ab":"code","fecef82e":"code","3cc5697d":"code","24707575":"code","e8c41bcc":"code","c340df23":"code","181a8860":"code","bb4de856":"code","ce8fdcdd":"code","f255fe53":"code","f0160a1d":"code","97f84a54":"code","4c396ab1":"code","f9cb221e":"code","2c5ef363":"code","c384bcc3":"code","fad7f044":"code","06758c33":"code","f993cbc1":"code","41263853":"code","617abd57":"code","b1de4487":"code","8a8ac3e3":"code","919e265b":"code","b65df731":"code","c6b5138a":"code","49137a97":"code","616822e7":"code","72b277ca":"code","a08e4adf":"code","8183e337":"code","c7566ad7":"code","77145477":"code","df548c42":"code","e8e66acb":"code","22b352e3":"code","efbdd029":"markdown","aa93b720":"markdown","196980c5":"markdown","65cc82f0":"markdown","7d7f88dc":"markdown","18c8ab21":"markdown","7fc16c21":"markdown","f2643a30":"markdown","aa9e0059":"markdown","f86fd9e4":"markdown","b83b75a5":"markdown","4c555dcb":"markdown","2162a3ed":"markdown","529a233e":"markdown","c2f49007":"markdown","cc747e12":"markdown","1816d91d":"markdown","3116d74e":"markdown","5e311fd6":"markdown","afca5c4c":"markdown","341ecf67":"markdown","8349a52c":"markdown","693f153e":"markdown","ee29efb7":"markdown","b69c7978":"markdown","511cfb0d":"markdown","c907dbd0":"markdown","e7559ff1":"markdown","20ed19cd":"markdown","cd9017be":"markdown","7c2b6e24":"markdown","113efc56":"markdown","63a74fc0":"markdown","4df14105":"markdown","a17bef1e":"markdown","26b308e9":"markdown","21861df9":"markdown","86fa1980":"markdown","fe39a3fa":"markdown","4b378620":"markdown","5352bfac":"markdown","31e4832c":"markdown","54f5e948":"markdown","aaabb16b":"markdown","f7a1e0ca":"markdown","fe67380a":"markdown","f6158419":"markdown","48c30010":"markdown","5f7946f9":"markdown","6ab7ffb3":"markdown","710793eb":"markdown","45823ffb":"markdown","ec3fd5e2":"markdown","ef7c9478":"markdown","b5f9f040":"markdown","9ec9cf31":"markdown","849f4aef":"markdown","5fb352b2":"markdown","45490195":"markdown","ca5d4fc7":"markdown","cf451b99":"markdown","72659ba7":"markdown","3a08c161":"markdown","5b025125":"markdown","16402cd3":"markdown","db033900":"markdown","dac138b4":"markdown","3bbac9c7":"markdown","0e175474":"markdown","ab2d4d6e":"markdown","2ef3f695":"markdown","310ce85c":"markdown","d2624f91":"markdown","83f1d3b2":"markdown","5f94b185":"markdown","da98f55c":"markdown","eb3cc219":"markdown","fa9fe397":"markdown","4a3ca134":"markdown","ba328a08":"markdown","eb684a07":"markdown","31d2ca00":"markdown","f21129b8":"markdown","98dab30c":"markdown"},"source":{"2ed4255d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c5d205c":"import pandas as pd\nfrom pandas import Series,DataFrame\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport math\nimport scipy.stats.stats as stats\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn.metrics import roc_curve, auc\nfrom pylab import mpl\nimport seaborn as sns","dfe5cc97":"%matplotlib inline","3972cc8b":"#\u8f7d\u5165\u6570\u636e\ndata_train = pd.read_csv('..\/input\/give-me-some-credit-dataset\/cs-training.csv')","ad7905d8":"#\u8f7d\u5165\u6570\u636e\u4fe1\u606f\ndata_train.head()","359c533d":"data_train.shape","c329a581":"data_train.dtypes","be4ec204":"data_train.describe()","e57483d2":"data_train.info()","1da279a6":"#\u9009\u62e9\u5b50\u96c6\ndata_train.drop('Unnamed: 0',axis=1,inplace=True)\ndata_train.head()","c56ad835":"sns.countplot('SeriousDlqin2yrs',data=data_train)","6ae972b6":"badNum=data_train.loc[data_train['SeriousDlqin2yrs']==1,:].shape[0]\ngoodNum=data_train.loc[data_train['SeriousDlqin2yrs']==0,:].shape[0]\nprint('\u597d\u574f\u6bd4:{0}%'.format(round(badNum*100\/(goodNum+badNum),2)))","8916502c":"#Age\u6570\u636e\u5206\u5e03\u60c5\u51b5\nfig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.distplot(data_train['age'],ax=ax1)\nsns.boxplot(y='age',data=data_train,ax=ax2)","66b494e7":"#\u5f02\u5e38\u503c\u60c5\u51b5\nage_mean=data_train['age'].mean()\nage_std=data_train['age'].std()\nage_lowlimit=age_mean-3*age_std\nage_uplimit=age_mean+3*age_std\nprint('\u5f02\u5e38\u503c\u4e0b\u9650\uff1a',age_lowlimit,'\u5f02\u5e38\u503c\u4e0a\u9650\uff1a',age_uplimit)","a4a8c39a":"#\u7b5b\u9009\u5f02\u5e38\u503c\nage_lowlimitd=data_train.loc[data_train['age']<age_lowlimit,:]\nage_uplimitd=data_train.loc[data_train['age']>age_uplimit,:]\nprint('\u5f02\u5e38\u503c\u4e0b\u9650\u6bd4\u4f8b\uff1a{0}%'.format(age_lowlimitd.shape[0]*100\/data_train.shape[0]),\n     '\u5f02\u5e38\u503c\u4e0a\u9650\u6bd4\u4f8b\uff1a{0}%'.format(age_uplimitd.shape[0]*100\/data_train.shape[0]))","8510fa8b":"data_age=data_train.loc[data_train['age']>0,['age','SeriousDlqin2yrs']]\ndata_age.loc[(data_age['age']>18)&(data_age['age']<40),'age'] = 1\ndata_age.loc[(data_age['age']>=40)&(data_age['age']<60),'age'] = 2 \ndata_age.loc[(data_age['age']>=60)&(data_age['age']<80),'age'] = 3\ndata_age.loc[(data_age['age']>=80),'age'] = 4\nage_SeriousDlqin2yrs=data_age.groupby('age')['SeriousDlqin2yrs'].sum()\nage_total=data_age.groupby('age')['SeriousDlqin2yrs'].count()\nage_Isratio=age_SeriousDlqin2yrs\/age_total\nage_Isratio.plot(kind='bar',figsize=(8,6),color='#4682B4')","e45dc5e9":"#RevolvingUtilizationOfUnsecuredLines\u6570\u636e\u5206\u5e03\nfigure=plt.figure(figsize=(8,6))\nplt.scatter(data_train['RevolvingUtilizationOfUnsecuredLines'],data_train['age'])\nplt.grid()","60242cf6":"percent_25=np.percentile(data_train['RevolvingUtilizationOfUnsecuredLines'],25)\npercent_75=np.percentile(data_train['RevolvingUtilizationOfUnsecuredLines'],75)\nRevol_lowlimit=percent_25-1.5*(percent_75-percent_25)\nRevol_uplimit=percent_75+1.5*(percent_75-percent_25)\nprint('\u5f02\u5e38\u503c\u4e0b\u9650\u503c\uff1a',Revol_lowlimit,'\u5f02\u5e38\u503c\u4e0a\u9650\u503c\uff1a',Revol_uplimit)","53ada135":"#\u5c06\u6570\u636e\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5c0f\u4e8e1\u548c\u5927\u4e8e1\u7684\u90e8\u5206\ndata1=data_train.loc[data_train['RevolvingUtilizationOfUnsecuredLines']<1,:]\ndata2=data_train.loc[data_train['RevolvingUtilizationOfUnsecuredLines']>=1,:]\n#\u770b\u4e00\u4e0b\u4e24\u90e8\u5206\u6570\u636e\u5206\u5e03\u60c5\u51b5\nfig=plt.figure(figsize=(20,6))\nax1=fig.add_subplot(1,2,1)\nax2=fig.add_subplot(1,2,2)\nsns.distplot(data1['RevolvingUtilizationOfUnsecuredLines'],ax=ax1,bins=10)\nsns.distplot(data2['RevolvingUtilizationOfUnsecuredLines'],ax=ax2,bins=10)","47f02472":"fig,[[ax1,ax2],[ax3,ax4]]=plt.subplots(2,2,figsize=(20,10))\nsns.distplot(data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=1)&(data_train['RevolvingUtilizationOfUnsecuredLines']<100),'RevolvingUtilizationOfUnsecuredLines'],bins=10,ax=ax1)\nsns.distplot(data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=100)&(data_train['RevolvingUtilizationOfUnsecuredLines']<1000),'RevolvingUtilizationOfUnsecuredLines'],bins=10,ax=ax2)\nsns.distplot(data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=1000)&(data_train['RevolvingUtilizationOfUnsecuredLines']<10000),'RevolvingUtilizationOfUnsecuredLines'],bins=10,ax=ax3)\nsns.distplot(data_train.loc[data_train['RevolvingUtilizationOfUnsecuredLines']>=10000,'RevolvingUtilizationOfUnsecuredLines'],bins=10,ax=ax4)","77596fb3":"#\u5c06\u533a\u95f4\u5206\u4e3a\uff080-1\uff09\uff0c(1-10),\uff0810-20\uff09\uff0c\uff0820-100\uff09\uff0c\uff08100,1000\uff09\uff0c\uff081000-10000\uff09\uff0c\uff0810000,51000\uff09\u770b\u4e00\u4e0b\u8fdd\u7ea6\u7387\u60c5\u51b5\ndata_1=data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=0)&(data_train['RevolvingUtilizationOfUnsecuredLines']<1),:]\nIs_1=data_1.loc[data_1['SeriousDlqin2yrs']==1,:].shape[0]*100\/data_1.shape[0]\n\ndata_2=data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=1)&(data_train['RevolvingUtilizationOfUnsecuredLines']<10),:]\nIs_2=data_2.loc[data_2['SeriousDlqin2yrs']==1,:].shape[0]*100\/data_2.shape[0]\n\ndata_3=data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=10)&(data_train['RevolvingUtilizationOfUnsecuredLines']<20),:]\nIs_3=data_3.loc[data_3['SeriousDlqin2yrs']==1,:].shape[0]*100\/data_3.shape[0]\n\ndata_4=data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=20)&(data_train['RevolvingUtilizationOfUnsecuredLines']<100),:]\nIs_4=data_4.loc[data_4['SeriousDlqin2yrs']==1,:].shape[0]*100\/data_4.shape[0]\n\ndata_5=data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=100)&(data_train['RevolvingUtilizationOfUnsecuredLines']<1000),:]\nIs_5=data_5.loc[data_5['SeriousDlqin2yrs']==1,:].shape[0]*100\/data_5.shape[0]\n\ndata_6=data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=1000)&(data_train['RevolvingUtilizationOfUnsecuredLines']<10000),:]\nIs_6=data_6.loc[data_6['SeriousDlqin2yrs']==1,:].shape[0]*100\/data_6.shape[0]\n\ndata_7=data_train.loc[(data_train['RevolvingUtilizationOfUnsecuredLines']>=10000)&(data_train['RevolvingUtilizationOfUnsecuredLines']<51000),:]\nIs_7=data_7.loc[data_7['SeriousDlqin2yrs']==1,:].shape[0]*100\/data_7.shape[0]\n\nprint('0-1\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(Is_1),\n     '1-10\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(Is_2),\n     '10-20\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(Is_3), \n     '20-100\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(Is_4),\n     '100-1000\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(Is_5),\n     '1000-10000\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(Is_6),\n     '10000-51000\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(Is_7))","08f4d2d6":"#DebtRatio\u6570\u636e\u7684\u5206\u5e03\u60c5\u51b5\nfig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.kdeplot(data_train['DebtRatio'],ax=ax1)\nsns.boxplot(y=data_train['DebtRatio'],ax=ax2)","8e7da453":"Debt1=data_train.loc[data_train['DebtRatio']<1,:]\nDebt2=data_train.loc[data_train['DebtRatio']>=1,:]\nfig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.distplot(Debt1['DebtRatio'],ax=ax1)\nsns.distplot(Debt2['DebtRatio'],ax=ax2)","2973cec7":"#\u5c1d\u8bd5\u591a\u6b21\u7ec6\u5206\nDebt3=data_train.loc[(data_train['DebtRatio']>=1)&(data_train['DebtRatio']<1000),:]\nDebt4=data_train.loc[(data_train['DebtRatio']>=1)&(data_train['DebtRatio']<200),:]\nDebt5=data_train.loc[(data_train['DebtRatio']>=1)&(data_train['DebtRatio']<10),:]\nDebt6=data_train.loc[(data_train['DebtRatio']>=1)&(data_train['DebtRatio']<2),:]\n\nfig,[[ax1,ax2],[ax3,ax4]]=plt.subplots(2,2,figsize=(20,10))\nsns.distplot(Debt3['DebtRatio'],ax=ax1)\nsns.distplot(Debt4['DebtRatio'],ax=ax2)\nsns.distplot(Debt5['DebtRatio'],ax=ax3)\nsns.distplot(Debt6['DebtRatio'],ax=ax4)","30608988":"#\u5404\u533a\u95f4\u7684\u8fdd\u7ea6\u7387(0,1),(1-2),(2-10),(10-50),(50-200),(200,1000),1000\u4ee5\u4e0a\nDebt_1=data_train.loc[(data_train['DebtRatio']>=0)&(data_train['DebtRatio']<1),:]\nDebIs_1=Debt_1.loc[Debt_1['SeriousDlqin2yrs']==1,:].shape[0]*100\/Debt_1.shape[0]\n\nDebt_2=data_train.loc[(data_train['DebtRatio']>=1)&(data_train['DebtRatio']<2),:]\nDebIs_2=Debt_2.loc[Debt_2['SeriousDlqin2yrs']==1,:].shape[0]*100\/Debt_2.shape[0]\n\nDebt_3=data_train.loc[(data_train['DebtRatio']>=2)&(data_train['DebtRatio']<10),:]\nDebIs_3=Debt_3.loc[Debt_3['SeriousDlqin2yrs']==1,:].shape[0]*100\/Debt_3.shape[0]\n\nDebt_4=data_train.loc[(data_train['DebtRatio']>=10)&(data_train['DebtRatio']<50),:]\nDebIs_4=Debt_4.loc[Debt_4['SeriousDlqin2yrs']==1,:].shape[0]*100\/Debt_4.shape[0]\n\nDebt_5=data_train.loc[(data_train['DebtRatio']>=50)&(data_train['DebtRatio']<200),:]\nDebIs_5=Debt_5.loc[Debt_5['SeriousDlqin2yrs']==1,:].shape[0]*100\/Debt_5.shape[0]\n\nDebt_6=data_train.loc[(data_train['DebtRatio']>=200)&(data_train['DebtRatio']<1000),:]\nDebIs_6=Debt_6.loc[Debt_6['SeriousDlqin2yrs']==1,:].shape[0]*100\/Debt_6.shape[0]\nDebt_7=data_train.loc[data_train['DebtRatio']>=1000,:]\nDebIs_7=Debt_7.loc[Debt_7['SeriousDlqin2yrs']==1,:].shape[0]*100\/Debt_7.shape[0]\n\nprint('0-1\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(DebIs_1),\n     '1-2\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(DebIs_2),\n     '2-10\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(DebIs_3), \n     '10-50\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(DebIs_4),\n     '50-200\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(DebIs_5),\n     '200-1000\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(DebIs_6),\n     '1000\u4ee5\u4e0a\u8fdd\u7ea6\u7387\u4e3a\uff1a{0}%'.format(DebIs_7))","690304df":"#\u6570\u636e\u5206\u5e03\nfig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.distplot(data_train['NumberOfOpenCreditLinesAndLoans'],ax=ax1)\nsns.boxplot(y=data_train['NumberOfOpenCreditLinesAndLoans'],ax=ax2)","f129b7ab":"#\u6570\u636e\u70b9\u5206\u5e03\nfigure=plt.figure(figsize=(12,6))\nsns.countplot(data_train['NumberOfOpenCreditLinesAndLoans'])","fecef82e":"data_train.loc[data_train['NumberOfOpenCreditLinesAndLoans']>36,'NumberOfOpenCreditLinesAndLoans']=36\nNumopen_dlq=data_train.groupby(['NumberOfOpenCreditLinesAndLoans'])['SeriousDlqin2yrs'].sum()\nNumopen_total=data_train.groupby(['NumberOfOpenCreditLinesAndLoans'])['SeriousDlqin2yrs'].count()\nNumopen_dlqratio=Numopen_dlq\/Numopen_total\nNumopen_dlqratio.plot(kind='bar',figsize=(12,6),color='#4682B4')","3cc5697d":"#\u6570\u636e\u5206\u5e03\nfig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.distplot(data_train['NumberRealEstateLoansOrLines'],ax=ax1)\nsns.boxplot(y=data_train['NumberRealEstateLoansOrLines'],ax=ax2)","24707575":"#\u5927\u81f4\u770b\u4e00\u4e0b\u5404\u6570\u636e\u70b9\u6570\u636e\u5927\u5c0f\u5206\u5e03\nsns.countplot(data_train['NumberRealEstateLoansOrLines'])","e8c41bcc":"#\u5c06\u5927\u4e8e8\u7684\u6570\u636e\u548c8\u5408\u5e76\u540e\u770b\u4e00\u4e0b\u8fdd\u7ea6\u7387\u7684\u60c5\u51b5\ndata_train.loc[data_train['NumberRealEstateLoansOrLines']>8,'NumberRealEstateLoansOrLines']=8\nNumestate_dlq=data_train.groupby(['NumberRealEstateLoansOrLines'])['SeriousDlqin2yrs'].sum()\nNumestate_total=data_train.groupby(['NumberRealEstateLoansOrLines'])['SeriousDlqin2yrs'].count()\nNumestate_dlqratio=Numestate_dlq\/Numestate_total\nNumestate_dlqratio.plot(kind='bar',figsize=(8,6),color='#4682B4')","c340df23":"#NumberOfDependents\u6570\u636e\u5206\u5e03\nfig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.countplot(data_train['NumberOfDependents'],ax=ax1)\nsns.boxplot(y=data_train['NumberOfDependents'],ax=ax2)","181a8860":"D_nullNum=data_train['NumberOfDependents'].isnull().sum()\nprint('\u7f3a\u5931\u503c\u6570\u91cf\uff1a',D_nullNum,'\u7f3a\u5931\u503c\u6bd4\u7387\uff1a{0}%'.format(D_nullNum*100\/data_train.shape[0]))","bb4de856":"#\u770b\u4e00\u4e0bMonthlyIncome\u548cNumberOfDependents\u7684\u7f3a\u5931\u662f\u5426\u6709\u5173\u8054\ndata_train.loc[(data_train['NumberOfDependents'].isnull())&(data_train['MonthlyIncome'].isnull()),:].shape[0]","ce8fdcdd":"MonthNullDependNot=data_train.loc[(data_train['NumberOfDependents'].notnull())&(data_train['MonthlyIncome']).isnull(),:]\nsns.countplot(MonthNullDependNot['NumberOfDependents'])","f255fe53":"#MonthlyIncome\u6570\u636e\u5206\u5e03\nfig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.kdeplot(data_train['MonthlyIncome'],ax=ax1)\nsns.boxplot(y=data_train['MonthlyIncome'],ax=ax2)","f0160a1d":"#MonthlyIncome\u7f3a\u5931\u503c\u60c5\u51b5\nM_nullNum=data_train['MonthlyIncome'].isnull().sum()\nprint('\u7f3a\u5931\u503c\u6570\u91cf\uff1a',M_nullNum,'\u7f3a\u5931\u503c\u6bd4\u7387\uff1a{0}%'.format(M_nullNum*100\/data_train.shape[0]))","97f84a54":"fig,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(20,6))\nsns.countplot(data_train['NumberOfTime30-59DaysPastDueNotWorse'],ax=ax1)\nsns.countplot(data_train['NumberOfTime60-89DaysPastDueNotWorse'],ax=ax2)\nsns.countplot(data_train['NumberOfTimes90DaysLate'],ax=ax3)","4c396ab1":"#age\u5f02\u5e38\u503c\u5904\u7406\ndata_train=data_train[data_train['age']>0]\n\n#NumberOfTime30-59DaysPastDueNotWorse umberOfTime60-89DaysPastDueNotWorse NumberOfTimes90DaysLate\u5f02\u5e38\u503c\u5904\u7406\ndata_train=data_train[data_train['NumberOfTime30-59DaysPastDueNotWorse']<90]\ndata_train=data_train[data_train['NumberOfTime60-89DaysPastDueNotWorse']<90]\ndata_train=data_train[data_train['NumberOfTimes90DaysLate']<90]\n\n#NumberRealEstateLoansOrLines\u5f02\u5e38\u503c\u5904\u7406\ndata_train=data_train[data_train['NumberRealEstateLoansOrLines']<50]","f9cb221e":"# \u7528\u968f\u673a\u68ee\u6797\u5bf9\u7f3a\u5931\u503c\u9884\u6d4b\u586b\u5145\u51fd\u6570\ndef set_missing(df):\n    # \u628a\u5df2\u6709\u7684\u6570\u503c\u578b\u7279\u5f81\u53d6\u51fa\u6765\uff0c\u5c06\u5f85\u586b\u5145\u7684\u5217\u653e\u5230\u7b2c\u4e00\u5217\n    process_df = df.iloc[:, [5, 0, 1, 2, 3, 4, 6, 7, 8, 9]]\n    # \u5206\u6210\u5df2\u77e5\u8be5\u7279\u5f81\u548c\u672a\u77e5\u8be5\u7279\u5f81\u4e24\u90e8\u5206\n    known = process_df[process_df.MonthlyIncome.notnull()].values\n    unknown = process_df[process_df.MonthlyIncome.isnull()].values\n    # X\u4e3a\u7279\u5f81\u5c5e\u6027\u503c\n    X = known[:, 1:]\n    # y\u4e3a\u7ed3\u679c\u6807\u7b7e\u503c\n    y = known[:, 0]\n    # fit\u5230RandomForestRegressor\u4e4b\u4e2d\n    rfr = RandomForestRegressor(random_state=0, n_estimators=200, max_depth=3, n_jobs=-1)\n    rfr.fit(X, y)\n    # \u7528\u5f97\u5230\u7684\u6a21\u578b\u8fdb\u884c\u672a\u77e5\u7279\u5f81\u503c\u9884\u6d4b\n    predicted = rfr.predict(unknown[:, 1:]).round(0)\n    print(predicted)\n    # \u7528\u5f97\u5230\u7684\u9884\u6d4b\u7ed3\u679c\u586b\u8865\u539f\u7f3a\u5931\u6570\u636e\n    df.loc[(df.MonthlyIncome.isnull()), 'MonthlyIncome'] = predicted\n    return df\n\n# \u7528\u968f\u673a\u68ee\u6797\u586b\u8865\u6bd4\u8f83\u591a\u7684\u7f3a\u5931\u503c\ndata_train = set_missing(data_train)\n# \u5220\u9664\u6bd4\u8f83\u5c11\u7684\u7f3a\u5931\u503c\ndata_train = data_train.dropna()\n# \u5220\u9664\u91cd\u590d\u9879\ndata_train = data_train.drop_duplicates()","2c5ef363":"data_train['SeriousDlqin2yrs'] = 1 - data_train['SeriousDlqin2yrs'] \ndata_train.describe()","c384bcc3":"# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nY = data_train['SeriousDlqin2yrs']\nX = data_train.iloc[:, 1:]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0)\n# print(Y_train)\ntrain = pd.concat([Y_train, X_train], axis=1)\ntest = pd.concat([Y_test, X_test], axis=1)\nclassTest = test.groupby('SeriousDlqin2yrs')['SeriousDlqin2yrs'].count()\nprint('classTest:', classTest)\ntrain.to_csv('TrainData.csv', index=False)\ntest.to_csv('TestData.csv', index=False)\nprint(train.shape)\nprint(test.shape)\ndata_train = pd.read_csv('TrainData.csv')\npinf = float('inf')  # \u6b63\u65e0\u7a77\u5927\nninf = float('-inf')  # \u8d1f\u65e0\u7a77\u5927","fad7f044":"# \u5b9a\u4e49\u81ea\u52a8\u5206\u7bb1\u51fd\u6570\ndef mono_bin(Y, X, n=20):\n    r = 0\n    good = Y.sum()\n    bad = Y.count()-good\n    while np.abs(r) < 1:\n        pdqcut = pd.qcut(X, n).value_counts()\n        # pd.qcut\u6839\u636e\u8fd9\u4e9b\u503c\u7684\u9891\u7387\u6765\u9009\u62e9\u7bb1\u5b50\u7684\u5747\u5300\u95f4\u9694\n        d1 = pd.DataFrame({\"X\": X, \"Y\": Y, \"Bucket\": pd.qcut(X, n)})\n        d2 = d1.groupby('Bucket', as_index=True)\n        # \u7b49\u7ea7\u76f8\u5173\u7a0b\u5ea6\u7684\u7edf\u8ba1\u5206\u6790\u6307\u6807\n        r, p = stats.spearmanr(d2.mean().X, d2.mean().Y)\n        n = n - 1\n    d3 = pd.DataFrame(d2.X.min(), columns=['min'])\n    d3['min'] = d2.min().X\n    d3['max'] = d2.max().X\n    d3['sum'] = d2.sum().Y\n    d3['total'] = d2.count().Y\n    d3['rate'] = d2.mean().Y\n    d3['woe'] = np.log((d3['rate']\/(1-d3['rate']))\/(good\/bad))\n    d3['goodattribute'] = d3['sum']\/good\n    d3['badattribute'] = (d3['total']-d3['sum'])\/bad\n    iv = ((d3['goodattribute']-d3['badattribute'])*d3['woe']).sum()\n    d4 = (d3.sort_values(by='min'))\n    print(\"=\" * 60)\n    print(d4)\n    cut = []\n    cut.append(float('-inf'))\n    for i in range(1, n+1):\n        qua = X.quantile(i\/(n+1))\n        cut.append(round(qua, 4))\n    cut.append(float('inf'))\n    woe = list(d4['woe'].round(3))\n    return d4, iv, cut, woe","06758c33":"# \u6700\u4f18\u5206\u7bb1\ndfx1, ivx1, cutx1, woex1 = mono_bin(data_train.SeriousDlqin2yrs, data_train.RevolvingUtilizationOfUnsecuredLines, n=10)\ndfx2, ivx2, cutx2, woex2 = mono_bin(data_train.SeriousDlqin2yrs, data_train.age, n=10)\ndfx4, ivx4, cutx4, woex4 = mono_bin(data_train.SeriousDlqin2yrs, data_train.DebtRatio, n=20)\ndfx5, ivx5, cutx5, woex5 = mono_bin(data_train.SeriousDlqin2yrs, data_train.MonthlyIncome, n=10)","f993cbc1":"# \u81ea\u5b9a\u4e49\u5206\u7bb1\u51fd\u6570\ndef self_bin(Y, X, cat):\n    good = Y.sum()\n    bad = Y.count()-good\n    d1 = pd.DataFrame({'X': X, 'Y': Y, 'Bucket': pd.cut(X, cat)})\n    d2 = d1.groupby('Bucket', as_index=True)\n    d3 = pd.DataFrame(d2.X.min(), columns=['min'])\n    d3['min'] = d2.min().X\n    d3['max'] = d2.max().X\n    d3['sum'] = d2.sum().Y\n    d3['total'] = d2.count().Y\n    d3['rate'] = d2.mean().Y\n    d3['woe'] = np.log((d3['rate'] \/ (1 - d3['rate'])) \/ (good \/ bad))\n    d3['goodattribute'] = d3['sum'] \/ good\n    d3['badattribute'] = (d3['total'] - d3['sum']) \/ bad\n    iv = ((d3['goodattribute'] - d3['badattribute']) * d3['woe']).sum()\n    d4 = (d3.sort_values(by='min'))\n    print(\"=\" * 60)\n    print(d4)\n    woe = list(d4['woe'].round(3))\n    return d4, iv, woe","41263853":"# \u8fde\u7eed\u53d8\u91cf\u79bb\u6563\u5316\ncutx3 = [ninf, 0, 1, 3, 5, pinf]\ncutx6 = [ninf, 1, 2, 3, 5, pinf]\ncutx7 = [ninf, 0, 1, 3, 5, pinf]\ncutx8 = [ninf, 0, 1, 2, 3, pinf]\ncutx9 = [ninf, 0, 1, 3, pinf]\ncutx10 = [ninf, 0, 1, 2, 3, 5, pinf]\n\ndfx3, ivx3, woex3 = self_bin(data_train.SeriousDlqin2yrs, data_train['NumberOfTime30-59DaysPastDueNotWorse'], cutx3)\ndfx6, ivx6, woex6 = self_bin(data_train.SeriousDlqin2yrs, data_train['NumberOfOpenCreditLinesAndLoans'], cutx6)\ndfx7, ivx7, woex7 = self_bin(data_train.SeriousDlqin2yrs, data_train['NumberOfTimes90DaysLate'], cutx7)\ndfx8, ivx8, woex8 = self_bin(data_train.SeriousDlqin2yrs, data_train['NumberRealEstateLoansOrLines'], cutx8)\ndfx9, ivx9, woex9 = self_bin(data_train.SeriousDlqin2yrs, data_train['NumberOfTime60-89DaysPastDueNotWorse'], cutx9)\ndata_train['NumberOfDependents']=data_train['NumberOfDependents'].astype('float64')\ndfx10, ivx10, woex10 = self_bin(data_train.SeriousDlqin2yrs, data_train['NumberOfDependents'], cutx10)","617abd57":"corr = data_train.corr()#\u8ba1\u7b97\u5404\u53d8\u91cf\u7684\u76f8\u5173\u6027\u7cfb\u6570\nxticks = ['x0','x1','x2','x3','x4','x5','x6','x7','x8','x9','x10']#x\u8f74\u6807\u7b7e\nyticks = list(corr.index)#y\u8f74\u6807\u7b7e\nfig = plt.figure()\nax1 = fig.add_subplot(1, 1, 1)\nsns.heatmap(corr, annot=True, cmap='rainbow', ax=ax1, annot_kws={'size': 9, 'weight': 'bold', 'color': 'blue'})#\u7ed8\u5236\u76f8\u5173\u6027\u7cfb\u6570\u70ed\u529b\u56fe\nax1.set_xticklabels(xticks, rotation=0, fontsize=10)\nax1.set_yticklabels(yticks, rotation=0, fontsize=10)\nplt.show()","b1de4487":"ivlist = [ivx1, ivx2, ivx3, ivx4, ivx5, ivx6, ivx7, ivx8, ivx9, ivx10]\nindex = ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10']\nfig1 = plt.figure(1)\nax1 = fig1.add_subplot(1, 1, 1)\nx = np.arange(len(index)) + 1\nax1.bar(x, ivlist, width=0.4)\nax1.set_xticks(x)\nax1.set_xticklabels(index, rotation=0, fontsize=12)\nax1.set_ylabel('IV(Information Value)', fontsize=14)\nfor a, b in zip(x, ivlist):\n    plt.text(a, b + 0.01, '%.4f' % b, ha='center', va='bottom', fontsize=10)","8a8ac3e3":"# \u7528woe\u4ee3\u66ff\ndef replace_woe(series, cut, woe):\n    list = []\n    i = 0\n    while i < len(series):\n        value = series[i]\n        j = len(cut)-2\n        m = len(cut)-2\n        while j >= 0:\n            if value >= cut[j]:\n                j = -1\n            else:\n                j -= 1\n                m -= 1\n        list.append(woe[m])\n        i += 1\n    return list","919e265b":"# \u66ff\u6362\u6210woe\ndata_train['RevolvingUtilizationOfUnsecuredLines'] = Series(replace_woe(data_train['RevolvingUtilizationOfUnsecuredLines'], cutx1, woex1))\ndata_train['age'] = Series(replace_woe(data_train['age'], cutx2, woex2))\ndata_train['NumberOfTime30-59DaysPastDueNotWorse'] = Series(replace_woe(data_train['NumberOfTime30-59DaysPastDueNotWorse'], cutx3, woex3))\ndata_train['DebtRatio'] = Series(replace_woe(data_train['DebtRatio'], cutx4, woex4))\ndata_train['MonthlyIncome'] = Series(replace_woe(data_train['MonthlyIncome'], cutx5, woex5))\ndata_train['NumberOfOpenCreditLinesAndLoans'] = Series(replace_woe(data_train['NumberOfOpenCreditLinesAndLoans'], cutx6, woex6))\ndata_train['NumberOfTimes90DaysLate'] = Series(replace_woe(data_train['NumberOfTimes90DaysLate'], cutx7, woex7))\ndata_train['NumberRealEstateLoansOrLines'] = Series(replace_woe(data_train['NumberRealEstateLoansOrLines'], cutx8, woex8))\ndata_train['NumberOfTime60-89DaysPastDueNotWorse'] = Series(replace_woe(data_train['NumberOfTime60-89DaysPastDueNotWorse'], cutx9, woex9))\ndata_train['NumberOfDependents'] = Series(replace_woe(data_train['NumberOfDependents'], cutx10, woex10))\ndata_train.to_csv('WoeData.csv', index=False)","b65df731":"data_test = pd.read_csv('TestData.csv')\n# \u66ff\u6362\u6210woe\ndata_test['RevolvingUtilizationOfUnsecuredLines'] = Series(\n        replace_woe(data_test['RevolvingUtilizationOfUnsecuredLines'], cutx1, woex1))\ndata_test['age'] = Series(replace_woe(data_test['age'], cutx2, woex2))\ndata_test['NumberOfTime30-59DaysPastDueNotWorse'] = Series(\n        replace_woe(data_test['NumberOfTime30-59DaysPastDueNotWorse'], cutx3, woex3))\ndata_test['DebtRatio'] = Series(replace_woe(data_test['DebtRatio'], cutx4, woex4))\ndata_test['MonthlyIncome'] = Series(replace_woe(data_test['MonthlyIncome'], cutx5, woex5))\ndata_test['NumberOfOpenCreditLinesAndLoans'] = Series(replace_woe(data_test['NumberOfOpenCreditLinesAndLoans'], cutx6, woex6))\ndata_test['NumberOfTimes90DaysLate'] = Series(replace_woe(data_test['NumberOfTimes90DaysLate'], cutx7, woex7))\ndata_test['NumberRealEstateLoansOrLines'] = Series(replace_woe(data_test['NumberRealEstateLoansOrLines'], cutx8, woex8))\ndata_test['NumberOfTime60-89DaysPastDueNotWorse'] = Series(\n        replace_woe(data_test['NumberOfTime60-89DaysPastDueNotWorse'], cutx9, woex9))\ndata_test['NumberOfDependents'] = Series(replace_woe(data_test['NumberOfDependents'], cutx10, woex10))\ndata_test.to_csv('TestWoeData.csv', index=False)","c6b5138a":"# \u903b\u8f91\u56de\u5f52\u6a21\u578b\nmpl.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a\u9ed8\u8ba4\u5b57\u4f53\nmpl.rcParams['axes.unicode_minus'] = False  # \u89e3\u51b3\u4fdd\u5b58\u56fe\u50cf\u662f\u8d1f\u53f7'-'\u663e\u793a\u4e3a\u65b9\u5757\u7684\u95ee\u9898\ndata_train = pd.read_csv('WoeData.csv')\nY = data_train['SeriousDlqin2yrs']\nX = data_train.drop(['SeriousDlqin2yrs',\n                   'DebtRatio',\n                   'MonthlyIncome',\n                   'NumberOfOpenCreditLinesAndLoans',\n                   'NumberRealEstateLoansOrLines',\n                   'NumberOfDependents'], axis=1)\nX1 = sm.add_constant(X)\nprint(X1.shape)\nlogit = sm.Logit(Y, X1)\nresult = logit.fit()\nprint(result.params)\nprint(result.summary())","49137a97":"data_test = pd.read_csv('TestWoeData.csv')\nY_test = data_test['SeriousDlqin2yrs']\nX_test = data_test.drop(['SeriousDlqin2yrs', 'DebtRatio', 'MonthlyIncome', 'NumberOfOpenCreditLinesAndLoans',\n                        'NumberRealEstateLoansOrLines', 'NumberOfDependents'], axis=1)\nX3 = sm.add_constant(X_test)\nresu = result.predict(X3)\nfpr, tpr, threshold = roc_curve(Y_test, resu)\nrocauc = auc(fpr, tpr)\nplt.plot(fpr, tpr, 'b', label='AUC = %0.2f' % rocauc)\nplt.legend(loc='lower right')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('\u771f\u6b63\u7387')\nplt.xlabel('\u5047\u6b63\u7387')\nplt.show()","616822e7":"# \u8ba1\u7b97\u5206\u6570\u51fd\u6570\ndef get_score(coe,woe,factor):\n    scores=[]\n    for w in woe:\n        score=round(coe*w*factor,0)\n        scores.append(score)\n    return scores\n\n\n# \u6839\u636e\u53d8\u91cf\u8ba1\u7b97\u5206\u6570\ndef compute_score(series,cut,score):\n    list = []\n    i = 0\n    while i < len(series):\n        value = series[i]\n        j = len(cut) - 2\n        m = len(cut) - 2\n        while j >= 0:\n            if value >= cut[j]:\n                j = -1\n            else:\n                j -= 1\n                m -= 1\n        list.append(score[m])\n        i += 1\n    return list","72b277ca":"# coe\u4e3a\u903b\u8f91\u56de\u5f52\u6a21\u578b\u7684\u7cfb\u6570\ncoe = [result.params['const'],\n        result.params['RevolvingUtilizationOfUnsecuredLines'],\n        result.params['age'],\n        result.params['NumberOfTime30-59DaysPastDueNotWorse'],\n        result.params['NumberOfTimes90DaysLate'],\n        result.params['NumberOfTime60-89DaysPastDueNotWorse']]\n# \u6211\u4eec\u53d6600\u5206\u4e3a\u57fa\u7840\u5206\u503c\uff0cPDO\u4e3a20\uff08\u6bcf\u9ad820\u5206\u597d\u574f\u6bd4\u7ffb\u4e00\u500d\uff09\uff0c\u597d\u574f\u6bd4\u53d620\u3002\np = 20 \/ math.log(2)\nq = 600 - 20 * math.log(20) \/ math.log(2)\nbaseScore = round(q + p * coe[0], 0)\n# \u5404\u9879\u90e8\u5206\u5206\u6570\nx1 = get_score(coe[1], woex1, p)\nx2 = get_score(coe[2], woex2, p)\nx3 = get_score(coe[3], woex3, p)\nx7 = get_score(coe[4], woex7, p)\nx9 = get_score(coe[5], woex9, p)\nprint(x1, x2, x3, x7, x9)\ntest1 = pd.read_csv('TestData.csv')\ntest1['BaseScore'] = Series(np.zeros(len(test1))) + baseScore\ntest1['x1'] = Series(compute_score(test1['RevolvingUtilizationOfUnsecuredLines'], cutx1, x1))\ntest1['x2'] = Series(compute_score(test1['age'], cutx2, x2))\ntest1['x3'] = Series(compute_score(test1['NumberOfTime30-59DaysPastDueNotWorse'], cutx3, x3))\ntest1['x7'] = Series(compute_score(test1['NumberOfTimes90DaysLate'], cutx7, x7))\ntest1['x9'] = Series(compute_score(test1['NumberOfTime60-89DaysPastDueNotWorse'], cutx9, x9))\ntest1['Score'] = test1['x1'] + test1['x2'] + test1['x3'] + test1['x7'] + test1['x9'] + baseScore\ntest1.to_csv('ScoreData2.csv', index=False)","a08e4adf":" test_df = pd.read_csv('..\/input\/give-me-some-credit-dataset\/cs-test.csv')","8183e337":"test_df.isnull().sum()","c7566ad7":"test_df['MonthlyIncome'].fillna(test_df['MonthlyIncome'].mean(),inplace=True)\ntest_df['NumberOfDependents'].fillna(test_df['NumberOfDependents'].mode()[0], inplace=True)\ntest_df.describe()","77145477":"result1=pd.read_csv('..\/input\/give-me-some-credit-dataset\/sampleEntry.csv') \nresult1.describe()","df548c42":"# \u66ff\u6362\u6210woe\ntest_df['RevolvingUtilizationOfUnsecuredLines'] = Series(\n        replace_woe(data_train['RevolvingUtilizationOfUnsecuredLines'], cutx1, woex1))\ntest_df['age'] = Series(replace_woe(data_train['age'], cutx2, woex2))\ntest_df['NumberOfTime30-59DaysPastDueNotWorse'] = Series(\n        replace_woe(data_train['NumberOfTime30-59DaysPastDueNotWorse'], cutx3, woex3))\ntest_df['DebtRatio'] = Series(replace_woe(data_train['DebtRatio'], cutx4, woex4))\ntest_df['MonthlyIncome'] = Series(replace_woe(data_train['MonthlyIncome'], cutx5, woex5))\ntest_df['NumberOfOpenCreditLinesAndLoans'] = Series(replace_woe(data_train['NumberOfOpenCreditLinesAndLoans'], cutx6, woex6))\ntest_df['NumberOfTimes90DaysLate'] = Series(replace_woe(data_train['NumberOfTimes90DaysLate'], cutx7, woex7))\ntest_df['NumberRealEstateLoansOrLines'] = Series(replace_woe(data_train['NumberRealEstateLoansOrLines'], cutx8, woex8))\ntest_df['NumberOfTime60-89DaysPastDueNotWorse'] = Series(\n        replace_woe(data_train['NumberOfTime60-89DaysPastDueNotWorse'], cutx9, woex9))\ntest_df['NumberOfDependents'] = Series(replace_woe(data_train['NumberOfDependents'], cutx10, woex10))","e8e66acb":"test_df.to_csv('cs-TestWoeData.csv', index=False)\n\ntest_df = pd.read_csv('cs-TestWoeData.csv')\nX_test2 = test_df.drop(['SeriousDlqin2yrs', 'DebtRatio', 'MonthlyIncome', 'NumberOfOpenCreditLinesAndLoans',\n                        'NumberRealEstateLoansOrLines', 'NumberOfDependents'], axis=1)\n\nX4 = sm.add_constant(X_test2)\nresult2 = result.predict(X4)","22b352e3":"result1['Probability'] = result2\nresult1.to_csv('.\/submission.csv',index=False)","efbdd029":"# **2.EDA\u5206\u6790**","aa93b720":"\u6b63\u5e38\u6765\u8bb2RevolvingUtilizationOfUnsecuredLines\u7684\u53d6\u503c\u57280-1\u4e4b\u95f4\uff0c\u8d85\u51fa1\u8868\u660e\u900f\u652f\u3002\u4f46\u4ece\u4e0a\u56fe\u770b\u51fa\u6709\u4e9b\u6570\u636e\u8d85\u8fc710000\uff0c\u731c\u60f3\u53ef\u80fd\u6709\u4e00\u90e8\u4efd\u6570\u503c\u4e3a\u672a\u9664\u4ee5\u5206\u6bcd\u4fe1\u7528\u5361\u989d\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u7b5b\u9009\u51fa\u54ea\u4e9b\u6570\u636e\u662f\u8fd9\u79cd\u60c5\u51b5\u3002","196980c5":"**NumberOfTime30-59DaysPastDueNotWorse**\n\n**NumberOfTime60-89DaysPastDueNotWorse**\n\n**NumberOfTimes90DaysLate**","65cc82f0":"\u5bfc\u51fa\u8868\u683c","7d7f88dc":"\u5e74\u9f84\u4e0d\u53ef\u80fd\u4e3a0\u5c81\uff0c\u53ef\u4ee5\u8fdb\u884c\u5220\u9664\uff1b\u5e74\u9f84\u8d85\u8fc7\u4e0a\u965096\u5c81\u7684\u8fd8\u662f\u6709\u4e00\u5b9a\u7684\u6bd4\u4f8b\uff0c\u5e74\u9f84\u6700\u5927\u4e3a109\u5c81\uff0c\u53ef\u4ee5\u5224\u65ad\u5e94\u4e3a\u566a\u58f0\u3002","18c8ab21":"\u6211\u4eec\u76f4\u63a5\u8c03\u7528statsmodels\u5305\u6765\u5b9e\u73b0\u903b\u8f91\u56de\u5f52\uff1a","7fc16c21":"\u5c0f\u4e8e0.02: unpredictive\n\n0.02 to 0.1: weak\n\n0.1 to 0.3: medium\n\n0.3 to 0.5: strong\n\n\u5927\u4e8e0.5: suspicious","f2643a30":"\u67e5\u770btest_df\u4e2d\u7684\u6570\u636e","aa9e0059":"**4.2\u76f8\u5173\u6027\u5206\u6790\u548cIV\u7b5b\u9009**","f86fd9e4":"**3.1\u5f02\u5e38\u503c\u5904\u7406**","b83b75a5":"**NumberRealEstateLoansOrLines**","4c555dcb":"\u4ece\u4e0a\u56fe\u53ef\u77e5\n* RevolvingUtilizationOfUnsecuredLines\u6b63\u5e38\u6765\u8bb2\u53d6\u503c\u5e94\u4e3a0-1\u4e4b\u95f4\uff0c\u800c\u5176\u6700\u5927\u503c\u4e3a50708\uff0c\u5f88\u6709\u53ef\u80fd\u542b\u6709\u5f02\u5e38\u503c\uff1b\n* age\u6700\u5c0f\u503c\u4e3a0\uff0c\u6700\u5927\u503c\u4e3a109\uff0c\u4e5f\u5f88\u53ef\u80fd\u542b\u6709\u5f02\u5e38\u503c\uff1b\n* MonthlyIncome\u548cNumberOfDependents\u542b\u6709\u7f3a\u5931\u503c\uff0c\u7f3a\u5931\u503c\u7684\u6bd4\u4f8b\u5206\u522b\u4e3a19.82%\u548c2.62%\u3002","2162a3ed":"\u7531\u4ee5\u4e0a\u7684\u63cf\u8ff0\u7edf\u8ba1\u4fe1\u606f\u53ef\u77e5Numdepend\u4e2d\u542b\u6709\u7f3a\u5931\u503c\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u7f3a\u5931\u503c\u60c5\u51b5\u3002","529a233e":"\u6211\u4eec\u518d\u901a\u8fc7\u4e0a\u56fe\u518d\u5bf9\u5927\u4e8e1\u7684\u90e8\u5206\u8fdb\u884c\u7ec6\u5206[1\uff0c100\uff09[100\uff0c1000\uff09\uff0c[1000\uff0c10000\uff09\uff0c10000\u4ee5\u4e0a\u3002","c2f49007":"**1.1\u8f7d\u5165\u6570\u636e**","cc747e12":"**1.3\u67e5\u770b\u63cf\u8ff0\u7edf\u8ba1**","1816d91d":"**3.3\u6570\u636e\u5207\u5206**","3116d74e":"\u901a\u8fc7ROC\u66f2\u7ebf\u548cAUC\u503c\u770b\u5230\uff0cAUC\u7684\u503c\u4e3a0.85\uff0c\u8bf4\u660e\u6a21\u578b\u7684\u533a\u5206\u80fd\u529b\u8fd8\u53ef\u4ee5\u3002","5e311fd6":"**5.1WOE\u8f6c\u6362**\n\n\u6211\u4eec\u5df2\u7ecf\u80fd\u83b7\u53d6\u4e86\u6bcf\u4e2a\u53d8\u91cf\u7684\u5206\u7bb1\u6570\u636e\u548cwoe\u6570\u636e\uff0c\u53ea\u9700\u8981\u6839\u636e\u5404\u53d8\u91cf\u6570\u636e\u8fdb\u884c\u66ff\u6362\uff0c\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a\n","afca5c4c":"# **5.\u6a21\u578b\u5206\u6790**","341ecf67":"\u53ef\u4ee5\u770b\u51faMonthlyIncome\u7f3a\u5931\uff0cNumberOfDependents\u4e0d\u7f3a\u5931\u7684\u6570\u636e\u4e2dNumberOfDependents\u5927\u591a\u53d6\u503c0\uff0c\u6240\u4ee5\u6211\u4eec\u5c06NumberOfDependents\u7684\u7f3a\u5931\u503c\u586b\u5145\u4e3a0.","8349a52c":"\u4e3a\u4e86\u9a8c\u8bc1\u6a21\u578b\u7684\u62df\u5408\u6548\u679c\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5207\u5206\uff0c\u5206\u6210\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002","693f153e":"\u53ef\u4ee5\u770b\u5230\u57281-2\u533a\u95f4\uff0c\u6570\u636e\u5448\u73b0\u8f83\u5e73\u6ed1\u8d8b\u52bf\uff1b\u6211\u4eec\u53ef\u4ee5\u770b\u4e0b\u5404\u533a\u95f4\u7684\u8fdd\u7ea6\u7387\u60c5\u51b5\u3002\n\n","ee29efb7":"\u53ef\u4ee5\u770b\u51fa\u5728Revol\u5927\u4e8e1\u65f6\uff0c\u8fdd\u7ea6\u7387\u5f00\u59cb\u4e0a\u5347\uff0c10-20\u4e4b\u95f4\u8fdd\u7ea6\u7387\u8fbe\u5230\u9ad8\u5cf0\uff0c\u8d85\u8fc720\u540e\u5f00\u59cb\u4e0b\u964d\uff0c\u8d85\u8fc71000\u540e\u5f00\u59cb\u6062\u590d\u6b63\u5e38\uff08\u4e0e0-1\u7684\u8fdd\u7ea6\u7387\u4e00\u81f4\uff09\uff0c\u8bf4\u660e20\u5de6\u53f3\u7684\u503c\u53ef\u80fd\u4e3a\u5f02\u5e38\u503c\u4e0a\u9650\u7684\u9608\u503c\u3002\u53ef\u4ee5\u5c06\u8d85\u8fc720\u7684\u503c\u90fd\u5b9a\u4e49\u4e3a\u5f02\u5e38\u503c\u3002","b69c7978":"\u751f\u6210\u7684IV\u56fe\u4ee3\u7801\uff1a\n\n","511cfb0d":"WoE\u5206\u6790\uff0c \u662f\u5bf9\u6307\u6807\u5206\u7bb1\u3001\u8ba1\u7b97\u5404\u4e2a\u6863\u4f4d\u7684WoE\u503c\u5e76\u89c2\u5bdfWoE\u503c\u968f\u6307\u6807\u53d8\u5316\u7684\u8d8b\u52bf\u3002\u5176\u4e2dWoE\u7684\u6570\u5b66\u5b9a\u4e49\u662f:\n\nwoe=ln(goodattribute\/badattribute)\n\n\u5728\u8fdb\u884c\u5206\u6790\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5404\u6307\u6807\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u5e76\u8ba1\u7b97\u51fa\u76f8\u5e94\u5206\u6863\u7684WoE\u503c\u3002\u5176\u4e2d\u6b63\u5411\u6307\u6807\u8d8a\u5927\uff0cWoE\u503c\u8d8a\u5c0f\uff1b\u53cd\u5411\u6307\u6807\u8d8a\u5927\uff0cWoE\u503c\u8d8a\u5927\u3002\u6b63\u5411\u6307\u6807\u7684WoE\u503c\u8d1f\u659c\u7387\u8d8a\u5927\uff0c\u53cd\u54cd\u6307\u6807\u7684\u6b63\u659c\u7387\u8d8a\u5927\uff0c\u5219\u8bf4\u660e\u6307\u6807\u533a\u5206\u80fd\u529b\u597d\u3002WoE\u503c\u8d8b\u8fd1\u4e8e\u76f4\u7ebf\uff0c\u5219\u610f\u5473\u6307\u6807\u5224\u65ad\u80fd\u529b\u8f83\u5f31\u3002\u82e5\u6b63\u5411\u6307\u6807\u548cWoE\u6b63\u76f8\u5173\u8d8b\u52bf\u3001\u53cd\u5411\u6307\u6807\u540cWoE\u51fa\u73b0\u8d1f\u76f8\u5173\u8d8b\u52bf\uff0c\u5219\u8bf4\u660e\u6b64\u6307\u6807\u4e0d\u7b26\u5408\u7ecf\u6d4e\u610f\u4e49\uff0c\u5219\u5e94\u5f53\u4e88\u4ee5\u53bb\u9664\u3002","c907dbd0":"**\u8ba1\u7b97\u5206\u6570**","e7559ff1":"\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u7684\u5efa\u6a21\u90e8\u5206\u57fa\u672c\u7ed3\u675f\u4e86\u3002\u6211\u4eec\u9700\u8981\u9a8c\u8bc1\u4e00\u4e0b\u6a21\u578b\u7684\u9884\u6d4b\u80fd\u529b\u5982\u4f55\u3002\u6211\u4eec\u4f7f\u7528\u5728\u5efa\u6a21\u5f00\u59cb\u9636\u6bb5\u9884\u7559\u7684test\u6570\u636e\u8fdb\u884c\u68c0\u9a8c\u3002\u901a\u8fc7ROC\u66f2\u7ebf\u548cAUC\u6765\u8bc4\u4f30\u6a21\u578b\u7684\u62df\u5408\u80fd\u529b\u3002 \u5728Python\u4e2d\uff0c\u53ef\u4ee5\u5229\u7528sklearn.metrics\uff0c\u5b83\u80fd\u65b9\u4fbf\u6bd4\u8f83\u4e24\u4e2a\u5206\u7c7b\u5668\uff0c\u81ea\u52a8\u8ba1\u7b97ROC\u548cAUC\u3002 \u5b9e\u73b0\u4ee3\u7801\uff1a","20ed19cd":"**SeriousDlqin2yrs**","cd9017be":"# **Description**\n\n\u94f6\u884c\u5728\u5e02\u573a\u7ecf\u6d4e\u4e2d\u626e\u6f14\u7740\u81f3\u5173\u91cd\u8981\u7684\u89d2\u8272\u3002\u4ed6\u4eec\u51b3\u5b9a\u8c01\u53ef\u4ee5\u83b7\u5f97\u878d\u8d44\uff0c\u4ee5\u53ca\u4ec0\u4e48\u6761\u4ef6\uff0c\u53ef\u4ee5\u505a\u51fa\u6216\u7834\u574f\u6295\u8d44\u51b3\u7b56\u3002\u4e3a\u4e86\u8ba9\u5e02\u573a\u548c\u793e\u4f1a\u53d1\u6325\u4f5c\u7528\uff0c\u4e2a\u4eba\u548c\u4f01\u4e1a\u9700\u8981\u83b7\u5f97\u4fe1\u8d37\u3002 \u4fe1\u7528\u8bc4\u5206\u7b97\u6cd5\uff0c\u5bf9\u8fdd\u7ea6\u6982\u7387\u8fdb\u884c\u731c\u6d4b\uff0c\u662f\u94f6\u884c\u7528\u6765\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u53d1\u653e\u8d37\u6b3e\u7684\u65b9\u6cd5\u3002\u8fd9\u4e00\u7ade\u8d5b\u8981\u6c42\u53c2\u4e0e\u8005\u901a\u8fc7\u9884\u6d4b\u672a\u6765\u4e24\u5e74\u67d0\u4eba\u5c06\u7ecf\u5386\u8d22\u52a1\u56f0\u5883\u7684\u53ef\u80fd\u6027\uff0c\u6765\u6539\u5584\u4fe1\u7528\u8bc4\u5206\u7684\u72b6\u6001\u3002 \u8fd9\u79cd\u7ade\u4e89\u7684\u76ee\u6807\u662f\u5efa\u7acb\u4e00\u4e2a\u6a21\u578b\uff0c\u8ba9\u501f\u6b3e\u4eba\u53ef\u4ee5\u7528\u6765\u5e2e\u52a9\u505a\u51fa\u6700\u597d\u7684\u8d22\u52a1\u51b3\u7b56\u3002","7c2b6e24":"\u53e6\u5916\uff0c\u6570\u636e\u96c6\u4e2d\u597d\u5ba2\u6237\u4e3a0\uff0c\u8fdd\u7ea6\u5ba2\u6237\u4e3a1\uff0c\u8003\u8651\u5230\u6b63\u5e38\u7684\u7406\u89e3\uff0c\u80fd\u6b63\u5e38\u5c65\u7ea6\u5e76\u652f\u4ed8\u5229\u606f\u7684\u5ba2\u6237\u4e3a1\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5176\u53d6\u53cd\u3002","113efc56":"\u6570\u636e\u4e0d\u5e73\u8861\uff0c\u540e\u671f\u9700\u8981\u5904\u7406\u3002","63a74fc0":"**2.2\u597d\u574f\u6bd4**","4df14105":"\u53ef\u4ee5\u770b\u51fa\uff0cDebtRatio\u3001MonthlyIncome\u3001NumberOfOpenCreditLinesAndLoans\u3001NumberRealEstateLoansOrLines\u548cNumberOfDependents\u53d8\u91cf\u7684IV\u503c\u660e\u663e\u8f83\u4f4e\uff0c\u6240\u4ee5\u4e88\u4ee5\u5220\u9664\u3002","a17bef1e":"**RevolvingUtilizationOfUnsecuredLines**","26b308e9":"\u53ef\u4ee5\u770b\u51fa18-40\u5c81\u8fdd\u7ea6\u7387\u6700\u9ad8\uff0c\u968f\u7740\u5e74\u9f84\u589e\u957f\uff0c\u8fdd\u7ea6\u7387\u964d\u4f4e\u3002","21861df9":"**MonthlyIncome**","86fa1980":"**NumberOfOpenCreditLinesAndLoans**","fe39a3fa":"\u53ef\u4ee5\u770b\u51fa\u5927\u4e8e90\u7684\u4e3a\u660e\u663e\u7684\u5f02\u5e38\u503c\u3002","4b378620":"**3.2\u7f3a\u5931\u503c\u5904\u7406**","5352bfac":"\u7f3a\u5931\u503c\u6bd4\u7387\u8fbe\u523020%\uff0c\u4e0d\u80fd\u76f4\u63a5\u5220\u9664\uff0c\u540e\u671f\u6211\u4eec\u91c7\u7528\u968f\u673a\u68ee\u6797\u586b\u8865\u7f3a\u5931\u503c\u3002\n\n","31e4832c":"\u5c06\u9700\u8981\u6d4b\u8bd5\u7684\u6570\u636e\u4e5f\u8fdb\u884c\u66ff\u6362\uff0c\u5e76\u5c06\u5176\u4fdd\u5b58\u5230TestWoeData.csv\u6587\u4ef6\u4e2d","54f5e948":"\u53ef\u4ee5\u770b\u51fa\u5927\u4e8e36\u7684\u6570\u636e\u8fc7\u5c11\uff0c\u6211\u4eec\u628a\u5927\u4e8e36\u7684\u6570\u636e\u548c36\u5408\u5e76\uff0c\u770b\u4e00\u4e0b\u8fdd\u7ea6\u7387\u7684\u60c5\u51b5\u3002\n\n","aaabb16b":"\u56db\u5206\u4f4d\u8ddd\u89c2\u5bdf\u4e00\u4e0b\u5f02\u5e38\u503c\uff1a","f7a1e0ca":"\u8fd0\u7528\u903b\u8f91\u56de\u5f52\u6a21\u578b\u8fdb\u884c\u9884\u6d4b","fe67380a":"**4.3WOE**","f6158419":"\u9488\u5bf9\u4e0d\u80fd\u6700\u4f18\u5206\u7bb1\u7684\u53d8\u91cf\uff0c\u5206\u7bb1\u5982\u4e0b\uff1a","48c30010":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u7528\u7ecf\u8fc7\u6e05\u6d17\u540e\u7684\u6570\u636e\u770b\u4e00\u4e0b\u53d8\u91cf\u95f4\u7684\u76f8\u5173\u6027\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u76f8\u5173\u6027\u5206\u6790\u53ea\u662f\u521d\u6b65\u7684\u68c0\u67e5\uff0c\u8fdb\u4e00\u6b65\u68c0\u67e5\u6a21\u578b\u7684VI\uff08\u8bc1\u636e\u6743\u91cd\uff09\u4f5c\u4e3a\u53d8\u91cf\u7b5b\u9009\u7684\u4f9d\u636e\u3002 \u76f8\u5173\u6027\u56fe\u6211\u4eec\u901a\u8fc7Python\u91cc\u9762\u7684seaborn\u5305\uff0c\u8c03\u7528heatmap()\u7ed8\u56fe\u51fd\u6570\u8fdb\u884c\u7ed8\u5236\uff0c\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a","5f7946f9":"\u6211\u4eec\u5206\u7ec4\u770b\u4e00\u4e0bage\u5404\u9636\u6bb5\u8fdd\u7ea6\u7387\u60c5\u51b5","6ab7ffb3":"# **6.\u6a21\u578b\u8bc4\u4f30**","710793eb":"\u8bfb\u53d6\u6d4b\u8bd5\u96c6\u6570\u636e","45823ffb":" # **1.\u6570\u636e\u83b7\u53d6**","ec3fd5e2":"\u8bc1\u636e\u6743\u91cd\uff08Weight of Evidence,WOE\uff09\u8f6c\u6362\u53ef\u4ee5\u5c06Logistic\u56de\u5f52\u6a21\u578b\u8f6c\u53d8\u4e3a\u6807\u51c6\u8bc4\u5206\u5361\u683c\u5f0f\u3002\u5f15\u5165WOE\u8f6c\u6362\u7684\u76ee\u7684\u5e76\u4e0d\u662f\u4e3a\u4e86\u63d0\u9ad8\u6a21\u578b\u8d28\u91cf\uff0c\u53ea\u662f\u4e00\u4e9b\u53d8\u91cf\u4e0d\u5e94\u8be5\u88ab\u7eb3\u5165\u6a21\u578b\uff0c\u8fd9\u6216\u8005\u662f\u56e0\u4e3a\u5b83\u4eec\u4e0d\u80fd\u589e\u52a0\u6a21\u578b\u503c\uff0c\u6216\u8005\u662f\u56e0\u4e3a\u4e0e\u5176\u6a21\u578b\u76f8\u5173\u7cfb\u6570\u6709\u5173\u7684\u8bef\u5dee\u8f83\u5927\uff0c\u5176\u5b9e\u5efa\u7acb\u6807\u51c6\u4fe1\u7528\u8bc4\u5206\u5361\u4e5f\u53ef\u4ee5\u4e0d\u91c7\u7528WOE\u8f6c\u6362\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cLogistic\u56de\u5f52\u6a21\u578b\u9700\u8981\u5904\u7406\u66f4\u5927\u6570\u91cf\u7684\u81ea\u53d8\u91cf\u3002\u5c3d\u7ba1\u8fd9\u6837\u4f1a\u589e\u52a0\u5efa\u6a21\u7a0b\u5e8f\u7684\u590d\u6742\u6027\uff0c\u4f46\u6700\u7ec8\u5f97\u5230\u7684\u8bc4\u5206\u5361\u90fd\u662f\u4e00\u6837\u7684\u3002 \u5728\u5efa\u7acb\u6a21\u578b\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u7b5b\u9009\u540e\u7684\u53d8\u91cf\u8f6c\u6362\u4e3aWoE\u503c\uff0c\u4fbf\u4e8e\u4fe1\u7528\u8bc4\u5206\u3002","ef7c9478":"\u5254\u9664\u53d8\u91cfage\u3001NumberOfTime30-59DaysPastDueNotWorse\u3001NumberOfTimes90DaysLate\u3001NumberOfTime60-89DaysPastDueNotWorse\u548cNumberRealEstateLoansOrLines\u7684\u5f02\u5e38\u503c","b5f9f040":"**Age**","9ec9cf31":"**DebtRatio**","849f4aef":"# **8.Submission\u63d0\u4ea4**","5fb352b2":"**5.2Logisic\u6a21\u578b\u5efa\u7acb**","45490195":"\u672c\u6587\u53c2\u8003\u6587\u732e\u4e3b\u8981\u94fe\u63a5\u4e3a\uff1a\n\nhttps:\/\/zhuanlan.zhihu.com\/p\/50051580\n\nhttps:\/\/github.com\/chenxiangzhen\/Give_Me_Some_Credit","ca5d4fc7":"# **4.\u53d8\u91cf\u9009\u62e9**","cf451b99":"\u53ef\u4ee5\u770b\u5230\u8d85\u8fc750\u7684\u70b9\u4e3a\u660e\u663e\u7684\u5f02\u5e38\u70b9\u3002","72659ba7":"\u6211\u4eec\u770b\u5230\u5927\u4e8e1\u7684\u6570\u636e\u7edd\u5927\u591a\u6570\u6570\u636e\u96c6\u4e2d\u57281-20\u4e4b\u95f4\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\u627e\u5230\u5f02\u5e38\u503c\u7684\u9608\u503c\uff0c\u6211\u4eec\u5206\u533a\u95f4\uff0c\u5206\u522b\u770b\u4e00\u4e0b\u8fdd\u7ea6\u7387\u60c5\u51b5\u3002","3a08c161":"# **7.\u6a21\u578b\u8bc4\u5206**","5b025125":"# **3.\u6570\u636e\u9884\u5904\u7406**","16402cd3":"\u6211\u4eec\u770b\u52301-2\u7684\u8fdd\u7ea6\u7387\u8fbe\u5230\u6700\u9ad8\uff0c\u8d85\u8fc72\u4ee5\u540e\u8fdd\u7ea6\u7387\u5f00\u59cb\u7a33\u5b9a\uff0c\u6211\u4eec\u628a2\u4f5c\u4e3a\u5f02\u5e38\u503c\u4e0a\u9650\u7684\u9608\u503c\u3002\u5e76\u628a\u5927\u4e8e2\u7684\u6570\u636e\u548c0-1\u7684\u6570\u636e\u8fdb\u884c\u5408\u5e76\u3002","db033900":"**4.1\u5206\u7bb1\u5904\u7406**","dac138b4":"# **\u9879\u76ee\u6d41\u7a0b**\n* \u6570\u636e\u83b7\u53d6\uff0c\u5305\u62ec\u83b7\u53d6\u5b58\u91cf\u5ba2\u6237\u53ca\u6f5c\u5728\u5ba2\u6237\u7684\u6570\u636e\u3002\n* \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790(EDA)\uff0c\u8be5\u6b65\u9aa4\u4e3b\u8981\u662f\u83b7\u53d6\u6837\u672c\u603b\u4f53\u7684\u5927\u6982\u60c5\u51b5\uff0c\u63cf\u8ff0\u6837\u672c\u603b\u4f53\u60c5\u51b5\u7684\u6307\u6807\u4e3b\u8981\u6709\u76f4\u65b9\u56fe\u3001\u7bb1\u5f62\u56fe\u7b49\u3002\n* \u6570\u636e\u9884\u5904\u7406\uff0c\u4e3b\u8981\u5de5\u4f5c\u5305\u62ec\u6570\u636e\u6e05\u6d17\u3001\u7f3a\u5931\u503c\u5904\u7406\u3001\u5f02\u5e38\u503c\u5904\u7406\u3002\n* \u53d8\u91cf\u9009\u62e9\uff0c\u8be5\u6b65\u9aa4\u4e3b\u8981\u662f\u901a\u8fc7\u7edf\u8ba1\u5b66\u7684\u65b9\u6cd5\uff0c\u7b5b\u9009\u51fa\u5bf9\u8fdd\u7ea6\u72b6\u6001\u5f71\u54cd\u6700\u663e\u8457\u7684\u6307\u6807\u3002\n* \u6a21\u578b\u5f00\u53d1\uff0c\u8be5\u6b65\u9aa4\u4e3b\u8981\u5305\u62ec\u53d8\u91cf\u5206\u6bb5\u3001\u53d8\u91cf\u7684WOE\uff08\u8bc1\u636e\u6743\u91cd\uff09\u53d8\u6362\u548c\u903b\u8f91\u56de\u5f52\u4f30\u7b97\u4e09\u90e8\u5206\u3002\n* \u6a21\u578b\u8bc4\u4f30\uff0c\u8be5\u6b65\u9aa4\u4e3b\u8981\u662f\u8bc4\u4f30\u6a21\u578b\u7684\u533a\u5206\u80fd\u529b\u3001\u9884\u6d4b\u80fd\u529b\u3001\u7a33\u5b9a\u6027\uff0c\u5e76\u5f62\u6210\u6a21\u578b\u8bc4\u4f30\u62a5\u544a\uff0c\u5f97\u51fa\u6a21\u578b\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u7684\u7ed3\u8bba\u3002\n* \u5efa\u7acb\u8bc4\u5206\u7cfb\u7edf\uff0c\u6839\u636e\u4fe1\u7528\u8bc4\u5206\u65b9\u6cd5\uff0c\u5efa\u7acb\u81ea\u52a8\u4fe1\u7528\u8bc4\u5206\u7cfb\u7edf\u3002","3bbac9c7":"\u53d8\u91cf\u5206\u7bb1\uff08binning\uff09\u662f\u5bf9\u8fde\u7eed\u53d8\u91cf\u79bb\u6563\u5316\uff08discretization\uff09\u7684\u4e00\u79cd\u79f0\u547c\u3002\u4fe1\u7528\u8bc4\u5206\u5361\u5f00\u53d1\u4e2d\u4e00\u822c\u6709\u5e38\u7528\u7684\u7b49\u8ddd\u5206\u6bb5\u3001\u7b49\u6df1\u5206\u6bb5\u3001\u6700\u4f18\u5206\u6bb5\u3002\u6700\u4f18\u5206\u7bb1\u5982\u4e0b\uff1a","0e175474":"**1.2\u67e5\u770b\u6570\u636e\u4fe1\u606f**","ab2d4d6e":"\u4eceNumopen\u548cNumestate\u7684\u8fdd\u7ea6\u7387\u5206\u5e03\u53ef\u4ee5\u770b\u51fa\uff0c\u8d37\u6b3e\u6570\u91cf\u4e3a0\u65f6\u5e76\u4e0d\u662f\u8fdd\u7ea6\u7387\u6700\u4f4e\u7684\uff0c\u4e0d\u52a8\u4ea7\u8d37\u6b3e\u6570\u91cf\u4e3a1\u65f6\u8fdd\u7ea6\u7387\u6700\u4f4e\uff0c\u4f46\u968f\u7740\u6253\u6b3e\u6570\u91cf\u589e\u52a0\uff0c\u8fdd\u7ea6\u7387\u4e5f\u968f\u7740\u589e\u9ad8\u3002","2ef3f695":"**NumberOfDependents**","310ce85c":"# **\u53c2\u8003\u6587\u732e**","d2624f91":"**\u5bfc\u5165\u6211\u4eec\u6240\u9700\u8981\u7684\u5305**","83f1d3b2":"\u6211\u4eec\u5c06\u6bcf\u4e2a\u53d8\u91cf\u90fd\u8fdb\u884c\u66ff\u6362,\u5e76\u5c06\u5176\u4fdd\u5b58\u5230WoeData.csv\u6587\u4ef6\u4e2d\uff1a\n","5f94b185":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5404\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u662f\u975e\u5e38\u5c0f\u7684\u3002NumberOfOpenCreditLinesAndLoans\u548cNumberRealEstateLoansOrLines\u7684\u76f8\u5173\u6027\u7cfb\u6570\u4e3a0.43\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u8fdb\u4e00\u6b65\u8ba1\u7b97\u6bcf\u4e2a\u53d8\u91cf\u7684Infomation Value\uff08IV\uff09\u3002IV\u6307\u6807\u662f\u4e00\u822c\u7528\u6765\u786e\u5b9a\u81ea\u53d8\u91cf\u7684\u9884\u6d4b\u80fd\u529b\u3002 \u5176\u516c\u5f0f\u4e3a\uff1a IV=sum((goodattribute-badattribute)*ln(goodattribute\/badattribute)) \u901a\u8fc7IV\u503c\u5224\u65ad\u53d8\u91cf\u9884\u6d4b\u80fd\u529b\u7684\u6807\u51c6\u662f\uff1a","da98f55c":"* \u53d8\u91cfMonthlyIncome\u7f3a\u5931\u7387\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u6839\u636e\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u5173\u7cfb\u586b\u8865\u7f3a\u5931\u503c\uff0c\u6211\u4eec\u91c7\u7528\u968f\u673a\u68ee\u6797\u6cd5\n* NumberOfDependents\u53d8\u91cf\u7f3a\u5931\u503c\u6bd4\u8f83\u5c11\uff0c\u76f4\u63a5\u5220\u9664\uff0c\u5bf9\u603b\u4f53\u6a21\u578b\u4e0d\u4f1a\u9020\u6210\u592a\u5927\u5f71\u54cd\u3002","eb3cc219":"\u56e0\u6570\u636e\u5206\u5e03\u8de8\u5ea6\u6bd4\u8f83\u5927\uff0c\u6211\u4eec\u5c06\u6570\u636e\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5c0f\u4e8e1\u548c\u5927\u4e8e1\u7684\u90e8\u5206\uff0c\u6765\u770b\u4e00\u4e0b\u4e24\u90e8\u5206\u7684\u6570\u636e\u5206\u5e03\u3002\u770b\u4e00\u4e0b\u5b9e\u9645\u60c5\u51b5\u3002","fa9fe397":"\u5c06\u8f93\u51fa\u7ed3\u679c\u5b58\u81f3\u8868\u683c\u4e2d","4a3ca134":"\u7528\u5408\u9002\u7684\u65b9\u5f0f\u5bf9\u5176\u8fdb\u884c\u586b\u5145","ba328a08":"**2.1\u521d\u6b65\u6e05\u6d17**\n\n\u5148\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u521d\u6b65\u6e05\u6d17\uff0c\u65b9\u4fbf\u4e0b\u4e00\u6b65\u5bf9\u5404\u53d8\u91cfEDA\u5206\u6790\u3002\n\n","eb684a07":"\u53ef\u4ee5\u770b\u51faNumdepend\u7f3a\u5931\u7684\uff0cMonthlyIncome\u4e5f\u540c\u65f6\u7f3a\u5931\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u770b\u4e00\u4e0bMonthlyIncome\u7f3a\u5931\uff0cNumberOfDependents\u4e0d\u7f3a\u5931\u7684\u6570\u636e\u5206\u5e03\u3002","31d2ca00":"\u6570\u636e\u5206\u5e03\u8de8\u5ea6\u8f83\u5927\uff0c\u6211\u4eec\u5206\u7ec4\u67e5\u770b\u6570\u636e\u5206\u5e03\u60c5\u51b5\u3002","f21129b8":"\u53ef\u4ee5\u770b\u51faage\u7684\u5206\u5e03\u57fa\u672c\u7b26\u5408\u6b63\u6001\u5206\u5e03\uff0c\u4f46\u542b\u6709\u5f02\u5e38\u503c\u3002\n\n\u4ece\u4ee5\u4e0a\u5206\u5e03\u6765\u770b\uff0cage\u7684\u5206\u5e03\u57fa\u672c\u7b26\u5408\u6b63\u6001\u5206\u5e03\uff0c\u6211\u4eec\u75283\u500d\u6807\u51c6\u5dee\u6765\u7b5b\u9009\u5f02\u5e38\u503c\u3002","98dab30c":"\u5c06cs-test\u6570\u636e\u8fdb\u884c\u8f6c\u6362"}}