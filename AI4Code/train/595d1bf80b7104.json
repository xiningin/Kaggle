{"cell_type":{"eac1e88b":"code","9985b43a":"code","9b64f71e":"code","42c76521":"code","f62cf808":"code","a9570c03":"code","4a44d75a":"code","07cb46a8":"code","a99ea56d":"code","affe9e44":"code","298dab62":"code","8c26535f":"code","068b286b":"code","4c2e3e25":"code","3fa177d8":"code","95d2f40b":"code","ac63faa9":"code","bffdab4c":"code","dbd6524e":"code","d068229d":"code","b5bc6a4e":"code","1d41b2f0":"code","208a602e":"code","3056f32e":"code","3d166385":"code","355e91d9":"code","e65bb4d0":"code","3e6dda4b":"code","e9e2057c":"code","4ea5a203":"code","52a6a15b":"code","0f036693":"markdown","34454a24":"markdown","5d2d0e15":"markdown","ea318a23":"markdown","6e2398ec":"markdown","e7c0eabc":"markdown","8119e03c":"markdown","57d4c0ed":"markdown","de5c21b3":"markdown"},"source":{"eac1e88b":"# Data Processing and Cleaning\nimport numpy as np\nimport pandas as pd\n\n\n# Data Visualization\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import axes3d\nimport seaborn as sns\n\n# Sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import export_graphviz\n\n# Modeling\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nimport lightgbm as lgb\n\n#Miscellaneous\nfrom tqdm import tqdm_notebook\n\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\nimport copy\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","9985b43a":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')","9b64f71e":"train.head(3).T","42c76521":"train.info()","f62cf808":"rf_train = copy.copy(train)\nrf_test = copy.copy(test)","a9570c03":"sns.pairplot(rf_train)\n\n","4a44d75a":"sns.jointplot(x=rf_train[\"popularity\"], y=rf_train[\"revenue\"], kind='scatter')\n","07cb46a8":"rf_train['original_language'].value_counts()","a99ea56d":"rf_train['status'].value_counts()","affe9e44":"#from sklearn import preprocessing\n#scaler = preprocessing.StandardScaler()\n#rf_train = scaler.fit_transform(rf_train)\n#rf_train = pd.DataFrame(rf_train, columns=['popularity','runtime'])\n#rf_test = scaler.fit_transform(rf_test)\n#rf_test = pd.DataFrame(rf_test, columns=['popularity','runtime'])","298dab62":"rf_train['release_date'] = pd.to_datetime(rf_train['release_date'])\nrf_train['year'], rf_train['month'] = rf_train['release_date'].dt.year, rf_train['release_date'].dt.month\n\nrf_test['release_date'] = pd.to_datetime(rf_test['release_date'])\nrf_test['year'], rf_test['month'] = rf_test['release_date'].dt.year, rf_test['release_date'].dt.month\n","8c26535f":"from sklearn.preprocessing import LabelEncoder\nle_language_train = LabelEncoder()\n#Train\nrf_train['language_encoded'] = le_language_train.fit_transform(rf_train.original_language)\n\n\nrf_train.head()","068b286b":"rf_train.dtypes","4c2e3e25":"le_language_test = LabelEncoder()\n\n\nrf_test['language_encoded'] = le_language_test.fit_transform(rf_test.original_language)\n\n\nrf_test.head()","3fa177d8":"rf_test.dtypes","95d2f40b":"#rf_train[['id','budget','popularity','runtime','revenue']]\nrf_train.drop(['belongs_to_collection','genres','homepage','imdb_id','original_language','original_title',\n              'overview','poster_path','production_companies','production_countries','release_date',\n              'spoken_languages','status','tagline','title','Keywords','cast','crew'], axis=1, inplace=True)\n\nrf_train.head()","ac63faa9":"#rf_train[['id','budget','popularity','runtime','revenue']]\nrf_test.drop(['belongs_to_collection','genres','homepage','imdb_id','original_language','original_title',\n              'overview','poster_path','production_companies','production_countries','release_date',\n              'spoken_languages','status','tagline','title','Keywords','cast','crew'], axis=1, inplace=True)\nrf_test.head()","bffdab4c":"#Count NAs\nrf_test.isna().sum()","dbd6524e":"rf_train.isna().sum()","d068229d":"#Lets fill with Mean\nmean_runtime=rf_train.iloc[:,3]\nmean_runtime.head()\n","b5bc6a4e":"mean_runtime.mean()","1d41b2f0":"rf_train=rf_train.fillna(mean_runtime.mean())\nrf_test=rf_test.fillna(mean_runtime.mean())","208a602e":"rf_train.isna().sum()","3056f32e":"# comparing sizes of data frames \nprint(\"Old data frame length:\", len(train), \"\\nNew data frame length:\",  \n       len(rf_train), \"\\nNumber of rows with at least 1 NA value: \", \n       (len(train)-len(rf_train))) ","3d166385":"# comparing sizes of data frames \nprint(\"Old data frame length:\", len(test), \"\\nNew data frame length:\",  \n       len(rf_test), \"\\nNumber of rows with at least 1 NA value: \", \n       (len(test)-len(rf_test))) ","355e91d9":"#Dont need this since filled with Mean but kept for others to use\n#rf_train =rf_train.dropna(how ='any') \n#rf_test=rf_test.dropna(how ='any') ","e65bb4d0":"rf_train.dtypes","3e6dda4b":"# Create Numpy arrays of train, test and target (Survived) dataframes to feed into our models\ny_train = rf_train['revenue']\nx_train = rf_train.drop(['revenue'], axis=1).values \nx_test = rf_test.values\n\n# Import DecisionTreeRegressor from sklearn.tree\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Create Decision Tree with max_depth = 6\ndecision_tree = DecisionTreeRegressor(max_depth = 6)\ndecision_tree.fit(x_train, y_train)\n\n","e9e2057c":"# Predicting results for test dataset\ny_pred = decision_tree.predict(x_test)\nsubmission3 = pd.DataFrame({\n        \"id\": rf_test['id'],\n        \"revenue\": y_pred\n    })\n\n# Output Submission\nsubmission3.to_csv('submission3.csv', index=False)","4ea5a203":"#Verify this is the correct row count for submissions.\nsubmission3.info()\n","52a6a15b":"submission3","0f036693":"Exporting Results\n\n","34454a24":"Drop Training Data NAs","5d2d0e15":"# Random Forest Time\n","ea318a23":"# Data Normalization","6e2398ec":"Good Resources for Python\nhttps:\/\/datacamp.com\nhttps:\/\/python-graph-gallery.com\n\n**Notes:\n2019-06-18 (Rev 1)**\n<br>-Scored Budget, Popularity, Runtime for dependent variable Revenue.\n<br>-Score 3.09\n\n**2019-06-18 (Rev 2)**\n<br>-Scored One Hot Encoding, Year, Month, Language\n<br>-Score 2.80\n\n**2019-06-18 (Rev 3)**\n<br>-Small Forest Depth Pruning\n<br>-Score 2.77","e7c0eabc":"# EDA","8119e03c":"Fill NAs with Mean","57d4c0ed":"# Copy data\n","de5c21b3":"# One Hot Encoding"}}