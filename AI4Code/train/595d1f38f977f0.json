{"cell_type":{"fe821cd8":"code","ff85a52b":"code","09ea7e57":"code","12ca9bbc":"code","16efd9ea":"code","4fb11d87":"code","7e5a3a57":"code","b639ab52":"code","b35443f7":"code","6fac268e":"code","a75bc270":"code","a3efa690":"code","bc496b90":"code","ff77ecd2":"code","89a87663":"code","ccd18fc4":"code","ada79491":"code","2367722d":"code","e40e6df2":"code","7f8fdbc1":"markdown","acf498ef":"markdown","03ff04a6":"markdown","80b29620":"markdown","40faaa66":"markdown","505a03a6":"markdown","59f24dc0":"markdown","aadfc94c":"markdown"},"source":{"fe821cd8":"# Visualisations\nimport matplotlib.pyplot as plt \nimport matplotlib\nimport plotly\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nfrom plotly.tools import make_subplots\ninit_notebook_mode()\n\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n# Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Data exploration\nimport pandas as pd\n\n# Numerical\nimport numpy as np\n\n# Spatial analysis\nimport geopandas as gpd   # used to read .shp file\nfrom shapely.geometry import Point, Polygon, shape\n# import utm   # Need to be installed, coordinates conversion\n\n# Regular expressions\nimport re\n\n# Random\nnp.random.seed(11)\n\n# Files in dataset\nimport os\nprint(os.listdir('..\/input\/nyc-crimes-2018-random-forest-regressor-nans'))   # 2nd kernel output\nprint(os.listdir('..\/input\/ny-police-precincts'))   # Police precincts boundary folder","ff85a52b":"# Main df\ncrimes_original = pd.read_csv('..\/input\/nyc-crimes-2018-random-forest-regressor-nans\/crimes_NYC.csv')\ncrimes_original[:5]","09ea7e57":"# Precincts are not needed with this version of notebook. You can skip this cell.\n# Precincts\nprecincts = gpd.read_file('..\/input\/ny-police-precincts\/geo_export_e973c2ae-18a9-437a-8f40-bf039d82ad2e.shp')\nprecincts[:5]","12ca9bbc":"# Change CMPLNT_FR_DT series to datetime.time type\ncrimes_original.CMPLNT_FR_TM = pd.to_datetime(crimes_original.CMPLNT_FR_TM, format='%H:%M:%S').dt.time\ntype(crimes_original.CMPLNT_FR_TM[0])","16efd9ea":"# Choose colors for plotly plots\nimport colorlover as cl\nfrom IPython.display import HTML\n\nchosen_colors=cl.scales['9']['seq']['BuPu']\nprint('The color palette chosen for this notebook is:')\nHTML(cl.to_html(chosen_colors))","4fb11d87":"# Counted\nborogroup = crimes_original.BORO_NM.value_counts()\nboro = borogroup.index","7e5a3a57":"# Crimes divided into boroughs - plotly\ntrace1 = go.Bar(\n    x = boro,\n    y = borogroup,\n    name = 'No. of crimes',\n    textposition = 'outside',\n    marker = dict(color=chosen_colors[6],\n                line=dict(\n                    color='rgb(48,12,80)',\n                    width=2.5,\n                )        \n    ),\n    opacity = 0.65\n)\n\ndata=[trace1]\n\nlayout = go.Layout(\n    title = 'No. of crimes in New York Boroughs',\n    xaxis = dict( title = 'Borough'),\n    yaxis = dict( title = 'Np. of crimes'), width=700, height=500)\n   \n\nfigure = go.Figure(data=data, layout=layout)\npy.iplot(figure)","b639ab52":"# Calculate incidents dvided into level of offence\nsum_mis = crimes_original.BORO_NM[crimes_original.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()\nsum_fel = crimes_original.BORO_NM[crimes_original.LAW_CAT_CD == 'FELONY'].value_counts()\nsum_vio = crimes_original.BORO_NM[crimes_original.LAW_CAT_CD == 'VIOLATION'].value_counts()","b35443f7":"# Grouped bar chart\ntrace1 = go.Bar(\n    x = boro,\n    y = sum_mis,\n    name = 'MISDEMEANOR',\n    marker = dict(color=chosen_colors[7]),\n    opacity = 0.7\n)\n\ntrace2 = go.Bar(\n    x = boro,\n    y = sum_fel,\n    name = 'FELONY',\n    marker = dict(color=chosen_colors[5]),\n    opacity = 0.7\n)\n\ntrace3 = go.Bar(\n    x = boro,\n    y = sum_vio,\n    name = 'VIOLATION',\n    marker = dict(color=chosen_colors[3]),\n    opacity = 0.7\n)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    title = 'No. of incidents in New York Boroughs divided into levels of offence',\n    barmode='group',\n    xaxis = dict( title = 'Borough'),\n    yaxis = dict( title = 'Np. of crimes'), width=700, height=500\n)\n\nfigure = go.Figure(data=data, layout=layout)\npy.iplot(figure)","6fac268e":"# Prepare data for for horizontal bar chart\n\n# time boundaries\nfive_am = pd.Timestamp('5:00').time()\none_pm = pd.Timestamp('13:00').time()\nnine_pm = pd.Timestamp('21:00').time()\nmidnight = pd.Timestamp('00:00').time()\n\n#Calculating x_data\nsum_5_13 = crimes_original.BORO_NM[(crimes_original.CMPLNT_FR_TM > five_am)\n                                   & (crimes_original.CMPLNT_FR_TM <= one_pm)].value_counts()\nsum_13_21 = crimes_original.BORO_NM[(crimes_original.CMPLNT_FR_TM > one_pm)\n                                   & (crimes_original.CMPLNT_FR_TM <= nine_pm)].value_counts()\nsum_21_5 = crimes_original.BORO_NM[((crimes_original.CMPLNT_FR_TM > nine_pm)\n                                   & (crimes_original.CMPLNT_FR_TM <= midnight))\n                                   | ((crimes_original.CMPLNT_FR_TM > midnight) \n                                   & (crimes_original.CMPLNT_FR_TM <= five_am))].value_counts()\n\n# x_data dataframe\nx_df = pd.DataFrame({'sum_5_13': sum_5_13, 'sum_13_21': sum_13_21, 'sum_21_5': sum_21_5})\nx_df['sum_5_13%'] = (x_df['sum_5_13'] \/ x_df.sum(axis=1)).mul(100)\nx_df['sum_13_21%'] = (x_df['sum_13_21'] \/ x_df.sum(axis=1)).mul(100)\nx_df['sum_21_5%'] = (x_df['sum_21_5'] \/ x_df.sum(axis=1)).mul(100)\nx_df_percent = x_df[['sum_5_13%', 'sum_13_21%', 'sum_21_5%']]\n\n# I had to follow example from plot.ly site and I converted df values to list of lists.\ndef make(x_df_percent):\n    brooklyn=[]\n    manhattan=[]\n    bronx=[]\n    queens=[]\n    staten_island=[]\n    all_to = [brooklyn, manhattan, bronx, queens, staten_island]\n    for i in range(0, len(all_to)):\n        for j in range(0, x_df_percent.shape[1]):\n            all_to[i].append(x_df_percent.iloc[i, j])\n            \n    return all_to\n\nall_to = make(x_df_percent)","a75bc270":"# Horizontal bar plot with percents of crimes in time of day\n\ntop_labels = ['Early mornig,<br>midday', 'Afternoon,<br>early evening', 'Late evening,<br>night']\n\nx_data = all_to\ny_data = x_df_percent.index\n\ntraces = []\n# Plot traces - 15 elements\nfor i in range(0, len(x_data[0])):\n        for xd, yd in zip(x_data, y_data):\n            traces.append(go.Bar(\n                x=[xd[i]],\n                y=[yd],\n                orientation='h',\n                marker=dict(\n                    color=chosen_colors[7-i],\n                    line=dict(\n                        color='rgb(248, 248, 255)',\n                        width=1)\n                ),\n            ))\n\nlayout = go.Layout(\n    title='Percentage share of NYC boroughs crimes at different times',\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    \n    ),\n    barmode='stack',\n    bargap=0.3,\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    margin=dict(\n        l=120,\n        r=10,\n        t=140,\n        b=80\n    ),\n    showlegend=False,\n    height = 450,\n    width = 700\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.11, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=16,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0].round(1)) + '%',\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first position on the top\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.18,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    \n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i].round(1)) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the top scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.18,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n            \nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig)","a3efa690":"# Violin plot, crimes divided into days of week\n\n# new column in df - day of week\ncrimes_original['inc_day'] =  pd.to_datetime(crimes_original.CMPLNT_FR_DT,  format='%m\/%d\/%Y', errors='coerce').dt.dayofweek\n# round incident time to fullhour\ncrimes_original.CMPLNT_FR_TM = crimes_original.CMPLNT_FR_TM.apply(lambda x: x.hour)\n# map with dict\ndays = {0: \"Monday\", 1: \"Tuesday\", 2: \"Wednesday\", 3: \"Thursday\", 4: \"Friday\", 5: \"Saturday\", 6: \"Sunday\"}\ncrimes_original['inc_day'] = crimes_original['inc_day'].map(days)\n# above solution is not perfect, bot works and I`ll improve it in near future\ncrimes_original['inc_day'] = crimes_original['inc_day'].fillna(method='ffill')\n\n# All works perfect technically, but methond of filling nans is inappropriate and I don`t know why changing string to datetime \n# doesn`t work with date like 01\/01\/2017. Solve it! \n\n# chart layout params\nvals = [1, 4, 7, 10, 13, 16, 19, 22]   # y-axis values\n# order weekdays\narray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ncrimes_original['inc_day'] = pd.Categorical(crimes_original['inc_day'], categories=array, ordered=True)\ncrimes_original.sort_values(by='inc_day', inplace=True)\n\n#plot\ndata = []\nfor i in range(0, len(pd.unique(crimes_original['inc_day']))):\n    trace = {\n        'type': 'violin',\n        'x': crimes_original['inc_day'][crimes_original['inc_day'] == pd.unique(crimes_original['inc_day'])[i]],\n        'y': crimes_original['CMPLNT_FR_TM'][crimes_original['inc_day'] == pd.unique(crimes_original['inc_day'])[i]],\n        'name': pd.unique(crimes_original['inc_day'])[i],\n        'box': {\n            'visible': True\n        },\n        'meanline': {\n            'visible': True\n        },\n        \"color\": chosen_colors[i]\n    }\n    data.append(trace)\n    \nfig = {\n    'data': data,\n    'layout': {\n        'title': 'Total incident distribution<br>',\n        'yaxis': {\n            'zeroline': False,\n            'tickvals': vals,\n        },\n        'height': 700,\n    }\n}\n\npy.iplot(fig, validate=False)","bc496b90":"# Violin plot suspector gender in weekdays\n\nshowlegend = [True, False, False, False, False, False, False]\n\ndata = []\nfor i in range(0, len(pd.unique(crimes_original['inc_day']))):\n    male = {\n            \"type\": 'violin',\n            'x': crimes_original['inc_day'][(crimes_original['suspector_sex_rand'] == 'M') & (crimes_original['inc_day'] == pd.unique(crimes_original['inc_day'])[i])],\n            'y': crimes_original['CMPLNT_FR_TM'][(crimes_original['suspector_sex_rand'] == 'M') & (crimes_original['inc_day'] == pd.unique(crimes_original['inc_day'])[i])],\n            \"legendgroup\": 'M',\n            \"scalegroup\": 'M',\n            \"name\": 'M',\n            \"side\": 'negative',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": '#C9DB6E'\n            },\n            \"marker\": {\n                \"line\": {\n                    \"width\": 2,\n                    \"color\": '#C9DB6E'\n                }\n            },\n        'showlegend': showlegend[i] \n        }\n    data.append(male)\n    female = {\n            \"type\": 'violin',\n            'x': crimes_original['inc_day'][(crimes_original['suspector_sex_rand'] == 'F') & (crimes_original['inc_day'] == pd.unique(crimes_original['inc_day'])[i])],\n            'y': crimes_original['CMPLNT_FR_TM'][(crimes_original['suspector_sex_rand'] == 'F') & (crimes_original['inc_day'] == pd.unique(crimes_original['inc_day'])[i])],\n            \"legendgroup\": 'F',\n            \"scalegroup\": 'F',\n            \"name\": 'F',\n            \"side\": 'positive',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": '#F5845B'\n            },\n            \"marker\": {\n                \"line\": {\n                    \"width\": 2,\n                    \"color\": '#F5845B'\n                }\n            },\n        'showlegend': showlegend[i]\n        }\n    data.append(female)\n\nfig = {\n    \"data\": data,\n    \"layout\" : {\n        \"title\": \"Incidents distribution<br>scaled by number of incidents per gender\",\n        \"yaxis\": {\n            \"zeroline\": False,\n            \"tickvals\": vals,\n            \"title\": \"Hours\"\n        },\n        \"violingap\": 0,\n        \"violingroupgap\": 0,\n        \"violinmode\": \"overlay\",\n        'height': 700\n    }\n}\n\n\npy.iplot(fig, validate = False)","ff77ecd2":"# Incidents by hour\nincidents_hour = crimes_original.groupby(['CMPLNT_FR_TM', 'suspector_sex_rand']).count().reset_index()\n\ntrace = go.Bar(\n    x=incidents_hour.CMPLNT_FR_TM,\n    y=incidents_hour.ADDR_PCT_CD,\n    name='Number of incidents',\n    marker=dict(\n        color=chosen_colors[6],\n        opacity=0.65,\n    )\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title='No. of incidents by hour',\n    xaxis=dict(\n        title='Hour',\n        tick0=0,\n        dtick=1,\n    ),\n    yaxis=dict(\n        title='Number of incidents'\n    ),\n    barmode='stack',\n    height=500,\n    width=1000, \n)\n\nfigure = go.Figure(data=data, layout=layout)\n\npy.iplot(figure)","89a87663":"# Stacked bar plot\ntemp_df = incidents_hour\n\ndata = []\n\ntraces_names = ['M', 'F']\n\nfor i in range(2):\n    temp_df1=temp_df[(incidents_hour.suspector_sex_rand==traces_names[i])]\n    data.append(\n        go.Bar(\n            x = temp_df1.CMPLNT_FR_TM,\n            y = temp_df1.ADDR_PCT_CD,\n            name = traces_names[i],\n            marker = dict(\n                color=chosen_colors[5-i]\n            )\n        )\n    )\n    \nlayout = go.Layout(\n    title='No. of crimes per hour in NYC',\n    xaxis=dict(\n        title='Hour',\n        tick0=0,\n        dtick=1,\n    \n    ),\n    yaxis=dict(\n        title='No. of crimes'\n    ),\n    barmode='stack',\n    height=500,\n    width=1000\n)\n\nfigure = go.Figure(data=data, layout=layout)\n\npy.iplot(figure)","ccd18fc4":"# Access to mapbox maps\n# Every user should have own public access token. Please, don't use below. You can easily generate your own here: https:\/\/www.mapbox.com\/\n# If you use this token and I change it your map won't be working.\nmapbox_access_token = 'pk.eyJ1IjoibWloYWx3MjgiLCJhIjoiY2psejZqZThnMXRndDNxcDFpdWh6YnV2NCJ9.IGbFZyg0dcy61geuwJUByw'","ada79491":"# Map using mapbox access token and plotly\n\nmapbox_access_token  # https:\/\/www.mapbox.com\/\n\n# new variables\ncrimes_lon = crimes_original.Longitude\ncrimes_lat = crimes_original.Latitude\n\ndata = [\n    go.Scattermapbox(\n        lat=crimes_lat[:5000], \n        lon=crimes_lon[:5000],\n        mode='markers',\n        marker=dict(\n            size=5,\n            color='rgb(155, 132, 204)',\n            opacity=0.5\n        ),\n        text=['New York'],\n        hoverinfo='none'\n    ),\n    go.Scattermapbox(\n        lat=crimes_lat[:10000],\n        lon=crimes_lon[:10000],\n        mode='markers',\n        marker=dict(\n            size=3,\n            color='rgb(155, 132, 204)',\n            opacity=0.7\n        ),\n        hoverinfo='none'\n    )\n]\n\nlayout = go.Layout(\n    title=\"New York Crimes Locations\",\n    autosize=True,\n    hovermode='closest',\n    showlegend=False,\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=40.729302,\n            lon=-73.986670\n        ),\n        pitch=45,\n        zoom=13.18,\n        style='mapbox:\/\/styles\/mihalw28\/cjlz6bzrv697i2rpec2yqartr',# Inspiration and more interesting this type visualisations: https:\/\/www.kaggle.com\/kosovanolexandr\/crimes-in-boston-multiclass-clustering\n    ),\n    #width = 700,\n    height = 850\n)\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig)","2367722d":"# Create a list with coordinates for folium\nlocations = crimes_original[['Latitude', 'Longitude']]\nlocationlist = locations.values.tolist()","e40e6df2":"# Mapping with folium - works good for 1k not for 100k\n\n#Import maps\nimport folium\nfrom folium import plugins\n\nmap_osm = folium.Map(location=[40.6865,-73.9496], tiles='Stamen Terrain', zoom_start=10)\n\n\nmarker_cluster = plugins.MarkerCluster().add_to(map_osm)\n\n#I don`t know how to add a popup station`s name imported from df_stations['start_station_name'] column, ordinary solution doesn't work :\/\n# parse_html=True - this is the solution\n\nfor point in range(0, len(crimes_original[:1000])):\n    folium.Marker(locationlist[point],\n                  popup=folium.Popup(crimes_original['PATROL_BORO'][point], parse_html=True),\n                  icon=folium.Icon(color='blue', icon_color='white', icon='fa-circle', angle=0, prefix='fa')).add_to(marker_cluster)\n\nmap_osm\n","7f8fdbc1":"### This notebook is 4th in a row using NYPD crimes data from begginning of 2018 to July this year. In two previous notebooks I have cleaned data and filled major NaN values. This notebook will be updated.\nNotebook created: 3.09.2018\n\n### Notebooks:\n1. [First](https:\/\/www.kaggle.com\/mihalw28\/nyc-crimes-2018-data-cleaning-part-i)\n2. [Second](https:\/\/www.kaggle.com\/mihalw28\/nyc-crimes-2018-random-forest-regressor-nans)\n3. [Third](https:\/\/www.kaggle.com\/mihalw28\/fill-nans-using-regression-part-ii)\n3. [This](https:\/\/www.kaggle.com\/mihalw28\/nyc-crimes-2018-visualistions)\n","acf498ef":"### Overview:\n1. [Imports](#1)\n2. [Graphs](#2)\n3. [Maps](#3) ","03ff04a6":"**Final toughs:**\n1. 100k points is a lot, so good way to visualise points could be divide them into smaller parts or apply some filters.\n2.  I didn't spend much time with mapbox, therefore my informations about that service could be insufficient for finding interesting solution.","80b29620":"<a id=\"2\"><\/a> <br>\n**Graphs**","40faaa66":"<a id=\"1\"><\/a> <br>\n**Import packages and data**","505a03a6":"## New York City Crimes","59f24dc0":"<a id=\"3\"><\/a> <br>\n**Maps**","aadfc94c":"Mapping over 100k points is a tricky one. I have no idea if mapping 100k points using mapbox and plotly could be ok, but  I did it for 5k just to check result.\n(Mapping 100k doesn't work or takes over 2 minutes and it is too much)"}}