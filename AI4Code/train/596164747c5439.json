{"cell_type":{"acb20832":"code","dabf95c8":"code","54425211":"code","4ceeb589":"code","efe216fb":"code","13252571":"code","6a637dd7":"code","307e4008":"code","e9e78b54":"code","2225a22b":"code","07ac63b5":"code","7b8fca89":"code","11fe37de":"code","c6103844":"code","1af2e663":"code","b92bc0cb":"code","18214268":"code","82818a4f":"markdown","0b21b3b6":"markdown","9f51b22f":"markdown","a892f0a0":"markdown","e2592274":"markdown"},"source":{"acb20832":"import pandas as pd\nimport numpy as np\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom skimage.io import imread\nfrom skimage.transform import resize\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\n\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.utils import to_categorical\n\nfrom glob import glob\nimport os\n\nfrom skimage.io import imread\nfrom skimage.transform import resize\nfrom skimage.color import rgb2gray\nfrom sklearn.model_selection import train_test_split\n\nfrom keras_preprocessing.image import ImageDataGenerator\n","dabf95c8":"from tensorflow.python.client import device_lib \nprint(device_lib.list_local_devices())","54425211":"train_dict = pd.read_csv('..\/input\/iti-mlp-iml3-cnn\/train_dictionary.csv', index_col=0)\ntrain_dict['img_file'] =  [i.split('\/')[-1] for i in train_dict.Path]\ntrain_dict.head()","4ceeb589":"test_dict = pd.read_csv('..\/input\/iti-mlp-iml3-cnn\/test_dictionary.csv', index_col=0)\ntest_dict['img_file'] =  [i.split('\/')[-1] for i in test_dict.Path]\ntest_dict.head()","efe216fb":"path_to_train = '..\/input\/iti-mlp-iml3-cnn\/train\/train\/'\nglob_train_imgs = os.path.join(path_to_train, '*.jpg')\ntrain_img_paths = glob(glob_train_imgs)\ntrain_img_paths[0:10]","13252571":"classes = pd.get_dummies(train_dict['Class'], sparse=True)\nclasses.index = train_dict.img_file\nclasses.head()","6a637dd7":"BATCHSIZE = 32\n\ndatagen=ImageDataGenerator(rescale=1.\/255.,validation_split=0.25)\n\ntrain_df = train_dict[['img_file', 'Class']]\ntrain_df['Class'] = train_df['Class'].astype(str)\ntest_df = test_dict[['img_file']]","307e4008":"train_df","e9e78b54":"train_generator=datagen.flow_from_dataframe(\n                                                dataframe=train_df,\n                                                directory=\"..\/input\/iti-mlp-iml3-cnn\/train\/train\/\",\n                                                x_col=\"img_file\",\n                                                y_col=\"Class\",\n                                                subset=\"training\",\n                                                batch_size=32,\n                                                seed=42,\n                                                shuffle=True,\n                                                class_mode=\"categorical\",\n                                                target_size=(32,32))\n\nvalid_generator=datagen.flow_from_dataframe(\n                                                dataframe=train_df,\n                                                directory=\"..\/input\/iti-mlp-iml3-cnn\/train\/train\/\",\n                                                x_col=\"img_file\",\n                                                y_col=\"Class\",\n                                                subset=\"validation\",\n                                                batch_size=32,\n                                                seed=42,\n                                                shuffle=True,\n                                                class_mode=\"categorical\",\n                                                target_size=(32,32))\n\ntest_datagen=ImageDataGenerator(rescale=1.\/255.)\n    \ntest_generator=test_datagen.flow_from_dataframe(\n                                                dataframe=test_df,\n                                                directory=\"..\/input\/iti-mlp-iml3-cnn\/test\/test\/\",\n                                                x_col=\"img_file\",\n                                                y_col=None,\n                                                batch_size=32,\n                                                seed=42,\n                                                shuffle=False,\n                                                class_mode=None,\n                                                target_size=(32,32))","2225a22b":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\nmodel.summary()","07ac63b5":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size\nSTEP_SIZE_TEST=test_generator.n\/\/test_generator.batch_size\n\n\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nhistory = model.fit_generator(\n    generator=train_generator, \n    steps_per_epoch=STEP_SIZE_TRAIN, \n    epochs=30, # Change this to a larger number to train for longer\n    validation_data=valid_generator,\n    validation_steps=STEP_SIZE_VALID,\n    verbose=1,\n    max_queue_size=100  # Change this number based on memory restrictions\n)","7b8fca89":"model.evaluate_generator(generator=valid_generator,\nsteps=STEP_SIZE_TEST)","11fe37de":"plt.figure(figsize=(10,5))\nplt.plot(history.history['loss'], label='train_loss')\nplt.plot(history.history['val_loss'], label='validation_loss')\nplt.title('Loss per epoch')\nplt.xlabel('Epoch')\nplt.ylabel('Loss]')\nplt.legend()","c6103844":"test_generator.reset()\npred=model.predict_generator(test_generator,\nsteps=STEP_SIZE_TEST+1,\nverbose=1)","1af2e663":"sample_sub = pd.read_csv('..\/input\/iti-mlp-iml3-cnn\/submission.csv')\nsample_sub","b92bc0cb":"submission = pd.DataFrame(pred)\nsubmission.columns = sample_sub.columns[1:]\nsubmission['Id'] = sample_sub['Id']\nsubmission = submission[sample_sub.columns]\nsubmission","18214268":"submission.to_csv('sub01.csv', index=False)","82818a4f":"# Carregando os dicion\u00e1rios de dados","0b21b3b6":"# Seja bem vindo a Atividade 01 do Curso de Deep Learning - CNN","9f51b22f":"# Criando a estrutura da Rede Neural","a892f0a0":"Neste notebook vc encontrar\u00e1 um modelo de baseline para resolver o problema proposto","e2592274":"# Checando se a GPU est\u00e1 configurada"}}