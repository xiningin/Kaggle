{"cell_type":{"e8b8bf30":"code","a1666d7c":"code","63387c90":"code","ec4c1439":"code","4ae5496d":"code","51431b83":"code","2922a191":"code","20979075":"code","11af5ab4":"code","c77c9039":"code","6584df27":"code","fe137c75":"code","6c6a9d71":"code","19f287b0":"code","5925ffbd":"code","d28d0ac5":"code","4b9263e8":"code","f41f53f2":"code","fa1607ec":"code","b544a0b3":"code","66d5e0ca":"code","0f9df8f3":"code","9b10e15f":"code","976da355":"code","49cf7345":"code","6bfa3029":"code","87f21f92":"code","024a4310":"code","a38762e4":"code","14630340":"code","c5055748":"code","dbcbd977":"code","62ab9f10":"code","22ad0906":"code","b2c1ea68":"code","66047a94":"code","12f14d59":"code","709123aa":"code","1996f1da":"code","5a9d14b1":"code","f6f54f97":"code","700e4292":"code","7ee71c4e":"code","ee839d6c":"code","2708f39f":"code","88344533":"code","8ff137be":"code","77c0455a":"code","9160daed":"code","efd1a608":"code","e7f4072d":"code","56e16654":"code","c4c07d1b":"code","b633387a":"code","323714d8":"code","4bbb123e":"code","eb005055":"code","63aff8c3":"code","97a58372":"markdown","9a40e4fb":"markdown","5b9a77a2":"markdown","7fc20df8":"markdown","6f75aa13":"markdown","361cc4b2":"markdown","fc48c4f4":"markdown","9ac92dfe":"markdown","dd5846b2":"markdown","2261e590":"markdown","0cafb32b":"markdown","d6c56710":"markdown","baf6a55f":"markdown","076a30aa":"markdown","867c137e":"markdown","98a445c2":"markdown","f76bc8bf":"markdown","4f55e340":"markdown","b784c1c5":"markdown","821386e9":"markdown","64850cf9":"markdown","0f1e3e69":"markdown","5ce4c08b":"markdown","df543633":"markdown","8d6fa6bb":"markdown","d43622a2":"markdown","94a95861":"markdown","0110c248":"markdown","5b9d63fd":"markdown","c792f324":"markdown","d0ff998e":"markdown","f9448816":"markdown","666b936d":"markdown","293f5a80":"markdown","20c9eda1":"markdown","02a71910":"markdown","254ca486":"markdown","5b0704ec":"markdown","74f3adbe":"markdown","7fb2ae8f":"markdown","6048ff25":"markdown","0190ffdc":"markdown","e177fb36":"markdown","3aebcc7f":"markdown"},"source":{"e8b8bf30":"import pandas as pd\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import minimize\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport datetime","a1666d7c":"ncov_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\nncov_df['ObservationDate'] = pd.to_datetime(ncov_df['ObservationDate']) \n\nncov_df[\"Country\"] = ncov_df[\"Country\/Region\"].replace(\n    {\n        \"Mainland China\": \"China\",\n        \"Hong Kong SAR\": \"Hong Kong\",\n        \"Taipei and environs\": \"Taiwan\",\n        \"Iran (Islamic Republic of)\": \"Iran\",\n        \"Republic of Korea\": \"South Korea\",\n        \"Republic of Ireland\": \"Ireland\",\n        \"Macao SAR\": \"Macau\",\n        \"Russian Federation\": \"Russia\",\n        \"Republic of Moldova\": \"Moldova\",\n        \"Taiwan*\": \"Taiwan\",\n        \"Cruise Ship\": \"Others\",\n        \"United Kingdom\": \"UK\",\n        \"Viet Nam\": \"Vietnam\",\n        \"Czechia\": \"Czech Republic\",\n        \"St. Martin\": \"Saint Martin\",\n        \"Cote d'Ivoire\": \"Ivory Coast\",\n        \"('St. Martin',)\": \"Saint Martin\",\n        \"Congo (Kinshasa)\": \"Congo\",\n    }\n)\nncov_df[\"Province\"] = ncov_df[\"Province\/State\"].fillna(\"-\").replace(\n    {\n        \"Cruise Ship\": \"Diamond Princess cruise ship\",\n        \"Diamond Princess\": \"Diamond Princess cruise ship\"\n    }\n)\n\n# More data from CSSEGISandData\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\n","63387c90":"world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()\nworld_recovered = recovered_df[recovered_df.columns[-1:]].sum()\nworld_deaths = deaths_df[deaths_df.columns[-1:]].sum()\nworld_active = world_confirmed - (world_recovered - world_deaths)\n\nlabels = ['Active','Recovered','Deceased']\nsizes = [world_active,world_recovered,world_deaths]\ncolor= ['#66b3ff','green','red']\nexplode = []\n\nprint(\"No.of Confirmed Cases\", world_confirmed)\nprint(\"No. of Recovered Cases\",world_recovered)\nprint(\"No. of Deaths\",world_deaths)\nprint(\"No. of Active Cases\",world_active)\n\nfor i in labels:\n    explode.append(0.01)\n    \nplt.figure(figsize= (10,10))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode,colors = color)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('World COVID-19 Cases',fontsize = 10)\nplt.axis('equal')  \nplt.tight_layout()","ec4c1439":"## India Complete State Wise Data\ndf1 = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data1.csv',parse_dates=['Date Announced'])\ndf2 = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data2.csv',parse_dates=['Date Announced'])\ndf3 = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data3.csv',parse_dates=['Date Announced'])\ndf1.append(df2)\ndf_ind = df1.append(df3)\ndf_ind.head(2)","4ae5496d":"# Time Series Over all Data\nts_india = pd.read_csv('..\/input\/updated-case-time-series-data\/case_time_series 17.csv')\nts_india.head(2)\n","51431b83":"ts_india['Date'] =  pd.to_datetime(ts_india['Date'], format='%d\/%m\/%Y')","2922a191":"ts_confirmed = ts_india.drop(columns=['Daily Confirmed','Daily Recovered','Total Recovered','Daily Deceased','Total Deceased'])\n\nts_confirmed.head(3)","20979075":"tc_param = ts_india.drop(columns=['Daily Confirmed','Daily Recovered','Daily Deceased'])\ntc_param.head()","11af5ab4":"## Adding Active Cases Features\ntc_param['Total Active Cases'] = tc_param['Total Confirmed'] - tc_param['Total Recovered'] - \\\n                                     tc_param['Total Deceased']","c77c9039":"# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\ntemp = tc_param[tc_param['Date'] == max(ts_india['Date'])]\n\n# subset columns\ntemp = temp[['Date', 'Total Active Cases', 'Total Deceased', 'Total Recovered']]\n\n# rename columns\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\n\n# melt into longer format\ntm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Cured'])\n\n# plot\nfig_1 = px.treemap(tm, path=[\"variable\"], values=\"value\", height=250, width=800,\n                 color_discrete_sequence=[act, rec, dth], title='Latest stats')\nfig_1.data[0].textinfo = 'label+text+value'\nfig_1.show()","6584df27":"# stacked bar chart\n\n# subset columns\ntemp = tc_param[['Date', 'Total Active Cases', 'Total Deceased', 'Total Recovered']]\n\n# rename columns\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\n\n# melt data\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\n# plot\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=540, \n               title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig_2.show()","fe137c75":"from plotly.subplots import make_subplots\n\nfig_c = px.bar(tc_param, x=\"Date\", y=\"Total Confirmed\", color_discrete_sequence=['#000000'])\nfig_d = px.bar(tc_param, x=\"Date\", y=\"Total Deceased\", color_discrete_sequence=['#ff677d'])\nfig_r = px.bar(tc_param, x=\"Date\", y=\"Total Recovered\", color_discrete_sequence=['#649d66'])\n\nfig_dc = px.bar(ts_india, x=\"Date\", y=\"Daily Confirmed\", color_discrete_sequence=['#323232'])\nfig_dd = px.bar(ts_india, x=\"Date\", y=\"Daily Deceased\", color_discrete_sequence=['#cd6684'])\nfig_dr = px.bar(ts_india, x=\"Date\", y=\"Daily Recovered\", color_discrete_sequence=['#16817a'])\n\nfig = make_subplots(rows=3, cols=2, shared_xaxes=False, \n                    horizontal_spacing=0.14, vertical_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'New cases', \n                                    'Deaths reported', 'New deaths', \n                                    'Cured', 'New cured'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_dc['data'][0], row=1, col=2)\n\nfig.add_trace(fig_d['data'][0], row=2, col=1)\nfig.add_trace(fig_dd['data'][0], row=2, col=2)\n\nfig.add_trace(fig_r['data'][0], row=3, col=1)\nfig.add_trace(fig_dr['data'][0], row=3, col=2)\n\nfig.update_layout(height=1400)","6c6a9d71":"df_w_db = pd.read_csv('..\/input\/covid19testing\/tested_worldwide.csv')\ndf_w_db.head(2)","19f287b0":"df_ind = df_w_db[df_w_db['Country_Region']=='India']\ndf_ind.head(2)","5925ffbd":"fig_ind = go.Figure()\nfig_ind.add_trace(go.Scatter(x=df_ind['Date'], y=df_ind['total_tested'], name='India', \\\n                        ))\n\nfig_ind.layout.update(title_text='Total no. of tests done in India',xaxis_showgrid=False, width=800, xaxis_title='Date',\\\n                yaxis_showgrid=False, yaxis_title='No. of Tests Done',\n        height=600,font=dict(\n#         family=\"Courier New, monospace\",\n        size=14,\n        color=\"black\"\n    ))\nfig_ind.layout.plot_bgcolor = 'white'\nfig_ind.layout.paper_bgcolor = 'white'\nfig_ind.show()","d28d0ac5":"#Reading state wise data\nstate_wise = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/state_wise.csv')","4b9263e8":"state_d=state_wise.drop(columns=['State_code','Last_Updated_Time','Delta_Confirmed','Delta_Recovered','Delta_Deaths','State_Notes'])\n","f41f53f2":"state_db=state_d[state_d.State!='Total']","fa1607ec":"# sort based on confirmed cases\nlatest = state_db.sort_values('Confirmed', ascending=False).reset_index(drop=True)\n\n# background color\nlatest.style\\\n    .background_gradient(cmap=\"Blues\", subset=['Confirmed', 'Active'])\\\n    .background_gradient(cmap=\"Greens\", subset=['Recovered'])\\\n    .background_gradient(cmap=\"Reds\", subset=['Deaths'])\\","b544a0b3":"fig = px.bar(state_db.sort_values('Confirmed', ascending=False).sort_values('Confirmed', ascending=True),\n             x=\"Confirmed\", y=\"State\", \n             title='Total Confirmed Cases', \n             text='Confirmed', \n             orientation='h', \n             width=800, height=800, range_x = [0, max(state_db['Confirmed'])])\nfig.update_traces(marker_color='#670404', opacity=0.8, textposition='inside')\n\nfig.update_layout(plot_bgcolor='white')\nfig.show()","66d5e0ca":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]","0f9df8f3":"k = df1[df1['Country\/Region']=='India'].loc[:,'1\/22\/20':]\nindia_confirmed = k.values.tolist()[0] \ndata = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = dates\ndata['y'] = india_confirmed\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases')","9b10e15f":"arima = ARIMA(data['y'], order=(5, 1, 0))\narima = arima.fit(trend='c', full_output=True, disp=True)\nforecast = arima.forecast(steps= 30)\npred = list(forecast[0])\n\nstart_date = data['ds'].max()\nprediction_dates = []\nfor i in range(30):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (15,10))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 15 Days\" , fontsize = 20)\nplt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = '#ff9999',label = 'Predicted');\nplt.plot_date(y=data['y'],x=data['ds'],linestyle = '-',color = 'blue',label = 'Actual');\nplt.legend();","976da355":"# Dividing data into 4 phases\ntc_phase0 = ts_india[(tc_param['Date']>'2020-03-01') & (ts_india['Date']<'2020-03-25')].reset_index(drop=True) # considering pre lockdown period\ntc_phase1 = ts_india[(tc_param['Date']>='2020-03-25') & (ts_india['Date']<='2020-04-14')].reset_index(drop=True) # Lockdown 1.0\ntc_phase2 = ts_india[(tc_param['Date']>='2020-04-15') & (ts_india['Date']<='2020-05-03')].reset_index(drop=True) # Lockdown 2.0\ntc_phase3 = ts_india[(tc_param['Date']>='2020-05-03') & (ts_india['Date']<'2020-05-17')].reset_index(drop=True) # Lockdown 3.0\n\ntc_cases0 = tc_param[(tc_param['Date']>'2020-03-01') & (ts_india['Date']<'2020-03-25')].reset_index(drop=True) # considering pre lockdown period\ntc_cases1 = tc_param[(tc_param['Date']>='2020-03-25') & (ts_india['Date']<='2020-04-14')].reset_index(drop=True) # Lockdown 1.0\ntc_cases2 = tc_param[(tc_param['Date']>='2020-04-15') & (ts_india['Date']<='2020-05-03')].reset_index(drop=True) # Lockdown 2.0\ntc_cases3 = tc_param[(tc_param['Date']>='2020-05-03') & (ts_india['Date']<'2020-05-17')].reset_index(drop=True) # Lockdown 3.0\n\n\ntc_test1 = df_ind[(df_ind['Date']>='2020-03-25') & (df_ind['Date']<='2020-04-14')].reset_index(drop=True) # Lockdown 1.0\ntc_test2 = df_ind[(df_ind['Date']>='2020-04-15') & (df_ind['Date']<='2020-05-03')].reset_index(drop=True) # Lockdown 2.0\ntc_test3 = df_ind[(df_ind['Date']>='2020-05-03') & (df_ind['Date']<'2020-05-17')].reset_index(drop=True) # Lockdown 3.0\n\n","49cf7345":"# Susceptible equation\ndef fa(N, a, b, beta):\n    fa = -beta*a*b\n    return fa\n\n# Infected equation\ndef fb(N, a, b, beta, gamma):\n    fb = beta*a*b - gamma*b\n    return fb\n\n# Recovered\/deceased equation\ndef fc(N, b, gamma):\n    fc = gamma*b\n    return fc","6bfa3029":"# Runge-Kutta method of 4rth order for 3 dimensions (susceptible a, infected b and recovered r)\ndef rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs):\n    a1 = fa(N, a, b, beta)*hs\n    b1 = fb(N, a, b, beta, gamma)*hs\n    c1 = fc(N, b, gamma)*hs\n    ak = a + a1*0.5\n    bk = b + b1*0.5\n    ck = c + c1*0.5\n    a2 = fa(N, ak, bk, beta)*hs\n    b2 = fb(N, ak, bk, beta, gamma)*hs\n    c2 = fc(N, bk, gamma)*hs\n    ak = a + a2*0.5\n    bk = b + b2*0.5\n    ck = c + c2*0.5\n    a3 = fa(N, ak, bk, beta)*hs\n    b3 = fb(N, ak, bk, beta, gamma)*hs\n    c3 = fc(N, bk, gamma)*hs\n    ak = a + a3\n    bk = b + b3\n    ck = c + c3\n    a4 = fa(N, ak, bk, beta)*hs\n    b4 = fb(N, ak, bk, beta, gamma)*hs\n    c4 = fc(N, bk, gamma)*hs\n    a = a + (a1 + 2*(a2 + a3) + a4)\/6\n    b = b + (b1 + 2*(b2 + b3) + b4)\/6\n    c = c + (c1 + 2*(c2 + c3) + c4)\/6\n    return a, b, c","87f21f92":"def SIR(N, b0, beta, gamma, hs):\n    \n    \"\"\"\n    N = total number of population\n    beta = transition rate S->I\n    gamma = transition rate I->R\n    k =  denotes the constant degree distribution of the network (average value for networks in which \n    the probability of finding a node with a different connectivity decays exponentially fast\n    hs = jump step of the numerical integration\n    \"\"\"\n    \n    # Initial condition\n    a = float(N-1)\/N -b0\n    b = float(1)\/N +b0\n    c = 0.\n\n    sus, inf, rec= [],[],[]\n    for i in range(10000): # Run for a certain number of time-steps\n        sus.append(a)\n        inf.append(b)\n        rec.append(c)\n        a,b,c = rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs)\n\n    return sus, inf, rec","024a4310":"# Parameters of the model\nN = 7800*(10**6)\nb0 = 0\nbeta = 0.7\ngamma = 0.2\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\n\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title(\"SIR model\")\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.savefig('SIR_example.png')\nplt.show()","a38762e4":"# stacked bar chart\n\n# subset columns\ntemp = tc_cases0[['Date', 'Total Active Cases', 'Total Deceased', 'Total Recovered']]\n\n# rename columns\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\n\n# melt data\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\n# plot\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=400, \n               title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig_2.show()","14630340":"ss = []\nfor i in tc_phase0.index:\n    if(i!= min(tc_phase0.index)):\n        lm = tc_phase0.loc[i]['Daily Confirmed']\/tc_phase0.loc[i-1]['Daily Confirmed']\n    else:\n        lm = np.NaN\n    ss.append(lm)\n        \ntc_phase0['Growth_Rate'] = ss\n\n\nss1 = []\nfor i in tc_phase1.index:\n    if(i!= min(tc_phase1.index)):\n        lm1 = tc_phase1.loc[i]['Daily Confirmed']\/tc_phase1.loc[i-1]['Daily Confirmed']\n    else:\n        lm1 = np.NaN\n    ss1.append(lm1)\n        \ntc_phase1['Growth_Rate'] = ss1\n\n\nss2 = []\nfor i in tc_phase2.index:\n    if(i!= min(tc_phase2.index)):\n        lm2 = tc_phase2.loc[i]['Daily Confirmed']\/tc_phase2.loc[i-1]['Daily Confirmed']\n    else:\n        lm2 = np.NaN\n    ss2.append(lm2)\n        \ntc_phase2['Growth_Rate'] = ss2\n\nss3 = []\nfor i in tc_phase3.index:\n    if(i!= min(tc_phase3.index)):\n        lm3 = tc_phase3.loc[i]['Daily Confirmed']\/tc_phase3.loc[i-1]['Daily Confirmed']\n    else:\n        lm3 = np.NaN\n    ss3.append(lm3)\n        \ntc_phase3['Growth_Rate'] = ss3\n\n\n","c5055748":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=tc_phase0['Date'], y=tc_phase0['Growth_Rate'], name='Growth Factor', \\\n                         marker=dict(color='#008040')))\nfig1.layout.update(title_text='COVID-19 Growth Factor in India w.r.t. Time',xaxis_showgrid=False, yaxis_showgrid=True, width=700, yaxis_title='Growth Factor',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nprint(\"Mean Growth Rate\",tc_phase0['Growth_Rate'].mean())\nfig1.layout.plot_bgcolor = '#4d3900'\nfig1.layout.paper_bgcolor = '#4d3900'\nfig1.show()","dbcbd977":"from scipy import integrate, optimize\npopulation = float(1352600000)\ncountry_df = pd.DataFrame()\ncountry_df['Total Confirmed'] = tc_phase0['Total Confirmed'].fillna(0)\ncountry_df = country_df[10:]\ncountry_df['day_count'] = list(range(1,len(country_df)+1))\n\nydata = [i for i in country_df['Total Confirmed']]\nxdata = country_df.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = tc_phase0['Total Recovered'].max()+tc_phase0['Total Deceased'].max()\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for India infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","62ab9f10":"temp = tc_phase0.copy()\ntemp['Mortality Rate'] = temp['Total Deceased']\/temp['Total Confirmed']*100\nprint(\"Mean Mortaility Rate\",temp['Mortality Rate'].mean())\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Mortality Rate'],mode='lines+markers',marker_color='red'))\nfig.update_layout(title_text = 'Trend of Mortality Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","22ad0906":"temp = tc_phase0.copy()\ntemp['Recovery Rate'] = temp['Total Recovered']\/temp['Total Confirmed']*100\nprint(\"Mean Recovery Rate\",temp['Total Recovered'].mean())\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovery Rate'],\n                    mode='lines+markers',marker_color='green'))\nfig.update_layout(title_text = 'Trend of Recovery Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","b2c1ea68":"# stacked bar chart\n\n# subset columns\ntemp = tc_cases1[['Date', 'Total Active Cases', 'Total Deceased', 'Total Recovered']]\n\n# rename columns\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\n\n# melt data\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\n# plot\nfig_3 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=540, \n               title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig_3.show()","66047a94":"fig2 = go.Figure()\nfig2.add_trace(go.Scatter(x=tc_phase1['Date'], y=tc_phase1['Growth_Rate'], name='Growth Factor', \\\n                         marker=dict(color='#008040')))\nfig2.layout.update(title_text='COVID-19 Growth Factor in India w.r.t. Time',xaxis_showgrid=False, yaxis_showgrid=True, width=700, yaxis_title='Growth Factor',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig2.layout.plot_bgcolor = '#4d3900'\nfig2.layout.paper_bgcolor = '#4d3900'\nfig2.show()\nprint(\"Mean Growth Rate\",tc_phase1['Growth_Rate'].mean())","12f14d59":"population = float(1352600000)\ncountry_df1 = pd.DataFrame()\ncountry_df1['Total Confirmed'] = tc_phase1['Total Confirmed'].fillna(0)\ncountry_df1 = country_df1[10:]\ncountry_df1['day_count'] = list(range(1,len(country_df1)+1))\n\nydata = [i for i in country_df1['Total Confirmed']]\nxdata = country_df1.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = rec0 = tc_phase1['Total Recovered'].max()+tc_phase1['Total Deceased'].max()\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for India infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","709123aa":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=tc_test1['Date'], y=tc_test1['total_tested'],\n                    mode='lines+markers',marker_color='blue'))\nfig.update_layout(title_text = 'Rate of Testing')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","1996f1da":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=tc_test1['Date'], y=tc_test1['daily_tested'],\n                    mode='lines+markers',marker_color='blue'))\nfig.update_layout(title_text = 'Daily Rate of Testing')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","5a9d14b1":"total_tested = tc_test1['total_tested'].max()\ntotal_positive = tc_test1['positive'].max()\n#total_tested = tc_test3['total_tested'].max()\n#total_positive = tc_test3['positive'].max()\npositivecase_ratio = total_positive * 100 \/ total_tested\npcr = float(\"{:.2f}\".format(positivecase_ratio))\ntest_million = np.round(1000000*tc_test1['total_tested'].max()\/13000000000,2)\nprint('Total Number of people tested :', total_tested)\nprint('Total Number of positive cases :',total_positive)\nprint('Test Conducted per Million People :',test_million)\nprint('Positive case per Tests [%]:',pcr)\n#Overall \nfig = go.Figure(data=[go.Pie(labels=['Total Samples Tested','Positive Cases from tested samples'],\n                            values= [total_tested,total_positive],hole =.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value',textfont_size=20,\n                  marker=dict(colors=['#263fa3','#cc3c2f'], line=dict(color='#FFFFFF', width=2)))\nfig.update_layout(title_text='COVID19 Test Results from ICMR in india',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","f6f54f97":"temp = tc_phase1.copy()\ntemp['Mortality Rate'] = temp['Total Deceased']\/temp['Total Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Mortality Rate'],mode='lines+markers',marker_color='red'))\nfig.update_layout(title_text = 'Trend of Mortality Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()\nprint(\"Mean Mortality Rate\",temp['Mortality Rate'].mean())","700e4292":"temp = tc_phase1.copy()\ntemp['Recovery Rate'] = temp['Total Recovered']\/temp['Total Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovery Rate'],\n                    mode='lines+markers',marker_color='green'))\nfig.update_layout(title_text = 'Trend of Recovery Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()\nprint(\"Mean Recovery Rate\",temp['Recovery Rate'].mean())","7ee71c4e":"# stacked bar chart\n\n# subset columns\ntemp = tc_cases2[['Date', 'Total Active Cases', 'Total Deceased', 'Total Recovered']]\n\n# rename columns\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\n\n# melt data\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\n# plot\nfig_4 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=540, \n               title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig_4.show()","ee839d6c":"fig3 = go.Figure()\nfig3.add_trace(go.Scatter(x=tc_phase2['Date'], y=tc_phase2['Growth_Rate'], name='Growth Factor', \\\n                         marker=dict(color='#008040')))\nfig3.layout.update(title_text='COVID-19 Growth Factor in India w.r.t. Time',xaxis_showgrid=False, yaxis_showgrid=True, width=700, yaxis_title='Growth Factor',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig3.layout.plot_bgcolor = '#4d3900'\nfig3.layout.paper_bgcolor = '#4d3900'\nfig3.show()\nprint(\"Mean Growth Rate\",tc_phase2['Growth_Rate'].mean())","2708f39f":"country_df2 = pd.DataFrame()\ncountry_df2['Total Confirmed'] = tc_phase2['Total Confirmed'].fillna(0)\ncountry_df2 = country_df2[10:]\ncountry_df2['day_count'] = list(range(1,len(country_df2)+1))\n\nydata = [i for i in country_df2['Total Confirmed']]\nxdata = country_df2.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = rec0 = tc_phase2['Total Recovered'].max()+tc_phase2['Total Deceased'].max()\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for India infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","88344533":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=tc_test2['Date'], y=tc_test2['total_tested'],\n                    mode='lines+markers',marker_color='blue'))\nfig.update_layout(title_text = 'Rate of Testing')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","8ff137be":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=tc_test2['Date'], y=tc_test2['daily_tested'],\n                    mode='lines+markers',marker_color='blue'))\nfig.update_layout(title_text = 'Daily Rate of Testing')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","77c0455a":"total_tested = tc_test2['total_tested'].max()\ntotal_positive = tc_test2['positive'].max()\n#total_tested = tc_test3['total_tested'].max()\n#total_positive = tc_test3['positive'].max()\npositivecase_ratio = total_positive * 100 \/ total_tested\npcr = float(\"{:.2f}\".format(positivecase_ratio))\ntest_million = np.round(1000000*tc_test2['total_tested'].max()\/13000000000,2)\nprint('Total Number of people tested :', total_tested)\nprint('Total Number of positive cases :',total_positive)\nprint('Test Conducted per Million People :',test_million)\nprint('Positive case per Tests [%]:',pcr)\n#Overall \nfig = go.Figure(data=[go.Pie(labels=['Total Samples Tested','Positive Cases from tested samples'],\n                            values= [total_tested,total_positive],hole =.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value',textfont_size=20,\n                  marker=dict(colors=['#263fa3','#cc3c2f'], line=dict(color='#FFFFFF', width=2)))\nfig.update_layout(title_text='COVID19 Test Results from ICMR in india',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","9160daed":"temp = tc_phase2.copy()\ntemp['Mortality Rate'] = temp['Total Deceased']\/temp['Total Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Mortality Rate'],mode='lines+markers',marker_color='red'))\nfig.update_layout(title_text = 'Trend of Mortality Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()\nprint(\"Mean Mortality Rate\",temp['Mortality Rate'].mean())","efd1a608":"temp = tc_phase2.copy()\ntemp['Recovery Rate'] = temp['Total Recovered']\/temp['Total Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovery Rate'],\n                    mode='lines+markers',marker_color='green'))\nfig.update_layout(title_text = 'Trend of Recovery Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()\nprint(\"Mean Recovery Rate\",temp['Recovery Rate'].mean())","e7f4072d":"# stacked bar chart\n\n# subset columns\ntemp = tc_cases3[['Date', 'Total Active Cases', 'Total Deceased', 'Total Recovered']]\n\n# rename columns\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\n\n# melt data\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\n# plot\nfig_5 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=540, \n               title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig_5.show()","56e16654":"fig4 = go.Figure()\nfig4.add_trace(go.Scatter(x=tc_phase3['Date'], y=tc_phase3['Growth_Rate'], name='Growth Factor', \\\n                         marker=dict(color='#008040')))\nfig4.layout.update(title_text='COVID-19 Growth Factor in India w.r.t. Time',xaxis_showgrid=False, yaxis_showgrid=True, width=700, yaxis_title='Growth Factor',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig4.layout.plot_bgcolor = '#4d3900'\nfig4.layout.paper_bgcolor = '#4d3900'\nfig4.show()\nprint(\"Mean Growth Factor\",tc_phase3['Growth_Rate'].mean())","c4c07d1b":"population = float(1352600000)\ncountry_df3 = pd.DataFrame()\ncountry_df3['Total Confirmed'] = tc_phase3['Total Confirmed'].fillna(0)\ncountry_df3 = country_df3[10:]\ncountry_df3['day_count'] = list(range(1,len(country_df3)+1))\n\ny1data = [i for i in country_df3['Total Confirmed']]\nx1data = country_df3.day_count\ny1data = np.array(ydata, dtype=float)\nx1data = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = tc_phase3['Total Recovered'].max()+tc_phase3['Total Deceased'].max()\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\n\npopt, pcov = optimize.curve_fit(fit_odeint, x1data, y1data)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(x1data, y1data, 'o')\nplt.plot(x1data, fitted)\nplt.title(\"Fit of SIR model for India infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","b633387a":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=tc_test3['Date'], y=tc_test3['daily_tested'],\n                    mode='lines+markers',marker_color='blue'))\nfig.update_layout(title_text = 'Daily Testing Rate')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","323714d8":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=tc_test3['Date'], y=tc_test3['total_tested'],\n                    mode='lines+markers',marker_color='blue'))\nfig.update_layout(title_text = 'Testing Rate')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","4bbb123e":"total_tested = tc_test3['total_tested'].max()\ntotal_positive = tc_test3['positive'].max()\n#total_tested = tc_test3['total_tested'].max()\n#total_positive = tc_test3['positive'].max()\npositivecase_ratio = total_positive * 100 \/ total_tested\npcr = float(\"{:.2f}\".format(positivecase_ratio))\ntest_million = np.round(1000000*tc_test3['total_tested'].max()\/13000000000,2)\nprint('Total Number of people tested :', total_tested)\nprint('Total Number of positive cases :',total_positive)\nprint('Test Conducted per Million People :',test_million)\nprint('Positive case per Tests [%]:',pcr)\n#Overall \nfig = go.Figure(data=[go.Pie(labels=['Total Samples Tested','Positive Cases from tested samples'],\n                            values= [total_tested,total_positive],hole =.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value',textfont_size=20,\n                  marker=dict(colors=['#263fa3','#cc3c2f'], line=dict(color='#FFFFFF', width=2)))\nfig.update_layout(title_text='COVID19 Test Results from ICMR in india',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","eb005055":"temp = tc_phase3.copy()\ntemp['Mortality Rate'] = temp['Total Deceased']\/temp['Total Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Mortality Rate'],mode='lines+markers',marker_color='red'))\nfig.update_layout(title_text = 'Trend of Mortality Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()\nprint(\"Mean Mortality Rate\",temp['Mortality Rate'].mean())","63aff8c3":"temp = tc_phase3.copy()\ntemp['Recovery Rate'] = temp['Total Recovered']\/temp['Total Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovery Rate'],\n                    mode='lines+markers',marker_color='green'))\nfig.update_layout(title_text = 'Trend of Recovery Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()\nprint(\"Mean Recovery Rate\",temp['Recovery Rate'].mean())\n","97a58372":"#### Data for India has been taken from http:\/\/covid19india.org\/, CSSEGISandData\n\n#### Global data is taken from Kaggle\n","9a40e4fb":"> ## Fitting SIR Model on Total World Population","5b9a77a2":"And finally, to obtain the evolution of the disease we simply define the initial conditions and call the rk4 method:","7fc20df8":"<a id=\"section-twelve\"><\/a>\n> ## 4.1 Growth Factor\n\n\n\n>  Growth Factor is calculated as-\n>  Where \ud835\udc36 is the number of confirmed cases,\n>  Growth Factor=\u0394C\ud835\udc5b\/\u0394C\ud835\udc5b\u22121","6f75aa13":"> ## Observations","361cc4b2":"> ## Observation\nARIMA model is predicting over 250000 cases in next 15 days in India","fc48c4f4":"<a id=\"section-three\"><\/a>\n> ## 2.1 Reading Global Data","9ac92dfe":"<a id=\"section-eight\"><\/a>\n>  ## 3. Forecasting ","dd5846b2":"<a id=\"section-eleven\"><\/a>\n> ## 4. Lockdown Analysis in India","2261e590":"> ## Observation\nTill 17th May, There were total 4713620 confirmed cases, 1733963 recovered cases, 315185 Deaths,and 3294842 Active Cases.","0cafb32b":"> ## Observation - \nIn India Maharashtra is the most Affected State, followed by Gujrat, Tamil Nadu and Delhi.","d6c56710":"<a id=\"section-sixteen\"><\/a>\n> ## 4.5 Analysis of Lockdown 2.0","baf6a55f":"<a id=\"section-six\"><\/a>\n> ## 2.4 Testing in India","076a30aa":"> ## Observations:\n* The number of infected cases increases for a ceratain time period, and then it eventually decreases given that inviduals recover\/dead from the disease\n* The opposite happens for the recovered\/deceased case","867c137e":"<a id=\"section-five\"><\/a>\n> ## 2.3 Situation of India","98a445c2":"In order to solve the differential equations system, we develop a 4rth order Runge-Kutta method:","f76bc8bf":"<a id=\"section-four\"><\/a>\n> ## 2.2 Exploratory Data Analysis","4f55e340":"> ## Observation \n","b784c1c5":"> In India till now 2.2M+ tests have been done.","821386e9":"> ### Reading Data for India","64850cf9":"<a id=\"section-seven\"><\/a>\n> ## 2.5 State Wise Analysis","0f1e3e69":"# COVID-19: Understanding the impact of Lockdown on Growth Factor,Recovery Rate, Mortality Rate, and Contagion rate of the pathogen(\ud835\udefd) and  Recovery Rate(\ud835\udefe) in India Using SIR Model","5ce4c08b":"> ### Observation Before Lockdown in India\n\n* > There were over 500 cases when the lockdown was implemented on 25th March.\n* >  The mean growth rate is 2.1682900953337017.\n* >  Optimal parameters: beta = 1.2126939921477582  and gamma =  1.0530470441778572 from SIR MODEL.\n* >  Mean Mortaility Rate 0.9372133853884259.\n* >  Mean Recovery Rate 11.608695652173912.\n\n\n\n\n\n","df543633":"> ## We have analyzed the lockdown phases on the basis of-\n1. Growth Rate\n2. SIR Model\n3. Cases over Time\n4. Moratlity Rate\n5. Recovery Rate\n","8d6fa6bb":"<a id=\"section-thirteen\"><\/a>\n> ## 4.2 SIR Model","d43622a2":"<a id=\"section-fourteen\"><\/a>\n> ## 4.3 Analysing Data Before Lockdown (Phase 0)","94a95861":"> ## Observation Lockdown 1.0\n* >  There were over 10k+ on 14th April out which 1365 have recoverd and 396 > were deceased.\n* >  Mean Growth Rate 1.174770643366856\n* >  Optimal parameters: beta = 23.599564196488558  and gamma =  > 23.474179051682025 using SIR Model\n* >  Total 229.4k testing was done till 14th April.\n* >  Daily rate of Testing was in the range of 5k-30k, the testing rate increases from 7th April.\n\n* >  Total Number of people tested : 229426.0\n* >  Total Number of positive cases : 10307.0\n* >  Test Conducted per Million People : 17.65\n* >  Positive case per Tests [%]: 4.49\n* >  Mean Mortality Rate[%] 2.831688020930559\n* >  Mean Recovery Rate[%] 9.058082827807343","0110c248":"<a id=\"section-seventeen\"><\/a>\n> ## 4.6 Analysis of Lockdown 3.0","5b9d63fd":"<a id=\"section-nine\"><\/a>\n> ## 3.1 Prophet Model\n \nProphet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\nProphet is open source software released by Facebook\u2019s Core Data Science team. [https:\/\/facebook.github.io\/prophet\/]\n\n","c792f324":">  In India, till 17th May there are almost 95K+ confirmed cases, with 5079 new cases on 17th itself out of which 36k+ have been recovered, above 3K have deceased.\n>  Seeing at curves daily new cases in india is growing at a very fast rate.","d0ff998e":"> ### I have divided the data into 4 parts to analyze the each lockdown phase separately and tried to analyze the affect of Lockdown in India.\n> * Prelockdown Period - P0 (Starting from First Case in India till First lockdown on 25th March)\n> * Lockdown 1.0 - P1 (25th March to 14th April)\n> * Lockdown 2.0 - P2 (Extended till 3rd May)\n> * Lockdown 3.0 - P3 (3rd May to Present)\n","f9448816":"<a id=\"section-fifteen\"><\/a>\n> ## 4.4 Analysis of Lockdown 1.0 (25th March - 14th April)","666b936d":"> ## Observation of Lockdown 3.0\n* >  There were over 53k+ active cases till 17th May out of which 34k have recoverd and 2872 were deceased.\n* >  Mean Growth Factor 1.0503204991084447\n* >  Optimal parameters: beta = 0.0004055735238853274  and gamma =  -0.05889203836323552 using SIR Model\n* >  About 2.2M+ testing was done till 16th May.\n* >  Daily rate of Testing was in the range of 60k-95k, the testing rate increases from 13th May.\n* >  Total Number of people tested : 2134277.0\n* >  Total Number of positive cases : 67152.0\n* >  Test Conducted per Million People : 164.18\n* >  Positive case per Tests [%]: 3.15  \n* >  Mean Mortality Rate[%] 3.3044164774175835\n* >  Mean Recovery Rate[%] 31.433540749460498","293f5a80":"<a id=\"section-ten\"><\/a>\n> ## 3.2 ARIMA Model\n>  ARIMA Model is also a forecasting model, provided by -\n[https:\/\/www.statsmodels.org\/stable\/generated\/statsmodels.tsa.arima_model.ARIMA.html]","20c9eda1":"2.1. Implementing the SIR model\nSIR model can be implemented in many ways: from the differential equations governing the system, within a mean field approximation or running the dynamics in a social network (graph). For the sake of simplicity, I'vem chosen the first option, and we will simply run a numerical method (Runge-Kutta) to solve the differential equations system.\n\nThe functions governing the dif.eqs. are","02a71910":"<a id=\"section-one\"><\/a>\n> ## 1. Introduction\n>  COVID-19 is spearding at a rapid pace worldwide, most inviduals infected with COVID-19 are asymptotic or show mild symptoms, to contain the spread of COVID-19 and keep infection at a manageable level, many countries have institued lockdowns and social distancing including in India.\n> In India, lockdown was announced in Phases - \n* 1st Phase - 25th March - 14 April\n* 2nd Phase - 15th April - 3 May\n* 3rd Phase -  4 May - Present\n\n> Additionally, interventions such as social distacing and quarantine of infectected individual.\n> > In this notebook, I have analyzed the cumulative growth rate, mortality rate, testing rate, also contagion rate and recovery rate using SIR Model in each phases of lockdown.","254ca486":"### *I will keep updating this notebook continuosly with new visualization on updated data.*","5b0704ec":"Where  \ud835\udefd  is the contagion rate of the pathogen and  \ud835\udefe  is the recovery rate.","74f3adbe":"> We have seen some general behavior of the virus in agregated data, for the country where the coronavirus was originated and for four other interesting countries. There's a lot of information to be extracted from this data; for example, we haven't analyzed the effects of long\/lat of countries. However, since our main purpose is to develop a predective model in order to understand the key factors that impact the COVID-19 transmission, I'll move on to one of the most famous epidemiologic models: SIR.\n\n> SIR is a simple model that considers a population that belongs to one of the following states:\n\n> Susceptible (S). The individual hasn't contracted the disease, but she can be infected due to transmisison from infected people\nInfected (I). This person has contracted the disease\nRecovered\/Deceased (R). The disease may lead to one of two destinies: either the person survives, hence developing inmunity to the disease, or the person is deceased.\n\n![Image taken from Lewuathe](http:\/\/www.lewuathe.com\/assets\/img\/posts\/2020-03-11-covid-19-dynamics-with-sir-model\/sir.png)\n\n> There are many versions of this model, considering birth and death (SIRD with demography), with intermediate states, etc. However, since we are in the early stages of the COVID-19 expansion and our interest is focused in the short term, we will consider that people develops immunity (in the long term, immunity may be lost and the COVID-19 may come back within a certain seasonality like the common flu) and there is no transition from recovered to the remaining two states. With this, the differential equations that govern the system are:\n\n> \ud835\udc51\ud835\udc46\ud835\udc51\ud835\udc61=\u2212\ud835\udefd\ud835\udc46\ud835\udc3c\/\ud835\udc41\n \n> \ud835\udc51\ud835\udc3c\/\ud835\udc51\ud835\udc61=\ud835\udefd\ud835\udc46\ud835\udc3c\/\ud835\udc41\u2212\ud835\udefe\ud835\udc3c\n \n> \ud835\udc51\ud835\udc45\/\ud835\udc51\ud835\udc61=\ud835\udefe\ud835\udc3c\n \n> Where  \ud835\udefd  is the contagion rate of the pathogen and  \ud835\udefe  is the recovery rate.\n\n","7fb2ae8f":"> ## CONTENTS\n\n[1. Introduction](#section-one)\n\n[2. Importing Necessary Modules and Reading Data](#section-two)\n\n[2.1 Reading Global Data](#section-three)\n\n[2.2 Exploratory Data Analysis](#section-four)\n\n[2.3 Situation of India](#section-five)\n\n[2.4 Testing in India](#section-six)\n\n[2.5 State Wise Analysis](#section-seven)\n\n[3. Forecasting](#section-eight)\n\n[3.1 Prophet Model](#section-nine)\n\n[3.2 ARIMA Model](#section-ten)\n\n[4. Lockdown Analysis in India](#section-eleven)\n\n[4.1 Growth Factor](#section-twelve)\n\n[4.2 SIR Model](#section-thirteen)\n\n[4.3 Analysing Data Before Lockdown (Phase 0)](#section-fourteen)\n\n[4.4 Analysis of Lockdown 1.0 (25th March - 14th April)](#section-fifteen)\n\n[4.5 Analysis of Lockdown 2.0](#section-sixteen)\n\n[4.6 Analysis of Lockdown 3.0](#section-seventeen)\n\n","6048ff25":"Results obtained for N=world population, only one initial infected case,  \ud835\udefd=0.7 ,  \ud835\udefe=0.2  and a leap pass  \u210e\ud835\udc60=0.1  are shown below:","0190ffdc":"<a id=\"section-two\"><\/a>\n> ## 2. Importing Necessary Modules and Reading Data","e177fb36":"> ## Obsevation from Lockdown 2.0\n* > There were over 29k+ active cases 3rd May out of which 11k have recoverd and 1463 were deceased.\n* > Mean Growth Rate 1.0876894606676482\n* > Optimal parameters: beta = 0.8143909713954196  and gamma =  0.7550283392636146 using SIR Model\n* > About 1M testing was done till 3rd May\n* > Daily rate of Testing was in the range of 20k-70k, the testing rate increases from 26th April.\n* > Total Number of people tested : 1046450.0\n* > Total Number of positive cases : 39980.0\n* > Test Conducted per Million People : 80.5\n* > Positive case per Tests [%]: 3.82\n* > Mean Mortality Rate [%]: 3.261192126339329\n* > Mean Recovery Rate[%] 21.144983937598926\n","3aebcc7f":"> ## Observation: \nUsing Prophet Model on India Data, it is predicting over 175000 cases in the next 15 days"}}