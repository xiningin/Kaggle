{"cell_type":{"8de79528":"code","6b1f7898":"code","e62561f9":"code","8ec0311d":"code","80013b35":"code","90fa0b3f":"code","58a4f577":"code","ef7bfeaf":"code","d93f8570":"code","80af2bc8":"code","a160288e":"code","28fde053":"code","88838128":"code","56764c5b":"code","c8bf8404":"code","3c491899":"code","c18c3a74":"code","1acfe848":"code","8f7bcc23":"code","08895f6b":"code","bd167d2b":"code","32dfa786":"code","3b7745ad":"code","d10f54f1":"code","c8dda9a7":"code","a4f06168":"code","f09b5759":"code","ece81811":"code","d1e57e73":"code","76e4fea8":"code","ac94f21f":"code","1bd27535":"code","7b3216c0":"code","dd9163d1":"code","bb7dfe23":"code","eca97b7c":"code","40996a61":"code","3bb18891":"code","c439723d":"code","9e1c4ab1":"code","5ac52fe1":"code","60671f3a":"code","f91d105d":"code","f46036d1":"code","2b00dfae":"code","f731a828":"code","6e2b4531":"code","dfe67a7f":"code","618f12e8":"code","61701fd7":"code","0701f8c6":"code","0b117e25":"code","fb195a53":"code","13e73d8d":"code","35f574f7":"code","8877fe87":"code","e5101e01":"code","d173976b":"code","a6b04ecc":"code","4de13bde":"code","aa8c2fb9":"code","ab7faea7":"code","2dbfa24f":"code","1db453f8":"code","7dbe907d":"code","280c426e":"code","4ace475b":"code","97dbe22d":"code","3b7ebff3":"code","a5f9daf7":"code","4e44103e":"code","68534d7a":"code","b6ad75cb":"code","ba6180c0":"code","8f65a446":"code","cb2dbde3":"code","4ad96c6c":"code","9355f993":"code","8e3f1ec6":"code","03963cba":"code","7f32b5d3":"code","801f6b9d":"code","c3103bbc":"code","05401585":"code","c30be5c6":"code","7da0beba":"code","392e183a":"code","683ac902":"code","2bf06df1":"code","17882b95":"code","b29e1efc":"code","f812c526":"code","4b538987":"code","858f6f90":"code","0e66e1db":"code","38671695":"code","b8751377":"code","174a7414":"code","d30f7f77":"code","267a7347":"code","ff560115":"code","80019c56":"code","8a38be77":"code","7e955932":"code","dcbb9c1d":"markdown","e45a141f":"markdown","cd6e844d":"markdown","0bc4fe30":"markdown","23f366b4":"markdown","75587b36":"markdown","ca1feddf":"markdown","c079a1c9":"markdown","7f703d55":"markdown","53217ce5":"markdown","97986ece":"markdown","f38fde29":"markdown","ff336706":"markdown","a47f7c96":"markdown"},"source":{"8de79528":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b1f7898":"df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf.head()","e62561f9":"df.dtypes","8ec0311d":"df.describe(include='all')","80013b35":"df.drop(['PassengerId','Ticket'],axis=1,inplace=True)","90fa0b3f":"df.head()","58a4f577":"x=df[['Survived','Pclass']]\ny=x.groupby('Pclass',as_index=False).mean()\ny","ef7bfeaf":"df['Name']=df['Name'].str.split(',')\ndf.head()","d93f8570":"x=list(df['Name'])\ny=x.copy()\ni=0\nfor a in x:\n    y[i]=a[1]\n    i=i+1\ndf['Name']=y","80af2bc8":"df.head()","a160288e":"x=y.copy()","28fde053":"i=0\nfor a in y:\n    q=a.split('.')\n    x[i]=q[0]\n    i=i+1","88838128":"x[:5]","56764c5b":"df['Name']=x","c8bf8404":"df.head()","3c491899":"x=df[['Name','Survived']]\ny=x.groupby('Name',as_index=False).mean()\ny","c18c3a74":"mean_age=df['Age'].mean()\nmean_age","1acfe848":"df['Age'].replace(np.nan,mean_age,inplace=True)\ndf.describe(include='all')","8f7bcc23":"x=df['Cabin'].to_numpy()","08895f6b":"y=x.astype('<U1')","bd167d2b":"x=y.astype('object')","32dfa786":"df['Cabin']=x\ndf['Cabin'].replace('n',np.nan,inplace=True)","3b7745ad":"df.describe(include='all')","d10f54f1":"x=pd.get_dummies(df['Pclass'])\nx.head()\nz=x.columns","c8dda9a7":"df[z]=x","a4f06168":"#df=pd.concat([df,x])\ndf.shape","f09b5759":"df.describe(include=\"all\")","ece81811":"df.drop('Pclass',axis=1,inplace=True)","d1e57e73":"x=pd.get_dummies(df['Name'])\nz=x.columns\ndf[z]=x\ndf.shape","76e4fea8":"df.drop('Name',axis=1,inplace=True)","ac94f21f":"df.head()","1bd27535":"x=pd.get_dummies(df['Embarked'])\n#z=x.columns\ndf[['Place1','Place2','Place3']]=x\ndf.drop('Embarked',axis=1,inplace=True)","7b3216c0":"x=pd.get_dummies(df['Cabin'])\nz=x.columns\ndf[z]=x\ndf.drop('Cabin',axis=1,inplace=True)","dd9163d1":"df.drop('Fare',axis=1,inplace=True)","bb7dfe23":"df.head()","eca97b7c":"x=pd.get_dummies(df['Sex'])\nz=x.columns\ndf[z]=x\ndf.drop('Sex',axis=1,inplace=True)","40996a61":"y=df.columns","3bb18891":"X_data=df[y[1:]].values\nY_data=df[y[0]].values","c439723d":"X=np.asarray(X_data)\nY=np.asarray(Y_data)","9e1c4ab1":"X[0:5]","5ac52fe1":"from sklearn.preprocessing import StandardScaler","60671f3a":"X=StandardScaler().fit(X).transform(X)","f91d105d":"X[:5]","f46036d1":"from sklearn.model_selection import train_test_split","2b00dfae":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2, random_state=4)","f731a828":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics","6e2b4531":"Ks = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,Y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(Y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==Y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","dfe67a7f":"import matplotlib.pyplot as plt","618f12e8":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Neighbours (K)')\nplt.tight_layout()\nplt.show()","61701fd7":"neigh = KNeighborsClassifier(n_neighbors = 2).fit(X_train,Y_train)\nyhat=neigh.predict(X_test)","0701f8c6":"metrics.accuracy_score(Y_test, yhat)","0b117e25":"from sklearn.metrics import jaccard_similarity_score,f1_score,log_loss","fb195a53":"jaccard_similarity_score(yhat,Y_test)","13e73d8d":"f1_score(yhat,Y_test)","35f574f7":"from sklearn.tree import DecisionTreeClassifier","8877fe87":"tree=DecisionTreeClassifier(criterion='entropy',max_depth=4)","e5101e01":"tree.fit(X_train,Y_train)","d173976b":"yhat1=tree.predict(X_test)","a6b04ecc":"metrics.accuracy_score(yhat1,Y_test)","4de13bde":"jaccard_similarity_score(yhat1,Y_test)","aa8c2fb9":"f1_score(yhat1,Y_test)","ab7faea7":"from sklearn import svm","2dbfa24f":"clf=svm.SVC(kernel='rbf')\nclf.fit(X_train,Y_train)","1db453f8":"yhat2=clf.predict(X_test)","7dbe907d":"jaccard_similarity_score(yhat2,Y_test)","280c426e":"f1_score(yhat2,Y_test)","4ace475b":"from sklearn.linear_model import LogisticRegression","97dbe22d":"from sklearn.metrics import confusion_matrix","3b7ebff3":"LR=LogisticRegression(C=0.01,solver='liblinear').fit(X_train,Y_train)","a5f9daf7":"yhat3=LR.predict(X_test)","4e44103e":"jaccard_similarity_score(yhat3,Y_test)","68534d7a":"print(confusion_matrix(Y_test,yhat3,labels=[1,0]))","b6ad75cb":"f1_score(yhat3,Y_test)","ba6180c0":"import xgboost as xgb","8f65a446":"train = xgb.DMatrix(X_train, label = Y_train)","cb2dbde3":"param= {\n    'max_depth' : 8,\n    'eta' : 0.04,\n    'objective' : 'binary:hinge'\n}\nepochs = 300","4ad96c6c":"model_xg = xgb.train(param, train, epochs)","9355f993":"test = xgb.DMatrix(X_test, label = Y_test)\ny_hat_xgb = model_xg.predict(test)","8e3f1ec6":"y_hat_xgb[:5]","03963cba":"print(confusion_matrix(Y_test,y_hat_xgb,labels=[1,0]))","7f32b5d3":"jaccard_similarity_score(y_hat_xgb,Y_test)","801f6b9d":"metrics.accuracy_score(y_hat_xgb,Y_test)","c3103bbc":"test_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","05401585":"test_df.describe()","c30be5c6":"passenger_details=test_df['PassengerId'].tolist()","7da0beba":"test_df.drop(['PassengerId','Ticket'],axis=1,inplace=True)","392e183a":"test_df['Name']=test_df['Name'].str.split(',')\nx=list(test_df['Name'])\ny=x.copy()\ni=0\nfor a in x:\n    y[i]=a[1]\n    i=i+1\ntest_df['Name']=y\nx=y.copy()\ni=0\nfor a in y:\n    q=a.split('.')\n    x[i]=q[0]\n    i=i+1\ntest_df['Name']=x\nmean_age=test_df['Age'].mean()\ntest_df['Age'].replace(np.nan,mean_age,inplace=True)\nx=test_df['Cabin'].to_numpy()\ny=x.astype('<U1')\nx=y.astype('object')\ntest_df['Cabin']=x\ntest_df['Cabin'].replace('n',np.nan,inplace=True)\nx=pd.get_dummies(test_df['Pclass'])\nx.head()\nz=x.columns\ntest_df[z]=x\ntest_df.drop('Pclass',axis=1,inplace=True)\nx=pd.get_dummies(test_df['Name'])\nz=x.columns\ntest_df[z]=x\ntest_df.drop('Name',axis=1,inplace=True)\nx=pd.get_dummies(test_df['Embarked'])\ntest_df[['Place1','Place2','Place3']]=x\ntest_df.drop('Embarked',axis=1,inplace=True)\nx=pd.get_dummies(test_df['Cabin'])\nz=x.columns\ntest_df[z]=x\ntest_df.drop('Cabin',axis=1,inplace=True)\ny=test_df.drop('Fare',axis=1,inplace=True)\nx=pd.get_dummies(test_df['Sex'])\nz=x.columns\ntest_df[z]=x\ntest_df.drop('Sex',axis=1,inplace=True)\ntest_df.describe()","683ac902":"index = np.arange(0, 418)\ntdf = pd.DataFrame(index=index, columns=df.columns)\ntdf.head()","2bf06df1":"col=test_df.columns\ntdf[col]=test_df\ntdf.head()","17882b95":"tdf.drop(' Dona',axis=1,inplace=True)","b29e1efc":"tdf.drop('Survived',axis=1,inplace=True)","f812c526":"tdf=tdf.fillna(0)","4b538987":"tdf.head()","858f6f90":"y=tdf.columns\nX_data=tdf[y[0:]].values\nX=np.asarray(X_data)\nX=StandardScaler().fit(X).transform(X)\n","0e66e1db":"X = xgb.DMatrix(X)\nAns=model_xg.predict(X)","38671695":"Ans","b8751377":"Solution=pd.DataFrame(passenger_details)","174a7414":"Solution.head()","d30f7f77":"Solution['Survived']=Ans","267a7347":"Solution.head()","ff560115":"Solution['Survived'] = Solution['Survived'].astype('int')","80019c56":"Solution.columns=['PassengerId','Survived']","8a38be77":"Solution","7e955932":"Solution.to_csv('Sol.csv',index = False)","dcbb9c1d":"# Evaluation","e45a141f":"Ticket column has no particular pattern amongst values, Passenger Id is not a proper predictor","cd6e844d":"# **Decision Tree**","0bc4fe30":"# **Cabin**","23f366b4":"# **SVM**","75587b36":"# **Logistic Regression**","ca1feddf":"There is a clear sign of distinction among average probabilities of various Classes","c079a1c9":"# **Age**","7f703d55":"# **Classifier**","53217ce5":"# **KNN**","97986ece":"# **PClass**","f38fde29":"# **Name**","ff336706":"# **Testing**","a47f7c96":"## XGboost"}}