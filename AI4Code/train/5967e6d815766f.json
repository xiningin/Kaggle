{"cell_type":{"a8015e0c":"code","ec566340":"code","8bfbe9f8":"code","e04de947":"code","247eba4b":"code","c6eb6b35":"code","f30e43ca":"code","b69575ba":"code","6b3f0df7":"code","50215605":"code","24ca9f5b":"code","d689715c":"code","c3dd4c2d":"code","c4216e6b":"code","0ea81135":"code","18b0b2be":"code","f7f71ad5":"code","33c0d903":"code","6934f8e5":"code","e7c15a01":"code","020ded59":"code","fc00ffdb":"code","3a89eeec":"code","eb00c76e":"code","58657bf0":"code","f62a69dd":"code","71d8abdf":"code","7f6056e1":"code","381439b8":"code","49b93de9":"markdown","f5338c4c":"markdown","b342b500":"markdown","c8708c7a":"markdown","1c1f31cd":"markdown","037d713c":"markdown","3641c5d1":"markdown","e43447ed":"markdown","5fe78a2b":"markdown","d1a5da89":"markdown","c070727c":"markdown","8ac63b58":"markdown","324bfc05":"markdown","3d7cc80c":"markdown","7382f66b":"markdown","05226a0c":"markdown","a8674c2b":"markdown","b020e9dc":"markdown","22b4b016":"markdown","3abfc9b3":"markdown","8e5c2d3e":"markdown","55655561":"markdown","414ac403":"markdown","db5bab2d":"markdown","b8848239":"markdown","cdbb4d79":"markdown","3bb6326d":"markdown","515f743e":"markdown","84b1588a":"markdown","2236ba4a":"markdown","609cad7b":"markdown","3e9d42aa":"markdown","6da28737":"markdown","ad92862d":"markdown","4e1478d1":"markdown","80be8b32":"markdown","e5271b5d":"markdown","6bbcc864":"markdown","a1385dab":"markdown","2ede045b":"markdown","1e9e153a":"markdown","021bb0d8":"markdown","dbc7f256":"markdown","24850cc5":"markdown","d709b570":"markdown","b4e554ef":"markdown","2e7e76dd":"markdown","fe340ea2":"markdown","b9ac4f32":"markdown","d6bf3eef":"markdown","1557fadf":"markdown","f7e246bc":"markdown","b38b6c44":"markdown","b16dc86c":"markdown","af6fd95d":"markdown"},"source":{"a8015e0c":"!wget https:\/\/gitlab.com\/kalilinux\/packages\/seclists\/-\/raw\/kali\/master\/Passwords\/Common-Credentials\/10-million-password-list-top-1000000.txt","ec566340":"!wget https:\/\/raw.githubusercontent.com\/first20hours\/google-10000-english\/master\/google-10000-english-no-swears.txt","8bfbe9f8":"!wget https:\/\/gist.githubusercontent.com\/kingabzpro\/d22c3e672083a4fa59c33faf132d116f\/raw\/377dd517f2dd33e2ea03dda3ba3db03321ac54db\/synthetic_username_password.csv","e04de947":"# All purpose\nimport pandas as pd\nimport numpy as np\nimport re\nfrom string import punctuation\n\n# Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud","247eba4b":"# Loading in all datasets\nusers = pd.read_csv(\"synthetic_username_password.csv\")\nprint(\"Number of samples = \"+str(users.size))\n# Taking a look at the 6 first users\nusers.head(6)","c6eb6b35":"print(\"Number of missing values : \\n\\n\"+str(users.isna().sum()))","f30e43ca":"sns.set(rc={'figure.figsize':(15,8)})\n\nTop10pass = users.password.astype(str).value_counts().rename_axis(['passwords']).reset_index(name='counts')[0:9]\nfig, ax = plt.subplots()\n\nax = sns.barplot(data=Top10pass,x=\"passwords\",y=\"counts\",palette=\"mako\")\nax.patch.set_visible(False)\nax.tick_params(axis='x', labelrotation = 45)\nax.set_title(\"Top 10 Password\",fontsize=20);","b69575ba":"# Getting all the reviews termed positive in a single string and forming a word cloud of the string\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=[14, 14], facecolor = None)\n\ntext1 =''\nfor i in users['password'].values:\n    text1+=i + ' '\n\nx, y = np.ogrid[:300, :300]\n\nmask = (x - 150) ** 2 + (y - 150) ** 2 > 130 ** 2\nmask = 255 * mask.astype(int)\n\nwc1 = WordCloud(width = 800, height = 800,background_color=\"white\",min_font_size = 10,\\\n    repeat=True, mask=mask)\nwc1.generate(text1)\n\nax1.axis(\"off\")\nax1.imshow(wc1, interpolation=\"bilinear\")\nax1.set_title('Password',fontsize=20);\n\ntext2 =''\nfor i in users['user_name'].values:\n    text2+=i + ' '\n\nx, y = np.ogrid[:300, :300]\n\nmask = (x - 150) ** 2 + (y - 150) ** 2 > 130 ** 2\nmask = 255 * mask.astype(int)\n\n\nwc2 = WordCloud(width = 800, height = 800,background_color=\"white\",min_font_size = 10,\\\n    repeat=True, mask=mask)\nwc2.generate(text2)\n\nax2.axis(\"off\")\nax2.imshow(wc2, interpolation=\"bilinear\")\nax2.set_title('Username',fontsize=20);\n\n\nplt.show()","6b3f0df7":"# Creatng string length column\nusers['length'] = users['password'].str.len()\n\n# Checking for short length passwords\nusers['too_short'] = users['length']<8\n\n\nprint(\"Counting and printing the number of users with too short passwords :\" +\\\n str(users['too_short'].sum()))\n# The  first 6 rows\nusers.head(6)","50215605":"# loading top 1000000 most used words on internet.\ncommon_passwords = pd.read_csv(\"10-million-password-list-top-1000000.txt\",\n                              header=None,squeeze=True)\n# The 6 rows\ncommon_passwords.head(6)","24ca9f5b":"# Checking most commonly used passwords\nusers['common_password'] = users['password'].str.lower().isin( common_passwords)\n\n\nprint(\"Number of users using common passwords :\"+str(sum(users['common_password'])))\n# The 6 first rows\nusers.head(6)","d689715c":"# Reading in a list of the 10000 most common words\nwords = pd.read_csv(\"google-10000-english-no-swears.txt\",\n                              header=None,squeeze=True)\n#The 6 first rows\nwords.head(6)","c3dd4c2d":"# Checking most common words on our passwords\nusers['common_word'] = users['password'].str.lower().isin(words)\n\n\nprint(\"The number of users using common words as passwords :\"+str(sum(users['common_word'])))\n# The 6 first rows\nusers.head(6)","c4216e6b":"# Saperating firstname and last name from your username\nusers['first_name'] = users['user_name'].str.extract(r'(^\\w+)', expand=False)\nusers['last_name'] = users['user_name'].str.extract(r'(\\w+$)', expand=False)\n\n# Checking Username in your password\nusers['uses_name'] = (users['password'] == users['first_name'])|\\\n                     (users['password'] == users['last_name'])\n\nprint(\"The number of users using names as passwords :\"+str(sum(users['uses_name'])))\n# Taking a look at the 6 first rows\nusers.head(6)","0ea81135":"### Flagging the users with passwords with >= 4 repeats\nusers['too_many_repeats'] = users['password'].str.contains(r'(.)\\1\\1\\1\\1\\1');\n\n# Taking a look at the users with too many repeats\nprint(\"Number of passwords with > 4 repeat character :\"+str(users['too_many_repeats'].sum()));","18b0b2be":" def digital(data):  \n    val = True\n    if not any(char.isdigit() for char in data[\"password\"]):\n        val = False\n    else:\n        val = True\n    return val\n def upper(data):  \n    val = True\n    if not any(char.isupper() for char in data[\"password\"]):\n        val = False\n    else:\n        val = True\n    return val\n\n def lower(data):  \n    val = True\n    if not any(char.islower() for char in data[\"password\"]):\n        val = False\n    else:\n        val = True\n    return val\n\n def special(data): \n    SpecialSym = set(punctuation) \n    val = True\n    if not any(char in SpecialSym for char in data[\"password\"]):\n        val = False\n    else:\n        val = True\n    return val\n","f7f71ad5":"users[\"Have_digit\"] = users.apply(digital,axis=1) ## Checking if password have numerical char\nusers[\"Have_capital\"] = users.apply(upper,axis=1) ## Checking if password have upper character\nusers[\"Have_lower\"] = users.apply(lower,axis=1) ## Checking if password have lower character\nusers[\"Have_special_char\"] = users.apply(special,axis=1) ## Checking if password have special char","33c0d903":"users.head(6)","6934f8e5":"def strength(data):\n    power=0\n    if not data[\"too_short\"]:\n        power+=1\n    if not data[\"common_password\"]:\n        power+=1\n    if not data[\"too_many_repeats\"]:\n        power+=1\n    if not data[\"uses_name\"]:\n        power+=1\n    if not data[\"common_word\"]:\n        power+=1\n    if data[\"Have_digit\"]:\n        power+=1\n    if data[\"Have_capital\"]:\n        power+=1\n    if data[\"Have_lower\"]:\n        power+=1\n    if data[\"Have_special_char\"]:\n        power+=1\n    return power","e7c15a01":"users[\"strength\"] = users.apply(strength,axis=1)","020ded59":"sns.set(rc={'figure.figsize':(15,8)})\n\nS = users.strength.astype(str).value_counts().rename_axis(['strength']).\\\n    reset_index(name='counts').sort_values(by=\"strength\")\nfig, ax = plt.subplots()\n\nax = sns.barplot(data=S,x=\"strength\",y=\"counts\",palette=\"mako\")\nax.patch.set_visible(False)\n# ax.tick_params(axis='x', labelrotation = 45)\nax.set_title(\"Password Strength\",fontsize=20);","fc00ffdb":"# Checking password validity \nusers['bad_password'] = users['too_short']|\\\n                        users['common_password']|\\\n                        users['common_word']|\\\n                        users['uses_name']|\\\n                        users[\"too_many_repeats\"]|\\\n                        ~users['Have_digit']|\\\n                        ~users['Have_capital']|\\\n                        ~users['Have_lower']|\\\n                        ~users['Have_special_char']\n\n\nprint(\"The number of bad passwords :\"+str(users['bad_password'].sum())+\"\/\"+str(len(users[\"password\"])))\n# The first 6 bad passwords\nusers.head(6)","3a89eeec":"# Checking password validity \nusers['bad_password'] = users['strength']>6\n\n\nprint(\"The number of bad passwords :\"+str(users['bad_password'].sum())+\"\/\"+str(len(users[\"password\"])))\n# The first 6 bad passwords\nusers.head(6)","eb00c76e":"def bad_pass(username,password):\n    too_short = True\n    common_password = True\n    common_word = True\n    uses_name = True\n    too_many_repeats = True\n    digit = False\n    lower = False\n    upper = False\n    special = False\n    SpecialSym = set(punctuation) \n\n    firstname = \"\"\n    lastname = \"\"\n\n    if len(password) < 8:\n        print('Password length should be greater then 8')\n        too_short = True\n    else:\n        too_short = False\n\n    if password.lower() in ( common_passwords.values):\n        print('Password should not have pawned passwords')\n        common_password = True\n    else:\n        common_password = False\n\n    if password.lower() in (words.values):\n        print('Password should not have Google most common word')\n        common_word = True\n    else:\n        common_word = False\n    firstname = re.findall(r'(^\\w+)', username)\n    lastname = re.findall(r'(\\w+$)', username)\n\n    if (password == firstname)|(password == lastname):\n        print('Password should not have username')\n        uses_name = True\n    else:\n        uses_name = False\n\n    if np.size(re.findall(r'(.)\\1\\1\\1\\1\\1', password) ) == 0:\n        \n        too_many_repeats = False\n    else:\n        print('Password should not have repeatative character')\n        too_many_repeats = True\n\n    if not any(char.isdigit() for char in password):\n        print('Password should have at least one numerical')\n        digit = True\n            \n    if not any(char.isupper() for char in password):\n        print('Password should have at least one uppercase letter')\n        upper = True\n            \n    if not any(char.islower() for char in password):\n        print('Password should have at least one lowercase letter')\n        lower = True\n            \n    if not any(char in SpecialSym for char in password):\n        print('Password should have at least one of the special characters')\n        special = True\n\n    if too_short|common_password|common_word|uses_name|too_many_repeats|\\\n        digit|upper|lower|special:\n        print('\\n\\033[1m'+\"Bad Password\"+'\\033[0m')\n    else:\n        print('\\n\\033[1m'+\"Good Password\"+'\\033[0m')\n    ","58657bf0":"username = \"Abid.Ali\"\nnew_password = \"asdhowhoqidn23121\"\nbad_pass(username,new_password)","f62a69dd":"username = \"Abid.Ali\"\nnew_password = \"12222222222222222\"\nbad_pass(username,new_password)","71d8abdf":"username = \"Abid.Ali\"\nnew_password = \"12345\"\nbad_pass(username,new_password)","7f6056e1":"username = \"Abid.Ali\"\nnew_password = \"wj7y!2KcpJeGds\"\nbad_pass(username,new_password)","381439b8":"username = \"Abid.Ali\"\nnew_password = \"Gf4Cx4b%Fqfc#Z\"\nbad_pass(username,new_password)","49b93de9":"# Downloading Data","f5338c4c":"## Adding more features\n**These features includes:**\n- Password should have at least one numerical\n- Password should have at least one uppercase letter\n- Password should have at least one lowercase letter\n- Password should have at least one of the special characters","b342b500":"## Strength of password\n- Every 'False' in feature : (**too_short,common_password,too_many_repeats,uses_name,\"common_word**) adds into the score of strength. \n- Every 'True' in feature : \n(**Have_digit,Have_capital,Have_lower,Have_special_char**) adds into the score of strength.\n- In the end they all adds upto stregth score.","c8708c7a":"### Strength function","1c1f31cd":"### Defining the functions","037d713c":"### Downloading the clean data","3641c5d1":"## Passwords should not be repetitive","e43447ed":"## Missing Values\nThere are no missing values so we probably have cleaned the dataset. ","5fe78a2b":"## Checking the password validity ","d1a5da89":"# Data Exploration","c070727c":"# \u2764 My work and follow me on Deepnote community for more exciting projects.","8ac63b58":"# Final Thoughts","324bfc05":"### Appling strength function","3d7cc80c":"## Checking short passwords","7382f66b":"only two passwords match our criteria, let lower our standards to include passwords that have a strength greater than 6.","05226a0c":"![Picture title](https:\/\/assets.entrepreneur.com\/content\/3x2\/2000\/20180724150140-GettyImages-808424876.jpeg)\n\nImage Credit: [entrepreneur](https:\/\/assets.entrepreneur.com\/content\/3x2\/2000\/20180724150140-GettyImages-808424876.jpeg)","a8674c2b":"## Google top 10,000 words\n![image.png](attachment:91947aa3-417f-46fe-ad1f-8ad9513c3c34.png)\n\nThis dataset contains most comon words used on google without swear words, last updated 2 years ago.\n\n### About Repo:\nThis [repo](https:\/\/github.com\/first20hours\/google-10000-english) contains a list of the 10,000 most common English words with no swear in order of frequency, as determined by [n-gram](https:\/\/en.wikipedia.org\/wiki\/N-gram) [frequency analysis](https:\/\/en.wikipedia.org\/wiki\/Frequency_analysis) of the [Google's Trillion Word Corpus](https:\/\/books.google.com\/ngrams\/info).\n\n>This repo is derived from [Peter Norvig's](https:\/\/norvig.com\/ngrams\/) compilation of the [1\/3 million](https:\/\/norvig.com\/ngrams\/count_1w.txt) most frequent English words. I limited this file to the 10,000 most common words, then removed the appended frequency counts by running this sed command in my text editor:","b020e9dc":"[![Picture title](https:\/\/user-content.gitlab-static.net\/741cca3cdbb5c610fc543593bad50f052e0cef82\/68747470733a2f2f64616e69656c6d696573736c65722e636f6d2f696d616765732f7365636c697374732d6c6f6e672e706e67)](https:\/\/gitlab.com\/kalilinux\/packages\/seclists)","22b4b016":"### Applying the functions","3abfc9b3":"We have added all 9 features into our database and next, we are going to calculate password strength and validity.","8e5c2d3e":"## The Best Password Requirments\n- Password Length should be greater than 8\n- Password should not have pawned or publicly leaked passwords\n- Password should not have Google most common word\n- Password should not have a username\n- Password should not have repetitive character\n- Password should have at least one numerical\n- Password should have at least one uppercase letter\n- Password should have at least one lowercase letter\n- Password should have at least one of the special characters","55655561":"### Checking most common words","414ac403":"![image.png](attachment:01d7c896-aefc-4d72-9a43-0236eebfd6e8.png)","db5bab2d":"### This password was generated by Bitwarden's password generator.","b8848239":"![passwords](https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Fstatic.makeuseof.com%2Fwp-content%2Fuploads%2F2017%2F08%2Fsecure-password-managers-670x335.jpg&f=1&nofb=1)","cdbb4d79":"All usernames are unique so there is no need for a Top 10 usernames and we also have few repetitive passwords but they are not more than twice.","3bb6326d":"Both generated password has passed our test, which means password managers and password generation is very important if we want to keep our account safe. ","515f743e":"# Bad Pasword Function","84b1588a":"The Dataset contains the list of passwords and the fake user database both contain real passwords leaked from real websites. These passwords have not been filtered in any way and include words that are explicit, derogatory and offensive.\n\nDataset can be downloaded on [Kaggle](https:\/\/www.kaggle.com\/kingabzpro\/bad-password?select=users.csv).","2236ba4a":"# Bad Password Analysis","609cad7b":"# Introduction\nUnauthorized access is a potentially major problem for anyone who uses a computer or high-tech devices such as smartphones or tablets. The consequences for victims of these break-ins can include the loss of valuable data such as presentations, emails, and music. Victims may also have their bank account information, money, or even their identity stolen. Moreover, unauthorized users may use someone else's computer to break the law, which could put the victim in legal trouble. One of the most common ways that hackers break into computers is by guessing passwords. Simple and commonly used passwords enable intruders to easily gain access and control of a computing device. You can read more on password security at [securedatarecovery](https:\/\/www.securedatarecovery.com\/resources\/the-importance-of-strong-secure-passwords).\n","3e9d42aa":"### Password Strength Barplot","6da28737":"### Checking common passwords","ad92862d":"The bad password function will give you the output of whether your pass word is good or bad. It has very strict rules and when the password is bad, it prints out the reason, so that you can improve your passwords.","4e1478d1":"### Loading most common password database","80be8b32":"## Common passwords people use","e5271b5d":"## Todolist\n- [x] Downloading Dataset\n- [x] Data Exploration\n- [x] Data Visualization\n- [x] WordClouds\n- [x] Bad Password Analysis\n- [x] Additional Features\n- [x] Password Strength\n- [x] Bad Password Function\n- [x] Final thoughts","6bbcc864":"<a style='text-decoration:none;line-height:16px;display:flex;color:#5B5B62;padding:10px;justify-content:end;' href='https:\/\/deepnote.com?utm_source=created-in-deepnote-cell&projectId=c3057247-b8e1-4a58-a4df-d98198e095c9' target=\"_blank\">\n<img alt='Created in deepnote.com' style='display:inline;max-height:16px;margin:0px;margin-right:7.5px;' src='data:image\/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iODBweCIgaGVpZ2h0PSI4MHB4IiB2aWV3Qm94PSIwIDAgODAgODAiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8IS0tIEdlbmVyYXRvcjogU2tldGNoIDU0LjEgKDc2NDkwKSAtIGh0dHBzOi8vc2tldGNoYXBwLmNvbSAtLT4KICAgIDx0aXRsZT5Hcm91cCAzPC90aXRsZT4KICAgIDxkZXNjPkNyZWF0ZWQgd2l0aCBTa2V0Y2guPC9kZXNjPgogICAgPGcgaWQ9IkxhbmRpbmciIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIiBmaWxsPSJub25lIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPgogICAgICAgIDxnIGlkPSJBcnRib2FyZCIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTEyMzUuMDAwMDAwLCAtNzkuMDAwMDAwKSI+CiAgICAgICAgICAgIDxnIGlkPSJHcm91cC0zIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMjM1LjAwMDAwMCwgNzkuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICA8cG9seWdvbiBpZD0iUGF0aC0yMCIgZmlsbD0iIzAyNjVCNCIgcG9pbnRzPSIyLjM3NjIzNzYyIDgwIDM4LjA0NzY2NjcgODAgNTcuODIxNzgyMiA3My44MDU3NTkyIDU3LjgyMTc4MjIgMzIuNzU5MjczOSAzOS4xNDAyMjc4IDMxLjY4MzE2ODMiPjwvcG9seWdvbj4KICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0zNS4wMDc3MTgsODAgQzQyLjkwNjIwMDcsNzYuNDU0OTM1OCA0Ny41NjQ5MTY3LDcxLjU0MjI2NzEgNDguOTgzODY2LDY1LjI2MTk5MzkgQzUxLjExMjI4OTksNTUuODQxNTg0MiA0MS42NzcxNzk1LDQ5LjIxMjIyODQgMjUuNjIzOTg0Niw0OS4yMTIyMjg0IEMyNS40ODQ5Mjg5LDQ5LjEyNjg0NDggMjkuODI2MTI5Niw0My4yODM4MjQ4IDM4LjY0NzU4NjksMzEuNjgzMTY4MyBMNzIuODcxMjg3MSwzMi41NTQ0MjUgTDY1LjI4MDk3Myw2Ny42NzYzNDIxIEw1MS4xMTIyODk5LDc3LjM3NjE0NCBMMzUuMDA3NzE4LDgwIFoiIGlkPSJQYXRoLTIyIiBmaWxsPSIjMDAyODY4Ij48L3BhdGg+CiAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMCwzNy43MzA0NDA1IEwyNy4xMTQ1MzcsMC4yNTcxMTE0MzYgQzYyLjM3MTUxMjMsLTEuOTkwNzE3MDEgODAsMTAuNTAwMzkyNyA4MCwzNy43MzA0NDA1IEM4MCw2NC45NjA0ODgyIDY0Ljc3NjUwMzgsNzkuMDUwMzQxNCAzNC4zMjk1MTEzLDgwIEM0Ny4wNTUzNDg5LDc3LjU2NzA4MDggNTMuNDE4MjY3Nyw3MC4zMTM2MTAzIDUzLjQxODI2NzcsNTguMjM5NTg4NSBDNTMuNDE4MjY3Nyw0MC4xMjg1NTU3IDM2LjMwMzk1NDQsMzcuNzMwNDQwNSAyNS4yMjc0MTcsMzcuNzMwNDQwNSBDMTcuODQzMDU4NiwzNy43MzA0NDA1IDkuNDMzOTE5NjYsMzcuNzMwNDQwNSAwLDM3LjczMDQ0MDUgWiIgaWQ9IlBhdGgtMTkiIGZpbGw9IiMzNzkzRUYiPjwvcGF0aD4KICAgICAgICAgICAgPC9nPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+' > <\/img>\nCreated in <span style='font-weight:600;margin-left:4px;'>Deepnote<\/span><\/a>","a1385dab":"## Testing The Bad Password Function","2ede045b":"# Word Cloud","1e9e153a":"# Loading Required Libraries","021bb0d8":"### Loading Google's most used word dataset","dbc7f256":"In this word cloud, we can see most repetitive words used in usernames and passwords. ","24850cc5":"We started with a simple data frame with 2 columns, `user_name` and `password`. I have created the First name and last name using `user_name` and the rest of the columns using `password`. We have tested our paswoord on 9 levels and ahve created stregth featur to determin best password. \n\nIn the end, my suggestion to all users of the internet will be to use a password manager to generate and save your password. This will prevent hackers or any other individual from accessing your private data. \n\nI have tested my bad password function for the validity of passwords and only passwords generated using password manager pass our test. ","d709b570":"The number of bad passwords:445\/982 which is half of it but its most of password which passed the test are still weak passwords and to avoid this we should always use a password manager to generate the passwords.","b4e554ef":"I have checked the passwords on 9 rules provided by the security agency for bad passwords. You can find these rules in Introduction.","2e7e76dd":"## Data Visualization ","fe340ea2":"## Username & Password Dataset","b9ac4f32":"## 10 million common credentials\nThis will include a number of very popular lists in cooperation with their maintainers, including the RockYou lists maintained by Rob Bowes. More Can be found [here](https:\/\/gitlab.com\/kalilinux\/packages\/seclists\/-\/tree\/kali\/master\/Passwords\/Common-Credentials).\n\n### About SecLists\n\nSecLists is the security tester's companion. It's a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more. The goal is to enable a security tester to pull this repository onto a new testing box and have access to every type of list that may be needed.\n","d6bf3eef":"### Top 10 Passwords","1557fadf":"## Common words used on internet","f7e246bc":"## Checking username in your password.","b38b6c44":"## Project Description\nIn this project, I will be looking at a dataset with a username and password. I will be going deep on password protection and assigning which passwords meet the standards and which are bad passwords. This project contains data analysis, feature engineering, and eventually creating a function to analyze your password strength and validity.  \n![microsoft](https:\/\/cdn-cybersecurity.att.com\/images\/uploads\/apps\/apps-microsoft-logo.png)","b16dc86c":"![thankyou](http:\/\/gifimage.net\/wp-content\/uploads\/2017\/06\/thank-you-animated-gif-4.gif)","af6fd95d":"## Microsoft Password Requirements\nPassword must meet complexity requirements policy setting determines whether passwords must meet a series of strong password guidelines. When enabled, this setting requires passwords to meet the following requirements:\n\n1. **Passwords may not contain the user's samAccountName (Account Name) value or entire displayName (Full Name value). Both checks are not case-sensitive**.\n\n    The samAccountName is checked in its entirety only to determine whether it is part of the password. \n\n\n2. **The password contains characters from three of the following categories:**\n\n    - Uppercase letters of European languages (A through Z, with diacritic marks, Greek and Cyrillic characters)\n    - Lowercase letters of European languages (a through z, sharp-s, with diacritic marks, Greek and Cyrillic characters)\n    - Base 10 digits (0 through 9)\n    - Non-alphanumeric characters (special characters): (~!@#$%^&*_-+=`|\\(){}[]:;\"'<>,.?\/)  \n    - Currency symbols such as the Euro or British Pound aren't counted as special characters for this policy setting.\n    - Any Unicode character that's categorized as an alphabetic character but isn't uppercase or lowercase. This group includes Unicode characters from Asian languages. \n\nFor more information visit the [site](https:\/\/docs.microsoft.com\/en-us\/windows\/security\/threat-protection\/security-policy-settings\/password-must-meet-complexity-requirements)."}}