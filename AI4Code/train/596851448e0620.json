{"cell_type":{"691f681a":"code","2dc97aa3":"code","ea4cd684":"code","e942d62d":"code","3828e1f8":"code","ac3a315c":"code","6e1fcc19":"code","9425c1a9":"code","11694dfa":"code","91023093":"code","7ef4de1d":"code","4bfc5ff4":"code","5df6c6f4":"code","718176e2":"code","557e9035":"code","bc33836a":"code","f00fa429":"code","ad2ff0c0":"code","464b8781":"markdown","55fc9faf":"markdown","b5718811":"markdown","3f484bea":"markdown","8d384636":"markdown","220215aa":"markdown","1fdfb840":"markdown","45323c76":"markdown","0f2d7add":"markdown","c8a89195":"markdown","c4dd08d9":"markdown","09ef6c3c":"markdown","bb55c5ed":"markdown","d105ac7b":"markdown","a90d7a9b":"markdown","9af4962f":"markdown","dc992170":"markdown","1e0e0fe7":"markdown","585d0352":"markdown"},"source":{"691f681a":"import matplotlib.pyplot as plt\n\n# This is used for styling plot \n# print(plt.style.available)\nplt.style.use(\"fivethirtyeight\")\nplt.subplots(figsize =(12, 8))\n\n# Median Developer Salaries by Age 18-35\nages_x =  [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\n\ndev_y = [38496, 42000, 46752, 49320, 53200,\n         56000, 62316, 64928, 67317, 68748, 73752]\nplt.plot(ages_x,dev_y,color='k',linestyle = '--',marker = \"o\",label=\"ALL DEV\")\n\n\n# Median Python Developer Salaries by Age 18-35\npy_dev_y = [45372, 48876, 53850, 57287, 63016,\n            65998, 70003, 70000, 71496, 75370, 83640]\nplt.plot(ages_x,py_dev_y,marker = \".\",color=\"#008fd5\",label=\"PYTHON\")\n\n\n# Median JavaScript Developer Salaries by Age 18-55\njs_dev_y = [37810, 43515, 46823, 49293, 53437,\n            56373, 62375, 66674, 68745, 68746, 74583]\n\nplt.plot(ages_x,js_dev_y,marker = \".\",color=\"#e5ae38\",label=\"JS\")\n\n# defining x-axis,y-axis and itle of plot\nplt.xlabel(\"Ages:\")\nplt.ylabel(\"Median Salary:\")\nplt.title(\"Median salary by age:\")\n\n\n\n# To specify which line represent \nplt.legend()\n\n# It is used to show grid on plot\n# plt.grid(True)\n# --------------------------------------------\n\n# if you want to use xkcd style commic\n#plt.xkcd()\n# To see figure you need to type in \nplt.show()","2dc97aa3":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# data related to median salary of developer compared with all developer.python developer,js developer\ndata = pd.read_csv('..\/input\/average-salary-dev\/salary.csv')\nages = data['Age']\ndev_salaries = data['All_Devs']\npy_salaries = data['Python']\njs_salaries = data['JavaScript']\n\nplt.plot(ages, dev_salaries, color='#444444',\n         linestyle='--', label='All Devs')\n\nplt.plot(ages, py_salaries,color=\"#008fd5\", label='Python')\nplt.plot(ages, js_salaries,color=\"#e5ae38\", label='Javascript')\n\n# this is median salary\noverall_median = 57287\n\n# if we compare python salaries with median salary red part is under median salary while blue part is above median salary\nplt.fill_between(ages, py_salaries,overall_median,\n                where=(py_salaries > overall_median),\n                interpolate=True,alpha=0.25)\nplt.fill_between(ages, py_salaries,overall_median,\n                where=(py_salaries < overall_median),\n                interpolate=True,color = 'red',alpha=0.20)\n\nplt.legend()\n\nplt.xlabel(\"Ages:\")\nplt.ylabel(\"Median Salary:\")\nplt.title(\"Median salary by age:\")\n\nplt.tight_layout()\n\nplt.show()","ea4cd684":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# data related to median salary of developer compared with all developer.python developer,js developer\ndata = pd.read_csv('..\/input\/average-salary-dev\/salary.csv')\nages = data['Age']\ndev_salaries = data['All_Devs']\npy_salaries = data['Python']\njs_salaries = data['JavaScript']\n\nplt.plot(ages, dev_salaries, color='#444444',\n         linestyle='--', label='All Devs')\n\nplt.plot(ages, py_salaries,color=\"#008fd5\", label='Python')\nplt.plot(ages, js_salaries,color=\"#e5ae38\", label='Javascript')\n\n# this is median salary\noverall_median = 57287\n\n# if we compare python salaries with js_salary red part is under median salary while blue part is above median salary\nplt.fill_between(ages, py_salaries,js_salaries,\n                where=(py_salaries > js_salaries),\n                interpolate=True,alpha=0.25)\nplt.fill_between(ages, py_salaries,js_salaries,\n                where=(py_salaries < js_salaries),\n                interpolate=True,color = 'red',alpha=0.20)\n\nplt.legend()\n\nplt.xlabel(\"Ages:\")\nplt.ylabel(\"Median Salary:\")\nplt.title(\"Median salary by age:\")\n\nplt.tight_layout()\n\nplt.show()","e942d62d":"import matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# Median Developer Salaries by Age\nages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\n\ndev_y = [38496, 42000, 46752, 49320, 53200,\n         56000, 62316, 64928, 67317, 68748, 73752]\nplt.bar(ages_x,dev_y,color='k',label=\"ALL DEV\")\n\n\n# Median Python Developer Salaries by Age\npy_dev_y = [45372, 48876, 53850, 57287, 63016,\n            65998, 70003, 70000, 71496, 75370, 83640]\nplt.bar(ages_x,py_dev_y,color=\"#008fd5\",label=\"PYTHON\")\n\n\n# Median JavaScript Developer Salaries by Age\njs_dev_y = [37810, 43515, 46823, 49293, 53437,\n            56373, 62375, 66674, 68745, 68746, 74583]\nplt.bar(ages_x,js_dev_y,color=\"#e5ae38\",label=\"JS\")\n\nplt.xlabel(\"Ages:\")\nplt.ylabel(\"Median Salary:\")\nplt.title(\"Median salary by age:\")\n\n\n# to see figure you need to type in \nplt.legend()\nplt.show()","3828e1f8":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# Median Developer Salaries by Age\nages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\n# using numpy and width of the bar\nx_index = np.arange(len(ages_x))\nwidth = 0.25\n\ndev_y = [38496, 42000, 46752, 49320, 53200,\n         56000, 62316, 64928, 67317, 68748, 73752]\nplt.bar(x_index-width,dev_y,color='k',width=width,label=\"ALL DEV\")\n\n\n# Median Python Developer Salaries by Age\npy_dev_y = [45372, 48876, 53850, 57287, 63016,\n            65998, 70003, 70000, 71496, 75370, 83640]\nplt.bar(x_index,py_dev_y,width=width,color=\"#008fd5\",label=\"PYTHON\")\n\n\n# Median JavaScript Developer Salaries by Age\njs_dev_y = [37810, 43515, 46823, 49293, 53437,\n            56373, 62375, 66674, 68745, 68746, 74583]\nplt.bar(x_index+width,js_dev_y,width=width,color=\"#e5ae38\",label=\"JS\")\n\n# this line is used to correct to x-axis label after getting values from numpy\nplt.xticks(ticks=x_index,labels=ages_x)\n\n\nplt.xlabel(\"Ages:\")\nplt.ylabel(\"Median Salary:\")\nplt.title(\"Median salary by age:\")\n\n\n# to see figure you need to type in \nplt.legend()\nplt.show()","ac3a315c":"# importing all the necessary library\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# reading csv file and storing in data variable\ndata = pd.read_csv('..\/input\/popular-language-2019\/data.csv')\n# there are two columns in data set 1.id and 2.Languages both are stored in variable ids and lang_responses \nids = data['Responder_id']\nlang_responses = data['LanguagesWorkedWith']\n\n# using lang_counter to count number of language occured \nlanguage_counter = Counter()\n\nfor response in lang_responses:\n    language_counter.update(response.split(';'))\n\nlanguages = []\npopularity = []\n\n# after updating language counter based on languages store the value of languages in popularity\nfor item in language_counter.most_common(15):\n    languages.append(item[0])\n    popularity.append(item[1])\n\n# to print in descending order    \nlanguages.reverse()\npopularity.reverse()\n\n# barh-horizontal\nplt.barh(languages, popularity)\n\nplt.title(\"Most Popular Languages\")\n# plt.ylabel(\"Programming Languages\")\nplt.xlabel(\"Number of People Who Use\")\n\nplt.tight_layout()\nplt.show()","6e1fcc19":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# this dataset consist of responder_id and age\ndata = pd.read_csv('..\/input\/age-respondent-2019\/age.csv')\nids = data['Responder_id']\nages = data['Age']\n\n# bins to locate\/categories data \nbins = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nplt.hist(ages, bins=bins, edgecolor='black')\n\n# median age of all reponsdent who had answer\nmedian_age = 29\ncolor = '#fc4f30'\n\n# this is median age line represented as axis-vetical-line\nplt.axvline(median_age, color=color, label='Age Median', linewidth=2)\n\nplt.legend()\nplt.title('Ages of Respondents')\nplt.xlabel('Ages')\nplt.ylabel('Total Respondents')\n\nplt.tight_layout()\n\nplt.show()","9425c1a9":"import matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# DATA\nslices = [59219, 55466, 47544, 36443, 35917, 31991, 27097, 23030]\nlabels = ['JavaScript', 'HTML\/CSS', 'SQL', 'Python', 'Java', 'Bash\/Shell\/PowerShell', 'C#', 'PHP']\n# TO STANDOUT SPECIFIC PIE\nexplode = [0.1,0,0,0,0,0,0,0]\n\n# PIE-PIECHART\nplt.pie(slices,labels = labels, explode=explode,shadow=True,autopct=\"%1.1f%%\")\n\nplt.title(\"My Awesome Pie Chart\")\nplt.tight_layout()\nplt.show()\n","11694dfa":"# importing all the necessary library\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# reading csv file and storing in data variable\ndata = pd.read_csv('..\/input\/popular-language-2019\/data.csv')\n# there are two columns in data set 1.id and 2.Languages both are stored in variable ids and lang_responses \nids = data['Responder_id']\nlang_responses = data['LanguagesWorkedWith']\n\n# using lang_counter to count number of language occured \nlanguage_counter = Counter()\n\nfor response in lang_responses:\n    language_counter.update(response.split(';'))\n\nlanguages = []\npopularity = []\n\n# after updating language counter based on languages store the value of languages in popularity\nfor item in language_counter.most_common(15):\n    languages.append(item[0])\n    popularity.append(item[1])\n\n# to print in descending order    \n# languages.reverse()\n# popularity.reverse()\n\n# pie chart\nplt.pie(popularity, labels = languages,shadow=True,autopct=\"%1.1f%%\")\n\nplt.title(\"Most Popular Languages\")\n# plt.ylabel(\"Programming Languages\")\nplt.xlabel(\"Number of People Who Use\")\n\nplt.tight_layout()\nplt.show()","91023093":"import matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n\nminutes = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nplayer1 = [1, 2, 3, 3, 4, 4, 4, 4, 5]\nplayer2 = [1, 1, 1, 1, 2, 2, 2, 3, 4]\nplayer3 = [1, 1, 1, 2, 2, 2, 3, 3, 3]\n\nlabels = ['player1', 'player2', 'player3']\n\n# stackplot\nplt.stackplot(minutes,player1, player2, player3,labels=labels)\n\nplt.title(\"Stack Plot\")\nplt.tight_layout()\nplt.legend(loc = \"upper left\")\nplt.show()","7ef4de1d":"import matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n\nminutes = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nplayer1 = [8, 6, 5, 5, 4, 2, 1, 1, 0]\nplayer2 = [0, 1, 2, 2, 2, 4, 4, 4, 4]\nplayer3 = [0, 1, 1, 1, 2, 2, 3, 3, 4]\n\nlabels = ['player1', 'player2', 'player3']\ncolors = ['#6d904f', '#fc4f30', '#008fd5']\n\nplt.stackplot(minutes, player1, player2, player3, labels=labels, colors=colors)\n\nplt.title(\"Stack Plot\")\nplt.tight_layout()\n# different ways of arranging legends\nplt.legend(loc=(0.07, 0.05))\nplt.show()","4bfc5ff4":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\nx = [5, 7, 8, 5, 6, 7, 9, 2, 3, 4, 4, 4, 2, 6, 3, 6, 8, 6, 4, 1]\ny = [7, 4, 3, 9, 1, 3, 2, 5, 2, 4, 8, 7, 1, 6, 4, 9, 7, 7, 5, 1]\n\n# setting up random color value to use cmap\ncolors = [7, 5, 9, 7, 5, 7, 2, 5, 3, 7, 1, 2, 8, 1, 9, 2, 5, 6, 7, 5]\n\nplt.scatter(x, y, s = 100, c=colors,cmap = \"magma\",edgecolors='black',alpha=0.75,linewidths=1)\n\n# this help to represent color bar   \ncbar = plt.colorbar()\ncbar.set_label(\"Likes Level\")  \n\nplt.tight_layout()\nplt.show()","5df6c6f4":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# here we are going to use youtbe data based on top 200 trending videos 2019 videos based on view, likes and ratio of it\ndata = pd.read_csv('..\/input\/youtube-like-ratio\/youtube.csv')\nview_count = data['view_count']\nlikes = data['likes']\nratio = data['ratio']\n\n# cmap is color mapping based on magma style\nplt.scatter(view_count,likes, c=ratio,cmap = \"magma\",edgecolors='black',alpha=0.75,linewidths=1)\n\ncbar = plt.colorbar()\ncbar.set_label(\"Likes\/Dislike Levels\")  \n\nplt.title('Trending YouTube Videos')\nplt.xlabel('View Count')\nplt.ylabel('Total Likes')\n\nplt.tight_layout()\n\nplt.show()","718176e2":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# here we are going to use youtbe data based on top 200 trending videos 2019 videos based on view, likes and ratio of it\ndata = pd.read_csv('..\/input\/youtube-like-ratio\/youtube.csv')\nview_count = data['view_count']\nlikes = data['likes']\nratio = data['ratio']\n\n# cmap is color mapping based on magma style\nplt.scatter(view_count,likes, c=ratio,cmap = \"magma\",edgecolors='black',alpha=0.75,linewidths=1)\n\ncbar = plt.colorbar()\ncbar.set_label(\"Likes\/Dislike Levels\")  \n\n# TO OVERCOME OUTLIER PERFORM THIS\nplt.xscale(\"log\")\nplt.yscale(\"log\")\n\nplt.title('Trending YouTube Videos')\nplt.xlabel('View Count')\nplt.ylabel('Total Likes')\n\nplt.tight_layout()\n\nplt.show()","557e9035":"import pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mpl_dates\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\ndates = [\n    datetime(2019, 5, 24),\n    datetime(2019, 5, 25),\n    datetime(2019, 5, 26),\n    datetime(2019, 5, 27),\n    datetime(2019, 5, 28),\n    datetime(2019, 5, 29),\n    datetime(2019, 5, 30)\n]\n\ny = [0, 1, 3, 4, 6, 5, 7]\n\nplt.plot_date(dates, y, linestyle = 'solid')\n\n# to change date into horizontal we gcf-get current figure and auto format xdate\nplt.gcf().autofmt_xdate()\n\n# what if we want to convert it into month,date,year\ndate_format = mpl_dates.DateFormatter('%b, %d %Y')\nplt.gca().xaxis.set_major_formatter(date_format)\n\n\nplt.tight_layout()\n\nplt.show()","bc33836a":"import pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mpl_dates\n\n# figure size and style\nplt.subplots(figsize =(12, 8))\nplt.style.use(\"fivethirtyeight\")\n\n# reading csv file \ndata = pd.read_csv('..\/input\/bitcoin-time-series\/time_series.csv')\n\n# we are converting and sorting the date because it is considered as string but not as date \ndata['Date'] = pd.to_datetime(data['Date'])\ndata.sort_values('Date',inplace = True)\n\nprice_date = data['Date']\nprice_open = data['Open']\nprice_close = data['Close']\n\n# time series \nplt.plot_date(price_date, price_close, linestyle = 'solid')\n\n# to change date into horizontal we gcf-get current figure and auto format xdate\nplt.gcf().autofmt_xdate()\n\n\nplt.title('Bitcoin Prices')\nplt.xlabel('Date')\nplt.ylabel('Closing Price')\n\nplt.tight_layout()\n\nplt.show()","f00fa429":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nplt.style.use(\"fivethirtyeight\")\n\n# data related to median salary of developer compared with all developer.python developer,js developer\ndata = pd.read_csv('..\/input\/average-salary-dev\/salary.csv')\nages = data['Age']\ndev_salaries = data['All_Devs']\npy_salaries = data['Python']\njs_salaries = data['JavaScript']\n\n# here in one figure we can create two axis\n# to remove x-ticks we can sharex\nfig,(ax,ax2) = plt.subplots(nrows=2,ncols=1,figsize =(12, 8),sharex=True)\n\nax.plot(ages, dev_salaries, color='#444444',\n         linestyle='--', label='All Devs')\n\nax2.plot(ages, py_salaries,color=\"#008fd5\", label='Python')\nax2.plot(ages, js_salaries,color=\"#e5ae38\", label='Javascript')\n\nax.legend()\nax.set_title('Median Salary by Age')\nax.set_ylabel('Median Salary')\n\nax2.legend()\nax2.set_xlabel('Ages')\nax2.set_ylabel('Median Salary')\n\n\n\nplt.tight_layout()\n\nplt.show()","ad2ff0c0":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nplt.style.use(\"fivethirtyeight\")\n\n# data related to median salary of developer compared with all developer.python developer,js developer\ndata = pd.read_csv('..\/input\/average-salary-dev\/salary.csv')\nages = data['Age']\ndev_salaries = data['All_Devs']\npy_salaries = data['Python']\njs_salaries = data['JavaScript']\n\n# here in one figure we can create two axis\n# to remove x-ticks we can sharex\nfig,ax = plt.subplots(figsize =(12, 8))\nfig1,ax2 = plt.subplots(figsize =(12, 8))\nax.plot(ages, dev_salaries, color='#444444',\n         linestyle='--', label='All Devs')\n\nax2.plot(ages, py_salaries,color=\"#008fd5\", label='Python')\nax2.plot(ages, js_salaries,color=\"#e5ae38\", label='Javascript')\n\nax.legend()\nax.set_title('Median Salary by Age')\nax.set_xlabel('Ages')\nax.set_ylabel('Median Salary')\n\nax2.legend()\nax2.set_title('Median Salary by Age')\nax2.set_xlabel('Ages')\nax2.set_ylabel('Median Salary')\n\n\n\nplt.tight_layout()\n\nplt.show()","464b8781":"# **STACK PLOT**\n****\n**Stackplot is used to draw a stacked area plot. It displays the complete data for visualization. It shows each part stacked onto one another and how each part makes the complete figure. It displays various constituents of data and it behaves like a pie chart. It has x-label, y-label and title in which various parts can be represented by different colors.**\n\n**The idea of stack plots is to show \u201cparts to the whole\u201d over time. It is used to represent various datasets without overlapping over each other.**","55fc9faf":"**MOVING ON TO SOME REAL WORLD EXAMPLE WE ARE GOING TO USE POPULAR LANGUAGES IN 2019 RESEARCHED BY STACKOVERFLOW**","b5718811":"**Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.**\n**Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack\nOne of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc**","3f484bea":"![image.png](attachment:378b5cc3-1a3d-45ef-bab4-d13b835c9775.png)","8d384636":"# **SCATTER PLOT**\n****\n\n**A scatter plot (aka scatter chart, scatter graph) uses dots to represent values for two different numeric variables. The position of each dot on the horizontal and vertical axis indicates values for an individual data point. Scatter plots are used to observe relationships between variables.**\n\n**Scatter plots' primary uses are to observe and show relationships between two numeric variables. The dots in a scatter plot not only report the values of individual data points, but also patterns when the data are taken as a whole. Identification of correlational relationships are common with scatter plots.**","220215aa":"**THE PROBLEM HERE IS BARS ARE OVERLYING EACH OTHER SO IT CANNOT GIVE PROPER INFO ABOUT DATA**\n----\n***SO TO OVERCOME THIS PROBLEM WE HAVE TO USE NUMPY AND WIDTH OF BARS***","1fdfb840":"# **SUBPLOTS**","45323c76":"# **BAR CHART**\n****\n**A bar chart or bar graph is a chart or graph that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally. A vertical bar chart is sometimes called a column chart.**\n\n**A bar chart is used when you want to show a distribution of data points or perform a comparison of metric values across different subgroups of your data. From a bar chart, we can see which groups are highest or most common, and how other groups compare against the others.**","0f2d7add":"****MOVING ON TO SOME REAL WORLD EXAMPLE WE ARE GOING TO USE AVERAGE SALARY OF DEVELOPER DATA****","c8a89195":"# **HISTOGRAM**\n****\n**A histogram is a graphical representation that organizes a group of data points into user-specified ranges. Similar in appearance to a bar graph, the histogram condenses a data series into an easily interpreted visual by taking many data points and grouping them into logical ranges or bins**\n\n**The histogram is used for variables whose values are numerical and measured on an interval scale. It is generally used when dealing with large data sets (greater than 100 observations). A histogram can also help detect any unusual observations (outliers) or any gaps in the data**\n","c4dd08d9":"# **LINE CHARTS**\n****\n**A line chart or line plot or line graph or curve chart is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments. It is a basic type of chart common in many fields.**\n\n**A line chart is a type of chart used to show information that changes over time. Line charts are created by plotting a series of several points and connecting them with a straight line. Line charts are used to track changes over short and long periods of time**","09ef6c3c":"**BASED ON THE ABOVE SURVEY WE TOOK AGE OF EACH RESPONDENT**","bb55c5ed":"**MOVING ON TO SOME REAL WORLD EXAMPLE WE ARE GOING TO USE POPULAR LANGUAGES IN 2019 RESEARCHED BY STACKOVERFLOW**","d105ac7b":"# **TIME SERIES**\n****\n\n**time series is a series of data points indexed in time order. Most commonly, a time series is a sequence taken at successive equally spaced points in time. Thus it is a sequence of discrete-time data.**\n\n**A time series is a data set that tracks a sample over time. In particular, a time series allows one to see what factors influence certain variables from period to period. Time series analysis can be useful to see how a given asset, security, or economic variable changes over time.**","a90d7a9b":"**Special thanks to:Corey Schafer**","9af4962f":"**HERE WE WILL USE BITCOIN DATA RELATED TO TIME SERIES**","dc992170":"**THERE IS AN OUTLIER A MUSIC VIDEO WHICH STOODOUT FROM ALL OTHER VIDEOS BUT ALSO DISTURB OUR SCATTER PLOT**\n---\n***PERFORM SCATTER PLOT IN LOG***","1e0e0fe7":"# **PIE CHART**\n****\n**A pie chart is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice, is proportional to the quantity it represents**\n\n**A pie chart is best used when trying to work out the composition of something. If you have categorical data then using a pie chart would work really well as each slice can represent a different category**","585d0352":"**WAHT IF WE WANT TWO DIFERENT FIGURES ON DIFFERENT AXIS**"}}