{"cell_type":{"9a67c434":"code","4e84f52a":"code","a7a17a75":"code","6574ce5c":"code","6f9e78dd":"code","d4df7ed2":"code","b04a21a9":"code","9b8b7949":"code","132c22f8":"code","cb11aef2":"code","b109f0ee":"code","6e4b96e2":"code","13a6b879":"code","1fcb4361":"code","184c09a3":"code","77281476":"code","a69c48e8":"code","4bddb94b":"markdown","eaab45aa":"markdown","960bd370":"markdown","cf2a1082":"markdown","92fe6fe8":"markdown","a15dd4de":"markdown","c70d1477":"markdown","2dda9fc5":"markdown","69338eb6":"markdown","6d70f988":"markdown","e38dbacc":"markdown","8eee2ffa":"markdown"},"source":{"9a67c434":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e84f52a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport gc\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom statistics import mean\n\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier","a7a17a75":"# credits -- https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file)\n    df = reduce_mem_usage(df)\n    return df","6574ce5c":"train = import_data('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = import_data('..\/input\/tabular-playground-series-oct-2021\/test.csv')\nsample_submission = import_data('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')","6f9e78dd":"print(\"Null values in train data\", train.isnull().sum().sum())\nprint(\"Null values in test data\", test.isnull().sum().sum())","d4df7ed2":"continous_cols= ['f'+str(i) for i in range(242)]\ncontinous_cols.remove('f22')\ncontinous_cols.remove('f43')\n\ncategorical_cols = ['f'+str(i) for i in range(242,285)]+['f22','f43']\n\ncols = continous_cols + categorical_cols","b04a21a9":"# # Normalizing the features\n# scaler = MinMaxScaler()\n\n# train[continous_cols] = scaler.fit_transform(train[continous_cols])\n# test[continous_cols] = scaler.transform(test[continous_cols])","9b8b7949":"def Stacker(model, model_name, train_data, test_data, fold):\n    test_preds = np.zeros(test_data.shape[0])\n    train_preds = np.zeros(train_data.shape[0])\n    \n    kf = StratifiedKFold(n_splits=fold,random_state=48,shuffle=True)\n    auc=[]\n    n=0\n    \n    for train_index, test_index in kf.split(train[cols],train['target']):\n        \n        X_train, X_valid = train[cols].iloc[train_index], train[cols].iloc[test_index]\n        y_train, y_valid = train['target'].iloc[train_index], train['target'].iloc[test_index]\n        \n        if model_name == 'catb':\n            model.fit(X_train, y_train, eval_set=[(X_valid, y_valid)], silent=True)\n        else:\n            model.fit(X_train, y_train, eval_set=[(X_valid,y_valid)], early_stopping_rounds=100, eval_metric=\"auc\", verbose=False)\n        \n        test_preds += model.predict_proba(test_data[cols])[:,1]\/kf.n_splits\n        train_preds += model.predict_proba(train_data[cols])[:,1]\/kf.n_splits\n        \n        auc.append(roc_auc_score(y_valid, model.predict_proba(X_valid)[:, 1]))\n        gc.collect()\n        \n        print(f\"fold: {n+1}, auc: {auc[n]}\")\n        n+=1\n    print(\"Average =\", mean(auc))\n    return train_preds, test_preds","132c22f8":"lgbm = LGBMClassifier(device='gpu')\nxgb = XGBClassifier(tree_method='gpu_hist', gpu_id=0, predictor = 'gpu_predictor')\ncatb = CatBoostClassifier()","cb11aef2":"lgbm_train, lgbm_test = Stacker(lgbm, 'lgbm', train, test, 5)\ndel lgbm\ngc.collect()\n\nsample_submission['target'] = lgbm_test\nsample_submission.to_csv('lgbm_test.csv', index=False)","b109f0ee":"catb_train, catb_test = Stacker(catb, 'catb', train, test, 5)\ndel catb\ngc.collect()\n\nsample_submission['target'] = catb_test\nsample_submission.to_csv('catb_test.csv', index=False)","6e4b96e2":"xgb_train, xgb_test = Stacker(xgb, 'xgb', train, test, 5)\ndel xgb\ngc.collect()\n\nsample_submission['target'] = xgb_test\nsample_submission.to_csv('xgb_test.csv', index=False)","13a6b879":"stack_train = np.concatenate((catb_train.reshape(-1,1), lgbm_train.reshape(-1,1), xgb_train.reshape(-1,1)), axis = 1)\nstack_test = np.concatenate((catb_test.reshape(-1,1), lgbm_test.reshape(-1,1), xgb_test.reshape(-1,1)), axis = 1)\n\ndel catb_train, lgbm_train, xgb_train, catb_test, lgbm_test, xgb_test\ngc.collect()\n\nstack_train = pd.DataFrame(stack_train, columns = ['catb', 'lgbm', 'xgb'])\nstack_test = pd.DataFrame(stack_test, columns = ['catb', 'lgbm', 'xgb'])","1fcb4361":"stack_train.to_csv('stack_train.csv', index=True)\nstack_test.to_csv('stack_test.csv', index=True)","184c09a3":"y = train['target'].copy()\n\nfrom sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\n\ntrain_preds = np.zeros(stack_train.shape[0])\ntest_preds = np.zeros(stack_test.shape[0])\n\nkf = StratifiedKFold(n_splits=5, random_state=2021, shuffle=True)\nauc=[]\n\nn=0\nfor train_index, test_index in kf.split(stack_train, y):\n    \n    X_train, X_valid = stack_train.iloc[train_index], stack_train.iloc[test_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\n    \n    lr = LogisticRegression(random_state = 42)\n    lr.fit(X_train, y_train)\n    \n    train_preds += lr.predict_proba(stack_train)[:,1]\/kf.n_splits\n    test_preds += lr.predict_proba(stack_test)[:,1]\/kf.n_splits\n    \n    auc.append(roc_auc_score(y_valid, lr.predict_proba(X_valid)[:, 1]))\n    gc.collect()\n        \n    print(f\"fold: {n+1}, auc: {auc[n]}\")\n    n+=1","77281476":"sample_submission['target'] = test_preds\nsample_submission.to_csv('submission.csv', index=False)","a69c48e8":"sample_submission['target'] = (stack_test['lgbm']*1 + stack_test['xgb']*2 + stack_test['catb']*3)\/6\nsample_submission.to_csv('average.csv', index=False)","4bddb94b":"# Preprocessing","eaab45aa":"# Weighted average","960bd370":"# Importing libraries","cf2a1082":"### If you like my notebook please upvote it and share it. If you see any mistakes, you are always welcome to comment section.\n### Even I am a begginer with a curiosity of learning new ideas, We will learn together.\n\n# Thank you!","92fe6fe8":"# Train base model\n#### Good Blog for understanding ROC curve \n#### https:\/\/towardsdatascience.com\/understanding-auc-roc-curve-68b2303cc9c5","a15dd4de":"#### Creating another dataframe with input columns as the out put of the above three classifiers and same output as y. This interesting idea is stacking. You can see the increase in the ROC score.","c70d1477":"# Checking for null values","2dda9fc5":"#### This is simple one stacked ensemble solution based on XGB, LGBM and CATB\n#### Thank you for checking out my notebook and if you like it or even copy some code, please leave an upvote.","69338eb6":"# Reading data","6d70f988":"# Introduction","e38dbacc":"# Reducing memory usage","8eee2ffa":"#### No null values in the dataset. We are lucky :-)"}}