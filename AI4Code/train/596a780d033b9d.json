{"cell_type":{"64f69c7e":"code","ce75351b":"code","6398d9de":"code","779297d7":"code","bf3fb9c3":"code","09ce2fa7":"code","86bcf804":"code","26e8ec59":"code","c04fe261":"code","9f77208c":"code","0f227023":"code","aabc6a04":"code","c44f81ce":"code","4ffe73d2":"code","16ae517d":"markdown","15b9ae17":"markdown","9dd10dbc":"markdown","8021ff9d":"markdown","56e1e246":"markdown","7735e640":"markdown","9400d319":"markdown","85f866ed":"markdown","cf3bc860":"markdown","3cf5cc98":"markdown"},"source":{"64f69c7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Any results you write to the current directory are saved as output.","ce75351b":"dprovince=pd.read_csv(\"\/kaggle\/input\/italy-covid19\/covid19-ita-province.csv\")\ndnational=pd.read_csv(\"\/kaggle\/input\/italy-covid19\/covid-nationality.csv\")\ndregions=pd.read_csv(\"\/kaggle\/input\/italy-covid19\/covid19-ita-regions.csv\")","6398d9de":"d2=dnational.drop([\"Unnamed: 0\",\"state\"],axis=1)\n","779297d7":"import plotly.graph_objects as go\nab=d2.tail(1).values.T\nfig = go.Figure(data=[go.Table(\n    header=dict(values=d2.tail(1).columns,\n                line_color='darkslategray',\n                fill_color='lightskyblue',\n                align='left',font_size=10),\n    cells=dict(values=list(ab), # 2nd column\n               line_color='darkslategray',\n               fill_color='lightcyan',\n               align='left',font_size=12,height=40))\n])\n\nfig.update_layout(width=1600, height=250,title=\"Last Status in Italy\")\nfig.show()\n","bf3fb9c3":"d3=d2.drop([\"date\",\"new_confirmed_cases\",\"note_it\",\"note_en\"],axis=1)\nc=[]\nfor i in range(38):\n    x=d3.iloc[i+1]-d3.iloc[i]\n    c.append(x)","09ce2fa7":"ax=pd.DataFrame(c)\nax.home_quarantine=d3.home_quarantine\nda=pd.DataFrame(d3.loc[0])\ndx=da.T \nax1= dx.append(ax, ignore_index=True)\nax1[\"percent_test_confirmed\"]=(ax1.total_confirmed_cases\/ax1.swabs_made)*100\nax1[\"date\"]=d2.date\nax1.set_index(\"date\",inplace=True)\n               ","86bcf804":"ax1.info()","26e8ec59":"def highlight_max(s):    \n    is_max = s == s.max()\n    return ['background-color: salmon' if v else \"background-color: mistyrose\" for v in is_max]\nax1.style.apply(highlight_max)","c04fe261":"import plotly.graph_objects as go\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n                x=dnational.date,\n                y=dnational['hospitalized_with_symptoms'],\n                name=\"Hospitalized with Symptoms\",\n                mode=\"markers\",marker=dict(size=12,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                \n                opacity=0.8))\n\nfig.add_trace(go.Scatter(\n                x=dnational.date,\n                y=dnational['home_quarantine'],\n                name=\"Home Quarantine\",\n                mode=\"markers\",marker=dict(size=12,symbol=22,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                opacity=0.8))\n\nfig.add_trace(go.Scatter(\n                x=dnational.date,\n                y=dnational[\"intensive_care\"],\n                name=\"Intensive Care\",\n                mode=\"markers\",marker=dict(size=12,symbol=20, line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                opacity=0.8))\n\n# Use date string to set xaxis range\nfig.update_layout(title_text=\"Hospitalized with Symptoms,Home Quarantine and Intensive Care Cases\",plot_bgcolor='azure',width=1000)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='dimgray', mirror=True,gridcolor='silver',title=\"Date\")\nfig.update_yaxes(showline=True, linewidth=2, linecolor='dimgray', mirror=True,gridcolor='silver',title=\"Number\")\n\nfig.show()","9f77208c":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.append_trace(go.Bar(\n    x=dnational.date,\n    y=dnational.total_confirmed_cases,\n    name=\"Total Confirmed Cases\",\n    text=dnational.total_confirmed_cases,\n    textposition=\"outside\",\n), row=1, col=1)\n\nfig.append_trace(go.Bar(\n    x=dnational.date,\n    y=dnational.recovered,\n    name=\"Recovered Cases\",\n    text=dnational.recovered,\n    textposition=\"outside\",\n), row=2, col=1)\n\nfig.append_trace(go.Bar(\n    x=dnational.date,\n    y=dnational.deaths,\n    name=\"Deaths\",\n    text=dnational.deaths,\n    textposition=\"outside\",\n), row=3, col=1)\n\n\nfig.update_layout(height=1000, width=1000, title_text=\"Total Confirmed , Recovered and Death Cases \")\nfig.update_xaxes(showline=True, linewidth=2, linecolor='dimgray', mirror=True,gridcolor='silver',title=\"Date\")\nfig.update_yaxes(showline=True, linewidth=2, linecolor='dimgray', mirror=True,gridcolor='silver',title=\"Number\")\nfig.show()","0f227023":"laststatus=dregions[dregions.date==\"2020-03-26T17:00:00\"]\nimport plotly.express as px\n\nfig = px.scatter_mapbox(laststatus, lat=\"lat\", lon=\"long\", hover_name=\"region\", hover_data=[\"total_confirmed_cases\", \"deaths\",\"recovered\",\"swabs_made\"],size=\"total_cases\",\n                        color_discrete_sequence=[\"black\"], zoom=4, height=400)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","aabc6a04":"import plotly.express as px\n\nfig = px.treemap(dregions, path=[ 'region','date'],\n                  color='total_confirmed_cases', \n                 hover_data=[\"region\",'date',\"hospitalized_with_symptoms\",\"intensive_care\",\"total_hospitalized\",\n                                                            \"home_quarantine\",\"recovered\",\"deaths\",\"swabs_made\"],\n                  color_continuous_scale=\"magma\"\n                  )\nfig.update_layout(uniformtext=dict(minsize=20),height=1000,width=1000,title=\"Daily Cases According to Regions\")\n\nfig.show()","c44f81ce":"lombardia=dprovince[dprovince.region==\"Lombardia\"]\nvalue={\"2020-02-24T18:00:00\":\"24-02\",\"2020-02-25T18:00:00\":\"25-02\",\"2020-02-26T18:00:00\":\"26-02\",\"2020-02-27T18:00:00\":\"27-02\",\"2020-02-28T18:00:00\":\"28-02\",\n       \"2020-02-29T17:00:00\":\"29-02\",\"2020-03-01T17:00:00\":\"01-03\",\"2020-03-02T17:00:00\":\"02-03\",\"2020-03-03T17:00:00\":\"03-03\",\"2020-03-04T17:00:00\":\"04-03\",\n      \"2020-03-05T17:00:00\":\"05-03\",\"2020-03-06T18:00:00\":\"06-03\",\"2020-03-07T18:00:00\":\"07-03\",\"2020-03-08T18:00:00\":\"08-03\",\"2020-03-09T18:00:00\":\"09-03\",\n      \"2020-03-10T18:00:00\":\"10-03\",\"2020-03-11T17:00:00\":\"11-03\",\"2020-03-12T17:00:00\":\"12-03\",\"2020-03-13T17:00:00\":\"13-03\",\"2020-03-14T17:00:00\":\"14-03\",\n      \"2020-03-15T17:00:00\":\"15-03\",\"2020-03-16T17:00:00\":\"16-03\",\"2020-03-17T17:00:00\":\"17-03\",\"2020-03-18T17:00:00\":\"18-03\",\"2020-03-19T17:00:00\":\"19-03\",\n      \"2020-03-20T17:00:00\":\"20-03\",\"2020-03-21T17:00:00\":\"21-03\",\"2020-03-22T17:00:00\":\"22-03\",\"2020-03-23T17:00:00\":\"23-03\",\"2020-03-24T17:00:00\":\"24-03\",\n      \"2020-03-25T17:00:00\":\"25-03\",\"2020-03-26T17:00:00\":\"26-03\", \"2020-03-27T17:00:00\":\"27-03\",\"2020-03-28T17:00:00\":\"28-03\"}\nlombardia.date=lombardia.date.replace(value)","4ffe73d2":"import seaborn as sns \nimport matplotlib.pyplot as plt\n#plt.Figure(figsize=(80,50))\nplt.rcParams[\"axes.labelsize\"] = 28\ng = sns.catplot(x=\"date\", y=\"total_cases\",\n                 col=\"province\",col_wrap=5,palette=\"bone_r\",\n                data=lombardia , kind=\"point\",\n                 aspect=.9)\ng.set_xticklabels(rotation=90)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Total Cases According to Province in Lombardia',fontsize=25)\nplt.show()\n","16ae517d":"### LOMBARDIA","15b9ae17":"### TOTAL CONFIRMED, RECOVERED AND DEATH CASES","9dd10dbc":"### Hospitalized with Symptoms,Home Quarantine and Intensive Care Cases","8021ff9d":"### CASES IN THE REGIONS ","56e1e246":"### TOTAL CASES IN THE DIFFERENT REGIONS OF ITALY","7735e640":"* This treemap shows daily cases in the different regions of Italy. If click any region you can see dates and cases.","9400d319":"### LAST STATUS IN ITALY","85f866ed":"### Total Cases According to Province in Lombardia","cf3bc860":"FEATURES INFORMATION\n\n\ndate = DATE OF DETECTION\n\nhospitalized_with_symptoms= PATIENTS IN HOSPITAL WITH SYMPTOMS\n\nintensive_care = PATIENTS IN INTENSIVE CARE\n\ntotal_hospitalized= TOTAL PATIENTS IN HOSPITAL\n\nhome_quarantine= PATIENTS IN HOME ISOLATION\n\ntotal_confirmed_cases=TOTAL CONFIRMED CASES\n\nnew_confirmed_cases= NEW CONFIRMED CASES FROM PREVIOUS RECORD(PREVIOUS DAY)\n\nrecovered= NUMBER OF RECOVERED CASES\n\ndeaths= NUMBER OF DEATHS\n\ntotal_cases= NUMBER OF TOTAL CASES\n\nswabs_made= NUMBER OF SWABS MADE\n\nprecent_test_confirmed= PERCENTAGE OF CONFIRMED CASE ACCORDING TO SWABS MADE","3cf5cc98":"Following table shows daily cases with related features and maximum values with highlights."}}