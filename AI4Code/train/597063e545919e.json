{"cell_type":{"23919cfb":"code","c71f2d80":"code","9487abff":"code","f2d7300e":"code","c8be1b13":"code","73109425":"code","fdbab4dc":"code","bd7535ee":"code","7913b865":"code","9393de7a":"code","8ed4019e":"code","f0b6aca6":"code","367b924d":"code","a2199494":"code","61e348a4":"code","441ecbcc":"code","a917651b":"code","8a63dc6a":"code","d54cdf8f":"code","9aa1290a":"code","c7983d19":"code","22a92184":"code","568f7c1e":"code","319e5c9b":"code","abfca145":"code","8b9e11c4":"code","e296ee42":"code","4a178be3":"code","cd3cf083":"code","c7f60281":"code","443528a2":"code","c6808852":"code","f3b59a61":"code","5ddeddc0":"code","944daaa7":"code","fb7c6050":"code","74664d1f":"code","6580810c":"code","44fc9f19":"code","77888dfe":"code","e364d0a7":"code","44cb2df6":"code","3331a2f6":"code","72958335":"code","21173810":"code","3a5ae24d":"code","c3c727b8":"code","d0ca5f31":"code","dc92b7ba":"code","9760c190":"code","1dc9d85f":"code","20b601b4":"code","e1ecc28b":"code","3b61083c":"code","e7fca584":"code","c18c0a7b":"code","403218e9":"code","aa3fc5c5":"code","946218fd":"code","218168eb":"code","64cfd486":"code","791b845b":"code","aafbb391":"code","e18ad486":"code","5e0103f2":"code","f46478b1":"code","6e119906":"markdown","0bbcf76f":"markdown","e522e94b":"markdown","8f92e98a":"markdown","1bbf01a7":"markdown","2363e90d":"markdown","fa7c4fbd":"markdown","870067c1":"markdown","82c83954":"markdown","00fda192":"markdown","ba50a237":"markdown","fbb57f5b":"markdown","4565bae1":"markdown","d19f1406":"markdown","6d668036":"markdown","8d01f37d":"markdown","9918e632":"markdown","c7f6330e":"markdown","d3640b09":"markdown","ef2364a0":"markdown","55d8d082":"markdown","5d5129ea":"markdown","4dc6ead7":"markdown","6581d967":"markdown","52bb6735":"markdown","d36c1cf2":"markdown","171ea9bf":"markdown","f9a24b06":"markdown","0de7e1c7":"markdown","9762bac5":"markdown","43a13992":"markdown","22d4e91a":"markdown","9f67d16f":"markdown"},"source":{"23919cfb":"'''Importing Data Manipulattion Moduls'''\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n'''Seaborn and Matplotlib Visualization'''\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('bmh')                    \n%matplotlib inline\n\n'''plotly Visualization'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode(connected = True)\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown","c71f2d80":"'''Read the dataset from csv file'''\nfifa19 = pd.read_csv('..\/input\/fifa19\/data.csv')","9487abff":"'''Data at a glance'''\ndisplay(fifa19.head())\ndisplay(print('Dimension of fifa19:', fifa19.shape))","f2d7300e":"\"\"\"Let's see all columns in the data\"\"\"\ndisplay(fifa19.columns.values)\n\n'''I choose intersting columns from the dataframe for analysis'''\nchosen_columns = ['Name', \n                  'Age', \n                  'Nationality', \n                  'Overall', \n                  'Potential', \n                  'Club', \n                  'Value', \n                  'Wage', \n                  'Special',\n                  'Preferred Foot', \n                  'International Reputation', \n                  'Weak Foot',\n                  'Skill Moves', \n                  'Body Type', \n                  'Position',\n                  'Jersey Number',\n                  'Height', \n                  'Weight', \n                  'Crossing', 'Finishing', 'HeadingAccuracy',\n                  'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n                  'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n                  'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n                  'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n                  'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n                  'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                  'GKKicking', 'GKPositioning', 'GKReflexes']","c8be1b13":"'''create new dataframe with chosen columns'''\ndata = pd.DataFrame(fifa19, columns = chosen_columns)\ndisplay(data.head())\ndisplay(print('Dimension of data:', data.shape))","73109425":"'''Describing the data'''\ndata.describe()","fdbab4dc":"\"\"\"Let's check missing values\"\"\"\ndata.isnull().sum()","bd7535ee":"'''Imputing Club and Position'''\ndata['Club'].fillna('No Club', inplace = True)\ndata['Position'].fillna('ST', inplace = True)","7913b865":"'''There are some Discrete and Continuous variable and will be imputed by mean'''\nto_impute_by_mean = data.loc[:, ['Crossing', 'Finishing', 'HeadingAccuracy',\n                                 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n                                 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n                                 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n                                 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n                                 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n                                 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                                 'GKKicking', 'GKPositioning', 'GKReflexes']]\nfor i in to_impute_by_mean.columns:\n    data[i].fillna(data[i].mean(), inplace = True)","9393de7a":"'''These are categorical variables and will be imputed by mode.'''\nto_impute_by_mode = data.loc[:, ['Body Type','International Reputation', 'Height', 'Weight', 'Preferred Foot','Jersey Number']]\nfor i in to_impute_by_mode.columns:\n    data[i].fillna(data[i].mode()[0], inplace = True)","8ed4019e":"'''The following variables are either discrete numerical or continuous numerical variables.So the will be imputed by median.'''\nto_impute_by_median = data.loc[:, ['Weak Foot', 'Skill Moves', ]]\nfor i in to_impute_by_median.columns:\n    data[i].fillna(data[i].median(), inplace = True)","f0b6aca6":"'''Columns remaining to be imputed'''\ndata.columns[data.isna().any()]","367b924d":"def general(data):\n    return int(round((data[['HeadingAccuracy', 'Dribbling', 'Curve', \n                            'BallControl']].mean()).mean()))\n\ndef mental(data):\n    return int(round((data[['Aggression', 'Interceptions', 'Positioning', \n                            'Vision','Composure']].mean()).mean()))\n\ndef mobility(data):\n    return int(round((data[['Acceleration', 'SprintSpeed', \n                            'Agility','Reactions']].mean()).mean()))\n\ndef power(data):\n    return int(round((data[['Balance', 'Jumping', 'Stamina', \n                            'Strength']].mean()).mean()))\n\ndef shooting(data):\n    return int(round((data[['Finishing', 'Volleys', 'FKAccuracy', \n                            'ShotPower','LongShots', 'Penalties']].mean()).mean()))\n\ndef passing(data):\n    return int(round((data[['Crossing', 'ShortPassing', \n                            'LongPassing']].mean()).mean()))\n\ndef defending(data):\n    return int(round((data[['Marking', 'StandingTackle', \n                            'SlidingTackle']].mean()).mean()))\n\ndef goalkeeping(data):\n    return int(round((data[['GKDiving', 'GKHandling', 'GKKicking', \n                            'GKPositioning', 'GKReflexes']].mean()).mean()))\n\ndef rating(data):\n    return int(round((data[['Potential', 'Overall']].mean()).mean()))\n","a2199494":"'''Adding these categories to the data'''\ndata['General'] = data.apply(general, axis = 1)\ndata['Mental'] = data.apply(mental, axis =1)\ndata['Mobility'] = data.apply(mobility, axis = 1)\ndata['Power'] = data.apply(power, axis = 1)\ndata['Shooting'] = data.apply(shooting, axis = 1)\ndata['Passing'] = data.apply(passing, axis = 1)\ndata['Defending'] = data.apply(defending, axis =1)\ndata['Goalkeeping'] = data.apply(goalkeeping, axis = 1)\ndata['Rating'] = data.apply(rating, axis =1)","61e348a4":"'''Defining a funtion for cleaning Height, Weight, Value and Wage columns'''\n\n'''For weight'''\ndef extract_value_from(value):\n    x = value.replace('lbs', '')\n    return float(x)\n\n'''For Height'''\ndef feet_to_inches(value): \n    tmp = value.split(\"'\")\n    return int(tmp[0]) * 12 + int(tmp[1]) #converting feet to inches\n\n'''For Value and wage'''\ndef convert_currency(value):\n    x = value.replace('\u20ac', '')\n    if 'M' in x:\n        x = float(x.replace('M', ''))*100000\n    elif 'K' in value:\n        x = float(x.replace('K', ''))*1000\n    return float(x)","441ecbcc":"'''Appling the funtion to Height, Weight, Value and Wage columns'''\ndata['Weight'] = data['Weight'].apply(lambda x: extract_value_from(x))\ndata['Height'] = data['Height'].apply(lambda x: feet_to_inches(x))\ndata['Value'] =  data['Value'].apply(lambda x: convert_currency(x))\ndata['Wage'] =  data['Wage'].apply(lambda x: convert_currency(x))\n\ndisplay(Markdown('**Processed  Height, Weight, Value and Wage columns**'))\ndisplay(data[['Weight', 'Height', 'Value', 'Wage']].head(3))","a917651b":"# defining the features of players\n\nplayer_features = ('Acceleration', 'Aggression', 'Agility', \n                   'Balance', 'BallControl', 'Composure', \n                   'Crossing', 'Dribbling', 'FKAccuracy', \n                   'Finishing', 'GKDiving', 'GKHandling', \n                   'GKKicking', 'GKPositioning', 'GKReflexes', \n                   'HeadingAccuracy', 'Interceptions', 'Jumping', \n                   'LongPassing', 'LongShots', 'Marking', 'Penalties')\n\n# Top four features for every position in football\n\nfor i, val in data.groupby(data['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i, *tuple(val.nlargest(4).index)))","8a63dc6a":"# source: https:\/\/www.kaggle.com\/dczerniawko\/fifa19-analysis \nfrom math import pi\n\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in data.groupby(data['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(9, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n     # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1","d54cdf8f":"\"\"\"Let's see all the variables we currently have with their category.\"\"\"\ndisplay(data.head(2))\n\n'''Drop the features that would not be useful anymore.'''\ndata.drop(columns = ['Crossing', 'Finishing', 'HeadingAccuracy',\n                     'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n                     'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n                     'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n                     'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n                     'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n                     'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                     'GKKicking', 'GKPositioning', 'GKReflexes', 'Overall', 'Potential'], inplace = True, axis =1)\n\n'''Features Remaining after Dropping:'''\ndisplay(Markdown('**Features Remaining after Dropping:**'))\ndisplay(data.columns.values)","9aa1290a":"'''Create the funtion for different plots and visualization'''\n\n'''Function to distribution plot'''\ndef distplot(variable, color):\n    global ax\n    font_size = 16\n    title_size = 20\n    plt.rcParams['figure.figsize'] = (18, 7)\n    ax = sns.distplot(variable, color = color)\n    plt.xlabel('%s' %variable.name, fontsize = font_size)\n    plt.ylabel('Count of the Players', fontsize = font_size)\n    plt.xticks(fontsize = font_size)\n    plt.yticks(fontsize = font_size)\n    plt.title('%s' %variable.name + ' Distribution of Players', fontsize = title_size)\n    plt.show()\n    \n'''Function to count plot'''     \ndef countplot(variable, title,  color):\n    global ax\n    font_size = 14\n    title_size = 20\n    plt.rcParams['figure.figsize'] = (18, 8)\n    ax = sns.countplot(variable, palette = color)\n    plt.xlabel('%s' %variable.name, fontsize = font_size)\n    plt.xticks(fontsize = font_size)\n    plt.yticks(fontsize = font_size)\n    plt.title(title, fontsize = title_size)\n    plt.show()\n    \n'''Function to pie chart''' \ndef piechart(variable, title, color):\n    labels = ['1', '2', '3', '4', '5']\n    variable = variable.value_counts()\n    explode = [0.1, 0.1, 0.2, 0.5, 0.9]\n    plt.rcParams['figure.figsize'] = (9, 9)\n    plt.pie(variable, labels = labels, colors = color, explode = explode, shadow = True)\n    plt.title(title, fontsize = 20)\n    plt.legend()\n    plt.show()","c7983d19":"'''Distribution of the Age of the players'''\ndistplot(data['Age'], 'teal')","22a92184":"'''Distribution of the value of the players'''\ndistplot(data['Value'], 'g')","568f7c1e":"'''Distribution of the wage of the players'''\ndistplot(data['Wage'], 'm')","319e5c9b":"'''Distribution of Speciality Score of the players'''\ndistplot(data['Special'], 'b')","abfca145":"'''Distribution of Height of the players(In feet)'''\ndistplot(data['Height'], 'c')","8b9e11c4":"'''Distribution of weight of the players'''\ndistplot(data['Weight'], 'r')","e296ee42":"'''comparison of preferred foot over the different players'''\ncountplot(data['Preferred Foot'], 'Most Preferred Foot of the Player', 'Set2')","4a178be3":"'''comparison of weak foot over the different players'''\ncountplot(data['Weak Foot'], 'Distribution Of Week Foot', 'Paired')","cd3cf083":"'''Pie chart to represent share of international repuatation'''\npiechart(data['International Reputation'], 'International Repuatation of the Football Player', plt.cm.afmhot(np.linspace(0, 1, 5)))","c7f60281":"'''Pie chart to represent share of Player's Skill Move'''\npiechart(data['Skill Moves'], \"Share of Player's Skill Move\", plt.cm.viridis(np.linspace(0, 1, 5)))","443528a2":"countplot(data['Position'],'Comparison of positions and Player', 'copper')","c6808852":"'''Different nations participating in the FIFA 2019'''\ndata['Nationality'].value_counts().head(70).plot.bar(color = 'c', figsize = (20, 7))\nplt.title('Different Nations Participating in FIFA 2019', fontsize = 30, fontweight = 20)\nplt.xlabel('Name of The Country')\nplt.ylabel('count')\nplt.show()","f3b59a61":"'''Plot regression plot to see how Rating is correlated with numerical variables.'''\ncorr_num = data.loc[:, ['Value', 'Wage', 'Special', 'Jersey Number', 'Height',\n                        'Weight', 'General', 'Mental', 'Mobility', 'Power', 'Shooting',\n                         'Passing', 'Defending', 'Goalkeeping']]\nfor i in corr_num.columns:\n    x = corr_num[i]\n    y = data['Rating']\n    \n    # Creating the dataset and generating the plot\n    trace = go.Scatter(\n                       x = x,\n                       y = y,\n                       mode = 'markers',\n                       marker = dict(color = 'olive'))\n    \n    # Layout for regression plot\n    title = '{} vs Rating'.format(corr_num[i].name)\n    layout = go.Layout(title = title, yaxis = dict(title = 'Rating'))\n    \n    fig = go.Figure(data = trace, layout = layout)\n    iplot(fig)","5ddeddc0":"'''Create boxplots to see the association between categorical and Rating variables.'''\ncorr_cat = data.loc[:, ['Preferred Foot', 'International Reputation', 'Weak Foot',\n                        'Skill Moves', 'Position']]\nfor i in corr_cat.columns:\n    trace = go.Box(\n                   x = corr_cat[i],\n                   y = data['Rating'],\n                   marker = dict(color = 'teal'))\n    layout = go.Layout(title = '{} vs Rating'. format(i), yaxis = dict(title = 'Rating'))\n    fig = go.Figure(data = trace, layout = layout)\n    iplot(fig)","944daaa7":"'''Create bar plot to see the association between 'Name', 'Nationality', 'Club and Rating variables.'''\ndef bar_plot(x,y, xlabel, ylabel, label, color):\n    global ax\n    font_size = 16\n    title_size = 20\n    plt.rcParams['figure.figsize'] = (18, 7)\n    ax = sns.barplot(x, y, palette = color)\n    ax.set_xlabel(xlabel = xlabel, fontsize = font_size)\n    ax.set_ylabel(ylabel = ylabel, fontsize = font_size)\n    ax.set_title(label = label, fontsize = font_size)\n    plt.show()","fb7c6050":"'''picking up the countries with highest number of players to compare their Rating scores'''\ndata['Nationality'].value_counts().head(10)","74664d1f":"countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia', 'Japan', 'Netherlans')\ndata_countries = data.loc[data['Nationality'].isin(countries) & data['Rating']]\n\n'''Visualization'''\nbar_plot(data_countries['Nationality'], data_countries['Rating'], 'Countries', 'Rating',\n                    'Distribution of overall scores of players from different countries', 'binary_r')","6580810c":"'''Distribution of Wages of players from different countries'''\ncountries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia', 'Japan', 'Netherlans')\ndata_countries = data.loc[data['Nationality'].isin(countries) & data['Wage']]\n\n'''Visualization'''\nbar_plot(data_countries['Nationality'], data_countries['Wage'], 'Countries', 'Wage',\n                    'Distribution of Wages of players from different countries', 'YlGnBu')","44fc9f19":"'''Distribution of International Reputation of players from different countries'''\ncountries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia', 'Japan', 'Netherlans')\ndata_countries = data.loc[data['Nationality'].isin(countries) & data['International Reputation']]\n\n'''Visualization'''\nbar_plot(data_countries['Nationality'], data_countries['Wage'], 'Countries', 'International Reputation',\n                    'Distribution of International Reputation of players from different countries', 'Greens_r')","77888dfe":"'''Clubs with highest number of players'''\ndata['Club'].value_counts().head(20)","e364d0a7":"'''Picking up the popular clubs around the globe'''\nclubs = ('Arsenal','Liverpool', 'RC Celta', 'Empoli', 'Atl\u00e9tico Madrid', 'Manchester City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\ndata_clubs = data.loc[data['Club'].isin(clubs) & data['Rating']]\n\n'''Visualization'''\nbar_plot(data_clubs['Club'], data_clubs['Rating'], 'Popular Clubs','Ratings',\n                'Distribution of Rating Score in Different popular Clubs', 'inferno')","44cb2df6":"'''Top Rated players in FIFA 19'''\ndata[data['Rating'] > 90]['Name']","3331a2f6":"'''Distribution of International Reputation in some Popular clubs'''\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchester City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['International Reputation']]\n\nplt.rcParams['figure.figsize'] = (16, 8)\nax = sns.violinplot(x = 'Club', y = 'International Reputation', data = data_club, palette = 'magma')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 14)\nax.set_ylabel(ylabel = 'Distribution of Reputation', fontsize = 14)\nax.set_title(label = 'Distribution of International Reputation in some Popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","72958335":"'''Distribution of Age in some Popular clubs'''\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchester City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['Age']]\n\nplt.rcParams['figure.figsize'] = (16, 8)\nax = sns.violinplot(x = 'Club', y = 'Age', data = data_club, palette = 'GnBu')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 14)\nax.set_ylabel(ylabel = 'Distribution of Age', fontsize = 14)\nax.set_title(label = 'Distribution of Age in some Popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","21173810":"'''Distribution of wage in some Popular clubs'''\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchester City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (16, 8)\nax = sns.boxenplot(x = 'Club', y = 'Age', data = data_club, palette = 'cividis')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 14)\nax.set_ylabel(ylabel = 'Distribution of Wage', fontsize = 14)\nax.set_title(label = 'Distribution of Wage in some Popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","3a5ae24d":"''' Plotting a correlation heatmap'''\nplt.rcParams['figure.figsize'] = (30, 20)\nsns.heatmap(data.corr(), annot = True, cmap = 'viridis')\nplt.title('Heatmap of the Dataset', fontsize = 30)\nplt.show()","c3c727b8":"plt.rcParams['figure.figsize'] = (30, 20)\nsns.heatmap(data[['General', 'Mental', 'Mobility', 'Power', 'Shooting',\n       'Passing', 'Defending', 'Goalkeeping', 'Rating']].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f')\nplt.title('Heatmap of the Dataset', fontsize = 30)\nplt.show()","d0ca5f31":"'''Comparison of rating scores and value with popular clubs'''\nclubs = ('Manchester City', 'FC Barcelona',  'Chelsea', 'Real Madrid')\n\nsns.lmplot(x='Value', y='Rating', hue='Club', palette =  'tab20',\n           data=data.loc[data['Club'].isin(clubs)], \n           fit_reg=False, size = 7)\nplt.title('Comparison of Rating Scores and Value with Popular Clubs', fontsize = 14)\nplt.show()","dc92b7ba":"'''Type of Offensive Players Tends to get Paid the Most'''\nsns.lmplot(x='Value', y='Rating', hue='Position', palette =  'Set1',\n           data=data.loc[data['Position'].isin(['ST', 'RW', 'LW'])], \n           fit_reg=False, size = 7)\nplt.title('Type of Offensive Players Tends to get Paid the Most', fontsize = 14)\nplt.show()","9760c190":"'''Comparison of rating scores and value with Nationality'''\ncountries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil')\n\nsns.lmplot(x='Value', y='Rating', hue ='Nationality', palette =  'rocket',\n           data=data.loc[data['Nationality'].isin(countries)], \n           fit_reg=False, size = 7)\nplt.title('Comparison of Rating Scores and Value with Nationality', fontsize = 14)\nplt.show()","1dc9d85f":"'''Comparison of Rating Scores and age with Preferred foot'''\nplt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(data['Rating'], data['Age'], hue = data['Preferred Foot'], palette = 'Greys')\nplt.title('Comparison of Overall Scores and age with Preferred foot', fontsize = 20)\nplt.show()","20b601b4":"from pandas.plotting import parallel_coordinates\n\n'''Comparition between ST and GK Positions based on Player feature'''\np = (\n    data.iloc[:, 16:-1]\n        .loc[data['Position'].isin(['ST', 'GK'])])\n\np['Position'] = data['Position']\np = p.sample(200)\nplt.rcParams['figure.figsize'] = (20, 7)\nparallel_coordinates(p, 'Position')","e1ecc28b":"'''Comparition between FC Barcelona and FC Barcelona based on Player feature'''\np = (\n    data.iloc[:, 16:-1]\n        .loc[data['Club'].isin(['FC Barcelona', 'Real Madrid'])])\n\np['Club'] = data['Club']\np = p.sample(50)\nplt.rcParams['figure.figsize'] = (20, 7)\nparallel_coordinates(p, 'Club', colormap = 'RdBu')","3b61083c":"'''Comparition between left and right foot based on Player feature'''\np = (\n    data.iloc[:, 18:-3]\n        .loc[data['Preferred Foot'].isin(['Left', 'Right'])])\n\np['Preferred Foot'] = data['Preferred Foot']\np = p.sample(200)\nplt.rcParams['figure.figsize'] = (20, 7)\nparallel_coordinates(p, 'Preferred Foot', colormap = 'gnuplot')","e7fca584":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 121).generate(' '.join(data['Nationality']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Country',fontsize = 30)\nplt.show()","c18c0a7b":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 121).generate(' '.join(data['Club']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Club',fontsize = 30)\nplt.show()","403218e9":"'''Best players per each position with their age, club, and nationality based on their overall scores'''\n\nfifa19.iloc[fifa19.groupby(data['Position'])['Overall'].idxmax()][['Position', 'Name', 'Age', 'Club', 'Nationality']]","aa3fc5c5":"'''Best players from each positions with their age, nationality, club based on their potential scores'''\n\nfifa19.iloc[fifa19.groupby(data['Position'])['Potential'].idxmax()][['Position', 'Name', 'Age', 'Club', 'Nationality']]","946218fd":"'''Top 10 player of FIFA 19 based on rating'''\n\ndata[data['Rating'] > 90][['Name', 'Age', 'Club', 'Nationality']]","218168eb":"'''Top 10 youngest player from FIFA 19'''\n\ndata.sort_values('Age', ascending = True)[['Name', 'Age', 'Club', 'Nationality']].head(11)","64cfd486":"'''Top 10 eldest player from FIFA 19'''\n\ndata.sort_values('Age', ascending = False)[['Name', 'Age', 'Club', 'Nationality']].head(11)","791b845b":"'''Top 10 left footed footballer'''\n\ndata[data['Preferred Foot'] == 'Left'][['Name', 'Age', 'Club', 'Nationality']].head(11)","aafbb391":"'''Top 10 Right footed footballers'''\n\ndata[data['Preferred Foot'] == 'Right'][['Name', 'Age', 'Club', 'Nationality']].head(11)","e18ad486":"'''Ploting the location based on Rating'''\nrating = pd.DataFrame(data.groupby(['Nationality'])['Rating'].sum().reset_index())\ncount = pd.DataFrame(rating.groupby('Nationality')['Rating'].sum().reset_index())\n\ntrace = [go.Choropleth(\n            colorscale = 'plasma',\n            locationmode = 'country names',\n            locations = count['Nationality'],\n            text = count['Nationality'],\n            z = count['Rating'],\n            reversescale=True)]\n\nlayout = go.Layout(title = 'Country vs Ratings')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)","5e0103f2":"'''Ploting the location based on Shooting'''\nrating = pd.DataFrame(data.groupby(['Nationality'])['Shooting'].sum().reset_index())\ncount = pd.DataFrame(rating.groupby('Nationality')['Shooting'].sum().reset_index())\n\ntrace = [go.Choropleth(\n            colorscale = 'viridis',\n            locationmode = 'country names',\n            locations = count['Nationality'],\n            text = count['Nationality'],\n            z = count['Shooting'],\n            reversescale=True)]\n\nlayout = go.Layout(title = 'Country vs Shooting')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)","f46478b1":"'''Ploting the location based on Defending'''\nrating = pd.DataFrame(data.groupby(['Nationality'])['Defending'].sum().reset_index())\ncount = pd.DataFrame(rating.groupby('Nationality')['Defending'].sum().reset_index())\n\ntrace = [go.Choropleth(\n            colorscale = 'magma',\n            locationmode = 'country names',\n            locations = count['Nationality'],\n            text = count['Nationality'],\n            z = count['Defending'],\n            reversescale=True)]\n\nlayout = go.Layout(title = 'Country vs Defending')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)","6e119906":"## -- ***<font color=blue>Let's Start the Party<\/font>*** --","0bbcf76f":"# 9 .Multivariate Analysis <a id=\"9\"><\/a>\n***In multivariate analysis, we try to find the relationship among more than two variables. Number of predictor variable in bivariate analysis was one. On the contrary, number of predictor variables for multivariate analysis are more than one.***","e522e94b":"# 4. Binning and Grouping <a id=\"4\"><\/a>\n***Binning or grouping data (sometimes called quantization) is an important tool in preparing numerical data for machine learning, and is useful in scenarios like these:\nA column of continuous numbers has too many unique values to model effectively, so you automatically or manually assign the values to groups, to create a smaller set of discrete ranges. For example, you could use entropy scores generated by Group Data into Bins to identify the optimal groupings of data values, and use those groups as features in your model.***","8f92e98a":"# 2. Variable Description, Identification and Correction <a id=\"2\"><\/a>","1bbf01a7":"#### Defining the features of players","2363e90d":"# 5. Data Preprocessing <a id=\"5\"><\/a>\n\n***Before we proceed further, we need to do some preprocessing for variables like*** **Height and Weight** ***and monetary variables like*** **Value and Wage** ***so that they're converted to a numeric format.***","fa7c4fbd":"**It's seems Real Madrid, FC Barcelona, Tottenham Hotspur, Chelsea have top rated players in FIFA 19**","870067c1":"**Wage is also seems to positively skewed(hightly). Most of the player have same wages and some player have extreme high wages.**","82c83954":"# 7. Univariate Analysis <a id=\"7\"><\/a>\n***Univariate analysis separately explores the distribution of each variable in a data set. It looks at the range of values, as well as the central tendency of the values. Univariate data analysis does not look at relationships between various variables (like bivariate and multivariate analysis) rather it summarises each variable on its own.***\n\n***Methods to perform univariate analysis will depend on whether the variable is categorical or numerical. For numerical variable, we would explore its shape of distribution (distribution can either be symmetric or skewed) using histogram and density plots. For categorical variables, we would use bar plots to visualize the absolute.***","00fda192":"# 1. Importing Packages and Collecting Data <a id=\"1\"><\/a>","ba50a237":"**Most of player playing in ST position. 'ST' position is called side midfielder, they are on the left or right-hand side of central midfield. They can also be stationed at a wider position for providing more defensive protection.**","fbb57f5b":"# ***Thank You for Reading the Kernel!***\n\n# IF YOU FIND THIS KERNEL HELPFUL, SOME UPVOTES WILL BE APPRECIATED.","4565bae1":"## 8.2 Categorical and Numerical Variable <a id=\"8.2\"><\/a>\nA boxplot between our numerical and categorical variables helps to reveal if the distribution of numerical variable is distinct in different classes of nominal variables. More specifically, how Rating (strongly or weakly) is associated with these categorical variables. ","d19f1406":"**Again! Player of Brazil and Spain are have highest international reputation.**","6d668036":"# 11. References <a id=\"11\"><\/a>\n\n1. https:\/\/pandas.pydata.org\/pandasdocs\/stable\/reference\/api\/pandas.plotting.parallel_coordinates.html\n2. https:\/\/plot.ly\/python\/choropleth-maps\/\n3. https:\/\/www.kaggle.com\/roshansharma\/fifa-data-visualization\n4. https:\/\/www.kaggle.com\/thebrownviking20\/intermediate-visualization-tutorial-using-plotly\n5. https:\/\/www.kaggle.com\/residentmario\/multivariate-plotting\n6. https:\/\/www.kaggle.com\/crazydiv\/fifa-player-analysis-with-plotly\n7. https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n8. https:\/\/plot.ly\/python\/line-and-scatter","8d01f37d":"\n* [1. Importing Packages And Collecting Data](#1)\n* [2. Variable Description, Identification And Correction](#2)\n* [3. Imputing Missing Variable](#3)\n* [4. Binning And Grouping](#4)\n* [5. Data Preprocessing](#5)\n* [6. Dropping Features](#6)\n* [7. Univariate Analysis](#7)\n* [8. Bivariate Analysis](#8)\n  * [8.1. Numerical and Numerical Variable](#8.1)\n  * [8.2. Categorical and Numerical Variable](#8.2)\n* [9. Multivariate Analysis](#9)\n* [10. Top 10 Player](#10)\n* [11. References](#11)","9918e632":"**Spain and Brazil has most top rated player in FIFA 19**","c7f6330e":"**Fare is also seems to positively skewed(hightly). Most of the player have same value and some player have extreme high values.**","d3640b09":"**It's seens like height of the football player have normal distribution.**","ef2364a0":"**Hmm!!! This is intesting finding,  Most of variables showing positive relationship between 'Rating' and 'Value', 'Wage', 'Special', 'General', 'Mental', 'Mobility', 'Power','Shooting', 'Passing', 'Defending', 'Goalkeeping'. But few of them showing no relationship between 'Rating and 'Jersey Number', 'Height', 'Weight.**","55d8d082":"# About This Kernel\n\nHi Everyone!!, I am a big fan of the FIFA franchise. I played almost all FIFA games from FIFA 14 to 19. I enjoy this game on my laptop with my friends and brothers, so Now I am enjoying visualization with FIFA 19 dataset. \n\nThis kernel is easily understandable to the beginner like me. This verbosity tries to explain everything I could possibly know. Once you get through the notebook, you can find this useful and straightforward. I attempted to explain things as simple as possible.\n\nIn this notebook, I extensively use plotly along with seaborn and matplotlib for data visualization and EDA on  FIFA 19 dataset. \nKeep Learning,\n\nVikas Singh","5d5129ea":"**Player of Brazil and Spain are have highest wages.**","4dc6ead7":"**Again only few players has high skill moves.**","6581d967":"# Introduction\n\nFIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series. It is the 26th installment in the FIFA series, and was released on 28 September 2018 for PlayStation 3, PlayStation 4, Xbox 360, Xbox One, Nintendo Switch, and Microsoft Windows.\n\nAs with FIFA 18, Cristiano Ronaldo featured as the cover athlete of the regular edition: however, following his unanticipated transfer from Spanish club Real Madrid to Italian side Juventus, new cover art was released. He also appeared with Neymar in the cover of the Champions edition. From February 2019, an updated version featured Neymar, Kevin De Bruyne and Paulo Dybala on the cover of the regular edition.\n\nThe game features the UEFA club competitions for the first time, including the UEFA Champions League and UEFA Europa League and the UEFA Super Cup as well. Martin Tyler and Alan Smith return as regular commentators, while the new commentary team of Derek Rae and Lee Dixon feature in the UEFA competitions mode. Composer Hans Zimmer and rapper Vince Staples recorded a new remix of the UEFA Champions League anthem specifically for the game.\n\nThe character Alex Hunter, who first appeared in FIFA 17, returns for the third and final installment of \"The Journey\", entitled, \"The Journey: Champions\". In June 2019, a free update added the FIFA Women's World Cup as a separate game mode. It is the last FIFA game to be available on a seventh-generation console, and the last known game to be available for the PlayStation 3 worldwide.\n\n\n![](https:\/\/compass-ssl.xbox.com\/assets\/5e\/5e\/5e5e79d1-1ea9-4280-8ead-86dc202122f3.jpg?n=FIFA-19_Multi-Feature-1084_FUT_1600x600.jpg)","52bb6735":"**Only few players have high international repuatation.**","d36c1cf2":"**It's seens like normal distribution of weight among the football player.**","171ea9bf":"# 8. Bivariate Analysis <a id=\"8\"><\/a>\n***Being the most important part, bivariate analysis tries to find the relationship between two variables. We will look for correlation or association between our predictor and target variables. Bivariate analysis is performed for any combination of categorical and numerical variables. The combination can be: Numerical & Numerical, Numerical & Categorical and Categorical & Categorical.***\n\n## 8.1 Numerical and Numerical Variable <a id=\"8.1\"><\/a>\n***we would try analyse the relationship between Rating and other continuous numerical variables.***","f9a24b06":"# 3. Imputing Missing variable <a id=\"3\"><\/a>\n***The simpliest way to impute missing values of a variable is to impute its missing values with its mean, median or mode depending on its distribution and variable type(categorical or numerical).***","0de7e1c7":"# 6. Dropping Features <a id=\"6\"><\/a>\n***Now we have both transformed and the original variables transformation have been made from. So we should safely drop the variables that we think would not be useful anymore.***","9762bac5":"# 10. Top 10 Players <a id=\"10\"><\/a>","43a13992":"**Age seems to positively skewed(slightly). Most of players ages is between 20 to 30(not including 30).**","22d4e91a":"Okay!! so we have lots of missing varibles. \n* **For Club variable,** we assume that those player doesn't have any club. so, we impute the missing values with no club.\n\n* **For Position variable,**\u00a0we are imputing this with 'ST' because 'ST' position is called side midfielder, they are on the left or right-hand side of central midfield. They can also be stationed at a wider position for providing more defensive protection. So, This makes sense.","9f67d16f":"**Graph showing England has more player participation in FIFA 19 followed by Germany, Spain, Argentina, France, Brazil etc**"}}