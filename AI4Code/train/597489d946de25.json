{"cell_type":{"081d6fd7":"code","36fdb040":"code","4e1c6545":"code","aa721075":"code","d62a0364":"code","9c626c93":"code","75df1cd5":"code","89b6cb4e":"code","b4a801c3":"code","4dc56a8d":"code","de62d154":"code","1e232c8b":"code","adb68f59":"code","ed24a80a":"code","3e6c4b06":"code","0243620a":"markdown","c0b294bf":"markdown","2b9a4a19":"markdown","1ce29ccd":"markdown","24e86eaa":"markdown","d4c66c2d":"markdown","9669fe23":"markdown","75839d5f":"markdown","474602d9":"markdown"},"source":{"081d6fd7":"!pip install -U lightautoml","36fdb040":"!pip install -U Kaggler","4e1c6545":"# Standard python libraries\nimport os\nimport time\nimport re\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np\nimport lightgbm as lgb\nimport os\nimport pandas as pd\nfrom pathlib import Path\nimport seaborn\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom warnings import simplefilter\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\n\nimport kaggler\nfrom kaggler.model import AutoLGB\nfrom kaggler.preprocessing import DAE, TargetEncoder, LabelEncoder\nprint(kaggler.__version__)","aa721075":"pd.set_option('max_columns', 500)\nsimplefilter('ignore')","d62a0364":"feature_name = 'dae_te_le'\nalgo_name = 'lml'\nversion = 1\nmodel_name = f'{algo_name}_{feature_name}_v{version}'\n\ndata_dir = Path('..\/input\/tabular-playground-series-may-2021')\ntrain_file = data_dir \/ 'train.csv'\ntest_file = data_dir \/ 'test.csv'\nsample_file = data_dir \/ 'sample_submission.csv'\n\ndae_feature_file = '..\/input\/tps5-dae-features\/dae.h5'\npredict_val_file = f'{model_name}.val.txt'\npredict_tst_file = f'{model_name}.tst.txt'\nsubmission_file = f'{model_name}.sub.csv'\n\nid_col = 'id'\ntarget_col = 'target'","9c626c93":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 3 * 3600 # Time in seconds for automl run\nTARGET_NAME = 'target'\n\nencoding_dim = 128\nseed = 42\nn_fold = 5\nn_class = 4","75df1cd5":"trn = pd.read_csv(train_file, index_col=id_col)\ntst = pd.read_csv(test_file, index_col=id_col)\nsub = pd.read_csv(sample_file, index_col=id_col)\nprint(trn.shape, tst.shape, sub.shape)","89b6cb4e":"y = trn[target_col].str.split('_').str[1].astype(int) - 1\nn_trn = trn.shape[0]\ndf = pd.concat([trn.drop(target_col, axis=1), tst], axis=0)\nfeature_cols = df.columns.tolist()\nprint(y.shape, df.shape)","b4a801c3":"df_dae = pd.read_hdf(dae_feature_file, key='data')\n\ncv = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=seed)\nte = TargetEncoder(cv=cv)\nte.fit(trn[feature_cols], y)\ndf_te = te.transform(df[feature_cols])\ndf_te.columns = [f'te_{x}' for x in df.columns]\n\nle = LabelEncoder(min_obs=50)\ndf_le = le.fit_transform(df[feature_cols])\ndf_le.columns = [f'le_{x}' for x in df.columns]\n\nall_df = pd.concat([df_le, df_te, df_dae], axis=1)\n\ntrain_data, test_data = all_df[:n_trn], all_df[n_trn:]\nprint(train_data.shape, test_data.shape)","4dc56a8d":"train_data[target_col] = y\nprint(train_data.shape)\ntrain_data.head()","de62d154":"task = Task('multiclass',)\nroles = {\n    'target': TARGET_NAME,\n}","1e232c8b":"%%time \n\nautoml = TabularUtilizedAutoML(task = task, \n                               timeout = TIMEOUT,\n                               cpu_limit = N_THREADS,\n                               reader_params = {'n_jobs': N_THREADS},\n                               configs_list=[\n                                   '..\/input\/lightautoml-configs\/conf_0_sel_type_0.yml',\n                                   '..\/input\/lightautoml-configs\/conf_1_sel_type_1.yml'\n                               ])\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","adb68f59":"%%time\n\n# Fast feature importances calculation\nfast_fi = automl.get_feature_scores('fast', silent = False)\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","ed24a80a":"%%time\n\ntest_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(log_loss(train_data[TARGET_NAME].values, oof_pred.data)))","3e6c4b06":"sub.iloc[:, :] = test_pred.data\nsub.to_csv(submission_file)","0243620a":"# ========= AutoML preset usage =========\n\n\n## Step 1. Create Task & Setup Column Roles","c0b294bf":"# Step 0.2. Parameters ","2b9a4a19":"This notebook is based on @alexryzhkov's [LightAutoML baseline TPS May 2021](https:\/\/www.kaggle.com\/alexryzhkov\/lightautoml-baseline-tps-may-2021\/). It trains LightAutoML with [Kaggler](https:\/\/github.com\/jeongyoonlee\/Kaggler)'s [DAE](https:\/\/www.kaggle.com\/jeongyoonlee\/tps5-dae-features) and target encoded features.\n\nEnjoy~!\n\n# Step 0.0. Install LightAutoML & Kaggler","1ce29ccd":"# Step 0.1. Import necessary libraries ","24e86eaa":"## Step 4. Predict for test data and check OOF score","d4c66c2d":"## Step 5. Prepare submission","9669fe23":"# Step 0.5. Add new features","75839d5f":"# Step 0.3. Data load ","474602d9":"## Step 3. Train on full data "}}