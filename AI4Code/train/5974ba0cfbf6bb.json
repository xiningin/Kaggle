{"cell_type":{"28bfcf6d":"code","66185b6d":"code","69c702b8":"code","162d993b":"code","b69aeaa2":"code","e7739cbe":"code","c26e3bd3":"code","2b6e6038":"code","025853bf":"code","33cbc48e":"code","6e58032d":"code","6b2baa45":"code","7316ec2f":"code","33bc7b65":"code","b0072a75":"code","ec47d6ca":"code","98a00621":"code","6bb88005":"code","735765dd":"code","a3f89395":"code","384df08e":"code","1c65f938":"code","10f8367a":"code","28deb2bb":"code","350b9e46":"markdown","2ec1dbfc":"markdown","c36d26c7":"markdown","ee359cdc":"markdown","6713cecc":"markdown","67592460":"markdown","1f08fa38":"markdown","41c125c4":"markdown","348cc8ba":"markdown","d45d2803":"markdown"},"source":{"28bfcf6d":"import pandas as pd\nimport numpy as np\nimport glob","66185b6d":"#Players & Play DataFrames\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\n#Adjust regex accordingly for certain weeks\nfilenames = glob.glob('..\/input\/nfl-big-data-bowl-2021\/*[1|3-9].csv')\n\ndfs = []\nfor filename in filenames:\n    dfs.append(pd.read_csv(filename))\n\n#Tracking Data excluding week 2\nweek = pd.concat(dfs, ignore_index=True)\n","69c702b8":"week.head()","162d993b":"plays['playDescription'][22]","b69aeaa2":"# Regex Extract the defending passer in parentheses, intended receiver, and the player who intercepted\nplays['passDefender'] = plays['playDescription'].str.extract(r'\\(([A-Z]\\.[a-zA-Z].*?)\\)', expand=True)\nplays['interceptedDefender'] = plays['playDescription'].str.extract(r'[INTERCEPTED by]\\s([A-Z]\\.[a-zA-Z]+)')\n\n# Replace intended receiver with the Interceptor\nplays.loc[(~plays['interceptedDefender'].isnull()), 'passDefender'] = plays['interceptedDefender']\nplays.drop('interceptedDefender',axis=1, inplace=True)\n\n#IF multiple defenders, use the first defender\ndefenders = plays['passDefender'].str.split(',', n=2, expand=True)\nplays['passDefender'] = defenders[0]\n\n#Extract indented receiver\nplays['intendedReceiver'] = plays['playDescription'].str.extract(r'[to|intended for]\\s([A-Z]\\.[a-zA-Z]+)')","e7739cbe":"#Relevant columns \ncols = ['gameId', 'playId', 'frameId', 'x','y', 's', 'a', 'event', 'nflId', 'displayName', 'position', ]\n\nweek = week[cols]\n\n#add Defender in coverage and Intended Receiver to tracking data\nweek = pd.merge(week, plays[['gameId','playId','passResult','passDefender','intendedReceiver']], how='left', on=['gameId','playId'])","c26e3bd3":"#Normalize Name for Joins\nnames = week['displayName'].str.split(n=2, expand=True)\nweek['displayName_norm'] = names[0].str[0]+'.'+names[1]","2b6e6038":"#Keep trackign data of extracted players from playDescription.\nthrown_at = week.loc[(week['intendedReceiver']==week['displayName_norm'])|(week['passDefender']==week['displayName_norm'])]\nthrown_at.replace(to_replace='None', value=np.nan)","025853bf":"#Identify the offensive and Defensive players for future sort.\nthrown_at['Position'] = np.where(thrown_at['position'].isin(['RB','WR','TE','HB','FB']),'O','D')\nthrown_at = thrown_at.sort_values(['gameId', 'playId', 'frameId', 'Position'])\n\n#Remove nulls\nthrown_at = thrown_at.loc[thrown_at['passDefender'].notna()]\nthrown_at = thrown_at.loc[thrown_at['intendedReceiver'].notna()]","33cbc48e":"week.head()","6e58032d":"#GroupBy, Transpose\nthrown_at = thrown_at[thrown_at['event'].isin(['pass_forward','pass_arrived'])]\n\nplay_group = thrown_at.groupby(['gameId', 'playId'])\nX=play_group.agg({'displayName':lambda x:x.tolist(),'event':lambda x:x.tolist(),\n                  'x':lambda x:x.tolist(), 'y':lambda x:x.tolist(),\n                  's':lambda x:x.tolist(),'a': lambda x:x.tolist()})\n\n#Keep plays only with 4 events\nX = X.reset_index()\nX = X.loc[X['event'].str.len() == 4]","6b2baa45":"X[['D_displayName','O_displayName', 'throwaway', 'throwaway1']] = pd.DataFrame(X.displayName.tolist(), index= X.index)\nX[['D_forward_x','O_forward_x','D_arrived_x','O_arrived_x']] = pd.DataFrame(X.x.tolist(), index= X.index)\nX[['D_forward_y','O_forward_y','D_arrived_y','O_arrived_y']] = pd.DataFrame(X.y.tolist(), index= X.index)\nX[['D_forward_s','O_forward_s','D_arrived_s','O_arrived_s']] = pd.DataFrame(X.s.tolist(), index= X.index)\nX[['D_forward_a','O_forward_a','D_arrived_a','O_arrived_a']] = pd.DataFrame(X.a.tolist(), index= X.index)","7316ec2f":"X = X.drop(['displayName','event','x','y','s','a','throwaway','throwaway1'], axis=1)","33bc7b65":"#Add football location\nfootball_forward = week.loc[(week['displayName']=='Football')&(week['event']=='pass_forward')]\nfootball_arrival = week.loc[(week['displayName']=='Football')&(week['event']=='pass_arrived')]\n\nX = pd.merge(X, football_forward[['gameId','playId','x','y']], how='left', on=['gameId','playId']).rename(columns={'x': 'ball_forward_x', 'y': 'ball_forward_y'})\nX = pd.merge(X, football_arrival[['gameId','playId','x','y']], how='left', on=['gameId','playId']).rename(columns={'x': 'ball_arrived_x', 'y': 'ball_arrived_y'})","b0072a75":"def euclidean_distance(x1,y1,x2,y2):\n    dx = (x1-x2)**2\n    dy = (y1-y2)**2\n    dist = np.sqrt(dx+dy)\n    \n    return dist\n\nX['forwardDisatnce_players'] = X.apply(lambda x: euclidean_distance(x['D_forward_x'], x['D_forward_y'], x['O_forward_x'], x['O_forward_y']), axis=1)\nX['arrivedDisatnce_players'] = X.apply(lambda x: euclidean_distance(x['D_arrived_x'], x['D_arrived_y'], x['O_arrived_x'], x['O_arrived_y']), axis=1)\n# X['distanceDiff_players'] = X['forwardDisatnce_players']-X['arrivedDisatnce_players']\n\nX['forwardDisatnce_D_to_football'] = X.apply(lambda x: euclidean_distance(x['D_forward_x'], x['D_forward_y'], x['ball_forward_x'], x['ball_forward_y']), axis=1)\nX['arrivedDisatnce_D_to_football'] = X.apply(lambda x: euclidean_distance(x['D_arrived_x'], x['D_arrived_y'], x['ball_arrived_x'], x['ball_arrived_y']), axis=1)\n# X['distanceDiff_ball'] = X['forwardDisatnce_D_to_football']-X['arrivedDisatnce_D_to_football']","ec47d6ca":"X.shape","98a00621":"X","6bb88005":"#Add pass result\nX = pd.merge(X, plays[['gameId', 'playId', 'passResult']], how='left', on=['gameId', 'playId'])\nX.shape","735765dd":"X.loc[X['arrivedDisatnce_players'] < X['arrivedDisatnce_D_to_football'], 'arrived_distance'] = X['arrivedDisatnce_players']\nX.loc[X['arrivedDisatnce_players'] > X['arrivedDisatnce_D_to_football'], 'arrived_distance'] = X['arrivedDisatnce_D_to_football']\n\nX['break_on_the_ball'] = X['forwardDisatnce_players'] - X['arrived_distance']","a3f89395":"break_ups = X[(X['passResult'].isin(['I', 'IN']))&(X['break_on_the_ball']>0)]\n\nbreak_ups.sort_values('break_on_the_ball', ascending=False).head(10)","384df08e":"#use median for hail mary outliers\nleaders = break_ups.groupby(['D_displayName']).agg({'break_on_the_ball':'median', 'playId':'count'}).reset_index().rename(columns={'playId': 'num_plays'})\nleaders = leaders[leaders['num_plays']>=5].sort_values('break_on_the_ball', ascending=False)\nleaders = leaders.rename(columns={\"D_displayName\":\"Name\"})\nleaders.head(15)","1c65f938":"# leaders[leaders['Name']=='Darius Slay']","10f8367a":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nax = sns.barplot(x=\"Name\", y=\"break_on_the_ball\", data=leaders.head(10), palette=\"Greens_d\")\nplt.xticks(rotation=70)\nplt.title(\"Median Yards Defender Took Before Causing INT\/Incompletion \")","28deb2bb":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nax = sns.barplot(x=\"Name\", y=\"num_plays\", data=leaders.sort_values('num_plays', ascending=False).head(10), palette=\"Reds_d\")\nplt.xticks(rotation=70)\nplt.title(\"Most Plays Broken Up\")\n","350b9e46":"- We use all weeks except for Week 2 due to anomolies in the data.","2ec1dbfc":"- When the Quarterback throws their intended ball to a receiver, the defender in coverage must decide quickly whether they want to play the receiver or the ball. Going after the receiver, you have a better opportunity to tackle the defender once he catches the ball while going for the ball is riskier but can pay off with an interception if timed correctly. \n- Going for the ball or the defender varies in each situation. Thus for this analysis, the variable arrived_distance indicates the smaller distance of the ball or the player to the defender. Assuming the smaller distance is whether the defender brakes on the player or the ball.","c36d26c7":"- Some of the records with a high break_on_the_ball value are due to HailMary's where the Quarterback throws up a punt-like pass, allowing time for all his receivers to get under the ball in hopes for a miracle catch. To avoid these cases, we will use the median of break_on_the_ball.\n- Minimum 5 plays","ee359cdc":"## 2.0 Analysis\n- In this analysis, we will examine which defenders can cover the most group to cause an incompletion or a turnover on a pass. We filter on Interceptions and Incompletions and get rid of any negative plays, which are anomalies.\n","6713cecc":"- Knowing an estimated range of how fast a defender can get to the ball can help coaches decide defensive schemes. Coaches can give players like Kevin Byard (avg 9.73 yards to make a play on the ball) a more prominent region to cover when playing zone since he has a great range. Having a player like this can shrink other parts of the field for fellow defenders. \n- While players like Darius Slay (15 total breakups and avg 0.66 yards to make a play on a ball) are probably in man coverage more than zone due to their low number of yards when causing pass disruptions. \n","67592460":"# Best Pass Defenders To Break on The Ball\n\nIn this notebook, we will identify which players are best at defending the pass while the ball is in the air. On pass plays, it's the defender's goal to prevent pass catchers from catching the ball in any way that doesn't draw a flag. In zone, defenders are covering a designated area of the field while watching the Quarterback. On the other hand, in Man-to-Man coverage, the defender is tracking a receiver step for step. \n\nWith both coverages, defenders must rely on speed, agility, and quick reflexes to prevent the receiver from catching the ball. Once the Quarterback throws the ball in a receiver's direction,  a close defender has the option to either play the man or to go after the ball for a pass deflection or an interception. We will show which players cover the most ground while the ball is in the air, resulting in either an incompletion or interception. \n\n","1f08fa38":"- Each play in the player tracking data is tagged with an *event* label, which indicates details of the play such as ball snap, pass release (pass_forward), pass arrive (pass_arrived), etc.\n- We will focus only on pass_forward and pass_arrived by calculating the Euclidean Distance between the defender and the receiver and the defender and the ball for both events.\n- We transpose the player tracking data to have each play information in one row","41c125c4":"## 3.0: Further Work\n- In future work, instead of using the tackler's name as the pass defender for completed passes, we plan to use the player tracking data to determine which defender was the nearest to the receiver when the ball arrives.  This will generate more insights into the \"completed\" data points where heuristics such as catch probability can be calculated based on the nearest defender's distance. Also, adding the nearest defender at arrival will eliminate the assumption that the defender who tackles the ball catcher was the receiver's closest defender. There were anomalies in the completion data (completions were not used in this analysis) due to a defender making a tackle to a pass catcher down the field, causing the distance to be much greater than what it was. \n","348cc8ba":"- Extracting Intended Receiver (D.Goedert) and player in coverage (D.Riley)  ","d45d2803":"## **1.0 Preprocessing**\n\n- For all pass plays the play description indicates the intended receiver. For incompletions, the defender in coverage is in parentheses. While for a completed pass, the defender in parentheses is the player that made the tackle.\n- We will extract all the intended receivers while also extracting the defenders for incomplete or intercepted passes by using regex."}}