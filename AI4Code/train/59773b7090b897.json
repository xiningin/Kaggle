{"cell_type":{"461e3c9c":"code","1da19607":"code","65275e37":"code","830a51f6":"code","7127fb71":"code","79112f1e":"code","7dfbbbd4":"code","10fa80fa":"code","f350d147":"code","9900630e":"code","c53a5389":"code","4ba2b0dd":"code","de18f538":"code","67789257":"code","6594de94":"code","ebfaa930":"code","fff608df":"code","acdfebdd":"code","cbcbd707":"code","6674a3c9":"code","4316a50f":"code","b0a56900":"code","ed7a5c56":"code","77a87bfd":"code","32ef72d2":"code","ed69c2a2":"code","08c98e7c":"code","8da79e0a":"code","3fddad99":"code","6c3cf921":"code","7f0a6984":"code","a52ad679":"code","a5d0676f":"code","2320e95e":"code","f3a7f717":"code","d00ae789":"code","dc64f07b":"code","029a9554":"code","ccf152bf":"code","7f5f008e":"code","1a1d8876":"code","5bbcc548":"code","0bb9d93d":"code","e529bf86":"code","3da127ca":"code","6859f0f0":"code","7fa90d67":"code","0220bfa9":"code","3fad90f5":"code","cb38df40":"code","d6b71a59":"code","7c5f8682":"code","3d55076e":"code","1503bca5":"code","ee3a5836":"markdown","ec186309":"markdown","f605a868":"markdown","845dc8c9":"markdown","f15dea5d":"markdown","54a83a30":"markdown","0be27b45":"markdown","56f54a86":"markdown","03de3692":"markdown","4050e7bf":"markdown","91149554":"markdown","9f7ad717":"markdown","373ef2c3":"markdown","253094bb":"markdown","4f8f2024":"markdown","1e28c12e":"markdown","f5a7226b":"markdown","1a5a0511":"markdown","9528dfb0":"markdown","02fb7aa7":"markdown","951cfb58":"markdown","8daa5d4e":"markdown"},"source":{"461e3c9c":"#import libraries\n\n# linear algebra\nimport numpy as np \n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore') \n#vizualisation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\nimport plotly.express as px\n#maschine learning libraries\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import  accuracy_score\nfrom sklearn.ensemble import RandomForestRegressor\n#t-test\nfrom scipy.stats import ttest_ind # just the t-test from scipy.stats\nfrom scipy.stats import probplot # for a qqplot\nimport pylab\nfrom scipy.stats import t\nimport scipy.stats as stats\nfrom statsmodels.stats import weightstats as statsmodelsweightstats\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","1da19607":"# read data\ndf = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","65275e37":"df.head()","830a51f6":"df['sal_year'] = df.date.str[:4]","7127fb71":"df.drop(columns=['date'],inplace=True)","79112f1e":"df.sal_year.value_counts()","7dfbbbd4":"df.info()","10fa80fa":"df.price.astype(float)","f350d147":"df.sqft_living.astype(float)","9900630e":"df.describe()","c53a5389":"df.corr()\nplt.subplots(figsize=(17,14))\nsns.heatmap(df.corr(),annot=True,linewidths=0.5,linecolor=\"Black\",fmt=\"1.1f\")\nplt.title(\"Data Correlation\",fontsize=50)\nplt.show()","4ba2b0dd":"plt.figure(figsize=(10,10))\nplt.scatter(x=df.bathrooms,y=df.price,color='skyblue', alpha=0.5)\nplt.xlabel(\"Count of Bathrooms\",)\nplt.ylabel(\"Price of House\")\nplt.title(\"  Price ratio according to the number of bathrooms\")\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.show()","de18f538":"new_index = (df['grade'].sort_values(ascending=False)).index.values\nsorted_data = df.reindex(new_index)\n","67789257":"#Vizualition\nplt.figure(figsize = (15,10))\nsns.barplot(x=sorted_data['grade'],y=sorted_data['price'])\nplt.ylabel('Price')\nplt.xlabel('Grade')\nplt.title('Price for each Grade')\nplt.show()","6594de94":"neww_index = (df['condition'].sort_values(ascending=False)).index.values\nsortedw_data = df.reindex(neww_index)\n","ebfaa930":"#Vizualition\nplt.figure(figsize = (15,10))\nsns.barplot(x=sortedw_data['condition'],y=sortedw_data['price'])\n\nplt.ylabel('Price')\nplt.xlabel('Condition')\nplt.title('Price for each Condition')\nplt.show()","fff608df":"vieww_index = (df['condition'].sort_values(ascending=False)).index.values\nsortedview_data = df.reindex(vieww_index)","acdfebdd":"#Vizualition\nplt.figure(figsize = (15,10))\nsns.barplot(x=sortedview_data['view'],y=sortedview_data['price'])\nplt.ylabel('Price')\nplt.xlabel('View')\nplt.title('Price for each View')\nplt.show()","cbcbd707":"dff = df.iloc[:,:]\n\ntrace1 = go.Scatter(\n        x = dff.price,\n        y = dff.sqft_above,\n        mode = 'markers',\n        name = 'sqft_above',\n        marker = dict(color = 'rgba(123,123,3,0.7)'),\n        text = dff.id)\ntrace2 = go.Scatter(\n        x = dff.price,\n        y = dff.sqft_living,\n        mode = 'markers',\n        name = 'sqft_living',\n        marker = dict(color='rgba(10,133,1,0.7)'),\n        text = dff.id)\ndata = [trace1,trace2]\nlayout = dict(title = 'Relationship between Living Space and Living Space without Garage or Basement',\n              xaxis = dict(title = 'Price',ticklen = 5,zeroline = False),\n              yaxis = dict(ticklen = 5,zeroline = False))\nfig = dict(data = data, layout= layout)\npy.iplot(fig)\n","6674a3c9":"data = df\n#set colors\ndata[\"color\"] = \"\"\ndata.color[data.grade == 1] = \"rgb(255,255,255)\"\ndata.color[data.grade == 2] = \"rgb(220,220,220)\"\ndata.color[data.grade == 3] = \"rgb(242, 177, 172)\"\ndata.color[data.grade == 4] = \"rgb(255,133,27)\"\ndata.color[data.grade == 5] = \"rgb(255,255,204)\"\ndata.color[data.grade == 6] = \"rgb(255,65,54)\"\ndata.color[data.grade == 7] = \"rgb(1,2,123)\"\ndata.color[data.grade == 8] = \"rgb(123,123,2)\"\ndata.color[data.grade == 9] = \"rgb(45,188,1)\"\ndata.color[data.grade == 10] = \"rgb(31,51,6)\"\ndata.color[data.grade == 11] = \"rgb(245,10,126)\"\ndata.color[data.grade == 12] = \"rgb(8,187,180)\"\ndata.color[data.grade == 13] = \"rgb(250,250,250)\"","4316a50f":"#slice +7 grade\ndataplus = data[np.logical_and(data.grade >= 7,data.yr_built >= 2000)] \n#list lat and long\nlats = list(dataplus.lat.values)\nlongs = list(dataplus.long.values)","b0a56900":"mapbox_access_token = 'pk.eyJ1IjoiZGFya2NvcmUiLCJhIjoiY2pscGFheHA1MXdqdjNwbmR3c290MTZ6dCJ9.K1FMv_q3ZVlKP13RrjFkjg'\n\nmapp = [go.Scattermapbox(lat=lats,lon=longs,mode=\"markers\",marker=dict(size=4.5,color=dataplus[\"color\"]) ,hoverinfo=\"text\",text=\"Grade:\"+dataplus.grade.apply(str)+\" Built Year:\"+dataplus.yr_built.apply(str)+\" Price:\"+dataplus.price.apply(str))]\n\nlayout5 = dict(title=\"Grade(+7) - Built Year(+2000) Map\",width=800,height=750,hovermode=\"closest\",mapbox=dict(bearing=0,pitch=0,zoom=9,center=dict(lat=47.5,lon=-122.161),accesstoken=mapbox_access_token))\n\nfig5 = go.Figure(data=mapp,layout=layout5)\n\npy.iplot(fig5)","ed7a5c56":"#call method and fit\nlinear_reg = LinearRegression()\ny = df.price.values.reshape(-1,1)\nx = df.sqft_living.values.reshape(-1,1)\nlinear_reg.fit(x,y)\n\n# if we want to buy a house with 2000 Squarefootage of living space\nlinear_reg.predict([[2000]])","77a87bfd":"#lineare score\n\nX = df[['sqft_living15']]\ny = df.price.values\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y ,test_size=0.3,random_state=1)\n\nmodelLR = LinearRegression()\n\n#Fit\nmodelLR.fit(X_train, y_train)\n\n#Predict\nY_pred = modelLR.predict(X_test)\n\nmodelLR.score(X_test,y_test)","32ef72d2":"plt.figure(figsize=(10,10))\nplt.scatter(x,y,color='blue',label=\"Data\", alpha=.1)\nplt.plot(x,linear_reg.predict(x),color=\"yellow\",label=\"Predicted Regression Line\")\nplt.xlabel(\"Living Space (sqft_living)\", fontsize=15)\nplt.ylabel(\"Price ($)\", fontsize=15)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.legend()\n\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)","ed69c2a2":"new_sal_year =df.sal_year.astype(int)","08c98e7c":"df.drop(columns=['sal_year'],inplace=True)","8da79e0a":"df['sales_year'] = new_sal_year","3fddad99":"df.info()","6c3cf921":"#define the values of columns\nfirst = df[\"price\"][df[\"sales_year\"] == 2014]\nsecond = df[\"price\"][df[\"sales_year\"] == 2015]","7f0a6984":"#vizualisation\nplt.figure(figsize=(10, 7))\nsns.distplot(first, color='crimson')\nplt.title(\"Distribution of House Prices sold in 2014\", y=1.015, fontsize=22)\nplt.xlabel(\"price of house [$]\", labelpad=14)\nplt.ylabel(\"count of occurences\", labelpad=14)\nplt.show()","a52ad679":"#vizualisation\nplt.figure(figsize=(10, 7))\nsns.distplot(second, color='crimson')\nplt.title(\"Distribution of House Prices in 2015\", y=1.015, fontsize=22)\nplt.xlabel(\"price of house [$]\", labelpad=14)\nplt.ylabel(\"count of occurences\", labelpad=14)\nplt.show()","a5d0676f":"#boxplot\nplt.figure(figsize=(9, 5))\nsns.boxplot(first, color='crimson', saturation=0.9)\nplt.title(\"Distribution of House Prices in 2014\", y=1.015)\nplt.xlabel(\"House Prices\", labelpad=14)\nplt.show()","2320e95e":"#boxplot\nplt.figure(figsize=(9, 5))\nsns.boxplot(second, color='crimson', saturation=0.9)\nplt.title(\"Distribution of House Prices in 2015\", y=1.015)\nplt.xlabel(\"House Prices\", labelpad=14);","f3a7f717":"probplot(df[\"price\"], dist=\"norm\", plot=pylab)","d00ae789":"df.sales_year.value_counts()","dc64f07b":"nearsea_observations = len(first)\nfarsea_observations = len(second)\ndegrees_of_freedom = nearsea_observations + farsea_observations - 2\ndegrees_of_freedom\nalpha = 0.05\ntwo_tailed_test_prob_tail = alpha\/2\nt_critical = round(stats.t.ppf(two_tailed_test_prob_tail, degrees_of_freedom), 3)\nprint('point of t critical is: ',t_critical)","029a9554":"\nfirst = df[\"price\"][df[\"sales_year\"] == 2014]\nsecond = df[\"price\"][df[\"sales_year\"] == 2015]\n\n# compare them\nttest_ind(first, second, equal_var=False)","ccf152bf":"# let's look at the means (averages) of each group to see which is larger\nprint(\"Mean price for 2014:\")\nprint(first.mean())\n\nprint(\"Mean price for 2015:\")\nprint(second.mean())\n","7f5f008e":"# plot the house far from seaside\nplt.figure(figsize =(10,10))\nplt.hist(first, alpha=0.5, label='2014')\n# and the house on the seaside\nplt.hist(second, label='2015')\n# and add a legend\nplt.legend(loc='upper right')\n# add a title\nplt.title(\"count of houses sold in 2014 and 2015\")\nplt.show()","1a1d8876":"#select the columns \nx = df.iloc[:,10].values.reshape(-1,1)\ny = df.iloc[:,1].values.reshape(-1,1)\n\n#call method and fit\n\nrf =  RandomForestRegressor(n_estimators=100,random_state=42)\nrf.fit(x,y)\n\nprint('Price prediction at 7.8 point of Grade: ',rf.predict([[7.8]]))\n#normalizing\nx_ = np.arange(min(x),max(x),0.1).reshape(-1,1)\ny_head = rf.predict(x_)\n\n# visualize\nplt.figure(figsize=(10,10))\nplt.scatter(x,y,color=\"red\",alpha=0.03)\nplt.plot(x_,y_head,color=\"green\")\nplt.xlabel(\"grade\")\nplt.ylabel(\"price\")\nplt.show()","5bbcc548":"#drop useless columns\ndf.drop(['id','color'],axis=1,inplace=True)","0bb9d93d":"# 80-train , 20-test\nx = df.values\ny = df[\"grade\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=2698)","e529bf86":"#the shapes\nprint(\"x_train Shape : \", x_train.shape)\nprint(\"X_test Shape  : \", x_test.shape)\nprint(\"y_train Shape : \", y_train.shape)\nprint(\"y_test Shape  : \", y_test.shape)","3da127ca":"#using rf method\nrf = RandomForestClassifier(n_estimators=100, random_state=1)\nrf.fit(x_train, y_train)\npred=rf.predict(x_test)","6859f0f0":"print(\"Accuracy of RandomForestClassifier is \/Train set: \",rf.score(x_train,y_train))\nprint(\"Accuracy of RandomForestClassifier is \/Test set : \",rf.score(x_test,y_test))","7fa90d67":"from sklearn.ensemble import RandomForestRegressor\nrf_model = RandomForestRegressor(n_estimators=10)","0220bfa9":"top5xrf = X_train.head(5)\ntop5yrf = y_train.head(5)","3fad90f5":"rf_model.fit(top5xrf, top5yrf)","cb38df40":"estimator = rf_model.estimators_[5]\nestimator1 = rf_model.estimators_[6]","d6b71a59":"!pip install --upgrade scikit-learn==0.20.3","7c5f8682":"pip install pydotplus","3d55076e":"from sklearn.externals.six import StringIO  \nfrom IPython.display import Image\nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data1 = StringIO()\nexport_graphviz(estimator, out_file=dot_data1,  \n                filled=True, rounded=True,\n                special_characters=True)\ngraph = pydotplus.graph_from_dot_data(dot_data1.getvalue())  \nImage(graph.create_png())","1503bca5":"from sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data3 = StringIO()\nexport_graphviz(estimator1, out_file=dot_data3,  \n                filled=True, rounded=True,\n                special_characters=True)\ngraph = pydotplus.graph_from_dot_data(dot_data3.getvalue())  \nImage(graph.create_png())","ee3a5836":"<a id = '1'><\/a>\n# 1.EDA","ec186309":"H0: avarage price of 2014 != avarage price of 2015 <br>\nH1: avarage price of 2014 = avarage price of 2015","f605a868":"## Map Vizualisation","845dc8c9":"I want to know Relationship between Living Space and Living Space without Garage or Basement.","f15dea5d":"I think the price of houses,which are sold in 2014 and 2015 the same.Let's test it!","54a83a30":"This kernel is my second step to be a Data Scientist.I would like to hear your recommendations .","0be27b45":"## Vizualisations","56f54a86":"## Bathroom Vizualisation","03de3692":"## Grade Vizualisation","4050e7bf":"The results show that;\nWe accept the H0 challenge,thath means the value is in confidence interval.\n","91149554":"I think date column is useless for my operations , but i want to keep the years of houses were sold.I want to create new column, which is sal_year.","9f7ad717":"I want to do prediction of Price vs Living Space(sqft_living)","373ef2c3":"<a id ='4'><\/a>\n## 4.Random Forest","253094bb":"## Condution Vizualisation","4f8f2024":"# Contents\n\nThis dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n\n1. [EDA](#1)\n2. [Linear Regression](#2)\n3. [t-Test](#3)\n4. [Random Forest](#4)","1e28c12e":"## Corelation","f5a7226b":"## View Vizualisation","1a5a0511":"<a id = '3'><\/a>\n# 3.t-Test","9528dfb0":"## Columns of Data\n1. id = Identify number\n1. price = House price in dollar\n1. bedrooms = Count of bedrooms\n1. bathrooms = Count of bathrooms\n1. sqft_living = Living space\n1. sqft_lot = Square footage of house on land\n1. floors= Count of floors\n1. waterfronst = House on the seaside or not (1\/0)\n1. view = View point of house (0 - 4)\n1. condition = Conditions point of house (0 - 5)\n1. grade = Point of house (1 - 13)\n1. sqft_above = Square footage of the above ground\n1. sqft_basement = Square footage of the below ground\n1. yr_built = The year of Hous was build\n1. yr_renovated = The year of Hous was renovate\n1. zipcode = Zipcode of house\n1. lat = Lattitude\n1. long = Longitude\n1. sqft_living15 = Living space in houses,they were sold in 2015\n1. sal_year = The year house was sold\n1. sqft_lot15 = Square footage of house on land,the houses sold in 2015","02fb7aa7":"## Vizualisation - Relationship between Living Space and Living Space without Garage or Basement","951cfb58":"<a id = '2'><\/a>\n# 2.Linear Regression\n","8daa5d4e":"Let's find the accuracy score"}}