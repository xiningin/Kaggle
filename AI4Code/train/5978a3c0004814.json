{"cell_type":{"d71f542a":"code","c870e744":"code","3b511aa0":"code","536005cc":"code","bab34d1e":"code","f00709d3":"code","ce389f74":"code","8877e8ea":"code","d7190bbf":"code","40121519":"markdown","7c1c5061":"markdown","e5f2aeb3":"markdown","f1462338":"markdown","0f5f4559":"markdown","10cc2eea":"markdown","6724a78e":"markdown","91c9acb2":"markdown","f9fff2bb":"markdown","1adbe48b":"markdown","49635968":"markdown","23a5dae8":"markdown"},"source":{"d71f542a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c870e744":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('\/kaggle\/input\/kinematics-motion-data\/Kinematics_Data.csv', encoding='utf-8')\nprint(df.shape)\nprint(df.isnull().any())\nprint(df.dtypes)\ndf.head()","3b511aa0":"df['username'].value_counts()","536005cc":"df.drop(['date', 'time', 'username'], axis=1, inplace=True)\nprint(df.dtypes)\ndf.head()","bab34d1e":"from sklearn.preprocessing import scale\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import ExtraTreesClassifier","f00709d3":"y = df['activity']\nX = df.drop('activity', axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\nX_train = scale(X_train)","ce389f74":"model = ExtraTreesClassifier()\n\nparam_grid = {\n    'n_estimators': [50, 500, 1000, 1500],\n    'min_samples_split': [2],\n    'random_state': [2],\n    'max_depth': [None],\n    'criterion': ['gini']\n}\n\ngs = GridSearchCV(model, param_grid, cv=5)\ngs.fit(X_train, y_train)","8877e8ea":"gs.best_params_","d7190bbf":"accuracy = gs.score(X_test, y_test)\nprint( \"Acuraccy: {}%\".format(round(100*accuracy, 2)) )","40121519":"Now, it's time to split the data into features (```X```) and target (```y```) and then split it into train and test sets.\n\n30% of the dataset will be reservated for the test set. The split process will be stratified with relation to ```y``` in order to keep the proportion of values in the sample.\n\nFinally, training data is also scaled.","7c1c5061":"And finally, the result: the classifier achieved 91.59% accuracy on the test set.","e5f2aeb3":"We can see that there are no missing values and most columns are numerical.\n\nThe non-numerical columns (```date```, ```time``` and ```username``` ) should now be handled or dropped, as scikit-learn models will work with numerical vaues only.\n\nThe purpose here is to build a classification model that tells, based on the values, if the device user was walking, 0, or running, 1, (```activity``` column).\n\nProbably the ```date``` and ```time``` columns won't improve model performance, because there's no data about each day conditions. Therefore, these two columns will be dropped.\n\nAs for the ```username``` column..","f1462338":"And the accuracy score.","0f5f4559":"We should start by importing the necessary modules. \n\nAfter some tests with different classifiers like Logistic Regression, Random Forest, SVC and others, ```ExtraTreesClassifier``` performed best, so that's the only classifier imported.","10cc2eea":"# Data Prep","6724a78e":"# Training","91c9acb2":"Now that all the datathere is left is numerical and relevant for the model, we should be ready for training.","f9fff2bb":"First, import Pandas and Numpy to explore the dataset by looking at it's shape, search for missing values, data types and check the first few rows.","1adbe48b":"Now, we can check the best parameters found.","49635968":"We have data about only one user, so this column isn't necessary and should be dropped.","23a5dae8":"Now, after some tests, these are some of the best parameter values so far. \n\nLet's start the training by applying them to a Grid Search."}}