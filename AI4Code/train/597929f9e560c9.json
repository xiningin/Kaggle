{"cell_type":{"a6cf950b":"code","f049ac58":"code","b4c0f740":"code","466b442e":"code","9217c2ab":"code","30b34a06":"code","54d9141c":"code","a9f3c2c5":"code","41bc175d":"code","09294342":"code","d25dcaf4":"code","b9f52679":"code","cb939d81":"code","bc6d6da8":"code","a712e514":"code","e4a8e025":"code","2642a8a7":"code","e4fefb6c":"code","4daf7ca0":"code","e4b824e6":"code","00b7f911":"code","b1130193":"code","9503262b":"code","3b0575eb":"code","1502ed60":"code","07498d16":"code","957dd087":"code","5a4da275":"code","5386dc72":"code","e629a0b9":"code","2e0aa305":"code","e3965c49":"code","244e8fd1":"code","e1a96c8c":"code","1a0b8b36":"code","fb7e60e3":"code","f3c9c1ee":"code","35737386":"code","bb008739":"code","d22fe0f5":"code","c6f85281":"code","e64b9725":"code","1283c2b0":"code","8ef1b4c7":"code","d49b4c84":"code","ef8cb624":"code","9f4ae3a3":"code","bf8a9d6d":"code","42f55736":"code","52e33e26":"code","f0e82ed3":"code","4ed097b0":"code","6a9318b1":"code","fadc81fb":"code","3094f65b":"code","b58393cf":"code","ca58d1bd":"code","f60150c9":"code","995274a9":"code","b6f6a012":"code","622dc434":"code","0caee239":"code","6c867dc0":"code","3b00cfe0":"code","647f3032":"code","09c43668":"code","cefd7c65":"code","6d42188f":"code","fba6e7ec":"code","b119fd91":"code","6d01a0c6":"code","0c856276":"code","86e601ec":"code","e521a6b0":"code","1d779140":"code","b123ddcf":"code","9009d699":"code","37ad302e":"markdown","da27d2de":"markdown","a26767aa":"markdown","fed29931":"markdown","930da912":"markdown","ffe6c111":"markdown","36ace04d":"markdown","88853459":"markdown","ce505faf":"markdown","bed2783c":"markdown","f42ff379":"markdown","53db14e1":"markdown","a179a2bc":"markdown","180258dd":"markdown","b0dd0bfc":"markdown","72e013cb":"markdown","c19a4e9e":"markdown","0c7bcd94":"markdown","e18a993e":"markdown","e6efad7a":"markdown","038706e9":"markdown","c0762d9c":"markdown","84f53ce3":"markdown","a0d1e6ea":"markdown","8e23f521":"markdown","d66dce8b":"markdown","71356e15":"markdown","6c27750a":"markdown","90abc09d":"markdown","384ae763":"markdown","169edbed":"markdown","7a9f6053":"markdown","7fc50592":"markdown","7b2c59b6":"markdown","423bd30d":"markdown","35c4f8d0":"markdown","1bce5a6e":"markdown","d3a007f6":"markdown","061f5198":"markdown","a3838ecb":"markdown","8907a1a6":"markdown","18fc15cb":"markdown","9594d19c":"markdown","e474c7a5":"markdown","4a15fe6d":"markdown","8ff70471":"markdown","3742d2e6":"markdown","c73c48ef":"markdown","77113cec":"markdown","559ef9e3":"markdown","01068bef":"markdown","72ce1656":"markdown","0c31d5c0":"markdown","1632428e":"markdown","102af2aa":"markdown","5865babc":"markdown","24f5d555":"markdown","4abf0d99":"markdown","283138df":"markdown","719a98fc":"markdown","73a5c20f":"markdown","84af75a9":"markdown","1cd725d1":"markdown","1e300396":"markdown","c153fbcb":"markdown","377c5159":"markdown","cada7ec1":"markdown","a23a4e4b":"markdown","88c69de6":"markdown","b342abbd":"markdown","d8ac5176":"markdown","77f12abf":"markdown","fda2eccf":"markdown","8c06fd5b":"markdown","0ef260e2":"markdown","b1fc377c":"markdown","4d520e97":"markdown","e088eb03":"markdown","b1a08021":"markdown","bbd2b093":"markdown","146cb9e0":"markdown"},"source":{"a6cf950b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nimport pandas_profiling as pp\n\n# models\nfrom sklearn.linear_model import LogisticRegression, Perceptron, RidgeClassifier, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier \nfrom sklearn.ensemble import BaggingClassifier, AdaBoostClassifier, VotingClassifier \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\n# NN models\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras import optimizers\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\n# model tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe, space_eval\n\n# import warnings filter\nfrom warnings import simplefilter\n# ignore all future warnings\nsimplefilter(action='ignore', category=FutureWarning)","f049ac58":"data = pd.read_csv(\"..\/input\/pyms-diabete\/diabete.csv\")","b4c0f740":"data.head(3)","466b442e":"data.info()","9217c2ab":"pp.ProfileReport(data)","30b34a06":"target_name = 'diabete'\ndata_target = data[target_name]\ndata = data.drop([target_name], axis=1)","54d9141c":"train, test, target, target_test = train_test_split(data, data_target, test_size=0.2, random_state=0)","a9f3c2c5":"train.head(3)","41bc175d":"test.head(3)","09294342":"train.info()","d25dcaf4":"test.info()","b9f52679":"#%% split training set to validation set\nXtrain, Xval, Ztrain, Zval = train_test_split(train, target, test_size=0.2, random_state=0)","cb939d81":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(train, target)\nacc_log = round(logreg.score(train, target) * 100, 2)\nacc_log","bc6d6da8":"acc_test_log = round(logreg.score(test, target_test) * 100, 2)\nacc_test_log","a712e514":"coeff_df = pd.DataFrame(train.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","e4a8e025":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(train, target)\nacc_svc = round(svc.score(train, target) * 100, 2)\nacc_svc","2642a8a7":"acc_test_svc = round(svc.score(test, target_test) * 100, 2)\nacc_test_svc","e4fefb6c":"# Linear SVC\n\nlinear_svc = LinearSVC(dual=False)  # dual=False when n_samples > n_features.\nlinear_svc.fit(train, target)\nacc_linear_svc = round(linear_svc.score(train, target) * 100, 2)\nacc_linear_svc","4daf7ca0":"acc_test_linear_svc = round(linear_svc.score(test, target_test) * 100, 2)\nacc_test_linear_svc","e4b824e6":"# k-Nearest Neighbors algorithm\n\nknn = GridSearchCV(estimator=KNeighborsClassifier(), param_grid={'n_neighbors': [2, 3]}, cv=10).fit(train, target)\nacc_knn = round(knn.score(train, target) * 100, 2)\nprint(acc_knn, knn.best_params_)","00b7f911":"acc_test_knn = round(knn.score(test, target_test) * 100, 2)\nacc_test_knn","b1130193":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(train, target)\nacc_gaussian = round(gaussian.score(train, target) * 100, 2)\nacc_gaussian","9503262b":"acc_test_gaussian = round(gaussian.score(test, target_test) * 100, 2)\nacc_test_gaussian","3b0575eb":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(train, target)\nacc_perceptron = round(perceptron.score(train, target) * 100, 2)\nacc_perceptron","1502ed60":"acc_test_perceptron = round(perceptron.score(test, target_test) * 100, 2)\nacc_test_perceptron","07498d16":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(train, target)\nacc_sgd = round(sgd.score(train, target) * 100, 2)\nacc_sgd","957dd087":"acc_test_sgd = round(perceptron.score(test, target_test) * 100, 2)\nacc_test_sgd","5a4da275":"# Decision Tree Classifier\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(train, target)\nacc_decision_tree = round(decision_tree.score(train, target) * 100, 2)\nacc_decision_tree","5386dc72":"acc_test_decision_tree = round(decision_tree.score(test, target_test) * 100, 2)\nacc_test_decision_tree","e629a0b9":"# Random Forest\n\nrandom_forest = GridSearchCV(estimator=RandomForestClassifier(), param_grid={'n_estimators': [100, 300]}, cv=5).fit(train, target)\nrandom_forest.fit(train, target)\nacc_random_forest = round(random_forest.score(train, target) * 100, 2)\nprint(acc_random_forest,random_forest.best_params_)","2e0aa305":"acc_test_random_forest = round(random_forest.score(test, target_test) * 100, 2)\nacc_test_random_forest","e3965c49":"def hyperopt_xgb_score(params):\n    clf = XGBClassifier(**params)\n    current_score = cross_val_score(clf, train, target, cv=10).mean()\n    print(current_score, params)\n    return current_score \n \nspace_xgb = {\n            'learning_rate': hp.quniform('learning_rate', 0, 0.05, 0.0001),\n            'n_estimators': hp.choice('n_estimators', range(100, 1000)),\n            'eta': hp.quniform('eta', 0.025, 0.5, 0.005),\n            'max_depth':  hp.choice('max_depth', np.arange(2, 12, dtype=int)),\n            'min_child_weight': hp.quniform('min_child_weight', 1, 9, 0.025),\n            'subsample': hp.quniform('subsample', 0.5, 1, 0.005),\n            'gamma': hp.quniform('gamma', 0.5, 1, 0.005),\n            'colsample_bytree': hp.quniform('colsample_bytree', 0.5, 1, 0.005),\n            'eval_metric': 'auc',\n            'objective': 'binary:logistic',\n            'booster': 'gbtree',\n            'tree_method': 'exact',\n            'silent': 1,\n            'missing': None\n        }\n \nbest = fmin(fn=hyperopt_xgb_score, space=space_xgb, algo=tpe.suggest, max_evals=10)\nprint('best:')\nprint(best)","244e8fd1":"params = space_eval(space_xgb, best)\nparams","e1a96c8c":"XGB_Classifier = XGBClassifier(**params)\nXGB_Classifier.fit(train, target)\nacc_XGB_Classifier = round(XGB_Classifier.score(train, target) * 100, 2)\nacc_XGB_Classifier","1a0b8b36":"acc_test_XGB_Classifier = round(XGB_Classifier.score(test, target_test) * 100, 2)\nacc_test_XGB_Classifier","fb7e60e3":"fig =  plt.figure(figsize = (15,15))\naxes = fig.add_subplot(111)\nxgb.plot_importance(XGB_Classifier,ax = axes,height =0.5)\nplt.show();\nplt.close()","f3c9c1ee":"def hyperopt_lgb_score(params):\n    clf = LGBMClassifier(**params)\n    current_score = cross_val_score(clf, train, target, cv=10).mean()\n    print(current_score, params)\n    return current_score \n \nspace_lgb = {\n            'learning_rate': hp.quniform('learning_rate', 0, 0.05, 0.0001),\n            'n_estimators': hp.choice('n_estimators', range(100, 1000)),\n            'max_depth':  hp.choice('max_depth', np.arange(2, 12, dtype=int)),\n            'num_leaves': hp.choice('num_leaves', 2*np.arange(2, 2**11, dtype=int)),\n            'min_child_weight': hp.quniform('min_child_weight', 1, 9, 0.025),\n            'colsample_bytree': hp.quniform('colsample_bytree', 0.5, 1, 0.005),\n            'objective': 'binary',\n            'boosting_type': 'gbdt',\n            }\n \nbest = fmin(fn=hyperopt_lgb_score, space=space_lgb, algo=tpe.suggest, max_evals=10)\nprint('best:')\nprint(best)","35737386":"params = space_eval(space_lgb, best)\nparams","bb008739":"LGB_Classifier = LGBMClassifier(**params)\nLGB_Classifier.fit(train, target)\nacc_LGB_Classifier = round(LGB_Classifier.score(train, target) * 100, 2)\nacc_LGB_Classifier","d22fe0f5":"acc_test_LGB_Classifier = round(LGB_Classifier.score(test, target_test) * 100, 2)\nacc_test_LGB_Classifier","c6f85281":"fig =  plt.figure(figsize = (15,15))\naxes = fig.add_subplot(111)\nlgb.plot_importance(LGB_Classifier,ax = axes,height = 0.5)\nplt.show();\nplt.close()","e64b9725":"def hyperopt_gb_score(params):\n    clf = GradientBoostingClassifier(**params)\n    current_score = cross_val_score(clf, train, target, cv=10).mean()\n    print(current_score, params)\n    return current_score \n \nspace_gb = {\n            'n_estimators': hp.choice('n_estimators', range(100, 1000)),\n            'max_depth': hp.choice('max_depth', np.arange(2, 10, dtype=int))            \n        }\n \nbest = fmin(fn=hyperopt_gb_score, space=space_gb, algo=tpe.suggest, max_evals=10)\nprint('best:')\nprint(best)","1283c2b0":"params = space_eval(space_gb, best)\nparams","8ef1b4c7":"# Gradient Boosting Classifier\n\ngradient_boosting = GradientBoostingClassifier(**params)\ngradient_boosting.fit(train, target)\nacc_gradient_boosting = round(gradient_boosting.score(train, target) * 100, 2)\nacc_gradient_boosting","d49b4c84":"acc_test_gradient_boosting = round(gradient_boosting.score(test, target_test) * 100, 2)\nacc_test_gradient_boosting","ef8cb624":"# Ridge Classifier\n\nridge_classifier = RidgeClassifier()\nridge_classifier.fit(train, target)\nacc_ridge_classifier = round(ridge_classifier.score(train, target) * 100, 2)\nacc_ridge_classifier","9f4ae3a3":"acc_test_ridge_classifier = round(ridge_classifier.score(test, target_test) * 100, 2)\nacc_test_ridge_classifier","bf8a9d6d":"# Bagging Classifier\n\nbagging_classifier = BaggingClassifier()\nbagging_classifier.fit(train, target)\nY_pred = bagging_classifier.predict(test).astype(int)\nacc_bagging_classifier = round(bagging_classifier.score(train, target) * 100, 2)\nacc_bagging_classifier","42f55736":"acc_test_bagging_classifier = round(bagging_classifier.score(test, target_test) * 100, 2)\nacc_test_bagging_classifier","52e33e26":"def hyperopt_etc_score(params):\n    clf = ExtraTreesClassifier(**params)\n    current_score = cross_val_score(clf, train, target, cv=10).mean()\n    print(current_score, params)\n    return current_score \n \nspace_etc = {\n            'n_estimators': hp.choice('n_estimators', range(100, 1000)),\n            'max_features': hp.choice('max_features', np.arange(2, 17, dtype=int)),\n            'min_samples_leaf': hp.choice('min_samples_leaf', np.arange(1, 5, dtype=int)),\n            'max_depth':  hp.choice('max_depth', np.arange(2, 12, dtype=int)),\n            'max_features': None # for small number of features\n        }\n \nbest = fmin(fn=hyperopt_etc_score, space=space_etc, algo=tpe.suggest, max_evals=10)\nprint('best:')\nprint(best)","f0e82ed3":"params = space_eval(space_etc, best)\nparams","4ed097b0":"# Extra Trees Classifier\n\nextra_trees_classifier = ExtraTreesClassifier(**params)\nextra_trees_classifier.fit(train, target)\nacc_etc = round(extra_trees_classifier.score(train, target) * 100, 2)\nacc_etc","6a9318b1":"acc_test_etc = round(extra_trees_classifier.score(test, target_test) * 100, 2)\nacc_test_etc","fadc81fb":"def build_ann(optimizer='adam'):\n    \n    # Initializing the ANN\n    ann = Sequential()\n    \n    # Adding the input layer and the first hidden layer of the ANN with dropout\n    ann.add(Dense(units=32, kernel_initializer='glorot_uniform', activation='relu', input_shape=(len(train.columns),)))\n    \n    # Add other layers, it is not necessary to pass the shape because there is a layer before\n    ann.add(Dense(units=64, kernel_initializer='glorot_uniform', activation='relu'))\n    ann.add(Dropout(rate=0.5))\n    ann.add(Dense(units=64, kernel_initializer='glorot_uniform', activation='relu'))\n    ann.add(Dropout(rate=0.5))\n    \n    # Adding the output layer\n    ann.add(Dense(units=1, kernel_initializer='glorot_uniform', activation='sigmoid'))\n    \n    # Compiling the ANN\n    ann.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return ann","3094f65b":"opt = optimizers.Adam(lr=0.001)\nann = build_ann(opt)\n# Training the ANN\nhistory = ann.fit(Xtrain, Ztrain, batch_size=16, epochs=100, validation_data=(Xval, Zval))","b58393cf":"# Predicting the Train set results\nann_prediction = ann.predict(train)\nann_prediction = (ann_prediction > 0.5)*1 # convert probabilities to binary output\n\n# Compute error between predicted data and true response and display it in confusion matrix\nacc_ann1 = round(metrics.accuracy_score(target, ann_prediction) * 100, 2)\nacc_ann1","ca58d1bd":"# Predicting the Test set results\nann_prediction_test = ann.predict(test)\nann_prediction_test = (ann_prediction_test > 0.5)*1 # convert probabilities to binary output\n\n# Compute error between predicted data and true response and display it in confusion matrix\nacc_test_ann1 = round(metrics.accuracy_score(target_test, ann_prediction_test) * 100, 2)\nacc_test_ann1","f60150c9":"# Model\nmodel = Sequential()\nmodel.add(Dense(16, input_dim = train.shape[1], init = 'he_normal', activation = 'relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(64, init = 'he_normal', activation = 'relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(32, init = 'he_normal', activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\nmodel.summary()","995274a9":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","b6f6a012":"es = EarlyStopping(monitor='val_accuracy', patience=20, mode='max')\nhist = model.fit(train, target, batch_size=64, validation_data=(Xval, Zval), \n               epochs=500, verbose=1, callbacks=[es])","622dc434":"plt.plot(hist.history['accuracy'], label='acc')\nplt.plot(hist.history['val_accuracy'], label='val_acc')\n# plt.plot(hist.history['acc'], label='acc')\n# plt.plot(hist.history['val_acc'], label='val_acc')\nplt.ylim((0, 1))\nplt.legend()","0caee239":"# Predicting the Train set results\nnn_prediction = model.predict(train)\nnn_prediction = (nn_prediction > 0.5)*1 # convert probabilities to binary output\n\n# Compute error between predicted data and true response\nacc_ann2 = round(metrics.accuracy_score(target, nn_prediction) * 100, 2)\nacc_ann2","6c867dc0":"# Predicting the Test set results\nnn_prediction_test = model.predict(test)\nnn_prediction_test = (nn_prediction_test > 0.5)*1 # convert probabilities to binary output\n\n# Compute error between predicted data and true response\nacc_test_ann2 = round(metrics.accuracy_score(target_test, nn_prediction_test) * 100, 2)\nacc_test_ann2","3b00cfe0":"def hyperopt_ab_score(params):\n    clf = AdaBoostClassifier(**params)\n    current_score = cross_val_score(clf, train, target, cv=10).mean()\n    print(current_score, params)\n    return current_score \n \nspace_ab = {\n            'n_estimators': hp.choice('n_estimators', range(50, 1000)),\n            'learning_rate': hp.quniform('learning_rate', 0, 0.05, 0.0001)       \n        }\n \nbest = fmin(fn=hyperopt_ab_score, space=space_ab, algo=tpe.suggest, max_evals=10)\nprint('best:')\nprint(best)","647f3032":"params = space_eval(space_ab, best)\nparams","09c43668":"# AdaBoost Classifier\n\nAda_Boost = AdaBoostClassifier(**params)\nAda_Boost.fit(train, target)\nAda_Boost.score(train, target)\nacc_AdaBoost = round(Ada_Boost.score(train, target) * 100, 2)\nacc_AdaBoost","cefd7c65":"acc_test_AdaBoost = round(Ada_Boost.score(test, target_test) * 100, 2)\nacc_test_AdaBoost","6d42188f":"Voting_Classifier_hard = VotingClassifier(estimators=[('lr', logreg), ('rf', random_forest), ('ab', Ada_Boost)], voting='hard')\nfor clf, label in zip([logreg, random_forest, Ada_Boost, Voting_Classifier_hard], \n                      ['Logistic Regression', 'Random Forest', 'AdaBoost Classifier', 'Ensemble']):\n    scores = cross_val_score(clf, train, target, cv=10, scoring='accuracy')\n    print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))","fba6e7ec":"Voting_Classifier_hard.fit(train, target)\nacc_VC_hard = round(Voting_Classifier_hard.score(train, target) * 100, 2)\nacc_VC_hard","b119fd91":"acc_test_VC_hard = round(Voting_Classifier_hard.score(test, target_test) * 100, 2)\nacc_test_VC_hard","6d01a0c6":"eclf = VotingClassifier(estimators=[('lr', logreg), ('rf', random_forest), ('ab', Ada_Boost)], voting='soft')\nparams = {'lr__C': [1.0, 100.0], 'ab__learning_rate': [0.0001, 1]}\nVoting_Classifier_soft = GridSearchCV(estimator=eclf, param_grid=params, cv=5)\nVoting_Classifier_soft.fit(train, target)\nacc_VC_soft = round(Voting_Classifier_soft.score(train, target) * 100, 2)\nacc_VC_soft","0c856276":"acc_test_VC_soft = round(Voting_Classifier_soft.score(test, target_test) * 100, 2)\nacc_test_VC_soft","86e601ec":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', 'Support Vector Machines', 'Linear SVC', 'k-Nearest Neighbors', 'Naive Bayes', \n              'Perceptron', 'Stochastic Gradient Decent', \n              'Decision Tree Classifier', 'Random Forest',  'XGBClassifier', 'LGBMClassifier',\n              'GradientBoostingClassifier', 'RidgeClassifier', 'BaggingClassifier', 'ExtraTreesClassifier', \n              'Neural Network 1', 'Neural Network 2', \n              'VotingClassifier-hard voiting', 'VotingClassifier-soft voting',\n              'AdaBoostClassifier'],\n    \n    'Score_train': [acc_log, acc_svc, acc_linear_svc, acc_knn, acc_gaussian, \n              acc_perceptron, acc_sgd, \n              acc_decision_tree, acc_random_forest, acc_XGB_Classifier, acc_LGB_Classifier,\n              acc_gradient_boosting, acc_ridge_classifier, acc_bagging_classifier, acc_etc, \n              acc_ann1, acc_ann2, \n              acc_VC_hard, acc_VC_soft,\n              acc_AdaBoost],\n    'Score_test': [acc_test_log, acc_test_svc, acc_test_linear_svc, acc_test_knn, acc_test_gaussian, \n              acc_test_perceptron, acc_test_sgd, \n              acc_test_decision_tree, acc_test_random_forest, acc_test_XGB_Classifier, acc_test_LGB_Classifier,\n              acc_test_gradient_boosting, acc_test_ridge_classifier, acc_test_bagging_classifier, acc_test_etc, \n              acc_test_ann1, acc_test_ann2, \n              acc_test_VC_hard, acc_test_VC_soft,\n              acc_test_AdaBoost]\n                    })","e521a6b0":"models.sort_values(by=['Score_train', 'Score_test'], ascending=False)","1d779140":"models.sort_values(by=['Score_test', 'Score_train'], ascending=False)","b123ddcf":"models['Score_diff'] = abs(models['Score_train'] - models['Score_test'])\nmodels.sort_values(by=['Score_diff'], ascending=True)","9009d699":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['Score_train'], label = 'Score_train')\nplt.plot(xx, models['Score_test'], label = 'Score_test')\nplt.legend()\nplt.title('Score of 20 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('Score, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","37ad302e":"I hope you find this kernel useful and enjoyable.","da27d2de":"Thanks to https:\/\/www.kaggle.com\/junheeshin\/titanic-analyze-and-predict-nn","a26767aa":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","fed29931":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\n\nNow we are ready to train a model and predict the required solution. There are 60+ predictive modelling algorithms to choose from. We must understand the type of problem and solution requirement to narrow down to a select few models which we can evaluate. Our problem is a classification and regression problem. We want to identify relationship between output (Survived or not) with other variables or features (Gender, Age, Port...). We are also perfoming a category of machine learning which is called supervised learning as we are training our model with a given dataset. With these two criteria - Supervised Learning plus Classification and Regression, we can narrow down our choice of models to a few. These include:\n\n- Logistic Regression\n- Support Vector Machines and Linear SVC\n- KNN or k-Nearest Neighbors\n- Naive Bayes Classifier or Gaussian Naive Bayes\n- Stochastic Gradient Descent, GradientBoostingClassifier, RidgeClassifier, BaggingClassifier\n- Decision Tree Classifier, Random Forest, XGB Classifier, LGBM Classifier, ExtraTreesClassifier\n- Perceptron, Neural Networks with different archictures (Deep Learning)\n- VotingClassifier (hard or soft voting)","930da912":"Thanks to https:\/\/www.kaggle.com\/kabure\/titanic-eda-model-pipeline-keras-nn","ffe6c111":"## 6. Models evaluation <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","36ace04d":"### 5.11 LGBM Classifier <a class=\"anchor\" id=\"5.11\"><\/a>\n\n[Back to Table of Contents](#0.1)","88853459":"### 5.7 Stochastic Gradient Descent <a class=\"anchor\" id=\"5.7\"><\/a>\n\n[Back to Table of Contents](#0.1)","ce505faf":"![Diabete](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/28\/Main_symptoms_of_diabetes.png)","bed2783c":"Build of the 20 most popular models, the most complex models from them are tuned (optimized)\n\nComparison of the optimal for each type models.","f42ff379":"XGBoost is an ensemble tree method that apply the principle of boosting weak learners (CARTs generally) using the gradient descent architecture. XGBoost improves upon the base Gradient Boosting Machines (GBM) framework through systems optimization and algorithmic enhancements. Reference [Towards Data Science.](https:\/\/towardsdatascience.com\/https-medium-com-vishalmorde-xgboost-algorithm-long-she-may-rein-edd9f99be63d)","53db14e1":"### 5.17 Neural Network 2 <a class=\"anchor\" id=\"5.17\"><\/a>\n\n[Back to Table of Contents](#0.1)","a179a2bc":"This model uses a **Decision Tree** as a predictive model which maps features (tree branches) to conclusions about the target value (tree leaves). Tree models where the target variable can take a finite set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Decision_tree_learning).","180258dd":"We will tuning the hyperparameters of the XGBClassifier model using the HyperOpt and 10-fold crossvalidation","b0dd0bfc":"**Gradient Boosting** builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage n_classes_ regression trees are fit on the negative gradient of the binomial or multinomial deviance loss function. Binary classification is a special case where only a single regression tree is induced. The features are always randomly permuted at each split. Therefore, the best found split may vary, even with the same training data and max_features=n_features, if the improvement of the criterion is identical for several splits enumerated during the search of the best split. To obtain a deterministic behaviour during fitting, random_state has to be fixed. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.GradientBoostingClassifier.html).","72e013cb":"Thanks to https:\/\/www.kaggle.com\/kabure\/titanic-eda-model-pipeline-keras-nn","c19a4e9e":"### 5.5 Naive Bayes <a class=\"anchor\" id=\"5.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","0c7bcd94":"I split data on 20% in the test dataset, the remaining 80% - in the training dataset","e18a993e":"## 5. Tuning models and test for all features <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","e6efad7a":"### 5.15 ExtraTreesClassifier <a class=\"anchor\" id=\"5.15\"><\/a>\n\n[Back to Table of Contents](#0.1)","038706e9":"This kernel is based on the my kernels:\n* [Heart Disease - Comparison of 20 models](https:\/\/www.kaggle.com\/vbmokin\/heart-disease-comparison-of-20-models)\n* [Biomechanical features - 20 popular models](https:\/\/www.kaggle.com\/vbmokin\/biomechanical-features-20-popular-models)\n* [Titanic (0.83253) - Comparison 20 popular models](https:\/\/www.kaggle.com\/vbmokin\/titanic-0-83253-comparison-20-popular-models)","c0762d9c":"In pattern recognition, the **k-Nearest Neighbors algorithm** (or k-NN for short) is a non-parametric method used for classification and regression. A sample is classified by a majority vote of its neighbors, with the sample being assigned to the class most common among its k nearest neighbors (k is a positive integer, typically small). Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm).","84f53ce3":"### 5.13 RidgeClassifier <a class=\"anchor\" id=\"5.13\"><\/a>\n\n[Back to Table of Contents](#0.1)","a0d1e6ea":"### 5.20 VotingClassifier (soft voting) <a class=\"anchor\" id=\"5.20\"><\/a>\n\n[Back to Table of Contents](#0.1)","8e23f521":"### 5.10 XGB Classifier <a class=\"anchor\" id=\"5.10\"><\/a>\n\n[Back to Table of Contents](#0.1)","d66dce8b":"**Support Vector Machines** are supervised learning models with associated learning algorithms that analyze data used for classification and regression analysis. Given a set of training samples, each marked as belonging to one or the other of two categories, an SVM training algorithm builds a model that assigns new test samples to one category or the other, making it a non-probabilistic binary linear classifier. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Support_vector_machine).","71356e15":"### 5.9 Random Forests <a class=\"anchor\" id=\"5.9\"><\/a>\n\n[Back to Table of Contents](#0.1)","6c27750a":"### 5.2 Support Vector Machines <a class=\"anchor\" id=\"5.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","90abc09d":"<a class=\"anchor\" id=\"0.1\"><\/a>\n\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download datasets](#2)\n1. [EDA](#3)\n1. [Preparing to modeling](#4)\n1. [Tuning models and test for all 16 features](#5)\n    -  [Logistic Regression](#5.1)\n    -  [Support Vector Machines](#5.2)\n    -  [Linear SVC](#5.3)\n    -  [k-Nearest Neighbors algorithm with GridSearchCV](#5.4)\n    -  [Naive Bayes](#5.5)\n    -  [Perceptron](#5.6)\n    -  [Stochastic Gradient Descent](#5.7)\n    -  [Decision Tree Classifier](#5.8)\n    -  [Random Forests with GridSearchCV](#5.9)\n    -  [XGB Classifier with HyperOpt](#5.10)\n    -  [LGBM Classifier with HyperOpt](#5.11)\n    -  [GradientBoostingClassifier with HyperOpt](#5.12)\n    -  [RidgeClassifier](#5.13)\n    -  [BaggingClassifier](#5.14)\n    -  [ExtraTreesClassifier with HyperOpt](#5.15)\n    -  [Neural Network 1](#5.16)\n    -  [Neural Network 2](#5.17)\n    -  [AdaBoost Classifier](#5.18)\n    -  [VotingClassifier (hard voting)](#5.19)\n    -  [VotingClassifier (soft voting) with GridSearchCV](#5.20)    \n1. [Models evaluation](#6)\n1. [Conclusion](#7)\n","384ae763":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","169edbed":"## 7. Conclusion <a class=\"anchor\" id=\"7\"><\/a>\n\n[Back to Table of Contents](#0.1)","7a9f6053":"Thanks for the example of ensemling different models from \nhttps:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#Extremely%20Randomized%20Trees","7fc50592":"### 5.4 k-Nearest Neighbors algorithm <a class=\"anchor\" id=\"5.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","7b2c59b6":"We will tuning the hyperparameters of the LGBMClassifier model using the HyperOpt and 10-fold crossvalidation","423bd30d":"### 5.6 Perceptron <a class=\"anchor\" id=\"5.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","35c4f8d0":"### 5.16 Neural Network 1 <a class=\"anchor\" id=\"5.16\"><\/a>\n\n[Back to Table of Contents](#0.1)","1bce5a6e":"We can use Logistic Regression to validate our assumptions and decisions for feature creating and completing goals. This can be done by calculating the coefficient of the features in the decision function.\n\nPositive coefficients increase the log-odds of the response (and thus increase the probability), and negative coefficients decrease the log-odds of the response (and thus decrease the probability).\n\nThe analysis showed that *age* is the most influential feature, and the rest of the features are badly affecte when taken alone. So, you need to simulate all the features together.","d3a007f6":"Your comments and feedback are most welcome.","061f5198":"[Go to Top](#0)","a3838ecb":"Thanks to https:\/\/www.kaggle.com\/kabure\/titanic-eda-model-pipeline-keras-nn","8907a1a6":"Thanks to https:\/\/www.kaggle.com\/nhlr21\/complete-titanic-tutorial-with-ml-nn-ensembling","18fc15cb":"**SVC** is a similar to SVM method. Its also builds on kernel functions but is appropriate for unsupervised learning. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Support-vector_machine#Support-vector_clustering_(SVC).","9594d19c":"Thanks to https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#adaboost","e474c7a5":"## 2. Download datasets <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","4a15fe6d":"**Random Forests** is one of the most popular model. Random forests or random decision forests are an ensemble learning method for classification, regression and other tasks, that operate by constructing a multitude of decision trees (n_estimators= [100, 300]) at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Random_forest).","8ff70471":"### 5.18 AdaBoost Classifier <a class=\"anchor\" id=\"5.18\"><\/a>\n\n[Back to Table of Contents](#0.1)","3742d2e6":"The **Perceptron** is an algorithm for supervised learning of binary classifiers (functions that can decide whether an input, represented by a vector of numbers, belongs to some specific class or not). It is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector. The algorithm allows for online learning, in that it processes elements in the training set one at a time. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Perceptron).","c73c48ef":"Bootstrap aggregating, also called **bagging**, is a machine learning ensemble meta-algorithm designed to improve the stability and accuracy of machine learning algorithms used in statistical classification and regression. It also reduces variance and helps to avoid overfitting. Although it is usually applied to decision tree methods, it can be used with any type of method. Bagging is a special case of the model averaging approach. Bagging leads to \"improvements for unstable procedures\", which include, for example, artificial neural networks, classification and regression trees, and subset selection in linear regression. On the other hand, it can mildly degrade the performance of stable methods such as K-nearest neighbors. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Bootstrap_aggregating).\n\nA **Bagging classifier** is an ensemble meta-estimator that fits base classifiers each on random subsets of the original dataset and then aggregate their individual predictions (either by voting or by averaging) to form a final prediction. Such a meta-estimator can typically be used as a way to reduce the variance of a black-box estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.BaggingClassifier.html).","77113cec":"Thanks for the example of ensemling different models from \nhttps:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#Extremely%20Randomized%20Trees","559ef9e3":"**ExtraTreesClassifier** implements a meta estimator that fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The default values for the parameters controlling the size of the trees (e.g. max_depth, min_samples_leaf, etc.) lead to fully grown and unpruned trees which can potentially be very large on some data sets. To reduce memory consumption, the complexity and size of the trees should be controlled by setting those parameter values. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.ExtraTreesClassifier.html). \n\nIn extremely randomized trees, randomness goes one step further in the way splits are computed. As in random forests, a random subset of candidate features is used, but instead of looking for the most discriminative thresholds, thresholds are drawn at random for each candidate feature and the best of these randomly-generated thresholds is picked as the splitting rule. This usually allows to reduce the variance of the model a bit more, at the expense of a slightly greater increase in bias. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#Extremely%20Randomized%20Trees).","01068bef":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","72ce1656":"In machine learning, **Naive Bayes classifiers** are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features. Naive Bayes classifiers are highly scalable, requiring a number of parameters linear in the number of variables (features) in a learning problem. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Naive_Bayes_classifier).","0c31d5c0":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","1632428e":"### 5.3 Linear SVC <a class=\"anchor\" id=\"5.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","102af2aa":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","5865babc":"Light GBM is a fast, distributed, high-performance gradient boosting framework based on decision tree algorithms. It splits the tree leaf wise with the best fit whereas other boosting algorithms split the tree depth wise or level wise rather than leaf-wise. So when growing on the same leaf in Light GBM, the leaf-wise algorithm can reduce more loss than the level-wise algorithm and hence results in much better accuracy which can rarely be achieved by any of the existing boosting algorithms. Also, it is surprisingly very fast, hence the word \u2018Light\u2019. Reference [Analytics Vidhya](https:\/\/www.analyticsvidhya.com\/blog\/2017\/06\/which-algorithm-takes-the-crown-light-gbm-vs-xgboost\/).","24f5d555":"### 5.8 Decision Tree Classifier <a class=\"anchor\" id=\"5.8\"><\/a>\n\n[Back to Table of Contents](#0.1)","4abf0d99":"- The worst models by criterion *Score_train* are **Perceptron, Neural Network 2, Stochastic Gradient Decent** - these models are worst suited to the training data\n\n- The best models by criterion *Score_test* are **Random Forest, RidgeClassifier, Linear SVC, Logistic Regression** - these models have best learned how to predict test or other data\n\n- The best models by criterion *Score_diff* are **Neural Networks, Perceptron, ExtraTreesClassifier, AdaBoostClassifier, Naive Bayes, Logistic Regression** - these models have the most stable accuracy, that is, the smallest difference between the predictions of both training and test data\n\n- The models are optimal by all criteria: **Random Forest, RidgeClassifier, Linear SVC, Logistic Regression**.","283138df":"**Stochastic gradient descent** (often abbreviated **SGD**) is an iterative method for optimizing an objective function with suitable smoothness properties (e.g. differentiable or subdifferentiable). It can be regarded as a stochastic approximation of gradient descent optimization, since it replaces the actual gradient (calculated from the entire data set) by an estimate thereof (calculated from a randomly selected subset of the data). Especially in big data applications this reduces the computational burden, achieving faster iterations in trade for a slightly lower convergence rate. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Stochastic_gradient_descent).","719a98fc":"This code is based on my kernel \"[FE & EDA with Pandas Profiling](https:\/\/www.kaggle.com\/vbmokin\/fe-eda-with-pandas-profiling)\"","73a5c20f":"**Neural networks** are more complex and more powerful algorithm than standars machine learning, it belongs to deep learning models. To build a neural network use Keras. Keras is a high level API for tensorflow, which is a tensor-manipulation framework made by google. Keras allows you to build neural networks by assembling blocks (which are the layers of neural network). ","84af75a9":"In contrast to majority voting (hard voting), **soft voting** returns the class label as argmax of the **sum of predicted probabilities**.\nSpecific weights can be assigned to each classifier via the weights parameter. When weights are provided, the predicted class probabilities for each classifier are collected, multiplied by the classifier weight, and averaged. The final class label is then derived from the class label with the highest average probability. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#Voting%20Classifier).","1cd725d1":"### 5.1 Logistic Regression <a class=\"anchor\" id=\"5.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","1e300396":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","c153fbcb":"<a class=\"anchor\" id=\"0\"><\/a>\n\n# FE, tuning and comparison of the 20 popular models with Diabete predictions","377c5159":"Thanks to https:\/\/www.kaggle.com\/kabure\/titanic-eda-model-pipeline-keras-nn","cada7ec1":"### 5.12 GradientBoostingClassifier <a class=\"anchor\" id=\"5.12\"><\/a>\n\n[Back to Table of Contents](#0.1)","a23a4e4b":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","88c69de6":"## 1. Import libraries <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","b342abbd":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","d8ac5176":"### 5.19 VotingClassifier (hard voting) <a class=\"anchor\" id=\"5.19\"><\/a>\n\n[Back to Table of Contents](#0.1)","77f12abf":"### 5.14 BaggingClassifier <a class=\"anchor\" id=\"5.14\"><\/a>\n\n[Back to Table of Contents](#0.1)","fda2eccf":"Tikhonov Regularization, colloquially known as **Ridge Regression**, is the most commonly used regression algorithm to approximate an answer for an equation with no unique solution. This type of problem is very common in machine learning tasks, where the \"best\" solution must be chosen using limited data. If a unique solution exists, algorithm will return the optimal value. However, if multiple solutions exist, it may choose any of them. Reference [Brilliant.org](https:\/\/brilliant.org\/wiki\/ridge-regression\/).","8c06fd5b":"## 3. EDA <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","0ef260e2":"The core principle of **AdaBoost** is to fit a sequence of weak learners (i.e., models that are only slightly better than random guessing, such as small decision trees) on repeatedly modified versions of the data. The predictions from all of them are then combined through a weighted majority vote (or sum) to produce the final prediction. The data modifications at each so-called boosting iteration consist of applying N weights to each of the training samples. Initially, those weights are all set to 1\/N, so that the first step simply trains a weak learner on the original data. For each successive iteration, the sample weights are individually modified and the learning algorithm is reapplied to the reweighted data. At a given step, those training examples that were incorrectly predicted by the boosted model induced at the previous step have their weights increased, whereas the weights are decreased for those that were predicted correctly. As iterations proceed, examples that are difficult to predict receive ever-increasing influence. Each subsequent weak learner is thereby forced to concentrate on the examples that are missed by the previous ones in the sequence. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#adaboost).","b1fc377c":"We can now rank our evaluation of all the models to choose the best one for our problem.","4d520e97":"Thanks to https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","e088eb03":"## 4. Preparing to modeling <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","b1a08021":"The VotingClassifier (with **hard voting**) would classify the sample as \u201cclass 1\u201d based on the **majority class label**. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#Voting%20Classifier).","bbd2b093":"The idea behind the **VotingClassifier** is to combine conceptually different machine learning classifiers and use a majority vote (hard vote) or the average predicted probabilities (soft vote) to predict the class labels. Such a classifier can be useful for a set of equally well performing model in order to balance out their individual weaknesses. Reference [sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#Voting%20Classifier).","146cb9e0":"**Logistic Regression** is a useful model to run early in the workflow. Logistic regression measures the relationship between the categorical dependent variable (feature) and one or more independent variables (features) by estimating probabilities using a logistic function, which is the cumulative logistic distribution. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Logistic_regression).\n\nNote the confidence score generated by the model based on our training dataset."}}