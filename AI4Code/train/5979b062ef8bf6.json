{"cell_type":{"c4967809":"code","305c45ab":"code","9f1b2d0c":"code","cc33b8e7":"code","09379cf0":"code","66e1b49e":"code","924af33f":"code","b643ec19":"code","15b8db4c":"code","44b14fad":"code","f9f8d9f1":"code","49998259":"code","9fbdb0cb":"code","41ec5626":"code","1bb9ee52":"code","f6af6e97":"code","db5e40c2":"code","5bc5d68e":"code","26c380c2":"code","8a670bc2":"code","dde66681":"code","43ccfed5":"code","cc5fda77":"code","eae5b2a2":"code","bc197b84":"code","73feecf0":"code","9f3101f1":"code","c37bfca7":"code","d0422221":"code","f043bd4f":"code","69ec34d4":"code","704ea1ef":"code","a3a468dc":"code","9fcc929d":"markdown"},"source":{"c4967809":"import pandas as pd\nimport numpy as np\n\ntrain_info = pd.read_csv(\"..\/input\/zaloai-2019-rawmetadata\/train_info.tsv\", sep='\\t')\ntrain_rank = pd.read_csv(\"..\/input\/zaloai-2019-rawmetadata\/train_rank.csv\")\ntest_info = pd.read_csv(\"..\/input\/zaloai-2019-rawmetadata\/test_info.tsv\", sep='\\t')","305c45ab":"train = train_info.merge(train_rank, on='ID')","9f1b2d0c":"test = test_info","cc33b8e7":"train['composer_track'] = 0\ntrain['artist_track'] = 0\ntrain['composer_total'] = 0\ntrain['artist_total'] = 0\n\nfor i in range(10):\n    train['composer_rank%d'%(i + 1)] = 0\n    train['artist_rank%d'%(i + 1)] = 0","09379cf0":"test['composer_track'] = 0\ntest['artist_track'] = 0\ntest['composer_total'] = 0\ntest['artist_total'] = 0\n\nfor i in range(10):\n    test['composer_rank%d'%(i + 1)] = 0\n    test['artist_rank%d'%(i + 1)] = 0","66e1b49e":"train.head()","924af33f":"test.head()","b643ec19":"composers_columns = ['composer_rank%d'%(rank + 1) for rank in range(10)]\ncomposers_columns.append('composer_track')\ncomposers = pd.DataFrame(columns = composers_columns, dtype = np.int64)\ncomposers.head()","15b8db4c":"composers_dict = {}\nfor i in range(train.shape[0]):\n    composers_id = train.loc[i, 'composers_id'].replace(',', '.')\n    composers_id = composers_id.split('.')\n    for idx in composers_id:\n        id = int(idx)\n        if id not in composers_dict:\n            composers_dict[id] = len(composers_dict);\n            composers.loc[composers_dict[id]] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        composers.loc[composers_dict[id], 'composer_rank%d'%train.loc[i, 'label']] += 1;\n        composers.loc[composers_dict[id], 'composer_track'] += 1;\n\nfor i in range(composers.shape[0]):\n    for j in range(10):\n        composers.loc[i, 'composer_rank%d'%(j + 1)] \/= composers.loc[i, 'composer_track']\n\ncomposers.head()","44b14fad":"for i in range(train.shape[0]):\n    composers_id = train.loc[i, 'composers_id'].replace(',', '.')\n    composers_id = composers_id.split('.')\n    num_composers = len(composers_id)\n    for idx in composers_id:\n        id = int(idx)\n        train.loc[i, 'composer_total'] += composers.loc[composers_dict[id], 'composer_track']\n        for j in range(10):\n            num_track = composers.loc[composers_dict[id], 'composer_rank%d'%(j + 1)]\n            train.loc[i, 'composer_rank%d'%(j + 1)] +=  num_track \/ num_composers\n    train.loc[i, 'composer_track'] = train.loc[i, 'composer_total'] \/ num_composers","f9f8d9f1":"blanks = [composers[label].mean() for label in list(composers)]\nprint(blanks)","49998259":"for i in range(test.shape[0]):\n    composers_id = test.loc[i, 'composers_id'].replace(',', '.')\n    composers_id = composers_id.split('.')\n    num_composers = len(composers_id)\n    for idx in composers_id:\n        id = int(idx)\n        if id not in composers_dict:\n            composers_dict[id] = len(composers_dict);\n            composers.loc[composers_dict[id]] = blanks\n        test.loc[i, 'composer_total'] += composers.loc[composers_dict[id], 'composer_track']\n        for j in range(10):\n            num_track = composers.loc[composers_dict[id], 'composer_rank%d'%(j + 1)]\n            test.loc[i, 'composer_rank%d'%(j + 1)] +=  num_track \/ num_composers\n    test.loc[i, 'composer_track'] = test.loc[i, 'composer_total'] \/ num_composers","9fbdb0cb":"artists_columns = ['artist_rank%d'%(rank + 1) for rank in range(10)]\nartists_columns.append('artist_track')\nartists = pd.DataFrame(columns = artists_columns, dtype = np.int64)\nartists.head()","41ec5626":"artists_dict = {}\nfor i in range(train.shape[0]):\n    artists_id = train.loc[i, 'artist_id'].replace(',', '.')\n    artists_id = artists_id.split('.')\n    for idx in artists_id:\n        id = int(idx)\n        if id not in artists_dict:\n            artists_dict[id] = len(artists_dict);\n            artists.loc[artists_dict[id]] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        artists.loc[artists_dict[id], 'artist_rank%d'%train.loc[i, 'label']] += 1;\n        artists.loc[artists_dict[id], 'artist_track'] += 1;\n\nfor i in range(artists.shape[0]):\n    for j in range(10):\n        artists.loc[i, 'artist_rank%d'%(j + 1)] \/= artists.loc[i, 'artist_track']\n\nartists.head()","1bb9ee52":"for i in range(train.shape[0]):\n    artists_id = train.loc[i, 'artist_id'].replace(',', '.')\n    artists_id = artists_id.split('.')\n    num_artists = len(artists_id)\n    for idx in artists_id:\n        id = int(idx)\n        train.loc[i, 'artist_total'] += artists.loc[artists_dict[id], 'artist_track']\n        for j in range(10):\n            num_track = artists.loc[artists_dict[id], 'artist_rank%d'%(j + 1)]\n            train.loc[i, 'artist_rank%d'%(j + 1)] +=  num_track \/ num_artists\n    train.loc[i, 'artist_track'] += train.loc[i, 'artist_total'] \/ num_artists","f6af6e97":"blanks = [artists[label].mean() for label in list(artists)]\nprint(blanks)","db5e40c2":"for i in range(test.shape[0]):\n    artists_id = test.loc[i, 'artist_id'].replace(',', '.')\n    artists_id = artists_id.split('.')\n    num_artists = len(artists_id)\n    for idx in artists_id:\n        id = int(idx)\n        if id not in artists_dict:\n            artists_dict[id] = len(artists_dict);\n            artists.loc[artists_dict[id]] = blanks\n        test.loc[i, 'artist_total'] += artists.loc[artists_dict[id], 'artist_track']\n        for j in range(10):\n            num_track = artists.loc[artists_dict[id], 'artist_rank%d'%(j + 1)]\n            test.loc[i, 'artist_rank%d'%(j + 1)] +=  num_track \/ num_artists\n    test.loc[i, 'artist_track'] += test.loc[i, 'artist_total'] \/ num_artists","5bc5d68e":"composers.describe()","26c380c2":"artists.describe()","8a670bc2":"train.describe()","dde66681":"test.describe()","43ccfed5":"from matplotlib import pyplot as plt\ncorr = train.corr()\nplt.matshow(corr)\nplt.show()","cc5fda77":"train['year'] = 0\ntrain['month'] = 0\ntrain['day'] = 0\ntrain['week_day'] = 0\ntrain['time'] = 0\ntrain['hour'] = 0\ntrain['minute'] = 0","eae5b2a2":"from datetime import datetime as dt\n\nbegin_year = 2017\n\nfor i in range(train.shape[0]):\n    time = train.loc[i, 'release_time'].split()\n    daytime = list(map(int, time[0].split('-')))\n    hourtime = list(map(int, time[1].split(':')))\n    \n    train.loc[i, 'year'] = daytime[0] - begin_year\n    train.loc[i, 'month'] = daytime[1]\n    train.loc[i, 'day'] = daytime[2]\n    train.loc[i, 'week_day'] = dt(daytime[0], daytime[1], daytime[2]).weekday()\n    \n    train.loc[i, 'hour'] = hourtime[0]\n    train.loc[i, 'minute'] = hourtime[1]\n    train.loc[i, 'time'] = hourtime[0] * 3600 + hourtime[1] * 60 + hourtime[2]","bc197b84":"test['year'] = 0\ntest['month'] = 0\ntest['day'] = 0\ntest['week_day'] = 0\ntest['time'] = 0\ntest['hour'] = 0\ntest['minute'] = 0","73feecf0":"from datetime import datetime as dt\n\nbegin_year = 2017\n\nfor i in range(test.shape[0]):\n    time = test.loc[i, 'release_time'].split()\n    daytime = list(map(int, time[0].split('-')))\n    hourtime = list(map(int, time[1].split(':')))\n    \n    test.loc[i, 'year'] = daytime[0] - begin_year\n    test.loc[i, 'month'] = daytime[1]\n    test.loc[i, 'day'] = daytime[2]\n    test.loc[i, 'week_day'] = dt(daytime[0], daytime[1], daytime[2]).weekday()\n    \n    test.loc[i, 'hour'] = hourtime[0]\n    test.loc[i, 'minute'] = hourtime[1]\n    test.loc[i, 'time'] = hourtime[0] * 3600 + hourtime[1] * 60 + hourtime[2]","9f3101f1":"plt.matshow(train.corr().to_numpy()[:-1, :-1])\nplt.show()","c37bfca7":"train.corr()","d0422221":"trains = train\ntests = test","f043bd4f":"train = trains\ntest = tests\ntrain = train.drop(['composers_name', 'composers_id', 'artist_name', 'artist_id', 'title', 'release_time'], axis = 1)\ntest = test.drop(['composers_name', 'composers_id', 'artist_name', 'artist_id', 'title', 'release_time'], axis = 1)","69ec34d4":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64","704ea1ef":"# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"submission.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(train, filename='train.csv')","a3a468dc":"# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"submission.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(test, filename='test.csv')","9fcc929d":"!pip install -U pandas numpy"}}