{"cell_type":{"ff95b11d":"code","3d878d49":"code","3c328e64":"code","6e948f7e":"code","544431cc":"code","76c2a9b7":"code","782f4a49":"code","ecd4c2ab":"code","0a82ecbe":"code","949bb0b4":"code","cbf10789":"code","df15e8b5":"code","abcb5a1b":"code","aecd3462":"code","1fdb77fa":"code","811d81f0":"code","5fbd48d3":"code","879bb443":"code","9dcffe45":"code","c33c17d6":"code","18aae355":"code","aff6636f":"code","53e28840":"code","7c255115":"code","1e4f0763":"code","bb13f18e":"code","4d5bea73":"code","d6ba306f":"code","7c175020":"code","47366ba8":"code","1953b420":"code","cc6b45a0":"code","1e79fe93":"code","3634d9c9":"code","5f68c339":"code","348b0d7f":"code","417af3ad":"code","4053684d":"code","7a08cb29":"code","c748947a":"code","01be35ac":"code","4fbcd073":"code","ddf6c863":"code","692bd39a":"code","3a406c4c":"code","00c0d918":"code","b5ba57cd":"code","ed5ad7c5":"code","799740ca":"code","a9da9d47":"code","e7f0f7fa":"code","083dd61f":"code","32d10d05":"code","53933d0d":"code","6a34a6ad":"code","dc99748d":"code","a8c19925":"code","01332a0d":"code","bede0613":"code","3f2be3f0":"code","a4ff0bb0":"code","b9fa18c4":"code","b8656ee5":"code","2fc4a5da":"code","3703beec":"code","5f07195d":"code","8edd80ea":"code","59c2c167":"code","a59a044f":"code","57447212":"code","8435355c":"code","b383769e":"code","d066ea5c":"code","c33e187b":"code","3e609b3e":"code","f3f26566":"code","c0f659e9":"code","4453dd41":"code","e4ed9637":"code","c277d21e":"code","dfd96d77":"code","08e95796":"code","f44c74e4":"code","992d5275":"code","32e90acf":"code","13277a03":"code","d7ba8b5a":"code","044ad975":"code","94c4552e":"code","908c07c2":"code","5705e310":"code","5ca57b6c":"code","f03ef1a9":"code","6d80c395":"code","f7ce8c98":"code","90759d54":"code","cde72ab9":"code","4543b2a8":"code","25381228":"code","1f6297f8":"code","7a4e0a4f":"code","6ebf5171":"code","47938f87":"code","38f7290c":"code","1dc64299":"code","159661b1":"code","8298569e":"code","84a26284":"code","577af0c4":"code","4f269371":"code","5612175f":"code","9245d94c":"code","8dddc5d8":"code","b365e2f4":"code","eb5e2ccd":"code","4e46ea03":"code","468ad3f4":"code","3a93b921":"code","49ab00fe":"code","a3b8b64a":"code","cd1ba60d":"code","3d92f574":"code","8a92b989":"code","976f60a9":"code","51061a75":"code","c705b07e":"markdown","718e349c":"markdown","653bcc32":"markdown","1adcc33c":"markdown","ae9ed8c7":"markdown","e05649a7":"markdown","f9beb96a":"markdown","34a31688":"markdown","fc02a67e":"markdown","4ab1cacc":"markdown","1a98babc":"markdown","59b241a7":"markdown","ef903725":"markdown","bc24816d":"markdown","193fa263":"markdown","681306f9":"markdown","c5fa7938":"markdown","d1a66a32":"markdown","ceffdb76":"markdown","92e17b1a":"markdown","5a4bd8ff":"markdown","bbd3ad25":"markdown","f26ce752":"markdown","d5765b40":"markdown","56a6c504":"markdown","90d0b285":"markdown","8c4bf33d":"markdown","59f38d9a":"markdown","fa6fa9a8":"markdown","3a03be91":"markdown","b6552bc0":"markdown","3f7350f7":"markdown","80d8af09":"markdown","048b80a6":"markdown","370f45fa":"markdown","d229ee3d":"markdown","6ab04f7e":"markdown","fe1c26a8":"markdown","c98cb3d2":"markdown"},"source":{"ff95b11d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3d878d49":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom statsmodels.tsa.filters.hp_filter import hpfilter\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import acovf,acf,pacf,pacf_yw,pacf_ols\nfrom pandas.plotting import lag_plot\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nfrom statsmodels.tsa.ar_model import AR,ARResults\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import month_plot,quarter_plot\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tools.eval_measures import rmse\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n# Ignore harmless warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","3c328e64":"df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv',index_col='date',parse_dates=True)\ndf.head()","6e948f7e":"df_kagglemug = df[(df.country=='Finland') & (df.store == 'KaggleMart') & (df['product'] == 'Kaggle Mug')]\ndf_kagglemug = df_kagglemug.drop('row_id',axis=1)\ndel df","544431cc":"df_kagglemug.head()","76c2a9b7":"df_kagglemug.tail()","782f4a49":"df_kagglemug.index","ecd4c2ab":"# Monthly Means\ndf_kagglemug.resample(rule='M').mean().plot(figsize=(16,6))","0a82ecbe":"# Yearly Means\ndf_kagglemug.resample(rule='A').mean()","949bb0b4":"df_kagglemug.resample(rule='A').mean().plot()","cbf10789":"df_kagglemug['num_sold'].resample('A').mean().plot.bar(title='Yearly Mean of number of Kaggle Mug sold');","df15e8b5":"title = 'Monthly Mean of number of Kaggle Mug sold'\ndf_kagglemug['num_sold'].resample('M').max().plot.bar(figsize=(18,6), title=title,color='#1f77b4');","abcb5a1b":"df_kagglemug.shift(1).head()","aecd3462":"df_kagglemug.shift(1).tail()","1fdb77fa":"df_kagglemug['num_sold'].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","811d81f0":"# 7 day rolling mean\ndf_kagglemug.rolling(window=7).mean().head(15)","5fbd48d3":"df_kagglemug['num_sold'].plot(figsize=(16,6)).autoscale(axis='x',tight=True)\ndf_kagglemug.rolling(window=30).mean()['num_sold'].plot();","879bb443":"df_kagglemug['num_sold: 30 Day Mean'] = df_kagglemug['num_sold'].rolling(window=30).mean()\ndf_kagglemug[['num_sold','num_sold: 30 Day Mean']].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","9dcffe45":"# The number of products sold graph for the year 2017\ndf_kagglemug['num_sold']['2017-01-01':'2017-12-31'].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","c33c17d6":"100 * (df_kagglemug.loc['2018-01-01']['num_sold'] - df_kagglemug.loc['2015-01-01']['num_sold']) \/ df_kagglemug.loc['2015-01-01']['num_sold']","18aae355":"df_kagglemug.loc['2018-01-01':]['num_sold'].idxmin()","aff6636f":"df_kagglemug.sort_values(by='num_sold',ascending=False).head(6)","53e28840":"df_kagglemug['Yearly Mean'] = df_kagglemug['num_sold'].rolling(window=12).mean()\ndf_kagglemug[['num_sold','Yearly Mean']].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","7c255115":"num_cycle, num_trend = hpfilter(df_kagglemug['num_sold'], lamb=1600)","1e4f0763":"df_kagglemug['trend'] = num_trend\ndf_kagglemug['cycle'] = num_cycle","bb13f18e":"df_kagglemug[['trend','num_sold']].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","4d5bea73":"df_kagglemug[['trend','num_sold']]['2018-01-01':].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","d6ba306f":"result = seasonal_decompose(df_kagglemug['num_sold'], model='multiplicative')  \nresult.plot();","7c175020":"df_kagglemug['6-month-SMA'] = df_kagglemug['num_sold'].rolling(window=6).mean()\ndf_kagglemug['12-month-SMA'] = df_kagglemug['num_sold'].rolling(window=12).mean()","47366ba8":"df_kagglemug.head(15)","1953b420":"df_kagglemug[['num_sold','6-month-SMA','12-month-SMA']].plot(figsize=(16,6))","cc6b45a0":"df_kagglemug['EWMA12'] = df_kagglemug['num_sold'].ewm(span=12,adjust=False).mean()","1e79fe93":"df_kagglemug[['num_sold','EWMA12']].plot(figsize=(16,6))","3634d9c9":"df_kagglemug[['num_sold','EWMA12','12-month-SMA']].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","5f68c339":"# since the data is daily hence we set the frequency to 'D'\ndf_kagglemug.index.freq = 'D'\ndf_kagglemug.index","348b0d7f":"span = 12\nalpha = 2\/(span+1)\n\ndf_kagglemug['EWMA12'] = df_kagglemug['num_sold'].ewm(alpha=alpha,adjust=False).mean()\ndf_kagglemug['SES12']=SimpleExpSmoothing(df_kagglemug['num_sold']).fit(smoothing_level=alpha,optimized=False).fittedvalues.shift(-1)\ndf_kagglemug.head()","417af3ad":"df_kagglemug['DESadd12'] = ExponentialSmoothing(df_kagglemug['num_sold'], trend='add').fit().fittedvalues.shift(-1)\ndf_kagglemug.head()","4053684d":"df_kagglemug[['num_sold','EWMA12','DESadd12']].iloc[:24].plot(figsize=(18,6)).autoscale(axis='x',tight=True);","7a08cb29":"df_kagglemug['DESmul12'] = ExponentialSmoothing(df_kagglemug['num_sold'], trend='mul').fit().fittedvalues.shift(-1)\ndf_kagglemug.head()","c748947a":"df_kagglemug.tail()","01be35ac":"df_kagglemug[['num_sold','DESadd12']].iloc[:24].plot(figsize=(18,6)).autoscale(axis='x',tight=True);","4fbcd073":"df_kagglemug['TESadd12'] = ExponentialSmoothing(df_kagglemug['num_sold'],trend='add',seasonal='add',seasonal_periods=12).fit().fittedvalues\ndf_kagglemug.head()","ddf6c863":"df_kagglemug['TESmul12'] = ExponentialSmoothing(df_kagglemug['num_sold'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues\ndf_kagglemug.head()","692bd39a":"df_kagglemug[['num_sold','TESadd12']].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","3a406c4c":"df_kagglemug[['num_sold','DESadd12']].iloc[:24].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","00c0d918":"df_kagglemug[['num_sold','TESadd12']].iloc[:24].plot(figsize=(16,6)).autoscale(axis='x',tight=True);","b5ba57cd":"lag_plot(df_kagglemug['num_sold']);","ed5ad7c5":"# 20 lags\nfig, ax = plt.subplots(figsize=(12,5))\nplot_acf(df_kagglemug[[\"num_sold\"]],title=\"lag\",lags=20,ax=ax);","799740ca":"# 40 lags\nfig, ax = plt.subplots(figsize=(12,5))\nplot_acf(df_kagglemug[[\"num_sold\"]],title=\"lag\",lags=40,ax=ax);","a9da9d47":"lags=20\nfig, ax = plt.subplots(figsize=(12,5))\nplot_pacf(df_kagglemug['num_sold'].dropna(),title=\"lags\",lags=np.arange(lags),ax=ax); ","e7f0f7fa":"lags=40\nfig, ax = plt.subplots(figsize=(12,5))\nplot_pacf(df_kagglemug['num_sold'].dropna(),title=\"lags\",lags=np.arange(lags),ax=ax); ","083dd61f":"from statsmodels.tsa.statespace.tools import diff\n\ndf_kagglemug['d1'] = diff(df_kagglemug['num_sold'],k_diff=1)\ndf_kagglemug['d1'].plot(figsize=(12,5));","32d10d05":"lags=40\nfig, ax = plt.subplots(figsize=(12,5))\nplot_pacf(df_kagglemug['d1'].dropna(),title=\"lags\",lags=np.arange(lags),ax=ax); ","53933d0d":"train_data = df_kagglemug['2015-01-01':'2017-12-31']\ntest_data = df_kagglemug['2018-01-01':'2018-12-31']","6a34a6ad":"train_data.shape,test_data.shape","dc99748d":"model = AR(train_data['num_sold'])\nAR_model = model.fit(method='mle')","a8c19925":"print(AR_model.k_ar) # lags","01332a0d":"print(AR_model.params)","bede0613":"start=len(train_data)\nend=len(train_data)+len(test_data)-1\npredictions = AR_model.predict(start=start, end=end, dynamic=False).rename('AR Predictions')\npredictions","3f2be3f0":"# compare predictions and actual values\nfor idx in range(10):\n    print(\"predicted values: \",round(predictions[idx],2),\"----------\", \"actual values: \",test_data['num_sold'][idx])","a4ff0bb0":"test_data['num_sold'].plot(legend=True)\npredictions.plot(legend=True,figsize=(16,6));","b9fa18c4":" mean_squared_error(test_data['num_sold'], predictions)","b8656ee5":"AR_model.aic # AIC value","2fc4a5da":"adfTest = adfuller(df_kagglemug['num_sold'],autolag='AIC')\nadfTest","3703beec":"adfTest[0:4]","5f07195d":"print('Augmented Dickey-Fuller Test')\n\nadfTestValues = pd.Series(adfTest[0:4],index=['ADF test statistic','p-value','lags','observations'])\n\nfor key,value in adfTest[4].items():\n    adfTestValues[f'critical value ({key})']=value\nprint(adfTestValues)","8edd80ea":"\nmonth_plot(df_kagglemug['num_sold'].resample(rule='M').mean());","59c2c167":"\nquarter_plot(df_kagglemug['num_sold'].resample(rule='Q').mean());","a59a044f":"!pip install pmdarima","57447212":"import pmdarima","8435355c":"from pmdarima import auto_arima\n","b383769e":"stepwise_fit = auto_arima(df_kagglemug['num_sold'], start_p=0, start_q=0,\n                          max_p=2, max_q=2, m=12,\n                          seasonal=False,\n                          d=None, trace=True,\n                          error_action='ignore',   \n                          suppress_warnings=True,  \n                          stepwise=True)           \n\nstepwise_fit.summary()","d066ea5c":"model = ARIMA(train_data[\"num_sold\"],order=(1,1,2))\nresults = model.fit()\nresults.summary()","c33e187b":"start=len(train_data)\nend=len(train_data)+len(test_data)-1\npredictions = results.predict(start=start, end=end, dynamic=False, typ='levels').rename('ARIMA Predictions')","3e609b3e":"# compare predictions and actual values\nfor idx in range(10):\n    print(\"predicted values: \",round(predictions[idx],2),\"----------\", \"actual values: \",test_data['num_sold'][idx])","f3f26566":"ax = test_data['num_sold'].plot(legend=True,figsize=(16,6),title=\"actual vs predictions\")\npredictions.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=\" \", ylabel=\"numbers sold\")","c0f659e9":"mean_squared_error(test_data['num_sold'], predictions)\n","4453dd41":"\nrmse(test_data['num_sold'], predictions)","e4ed9637":"model = ARIMA(df_kagglemug['num_sold'],order=(1,1,2))\nresults = model.fit()\nforecast_values = results.predict(len(df_kagglemug),len(df_kagglemug)+365-1,typ='levels').rename('ARIMA Forecast')","c277d21e":"forecast_values","dfd96d77":"ax = df_kagglemug['num_sold'].plot(legend=True,figsize=(16,6),title=\" \")\nforecast_values.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=\" \", ylabel=\"forecast value\")","08e95796":"from pylab import rcParams\nrcParams['figure.figsize'] = 18, 8\n\ndecomposition = sm.tsa.seasonal_decompose(df_kagglemug[\"num_sold\"], model='additive')\nfig = decomposition.plot()\nplt.show()","f44c74e4":"auto_arima(df_kagglemug[\"num_sold\"],seasonal=True,m=12).summary() # season set to true and value of m set to 12","992d5275":"model = SARIMAX(train_data['num_sold'],order=(3,1,3),seasonal_order=(1,0,1,12))\nresults = model.fit()\nresults.summary()","32e90acf":"# Checking diagnostic plots\nresults.plot_diagnostics(figsize=(10, 10))\nplt.show()","13277a03":"start=len(train_data)\nend=len(train_data)+len(test_data)-1\npredictions = results.predict(start=start, end=end, dynamic=False, typ='levels').rename('Predictions')","d7ba8b5a":"# compare predictions and actual values\nfor idx in range(10):\n    print(\"predicted values: \",round(predictions[idx],2),\"----------\", \"actual values: \",test_data['num_sold'][idx])","044ad975":"ax = test_data['num_sold'].plot(legend=True,figsize=(16,6),title=\"actual vs predictions\")\npredictions.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=\" \", ylabel=\"numbers sold\")","94c4552e":"mean_squared_error(test_data['num_sold'], predictions)","908c07c2":"rmse(test_data['num_sold'], predictions)","5705e310":"model = SARIMAX(df_kagglemug['num_sold'],order=(3,1,3),seasonal_order=(1,0,1,12))\nresults = model.fit()\nforecast_values = results.predict(len(df_kagglemug),len(df_kagglemug)+365-1,typ='levels').rename('Forecast')","5ca57b6c":"forecast_values","f03ef1a9":"ax = df_kagglemug['num_sold'].plot(legend=True,figsize=(16,6),title=\" \")\nforecast_values.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=\" \", ylabel=\"forecast value\")","6d80c395":"model = SARIMAX(train_data['num_sold'],order=(3,1,3),seasonal_order=(1,0,2,12))\nresults = model.fit()\nresults.summary()","f7ce8c98":"# Checking diagnostic plots\nresults.plot_diagnostics(figsize=(10, 10))\nplt.show()","90759d54":"start=len(train_data)\nend=len(train_data)+len(test_data)-1\npredictions = results.predict(start=start, end=end, dynamic=False, typ='levels').rename('Predictions')","cde72ab9":"# compare predictions and actual values\nfor idx in range(10):\n    print(\"predicted values: \",round(predictions[idx],2),\"----------\", \"actual values: \",test_data['num_sold'][idx])","4543b2a8":"ax = test_data['num_sold'].plot(legend=True,figsize=(16,6),title=\"actual vs predictions\")\npredictions.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=\" \", ylabel=\"numbers sold\")","25381228":"mean_squared_error(test_data['num_sold'], predictions)","1f6297f8":"rmse(test_data['num_sold'], predictions)","7a4e0a4f":"model = SARIMAX(df_kagglemug['num_sold'],order=(3,1,3),seasonal_order=(1,0,2,12))\nresults = model.fit()\nforecast_values = results.predict(len(df_kagglemug),len(df_kagglemug)+365-1,typ='levels').rename('Forecast')","6ebf5171":"ax = df_kagglemug['num_sold'].plot(legend=True,figsize=(16,6),title=\" \")\nforecast_values.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=\" \", ylabel=\"forecast value\")","47938f87":"# Weekly Means\ndf_kagglemug[\"num_sold\"].resample(rule='W').mean().plot(figsize=(16,6))","38f7290c":"scaler = MinMaxScaler()","1dc64299":"train_data = df_kagglemug['2015-01-01':'2017-12-31'][[\"num_sold\"]]\ntest_data = df_kagglemug['2018-01-01':'2018-12-31'][[\"num_sold\"]]","159661b1":"scaler.fit(train_data)","8298569e":"scaled_train = scaler.transform(train_data)\nscaled_test = scaler.transform(test_data)","84a26284":"scaled_train","577af0c4":"# define generator\nn_input = 2 # looking into 2 time steps back to predict at time t\nn_features = 1\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)","4f269371":"len(scaled_train)","5612175f":"len(generator) # n_input = 2","9245d94c":"# How the batch looks now?\nX,y = generator[0]","8dddc5d8":"X.flatten(),y","b365e2f4":"# looking into 7 timesteps back to predict at time t\nn_input = 7\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)","eb5e2ccd":"# How the batch looks now?\nX,y = generator[0]","4e46ea03":"X.flatten(),y","468ad3f4":"# define model\nmodel = Sequential()\nmodel.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(n_input, n_features)))\nmodel.add(LSTM(50,  activation='relu',return_sequences=False))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')","3a93b921":"model.summary()","49ab00fe":"# fit model\nmodel.fit_generator(generator,epochs=30)","a3b8b64a":"model.history.history.keys()","cd1ba60d":"loss_per_epoch = model.history.history['loss']\nplt.plot(range(len(loss_per_epoch)),loss_per_epoch)","3d92f574":"test_ds = TimeseriesGenerator(scaled_test, scaled_test, length=n_input, batch_size=1)","8a92b989":"\nmodel.evaluate(test_ds)","976f60a9":"predictions = model.predict(test_ds)","51061a75":"labels = []\n \nfor batch in test_ds:\n    labels.append(batch[1][0][0])\ndays = np.arange(0, predictions.shape[0])\nplt.plot(days, labels)\nplt.plot(days, predictions[:,0], color='green')","c705b07e":"# Error, Trend and Seasonality models (ETS)","718e349c":"#### pmdarima to determine ARIMA orders","653bcc32":"# Test for Stationarity","1adcc33c":"#### The partial autocorrelation function is similar to the ACF except that it displays only the correlation between two observations that the shorter lags between those observations do not explain. ","ae9ed8c7":"#### A time series is stationary if the mean and variance are fixed no matter where we take the observations. A time series that shows seasonality is not stationary","e05649a7":"# LSTM model","f9beb96a":"#### ARIMA --> AR is the Auto Regressive. MA is the moving average. I is the differencing component to make the dataset stationary.","34a31688":"#### The Normal Q-Q plot shows that the ordered distribution of residuals follows the distribution similar to normal distribution","fc02a67e":"#### Autocorrelation is the correlation between two values in a time series. In other words, the time series data correlate with themselves. The number of intervals between the two observations is the lag. For example, the lag between the current and previous observation is one day in this dataset.\n#### The autocorrelation function (ACF) assesses the correlation between observations in a time series for a set of lags.\n#### In an ACF plot, each bar represents the size and direction of the correlation. Bars that extend across the red line are statistically significant.","4ab1cacc":"#### For {Finland,KaggleMart,Kaggle Mug}, a time series dataset that we will use to understand various timeseries related analysis","1a98babc":"#### Resampling rule 'A' takes all of the data points in a given year, applies the aggregation function like mean.\n#### Resampling rule 'M' applies to month.","59b241a7":"#### The input to LSTM model is [samples, timesteps, features]\n#### timesteps = 7 that is we look back 7 days to predict on the 8th day\n#### univariate time series hence features = 1\n#### TimeseriesGenerator creates the dataset for training the LSTM model.","ef903725":"# AR model","bc24816d":"#### Trend and Cycle","193fa263":"# Seasonal Autoregressive Integrated Moving Averages","681306f9":"#### obtain the predictions","c5fa7938":"#### with a p value of 0.2 we fail to reject the null hypothesis. Hence, the time series is not stationary.","d1a66a32":"# Simple moving average","ceffdb76":"#### Retrain the model on the full data, and forecast the future","92e17b1a":"#### Partial autocorrelations work best with stationary data","5a4bd8ff":"#### Kaggle Mug selling numbers increased over the years.","bbd3ad25":"#### What 6 months have the highest value?","f26ce752":"#### Triple Exponential Smoothing does a poorer job of fitting than Double Exponential Smoothing","d5765b40":"# Autocorrelation and Partial Autocorrelation function","56a6c504":"#### Rolling","90d0b285":"#### Reading https:\/\/statisticsbyjim.com\/time-series\/autocorrelation-partial-autocorrelation\/","8c4bf33d":"# ARIMA and AUTO ARIMA model","59f38d9a":"#### non-stationary data, as there are a large number of lags before ACF values drop off.","fa6fa9a8":"#### Timeshifting\n#### .shift() forward\n#### This method shifts the entire date index a given number of rows","3a03be91":"#### Fit an ARIMA (1,1,2) model","b6552bc0":"#### What was the percent increase in value from Jan 2015 to Jan 2018?","3f7350f7":"## Augmented Dickey-Fuller Test\n#### H0 the null hypothesis that the time series is non stationary. H1 the alternate hypothesis is that the time series is stationary","80d8af09":"#### Resampling","048b80a6":"#### Double Exponential Smoothing is a much better representation of the time series data","370f45fa":"#### applying differencing to make the data stationary","d229ee3d":"# Time Series Analysis with statsmodel","6ab04f7e":"#### What is the month with the least value in 2018?","fe1c26a8":"# Exponentially weighted moving average","c98cb3d2":"#### The plot displays strong autocorrelation"}}