{"cell_type":{"673d8b74":"code","3c764a0e":"code","1d2223fb":"code","3602ed11":"code","550d548a":"code","b40f8ce1":"code","7f784fff":"code","617126aa":"code","be8d6b2d":"code","7f0e266e":"code","1ab23963":"code","88f543f4":"code","286496c6":"code","73bbba25":"code","c6b8dded":"code","db86fc54":"code","bb621324":"code","5143d896":"code","0e959a5d":"code","be9d8262":"code","05eb1458":"code","21286d6f":"code","6a157535":"markdown","138f27fe":"markdown","85611949":"markdown","807b27e2":"markdown","ccc21ec4":"markdown","00d083ba":"markdown","da88d9fc":"markdown","1b9e5376":"markdown","b880b3c2":"markdown","635407c3":"markdown","b727d7e8":"markdown","7182b4fb":"markdown","0787dc8b":"markdown","ab5373a2":"markdown","b9792367":"markdown","a917db82":"markdown","17c8634a":"markdown","e7aa1b1e":"markdown"},"source":{"673d8b74":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndata = pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')","3c764a0e":"data.head()","1d2223fb":"data.info()","3602ed11":"data.describe()","550d548a":"sns.countplot(x = data.Outcome)\nplt.show()","b40f8ce1":"sns.clustermap(data.corr(), annot = True, fmt = '.2f')\nplt.show()","7f784fff":"sns.pairplot(data, \n             hue = 'Outcome',\n             kind = 'scatter',\n             markers = '+')\nplt.show()","617126aa":"y = data['Outcome']\nX = data.drop('Outcome', axis = 1)\ncols = X.columns\nss = StandardScaler()\n\nX_scaled = ss.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled, columns = cols)\n\ndummy_df = pd.concat([X_scaled,y],axis =1)\ndummy_df.head()","be8d6b2d":"data_melted = pd.melt(dummy_df,\n                      id_vars = 'Outcome')\n\ndata_melted.head()","7f0e266e":"sns.boxplot(x = data_melted['variable'],\n            y = data_melted['value'],\n            hue = data_melted['Outcome'])\n\nplt.xticks(rotation = 90)\nplt.show()","1ab23963":"#Parameters\n\nthreshold = 1.5\nrandom_state = 35\ntest_size = 0.2\nn_neighbors = 3","88f543f4":"print(data.shape)","286496c6":"# Outlier removal\n\nfor i in data.describe().iloc[:,:-1]:\n  Q1 = data.describe().loc['25%', i ]\n  Q3 = data.describe().loc['75%', i]\n  IQR = Q3-Q1\n\n  Bottom_limit = Q1-threshold*IQR\n  Upper_limit = Q3+threshold*IQR\n\n  filter = (data[i] > Bottom_limit) & (data[i] < Upper_limit)\n  data = data[filter] \n\n","73bbba25":"print(data.shape)","c6b8dded":"y = data['Outcome']\nX = data.drop('Outcome', axis = 1)","db86fc54":"global_train_scores = []\nglobal_test_scores = []\n\nrandom_states = [42,43,44]\n\nfor j in random_states:\n  train_scores = []\n  test_scores = []\n\n\n  for i in range (1,20):\n\n   #Randomly Pick the Data for couple times (like Bootstrap Sampling)\n\n\n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = test_size,\n                                                    random_state = j,\n                                                    stratify = y)\n    \n    #Feature Scaling\n    ss = StandardScaler()\n    X_train = ss.fit_transform(X_train)\n    X_test = ss.transform(X_test)\n\n\n    knn_model = KNeighborsClassifier(n_neighbors = i)\n    knn_model.fit(X_train,y_train)\n\n    train_pred = knn_model.predict(X_train)\n    test_pred = knn_model.predict(X_test)\n\n    train_scores.append(accuracy_score(y_train, train_pred))\n    test_scores.append(accuracy_score(y_test, test_pred))\n\n    \n\n  global_train_scores.append(train_scores)\n  global_test_scores.append(test_scores)\n  \n\n\n\n","bb621324":"global_train_scores = np.array(global_train_scores)\n\n\navg_score = []\nfor i in range(global_train_scores.shape[1]):\n  avg_score.append(global_train_scores[:,i].mean())\n\nneighbor_scores = pd.DataFrame()\nneighbor_scores['Neighbors'] = list(range(1,20))\nneighbor_scores['Scores'] = avg_score\n\n\nplt.plot(neighbor_scores['Neighbors'],\n        neighbor_scores['Scores'],\n         linewidth = 3,\n         color = 'green'\n             )\n\nplt.title('Traning Accuracy for Number of Different Neighbors')\nplt.xlabel(\"Number of Neighbors\")\nplt.ylabel(\"Accuracy\")\nplt.show()\n","5143d896":"avg_score = []\nglobal_test_scores = np.array(global_test_scores)\n\nfor i in range(global_test_scores.shape[1]):\n  avg_score.append(global_test_scores[:,i].mean())\n\nrnd_neighbor_scores = pd.DataFrame()\nrnd_neighbor_scores['Neighbors'] = list(range(1,20))\nrnd_neighbor_scores['Scores'] = avg_score\n\n\nplt.plot(rnd_neighbor_scores['Neighbors'],\n        rnd_neighbor_scores['Scores'],\n         linewidth = 3\n             )\nplt.title('Test Accuracy for Number of Different Neighbors')\nplt.xlabel(\"Number of Neighbors\")\nplt.ylabel(\"Accuracy\")\nplt.show()\n","0e959a5d":"random_states = [42,43,44]\ntrain_scores = []\ntest_scores = []\n\nfor j in random_states:\n\n\n  X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = test_size,\n                                                  random_state = j,\n                                                  stratify = y)\n  ss = StandardScaler()\n  X_train = ss.fit_transform(X_train)\n  X_test = ss.transform(X_test)\n\n  rf = RandomForestClassifier()\n  rf.fit(X_train, y_train)\n  train_pred = rf.predict(X_train)\n  test_pred = rf.predict(X_test)\n  train_scores.append(accuracy_score(y_train, train_pred))\n  test_scores.append(accuracy_score(y_test, test_pred))\n\nprint(f'Average Accuracy in Training Set for RandomForest Model: {np.mean(train_scores)}')\nprint(f'Average Accuracy in Test Set for RandomForest Model: {np.mean(test_scores)}')","be9d8262":"random_states = [42,43,44]\ntrain_scores = []\ntest_scores = []\n\nfor j in random_states:\n\n\n  X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = test_size,\n                                                  random_state = j,\n                                                  stratify = y)\n  ss = StandardScaler()\n  X_train = ss.fit_transform(X_train)\n  X_test = ss.transform(X_test)\n  rf = RandomForestClassifier(max_depth = 3,\n                              min_samples_split = 3,\n                              max_features = 8,\n                              n_estimators = 110,\n                              random_state = 42 \n                              )\n  rf.fit(X_train, y_train)\n  train_pred = rf.predict(X_train)\n  test_pred = rf.predict(X_test)\n  train_scores.append(accuracy_score(y_train, train_pred))\n  test_scores.append(accuracy_score(y_test, test_pred))\n\nprint(f'Average Accuracy in Training Set for RandomForest Model: {np.mean(train_scores)}')\nprint(f'Average Accuracy in Test Set for RandomForest Model: {np.mean(test_scores)}')","05eb1458":"random_states = [42,43,44]\ntrain_scores = []\ntest_scores = []\n\nfor j in random_states:\n\n  \n\n  X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = test_size,\n                                                  random_state = j,\n                                                  stratify = y)\n  X_train = ss.fit_transform(X_train)\n  X_test = ss.fit_transform(X_test)\n\n  log_model = LogisticRegression()\n  log_model.fit(X_train, y_train)\n  train_pred = log_model.predict(X_train)\n  test_pred = log_model.predict(X_test)\n  train_scores.append(accuracy_score(y_train, train_pred))\n  test_scores.append(accuracy_score(y_test, test_pred))\n\nprint(f'Average Accuracy in Training Set for Logistic Regression Model: {np.mean(train_scores)}')\nprint(f'Average Accuracy in Test Set for Logistic Regression Model: {np.mean(test_scores)}')\n","21286d6f":"vote = VotingClassifier(estimators = [(\"log_model\",LogisticRegression(random_state = 42)),\n                                      (\"RandomForest\", RandomForestClassifier(max_depth = 3,\n                              min_samples_split = 3,\n                              max_features = 8,\n                              n_estimators = 110,\n                              random_state = 42 \n                              )),\n                                      (\"knn_model\", KNeighborsClassifier(12))])\nvote.fit(X_train,y_train)\n\n\nprint(f\"Combined Accuracy Score: {accuracy_score(y_test,vote.predict(X_test))}\")\n                        \n\n\n                                       ","6a157535":"<a id='4'><\/a>\n## Prediction with KNN Model","138f27fe":"<a id='7'><\/a>\n## Combining the Outputs\n\nThe idea is by combining several models, one can obtain better results like in RandomForest. Let's try that!","85611949":"<a id='1'><\/a>\n## Introduction\n\nDiabetes is a chronic disease that occurs either when the pancreas does not produce enough insulin or when the body cannot effectively use the insulin it produces. Insulin is a hormone that regulates blood sugar. Hyperglycaemia, or raised blood sugar, is a common effect of uncontrolled diabetes and over time leads to serious damage to many of the body's systems, especially the nerves and blood vessels.\n\n**Prevention**\n\nSimple lifestyle measures have been shown to be effective in preventing or delaying the onset of type 2 diabetes. To help prevent type 2 diabetes and its complications, people should:\n\nAchieve and maintain a healthy body weight.\n\nBe physically active \u2013 doing at least 30 minutes of regular, moderate-intensity activity on most days. More activity is required for weight control.\n\nEat a healthy diet, avoiding sugar and saturated fats; and\navoid tobacco use \u2013 smoking increases the risk of diabetes and cardiovascular disease.[[1]](https:\/\/www.who.int\/news-room\/fact-sheets\/detail\/diabetes)\n\nIn this dataset we will try to see how much these parameters affect  diabetes and develop a model predicting whether one has diabetes or not.\n","807b27e2":"Thanks...","ccc21ec4":"<a id='6'><\/a>\n## Prediction with Logistic Regression","00d083ba":"<a id='5'><\/a>\n## Prediction with RandomForest","da88d9fc":"<a id='3'><\/a>\n## Data Preprocessing","1b9e5376":"We also have some outliers in data.","b880b3c2":"In training set, best number of neighbors seems to be 1 however this shouldn't confuse us. We chose 1 for k value which is very small so overfitting occured. It can get great results in training set ; however in test set this probably won't happen.\n\n**A Useful heuristic for KNN algorithm:** If k is low, the model we created is prone to overfitting (especially low k is combined with large amount of data). Conversely, KNN models having large k is prone to underfitting.\n\nSo let's see whether this is the case for our model.","635407c3":"This graph confirms that overfitting occured in our model during training set prediction. Up to k = 12, success of the model increases after that underfitting starts to take place.","b727d7e8":"<a id='2'><\/a>\n## Analyzing the Data with EDA","7182b4fb":"There is almost no difference in training set success and test set success Logistic Regression. That means our model **learned** the dataset and predict around 80% accuracy.","0787dc8b":"The highest correlated feature with the outcome seems to be blood glucose levels. Other than that, any feature is not similar to each other. That means each of the features is beneficial for us to predict the outcome.","ab5373a2":"The difference between success in train and test set is overfitting. Let's try to tune our model so we can avoid that.","b9792367":"# Contents of This Notebook\n\n1. [Introduction](#1)\n1. [Analyzing the Data with EDA](#2)\n1. [Data Preprocessing](#3)\n1. [Prediction with KNN Model](#4)\n1. [Prediction with RandomForest](#5)\n1. [Prediction with Logistic Regression](#6)\n1. [Combining the Outputs](#7)","a917db82":"There are some skewness in the data. We have to get rid of them.\n\n![6SH4wau.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAvkAAAFiCAMAAABbKzdXAAAABGdBTUEAALGPC\/xhBQAAAAFzUkdCAK7OHOkAAAHIUExURf\/\/\/2BgYCAgIAAAAICAgL+\/v0BAQM\/i89\/f36CgoBocHvv7+\/Pz8x4fH+fn5\/f39+\/v7xweH8PDw9fX18\/Pz6ysrJCQkKioqHBwcLCwsNvb28fHx1hYWDAwMCMjJBgYGOvr68vLy3h4eOPj45ycnDg4OLy8vHR0dERERDw8PDQ0NISEhFBQULi4uGhoaCwsLBsbG1xcXLS0tIyMjA8PD4KOmCgoKNPT00hISHx8fGRkZKSkpIiIiJiYmExMTGxsbE5VWwsLC8ze75SUlFRUVJuptgcHCMLU5MXX6Mnb6zQ5PRQUFLzN3BQVF6+\/zbXG1YyYpJ6tunWAiQQEBL\/Q4CAjJrjJ2LLC0TE1ORcZGmhxekRKUH+KlWFqcnuHkUFHTB0gIj5DSBASEicqLXJ8hTc8QUtSWCQnKi0yNWt1flhgZ6Kwvm55gjpARKu7yaW0wWVudlFYXpWjr6i3xXmDjQMEBFtjazU2N4iVoCQlJkdOVE5OT5qns1RcY5KgrJCcpzg6PF9mbkdMUFFTU4WRnBISEiouMWpqa6usrKCtuY6QkPHy8lRVWFhdZIeJjL6+vvr7+3p7fZKUlLe7v52jqamrrr\/AwpaZm1R7GZwAAC1+SURBVHja7N3bcqJKFwfwBoGCggJK8URUPEbjWWN5jKZSsbyZy3mY7zG+V96YmT3bqEBzcFjo+t9kxhyk2p+wuuluCcFgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYFyjN7ENMI8YMYVtgEH5GAzKx2BQPgaD8u8tG0SA8h8yLCJA+Sgfg\/IfJQrKR\/mP2QAjRIDyH7IBBETwkMmwKB\/ziOFRPiJA+Sgfg\/JRPgbl33VHB+Wj\/MdsgB0iQPkP2QAMIkD5KB+D8lE+BuWjfAzKR\/kYlH8PGaB8lP+QkYaIAOU\/pHwOEaB8lI9B+Sgfg\/JpU62hfMz9yleKleWvf63YrX7yDaPMoHzMPZ\/zWz+Lxy+qlRK\/Pd5OoPxmYuTrT8g1bvkMU5HtL+vVl\/xF\/qvIUaaD1VF+LS8mqQG4HsSjehrvj18aP+vqn0stg3ce4pdvHpqEmAXJli8zefO9o5Fa30xbDFGGtbSVpJ3JOQnkYQ0PjePBzfiTugzlRyo\/yKYbDClYGpmoR\/mSXfPL455cSRNSYMgbI0kvc5Qf+rD2dUK0NmvLz0jHMseQOFt+Wmqg2WiSFQLJV2c9gyNH+f2J\/UBJqB0LH\/u12UkJawCo8tM\/NLKp2fKfOa20JYOVvGOIVFtYKqKNZmgjmHz7OrzTv+QPjxeNyXstlf6Sz\/SP5yeUH\/qwSLlJ3oktv2WSzEwe6cdqpyVJ3eINn3WD8t2zI0S3cuRLfuZjSuSRScotVS4JSvpn6Vn6RPnh5TfLT\/mj\/OPFNGWkjnW+2rrxs7Io3y16kSnqpKgRg2O2IjEmOW5BSHXY4XKrBeF3wquM8sPL13505KN8y76Yfig\/TVu+PGsQeZEo+Q2TX9yN\/PsKA\/MK\/05IvUeI9UzeSoSvk1K\/2u401vPtsHrDZ61E+teUTb+8\/N+w1O1wKsqHJ5+HeFS13pSoKilyTZVs3ySZKPVCdqtpvfVNJ4hEiUGpd3vmr8tINd8qqCgf5cNNhBimXem0gCq2VjLKR\/l3L18pMb+rstK\/D722RJSP8u9cflXIX6ngymmUj\/LvWr7YvdqoaquI8lH+HcvPlE9uZb6c1kBCEeXDebFRfsTy1XLm5H\/fbhEorTTKB\/Niiwg+Uvma8Eyc5J+9K1A+yr8j+aXvc9TPltMsunqi5evpvPTKNac1DuWj\/G\/h6u7fL\/YTK7\/a3FdmO2bIcYWSkGLXeRXlo\/w\/p\/jO+QPnP1F\/TaR8rdmZTbLmn\/+nxG1pJhRllH8XCb2kSCmfN+fFJDi5ZSRPvt6z+kXt9JHjp+nKxRc2p6P8O0jouZrrjfefNLtywuRrbxZz3jP\/PcXXmPx4Teh5v4Lyo5M\/3V889HL5U71csuQPKn3T+btmZ5TMTTFYGcFHJV8vU136tW41QfLl9vjZ\/Sfy1lp\/vBf7pqmqyWqMYZ7u57IQ9q+WSnQ9l07n6qtwuhGG\/m4NUH5EeXrbVQ4smxoLuUZSGmNx7Sx61dcSQCeXo9rERX4pXS8KUt8efrZWMsoPH7Ngter8UTyr8QVW+GvblYZbk9Xnadt30UmK\/P3SQfTZ9oJqa6mg\/JDRC+O36unRZSvMXyp7Qo3nG0v69p2kkyH\/c+7k+Uw+kZmRivJDxajU\/7S2\/OvotFeWhy9\/ffUYr4\/jGP1EyG\/MHN+hvHbxB61MouQfgB1Plj0ZSVCy\/0phm9Dl+9sSZWkmQf7+3c9fzI0TtYv+GNbh5EYNB1dt4PJ719+bDv3z53UC5Bsz3d9Za5ZOkHxY1U6u5VQsavs2aPlyWfPVvi0Vvvx+wcVNI+n0Qclvzr+fZNSTpldecpDlb1b+2je\/Ai8\/c3B5d6bEpJ\/1Icmfng8PiKcUlfkGsPxOw1\/7Ol0jAMkfut1wuy7fpl9D+b5jsOeDA9\/kE7XyDFa+6HuE\/k0CLl\/7qPmXT\/KJGeGBI1+9HLr8Lp8sWBWq\/J7v65H6Aly+1A3WVbOSMQdSBSNfFi4HR+Qz6duODFS+Y+3i3C\/vL2DLbwXcErw3T8QtLbEF5Ujeacb5Sm8w5acZ\/9fUaRu0fPOgu8JxPgcVukmYyCBCWYG\/oVqvocxvOnYgBD1bDXn\/8mPu43rJ77nfZk651DT7jozyabO4Oj7MX7w6NfaW55OgC9TksuO3XE7sXB6y\/Eo2sHxZKKF8yiijqxO8L+WTVRug\/OdCkN9qCIDlGx9aYPn2y1lH+XRhrm\/fckW+VlnAk78OVoMtRbjyVxOPY3ctDFVri\/Ip0nQas3m6coKfvoCT71LsuI4a5zm48ivhtgBdzKCv0qpBkD\/2NU6\/y0KT71bsuMnXymDlexU7nhnMFrDl83sAvduDr3uzi\/nNRg46weSv+WDyyeQJqnyvYodkvU5W2zHsYX2eif8YOo6LANWrEpmb3fdngskvu7wVG9H3jCOSvw5V7HivFWrDHtYHIP916VgSSlcLYZPVQMlPB55rL5fjG\/huu3UyzIMSWr6826N81\/Pe2cxkb\/nkPQdK\/mrq8k33Qy08x9bujJv8nudqSYr1ocp4hfKdI7IuO3A4yFfHMiT5XbdLkPu8qKcJTPllzwl4OYqmSlkblO94XrDb2HCcjGM4nFhuVekHki\/uSGD5JL4ZDG7yxZ+RlOip\/wNeqFKMWX5pFeQYzBsN7wSS\/+m6ON7jPn58Mxjc5G+j2Q8oJW7gTlmW4p0wuOo71zRu6RfhyO+E2QTO7EOUv\/Te479NsQClqZBVGeoAjxTrp740W4rrMRSdRn2MMhj5Srh7yi0Fnnzt4L0nCu0OSP0+yr8C+9caBkV3rAUcZ390eCjys+4DGF7vi94GnvwpxS6LtPKV8grlnydd8bpico492dt83FQQ+Wv3+7Bea95iK3dc5A8L0cj\/qogaQAd4YpSfHnuWis7yydwEIt\/jZpTnas+4CmEX+SzFXYYnnfbdkf6oofxv8K20p2\/ReerH5y1u\/DP+59FkPAZvPP\/iKg9NfuYQ0VDr7+uCZEGcwZPjYodP1kEGahRWv4EG\/72H17C3FowJNPnbqPY4n\/++dtQhzuDhcrHDD+LtWETmQMj3GtP0nlId080sZ\/l9mmX+JYq54sZv8PIS4OpEToodPqk7VgSvLs0rziHI17w2pfHe1WVVBCafaps0wQ8cZd5D+Zfw3V4dt6PbDQDIH9RDy4+p3HGU\/zQjUcsn5o8iyvcB313itA9AfsHrNyjuc8VT7jjKf9tHJZ\/5r\/POzwyUfwG\/pgWTWIn8s+PWvuVHobY+ACVf2N7iKZrQlmjFIP\/ijN8NOKvpNfKtLTi\/8tVlFA2yhiRfO2Ru8hSFlgZKfluKHX7gD6OuRv4p1r7lS55Tu2hGNUaQ5PMW3Xte8fkU0AZ4mGzs8F06gVWNto6MSf7Es3ql2bF3nQYkn6MDKvg+ZSojDpR8\/u8+3+JK5zYX9OiehLjle08ZpZE\/aAOST1nm+5dPRFAzeP6y\/EzF1+lt73F0o0y88hfe50eaa2os++4wuVBlPo18vXp2vYe0RCuQ\/OL8q9VE9k2\/KXwieMx6+WzHKz8XUS+pFMOuTEspTJlPChQDUhdb+uQtM9nySedrCfgqJUYC35lvwWMkTB9rscqn2BiTag7cJoZbnA4nbS7CfujlZla9uZ5s+dzc7ltq9aP8atrG10jbPX2RGHoQ+GqIoY2I+7g+5csUn6dD9Zk0SguM\/GWEW8FKl1PfmBcoW+uXgsn\/tF+q7cKWP21uRnq+nWblfOrz3dVwzaHUCbOpbcR9XJ\/yn4YRyQ+3ljdK+fIHZdfJoLgxNbicSS53oIxtCoFWDXDKrGYXKbb8Jc+z+U+ejEWSUsjY5QV0nLLgIn\/gOWg8EmOUT7NxAp387ScQ+XSTdkigsZ1fl7dRG4j8QHI4Upiks7Z8pSuKokLyW8uWb7\/Mon\/4RDNCHF2093F9yhciK1obHSDyX2knQy2Ddu7VcS7R8s3DRLblyx\/2iy8WikfzrvKpJ6n5PLpo7+P62\/1Gi7A6\/\/tbMPzD3pntNo5jYViSLUGCNLLgfd\/3fYOXeEPgIDe+rDeYVxnMe49d1ekkjiQfUuShPDMEGl2obls09ZE8PMtPd\/KHC+DHZUASv+3q0k1cUs9L\/laSjtdfHslLm2N8r\/dz+YvqSz4d+BBbpsgy\/ZUsiwmkhAzc26OpcJC\/hNZjNgHjrrqbevFl+1nJj5\/iUrwaS8mGY79NctJcy3QOqqzWvOoK435+fNUbjtTjlbB9FEY+KMcSeN9wbRYK8hOvLLdQD\/KlURgiWhqG+pvqKy9iBDPVWeYqk5Hfs9iRL6HribuSf2DqK\/MiX0pVEsLJbyGQn\/KXFwko\/zAYCCIfJq4GPc6N42EgfwZ+FzmAM6DqeRZIiw\/mKrZo8P3Ih\/h+G2VB5OeYupVG9TCQr4AtcDnYerVfiS5UUbg\/YTfJ8+3dkV3S3YCE\/CzouVBbDD1rzY38Blw9PCD5Ula01Cx38tNBJjeodyl2UUGDhHxYjRF4gId58eRn+hJL8qt+8vBvmvlfTf6i9RB8xwrWO5Od5hQJ+Y7GdoCNhXjys3DhujigojwWqfq8Ns1jxVKHf12j46y0+dOSnwX4P06ZgKZC5yyC\/FyU7QBXNfHklxgXufkm81oTj6ONsfwzFJ13nokOXMk3X46Qas2gdnqiJIL8MazbcJ8ru1wIWvKtXw1E8iV76r5kGfvI7aBtvyi3xcVM\/naQrH8rdCQkm5V6yZTj2FpvM4gpF7wsrFUTQH6ftZQAspK+C\/ltgnVwDxkq1X+MEktXa8ZQh7e1bJy\/kR+PqrNurNpvpy66PY4csmVGG8EvjuD3YFZjMxl0RzJO+ORD9Ubg6VnIWmsu5JNUpcgsysnbrkKGhrr+lZHyWelKvrlS1UzESA6vi7QhqRFHyjAyU\/hZO\/ZqgdU7i1VpFgH5mT3zAZ6YgsnfnJHJl4xKw418SS6bsn0jX5\/q1+ZIdvpwuZHvExgOC\/nr6Q6vd+MdOvnjAvMBHquCyX9NMia\/9\/j2gInlRr7+\/nL9\/iv5jcjN2ZtXW5akPAf5owr4NRrep2Do5WusSrMIyIfm2RBYpbhh3N6PcG3yleDjVch5HHClUHHzYyCNa8+yy+v3K1dzubUa5ff5bMvML5v6b\/KnoSa\/qcBTkhQGwbxJHpl8fcN+0GJ9TPJ\/Unlm\/pv6j1OZY737ks7kuJ6QqjvJSWnF9s3D0x9J+d4xdyomolrOvv4TXvLNTt\/G7UK6jkw+l7gTahj3J\/kz5hpokJJFu4wcwuNIvrOZWUy6EAPbnYxKs4w99P+UkxwGuJkWSn6ZRNM5KrPqSOIyFwC+Xmb\/nYkJWd6wd9yQQJWhyKSmCZ4wXZI4kG93RZJfjThCyJfaIrT1dfYh83llLqB36hGVfH3Ig3zUatwf5OeIdI9A5Fdhc6kp4PJE5uSbdYZalyS9Y1KaBSb\/ALZLiO4ZjWYEkt8Zk3w8DXFaQZ3+dfyUZdbkN3pF0t\/geIcuq3v41+yjmOQX+VTTYVbj\/iC\/x\/4qBXC46+1oPjf5uUtTVBdsFmdcMPnwHDmy80dJHPnme0Ic+VbrlH5i8q1xaSquC28Mjhc74JtawxNcyJxniHdI3JNfW5K9Nsg8SYMXQrsceV7yC+VOgiIWk\/Dugk5i9o4YnHFVIPnwN0pI\/nwrjPw02fgx9O38wSCCqzikMiM\/1imrVBMp5n2uV4lGd9VAI38IV6wgK5VEDOPek\/82EEq+FMEV4VFZ9b+wOl2PttZIYO8YSGwCyTf5meNHXRT5Sps9+XkCmA0DVYSHEfnOqawK711ViSGRX+B3jWfzLIh8O0LmlMtBDL4F0Y63wFQiYUN+SqnTQ2d41684ZItA8GskgOTvCR7UI+sBnqjyHfk5HvuYQWb9YiqRsCA\/v2l9XPOU3FOMDrM8qVoLiXyNYz5ezxJDPlkciwP5cvV6KMK7USU4+bHt9HPfy4xFkh+8HhdGPpF6OCn5aKLKd+STxrFUSK5wkuBLb9XqZvfNfBbyM+WxE4zilLdlOycsNs7MUMgnur6WFOSaLIR84jiWMWTcn8otbc1qZZF+\/i7YOCe1XpLT+v3gCODazKAqoTDy6yOer6QkhHzCOBaxCQ\/tj71CQt8IEjmxX8p3Rz3LYds70ok02GKQT5RRWSDtA1YY9zv56SMP8nWCopPCn1G1Vzg1mQEW6dhgOmAheVCz2fUu6P24IPLJxNCIS3\/mdRHkF0m12POQjY+mWtwup8NNfqb8wsb7KrOMBGSDjZoKOaHv9lzJxxJVVr7tRgqXC3wKU4oPJSrpEJNfaHXd6mg6hmDy7WDRLNCBXybyIPWIO4FUjbv8Gi0mjWMBm06QhvapUIKCPh35enHlnhgpU6wcM2\/yKY4NL2nu5PNek5FElb9pXpLHsUaQk6hFIJPQ+\/SCJRBsfRryrW3lbLJbv40Gy97lA1n6EPK5iwBWe\/jkd4jzMZj7dr7qNCB4eCgqmYzpyXMprheY9m5AMS+zA87k78n03Cj0T7UqOvlaM1TkX9E\/cQ5pRUl\/caG1wcuoix7IP+ME8elDyNfIvp\/Cu7FoYpNvvq75kK\/Rvoxq78g3jYPsGkyp+lJmHsXpeJsnBs3DFgESUOKPybcIk4MoyM8PsclPLok\/btmkDyFr5qxkh4Z881x54MGvURjZrLWuYit69Rb9MfkpQguM5sTdt5DJP28QHvKg2fc\/OlpJhoT8+KT4qOqJ5sYq5ipv7b7JkXy5xh\/KbQ6ZfPa6guTkyz\/CJLtlJgzk27NVmwvFFx83Cp1nW15wJH9C+JU0JZIod0h8hbJMXr0Pu5GyAV+EXHQaasrYEk2+uZ\/uAT+ChvwCs1PI34fc6Zob+cTlWFRbGsYdEl\/Id4h0BUlOuCTrlcu+4xQna04\/fwxja7SagY4be7a921JqH40mMV7kb1MY5GfbqOTPV5J48t0v3jpcznxWARniPckP+6hl8Z+9o1X9qr\/wIp9Y+ZKK\/PgLKvlbilz1Noh8JXBqSqLXL3Bh63HPrO30wHHzbfjYi3Nan5ippfmQj+NwhN\/Iwob87oHXQzQG1zjtLmNHBPk7JQt+bpUi3ULncgGyM0lxIX9g4JCPYO58If+Vm\/tQg49X0tOucMaVhYNNfq3VTfClmA\/5Un6a4kE+eWIB3ebTHiOST3Q\/1keLgZxWBNca+An45OVLvYFJvi2Xc7wpjvvYD80AiRKJSZM9+RSaIHThCpO\/d+eT\/AON0onKOg7jL12ldy6bnYVEfmyv7Ml8JGsNc14+aHbrJcaa\/HQTiXwEc+eTfLkefvKvOKaGy+OBmQTd0ZutVFkmTZxw1iEiX4plV6RegUc3HvaIjR2J8q56\/t6dT\/JXOW7kJ+CkAmRMrJysKLN0jcXar3mxuu72EML0t9nic3Z5C+gTU8sdsmX\/gbmG5dm5tVIMi3wnUqX4eBIUw5WZp0Xou2zrdTXsNNuJQCOkuc\/J6ljBurfGr\/rEDvr2rROZVOMD8reIQtf1HBb58zK\/h8h8EoLy8\/T4OFkuFe0oZ6PRg2EYGfVrq+k6DfnmohKlYi61YEs+g5ZZMCS\/hJiKmixikb\/lqG1VP8HtO\/IEAFMvqDtjEI3Kv9tG+2wr5T1NTP68PKP0INFQfI5K4Wn+5Ks0rkbqg2Df4Uz+h7VMF8eyQftfDu4SMDTUV\/2T\/HW3RR0tpiE\/Fye2xUSR\/5bEJD994Ez+xx\/o4ljMfTuCyb8a+AHizdE073nJuTU0elPIo1EvI7wL0T\/Ip4pjPT\/5JZ2JgY+2I3F\/os9\/6+Be5CQNEyjkU9ZjwcgnEFO2cS9CVywmBn6AlvOhu9gIEfkOXViVfrrMTyjkF+kOWjpof0deyOms0CAG\/scGTbFhyGqYxsPnRUWbQUeY+IxrYZCv8HwBT0B+MAM\/AMXPQr5DWd0bgPzFGYP8kxUO8gs9MeTXWRj4NBR3axxOhxzIH1OG9gK45R2uaWsBb16ugqIAebhuDPMjM7cVyaUdKUq3RhZW7wKRX+tK+C1rhJd8nfWd5U9N\/t4Oc++CkG+2EgLIt\/vm\/w75yQrq2C6lMLfwkF+nFjIJZL1GjScnn3sOxhOT7zc0nbCQnzqKmb0Ox0U\/oM80BjrTJS+go3waP4rEdlU9C+8BH\/LjAfyLwX7ffs\/tpw4U91bWfJrs07bRny0b+fPvWzalV5uru83lNFLdWlL3btUQkU\/zbZXwkx\/vBzi\/BAv8mn2uYeyGD1gF1bulfEBOfyW\/0\/o2ETpes+Zf5ddSz3vC9RSfFnFp79e\/94+\/dL9+RenuebPvvRvfzefz3U9W1X\/fpUh\/ax4b2tSnd2l08t0kl5o9W9xULGykcDaH8cvJy+hv+w7Q9d30znzHu3m\/nX2dG++y3P0+eVp38\/P171n566+\/mfpMu1eSaadSTDu3Xcv+znl+GEzbMWhMorOQ\/t9C31KMp12FZNrJZNPO3WvyT2W6XL4u\/zFp\/Ye9M+1RVdnC8GJMEQgQGWRQEVQcwAmMIg7EaPpLf+xfc\/\/9raLb3e59e+fs5OZ4Tmu9id12WyKFTy3fJdQqsoHWUmSDot50efOy+c0u3drTLz3o\/xvJ5GJKwXo6JXd\/xfert\/QsSef\/GUzmkyrDGBu\/cbjJ52CIbsZfejP4OnjATW686s1Dxc1Thjfjqv\/5AvUMO3edf+R65nIs1eNKpmhQfU\/pX2eS8c2wOn+mheyAWL\/l5JV8tXIzdiY338TMWYkeVqoHk8yvK37WzjV6KKieTIpv+fQoUFFRUVFRUf0LZJ3eK5OI6wY9GB\/ZPL7RDOXxlb6QE2E+yzxPlz2bYa4Tpi3mlzkFwuUF\/wxalIxHFy+SwsSzCJMvZ7suHgQSjv7I9HbK43Za5D4Guv7K\/Xo20yFXM1shJePhyZ+udPByUhLbQVmg72baJPbahb1cPm6nGfHtvTIxP+J+vXiZ5ygURIh36t\/28Mccp81EgNR6GPKhnUOkY\/LjVJLmrhtrhQSzLZjsA5Mfv9RVplVRqsmX4\/2O2HuI811EyPfJerubc04WBVD6OrKt5zsN3X8hqV\/35WbSiSgA0h6HfCnoRWQZBGlL\/tZsKZWA5wE9MvnIqYl3spp89dLwloEBcrrXhBUHyp64obyte8EQ\/DG3r6KX6OnIl5YkOuQj\/ifyH8jtgLwYIEK+1ZZBNssmWdv04clXV+N63Y2afMZGyOcuMCSz9ock5pOE\/1gBLEVMAIdjX2v9fOT7Lwhkh8GE5Ie2DxmfvwpIxHDslwelWg6\/+fUn2M3b+Da7gLYY9Uu9iISB48142CwemXxs511SdKYmfxXVV7HKp+3V59dfdclTvl2Tj\/Az2OcjH7WG4DYw+bsd4kf6AGAgwFKCOfgiSKIsjL5z91xeAMWAMEkE6A0rD4xqGh\/UvY0k3n9k8vVgvbnAO\/ncexVoxEW35PtjAafCz0y+v9IcspZGKQmC31zWbgcbArmZYPKZv2uVUKq\/l3ywuYX5Qf58reAIf5ZP7RvyldMBnpx8mFQHQj6zw5mudLySnxqIkv9NddngVL5DHE2OTQ9YHJv3LyEkXKXpR87UYcGA\/nb03DY7Vfo1+YvnI98DaaWRhSiljqcfzJcejGNMPgrkxlih5H9DqVmZ43CfeaDFDrPFQT8W2RHxdod2p+JTV8+YqgG7ServRhlKmIPqV4z7ZFc0oNle13IwRkdDZt4mKvDsdr41RpEyOlqLLCqQ3d5QmKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovlDXlPU\/a\/nT2r+K8OsdKqr\/kQim88eN1bte6HxOpuVf7dsH8TPv5n\/JdS958edWVE8p+etyFBwYX60S+PU13uiuJV4WpMz3X7TZfrWXV+CNjztaQt\/+h5WpWxswmsQc+E1Shq\/rul0AQXOFmnjdXpA1SvBD8RT\/Q8umhG3T0jnQTYCe5eqg+bh1vTU9CQCpG0uXp6SQi+6S50BoGRwp+eLq9+lTp9QBKfZZ084byT2X3o4JtaYrMYbFNACa9hmitWQM\/crju9A7JCH4u8S4kp81tyJ4h72gMWNLtq2ELojyiFrPlydnPFpo0GovgwziYHlc9YAbt8gcZTV6bYXATwajRevCVtBj03TdBZ5dDjgQRMgCpgh09DpYBtheIOeVMbFVGI\/maWvBQxhcRm0dhvNlhwNlPGotvLv0abMODgDWCCDSqqWeF15WaEmqShOjMYHcA3GHIVdP2UFtIy2V\/TkEkLU+yJ8msBOh8Iw5CAxYJRS0FO0jijPAmQAE\/nQtQ7yGbROgkICLwXsD6TUihUn5uQydBEIWyiFAFemnHkxr8mc4srcFxPngLyAPePKhwY9Bfu3DdA7iGeCy9U46WBzsjwB2ep9OaftTC++YGVqkro5QT6iUeLLDiIWJIFghgZxMuRZRVheg7Ao4zr+TT8psiThJtlnyTA3txjTffUStgNRgwm\/3ts3zPKeC2XcCTL5CnPx0cSSm5b0BoWbN8HwqCniowAsBCcKDsxKIi8e35iIl0ZGPMFQCCCy8IGwtRk3cTOPgeOT52eI+Dg6H\/TcV3JSXvyB\/jgez8km+hUdkF0pTuJLficmdKEM1+SGjMZT8RxR7Bds5kmJESsQOdykmv85hQZbabUn+JJ+N6mU3x\/jRVwJSuR42J1fyQet3JnWU\/SCfTOl3RUmstyWWZPt36VMpg7LWQO7kcCV\/ANLwg3xnbAgxGugai\/27aKgnq7tHHVkSVa8mv1yCOYY3vcGqwkV1Ek2c0mLzj0x+H+OslnAKsU34QT6xvSL6JL\/A\/sU9o5MCvdrtYK8kd9wr+Vju4Ib8+RQ77dlmIYPJwbDCOfT2Ln1KEr4iRbKTHuhDB+1bqF+E21K1L5vmyFTKDg9yKxfEJnjpGbJJ4cFslh2985FMtVdaF9wwucRFqB93YbG3h98pxdXtce+PGqp8AZAvKfnKupQGMxgv3VZwviH\/J7cjrPZ2EAMzksQTIb9TuZegf0M+wA35u+CcrAzsc\/o4H0ar7aHTv2vf+Kd8R03yUXur3w2EA37vN7\/J3jX94Y+TDSC4dbkpPZ\/tZBwJHMF3a2h+gHNtgNuaQ8fHJuhQNWxAEqDI8eOpjlvqn62xLbYRILJlZ+uR4sWViR9F2yq7Z88GY+MpyUc\/ka\/0h7+zmNJvq6o1om2X2qFvq96Dn4BVzuNeNbdROT\/gP5JzhfN5CLeHGSa\/e06KjJxCiXg8\/A1n66Zj0ypILAjPTguHoyZvj1gwyEoyu23SUrX+KHTIlgAljosTpcM4dNb73myOkyXFzo87kHk7KrXuPjVb85jyRfVPSW5wAmScBY03HY4WQMGA2ZZhiskvFMjeMNb1iUSQy5EHl4kB5QU2M5zDz0HC\/n6LY74jQpfrwTGRDa4vx29KI7Xfw33I7UDgJDnkunD5L3tn4pZGkobxhoZ83cACoyJeMRjReMSIRjTGC3pEDpFrkftSAUXFW8dxPMYkk83uMzt77\/67W9UIaqKZaDxoU+8j0HRVt03Vr6u\/eqsadOhtRVcjRU3WUtpJKdXZQcqf6B7DmkJogx4DOMLR0LrxZ\/yqpn6W1UuqmjvHauXFjhqei4QeT0UsWy2hDNpCtIPXMs36FklxTyptzcvmYtDEB040o5zEu2uSMwP6SRZ34KguMSn+BxI5fOncNFV5ki+lURwjpZu7a\/hVUgPf1ONO17PBqnPkvx7jPwV9Sr78xYhKJDklnWp+WaNVnSW\/yYw\/tlw5rqHEBfKlhPyH0SN4xFIN2i\/JqekvT\/IVfdUU1dtBiRoV+K1uQoLoLHwbqoLtPEv+kFlKUS+p\/ucl8rXoNOl5Kj8ln8L2c+UZ8lV9Y3KqSlozTlEGQv6Dkoj9wsZcXUY1LtfTrQotrVVo6CF5l2GotaGSUnZ3DA\/SEhU7Ie44nWeqftXRrBtvrFM3iBl5D93RUUFVTI4ON0xo1c8bmQFzz\/Cr\/tpatCe0t+LQhXyI7lXhvXehWL+2z9DylNL+saZa3NbUOVGlGDSTLxkuRzUpWiuo+i601KpRUSoNelI3MaVKpaTy2gGqF7uzvb1yPEe1gaWYOkqtQVGxcqCytlT7FSpNnby2CmfEX7Gt1jYh8hm2PNxSOcMwipOHnFJUNOHDltcPqPC0QJ30zORANcModQzTjF8pqk6KIzuFtE6p5FPwnFuFTl7a0+neVad753fHMJROfbKymWBWfhp4MqIVV+tbNJSE0T6mRqvYHoWoXT8uYSRY1RW0dmiymm2slD\/VDYqowValgW1+zFLduupnutHnI236Kj4jq32i1RtG9E\/UKpGy65FK16PWiynpkLKfTN4UMh5vH+5ne8QUfv2QaWfZR0pWxfI\/\/dIqws0Vbq3oQhZtVw873Kbs4KMd9Dei6hThEWj2hYLPqMQD3GIGz+x4RlFt7OAIpRJToyz7eoTwI1xHzPDdwydf2oDf1VZX8eRLRWopVn2RfJbFN5VJW4rk60e6CuSLlHzGqhL5EkS+qLONxZM9xOQORSFL130ke\/jkK\/sqqVbGQNWdkF9ML5IvFSspDb59gCdf+RhdFgrkFzMWydeis6OhfuwFXjMuoRRkBFOoUrRvwcMlnxF\/z7SPMQ3j6mFzSzXV\/7q6r+tFGyPpOLHsmujWykacRSXqa6+lnj4ebhlj2mt0hhqJQTo+XjnWpixk7DU3NfVpKhs75Q0SLf7l6Nffm+srDd2jpNkXqOQ\/xeEBk3\/22qbjpx1eSqpSzT+p+Tcoo\/rSjDqcgcEZVAy5L1eoevErfCPkExGdkSTPEfKJvj3pF2xAyCe6ntQdgh3MqP3RCYR8ouvaB\/QvGmEeeYXYBYR8ouuT\/+epl0I88MrGJSDkE30F+eD6cUx47pay8RAI+URfRT44f\/hJaCMaivdGIOQTfSX5YHvTohTUUcsf5YCQT\/TV5AO30yioL7b4dREI+UQ3QD6Ab0pA7mbNG46QT3Qz5INHOO7mX0I2IOQT3RD54BWKu\/lh2gqEfKIbIx9c038Sgrv5t3AACPlEN0g+OEMCcDcHplznwYfwd\/ej54Seh0I+2N78UO7uJmPwQpnoD4SeB0N++bubujkPEPKJbpz8cnc3FT\/7gJBPdBvkg2e2fN1N+egxEPKJbof8cnY3X2eBkE90W+SXr7v5jwxHyBe8umXlofDUp1Vapu7m\/97bgJAveNFQxrJFy9Dd\/M+0Ewj5hPzbVRm6m\/9NuYCQT8i\/dZWbu1mZWgJCPiH\/DuSZ\/VBGxaWcPgRCPiH\/TlRO7qZizgiEfEL+Hal83M2\/53NAyCfk35nKxt18u\/jlB23dNeKusNVjPCTkE\/KF7W6uRa8ygmVdkFn5l4uT7Rd+0EvW2wn53yb5wO2I79\/d\/C10tREsIz2DX0wXp85ZPj1X1k2wm7wgr2WOkH8n5G+sm+I7MevHPc0Jf2Fh6pJeXmDNDJCev7SGpmKCdjf\/PW292iEb17aXLyF\/H8B\/wfXDaAL7J\/8k6ATOT8i\/mzY\/6QBrZvqj4uZWsceIHiuXXXv30c6sF4\/zfHY7Qbib\/\/r45sPfJ98S2fYWyC\/wzI\/9WtGiZR0VZ6k0SrA7Efk4sLHjtEJmG3Azbj4KAqudD4f8hPxbJN\/kQA0\/nbjAYZz+XFVbLg2dPr\/dl7qbv91nQaX24crkc5mwH5P\/LhGNgGvxcCEbiCeyafteyLOZsqy8N4L7wO5J7MVxdvf67oLJvmOyHe\/lk86Ib84Ny7HMkVeWduUywMWNezFuzRGZixDyb5f8XXoDluKJaJyDw1wsarGuzYIr0xfZNM4b7WsyH9jXUG0up4s1kY748jQETXnwzmRNE0FX2vceXezfLfvmvPx2u\/MoSjLmtjLvYGnGlHbIgoJyNz\/MO69MPvjDeUR+4MBt2bZGNyCbgAVYcuCoBkIWiEfAsulfd2\/SuCHPu2HLhJP2Q5z\/YMWdPPak4WgNHG6wOCCWBmuf2zLPuVKE\/Fskf3rXl4qAM2wFLhWHhU3YtMASymqUFeJ8LuUDiHOcg4NVmr8hNZHFJwuKx9FJk13gVm0oyUuvHqJO3s5BabuNEIpbtxECDhtkIsJyN\/95xQ4uJh+82xETeEwWi8UeNcJiDDjjcoF8hwXcMvCBJYsTUTBD83E++rOg1Hm00nXAd6gK5M+g5dA7tOCWEfJvs823u3GvEhdyPAW5ifVNdDUuki\/DbXeYCyZgNWVE4tvu+Vgh2jEi8k2o6pam+aRoAe\/idjM46F1Y53OYTAJzNzt\/5q5MPixvI\/KjKHa3uRyeRY7LB9wl8iHjiYEljxPRaU3bz5K\/gtYc5HC4f0I+amocHkL+HUQ7uNZmcRSDQvTN5LbxPPlcyhi3g9eMe118B828fJ58yyxO8if38HNpu3wUN2IH1yX\/nt3N818m+Pt2FO9bJk3gNButOW7rEJWIe4rbD9neZZ08+btTVrCZE1YfLqtU4iTasaDL504osOrZnQ06E+BY8SPgjehqGbIR8m+Z\/GyBfByXwGIOUHOey0OwQL6fJx8toQ6wfTZqBeMKX8HzNt7bKZJv60NJMXdiex+cW6XtYmYU0c57r00+2urxPRbW279e4Ug313P4wmmNYF8q7IUtmYzOcDPJo7nVwNxWIIlK1Y7HhI\/C4Q2cf2k6mo0G06bAVtQNtpltEwc7E3krLGeCxqQbFk05L8T2AvuZFUL+bZG\/FJpb4lu3ozlf+piD5PHG4pI9LfOAazYbXJ2Oo1aee4+bem+KliVOYvDUweLsln99fjOYxJWDksIe4Ba3w0kb2m6vsF0kFIvHIDCTDAZnku6rg59+Un+PhSV\/Fb++N7WG24sA3LwI+TfX5p8ZneJdZ8594UA7n6EUAPjt9vPBQCHJdt6A5r6m7rn1fub\/7d3dS1NhHMBxGtnNmaNt5qCXIWJdGKiJgXfVKDZkZ9hFBhGCGviSZEVgq0h78WL+1f0B6+K4c7Y9Rz+fv+DZb9\/L53eesU4rxddG2vHfFz\/fubeTl\/KD0jxdHffNtZvdrwNfOd1\/M5y7a8q\/7OV3ugvjv61cqp+4paz8kerF0yEMrFroKV\/5I\/R4ZTmMiU3FHeUrf2Q+Lk2FMrJK+bXylT+i1ZRv8wF9eOfWTlv5yh+F0D62NrfTUr7yh+9DeTawqZ0ft5Sv\/GH7vDIX3NgueIVH+cq\/uM2ziQDndu2T8pU\/TI2DMN8Niv70PR6xN6bPUB+r+BKW39o6nQlzcP1XeLwKqvzMbOw+CvZp3OK9t8pX\/nAcxQ8DHl1pcV35+fVsMhDz\/eGvb9eCnt3tyZ7ySek\/72QdxncCP3Q1PlI+GZffeDrmLZQkKoWO8sm0\/ObaajEHx14utJVPhuV3Xi1EuTh3rdtUPpmV\/zI+z8vBp9dayiej8oPZQklidquhfDIpP6AtlCSe\/FY+GZQf1hZKAtHzX8ondfntve\/FnJ09unGofFKWH94WSgLF+1+UT6ryQ9xCSaC0eKJ8UpS\/uT2Rz+OXln4on0HLbxwUqnk9f7X+XvkMVn64WyhJVOpl\/yKDlL+xezfK8y94YCuQgcqPr5sCV8\/MWc0QAAAAAAAAAAAAAAAAAAAAAAAAAAAArqZ\/1eqquOeeEssAAAAASUVORK5CYII=) \n\n\nPicture was taken from [here. ](https:\/\/github.com\/manvendra7\/Skewness-and-kurtosis)","17c8634a":"There is no missing value in dataset.","e7aa1b1e":"The data is not equally distributed."}}