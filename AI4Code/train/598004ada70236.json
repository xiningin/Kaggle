{"cell_type":{"0ad3cf88":"code","c3e5fcd2":"code","3a935d60":"code","99bfcb80":"code","5d9f6632":"code","32bd013e":"code","6b8ae18d":"code","aa703ad0":"code","cdae2395":"code","4313d61e":"code","b896b586":"code","b665b3d6":"code","e349d1c5":"code","cf191542":"code","050bb1af":"code","58f1e978":"code","8487acb5":"code","11a45f49":"code","a2c2fc4a":"code","a9da1f3a":"code","68d132f5":"code","bc24857f":"code","75d4be04":"code","ed8ef164":"markdown","bdf8c5f4":"markdown","caeadc37":"markdown","9b9197ab":"markdown","600572ca":"markdown","5f098051":"markdown","472893ec":"markdown","bc00f774":"markdown","e713fe00":"markdown","0544b88f":"markdown","f17f72dd":"markdown","8b2bbe5e":"markdown"},"source":{"0ad3cf88":"#Importing libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy import spatial\nfrom numpy.linalg import norm","c3e5fcd2":"#importing data\nbook_df = pd.read_csv('..\/input\/booksratings\/BX-Books.csv', sep = ';', error_bad_lines=False, encoding=\"latin-1\") \nratings_df = pd.read_csv('..\/input\/booksratings\/BX-Book-Ratings.csv', sep = ';', error_bad_lines=False, encoding=\"latin-1\")\nuser_df = pd.read_csv('..\/input\/booksratings\/BX-Users.csv', sep = ';', error_bad_lines=False, encoding=\"latin-1\")","3a935d60":"print(book_df.shape)\nbook_df.head(2)","99bfcb80":"print(ratings_df.shape)\nratings_df['Book-Rating'].isnull().values.any()\nratings_df.head(2)","5d9f6632":"print(user_df.shape)\nuser_df.head(2)","32bd013e":"ratings = pd.DataFrame(ratings_df.groupby('ISBN')['Book-Rating'].count())\nratings['num_of_ratings'] = pd.DataFrame(ratings_df.replace(0,np.NaN).groupby('ISBN')['Book-Rating'].count())\nratings['Average-Rating'] = pd.DataFrame(ratings_df.replace(0,np.NaN).groupby('ISBN')['Book-Rating'].mean())\nratings = ratings.rename(columns={'Book-Rating':'num_of_all_ratings'})\nprint(ratings.shape)\nprint(pd.Series(ratings['num_of_ratings']==0).sum())\nratings.head(10)","6b8ae18d":"#frequencies of rating counts\nprint(ratings['num_of_all_ratings'].value_counts().sort_index().head(5))\nprint(ratings['num_of_all_ratings'].value_counts().sort_index().tail(5))\nprint(ratings['num_of_ratings'].value_counts().sort_index().head(5))\nprint(ratings['num_of_ratings'].value_counts().sort_index().tail(5))","aa703ad0":"fig, ax = plt.subplots(2,1,figsize = (15,10))\nax[0].hist(ratings['num_of_all_ratings'], bins = ratings['num_of_all_ratings'].value_counts().sort_index().index[-1])\nax[0].set_xlim(0,50)\nax[0].set_xlabel('ratings count')\nax[0].set_ylabel('books count')\nax[0].set_title('num_of_all_ratings')\nax[1].hist(ratings['num_of_ratings'], bins = ratings['num_of_ratings'].value_counts().sort_index().index[-1])\nax[1].set_title('num_of_ratings')\nax[1].set_xlabel('ratings count')\nax[1].set_ylabel('books count')\nax[1].set_xlim(0,25)\nplt.show()","cdae2395":"fig, ax = plt.subplots()\nax.bar(ratings_df['Book-Rating'].value_counts().sort_index().index, ratings_df['Book-Rating'].value_counts().sort_index().values)\nax.set_title('Rating Distribution\\n')\nax.set_xlabel('Rating')\nax.set_ylabel('Count')\n","4313d61e":"books_merged = ratings.merge(book_df[['ISBN','Book-Title']], left_on = 'ISBN', right_on = 'ISBN').sort_values('num_of_ratings', ascending = False)\nbooks_merged[books_merged['Book-Title'].str.contains(\"Lord of the Rings\", case=False, regex=False)]","b896b586":"ratings_df.head()","b665b3d6":"target='0345339703'\nusers_filter = ratings_df[ratings_df['ISBN'].isin([target])]\nusers_filter\nratings_df = ratings_df[ratings_df['User-ID'].isin(users_filter['User-ID'])]\nratings_df.shape","e349d1c5":"ratings = pd.DataFrame(ratings_df.groupby('ISBN')['Book-Rating'].count())\nratings['num_of_ratings'] = pd.DataFrame(ratings_df.replace(0,np.NaN).groupby('ISBN')['Book-Rating'].count())\nratings['Average-Rating'] = pd.DataFrame(ratings_df.replace(0,np.NaN).groupby('ISBN')['Book-Rating'].mean())\nratings = ratings.rename(columns={'Book-Rating':'num_of_all_ratings'})\nprint(ratings.shape)\nprint(pd.Series(ratings['num_of_ratings']==0).sum())\nratings.head(10)","cf191542":"book_mat = ratings_df.pivot_table(index = 'User-ID', columns = 'ISBN', values = 'Book-Rating')\nprint(book_mat.shape)\nbook_mat.sample(5)","050bb1af":"#row means calculation\nusers_means = [0] * len(book_mat.index)\nfor i in range(len(book_mat.index)):\n    users_means[i] = book_mat.iloc[i, :][book_mat.iloc[i, :] !=0].mean(skipna=True)","58f1e978":"#replacement of implicit ratings by row means\nfor i in range(len(users_means)):\n    book_mat.iloc[i, :]=book_mat.iloc[i, :].replace(0, users_means[i])","8487acb5":"#centering\nbook_mat = book_mat.sub(book_mat.mean(axis=1, skipna=True), axis=0)","11a45f49":"book_mat.mean(axis=1, skipna=True)","a2c2fc4a":"book_target_user_ratings = book_mat['0345339703']","a9da1f3a":"def cosine_sim(df1, df2):\n\n    df1na = df1.isna()\n    df1clean = df1[~df1na]\n    df2clean = df2[~df1na]\n\n    df2na = df2clean.isna()\n    df1clean = df1clean[~df2na]\n    df2clean = df2clean[~df2na]\n    \n    sim = np.dot(df1clean, df2clean)\/(norm(df1clean)*norm(df2clean))\n\n    return sim","68d132f5":"books_sim = [0] * len(book_mat.columns)\nfor i in range(len(book_mat.columns)):\n        books_sim[i] = cosine_sim(book_target_user_ratings, book_mat.iloc[:, i])","bc24857f":"coss_book_target = pd.DataFrame({'ISBN': book_mat.columns, 'cos_sim': books_sim})\ncoss_book_target.dropna(inplace = True)\ncoss_book_target = coss_book_target.merge(book_df[['ISBN','Book-Title']], left_on = 'ISBN', right_on = 'ISBN')\ncoss_book_target = coss_book_target.merge(ratings[['num_of_ratings','num_of_all_ratings', 'Average-Rating']], on = 'ISBN')\ntop_10_sim = coss_book_target[coss_book_target['num_of_ratings']>15].sort_values(['cos_sim'], ascending=[False]).head(10)\ntop_10_sim","75d4be04":"fig, axs = plt.subplots(3, 3, figsize = (20,20))\n\naxs_x = [0,1,2,0,1,2,0,1,2]\naxs_y = [0,0,0,1,1,1,2,2,2]\nind = range(1,10,1)\n\nfor ax_x, ax_y, ind in zip(axs_x, axs_y, ind):\n    axs[ax_y,ax_x].scatter(book_mat['0345339703'], book_mat[top_10_sim['ISBN'].iloc[ind]], s=100, facecolor='C0', edgecolor='k')\n    axs[ax_y,ax_x].set_ylabel(top_10_sim['Book-Title'].iloc[ind])\n    axs[ax_y,ax_x].set_title('User ratings')\n    axs[ax_y,ax_x].set_xlabel(list(coss_book_target['Book-Title'][coss_book_target['ISBN'] == '0345339703']))","ed8ef164":"# Number of ratings recalculation\n* To get the count of ratings that will be used for similaritu calculation","bdf8c5f4":"# Filtering ratings of users who rated LotR part 1\n* Similarity will be calculated based on ratings of users who rated target book. Ratings of other users can be filtered out.\n* 75,927 out of 1,149,780 ratings","caeadc37":"# Findings\n   * Most of the ratings are implicit ratings (=0), aprox. 700,000 out of 1,149,780 ratings\n       * Exclusion of implicit ratings might lead to huge data loss. I should find way how to deal with implicit ratings\n   * Majority of books have less than 10 implicit ratings and less than 5 explicit ratings\n       * It will lead to sparsity of user-item matrix ('book_mat') later on","9b9197ab":"# If there was more time\n* Calculate metric that will enable comparison of diferent aproaches\n    * e.g prediction calculation (see http:\/\/files.grouplens.org\/papers\/www10_sarwar.pdf) and calculation of MAE\n* try other similarity metrics e.g. pearson correlation  \n* find a better way how to deal with implicit ratings\n* combine all LotR part 1 books or all LotR books in order to get more data\n* underlay value of parameter coss_book_target['num_of_ratings']>10 with some analysis to ensure the right value of parameter in order to get statisticaly significant results\n* ratings prediction\n* rewrite the code in cleaner way\n\n# Model for any book\n* Creat a similarity matrix: rows and clomns: books; values: cosine similarity between coresponding books\n    * It will be probably very time consuming. It might make sence to compute the similarity matrix offline rather than in realtime.","600572ca":"# User - Book matrix\n* rows - users; columns - books; values -ratings\n* 257 users, 52,182 books","5f098051":"# A glimpse at dataframes\n* Size\n* Variables (columns)","472893ec":"# First toughts\n   * **Cluster analysis** - divide books into clusters based on book's attributes, books in the same cluster as LotR will be the ones recommended\n       * Availeble data doesn't provide much information about book's content -> webscraping more data? -> too complicated -> looking for different approach\n   * **Collaborative filtering**\n       * Seemed suitable for this task. Especialy item-2-item collaborative filtering\n    ","bc00f774":"# The goal is to find books similar to Lord of the rings\n* Method: colaborative filtering using cosine similarity","e713fe00":"# Data preparation for similarity calculation:\nimplicit ratings will be considered as neutral (mean) ratings not bad ratings (=0)\n* Calculation of mean rating for each user.\n    * Missing values (NaNs) and implicit ratings (=0) are not included into means calculation\n* replacement of implicit ratings by user's mean rating (zeros in each row are replaced by row mean).\n* **Centering:** for each row the row mean is substracted from row elements (transformed implcit ratings are included in calculation of row means)\n    * conservative vs liberal raters, see paragraph \"Adjusted cosine similarity\" in http:\/\/files.grouplens.org\/papers\/www10_sarwar.pdf\n","0544b88f":"# Calculating mean rating and ratings count for each book\n* explicit (1-10) x implicit ratings (0)\n* mean rating \"Book-Rating\" is mean explicit rating. Equel to NaN if there are just implicit ratings\n* num_of_ratings - count of explicit ratings\n* num_of_all_ratings - count of both types of ratings","f17f72dd":"# Most similar books to The Fellowship of the Ring (ISBN 0345339703)\n* **Cosine similarity** will be used as similarity metrics\n* cossine_sim function\n    * function that calculates cosine similarity between 2 lists (ratings for 2 books)\n    * it isoletes only users who rated both considered books","8b2bbe5e":"# LotR books\n* Average ratings and ratings counts for Lotr books\n* There are 119 LotR books\n* Simplification: I will look for similar books to The Fellowship of the Ring (The Lord of the Rings), ISBN-0345339681\n    * There are more than one publishments of The Fellowship of the Ring. I should have combine these in order to get more ratigs for this book. Unfortunately I noticed this issue too late\n    * Or combine all LotR books for the same"}}