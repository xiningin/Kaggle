{"cell_type":{"c55ade2e":"code","a438ee55":"code","22e73905":"code","39ad1a10":"code","67a90485":"code","c6ccadf5":"code","c37532ee":"code","f9acc446":"code","27543a47":"code","72683a3e":"code","c74a766b":"code","0ac4020b":"code","536c6ac2":"code","40e3d1a0":"code","fc015294":"code","30e28589":"code","77035331":"code","c87dd9d9":"code","c851887f":"code","75b404f4":"code","d5fdc5ff":"code","a32929c1":"markdown"},"source":{"c55ade2e":"# Designed to be run through as an interactive workshop, may not make sense otherwise!","a438ee55":"import numpy as np\nimport pandas as pd\nfrom tensorflow import keras\nfrom keras.layers import Dropout, Conv2D, MaxPool2D, Flatten, Dense\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","22e73905":"import pandas as pd\nfrom pathlib import Path\ninputs=Path(\"..\/input\/digit-recognizer\")","39ad1a10":"# https:\/\/www.researchgate.net\/publication\/329216193\/figure\/fig3\/AS:697582816870406@1543328112943\/Architecture-of-multilayer-artificial-neural-network-with-error-backpropagation.png","67a90485":"df_train=pd.read_csv(inputs\/\"train.csv\")\ndf_test=pd.read_csv(inputs\/\"test.csv\")\ndf_train.head()","c6ccadf5":"df_train.iloc[24].max()\n# 0 - 255","c37532ee":"Y_train_full = df_train[\"label\"]\nX_train_full = df_train.drop(columns=[\"label\"])\n\nY_test_full = df_test\n\nX_val, X_train = X_train_full[:5000] \/ 255.0, X_train_full[5000:] \/ 255.0\ny_val, y_train = Y_train_full[:5000], Y_train_full[5000:]\nprint(X_train.shape)\nprint(y_train.shape)","f9acc446":"def display(img):\n    \n    # (784) => (28,28)\n    one_image = img.reshape(28,28)\n    \n    plt.axis('off')\n    plt.imshow(one_image, cmap=cm.binary)\n\n# output image     \ndisplay(X_train.iloc[0].to_numpy())","27543a47":"y_train.iloc[0]","72683a3e":"model = keras.models.Sequential([\nkeras.layers.Dense(100, activation=\"relu\", input_shape=[784]),\nkeras.layers.Dense(10, activation=\"softmax\")])\n\nmodel.compile(loss=\"sparse_categorical_crossentropy\",\n             optimizer=\"sgd\",\n             metrics=[\"accuracy\"])\n\nmodel.fit(X_train, y_train, epochs=5, validation_data=(X_val, y_val))","c74a766b":"# https:\/\/miro.medium.com\/max\/2638\/1*upfpVueoUuKPkyX3PR3KBg.png","0ac4020b":"# Things to try\n\n# more hidden layers, various shapes\n# different activations in all layers but the last\n# Dropout layers\n# Optimizer\n# Batch size","536c6ac2":"# predict to csv\npredicted_labels = model.predict(Y_test_full).argmax(axis=1)\npredicted_labels","40e3d1a0":"np.savetxt('submission_softmax.csv',\n           np.c_[range(1,len(Y_test_full)+1),predicted_labels], \n           delimiter=',', \n           header = 'ImageId,Label', \n           comments = '', \n           fmt='%d')","fc015294":"# https:\/\/miro.medium.com\/max\/3288\/1*uAeANQIOQPqWZnnuH-VEyw.jpeg","30e28589":"# http:\/\/media5.datahacker.rs\/2018\/10\/edges.jpg","77035331":"X_train_conv = X_train.values.reshape(-1, 28, 28, 1)\nX_val_conv = X_val.values.reshape(-1, 28, 28, 1)","c87dd9d9":"model_conv =  keras.models.Sequential()\n\nmodel_conv.add(Conv2D(32, kernel_size=(3, 3),padding='same',activation='relu',input_shape=(28, 28, 1)))\nmodel_conv.add(Conv2D(32,kernel_size=(3, 3), activation='relu'))\nmodel_conv.add(MaxPool2D((2, 2)))\nmodel_conv.add(Dropout(0.25))\n\nmodel_conv.add(Flatten())\nmodel_conv.add(Dense(100, activation='relu'))\nmodel_conv.add(Dense(10, activation = \"softmax\"))","c851887f":"model_conv.compile(loss=\"sparse_categorical_crossentropy\",\n             optimizer=\"adam\",\n             metrics=[\"accuracy\"])\n\n#model_conv.fit(X_train_conv, y_train, epochs=5, validation_data=(X_val_conv, y_val))","75b404f4":"# https:\/\/www.kaggle.com\/meownoid\/tiny-resnet-with-keras-99-314","d5fdc5ff":"# https:\/\/www.amazon.co.uk\/Hands-Machine-Learning-Scikit-Learn-TensorFlow\/dp\/1492032646\/","a32929c1":"CTRL+ENTER - run the current cell\nLEFT CLICK ON CELL\/ENTER - start text editing cell\nLEFT CLICK OFF CELL\/ESC - stop text editing cell\nb - create new code cell"}}