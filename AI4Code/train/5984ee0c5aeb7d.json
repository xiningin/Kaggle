{"cell_type":{"588b1fd8":"code","891182ba":"code","5e4d7511":"code","2fce3f6d":"code","8adcf37a":"code","94e3a3f3":"code","c02180cf":"code","a8efa6c2":"code","3aa56a08":"code","f285e61b":"code","674220be":"code","2cd7cb15":"code","2a1bc490":"code","acc05306":"code","daf6d2c3":"code","05913e9f":"code","05f25957":"code","1dbffb6f":"markdown","821f0741":"markdown","d74bdafe":"markdown","754f5a3e":"markdown","1208d37f":"markdown","4f5ca116":"markdown","4160fea4":"markdown","810d4e12":"markdown","921f42b5":"markdown","ff33d3b4":"markdown","27a4be33":"markdown","d6e4c2f8":"markdown","a6b48380":"markdown","3eb0d098":"markdown","7781fc35":"markdown","6e1ce8be":"markdown"},"source":{"588b1fd8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","891182ba":"# Load data that we will use.\nvgsales = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")\nvgsales.head()","5e4d7511":"# As you can see from info method. There are 16598.\n# However, Year has 16327 entries. That means Year has NAN value.\n# Also Year should be integer but it is given as float. Therefore we will convert it.\n# In addition, publisher has NAN values.\nvgsales.info()","2fce3f6d":"# Lets start with dropping nan values\nvgsales.dropna(how=\"any\",inplace = True)\n# Then convert data from float to int\nvgsales.Year = vgsales.Year.astype(int)\nvgsales.info()","8adcf37a":"# prepare data frame\ndf = vgsales.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.Rank,\n                    y = df.NA_Sales,\n                    mode = \"lines\",\n                    name = \"NA_Sales\",\n                    marker = dict(color = 'rgba(69, 40, 202, 0.8)'),\n                    text= df.Name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.Rank,\n                    y = df.EU_Sales,\n                    mode = \"lines+markers\",\n                    name = \"EU_Sales\",\n                    marker = dict(color = 'rgba(227, 134, 211, 0.8)'),\n                    text= df.Name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Sales in North America (in millions) and Sales in Europe (in millions) vs Rank of Top 100 Video Games',\n              xaxis= dict(title= 'World Rank',ticklen= 9,zeroline= True)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","94e3a3f3":"# prepare data frames\ndf2010 = vgsales[vgsales.Year == 2010].iloc[:100,:]\ndf2011 = vgsales[vgsales.Year == 2011].iloc[:100,:]\ndf2012 = vgsales[vgsales.Year == 2012].iloc[:100,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2010.Rank,\n                    y = df2010.Global_Sales,\n                    mode = \"markers\",\n                    name = \"2010\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2010.Name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2011.Rank,\n                    y = df2011.Global_Sales,\n                    mode = \"markers\",\n                    name = \"2011\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2011.Name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2012.Rank,\n                    y = df2012.Global_Sales,\n                    mode = \"markers\",\n                    name = \"2012\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2012.Name)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Total Worldwide Sales (in millions) vs World Rank of top 100 Games with 2010, 2011 and 2012 years',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Worldwide Sales',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","c02180cf":"# prepare data frames\ndf2015 = vgsales[vgsales.Year == 2015].iloc[:3,:]\ndf2015","a8efa6c2":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2015.Name,\n                y = df2015.EU_Sales,\n                name = \"Sales in Europe\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2015.Platform)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2015.Name,\n                y = df2015.JP_Sales,\n                name = \"Sales in Japan\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2015.Platform)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","3aa56a08":"# data preparation\ndf2014 = vgsales[vgsales.Year == 2014].iloc[:5,:]\npie1 = df2014.Global_Sales\nlabels = df2014.Name\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Toatal Sales Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Video Games Total Sales Rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 1},\n              \"showarrow\": False,\n              \"text\": \"Total Sales\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","f285e61b":"# data preparation\ndf2015 = vgsales[vgsales.Year == 2015].iloc[:20,:]\n\ndata = [\n    {\n        'y': df2015.NA_Sales,\n        'x': df2015.Rank,\n        'mode': 'markers',\n        'marker': {\n            'color': df2015.EU_Sales,\n            'size': df2015.Global_Sales,\n            'showscale': True\n        },\n        \"text\" :  df2015.Name    \n    }\n]\niplot(data)","674220be":"# prepare data\nx2011 = vgsales[vgsales.Year == 2011].iloc[:200,:]\nx2012 = vgsales[vgsales.Year == 2012].iloc[:200,:]\nx2011=x2011.Global_Sales\nx2012=x2012.Global_Sales\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(0, 250, 0, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(190, 0, 150, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Global Sales in 2011 and 2012',\n                   xaxis=dict(title='Global Sales'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2cd7cb15":"# data prepararion\nx2011 = vgsales.Name[vgsales.Year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","2a1bc490":"# data preparation\nx2015 = vgsales[vgsales.Year == 2015].iloc[:100,:] # For first 100 Video Games\n\ntrace0 = go.Box(\n    y=x2015.Global_Sales,\n    name = 'Global Sales of  Video Games in 2015',\n    marker = dict(\n        color = 'rgb(255, 0, 0)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.EU_Sales,\n    name = 'Europe Sales of  Video Games in 2015',\n    marker = dict(\n        color = 'rgb(0, 0, 255)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","acc05306":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = vgsales[vgsales.Year == 2015]\ndata2015 = dataframe.loc[:,[\"NA_Sales\",\"EU_Sales\", \"JP_Sales\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","daf6d2c3":"# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.Rank,\n    y=dataframe.Global_Sales,\n    name = \"Global_Sales\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.Rank,\n    y=dataframe.EU_Sales,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"EU_Sales\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'EU_Sales and Global_Sales vs Rank of Video Games'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","05913e9f":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.Rank,\n    y=dataframe.Other_Sales,\n    z=dataframe.JP_Sales,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(0,0,255)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","05f25957":"trace1 = go.Scatter(\n    x=dataframe.Rank,\n    y=dataframe.Global_Sales,\n    name = \"Global_Sales\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.Rank,\n    y=dataframe.EU_Sales,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"EU_Sales\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.Rank,\n    y=dataframe.JP_Sales,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"JP_Sales\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.Rank,\n    y=dataframe.NA_Sales,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"NA_Sales\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'NA_Sales, EU_Sales, JP_Sales and Global_Sales VS World Rank of Video Games'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","1dbffb6f":"<a id=\"1\"><\/a> <br>\n# Loading Data and Explanation of Features","821f0741":"<a id=\"8\"><\/a> <br>\n# Word Cloud\nNot a pyplot but learning it is good for visualization. Lets look at which Video Game is mentioned most in 2011.\n* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the country name list(x2011) a word cloud","d74bdafe":"As you see here there is no NaN value anymore.","754f5a3e":"<a id=\"2\"><\/a> <br>\n# Line Charts\nLine Charts Example: Sales in North America (in millions) and Sales in Europe (in millions) vs Rank of Top 100 Video Games\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","1208d37f":"<a id=\"4\"><\/a> <br>\n# Bar Charts\nFirst Bar Charts Example: Sales in Europe (in millions) and Sales in Japan (in millions) of top 3 Video Games in 2015\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","4f5ca116":"### Video Game Sales Dataset includes 11 features that are:\n\n    1. Rank             \n    2. Name       \n    3. Platform               \n    4. Year                \n    5. Genre            \n    6. Publisher                 \n    7. NA_Sales                \n    8. EU_Sales                   \n    9. JP_Sales              \n    10. Other_Sales             \n    11. Global Sales      ","4160fea4":"<a id=\"9\"><\/a> <br>\n# Box Plots\n* Box Plots\n    * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.\n        \n    * trace = box\n        * y = data we want to visualize with box plot \n        * marker = color","810d4e12":"<a id=\"6\"><\/a> <br>\n# Bubble Charts\nBubble Charts Example: World rank (first 20) vs Nort America Sales with Europe Sales and Global Sales (color) in 2015\n* x = x axis\n* y = y axis\n* mode = markers(scatter)\n*  marker = marker properties\n    * color = third dimension of plot. Internaltional score\n    * size = fourth dimension of plot. Number of students\n* text: university names","921f42b5":"<a id=\"13\"><\/a> <br>\n# Multiple Subplots\n<font color='Blue'>\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<font color='black'>","ff33d3b4":"<a id=\"12\"><\/a> <br>\n# 3D Scatter Plot with Colorscaling\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<font color='black'>\n* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale:  actually it is 4th dimension","27a4be33":"<a id=\"7\"><\/a> <br>\n# Histogram\nLets look at histogram of Global Sales in 2011 and 2012 years. \n* trace1 = first histogram\n    * x = x axis\n    * y = y axis\n    * opacity = opacity of histogram\n    * name = name of legend\n    * marker = color of histogram\n* trace2 = second histogram\n* layout = layout \n    * barmode = mode of histogram like overlay. Also you can change it with *stack*","d6e4c2f8":"# INTRODUCTION\n* In this kernel, we will visualise Video Game Sales Dataset by using plotly library.\n    * Plotly library: Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.\n\n<br>Content:\n1. [Loading Data and Explanation of Features](#1)\n1. [Line Charts](#2)\n1. [Scatter Charts](#3)\n1. [Bar Charts](#4)\n1. [Pie Charts](#5)\n1. [Bubble Charts](#6)\n1. [Histogram](#7)\n1. [Word Cloud](#8)\n1. [Box Plot](#9)\n1. [Scatter Plot Matrix](#10)\n1. [Inset Plots](#11)\n1. [3D Scatter Plot with Colorscaling](#12)\n1. [Multiple Subplots](#13)\n","a6b48380":"<a id=\"10\"><\/a> <br>\n# Scatter Matrix Plots\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n* import figure factory as ff\n* create_scatterplotmatrix = creates scatter plot\n    * data2015 = prepared data. It includes NA_Sales, NA_Sales and NA_Sales with index from 1 to 601\n    * colormap = color map of scatter plot\n    * colormap_type = color type of scatter plot\n    * height and weight","3eb0d098":"<a id=\"11\"><\/a> <br>\n# Inset Plots\n<font color='Blue'>\nInset Matrix = 2 plots are in one frame\n<font color='black'>","7781fc35":"<a id=\"5\"><\/a> <br>\n# Pie Charts\nPie Charts Example: Total Sales rate of top 5 Video Games in 2014\n\n* fig: create figures\n    * data: plot type\n        * values: values of plot\n        * labels: labels of plot\n        * name: name of plots\n        * hoverinfo: information in hover\n        * hole: hole width\n        * type: plot type like pie\n    * layout: layout of plot\n        * title: title of layout\n        * annotations: font, showarrow, text, x, y","6e1ce8be":"<a id=\"3\"><\/a> <br>\n# Scatter\nScatter Example: Total worldwide sales vs world rank of top 100 Games with 2010, 2011 and 2012 years\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout"}}