{"cell_type":{"ffc56037":"code","6c045e42":"code","631536af":"code","b748ccc3":"code","e1072aae":"code","f7028916":"code","d2f421f4":"code","1b0c8974":"code","d0d060cb":"code","816d5a6e":"code","45c425a1":"code","23206928":"code","7e128987":"code","297df481":"code","bf45b786":"code","e058be47":"code","aa650443":"code","1bca7c39":"code","92c4c961":"code","9d5c527e":"code","bb6ba499":"code","92e31233":"code","5079b9b3":"code","1e84e10b":"code","a97c8263":"code","a0feb3f2":"code","c95c878c":"code","058ca608":"code","fd86be1e":"code","fce37439":"code","9f33f506":"code","5bfad983":"markdown","12418ef6":"markdown","195ac704":"markdown","09f9099e":"markdown","813b9c23":"markdown"},"source":{"ffc56037":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport folium\nfrom folium import Marker, Circle, PolyLine\nfrom folium.plugins import HeatMap, MarkerCluster\nimport datetime as dt","6c045e42":"case_df = pd.read_csv('..\/input\/coronavirusdataset\/case.csv')\npatient_df = pd.read_csv('..\/input\/coronavirusdataset\/patient.csv')\nroute_df = pd.read_csv('..\/input\/coronavirusdataset\/route.csv')\ntime_df = pd.read_csv('..\/input\/coronavirusdataset\/time.csv')\ntrend_df = pd.read_csv('..\/input\/coronavirusdataset\/trend.csv')\n","631536af":"case_df.head()","b748ccc3":"patient_df.head()","e1072aae":"route_df.head()","f7028916":"time_df.head()","d2f421f4":"trend_df.head()","1b0c8974":"trend_df.shape","d0d060cb":"trend_df = trend_df.set_index('date')\ntrend_df.head()","816d5a6e":"import matplotlib.ticker as ticker\n\nfig, ax = plt.subplots(figsize=(15, 10))\nsns.lineplot(data=trend_df, ax=ax)\nplt.title('The Trend of Cold, Flu, Pneumonia, and Coronavirus')\n\nfor item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_yticklabels()):\n    item.set_fontsize(20)\nfor item in ax.get_xticklabels():\n    item.set_fontsize(10)    \n    \ntick_spacing = 5\nax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))\nfig.autofmt_xdate()\n\nplt.show()","45c425a1":"time_df.shape","23206928":"time_df.columns","7e128987":"time_df = time_df.set_index('date')\ntime_df.head()","297df481":"time_df.describe()","bf45b786":"time_df.info()","e058be47":"time_df['time'].value_counts()","aa650443":"fig, ax = plt.subplots(figsize=(8, 8))\nsns.lineplot(data=time_df[['test', 'negative', 'confirmed', 'released', 'deceased']], ax=ax)\nplt.title('The Number of Tests and Results')\n\nfor item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_yticklabels()):\n    item.set_fontsize(20)\nfor item in ax.get_xticklabels():\n    item.set_fontsize(10)    \n    \ntick_spacing = 5\nax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))\nfig.autofmt_xdate()\n\nplt.show()","1bca7c39":"last_date = max(time_df.index)\nlatest_numbers = time_df.drop(['time', 'test', 'negative', 'confirmed', 'released', 'deceased'], axis=1).loc[last_date, :]\n\nfig = px.pie(values=latest_numbers.values, names=latest_numbers.index, title='Distribution of Cases in South Korea')\nfig.update_traces(textposition='inside')\nfig.show()","92c4c961":"fig, ax = plt.subplots( figsize=(8, 8))\n\nsns.lineplot(data=time_df[['Daegu', 'Gyeongsangbuk-do', 'Seoul']], ax=ax)\nplt.title('Number of Cases in Daegu, Gyeonsangbuk-do, and Seoul')\n\nfor item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_yticklabels()):\n    item.set_fontsize(20)\nfor item in ax.get_xticklabels():\n    item.set_fontsize(10)    \n    \ntick_spacing = 5\nax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))\nfig.autofmt_xdate()\n\nplt.show()","9d5c527e":"case_df.head()","bb6ba499":"case_df[['latitude', 'longitude']] = case_df[['latitude', 'longitude']].replace('-', np.nan)","92e31233":"m_1 = folium.Map(location=[37, 126], tiles='openstreetmap', zoom_start=6)\n\nfor idx, row in case_df.iterrows():\n    if pd.notnull(row['latitude']):\n        Marker([row['latitude'], row['longitude']], popup=folium.Popup((\n                                                            'Province : {province}<br>'\n                                                            'City : {city}<br>'\n                                                            'Group : {group}<br>'\n                                                            'Infection Case :{case}<br>'\n                                                            'Confirmed : {confirmed}').format(\n                                                            province=row['province'],\n                                                            city=row['city'],\n                                                            group=row['group'],\n                                                            case=row['infection_case'],\n                                                            confirmed=row['confirmed']), max_width=450)\n              ).add_to(m_1)\n\n        Circle(location=[row['latitude'], row['longitude']],\n               radius=row['confirmed']*5,\n               fill=True\n              ).add_to(m_1)\n    \nm_1","5079b9b3":"patient_df = patient_df.set_index('patient_id')\npatient_df.head()","1e84e10b":"patient_df['age'] = np.subtract(2020, patient_df['birth_year'], dtype=np.int32)\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 8))\nfig.tight_layout()\n\nindex = patient_df['sex'].dropna().value_counts().index\nvalues = patient_df['sex'].dropna().value_counts().values\nsns.barplot(x=index, y=values, ax=ax1)\nax1.set_title('Patients Gender Distribution')\n\nage_df = patient_df[['sex', 'age']].dropna()\nsns.distplot(age_df.loc[age_df['sex']=='male']['age'], hist=True, bins=30, ax=ax2)\nax2.set_title('Male Age Distribution')\n\nsns.distplot(age_df.loc[age_df['sex']=='female']['age'], hist=True, bins=30, ax=ax3)\nax3.set_title('Female Age Distribution')\n    \nplt.show()\n","a97c8263":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))\nfig.tight_layout()\n\nindex = patient_df['region'].value_counts().index\nvalues = patient_df['region'].value_counts().values\nsns.barplot(y=index, x=values, ax=ax1)\nax1.set_title('Region')\n\nindex = patient_df['group'].value_counts().index\nvalues = patient_df['group'].value_counts().values\nsns.barplot(y=index, x=values, ax=ax2)\nax2.set_title('Group')\n\nindex = patient_df['infection_reason'].value_counts().index\nvalues = patient_df['infection_reason'].value_counts().values\nsns.barplot(y=index, x=values, ax=ax3)\nax3.set_title('Infection Reason')\n    \nplt.show()","a0feb3f2":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(15, 8))\nfig.tight_layout()\n\nindex = patient_df['state'].value_counts().index\nvalues = patient_df['state'].value_counts().values\nsns.barplot(x=index, y=values, ax=ax1)\nax1.set_title('State')\n\nindex = patient_df['infected_by'].value_counts().index.astype(int)\nvalues = patient_df['infected_by'].value_counts().values\nsns.barplot(x=index, y=values, ax=ax2)\nax2.set_title(\"Infected by (patient's id)\")\n\nsns.distplot(patient_df['contact_number'].dropna(), hist=False, bins=5,ax=ax3).set(xlim=0)\nax3.set_title('Contact Number')\n\nplt.show()","c95c878c":"patient_df['confirmed_date'] = pd.to_datetime(patient_df['confirmed_date'])\npatient_df['released_date'] = pd.to_datetime(patient_df['released_date'])\npatient_df['deceased_date'] = pd.to_datetime(patient_df['deceased_date'])","058ca608":"patient_df['period_before_release'] = patient_df['released_date'] - patient_df['confirmed_date']\npatient_df['period_before_death'] = patient_df['deceased_date'] - patient_df['confirmed_date']","fd86be1e":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 8))\nfig.tight_layout()\n\nperiod_df = patient_df['period_before_release'].dropna().dt.days\n\nsns.distplot(period_df, hist=False, bins=5,ax=ax1).set(xlim=0)\nax1.set_title('Time Between Confirmed and Released (days)')\n\nperiod_df = patient_df['period_before_death'].dropna().dt.days\n\nsns.distplot(period_df, hist=False, bins=5,ax=ax2).set(xlim=0)\nax2.set_title('Time Between Confirmed and Death (days)')\n\nplt.show()","fce37439":"route_df.head()","9f33f506":"m_2 = folium.Map(location=[37, 126], tiles='cartodbpositron', zoom_start=6)\n\ncurrent_id = 1\npoints = []\n\nfor idx, row in route_df.iterrows():\n    if pd.notnull(row['latitude']):\n        (Marker([row['latitude'], row['longitude']], \n               icon=folium.Icon(color='red'),\n               popup=folium.Popup((\n                                                            'Patient id : {patient_id}<br>'\n                                                            'Date : {date}<br>'\n                                                            'Province : {province}<br>'\n                                                            'City :{city}<br>'\n                                                            'Visit : {visit}').format(\n                                                            patient_id=row['patient_id'],\n                                                            date=row['date'],\n                                                            province=row['province'],\n                                                            city=row['city'],\n                                                            visit=row['visit']), max_width=450)\n              )).add_to(m_2)\n        \n        if row['patient_id'] == current_id:\n            points.append(tuple([row['latitude'], row['longitude']]))\n        else :\n            PolyLine(points, color='blue').add_to(m_2)\n            current_id = row['patient_id']\n            points = []\n            points.append(tuple([row['latitude'], row['longitude']]))\n\nm_2","5bfad983":"# Case","12418ef6":"# Trend","195ac704":"# Patient","09f9099e":"# Route","813b9c23":"# Time"}}