{"cell_type":{"47904068":"code","1b55c44b":"code","2bac6e50":"code","74ec88a0":"code","cdd946e2":"code","4bf8b00b":"code","fb9fb7c1":"code","1e3f77d5":"code","686a42f6":"code","6225cd40":"code","1f1d088a":"code","143c6bf2":"code","58ebe50b":"markdown","e457c172":"markdown","7119251c":"markdown","2e1e071a":"markdown","7e954a68":"markdown","a51af125":"markdown","0dccda90":"markdown","4fce27bb":"markdown","71398406":"markdown","93857362":"markdown","0334b49b":"markdown","26d29a94":"markdown"},"source":{"47904068":"# library for manipulating the csv data\nimport pandas as pd\n\n# library for scientific calculations on numbers + linear algebra\nimport numpy as np\nimport math\n\n# library for regular plot visualizations\nimport matplotlib.pyplot as plt\n\n#library for responsive visualizations\nimport plotly.express as px\n","1b55c44b":"data = pd.read_csv('..\/input\/auto-insurance-in-sweden\/swedish_insurance.csv')\ndata.info()","2bac6e50":"print(data.columns)\ndata.head(10)","74ec88a0":"fig = px.box(data['X'], points = 'all')\nfig.update_layout(title = f'Distribution of X',title_x=0.5, yaxis_title= \"Number of Insurance Claims\")\nfig.show()\n\nfig = px.box(data['Y'], points = 'all')\nfig.update_layout(title = f'Distribution of Y',title_x=0.5, yaxis_title= \"Amount of Insurance Paid\")\nfig.show()","cdd946e2":"fig = px.scatter(x = data['X'], y=data['Y'])\nfig.update_layout(title = 'Swedish Automobiles Data', title_x=0.5, xaxis_title= \"Number of Claims\", yaxis_title=\"Payment in Claims\", height = 500, width = 700)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.show()","4bf8b00b":"data['Y']","fb9fb7c1":"mean_x = np.mean(data['X'])\nmean_y = np.mean(data['Y'])\n\nvar_x = np.var(data['X'])\nvar_y = np.var(data['Y'])\n\n\nprint('x stats: mean= %.3f   variance= %.3f' % (mean_x, var_x))\nprint('y stats: mean= %.3f   variance= %.3f' % (mean_y, var_y))","1e3f77d5":"# Calculate covariance between x and y\ndef covariance(x, y):\n    mean_x = np.mean(x)\n    mean_y = np.mean(y)\n    covar = 0.0\n    for i in range(len(x)):\n        covar += (x[i] - mean_x) * (y[i] - mean_y)\n    return covar\/len(x)\n\n\n\ncovar_xy = covariance(data['X'], data['Y'])\nprint(f'Cov(X,Y): {covar_xy}')","686a42f6":"b1 = covar_xy \/ var_x\nb0 = mean_y - b1 * mean_x\n\nprint(f'Coefficents:\\n b0: {b0}  b1: {b1} ')\n","6225cd40":"x = data['X'].values.copy()\nx","1f1d088a":"# Taking the values from the dataframe and sorting only X for the ease of plotting line later on\nx = data['X'].values.copy()\n# x.sort()\nprint(f'x: {x}')\n\n# Predicting the new data based on calculated coeffiecents. \ny_hat = b0 + b1 * x\nprint(f'\\n\\ny_hat: {y_hat}')\n\ny = data['Y'].values\nprint(f'\\n\\ny: {y}')","143c6bf2":"import plotly.graph_objects as go\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=data['X'], y=data['Y'], name='train', mode='markers', marker_color='rgba(152, 0, 0, .8)'))\nfig.add_trace(go.Scatter(x=data['X'], y=y_hat, name='prediction', mode='lines+markers', marker_color='rgba(0, 152, 0, .8)'))\n\nfig.update_layout(title = f'Swedish Automobiles Data\\n (visual comparison for correctness)',title_x=0.5, xaxis_title= \"Number of Claims\", yaxis_title=\"Payment in Claims\")\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.show()","58ebe50b":"Let's load some basic python libraries that we will need over the course of this tutorial. ","e457c172":"Let's have a look at the data itself. You can either use `matplotlib.pyplot` or `plotly` for visualization. The latter one produces responsive visualizations. Try hovering over the points on the graph to see the actual values.","7119251c":"### 5. Visual Comparison for Correctness ","2e1e071a":"## Where To Go From Here \n* <font color=\"red\">Can you find out the **mean squared error (MSE)** of the predictions???<\/font>\n* Extend the same problem for multiple input features. ","7e954a68":"### Reading the data","a51af125":"**This tutorial is broken down into five parts:<br>**\n&#9832; Calculate Mean and Variance.<br>\n&#9832; Calculate Covariance (X,Y).<br>\n&#9832; Estimate Coefficients.<br>\n&#9832; Make Predictions.<br>\n&#9832; Visual Comparison for Correctness.<br>\nThese steps will give you the foundation you need to implement and train simple linear regression models for your own prediction problems.","0dccda90":"### 3. Estimate Coefficients\nWe must estimate the values for two coefficients in simple linear regression.","4fce27bb":"### 4. Make Predictions\nThe simple linear regression model is a line defined by coefficients estimated from training data. Once the coefficients are estimated, we can use them to make predictions. The equation to make predictions with a simple linear regression model is as follows:\n$$ \\hat{y} = b_0 + b_1 * x $$","71398406":"This is a very simple tutorial intended for the beginners to understand and implement Simple Linear Regression from the scratch. \n\n\n\n<font color='blue'> Simple Linear Regression <\/font> is a great first machine learning algorithm to implement as it requires you to estimate properties from your training dataset, but is simple enough for beginners to understand. Linear regression is a prediction method that is more than 200 years old. In this tutorial, you will discover how to implement the simple linear regression algorithm from scratch in Python.\n\nAfter completing this tutorial you will know:<br>\n&#9632; How to estimate statistical quantities from training data.<br>\n&#9632; How to estimate linear regression coefficients from data.<br>\n&#9632; How to make predictions using linear regression for new data.<br>\n\n\nLinear regression assumes a **linear or straight line relationship between the input variables (X) and the single output variable (y).** More specifically, that output (y) can be calculated from a linear combination of the input variables (X). When there is a single input variable, the method is referred to as a simple linear regression.\n\nIn simple linear regression we can use statistics on the training data to estimate the coefficients required by the model to make predictions on new data.\n\nThe line for a simple linear regression model can be written as:\n\n$$ y = b_0 + b_1 * x $$\nwhere $b_0$ and $b_1$ are the coefficients we must estimate from the training data. Once the coefficients are known, we can use this equation to estimate output values for $y$ given new input examples of $x$. It requires that you calculate statistical properties from the data such as **mean, variance** and **covariance.**\n\n\nIf somehow this notebook helps you, please do <font color='red'> UPVOTE <\/font>","93857362":"### 2. Calculate Covariance.\nThe covariance of two groups of numbers describes how those numbers change together. Covariance is a generalization of correlation. Correlation describes the relationship between two groups of numbers, whereas covariance can describe the relationship between two or more groups of numbers. It is calculated by the following formula. \n$$ Cov(X,Y) = \\frac{\\sum{(X_i - \\overline{X})}{(Y_j - \\overline{Y})}}{n} $$\n\nYou can simply implement it by yourself or use builtin function `numpy.cov()`\n","0334b49b":"## <font color = 'blue'> Swedish Insurance Dataset<\/font>\nWe will use a real dataset to demonstrate simple linear regression. The dataset is called the **\u201cAuto Insurance in Sweden\u201d** dataset and involves **<font color='blue'> predicting the total payment for all the claims in thousands of Swedish Kronor (y) given the total number of claims (x). <\/font>**\n\nThis means that for a new number of claims (x) we will be able to predict the total payment of claims (y).","26d29a94":"### 1. Calculate Mean and Variance.\nAs said earlier, simple linear regression uses mean and variance of the given data. We will use `numpy` builtin functions to calculate them. "}}