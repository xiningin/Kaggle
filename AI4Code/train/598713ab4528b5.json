{"cell_type":{"e66b4cd2":"code","f49d6dba":"code","c81c5e07":"code","dcd56eea":"code","d1c98986":"code","115b4dc4":"code","1ade0f79":"code","ac4f189d":"code","35b567d7":"code","79e2f81e":"code","e51cdfc0":"code","2a00cd05":"code","7d916372":"code","23d915b0":"code","b7b76f62":"code","bb2071c9":"code","c63ea450":"code","cf9f2d6d":"code","93228300":"code","add376cc":"code","fc542280":"code","1e20ae8f":"code","9e4acc54":"code","bc5b59a3":"code","1a59b690":"markdown","1fc7f0be":"markdown","821094dc":"markdown","8975b469":"markdown"},"source":{"e66b4cd2":"# Importing packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport gc\n\npd.plotting.register_matplotlib_converters()\n\n# matplotlib config\n\nplt.style.use('fivethirtyeight') #'seaborn-notebook'\nplt.rcParams.update({'font.size': 14})\n\n# Load data\nraw_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',\n                parse_dates = ['ObservationDate','Last Update'],\n                dtype={'Confirmed':np.int32, 'Deaths':np.int32, 'Recovered':np.int32})\n\ncountry_profile_variables = pd.read_csv('..\/input\/undata-country-profiles\/country_profile_variables.csv')\n\nprint(f\"donn\u00e9e la plus r\u00e9cente :{raw_data['Last Update'].max()}, {raw_data['ObservationDate'].max()}\")","f49d6dba":"# prepare data\n\n# country population :\n# normalize country names, add missing country population data (cf data[data.isnull().any(axis=1)])\n\ncountry_population = country_profile_variables[['country', 'Population in thousands (2017)']].copy()\n\ncountry_population.columns = [\"Country\", \"population\"]\ncountry_name_correction = {\n    'Bolivia (Plurinational State of)': 'Bolivia',\n    'Brunei Darussalam': 'Brunei',\n    'Czechia':'Czech Republic',\n    'China, Hong Kong SAR':'Hong Kong',\n    'Democratic Republic of the Congo': 'Congo (Kinshasa)',\n    'Congo': 'Congo (Brazzaville)',\n    'Iran (Islamic Republic of)':'Iran',\n    'China, Macao SAR':'Macau',\n    'China':'Mainland China',\n    'The former Yugoslav Republic of Macedonia':'North Macedonia',\n    'Republic of Moldova': 'Moldova',\n    'Russian Federation':'Russia',\n    'Republic of Korea':'South Korea',\n    'State of Palestine': 'Palestine',\n    'United Kingdom':'UK',\n    'United Republic of Tanzania': 'Tanzania',\n    'United States of America':'US',\n    'Venezuela (Bolivarian Republic of)': 'Venezuela',\n    'Viet Nam':'Vietnam'\n    } #   'North Ireland',          'Saint Barthelemy',\n\ndef normalize_country_name(name):\n    if name in country_name_correction:\n        return country_name_correction[name]\n    else:\n        return name\ncountry_population[\"Country\"] = country_population.Country.apply(normalize_country_name)\n\ncountry_population = country_population.append(pd.DataFrame([\n    ['Taiwan',23780],\n    ['Diamond Princess',4],\n    ['Guernsey', 67],\n    ['Jersey', 98],\n    ['Kosovo', 1831],\n    ['Vatican City', 1],\n    ['Reunion', 860],\n    ['Ivory Coast', 2490]], columns=country_population.columns), ignore_index=True)\n\nraw_data['Country\/Region'] = raw_data['Country\/Region'].apply(str.strip)\nraw_data.fillna(value='NA', inplace=True)\n\n# deduplicate to be safe\n\ndata = raw_data.groupby(['Country\/Region','Province\/State','ObservationDate'])[['Confirmed', 'Deaths', 'Recovered']].max().reset_index()\ndata.rename(columns={'Country\/Region': 'Country'}, inplace=True)\n\ndata.loc[(data.Country == 'Others'), 'Country'] = 'Diamond Princess'\ndata.loc[(data.Country == 'Republic of the Congo'), 'Country'] = 'Congo (Kinshasa)'\ndata.loc[(data.Country == 'The Gambia') | (data.Country == 'Gambia, The'), 'Country'] = 'Gambia'\ndata.loc[(data.Country == 'The Bahamas')| (data.Country == 'Bahamas, The'), 'Country'] = 'Bahamas'\ndata.loc[(data.Country == 'occupied Palestinian territory'), 'Country'] = 'Palestine'\ndata.loc[(data.Country == 'Eswatini'), 'Country'] = 'Swaziland'\ndata.loc[(data.Country == 'Republic of Ireland'), 'Country'] = 'Ireland'\n\ndata = data.merge(country_population, on='Country', how=\"left\")\n\n# split Hubei from China\ndata.loc[data['Province\/State'] == 'Hubei', 'population'] = 58500\ndata.loc[data['Country']        == 'China', 'Country'] = 'China other'\ndata.loc[data['Province\/State'] == 'Hubei', 'Country'] = 'Hubei'\n\n\n# segment column is either top country or rest of the world\n\ndef get_place(row):\n    \"\"\"get_place return top country or 'Rest of the World'\"\"\"\n    # compute get_place.top_countries only once\n    if not hasattr(get_place, \"top_countries\"):\n        get_place.top_countries = set(data\n                    .groupby(['Country', 'ObservationDate'])['Confirmed'].sum().reset_index()\\\n                    .groupby('Country').max().reset_index()\\\n                    .sort_values('Confirmed', ascending=False)['Country'].head(15)\n                    )\n        \n    if row['Country'] in get_place.top_countries:\n        return row['Country']\n    else: return 'Rest of the World'\n    \n\ndaily = data.groupby(['Country', 'ObservationDate']).agg({\n            'Confirmed':'sum', \n            'Deaths':'sum',\n            'Recovered':'sum',\n            'population':'mean',\n}).reset_index()\ndaily = daily[daily.Confirmed > 0]\ndaily.rename(columns={'ObservationDate': 'Date'}, inplace=True)\ndaily['segment'] = daily.apply(lambda row: get_place(row), axis=1)\ndaily['confirmed_per_population'] = daily.Confirmed \/ daily.population\ndaily['deaths_per_population'] = daily.Deaths \/ daily.population\ndaily.sort_values(['Country', 'Date'], inplace=True)\ndaily['new_confirmed'] = daily.groupby(\"Country\")[\"Confirmed\"].diff().fillna(0)\ndaily['composite'] = 40 * daily.Deaths + daily.Confirmed\n\n\n#ratio score \/ population\ndf = daily.groupby(['segment']).population.mean().reset_index()\ndf.loc[df.segment == \"Rest of the World\", \"population\"] = \\\n    7530000 - df.loc[(df.segment != \"Rest of the World\") , 'population'].sum()\ndf.columns = ['segment', 'segment_population']\ndaily = daily.merge(df, on='segment')\n\n# latest data\n\nlatest = daily[daily.Date == daily.Date.max()]\n\n#data.head()\ndaily.head()","c81c5e07":"df = daily.groupby(['segment']).population.mean().reset_index()\ndf.loc[df.segment == \"Rest of the World\", \"population\"] = \\\n    7530000 - df.loc[(df.segment != \"Rest of the World\") , 'population'].sum()","dcd56eea":"print ('Total confirmed cases: %.d' %np.sum(latest['Confirmed']))\nprint ('Total death cases: %.d' %np.sum(latest['Deaths']))\nprint ('Total recovered cases: %.d' %np.sum(latest['Recovered']))\n\ndf = latest.groupby('segment').agg({\n            'Confirmed':'sum', \n            'Deaths':'sum',\n            'Recovered':'sum',\n            'population':'min',\n            #'ratio':'mean'\n})\ndf['Death Rate'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['Recovery Rate'] = df['Recovered'] \/ df['Confirmed'] * 100\ndf","d1c98986":"# Confirmed Cases World ex-China\nworldstat = latest[(latest.Country != 'Mainland China') & (latest.Country != 'Hubei')].groupby('Country').sum()\ndf = worldstat.sort_values('Confirmed', ascending=False).head(20)\nplt.figure(figsize=(20,10))\nplt.subplot(1, 2, 1)\nsns.barplot(df.Confirmed, df.index)\nplt.title('Confirmed cases World ex-China (top 20)')\nplt.yticks(fontsize=20)\n\n# Death Cases World ex-China\ndf = worldstat.sort_values('Deaths', ascending=False).head(20)\n#df = df[df.Deaths>0]\nplt.subplot(1, 2, 2)\nsns.barplot(df.Deaths, df.index)\nplt.title('Deaths cases World ex-China (top 20)')\nplt.yticks(fontsize=16)\n\nplt.show()\ndf","115b4dc4":"# ratio confirmed \/ population\n\nplt.figure(figsize=(20,18))\nworldstat = latest[latest.population > 100].groupby('Country').sum()\n\ndf = worldstat.sort_values('confirmed_per_population', ascending=False)\ndf = df.iloc[:50, :]\nplt.subplot(1, 2, 1)\nsns.barplot(df.confirmed_per_population, df.index)\nplt.title('confirmed \/ population 000 (top 50)')\nplt.yticks(fontsize=16)\n\n\ndf = worldstat.sort_values('deaths_per_population', ascending=False)\ndf = df.iloc[:50, :]\nplt.subplot(1, 2, 2)\nsns.barplot(df.deaths_per_population, df.index)\nplt.title('deaths \/ population 000 (top 50)')\nplt.yticks(fontsize=16)\nplt.show()\n","1ade0f79":"# composite score\n\ndf = pd.pivot_table(daily.dropna(subset=['composite']),\n                    index='Date', \n                    columns='segment',\n                    values='composite',\n                    aggfunc=np.sum)\\\n        .fillna(method='ffill')\ndf = df.reindex(df.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,10))\n\nn=df.shape[1] + 1\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(df, marker='o')\nplt.yscale('log')\nplt.title('composite score (Confirmed + 20 * Death)',fontsize=20)\nplt.legend(df.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()\ndf.head()","ac4f189d":"# composite score \/ population\ndf = daily[daily.segment != 'Diamond Princess'][['Date', 'segment', 'composite', 'segment_population']]\ndf['composite_per_segment_population'] = df.composite \/ df.segment_population\n\ndf = pd.pivot_table(\n                df.dropna(subset=['composite_per_segment_population']),\n                index='Date', \n                columns='segment',\n                values='composite_per_segment_population',\n                aggfunc=np.sum)\\\n    .fillna(method='ffill')\n\ndf =df.reindex(df.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,10))\n\nn=df.shape[1] + 0\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(df, marker='o')\nplt.yscale('log')\nplt.title('composite score \/ population 000', fontsize=20)\nplt.legend(df.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()\n","35b567d7":"# composite score \/ population\ndf = daily[(daily.segment != 'Diamond Princess') &\n           (daily.segment != 'Hubei') &\n           (daily.segment != 'Iran') &\n           (daily.segment != 'Mainland China') &\n           (daily.segment != 'Rest of the World')][['Date', 'segment', 'composite', 'segment_population']]\ndf['composite_per_segment_population'] = df.composite \/ df.segment_population\n\nconfirm = pd.pivot_table(\n                df.dropna(subset=['composite_per_segment_population']),\n                index='Date', \n                columns='segment',\n                values='composite_per_segment_population',\n                aggfunc=np.sum)\\\n    .fillna(method='ffill')\n\nconfirm =confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,12))\n\nn=confirm.shape[1] + 1\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\nplt.yscale('log')\nplt.title('composite score \/ population 000 (excluding China, Iran)', fontsize=20)\nplt.legend(confirm.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","79e2f81e":"# composite score \/ population\ndf = daily[(daily.segment != 'Diamond Princess') &\n           (daily.segment != 'Hubei') &\n           (daily.segment != 'Iran') &\n           (daily.segment != 'Mainland China') &\n           (daily.segment != 'Rest of the World') &\n           (daily.Date >= '2020-03-01')][['Date', 'segment', 'composite', 'segment_population']]\ndf['composite_per_segment_population'] = df.composite \/ df.segment_population\n\nconfirm = pd.pivot_table(\n                df.dropna(subset=['composite_per_segment_population']),\n                index='Date', \n                columns='segment',\n                values='composite_per_segment_population',\n                aggfunc=np.sum)\\\n    .fillna(method='ffill')\n\nconfirm =confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,12))\n\nn=confirm.shape[1] + 1\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\nplt.yscale('log')\nplt.title('composite score \/ population 000 (excluding China, Iran)', fontsize=20)\nplt.legend(confirm.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","e51cdfc0":"# evolution since 2020-03-13 vs +20% daily\nstart_date = \"2020-03-13\"\n\ndf = daily[(daily.segment != 'Diamond Princess') &\n           (daily.segment !='Iran') & \n           (daily.segment != 'Hubei') &\n           (daily.segment != 'Mainland China') &\n           (daily.segment != 'Rest of the World') &\n           (daily.segment != 'Turkey') &\n           (daily.Date >= start_date)\n          ].groupby(['segment', 'Date']).agg({\n            'composite':'sum', \n            'population':'mean',\n}).reset_index()\n\nmin_by_segment = df.groupby(\"segment\").composite.min().to_dict()\n\ndf[\"min_by_segment\"] = df.segment.apply(lambda x: min_by_segment[x])\n\ndf['ratio'] = df.composite \\\n    \/df.min_by_segment\\\n    \/np.exp(\n        (df.Date - datetime.datetime.strptime(start_date, '%Y-%m-%d'))\n        .apply(lambda x: x.total_seconds() \n        \/ 3600.0 \/ 120.0))\n\nconfirm = pd.pivot_table(df.dropna(subset=['ratio']), index='Date', \n                         columns='segment', values='ratio', aggfunc=np.sum).fillna(method='ffill')\n\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,12))\n\nn=confirm.shape[1] + 1\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\n#plt.yscale('log')\nplt.title('composite score (20 * deaths + confirmed) \\nvs +20% daily\\n compared to 2020-03-10', fontsize=20)\nplt.legend(confirm.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","2a00cd05":"# evolution since 2020-03-10 vs +20% daily\nstart_date = \"2020-03-14\"\n\ndf = daily[(daily.segment != 'Diamond Princess') &\n           (daily.segment !='Iran') & \n           (daily.segment != 'Hubei') &\n           (daily.segment != 'Mainland China') &\n           (daily.segment != 'Rest of the World') &\n           (daily.Date >= start_date)\n          ].groupby(['segment', 'Date']).agg({\n            'Deaths':'sum', \n            'population':'mean',\n}).reset_index()\n\nmin_by_segment = df.groupby(\"segment\").Deaths.min().to_dict()\n\ndf[\"min_by_segment\"] = df.segment.apply(lambda x: min_by_segment[x])\n\ndf['ratio'] = df.Deaths \\\n    \/df.min_by_segment\\\n    \/np.exp(\n        (df.Date - datetime.datetime.strptime(start_date, '%Y-%m-%d'))\n        .apply(lambda x: x.total_seconds() \n        \/ 3600.0 \/ 120.0))\n\nconfirm = pd.pivot_table(df.dropna(subset=['ratio']), index='Date', \n                         columns='segment', values='ratio', aggfunc=np.sum).fillna(method='ffill')\n\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,12))\n\nn=confirm.shape[1] + 1\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\n#plt.yscale('log')\nplt.title(f'deaths \\nvs +20% daily\\n compared to {start_date}', fontsize=20)\nplt.legend(confirm.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","7d916372":"daily.head()","23d915b0":"# confirmed\n\nconfirm = pd.pivot_table(daily.dropna(subset=['Confirmed']), index='Date', \n                         columns='segment', values='Confirmed', aggfunc=np.sum).fillna(method='ffill')\n\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,10))\n\nn=confirm.shape[1] + 2\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\nplt.yscale('log')\nplt.title('Confirmed Cases',fontsize=20)\nplt.legend(confirm.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","b7b76f62":"# confirmed\n\ntemp = daily.groupby(['Date', 'segment'])['Confirmed'].sum()\ntemp = temp.reset_index()\ntemp = temp.assign(segment_max=temp.groupby('segment')['Confirmed'].transform('max'))\ntemp = temp.sort_values(by=['Date', 'segment_max'])\n\n#temp = daily.assign(segment_max=daily.groupby('segment')['Confirmed'].transform('max'))\ntop = temp.groupby('segment')['Confirmed'].max().reset_index().sort_values('Confirmed', ascending=False)['segment'][:12].to_list()\n\nplt.style.use('seaborn')\n#sns.set(font_scale=1.1)\nsns.set()\n\ng = sns.FacetGrid(temp, col=\"segment\", hue=\"segment\", \n                  sharey=True, col_wrap=6, col_order =top )\ng = g.map(plt.plot, \"Date\", \"Confirmed\").set(yscale = 'log')\n#grid.set(yticks = ticks, yticklabels = labels)\n#fig, ax = plt.subplots()\n#ax.legend(fontsize=8)\ng.set_titles(size=16)\ng.set_xticklabels(rotation=90, fontsize=8)\nplt.show()\ntemp","bb2071c9":"# confirmed \/ population\ndf = daily.groupby(['segment', 'Date']).agg({\n            'Confirmed':'sum', \n            'population':'mean',\n}).reset_index()\ndf.loc[df.segment == \"Rest of the World\", \"population\"] = \\\n    7530000 - df.loc[(df.segment != \"Rest of the World\") & (df.Date == df.Date.max()), 'population'].sum()\ndf['ratio'] = df.Confirmed \/ df.population\n\nconfirm = pd.pivot_table(df.dropna(subset=['ratio']), index='Date', \n                         columns='segment', values='ratio', aggfunc=np.sum).fillna(method='ffill')\n\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,10))\n\nn=confirm.shape[1] + 2\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\nplt.yscale('log')\nplt.title('Confirmed Cases \/ population 000', fontsize=20)\nplt.legend(confirm.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","c63ea450":"#France vs Italy confirmed\ndecalage = -8\nconfirm = pd.pivot_table(daily.dropna(subset=['Confirmed']), index='Date', \n                         columns='Country', values='Confirmed', aggfunc=np.sum).fillna(method='ffill')\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nconfirm = confirm[[\"Italy\", \"France\"]]\nconfirm.loc[:,\"France\"] = confirm[\"France\"].shift(decalage)\n\nplt.figure(figsize=(20,15))\n\nn=confirm.shape[1]\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\nplt.yscale('log')\nplt.title(f'Confirmed, France vs Italy shifted ({decalage})', fontsize=20) #,fontweight=\"bold\"\nplt.legend(confirm.columns, loc=2, fontsize=13)\nplt.xticks(rotation=75)\nplt.show()","cf9f2d6d":"#France vs Italy deaths\ndecalage = -10\nconfirm = pd.pivot_table(daily[daily.Date >= \"2020-02-25\"].dropna(subset=['Deaths']),\n                         index='Date', \n                         columns='Country',\n                         values='Deaths',\n                         aggfunc=np.sum).fillna(method='ffill')\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nconfirm = confirm[[\"Italy\", \"France\"]]\nconfirm.loc[:,\"France\"] = confirm[\"France\"].shift(decalage)\n\nplt.figure(figsize=(15,10))\n\nn=confirm.shape[1]\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\n#plt.yscale('log')\nplt.title(f'D\u00e9c\u00e8s France vs Italy (d\u00e9calage: {decalage})', fontsize=20) #,fontweight=\"bold\"\nplt.legend(confirm.columns, loc=2, fontsize=15)\nplt.xticks(rotation=75)\nplt.show()","93228300":"#all coutries\nconfirm = pd.pivot_table(daily.dropna(subset=['Confirmed']), index='Date', \n                         columns='Country', values='Confirmed', aggfunc=np.sum).fillna(method='ffill')\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nconfirm = confirm.loc[:, confirm.loc[confirm.index.max(),:] > 1]\n\nplt.figure(figsize=(20,30))\n\nn=confirm.shape[1]\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\nplt.yscale('log')\nplt.title('Confirmed Cases (all countries with 2+)', fontsize=20) #,fontweight=\"bold\"\nplt.legend(confirm.columns, loc=2, fontsize=13)\nplt.xticks(rotation=75)\nplt.show()","add376cc":"# new cases\nnew_c = pd.pivot_table(daily.dropna(subset=['new_confirmed']), index='Date', \n                         columns='segment', values='new_confirmed', aggfunc=np.sum).fillna(method='ffill')\n\nnew_c = new_c.reindex(new_c.max().sort_values(ascending=False).index, axis=1)\n#new_c=new_c[[ 'South Korea', 'Iran', 'Mainland China', 'Italy', 'France', 'Germany']]\nplt.figure(figsize=(20,10))\n\nn=new_c.shape[1] + 1\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(new_c,  marker='o', ms=10)\n#plt.yscale('log')\nplt.title('new cases excluding Hubei', fontsize=20)\nplt.legend(new_c.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","fc542280":"#new cases\nnew_c = pd.pivot_table(daily.dropna(subset=['new_confirmed']), index='Date', \n                         columns='segment', values='new_confirmed', aggfunc=np.sum).fillna(method='ffill')\n\nnew_c = new_c.reindex(new_c.max().sort_values(ascending=False).index, axis=1)\n#new_c=new_c[['Hubei', 'South Korea', 'Iran', 'Mainland China', 'Italy', 'France', 'Germany']]\nplt.figure(figsize=(20,10))\n\nn=new_c.shape[1] + 1\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(new_c, ls='', marker='o', ms=10)\nplt.yscale('log')\nplt.title('new cases (log scale)', fontsize=20)\nplt.legend(new_c.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","1e20ae8f":"#death\n\ndeath = pd.pivot_table(daily.dropna(subset=['Deaths']), \n                         index='Date', columns='segment', values='Deaths', aggfunc=np.sum).fillna(method = 'ffill')\ndeath = death.reindex(death.max().sort_values(ascending=False).index, axis=1)\ndeath = death[death > 0]\n\nplt.figure(figsize=(20,10))\nplt.axes().set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, death.shape[1]+1)])\n\nplt.plot(death, marker='o')\nplt.yscale('log')\nplt.title('Death Cases', fontsize=20)\nplt.legend(death.columns, loc=2, fontsize=18)\nplt.xticks(rotation=45)\nplt.show()","9e4acc54":"#deaths confirmed \/ population\ndf = daily.groupby(['segment', 'Date']).agg({\n            'Deaths':'sum', \n            'population':'mean',\n}).reset_index()\ndf.loc[df.segment == \"Rest of the World\", \"population\"] = \\\n    7530000 - df.loc[(df.segment != \"Rest of the World\") & (df.Date == df.Date.max()), 'population'].sum()\ndf['ratio'] = df.Deaths \/ df.population\ndf = df[df['ratio'] > 0]\n\nconfirm = pd.pivot_table(df.dropna(subset=['ratio']), index='Date', \n                         columns='segment', values='ratio', aggfunc=np.sum).fillna(method='ffill')\n\nconfirm = confirm.reindex(confirm.max().sort_values(ascending=False).index, axis=1)\n\nplt.figure(figsize=(20,10))\n\nn=confirm.shape[1] + 2\nax = plt.axes()\nax.set_prop_cycle('color',[plt.cm.jet(i) for i in np.linspace(0, 1, n)])\n\nplt.plot(confirm, marker='o')\nplt.yscale('log')\nplt.title('Deaths \/ population 000', fontsize=20)\nplt.legend(confirm.columns, loc=2, fontsize=18)\nplt.xticks(rotation=75)\nplt.show()","bc5b59a3":"population = 65000000\nstabilisation = 0.6 # \"immunit\u00e9 collective\" th\u00e9orique avec R0 = 2.5\ntaux_en_icu = 0.04\ntaux_sympto = 0.5\nnb_patients_icu = population * stabilisation * taux_sympto * taux_en_icu\nnb_lits_icu = 5000 * 2  # source https:\/\/www.euronews.com\/2020\/03\/19\/covid-19-how-many-intensive-care-beds-do-member-states-have\n                        # suppose capacit\u00e9 doubl\u00e9e\nnb_semaines_en_icu = 1.2 # m\u00e9diane 8 jours\nnb = nb_patients_icu * nb_semaines_en_icu \/ nb_lits_icu\nprint(f\"nb de personnes en ICU {int(nb_patients_icu)}\") \nprint(f\"dur\u00e9e pour passer la population sans que le syst\u00e8me de sant\u00e9 soit d\u00e9bord\u00e9 {int(nb)} semaines\")\n","1a59b690":"## Latest status update","1fc7f0be":"# Dataviz of Coronavirus Data\n\nnb \"mainland China\" = China excluding Hubei","821094dc":"## evolution of death","8975b469":"## Evolution of cases"}}