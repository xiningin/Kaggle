{"cell_type":{"df354197":"code","26a387e5":"code","09510fc8":"code","4d3a18dd":"code","56d3d6d9":"code","d00cc4a2":"code","830171e3":"code","a524c297":"code","df2f3920":"code","b353dd96":"code","9b164ece":"code","600abccb":"code","2594cf55":"code","40cf8036":"code","84a0fe82":"code","cb376e1a":"code","49faa5be":"code","ab1a10b1":"code","e869963a":"code","744ed8ff":"code","8d546d19":"code","ca9a64e1":"code","ceeef672":"code","7c481f25":"code","9dd8c3b7":"code","b784d8e7":"code","2c34e968":"code","2b1a9a2c":"code","6123242f":"code","ecb4bb21":"code","a1315531":"code","c1bcea85":"code","bd852383":"code","125280b2":"code","236d74d1":"code","23a4b7ee":"code","ad9fb23b":"code","40127fb8":"code","d7cb629e":"code","f605c0da":"code","18c48945":"markdown","6a7aff96":"markdown","811aad36":"markdown","10a71f93":"markdown","3f00ca7a":"markdown","ea511258":"markdown","c0459b03":"markdown","b2e62afe":"markdown","f365ecc4":"markdown","25ecc11d":"markdown","c698229c":"markdown","c6d204f2":"markdown","6009ff0a":"markdown","5c74a0a5":"markdown","d6921aa1":"markdown","3244de18":"markdown"},"source":{"df354197":"import torch\nfrom torchvision.datasets import ImageFolder\nimport torch.nn.functional as F\nfrom torchvision import transforms\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import random_split\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import DataLoader, SubsetRandomSampler\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport time\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom collections import Counter","26a387e5":"root_folder = '..\/input\/minerals-identification-dataset\/minet'\ntarget_label = ['biotite', 'bornite', 'chrysocolla', 'malachite', \n                'muscovite', 'pyrite', 'quartz']\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","09510fc8":"#load data and tranform it into tensor\ndataset = ImageFolder(root_folder, transform=transforms.ToTensor())\nprint('Data size: ',len(dataset))\ndataset.classes","4d3a18dd":"#check images of the dataset for first 20 images\nfig = plt.figure(figsize=(25, 10))\n\nfor i in range(60):\n    image, label = dataset[i]\n    ax = fig.add_subplot(6, 10, i+1, xticks=[], yticks = [])\n    ax.imshow(image.permute(1,2,0))\n    ax.set_title(target_label[label], color='green')","56d3d6d9":"#count number for each label\ncount = {}\n\nfor i in range(len(dataset)):\n    _, labels = dataset[i]\n    label = target_label[labels]\n    if label not in count:\n        count[label] = 1\n    elif label in count:\n        count[label] += 1\n\n#insert count into dataframe\ndf = pd.DataFrame(count, index=np.arange(1))\ndf = df.transpose().reset_index()\ndf.columns = ['Mineral', 'count']\ndf","d00cc4a2":"#plot barplot for the sake of easy to read\nsns.barplot(df['Mineral'], df['count'])\nplt.title('Dataset for each label');\nplt.xticks(rotation=30)\nplt.grid(axis='y')","830171e3":"#check image size for all datasets\n# torch.FloatTensor of shape (C x H x W) \nheight = []\nweight = []\nfor i in range(len(dataset)):\n    image, label = dataset[i]\n    height.append(image.size(1))\n    weight.append(image.size(2))\nprint(f\"maximum_height:{np.max(height)} \\tminimum_height:{np.min(height)} \\tmean_height:{np.mean(height)}\")\nprint(f\"maximum_weight:{np.max(weight)} \\tminimum_weight:{np.min(weight)} \\tmean_weight:{np.mean(weight)}\")","a524c297":"sorted_height = sorted(height)\nsorted_height[600]","df2f3920":"#transform format to augmetation dataset beacuse our dataset only has 956 images\n#I reload the data and do multiple transformation and resize it\ndata_transform = transforms.Compose([transforms.Resize((224, 224)), \n                                     transforms.RandomRotation(30), \n                                     transforms.RandomVerticalFlip(p=0.5),\n                                     transforms.RandomHorizontalFlip(p=0.5),\n                                     transforms.ToTensor(),\n                                     transforms.Normalize(mean = [0.485, 0.456, 0.406],std = [0.229, 0.224, 0.225])]) #imagenet mean and std\n\nload_data = ImageFolder(root_folder, transform=data_transform)\n\n#check the images result from transformation\nfig = plt.figure(figsize=(25, 4))\nfor i in range(20):\n    image, label = load_data[i]\n    ax = fig.add_subplot(2, 10, i+1, xticks=[], yticks = [])\n    ax.imshow(image.permute(1,2,0))\n    ax.set_title(target_label[label], color='green')","b353dd96":"# split base on random_split\n\n# #ration for data split\n# train_ratio = 0.90 \n# train_size = int(len(load_data)*train_ratio) #90% data training\n# val_size = int((len(load_data) - train_size) * 0.5)  #5% validation\n# test_size = len(load_data) - (train_size + val_size) #5% testing\n\n# datasize = len(load_data)\n# data_idx = [x for x in range(datasize)]\n\n# np.random.seed(97)\n# np.random.shuffle(data_idx)\n\n# train_idx = data_idx[:train_size]\n# val_idx = data_idx[train_size:-test_size]\n# test_idx = data_idx[train_size+val_size:]\n# # #split data into 3 parts train, validation and testing\n# # #train_set, val_set, test_set = random_split(load_data, [train_size, val_size, test_size])\n# print('size of training data: ', len(train_idx))\n# print('size of validation data: ', len(val_idx))\n# print('size of test data: ', len(test_idx))","9b164ece":"def plot_dist(indexes, dataset=dataset):\n    #dist = {}\n    count = Counter()\n    for i in indexes:\n        _, label = dataset[i]\n        count[target_label[label]] += 1\n    \n    # for i in indexes:\n    #     img, labels = dataset[i]\n    #     label = target_label[labels]\n    #     if label not in dist:\n    #         dist[label] = 1\n    #     elif label in dist:\n    #         dist[label] +=1\n\n    dist_2 = dict(sorted(count.items(), key=lambda kv: kv[1], reverse=True))\n    plt.bar(dist_2.keys(), dist_2.values())\n    plt.xticks(rotation=30)\n    plt.title('Data distribution'); plt.ylabel('count')\n    plt.show()","600abccb":"# split data to get the same distributiom\n\n\n#get index and its label\nidx_label = {}\nfor i in range(len(dataset)):\n    _, label = dataset[i]\n    idx_label[i] = label\n    \n# so idx_label maps dataset indices to labels\n\n#split for data validation\nx_train, x_val, y_train, y_val = train_test_split(list(idx_label.keys()), list(idx_label.values()), \n                                                  stratify = list(idx_label.values()), test_size=0.05)\n","2594cf55":"# Split according to image height instead\ndef bb_split():\n    x_train = [id for id in idx_label.keys() if height[id] <= 650]\n    y_train =  [ idx_label[i] for i in x_train]\n    x_val =  [id for id in idx_label.keys() if height[id] > 650]\n    y_val =  [ idx_label[i] for i in x_val]","40cf8036":"#exclude validation index from dataset\nx_val\nidx_label_2 = {}\nfor idx, label in idx_label.items():\n    if idx not in x_val:\n        idx_label_2[idx] = label\n\n#split data train and test after exlude x_val\nx_train, x_test, y_train, y_test = train_test_split(list(idx_label_2.keys()), list(idx_label_2.values()),\n                                                    stratify = list(idx_label_2.values()), test_size=0.05)\nprint(len(x_train))\nprint(len(x_val))\nprint(len(x_test))","84a0fe82":"plot_dist(x_train)\nplot_dist(x_val)\nplot_dist(x_test)","cb376e1a":"#load into dataloader for each data after split it\nbatch_size = 128\n\n#using subset to get data from indexes with the same distribution label\ntrain_set = SubsetRandomSampler(x_train)\nval_set = SubsetRandomSampler(x_val)\ntest_set = SubsetRandomSampler(x_test)\n\n#dataloader\ntrain_loader = DataLoader(load_data, batch_size=batch_size, \n                          shuffle=False, num_workers=4, sampler= train_set)\nval_loader = DataLoader(load_data, batch_size=batch_size,  \n                        num_workers=4, sampler=val_set)\ntest_loader = DataLoader(load_data, batch_size=batch_size,\n                         num_workers=4, sampler=test_set)","49faa5be":"#check image in trainloader for one batch\nfor images, _ in train_loader:\n    print('images.shape:', images.shape)\n    plt.figure(figsize=(16,16))\n    plt.axis('off')\n    plt.imshow(make_grid(images, nrow=16).permute((1, 2, 0)))\n    break","ab1a10b1":"#calculation for convnet\nw1 = 20\nF_SIZE= 3\nF_POOL = 3\nP = 0\nS_SIZE = 1\nS_POOL = 3\n\nSIZE = (w1 - F_SIZE + 2*P)\/S_SIZE+1 #size after conv\nPOOL = (SIZE - F_POOL)\/S_POOL+1\nw1 = POOL #size after pool\nprint(SIZE)\nw1","e869963a":"6*6*64","744ed8ff":"class Mineral_1(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Conv2d(3, 48, 11, stride=3, padding=0),\n            nn.ReLU(),\n            nn.MaxPool2d(3, 1), #out 70x70\n\n            nn.Conv2d(48, 128, 5, stride=1, padding=0),\n            nn.ReLU(),\n            nn.MaxPool2d(3, 1),#out 64x64\n\n            nn.Conv2d(128, 128, 4, stride=1, padding=0),\n            nn.ReLU(),\n            nn.MaxPool2d(4, 3),#out 20x20\n\n            nn.Conv2d(128, 64, 3, stride=1, padding=0),\n            nn.ReLU(),\n            nn.MaxPool2d(3, 3),#out 20x20\n\n            nn.Flatten(),\n            nn.Linear(64*6*6, 512),\n            nn.ReLU(),\n            nn.Dropout(p=0.3),\n            nn.Linear(512, 7),\n            nn.LogSoftmax(dim=1),\n            )\n        \n    def forward(self, x):\n        out = self.net(x)\n        return out\n\nmodel_1 = Mineral_1()\nmodel_1.to(device)\nmodel_1","8d546d19":"# # model paper\n# class Mineral(nn.Module):\n#     def __init__(self):\n#         super().__init__()\n#         # input shape  (3, 224x224) W2=(W1\u2212F+2P)\/S+1\n#         self.conv1 = nn.Conv2d(3, 48, 7, stride=3, padding=1)\n#         self.conv2 = nn.Conv2d(48, 128, 5, stride=3, padding=1)\n#         self.conv3 = nn.Conv2d(128, 128, 4, stride=2, padding=1)\n#         self.conv4 = nn.Conv2d(128, 128, 4, stride=1, padding=1)\n        \n#         self.pool = nn.MaxPool2d(3,1) #(W1\u2212F)\/S+1\n \n#         #Classifier layer\n#         self.fc1 = nn.Linear(4608, 512)\n#         self.fc2 = nn.Linear(512,7)\n        \n#         #dropout for minimalize overfitting\n#         self.drop = nn.Dropout(p=0.3)\n#         self.soft = nn.LogSoftmax(dim=1)\n    \n#     def forward(self, x):\n#         #conv layers\n#         x = self.pool(F.relu(self.conv1(x)))\n#         x = self.pool(F.relu(self.conv2(x)))\n#         x = self.pool(F.relu(self.conv3(x)))\n#         x = self.pool(F.relu(self.conv4(x)))  \n \n#         #Dense Layers\n#         #flattening the input from conv layers\n#         x = x.view(x.size(0), -1)\n#         # add dropout layer\n#         x = self.drop(F.relu(self.fc1(x)))\n#         x = self.soft(self.fc2(x))\n        \n#         return x\n\n# model = Mineral()\n\n# criterion = nn.NLLLoss()\n# optimizer = optim.Adam(model.parameters(), lr=0.0001)\n# model.to(device);\n# model","ca9a64e1":"def fit(epochs, model, train_loader, val_loader, criterion, optimizer):\n    train_losses = []\n    test_losses = []\n    train_accu = []\n    val_accu = []\n    fit_time = time.time()\n    for e in range(epochs):\n        since = time.time()\n        running_loss = 0\n        train_acc = 0\n        for image, label in train_loader:\n            optimizer.zero_grad()\n            image = image.to(device); label = label.to(device);\n\n            output = model(image)\n            ps = torch.exp(output)\n            _, top_class = ps.topk(1, dim=1)\n            correct = top_class == label.view(*top_class.shape)\n            train_acc += torch.mean(correct.type(torch.FloatTensor))\n\n            loss = criterion(output, label)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.item()\n\n        else:\n            model.eval()\n            test_loss = 0\n            accuracy = 0\n            with torch.no_grad():\n                for image, label in val_loader:\n                    image = image.to(device); label = label.to(device);\n\n                    output = model(image)\n                    loss = criterion(output, label)\n\n                    ps = torch.exp(output)\n                    _, top_class = ps.topk(1, dim=1)\n                    correct = top_class == label.view(*top_class.shape)\n                    accuracy += torch.mean(correct.type(torch.FloatTensor))\n\n                    test_loss += loss.item()\n\n            train_losses.append(running_loss\/len(train_loader))\n            test_losses.append(test_loss\/len(val_loader))\n            train_accu.append(train_acc\/len(train_loader))\n            val_accu.append(accuracy\/len(val_loader))\n            model.train()\n            print(\"Epoch: {}\/{}.. \".format(e+1, epochs),\n                  \"Train Loss: {:.3f}.. \".format(running_loss\/len(train_loader)),\n                  \"Test Loss: {:.3f}.. \".format(test_loss\/len(val_loader)),\n                  \"Train Accuracy: {:.3f}.. \".format(train_acc\/len(train_loader)),\n                  \"Test Accuracy: {:.3f}.. \".format(accuracy\/len(val_loader)),\n                  \"Time: {:.2f}s\" .format((time.time()-since)))\n    \n    history = {'train_loss' : train_losses, 'val_loss': test_losses, \n               'train_accuracy': train_accu, 'val_accuracy':val_accu}\n    print('Total time: {:.2f} m' .format((time.time()- fit_time)\/60))\n    return history","ceeef672":"#saving model\ndef save_model(model, optim, fpath):\n    checkpoint = {'model' : model,\n                'state_dict': model.state_dict(),\n                'optim' : optim.state_dict()\n                }\n\n    torch.save(checkpoint, fpath)\n\n#load model\ndef load_model(fpath, inferece = True):\n    check = torch.load(fpath)\n    model = check['model']\n    model.load_state_dict(check['state_dict'])\n    if inferece:\n        for param in model.parameters():\n            param.requires_grad = False\n        model.eval()\n    else:\n        model.train()\n    return model","7c481f25":"criterion = nn.NLLLoss()\noptimizer = optim.Adam(model_1.parameters(), lr=0.0001)\nepoch = 40\nepoch = 5\nhistory_mineral = fit(epoch, model_1, train_loader, val_loader, criterion, optimizer)","9dd8c3b7":"#save mode\nsave_model(model_1, optimizer, 'mineral_seq_own.pt')","b784d8e7":"def plot_loss(history, n_epoch):\n    epoch = [x for x in range(1, n_epoch+1)]\n    plt.plot(epoch, history['train_loss'], label='Train_loss')\n    plt.plot(epoch, history['val_loss'], label='val_loss')\n    plt.title('Loss per epoch')\n    plt.ylabel('Loss')\n    plt.xlabel('epoch')\n    plt.legend(); \n    plt.show()\n\ndef plot_accuracy(history, n_epoch):\n    epoch = [x for x in range(1, n_epoch+1)]\n    plt.plot(epoch, history['train_accuracy'], label='Train_accuracy')\n    plt.plot(epoch, history['val_accuracy'], label='val_accuracy')\n    plt.title('accuracy per epoch')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(); \n    plt.show()\nplot_loss(history_mineral, epoch)\nplot_accuracy(history_mineral, epoch)","2c34e968":"from torchvision import models\n\n# Use GPU if it's available\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nmodelVGG = models.vgg16(pretrained=True)\n\n# Freeze parameters so we don't backprop through them\nfor param in modelVGG.parameters():\n    param.requires_grad = False\n\n#vgg16\nmodelVGG.classifier = nn.Sequential(nn.Linear(in_features=25088, out_features=4096),\n                                 nn.ReLU(),\n                                 nn.Dropout(p=0.5),\n                                 nn.Linear(in_features=4096, out_features=1000),\n                                 nn.ReLU(),\n                                 nn.Dropout(p=0.5),\n                                 nn.Linear(in_features=1000, out_features=500),\n                                 nn.Linear(500, 7),\n                                 nn.LogSoftmax(dim=1))\n\n#vgg19\n# model.classifier = nn.Sequential(nn.Linear(in_features=25088, out_features=4096, bias=True),\n#                                  nn.ReLU(inplace=True),\n#                                  nn.Dropout(p=0.5, inplace=False),\n#                                  nn.Linear(in_features=4096, out_features=4096, bias=True),\n#                                  nn.ReLU(inplace=True),\n#                                  nn.Dropout(p=0.5, inplace=False),\n#                                  nn.Linear(in_features=4096, out_features=7, bias=True),\n#                                  nn.LogSoftmax(dim=1))\n\n\n\nmodelVGG.to(device);\nmodelVGG.train()\nmodelVGG","2b1a9a2c":"criterion = nn.NLLLoss()\noptimizer = optim.Adam(modelVGG.classifier.parameters(), lr=0.0001)\nepoch = 40\nhistory_VGG = fit(epoch, modelVGG, train_loader, val_loader, criterion, optimizer)","6123242f":"save_model(modelVGG,  optimizer, 'mineral_vgg.pt')","ecb4bb21":"plot_loss(history_VGG, epoch)\nplot_accuracy(history_VGG, epoch)","a1315531":"def predict_label(model, dataloader):\n    prediction_list = []\n    labels = []\n    model.to(device)\n    model.eval()\n    for i, batch in enumerate(dataloader):\n        image, label = batch\n        image = image.to(device); label = label.to(device)\n      \n        out = model(image)\n        ps = torch.exp(out)\n        _, top_class = torch.max(ps , 1)\n        preds = np.squeeze(top_class.cpu().numpy())\n        prediction_list.append(preds)\n        labels.append(label.cpu().numpy())\n    return np.squeeze(prediction_list), np.squeeze(labels)","c1bcea85":"def predict_plot(test_loader, model, target_label=target_label, n=20):\n\n    # obtain one batch of test images\n    dataiter = iter(test_loader)\n    images, labels = dataiter.next()\n    images.numpy()\n\n    # move model inputs to cuda, if GPU available\n    train_on_gpu = torch.cuda.is_available()\n    if train_on_gpu:\n        images = images.cuda()\n\n    model.eval()\n    # get sample outputs\n    model.to(device)\n    output = model(images)\n    # convert output probabilities to predicted class\n    _, preds_tensor = torch.max(output, 1)\n    preds = np.squeeze(preds_tensor.cpu().numpy()) #np.squeeze(preds_tensor.numpy()) if not train_on_gpu else np.squeeze(preds_tensor.cpu().numpy())\n    images = images.cpu()\n\n    # plot the images in the batch, along with predicted and true labels\n    fig = plt.figure(figsize=(25, 4))\n    for idx in np.arange(n):\n        ax = fig.add_subplot(2, n\/2, idx+1, xticks=[], yticks=[])\n        plt.imshow(images[idx].permute(1 ,2, 0))\n        ax.set_title(\"{} ({})\".format(target_label[preds[idx]], target_label[labels[idx]]),\n                    color=(\"green\" if preds[idx]==labels[idx].item() else \"red\"))\n    plt.show()","bd852383":"model_mineral = load_model('mineral_seq_own.pt', inferece=True)\nmodel_mineral","125280b2":"#how model perfome in test_data\ny_predict, y_true = predict_label(model_mineral, test_loader)","236d74d1":"#plot confusion matric\nprint(classification_report(y_true, y_predict))\nsns.heatmap(confusion_matrix(y_true, y_predict), annot=True)\nplt.ylabel('True label'); plt.xlabel('Predicted Label')\nplt.yticks(np.arange(0.5, len(target_label)), labels=target_label, rotation=0);\nplt.xticks(np.arange(0.5, len(target_label)), labels=target_label, rotation=45)\nplt.title('My Model Prediction Over Test Set')\nplt.show()","23a4b7ee":"model_vgg = load_model('mineral_vgg.pt', inferece=True)","ad9fb23b":"#how model perfome in test_data\ny_predict_vgg, y_true_vgg = predict_label(model_vgg, test_loader)","40127fb8":"#plot confusion matric\nprint(classification_report(y_true_vgg, y_predict_vgg))\nsns.heatmap(confusion_matrix(y_true_vgg, y_predict_vgg), annot=True)\nplt.ylabel('True label'); plt.xlabel('Predicted Label')\nplt.yticks(np.arange(0.5, len(target_label)), labels=target_label, rotation=0);\nplt.xticks(np.arange(0.5, len(target_label)), labels=target_label, rotation=45)\nplt.title('VGG Model Prediction Over Test Set')\nplt.show()","d7cb629e":"predict_plot(test_loader, model_vgg)","f605c0da":"predict_plot(test_loader, model_mineral)","18c48945":"# Data Loader","6a7aff96":"## Pre-trained mode","811aad36":"# Brandon's Code","10a71f93":"## Load All Data","3f00ca7a":"I still don't know why my model only learn one class but it's not for pre-trained model so the dataloader not the problem","ea511258":"# Build Model","c0459b03":"## My Model ","b2e62afe":"# Load Data and Get Insight","f365ecc4":"## Split Data","25ecc11d":"# ** Original Split **","c698229c":"# Brandon's first Kaggle attempt\n\n16th June 2020 (Bloomsday)","c6d204f2":"## My own model","6009ff0a":"## VGG Model","5c74a0a5":"## Plot Prediction","d6921aa1":"# Load Library","3244de18":"# Prediction and Evaluation"}}