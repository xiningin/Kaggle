{"cell_type":{"8115e5d5":"code","77ab1d6f":"code","2c952d06":"code","15bcdeea":"code","8b27b109":"code","31e67a94":"code","a3c36e84":"code","0882fa4d":"code","4d9eb115":"code","ca7d7654":"code","e1db8dd5":"code","b5fdf2ce":"code","6a447c18":"code","71472504":"code","de42315e":"code","ff8abe04":"code","b78eedf1":"code","c5884a56":"code","e18914ee":"code","ead0041f":"code","776ea48f":"code","0812581d":"code","cd4e2158":"markdown"},"source":{"8115e5d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import linear_model  # will be using for plotting trend line\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nfrom datetime import date\nfrom datetime import datetime\n\n%matplotlib inline\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","77ab1d6f":"# Import the data\ndata = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data_o.csv\")\ndf = data.copy()\n# View the shape and columns names\nprint(df.shape)\nprint(df.columns)\ndf.sample(5)","2c952d06":"#Check Null values and correlation to drop un-needed columns\ndf.info()","15bcdeea":"corr = df.corr(method='pearson')\nplt.figure(figsize=(14,8))\nsns.heatmap(corr, annot= True)\nplt.title('Correlation')\nplt.show()\n","8b27b109":"# For low correlation between these variables and popularity,\n# or for implying weak effect we remove them.\ndf.drop(['valence', 'explicit', 'key',\n       'liveness', 'loudness', 'mode'], axis = 1, inplace=True )\n\n# we see correlations once more\ncorr = df.corr(method='pearson')\nplt.figure(figsize=(14,8))\nsns.heatmap(corr, annot= True)\nplt.title('Correlation')\nplt.show()","31e67a94":"df.release_date = pd.to_datetime(df.release_date)\ndf.sort_values(by='release_date')\ndf.set_index('release_date',inplace=True)\ndf.head(5)","a3c36e84":"df.tail(5)","0882fa4d":"#Let's scale duration to minutes to be more readable  \ndf['duration_min'] = df['duration_ms'].apply(lambda x:round(x\/60000))\ndf.drop('duration_ms',axis=1,inplace=True)\n\nyear_avg= df.groupby('year').mean()\nyear_avg.head(6)","4d9eb115":"year_avg.describe()","ca7d7654":"plt.figure(figsize=(14,8))\nplt.title('Change over the years for tempo and popuarity')\n\n#For scalability , we visualize tempo and popularity alone over time the years\ntempo_pop = ['tempo','popularity']\nfor i in tempo_pop:\n    ax = sns.lineplot(x='year', y = i , data = year_avg)\n\nplt.ylabel(\"value\")\nplt.legend(tempo_pop)","e1db8dd5":"plt.figure(figsize=(14,8))\nplt.title('Change over the years for tempo and popuarity')\nsns.lineplot(x='year', y = 'duration_min' , data = year_avg)\n\nplt.ylabel(\"value\")\nplt.legend('duration_min')","b5fdf2ce":"against_year= [ 'acousticness', 'danceability',\n        'energy','instrumentalness', 'speechiness' ] ","6a447c18":"#Let's see how the rest of the features changed over the years\nplt.figure(figsize=(14,8))\nplt.title('Change over the years')\n\nfor i in against_year:\n    ax = sns.lineplot(x='year', y = i , data = year_avg)\n\nplt.ylabel(\"value\")\nplt.legend(against_year)","71472504":"# so now lets analyze which features of songs is affecting popularity in songs\nplt.figure(0, figsize=(24,10))\nx_axis = ['acousticness', 'danceability',\n        'energy','instrumentalness', 'speechiness', 'duration_min' , 'tempo']\nz = 0\nfor i in range(2):\n    for j in range(3):\n        # values to be plotted on axis(x,y)\n        x = df[x_axis[z]].values.reshape(-1,1)\n        y = df[\"popularity\"].values.reshape(-1,1)\n        # linear model \n        regr = linear_model.LinearRegression()\n        regr.fit(x, y)\n        # sub-plot\n        ax = plt.subplot2grid((2,3), (i,j))\n        ax.scatter(x,y, c='purple')\n        # adding trend line\n        ax.plot(x, regr.predict(x), color=\"red\", linewidth=2, linestyle='--')\n        # adding title\n        ax.title.set_text(f'{x_axis[z]} vs popularity')\n        z += 1\nplt.show()","de42315e":"genre_df = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data_by_genres_o.csv\")\ngenre_df.describe()","ff8abe04":"genre_df.head(7)","b78eedf1":"#Let's see top 10 genres according to popularity\ntop_10 =genre_df.sort_values(by='popularity', ascending= False).head(10)","c5884a56":"plt.figure(figsize=(16,8))\n# line plot \nsns.lineplot('genres', 'popularity', color='maroon', data=top_10)\nplt.title('Genre vs Popularity')\nplt.xlabel('Genres', fontsize = 15)\nplt.ylabel('Popularity', fontsize=15)\nplt.show()","e18914ee":"#let's find out the most repeated genre words to see if we can get a better picture of most famous genres\ngenre_names_text = \" \".join(genre_df['genres'].tolist()).split(\" \") \n#turning the genres into an iterable, splitting each word to loop over most repeated words","ead0041f":"column_names = [\"word\",\"count\"]\nmost_common_words_in_genres_df = pd.DataFrame([dict(zip(column_names,word_count)) for word_count in Counter(genre_names_text).most_common(30)])\nmost_common_words_in_genres_df # A New dataframe cointaing our top 30 'Big' words implying popular genres","776ea48f":"sns.barplot(x='count' , y ='word', data=most_common_words_in_genres_df.sort_values('count'))\nplt.title('Most Common Names In Genres')\nplt.ylabel('Name Of Main Genre')\nplt.xlabel('Frequency')\nplt.show","0812581d":"#Now let's see how these Big genres was distrubted in our main dataset and know which one was most popular\n\npop_df = genre_df[genre_df['genres'].str.contains('pop')].sort_values('popularity').tail(10)\nindie_df = genre_df[genre_df['genres'].str.contains('indie')].sort_values('popularity').tail(10)\nrock_df = genre_df[genre_df['genres'].str.contains('rock')].sort_values('popularity').tail(10)\nmetal_df = genre_df[genre_df['genres'].str.contains('metal')].sort_values('popularity').tail(10)\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(16,10))\n\naxs[0, 0].barh(width=pop_df['popularity'], y=pop_df['genres'],color='cyan')\naxs[0,1].barh(width=indie_df['popularity'], y= indie_df['genres'],color='purple')\naxs[1,0].barh(width=rock_df['popularity'], y=rock_df['genres'], color='blue')\naxs[1, 1].barh(width=metal_df['popularity'], y=metal_df['genres'],color = 'red')\n\nfig.tight_layout(pad=1)\nfig.show()\n","cd4e2158":"# Genre Based Analysis"}}