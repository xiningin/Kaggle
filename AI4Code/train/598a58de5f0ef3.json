{"cell_type":{"b4bcb039":"code","12782eed":"code","f72e36f7":"code","09d8384e":"code","3d2dcba6":"code","1401ee63":"markdown","c6bdc20e":"markdown","0b7b7c1a":"markdown","db9dc21b":"markdown","7dff1dbb":"markdown"},"source":{"b4bcb039":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","12782eed":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf = df.filter([\"SepalLengthCm\", \"PetalLengthCm\", \"Species\"])\ndf_filtered = df[(df.Species.isin(['Iris-versicolor', 'Iris-setosa']))]\ndataset = df_filtered.to_numpy()\nnp.random.shuffle(dataset)\nprint(dataset)","f72e36f7":"N = dataset.shape[0]\nX_train = dataset[:, 0:2]\nY_train = dataset[:, 2:3]\nY_train = np.where(Y_train == 'Iris-versicolor', 1, -1)\nbias = 0\nweight = np.ones((X_train.shape[0], 1))\nprint(f\"Shape X_train = {X_train.shape}\\nShape Y_train = {Y_train.shape}\\nShape weight = {weight.shape}\")","09d8384e":"class Perceptron:\n    def __init__(self, lr, epoch):\n        self.lr = lr\n        self.epoch = epoch\n        self.weight = None\n        self.bias = None\n        \n    def allcorrect(self, x_train, y_train):\n        y_hats = np.dot(x_train, self.weight.reshape(x_train.shape[1], 1)) + self.bias\n        y_hats = np.where(y_hats >=0, 1, -1)\n        return np.array_equal(y_hats, y_train)\n        \n    def predict(self, x):\n        y_hat = np.dot(x,self.weight) + self.bias\n        y_hat = np.where(y_hat >= 0, 1, -1)\n        return y_hat\n        \n    def fit(self, x_train, y_train):\n        N = x_train.shape[0]\n        m = x_train.shape[1]\n        self.weight = np.ones(m)\n        self.bias = 0\n        \n        for i in range(self.epoch):\n            print(f\"Epoch {i} ====================\")\n            for idx, x in enumerate(x_train):\n                y_hat = self.predict(x)\n                if y_hat != y_train[idx,0]:\n                    self.weight = self.weight + self.lr*y_train[idx,0]*x\n                    self.bias = self.bias + self.lr*y_train[idx,0]\n                    print(f\"---> x{idx}----------\")\n                    print(f\"Weight = {self.weight}\\nBias = {self.bias}\")\n            if(self.allcorrect(x_train, y_train)):\n                break\n    \n    def charting(self, x_train, y_train):\n        plt.title('PERCEPTRON')\n        plt.xlabel('Sepal length [cm]')\n        plt.ylabel('Petal length [cm]')\n        for x, y in zip(x_train, y_train):\n            if y == 1: \n                plt.plot(x[0], x[1], 'bo', markersize = 5, alpha = 1)\n            else:\n                plt.plot(x[0], x[1], 'ro', markersize = 5, alpha = 1)\n        x_min = np.amin(x_train[:, 0])\n        x_max = np.amax(x_train[:, 0])\n        x = np.linspace(int(x_min),int(x_max),20)\n        y = -(self.bias + x*self.weight[0])\/self.weight[1]\n        plt.plot(x, y, '-r', label=f\"{self.weight[0]}.x1+{self.weight[1]}.x2+{self.bias}\")\n        plt.legend(loc='upper left')\n        plt.show()\n        ","3d2dcba6":"perceptron = Perceptron(1, 1000)\nperceptron.fit(X_train, Y_train)\nperceptron.charting(X_train, Y_train)","1401ee63":"## Some information\nloss on 1 sample : -y*w*x.     \ndL\/dw = -yx.      \ndL\/db = -y.   \n","c6bdc20e":"## Model","0b7b7c1a":"## Understand dataset","db9dc21b":"# Setup Perceptron algorithm","7dff1dbb":"## Traing"}}