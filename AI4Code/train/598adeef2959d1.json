{"cell_type":{"591368f1":"code","25ad3237":"code","50b999d3":"code","caaca89a":"code","aed84efd":"code","cd722bde":"code","f98ed581":"code","f2af05cd":"code","ef9bd771":"code","43b3c4ec":"code","fc6155b3":"code","f99f8340":"code","b2c6ed4d":"code","ed2ed85d":"code","7952c866":"code","91435066":"code","d9954d02":"code","37bfbdac":"code","0a50d97c":"code","3c5b60a2":"code","86521745":"code","2e3dc258":"code","9da1ce25":"code","7a184e98":"code","d14815cc":"code","959bad2b":"code","3b46ee6e":"code","df423b12":"code","3bf7c760":"code","511236b5":"code","88393cea":"code","8428e201":"code","6efc378a":"markdown","520485cc":"markdown","5ddb86d6":"markdown","c1210f75":"markdown"},"source":{"591368f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25ad3237":"data_tc = pd.read_csv(\"..\/input\/all-indian-odi-and-test-cricketers-with-statistics\/AllTestcaptains.csv\")\ndata_tc.head()","50b999d3":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (10,7))\n\n\nsns.barplot(y = data_tc[\"Name\"],x = data_tc[\"Played\"])\nplt.title(\"Players vs Number of matches played\")\n","caaca89a":"plt.figure(figsize = (10,7))\ndata_tc_ranked = data_tc[[\"Name\",\"Win%\"]].sort_values(by = [\"Win%\"])\nsns.barplot(x = data_tc_ranked[\"Name\"],y = data_tc_ranked[\"Win%\"],data = data_tc)\nplt.xticks(rotation = 90)","aed84efd":"rating = data_tc[\"Won\"]*5 + data_tc[\"Played\"]*0.25 - data_tc[\"Lost\"]*0.5 + data_tc[\"Tied\"]*2","cd722bde":"data_tc[\"Rating\"] = rating","f98ed581":"data_tc.head()","f2af05cd":"plt.figure(figsize = (10,7))\ndata_tc = data_tc.sort_values(by = [\"Rating\"])\nsns.set_theme(style = \"darkgrid\")\n\nsns.barplot(x = data_tc[\"Name\"],y = data_tc[\"Rating\"],data = data_tc,color = \"green\")\nplt.xticks(rotation = 90)\n","ef9bd771":"import pandas as pd\ndata_tp = pd.read_csv(\"..\/input\/all-indian-odi-and-test-cricketers-with-statistics\/AllTestplayers.csv\")\ndata_tp","43b3c4ec":"data_tp[\"Runs\"] =  data_tp[\"Runs\"].replace(\"-\", \"0\", regex=True)","fc6155b3":"data_tp[\"Runs\"] = data_tp.Runs.astype(float)","f99f8340":"data_runs = data_tp[[\"Name\",\"Runs\"]].sort_values(by = [\"Runs\"],ascending = False)[0:10]","b2c6ed4d":"plt.figure(figsize = (10,7))\nsns.barplot(y = \"Name\",x = \"Runs\",data= data_runs,palette = \"mako\")\nplt.title(\"Top 10 Run-Scorers\")","ed2ed85d":"data_tp[\"Wkt\"] =  data_tp[\"Wkt\"].replace(\"-\", \"0\", regex=True)","7952c866":"data_tp[\"Wkt\"] = data_tp.Wkt.astype(float)","91435066":"\ndata_wkt = data_tp[[\"Name\",\"Wkt\"]].sort_values(by = [\"Wkt\"],ascending = False)[0:10]\nplt.figure(figsize = (10,7))\nsns.barplot(y = \"Name\",x = \"Wkt\",data = data_wkt)\nplt.title(\"Top 10 Wicket-Takers\")","d9954d02":"\ndata_tp[\"Avg\"] =  data_tp[\"Avg\"].replace(\"-\", \"0\", regex=True)\ndata_tp[\"Avg\"] = data_tp.Avg.astype(float)\ndata_avg = data_tp[[\"Name\",\"Avg\"]].sort_values(by = [\"Avg\"],ascending = False)[:10]\ndata_avg\n\n\n","37bfbdac":"import string\nprint(string.punctuation)","0a50d97c":"def clear(num):\n    numx = list(num)\n    coun = len(numx)\n    ao = []\n    x = \"\"\n    \n    for i in range(coun):\n        if numx[i] in string.punctuation:\n            for j in range(0,i):\n                ao.append(numx[j])\n                \n            for i in ao:\n                x = x + i\n            \n            return x\n\n    return num\n","3c5b60a2":"n = []\nfor i in data_tp[\"Mat\"]:\n    n.append(clear(i))\n    \n    \ndata_tp[\"Matches\"]  = pd.DataFrame(n)\n\ndata_tp[\"Matches\"] = data_tp[\"Matches\"].astype(float)\n\n\n    \n","86521745":"data_tp[[\"Name\",\"Matches\"]]","2e3dc258":"batsman_rating = round((data_tp[\"Runs\"])\/(data_tp[\"Matches\"]) + data_tp[\"Matches\"]*0.25)\ndata_tp[\"Bat_rating\"] = batsman_rating","9da1ce25":"data_bat = data_tp[[\"Name\",\"Bat_rating\"]].sort_values(by = [\"Bat_rating\"],ascending = False)[0:10]","7a184e98":"plt.figure(figsize = (10,7))\nsns.barplot(y = \"Name\",x = \"Bat_rating\",data = data_bat)\nplt.title(\"Batsman Performance Rating (Top 10)\")","d14815cc":"data_bowl = data_tp[[\"Name\",\"Ave\"]].replace(\"-\",\"0\",regex = True)\ndata_bowl[\"Ave\"] = data_bowl.Ave.astype(float)\ndata_bowl = data_bowl.sort_values(by = [\"Ave\"])\ndata_bowl\n","959bad2b":"data_bowl[\"Ave\"] = data_bowl[\"Ave\"].replace(0,(data_bowl[\"Ave\"].mean()+100))","3b46ee6e":"data_bowl[\"Matches\"] = data_tp[\"Matches\"]","df423b12":"data_bowl.sort_values(by = [\"Ave\"])","3bf7c760":"data_bowl[\"Wicket\"] = data_tp[\"Wkt\"]","511236b5":"bowl_rating = (data_bowl[\"Matches\"]*0.25 + data_bowl[\"Wicket\"]*1)\/data_bowl[\"Ave\"]\ndata_bowl[\"Bowl_rating\"] = bowl_rating","88393cea":"data_bowl = data_bowl.sort_values(by = [\"Bowl_rating\"],ascending = False)\ndata_bowl =data_bowl[:20]\n\n","8428e201":"plt.figure(figsize = (10,7))\nsns.barplot(x = \"Name\",y = \"Bowl_rating\",data = data_bowl,palette=\"Blues_d\")\nplt.xticks(rotation = 90)\nplt.title(\"Top 20 Indian Test Cricket Bowlers\")","6efc378a":"Here I have tried to find most successful Indian Captains till date. But the Win% alone wouldn't be sufficient to decide, so created a simple different formula for this, which also gives weightage to the number of games played as Captain.\n(Any feedback would be welcomed)\n\n","520485cc":"In the dataset to calculate batsman's average more accurately, I had to clean the data[\"Mat\"] which had \"[\" in between the string at few spots, for which I used this function.","5ddb86d6":"Here I have tried to analyse the dataset of Indian test cricketers and generate some insights from them. I am still a newbie, so please feel free to give any sort of feedbacks.\n:)","c1210f75":" # Hope you liked it"}}