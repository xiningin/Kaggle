{"cell_type":{"9314d966":"code","487e8a17":"code","d5f784d5":"code","409d31d2":"code","f357b5e9":"code","c2ae6aed":"code","7f91eb45":"code","a858a509":"code","b6e07e23":"code","cbd698e8":"code","8dc4307c":"code","96e9bdfa":"code","5cf5b076":"code","aecad557":"code","5580190b":"code","24d5c09d":"code","b39a55a6":"code","36473d50":"code","3684732f":"code","69a9a30d":"code","6c8f7b11":"code","d1184c1b":"code","d15662a0":"code","30f801b9":"code","1021743d":"code","0a91a137":"code","3a6f724f":"code","b41a800d":"code","1e32e946":"code","66205420":"markdown","11277ea1":"markdown","c527c4f6":"markdown","2abcc026":"markdown","5ef509ba":"markdown","cb405cc7":"markdown","4adc1cd2":"markdown","5befa227":"markdown","150cee7b":"markdown","6eb3b508":"markdown"},"source":{"9314d966":"import pandas as pd","487e8a17":"data = pd.read_csv('..\/input\/star-type-classification\/Stars.csv')","d5f784d5":"types = ['Red Dwarf', 'Brown Dwarf', 'White Dwarf', 'Main Sequence', 'Super Giants', 'Hyper Giants']","409d31d2":"data.head()","f357b5e9":"data.describe()","c2ae6aed":"data.isnull().sum()","7f91eb45":"import numpy as np","a858a509":"data.columns = [c.lower() for c in data.columns]","b6e07e23":"log_cols = ['temperature', 'l', 'r']","cbd698e8":"for c in log_cols:\r\n    data[c+'_log'] = np.log10(data[c])","8dc4307c":"data['color'] = data['color'].str.replace('-', ' ').str.replace('ish','').str.replace('Pale ','').str.title()\r\ndata['color'] = data['color'].replace('Whit', 'White')\r\ndata['color'] = data['color'].replace('White Yellow', 'Yellow White')","96e9bdfa":"data['color'].unique()","5cf5b076":"color_order = ['Red', 'Orange Red', 'Orange', 'Yellow Orange', 'Yellow','Yellow White','White','Blue White', 'Blue']","aecad557":"data['color_value'] = data['color'].apply(lambda x: color_order.index(x))","5580190b":"data['spectral_class_value'] = data['spectral_class'].apply(lambda x: list(data['spectral_class'].unique()).index(x))","24d5c09d":"import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nimport plotly.express as px\r\n\r\nfrom IPython.display import Image","b39a55a6":"drop_cols = log_cols.copy()\r\ndrop_cols.extend(['color_value', 'spectral_class_value']) # I currently don't want to see categorical data\r\nsns.pairplot(data.drop(drop_cols, axis=1), hue='type', palette='bright')","36473d50":"# Ideally these are linearly correlated\r\nfig = px.scatter(data, x='a_m', y='l_log', trendline='ols', title='Linear Regression', width=900, height=600)\r\ncorr = np.corrcoef(data['a_m'], data['l_log'])[0][1]\r\n\r\nfig.show()\r\nprint(f'Correlation: {corr}')","3684732f":"# This will help fix the color distribution in the chart\r\ndata['color_value_adj'] = np.power(data['color_value'], 2)","69a9a30d":"# Let's try to re-create the H-R classification chart\r\nfig = px.scatter(\r\n    data,\r\n    x = 'temperature',\r\n    y = 'a_m',\r\n    log_x = True,\r\n    #log_y = True,\r\n    color = 'color_value_adj',\r\n    size = data['r_log'] - data['r_log'].min() + .15,\r\n    color_continuous_scale = 'RdYlBu',\r\n    template = 'plotly_dark',\r\n    labels = {\r\n        'l': 'Relative Luminosity (Sun=1)',\r\n        'temperature': 'Surface Temperature (K)',\r\n        'a_m': 'Absolute Magnitude'\r\n    }\r\n)\r\n\r\nfig.update_layout(\r\n    title = 'H-R Star Classification Chart',\r\n    coloraxis_showscale = False,\r\n    width = 1200,\r\n    height = 800\r\n)\r\n\r\n'''\r\nfig.add_annotation(\r\n    x = 3.763428,\r\n    y = -0.09151489,\r\n    xshift = -30,\r\n    yshift = -15,\r\n    text = 'The Sun',\r\n    showarrow = False\r\n)\r\n'''\r\nfig.add_annotation(\r\n    x = 3.763428,\r\n    y = 5.05,\r\n    xshift = -30,\r\n    yshift = -15,\r\n    text = 'The Sun',\r\n    showarrow = False\r\n)\r\n\r\nfig.update_xaxes(autorange='reversed')\r\nfig.update_yaxes(autorange='reversed')","6c8f7b11":"from sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.preprocessing import StandardScaler\r\n","d1184c1b":"X = data[['temperature_log', 'l_log', 'r_log', 'a_m']]\r\ny = data['type']","d15662a0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","30f801b9":"scaler = StandardScaler()\r\nscaler.fit(X_train)\r\nX_train = scaler.transform(X_train)\r\nX_test = scaler.transform(X_test)","1021743d":"knn = KNeighborsClassifier(n_neighbors=5)\r\nknn.fit(X_train, y_train)","0a91a137":"predictions = knn.predict(X_test)","3a6f724f":"from sklearn.metrics import accuracy_score\r\nfrom sklearn.model_selection import cross_val_score","b41a800d":"accuracy = accuracy_score(y_test, predictions)\r\n\r\nprint(f'Accuracy: {accuracy}')","1e32e946":"scores = cross_val_score(knn, X, y, cv=5)\r\n\r\nprint(f'Cross Validation Average Score: {scores.mean()}')","66205420":"## Data Exploration","11277ea1":"# NASA Star Classification\r\n\r\nThe goal of this notebook is to complete a basic project including exploration, cleaning, visualization, and classification. The dataset used here is the [Star Type Classification \/ NASA](https:\/\/www.kaggle.com\/brsdincer\/star-type-classification) dataset on Kaggle. Its target value is the \"Type\" feature, and 6 other features are given for classification.","c527c4f6":"## Cleaning and Feature Engineering","2abcc026":"## Basic Visualizations","5ef509ba":"A seemingly perfect model!","cb405cc7":"## Advanced Visualizations","4adc1cd2":"## KNN Classification","5befa227":"## Model Evaluation","150cee7b":"### H-R Classification Chart","6eb3b508":"## Import Data"}}