{"cell_type":{"d93fc216":"code","9d6c1679":"code","fad4ddbd":"code","693dc175":"code","f9f12e78":"code","13791530":"code","deea7d55":"code","31e62d26":"code","d6ef200c":"code","ff4cbe99":"code","6fc03b26":"code","b8ca6f01":"code","8de85689":"code","0566a8ab":"code","89825cff":"code","5a9033a4":"markdown"},"source":{"d93fc216":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9d6c1679":"data = pd.read_csv(\"winequalityN.csv\")\ndata.head()","fad4ddbd":"data.info()","693dc175":"#NO OF UNIQUE values in wine quality column\ndata.quality.nunique()","f9f12e78":"data.isnull().sum()","13791530":"data.update(data.fillna(data.mean()))","deea7d55":"\n#plot histogram\ndata.hist(bins=20,figsize=(10,10))\n#plot showing\nplt.show()","31e62d26":"\n# correlation by visualization\nplt.figure(figsize=[18,7])\n# plot correlation\nsns.heatmap(data.corr(),annot=True)\nplt.show()","d6ef200c":"# no of categorical columns\ncat = data.select_dtypes(include='O')\ncat[0:5]\n#only type column is categorical \n\n\n\n\nimport category_encoders as ce\n\n\n# create object of Ordinalencoding\nencoder= ce.OrdinalEncoder(cols=['type'],return_df=True)\n\ndata = encoder.fit_transform(data)","ff4cbe99":"#defining when the quality is good and when not\n\n\ndata['good quality']=[1 if x>=7 else 0 for x in data.quality]\ndata[:-5]\n\n#We create a program in which if the dependent feature \u201cquality\u201d  values are greater than 7 \n#then it will be considered as 1 and if they are less than 7, \n#then we considered it as 0 and this will be store in new created column \u201cbest quality\u201d.","6fc03b26":"#Test train split\n\nfrom sklearn.model_selection import train_test_split\n \n# independent variables\nx = data.drop(['quality','good quality'],axis=1)\n# dependent variable\ny = data['good quality']\n \n# creating train test splits\nxtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=40)","b8ca6f01":"from sklearn.utils import resample\n\nX = pd.concat([xtrain,ytrain],axis=1)\n\nwhite = data[data.type==1]\nred = data[data.type==2]\n\nred_resampled = resample(red,replace=True,n_samples=len(white))\nresampled= pd.concat([white,red_resampled])\n\nprint(resampled.type.value_counts())\n\nxtrain = resampled.drop([\"quality\",\"good quality\"],axis=1)\nytrain = resampled[\"good quality\"]","8de85689":"#Normalization of numerical features:\n#We will use the Normalization technique to scaling our data because in our features data range high,\n#so this technique balances the ranges between 0 and 1. \n\nfrom sklearn.preprocessing import MinMaxScaler\n# creating scaler scale var.\nnorm = MinMaxScaler()\n# fit the scal\nnorm_fit = norm.fit(xtrain)\n# transformation of training data\nscal_xtrain = norm_fit.transform(xtrain)\n# transformation of testing data\nscal_xtest = norm_fit.transform(xtest)\n\nscal_xtrain[0:5]","0566a8ab":"#Random forest classifier gave best accuracy\n\nfrom sklearn.ensemble import RandomForestClassifier\n \n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import classification_report\n \n\nrf = RandomForestClassifier(n_estimators=500)\nrf.fit(scal_xtrain,ytrain)\n\ny_predict = rf.predict(scal_xtest)\n \n# checking the accuracy score\nrf_score = rf.score(scal_xtest,ytest)\nprint('score of model is : ',rf_score)\n \n#checking mean_squared error\nMSE = mean_squared_error(ytest,y_predict)\nprint('mean squared error is : ',MSE)","89825cff":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=1)\n \nknn.fit(scal_xtrain, ytrain)\n \n# Predict on dataset which model has not seen before\nprint(knn.predict(scal_xtest))\n\nknn_score = knn.score(scal_xtest,ytest)\nprint('score of model is : ',knn_score)","5a9033a4":"Predict Wine Quality : Good or bad \n\nDataset Features: \ntype(red or white)\n\nall other have numerical values columns:\nfixed acidity,\nvolatile acidity,\ncitric acid,\nresidual sugar,\nchlorides,\nfree sulfur dioxide,\ntotal sulfur dioxide,\ndensity,\npH,\nsulphates,\nalcohol,\n\nTo find: quality\n\n\nwhite wine : 75% data\nred wine : 25%\n\nquality (score between 0 and 10)"}}