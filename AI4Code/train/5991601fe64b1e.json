{"cell_type":{"ed0543de":"code","b741534c":"code","7ef6b3b8":"code","42fa8e14":"code","5d5d58d9":"code","b7e7b106":"code","7d01cd5d":"code","56ed609b":"code","12f5d9f0":"code","966155f1":"code","c5797b20":"code","b9ff532b":"code","e0bab61b":"code","3c9df703":"code","7bcd1674":"code","f739d91a":"code","90e50585":"markdown","5b40badb":"markdown","a5a4de92":"markdown","8d28d4f6":"markdown","dfaa2f09":"markdown","ffe48d51":"markdown","2ecd6d77":"markdown","163fe4a2":"markdown","67d54ee3":"markdown"},"source":{"ed0543de":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","b741534c":"sub_path = \"..\/input\/ieeesubmissions\"\nall_files = os.listdir(sub_path)\nall_files","7ef6b3b8":"all_files.remove('blend02.csv')\nall_files","42fa8e14":"outs = [pd.read_csv(os.path.join(sub_path, f), index_col=0) for f in all_files]\nconcat_sub = pd.concat(outs, axis=1)\ncols = list(map(lambda x: \"ieee\" + str(x), range(len(concat_sub.columns))))\nconcat_sub.columns = cols\nconcat_sub.reset_index(inplace=True)\nconcat_sub.head()\nncol = concat_sub.shape[1]","5d5d58d9":"# check correlation\nconcat_sub.iloc[:,1:ncol].corr()","b7e7b106":"corr = concat_sub.iloc[:,1:7].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","7d01cd5d":"# get the data fields ready for stacking\nconcat_sub['ieee_max'] = concat_sub.iloc[:, 1:ncol].max(axis=1)\nconcat_sub['ieee_min'] = concat_sub.iloc[:, 1:ncol].min(axis=1)\nconcat_sub['ieee_mean'] = concat_sub.iloc[:, 1:ncol].mean(axis=1)\nconcat_sub['ieee_median'] = concat_sub.iloc[:, 1:ncol].median(axis=1)","56ed609b":"concat_sub.describe()","12f5d9f0":"cutoff_lo = 0.8\ncutoff_hi = 0.2","966155f1":"concat_sub['isFraud'] = concat_sub['ieee_mean']\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_mean.csv', \n                                        index=False, float_format='%.6f')","c5797b20":"concat_sub['isFraud'] = concat_sub['ieee_median']\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_median.csv', \n                                        index=False, float_format='%.6f')","b9ff532b":"concat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), 1, \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             0, concat_sub['ieee_median']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_pushout_median.csv', \n                                        index=False, float_format='%.6f')","e0bab61b":"concat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), \n                                    concat_sub['ieee_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             concat_sub['ieee_min'], \n                                             concat_sub['ieee_mean']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_minmax_mean.csv', \n                                        index=False, float_format='%.6f')","3c9df703":"concat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), \n                                    concat_sub['ieee_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             concat_sub['ieee_min'], \n                                             concat_sub['ieee_median']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_minmax_median.csv', \n                                        index=False, float_format='%.6f')","7bcd1674":"sub_base = pd.read_csv('..\/input\/ieeesubmissions\/blend01.csv')","f739d91a":"concat_sub['ieee_base'] = sub_base['isFraud']\nconcat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), \n                                    concat_sub['ieee_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             concat_sub['ieee_min'], \n                                             concat_sub['ieee_base']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_minmax_bestbase.csv', \n                                        index=False, float_format='%.6f')","90e50585":"# Mean Stacking","5b40badb":"# MinMax + Mean Stacking\n>* MinMax seems more gentle and it outperforms the previous one","a5a4de92":"# MinMax + BestBase Stacking\n>* loading submission with best score","8d28d4f6":"# Pushout + Median Stacking\n>* Pushout strategy is bit aggresive","dfaa2f09":"# Median Stacking","ffe48d51":"# MinMax + Median Stacking","2ecd6d77":"## Median stacking gives the best LB score","163fe4a2":">* Based on https:\/\/www.kaggle.com\/lpachuong\/statstack\n>* Thanks to <br>\nhttps:\/\/www.kaggle.com\/jazivxt\/safe-box<br>\nhttps:\/\/www.kaggle.com\/artgor\/eda-and-models<br>\nhttps:\/\/www.kaggle.com\/stocks\/under-sample-with-multiple-runs<br>\nhttps:\/\/www.kaggle.com\/artkulak\/ieee-fraud-simple-baseline-0-9383-lb","67d54ee3":"## Upvote if this was helpful"}}