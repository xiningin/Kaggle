{"cell_type":{"eea551c5":"code","df202f1b":"code","41fd42bc":"code","4436932a":"code","6a246c69":"code","98bff5d2":"code","a5f4db49":"code","8a5ba91f":"code","8b7f7fd5":"code","f6ea99a2":"code","be90a629":"code","4e44d0e0":"code","dac65f89":"code","62f81cb0":"code","9b7fbde1":"code","3910f09c":"code","c1a1fd88":"code","edcba63e":"code","838c3750":"code","07bf6f55":"code","fde59a32":"code","f253909f":"code","a5e4c571":"code","daf27cd5":"code","27bdff7f":"code","b4c1ea4d":"code","d903ec62":"code","ce2f522a":"code","8fcb0132":"code","e0ac5d57":"code","2848f7cb":"code","99ae4934":"code","41b3adca":"code","ae892d52":"code","f83f3f80":"code","3ce428f4":"code","33d6bc20":"code","8f002fbd":"code","8566b126":"code","15284ed4":"code","2c90e1f7":"code","69a437d2":"code","220b66ff":"code","6d32881d":"code","aa54b763":"code","a988ea51":"code","7c0b8ef4":"code","9d97c68e":"code","ed8692e5":"code","38a80af7":"code","59c93527":"code","bb6d19ad":"code","6543ff19":"code","1f5dab4e":"code","9523803b":"code","1fb42ee0":"code","3afdc289":"code","5ace9cc3":"code","64bad9db":"code","3bfc63fa":"code","e4318b7e":"code","c26eb404":"code","65cd5d58":"code","8f83a7db":"code","5d9c9504":"code","4fbdb2a8":"code","2d9ec2ff":"code","dc4e26d2":"code","b7ba4f15":"code","289c15d3":"code","1cdb46d7":"code","36d4564b":"code","7364e3bf":"code","5f128a49":"code","c56bcc67":"code","d5460c6b":"code","4a7fd233":"code","a0fad699":"code","4ce7d594":"code","06829c8b":"markdown"},"source":{"eea551c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df202f1b":"import pandas as pd \nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","41fd42bc":"df = pd.read_excel('..\/input\/q-2-a-1\/2_fujian_1.xlsx',index_col='\u6837\u672c\u7f16\u53f7')","4436932a":"col_names_list =df.columns.values.tolist()","6a246c69":"control_var_names =col_names_list[15:]+[col_names_list[10]]","98bff5d2":"# \u53ef\u4ee5\u76f4\u63a5\u770b\u70ed\u529b\u56fe\ncontrol_data = df[control_var_names]\ncorr_matrix = control_data.corr().abs()\n\nf , ax = plt.subplots(figsize = (40, 40))\nplt.title('Correlation of control vars',y=1,size=16)\nsns.heatmap(corr_matrix,square = True,  vmax=0.8)","a5f4db49":"coor_sqs =corr_matrix.iloc[-1,:].sort_values(ascending=False)","8a5ba91f":"RON_corr = corr_matrix[control_var_names[-1]]","8b7f7fd5":"RON_corr_sqs = RON_corr.sort_values(ascending=False)","f6ea99a2":"RON_corr_sqs[1]","be90a629":"RON_corr_sqs_cols =RON_corr_sqs.index.to_list()","4e44d0e0":"RON_corr_sqs_cols[1:]","dac65f89":"corr_matrix[RON_corr_sqs_cols[1]].sort_values(ascending=False)","62f81cb0":"threshold = 0.75","9b7fbde1":"labels=corr_matrix[RON_corr_sqs_cols[1]].sort_values(ascending=False)>threshold","3910f09c":"corr_matrix[RON_corr_sqs_cols[1]].sort_values(ascending=False)>threshold","c1a1fd88":"RON_corr_sqs_cols[1:]","edcba63e":"del_control_var_names = []\nfor i,col_name in enumerate(RON_corr_sqs_cols[1:]):\n#     print(col_name)\n    labels=corr_matrix[col_name].sort_values(ascending=False)>0.9\n#     print(labels)\n    del_col_name = corr_matrix[col_name][labels].index.to_list()\n    del_col_name.remove(col_name) #\u53bb\u9664\u53d8\u91cf\u672c\u8eab\n    #\u6dfb\u52a0\u9ad8\u7ebf\u6027\u76f8\u5173\u6027\u53d8\u91cf\n    for c_name in del_col_name:\n        if c_name not in del_control_var_names:\n            del_control_var_names.append(c_name)\n    ","838c3750":"del_control_var_names","07bf6f55":"len(del_control_var_names)","fde59a32":"selected_col_name = [x for x in RON_corr_sqs_cols[1:] if x not in del_control_var_names]","f253909f":"selected_col_name","a5e4c571":"data_selected_col = df[selected_col_name]","daf27cd5":"data_selected_col.head()","27bdff7f":"df.head()","b4c1ea4d":"unctrl_var_data = df[col_names_list[1:8]+col_names_list[11:15]]","d903ec62":"unctrl_var_data.head()\n","ce2f522a":"new_col=['S_content','B_RON','Saturated_hydrocarbon','Olefin','Aromatics','Bromine_value','density','wait_Coke','wait_S','re_Coke','re_S']","8fcb0132":"unctrl_var_data.columns=new_col","e0ac5d57":"unctrl_var_data","2848f7cb":"data_concat = pd.concat([unctrl_var_data,data_selected_col],axis=1)","99ae4934":"data_concat.head()","41b3adca":"stand_data_concat =(data_concat-data_concat.mean(0))\/data_concat.std(0)","ae892d52":"Y_RON =df[col_names_list[10]]","f83f3f80":"RON_cost =( Y_RON-Y_RON.mean())","3ce428f4":"stand_data_concat['RON_cost'] = RON_cost","33d6bc20":"stand_data_concat.head()","8f002fbd":"stand_data_concat.to_excel('stand_data_165vars.xlsx')","8566b126":"df_165 =pd.read_excel('..\/input\/165varmarpro\/165vars_mar_pro.xlsx').drop(0)","15284ed4":"df_165.drop('Unnamed: 0',axis=1,inplace=True)","2c90e1f7":"df_165['var_name'] = data_concat.columns.to_list()","69a437d2":"df_165.head()","220b66ff":"df_165[df_165['result$mar']>0.05].sort_values(by='result$mar',ascending=False)","6d32881d":"len(df_165[df_165['result$mar']>0.05].sort_values(by='result$mar',ascending=False))","aa54b763":"best_vars =df_165[df_165['result$mar']>0.05].sort_values(by='result$mar',ascending=False)","a988ea51":"best_vars.plot.barh(x='var_name')\nplt.title('Top 19 control variables for marginal probability')","7c0b8ef4":"best_vars.to_excel('Top 19 control variables for marginal probability.xlsx')","9d97c68e":"best_vars['var_name']","ed8692e5":"col_names_list = best_vars['var_name']","38a80af7":"col_names_list=list(col_names_list)","59c93527":"col_names_list.append('\u8f9b\u70f7\u503cRON')","bb6d19ad":"col_names_list","6543ff19":"df[col_names_list].to_excel('shaixuanshuju.xlsx')","1f5dab4e":"d_ron = df['\u8f9b\u70f7\u503cRON']","9523803b":"d_ron","1fb42ee0":"data_X = df[col_names_list]","3afdc289":"data_X['B_RON'] = d_ron","5ace9cc3":"data_X.drop('\u8f9b\u70f7\u503cRON',axis=1,inplace=True)","64bad9db":"data_X","3bfc63fa":"df.columns.to_list()","e4318b7e":"data_y = df[df.columns.to_list()[10]]","c26eb404":"data_y ","65cd5d58":"#\u5bfc\u5165\u7a0b\u5e8f\u5305\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom itertools import product\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost.sklearn import XGBRegressor\nfrom lightgbm.sklearn import LGBMRegressor\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error,  make_scorer\n\nimport calendar\nfrom datetime import datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","8f83a7db":"from sklearn.model_selection  import train_test_split","5d9c9504":"X_train,X_test,y_train,y_test = train_test_split(data_X,data_y, test_size=0.3, random_state=12)","4fbdb2a8":"feature_name = X_train.columns.tolist()","2d9ec2ff":"models = [LinearRegression(),\n          DecisionTreeRegressor(),\n          RandomForestRegressor(),\n          GradientBoostingRegressor(),\n          XGBRegressor(n_estimators = 100, objective='reg:squarederror'), \n          LGBMRegressor(n_estimators = 100)]\nresult = dict()\nfor model in models:\n    model_name = str(model).split('(')[0]\n    scores = cross_val_score(model, X=data_X, y=data_y, verbose=0, cv = 5, scoring=make_scorer(mean_absolute_error))\n    result[model_name] = scores\n    \nresult = pd.DataFrame(result)\nresult.index = ['cv' + str(x) for x in range(1, 6)]\nprint(result)\nresult.to_excel('result.xlsx')","dc4e26d2":"\nparams = {\n    'objective': 'mse',\n    'metric': 'rmse',\n    'max_depth':5,\n    'num_leaves': 10,\n    'learning_rate': 0.001,\n    'feature_fraction': 0.75,\n    'bagging_fraction': 0.75,\n    'bagging_freq': 5,\n    'seed': 1,\n    'verbose': 1\n}","b7ba4f15":"\nlgb_train = lgb.Dataset(X_train[feature_name], y_train)\nlgb_eval = lgb.Dataset(X_test[feature_name], y_test, reference=lgb_train)","289c15d3":"\nevals_result = {}\ngbm = lgb.train(\n        params, \n        lgb_train,\n        num_boost_round=3000,\n        valid_sets=(lgb_train, lgb_eval), \n        feature_name = feature_name,\n        verbose_eval=5, \n        evals_result = evals_result,\n        early_stopping_rounds = 100)","1cdb46d7":"gbm.save_model('model.txt')","36d4564b":"lgb.plot_importance(\n    gbm, \n    max_num_features=29,\n    importance_type='gain', \n    figsize=(12,8));","7364e3bf":"lgb.plot_metric(evals_result,metric=\"rmse\")","5f128a49":"## LGB\u7684\u53c2\u6570\u96c6\u5408\uff1a\n\nobjective = ['regression', 'regression_l1', 'mape', 'huber', 'fair']\n\nnum_leaves = [3,5,10,15,20,40, 55]\nmax_depth = [3,5,10,15,20,40, 55]\nbagging_fraction = []\nfeature_fraction = []\ndrop_rate = []","c56bcc67":"from sklearn.model_selection import GridSearchCV","d5460c6b":"parameters = {'objective': objective , 'num_leaves': num_leaves, 'max_depth': max_depth}\nmodel = LGBMRegressor()\nclf = GridSearchCV(model, parameters, cv=5)\nclf = clf.fit(data_X, data_y)","4a7fd233":"clf.best_params_","a0fad699":"model = LGBMRegressor(objective='mape',\n                          num_leaves=10,\n                          max_depth=5,min_child_samples=73)","4ce7d594":"np.mean(cross_val_score(model, X=data_X, y=data_y, verbose=0, cv = 5, scoring=make_scorer(mean_absolute_error)))","06829c8b":"1. ****\u5254\u9664\u63a7\u5236\u53d8\u91cf\u7684\u591a\u91cd\u5171\u7ebf\u6027****"}}