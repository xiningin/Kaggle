{"cell_type":{"8dd8bd64":"code","0b4dbda8":"code","c089f3a7":"code","d9a290d6":"code","bf12b398":"code","7972864d":"code","bede0f8a":"code","1e3f28d7":"code","79842753":"markdown","576a043d":"markdown","2c4de85f":"markdown","56297b7b":"markdown"},"source":{"8dd8bd64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b4dbda8":"games = pd.read_csv(\"\/kaggle\/input\/chess\/games.csv\")\ngames.head(3)","c089f3a7":"games = games.drop(columns=[\"id\", \"created_at\", \"last_move_at\", \"white_id\", \"black_id\", \"rated\", \"increment_code\"])\ngames.head(3)","d9a290d6":"opening_moves = games.loc[:, [\"white_rating\", \"moves\"]]\nopening_moves['moves'] = opening_moves['moves'].apply(lambda s: s[:s.find(' ')])\nopening_moves","bf12b398":"move_frequencies = opening_moves['moves'].value_counts()\/len(opening_moves)\n\nfig = plt.figure(figsize=(14, 8))\nsns.barplot(x = move_frequencies.keys(), y = move_frequencies.array)","7972864d":"sns.set()\nsns.set_palette(\"twilight_shifted_r\")\n\n\nopening_keys = move_frequencies.keys()[:4]\ntop_4_opens = [opening_moves[opening_moves['moves'] == i][\"white_rating\"] for i in opening_keys]\n\ncumulative_opens = [top_4_opens[3].copy()]\n\nfor i in range(1, 4):\n    c = cumulative_opens[i-1].append(top_4_opens[3-i].copy())\n    cumulative_opens.append(c)\n    \nfig, ax = plt.subplots(1,1, figsize=(16,10))\nax.set_title(\"opening frequency vs. ELO\")\n\nfor i in range(4):\n    ax = sns.distplot(cumulative_opens[3-i], 20,  kde=False, hist_kws={\"alpha\": 1, \"range\": (800, 2800)}, label=opening_keys[i])\n    \nax.legend()","bede0f8a":"def string_to_moves(string):\n    \n    moves = []\n    \n    while \" \" in string:        \n        ind = string.find(\" \")\n        moves.append(string[0 : ind])\n        string = string[ind+1:]\n        \n    moves.append(string)\n    return moves\n\ndef move_of_first_capture(moves):\n    i = 1\n    \n    for move in moves:\n        if \"x\" in move:\n            return i\n        i += 1\n    \n    return 0","1e3f28d7":"def normalize(row):\n    return move_of_first_capture(string_to_moves(row[\"moves\"]))\/row[\"turns\"]\n\ncapture_data = games.apply(lambda row: normalize(row),axis=1)\n\nfig, ax = plt.subplots((1), figsize=(16,10))\nax = sns.distplot(capture_data, bins=30, kde=False) \nax.set_title(\"First capture of a game\")\nax.set_xlabel(\"Duration\")\nax.set_ylabel(\"Frequency\")","79842753":"Drop some of the colums we won't use for memory efficiency","576a043d":"Creating a new dataset with rating a opening move data. The entire movestring of the game is cut down to only the first move played by white.","2c4de85f":"How common is each opening?","56297b7b":"Does white's ELO influence the opening they will choose?"}}