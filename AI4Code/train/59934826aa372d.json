{"cell_type":{"cd8825d6":"code","981d5015":"code","bdeb746c":"code","afb457a2":"code","dead8d79":"code","5542da5f":"code","4b952a4e":"code","38790cbd":"code","71a852a3":"code","2a7ceea4":"code","920ad5a9":"code","a2ef8131":"code","9ba3149a":"code","0ab7da30":"code","9fbdcc6f":"code","f371aff3":"code","3f915b8e":"code","e09da5e9":"code","9d8f67a4":"code","46c5ac34":"code","af03a87f":"code","9ee11546":"code","5aa9fd5e":"code","a6ad7f46":"code","831cfb4c":"code","147a0e33":"code","280349aa":"code","3c9c13f9":"code","804a1463":"markdown","a63cfbba":"markdown","6cb702a4":"markdown","d7cd9fba":"markdown","1bf6cfc7":"markdown","6902f14c":"markdown","8698ae5a":"markdown","657f5f51":"markdown","76f460bb":"markdown","7cf09a13":"markdown","c02d2d65":"markdown","a69d92eb":"markdown","af116cb2":"markdown","940618b8":"markdown","f1d096c8":"markdown","52e00e64":"markdown","ae658768":"markdown","21c6ef51":"markdown","037423b1":"markdown","7fe6026f":"markdown","e62e563a":"markdown","e8f5d966":"markdown"},"source":{"cd8825d6":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data from API\nimport requests\n\n# Visualization\nimport matplotlib.pyplot as plt\n\n# Modeling and Prediction\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","981d5015":"prediction_period = 7  # Period for prediction, days","bdeb746c":"# Download data via API from the Portal of RNBO of Ukraine: https:\/\/api-covid19.rnbo.gov.ua\/\n# https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\ncode_region = 4914  # \"Zhytomyrsk\u0430 oblast\"\nprint(f'Download daily data from the Portal of RNBO of Ukraine')\nmyfile = requests.get(f'https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine&country={code_region}')\nopen('data', 'wb').write(myfile.content)\ndf_data = pd.read_json('data')\ndf_data","afb457a2":"# Display the last 10 rows of the dataframe \"df_data\"\ndf_data.tail(10)","dead8d79":"# Calculation daily data for number of confirmed cases\ndf_data['n_confirmed'] = df_data['confirmed'].diff()\n#df_data['n_confirmed'] = df_data['confirmed']","5542da5f":"# Filtering the missing data\ndata = df_data[['dates','n_confirmed']].dropna().reset_index(drop=True)\ndata['n_confirmed'] = data['n_confirmed'].astype('int')\ndata.tail(4)","4b952a4e":"# Delete the last zero value\ndata = data[:-1]\ndata.tail(3)","38790cbd":"# Build the plot\ndata['n_confirmed'].plot()","71a852a3":"# Prepairing data for modeling with Prophet\ndata.columns = ['ds', 'y']\ndata.tail()","2a7ceea4":"# Removing zero values\ndata = data[data['y'] > 0].reset_index(drop=True)\ndata","920ad5a9":"# Devide dataset to training and validation datasets\nvalid = data[(len(data)-prediction_period):].reset_index(drop=True)\ndata = data[:(len(data)-prediction_period)]\nvalid","a2ef8131":"data.tail(prediction_period)","9ba3149a":"# The smallest increase in value\ndata.loc[270:280]","0ab7da30":"# Selection data with the biggest wave\ndf2 = data[271:].reset_index(drop=True)\ndf2","9fbdcc6f":"df2.plot()","f371aff3":"# Build Prophet model\nmodel = Prophet()\n\n# Training model for all data\nmodel.fit(data)","3f915b8e":"# Build Prophet model with parameters ans structure \n# from the notebook https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting \n# but without holidays\nmodel2 = Prophet(daily_seasonality=False, weekly_seasonality=False, yearly_seasonality=False, \n                changepoint_range=1, changepoint_prior_scale = 0.3)\nmodel2.add_seasonality(name='weekly', period=7, fourier_order=12, \n                      mode = 'multiplicative', prior_scale = 0.24)\nmodel2.add_seasonality(name='triply', period=3, fourier_order=2, \n                      mode = 'multiplicative', prior_scale = 0.15)\n\n# Training model for df2\nmodel2.fit(df2)","e09da5e9":"def prediction_accuracy(valid, model):\n    # Calculation prediction accuracy for valid dataset by model\n    \n    future = model.make_future_dataframe(periods = prediction_period)   # Valid data prediction\n    forecast = model.predict(future)\n    forecast = forecast[(len(forecast)-prediction_period):]\n    forecast[forecast['yhat'] < 0]['yhat'] = 0\n    y_val = forecast['yhat'].round()  # Prediction    \n    y_target = valid['y']             # Real data\n    \n    return round(mean_absolute_error(y_val, y_target)*100\/valid['y'].sum(), 2)    ","9d8f67a4":"# Make a forecast for prediction_period days ahead\nfuture = model.make_future_dataframe(periods = prediction_period)\nforecast = model.predict(future)\n\n# Make values integer, and replace negative values with zero\nfeature_all = ['yhat_lower', 'yhat', 'yhat_upper']\nforecast[feature_all] = forecast[feature_all].astype('int')\nfor feature in feature_all:\n    forecast.loc[forecast[feature] < 0, feature] = 0","46c5ac34":"# Draw plot of the values with forecasting data\nfigure = model.plot(forecast, xlabel = 'Date', ylabel = 'Number of confirmed cases')","af03a87f":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component = model.plot_components(forecast)","9ee11546":"# Ouput the prediction for the next prediction_period days\nforecast[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","5aa9fd5e":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model)}%\")","a6ad7f46":"# Make a forecast for prediction_period days ahead\nfuture2 = model2.make_future_dataframe(periods = prediction_period)\nforecast2 = model2.predict(future2)\n\n# Make values integer, and replace negative values with zero\nforecast2[feature_all] = forecast2[feature_all].astype('int')\nfor feature in feature_all:\n    forecast2.loc[forecast2[feature] < 0, feature] = 0","831cfb4c":"# Draw plot of the values with forecasting data\nfigure2 = model2.plot(forecast2, xlabel = 'Date', ylabel = 'Number of confirmed cases')","147a0e33":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component2 = model2.plot_components(forecast2)","280349aa":"# Ouput the prediction for the next prediction_period days\nforecast2[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","3c9c13f9":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model2)}%\")","804a1463":"**ADDITIONAL TASK:** Try changing the parameters of the Prophet model and evaluate how this will affect the shape of the curve and the accuracy of the simulation","a63cfbba":"## Acknowledgements\n\n### Datasets:\n- official data of Ukraine (https:\/\/covid19.rnbo.gov.ua\/) - via API\n\n### Notebooks:\n* [AI-ML-DS Training. L1A : COVID in UA - Prophet](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-covid-in-ua-prophet?scriptVersionId=63736090)\n* [COVID in UA: Prophet with 4, Nd seasonality](https:\/\/www.kaggle.com\/vbmokin\/covid-in-ua-prophet-with-4-nd-seasonality)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [COVID-19 in Ukraine: EDA & Forecasting](https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting)\n* [COVID-19 new cases in 70 countries - FB Prophet](https:\/\/www.kaggle.com\/vbmokin\/covid-19-new-cases-in-70-countries-fb-prophet)\n\n### Libraries from GitHub:\n- https:\/\/facebook.github.io\/prophet\/\n- https:\/\/facebook.github.io\/prophet\/docs\/\n- https:\/\/github.com\/facebook\/prophet","6cb702a4":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE](#3)\n1. [Modeling](#4)\n1. [Prediction & Visualization](#5)","d7cd9fba":"## 5. Prediction & Visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","1bf6cfc7":"### All list of API parameters\nhttps:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\n\n### Example for region \"Zhytomyrsk\u0430 oblast\"\ncode_region = 4914","6902f14c":"<a class=\"anchor\" id=\"0\"><\/a>\n# COVID-19 in one region of Ukraine","8698ae5a":"## 3. EDA & FE<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","657f5f51":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","76f460bb":"**TASK:** Make similar calculations for the dataframe df2:\n1. Make a forecast for it for prediction_period=7 days ahead.\n2. Draw a plot of the values with forecasting data.\n3. Draw plot with the components (trend and weekly seasonality) of the forecasts.\n4. Ouput the prediction for the next prediction_period=7 days.","7cf09a13":"The adequacy of a more complex model is much better.","c02d2d65":"The adequacy of a simple model is very poor!","a69d92eb":"### For the biggest wave - df2","af116cb2":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","940618b8":"**ADDITIONAL TASK:** Try to specify another number (instead of 304) as a reference point or other.\n\nLook all data with plot here: https:\/\/covid19.rnbo.gov.ua\/","f1d096c8":"<a class=\"anchor\" id=\"0\"><\/a>\n# [AI-ML-DS : Training for beginners](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-for-beginners-in-kaggle). Level 2 (simple). 2021\n## Kaggle Contributor [@artur1999](https:\/\/www.kaggle.com\/artur1999)\n","52e00e64":"### Selection data with the biggest wave","ae658768":"## Dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data)","21c6ef51":"### For all data","037423b1":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","7fe6026f":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","e62e563a":"### For all data","e8f5d966":"### For the biggest wave - df2"}}