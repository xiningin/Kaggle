{"cell_type":{"82a07a25":"code","4958dfb1":"code","649b2c36":"code","2e28f90b":"code","153fcedd":"code","89600585":"code","8199bae1":"code","03c22d41":"code","c64150be":"code","79d3b1eb":"code","bc3681cc":"code","e1eae17e":"code","51a983d0":"code","7c16ffe0":"code","9fbf72b0":"code","8d761bb5":"code","11fa5470":"code","155ca20e":"code","0a976242":"code","053bdee3":"code","380c55c7":"code","0d449c29":"code","f624dc31":"code","1435493c":"code","956df4bd":"code","a23b7e73":"code","446ef117":"code","e32f0efe":"code","f9b2f31c":"code","d55c8ac7":"code","319dec8b":"code","ef32b124":"code","07a29fe3":"code","7205cded":"code","6b4ef33f":"code","71c9c37f":"code","bf1effcc":"code","b125c900":"code","7dfa1ed6":"code","3eca8701":"code","b48d83a4":"code","58822772":"code","b12f06c8":"code","f0af92ab":"code","7a528dc6":"code","919f93d3":"code","3ab1c8a8":"code","fab01101":"code","bc606b80":"code","f7d1b858":"code","a986708f":"code","3769bffa":"code","8aa47364":"code","c2b05733":"code","8765c2ed":"code","12adbbec":"code","ba411e35":"code","c94d1465":"code","b2a9e562":"code","e5337fea":"code","d8004c6e":"code","7dfaf4c7":"code","c6063ba8":"code","bb8fe96d":"code","57760624":"code","30ef6aa7":"code","58bee92d":"code","049daac1":"code","b330e559":"code","f3e99de1":"code","1fd1958f":"code","979e8412":"code","3d77f2c0":"code","48753509":"code","f5643719":"code","dd185999":"code","050009eb":"code","6690a45a":"code","7d9a6ffe":"code","5fd6e7e6":"code","aa6a87fc":"code","fafa5a6b":"code","aadfff60":"code","6cf8da53":"code","e4443ee4":"code","b3ed78e9":"code","e99619cd":"code","cc234041":"code","25818541":"code","db570339":"code","dd0f5c3e":"code","abbfe675":"code","5aa928cd":"code","b4147f78":"code","0d823e1c":"code","c6d42c29":"code","f70e06e6":"code","93691b99":"code","c6a638b5":"code","17863794":"code","417586c7":"code","ffcfa45c":"code","6e04a532":"code","84187ef2":"code","cc967535":"code","5c92673c":"code","5c3e4cc4":"code","e5613d71":"code","a62e6594":"code","efab12c7":"code","d777af75":"code","eb79848e":"code","44c42b20":"code","8e494d5e":"code","4029910b":"markdown","e2849679":"markdown","b04a717d":"markdown","fbe6a40f":"markdown","bcc53462":"markdown","d346391d":"markdown","1cee5788":"markdown","e1b14ae5":"markdown","4dcfa072":"markdown","3f69bc1b":"markdown","02f33f6a":"markdown","e8fb984f":"markdown","9e8bff35":"markdown","3752cf0a":"markdown","5da56d3b":"markdown","c0989fae":"markdown","c21a1233":"markdown","3d40fa8e":"markdown","a436e4a3":"markdown","b5df0421":"markdown","4002557b":"markdown","01f9d3b5":"markdown","cc0ebe08":"markdown","4c5a458a":"markdown","571e83cd":"markdown","fcc04a45":"markdown","09764a5e":"markdown","44f04a00":"markdown","eb4dbb0b":"markdown","49a5e8e0":"markdown","f0ce9374":"markdown","0636ce48":"markdown","ad95a943":"markdown","5da580cd":"markdown","e16d8a84":"markdown","8e38d53b":"markdown","f7cb7fb0":"markdown","44708f43":"markdown","cca31576":"markdown","70874cac":"markdown","5b95c0f5":"markdown","68cb5826":"markdown","539cb1cd":"markdown","cad65030":"markdown","c9633182":"markdown","5e3839e4":"markdown","fabc9406":"markdown","32dda4da":"markdown","9e5a169d":"markdown","f8cdb34b":"markdown","3bf4ed79":"markdown","f69d7e06":"markdown","1fe01bcc":"markdown","df39874d":"markdown","0a895c33":"markdown","cddcf328":"markdown","8d4145ba":"markdown","30368331":"markdown","b0464979":"markdown","d0738374":"markdown","a14275d0":"markdown","d41bb3c0":"markdown","3febc59d":"markdown","9be9de4b":"markdown","53a49d0f":"markdown","f42443e0":"markdown","82d3a963":"markdown","11db73bd":"markdown","b79abaef":"markdown","9a85e18b":"markdown","5f58d8ed":"markdown","5653f6d5":"markdown","ae48ce86":"markdown","6fa5b036":"markdown","94b8f7b8":"markdown","85a57bbf":"markdown","c40104e9":"markdown","e1d77e61":"markdown","a56907fb":"markdown","dda975c0":"markdown","ce39bef4":"markdown","48eb55fc":"markdown","bdd4b043":"markdown","ea013129":"markdown","f3a83f08":"markdown","f975ec50":"markdown","08553f67":"markdown","a757f19c":"markdown","2622c16b":"markdown","f7487112":"markdown","f226b171":"markdown","09084159":"markdown","96ff32a4":"markdown","84742dd6":"markdown","0507bd9b":"markdown","8e9824a4":"markdown","1b49fbb4":"markdown","e0ce7ac4":"markdown","7ead5bb1":"markdown","f2ec1e28":"markdown","67ef175c":"markdown","cd187215":"markdown","b784aded":"markdown","bddd83a7":"markdown","0a58c97a":"markdown","48845aa5":"markdown","29f11de3":"markdown","6b0d187e":"markdown","eef1c477":"markdown","6f8512ab":"markdown","443d7bb7":"markdown","c8d0dbcd":"markdown","8f6a78fa":"markdown","a3ad2e47":"markdown","c8a192b9":"markdown","7d4b5011":"markdown","b0b87411":"markdown","1e0f705e":"markdown","8444efba":"markdown","8be29a3c":"markdown","69cd191b":"markdown","54bc0bac":"markdown","53b3e01c":"markdown","1fff6c6e":"markdown","5d0aab63":"markdown","e30100b4":"markdown","4ff2e4ca":"markdown","57dbcb93":"markdown","fa271f10":"markdown","2af8cb33":"markdown","58e26506":"markdown","ead76c99":"markdown","0fc855d2":"markdown","3aae2a88":"markdown","cdfa3ecf":"markdown","2551070a":"markdown","9038a8fd":"markdown","f6892b29":"markdown","9a29f84e":"markdown","f10b5df2":"markdown","396bc565":"markdown","8ff1462d":"markdown","555c7ea3":"markdown","48968379":"markdown","193a12c5":"markdown","2ef67c61":"markdown","c16e7e53":"markdown","6b681a5b":"markdown","79550602":"markdown","da0445d5":"markdown","5dabc47c":"markdown","07d188d8":"markdown","b92deead":"markdown","d2f550f7":"markdown","96316af1":"markdown","01a1bd44":"markdown","3ea5c1e6":"markdown","9936f0e8":"markdown","efa7f97e":"markdown","882ec6e7":"markdown","ffcd61cc":"markdown","3c40afa6":"markdown","f63f2762":"markdown","20d8ab2d":"markdown","c4ec4cd7":"markdown","b874f560":"markdown","f7fd0bcb":"markdown","5b439d62":"markdown","0e34eece":"markdown","27c180db":"markdown","90798480":"markdown","9ef1c3d8":"markdown","bbafa8af":"markdown","40fe6748":"markdown","7c6f11b1":"markdown","80643ded":"markdown","ea517baa":"markdown","e3e7734e":"markdown","e1c11dc9":"markdown","769c93b9":"markdown","40737b9d":"markdown","776ad1cc":"markdown","e0129a1f":"markdown","d9307f9b":"markdown","edfa1b0e":"markdown","45fa62e5":"markdown","7a4f8c45":"markdown","d727e42e":"markdown","92bdc807":"markdown","d10baf7b":"markdown","4772969d":"markdown","52b15164":"markdown","5a96d526":"markdown"},"source":{"82a07a25":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nimport seaborn as sns\n\nsns.set_style('darkgrid')\nsns.set(font_scale = 1.1)","4958dfb1":"%%html\n<style>\n    table {float:left}\n<\/style>","649b2c36":"df = pd.read_csv('..\/input\/bank-marketing-data-set\/bank-additional-full.csv', sep=';')\ndf.head()","2e28f90b":"df.info()","153fcedd":"df.describe()","89600585":"fig, ax = plt.subplots(figsize=(8, 4))\nsns.countplot(x=df['y'], ax=ax)\n\nabs_vals = df['y'].value_counts()\nrel_vals = df['y'].value_counts(normalize=True) * 100\nlabels = [f'{p[0]} ({p[1]:.0f}%)' for p in zip(abs_vals, rel_vals)]\n\nax.bar_label(container=ax.containers[0], labels=labels)\nax.set_title('Target distribution', fontsize=16, pad=20)\n\nplt.tight_layout();","8199bae1":"df['y'].replace({'no': 0, 'yes': 1}, inplace=True);","03c22d41":"df['y'].tail()","c64150be":"fig, ax = plt.subplots(figsize=(10, 5))\n\ndf_corr = df.corr(method='pearson')\nmask = np.zeros_like(df_corr)\nmask[np.triu_indices_from(mask)] = True\n\nsns.heatmap(data=df_corr, vmin=-1, vmax=1, mask=mask, \n            cmap=sns.color_palette('coolwarm', as_cmap=True),\n            annot=True, fmt='.2f', linewidths=.5, ax=ax)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=65);","79d3b1eb":"def analyse_feature(df_, feature_name, feature_type, num_gr=10):\n    \n    print()\n    \n    if feature_type == 'categorical':\n\n        fig, axes = plt.subplots(2, 1, \n                                 figsize=(15, 6), \n                                 gridspec_kw={'height_ratios': [3, 2]}, \n                                 sharex=True)\n\n        # Subplot 1 (distribution)\n        plot_distribution(df_=df_, feature_name=feature_name, feature_type=feature_type,\n                          plot_options={'fig':fig, 'ax':axes[0]})\n        \n        axes[0].set_title(f'`{feature_name}` distribution', fontsize=20, fontweight='bold', pad=20)\n        \n        # Subplot 2 (Probability to say `yes`)\n        plot_yes_proportion(df_=df_, feature_name=feature_name, feature_type=feature_type,\n                            plot_options={'fig':fig, 'ax':axes[1]})\n        \n        plt.tight_layout()\n        \n        \n        \n    elif feature_type == 'numeric':\n        \n        fig, axes = plt.subplots(2, 1, \n                                 figsize=(15, 4), \n                                 gridspec_kw={'height_ratios': [3, 0.5]}, \n                                 sharex=True)\n        \n        # Subplot 1 (distribution)\n        plot_distribution(df_=df_, feature_name=feature_name, feature_type=feature_type, \n                          plot_options={'fig':fig, 'axes':axes})\n    \n        axes[0].set_title(f'`{feature_name}` distribution', fontsize=20, fontweight='bold', pad=20)\n\n    \n        # Plot YES-proportion\n        fig, ax = plt.subplots(figsize=(15, 3))\n        \n        plot_yes_proportion(df_=df_, feature_name=feature_name, feature_type=feature_type, num_gr=num_gr,\n                            plot_options={'fig':fig, 'ax':ax})\n        \n        plt.tight_layout()\n\n\ndef print_error_msg(msg):\n    print('=' * 20)\n    print('ERROR:')\n    print(msg)\n    print('=' * 20)\n    \ndef make_annot(dataset, roundby=2):\n    \n    if roundby != 0:\n        return dataset.apply(lambda col: [np.round(val, roundby) \n                                          if not np.isnan(val) else np.NaN\n                                          for val in col])\n    else:\n        return dataset.apply(lambda col: [np.round(val, roundby).astype('int') \n                                          if not np.isnan(val) else np.NaN\n                                          for val in col])\n    \n\ndef plot_heatmap(title_, data_, annot_, fmt_, cmap_, ax_):\n    \n    sns.heatmap(data=data_, annot=annot_, \n                fmt=fmt_,\n                cmap=cmap_, cbar_kws={'ticks':[]},\n                linewidths=1, ax=ax_);\n\n    ax_.set_title(title_, fontsize=16, pad=20)\n    ax_.set_ylabel('')\n    ax_.set_yticklabels(ax_.get_yticklabels(), rotation=25);\n\n    \ndef error_handling(func_name, by, df_, feature_name, fig, ax):\n\n    if df_ is None:\n        print_error_msg(f'{func_name}(): The dataset is None.')\n        return -1\n\n    if feature_name not in df_.columns:\n        if feature_name:\n            print_error_msg(f'{func_name}(): There is no such feature in dataset.')\n            fig.delaxes(ax)\n        else:\n            print_error_msg(f'{func_name}(): Please, specify the feature_name.')\n            fig.delaxes(ax)\n            \n        return -1\n    \n    if by not in ['month', 'year', 'month and year']:\n        print_error_msg('plot_observations_by(): Only by `year` or `month` or `month and year` are acceptable.')\n        fig.delaxes(ax)\n        return\n        \n    if feature_name and by != 'month and year' and df_[feature_name].dtype != 'object':\n        print_error_msg(f'{func_name}(): For `year` or `month` modes only categorical features are acceptable.')\n        fig.delaxes(ax)\n        return -1\n    \n    if feature_name and by == 'month and year' and df_[feature_name].dtype == 'object':\n        print_error_msg(f'{func_name}(): For `month and year` mode only numeric features are acceptable.')\n        fig.delaxes(ax)\n        return -1\n    \n    if not by:\n        print_error_msg(f'{func_name}(): Please, set the `by` attribute.')\n        fig.delaxes(ax)\n        return -1\n    \n    if not fig:\n        print_error_msg(f'{func_name}(): Please, set the `fig` attribute.')\n        fig.delaxes(ax)\n        return -1\n    \n    if not ax:\n        print_error_msg(f'{func_name}(): Please, set the `ax` attribute.')\n        fig.delaxes(ax)\n        return -1\n\n    \ndef plot_observations_by(by=None, df_=None, feature_name=None, fig=None, ax=None):\n   \n    if error_handling('plot_observations_by', by, df_, feature_name, fig, ax) == -1:\n        return\n    \n    months_order = pd.Categorical(['mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],\n                                  ordered=True)\n    \n    if feature_name == 'month':\n        order = months_order\n    else:\n        order = pd.Categorical(df_[feature_name].value_counts().index, ordered=True)\n    \n    if feature_name:\n        \n        if by in ['year', 'month']:\n            \n            if by == 'year':\n                observations = pd.crosstab(df_[feature_name], df_['year']).reindex(labels=order)\n            else:\n                lbls_order = order\n                cols_order = months_order\n                observations = pd.crosstab(df_[feature_name], df_['month']).reindex(labels=lbls_order, \n                                                                                    columns=cols_order)\n                \n            plot_heatmap(title_=f'{feature_name.capitalize()}\\'s caterogies by {by}',\n                         data_=np.log1p(observations),\n                         annot_=make_annot(observations, roundby=0),\n                         fmt_='.0f',\n                         cmap_=sns.color_palette('light:b', as_cmap=True),\n                         ax_=ax)\n\n        # ONLY FOR NUMERIC FEATURES\n        elif by == 'month and year':\n            observations_by_months_and_year = pd.crosstab(index=df_['month'], columns=df_['year'], values=df_[feature_name], \n                                                          aggfunc='median').reindex(labels=months_order)\n            \n            if df_[feature_name].dtype == 'float':\n                data = observations_by_months_and_year\n                annot = make_annot(observations_by_months_and_year, roundby=2)\n                fmt = '.2f'\n                cmap = sns.color_palette('coolwarm', as_cmap=True)\n            else:\n                data = np.log1p(observations_by_months_and_year)\n                annot = make_annot(observations_by_months_and_year, roundby=0)\n                fmt = '.0f'\n                cmap = sns.color_palette('light:b', as_cmap=True)\n            \n            plot_heatmap(title_=f'Median `{feature_name}` by {by}',\n                         data_=data,\n                         annot_=annot, \n                         fmt_=fmt,\n                         cmap_=cmap,\n                         ax_=ax)\n\n\ndef plot_yes_proportion_by(by=None, df_=None, feature_name=None, fig=None, ax=None):\n    \n    if error_handling('plot_yes_proportion_by', by, df_, feature_name, fig, ax) == -1:\n        return\n    \n    months_order = pd.Categorical(['mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],\n                                  ordered=True)\n    \n    if feature_name == 'month':\n        order = months_order\n    else:\n        order = pd.Categorical(df_[feature_name].value_counts().index, ordered=True)\n    \n    if feature_name:\n        \n        if by == 'year':\n\n            yes_proportion_by_year = df_.groupby([feature_name, 'year'])['y'].mean().unstack()\n\n            if feature_name == 'month':\n                order = months_order\n            else:\n                order = pd.Categorical(df_[feature_name].value_counts().index, ordered=True)\n\n            yes_proportion_by_year = yes_proportion_by_year.reindex(labels=order)\n            \n            annot = np.round(yes_proportion_by_year, 2)\n\n            plot_heatmap(title_=f'YES-proportion by {feature_name}\\'s categories and year',\n                         data_=yes_proportion_by_year,\n                         annot_=annot,\n                         fmt_='.2f',\n                         cmap_=sns.color_palette('light:b', as_cmap=True),\n                         ax_=ax)\n\n        elif by == 'month':\n                     \n            yes_proportion_by_month = df_.groupby([feature_name, 'month'])['y'].mean().unstack()\n            \n            if feature_name == 'month':\n                order = months_order\n            else:\n                order = pd.Categorical(df_[feature_name].value_counts().index, ordered=True)\n\n            lbls_order = order\n            cols_order = months_order\n            \n            yes_proportion_by_month = yes_proportion_by_month.reindex(labels=lbls_order, \n                                                                      columns=cols_order)\n            \n            annot = np.round(yes_proportion_by_month, 2)\n            fmt = '.2f'\n\n            plot_heatmap(title_=f'YES-proportion by {feature_name}\\'s categories and month',\n                         data_=yes_proportion_by_month,\n                         annot_=annot,\n                         fmt_=fmt,\n                         cmap_=sns.color_palette('light:b', as_cmap=True),\n                         ax_=ax)\n            \n            \n        # ONLY FOR NUMERIC FEATURES\n        elif by == 'month and year':\n            \n            yes_proportion_by_month_and_year = df_.groupby(['month', 'year'])['y'].mean().unstack()\n            \n            order = months_order\n            yes_proportion_by_month_and_year = yes_proportion_by_month_and_year.reindex(labels=order)\n\n            if df_[feature_name].dtype == 'float':\n                cmap = sns.color_palette('coolwarm', as_cmap=True)\n            else:\n                cmap = sns.color_palette('light:b', as_cmap=True)\n                \n            plot_heatmap(title_=f'YES-proportion by month and year',\n                         data_=yes_proportion_by_month_and_year,\n                         annot_=np.round(yes_proportion_by_month_and_year, 2), \n                         fmt_='.2f',\n                         cmap_=cmap,\n                         ax_=ax)\n\n    \ndef plot_distribution(df_=None, feature_name=None, feature_type=None, num_gr=10, plot_options={}):\n    \n    if feature_type == 'categorical':\n\n        if 'fig' not in plot_options.keys():\n            fig, ax = plt.subplots(figsize=(15, 3))\n        else:\n            fig = plot_options['fig']\n            ax = plot_options['ax']\n        \n        if feature_name != 'month':\n            custom_order = pd.Categorical(df_[feature_name].value_counts(ascending=False).index,\n                                          ordered=True)\n        else:\n            custom_order = pd.Categorical(['mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],\n                                          ordered=True)\n            \n        sns.countplot(x=df_[feature_name], \n                      order=custom_order,\n                      ax=ax);\n\n        # Bar labels\n        abs_values = df_[feature_name].value_counts(ascending=False)\n        rel_values = []\n        for i in (abs_values \/ df_.shape[0] * 100):\n            if i >= 1:\n                rel_values.append(f'{i:.0f}')\n            else:\n                rel_values.append(f'<1')\n                \n        lbls = [f'{p[0]} ({p[1]}%)' for p in zip(abs_values, rel_values)]\n        ax.bar_label(container=ax.containers[0], labels=lbls)\n\n        # Titles and labels\n        ax.set_title(f'`{feature_name}` distribution', fontsize=16, pad=20)\n        ax.set_xlabel('')\n        \n        if 'fig' not in plot_options.keys() and 'ax' not in plot_options.keys():\n            plt.tight_layout()\n            \n    elif feature_type == 'numeric':\n        \n        if 'fig' not in plot_options.keys() and 'axes' not in plot_options.keys():\n            fig, axes = plt.subplots(2, 1, \n                                     figsize=(15, 4), \n                                     gridspec_kw={'height_ratios': [3, 0.5]}, \n                                     sharex=True)\n        else:\n            fig = plot_options['fig']\n            axes = plot_options['axes']\n    \n        axes[0].set_title(f'`{feature_name}` distribution', fontsize=16, pad=20)\n        \n        sns.histplot(df_[feature_name], stat='density', lw=0, ax=axes[0]);\n        sns.kdeplot(df_[feature_name], color='#ffb500', lw=3, ax=axes[0]);\n        \n        # Plot feature stats \n        _, mean_val, _, min_val, q25, q50, q75, max_val = np.round(df_[feature_name].describe(), 2)\n        \n        feature_stats_text = (f'min: {min_val}\\n' + f'q25: {q25}\\n' + f'q50: {q50}\\n' +\n                            f'q75: {q75}\\n' + f'max: {max_val}\\n' + f'mean: {mean_val}')\n\n        x_coor = np.quantile(axes[0].get_xlim(), 0.85)\n        y_coor = np.quantile(axes[0].get_ylim(), 0.2)\n        \n        font = {\n            'color': 'black',\n            'size': 14\n        }\n\n        box = {\n            'facecolor': 'white',\n            'edgecolor': 'grey',\n            'alpha': 0.5,\n            'boxstyle': 'round'\n        }\n        \n        axes[0].text(x_coor, y_coor, feature_stats_text, fontdict=font, bbox=box);\n        \n        # Subplot 2 (boxplot)\n        sns.boxplot(x=df_[feature_name], ax=axes[1]);\n        \n        plt.tight_layout()\n\n        if 'fig' not in plot_options.keys():\n            plt.tight_layout()\n        \n    else:\n        print_error_msg('plot_distribution(): Only `categorical` and `numeric` are acceptable.')\n        fig.delaxes(ax)\n        return\n        \n    \ndef plot_yes_proportion(df_=None, feature_name=None, feature_type=None, num_gr=10, plot_options={}):\n\n    if 'fig' not in plot_options.keys():\n        fig, ax = plt.subplots(figsize=(15, 3))\n    else:\n        fig = plot_options['fig']\n        ax = plot_options['ax']\n        \n    if feature_type == 'categorical':\n        \n        if feature_name != 'month':\n            custom_order = pd.Categorical(df_[feature_name].value_counts(ascending=False).index,\n                                          ordered=True)\n        else:\n            custom_order = pd.Categorical(['mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],\n                                          ordered=True)\n\n        sns.barplot(x=df_[feature_name], \n                    y=df_['y'],\n                    order=custom_order,\n                    ci=95,\n                    errwidth=2,\n                    ax=ax);\n\n        # Bar labels\n        df_yes_proba = pd.crosstab(df_[feature_name], df_['y'])\n        df_yes_proba = (df_yes_proba[1] \/ (df_yes_proba[0] + df_yes_proba[1])).reindex(custom_order)\n\n        coors_x = np.arange(0, df_yes_proba.shape[0])\n        for i in range(df_yes_proba.shape[0]):\n            plt.annotate(f\"{df_yes_proba[i]:.2f}\", \n                         xy=(coors_x[i]-0.2, df_yes_proba[i]), \n                         ha='center', va='bottom')\n\n        # Titles and labels\n        ax.set_title('YES-proportion', fontsize=16, pad=20)\n        ax.set_ylabel('Proportion')\n\n        if 'fig' not in plot_options.keys():\n            plt.tight_layout()\n    \n    elif feature_type == 'numeric':\n        \n        n_unique = df_[feature_name].nunique()\n        \n        if num_gr > n_unique:\n            num_gr = n_unique\n            print(f'WARNING:\\n'\n                  f'The number of groups CANNOT be more than number of unique values ({n_unique}).\\n'\n                  f'It will be automatically reduced to that number.')\n        else:\n            num_gr += 1\n            \n        # Creating bins\n        bins = np.linspace(start=df_[feature_name].min(), \n                           stop=df_[feature_name].max(), \n                           num=num_gr)\n        \n        bins_series = pd.cut(df_[feature_name], bins=bins, include_lowest=True)\n        bins_series.name = f'{feature_name}_bins'\n        \n        df_bins_yes = pd.DataFrame(pd.concat([df_[feature_name], bins_series, df_['y']], axis=1))\n\n        yes_answers = df_bins_yes.groupby(bins_series.name)['y'].agg(lambda y: y.eq(1).sum())\n        bin_observations = df_bins_yes.groupby(bins_series.name)['y'].count()\n\n        # Getting the probabilities to say `yes` for each bin\n        df_yes_proba = yes_answers \/ bin_observations\n        df_yes_proba.name = 'mean'\n        \n        df_yes_proba = pd.DataFrame(df_yes_proba)\n\n        # Graph those probabilities\n        sns.barplot(x=df_bins_yes[f'{feature_name}_bins'], \n                    y=df_bins_yes['y'],\n                    ci=95,\n                    color='b',\n                    errwidth=2,\n                    ax=ax);\n\n        coors_x = np.arange(0, df_yes_proba['mean'].shape[0])\n        for i in range(df_yes_proba['mean'].shape[0]):\n            plt.annotate(f'{df_yes_proba[\"mean\"][i]:.2f}', \n                         xy=(coors_x[i]-0.2, df_yes_proba['mean'][i]), \n                         ha='center', va='bottom')\n        \n        # Titles and labels\n        ax.set_title('YES-proportion', fontsize=16, pad=20)\n        ax.set_ylabel('Proportion')\n        \n        abs_values = df_bins_yes.groupby(bins_series.name)['y'].count()\n        rel_values = []\n        for i in (abs_values \/ df_.shape[0] * 100):\n            if i >= 0.5:\n                rel_values.append(f'{i:.0f}')\n            else:\n                rel_values.append(f'<0.5')\n                \n        \n        bin_dtype = 'int' if df_[feature_name].dtype == 'int' else 'float'\n        \n        if bin_dtype == 'int':\n            x_lbls = [f'({int(i.left)}..{int(i.right)}]\\n-------\\n{j} ({k}%)' \n                          for i, j, k in zip(df_yes_proba.index, \n                                             abs_values, \n                                             rel_values)]\n        \n        if bin_dtype == 'float':\n            x_lbls = [f'({i.left:.2f}..{i.right:.2f}]\\n-------\\n{j} ({k}%)' \n                          for i, j, k in zip(df_yes_proba.index, \n                                             abs_values, \n                                             rel_values)]\n        ax.set_xticklabels(x_lbls)\n        \n        if 'fig' not in plot_options.keys():\n            plt.tight_layout()\n            \n    else:\n        print_error_msg('plot_yes_proportion(): Only `categorical` and `numeric` are acceptable.')\n        fig.delaxes(ax)\n        return\n\n","bc3681cc":"analyse_feature(df_=df, feature_name='month', feature_type='categorical')","e1eae17e":"# Here we just get an insight of how months are going one by one in the dataset.\n# Just a remainder: the observations are ordered by date (from May 2008 to November 2010)\nmonths_arr = []\nfor i in range(df.shape[0]):\n    \n    if months_arr != [] and months_arr[-1][1] == df.iloc[i]['month']:\n        continue\n    else:\n        months_arr.append([i, df.iloc[i]['month']])\n\nmonths_arr = np.array(months_arr)\nmonths_arr","51a983d0":"df['year'] = np.hstack((np.array([2008] * (27690 - 0)),\n                        np.array([2009] * (39130 - 27690)),\n                        np.array([2010] * (41188 - 39130))))","7c16ffe0":"df.columns","9fbf72b0":"df = df[['age', 'job', 'marital', 'education', 'default', 'housing', 'loan',\n         'contact', 'month', 'year', 'day_of_week', 'duration', 'campaign', 'pdays',\n         'previous', 'poutcome', 'emp.var.rate', 'cons.price.idx',\n         'cons.conf.idx', 'euribor3m', 'nr.employed', 'y']]\ndf.head(2)","8d761bb5":"df['month'].unique()","11fa5470":"months = ['mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\nmonths_order = pd.Categorical(months, ordered=True)","155ca20e":"fig, axes = plt.subplots(1, 3, figsize=(5, 4.5), sharey=True)\n\nfor i, year in enumerate(df['year'].unique()):\n    sns.heatmap(pd.DataFrame(df[df['year'] == year].groupby('month')['y'].sum() \/ \n                             df[df['year'] == year].groupby('month')['y'].count()).reindex(months_order),\n                cbar=False,\n                cmap=sns.color_palette('light:b', as_cmap=True),\n                ax=axes[i])\n    axes[i].set_ylabel('')\n    axes[i].set_xlabel(year)\n    axes[i].set_xticklabels('')\n    \naxes[0].set_yticklabels(axes[0].get_yticklabels(), rotation=25)\n\nplt.suptitle('Most and less succesful months by year', fontsize=16)\nplt.tight_layout();","0a976242":"analyse_feature(df_=df, feature_name='year', feature_type='categorical')","053bdee3":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='month', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='month', fig=fig, ax=axes[1])\n\naxes[0].add_artist(plt.Circle(xy=(0.5, 7.5), radius=0.4, fill=False, color='red', linewidth=2))\naxes[0].add_artist(plt.Circle(xy=(1.5, 1.5), radius=0.4, fill=False, color='red', alpha=.5, linewidth=2))\naxes[0].add_artist(plt.Circle(xy=(1.5, 2.5), radius=0.4, fill=False, color='red', alpha=.5, linewidth=2))\n\naxes[1].add_artist(plt.Circle(xy=(0.5, 7.5), radius=0.4, fill=False, color='red', alpha=.5, linewidth=2))\naxes[1].add_artist(plt.Circle(xy=(1.5, 1.5), radius=0.4, fill=False, color='red', linewidth=2))\naxes[1].add_artist(plt.Circle(xy=(1.5, 2.5), radius=0.4, fill=False, color='red', linewidth=2))\n\nfor tick1, tick2 in zip(axes[0].get_yticklabels(), axes[1].get_yticklabels()):\n    \n    if tick1.get_text() in ['apr', 'may', 'oct']:\n        tick1.set_color('red')\n        \n    if tick2.get_text() in ['apr', 'may', 'oct']:\n        tick2.set_color('red')\n\nplt.tight_layout();","380c55c7":"df_2008 = df[df['year'] == 2008]","0d449c29":"numeric_cols = df_2008.select_dtypes(include=['int16', 'int32', 'int64', \n                                              'float16', 'float32', 'float64']).columns\n\nnumeric_cols = numeric_cols[numeric_cols != 'year']\n\ncategorical_cols = df_2008.select_dtypes(include=['object']).columns","f624dc31":"df_2008_median = df_2008.groupby('month').median().reindex(index=months_order)","1435493c":"print()\n\nfig, axes = plt.subplots(3, 4, figsize=(15, 7))\naxes = axes.flatten()\n\nfor ax_, col in zip(axes[:-1], numeric_cols):\n    sns.scatterplot(data=df_2008_median, \n                    x=months, \n                    y=col, \n                    ax=ax_)\n    ax_.set_xlabel('')\n    ax_.plot('oct', df_2008_median.loc['oct'][col], 'o', ms=10, c='r')\n\nfig.delaxes(axes[-1])\nplt.suptitle('Median values of numeric columns for a year of 2008', fontsize=18)\nplt.tight_layout();","956df4bd":"print('=' * 100)\nprint(f'{\"Distributions of categorical columns for a year of 2008\":^100}')\nprint('=' * 100)\n\nfor row in categorical_cols[categorical_cols != 'month']:\n    g = sns.displot(data=df_2008, x=df_2008[row], col='month', \n                    height=5, facet_kws={'sharey':False});\n            \n    for col_val, ax in g.axes_dict.items():\n        if col_val == 'oct' or col_val == 'dec' and row == 'default':\n            ax.set_facecolor('mistyrose')\n    \n    for axes in g.axes.flat:\n        _ = axes.set_xticklabels([])\n        \nplt.tight_layout();","a23b7e73":"fig, axes = plt.subplots(1, 2, figsize=(15, 3))\nplot_observations_by(by='month', df_=df_2008, feature_name='default', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month', df_=df_2008, feature_name='default', fig=fig, ax=axes[1])\n\naxes[0].add_artist(plt.Circle(xy=(7.5, 1.5), radius=0.3, fill=False, color='red', linewidth=2))\naxes[0].add_artist(plt.Circle(xy=(9.5, 1.5), radius=0.3, fill=False, color='red', linewidth=2))\n\nfor tick in axes[0].get_yticklabels():\n    if tick.get_text() == 'unknown':\n        tick.set_color('red')\n        break\n        \naxes[0].set_title('Default\\'s categories in 2008 by month', fontsize=16, pad=20)\naxes[1].set_title('YES-proportion by default\\'s categories and month in 2008 ', fontsize=16, pad=20)\n\nplt.tight_layout()","446ef117":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='month', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='month', fig=fig, ax=axes[1])\n\naxes[0].add_artist(plt.Circle(xy=(1.5, 1.5), radius=0.4, fill=False, color='red', alpha=.5, linewidth=2))\naxes[0].add_artist(plt.Circle(xy=(1.5, 2.5), radius=0.4, fill=False, color='red', alpha=.5, linewidth=2))\naxes[1].add_artist(plt.Circle(xy=(1.5, 1.5), radius=0.4, fill=False, color='red', linewidth=2))\naxes[1].add_artist(plt.Circle(xy=(1.5, 2.5), radius=0.4, fill=False, color='red', linewidth=2))\n\nfor tick1, tick2 in zip(axes[0].get_yticklabels(), axes[1].get_yticklabels()):\n    \n    if tick1.get_text() in ['apr', 'may']:\n        tick1.set_color('red')\n        \n    if tick2.get_text() in ['apr', 'may']:\n        tick2.set_color('red')\n\nplt.tight_layout()","e32f0efe":"df_2009 = df[df['year'] == 2009]","f9b2f31c":"numeric_cols = df_2009.select_dtypes(include=['int16', 'int32', 'int64', \n                                           'float16', 'float32', 'float64']).columns\n\nnumeric_cols = numeric_cols[numeric_cols != 'year']\n\ncategorical_cols = df_2009.select_dtypes(include=['object']).columns","d55c8ac7":"df_2009_median = df_2009.groupby('month').median().reindex(labels=months_order)","319dec8b":"fig, axes = plt.subplots(3, 4, figsize=(20, 8))\naxes = axes.flatten()\n\nfor ax_, col in zip(axes[:-1], numeric_cols):\n    sns.scatterplot(data=df_2009_median, \n                    x=months, \n                    y=col, \n                    ax=ax_)\n    ax_.set_xlabel('')\n    ax_.plot('apr', df_2009_median.loc['apr'][col], 'o', ms=10, c='r');\n    ax_.plot('may', df_2009_median.loc['may'][col], 'o', ms=10, c='r');\n\nfig.delaxes(axes[-1])\nplt.suptitle('Median values of numeric columns for 2009', fontsize=24)\nplt.tight_layout();","ef32b124":"print('=' * 100)\nprint(f'{\"Distributions of categorical columns for 2009\":^100}')\nprint('=' * 100)\n\nfor row in categorical_cols[categorical_cols != 'month']:\n    g = sns.displot(data=df_2009, x=df_2009[row], col='month', \n                    height=5, facet_kws={'sharey':False})\n    \n    for col_val, ax in g.axes_dict.items():\n        if col_val == 'apr':\n            ax.set_facecolor('mistyrose')\n            \n        if col_val == 'may':\n            ax.set_facecolor('mistyrose')\n    \n    for axes in g.axes.flat:\n        _ = axes.set_xticklabels([])\n        \nplt.tight_layout();","07a29fe3":"fig, ax = plt.subplots(figsize=(15, 1))\n\nyear_corr = df.corr(method='pearson')['year']\nsns.heatmap([year_corr], vmin=-1, vmax=1,\n            xticklabels=year_corr.index,\n            yticklabels=['year'],\n            cmap=sns.color_palette('coolwarm', as_cmap=True),\n            cbar_kws={'aspect':2},\n            annot=True, fmt='.2f', linewidths=.5, ax=ax)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=55)\nax.set_title('Correlation with YEAR', fontsize=16, pad=20);","7205cded":"analyse_feature(df_=df, feature_name='age', feature_type='numeric', num_gr=5)","6b4ef33f":"feature_name = 'age'\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='month and year', df_=df, feature_name=feature_name, fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month and year', df_=df, feature_name=feature_name, fig=fig, ax=axes[1])\n\nplt.tight_layout();","71c9c37f":"feature_name = 'age'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","bf1effcc":"analyse_feature(df_=df, feature_name='job', feature_type='categorical')","b125c900":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='job', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='job', fig=fig, ax=axes[1])\n\nplt.tight_layout()","7dfa1ed6":"analyse_feature(df_=df, feature_name='marital', feature_type='categorical')","3eca8701":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='marital', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='marital', fig=fig, ax=axes[1])\n\naxes[0].add_artist(plt.Circle(xy=(2.5, 3.5), radius=0.3, fill=False, color='red', linewidth=2))\naxes[1].add_artist(plt.Circle(xy=(2.5, 3.5), radius=0.3, fill=False, color='red', alpha=.5, linewidth=2))\n\nfor tick1, tick2 in zip(axes[0].get_yticklabels(), axes[1].get_yticklabels()):\n    \n    if tick1.get_text() == 'unknown':\n        tick1.set_color('red')\n        \n    if tick2.get_text() == 'unknown':\n        tick2.set_color('red')\n\nplt.tight_layout();","b48d83a4":"analyse_feature(df_=df, feature_name='education', feature_type='categorical')","58822772":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='education', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='education', fig=fig, ax=axes[1])\n\naxes[0].add_artist(plt.Circle(xy=(1.5, 7.5), radius=0.3, fill=False, color='red', linewidth=2))\naxes[1].add_artist(plt.Circle(xy=(1.5, 7.5), radius=0.3, fill=False, color='red', alpha=.5, linewidth=2))\n\nfor tick1, tick2 in zip(axes[0].get_yticklabels(), axes[1].get_yticklabels()):\n    \n    if tick1.get_text() == 'illiterate':\n        tick1.set_color('red')\n        \n    if tick2.get_text() == 'illiterate':\n        tick2.set_color('red')\n\nplt.tight_layout();","b12f06c8":"analyse_feature(df_=df, feature_name='default', feature_type='categorical')","f0af92ab":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='default', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='default', fig=fig, ax=axes[1])\n\nplt.tight_layout()","7a528dc6":"analyse_feature(df_=df, feature_name='housing', feature_type='categorical')","919f93d3":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='housing', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='housing', fig=fig, ax=axes[1])\n\nplt.tight_layout()","3ab1c8a8":"analyse_feature(df_=df, feature_name='loan', feature_type='categorical')","fab01101":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='loan', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='loan', fig=fig, ax=axes[1])\n\nplt.tight_layout()","bc606b80":"analyse_feature(df_=df, feature_name='contact', feature_type='categorical')","f7d1b858":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='contact', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='contact', fig=fig, ax=axes[1])\n\nplt.tight_layout()","a986708f":"fig, axes = plt.subplots(2, 1, figsize=(15, 3), sharex=True)\n\nplot_yes_proportion_by(by='month', df_=df[(df['year'] == 2010) &\n                                                   (df['contact'] == 'cellular')], \n                                feature_name='contact', fig=fig, ax=axes[0])\nplot_observations_by(by='month', df_=df[(df['year'] == 2010) &\n                                                   (df['contact'] == 'cellular')], \n                                feature_name='contact', fig=fig, ax=axes[1])\n\naxes[0].set_xlabel('')\naxes[1].set_title('')\naxes[0].set_title('YES-proportion and observations of `cellular` contact by months of 2010', \n                  fontsize=16, pad=20)\nplt.tight_layout()","3769bffa":"fig, axes = plt.subplots(2, 1, figsize=(15, 3), sharex=True)\n\nplot_yes_proportion_by(by='month', df_=df[(df['year'] == 2010) &\n                                                   (df['contact'] == 'telephone')], \n                                feature_name='contact', fig=fig, ax=axes[0])\nplot_observations_by(by='month', df_=df[(df['year'] == 2010) &\n                                                   (df['contact'] == 'telephone')], \n                                feature_name='contact', fig=fig, ax=axes[1])\n\naxes[0].set_xlabel('')\naxes[1].set_title('')\naxes[0].set_title('YES-proportion and observations of `telephone` contact by months of 2010', \n                  fontsize=16, pad=20)\nplt.tight_layout()","8aa47364":"analyse_feature(df_=df, feature_name='day_of_week', feature_type='categorical')","c2b05733":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='day_of_week', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='day_of_week', fig=fig, ax=axes[1])\n\nplt.tight_layout()","8765c2ed":"analyse_feature(df_=df, feature_name='duration', feature_type='numeric')","12adbbec":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='month and year', df_=df, feature_name='duration', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month and year', df_=df, feature_name='duration', fig=fig, ax=axes[1])\n\nplt.tight_layout()","ba411e35":"feature_name = 'duration'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","c94d1465":"analyse_feature(df_=df, feature_name='campaign', feature_type='numeric', num_gr=15)","b2a9e562":"plot_yes_proportion(df_=df[df['campaign'] <= 4], \n                             feature_name='campaign', feature_type='numeric', \n                             num_gr=4)","e5337fea":"feature_name = 'campaign'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","d8004c6e":"analyse_feature(df_=df, feature_name='pdays', feature_type='numeric', num_gr=12)","7dfaf4c7":"df['pdays'] = df['pdays'].replace({999: -1})","c6063ba8":"analyse_feature(df, 'pdays', 'numeric', num_gr=5)","bb8fe96d":"plot_yes_proportion(df_=df, feature_name='pdays', feature_type='numeric')","57760624":"feature_name = 'pdays'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","30ef6aa7":"print(f'Were not contacted from the last campaign: {df[df[\"pdays\"] == -1].shape[0] \/ df.shape[0] * 100:.2f}%')\nprint(f'Were contacted the same day:    {df[df[\"pdays\"] == 0].shape[0] \/ df.shape[0] * 100:.2f}%')\nprint(f'Were contacted after 1 day:     {df[df[\"pdays\"] == 1].shape[0] \/ df.shape[0] * 100:.2f}%')","58bee92d":"analyse_feature(df_=df, feature_name='previous', feature_type='numeric', num_gr=10)","049daac1":"df['previous'].nunique()","b330e559":"analyse_feature(df_=df, feature_name='previous', feature_type='categorical')","f3e99de1":"feature_name = 'previous'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","1fd1958f":"analyse_feature(df_=df, feature_name='poutcome', feature_type='categorical')","979e8412":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='year', df_=df, feature_name='poutcome', fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='year', df_=df, feature_name='poutcome', fig=fig, ax=axes[1])\n\nplt.tight_layout()","3d77f2c0":"print(f'\"Success->success\" clients: ~{0.65 * 1373 \/ df.shape[0] * 100:.1f}%')\nprint(f'\"Failure->success\" clients: ~{0.14 * 4252 \/ df.shape[0] * 100:.1f}%')","48753509":"soc_econ_corr = df[['emp.var.rate', 'cons.price.idx', 'cons.conf.idx', \n                'euribor3m', 'nr.employed', 'y']].corr()\nmask = np.zeros_like(soc_econ_corr)\nmask[np.triu_indices_from(mask)] = True\n\nfig, ax = plt.subplots(figsize=(7, 4))\nsns.heatmap(soc_econ_corr, vmin=-1, vmax=1, mask=mask, \n            annot=True, fmt='.2f', cmap=sns.color_palette('coolwarm', as_cmap=True), ax=ax);\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=65);","f5643719":"feature_name = 'emp.var.rate'\n\nfig, ax = plt.subplots(figsize=(8, 3))\nsns.lineplot(data=df, x=df.index, y=feature_name, hue='year', palette='tab10', ax=ax)\n\nax.set_title(f'{feature_name} by year', fontsize=16, pad=20)\nplt.legend(bbox_to_anchor=(1.2, 1), loc='upper right');","dd185999":"feature_name = 'emp.var.rate'\n\nprint(f'Number of unique values: {df[feature_name].nunique()}\\n')\nprint(f'Vary from {df[feature_name].min()} to {df[feature_name].max()}:')\n\nprint(df[feature_name].value_counts())","050009eb":"feature_name = 'emp.var.rate'\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='month and year', df_=df, feature_name=feature_name, fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month and year', df_=df, feature_name=feature_name, fig=fig, ax=axes[1])\n\nplt.tight_layout()","6690a45a":"feature_name = 'emp.var.rate'\n\n# Cumulative YES-proportion\ncumulative_yes_proportion = []\nnum = 0\nden = 0\n\nfor i in range(df.shape[0]):\n    num += df['y'][i]\n    den += 1\n    cumulative_yes_proportion.append(num \/ den)\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(15, 4))\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=df[feature_name], label=f'{feature_name}',\n             color='b', ax=ax1)\nsns.lineplot(data=cumulative_yes_proportion, label=f'Cumulative\\nYES-proportion',\n             color='r', ax=ax2);\n\nax2.spines['left'].set_color('b')\nax2.spines['right'].set_color('r')\nax2.spines['bottom'].set_color('black')\n\nax1.yaxis.label.set_color('b')\nax2.yaxis.label.set_color('r')\n\nax1.tick_params(axis='y', colors='b')\nax2.tick_params(axis='y', colors='r')\n\nax1.legend(bbox_to_anchor=(-0.05, 1))\nax2.legend(bbox_to_anchor=(1.07, 1))\n\nax1.set_ylabel('')\nax2.set_ylabel('')\n\nax1.grid(False)\nax2.grid(False)\n\n# Marking years\nyear_indexes = [0, 27690, 39130]\nyear_labels = [2008, 2009, 2010]\nfor idx in year_indexes:\n    ax1.axvline(x=idx, lw=1, ls='--', c='grey')\nax1.set_xticks(ticks=year_indexes, labels=year_labels)\n\nplt.title(f'{feature_name} VS YES-proportion throughout the entire dataset', fontsize=16, pad=20)\nplt.tight_layout();","7d9a6ffe":"feature_name = 'emp.var.rate'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","5fd6e7e6":"feature_name = 'emp.var.rate'\n\nfig, ax = plt.subplots(figsize=(8, 4))\nsns.boxplot(x=df['y'], y=df[feature_name], color='b',\n            medianprops={'linestyle':'-.', 'linewidth':2.5, 'color':'orange',\n                         'marker':'*', 'markerfacecolor':'white', 'markeredgecolor':'black'},\n            ax=ax)\n\nbbox_props = dict(boxstyle='round', fc='w', ec='0.5', alpha=0.9)\nmedian_no, median_yes = df.groupby('y')[feature_name].median()\nplt.text(1.6, 1, f'NO-median: {median_no:>8}\\nYES-median: {median_yes:>6}', ha='left', va='center', size=14,\n        bbox=bbox_props)\n\nplt.title(f'`{feature_name}` VS. `y`', fontsize=16, pad=20)\nplt.tight_layout();","aa6a87fc":"feature_name = 'emp.var.rate'\n\nvar_by_year = pd.concat([df.groupby('year')[feature_name].var(), \n                         np.round(df['year'].value_counts(normalize=True) * 100, 1)], axis=1)\n\nvar_by_year.columns = [f'Variation of `{feature_name}`', 'Number of observations (%)']\nvar_by_year","fafa5a6b":"feature_name = 'cons.price.idx'\n\nfig, ax = plt.subplots(figsize=(8, 3))\nsns.lineplot(data=df, x=df.index, y=feature_name, hue='year', palette='tab10', ax=ax)\n\nax.set_title(f'{feature_name} by year', fontsize=16, pad=20)\nplt.legend(bbox_to_anchor=(1.2, 1), loc='upper right');","aadfff60":"feature_name = 'cons.price.idx'\n\nprint(f'Number of unique values: {df[feature_name].nunique()}\\n')\nprint(f'Vary from {df[feature_name].min()} to {df[feature_name].max()}')","6cf8da53":"feature_name = 'cons.price.idx'\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='month and year', df_=df, feature_name=feature_name, \n                              fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month and year', df_=df, feature_name=feature_name, \n                                fig=fig, ax=axes[1])\n\nplt.tight_layout()","e4443ee4":"feature_name = 'cons.price.idx'\n\n# Cumulative yes-proportion\ncumulative_yes_proportion = []\nnum = 0\nden = 0\n\nfor i in range(df.shape[0]):\n    num += df['y'][i]\n    den += 1\n    cumulative_yes_proportion.append(num \/ den)\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(15, 4))\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=df[feature_name], label=f'{feature_name}',\n             color='b', ax=ax1)\nsns.lineplot(data=cumulative_yes_proportion, label=f'Cumulative\\nYES-proportion',\n             color='r', ax=ax2)\n\nax2.spines['left'].set_color('b')\nax2.spines['right'].set_color('r')\nax2.spines['bottom'].set_color('black')\n\nax1.yaxis.label.set_color('b')\nax2.yaxis.label.set_color('r')\n\nax1.tick_params(axis='y', colors='b')\nax2.tick_params(axis='y', colors='r')\n\nax1.legend(bbox_to_anchor=(-0.05, 1))\nax2.legend(bbox_to_anchor=(1.07, 1))\n\nax1.set_ylabel('')\nax2.set_ylabel('')\n\nax1.grid(False)\nax2.grid(False)\n\n# Marking years\nyear_indexes = [0, 27690, 39130]\nyear_labels = [2008, 2009, 2010]\nfor idx in year_indexes:\n    ax1.axvline(x=idx, lw=1, ls='--', c='grey')\nax1.set_xticks(ticks=year_indexes, labels=year_labels)\n\n\nplt.title(f'{feature_name} VS YES-proportion throughout the entire dataset', fontsize=16, pad=20)\nplt.tight_layout();","b3ed78e9":"feature_name = 'cons.price.idx'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","e99619cd":"feature_name = 'cons.price.idx'\n\nfig, ax = plt.subplots(figsize=(8, 4))\nsns.boxplot(x=df['y'], y=df[feature_name],\n            medianprops={'linestyle':'-.', 'linewidth':2.5, 'color':'orange',\n                         'marker':'*', 'markerfacecolor':'white', 'markeredgecolor':'black'},\n            ax=ax)\n\nbbox_props = dict(boxstyle='round', fc='w', ec='0.5', alpha=0.9)\nmedian_no, median_yes = df.groupby('y')[feature_name].median()\nplt.text(1.6, 94.5, f'NO-median: {median_no:>8.2f}\\nYES-median: {median_yes:>6.2f}', \n         ha='left', va='center', size=14,\n         bbox=bbox_props)\n\nplt.title(f'`{feature_name}` VS. `y`', fontsize=16, pad=20);","cc234041":"feature_name = 'cons.price.idx'\n\nvar_by_year = pd.concat([df.groupby('year')[feature_name].var(), \n                         np.round(df['year'].value_counts(normalize=True) * 100, 1)], axis=1)\n\nvar_by_year.columns = [f'Variation of `{feature_name}`', 'Number of observations (%)']\nvar_by_year","25818541":"print(f'Pearson corr. coef. (`cons.price.idx` vs `emp.var.rate`): '\n      f'{df[\"cons.price.idx\"].corr(df[\"emp.var.rate\"]):.4f}')","db570339":"feature_name = 'cons.conf.idx'\n\nfig, ax = plt.subplots(figsize=(8, 3))\nsns.lineplot(data=df, x=df.index, y=feature_name, hue='year', palette='tab10', ax=ax)\n\nax.set_title(f'{feature_name} by year', fontsize=16, pad=20)\nplt.legend(bbox_to_anchor=(1.2, 1), loc='upper right');","dd0f5c3e":"feature_name = 'cons.conf.idx'\n\nprint(f'Number of unique values: {df[feature_name].nunique()}\\n')\nprint(f'Vary from {df[feature_name].min()} to {df[feature_name].max()}')","abbfe675":"feature_name = 'cons.conf.idx'\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='month and year', df_=df, feature_name=feature_name, \n                              fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month and year', df_=df, feature_name=feature_name, \n                                fig=fig, ax=axes[1])\n\nplt.tight_layout()","5aa928cd":"feature_name = 'cons.conf.idx'\n\n# Cumulative yes-proportion\ncumulative_yes_proportion = []\nnum = 0\nden = 0\n\nfor i in range(df.shape[0]):\n    num += df['y'][i]\n    den += 1\n    cumulative_yes_proportion.append(num \/ den)\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(15, 4))\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=df[feature_name], label=f'{feature_name}',\n             color='b', ax=ax1)\nsns.lineplot(data=cumulative_yes_proportion, label=f'Cumulative\\nYES-proportion',\n             color='r', ax=ax2)\n\nax2.spines['left'].set_color('b')\nax2.spines['right'].set_color('r')\nax2.spines['bottom'].set_color('black')\n\nax1.yaxis.label.set_color('b')\nax2.yaxis.label.set_color('r')\n\nax1.tick_params(axis='y', colors='b')\nax2.tick_params(axis='y', colors='r')\n\nax1.legend(bbox_to_anchor=(-0.05, 1))\nax2.legend(bbox_to_anchor=(1.07, 1))\n\nax1.set_ylabel('')\nax2.set_ylabel('')\n\nax1.grid(False)\nax2.grid(False)\n\n\n# Marking years\nyear_indexes = [0, 27690, 39130]\nyear_labels = [2008, 2009, 2010]\nfor idx in year_indexes:\n    ax1.axvline(x=idx, lw=1, ls='--', c='grey')\nax1.set_xticks(ticks=year_indexes, labels=year_labels)\n\n\nplt.title(f'{feature_name} VS YES-proportion throughout the entire dataset', fontsize=16, pad=20)\nplt.tight_layout();","b4147f78":"feature_name = 'cons.conf.idx'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","0d823e1c":"feature_name = 'cons.conf.idx'\n\nfig, ax = plt.subplots(figsize=(8, 4))\nsns.boxplot(x=df['y'], y=df[feature_name],\n            medianprops={'linestyle':'-.', 'linewidth':2.5, 'color':'orange',\n                         'marker':'*', 'markerfacecolor':'white', 'markeredgecolor':'black'},\n            ax=ax);\n\nbbox_props = dict(boxstyle='round', fc='w', ec='0.5', alpha=0.9)\nmedian_no, median_yes = df.groupby('y')[feature_name].median()\nplt.text(1.6, -29.5, f'NO-median: {median_no:>8.2f}\\nYES-median: {median_yes:>6.2f}', \n         ha='left', va='center', size=14,\n         bbox=bbox_props)\n\nplt.title(f'`{feature_name}` VS. `y`', fontsize=16, pad=20);","c6d42c29":"feature_name = 'cons.conf.idx'\n\nvar_by_year = pd.concat([df.groupby('year')[feature_name].var(), \n                         np.round(df['year'].value_counts(normalize=True) * 100, 1)], axis=1)\n\nvar_by_year.columns = [f'Variation of `{feature_name}`', 'Number of observations (%)']\nvar_by_year","f70e06e6":"feature_name = 'euribor3m'\n\nfig, ax = plt.subplots(figsize=(8, 3))\nsns.lineplot(data=df, x=df.index, y=feature_name, hue='year', palette='tab10', ax=ax)\n\nax.set_title(f'{feature_name} by year', fontsize=16, pad=20)\nplt.legend(bbox_to_anchor=(1.2, 1), loc='upper right');","93691b99":"feature_name = 'euribor3m'\n\nprint(f'Number of unique values: {df[feature_name].nunique()}\\n')\nprint(f'Vary from {df[feature_name].min()} to {df[feature_name].max()}')","c6a638b5":"feature_name = 'euribor3m'\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='month and year', df_=df, feature_name=feature_name, \n                              fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month and year', df_=df, feature_name=feature_name, \n                                fig=fig, ax=axes[1])\n\nplt.tight_layout()","17863794":"feature_name = 'euribor3m'\n\n# Cumulative yes-proportion\ncumulative_yes_proportion = []\nnum = 0\nden = 0\n\nfor i in range(df.shape[0]):\n    num += df['y'][i]\n    den += 1\n    cumulative_yes_proportion.append(num \/ den)\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(15, 4))\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=df[feature_name], label=f'{feature_name}',\n             color='b', ax=ax1)\nsns.lineplot(data=cumulative_yes_proportion, label=f'Cumulative\\nYES-proportion',\n             color='r', ax=ax2);\n\nax2.spines['left'].set_color('b')\nax2.spines['right'].set_color('r')\nax2.spines['bottom'].set_color('black')\n\nax1.yaxis.label.set_color('b')\nax2.yaxis.label.set_color('r')\n\nax1.tick_params(axis='y', colors='b')\nax2.tick_params(axis='y', colors='r')\n\nax1.legend(bbox_to_anchor=(-0.05, 1))\nax2.legend(bbox_to_anchor=(1.07, 1))\n\nax1.set_ylabel('')\nax2.set_ylabel('')\n\nax1.grid(False)\nax2.grid(False)\n\n\n# Marking years\nyear_indexes = [0, 27690, 39130]\nyear_labels = [2008, 2009, 2010]\nfor idx in year_indexes:\n    ax1.axvline(x=idx, lw=1, ls='--', c='grey')\nax1.set_xticks(ticks=year_indexes, labels=year_labels)\n\n\nplt.title(f'{feature_name} VS YES-proportion throughout the entire dataset', fontsize=16, pad=20)\nplt.tight_layout();","417586c7":"feature_name = 'euribor3m'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","ffcfa45c":"feature_name = 'euribor3m'\n\nfig, ax = plt.subplots(figsize=(8, 4))\nsns.boxplot(x=df['y'], y=df[feature_name],\n            medianprops={'linestyle':'-.', 'linewidth':2.5, 'color':'orange',\n                         'marker':'*', 'markerfacecolor':'white', 'markeredgecolor':'black'},\n            ax=ax);\n\nbbox_props = dict(boxstyle='round', fc='w', ec='0.5', alpha=0.9)\nmedian_no, median_yes = df.groupby('y')[feature_name].median()\nplt.text(1.6, 4.5, f'NO-median: {median_no:>8.2f}\\nYES-median: {median_yes:>6.2f}', \n         ha='left', va='center', size=14,\n         bbox=bbox_props)\n\nplt.title(f'`{feature_name}` VS. `y`', fontsize=16, pad=20);","6e04a532":"feature_name = 'euribor3m'\n\nvar_by_year = pd.concat([df.groupby('year')[feature_name].var(), \n                         np.round(df['year'].value_counts(normalize=True) * 100, 1)], axis=1)\n\nvar_by_year.columns = [f'Variation of `{feature_name}`', 'Number of observations (%)']\nvar_by_year","84187ef2":"feature_name = 'nr.employed'\n\nfig, ax = plt.subplots(figsize=(8, 3))\nsns.lineplot(data=df, x=df.index, y=feature_name, hue='year', palette='tab10', ax=ax)\n\nax.set_title(f'{feature_name} by year', fontsize=16, pad=20)\nplt.legend(bbox_to_anchor=(1.2, 1), loc='upper right');","cc967535":"feature_name = 'nr.employed'\n\nprint(f'Number of unique values: {df[feature_name].nunique()}\\n')\nprint(f'Vary from {df[feature_name].min()} to {df[feature_name].max()}')","5c92673c":"feature_name = 'nr.employed'\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\nplot_observations_by(by='month and year', df_=df, feature_name=feature_name, \n                              fig=fig, ax=axes[0])\nplot_yes_proportion_by(by='month and year', df_=df, feature_name=feature_name, \n                                fig=fig, ax=axes[1])\n\nplt.tight_layout()","5c3e4cc4":"feature_name = 'nr.employed'\n\n# Cumulative yes-proportion\ncumulative_yes_proportion = []\nnum = 0\nden = 0\n\nfor i in range(df.shape[0]):\n    num += df['y'][i]\n    den += 1\n    cumulative_yes_proportion.append(num \/ den)\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(15, 4))\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=df[feature_name], label=f'{feature_name}',\n             color='b', ax=ax1)\nsns.lineplot(data=cumulative_yes_proportion, label=f'Cumulative\\nYES-proportion',\n             color='r', ax=ax2);\n\nax2.spines['left'].set_color('b')\nax2.spines['right'].set_color('r')\nax2.spines['bottom'].set_color('black')\n\nax1.yaxis.label.set_color('b')\nax2.yaxis.label.set_color('r')\n\nax1.tick_params(axis='y', colors='b')\nax2.tick_params(axis='y', colors='r')\n\nax1.legend(bbox_to_anchor=(-0.05, 1))\nax2.legend(bbox_to_anchor=(1.07, 1))\n\nax1.set_ylabel('')\nax2.set_ylabel('')\n\nax1.grid(False)\nax2.grid(False)\n\n\n# Marking years\nyear_indexes = [0, 27690, 39130]\nyear_labels = [2008, 2009, 2010]\nfor idx in year_indexes:\n    ax1.axvline(x=idx, lw=1, ls='--', c='grey')\nax1.set_xticks(ticks=year_indexes, labels=year_labels)\n\n\nplt.title(f'{feature_name} VS YES-proportion throughout the entire dataset', fontsize=16, pad=20)\nplt.tight_layout();","e5613d71":"feature_name = 'nr.employed'\nprint(f'Pearson corr. coef. ({feature_name} vs y): {df[feature_name].corr(df[\"y\"]):.4f}')","a62e6594":"feature_name = 'nr.employed'\n\nfig, ax = plt.subplots(figsize=(8, 4))\nsns.boxplot(x=df['y'], y=df[feature_name],\n            medianprops={'linestyle':'-.', 'linewidth':2.5, 'color':'orange',\n                         'marker':'*', 'markerfacecolor':'white', 'markeredgecolor':'black'},\n            ax=ax)\n\nbbox_props = dict(boxstyle='round', fc='w', ec='0.5', alpha=0.9)\nmedian_no, median_yes = df.groupby('y')[feature_name].median()\nplt.text(1.6, 5200, f'NO-median: {median_no:>8.2f}\\nYES-median: {median_yes:>6.2f}', \n         ha='left', va='center', size=14,\n         bbox=bbox_props)\n\nplt.title(f'`{feature_name}` VS. `y`', fontsize=16, pad=20);","efab12c7":"feature_name = 'nr.employed'\n\nvar_by_year = pd.concat([df.groupby('year')[feature_name].var(), \n                         np.round(df['year'].value_counts(normalize=True) * 100, 1)], axis=1)\n\nvar_by_year.columns = [f'Variation of `{feature_name}`', 'Number of observations (%)']\nvar_by_year","d777af75":"fig, axes = plt.subplots(1, 2, figsize=(15, 4))\n\n# Plot 1\nsns.countplot(x=df['y'], ax=axes[0])\n\nabs_vals = df['y'].value_counts()\nrel_vals = df['y'].value_counts(normalize=True) * 100\nlabels = [f'{p[0]} ({p[1]:.0f}%)' for p in zip(abs_vals, rel_vals)]\naxes[0].bar_label(container=axes[0].containers[0], labels=labels)\n\naxes[0].set_title('Target distribution (overall)', fontsize=18, pad=20)\n\n# Plot 2\nsns.countplot(data=df, x='year', label='No', color='b', ax=axes[1])\nsns.countplot(data=df[df['y'] == 1], x='year', label='Yes', color=sns.color_palette()[1], ax=axes[1])\n\nrel_vals_0 = df.groupby('year')['y'].value_counts(normalize=True).sort_index().unstack()[0] * 100\nrel_vals_1 = df.groupby('year')['y'].value_counts(normalize=True).sort_index().unstack()[1] * 100\nlabels = [f'No - {p[0]:.0f}%\\nYes -{p[1]:.0f}%' for p in zip(rel_vals_0, rel_vals_1)]\naxes[1].bar_label(container=axes[1].containers[0], labels=labels)\n\naxes[1].set_title('Target distribution (by year)', fontsize=18, pad=20)\n\naxes[1].legend()\n\nplt.tight_layout();","eb79848e":"# Cumulative YES-proportion for the entire dataset (just a reminder: it is sorted by date by default)\n\ncumulative_yes_proportion = []\ncumulative_no_proportion = []\nyes = 0\ndenominator = 0\n\nfor i in range(df.shape[0]):\n    yes += df['y'][i]\n    denominator += 1\n    cumulative_yes_proportion.append(yes \/ denominator)\n    \ncumulative_yes_proportion = pd.Series(cumulative_yes_proportion)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(15, 4))\n\nsns.lineplot(data=cumulative_yes_proportion[:27690], label=f'2008-yes', lw=2, ax=ax)\nsns.lineplot(data=cumulative_yes_proportion[27690:39130], label=f'2009-yes', lw=2, ax=ax)\nsns.lineplot(data=cumulative_yes_proportion[39130:], label=f'2010-yes', lw=2, ax=ax)\n\nax.set_ylabel('Proportion')\nax.get_legend().remove()\n\n# Mark years\nyear_indexes = [0, 27690, 39130]\nyear_labels = [2008, 2009, 2010]\nfor idx in year_indexes:\n    ax.axvline(x=idx, lw=1, ls='--', c='grey')\nax.set_xticks(ticks=year_indexes, labels=year_labels)\n\nplt.title(f'Cumulative YES-proportion throughout the entire dataset', fontsize=16, pad=20)\nplt.tight_layout();","44c42b20":"# Growth comparison (abs values)\nprint('=' * 50)\nprint('Growth comparison (absolute values: YES-proportion growth per year)')\nprint('=' * 50)\nprint(f'2008: '\n      f'{cumulative_yes_proportion[:27690].max() - cumulative_yes_proportion[:27690].min():.3f}')\nprint(f'2009: '\n      f'{cumulative_yes_proportion[27690:39130].max() - cumulative_yes_proportion[27690:39130].min():.3f}')\nprint(f'2010: '\n      f'{cumulative_yes_proportion[39130:].max() - cumulative_yes_proportion[39130:].min():.3f}')","8e494d5e":"# Growth speed comparison (rel values)\ngrowth_speed_2008 = (cumulative_yes_proportion[:27690].max() - \n                     cumulative_yes_proportion[:27690].min()) \/ 27690\ngrowth_speed_2009 = (cumulative_yes_proportion[27690:39130].max() - \n                     cumulative_yes_proportion[27690:39130].min()) \/ (39130 - 27690)\ngrowth_speed_2010 = (cumulative_yes_proportion[39130:].max() - \n                     cumulative_yes_proportion[39130:].min()) \/ (41188 - 39130)\nprint('=' * 50)\nprint('Growth speed comparison (relative values: YES-proportion growth per observation)')\nprint('=' * 50)\nprint(f'2008: {growth_speed_2008:.10f}')\nprint(f'2009: {growth_speed_2009:.10f}')\nprint(f'2010: {growth_speed_2010:.10f}')","4029910b":"Now, let's check a variance by year:","e2849679":"#### Feature: poutcome (categorical)","b04a717d":"There is a weak negative correlation between `euribor3m` and `y`.","fbe6a40f":"In the next chapter I am going to talk about data preprocessing and feature selection.","bcc53462":"# Exploratory Data Analysis (EDA)","d346391d":"General view of `cons.conf.idx` throughout all three years of observations:","1cee5788":"Let's check a distribution for YES\/NO-answers:","e1b14ae5":"There is no correlation between `campaign` and `y`.","4dcfa072":"Despite of `emp.var.rate` is a numeric feature, it has a small number of unique values:","3f69bc1b":"General view of `cons.price.idx` throughout all three years of observations:","02f33f6a":"So, we cannot see any noticeable patterns between years.","e8fb984f":"<samp>default: has credit in default? (categorical: 'no', 'yes', 'unknown')<\/samp>","9e8bff35":"Both 2008 and 2009 have a higher variation of employment variation rate and that's about 95% of all observations. As we all know, 2008 and 2009 were the years of the global financial crisis, so those 95% were obtained during a quite hard time for economy.","3752cf0a":"There is a pretty big difference in 2010, so let's dig into it. \n\n`Cellular` contacts by months:","5da56d3b":"There is a weak correlation between `previous` and `y`.","c0989fae":"Despite of strong correlation between `cons.price.idx` and `emp.var.rate`, we don't see that 2009 was worse than 2010 in terms of consumer prices.","c21a1233":"And the last one finding here. Let's check a variance by year:","3d40fa8e":"### Bank client data","a436e4a3":"<samp>nr.employed: number of employees - quarterly indicator (numeric)<\/samp>","b5df0421":"12. `campaign`: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n13. `pdays`: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n14. `previous`: number of contacts performed before this campaign and for this client (numeric)\n15. `poutcome`: outcome of the previous marketing campaign (categorical)","4002557b":"* Each year has an uneven distribution of observations by month\n* It's like we have anomalies at Oct, 2008 and at Apr and May, 2009","01f9d3b5":"**IMPORTANT NOTES:**\n\n1. I will use some of my own functions for analysing features.\n2. I am going to go feature by feature according to an order in the [Attribute Information](#Attribute-Information) section, BUT, on an exceptional basis, I want to start with a `month`.\n\nLet's go!","cc0ebe08":"## Feature Analysis","4c5a458a":"8. `contact`: contact communication type (categorical)\n9. `month`: last contact month of year (categorical)\n10. `day_of_week`: last contact day of the week (categorical)\n11. `duration`: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.","571e83cd":"<samp>cons.conf.idx: consumer confidence index - monthly indicator (numeric)<\/samp>","fcc04a45":"- 2008: during that year a `nr.employed` was growing but dropped at the end.\n- 2009: it was stable and there was another drop at the last months\n- 2010: the `nr.employed` continued to fall down.","09764a5e":"The distribution is uneven and it looks like some months are more preferable in terms of getting YES-answers, but we need to check that. Let's do it.","44f04a00":"Hope, this EDA was interesting and helpful to you. If you have any questions, you're welcome in the comment section below. Thumbs up and subscribe if you like it!","eb4dbb0b":"`poutcome`\n\n**Conclusion:**\n\n- 86% did not participate in the previous marketing campaign, therefore we don't have any previous outcomes for them.\n- About 2.2% of clients answered YES during both previous and current campaigns.\n- About 1.4% of clients answered YES for the current campaign, while having NO with a previous one.\n- If we have a positive answer with a previous campaign, then we more likely to get YES answer during the current one.\n- If we have a negative answer with a previous campaign, then we less likely to get YES answer, and it is even lower probability for those whose results are non-existent.","49a5e8e0":"Let's dig into 2009:","f0ce9374":"### Related with the last contact of the current campaign","0636ce48":"Now, let's check a variance by year:","ad95a943":"<samp>month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')<\/samp>","5da580cd":"#### Feature: education (categorical)","e16d8a84":"Here we see that the medians are nearly equal.","8e38d53b":"`cons.conf.idx`\n\n**Conclusion:**\n\n- There is no noticeable correlation between consumer confidence index and people's answers.\n- Median values of `cons.conf.idx` for YES\/NO-answers are nearly equal.\n- Values:\n    - Number of unique values: 26\n    - Vary from -50.8 to -26.9","f7cb7fb0":"Now we see, that even though 2010 has the least growth, that growth was the fastest among all years.","44708f43":"`nr.employed`\n\n**Conclusion:**\n\n- There is negative correlation (-0.36) between `nr.employed` and `y`.\n- There is a huge difference between medians of `nr.employed` for YES\/NO-answers.\n- Values:\n    - Number of unique values: 11\n    - Vary from 4963.6 to 5228.1","cca31576":"Here we also have a small number of observations:","70874cac":"2008 was the best and 2009 is not to far from it, but this result is certainly affected by an uneven distribution of observations per year.\n\nThen what about growth speed? That will give us much better values to compare. Let's check: ","5b95c0f5":"#### Feature: day_of_week (categorical)","68cb5826":"`marital`\n\n**Conclusions:**\n\n- Most people in the dataset are married ($\\approx$61%).\n- There is no substantial evidence of relationships between marital's categories and YES-answers.","539cb1cd":"There is a huge difference between medians, so this feature will be useful for classification.","cad65030":"As you see, it is a light negative correlation. That means, the higher employment variation rate\u200a-\u200athe lower YES-proportion we got, and vice versa. And that seems quite reasonable: if the employment rate is highly various, people are not sure about their future and tend to make cautious decisions\u200a-\u200aso they give YES-answer less frequent. But we should be careful here and recall that correlation is not causation.","c9633182":"Hmm, there is nothing unique about October here. Let's check categorical columns:","5e3839e4":"- Highly imbalanced distribution overall\n- A share of YES-answers was growing by year","fabc9406":"## Output variable (desired target)","32dda4da":"`pdays`\n\n**Conclusion:**\n\n- Around 96% were not contacted from the last campaign.\n- The chances to get YES are pretty high within the first 2 weeks (up to 14-15 days); further we have high variance and small data.\n- People, who was not being previously contacted, have the lowest probability to say YES (0.09).","9e5a169d":"In 2009 the number of employed people was twice as high as in 2008 and 2010.","f8cdb34b":"Perfect! Now let's go back and see if some months are really more preferable in terms of getting YES-answers:","3bf4ed79":"We see the difference between medians, so this feature will be useful for classification.","f69d7e06":"Let's dig into 2008 to see if October has any strange things:","1fe01bcc":"`euribor3m`\n\n**Conclusion:**\n\n- There is a small negative correlation (-0.31) between `euribor3m` and `y`.\n- There is a huge difference between medians of `euribor3m` for YES\/NO-answers.\n- Values:\n    - Number of unique values: 316\n    - Vary from 0.634 to 5.045","df39874d":"### Social and economic context attributes","0a895c33":"<samp>euribor3m: euribor 3 month rate - daily indicator (numeric)<\/samp>","cddcf328":"#### Feature: campaign (numeric)","8d4145ba":"`default`\n\n**Conclusion:**\n\n- Most people in the dataset ($\\approx$79%) have NO credit in default.\n- It seems like people with NO credit in default are more likely to agree to subscribe a bank term deposit, but it is due to 2009's result. We do not see any significant difference in 2008 and 2010.","30368331":"As we got such a small number of unique values here, let's analyse it as a categorical feature just for a convenience:","b0464979":"Checking for missing values, data types and some other stuff:","d0738374":"#### Feature: previous (numeric)","a14275d0":"#### Feature: emp.var.rate (numeric)","d41bb3c0":"2008 and 2010 were more stormy than 2009.","3febc59d":"`y`\n\n**Conclusion:**\n\n- Highly imbalanced distribution overall (89% of NO vs 11% of YES).\n- A share of YES-answer was growing by year.\n- 2008 has the highest, but, at the same time, the slowest growth of the YES-proportion.\n- 2010 has the lowest, but, at the same time, the fastest growth of the YES-proportion.","9be9de4b":"### Bank client data","53a49d0f":"- 2008 and 2009: index was gradually decreasing with some short periods of growth. And at the end of 2009 it started to grow.\n- 2010: prices went up dramatically.","f42443e0":"Okay, now, let's analyse months with taking years into account:","82d3a963":"`loan`\n\n**Conclusion:**\n\n- The overwhelming majority of people don't have a personal loan ($\\approx$82%)\n- There is no substantial evidence of relationships between loan's categories and YES-answers.","11db73bd":"#### Feature: default (categorical)","b79abaef":"As you can see, there is nothing unusual for April and May of 2009. So, let's move on then. Maybe, we'll find something interesting studying other features.","9a85e18b":"Now, let's see how YES-proportion correlates with `cons.price.idx` by month and year and throughout the entire dataset:","5f58d8ed":"<samp>duration: last contact duration, in seconds (numeric).<\/samp> \n\n<samp><b>Important note:<\/b> this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.<\/samp>","5653f6d5":"#### Feature: nr.employed (numeric)","ae48ce86":"## Correlation matrix","6fa5b036":"You see that we've got an anomaly high YES-proportions for a `cellular` type of contact in 2010. The reason for this is unknown so far.","94b8f7b8":"### Feature: month (categorical)","85a57bbf":"Now, let's see how YES-proportion correlates with `nr.employed` by month and year and throughout the entire dataset:","c40104e9":"Let's replace `999` with `-1` and repeat the analysis:","e1d77e61":"Let's make the `y` binary right on this step:","a56907fb":"- The distribution is highly uneven\n- Most observations were got in 2008 ($\\approx$67%)\n- The most successful year was 2010 (YES-proportion $\\approx$ 0.52)\n\nNow, let's check what each year hides from us:","dda975c0":"A distribution first:","ce39bef4":"General view of `nr.employed` throughout all three years of observations:","48eb55fc":"There is a little negative correlation between `cons.price.idx` and `y`.","bdd4b043":"And now let's analyse the growth of YES-answers per year:","ea013129":"We've already analysed this - check the [link to 4.3.1 section](#Feature:-month-(categorical)).","f3a83f08":"Let's check a distribution for YES\/NO-answers:","f975ec50":"#### Feature: cons.conf.idx (numeric)","08553f67":"#### Feature: housing (categorical)","a757f19c":"There is no correlation between `age` and `y`.","2622c16b":"And a bit of reordering (I want to move the `year` right after the `month`):","f7487112":"`campaign`\n\n**Conclusion:**\n\n- Nearly 43% were contacted only once.\n- 88% of people were contacted less than 5 times.\n- More contacts lead to less YES-answers, but it's still effective.","f226b171":"There is a weak correlation between `pdays` and `y`.","09084159":"Let's check a distribution for YES\/NO-answers:","96ff32a4":"From the dataset description we know, that:\n> `bank-additional-full.csv` with all examples (41188) and 20 inputs, **ordered by date (from May 2008 to November 2010)**, very close to the data analyzed in [Moro et al., 2014]\n\nConsidering that our dataset is about consent of people to subscribe a term deposit, I suppose, all of you will agree, that each month has its own social and economic context. And undoubtedly, economic factors had an impact on people's decisions (i.e. on our target `y`). Therefore, I decided to go a bit deeper about months.\n\nLet me add a new feature named `year`. I want to see if I can get some useful insights of it.\n\n**IMPORTANT NOTE:** I will add the `year` feature just for analysis purposes and I won't use it for training a model.","84742dd6":"Just for getting a general view of how `emp.var.rate` looks throughout all three years of observations:","0507bd9b":"`education`\n\n**Conclusion:**\n\nThere is no substantial evidence of relationships between education's categories and YES-answers.","8e9824a4":"<samp>pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)<\/samp>\n\n**IMPORTANT NOTE**: It is worth mentioning here that \"was not previously contacted\" is only in the context of a **previous** campaign and **does not** mean they were not previously contacted at all.","1b49fbb4":"Again, we will compare median values of all numeric features, but for a year of 2009:","e0ce7ac4":"### Other attributes","7ead5bb1":"<samp>emp.var.rate: employment variation rate - quarterly indicator (numeric)<\/samp>","f2ec1e28":"`age`\n\n**Conclusions:**\n\n- Median age: 38 y.o.\n- Mean age: $\\approx$40 y.o. \n- People older than 65 y.o. are more likely to agree to subscribe a bank term deposit, but in general, there is no correlation between the `age` and YES-proportion.","67ef175c":"There is negative correlation between `nr.employed` and `y`.","cd187215":"The plot above shows that the more contacts is the less YES-answers, BUT on the other hand every time we get additional positive answers from people who didn't agree previously :) Yes, the proportion is becoming smaller and smaller, hence it's still there :)","b784aded":"Now, let's check a variance by year:","bddd83a7":"`previous`\n\n**Conclusion:**\n\n- Around 86% were not contacted before this campaign.\n- It seems like making contacts before a campaign is much better than do not do them at all (for numbers bigger than 3 we have a small number of observations).\n- Furthermore, we can suppose that more previous contacts mean more chances to get YES, but only to some degree.","0a58c97a":"One last thing, we'll check a correlation of our new feature, the `year`, with the other ones:","48845aa5":"In 2008-09 an indicator varied much more than in 2010.","29f11de3":"`cons.price.idx`\n\n**Conclusion:**\n\n- There is a little negative correlation (-0.14) between `cons.price.idx` and `y`.\n- There is a huge difference between medians of `cons.price.idx` for YES\/NO-answers.\n- Values:\n    - Number of unique values: 26\n    - Vary from 92.201 to 94.767","6b0d187e":"<samp>month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')<\/samp>","eef1c477":"Again, `single` people look like they are tend to agree more (based on the first plot), but we don't see this situation on the YES-proportion by year plot.\n\nAs to `unknown`, we just have not enough observations.","6f8512ab":"#### Feature: duration (numeric)","443d7bb7":"What we've got:\n\n$2008 \\rightarrow [0..27690)$\n\n$2009 \\rightarrow [27690..39130)$\n\n$2010 \\rightarrow [39130..41188)$\n\nLet's hardcode the `year` feature based on these indexes:","c8d0dbcd":"<samp>poutcome: outcome of the previous marketing campaign (categorical: 'failure', 'nonexistent', 'success')<\/samp>","8f6a78fa":"<samp>housing: has housing loan? (categorical: 'no', 'yes', 'unknown')<\/samp>","a3ad2e47":"#### Feature: marital (categorical)","c8a192b9":"Here we have:","7d4b5011":"<samp>loan: has personal loan? (categorical: 'no', 'yes', 'unknown')<\/samp>","b0b87411":"Numeric features which are the most correlated with `y` are:\n\n|Feature| Corr with `y`|\n|:---|---|\n|duration|0.41|\n|pdays|0.32|\n|nr.employed|-0.35|\n|euribor3m|-0.31|\n|emp.var.rate|-0.30|","1e0f705e":"Let's check a distribution for YES\/NO-answers:","8444efba":"### Related with the last contact of the current campaign","8be29a3c":"**IMPORTANT NOTE:** We are going to analyse next features using our custom feature - `year`.","69cd191b":"Obviously, the dataset is imbalanced.","54bc0bac":"According to [Investopedia](https:\/\/www.investopedia.com\/terms\/c\/cci.asp):\n>The Consumer Confidence Index (CCI) is a survey, administered by The Conference Board, that measures how optimistic or pessimistic consumers are regarding their expected financial situation. The CCI is based on the premise that if consumers are optimistic, they will spend more and stimulate the economy but if they are pessimistic then their spending patterns could lead to a recession. \n\nSo, in 2009 and 2010 a sentiment changed a lot in comparison with 2008.","53b3e01c":"`contact`\n\n**Conclusion:**\n\n- Most people were contacted by the cellular ($\\approx$63%)\n- People which were contacted via cellular are a bit likely to agree to subscribe a bank term deposit. But just a bit:\n    - 2008: 0.06 vs 0.04\n    - 2009: 0.20 vs 0.15\n    - 2010: 0.58 vs 0.28 (anomaly results regarding 2008-09)","1fff6c6e":"# UCI Bank Marketing Dataset. Case study. Part 1 (EDA)","5d0aab63":"Again, there is a huge difference between medians, and that's good for classification tasks.","e30100b4":"There is a correlation between `duration` and `y`.","4ff2e4ca":"`y`\n\n**Conclusion:**\n\n* Our target variable is highly imbalanced.\n\n> More detailed analysis is under [4.3.6](#Output-variable-(target)) chapter.","57dbcb93":"21. `y` - has the client subscribed a term deposit? (binary: 'yes','no')","fa271f10":"`month`\n\n**Conclusions:**\n\nWe are unlikely to find out which period of year is more or less successful in terms of YES-answers, because of two reasons:\n- the number of observations is highly varied by month and year (uneven distributions within every year);\n- some months of some years don't have observations at all\n\nTherefore, I'm not 100% sure, but I think we should NOT use the `month` for training a model. However, I'm 100% sure, that we can use the `month` and the `year` features as auxiliaries for analysing the other ones.","2af8cb33":"Now, let's see how YES-proportion correlates with `cons.conf.idx` by month and year and throughout the entire dataset:","58e26506":"## Input variables","ead76c99":"General view of `euribor3m` throughout all three years of observations:","0fc855d2":"<samp>day_of_week: last contact day of the week (categorical: 'mon', 'tue', 'wed', 'thu', 'fri')<\/samp>","3aae2a88":"### Social and economic context attributes","cdfa3ecf":"<samp>cons.price.idx: consumer price index - monthly indicator (numeric)<\/samp>","2551070a":"# Summary","9038a8fd":"First, we are going to check how observations distributed by month and also see their YES-proportion:","f6892b29":"`housing`\n\n**Conclusion:**\n\n- The number of people who have a housing loan is almost equal to the number of people who haven't (52% vs 45%).\n- There is no substantial evidence of relationships between housing's categories and YES-answers.","9a29f84e":"### Output variable (target)","f10b5df2":"# Attribute Information","396bc565":"Now, let's check a variance by year:","8ff1462d":"<samp>contact: contact communication type (categorical: 'cellular', 'telephone')<\/samp>","555c7ea3":">Euribor - The Euro Interbank Offered Rate is a daily reference rate, published by the European Money Markets Institute, based on the averaged interest rates at which Eurozone banks offer to lend unsecured funds to other banks in the euro wholesale money market. Prior to 2015, the rate was published by the European Banking Federation.","48968379":"Now, let's see how YES-proportion correlates with `emp.var.rate` by month and year and throughout the entire dataset:","193a12c5":"#### Feature: cons.price.idx (numeric)","2ef67c61":"There are no missing values.\n\nAnd a short overview for numeric columns:","c16e7e53":"From the second plot we've got that students and retired are more likely to agree to subscribe a bank term deposit, but considering the last plot, we can see that this pattern works only for 2009. It also works much less for 2008 and absolutely disappear in 2010. So we can't be confident about such finding.","6b681a5b":"16. `emp.var.rate`: employment variation rate - quarterly indicator (numeric)\n17. `cons.price.idx`: consumer price index - monthly indicator (numeric)\n18. `cons.conf.idx`: consumer confidence index - monthly indicator (numeric)\n19. `euribor3m`: euribor 3 month rate - daily indicator (numeric)\n20. `nr.employed`: number of employees - quarterly indicator (numeric)","79550602":"- 2008: the rate was pretty stable and even a bit growing, except for the year ending (it dropped).\n- 2009: stable for the most time, then decreased, and at the very end of 2009 it started to grow.\n- 2010: the rate was growing up.","da0445d5":"Here is my functions:","5dabc47c":"If we look closely to the `default` feature, we will notice that Oct and Dec don't have `unknown` and `yes` categories at all:","07d188d8":"So, the `year` is correlated the most with the features related to social and economic context, which seems quite logical.","b92deead":"First, let's see how these features are connected with each other:","d2f550f7":"Now, let's see how YES-proportion correlates with `euribor3m` by month and year and throughout the entire dataset:","96316af1":"`duration`\n\n**Conclusion:**\n\n- If we consider only first 3-4 groups (with enough number of observations), it's pretty obvious that the longer the call is the higher chances are to get a positive decision (and the common sense says the same).\n- And we also shouldn't forget about the important note, that says: \"this attribute highly affects the output target (e.g., `if duration=0 then y='no'`)\".","01a1bd44":"And plotting:","3ea5c1e6":"Analysing a distribution and a YES-proportion:","9936f0e8":"`job`\n\n**Conclusions:**\n\n- Most of the people in the dataset are from working class (admin + blue-collar + technician + services $\\approx$ 73%).\n- There is no substantial evidence of relationships between job's categories and YES-answers.","efa7f97e":"`emp.var.rate`\n\n**Conclusion:**\n\n- There is a light negative correlation (-0.3) between `emp.var.rate` and YES-proportion.\n- There is a huge difference between medians of `emp.var.rate` for YES\/NO-answers.\n- 95% of answers were obtained during a quite hard time for economy and people.\n- Values:\n    - Number of unique values: 10\n    - Vary from -3.4 to 1.4","882ec6e7":"We will compare median values of all numeric columns for a year of 2008:","ffcd61cc":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#UCI-Bank-Marketing-Dataset.-Case-study.-Part-1-(EDA)\" data-toc-modified-id=\"UCI-Bank-Marketing-Dataset.-Case-study.-Part-1-(EDA)-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>UCI Bank Marketing Dataset. Case study. Part 1 (EDA)<\/a><\/span><\/li><li><span><a href=\"#Attribute-Information\" data-toc-modified-id=\"Attribute-Information-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Attribute Information<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Input-variables\" data-toc-modified-id=\"Input-variables-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Input variables<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Bank-client-data\" data-toc-modified-id=\"Bank-client-data-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;<\/span>Bank client data<\/a><\/span><\/li><li><span><a href=\"#Related-with-the-last-contact-of-the-current-campaign\" data-toc-modified-id=\"Related-with-the-last-contact-of-the-current-campaign-2.1.2\"><span class=\"toc-item-num\">2.1.2&nbsp;&nbsp;<\/span>Related with the last contact of the current campaign<\/a><\/span><\/li><li><span><a href=\"#Other-attributes\" data-toc-modified-id=\"Other-attributes-2.1.3\"><span class=\"toc-item-num\">2.1.3&nbsp;&nbsp;<\/span>Other attributes<\/a><\/span><\/li><li><span><a href=\"#Social-and-economic-context-attributes\" data-toc-modified-id=\"Social-and-economic-context-attributes-2.1.4\"><span class=\"toc-item-num\">2.1.4&nbsp;&nbsp;<\/span>Social and economic context attributes<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Output-variable-(desired-target)\" data-toc-modified-id=\"Output-variable-(desired-target)-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Output variable (desired target)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Basic-info-of-the-dataset\" data-toc-modified-id=\"Basic-info-of-the-dataset-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Basic info of the dataset<\/a><\/span><\/li><li><span><a href=\"#Exploratory-Data-Analysis-(EDA)\" data-toc-modified-id=\"Exploratory-Data-Analysis-(EDA)-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Exploratory Data Analysis (EDA)<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Distribution-of-the-Target\" data-toc-modified-id=\"Distribution-of-the-Target-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Distribution of the Target<\/a><\/span><\/li><li><span><a href=\"#Correlation-matrix\" data-toc-modified-id=\"Correlation-matrix-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Correlation matrix<\/a><\/span><\/li><li><span><a href=\"#Feature-Analysis\" data-toc-modified-id=\"Feature-Analysis-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Feature Analysis<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Feature:-month-(categorical)\" data-toc-modified-id=\"Feature:-month-(categorical)-4.3.1\"><span class=\"toc-item-num\">4.3.1&nbsp;&nbsp;<\/span>Feature: month (categorical)<\/a><\/span><\/li><li><span><a href=\"#Bank-client-data\" data-toc-modified-id=\"Bank-client-data-4.3.2\"><span class=\"toc-item-num\">4.3.2&nbsp;&nbsp;<\/span>Bank client data<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Feature:-age-(numeric)\" data-toc-modified-id=\"Feature:-age-(numeric)-4.3.2.1\"><span class=\"toc-item-num\">4.3.2.1&nbsp;&nbsp;<\/span>Feature: age (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-job-(categorical)\" data-toc-modified-id=\"Feature:-job-(categorical)-4.3.2.2\"><span class=\"toc-item-num\">4.3.2.2&nbsp;&nbsp;<\/span>Feature: job (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-marital-(categorical)\" data-toc-modified-id=\"Feature:-marital-(categorical)-4.3.2.3\"><span class=\"toc-item-num\">4.3.2.3&nbsp;&nbsp;<\/span>Feature: marital (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-education-(categorical)\" data-toc-modified-id=\"Feature:-education-(categorical)-4.3.2.4\"><span class=\"toc-item-num\">4.3.2.4&nbsp;&nbsp;<\/span>Feature: education (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-default-(categorical)\" data-toc-modified-id=\"Feature:-default-(categorical)-4.3.2.5\"><span class=\"toc-item-num\">4.3.2.5&nbsp;&nbsp;<\/span>Feature: default (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-housing-(categorical)\" data-toc-modified-id=\"Feature:-housing-(categorical)-4.3.2.6\"><span class=\"toc-item-num\">4.3.2.6&nbsp;&nbsp;<\/span>Feature: housing (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-loan-(categorical)\" data-toc-modified-id=\"Feature:-loan-(categorical)-4.3.2.7\"><span class=\"toc-item-num\">4.3.2.7&nbsp;&nbsp;<\/span>Feature: loan (categorical)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Related-with-the-last-contact-of-the-current-campaign\" data-toc-modified-id=\"Related-with-the-last-contact-of-the-current-campaign-4.3.3\"><span class=\"toc-item-num\">4.3.3&nbsp;&nbsp;<\/span>Related with the last contact of the current campaign<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Feature:-contact-(categorical)\" data-toc-modified-id=\"Feature:-contact-(categorical)-4.3.3.1\"><span class=\"toc-item-num\">4.3.3.1&nbsp;&nbsp;<\/span>Feature: contact (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-month-(categorical)\" data-toc-modified-id=\"Feature:-month-(categorical)-4.3.3.2\"><span class=\"toc-item-num\">4.3.3.2&nbsp;&nbsp;<\/span>Feature: month (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-day_of_week-(categorical)\" data-toc-modified-id=\"Feature:-day_of_week-(categorical)-4.3.3.3\"><span class=\"toc-item-num\">4.3.3.3&nbsp;&nbsp;<\/span>Feature: day_of_week (categorical)<\/a><\/span><\/li><li><span><a href=\"#Feature:-duration-(numeric)\" data-toc-modified-id=\"Feature:-duration-(numeric)-4.3.3.4\"><span class=\"toc-item-num\">4.3.3.4&nbsp;&nbsp;<\/span>Feature: duration (numeric)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Other-attributes\" data-toc-modified-id=\"Other-attributes-4.3.4\"><span class=\"toc-item-num\">4.3.4&nbsp;&nbsp;<\/span>Other attributes<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Feature:-campaign-(numeric)\" data-toc-modified-id=\"Feature:-campaign-(numeric)-4.3.4.1\"><span class=\"toc-item-num\">4.3.4.1&nbsp;&nbsp;<\/span>Feature: campaign (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-pdays-(numeric)\" data-toc-modified-id=\"Feature:-pdays-(numeric)-4.3.4.2\"><span class=\"toc-item-num\">4.3.4.2&nbsp;&nbsp;<\/span>Feature: pdays (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-previous-(numeric)\" data-toc-modified-id=\"Feature:-previous-(numeric)-4.3.4.3\"><span class=\"toc-item-num\">4.3.4.3&nbsp;&nbsp;<\/span>Feature: previous (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-poutcome-(categorical)\" data-toc-modified-id=\"Feature:-poutcome-(categorical)-4.3.4.4\"><span class=\"toc-item-num\">4.3.4.4&nbsp;&nbsp;<\/span>Feature: poutcome (categorical)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Social-and-economic-context-attributes\" data-toc-modified-id=\"Social-and-economic-context-attributes-4.3.5\"><span class=\"toc-item-num\">4.3.5&nbsp;&nbsp;<\/span>Social and economic context attributes<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Feature:-emp.var.rate-(numeric)\" data-toc-modified-id=\"Feature:-emp.var.rate-(numeric)-4.3.5.1\"><span class=\"toc-item-num\">4.3.5.1&nbsp;&nbsp;<\/span>Feature: emp.var.rate (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-cons.price.idx-(numeric)\" data-toc-modified-id=\"Feature:-cons.price.idx-(numeric)-4.3.5.2\"><span class=\"toc-item-num\">4.3.5.2&nbsp;&nbsp;<\/span>Feature: cons.price.idx (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-cons.conf.idx-(numeric)\" data-toc-modified-id=\"Feature:-cons.conf.idx-(numeric)-4.3.5.3\"><span class=\"toc-item-num\">4.3.5.3&nbsp;&nbsp;<\/span>Feature: cons.conf.idx (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-euribor3m-(numeric)\" data-toc-modified-id=\"Feature:-euribor3m-(numeric)-4.3.5.4\"><span class=\"toc-item-num\">4.3.5.4&nbsp;&nbsp;<\/span>Feature: euribor3m (numeric)<\/a><\/span><\/li><li><span><a href=\"#Feature:-nr.employed-(numeric)\" data-toc-modified-id=\"Feature:-nr.employed-(numeric)-4.3.5.5\"><span class=\"toc-item-num\">4.3.5.5&nbsp;&nbsp;<\/span>Feature: nr.employed (numeric)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Output-variable-(target)\" data-toc-modified-id=\"Output-variable-(target)-4.3.6\"><span class=\"toc-item-num\">4.3.6&nbsp;&nbsp;<\/span>Output variable (target)<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Summary\" data-toc-modified-id=\"Summary-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Summary<\/a><\/span><\/li><\/ul><\/div>","3c40afa6":"Let's check a distribution for YES\/NO-answers:","f63f2762":"<samp>campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)<\/samp>","20d8ab2d":"Creating a strict order of months will make information easier to understand:","c4ec4cd7":"There is no significant correlation between `cons.conf.idx` and `y`.","b874f560":"Let's take a closer look at the first bin (from 1 to 4 contacts) and try to see if YES-proportion is affected by the number of contacts during this campaign:","f7fd0bcb":"## Distribution of the Target","5b439d62":"#### Feature: loan (categorical)","0e34eece":"#### Feature: contact (categorical)","27c180db":"Okay. Now, let me draw your attention to another interesting months, but of 2009:","90798480":"Strong correlation:\n- `emp.var.rate` and `euribor3m` (0.97)\n- `nr.employed` and `euribor3m` (0.95)\n- `emp.var.rate` and `nr.employed` (0.91)\n- `emp.var.rate` and `cons.price.idx` (0.78)\n\nPretty high correlation:\n- `cons.price.idx` and `euribor3m` (0.69)\n- `cons.price.idx` and `nr.employed` (0.52)","9ef1c3d8":"<samp>y: has the client subscribed a term deposit? (binary: 'yes','no')<\/samp>","bbafa8af":"#### Feature: job (categorical)","40fe6748":"#### Feature: euribor3m (numeric)","7c6f11b1":"6 observations of 2009 with a YES-proportion of 0.50 seem like a kind of anomaly here.","80643ded":"Here we also have a small number of observations:","ea517baa":"**Abstract:** \n\nThe data is related with direct marketing campaigns (phone calls) of a Portuguese banking institution. The classification goal is to predict if the client will subscribe a term deposit (variable y).\n\t\n\n**Source:**\n\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/bank+marketing\n\n[Moro et al., 2014] S. Moro, P. Cortez and P. Rita. A Data-Driven Approach to Predict the Success of Bank Telemarketing. Decision Support Systems, Elsevier, 62:22-31, June 2014\n\n**Data Set Information:**\n\nThe data is related with direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be ('yes') or not ('no') subscribed.\n\n**There are four datasets:**\n1) `bank-additional-full.csv` with all examples (41188) and 20 inputs, ordered by date **(from May 2008 to November 2010)**, very close to the data analyzed in [Moro et al., 2014]\n\n2) `bank-additional.csv` with 10% of the examples (4119), randomly selected from 1), and 20 inputs.\n\n3) `bank-full.csv` with all examples and 17 inputs, ordered by date (older version of this dataset with less inputs).\n\n4) `bank.csv` with 10% of the examples and 17 inputs, randomly selected from 3 (older version of this dataset with less inputs).\n\n>**For this case study I used the dataset 1 - `bank-additional-full.csv`**\n\nThe smallest datasets are provided to test more computationally demanding machine learning algorithms (e.g., SVM).\n\n**The classification goal is to predict if the client will subscribe (yes\/no) a term deposit (variable y).**","e3e7734e":"#### Feature: pdays (numeric)","e1c11dc9":"As we work with a banking data and people were asked to make a decision about their finance, again, I suppose, all of you will agree that their answers are affected, to varying degrees, by the current economic situation. That is the reason I have added a new feature named `year`. And I think it really helped me to get a more deep view on what's going on.","769c93b9":"In my EDA I've considered only \"feature vs. time period + target\" relationships, because I was preparing for the next steps of the ML-classification project: feature selection, data preprocessing, searching hyperparameters, model fitting, and, finally, model evaluation.","40737b9d":"And `telephone` contacts:","776ad1cc":"Let's look at the cumulative YES-proportion throughout the entire dataset:","e0129a1f":"### Other attributes","d9307f9b":"Here we have:","edfa1b0e":"#### Feature: month (categorical)","45fa62e5":"<samp>previous: number of contacts performed before this campaign and for this client (numeric)<\/samp>","7a4f8c45":"1. `age` (numeric)\n2. `job` : type of job (categorical)\n3. `marital` : marital status (categorical)\n4. `education` (categorical)\n5. `default`: has credit in default? (categorical)\n6. `housing`: has housing loan? (categorical)\n7. `loan`: has personal loan? (categorical)","d727e42e":"- 2008: during that year a `euribor3m` was stable and dropped at the end.\n- 2009: the `euribor3m` continued to gradually decrease, but much slowly than in the last months of 2008, and there was another drop at the end of the year.\n- 2010: the `euribor3m` was growing.","92bdc807":"# Basic info of the dataset","d10baf7b":"`day_of_week`\n\n**Conclusion:**\n\n- Monday looks like a bit worse day for getting YES, but overall there is no substantial evidence of relationships between day_of_week's categories and YES-answers.","4772969d":"- 2008: a consumer confidence varied a lot and was decreasing at the end of the year.\n- 2009: an index was increasing and became pretty high before the drop at the end.\n- 2010: a consumer confidence went down fast and that fully correlate with a consumer price index for that time.","52b15164":"Obviously, there is a huge difference between medians, and that's why this feature will be really useful for classification.","5a96d526":"#### Feature: age (numeric)"}}