{"cell_type":{"c32960ab":"code","f5f95ca3":"code","7d6b803c":"code","024907e7":"code","abceda2b":"code","bb92bbc1":"code","50c6e984":"code","5a69dc41":"code","104ec20f":"code","49f79b1d":"code","dc6f109a":"code","dae97f34":"code","5870ed3b":"code","5e9c6165":"code","fd0bb900":"code","cf168be1":"code","55d113b3":"code","30ff3127":"code","219f6cf7":"code","d6ccfefb":"code","51ad2849":"code","dcc08e2e":"code","36e648f5":"code","071148a1":"code","4534246c":"code","2a6aaaed":"code","3bccbfbe":"code","8153442c":"code","a091818d":"code","6db84fa7":"code","23750ab0":"code","84da9e35":"code","d8ac822c":"code","c3a43b78":"code","e53e07ec":"code","7ef25039":"markdown","1d4ad8fa":"markdown","f05629d0":"markdown","bb54b314":"markdown"},"source":{"c32960ab":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","f5f95ca3":"train_data = pd.read_excel(\"..\/input\/flightpriceprediction\/Data_Train.xlsx\")\ntest_data = pd.read_excel(\"..\/input\/flightpriceprediction\/Test_set.xlsx\")","7d6b803c":"train_data.head()","024907e7":"data = train_data.append(test_data,sort=False)\ndata.tail()","abceda2b":"data.dtypes","bb92bbc1":"data['Date'] = data['Date_of_Journey'].str.split('\/').str[0]\ndata['Month'] = data['Date_of_Journey'].str.split('\/').str[1]\ndata['Year'] = data['Date_of_Journey'].str.split('\/').str[2]\n\ndata.head()","50c6e984":"data.dtypes","5a69dc41":"data['Date'] = data['Date'].astype(int)\ndata['Month'] = data['Month'].astype(int)\ndata['Year'] = data['Year'].astype(int)\n\ndata.dtypes","104ec20f":"data = data.drop(['Date_of_Journey'],axis=1)\ndata.head()","49f79b1d":"data['Arrival_Time'] = data['Arrival_Time'].str.split(' ').str[0]\ndata.head()","dc6f109a":"data[data['Total_Stops'].isnull()]","dae97f34":"data['Total_Stops'] = data['Total_Stops'].fillna('1 stop')\ndata['Total_Stops'] = data['Total_Stops'].replace('non-stop', '0 stop')\n\ndata.head()","5870ed3b":"data['Stop'] = data['Total_Stops'].str.split(' ').str[0]\ndata.head()","5e9c6165":"data.dtypes","fd0bb900":"data['Stop'] = data['Stop'].astype(int)\ndata = data.drop(['Total_Stops'],axis=1)\n\ndata.head()","cf168be1":"data['Arrival_Hour'] = data['Arrival_Time'].str.split(':').str[0]\ndata['Arrival_Minute'] = data['Arrival_Time'].str.split(':').str[1]\n\ndata['Arrival_Hour'] = data['Arrival_Hour'].astype(int)\ndata['Arrival_Minute'] = data['Arrival_Minute'].astype(int)\n\ndata = data.drop(['Arrival_Time'],axis=1)\n\ndata.head()","55d113b3":"data['Departure_Hour'] = data['Dep_Time'].str.split(':').str[0]\ndata['Departure_Minute'] = data['Dep_Time'].str.split(':').str[0]\n\ndata['Departure_Hour'] = data['Departure_Hour'].astype(int)\ndata['Departure_Minute'] = data['Departure_Minute'].astype(int)\n\ndata = data.drop(['Dep_Time'],axis=1)\n\ndata.head()","30ff3127":"data['Route_1'] = data['Route'].str.split('\u2192 ').str[0]\ndata['Route_2'] = data['Route'].str.split('\u2192 ').str[1]\ndata['Route_3'] = data['Route'].str.split('\u2192 ').str[2]\ndata['Route_4'] = data['Route'].str.split('\u2192 ').str[3]\ndata['Route_5'] = data['Route'].str.split('\u2192 ').str[4]\n\ndata.head()","219f6cf7":"data['Price'].fillna((data['Price'].mean()),inplace=True)","d6ccfefb":"data['Route_1'].fillna(\"None\",inplace=True)\ndata['Route_2'].fillna(\"None\",inplace=True)\ndata['Route_3'].fillna(\"None\",inplace=True)\ndata['Route_4'].fillna(\"None\",inplace=True)\ndata['Route_5'].fillna(\"None\",inplace=True)\n\ndata.head()","51ad2849":"data = data.drop(['Route'],axis=1)\ndata = data.drop(['Duration'],axis=1)\n\ndata.head()","dcc08e2e":"data.isnull().sum()","36e648f5":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\n\ndata['Airline'] = encoder.fit_transform(data['Airline'])\ndata['Source'] = encoder.fit_transform(data['Source'])\ndata['Destination'] = encoder.fit_transform(data['Destination'])\ndata['Additional_Info'] = encoder.fit_transform(data['Additional_Info'])\ndata['Route_1'] = encoder.fit_transform(data['Route_1'])\ndata['Route_2'] = encoder.fit_transform(data['Route_2'])\ndata['Route_3'] = encoder.fit_transform(data['Route_3'])\ndata['Route_4'] = encoder.fit_transform(data['Route_4'])\ndata['Route_5'] = encoder.fit_transform(data['Route_5'])\n\ndata.head()","071148a1":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\n\ntrain = data[0:10683]\ntest = data[10683:]","4534246c":"X = train.drop(['Price'],axis=1)\ny = train.Price","2a6aaaed":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=0)\nmodel = SelectFromModel(Lasso(alpha=0.005, random_state=0))\nmodel.fit(X_train,y_train)","3bccbfbe":"model.get_support()","8153442c":"selected_features = X_train.columns[(model.get_support())]\nselected_features","a091818d":"X_train = X_train.drop(['Year'],axis=1)\nX_test = X_test.drop(['Year'],axis=1)","6db84fa7":"from sklearn.model_selection import RandomizedSearchCV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start=100, stop=1200, num=12)]\n\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num=6)]\n\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n\n# Minimum number of samples  required at each leaf\nmin_samples_leaf = [1, 2, 5, 10]","23750ab0":"# Create random grid\nrandom_grid = {'n_estimators': n_estimators,\n              'max_features': max_features,\n              'max_depth': max_depth,\n              'min_samples_split': min_samples_split,\n              'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","84da9e35":"# Use the random grid to search for best hyperparamters\n# First create the base model to tune\nfrom sklearn.ensemble import RandomForestRegressor\n\nrf_regressor = RandomForestRegressor()\n\n# random search of parameters, using 3 fold cross validation\n# search across 50 different combinations\nrf_random = RandomizedSearchCV(estimator=rf_regressor, param_distributions=random_grid, scoring='neg_mean_squared_error', n_iter=50,\n                              cv=5, verbose=5, random_state=42, n_jobs=1)\nrf_random.fit(X_train, y_train)","d8ac822c":"y_pred = rf_random.predict(X_test)","c3a43b78":"import seaborn as sns\n\nsns.distplot(y_test-y_pred)","e53e07ec":"plt.scatter(y_test,y_pred)","7ef25039":"#### Feature Engineering","1d4ad8fa":"#### RandomForestRegressor","f05629d0":"#### Feature Selection","bb54b314":"https:\/\/www.machinehack.com\/course\/predict-the-flight-ticket-price-hackathon\/\n\n## Predict The Flight Ticket Price Hackathon\n\nFlight ticket prices can be something hard to guess, today we might see a price, check out the price of the same flight tomorrow, it will be a different story. We might have often heard travellers saying that flight ticket prices are so unpredictable. Huh! Here we take on the challenge! As data scientists, we are gonna prove that given the right data anything can be predicted. Here you will be provided with prices of flight tickets for various airlines between the months of March and June of 2019 and between various cities.\n\n##### Size of training set: 10683 records\n\n##### Size of test set: 2671 records\n\n#### FEATURES: \n- Airline: The name of the airline.\n\n- Date_of_Journey: The date of the journey\n\n- Source: The source from which the service begins.\n\n- Destination: The destination where the service ends.\n\n- Route: The route taken by the flight to reach the destination.\n\n- Dep_Time: The time when the journey starts from the source.\n\n- Arrival_Time: Time of arrival at the destination.\n\n- Duration: Total duration of the flight.\n\n- Total_Stops: Total stops between the source and destination.\n\n- Additional_Info: Additional information about the flight\n\n- Price: The price of the ticket"}}