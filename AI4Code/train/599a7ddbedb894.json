{"cell_type":{"59092bbc":"code","9824c557":"code","a7062f1b":"code","c850f689":"code","27ec155a":"code","3b421ebe":"code","c469d365":"code","535c9010":"code","de3afec7":"code","8f2ae5e1":"code","44967223":"code","b872713c":"code","838f7952":"code","b8a48839":"code","74cf5fbf":"code","bd1b0db6":"code","7ed3a3b5":"code","c2386dc8":"code","185ab50a":"code","e1774a71":"markdown","01b43551":"markdown","8ff77c73":"markdown","5a29bcbb":"markdown","accc3aa9":"markdown","4de1890f":"markdown","e5378730":"markdown","f6751748":"markdown","5648608e":"markdown","bb8fa486":"markdown","2dccc81c":"markdown","92a07790":"markdown","8e79af8e":"markdown","f5401182":"markdown","44d4b434":"markdown","c6844e16":"markdown","73e35b8f":"markdown"},"source":{"59092bbc":"import os\n\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","9824c557":"os.listdir('..\/input\/cassava-leaf-disease-classification')","a7062f1b":"train = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ntest = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\nlabel_map = pd.read_json('..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json', \n                         orient='index')\ndisplay(train.head())\ndisplay(test.head())\ndisplay(label_map)","c850f689":"sns.distplot(train['label'], kde=False)","27ec155a":"# ====================================================\n# Directory settings\n# ====================================================\nimport os\n\nOUTPUT_DIR = '.\/'\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)\n\nTRAIN_PATH = '..\/input\/cassava-leaf-disease-classification\/train_images'\nTEST_PATH = '..\/input\/cassava-leaf-disease-classification\/test_images'","3b421ebe":"# ====================================================\n# CFG\n# ====================================================\nclass CFG:\n    debug=False\n    apex=False\n    print_freq=100\n    num_workers=4\n    model_name='resnext50_32x4d'\n    size=256\n    scheduler='CosineAnnealingWarmRestarts' # ['ReduceLROnPlateau', 'CosineAnnealingLR', 'CosineAnnealingWarmRestarts']\n    epochs=10\n    #factor=0.2 # ReduceLROnPlateau\n    #patience=4 # ReduceLROnPlateau\n    #eps=1e-6 # ReduceLROnPlateau\n    #T_max=10 # CosineAnnealingLR\n    T_0=10 # CosineAnnealingWarmRestarts\n    lr=1e-4\n    min_lr=1e-6\n    batch_size=32\n    weight_decay=1e-6\n    gradient_accumulation_steps=1\n    max_grad_norm=1000\n    seed=42\n    target_size=5\n    target_col='label'\n    n_fold=5\n    trn_fold=[0, 1, 2, 3, 4]\n    train=True\n    inference=True\n    \nif CFG.debug:\n    CFG.epochs = 1\n    train = train.sample(n=1000, random_state=CFG.seed).reset_index(drop=True)","c469d365":"# ====================================================\n# Library\n# ====================================================\nimport sys\nsys.path.append('..\/input\/pytorch-image-models\/pytorch-image-models-master')\nsys.path.append('..\/input\/adamp-optimizer\/AdamP-master')\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\nfrom contextlib import contextmanager\nfrom collections import defaultdict, Counter\n\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom tqdm.auto import tqdm\nfrom functools import partial\n\nimport cv2\nfrom PIL import Image\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.optim import Adam, SGD\nimport torchvision.models as models\nfrom torch.nn.parameter import Parameter\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, CosineAnnealingLR, ReduceLROnPlateau\n#!pip install adamp\nimport adamp\n\nfrom albumentations import (\n    Compose, OneOf, Normalize, Resize, RandomResizedCrop, RandomCrop, HorizontalFlip, VerticalFlip, \n    RandomBrightness, RandomContrast, RandomBrightnessContrast, Rotate, ShiftScaleRotate, Cutout, \n    IAAAdditiveGaussianNoise, Transpose\n    )\nfrom albumentations.pytorch import ToTensorV2\nfrom albumentations import ImageOnlyTransform\n\nimport timm\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\nif CFG.apex:\n    from apex import amp\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","535c9010":"# ====================================================\n# Utils\n# ====================================================\ndef get_score(y_true, y_pred):\n    return accuracy_score(y_true, y_pred)\n\n\n@contextmanager\ndef timer(name):\n    t0 = time.time()\n    LOGGER.info(f'[{name}] start')\n    yield\n    LOGGER.info(f'[{name}] done in {time.time() - t0:.0f} s.')\n\n\ndef init_logger(log_file=OUTPUT_DIR+'train.log'):\n    from logging import getLogger, INFO, FileHandler,  Formatter,  StreamHandler\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=log_file)\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nLOGGER = init_logger()\n\n\ndef seed_torch(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_torch(seed=CFG.seed)","de3afec7":"folds = train.copy()\nFold = StratifiedKFold(n_splits=CFG.n_fold, shuffle=True, random_state=CFG.seed)\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds[CFG.target_col])):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)\nprint(folds.groupby(['fold', CFG.target_col]).size())","8f2ae5e1":"# ====================================================\n# Dataset\n# ====================================================\nclass TrainDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['image_id'].values\n        self.labels = df['label'].values\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_name = self.file_names[idx]\n        file_path = f'{TRAIN_PATH}\/{file_name}'\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        label = torch.tensor(self.labels[idx]).long()\n        return image, label\n    \n\nclass TestDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['image_id'].values\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_name = self.file_names[idx]\n        file_path = f'{TEST_PATH}\/{file_name}'\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        return image","44967223":"train_dataset = TrainDataset(train, transform=None)\n\nfor i in range(1):\n    image, label = train_dataset[i]\n    plt.imshow(image)\n    plt.title(f'label: {label}')\n    plt.show() ","b872713c":"# ====================================================\n# Transforms\n# ====================================================\ndef get_transforms(*, data):\n    \n    if data == 'train':\n        return Compose([\n            #Resize(CFG.size, CFG.size),\n            RandomResizedCrop(CFG.size, CFG.size),\n            Transpose(p=0.5),\n            HorizontalFlip(p=0.5),\n            VerticalFlip(p=0.5),\n            ShiftScaleRotate(p=0.5),\n            Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])\n\n    elif data == 'valid':\n        return Compose([\n            Resize(CFG.size, CFG.size),\n            Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])","838f7952":"train_dataset = TrainDataset(train, transform=get_transforms(data='train'))\n\nfor i in range(1):\n    image, label = train_dataset[i]\n    plt.imshow(image[0])\n    plt.title(f'label: {label}')\n    plt.show() ","b8a48839":"# ====================================================\n# MODEL\n# ====================================================\nclass CustomResNext(nn.Module):\n    def __init__(self, model_name='resnext50_32x4d', pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        n_features = self.model.fc.in_features\n        self.model.fc = nn.Linear(n_features, CFG.target_size)\n\n    def forward(self, x):\n        x = self.model(x)\n        return x","74cf5fbf":"model = CustomResNext(model_name=CFG.model_name, pretrained=False)\ntrain_dataset = TrainDataset(train, transform=get_transforms(data='train'))\ntrain_loader = DataLoader(train_dataset, batch_size=4, shuffle=True,\n                          num_workers=4, pin_memory=True, drop_last=True)\n\nfor image, label in train_loader:\n    output = model(image)\n    print(output)\n    break","bd1b0db6":"# ====================================================\n# Helper functions\n# ====================================================\nclass AverageMeter(object):\n    \"\"\"Computes and stores the average and current value\"\"\"\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum \/ self.count\n\n\ndef asMinutes(s):\n    m = math.floor(s \/ 60)\n    s -= m * 60\n    return '%dm %ds' % (m, s)\n\n\ndef timeSince(since, percent):\n    now = time.time()\n    s = now - since\n    es = s \/ (percent)\n    rs = es - s\n    return '%s (remain %s)' % (asMinutes(s), asMinutes(rs))\n\n\ndef train_fn(train_loader, model, criterion, optimizer, epoch, scheduler, device):\n    batch_time = AverageMeter()\n    data_time = AverageMeter()\n    losses = AverageMeter()\n    scores = AverageMeter()\n    # switch to train mode\n    model.train()\n    start = end = time.time()\n    global_step = 0\n    for step, (images, labels) in enumerate(train_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n        images = images.to(device)\n        labels = labels.to(device)\n        batch_size = labels.size(0)\n        y_preds = model(images)\n        loss = criterion(y_preds, labels)\n        # record loss\n        losses.update(loss.item(), batch_size)\n        if CFG.gradient_accumulation_steps > 1:\n            loss = loss \/ CFG.gradient_accumulation_steps\n        if CFG.apex:\n            with amp.scale_loss(loss, optimizer) as scaled_loss:\n                scaled_loss.backward()\n        else:\n            loss.backward()\n        grad_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), CFG.max_grad_norm)\n        if (step + 1) % CFG.gradient_accumulation_steps == 0:\n            optimizer.step()\n            optimizer.zero_grad()\n            global_step += 1\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n        if step % CFG.print_freq == 0 or step == (len(train_loader)-1):\n            print('Epoch: [{0}][{1}\/{2}] '\n                  'Data {data_time.val:.3f} ({data_time.avg:.3f}) '\n                  'Elapsed {remain:s} '\n                  'Loss: {loss.val:.4f}({loss.avg:.4f}) '\n                  'Grad: {grad_norm:.4f}  '\n                  #'LR: {lr:.6f}  '\n                  .format(\n                   epoch+1, step, len(train_loader), batch_time=batch_time,\n                   data_time=data_time, loss=losses,\n                   remain=timeSince(start, float(step+1)\/len(train_loader)),\n                   grad_norm=grad_norm,\n                   #lr=scheduler.get_lr()[0],\n                   ))\n    return losses.avg\n\n\ndef valid_fn(valid_loader, model, criterion, device):\n    batch_time = AverageMeter()\n    data_time = AverageMeter()\n    losses = AverageMeter()\n    scores = AverageMeter()\n    # switch to evaluation mode\n    model.eval()\n    preds = []\n    start = end = time.time()\n    for step, (images, labels) in enumerate(valid_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n        images = images.to(device)\n        labels = labels.to(device)\n        batch_size = labels.size(0)\n        # compute loss\n        with torch.no_grad():\n            y_preds = model(images)\n        loss = criterion(y_preds, labels)\n        losses.update(loss.item(), batch_size)\n        # record accuracy\n        preds.append(y_preds.softmax(1).to('cpu').numpy())\n        if CFG.gradient_accumulation_steps > 1:\n            loss = loss \/ CFG.gradient_accumulation_steps\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n        if step % CFG.print_freq == 0 or step == (len(valid_loader)-1):\n            print('EVAL: [{0}\/{1}] '\n                  'Data {data_time.val:.3f} ({data_time.avg:.3f}) '\n                  'Elapsed {remain:s} '\n                  'Loss: {loss.val:.4f}({loss.avg:.4f}) '\n                  .format(\n                   step, len(valid_loader), batch_time=batch_time,\n                   data_time=data_time, loss=losses,\n                   remain=timeSince(start, float(step+1)\/len(valid_loader)),\n                   ))\n    predictions = np.concatenate(preds)\n    return losses.avg, predictions\n\n\ndef inference(model, states, test_loader, device):\n    model.to(device)\n    tk0 = tqdm(enumerate(test_loader), total=len(test_loader))\n    probs = []\n    for i, (images) in tk0:\n        images = images.to(device)\n        avg_preds = []\n        for state in states:\n            model.load_state_dict(state['model'])\n            model.eval()\n            with torch.no_grad():\n                y_preds = model(images)\n            avg_preds.append(y_preds.softmax(1).to('cpu').numpy())\n        avg_preds = np.mean(avg_preds, axis=0)\n        probs.append(avg_preds)\n    probs = np.concatenate(probs)\n    return probs","7ed3a3b5":"# ====================================================\n# Train loop\n# ====================================================\ndef train_loop(folds, fold):\n\n    LOGGER.info(f\"========== fold: {fold} training ==========\")\n\n    # ====================================================\n    # loader\n    # ====================================================\n    trn_idx = folds[folds['fold'] != fold].index\n    val_idx = folds[folds['fold'] == fold].index\n\n    train_folds = folds.loc[trn_idx].reset_index(drop=True)\n    valid_folds = folds.loc[val_idx].reset_index(drop=True)\n\n    train_dataset = TrainDataset(train_folds, \n                                 transform=get_transforms(data='train'))\n    valid_dataset = TrainDataset(valid_folds, \n                                 transform=get_transforms(data='valid'))\n\n    train_loader = DataLoader(train_dataset, \n                              batch_size=CFG.batch_size, \n                              shuffle=True, \n                              num_workers=CFG.num_workers, pin_memory=True, drop_last=True)\n    valid_loader = DataLoader(valid_dataset, \n                              batch_size=CFG.batch_size, \n                              shuffle=False, \n                              num_workers=CFG.num_workers, pin_memory=True, drop_last=False)\n    \n    # ====================================================\n    # scheduler \n    # ====================================================\n    def get_scheduler(optimizer):\n        if CFG.scheduler=='ReduceLROnPlateau':\n            scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=CFG.factor, patience=CFG.patience, verbose=True, eps=CFG.eps)\n        elif CFG.scheduler=='CosineAnnealingLR':\n            scheduler = CosineAnnealingLR(optimizer, T_max=CFG.T_max, eta_min=CFG.min_lr, last_epoch=-1)\n        elif CFG.scheduler=='CosineAnnealingWarmRestarts':\n            scheduler = CosineAnnealingWarmRestarts(optimizer, T_0=CFG.T_0, T_mult=1, eta_min=CFG.min_lr, last_epoch=-1)\n        return scheduler\n\n    # ====================================================\n    # model & optimizer\n    # ====================================================\n    model = CustomResNext(CFG.model_name, pretrained=True)\n    model.to(device)\n    !pip install adamp\n    #optimizer = Adam(model.parameters(), lr=CFG.lr, weight_decay=CFG.weight_decay, amsgrad=False)\n    optimizer = AdamP(model.parameters(), lr=CFG.lr, weight_decay=CFG.weight_decay)\n    scheduler = get_scheduler(optimizer)\n\n    # ====================================================\n    # apex\n    # ====================================================\n    if CFG.apex:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0)\n\n    # ====================================================\n    # loop\n    # ====================================================\n    criterion = nn.CrossEntropyLoss()\n\n    best_score = 0.\n    best_loss = np.inf\n    \n    for epoch in range(CFG.epochs):\n        \n        start_time = time.time()\n        \n        # train\n        avg_loss = train_fn(train_loader, model, criterion, optimizer, epoch, scheduler, device)\n\n        # eval\n        avg_val_loss, preds = valid_fn(valid_loader, model, criterion, device)\n        valid_labels = valid_folds[CFG.target_col].values\n        \n        if isinstance(scheduler, ReduceLROnPlateau):\n            scheduler.step(avg_val_loss)\n        elif isinstance(scheduler, CosineAnnealingLR):\n            scheduler.step()\n        elif isinstance(scheduler, CosineAnnealingWarmRestarts):\n            scheduler.step()\n\n        # scoring\n        score = get_score(valid_labels, preds.argmax(1))\n\n        elapsed = time.time() - start_time\n\n        LOGGER.info(f'Epoch {epoch+1} - avg_train_loss: {avg_loss:.4f}  avg_val_loss: {avg_val_loss:.4f}  time: {elapsed:.0f}s')\n        LOGGER.info(f'Epoch {epoch+1} - Accuracy: {score}')\n\n        if score > best_score:\n            best_score = score\n            LOGGER.info(f'Epoch {epoch+1} - Save Best Score: {best_score:.4f} Model')\n            torch.save({'model': model.state_dict(), \n                        'preds': preds},\n                        OUTPUT_DIR+f'{CFG.model_name}_fold{fold}_best.pth')\n    \n    check_point = torch.load(OUTPUT_DIR+f'{CFG.model_name}_fold{fold}_best.pth')\n    valid_folds[[str(c) for c in range(5)]] = check_point['preds']\n    valid_folds['preds'] = check_point['preds'].argmax(1)\n\n    return valid_folds","c2386dc8":"# ====================================================\n# main\n# ====================================================\ndef main():\n\n    \"\"\"\n    Prepare: 1.train  2.test  3.submission  4.folds\n    \"\"\"\n\n    def get_result(result_df):\n        preds = result_df['preds'].values\n        labels = result_df[CFG.target_col].values\n        score = get_score(labels, preds)\n        LOGGER.info(f'Score: {score:<.5f}')\n    \n    if CFG.train:\n        # train \n        oof_df = pd.DataFrame()\n        for fold in range(CFG.n_fold):\n            if fold in CFG.trn_fold:\n                _oof_df = train_loop(folds, fold)\n                oof_df = pd.concat([oof_df, _oof_df])\n                LOGGER.info(f\"========== fold: {fold} result ==========\")\n                get_result(_oof_df)\n        # CV result\n        LOGGER.info(f\"========== CV ==========\")\n        get_result(oof_df)\n        # save result\n        oof_df.to_csv(OUTPUT_DIR+'oof_df.csv', index=False)\n    \n    if CFG.inference:\n        # inference\n        model = CustomResNext(CFG.model_name, pretrained=False)\n        states = [torch.load(OUTPUT_DIR+f'{CFG.model_name}_fold{fold}_best.pth') for fold in CFG.trn_fold]\n        test_dataset = TestDataset(test, transform=get_transforms(data='valid'))\n        test_loader = DataLoader(test_dataset, batch_size=CFG.batch_size, shuffle=False, \n                                 num_workers=CFG.num_workers, pin_memory=True)\n        predictions = inference(model, states, test_loader, device)\n        # submission\n        test['label'] = predictions.argmax(1)\n        test[['image_id', 'label']].to_csv(OUTPUT_DIR+'submission.csv', index=False)","185ab50a":"if __name__ == '__main__':\n    main()","e1774a71":"# CV split","01b43551":"# About this notebook  \n- PyTorch resnext50_32x4d starter code  \n- StratifiedKFold 5 folds  \n\nIf this notebook is helpful, feel free to upvote :)","8ff77c73":"# CFG","5a29bcbb":"# Data Loading","accc3aa9":"# Utils","4de1890f":"* \uc6d0\ubcf8 \ub178\ud2b8\ubd81\uc5d0\uc11c\ub294 Adam optimizer\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud558\uc600\ub294\ub370, \ucc2c\ub780\ub2d8\uc758 Adamp \uc0ac\uc6a9 \ub178\ud2b8\ubd81\uc744 \ubcf4\uace0 Adamp\ub97c \uc801\uc6a9\ud574\ubcf4\uc558\ub2e4. https:\/\/www.kaggle.com\/seriousran\/adam-vs-adamp-iclr-2021","e5378730":"# \ub178\ud2b8\ubd81 \ub9ac\ubdf0\n*  \uc804\uccb4 \ud2b8\ub808\uc774\ub2dd \uacfc\uc815\uc774 \uc798 \uc815\ub9ac\ub41c \ub178\ud2b8\ubd81\uc774\ub77c\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \n*  \uc798 \ubaa8\ub974\ub294 \uac1c\ub150, \ub77c\uc774\ube0c\ub7ec\ub9ac, \uc65c \uc4f0\ub294\uc9c0 \ubaa8\ub974\ub294 \ucf54\ub4dc\ub4e4\uc744 \ucd5c\ub300\ud55c \uc774\ud574\ud574\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.\n*  \ud56d\uc0c1 \ud574\ub2f9 \ucf54\ub4dc\ube14\ub7ed \uc704\uc5d0 \uc124\uba85\uc774 \ub2ec\ub9ac\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc124\uba85\uc744 \uba3c\uc800 \uc77d\uace0 -> \ucf54\ub4dc\ub97c \ubcf4\ub294 \ubc29\uc2dd\n*  \uc81c \ubc30\uacbd\uc9c0\uc2dd \uc774\uc678\uc758 \uc815\ubcf4\ub97c \uc815\ub9ac\ud558\ub294 \uac83\uc774\ub77c \ud574\ub2f9 \uac1c\ub150\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc18c\uac1c\ub294 \ubd80\uc871\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. <br>\uc544\uc608 \ubb54\uc9c0 \ubaa8\ub974\uace0 \uc4f0\ub294 \uac83 \ubcf4\ub2e8 \ub300\ucda9 \ubb54\uc9c0\uc54c\uace0 \uc4f0\uc790\ub77c\ub294 \ucde8\uc9c0\uc758 \uc815\ub9ac\uc785\ub2c8\ub2e4.","f6751748":"* timm : PyTorch Image Models \uad00\ub828. \ub178\ud2b8\ubd81\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 pytorch-image-models \ud3f4\ub354\uc5d0 \ub4e4\uc5b4\uc788\ub2e4.","5648608e":"* apex : NVIDIA\uc5d0\uc11c \ub9cc\ub4e0 'A Pytorch EXtension'(APEX) \ub77c\uc774\ube0c\ub7ec\ub9ac. \ud559\uc2b5 \ucd5c\uc801\ud654\ub97c \uc704\ud55c \ub3c4\uad6c\uc774\ub2e4.<br> mixed precision training\uacfc distributed training \ub4f1\uc758 \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud55c\ub2e4.\n* CosineAnnealingWarmRestarts : \ud559\uc2b5\ub960\uc758 \ucd5c\uc19f\uac12, \ucd5c\ub300\uac12\uc744 \uc815\ud558\uc5ec \uadf8 \ubc94\uc704 \uc548\uc5d0\uc11c Cosine \ud568\uc218\ub97c \ud1b5\ud574 \ud559\uc2b5\ud558\ub294 \ubc29\ubc95(CosineAnnealing). <br>\ud559\uc2b5\ub960\uc774 \uc791\uc744 \ub54c local optima\uc5d0 \ube60\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c \ub2e4\uc2dc \ud559\uc2b5\ub960\uc744 \ud06c\uac8c \uc99d\uac00\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc774 WarmRestarts. \ub450\uac1c\ub97c \ud569\uce58\uba74 \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\ub2e4. \n\n![image.png](attachment:image.png)\n","bb8fa486":"# Train loop","2dccc81c":"# Helper functions","92a07790":"# Directory settings","8e79af8e":"# Library","f5401182":"# MODEL","44d4b434":"# Transforms","c6844e16":"# Dataset","73e35b8f":"* max_grad_norm : \uadf8\ub798\ub514\uc5b8\ud2b8 \ud074\ub9ac\ud551\uc5d0\uc11c \uc4f0\uc774\ub294 \ubcc0\uc218. gradient explosion\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. gradient\uac00 \uc77c\uc815 \ubc94\uc704\ub97c \ubc94\uc5b4\ub098\uba74 max_grad_norm\uc73c\ub85c \ub098\ub220\uc900\ub2e4.\n* seed : \ub09c\uc218\ub97c \uc0dd\uc131\ud560 \ub54c \uc0ac\uc6a9\ud558\ub294 \uc2dc\ub4dc. \ub525\ub7ec\ub2dd\uc5d0\uc120 weight initialization \ub4f1\uc5d0\uc11c \ub09c\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \n* target_size : ???\n* n_fold : K-fold Cross Validation(\ub525\ub7ec\ub2dd k\uacb9 \uad50\ucc28\uac80\uc99d)\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ubcc0\uc218. <br>\ub370\uc774\ud130\uc14b\uc758 \ud06c\uae30\uac00 \uc791\uc744 \uacbd\uc6b0 \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \ub300\ud55c \uc131\ub2a5 \ud3c9\uac00\uc758 \uc2e0\ub8b0\uc131\uc774 \ub5a8\uc5b4\uc9c8 \uc218 \uc788\ub2e4. <br>\uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ubaa8\ub4e0 \ub370\uc774\ud130\uac00 \ucd5c\uc18c \ud55c \ubc88\uc740 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \uc4f0\uc774\uac8c \ud568. \uac01 \uacb0\uacfc\ub97c \ud3c9\uade0\ub0b4\uc11c \uc0ac\uc6a9\n![image.png](attachment:image.png)"}}