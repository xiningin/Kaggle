{"cell_type":{"6b5cce49":"code","cfac9cb7":"code","3d8191ff":"code","7a7e8f27":"code","2d8d7763":"code","b8ca27da":"code","1b9f7a9f":"code","3e3a5124":"code","b26c4eee":"code","fc0f917b":"code","54b4fec4":"code","c3788506":"code","2055a4c2":"code","00f78f25":"code","416f6a0a":"code","492ca47c":"code","f0fe019d":"code","0d35b0b0":"code","c4906097":"code","f8f829fb":"code","d103e236":"code","c8ecc065":"code","b415f7f5":"markdown","ac04a3f1":"markdown","78ccf769":"markdown","6368e4cc":"markdown","4a710660":"markdown","8a1d9178":"markdown","6b6adc9a":"markdown","4fa556f3":"markdown","aac1a05a":"markdown","2c6603db":"markdown"},"source":{"6b5cce49":"import numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nimport seaborn as sns\r\nimport category_encoders as ce\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.metrics import r2_score\r\nfrom sklearn.tree import DecisionTreeRegressor\r\nfrom sklearn.preprocessing import PolynomialFeatures\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.ensemble import RandomForestRegressor\r\n","cfac9cb7":"df = pd.read_csv('..\/input\/pizza-price-prediction\/pizza_v1.csv')\r\n","3d8191ff":"df.head()\r\n","7a7e8f27":"df.info()\r\n","2d8d7763":"df.isnull().sum()\r\n","b8ca27da":"df.describe()","1b9f7a9f":"df_numerical = df.select_dtypes(exclude=['object'])\r\ndf_categorical = df.select_dtypes(include=['object'])\r\n","3e3a5124":"df.dtypes\r\n","b26c4eee":"df['company'].value_counts()\r\ndf[\"price_rupiah\"].value_counts()\r\n","fc0f917b":"df.rename(columns={'price_rupiah': 'Cost', 'company': 'Company', 'diameter': 'Diameter', 'variant': 'Variant',\r\n          'size': 'Size', 'extra_sauce': 'Extra_sauce', 'extra_cheese': 'Extra_cheese'}, inplace=True)\r\n","54b4fec4":"encoding_columns = ['Company', 'topping', 'Variant',\r\n                    'Size', 'Extra_sauce', 'Extra_cheese']\r\n","c3788506":"def refining_cost(col, df):\r\n    df[col] = df[col].map(lambda x: x.replace('Rp', ''))\r\n    df[col] = df[col].map(lambda x: x.replace(',', ''))\r\n","2055a4c2":"def categorical_encoding(value, df):\r\n    one_hot_encoder = ce.OneHotEncoder(\r\n        cols=value, return_df=True, use_cat_names=True)\r\n    df_final = one_hot_encoder.fit_transform(df)\r\n    return df_final\r\n","00f78f25":"df = categorical_encoding(\"Company\", df)\r\ndf = categorical_encoding(\"topping\", df)\r\ndf = categorical_encoding('Variant', df)\r\ndf = categorical_encoding('Size', df)\r\ndf = categorical_encoding(\"Extra_sauce\", df)\r\ndf = categorical_encoding('Extra_cheese', df)\r\n","416f6a0a":"refining_cost('Cost', df)\r\ndf['Cost'] = df['Cost'].astype('float64')\r\ndf.dtypes\r\n","492ca47c":"X = df.drop(['Cost'], axis=1)\r\ny = df['Cost']\r\nprint(X.shape)\r\n","f0fe019d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\r\nX_train, X_test, y_train, y_test = np.array(X_train), np.array(\r\n    X_test), np.array(y_train), np.array(y_test)\r\n","0d35b0b0":"mul_regressor = LinearRegression()\r\nmul_regressor.fit(X_train, y_train)","c4906097":"decision_regressor = DecisionTreeRegressor(random_state = 0)\r\ndecision_regressor.fit(X_train, y_train)","f8f829fb":"poly_reg = PolynomialFeatures(degree = 4)\r\nX_poly = poly_reg.fit_transform(X_train)\r\npoly_regressor = LinearRegression()\r\npoly_regressor.fit(X_poly, y_train)","d103e236":"forest_regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\r\nforest_regressor.fit(X_train, y_train)\r\n","c8ecc065":"\nmul_score = r2_score(y_test, mul_regressor.predict(X_test))\r\ndecision_score = r2_score(y_test, decision_regressor.predict(X_test))\r\npoly_score = r2_score(\r\n    y_test,  poly_regressor.predict(poly_reg.transform(X_test)))\r\nforest_score = r2_score(y_test,  forest_regressor.predict(X_test))\r\n\r\nvar = {mul_score: \"mul_score\", decision_score: \"decision_score\",\r\n       poly_score: \"poly_score\", forest_score: \"forest_score\"}\r\nprint(\"The Regression model with the highest score is:\", var.get(max(var)), \"=\",max(var))\r\n","b415f7f5":"## Polynomial Rregression","ac04a3f1":"## Random Forest Regression","78ccf769":"## Importing the libraries","6368e4cc":"# Modeling","4a710660":"## Multiple Linear Regression","8a1d9178":"# R Squared Score","6b6adc9a":"# Data Pre-Processing","4fa556f3":"## Decision Tree Regression","aac1a05a":"## Splitting the dataset into the Training set and Test set","2c6603db":"## Importing the dataset"}}