{"cell_type":{"e02a528c":"code","68bfdd71":"code","3842b07c":"code","9c7d4389":"code","13fc7441":"code","e2e0c906":"code","fe3d7057":"code","eae37f83":"code","3b5c9663":"code","23751cc8":"code","ade9e29c":"code","37975721":"code","5ad0a338":"code","0c530fce":"code","f386dcb6":"markdown","daf866ee":"markdown","f0c1c19e":"markdown","6ccc9759":"markdown","f6f48e9f":"markdown","8fd212fd":"markdown","80005c43":"markdown","c07e47f4":"markdown","8e70dcd9":"markdown","9a9b4d14":"markdown","6e2f6c8f":"markdown","3eb2c12e":"markdown","bdba7603":"markdown"},"source":{"e02a528c":"pip install imutils","68bfdd71":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport argparse\nimport os\nimport cv2","3842b07c":"# initialize the initial learning rate, number of epochs to train for,\n# and batch size\nINIT_LR = 1e-4\nEPOCHS = 20\nBS = 32\n\n# grab the list of images in our dataset directory, then initialize\n# the list of data (i.e., images) and class images\n\nimagePaths = list(paths.list_images('..\/input\/face-mask-detection-data'))\ndata = []\nlabels = []\n\n# loop over the image paths\nfor imagePath in imagePaths:\n\t# extract the class label from the filename\n\tlabel = imagePath.split(os.path.sep)[-2]\n\n\t# load the input image (224x224) and preprocess it\n\timage = load_img(imagePath, target_size=(224, 224))\n\timage = img_to_array(image)\n\timage = preprocess_input(image)\n\n\t# update the data and labels lists, respectively\n\tdata.append(image)\n\tlabels.append(label)\nprint(\"No. of images loaded: {}\".format(len(data)))\n\n\n","9c7d4389":"# convert the data and labels to NumPy arrays\ndata = np.array(data, dtype=\"float32\")\nlabels = np.array(labels)\n\n# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)\n","13fc7441":"# partition the data into training and testing splits using 75% of\n# the data for training and the remaining 25% for testing\n(trainX, testX, trainY, testY) = train_test_split(data, labels,\n\ttest_size=0.20, stratify=labels, random_state=42)\n# construct the training image generator for data augmentation\naug = ImageDataGenerator(\n\trotation_range=20,\n\tzoom_range=0.15,\n\twidth_shift_range=0.2,\n\theight_shift_range=0.2,\n\tshear_range=0.15,\n\thorizontal_flip=True,\n\tfill_mode=\"nearest\")","e2e0c906":"# loading the MobileNetV2 network, ensuring the head FC layer sets are left off\nbaseModel = MobileNetV2(weights=\"imagenet\", include_top=False,\n\tinput_tensor=Input(shape=(224, 224, 3)))\n\n# constructing the head of the model that will be placed on top of the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n\n# placing the head FC model on top of the base model (this will become the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n\n# loop over all layers in the base model and freeze them so they will not be updated during the first training process\nfor layer in baseModel.layers:\n\tlayer.trainable = False\n\n# compiling our model\n\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])\n\n","fe3d7057":"# training the head of the network\n\nH = model.fit(\n\taug.flow(trainX, trainY, batch_size=BS),\n\tsteps_per_epoch=len(trainX) \/\/ BS,\n\tvalidation_data=(testX, testY),\n\tvalidation_steps=len(testX) \/\/ BS,\n\tepochs=EPOCHS)\n\n\n","eae37f83":"# making predictions on the testing set\n\npredIdxs = model.predict(testX, batch_size=BS)\n\n# for each image in the testing set we need to find the index of the label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\n# Creating a classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs,\n\ttarget_names=lb.classes_))\n","3b5c9663":"\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower right\")\n\n","23751cc8":"def detect_and_predict_mask(frame, faceNet, maskNet):\n\t# grab the dimensions of the frame and then construct a blob\n\t# from it\n\t(h, w) = frame.shape[:2]\n\tblob = cv2.dnn.blobFromImage(frame, 1.0, (300, 300),\n\t\t(104.0, 177.0, 123.0))\n\n\t# pass the blob through the network and obtain the face detections\n\tfaceNet.setInput(blob)\n\tdetections = faceNet.forward()\n\n\t# initialize our list of faces, their corresponding locations,\n\t# and the list of predictions from our face mask network\n\tfaces = []\n\tlocs = []\n\tpreds = []\n\n\t# loop over the detections\n\tfor i in range(0, detections.shape[2]):\n\t\t# extract the confidence (i.e., probability) associated with\n\t\t# the detection\n\t\tconfidence = detections[0, 0, i, 2]\n\n\t\t# filter out weak detections by ensuring the confidence is\n\t\t# greater than the minimum confidence\n\t\tif confidence > args[\"confidence\"]:\n\t\t\t# compute the (x, y)-coordinates of the bounding box for\n\t\t\t# the object\n\t\t\tbox = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n\t\t\t(startX, startY, endX, endY) = box.astype(\"int\")\n\n\t\t\t# ensure the bounding boxes fall within the dimensions of\n\t\t\t# the frame\n\t\t\t(startX, startY) = (max(0, startX), max(0, startY))\n\t\t\t(endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n\n\t\t\t# extract the face ROI, convert it from BGR to RGB channel\n\t\t\t# ordering, resize it to 224x224, and preprocess it\n\t\t\tface = frame[startY:endY, startX:endX]\n\t\t\tface = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n\t\t\tface = cv2.resize(face, (224, 224))\n\t\t\tface = img_to_array(face)\n\t\t\tface = preprocess_input(face)\n\n\t\t\t# add the face and bounding boxes to their respective\n\t\t\t# lists\n\t\t\tfaces.append(face)\n\t\t\tlocs.append((startX, startY, endX, endY))\n\n\t# only make a predictions if at least one face was detected\n\tif len(faces) > 0:\n\t\t# for faster inference we'll make batch predictions on *all*\n\t\t# faces at the same time rather than one-by-one predictions\n\t\t# in the above `for` loop\n\t\tfaces = np.array(faces, dtype=\"float32\")\n\t\tpreds = maskNet.predict(faces, batch_size=32)\n\n\t# return a 2-tuple of the face locations and their corresponding\n\t# locations\n\treturn (locs, preds)\n","ade9e29c":"args = {}\nargs[\"face\"] = \"..\/input\/face-detector\/face_detector\"\nargs[\"model\"] = \"..\/input\/mask-detector\/mask_detector.model\"\nargs[\"confidence\"] = 0.4","37975721":"\nprototxtPath = os.path.sep.join([args[\"face\"], \"deploy.prototxt\"])\nweightsPath = os.path.sep.join([args[\"face\"],\n\t\"res10_300x300_ssd_iter_140000.caffemodel\"])\nfaceNet = cv2.dnn.readNet(prototxtPath, weightsPath)\n\n","5ad0a338":"# load the face mask detector model from disk\n\nmaskNet = load_model(args[\"model\"])","0c530fce":"\nprint(\"Starting video stream\")\n\nvs = VideoStream(src=0).start()\ntime.sleep(2.0)\n\n# looping over the frames from the video stream\nwhile True:\n\t# grab the frame from the threaded video stream and resize it to have a maximum width of 400 pixels\n\tframe = vs.read()\n\tframe = imutils.resize(frame, width=400)\n\n\t# detect faces in the frame and determine if they are wearing a face mask or not\n\t(locs, preds) = detect_and_predict_mask(frame, faceNet, maskNet)\n\n\t# loop over the detected face locations and their corresponding locations\n\tfor (box, pred) in zip(locs, preds):\n\t\t# unpack the bounding box and predictions\n\t\t(startX, startY, endX, endY) = box\n\t\t(mask, withoutMask) = pred\n\n\t\t# determine the class label and color we'll use to draw the bounding box and text\n\t\tlabel = \"Mask\" if mask > withoutMask else \"No Mask\"\n\t\tcolor = (0, 255, 0) if label == \"Mask\" else (0, 0, 255)\n\n\t\t# include the probability in the label\n\t\tlabel = \"{}: {:.2f}%\".format(label, max(mask, withoutMask) * 100)\n\n\t\t# display the label and bounding box rectangle on the output frame\n\t\tcv2.putText(frame, label, (startX, startY - 10),\n\t\t\tcv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)\n\t\tcv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)\n\n\t# showing the output frame\n\tcv2.imshow(\"Frame\", frame)\n\tkey = cv2.waitKey(1) & 0xFF\n\n\t# if the `q` key was pressed, break from the loop\n\tif key == ord(\"q\"):\n\t\tbreak\n\n\ncv2.destroyAllWindows()\nvs.stop()\n","f386dcb6":"Loading and labelling the images in the Dataset.","daf866ee":" Plotting the training loss and accuracy","f0c1c19e":"# **COVID-19: Face Mask Detector**\n\nFace Mask Detection system built with OpenCV, TensorFlow using Deep Learning and Computer Vision to detect face masks in real-time video streams.\n\nThis notebook is created by [Ritik Bompilwar](http:\/\/ritikbompilwar.in\/) as part of cAInvas Scholar Program by [AITS](https:\/\/cainvas.ai-tech.systems\/dashboard\/)\n\nDataset Used [Face Mask Detection Data](https:\/\/www.kaggle.com\/aneerbanchakraborty\/face-mask-detection-data) from Kaggle.\n\nRefrence : [COVID-19: Face Mask Detector with OpenCV, Keras\/TensorFlow, and Deep Learning](https:\/\/www.pyimagesearch.com\/2020\/05\/04\/covid-19-face-mask-detector-with-opencv-keras-tensorflow-and-deep-learning\/)\n\n\n","6ccc9759":"Loading the Face Detector Model","f6f48e9f":"Preparing the inputs for the model","8fd212fd":"Loading the saved Facemask Detector Model","80005c43":"Initializing the webcam video stream and detecting mask ","c07e47f4":"Predicting masked and unmasked images using the trained Model.","8e70dcd9":"Importing all the dependencies and required libraries.","9a9b4d14":"Defining face detection\/mask prediction function","6e2f6c8f":" Constructing and compiling the Model","3eb2c12e":"Training the Model","bdba7603":"Constructing the argument parser and parsing the arguments"}}