{"cell_type":{"bf1013c2":"code","320f94e7":"code","1ac2ed08":"code","5295057c":"code","2ba2d847":"code","c55a296e":"code","1d93a30c":"code","a41618ed":"code","6cd71ab6":"code","407c0e7e":"code","a05a943f":"code","553cd606":"code","a0b511ac":"code","a6d3d52b":"code","8935248b":"code","ef4937de":"code","955ff32b":"code","878877c5":"code","1da2b81f":"code","e86e7b4b":"code","4050446a":"code","3411155d":"code","90bfb134":"code","fac127cb":"code","fcaa095b":"code","671cecb9":"code","67a3e306":"code","ce72d608":"code","64cf4227":"code","a255cdfb":"code","220e77cd":"code","a04ad1bd":"code","56d22d09":"code","1ec87ecd":"code","13981b8f":"code","008e411c":"code","7b95f4a5":"code","f2926f33":"code","1f328574":"code","f9fa5557":"code","ac15e335":"code","76e9dc20":"code","67f12f06":"code","f29805ac":"code","926fa2df":"code","5fbf4622":"code","8a7bdb17":"code","d532b3b6":"code","1eb5b474":"code","a115f08c":"code","256fd1a6":"code","96bf54c2":"code","9b3c3afb":"code","34a92f0e":"code","99d86e55":"code","a49b328c":"code","0be7143f":"code","703a8438":"code","b168531c":"code","2bfaf36f":"code","4b4beb91":"code","6dcc0248":"code","0d023ae0":"code","01140fc3":"code","47ee7153":"code","126be0cf":"code","687f5b92":"code","d4571c2d":"code","2a084392":"code","67a7acd4":"code","44da8e9d":"code","e27dede2":"code","94f45a1d":"code","abf93fff":"code","7a0e4f25":"code","81356a69":"code","60c066ae":"code","4edf152e":"code","a7ad3e74":"code","ae7eb7ef":"code","088e15e7":"code","8f48411f":"code","cb187249":"code","82c683d0":"code","7ae7077d":"code","8040fef1":"code","ae81fc6b":"code","97915971":"code","dc9f590f":"code","aea603bc":"code","51939a98":"code","57ca67c8":"code","e8567da0":"code","b8ec74c1":"code","4c375d7d":"code","bba837d6":"code","308bda39":"code","cab82b51":"code","92dca54b":"code","665a56c7":"code","c91ade3f":"code","d3d10ff6":"code","88518450":"code","eece1407":"code","4527bb10":"code","45fae6fa":"code","cb7ee451":"code","9e9b7934":"code","2bf32106":"code","fa87a614":"code","01a714de":"code","f5177197":"code","e76bfc61":"code","a25d7823":"code","71ab20b0":"code","147befc2":"code","d369a4f4":"code","c55fd08f":"code","b236367c":"code","2974a643":"code","d48113b9":"code","9825d65c":"code","21bedb0f":"code","007cfba8":"code","b33e7632":"code","97394326":"code","fe258542":"code","0a94948f":"code","e6d0c6ac":"code","92110c7d":"code","bf6300c1":"code","47f89885":"markdown","c8c52b69":"markdown","9d5ee327":"markdown","6c4b08af":"markdown","36ef236e":"markdown","94b11e6d":"markdown","4ef89c2b":"markdown","5c0a3166":"markdown","46564531":"markdown","86bc4ca8":"markdown","7769adf4":"markdown","4c3e1ce1":"markdown","2c7f9f34":"markdown","a8a9ac22":"markdown","aca77416":"markdown","88b48c25":"markdown","42c09354":"markdown","a0c2a550":"markdown","eea63514":"markdown","2d2b1701":"markdown","eaeb75a0":"markdown","a07b0900":"markdown","954a5083":"markdown","189e5dfe":"markdown","06534dbe":"markdown","a5cdb9f7":"markdown","25532308":"markdown","0009454d":"markdown","0e2bf5b5":"markdown","62b20932":"markdown","535df5ea":"markdown","8d49fdee":"markdown","81299906":"markdown","40ca678f":"markdown","173da5c2":"markdown","83a2a7f8":"markdown","7d445919":"markdown","24552707":"markdown","1e8b840e":"markdown","de55c0c6":"markdown"},"source":{"bf1013c2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib\n%matplotlib inline\nimport plotly.express as px\n\npd.set_option('display.max_columns', None)\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (10,6)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","320f94e7":"import os","1ac2ed08":"os.chdir(\"\/kaggle\/input\/\")","5295057c":"os.listdir()","2ba2d847":"raw_df = pd.read_csv('weather-dataset-rattle-package\/weatherAUS.csv')","c55a296e":"raw_df","1d93a30c":"raw_df.info()","a41618ed":"raw_df.dropna(subset=['RainToday', 'RainTomorrow'], inplace=True)","6cd71ab6":"raw_df.info()","407c0e7e":"raw_df.nunique()","a05a943f":"px.histogram(raw_df,\n             x='Location',\n             title='Location vs Rain Days',\n             color='RainToday')","553cd606":"px.histogram(raw_df,\n             x='Temp3pm',\n             title='Temperature at 3pm vs Rain Tomorrow',\n             color='RainTomorrow')","a0b511ac":"px.histogram(raw_df,\n             x='RainTomorrow',\n             color='RainToday',\n             title='Rain Tomorrow vs Rain Today')","a6d3d52b":"px.scatter(raw_df.sample(2000),\n           title='Minimum Temperature vs Maximum Temperature',\n           color='RainToday',\n           x='MinTemp',\n           y='MaxTemp')","8935248b":"px.strip(raw_df.sample(2000),\n         title='Temperature at 3pm vs Humidity at 3pm',\n         color='RainTomorrow',\n         x='Temp3pm',\n         y='Humidity3pm')","ef4937de":"sns.countplot(x=pd.to_datetime(raw_df.Date).dt.year)\nplt.title('Number of rows per year');","955ff32b":"year = pd.to_datetime(raw_df.Date).dt.year\n\ntrain_df = raw_df[year < 2015]\nval_df = raw_df[year == 2015]\ntest_df = raw_df[year > 2015]","878877c5":"print('Training Set Size: ', train_df.shape)\nprint('Validation Set Size: ', val_df.shape)\nprint('Test Set Size: ', test_df.shape)","1da2b81f":"train_df","e86e7b4b":"val_df","4050446a":"test_df","3411155d":"input_cols = list(train_df.columns)[1:-1]\ntarget_col = 'RainTomorrow'","90bfb134":"print(input_cols)","fac127cb":"train_inputs = train_df[input_cols].copy()\ntrain_target = train_df[target_col].copy()","fcaa095b":"val_inputs = val_df[input_cols].copy()\nval_target = val_df[target_col].copy()","671cecb9":"test_inputs = test_df[input_cols].copy()\ntest_target = test_df[target_col].copy()","67a3e306":"train_inputs","ce72d608":"train_target","64cf4227":"numeric_cols = train_inputs.select_dtypes(include=np.number).columns.tolist()\ncategorical_cols = train_inputs.select_dtypes(include='object').columns.tolist()","a255cdfb":"numeric_cols","220e77cd":"train_inputs[numeric_cols].describe()","a04ad1bd":"train_inputs[categorical_cols].nunique()","56d22d09":"from sklearn.impute import SimpleImputer","1ec87ecd":"imputer = SimpleImputer(strategy='mean')","13981b8f":"raw_df[numeric_cols].isna().sum()","008e411c":"imputer.fit(raw_df[numeric_cols])","7b95f4a5":"print(numeric_cols)","f2926f33":"list(imputer.statistics_)","1f328574":"train_inputs[numeric_cols] = imputer.transform(train_inputs[numeric_cols])\nval_inputs[numeric_cols] = imputer.transform(val_inputs[numeric_cols])\ntest_inputs[numeric_cols] = imputer.transform(test_inputs[numeric_cols])","f9fa5557":"train_inputs[numeric_cols]","ac15e335":"train_inputs[numeric_cols].isna().sum()","76e9dc20":"raw_df[numeric_cols].describe()","67f12f06":"from sklearn.preprocessing import MinMaxScaler","f29805ac":"scaler = MinMaxScaler()","926fa2df":"scaler.fit(raw_df[numeric_cols])","5fbf4622":"train_inputs[numeric_cols] = scaler.transform(train_inputs[numeric_cols])\nval_inputs[numeric_cols] = scaler.transform(val_inputs[numeric_cols])\ntest_inputs[numeric_cols] = scaler.transform(test_inputs[numeric_cols])","8a7bdb17":"train_inputs[numeric_cols].describe()","d532b3b6":"raw_df[categorical_cols].nunique()","1eb5b474":"from sklearn.preprocessing import OneHotEncoder","a115f08c":"encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')","256fd1a6":"raw_df2 = raw_df[categorical_cols].fillna('Unknown')","96bf54c2":"encoder.fit(raw_df2[categorical_cols])","9b3c3afb":"categorical_cols","34a92f0e":"encoder.categories_","99d86e55":"encoded_cols = list(encoder.get_feature_names(categorical_cols))\nprint(encoded_cols)","a49b328c":"train_inputs[encoded_cols] = encoder.transform(train_inputs[categorical_cols].fillna('Unknown'))\nval_inputs[encoded_cols] = encoder.transform(val_inputs[categorical_cols].fillna('Unknown'))\ntest_inputs[encoded_cols] = encoder.transform(test_inputs[categorical_cols].fillna('Unknown'))","0be7143f":"train_inputs","703a8438":"from sklearn.linear_model import LogisticRegression","b168531c":"model = LogisticRegression(solver='liblinear')","2bfaf36f":"model.fit(train_inputs[numeric_cols + encoded_cols], train_target)","4b4beb91":"print(numeric_cols + encoded_cols)","6dcc0248":"print(model.coef_.tolist())","0d023ae0":"print(model.intercept_)","01140fc3":"weight_df = pd.DataFrame({\n    'feature': (numeric_cols + encoded_cols),\n    'weights': model.coef_.tolist()[0]\n})","47ee7153":"sns.barplot(data=weight_df.sort_values('weights', ascending=False).head(10),\n            x='weights',\n            y='feature');","126be0cf":"sns.barplot(data=weight_df.sort_values('weights').head(10),\n            x='weights',\n            y='feature');","687f5b92":"X_train = train_inputs[numeric_cols + encoded_cols]\nX_val = val_inputs[numeric_cols + encoded_cols]\nX_test = test_inputs[numeric_cols + encoded_cols]","d4571c2d":"train_pred = model.predict(X_train)","2a084392":"train_pred","67a7acd4":"train_target","44da8e9d":"train_prob = model.predict_proba(X_train)\ntrain_prob","e27dede2":"model.classes_","94f45a1d":"from sklearn.metrics import accuracy_score","abf93fff":"accuracy_score(train_target, train_pred)","7a0e4f25":"from sklearn.metrics import confusion_matrix","81356a69":"confusion_matrix(train_target, train_pred, normalize='true')","60c066ae":"def predict_and_plot(inputs, target, name=''):\n  pred = model.predict(inputs)\n\n  accuracy = accuracy_score(target, pred)\n  print('Accuracy: {:.2f}%'.format(accuracy*100))\n\n  cf = confusion_matrix(target, pred, normalize='true')\n  plt.figure()\n  sns.heatmap(cf, annot=True)\n  plt.xlabel('Prediction')\n  plt.ylabel('Target')\n  plt.title('{} Confusion Matrix'.format(name));\n\n  return pred","4edf152e":"train_preds = predict_and_plot(X_train, train_target, 'Training')","a7ad3e74":"val_preds = predict_and_plot(X_val, val_target, 'Validation')","ae7eb7ef":"test_preds = predict_and_plot(X_test, test_target, 'Training')","088e15e7":"def random_guess(inputs):\n  return np.random.choice(['No', 'Yes'], len(inputs))","8f48411f":"def all_no(inputs):\n  return np.full(len(inputs), 'No')","cb187249":"random_guess(X_val)","82c683d0":"all_no(X_val)","7ae7077d":"accuracy_score(test_target, random_guess(X_test))","8040fef1":"accuracy_score(test_target, all_no(X_test))","ae81fc6b":"from sklearn.ensemble import RandomForestClassifier","97915971":"model = RandomForestClassifier(n_jobs=-1, random_state=42)","dc9f590f":"model.fit(X_train, train_target)","aea603bc":"model.score(X_train, train_target)","51939a98":"model.score(X_val, val_target)","57ca67c8":"importance_df = pd.DataFrame({\n    'feature': X_train.columns,\n    'importance': model.feature_importances_\n}).sort_values('importance', ascending=False)","e8567da0":"importance_df.head(10)","b8ec74c1":"plt.title('Feature Importance')\nsns.barplot(data=importance_df.head(10), x='importance', y='feature');","4c375d7d":"base_model = RandomForestClassifier(random_state=42, n_jobs=-1).fit(X_train, train_target)","bba837d6":"base_train_acc = base_model.score(X_train, train_target)\nbase_val_acc = base_model.score(X_val, val_target)","308bda39":"base_accs = base_train_acc, base_val_acc\nbase_accs","cab82b51":"model = RandomForestClassifier(random_state=42, n_jobs=-1, n_estimators=10)","92dca54b":"model.fit(X_train, train_target)","665a56c7":"model.score(X_train, train_target), model.score(X_val, val_target)","c91ade3f":"base_accs","d3d10ff6":"model = RandomForestClassifier(random_state=42, n_jobs=-1, n_estimators=500)\nmodel.fit(X_train, train_target)","88518450":"model.score(X_train, train_target), model.score(X_val, val_target)","eece1407":"def test_params(**params):\n    model = RandomForestClassifier(random_state=42, n_jobs=-1, **params).fit(X_train, train_target)\n    return model.score(X_train, train_target), model.score(X_val, val_target)","4527bb10":"test_params(max_depth=5)","45fae6fa":"test_params(max_depth=26)","cb7ee451":"test_params(max_leaf_nodes=2**20)","9e9b7934":"test_params(max_leaf_nodes=2**5)","2bf32106":"base_accs # no max depth or max leaf nodes","fa87a614":"test_params(max_features='log2')","01a714de":"test_params(max_features=3)","f5177197":"test_params(max_features=6)","e76bfc61":"base_accs","a25d7823":"test_params(min_samples_split=3, min_samples_leaf=2)","71ab20b0":"test_params(min_samples_split=100, min_samples_leaf=60)","147befc2":"base_accs","d369a4f4":"test_params(min_impurity_decrease=1e-7)","c55fd08f":"test_params(min_impurity_decrease=1e-2)","b236367c":"base_accs","2974a643":"test_params(bootstrap=False)","d48113b9":"test_params(max_samples=0.9)","9825d65c":"base_accs","21bedb0f":"model.classes_","007cfba8":"test_params(class_weight='balanced')","b33e7632":"test_params(class_weight={'No': 1, 'Yes': 2})","97394326":"base_accs","fe258542":"model = RandomForestClassifier(n_jobs=-1, \n                               random_state=42, \n                               n_estimators=500,\n                               max_features=7,\n                               max_depth=30, \n                               class_weight={'No': 1, 'Yes': 1.5})","0a94948f":"model.fit(X_train, train_target)","e6d0c6ac":"model.score(X_train, train_target), model.score(X_val, val_target)","92110c7d":"base_accs","bf6300c1":"model.score(X_test, test_target)","47f89885":"Finalising the Model","c8c52b69":"### Loading the Data","9d5ee327":"### Scaling Numeric Features","6c4b08af":"Our 'random model' achieves an accuracy of 50% and our 'dumb model' achieves an accuracy of 77 percent.\n\nHence our model is better than a dumb or random model","36ef236e":"Accuracy score of model's prediction in by computing the percentage of matching values in train_pred and train_target ","94b11e6d":"bootstrap, max_samples","4ef89c2b":"Probabilistic Prediction","5c0a3166":"### Increased the accuracy from 77% with a logistic regression model to 84.7% with a well-tuned random forest.","46564531":"### Hyperparameter Tuning and Regularisation","86bc4ca8":"The above histograms shows that there is approximately uniform distribution of data across all locations. ","7769adf4":"It can be seen that Wind Gust speed and Pressure at 3pm are an important factor in predicting whether it will rain tomorrow or not","4c3e1ce1":"The accuracy score of the Model on Validation and Set is above 84%, which is quite good for the data our model has never seen before. Though our model has a good accuracy but it has a lot of false negatives.","2c7f9f34":"The histogram seems to form a gussian curve or a normal distribution and the curve shows that if the Temperature at 3pm is low then it is likely that it will rain tomorrow. More cases of low temperature rain tomorrow then High temperature and rain tomorrow","a8a9ac22":"### Making Predictions and Evaluating the Model","aca77416":"The dataset contains 145460 rows of data and 23 features. The dataset contains date, numerical and categorical data. Our aim is to create a model to predict the value in RainTomorrow column","88b48c25":"Removing the missing data from RainToday and RainTomorrow columns to make the analysis and model simpler to work","42c09354":"### Traing, Validation and Test Sets","a0c2a550":"Identifying numerical and categorical columns","eea63514":"Let's check the datatype and missing values from the data","2d2b1701":"### Identifying Input and Target Columns","eaeb75a0":"n_estimators","a07b0900":"The model achieves an accuracy of 85.2 % on the training set","954a5083":"min_samples_split and min_samples_leaf","189e5dfe":"### Exploratory Data Analysis","06534dbe":"In this notebook, I'll train a logistic regression model using Rain in Australia dataset to predict whether or not it will rain at the location tomorrow, using today's data. This is a **binary classification** problem.","a5cdb9f7":"When it rains today the difference between Maximum Temperature and Minimum Temperature is quite low","25532308":"### Encoding Categorical Data","0009454d":"Finally making predictions on the testing set","0e2bf5b5":"# Rain in Australia Prediction\n\nThe [Rain in Australia](https:\/\/www.kaggle.com\/jsphyg\/weather-dataset-rattle-package) dataset contains about 10 years of daily weather observations from numerous Australian weather stations.\n\nAs a data scientist at the Bureau of Meteorology, you are tasked with creating a fully-automated system that can use today's weather data for a given location to predict whether it will rain at the location tomorrow.","62b20932":"If the temperature at 3pm is low and Humidity is high there is a high chance that it will Tomorrow","535df5ea":"## Training a Random Forest Model","8d49fdee":"Verifying model by comparing the result to a 'random' and 'dumb' model","81299906":"max_depth and max_leaf_nodes\n\nLet's define a helper function test_params to make it easy to test hyperparameters.","40ca678f":"min_impurity_decrease","173da5c2":"Model's accuracy for Testing and Validation Set","83a2a7f8":"class_weight","7d445919":"Breakdown of training prediction in confusion matrix","24552707":"### Training the model using Logistic Regression","1e8b840e":"### Imputing Missing Numerical Data","de55c0c6":"The optimal values of max_depth and max_leaf_nodes lies somewhere between 0 and unbounded.\n\nmax_features"}}