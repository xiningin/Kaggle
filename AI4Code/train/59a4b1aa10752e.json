{"cell_type":{"2411c395":"code","f39d9b21":"code","dcaa9b73":"code","6b587d8d":"code","339f9535":"code","897c4057":"code","2aa98d41":"code","0d7b6920":"code","43849d8b":"code","6ab3e1c0":"code","32f7e2fa":"code","9cac04c8":"code","4a6f9228":"code","8e9bf8b1":"code","c9fa6b4c":"code","2a3e7c5d":"code","858f986c":"code","c91062d1":"code","953aa849":"code","c5ac96eb":"code","8bd14a98":"code","be2e34f0":"code","e2d54d9e":"code","e095dd42":"code","e86fd764":"code","498f4e45":"markdown","1d385482":"markdown","607a49ac":"markdown","12a967c3":"markdown","1f665269":"markdown","e8eac933":"markdown","c79fc83c":"markdown","9f12464b":"markdown","78cd431f":"markdown","32bc6eb5":"markdown","90468a9b":"markdown","d9fa1acb":"markdown","6d5256ce":"markdown","10d9a5c1":"markdown","623ee0ee":"markdown","530f2dd3":"markdown","fd0cbaee":"markdown","9efd4290":"markdown"},"source":{"2411c395":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f39d9b21":"data = pd.read_csv(\"..\/input\/voice.csv\")","dcaa9b73":"data.head()","6b587d8d":"data.info()","339f9535":"data.label.value_counts()","897c4057":"data.label = [0 if each=='female' else 1 for each in data.label]","2aa98d41":"data.head()","0d7b6920":"# I determined x and y\n# y : outputs \n# x : features\ny = data.label.values\nx_data = data.drop([\"label\"],axis=1) ","43849d8b":"y","6ab3e1c0":"x_data.head()","32f7e2fa":"data.head()","9cac04c8":"#. I muss make all my data's values between 0 and 1. Because no one data should be affected by the size of other data. \n#normalization =(x-min(x))\/(max(x)-min(x))\nx = (x_data - np.min(x_data)) \/ (np.max(x_data)-np.min(x_data)).values","4a6f9228":"x.head()","8e9bf8b1":"# we need x_train,x_test,y_train,y_test \nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)\n\nx_train = x_train.T\nx_test  = x_test.T\ny_train = y_train.T\ny_test  = y_test.T\n\nprint(\"x_train: \", x_train.shape)\nprint(\"x_test: \", x_test.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"y_test: \", y_test.shape) ","c9fa6b4c":"def initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n#sigmoid function\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head ","2a3e7c5d":"def forward_backward_propagation(w,b,x_train,y_train):\n    #forward propagation\n    z=np.dot(w.T,x_train)+b\n    y_head=sigmoid(z)\n    loss=-y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1] # x_train.shape[1] is for scaling\n    \n    #backward propagation\n    # In backward propagation we will use y_head that found in forward propagation\n    derivative_weight=(np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1] is for scaling\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1]                   # x_train.shape[1] is for scaling\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    \n    return cost,gradients ","858f986c":"# Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iteration):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list ","c91062d1":"#prediction\ndef predict(w,b,x_test):\n    # x_test is an input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction ","953aa849":"#Logistic Regression\n\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 20\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print train\/test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 50) ","c5ac96eb":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 200) ","8bd14a98":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)  ","be2e34f0":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 500)  ","e2d54d9e":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 2, num_iterations = 500)  ","e095dd42":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 0.5, num_iterations = 500) ","e86fd764":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\n\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T))) ","498f4e45":"## 2.Importing dataset and data preprocessing\n<a id=\"2\"><\/a>","1d385482":"## 3.Normalization\n<a id=\"3\"><\/a>","607a49ac":"* I want to put boundry like female : 0 , male : 1\n* Weil The model can determine which data belongs to which class (0 or 1).","12a967c3":"### 4.7. Logisic Regression With Sklearn\n<a id=\"4.7\"><\/a>","1f665269":"## 5. Conclusion\n<a id=\"5\"><\/a>","e8eac933":"### 4.3. Forward & Backward Propagation\n<a id=\"4.3\"><\/a>","c79fc83c":"## Table of Contents\n***\n* [1. Introduction](#c) <br>\n* [2. Importing dataset and data preprocessing](#2) <br>\n* [3. Normalization ](#3) <br>\n* [4. Logistic Regression](#4) <br>\n  * [4.1. Train Test Split](#4.1) <br>\n  * [4.2. Parameter Initialize and Sigmoid Function](#4.2) <br>\n  * [4.3. Forward & Backward Propagation](#4.3) <br>\n  * [4.4. Updating(learning) Parameters](#4.4) <br>\n  * [4.5. Predict](#4.5) <br>\n  * [4.6. Logistic Regression](#4.6) <br>\n  * [4.7. Logistic Regression with sklearn](#4.7) <br>\n* [5.Conclusion](#5) <br>    ","9f12464b":"### 4.5. Predict\n<a id=\"4.5\"><\/a>","78cd431f":"### 4.2. Parameter Initialize and Sigmoid Funtion\n<a id=\"4.3\"><\/a>","32bc6eb5":"## 1.Introduction\n<a id=\"c\"><\/a>\nIn this kernel, i will work on Logistic Regression.\n### What is the Logistic Regression\n* When data have binary classification (outputs : 0 or 1), we can use logistic regression.\n* Logistic regression is a predictive analysis.","90468a9b":"### 4.6. Logsitic Regression\n<a id=\"4.6\"><\/a>","d9fa1acb":"## 4. Logistic Regression\n<a id=\"4\"><\/a>","6d5256ce":"### 4.1. Train and Test Split\n<a id=\"4.1\"><\/a>","10d9a5c1":"We are following those steps for ML.","623ee0ee":"### 4.4. Updating(learning) Parameters\n<a id=\"4.4\"><\/a>","530f2dd3":"# Logistic Regression\n","fd0cbaee":"* First of all i am looking to data.\n* I am cheching the colums and i must drop the columns which is not relating with my predictions.\n* If i use the unusefuly columns on my Logistics model,it negatively affects on model.\n* Then i will determinate to x,y values\n","9efd4290":"## Suad Emre UMAR\n\n"}}