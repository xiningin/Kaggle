{"cell_type":{"e824cd95":"code","07ba16d6":"code","bf1be24d":"code","a5fa18fd":"code","085a8354":"code","2f34213c":"code","739ba551":"code","b38b541b":"code","0dd915a4":"code","65a8f4c0":"code","4e664b12":"code","375de3a3":"code","a403e8d9":"code","e685aacd":"code","cd5b789d":"code","f17683b4":"code","cbee3493":"code","dc8e1130":"code","9cd66de8":"code","218fe04e":"code","1c249750":"code","17093ed0":"code","4b3b5817":"code","093587f1":"code","4bc75a44":"code","f4553fe6":"code","78821f2f":"code","08c09b25":"code","01ece0a8":"code","7403199d":"code","f48a50d1":"code","230a6964":"code","108fa12d":"code","2f6802e8":"code","fa44649b":"code","c026a779":"code","9afcf66c":"code","2e657282":"code","1958d132":"markdown","0be7350e":"markdown","b3dba2d8":"markdown","0f4a26de":"markdown","56870ff0":"markdown","351b8eb1":"markdown","78f55e16":"markdown","e8eaecc3":"markdown","d29ff9bb":"markdown","f01953f6":"markdown","e858b69c":"markdown","076a559b":"markdown"},"source":{"e824cd95":"# Importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom xgboost import XGBClassifier as XGB\nfrom sklearn.model_selection import train_test_split as TTS\n%matplotlib inline","07ba16d6":"# Loading data\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","bf1be24d":"# Cheking train data\n\ndf_train.head()","a5fa18fd":"# Cheking test data\n\ndf_test.head()","085a8354":"# Cheking the null or blank values\n\npd.DataFrame({'Train': df_train.drop('Survived', axis = 1).isna().sum(), 'Test': df_test.isna().sum()})","2f34213c":"# First, it is necessary to identify each data set so that they can be segmented after treatment.\n\ndf_train['Set'] = 'Train'\ndf_test['Set'] = 'Test'\n\n# Now, blend.\n\ndf = pd.concat([df_train.drop('Survived', axis = 1), df_test])\ndf.head()","739ba551":"df_train.dtypes","b38b541b":"plt.figure(figsize=(10,5))\nsb.distplot(df_train[df_train['Survived'] == 0]['Age'].dropna(), color='red')\nsb.distplot(df_train[df_train['Survived'] == 1]['Age'].dropna(), color='blue')\nplt.ylabel('Passenger count')\nplt.title('Age distribution by survived')\nplt.legend(['Died', 'Survived'])\nplt.show()","0dd915a4":"plt.figure(figsize=(10,5))\nsb.distplot(df_train[df_train['Survived'] == 0]['Fare'].dropna(), color='red')\nsb.distplot(df_train[df_train['Survived'] == 1]['Fare'].dropna(), color='blue')\nplt.ylabel('Passenger count')\nplt.title('Fare distribution by survived')\nplt.legend(['Died', 'Survived'])\nplt.show()","65a8f4c0":"sb.catplot(x = 'Sex', y = 'Survived', data = df_train, kind = 'bar', color='lightblue')\nplt.title('Number of suvivors by sex')\nplt.show()","4e664b12":"sb.catplot(x = 'Parch', y = 'Survived', data = df_train, kind = 'bar', color='lightblue')\nplt.title('Number of suvivors by parch')\nplt.show()","375de3a3":"sb.catplot(x = 'SibSp', y = 'Survived', data = df_train, kind = 'bar', color='lightblue')\nplt.title('Number of suvivors by SibSp')\nplt.show()","a403e8d9":"sb.catplot(x = 'Pclass', y = 'Survived', data = df_train, kind = 'bar', color='lightblue')\nplt.title('Number of suvivors by Pclass')\nplt.show()","e685aacd":"sb.catplot(x = 'Embarked', y = 'Survived', data = df_train, kind = 'bar', color='lightblue')\nplt.title('Number of suvivors by Embarked')\nplt.show()","cd5b789d":"# Extract the title\n\ndf['Title'] = [s.split(', ')[1].split('.')[0] for s in df['Name']]","f17683b4":"# Crate a dictionary of age means by Title\n\nage_dict = df.groupby('Title')['Age'].mean().astype(int).to_dict()","cbee3493":"# Replace nan values with the age mean\n\ndf['Age'] = [age_dict[t] if pd.isna(a) else a for a, t in zip(df['Age'], df['Title'])]","dc8e1130":"# Age category\n\ndf['Age_Class'] = pd.cut(df['Age'].astype(int), 8, labels=range(8))\ndf['Age_Class'] = df['Age_Class'].astype(int)","9cd66de8":"# Family size\n\ndf['Family'] = df['SibSp'] + df['Parch'] + 1","218fe04e":"# Change de sex values\n\ndf['Sex'].replace({'male':1, 'female': 0}, inplace = True)","1c249750":"# Change de embarked values\n\ndf['Embarked'].replace({'C':0, 'Q': 1, 'S': 2}, inplace = True)\ndf['Embarked'].fillna(df['Embarked'].mean(), inplace = True)","17093ed0":"# Fare values\n\ndf['Fare'].fillna(df['Fare'].mean(), inplace = True)","4b3b5817":"# Titles\n\ntitle_dict = {k:i for i,k in enumerate(df.Title.unique())}\n\ndf['Title'].replace(title_dict, inplace = True)","093587f1":"# Passenger have a cabin?\n\n\ndf['Cabin'] = [c[0] if not(pd.isna(c)) else 'X' for c in df['Cabin']]\n\ncabin_dict = {k:i for i,k in enumerate(df.Cabin.unique())}\n\ndf['Cabin'].replace(cabin_dict, inplace = True)","4bc75a44":"# Fare by person\n\ndf['Cost'] = df['Fare'] \/ df['Family']","f4553fe6":"# Is single?\n\ndf['Single'] = np.where(df['Family'] == 1, 1, 0)","78821f2f":"# Drop the columns and few null values\n\ndf.drop(['PassengerId', 'Name', 'Ticket'], axis = 1, inplace = True)","08c09b25":"df.head()","01ece0a8":"df.isna().sum()","7403199d":"# Split the data in train and test\n\ndf_train_n = pd.concat([df[df['Set'] == 'Train'].drop('Set', axis = 1), df_train['Survived']], axis = 1)\ndf_test_n = df[df['Set'] == 'Test'].drop(['Set'], axis = 1)","f48a50d1":"# Getting the vectors\n\nX_train, X_test, y_train, y_test = TTS(df_train_n.drop('Survived', axis = 1), df_train_n['Survived'], test_size=0.33, random_state=0)","230a6964":"# Fit the model on train data\n\nmodel = XGB(n_estimators = 100).fit(X_train, y_train)\nmodel.score(X_train, y_train)","108fa12d":"# Checking the fatures importance\n\npd.DataFrame({'Feature': X_train.columns, 'Importance': model.feature_importances_}).sort_values('Importance', ascending=False)","2f6802e8":"# Predicting \n\ny_pred_k = model.predict(df_test_n)","fa44649b":"# Rounding the probabilities\n\ny_pred_k = np.where(y_pred_k >= 0.5, 1, 0)","c026a779":"# Creating the dataframe to export\n\ndf_k = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_pred_k})","9afcf66c":"df_k.head()","2e657282":"# Exporting the data\n\ndf_k.to_csv('Titanic_prediction.csv', sep = ',', index = None)","1958d132":"Nice. It's time to show some art on train data.","0be7350e":"Time to get your hands dirty, working on missing values and creating new features.","b3dba2d8":"Wow. Nice score!","0f4a26de":"#### Knowing the enemy - Sun Tzu mode on\n\n___","56870ff0":"We can come to some conclusions:\n\n* the social class (fare and class) indicate that the poorest have a high chance of death;\n\n* the female sex, as well as having an average number of people in the family, have a great chance of surviving;","351b8eb1":"#### Sharpening the knife\n\n___","78f55e16":"### Titanic Challenge\n\nDiego N. Vilela - April 2020","e8eaecc3":"**Note:** With the exception of the 'survived' field, the sets share the same characteristics, as well as lacking some information. In this way, I believe that joining the sets into one will facilitate the treatment of the data.","d29ff9bb":"Ok! Data sounds good. Now , time to use some computer brain.","f01953f6":"Here, we have 3 data types, int64, float64 and object. Let's start on float data.","e858b69c":"#### Loading the armament\n\n___","076a559b":"Let's predict the data from Kaggle :)"}}