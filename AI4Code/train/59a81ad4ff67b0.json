{"cell_type":{"55dc0588":"code","844b87a2":"code","ba53936b":"code","fff90047":"code","cc0c87bd":"code","a606396a":"code","a7e69142":"code","ef6883ec":"code","d5ec1af4":"code","9bbab490":"code","4fd8214c":"code","c6c30662":"code","bb802f4f":"code","91c41105":"code","033e0997":"code","62be00e6":"code","854fb638":"code","0f2e6714":"code","ad0e12d7":"code","cf8e2741":"code","8bc4543c":"code","9a25f3c8":"code","a42ba3a1":"markdown","77033a64":"markdown","1a6d9680":"markdown","d3c2916c":"markdown","c0e9ce8d":"markdown","911ed1a5":"markdown","9fc34074":"markdown","24db1c70":"markdown","d9d73500":"markdown","5e8250cc":"markdown","8f408f22":"markdown","cd75c1d1":"markdown","2ee0df37":"markdown","2a986bea":"markdown","3ae37c77":"markdown","44e3d732":"markdown","9c8f6e10":"markdown","9761001a":"markdown","948c6a3b":"markdown","bbbca891":"markdown"},"source":{"55dc0588":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n","844b87a2":"data = pd.read_csv('\/kaggle\/input\/train_fwYjLYX.csv')\ntest = pd.read_csv('\/kaggle\/input\/test_1eLl9Yf.csv')","ba53936b":"data.head()","fff90047":"test.head()","cc0c87bd":"data['application_date'] = pd.to_datetime(data['application_date'])\ndata['year'] = data['application_date'].dt.year\ndata['month'] = data['application_date'].dt.month\ndata['day_of_year'] = data['application_date'].dt.dayofyear\ndata['weekday'] = data['application_date'].dt.weekday\n","a606396a":"data.head()","a7e69142":"ax = sns.countplot(x = 'year', data = data)\nplt.title('count of data points given in respective years')\nplt.xlabel('years')\nplt.ylabel('frequence')\nfor p in ax.patches:\n        ax.annotate('%{:.1f}'.format(p.get_height()\/data.shape[0]*100), (p.get_x() + 0.1, p.get_height()))\nplt.show()","ef6883ec":"f, axes = plt.subplots(2,2)\nf.set_size_inches(20,20)\n\nsns.barplot(y=\"case_count\", x= \"year\", data=data,  orient='v' , ax=axes[0,0],)\nsns.barplot(y=\"case_count\", x= \"month\", data=data,  orient='v' , ax=axes[0,1])\nsns.barplot(y = 'case_count', x='weekday', data = data, orient = 'v' , ax = axes[1,0])\nsns.barplot(y = 'case_count', x='day_of_year', data = data, orient = 'v' , ax = axes[1,1])\nplt.show()","d5ec1af4":"ax = sns.barplot(x = ['1', '2'], y = [list(data['segment'].value_counts())[0], list(data['segment'].value_counts())[1]])\nplt.title('% of segment')\nplt.xlabel('segment')\nplt.ylabel('frequency')\nfor p in ax.patches:\n    ax.annotate('%{:.1f}'.format(p.get_height()\/data.shape[0]*100), (p.get_x() + 0.1, p.get_height()))\nplt.show()","9bbab490":"ax = sns.barplot(y=\"case_count\", x= \"segment\", data=data,  orient='v')\nfor p in ax.patches:\n    ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x() + 0.1, p.get_height()))\nplt.show()","4fd8214c":"data['branch_id'].nunique()","c6c30662":"f = plt.figure()\nf.set_size_inches(25,10)\nsns.barplot(y=\"case_count\", x= \"branch_id\", data=data,  orient='v' )\nplt.show()","bb802f4f":"# branch_id having highest count_case \ndata.groupby('branch_id')['case_count'].mean().sort_values(ascending = False).iloc[0:5]","91c41105":"data.groupby('branch_id')['case_count'].mean().sort_values().iloc[0:2]","033e0997":"# plotting trends","62be00e6":"data_new = pd.read_csv('\/kaggle\/input\/train_fwYjLYX.csv')\ndata_new.index = pd.to_datetime(data_new.application_date)\n\nmonthly = data_new.resample('M').mean()\nweekly = data_new.resample('W').mean()\ndayly = data_new.resample('D').mean()\n\nfig, axs = plt.subplots(3,1) \n#hourly.Count.plot(figsize=(15,8), title= 'Hourly', fontsize=14, ax=axs[0]) \ndayly.case_count.plot(figsize=(15,8), title= 'Daily', fontsize=14, ax=axs[0]) \nweekly.case_count.plot(figsize=(15,8), title= 'Weekly', fontsize=14, ax=axs[1]) \nmonthly.case_count.plot(figsize=(15,8), title= 'Monthly', fontsize=14, ax=axs[2]) \nplt.show()","854fb638":"states = data['state'].unique()","0f2e6714":"f = plt.figure()\nf.set_size_inches(25,10)\ng = sns.barplot(y=\"case_count\", x= \"state\", data=data,  orient='v' , palette= sns.color_palette(\"muted\"), )\n\nplt.title('Count_Case state wise')\nplt.xlabel('state')\nplt.ylabel('caount_case')\n\nplt.show()","ad0e12d7":"branch_state = []\nfor state in states:\n    branch_state.append(data[data['state'] == state]['branch_id'].nunique())","cf8e2741":"f = plt.figure()\nf.set_size_inches(25,10)\ng = sns.barplot(y= branch_state, x= states)\n\nplt.title('branch_id state wise')\nplt.xlabel('state')\nplt.ylabel(' Number of branch_id')\n\nplt.show()","8bc4543c":"data['zone'].unique()","9a25f3c8":"for state in states:\n    print(state, \"occurs in \", data[data['state'] == state]['zone'].nunique(), \"zones\")","a42ba3a1":"## Analysing Count cases datewise","77033a64":"## Tamil nadu has highest applications","1a6d9680":"## Most of the data given is of year 2018","d3c2916c":"## branch_id 269 and 263 have no applications","c0e9ce8d":"## We have a total of 83 branch_id with each branch id only belonging to particular state","911ed1a5":"## Thus Orissa occurs in 2 zones rest occur in 1 zone","9fc34074":"# Analysis segment wise","24db1c70":"# Inferences\n## 1. Value of case_count is increasing every year.\n## 2. Some trend also observed in months, with 4, 5 having comparitevly less value\n## 3. Weekday 6 has less values i.e could be a holiday\n## 4. In the \"day_of_year\" column definite trend is observed. Middle of months having higher values -of case_count","d9d73500":" LTFS receives a lot of requests for its various finance offerings that include housing loan, two-wheeler loan, real estate financing and micro loans. The number of applications received is something that varies a lot with season. Going through these applications is a manual process and is tedious. Accurately forecasting the number of cases received can help with resource and manpower management resulting into quick response on applications and more efficient processing.\n\nYou have been appointed with the task of forecasting daily cases for next 3 months for 2 different business segments at the country level keeping in consideration the following major Indian festivals (inclusive but not exhaustive list): Diwali, Dussehra, Ganesh Chaturthi, Navratri, Holi etc. (You are free to use any publicly available open source external datasets). Some other examples could be:\n\nWeather\nMacroeconomic variables\n Note that the external dataset must belong to a reliable source.","5e8250cc":"# Analysis branch id","8f408f22":"## We have data from dates 2017-04-01 to 2019-07-23","cd75c1d1":"Data Dictionary\nThe train data has been provided in the following way:\n\nFor business segment 1, historical data has been made available at branch ID level\nFor business segment 2, historical data has been made available at State level.\n \n\nTrain File\nVariable\tDefinition\napplication_date\tDate of application\nsegment\tBusiness Segment (1\/2)\nbranch_id\tAnonymised id for branch at which application was received\nstate\tState in which application was received (Karnataka, MP etc.)\nzone\tZone of state in which application was received (Central, East etc.)\ncase_count\t(Target) Number of cases\/applications received\n \n\n**Test File\n Forecasting needs to be done at country level for the dates provided in test set for each segment.\n \nVariable\tDefinition\nid\tUnique id for each sample in test set\napplication_date\tDate of application\nsegment\tBusiness Segment (1\/2)**","2ee0df37":"### Regression task","2a986bea":"# Other data sets can also be merged, I have also attached the test data you can have a look !\n# Suggestions welcomed\n# Please upvote\n# THANKYOU ","3ae37c77":"## segment 1 has average value of 32.7 case_count while segment 2 has 942.3","44e3d732":"## Each state has unique set of branche_id (i.e branches)\n## Maharashtra has highest number of branches follwed by west bengal and Gujarat","9c8f6e10":"# Analysis state","9761001a":"## 83.2 % data has segment \"1\" and only 16.8% has segment 2","948c6a3b":"# Zone Analysis","bbbca891":"## Inference\n## 1. on daily case_count plot season is observed \n## 2. This season is more prominant on monthly weekly\n## 3. In the end i.e july 2019 there is sudden increase in case_count"}}