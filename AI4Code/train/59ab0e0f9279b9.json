{"cell_type":{"87949a97":"code","64249a80":"code","f90f4cb1":"code","8601e0eb":"code","85d27e55":"code","d84768e9":"code","1073acde":"code","974ab054":"code","839839ba":"code","d0374ef4":"code","96e72ee8":"code","a7ec0d91":"code","159bd273":"code","0c6a6ba3":"code","007e1629":"code","99bfb96e":"code","f70b76a0":"code","fea71e7d":"code","ee8c66e4":"code","3952a67e":"code","340ea484":"code","083fc45f":"code","a498cf4d":"code","49053125":"code","e5b4297d":"code","80926c36":"code","7ec39564":"code","5c6d2fe3":"code","ab0b6070":"code","988c624a":"code","c5ec2ac5":"code","b2c5d887":"code","1f4bb13e":"code","9b05fa66":"code","17d78ca3":"code","159d692d":"code","90e511a7":"code","3814cfc9":"code","839397b0":"code","284a249f":"code","61465910":"code","ae76a5f8":"code","2b5303c0":"code","3c231678":"markdown","f046cbc8":"markdown","f0dbb5f1":"markdown","07a9ae6e":"markdown","c4b36fb5":"markdown","035e8e2c":"markdown","41d22006":"markdown","5bc7500b":"markdown","74bb6455":"markdown","b4e95ea8":"markdown","cd43e63b":"markdown","30af276c":"markdown","c9ec0878":"markdown","d3b41f29":"markdown","1cbd56a4":"markdown","5ea06104":"markdown","129f9300":"markdown","c359dbb2":"markdown","bb1ca342":"markdown","c0a16839":"markdown","6390e46e":"markdown","7ba7ceb5":"markdown","d9ac6b1d":"markdown","620103a0":"markdown","ffda54ca":"markdown","34e7f9c9":"markdown","c82d3045":"markdown","946b90d0":"markdown","e32cd695":"markdown","420048f6":"markdown","59e87850":"markdown","c2745b5d":"markdown","9aa96e84":"markdown"},"source":{"87949a97":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","64249a80":"from tensorflow.keras.models import Sequential, load_model\n\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\n\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\n\nfrom tensorflow.keras.utils import to_categorical","f90f4cb1":"import cv2\nimport os\nimport glob\nimport gc\n\ndef lire_images(img_dir, xdim, ydim, nmax=5000) :\n    \"\"\" \n    Lit les images dans les sous r\u00e9pertoires de img_dir\n    nmax images lues dans chaque r\u00e9pertoire au maximum\n    Renvoie :\n    X : liste des images lues, matrices xdim*ydim\n    y : liste des labels num\u00e9riques\n    label : nombre de labels\n    label_names : liste des noms des r\u00e9pertoires lus\n    \"\"\"\n    label = 0\n    label_names = []\n    X = []\n    y=[]\n    for dirname in os.listdir(img_dir):\n        print(dirname)\n        label_names.append(dirname)\n        data_path = os.path.join(img_dir + \"\/\" + dirname,'*g')\n        files = glob.glob(data_path)\n        n=0\n        for f1 in files:\n            if n>nmax : break\n            img = cv2.imread(f1) # Lecture de l'image dans le repertoire\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Conversion couleur RGB\n            img = cv2.resize(img, (xdim,ydim)) # Redimensionnement de l'image\n            X.append(np.array(img)) # Conversion en tableau et ajout a la liste des images\n            y.append(label) # Ajout de l'etiquette de l'image a la liste des etiquettes\n            n=n+1\n        print(n,' images lues')\n        label = label+1\n    X = np.array(X)\n    y = np.array(y)\n    gc.collect() # R\u00e9cup\u00e9ration de m\u00e9moire\n    return X,y, label, label_names","8601e0eb":"X,y,Nombre_classes,Classes = lire_images(\"..\/input\/cat-and-dog\/training_set\/training_set\", 224, 224, 1000)","85d27e55":"Nombre_classes","d84768e9":"Classes","1073acde":"import random\nplt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    j = random.randint(0,len(X))\n    plt.axis('off')\n    plt.imshow(X[j])\n    plt.title(Classes[y[j]])","974ab054":"y = to_categorical(y)","839839ba":"y","d0374ef4":"X.shape","96e72ee8":"# Normalisation entre 0 et 1\nX = X \/ 255\nprint(X[0][0])","a7ec0d91":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","159bd273":"del X,y","0c6a6ba3":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(224, 224, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","007e1629":"model.summary()","99bfb96e":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, verbose=1)","f70b76a0":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","fea71e7d":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","ee8c66e4":"plot_scores(train)","3952a67e":"# Prediction\ny_cnn = model.predict_classes(X_test)","340ea484":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (Classes[y_cnn[j]], Classes[y_test[j].argmax(axis=-1)]))\n        i+=1","083fc45f":"# Mod\u00e8le CNN plus profond\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","a498cf4d":"model.summary()","49053125":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","e5b4297d":"plot_scores(train)","80926c36":"model.save('mnist_cnn2.h5')","7ec39564":"new_model = load_model('mnist_cnn2.h5')\nnew_model.summary()","5c6d2fe3":"scores = new_model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","ab0b6070":"from tensorflow.keras.applications import VGG16","988c624a":"vgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))\nvgg16.trainable = False","c5ec2ac5":"vgg16.summary()","b2c5d887":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","1f4bb13e":"model.summary()","9b05fa66":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, verbose=1)","17d78ca3":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","159d692d":"for i in range (len(vgg16.layers)):\n    print (i,vgg16.layers[i])","90e511a7":"for layer in vgg16.layers[15:]:\n    layer.trainable=True\nfor layer in vgg16.layers[0:15]:\n    layer.trainable=False","3814cfc9":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","839397b0":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, verbose=1)","284a249f":"plot_scores(train)","61465910":"y_cnn = model.predict_classes(X_test)","ae76a5f8":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (Classes[y_cnn[j]], Classes[y_test[j].argmax(axis=-1)]))\n        i+=1","2b5303c0":"from tensorflow.keras.applications import InceptionV3, ResNet50V2","3c231678":"On peut ensuite utiliser le mod\u00e8le sans recommencer l'entra\u00eenement :","f046cbc8":"## Lecture des images","f0dbb5f1":"## Transfer learning","07a9ae6e":"## Keras et Tensorflow","c4b36fb5":"Pour installer la version GPU sous windows, cf https:\/\/medium.com\/@raza.shahzad\/setting-up-tensorflow-gpu-keras-in-conda-on-windows-10-75d4fd498198  \nSous Linux : http:\/\/deeplearning.lipingyang.org\/2017\/08\/01\/install-keras-with-tensorflow-backend\/  \nSous MacOS (avec GPU Nvidia) : https:\/\/blog.wenhaolee.com\/run-keras-on-mac-os-with-gpu\/","035e8e2c":"On va utiliser un mod\u00e8le pr\u00e9d\u00e9fini dans Keras (VGG16) :","41d22006":"# R\u00e9seaux convolutionnels : CNN","5bc7500b":"On utilise le dataset *Cat and Dog* : https:\/\/www.kaggle.com\/tongpython\/cat-and-dog","74bb6455":"## Mod\u00e8le CNN plus profond","b4e95ea8":"On peut \"d\u00e9geler\" les derni\u00e8res couches :","cd43e63b":"On affiche des images al\u00e9atoirement :","30af276c":"On ajoute des couches pour entra\u00eener le mod\u00e8le \u00e0 partir du dataset, sans modifier les poids existants du VGG16 :","c9ec0878":"## Une couche convolutionnelle","d3b41f29":"On utilise les poids pr\u00e9-entra\u00een\u00e9s sur ImageNet (un million d'images)\nOn \"fige\" le r\u00e9seau VGG16, de mani\u00e8re \u00e0 ne pas refaire l'entra\u00eenement sur le dataset particulier","1cbd56a4":"Pour installer Keras et Tensorflow sans GPU :","5ea06104":"On va utiliser utiliser une couche convolutionnelle pour l'extraction des caract\u00e9ristiques, et une couche dense pour la classification :","129f9300":"## Initialisations","c359dbb2":"Le mod\u00e8le entrain\u00e9 peut \u00eatre sauvegard\u00e9 :","bb1ca342":"Fonction permettant de lire des images dans des sous-r\u00e9pertoires :","c0a16839":"On teste un mod\u00e8le avec deux couches convolutionnelles :","6390e46e":"L'apprentissage peut \u00eatre un peu long sans GPU ...","7ba7ceb5":"D\u00e9tection de pneumonie sur des radios :  \nhttps:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia  \n  \nD\u00e9tection de cellules infect\u00e9es par la malaria :  \nhttps:\/\/www.kaggle.com\/iarunava\/cell-images-for-detecting-malaria\n\nLes Simpsons  \nhttps:\/\/www.kaggle.com\/alexattia\/the-simpsons-characters-dataset","d9ac6b1d":"On d\u00e9finit une fonction pour afficher un graphique des scores :","620103a0":"Il existe plusieurs autres mod\u00e8les plus complexes :\nhttps:\/\/keras.io\/applications\/","ffda54ca":"## Exercices","34e7f9c9":"On peut afficher la structure du mod\u00e8le :","c82d3045":"On observe un fort surapprentissage : la pertinence sur l'ensemble d'apprentissage est \u00e0 100%, mais beaucoup moins bonne sur l'ensemble de test ...","946b90d0":"conda install -c conda-forge keras\nconda install -c conda-forge tensorflow ","e32cd695":"On affiche 50 images o\u00f9 l'algorithme s'est tromp\u00e9 :","420048f6":"On va lire toutes les images dans les sous r\u00e9pertoires du *training_set* :","59e87850":"Pour une installation locale :\npip install opencv-python\n","c2745b5d":"On \"binarise\" la cible :","9aa96e84":"On d\u00e9compose en ensemble d'apprentissage et de validation :"}}