{"cell_type":{"705457c2":"code","03f94dda":"code","0a8647a0":"code","9dc17a25":"code","03d4ee72":"code","2a4aec31":"code","1fca19d1":"code","2800ff71":"code","15d5add2":"code","e4a20ae5":"code","ffcdf73d":"code","271b4a8d":"code","124866ec":"code","b1f3156e":"code","54bc038d":"code","01595497":"code","fc36f6d4":"code","9c2c7c7f":"code","fb95c454":"code","8febd5e7":"code","f8587f4f":"code","966c99ef":"code","304fdeb6":"code","392b59f5":"code","38392ef2":"code","e3d5815c":"code","38babd88":"code","013a892f":"code","f11d81fd":"code","13f739e7":"code","194f1dec":"code","2ad1c018":"code","f0cf9e1b":"code","70a64f81":"code","4e5883dd":"code","39ffabad":"code","14cdcda9":"code","0f653cc8":"code","3b565b8c":"code","ec94461e":"code","48f951c9":"code","05388a87":"code","7238184e":"code","c5f02fa8":"code","c81a8307":"code","9b6bf871":"code","eedecbfa":"code","c27a38d1":"code","c2a8c659":"code","c3147838":"code","2a3b7ed3":"code","30c1ee56":"code","c9a59b70":"code","2db546d2":"markdown","ff130b78":"markdown","260e0623":"markdown","a59d10bf":"markdown","68b81749":"markdown","c684dbe4":"markdown","4a00d16f":"markdown","33cbf9eb":"markdown","d1761fce":"markdown","254a1c2a":"markdown","8a4d1528":"markdown","b793462c":"markdown","06b6ec10":"markdown","62037492":"markdown","efd823dd":"markdown","e833415e":"markdown","5b74962b":"markdown"},"source":{"705457c2":"from jt_mk_utils import *","03f94dda":"import os, sys, re, time\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom IPython.display import HTML, Image, display\nimport seaborn as sns\nfrom datetime import datetime","0a8647a0":"MK = 'Meta Kaggle'\ntitle = MK + ' Updates'\n\nplt.rc('figure', figsize=(15, 9))\nplt.rc('font', size=14)","9dc17a25":"ver = read_dataset_versions(index_col=0)\nver.shape","03d4ee72":"mk = ver.query(\"DatasetId==9\").sort_index()","2a4aec31":"mk.nunique()","1fca19d1":"mk[['Title', 'Slug', 'Subtitle', 'CreationDate', 'VersionNotes']].tail(1)","2800ff71":"users = read_users(filter=(\"Id\", mk.CreatorUserId)).set_index(\"Id\")\nusers.shape","15d5add2":"mk.TotalUncompressedBytes.value_counts()","e4a20ae5":"mk.TotalCompressedBytes.value_counts()","ffcdf73d":"mk.CreatorUserId.value_counts()","271b4a8d":"mk.CreatorUserId.value_counts().to_frame(MK + ' Updates').join(users).sort_index()","124866ec":"mk.plot.scatter('CreationDate', 'CreatorUserId', title=MK + ' CreatorUserId');","b1f3156e":"mk.CreationDate.plot(title=title);","54bc038d":"hour_of_day = mk.CreationDate.dt.hour + (mk.CreationDate.dt.minute \/ 60)\nmk = mk.assign(VersionCount=np.arange(len(mk))+1)\nmk = mk.assign(Time=hour_of_day)\nmk = mk.assign(TimeText=mk.CreationDate.dt.time)\nmk = mk.assign(DateText=mk.CreationDate.dt.strftime(\"%c\"))\nmk = mk.assign(HasVersionNotes=~mk.VersionNotes.isnull())","01595497":"mk.plot.scatter('CreationDate', 'Time', title=title);","fc36f6d4":"show = mk.fillna(\"<NA>\")","9c2c7c7f":"px.scatter(show,\n           'CreationDate',\n           'Time',\n           color='HasVersionNotes',\n           hover_data=[\n               'VersionNumber',\n               'VersionCount',\n               'DateText',\n               'VersionNotes',\n               'DatasourceVersionId',\n           ],\n           title=title)","fb95c454":"gaps = mk.CreationDate.diff().dropna()","8febd5e7":"one_day = 24 * 60 * 60 * 1e9","f8587f4f":"gaps_days = (gaps.astype(int) \/ one_day)","966c99ef":"gaps_days[gaps_days <= 2].plot(title=MK + ': Days Between Versions');","304fdeb6":"subset = gaps_days[gaps_days <= 3.5]\nplt.scatter(subset[:-1], subset[1:], c=range(len(subset[1:])))\nplt.xlabel(\"Gap\")\nplt.ylabel(\"Next Gap\")\nplt.title(MK + ' Recurrence Plot');","392b59f5":"sources = read_kernel_version_dataset_sources(filter=(\"SourceDatasetVersionId\", mk.index))\nsources.shape","38392ef2":"use = [\n    'Id', 'ScriptId', 'ParentScriptVersionId', 'ScriptLanguageId',\n    'AuthorUserId', 'CreationDate', 'VersionNumber', 'Title'\n]\nver = read_kernel_versions(filter=(\"Id\", sources.KernelVersionId), usecols=use).set_index(\"Id\")\nver.shape","e3d5815c":"# Data Issue: Some Titles in KernelVersions.csv are NaN\ntitles = ver.groupby('ScriptId').Title.fillna(method='ffill')\nver.loc[ver.Title.isna(), 'Title'] = titles","38babd88":"kernels = read_kernels(filter=(\"Id\", ver.ScriptId)).set_index(\"Id\")\nkernels.shape","013a892f":"UIDS = {v for v in kernels.AuthorUserId if v not in {859104}}\nusers = read_users(filter=(\"Id\", UIDS)).set_index(\"Id\")\nusers.shape","f11d81fd":"kernels.Medal.value_counts(dropna=False)","13f739e7":"votes = read_kernel_votes().set_index(\"Id\").sort_index()\nvotes.shape","194f1dec":"votes = votes.join(ver[['ScriptId']], on='KernelVersionId', how='inner')","2ad1c018":"gb = votes.groupby('VoteDate')\ncounts = gb.VoteDate.transform('count')\ninterpolated_time_of_day = (gb.cumcount() \/ counts) * pd.Timedelta(1, 'd')\nvotes['VoteDateTime'] = votes['VoteDate'] + interpolated_time_of_day\nvotes['DateText'] = votes.VoteDate.dt.strftime(\"%c\")\nvotes['VoteCount'] = votes.groupby(\"ScriptId\").cumcount() + 1","f0cf9e1b":"votes.shape","70a64f81":"N = 10\nvc = votes.ScriptId.value_counts().head(N)\nvcn = votes.ScriptId.value_counts(normalize=True).head(N)","4e5883dd":"BC = '#c0c0c0'\npd.concat((vc.to_frame(\"Votes\"),\n           vcn.to_frame(\"Proportion\"),\n           vcn.cumsum().to_frame(\"Cumulative\")), 1).style.bar(subset=['Votes'], color=BC, width=85)","39ffabad":"NOW = datetime.now()\nSHOW = ['TotalVotes', 'TotalViews', 'ViewsPerVote', 'Age', 'DisplayNameLink', 'TitleLink']\n\ndef user_name_link(r):\n    return (f'<a href=\"https:\/\/www.kaggle.com\/{r.UserName}\" '\n            f' title=\"Tier: {r.PerformanceTier}\\n'\n            f'RegisterDate: {r.RegisterDate}\\n'\n            f'UID: {r.AuthorUserId}\">'\n            f'{r.DisplayName}<\/a>')\n\ndef notebook_link(r):\n    return (f'<a href=\"https:\/\/www.kaggle.com\/{r.UserName}\/{r.CurrentUrlSlug}\" '\n            f' title=\"VersionNumber: {r.VersionNumber}\\n'\n            f'TotalViews: {r.TotalViews}\\n'\n            f'TotalComments: {r.TotalComments}\\n'\n            f'CreationDate: {r.CreationDate}\\n'\n            f'MedalAwardDate: {r.MedalAwardDate}\">'\n            f'{r.Title}<\/a>')\n\ndef fmt_df(df):\n    df = df.join(users, on=\"AuthorUserId\")\n    df = df.join(ver.drop(['AuthorUserId', 'CreationDate', 'ScriptId'], 1), on=\"CurrentKernelVersionId\")\n    df = df.dropna(subset=['UserName', 'Title'])\n    \n    counts = df.groupby(\"Title\").cumcount()\n    idx = counts>0\n    df.loc[idx, \"Title\"] = df.loc[idx, \"Title\"] + counts.apply(lambda s: f\" ({s+1})\")\n    \n    df['ViewsPerVote'] = (df['TotalViews'] \/ df['TotalVotes']).astype(int)\n    df['DisplayNameLink'] = df.apply(user_name_link, 1)\n    df['TitleLink'] = df.apply(notebook_link, 1)\n    df[\"Age\"] = (NOW - df.CreationDate).dt.days\n    return df\n\ndef show_df(df):\n    return df[SHOW].set_index('TitleLink').style.bar(color=BC, width=85)","14cdcda9":"TYPE, BC = \"Gold\", \"#c9b037\"\nsubset = fmt_df(kernels.query(\"Medal==1\"))\nsubset.shape","0f653cc8":"show_df(subset)","3b565b8c":"show_df(subset.tail(-2))","ec94461e":"votes_df = votes.join(subset, on='ScriptId', how='inner')\nvotes_df.shape","48f951c9":"px.line(votes_df,\n        'VoteDateTime',\n        'VoteCount',\n        hover_name='Title',\n        hover_data=['DisplayName', 'UserName', 'DateText'],\n        line_group='ScriptId',\n        color='ScriptId',\n        title=f'{MK} {TYPE} Notebooks')","05388a87":"TYPE, BC = \"Silver\", \"#b4b4b4\"\nsubset = fmt_df(kernels.query(\"Medal==2\"))\nsubset.shape","7238184e":"show_df(subset)","c5f02fa8":"votes_df = votes.join(subset, on='ScriptId', how='inner')\nvotes_df.shape","c81a8307":"px.line(votes_df,\n        'VoteDateTime',\n        'VoteCount',\n        hover_name='Title',\n        hover_data=['DisplayName', 'UserName', 'DateText'],\n        line_group='ScriptId',\n        color='ScriptId',\n        title=f'{MK} {TYPE} Notebooks')","9b6bf871":"TYPE, BC = \"Bronze\", \"#ad8a56\"\nsubset = fmt_df(kernels.query(\"Medal==3\"))\nsubset.shape","eedecbfa":"show_df(subset)","c27a38d1":"votes_df = votes.join(subset, on='ScriptId', how='inner')\nvotes_df.shape","c2a8c659":"px.line(votes_df,\n        'VoteDateTime',\n        'VoteCount',\n        hover_name='Title',\n        hover_data=['DisplayName', 'UserName', 'DateText'],\n        line_group='ScriptId',\n        color='ScriptId',\n        title=f'{MK} {TYPE} Notebooks')","c3147838":"TYPE, BC = \"Closest to gaining a medal\", \"#4fc3f7\"\nsubset = fmt_df(kernels[kernels.Medal.isnull()].sort_values(\"TotalVotes\", ascending=False).head(100).sort_index())\nsubset.shape","2a3b7ed3":"show_df(subset)","30c1ee56":"votes_df = votes.join(subset, on='ScriptId', how='inner')\nvotes_df.shape","c9a59b70":"px.line(votes_df,\n        'VoteDateTime',\n        'VoteCount',\n        hover_name='Title',\n        hover_data=['DisplayName', 'UserName', 'DateText'],\n        line_group='ScriptId',\n        color='ScriptId',\n        title=f'{MK} {TYPE} Notebooks')","2db546d2":"# Notebooks","ff130b78":"# Updates Over Time\n\nFrom mid 2018 updates became daily","260e0623":"# Silver Notebooks \ud83e\udd48","a59d10bf":"# Bronze Notebooks \ud83e\udd49\n","68b81749":"# Conclusions\n\nWell, [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) updates are no longer as regular as they used to be and look somewhat chaotic but I hope they continue!\n\nWhy the title ***[[Meta Kaggle] Meta Kaggle] Meta Kaggle*** ?\n\nThere's a loose convention of putting the dataset or competition in the Notebook title in \\[brackets\\] to give some context if the Notebook appears in the global listings, and the subject of this Notebook is [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) itself, so it should be ***[Meta Kaggle] Meta Kaggle***.\n\nBut this Notebook also inspects the Notebooks with medals listed in [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle).\nIf this Notebook eventually receives a medal (this is entirely up to ***YOU***) it will appear ***in itself***, hence  ***[[Meta Kaggle] Meta Kaggle] Meta Kaggle*** !","c684dbe4":"# Recurrence Plot\n\nhttps:\/\/en.wikipedia.org\/wiki\/Recurrence_plot","4a00d16f":"Do that again because the (unsurpassable?) top two skew things","33cbf9eb":"# [[Meta Kaggle] Meta Kaggle] Meta Kaggle\n\n[Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) has been around a while now: let's use [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) to *introspect itself!*\n\n## Background: Meta Kaggle\n\nQuoting from the [Meta Kaggle Dataset page](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle):\n\n__________\n\n<div style=\"background:#4fc3f7; padding: 2em;\"><h2>Explore our public data on competitions, datasets, kernels and more<\/h2>\n<p>Meta Kaggle may not be the Rosetta Stone of data science, but we do think there's a lot to learn (and plenty of fun to be had) from this collection of rich data about Kaggle\u2019s community and activity.  <\/p>\n<p>Strategizing to become a Competitions Grandmaster? Wondering who, where, and what goes into a winning team? Choosing evaluation metrics for your next data science project? The kernels published using this data can help. We also hope they'll spark some lively Kaggler conversations and be a useful resource for the larger data science community.  <\/p>\n<p><img alt=\"Kaggle Leaderboard Performance\" src=\"https:\/\/imgur.com\/2Egeb8R.png\"><\/p>\n<p>This dataset is made available as CSV files through Kaggle Kernels. It contains tables on public activity from Competitions, Datasets, Kernels, Discussions, and more. The tables are updated daily.  <\/p>\n<p>Please note: This data is not a complete dump of our database. Rows, columns, and tables have been filtered out and transformed.<\/p><\/div>\n\n__________\n\n\n## Contents\n\n * [Dataset Size](#Dataset-Size)\n * [CreatorUserId](#CreatorUserId)\n * [Updates Over Time](#Updates-Over-Time)\n * [Time of Day for Updates](#Time-of-Day-for-Updates)\n * [Time Gaps](#Time-Gaps)\n * [Recurrence Plot](#Recurrence-Plot)\n * [Predicting Dates of Future Updates](#Predicting-Dates-of-Future-Updates)\n * [Notebooks](#Notebooks)\n * [Gold Notebooks \ud83e\udd47](#Gold-Notebooks-\ud83e\udd47)\n * [Silver Notebooks \ud83e\udd48](#Silver-Notebooks-\ud83e\udd48)\n * [Bronze Notebooks \ud83e\udd49](#Bronze-Notebooks-\ud83e\udd49)\n * [Further Notebooks](#Further-Notebooks)\n * [Conclusions](#Conclusions)\n","d1761fce":"### Power Law? The top TWO Notebooks have over 40% of the total Notebook votes of the whole dataset","254a1c2a":"# Further Notebooks","8a4d1528":"***2018***\nUpdates become daily\n\n***2019***\nThe system was clearly changed on 17 December 2019, the update times changed and VersionNotes were added\n\n***2020***\nIt looks like it takes longer & longer to create the dataset, the CreationDate drifts later & later in the day.\n\n***2021***\nSomething exploded on 4 March? The curve dies off then the pattern changes completely!\n\n - August: KernelVersionOutputFiles.csv has been removed and it seems reliable daily updates are back!\n","b793462c":"# Dataset Size\n\nIt looks like TotalUncompressedBytes is always zero","06b6ec10":"# CreatorUserId\n\nThe automated updates are by kaggleteam and two regular users appear to make occasional manual versions","62037492":"# Time Gaps","efd823dd":"# Gold Notebooks \ud83e\udd47\n","e833415e":"# Time of Day for Updates\n\n","5b74962b":"# Predicting Dates of Future Updates\n\n    TODO *\n\n\n\n<div align=right><sub>*(not really!)<\/sub><\/div>\n"}}