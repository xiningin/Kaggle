{"cell_type":{"b828ac9b":"code","47bbdc0f":"code","96e105fc":"code","345072b5":"code","239517c7":"code","8e45b029":"code","150a6b2e":"code","6317eeb5":"code","0d8c488d":"code","e18ab31d":"code","1c3edc30":"code","5883e794":"code","92ede6ab":"markdown","be85a801":"markdown","0528e813":"markdown","a6ef62b8":"markdown","67a04cdd":"markdown","81029c46":"markdown","fc82bcb4":"markdown","0949be47":"markdown","85d20ad7":"markdown","58d113ce":"markdown","097d3e8c":"markdown","685f4d31":"markdown","4fe890f7":"markdown","783928d8":"markdown"},"source":{"b828ac9b":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline","47bbdc0f":"df = pd.read_csv('..\/input\/random-salary-data-of-employes-age-wise\/Salary_Data.csv')\ndf.head()","96e105fc":"X = df[['YearsExperience']]\nY = df[['Salary']]","345072b5":"plt.scatter(X, Y, color = 'blue')\nplt.xlabel('YearExperience')\nplt.ylabel('Salary')\nplt.show()","239517c7":"reg = linear_model.LinearRegression()\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.25, random_state = 0)\nreg.fit(X_train,Y_train)\nY_pred = reg.predict(X_test)\nprint('Coefficients: ', reg.coef_)\nprint('Intercept: ', reg.intercept_)","8e45b029":"plt.scatter(X_train, Y_train, color = 'blue')\nplt.plot(X_train, reg.coef_*X_train + reg.intercept_, '-r')\nplt.xlabel('YearExperience')\nplt.ylabel('Salary')\nplt.show()","150a6b2e":"plt.scatter(X_test, Y_test, color = 'blue')\nplt.plot(X_test, Y_pred, '-r')\nplt.xlabel('YearExperience')\nplt.ylabel('Salary')\nplt.show()","6317eeb5":"results = pd.DataFrame({\n    'Actual': np.array(Y_test).flatten(),\n    'Predicted': np.array(Y_pred.round(decimals = 2)).flatten(),\n})\n\n#results = pd.DataFrame(results)\nresults","0d8c488d":"from sklearn.metrics import r2_score\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(Y_pred - Y_test)))\nprint(\"Mean square error: %.2f\" %np.mean((Y_pred - Y_test))**2)\nprint(\"R2-score: %.2f\" % r2_score(Y_pred , Y_test))","e18ab31d":"results= results.astype('float')\ndf1 = results.head(8)\ndf1.plot(kind='bar',figsize=(10,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","1c3edc30":"example = np.array([[1.2],[2.3]])\nexample = example.reshape(2,-1)\nprediction = reg.predict(example)\nprediction","5883e794":"import random as rd\nreg = linear_model.LinearRegression()\ni = rd.sample(range(50),10)\nx,a,b = [],[],[]\nfor e in i:\n    X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.25, random_state = e)\n    reg.fit(X_train,Y_train)\n    Y_pred = reg.predict(X_test)\n    x.append(e)\n    a.append(reg.coef_.round(decimals = 2))\n    b.append(reg.intercept_.round(decimals = 2))\n    rand_check = pd.DataFrame({\n        'random_state': np.array(x).flatten(),\n        'Coefficients': np.array(a).flatten(),\n        'Intercept': np.array(b).flatten(),\n    })\nrand_check","92ede6ab":"### Basic Error\/ Accuracy checking methods ","be85a801":"<p><B>Mean absolute error:<\/B> It is the mean of the absolute value of the errors. This is the easiest of the metrics to understand since it\u2019s just average error.<br>\n<B>Mean Squared Error (MSE):<\/B> MSE is the mean of the squared error. It\u2019s more popular than Mean absolute error because the focus is geared more towards large errors. This is due to the squared term exponentially increasing larger errors in comparison to smaller ones.<br>\n<B>Root Mean Squared Error (RMSE):<\/B> R-squared is not error, but is a popular metric for accuracy of your model. It represents how close the data are to the fitted regression line. <B>The higher the R-squared, the better the model fits your data. Best possible score is 1.0 and it can be negative<\/B> (because the model can be arbitrarily worse).<\/p>","0528e813":"Please do upvote and comment to let me know about my work. Always ready to get some new tips and guidance. :)","a6ef62b8":"### Checking the values of Coefficients and Intercept based on different random_state ","67a04cdd":"Since we already know that with different random_states we get different values and predictions. So, lets test this how our intercept and coefficients are differing for different values of random_state. ","81029c46":"### Selecting feature and label ","fc82bcb4":"#### Plotting the training data","0949be47":"### Reading data ","85d20ad7":"### Creating train and test dataset","58d113ce":"### Visualizing Actual and Predicted values ","097d3e8c":"Ploting feature i.e., our independent data(X) and label i.e., our dependent data(Y)","685f4d31":"### Predicting with out of sample data ","4fe890f7":"#### Plotting the testing data","783928d8":"### Displaying Actual and Predicted values"}}