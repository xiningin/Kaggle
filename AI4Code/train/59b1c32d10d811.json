{"cell_type":{"e0816cfb":"code","0e2203b1":"code","c865f49e":"code","63281bc8":"code","8ea06e6d":"code","ddea07e8":"code","dac86e73":"code","b44d924f":"code","2196e0e2":"code","9aeaa7a8":"code","34bf07b7":"code","55488f1f":"code","b39735ce":"code","8400b5d6":"code","57f512f0":"code","ba5ee2fc":"code","81408c93":"code","41264fb7":"code","f8e95a9f":"code","b642fc39":"code","f3e4c506":"code","dbb4e83b":"code","f9890eeb":"code","ea05de11":"code","ff6aadbe":"code","7b67c26c":"code","5c886e21":"code","bb992628":"code","302b09c3":"code","26641483":"code","65f531d3":"code","ba01f42e":"code","af33db4c":"code","b3d61802":"code","750612ab":"code","573090a8":"code","0beb2ef3":"code","6fa01b54":"code","aafd70bc":"code","1298feb8":"code","93e57fa5":"code","03d59ab4":"code","c8020390":"code","8481688c":"code","c8359f5c":"code","f8004b0b":"code","bd7483c0":"code","27f2cf1c":"code","8c9fdf73":"code","094f9958":"code","37f1780d":"code","285c2a2a":"code","e665b7e6":"code","4f3f3d00":"code","9e5b61eb":"code","ef91f7e5":"code","9e2dedc8":"code","4b568d2c":"code","09030081":"code","024c69d8":"code","db644417":"markdown","c619805b":"markdown","f1f8f9e7":"markdown","d0e81ce1":"markdown","71243cc7":"markdown","bcde3738":"markdown","36815e1d":"markdown","bca43a78":"markdown","be9b8e48":"markdown","9a9ef4a0":"markdown","39870f97":"markdown","64c6bdbc":"markdown","42d9d540":"markdown","fbf91cf1":"markdown","ccd012ea":"markdown"},"source":{"e0816cfb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","0e2203b1":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c865f49e":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf1 = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","63281bc8":"df.head()","8ea06e6d":"df1.head()","ddea07e8":"dfy = df.Survived\n\ndf.drop(['PassengerId','Survived','Name','Ticket','Cabin'],axis=1,inplace=True)\ndf1.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)","dac86e73":"df.head()","b44d924f":"df1.head()","2196e0e2":"print('shape of training set : ',df.shape)\nprint('shape of testing set : ',df1.shape)","9aeaa7a8":"df.info()","34bf07b7":"df1.info()","55488f1f":"df.describe()","b39735ce":"df1.describe()","8400b5d6":"column_df = df.columns\n\nfor x in column_df:\n    print('unique value information : ',x)\n    # print(df[x].unique())\n    print('number of unique value : ',df[x].unique().shape[0])\n    print('number of null (True if value is NaN) : \\n',df[x].isnull().value_counts())\n    print('\\n','-------------------------------------------------------------------------------','\\n')","57f512f0":"column_df1 = df1.columns\n\nfor x in column_df1:\n    print('unique value information : ',x)\n    # print(df1[x].unique())\n    print('number of unique value : ',df1[x].unique().shape[0])\n    print('number of null (True if value is NaN) : \\n',df1[x].isnull().value_counts())\n    print('\\n','-------------------------------------------------------------------------------','\\n')","ba5ee2fc":"df.Age.isnull().value_counts()","81408c93":"df.Age.fillna(df.Age.mean(),inplace=True)","41264fb7":"df.Age.isnull().value_counts()","f8e95a9f":"df1.Age.isnull().value_counts()","b642fc39":"df1.Age.fillna(df1.Age.mean(),inplace=True)","f3e4c506":"df1.Age.isnull().value_counts()","dbb4e83b":"df.Embarked.isnull().value_counts()","f9890eeb":"df.Embarked.value_counts()","ea05de11":"df.Embarked.fillna('S',inplace=True)","ff6aadbe":"df.Embarked.isnull().value_counts()","7b67c26c":"df1.Fare.isnull().value_counts()","5c886e21":"df1.Fare.fillna(df1.Fare.mean(),inplace=True)","bb992628":"df1.Fare.isnull().value_counts()","302b09c3":"df.info()","26641483":"df1.info()","65f531d3":"from sklearn.preprocessing import LabelEncoder","ba01f42e":"le = LabelEncoder()\n\nle.fit(df.Sex)\nSex_labeled = le.transform(df.Sex)\ndf['Sex_labeled'] = Sex_labeled\ndf.drop(['Sex'],axis=1,inplace=True)\n\nle.fit(df1.Sex)\nSex_labeled = le.transform(df1.Sex)\ndf1['Sex_labeled'] = Sex_labeled\ndf1.drop(['Sex'],axis=1,inplace=True)\n\nle.fit(df.Embarked)\nEmbarked_labeled = le.transform(df.Embarked)\ndf['Embarked_labeled'] = Embarked_labeled\ndf.drop(['Embarked'],axis=1,inplace=True)\n\nle.fit(df1.Embarked)\nEmbarked_labeled = le.transform(df1.Embarked)\ndf1['Embarked_labeled'] = Embarked_labeled\ndf1.drop(['Embarked'],axis=1,inplace=True)","af33db4c":"df.head()","b3d61802":"df1.head()","750612ab":"df.info()","573090a8":"df1.info()","0beb2ef3":"#x = np.array(df)\n#x1 = np.array(df1)\n#y = np.array(dfy)","6fa01b54":"#from sklearn.preprocessing import StandardScaler\n\n#scaler = StandardScaler()\n\n#x = scaler.fit_transform(x)\n#x1 = scaler.fit_transform(x1)","aafd70bc":"from sklearn.model_selection import train_test_split as tts","1298feb8":"x_train, x_test, y_train, y_test = tts(df,dfy,test_size = 0.2)","93e57fa5":"print('shape of train and test set : ')\nprint('x_train : ',x_train.shape)\nprint('x_test : ',x_test.shape)\nprint('y_train : ',y_train.shape)\nprint('y_test : ',y_test.shape)","03d59ab4":"from sklearn.ensemble import RandomForestClassifier as RFC\nfrom sklearn.metrics import roc_auc_score","c8020390":"model_rfc = RFC(max_depth=10,n_estimators=50,random_state=2)\nmodel_rfc.fit(x_train,y_train)","8481688c":"model_rfc.score(x_test,y_test)","c8359f5c":"y_pred_rfc = model_rfc.predict(df1)\n\n#roc_auc_score(y_test,y_pred)\n","f8004b0b":"from sklearn.svm import SVC","bd7483c0":"model_svm = SVC(C=10)\nmodel_svm.fit(df,dfy)","27f2cf1c":"model_svm.score(x_test,y_test)","8c9fdf73":"y_pred = model_svm.predict(df1)\n\n#roc_auc_score(y_test,y_pred)","094f9958":"from sklearn.ensemble import BaggingClassifier\n\nmodel_bag = BaggingClassifier()\nmodel_bag.fit(df,dfy)\n\nmodel_bag.score(x_test,y_test)\n\n\n","37f1780d":"y_pred_bag = model_bag.predict(df1)","285c2a2a":"# creat model\n\nmodel = keras.Sequential()\nmodel.add(layers.Dense(12, activation=\"relu\", input_shape=(7,)))\nmodel.add(layers.Dense(7, activation=\"relu\")),\nmodel.add(layers.Dense(1,activation=\"sigmoid\"))\n\nmodel.summary()","e665b7e6":"# fit and compile model\n\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[keras.metrics.AUC()])\n\nhistory= model.fit(df,dfy,batch_size=32,epochs=100,validation_data=(x_test,y_test))\n\n\n","4f3f3d00":"plt.figure()\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])","9e5b61eb":"y_pred_nn = model.predict_classes(df1)\n\n#roc_auc_score(y_test,y_pred)","ef91f7e5":"from sklearn.linear_model import LogisticRegression as LGR\n\nmodel_lgr = LGR()\nmodel_lgr.fit(df,dfy)\ny_pred_lgr = model_lgr.predict(x_test)\n\nroc_auc_score(y_test,y_pred_lgr)","9e2dedc8":"y_pred_lgr= model_lgr.predict(df1)\ny_pred_lgr","4b568d2c":"Survived = np.squeeze(y_pred_bag)\n","09030081":"PassengerId = np.arange(892,1310)\n\nans = pd.DataFrame(list(zip(PassengerId,Survived)),columns=['PassengerId','Survived'])\nans.head()","024c69d8":"\nans.to_csv(\"final_ans.csv\",index=False)\n","db644417":"####  missing value problem solved!!","c619805b":"#  \n\n\n\n## Train test split of df","f1f8f9e7":"#  \n\n\n\n## creat submission file","d0e81ce1":"### labeling of column which contain catagorical data in object data type ('Sex' and 'Embarked')","71243cc7":"#   \n\n\n\n## SVM classifier","bcde3738":"# normalizing data","36815e1d":"#   \n\n\n\n\n\n# solve by ANN\n\n\n","bca43a78":"# Bagging Classifier","be9b8e48":"#### Fare in df1 has 1 missing valued , replace it by mean of that column","9a9ef4a0":"### Created By :- Faldu jay\n#### Email :- jay.faldu928@gmail.com\n\n\n# ----------------------------------------------------------","39870f97":"# logistic Regression","64c6bdbc":"#  \n\n\n\n## Random Forest model","42d9d540":"#### Embarked in df has 2 missing valued , replace it by mode of that column","fbf91cf1":"#  \n\n\n\n\n### Replace NaN value with mean value","ccd012ea":"#### Age in df and df1"}}