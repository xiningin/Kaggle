{"cell_type":{"8fa435a3":"code","04ad8166":"code","e807ccbf":"code","44f5bb1e":"code","0afb988b":"code","c9be7a3b":"code","8e66470a":"code","9c9525ff":"code","3e79fe06":"code","59a40d09":"code","3ca3b519":"code","7ad27cb0":"code","fca219e7":"code","0dc40cbb":"code","e5abb991":"code","39ebcabe":"code","d779b33d":"code","b21f6e9a":"code","1273dd65":"code","642a1b79":"code","4c4a62e0":"code","60c1dc2b":"code","98465a2c":"code","284c01e4":"code","10e7dd23":"code","8fe0b44e":"code","8c978a01":"code","f0231735":"code","93754a8e":"code","d202e2c9":"code","3f446e6e":"code","79e7aac6":"code","ac60b550":"markdown","71d5f6c8":"markdown","0e6ae703":"markdown","b4e03247":"markdown"},"source":{"8fa435a3":"import pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\nimport random\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error","04ad8166":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","e807ccbf":"df_country = pd.read_csv(\"..\/input\/country_info.csv\")\ndf_country = df_country.replace(\",\", \".\", regex=True)\n\nn = 0\nfor i in df_country.columns:\n    if n >= 2:\n        df_country[i] = df_country[i].astype(float)\n    n = n + 1\n\ndf_train = pd.merge(df_train, df_country, on= 'Country', how='left')\ndf_test = pd.merge(df_test, df_country, on='Country', how='left')","44f5bb1e":"rawcolumns = df_train.columns","0afb988b":"#for i in df_train.columns:\n#    if df_train[i].dtype == \"object\":\n#        continue\n#    plt.figure(figsize=[7,7])\n#    plt.hist(df_train[i], bins=50, color='r', label='train', alpha=0.5, density=True)\n#    if i in df_test.columns:\n#        plt.hist(df_test[i], bins=50, color='b', label='test', alpha=0.5, density=True)\n#    plt.savefig(\"hist\/\"+ i + \".png\") \n#    plt.close()","c9be7a3b":"kf = KFold(n_splits=4, random_state=71, shuffle=True)\ndf_train[\"fold\"] = range(0, len(df_train))\nsplit = kf.split(df_train)\nn=0\nfor i, j in split:\n    df_train[\"fold\"].iloc[j] = n\n    n = n + 1","8e66470a":"columns_hasnull = []\nfor col in rawcolumns:\n    if df_train[col].isnull().sum() > 0:\n        columns_hasnull.append(col)","9c9525ff":"def MissingColumns(train, test, columns):\n    trainout = train.copy()\n    testout = test.copy()\n    for col in columns:\n        name = col + \"_Miss\"\n        trainout[name] = list(train[col].isnull())\n        trainout = trainout.drop(col,axis=1)\n        testout[name] = list(testout[col].isnull())\n        testout = testout.drop(col, axis=1)\n    return trainout, testout","3e79fe06":"train_Miss, test_Miss = MissingColumns(df_train[columns_hasnull], df_test[columns_hasnull], columns_hasnull)","59a40d09":"for i in columns_hasnull:\n    if df_train[i].dtype == \"float64\":\n        df_train[i].fillna(df_train[i].median(), inplace=True)\n        df_test[i].fillna(df_train[i].median(), inplace=True)\n    if df_train[i].dtype == \"object\":\n        df_train[i].fillna(\"Kuhaku\", inplace=True)\n        df_test[i].fillna(\"Kuhaku\", inplace=True)","3ca3b519":"#df_train = df_train.join(train_Miss)\n#df_test = df_test.join(test_Miss)","7ad27cb0":"textlist = [\n    \"DevType\",\n    \"CommunicationTools\",\n    \"FrameworkWorkedWith\"\n]","fca219e7":"devtype = []\nfor i in list(df_train[\"DevType\"]):\n    devtype.extend(i.split(\";\"))\nfor i in set(devtype):\n    test = []\n    for j in df_train[\"DevType\"]:\n        if j.find(i) >= 0:\n            test.append(1)\n        else:\n            test.append(0)\n    test2 = []\n    for j in df_test[\"DevType\"]:\n        if j.find(i) >= 0:\n            test2.append(1)\n        else:\n            test2.append(0)\n    df_train[i] = test\n    df_test[i] = test2","0dc40cbb":"comtype = []\nfor i in list(df_train[\"CommunicationTools\"]):\n    comtype.extend(i.split(\";\"))\nfor i in set(comtype):\n    test = []\n    for j in df_train[\"CommunicationTools\"]:\n        if j.find(i) >= 0:\n            test.append(1)\n        else:\n            test.append(0)\n    test2=[]\n    for j in df_test[\"CommunicationTools\"]:\n        if j.find(i) >= 0:\n            test2.append(1)\n        else:\n            test2.append(0)\n    df_train[i] = test\n    df_test[i] = test2","e5abb991":"fm = []\nfor i in list(df_train[\"FrameworkWorkedWith\"]):\n    fm.extend(i.split(\";\"))\nfor i in set(fm):\n    test = []\n    for j in df_train[\"FrameworkWorkedWith\"]:\n        if j.find(i) >= 0:\n            test.append(1)\n        else:\n            test.append(0)\n    test2 = []\n    for j in df_test[\"FrameworkWorkedWith\"]:\n        if j.find(i) >= 0:\n            test2.append(1)\n        else:\n            test2.append(0)\n    df_train[i] = test\n    df_test[i] = test2","39ebcabe":"col_cate = []\nfor i in rawcolumns:\n    if df_train[i].dtype == \"object\":\n        if i in textlist:\n            continue\n        col_cate.append(i)","d779b33d":"def TargetEncoder(traindf, testdf, category, target):\n    trainout = pd.DataFrame()\n    testout = pd.DataFrame()\n    for col in category:\n        trainout_temp = pd.DataFrame()\n        testout_temp = pd.DataFrame()\n        n= 0\n        name = col + \"_TargetEncoder\"\n        # training\n        for i in set(traindf[\"fold\"]):\n            label_mean = traindf[traindf[\"fold\"] != i].groupby(col)[target].mean()\n            if n == 0:\n                trainout_temp = traindf[traindf[\"fold\"] == i][col].map(label_mean)\n            else:\n                trainout_temp = trainout_temp.append(traindf[traindf[\"fold\"] == i][col].map(label_mean))\n            n = n + 1\n        trainout[name] = trainout_temp\n        trainout[name].fillna(trainout[name].median(), inplace=True)\n        \n        # test\n        label_mean = traindf.groupby(col)[target].mean()\n        testout[name] = testdf[col].map(label_mean)\n        testout[name].fillna(trainout[name].median(), inplace=True)\n    return trainout, testout\n\ndef CountEncoder(traindf, testdf, category):\n    trainout = pd.DataFrame()\n    testout = pd.DataFrame()\n    for val in category:\n        newname = val + \"_CountEncoder\"\n        count = traindf.groupby(val)[val].count()\n        trainout[newname] = traindf.groupby(val)[val].transform('count')\n        testout[newname] = traindf.groupby(val)[val].transform('count')\n        trainout[newname].fillna(trainout[newname].median(), inplace=True)\n        testout[newname].fillna(trainout[newname].median(), inplace=True)\n    return trainout, testout","b21f6e9a":"train_TE, test_TE = TargetEncoder(df_train, df_test, col_cate, \"ConvertedSalary\")","1273dd65":"#train_CE, test_CE = CountEncoder(df_train, df_test, textlist)","642a1b79":"df_train = df_train.join([train_TE])\ndf_test = df_test.join([train_TE])","4c4a62e0":"dellist = col_cate\ndellist.extend(textlist)\n#dellist.append(\"ConvertedSalary\")","60c1dc2b":"X_train = df_train.drop(dellist, axis = 1).drop(\"fold\", axis = 1)\ny_train = df_train.ConvertedSalary\nX_train = X_train.drop(\"ConvertedSalary\", axis=1)\nX_test = df_test.drop(dellist, axis = 1)","98465a2c":"y_pred_test = np.zeros(len(X_test))\nscores = []\nfor i, (train_ix, test_ix) in enumerate(kf.split(X_train, y_train)):\n    X_tr, y_tr = X_train.values[train_ix], y_train.values[train_ix]\n    X_te, y_te = X_train.values[test_ix], y_train.values[test_ix]\n    \n    clf = LGBMRegressor(\n        learning_rate = 0.05,\n        num_leaves=31,\n        colsample_bytree=0.9,\n        subsample=0.9,\n        n_estimators=9999,\n        random_state=71,\n        importance_type='gain'\n    )\n    \n    clf.fit(X_tr, y_tr, early_stopping_rounds=200, eval_metric='RMSLE', eval_set=[(X_te, y_te)], verbose=100)\n    y_pred = clf.predict(X_te)\n    score = mean_squared_error(y_te, y_pred)\n    \n    y_pred_test += clf.predict(X_test)\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))\n    \ny_pred_test \/=4","284c01e4":"y_pred_test2 = np.zeros(len(X_test))\nscores = []\nfor i, (train_ix, test_ix) in enumerate(kf.split(X_train, y_train)):\n    X_tr, y_tr = X_train.values[train_ix], y_train.values[train_ix]\n    X_te, y_te = X_train.values[test_ix], y_train.values[test_ix]\n    \n    clf = LGBMRegressor(\n        learning_rate = 0.05,\n        num_leaves=31,\n        colsample_bytree=0.9,\n        subsample=0.9,\n        n_estimators=9999,\n        random_state=50,\n        importance_type='gain'\n    )\n    \n    clf.fit(X_tr, y_tr, early_stopping_rounds=200, eval_metric='RMSLE', eval_set=[(X_te, y_te)], verbose=100)\n    y_pred = clf.predict(X_te)\n    score = mean_squared_error(y_te, y_pred)\n    \n    y_pred_test += clf.predict(X_test)\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))\n    \ny_pred_test2 \/=4","10e7dd23":"y_pred_test3 = np.zeros(len(X_test))\nscores = []\nfor i, (train_ix, test_ix) in enumerate(kf.split(X_train, y_train)):\n    X_tr, y_tr = X_train.values[train_ix], y_train.values[train_ix]\n    X_te, y_te = X_train.values[test_ix], y_train.values[test_ix]\n    \n    clf = LGBMRegressor(\n        learning_rate = 0.05,\n        num_leaves=31,\n        colsample_bytree=0.9,\n        subsample=0.9,\n        n_estimators=9999,\n        random_state=55,\n        importance_type='gain'\n    )\n    \n    clf.fit(X_tr, y_tr, early_stopping_rounds=200, eval_metric='RMSLE', eval_set=[(X_te, y_te)], verbose=100)\n    y_pred = clf.predict(X_te)\n    score = mean_squared_error(y_te, y_pred)\n    \n    y_pred_test += clf.predict(X_test)\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))\n    \ny_pred_test3 \/=4","8fe0b44e":"y_pred_test4 = np.zeros(len(X_test))\nscores = []\nfor i, (train_ix, test_ix) in enumerate(kf.split(X_train, y_train)):\n    X_tr, y_tr = X_train.values[train_ix], y_train.values[train_ix]\n    X_te, y_te = X_train.values[test_ix], y_train.values[test_ix]\n    \n    clf = LGBMRegressor(\n        learning_rate = 0.05,\n        num_leaves=31,\n        colsample_bytree=0.9,\n        subsample=0.9,\n        n_estimators=9999,\n        random_state=56,\n        importance_type='gain'\n    )\n    \n    clf.fit(X_tr, y_tr, early_stopping_rounds=200, eval_metric='RMSLE', eval_set=[(X_te, y_te)], verbose=100)\n    y_pred = clf.predict(X_te)\n    score = mean_squared_error(y_te, y_pred)\n    \n    y_pred_test += clf.predict(X_test)\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))\n    \ny_pred_test4 \/=4","8c978a01":"output = pd.read_csv(\"..\/input\/sample_submission.csv\")","f0231735":"y_pred_all = []\nfor i in range(len(y_pred_test)):\n    y_pred_all.append((y_pred_test[i] + y_pred_test2[i] + y_pred_test3[i] + y_pred_test4[i])\/4)","93754a8e":"output[\"ConvertedSalary\"] = y_pred_all","d202e2c9":"output.to_csv(\"submission.csv\", index=False)","3f446e6e":"output[\"ConvertedSalary\"].mean()","79e7aac6":"df_train[\"ConvertedSalary\"].mean()","ac60b550":"# \u8ffd\u52a0\u7279\u5fb4\u91cf\u751f\u6210","71d5f6c8":"# TEXT","0e6ae703":"# \u30ab\u30c6\u30b4\u30ea\u51e6\u7406","b4e03247":"# NULL\u51e6\u7406"}}