{"cell_type":{"ad299a0c":"code","8acbc296":"code","5bbfeb63":"code","94229514":"code","b5a48f07":"code","de528ee9":"code","ffd9268c":"code","5c4b7cf3":"code","dc156727":"code","5c4f133e":"code","e7c875ef":"code","da2b6917":"code","26d7c75d":"code","f2616ac6":"code","a14509ff":"code","8ef9caa7":"code","d6121f3b":"code","09f5e097":"code","55863f33":"code","847afccf":"code","3be3064a":"code","6eff2cf2":"code","5951fa55":"code","5ec960e4":"code","59994221":"code","ad6cb14a":"code","bb2cda03":"code","ed8bf2ab":"code","9c389577":"code","484296fa":"code","6e37194b":"code","1a652a76":"code","137731f6":"code","5d043e1b":"code","84e7071a":"code","60951587":"code","c06250fa":"code","b0840fff":"code","cc769070":"code","f3e08f1b":"markdown","9a9ac792":"markdown","dec3189e":"markdown","12e2f764":"markdown","764e8b5a":"markdown","11c8d101":"markdown","d8fe57f4":"markdown","73463bf1":"markdown","825cc467":"markdown","be3aa96f":"markdown","da61f332":"markdown","5c754c9d":"markdown","a72df88e":"markdown","2e26d654":"markdown","0566e4cf":"markdown","5ad02ba7":"markdown","d0271e11":"markdown","06f1ad3e":"markdown","eca4fd10":"markdown","2721eada":"markdown","ba4e8433":"markdown","1fd10620":"markdown","aa57a962":"markdown","57caaf07":"markdown","c4906379":"markdown","0271c7df":"markdown","22027506":"markdown","2a99a5ed":"markdown","de5969df":"markdown","b64be89f":"markdown","812149b6":"markdown","f7ac3d6a":"markdown","7fb96b21":"markdown","4cfc1cc9":"markdown","e44e6689":"markdown","40f3e4b1":"markdown","7e4345ce":"markdown","40e8702c":"markdown","1b3622ae":"markdown","d1546abe":"markdown","6f11c0cc":"markdown","6f6d936b":"markdown","4fdd56da":"markdown","163b7731":"markdown","caadbbc5":"markdown","b185ee3a":"markdown","42fd755b":"markdown","10417050":"markdown"},"source":{"ad299a0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","8acbc296":"heart=pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\nheart.head()","5bbfeb63":"print('Number of rows are',heart.shape[0], 'and number of columns are ',heart.shape[1])","94229514":"heart.isnull().sum()\/len(heart)*100","b5a48f07":"heart.info()","de528ee9":"heart[heart.duplicated()]\n","ffd9268c":"heart.drop_duplicates(keep='first',inplace=True)\n","5c4b7cf3":"print('Number of rows are',heart.shape[0], 'and number of columns are ',heart.shape[1])","dc156727":"heart.describe()","5c4f133e":"heart.corr()","e7c875ef":"x=(heart.sex.value_counts())\nprint(f'Number of people having sex as 1 are {x[0]} and Number of people having sex as 0 are {x[1]}')\np = sns.countplot(data=heart, x=\"sex\")\nplt.show()","da2b6917":"x=(heart.cp.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"cp\")\nplt.show()","26d7c75d":"x=(heart.cp.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"cp\")\nplt.show()","f2616ac6":"x=(heart.fbs.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"fbs\")\nplt.show()\n\n","a14509ff":"x=(heart.restecg.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"restecg\")\nplt.show()\n\n","8ef9caa7":"x=(heart.exng.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"exng\")\nplt.show()\n","d6121f3b":"x=(heart.thall.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"thall\")\nplt.show()\n","09f5e097":"plt.figure(figsize=(10,10))\nsns.displot(heart.age, color=\"red\", label=\"Age\", kde= True)\nplt.legend()","55863f33":"plt.figure(figsize=(20,20))\nsns.displot(heart.trtbps , color=\"green\", label=\"Resting Blood Pressure\", kde= True)\nplt.legend()","847afccf":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"age\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"age\"], color='red',kde=True)\nplt.title('Attack versus Age')\nplt.show()\n\n","3be3064a":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"chol\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"chol\"], color='red',kde=True)\nplt.title('Cholestrol versus Age')\nplt.show()\n","6eff2cf2":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"trtbps\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"trtbps\"], color='red',kde=True)\nplt.title('Trtbs versus Age')\nplt.show()","5951fa55":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"thalachh\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"thalachh\"], color='red',kde=True)\nplt.title('Thalachh versus Age')\nplt.show()\n","5ec960e4":"plt.figure(figsize=(20,20))\nsns.pairplot(heart)\nplt.show()","59994221":"plt.figure(figsize=(13,13))\nplt.subplot(2,3,1)\nsns.violinplot(x = 'sex', y = 'output', data = heart)\nplt.subplot(2,3,2)\nsns.violinplot(x = 'thall', y = 'output', data = heart)\nplt.subplot(2,3,3)\nsns.violinplot(x = 'exng', y = 'output', data = heart)\nplt.subplot(2,3,4)\nsns.violinplot(x = 'restecg', y = 'output', data = heart)\nplt.subplot(2,3,5)\nsns.violinplot(x = 'cp', y = 'output', data = heart)\nplt.xticks(fontsize=9, rotation=45)\nplt.subplot(2,3,6)\nsns.violinplot(x = 'fbs', y = 'output', data = heart)\n\nplt.show()","ad6cb14a":"x = heart.iloc[:, 1:-1].values\ny = heart.iloc[:, -1].values\nx,y","bb2cda03":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)\n","ed8bf2ab":"print('Shape for training data', x_train.shape, y_train.shape)\nprint('Shape for testing data', x_test.shape, y_test.shape)","9c389577":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","484296fa":"x_train,x_test","6e37194b":"model = LogisticRegression()\nmodel.fit(x_train, y_train)\npredicted=model.predict(x_test)\nconf = confusion_matrix(y_test, predicted)\nprint (\"Confusion Matrix : \\n\", conf)\nprint()\nprint()\nprint (\"The accuracy of Logistic Regression is : \", accuracy_score(y_test, predicted)*100, \"%\")\n\n","1a652a76":"model = GaussianNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")","137731f6":"model = BernoulliNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")","5d043e1b":"model = SVC()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\nprint(\"The accuracy of SVM is : \", accuracy_score(y_test, predicted)*100, \"%\")\n\n","84e7071a":"model = RandomForestRegressor(n_estimators = 100, random_state = 0)  \nmodel.fit(x_train, y_train)  \npredicted = model.predict(x_test)\nprint(\"The accuracy of Random Forest is : \", accuracy_score(y_test, predicted.round())*100, \"%\")\n","60951587":"  \nmodel = KNeighborsClassifier(n_neighbors = 1)  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \n\nprint(confusion_matrix(y_test, predicted))\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")\n\n  \n","c06250fa":"error_rate = []\n  \nfor i in range(1, 40):\n      \n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(x_train, y_train)\n    pred_i = model.predict(x_test)\n    error_rate.append(np.mean(pred_i != y_test))\n  \nplt.figure(figsize =(10, 6))\nplt.plot(range(1, 40), error_rate, color ='blue',\n                linestyle ='dashed', marker ='o',\n         markerfacecolor ='red', markersize = 10)\n  \nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\n\n","b0840fff":"model = KNeighborsClassifier(n_neighbors = 7)\n  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \nprint('Confusion Matrix :')\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, predicted))\n\nprint()\nprint()\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")\n","cc769070":"model = xgb.XGBClassifier(use_label_encoder=False)\nmodel.fit(x_train, y_train)\n   \npredicted = model.predict(x_test)\n   \ncm = confusion_matrix(y_test, predicted)\nprint()\nprint (\"The accuracy of X Gradient Boosting is : \", accuracy_score(y_test, predicted)*100, \"%\")\n","f3e08f1b":"**2.Gaussian Naive Bayes**","9a9ac792":"***Density distribution for Age***","dec3189e":"**Checking new shape**","12e2f764":"<h1 style=\" text-align:center; color:Blue; font-size:40px;\"> <u><b>Heart Attack Prediction With 91.8% Accuracy<\/b><\/u> <\/h1>\n\n<p style=\"text-align:center; \">\n<img src=\"https:\/\/www.cardio.com\/hs-fs\/hubfs\/human%20heart%20illustration.jpeg?width=900&name=human%20heart%20illustration.jpeg\" style='width: 400px;'>\n<\/p>\n\n","764e8b5a":"**7.X Gradient Boosting**","11c8d101":"**3.Bernoulli Naive Bayes**","d8fe57f4":"***Checking for duplicate rows***","73463bf1":"***Removing the duplicates***","825cc467":"***Reading The Dataset***","be3aa96f":"***EXNG count is more than double for type 0***","da61f332":"**4.Support Vector Machine**","5c754c9d":"***Checking the shape of DataFrame***","a72df88e":"**There's no need for categorical encoding**","2e26d654":"**6.K Nearest Neighbours**","0566e4cf":"# **<p style=\"color:Blue;\">About The Dataset :<\/p>**\n    \nage: Age of the patient\n\nsex: Sex of the patient\n\ncp: Chest pain type, 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\n\ntrtbps: Resting blood pressure (in mm Hg)\n\nchol: Cholestoral in mg\/dl fetched via BMI sensor\n\nfbs: (fasting blood sugar > 120 mg\/dl), 1 = True, 0 = False\n\nrestecg: Resting electrocardiographic results, 0 = Normal, 1 = ST-T wave normality, 2 = Left ventricular hypertrophy\n\nthalachh: Maximum heart rate achieved\n\noldpeak: Previous peak\n\nslp: Slope\n\ncaa: Number of major vessels\n\nthall: Thalium Stress Test result ~ (0,3)\n\nexng: Exercise induced angina ~ 1 = Yes, 0 = No\n\noutput: Target variable\n\n","5ad02ba7":"**Splitting the dataset into training and testing data**","d0271e11":"***Checking For datatypes of the attributes***","06f1ad3e":"**No null values found**","eca4fd10":"* True Positive + True Negative : 54\n* False Positive + False Negative : 7","2721eada":"**People having gender as 0 are more than twice the people having gender as 1**","ba4e8433":"1. It can be observed people have chest pain of type 0 i.e 'Typical Angina' is the highest.\n2. It can be observed people have chest pain of type 3 i.e 'Asymptomatic' is the lowest\n3. It can also be observed people with chest pain of type 0 is almost 50% of all the people.","1fd10620":"***Pair Plot***","aa57a962":"**All attributes are of type 'int' except 'oldpeak'**","57caaf07":"***Breakdown of ECG***","c4906379":"**1. Logistic Regression**","0271c7df":"**Density distribution is highest for age group 55 to 60**\n","22027506":"***Checking statistical data***","2a99a5ed":"***Heart Attack Vs Age***","de5969df":"***Computing the correlation matrix***","b64be89f":"With k=7 as it hovers after that","812149b6":"***Breakdown for Thalium Stress Test***","f7ac3d6a":"***Violin Plot***","7fb96b21":"***Breakdown for chest pain***","4cfc1cc9":"**Feature Scaling**","e44e6689":"***Checking for null values***","40f3e4b1":"**Optimizing the KNN**","7e4345ce":"# **Data preprocessing**","40e8702c":"# ***Data Visualization***","1b3622ae":"***Trtbs has the highest count around 130***","d1546abe":" # **Conclusion**","6f11c0cc":"***Thall count is max for type 2 and min for type 0.***","6f6d936b":"ECG count is almost the same for type 0 and 1. Also, for type 2 its almost negligible in comparision to type 0 and 1.","4fdd56da":"***Breakdown for Exercise Induced Angina***","163b7731":"1. Most of the models are performing really well.\n2. SVM is performing the best for the given dataset.","caadbbc5":"**5.Random Forest**","b185ee3a":"***Breakdown of gender***","42fd755b":"> FBS with value 0 is significantly higher than value 1.","10417050":"***Breakdown of FBS***"}}