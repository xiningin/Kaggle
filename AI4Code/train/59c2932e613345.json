{"cell_type":{"3dac1e28":"code","a35774a0":"code","b1e61dcd":"code","1fca4133":"code","b36caa36":"code","0ce89b86":"code","c82e1a23":"code","0fe27881":"code","0c079132":"code","2e12b1cd":"code","17260587":"code","36131c42":"code","c83759b1":"code","718ea04b":"code","53e8b155":"code","c1becb60":"code","db29d737":"code","cb90f9c0":"code","04e01406":"code","29f95c2e":"code","d902a07b":"code","423c3c96":"code","356d622f":"code","53572ffb":"code","020f7485":"code","9410043e":"code","542f26ac":"code","4102aa40":"code","6076b517":"code","e7e4d8b4":"code","9ecbdf1e":"code","4a871cc0":"code","de639fb0":"code","64f42ece":"code","fa77b0f4":"code","82ec016c":"code","b4e0dd22":"code","35439dc2":"code","9f0f3466":"code","7d1b39c8":"code","cddbef92":"code","1b4a8123":"code","9d71f215":"code","a2fe8f89":"code","db212cbc":"code","34bc642e":"code","7d772ec2":"code","5e5cc762":"code","89569d91":"code","5b94e486":"code","2a6f5dab":"code","656f55a3":"code","859d9efd":"code","9bd6ce6c":"code","291825ac":"code","d74833f0":"code","2eee1767":"code","cafc83d9":"code","a6afe3f0":"code","9d32e46d":"code","27e47562":"code","edc65a3e":"code","41733994":"code","433fddd7":"code","94039cdf":"code","900f7bee":"code","3029c074":"code","6bca19c8":"code","d0a81fe4":"code","1c403dca":"code","34ea5b3a":"code","d92bbb13":"code","d1fc55bd":"code","9ff49a3b":"code","87e29c36":"code","6c733d68":"code","232b20e3":"code","d4b7661e":"code","fed06e04":"code","2908febc":"code","6bddcec0":"code","d7732ca7":"code","dc64740e":"code","fab4d4ba":"code","2f8e7e7d":"code","bc3e2c58":"code","8b243c43":"code","7b30ba7a":"code","9ed24d97":"code","8b8059e1":"code","546a94d5":"code","eaba1514":"code","bd075c59":"code","502762d5":"code","7d8154c5":"code","b4010486":"code","949269d9":"code","3027fcf0":"code","78472beb":"code","cb62c867":"code","6982d7f1":"code","332ae55a":"code","752ae180":"markdown","a9c6bfd2":"markdown","1fae37ee":"markdown","c4d401ce":"markdown","b2bb791f":"markdown","9fb6691c":"markdown","0b36e56e":"markdown","4336b8e8":"markdown","f75b11a1":"markdown","be1b3599":"markdown","9f746ee0":"markdown","6307a2bd":"markdown","3af78f35":"markdown","64d77d96":"markdown","79391a1f":"markdown","4d09065b":"markdown","e7c9befe":"markdown","c05009b5":"markdown","e2d81d41":"markdown","ea30ddeb":"markdown","1dfe01b0":"markdown","6bc97301":"markdown","86da4428":"markdown","427d4baa":"markdown","4b5334d9":"markdown","e2f14d3f":"markdown"},"source":{"3dac1e28":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import font_manager, rc\nimport seaborn as sns\n%matplotlib inline","a35774a0":"barrolee=pd.read_csv('..\/input\/split-data-from-edu-stat\/barrolee.csv')\nbarrolee.head()","b1e61dcd":"# Choose one among numerous indicators: Average years of total schooling, age 25+\nschooling=barrolee[barrolee['Indicator'].str.contains('Average years of total schooling, age 25+')]\nschooling.head()","1fca4133":"schooling['Indicator'].unique()","b36caa36":"# Extract data that includes 'total' and '25+'\nfinalschooling=schooling[~schooling['Indicator'].str.contains('female|29')]","0ce89b86":"finalschooling['Indicator'].unique()\nfinalschooling=finalschooling.reset_index(drop=True)","c82e1a23":"# Draw graph with 2010 data\nfinalschooling=finalschooling.sort_values(by='2010', ascending=True)","0fe27881":"import matplotlib.style as style\nstyle.use('fivethirtyeight')","0c079132":"fig, ax = plt.subplots(figsize=(20,35))\nmygraph = ax.barh(finalschooling['Country'], finalschooling['2010'])\nplt.axvline(x = np.mean(finalschooling['2010']), color = 'black', linewidth = 1.5, alpha = .8)\nplt.title('Average years of total schooling, age 25+',fontsize=32,fontweight='bold', loc='left')","2e12b1cd":"test=pd.read_csv('..\/input\/split-data-from-edu-stat\/test.csv')\ntest.shape","17260587":"pisa=test[test['Indicator'].str.contains('PISA')]\npisa.shape","36131c42":"pirls=test[test['Indicator'].str.contains('PIRLS')]\npirls.shape","c83759b1":"llece=test[test['Indicator'].str.contains('LLECE')]\nllece.shape","718ea04b":"pisa.isnull().sum()","53e8b155":"# drop years with too many NaN values\npisa=pisa.drop(['1995','1997', '1999', '2001', '2004','2005','2007','2008','2010','2011','2013','2014','2016'], axis=1)\npisa.head()","c1becb60":"# Extract my interests\ncriteria = pisa['Indicator'].isin(['PISA: 15-year-olds by mathematics proficiency level (%). Below Level 1',\n       'PISA: 15-year-olds by mathematics proficiency level (%). Level 1',\n       'PISA: 15-year-olds by mathematics proficiency level (%). Level 2',\n       'PISA: 15-year-olds by mathematics proficiency level (%). Level 3',\n       'PISA: 15-year-olds by mathematics proficiency level (%). Level 4',\n       'PISA: 15-year-olds by mathematics proficiency level (%). Level 5',\n       'PISA: 15-year-olds by mathematics proficiency level (%). Level 6',\n       'PISA: 15-year-olds by reading proficiency level (%). Below Level 1B',\n       'PISA: 15-year-olds by reading proficiency level (%). Level 1A',\n       'PISA: 15-year-olds by reading proficiency level (%). Level 1B',\n       'PISA: 15-year-olds by reading proficiency level (%). Level 2',\n       'PISA: 15-year-olds by reading proficiency level (%). Level 3',\n       'PISA: 15-year-olds by reading proficiency level (%). Level 4',\n       'PISA: 15-year-olds by reading proficiency level (%). Level 5',\n       'PISA: 15-year-olds by reading proficiency level (%). Level 6',\n       'PISA: 15-year-olds by science proficiency level (%). Below Level 1B',\n       'PISA: 15-year-olds by science proficiency level (%). Level 1A',\n       'PISA: 15-year-olds by science proficiency level (%). Level 1B',\n       'PISA: 15-year-olds by science proficiency level (%). Level 2',\n       'PISA: 15-year-olds by science proficiency level (%). Level 3',\n       'PISA: 15-year-olds by science proficiency level (%). Level 4',\n       'PISA: 15-year-olds by science proficiency level (%). Level 5',\n       'PISA: 15-year-olds by science proficiency level (%). Level 6'])","db29d737":"newpisa=pisa[criteria]","cb90f9c0":"newpisa.shape","04e01406":"# reading data\npisareading=newpisa[newpisa['Indicator'].str.contains('reading')]\npisareading.head()","29f95c2e":"# Make pivot table for drawing horizontal stacked bar graph\npisa_reading=pd.pivot_table(pisareading, index='Code', columns='Indicator', values=['2015'], dropna=True)","d902a07b":"pisa_reading['sum']=pisa_reading.sum(axis=1)\npisa_reading=pisa_reading[pisa_reading['sum']!=0]","423c3c96":"pisa_reading=pisa_reading.drop('sum',axis=1)\npisa_reading","356d622f":"# Change row orders -> enables to draw bar graphs alphabetical order\npisa_reading=pisa_reading[::-1]","53572ffb":"pal=sns.cubehelix_palette(8)","020f7485":"pisareadinggraph=pisa_reading.plot(kind='barh', stacked=True, figsize=(20,36), color=pal, title='PISA: 15-year-olds by reading proficiency level(%) [Below Level1B - Level1A - Level1B - Level2 - Level3 - Level4 - Level5 - Level6]', legend=False, xlim=(0,100))\npisareadinggraph","9410043e":"# Math data\npisamath=newpisa[newpisa['Indicator'].str.contains('mathematics')]\npisamath.shape","542f26ac":"pisa_math=pd.pivot_table(pisamath,index='Code',columns='Indicator',values='2015')\npisa_math=pisa_math[::-1]","4102aa40":"pisa_math['sum']=pisa_math.sum(axis=1)\npisa_math=pisa_math[pisa_math['sum']!=0]","6076b517":"pisa_math=pisa_math.drop('sum',axis=1)","e7e4d8b4":"pal2=sns.cubehelix_palette(8, start=2, rot=0, dark=0, light=.95, reverse=False)","9ecbdf1e":"pisamathgraph=pisa_math.plot(kind='barh', stacked=True, figsize=(20,36), color=pal2, title='PISA: 15-year-olds by mathematics proficiency level(%) [Below Level1B - Level1A - Level1B - Level2 - Level3 - Level4 - Level5 - Level6]',legend=False, xlim=(0,100))\npisamathgraph","4a871cc0":"# science data\npisascience=newpisa[newpisa['Indicator'].str.contains('science')]\npisascience.shape","de639fb0":"pisa_science=pd.pivot_table(pisascience,index='Code', columns='Indicator', values='2015')\npisa_science=pisa_science[::-1]","64f42ece":"pisa_science['sum']=pisa_science.sum(axis=1)","fa77b0f4":"pisa_science=pisa_science[pisa_science['sum']!=0]\npisa_science=pisa_science.drop('sum',axis=1)","82ec016c":"pal3=sns.light_palette(\"Navy\", as_cmap=True)","b4e0dd22":"pisasciencegraph=pisa_science.plot(kind='barh', stacked=True, figsize=(20,36), cmap=pal3, title='PISA: 15-year-olds by science proficiency level(%) [Below Level1B - Level1A - Level1B - Level2 - Level3 - Level4 - Level5 - Level6]', legend=False, xlim=(0,100))","35439dc2":"criteria = pirls['Indicator'].isin(['PIRLS: Distribution of Reading Scores: 5th Percentile Score', 'PIRLS: Distribution of Reading Scores: 25th Percentile Score', 'PIRLS: Distribution of Reading Scores: 50th Percentile Score', 'PIRLS: Distribution of Reading Scores: 75th Percentile Score', 'PIRLS: Distribution of Reading Scores: 95th Percentile Score'])","9f0f3466":"pirlsreading=pirls[criteria]\npirlsreading=pirlsreading.reset_index(drop=True)\npirlsreading.head()","7d1b39c8":"pirlsreading.shape","cddbef92":"pirls_reading=pd.pivot_table(pirlsreading, index='Indicator', columns='Code', values='2016')","1b4a8123":"# Change the columns' order\npirls_reading = pirls_reading.sort_index(axis=1 ,ascending=False)","9d71f215":"pirlsreadinggraph=pirls_reading.plot(kind='box', vert=0, figsize=(20,36), title='PIRLS: Distribution of Reading Scores [5th Percentile - 25th Percentile - 50th Percentile - 75th Percentile - 95th Percentile]')","a2fe8f89":"llece.isnull().sum()","db212cbc":"# Drop years with too many NaN values\nllece=llece.drop(['1995','1999', '2000', '2001','2003','2004','2005','2007','2008','2009','2010','2011','2012','2014','2015','2016'], axis=1)\nllece.head()","34bc642e":"llece=llece[llece['Indicator'].str.contains('Mean performance on the')]\nllece.head()","7d772ec2":"llece=llece[~llece['Indicator'].str.contains('total')]\nllece.head()","5e5cc762":"llece['Indicator'].unique()","89569d91":"llece3rd=llece[llece['Indicator'].str.contains('3rd')]\nllece3rd=llece3rd.reset_index(drop=True)","5b94e486":"# Only 2006 data remains\nllece3rd=llece3rd.drop(['1997','2013'],axis=1)\nllece3rd.head()","2a6f5dab":"# Make a new column called gender_gap\nllece3rd['gender_gap']=np.repeat([abs(llece3rd.iloc[2*i,3]-llece3rd.iloc[2*i+1,3]) for i in range(34)],2)","656f55a3":"# rearrange order by values\nllece3rd2=llece3rd.sort_values(by='gender_gap', ascending=False)\nllece3rd2.head(20)","859d9efd":"list(llece3rd2['Indicator'].unique())","9bd6ce6c":"llece3rdfinal=pd.read_csv('..\/input\/split-data-from-edu-stat\/llece3rd2.csv')","291825ac":"# Delete rows with na values\nllece3rdfinal=llece3rdfinal.dropna()","d74833f0":"llece3rdfinal.columns","2eee1767":"# Extract top5 gender gap countries\ntop_5_gap_countries = ['BRA', 'ARG', 'PRY', 'PAN', 'CHL']","cafc83d9":"llece3rdfinal.plot.bar(figsize=(16,8), color=['r','r','b','b'], grid=True, width=0.8, x='Code',y=['reading scale mean for 3rd grade students, female',\n       'reading scale mean for 3rd grade students, male',\n       'mathematics scale mean for 3rd grade students, female',\n       'mathematics scale mean for 3rd grade students, male'], ylim=(300,700), legend='topright', title='LLECE Score')","a6afe3f0":"income_oecd=pd.read_csv('..\/input\/split-data-from-edu-stat\/income_oecd.csv')\nincome_oecd","9d32e46d":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.float_format', '{:.2f}'.format)","27e47562":"array=['GDP per capita (current US$)', 'Labor force, total','Population growth (annual %)', 'Unemployment, total (% of total labor force)']","edc65a3e":"oecd=income_oecd.loc[income_oecd['Indicator'].isin(array)]","41733994":"# Delete years that data is unavailable\noecd=oecd.iloc[:,:51]","433fddd7":"import matplotlib.style as style\nstyle.use('default')","94039cdf":"x1=list(range(1970,2018))\nxi=[i for i in x1]","900f7bee":"plt.subplots(1,1, figsize=(16,8))\nplt.plot(xi, oecd.iloc[0,3:], linewidth=4)\nplt.xticks(np.arange(1970,2018,step=3))\nplt.plot(xi, oecd.iloc[4,3:], linewidth=4)\nplt.grid(color='grey', linestyle='-', linewidth=0.4)\nplt.title('GDP per capita(current US$)',fontsize=24, y=1.04)\nplt.legend(['OECD','World'],loc=(0.92,1.02))\nplt.show()","3029c074":"style.use('fivethirtyeight')","6bca19c8":"x2=list(range(1989,2018))\nxj=[j for j in x2]","d0a81fe4":"x3=list(range(1990,2019))\nxk=[k for k in x3]","1c403dca":"f = plt.figure(figsize=(16,18))\nax=f.add_subplot(311)\nax.set_title('Labor Force, total', fontsize=16)\nax.plot(xk, oecd.iloc[1,22:])\nax.plot(xk, oecd.iloc[5,22:])\nax.set_xticks(np.arange(1990,2018,step=3))\nax.set_ylim([200000000, 3700000000])\nax.legend(['OECD','World'],loc=(0.85,0.95))\n\nax2=f.add_subplot(312)\nax2.set_title('Unemployment, total (% of total labor force)', fontsize=16)\nax2.plot(xk, oecd.iloc[3,22:])\nax2.plot(xk, oecd.iloc[7,22:])\nax2.set_xticks(np.arange(1990,2018,step=3))\nax2.legend(['OECD','World'],loc=(0.85,0.95))\nax2.set_ylim([5.2,9])\n\nax3=f.add_subplot(313)\nax3.set_title('Population growth (annual %)', fontsize=16)\nax3.plot(xk, oecd.iloc[2,22:])\nax3.plot(xk, oecd.iloc[6,22:])\nax3.set_xticks(np.arange(1990,2018,step=3))\nax3.legend(['OECD','World'], loc=(0.85,0.95))\nax3.set_ylim([-0.3,3])\n\nplt.show()","34ea5b3a":"mobility_cont=pd.read_csv('..\/input\/split-data-from-edu-stat\/mobility_cont.csv')","d92bbb13":"mobility_cont['Indicator'].unique()","d1fc55bd":"array=['Inbound mobility rate, both sexes (%)', 'Outbound mobility ratio, all regions, both sexes (%)', 'Total outbound internationally mobile tertiary students studying abroad, all countries, both sexes (number)', 'Net flow of internationally mobile students (inbound - outbound), both sexes (number)']","9ff49a3b":"mobility=mobility_cont.loc[mobility_cont['Indicator'].isin(array)]","87e29c36":"mobility['Country'].unique()","6c733d68":"array3=['Arab World', 'East Asia & Pacific',\n       'East Asia & Pacific (excluding high income)', 'Euro area',\n       'Europe & Central Asia', 'Europe & Central Asia (excluding high income)', 'European Union',\n       'Latin America & Caribbean', 'Latin America & Caribbean (excluding high income)',\n       'Middle East & North Africa', 'Middle East & North Africa (excluding high income)',\n       'North America', 'South Asia', 'Sub-Saharan Africa', 'Sub-Saharan Africa (excluding high income)']","232b20e3":"mobility_continent=mobility.loc[mobility['Country'].isin(array3)]\nmobility_continent","d4b7661e":"mobility_continent_in=mobility_continent[mobility_continent['Indicator'].str.contains('Inbound')]","fed06e04":"x4=list(range(1997,2015))","2908febc":"from matplotlib import colors as mcolors","6bddcec0":"colors = dict(mcolors.BASE_COLORS, **mcolors.CSS4_COLORS)","d7732ca7":"colors=['black','r','darkred','gold','orange','brown','moccasin','m','darkmagenta','lightslategrey','darkgrey','b', 'indianred','lawngreen','darkgreen']","dc64740e":"mobility_continent_out=mobility_continent[mobility_continent['Indicator'].str.contains('Outbound|outbound')].reset_index(drop=True)","fab4d4ba":"mobility_continent_out['Country'].unique()","2f8e7e7d":"import matplotlib.style as style","bc3e2c58":"import matplotlib.style as style\nstyle.use('default')","8b243c43":"f = plt.figure(figsize=(16,24))\nax=f.add_subplot(311)\nax.set_title('Inbound mobility rate(%)', fontsize=16)\nfor i,j in zip(range(0,15),colors):\n    ax.plot(x4,mobility_continent_in.iloc[i,3:],c=j)\nax.set_ylim([-0.3,8])\nax.set_xticks(np.arange(1997,2014,step=2))\nax.grid(linewidth=0.5)\nax.legend(mobility_continent_in['Code'])\n\nax2=f.add_subplot(312)\nax2.set_title('Outbound mobility rate(%)', fontsize=16)\nfor k,l in zip(range(0,15),colors):\n    ax2.plot(x4, mobility_continent_out.iloc[2*k,3:],c=l)\nax2.set_ylim([0,7])\nax2.set_xticks(np.arange(1997,2014,step=2))\nax2.grid(linewidth=0.5)\nax2.legend(mobility_continent_out['Code'],loc='upper right', ncol=5)\n\nax3=f.add_subplot(313)\nax3.set_title('Total outbound internationally mobile students(number) (YEAR 2014)', fontsize=16)\nfor m,n in zip(range(0,15),colors):\n    ax3.bar(mobility_continent_out.iloc[2*m+1,1], mobility_continent_out.iloc[2*m+1,19], color=n)\nax3.set_ylim([0,1300000])\nax3.legend(mobility_continent_out['Code'],loc='upper right', ncol=3)\nax3.grid(linewidth=0.5)","7b30ba7a":"afc=pd.read_csv('..\/input\/split-data-from-edu-stat\/africafacilities_country.csv')","9ed24d97":"afc=afc.drop(['2007','2008','2009','2010','2011','2013','2014','2015'],axis=1)\nafc.head()","8b8059e1":"criteria2 = afc['Indicator'].isin(['Africa Dataset: Percentage of lower secondary schools with access to electricity (%)',\n       'Africa Dataset: Percentage of lower secondary schools with access to potable water (%)', \n       'Africa Dataset: Percentage of lower secondary schools with toilets (%)',\n       'Africa Dataset: Percentage of primary schools with access to electricity (%)',\n       'Africa Dataset: Percentage of primary schools with access to potable water (%)',\n       'Africa Dataset: Percentage of primary schools with toilets (%)'])","546a94d5":"afc=afc[criteria2].reset_index(drop=True)\nafc.head()","eaba1514":"import folium\nimport json\nimport cufflinks as cf\nimport seaborn as sns\nsns.set() #https:\/\/seaborn.pydata.org\/generated\/seaborn.set.html\ncf.go_offline()  # required to use plotly offline (no account required)\n%matplotlib inline \n%config InlineBackend.figure_format = 'retina' ","bd075c59":"africa_map = folium.Map(location=[0.311106, 23.969148], zoom_start=3)\nafrica_map","502762d5":"afc_lower_elec=afc[afc['Indicator'].isin(['Africa Dataset: Percentage of lower secondary schools with access to electricity (%)'])].reset_index(drop=True)\nafc_lower_water=afc[afc['Indicator'].isin(['Africa Dataset: Percentage of lower secondary schools with access to potable water (%)'])].reset_index(drop=True)\nafc_lower_toilet=afc[afc['Indicator'].isin(['Africa Dataset: Percentage of lower secondary schools with toilets (%)'])].reset_index(drop=True)\nafc_prim_elec=afc[afc['Indicator'].isin(['Africa Dataset: Percentage of primary schools with access to electricity (%)'])].reset_index(drop=True)\nafc_prim_water=afc[afc['Indicator'].isin(['Africa Dataset: Percentage of primary schools with access to potable water (%)'])].reset_index(drop=True)\nafc_prim_toilet=afc[afc['Indicator'].isin(['Africa Dataset: Percentage of primary schools with toilets (%)'])].reset_index(drop=True)","7d8154c5":"africa_map = folium.Map(location=[0, 23.011837], zoom_start=3)\n\nworld_geo = '..\/input\/worldjson\/world.json'\nafrica_map.choropleth(geo_data='..\/input\/worldjson\/world.json',\n              data=afc_lower_elec, columns=['Country', '2012'], key_on='properties.name',\n              fill_color='YlGn', fill_opacity=0.7, line_opacity=0.5)\n\nafrica_map","b4010486":"africa_map = folium.Map(location=[0, 23.011837], zoom_start=3)\n\nworld_geo = '..\/input\/worldjson\/world.json'\nafrica_map.choropleth(geo_data='..\/input\/worldjson\/world.json',\n              data=afc_lower_water, columns=['Country', '2012'], key_on='properties.name',\n              fill_color='PuBu', fill_opacity=0.7, line_opacity=0.5)\n\nafrica_map","949269d9":"africa_map = folium.Map(location=[0, 23.011837], zoom_start=3)\n\nworld_geo = '..\/input\/worldjson\/world.json'\nafrica_map.choropleth(geo_data='..\/input\/worldjson\/world.json',\n              data=afc_lower_toilet, columns=['Country', '2012'], key_on='properties.name',\n              fill_color='OrRd', fill_opacity=0.7, line_opacity=0.5)\n\nafrica_map","3027fcf0":"import plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly","78472beb":"plotly.tools.set_credentials_file(username='HyunjooKim', api_key='v5zTFmz0DExZ1aODl1AZ')","cb62c867":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\nfor col in afc_lower_elec.columns:\n    afc_lower_elec[col] = afc_lower_elec[col].astype(str)\n\nscl = [[0.0, 'rgb(206,251,201)'],[0.2, 'rgb(183,240,177)'],[0.4, 'rgb(134,229,127)'],\\\n            [0.6, 'rgb(71,200,62)'],[0.8, 'rgb(47,157,39)'],[1.0, 'rgb(34,116,28)']]\n\nafc_lower_elec['text'] = afc_lower_elec['Country'] + '<br>' +\\\n    '(%)' + afc_lower_elec['2012']\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = afc_lower_elec['Country'],\n        z = afc_lower_elec['2012'].astype(float),\n        locationmode = 'country names',\n        text = afc_lower_elec['text'],\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 2\n            ) ),\n        colorbar = dict(\n            title = \"Africa Dataset: Percentage of primary schools with access to electricity (%)\")\n        ) ]\n\nlayout = dict(\n        title = 'Africa Dataset: Percentage of primary schools with access to electricity (%)<br>(Hover for breakdown)',\n        geo = dict(\n            scope='africa',\n            projection=dict( type='mercator' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\n    \nfig = go.Figure(dict( data=data, layout=layout ))\npy.offline.iplot(fig)","6982d7f1":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\nfor col in afc_prim_water.columns:\n    afc_prim_water[col] = afc_prim_water[col].astype(str)\n\nscl = [[0.0, 'rgb(217,229,255)'],[0.2, 'rgb(178,204,255)'],[0.4, 'rgb(103,153,255)'],\\\n            [0.6, 'rgb(67,116,217)'],[0.8, 'rgb(0,51,153)'],[1.0, 'rgb(0,34,103)']]\n\nafc_prim_water['text'] = afc_prim_water['Country'] + '<br>' +\\\n    '(%)' + afc_prim_water['2012']\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = afc_prim_water['Country'],\n        z = afc_prim_water['2012'].astype(float),\n        locationmode = 'country names',\n        text = afc_prim_water['text'],\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 2\n            ) ),\n        colorbar = dict(\n            title = \"Africa Dataset: Percentage of primary schools with access to potable water (%)\")\n        ) ]\n\nlayout = dict(\n        title = 'Africa Dataset: Percentage of primary schools with access to potable water (%)<br>(Hover for breakdown)',\n        geo = dict(\n            scope='africa',\n            projection=dict( type='mercator' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\n    \nfig = go.Figure(dict( data=data, layout=layout ))\npy.offline.iplot(fig)","332ae55a":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\nfor col in afc_prim_toilet.columns:\n    afc_prim_toilet[col] = afc_prim_toilet[col].astype(str)\n\nscl = [[0.0, 'rgb(255,216,216)'],[0.2, 'rgb(255,167,167)'],[0.4, 'rgb(241,95,95)'],\\\n            [0.6, 'rgb(204,61,61)'],[0.8, 'rgb(152,0,0)'],[1.0, 'rgb(103,0,0)']]\n\nafc_prim_toilet['text'] = afc_prim_toilet['Country'] + '<br>' +\\\n    '(%)' + afc_prim_toilet['2012']\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = afc_prim_toilet['Country'],\n        z = afc_prim_toilet['2012'].astype(float),\n        locationmode = 'country names',\n        text = afc_prim_toilet['text'],\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 2\n            ) ),\n        colorbar = dict(\n            title = \"Africa Dataset: Percentage of primary schools with access to toilets (%)\")\n        ) ]\n\nlayout = dict(\n        title = 'Africa Dataset: Percentage of primary schools with access to toilets (%)<br>(Hover for breakdown)',\n        geo = dict(\n            scope='africa',\n            projection=dict( type='mercator' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\n    \nfig = go.Figure(dict( data=data, layout=layout ))\npy.offline.iplot(fig)","752ae180":"##### Save the new file and split it into smaller ones with various themes \ntotal.to_csv('total.csv')","a9c6bfd2":"# Kaggle Education Statistics From World Bank Open Data","1fae37ee":"# African School Facilities Map Visualization","c4d401ce":"##### Read original file\noriginal=pd.read_csv('EdStatsData.csv')","b2bb791f":"### Labor Force & Unemployment & Population Growth(OECD vs World)","9fb6691c":"# Barrolee data - Average years of total schooling, age 25+, total","0b36e56e":"-------------------","4336b8e8":"# Test","f75b11a1":"# Mobility","be1b3599":"## PIRLS reading score Distribution with boxplot","9f746ee0":"##### Arrange the original data\noriginal=original.drop('Indicator Code',axis=1)\n##### Delete rows that all values are NaN\noriginal['sum']=original.sum(axis=1)","6307a2bd":"## Primary School Facilities - Electricity, Potable Water, Toilets","3af78f35":"## Lower Secondary School Facilities-Electricity, Potable Water, Toilets","64d77d96":"___________________________________________","79391a1f":"----------------------------","4d09065b":"## Hyunjoo Kim\n### Interests: Psychometrics, Educatinal Data Mining, Learning Analytics, Edu-tech\n### Contacts: hyunjookim111@yonsei.ac.kr","e7c9befe":"## PISA score from each country","c05009b5":"----------------------------","e2d81d41":"## Graph based on LLECE data","ea30ddeb":"## <Inbound Mobility Rate(%) by Continent>\n\nARB=Arab World, EAS=East Asia&Pacific, EAP=East Asia & Pacific (excluding high income)<br>\nEMU=Euro Area, ECS=Europe & Central Asia, ECA=Europe & Central Asia (excluding high income), EUU=European Union<br>\nLCN=Latin America & Caribbean, LAC=Latin America & Caribbean (excluding high income), <br>\nMEA=Middle East & North Africa, MNA=Middle East & North Africa (excluding high income),<br>\nNAC=North America, SAS=South Asia, SSF=Sub-Saharan Africa, SSA=Sub-Saharan Africa (excluding high income)","1dfe01b0":"-----------------------------------------------","6bc97301":"### Extra works in excel","86da4428":"# OECD Countries","427d4baa":"------------------------------------------","4b5334d9":"##### Make a new file and do some extra works in excel\nllece3rd2.to_csv('llece3rd2.csv')","e2f14d3f":"##### The rows that their sum is not 0 remain\ntotal=original[original['sum']!=0]"}}