{"cell_type":{"2985f90c":"code","c0bc44be":"code","5b09a896":"code","00bf2f1c":"code","c35e9629":"code","dd5b7e70":"code","c1c5dba8":"code","7958b401":"code","df578e63":"code","73bc314d":"code","68b7dabf":"code","177b9589":"code","960b50da":"code","9c53105c":"code","4324f800":"code","116dbbb7":"code","307f1952":"code","d888fa75":"code","1f61bd0c":"code","4e288503":"code","28feac7e":"code","aa2d63f8":"code","d8f3645b":"code","3f028c10":"code","6937f03b":"code","b3859ae3":"code","2a8e4526":"code","aebc84ee":"code","36c81f14":"code","32d2fd39":"code","7ae3bf26":"code","cfc8b85c":"code","e4fa4c67":"code","b03ecbe3":"code","01f5f9bd":"code","9dabc27f":"code","33b633b8":"code","08dd0390":"markdown","38e76f58":"markdown","1566f66a":"markdown","e90feee6":"markdown","8f4fd64a":"markdown","7ac5376d":"markdown","5c156fa1":"markdown","f1f4df5c":"markdown","52af5db1":"markdown","a1a126fe":"markdown","c30a70eb":"markdown","9cc01b23":"markdown","cb5fd1ce":"markdown","cb4048ed":"markdown","f06e9307":"markdown","c8b7af35":"markdown","831cee79":"markdown","cd92abe6":"markdown","202ec326":"markdown","4eda1832":"markdown","47d75a81":"markdown","835f418b":"markdown","772633cc":"markdown","4e1e75c7":"markdown","8bf845e9":"markdown","eaca1854":"markdown"},"source":{"2985f90c":"# library import\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom sklearn.preprocessing import (OneHotEncoder, LabelEncoder, StandardScaler, \n                                   MinMaxScaler, PowerTransformer, QuantileTransformer)\nfrom sklearn.model_selection import KFold, StratifiedKFold, train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.linear_model import LinearRegression, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n%matplotlib inline\n\nwarnings.filterwarnings(action='ignore')","c0bc44be":"# data import & view head\ndf = pd.read_csv('..\/input\/insurance\/insurance.csv', engine='python')\ndf.head()","5b09a896":"# \ub370\uc774\ud130\uc5d0 \uacb0\uce21\uce58\ub294 \uc5c6\ub294\uc9c0, \uac01 \ub370\uc774\ud130\uc758 \uc790\ub8cc\ud615\uc740 \uc5b4\ub5a4 \uac83\uc778\uc9c0 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\ndf.info()","00bf2f1c":"# \ub370\uc774\ud130\uc758 \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28, \ucd5c\ub313\uac12, \ucd5c\uc19f\uac12, \uc0ac\ubd84\uc704\uc218\ub97c \ud45c\ub85c \ud55c \ubc88 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\ndf.describe()","c35e9629":"# \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \ud1b5\ud574 \uac01 \ubcc0\uc218\ub4e4\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\nfig, ax = plt.subplots(2, 3, figsize=(30, 20))\n\nidx = 0 # \ubcf4\ud5d8\ub8cc\ub97c \uc81c\uc678\ud55c feature\ub4e4\uc744 \uc9c0\uc815\ud560 \uc778\ub371\uc2a4\uc785\ub2c8\ub2e4.\nfor i in range(2): # subplot\ub4e4\uc758 \ud589(row)\n    for j in range(3): # subplot\ub4e4\uc758 \uc5f4(column)\n        colname = list(df.columns)[idx]\n        ax[i][j].hist(df[colname], bins=20)\n        ax[i][j].set_xlabel(colname)\n        ax[i][j].set_ylabel('Frequency')\n        \n        idx += 1","dd5b7e70":"df.corr()","c1c5dba8":"pd.plotting.scatter_matrix(df, figsize=(16, 16))","7958b401":"print(df['age'].min())\nprint(df['age'].max())","df578e63":"# \uc5f0\ub839\ubcc4 \uad6c\uac04 \uc124\uc815\nbins = [0, 20, 25, 30, 35, 40, 45, 50, 55, 60, np.inf]\nage_bin = pd.cut(df['age'], bins=bins, labels=[i+1 for i in range(len(bins)-1)])\ndf['age_bin'] = age_bin\ndf.head()","73bc314d":"# \uc774\uc0c1\uce58 \ud0d0\uc9c0\ub97c \uc704\ud574 boxplot\uc744 \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nplt.subplot(1,3,1)\nsns.boxplot(data=df, y='age')\nplt.subplot(1,3,2)\nsns.boxplot(data=df, y='children')\nplt.subplot(1,3,3)\nsns.boxplot(data=df, y='bmi')","68b7dabf":"# IQR(Q3 - Q1)\ub85c\ubd80\ud130 \uc774\uc0c1\uce58 \ud30c\uc545\ud558\uae30\nbmi_q1 = df['bmi'].quantile(q=0.25)\nbmi_q3 = df['bmi'].quantile(q=0.75)\niqr = bmi_q3 - bmi_q1\n\n# (q1 - (iqr * 1.5))\uc640 (q3 + (iqr * 1.5))\ub97c \ubc97\uc5b4\ub09c \uac12\uc774 \uc774\uc0c1\uce58\uc785\ub2c8\ub2e4.\ncondi1 = (df['bmi'] < (bmi_q1 - (1.5 * iqr)))\ncondi2 = (df['bmi'] > (bmi_q3 + (1.5 * iqr)))\noutliers = df[condi1 | condi2]\noutliers['bmi']","177b9589":"outliers","960b50da":"df.drop(outliers.index, axis=0, inplace=True)\ndf.info()","9c53105c":"# bmi\uc758 \ubd84\ud3ec\ub97c \ub2e4\uc2dc \ud55c \ubc88 \uadf8\ub824\ubd05\ub2c8\ub2e4.\nplt.figsize = (10, 10)\nplt.hist(df['bmi'], bins=30)\nplt.xlabel('bmi')\nplt.ylabel('frequency')\nplt.show()","4324f800":"# \uc22b\uc790\ud615 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c Box-Cox transformation, Quantile transformation, \uadf8\ub9ac\uace0 \ub85c\uadf8\ubcc0\ud658\uc744 \uc9c4\ud589\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nto_scale = ['age', 'bmi', 'children', 'charges']\ndf_to_scale = df[to_scale].copy()\n\nquantile = QuantileTransformer(n_quantiles=100, random_state=42, output_distribution='normal')\npower = PowerTransformer(method='yeo-johnson')\nq_scaled = quantile.fit_transform(df_to_scale)\nyj = power.fit_transform(df_to_scale)\n\nq_scaled_df = pd.DataFrame(q_scaled, columns=to_scale)\nscaled_df = pd.DataFrame(yj, columns=to_scale)\nlogged_df = pd.DataFrame(np.log1p(df_to_scale), columns=to_scale)\n\n# plt\ub97c \uc0ac\uc6a9\ud55c \ucf54\ub4dc\nfig, ax = plt.subplots(4, 4, figsize=(40, 30))\n\nfor i in range(4):\n    idx = 0\n    for j in range(4): # subplot\ub4e4\uc758 \uc5f4(column)\n        colname = to_scale[idx]\n        if i == 0:\n            ax[i][j].hist(df_to_scale[colname], bins=30)\n            ax[i][j].set_xlabel(colname)\n            ax[i][j].set_ylabel('Frequency')\n        elif i == 1:\n            ax[i][j].hist(scaled_df[colname], bins=30)\n            ax[i][j].set_xlabel(colname)\n            ax[i][j].set_ylabel('Transformed Frequency')\n        elif i == 2:\n            ax[i][j].hist(q_scaled_df[colname], bins=30)\n            ax[i][j].set_xlabel(colname)\n            ax[i][j].set_ylabel('Transformed Frequency')\n        elif i == 3:\n            ax[i][j].hist(logged_df[colname], bins=30)\n            ax[i][j].set_xlabel(colname)\n            ax[i][j].set_ylabel('Logged Frequency')\n            \n        idx += 1","116dbbb7":"# \uba3c\uc800 training set\uacfc test set\uc73c\ub85c \uad6c\ubd84\ud569\ub2c8\ub2e4.\nX = df.drop(['charges'], axis=1)\ny = df['charges']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, shuffle=True, stratify=X['age_bin'])","307f1952":"# Quantile Transformation\nto_scale = ['age', 'bmi']\n\nquantile = QuantileTransformer(n_quantiles=10, random_state=0, output_distribution='normal')\n\nfor col in to_scale:\n    quantile.fit(X_train[[col]])\n    X_train[col] = quantile.transform(X_train[[col]]).flatten()\n    X_test[col] = quantile.transform(X_test[[col]]).flatten()","d888fa75":"print(X_train.isnull().sum())\nX_train.head()","1f61bd0c":"print(X_test.isnull().sum())\nX_test.head()","4e288503":"# \uc774\uc81c \ub2e8\uc704\uc640 \ubd84\ud3ec\ub97c \ub9de\ucd94\uae30 \uc704\ud574 \ud45c\uc900\ud654\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4.\ncols = ['age', 'bmi', 'children']\nfor col in cols:\n    std = StandardScaler()\n    std.fit(X_train[[col]])\n    X_train[col] = std.transform(X_train[[col]]).flatten()\n    X_test[col] = std.transform(X_test[[col]]).flatten()\n    \nX_train.describe()","28feac7e":"# one-hot encoding\uc744 \uc0ac\uc6a9\ud574 \uc131\ubcc4\uc744 \ubc14\uafd4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nonehot_sex = OneHotEncoder()\nsex_train = X_train[['sex']]\nsex_test = X_test[['sex']]\n\nonehot_sex.fit(sex_train) # sklearn\uc758 OneHotEncoder\ub294 2\ucc28\uc6d0 \ubc30\uc5f4(\ub610\ub294 \ub370\uc774\ud130\ud504\ub808\uc784)\uc774 input\uc73c\ub85c \ub4e4\uc5b4\uac00\uc57c \ud569\ub2c8\ub2e4.\nsex_train_onehot = onehot_sex.transform(sex_train).toarray()\nsex_test_onehot = onehot_sex.transform(sex_test).toarray()\n\nX_train['sex'] = sex_train_onehot[:, 1].astype(np.uint8) # \uc5ec\uc131\uc744 0, \ub0a8\uc131\uc744 1\ub85c \ub450\uace0, \uc815\uc218\ud615\uc73c\ub85c \ubc14\uafb8\uaca0\uc2b5\ub2c8\ub2e4.\nX_test['sex'] = sex_test_onehot[:, 1].astype(np.uint8)\n\nX_train.head()","aa2d63f8":"# one-hot encoding\uc73c\ub85c \ud761\uc5f0\uc790 \uc5ec\ubd80 \ubc14\uafb8\uae30\nonehot_smoker = OneHotEncoder()\nsmoker_train = X_train[['smoker']]\nsmoker_test = X_test[['smoker']]\n\nonehot_smoker.fit(smoker_train) # sklearn\uc758 OneHotEncoder\ub294 2\ucc28\uc6d0 \ubc30\uc5f4(\ub610\ub294 \ub370\uc774\ud130\ud504\ub808\uc784)\uc774 input\uc73c\ub85c \ub4e4\uc5b4\uac00\uc57c \ud569\ub2c8\ub2e4.\nsmoker_train_onehot = onehot_smoker.transform(smoker_train).toarray()\nsmoker_test_onehot = onehot_smoker.transform(smoker_test).toarray()\n\nX_train['smoker'] = smoker_train_onehot[:, 1].astype(np.uint8) # \ube44\ud761\uc5f0\uc790\ub97c 0, \ud761\uc5f0\uc790\ub97c 1\ub85c \ub450\uaca0\uc2b5\ub2c8\ub2e4.\nX_test['smoker'] = smoker_test_onehot[:, 1].astype(np.uint8)\n\nX_train.head()","d8f3645b":"# \uac70\uc8fc\uc9c0\uc5ed\uc744 LabelEncoder\ub85c \uc22b\uc790\ud615\uc73c\ub85c \ubc14\uafd4\uc8fc\uae30\nlabel_region = LabelEncoder()\nlabel_region.fit(X_train['region']) # LabelEncoder\ub294 1\ucc28\uc6d0 \ubc30\uc5f4\uc774 input\uc73c\ub85c \ub4e4\uc5b4\uac00\uc57c \ud569\ub2c8\ub2e4.\n\nX_train['region'] = label_region.transform(X_train['region'])\nX_test['region'] = label_region.transform(X_test['region'])\n\nX_train.head()","3f028c10":"# one-hot encoding\uc73c\ub85c \uac70\uc8fc\uc9c0\uc5ed \ubc14\uafb8\uae30\nonehot_region = OneHotEncoder()\nregion_train = X_train[['region']]\nregion_test = X_test[['region']]\n\nonehot_region.fit(region_train) # sklearn\uc758 OneHotEncoder\ub294 2\ucc28\uc6d0 \ubc30\uc5f4(\ub610\ub294 \ub370\uc774\ud130\ud504\ub808\uc784)\uc774 input\uc73c\ub85c \ub4e4\uc5b4\uac00\uc57c \ud569\ub2c8\ub2e4.\nregion_train_onehot = onehot_region.transform(region_train).toarray()\nregion_test_onehot = onehot_region.transform(region_test).toarray()\n\nX_train['region_1'] = region_train_onehot[:, 1].astype(np.uint8) # northwest\uc774\uba74 1, \uc544\ub2c8\uba74 0\nX_train['region_2'] = region_train_onehot[:, 2].astype(np.uint8) # southeast\uc774\uba74 1, \uc544\ub2c8\uba74 0\nX_train['region_3'] = region_train_onehot[:, 3].astype(np.uint8) # southwest\uc774\uba74 1, \uc544\ub2c8\uba74 0\n\nX_test['region_1'] = region_test_onehot[:, 1].astype(np.uint8)\nX_test['region_2'] = region_test_onehot[:, 2].astype(np.uint8)\nX_test['region_3'] = region_test_onehot[:, 3].astype(np.uint8)\n\n# \uc774\uc81c \ubb38\uc790\uc5f4\ub85c \ub41c region \ubcc0\uc218\uc640 \uc5f0\ub839\uad6c\uac04 \ubcc0\uc218\ub294 \uc911\ubcf5\uc744 \uc81c\uac70\ud558\uae30 \uc704\ud574 \ubc30\uc81c\ud558\uaca0\uc2b5\ub2c8\ub2e4.\nX_train.drop(['region', 'age_bin'], axis=1, inplace=True)\nX_test.drop(['region', 'age_bin'], axis=1, inplace=True)","6937f03b":"X_train.head()","b3859ae3":"X_test.head()","2a8e4526":"print(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","aebc84ee":"# \uba3c\uc800 default \ubaa8\ub378\uc744 \uc124\uc815\ud55c \ub4a4, cross-validation\uc744 \ud1b5\ud574 \uc131\ub2a5\uc744 \ud3c9\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4.\nlr = LinearRegression()\nenet = ElasticNet(random_state=42)\ndt = DecisionTreeRegressor(random_state=42)\nrf = RandomForestRegressor(random_state=42)\nada = AdaBoostRegressor(random_state=42)\ngbr = GradientBoostingRegressor(random_state=42)\nxgb = XGBRegressor(random_state=42)\nlgbm = LGBMRegressor(random_state=42)\ncat = CatBoostRegressor(silent=True, random_state=42)\n\nmodels = [lr, enet, dt, rf, ada, gbr, xgb, lgbm, cat]","36c81f14":"# \ud3c9\uac00\uc9c0\ud45c\ub97c RMSE\ub85c \uc0bc\uaca0\uc2b5\ub2c8\ub2e4.\nfor model in models:\n    name = model.__class__.__name__\n    scores = cross_val_score(model, X=X_train, y=y_train, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n    mse = (-1) * np.mean(scores) # negative mean squared error\ub85c \uc124\uc815\ud588\uc73c\ubbc0\ub85c -1\uc744 \uacf1\ud574 \ubd80\ud638\ub97c \ub9de\ucdb0\uc90d\ub2c8\ub2e4.\n    print('Model %s - RMSE: %.4f' % (name, np.sqrt(mse)))","32d2fd39":"# Gradient Boosting\ngbr_params = {\n    'learning_rate': [0.01, 0.05, 0.1],\n    'n_estimators': [50, 80, 100, 200, 300],\n    'max_depth': [3, 5, 7, 9],\n    'min_samples_split': [2, 3, 4, 5],\n    'min_samples_leaf': [1, 2, 3, 5],\n    'random_state': [42]\n}\n\ngbr_search = GridSearchCV(gbr, param_grid=gbr_params, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\ngbr_search.fit(X_train, y_train)\nbest_mse = (-1) * gbr_search.best_score_\nbest_rmse = np.sqrt(best_mse)\n\nprint('Best score: {}, Best params: {}'.format(round(best_rmse, 4), gbr_search.best_params_))","7ae3bf26":"# Random Forest\nrf_params = {\n    'n_estimators': [100, 200, 300, 500],\n    'max_depth': [3, 5, 7, 9],\n    'min_samples_split': [2, 3, 4, 5],\n    'min_samples_leaf': [1, 2, 3, 5],\n    'random_state': [42]\n}\n\nrf_search = GridSearchCV(gbr, param_grid=rf_params, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\nrf_search.fit(X_train, y_train)\nbest_mse = (-1) * rf_search.best_score_\nbest_rmse = np.sqrt(best_mse)\n\nprint('Best score: {}, Best params: {}'.format(round(best_rmse, 4), rf_search.best_params_))","cfc8b85c":"# LGBM\nlgbm_params = {\n    'num_leaves': [25, 31, 35],\n    'learning_rate': [0.01, 0.05, 0.1, 0.5],\n    'n_estimators': [100, 300, 500, 1000],\n    'max_depth': [3, 7, 11],\n    'random_state': [42]\n}\n\nlgbm_search = GridSearchCV(lgbm, param_grid=lgbm_params, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\nlgbm_search.fit(X_train, y_train)\nbest_mse = (-1) * lgbm_search.best_score_\nbest_rmse = np.sqrt(best_mse)\n\nprint('Best score: {}, Best params: {}'.format(round(best_rmse, 4), lgbm_search.best_params_))","e4fa4c67":"# CayBoost\n# CatBoost\ub294 categorical feature\ub97c parameter\ub85c \ub123\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\ncat_features = ['sex', 'smoker', 'region_1', 'region_2', 'region_3']\n\ncat_params = {\n    'learning_rate': [0.01, 0.05, 0.1, 0.5],\n    'n_estimators': [100, 300, 500, 1000],\n    'max_depth': [3, 7, 11],\n    'cat_features': [cat_features], \n    'silent': [True],\n    'random_state': [42]\n}\n\ncat_search = GridSearchCV(cat, param_grid=cat_params, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\ncat_search.fit(X_train, y_train)\nbest_mse = (-1) * cat_search.best_score_\nbest_rmse = np.sqrt(best_mse)\n\nprint('Best score: {}, Best params: {}'.format(round(best_rmse, 4), cat_search.best_params_))","b03ecbe3":"gbr_final = GradientBoostingRegressor(**gbr_search.best_params_)\n\ngbr_final.fit(X_train, y_train)\ny_pred_gbr = gbr_final.predict(X_test)\n\nname = gbr_final.__class__.__name__\n\n# Test RMSE\nmse_gbr = mean_squared_error(y_test, y_pred_gbr)\nprint('RMSE of %s: %.4f' % (name, np.sqrt(mse_gbr)))","01f5f9bd":"rf_final = RandomForestRegressor(**rf_search.best_params_)\n\nrf_final.fit(X_train, y_train)\ny_pred_rf = rf_final.predict(X_test)\n\nname = rf_final.__class__.__name__\n\n# Test RMSE\nmse_rf = mean_squared_error(y_test, y_pred_rf)\nprint('RMSE of %s: %.4f' % (name, np.sqrt(mse_rf)))","9dabc27f":"lgbm_final = LGBMRegressor(**lgbm_search.best_params_)\n\nlgbm_final.fit(X_train, y_train)\ny_pred_lgbm = lgbm_final.predict(X_test)\n\nname = lgbm_final.__class__.__name__\n\n# Test RMSE\nmse_lgbm = mean_squared_error(y_test, y_pred_lgbm)\nprint('RMSE of %s: %.4f' % (name, np.sqrt(mse_lgbm)))","33b633b8":"cat_final = CatBoostRegressor(**cat_search.best_params_)\n\ncat_final.fit(X_train, y_train)\ny_pred_cat = cat_final.predict(X_test)\n\nname = cat_final.__class__.__name__\n\n# Test RMSE\nmse_cat = mean_squared_error(y_test, y_pred_cat)\nprint('RMSE of %s: %.4f' % (name, np.sqrt(mse_cat)))","08dd0390":"## \uc774\uc0c1\uce58 \ud0d0\uc9c0","38e76f58":"## Visualization","1566f66a":"\uc815\uaddc\ud654\ub97c \uc2dc\ud0a4\uace0 \ubcf4\ub2c8 \ud2b9\ud788 BMI feature\uac00 \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae4c\uc6cc\uc84c\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub450 feature\uc5d0 \ub300\ud574\uc11c quantile transformation\uc744 Training set\uacfc Test set\uc5d0 \uc801\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c, \ubaa8\ub4e0 \ubcc0\uc218\uc758 \ub2e8\uc704\uc640 \ubd84\ud3ec\ub97c \ub9de\ucdb0\uc8fc\uae30 \uc704\ud574\uc11c standard scaling\uc744 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4.","e90feee6":"\ubb3c\ub860 \uc9c0\uae08\uc740 4\uac1c\uc758 \uacb0\uacfc\ub97c \ube44\uad50\ud588\uc9c0\ub9cc, \uc2e4\uc804\uc5d0\uc11c\ub294 Model Selection\uc5d0\uc11c \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0b8 \uc54c\uace0\ub9ac\uc998 \ud558\ub098\ub97c \ud0dd\ud574 tuning\uacfc test\ub97c \uc9c4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4!","8f4fd64a":"# Model Selection\n\n\uc5ec\uae30\uc11c \uc0ac\uc6a9\ud560 \ubaa8\ub378\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n* Linear model: Linear Regression, Elastic Net\n* Decision Tree\n* Ensemble(\uc559\uc0c1\ube14): Random Forest, AdaBoost, Gradient Boosting\n* Boosting: XGBoost, LightGBM, CatBoost","7ac5376d":"## \uc0c1\uad00\uad00\uacc4 \ud30c\uc545 \ubc0f \uad6c\uac04 \ub9cc\ub4e4\uae30\n\n\ud2b9\ud788 \uc22b\uc790\ud615 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574\uc11c \uba3c\uc800 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc0c1\uad00\uacc4\uc218 \ud589\ub82c\uacfc \uc0b0\uc810\ub3c4\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","5c156fa1":"## Normal Transformation\n\n\ub2e4\ub9cc, \uc704\uc758 Scaling\uc740 \ub2e8\uc704\ub9cc \ubcc0\ud658\ud574\uc904 \ubfd0 \ubcc0\uc218\uc758 \ubd84\ud3ec \ud615\ud0dc\ub97c \ubc14\uafb8\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc77c\ubc18\uc801\uc73c\ub85c machine learning\uc5d0\uc11c \ud559\uc2b5\uc774 \uc798 \ub418\uae30 \uc704\ud574\uc11c\ub294 \uc124\uba85\ubcc0\uc218\uac00 \ucd5c\ub300\ud55c **\uc815\uaddc\ubd84\ud3ec**\ub97c \ub530\ub97c\uc218\ub85d \uc88b\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc815\uaddc\ubd84\ud3ec\uc758 \ud615\ud0dc\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \ubcc0\uc218\ub4e4\uc744 \ucd5c\ub300\ud55c \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\uac8c \ubcc0\uc218\ub97c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud558\uba70, \uc774\ub97c \uc815\uaddc\ubcc0\ud658(Normal Transformation)\uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4.\n\n\ubcc0\uc218\uac00 \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\ub3c4\ub85d \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc5d0\ub294 \ubcf4\ud1b5 \uc544\ub798\uc758 3\uac00\uc9c0 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n* \ub85c\uadf8 \ubcc0\ud658: \ubcc0\uc218\uc5d0 \ub85c\uadf8\ub97c \ucde8\ud574\uc8fc\uba74 \uc815\uaddc\ubd84\ud3ec\uc758 \ud615\ud0dc\uc640 \uac00\uae5d\uac8c \ubcc0\ud658\ub418\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c np.log\ub97c \uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uace0, \ubcc0\uc218\uc5d0 0\uc774 \ud3ec\ud568\ub41c \uacbd\uc6b0 np.log1p\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n    - \ub2e4\ub9cc, \ub85c\uadf8\uc758 \ud2b9\uc131\uc0c1 0\ubcf4\ub2e4 \uc791\uc740 \uac12\uc774 \uc788\ub294 \ubcc0\uc218\uc5d0\ub294 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n    \n    \n* Power Transformation: \ud2b9\uc815\ud55c \uc218\uc2dd\uc5d0 \ub530\ub77c\uc11c \ubcc0\uc218\ub97c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc73c\ub85c\ub294 \uc544\ub798\uc758 \ub450 \uac00\uc9c0\uac00 \uc788\uc73c\uba70, \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798\uc758 \ube14\ub85c\uadf8\ub97c \ucc38\uc870\ud558\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n    - Box-Cox Transformation:\n    - Yeo-Johnson Transformation\n    - For more: [[\ub370\uc774\ud130 \uc804\ucc98\ub9ac] Yeo Johnson \ubcc0\ud658](https:\/\/m-insideout.tistory.com\/5)\n\n\ub2e4\ub9cc Box-Cox \ubcc0\ud658 \uc5ed\uc2dc 0\ubcf4\ub2e4 \ud070 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, Yeo-Johnson\uc740 \ubcc0\uc218\uc758 \ubd80\ud638\uc640 \uad00\uacc4 \uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\uace0 \ud558\uba70, Scikit-learn\uc5d0\uc11c\ub294 preprocessing\uc758 power_transform \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* Quantile Transformation: Quantile function\uc774\ub780 \uc218\ud559\uc801\uc73c\ub85c \ud655\ub960\uac12\uc774 \uc8fc\uc5b4\uc9c0\uba74, \ubbf8\ub9ac \uc815\ud55c \ubd84\ud3ec\uc5d0 \ub530\ub77c\uc11c \uadf8\uc5d0 \uc0c1\uc751\ud558\ub294 $x$\uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc911\uc694\ud55c \uc810\uc740 \uc774 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ubcc0\uc218\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub4e4\uc758 \uc21c\uc704\uac00 \ub9e4\uaca8\uc9c0\uace0 \ubd84\uc11d\uc790\uac00 \uc9c0\uc815\ud55c \ubd84\ud3ec\uc758 \ud615\ud0dc\ub85c \ubc14\ub010\ub2e4\uace0 \ud569\ub2c8\ub2e4.\n    - Scikit-learn\uc5d0\uc11c\ub294 preprocessing\uc758 QuantileTransformer\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    - \uc6d0\uce59\uc801\uc73c\ub85c quantile function\uc5d0 \ub4e4\uc5b4\uac00\ub294 input\uc740 [0, 1] \uc0ac\uc774\uac00 \ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc, scikit-learn\uc758 QuantileTransformer \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 input\uc758 \uad6c\uac04\uc744 \ub9de\ucdb0\uc8fc\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4.","f1f4df5c":"\ubcc0\ud658\ub41c \uacb0\uacfc\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","52af5db1":"\ucd1d 9\uac1c\uc758 \uc774\uc0c1\uce58\uac00 \ubc1c\uacac\ub418\uc5c8\uc2b5\ub2c8\ub2e4! \uc774\ub4e4 \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 \uc804\uccb4 \ub370\uc774\ud130\ub97c \ud55c \ubc88 \uc0b4\ud3b4\ubcf4\uace0, \ud55c \ubc88 \uc9c0\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","a1a126fe":"\ucc38\uace0\ub85c RMSE\ub294 \ud3c9\uade0 \uc81c\uacf1\uadfc \ud3b8\ucc28(Root Mean Square Deviation; RMSD) \ub610\ub294 \ud3c9\uade0 \uc81c\uacf1\uadfc \uc624\ucc28(Root Mean Square Error; RMSE)\ub77c\uace0\ub3c4 \ud558\uba70, \ucd94\uc815 \uac12 \ub610\ub294 \ubaa8\ub378\uc774 \uc608\uce21\ud55c \uac12\uacfc \uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c \uad00\ucc30\ub418\ub294 \uac12\uc758 \ucc28\uc774\ub97c \ub2e4\ub8f0 \ub54c \ud754\ud788 \uc0ac\uc6a9\ud558\ub294 \uce21\ub3c4\uc785\ub2c8\ub2e4. \uc815\ubc00\ub3c4(precision)\ub97c \ud45c\ud604\ud558\ub294\ub370 \uc801\ud569\ud569\ub2c8\ub2e4. \uac01\uac01\uc758 \ucc28\uc774\uac12\uc740 \uc794\ucc28(residual)\ub77c\uace0\ub3c4 \ud558\uba70, \ud3c9\uade0 \uc81c\uacf1\uadfc \ud3b8\ucc28\ub294 \uc794\ucc28\ub4e4\uc744 \ud558\ub098\uc758 \uce21\ub3c4\ub85c \uc885\ud569\ud560 \ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.(\ucd9c\ucc98 : \uc704\ud0a4\ubc31\uacfc - \ud3c9\uade0 \uc81c\uacf1\uadfc \ud3b8\ucc28)\n\n\ud655\uc778\uacb0\uacfc Gradient Boosting Regressor\uac00 \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \ubc11\uc73c\ub85c\ub294 LightGBM\uacfc CatBoost, \uadf8\ub9ac\uace0 Random Forest\uac00 \uc788\ub124\uc694. \ub113\uac8c \uc774 4\uac1c\uc758 \ubaa8\ub378\uc744 \uac00\uc9c0\uace0 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \uc9c4\ud589\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","c30a70eb":"\uc5ec\uae30\uc11c \uc8fc\uc758\ud560 \uc810\uc740 \uac70\uc8fc\uc9c0\uc5ed\uc740 \ucd1d 4\uac1c\uc758 \uce74\ud14c\uace0\ub9ac\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc one-hot encoding\uc740 **'~\uc778\uc9c0 \uc544\ub2cc\uc9c0'**\ub9cc\uc744 \ud310\ub2e8\ud558\ub294 \uc774\uc9c4(binary) \ubcc0\uc218\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud574\uc11c \uac01 \uac70\uc8fc\uc9c0\uc5ed\uc5d0 one-hot encoding\uc744 \ucde8\ud574\uc8fc\uba74, \ucd1d 4\uac1c\uc758 one-hot encoding \uacb0\uacfc\uac00 \ub098\uc62c \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n* southwest\uc778\uc9c0 \uc544\ub2cc\uc9c0\n* southeast\uc778\uc9c0 \uc544\ub2cc\uc9c0\n* northwest\uc778\uc9c0 \uc544\ub2cc\uc9c0\n* northeast\uc778\uc9c0 \uc544\ub2cc\uc9c0\n\n\ub2e4\ub9cc, \uc774\ub807\uac8c \ub9cc\ub4e4\uc5b4\uc9c4 one-hot encoded \ubcc0\uc218(\uc77c\ubc18\uc801\uc73c\ub85c dummy\ubcc0\uc218\ub77c\uace0 \ud569\ub2c8\ub2e4)\ub97c \ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud560 \ub54c\uc5d0\ub294, \uc804\uccb4 \uce74\ud14c\uace0\ub9ac\uc758 \uac1c\uc218\ubcf4\ub2e4 \ubc18\ub4dc\uc2dc **\ud558\ub098 \uc801\uac8c** \ud3ec\ud568\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc989, \uc5ec\uae30\uc11c\ub294 \ucd1d 3\uac1c\ub9cc\uc774 \ub4e4\uc5b4\uac00\uc57c \ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc704\uc5d0\uc11c \uc131\ubcc4\uc744 \ub354\ubbf8\ubcc0\uc218\ub85c \uad6c\ubd84\ud560 \ub54c \uc5ec\uc131\uc744 0, \ub0a8\uc131\uc744 1\ub85c \ub454 column \ud558\ub098\ub9cc \ucd94\uac00\ud588\uc5c8\uc8e0? \uc774\uac83\uc740 \ub2e4\uc2dc \ub9d0\ud574\uc11c \ub450 \uac1c\uc758 \uce74\ud14c\uace0\ub9ac \ubcc0\uc218(\uc5ec\uc131, \ub0a8\uc131)\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c \ud55c \uac1c\uc758 column\uc774\uba74 \ucda9\ubd84\ud558\ub2e4\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4.\n\n\ub098\uc544\uac00, \uce74\ud14c\uace0\ub9ac \ubcc0\uc218\uc758 \uac1c\uc218\ub9cc\ud07c\uc758 \ub354\ubbf8\ubcc0\uc218\uac00 \ubaa8\ub450 \ud3ec\ud568\ub418\ub294 \uacbd\uc6b0, \uc989 \ub0a8\uc131\uacfc \uc5ec\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \ub354\ubbf8\ubcc0\uc218\uac00 \ubaa8\ub450 \ud3ec\ud568\ub418\ub294 \uacbd\uc6b0, \uc218\ud559\uc801\uc73c\ub85c '\uc644\uc804 \ub2e4\uc911\uacf5\uc120\uc131(Perfect Multicollinearity)'\uc774\ub77c\ub294 \uac83\uc774 \ubc1c\uc0dd\ud558\uace0, \uc774\uc5d0 \ub530\ub77c\uc11c \ubd84\uc11d \uc790\uccb4\uac00 \ubd88\uac00\ub2a5\ud574\uc9d1\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud56d\uc0c1 \ub354\ubbf8\ubcc0\uc218\ub294 \uce74\ud14c\uace0\ub9ac\uc758 \uac1c\uc218\ubcf4\ub2e4 \ud558\ub098 \uc801\uac8c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n\ub2e8 \uadf8 \uc804\uc5d0, labelEncoder\ub97c \uc0ac\uc6a9\ud574 \ubb38\uc790\uc5f4\uc744 \uc22b\uc790\ud615\uc73c\ub85c \uba3c\uc800 \ubc14\uafd4\uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","9cc01b23":"## Scaling\n\nScaling\uc774\ub780 \ubcc0\uc218\uc758 \ub2e8\uc704\ub97c \uc870\uc815\ud558\uae30 \uc704\ud574 \ubcc0\uc218\ub97c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5\uc744 \ub9d0\ud569\ub2c8\ub2e4. \ub300\ud45c\uc801\uc778 scaling\uc5d0\ub294 \ud45c\uc900\ud654(Standardization)\uc640 \uc815\uaddc\ud654(Normalization)\uac00 \uc788\ub294\ub370, \uac01\uac01\uc758 \uc6a9\uc5b4\ub294 \ub2e4\uc74c\uc758 \ucc28\uc774\uac00 \uc788\ub2e4\uace0 \ud569\ub2c8\ub2e4.\n\n* \uc815\uaddc\ud654(Normalization)\ub780 \ubcc0\uc218\uc758 \ubc94\uc704\ub97c $[0, 1]$ \uc0ac\uc774\ub85c \uc62e\uae30\ub294 \uc791\uc5c5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 Scikit-learn \ud328\ud0a4\uc9c0\ub85c\ub294 MinMaxScaler\uac00 \uc788\uc2b5\ub2c8\ub2e4. MinMaxScaler\ub97c \uc218\uc2dd\uc73c\ub85c \uc4f0\uba74 \uc544\ub798\uc640 \uac19\uc740\ub370, \uc5ec\uae30\uc11c $X$\uac00 \uac1c\ubcc4 \ubcc0\uc218, $X_{min}$\uc774 \ubcc0\uc218\uc758 \ucd5c\uc19f\uac12, \uadf8\ub9ac\uace0 $X_{max}$\uac00 \ubcc0\uc218\uc758 \ucd5c\ub313\uac12\uc785\ub2c8\ub2e4.\n\n$$ \\frac{X - X_{min}}{X_{max} - X_{min}} $$\n\n* \ud45c\uc900\ud654(Standardization)\ub780 \ubcc0\uc218\ub85c\ubd80\ud130 \ud3c9\uade0\uac12\uc744 \ube7c\uace0, \ub2e4\uc2dc \ubcc0\uc218\uc758 \ud45c\uc900\ud3b8\ucc28\ub85c \ub098\ub204\uc5b4 \uacb0\uacfc\uc801\uc73c\ub85c \ubcc0\uc218\uac00 \ud3c9\uade0 0, \ud45c\uc900\ud3b8\ucc28 1\uc744 \uac16\ub3c4\ub85d \ub9de\ucdb0\uc8fc\ub294 \uc791\uc5c5\uc785\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 Scikit-learn \ud328\ud0a4\uc9c0\ub85c\ub294 StandardScaler\uac00 \uc788\uc2b5\ub2c8\ub2e4. StandardScaler\ub97c \uc218\uc2dd\uc73c\ub85c \uc4f0\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n$$ \\frac{X - \\bar{X}}{\\sigma_{X}} $$\n\n\ub2e8, \uc8fc\uc758\ud560 \uc810\uc740 Scikit-learn\uc758 \ud328\ud0a4\uc9c0\ub85c scaling\uc744 \uc9c4\ud589\ud560 \ub54c **Training set\uc5d0\ub9cc fitting\uc744 \ud574\uc8fc\uace0, Test set\uc5d0\ub294 fitting\uc744 \ud574\uc8fc\uba74 \uc548 \ub41c\ub2e4\ub294 \uc810**\uc785\ub2c8\ub2e4.\n\nScikit-learn\uc758 MinMaxScaler\uc640 StandardScaler\uc5d0\ub294 \uac01\uac01 fit, transform, \uadf8\ub9ac\uace0 fit_transform\uc758 \uba54\uc18c\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. StandardScaler\ub97c \uc608\uc2dc\ub85c \ub4e4\uc790\uba74, fit \uba54\uc18c\ub4dc\ub294 \ubcc0\uc218\uc758 \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \ud559\uc2b5\ud558\uace0, transform\uc740 fit\uc5d0\uc11c \ud559\uc2b5\ub41c \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\uc5d0 \ub530\ub77c\uc11c \uc2e4\uc81c \ubcc0\uc218\ub97c \ubcc0\ud658\ud558\ub294 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4. fit_transform\uc740 \uc774 \ub450 \ub2e8\uacc4\ub97c \ud55c \ubc88\uc5d0 \uc218\ud589\ud569\ub2c8\ub2e4. \n\n\ub2e4\ub9cc \uc774\ub54c Test set\uc5d0\ub3c4 fitting\uc744 \ud574\uc8fc\uac8c \ub418\uba74 Training set\uc5d0\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c8\ub85c\uc6b4 \uc815\ubcf4(Test set\uc758 \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28)\uac00 \uc0ac\uc6a9\ub418\ub294 \uaf34\uc774\uae30 \ub54c\ubb38\uc5d0, \ud559\uc2b5\uc774 \uc81c\ub300\ub85c \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub97c **\ub370\uc774\ud130 \ub204\uc218(Data Leakage)**\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubcf4\ud1b5 scaling\ud560 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c, training set\uc758 \ub370\uc774\ud130\uc5d0 fit \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uace0, \uadf8\ub807\uac8c fit\ud55c \uacb0\uacfc\ub97c \uac00\uc9c0\uace0 training set\uacfc test set\uc744 \ub3d9\uc2dc\uc5d0 \ubcc0\ud658\uc2dc\ud0b5\ub2c8\ub2e4.","cb5fd1ce":"\ubaa8\ub450 \ud3c9\uade0\uc774 0, \ud45c\uc900\ud3b8\ucc28 1\ub85c \ub9de\ucdb0\uc84c\uc2b5\ub2c8\ub2e4.\n\n\uc774\uc81c, \ubc94\uc8fc\ud615 \ubcc0\uc218\uc778 \uc131\ubcc4, \uac70\uc8fc\uc9c0\uc5ed, \ud761\uc5f0\uc790 \uc5ec\ubd80\ub97c \ucc98\ub9ac\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","cb4048ed":"# Data and Library Import\n\n\uba3c\uc800, \ub370\uc774\ud130\uc640 \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc624\uaca0\uc2b5\ub2c8\ub2e4.","f06e9307":"# Hyperparameter Tuning","c8b7af35":"# EDA (Exploratory Data Analysis)\n\n\ubcf4\ud1b5 '\ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d'\uc774\ub77c\uace0 \ubd80\ub974\uba70, \ub370\uc774\ud130\uc758 \ubd84\ud3ec \ub610\ub294 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud3b4\ubcf4\ub294 \ub2e8\uacc4\uc785\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ud2b9\uc9d5\uc744 \ud30c\uc545\ud558\uace0, \ud559\uc2b5\uc774 \ub354\uc6b1 \uc798 \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub3c4\ub85d \ubcc0\ud658\uc2dc\ud0ac \ubcc0\uc218\ub97c \ucc3e\uae30\ub3c4 \ud569\ub2c8\ub2e4.","831cee79":"describe \uba54\uc18c\ub4dc\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc22b\uc790\ud615 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub9cc \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc0b4\ud3b4\ubcf4\ub2c8 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\ub4e4\uc774 \ubcf4\uc785\ub2c8\ub2e4.\n\n* \uc790\ub140\uc758 \uc218(children)\uc758 \ud45c\uc900\ud3b8\ucc28\uac00 \ud3c9\uade0\uacfc \ube44\uc2b7\ud55c \uc218\uc900\uc785\ub2c8\ub2e4. \uc774\ub294 feature\uc758 \ubd84\ud3ec\uac00 \ub9e4\uc6b0 \ub113\uac8c \ud37c\uc838 \uc788\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc544\ub9c8 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uadf8\ub824\ubd10\uc57c \uc54c\uaca0\uc9c0\ub9cc \ucc28\ud6c4\uc5d0 \ubd84\ud3ec\ub97c \ubaa8\uc544\uc8fc\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n* \uc5ec\uae30\uc11c\ub294 \ubcf4\ud5d8\ub8cc(charges)\uac00 \uc885\uc18d\ubcc0\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \ud574\ub2f9 \uc0ac\ud56d\uc774 \uc5c6\uc9c0\ub9cc, \ub9cc\uc77c \ub3c5\ub9bd\ubcc0\uc218(feature)\ub77c\uace0 \uac00\uc815\ud55c\ub2e4\uba74,\n    - \ubcf4\ud5d8\ub8cc\uc640 \ub2e4\ub978 feqture\ub4e4\uc5d0 \ub300\ud574\uc11c \uc22b\uc790 \ub2e8\uc704 \ucc28\uc774\uac00 \uadf9\uc2ec\ud558\uac8c \ub098\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. age\uc640 bmi\ub294 \uc22b\uc790\uac00 \ucee4\ubd24\uc790 \ub450 \uc790\ub9ac\uc778\ub370, \ubcf4\ud5d8\ub8cc\ub294 \ub9cc \ub2e8\uc704\uae4c\uc9c0 \uc62c\ub77c\uac11\ub2c8\ub2e4. \uc774\ub807\uac8c feature \uc0ac\uc774\uc758 \ub2e8\uc704 \ucc28\uc774\uac00 \ud074 \uacbd\uc6b0, \ub2e8\uc704\uac00 \ud070 feature\uc758 \uc601\ud5a5\uc744 \uc9c0\ub098\uce58\uac8c \ub9ce\uc774 \ubc1b\uc744 \uac00\ub2a5\uc131\uc774 \uc788\uace0, \ub530\ub77c\uc11c \ud559\uc2b5\uc774 \uc81c\ub300\ub85c \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    - \ub530\ub77c\uc11c \ubcf4\ud1b5 \ub2e8\uc704 \ucc28\uc774\uac00 \ud070 feature\ub4e4\uc740 \ub2e8\uc704\ub97c \ub9de\ucdb0\uc8fc\ub294 \uc791\uc5c5(Scaling)\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \n    - \ubb3c\ub860, \uc55e\uc11c\ub3c4 \ub9d0\ud588\ub4ef\uc774 \uc5ec\uae30\uc11c\ub294 \ubcf4\ud5d8\ub8cc\uac00 \uc885\uc18d\ubcc0\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 scaling\uc744 \ud574\uc8fc\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4.","cd92abe6":"\uc774\ucc98\ub7fc \uc131\ubcc4\uc774 \uc22b\uc790\ud615\uc73c\ub85c \ubc14\ub010 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \ud761\uc5f0\uc790 \uc5ec\ubd80, \uac70\uc8fc\uc9c0\uc5ed\ub3c4 \ubc14\uafd4\uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","202ec326":"\ub2e4\ud589\ud788 \uacb0\uce21\uce58\ub294 \uc5c6\uc5b4 \ubcf4\uc774\uba70, \uc131\ubcc4(sex), \ud761\uc5f0\uc5ec\ubd80(smoker), \uac70\uc8fc\uc9c0\uc5ed(region) column(\ubcf4\ud1b5 feature\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4)\uc744 \uc81c\uc678\ud55c column\ub4e4\uc740 \ubaa8\ub450 \uc22b\uc790(\uc815\uc218\uc640 \uc2e4\uc218)\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4. \ud55c\ud3b8, 'object'\ub294 column\uc5d0 \uc5ec\ub7ec \uc790\ub8cc\ud615\uc774 \uc11e\uc5ec\uc788\uac70\ub098, \ubb38\uc790\uc5f4(string)\uc5d0 \ubd99\ub294 \uc790\ub8cc\ud615\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.","4eda1832":"\uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud3b4\ubcf4\ub2c8 \ub098\uc774\uc640 \uc885\uc18d\ubcc0\uc218\uc778 \ubcf4\ud5d8\ub8cc \uc0ac\uc774\uc758 \uc0c1\uad00\uacc4\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ub370\uc774\ud130 \uc0c1\uc5d0\uc11c 20\ub300 \uc774\ud558\uc5d0 \ubd84\ud3ec\uac00 \ub9e4\uc6b0 \ub9ce\uc774 \ubab0\ub824\uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774 \ubd84\ud3ec\uc5d0 \ub9de\ucdb0\uc11c training set\uacfc test set\uc744 \ub098\ub204\ub294 \uac8c \uc911\uc694\ud574 \ubcf4\uc785\ub2c8\ub2e4. \n\n\ub530\ub77c\uc11c \uc774\ub97c \uc704\ud574 \uc5f0\ub839\ubcc4 \uad6c\uac04\uc73c\ub85c \ub098\ub204\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\ub9cc 18\uc138\uc640 19\uc138\uc5d0 \ubab0\ub824 \uc788\ub294 \uac83\uc744 \ucd5c\ub300\ud55c \uac10\uc548\ud558\uae30 \uc704\ud574 20\ub300 \uc774\uc0c1\ubd80\ud130\ub294 5\uc138 \ub2e8\uc704\ub85c \ub04a\uaca0\uc2b5\ub2c8\ub2e4.","47d75a81":"\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc774 4\uac1c\uc758 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud574 test\ub97c \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","835f418b":"# Test \ubc0f \uacb0\uacfc \ud655\uc778","772633cc":"# Scaling, Transforming and Encoding","4e1e75c7":"# Data Explanation\n\n*\uc6b0\uc120 \uc774 \uae00\uc740 DPARK\ub2d8\uc758 \uae00\uc5d0\uc11c \ud37c\uc640 \ucc38\uace0\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ub0b4\uc6a9\uc744 \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4\n\ub9c1\ud06c : https:\/\/www.kaggle.com\/wltjd54\/insurance-prediction-full-ver\n\n\uba38\uc2e0\ub7ec\ub2dd\uc740 \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 \uac12\uc5d0 \ub530\ub77c \ud68c\uadc0\uc640 \ubd84\ub958\ub85c \ub098\ub20c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud68c\uadc0(regression) \ub294 \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 \ud0c0\uac9f\uac12\uc774 \uc2e4\uc218, \uc989 \uc22b\uc790\uc778 \uacbd\uc6b0 \uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud68c\uadc0\ub294 \uc608\uce21 \uacb0\uacfc\uac00 \uc5f0\uc18d\uc131\uc744 \uc9c0\ub2d9\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc5f0\uc18d\uc131\uc774\ub780, \ub9d0\uadf8\ub300\ub85c \uc5f0\uc18d\ud558\ub294 \uac12\uc744 \ub9d0\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, 1.2, 1.201, 1.2001 \ucc98\ub7fc \uc5f0\uc18d\uc131\uc744 \uc9c0\ub2cc\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4. \ud68c\uadc0\ub97c \ud1b5\ud574 \uc190\ud574\uc561, \ub9e4\ucd9c\ub7c9,\uac70\ub798\ub7c9, \ud30c\uc0b0\ud560 \ud655\ub960 \ub4f1\uc744  \uc608\uce21\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \ud68c\uadc0\ubb38\uc81c\ub780 \uc2e4\uc218\ud615 \ubcc0\uc218\ub97c \ud1b5\ud574 \uc608\uce21\ud558\uc5ec \uc608\uce21 \uacb0\uacfc\uac12\uc774 \uc5f0\uc18d\uc131\uc744 \uc9c0\ub2c8\uace0 \uc788\ub294 \uacbd\uc6b0 \ud68c\uadc0\ubb38\uc81c\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubd84\ub958(classification) \ub294 \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 \ud0c0\uac9f\uac12\uc774 \ubc94\uc8fc\ud615 \ubcc0\uc218\uc778 \uacbd\uc6b0 \uc785\ub2c8\ub2e4. \ud68c\uadc0\uc640\ub294 \ub2e4\ub974\uac8c \ubd84\ub958\ub294 \uc608\uce21 \uacb0\uacfc\uac00 \uc5f0\uc18d\uc131\uc744 \uc9c0\ub2c8\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc5f0\uc18d\uc131\uc744 \uc9c0\ub2c8\ub294 \uc5f0\uc18d\uac12\uc774 \uc544\ub2cc \uc774\uc0b0\uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc774\uc0b0\uac12\uc774\ub780, 0\uacfc1\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \uac12\uc73c\ub85c\uc368 \uc5f0\uc18d\uc801\uc774 \uc544\ub2cc \ub2e8\uc18d\uc801\uc778 \uac12\uc744 \ub73b\ud569\ub2c8\ub2e4. \ubd84\ub958\ub97c \ud1b5\ud574 \ubd80\ub3c4 \uc5ec\ubd80(yes\/no), \uc5ec\uc2e0 \uc2b9\uc778 \uc5ec\ubd80, \ub3d9\ubb3c \ubd84\ub958(dog\/cat) \ub4f1\uc744 \uc608\uce21\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubd84\ub958\uc758 \uc885\ub958\uc5d0\ub294 \uc774\uc9c4\ubd84\ub958\uc640 \ub2e4\uc911\ubd84\ub958\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc9c4\ubd84\ub958(binary Classification)\ub294 Yes\/ No\ucc98\ub7fc \ub450\uac00\uc9c0\uc758 \ub2f5\uc73c\ub85c \ubd84\ub958\ud558\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4. \ub2e4\uc911\ubd84\ub958(multiclass Classification)\ub294 \uc774\uc9c4\ubd84\ub958\uc5d0\uc11c \ub2f5\uc758 \uac2f\uc218\ub9cc \uc99d\uac00\ud55c \ubd84\ub958\uc758 \ud615\ud0dc\uc785\ub2c8\ub2e4. \uc989, \ubd84\ub958\ubb38\uc81c\ub780 \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \ud1b5\ud574 \uc608\uce21\ud558\uc5ec \uc608\uce21 \uacb0\uacfc\uac12\uc774 \uc774\uc0b0\uac12\uc744 \uc9c0\ub2c8\uace0 \uc788\ub294 \uacbd\uc6b0 \ubd84\ub958\ubb38\uc81c\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ucd9c\ucc98 : https:\/\/www.davincilabs.ai\/wiki\/?q=YToxOntzOjEyOiJrZXl3b3JkX3R5cGUiO3M6MzoiYWxsIjt9&bmode=view&idx=7709711&t=board\n\n\uc800\ub294 \uc758\ub8cc\ubcf4\ud5d8 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574 \ud55c \uc0ac\ub78c\uc774 \ubcf4\ud5d8\ub8cc\ub97c \uc5bc\ub9c8\ub098 \ub0bc\uc9c0\ub97c \uc608\uce21\ud558\ub294 \ud68c\uadc0 \ubb38\uc81c\ub97c \ub2e4\ub904\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc704\uc758 input\uc5d0 \ucd94\uac00\ub41c \ub370\uc774\ud130\uc5d0\uc11c \ubc14\ub85c \uc774\uc6a9\ud560 \uc218 \uc788\uace0, \ub370\uc774\ud130\ub97c \uc774\ub8e8\uace0 \uc788\ub294 column\ub4e4\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n* Age: \ud53c\ubcf4\ud5d8\uc790\uc758 \ub098\uc774\n* Sex: \ud53c\ubcf4\ud5d8\uc790\uc758 \uc131\ubcc4\n* BMI: \ud53c\ubcf4\ud5d8\uc790\uc758 \uccb4\uc9c8\ub7c9 \uc9c0\uc218 - $\\frac{Weight\\:(kg)}{\\left(Height\\:(m)\\right)^{2}}$\n* Children: \ud53c\ubcf4\ud5d8\uc790\uc758 \uc790\ub140\uc758 \uc218\n* Smoker: \ud761\uc5f0 \uc5ec\ubd80 (yes \/ no)\n* Region: \ud53c\ubcf4\ud5d8\uc790\uac00 \uac70\uc8fc\ud558\ub294 \uc9c0\uc5ed (Southeast \/ Southwest \/ Northeast \/ Northwest)\n* Charges: \ubcf4\ud5d8\ub8cc","8bf845e9":"\ubb3c\ub860 \uc704\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc5d0\uc11c \ubcf4\uc558\ub4ef\uc774 5\uba85\uc758 \uc790\ub140\ub97c \uac00\uc9c4 \uad00\uce21\uce58\uc758 \uc22b\uc790\ub294 \ucd1d 18\uba85\uc73c\ub85c \ub9e4\uc6b0 \uadf8 \uc218\uac00 \uc801\uc9c0\ub9cc, \ub2e4\uc74c\uc758 \uc774\uc720\ub4e4\ub85c \uc5ec\uae30\uc11c\ub294 \uc81c\uc678\ud558\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4.\n\n* \uc560\ucd08\uc5d0 \ubcc0\uc218\uc758 \ubc94\uc704\uac00 0\uc5d0\uc11c 5 \uc0ac\uc774\uc758 \uc815\uc218\ub85c \uc8fc\uc5b4\uc838 \uc788\uae30 \ub54c\ubb38\uc5d0, 5\uba85\uc758 \uc790\ub140\ub97c \uac00\uc9c4 \uc0ac\ub78c\ub4e4\uc774 \ub2e4\ub978 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \ub69d \ub5a8\uc5b4\uc838 \uc788\ub2e4\uace0 \ubcf4\uae30\ub294 \uc5b4\ub835\uc2b5\ub2c8\ub2e4.\n\n* \ub2e4\ub978 \ubcc0\uc218\ub4e4\uc5d0 \ube44\ud574\uc11c \ubcf4\ud5d8\ub8cc\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5\uc774 \ub9e4\uc6b0 \uc791\ub2e4\ub294 \uac83(\uc0c1\uad00\uacc4\uc218 \uc57d 0.068)\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc0c1\uce58\ub294 \uc885\uc18d\ubcc0\uc218\ub97c \uc608\uce21\ud558\ub294 \ub370 \uc788\uc5b4 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubbf8\uce58\ub294 \ubcc0\uc218\ub97c \uc911\uc2ec\uc73c\ub85c \uc81c\uac70\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.\n\n\ub2e4\ub9cc, boxplot\uc744 \uadf8\ub824\ubcf4\ub2c8 BMI\uc758 \uac12\ub4e4\uc774 \uc2ec\uc0c1\uce58 \uc54a\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \uc704\uc5d0 \uc704\uce58\ud55c \uc9c1\uc120\uc73c\ub85c\ubd80\ud130 \ubc97\uc5b4\ub09c \uac12\ub4e4\uc774 \ubcf4\uc774\ub294\ub370, \uc774 \uac12\ub4e4\uc774 outlier\uc77c \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4. IQR\uc744 \ud1b5\ud574 \uc774\uc0c1\uce58\uc758 \uc874\uc7ac\ub97c \ud30c\uc545\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","eaca1854":"\ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf8 \uacb0\uacfc \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\uc744 \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* \ub098\uc774\uac00 20\ub300\ubcf4\ub2e4 \uc5b4\ub9b0 \uc0ac\ub78c\ub4e4\uc758 \uc22b\uc790\uac00 \ub9e4\uc6b0 \ub9ce\uc73c\uba70, \uc5ed\uc2dc \uadf8 \ub54c\ubb38\uc5d0 \uc790\ub140\uc758 \uc22b\uc790 \uc5ed\uc2dc 0\uc5d0 \ub9e4\uc6b0 \ub9ce\uc740 \ub3c4\uc218\uac00 \ubab0\ub824\uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ub7ec\ud55c \ubd84\ud3ec\uc5d0 \ub9de\ucdb0\uc11c training set\uacfc test set\uc744 \ub098\ub204\ub294 \uac83\uc774 \uc911\uc694\ud574 \ubcf4\uc785\ub2c8\ub2e4.\n\n* \ud55c\ud3b8, \uc790\ub140\uac00 4\uba85 \uc774\uc0c1\uc778 \uc0ac\ub78c\ub4e4\uc758 \uc218\ub294 \uc774\uc0c1\uce58\uc5d0 \uac00\uae4c\uc6cc \ubcf4\uc774\ub294\ub370, \uc774\ub294 \ub4a4\uc5d0\uc11c \ub2e4\uc2dc \ud55c \ubc88 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* \ub0a8\ub140 \ube44\uc728\uc740 \uac70\uc758 \ube44\uc2b7\ud558\uba70, \ud761\uc5f0\uc790\uc5d0 \ube44\ud574 \ube44\ud761\uc5f0\uc790\uc758 \ube44\uc911\uc774 \ub192\uc2b5\ub2c8\ub2e4(\uc774 \uc5ed\uc2dc \ub098\uc774\uc640 \uad00\ub828\uc774 \uc788\uc5b4 \ubcf4\uc785\ub2c8\ub2e4.). \uadf8\ub9ac\uace0 \uac70\uc8fc\uc9c0\uc5ed\uc758 \uacbd\uc6b0 southeast\uc5d0 \uac70\uc8fc\ud558\ub294 \uc0ac\ub78c\ub4e4\uc774 \ub2e4\ub978 \uc9c0\uc5ed\uc5d0 \ube44\ud574 \ub9ce\uc9c0\ub9cc, \uadf8\ub798\ub3c4 \uadf8 \ubd84\ud3ec\uac00 \uac70\uc758 \uc77c\uc815\ud55c \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n\n* BMI\uc758 \uacbd\uc6b0 \uc57d\uac04\uc740 \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uce5c \ubd84\ud3ec\ub97c \ubcf4\uc774\uace0, \ubb34\ub9ac\uc5d0\uc11c \ub5a8\uc5b4\uc9c4 \uac12\uc774 \ubcf4\uc785\ub2c8\ub2e4. \uc774 \uc5ed\uc2dc \ub2e4\uc2dc \ud55c \ubc88 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."}}