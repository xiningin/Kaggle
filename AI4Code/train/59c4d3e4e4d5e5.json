{"cell_type":{"53d65b97":"code","979328f4":"code","3e3c5946":"code","4fa2258c":"code","b97a6746":"code","871ca759":"code","bd18afc5":"code","75bd336a":"code","ee3cb43c":"code","0dd0ddf6":"code","db03e0bd":"code","278ddcd9":"markdown","2eafe6f4":"markdown","5965e4f7":"markdown","f767c816":"markdown","e620027d":"markdown","19b94ecc":"markdown","52a12395":"markdown","6ea1e931":"markdown","a1069af8":"markdown","b538c9eb":"markdown","e6460af8":"markdown"},"source":{"53d65b97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","979328f4":"#### Data Manipulation\nimport pandas as pd\nimport numpy as np\nimport warnings\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings('ignore')\n\n#### Data Visulization \nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nfrom matplotlib import ticker\nimport seaborn as sns\nsns.set(style = 'white')\n\n############## Libraries for Machine Learning Modeling ###############\n\n# Model Building\nfrom sklearn.model_selection import train_test_split, KFold\n\n# Machine Learning Models\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\n\n# Evaluation\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\nfrom IPython.core.display import display, HTML\n\ndef display_side_by_side(dfs:list, captions:list):\n    \"\"\"Display tables side by side to save vertical space\n    Input:\n        dfs: list of pandas.DataFrame\n        captions: list of table captions\n    \"\"\"\n    output = \"\"\n    combined = dict(zip(captions, dfs))\n    for caption, df in combined.items():\n        output += df.style.set_table_attributes(\"style='display:inline'\").set_caption(caption).set_table_styles([{'selector':'caption', 'props':[('color', '6a63ea'), ('font-size', '16px')]}]).bar(color = '#6a63ea').background_gradient(cmap = 'Reds', axis =1)._repr_html_()\n        output += 20 * \"\\xa0\\xa0\\xa0\"\n    display(HTML(output))","3e3c5946":"train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\nss = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")","4fa2258c":"train.head()","b97a6746":"print(f\"Shape of the Train Set is: {train.shape}\")\nprint(f\"Shape of the Test Set is: {train.shape}\")\nprint(f\"The Dataset has {len(train.columns) - 1} features and 1 target variable: {train.columns[-1]}\")\n\ntarget = 'claim'","871ca759":"train.describe().style.bar(color = '#6a63ea').background_gradient(axis = 0)","bd18afc5":"temp = pd.DataFrame([train.nunique(), test.nunique()]).T\ntemp.columns = ['Train', 'Test']\n\nmissing = pd.DataFrame([train.isna().sum(), test.isna().sum()]).T\nmissing.columns = ['Train', 'Test']\n\ndisplay_side_by_side([temp, missing], ['Number of Unique Values in Each Column', 'Number os missing values in Each Column'])","75bd336a":"fig = plt.figure(figsize=(22, 12))\ngs = fig.add_gridspec(2, 1)\n\nbackground_color = \"#eae9fc\"\ncolor_palette = [\"#6a63ea\", \"#dee84a\"]\n\n# Fig 1\nax0 = fig.add_subplot(gs[0, 0])\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color)\n\nfor s in ['right', 'top']:\n    ax0.spines[s].set_visible(False)\n\nax0.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(train[\"claim\"], palette=color_palette, ax=ax0, zorder=3)\nax0.set_xlabel(\"\")\nax0.set_ylabel(\"\")\n\n# Fig 2\nax1 = fig.add_subplot(gs[1, 0])\n\nfig.patch.set_facecolor(background_color)\nax1.set_facecolor(background_color)\n\nax1.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\ntrain[target].value_counts().plot.pie(autopct='%1.1f%%', colors = color_palette, ax = ax1)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n_ = plt.title('Target Distribution',fontsize=30, y = 2.24, x = 0.45, fontweight='bold', fontfamily='serif', color=\"#323232\")","ee3cb43c":"id_col = 'id'\nfeatures = [col for col in train.columns if col not in [target, id_col]]","0dd0ddf6":"f, ax = plt.subplots(17, 7, figsize = (23, 51))\naxx = ax.flatten()\nf.patch.set_facecolor(background_color)\n\nfor index, col in enumerate(features):\n    plt.ticklabel_format(style='plain')\n    axx[index].set_facecolor(background_color)\n    sns.histplot(ax = axx[index], x = col, data = train, color = '#6a63ea')\n    axx[index].set_xlabel(\"\")\n    axx[index].set_ylabel(\"\")\n    axx[index].tick_params(labelsize=4, width=0.5)\n    axx[index] = axx[index].twinx()\n    plt.ticklabel_format(style='plain')\n    sns.kdeplot(ax = axx[index], x=col, data = train, color='#6a63ea')\n    axx[index].set_xlabel(\"\")\n    axx[index].set_ylabel(\"\")\n    axx[index].tick_params(labelsize=0)\n    axx[index].set_xlabel(col, fontsize=4, fontweight='bold')\nfor s in ['right', 'top', 'bottom', 'left']:\n    axx[-1].spines[s].set_visible(False)\naxx[-1].get_xaxis().set_visible(False)\naxx[-1].get_yaxis().set_visible(False)","db03e0bd":"f, ax = plt.subplots(17, 7, figsize = (24, 57))\naxx = ax.flatten()\nf.patch.set_facecolor(background_color)\n\nfor index, col in enumerate(features):\n    plt.ticklabel_format(style='plain')\n    axx[index].set_facecolor(background_color)\n    sns.boxplot(ax = axx[index], x = target, y = col,data = train, palette= color_palette)\n    axx[index].set_xlabel(\"\")\n    axx[index].set_ylabel(\"\")\n    axx[index].tick_params(labelsize=4, width=0.5)\nfor s in ['right', 'top', 'bottom', 'left']:\n    axx[-1].spines[s].set_visible(False)\naxx[-1].get_xaxis().set_visible(False)\naxx[-1].get_yaxis().set_visible(False)","278ddcd9":"---\n\n<a id=\"2\"><\/a>\n# 2. Preparations\n\nImporting packages and loading the data that will be used in the analysis process. Packages that will be loaded are mainly for data manipulation and data visualization. \n\n<a id=\"2.1\"><\/a>\n\n\n### 2.1 Importing Packages","2eafe6f4":"<a id = \"2.2\"><\/a>\n\n### 2.2 Loading The Dataset","5965e4f7":"# Please Do Upvote If You Like The Notebook. And Feel free to give suggestions about improving my work. Thank You.\n\n## Stay Tuned For Further Updates. ","f767c816":"<a id = \"3.3\"><\/a>\n### 3.3 Number of Unique Values and Missing Values in Each Columns","e620027d":"<a id = \"3.4\"><\/a>\n\n### 3.4 Distribution of Target variable","19b94ecc":"---\n<a id = '4'><\/a>\n# 4. Univariate Analysis\n\n[back to top](#table-of-contents)\n<a id=\"table-of-contents\"><\/a>","52a12395":"<a id=\"1\"><\/a>\n# 1. Introduction\n\n<a id=\"1.1\"><\/a>\n### 1.1 Problem Statement\nAs per the description,\nThe dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting whether a claim will be made on an insurance policy. Although the features are anonymized, they have properties relating to real-world features.\n\n<a id=\"1.2\"><\/a>\n### 1.2 The Goal\nIn this competition, we have to build a model to predict whether a customer would be interested in insurance. \n\nThe evaluation metrics for this problem statement is area under the ROC curve.","6ea1e931":"---\n<a id = '3'><\/a>\n# 3. Getting Basic Understanding of The Dataset\n\n[back to top](#table-of-contents)\n<a id=\"table-of-contents\"><\/a>\n\n\n<a id = \"3.1\"><\/a>\n### 3.1 Seeing the data and shape","a1069af8":"---\n<a id = '5'><\/a>\n# 5. Bivariate Analysis\n\n[back to top](#table-of-contents)\n<a id=\"table-of-contents\"><\/a>","b538c9eb":"<a id = \"3.2\"><\/a>\n\n### 3.2 Statistics","e6460af8":"<a id = \"table-of-contents\"><\/a>\n# Table of Contents\n\n- [1 Introduction](#1)\n    - [1.1 Problem Statement](#1.1)\n    - [1.2 The Goal](#1.2)\n- [2 Preparations ](#2)\n    - [2.1 Importing Packages](#2.1)\n    - [2.2 Loading The Dataset](#2.2)\n- [3 Getting Basic Understanding of The Data](#3)\n    - [3.1 Seeing the data and shape](#3.1)\n    - [3.2 Statistics](#3.2)\n    - [3.3 Number of Unique Values and Missing in Each Column](#3.3)\n    - [3.4 Distribution of target Variable](#3.4)\n    - [3.5 Observations](#3.5)\n- [4 Univariate Analysis](#4)\n- [5 Bivariate Analysis](#5)"}}