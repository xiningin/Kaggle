{"cell_type":{"235812fb":"code","f351ec81":"code","847a2637":"code","6648653c":"code","cf595ca3":"code","d11ba83b":"code","82552b05":"code","edaefaec":"code","0cb4ac91":"code","38800752":"code","46cd6934":"code","cff9054f":"code","83577850":"code","b2162867":"code","13fb72f5":"code","76d39a71":"code","4d9fbe35":"code","18b75d5b":"code","e83e1e63":"code","886724e8":"code","6f84d0e9":"code","5009059c":"code","3269ee18":"code","d3198bd4":"code","f4596f52":"code","be791060":"code","25ff2167":"code","f69503b8":"code","badd4aa4":"code","36e8949b":"code","d4c4ca2c":"code","36232dae":"code","2a6fbd4a":"code","c63a5418":"code","8e2b40e0":"code","2bae181c":"code","0ced721b":"code","1a570c28":"code","2206547d":"code","d532dd3e":"code","69f042e8":"code","7b09119a":"code","034b511b":"code","cf9fa1c3":"markdown","4ad69dd8":"markdown"},"source":{"235812fb":"import numpy as np\nimport pandas as pd\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nfrom plotly.subplots import make_subplots\n\nfrom pathlib import Path\ndata_dir = Path('..\/input\/')\n\nimport os\nos.listdir(data_dir)","f351ec81":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","847a2637":"os.listdir('..\/input\/covid19-global-forecasting-week-4\/')","6648653c":"df = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\n# df.rename(columns={'Country_Region' : 'country'}, inplace=True)\ndf","cf595ca3":"test = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\ntest[ test['Country_Region'] == 'India']","d11ba83b":"sample = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/submission.csv')\nsample","82552b05":"test","edaefaec":"df = pd.concat([df , test])\ndf","0cb4ac91":"icu_df = pd.read_csv(\"..\/input\/hospital-beds-by-country\/API_SH.MED.BEDS.ZS_DS2_en_csv_v2_887506.csv\")\nicu_df['Country Name'] = icu_df['Country Name'].replace('United States', 'US')\nicu_df['Country Name'] = icu_df['Country Name'].replace('Russian Federation', 'Russia')\nicu_df['Country Name'] = icu_df['Country Name'].replace('Iran, Islamic Rep.', 'Iran')\nicu_df['Country Name'] = icu_df['Country Name'].replace('Egypt, Arab Rep.', 'Egypt')\nicu_df['Country Name'] = icu_df['Country Name'].replace('Venezuela, RB', 'Venezuela')\ndf['Country_Region'] = df['Country_Region'].replace('Czechia', 'Czech Republic')\n\n\n# We wish to have the most recent values, thus we need to go through every year and extract the most recent one, if it exists.\nicu_cleaned = pd.DataFrame()\nicu_cleaned[\"Country_Region\"] = icu_df[\"Country Name\"]\nicu_cleaned[\"icu\"] = np.nan\n\nfor year in range(1960, 2020):\n    year_df = icu_df[str(year)].dropna()\n    icu_cleaned[\"icu\"].loc[year_df.index] = year_df.values\n\ndf = pd.merge(df, icu_cleaned, on='Country_Region' , how = 'left')","38800752":"df['CS'] = df['Country_Region'].astype(str) + df['Date'].astype(str) + df['Province_State'].astype(str)\n\ndf","46cd6934":"df_temperature = pd.read_csv(\"..\/input\/covid19-global-weather-data\/temperature_dataframe.csv\")\ndf_temperature","cff9054f":"df_temperature.rename(columns={'country' : 'Country_Region'}, inplace=True)","83577850":"df_temperature['Country_Region'] = df_temperature['Country_Region'].replace('USA', 'US')\ndf_temperature['Country_Region'] = df_temperature['Country_Region'].replace('UK', 'United Kingdom')\ndf_temperature = df_temperature[[\"Country_Region\",  \"date\", \"humidity\", \"sunHour\", \"tempC\", \"windspeedKmph\"]].reset_index()\ndf_temperature.rename(columns={'province': 'state'}, inplace=True)\ndf_temperature[\"Date\"] = pd.to_datetime(df_temperature['date'])\n# df_temperature['state'] = df_temperature['state'].fillna('')\ndf_t = df_temperature.groupby('Country_Region').mean()\n\ndf_t","b2162867":"# df_temperature['CS'] = df_temperature['Country_Region'].astype(str) + df_temperature['date'].astype(str)\n# df_temperature","13fb72f5":"df[\"Date\"] = pd.to_datetime(df['Date'])\n","76d39a71":"df1 = pd.merge(df , df_t, on=['Country_Region'],how = 'left' )\n# df1.to_csv(\"countries_icu_temp.csv\")","4d9fbe35":"df1","18b75d5b":"df1['Province_State'] = df1['Province_State'].fillna(df1['Country_Region'])\ncols = ['icu', 'humidity', 'sunHour', 'tempC',\n       'windspeedKmph']\nfor col in cols : \n    df1[col] = df1[col].fillna(df1[col].mean())\n# df1 = df1.set_index('CS')","e83e1e63":"# df1['Province_State'].unique()","886724e8":"n_start_death = 100\nn_start_death1 = 1\n\n# fatality_top_countires = top_country_df.sort_values('fatalities', ascending=False).iloc[:n_countries]['country'].values\n# country_df['date'] = pd.to_datetime(country_df['date'])\n\n## DAYS SINCE\n\ndf_list = []\nfor country in df1['Province_State'].unique():\n    this_country_df = df1.query('Province_State == @country')\n    start_date = this_country_df.query('ConfirmedCases > @n_start_death')['Date'].min()\n    start_date1 = this_country_df.query('ConfirmedCases > @n_start_death1')['Date'].min()\n    this_country_df['DConfirmed'] = this_country_df['Date'] - start_date\n    this_country_df['DConfirmed1'] = this_country_df['Date'] - start_date1\n#     this_country_df = this_country_df.query('Date >= @start_date')\n#     this_country_df['date_since'] = this_country_df['Date'] - start_date\n#     this_country_df['ConfirmedCases'] = np.log10(this_country_df['fatalities'] + 1)\n#     this_country_df['fatalities_log1p'] -= this_country_df['fatalities_log1p'].values[0]\n    df_list.append(this_country_df)\n\ntmpdf = pd.concat(df_list)\ntmpdf['DConfirmed'] = tmpdf['DConfirmed'] \/ pd.Timedelta('1 days')","6f84d0e9":"# tmpdf[2050:2100]\ntmpdf['DConfirmed'] = tmpdf['DConfirmed'].fillna(-50)\ntmpdf['DConfirmed1'] = tmpdf['DConfirmed1'].fillna(-50)\n\ndf1 = tmpdf","5009059c":"## split into yr , month , date\ndf1['y'] , df1['m'] ,df1['d'] = df1['Date'].astype(str).str.split('-').str\ndf1","3269ee18":"len(df1)","d3198bd4":"# train.info()","f4596f52":"df1.columns","be791060":"df1 = df1[['ConfirmedCases', 'Date', 'Fatalities',\n       'Province_State', 'icu', 'humidity', 'sunHour', 'tempC',\n       'windspeedKmph' , 'DConfirmed' , 'ForecastId' ,  'DConfirmed1', 'y', 'm', 'd']]\n# df1 = df1[['ConfirmedCases', 'Country_Region', 'Date', 'Fatalities',\n#         'Province_State','DConfirmed' , 'ForecastId' ,  'DConfirmed1', 'y', 'm', 'd']]\n# df1['ConfirmedCases'] = np.log(df1['ConfirmedCases'] +1 )\n# df1['Fatalities'] = np.log(df1['Fatalities'] + 1)\ndf1","25ff2167":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf1['Province_State'] = le.fit_transform(df1['Province_State'])\ndf1","f69503b8":"train = df1[df1['ForecastId'].isnull()]\n# train = df1[df1['Date'] < '2020-03-26']\ntrain.head()\ntesting = df1[~df1['ForecastId'].isnull()]\n# len(testing)\n\n\ntrain1 = train[train['Date'] < '2020-03-26']\nval = train[train['Date'] >= '2020-03-26']\ntrain_X = train1.drop(['ConfirmedCases' , 'Fatalities'] , axis = 1)\ntrain_y = train1[['ConfirmedCases' , 'Fatalities']] \n\nval_X = val.drop(['ConfirmedCases' , 'Fatalities'] , axis = 1)\nval_y = val[['ConfirmedCases' , 'Fatalities']] \n\n\ntestX = testing.drop(['ConfirmedCases' , 'Fatalities'] , axis = 1)\n\n\ncategorical = ['Country_Region' , 'Province_State']\n\ndef column_index(df, query_cols):\n    cols = df.columns.values\n    sidx = np.argsort(cols)\n    return sidx[np.searchsorted(cols, query_cols, sorter=sidx)]\ncategorical_features_indices = column_index(train_X, categorical)","badd4aa4":"len(testing)","36e8949b":"len(sample)","d4c4ca2c":"testing.info()\n","36232dae":"#train.describe()\nfrom catboost import CatBoostRegressor\n\n# model = LGBMRegressor(num_leaves = 85,learning_rate =10**-1.89,n_estimators=100,min_sum_hessian_in_leaf=(10**-4.1),min_child_samples =2,subsample =0.97,subsample_freq=10,\n#                    colsample_bytree = 0.68,reg_lambda=10**1.4,random_state=1234,n_jobs=4)\nmodel =  CatBoostRegressor(iterations= 500,\n#                              learning_rate=0.001,\n                             depth=16,\n                             eval_metric='RMSE',\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 50,\n                                 task_type = \"GPU\",\n                                 devices='0:1',\n\n                             od_wait=100)\n\n    \nmodel.fit(train_X, train_y['ConfirmedCases'],\n                 eval_set=(val_X, val_y['ConfirmedCases']),\n#                   cat_features=categorical_features_indices,\n                  use_best_model=True)\n\n## Start model \n# By implementing a regression model which tries to use the country input variables to predict the most recent number of infections and deaths as target, we can extract the relative feature importance. This can be done pretty well with a Random Forest Regressor.\n\n# sample","2a6fbd4a":"len(sample)","c63a5418":"testX.info()\n\ntestX['ConfirmedCases'] = model.predict(testX) \n# sample['ConfirmedCases'] = np.exp(sample['ConfirmedCases'])\n# sample","8e2b40e0":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 500)\n","2bae181c":"testX","0ced721b":"testX.info()","1a570c28":"try :\n    testX['Province_State'] = le.inverse_transform(testX['Province_State'])\nexcept :\n    x = 1","2206547d":"testX[testX['Province_State'] == 'India']","d532dd3e":"model1 =  CatBoostRegressor(iterations=500,\n#                              learning_rate=0.001,\n                             depth=16,\n                             eval_metric='RMSE',\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 50,\n                             task_type = \"GPU\",\n                             devices='0:1',\n                             \n                             od_wait=100)\n\nmodel1.fit(train_X, train_y['Fatalities'],\n                 eval_set=(val_X, val_y['Fatalities']),\n#                   cat_features=categorical_features_indices,\n                 use_best_model=True)\n\n# ## Start model \n# By implementing a regression model which tries to use the country input variables to predict the most recent number of infections and deaths as target, we can extract the relative feature importance. This can be done pretty well with a Random Forest Regressor.","69f042e8":"sample\n\ntestX.info()\ntestX['Fatalities'] = model1.predict(testX)\n# sample['Fatalities'] = np.exp(sample['Fatalities'])\n# sample['Fatalities'] = 2**(model1.predict(testX) - 1)\nsample = sample.set_index(['ForecastId'])","7b09119a":"sample.to_csv('.\/submission.csv')","034b511b":"sample[:50]","cf9fa1c3":"Load the cleaned data from https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report.","4ad69dd8":"## 4. Temperature Data\nIn our next step, we wish to analyze the weather and temperature data of the respective countries since the outbreak of the virus. We have composed a dataset here: https:\/\/www.kaggle.com\/winterpierre91\/covid19-global-weather-data\n\nWe hope to find some colleration between certain weather metrics and the speed of the number of infections\/deaths."}}