{"cell_type":{"0de6565f":"code","934bdf01":"code","a153b323":"code","eed00db3":"code","d009c04a":"code","830b2f96":"code","1d6fd56a":"code","fe599889":"code","c02b45c1":"code","e290ed8f":"code","bd5e56fc":"code","c51bf31d":"code","d0cb8d64":"code","8b08e05b":"code","fd47db93":"code","c2c79e49":"code","2efa0189":"code","1977f232":"markdown","35601cc1":"markdown","6c3541e5":"markdown","461f3f06":"markdown","1bc6c8fb":"markdown","5b077cb8":"markdown","b19d2ca3":"markdown","3edba2f7":"markdown","d351d17c":"markdown","1139194a":"markdown","2aad292d":"markdown","e4b626a8":"markdown","3af3be74":"markdown","a7f547e7":"markdown","0843bb18":"markdown","cdc0f847":"markdown","52d53072":"markdown","39e4533f":"markdown","13237b82":"markdown","63677481":"markdown","7830206e":"markdown"},"source":{"0de6565f":"#Import pandas and numpy for data analysis\nimport pandas as pd\nimport numpy as np\n\n#Import Seaborn and Matplotlib for data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\n#Regular Expressions\nimport re\n\n#Warning Messages Control\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#Handle Date Time Convertions between pandas and matplotlib\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\n# Use white grid plot background from seaborn\nsns.set(font_scale=1.5, style=\"whitegrid\")\n\n#We are using the Bayesian Method \nplt.style.use('bmh')\n\n#We automatically generate the EDA using the Pandas_profiling package\nimport pandas_profiling","934bdf01":"##This gives the maximum columns in a pandas dataFrame. Sometimes pandas will hide columns. \npd.set_option('max_columns', 100)","a153b323":"#Import plays and game data\nplays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')\ngames = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')\nplayers=pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')","eed00db3":"#Section 1 - #Correcting, Completing, Creating, and Converting\n\ndef ProcessPlays(df):\n    \n    #Return df if the function has been executed\n    if 'Blitz'in df:\n        return df \n    \n    ##############################################################\n    #Blitz\n    #Categorize if it is a blitz\n    df['Blitz'] = np.where(df['numberOfPassRushers']>4, 1,0)\n    \n    ##############################################################\n    #Personnel\n    df.dropna(subset=['personnelO','personnelD'])  #lot of missing records in the end\n    \n    #Offense Team Formation using 'personnelO' column \n    temp = df['personnelO'].str.split(',',n = 2, expand = True)\n    df['Off_RB'] = temp[0].str.split(' ',n = 1, expand = True)[0]\n    df['Off_TE'] = temp[1].str.split(' ',n = 2, expand = True)[1]\n    df['Off_WR'] = temp[2].str.split(' ',n = 2, expand = True)[1]\n\n    #Defense Team Formation using 'personnelD' column\n    temp2 = df['personnelD'].str.split(',',n = 2, expand = True)\n    df['Def_DL'] = temp2[0].str.split(' ',n = 1, expand = True)[0]\n    df['Def_LB'] = temp2[1].str.split(' ',n = 2, expand = True)[1]\n    df['Def_DB'] = temp2[2].str.split(' ',n = 2, expand = True)[1]\n    \n    return df\n\nplays = ProcessPlays(plays)","d009c04a":"#Defense Success\n\ndef DefenseSuccess(df):\n    #Return df if the function has been executed\n    if 'Defense_Success'in df:\n        return df \n    \n    #use 'passResult' \n    df['Defense_Success'] = np.where(df['passResult'] != 'C',1,0 )\n\n    #fourth down - playResult < yardsToGo\n    df['Defense_Success'].loc[(df['yardsToGo'] > df['playResult']) &  (df['down']==4 )] = 1\n    \n    #At least 3.5 yards per play\n    df['Defense_Success'].loc[(df['playResult']<3.5) &  (df['down']!=4 )] = 1\n\n    return df\n\nplays = DefenseSuccess(plays)","830b2f96":"def AdditionalCleaning(df):\n    \n    #Return df if the function has been executed\n    if not 'playDescription'in df:\n        return df \n    \n    #Section 3 - Additional Cleaning \n    \n    #gameClock - Fill in Missing Values\n    \n    na_clock = df[df.gameClock.isnull()]\n    na_clock['TimeFromDesc'] = na_clock['playDescription'].str.split(' ',n = 1, expand = True)[0]\n    na_clock['TimeFromDesc'] =  na_clock['TimeFromDesc'].str[1::].str[:-1]\n    na_clock['TimeFromDesc'] = na_clock['TimeFromDesc'].str.split(':')\n    na_clock.loc[:,'mm'] = na_clock['TimeFromDesc'].map(lambda x:x[0]).str.zfill(2)\n    na_clock.loc[:,'ss'] = na_clock['TimeFromDesc'].map(lambda x:x[1]).str.zfill(2)\n    na_clock['gameClock'] = na_clock['mm'].astype(str) +':' + na_clock['ss'].astype(str) + ':00'\n    df['gameClock'].loc[df['gameClock'].isnull()] = na_clock['gameClock']\n\n    #change gameClock to 'SecondsToEndQuar' (How many seconds left till the end of the current quarter)\n    \n    df['mm'] = df.gameClock.str[:2]\n    df['ss'] = df.gameClock.str[3:5]\n    df['SecondsToEndofQuar'] = 15*60 - (df['mm'].astype(int)*60 +df['ss'].astype(int))\n    \n    #drop the unnecesaary cols\n    df.drop(['mm','ss','gameClock'],axis=1, inplace=True)\n    \n    ##############################################################\n    #possessionTeam and yardlineSide --- too much categories.\n    #add a column to define if possessionTeam == yardlineSide\n    df['PossYardlineSameSide'] = 1\n    df['PossYardlineSameSide'].loc[df['possessionTeam']!=df['yardlineSide']] = 0\n    \n    #df.drop(['possessionTeam','yardlineSide'],axis=1, inplace=True)\n    \n    ##############################################################\n    #offenseFormation fillna (141 records) based on distribution. \n    OffFor_Dist = df.offenseFormation.value_counts(normalize = True)\n    OffFor_na = df['offenseFormation'].isnull()\n    df.loc[OffFor_na,'offenseFormation'] = np.random.choice(OffFor_Dist.index,size = len(df[OffFor_na]),p=OffFor_Dist.values)    \n    \n    ##############################################################\n    #typeDropback - fill in missing values\n    # array(['TRADITIONAL', 'SCRAMBLE_ROLLOUT_LEFT', 'DESIGNED_ROLLOUT_LEFT', 'SCRAMBLE_ROLLOUT_RIGHT', 'DESIGNED_ROLLOUT_RIGHT', 'SCRAMBLE','UNKNOWN', nan], dtype=object)\n    df['typeDropback'].loc[df.typeDropback == 'UNKNOWN'] = np.nan\n    DropbackDist = df.typeDropback.value_counts(normalize = True)\n    Dropback_na = df['typeDropback'].isnull()\n    df.loc[Dropback_na,'typeDropback'] = np.random.choice(DropbackDist.index,size = len(df[Dropback_na]),p=DropbackDist.values)    \n    \n    ##############################################################\n    #drop na\n    df.dropna(how = \"any\", inplace = True)\n    ##############################################################\n    #Change from object to int\n    df['Off_RB'] = df['Off_RB'].astype(int)\n    df['Off_TE'] = df['Off_TE'].astype(int)\n    df['Off_WR'] = df['Off_WR'].astype(int)\n    df['Def_DL'] = df['Def_DL'].astype(int)\n    df['Def_LB'] = df['Def_LB'].astype(int)\n    df['Def_DB'] = df['Def_DB'].astype(int)\n    \n    \n    ##############################################################\n    #drop some of the columns; \n    df.drop(['playDescription',\n             'playType',\n             #'typeDropback',\n             #'preSnapVisitorScore',\n             #'preSnapHomeScore',\n             #'numberOfPassRushers',  \n             'penaltyCodes',         #-Remove -- \"result\"\n             'penaltyJerseyNumbers', #-player\n             'epa',\n             #,'offenseFormation',\n             'personnelO',\n             'personnelD',\n             'passResult',           #-Remove -- \"result\" \n             #'offensePlayResult',    #-Remove -- \"result\" \n             'playResult',           #-Remove -- \"result\" \n             'isDefensivePI',        #-Remove -- \"result\" \n             #'Blitz',               \n             #'gameId',             \n             'playId'                #-Remove -- id column\n            ],axis=1, inplace=True)\n    return df\n\nplays = AdditionalCleaning(plays)\n    ","1d6fd56a":"#down\ndf1 = pd.DataFrame(plays.groupby(['down'])['Defense_Success'].mean())\ndf1['Defense_Fail'] = 1-df1['Defense_Success']\ndf1 = df1.reset_index()\n\n#plot figure\ndf1.plot(x=\"down\", y=[\"Defense_Fail\", \"Defense_Success\"], kind=\"bar\")\nplt.legend(loc='upper left', bbox_to_anchor=(1, 0.5))\nplt.title(\"Down v.s. Defense Success Rate\")","fe599889":"#offenseFormation\ndf2 = pd.DataFrame(plays.groupby(['offenseFormation'])['Defense_Success'].mean())\ndf2['Defense_Fail'] = 1-df2['Defense_Success']\ndf2 = df2.reset_index()\n\n#Plot\ndf2.plot(x=\"offenseFormation\", y=[\"Defense_Fail\", \"Defense_Success\"], kind=\"bar\")\nplt.legend(loc='upper left', bbox_to_anchor=(1, 0.5))\nplt.title(\"Offensive Formation v.s. Defense Success Rate\")\nplt.xlabel(\"Offensive Formation\")","c02b45c1":"#numberOfPassRushers\ndf3 = pd.DataFrame(plays.groupby(['numberOfPassRushers'])['Defense_Success'].mean())\ndf3['Defense_Fail'] = 1-df3['Defense_Success']\ndf3 = df3.reset_index()\n\n#Remove 1 and 8 to avoid confusion\ndf3 = df3[2:8]\n\n#Plot\ndf3.plot(x=\"numberOfPassRushers\", y=[\"Defense_Fail\", \"Defense_Success\"], kind=\"bar\")\nplt.legend(loc='upper left', bbox_to_anchor=(1, 0.5))\nplt.title(\"Number of PassRushers v.s. Defense Success Rate\")\nplt.xlabel(\"Number of PassRushers\")","e290ed8f":"gameTeam = games[['gameId','homeTeamAbbr','visitorTeamAbbr','week']]\n#Merge to get the Defense Team\ngame_play = plays.merge(gameTeam,on='gameId')\ngame_play = game_play[['possessionTeam','homeTeamAbbr','visitorTeamAbbr','week','Blitz']]\ngame_play['DefenseTeam'] = 'temp'\ngame_play['DefenseTeam'].loc[game_play.possessionTeam == game_play.homeTeamAbbr] = game_play.visitorTeamAbbr\ngame_play['DefenseTeam'].loc[game_play.possessionTeam != game_play.homeTeamAbbr] = game_play.possessionTeam\n#Plot the percentage of Blitz for each team\nfig, ax = plt.subplots(figsize = (12,3))\ngame_play.groupby(['DefenseTeam'])['Blitz'].mean().plot(kind = 'bar')\nax.set_title('% of Blitz for Each Team')","bd5e56fc":"#Def_DB\ndf5 = pd.DataFrame(plays.groupby(['Def_DB'])['Defense_Success'].mean())\ndf5['Defense_Fail'] = 1-df5['Defense_Success']\ndf5= df5.reset_index()\n#Remove DB = 2 to avoid confusion\ndf5 = df5[1:]\n#Plot\ndf5.plot(x=\"Def_DB\", y=[\"Defense_Fail\", \"Defense_Success\"], kind=\"bar\")\nplt.legend(loc='upper left', bbox_to_anchor=(1, 0.5))\nplt.title(\"Number of Defensive Backs v.s. Defense Success Rate\")\nplt.xlabel(\"Number of Defensive Backs\")","c51bf31d":"#SecondsToEndofQuar\nsns.distplot(plays[plays.Defense_Success == 0].SecondsToEndofQuar)\nsns.distplot(plays[plays.Defense_Success == 1].SecondsToEndofQuar) \nplt.title(\"Seconds Left In Quarter v.s. Defense Success Rate\")","d0cb8d64":"#Pandas Profiling for Games\nreport_game = pandas_profiling.ProfileReport(games)\n\n#Display the Report\ndisplay(report_game)","8b08e05b":"#Pandas Profiling for Players\nreport_players=pandas_profiling.ProfileReport(players)\n\n#Display the Report\ndisplay(report_players)","fd47db93":"#Pandas Profiling for Plays\nreport_plays = pandas_profiling.ProfileReport(plays)\n\n#Display the Report\ndisplay(report_plays)","c2c79e49":"##Create a new DataFrame with visitor team names\nvisitor_team_names = games.visitorTeamAbbr.sort_values().unique()\ndf_visitor_team_names=pd.DataFrame(visitor_team_names, columns=['team'])\n\n##Create a new DataFrame with home team names\nhome_team_names = games.homeTeamAbbr.sort_values().unique()\ndf_home_team_names=pd.DataFrame(home_team_names)\n\n#Identify the shape of the plays dataset\nplays.shape\n\n#Return  the mean number of defenders in the box given that the pass result is a 'Sack'  \nplays.groupby(plays['passResult']=='S')['defendersInTheBox'].mean()\n\n#Return the median number of defenders in the box if the pass result is a sack. \nplays.groupby(plays['passResult']=='S')['defendersInTheBox'].median()\n\n#Return the number of Pass Rushers by the pass result\nplays.groupby(by=plays['passResult'] == 'S')['numberOfPassRushers'].value_counts()\n\n#Return the mean number of Pass Rushers grouped by Pass Result\nplays.groupby('passResult', as_index=False)['numberOfPassRushers'].mean()\n\n#Return the median Number of Pass Rushers grouped by Pass Result\nplays.groupby('passResult', as_index=False)['numberOfPassRushers'].median()\n\n#Create a list of offensive, defensive, and special team roles\ncat_item = {'Offense': ['QB', 'RB', 'FB', 'WR', 'TE', 'HB'], \n            'Defense': ['OLB', 'MLB', 'LB', 'ILB', 'CB', 'DE', 'DT', 'NT', 'DB', 'S', 'SS', 'FS'], \n            'Special': ['K', 'P', 'LS']}\nitem_cat = {w: k for k, v in cat_item.items() for w in v}\n\n#We are mapping the positions that we have defined to the team_role column. \nplayers['team_role'] = players['position'].map(item_cat)\n","2efa0189":"from plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n#distribution based on team weight\ndefense_height_weight_distribution = px.scatter(data_frame = players[players['team_role'] == 'Defense'], x = 'weight', y = 'height', \n                                        color=\"position\", symbol = 'position',\n                                        color_discrete_map ={\"Defense\": \"red\"},\n                                        marginal_x = 'histogram', marginal_y = 'box',\n                                        labels = {'position': 'team they are playing in:'})\n\n\ndefense_height_weight_distribution.update_layout(autosize = False, width =1200, height =600)\n","1977f232":"# Section 2 - Defense Success\n\nOur team created a new metric to measure the defensive success to showcase how effective a blitz was for the defense. One of the main challenges when defining whether a blitz is successful or not is figuring out how exactly to quantify success. While a sack is oftentimes one of the easiest and most widely identified outcomes of a blitz, it is not the only outcome that is useful. This is why our team created a new category called defense success to accurately measure the success of a play. Success is defined as 1, while failure is defined as 0. \n\nFirstly, we defined success for a blitz as being when the play results in the lack of a completion. Our team did this for a couple of reasons. There are times in which a quarterback doesn't take a sack, however the result of the pressure results in an incompletion. We define this as being a success for the defense as the play didn't result in net positive yardage for the offensive. \n\nSecondly, we looked at the plays where it resulted in the yards to go being greater than the play result. This indicates to our team that the offense did not gain the necessary amount of yards that was necessary to gain a first down. We looked at those plays on thth down as this means the offensive will now either have to punt, kick a field goal, or go for it on 4th down. Each of these results is not an ideal scenario for the offensive. \n\nThirdly, we looked at plays where the play result resulted in less than 3.5 yards. Typically if an offense gains less than 3.5 yards per play, they will have reached 4th down as they won't have converted on the 3rd down. By limiting the total amount of offensive yards to less than 3.5 yards per play, a defense can successfully limit the productivity of the offense. \n","35601cc1":"# Graph 5 - How Many Defensive Backs Should Be On The Field In A Blitz?\nNext we analyze different positions to see what types of personal grouping are most successful when conducting a blitz. By doing so, NFL teams can figure out the correct packages to send in on a blitz. If a NFL team decides to blitz, there should be exactly 3, 6, or 7 defensive backs present as those are the numbers with the highest defense success rate as both were greater than 50%. While this may be counterintuitive, it actually makes a lot of sense. It is standard that there are at least 4 defensive backs, consisting of two cornerbacks and two safeties. If there are less than 4 defensive backs, it may indicate there is some sort of goal line formation where blitzes are more typical and there may be substituted linebackers on the passrush instead. Additionally, with a greater number of defensive backs at 6 or 7, not all of them may be blitzing, but some will, which is a considerable amount of pressure to put on the quarterback. This is subjective to the gameplay, design, and the context of the play so this will vary, but these are extremely important insights to dive into further. ","6c3541e5":"# Section 1 - Data Cleaning: Correcting, Completing, Creating, and Converting","461f3f06":"# Graph 3 - How Many PassRushers Should Teams Send?\n\nAs defined earlier a blitz is when more than 4 passrushers bring pressure to sack the quarterback or disrupt the play. The key number that we are analyzing here is how many passrushers should the defense send to generate the highest defense success percentage. When teams sent 4 passrushers or less(not a blitz), there was less defensive success as opposed to when blizes occurred with 5 or more passrushers. One critical point to mention however, is that when 7 passrushers were sent into blitz, it had the worst defense success percentage at around only 20%. When only 6 passrushers were sent into blitz, interestingly enough, it had the highest defensive success percentage at around 60%. This indicates that a team can send too many passrushers which resulted in a bad defense success percentage, and based on our data, that number is 7. This is because when teams send passrushers to blitz, it leaves wide receivers, tight ends, and running backs more wide open because there are less defensive players covering them, as they are trying to blitz to the play. While the quarterback may have less time to throw, they may have an easier time making a play to one of their other offensive teammates, which is what the data shows. 6 is the optimal number of passrushers because it balances resources on the field between coverage of offensive players and conducting the blitz.\n","1bc6c8fb":"This automatically generates an EDA for the plays dataset. \nWe create a dataFrame of  defensive players, so we can graph it later on. In the appendix, we have attached a graph that shows the distribution of weight, height, and team role. This is important because it tells me what kind of players are involved in a blitz to make it successful.","5b077cb8":"In this graph, we examined the weight and height of the players and also looked at their positions on the team. ","b19d2ca3":"# Section 3 - Additional Cleaning\n\nFurthermore, we cleaned the data to fill in the missing values in how the game clock was adjusted,for the possession team, the offensive formation, and dropback type. We also dropped columns that we weren't using and converted all objects to the appropriate integer category.","3edba2f7":"# Graph 2 - Which Offensive Formation Was The Blitz Most Successful Against?\n\nIf defenses know which offensive formations are more susceptible to the blitz, coaches would have an easier time determining if one needs to be dialed up. Our data shows that pistol formation had the best defensive success rate at about 80%. What is interesting to note here is that only I formation, pistol, and shotgun formation had defensive success rates over 50%. That being said, pistol formation overwhelmingly had the highest defense success rate which indicates that blitzes should be dialed up when the offensive is in that formation. Wildcat and jumbo formation were about a 50-50 split in terms of defensive success, and singleback and empty formation were the least effective with a defensive success rate between 30-45%.","d351d17c":"# Graph 6 - When Is The Best Time To Blitz?\n\nConventional wisdom usually indicates that it is better to blitz in high pressure situations. Based on the data, however, it appears that blitzes are actually more unsuccessful when there are 200 seconds or less in a quarter. Between 200 and 600 seconds in a quarter, it appears that they are more successful. The success level appears to vary between 600 to 900 seconds left in a game. This is an extremely interesting find because it seems that highly pressured 3rd downs are more effective for blitzing as opposed to late game timing. Coaches may be saving their most successful plays during this time, different successful formations may be used the offensive side, and typically scores do tend to tighten up later in the game when there is more of a sense of urgency to score. When the game gets closer to the end and when there is greater pressure to perform better - offenses do better against the blitz and it should be advised against.","1139194a":"# Appendix - Additional Information","2aad292d":"# Conclusion - \nIn conclusion, we found several different insights into the most optimum situations of when to blitz. These insights when combined with a NFL team's specific packages and formations, this can provide for a strong game plan that takes advantage of the analytical data provided. This can provide teams with a massive edge come game day and can be the difference between winning and losing a game. By using this information to their advantage, it will change how teams conduct their defenses and revolutionize how the game is played. \n\nWe have additional insights that we would love to present to you and are looking forward to the opportunity to do so.\n","e4b626a8":"## Exploratory Data Analysis  (EDA)","3af3be74":"This automatically generates an EDA for the games dataset.","a7f547e7":"# Exploratory Data Analysis with Pandas Profiling\n\nPandas Profiling does an exploratory data analysis on the different features that are available and offers statistical insights into their distribution. Additionally, it does a deep dive into how the variables interact with one another, any correlations that exist, and any missing values. Through the use of Pandas Profiling, our team was able to find 6 unique insights that will be extremely useful for NFL teams and can assist in their playing calling and strategic game day decisions. In all the graphs below, we chart a specific feature on the x-axis, their percentage of success on the y-axis, and analyze it by the defensive success categories that we defined earlier. \n\nPlease see the apendix below for further information. ","0843bb18":"First and foremost, our team created a blitz category based on the number of passrushers being greater than 4. If a blitz occured it was classified as 1; otherwise, we classified it as 0. We only looked at instances where blitzes occured so that we could analyze which features were most relevant to their success. Additionally, we cleaned the data based on the formation and positions of offensive and defensive players. \n","cdc0f847":"In this section, we used the Pandas Profiling to generate the EDA. In each of the reports, we have found missing values and fields that correlate. Please note that the Appendix is not part of the offical report. ","52d53072":"# Pre-installed Libraries","39e4533f":"# Graph 4 - Each Team's Blitz Percentage\n\nNFL teams and coaches have philosophies and formations that are a part of their defensive identity. Specifically some teams have the tendency to blitz more than other teams. When analyzing a team\u2019s blitz percentages, in relation to other teams, this gives those teams more insight into their own tendencies and allows them to readjust accordingly based on their own metrics for success. Based on the graph below it appears that the Houston Texas and Miami Dolphins have  the highest blitz percentage at around 50% and the Tennessee Titans and Buffalo Bills had the lowest blitz percentage at about 10%. Additionally, this information is very valuable, not just to defensive teams, but offensive teams as well. If an offensive knows the defensive team\u2019s tendencies, they make adjustments in their formations to counteract them. ","13237b82":"# Introduction\n\nWe are recent college graduates with a passion for football. Welcome to our NFL Big Data Bowl 2021 presentation. \n\nA blitz is a tactic used by the defense to disrupt pass attempts by the offense. During a blitz, a higher than usual number of defensive players will rush the opposing quarterback, in an attempt to hurry the pass. Our team defined a blitz as when four or more passrushers bring pressure to sack the quarterback or to disrupt the play. \n\nSome plays in football are more critical in determining the outcome of the game than others. Situations where a blitz occurs is considered to be one of those moments. Due to the intensive nature of a blitz, NFL teams may find useful insights when analyzing the specific instances where blitzes occur and seeing what variables contribute to the overall defensive success. \n\nIn this project, we analyze interesting relationships between the blitz and other features to figure out the optimum instances of when blitzes are most successful. This information will be highly valuable to NFL teams as they will be able to use this in live game situations based on the features we have identified. \n","63677481":"# Graph 1 - Which Down Is The Most Optimal Down To Blitz In?\n\nBased on our results, it is evident that 3rd down is by far the best down to blitz as the defense success rate was close to 60%. This is interesting as the other downs were nowhere as close to being successful. Blitzes failed a majority of the time on 1st and 2nd down, and were about 50-50 split on 4th down. One of the reasons is due to 3rd down being a high pressure moment and the additional pressure of the blitz may result in more opportunities for defensive success. One may assume or expect that trend to continue on 4th down, however generally if an offensive team decides to go for it on 4th down, they only have a few yards to go before converting. This explains why the defensive success rate goes down here.  \n","7830206e":"This automatically creates an EDA for the players dataset. "}}