{"cell_type":{"c33a56ca":"code","5959b151":"code","6763a6ce":"code","4a3e2bee":"code","32468bfd":"code","c62f260c":"code","a7b911b6":"code","90c9f150":"code","73ff6b63":"code","1920e662":"code","9d0025a3":"code","aafca58d":"code","ca44c204":"code","bb2edee8":"code","b31fbcf7":"code","af7ab25c":"code","5c26dcdf":"code","2e01227b":"code","92419fde":"code","61a5d441":"code","20de3715":"code","064d1e45":"code","2fe0945c":"code","fb745790":"code","8f2c6c81":"code","a075e319":"code","fe100dfb":"code","4f1d4e3c":"code","4980393a":"code","350a7a7a":"code","34e9ebef":"code","434785ce":"code","3f00c817":"code","02170a7d":"code","a0e00242":"markdown","06879dda":"markdown","560dd000":"markdown","31206241":"markdown","e02bb492":"markdown","3bbf7a7c":"markdown","bc5da930":"markdown","7a1b4b54":"markdown","0a1fad5b":"markdown","0eab36a2":"markdown","58a8dc4a":"markdown"},"source":{"c33a56ca":"!pip install dataprep","5959b151":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.impute import SimpleImputer\nfrom sklearn import preprocessing\nfrom dataprep import eda\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","6763a6ce":"# Get the train data\ntrainFile = \"..\/input\/titanic\/train.csv\"\ntrainDataset = pd.read_csv(trainFile)\nprint(trainDataset.shape)\n# Get the test data\ntestFile = \"..\/input\/titanic\/test.csv\"\ntestDataset = pd.read_csv(testFile)\nprint(testDataset.shape)","4a3e2bee":"trainDataset.head(20)","32468bfd":"eda.create_report(trainDataset, title=\"train data report\")","c62f260c":"testDataset","a7b911b6":"train_y=trainDataset['Survived']\ndel trainDataset['Survived']\n\ndel testDataset['Name']\ndel trainDataset['Name']","90c9f150":"data=pd.concat([trainDataset,testDataset])\ndata","73ff6b63":"label_encoder = preprocessing.LabelEncoder()\nlabel_encoder.fit(data['Sex'])\ntestDataset['Sex']=label_encoder.transform(testDataset['Sex'])\ntrainDataset['Sex']=label_encoder.transform(trainDataset['Sex'])\n\nlabel_encoder.fit(data['Embarked'].astype(str))\ntestDataset['Embarked']=label_encoder.transform(testDataset['Embarked'].astype(str))\ntrainDataset['Embarked']=label_encoder.transform(trainDataset['Embarked'].astype(str))\n\nlabel_encoder.fit(data['Cabin'].astype(str))\ntestDataset['Cabin']=label_encoder.transform(testDataset['Cabin'].astype(str))\ntrainDataset['Cabin']=label_encoder.transform(trainDataset['Cabin'].astype(str))\n\nlabel_encoder.fit(data['Ticket'].astype(str))\ntestDataset['Ticket']=label_encoder.transform(testDataset['Ticket'].astype(str))\ntrainDataset['Ticket']=label_encoder.transform(trainDataset['Ticket'].astype(str))","1920e662":"data=pd.concat([trainDataset,testDataset])","9d0025a3":"imputer = SimpleImputer(missing_values=np.nan, strategy='constant',fill_value=-1)\nimputer.fit(data)\ndata_test=imputer.transform(testDataset)\ndata_train=imputer.transform(trainDataset)\n","aafca58d":"data=np.concatenate((trainDataset,testDataset))\ndata","ca44c204":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","bb2edee8":"sc = StandardScaler() \ndata = sc.fit_transform(data)\ndata_test = sc.transform(data_test)\ndata_train = sc.transform(data_train)","b31fbcf7":"data_test.shape","af7ab25c":"train_y.value_counts()","5c26dcdf":"data_train[593]","2e01227b":"parameters = {'min_samples_leaf': [ 5, 7],'max_depth': [5,8],'max_features': [4, 7]}\nrfc = RandomForestClassifier(n_estimators=100, random_state=42)\ngcv = GridSearchCV(rfc, parameters,n_jobs=None, cv=5, verbose=3,scoring='roc_auc', return_train_score=True)\ngcv.fit(data_train, train_y)\ngcv.score(data_train, train_y)","92419fde":"model=gcv.best_estimator_","61a5d441":"model.predict(data_test)","20de3715":"test_y = pd.DataFrame(model.predict(data_test),columns = ['Survived'])\nfinal_df = pd.concat([testDataset['PassengerId'],test_y],axis=1)","064d1e45":"# Saving the final dataframe as a .csv file.\nfinal_df.to_csv('final_submission.csv', index = False)","2fe0945c":"import matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, f1_score, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\nimport tensorflow as tf \nimport tensorflow.keras.backend as K\nfrom tensorflow.keras import Input,Sequential, initializers, optimizers, callbacks\nfrom tensorflow.keras.layers import BatchNormalization, Dense, Dropout, Flatten, ReLU, PReLU,Conv1D,MaxPooling1D,AveragePooling1D\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.losses import CategoricalCrossentropy\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import TensorBoard\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport seaborn as sns\n\nseed = 47\nscaler = StandardScaler()","fb745790":"labels = to_categorical(train_y)\nX_train, X_test,y_train,y_test=train_test_split(data_train, labels, test_size=0.1, random_state=seed, shuffle=True,stratify=labels)","8f2c6c81":"def f1(y_true, y_pred): \n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    f1_val = 2*(precision*recall)\/(precision+recall+K.epsilon())\n    \n    return f1_val","a075e319":"def plot_result(history, title):\n    fig, ax = plt.subplots(2,1)\n    ax[0].plot(history.history['loss'], color='b', label=\"train loss\")\n    ax[0].plot(history.history['val_loss'], color='r', label=\"val loss\",axes=ax[0])\n    legend = ax[0].legend()\n\n    ax[1].plot(history.history['accuracy'], color='b', label=\"train acc\")\n    ax[1].plot(history.history['val_accuracy'], color='r',label=\"val acc\")\n    legend = ax[1].legend()\n    ax[0].set_title(title)\n    plt.plot()","fe100dfb":"metrics = ['accuracy', f1, AUC(name='auc')]\n\nfit_params = {\n    'x': X_train,\n    'y': y_train,\n    'validation_data': (X_test, y_test)}","4f1d4e3c":"def ann_model():\n    model = Sequential()\n    model.add(Input(shape=(10)))\n    \n    model.add(BatchNormalization())\n    model.add(Dense(9, activation=tf.keras.layers.ReLU(),\n           kernel_initializer=initializers.HeNormal()))\n    model.add(Dropout(0.1))\n\n    model.add(BatchNormalization())\n    model.add(Dense(8, activation=tf.keras.layers.ReLU(),\n           kernel_initializer=initializers.HeNormal()))\n    #model.add(Dropout(0.1))\n    \n    model.add(BatchNormalization())\n    model.add(Dense(5, activation=tf.keras.layers.ReLU(),\n       kernel_initializer=initializers.HeNormal()))\n    \n    model.add(Dense(2, activation='softmax',\n           kernel_initializer=initializers.RandomNormal(0, 1, seed=seed)))\n\n    model.compile(\n        loss=CategoricalCrossentropy(),\n        optimizer=optimizers.Adam(learning_rate=0.007),\n        metrics=metrics)     \n    return model","4980393a":"model = ann_model()\nhistory = model.fit(**fit_params,\n                    epochs=40,\n                    #callbacks=[EarlyStopping(patience=5)]\n                   )","350a7a7a":"plot_result(history, 'ann model')","34e9ebef":"data_test.shape","434785ce":"model.predict(data_test).argmax(axis=1)","3f00c817":"test_y = pd.DataFrame(model.predict(data_test).argmax(axis=1),columns = ['Survived'])\nfinal_df = pd.concat([testDataset['PassengerId'],test_y],axis=1)","02170a7d":"# Saving the final dataframe as a .csv file.\nfinal_df.to_csv('final_submission2.csv', index = False)","a0e00242":"Load datasets","06879dda":"..be continued","560dd000":"ANN model","31206241":"# Libraries","e02bb492":"# Introduction","3bbf7a7c":"Test dataset","bc5da930":"![image.png](attachment:28e06ac6-26c3-4216-853c-6e4fd77f09d5.png)","7a1b4b54":"Prediction","0a1fad5b":"![image.png](attachment:cd1f16d1-5e0d-4eee-ba03-70c219d85cf3.png)","0eab36a2":"Data preparation","58a8dc4a":"# Train dataset"}}