{"cell_type":{"a3dcf1ae":"code","5a0ea91a":"code","ed63f508":"code","85e83fc2":"code","8154ab07":"code","a50ba571":"code","c8f5051d":"code","910c783d":"code","3e06820d":"code","595af281":"code","f244edf7":"code","76d53916":"code","009d61e3":"code","e7659ca7":"code","30a8aeb1":"code","65db2d3d":"code","6634dc32":"code","e451b535":"code","716c2337":"code","9cc37f4b":"code","bb6267d1":"code","89348256":"code","55623d51":"code","208778d8":"code","eccaa307":"code","735173ab":"code","2f769919":"code","646ac37b":"code","19ac84e9":"code","1a366450":"code","29fce103":"code","265d86c9":"code","5029a5e9":"code","5e528569":"code","0b4f76f3":"code","7bf33a06":"code","2910f79b":"code","dd75ab80":"code","470ee7b6":"code","93ffe276":"code","70d71f84":"code","ecf5592e":"markdown","444ab8ec":"markdown","d9b1bfb1":"markdown","77ad30af":"markdown","952f6b2d":"markdown","9f7f82ea":"markdown","d393c4e0":"markdown","e443561b":"markdown","55985a08":"markdown","dbfc786f":"markdown","b8c76a17":"markdown","aad3d1e9":"markdown","ca0e5b8c":"markdown","fb9eebf0":"markdown","670eb4fd":"markdown","5adcab69":"markdown","dde22f11":"markdown","0a2b53c6":"markdown","b5250871":"markdown","db55040c":"markdown","b70132c5":"markdown","860d6da9":"markdown","24d6e208":"markdown","4c379f09":"markdown","82b32bb1":"markdown","94f8efad":"markdown","ebeec433":"markdown","128d69d2":"markdown","6aa49192":"markdown","cb368302":"markdown"},"source":{"a3dcf1ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a0ea91a":"import cv2    \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import f1_score\n\n#from keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom keras.applications.vgg16 import VGG16\n#from keras.applications.ResNet152V2 import preprocess_input\n#from keras.applications.vgg16 import preprocess_input\nfrom keras import optimizers\nfrom keras.models import Sequential, Model \nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.utils import np_utils\nfrom keras.optimizers import SGD\nimport tensorflow as tf\nfrom IPython.core.display import display, HTML\nfrom PIL import Image\nfrom io import BytesIO\nimport base64\n\nplt.style.use('ggplot')\n\n%matplotlib inline","ed63f508":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n","85e83fc2":"df = pd.read_csv(\"..\/input\/celeba-dataset\/list_attr_celeba.csv\")\ndf = reduce_mem_usage(df)","8154ab07":"df.reset_index(inplace = True)\ndf.set_index('image_id', inplace=True)\ndf.drop(columns=['index'], inplace=True)\ndf.replace(to_replace=-1, value=0, inplace=True) #replace -1 by 0\ndf.shape\n","a50ba571":"filename = df.index[567]\nimage_folder = \"..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba\/\"\nimagepath = image_folder + filename\nimg = cv2.imread(imagepath)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nprint(imagepath)\nprint(f\"Smiling: {df.loc[filename]['Smiling']}, Young: {df.loc[filename]['Young']}, Straight Hair: {df.loc[filename]['Straight_Hair']}\")\nplt.imshow(img)\nplt.show()","c8f5051d":"import gc\ndel img\ngc.collect()","910c783d":"#plt.title('Female or Male')\n#sns.countplot(y='Male', data=df, color=\"c\")\n#plt.show()","3e06820d":"tvtsplit = pd.read_csv(\"..\/input\/celeba-dataset\/list_eval_partition.csv\")\ntvtsplit = reduce_mem_usage(tvtsplit)\n#tvtsplit","595af281":"tvtsplit['partition'].value_counts().sort_index()","f244edf7":"tvtsplit.reset_index(inplace=True)\ntvtsplit.set_index(\"image_id\", inplace=True)\ntvtsplit.drop(columns=['index'], inplace=True)\ntvtsplit.head()","76d53916":"tvtmerge = pd.merge(tvtsplit, df['Male'], on=\"image_id\", how=\"inner\")\ntvtmerge = reduce_mem_usage(tvtmerge)","009d61e3":"del tvtsplit\ngc.collect()","e7659ca7":"IMG_WIDTH = 224\nIMG_HEIGHT = 224\nTRAINING_SAMPLES =5000\nVALIDATION_SAMPLES = 1500\nTEST_SAMPLES = 1500","30a8aeb1":"'01610sdsds9.jpg' in tvtmerge.index","65db2d3d":"def load_reshape_img(fname):\n    img = load_img(fname)\n    x = img_to_array(img)\/255.\n    x = cv2.resize(x, (224, 224))\n    #x = x.reshape((1,) + x.shape)\n\n    return x\n\n\ndef generate_df(partition, attr, num_samples):\n    '''\n    partition\n        0 -> train\n        1 -> validation\n        2 -> test\n    \n    '''\n    \n    df_ = tvtmerge[(tvtmerge['partition'] == partition) \n                           & (tvtmerge[attr] == 0)].sample(int(num_samples\/2))\n    \n    #df_ = df_.append(tvtmerge[(tvtmerge['partition'] == partition) & (tvtmerge[attr] == 1)].sample(int(num_samples\/2)))\n    df_ = pd.concat([df_,\n                      tvtmerge[(tvtmerge['partition'] == partition) \n                                  & (tvtmerge[attr] == 1)].sample(int(num_samples\/2))])\n    df_ = reduce_mem_usage(df_)\n    # for Train and Validation\n    if partition != 2:\n        x_ = np.array([load_reshape_img(image_folder + fname) for fname in df_.index])\n        x_ = x_.reshape(x_.shape[0], 224, 224, 3)\n        y_ = np.array(df_[attr])\n    # for Test\n    else:\n        x_ = []\n        y_ = []\n\n        for index, target in df_.iterrows():\n            im = cv2.imread(image_folder + index)\n            im = cv2.resize(cv2.cvtColor(im, cv2.COLOR_BGR2RGB), (224, 224)).astype(np.float32) \/ 255.0\n            #im = np.expand_dims(im, axis =0)\n            x_.append(im)\n            y_.append(target[attr])\n    del df_\n    gc.collect()\n    return x_, y_","6634dc32":"# Train data\nx_train, y_train = generate_df(0, 'Male', TRAINING_SAMPLES)\n\n# Train - Data Preparation - Data Augmentation with generators\ntrain_datagen =  ImageDataGenerator(\n  #preprocessing_function=preprocess_input,\n  rotation_range=30,\n  width_shift_range=0.2,\n  height_shift_range=0.2,\n  shear_range=0.2,\n  zoom_range=0.2,\n  horizontal_flip=True,\n)\n\ntrain_datagen.fit(x_train)\n\ntrain_generator = train_datagen.flow(\nx_train, y_train,\nbatch_size=32\n)","e451b535":"del x_train, y_train\ngc.collect()","716c2337":"x_valid, y_valid = generate_df(1, 'Male', VALIDATION_SAMPLES)","9cc37f4b":"#vgg = VGG16(input_shape=(224,224,3), weights='imagenet', include_top=False)\nresnet = tf.keras.applications.ResNet152V2(\n    include_top=False,\n    weights=\"imagenet\",\n    input_shape=(224, 224,3),\n)","bb6267d1":"# don't train existing weights\nfor layer in resnet.layers:\n  layer.trainable = False","89348256":"x = Flatten()(resnet.output)\nx = Dense(1000, activation=\"relu\")(x)\n#x = Dropout(0.5)(x)\nx = Dense(400, activation=\"relu\")(x)\n#x = Dropout(0.5)(x)\nx = Dense(400, activation=\"relu\")(x)\n#x = Dropout(0.5)(x)\nprediction = Dense(1, activation='sigmoid')(x)","55623d51":"# create a model object\nmodel = Model(inputs=resnet.input, outputs=prediction)\n\n# view the structure of the model\nmodel.summary()","208778d8":"# tell the model what cost and optimization method to use\nopt = tf.keras.optimizers.Adam(learning_rate=0.0001)\nmodel.compile(\n  loss='binary_crossentropy',\n  optimizer=opt,\n  metrics=['accuracy']\n)","eccaa307":"filepath=\"model.h5\"\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_accuracy',save_weights_only=False, verbose=1, save_best_only=True, mode='max')","735173ab":"#del r \n#gc.collect()\nr = model.fit_generator(\n  train_generator,\n  validation_data=(x_valid, y_valid),\n  epochs=10,\n  verbose =1,\n  steps_per_epoch=(TRAINING_SAMPLES\/\/32 ),\n  callbacks = [checkpoint]\n)","2f769919":"#del r\ngc.collect()","646ac37b":"import matplotlib.pyplot as plt\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')","19ac84e9":"del plt\ngc.collect()","1a366450":"import matplotlib.pyplot as plt\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","29fce103":"del plt\ngc.collect()","265d86c9":"import tensorflow as tf\n\nfrom keras.models import load_model\n\nbest_model = load_model('.\/model.h5')\n","5029a5e9":"#del x_test, y_test\n#gc.collect()\nx_test, y_test = generate_df(2, 'Male', TEST_SAMPLES)","5e528569":"x_test = np.array(x_test)\ny_test = np.array(y_test)","0b4f76f3":"x_test.shape","7bf33a06":"### START CODE HERE ### (1 line)\npreds = model.evaluate(x_test,y_test)\n### END CODE HERE ###\nprint (\"Loss = \" + str(preds[0]))\nprint (\"Test Accuracy = \" + str(preds[1]))","2910f79b":"Y_pred = best_model.predict(x_test)","dd75ab80":"predict_labels = Y_pred\npredict_labels[predict_labels<0.5] = 0\npredict_labels[predict_labels>=0.5] = 1","470ee7b6":"from sklearn.metrics import f1_score\nprint('f1_score:', f1_score(y_test, predict_labels))","93ffe276":"import matplotlib.pyplot as plt\na = predict_labels.reshape(-1)\n#fnames = test_set.filenames\npath = '..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba\/'\nb = x_test[np.where(a!=y_test)[0]]\nprint(f\"Prediction: {predict_labels[np.where(a!=y_test)[0]][7]}\")\nprint(f\"Original: {y_test[np.where(a!=y_test)[0]][7]}\")\nplt.imshow(b[7])\nplt.show()","70d71f84":"from mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix\ncm  = confusion_matrix(y_test, predict_labels)\nplt.figure()\nplot_confusion_matrix(cm,figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.xticks(range(2), ['Female', 'Male'], fontsize=16)\nplt.yticks(range(2), ['Female', 'Male'], fontsize=16)\nplt.show()","ecf5592e":"**Complile the model**","444ab8ec":"**setting the file name as the index of dataframe**","d9b1bfb1":"# 3. **Data Augmentation**","77ad30af":"**Creating the Model**","952f6b2d":"**Deleting variablesto to save RAM**","9f7f82ea":"**Fit the model**","d393c4e0":"# 10. **F1 Score**","e443561b":"# 11. **See misclassified examples**","55985a08":"# **Dividing the data into train, validation, and test**","dbfc786f":"# 2. **Generating dataset**","b8c76a17":"**Join the Male column to the tvtsplit dataframe**","aad3d1e9":"**Prediction values less than 5 are classified as females, greater than or equal to 5 are classified as male**","ca0e5b8c":"# **Visualize image**","fb9eebf0":"# 4. **Transfer Learning---ResNet15V2 Model**","670eb4fd":"**Reading the attributes csv file of celebrities**","5adcab69":"**Adding extra layers**","dde22f11":"**Preparing test samples**","0a2b53c6":"# 8. **Model Evaluation**","b5250871":"# 12. **Confusion Matrix**","db55040c":"# 1. **Importing Modules**","b70132c5":"# 5. **Plot the Loss**","860d6da9":"**Number of samples are less than what is preferred because of the memory issue**","24d6e208":"**Counting the number of images in each dataset**","4c379f09":"**Method to reduce the memory usage of a dataframe**","82b32bb1":"# 7. **Load the best model**","94f8efad":"**Balancing the sample such that they contain equal number of men and women and prepocessing the data**","ebeec433":"# 9. **Model Prediction**","128d69d2":"**Set the image file name as the index of the dataframe**","6aa49192":"# 6. **Plot the Accuracy**","cb368302":"**Save the best model**"}}