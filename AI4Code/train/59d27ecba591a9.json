{"cell_type":{"1512f894":"code","567df94c":"code","e868d369":"code","0828c687":"code","e64d2f30":"code","b5f1104c":"code","a485e46d":"code","d4688fe4":"code","5c1527db":"code","9912b36d":"code","45af82e1":"code","56f8521a":"code","adeb81f4":"markdown","edcc21e8":"markdown","6e535e22":"markdown","9dc566b8":"markdown","f0cc25ec":"markdown","0f190b8d":"markdown","120082f1":"markdown","56652f1e":"markdown","e3e423b2":"markdown","bc47291f":"markdown","ad6d4b45":"markdown"},"source":{"1512f894":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pickle\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","567df94c":"original = \"..\/input\/dataset\/final_project_dataset.pkl\"\n\n\ndestination = \"word_data_unix.pkl\"\n\ncontent = ''\noutsize = 0\nwith open(original, 'rb') as infile:\n    content = infile.read()\nwith open(destination, 'wb') as output:\n    for line in content.splitlines():\n        outsize += len(line) + 1\n        output.write(line + str.encode('\\n'))\n\nwith open('.\/word_data_unix.pkl','rb') as infile :\n    data_dict=pickle.load(infile)\n\ninfile.close()","e868d369":"df=pd.DataFrame.from_dict(data_dict)\nprint(df)","0828c687":"df = df.replace('NaN', np.nan)\ndf=df.fillna(value=\"0\")\ndf2=df.T","e64d2f30":"df2=df2.drop(['email_address','loan_advances','restricted_stock_deferred','director_fees','deferral_payments'], axis = 1)\ndf2[df2.columns]=df2[df2.columns].astype(int)\n\ndf2=df2.replace(\"False\",\"0\").replace(\"True\",\"1\")\ndf2['poi']=df2['poi'].astype(int)\n","b5f1104c":"from sklearn.model_selection import train_test_split\nfeatures=list(df2.columns)\ny=df2['poi']\ndf3=df2\ndf2=df2.drop(['poi'],axis=1)\nX=df2[df2.columns]\nX_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0)\n","a485e46d":"from sklearn.preprocessing import StandardScaler,MinMaxScaler,PowerTransformer,RobustScaler\nscaler=PowerTransformer(method='yeo-johnson').fit(X_train)\nX_train=scaler.transform(X_train)\nX_test=scaler.transform(X_test)\n","d4688fe4":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n\nmodel=KNeighborsClassifier()\nmodel1=GradientBoostingClassifier()\n\nmodel3=RandomForestClassifier()\nmodel4=LogisticRegression(solver='liblinear')\nmodel5=SVC()\nmodel6=DecisionTreeClassifier()\nb=[]\nfor i in range(5,11):\n    acc=cross_val_score(model,X,y,cv=i)\n    acc1=cross_val_score(model1,X,y,cv=i)\n    \n    acc3=cross_val_score(model3,X,y,cv=i)\n    acc4=cross_val_score(model4,X,y,cv=i)\n    acc5=cross_val_score(model5,X,y,cv=i)\n    acc6=cross_val_score(model6,X,y,cv=i)\n    b.extend([acc.mean(),acc1.mean(),acc3.mean(),acc4.mean(),acc5.mean(),acc6.mean()])\nb=np.asarray(b).reshape(-1,6)\nprint(\"Best cross validation score:- \"+str(np.amax(b)))\na1= np.where(b==np.amax(b))[1]\na2= np.where(b==np.amax(b))[0]\nif a1==[0]:\n    print(\"K nearest neighbors\")\nelif a1==[1]:\n    print(\"Gradient Boosting Classifier\")\n\nelif a1==[2]:\n    print(\"Random Forest Classifier\")\nelif a1==[3]:\n    print(\"Logistic Regression\")\nelif a1==[4]:\n    print(\"Support Vector Classifier\")\nelse:\n    print(\"Decision Tree Classifier\")\nif a2==[0]:\n    print(\"No. of folds:- 5\")\nelif a2==[1]:\n    print(\"No. of folds:- 6\")\nelif a2==[2]:\n    print(\"No. of folds:- 7\")\nelif a2==[3]:\n    print(\"No. of folds:- 8\")\nelif a2==[4]:\n    print(\"No. of folds:- 9\")\nelif a2==[5]:\n    print(\"No. of folds:- 10\")\nelse:\n    print(\"No. of folds:- 11\")","5c1527db":"from sklearn.model_selection import GridSearchCV\n\ngrid_values={'n_neighbors':list(range(1,70)),\n              }\ngrid_model=GridSearchCV(model,param_grid=grid_values,scoring='accuracy',cv=8).fit(X_train,y_train)\nprint(\"Best paramters:- \"+str(grid_model.best_params_))","9912b36d":"model=KNeighborsClassifier(n_neighbors=grid_model.best_estimator_.get_params()['n_neighbors'])\nmodel.fit(X_train,y_train)\ny_pred=model.predict_proba(X_test)\nprint(model.predict(X_test))\n","45af82e1":"from sklearn.metrics import roc_auc_score,roc_curve,classification_report\nprint(\"Accuracy achieved on training set:- \"+str(model.score(X_train,y_train)))\nprint(\"Accuracy achieved on testing set:- \"+str(model.score(X_test,y_test)))\nprint(\"ROC Score:- \"+str(roc_auc_score(y_test,y_pred[:,1])))","56f8521a":"pickle.dump(model,open(\"my_classifier.pkl\",\"wb\"))\npickle.dump(new_dict,open(\"my_dataset.pkl\",\"wb\"))\npickle.dump(features,open(\"my_feature_list\",\"wb\"))","adeb81f4":"**Creating training and testing features**","edcc21e8":"**Replacing NaN values with 0**","6e535e22":"**Performing Grid Search for hyperparameter tuning**","9dc566b8":"**Typecasting columns to integer and dropping columns that have large number of null entries**","f0cc25ec":"**Creating Dataframe from dictionary**","0f190b8d":"**Converting pickle file into dictionary**","120082f1":"**Preprocessing training and testing features**","56652f1e":"**Model evaluation using different metrics**","e3e423b2":"**Fitting tuned model and predicting probabilities of each class**","bc47291f":"#data into pkl file","ad6d4b45":"**Performing cross validation for model selection**"}}