{"cell_type":{"b6ea144d":"code","c71de0cd":"code","ce9d7c3b":"code","07c33fc0":"code","d515361e":"code","66092ecb":"code","10fab541":"code","d52b80a8":"code","c00abb85":"code","0137608f":"code","b7d06e16":"code","d75cf350":"code","5fc04c09":"code","eae49661":"code","26b62442":"code","e07692b7":"code","6215b6c6":"code","cc723dd6":"code","f78ee882":"code","62073e38":"code","8a2f0d50":"code","620b0ebb":"markdown","08ce99d8":"markdown","55586307":"markdown","49f8ea99":"markdown"},"source":{"b6ea144d":"import pandas as pd\nimport ipywidgets as widgets\n\ndf = pd.read_excel('..\/input\/table-format-interactive-data-visualisation\/BQ-Assignment-Data-Analytics.xlsx')\ndf","c71de0cd":"df.dtypes        # first i have check the type of feature that we have","ce9d7c3b":"df.head()","07c33fc0":"df.tail()","d515361e":"df['Date']=df['Date'].astype(str)     # Converted data type into string ","66092ecb":"df.dtypes","10fab541":"col = ['Item Type','Item','Item Sort Order']    # Feature attribute creating","d52b80a8":"look_up = {'01': 'Jan', '02': 'Feb', '03': 'Mar', '04': 'Apr', '05': 'May','06': 'Jun',\n           '07': 'Jul', '08': 'Aug', '09': 'Sep', '10': 'Oct', '11': 'Nov', '12': 'Dec'}","c00abb85":"unique_date = df['Date'].unique()    # find the unique data and the created column \nfor x in unique_date:\n    col.append(look_up[x[5:7]]+\" \"+str(int(x[8:])))","0137608f":"col     # This are our final features that we get","b7d06e16":"unique_date = len(df['Date'].unique())    # count the unique data that we have in data set\nunique_date","d75cf350":"date_list =[]\ntemp_sale_data = []\nsale_data = []            # created three empty list \nk =0\nfor ind in df.index:\n    temp_sale_data.append(df['Sales'][ind])   # Appending sale \n    \n    if(ind%unique_date == 0):   # Appending 'Item type','Item','Item Sort Order'\n        date_list.append([df['Item Type'][ind],df['Item'][ind],df['Item Sort Order'][ind]])\n   \n    if((ind+1)%unique_date == 0):\n        sale_data.append(date_list[k]+temp_sale_data)\n        k = k+1\n        temp_sale_data= []\n\nprint(sale_data)     # Final this is our data list","5fc04c09":"# At this point we have feature attribute and data list \nnew_df = pd.DataFrame(sale_data, columns = col) # Here we are crearinf dataFrame\nnew_df","eae49661":"df=new_df\ndf","26b62442":"new_df=new_df.drop(columns=['Item Type'])\nnew_df","e07692b7":"df_fruit=df[df['Item Type'] == 'Fruit']\ndf_fruit=df_fruit.drop(columns=['Item Type'])\ndf_fruit","6215b6c6":"df_veg=df[df['Item Type'] == 'Vegetable']\ndf_veg=df_veg.drop(columns=['Item Type'])\ndf_veg","cc723dd6":"# print('Press 1 for select all data.\\nPress 2 for select only fruit item.\\nPress 3 for selcting vegetable only')","f78ee882":"# ch = input(\"******Select option******\\n\")\n# if ch == '1':\n#     print(new_df)\n# elif ch == '2':\n#     print(df_fruit)\n# elif ch == '3':\n#     print(df_veg)\n# else:\n#     print('Wrong Choice')","62073e38":"print('Select ALL for select all data.\\nSelect Fruit for select only fruit item.\\nSelect Vegetable for selcting vegetable only')","8a2f0d50":"ALL = 'ALL'\ndef unique_sorted_values_plus_ALL(array):\n    unique = array.unique().tolist()\n    unique.sort()\n    unique.insert(0, ALL)\n    return unique\ndropdown_item = widgets.Dropdown(options = unique_sorted_values_plus_ALL(df['Item Type']))\noutput_item = widgets.Output()\ndef dropdown_eventhandler(change):\n        output_item.clear_output()\n#       with output_item:\n        if (change.new == ALL):\n            display(new_df)\n        elif(change.new == 'Fruit'):\n            display(df_fruit)\n        else:\n            display(df_veg)\n        \ndropdown_item.observe(dropdown_eventhandler, names='value')\n\ndisplay('>>Item Type<<',dropdown_item)","620b0ebb":"## Q 2: Select fruit item type only","08ce99d8":"## Q 1 : Select all data ","55586307":"## Q 3: Select Vegetable item type only","49f8ea99":"## You can also select options"}}