{"cell_type":{"7485c1e5":"code","a3848fbf":"code","0c2a178c":"code","8fa4dba7":"code","8ddbda58":"code","825efbf5":"code","96e976e9":"code","5d6bc413":"code","52eaf1b9":"markdown","e733ac89":"markdown","94513a00":"markdown","eab9d370":"markdown","74038e76":"markdown","126bb830":"markdown","7bb3cefd":"markdown","a06390dd":"markdown","a53c5f4f":"markdown","215fd1b8":"markdown"},"source":{"7485c1e5":"import pandas as pd\n\nimport seaborn as sns\nfrom learntools.advanced_pandas.data_types_missing_data import *\n\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option('max_rows', 5)","a3848fbf":"check_q1(pd.DataFrame())","0c2a178c":"# Your code here\nimport numpy as np\ndf = reviews.copy()\nprint(np.dtype())\ncheck_q1(np.dtype(df.points))","8fa4dba7":"df.head(n=10)","8ddbda58":"# Your code here\ncheck_q2(df.price.map(lambda x: str(x)))\n","825efbf5":"# Your code here\ndf3 = df[df.description.notnull() == True]\n#df3.price.isnull().value_counts()\ncheck_q3(df3.price.isnull())","96e976e9":"# Your code here\n#df4 = df.copy()\n#df4[\"region_1\"] = df4[\"region_1\"].fillna(\"Unknown\")\n#df4.groupby(\"region_1\").region_1.count().sort_values(ascending = False)\ncheck_q4(df.region_1.fillna(\"Unknown\").value_counts())","5d6bc413":"# Your code here\ncheck_q5(df.isnull().sum())\n\"\"\" \n#Create string contains all the range value\n\nyear_string = \"\"\nfor i in range(2000,2018):\n    #year_string+=str(i) + \"+\"\nyear_string\n\"\"\"\n\n\"\"\"\n# check if \"vintage\" is in the description and any string in description is also in any value in year_list\nyear_range= range(2000,2018)\nyear_list = [\"{}\".format(year) for year in year_range]\nyear_list\n# if any(\"2008\" in s for s in year_list):\ndf[(df.description.map(lambda r: \"vintage\" in r) == True)&(df.description.map(lambda r: any(word in r for word in year_list) == True))]\n\"\"\"\n ","52eaf1b9":"**Exercise 4**: What are the most common wine-producing regions? Create a `Series` counting the number of times each value occurs in the `region_1` field. This field is often missing data, so replace missing values with `Unknown`. Sort in descending order.  Your output should look something like this:\n\n```\nUnknown                    21247\nNapa Valley                 4480\n                           ...  \nBardolino Superiore            1\nPrimitivo del Tarantino        1\nName: region_1, Length: 1230, dtype: int64\n```","e733ac89":"# Keep going\nMove on to the [**Renaming and combining workbook**](https:\/\/www.kaggle.com\/kernels\/fork\/598826)","94513a00":"**Exercise 2**: Create a `Series` from entries in the `price` column, but convert the entries to strings. Hint: strings are `str` in native Python.","eab9d370":"# Data types and missing data workbook\n\n## Introduction\n\nThis is the workbook component of the \"Data types and missing data\" section of the tutorial.\n\n# Relevant Resources\n- [Data Types and Missing Data Reference](https:\/\/www.kaggle.com\/residentmario\/data-types-and-missing-data-reference)\n\n# Set Up\n\nRun the following cell to load your data and some utility functions","74038e76":"# Checking Answers\n\n**Check your answers in each exercise using the  `check_qN` function** (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","126bb830":"If you get stuck, **use the `answer_qN` function to see the code with the correct answer.**\n\nFor the first set of questions, running the `check_qN` on the correct answer returns `True`.\n\nFor the second set of questions, using this function to check a correct answer will present an informative graph!","7bb3cefd":"# Exercises","a06390dd":"Here are a few visual exercises on missing data.\n\n**Exercise 3**: Some wines do not list a price. How often does this occur? Generate a `Series`that, for each review in the dataset, states whether the wine reviewed has a null `price`.","a53c5f4f":"**Exercise 5**: A neat property of boolean data types, like the ones created by the `isnull()` method, is that `False` gets treated as 0 and `True` as 1 when performing math on the values. Thus, the `sum()` of a list of boolean values will return how many times `True` appears in that list.\nCreate a `pandas` `Series` showing how many times each of the columns in the dataset contains null values. Your result should look something like this:\n\n```\ncountry        63\ndescription     0\n               ..\nvariety         1\nwinery          0\nLength: 13, dtype: int64\n```\n\nHint: write a map that will extract the vintage of each wine in the dataset. The vintages reviewed range from 2000 to 2017, no earlier or later. Use `fillna` to impute the missing values.","215fd1b8":"**Exercise 1**: What is the data type of the `points` column in the dataset?"}}