{"cell_type":{"176eb285":"code","7669c0a3":"code","e59fa434":"code","0d1bbda5":"code","19b7dc80":"code","19668e57":"code","1fdb211d":"code","f1c92216":"code","93e4c1a4":"code","065e334b":"code","1f9b23f1":"code","bbc53dd4":"code","712ecd10":"code","c616a0ba":"code","2721e997":"code","7ce26ae8":"code","11c43ad8":"code","963cf507":"code","7d9104dd":"code","9d474653":"code","95a7a4ea":"code","bb44d5a1":"code","66fddcc1":"code","0e1f2621":"code","ffcb885f":"code","fc47d42e":"code","138ed5bd":"code","865bfe08":"code","54b556d0":"code","a7279092":"code","920a27bb":"code","6c5fa5b7":"code","b455756f":"code","b961fff3":"code","47cdbede":"code","853203be":"code","fc566e65":"code","1d63040d":"code","1aa657a9":"code","b824f608":"code","c93e66c3":"code","2a264c61":"code","71ab2fca":"code","94dd5443":"code","b7d6e203":"code","751cd31c":"code","42c8d451":"code","8f88e603":"code","2db39cce":"code","33a56dc9":"code","bc4780fe":"code","08c1eedc":"code","d56c519a":"code","61265702":"code","7fc66fd2":"code","7d97ab30":"code","957081ba":"code","c7fa58b7":"code","ac078150":"code","50e10a36":"code","041dcb55":"code","8118e488":"code","438d1a76":"code","d93df628":"code","25ab8aab":"code","bda25ef2":"code","a61ca7e4":"code","62f33b47":"code","9b11b48a":"code","596a263b":"code","c07440d1":"code","8fddbe8f":"code","6185619a":"code","e758538f":"code","acc16fd5":"markdown","df27eb36":"markdown","ede63d0d":"markdown","f692b23e":"markdown"},"source":{"176eb285":"# importing libraries \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","7669c0a3":"\ndf = pd.read_csv(\"..\/input\/brasilian-houses-to-rent\/houses_to_rent.csv\")\ndf.head()","e59fa434":"df.drop('Unnamed: 0',axis=1,inplace=True)","0d1bbda5":"df.describe(include='O')","19b7dc80":"df.head()","19668e57":"df.info()","1fdb211d":"df.shape","f1c92216":"df['rooms'].value_counts()","93e4c1a4":"df['bathroom'].value_counts()","065e334b":"df['parking spaces'].value_counts()","1f9b23f1":"df['animal'].value_counts()","bbc53dd4":"df['furniture'].value_counts()","712ecd10":"df['floor'].value_counts()","c616a0ba":"df.replace('-',np.nan,inplace=True)","2721e997":"df.head()","7ce26ae8":"# creation of new attribute\ndf['New_hoa'] = df['hoa'].apply(lambda x: x[2:])\ndf['New_hoa'].head()","11c43ad8":"df['New_rent_amount'] = df['rent amount'].apply(lambda x: x[2:])\ndf['New_property_tax'] = df['property tax'].apply(lambda x: x[2:])\ndf['New_fire_insurance'] = df['fire insurance'].apply(lambda x: x[2:])\ndf['New_total'] = df['total'].apply(lambda x: x[2:])","963cf507":"col = ['rent amount','property tax','fire insurance','total']\ndf.drop(df[col],axis=1,inplace=True)","7d9104dd":"df.drop('hoa',axis=1,inplace=True)","9d474653":"df.head()","95a7a4ea":"df.replace(np.nan,0,inplace=True)","bb44d5a1":"df['floor'].dtype\ndf['floor'] = df['floor'].astype('int')","66fddcc1":"df.head()","0e1f2621":"animal_value = pd.get_dummies(df['animal'],drop_first=True)\nfurniture_value = pd.get_dummies(df['furniture'],drop_first=True)","ffcb885f":"df = pd.concat([df,animal_value,furniture_value],axis=1)","fc47d42e":"df.head()","138ed5bd":"df.drop('animal',axis=1,inplace=True)\ndf.drop('furniture',axis=1,inplace=True)","865bfe08":"df.head()","54b556d0":"df.info()","a7279092":"# df['New_hoa'] = df['New_hoa'].astype('int')\ndf['New_hoa'].replace(to_replace=',',value='',regex=True,inplace=True)","920a27bb":"df['New_hoa'].replace(to_replace=',',value='',regex=True,inplace=True)","6c5fa5b7":"df['New_rent_amount'].replace(to_replace=',',value='',regex=True,inplace=True)\ndf['New_property_tax'].replace(to_replace=',',value='',regex=True,inplace=True)\ndf['New_fire_insurance'].replace(to_replace=',',value='',regex=True,inplace=True)\ndf['New_total'].replace(to_replace=',',value='',regex=True,inplace=True)","b455756f":"df['New_hoa'].replace(to_replace='m info',value='0',inplace=True)","b961fff3":"df['New_hoa'].replace(to_replace='cluso',value='0',inplace=True)\n","47cdbede":"df.isin(['cluso']).any()","853203be":"df['New_property_tax'].replace(to_replace='cluso',value='0',inplace=True)","fc566e65":"df = df.astype(dtype=np.int64)","1d63040d":"df.head()","1aa657a9":"df['city'].value_counts()","b824f608":"sns.countplot(df['rooms'])","c93e66c3":"sns.countplot(df['bathroom'])","2a264c61":"sns.countplot(df['parking spaces'])","71ab2fca":"\nX = df.drop('city',axis=1)\ny = df['city']","94dd5443":"print(X.shape,\",\",y.shape)","b7d6e203":"from imblearn.over_sampling import RandomOverSampler","751cd31c":"rs = RandomOverSampler()","42c8d451":"X,y = rs.fit_resample(X,y)","8f88e603":"print(X.shape)\nprint(y.shape)","2db39cce":"X.head()","33a56dc9":"y.head()","bc4780fe":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","08c1eedc":"scaler.fit(X)\nX = scaler.transform(X)","d56c519a":"pd.DataFrame(X)","61265702":"from sklearn.model_selection import train_test_split","7fc66fd2":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)","7d97ab30":"print(X_train.shape,\",\",y_train.shape)\nprint(X_test.shape,\",\",y_test.shape)","957081ba":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier","c7fa58b7":"L_model = LogisticRegression()\nS_model = SVC()\nM_model = MLPClassifier(hidden_layer_sizes=(16,16))","ac078150":"L_model.fit(X_train,y_train)\nS_model.fit(X_train,y_train)\nM_model.fit(X_train,y_train)","50e10a36":"print(L_model.score(X_test,y_test))\nprint(S_model.score(X_test,y_test))\nprint(M_model.score(X_test,y_test))","041dcb55":"from sklearn.metrics import confusion_matrix,classification_report","8118e488":"y_predL = L_model.predict(X_test)\ny_predS = S_model.predict(X_test)\ny_predM = M_model.predict(X_test)","438d1a76":"print(confusion_matrix(y_test,y_predL))","d93df628":"confusion_matrix(y_test,y_predS)","25ab8aab":"confusion_matrix(y_test,y_predM)","bda25ef2":"print(classification_report(y_test,y_predL))","a61ca7e4":"print(classification_report(y_test,y_predS))","62f33b47":"print(classification_report(y_test,y_predM))","9b11b48a":"from sklearn.ensemble import RandomForestClassifier\nRD = RandomForestClassifier()","596a263b":"RD.fit(X_train,y_train)","c07440d1":"y_predR = RD.predict(X_test) ","8fddbe8f":"print(RD.score(X_test,y_test))","6185619a":"print(confusion_matrix(y_test,y_predR))","e758538f":"print(classification_report(y_test,y_predR))","acc16fd5":"# Data Preprocessing \/ Data Analysis","df27eb36":"# spliting the data ","ede63d0d":"# Exploratory Data analysis","f692b23e":"# loading dataset"}}