{"cell_type":{"afedba0c":"code","846a0c4b":"code","794bd3e1":"code","647b4697":"code","8affb8b2":"code","00838ae5":"code","9ab4974e":"code","16514e47":"code","b2678e8f":"code","9ef27895":"code","934fd7df":"code","49e3d241":"code","0bcc330d":"code","0965b2b4":"code","20d92e33":"code","79088cc4":"code","e4ae8ce9":"markdown","e18a8fcc":"markdown"},"source":{"afedba0c":"#  import\nimport os, sys, logging, random, time, math\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","846a0c4b":"# visualization\n%matplotlib inline\nsns.set()","794bd3e1":"#\u00a0create a decorator to give us runing time of a function (eq to %timeit magic ipython function)\ndef timer(funct) : \n    \n    def wrapper(*args, **kwargs) : \n        \n        t = time.time()\n        _ = funct(*args, **kwargs)\n        t = round(time.time() - t, 5)\n        \n        return t\n    \n    return wrapper\n\n\n#\u00a0test function\n@timer\ndef waiter(s) : \n    time.sleep(s)\n    \n####\n\nser = range(5)\nprint([round(waiter(i),2) for i in ser])","647b4697":"# our list comprehension\n@timer\ndef list_compr_1(ser) :\n    _ = [i**2 for i in ser]\n    \n####\n\nser = pd.Series(np.arange(10**6))\nlist_compr_1(ser)","8affb8b2":"#\u00a0our list comprehension (without lambda)\n@timer\ndef list_compr_2(ser) :\n    f = lambda i : i**2\n    _ = [f(i) for i in ser]\n    \n####\n\nser = pd.Series(np.arange(10**6))\nlist_compr_2(ser)","00838ae5":"#\u00a0our buit-in map\n@timer\ndef buin_map_1(ser) :\n    _ = map(lambda i : i**2, ser)\n    \n####\n\nser = pd.Series(np.arange(10**6))\nbuin_map_1(ser)","9ab4974e":"# our buit-in map (without lambda)\n@timer\ndef buin_map_2(ser) :\n    funct : lambda i : i**2\n    _ = map(funct, ser)\n    \n####\n\n#\u00a0ser = pd.Series(np.arange(10**6))\n#\u00a0buin_map_2(ser)","16514e47":"#\u00a0our pandas method apply\n@timer\ndef pd_apply_1(ser) :\n    _ = ser.apply(lambda i : i**2)\n    \n####\n\nser = pd.Series(np.arange(10**6))\npd_apply_1(ser)","b2678e8f":"# our pandas method apply (without lambda)\n@timer\ndef pd_apply_2(ser) : \n    f = lambda i : i**2\n    _ = ser.apply(f)\n    \n####\n\nser = pd.Series(np.arange(10**6))\npd_apply_2(ser)","9ef27895":"# our pandas method map\n@timer\ndef pd_map_1(ser) :\n    _ = ser.map(lambda i : i**2)\n    \n####\n\nser = pd.Series(np.arange(10**6))\npd_map_1(ser)","934fd7df":"# our pandas method map (without lambda)\n@timer\ndef pd_map_2(ser) :\n    f = lambda i : i**2\n    _ = ser.map(f)\n    \n####\n\nser = pd.Series(np.arange(10**6))\npd_map_2(ser)","49e3d241":"# define our params \nn = 6\nfunct_list = [list_compr_1, list_compr_2, buin_map_1, pd_apply_1, pd_apply_2, pd_map_1, pd_map_2]\ncols_list  = [\"list_compr_1\", \"list_compr_2\", \"buin_map_1\", \"pd_apply_1\", \"pd_apply_2\", \"pd_map_1\", \"pd_map_2\"]","0bcc330d":"#\u00a0compute for each method running time for 1, 10, 100, 10**n iterations \ndef fastest_method(n, N=1, funct_list=funct_list, cols_list=cols_list) : \n    \n    res = list()\n    i_list = np.arange(1,n)\n    \n    for i in i_list: \n        ser = pd.Series(np.arange(10**i))\n        res.append( [pd.Series([funct(ser) for _ in range(N)]).mean() for funct in funct_list])\n\n    res = pd.DataFrame(res, index=i_list, columns=cols_list)\n    \n    return res\n\n####\n\nfastest_method(n,10)","0965b2b4":"#\u00a0try iter from 10**1 to 10**8, just for one experience\nres = fastest_method(8,5)\nres","20d92e33":"#\u00a0plot it \ndef plot_res(res) : \n    \n    fig, ax = plt.subplots(1,1, figsize=(20,10))\n    res.plot(ax=ax)\n    ax.set_xlabel(\"nb of iter (logspace)\")\n    ax.set_ylabel(\"seconds\")\n    ax.set_title(\"fastest method\")\n\n####\n\nplot_res(res)","79088cc4":"#\u00a0select small nb of iters\n_res = res.iloc[:3]\nplot_res(_res)","e4ae8ce9":"<h1>Built-In list comprehension\/map vs pandas apply\/map methods : which one is the fastest?<\/h1>\n\n<br><br>\n\nIn this short kernel we are trying to find which method, between list comprehension, buil-in map, pandas apply and pandas map is the fastest method to transform a Series or a DataFrame column.","e18a8fcc":"<h1>Conclusion<\/h1>\n<br><br>\n<ul>\n  <li>map and list compr are much more faster than pandas apply or dict methods!<\/li>\n  <li>it is better to define a funct for your lambda funct rather than using your lambda in the body of your built-in list compr.\/map, or pandas apply\/map<\/li>\n<\/ul>\n\n<br>"}}