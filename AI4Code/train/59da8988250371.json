{"cell_type":{"6e932fda":"code","f2446aa2":"code","9ad74600":"code","69d8f8ac":"code","1fcb9204":"code","a84f1385":"code","0a6c4b93":"code","e95e7ee5":"code","c9cdc373":"code","b6bbd82c":"code","c91ab814":"code","c2b335e8":"code","9e0a8817":"code","3b7c4312":"code","19bbab24":"code","4bfde841":"code","1680fc9f":"code","9607add4":"code","0a445c16":"code","cd136a9d":"code","28d7d106":"code","1308697c":"code","4eec8a89":"code","3b859a2f":"code","ab0288ed":"code","677040cc":"code","59fb4824":"code","75f24fbb":"code","17f45c42":"code","a261e64d":"code","cccdab99":"code","543022e1":"code","de81147a":"code","4c3008e4":"code","c5b35051":"code","c54b717c":"code","7c35c00a":"code","2bff1621":"code","3564770a":"code","7384a1a5":"code","3a2bf24a":"code","d4ad588a":"code","02c6d1e9":"code","03b163aa":"code","0bcf9863":"code","6b8472f9":"code","a2e633bf":"code","035f7e0a":"code","c3bebbb1":"code","c626bc4e":"code","65de25a0":"code","3397e105":"code","07975ba7":"code","59a478c8":"code","6569d0f2":"code","27bacb42":"code","08239c64":"code","6d8fb4bd":"code","9cda54af":"code","2d8a0b58":"code","cd29f951":"code","549db324":"code","6b2a934f":"code","2c672d26":"code","f28d3b55":"code","493b1dd5":"code","f30c8dd5":"code","08b0d54c":"code","dc50156b":"code","1277f0a9":"code","ab5333ee":"code","60505549":"code","9fd9debd":"code","9f727196":"code","1efc913b":"code","0c5314be":"code","b16edb07":"code","4caabd6b":"code","6215c775":"code","d42f5376":"code","f9cb1f0f":"code","b188ac4a":"code","e494c6e6":"code","5757dea7":"code","6f2524e6":"code","3cb91eff":"code","88360761":"code","8ef5ac27":"code","77c8f5f8":"code","d27d5d01":"code","bdfea7ae":"code","5d6ecec3":"code","e03689d7":"code","700a97d2":"code","ecedb335":"code","d3e1f12a":"code","5e8d7d38":"code","3d4d1b7e":"code","472ea252":"markdown","e789f1a2":"markdown","f2db9855":"markdown","c88b68c0":"markdown","87463e85":"markdown","d3214336":"markdown","ccab2ed9":"markdown","57d428ce":"markdown","63536cf6":"markdown","94d95a4c":"markdown","264a0ad0":"markdown","25eae1fb":"markdown","6268f423":"markdown","5cc96631":"markdown","c0e06534":"markdown","5807ed74":"markdown","56cacbfa":"markdown","611de479":"markdown","086dd4a9":"markdown","03625ac5":"markdown","e779d0fb":"markdown","8a3ff92f":"markdown","9867ad3c":"markdown","49f1ff72":"markdown","82c239fd":"markdown","3098f062":"markdown","55cecd61":"markdown","5393a7ad":"markdown","9251a09f":"markdown","7b13ca68":"markdown","106ac2d2":"markdown"},"source":{"6e932fda":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","f2446aa2":"### load the data set into a Pandas dataframe\ntrain_filename = '..\/input\/widsdatathon2021\/TrainingWiDS2021.csv'\ntrain_df = pd.read_csv(train_filename)\ntest_filename = '..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv'\ntest_df = pd.read_csv(test_filename)","9ad74600":"pd.set_option('max_columns', None)","69d8f8ac":"#pd.reset_option('max_columns')","1fcb9204":"train_df.info(memory_usage='deep')","a84f1385":"train_df.head(5)","0a6c4b93":"# Add a new column as primary key\n#train_df['primary_key'] = range(1, len(train_df) + 1)\n# column \"Unnamed: 0\" is it\n#train_df = train_df.rename(columns={\"Unnamed: 0\": \"index\"}, errors=\"raise\")\n#test_df = test_df.rename(columns={\"Unnamed: 0\": \"index\"}, errors=\"raise\")","e95e7ee5":"train_df['source'] = 'train'\ntest_df['source'] = 'test'","c9cdc373":"train_df","b6bbd82c":"CombinedUnclearedData= train_df.append(test_df)","c91ab814":"#train_nafilter = (train_df['age'].isna()) & (train_df['height'].isna()) & \\\n#              (train_df['weight'].isna())\n#train_df_filter = train_df[~train_nafilter]\n\n#test_nafilter = (test_df['age'].isna()) & (test_df['height'].isna()) & \\\n#              (test_df['weight'].isna())\n#test_df_filter = test_df[~test_nafilter]","c2b335e8":"#test_df_filter.describe()","9e0a8817":"filtered_columns = ['encounter_id'\n                    ,'age'\n                    ,'gender'\n                    ,'height'\n                    ,'weight'\n                    ,'bmi'\n                    ,'ethnicity'\n                    ,'source']\ntrain_df= train_df.loc[:,filtered_columns]\n\ntest_df= test_df.loc[:,filtered_columns]","3b7c4312":"test_df","19bbab24":"combined_df= train_df.append(test_df)\ncombined_df","4bfde841":"def replace_age_Nan(row):\n    if (pd.isnull(row['age']) or row['age']==0):\n         return 1\n    else:\n        return row['age']\n    \ncombined_df['age_NotNan'] = combined_df.apply(replace_age_Nan, axis=1)\ncombined_df.query('age_NotNan == 1')","1680fc9f":"def replace_weight_Nan(row):\n    if pd.isnull(row['weight']) or row['weight']==0:\n         return 1\n    else:\n        return row['weight']\n    \ncombined_df['weight_NotNan'] = combined_df.apply(replace_weight_Nan, axis=1)\ncombined_df.query('weight_NotNan == 1')","9607add4":"def replace_height_Nan(row):\n    if pd.isnull(row['height']) or row['height']==0:\n         return 1\n    else:\n        return row['height']\n    \ncombined_df['height_NotNan'] = combined_df.apply(replace_height_Nan, axis=1)\ncombined_df","0a445c16":"def replace_gender_Nan(row):\n    if pd.isnull(row['gender']):\n         return 'Other\/Unknown'\n    else:\n        return row['gender']\n    \ncombined_df['gender_NotNan'] = combined_df.apply(replace_gender_Nan, axis=1)\ncombined_df","cd136a9d":"def replace_ethnicity_Nan(row):\n    if pd.isnull(row['ethnicity']):\n         return 'Other\/Unknown'\n    else:\n        return row['ethnicity']\n    \ncombined_df['ethnicity_NotNan'] = combined_df.apply(replace_ethnicity_Nan, axis=1)\ncombined_df","28d7d106":"combined_df.query('encounter_id==229025')","1308697c":"PreCleanedTable = combined_df","4eec8a89":"PreCleanedTable = PreCleanedTable.loc[:,['encounter_id'\n                                         ,'age_NotNan'    \n                                         ,'height_NotNan'\n                                         ,'weight_NotNan'             \n                                         ,'gender_NotNan'\n                                         ,'bmi'\n                                         ,'ethnicity_NotNan'\n                                         ,'source']]\n","3b859a2f":"PreCleanedTable = PreCleanedTable.rename(columns={\"age_NotNan\": \"age\",\"height_NotNan\": \"height\",\\\n                                                  \"weight_NotNan\": \"weight\",\"gender_NotNan\": \"gender\",\\\n                                                  \"ethnicity_NotNan\": \"ethnicity\"}, errors=\"raise\")\nPreCleanedTable","ab0288ed":"def age_bin(row):\n    if row['age']>5:\n        return int(row['age']\/10)*10\n    else:\n        return row['age']\n\nPreCleanedTable['agebin'] = PreCleanedTable.apply(age_bin, axis=1)\nPreCleanedTable","677040cc":"PreCleanedTableCopy = PreCleanedTable","59fb4824":"PreCleanedTableCopy.query('age == 1 | age == 0' )","75f24fbb":"PreCleanedTableCopy= PreCleanedTableCopy.query('weight != 1')","17f45c42":"PreCleanedTableCopy.query('weight == 1')","a261e64d":"PreCleanedTableCopy= PreCleanedTableCopy.query('height != 1')","cccdab99":"PreCleanedTableCopy.query('height == 1')","543022e1":"PreCleanedTableCopy","de81147a":"PreCleanedTableCopy.query('age < 1')","4c3008e4":"GroupByTable = PreCleanedTableCopy\nGroupByTable = PreCleanedTableCopy[['agebin', 'gender', 'ethnicity','weight','height']].groupby(['agebin'\\\n                                                                                                 , 'gender'\\\n                                                                                                 , 'ethnicity']).mean()\n#agg('mean')['agebin', 'gender', 'ethnicity','weight','height']].groupby(['agebin', 'gender', 'ethnicity']).mean()#agg('mean')","c5b35051":"GroupByTable.reset_index()","c54b717c":"#GroupByTable['index_col'] = range(1, len(GroupByTable) + 1)\n#GroupByTable","7c35c00a":"PreCleanedTableCopy = PreCleanedTable #(PreCleanedTableCopy['ethnicity'].isna()) | \nPreCleanedTableCopy_nafilter = (PreCleanedTableCopy['ethnicity'].isna()) | \\\n                               (PreCleanedTableCopy['ethnicity'].str.len()==0)\nPreCleanedTableCopyNafilter = PreCleanedTableCopy[PreCleanedTableCopy_nafilter]","2bff1621":"PreCleanedTableCopyNafilter","3564770a":"PreCleanedTableCopy_nafilter = (PreCleanedTableCopy['ethnicity'].isna()) & \\\n                               (PreCleanedTableCopy['gender'].isna())\nPreCleanedTableCopyNafilter = PreCleanedTableCopy[PreCleanedTableCopy_nafilter]\n\nPreCleanedTableCopy = PreCleanedTableCopy[~PreCleanedTableCopy_nafilter]","7384a1a5":"PreCleanedTableCopyNafilter.count()","3a2bf24a":"CombinedTrainTest= train_df.append(test_df)\nCombinedTrainTest.query('encounter_id == 238874') #142516","d4ad588a":"pd.Categorical(CombinedTrainTest['ethnicity']).unique()","02c6d1e9":"pd.Categorical(CombinedTrainTest['gender']).unique()","03b163aa":"PreCleanedTableCopy_nafilter = (PreCleanedTableCopy['ethnicity'].isna())\nPreCleanedTableCopy[PreCleanedTableCopy_nafilter]","0bcf9863":"CombinedTrainTest.count()","6b8472f9":"PreCleanedTableCopy","a2e633bf":"#df1.merge(df2, left_on='lkey', right_on='rkey')\nCleaningDataTable = PreCleanedTableCopy.merge(GroupByTable,how=\"left\",on =[\"agebin\",\"gender\",\"ethnicity\"])\nCleaningDataTable","035f7e0a":"CleaningDataTable.query('height_x==1 | height_x==0')","c3bebbb1":"CleaningDataTable.count()","c626bc4e":"def newweight(row):\n    if row['weight_x']==1 or row['weight_x']==0:\n        return row['weight_y']\n    else:\n        return row['weight_x']\n\nCleaningDataTable['newweight'] = CleaningDataTable.apply(newweight, axis=1)\nCleaningDataTable","65de25a0":"def newheight(row):\n    if row['height_x']==1 or row['height_x']==0:\n        return row['height_y']\n    else:\n        return row['height_x']\n\nCleaningDataTable['newheight'] = CleaningDataTable.apply(newheight, axis=1)","3397e105":"CleaningDataTable","07975ba7":"def newbmi(row):\n    if pd.isnull(row['bmi']) or row['bmi']==1 or row['bmi']==0:\n        return row['newweight']\/((row['newheight'])*(row['newheight']))*10000\n    else:\n        return row['bmi']\n\nCleaningDataTable['newbmi'] = CleaningDataTable.apply(newbmi, axis=1)\nCleaningDataTable","59a478c8":"CleaningDataTable.query('encounter_id ==229025')","6569d0f2":"def height_bin(row):\n    if row['newheight']>5:\n        return int(row['newheight']\/10)*10\n    else:\n        return row['newheight']\n\nCleaningDataTable['heightbin'] = CleaningDataTable.apply(height_bin, axis=1)\nCleaningDataTable","27bacb42":"def weight_bin(row):\n    if row['newweight']>5:\n        return int(row['newweight']\/10)*10\n    else:\n        return row['newweight']\n\nCleaningDataTable['weightbin'] = CleaningDataTable.apply(weight_bin, axis=1)\nCleaningDataTable","08239c64":"CleaningDataTable=CleaningDataTable.loc[:,['encounter_id'\n                                           ,'age'\n                                           ,'agebin' \n                                           ,'heightbin'\n                                           ,'weightbin'\n                                           ,'newweight'\n                                           ,'newheight'\n                                           ,'newbmi'\n                                           ,'gender'\n                                           ,'ethnicity'\n                                           ,'source']]\nCleaningDataTable = CleaningDataTable.rename(columns={\"newweight\": \"weight\",\"newheight\": \"height\"\\\n                                                      ,\"newbmi\": \"bmi\"}, errors=\"raise\")","6d8fb4bd":"CleaningDataTable.query('age==1')","9cda54af":"AgeMeanTable=CleaningDataTable.query('agebin > 5 & heightbin > 5 & weightbin > 5')\nAgeMeanTable.loc[:,['age'\n,'agebin'    \n,'heightbin'\n,'weightbin'\n,'gender'\n,'ethnicity']]","2d8a0b58":"AgeMeanGroupByTable = AgeMeanTable[['age', 'heightbin', 'weightbin',\\\n                                    'ethnicity','gender']].groupby(['heightbin', 'weightbin',\\\n                                                                    'ethnicity','gender']).mean()\nAgeMeanGroupByTable = AgeMeanGroupByTable.add_suffix('_mean')\nAgeMeanGroupByTable.reset_index()","cd29f951":"CombinedTrainTest.query('height >= 130 & height < 140 & weight >= 30 & weight < 40 & ethnicity == \\\"African American\\\"')","549db324":"CleaningDataTable2 = CleaningDataTable.merge(AgeMeanGroupByTable,how=\"left\", \\\n                                            on =[\"weightbin\",\"heightbin\",\"gender\",\"ethnicity\"])\n","6b2a934f":"CleaningDataTable2","2c672d26":"def newage(row):\n    if row['age']<=5:\n        return row['age_mean']\n    else:\n        return row['age']\n\nCleaningDataTable2['newage'] = CleaningDataTable2.apply(newage, axis=1)\nCleaningDataTable2","f28d3b55":"CleaningDataTable2.query('encounter_id ==229025')","493b1dd5":"CleaningDataTable2=CleaningDataTable2.loc[:,['encounter_id'\n                                             ,'agebin'\n                                             ,'heightbin'\n                                             ,'weightbin'\n                                             ,'newage'\n                                             ,'weight'\n                                             ,'height'\n                                             ,'bmi'\n                                             ,'gender'\n                                             ,'ethnicity'\n                                             ,'source']]\nCleaningDataTable2 = CleaningDataTable2.rename(columns={\"newage\": \"age\"}, errors=\"raise\")","f30c8dd5":"CleaningDataTable2","08b0d54c":"CleaningDataTable2_nafilter = (CleaningDataTable2['age'].isna()) | (CleaningDataTable2['height'].isna()) | \\\n              (CleaningDataTable2['weight'].isna())\nCleaningDataTable2_filter = CleaningDataTable2[CleaningDataTable2_nafilter]","dc50156b":"CleaningDataTable2_filter","1277f0a9":"CleaningDataTable2.query('ethnicity==\\'Caucasian\\' & gender==\\'Other\/Unknown\\' & agebin == 60')","ab5333ee":"AgeMeanTable=CleaningDataTable.query('agebin > 5 & heightbin > 5 & weightbin > 5')\nAgeMeanTable.loc[:,['age'\n                    ,'height'\n                    ,'gender']]","60505549":"AgeMeanGroupByTable = AgeMeanTable[['age', 'height','gender']].groupby(['gender']).mean()\nAgeMeanGroupByTable = AgeMeanGroupByTable.add_suffix('_mean')\nAgeMeanGroupByTable.reset_index()","9fd9debd":"CleaningDataTable3 = CleaningDataTable2.merge(AgeMeanGroupByTable,how=\"left\", on =[\"gender\"])","9f727196":"def newage(row):\n    if row['age']<=5 or pd.isnull(row['age']):\n        return row['age_mean']\n    else:\n        return row['age']\n\nCleaningDataTable3['newage'] = CleaningDataTable3.apply(newage, axis=1)\nCleaningDataTable3","1efc913b":" CleaningDataTable3.query('ethnicity==\\'Caucasian\\' & gender==\\'Other\/Unknown\\' & agebin == 60')","0c5314be":"def newheight(row):\n    if row['height']<=5 or pd.isnull(row['height']):\n        return row['height_mean']\n    else:\n        return row['height']\n\nCleaningDataTable3['newheight'] = CleaningDataTable3.apply(newheight, axis=1)\nCleaningDataTable3","b16edb07":"CleaningDataTable3.query('ethnicity==\\'Caucasian\\' & gender==\\'Other\/Unknown\\' & agebin == 60')","4caabd6b":"def newbmi(row):\n    if pd.isnull(row['bmi']) or row['bmi']==1 or row['bmi']==0:\n        return row['weight']\/((row['newheight'])*(row['newheight']))*10000\n    else:\n        return row['bmi']\n\nCleaningDataTable3['newbmi'] = CleaningDataTable3.apply(newbmi, axis=1)\nCleaningDataTable3","6215c775":"def height_bin(row):\n    if row['newheight']>5:\n        return int(row['newheight']\/10)*10\n    else:\n        return row['newheight']\n\nCleaningDataTable3['heightbin'] = CleaningDataTable3.apply(height_bin, axis=1)\nCleaningDataTable3","d42f5376":"def age_bin(row):\n    if row['newage']>5:\n        return int(row['newage']\/10)*10\n    else:\n        return row['newage']\n\nCleaningDataTable3['agebin'] = CleaningDataTable3.apply(age_bin, axis=1)\nCleaningDataTable3","f9cb1f0f":"CleaningDataTable3.query('ethnicity==\\'Caucasian\\' & gender==\\'Other\/Unknown\\' & agebin == 60')","b188ac4a":"CleaningDataTable3=CleaningDataTable3.loc[:,['encounter_id'\n                                             ,'agebin'\n                                             ,'heightbin'\n                                             ,'weightbin'\n                                             ,'newage'\n                                             ,'weight'\n                                             ,'newheight'\n                                             ,'newbmi'\n                                             ,'gender'\n                                             ,'ethnicity'\n                                             ,'source']]\nCleaningDataTable3 = CleaningDataTable3.rename(columns={\"newage\": \"age\", \"newheight\": \"height\", \"newbmi\": \"bmi\"}, errors=\"raise\")","e494c6e6":"CleaningDataTable3","5757dea7":"CleaningDataTable3_nafilter = (CleaningDataTable3['age'].isna()) | (CleaningDataTable3['height'].isna()) | \\\n              (CleaningDataTable3['weight'].isna())\nCleaningDataTable3_filter = CleaningDataTable3[CleaningDataTable3_nafilter]","6f2524e6":"CleaningDataTable3_filter","3cb91eff":"CombinedClearedDataUnclearedData = CombinedUnclearedData.merge(CleaningDataTable3,how=\"left\", on =[\"encounter_id\"])","88360761":"CombinedClearedDataUnclearedData","8ef5ac27":"filtered_columns = ['encounter_id'\n                    ,'agebin'\n                    ,'weightbin'\n                    ,'heightbin'             \n                    ,'age_y'\n                    ,'height_y'\n                    ,'weight_y'\n                    ,'bmi_y'\n                    ,'ethnicity_y'\n                    ,'gender_y'\n                    ,'source_y'       \n                    ,'d1_diasbp_invasive_max'\n                    ,'d1_diasbp_invasive_min'\n                    ,'d1_diasbp_noninvasive_max'\n                    ,'d1_diasbp_noninvasive_min'\n                    ,'d1_sysbp_invasive_max'\n                    ,'d1_sysbp_invasive_min'\n                    ,'d1_sysbp_noninvasive_max'\n                    ,'d1_sysbp_noninvasive_min'\n                    ,'d1_albumin_max'\n                    ,'d1_albumin_min'\n                    ,'d1_bilirubin_max'\n                    ,'d1_bilirubin_min'\n                    ,'d1_creatinine_max'\n                    ,'d1_creatinine_min'\n                    ,'d1_glucose_max'\n                    ,'d1_glucose_min'\n                    ,'diabetes_mellitus'\n                   ]\nCombinedClearedDataUnclearedData_filteredcolumns= CombinedClearedDataUnclearedData.loc[:,filtered_columns]\n\n","77c8f5f8":"CombinedClearedDataUnclearedData_filteredcolumns","d27d5d01":"CombinedClearedDataUnclearedData_filteredcolumns['diabetes_mellitus'] = CombinedClearedDataUnclearedData_filteredcolumns['diabetes_mellitus'].fillna(-1)\nCombinedClearedDataUnclearedData_filteredcolumns = CombinedClearedDataUnclearedData_filteredcolumns.astype({'diabetes_mellitus': 'int64'})","bdfea7ae":"CombinedClearedDataUnclearedData_filteredcolumns.dtypes","5d6ecec3":"for col in CombinedClearedDataUnclearedData_filteredcolumns.columns:\n    print(col)\n    if CombinedClearedDataUnclearedData_filteredcolumns.dtypes[col] == \"float64\":\n        m=(CombinedClearedDataUnclearedData_filteredcolumns[col].median()+CombinedClearedDataUnclearedData_filteredcolumns[col].mean())\/2\n        CombinedClearedDataUnclearedData_filteredcolumns[col] = CombinedClearedDataUnclearedData_filteredcolumns[col].fillna(m)","e03689d7":"CombinedClearedDataUnclearedData_filteredcolumns","700a97d2":"CombinedCleaningDataTable = CombinedClearedDataUnclearedData_filteredcolumns.rename(columns={\"age_y\": \"age\"\\\n                                                                                             ,\"height_y\": \"height\"\\\n                                                                                             ,\"weight_y\": \"weight\"\\\n                                                                                             ,\"bmi_y\": \"bmi\"\\\n                                                                                             ,\"ethnicity_y\": \"ethnicity\"\\\n                                                                                             ,\"gender_y\": \"gender\"\\\n                                                                                             ,\"source_y\": \"source\"}\\\n                                                                                    , errors=\"raise\")","ecedb335":"CombinedCleaningDataTable","d3e1f12a":"CombinedCleaningDataTable.to_csv('.\/ClearedTrainTestDataSet.csv',index=False)","5e8d7d38":"ClearedTrainDataSet = CombinedCleaningDataTable.query('source == \\'train\\'')\nClearedTestDataSet = CombinedCleaningDataTable.query('source == \\'test\\'')\nClearedTestDataSet.head(5)","3d4d1b7e":"ClearedTrainDataSet.to_csv('..\/input\/wids2021-cleareddata\/ClearedTrainDataSet.csv',index=False)\nClearedTestDataSet.to_csv('..\/input\/wids2021-cleareddata\/ClearedTestDataSet.csv',index=False)","472ea252":"#### BEGIN some checks of ethnicity","e789f1a2":"### a) Add a column as index key >> don't need this","f2db9855":"### g) set the right columns and column name in PreCleanedTable","c88b68c0":"### a) Delete where weight==1","87463e85":"### b) Delete where height==1","d3214336":"### b) weight","ccab2ed9":"### c) Add index_col for sorting >> don't need this","57d428ce":"## 5) Change NA for age, weight, height to 1","63536cf6":"## 7+8) Set weight and height mean if they values are 1 ","94d95a4c":"## 11) There are more data with null values in age,height and weight","264a0ad0":"### h) Calculate ages by decade for all ages > 5","25eae1fb":"## 13) We combine with our columns we want to use to predict ","6268f423":"### a) Calculate height by decade for all ages > 5","5cc96631":"## 14) We write cleared data to a new file","c0e06534":"### a) age","5807ed74":"### d) gender","56cacbfa":"## 15) We write it in 2 files (one for training set and one for test set)","611de479":"## 2) Add index and source as new columns","086dd4a9":"# ## 12) we have to set age again and others","03625ac5":"## 9) Calculate BMI new","e779d0fb":"#### END some checks of ethnicity","8a3ff92f":"## 6) Create GroupByTable","9867ad3c":"### e) ethnicity","49f1ff72":"## 10) set new mean age table  ","82c239fd":"## 1) Read training and test data set","3098f062":"### f) rename table to PreCleanedTable","55cecd61":"### b) Add a column (source) to indicate TRAIN (labeled data set) ","5393a7ad":"### c) height","9251a09f":"## 4) Remove all columns we don't need in the moment","7b13ca68":"### b) Calculate weight by decade for all ages > 5","106ac2d2":"## 3) Remove from each any row where age, weight and height are NA (all three) and take a copy  >> don't need this"}}