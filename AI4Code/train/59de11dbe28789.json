{"cell_type":{"e49b939a":"code","607344d5":"code","f1d04c30":"code","fb6b87b8":"code","8507165c":"markdown","d9fda496":"markdown","247f9fef":"markdown"},"source":{"e49b939a":"import pickle\nimport zlib\nimport base64 as b64\nimport numpy as np\n\ndef serializeAndCompress(value, verbose=True):\n  serializedValue = pickle.dumps(value)\n  if verbose:\n    print('Lenght of serialized object:', len(serializedValue))\n  c_data =  zlib.compress(serializedValue, 9)\n  if verbose:\n    print('Lenght of compressed and serialized object:', len(c_data))\n  return b64.b64encode(c_data)\n\ndef decompressAndDeserialize(compresseData):\n  d_data_byte = b64.b64decode(compresseData)\n  data_byte = zlib.decompress(d_data_byte)\n  value = pickle.loads(data_byte)\n  return value","607344d5":"m = 12\nn = 12\nobs_space_n = m*n\naction_space_n = 2\nq_table = np.zeros([obs_space_n, action_space_n])\nfor n_sim in range(10000):\n    # Train your agent\n    # ...\n    # Store a fake Qtable value\n    q_table[np.random.randint(obs_space_n), np.random.randint(action_space_n)] = np.random.random()\nserialized_q_table = serializeAndCompress(q_table)","f1d04c30":"print(serialized_q_table)","fb6b87b8":"deserialized_q_table = decompressAndDeserialize(serialized_q_table)\nprint(deserialized_q_table[:10,:])","8507165c":"# Serializing objects (Q-Table, NN Weights) with base64, pickle and zlib\nIn this very short notebook I will show a simple method to serialize a python's object and write it directly into a .py file as a string. This can be very useful when you want to store a Q-table or a neural network after an offline training. ","d9fda496":"Pickle can serialize all type of objects like ndarray, dictionaries, classes, lists, etc...\nThis is an example of usage:","247f9fef":"You can now copy and paste this string directly into the .py submission file."}}