{"cell_type":{"7490f210":"code","520acd2c":"code","189f0adc":"code","e7b6392d":"code","b16c8be9":"code","11c54680":"code","bff2b6ce":"code","d5ec5f06":"code","e5bb9f7a":"code","7657cf24":"code","2b556498":"code","08c88f8c":"code","a6061373":"code","bb9bfef3":"code","4bf0bbc2":"code","74bb4984":"markdown","d9cabb52":"markdown","5042fe34":"markdown","6df6ba00":"markdown","b8e5580a":"markdown","52f4d64f":"markdown","b24c54ae":"markdown","0c547ea8":"markdown","2215db6f":"markdown"},"source":{"7490f210":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","520acd2c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\ndf = pd.read_csv(\"\/kaggle\/input\/cs-challenge\/training_set.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/cs-challenge\/test_set.csv\")","189f0adc":"df = df.sort_values('Date_time')\ndf = df.fillna(method='ffill')\ndf_test = df_test.sort_values('Date_time')\ndf_test = df_test.fillna(method='ffill')","e7b6392d":"target=df['TARGET']\nId_train=df['ID']\nId_test=df_test['ID']","b16c8be9":"df_c=df.drop(columns=['TARGET','ID'])\ndf_test_c=df_test.drop(columns=['ID'])","11c54680":"df_onehot=pd.get_dummies(df_c)\ndf_test_onehot=pd.get_dummies(df_test_c)","bff2b6ce":"make regularition","d5ec5f06":"def regularit(df):\n    newDataFrame = pd.DataFrame(index=df.index)\n    columns = df.columns.tolist()\n    for c in columns:\n        d = df[c]\n        MAX = d.max()\n        MIN = d.min()\n        newDataFrame[c] = ((d - MIN) \/ (MAX - MIN)).tolist()\n    return newDataFrame","e5bb9f7a":"df1=regularit(df1)","7657cf24":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(df_onehot, target, test_size=0.00001, random_state=404)","2b556498":"from sklearn.ensemble import BaggingRegressor\nmodel_BaggingRegressor = BaggingRegressor(n_estimators=20)\nmodel_BaggingRegressor.fit(X_train,Y_train)\nY_pred=model_BaggingRegressor.predict(X_test)","08c88f8c":"hat = pd.DataFrame([Y_pred, Y_test]).T\nhat.columns = ['Prediction' ,'Verit\u00e9']\nhat['erreur'] = abs(hat.iloc[:,0] - hat.iloc[:,1])\nhat","a6061373":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(Y_test, Y_pred)","bb9bfef3":"p=model_BaggingRegressor.predict(df_test_onehot)","4bf0bbc2":"results = pd.DataFrame()\nresults['ID'] = Id_test\nresults['TARGET'] = p\nresults.to_csv('linear_results.csv', index=False)","74bb4984":"Check MAE mean abosolute error","d9cabb52":"onehot_encoding for string features","5042fe34":"Extract target abd ID from training set and test set","6df6ba00":"Read CSV file","b8e5580a":"Data completion for training set and test set","52f4d64f":"Write results into CSV","b24c54ae":"split from training_set to X_train and Y_train","0c547ea8":"Apply trained model to predict","2215db6f":"make bagging_regression"}}