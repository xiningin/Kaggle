{"cell_type":{"6b553296":"code","8bc0595d":"code","83569c63":"code","e097e490":"code","01d6756a":"code","74261b9a":"code","441436ed":"code","7b8eae6c":"code","11e05a9a":"code","7a422972":"code","d71e245c":"code","1634fce1":"code","c2af47cd":"code","17b48add":"code","0c92e748":"code","a7c3a0a4":"code","d481278c":"code","3c9d3c6c":"code","7a5112e7":"code","ea604f1e":"code","0c8d225d":"code","7dfd45b8":"code","67f7230a":"code","fcc539af":"code","de5a3a9b":"code","8f9a873a":"code","522d8366":"code","72e95e60":"code","9501f7a5":"code","258e7d5a":"code","ea17927e":"code","2b33dc20":"code","53eb0c1f":"code","2b3b31a7":"code","f5ccde75":"code","66f52909":"code","01640ded":"code","aef9c57e":"code","b9c82d50":"code","d1e0d605":"code","4681c519":"code","1a073fdb":"code","153626f1":"code","ae8f684c":"code","3899b3e8":"code","880906ff":"code","04dc8aff":"code","49f32879":"code","9b418a43":"code","d164cbf4":"code","696fb12f":"code","b424cafe":"code","125772fe":"code","9ec37cb2":"code","79a80d29":"code","361a537d":"code","e38a0e0e":"code","0ec2ff01":"code","221a1d3d":"code","82e6de67":"code","2617f46d":"markdown","f8095510":"markdown","72803c77":"markdown","3db9f0f3":"markdown","31b5c019":"markdown","36a6fcee":"markdown","0f955760":"markdown","a57324e4":"markdown","876d2bf7":"markdown","cc90a62c":"markdown","125bce43":"markdown","c49c272d":"markdown","a6e17d62":"markdown","8821d248":"markdown","db8592f3":"markdown","4554f712":"markdown","cab5877b":"markdown","ab653aec":"markdown","07573e28":"markdown"},"source":{"6b553296":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bc0595d":"import warnings\nwarnings.filterwarnings('ignore')","83569c63":"data=pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\n","e097e490":"data.head()","01d6756a":"data.shape","74261b9a":"data.columns","441436ed":"data.info()","7b8eae6c":"data.isnull().sum()","11e05a9a":"data.describe().T","7a422972":"# Plotting histogram for the entire dataset\nfig = plt.figure(figsize = (15,15))\nax = fig.gca()\ng = data.hist(ax=ax)","d71e245c":"sns.countplot(x='output',hue='sex',data=data)","1634fce1":"women=data.loc[data.sex==1]['output']\nrate_women=sum(women)\/len(women) * 100\nprint(' % of women got heart attack : ', rate_women)","c2af47cd":"men=data.loc[data.sex==0]['output']\nrate_men=sum(men)\/len(men) * 100\nprint(' % of men got heart attack : ', rate_men)","17b48add":"# Visualization to check if the dataset is balanced or not\nsns.countplot(x='output', data=data)\n","0c92e748":"sns.countplot(x='output',hue='cp',data=data) #chest pain type","a7c3a0a4":"sns.countplot(x='output',hue='exng',data=data) #exercise induced angina","d481278c":"#(fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\nsns.countplot(x='output',hue='fbs',data=data) \n","3c9d3c6c":"sns.distplot(data['chol']) #cholestoral in mg\/dl fetched via BMI sensor","7a5112e7":"sns.distplot(data['age'])","ea604f1e":"data.corr()","0c8d225d":"# Selecting correlated features using Heatmap\n\n# Get correlation of all the features of the dataset\ncorr_matrix = data.corr()\ntop_corr_features = corr_matrix.index\n\n# Plotting the heatmap\nplt.figure(figsize=(20,20))\nsns.heatmap(data=data[top_corr_features].corr(), annot=True, cmap='RdYlGn')","7dfd45b8":"for i in data.columns:\n    sns.boxplot(data[i])\n    plt.title(i)\n    plt.show()","67f7230a":"def outlinefree(dataCol):\n    sorted(dataCol)\n        # getting percentile 25 and 27 that will help us for getting IQR (interquartile range)\n    Q1,Q3 = np.percentile(dataCol,[25,75])\n        # getting IQR (interquartile range)\n    IQR = Q3-Q1\n        # getting Lower range error\n    LowerRange = Q1-(1.5 * IQR)\n        # getting upper range error\n    UpperRange = Q3+(1.5 * IQR)\n        # return Lower range and upper range.\n    return LowerRange,UpperRange","fcc539af":"lwtrtbps,uptrtbps = outlinefree(data['trtbps'])\nlwchol,upchol = outlinefree(data['chol'])\nlwoldpeak,upoldpeak = outlinefree(data['oldpeak'])","de5a3a9b":"data['trtbps'].replace(list(data[data['trtbps'] > uptrtbps].trtbps) ,uptrtbps,inplace=True)\ndata['chol'].replace(list(data[data['chol'] > upchol].chol) ,upchol,inplace=True)\ndata['oldpeak'].replace(list(data[data['oldpeak'] > upoldpeak].oldpeak) ,upoldpeak,inplace=True)","8f9a873a":"dataset = pd.get_dummies(data, columns=['sex', 'cp', 'fbs', 'restecg', 'exng', 'slp', 'caa', 'thall'])","522d8366":"dataset.columns","72e95e60":"from sklearn.preprocessing import StandardScaler\nstandScaler = StandardScaler()\ncolumns_to_scale = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']\ndataset[columns_to_scale] = standScaler.fit_transform(dataset[columns_to_scale])","9501f7a5":"dataset.head()","258e7d5a":"X=dataset.drop('output',axis=1).values\nY=dataset['output'].values","ea17927e":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=100)","2b33dc20":"from sklearn.linear_model import LogisticRegression\nreg= LogisticRegression()  \nreg.fit(x_train, y_train)","53eb0c1f":"predict1=reg.predict(x_test)","2b3b31a7":"from sklearn.metrics import accuracy_score\nacc1=accuracy_score(predict1,y_test)\nacc1","f5ccde75":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict1)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","66f52909":"from sklearn.neighbors import KNeighborsClassifier\nclassifier= KNeighborsClassifier() \nclassifier.fit(x_train, y_train) \n","01640ded":"predict2=classifier.predict(x_test)","aef9c57e":"from sklearn.metrics import accuracy_score\nacc2=accuracy_score(predict2,y_test)\nacc2","b9c82d50":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict2)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","d1e0d605":"from sklearn.tree import DecisionTreeClassifier\ntree_classifier=DecisionTreeClassifier(criterion = 'entropy',max_depth=3,random_state=2)\ntree_classifier.fit(x_train,y_train)","4681c519":"predict3=tree_classifier.predict(x_test)\n","1a073fdb":"from sklearn.metrics import accuracy_score\nacc3=accuracy_score(predict3,y_test)\nacc3","153626f1":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict3)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","ae8f684c":"from sklearn.ensemble import RandomForestClassifier\nrandomforest_model = RandomForestClassifier(max_depth=5, random_state=2)\nrandomforest_model.fit(x_train, y_train)","3899b3e8":"predict4=randomforest_model.predict(x_test)\n","880906ff":"from sklearn.metrics import accuracy_score\nacc4=accuracy_score(predict4,y_test)\nacc4","04dc8aff":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict4)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","49f32879":"from sklearn import model_selection\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nseed = 7\nnum_trees = 50","9b418a43":"kfold = model_selection.KFold(n_splits=10, random_state=seed)\nmodel = GradientBoostingClassifier(n_estimators=num_trees, random_state=seed)\nmodel.fit(x_train,y_train)\n# results = model_selection.cross_val_score(model, x, y, cv=kfold)\n# results","d164cbf4":"predict5=model.predict(x_test)","696fb12f":"from sklearn.metrics import accuracy_score\nacc5=accuracy_score(predict5,y_test)\nacc5","b424cafe":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict5)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","125772fe":"from sklearn.metrics import precision_score,recall_score,f1_score,mean_absolute_error,roc_auc_score\ndef metric(y_test,y_predict):\n    ps=precision_score(y_test,y_predict) #Precision\n    rs=recall_score(y_test,y_predict) #Recall\n    f1s=f1_score(y_test,y_predict) #f1Score\n    return(ps,rs,f1s)","9ec37cb2":"lr=list(metric(y_test,predict1))\nlr.append(acc1)\nlr=pd.Series(lr,index=['precession','Recall','F1_score','accuracy_score'])\nlr","79a80d29":"knn=list(metric(y_test,predict2))\nknn.append(acc2)\nknn=pd.Series(knn,index=['precession','Recall','F1_score','accuracy_score'])\nknn","361a537d":"dt=list(metric(y_test,predict3))\ndt.append(acc3)\ndt=pd.Series(dt,index=['precession','Recall','F1_score','accuracy_score'])\ndt","e38a0e0e":"rf=list(metric(y_test,predict4))\nrf.append(acc4)\nrf=pd.Series(rf,index=['precession','Recall','F1_score','accuracy_score'])\nrf","0ec2ff01":"gb=list(metric(y_test,predict5))\ngb.append(acc5)\ngb=pd.Series(gb,index=['precession','Recall','F1_score','accuracy_score'])\ngb","221a1d3d":"eval=pd.DataFrame([lr,knn,dt,rf,gb],index=['LogisticRegression','KNN_Classifier','Decision_Tree','Random Forest','Gradient Boosting'])","82e6de67":"eval","2617f46d":"## for logistic regression","f8095510":"# Handling Outliers","72803c77":"## for KNN Classifier","3db9f0f3":"## Decision Tree Classifier","31b5c019":"**Precision**\n\nIt is the number of correct positive results divided by the number of positive results predicted by the classifier.\n\n**Recall**\n\nIt is the number of correct positive results divided by the number of all relevant samples (all samples that should have been identified as positive).\n\n**f1_score**\n\nF1 Score is used to measure a test\u2019s accuracy\n\nF1 Score is the Harmonic Mean between precision and recall. It tells you how precise your classifier is (how many instances it classifies correctly), as well as how robust it is (it does not miss a significant number of instances).","36a6fcee":"## Gradient Boosting","0f955760":"# From the above observations we can finalize Logistic Regression or Random Forest as our best model","a57324e4":"# Evaluation","876d2bf7":"## Spliting data into train and test sets","cc90a62c":"## For Gradient Boosting","125bce43":"# Feature Engineering","c49c272d":"## for Decision Tree","a6e17d62":"## Random Forest","8821d248":"# Outliers Detection","db8592f3":"## Logistic Regression","4554f712":"## KNeighbours Classifier","cab5877b":"# Model Building","ab653aec":"## For Random Forest","07573e28":"# Dataset description\n\nAge : Age of the patient\n\nSex : Sex of the patient\n\nexang: exercise induced angina (1 = yes; 0 = no)\n\nca: number of major vessels (0-3)\n\ncp : Chest Pain type chest pain type\n\nValue 1: typical angina\n\nValue 2: atypical angina\n\nValue 3: non-anginal pain\n\nValue 4: asymptomatic\n\ntrtbps : resting blood pressure (in mm Hg)\n\nchol : cholestoral in mg\/dl fetched via BMI sensor\n\nfbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\nrest_ecg : resting electrocardiographic results\n\nValue 0: normal\n\nValue 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n\nValue 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n\nthalach : maximum heart rate achieved\n\ntarget : 0= less chance of heart attack 1= more chance of heart attack\n"}}