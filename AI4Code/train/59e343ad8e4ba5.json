{"cell_type":{"1219a7ef":"code","a68f131e":"code","488ad503":"code","b0b607d8":"code","33a5ba7c":"code","bebc64dd":"code","ac25269f":"code","9082c983":"code","0ff051cd":"code","a6ffbe30":"code","4d9a79dc":"code","80f8da98":"markdown","2f0150d0":"markdown","c7b88f86":"markdown"},"source":{"1219a7ef":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom pathlib import Path\nimport os\n\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,classification_report\n\nimport warnings \nwarnings.filterwarnings('ignore')       ","a68f131e":"image_dir = Path('..\/input\/dockship-boat-type-classification\/Train')","488ad503":"images = list(image_dir.glob(r'**\/*.jpg'))\nlabel = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], images))\n\nimage_files = pd.DataFrame({'Filepath' : images, 'label' : label}).astype(str).sample(frac=1.0, random_state=1).reset_index(drop=True)","b0b607d8":"image_files","33a5ba7c":"image_files['label'].value_counts()","bebc64dd":"traindata, testdata = train_test_split(image_files, train_size = 0.7, random_state=1)","ac25269f":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255,\n    validation_split=0.2\n)\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)","9082c983":"train_images = train_generator.flow_from_dataframe(\n    dataframe=traindata,\n    x_col='Filepath',\n    y_col='label',\n    target_size=(224,224),\n    color_mode= 'rgb',\n    class_mode='categorical',\n    batch_size = 32,\n    shuffle =True,\n    seed =42,\n    subset = 'training'\n)\nval_images = train_generator.flow_from_dataframe(\n    dataframe=traindata,\n    x_col='Filepath',\n    y_col='label',\n    target_size=(224,224),\n    color_mode= 'rgb',\n    class_mode='categorical',\n    batch_size = 32,\n    shuffle =True,\n    seed =42,\n    subset = 'validation'\n)\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=testdata,\n    x_col='Filepath',\n    y_col='label',\n    target_size=(224,224),\n    color_mode= 'rgb',\n    class_mode='categorical',\n    batch_size = 32,\n    shuffle =False\n)","0ff051cd":"inputs  = tf.keras.Input(shape=(224,224,3))\nx = tf.keras.layers.Conv2D(filters = 32, kernel_size = (3,3), activation ='relu')(inputs)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.Conv2D(filters = 32, kernel_size = (3,3), activation ='relu')(x)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(124,activation='relu')(x)\nx = tf.keras.layers.Dense(124,activation='relu')(x)\noutputs = tf.keras.layers.Dense(9, activation='softmax')(x)\n\nmodel  = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer ='adam',\n    loss = 'categorical_crossentropy',\n    metrics =['accuracy']\n)\n\nhistory= model.fit(\n    train_images,\n    validation_data = val_images,\n    epochs = 100,\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(\n            monitor = 'val_loss',\n            patience= 3,\n            restore_best_weights =True                             \n        )\n    ]\n\n\n)","a6ffbe30":"result = model.evaluate(test_images, verbose=0)\nprint(\" Test loss : {:.5f}\".format(result[0]))\nprint(\" Test Accuracy : {:.2f}%\".format(result[1]*100))","4d9a79dc":"predictions = np.argmax(model.predict(test_images), axis =1 )\n\ncm = confusion_matrix(test_images.labels, predictions)\nclr = classification_report(test_images.labels, predictions, target_names = list(train_images.class_indices.keys()))\n\nplt.figure(figsize=(10,10))\nsns.heatmap(cm, annot =True, fmt='g', vmin=0, cmap =\"Blues\", cbar= False)\nplt.xticks (ticks = np.arange(9) +0.5, labels = list(train_images.class_indices.keys()))\nplt.yticks (ticks = np.arange(9) +0.5, labels = list(train_images.class_indices.keys()))\nplt.xlabel('Actual')\nplt.ylabel('predicted')\n\n\nprint('Classificatio report : \\n--------------------------------------\\n', clr)","80f8da98":"# Training","2f0150d0":"# results","c7b88f86":"# Load the image Data"}}