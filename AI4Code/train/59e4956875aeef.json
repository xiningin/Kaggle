{"cell_type":{"5c780e6a":"code","113233fa":"code","92f7b1a0":"code","be85fedd":"code","037bd6a3":"code","92631145":"code","99a15b56":"code","e51482c4":"code","d90c021e":"code","5e68899d":"code","426476e0":"code","e9362bbe":"code","859c0e82":"code","05a6a330":"code","6283dc94":"code","47821209":"code","8d1bddaf":"code","5f97b125":"code","0d52dfdc":"code","eaa2692e":"code","d1450d8c":"code","17acd38f":"code","e313304f":"code","79e08bb1":"code","9e81cd9a":"code","6dd7f757":"code","c1a63486":"code","98c1d44f":"code","eddaaf16":"markdown"},"source":{"5c780e6a":"import numpy as np \nimport pandas as pd \nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","113233fa":"PATH_WEEK2='\/kaggle\/input\/covid19-global-forecasting-week-2'\ndf_train = pd.read_csv(f'{PATH_WEEK2}\/train.csv')\ndf_test = pd.read_csv(f'{PATH_WEEK2}\/test.csv')","92f7b1a0":"df_train.head()","be85fedd":"df_test.head()","037bd6a3":"df_train.rename(columns={'Country_Region':'Country'}, inplace=True)\ndf_test.rename(columns={'Country_Region':'Country'}, inplace=True)\n\ndf_train.rename(columns={'Province_State':'State'}, inplace=True)\ndf_test.rename(columns={'Province_State':'State'}, inplace=True)","92631145":"df_train['Date'] = pd.to_datetime(df_train['Date'], infer_datetime_format=True)\ndf_test['Date'] = pd.to_datetime(df_test['Date'], infer_datetime_format=True)","99a15b56":"df_train.info()","e51482c4":"df_test.info()","d90c021e":"y1_Train = df_train.iloc[:, -2]\ny1_Train.head()","5e68899d":"y2_Train = df_train.iloc[:, -1]\ny2_Train.head()","426476e0":"EMPTY_VAL = \"EMPTY_VAL\"\n\ndef fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state","e9362bbe":"#X_Train = df_train.loc[:, ['State', 'Country', 'Date']]\nX_Train = df_train.copy()\n\nX_Train['State'].fillna(EMPTY_VAL, inplace=True)\nX_Train['State'] = X_Train.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\nX_Train.loc[:, 'Date'] = X_Train.Date.dt.strftime(\"%m%d\")\nX_Train[\"Date\"]  = X_Train[\"Date\"].astype(int)\n\nX_Train.head()","859c0e82":"#X_Test = df_test.loc[:, ['State', 'Country', 'Date']]\nX_Test = df_test.copy()\n\nX_Test['State'].fillna(EMPTY_VAL, inplace=True)\nX_Test['State'] = X_Test.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\nX_Test.loc[:, 'Date'] = X_Test.Date.dt.strftime(\"%m%d\")\nX_Test[\"Date\"]  = X_Test[\"Date\"].astype(int)\n\nX_Test.head()","05a6a330":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()","6283dc94":"X_Train.Country = le.fit_transform(X_Train.Country)\nX_Train['State'] = le.fit_transform(X_Train['State'])\n\nX_Train.head()","47821209":"X_Test.Country = le.fit_transform(X_Test.Country)\nX_Test['State'] = le.fit_transform(X_Test['State'])\n\nX_Test.head()","8d1bddaf":"df_train.head()","5f97b125":"df_train.loc[df_train.Country == 'Afghanistan', :]","0d52dfdc":"df_test.tail()","eaa2692e":"from warnings import filterwarnings\nfilterwarnings('ignore')","d1450d8c":"le = preprocessing.LabelEncoder()","17acd38f":"from xgboost import XGBRegressor\nimport lightgbm as lgb","e313304f":"countries = X_Train.Country.unique()\n\ndf_out = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\ndf_out2 = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\n\nfor country in countries:\n    states = X_Train.loc[X_Train.Country == country, :].State.unique()\n    #print(country, states)\n    # check whether string is nan or not\n    for state in states:\n        X_Train_CS = X_Train.loc[(X_Train.Country == country) & (X_Train.State == state), ['State', 'Country', 'Date', 'ConfirmedCases', 'Fatalities']]\n        \n        y1_Train_CS = X_Train_CS.loc[:, 'ConfirmedCases']\n        y2_Train_CS = X_Train_CS.loc[:, 'Fatalities']\n        \n        X_Train_CS = X_Train_CS.loc[:, ['State', 'Country', 'Date']]\n        \n        X_Train_CS.Country = le.fit_transform(X_Train_CS.Country)\n        X_Train_CS['State'] = le.fit_transform(X_Train_CS['State'])\n        \n        X_Test_CS = X_Test.loc[(X_Test.Country == country) & (X_Test.State == state), ['State', 'Country', 'Date', 'ForecastId']]\n        \n        X_Test_CS_Id = X_Test_CS.loc[:, 'ForecastId']\n        X_Test_CS = X_Test_CS.loc[:, ['State', 'Country', 'Date']]\n        \n        X_Test_CS.Country = le.fit_transform(X_Test_CS.Country)\n        X_Test_CS['State'] = le.fit_transform(X_Test_CS['State'])\n        \n        # XGBoost\n        model1 = XGBRegressor(n_estimators=2000)\n        model1.fit(X_Train_CS, y1_Train_CS)\n        y1_pred = model1.predict(X_Test_CS)\n        \n        model2 = XGBRegressor(n_estimators=2000)\n        model2.fit(X_Train_CS, y2_Train_CS)\n        y2_pred = model2.predict(X_Test_CS)\n        \n        # LightGBM\n        model3 = lgb.LGBMRegressor(n_estimators=2000)\n        model3.fit(X_Train_CS, y1_Train_CS)\n        y3_pred = model3.predict(X_Test_CS)\n        \n        model4 = lgb.LGBMRegressor(n_estimators=2000)\n        model4.fit(X_Train_CS, y2_Train_CS)\n        y4_pred = model4.predict(X_Test_CS)\n        \n        df = pd.DataFrame({'ForecastId': X_Test_CS_Id, 'ConfirmedCases': y1_pred, 'Fatalities': y2_pred})\n        df2 = pd.DataFrame({'ForecastId': X_Test_CS_Id, 'ConfirmedCases': y3_pred, 'Fatalities': y4_pred})\n        df_out = pd.concat([df_out, df], axis=0)\n        df_out2 = pd.concat([df_out2, df2], axis=0)\n    # Done for state loop\n# Done for country Loop","79e08bb1":"df_out.ForecastId = df_out.ForecastId.astype('int')\ndf_out2.ForecastId = df_out2.ForecastId.astype('int')","9e81cd9a":"df_out['ConfirmedCases'] = (1\/2)*(df_out['ConfirmedCases'] + df_out2['ConfirmedCases'])\ndf_out['Fatalities'] = (1\/2)*(df_out['Fatalities'] + df_out2['Fatalities'])","6dd7f757":"df_out['ConfirmedCases'] = df_out['ConfirmedCases'].round().astype(int)\ndf_out['Fatalities'] = df_out['Fatalities'].round().astype(int)","c1a63486":"df_out.tail()","98c1d44f":"df_out.to_csv('submission.csv', index=False)","eddaaf16":"# Acknowledgements\n\n- Built-upon https:\/\/www.kaggle.com\/ranjithks\/19-lines-of-code-result-better-score\/notebook\n- Modifications: added LightGBM, blended XGBoost & LightGBM predictions and tweaked hyperparameters"}}