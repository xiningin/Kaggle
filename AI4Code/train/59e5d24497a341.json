{"cell_type":{"d780e24d":"code","9dd60dae":"code","13689723":"code","8eba891e":"code","46e9d311":"code","3c2634e0":"code","3cfb0c39":"code","10404057":"code","854c15b2":"code","cb1c682c":"code","9f8644da":"code","4d65951c":"code","016da369":"code","5b9e19d5":"code","16c93231":"code","ef2ff40e":"code","4fb0d906":"code","e289b862":"code","10570ae9":"code","cee4bdda":"code","3a90c7cf":"code","5c35b62b":"code","ee1dacd9":"code","13feec56":"markdown","26f66509":"markdown","3e37e84c":"markdown","17360968":"markdown","6483e38d":"markdown"},"source":{"d780e24d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfrom google.cloud import bigquery\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9dd60dae":"client = bigquery.Client()\nethereum_classic_dataset_ref = client.dataset('crypto_ethereum_classic', project='bigquery-public-data')","13689723":"queryFinal = \"\"\"\nWITH \n\nblock AS (\n  SELECT A.number as block_number, DATE(A.timestamp) as block_date, count(miner) as NumMiner, max(difficulty ) as DifiBlock , \n  max(size) as SizeBlock ,\n  max(A.gas_limit) as Gaslimit,\n  sum(A.gas_used ) as GasUSed ,        \n  max(transaction_count) as trnxBlock \n\n  FROM `bigquery-public-data.crypto_ethereum_classic.blocks` A\n  WHERE DATE(A.timestamp) > DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  GROUP BY A.number , A.timestamp\n  ORDER BY A.number ASC\n  ),\n-- CONTRATOS \ncontract_block AS (\n  SELECT A.block_number, DATE(A.block_timestamp) as DateBlock , count(A.address) as NumContracts, Sum(case when is_erc20=True then 1 else 0 end) as Numerc20 ,\n   Sum(case when is_erc721=True then 1 else 0 end) as Numerc721\n  FROM `bigquery-public-data.crypto_ethereum_classic.contracts` A ,\n  block B \n  WHERE A.block_number = B.block_number \n  GROUP BY  A.block_number ,A.block_timestamp\n  ORDER BY A.block_number ASC),\n  \n--  TRACES_TRNX\ntracesblock AS (\n  SELECT A.block_number, count(B.trace_type) as NumTraceType ,\n  count(B.call_type) as NumCallType,\n  count(B.reward_type) as NumRewardType,\n  count(B.error) as NumError,\n  sum(B.value\/1000000000 ) as TraceValue,\n  sum(case when B.value\/1000000000 <=1 then 1 else 0 end ) as TraceSafeLow,\n  sum(case when B.value\/1000000000 >1 and B.value\/1000000000 <=2 then 1 else 0 end ) as TraceStandard,\n  sum(case when B.value\/1000000000 >2 then 1 else 0 end ) as TraceFast,\n   \n  sum(B.gas) as  trnxGas,\n  sum(B.gas_used) as trnxGasUsed,\n  count(B.block_number) as NumTrnx,\n  sum(B.subtraces) as NumSubTraces\n  FROM block A,\n        `bigquery-public-data.crypto_ethereum_classic.traces` B\n  WHERE A.block_number = B.block_number\n  GROUP BY A.block_number  \n  ),\n\n--- TRANSACTIONS \n\ntrnxblock AS (\n  SELECT A.block_number as block_number,\n   count(B.nonce)  as NumSenderTrnx , \n   Max(B.nonce)  as NumTrnxSenderMax , \n   Min(B.nonce)  as NumTrnxSenderMin , \n   Max(B.nonce) -  Min(B.nonce) as NumTrnxSenderDelta , \n   sum (B.value\/1000000000 ) as  TrnxValue ,\n   sum(B.gas) as  TrnxGas , \n   sum(B.gas * (B.gas_price\/1000000000)) as  TrnxRealCostGas, \n   sum(B.gas * (B.gas_price\/1000000000) * (140.93\/1000000000)) as  TrnxRealCostGasUSD , \n\n   \n    sum(case when B.gas_price\/1000000000 <=1 then B.gas else 0 end ) as TrnxGasSafeLow,\n   sum(case when B.gas_price\/1000000000 >1 and B.gas_price\/1000000000 <=2 then B.gas else 0 end ) as TrnxGasStandard,\n   sum(case when B.gas_price\/1000000000 >2 then B.gas else 0 end ) as TrnxGasFast,\n   \n   \n   max(B.gas_price\/1000000000 ) as TrnxGasPriceMax, \n   min(B.gas_price\/1000000000 ) as TrnxGasPriceMin, \n   Avg(B.gas_price\/1000000000 ) as TrnxGasPriceAvg, \n   sum(case when B.gas_price\/1000000000 <=1 then 1 else 0 end ) as TrnxSafeLow,\n   sum(case when B.gas_price\/1000000000 >1 and B.gas_price\/1000000000 <=2 then 1 else 0 end ) as TrnxStandard,\n   sum(case when B.gas_price\/1000000000 >2 then 1 else 0 end ) as TrnxFast,\n   max(receipt_cumulative_gas_used) as ReceiptAcumGasUsed, \n   sum(receipt_gas_used) as ReceiptGasUsed, \nsum(case when B.receipt_contract_address=B.to_address  then 1 else 0 end ) as NumRecibeOk,\nsum(case when B.receipt_status= 1  then 1 else 0 end ) as NumStatusOk,\nsum(case when B.receipt_status= 0  then 1 else 0 end ) as NumStatusError\n\n  FROM block A,\n        `bigquery-public-data.crypto_ethereum_classic.transactions` B\n  WHERE \n    A.block_number = B.block_number\n  GROUP BY A.block_number\n  ),\n  \n----\ntrnxTokenTransfer AS (\n  SELECT A.block_number,\n         B.name as NameToken ,\n       B.symbol as Symbol,\n       Max(B.total_supply ) as total_supply ,\n       count(C.from_address) as tokenNumFrom,\n       count(C.to_address) as  tokeNumTo,  \n       Sum(cast(C.value as numeric)\/1000000000 ) as tokenValue2\n   \n  FROM block A,\n        `bigquery-public-data.crypto_ethereum_classic.tokens` B,\n          `bigquery-public-data.crypto_ethereum_classic.token_transfers` C\n  WHERE \n     A.block_number = C.block_number\n   AND  B.address = C.token_address\n  GROUP BY A.block_number ,B.name,B.symbol      \n  order by  A.block_number\n  )\n  \n  \n\nSELECT A.block_number, A.block_date, A.NumMiner, A.DifiBlock , \n  A.SizeBlock ,\n  A.Gaslimit,\n  A.GasUsed ,   \n  A.Gaslimit - A.GasUsed as GasRemain,\n  A.trnxBlock,\n--  B.block_number, B.DateBlock  , \n  B.NumContracts, B.Numerc20 , B.Numerc721,\n  \n  C.NumTraceType ,\n  C.NumCallType,\n  C.NumRewardType,\n  C.NumError,\n  C.TraceValue,\n  C.TraceSafeLow,\n  C.TraceStandard,\n  C.TraceFast,\n  C.trnxGas as TracetrnxGas ,\n  C.trnxGasUsed as TracetrnxGasUsed,\n  C.NumTrnx,\n  C.NumSubTraces,\n  \n   D.NumSenderTrnx,\n   D.NumTrnxSenderMax , \n   D.NumTrnxSenderMin , \n   round(D.NumTrnxSenderDelta,2) as NumTrnxSenderDelta , \n   D.TrnxValue ,\n   D.TrnxGas , \n   D.TrnxRealCostGas,\n   D.TrnxRealCostGasUSD,\n   D.TrnxGasSafeLow,\n   D.TrnxGasStandard,\n   D.TrnxGasFast,\n   \n   D.TrnxGasPriceMax, \n   D.TrnxGasPriceMin, \n   D.TrnxGasPriceAvg, \n   D.TrnxSafeLow,\n   D.TrnxStandard,\n   D.TrnxFast,\n   D.ReceiptAcumGasUsed, \n   D.ReceiptGasUsed, \n   D.NumRecibeOk,\n   D.NumStatusOk,\n   D.NumStatusError, \n   E.NameToken,\n   E.Symbol,  \n   E.total_supply,\n   E.tokenNumFrom,\n   E.tokeNumTo, \n   E.tokenValue2\n   \n  \n  \nFROM block A\n   LEFT OUTER JOIN contract_block B ON ( A.block_number = B.block_number )\n   LEFT OUTER JOIN tracesblock  C  ON ( A.block_number = C.block_number )\n   LEFT OUTER JOIN trnxblock  D  ON ( A.block_number = D.block_number )\n   LEFT OUTER JOIN trnxTokenTransfer E  ON ( A.block_number = E.block_number )\n\nORDER BY A.block_number\n\"\"\"\n#LIMIT 100\n#Execute Query\n\nquery =queryFinal\n\n\nquery_job = client.query(query)\nresult1 = query_job.result()\n\nrows = list(result1)\n# Transform the rows into a nice pandas dataframe\nblocks = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n# Look at the first 10 headlines\n#blocks.head(10)\n#data2 = blocks\n#blocks.count()","8eba891e":"blocks.info()","46e9d311":"#blocks.count()\n#COPY DATA\ndata = blocks.copy(deep = True)\n\n# CHANGE TYP DATA. there are some columns with the type object but we need type float so we changed them.\n#data['TraceValue']=data['Value'].astype(float)\ndata['TrnxValue']=data['TrnxValue'].astype(float)\n\ndata['DifiBlock']=data['DifiBlock'].astype(float)\ndata['total_supply']=data['total_supply'].astype(float)\ndata['tokenValue2']=data['tokenValue2'].astype(float)\n\n#COMPLETE , we are going to complete the missing data   \ndata['TraceSafeLow'].fillna(0, inplace = True)\ndata['TraceStandard'].fillna(0, inplace = True)\ndata['TraceFast'].fillna(0, inplace = True)\n\ndata['NumContracts'].fillna(0, inplace = True)\ndata['TracetrnxGas'].fillna(0, inplace = True)\ndata['TraceValue'].fillna(0, inplace = True)\ndata['TrnxValue'].fillna(0, inplace = True)\n\n\n\ndata['TracetrnxGasUsed'].fillna(0, inplace = True)\ndata['NumSenderTrnx'].fillna(0, inplace = True)\ndata['NumTrnxSenderMax'].fillna(0, inplace = True)\ndata['NumTrnxSenderMin'].fillna(0, inplace = True)\ndata['NumTrnxSenderDelta'].fillna(0, inplace = True)\ndata['TrnxValue'].fillna(0, inplace = True)\ndata['TrnxGas'].fillna(0, inplace = True)   \ndata['TrnxRealCostGas'].fillna(0, inplace = True)  \ndata['TrnxRealCostGasUSD'].fillna(0, inplace = True)  \n\n\n\ndata['TrnxGasSafeLow'].fillna(0, inplace = True)\ndata['TrnxGasStandard'].fillna(0, inplace = True)\ndata['TrnxGasFast'].fillna(0, inplace = True)\n\n    \ndata['TrnxGasPriceMax'].fillna(0, inplace = True)\ndata['TrnxGasPriceMin'].fillna(0, inplace = True)\ndata['TrnxGasPriceAvg'].fillna(0, inplace = True)\n\ndata['TrnxSafeLow'].fillna(0, inplace = True)\ndata['TrnxStandard'].fillna(0, inplace = True)\ndata['TrnxFast'].fillna(0, inplace = True)\n\ndata['ReceiptAcumGasUsed'].fillna(0, inplace = True)\ndata['ReceiptGasUsed'].fillna(0, inplace = True)\n#data['NumRecibeOk'].fillna(0, inplace = True)\n#data['NumStatusOk'].fillna(0, inplace = True)\n#data['NumStatusError'].fillna(0, inplace = True)\ndata['NameToken'].fillna('NoName', inplace = True)\ndata['Symbol'].fillna('NA', inplace = True)\ndata['total_supply'].fillna(0, inplace = True)\n#data['tokenNumFrom'].fillna(0, inplace = True)\n\n#data['tokeNumTo'].fillna(0, inplace = True)\ndata['tokenValue2'].fillna(0, inplace = True)\n\n\n#Drop low-correlated features\n#In the firs correlated matrix , we see some columns that didn\u00b4t have  postive values o not appear a value , so we droped them   \n\n#to_drop = [\"Numerc20\", \"Numerc721\",\"NumMiner\",\"NumRecibeOk\",\"NumStatusOk\",\"NumStatusError\"]\n#to_drop = [\"NumMiner\",\"Numerc20\",\"NumRecibeOk\",\"Numerc721\",\"NumStatusOk\",\"NumStatusError\",\"block_number\",\"NumRewardType\",\"NumError\",\"GasRemain\",\"Gaslimit\",\"tokenNumFrom\",\"tokeNumTo\"]\nto_drop = [\"NumMiner\",\"Numerc20\",\"NumRecibeOk\",\"Numerc721\",\"NumStatusOk\",\"NumStatusError\",\"NumRewardType\",\"NumError\",\"tokenNumFrom\",\"tokeNumTo\",\"TraceStandard\"]\n\ndata.drop(to_drop, axis=1, inplace=True)\n#data.count()\ndata.set_index('block_date', inplace=True)","3c2634e0":"import matplotlib.pyplot as plt\nimport seaborn as sns \n\ndef correlation_heatmap(df, method):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(10, 220, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(method=method),\n        cmap = colormap,\n        square=True, \n        annot=True, \n        annot_kws={'fontsize':9 }\n    )\n \ncorrelation_heatmap(data, 'spearman')\n\n","3cfb0c39":"sns.jointplot(\"NumTrnx\", \"TrnxGas\", data=data, kind=\"reg\")","10404057":"#size\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.FacetGrid(data,hue='Symbol',height=5)\\\n.map(plt.scatter,'NumContracts','ReceiptGasUsed')\\\n.add_legend()","854c15b2":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='NumContracts',data=data,\n                linewidth=2.5,orient='v',dodge=False)","cb1c682c":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='TrnxRealCostGasUSD',data=data,\n                linewidth=2.5,orient='v',dodge=False)","9f8644da":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='TrnxGasPriceAvg',data=data,\n                linewidth=2.5,orient='v',dodge=False)","4d65951c":"data2 = data[data['Symbol']!='NA']\n\n##gapminder_2002 = gapminder[gapminder['year']==2002]\n#help(data.filter)\n#data2.count()","016da369":"sns.jointplot(\"NumTrnx\", \"TrnxGas\", data=data2, kind=\"reg\")","5b9e19d5":"import matplotlib.pyplot as plt\n%matplotlib inline\nsns.FacetGrid(data2,hue='Symbol',height=5)\\\n.map(plt.scatter,'NumContracts','ReceiptGasUsed')\\\n.add_legend()\n\n\n","16c93231":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='NumContracts',data=data2,\n                linewidth=2.5,orient='v',dodge=False)","ef2ff40e":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='TrnxGasPriceAvg',data=data2,\n                linewidth=2.5,orient='v',dodge=False)","4fb0d906":"data3 = data2[data2['Symbol'] =='GST2']\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='TrnxGasPriceAvg',data=data3,\n                linewidth=2.5,orient='v',dodge=False)\n\n\ngapminder_GST2= data3[data3.TrnxGasPriceAvg >= 15]\nprint(gapminder_GST2.shape)\n\ngapminder_GST2.head(5)","e289b862":"data4 = data2[data2['Symbol'] =='STT']\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='TrnxGasPriceAvg',data=data4,\n                linewidth=2.5,orient='v',dodge=False)\n\n\ngapminder_S= data4[data4.TrnxGasPriceAvg >= 15]\nprint(gapminder_GST2.shape)\n\ngapminder_GST2.head(5)","10570ae9":"data5 = data2[data2['Symbol'] =='LFIN']\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='Symbol',y='TrnxGasPriceAvg',data=data5,\n                linewidth=2.5,orient='v',dodge=False)\n\n\ngapminder_LFIN= data5[data5.TrnxGasPriceAvg >= 500]\nprint(gapminder_LFIN.shape)\n\ngapminder_LFIN.head(40)","cee4bdda":"data.to_csv('blocks_submission.csv', index=False)","3a90c7cf":"#block_date\n\n#data2[\"block_date\"].asfreq('M').plot() # asfreq method is used to convert a time series to a specified frequency. Here it is monthly frequency.\n#plt.title('blocks number')\n#plt.show()\ndata6 = data[data['Symbol'] =='LFIN']\n\n#dataindex_col='Date', parse_dates=['Date']\n#data6.set_index('block_date', inplace=True)\n\n# Expanding window functions\ndata_mean = data6.TrnxGasPriceAvg.expanding().mean()\ndata_std = data6.TrnxGasPriceAvg.expanding().std()\ndata6.TrnxGasPriceAvg.plot()\ndata_mean.plot()\ndata_std.plot()\nplt.legend(['GasPriceAvg','Expanding Mean','Expanding Standard Deviation'])\nplt.show()","5c35b62b":"data_mean = data6.TrnxRealCostGasUSD.expanding().mean()\ndata_std = data6.TrnxRealCostGasUSD.expanding().std()\ndata6.TrnxRealCostGasUSD.plot()\n#data6.TrnxStandard.plot()\n#data6.TrnxSafeLow.plot()\ndata_mean.plot()\ndata_std.plot()\nplt.legend(['TrnxCost USD','Expanding Mean','Expanding Std'])\nplt.show()\n\n","ee1dacd9":"data[\"TrnxRealCostGas\"].plot(figsize=(16,8))","13feec56":"Maybe  we can drop  some data like  block_number,DifiBlock,GasLimit,GAsRemain ,total_supply, token_value2 . \nBut in this case we are going to see some particular blocks   and we want to see that information in our analysis","26f66509":"We are going to copy \"blocks\" to \"data\"  in order to  complete the data missing, and even if we need data initial of the blocks we can return at this point ,and not execute the query again even you need it.","3e37e84c":"In the blocks Info , We see that all the collected data:  \n* not all the blocks  have  contracts  \n* not all the blocks have transactions \n* not all the blocks have  transference transactions (token transfer)","17360968":"**Block Analysis **\nWhen you look the data of the tables,  you look  there are a lot of information , how i can understand that ,  I saw thwe data and i have an idea  to try anilize them in order to give a menaing to me , I am going to analyze the data   from  the view of block , all data around a block  , so I build a query  with data  blocks and the other tables relationship with the block \nin order to complete my data analysis   i  had to read about ethereum  because i\u00b4m not expert in crypto ethereum,  \n\n\nThe creation of gas units is to separate the cost of computer work in the Ethereum network from the volatile market price of Ethereum, since the cost of computing the execution of intelligent contracts is done by a miner, who spends his time free, electricity and computer hardware to execute the codes and finalize the transaction\n\nGas limit refers to the maximum amount of gas that you are willing to spend on a particular transaction. A higher gas limits mean that more computational work must be done to execute the intelligent contract. A standard ETH transfer requires a gas limit of 21,000 pcs.\ngas ades.\n\nWe are gointo to translate  in some fields the value of the data unit Wei to  Gwin (1\/1000000000) \n\nThe speed of the transaction is related with the cost (Gas)  that the owner  pay a miner to make the transactions \n\n    Speed     \t\tGasPrice(Gwin)\n    SafeLow\t<30min\t1\n    Standard\t<5min\t2\n    Fast\t<2min\t4\n    \n \n In the block of the data TRACES_TRNX and TRANSACTIONS  we made a category of the speed   with the gas_price , we assume that all the transactions that pay   GasPrice greater than 2 are FAST  \n \n We see the price of 1 ethereum coin  at 29.03.2019   is 1 Ether  by\t140.93 USD \n Factor to Gwin = 140.93\/1000000000\n \n TrnxRealCostGas\n Gas used by Txn * Price of Gas\n \n TrnxRealCostGasUSD\n  Gas used by Txn * Price of Gas* (140.93\/1000000000) Price of Gwin in USD \n","6483e38d":"There are some blocks that have more than the usual GasPrice  (Average) , we are going to filter the data without symbol NA( blocks that doesn\u00b4t have token transactions )"}}