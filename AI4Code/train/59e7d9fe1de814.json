{"cell_type":{"1d46169f":"code","a0c1bf94":"code","72dac610":"code","8038bf3e":"code","1451d8c9":"code","631c766a":"code","9caa8664":"code","1c44c55f":"code","86980890":"code","7f4aa5af":"code","fe4af48b":"code","2038523f":"code","92d03143":"code","62062381":"code","d1187e48":"code","172c091e":"code","282cc158":"code","91b60555":"code","4604329b":"code","3e47271d":"code","4c9aa6c9":"code","b88d71e0":"code","f6471b99":"markdown","d8323630":"markdown","e23d9ef5":"markdown","c77e8a94":"markdown"},"source":{"1d46169f":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","a0c1bf94":"# Loading the dataset - on kaggle notebook\n\nx_data = np.load('..\/input\/hw1-ycbs273-w2022\/x_data_273.npy')\ny_data = np.load('..\/input\/hw1-ycbs273-w2022\/y_data_273.npy')\nx_test = np.load('..\/input\/hw1-ycbs273-w2022\/x_test_273.npy')\nx_data.shape","72dac610":"# Loading the dataset - on colab or your own workspace\n\n# x_data = np.load('x_data_273.npy')\n# y_data = np.load('y_data_273.npy')\n# x_test = np.load('x_test_273.npy')","8038bf3e":"x_data.shape","1451d8c9":"y_data.shape","631c766a":"x_test.shape","9caa8664":"# The dataset comprises of 32000 samples\n\nimport matplotlib.pyplot as plt\nplt.imshow(x_data[0])\n# plt.savefig('header.png', dpi=300)\n","1c44c55f":"model = keras.Sequential([\n    layers.Dense(256, activation=\"relu\"),\n    layers.Dense(128, activation=\"relu\"),\n    layers.Dense(10, activation=\"sigmoid\")\n])","86980890":"model.compile(optimizer=\"rmsprop\",\n    loss=\"sparse_categorical_crossentropy\",\n    metrics=[\"accuracy\"])","7f4aa5af":"# Since I am using a Feed forward NN, the data is converted to 1d representation.\n# In case a CNN is used, this is not required.\nx_data2 = np.reshape(x_data, (-1, int(28*56)))\nx_data2.shape","fe4af48b":"model.fit(x_data2, y_data, epochs=15, batch_size=512)","2038523f":"x_test2 = np.reshape(x_test, (-1, int(28*56)))\ny_predict = model.predict(x_test2)","92d03143":"df_predictions = pd.DataFrame(y_predict, columns=['solution_' + str(i) for i in range(10)])\ndf_predictions.head()","62062381":"df_predictions.index.rename('Id', inplace=True)\ndf_predictions.to_csv('df_predictions.csv')","d1187e48":"# Keras CNN layers expect the input to be float\n\nx_data3 = x_data.astype('float32')\n\n# Expanding dimensions of x_data to match (batch_size, height, width, depth\/channels)\n# Even if the image is grayscale, it requires that a non-zero value is provided as the depth\n\nx_data3 = np.expand_dims(x_data3, axis=-1)","172c091e":"x_data3.shape","282cc158":"model_cnn = keras.Sequential([\n    layers.Conv2D(filters=32, kernel_size=3, activation='relu'),\n    layers.MaxPool2D(),\n    layers.Flatten(),\n    layers.Dense(128, activation=\"relu\"),\n    layers.Dense(10, activation=\"sigmoid\")\n])","91b60555":"model_cnn.compile(optimizer=\"rmsprop\",\n    loss=\"sparse_categorical_crossentropy\",\n    metrics=[\"accuracy\"])","4604329b":"model_cnn.fit(x_data3, y_data, epochs=15, batch_size=512)","3e47271d":"x_test3 = x_test.astype('float32')\nx_test3 = np.expand_dims(x_test3, axis=-1)\n\ny_predict = model_cnn.predict(x_test3)","4c9aa6c9":"df_predictions = pd.DataFrame(y_predict, columns=['solution_' + str(i) for i in range(10)])\ndf_predictions.index.rename('Id', inplace=True)\n\ndf_predictions.head()","b88d71e0":"df_predictions.to_csv('df_predictions.csv')","f6471b99":"# Load Data","d8323630":"# Baseline with Dense layers","e23d9ef5":"# In case you want to train a CNN\n\nBenchmark #2","c77e8a94":"Upload the `df_predictions.csv` on Kaggle as your submission.  "}}