{"cell_type":{"4b0aa854":"code","5fb35065":"code","12bb87ee":"code","9f0a8b86":"code","9aeca1b8":"code","a426c5e1":"code","881968c5":"code","7ca57af4":"code","abbafd5b":"code","c031eb5c":"code","7bb074fa":"code","c30ba2bb":"code","334d6f07":"code","bcc9a6cb":"code","3549c15f":"code","3211e0bc":"code","4c69dec9":"code","77e759c7":"code","50aca3e3":"code","4a0e73ca":"code","9c02ab69":"code","b8192326":"code","baa9cf6b":"code","a5724354":"code","c9afffeb":"code","a87458dc":"code","38b1d42a":"code","b968411e":"code","b90cd228":"code","9917f773":"code","01da2841":"code","7656c8a3":"code","7ec3371e":"code","1aeddc29":"code","71e40091":"code","7efee74c":"code","1eadbd87":"code","9cbbec1a":"code","6786441a":"code","a32eaedb":"code","d4f18f6a":"code","127bb02b":"code","fa8b3581":"code","04129173":"code","d6609e68":"code","1e6791fc":"code","7608ce57":"code","1b8a45e2":"code","8aadc056":"code","e65fb9d3":"markdown","74b8ad2b":"markdown","b5653509":"markdown","8b0e94e9":"markdown","e5016396":"markdown","cb3b5bfe":"markdown","a6db4be1":"markdown","1ef5c618":"markdown","8231fd77":"markdown","9d7569ae":"markdown","01757a3f":"markdown","2221d5e5":"markdown"},"source":{"4b0aa854":"# Load nb_black to make code consistent\n!cp -r ..\/input\/nbblack-code-base\/nb_black-1.0.7 .\n!pip install nb_black-1.0.7\/nb_black-1.0.7\/ > \/dev\/null\n%load_ext lab_black","5fb35065":"# Gotta import these.\nimport pandas as pd\nimport numpy as np","12bb87ee":"# The imports\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt","9f0a8b86":"fig, ax = plt.subplots(figsize=(12, 5))  # Create a figure containing a single axes.\nax.plot([1, 2, 3, 4], [1, 4, 2, 3])\n# Plot some data on the axes.\nplt.show()","9aeca1b8":"b = np.matrix([[1, 2], [3, 4]])\nb_asarray = np.asarray(b)\nnp.random.seed(19680801)  # seed the random number generator.\ndata = {\"a\": np.arange(50), \"c\": np.random.randint(0, 50, 50), \"d\": np.random.randn(50)}\ndata[\"b\"] = data[\"a\"] + 10 * np.random.randn(50)\ndata[\"d\"] = np.abs(data[\"d\"]) * 100\n\nfig, ax = plt.subplots(figsize=(12, 5), layout=\"constrained\")\nax.scatter(\"a\", \"b\", c=\"c\", s=\"d\", data=data)\nax.set_xlabel(\"entry a\")\nax.set_ylabel(\"entry b\")","a426c5e1":"data1, data2, data3, data4 = np.random.randn(4, 100)  # make 4 random data sets\nfig, ax = plt.subplots(figsize=(12, 5))\nax.plot(data1, \"o\", label=\"data1\")\nax.plot(data2, \"d\", label=\"data2\")\nax.plot(data3, \"v\", label=\"data3\")\nax.plot(data4, \"s\", label=\"data4\")\nax.legend()","881968c5":"mu, sigma = 115, 15\nx = mu + sigma * np.random.randn(10000)\nfig, ax = plt.subplots(figsize=(12, 5), layout=\"constrained\")\n# the histogram of the data\nn, bins, patches = ax.hist(x, 50, density=1, facecolor=\"C0\", alpha=0.75)\n\nax.set_xlabel(\"Length [cm]\")\nax.set_ylabel(\"Probability\")\nax.set_title(\"Aardvark lengths\\n (not really)\")\nax.text(75, 0.025, r\"$\\mu=115,\\ \\sigma=15$\")\nax.axis([55, 175, 0, 0.03])\nax.grid(True)","7ca57af4":"X, Y = np.meshgrid(np.linspace(-3, 3, 128), np.linspace(-3, 3, 128))\nZ = (1 - X \/ 2 + X ** 5 + Y ** 3) * np.exp(-(X ** 2) - Y ** 2)\n\nfig, axs = plt.subplots(2, 2, figsize=(15, 15), layout=\"constrained\")\npc = axs[0, 0].pcolormesh(X, Y, Z, vmin=-1, vmax=1, cmap=\"RdBu_r\")\nfig.colorbar(pc, ax=axs[0, 0])\naxs[0, 0].set_title(\"pcolormesh()\")\n\nco = axs[0, 1].contourf(X, Y, Z, levels=np.linspace(-1.25, 1.25, 11))\nfig.colorbar(co, ax=axs[0, 1])\naxs[0, 1].set_title(\"contourf()\")\n\npc = axs[1, 0].imshow(\n    Z ** 2 * 100, cmap=\"plasma\", norm=mpl.colors.LogNorm(vmin=0.01, vmax=100)\n)\nfig.colorbar(pc, ax=axs[1, 0], extend=\"both\")\naxs[1, 0].set_title(\"imshow() with LogNorm()\")\n\npc = axs[1, 1].scatter(data1, data2, c=data3, cmap=\"RdBu_r\")\nfig.colorbar(pc, ax=axs[1, 1], extend=\"both\")\naxs[1, 1].set_title(\"scatter()\")","abbafd5b":"# The import\nimport seaborn as sns","c031eb5c":"# Load an example dataset\ntips = sns.load_dataset(\"tips\")\n\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x=\"total_bill\",\n    y=\"tip\",\n    col=\"time\",\n    hue=\"smoker\",\n    style=\"smoker\",\n    size=\"size\",\n)\nplt.show()","7bb074fa":"fmri = sns.load_dataset(\"fmri\")\nsns.relplot(\n    data=fmri,\n    kind=\"line\",\n    x=\"timepoint\",\n    y=\"signal\",\n    col=\"region\",\n    hue=\"event\",\n    style=\"event\",\n)\nplt.show()","c30ba2bb":"sns.catplot(\n    data=tips, kind=\"swarm\", x=\"day\", y=\"total_bill\", hue=\"smoker\", height=5, aspect=2.3\n)\nplt.show()","334d6f07":"sns.catplot(\n    data=tips,\n    kind=\"violin\",\n    x=\"day\",\n    y=\"total_bill\",\n    hue=\"smoker\",\n    split=True,\n    height=5,\n    aspect=2.3,\n)","bcc9a6cb":"sns.catplot(\n    data=tips, kind=\"bar\", x=\"day\", y=\"total_bill\", hue=\"smoker\", height=5, aspect=2.3\n)\nplt.show()","3549c15f":"penguins = sns.load_dataset(\"penguins\")\nsns.jointplot(\n    data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", hue=\"species\", height=10\n)","3211e0bc":"sns.pairplot(data=penguins, hue=\"species\")","4c69dec9":"sns.relplot(\n    data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"body_mass_g\", height=10\n)","77e759c7":"# import\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, push_notebook, show\n\noutput_notebook()","50aca3e3":"# prepare some data\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 2, 4, 5]\n\n# create a new plot with a title and axis labels\np = figure(title=\"Simple line example\", x_axis_label=\"x\", y_axis_label=\"y\")\n\n# add a line renderer with legend and line thickness to the plot\np.line(x, y, legend_label=\"Temp.\", line_width=2)\n\n# show the results\nshow(p)","4a0e73ca":"# prepare some data\nx = [1, 2, 3, 4, 5]\ny1 = [6, 7, 2, 4, 5]\ny2 = [2, 3, 4, 5, 6]\ny3 = [4, 5, 5, 7, 2]\n\n# create a new plot with a title and axis labels\np = figure(title=\"Multiple line example\", x_axis_label=\"x\", y_axis_label=\"y\")\n\n# add multiple renderers\np.line(x, y1, legend_label=\"Temp.\", color=\"blue\", line_width=2)\np.line(x, y2, legend_label=\"Rate\", color=\"red\", line_width=2)\np.line(x, y3, legend_label=\"Objects\", color=\"green\", line_width=2)\n\n# show the results\nshow(p)","9c02ab69":"from bokeh.layouts import row\n\n# prepare some data\nx = list(range(11))\ny0 = x\ny1 = [10 - i for i in x]\ny2 = [abs(i - 5) for i in x]\n\n# create three plots with one renderer each\ns1 = figure(width=250, height=250, background_fill_color=\"#fafafa\")\ns1.circle(x, y0, size=12, color=\"#53777a\", alpha=0.8)\n\ns2 = figure(width=250, height=250, background_fill_color=\"#fafafa\")\ns2.triangle(x, y1, size=12, color=\"#c02942\", alpha=0.8)\n\ns3 = figure(width=250, height=250, background_fill_color=\"#fafafa\")\ns3.square(x, y2, size=12, color=\"#d95b43\", alpha=0.8)\n\n# put the results in a row that automatically adjusts\n# to the browser window's width\nshow(row(children=[s1, s2, s3], sizing_mode=\"scale_width\"))","b8192326":"import numpy as np\n\nfrom bokeh.plotting import figure, show\n\n# generate some data\nN = 1000\nx = np.random.random(size=N) * 100\ny = np.random.random(size=N) * 100\n\n# generate radii and colors based on data\nradii = y \/ 100 * 2\ncolors = [\"#%02x%02x%02x\" % (255, int(round(value * 255 \/ 100)), 255) for value in y]\n\n# create a new plot with a specific size\np = figure(\n    title=\"Vectorized colors and radii example\",\n    sizing_mode=\"stretch_width\",\n    max_width=1200,\n    height=400,\n)\n\n# add circle renderer\np.circle(\n    x,\n    y,\n    radius=radii,\n    fill_color=colors,\n    fill_alpha=0.6,\n    line_color=\"lightgrey\",\n)\n\n# show the results\nshow(p)","baa9cf6b":"from bokeh.layouts import layout\nfrom bokeh.models import Div, RangeSlider, Spinner\nfrom bokeh.plotting import figure, show\n\n# prepare some data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [4, 5, 5, 7, 2, 6, 4, 9, 1, 3]\n\n# create plot with circle glyphs\np = figure(x_range=(1, 9), width=500, height=250)\npoints = p.circle(x=x, y=y, size=30, fill_color=\"#21a7df\")\n\n# set up textarea (div)\ndiv = Div(\n    text=\"\"\"\n          <p>Select the circle's size using this control element:<\/p>\n          \"\"\",\n    width=200,\n    height=30,\n)\n\n# set up spinner\nspinner = Spinner(\n    title=\"Circle size\",\n    low=0,\n    high=60,\n    step=5,\n    value=points.glyph.size,\n    width=200,\n)\nspinner.js_link(\"value\", points.glyph, \"size\")\n\n# set up RangeSlider\nrange_slider = RangeSlider(\n    title=\"Adjust x-axis range\",\n    start=0,\n    end=10,\n    step=1,\n    value=(p.x_range.start, p.x_range.end),\n)\nrange_slider.js_link(\"value\", p.x_range, \"start\", attr_selector=0)\nrange_slider.js_link(\"value\", p.x_range, \"end\", attr_selector=1)\n\n# create layout\nlayout = layout(\n    [\n        [div, spinner],\n        [range_slider],\n        [p],\n    ]\n)\n\n# show result\nshow(layout)","a5724354":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\nfrom bokeh.plotting import figure\n\noutput_file(\"colormapped_bars.html\")\n\nfruits = [\"Apples\", \"Pears\", \"Nectarines\", \"Plums\", \"Grapes\", \"Strawberries\"]\ncounts = [5, 3, 4, 2, 4, 6]\n\nsource = ColumnDataSource(data=dict(fruits=fruits, counts=counts, color=Spectral6))\n\np = figure(\n    x_range=fruits,\n    y_range=(0, 9),\n    height=500,\n    width=1000,\n    title=\"Fruit counts\",\n    toolbar_location=None,\n    tools=\"\",\n)\n\np.vbar(\n    x=\"fruits\",\n    top=\"counts\",\n    width=0.9,\n    color=\"color\",\n    legend_field=\"fruits\",\n    source=source,\n)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","c9afffeb":"import pandas as pd\n\nfrom bokeh.io import output_file, show\nfrom bokeh.models import (\n    BasicTicker,\n    ColorBar,\n    ColumnDataSource,\n    LinearColorMapper,\n    PrintfTickFormatter,\n)\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.unemployment1948 import data\nfrom bokeh.transform import transform\n\noutput_file(\"unemploymemt.html\")\n\ndata.Year = data.Year.astype(str)\ndata = data.set_index(\"Year\")\ndata.drop(\"Annual\", axis=1, inplace=True)\ndata.columns.name = \"Month\"\n\n# reshape to 1D array or rates with a month and year for each row.\ndf = pd.DataFrame(data.stack(), columns=[\"rate\"]).reset_index()\n\nsource = ColumnDataSource(df)\n\n# this is the colormap from the original NYTimes plot\ncolors = [\n    \"#75968f\",\n    \"#a5bab7\",\n    \"#c9d9d3\",\n    \"#e2e2e2\",\n    \"#dfccce\",\n    \"#ddb7b1\",\n    \"#cc7878\",\n    \"#933b41\",\n    \"#550b1d\",\n]\nmapper = LinearColorMapper(palette=colors, low=df.rate.min(), high=df.rate.max())\n\np = figure(\n    width=1000,\n    height=500,\n    title=\"US unemployment 1948\u20142016\",\n    x_range=list(data.index),\n    y_range=list(reversed(data.columns)),\n    toolbar_location=None,\n    tools=\"\",\n    x_axis_location=\"above\",\n)\n\np.rect(\n    x=\"Year\",\n    y=\"Month\",\n    width=1,\n    height=1,\n    source=source,\n    line_color=None,\n    fill_color=transform(\"rate\", mapper),\n)\n\ncolor_bar = ColorBar(\n    color_mapper=mapper,\n    ticker=BasicTicker(desired_num_ticks=len(colors)),\n    formatter=PrintfTickFormatter(format=\"%d%%\"),\n)\n\np.add_layout(color_bar, \"right\")\n\np.axis.axis_line_color = None\np.axis.major_tick_line_color = None\np.axis.major_label_text_font_size = \"7px\"\np.axis.major_label_standoff = 0\np.xaxis.major_label_orientation = 1.0\n\nshow(p)","a87458dc":"import networkx as nx\n\nfrom bokeh.io import output_file, show\nfrom bokeh.models import (\n    BoxSelectTool,\n    Circle,\n    EdgesAndLinkedNodes,\n    HoverTool,\n    MultiLine,\n    NodesAndLinkedEdges,\n    Plot,\n    Range1d,\n    TapTool,\n)\nfrom bokeh.palettes import Spectral4\nfrom bokeh.plotting import from_networkx\n\nG = nx.karate_club_graph()\n\nplot = Plot(\n    width=400, height=400, x_range=Range1d(-1.1, 1.1), y_range=Range1d(-1.1, 1.1)\n)\nplot.title.text = \"Graph Interaction Demonstration\"\n\nplot.add_tools(HoverTool(tooltips=None), TapTool(), BoxSelectTool())\n\ngraph_renderer = from_networkx(G, nx.circular_layout, scale=1, center=(0, 0))\n\ngraph_renderer.node_renderer.glyph = Circle(size=15, fill_color=Spectral4[0])\ngraph_renderer.node_renderer.selection_glyph = Circle(size=15, fill_color=Spectral4[2])\ngraph_renderer.node_renderer.hover_glyph = Circle(size=15, fill_color=Spectral4[1])\n\ngraph_renderer.edge_renderer.glyph = MultiLine(\n    line_color=\"#CCCCCC\", line_alpha=0.8, line_width=5\n)\ngraph_renderer.edge_renderer.selection_glyph = MultiLine(\n    line_color=Spectral4[2], line_width=5\n)\ngraph_renderer.edge_renderer.hover_glyph = MultiLine(\n    line_color=Spectral4[1], line_width=5\n)\n\ngraph_renderer.selection_policy = NodesAndLinkedEdges()\ngraph_renderer.inspection_policy = EdgesAndLinkedNodes()\n\nplot.renderers.append(graph_renderer)\n\noutput_file(\"interactive_graphs.html\")\nshow(plot)","38b1d42a":"# The import\nimport plotly.express as px","b968411e":"df = px.data.iris()\nfig = px.scatter(\n    df,\n    x=\"sepal_width\",\n    y=\"sepal_length\",\n    color=\"species\",\n    size=\"petal_length\",\n    hover_data=[\"petal_width\"],\n)\nfig.show()","b90cd228":"df = px.data.tips()\nfig = px.scatter(\n    df, x=\"total_bill\", y=\"tip\", color=\"smoker\", facet_col=\"sex\", facet_row=\"time\"\n)\nfig.show()","9917f773":"df = px.data.gapminder().query(\"continent == 'Oceania'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\", markers=True)\nfig.show()","01da2841":"df = px.data.tips()\nfig = px.bar(df, x=\"sex\", y=\"total_bill\", color=\"smoker\", barmode=\"group\")\nfig.show()","7656c8a3":"df = px.data.iris()\nfig = px.scatter_matrix(\n    df,\n    dimensions=[\"sepal_width\", \"sepal_length\", \"petal_width\", \"petal_length\"],\n    color=\"species\",\n)\nfig.show()","7ec3371e":"df = px.data.iris()\nfig = px.parallel_coordinates(\n    df,\n    color=\"species_id\",\n    labels={\n        \"species_id\": \"Species\",\n        \"sepal_width\": \"Sepal Width\",\n        \"sepal_length\": \"Sepal Length\",\n        \"petal_width\": \"Petal Width\",\n        \"petal_length\": \"Petal Length\",\n    },\n    color_continuous_scale=px.colors.diverging.Tealrose,\n    color_continuous_midpoint=2,\n)\nfig.show()","1aeddc29":"df = px.data.tips()\nfig = px.parallel_categories(\n    df, color=\"size\", color_continuous_scale=px.colors.sequential.Inferno\n)\nfig.show()","71e40091":"df = px.data.gapminder()\nfig = px.scatter(\n    df.query(\"year==2007\"),\n    x=\"gdpPercap\",\n    y=\"lifeExp\",\n    size=\"pop\",\n    color=\"continent\",\n    hover_name=\"country\",\n    log_x=True,\n    size_max=60,\n)\nfig.show()","7efee74c":"df = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(\n    df,\n    path=[\"continent\", \"country\"],\n    values=\"pop\",\n    color=\"lifeExp\",\n    hover_data=[\"iso_alpha\"],\n)\nfig.show()","1eadbd87":"df = px.data.tips()\nfig = px.violin(\n    df, y=\"tip\", x=\"smoker\", color=\"sex\", box=True, points=\"all\", hover_data=df.columns\n)\nfig.show()","9cbbec1a":"df = px.data.carshare()\nfig = px.scatter_mapbox(\n    df,\n    lat=\"centroid_lat\",\n    lon=\"centroid_lon\",\n    color=\"peak_hour\",\n    size=\"car_hours\",\n    color_continuous_scale=px.colors.cyclical.IceFire,\n    size_max=15,\n    zoom=10,\n    mapbox_style=\"carto-positron\",\n)\nfig.show()","6786441a":"df = px.data.election()\nfig = px.scatter_3d(\n    df,\n    x=\"Joly\",\n    y=\"Coderre\",\n    z=\"Bergeron\",\n    color=\"winner\",\n    size=\"total\",\n    hover_name=\"district\",\n    symbol=\"result\",\n    color_discrete_map={\"Joly\": \"blue\", \"Bergeron\": \"green\", \"Coderre\": \"red\"},\n)\nfig.show()","a32eaedb":"from plotnine import ggplot, geom_point, aes, stat_smooth, facet_wrap\nfrom plotnine.data import mtcars\n\n(\n    ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\")\n    + facet_wrap(\"~gear\")\n)","d4f18f6a":"from plotnine import geom_col, geom_path, scale_color_discrete\n\nn = 10\ndf = pd.DataFrame(\n    {\n        \"x\": np.arange(n),\n        \"y\": np.arange(n),\n        \"yfit\": np.arange(n) + np.tile([-0.2, 0.2], n \/\/ 2),\n        \"cat\": [\"a\", \"b\"] * (n \/\/ 2),\n    }\n)\n\n(\n    ggplot(df)\n    + geom_col(aes(\"x\", \"y\", fill=\"cat\"))\n    + geom_point(aes(\"x\", y=\"yfit\", color=\"cat\"))\n    + geom_path(aes(\"x\", y=\"yfit\", color=\"cat\"))\n    + scale_color_discrete(l=0.4)  # new\n)","127bb02b":"from plotnine import geom_line, scale_color_hue, ggtitle\n\ndf2 = pd.DataFrame(\n    {\n        \"letter\": [\"Alpha\", \"Beta\", \"Delta\", \"Gamma\"] * 2,\n        \"pos\": [1, 2, 3, 4] * 2,\n        \"num_of_letters\": [5, 4, 5, 5] * 2,\n    }\n)\n\n(\n    ggplot(df2)\n    + geom_col(aes(x=\"letter\", y=\"pos\", fill=\"letter\"))\n    + geom_line(aes(x=\"letter\", y=\"num_of_letters\", color=\"letter\"), size=1)\n    + scale_color_hue(l=0.45)  # some contrast to make the lines stick out\n    + ggtitle(\"Greek Letter Analysis\")\n)","fa8b3581":"!pip install vega_datasets > \/dev\/null","04129173":"import altair as alt\n\n# load a simple dataset as a pandas DataFrame\nfrom vega_datasets import data\n\ncars = data.cars()\n\nalt.Chart(cars).mark_point().encode(\n    x=\"Horsepower\",\n    y=\"Miles_per_Gallon\",\n    color=\"Origin\",\n)","d6609e68":"!wget https:\/\/raw.githubusercontent.com\/pandas-dev\/pandas\/master\/doc\/data\/air_quality_no2.csv > \/dev\/null","1e6791fc":"import pandas as pd\n\nair_quality = pd.read_csv('air_quality_no2.csv', engine='python')\nair_quality.plot(figsize=(15, 5))","7608ce57":"air_quality.plot.scatter(x=\"station_london\", y=\"station_paris\", alpha=0.5, figsize=(15, 5))","1b8a45e2":"air_quality.plot.box(figsize=(15, 5))","8aadc056":"air_quality.plot.area(figsize=(12, 8), subplots=True)","e65fb9d3":"# **Plotly Express**\n## github stars: 657\n\n\n[<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/37\/Plotly-logo-01-square.png\" width=\"250\"\/>](image.png)\n\nPositives:\n- \u2714\ufe0f Quickly make interactive plots\n- \u2714\ufe0f Like seaborn but interactive\n- \u2714\ufe0f Maps are \ud83d\udd25\ud83d\udd25\ud83d\udd25\n\nNegatives:\n- \u274c Hard to customize\n- \u274c Some default plots (bar) look gross","74b8ad2b":"# A Comprehensive Look at **EVERY** Python Data Viz Library\n\nIn this notebook we look at all the major plotting libraries in python.","b5653509":"## Statistical Estimation","8b0e94e9":"# **Matplotlib**\n## gitub stars: 14k\n\n[<img src=\"https:\/\/matplotlib.org\/stable\/_images\/sphx_glr_logos2_003.png\" width=\"250\"\/>](matplotlib.png)\n\nPositives:\n- \u2714\ufe0f Most solid plotting library in python.\n- \u2714\ufe0f Customization to do almost anything.\n- \u2714\ufe0f Widely used and other packages build off of it.\n\nNegatives:\n- \u274c Hard learn at first.\n- \u274c Complex plots can be code heavy.\n- \u274c Not best for interactive plots.","e5016396":"## Relative Between two features","cb3b5bfe":"# **Seaborn**\n## github stars: 9k\n[<img src=\"https:\/\/seaborn.pydata.org\/_images\/logo-wide-lightbg.svg\" width=\"250\"\/>](image.png)\n\nPositives:\n- \u2714\ufe0f Standard plots out of the box\n- \u2714\ufe0f Perfect for statisical anaylsis.\n- \u2714\ufe0f Fast to use for standard plots\n\nNegatives:\n- \u274c Built on top of matplotlib\n- \u274c Less ability to customize","a6db4be1":"# **Bokeh**\n\n[<img src=\"https:\/\/static.bokeh.org\/branding\/logos\/bokeh-logo@2x.jpg\" width=\"250\"\/>](image.png)\n\nPositives:\n- \u2714\ufe0f Interactive plots made easy.\n- \u2714\ufe0f Lots of customization options.\n- \u2714\ufe0f Like matplotlib but interactive\n\nNegatives:\n- \u274c like matplotlib but interactive\n- \u274c Code heavy","1ef5c618":"# What did I miss?\nLet me know in the comments!","8231fd77":"# **plotnine** (ggplot)\n## github stars: 2.9k\n[<img src=\"https:\/\/plotnine.readthedocs.io\/en\/stable\/_images\/logo-180.png\" height=\"75\"\/>](image.png)\n\nPositives:\n- \u2714\ufe0f Pretty!\n- \u2714\ufe0f Based on ggplot for R lovers.\n\nNegatives:\n- \u274c Unique coding syntax\n- \u274c Not as developed (bad docs)","9d7569ae":"## Categorical Plot","01757a3f":"# **Altair**\n## github stars: 7.1k\n\nPositives:\n- \u2714\ufe0f  Declarative Visualization\n\nNegatives:\n- \u274c  Declarative Visualization\n\nFrom their docs:\n**We believe that these challenges can be addressed without the creation of yet another visualization library that has a programmatic API and built-in rendering. Altair's approach to building visualizations uses a layered design that leverages the full capabilities of existing visualization libraries:**","2221d5e5":"# **Pandas**\n\n[<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/ed\/Pandas_logo.svg\/2560px-Pandas_logo.svg.png\" width=\"250\"\/>](image.png)\n\nPandas is a plotting library? Yes! It uses matplotlib backed.\n\nPositives:\n- \u2714\ufe0f Plot directly from a dataframe. No other imports.\n- \u2714\ufe0f Suprisingly has a lot of plotting options.\n- \u2714\ufe0f Great starting point for matplotlib plots\n\nNegatives:\n- \u274c Not interactive\n- \u274c Plain and simple"}}