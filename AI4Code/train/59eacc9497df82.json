{"cell_type":{"1c9693f5":"code","96540163":"code","2d488942":"code","5e7bf121":"code","ed26f340":"code","c89e7ea2":"code","6095b6f3":"code","430e73a3":"code","6cc46498":"code","6123531e":"code","5cf3fc82":"code","1bfa772c":"code","ebb4671c":"code","a5508399":"code","594b2ad8":"code","af9c97e6":"code","7676a6fc":"code","6a9b47bf":"code","643c0b98":"code","564be518":"code","4a19de7b":"code","55f34b9e":"code","7f887588":"code","83591e19":"code","62545a3d":"code","a2aaeac6":"code","6c71c4e3":"code","588159af":"code","f0454ece":"code","28af68cf":"code","122f42b5":"code","fdb29a3a":"code","be72243d":"code","7d0e71fb":"code","1d314227":"code","34023dc1":"code","9a5b7d90":"code","bab6b39d":"code","cbf95248":"code","35c15c69":"code","ac30d5f8":"code","a1d3c66c":"code","b4c12c47":"code","2e5dcf13":"code","26e79796":"code","14b42cce":"code","73309376":"code","e7124012":"code","f17792f4":"code","7cf766de":"code","1516f0d1":"code","b78ffdf3":"code","e84fb16b":"code","16d811f8":"code","5f6880e9":"code","73373159":"code","bfd5e0ef":"code","daa2b392":"code","01984df1":"code","8c2ef8fa":"code","eaf68090":"code","a3c122de":"code","b5db9fc3":"code","aaa5ea93":"code","a1a292d2":"code","8e73e468":"code","851141ac":"code","0ec66f1e":"code","95fa9cb1":"code","cb653d5a":"code","8318abfb":"code","cdc34998":"code","0f074f0e":"code","5e962fb8":"code","c15d4bfa":"code","d50fb96a":"code","c795b4f8":"code","21b7be3c":"code","b8ac43f5":"code","b468a34b":"code","2fb19af0":"code","83e0ee75":"code","8bf6a70a":"code","3722dfea":"code","8a80d530":"code","8db9301b":"code","16e9c9bd":"code","fb38f0ef":"code","c693b093":"code","b023e2ee":"code","2a0f39e6":"code","96457de3":"code","a6a7f592":"code","a62cfcbc":"code","520796d5":"markdown","fa09d2bb":"markdown","9e5b27a6":"markdown","7772e532":"markdown","b85c0d42":"markdown","6dc20877":"markdown","eafdff6e":"markdown","99e01e2f":"markdown","e21f12f8":"markdown","9801c37e":"markdown","1a603f9b":"markdown","03f8507e":"markdown","1e00abdb":"markdown","481056f1":"markdown","32c58c8c":"markdown","54b70558":"markdown","12a2ebe5":"markdown","fb0d792d":"markdown","d896feb5":"markdown","e07e3fa4":"markdown","07f84ce3":"markdown","87455458":"markdown","84d22096":"markdown","01155afd":"markdown","07273760":"markdown","aa63a10f":"markdown","76568041":"markdown","0eff3798":"markdown","61d5a5b8":"markdown","589a4d2d":"markdown","95c5cb59":"markdown","b68f1500":"markdown","2052816a":"markdown","612cc932":"markdown","afa88cf9":"markdown","c7d7819a":"markdown","4e97526d":"markdown","333f6531":"markdown","04b2edd7":"markdown","ff4f5b8e":"markdown","ee86ad03":"markdown"},"source":{"1c9693f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","96540163":"data = pd.read_csv(\"..\/input\/diabetes-data-set\/diabetes.csv\")","2d488942":"data.head()","5e7bf121":"print(\"Data has\\033[1m\" , data.shape[0] , \"\\033[0mrows and\\033[1m\", data.shape[1] , \"\\033[0mcolumns\\n\\n\")\nprint(\"Column Name \\t\\t Data Type\\n\")\nprint(data.dtypes) ","ed26f340":"data.isnull().sum() # no missing values at first glance","c89e7ea2":"data.duplicated().sum() #no duplicated values","6095b6f3":"data.describe()","430e73a3":"corrupted_data = data.loc[:,'Glucose':'BMI']","6cc46498":"corrupted_data.replace(0,np.nan,inplace=True) # replace 0 with NaN","6123531e":"data.loc[:,'Glucose':'BMI'] = corrupted_data","5cf3fc82":"data.describe()","1bfa772c":"data.isnull().sum()","ebb4671c":"import missingno as msno","a5508399":"msno.bar(data)","594b2ad8":"msno.matrix(data)","af9c97e6":"msno.matrix(data.sort_values(by=\"Insulin\"))","7676a6fc":"msno.heatmap(data)","6a9b47bf":"data.dropna(subset=['Glucose','BMI'],inplace=True) # drop rows having missing values for Glucose or BMI","643c0b98":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline","564be518":"from sklearn.impute import KNNImputer","4a19de7b":"data_knn = data.copy()","55f34b9e":"knn_imputer = KNNImputer(n_neighbors=5)\ndata_knn.iloc[:,:] = knn_imputer.fit_transform(data_knn)","7f887588":"data_knn.shape","83591e19":"data_knn.describe()","62545a3d":"cleaned_data = data_knn.copy()","a2aaeac6":"sns.boxplot(data=data_knn,x='Pregnancies')","6c71c4e3":"cleaned_data = cleaned_data[cleaned_data['Pregnancies']<=13]","588159af":"sns.boxplot(data=data_knn,x='Glucose')","f0454ece":"sns.boxplot(data=data_knn,x='BloodPressure')","28af68cf":"cleaned_data = cleaned_data[cleaned_data['BloodPressure']>=30]","122f42b5":"sns.boxplot(data=data_knn,x='Insulin')","fdb29a3a":"cleaned_data = cleaned_data[cleaned_data['Insulin']<=500]","be72243d":"sns.boxplot(data=data_knn,x='SkinThickness')","7d0e71fb":"cleaned_data = cleaned_data[cleaned_data['SkinThickness']<=80]","1d314227":"sns.boxplot(data=data_knn,x='BMI')","34023dc1":"cleaned_data = cleaned_data[cleaned_data['BMI']<=60]","9a5b7d90":"sns.boxplot(data=data_knn,x='Age')","bab6b39d":"cleaned_data = cleaned_data[cleaned_data['Age']<=70]","cbf95248":"print(\"We removed\",data_knn.shape[0]-cleaned_data.shape[0],\"outliers\")","35c15c69":"plt.figure(figsize=(12,8))\nsns.heatmap(cleaned_data.corr(),annot=True,cmap='viridis')","ac30d5f8":"sns.set_style('white')\nsns.histplot(data=cleaned_data,x='Age',y='Pregnancies',color='darkblue')","a1d3c66c":"sns.displot(data=cleaned_data,x='Pregnancies',hue='Outcome',kde=True)","b4c12c47":"sns.displot(data=cleaned_data,x='Glucose',hue='Outcome',kind='kde')","2e5dcf13":"sns.scatterplot(data=cleaned_data,x='Glucose',y='Insulin',hue='Outcome')","26e79796":"sns.displot(data=cleaned_data,x='BloodPressure',hue='Outcome',kind='kde')","14b42cce":"sns.scatterplot(data=cleaned_data,y='SkinThickness',x='BMI',hue='Outcome')","73309376":"cleaned_data['Outcome'].value_counts(normalize=True)*100","e7124012":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE","f17792f4":"X = cleaned_data.drop('Outcome',axis=1)  # predictor variables\ny = cleaned_data['Outcome']  # outcome variable","7cf766de":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,stratify=y,random_state=42) #with stratify=True we get same proportion in our train test split as in our original dataset","1516f0d1":"sm = SMOTE(random_state=42) # initalize SMOTE\nx_res,y_res=sm.fit_resample(X_train,y_train) # Oversample our data.","b78ffdf3":"#select best params\nfrom sklearn.model_selection import GridSearchCV\nestimator = Pipeline([(\"scaler\", StandardScaler()),\n        (\"logistic_regression\", LogisticRegression(solver='liblinear'))])\n\nparams = {'logistic_regression__penalty' : ['l1','l2'],\n    'logistic_regression__C': np.linspace(0.001,100)\n}\ngrid = GridSearchCV(estimator, params, cv=5,verbose=True,n_jobs=-1,scoring='recall')","e84fb16b":"grid.fit(x_res,y_res) #fit the model","16d811f8":"grid.best_params_ #best params","5f6880e9":"y_pred = grid.predict(X_test)  #predict ","73373159":"from sklearn.metrics import confusion_matrix, classification_report","bfd5e0ef":"#plot the confusion matrix\n_, ax = plt.subplots(figsize=(12,12))\nax = sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='viridis', annot_kws={\"size\": 40, \"weight\": \"bold\"})  \nlabels = ['True', 'False']\nax.set_xticklabels(labels, fontsize=25);\nax.set_yticklabels(labels, fontsize=25);\nax.set_ylabel('Prediction', fontsize=30);\nax.set_xlabel('Ground Truth', fontsize=30)","daa2b392":"print(classification_report(y_test,y_pred))","01984df1":"from sklearn.neighbors import KNeighborsClassifier","8c2ef8fa":"se = StandardScaler()  # we need to scale our data for knn\nX_scaled = se.fit_transform(X)","eaf68090":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.33,stratify=y,random_state=42)","a3c122de":"sm = SMOTE(random_state=42)\nx_res,y_res=sm.fit_resample(X_train,y_train)","b5db9fc3":"#to optimize the value of k \nfrom sklearn.metrics import recall_score,f1_score\nmax_k = 40\nrecall_scores = list()\nf1_scores = list()\nfor k in range(1, max_k):\n    \n    knn = KNeighborsClassifier(n_neighbors=k, weights='distance')\n    knn = knn.fit(x_res, y_res)\n    \n    y_pred = knn.predict(X_test)\n    r = recall_score(y_pred, y_test)\n    recall_scores.append((k, round(recall_score(y_test, y_pred), 4)))\n    f1_scores.append((k, round(f1_score(y_test, y_pred), 4)))\n    \nr_results = pd.DataFrame(recall_scores, columns=['K', 'Recall'])\nf1_results = pd.DataFrame(f1_scores, columns=['K', 'F1'])","aaa5ea93":"sns.set_context('talk')\nsns.set_style('ticks')\n\nplt.figure(dpi=300)\nax = r_results.set_index('K').plot(figsize=(12, 8), linewidth=6)\nax.set(xlabel='K', ylabel='Recall')\nax.set_xticks(range(1, max_k, 2));\nplt.title('KNN recall')\nplt.legend(labels='R')","a1a292d2":"sns.set_context('talk')\nsns.set_style('ticks')\n\nplt.figure(dpi=300)\nax = f1_results.set_index('K').plot(figsize=(12, 8), linewidth=6)\nax.set(xlabel='K', ylabel='f1_score')\nax.set_xticks(range(1, max_k, 2));\nplt.title('KNN F1')\nplt.legend(labels='f1_score')","8e73e468":"_, ax = plt.subplots(figsize=(12,12))\nax = sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='viridis', annot_kws={\"size\": 40, \"weight\": \"bold\"})  \nlabels = ['True','False']\nax.set_xticklabels(labels, fontsize=25);\nax.set_yticklabels(labels, fontsize=25);\nax.set_ylabel('Prediction', fontsize=30);\nax.set_xlabel('Ground Truth', fontsize=30)\n### END SOLUTION","851141ac":"knn = KNeighborsClassifier(n_neighbors=13, weights='distance')\nknn = knn.fit(x_res, y_res)\ny_pred = knn.predict(X_test)\nprint(classification_report(y_test, y_pred))","0ec66f1e":"from sklearn.svm import LinearSVC","95fa9cb1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,stratify=y,random_state=42)","cb653d5a":"sm = SMOTE(random_state=42)\nx_res,y_res=sm.fit_resample(X_train,y_train)","8318abfb":"from sklearn.model_selection import GridSearchCV\nestimator = Pipeline([(\"scaler\", StandardScaler()),\n        (\"linear_svc\", LinearSVC(max_iter=100000))])\n\nparams = {\n    'linear_svc__C': np.linspace(0.001,100)\n}\ngrid = GridSearchCV(estimator, params, cv=5,verbose=True,n_jobs=-1,scoring='f1')","cdc34998":"grid.fit(x_res,y_res)","0f074f0e":"grid.best_params_","5e962fb8":"y_pred = grid.predict(X_test)","c15d4bfa":"_, ax = plt.subplots(figsize=(12,12))\nax = sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='viridis', annot_kws={\"size\": 40, \"weight\": \"bold\"})  \nlabels = ['True','False']\nax.set_xticklabels(labels, fontsize=25);\nax.set_yticklabels(labels, fontsize=25);\nax.set_ylabel('Prediction', fontsize=30);\nax.set_xlabel('Ground Truth', fontsize=30)\n### END SOLUTION","d50fb96a":"print(classification_report(y_test, y_pred))","c795b4f8":"from sklearn.ensemble import RandomForestClassifier","21b7be3c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,stratify=y,random_state=42)","b8ac43f5":"sm = SMOTE(random_state=42)\nx_res,y_res=sm.fit_resample(X_train,y_train)","b468a34b":"from sklearn.model_selection import GridSearchCV\nestimator = RandomForestClassifier(n_estimators=300)\n\nparams = { 'max_depth' : range(5,20),\n          'min_samples_split' : np.arange(2,10)\n}\ngrid = GridSearchCV(estimator, params, cv=5,verbose=True,n_jobs=-1,scoring='f1')","2fb19af0":"grid.fit(x_res,y_res)","83e0ee75":"y_pred = grid.predict(X_test)","8bf6a70a":"_, ax = plt.subplots(figsize=(12,12))\nax = sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='viridis', annot_kws={\"size\": 40, \"weight\": \"bold\"})  \nlabels = ['True','False']\nax.set_xticklabels(labels, fontsize=25);\nax.set_yticklabels(labels, fontsize=25);\nax.set_ylabel('Prediction', fontsize=30);\nax.set_xlabel('Ground Truth', fontsize=30)\n### END SOLUTION","3722dfea":"grid.best_params_","8a80d530":"print(classification_report(y_test, y_pred))","8db9301b":"from sklearn.ensemble import VotingClassifier","16e9c9bd":"lr = LogisticRegression(solver='liblinear',penalty='l1',C=2.0417959183673466)\nknn = KNeighborsClassifier(n_neighbors=13, weights='distance')\nsvc = LinearSVC(penalty='l2',C=0.001)\nrf = RandomForestClassifier(max_depth=8, min_samples_split=2,n_estimators=300)","fb38f0ef":"eclf = VotingClassifier(estimators=[('clf1',lr),('clf2',knn),('clf3',svc),('clf4',rf)])","c693b093":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.33, random_state=42,stratify=y)","b023e2ee":"sm = SMOTE(random_state=42)\nx_res,y_res=sm.fit_resample(X_train,y_train)","2a0f39e6":"eclf.fit(x_res,y_res)","96457de3":"y_pred = eclf.predict(X_test)","a6a7f592":"_, ax = plt.subplots(figsize=(12,12))\nax = sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='viridis', annot_kws={\"size\": 40, \"weight\": \"bold\"})  \nlabels = ['False', 'True']\nax.set_xticklabels(labels, fontsize=25);\nax.set_yticklabels(labels[::-1], fontsize=25);\nax.set_ylabel('Prediction', fontsize=30);\nax.set_xlabel('Ground Truth', fontsize=30)\n### END SOLUTION","a62cfcbc":"print(classification_report(y_test, y_pred))","520796d5":"Again similar results compared to the other models, with very little to no improvement in our scores","fa09d2bb":"# Exploratory Data Analysis","9e5b27a6":"Majority of females taking part have 0 preganancies , also the number of pregnancies doesn't seem to have impact on wether someone is diabetic or not","7772e532":"Similar results to that of Logistic Regression ","b85c0d42":"# SVC\n\nFor our next two models let's try and optimize for f1 score and see the results","6dc20877":"# Combining models \nLets try and combine all our models and see how well it works then","eafdff6e":"Looking at the above matrix we can figure out that glucose and BMI are MCAR(Missing completely at random) and insulin , SkinThickness are MNAR(Missing not at random)","99e01e2f":"BP below 30 mm Hg can be considered as outliers and hence removed","e21f12f8":"The following conclusions can be drawn from the heatmap :\n- There is not much correlation among different predictors\n- Age and Pregnancy have a positive corr indicating that adults have more children\n- There is high corr between BMI and SkinThickness, generally people with very high BMI are considered obese thus explaining thicker skin\n- There is positive correlation among Insulin and Glucose as well which could be explained by the fact that perhaps the type 1 diabetic patients who generally have high Glucose , were given Insulin injections.\n- Glucose also has corr with our Outcome , i.e. , diabetic patients have higher level of glucose in their blood","9801c37e":"KNN focused more heavily on identifying the False negatives","1a603f9b":"SkinThickness of 99 removed as outlier","03f8507e":"Type 1 diabeties is caused when pancreas produces very little to no insulin and thus the level of glucose increases , from the scatterplot we can clearly see that diabetic patients have high glucose and low insulin \n\n##### Note: Data is collected after 2 hour of giving an insulin injection which explains the high values of insulin.","1e00abdb":"# Conclusion","481056f1":"Still the same results , which is not surprising considering that all the models had similar predictions","32c58c8c":"The data is taken from \"https:\/\/www.kaggle.com\/mathchi\/diabetes-data-set\"\n\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.All the patients here are female 21 years or older.It contains the following columns:\n \n  - Pregnancies: Number of times pregnant\n  - Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n  - BloodPressure: Diastolic blood pressure (mm Hg)\n  - SkinThickness: Triceps skin fold thickness (mm)\n  - Insulin: 2-Hour serum insulin (mu U\/ml)\n  - BMI: Body mass index (weight in kg\/(height in m)^2)\n  - DiabetesPedigreeFunction: Diabetes pedigree function\n  - Age: Age (years)\n  - Outcome: Class variable (0 or 1)","54b70558":"We can see heavy correlation between SkinThickness and Insulin","12a2ebe5":"BloodPressure seems to be normally distributed for both positive and negative cases, indicating little corr as we have seen earlier. The mean BloodPressure seems to be a bit higher but is still within the normal diastolic range of 60-80 mm Hg","fb0d792d":"From both the recall and F1 score we can see that k=13 can be considered as an optimal value","d896feb5":"BMI range of 18.5-24.9 is generally considered as normal while those above 30 are considerd as obsese ans BMI above 55 is considerd as Morbid Obsese\nWith increase in BMI skinthickness also increases and it seems that obses people are generally more prone to diabeties","e07e3fa4":"Lets observe these missing values more closely and find out if their is any relation","07f84ce3":"# Logistic Regression","87455458":"A recall of 0.75 is not that bad , lets see if we can improve upon in other models","84d22096":"The dataset seems to be imbalanced with 65% of input as non diabetic , we will use SMOTE to deal with this later as we train our model","01155afd":"People who don't have diabeties have glucose normally distributed around 100 as mean , while those with diabeties have much higher level of glucose ranging between 100 and 200","07273760":"We note that minimum value for columns such as Glucose,BP,Insulin,BMI are 0 which is not possible , hence these must be missing values which are encoded as 0\nWe can use imputation techniques to deal with these","aa63a10f":"# Objectives","76568041":"# Random Forest","0eff3798":"- Clean the data and deal with missing values\n- Perform EDA to get a better understanding of underlying trends\n- Fit different models and tune their hyperparameter for best performance","61d5a5b8":"Values above 13 are outliers and removed ","589a4d2d":"# KNN","95c5cb59":"No outliers detected","b68f1500":"# Dataset Description","2052816a":"Using knnimputer we fill the missing values without impacting the variability of the dataset","612cc932":"Females between age of 40 and 50 have more children while those around the age of 21 generally have 0 children","afa88cf9":"# Outlier Removal","c7d7819a":"Age of 81 is removed as outlier","4e97526d":"BMI obove 60 removed ","333f6531":"# Data Cleaning","04b2edd7":"# Metric\nIt is important to identify the correct metric for a classification problem with unbalanced dataset as accuracy would fail \nSince we are trying to build a model to corretly identify patients with Diabeted we should prioritize our recall or f1 score.","ff4f5b8e":"Insulin level above 500 could skew our model and hence removed","ee86ad03":"All the models had similar performance with recall around 0.75, which is not bad considering the size of the dataset and the imbalance.\n\nHowever perhaps employing unsupervised methods such as clustering could reveal more information and help us improve our scores.\nMore powerful ensemble methods such as XGboost could also yield better result and I would like to try that perhaps some other day.\n\nAlso other sampling methods might have yielded better results.\n\nIn the end I would like your feedback on how i could improve the performance, thank you."}}