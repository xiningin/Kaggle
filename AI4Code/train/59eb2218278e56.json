{"cell_type":{"3fd275d0":"code","f663b191":"code","3b98895b":"code","78f5ba71":"code","d9f33031":"code","428e09f9":"code","e8736792":"code","a7ec982a":"code","19e19255":"code","484db302":"code","2e1a4fe1":"code","880dd41e":"code","8a86aee6":"code","daa361c8":"code","4deb1499":"code","8e6f38f9":"code","ac1ebc32":"code","c3663c01":"code","3bd4d48c":"code","1131fc42":"code","ebefb8e4":"code","9ac841fb":"code","3ee17635":"code","32c287c6":"code","69330937":"code","5d365394":"code","069f2c9a":"code","639e2fbb":"code","cd5b7431":"code","30e30710":"code","db4b1616":"code","f0eeb0c2":"code","72263cd9":"code","d9cf1a7b":"code","5f72b72f":"code","afc630fc":"markdown","a6ab72e3":"markdown","881ce30d":"markdown","95bd36b1":"markdown","f0ec270b":"markdown"},"source":{"3fd275d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f663b191":"df1=pd.read_csv('..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\ndf=df1[['description','requirements','fraudulent']]\ndf=df.dropna()\nX=df.drop('fraudulent',axis=1)\ny=df['fraudulent']","3b98895b":"df1","78f5ba71":"import tensorflow as tf\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras import Model\nfrom tensorflow.keras import Input\nfrom tensorflow.keras.layers import concatenate\nfrom tensorflow.keras.layers import AveragePooling1D\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import MaxPooling1D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import BatchNormalization\ntf.__version__\n\nimport matplotlib.pyplot as plt\n\nimport nltk\nimport re\nfrom nltk.corpus import stopwords\n\nfrom sklearn.model_selection import train_test_split","d9f33031":"voc_size=5000\nsent_length = 40","428e09f9":"message = X.copy()\nmessage.reset_index(inplace=True)\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(message)):\n    review = re.sub('[^a-zA-Z]', ' ', message['description'][i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)\n    if i % 1000 == 0:\n        print(i)\nX['corpus'] = corpus","e8736792":"message['description'][0]","a7ec982a":"corpus[0]","19e19255":"print(x_train_word_ids[0])","484db302":"print(x_train_padded_seqs[2])","2e1a4fe1":"X['corpus'] = corpus\nX.reset_index(inplace=True)","880dd41e":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nprint(len(onehot_repr[0]))\nprint(len(corpus[0].split(' ')))","8a86aee6":"X_train, X_test, y_train, y_test = train_test_split(X['corpus'], np.array(y), test_size=0.1,random_state=24)","daa361c8":"# tokenization\ntokenizer=Tokenizer()\ntokenizer.fit_on_texts(corpus)\nvocab=tokenizer.word_index\n# Only top num_words-1 most frequent words will be taken into account. Only words known by the tokenizer will be taken into account.\nx_train_word_ids=tokenizer.texts_to_sequences(X_train) \nx_test_word_ids = tokenizer.texts_to_sequences(X_test)\n# pad_sequences\n# \u6bcf\u6761\u6837\u672c\u957f\u5ea6\u4e0d\u552f\u4e00\uff0c\u5c06\u6bcf\u6761\u6837\u672c\u7684\u957f\u5ea6\u8bbe\u7f6e\u4e00\u4e2a\u56fa\u5b9a\u503c\nx_train_padded_seqs=pad_sequences(x_train_word_ids,maxlen=sent_length) #\u5c06\u8d85\u8fc7\u56fa\u5b9a\u503c\u7684\u90e8\u5206\u622a\u6389\uff0c\u4e0d\u8db3\u7684\u5728\u6700\u524d\u9762\u75280\u586b\u5145\nx_test_padded_seqs=pad_sequences(x_test_word_ids, maxlen=sent_length)\n","4deb1499":"len(vocab)","8e6f38f9":"embedding_vector_features=300\nmodel1=Sequential()\nmodel1.add(Embedding(len(vocab)+1,embedding_vector_features,input_length=sent_length))\n# model1.add(Bidirectional(LSTM(100))) ##Just add bidirectional!!, except it would just behave as normal LSTM Model\nmodel1.add(LSTM(100))\nmodel1.add(Dropout(0.3))\nmodel1.add(Dense(1,activation='sigmoid'))\nmodel1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model1.summary())","ac1ebc32":"model1.fit(x_train_padded_seqs,y_train,validation_data=(x_test_padded_seqs,y_test),epochs=12,batch_size=800)","c3663c01":"y_pred=model1.predict(x_test_padded_seqs)\ny_pred = np.where(y_pred<0.5,0,1)","3bd4d48c":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","1131fc42":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","ebefb8e4":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","9ac841fb":"embedding_vector_features=300\nmain_input = Input(shape=(sent_length,), dtype='int32')\n# \u8bcd\u5d4c\u5165\uff08\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\uff09\nembedder = Embedding(len(vocab)+1,embedding_vector_features,input_length=sent_length)\nembed = embedder(main_input)\n# LSTM\nlstm = LSTM(100)(embed)\nlstm = Dropout(0.3)(lstm)\n# CNN\ncnn = Conv1D(256, 5, padding='same')(embed)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(128, 5, padding='same')(cnn)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(64, 3, padding='same')(cnn)\ncnn = Flatten()(cnn)\ncnn = Dropout(0.1)(cnn)\ncnn = BatchNormalization()(cnn)\ncnn = Dense(100, activation='relu')(cnn)\ncnn = Dropout(0.1)(cnn)\n# AVG POOLING\n# avg_pooling = Dense(100, activation='relu')(cnn) # not good\n# \u5408\u5e76\u4e24\u4e2a\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\u5411\u91cf\nlstmncnn = concatenate([lstm, cnn], axis=-1)\nflat = Flatten()(lstmncnn)\ndrop = Dropout(0.2)(flat)\nmain_output = Dense(1, activation='sigmoid')(drop)\nmodel2 = Model(inputs=main_input, outputs=main_output)\nmodel2.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model2.summary())","3ee17635":"model1.fit(x_train_padded_seqs,y_train,validation_data=(x_test_padded_seqs,y_test),epochs=12,batch_size=800)","32c287c6":"y_pred=model1.predict(x_test_padded_seqs)\ny_pred = np.where(y_pred<0.5,0,1)","69330937":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","5d365394":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","069f2c9a":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","639e2fbb":"from tensorflow.keras.utils import plot_model\n    #\u751f\u6210\u4e00\u4e2a\u6a21\u578b\u56fe\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6a21\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u8981\u751f\u6210\u56fe\u7247\u7684\u8def\u5f84\u53ca\u6587\u4ef6\u540d\uff0c\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e24\u4e2a\u53c2\u6570\uff1a\n    #show_shapes:\u6307\u5b9a\u662f\u5426\u663e\u793a\u8f93\u51fa\u6570\u636e\u7684\u5f62\u72b6\uff0c\u9ed8\u8ba4\u4e3aFalse\n    #show_layer_names:\u6307\u5b9a\u662f\u5426\u663e\u793a\u5c42\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3aTrue\nplot_model(model2,show_shapes=True,show_layer_names=False)","cd5b7431":"from tensorflow.keras.layers import GlobalAveragePooling1D\nembedding_vector_features=300\nmain_input = Input(shape=(sent_length,), dtype='int32')\n# \u8bcd\u5d4c\u5165\uff08\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\uff09\nembedder = Embedding(len(vocab)+1,embedding_vector_features,input_length=sent_length)\nembed = embedder(main_input)\n# LSTM\nlstm = LSTM(100)(embed)\nlstm = Dropout(0.3)(lstm)\n# CNN\ncnn = Conv1D(256, 5, padding='same')(embed)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(128, 5, padding='same')(cnn)\ncnn = MaxPooling1D(3, 3, padding='same')(cnn)\ncnn = Conv1D(64, 3, padding='same')(cnn)\ncnn = Flatten()(cnn)\ncnn = Dropout(0.1)(cnn)\ncnn = BatchNormalization()(cnn)\ncnn = Dense(100, activation='relu')(cnn)\ncnn = Dropout(0.1)(cnn)\n# AVG POOLING\navg_pooling = GlobalAveragePooling1D()(embed) # not good\navg_pooling = Dropout(0.7)(avg_pooling)\n# \u5408\u5e76\u4e24\u4e2a\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\u5411\u91cf\nlstmncnn = concatenate([lstm, cnn,avg_pooling], axis=-1)\nflat = Flatten()(lstmncnn)\ndrop = Dropout(0.2)(flat)\nmain_output = Dense(1, activation='sigmoid')(drop)\nmodel3 = Model(inputs=main_input, outputs=main_output)\nmodel3.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model3.summary())","30e30710":"model3.fit(x_train_padded_seqs,y_train,validation_data=(x_test_padded_seqs,y_test),epochs=12,batch_size=800)","db4b1616":"y_pred=model3.predict(x_test_padded_seqs)\ny_pred = np.where(y_pred<0.5,0,1)","f0eeb0c2":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","72263cd9":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)\n","d9cf1a7b":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","5f72b72f":"from tensorflow.keras.utils import plot_model\n    #\u751f\u6210\u4e00\u4e2a\u6a21\u578b\u56fe\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6a21\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u8981\u751f\u6210\u56fe\u7247\u7684\u8def\u5f84\u53ca\u6587\u4ef6\u540d\uff0c\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e24\u4e2a\u53c2\u6570\uff1a\n    #show_shapes:\u6307\u5b9a\u662f\u5426\u663e\u793a\u8f93\u51fa\u6570\u636e\u7684\u5f62\u72b6\uff0c\u9ed8\u8ba4\u4e3aFalse\n    #show_layer_names:\u6307\u5b9a\u662f\u5426\u663e\u793a\u5c42\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3aTrue\nplot_model(model3,show_shapes=True,show_layer_names=False)","afc630fc":"## data preprocessing","a6ab72e3":"## depthCNN+LSTM+AVRPOOLING","881ce30d":"## LSTM only","95bd36b1":"## read data","f0ec270b":"# depsth CNN + LSTM"}}