{"cell_type":{"0bb69bbd":"code","987458fa":"code","15b871f6":"code","3d1f6968":"code","7699993d":"code","86cddeea":"code","3af8b07c":"code","e615924e":"code","478f4f8f":"code","6787e1cc":"code","72016fc2":"code","15376842":"code","33a61cea":"code","fa9628c2":"code","ab5d0933":"code","e8aa361d":"code","0818ccd9":"code","93bcea69":"code","5425ff0b":"code","6bf096be":"code","a539bdf1":"code","1d3e35a3":"code","0a77287c":"code","3c6f5668":"code","0022ac7c":"code","28cf8265":"code","c6dc371d":"code","5e48d0bd":"markdown","a25de95d":"markdown","bfd5ac75":"markdown","ef58d494":"markdown","7b0d8081":"markdown","12afd3d5":"markdown","018abb60":"markdown","292392b0":"markdown","b5ea6072":"markdown","fd628484":"markdown","8cb1d153":"markdown","d21b200a":"markdown"},"source":{"0bb69bbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","987458fa":"##reading the data \ndf = pd.read_csv('..\/input\/BlackFriday.csv')","15b871f6":"df.shape","3d1f6968":"# Number of transactions for genre\ndf['Gender'].value_counts()  # ","7699993d":"#Pie chart for the transactions\nexplode = (0.1,0)  \nfig1, ax1 = plt.subplots(figsize=(8,5))\nplt.rcParams['font.size']=18\ncolor_palette_list = ['#80bfff', '#ff99ff' ]\nax1.pie(df['Gender'].value_counts(), explode=explode,labels=['Male','Female'],colors=color_palette_list[0:2], autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nax1.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle \nplt.tight_layout()\nplt.legend()\nplt.title('Percentage of Transactions by genre')\nplt.show()","86cddeea":"df2=df #backup original dataframe\ndf3 =df2.drop_duplicates(['User_ID'], keep='first') #removed duplicates\n#df3.head()\ndf3['Gender'].value_counts()  # counts for females and males\n# more elegant solution:    df.groupby(['Gender'])['User_ID'].nunique()\n\n#Pie chart\nexplode = (0.1,0)  \nfig1, ax1 = plt.subplots(figsize=(8,5))\nplt.rcParams['font.size']=18\ncolor_palette_list = ['#80bfff', '#ff99ff' ]\nax1.pie(df3['Gender'].value_counts(), explode=explode,labels=['Male','Female'],colors=color_palette_list[0:2], autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nax1.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle \nplt.tight_layout()\nplt.title('Male and Female')\nplt.legend()\nplt.show()","3af8b07c":"label=df3['Age'].value_counts().index\nfig2, ax2 = plt.subplots(figsize=(10,8))\nax2.pie(df3['Age'].value_counts(), labels=label,  \n       autopct='%1.0f%%', \n       shadow=False, startangle=0,   \n       pctdistance=0.6,labeldistance=1.1)\nax2.axis('equal')\nax2.set_title(\"Percentage split between different age groups in the dataset\", fontsize=20)\n\nax2.legend(label,\n          title=\"Age Groups\",\n          loc=\"center left\",\n          bbox_to_anchor=(1.2, 0.5, 0, 0.2))\nplt.show()","e615924e":"n_bins=30\nplt.subplots(figsize=(16,8))\nplt.hist(df['Purchase'],bins=n_bins)\n# Label axes\nplt.xlabel('purchase')\nplt.ylabel('count')\nplt.title('Purchase Amount', fontsize=30)\nplt.show()","478f4f8f":"df.groupby('Age')[['Purchase']].describe()","6787e1cc":"# plt.subplots(figsize=(16,8))\ndata=df.groupby('Age')[['Purchase']].mean()\ndata.plot(xticks=[1,2,3,4,5,6,7],figsize=(13,5))\nplt.title('Mean Purchases by Age', fontsize=20)\nplt.show()\n","72016fc2":"derived=df.groupby('Product_ID')[['Purchase']].sum()\/ sum(df['Purchase'])","15376842":"df3['Gender'].value_counts()  # counts for females and males","33a61cea":"(df.groupby(['Product_ID','Gender'])[['Gender']]).count().head()","fa9628c2":"##User by Occupation\nplt.subplots(figsize=(12,7))\ndf.groupby(['Occupation'])['User_ID'].nunique().sort_values().plot('bar', color='m')\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('User by Occupation')\nplt.show()","ab5d0933":"##User by Location\nplt.subplots(figsize=(10,5))\ndf.groupby(['City_Category'])['User_ID'].nunique().sort_values().plot('bar', color='g')\nplt.xlabel('City_Category')\nplt.ylabel('Count')\nplt.title('User by City_Category')\nplt.show()","e8aa361d":"##Total purchases by genre not normalized: the females are much less than males.\nplt.subplots(figsize=(10,5))\ndf.groupby('Gender')['Purchase'].sum().sort_values().plot('bar',color=['#ff99ff','#80bfff'])  \nplt.xlabel('Gender')\nplt.ylabel('Total Purchases')\nplt.title('Total spend Female-Males Not normalized')\nplt.show()","0818ccd9":"# normalized\nplt.subplots(figsize=(10,5))\n(df.groupby('Gender')['Purchase'].sum()\/df.groupby(['Gender'])['User_ID'].nunique()).sort_values().plot('bar',color=['#ff99ff','#80bfff'])\nplt.xlabel('Gender')\nplt.ylabel('Total Purchases')\nplt.title('Total spend Female-Males Normalized')\nplt.show()","93bcea69":"plt.subplots(figsize=(10,5))\ndf.groupby('Age')['Purchase'].sum().plot('bar', color='b')  #add axes labels\n\nplt.xlabel('Age')\nplt.ylabel('Total Purchases')\nplt.title('Age of customers')\nplt.show()","5425ff0b":"plt.subplots(figsize=(10,5))\n(df.groupby('Age')['Purchase'].sum()\/df.groupby(['Age'])['User_ID'].nunique()).plot('bar', color='b')\nplt.xlabel('Age')\nplt.ylabel('Total Purchases')\nplt.title('Age Customers Normalized')\nplt.show()","6bf096be":"###### See https:\/\/www.kaggle.com\/arkhoshghalb\/black-friday-analysis-regression-and-clustering\/comments\n\nages_count = [df[df.Age== x]['City_Category'].value_counts(sort=False).iloc[::-1] for x in sorted(df.Age.unique())]\n\nstay_years = [df[df.Stay_In_Current_City_Years == x]['City_Category'].value_counts(sort=False).iloc[::-1] for x in sorted(df.Stay_In_Current_City_Years.unique())]\n\n\nf, (ax1, ax2) = plt.subplots(2,1, figsize=(16,12))\n\nages = sorted(df.Age.unique())\npd.DataFrame(ages_count, index=ages).sort_index(axis=1).T.plot.bar(stacked=True, width=0.3, ax=ax1, rot=0, fontsize=11)\nax1.set_xlabel('City Category', size=13)\nax1.set_ylabel('# Transactions', size=14)\nax1.set_title('# Transactions by city (separated by age)', size=14)\nax1.legend(loc=\"upper left\",fontsize=10)\n\ncolors=['#FF0000','#FFFF00','#00FFFF','#C0C0C0','#800000',]\nyears = sorted(df.Stay_In_Current_City_Years.unique())\npd.DataFrame(stay_years, index=years).sort_index(axis=1).T.plot.bar(stacked=True, width=0.3, ax=ax2, rot=0,color=colors,fontsize=11)\nax2.set_xlabel('City Category', size=13)\nax2.set_ylabel('# Transactions', size=14)\nax2.set_title('# Transactions by city (separated by years in the City)', size=14)\nax2.legend(loc=\"upper left\",fontsize=10)\n\nplt.show()","a539bdf1":"##### test to see distribution for populations  ###\n######https:\/\/www.kaggle.com\/arkhoshghalb\/black-friday-analysis-regression-and-clustering\/comments\n\noccupations_count = [df[df.Occupation== x]['City_Category'].value_counts(sort=False).iloc[::-1] for x in sorted(df.Occupation.unique())]\n\nstay_years = [df[df.Stay_In_Current_City_Years == x]['City_Category'].value_counts(sort=False).iloc[::-1] for x in sorted(df.Stay_In_Current_City_Years.unique())]\n\n\nf, (ax1, ax2) = plt.subplots(2,1, figsize=(16,12))\n\noccupations = sorted(df.Occupation.unique())\npd.DataFrame(occupations_count, index=occupations).sort_index(axis=1).T.plot.bar(stacked=True, width=0.3, ax=ax1, rot=0, fontsize=11)\nax1.set_xlabel('City Category', size=13)\nax1.set_ylabel('# Transactions', size=14)\nax1.set_title('# Transactions by city (separated by age)', size=14)\nax1.legend(loc=\"upper left\",fontsize=10)\n\ncolors=['#FF0000','#FFFF00','#00FFFF','#C0C0C0','#800000',]\nyears = sorted(df.Stay_In_Current_City_Years.unique())\npd.DataFrame(stay_years, index=years).sort_index(axis=1).T.plot.bar(stacked=True, width=0.3, ax=ax2, rot=0,color=colors,fontsize=11)\nax2.set_xlabel('City Category', size=13)\nax2.set_ylabel('# Transactions', size=14)\nax2.set_title('# Transactions by city (separated by years in the City)', size=14)\nax2.legend(loc=\"upper left\",fontsize=10)\n\nplt.show()","1d3e35a3":"# (df.groupby('Marital_Status')['Purchase'].sum()\/df.groupby(['Marital_Status'])['User_ID'].nunique()).sort_values().plot('bar',color=['#008000','#800080'])\ndf.groupby('Marital_Status')['Purchase'].sum().sort_values().plot('bar',color=['#008000','#800080'])  \nplt.xlabel('Marital_Status')\nplt.ylabel('Total Purchases')\nplt.title('Normalized')\nplt.show()","0a77287c":"# Do not married spend more than married?\n(df.groupby('Marital_Status')['Purchase'].sum()\/df.groupby(['Marital_Status'])['User_ID'].nunique()).sort_values().plot('bar',color=['#008000','#800080'])\nplt.xlabel('Marital_Status')\nplt.ylabel('Total Purchases')\nplt.title('Total spend by  marital status normalized')\nplt.show()","3c6f5668":"df_0to17=df.loc[df['Age'] == '0-17']   ##create dataframe with age category","0022ac7c":"fig1, ax1 = plt.subplots(figsize=(12,7))\nplt.title('Most sold product for Age group 0-17')\ndf_0to17.groupby(['Product_ID'])['Purchase'].count().nlargest(10).sort_values().plot('barh',color='r')\nplt.show()","28cf8265":"#filling missing data entries with zero\ndf=df.fillna(0)\ndf.head()","c6dc371d":"product='P00000142'  #change here accordingly\ndf_product=df.loc[df['Product_ID'] == product]\n(df_product.groupby(['Product_ID','Gender','Age'])[['Age']]).count()","5e48d0bd":"#### Percentage split between different age groups in the dataset   ","a25de95d":"### Other","bfd5ac75":"Observation: B is where most transactions happened.\n             26-35 years old are the most frequent spenders\n             People in the first year have more transactions, they buy more often","ef58d494":"#### Example to find the most sold product for age category","7b0d8081":"#### Average amount spent by each age group and other descriptive statistics","12afd3d5":"##### Derived variable representing the percentage of the total spent on each product. ","018abb60":"#### Histogram of the \u2018Purchase Amount\u2019 variable","292392b0":"##### Percentage split between women and men ","b5ea6072":"For each product I can see which age group and sex was breakdown","fd628484":"Let's do the same for age","8cb1d153":"#### Dealing with missing data. They are only in Product_category (from Excel data filter)","d21b200a":"##### Rows and columns of data you have loaded"}}