{"cell_type":{"d0755cb8":"code","34fe336a":"code","13e0bf50":"code","763b58b9":"code","af04a23d":"code","9b9b3963":"code","c32732c7":"code","dad6db53":"code","d671ed3e":"code","cb6ec00b":"code","7648f5e9":"code","e1627b93":"code","cc54ef6d":"code","8eeee25c":"code","636f16d8":"code","787aaa43":"code","2980907d":"code","d415395f":"code","c5879bd9":"code","247f9d7b":"code","a8e3e9bf":"code","9b07f5e1":"code","438cc121":"code","a85a2ad7":"code","649cd27f":"code","bef13e8c":"code","343c033a":"code","8ed238c2":"code","1c6ea751":"code","52e33ca3":"code","32b01f38":"code","4e61f977":"code","b8e37e04":"code","79e35fd3":"code","a93049fa":"code","d5c3521f":"code","3a80bc4a":"code","3928edc2":"code","d1f95853":"code","3653e2f0":"code","b25af368":"markdown","74386e5d":"markdown","31fa64f9":"markdown","46c7bee8":"markdown","0b2b9cc4":"markdown","b716cd14":"markdown","b25cde41":"markdown","99a7dc6e":"markdown","15a4c932":"markdown","4005d413":"markdown","ab0c9a93":"markdown","ef7ac4bf":"markdown","d57eba3c":"markdown","61ddfea8":"markdown","6b7872db":"markdown","c854eb7e":"markdown","a9e8bf87":"markdown","5d075668":"markdown","091a264b":"markdown","650fdb6e":"markdown","2d7b7177":"markdown"},"source":{"d0755cb8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34fe336a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport plotly.graph_objs as go\nimport plotly.express as px","13e0bf50":"pip install kaleido","763b58b9":"pip install xlrd","af04a23d":"pip install openpyxl","9b9b3963":"genderfileloc=\"\/kaggle\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx\"\ngenderdf = pd.read_excel(genderfileloc)\ngenderdf.head()","c32732c7":"# Checking for missing values\ngenderdf.isnull().values.any()","dad6db53":"labels=genderdf.Discipline[0:10]\ncount_of_male=genderdf.Male[0:10]\ncount_of_female=genderdf.Female[0:10]\nx = np.arange(len(labels))\nwidth=0.35\n\nfig, ax= plt.subplots(figsize=(9,7))\n\nax.set_xticks(x)\nax.set_xticklabels(labels,rotation=45)\nax.legend()\n\nrects1 = ax.bar(x - width\/2, count_of_male, width,color=(0.101, 0.470, 1,1), label='Men')\nrects2 = ax.bar(x + width\/2, count_of_female, width,color=(0.360, 0.623, 1,1), label='Women')\n\nax.bar_label(rects1,padding=10)\nax.bar_label(rects2,padding=10)\n# fig.tight_layout()\nplt.show()","d671ed3e":"labels=['Male','Female']\ntotal_male=genderdf.Male.sum()\ntotal_female=genderdf.Female.sum()\nplt.bar(labels,[total_male,total_female],color=(0.101, 0.470, 1,1))\nplt.show()","cb6ec00b":"# Working on Athletes data\nathletesfileloc=\"\/kaggle\/input\/2021-olympics-in-tokyo\/Athletes.xlsx\"\nathletedf = pd.read_excel(athletesfileloc)\nathletedf.head()","7648f5e9":"athletes_country = athletedf.groupby('NOC').count().reset_index()\nathletes_country.columns = ['country', 'count','abc']# Set the correct variables'names\n# athletes_country.drop(labels='abc',axis=1)\ndel athletes_country['abc']\nathletes_country = athletes_country.sort_values('count', ascending = False)\nathletes_top_country = athletes_country.head(20)\nathletes_country.head()","e1627b93":"sns.set_style(\"ticks\")\nplt.figure(figsize=(20,10))\nsns.barplot(x=athletes_top_country['country'], \n            y=athletes_top_country['count'], \n            edgecolor=(0,0,0),\n            linewidth = 1,\n            palette = sns.color_palette(\"ch:s=.25,rot=-.25\"))\nplt.xticks(rotation = 90)\nplt.xlabel('Top 20 countries', fontsize = 20)\nplt.ylabel('Count', fontsize = 20)\nplt.title('Number of athletes by country', fontsize = 30);","cc54ef6d":"count_discipline = athletedf.Discipline.value_counts()\ncount_discipline\n\nsns.set_style(\"ticks\")\n\nwordcloud = WordCloud(\n                    width=2000,\n                    height=1000, \n                    scale=1,\n                    normalize_plurals=False,\n                    repeat=False,\n                    random_state=42,\n                    background_color='white')\n\nwordcloud.generate_from_frequencies(frequencies = count_discipline)\nplt.figure(figsize=(17,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title('Number of athletes by sport', fontsize = 30)\nplt.show()","8eeee25c":"import warnings\nwarnings.filterwarnings('ignore') ","636f16d8":"# For medals data\nmedals = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Medals.xlsx', index_col = 0)\nmedals.head()","787aaa43":"medals.rename(columns={'Team\/NOC':'country'}, inplace=True)\ntop_15_countries = medals['country'][:15]\ntop_15_total = medals['Total'][:15]\n\ncolors = ['#429ad4','#38A3A5','#57CC99','#80ED99']\n\nfigure = plt.figure(figsize=(15,10))\nplt.pie(top_15_total, labels=top_15_countries,\n        colors = colors, shadow = False, startangle = 90, autopct='%1.2f%%')\n\nplt.title(' Pie Plot for Top 15 Countries - Rank by Total')\nplt.tight_layout()\nplt.show()","2980907d":"medals_final = medals.copy()\nmedals_final['rank'] = medals_final.index\nmedals_final = medals_final[medals_final['rank'] <= 30]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    y=medals_final.Gold,\n    x=medals_final.country,\n    name='Gold',\n    marker=dict(\n        color='rgb(255,215,0)',\n        line=dict(color='rgba(0, 0, 0, 0.5)')\n    )\n))\n\nfig.add_trace(go.Bar(\n    y=medals_final.Silver,\n    x=medals_final.country,\n    name='Silver',\n    marker=dict(\n        color='rgb(192,192,192)',\n        line=dict(color='rgba(0, 0, 0, 0.5)')\n    )\n))\n\nfig.add_trace(go.Bar(\n    y=medals_final.Bronze,\n    x=medals_final.country,\n    name='Bronze',\n    marker=dict(\n        color='rgb(176, 90, 5)',\n        line=dict(color='rgba(0, 0, 0, 0.5)')\n    )\n))\n\ntemplate = dict(layout=go.Layout(title_font=dict(family=\"Rockwell\", size=30)))\n\nfig.update_layout(\n                title = 'Medals by country <br><sup>Top 30 countries by rank<\/sup>',\n                template = template,\n                showlegend = False,\n                barmode='stack', \n                autosize=False,\n                width=680,\n                height=650,\n                margin=dict(\n                  l=30,\n                  r=30,\n                  b=180,\n                  t=100,\n                  pad=4\n                          )\n)\n\nfig.layout.xaxis.tickformat = ',.0%'\nfig.show()","d415395f":"from IPython.display import Image","c5879bd9":"fig = px.histogram(athletedf, x='NOC', title='Contingent of Athletes')\nfig.update_layout(height=500)\nfig.show()","247f9d7b":"# \/kaggle\/input\/charts\/team_vs_country.png\n# \/kaggle\/input\/charts\/Contingent.png\n# \/kaggle\/input\/charts\/coaches_vs_dicipline.png\n# \/kaggle\/input\/charts\/most_pop_team.png\nImage(filename='\/kaggle\/input\/charts\/Contingent.png')","a8e3e9bf":"teams = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Teams.xlsx')\nteams.head()","9b07f5e1":"fig = px.histogram(teams, x='Discipline',title='Most Popular Team Discipline ')\nfig.show()\nfig = px.histogram(teams, x='NOC', title='Teams Vs. Countries')\nfig.update_layout(height=500)\nfig.show()","438cc121":"Image(filename='\/kaggle\/input\/charts\/most_pop_team.png')","a85a2ad7":"Image(filename='\/kaggle\/input\/charts\/team_vs_country.png')","649cd27f":"coaches = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Coaches.xlsx')\ncoaches.head()","bef13e8c":"fig = px.histogram(coaches, x='Discipline', title='Coaches vs. Discipline')\nfig.show()","343c033a":"Image(filename='\/kaggle\/input\/charts\/coaches_vs_dicipline.png')","8ed238c2":"from sklearn.tree import DecisionTreeClassifier # Importing Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Importing train_test_split function\nfrom sklearn import metrics #Importing scikit-learn metrics module for accuracy calculation\nfrom sklearn.preprocessing import LabelEncoder #Importing Preprocessing for data preprocessing\nfrom sklearn.naive_bayes import GaussianNB #Importing Naive Bayes Classifier","1c6ea751":"medalbysportpath=\"\/kaggle\/input\/olympics-medals-by-sport\/medals_by_athletes.xlsx\"\nmedalbysport=pd.read_excel(medalbysportpath)\nmedalbysport.head()","52e33ca3":"le = LabelEncoder()\ntrain_trans= pd.DataFrame(columns=['Team','Sport','Medal'])\ntrain_trans.Team=le.fit_transform(medalbysport.Team)\ntrain_trans.Sport=le.fit_transform(medalbysport.Sport)\ntrain_trans.Medal=le.fit_transform(medalbysport.Medal)","32b01f38":"testdatapath='\/kaggle\/input\/test-data\/test_data.xlsx'\ntestdata=pd.read_excel(testdatapath)\ntestdata.head()","4e61f977":"training_col=['Team','Sport']\nX_train = train_trans[training_col]\ny_train = train_trans.Medal","b8e37e04":"test_trans= pd.DataFrame(columns=['Team','Sport','Medal'])\ntest_trans.Team=le.fit_transform(testdata.Team)\ntest_trans.Sport=le.fit_transform(testdata.Sport)\ntest_trans.Medal=le.fit_transform(testdata.Medal)","79e35fd3":"test_col=['Team','Sport']\nX_test = test_trans[test_col]\ny_test = test_trans.Medal","a93049fa":"clf_gini = DecisionTreeClassifier(criterion='gini')\nclf_gini = clf_gini.fit(X_train,y_train) \ny_pred = clf_gini.predict(X_test)","d5c3521f":"print(\"Number of mislabeled points out of a total %d points : %d\" %(X_test.shape[0], (y_test != y_pred).sum()))\nprint('Accuracy:',metrics.accuracy_score(y_test,y_pred)*100,'%')","3a80bc4a":"clf_infogain = DecisionTreeClassifier(criterion='entropy')\nclf_infogain = clf_infogain.fit(X_train,y_train) \ny_pred1 = clf_infogain.predict(X_test)","3928edc2":"print(\"Number of mislabeled points out of a total %d points : %d\" %(X_test.shape[0], (y_test != y_pred1).sum()))\nprint('Accuracy:',metrics.accuracy_score(y_test,y_pred1)*100,'%')","d1f95853":"gnb = GaussianNB()\ngnb = gnb.fit(X_train,y_train)\ny_pred_nb=gnb.predict(X_test)","3653e2f0":"print(\"Number of mislabeled points out of a total %d points : %d\" %(X_test.shape[0], (y_test != y_pred_nb).sum()))\nprint('Accuracy:',metrics.accuracy_score(y_test,y_pred_nb)*100,'%')","b25af368":"### Finding out the accuracy of classification by Naive Bayes","74386e5d":"## Importing Teams Data","31fa64f9":"## Applying Classification by Gini index","46c7bee8":"## Converting test data to fit into decision tree","0b2b9cc4":"# Applying classification to predict medal from team and sport","b716cd14":"# Machine Learning:","b25cde41":"Importing warnings library to remove warnings","99a7dc6e":"### Finding out the accuracy of Classification by gini index","15a4c932":"## Importing Libraries","4005d413":"## Loading Gender entries Data\n    This data Contains information about count of each gender by sports","ab0c9a93":"## Loading Atheletes Data","ef7ac4bf":"## Importing Coaches Data","d57eba3c":"### Importing Libraries for Classification","61ddfea8":"## Loading Medals Data","6b7872db":"### Loading Training Data","c854eb7e":"## Applying Classification by information gain","a9e8bf87":"### Finding out the accuracy of Classification by Information gain","5d075668":"### Loading testing data","091a264b":"# Data Visualization\nVisualizing every dataset","650fdb6e":"## Converting Training data to fit in the decision tree","2d7b7177":"## Applying classification by Naive Bayes"}}