{"cell_type":{"9407187d":"code","88bd8e3c":"code","53684d82":"code","6285db87":"code","c0a04299":"code","c9bbf384":"code","30c4af69":"code","a6275612":"code","2546b3b9":"code","19cc77b0":"code","fe048387":"code","55750e76":"code","eb475586":"code","40c94793":"code","3185b49c":"code","51434e11":"code","3bcb2689":"code","e779f88c":"code","521a3599":"code","849d1ba6":"code","088a45f0":"code","6fc3ea71":"code","2d993298":"code","e673ff87":"code","ac2ba37a":"code","de3ac181":"code","c6d33bee":"code","48daeaf6":"code","bd791a28":"code","b5162e20":"code","7132e3df":"code","4ac17ff5":"code","23f60d30":"code","71c14ade":"markdown","38919a72":"markdown","d9b7f92b":"markdown","6187e942":"markdown","df22628c":"markdown","a4b010b9":"markdown","d6071e5f":"markdown","2d3ac2c9":"markdown","5b9a04e0":"markdown","88dd9fee":"markdown","e2894a56":"markdown","fa306bc4":"markdown","72c729b0":"markdown","004ebc06":"markdown","1501e4e4":"markdown","7a6d6ab1":"markdown","7c2be357":"markdown","a39aea83":"markdown","586e585c":"markdown","e580d73c":"markdown","432ae38c":"markdown","7fe67981":"markdown"},"source":{"9407187d":"from fastai.tabular.all import * \nfrom fastai.test_utils import show_install\nfrom sklearn.ensemble import RandomForestRegressor\nshow_install()","88bd8e3c":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","53684d82":"np.random.seed(91)\ntorch.manual_seed(91)","6285db87":"path = Path('..\/input\/tabular-playground-series-dec-2021')\nPath.BASE_PATH = path\npath.ls()","c0a04299":"train_df = pd.read_csv(os.path.join(path, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(path, 'test.csv'))\nsample_submission = pd.read_csv(os.path.join(path, 'sample_submission.csv'))\n\ntrain_df.isna().sum().sum(), test_df.isna().sum().sum(), train_df.isnull().sum().sum(), test_df.isnull().sum().sum()","c9bbf384":"use_pseudo_lables = True\nduplicate_cover_types = True","30c4af69":"if use_pseudo_lables:\n    labels_df = pd.read_csv('..\/input\/tps12-pseudolabels\/tps12-pseudolabels_v2.csv')\n    train_df = pd.concat([train_df, labels_df], axis=0)\n    train_df.reset_index(drop=True)\n    labels_df.isna().sum().sum(), labels_df.isna().sum().sum()","a6275612":"train_df.describe().T","2546b3b9":"dep_var = 'Cover_Type'\nidx = train_df[train_df[dep_var] == 5].index\ntrain_df.drop(idx, axis = 0, inplace = True)\n\ntrain_df[dep_var] = train_df[dep_var].astype('category')","19cc77b0":"from sklearn.utils import shuffle\nif duplicate_cover_types:\n    print('Duplicate rows with Cover_Type 7')\n    seven_df  = shuffle( train_df.loc[train_df[dep_var] == 7], random_state=2520)\n\n    train_df = pd.concat([seven_df, train_df], axis=0)\n    del seven_df\n    train_df.reset_index(drop=True)","fe048387":"nunOfCoverTypes = len(train_df[dep_var].unique())\nnunOfCoverTypes, np.unique(train_df[dep_var], return_counts=True)","55750e76":"train_df.drop(columns=['Id', 'Soil_Type7', 'Soil_Type15'], inplace=True)\ntest_df.drop(columns=['Id', 'Soil_Type7', 'Soil_Type15'], inplace=True)","eb475586":"doPreprocessing=True    ","40c94793":"def clipAspectValues(df):\n    pd.options.mode.chained_assignment = None\n    df[\"Aspect\"][df[\"Aspect\"] < 0] += 360\n    df[\"Aspect\"][df[\"Aspect\"] > 359] -= 360\n    df[\"Aspect_mod_360\"] = df[\"Aspect\"] % 360","3185b49c":"def clipHillshadeValues(df):\n    \n    hill_features = [x for x in df.columns if x.startswith(\"Hillshade\")]\n    for col in hill_features:\n        df[col] = np.clip(df[col], a_min=0, a_max=255)\n        \n    df['Hillshade_Noon_is_Bright'] = (df['Hillshade_Noon'] == 255).astype(int)\n    df['Hillshade_9am_is_Zero'] = (df['Hillshade_9am'] == 0).astype(int)\n    df['hillshade_3pm_is_Zero'] = (df['Hillshade_3pm'] == 0).astype(int)","51434e11":"def calculateDistance(df):\n    df[\"Hydro_Dist_Eucl\"] = (df[\"Horizontal_Distance_To_Hydrology\"]**2 + \n                                df[\"Vertical_Distance_To_Hydrology\"]**2)**0.5\n    df[\"Hydro_Dist_Manh\"] = np.abs(df[\"Horizontal_Distance_To_Hydrology\"]) + np.abs(df[\"Vertical_Distance_To_Hydrology\"])","3bcb2689":"def addCountValues(df):\n    soil_features = [x for x in df.columns if x.startswith(\"Soil_Type\")]\n    df[\"Soil_Type_Count\"] = df[soil_features].sum(axis=1)\n    df[soil_features] = df[soil_features].astype('category')\n\n    \n    wilderness_features = [x for x in df.columns if x.startswith(\"Wilderness_Area\")]\n    df[\"Wilderness_Area_Count\"] = df[wilderness_features].sum(axis = 1)\n    \n    hillshade_features = [x for x in df.columns if x.startswith(\"Hillshade\")]\n    df[\"Hillshade_Count\"] = df[hillshade_features].sum(axis = 1)","e779f88c":"if doPreprocessing:\n    print(\"Let's start the preprocessing ..\")\n    clipAspectValues(train_df)\n    clipAspectValues(test_df)\n    clipHillshadeValues(train_df)\n    clipHillshadeValues(test_df)\n    calculateDistance(train_df)\n    calculateDistance(test_df)\n    addCountValues(train_df)\n    addCountValues(test_df)\n    print(\"Done ..\")\nelse:\n    print(\"No preprocessing ..\")","521a3599":"np.unique(train_df[dep_var], return_counts=True)","849d1ba6":"memory_usage_before = train_df.memory_usage().sum() \/ 1024**2\ntrain_df = df_shrink(train_df)\ntest_df = df_shrink(test_df)\nmemory_usage_after = train_df.memory_usage().sum() \/ 1024**2\n\nprint('Memory usage (MByte) before the shrinking:', memory_usage_before, ' , after shrinking: ', memory_usage_after)","088a45f0":"cont_vars, cat_vars = cont_cat_split(train_df, dep_var= dep_var,  max_card=10)\nlen(cat_vars), len(cont_vars), cat_vars, cont_vars, ","6fc3ea71":"for c in cat_vars:\n    print(c, train_df[c].nunique())","2d993298":"def getData(df, batchSize=1024, randomSplit=True, genSmallDataset=True):\n    \n  if genSmallDataset: \n    example_idx = np.random.choice(range(len(df)), 250000)\n    df = df.iloc[example_idx]\n  \n  splits = null\n  if randomSplit:  \n    splits = RandomSplitter(valid_pct=0.2, seed=718)(range_of(df))\n  else:\n    l = len(df)\n    splits = (L(np.arange(0, 0.8*l), use_list=True),\n              L(np.arange(0.8*l+1, l-1), use_list=True))\n  to_train = TabularPandas(df, \n                           [Categorify,  Normalize],\n                           cat_vars,\n                           cont_vars, \n                           splits=splits,  \n                           device = device,\n                           y_block=CategoryBlock(),\n                           y_names=dep_var) \n\n  return to_train.dataloaders(bs=batchSize)","e673ff87":"dls = getData(train_df, batchSize=4096, randomSplit=True, genSmallDataset=False)\nlen(dls.train), len(dls.valid), type(dls.train), dls.train.device","ac2ba37a":"my_config = tabular_config(ps=0.25, embed_p=0.25, use_bn=True, bn_cont=True, y_range=(1, 8))\nlearn = tabular_learner(dls,\n                        n_out = nunOfCoverTypes,\n                        layers=[512,512,128,128,128,64,64],\n                        # layers=[128, 64, 64, 16], for the best score!\n                        config=my_config,\n                        metrics=[accuracy])\nlearn.summary()","de3ac181":"learn.lr_find()","c6d33bee":"learn.fit_one_cycle(150, 2e-3, wd=0.01, cbs=SaveModelCallback(fname='kaggle_tps_dec2021', with_opt=True)) ","48daeaf6":"learn.load('kaggle_tps_dec2021')","bd791a28":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix(normalize=True)","b5162e20":"dlt = learn.dls.test_dl(test_df, bs=4096) \nnn_preds, _ = learn.get_preds(dl=dlt) \nnn_preds.min(), nn_preds.max(), nn_preds.shape","7132e3df":"xgb_preds = pd.read_parquet('..\/input\/reasonable-xgboost-model\/reasonable_xgb_test.pq')","4ac17ff5":"all_pred = (nn_preds.numpy() + xgb_preds.to_numpy())\n\nsample_submission[dep_var] = np.argmax(all_pred, axis=1) +1 \nsample_submission.to_csv(\"submission.csv\", index=False)\nsample_submission.head(10)","23f60d30":"!ls -la ","71c14ade":"The End. You can use this notebook and feel free to modify and expand the model to get a better result. Show me your recommendations and results!\ud83d\ude00","38919a72":"I use Pandas to import them and to verify, where null values are there or some values are missing. The result shows, that the data set is complete, so that no additional data preparation is needed.  ","d9b7f92b":"Let's calculate the Euclidean and the Manhattan distance based on column values for 'Horizontal_Distance_To_Hydrology' and 'Vertical_Distance_To_Hydrology'","6187e942":"I will use the test data frame to get the prediction for the submit. I can use a smaller batch, there are less entries in the test data frame.","df22628c":"let's look at the confusion matrix","a4b010b9":"I will use a maximum learning rate of 3e-3. \nStarting the learning process is quite easy, i will run for 100 epochs and i will save the model with the best, with the lowest validation lost value. The Fastai library offers the SaveModelCallback callback. You must specify the file name only. The option with_opt=True stores the values of the optimizer also.\nYou will find the new file under models\/kaggle_tps_dec2021.pth","d6071e5f":"The column 'Aspect' stores values of an angle in degree. These values are periodic value with a frequency of 360 degree. I can correct these values to the interval [-360, 360].","2d3ac2c9":"Let's load the prediction from a XGBoost model and combine them with our own predictions.","5b9a04e0":"I need a list of the column names, which are candidates for category variables and which are no candidates, also called continous variables. The Fastai library offers the function 'cont_cat_split' to do this for us. You can use the optional parameter 'max_card' to specify the maximum number of unique values a column can have for a category variable. I will use the value 10, which is sufficient for this data set. Both lists are used later, to create a corresponding  model. The category variables are mapped into embeddings, the continous variables are mapped to simple linear model. The value for max_cards specifies the ratio between the category and continous variables. Lower max_card values reduces the number of categroies and and increases the number of continous variables. The value max_card=1 produces an empty continous variable list. All columns of the data frame are handled as continous variables.\nThe parameter dep_var specifies our depended variable 'Cover_Type'. Its column will be skiped when the category and contious variables are determined.","88dd9fee":"To calculate the predictions for this competition, i will load the best model from the training process. Best model means the model where the validation loss has the lowest value.","e2894a56":"The Cover_Type is the depended value and should be predicted for the test data. I change the Cover_Type from int to category type. With this modification i was able to improve my public score from 0.93057 to 0.95542. The tabular model is unchanged for both runs. Let's see how many different values exists. I will delete the one row with Cover_Type=5. Later on i will combine the predictions of my neural network with some prediction from other other notebooks. These notebooks delete this row.","fa306bc4":"Let's define a function to duplicate the entries for a specific cover type in the training data frame. I will use the function for oversampling entries with the Cover_Type==4 and Cover_Type==6","72c729b0":"Let's see how the different cover types are distributed now","004ebc06":"We can specify whether pseudo lables are added and whether we want to duplicate the rows with specific Cover_Type's.","1501e4e4":"It seems, that the values of some columns should be preprocessed. The contian 'strange' value at the first glance. These columns are 'Aspect', 'Hillshade_9am', 'Hillshade_Noon' and 'Hillshade_3pm'. There some other discussion items and notebooks in this competition, where more details described. I will show you my implementation here. To control, whether a preprocessing should be done, i set the following flag doPreprocessing to 'True'\n","7a6d6ab1":"The next step is to create a data loader. The Fastai library offers a powerful helper called 'TabularPandas'. It needs the data frame, list of the category and continous variables, the depened variable and a splitter. The splitter divides the data set into two parts: one for the training and one for the validation and for internal optimization step in each epoch. Let's use a rate of 5 to 1. I need a dataloader also, which is created from this TabularPandas instance. The helper function getData does this job and allows you, to get a small dataloader if you want to do a quick prototyping of your model. ","7c2be357":"This notebook is a quick demonstration, who to use the Fastai v2 library for a Kaggle tabular competition. Fastai v2 is based on pytorch and allows you, to build a decent machine learning application. \nFor more information please visit the Fastai documentation: https:\/\/docs.fast.ai\/","a39aea83":"At least i create a learner pasing the dataloader into it. I use the default values for the internal layers as you can see in the reported summary. The model has two hidden layers with 200 and 100 elements as the default. You can change the structure of the hidden layer, using the paramter layers liks this 'layers=[128,64,64,16]'. The hidden layers uses a batch normalization and the ReLU activation function.","586e585c":"The data set is located in the follwoing directory ","e580d73c":"# The december competition with Fastai v2","432ae38c":"I will drop the column 'Id' fromm the data frames, because the values are unique and the don't add any usefull information to our model. The columns 'Soil_Type7' and 'Soil_type15' contain the value 0. Therefore they don't provide any new information to the model and i can drop them too.","7fe67981":"The values for the Hillshade_ columns shouldn't be outside the interval [0,255]. Therefore i will clip values to this interval."}}