{"cell_type":{"22a374c5":"code","9c04417c":"code","c28412f7":"code","666bf4ad":"code","2737f5dc":"code","68019d66":"code","ff24b518":"code","7bbe9036":"code","b0242964":"code","e45a863a":"code","a78a35d8":"code","b3906839":"code","1f39da67":"code","8c43e058":"code","6ced8749":"code","f41e2aae":"code","cff8eb87":"code","36893daa":"code","31be5120":"code","4be62360":"markdown","1b2bf332":"markdown","83585082":"markdown","9abfdf7c":"markdown","4a6733d8":"markdown"},"source":{"22a374c5":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAhFBMVEX\/\/\/8AAAD8\/Pz5+fns7Ozi4uKSkpLf399fX1\/29vby8vKmpqZ6enpUVFSBgYFjY2NsbGzn5+fV1dWMjIyzs7PMzMxycnKZmZlaWlq5ublLS0urq6uDg4Nvb29XV1dhYWEbGxvCwsItLS06OjpERESWlpYkJCQ\/Pz8QEBAwMDAgICAUFBQqmNr4AAAOCklEQVR4nO1aB5OjPBIVIhkkkkQGB4zjzP\/\/f9ctge39bu9qqm7Hs3XVb2pssvXo3BJjBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBC+DA5\/+MXxn3\/pDv64A+F+6S64xjW3fukn\/izwJ+GHXddlXyMIfy5fiXH2tbvMVfgTP8BwFYr71bEucrcXe9M0RV+6p5qm8Os\/8afBo6rz46\/pG7wQT6lwuXZyHCf8yl3xxXGaHyCIhsGLup\/b067vlZHNPxVvOcCfu43jHD17ABn6KH9zCo9F\/Hnby0Oi2XHE25XUxZG5rEzPdVc2o9ZWYdEqH0M2yosHouUofArHOcWWuNrnWbEKny\/2bBnDQde+Gji6MHwzYDxe2cGA5dBMwDMYYfgqhHFZy8LRuswNQx82kYQXqtCDE8jQiyI8zSM3MpIpwrBAxwpvAj68EC\/Em1wf7ofn\/QxDpu462HTp0DW9lzVa+3GqdxOO0yBIEqFa0MMczc6Xd9icRw8ZHpK2bXeJVvBVwIPyD8e5ZAq4nXaZfz46zr0E\/nxIbnBx2\/0MQ+b2lRfrTV8Waev3upJHWTKWhavN5Y6TOAZzxNWn3QQFFc6KjTKe5rzuN6xApnYHCI3rifLtDNFkwm2Yj1NTlkE9jvko7mIMmqIv03oxwxrH1rcHM1oc9hjgpxiARS0Btahgv+jwuqQFaTmdh9uXpMfXEvt4\/3lE2XvvZwj2d6oyOXXNuRlqIKkDbzMGeqtE7z0ZTi6P4StjVigc5CoHFKS9xDC8AqfCjQogMRdIyuOuRicLTrePQYeB+3R9O0MWloFSaaObTZhu5SRrKfJzv9X+mA4PhjOaK6hqywZwSjxWJ7DK0jKs0nQAhjfYdQbUbAgdN5RnB\/ei+vqqLBWLPNTq8vR+hiLP+6pvhnMyXLRq1LbXddrqTDdNG68MW2QIqrkBq52CLeqbkxsZmrCYAZFPENenjxEB5QcHnQqdmE0FQpG21hB\/gKGaj+3UDsMgdXXIZX4fgjS\/aLH5TEb2ZAhXbpDhdDMjvVmG19gEDcMQ3MlHjNG1+FwZuiw0DHPrZw4\/wRCcSbjPZRaUWt9FN5501bfiepWJHs\/swTBBGRqGQO1jHIrxtzK8QRS1MhSGITMM0Q6dXVOFlx9gaFxNI5JACFmft\/t8P2bzpmz0uJN6TbwsQ4YMM7CxT2WPoR3O4IwC2FQPO4RXBjZ4m14YVmDAEp4V\/ogMTfox5UCpy7NUDMdmlHkgm81u8tb08ZUh0DjCZgWKmKMD7VwPjFKjuRUw+I\/Q5SH40lPxwlBdMUIyJn\/CDk0WxiGRGZsBqJ0b0Ww2216Osj+vVfE\/ZejIrsHYmGH4cIzTUSZa4Dmn3eDn5L0yhKh4HbrNj3gaBAd\/r3Ugg77JRd1kEMSz7bCRj2J\/Zdiixzk+ExkTBRGBrZ74I8kRrHj1pd3jHqc08XBN6d\/GcJBSSNnITJdNUG\/kZpDJOV3T0gfDIM8C5tfz5bgTXQbbrMrnw2VTgmbCawGTrOTp43CSYKhRnudYhflZnhdMJMfDLKsx31dplnXvrw+7TSJkG7SpFkLLdNOPfXBv1nIP7SexrwKVmntFYeoII2LYgbqD+5AomAwoLgpMAmoJL8jFK+x1kYeHuW178C82Sv4cwDfkO\/A123oUTTrWbR\/08hQ+av0nQxydbXXAKF3D19oy6uvUNM2SxGHVES9KDpXVUoXhPYb2+ztR0b4+pXvIY+paQ2zcjKd63z7LebnEw6Uvg4N0bVuA8eVotYTAkNk8yVb\/fPXGz0\/+eNAbgbnpdQzqXm+bXNd5nZ9O6X16XmAYmuFF7vr6sXBflQ2+keGAWZu9Axh+2LT9zT7l98A3KuY8lK1MU7mrz7VOsuzlAsOw6AaMkPAXV8MwFbbJEU6D6MKHDG+TjyiQYRRPonv0bn4WMFb\/o4rLKgxO98Tzx2jO1Mt5YNiKC8Y+8IK8w5rP+WhAnLG05XAaq0VLLe6QwB27K6avzU\/1DV+BzqMIVCymqBtH4SnNmrF4uUCanNlAsWGloRnfrNvb8BeGjn7e8f6Wxe8Rj5W6l34zKaE6wbqz\/3ISs60ZsnIjLdwuOywWKhRcWk1b3L5ZLRUdYsJU+xZ0zQ1zvL9AijiEYzUlZyVLX6qmZJ3+hwyNk4R0ZocWBuxdSKbHybklsU2ox0\/LcOkKm1qXmf7M7S8gaBjuQiFTL++YEwYaGMYv54HhFV0oCK7dYz5aeDHoYRv5vhcXFcozP6wMjbPFzdj2jP8KhshxG58hDdtNrG9kwib9enaNh9hz603xazDHrqhn3Lo524OJFrfQdlSB4cXDumxh+MMsTQXVxEI2bKvYuQuSiQmX\/yPiww4YXHJ6upPP6mq+s8urDJl3nXdQMl4gs\/tbGGJU5infd0OnkaHQQVwW2OtfYtmatYEMd1BfpIWJeYUXoDupODYIF4afUONDVfGBDFHP\/xYthXAoZtGfpb4qNndpvlPpED6TxxeGLdhfj9tqqhTIVDIb7ZEh1viT6a7d\/zqGnt5PqU7TYVuxo9LBqVIiLx4UV4YZMEQ6Y+SG4Fcl9kwhk0sWhtgNvxYhWGot\/i6GUBkcEzEfpJzbIGz37TbLmmvfP2Y8X2TYY9PUORr\/4sPxWy4\/nIVhqFcLncq\/iyHj8vOY1LXoRyHGQaRiHNv+2BcvWnpafSmLbd\/TOSjToQD0wA67\/MpdJipSwyy2nsZxlxKRLdOUPzHBfXZ21b4Ly0Q3AbgZUY2B2B4vwVL78KkR3YMhd6dxm0vhwclCy1yWUSdENQgRuy7Y8HasOFeNGNBN4fdaV1ZV5Vma72e4d9pQTl6ngyDNpNZDJ8Zmmx6LZYoTP1y+MnxOAnNb0OOBMMs261zVUjDxlyoQNiOw0omDE\/6JYmO+SjXup6kWeTYmuqzHYcrE1HePAdrBWobLdDdqm8T8G2t940\/VooXAhrlrm2OdFWYR6PLkg33675dh6GSaeSDCVMv2nKRaZCWUgGrXrASXFRq5zW2WsbsrQ77U+Ooxc8\/X5SR8mS6HzSiZ7yq0We3yULvA5R3pwPGgyymsxFmMWStlU9WTrrrqWqw\/DkKJitDL1m7GIqqF4drFUHbgnEcosjAs3GU9APwVxfIyQYZLG2PtELyD4ua01ZnOZAB2qKUQqixlnW6zdbUT2GDZXz6OoGc7Jk+nEvugc59HwPDYG2AhpaptkgjTgIqa68fnpe9g9Ora1372IfmmPynQ0tsJrz8NYdKbycfmdPr+ErK57c6lH9bgRwOtYXPc6jRxyocRuY9Il2A8bOAQUDq58pGjgnBuNlbMoIVeu1bCxkIvED63HO0wfNwQ4Cb61hEbyt+NOHFufVLnmcy10Nsgl1k\/38s1cnHTwJ71fWWI7xwY9shwzhD759BxqnFvqDqmSFS2FskY5OcVyrDN4Ya2U4Yhfw9D4Jg7H\/OxT+RmW7ebPLkcnOixjI\/j7NIGrrr+huEyOrTDu4oKkOPBx8HDcaPEpoPjNJOKPizDyzJ1jl0B3NTvYAgcpsuc9OBm8jzbbbJNsunYs2XNqnIomIdzSv\/GEH2paBpl5MVxYu3Th0LxjtWXv7Y6MOxEx4UheJrqHFTqjQzNiifPD73CQ8SICANEHFm3B6NVMjFat\/t3hjwC9TWehkUoy4OvUSlRw3FGFM5ccBmOe3kwxGQueCdD67fLRDG2Nunt4qepr0zo5rFdTnP5vQxxiYxlaPzKIawxNUUFmC3Dow87Dy21DJuV4bfbYeyB6AqUnp8VuB2ZqRcrzmhZq4bLTWTH5X9mGD4ZfoaLDF2+yPCIwTBCGdp4iHbdvE2GXbJtsyBot0md7WQgZxjnoAPYk30Q7PIYJ5tma0om4vc4ItNr6t3UCCs8OLdwifhGS8EOj5h9Fosd\/sIQcxoonQUyxOql\/WaGPKrLYEhlHjaTCJROR1CvCqwuzMNgSiFmg436RzP80ESLDCfvY4Uz2fyMJa+L64F+YYg7aRH5OXarXhlOEZwZIh8MdypAa5soLp1vZuiGp\/NxDDoZnOvTsQsmKNpZWY1jlXVp4Dclg7wjhjDRlvpiPA22Qo8JdvP7CJ3lHaN7oF4Yhkarr8mH8aK\/MMSJcmeH08gFR9s+mcbW98qQN15TSncKgjhqwm6s0cmcJ62q81iVojQe4zlL3bPYdttAQU8RW5KaS\/zC8BayeL9mLubIxTDEnGYtmjEtUrbv\/+1ayuJggtqUeSXYJIxtqSfKkLmCiW6yFcC0u98TUWUbzdxYftzmhrdZCrYmQLy3bQFp6jxjTFDH6wmLh2F3ORwzs1Rhk8kY16pu93t4B2p\/wGULWKxE4\/XequDbZcjjl+nOZz1nVvbCKEwowZIvdtk65Rl7sQ0qdvrawxNRZIKn67qRyfZcL444W5+8liN4SewXpvzvTzsWueh19H8d4v\/KcGmhWEbuMxVly4z2I69hdvbd7Lu2XnQf\/ZdHqbc+7FEYrYnf89++KTPb4Vt\/W34nw6f0XLN2+blSG8X3oGgHvrwDd6l\/+VoqsidPviRBjyLZXGDfh5kdX6\/mEYSd3dSdzFTAt1L83bT6o1Px6Mfz9WPhyq0UnxLkr7P0vz6HsXW6\/9ng53Zi3GD88ab\/twDk2l1sDYmL4P8fAUobD\/n2XPC\/YzXDH8ezNfwzPeI3wH2urfn\/lCGBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIfxj\/AgDW4Qgmv8OTAAAAAElFTkSuQmCC',width=400,height=400)","9c04417c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c28412f7":"df = pd.read_csv(\"..\/input\/covid19-india-hospital-data\/Covid19_India_Data.csv\")\ndf.head()","666bf4ad":"fig_px = px.scatter_mapbox(df, lat=\"Latitude\", lon=\"Longitude\",\n                           hover_name=\"State\/UT\",\n                           zoom=11, height=300)\nfig_px.update_layout(mapbox_style=\"open-street-map\",\n                     margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig_px.show()","2737f5dc":"fig_px.update_traces(marker={\"size\": [10 for x in df]})","68019d66":"fig = px.bar(df,\n             y='District Hospitals',\n             x='Total Public Health Facility',\n             orientation='h',\n             color='Population',\n             title='India Hospital Data',\n             opacity=0.8,\n             color_discrete_sequence=px.colors.diverging.Armyrose,\n             template='plotly_dark'\n            )\nfig.update_xaxes(range=[0,35])\nfig.show()","ff24b518":"def plot_correlation_map( df ):\n    corr = df.corr()\n    _ , ax = plt.subplots( figsize =( 12 , 10 ) )\n    cmap = sns.diverging_palette( 220 , 10 , as_cmap = True )\n    _ = sns.heatmap(\n        corr, \n        cmap = cmap,\n        square=True, \n        cbar_kws={ 'shrink' : .9 }, \n        ax=ax, \n        annot = True, \n        annot_kws = { 'fontsize' : 12 }\n    )\n\nplot_correlation_map(df) ","7bbe9036":"df.hist()","b0242964":"sns.countplot(df[\"Government Laboratory\"])\nplt.xticks(rotation=90)\nplt.show()","e45a863a":"fig = px.bar(df[['Unnamed: 0', 'Public Beds']].sort_values('Public Beds', ascending=False), \n             y=\"Public Beds\", x=\"Unnamed: 0\", color='Unnamed: 0', \n             log_y=True, template='ggplot2', title='India Hospital Data')\nfig.show()","a78a35d8":"fig = px.line(df, x=\"Urban Hospitals\", y=\"Public Beds\", color_discrete_sequence=['green'], \n              title=\"India Hospital Data\")\nfig.show()","b3906839":"fig = px.bar(df, x= \"State\/UT\", y= \"Public Beds\", color_discrete_sequence=['crimson'],)\nfig.show()","1f39da67":"fig = px.bar(df, x= \"Sl.No.\", y= \"District Hospitals\", color_discrete_sequence=['sienna'],)\nfig.show()","8c43e058":"fig = px.bar(df, x= \"State\/UT\", y= \"Primary Health Center\")\nfig.show()","6ced8749":"cnt_srs = df['Urban Hosp Beds'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'viridis',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='India Hospital Data',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Urban Hosp Beds\")","f41e2aae":"fig = px.bar(df,\n             y='Unnamed: 0',\n             x='State\/UT',\n             orientation='h',\n             color='Public Beds',\n             title='India Hospital Data',\n             opacity=0.8,\n             color_discrete_sequence=px.colors.sequential.Pinkyl,\n             template='plotly_dark'\n            )\nfig.update_xaxes(range=[0,35])\nfig.show()","cff8eb87":"fig = px.pie(df, values=df['Unnamed: 0'], names=df['State\/UT'],\n             title='India Hospital Data',\n            )\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","36893daa":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        colormap='Set3',\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n\nshow_wordcloud(df['State\/UT'])","31be5120":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRY7vSIpFodVLaiCMYl9AZPfPBA5NyMpzGuGWiVzMuFpfsKsfDK&usqp=CAU',width=400,height=400)","4be62360":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","1b2bf332":"#Codes from Iv\u00e1n Hern\u00e1ndez Cazorla  https:\/\/www.kaggle.com\/ivanhercaz\/museums-in-tenerife-location-map","83585082":"The National Health Authority or the NHA is the apex body responsible for implementing India\u2019s flagship public health insurance\/assurance scheme \u2018Ayushman Bharat Pradhan Mantri Jan Arogya Yojana\u2019 (AB-PMJAY). NHA has been set-up to implement the PM-JAY at the national level. In the States, SHAs or State Health Agencies in the form of a society\/trust have been set up with full operational autonomy over the implementation of this scheme including extending the coverage to non SECC beneficiaries. https:\/\/en.wikipedia.org\/wiki\/National_Health_Authority","9abfdf7c":"#Codes from Santosh Kumar https:\/\/www.kaggle.com\/dssant85\/reason-for-heart-disease","4a6733d8":"fortisinternationalcare.com"}}