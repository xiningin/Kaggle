{"cell_type":{"84d2c731":"code","f70678fd":"code","dbe99271":"code","03ad364c":"code","af94b1b9":"code","1c76be8b":"code","ee0fb716":"code","74972a19":"code","77a27d1d":"code","6879d8f3":"code","aa453432":"code","14156b7c":"code","437c1655":"code","491cc67f":"code","6e10faa2":"code","b513cf59":"code","253e45b6":"code","3da29b11":"code","63e5fa69":"code","16681d2a":"code","93f04cb4":"code","5d4a7046":"code","b4767a4e":"code","7ad073af":"code","7386f7de":"code","30b311b0":"code","593db63b":"code","9cee3c1d":"code","32a7919e":"code","8003911d":"code","1be76fd5":"code","44ba9539":"code","b8884a13":"code","873a0d06":"code","f67e49f8":"code","55a33970":"code","bac9c565":"code","833e9790":"code","187c84cf":"code","9e880483":"code","0ce434da":"code","1b2fd04e":"code","fc16d79b":"markdown","e41230e5":"markdown","474565a3":"markdown","82e2db54":"markdown","2e40fd37":"markdown","1ad5410a":"markdown","1106f9ea":"markdown","dfff6ed3":"markdown","2c8b6ed7":"markdown","721cde06":"markdown"},"source":{"84d2c731":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f70678fd":"os.listdir(\"..\/input\")","dbe99271":"df_classes_trainable = pd.read_csv(\"..\/input\/classes-trainable.csv\")","03ad364c":"df_classes_trainable.describe()","af94b1b9":"df_classes_trainable.head()","1c76be8b":"df_classes_trainable.shape","ee0fb716":"df_train_human_labels = pd.read_csv(\"..\/input\/train_human_labels.csv\")","74972a19":"df_train_human_labels.describe()","77a27d1d":"df_train_human_labels.head()","6879d8f3":"df_train_human_labels.shape","aa453432":"df_stage_1_sample_submission = pd.read_csv(\"..\/input\/stage_1_sample_submission.csv\")","14156b7c":"df_stage_1_sample_submission.describe()","437c1655":"df_stage_1_sample_submission.head()","491cc67f":"df_stage_1_sample_submission.shape","6e10faa2":"df_tuning_labels = pd.read_csv(\"..\/input\/tuning_labels.csv\", header=None, names=['id', 'labels'])","b513cf59":"df_tuning_labels.describe()","253e45b6":"df_tuning_labels.head()","3da29b11":"df_tuning_labels.shape","63e5fa69":"df_stage_1_attributions = pd.read_csv(\"..\/input\/stage_1_attributions.csv\")","16681d2a":"df_stage_1_attributions.describe()","93f04cb4":"df_stage_1_attributions.head()","5d4a7046":"df_stage_1_attributions.shape","b4767a4e":"df_train_bounding_boxes = pd.read_csv(\"..\/input\/train_bounding_boxes.csv\")","7ad073af":"df_train_bounding_boxes.describe()","7386f7de":"df_train_bounding_boxes.head()","30b311b0":"df_train_bounding_boxes.shape","593db63b":"df_class_descriptions = pd.read_csv(\"..\/input\/class-descriptions.csv\")","9cee3c1d":"df_class_descriptions.describe()","32a7919e":"df_class_descriptions.description","8003911d":"df_class_descriptions.head()","1be76fd5":"df_class_descriptions.shape","44ba9539":"df_train_machine_labels = pd.read_csv(\"..\/input\/train_machine_labels.csv\")","b8884a13":"df_train_machine_labels.describe()","873a0d06":"df_train_machine_labels.head()","f67e49f8":"df_train_machine_labels.shape","55a33970":"import cv2\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nm_labels = df_tuning_labels.labels.str.split().tolist()\n#print(m_labels)\n# get the descriptions and translate\nmap_label_to_des = dict(zip(df_class_descriptions.label_code.values, df_class_descriptions.description.values))\nnum_of_imgs = 16\ndes_labels = []\nfor i in np.arange(num_of_imgs):\n    j = [map_label_to_des.get(item, item) for item in m_labels[i]]\n    des_labels.append(j)\n    \n# pull images and plot\nimg_list = ['..\/input\/stage_1_test_images\/{}.jpg'.format(id_) for id_ in df_tuning_labels.id.values]\nfig, ax = plt.subplots()\nfig.set_size_inches(25, 25)\nax.set_axis_off()\nfor n, (image, label) in enumerate(zip(img_list, des_labels)):\n    a = fig.add_subplot(num_of_imgs\/\/4, num_of_imgs\/\/4, n+1)\n    img = cv2.imread(image, 1)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.axis('off')\n    plt.title(label, fontsize=15)\n    plt.imshow(img)","bac9c565":"count = pd.DataFrame(df_tuning_labels['labels'].str.split().apply(lambda x: len(x)))\nprint(count)\n","833e9790":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.countplot(data=count, x='labels')\nplt.title(\"number of labels\")\n","187c84cf":"# tmp = df_tuning_labels[count['labels'] > 7]\n# tmp['labels'].apply(lambda x: x.split()).values","9e880483":"## make a dictionary file\nd={}\nfor i,j in zip(df_class_descriptions.label_code.values, df_class_descriptions.description.values):\n    d[i]=j","0ce434da":"d","1b2fd04e":"tmp = df_tuning_labels[count['labels'] > 6]\nmy_list = ['..\/input\/stage_1_test_images\/{}.jpg'.format(img_id) for img_id in tmp.id.values]\n\nax = plt.figure(figsize=(12, 12))\nfor num, i in enumerate(tmp['labels'].apply(lambda x: x.split()).values):\n    plt.subplot(3,2, 2*num + 1)\n    plt.axis('off')\n    #print(num)\n    file_name = my_list[num]\n    img = cv2.imread(file_name)\n    plt.imshow(img)\n    \n    names = [d[j] for j in i]\n    print(names)\n    \n    for n, i in enumerate(names):\n        plt.text(1500,10+n*100, i, fontsize = 14, horizontalalignment='right')\n        ","fc16d79b":"###  Display some Test Images","e41230e5":"### stage_1_attributions.csv","474565a3":"### tuning_labels.csv","82e2db54":"### class-descriptions.csv","2e40fd37":"### train_bounding_boxes.csv","1ad5410a":"### train_human_labels.csv","1106f9ea":"### classes-trainable.csv","dfff6ed3":"### stage_1_sample_submission.csv","2c8b6ed7":"### train_machine_labels.csv","721cde06":"## Images with more than 7 labels"}}