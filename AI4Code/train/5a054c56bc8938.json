{"cell_type":{"b10626ac":"code","553d2d8a":"code","43af1195":"code","ee6d4456":"code","ff871a85":"code","57efd1d7":"code","9ec088bc":"code","5c4c1280":"code","81d9b147":"code","831698ab":"code","afdb6c46":"code","d8b44907":"code","ec008b1d":"code","f861a961":"code","abe860aa":"code","d8454a34":"code","c3178de9":"code","9f225f79":"code","4255ceb4":"code","47c184b4":"code","06a26d1c":"code","e5ea192f":"code","95d926f0":"code","114e5527":"code","902f7dd5":"code","b56164ef":"code","1f41b67a":"code","dedc4ce4":"code","c15604c7":"code","9aacabfe":"markdown","032d7a16":"markdown","283c15bc":"markdown","446ce5b5":"markdown","b666c98d":"markdown","a90a4796":"markdown","a3cb266b":"markdown","8bae74fb":"markdown","237f2e79":"markdown","b3ce950b":"markdown","4a9cbb2c":"markdown","369622c0":"markdown","363f5567":"markdown","0e3249cd":"markdown"},"source":{"b10626ac":"import numpy as np\nimport pandas as pd\n\nimport os\nprint(os.listdir(\"..\/input\"))","553d2d8a":"INPUT_WIDTH = 19\nN_FEATURES = 22\n\n# taken from http:\/\/simaaron.github.io\/Estimating-rainfall-from-weather-radar-readings-using-recurrent-neural-networks\/\nTHRESHOLD = 73 ","43af1195":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df[train_df.columns[1:]] = train_df[train_df.columns[1:]].astype(np.float32)\ntrain_df.head(20)","ee6d4456":"train_ids = train_df[~np.isnan(train_df.Ref)].Id.unique()\ntrain_new = train_df[np.in1d(train_df.Id, train_ids)]\ndel train_df, train_ids\ntrain_new.head()","ff871a85":"train_new = train_new.fillna(0.0)\ntrain_new = train_new.reset_index(drop=True)\ntrain_new.head()","57efd1d7":"df_temp = pd.DataFrame(train_new.groupby('Id')['Expected'].mean()) # mean, or any value (the same for all)\nmeaningful_ids = np.array(df_temp[df_temp['Expected'] < THRESHOLD].index)\ndel df_temp\n\ntrain_final = train_new[np.in1d(train_new.Id, meaningful_ids)]\ndel train_new, meaningful_ids\ntrain_final.shape","9ec088bc":"train_gp = train_final.groupby(\"Id\")\ntrain_size = len(train_gp)\ndel train_final\n\nX_train = np.zeros((train_size, INPUT_WIDTH, N_FEATURES), dtype=np.float32)\ny_train = np.zeros(train_size, dtype=np.float32)\nseq_len_train = np.zeros(train_size, dtype=np.float32)\n\ni = 0\nfor _, group in train_gp:\n    X = group.values\n    seq_len = X.shape[0]\n    X_train[i,:seq_len,:] = X[:,1:23]\n    y_train[i] = X[0,23]\n    seq_len_train[i] = seq_len\n    i += 1\n    del X\n    \ndel train_gp\nX_train.shape, y_train.shape","5c4c1280":"test_df = pd.read_csv(\"..\/input\/test.csv\")\ntest_df[test_df.columns[1:]] = test_df[test_df.columns[1:]].astype(np.float32)\ntest_ids = np.array(test_df.Id.unique())\n\n# Convert all NaNs to zero\ntest_final = test_df.fillna(0.0)\ntest_final = test_final.reset_index(drop=True)\ndel test_df","81d9b147":"test_gp = test_final.groupby(\"Id\")\ntest_size = len(test_gp)\ndel test_final\n\nX_test = np.zeros((test_size, INPUT_WIDTH, N_FEATURES), dtype=np.float32)\nseq_len_test = np.zeros(test_size, dtype=np.float32)\n\ni = 0\nfor _, group in test_gp:\n    X = group.values\n    seq_len = X.shape[0]\n    X_test[i,:seq_len,:] = X[:,1:23]\n    seq_len_test[i] = seq_len\n    i += 1\n    del X\n    \ndel test_gp\nX_test.shape","831698ab":"from keras.layers import Input, Dense, CuDNNLSTM, AveragePooling1D, \\\nTimeDistributed, Flatten, Bidirectional\nfrom keras.models import Model","afdb6c46":"from keras.callbacks import EarlyStopping\nes_callback = EarlyStopping(monitor='val_loss', min_delta=0, patience=5)","d8b44907":"BATCH_SIZE = 1024\nN_EPOCHS = 50","ec008b1d":"def get_model_simple(shape=(19,22)):\n    inp = Input(shape)\n    x = CuDNNLSTM(64, return_sequences=False)(inp)\n    x = Dense(1)(x)\n\n    model = Model(inp, x)\n    return model","f861a961":"model_0 = get_model_simple((19,22))\nmodel_0.compile(optimizer='adadelta', loss='mae')\nmodel_0.summary()","abe860aa":"model_0.fit(X_train, y_train, \n            batch_size=BATCH_SIZE, epochs=N_EPOCHS, \n            validation_split=0.2, callbacks=[es_callback])","d8454a34":"y_pred_0 = model_0.predict(X_test)\nsubmission_0 = pd.DataFrame({'Id': test_ids, 'Expected': y_pred_0.reshape(-1)})\nsubmission_0.to_csv('submission_0.csv', index=False)","c3178de9":"def get_model_seq(shape=(19,22)):\n    inp = Input(shape)\n    x = CuDNNLSTM(64, return_sequences=True)(inp)\n    x = TimeDistributed(Dense(10))(x)\n    x = Flatten()(x)\n    x = Dense(1)(x)\n\n    model = Model(inp, x)\n    return model","9f225f79":"model_1 = get_model_seq((19,22))\nmodel_1.compile(optimizer='adadelta', loss='mae')\nmodel_1.summary()","4255ceb4":"model_1.fit(X_train, y_train, \n            batch_size=BATCH_SIZE, epochs=N_EPOCHS, \n            validation_split=0.2, callbacks=[es_callback])","47c184b4":"y_pred_1 = model_1.predict(X_test)\nsubmission_1 = pd.DataFrame({'Id': test_ids, 'Expected': y_pred_1.reshape(-1)})\nsubmission_1.to_csv('submission_1.csv', index=False)","06a26d1c":"def get_model_bilstm(shape=(19,22)):\n    inp = Input(shape)\n    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(inp)\n    x = TimeDistributed(Dense(10))(x)\n    x = Flatten()(x)\n    x = Dense(1)(x)\n    model = Model(inp, x)\n    return model","e5ea192f":"model_2 = get_model_bilstm((19,22))\nmodel_2.compile(optimizer='adadelta', loss='mae')\nmodel_2.summary()","95d926f0":"model_2.fit(X_train, y_train, \n            batch_size=BATCH_SIZE, epochs=N_EPOCHS, \n            validation_split=0.2, callbacks=[es_callback])","114e5527":"y_pred_2 = model_2.predict(X_test)\nsubmission_2 = pd.DataFrame({'Id': test_ids, 'Expected': y_pred_2.reshape(-1)})\nsubmission_2.to_csv('submission_2.csv', index=False)","902f7dd5":"def get_model_deep(shape=(19,22)):\n    inp = Input(shape)\n    x = Dense(16)(inp)\n    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\n    x = TimeDistributed(Dense(64))(x)\n    x = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x)\n    x = TimeDistributed(Dense(1))(x)\n    x = AveragePooling1D()(x)\n    x = Flatten()(x)\n    x = Dense(1)(x)\n\n    model = Model(inp, x)\n    return model","b56164ef":"model_3 = get_model_deep((19,22))\nmodel_3.compile(optimizer='adadelta', loss='mae')\nmodel_3.summary()","1f41b67a":"model_3.fit(X_train, y_train, \n            batch_size=BATCH_SIZE, epochs=N_EPOCHS, \n            validation_split=0.2, callbacks=[es_callback])","dedc4ce4":"y_pred_3 = model_3.predict(X_test)\nsubmission_3 = pd.DataFrame({'Id': test_ids, 'Expected': y_pred_3.reshape(-1)})\nsubmission_3.to_csv('submission_3.csv', index=False)","c15604c7":"y_pred_avg = (y_pred_0 + y_pred_1 + y_pred_2 + y_pred_3) \/ 4\nsubmission_avg = pd.DataFrame({'Id': test_ids, 'Expected': y_pred_avg.reshape(-1)})\nsubmission_avg.to_csv('submission_avg.csv', index=False)","9aacabfe":"### Grouping and padding into sequences","032d7a16":"## Simple LSTM + TimeDistributed\n\nLSTM model with `return_sequences=True` and `TimeDistributed` layer","283c15bc":"Define and exclude outliers from training set","446ce5b5":"## Deep model\n\nDeep NN inspired by the top solution","b666c98d":"# Data preprocessing","a90a4796":"## Simple LSTM","a3cb266b":"Remove ids with NaNs in `Ref` column for each observation (no data from radar)","8bae74fb":"# Models","237f2e79":"Replace NaN values with zeros","b3ce950b":"## Training set","4a9cbb2c":"## Bi-directional LSTM\n\nAdding Bi-directional wrapper around LSTM","369622c0":"## Test set","363f5567":"## Stacking\n\nSimple average over all models","0e3249cd":"Note: Data Preprocessing and Deep LSTM model are inspired by the top solution described here: \nhttp:\/\/simaaron.github.io\/Estimating-rainfall-from-weather-radar-readings-using-recurrent-neural-networks\/"}}