{"cell_type":{"c02e75b4":"code","eb72f06e":"code","e2cf6040":"code","ee36ad46":"code","c0fddea3":"code","68ab12eb":"code","4026a538":"code","5df798ca":"code","1611b966":"code","f575ab2b":"code","f2f2afb0":"code","10f052e1":"code","8f2a716e":"code","7564d34f":"code","25b67499":"code","90ea1459":"code","1003d651":"code","562d34b2":"code","d2c9dd01":"code","207aaee9":"code","4c457019":"code","3ba4161a":"code","67c05d59":"code","96dc85e9":"code","52843212":"code","5d4b206b":"code","5f48860f":"code","b354aba8":"code","ae850ffd":"code","afe7c95e":"code","1ac85a4f":"code","2a3f18f6":"code","32db270d":"code","2552bed2":"code","073641df":"code","3379bbb4":"code","041dd8d3":"code","12beaca9":"code","937eea20":"code","574de645":"code","1bfb2502":"code","5a0bcdad":"code","3cc8903b":"code","f1b9a4fd":"code","24eb2018":"code","d74505ba":"code","6c860441":"code","b746da2b":"code","45acecd1":"code","27b7da26":"code","a7d0ec79":"code","84ec389b":"code","0438442d":"code","b388a8c8":"code","9de5a782":"code","20ec869c":"code","f1f8e5ab":"code","7a14f028":"code","4333fce3":"code","f2a0eb2f":"code","b7b3c0cd":"code","18b8bd84":"code","48b846d2":"code","0d7f30cf":"code","ae842d84":"code","88b30cc3":"code","e9be1de6":"code","001799d2":"code","20ab86b9":"code","5da79dd7":"code","e717d1a9":"code","8ad44a3b":"code","dd370731":"code","ea6d957d":"code","1530c76e":"code","e78671ae":"code","a50d4728":"code","80442a55":"code","85df5da7":"code","cc532105":"code","577fa592":"code","f039f116":"code","71f609cc":"code","f7b3a148":"code","6e2939e6":"code","c8f88d51":"code","6da04261":"code","e826a918":"code","d7ce57d9":"code","1b0b9546":"code","5f98b280":"code","9582a7c0":"code","696ebc40":"code","d8678f95":"code","9d05713b":"code","21a59597":"code","5eb7bd25":"code","06f944d0":"code","c61ed06e":"code","676007f4":"code","84fd167a":"code","023af078":"code","c82a147f":"code","1460b7ad":"code","79e1a375":"code","db09aa12":"code","37cc6564":"code","9b585937":"code","b9a85773":"code","ef5d3e4f":"code","fb254318":"code","cf5b7e2c":"code","1fd4fcd1":"code","1306d9cb":"code","99759f5a":"code","f67c7a31":"code","2e723bf4":"code","2e32eb2d":"code","5a74fcca":"code","01e85653":"code","76b5f166":"code","8982ac6c":"code","381b332e":"code","fbafdc01":"code","89c958a4":"code","6c70c2c6":"code","12747093":"code","c973636f":"code","960aae42":"code","59b58488":"code","24ca1584":"code","312f113c":"code","843ababc":"code","1df7909f":"code","e2b51e78":"code","0d34963f":"code","a71377b1":"code","e232b01c":"code","fb9f61bc":"code","9c3a4072":"code","153f76f7":"code","030a858f":"code","f63c5a70":"code","2738859e":"code","5d8e10ae":"code","ca868574":"code","a0e44cc7":"code","cffc1db0":"code","39e56f5f":"code","2681c5c9":"code","5ac1f6e5":"code","73ec8611":"code","3b1b7819":"code","6e7199d8":"code","304ccf6e":"code","87c6f0d7":"code","081f4ebb":"code","24828e37":"code","37b16f69":"code","3c8a02bb":"code","ee92b8fb":"code","131e02b9":"code","dfd28fb5":"code","c2157fa9":"code","3d6c32ae":"code","29ef08f5":"code","7efcacc8":"code","87299451":"code","ebc237ac":"code","40241dff":"markdown","51d2ab35":"markdown","64bdb963":"markdown","3638a6a7":"markdown","2bbc5f59":"markdown","c3da2750":"markdown","5f8ff2a4":"markdown","f5f1f0c4":"markdown","195d28e7":"markdown","4bbd14da":"markdown","9bcecd8f":"markdown","db7155ff":"markdown","91b16fd8":"markdown","bc4349b2":"markdown","42f94215":"markdown","2dfcfdfa":"markdown","3d287ac8":"markdown"},"source":{"c02e75b4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eb72f06e":"df = pd.read_csv(\"..\/input\/Hotel Booking Cancellation.csv\")\ndf","e2cf6040":"df.shape","ee36ad46":"df.info()","c0fddea3":"df.isnull().sum()","68ab12eb":"categ_col = df.select_dtypes('object').columns.tolist()","4026a538":"fig, ax = plt.subplots(5,3,figsize=(20,20))\nfor i, j in zip(categ_col,ax.flatten()):\n    sns.countplot(df[i],ax=j)\nplt.show()","5df798ca":"df.describe()","1611b966":"df.describe(include='object')","f575ab2b":"numeric_col = df.select_dtypes(np.number).columns.tolist()","f2f2afb0":"fig, ax = plt.subplots(6,3,figsize=(40,40))\nfor i, j in zip(numeric_col,ax.flatten()):\n    sns.countplot(df[i],ax=j)\nplt.show()","10f052e1":"fig, ax = plt.subplots(6,3,figsize=(40,40))\nfor i, j in zip(numeric_col,ax.flatten()):\n    sns.boxplot(df[i],ax=j)\nplt.show()","8f2a716e":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),annot=True,cmap='Greens')","7564d34f":"Q1 = df.quantile(0.25)\n\n#calculate the third quartile\nQ3 = df.quantile(0.75)\n\n# The Interquartile Range (IQR) is defined as difference between the third and first quartile\n# calculate IQR\nIQR = Q3 - Q1\nprint(IQR)","25b67499":"df_outliers = df[((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]","90ea1459":"df.IsCanceled.value_counts().plot(kind='bar')","1003d651":"print('Percentage of class 0 (Not Canceled) :',df['IsCanceled'].value_counts()[0]*100\/df.shape[0])\nprint('Percentage of class 1 (Canceled):',df['IsCanceled'].value_counts()[1]*100\/df.shape[0])","562d34b2":"pd.crosstab(df['MarketSegment'],df['DistributionChannel'])","d2c9dd01":"pd.crosstab(df['IsRepeatedGuest'],df['PreviousCancellations'])","207aaee9":"pd.crosstab(df['IsRepeatedGuest'],df['PreviousBookingsNotCanceled'])","4c457019":"pd.crosstab(df['ReservationStatus'],df['IsCanceled'])","3ba4161a":"ct =pd.crosstab(df['CustomerType'],df['IsCanceled'])\nct.div(ct.sum(1), axis=0).sort_values(by=1,ascending=False)","67c05d59":"pd.crosstab(df['ReservedRoomType'],df['AssignedRoomType'])","96dc85e9":"ct =pd.crosstab(df['ReservedRoomType'],df['AssignedRoomType'])\nct.div(ct.sum(1), axis=0)","52843212":"pd.crosstab(df['DepositType'],df['AssignedRoomType'])","5d4b206b":"df['DepositType'].unique()","5f48860f":"df[df['DepositType'] == 'Non Refund     ']['Children'].value_counts()","b354aba8":"df['DepositType'].value_counts()","ae850ffd":"ct =pd.crosstab(df['DepositType'],df['IsCanceled'])\nct.div(ct.sum(1), axis=0).plot(kind='bar', stacked=True)","afe7c95e":"m = df['Agent'].value_counts()[(df['Agent'].value_counts()>400)].index\nm","1ac85a4f":"ct =pd.crosstab(df['Agent'],df['IsCanceled']).loc[m,:]\nct.div(ct.sum(1), axis=0).sort_values(by=1,ascending=False)","2a3f18f6":"df1 = df[df['AssignedRoomType'] != df['ReservedRoomType']]","32db270d":"ct =pd.crosstab(df1['ReservedRoomType'],df1['IsCanceled'])\nct.div(ct.sum(1), axis=0).sort_values(by=1,ascending=False)","2552bed2":"ct =pd.crosstab(df['AssignedRoomType'],df['IsCanceled'])\nct.div(ct.sum(1), axis=0).sort_values(by=1,ascending=False)","073641df":"ct =pd.crosstab(df['ArrivalDateMonth'],df['IsCanceled'])\nct.div(ct.sum(1), axis=0).sort_values(by=1,ascending=False)","3379bbb4":"m = df['Company'].value_counts()[(df['Company'].value_counts()>100)].index","041dd8d3":"pd.crosstab(df['Company'],df['MarketSegment']).loc[m,:]","12beaca9":"ct = pd.crosstab(df['Company'],df['IsCanceled']).loc[m,:]\nct.div(ct.sum(1), axis=0).sort_values(by=1,ascending=False).plot(kind='bar', stacked=True)","937eea20":"m = df['Country'].value_counts()[(df['Country'].value_counts()>400)].index\nm","574de645":"df['Country'][df['IsCanceled']==1].value_counts()[(df['Country'].value_counts()>400)].index","1bfb2502":"ct = pd.crosstab(df['Country'],df['IsCanceled']).loc[m,:]\nct.div(ct.sum(1), axis=0).sort_values(by=1,ascending=False)","5a0bcdad":"from scipy import stats\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.api import anova_lm","3cc8903b":"significant_col = []\ninsignificant_col = []\nfor i in categ_col:\n    for j in categ_col:\n        chisq, pval, dof, exp = stats.chi2_contingency(pd.crosstab(df[j],df[i]))\n        if pval < 0.00001:\n            significant_col.append((i,j))\n        else:\n            insignificant_col.append((i,j))\nprint('Significant Features:\\n',significant_col)\nprint('\\nInsignificant Features:\\n',insignificant_col)","f1b9a4fd":"significant_col = []\ninsignificant_col = []\nfor i in categ_col:\n    for j in categ_col:\n        chisq, pval, dof, exp = stats.chi2_contingency(pd.crosstab(df[j],df[i]))\n        print(i,j)\n        print(pval)\n        print('\\n')","24eb2018":"significant_col = []\ninsignificant_col = []\np_num = []\np_cat = []\nfor i in numeric_col:    \n    formula = i+' ~ IsCanceled'\n    model = ols(formula,df).fit()\n    ano = anova_lm(model, typ=2)\n    p_num.append(model.pvalues['IsCanceled'])\n    if model.pvalues['IsCanceled']< 0.05:\n        significant_col.append(i)\n    else:\n        insignificant_col.append(i)\nfor j in categ_col:\n    chisq, pval, dof, exp = stats.chi2_contingency(pd.crosstab(df[j],df.IsCanceled))\n    p_cat.append(pval)\n    if pval < 0.05:\n        significant_col.append(j)\n    else:\n        insignificant_col.append(j)\nprint('Significant Features:\\n',significant_col)\nprint('\\nInsignificant Features:\\n',insignificant_col)","d74505ba":"df_pval_num = pd.DataFrame({'Feature':numeric_col,'P value':p_num})\ndf_pval_num","6c860441":"df_pval_cat = pd.DataFrame({'Feature':categ_col,'P value':p_cat})\ndf_pval_cat","b746da2b":"def quarter(x):\n    if x in ['January','February','March',]:\n        return 1\n    elif x in ['April','May','June','July']:\n        return 2\n    elif x in ['August','September','October']:\n        return 3\n    else:\n        return 4","45acecd1":"df['Quarter'] = df['ArrivalDateMonth'].apply(quarter)","27b7da26":"df['TotalStayinNights'] = df['StaysInWeekNights']+df['StaysInWeekendNights']","a7d0ec79":"def adults(x):\n    if x == 0:\n        return 0\n    else:\n        return 1","84ec389b":"df['Adults\/Children'] = df['Children']+df['Babies']","0438442d":"df['Family\/Business'] = df['Adults\/Children'].apply(adults)","b388a8c8":"def country(x):\n    if x == 'PRT':\n        return 'Portugal'\n    elif x in ['CHE','BRA','ESP','IRL','ITA','USA']:\n        return 'High'\n    else:\n        return 'Low'","9de5a782":"def agent(x):\n    if x == 'NULL':\n        return 'No Agent'\n    elif x in ['96','240','242','298']:\n        return 'High'\n    elif x in ['250','314','241','6','40','243']: \n        return 'Medium' \n    else:\n        return 'Low'","20ec869c":"def company(x):\n    if x == '       NULL':\n        return 'No Company'\n    elif x in ['223','281','154']:\n        return 'Significant'\n    else:\n        return 'Others'","f1f8e5ab":"df['Company'] = df['Company'].apply(company)","7a14f028":"(df['Company'].value_counts()\/df['Company'].count())*100","4333fce3":"df['Agent'] = df['Agent'].apply(agent)","f2a0eb2f":"(df['Agent'].value_counts()\/df['Agent'].count())*100","b7b3c0cd":"df['Country'] = df['Country'].apply(country)","18b8bd84":"(df['Country'].value_counts()\/df['Country'].count())*100","48b846d2":"def monthlyquarter(x):\n    if x in range(1,8):\n        return 1\n    elif x in range(8,15):\n        return 2\n    elif x in range(15,22):\n        return 3\n    else:\n        return 4","0d7f30cf":"df['MonthlyQuarter'] = df['ArrivalDateDayOfMonth'].apply(monthlyquarter)","ae842d84":"df['Country'].unique()","88b30cc3":"df['Assigned\/Reserved'] = df.apply(lambda row: (row.AssignedRoomType != row.ReservedRoomType), axis = 1)","e9be1de6":"col = ['DistributionChannel','MarketSegment','ReservedRoomType','AssignedRoomType']\nfor j in col:\n    chisq, pval, dof, exp = stats.chi2_contingency(pd.crosstab(df[j],df.IsCanceled))\n    print(j)\n    print(pval)","001799d2":"df.drop(['ReservationStatus','ReservationStatusDate','MarketSegment','Adults\/Children','ReservedRoomType','ArrivalDateMonth','ArrivalDateWeekNumber','StaysInWeekNights','Children'], axis = 1,inplace=True)","20ab86b9":"cat_cols = df.select_dtypes('object').columns.tolist()","5da79dd7":"df_final = df.copy()","e717d1a9":"df_final.head()","8ad44a3b":"for col in cat_cols:\n    k=df_final[col].value_counts().index[:-1]\n    for cat in k:\n        name=col+'_'+cat\n        df_final[name]=(df_final[col]==cat).astype(int)\n    del df_final[col]\n    print(col)","dd370731":"df_final['TotalPreviousBookings'] = df_final['PreviousBookingsNotCanceled']+df_final['PreviousCancellations']","ea6d957d":"df_final[df_final['LeadTime'] > df['LeadTime'].quantile([0.99]).values[0]].shape","1530c76e":"df_final.columns","e78671ae":"df_final.shape","a50d4728":"from scipy.stats import zscore","80442a55":"X = df_final.drop('IsCanceled',axis=1)\ny = df_final['IsCanceled']\nX_scaled = X.apply(zscore)","85df5da7":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_scaled,y,test_size=0.3,random_state=5)","cc532105":"import warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()","577fa592":"logreg.fit(X_train,y_train)\ny_pred = logreg.predict(X_test)","f039f116":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","71f609cc":"conf_matrix=pd.DataFrame(data=cm,columns=['P_0','P_1'],index=['A_0','A_1'])\nconf_matrix","f7b3a148":"sns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","6e2939e6":"from sklearn.metrics import classification_report\nresult = classification_report(y_test,y_pred)\n\n# print the result\nprint(result)","c8f88d51":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_curve, auc","6da04261":"fpr, tpr, thresholds = roc_curve(y_test,y_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","e826a918":"from sklearn import metrics\ncols = ['Model', 'AUC Score', 'Precision Score', 'Recall Score','f1-score','Accuracy Score','Train Accuracy']\n\n# creating an empty dataframe of the colums\nresult_tabulation = pd.DataFrame(columns = cols)\n\n# compiling the required information\nLogistic_regression_metrics = pd.Series({'Model': \"Logistic regression \",\n                     'AUC Score' : roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, y_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, y_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n                 'Train Accuracy': logreg.score(X_train,y_train)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Logistic_regression_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","d7ce57d9":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree_classification = DecisionTreeClassifier(criterion='entropy')\n\n# train model\ndecision_tree = decision_tree_classification.fit(X_train, y_train)\n\n# predict the model using 'X_test'\ndecision_tree_pred = decision_tree.predict(X_test)","1b0b9546":"result = classification_report(y_test,decision_tree_pred)\n\n# print the result\nprint(result)","5f98b280":"fpr, tpr, thresholds = roc_curve(y_test,decision_tree_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","9582a7c0":"Decision_Tree_metrics = pd.Series({'Model': \"Decision Tree\",\n                     'AUC Score' : roc_auc_score(y_test, decision_tree_pred),\n                 'Precision Score': metrics.precision_score(y_test, decision_tree_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, decision_tree_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, decision_tree_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, decision_tree_pred),\n                 'Train Accuracy': decision_tree.score(X_train,y_train)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Decision_Tree_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","696ebc40":"from sklearn.model_selection import GridSearchCV\nmax_depth = np.arange(1,5,1)\nmin_samples_leaf = np.arange(1,50,10)\nmax_leaf_nodes = np.arange(10,20,1)\n\n# set of parameters to test\nparam_grid = {\"criterion\": [\"gini\", \"entropy\"],\n              \"max_depth\": max_depth,\n              \"min_samples_leaf\":min_samples_leaf\n              }","d8678f95":"decision_tree_Gridsearch = DecisionTreeClassifier()\ndecision_tree_Gridsearch = GridSearchCV(decision_tree_Gridsearch, param_grid, cv=10)\ndecision_tree_Gridsearch.fit(X_train, y_train)","9d05713b":"decision_tree_Gridsearch.best_params_","21a59597":"decision_tree_classification = DecisionTreeClassifier(criterion='entropy',\n max_depth=4,\n max_leaf_nodes=4,\n min_samples_leaf=1)\n\n# train model\ndecision_tree_Grid = decision_tree_classification.fit(X_train, y_train)\n\n# predict the model using 'X_test'\ndecision_tree_Grid_pred = decision_tree_Grid.predict(X_test)","5eb7bd25":"cm = confusion_matrix(y_test, decision_tree_Grid_pred)\n\n# set size of the plot\n#plt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","06f944d0":"result = classification_report(y_test,decision_tree_Grid_pred)\n\n# print the result\nprint(result)","c61ed06e":"fpr, tpr, thresholds = roc_curve(y_test,decision_tree_Grid_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","676007f4":"Decision_Tree_Grid_metrics = pd.Series({'Model': \"Decision Tree with Grid Search\",\n                     'AUC Score' : roc_auc_score(y_test, decision_tree_Grid_pred),\n                 'Precision Score': metrics.precision_score(y_test, decision_tree_Grid_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, decision_tree_Grid_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, decision_tree_Grid_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, decision_tree_Grid_pred),\n                 'Train Accuracy': decision_tree_Grid.score(X_train,y_train)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Decision_Tree_Grid_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","84fd167a":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X_train,y_train)\nrf_pred = rf.predict(X_test)","023af078":"cm = confusion_matrix(y_test, rf_pred)\n\n# label the confusion matrix  \nconf_matrix=pd.DataFrame(data=cm,columns=['P_0','P_1'],index=['A_0','A_1'])\n\n# set size of the plot\n#plt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","c82a147f":"result = classification_report(y_test,rf_pred)\n\n# print the result\nprint(result)","1460b7ad":"fpr, tpr, thresholds = roc_curve(y_test,rf_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","79e1a375":"Random_forest_metrics = pd.Series({'Model': \"Random Forest\",\n                     'AUC Score' : roc_auc_score(y_test, rf_pred),\n                 'Precision Score': metrics.precision_score(y_test, rf_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, rf_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, rf_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, rf_pred),\n                 'Train Accuracy': rf.score(X_train,y_train)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Random_forest_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","db09aa12":"feature_imp = pd.Series(rf.feature_importances_,index=X.columns).sort_values(ascending=False)\nplt.figure(figsize=(15,15))\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")","37cc6564":"rf_f = feature_imp[feature_imp>0.00730].index.tolist()\nrf_f","9b585937":"len(rf_f)","b9a85773":"c=rf_f\nlen(c)","ef5d3e4f":"c","fb254318":"d = {'Random Forest': sorted(rf_f), 'RFE': sorted(c)}\nfeat_sel = pd.DataFrame(d)\nfeat_sel","cf5b7e2c":"df_final.columns","1fd4fcd1":"df_final.shape","1306d9cb":"df['Meal'].value_counts()","99759f5a":"df_feat = df_final[c]\ndf_feat['Meal_HB'] = df_final['Meal_HB       ']\ndf_feat.shape","f67c7a31":"df_feat.columns","2e723bf4":"#Scalling\nX = df_feat\ny = df_final['IsCanceled']\nX_scaled = X.apply(zscore)","2e32eb2d":"X_train,X_test,y_train,y_test = train_test_split(X_scaled,y,test_size=0.2,random_state=5)","5a74fcca":"logreg = LogisticRegression()","01e85653":"logreg.fit(X_train,y_train)\ny_pred = logreg.predict(X_test)","76b5f166":"cm = confusion_matrix(y_test, y_pred)\n\n# set size of the plot\n#plt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","8982ac6c":"result = classification_report(y_test,y_pred)\n\n# print the result\nprint(result)","381b332e":"fpr, tpr, thresholds = roc_curve(y_test,y_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","fbafdc01":"cols = ['Model', 'AUC Score', 'Precision Score', 'Recall Score','f1-score','Accuracy Score','Train Accuracy']\n\n# creating an empty dataframe of the colums\nresult_tabulation1 = pd.DataFrame(columns = cols)\n\n# compiling the required information\nLogistic_regression_metrics = pd.Series({'Model': \"Logistic regression with feature selection\",\n                     'AUC Score' : roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, y_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, y_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n                 'Train Accuracy': logreg.score(X_train,y_train)})\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(Logistic_regression_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","89c958a4":"decision_tree_classification = DecisionTreeClassifier(criterion='entropy')\n\n# train model\ndecision_tree = decision_tree_classification.fit(X_train, y_train)\n\n# predict the model using 'X_test'\ndecision_tree_pred = decision_tree.predict(X_test)","6c70c2c6":"cm = confusion_matrix(y_test, decision_tree_pred)\n\n# set size of the plot\n#plt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","12747093":"result = classification_report(y_test,decision_tree_pred)\n\n# print the result\nprint(result)","c973636f":"fpr, tpr, thresholds = roc_curve(y_test,decision_tree_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","960aae42":"Decision_Tree_metrics = pd.Series({'Model': \"Decision Tree with feature selection\",\n                     'AUC Score' : roc_auc_score(y_test, decision_tree_pred),\n                 'Precision Score': metrics.precision_score(y_test, decision_tree_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, decision_tree_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, decision_tree_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, decision_tree_pred),\n                 'Train Accuracy': decision_tree.score(X_train,y_train)})\n\n\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(Decision_Tree_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","59b58488":"max_depth = np.arange(1,5,1)\nmin_samples_leaf = np.arange(1,50,10)\nmax_leaf_nodes = np.arange(10,20,1)\n\n# set of parameters to test\nparam_grid = {\"criterion\": [\"gini\", \"entropy\"],\n              \"max_depth\": max_depth,\n              \"min_samples_leaf\":min_samples_leaf,\n              \"max_leaf_nodes\": max_leaf_nodes}","24ca1584":"decision_tree_Gridsearch = DecisionTreeClassifier()\ndecision_tree_Gridsearch = GridSearchCV(decision_tree_Gridsearch, param_grid, cv=10)\ndecision_tree_Gridsearch.fit(X_train, y_train)","312f113c":"decision_tree_Gridsearch.best_params_","843ababc":"decision_tree_classification = DecisionTreeClassifier(criterion='entropy',\n max_depth=4,\n max_leaf_nodes=10,\n min_samples_leaf=1)\n\n# train model\ndecision_tree_Grid = decision_tree_classification.fit(X_train, y_train)\n\n# predict the model using 'X_test'\ndecision_tree_Grid_pred = decision_tree_Grid.predict(X_test)","1df7909f":"cm = confusion_matrix(y_test, decision_tree_Grid_pred)\n\n\n# set size of the plot\n#plt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","e2b51e78":"result = classification_report(y_test,decision_tree_Grid_pred)\n\n# print the result\nprint(result)","0d34963f":"fpr, tpr, thresholds = roc_curve(y_test,decision_tree_Grid_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","a71377b1":"Decision_Tree_Grid_metrics = pd.Series({'Model': \"Decision Tree with grid search\",\n                     'AUC Score' : roc_auc_score(y_test, decision_tree_Grid_pred),\n                 'Precision Score': metrics.precision_score(y_test, decision_tree_Grid_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, decision_tree_Grid_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, decision_tree_Grid_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, decision_tree_Grid_pred),\n                 'Train Accuracy': decision_tree_Grid.score(X_train,y_train)})\n\n\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(Decision_Tree_Grid_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","e232b01c":"random_forest = RandomForestClassifier()\n\n# train model\nrandom_forest.fit(X_train, y_train)\n\n# predict the model using 'X_test'\nrf_pred = random_forest.predict(X_test)","fb9f61bc":"cm = confusion_matrix(y_test, rf_pred)\n\n\n\n# set size of the plot\n#plt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","9c3a4072":"result = classification_report(y_test,rf_pred)\n\n# print the result\nprint(result)","153f76f7":"fpr, tpr, thresholds = roc_curve(y_test,rf_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","030a858f":"rf_metrics = pd.Series({'Model': \"Random Forest with selected features\",\n                     'AUC Score' : roc_auc_score(y_test, rf_pred),\n                 'Precision Score': metrics.precision_score(y_test, rf_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, rf_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, rf_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, rf_pred),\n                 'Train Accuracy': random_forest.score(X_train,y_train)})\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(rf_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","f63c5a70":"max_depth = np.arange(1,5,1)\nmin_samples_leaf = np.arange(1,50,10)\nmax_leaf_nodes = np.arange(10,18,1)\nn_estima = np.arange(100,200,25)\n\nparam_grid = {\"criterion\": [\"gini\", \"entropy\"],\n              \"max_depth\": max_depth,\n              \"min_samples_leaf\":min_samples_leaf,\n              \"max_leaf_nodes\": max_leaf_nodes,\n              \"n_estimators\":n_estima}","2738859e":"random_forest_Gridsearch = RandomForestClassifier()\nrandom_forest_Gridsearch = GridSearchCV(random_forest_Gridsearch, param_grid, cv=5)\nrandom_forest_Gridsearch.fit(X_train, y_train)","5d8e10ae":"random_forest_Gridsearch.best_params_","ca868574":"random_forest = RandomForestClassifier(criterion= 'gini',\n                                       max_depth=4,max_leaf_nodes=16,min_samples_leaf=11,n_estimators=125)\n\n# train model\nrandom_forest.fit(X_train, y_train)\n\n# predict the model using 'X_test'\nrf_pred = random_forest.predict(X_test)","a0e44cc7":"cm = confusion_matrix(y_test, rf_pred)\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","cffc1db0":"result = classification_report(y_test,rf_pred)\n\n# print the result\nprint(result)","39e56f5f":"roc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","2681c5c9":"rf_metrics = pd.Series({'Model': \"Random Forest with selected features and Grid Search\",\n                     'AUC Score' : roc_auc_score(y_test, rf_pred),\n                 'Precision Score': metrics.precision_score(y_test, rf_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, rf_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, rf_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, rf_pred),\n                 'Train Accuracy': random_forest.score(X_train,y_train)})\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(rf_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","5ac1f6e5":"from sklearn.ensemble import AdaBoostClassifier","73ec8611":"adaboost = AdaBoostClassifier()\n\n# train model\nadaboost.fit(X_train, y_train)\n\n# predict the model using 'X_test'\nada_pred = adaboost.predict(X_test)","3b1b7819":"cm = confusion_matrix(y_test, ada_pred)\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","6e7199d8":"result = classification_report(y_test,ada_pred)\n\n# print the result\nprint(result)","304ccf6e":"fpr, tpr, thresholds = roc_curve(y_test,ada_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","87c6f0d7":"rf_metrics = pd.Series({'Model': \"Ada Boost with selected features\",\n                     'AUC Score' : roc_auc_score(y_test, ada_pred),\n                 'Precision Score': metrics.precision_score(y_test, ada_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, ada_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, ada_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, ada_pred),\n                 'Train Accuracy': adaboost.score(X_train,y_train)})\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(rf_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","081f4ebb":"from xgboost import XGBClassifier","24828e37":"xgboost = XGBClassifier()\n\n# train model\nxgboost.fit(X_train, y_train)\n\n# predict the model using 'X_test'\nxg_pred = xgboost.predict(X_test)","37b16f69":"cm = confusion_matrix(y_test, xg_pred)\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","3c8a02bb":"result = classification_report(y_test,xg_pred)\n\n# print the result\nprint(result)","ee92b8fb":"fpr, tpr, thresholds = roc_curve(y_test,xg_pred)\nroc_auc = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","131e02b9":"rf_metrics = pd.Series({'Model': \"XG Boost with selected features\",\n                     'AUC Score' : roc_auc_score(y_test, xg_pred),\n                 'Precision Score': metrics.precision_score(y_test, xg_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, xg_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, xg_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, xg_pred),\n                 'Train Accuracy': xgboost.score(X_train,y_train)})\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(rf_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","dfd28fb5":"from vecstack import stacking","c2157fa9":"model = [AdaBoostClassifier(),\n        LogisticRegression(),\n         XGBClassifier()]","3d6c32ae":"S_train, S_test = stacking(model,\n                           X_train, y_train, X_test,\n                           \n                           regression=False,\n\n                           mode='oof_pred_bag',\n\n                           needs_proba=False,\n\n                           save_dir=None,\n\n                           n_folds=4,\n\n                           stratified=True,\n\n                           shuffle=True,\n                           \n                           random_state=10)","29ef08f5":"model=XGBClassifier()\nmodel = model.fit(S_train, y_train)\ny_pred = model.predict(S_test)","7efcacc8":"cm = confusion_matrix(y_test, y_pred)\n\n# plot a heatmap\nsns.heatmap(cm, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","87299451":"result = classification_report(y_test,y_pred)\n\n# print the result\nprint(result)","ebc237ac":"rf_metrics = pd.Series({'Model': \"Stacked Final Model\",\n                     'AUC Score' : roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred,average='weighted'),\n                 'Recall Score': metrics.recall_score(y_test, y_pred,average='weighted'),\n                 'f1-score':metrics.f1_score(y_test, y_pred,average='weighted'),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n                 'Train Accuracy': model.score(S_train,y_train)})\n\n# appending our result table\nresult_tabulation1 = result_tabulation1.append(rf_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation1","40241dff":"# XGboost ","51d2ab35":"# Ada Boost","64bdb963":"# Train Test Split","3638a6a7":"# Stacking","2bbc5f59":"# Statistical Analysis","c3da2750":"# Feature Engineering","5f8ff2a4":"# Model Building","f5f1f0c4":"# Random Forest Classifier","195d28e7":"# Grid Search Cross Validation","4bbd14da":"# Train Test Split","9bcecd8f":"# Random Forest","db7155ff":"# Decision Tree","91b16fd8":"# Feature Selection","bc4349b2":"# GridSearch Cross Validation","42f94215":"# Decision Tree","2dfcfdfa":"## Logistic Regression","3d287ac8":"# Model Building\n\n## Logistic Regression"}}