{"cell_type":{"63efd8c5":"code","7f80f010":"code","76da40b2":"code","42b21cd5":"code","6c79af8d":"code","3fe237ae":"code","93e6e4d3":"code","300df96d":"code","c0a1e672":"code","abbbfde1":"code","15adb805":"code","9959a320":"code","c03711c7":"code","36279f4c":"code","4165a7e0":"code","2cf701b0":"code","561f87ef":"code","65c8839d":"code","cbdb264b":"code","61189127":"code","d8525f0c":"code","bbd1f2c3":"code","4b7b553a":"code","493dd6e6":"code","eea69a3a":"markdown","b627341d":"markdown","272b6a60":"markdown","418d1eff":"markdown","bd2fab34":"markdown","62f6dbd3":"markdown","95225365":"markdown","8a10a50a":"markdown","6f31ea19":"markdown","4cf481ac":"markdown","fba2941a":"markdown"},"source":{"63efd8c5":"import os\nimport pandas as pd\nfrom zipfile import ZipFile\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer\nimport numpy as np\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder, OneHotEncoder\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor\nfrom sklearn.metrics import mean_squared_error","7f80f010":"DOWNLOAD_ROOT = 'datasets'\ndef fetch_data(path=DOWNLOAD_ROOT):\n    os.makedirs(path, exist_ok=True)\n    os.system('kaggle competitions download -c house-prices-advanced-regression-techniques -p ' + path)\n    zip_path = os.path.join(path, 'house-prices-advanced-regression-techniques.zip')\n    with ZipFile(zip_path, 'r') as zip:\n        zip.extractall(path=path)\n        print('successfully fetched datasets at ' + os.path.abspath(path))\n        \ndef load_trainset_testset(path=DOWNLOAD_ROOT):\n    train_path = os.path.join(path, 'train.csv')\n    test_path = os.path.join(path, 'test.csv')\n    \n    return pd.read_csv(train_path), pd.read_csv(test_path)","76da40b2":"fetch_data()\nhousing_train, housing_test = load_trainset_testset()\n\nhousing_train.head()","42b21cd5":"housing_train.info()\nhousing_train.describe()","6c79af8d":"# Id is completely irrelevant for our prediction\ntest_ids = housing_test['Id'].copy()\nhousing_train = housing_train.drop('Id', axis=1)\nhousing_test = housing_test.drop('Id', axis=1)\n\nhousing_train.hist(bins=50, figsize=(20,15))\nplt.show()","3fe237ae":"housing_train['YearRemodAdd'].hist(bins=50, figsize=(20,15))\nplt.show()","93e6e4d3":"housing_train = housing_train[housing_train['YearRemodAdd'] != 1950]\nhousing_train['YearRemodAdd'].hist(bins=50, figsize=(20,15))\nplt.show()","300df96d":"housing = housing_train.copy()\n\nhousing.plot(kind='scatter', x='YearBuilt', y='OverallQual', alpha=0.4, figsize=(10,7), c='SalePrice', cmap=plt.get_cmap('jet'), colorbar=True,)","c0a1e672":"corr_matrix = housing.corr()\ncorr_matrix['SalePrice'].sort_values(ascending=False)","abbbfde1":"housing['HasPool'] = housing['PoolArea'] != 0\nhousing['Bedrooms_per_room'] = housing['BedroomAbvGr']\/housing['TotRmsAbvGrd']\ncorr_matrix = housing.corr()\ncorr_matrix['SalePrice'].sort_values(ascending=False)","15adb805":"# Separating numeric attributes and non-numeric ones\nhousing = housing_train.drop('SalePrice', axis=1)\nhousing_labels = housing_train['SalePrice'].copy()\n\nhousing_num = housing.select_dtypes(include=[np.number])\nhousing_cat = housing.select_dtypes(include='object')","9959a320":"# Create cumstom transformer to add extra numeric attributes\nbedrooms_idex, rooms_idex, pool_area_idex = housing_num.columns.get_loc('BedroomAbvGr'), housing_num.columns.get_loc('TotRmsAbvGrd') ,housing_num.columns.get_loc('PoolArea')\n\nclass AttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        # none\n        return\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        bedrooms_per_room = X[:, bedrooms_idex] \/ X[:, rooms_idex]\n        has_pool = X[:, pool_area_idex] != 0\n        return np.c_[X, bedrooms_per_room, has_pool]","c03711c7":"num_attribs = list(housing_num)\ncat_attribs = list(housing_cat)","36279f4c":"# Create pipeline for processing numeric attributes\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('attribs_adder', AttributesAdder()),\n    ('std_scaler', StandardScaler())\n])","4165a7e0":"cat_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder(handle_unknown=\"ignore\"))\n])","2cf701b0":"full_pipeline = ColumnTransformer([\n    (\"num\", num_pipeline, num_attribs),\n    (\"cat\", cat_pipeline, cat_attribs),\n])\n\n\nhousing_prepared = full_pipeline.fit_transform(housing)\n","561f87ef":"def display_scores(scores):\n    print('scores:', scores)\n    print('Mean:', scores.mean())\n    print('standard deviation:', scores.std())","65c8839d":"lin_reg = LinearRegression()\nlin_reg.fit(X=housing_prepared, y=housing_labels)\n\nhousing_predictions = lin_reg.predict(housing_prepared)\nlin_mse = mean_squared_error(housing_labels, housing_predictions)\nprint(np.sqrt(lin_mse))\n\nscores = cross_val_score(lin_reg, housing_prepared, housing_labels, scoring='neg_mean_squared_error', cv=10)\nlin_rmse_scores = np.sqrt(-scores)\n\ndisplay_scores(lin_rmse_scores)","cbdb264b":"forest_reg = RandomForestRegressor()\nforest_reg.fit(housing_prepared, housing_labels)\n\nhousing_predictions = forest_reg.predict(housing_prepared)\nforest_mse = mean_squared_error(housing_labels, housing_predictions)\nprint(np.sqrt(forest_mse))\n\nscores = cross_val_score(forest_reg, housing_prepared, housing_labels, scoring='neg_mean_squared_error', cv=10)\nforest_rmse_scores = np.sqrt(-scores)\n\ndisplay_scores(forest_rmse_scores)","61189127":"ada_reg = AdaBoostRegressor(DecisionTreeRegressor(max_depth=4), n_estimators=300)\nada_reg.fit(housing_prepared, housing_labels)\n\nhousing_predictions = ada_reg.predict(housing_prepared)\nada_mse = mean_squared_error(housing_labels, housing_predictions)\nprint(np.sqrt(ada_mse))\n\nscores = cross_val_score(ada_reg, housing_prepared, housing_labels, scoring='neg_mean_squared_error', cv=10)\nada_rmse_scores = np.sqrt(-scores)\n\ndisplay_scores(ada_rmse_scores)","d8525f0c":"param_grid = [\n    {'n_estimators': [1, 10, 100], 'max_features': [2, 4, 6, 8]},\n    {'bootstrap': [False], 'n_estimators': [1, 10], 'max_features': [2,3,4]}\n]\n\nforest_reg = RandomForestRegressor()\n\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5, scoring='neg_mean_squared_error', return_train_score=True)\ngrid_search.fit(housing_prepared, housing_labels)","bbd1f2c3":"grid_search.best_params_","4b7b553a":"feature_importances = grid_search.best_estimator_.feature_importances_\nextra_attribs = ['Bedrooms_per_room', 'HasPool']\ncat_attribs = list(full_pipeline.named_transformers_['cat'].named_steps['encoder'].categories_[0])\nattributes = list(housing_num) + extra_attribs + cat_attribs\n\nsorted(zip(feature_importances, attributes), reverse=True)","493dd6e6":"final_model = grid_search.best_estimator_\n\nX_test = housing_test.copy()\n\nX_test_prep = full_pipeline.transform(X_test)\n\ny_test_predicted = final_model.predict(X_test_prep)\n\nsolution = pd.DataFrame({\"id\":test_ids, \"SalePrice\":y_test_predicted})\nsolution.to_csv(\"House_price.csv\", index = False)","eea69a3a":"## Select and Train a Model","b627341d":"$ \\begin{equation*}\n    RMSE(X,h) = \\sqrt{\\frac{1}{m} \\sum^m_{i=1} \\left( h(x^{(i)}) - y^{(i)} \\right)^2} \n    \\end{equation*} $","272b6a60":"## Solution","418d1eff":"# house prices advanced regression techniques\nWe are trying to estimate the prices of houses based on the infomation\nThe selected performance measure for this problem is Root Mean Square Error (RMSE), which is following;","bd2fab34":"In the future, the attribute RH can be dropped.","62f6dbd3":"## Exploratory Analysis","95225365":"## Evalution of my model\nUnfortunately, the testset does not include labels, thus unable to evaluate my model using testset.","8a10a50a":" My pipeline includes SimpleImputer from sklearn, AttributesAdder I just defined, and StandardScaler for feature scaling.","6f31ea19":"## Preparing data for algorithms","4cf481ac":"It can be seen that a new attribute Bedrooms_per_room is significantly more (linearly) correlated to sales price than just the number of bedrooms. Also, an attribut HasPool gives slightlly better correlation than pool area.","fba2941a":"The remodel date seems to be capped at 1950. It would be better to remove data with 1950 as YearRemodAdd."}}