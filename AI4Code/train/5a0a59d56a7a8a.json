{"cell_type":{"da6a4f49":"code","66e0aad0":"code","f919a8b1":"code","96c4c1a6":"code","39a29644":"code","45d5d986":"code","9cc54721":"code","585c74fd":"code","6681894a":"code","da421642":"code","5ff55a28":"code","3f7ee467":"code","2a8fe467":"code","6cae571c":"code","c3e29130":"code","60f0e669":"code","c92b9e63":"code","9993752b":"code","61dd8c90":"code","4be42867":"code","8bf12f7d":"code","fc0b69a4":"code","3cc77dce":"code","bbf4eb28":"markdown"},"source":{"da6a4f49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66e0aad0":"# Importing libraries \nimport sklearn as sk\nimport seaborn as sns\nimport matplotlib.pyplot as plt","f919a8b1":"df_job=pd.read_csv('\/kaggle\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\ndf_job.head(2)\n","96c4c1a6":"df_job.columns","39a29644":"df_job.isnull().sum()","45d5d986":"df_job.dtypes","9cc54721":"import sklearn_pandas","585c74fd":"df_job['department'] = df_job['department'].fillna(df_job['department'].mode()[0])","6681894a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn import feature_selection\nfrom sklearn.impute import SimpleImputer","da421642":"data_cat_imp=SimpleImputer(strategy=\"constant\",fill_value=\"Missing\")\ncat_imp_feature=[\"title\",\"location\",\"department\",\"salary_range\",\"company_profile\",\"description\",\"requirements\",\"benefits\",\n                 \"employment_type\",\"required_experience\",\"required_education\",\"industry\",\"function\"]\n\n# Filling the Numerical values through existing value\ndata_num_imp=SimpleImputer(strategy=\"constant\",fill_value=None)\nnum_imp_feature =[\"job_id\",\"telecommuting\",\"has_company_logo\",\"has_questions\",\"fraudulent\"]\n\n# Transforming into column\ndata_imp_trans=ColumnTransformer([(\"data_cat_imp\",data_cat_imp,cat_imp_feature),\n                                 (\"data_num_imp\",data_num_imp,num_imp_feature)])\n\n# Transforming and assigning the data\ntransformed_data=data_imp_trans.fit_transform(df_job)\ntransformed_data","5ff55a28":"#Transforming the data into data frame\ndf_job_transformed_data=pd.DataFrame(transformed_data,\n                         columns=[\"title\",\"location\",\"department\",\"salary_range\",\"company_profile\",\"description\",\n                                  \"requirements\",\"benefits\", \"employment_type\",\"required_experience\",\"required_education\",\n                                  \"industry\",\"function\",\"job_id\",\"telecommuting\",\"has_company_logo\",\"has_questions\",\n                                  \"fraudulent\"])","3f7ee467":"df_job_transformed_data.head(2)","2a8fe467":"df_job_transformed_data.isna().sum()","6cae571c":"X_trans = df_job_transformed_data.drop(\"fraudulent\",axis=1)\ny_trans = df_job_transformed_data.fraudulent\ny_trans=y_trans.astype('int')\n\n#shape(row,column) of features and label\nX_trans.shape, y_trans.shape,X_trans.columns","c3e29130":"X_trans","60f0e669":"# Instantation of One Hot Encoder for categorical data tarnsformatio into Numeric \none_hot=OneHotEncoder()\nclf_trans=ColumnTransformer([(\"one_hot\",one_hot,cat_imp_feature)],remainder=\"passthrough\")\nX_trans_fin=clf_trans.fit_transform(X_trans)\nnp.array(X_trans_fin)","c92b9e63":"#splitting the data into train and test with 23% reserved for testing and 77% for training\nX_train,X_test,y_train,y_test=train_test_split(X_trans_fin,y_trans,test_size=0.23, random_state=42)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","9993752b":"model_rfm=RandomForestClassifier()\n\n#fitting the data into model\nmodel_rfm.fit(X_train,y_train)","61dd8c90":"print(f\"Fake Job Random Forest Model Accuracy : {model_rfm.score(X_test,y_test)*100:.2f}%\")","4be42867":"y_pred_rfm=model_rfm.predict(X_test)\ny_pred_rfm","8bf12f7d":"from sklearn.metrics import classification_report","fc0b69a4":"#classification report\nprint(classification_report(y_test,y_pred_rfm))","3cc77dce":"feature_dict=dict(zip((df_job.columns),list(model_rfm.feature_importances_)))\nfeature_dict","bbf4eb28":"from sklearn.ensemble import RandomForestClassifier"}}