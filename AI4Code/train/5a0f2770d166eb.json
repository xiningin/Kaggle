{"cell_type":{"53b49604":"code","bd496b12":"code","0d2d12c8":"code","8255181e":"code","2f9262dd":"code","c33127eb":"code","bcd4f1e1":"code","9929c1d9":"code","8d556af2":"code","2ccc0de5":"code","583f9e7e":"code","8a9b9b75":"code","69ae25f2":"code","71ca1116":"code","f0fa19c0":"code","78f939aa":"code","5fb0d935":"code","bd8ef15f":"code","0a8cf1a8":"code","ee263c9b":"code","67c1f5a3":"code","b37d766c":"code","d736385b":"code","0975ba01":"code","b26192a2":"code","153a4d9a":"code","f106963a":"code","6ae3f185":"code","b5fa4f24":"code","56ea3982":"code","cde8fbef":"code","120b9f69":"code","c52afbfe":"code","b33642e2":"code","eb5d8620":"code","921f73d0":"code","8901cd74":"code","ca74c22a":"code","b528c59d":"code","d048215d":"code","40fbef1a":"code","b3cffb66":"code","2a0998f5":"code","e441eedc":"code","037f5942":"code","028730ea":"code","647bbace":"code","442d908d":"code","5a3888cc":"markdown","44dacd55":"markdown","ded3c280":"markdown","ab1bb2b5":"markdown","45efb469":"markdown","89a6bc9c":"markdown","9d14806b":"markdown","36c993d5":"markdown","9d0f5308":"markdown","6f8a8437":"markdown","b66114d9":"markdown","634be74f":"markdown","fe6672cc":"markdown","c29451d6":"markdown","8224e105":"markdown","6e239a4f":"markdown","250ea7f7":"markdown","e64ae458":"markdown","e432f33e":"markdown","119ad99b":"markdown","2528568c":"markdown","22e5bbdf":"markdown","75d61120":"markdown","43fe0aef":"markdown","48038e01":"markdown","86b9d213":"markdown","1978bfe3":"markdown","c157bc91":"markdown","2b402f18":"markdown"},"source":{"53b49604":"#Importing essential libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\n\n# Applying matplotlib magic word and seaborn style\n%matplotlib inline         \nplt.style.use('seaborn')","bd496b12":"# Loading the movies data\ndata1 = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv', encoding='utf-8')     # To deal with any non-English characters\n\n#Inspecting the first six rows\ndata1.head()","0d2d12c8":"# For the purposes of exploring the dataset, filtering the below columns:\n# budget, id, original_title, popularity, release_date, revenue, production companies, production countries, genres,vote \n\n# Filtering and re-ordering the above columns\nmovies_data = data1[['id', 'original_title','release_date','budget', 'revenue','production_companies','production_countries','genres','popularity','vote_average']].copy()\n\n# Inspecting the first 6 observations\nmovies_data.head()","8255181e":"# Printing data info\nprint(movies_data.info())","2f9262dd":"# Converting release date to date type\nmovies_data['release_date'] = pd.to_datetime(movies_data['release_date'])","c33127eb":"# Checking any duplicate values. No duplicate rows identified\nmovies_data[movies_data.duplicated()]","bcd4f1e1":"# Printing null\/missing values per column\nmovies_data.isnull().sum()","9929c1d9":"# Checking the null value\nmovies_data[movies_data.isnull().any(axis=1)]","8d556af2":"# It appears there may be other blank variables and NaT values. Checking the column wise totals if they are replaced by nan.\nmovies_data.replace(['?','', 'NaT','NA','N\/A','None',0,0.0,'[]'], np.nan).isnull().sum()","2ccc0de5":"# Passing a function to extract all values from columns with dictionary lists.\n\nimport ast  # To use literal eval\n\ndef extract_json(col):\n    catg = ''\n    counter = 0\n    lst = ast.literal_eval(col)\n    for dic in lst:\n        catg += dic['name']\n        counter += 1 \n        if counter < len(lst):\n            catg += '|'\n    return catg\n\n# Noted considerable movies have multiple production companies \n# Extracting production company name from production companies column. \nmovies_data['production_companies'] = movies_data['production_companies'].apply(extract_json)","583f9e7e":"# Passing a function to extract the first value from columns with the dictionary list.\ndef extract_first(col):\n    catg = ''\n    lst = ast.literal_eval(col)\n    for dic in lst:\n        catg += dic['name']\n        return catg\n    \n# Adding a column for primary country from the production countries column as it seems the first country name is the primary production country    \nmovies_data['country'] = movies_data['production_countries'].apply(extract_first)\n\n# Adding a column for primary genre as it seems the first genre is the primary genre for the movie\nmovies_data['genre'] = movies_data['genres'].apply(extract_first)","8a9b9b75":"# Re-arranging and renaming columns and printing the first six rows\ncol_names = ['id', 'original_title', 'release_date', 'budget', 'revenue','production_companies','country', 'genre', 'popularity','vote_average']\n\nmovies_data = movies_data[col_names].copy()\n\n# Renaming id to movie_id\nmovies_data.rename(columns={'id':'movie_id'},inplace=True)\n\n# Printing first six rows\nmovies_data.head()","69ae25f2":"# Replacing missing values including 0 with nan. As this is an exploratory excercise, nan values have not been dropped.\nmovies_data.replace(['?','', 'NaT','NA','N\/A','None','[]',0], np.nan, inplace=True)\n\n# Printing null values per column and shape\nprint('Null values per column:\\n', movies_data.isnull().sum())\nprint('Shape of the data frame:', movies_data.shape)","71ca1116":"# Loading the credit data\ncredits_data = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv', encoding='utf-8')\n\n#Inspecting the first six observations\ncredits_data.head()","f0fa19c0":"# Printing data info\ncredits_data.info()","78f939aa":"# Checking for any duplicate values\n# No duplicate rows identified\n\nduplicate_rows = credits_data[credits_data.duplicated()]\nduplicate_rows","5fb0d935":"# Printing null values per column\n# No null values identified\ncredits_data.isnull().sum()","bd8ef15f":"# Checking total nan\ncredits_data.replace(['?','', 'NaT','NA','N\/A','None',0,'[]'], np.nan).isnull().sum()","0a8cf1a8":"# Extracting leading actor name which is the first name in the first dictionary of cast column \ncredits_data['leading_actor'] = credits_data['cast'].apply(extract_first)","ee263c9b":"# Adding gender to categorize lead actor by gender [1: female, 2: male]\n# Passing a function to extract gender from the first dictionary\n\ndef extract_gender(col):\n    g_val = 0\n    lst = ast.literal_eval(col)\n    for dic in lst:\n        g_val += dic['gender']\n        return (g_val)\n\n# Converting to category dtype and assigning category codes [1: female, 2: male]  \ncredits_data['actor_gender'] = credits_data['cast'].apply(extract_gender).astype('category').cat.codes","67c1f5a3":"# Some movies have multiple directors per movie. Selecting the first director for simpler analysis\n\n# To extract first directors\ndef extract_director(col):\n    catg = ''\n    counter = 0\n    lst = ast.literal_eval(col)\n    for dic in lst:\n        if dic['job'] == \"Director\":\n            catg += dic['name']\n            return catg\n\ncredits_data['director'] = credits_data['crew'].apply(extract_director)","b37d766c":"# Replacing missing values including 0 with nan and printing total number of nan per column\ncredits_data.replace(['?','', 'NaT','NA','N\/A','[]',0], np.nan, inplace=True)\nprint('Null values per column:\\n', credits_data.isnull().sum())\nprint('Shape of the data frame:', credits_data.shape)","d736385b":"# Filtering  columns and printing the first six rows\ncol_names = ['movie_id', 'leading_actor', 'actor_gender', 'director']\ncredits_data = credits_data[col_names].copy()\ncredits_data.head()","0975ba01":"# Joining lead actor, actor gender and director columns to movies_data and verifying its shape\n\nprint('Shape of movies_data:',movies_data.shape)\nprint('Shape of credits_data:',credits_data.shape)\n\nmovies_data = pd.merge(movies_data, credits_data, on='movie_id', how='left' )\nprint('Shape of movies_data after merging the tables:',movies_data.shape)","b26192a2":"# Printing the first six rows of the dataframe\nmovies_data.head()","153a4d9a":"#Providing summary statistics for the data set\nmovies_data.describe()","f106963a":"print('Highest revenue: \\n',movies_data[['original_title','revenue']][movies_data['revenue'] == movies_data['revenue'].max()])\nprint()\nprint('Lowest revenue: \\n',movies_data[['original_title','revenue']][movies_data['revenue'] == movies_data['revenue'].min()])","6ae3f185":"print('Highest budget: \\n', movies_data[['original_title','budget']][movies_data['budget'] == movies_data['budget'].max()])\nprint()\nprint('Lowest budget: \\n',movies_data[['original_title','budget']][movies_data['budget'] == movies_data['budget'].min()])","b5fa4f24":"print('Most popular movie: \\n',movies_data[['original_title','popularity']][movies_data['popularity'] == movies_data['popularity'].max()])","56ea3982":"# Adding column for year of release\nmovies_data['release_year'] = movies_data['release_date'].dt.year\n\n# Movie with highest revenue\nprint('Highest revenue: \\n',movies_data[['original_title','revenue']][movies_data['release_year']==2016].dropna().sort_values(by='revenue', ascending=False).head(1))","cde8fbef":"# Movie with lowest revenue\nprint('Lowest revenue: \\n',movies_data[['original_title','revenue']][movies_data['release_year']==2016].dropna().sort_values(by='revenue').head(1))","120b9f69":"# Leading female actors\nmovies_data['leading_actor'][movies_data['actor_gender']==1].value_counts().head(10)","c52afbfe":"# Leading male actors\nmovies_data['leading_actor'][movies_data['actor_gender']==2].value_counts().head(10)","b33642e2":"movies_data[['leading_actor','revenue']].groupby(movies_data['leading_actor']).agg('sum').sort_values(by='revenue',ascending=False).head(10)","eb5d8620":"movies_data[['director','revenue']].groupby(movies_data['director']).agg('sum').sort_values(by='revenue',ascending=False).head(10)","921f73d0":"movies_data[['movie_id','original_title','genre','popularity','production_companies']].loc[movies_data.groupby(['genre'])['popularity'].idxmax()]","8901cd74":"movies_data[['movie_id','original_title','genre','revenue','production_companies']].loc[movies_data.groupby(['genre'])['revenue'].idxmax().dropna()]","ca74c22a":"# Plotting Correlation matrix\nimport scikitplot as skplt\n\n#Dropping rows with nan\nplot_df = movies_data.dropna()\n\n# Numerical column names\ncol_names = ['budget', 'revenue', 'popularity', 'vote_average']\n\n# Filtering data frame with numerical columns\nplot_df_std = plot_df[col_names]\n\n#Standardizing the dataset\nfrom sklearn.preprocessing import StandardScaler\nplot_df_std = StandardScaler().fit_transform(plot_df_std)\n\n# Creating a dataframe with standardized columns\nplot_df_std = pd.DataFrame(plot_df_std, columns=col_names, index=plot_df.index)\n\n# Plotting correlation matrix\nplot_df_std.corr(method='pearson')","b528c59d":"# Budget vs revenue\nplt.scatter(plot_df['budget'],plot_df['revenue'], alpha=0.6);\nplt.xlabel('Budget')\nplt.ylabel('Revenue')\nplt.title('Budget vs Revenue');","d048215d":"# Budget vs popularity\nplt.scatter(plot_df['revenue'],plot_df['popularity'], alpha=0.6);\nplt.xlabel('Budget')\nplt.ylabel('Popularity')\nplt.title('Budget vs Popularity');","40fbef1a":"# Calculating mean for revenue\nrevenue_mean = movies_data['revenue'].dropna().mean()\n\n# Filtering leading actors and directors for a movies with above average revenues\nrevenue_df = movies_data[['leading_actor','director','revenue']][movies_data['revenue'] > revenue_mean]\n\n# Printing the shape of the dataframe\nrevenue_df.shape","b3cffb66":"# Grouping leading actors and filtering actors who have above average revenues more than five times  \nla_group = revenue_df[['leading_actor','revenue']].groupby(revenue_df['leading_actor'])\nsize1 = la_group.size() \nsize1[size1>5]","2a0998f5":"# Proportion of leading actors who have greater than five above average revenue movies\nsize1[size1>5].sum()\/len(revenue_df)","e441eedc":"# Grouping directors and filtering directors who have above average revenues more than five times  \nd_group = revenue_df[['director','revenue']].groupby(revenue_df['director'])\nsize2 = d_group.size() \nsize2[size2>5]","037f5942":"# Proportion of directors who have greater than five above average revenue movies\nsize2[size2>5].sum()\/len(revenue_df)","028730ea":"# Adding column for month of release to the dataframe with dropped nan values\n\npd.options.mode.chained_assignment = None    # To silence SettingWithCopyWarning\n\nimport calendar\n# Splitting the month of relase date column and adding a new column to data frame\nplot_df.loc[:,'release_month'] = plot_df['release_date'].dt.month\n\n# Encoding the months with calender month abbreviations\nmonth_dict = dict(enumerate(calendar.month_abbr))\nplot_df.loc[:,'release_month'] = plot_df['release_month'].map(month_dict)\nplot_df.head()\n","647bbace":"# Box-plots for revenue by month\norder_list = calendar.month_abbr # List of months in order\n\nsns.boxplot(y='revenue', x = 'release_month', data=plot_df,order=order_list[1:13])\nplt.xlabel('Month')\nplt.ylabel('Revenue')\nplt.title('Revenue vs Release month');","442d908d":"# Box-plots for revenue by genre\n# Adding a horizontal line for mean revenue value\n\n# Calculating mean for revenue \nrev_mean = plot_df['revenue'].mean()\n\nsns.boxplot(y='revenue', x = 'genre', data=plot_df).axhline(rev_mean, color='red', alpha=0.6) \nplt.xlabel('Genre')\nplt.ylabel('Revenue')\nplt.title('Revenue vs Genre')\nplt.xticks(rotation=45,ha='right');     # To rotate x-axis ticks  ","5a3888cc":"7. List the top ten directors in terms of their aggregate revenue?","44dacd55":"\n# Project: TMDB Data Analysis Excercise\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","ded3c280":"## Credits data","ab1bb2b5":"The proportion of leading actors who have greater than five above average revenue movies is approximately 42%, which is significant.","45efb469":"<a id='wrangling'><\/a>\n# Data Wrangling\n\n## Movies data\n","89a6bc9c":"6. List the top ten actors in terms of their aggregate movie revenues?","9d14806b":"1. Which movie has the highest and the lowest revenue ?","36c993d5":"The proportion of directors who have greater than five above average revenue movies is approximately 19%.","9d0f5308":"From the plot and the correlation matrix, there appears to be a weak to moderate linear relation between budget and popularity.","6f8a8437":"A visual inspection of credits data csv indicates some entries are occupying multiple rows in the csv \n(eg: rows 30, 223, 420, 607). No duplicates and same no. of rows for both data sets indicates file has been read correctly\nand the above observations are extra-ordinarily lengthy.","b66114d9":"5. Who are the top ten male and female leading actors in terms of number of movies?","634be74f":"<a id='conclusions'><\/a>\n## Conclusions\n\nFrom the above analysis it appears that it may not be a single factor but a mixture of the chosen columns in leading actor, director, budget, time of release and genre that may lead to more successful movies in terms of their revenue. There is limited exploration undertaken for the above excercise and the analysis does not imply any statistical conclusions.","fe6672cc":"8. List the most popular movies by genre?","c29451d6":"Months of May-July and Nov-December appear to have a larger spread of revenues compared to other months. This could be larger release of movies coinciding with school holidays\/festive periods.","8224e105":"4. Are certain genres more revenue generating?","6e239a4f":"### Data exploratory questions \n\n","250ea7f7":"3. Which is the most popular movie in the dataset?","e64ae458":"4. Which movies was most profitable and loss making in 2016?\n","e432f33e":"A large number of movies have no value for production companies, countries. Budget and revenue have over a 1000 variables as 0. Relevant conversions will be carried out after data is extracted from the dictionary list columns as it is in str form and would not recognize nan.","119ad99b":"2. Which movie had the most and the least budget?","2528568c":"From the plot and the correlation matrix, there appears to be a moderate linear relation between revenue and popularity.","22e5bbdf":"Cast and crew columns have nans. Relevant conversions will be carried out after data is extracted from the \ndictionary list columns.","75d61120":"Adventure and Animation genres have above average revenues. Fantasy, Science Fiction and Family genres have near average revenues with Family having a broader range of revenue values. Months of May-July and Nov-December appear to be associated with higher average revenues. This could be larger release of movies coinciding with school holidays\/festive periods. The outliers are likely the high revenue movies within each genre.","43fe0aef":"# Exploring if there are there any variables that drive higher revenues.\n\n1. Are movie revenues and budget related?","48038e01":"## Introduction\n\nThe focus of the analysis is to gather relevant columns of the Kaggle TMDB 5000 Movie Datsaet and Credits Dataset, clean the data and explore it with an attempt to find some interesting facts and answer questions for what makes a movie profitable.\n\nData description and background information is at the below link:\nhttps:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata","86b9d213":"3. Does a specific month of movie release makes more profit?","1978bfe3":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n\n","c157bc91":"2. Are certain popular directors\/actors associated with above average revenues ?","2b402f18":"9. List the most profitable movies by genre?"}}