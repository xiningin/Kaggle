{"cell_type":{"3c461f9c":"code","543b0180":"code","041815fd":"code","3f070c5a":"code","31b72a8b":"code","0b8f72fd":"code","cc04d702":"code","f0a93796":"markdown"},"source":{"3c461f9c":"import pandas as pd\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error, median_absolute_error\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle","543b0180":"# data ingest\ntrain_data = pd.read_csv(\"..\/input\/naive-geese-data\/train_data_1624151549.csv\")\nvalid_data = pd.read_csv(\"..\/input\/naive-geese-data\/validation_data_1624128276.csv\")","041815fd":"# data prep\ntX = train_data.drop(columns = [\"Reward\", \"game\", \"step\", \"Unnamed: 0\"])\nty = train_data[\"Reward\"]\nsX = valid_data.drop(columns = [\"Reward\", \"game\", \"step\", \"Unnamed: 0\"])\nsy = valid_data[\"Reward\"]\n\n\nlg_data = lgb.Dataset(data = tX, label = ty)\nvalid_s = lg_data.create_valid(data=sX)","3f070c5a":"np.array([1,4,5]).shape","31b72a8b":"# core model training (TODO: cross-validate)\nbooster1 = lgb.train(train_set=lg_data, params={\"n_estimators\":500,\n                                                \"objective\":\"rmse\",\n                                                \"boosting\":\"dart\",\n                                                \"metric\":\"rmse\", \"learning_rate\":0.0005},\n valid_sets=valid_s, verbose_eval=5,\n )\n","0b8f72fd":"# evaluation\npy = booster1.predict(sX)\n\nprint(f\"RMSE: {mean_squared_error(py,sy, squared=False)}\")\n# current best is 7.0\nfig, ax = plt.subplots(1,1,figsize =(9,9))\n\nplt.scatter(py, sy)\nplt.show()\n\nlgb.plot_importance(booster1)\nplt.show()\n\n","cc04d702":"# check  that model was pickled \nwith open(\".\/lightgbm_geese.pkl\", 'wb') as stream:\n    pickle.dump(booster1.model_to_string(), stream)\n\nwith open(\".\/lightgbm_geese.pkl\", 'rb') as stream2:\n    raw2  = pickle.load(stream2)\n\nbooster2 = lgb.Booster(model_str=raw2)\nbooster2.predict(sX)","f0a93796":"\nThis notebook ingests data from ~11K hungry-geese games. The purpose is to train a GBM model that, when given an Observation from the hungry-geese environment and a direction to move, predicts a Reward associated with a move in that direction.\nThen, in real play, all 3 possible directions can be evaluated and the one with the highest expected Reward chosen.\n\nSome assumptions: \n* there's _a_ function that can be estimated and then  used to generate a useful sequence of moves and that the data don't just encode various versions of lucky geese\n* the \"blurring\" of positions I use in the data generation script is tuned to make inputs specific enough to act on for gain but general enough to so that the agent can generalize to future Observations (will test with a validation set, but there are on the order of 2^77 games, no set is quite big enough)\n* The lightGBM model binaries are small enough and fast-enough to load to be used in the hungry geese environment"}}