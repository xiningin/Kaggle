{"cell_type":{"fe3b88e0":"code","642f8a1d":"code","601be4e9":"code","a4bf18b9":"code","32ae493f":"code","9853a27a":"code","4ee8ad69":"code","cfd37b15":"code","47a0974e":"code","754235a6":"code","0c56fc5a":"code","46c65db0":"code","0cbd372a":"code","99de15e6":"code","5ed2e2a1":"code","d870bd80":"code","5d1e0ebf":"code","7bfda988":"code","91b110a8":"code","4625de57":"code","b31dfdf7":"code","46a741e3":"code","87416350":"code","c9d068b6":"code","84418445":"code","4709e165":"code","957bdccd":"code","df464fca":"code","70607763":"code","60cd221f":"code","d24e50bb":"code","4663819c":"code","9a91223b":"code","cf133109":"code","4ab3564f":"markdown","63e38e1e":"markdown"},"source":{"fe3b88e0":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom fastai.vision import *\nfrom fastai.metrics import accuracy\nfrom fastai.basic_data import *\nfrom skimage.util import montage\nimport pandas as pd\nfrom torch import optim\nimport re\n\nfrom utils import *","642f8a1d":"!git clone https:\/\/github.com\/radekosmulski\/whale \/kaggle\/working\/whale","601be4e9":"import sys\n # Add directory holding utility functions to path to allow importing utility funcitons\n#sys.path.insert(0, '\/kaggle\/working\/protein-atlas-fastai')\nsys.path.append('\/kaggle\/working\/whale')","a4bf18b9":"from whale.utils import map5","32ae493f":"import fastai\nfrom fastprogress import force_console_behavior\nimport fastprogress\nfastprogress.fastprogress.NO_BAR = True\nmaster_bar, progress_bar = force_console_behavior()\nfastai.basic_train.master_bar, fastai.basic_train.progress_bar = master_bar, progress_bar","9853a27a":"from fastai import *\nfrom fastai.vision import *","4ee8ad69":"ls ..\/input","cfd37b15":"path = Path('..\/input\/humpback-whale-identification\/')\npath_test = Path('..\/input\/humpback-whale-identification\/test')\npath_train = Path('..\/input\/humpback-whale-identification\/train')","47a0974e":"df = pd.read_csv(path\/'train.csv')#.sample(frac=0.05)\ndf.head()\nval_fns = {'69823499d.jpg'}","754235a6":"fn2label = {row[1].Image: row[1].Id for row in df.iterrows()}\npath2fn = lambda path: re.search('\\w*\\.jpg$', path).group(0)","0c56fc5a":"name = f'res50-full-train'","46c65db0":"SZ = 224\nBS = 64\nNUM_WORKERS = 0\nSEED=0","0cbd372a":"data = (\n    ImageItemList\n        .from_df(df[df.Id != 'new_whale'], '..\/input\/humpback-whale-identification\/train', cols=['Image'])\n        .split_by_valid_func(lambda path: path2fn(path) in val_fns)\n        .label_from_func(lambda path: fn2label[path2fn(path)])\n        .add_test(ImageItemList.from_folder('..\/input\/humpback-whale-identification\/test'))\n        .transform(get_transforms(do_flip=False), size=SZ, resize_method=ResizeMethod.SQUISH)\n        .databunch(bs=BS, num_workers=NUM_WORKERS, path='..\/input\/humpback-whale-identification')\n        .normalize(imagenet_stats)\n)","99de15e6":"MODEL_PATH = \"\/tmp\/model\/\"","5ed2e2a1":"%%time\n\nlearn = create_cnn(data, models.resnet50, lin_ftrs=[2048], model_dir=MODEL_PATH)\nlearn.clip_grad();","d870bd80":"learn.fit_one_cycle(1, 1e-2)\nlearn.save(f'{name}-stage-1')","5d1e0ebf":"learn.unfreeze()\n\nmax_lr = 1e-3\nlrs = [max_lr\/100, max_lr\/10, max_lr]\n\nlearn.fit_one_cycle(1, lrs)\nlearn.save(f'{name}-stage-2')","7bfda988":"SZ = 224 * 2\nBS = 64 \/\/ 4\nNUM_WORKERS = 0\nSEED=0","91b110a8":"data = (\n    ImageItemList\n        .from_df(df[df.Id != 'new_whale'], '..\/input\/humpback-whale-identification\/train', cols=['Image'])\n        .split_by_valid_func(lambda path: path2fn(path) in val_fns)\n        .label_from_func(lambda path: fn2label[path2fn(path)])\n        .add_test(ImageItemList.from_folder('..\/input\/humpback-whale-identification\/test'))\n        .transform(get_transforms(do_flip=False), size=SZ, resize_method=ResizeMethod.SQUISH)\n        .databunch(bs=BS, num_workers=NUM_WORKERS, path='..\/input\/humpback-whale-identification')\n        .normalize(imagenet_stats)\n)","4625de57":"%%time\nlearn = create_cnn(data, models.resnet50, lin_ftrs=[2048], model_dir=MODEL_PATH)\nlearn.clip_grad();\nlearn.load(f'{name}-stage-2')\nlearn.freeze_to(-1)\n\nlearn.fit_one_cycle(1, 1e-2 \/ 4)\nlearn.save(f'{name}-stage-3')\n\nlearn.unfreeze()\n\nmax_lr = 1e-3 \/ 4\nlrs = [max_lr\/100, max_lr\/10, max_lr]\n\nlearn.fit_one_cycle(1, lrs)\nlearn.save(f'{name}-stage-4')","b31dfdf7":"# with oversampling\ndf = pd.read_csv('..\/input\/radek-whale-oversample\/oversampled_train_and_val.csv')","46a741e3":"data = (\n    ImageItemList\n        .from_df(df, '..\/input\/humpback-whale-identification\/train', cols=['Image'])\n        .split_by_valid_func(lambda path: path2fn(path) in val_fns)\n        .label_from_func(lambda path: fn2label[path2fn(path)])\n        .add_test(ImageItemList.from_folder('data\/test'))\n        .transform(get_transforms(do_flip=False), size=SZ, resize_method=ResizeMethod.SQUISH)\n        .databunch(bs=BS, num_workers=NUM_WORKERS, path='data')\n        .normalize(imagenet_stats)\n)","87416350":"%%time\nlearn = create_cnn(data, models.resnet50, lin_ftrs=[2048], model_dir=MODEL_PATH)\nlearn.clip_grad();\nlearn.load(f'{name}-stage-4')\nlearn.freeze_to(-1)\n\nlearn.fit_one_cycle(1, 1e-2 \/ 4)\nlearn.save(f'{name}-stage-5')\n\nlearn.unfreeze()\n\nmax_lr = 1e-3 \/ 4\nlrs = [max_lr\/100, max_lr\/10, max_lr]\n\nlearn.fit_one_cycle(1, lrs)\nlearn.save(f'{name}-stage-6')","c9d068b6":"preds, _ = learn.get_preds(DatasetType.Test)","84418445":"preds = torch.cat((preds, torch.ones_like(preds[:, :1])), 1)","4709e165":"preds[:, 5004] = 0.06","957bdccd":"classes = learn.data.classes + ['new_whale']","df464fca":"from whale.utils import *","70607763":"def create_submission(preds, data, name, classes=None):\n    if not classes: classes = data.classes\n    sub = pd.DataFrame({'Image': [path.name for path in data.test_ds.x.items]})\n    sub['Id'] = top_5_pred_labels(preds, classes)\n    sub.to_csv(f'{name}.csv', index=False)","60cd221f":"create_submission(preds, learn.data, name, classes)","d24e50bb":"pd.read_csv(f'{name}.csv').head()","4663819c":"pd.read_csv(f'{name}.csv').Id.str.split().apply(lambda x: x[0] == 'new_whale').mean()","9a91223b":"#!kaggle competitions submit -c humpback-whale-identification -f subs\/{name}.csv.gz -m \"{name}\"","cf133109":"!rm -rf \/kaggle\/working\/whale","4ab3564f":"## Predict","63e38e1e":"I take a curriculum approach to training here. I first expose the model to as many different images of whales as quickly as possible (no oversampling) and train on images resized to 224x224.\n\nI would like the conv layers to start picking up on features useful for identifying whales. For that, I want to show the model as rich of a dataset as possible.\n\nI then train on images resized to 448x448.\n\nFinally, I train on oversampled data. Here, the model will see some images more often than others but I am hoping that this will help alleviate the class imbalance in the training data."}}