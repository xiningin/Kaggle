{"cell_type":{"799901ea":"code","f21a7b6e":"code","ead7702e":"code","c519c2b0":"code","911d3c22":"code","406b3adf":"code","cfa09b50":"code","57979867":"code","44ad097c":"code","0a910678":"code","6a1d1bae":"code","93084ecf":"code","eecb7df8":"code","4a7d5c48":"code","c91a2394":"code","5b8521b6":"code","bfb97971":"code","166e7497":"code","049ab37b":"code","53b03d57":"code","4d421617":"code","dced4a00":"code","91ace31b":"code","01f28e7c":"code","0423e517":"code","625db7aa":"code","bb84b9fc":"code","fc55c5f3":"code","c7195ecd":"code","aede23c2":"markdown","6f7260ac":"markdown","5e94cafa":"markdown","45240fa3":"markdown","6fd5b5dc":"markdown","f57ea746":"markdown"},"source":{"799901ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f21a7b6e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n","ead7702e":"data = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')\ndata.head()","c519c2b0":"#plt.title('Heart Disease attacks for Male vs Female')\nplt.figure(figsize=(7,7))\nsns.barplot(x=data['Sex'],y = data['HeartDisease'],data = data)\n","911d3c22":"data.replace({'M':0, 'F':1},inplace = True)","406b3adf":"data.replace({'N':0,'Y':1},inplace = True)","cfa09b50":"data['RestingECG'].value_counts()","57979867":"print(\"information about the dataset\")\ndata.info()","44ad097c":"print(\"checking the null values \")\ndata.isnull().sum()","0a910678":"data['ChestPainType'].value_counts()","6a1d1bae":"chestPainType = pd.get_dummies(data['ChestPainType'])\nchestPainType.head()","93084ecf":"RestingECG = pd.get_dummies(data['RestingECG'])\nRestingECG.head()","eecb7df8":"ST_Slope = pd.get_dummies(data['ST_Slope'])\nST_Slope.head()","4a7d5c48":"data.drop(['ST_Slope','RestingECG','ChestPainType'],inplace=True,axis =1 )","c91a2394":"data = pd.concat([data,chestPainType,ST_Slope,RestingECG],axis =1)\n","5b8521b6":"data.head()","bfb97971":"data.info()","166e7497":"data.columns","049ab37b":"X = data.loc[:,['Age', 'Sex', 'RestingBP', 'Cholesterol', 'FastingBS', 'MaxHR',\n       'ExerciseAngina', 'Oldpeak', 'ASY', 'ATA', 'NAP', 'TA',\n       'Down', 'Flat', 'Up', 'LVH', 'Normal', 'ST'\n    \n]]\ny = data['HeartDisease']\nX.head()","53b03d57":"y.head()","4d421617":"from sklearn.model_selection import train_test_split\nX_train,X_valid,y_train,y_valid = train_test_split(X,y,test_size=0.2, random_state=0)\nX_train.head()","dced4a00":"X_train.shape","91ace31b":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBClassifier\nprint(\"models are loaded\")","01f28e7c":"model = RandomForestClassifier(n_estimators=1000)\nmodel.fit(X_train,y_train)\npredictions = model.predict(X_valid)","0423e517":"error = mean_absolute_error(y_valid,predictions)\nprint(\"the error is\",error)","625db7aa":"score = model.score(X_valid,y_valid)\nprint(\"the accuracy is \",score*100)","bb84b9fc":"modelX = XGBClassifier()\nmodelX.fit(X_train,y_train)\npredX = modelX.predict(X_valid)","fc55c5f3":"error = mean_absolute_error(y_valid,predX)\nprint(\"the error is\",error)","c7195ecd":"score = modelX.score(X_valid,y_valid)\nprint(\"the accuracy is \",score*100)","aede23c2":"# Models:\n","6f7260ac":"# XGradient Boost","5e94cafa":"# Data Preprocessing","45240fa3":"# Random Forest Classifier","6fd5b5dc":"## One Hot Encoding","f57ea746":"# train test split"}}