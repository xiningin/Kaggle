{"cell_type":{"f60adf5c":"code","f580ae3f":"code","545d3c94":"code","17e8fc9a":"code","b22bb181":"code","c946ddda":"code","3fc2e60a":"code","813ef010":"markdown","dbd25d04":"markdown","cc8c6b9d":"markdown","c8cfa997":"markdown","7cc6af0f":"markdown","a9f97a25":"markdown","563b7580":"markdown","9109765b":"markdown"},"source":{"f60adf5c":"\"\"\"\n1 \u672a\u6dfb\u52a0dropout\u65f6\u8fed\u4ee310\u6b21\uff0c\u7cbe\u5ea6\u80fd\u8fbe\u52300.99\uff0c\u6dfb\u52a0\u4e86dropout\uff0c\u8bad\u7ec3\u7cbe\u5ea6\u4e0b\u964d\u4e86\uff0c\u4e3a0.96\uff0c\u56e0\u6b64\u6dfb\u52a0\u4e86\u6570\u636e\u589e\u5f3a,\n2 \n\"\"\"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import SGDClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,add,Flatten,BatchNormalization,Activation,Dense,Dropout\nfrom keras import optimizers,initializers,regularizers\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.preprocessing.image import ImageDataGenerator   #\u6570\u636e\u589e\u5f3a\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n","f580ae3f":"#\u83b7\u53d6\u6570\u636e\ntrain=pd.read_csv(\"..\/input\/train.csv\");\ntest=pd.read_csv(\"..\/input\/test.csv\");\nx_train=train.drop(labels=[\"label\"],axis=1);\ny_train=train[\"label\"]\nimport seaborn as sns\n#\u6253\u5370\u6570\u636e\u76f4\u65b9\u56fe\ng=sns.countplot(y_train)\n#\u6b63\u5219\u5316\u6570\u636e\nx_train=x_train\/255.0\ntest=test\/255.0\n#\u5c06\u6570\u636e\u5316\u4e3a3D\nx_train=x_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)\n# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\ny_train = to_categorical(y_train, num_classes = 10)\n#\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u62c6\u5206\u51fa\u9a8c\u8bc1\u96c6\nx_train,x_val,y_train,y_val=train_test_split(x_train,y_train,test_size=0.1,random_state=2)\n#\u753b\u4e00\u4e2a\u8bad\u7ec3\u96c6\u7684\u4f8b\u5b50\ng=plt.imshow(x_train[0][:,:,0])","545d3c94":"\n\"\"\"\n(conv--bn--relu--conv--bn--relu--pool--dropout)*2--\n(conv--bn--relu--dropout)*2--pool--\nfc--output\n\"\"\"\nmodel=Sequential()\nmodel.add(Conv2D(filters=64,kernel_size=(5,5),padding=\"same\",input_shape = (28,28,1),\n                 kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(filters=64,kernel_size=(5,5),padding=\"same\", kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(rate=0.25))\n#reply\nmodel.add(Conv2D(filters=64,kernel_size=(5,5),padding=\"same\",input_shape = (28,28,1),\n                 kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(filters=64,kernel_size=(5,5),padding=\"same\", kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(rate=0.5))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(rate=0.25))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#reply\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(rate=0.25))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#fc\nmodel.add(BatchNormalization(momentum=0.9))\nmodel.add(Flatten())#\u5c06\u8f93\u5165\u5c55\u5e73\nmodel.add(Dense(256,activation='relu', kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\n#output\nmodel.add(Dense(10,activation='softmax', kernel_initializer=initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)))\n\n#\u8bbe\u7f6e\u6a21\u578b\nadma=optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\nmodel.compile(loss='categorical_crossentropy', optimizer=adma,metrics=['accuracy'])","17e8fc9a":"\nepochs=30\nbatch_size=86\nhistory=model.fit(batch_size=batch_size,epochs=epochs,shuffle=True,x=x_train,y=y_train,validation_data=(x_val,y_val),verbose=2)\n","b22bb181":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n# Predict the values from the validation dataset\ny_pred = model.predict(x_val)\n# Convert predictions classes to one hot vectors \ny_pred_classes = np.argmax(y_pred,axis = 1) \n# Convert validation observations to one hot vectors\ny_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(y_true, y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","c946ddda":"# \u663e\u793a\u4e00\u4e9b\u9519\u8bef\u7ed3\u679c\uff0c\u53ca\u9884\u6d4b\u6807\u7b7e\u548c\u771f\u5b9e\u6807\u7b7e\u4e4b\u95f4\u7684\u4e0d\u540c\nerrors = (y_pred_classes - y_true != 0)\ny_pred_classes_errors = y_pred_classes[errors]\ny_pred_errors = y_pred[errors]\ny_true_errors = y_true[errors]\nx_val_errors = x_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\ny_pred_errors_prob = np.max(y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(y_pred_errors, y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, x_val_errors, y_pred_classes_errors, y_true_errors)","3fc2e60a":"# \u5bf9\u6d4b\u8bd5\u96c6\u505a\u9884\u6d4b\nresults = model.predict(test)\n# \u628aone-hot vector\u8f6c\u6362\u4e3a\u6570\u5b57\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\n# \u4fdd\u5b58\u6700\u7ec8\u7684\u7ed3\u679c\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"cnn_mnist_submission.csv\",index=False)","813ef010":"# 2 \u5efa\u7acb\u6a21\u578b","dbd25d04":"## 3.2 \u6df7\u6dc6\u77e9\u9635","cc8c6b9d":"# 4 \u6d4b\u8bd5\u5e76\u4fdd\u5b58\u6a21\u578b","c8cfa997":"# 1 \u5904\u7406\u6570\u636e","7cc6af0f":"# 3 \u8bc4\u4f30\u6a21\u578b\n## 3.1 \u635f\u5931\u548c\u7cbe\u5ea6\u66f2\u7ebf","a9f97a25":"# \u6253\u5370\u51famodel \u770b\u770b\nfrom keras.utils import plot_model\nplot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(\"model.png\")","563b7580":"# 3 \u8bad\u7ec3\u548c\u9a8c\u8bc1\u6a21\u578b","9109765b":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)"}}