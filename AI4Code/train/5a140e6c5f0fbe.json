{"cell_type":{"d21ea6c0":"code","38e9bb14":"code","980df248":"code","e106f039":"code","55c41305":"code","9d0c1446":"code","de55f159":"code","aa2f6c7e":"code","6eefb2f9":"code","23b2959e":"code","e5d78872":"code","1dbc1b46":"code","ec176dd9":"code","ef300edf":"code","a4b2b5dd":"code","09ca1f52":"code","05e3e8fa":"code","665eb33f":"code","0d722c60":"code","22b4f7f7":"code","f3252dba":"code","2c4df613":"code","bcd18aff":"code","93e4d702":"code","99c7602e":"code","801afe0f":"code","bef4840f":"code","698de40d":"code","55e307ad":"code","be0ea91d":"code","f9c7811c":"markdown","34ebc6fa":"markdown","43986c89":"markdown","52fa2b97":"markdown","33e2a508":"markdown","640f8faa":"markdown","614ac9f4":"markdown","a6afa88d":"markdown","0e37dc15":"markdown","0041e1e3":"markdown"},"source":{"d21ea6c0":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","38e9bb14":"# Import Data\n\ncensus_df = pd.read_csv('..\/input\/adult-census-income\/adult.csv')","980df248":"# size of data\ncensus_df.shape","e106f039":"# Show first 5 rows\n\ncensus_df.head(5)","55c41305":"# change columns name\ncols = census_df.columns\ncensus_df.columns = cols.str.replace('.','_')","9d0c1446":"# print some information about data\n\ncensus_df.info()","de55f159":"# check for missing values\ncensus_df.isna().sum()","aa2f6c7e":"# some columns have '?' \n\nques = census_df == '?'\nques.sum()","6eefb2f9":"# check  workclass and occupation both column contain question mark \ncompare = census_df[census_df[['workclass', 'occupation']] == '?'].any(axis=1)\ncensus_df[compare]","23b2959e":"# check with groupby\ncensus_df.groupby(by='workclass')['hours_per_week'].mean()","e5d78872":"# check the values in workclass \ncensus_df.workclass.value_counts()","1dbc1b46":"# will eliminte '?' rows\ndf = census_df[census_df.occupation !='?']\n\nques = df == '?'\nques.sum()","ec176dd9":"# check the most fequent value in native_country columns\n\ndf.native_country.max()","ef300edf":"# replace country with the most frequent value\ndf.native_country = df.loc[:, ['native_country']].replace('?', 'Yugoslavia')","a4b2b5dd":"df.native_country.unique()","09ca1f52":"# # print some stastical about data\ncensus_df.describe()","05e3e8fa":"# pair plot\nsns.pairplot(census_df)","665eb33f":"# check the count of target variable\nsns.countplot(df.income)","0d722c60":"# count plot against income\ncols = ['workclass', 'relationship', 'marital_status', 'race', 'sex']\n\nfor c in cols:\n    plt.figure(figsize=(12,4))\n    sns.countplot(x=c, hue='income', data=df)\n    plt.show()","22b4f7f7":"# check for outliers\nfig, (a,b)= plt.subplots(1,2,figsize=(20,6))\nsns.boxplot(y='hours_per_week',x='income',data=df,ax=a)\nsns.boxplot(y='age',x='income',data=df,ax=b)\nplt.show()","f3252dba":"#  Correlation Matrix with Spearman method\n\nplt.figure(figsize=(15,15))\n\nsns.heatmap(df.corr(), annot=True, cmap='BrBG', vmin=-1, vmax=1, center= 0,\n            square=True, linewidths=2, cbar_kws={\"shrink\": .5}).set(ylim=(15, 0))","2c4df613":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n# transform categorical value to numeric\nfor i in df.columns:\n    df[i] = le.fit_transform(df[i])","bcd18aff":"df.head()","93e4d702":"x = df.iloc[:, :-1]\ny = df['income']","99c7602e":"# train and test split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=42)","801afe0f":"%time\n# create an object\nlgb = LGBMClassifier(learning_rate= 0.1,\n boosting_type= 'gbdt',\n objective= 'binary',\n metric= 'binary_logloss',\n sub_feature= 0.5,\n num_leaves= 8,\n min_data= 50,\n max_depth= 15)\n\n\n# fit the data\n\nd_train = lgb.fit(x_train, y_train)","bef4840f":"# predict the target on the train dataset\n\ny_pred_lgb = lgb.predict(x_test)\n\n\n#Accuracy\naccuracy = accuracy_score(y_pred_lgb,y_test)\nprint('Accuracy Score : ', round(accuracy, 2) * 100)\n\n#Confusion matrix\ncm = confusion_matrix(y_test, y_pred_lgb)\nprint('\\nConfusion matric :\\n ', cm)","698de40d":"# find out the indices of categorical variables\ncategorical_var = np.where(x_train.dtypes != np.float)[0]\nprint('\\nCategorical Variables indices : ',categorical_var)","55e307ad":"%time\n# create an object\ncb = CatBoostClassifier(iterations=90, learning_rate=0.7, logging_level='Silent')\n\n# fit the model\ncb.fit(x_train, y_train, cat_features=categorical_var, eval_set=(x_test, y_test),verbose=False)","be0ea91d":"# predict\ny_predict_cb = cb.predict(x_test)\nprint('\\nTarget on train data',y_predict_cb) \n\n# Accuray Score on train dataset\naccuracy_train_cb = accuracy_score(y_predict_cb, y_test)\nprint('\\naccuracy_score on train dataset : ', round(accuracy_train_cb,2)* 100)\n\n#Confusion matrix\ncm = confusion_matrix(y_test, y_predict_cb)\nprint('\\nConfusion matric :\\n ', cm)","f9c7811c":"## Load dataset","34ebc6fa":"## lightGBM","43986c89":"## catBoost","52fa2b97":"## What is boosting?\nBoosting refers to a family of algorithms that are able to convert weak learners to strong learners.\n\nThe main principle of boosting is to fit a sequence of weak learners (models that are only slightly better than random guessing, such as small decision trees) to weighted versions of the data, where more weight is given to examples that were mis-classified by earlier rounds. \n\nThe predictions are then combined through a weighted majority vote (classification) or a weighted sum (regression) to produce the final prediction. The principal difference between boosting and the committee methods such as bagging is that base learners are trained in sequence on a weighted version of the data.","33e2a508":"### Observation\n\n- Both LightGBM and catBoost are same when it comes to  accuracy score\n- LightGBM took less time to train the model then catBoost","640f8faa":"## We will cover two Algorithm\n- LightGBM\n- CatBosost","614ac9f4":"## Exploratory data analysis","a6afa88d":"## Load Library","0e37dc15":"## split data","0041e1e3":"## Encoding"}}