{"cell_type":{"6ca55bcf":"code","15c5c055":"code","b292e9d0":"code","85dbb6df":"code","56c2f3ff":"code","ce04a91d":"code","48a0f830":"code","3f6545f0":"code","dc42b39f":"code","92847a8d":"code","af09d52e":"code","2852059e":"code","96c5ae03":"markdown","54306850":"markdown","621faee8":"markdown","efd539da":"markdown","cc03e67c":"markdown","383b05da":"markdown","7daae33c":"markdown","761eadce":"markdown","185a4ef1":"markdown"},"source":{"6ca55bcf":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestClassifier","15c5c055":"# Reading the Train and Test Datasets.\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","b292e9d0":"# Let's see the shape of the train and test data\nprint(train.shape, test.shape)","85dbb6df":"train.isna().any().any()","56c2f3ff":"# dividing the data into the input and output features to train make the model learn based on what to take in and what to throw out.\ntrain_X = train.loc[:, \"pixel0\":]\ntrain_Y = train.loc[:, \"label\"]\n\n# Notmailzing the images array to be in the range of 0-1 by dividing them by the max possible value. \n# Here is it 255 as we have 255 value range for pixels of an image. \ntrain_X = train_X\/255.0\ntest = test\/255.0","ce04a91d":"# Let's make some beautiful plots.\ndef visualize_digit(row):\n    \n    digit_array = train_X.loc[row, \"pixel0\":]\n    arr = np.array(digit_array) \n\n    #.reshape(a, (28,28))\n    image_array = np.reshape(arr, (28,28))\n\n    digit_img = plt.imshow(image_array, cmap=plt.cm.binary)\n    plt.colorbar(digit_img)\n    print(\"IMAGE LABEL: {}\".format(train.loc[row, \"label\"]))\n\n\nvisualize_digit(55)    ","48a0f830":"model = RandomForestClassifier(random_state=1)","3f6545f0":"model.fit(train_X, train_Y)","dc42b39f":"test['Label'] = model.predict(test)","92847a8d":"test['ImageId']=test.index+1","af09d52e":"test.loc[:,['ImageId','Label']].head()","2852059e":"test.loc[:,['ImageId','Label']].to_csv('random_forest_sub.csv', index=False)","96c5ae03":"## Make Model","54306850":"#### Missing Values","621faee8":"#### Model Fit","efd539da":"## Make Submission to Kaggle","cc03e67c":"### Import necessaries","383b05da":"## Add \"ImageId\" as Index+1","7daae33c":"### Visulaize a single digit with an array","761eadce":"### Data Cleaning and Normalization","185a4ef1":"## Make prediction"}}