{"cell_type":{"f1afadc2":"code","20579b3c":"code","ee379305":"code","3ecff7d8":"code","5ff5f1da":"code","88936c95":"code","ef600041":"code","6f47b36b":"code","eb8b826d":"code","1549a27f":"code","2971fa95":"code","f8431858":"code","11693fd3":"code","10295d80":"code","6714d61b":"code","94c82dba":"code","239b0ef6":"code","eb5d9be2":"code","bc82c039":"code","ca896da2":"code","5f60257c":"code","c52d20d8":"code","35094749":"code","37b3b60c":"code","95c1fcae":"markdown","96f6b9b9":"markdown","8c1c1457":"markdown","26306eb2":"markdown","0d2fdab1":"markdown"},"source":{"f1afadc2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.image as mpimg\n%matplotlib inline\nnp.random.seed(2)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport itertools\n\n#one hot encoding\nfrom keras.utils.np_utils import to_categorical \n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\n","20579b3c":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n","ee379305":"train.head()","3ecff7d8":"test.head()","5ff5f1da":"Y_train = train['label']\nX_train = train.drop(labels = 'label',axis =1 )\n\ndel train\n\ng= sns.countplot(Y_train)\n\ng","88936c95":"Y_train.value_counts()","ef600041":"sns.heatmap(X_train.isnull(),cbar= False,cmap='coolwarm')","6f47b36b":"X_train = X_train \/ 255.0\ntest = test \/ 255.0","eb8b826d":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","1549a27f":"Y_train = to_categorical(Y_train, num_classes = 10)","2971fa95":"random_seed= 2","f8431858":"X_train,X_val,Y_train, Y_val = train_test_split(X_train,Y_train,test_size = 0.1 ,random_state =random_seed )","11693fd3":"x = plt.imshow(X_train[0][:,:,0])","10295d80":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","6714d61b":"optimizer = RMSprop(lr= 0.001, rho  = 0.9 , epsilon=1e-08, decay=0.0)","94c82dba":"model.compile (optimizer =optimizer , loss='categorical_crossentropy', metrics = ['accuracy'])","239b0ef6":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","eb5d9be2":"epochs= 1\nbatch_size = 86","bc82c039":"datagen = ImageDataGenerator(\nfeaturewise_center = False,\nsamplewise_center = False,\nfeaturewise_std_normalization = False,\nsamplewise_std_normalization =False,\nzca_whitening = False,\nrotation_range=10,\nzoom_range= 0.1,\nwidth_shift_range= 0.1,\nheight_shift_range= 0.1,\nhorizontal_flip = False,\nvertical_flip= False)\n","ca896da2":"datagen.fit(X_train)","5f60257c":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0]\n                             \n                              )","c52d20d8":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","35094749":"results = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","37b3b60c":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","95c1fcae":"Digit recognition using 5 layers sequential convolution neural network trained on mnist dataset.","96f6b9b9":"Optimizer(in this case we use RMSprop)","8c1c1457":"Checking for null values ","26306eb2":"Normalization","0d2fdab1":"Data augmentation(in order to avoid overfitting)"}}