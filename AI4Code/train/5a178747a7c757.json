{"cell_type":{"1e997100":"code","b4c3677b":"code","8a44481e":"code","ed7ef632":"code","ef865469":"code","30ecc7ec":"code","435d2fe4":"code","0edde5a6":"code","99dcd29c":"code","166f7142":"code","5e02f5e0":"code","ea6777ec":"code","44487c5d":"code","0c57153e":"code","9b12234e":"code","c709bc10":"code","53c0c4ce":"code","509e4c7a":"code","7718e062":"code","5a04a69f":"code","cff2ce13":"code","848deb7f":"code","6994cb8f":"code","7ee437c0":"code","54eb0df2":"code","1ead3bf4":"code","7e491c51":"code","0e4747ab":"code","55dccb55":"code","4ffaedc9":"markdown","9a48edea":"markdown","2755b176":"markdown","e68b8098":"markdown","b8507f1d":"markdown","829d88c3":"markdown","0498c261":"markdown","74862b23":"markdown","d6b6aa01":"markdown","d93f12d5":"markdown","cef9fb51":"markdown","f37c0b42":"markdown","1208e74e":"markdown","dfa6ad98":"markdown","0f8f9cca":"markdown"},"source":{"1e997100":"from IPython.display import HTML\nHTML('''\n<script>\n  function code_toggle() {\n    if (code_shown){\n      $('div.input').hide('500');\n      $('#toggleButton').val('Show Code')\n    } else {\n      $('div.input').show('500');\n      $('#toggleButton').val('Hide Code')\n    }\n    code_shown = !code_shown\n  }\n\n  $( document ).ready(function(){\n    code_shown=true;\n  });\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" id=\"toggleButton\" value=\"Hide Code\"><\/form>''')","b4c3677b":"import os\nprint(os.listdir(\"..\/input\"))","8a44481e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.utils import np_utils","ed7ef632":"import warnings\nwarnings.filterwarnings('ignore')\n\ndf = pd.read_csv(\"..\/input\/train.csv\")\ndf.Sex[df.Sex == 'male'] = 0\ndf.Sex[df.Sex == 'female'] = 1\ndf.Embarked[df.Embarked == 'S'] = 0\ndf.Embarked[df.Embarked == 'C'] = 1\ndf.Embarked[df.Embarked == 'Q'] = 2\n\ndf2 = pd.read_csv(\"..\/input\/test.csv\")\ndf2.Sex[df2.Sex == 'male'] = 0\ndf2.Sex[df2.Sex == 'female'] = 1\ndf2.Embarked[df2.Embarked == 'S'] = 0\ndf2.Embarked[df2.Embarked == 'C'] = 1\ndf2.Embarked[df2.Embarked == 'Q'] = 2\n\n#df = df.drop('Unnamed: 0', axis=1)\nprint(df.head())\nprint(df.shape)\nprint(df.columns)","ef865469":"percent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_values = pd.DataFrame({'column_name': df.columns,\n                               'percent_missing': percent_missing})\nmissing_values","30ecc7ec":"percent_missing = df2.isnull().sum() * 100 \/ len(df2)\nmissing_values = pd.DataFrame({'column_name': df2.columns,\n                               'percent_missing': percent_missing})\nmissing_values","435d2fe4":"df = df.fillna(0)\ndf2 = df2.fillna(0)","0edde5a6":"import seaborn as sns\nimport matplotlib.pyplot as plt","99dcd29c":"import seaborn as sns\n\ncorr=df.corr()\nsns.heatmap(corr, xticklabels=corr.columns.values, yticklabels=corr.columns.values)","166f7142":"# Thanks to: https:\/\/scikit-learn.org\/stable\/auto_examples\/classification\/plot_classifier_comparison.html\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_moons, make_circles, make_classification\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.decomposition import PCA\n\nh = .02  # step size in the mesh\n\nnames = [\"Nearest Neighbors\", \"Linear SVM\", \"RBF SVM\", \"Gaussian Process\",\n         \"Decision Tree\", \"Random Forest\", \"Neural Net\", \"AdaBoost\",\n         \"Naive Bayes\", \"QDA\"]\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(kernel=\"linear\", C=0.025),\n    SVC(gamma=2, C=1),\n    GaussianProcessClassifier(1.0 * RBF(1.0)),\n    DecisionTreeClassifier(max_depth=5),\n    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),\n    MLPClassifier(alpha=1, max_iter=1000),\n    AdaBoostClassifier(),\n    GaussianNB(),\n    QuadraticDiscriminantAnalysis()]\n\nX = df.drop(['PassengerId','Name','Ticket','Cabin','Survived'], axis=1).values\npca = PCA(n_components=2,svd_solver='full')\nX = pca.fit_transform(X)\ny = df['Survived']\n\n\n# X, y = make_classification(n_features=2, n_redundant=0, n_informative=2,\n#                            random_state=1, n_clusters_per_class=1)\nrng = np.random.RandomState(2)\n#X += 2 * rng.uniform(size=X.shape)\n#linearly_separable = (X, y)\n\ndatasets = [df]\n\nfigure = plt.figure(figsize=(27, 9))\ni = 1\n# iterate over datasets\nfor ds_cnt, ds in enumerate(datasets):\n    # preprocess dataset, split into training and test part\n    #X, y = ds\n    X = StandardScaler().fit_transform(X)\n    X_train, X_test, y_train, y_test = \\\n        train_test_split(X, y, test_size=.3, random_state=42)\n\n    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                         np.arange(y_min, y_max, h))\n\n    # just plot the dataset first\n    cm = plt.cm.RdBu\n    cm_bright = ListedColormap(['#FF0000', '#0000FF'])\n    ax = plt.subplot(len(datasets), len(classifiers) + 1, i)\n    if ds_cnt == 0:\n        ax.set_title(\"Input data\")\n    # Plot the training points\n    ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright,\n               edgecolors='k')\n    # Plot the testing points\n    ax.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright, alpha=0.6,\n               edgecolors='k')\n    ax.set_xlim(xx.min(), xx.max())\n    ax.set_ylim(yy.min(), yy.max())\n    ax.set_xticks(())\n    ax.set_yticks(())\n    i += 1\n\n    # iterate over classifiers\n    for name, clf in zip(names, classifiers):\n        ax = plt.subplot(len(datasets), len(classifiers) + 1, i)\n        clf.fit(X_train, y_train)\n        score = clf.score(X_test, y_test)\n\n        # Plot the decision boundary. For that, we will assign a color to each\n        # point in the mesh [x_min, x_max]x[y_min, y_max].\n        if hasattr(clf, \"decision_function\"):\n            Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n        else:\n            Z = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]\n\n        # Put the result into a color plot\n        Z = Z.reshape(xx.shape)\n        ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)\n\n        # Plot the training points\n        ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright,\n                   edgecolors='k')\n        # Plot the testing points\n        ax.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright,\n                   edgecolors='k', alpha=0.6)\n\n        ax.set_xlim(xx.min(), xx.max())\n        ax.set_ylim(yy.min(), yy.max())\n        ax.set_xticks(())\n        ax.set_yticks(())\n        if ds_cnt == 0:\n            ax.set_title(name)\n        ax.text(xx.max() - .3, yy.min() + .3, ('%.2f' % score).lstrip('0'),\n                size=15, horizontalalignment='right')\n        i += 1\n\nplt.tight_layout()\nplt.show()","5e02f5e0":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nX_Train = df.drop(['PassengerId','Name','Ticket','Cabin','Survived'], axis=1)\nY_Train = df['Survived']\n\nX_Train = StandardScaler().fit_transform(X_Train)\n\nX_Test = df2.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)\nX_Test = StandardScaler().fit_transform(X_Test)\n\n# X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.30, random_state = 101)","ea6777ec":"from sklearn import svm\nimport matplotlib.pyplot as plt\ndef feature_plot(classifier, feature_names, top_features=4):\n coef = classifier.coef_.ravel()\n top_positive_coefficients = np.argsort(coef)[-top_features:]\n top_negative_coefficients = np.argsort(coef)[:top_features]\n top_coefficients = np.hstack([top_negative_coefficients, top_positive_coefficients])\n plt.figure(figsize=(18, 7))\n colors = ['green' if c < 0 else 'blue' for c in coef[top_coefficients]]\n plt.bar(np.arange(2 * top_features), coef[top_coefficients], color=colors)\n feature_names = np.array(feature_names)\n plt.xticks(np.arange(1 + 2 * top_features), feature_names[top_coefficients], rotation=45, ha='right')\n plt.show()\n\nprint(df.drop(['PassengerId','Name','Ticket','Cabin'], axis=1).columns.values)\n\ntrainedsvm = svm.LinearSVC().fit(X_Train, Y_Train)\nfeature_plot(trainedsvm, df.drop(['PassengerId','Name','Ticket','Cabin','Survived'], axis=1).columns.values)","44487c5d":"# Preprocessing :\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom itertools import product\n\n# Classifiers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA","0c57153e":"trainedmodel = LogisticRegression().fit(X_Train,Y_Train)\npredictions =trainedmodel.predict(X_Test)\n# print(confusion_matrix(Y_Test,predictions))\n# print(classification_report(Y_Test,predictions))\ntrainedmodel.score(X_Train, Y_Train)","9b12234e":"trainedforest = RandomForestClassifier(n_estimators=700).fit(X_Train,Y_Train)\npredictionforest = trainedforest.predict(X_Test)\ntrainedforest.score(X_Train, Y_Train)","c709bc10":"submission = pd.DataFrame({\n        \"PassengerId\": df2[\"PassengerId\"],\n        \"Survived\": predictionforest\n    })\nsubmission.to_csv('titanic.csv', index=False)","53c0c4ce":"trainedsvm = svm.LinearSVC().fit(X_Train, Y_Train)\npredictionsvm = trainedsvm.predict(X_Test)\ntrainedsvm.score(X_Train, Y_Train)","509e4c7a":"trainedtree = tree.DecisionTreeClassifier().fit(X_Train, Y_Train)\npredictionstree = trainedtree.predict(X_Test)\ntrainedtree.score(X_Train, Y_Train)","7718e062":"import graphviz\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\n\ndata = export_graphviz(trainedtree,out_file=None,feature_names=df.drop(['PassengerId','Name','Ticket','Cabin','Survived'], \n                       axis=1).columns,\n                       class_names=['0', '1'],  \n                       filled=True, rounded=True,  \n                       max_depth=2,\n                       special_characters=True)\ngraph = graphviz.Source(data)\ngraph","5a04a69f":"trainedlda = LinearDiscriminantAnalysis().fit(X_Train, Y_Train)\npredictionlda = trainedlda.predict(X_Test)\ntrainedlda.score(X_Train, Y_Train)","cff2ce13":"trainednb = GaussianNB().fit(X_Train, Y_Train)\npredictionnb = trainednb.predict(X_Test)\ntrainednb.score(X_Train, Y_Train)","848deb7f":"from xgboost import XGBClassifier\nfrom xgboost import plot_tree\nimport matplotlib.pyplot as plt\nmodel = XGBClassifier()\n\n# Train\nmodel.fit(X_Train, Y_Train)\n\nplot_tree(model)\nplt.figure(figsize = (50,55))\nplt.show()","6994cb8f":"pca = PCA(n_components=2,svd_solver='full')\n# print(pca.explained_variance_)\n\nX_Train = df.drop(['PassengerId','Name','Ticket','Cabin','Survived'], axis=1)\nY_Train = df['Survived']\n\nX_Train = StandardScaler().fit_transform(X_Train)\nX_Train1 = pca.fit_transform(X_Train)\n\nX_Test = df2.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)\nX_Test = StandardScaler().fit_transform(X_Test)\nX_Test1 = pca.fit_transform(X_Train)\n\ntrainednb = GaussianNB().fit(X_Train1, Y_Train)\ntrainedsvm = svm.LinearSVC().fit(X_Train1, Y_Train)\ntrainedforest = RandomForestClassifier(n_estimators=700).fit(X_Train1,Y_Train)\ntrainedmodel = LogisticRegression().fit(X_Train1,Y_Train)\n\nprint('Naive Bayes')\npredictionnb = trainednb.predict(X_Test1)\nprint(trainednb.score(X_Train1, Y_Train))\n\nprint('SVM')\npredictionsvm = trainedsvm.predict(X_Test1)\nprint(trainedsvm.score(X_Train1, Y_Train))\n\nprint('Random Forest')\npredictionforest = trainedforest.predict(X_Test1)\nprint(trainedforest.score(X_Train1, Y_Train))\n\nprint('Logistic Regression')\npredictions =trainedmodel.predict(X_Test1)\nprint(trainedmodel.score(X_Train1, Y_Train))","7ee437c0":"# Thanks to: https:\/\/scikit-learn.org\/stable\/auto_examples\/ensemble\/plot_voting_decision_regions.html\n\nx_min, x_max = X_Train1[:, 0].min() - 1, X_Train1[:, 0].max() + 1\ny_min, y_max = X_Train1[:, 1].min() - 1, X_Train1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),\n                     np.arange(y_min, y_max, 0.1))\n\nf, axarr = plt.subplots(2, 2, sharex='col', sharey='row', figsize=(10, 8))\n\nfor idx, clf, tt in zip(product([0, 1], [0, 1]),\n                        [trainednb, trainedsvm, trainedforest, trainedmodel],\n                        ['Naive Bayes Classifier', 'SVM',\n                         'Random Forest', 'Logistic Regression']):\n\n    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    \n\n    axarr[idx[0], idx[1]].contourf(xx, yy, Z,cmap=plt.cm.coolwarm, alpha=0.4)\n    axarr[idx[0], idx[1]].scatter(X_Train1[:, 0], X_Train1[:, 1], c=Y_Train,\n                                  s=20, edgecolor='k')\n    axarr[idx[0], idx[1]].set_title(tt)\n\nplt.show()","54eb0df2":"from sklearn.manifold import TSNE\nimport time\n\ntime_start = time.time()\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\ntsne_results = tsne.fit_transform(X_Train)\nprint('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))","1ead3bf4":"plt.figure(figsize=(6,5))\nsns.scatterplot(\n    x=tsne_results[:,0], y=tsne_results[:,1],\n    hue=Y_Train,\n    palette=sns.color_palette(\"hls\", 2),\n    data=df,\n    legend=\"full\",\n    alpha=0.3\n)","7e491c51":"from keras.utils.np_utils import to_categorical\nY_Train = to_categorical(Y_Train)","0e4747ab":"from keras.models import Sequential\nfrom keras.utils import np_utils\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Dropout, BatchNormalization, Activation\n\n#Y_Test = to_categorical(Y_Test)\n\ninput_dim = X_Train.shape[1]\nnb_classes = Y_Train.shape[1]\n\n# Here's a Deep Dumb MLP (DDMLP)\nmodel = Sequential()\nmodel.add(Dense(512, input_dim=input_dim))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.15))\nmodel.add(Dense(256))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.15))\nmodel.add(Dense(nb_classes))\nmodel.add(BatchNormalization())\nmodel.add(Activation('sigmoid'))\n\n# we'll use categorical xent for the loss, and RMSprop as the optimizer\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nprint(\"Training...\")\nmodel.fit(X_Train, Y_Train, nb_epoch=50, batch_size=16, validation_split=0.1, verbose=80)\n\npreds = model.predict_classes(X_Test, verbose=0)","55dccb55":"scores = model.evaluate(X_Train, Y_Train)\nprint(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","4ffaedc9":"Random Forest","9a48edea":"Linear Discriminant Anaylsis","2755b176":"**Titanic Dataset**","e68b8098":"**Machine Learning**","b8507f1d":"XGBoost","829d88c3":"Support Vector Machines","0498c261":"Naive Bayes","74862b23":"Decision Tree","d6b6aa01":"Logistic Regression","d93f12d5":"**Feature Engineering**","cef9fb51":"Principal Component Analysis","f37c0b42":"t-SNE","1208e74e":"**Preprocessing**","dfa6ad98":"**Data Visualization**","0f8f9cca":"****Deep Learning****"}}