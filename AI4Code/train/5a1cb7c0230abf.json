{"cell_type":{"e1bb9773":"code","d23a0279":"code","d1fd109d":"code","2b202d5d":"code","835fa22b":"code","27ac6250":"code","fdb1b006":"code","7c89a524":"code","11250dbd":"code","4a63b267":"code","5142e50e":"code","3947c396":"code","b686aef5":"code","5b7356d0":"code","6b7d34a3":"code","28de651e":"code","2127783a":"code","9e2a7f73":"code","0e7f9bf9":"code","854dda2d":"code","3f6f467c":"code","250808d4":"code","8b61e07b":"code","a9a1c022":"code","ebddc277":"code","00f5fbf2":"code","379a1e3b":"code","f2e19721":"markdown","b7c70fac":"markdown","7234721a":"markdown","ce61cc45":"markdown","cc18ce6f":"markdown","6c2145bc":"markdown","2f48e059":"markdown","bd9e348a":"markdown","f25ffb7c":"markdown","ee2bcd7f":"markdown","0b75de78":"markdown","0d8df56c":"markdown","0864ec10":"markdown","f48a8c23":"markdown","4efe7d64":"markdown","1b812c22":"markdown","dfc01939":"markdown","e22516f2":"markdown","c2611299":"markdown","79744034":"markdown","32d535a7":"markdown"},"source":{"e1bb9773":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d23a0279":"loans = pd.read_csv('..\/input\/loan-data\/loan_data.csv')","d1fd109d":"loans.info()","2b202d5d":"loans.describe()","835fa22b":"loans.head()","27ac6250":"plt.figure(figsize=(10,6))\nloans[loans['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\nloans[loans['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","fdb1b006":"plt.figure(figsize=(10,4))\nloans[loans['not.fully.paid']==1]['fico'].hist(color='blue', bins=30, label='not fully paid = 1', alpha=0.5)\nloans[loans['not.fully.paid']==0]['fico'].hist(color='red', bins=30, label='not fully paid = 0', alpha=0.5)\nplt.legend()\nplt.xlabel('Not Fully Paid')","7c89a524":"sns.set_style('darkgrid')\nsns.countplot(x='purpose', hue='not.fully.paid', data=loans, palette='Set1')","11250dbd":"sns.jointplot(data=loans, x='fico', y='int.rate', color='green')","4a63b267":"sns.lmplot(x='fico', y='int.rate', data=loans, hue='credit.policy', col='not.fully.paid')","5142e50e":"loans.info()","3947c396":"cat_feats = ['purpose']","b686aef5":"final_data = pd.get_dummies(data=loans,columns=cat_feats,drop_first=True)","5b7356d0":"final_data.head()","6b7d34a3":"from sklearn.model_selection import train_test_split","28de651e":"X_train, X_test, y_train, y_test = train_test_split(final_data.drop('not.fully.paid', axis=1), final_data['not.fully.paid'], test_size=0.33, random_state=42)","2127783a":"from sklearn.tree import DecisionTreeClassifier","9e2a7f73":"dtree = DecisionTreeClassifier()","0e7f9bf9":"dtree.fit(X_train, y_train)","854dda2d":"predictions = dtree.predict(X_test)","3f6f467c":"from sklearn.metrics import confusion_matrix, classification_report","250808d4":"print(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))","8b61e07b":"from sklearn.ensemble import RandomForestClassifier\nrdf = RandomForestClassifier()","a9a1c022":"rdf.fit(X_train, y_train)","ebddc277":"predicts = rdf.predict(X_test)","00f5fbf2":"print(classification_report(y_test, predicts))","379a1e3b":"confusion_matrix(y_test, predicts)","f2e19721":"**Now create a classification report from the results.**","b7c70fac":"** Let's see the trend between FICO score and interest rate. Recreate the following jointplot.**","7234721a":"## Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n** Import DecisionTreeClassifier**","ce61cc45":"**Show the Confusion Matrix for the predictions.**","cc18ce6f":"## Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\n** Use sklearn to split your data into a training set and a testing set.**","6c2145bc":"## Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n** Predict the class of not.fully.paid for the X_test data.**","2f48e059":"## Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","bd9e348a":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","f25ffb7c":"## Get the Data\n\n** Use pandas to read loan_data.csv as a dataframe called loans.**","ee2bcd7f":"**Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid.**","0b75de78":"### Jose Portilla's Course project solution\n___\n# Random Forest Project \n\nFor this project we will be exploring publicly available data from [LendingClub.com](www.lendingclub.com). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.\n\nLending club had a [very interesting year in 2016](https:\/\/en.wikipedia.org\/wiki\/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full.\n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","0d8df56c":"## Predictions and Evaluation of Decision Tree\n**Create predictions from the test set and create a classification report and a confusion matrix.**","0864ec10":"# Setting up the Data\n\nLet's get ready to set up our data for our Random Forest Classification Model!\n\n**Check loans.info() again.**","f48a8c23":"# Import Libraries\n\n**Import the usual libraries for pandas and plotting. You can import sklearn later on.**","4efe7d64":"**Create a similar figure, except this time select by the not.fully.paid column.**","1b812c22":"**We can notice that neither did very well, the recall is very low for each class, more feature engineering is needed.**","dfc01939":"# Exploratory Data Analysis\n\nLet's do some data visualization! We'll use seaborn and pandas built-in plotting capabilities, but feel free to use whatever library you want.\n\n**Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**","e22516f2":"** Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy. Check the documentation for lmplot() if you can't figure out how to separate it into columns.**","c2611299":"## Categorical Features\n\nNotice that the **purpose** column as categorical\n\nThat means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\nLet's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**","79744034":"**Check out the info(), head(), and describe() methods on loans.**","32d535a7":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**"}}