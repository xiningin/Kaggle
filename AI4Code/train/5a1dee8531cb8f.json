{"cell_type":{"d79197a4":"code","58021380":"code","cd5cba7a":"code","835bd936":"code","04afd637":"code","d9bb0750":"code","a6e0766f":"code","1742baee":"code","03bf5288":"code","857be3f5":"code","bf6b9d20":"code","213b08ac":"code","3649f06a":"code","316d6263":"code","1eb54914":"code","57f025cc":"code","330b935a":"code","1b694177":"code","1d396a4a":"code","3fd75ea4":"code","fa3e1105":"code","4849057d":"code","5764774a":"code","6dc2bdc9":"markdown","ad114a01":"markdown","35fb1a5c":"markdown","b7718ee7":"markdown","07b37aa2":"markdown","2735ee54":"markdown","4d2d23af":"markdown","ed7a0a5a":"markdown","406753af":"markdown"},"source":{"d79197a4":"# Matplotlib config\n%matplotlib inline\n%config InlineBackend.figure_formats = ['svg']\n%config InlineBackend.rc = {'figure.figsize': (5.0, 4.0)}\n\nimport pandas as pd\nimport numpy as np\nimport csv\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, plot_confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\n\ninput_file = \"..\/input\/house-prices-advanced-regression-techniques\/train.csv\"\ndf = pd.read_csv(input_file, header = 0, sep = ',', quotechar='\"')\ndf.head()","58021380":"df.columns","cd5cba7a":"%matplotlib\ndf.info()\ndf.describe()","835bd936":"#Correlation with the SalePrice\n\ndf.corr()[\"SalePrice\"].abs().sort_values(ascending = False)","04afd637":"sns.heatmap(df.corr());","d9bb0750":"#Scatterplot for numeric type features\n\nsns.scatterplot(df[\"GrLivArea\"], df[\"SalePrice\"])","a6e0766f":"#Barplot for object type features\n\ndf_grouped = df.groupby(\"GarageCars\").agg(avgP = (\"SalePrice\", np.mean))\n\nsns.barplot(df_grouped.index, df_grouped[\"avgP\"])","1742baee":"#Categories from object type features\n\ndf[\"Neighborhood\"].unique()","03bf5288":"# Replace the missing values in columns with float and int values with\n# the mean of the values in the same column\n\ndf['TotalBsmtSF_filledNaNs'] = df['TotalBsmtSF'].fillna(value=df['TotalBsmtSF'].mean())\ndf['BsmtFinSF1_filledNaNs'] = df['BsmtFinSF1'].fillna(value=df['BsmtFinSF1'].mean())\ndf['BsmtFinSF2_filledNaNs'] = df['BsmtFinSF2'].fillna(value=df['BsmtFinSF2'].mean())\ndf['BsmtFullBath_filledNaNs'] = df['BsmtFullBath'].fillna(value=df['BsmtFullBath'].mean())\ndf['GarageCars_filledNaNs'] = df['GarageCars'].fillna(value=df['GarageCars'].mean())\ndf['GarageArea_filledNaNs'] = df['GarageArea'].fillna(value=df['GarageArea'].mean())\ndf['LotFrontage_filledNaNs'] = df['LotFrontage'].fillna(value=df['LotFrontage'].mean())\ndf[\"LotFrontage_filledNaNs\"] = df[\"LotFrontage_filledNaNs\"].astype(\"int\")\ndf['MasVnrArea_filledNaNs'] = df['MasVnrArea'].fillna(value=df['MasVnrArea'].mean())\ndf[\"MasVnrArea_filledNaNs\"] = df[\"MasVnrArea_filledNaNs\"].astype(\"int\")\ndf['GarageYrBlt_filledNaNs'] = df['GarageYrBlt'].fillna(value=df['GarageYrBlt'].mean())\ndf[\"GarageYrBlt_filledNaNs\"] = df[\"GarageYrBlt_filledNaNs\"].astype(\"int\")","857be3f5":"#Fill the missing values of a column with the often value of the column\n\n#MSZoning\nmode_MSZoning =  df['MSZoning'].mode()[0]\ndf['MSZoning_filledNaNs'] = df.groupby('Neighborhood')['MSZoning'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_MSZoning))\ndf['MSZoning_filledNaNs']= df['MSZoning_filledNaNs'].fillna(df['MSZoning_filledNaNs'].value_counts().idxmax())\n\n#KitchenQual\nmode_KitchenQual =  df['KitchenQual'].mode()[0]\ndf['KitchenQual_filledNaNs'] = df.groupby('OverallQual')['KitchenQual'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_KitchenQual))\ndf['KitchenQual_filledNaNs']= df['KitchenQual_filledNaNs'].fillna(df['KitchenQual_filledNaNs'].value_counts().idxmax())\n\n#Functional\nmode_Functional =  df['Functional'].mode()[0]\ndf['Functional_filledNaNs'] = df.groupby('OverallQual')['Functional'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_Functional))\ndf['Functional_filledNaNs']= df['Functional_filledNaNs'].fillna(df['Functional_filledNaNs'].value_counts().idxmax())\n\n#SaleType\nmode_SaleType =  df['SaleType'].mode()[0]\ndf['SaleType_filledNaNs'] = df.groupby('SaleType')['SaleType'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_SaleType))\ndf['SaleType_filledNaNs']= df['SaleType_filledNaNs'].fillna(df['SaleType_filledNaNs'].value_counts().idxmax())\n\n#MasVnrType\nmode_MasVnrType =  df['MasVnrType'].mode()[0]\ndf['MasVnrType_filledNaNs'] = df.groupby('OverallQual')['MasVnrType'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_MasVnrType))\ndf['MasVnrType_filledNaNs']= df['MasVnrType_filledNaNs'].fillna(df['MasVnrType_filledNaNs'].value_counts().idxmax())\n\n#BsmtQual\nmode_BsmtQual =  df['BsmtQual'].mode()[0]\ndf['BsmtQual_filledNaNs'] = df.groupby('OverallQual')['BsmtQual'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_BsmtQual))\ndf['BsmtQual_filledNaNs']= df['BsmtQual_filledNaNs'].fillna(df['BsmtQual_filledNaNs'].value_counts().idxmax())\n\n#BsmtCond\nmode_BsmtCond =  df['BsmtCond'].mode()[0]\ndf['BsmtCond_filledNaNs'] = df.groupby('BsmtQual')['BsmtCond'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_BsmtCond))\ndf['BsmtCond_filledNaNs']= df['BsmtCond_filledNaNs'].fillna(df['BsmtCond_filledNaNs'].value_counts().idxmax())\n\n#Electrical\nmode_Electrical =  df['Electrical'].mode()[0]\ndf['Electrical_filledNaNs'] = df.groupby('Electrical')['Electrical'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_Electrical))\ndf['Electrical_filledNaNs']= df['Electrical_filledNaNs'].fillna(df['Electrical_filledNaNs'].value_counts().idxmax())\n\n#GarageCond\nmode_GarageCond =  df['GarageCond'].mode()[0]\ndf['GarageCond_filledNaNs'] = df.groupby('GarageQual')['GarageCond'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_GarageCond))\ndf['GarageCond_filledNaNs']= df['GarageCond_filledNaNs'].fillna(df['GarageCond_filledNaNs'].value_counts().idxmax())","bf6b9d20":"#Correlation with the SalePrice\n\ndf.corr()[\"SalePrice\"].abs().sort_values(ascending = False)","213b08ac":"%matplotlib\ndf.info()\ndf.describe()","3649f06a":"X = df[[\"OverallQual\", \"GrLivArea\", \"GarageCars_filledNaNs\", \"GarageArea_filledNaNs\", \"TotalBsmtSF_filledNaNs\", \\\n        \"1stFlrSF\", \"2ndFlrSF\", \"BsmtFullBath_filledNaNs\", \"FullBath\", \"HalfBath\", \"TotRmsAbvGrd\", \"YearBuilt\", \\\n        \"YearRemodAdd\", \"BsmtFinSF1_filledNaNs\", \"BsmtFinSF2_filledNaNs\", \"WoodDeckSF\", \"OpenPorchSF\", \\\n        \"EnclosedPorch\", \"ScreenPorch\", \"BedroomAbvGr\", \\\n        \"LotArea\", \"MiscVal\", \"MoSold\", \"YrSold\", \\\n        \"LandContour\", \"LotConfig\", \"MSZoning_filledNaNs\", \"BldgType\", \"HouseStyle\", \"Neighborhood\", \\\n        \"LotShape\", \"ExterQual\", \"KitchenQual_filledNaNs\", \"Functional_filledNaNs\", \\\n        \"SaleType_filledNaNs\", \"SaleCondition\", \"BsmtQual_filledNaNs\", \"Electrical_filledNaNs\", \\\n        #\"MasVnrType_filledNaNs\", \"BsmtCond_filledNaNs\", \"ExterCond\" \n       ]]\n\n\ncf = ColumnTransformer([\n    (\"LandContour\", OneHotEncoder(drop = \"first\"), [\"LandContour\"]),\n    (\"LotConfig\", OneHotEncoder(drop = \"first\"), [\"LotConfig\"]),\n    (\"MSZoning_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"MSZoning_filledNaNs\"]),\n    (\"BldgType\", OneHotEncoder(drop = \"first\"), [\"BldgType\"]),\n    (\"HouseStyle\", OneHotEncoder(drop = \"first\"), [\"HouseStyle\"]),\n    (\"Neighborhood\", OneHotEncoder(drop = \"first\"), [\"Neighborhood\"]),\n    (\"LotShape\", OneHotEncoder(drop = \"first\"), [\"LotShape\"]),\n    (\"ExterQual\", OneHotEncoder(drop = \"first\"), [\"ExterQual\"]),\n    (\"KitchenQual_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"KitchenQual_filledNaNs\"]),\n    (\"Functional_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"Functional_filledNaNs\"]),\n    (\"SaleType_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"SaleType_filledNaNs\"]),\n    (\"SaleCondition\", OneHotEncoder(drop = \"first\"), [\"SaleCondition\"]),\n    (\"Electrical_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"Electrical_filledNaNs\"]),\n    (\"BsmtQual_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"BsmtQual_filledNaNs\"]),\n    #(\"MasVnrType_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"MasVnrType_filledNaNs\"]),\n    #(\"BsmtCond_filledNaNs\", OneHotEncoder(drop = \"first\"), [\"BsmtCond_filledNaNs\"]),\n    #(\"ExterCond\", OneHotEncoder(drop = \"first\"), [\"ExterCond\"])\n\n], remainder = \"passthrough\")\n\ncf.fit(X)\n\nX_transformed = cf.transform(X)\ny = df[\"SalePrice\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X_transformed, y, train_size = 0.80)","316d6263":"#Linear Regression\nmodel_lnr = LinearRegression()\nmodel_lnr.fit(X_train, y_train)\n\ny_lnr_test_pred = model_lnr.predict(X_test)\n\nprint(\"Accuracy LnR train: \" + str(model_lnr.score(X_train, y_train)))\nprint(\"Accuracy LnR test: \" + str(model_lnr.score(X_test, y_test)))","1eb54914":"#Ordinary least squares \nX1_ols_train = sm.add_constant(X_train)\nX1_ols_test = sm.add_constant(X_test)\nmodel_ols = sm.OLS(y_train, X1_ols_train).fit()\n\ny_ols_test_pred =  model_ols.predict(X1_ols_test)\n\nmodel_ols.summary()","57f025cc":"#Read the test set\ninput_testfile = \"..\/input\/house-prices-advanced-regression-techniques\/test.csv\"\nd = pd.read_csv(input_testfile, header = 0, sep = ',', quotechar='\"')\ndf_test = pd.DataFrame(d)\ndf_test.head()","330b935a":"%matplotlib\ndf_test.info()\ndf_test.describe()","1b694177":"# Replace the NaNs in columns with float and int values with\n# the mean of the values in the same column\n\ndf_test['TotalBsmtSF_filledNaNs'] = df_test['TotalBsmtSF'].fillna(value=df_test['TotalBsmtSF'].mean())\ndf_test['TotalBsmtSF_filledNaNs'] = df_test['TotalBsmtSF_filledNaNs'].astype(\"int\")\n\ndf_test['BsmtFinSF1_filledNaNs'] = df_test['BsmtFinSF1'].fillna(value=df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF1_filledNaNs'] = df_test['BsmtFinSF1_filledNaNs'].astype(\"int\")\n\ndf_test['BsmtFinSF2_filledNaNs'] = df_test['BsmtFinSF2'].fillna(value=df_test['BsmtFinSF2'].mean())\ndf_test['BsmtFinSF2_filledNaNs'] = df_test['BsmtFinSF2_filledNaNs'].astype(\"int\")\n\ndf_test['BsmtFullBath_filledNaNs'] = df_test['BsmtFullBath'].fillna(value=df_test['BsmtFullBath'].mean())\ndf_test['BsmtFullBath_filledNaNs'] = df_test['BsmtFullBath_filledNaNs'].astype(\"int\") \n\n\ndf_test['GarageCars_filledNaNs'] = df_test['GarageCars'].fillna(value=df_test['GarageCars'].mean())\ndf_test['GarageCars_filledNaNs'] = df_test['GarageCars_filledNaNs'].astype(\"int\")\n\ndf_test['GarageArea_filledNaNs'] = df_test['GarageArea'].fillna(value=df_test['GarageArea'].mean())\ndf_test['GarageArea_filledNaNs'] = df_test['GarageArea_filledNaNs'].astype(\"int\")\n\ndf_test['LotFrontage_filledNaNs'] = df_test['LotFrontage'].fillna(value=df_test['LotFrontage'].mean())\ndf_test['LotFrontage_filledNaNs'] = df_test['LotFrontage_filledNaNs'].astype(\"int\")\n\ndf_test['MasVnrArea_filledNaNs'] = df_test['MasVnrArea'].fillna(value=df_test['MasVnrArea'].mean())\ndf_test['MasVnrArea_filledNaNs'] = df_test['MasVnrArea_filledNaNs'].astype(\"int\")\n\ndf_test['GarageYrBlt_filledNaNs'] = df_test['GarageYrBlt'].fillna(value=df_test['GarageYrBlt'].mean())\ndf_test['GarageYrBlt_filledNaNs'] = df_test['GarageYrBlt_filledNaNs'].astype(\"int\")","1d396a4a":"#fill the NaNs of a column with the most often value of the column\n\n#MSZoning\nmode_MSZoning_test =  df_test['MSZoning'].mode()[0]\ndf_test['MSZoning_filledNaNs'] = df_test.groupby('Neighborhood')['MSZoning'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_MSZoning_test))\ndf_test['MSZoning_filledNaNs']= df_test['MSZoning_filledNaNs'].fillna(df_test['MSZoning_filledNaNs'].value_counts().idxmax())\n\n#KitchenQual\nmode_KitchenQual_test =  df_test['KitchenQual'].mode()[0]\ndf_test['KitchenQual_filledNaNs'] = df_test.groupby('OverallQual')['KitchenQual'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_KitchenQual_test))\ndf_test['KitchenQual_filledNaNs']= df_test['KitchenQual_filledNaNs'].fillna(df_test['KitchenQual_filledNaNs'].value_counts().idxmax())\n\n#Functional\nmode_Functional_test =  df['Functional'].mode()[0]\ndf_test['Functional_filledNaNs'] = df_test.groupby('OverallQual')['Functional'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_Functional_test))\ndf_test['Functional_filledNaNs']= df_test['Functional_filledNaNs'].fillna(df_test['Functional_filledNaNs'].value_counts().idxmax())\n\n#SaleType\nmode_SaleType_test =  df_test['SaleType'].mode()[0]\ndf_test['SaleType_filledNaNs'] = df_test.groupby('SaleType')['SaleType'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_SaleType_test))\ndf_test['SaleType_filledNaNs']= df_test['SaleType_filledNaNs'].fillna(df_test['SaleType_filledNaNs'].value_counts().idxmax())\n\n#MasVnrType\nmode_MasVnrType_test =  df_test['MasVnrType'].mode()[0]\ndf_test['MasVnrType_filledNaNs'] = df_test.groupby('OverallQual')['MasVnrType'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_MasVnrType_test))\ndf_test['MasVnrType_filledNaNs']= df_test['MasVnrType_filledNaNs'].fillna(df_test['MasVnrType_filledNaNs'].value_counts().idxmax())\n\n#BsmtQual\nmode_BsmtQual_test =  df_test['BsmtQual'].mode()[0]\ndf_test['BsmtQual_filledNaNs'] = df_test.groupby('OverallQual')['BsmtQual'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_BsmtQual_test))\ndf_test['BsmtQual_filledNaNs']= df_test['BsmtQual_filledNaNs'].fillna(df_test['BsmtQual_filledNaNs'].value_counts().idxmax())\n\n#BsmtCond\nmode_BsmtCond_test =  df_test['BsmtCond'].mode()[0]\ndf_test['BsmtCond_filledNaNs'] = df_test.groupby('BsmtQual')['BsmtCond'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_BsmtCond_test))\ndf_test['BsmtCond_filledNaNs']= df_test['BsmtCond_filledNaNs'].fillna(df_test['BsmtCond_filledNaNs'].value_counts().idxmax())\n\n#Electrical\nmode_Electrical_test =  df_test['Electrical'].mode()[0]\ndf_test['Electrical_filledNaNs'] = df_test.groupby('Electrical')['Electrical'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_Electrical_test))\ndf_test['Electrical_filledNaNs']= df_test['Electrical_filledNaNs'].fillna(df_test['Electrical_filledNaNs'].value_counts().idxmax())\n\n#GarageCond\nmode_GarageCond_test =  df_test['GarageCond'].mode()[0]\ndf_test['GarageCond_filledNaNs'] = df_test.groupby('GarageQual')['GarageCond'].apply(lambda x: x.fillna(x.value_counts().idxmax() if x.value_counts().max() >=1 else mode_GarageCond_test))\ndf_test['GarageCond_filledNaNs']= df_test['GarageCond_filledNaNs'].fillna(df_test['GarageCond_filledNaNs'].value_counts().idxmax())","3fd75ea4":"df_test.head()","fa3e1105":"%matplotlib\ndf_test.info()\ndf_test.describe()","4849057d":"#Predicting\n\nX_pred = df_test[[\"OverallQual\", \"GrLivArea\", \"GarageCars_filledNaNs\", \"GarageArea_filledNaNs\", \"TotalBsmtSF_filledNaNs\", \\\n        \"1stFlrSF\", \"2ndFlrSF\", \"BsmtFullBath_filledNaNs\", \"FullBath\", \"HalfBath\", \"TotRmsAbvGrd\", \"YearBuilt\", \\\n        \"YearRemodAdd\", \"BsmtFinSF1_filledNaNs\", \"BsmtFinSF2_filledNaNs\", \"WoodDeckSF\", \"OpenPorchSF\", \\\n        \"EnclosedPorch\", \"ScreenPorch\", \"BedroomAbvGr\", \\\n        \"LotArea\", \"MiscVal\", \"MoSold\", \"YrSold\", \\\n        \"LandContour\", \"LotConfig\", \"MSZoning_filledNaNs\", \"BldgType\", \"HouseStyle\", \"Neighborhood\", \\\n        \"LotShape\", \"ExterQual\", \"KitchenQual_filledNaNs\", \"Functional_filledNaNs\", \\\n        \"SaleType_filledNaNs\", \"SaleCondition\", \"BsmtQual_filledNaNs\", \\\n        \"Electrical_filledNaNs\"]]\n\ndf_test[\"SalePrice_lnr_pred\"] = model_lnr.predict(cf.transform(X_pred))\n\ndf_test[\"SalePrice_ols_pred\"] =  model_ols.predict(sm.add_constant(cf.transform(X_pred)))","5764774a":"df_sub = pd.DataFrame({'Id': df_test['Id'], 'SalePrice': df_test['SalePrice_ols_pred']})\n\ndf_sub.to_csv (r'houseprice_submission_celine.csv', index = False, header=True)","6dc2bdc9":"## <a id='fitmodels'>2.2. Train and validate<\/a>","ad114a01":"## <a id='prep'>1.2. Preparing<\/a>","35fb1a5c":"# <a id='sub'>4. Submitting<\/a>","b7718ee7":"# <a id='data'>1. The data<\/a>","07b37aa2":"## <a id='understand'>1.1. Understanding<\/a>","2735ee54":"## <a id='proc'>2.1. Preprocessing, OneHotEncoder, splitting<\/a>","4d2d23af":"# <a id='fit'>2. Fitting and validating the models<\/a>","ed7a0a5a":"# <a id='pred'>3. Predicting<\/a>","406753af":"**<center><font size=5>House Prices: Linear regression, OneHotEncoder<\/font><\/center>**\n***\n\n**Date**: 21.01.2021\n\n**Table of Contents**\n- <a href='#data'>1. The data<\/a> \n    - <a href='#understand'>1.1. Understanding<\/a>\n    - <a href='#prep'>1.2. Preparing<\/a>\n- <a href='#fit'>2. Fitting and validating the models<\/a>\n    - <a href='#proc'>2.1. Preprocessing, OneHotEncoder, splitting<\/a>\n    - <a href='#fitmodels'>2.2. Train and validate<\/a>\n- <a href='#pred'>3. Predicting<\/a>\n- <a href='#sub'>4. Submitting<\/a>"}}