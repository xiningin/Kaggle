{"cell_type":{"2ba62b1d":"code","c1403bc3":"code","721e0387":"code","387e859f":"code","d5065df1":"code","2e637a3c":"code","d83a9699":"code","9912fab9":"code","f2969fa5":"code","b3fb4ac6":"code","556b0d33":"code","cdee3d5c":"code","3119404b":"code","60691bbb":"code","2b9a6a78":"code","47a13482":"code","031e8478":"code","c65dd54e":"code","fd283f21":"code","fa433c93":"code","66bc8bb4":"code","396e43a7":"markdown","38f28ca8":"markdown","756e8763":"markdown","a89c65e6":"markdown"},"source":{"2ba62b1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1403bc3":"from __future__ import unicode_literals, print_function\nimport plac\nimport random\nfrom pathlib import Path\nimport spacy\nfrom spacy.util import minibatch, compounding","721e0387":"import os","387e859f":"train_data = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')","d5065df1":"print(train_data.shape)\nprint(test_data.shape)","2e637a3c":"train_data.describe()","d83a9699":"train_data.text.dtype","9912fab9":"train_data['n_text_words'] = train_data['text'].apply(lambda text: len(str(text).split()))","f2969fa5":"test_data['n_text_words'] = test_data['text'].apply(lambda text: len(str(text).split()))","b3fb4ac6":"test_data.head()","556b0d33":"train_data_positive = train_data[(train_data.sentiment == 'positive') & (train_data.n_text_words > 3)]","cdee3d5c":"train_data_positive.shape","3119404b":"train_data_negative = train_data[(train_data.sentiment == 'negative') & (train_data.n_text_words > 3)]\ntrain_data_negative.shape","60691bbb":"def load_model(pre_model = None, label = None):\n    if pre_model is not None:\n        nlp = spacy.load(pre_model)\n        print(\"Loaded model '%s'\" % pre_model)\n    else:\n        nlp = spacy.blank(\"en\")  # create blank Language class\n        print(\"Created blank 'en' model\")\n\n        if \"ner\" not in nlp.pipe_names:\n            ner = nlp.create_pipe(\"ner\")\n            nlp.add_pipe(ner)\n        else:\n            ner = nlp.get_pipe(\"ner\")\n\n        if label is not None:\n            ner.add_label(label)\n\n    return nlp\n\ndef train_model(model, nlp, train_datas, n_iter = 30):\n    if model is None:\n        optimizer = nlp.begin_training()\n    else:\n        optimizer = nlp.resume_training()\n    pipe_exceptions = [\"ner\", \"trf_wordpiecer\", \"trf_tok2vec\"]\n    other_pipes = [pipe for pipe in nlp.pipe_names if pipe not in pipe_exceptions]\n\n    with nlp.disable_pipes(*other_pipes):\n        sizes = compounding(1.0, 64.0, 1.001)\n\n        for itn in range(n_iter):\n            random.shuffle(train_datas)\n            batches = minibatch(train_datas, size=sizes)\n            losses = {}\n            for batch in batches:\n                texts, annotations = zip(*batch)\n                nlp.update(texts, annotations, sgd=optimizer, drop=0.35, losses=losses)\n            print(itn, \"Losses\", losses)\n\n    return nlp\n\ndef test_model(ner_model, text):\n    doc = ner_model(text)\n    ent_array = []\n    for ent in doc.ents:\n        start = text.find(ent.text)\n        end = start + len(ent.text)\n        new_int = [start, end, ent.label_]\n        \n        if new_int not in ent_array:\n            ent_array.append([start, end, ent.label_])\n        \n    return text[ent_array[0][0]:ent_array[0][1]] if len(ent_array) > 0 else text\n\n\ndef save_model(ner_model, output_dir = None, new_model_name = None):\n    if output_dir is not None:\n        output_dir = Path(output_dir)\n        if not output_dir.exists():\n            output_dir.mkdir()\n        ner_model.meta[\"name\"] = new_model_name\n        ner_model.to_disk(output_dir)\n        print(\"Saved model to\", output_dir)\n\ndef get_train_datas(data):\n    train_datas = []\n    texts = data.text\n    selected_texts = data.selected_text\n    for selected_text, text in zip(selected_texts, texts):\n        start = text.find(selected_text)\n        end = start + len(selected_text)\n        train_datas.append((text, {\"entities\":[(start, end, \"selected_text\")]}))\n    return train_datas\n\ndef get_model(sentiment, train_datas, more_iters = 30):\n    if sentiment == 'positive':\n        positive_model_path = \"\/kaggle\/working\/models\"\n        positive_datas = train_datas\n        if not os.path.exists(positive_model_path):\n            nlp = load_model(label = 'selected_text')\n            ner_model_positive = train_model(None, nlp, positive_datas, n_iter=50)\n            save_model(ner_model_positive, output_dir = \"\/kaggle\/working\/models\", new_model_name = \"posi_model\")\n        else:\n            ner_model_positive = load_model(positive_model_path)\n#             ner_model_positive = spacy.load(\"\/kaggle\/working\/models\")\n            if more_iters > 0:\n                ner_model_positive = train_model(positive_model_path, ner_model_positive, positive_datas, more_iters)\n                save_model(ner_model_positive, output_dir = \"\/kaggle\/working\/models\", new_model_name = \"posi_model\")\n        return ner_model_positive\n    else:\n        negative_model_path = \"\/kaggle\/working\/models_nega\"\n        negative_datas = train_datas\n        if not os.path.exists(negative_model_path):\n            nlp = load_model(label = 'selected_text')\n            ner_model_negative = train_model(None, nlp, negative_datas, n_iter=50)\n            save_model(ner_model_negative, output_dir = \"\/kaggle\/working\/models_nega\", new_model_name = \"nega_model\")\n        else:\n            ner_model_negative = load_model(negative_model_path)\n#             ner_model_negative = spacy.load(\"\/kaggle\/working\/models_nega\")\n            if more_iters > 0:\n                ner_model_negative = train_model(negative_model_path, ner_model_negative, negative_datas, more_iters)\n                save_model(ner_model_negative, output_dir = \"\/kaggle\/working\/models_nega\", new_model_name = \"nega_model\")\n        return ner_model_negative","2b9a6a78":"print(os.path.exists(\"\/kaggle\/working\/models_nega\"))\nprint(os.path.exists(\"\/kaggle\/working\/models\"))","47a13482":"positive_datas = get_train_datas(train_data_positive)\nnegative_datas = get_train_datas(train_data_negative)","031e8478":"print(len(positive_datas))\nprint(len(negative_datas))","c65dd54e":"ner_model_positive = get_model('positive', positive_datas, more_iters=50)\nner_model_negative = get_model('negative', negative_datas, more_iters=50)","fd283f21":"pre_list = []\nfor i in range(test_data.shape[0]):\n    t_data = test_data.iloc[i]\n    if t_data.sentiment == 'neutral' or t_data.n_text_words <= 3:\n        pre_list.append(t_data.text)\n    elif t_data.sentiment == 'positive':\n        pre_list.append(test_model(ner_model_positive, t_data.text))\n    else:\n        pre_list.append(test_model(ner_model_negative, t_data.text))","fa433c93":"submission['selected_text'] = pre_list\ndisplay(submission.head(10))","66bc8bb4":"submission.to_csv(\"submission.csv\", index = False)","396e43a7":"### train and save spacy-NER model for Positive and Negative\n### \u8bad\u7ec3\u5e76\u5b58\u50a8ner\u6a21\u578b(positive , negative)","38f28ca8":"# ner_with_spacy\n- Learn from ***Twitter sentiment Extaction-Analysis,EDA and Model*** https:\/\/www.kaggle.com\/tanulsingh077\/twitter-sentiment-extaction-analysis-eda-and-model","756e8763":"### predict\n### \u9884\u6d4b\u6807\u7b7e","a89c65e6":"## use spacy interface to fit two NER model\n## \u4f7f\u7528spacy\u5305\u8bad\u7ec3\u4e00\u4e2apositive NER\u4e0e\u4e00\u4e2anegative NER"}}