{"cell_type":{"8b57e27a":"code","682f109b":"code","ce707ee4":"code","2ccc3800":"code","fc4ed378":"code","49d87e04":"code","db601d32":"code","46eea552":"code","f223f797":"code","ecc55232":"code","92545de5":"code","0b73d9d2":"code","12d75620":"code","32772e2f":"code","6084130e":"code","54f1c143":"code","3d2a9fb3":"code","61b66668":"code","a641f1ba":"code","b90b3656":"code","0383ad4f":"markdown","f39f5ff1":"markdown","c9b38d73":"markdown","573b7e40":"markdown","cf22427b":"markdown","d0924dcd":"markdown","e7c49151":"markdown","117ff6be":"markdown","791aaa2d":"markdown"},"source":{"8b57e27a":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.keras as ks\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics","682f109b":"df = pd.read_csv('..\/input\/sunspots\/Sunspots.csv')\nprint(df.shape)\ndf.head()","ce707ee4":"df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')","2ccc3800":"df2 = df.drop(['Unnamed: 0', 'Date'], axis=1)\ndf2.index = df.Date\ndf2.tail()","fc4ed378":"plt.style.use('default')\nplt.style.use('ggplot')\n\na = '1749-01-31'\nb = '2021-01-31'\n\ndf2.loc[a:b].plot(figsize=(16, 7), color='red')\nplt.title('Sunspot Data from 1769-2021')\nplt.xlabel('Year')\nplt.ylabel('Sunspot_value')\nplt.show()","49d87e04":"a = '2019-01-31'\nb = '2021-01-31'\n\ndf2.loc[a:b].plot(figsize=(10, 5), color='green')\nplt.title('Sunspot Data on the past 2 years')\nplt.show()","db601d32":"def load_data(seq_len, series):\n    x = []\n    y = []\n    \n    for i in range(seq_len, len(series)):\n        x.append(series.iloc[i-seq_len:i, 0])\n        y.append(series.iloc[i, 0])\n    \n    x_train = x[:int(0.9*len(series))]\n    y_train = y[:int(0.9*len(series))]\n    \n    x_test = x[int(0.9*len(series)):]\n    y_test = y[int(0.9*len(series)):]\n    \n    x_train = np.array(x_train)\n    x_test = np.array(x_test)\n    y_train = np.array(y_train)\n    y_test = np.array(y_test)\n    \n    x_train = np.reshape(x_train, (x_train.shape[0], seq_len, 1))\n    x_test = np.reshape(x_test, (x_test.shape[0], seq_len, 1))\n    \n    return [x_train,y_train, x_test, y_test]","46eea552":"x_train, y_train, x_test, y_test = load_data(64, df2)\n\nprint(f'the shape of x_train is {x_train.shape}\\nthe shape of y_train is {y_train.shape}\\nthe shape of x_test is {x_test.shape}\\nthe shape of y_test is {y_test.shape}')","f223f797":"model = ks.models.Sequential([\n    ks.layers.Conv1D(filters=64, kernel_size=5, activation='relu', input_shape=x_train.shape[-2:]),\n    ks.layers.Dense(64, activation='relu'), \n    ks.layers.Dense(32, activation='relu'), \n    ks.layers.Dense(10, activation='relu'),\n    ks.layers.Dense(1), \n    ks.layers.Lambda(lambda x: x*250)\n    \n])\nmodel.summary()","ecc55232":"ks.utils.plot_model(model)","92545de5":"def make_dataset(x, y, buffer_size=1000, batch_size=150):\n    data = tf.data.Dataset.from_tensor_slices((x, y))\n    data = data.cache().shuffle(buffer_size).batch(batch_size)\n    return data","0b73d9d2":"train_dataset = make_dataset(x_train, y_train)\ntest_dataset = make_dataset(x_test, y_test)","12d75620":"\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch \/22))\noptimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_dataset, epochs=100, callbacks=[lr_schedule], verbose=0)\n","32772e2f":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([1e-8, 1e-4, 0, 60])","6084130e":"\ntf.random.set_seed(51)\nnp.random.seed(51)\n\n\nmodel = ks.models.Sequential([\n    ks.layers.Conv1D(filters=64, kernel_size=5, activation='relu', input_shape=x_train.shape[-2:]), \n    ks.layers.Dense(64, activation='relu'), \n    ks.layers.Dense(32, activation='relu'),\n    ks.layers.Dense(10, activation='relu'),\n    ks.layers.Dense(1), \n    ks.layers.Lambda(lambda x: x*250)\n    \n])\nmodel.compile(loss=ks.losses.Huber(), optimizer=ks.optimizers.SGD(lr=8e-5, momentum=0.9), \n             metrics='mae')\nhistory = model.fit(train_dataset, epochs=1000, verbose=0)","54f1c143":"mae = history.history['mae']\nloss = history.history['loss']\nepochs = range(len(loss))\n\nplt.figure(figsize=(9, 5))\nplt.plot(epochs[400:], mae[400:], color='blue', label='trainig_mae')\nplt.plot(epochs[400:], loss[400:], color='red', label='training_loss')\nplt.title('MAE and Loss')\nplt.xlabel('epochs')\nplt.legend()\nplt.show()","3d2a9fb3":"forecast = model.predict(x_test)\nforecast.shape","61b66668":"result = []\nfor i in forecast[:, 0, 0]:\n    result.append(i)\nresult = np.array(result)\nresult.shape","a641f1ba":"print(f'the mean absolute error of the model is {metrics.mean_absolute_error(y_test, result)}')\n\nprint(f'the rmse of the mode is {metrics.r2_score(y_test,result)}')","b90b3656":"def plot_forecast(test, prediction):\n    plt.figure(figsize=(12, 6))\n    plt.plot(test,color='blue', label='Actual value')\n    plt.plot(prediction, color='orange', label='predicted Value')\n    plt.title('sunspot forecast')\n    plt.legend()\n    plt.show()\nplot_forecast(y_test, result)","0383ad4f":"![image.png](attachment:image.png)","f39f5ff1":"*Reading the csv file using pandas*","c9b38d73":"*trial model using learning rates*","573b7e40":"# Sunspot forecast ","cf22427b":"*Importing the Libraries*","d0924dcd":"*visualizing the models learning rates with respect to their losses*","e7c49151":"*Visualizing the data from 1769 to 2021*","117ff6be":"*sunspots in the last two years*","791aaa2d":"*final model - to make predictions*"}}