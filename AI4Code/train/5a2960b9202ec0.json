{"cell_type":{"b9939916":"code","fa9f886a":"code","3dcac136":"code","27622fa0":"code","4e6773d7":"code","640d2bd1":"code","30f05ca3":"code","86318558":"code","2587d7dc":"code","c2b0968b":"code","8ca3f047":"code","2e862087":"code","981db80e":"code","7b2259db":"code","ad068222":"code","b1816e3f":"markdown","20aa9960":"markdown","1361c90e":"markdown","2470c43e":"markdown","9655d573":"markdown"},"source":{"b9939916":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualization library \nimport matplotlib.pyplot as plt\n\nfrom scikitplot.metrics import plot_roc_curve\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fa9f886a":"train = pd.read_csv('..\/input\/train.csv', index_col=False)\ntest = pd.read_csv('..\/input\/test.csv', index_col=False)\ntest_y = pd.read_csv('..\/input\/gender_submission.csv', index_col=False)","3dcac136":"train.info()","27622fa0":"train.describe()","4e6773d7":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","640d2bd1":"def impute_age(cols):\n    ''' Imputing the age attribute by checking the pclass\n        @param: cols list of column values\n    '''\n    pclass = cols[0]\n    age = cols[1]\n    \n    if pd.isnull(age):        \n        if pclass==3:\n            age = 22.0\n        elif pclass==2:\n            age = 35.0\n        else:\n            age = 40.0\n    return age\n\ndef cleanse_data(dataset, drop_cols):\n    ''' Cleansing the dataframe data by removing the empty values and NaN\n        @param: \n            dataset Dataframe\n            drop_cols List of column names\n    '''\n    embark = pd.get_dummies(dataset['Embarked'], drop_first=True)\n    sex = pd.get_dummies(dataset['Sex'], drop_first=True)\n    dataframe = dataset.copy()\n    \n    dataframe['Age'] = dataset[['Pclass', 'Age']].apply(impute_age, axis=1)\n        \n    dataframe = dataframe.drop(drop_cols, axis=1)\n    \n    dataframe = pd.concat([dataframe, sex, embark], axis=1)\n    \n    return dataframe\n\n","30f05ca3":"drop_cols = ['Cabin', 'Name', 'Ticket', 'Fare', 'Sex', 'Embarked', 'PassengerId']\n\ntrain_df = cleanse_data(train, drop_cols)\ntest_df = cleanse_data(test, drop_cols)","86318558":"train_df.head()","2587d7dc":"from sklearn.linear_model import LogisticRegression","c2b0968b":"X = train_df.loc[:, train_df.columns != 'Survived']\ny = train_df['Survived']\n\nlog_model = LogisticRegression()\n\nlog_model.fit(X, y)","8ca3f047":"pred = log_model.predict(test_df)","2e862087":"from sklearn.metrics import confusion_matrix, classification_report\n\nprint(\"Classification Report: \\n %s\" % classification_report(pred, test_y['Survived']))\nprint(\"Confusion Matrix : \\n %s \" % confusion_matrix(pred, test_y['Survived']))\n","981db80e":"result = test.copy()\n\nresult['Survived'] = pd.Series(pred)","7b2259db":"result.head()\n\nresult[['PassengerId', 'Survived']].to_csv('submission.csv', sep=',')","ad068222":"import os\n\nos.listdir('.')","b1816e3f":"### Imputing the missing value\nWe need to find column with NaN value and impute the column cell with certain values before we use the dataset for training.\n","20aa9960":"Plotting the null or missing values of the dataframe","1361c90e":"## Extract data from the input file\nWe need to extract the data from the input file and create it as a Dataframe using Pandas library.\n","2470c43e":"Checking the statistical details of the data `Dataframe.describe()`","9655d573":"# Binary Classification\n\n## Dataset\n\nThe dataaset `Titanic` consists of two datasets that include passenger information like name, age, gender, socio-economic class, etc. One dataset is titled `train.csv` and the other is titled `test.csv`.\n\nTrain.csv will contain the details of a subset of the passengers on board (891 to be exact) and importantly, will reveal whether they survived or not, also known as the \u201cground truth\u201d.\n\nThe `test.csv` dataset contains similar information but does not disclose the \u201cground truth\u201d for each passenger. It\u2019s your job to predict these outcomes.\n\nUsing the patterns you find in the train.csv data, predict whether the other 418 passengers on board (found in test.csv) survived.\n\n## Approach\n\nBinary class classification. "}}