{"cell_type":{"f69ce51f":"code","044ca7b2":"code","621a891d":"code","c8424f80":"code","3288a00f":"code","43cc895e":"code","99009e25":"code","fc1dfc58":"code","67db1969":"code","2e5c98f9":"code","efab8c3e":"code","3a255cbc":"code","fa34fdd4":"code","be7c8423":"code","1d04c315":"code","60c8687c":"code","8fa35783":"code","ff765a0f":"code","12ba34ac":"code","10b36a2c":"code","80af2034":"code","8b126a9b":"code","ce9a22e4":"code","5d03b9fc":"code","0ec89eef":"code","4b3ab78b":"code","66c26135":"code","a61a1978":"code","1d4d5232":"code","b9423f8d":"code","211b7367":"code","d8329eac":"code","d7d4f918":"code","f4ae65b5":"code","22aa916a":"code","4dcf8676":"code","652f1694":"code","c80d52e3":"code","b2f16e16":"code","df552405":"code","80ecb1b1":"code","682415e0":"code","7f69ff11":"code","474210d3":"code","f200b163":"code","95495d90":"code","38b16f1c":"code","48d2170e":"code","c336fe13":"code","4cca3db2":"code","875d91b2":"code","b7bfdc67":"code","0d2333c8":"code","1bc79eaa":"code","bc7c1b72":"code","e7f13533":"code","319cfda2":"markdown","7d1e249b":"markdown","377f2f55":"markdown","22f7bc88":"markdown","be4f4189":"markdown","c00addca":"markdown","63236153":"markdown","58e46dc4":"markdown","17250ddf":"markdown","e43aee02":"markdown","00e47fce":"markdown","2a47972d":"markdown","1edc4eed":"markdown","181c98ac":"markdown","ef230214":"markdown","1bd883b0":"markdown","67741da0":"markdown","b0e1e1f8":"markdown"},"source":{"f69ce51f":"import os\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom wordcloud import WordCloud\n\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk import word_tokenize\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score, confusion_matrix\nfrom sklearn.metrics import classification_report\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","044ca7b2":"X_train_filepath = os.path.join('..', 'input', 'train.csv')\nX_test_filepath = os.path.join('..', 'input', 'test.csv')\nsample_filepath = os.path.join('..', 'input', 'sample_submission.csv')\nX_train_filepath, X_test_filepath, sample_filepath","621a891d":"df_train = pd.read_csv(X_train_filepath, encoding='ISO-8859-1')\ndf_train.head()","c8424f80":"df_test = pd.read_csv(X_test_filepath, encoding='ISO-8859-1')\ndf_test.head()","3288a00f":"df_train.shape, df_test.shape","43cc895e":"df_sample = pd.read_csv(sample_filepath, encoding='ISO-8859-1')\ndf_sample.head()","99009e25":"df_train.info()","fc1dfc58":"df_train[\"target\"].value_counts()","67db1969":"insincere = df_train[df_train[\"target\"] == 1]\nsincere = df_train[df_train[\"target\"] == 0]","2e5c98f9":"sincere.head()","efab8c3e":"sincere.info()","3a255cbc":"insincere.head()","fa34fdd4":"insincere.info()","be7c8423":"ax, fig = plt.subplots(figsize=(10, 7))\nquestion_class = df_train[\"target\"].value_counts()\nquestion_class.plot(kind= 'bar', color= [\"blue\", \"orange\"])\nplt.title('Bar chart')\nplt.show()","1d04c315":"print(df_train['target'].value_counts())\nprint(sum(df_train['target'] == 1) \/ sum(df_train['target'] == 0) * 100, \"percent of questions are insincere.\")\nprint(100 - sum(df_train['target'] == 1) \/ sum(df_train['target'] == 0) * 100, \"percent of questions are sincere\")","60c8687c":"stop_words = stopwords.words(\"english\")","8fa35783":"insincere_words = ''\n\nfor question in insincere.question_text:\n    text = question.lower()\n    tokens = word_tokenize(text)\n    for words in tokens:\n        insincere_words = insincere_words + words + ' '","ff765a0f":"# Generate a word cloud image\ninsincere_wordcloud = WordCloud(width=600, height=400).generate(insincere_words)\n#Insincere Word cloud\nplt.figure( figsize=(10,8), facecolor='k')\nplt.imshow(insincere_wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show()","12ba34ac":"insincere[\"questions_length\"] = insincere.question_text.apply(lambda x: len(x))\nsincere[\"questions_length\"] = sincere.question_text.apply(lambda x: len(x))","10b36a2c":"insincere[\"questions_length\"].mean()","80af2034":"sincere[\"questions_length\"].mean()","8b126a9b":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.distplot(insincere.questions_length, hist=True, label=\"insincere\")\nsns.distplot(sincere.questions_length, hist=True, label=\"sincere\");","ce9a22e4":"insincere['number_words'] = insincere.question_text.apply(lambda x: len(x.split()))\nsincere['number_words'] = sincere.question_text.apply(lambda x: len(x.split()))","5d03b9fc":"insincere['number_words'].mean()","0ec89eef":"sincere['number_words'].mean()","4b3ab78b":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.distplot(insincere.number_words, hist=True, label=\"insincere\")\nsns.distplot(sincere.number_words, hist=True, label=\"sincere\");","66c26135":"vectorizer = TfidfVectorizer(min_df=5, ngram_range=(1,3),\n                        strip_accents='unicode',lowercase =True, \n                        stop_words = 'english',tokenizer=word_tokenize)","a61a1978":"train_vectorized = vectorizer.fit_transform(df_train.question_text.values)","1d4d5232":"test_vectorized = vectorizer.fit_transform(df_test.question_text.values)","b9423f8d":"X_train, X_val, y_train, y_val = train_test_split(train_vectorized, df_train.target.values, test_size=0.1, stratify = df_train.target.values)","211b7367":"lr = LogisticRegression(C=10, class_weight={0:0.07 , 1:1})","d8329eac":"lr.fit(X_train, y_train)","d7d4f918":"y_pred_train1 = lr.predict(X_train)","f4ae65b5":"print(f1_score(y_train, y_pred_train1))","22aa916a":"y_pred_val1 = lr.predict(X_val)","4dcf8676":"print(f1_score(y_val, y_pred_val1))","652f1694":"cm1 = confusion_matrix(y_val, y_pred_val1)\ncm1","c80d52e3":"sns.heatmap(cm1, cmap=\"Blues\", annot=True, square=True, fmt=\".0f\");","b2f16e16":"print(classification_report(y_val, y_pred_val1))","df552405":"mnb = MultinomialNB(alpha=0.1)","80ecb1b1":"mnb.fit(X_train, y_train)","682415e0":"y_pred_train2 = mnb.predict(X_train)","7f69ff11":"print(f1_score(y_train, y_pred_train2))","474210d3":"y_pred_val2 = mnb.predict(X_val)","f200b163":"print(f1_score(y_val, y_pred_val2))","95495d90":"cm2 = confusion_matrix(y_val, y_pred_val2)\ncm2","38b16f1c":"sns.heatmap(cm2, cmap=\"Blues\", annot=True, square=True, fmt=\".0f\");","48d2170e":"print(classification_report(y_val, y_pred_val2))","c336fe13":"from sklearn.svm import LinearSVC\n\nsvc = LinearSVC(C=5, class_weight={0:0.07 , 1:1})\nsvc.fit(X_train, y_train)","4cca3db2":"y_pred_train3 = svc.predict(X_train)","875d91b2":"print(f1_score(y_train, y_pred_train3))","b7bfdc67":"y_pred_val3 = svc.predict(X_val)","0d2333c8":"print(f1_score(y_val, y_pred_val3))","1bc79eaa":"cm3 = confusion_matrix(y_val, y_pred_val3)\ncm3","bc7c1b72":"sns.heatmap(cm3, cmap=\"Blues\", annot=True, square=True, fmt=\".0f\");","e7f13533":"print(classification_report(y_val, y_pred_val3))","319cfda2":"# Quora Insincere Questions Classification:\n","7d1e249b":"## Problem:\n* **Handle toxic and disivie content \/ miseleading content**","377f2f55":"## Data Fields:","22f7bc88":"**We have a Unbalenced Data**","be4f4189":"## Classification with Logistic Regression :","c00addca":"## Number of words distribution in sincere and insincere questions:","63236153":"* **To do that we have to develop a model that identify and flag insincere questions**","58e46dc4":"## TfidfVectorizer :","17250ddf":"## Detect toxic content to improve online conversations\n","e43aee02":"## Exploratory Data Analysis:","00e47fce":"## Length distribution in sincere and insincere questions:","2a47972d":"## Classification with MultinomialNB:","1edc4eed":"## Evaluation:","181c98ac":"## Distribution sincere\/insincere plots:","ef230214":"* **qid : unique question identifer**\n\n* **question_text : Quora question text**\n\n* **Target : a question labeled << insincere >> has a value of 1, otherwise 0**","1bd883b0":"## Insincere Word cloud:","67741da0":"* **For each qid in the testset, predict the corresponding questions_text:**\n\n * **Is insincere => 1 (Target)**\n\n * **Is sincere => 0**\n\n* **Submissions are evaluated on F1 Score between the predicted and the observed targets**","b0e1e1f8":"## Classification with Linear SVC:"}}