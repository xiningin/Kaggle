{"cell_type":{"fd5b5fa4":"code","9e7de3b0":"code","fc185d12":"code","f28f8888":"code","92b9ee09":"code","6f36b209":"code","5e398469":"code","bead1c24":"code","533bfcb4":"code","6b1f065c":"code","2b1ea8bb":"code","a4eee36e":"code","56dc264c":"code","60df4433":"code","4d34e9ef":"code","ab552b95":"code","475aefe5":"code","62c9f82b":"code","bbe7b97e":"code","97056f81":"code","a74773f2":"code","03565664":"code","541dd342":"code","b3c6d73b":"code","4e7b5753":"code","65a5b471":"code","bec4eb74":"code","fb09c030":"code","fb2ad8a4":"code","7e32d78e":"code","b5932323":"code","fe23a43c":"code","3e281def":"code","021bb5ca":"code","070740bd":"code","c1fe362b":"code","563aa590":"code","2d853257":"code","7e9e1d9d":"code","a646a35e":"code","a37f8483":"code","27d81e65":"code","93fa62b7":"markdown","3070c6fa":"markdown","36ace4ef":"markdown","cce9441b":"markdown","92d76032":"markdown","3fc9f58d":"markdown","a684ef97":"markdown","b4c91e9a":"markdown","0179fcaa":"markdown","c3db63a1":"markdown","90a25e3b":"markdown","6dde8572":"markdown"},"source":{"fd5b5fa4":"import numpy as np","9e7de3b0":"# Creating arrays: from lists and using built-in functions\n# arrays from lists\ndistances = [10, 15, 17, 26, 20]\ntimes = [0.3, 0.47, 0.55, 1.20, 1.0]\n\ndistances = np.array(distances)\ntimes = np.array(times)\n\n# speeds can be calculated as :\nprint(distances\/times)","fc185d12":"product_quantities = [13, 5, 6, 10, 11]\nprices = [1.2, 6.5, 1.0, 4.8, 5.0]\n\nproduct_quantities = np.array(product_quantities)\nprices = np.array(prices)\n\n#we can find the total_sum as \nnp.sum(product_quantities*prices)","f28f8888":"product_quantities","92b9ee09":"type(product_quantities)","6f36b209":"# If we pass np.array() a list of lists, it will create a 2-dimensional array. \n# If pass a list of lists of lists, it will create a 3-dimensional array, and so on and so forth.\n\nA = np.array([[1, 2], [3, 4]])\nA","5e398469":"# Create a length-10 integer array filled with zeros\nnp.zeros(10, dtype=int)","bead1c24":"# Create a 3x5 floating-point array filled with ones\nnp.ones(shape=(3, 5), dtype=float)","533bfcb4":"# Create an array filled with a linear sequence\n# Starting at 0, ending at 20, stepping by 2\n\nnp.arange(start=0, stop=20, step=2)","6b1f065c":"# Create an array of 20 values evenly spaced between 0 and 1\nnp.linspace(0, 1, 50)","2b1ea8bb":"A = np.ones(shape=(3, 4, 2))\nA\n# default dtype is float","a4eee36e":"A.ndim   # ndim means the no. of dimensions","56dc264c":"A.shape   # indicates the total dimensions of the array. So we have 3 arrays each of (4 by 2)","60df4433":"A.size  # total no. of elements","4d34e9ef":"x = np.arange(start=0, stop=20, step=2)\nx","ab552b95":"x + 1","475aefe5":"x * 2","62c9f82b":"x\/2","bbe7b97e":"np.sin(x)","97056f81":"# np.exp(x) -> The exponential function is e^x where e is a mathematical \n# constant called Euler's number, approximately 2.718281\nnp.exp(x)","a74773f2":"np.sqrt(x)","03565664":"#Extract all odd numbers from arr\n# Input:\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\narr[arr%2!=0]\n","541dd342":"a = np.array([1,2,3,2,3,4,3,4,5,6])\nb = np.array([7,2,10,2,7,4,9,4,9,8])\n\nprint(np.where(a == b))","b3c6d73b":"one_dim = np.linspace(-0.5, 0.6, 12)\none_dim","4e7b5753":"one_dim[5]  # accessing 5th element","65a5b471":"one_dim[0] = 1  # setting the 0th element to 1\none_dim","bec4eb74":"two_dim = np.array([[3, 5, 2, 4], [7, 6, 5, 5], [1, 6, -1, -1]])\ntwo_dim","fb09c030":"two_dim[0,3]","fb2ad8a4":"two_dim[0,0] = -1  # setting the 0th row , 0th column element\ntwo_dim","7e32d78e":"print(one_dim)\n\nprint(one_dim[:-2])\n\nprint(one_dim[2:5]) # start from index 2 upto index 5-1 =>i.e elements at index 2,3,4 \n\nprint(one_dim[:5]) # start to 5-1\n\nprint(one_dim[-5:]) # last-5 to last \n","b5932323":"print(two_dim)\n\nprint(two_dim[:2,:2])  # from 0th to 1st row, from 0th to 1st column","fe23a43c":"two_dim[:,1:3] # accessing all rows and only columns from 1 to 2 ","3e281def":"one_dim","021bb5ca":"one_dim.reshape(2,6) # reshaped a 1-dimension array into 2D array with 2 rows , 6 columns ","070740bd":"two_dim","c1fe362b":"two_dim.flatten()","563aa590":"# throwing a coin 1 time: 0 is tail, 1 heads\nnp.random.randint(low=0, high=2, size=1)  # so may get a different value , each time you run","2d853257":"# throwing a coin 10 times: 0 is tail, 1 heads\nexperiment = np.random.randint(0,2, size=10)\nprint(experiment)\nprint(experiment.sum())","7e9e1d9d":"# Each column of this matrix will be one 10-tosses simulation\ncoin_matrix = np.random.randint(0,2,size=(10000,10))   \n# so we have 10000 experiments i.e 10000 rows each of 10 tosses\n\ncoin_matrix[:5,:]  # I am printing only 1st 5 experiments i.e first 5 rows","a646a35e":"# Note : experiment is outcome of flipping 10 coins\ncounts = coin_matrix.sum(axis=1)  # axis = 1 means row wise. default is column wise\nprint(counts[:25])\n\nprint(counts.mean()) # average of heads in all the experiments.\n\nprint(np.median(counts)) # median is the center point in a sorted list\n\nprint(counts.min(), counts.max())\n\nprint(counts.std())  # standard deviation of the array counts.","a37f8483":"np.bincount(counts)","27d81e65":"unique_numbers = np.arange(0,11) # The numbers that were observed in the counts vector\nobserved_times = np.bincount(counts) # Check out the documentation for the np.bincount function\nfor n, count in zip(unique_numbers, observed_times):\n    print(f\"{n} heads observed {count} times ({100*count\/10000}%)\")","93fa62b7":"To calculate how many heads we got in every experiment, we can use the sum attribute, but in this case, we want to sum all the rows. To sum all the rows in NumPy, we use the additional arguments, axis and **set axis=1**; this will give you an array with a count of how many heads you get in every experiment:","3070c6fa":"<font color='green'><b>Universal Functions<\/b><\/font><br>\nAnother very useful thing about NumPy is that it provides us with what is\ncalled universal functions. **Universal functions** are mathematical functions\nthat we can use in arrays, and when we use these functions in arrays, it will\nbe applied element by element.","36ace4ef":"# **Some Simple Examples of creating numpy arrays :**","cce9441b":"## **Reshaping of arrays:**\n\nChanging the shape of a given array\nReshaping arrays changes an array from one dimension to another dimension. For example, ***one-dimension to two-dimension, one-dimension to three-dimension, and three-dimension to two-dimension.***","92d76032":"**Some attributes of arrays**","3fc9f58d":"# **Example: Performing a simulation**\n--\n\nNow let's learn **how to use NumPy in a real-world scenario**. Here, we will cover two examples of simulations using NumPy, and in the process, we will also learn about other operations that we can do with arrays.\n\n<h3><font color='green'><b>Coin flips<\/b><\/font><\/h3>","a684ef97":"**The distribution of the number of heads that you get in the experiment.**","b4c91e9a":"# Numpy\n\n> One of the most fundamental packages in Python, NumPy is a general-purpose array-processing package. \n\n> It provides high-performance multidimensional array objects and tools to work with the arrays. \n\n> NumPy facilitates math operations on arrays and their vectorization. This significantly enhances performance and speeds up the execution time correspondingly.\n\n![](https:\/\/drive.google.com\/uc?export=view&id=1utr1sK7Pj1yUSevA2LQIwGWteMZ18aF2)","0179fcaa":"There are the following two ways to create linear sequences:\n\n> **np.arange**\n\n> **np.linspace**","c3db63a1":"## **Indexing:** Getting and setting the value of individual array elements","90a25e3b":"# Common manipulations: indexing, slicing and reshaping","6dde8572":"## **Slicing:** Getting and setting smaller subarrays within a larger array"}}