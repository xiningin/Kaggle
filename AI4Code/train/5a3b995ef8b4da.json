{"cell_type":{"6676aaec":"code","59a7b0b5":"code","b46def58":"code","82b05371":"code","3d6ee930":"code","105d0793":"code","7abb1a62":"code","82aa46bb":"code","2e675450":"markdown","111c9e64":"markdown","8d021581":"markdown","19964e5e":"markdown","fa4501bf":"markdown","653e85b5":"markdown","f6a4e2b3":"markdown","31935e6f":"markdown"},"source":{"6676aaec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\nimport statsmodels.api as sm\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59a7b0b5":"import pandas as pd\n\nStock_Market = {'Year': [2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016],\n                'Month': [12, 11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1],\n                'Interest_Rate': [2.75,2.5,2.5,2.5,2.5,2.5,2.5,2.25,2.25,2.25,2,2,2,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75],\n                'Unemployment_Rate': [5.3,5.3,5.3,5.3,5.4,5.6,5.5,5.5,5.5,5.6,5.7,5.9,6,5.9,5.8,6.1,6.2,6.1,6.1,6.1,5.9,6.2,6.2,6.1],\n                'Stock_Index_Price': [1464,1394,1357,1293,1256,1254,1234,1195,1159,1167,1130,1075,1047,965,943,958,971,949,884,866,876,822,704,719]        \n                }\n\ndf = pd.DataFrame(Stock_Market,columns=['Year','Month','Interest_Rate','Unemployment_Rate','Stock_Index_Price']) \n\nprint (df)","b46def58":"plt.scatter(df['Interest_Rate'], df['Stock_Index_Price'], color='red')\nplt.title('Stock Index Price Vs Interest Rate', fontsize=14)\nplt.xlabel('Interest Rate', fontsize=14)\nplt.ylabel('Stock Index Price', fontsize=14)\n#plt.grid(True)\nplt.show()","82b05371":"plt.scatter(df['Unemployment_Rate'], df['Stock_Index_Price'], color='green')\nplt.title('Stock Index Price Vs Unemployment Rate', fontsize=14)\nplt.xlabel('Unemployment Rate', fontsize=14)\nplt.ylabel('Stock Index Price', fontsize=14)\n#plt.grid(True)\nplt.show()","3d6ee930":"X = df[['Interest_Rate','Unemployment_Rate']] \ny = df['Stock_Index_Price']\n \n# with sklearn\nlm = linear_model.LinearRegression()\nlm.fit(X, y)\n\n","105d0793":"print('Intercept: \\n', lm.intercept_)\nprint('Coefficients: \\n', lm.coef_)","7abb1a62":"# prediction with sklearn\n# Chose row 0 in the df\nNew_Interest_Rate = 2.75\nNew_Unemployment_Rate = 5.3\nprint ('Predicted Stock Index Price: \\n', lm.predict([[New_Interest_Rate ,New_Unemployment_Rate]]))","82aa46bb":"# with statsmodels\nX = sm.add_constant(X) # adding a constant\n \nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X) \n \nprint_model = model.summary()\nprint(print_model)","2e675450":"Yes, it looks like there is a linear relationship between Stock Index Price and Interest Rate.  When interest rates go up, so does the stock index price.\n\nNow...how about the linear relationship between Unemployment Rate and Stock Index Price?","111c9e64":"This output includes the intercept and coefficients. You can use this information to build the multiple linear regression equation as follows:\n\nStock_Index_Price = (Intercept) + (Interest_Rate coef)*X1 + (Unemployment_Rate coef)*X2\n\nAnd once you plug the numbers:\n\nStock_Index_Price = (1798.4040) + (345.5401)*X1 + (-250.1466)*X2","8d021581":"Let's check to see if there is a relationship between the dependent variable (Stock Index Price) and the independent variable(s)(Interest Rate)","19964e5e":"Here we have 2 variables for multiple regression. \nIf you just want to use one variable for simple linear regression, then just use X = df['Interest_Rate']\nYou can also add additional variables within the brackets","fa4501bf":"# MODEL EVALUATION\n\nstatsmodel provides this comprehensive table with statistical info (fit of the model, standard errors, etc)\n\n**Adjusted. R-squared** reflects the fit of the model. R-squared values range from 0 to 1, where a higher value generally indicates a better fit, assuming certain conditions are met.\n\n**const coefficient** is your Y-intercept. It means that if both the Interest_Rate and Unemployment_Rate coefficients are zero, then the expected output (i.e., the Y) would be equal to the const coefficient.\n\n**Interest_Rate coefficient** represents the change in the output Y due to a change of one unit in the interest rate (everything else held constant)\n\n**Unemployment_Rate coefficient** represents the change in the output Y due to a change of one unit in the unemployment rate (everything else held constant)\n\n**std err** reflects the level of accuracy of the coefficients. The lower it is, the higher is the level of accuracy\n\n**P >|t|** is your p-value. A p-value of less than 0.05 is considered to be statistically significant\n\n**Confidence Interval** represents the range in which our coefficients are likely to fall (with a likelihood of 95%)\n\n\n","653e85b5":"# MULTIPLE LINEAR REGRESSION\nMultiple regression is like linear regression, but with more than one independent variable, meaning that we try to predict a value based on two or more variables.\n\nWe will use multiple linear regression to predict the stock index price (i.e., the dependent variable) of a fictitious economy by using 2 independent\/input variables:\n\n* Interest Rate\n* Unemployment Rate\n\nY = C + M1*X1 + M2*X2 + \u2026\n\n* Y = Dependent variable (output\/outcome\/prediction\/estimation)\n* C = Constant (Y-Intercept)\n* M = Slope of the regression line (the effect that X has on Y)\n* X = Independent variable (input variable used in the prediction of Y)\n \n![image.png](attachment:image.png)\n\n\nBefore applying linear regression models, make sure to check that a linear relationship exists between the dependent variable (i.e., what you are trying to predict) and the independent variable(s) (i.e., the input variable\/s).","f6a4e2b3":"Predicted output\nThis is how you predict the stock index price after you collected the following data:\n\nInterest Rate = 2.75 (i.e., X1= 2.75)\nUnemployment Rate = 5.3 (i.e., X2= 5.3)\nIf you plug that data into the regression equation, you\u2019ll get the same predicted result as displayed in the second part:\n\nStock_Index_Price = (1798.4040) + (345.5401)*(2.75) + (-250.1466)*(5.3) = 1422.86\n\n","31935e6f":"Yes, we have a linear relationship (negative slope) with Unemployment_Rate and Stock Index Price.  When unemployement goes up, stocks go down."}}