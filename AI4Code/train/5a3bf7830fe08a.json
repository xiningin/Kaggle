{"cell_type":{"87f920f9":"code","1769db17":"code","dd336aae":"code","ac594288":"code","8099b8ad":"code","9278c7d8":"code","5a98e3b3":"code","fd1f48f6":"code","1bcc68e1":"code","2eb297bd":"code","30014876":"code","f0d552d6":"code","b8914b55":"code","d57a8e99":"code","78aa9724":"code","df0d9216":"code","71aae886":"code","1ca697a7":"code","067f9749":"code","a2f3ff8f":"code","aa3dd258":"code","dc7d4f4f":"markdown","efa24857":"markdown","cf1bd125":"markdown","aed0384b":"markdown"},"source":{"87f920f9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random as rd # generating random numbers\nimport datetime # manipulating date formats\nfrom sklearn.metrics import mean_squared_error\nfrom numpy import sqrt\n\nimport matplotlib.pyplot as plt # basic plotting\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\nimport seaborn as sns # for prettier plots\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scsor \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1769db17":"# Load data\n\nsales=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nitem_cat=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitem=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nshops=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\n\nprint('sales ' , sales.shape)\nprint('item_cat ' , item_cat.shape)\nprint('item ' , item.shape)\nprint('shops ' , shops.shape)\n","dd336aae":"# formatting the date column from object to date time\n\nprint(sales.info())\nsales.date=sales.date.apply(lambda x:datetime.datetime.strptime(x, '%d.%m.%Y'))\nprint(sales.info())","ac594288":"# Group by total monthly sales ...34 months\n\nts=sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nts.astype('float')\nplt.figure(figsize=(10,6))\nplt.title('Total sales of company')\nplt.xlabel('Months')\nplt.ylabel('Sales')\nindexedDataset = pd.DataFrame(ts)\n#indexedDataset.head()\nplt.plot(indexedDataset)\nplt.show()","8099b8ad":"MyWindow = 3\n\n#Determine rolling statistics\nrolmean = indexedDataset.rolling(window=MyWindow).mean() #window size 12 denotes 12 months, giving rolling mean at yearly level\nrolstd = indexedDataset.rolling(window=MyWindow).std()\n\n#Plot rolling statistics\norig = plt.plot(indexedDataset, color='blue', label='Original')\nmean = plt.plot(rolmean, color='red', label='Rolling Mean')\nstd = plt.plot(rolstd, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","9278c7d8":"# decompose into trend, seasonality and residuals\nres = sm.tsa.seasonal_decompose(indexedDataset.values,freq=MyWindow,model=\"additive\")\n#plt.figure(figsize=(16,12))\nfig = res.plot()","5a98e3b3":"#Perform Augmented Dickey\u2013Fuller test for stationarity\n\nprint('Results of Dickey Fuller Test:')\ndftest = adfuller(indexedDataset['item_cnt_day'], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)","fd1f48f6":"dataAR = list(indexedDataset.item_cnt_day.values)\nlen(dataAR)","1bcc68e1":"# AR model \n\nmodel = AR(dataAR)\nmodel_fit = model.fit()\n# make prediction\nyhat = model_fit.predict(12, len(dataAR)+ 18) # predict N ahead of the last one\n\ndataList = list(dataAR)\nyhatList = list(yhat)\n\nplt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(yhatList, ls='--', label='Predicted')\nplt.legend(loc='best')\nplt.title('AR model')\nplt.show()","2eb297bd":"rmse = sqrt(mean_squared_error(dataList,yhatList[0:34]))\nprint('AR RMSE: %.1f' % rmse)","30014876":"# Initial approximation of parameters using Autocorrelation and Partial Autocorrelation Plots\n# Get p and q for ARIMA\n\nplt.figure(figsize=(15,10))\nax = plt.subplot(211)\nsm.graphics.tsa.plot_acf(dataAR, lags=12, ax=ax)\nax = plt.subplot(212)\nsm.graphics.tsa.plot_pacf(dataAR, lags=12, ax=ax)\n#plt.tight_layout()\nplt.show()","f0d552d6":"# ARIMA model\n\nmodel = ARIMA(dataAR, order=(2, 1, 1))\nmodel_fit = model.fit(disp=False)\n# make prediction\nyhat = model_fit.predict(1, len(dataAR)+6, typ='levels')\n\ndataList = list(dataAR)\nyhatList = list(yhat)\n\nplt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(yhatList, ls='--', label='Predicted')\nplt.legend(loc='best')\nplt.title('ARIMA model')\nplt.show()","b8914b55":"rmse = sqrt(mean_squared_error(dataList,yhatList[0:34]))\nprint('ARIMA RMSE: %.1f' % rmse)","d57a8e99":"# SARIMA\n\nmodel = SARIMAX(dataAR, order=(2, 1, 1), seasonal_order=(2,1,1,3))\nmodel_fit = model.fit(disp=False)\n# make prediction\nyhat = model_fit.predict(1, len(dataAR)+6)\n\ndataList = list(dataAR)\nyhatList = list(yhat)\n\nplt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(yhatList, ls='--', label='Predicted')\nplt.legend(loc='best')\nplt.title('SARIMAX model')\nplt.show()","78aa9724":"rmse = sqrt(mean_squared_error(dataList,yhatList[0:34]))\nprint('SARIMA RMSE: %.1f' % rmse)","df0d9216":"# adding the dates to the Time-series as index ... required by FB Prophet\nts=sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nts.index=pd.date_range(start = '2013-01-01',end='2015-10-01', freq = 'MS')\nts=ts.reset_index()\nts.head()","71aae886":"from fbprophet import Prophet\n# prophet REQUIRES a pandas df at the below config \n# date column named as DS and the value column as Y\nts.columns=['ds','y']\nmodel = Prophet(yearly_seasonality=True, weekly_seasonality=True) # instantiate Prophet with only yearly seasonality \nmodel.fit(ts) # fit the model with the ts dataframe","1ca697a7":"# predict for six months in the furure and MS - monthly = frequency\nfuture = model.make_future_dataframe(periods = 6, freq = 'MS')  \nforecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]","067f9749":"dataList = list(indexedDataset.item_cnt_day.values)","a2f3ff8f":"plt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(forecast['yhat'], ls='--', label=\"Predicted\")\nplt.legend(loc='best')\nplt.title('FB Prophet model')\nplt.show()\n","aa3dd258":"# RMSE\n\nrmse = sqrt(mean_squared_error(dataList,forecast['yhat'][0:34]))\nprint('Val RMSE: %.1f' % rmse)","dc7d4f4f":"# ARIMA","efa24857":"Theoretically from the above charts, p = 4 and q = 7 ...supposedly, but these params do NOT work with SARIMA...","cf1bd125":"* Time sequence forecasting challenge\n* Data from Kaggle competition, but this kernel does NOT go into the item-store detail...only TOTAL SALES prediction by month\n* Models: AR, MA, ARIMA, SARIMA and the winner ... FB Prophet  \n* Each model RMSE on data available and predict 6 months ahead","aed0384b":"# FB Prophet"}}