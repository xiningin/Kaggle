{"cell_type":{"f562b377":"code","365f1221":"code","e69875e0":"code","00b6f179":"code","a0664fdf":"code","d570b0e7":"code","a8af1815":"code","07956a6a":"code","e2f70b63":"code","28891fa4":"code","f4bbd540":"code","06df1522":"code","d12941f7":"code","a7711dd6":"code","c686eff3":"code","846dd6be":"code","cf184e31":"code","ec2820d2":"code","00479496":"markdown","940e3f7c":"markdown","0b1a8d12":"markdown","8b1ab82c":"markdown"},"source":{"f562b377":"import pandas as pd\n\ndf = pd.read_csv('\/kaggle\/input\/shortsqueeze-stock-data\/ohlcv.csv')\ndf","365f1221":"df = df.drop_duplicates()","e69875e0":"print(type(df['Datetime'][0]))\ndf","00b6f179":"#Check datetime format\nimport datetime\nfrom datetime import datetime\n\n#Sort date time format\ndate_time_str = df['Datetime'][0]\n\ndate_time_obj = datetime.strptime(date_time_str, '%d\/%m\/%Y %H:%M')\n\nprint (\"The type of the date is now\",  type(date_time_obj))\nprint (\"The date is\", date_time_obj)","a0664fdf":"for i,j in enumerate(df['Datetime']):\n    df['Datetime'][i] = datetime.strptime(df['Datetime'][i], '%d\/%m\/%Y %H:%M')","d570b0e7":"#Check if there is missing value\ndf.isnull().sum()","a8af1815":"price_diff = df['High'] - df['Open']\ndf.insert(7,'Price Different',price_diff)","07956a6a":"df","e2f70b63":"symbol = df['Symbol'].unique()\nsymbol","28891fa4":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[0]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[0]+' Volume vs. High vs. Date')","f4bbd540":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[1]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[1]+' Volume vs. High vs. Date')","06df1522":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[2]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[2]+' Volume vs. High vs. Date')","d12941f7":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[3]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[3]+' Volume vs. High vs. Date')","a7711dd6":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[4]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[4]+' Volume vs. High vs. Date')","c686eff3":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[5]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[5]+' Volume vs. High vs. Date')","846dd6be":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[6]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[6]+' Volume vs. High vs. Date')","cf184e31":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df[df['Symbol'] == symbol[7]]\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df_1['Datetime'], y = df_1['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\nfig.update_layout(title= symbol[7]+' Volume vs. High vs. Date')","ec2820d2":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\ndf = df.sort_values(by=\"Datetime\")\n\nfor k in symbol:\n    df_2 = df[df['Symbol'] == k]\n\n    #If price different is bigger than mean, take is as shortsqueezed\n    label_shortsqueezed = []\n    for i,j in enumerate(df_2['Price Different']):\n        if j > (df_2['Open'].iloc[i])*0.01:\n            label = 1\n        elif j < (df_2['Open'].iloc[i])*0.01:\n            label = 0\n        label_shortsqueezed.append(label)\n\n    #make shortsqueezed as time lag1\n    label_shortsqueezed = label_shortsqueezed[1:]\n    label_shortsqueezed.append(0)\n    df_2.insert(8,'is_ShortSqueezed',label_shortsqueezed)\n\n    #Split as training and testing\n    X = df_2['Volume']\n    y = df_2['is_ShortSqueezed']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,shuffle = False, stratify = None)\n\n    #Fit into DecisionTree\n    model = DecisionTreeClassifier(random_state=0)\n    model.fit(X_train.values.reshape(-1, 1), y_train) \n    y_pred = model.predict(X_test.values.reshape(-1, 1))\n    print(k +' Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test, y_pred)))","00479496":"# As you can see from the below graph the correlation between volume and price is pretty strong","940e3f7c":"# All of these model is higher than 50%\uff0c which is the probability of random guessing. Found out that GME have a strong accuracy of 91.01%","0b1a8d12":"# This is a simple way to predict if the symbol's stock will be raise by 1% every 5 minutes using Decision Tree","8b1ab82c":"# Modelling it by using the volume of last 5 minutes to predict the if the stock will be raise by 1% in next 5 minutes"}}