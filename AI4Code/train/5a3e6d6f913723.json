{"cell_type":{"13b707d4":"code","03d7f993":"code","fd93c572":"code","32bd5ef7":"code","9c067940":"code","a3946547":"code","6e33a617":"code","32598a06":"code","6e482708":"code","a14ca8c1":"markdown","1b43dbd7":"markdown","7694fba4":"markdown","b866f7b1":"markdown","ce845891":"markdown","2e020157":"markdown","1412cb0d":"markdown","436e29a3":"markdown"},"source":{"13b707d4":"import os\n\n\nimport random\nimport seaborn as sns\nimport cv2\n\n# General packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport PIL\nimport IPython.display as ipd\nimport glob\nimport h5py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom PIL import Image\nfrom tempfile import mktemp\nfrom colorama import Fore, Back, Style\n\n# Setting color palette.\nplt.rcdefaults()\nplt.style.use('dark_background')\n","03d7f993":"BASE_PATH = '..\/input\/landmark-recognition-2021'\n\nTRAIN_DIR = f'{BASE_PATH}\/train'\nTEST_DIR = f'{BASE_PATH}\/test'\n\n\ntrain = pd.read_csv(f'{BASE_PATH}\/train.csv')\nsubmission = pd.read_csv(f'{BASE_PATH}\/sample_submission.csv')\ntrain.shape","fd93c572":"landmark=train.groupby('landmark_id').count()\nlandmark_df=landmark\nlandmark_df['frequency']=landmark_df['id']\nlandmark_df=landmark_df.drop('id',axis=1)","32bd5ef7":"n=train['landmark_id'].nunique()   \nsorted_df=landmark_df.sort_values(by='frequency',ascending=False).reset_index()\nprint(n)","9c067940":"import warnings\nwarnings.filterwarnings('ignore')\n\nlandmark_df=sorted_df.head(50)\nlandmark_df['landmark_id'] =  landmark_df.landmark_id.apply(lambda x: f'landmark_{x}')\n\nfig = px.bar(landmark_df, y=\"frequency\", x=\"landmark_id\",color='landmark_id', orientation='v',\n             hover_data=[\"landmark_id\", \"frequency\"],\n             height=1000,\n             title='Number of images per landmark_id (Top 50 landmark_ids)')\nfig.show()\n\n","a3946547":"landmark_df1=sorted_df.tail(10)\n\nlandmark_df1['landmark_id'] =  landmark_df1.landmark_id.apply(lambda x: f'landmark_{x}')\n\nfig = px.bar(landmark_df1, y=\"frequency\", x=\"landmark_id\",color='landmark_id', orientation='v',\n             hover_data=[\"landmark_id\", \"frequency\"],\n             height=1000,\n             title='Number of images per landmark_id (Top 50 landmark_ids)')\nfig.show()","6e33a617":"plt.figure(figsize = (12, 8))\n\nsns.kdeplot(train['landmark_id'], color=\"yellow\",shade=True)\nplt.xlabel(\"LandMark IDs\")\nplt.ylabel(\"Probability Density\")\nplt.title('Class Distribution - Density plot')\n\nplt.show()","32598a06":"import PIL\nfrom PIL import Image, ImageDraw\n\n\ndef display_images(images, title=None): \n    f, ax = plt.subplots(6,6, figsize=(18,22))\n    if title:\n        f.suptitle(title, fontsize = 30)\n\n    for i, image_id in enumerate(images):\n        image_path = os.path.join(TRAIN_DIR, f'{image_id[0]}\/{image_id[1]}\/{image_id[2]}\/{image_id}.jpg')\n        image = Image.open(image_path)\n        \n        ax[i\/\/6, i%6].imshow(image) \n        image.close()       \n        ax[i\/\/6, i%6].axis('off')\n    plt.show() \n  \nsamples = train[train.landmark_id == 138982].sample(30).id.values\n\ndisplay_images(samples)","6e482708":"samples = train[train.landmark_id == 126637].sample(30).id.values\n\ndisplay_images(samples)","a14ca8c1":"* train.csv: only contains two columns\n    * id: image id\n    * landmark_id: target landmark id","1b43dbd7":"# Density destribution ","7694fba4":"# Number of images per landmark\n\n* lets see top 50 landmarks with highest number of images in dataset","b866f7b1":"**landmark with 2nd most number of images (landmark_id: 126637)**","ce845891":"**lets see last 10 landmarks with lowest number of images in dataset**\n\n  * these landmarks only have 2 images ","2e020157":"# landmark with higgest number of images \n\n  * id number 138982","1412cb0d":"# LOAD LIBRARIES","436e29a3":"**Unique number of landmarks in data set**\n\nthere are 81313 unique landmarks"}}