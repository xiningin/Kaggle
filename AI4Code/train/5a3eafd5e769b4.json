{"cell_type":{"2e2d5324":"code","26406b33":"code","8a8d707e":"code","77d9353c":"code","9ba283f5":"code","42cfa56d":"code","1b8cbaeb":"code","10e76840":"code","ba89e281":"code","e9f8f995":"code","985b6eb7":"code","7317638f":"code","4503d765":"code","ff6763e0":"code","93958565":"code","2660e957":"code","18e498e3":"code","187a85e6":"markdown","2a1b013b":"markdown","083fc15e":"markdown","0b446993":"markdown","a525b378":"markdown","9fc05a4b":"markdown","471b1787":"markdown","6d2d24a7":"markdown","0a36d94f":"markdown","c9f98a85":"markdown","913207ce":"markdown","fcbc03bf":"markdown","f74193b8":"markdown","3e7ae156":"markdown","a47fd21a":"markdown","66370c65":"markdown"},"source":{"2e2d5324":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# matplotlib\nimport matplotlib.pyplot as plt\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","26406b33":"humfree= pd.read_csv('..\/input\/hfi_cc_2018.csv')","8a8d707e":"humfree.head()","77d9353c":"humfree.info()","9ba283f5":"#preparing Data\ndf2016 = humfree[humfree.year == 2016].iloc[:,:]\ndf2015 = humfree[humfree.year == 2015].iloc[:,:]\ndf2014 = humfree[humfree.year == 2014].iloc[:,:]\nnew_index = (df2016['hf_rank'].sort_values(ascending=True)).index.values\ndf2016 = df2016.reindex(new_index) # with this code we sort our data according to human freedom rank\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.hf_rank,\n                    y = df2014.hf_score,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2014.countries)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.hf_rank,\n                    y = df2015.hf_score,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.countries)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.hf_rank,\n                    y = df2016.hf_score,\n                    mode = \"lines\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.countries)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Human Freedom score vs Human Freedom rank of Countries ',\n              xaxis= dict(title= 'Freedom Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Freedom Score',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","42cfa56d":"pd.set_option(\"display.max_columns\",123) # with this code we can see all the columns","1b8cbaeb":"#preparing data\ndf2016 = humfree[humfree.year == 2016].iloc[:,:]\ndf2015 = humfree[humfree.year == 2015].iloc[:,:]\ndf2014 = humfree[humfree.year == 2014].iloc[:,:]\nnew_index = (df2016['hf_rank'].sort_values(ascending=True)).index.values\ndf2016 = df2016.reindex(new_index)\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.hf_rank,\n                    y = df2014.pf_rol,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(55, 157, 94, 0.8)'),\n                    text= df2014.countries)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.hf_rank,\n                    y = df2015.pf_rol,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 18, 03, 0.8)'),\n                    text= df2015.countries)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.hf_rank,\n                    y = df2016.pf_rol,\n                    mode = \"markers\", # as you realised Scatter and Line charts are almost the same plot\n                    name = \"2016\",     # we change only 'MODE' it is only 3 possibility 'marker, line or line + markers'\n                    marker = dict(color = 'rgba(230, 25, 200, 0.8)'),\n                    text= df2016.countries)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Rule of law vs Human Freedom rank of Countries ',\n              xaxis= dict(title= 'Freedom Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Freedom Score',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","10e76840":"# prepare data frames\ndf2016 = humfree[humfree.year == 2016].iloc[:10,:]\n\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2016.countries,\n                y = df2016.ef_government_consumption,\n                name = \"Government consumption\",\n                marker = dict(color = 'rgba(55, 114, 55, 0.8)',# It takes RGB \"0-255\" for all values for opacity \"0-1\"\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2016.countries)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2016.countries,\n                y = df2016.ef_government_enterprises,\n                name = \"Government enterprises and investments\",\n                marker = dict(color = 'rgba(235, 155, 12, 0.9)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2016.countries)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","ba89e281":"# prepare data frames\ndf2008 = humfree[humfree.year == 2008].iloc[:15,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nx = df2008.countries\n\ntrace1 = {\n  'x': x,\n  'y': df2008.pf_religion_harassment,\n  'name': 'Harassment and physical hostilities',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': df2008.pf_religion_restrictions,\n  'name': 'Legal and regulatory restrictions',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': ' Countries at 2008'},\n  'barmode': 'relative',\n  'title': 'Religion Restriction and Harassment'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e9f8f995":"# prepare data\nx2011 = humfree.pf_rol_criminal[humfree.year == 2011]\nx2012 = humfree.pf_rol_criminal[humfree.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(191, 200, 06, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(62, 50, 146, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Countries-Criminal justice in 2011 and 2012',\n                   xaxis=dict(title='Criminal justice'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","985b6eb7":"#preparing Data\ndf2015 = humfree[humfree.year == 2015]\n\n# import figure factory\nimport plotly.figure_factory as ff\ndf = df2015.loc[:,[\"pf_rol_criminal\",\"pf_ss_homicide\", \"pf_ss\"]]\ndf[\"index\"] = np.arange(1,len(df)+1)\nfig = ff.create_scatterplotmatrix(df, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","7317638f":"#preparing Data\nx2015 = humfree.region[humfree.year == 2015]\nx2015.value_counts()","4503d765":"# data prepararion\nx2011 = humfree.region[humfree.year == 2011]\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","ff6763e0":"# data preparation\nx2016 = humfree[humfree.year == 2016]\n\ntrace0 = go.Box(\n    y=x2016.hf_score,\n    name = 'Human Freedom score of countries in 2016',\n    marker = dict(\n        color = 'rgb(34, 245, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2016.ef_score,\n    name = 'Economic Freedom score of countries in 2016',\n    marker = dict(\n        color = 'rgb(123, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","93958565":"x2013 = humfree[humfree.year == 2013]\nnew_index = (x2013['hf_rank'].sort_values(ascending=True)).index.values\nx2013 = x2013.reindex(new_index)\n# first line plot\ntrace1 = go.Scatter(\n    x=x2013.hf_rank,  #Human Freedom rank\n    y=x2013.hf_score, # Human Freedom Score\n    name = \"Human Freedom score\",\n    marker = dict(color = 'rgba(164, 12, 200, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=x2013.hf_rank,    #Human Freedom rank\n    y=x2013.ef_score,#Economic Freedom Score\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Economic Freedom score\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Human Freedom vs Economic Freedom scores'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","2660e957":"#preparing Data\nx2014 = humfree[humfree.year == 2014]\nnew_index = (x2014['hf_rank'].sort_values(ascending=True)).index.values\nx2014 = x2014.reindex(new_index)\n\n# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=x2014.hf_rank,\n    y=x2014.ef_regulation_business_bribes,\n    z=x2014.ef_regulation_business_licensing,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(145,35,200)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","18e498e3":"#preparing Data\nx2011 = humfree[humfree.year == 2011]\nnew_index = (x2011['hf_rank'].sort_values(ascending=True)).index.values\nx2011 = x2011.reindex(new_index)\n\ntrace1 = go.Scatter(\n    x=x2011.hf_rank,\n    y=x2011.ef_government_consumption,\n    name = \"Government consumption\"\n)\ntrace2 = go.Scatter(\n    x=x2011.hf_rank,\n    y=x2011.ef_money_inflation,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Inflation\"\n)\ntrace3 = go.Scatter(\n    x=x2011.hf_rank,\n    y=x2011.pf_expression_influence,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Laws and regulations that influence media content\"\n)\ntrace4 = go.Scatter(\n    x=x2011.hf_rank,\n    y=x2011.pf_expression,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Freedom of expression\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Government consumption,Inflation,Laws and regulations,Freedom of expression VS World Rank of countries'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","187a85e6":"<a id=\"4\"><\/a> <br>\n# Bar Charts\n<font color='red'>\nFirst Bar Charts Example: Government enterprises and investments and Government consumption of 10 countries in 2016 (style1)\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","2a1b013b":"<a id=\"6\"><\/a> <br>\n# Scatter Matrix Plots\n<font color='red'>\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n<font color='black'>\n* import figure factory as ff\n* create_scatterplotmatrix = creates scatter plot\n    * data2015 = prepared data. It includes Criminal justice, Homicide and Security and safety with index \n    * colormap = color map of scatter plot\n    * colormap_type = color type of scatter plot\n    * height and weight","083fc15e":"<a id=\"10\"><\/a> <br>\n# 3D Scatter Plot with Colorscaling\n<font color='red'>\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<font color='black'>\n* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale:  actually it is 4th dimension\n    \n # In this data we don't have any column for size so I will use one of them it is only for visualisation.","0b446993":"<a id=\"1\"><\/a> <br>\n# Line Charts\n<font color='red'>\nLine Charts Example: Human Freedom Rank and Human Freedom Score of Countries\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout\n","a525b378":"<a id=\"3\"><\/a> <br>\n# Scatter\n<font color='red'>\nScatter Example: Human Freedom Ranks and Rule of law Of each Countries  with 2014, 2015 and 2016 years\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","9fc05a4b":"<a id=\"5\"><\/a> <br>\n# Histogram\n<font color='red'>\nLets look at histogram of Countries-Criminal justice in 2011 and 2012. \n    <font color='black'>\n* trace1 = first histogram\n    * x = x axis\n    * y = y axis\n    * opacity = opacity of histogram\n    * name = name of legend\n    * marker = color of histogram\n* trace2 = second histogram\n* layout = layout \n    * barmode = mode of histogram like overlay. Also you can change it with *stack*","471b1787":"<a id=\"1\"><\/a> <br>\n# Loading Data and Explanation of Features\n<font color='red'>\n* Humans Freedoms Data  includes several features but we will be use few of them. Here some of examples:\n    <font color='black'>\n    * Rule of law             \n    * Region       \n    * Countries              \n    * Human Freedom (rank)             \n    * Human Freedom (score)            \n    * Economic Freedom (rank)                 \n    * Hours regulations for labour             \n    * Inflation: most recent year                  \n    * Government consumption         \n    * year ","6d2d24a7":"<a id=\"9\"><\/a> <br>\n# Inset Plots\n<font color='red'>\nInset Matrix = 2 plots are in one frame\n<font color='black'>","0a36d94f":"<a id=\"11\"><\/a> <br>\n# Multiple Subplots\n<font color='red'>\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<font color='black'>","c9f98a85":"<a id=\"8\"><\/a> <br>\n# Box Plots\n<font color='red'>\n* Box Plots\n    * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.\n        \n    <font color='black'>\n    * trace = box\n        * y = data we want to visualize with box plot \n        * marker = color","913207ce":"# INTRODUCTION\n* In this kernel, I will show how to use plotly library.\n    * Plotly library: Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts etc... But I will use only a few of them because of my data.\n    * [Plotly Library](http:\/\/plot.ly\/python\/) is Here for you\n\n<br>Content:\n1. [Loading Data and Explanation of Features](#1)\n1. [Line Charts](#2)\n1. [Scatter Charts](#3)\n1. [Bar Charts](#4)\n1. [Histogram](#5)\n1. [Scatter Plot Matrix](#6)\n1. [Word Cloud](#7)\n1. [Box Plot](#8)\n1. [Inset Plots](#9)\n1. [3D Scatter Plot with Colorscaling](#10)\n1. [Multiple Subplots](#11)\n","fcbc03bf":"<a id=\"7\"><\/a> <br>\n# Word Cloud\nNot a pyplot but learning it is good for visualization. Lets look at together  which region is most  mentioned .\n* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the region name in a word cloud\n    * I have to say that it is only for visualization. Otherwise we can easily find this one any other word's data","f74193b8":"# Before Starting Visualization Please use your cursor on the grafics.You will realize that these graphics are talking to us :)","3e7ae156":"BEFORE start up I would like to thank for[ DATAI Team](http:\/\/www.kaggle.com\/kanncaa1) for their helps.\n* If you are a beginner and very excited to learn something new like me ;) here my kernels for you.\n* [Data ScienceTutorial for Beginners](http:\/\/www.kaggle.com\/aliylmaz0907\/data-sciencetutorial-for-beginners)\n* [SeaBorn](http:\/\/www.kaggle.com\/aliylmaz0907\/suicide-statistics-with-seaborn-library-1)\n* [SeaBorn2](http:\/\/www.kaggle.com\/aliylmaz0907\/homicide-reports-with-seaborn-library-2)\n","a47fd21a":"<font color='red'>\nSecond Bar Charts Example: Religion Harassment and physical hostilities and  Religion Legal and regulatory restrictions (style2)\n<br> Actually, if you change only the barmode from *group* to *relative* in previous example, you will see what I do here. However, for diversity I use different syntaxes. \n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * name = name of the plots\n    * type = type of plot like bar plot\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * xaxis = label of x axis\n    * barmode = bar mode of bars like grouped( previous example) or relative\n    * title = title of layout\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","66370c65":"# As you realised plotly libraries is very easy(only traces we have to create) and useful (it is talking to us )\n# please write me my errors so I will  learn new things :)"}}