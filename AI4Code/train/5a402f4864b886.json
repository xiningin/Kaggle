{"cell_type":{"a7ec4592":"code","00efdd55":"code","01a98015":"code","a6c9f154":"code","1dbc92b4":"code","0ca76de8":"code","02902fc0":"code","4096643d":"code","0c60e897":"code","d9a4a599":"code","66954e0e":"code","4aa42ffd":"code","085fc02b":"code","9fb79325":"code","551f82a4":"code","fbe86e45":"code","4ebc7578":"code","7774504c":"code","2b114b39":"code","5163a873":"code","e7625266":"code","f3233cf7":"code","08631410":"code","01505f44":"code","6400de92":"code","f07e8967":"code","13ae0548":"code","0780e2c3":"code","d9e12d17":"code","0b9c6a6f":"markdown","ecc71427":"markdown","b2792cda":"markdown","dd4618d3":"markdown","d783ea8c":"markdown"},"source":{"a7ec4592":"from keras.models import Model\nfrom keras.layers import Input, LSTM, Dense\nimport pandas as pd\nfrom os.path import join\nfrom os import listdir\nfrom sklearn.utils import shuffle","00efdd55":"COURSE_NUMBER = 482  # the seed\n\n# Set the `PYTHONHASHSEED` environment variable at a fixed value\nfrom os import environ\nenviron['PYTHONHASHSEED'] = str(COURSE_NUMBER)\n\n# Set the `python` built-in pseudo-random generator at a fixed value\n\nfrom random import seed\nseed(COURSE_NUMBER)\n\n# Set the `numpy` pseudo-random generator at a fixed value\nimport numpy as np\nnp.random.seed(COURSE_NUMBER)  # for numpy, scikit-learn\n\n# Set the `tensorflow` pseudo-random generator at a fixed value\nimport tensorflow as tf\ntf.set_random_seed(COURSE_NUMBER)\n\n\n# Configure a new global `tensorflow` session\nfrom keras import backend as K\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)","01a98015":"INPUT_DIR = \"..\/input\/sentences\"\nfiles = listdir(INPUT_DIR)\nprint(files)","a6c9f154":"def read_utf8_csv(filepath):\n    return pd.read_csv(filepath, encoding=\"utf-8\")\n\ninput1_df = read_utf8_csv(join(INPUT_DIR, \"cv-unique-no-end-punct-sentences.csv\"))\ninput1_df.columns = [\"num\", \"sent_in\"]\ninput2_df = read_utf8_csv(join(INPUT_DIR, \"simple-wiki-unique-no-end-punct-sentences.csv\"))\ninput2_df.columns = [\"num\", \"sent_in\"]\noutput1_df = read_utf8_csv(join(INPUT_DIR, \"cv-unique-has-end-punct-sentences.csv\"))\noutput1_df.columns = [\"num\", \"sent_out\"]\noutput2_df = read_utf8_csv(join(INPUT_DIR, \"simple-wiki-unique-has-end-punct-sentences.csv\"))\noutput2_df.columns = [\"num\", \"sent_out\"]","1dbc92b4":"# pd.concat([input_df, output_df])\ndf = pd.DataFrame()\ndf['sent_in'] = pd.concat([input1_df['sent_in'], input2_df['sent_in']])\ndf['sent_out'] = pd.concat([output1_df['sent_out'], output2_df['sent_out']])\ndf = df.reset_index()\nprint(\"\\nhere's one sample of the {} sentences...\\n\".format(len(df)))\ndf.head().to_numpy()[0]","0ca76de8":"# Convert to lowercase\ndf['sent_in'] = df['sent_in'].str.lower()\ndf['sent_out'] = df['sent_out'].str.lower()","02902fc0":"# convert digits to 0's while retaining number length\nfor digit in \"0123456789\":\n    df['sent_in'] = df['sent_in'].str.replace(digit, \"0\")","4096643d":"# check what it looks like\n# df['sent_in'][df['sent_in'].str.find(\"0\") > -1][:5]\ndf['sent_in'][66]","0c60e897":"# shuffle so that the order of the data does not matter\ndf = shuffle(df)\nindices = df.index.values\n# save the indices for reproducability\npd.DataFrame(indices).to_csv(\"shuffled_indices.csv\")","d9a4a599":"# Make random pairs of sentences\narr1, arr2 = np.split(df['sent_in'].drop(1), 2)  # drop 1 for even split\narr3, arr4 = np.split(df['sent_out'].drop(1), 2)  # drop 1 for even split\npair_df = pd.DataFrame()\n# also append a space to delimit the sentences\npair_df['pair_in'] = arr1.str.cat(\" \" + arr2.values).to_list()\npair_df['pair_out'] = arr3.str.cat(\" \" + arr4.values).to_list()","66954e0e":"pair_df['pair_in'][0]","4aa42ffd":"pair_df['pair_out'][0]","085fc02b":"batch_size = 64  # Batch size for training.\nepochs = 100  # Number of epochs to train for.\nlatent_dim = 256  # Latent dimensionality of the encoding space.\nnum_samples = 10000  # Number of samples to train on.\n# Path to the data txt file on disk.\ndata_path = 'fra-eng\/fra.txt'\nSTART_CHAR = '\\t'  # the \"start sequence\" character\nEND_CHAR = '\\n'  # the \"end sequence\" character.\n\n# Vectorize the data.\ninput_texts = []\ntarget_texts = []\ninput_characters = set()\ntarget_characters = set()","9fb79325":"# let's use the dataframe of pairs\ndf = pair_df","551f82a4":"for pair in df[: min(num_samples, len(df) - 1)].values:\n    input_text, target_text = pair\n    target_text = START_CHAR + target_text + END_CHAR\n    input_texts.append(input_text)\n    target_texts.append(target_text)\n    for char in input_text:\n        if char not in input_characters:\n            input_characters.add(char)\n    for char in target_text:\n        if char not in target_characters:\n            target_characters.add(char)","fbe86e45":"input_characters = sorted(list(input_characters))\ntarget_characters = sorted(list(target_characters))\nnum_encoder_tokens = len(input_characters)\nnum_decoder_tokens = len(target_characters)\nmax_encoder_seq_length = max([len(txt) for txt in input_texts])\nmax_decoder_seq_length = max([len(txt) for txt in target_texts])","4ebc7578":"print('Number of samples:', len(input_texts))\nprint('Number of unique input tokens:', num_encoder_tokens)\nprint('Number of unique output tokens:', num_decoder_tokens)\nprint('Max sequence length for inputs:', max_encoder_seq_length)\nprint('Max sequence length for outputs:', max_decoder_seq_length)","7774504c":"input_token_index = dict(\n    [(char, i) for i, char in enumerate(input_characters)])\ntarget_token_index = dict(\n    [(char, i) for i, char in enumerate(target_characters)])","2b114b39":"encoder_input_data = np.zeros(\n    (len(input_texts), max_encoder_seq_length, num_encoder_tokens),\n    dtype='float32')\ndecoder_input_data = np.zeros(\n    (len(input_texts), max_decoder_seq_length, num_decoder_tokens),\n    dtype='float32')\ndecoder_target_data = np.zeros(\n    (len(input_texts), max_decoder_seq_length, num_decoder_tokens),\n    dtype='float32')","5163a873":"for i, (input_text, target_text) in enumerate(zip(input_texts, target_texts)):\n    for t, char in enumerate(input_text):\n        encoder_input_data[i, t, input_token_index[char]] = 1.\n    encoder_input_data[i, t + 1:, input_token_index[' ']] = 1.\n    for t, char in enumerate(target_text):\n        # decoder_target_data is ahead of decoder_input_data by one timestep\n        decoder_input_data[i, t, target_token_index[char]] = 1.\n        if t > 0:\n            # decoder_target_data will be ahead by one timestep\n            # and will not include the start character.\n            decoder_target_data[i, t - 1, target_token_index[char]] = 1.\n    decoder_input_data[i, t + 1:, target_token_index[' ']] = 1.\n    decoder_target_data[i, t:, target_token_index[' ']] = 1.","e7625266":"# Define an input sequence and process it.\nencoder_inputs = Input(shape=(None, num_encoder_tokens))\nencoder = LSTM(latent_dim, return_state=True)\nencoder_outputs, state_h, state_c = encoder(encoder_inputs)\n# We discard `encoder_outputs` and only keep the states.\nencoder_states = [state_h, state_c]","f3233cf7":"# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None, num_decoder_tokens))\n# We set up our decoder to return full output sequences,\n# and to return internal states as well. We don't use the\n# return states in the training model, but we will use them in inference.\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)\ndecoder_outputs, _, _ = decoder_lstm(decoder_inputs,\n                                     initial_state=encoder_states)\ndecoder_dense = Dense(num_decoder_tokens, activation='softmax')\ndecoder_outputs = decoder_dense(decoder_outputs)","08631410":"# Define the model that will turn\n# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)","01505f44":"# Run training\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy',\n              metrics=['accuracy'])","6400de92":"model.fit([encoder_input_data, decoder_input_data], decoder_target_data,\n          batch_size=batch_size,\n          epochs=epochs,\n          validation_split=0.2)","f07e8967":"# Save model\nmodel.save('s2s.h5')","13ae0548":"# Next: inference mode (sampling).\n# Here's the drill:\n# 1) encode input and retrieve initial decoder state\n# 2) run one step of decoder with this initial state\n# and a \"start of sequence\" token as target.\n# Output will be the next target token\n# 3) Repeat with the current target token and current states\n\n# Define sampling models\nencoder_model = Model(encoder_inputs, encoder_states)\n\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\ndecoder_outputs, state_h, state_c = decoder_lstm(\n    decoder_inputs, initial_state=decoder_states_inputs)\ndecoder_states = [state_h, state_c]\ndecoder_outputs = decoder_dense(decoder_outputs)\ndecoder_model = Model(\n    [decoder_inputs] + decoder_states_inputs,\n    [decoder_outputs] + decoder_states)\n\n# Reverse-lookup token index to decode sequences back to\n# something readable.\nreverse_input_char_index = dict(\n    (i, char) for char, i in input_token_index.items())\nreverse_target_char_index = dict(\n    (i, char) for char, i in target_token_index.items())","0780e2c3":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    states_value = encoder_model.predict(input_seq)\n\n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1, 1, num_decoder_tokens))\n    # Populate the first character of target sequence with the start character.\n    target_seq[0, 0, target_token_index['\\t']] = 1.\n\n    # Sampling loop for a batch of sequences\n    # (to simplify, here we assume a batch of size 1).\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n        output_tokens, h, c = decoder_model.predict(\n            [target_seq] + states_value)\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_char = reverse_target_char_index[sampled_token_index]\n        decoded_sentence += sampled_char\n\n        # Exit condition: either hit max length\n        # or find stop character.\n        if (sampled_char == '\\n' or\n           len(decoded_sentence) > max_decoder_seq_length):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1, 1, num_decoder_tokens))\n        target_seq[0, 0, sampled_token_index] = 1.\n\n        # Update states\n        states_value = [h, c]\n\n    return decoded_sentence","d9e12d17":"for seq_index in range(100):\n    # Take one sequence (part of the training set)\n    # for trying out decoding.\n    input_seq = encoder_input_data[seq_index: seq_index + 1]\n    decoded_sentence = decode_sequence(input_seq)\n    print('-')\n    print('Input sentence:', input_texts[seq_index])\n    print('Decoded sentence:', decoded_sentence)","0b9c6a6f":"## Now let's train","ecc71427":"# Let's normalize the data\n1. convert to lowercase\n2. convert digits to 0's while retaining number length\n3. ensuring all characters are utf-8 encoded (done above)\n4. make random pairs of sentences","b2792cda":"## First and foremost, set all possible random seeds, globally, for the sake of [`reproducability`](https:\/\/stackoverflow.com\/a\/52897216\/5411712)","dd4618d3":"## Now, import the data","d783ea8c":"# Sentence Segmentation\nCan a Recurrent Neural Network learn to predict the end of a sentence?"}}