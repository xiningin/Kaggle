{"cell_type":{"360906b8":"code","b7c3e3a0":"code","4be9084a":"code","33dd4964":"code","c63677b5":"code","18385639":"code","12c97927":"code","bc7e3c5c":"code","f30a0b1d":"code","022115f1":"code","e1c75eb8":"markdown","91016301":"markdown","e58b21cd":"markdown","cd62a979":"markdown","1afb86c6":"markdown","a6c2625e":"markdown","bf8b9917":"markdown"},"source":{"360906b8":"import pandas as pd \nimport dask.dataframe as dd\nimport os\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport warnings\nwarnings.filterwarnings('ignore')\ninit_notebook_mode(connected=True)\n\ndef valueCounter(dataframe,columnToCount):\n    valueCounts = dataframe[columnToCount].value_counts().compute()\n    df = pd.DataFrame(data=valueCounts)\n    return df\n\ndef quantityCounter(dataframe,columnToCount):\n    quantityCount = dataframe.groupby(columnToCount)['QUANTITY'].sum()\n    quantityCount = quantityCount.compute().sort_values(ascending=False)\n    df = pd.DataFrame(data=quantityCount)\n    return df\n\ndef calculateQuantityPerPerson(dataframe,columnToCount,indexValue,populationValue):\n    cityQuantity = dataframe.groupby(columnToCount)['QUANTITY'].sum()\n    cityQuantity = cityQuantity.compute().sort_values(ascending=False)[indexValue]\n    quantityPerPerson = cityQuantity\/populationValue\n    return quantityPerPerson\n\ndef plotHorizontalBarGraph(dataframe,column,title,yAxisTitle,width,height,begin,end):\n    trace1 = go.Bar(\n                    x = dataframe[column][begin:end],\n                    y = dataframe.index,\n                    orientation='h',\n                    name = \"Kaggle\",\n                    marker = dict(color = 'rgba(0, 0, 255, 0.8)',\n                                 line=dict(color='rgb(0,0,0)',width=1.5)),\n                    text = dataframe.index)\n    data = [trace1]\n    layout = go.Layout(barmode = \"group\",title=title, \n                       xaxis=dict(title=yAxisTitle),\n                       yaxis=dict(autorange=\"reversed\"),\n                       width = width,\n                       height = height,\n                       showlegend=False)\n    fig = go.Figure(data = data, layout = layout)\n    fig.update_yaxes(automargin=True)\n    iplot(fig)\n    \nTRAIN_PATH = '..\/input\/arcos_all_washpost.tsv\/arcos_all_washpost.tsv'\ninterestingColumns = ['BUYER_NAME','BUYER_ADDRESS1', 'BUYER_ADDRESS2', 'BUYER_CITY', 'BUYER_STATE',\n       'BUYER_ZIP', 'BUYER_COUNTY','DRUG_NAME', 'QUANTITY', 'UNIT', 'TRANSACTION_DATE', 'CALC_BASE_WT_IN_GM',\n       'DOSAGE_UNIT', 'Product_Name', 'Ingredient_Name','Revised_Company_Name', 'Reporter_family']\ndf_tmp = pd.read_csv(TRAIN_PATH,sep='\\t',usecols=interestingColumns,nrows=5)\ndf_tmp.head()","b7c3e3a0":"traintypes = {'BUYER_NAME': 'str',\n              'BUYER_ADDRESS1': 'str', \n              'BUYER_ADDRESS2': 'str',\n              'BUYER_CITY': 'str',\n              'BUYER_STATE': 'str',\n              'BUYER_ZIP': 'int64',\n              'BUYER_COUNTY': 'str',\n              'DRUG_NAME': 'str',\n              'QUANTITY': 'int64',\n              'UNIT': 'str',\n              'TRANSACTION_DATE': 'int64',\n              'CALC_BASE_WT_IN_GM': 'float64',\n              'DOSAGE_UNIT': 'float64',\n              'Product_Name': 'str',\n              'Ingredient_Name': 'str',\n              'Revised_Company_Name': 'str',\n              'Reporter_family': 'str'}\ncols = list(traintypes.keys())\ndf = dd.read_csv(TRAIN_PATH,sep='\\t', usecols=interestingColumns,dtype=traintypes)\ndf.head(5)","4be9084a":"stateCounts = quantityCounter(df,'BUYER_STATE')\nplotHorizontalBarGraph(stateCounts,'QUANTITY','Pain Pills per State','Pain Pills per State',750,1500,0,50)\ndel stateCounts","33dd4964":"# Note population numbers are estimates from Wikipedia for the year 2018\nprint('Quantity of Pain Pills per Person: ','\\n')\nprint('California: ',calculateQuantityPerPerson(df,'BUYER_STATE',0,39557045))\nprint('Florida: ',calculateQuantityPerPerson(df,'BUYER_STATE',1,21299325))\nprint('Texas: ',calculateQuantityPerPerson(df,'BUYER_STATE',2,28701845))","c63677b5":"cityCounts = quantityCounter(df,'BUYER_CITY')\nplotHorizontalBarGraph(cityCounts,'QUANTITY','Pain Pills per City','Pain Pills per City',750,1500,0,50)\ndel cityCounts","18385639":"# Note population numbers are estimates from Wikipedia for the year 2018\nprint('Quantity of Pain Pills per Person: ','\\n')\nprint('Livermore, California: ',calculateQuantityPerPerson(df,'BUYER_CITY',0,90269))\nprint('North Charleston, South Carolina: ',calculateQuantityPerPerson(df,'BUYER_CITY',1,113237))\nprint('Las Vegas, Nevada: ',calculateQuantityPerPerson(df,'BUYER_CITY',2,644644))","12c97927":"drugCounts = quantityCounter(df,'DRUG_NAME')\nplotHorizontalBarGraph(drugCounts,'QUANTITY','Most Popular Pain Pills in the USA','Quantity of Pain Pills',500,500,0,2)\ndel drugCounts","bc7e3c5c":"# Pick a few states to focus on\nvalue_list = ['CA','FL','TX','CO']\ndf = df[df.BUYER_STATE.isin(value_list)]\ndrugCounts = quantityCounter(df,'DRUG_NAME')\nplotHorizontalBarGraph(drugCounts,'QUANTITY','Most Popular Pain Pills in CA, FL, and TX','Quantity of Pain Pills',500,500,0,2)\ndel drugCounts","f30a0b1d":"# Note population numbers are estimates from Wikipedia for the year 2018\nvalue_list = ['CO']\ndf = df[df.BUYER_STATE.isin(value_list)]","022115f1":"print('Quantity of Pain Pills per Person: ','\\n')\nprint('Denver: ',calculateQuantityPerPerson(df,'BUYER_CITY',1,716492))\nprint('Colorado Springs: ',calculateQuantityPerPerson(df,'BUYER_CITY',0,472688))\nprint('Pueblo: ',calculateQuantityPerPerson(df,'BUYER_CITY',2,111750))","e1c75eb8":"Step 6: Make conclusions\n* Hydrocodone and oxycodone have similar sales levels in the USA.\n* California, Florida, and Texas consume more pain pills than any of other state.\n* Hydrocodone is more popular than oxycodone in California, Florida, and Texas.\n* Livermore, California consumes more pain pills than any other city in the USA.","91016301":"**Pain Pills in the USA**\n* Data from [The Washington Post](https:\/\/www.washingtonpost.com\/graphics\/2019\/investigations\/dea-pain-pill-database)\n","e58b21cd":"Step 5: Compare to data from Colorado","cd62a979":"Step 4: Compare top three states to the rest of the USA","1afb86c6":"Step 1: Import Python modules and define helper functions\n* [Dask](https:\/\/dask.org\/)\n* [Plotly](https:\/\/plot.ly\/python\/)","a6c2625e":"Step 3: Visualize data for the entire USA","bf8b9917":"Step 2: Load the data using Dask \n* 1 x 80GB TSV file\n* adapted from [jpmiller\/szelee's method](https:\/\/www.kaggle.com\/szelee\/how-to-import-a-csv-file-of-55-million-rows)"}}