{"cell_type":{"4bf4bf79":"code","d6b8fd05":"code","684e3015":"code","56549101":"code","9c8c53bf":"code","dd63c304":"code","d2b81750":"code","efc66dcc":"code","43e3b638":"code","2da5aab1":"code","68e11b65":"code","2d59a921":"code","7a3b6156":"code","b18a9533":"code","49a4ba40":"code","3f7340ef":"code","ff51ab81":"code","71905282":"code","d5fb3f83":"code","11c8dec4":"code","599d35e6":"code","dd035e13":"code","f7c45754":"code","481d1e56":"code","0463d9d5":"code","c7fb49f5":"code","ccb00e5f":"code","b605e6a1":"code","c4dccc0f":"code","4b13617f":"code","0f413016":"code","4bffb85f":"code","a366e382":"code","49f0eb4a":"code","577ed443":"code","434a4d50":"code","5141d659":"code","c2473e5e":"code","84697539":"code","2f972975":"code","b936f235":"code","3bd702c2":"code","3ddcbb5c":"code","bfe3f197":"code","970fa0eb":"code","498b3f1b":"code","089b95eb":"code","a9b70718":"code","99df32fd":"code","ee515150":"code","89369c92":"code","2ab23541":"code","1a322e53":"code","e82a1b5f":"code","ea68e7a0":"code","1f23cef3":"code","d38cf06a":"code","4f9af3a9":"code","057a86ab":"code","426f1be1":"code","03311b5f":"code","2308e3c3":"code","33dcca6b":"code","1fc29b65":"code","5693e9e5":"code","34782abd":"code","56548c19":"code","1c32b12e":"code","78069ff7":"code","f452d955":"code","98dbfe84":"code","a2233cd8":"code","8ef348f6":"code","5730991f":"markdown","e569674a":"markdown","1659ea2b":"markdown","a9055106":"markdown","b372687e":"markdown","22054cdb":"markdown","df6c4727":"markdown","0b4779af":"markdown","851043be":"markdown","bc973c16":"markdown","a1d0ec12":"markdown","dd9d94c6":"markdown","7a720349":"markdown","5651e2a0":"markdown","08f1c0da":"markdown","80348deb":"markdown","f79febd9":"markdown","62d24e54":"markdown","10406b31":"markdown","d9ed5329":"markdown","ab9f8404":"markdown","700ec819":"markdown","069730fc":"markdown","3c55dfbd":"markdown","71faea2c":"markdown","f2ff2e90":"markdown","f7b36265":"markdown","35d5493d":"markdown","24c72e94":"markdown","c5b3008b":"markdown","8c1f2a04":"markdown","d4ec9d51":"markdown","a3ced2e0":"markdown","f3815969":"markdown","77f7f7ff":"markdown","40b8db1d":"markdown","582b8a2a":"markdown","5044395a":"markdown","9eec71a4":"markdown","1a35ad0d":"markdown","6b580dfd":"markdown","79eaa767":"markdown","f372e82b":"markdown","cd028ef4":"markdown","8f7cac09":"markdown","37c983bc":"markdown","c571e8d6":"markdown","570a99ef":"markdown","4528538c":"markdown","378f5e32":"markdown","05a85c7d":"markdown","90fc2df0":"markdown","48a1e818":"markdown","6f8fa61f":"markdown","78734451":"markdown","44cd2a6c":"markdown","e8eae381":"markdown","cdfb8d57":"markdown","3a4aed50":"markdown","6d332730":"markdown","cc435e8f":"markdown","937c6374":"markdown","bd75ff79":"markdown","c03c128a":"markdown","0967190b":"markdown","7498db41":"markdown","80e46d59":"markdown","a954b2cb":"markdown"},"source":{"4bf4bf79":"import numpy as np \nimport pandas as pd \nimport itertools\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.metrics import mean_squared_error\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","d6b8fd05":"data=pd.read_csv(\"\/kaggle\/input\/delhi-weather-data\/testset.csv\")\ndata.head()","684e3015":"data.shape","56549101":"data=data[[\"datetime_utc\",\" _tempm\"]]\ndata.head()","9c8c53bf":"data.columns=[\"date\",\"temp\"]\ndata.columns","dd63c304":"data.dtypes","d2b81750":"data[\"date\"]=pd.to_datetime(data[\"date\"],format=\"%Y%m%d-%H:%M\")\ndata.dtypes","efc66dcc":"data=data.set_index(\"date\")","43e3b638":"data.tail()","2da5aab1":"fig=plt.figure(figsize=(13,7),facecolor=\"green\")\nax = plt.axes()\nax.set_facecolor(\"yellow\")\nplt.xlabel(\"Year\",fontsize=\"15\",fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=\"15\",fontweight=\"bold\")\nplt.grid(True)\nplt.plot(data)\nplt.show()","68e11b65":"null=data[data.isnull().any(axis=1)]\nprint(\"Null values:\",null.shape[0])","2d59a921":"daily_mean=data.groupby(data.index.day).mean()\nmonthly_mean=data.groupby(data.index.month).mean()\nhourly_mean=data.groupby(data.index.hour).mean()\nyearly_mean=data.groupby(data.index.year).mean()\n","7a3b6156":"fig=plt.figure(figsize=(13,7),facecolor=\"yellow\")\nax=plt.axes()\nax.set_facecolor(\"#FCF3CF\")\nplt.plot(hourly_mean)\nplt.grid(True)\nplt.xticks(range(0,24))\nplt.xlabel(\"Hours in a day\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=16,fontweight=\"bold\")\nplt.show()","b18a9533":"fig=plt.figure(figsize=(13,7),facecolor=\"green\")\nax=plt.axes()\nax.set_facecolor(\"#73C6B6\")\nplt.plot(monthly_mean)\nplt.grid(True)\nplt.xticks(range(1,13))\nplt.xlabel(\"Months in a year\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.show()","49a4ba40":"fig=plt.figure(figsize=(13,7),facecolor=\"#E74C3C\")\nax=plt.axes()\nax.set_facecolor(\"#FADBD8\")\nplt.plot(daily_mean)\nplt.grid(True)\nplt.xlabel(\"Days in Month\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.show()","3f7340ef":"fig=plt.figure(figsize=(13,7),facecolor=\"#82E0AA\")\nax=plt.axes()\nax.set_facecolor(\"#E9F7EF\")\nplt.plot(yearly_mean)\nplt.grid(True)\nplt.xlabel(\"Days in Month\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.show()","ff51ab81":"daily=data.resample(\"D\").mean()\nprint(\"Sample reduced by {} rows after resampling\".format(data.shape[0]-daily.shape[0]))","71905282":"fig=plt.figure(figsize=(13,7),facecolor=\"#A569BD\")\nax=plt.axes()\nax.set_facecolor(\"#F4ECF7\")\nplt.xlabel(\"Year\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.grid(True)\nplt.plot(daily)\nplt.show()","d5fb3f83":"daily=daily[\"2001-01-01\":]\ndaily.shape","11c8dec4":"fig=plt.figure(figsize=(13,7),facecolor=\"#F4D03F\")\nax=plt.axes()\nax.set_facecolor(\"#FEF9E7\")\nplt.xlabel(\"Year\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.grid(True)\nplt.plot(daily)\nplt.show()","599d35e6":"print(\"Null values before:\",daily.isnull().sum())\n\ndaily=daily.fillna(method=\"ffill\")\n\nprint(\"Null values After:\",daily.isnull().sum())","dd035e13":"actual=daily[\"temp\"].to_frame().rename(columns={\"temp\":\"actual\"})\npredicted=daily[\"temp\"].to_frame().shift(1).rename(columns={\"temp\":\"predicted\"})\n\ndf_daily=pd.concat([actual,predicted],axis=1)","f7c45754":"df_daily.head()","481d1e56":"df_daily=df_daily[1:]","0463d9d5":"fig=plt.figure(figsize=(13,8),facecolor=\"#FEF5E7\")\nax=plt.axes()\nax.set_facecolor(\"#566573\")\nplt.plot(df_daily[\"actual\"],label=\"Actual\")\nplt.plot(df_daily[\"predicted\"],label=\"Predicted\")\nplt.xlabel(\"Year\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.grid(True)\nplt.legend(loc=\"best\")\nplt.show()","c7fb49f5":"rmse=mean_squared_error(df_daily[\"actual\"],df_daily[\"predicted\"],squared=False)\nprint(\"RMSE: {:.1f}\".format(rmse))","ccb00e5f":"monthly=daily.resample(\"M\").mean()\nfig=plt.figure(figsize=(13,7),facecolor=\"#145A32\")\nax=plt.axes()\nax.set_facecolor(\"#D5F5E3\")\nplt.plot(monthly)\nplt.xlabel(\"Months\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.grid(True)\nplt.show()","b605e6a1":"from statsmodels.tsa.seasonal import seasonal_decompose\nresult=seasonal_decompose(monthly)\nresult.plot()\nplt.show()","c4dccc0f":"monthly.head()","4b13617f":"from statsmodels.tsa.stattools import adfuller","0f413016":"def check_adfuller(data):\n    result=adfuller(data)\n    \n    print(\"ADF statistics:{}\".format(result[0]))\n    print(\"p-value:{}\".format(result[1]))\n    print(\"lags used:{}\".format(result[2]))\n    print(\"No of observation:{}\".format(result[3]))\n    print()\n    print(\"Critical Values:\")\n    for key,value in result[4].items():\n        print(\"Critical({}):{}\".format(key,value))    ","4bffb85f":"check_adfuller(monthly)","a366e382":"monthly[\"Seasonal Diff\"]=monthly[\"temp\"]-monthly[\"temp\"].shift(12)","49f0eb4a":"check_adfuller(monthly[\"Seasonal Diff\"].dropna())","577ed443":"monthly[\"Seasonal Diff\"].plot()\nplt.show()","434a4d50":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","5141d659":"plot_acf(monthly[\"Seasonal Diff\"].dropna(),lags=40)\nplt.show()","c2473e5e":"plot_pacf(monthly[\"Seasonal Diff\"].dropna(),lags=40)\nplt.show()","84697539":"train=monthly[\"temp\"][:\"2015-01-01\"].to_frame()\ntest=monthly[\"temp\"][\"2015-01-01\":].to_frame()\n\ntrain.shape,test.shape","2f972975":"from statsmodels.tsa.statespace.sarimax import SARIMAX","b936f235":"p=d=q=range(0,2)\n\npdq=list(itertools.product(p,d,q))\nseasonal_pdq=[(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]","3bd702c2":"for pdq_params in pdq:\n    for seasonal_params in seasonal_pdq:\n        try:\n            model=SARIMAX(train,\n                          order=pdq_params,\n                          seasonal_order=seasonal_params\n                         )\n            result=model.fit()\n            print(\"SARIMAX({}x{}12)-AIC:{}\".format(pdq_params,\n                                                   seasonal_params,\n                                                   result.aic\n                                                  ))\n            \n        except:\n            continue","3ddcbb5c":"model=SARIMAX(train,\n              order=(1,0,0),\n              seasonal_order=(0,1,1,12)\n             ).fit()","bfe3f197":"model.summary()","970fa0eb":"model.plot_diagnostics(figsize=(14,6))\nplt.tight_layout()\nplt.show()","498b3f1b":"predict=model.get_prediction(start=len(train),\n                             end=(len(train)+len(test)-1)\n                            )","089b95eb":"predict_values=predict.predicted_mean\nbounds=predict.conf_int()\nbounds.head()","a9b70718":"lower_lim=bounds[\"lower temp\"]\nupper_lim=bounds[\"upper temp\"]","99df32fd":"ax=train.plot(label=\"Training Data\",figsize=(13,7))\ntest.plot(label=\"Testing Data\",ax=ax)\npredict_values.plot(label=\"Predicted data\",ax=ax)\nax.fill_between(bounds.index,lower_lim,upper_lim,color=\"magenta\",alpha=0.2)\nax.set_facecolor(\"#808B96\")\nplt.xlabel(\"Months\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.grid(True)\nplt.legend(loc=\"best\")\nplt.show()","ee515150":"rmse=mean_squared_error(test[\"temp\"].values,predict_values,squared=False)\nrmse","89369c92":"test.tail()","2ab23541":"dates_to_predict=pd.date_range(start=\"2017-04-30\",end=\"2021-12-31\",freq=\"M\")\nlen(dates_to_predict)","1a322e53":"new_predict=model.get_prediction(start=len(monthly),\n                                 end=(len(monthly)+len(dates_to_predict)-1)\n                                )","e82a1b5f":"new_predict_values=new_predict.predicted_mean","ea68e7a0":"new_bounds=new_predict.conf_int()\nnew_lower_lim=new_bounds[\"lower temp\"]\nnew_upper_lim=new_bounds[\"upper temp\"]","1f23cef3":"ax=monthly[\"temp\"].plot(label=\"Original Data\",figsize=(13,7))\nnew_predict_values.plot(label=\"Predicted data\",ax=ax)\nax.fill_between(new_bounds.index,new_lower_lim,new_upper_lim,color=\"magenta\",alpha=0.1)\n\nax.set_facecolor(\"black\")\nplt.xlabel(\"Months\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.grid(True)\nplt.legend(loc=\"best\")\nplt.show()","d38cf06a":"from sklearn.preprocessing import MinMaxScaler","4f9af3a9":"scaler=MinMaxScaler()\ntrain_scale=scaler.fit_transform(train)\ntest_scale=scaler.transform(test)","057a86ab":"from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator","426f1be1":"time_step=12\ngenerator=TimeseriesGenerator(data=train_scale,\n                              targets=train_scale,\n                              length=time_step,\n                              batch_size=1\n                             )","03311b5f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM,Dense,Dropout\nfrom tensorflow.keras.optimizers import Adam","2308e3c3":"model=Sequential()","33dcca6b":"model.add(LSTM(100,activation=\"relu\",input_shape=(time_step,1),return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(64,activation=\"relu\"))\nmodel.add(Dropout(0.01))\n\nmodel.add(Dense(32))\n\nmodel.add(Dense(1))\nmodel.compile(optimizer=Adam(learning_rate=0.001),\n              loss=\"mean_squared_error\",\n              metrics=[\"mse\"]\n             )","1fc29b65":"model.summary()","5693e9e5":"from tensorflow.keras.callbacks import EarlyStopping\n\ncallback=EarlyStopping(monitor=\"loss\",patience=50)","34782abd":"model.fit(generator,epochs=200,steps_per_epoch=3,verbose=False,callbacks=[callback])","56548c19":"loss_per_epoch=model.history.history[\"loss\"]\nplt.plot(loss_per_epoch)\nplt.show()","1c32b12e":"test_pred=[]\n\ntest_batch=train_scale[-time_step:]\ncurrent_batch=test_batch.reshape(1,time_step,1)\n\nfor i in range(len(test)):\n    pred=model.predict(current_batch)[0]\n    test_pred.append(pred)\n    \n    current_batch=np.append(current_batch[:,1:,:],[[pred]],axis=1)","78069ff7":"test_pred","f452d955":"true_pred=scaler.inverse_transform(test_pred)","98dbfe84":"test[\"pred\"]=true_pred","a2233cd8":"rmse=mean_squared_error(test[\"temp\"],true_pred,squared=False)\nrmse","8ef348f6":"ax=train[\"temp\"].plot(label=\"Training Data\",figsize=(13,8))\nax.set_facecolor(\"gray\")\ntest[\"temp\"].plot(label=\"Testing Data\")\ntest[\"pred\"].plot(label=\"Predicted data\",ax=ax)\nplt.grid(True)\nplt.xlabel(\"Months\",fontsize=15,fontweight=\"bold\")\nplt.ylabel(\"Mean Temperature\",fontsize=15,fontweight=\"bold\")\nplt.legend(loc=\"best\")\nplt.show()","5730991f":"**We will now resample our hourly data into daily data using the resampling method**","e569674a":"**Plot showing traning testing and predicted temperature using LSTM**","1659ea2b":"**Delhi have experienced a sharp increase in average yearly temperature in late 1990s and have stabalized after 2002.**","a9055106":"**This for loop will iterate over all combinations of initialized parameters, fit SARIMAX model with all combinations and parameters yeilding lowest AIC will be selected**","b372687e":"**Import Libraries**","22054cdb":"**Read the data**","df6c4727":"# Disadvantage of MA:\n\n* **Since I am just taking the temperature of past as the temperature of future, in a long run my model will just be predicting same recorded temperatures, this is so Naive of MA model.**\n* **We know that for past decades we are experiencing a rise in temperature(global warming), and it will increase in the future, so for that reason we also have to take into account of exogenous features\/variables, which MA neglects.**\n","0b4779af":"**Model Summary**","851043be":"**RMSE values accounts to 1.6 which is pretty good.**","bc973c16":"We have observed the model with **SARIMAX((1, 0, 0)x(0, 1, 1, 12)12)-AIC:522.8763887409265** is better than all other combinations hence we will use this combination as our parameters\n","a1d0ec12":"**Comparing the Differenced series with an original series it have remove trend and sesonality form our data**","dd9d94c6":"**Obtain the average temperature of days in a month(daily_mean),monthly mean(monthly_mean) in a year and hourly mean in a day.**","7a720349":"**Now lets try to predict new data from March 2017 to December 2021**","5651e2a0":"# Exploratory Data Analysis","08f1c0da":"**Residual plot: There is no obvious patterns observed.**\n\n**Histogram + KDE plot: KDE curve is similar to the normal distribution**\n\n**Normal Q-Q: Most of the data points lies on the red line**\n\n**Correlogram :correlations for lag greater than one is not significant** ","80348deb":"# **Introduction**\n\nA time series is a series of data points ordered in time. Time series adds an explicit order dependence between observations: a time dimension. In a normal machine learning dataset, the dataset is a collection of observations that are treated equally when future is being predicted, however in time series each data point is closely related to other.\n\n![https:\/\/www.vmcdn.ca\/f\/files\/via\/images\/weather\/rain-umbrella-vancouver-weather.jpg;w=960](http:\/\/www.vmcdn.ca\/f\/files\/via\/images\/weather\/rain-umbrella-vancouver-weather.jpg;w=960)\n\n# **Problem Statement**\nThe dataset contains hourly weather data of Delhi from 1996-2017 in degree celsius. For this Notebook I took the hourly temperature for analysis and forecasting.\n\n# Content:\n\n**1. EDA**:Exploratory Data Analysis on Hourly, Daily, Monthly and Yearly Data.\n\n**2. Analysis of Daily Data:-** MA model to predict Daily temperature\n\n**3. Analysis of Monthly Data:-** \n* Checking data stationarity\n* Making data stationarity\n* Differencing to make data stationarity\n\n**4. SARIMAX Model:**\n* Parameter tuning\n* Fitting model\n* Predicting test data\n* Predicting new data\n\n**5. Neural Networks(LSTM)**\n* Data normalization\n* Data preparation\n* Model Building\n* Predicting test data","f79febd9":"# SARIMAX","62d24e54":"**fit model with training data**","10406b31":"**Now my data contains observations from 2001-01-01 as seen in the plot below**","d9ed5329":"**Despite removing huge chunk of missing data, I re-encountered 4 missing data, since now the amount of missing data is very small compared to the total datasize, I have filled the daily missing data using the temperatures of preceding days.**","ab9f8404":"**Droping daily data before 2001-01-01**","700ec819":"# How to make data stationary?\n**Differencing**: It is a method of transforming a time series dataset. It can be used to remove the series dependence on time, so-called temporal dependence. Differencing can help stabilize the mean of the time series by removing changes in the level of a time series, and so eliminating (or reducing) trend and seasonality.\n\n\n**For this reason I have used differencing with an order of 12(Seasonal order) as we have observed that data has a repeating pattern after 12 months period.**","069730fc":"# Ways to check stationarity:\n**1. Visualization: We have concluded form the above visualization plots that the data exhibits seasonality.**\n\n**2. Adfuller test: We can confirm data stationarity using adfuller statistics which I have discussed below**","3c55dfbd":"# Analysis of Daily Data","71faea2c":"**As we plot our daily data we now observe that in between 2000-2001 there are huge amount of missing data, so we will take the dataset from 2001 and drop the data of preceding days.**","f2ff2e90":"**Components of Time Series Data:**\n\n**1. Trend: A gradual increase or decrease increase in the of observations(mean & variance) over a long period of time.**\n\n**2. Seasonality: Repeating\/predictable pattern over a certain time period.**\n\n**3. Residual: It is also called as the white noise, which generally are the errors which does not account to trend and seasonality.**","f7b36265":"**Making date column as an index of the dataframe**","35d5493d":"# Neural Networks(LSTM)","24c72e94":"**I have extracted datetime and temperature from the data**","c5b3008b":"**Visualize the data**","8c1f2a04":"**Now our p-value is less than 0.05 and ADF statistics smaller than critical values, now we have obtained a stationary data.**","d4ec9d51":"# Data Splitting\n\n**I used temperature data from 2002-2015 to train the model and 2015-2017 for testing purpose**","a3ced2e0":"**tranform the temperatures in bw 0-1**","f3815969":"**Explanation:**\n\nTimeseriesGenerator takes arguments \n\n**data**(data from where we generate sequence),\n\n**targets**(data from where we generate targets),\n\n**length**(time steps to consider for building sequnce)\n\n","77f7f7ff":"**We obtain a rmse of 3.69 which is higher that of SARIMAX model, however Neural Networks always provides room for model improvement,thus by using valid activation function and neurons this can be improved**","40b8db1d":"**The new predicted Monthly average Temperature**","582b8a2a":"**Counting null values: There are 673 null values in our data but as of now we will not handle the missing data, I have handled in later part of Notebook**","5044395a":"**We have Normalized our data in range 0-1, so get the temperatures we will inverse transform the scaled data into its original scale**","9eec71a4":"**I will now build a neural network, that will help us forecast the same temperature data**","1a35ad0d":"# Get the test prediction\n\n**Explanation**:\n\nAs I have mentioned earlier we use past 12 months to get the temperature of present month, so to predict the temperature of first test month I have to use the last 12 months of traning data.\n\nSince LSTM layer accpets 3-dim data i have reshaped the input data.\n\nOnce we get the prediction of first test month, I will append the predicted temperature with the 11 other temperatures(By removing the first month) of current_batch, & repeat this process will repeat until the length of test data.","6b580dfd":"**Set a call back for my model with patience=50**","79eaa767":"**Predict the test data**","f372e82b":"**Visualizing loss per epoch, the loss is varying overtime but decreases significantly with increase in epoch**","cd028ef4":"**The function will return the adfuller statistics**\n","8f7cac09":"**We have our train and test data ready, but to feed data into neural network it is  highly recommended to transform data, for this purpose I have Normalized the data between 0-1, using MinMaxScaler**","37c983bc":"**There is no noticeable patterns in the days in month, because temperature varies in different days in different months.**","c571e8d6":"**There is one nan row because of shifting so I have deleted that**","570a99ef":"**SARIMAX takes arguments order=(p,d,q) & seasonal_order=(P,D,Q,s), so for this reason I have initialized parameters to grid search over the best parameters for SARIMAX.**","4528538c":"**There are few other models for TimeSeries data but for this data I have used SARIMAX model**","378f5e32":"**The monthly_mean plot depicts that the avg temperature is highest during the summer season(March-July) and drops significantly in winter seasons.**","05a85c7d":"**The blue line shows actual data and orange as predicted temperature, we can see that the plot is so identical and the forecasting is so precise**","90fc2df0":"**Lets plot auto-correlation and partial auto-correlation for the differenced series**\n\n**Auto-Correlation plot will help find MA order and partial-autocorrelation for AR order i.e the order of p,q for time series model**","48a1e818":"**I have resampled my daily data into monthly data**\n\n**As we can see the plot becomes more smoother than the daily data**","6f8fa61f":"**Model Building and Model Compiling**","78734451":"**The plot below makes sense to us, the temperature rises during daytime and drops towards evening and morning.**","44cd2a6c":"**Ideally we consider that time series data as stationary if p-value<0.05 & ADF statstics lesser than critical values, however in this case we have p=0.55 and ADF statistics greater than critical values, hence we conclude that our monthly data is not stationary.** ","e8eae381":"# Data Prepreparation:\n\n**Once the data is scaled we will prepare data in such a way that using past 12 months it will help predict avg temperature the comming month.**\n\n**keras TimeseriesGenerator helps builds the sequence without us having have to prepare data manually**","cdfb8d57":"**RMSE is 1.7 which is pretty good**","3a4aed50":"**Our Prediction is working well as of now and giving us good results on Test data**","6d332730":"# Stationarity test:\n\n**Non-Stationarity data: Since we have observed that our data exhibits seasonality and trend & it will effect value of time series at different time. So to feed our time series data to Models we have to convert them into stationary data**\n\n**Stationairty data: Data whose properties does not depend on time. The mean and variance remain constant with change in time, and hence the data dependence on time will be eliminated can perform statistical analysis on stationary data.**","cc435e8f":"**Converting date columns into pandas datetime format**","937c6374":"# MA(Moving Average to predict daily temperature):\n\n**Since there is minute difference in the temperature between consecutive days, I assumed that present days temperature will be equivalent to the average temperature of its preceding day.**\n\n**So I have used current temperature as the temperature of its past one day and for that reason I have made a predicted temperature by shifting the dataframe by one row.**","bd75ff79":"**Both acf & pacf plot shows significant bar after every 12 lags, but it is very difficult to get the orders of MA and AR orders from the plots so I have used gridSearch to search over various combinations that yeilds the smallest AIC.**","c03c128a":"**Initialize sequentail model**","0967190b":"**I have decomposed monthly data and it shows clear seasonality in every 12 months and from 2002-2008 the monthly temperature decreases, however increases later.**","7498db41":"# Analysis of Monthly Data","80e46d59":"**get the upper and lower bounds of predicted values**","a954b2cb":"**Now data is ready and its time to build Neural Networks to feed in training data**"}}