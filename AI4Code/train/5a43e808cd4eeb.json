{"cell_type":{"99f5a18c":"code","003dbae3":"code","5022cebc":"code","a9f7e531":"code","5255b1fe":"code","96592f36":"code","739e695c":"code","c293cb12":"code","601d7686":"code","e6ba95f3":"code","e1272a21":"code","3ba3aaaf":"code","1db6605e":"code","dd07a4ab":"code","04e18796":"code","ab98d39e":"code","3a3f7cfa":"code","88c3401d":"code","59ac8f53":"code","53738455":"code","ad49f7ae":"code","f7170f7f":"code","724b22d5":"code","6bade4a2":"code","80ef645b":"code","d6dc2c76":"code","a25a824d":"code","05483261":"code","55c9e1b0":"code","4a7942a5":"code","b7a7953a":"code","71df2ac3":"code","d8b6fe02":"code","66c3567e":"code","fbde80fe":"code","ac86a385":"code","e8a6accd":"code","70aac279":"code","0d490448":"code","c8844493":"markdown","1c45f70a":"markdown","4130f6f0":"markdown","1d8582ad":"markdown","3a0575a7":"markdown","09be7f15":"markdown","2bcc5cd5":"markdown","27c43cff":"markdown","035d4a4d":"markdown","632a1be9":"markdown","a4267983":"markdown","709e6d1c":"markdown","f5533c93":"markdown","84e28517":"markdown","585236ed":"markdown","629301b3":"markdown","b67260cd":"markdown","46d26ad8":"markdown","b84f4cea":"markdown","2bbc1223":"markdown"},"source":{"99f5a18c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.feature_selection import SelectFromModel\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.metrics import *\nfrom tpot import TPOTClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","003dbae3":"df = pd.read_excel(\"\/kaggle\/input\/covid19\/dataset.xlsx\")\ndf.head()","5022cebc":"df.describe()","a9f7e531":"null_series = df.isnull().sum()","5255b1fe":"null_series[null_series > 0]","96592f36":"good_cols = null_series[null_series < df.shape[0]\/20].reset_index()\ngood_cols.head(10)","739e695c":"df_goods = df[good_cols[\"index\"]]\ndf_goods.head()","c293cb12":"df_goods.describe(include=\"all\")","601d7686":"sn.heatmap(df_goods.corr(), annot=True)\nplt.show()","e6ba95f3":"corr_matrix = df.corr().abs()\n\n#the matrix is symmetric so we need to extract upper triangle matrix without diagonal (k = 1)\nsol = (corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n                 .stack()\n                 .sort_values(ascending=False))\nsol[sol > 0.5]","e1272a21":"df.groupby(\"Patient addmited to regular ward (1=yes, 0=no)\").count()","3ba3aaaf":"df.groupby(\"Patient addmited to intensive care unit (1=yes, 0=no)\").count()","1db6605e":"df.groupby(\"Patient addmited to semi-intensive unit (1=yes, 0=no)\").count()","dd07a4ab":"df['Urine - pH'].replace('N\u00e3o Realizado', np.nan, inplace=True)","04e18796":"df['Urine - Leukocytes'].replace('<1000', '999', inplace=True)","ab98d39e":"df['Urine - pH'] = df['Urine - pH'].astype(\"float64\")","3a3f7cfa":"df['Urine - Leukocytes'] = df['Urine - Leukocytes'].astype(\"float64\")","88c3401d":"df.dtypes[(df.dtypes == \"object\")].index","59ac8f53":"df_nop = df.drop([\n    \"Patient ID\",\n    'SARS-Cov-2 exam result'\n], axis=1)","53738455":"df_result = pd.concat([df_nop, pd.get_dummies(df_nop[df_nop.dtypes[(df_nop.dtypes == \"object\")].index])], axis=1).drop(\n    df_nop.dtypes[(df_nop.dtypes == \"object\")].index, axis=1).drop([\n    'Respiratory Syncytial Virus_not_detected',\n    'Influenza A_not_detected',\n    'Influenza B_not_detected',\n    'Parainfluenza 1_not_detected',\n    'CoronavirusNL63_not_detected',\n    'Rhinovirus\/Enterovirus_not_detected',\n    'Coronavirus HKU1_not_detected',\n    'Parainfluenza 3_not_detected',\n    'Chlamydophila pneumoniae_not_detected',\n    'Adenovirus_not_detected',\n    'Parainfluenza 4_not_detected',\n    'Coronavirus229E_not_detected',\n    'CoronavirusOC43_not_detected',\n    'Inf A H1N1 2009_not_detected',\n    'Bordetella pertussis_not_detected',\n    'Metapneumovirus_not_detected',\n    'Influenza B, rapid test_negative',\n    'Influenza A, rapid test_negative',\n    'Urine - Esterase_not_done',\n    'Urine - Hemoglobin_not_done',\n    'Urine - Hemoglobin_absent',\n    'Strepto A_not_done',\n    'Urine - Bile pigments_not_done',\n    'Urine - Ketone Bodies_not_done',\n    'Urine - Nitrite_not_done',\n    'Urine - Urobilinogen_not_done',\n    'Urine - Protein_not_done'\n], axis=1)","ad49f7ae":"list(df_result.columns)","f7170f7f":"def make_pipeline(x, y, model=RandomForestClassifier(random_state=42, n_estimators=5)):\n\n    pipeline = Pipeline([\n        ('inputer', SimpleImputer(missing_values=np.nan, strategy='median')),\n        ('normalizer', StandardScaler()),\n        ('feature', SelectFromModel(RandomForestClassifier(random_state=42, n_estimators=5))),\n        ('clf', model)\n    ])\n    sampler = RandomUnderSampler(random_state=42)\n    X_resampled, y_resampled = sampler.fit_resample(x, y)\n    X_train, X_test, y_train, y_test = train_test_split(X_resampled,\n                                                   y_resampled,\n                                                   test_size = 0.3,\n                                                   random_state = 42)\n    return (pipeline.fit(X_train, y_train), X_test, y_test)","724b22d5":"df_result_final = df_result.drop([\n    'Patient addmited to semi-intensive unit (1=yes, 0=no)',\n    'Patient addmited to intensive care unit (1=yes, 0=no)'\n], axis=1)\nx, y = (df_result_final.drop('Patient addmited to regular ward (1=yes, 0=no)', axis=1), df_result_final['Patient addmited to regular ward (1=yes, 0=no)'])","6bade4a2":"rfmodel, X_test, y_test = make_pipeline(x, y)","80ef645b":"rfmodel.score(X_test, y_test)","d6dc2c76":"print(classification_report(rfmodel.predict(X_test), y_test))","a25a824d":"tpot = TPOTClassifier(generations=1, verbosity=2, random_state=42)\ntmodel, X_test, y_test = make_pipeline(x, y, tpot)","05483261":"tmodel.score(X_test, y_test)","55c9e1b0":"print(classification_report(tmodel.predict(X_test), y_test))","4a7942a5":"tmodel[\"clf\"].export(\"best_model.py\")","b7a7953a":"with open(\"best_model.py\") as best_model:\n    print(best_model.read())","71df2ac3":"from sklearn.ensemble import GradientBoostingClassifier\nbest_model = GradientBoostingClassifier(\n    learning_rate=0.01, max_depth=10, max_features=0.3, min_samples_leaf=7, min_samples_split=4, n_estimators=5, subsample=0.7000000000000001)\nbmodel, X_test, y_test = make_pipeline(x, y, best_model)","d8b6fe02":"bmodel.score(X_test, y_test)","66c3567e":"print(classification_report(bmodel.predict(X_test), y_test))","fbde80fe":"df_result_final = df_result.drop([\n    'Patient addmited to regular ward (1=yes, 0=no)',\n    'Patient addmited to intensive care unit (1=yes, 0=no)'\n], axis=1)\nx, y = (df_result_final.drop('Patient addmited to semi-intensive unit (1=yes, 0=no)', axis=1), df_result_final['Patient addmited to semi-intensive unit (1=yes, 0=no)'])","ac86a385":"rfmodel, X_test, y_test = make_pipeline(x, y)\nprint(rfmodel.score(X_test, y_test))\nprint(classification_report(rfmodel.predict(X_test), y_test))","e8a6accd":"from sklearn.ensemble import GradientBoostingClassifier\nbest_model = GradientBoostingClassifier(\n    learning_rate=0.01, max_depth=10, max_features=0.3, min_samples_leaf=7, min_samples_split=4, n_estimators=5, subsample=0.7000000000000001)\nbmodel, X_test, y_test = make_pipeline(x, y, best_model)\nprint(bmodel.score(X_test, y_test))\nprint(classification_report(bmodel.predict(X_test), y_test))","70aac279":"df_result_final = df_result.drop([\n    'Patient addmited to regular ward (1=yes, 0=no)',\n    'Patient addmited to semi-intensive unit (1=yes, 0=no)'\n], axis=1)\nx, y = (df_result_final.drop('Patient addmited to intensive care unit (1=yes, 0=no)', axis=1), df_result_final['Patient addmited to intensive care unit (1=yes, 0=no)'])","0d490448":"rfmodel, X_test, y_test = make_pipeline(x, y)\nprint(rfmodel.score(X_test, y_test))\nprint(classification_report(rfmodel.predict(X_test), y_test))","c8844493":"# Predicting regular ward[](http:\/\/)","1c45f70a":"## Removing columns not useful","4130f6f0":"## Fixing some columns","1d8582ad":"Very unbalanced dataset, almost impossible to get good results","3a0575a7":"87% accuracy, but probably overfitting","09be7f15":"I believe that accuracy can be good because random forest already had good results, but probably with overfitting because need more data","2bcc5cd5":"88% accuracy with Random Forest, but probably overfitting","27c43cff":"A lot of missing values...","035d4a4d":"## Trying with Random Forest","632a1be9":"## Predicting Intensive care unit","a4267983":"## Making dummies from categorical","709e6d1c":"# Analysing data","f5533c93":"With less estimators trying to avoid overfitting","84e28517":"## Predicting semi-intensive unit","585236ed":"# Data Preparation","629301b3":"Need a pipeline with undersampling, scaler, imputer and feature selection","b67260cd":"With more values have low correlation","46d26ad8":"## Using genetic algoritms","b84f4cea":"* ## With Best Model 85% accuracy","2bbc1223":"### Try Random Forest and same model with Gradient Boosting"}}