{"cell_type":{"b5f18134":"code","99f108a3":"code","435dacaf":"code","adbfe737":"code","aec1bcac":"code","4a15f44b":"code","fe21850e":"code","ed0f2280":"code","070c4cfa":"code","b8bc69e9":"code","3a27e890":"code","289e9108":"code","c8bc675c":"code","6bf89ec2":"code","2c21e32e":"code","429768eb":"code","822946a2":"code","f5ab2abd":"code","86dab911":"code","0ba54e2c":"code","d52ff9e1":"code","d22a9f6a":"code","672e73d7":"code","9fcb65da":"code","47729875":"code","90bbae21":"markdown","54de1c68":"markdown","2023bf39":"markdown","4a9abd19":"markdown","06eb996c":"markdown","325efebc":"markdown","3c9c26ae":"markdown"},"source":{"b5f18134":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99f108a3":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_data.head()","435dacaf":"test_data = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data.head()","adbfe737":"train_data.shape","aec1bcac":"test_data.shape","4a15f44b":"train_data.dtypes","fe21850e":"train_data.describe()","ed0f2280":"train_data.count()","070c4cfa":"train_data.drop(['PassengerId', 'Ticket', 'Cabin'], axis=1, inplace=True)","b8bc69e9":"train_data","3a27e890":"# input median(Age) for na's in Age column\ntrain_data['Age'] = train_data['Age'].fillna(value = train_data['Age'].median())","289e9108":"# input mode(Embarked) which is 'S' for na's in Embarked column\ntrain_data['Embarked'] = train_data['Embarked'].fillna('S')","c8bc675c":"train_data.count()","6bf89ec2":"train_data.head()","2c21e32e":"# input median(Age) for na's in Age column\ntest_data['Age'] = test_data['Age'].fillna(value = test_data['Age'].median())","429768eb":"# input median(Fare) for na's in Fare column\ntest_data['Fare'] = test_data['Fare'].fillna(value = test_data['Fare'].median())","822946a2":"test_data.count()","f5ab2abd":"# feature selection\nfeatures = ['Pclass','Sex','SibSp','Parch','Age','Embarked']","86dab911":"train_X = train_data[features]\ntrain_X","0ba54e2c":"test_X = test_data[features]\ntest_X","d52ff9e1":"train_y = train_data['Survived']\ntrain_y","d22a9f6a":"from sklearn.tree import DecisionTreeClassifier\n\ndecision_tree_model = DecisionTreeClassifier(random_state = 0)\nX = pd.get_dummies(train_X)\ndecision_tree_model.fit(X, train_y)\ntX = pd.get_dummies(test_X)\npred_y = decision_tree_model.predict(tX)\ndecision_tree_model_accuracy = round(decision_tree_model.score(X, train_y) * 100, 2)\ndecision_tree_model_accuracy","672e73d7":"from sklearn.ensemble import RandomForestClassifier\n\nrandom_forest_model = RandomForestClassifier(random_state = 0)\nrandom_forest_model.fit(X,train_y)\npredictions = random_forest_model.predict(tX)\nrandom_forest_model_accuracy = round(random_forest_model.score(X, train_y) * 100, 2)\nrandom_forest_model_accuracy","9fcb65da":"from sklearn import svm\n\nclf = svm.SVC(kernel = 'poly',random_state = 0)\nclf.fit(X, train_y)\npred_y = clf.predict(tX)\nclf_accuracy = round(clf.score(X, train_y) * 100, 2)\nclf_accuracy","47729875":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","90bbae21":"## Decision Tree Model","54de1c68":"## Support Vector Model","2023bf39":"1. Missing values: age, cabin and embarked\n2. Unwanted columns or features: PassengerId, ticket(does not provide much information about survival) and cabin (has a high number of missing values)","4a9abd19":"* Numerical: PassengerId, Pclass, Age, SibSp, Parch, Fare\n* Categorical: Name, Sex, Ticket, Cabin, Embarked\n* Target: Survived","06eb996c":"# Missing Value Imputation","325efebc":"# Dropping the unwanted columns - PassengerId, Ticket, Cabin","3c9c26ae":"## Random Forest Model"}}