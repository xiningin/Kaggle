{"cell_type":{"c6f2e52e":"code","00f80131":"code","b8a57d11":"code","2c208fd8":"code","ba5adcd5":"code","dce8c388":"code","0f867c38":"code","2fe06ad2":"code","8db1e13b":"code","664cdfb2":"code","13a052f7":"code","906f87f2":"code","75361761":"code","02231ef8":"code","d2dad42b":"code","de602a4c":"code","0ebc06d9":"code","49af33f9":"code","ae91c27c":"code","1b0c865e":"code","15e8f7ea":"code","f946f0ae":"code","e9b4104e":"code","f13f3007":"code","1886d850":"code","c9d4c9bb":"code","1c2ff5a4":"code","53e47e70":"code","417d06d3":"markdown","6994af26":"markdown","f4e83b55":"markdown","bccb11c2":"markdown","f6d8e72f":"markdown","cbe762a8":"markdown","8d414a21":"markdown","65434d9c":"markdown","0fed7587":"markdown","fec65413":"markdown","76b51d8a":"markdown","e5f02c8f":"markdown","2d139fa1":"markdown"},"source":{"c6f2e52e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00f80131":"import pandas as pd\nboston= pd.read_csv('..\/input\/crimes-in-boston\/crime.csv',encoding='ISO-8859-1',engine='python')\nboston.columns = map(str.lower, boston.columns)","b8a57d11":"boston.drop_duplicates(['incident_number'],inplace=True)","2c208fd8":"new=boston[['lat','long']]\nnew.describe()","ba5adcd5":"boston[boston.lat>= 40]\nboston[boston.long<=-70]\nboston.shooting.unique()# Output: ([nan, 'Y'])\nboston['shooting'] = boston.shooting.map({'NaN':0, 'Y':1}) #I change missing values is 0 because if we dont know whether there is a shooting in the area or not, probably there is no shooting incident in a area.\nboston.shooting=pd.get_dummies(boston.shooting)\nboston.shooting.value_counts()","dce8c388":"total = boston.isnull().sum().sort_values(ascending=False)\npercent = (boston.isnull().sum()\/boston.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data# I can't impute missignees in lat, long street,distinct and ucr_part varibles. If \u0131 drop them, my dataset wont be reduced too much.","0f867c38":"boston=boston.dropna()\nboston.info()# number of non-null is the same for all variables","2fe06ad2":"import pandas as pd\nboston['date']=pd.to_datetime(boston['occurred_on_date']).dt.floor('d')","8db1e13b":"boston.date = pd.to_datetime(boston.date, format='%Y-%m-%d')","664cdfb2":"boston['date'].describe().to_frame()","13a052f7":"yearpercentages=boston.groupby(['year'])['year'].count()\/boston.year.count()*100","906f87f2":"yearpercentages.plot.pie(autopct=\"%.1f%%\",title=\"Amount of the data by years\",figsize=(20,10))","75361761":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\ndf = boston.groupby(['date'])[\"incident_number\"].count().reset_index()\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111)\np=sns.lineplot(x=df.iloc[:,0], y=df.iloc[:,1], data=df)\np.set_ylabel(\"No. of Crimes Occurred\")\np.set_xlabel(\"Date\")\nplt.tight_layout()\nplt.show()","02231ef8":"plt.figure(figsize=(15,7))\nboston.groupby(['year','month']).count()['incident_number'].plot.barh(color = ['green', 'brown', 'orange', 'blue'])","d2dad42b":"shooting_monthly=boston.groupby(['month'])['month'].count()\/len(boston['incident_number'])*100\nshooting_monthly.plot.pie(autopct=\"%.1f%%\",title=\"Yearly Shooting Percentages between 2015 and 2018\",figsize=(20,10))","de602a4c":"from pandas.api.types import CategoricalDtype\ncats = [ 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ncat_type = CategoricalDtype(categories=cats, ordered=True)\nboston['day_of_week'] =boston['day_of_week'].astype(cat_type)\ncrime_2015=boston[boston['year']==2015]\ncrime_2016=boston[boston['year']==2016]\ncrime_2017=boston[boston['year']==2017]\ncrime_2018=boston[boston['year']==2018]","0ebc06d9":"plt.figure(figsize=(20,5))\nplt.title(\"Bar plot for incident numbers in Boston in 2015 by month and day of week\")\ncrime_2015.groupby(['month','day_of_week']).count()['incident_number'].plot.bar(color = ['blue', 'green', 'yellow', 'orange','black','red','brown'])","49af33f9":"plt.figure(figsize=(20,5))\nplt.title(\"Bar plot for incident numbers in Boston in 2016 by month and day of week\")\ncrime_2016.groupby(['month','day_of_week']).count()['incident_number'].plot.bar(color = ['blue', 'green', 'yellow', 'orange','black','red','brown'])","ae91c27c":"plt.figure(figsize=(20,5))\nplt.title(\"Bar plot for incident numbers in Boston in 2017 by month and day of week\")\ncrime_2017.groupby(['month','day_of_week']).count()['incident_number'].plot.bar(color = ['blue', 'green', 'yellow', 'orange','black','red','brown'])","1b0c865e":"plt.figure(figsize=(20,5))\nplt.title(\"Bar plot for incident numbers in Boston in 2018 by month and day of week\")\ncrime_2018.groupby(['month','day_of_week']).count()['incident_number'].plot.bar(color = ['blue', 'green', 'yellow', 'orange','black','red','brown'])","15e8f7ea":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\noffenses = boston.groupby('offense_code_group')['incident_number'].count().sort_values(ascending = False).to_frame()\noffenses.reset_index(inplace = True)\nplt.figure(figsize=(25,8))\nax = sns.barplot(x=\"offense_code_group\", y=\"incident_number\", data=offenses)\nax.set_xticklabels(ax.get_xticklabels(),rotation=90);","f946f0ae":"offenses1 = crime_2015.groupby('offense_code_group')['incident_number'].count().sort_values(ascending = False).to_frame()\noffenses1.reset_index(inplace = True)\noffenses2 = crime_2016.groupby('offense_code_group')['incident_number'].count().sort_values(ascending = False).to_frame()\noffenses2.reset_index(inplace = True)\noffenses3 = crime_2017.groupby('offense_code_group')['incident_number'].count().sort_values(ascending = False).to_frame()\noffenses3.reset_index(inplace = True)\noffenses4 = crime_2018.groupby('offense_code_group')['incident_number'].count().sort_values(ascending = False).to_frame()\noffenses4.reset_index(inplace = True)\no2015 = offenses1.rename(columns = {'offense_code_group': 'offense_code_group2015'}, inplace = False)\no2016=offenses2.rename(columns = {'offense_code_group': 'offense_code_group2016'}, inplace = False)\no2017=offenses3.rename(columns = {'offense_code_group': 'offense_code_group2017'}, inplace = False)\no2018=offenses4.rename(columns = {'offense_code_group': 'offense_code_group2018'}, inplace = False)\ndf_col = pd.concat([o2015,o2016,o2017,o2018], axis=1).drop('incident_number',axis=1)\ndf_col.head(5)","e9b4104e":"fig = plt.figure(figsize=(20,10))\norder2 = boston['offense_code_group'].value_counts().sort_values(ascending=False).head(6).index\nsns.countplot(data =boston, x='offense_code_group',hue='district', order = order2,palette='Paired' );\nplt.ylabel(\"Offense Amount\");","f13f3007":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, axes = plt.subplots(1,4, figsize = (40,10))\ndf2015 = crime_2015.groupby([\"district\"])[\"incident_number\"].count().reset_index()\ndf2015\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='incident_number',data=df2015,ax=axes[0]).set_title('Incident numbers in 2015 by distinct')\n\ndf2016 = crime_2016.groupby([\"district\"])[\"incident_number\"].count().reset_index()\ndf2016\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='incident_number',data=df2016,ax=axes[1]).set_title('Incident numbers in 2016 by distinct')\n\ndf2017 = crime_2017.groupby([\"district\"])[\"incident_number\"].count().reset_index()\ndf2017\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='incident_number',data=df2017,ax=axes[2]).set_title('Incident numbers in 2017by distinct')\n\ndf2018 = crime_2018.groupby([\"district\"])[\"incident_number\"].count().reset_index()\ndf2018\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='incident_number',data=df2018,ax=axes[3]).set_title('Incident numbers in 2018 by distinct')\n","1886d850":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, axes = plt.subplots(1,4, figsize = (40,6))\ndf2015 = crime_2015.groupby([\"district\"])[\"shooting\"].count().reset_index()\ndf2015\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='shooting',data=df2015,ax=axes[0]).set_title('Shooting numbers in 2015 by distinct')\n\ndf2016 = crime_2016.groupby([\"district\"])['shooting'].count().reset_index()\ndf2016\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='shooting',data=df2016,ax=axes[1]).set_title('Shooting numbers in 2016 by distinct')\n\ndf2017 = crime_2017.groupby([\"district\"])[\"shooting\"].count().reset_index()\ndf2017\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='shooting',data=df2017,ax=axes[2]).set_title('Shooting numbers in 2017 by distinct')\n\ndf2018 = crime_2018.groupby([\"district\"])[\"shooting\"].count().reset_index()\ndf2018\nsns.set(style=\"whitegrid\")\nsns.swarmplot(x='district',y='shooting',data=df2018,ax=axes[3]).set_title('Shooting numbers in 2018 by distinct')","c9d4c9bb":"fig = plt.figure(figsize=(12,5))\ncrime_street = boston.groupby('street')['shooting'].count().nlargest(10)\ncrime_street.plot(kind='bar', color =\"saddlebrown\")\nplt.xlabel(\"street\")\nplt.ylabel(\"Shooting Count\")\nplt.show()","1c2ff5a4":"hour_nums = boston.groupby(['hour']).count()['incident_number'].to_frame().reset_index()\nsns.set(rc={'figure.figsize':(20,5)})\nax = sns.barplot(x = 'hour' , y=\"incident_number\", data = hour_nums)","53e47e70":"boston_map=boston.groupby(['lat','long'])['incident_number'].count().reset_index()\nimport plotly.express as px\nfig = px.density_mapbox(boston_map, lat='lat', lon='long', z='incident_number', radius=6,center=dict(lat=42, lon=-71), zoom=7, mapbox_style=\"stamen-terrain\")\nfig.show()","417d06d3":"Incident numbers decrease after Friday till Sunday in general.","6994af26":"Data set started from June of 2015 and finished on september of 2018. It does not cover all months of the year for 2015 and 2018. There is less value comes from 2015 and 2018. Thus, to get a reliable result, we should consider this situation.","f4e83b55":"I want to see names of top 5 crimes by years. Motor vechile accident response is the most likely crime since 2015. Larcency is the second common crime in 2015 and 2016, but it gives its place to medical assistance crimes in recent year. The forth crime is investigate person since 2016.","bccb11c2":"The graph reveal the shooting counts for some streets. Washington street has highest rates of shooting.","f6d8e72f":"The latitude of Boston, MA, USA is 42.361145, and the longitude is -71.057083.\nThe numbers outside the boundries of Boston can be omitted.","cbe762a8":"There is no increasing trend for incident_numbers by years, but it looks there is a seasonality. In summer time, incident numbers are increase and it decrease in winter.","8d414a21":"Percentages of shooting in june, july is higher.","65434d9c":"B2 and C11 has highest rate of motor vechile accidents. D4 and A1 is has highest rate of Larcency. A15 has lowest rates for all of the crimes in the graph.","0fed7587":"Rates of crimes is lower early in the morning, and higher incident numbers are at 12 a.m. , 16-18 p.m. Probably, Number of people in any street increases at these hours.","fec65413":"The total number of crimes is highest in distinct B2 and lowest in A15 from 2015 to 2018. Moreover, graphs show same pattern for each year.","76b51d8a":"Again, the same patterns for shooting by years.","e5f02c8f":"This graph is also says that incident numbers increase in summer.","2d139fa1":"Motor vechile accident is the most likely crimes in Boston. The second most likely crime is larcency."}}