{"cell_type":{"0ccb796a":"code","bce5afb0":"code","5ee68df4":"code","ee6d1267":"code","abf62c30":"code","88e903d6":"code","20785485":"code","9f72a177":"code","4026ed41":"code","e79b4228":"code","55e2a4ae":"code","5c3661bd":"code","af635d3a":"code","e1fbdf4c":"code","51c38907":"code","dc7cb42e":"code","5ba8c053":"code","6cec711b":"code","e469e492":"code","8b38e6b1":"code","6902c3e3":"code","9e4b2d88":"code","58856127":"code","97fd5332":"code","413cafa9":"code","748ee04c":"code","0b291a24":"code","1092b18a":"code","7c7cec3e":"code","b3f31059":"code","c0e2ab18":"code","d32600bd":"code","abf608aa":"code","bbbdcbe5":"code","ff2aaaab":"code","2033997b":"code","3e57b5f9":"code","25458d52":"code","7526311b":"code","6b9c4a93":"code","7be64be8":"code","a148eede":"code","db8a2fd0":"code","b1726949":"code","27d0f7ac":"code","c9c0ad9e":"code","799e6cfa":"code","2a6347e4":"code","571c2237":"code","e8afee23":"code","4869159c":"code","a1de9e1e":"code","3c32419e":"code","70ebf699":"code","27971af6":"code","52cda740":"code","1345549d":"code","d770c61d":"code","314c1631":"code","9a1591b5":"code","bba7839a":"code","3c79511d":"code","fc97b800":"code","c333436c":"code","a610c72a":"code","e2d80d54":"code","1b1d772a":"code","d4acbe93":"code","fc0e859f":"code","0c6752f7":"code","dc86b525":"code","84c32801":"code","acb90ac3":"code","eecedfb0":"code","e37c2011":"code","003ed4d0":"code","d7574dae":"code","08bc621f":"code","9b5193af":"code","e473de14":"code","a5b08041":"code","5df2558f":"code","d0f7702e":"code","9c64bc0d":"code","7b54a427":"code","620a53f7":"code","b0793a51":"code","75965158":"code","583f7210":"code","317f3520":"code","02d18277":"code","f1a0061c":"code","59371dd6":"code","c349ca7e":"code","6d6dfd94":"code","2d855564":"markdown","eb513139":"markdown","b4362340":"markdown","7a55bd92":"markdown","0d2d38f4":"markdown","6ca7e15d":"markdown","206447a2":"markdown","dd8f781f":"markdown","ef519169":"markdown","4ae938ed":"markdown","515452c5":"markdown","60337ad7":"markdown","e674f11e":"markdown","694e1e3f":"markdown","440de93f":"markdown","eed51ddd":"markdown","ca8cc1f9":"markdown","46b493f6":"markdown","1539b860":"markdown","801f87db":"markdown","d7474397":"markdown","2e40a4fc":"markdown","49bfe899":"markdown","a68eab24":"markdown","c91c74f3":"markdown"},"source":{"0ccb796a":"# from IPython.core.display import HTML","bce5afb0":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1810417\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1810417\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","5ee68df4":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1816605\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1816605\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","ee6d1267":"# get latest version of pip\n# !pip install --upgrade pip\n\n# for calender map\n# ! pip install calmap\n\n# to convert us statenames to state codes\n# ! pip install us\n\n# to get continent name from country name\n# ! pip install pycountry_convert","abf62c30":"# math opeations\n# import math\n# produce random numbers\n# import random\n# to load json files\n# import json\n# datetime oprations\nfrom datetime import timedelta\n# to get web contents\n# from urllib.request import urlopen\n\n# for numerical analyiss\nimport numpy as np\n# to store and process data in dataframe\nimport pandas as pd","88e903d6":"# basic visualization package\nimport matplotlib.pyplot as plt\n# advanced ploting\nimport seaborn as sns\n\n# interactive visualization\nimport plotly.express as px\nimport plotly.graph_objs as go\n# import plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","20785485":"# for offline ploting\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","9f72a177":"# converter\n# from pandas.plotting import register_matplotlib_converters\n# register_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to USA states details\n# import us","4026ed41":"# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# seaborn plot style\n# sns.set_style('darkgrid')","e79b4228":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","55e2a4ae":"# Full data\n# =========\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\n# full_table.head()","5c3661bd":"# Grouped by day, country\n# =======================\n\nfull_grouped = pd.read_csv('..\/input\/corona-virus-report\/full_grouped.csv')\nfull_grouped['Date'] = pd.to_datetime(full_grouped['Date'])\n# full_grouped.head()","af635d3a":"# Day wise\n# ========\n\nday_wise = pd.read_csv('..\/input\/corona-virus-report\/day_wise.csv')\nday_wise['Date'] = pd.to_datetime(day_wise['Date'])\n# day_wise.head()","e1fbdf4c":"# Country wise\n# ============\n\ncountry_wise = pd.read_csv('..\/input\/corona-virus-report\/country_wise_latest.csv')\ncountry_wise = country_wise.replace('', np.nan).fillna(0)\n# country_wise.head()","51c38907":"# Worldometer data\n# ================\n\nworldometer_data = pd.read_csv('..\/input\/corona-virus-report\/worldometer_data.csv')\nworldometer_data = worldometer_data.replace('', np.nan).fillna(0)\n# worldometer_data.head()","dc7cb42e":"temp = day_wise[['Date','Deaths', 'Recovered', 'Active']].tail(1)\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=225, \n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","5ba8c053":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', \n                  color=col, hover_name=\"Country\/Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","6cec711b":"plot_map(country_wise, 'Confirmed', 'matter')","e469e492":"plot_map(country_wise, 'Deaths', 'matter')","8b38e6b1":"plot_map(country_wise, 'Deaths \/ 100 Cases', 'matter')","6902c3e3":"# Over the time\n\nfig = px.choropleth(full_grouped, locations=\"Country\/Region\", \n                    color=np.log(full_grouped[\"Confirmed\"]),\n                    locationmode='country names', hover_name=\"Country\/Region\", \n                    animation_frame=full_grouped[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.matter)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","9e4b2d88":"def plot_daywise(col, hue):\n    fig = px.bar(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","58856127":"def plot_daywise_line(col, hue):\n    fig = px.line(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","97fd5332":"temp = full_grouped.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600, width=700,\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","413cafa9":"plot_daywise('Confirmed', '#333333')","748ee04c":"plot_daywise('Active', '#333333')","0b291a24":"plot_daywise('New cases', '#333333')","1092b18a":"plot_daywise('Deaths', dth)","7c7cec3e":"plot_daywise('New deaths', dth)","b3f31059":"plot_daywise('Recovered', rec)","c0e2ab18":"plot_daywise('New recovered', rec)","d32600bd":"plot_daywise_line('Deaths \/ 100 Cases', dth)","abf608aa":"plot_daywise_line('Deaths \/ 100 Recovered', dth)","bbbdcbe5":"plot_daywise_line('Recovered \/ 100 Cases', rec)","ff2aaaab":"plot_daywise('No. of countries', '#035aa6')","2033997b":"temp = day_wise[['Date', 'Recovered', 'Active']]\ntemp = temp.melt(id_vars='Date', value_vars=['Recovered', 'Active'], \n                 var_name='Variable', value_name='Count')\npx.line(temp, x='Date', y='Count', color='Variable')","3e57b5f9":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","25458d52":"def plot_hbar_wm(col, n, min_pop=1000000, sort='descending'):\n    df = worldometer_data[worldometer_data['Population']>min_pop]\n    df = df.sort_values(col, ascending=True).tail(n)\n    fig = px.bar(df,\n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, \n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col+' (Only countries with > 1M Pop)', \n                      xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","7526311b":"plot_hbar(country_wise, 'Confirmed', 15)","6b9c4a93":"plot_hbar(country_wise, 'Active', 15)","7be64be8":"plot_hbar(country_wise, 'New cases', 15)","a148eede":"plot_hbar(country_wise, 'Deaths', 15)","db8a2fd0":"plot_hbar(country_wise, 'New deaths', 15)","b1726949":"plot_hbar(country_wise, 'Deaths \/ 100 Cases', 15)","27d0f7ac":"plot_hbar(country_wise, 'Recovered', 15)","c9c0ad9e":"plot_hbar(country_wise, 'New recovered', 15)","799e6cfa":"plot_hbar(country_wise, 'Recovered \/ 100 Cases', 15)","2a6347e4":"plot_hbar(country_wise, '1 week change', 15)","571c2237":"plot_hbar(country_wise, '1 week % increase', 15)","e8afee23":"plot_hbar_wm('Tot Cases\/1M pop', 15, 1000000)","4869159c":"plot_hbar_wm('Deaths\/1M pop', 15, 1000000)","a1de9e1e":"plot_hbar_wm('TotalTests', 15, 1000000)","3c32419e":"plot_hbar_wm('Tests\/1M pop', 15)","70ebf699":"def plot_stacked(col):\n    fig = px.bar(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                 height=600, title=col, \n                 color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","27971af6":"def plot_line(col):\n    fig = px.line(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                  height=600, title=col, \n                  color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","52cda740":"plot_stacked('Confirmed')","1345549d":"plot_stacked('Deaths')","d770c61d":"plot_stacked('New cases')","314c1631":"plot_line('Confirmed')","9a1591b5":"plot_line('Deaths')","bba7839a":"plot_line('New cases')","3c79511d":"temp = pd.merge(full_grouped[['Date', 'Country\/Region', 'Confirmed', 'Deaths']], \n                day_wise[['Date', 'Confirmed', 'Deaths']], on='Date')\ntemp['% Confirmed'] = round(temp['Confirmed_x']\/temp['Confirmed_y'], 3)*100\ntemp['% Deaths'] = round(temp['Deaths_x']\/temp['Deaths_y'], 3)*100\ntemp.head()","fc97b800":"fig = px.bar(temp, x='Date', y='% Confirmed', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","c333436c":"fig = px.bar(temp, x='Date', y='% Deaths', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","a610c72a":"def gt_n(n):\n    countries = full_grouped[full_grouped['Confirmed']>n]['Country\/Region'].unique()\n    temp = full_table[full_table['Country\/Region'].isin(countries)]\n    temp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\n    temp = temp[temp['Confirmed']>n]\n    # print(temp.head())\n\n    min_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\n    min_date.columns = ['Country\/Region', 'Min Date']\n    # print(min_date.head())\n\n    from_nth_case = pd.merge(temp, min_date, on='Country\/Region')\n    from_nth_case['Date'] = pd.to_datetime(from_nth_case['Date'])\n    from_nth_case['Min Date'] = pd.to_datetime(from_nth_case['Min Date'])\n    from_nth_case['N days'] = (from_nth_case['Date'] - from_nth_case['Min Date']).dt.days\n    # print(from_nth_case.head())\n\n    fig = px.line(from_nth_case, x='N days', y='Confirmed', color='Country\/Region', \n                  title='N days from '+str(n)+' case', height=600)\n    fig.show()","e2d80d54":"gt_n(100000)","1b1d772a":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', \n                 height=700, text='Country\/Region', log_x=True, log_y=True, \n                 title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","d4acbe93":"def plot_treemap(col):\n    fig = px.treemap(country_wise, path=[\"Country\/Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","fc0e859f":"plot_treemap('Confirmed')","0c6752f7":"plot_treemap('Deaths')","dc86b525":"def plot_bubble(col, pal):\n    temp = full_grouped[full_grouped[col]>0].sort_values('Country\/Region', ascending=False)\n    fig = px.scatter(temp, x='Date', y='Country\/Region', size=col, color=col, height=3000,\n                    color_continuous_scale=pal)\n    fig.update_layout(yaxis = dict(dtick = 1))\n    fig.update(layout_coloraxis_showscale=False)\n    fig.show()","84c32801":"plot_bubble('New cases', 'Viridis')","acb90ac3":"plot_bubble('Active', 'Viridis')","eecedfb0":"temp = full_grouped[['Date', 'Country\/Region', 'New cases']]\ntemp['New cases reported ?'] = temp['New cases']!=0\ntemp['New cases reported ?'] = temp['New cases reported ?'].astype(int)\n# temp.head()","e37c2011":"fig = go.Figure(data=go.Heatmap(\n        z=temp['New cases reported ?'],\n        x=temp['Date'],\n        y=temp['Country\/Region'],\n        colorscale='Emrld',\n        showlegend=False,\n        text=temp['New cases reported ?']))\n\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update_layout(height=3000)\nfig.show()","003ed4d0":"# HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","d7574dae":"# temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\n# temp = temp.sum().diff().reset_index()\n\n# mask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\n# temp.loc[mask, 'Confirmed'] = np.nan\n# temp.loc[mask, 'Deaths'] = np.nan\n\n# countries = full_table[full_table['Confirmed']>100000]['Country\/Region'].unique()\n\n# temp = temp[temp['Country\/Region'].isin(countries)]\n\n\n# n_cols = 3\n# n_rows = math.ceil(len(countries)\/n_cols)\n\n# fig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=countries)\n\n# for ind, country in enumerate(countries):\n#     row = int((ind\/n_cols)+1)\n#     col = int((ind%n_cols)+1)\n#     fig.add_trace(go.Bar(x=temp['Date'], y=temp.loc[temp['Country\/Region']==country, 'Confirmed'], name=country), row=row, col=col)\n    \n# fig.update_layout(height=4000, title_text=\"No. of new cases in each Country\")\n# fig.update_layout(showlegend=False)\n# fig.show()","08bc621f":"who = country_wise.groupby('WHO Region')['Confirmed', 'Deaths', 'Recovered', 'Active',\n                                         'New cases', 'Confirmed last week'].sum().reset_index()\nwho['Fatality Rate'] = round((who['Deaths'] \/ who['Confirmed']) * 100, 2)\nwho['Recovery Rate'] = (who['Recovered'] \/ who['Confirmed']) * 100\n\nwho_g = full_grouped.groupby(['WHO Region', 'Date'])['Confirmed', 'Deaths', 'Recovered', \n                                                     'Active','New cases', 'New deaths'].sum().reset_index()","9b5193af":"def plot_hbar(col, hover_data=[]):\n    fig = px.bar(who.sort_values(col), \n                 x=col, y=\"WHO Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","e473de14":"plot_hbar('Confirmed')","a5b08041":"plot_hbar('Deaths')","5df2558f":"plot_hbar('Fatality Rate')","d0f7702e":"fig = px.scatter(country_wise, x='Confirmed', y='Deaths', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='WHO Region wise',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","9c64bc0d":"px.bar(who_g, x=\"Date\", y=\"Confirmed\", color='WHO Region', \n       height=600, title='Confirmed', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","7b54a427":"px.bar(who_g, x=\"Date\", y=\"New cases\", color='WHO Region', \n       height=600, title='New cases', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","620a53f7":"full_grouped['Week No.'] = full_grouped['Date'].dt.strftime('%U')\nweek_wise = full_grouped.groupby('Week No.')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","b0793a51":"def plot_weekwise(col, hue):\n    fig = px.bar(week_wise, x=\"Week No.\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","75965158":"plot_weekwise('Confirmed', '#000000')","583f7210":"plot_weekwise('Deaths', dth)","317f3520":"plot_weekwise('New cases', '#cd6684')","02d18277":"full_grouped['Month'] = pd.DatetimeIndex(full_grouped['Date']).month\nmonth_wise = full_grouped.groupby('Month')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","f1a0061c":"def plot_monthwise(col, hue):\n    fig = px.bar(month_wise, x=\"Month\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","59371dd6":"plot_monthwise('Confirmed', '#000000')","c349ca7e":"plot_monthwise('Deaths', dth)","6d6dfd94":"plot_monthwise('New cases', '#cd6684')","2d855564":"### Color, theme, color palettes","eb513139":"### Ships that had passengers with COVID-19","b4362340":"# Bubble Plot","7a55bd92":"### Install libraries","0d2d38f4":"# Top 20 Countries","6ca7e15d":"# Epidemic Span","206447a2":"# Confirmed vs Deaths","dd8f781f":"# Composition of Cases","ef519169":"# WHO Region Wise","4ae938ed":"### Load libraries","515452c5":"## Weekly Statistics","60337ad7":"# Maps","e674f11e":"# Latest","694e1e3f":"# Libraries","440de93f":"# Running Bar Chart","eed51ddd":"# Country Wise","ca8cc1f9":"# Comparison with similar epidemics","46b493f6":"> *https:\/\/en.wikipedia.org\/wiki\/WHO_regions*","1539b860":"# Cases over the time","801f87db":"# Dataset","d7474397":"# Graph after 1M cases","2e40a4fc":"# Date vs","49bfe899":"## Monthly statistics","a68eab24":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","c91c74f3":"### Timeline"}}