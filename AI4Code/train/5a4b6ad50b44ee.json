{"cell_type":{"e7d3f52d":"code","e905cdfd":"code","ed6f53df":"code","5a5ed3bd":"code","3653335d":"code","7b98ae2f":"code","60db3778":"code","f6617b69":"code","7f4bd077":"code","5c61510f":"code","0494c068":"code","a2e97ebc":"code","a1b45ac9":"code","923559d7":"code","82e0308a":"code","d4be7d84":"code","fc7d7699":"code","5c462572":"code","9faee435":"code","279cffaa":"code","86c82194":"code","a35ad59e":"code","5a33ac58":"code","1945a958":"code","e4edfa96":"code","ad8c86f1":"code","dafb457d":"code","9dae2c3c":"code","e62d3bc6":"code","068c84cc":"code","a3b3c27f":"code","1eea0ffe":"code","058419c5":"code","ce23c970":"code","be480e33":"code","a6504d26":"code","5bf53e04":"code","c422f71d":"code","cc2bb80a":"code","5f487e23":"code","c18447e6":"code","98173585":"code","2dbbd341":"code","8563a091":"code","1b4d500e":"code","741dc837":"code","2f245854":"markdown","d8bd5a30":"markdown","194dd2f4":"markdown","3fbed65a":"markdown","bcbfb93f":"markdown","f8c92703":"markdown","0121e799":"markdown","d23b6611":"markdown","f3134642":"markdown","1cc2b656":"markdown","d707764c":"markdown","8d27a4f7":"markdown","902ab192":"markdown","b8c5be42":"markdown","889c9ba3":"markdown","f712da39":"markdown","894723c0":"markdown","358bd4d7":"markdown","f355cb9e":"markdown","01855b88":"markdown","26fcfeae":"markdown","3fcf4f49":"markdown","a72d4a2d":"markdown","7bce836d":"markdown","a6ab4144":"markdown","5c93179d":"markdown","e0c1abc8":"markdown"},"source":{"e7d3f52d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline","e905cdfd":"data = pd.read_csv('\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\ndata.head()","ed6f53df":"data = data.drop(['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1', \n                  'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'], axis = 1)\ndata.head()","5a5ed3bd":"len(data)","3653335d":"data.info()","7b98ae2f":"for column in data:\n    print(column)\n    print(data[column].unique())\n    print()","60db3778":"len(data['CLIENTNUM'].unique()) == len(data)","f6617b69":"sorted(data['CLIENTNUM'].unique()) == sorted(data['CLIENTNUM'])","7f4bd077":"data = data.drop(['CLIENTNUM'], axis = 1)","5c61510f":"data.groupby(['Attrition_Flag'])['Attrition_Flag'].count().plot.bar()","0494c068":"len(data[data['Attrition_Flag'] == 'Attrited Customer']) \/ len(data)","a2e97ebc":"data.loc[data['Attrition_Flag'] == 'Attrited Customer', 'Attrition_Flag'] = 0\ndata.loc[data['Attrition_Flag'] == 'Existing Customer', 'Attrition_Flag'] = 1\n\ndata.groupby(['Attrition_Flag'])['Attrition_Flag'].count().plot.bar()","a1b45ac9":"plt.figure(figsize = (10, 5))\ndata_to_plot = data.groupby(['Customer_Age'])['Customer_Age'].count()\n\ndata_to_plot.plot.bar(width = 0.75, color = 'C4')","923559d7":"data.groupby(['Gender'])['Gender'].count().plot.bar(color = 'C2')","82e0308a":"len(data[data['Gender'] == 'F']) \/ len(data)","d4be7d84":"plt.figure(figsize = (8, 4))\ndata_to_plot = data.groupby(['Dependent_count'])['Dependent_count'].count()\n\ndata_to_plot.plot.bar(width = 0.75, color = 'C8')","fc7d7699":"for column in ['Education_Level', 'Marital_Status', 'Income_Category']:\n\n    plt.figure(figsize = (8, 4))\n    data_to_plot = data.groupby([column])[column].count()\n\n    data_to_plot.plot.bar(width = 0.75, color = 'C7')","5c462572":"plt.figure(figsize = (7, 4))\ndata_to_plot = data.groupby(['Card_Category'])['Card_Category'].count()\n\ndata_to_plot.plot.bar(width = 0.75)","9faee435":"len(data[data['Card_Category'] == 'Platinum'])","279cffaa":"len(data[data['Card_Category'] != 'Blue'])","86c82194":"data.loc[data['Card_Category'] != 'Blue', 'Card_Category'] = 'not Blue'","a35ad59e":"plt.figure(figsize = (7, 4))\ndata_to_plot = data.groupby(['Card_Category'])['Card_Category'].count()\n\ndata_to_plot.plot.bar(width = 0.75)","5a33ac58":"plt.figure(figsize = (10, 5))\ndata_to_plot = data.groupby(['Months_on_book'])['Months_on_book'].count()\n\ndata_to_plot.plot.bar(width = 0.75, color = 'C5')","1945a958":"data_to_plot = data.groupby(['Total_Relationship_Count'])['Total_Relationship_Count'].count()\ndata_to_plot.plot.bar(width = 0.75, color = 'C5')","e4edfa96":"data_to_plot = data.groupby(['Months_Inactive_12_mon'])['Months_Inactive_12_mon'].count()\ndata_to_plot.plot.bar(width = 0.75, color = 'C8')","ad8c86f1":"len(data[data['Months_Inactive_12_mon'] == 0])","dafb457d":"len(data[data['Months_Inactive_12_mon'] > 4])","9dae2c3c":"data_to_plot = data.groupby(['Contacts_Count_12_mon'])['Contacts_Count_12_mon'].count()\ndata_to_plot.plot.bar(width = 0.75, color = 'C9')","e62d3bc6":"for column in ['Credit_Limit', 'Total_Revolving_Bal', 'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', \n               'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio']:\n    plt.figure(figsize = (10, 4))\n    plt.hist(data[column], bins = 50)\n    plt.title(column)","068c84cc":"#we are giving a point if person are Male(I`m not sexist I swear)\ndata.loc[data['Gender'] == 'F', 'Gender'] = 0\ndata.loc[data['Gender'] == 'M', 'Gender'] = 1\n\n#and if person has not a Blue card (because it`s more prestigious) \ndata.loc[data['Card_Category'] == 'Blue', 'Card_Category'] = 0\ndata.loc[data['Card_Category'] == 'not Blue', 'Card_Category'] = 1\n\ndata[['Gender', 'Card_Category', 'Attrition_Flag']] = data[['Gender', 'Card_Category', 'Attrition_Flag']].astype('int32')\n\n#We can change Education_Level and Income_Category on numeric variable:\n#the better education\/the higher income -- the higher number\neducation_dict = {'Unknown': 0, 'Uneducated': 1, 'High School': 2, 'College': 3, 'Graduate': 4, 'Post-Graduate': 5, 'Doctorate': 6}\nincome_category_dict = {'Unknown' : 0, 'Less than $40K' : 1, '$40K - $60K' : 2, '$60K - $80K' : 3, '$80K - $120K' : 4, '$120K +' : 5}\n\ndata['Education_Level'] = data['Education_Level'].replace(education_dict)\ndata['Income_Category'] = data['Income_Category'].replace(income_category_dict)\n\n#But we can`t do the same with Marital_Status so we'll do a column for each status\ndata = pd.concat([data, pd.get_dummies(data['Marital_Status'], prefix='Marital_Status')], axis=1)\ndata = data.drop(['Marital_Status', 'Marital_Status_Unknown'], axis = 1)\n\ndata.head()\n","a3b3c27f":"data.info()","1eea0ffe":"plt.figure(figsize = (12, 10))\nsns.heatmap(data.corr(), annot=True, fmt=\".2f\", cmap=\"YlGnBu\", cbar=False)","058419c5":"data[['Credit_Limit', 'Avg_Open_To_Buy']].head()","ce23c970":"len(data[data['Credit_Limit'] == data['Avg_Open_To_Buy']]) \/ len(data)","be480e33":"len(data[data['Credit_Limit'] >= data['Avg_Open_To_Buy']]) \/ len(data)","a6504d26":"len(data[data['Credit_Limit'] - data['Avg_Open_To_Buy'] == data['Total_Revolving_Bal']]) \/ len(data)","5bf53e04":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data.drop(['Attrition_Flag'], axis=1), data['Attrition_Flag'], \n                                                    test_size=0.2, stratify = data['Attrition_Flag'])","c422f71d":"from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","cc2bb80a":"list(zip(X_train.columns, clf.feature_importances_))","5f487e23":"from sklearn.metrics import accuracy_score\nprint('accuracy_score:', accuracy_score(y_test, y_pred))\n\ncol_to_drop = ['Gender', 'Card_Category', 'Marital_Status_Divorced', 'Marital_Status_Married', 'Marital_Status_Single']\n\nX_train = X_train.drop(col_to_drop, axis=1)\nX_test = X_test.drop(col_to_drop, axis=1)\n\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint('accuracy_score after dropping Gender, Marital_Status and Card_Category:', accuracy_score(y_test, y_pred))","c18447e6":"list(zip(X_train.columns, clf.feature_importances_))","98173585":"x, test_res, train_res = [], [], []\n\nfor i in range(3,25):\n    clf = RandomForestClassifier(max_depth = i)\n    clf.fit(X_train, y_train)\n    \n    train_res += [accuracy_score(y_train, clf.predict(X_train))]\n    test_res += [accuracy_score(y_test, clf.predict(X_test))]\n    x += [i]\n    \n    \nplt.figure(figsize = (12, 4))\nplt.plot(x, train_res, label = 'accuracy on train data')\nplt.plot(x, test_res, label = 'accuracy on test data')\nplt.legend()","2dbbd341":"x, test_res, train_res = [], [], []\n\nfor i in range(1, 10):\n    clf = RandomForestClassifier(max_depth = 11, class_weight = {0 : i, 1: 10-i})\n    clf.fit(X_train, y_train)\n    \n    train_res += [accuracy_score(y_train, clf.predict(X_train))]\n    test_res += [accuracy_score(y_test, clf.predict(X_test))]\n    x += [i]\n    \n    \nplt.figure(figsize = (12, 4))\nplt.plot(x, train_res, label = 'accuracy on train data')\nplt.plot(x, test_res, label = 'accuracy on test data')\nplt.legend()","8563a091":"from sklearn.metrics import recall_score\n\nx, test_res, train_res = [], [], []\n\nfor i in range(1, 10):\n    clf = RandomForestClassifier(max_depth = 11, class_weight = {0 : i, 1: 10-i})\n    clf.fit(X_train, y_train)\n    \n    train_res += [recall_score(y_train, clf.predict(X_train))]\n    test_res += [recall_score(y_test, clf.predict(X_test))]\n    x += [i]\n    \n    \nplt.figure(figsize = (12, 4))\nplt.plot(x, train_res, label = 'recall_score on train data')\nplt.plot(x, test_res, label = 'recall_score on test data')\nplt.legend()","1b4d500e":"clf = RandomForestClassifier(max_depth = 11, class_weight = {0 : 1, 1: 9})\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint('accuracy_score:', accuracy_score(y_test, y_pred))\nprint('recall_score:', recall_score(y_test, y_pred))","741dc837":"confusion_matrix(y_test, y_pred)","2f245854":"### 1.1 Attrition_Flag\n\nInternal event (customer activity) variable - if the account is closed then 1 else 0\n\nbasicly is what we need to predict","d8bd5a30":"## 3 Predicting\n\nFirst of all I want to find the most important features (to drop some of them)","194dd2f4":"## 2 Data Preparation\n\nWe should transform object values to numeric values.","3fbed65a":"there is to little examples with 0 and 5&6. but because it is numerical variable (not categorical) we won't do anything","bcbfb93f":"Blue cards are the the most popular (which is pretty obvious, they are the cheapest). But other cards are rare:\n","f8c92703":"After redoing train_test_split a few times, result of dropping columns almost always gave better results","0121e799":"it seems like it has normal distribution. I wouldn't change anything (for now) here\n\n### 1.5 Education_Level, Marital_Status, Income_Category","d23b6611":"so there isn't. now we can drop it","f3134642":"Avg_Open_To_Buy describes Open to Buy Credit Line (Average of last 12 months). That's why it more or equals then Credit_Limit and corr between them =1.","1cc2b656":"### 1.4 Dependent_count\n\nDemographic variable - Number of dependents\n","d707764c":"there is much more values with 36 values. maybe there was an discount or raffle prizes\n\n### 1.8 Total_Relationship_Count, Months_Inactive_12_mon, Contacts_Count_12_mon\n\n* Total_Relationship_Count -- Total no. of products held by the customer\n* Months_Inactive_12_mon -- No. of months inactive in the last 12 months\n* Contacts_Count_12_mon -- No. of Contacts in the last 12 months","8d27a4f7":"I think we should connect not Blue cards in one category bc there is too little of them","902ab192":"### 1.2 Customer_Age","b8c5be42":"so 'Credit_Limit' = 'Avg_Open_To_Buy' + 'Total_Revolving_Bal'","889c9ba3":"Our top priority in this business problem is to identify customers who are getting churned. Even if we predict non-churning customers as churned (FP), it won't harm our business. But predicting churning customers as Non-churning will do. So recall (TP\/TP + FN) need to be higher.\n\nSo basicly, we sholdn't care about accuracy, but we should care about recall. That's why changing class_weight will be the right decision.\n","f712da39":"sometimes Desission Trees gets retraining. The way to predict it: set max depth to the trees. Let's check if it does this time:","894723c0":"I think we can try to drop Gender and Card_Category. That makes sence: Gender is almost 50\/50, in Card_Category mostly people have 'Blue' value.\n\nHere we see that Marital_Status also doen't make big effort. Let's try to drop it","358bd4d7":"## 1 Exploring data\n### 1.0 CLIENTNUM\n\nit is unique id of a person. before we delete it, let's check if there is any duplicates","f355cb9e":"it seems like it has normal distribution. I wouldn't change anything (for now) here\n\n### 1.3 Gender","01855b88":"X axis means our value to class '0' (and 10 - x will be value to class '1'). Standart values are eqnal (5:5 on our graph)\n\nBefore that making any decisions let's make one more graph, but for another metric: recall (which is important for us)","26fcfeae":"### 1.9 Credit_Limit, Total_Revolving_Bal, Avg_Open_To_Buy, Total_Amt_Chng_Q4_Q1, Total_Trans_Amt, Total_Trans_Ct, Total_Ct_Chng_Q4_Q1, Avg_Utilization_Ratio","3fcf4f49":"so there is no NaN's and empty cells","a72d4a2d":"16% of customers are attrited so in next steps (when we will be separating our data on train and test parts) we need to remember that. Now I'll just change values on 0's and 1's\n","7bce836d":"there is some columns with variables 'unknown'. I think we shoudn't do anything with it\n\n### 1.6 Card_Category\nProduct Variable - Type of Card (Blue, Silver, Gold, Platinum)","a6ab4144":"only 20 cards out of 10K -- is very small amount","5c93179d":"### 1.7 Months_on_book\n\nPeriod of relationship with bank","e0c1abc8":"so it does. in next steps i suggest to set max_depth around 10-11. It won't make results much worse, but the model will be working faster\n\nnow we can check other parameters. one of them if class_weight (\"how important\" each class is for us):"}}