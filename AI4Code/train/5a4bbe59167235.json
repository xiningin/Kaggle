{"cell_type":{"c47e1c70":"code","ee9fa182":"code","5029ee83":"code","a35d8b2f":"code","f481114f":"code","680c504a":"code","15371f83":"code","185600be":"markdown"},"source":{"c47e1c70":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport os\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\n\n\nfrom IPython.display import clear_output\nimport warnings\nwarnings.filterwarnings('ignore')","ee9fa182":"train_dir = \"..\/input\/sign-language-digits-dataset\/Sign-Language-Digits-Datase\/train\"\ntest_dir = \"..\/input\/sign-language-digits-dataset\/Sign-Language-Digits-Datase\/test\"\nvalid_dir = \"..\/input\/sign-language-digits-dataset\/Sign-Language-Digits-Datase\/valid\"\n\nSEED = 12\nIMG_HEIGHT = 160\nIMG_WIDTH = 160\nBATCH_SIZE = 32\nEPOCHS = 30\nLR =  0.0005\nNUM_CLASSES = 10\nCLASS_LABELS = ['A0','A1','A2','A3','A4','A5','A6',\"A7\",'A8','A9']","5029ee83":"preprocess_fun = tf.keras.applications.densenet.preprocess_input\n\ntrain_datagen = ImageDataGenerator(horizontal_flip=True,\n                                   width_shift_range=0.1,\n                                   height_shift_range=0.05,\n                                   rescale = 1.\/255,\n                                   preprocessing_function=preprocess_fun\n                                  )\nvalid_datagen= ImageDataGenerator(horizontal_flip=True,\n                                   width_shift_range=0.1,\n                                   height_shift_range=0.05,\n                                   rescale = 1.\/255,\n                                   preprocessing_function=preprocess_fun\n                                  )\ntest_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                  preprocessing_function=preprocess_fun\n                                 )","a35d8b2f":"train_generator = train_datagen.flow_from_directory(directory = train_dir,\n                                                    target_size = (IMG_HEIGHT ,IMG_WIDTH),\n                                                    batch_size = BATCH_SIZE,\n                                                    shuffle  = True , \n                                                    color_mode = \"rgb\",\n                                                    class_mode = \"categorical\",\n                                                    seed = SEED\n                                                   )\nvalid_generator = train_datagen.flow_from_directory(directory = valid_dir,\n                                                    target_size = (IMG_HEIGHT ,IMG_WIDTH),\n                                                    batch_size = BATCH_SIZE,\n                                                    shuffle  = True , \n                                                    color_mode = \"rgb\",\n                                                    class_mode = \"categorical\",\n                                                    seed = SEED\n                                                   )\ntest_generator = test_datagen.flow_from_directory(directory = test_dir,\n                                                   target_size = (IMG_HEIGHT ,IMG_WIDTH),\n                                                    batch_size = BATCH_SIZE,\n                                                    shuffle  = False , \n                                                    color_mode = \"rgb\",\n                                                    class_mode = \"categorical\",\n                                                    seed = SEED\n                                                  )","f481114f":"def feature_extractor(inputs):\n    feature_extractor = tf.keras.applications.DenseNet201(input_shape=(IMG_HEIGHT,IMG_WIDTH, 3),\n                                               include_top=False,\n                                               weights=\"imagenet\")(inputs)\n    \n    return feature_extractor\n\ndef classifier(inputs):\n    x = tf.keras.layers.GlobalAveragePooling2D()(inputs)\n    x = tf.keras.layers.Dense(256, activation=\"relu\")(x)\n    x = tf.keras.layers.Dropout(0.3)(x)\n    x = tf.keras.layers.Dense(1024, activation=\"relu\")(x)\n    x = tf.keras.layers.Dropout(0.5)(x)\n    x = tf.keras.layers.Dense(512, activation=\"relu\")(x)\n    x = tf.keras.layers.Dropout(0.4) (x)\n    x = tf.keras.layers.Dense(NUM_CLASSES, activation=\"softmax\", name=\"classification\")(x)\n    \n    return x\n\ndef final_model(inputs):\n    densenet_feature_extractor = feature_extractor(inputs)\n    classification_output = classifier(densenet_feature_extractor)\n    \n    return classification_output\n\ndef define_compile_model():\n    \n    inputs = tf.keras.layers.Input(shape=(IMG_HEIGHT ,IMG_WIDTH,3))\n    classification_output = final_model(inputs) \n    model = tf.keras.Model(inputs=inputs, outputs = classification_output)\n     \n    model.compile(optimizer=tf.keras.optimizers.SGD(LR), \n                loss='categorical_crossentropy',\n                metrics = [tf.keras.metrics.AUC()])\n  \n    return model\n\nmodel = define_compile_model()\nclear_output()\nmodel.summary()","680c504a":"history = model.fit(x = train_generator,validation_data=valid_generator,epochs = EPOCHS)","15371f83":"preds = model.predict(test_generator)\ny_test = test_generator.classes\nfig, c_ax = plt.subplots(1,1, figsize = (15,8))\n\ndef multiclass_roc_auc_score(y_test, y_pred, average=\"macro\"):\n    lb = LabelBinarizer()\n    lb.fit(y_test)\n    y_test = lb.transform(y_test)\n    for (idx, c_label) in enumerate(CLASS_LABELS):\n        fpr, tpr, thresholds = roc_curve(y_test[:,idx].astype(int), y_pred[:,idx])\n        c_ax.plot(fpr, tpr,lw=2, label = '%s (AUC:%0.2f)'  % (c_label, auc(fpr, tpr)))\n    c_ax.plot(fpr, fpr, 'black',linestyle='dashed', lw=4, label = 'Random Guessing')\n    return roc_auc_score(y_test, y_pred, average=average)\n\nprint('ROC AUC score:', multiclass_roc_auc_score(y_test , preds  , average = \"micro\"))\nplt.xlabel('FALSE POSITIVE RATE', fontsize=18)\nplt.ylabel('TRUE POSITIVE RATE', fontsize=16)\nplt.legend(fontsize = 11.5)\nplt.show()","185600be":"# I refered to Note book 'Video Anomaly Detection ' https:\/\/www.kaggle.com\/odins0n\/video-anomaly-detection to try Densenet201. Thank you very much for sharing notebook 'Video Anomaly Detection' !"}}