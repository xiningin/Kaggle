{"cell_type":{"5f1c6a59":"code","60e77de3":"code","e264b6c8":"code","e05658e7":"code","02b15dad":"code","fdb50da8":"code","410746b8":"code","557029ba":"code","efcbbae1":"code","d5a2ebd7":"code","d352a025":"code","c986748b":"code","2d2a2406":"code","f8eaf3df":"code","8c888d6b":"code","a3dbc340":"code","43f16657":"code","47b760ea":"code","d353ebeb":"code","2359efc3":"code","3634b3f5":"code","a81c7974":"code","c270c9b5":"code","8ebf0995":"code","076e671a":"code","8864cc82":"code","587f9ae4":"code","6589584d":"code","3136650c":"code","ddcaa4d5":"code","19c43120":"code","a0f9bf02":"code","602f6691":"code","defd0998":"code","f2f0e8e4":"code","95e31142":"code","b2300550":"markdown","a57a0b8a":"markdown","ab9c2612":"markdown","7d648442":"markdown","61f063c7":"markdown","d435bda0":"markdown","2f22479e":"markdown","b628393f":"markdown","32df4954":"markdown","1e5a1c4f":"markdown","afa21a9d":"markdown","77e2f264":"markdown","92c35138":"markdown","156ab988":"markdown","0a3a7ac8":"markdown","fbeeac71":"markdown","8b06614e":"markdown","f44ab711":"markdown","998d5aae":"markdown","2a24555c":"markdown","10d1b28a":"markdown","6c9c8ba4":"markdown","504e2f4c":"markdown"},"source":{"5f1c6a59":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","60e77de3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier,ExtraTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier,RandomForestClassifier,StackingClassifier,VotingClassifier,BaggingClassifier,ExtraTreesClassifier,GradientBoostingClassifier,BaggingClassifier,ExtraTreesClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\n\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as cat\n","e264b6c8":"train = pd.read_csv(\"\/kaggle\/input\/whoisafriend\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/whoisafriend\/test.csv\")\nsample = pd.read_csv(\"\/kaggle\/input\/whoisafriend\/sample_submission.csv\")","e05658e7":"print(train.shape,test.shape)","02b15dad":"train.head()","fdb50da8":"test.head()","410746b8":"train.isnull().sum()","557029ba":"test.isnull().sum()","efcbbae1":"train.nunique()","d5a2ebd7":"test.nunique()","d352a025":"train['Friends'].value_counts()","c986748b":"plt.figure(figsize=(15, 4))\nsns.countplot(train['Moon Phase During Interaction'], hue=train['Friends'])\nplt.show()","2d2a2406":"plt.figure(figsize=(15, 4))\nsns.countplot(train['Interaction Type'], hue=train['Friends'])\nplt.show()","f8eaf3df":"# Create a copy of the train and test\ndtrain = train.copy()\ndtest = test.copy()","8c888d6b":"cat_feat = ['Person A','Person B','Interaction Type','Moon Phase During Interaction']","a3dbc340":"import warnings\nwarnings.warn('my warning')","43f16657":"# Combine the train and test data for label encoding\ndf = pd.concat([train,test])\n\nle = LabelEncoder()\nfor i in cat_feat:\n    df[i] = le.fit_transform(df[i])\n\ntrain = df[df['Friends'].notnull()]\ntest = df[df['Friends'].isnull()]\n\ndel df\n\ntrain['Friends']  = train['Friends'].astype(int)","47b760ea":"features = list(set(train.columns)-set(['Friends','ID']))\ntarget = 'Friends'\nfeatures","d353ebeb":"X_train, X_test, y_train, y_test  = train_test_split(train[features],train[target],test_size=0.3,random_state=45)","2359efc3":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","3634b3f5":"def baseliner(train, features, target, cv=3, metric='accuracy'):\n    \"\"\"\n    Function for baselining Models which return CV Score, Train Score, Valid Score\n    \"\"\"\n    print(\"Baseliner Models\\n\")\n    eval_dict = {}\n    models = [lgb.LGBMClassifier(), xgb.XGBClassifier(), cat.CatBoostClassifier(verbose=0), GradientBoostingClassifier(), LogisticRegression(), \n              RandomForestClassifier(), DecisionTreeClassifier(), AdaBoostClassifier()\n             ]\n    print(\"Model Name \\t |   CV\")\n    print(\"--\" * 50)\n\n    for index, model in enumerate(models, 0):\n        model_name = str(model).split(\"(\")[0]\n        eval_dict[model_name] = {}\n\n        results = cross_val_score(model, train[features], train[target], cv=cv, scoring=metric)\n        eval_dict[model_name]['cv'] = results.mean()\n\n        print(\"%s \\t | %.4f \\t\" % (\n            model_name[:12], eval_dict[model_name]['cv']))","a81c7974":"baseliner(train,features,target)","c270c9b5":"def cross_validation_function(model,train,features,cv):\n    results = cross_val_score(model, train[features], train[target], cv=cv, scoring='accuracy')\n    return print(\"Cross Validation Score:\",results.mean())","8ebf0995":"model = lgb.LGBMClassifier(random_state=7)\ncross_validation_function(model,train,features,cv=10)","076e671a":"lgb_model = lgb.LGBMClassifier(random_state=7)\nlgb_model.fit(X_train,y_train)\ny_pred = lgb_model.predict(X_test)\naccuracy_score(y_test,y_pred)","8864cc82":"importances = lgb_model.feature_importances_\nindices = np.argsort(importances)\n\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='g', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","587f9ae4":"def fit_model(model,train,features,target,test):\n    model.fit(train[features],train[target])\n    y_pred_test = model.predict(test[features])\n    test['Friends'] = y_pred_test\n    test['Friends'] = test['Friends'].astype(int)\n    return test","6589584d":"model = lgb.LGBMClassifier(random_state=7)\ntest = fit_model(model,train,features,target,test)\ntest[['ID','Friends']].to_csv(\"lgb_model.csv\",index=False)","3136650c":"features.remove(\"Moon Phase During Interaction\")\nfeatures","ddcaa4d5":"from sklearn.ensemble import VotingClassifier\n\nlgb_model  = lgb.LGBMClassifier(random_state=7)\nada_model  = AdaBoostClassifier(random_state=7)\ngrb_model = GradientBoostingClassifier(random_state=7)","19c43120":"eclf1 = VotingClassifier(estimators=[\n        ('lgb', lgb_model), ('ada', ada_model), ('grb', grb_model)], voting='hard')","a0f9bf02":"test = fit_model(eclf1,train,features,target,test)\ntest[['ID','Friends']].to_csv(\"ens_grb_lgb_ada_model.csv\",index=False)","602f6691":"# Baseliners Level 0\nlgb_model  = lgb.LGBMClassifier(random_state=7)\nlgb_model.fit(train[features],train[target])\ny_pred_train_lgb = lgb_model.predict(train[features])\ny_pred_test_lgb = lgb_model.predict(test[features])\n\n\n\ncat_model  = cat.CatBoostClassifier(verbose=0,random_state=7)\ncat_model.fit(train[features],train[target])\ny_pred_train_cat = cat_model.predict(train[features])\ny_pred_test_cat = cat_model.predict(test[features])\n\n\ngrb_model = GradientBoostingClassifier(random_state=7)\ngrb_model.fit(train[features],train[target])\ny_pred_train_grb = grb_model.predict(train[features])\ny_pred_test_grb = grb_model.predict(test[features])","defd0998":"train_pred = {\n    'cat':y_pred_train_cat,\n    'grb':y_pred_train_grb,\n    'lgb':y_pred_train_lgb\n}\ntrain_df = pd.DataFrame(train_pred)\ntrain_df.head()","f2f0e8e4":"test_pred = {\n    'cat':y_pred_test_cat,\n    'grb':y_pred_test_grb,\n    'lgb':y_pred_test_lgb\n}\ntest_df = pd.DataFrame(test_pred)\ntest_df.head()","95e31142":"grb_m = GradientBoostingClassifier(random_state=7)\ngrb_m.fit(train_df,train[target])\ny_pred = grb_m.predict(test_df)\ntest['Friends'] = y_pred\ntest[['ID','Friends']].to_csv(\"stacking_2_level.csv\",index=False)","b2300550":"### Value Count of target feature\nIn this data, the target class is balanced, the number of class 0 and class 1 are approximately equal","a57a0b8a":"**Thank you**  \n**Please Upvote if u have learnt something from this**","ab9c2612":"## Plot the Feature Importance","7d648442":"## Checking for NUll values","61f063c7":"![](https:\/\/image.slidesharecdn.com\/ensemblelearning-120730220523-phpapp02\/95\/ensemble-learning-the-wisdom-of-crowds-of-machines-15-728.jpg?cb=1343685993)","d435bda0":"# Baseliner Models","2f22479e":"## Import Datasets","b628393f":"![](https:\/\/www.researchgate.net\/publication\/324552457\/figure\/fig3\/AS:616245728645121@1523935839872\/An-example-scheme-of-stacking-ensemble-learning.png)","32df4954":"On Further Checking all the models, by removing \"moon phase during interaction\" feature the model was performing well.","1e5a1c4f":"## **Data Dictionary**\n* **Person A**: Name of Person A\n* **Person B** : Name of Person B\n* **Years of Knowing** : Years of Person A knowing Person B\n* **Interaction Type**: The type of interaction they had\n* **Interaction Duration** : The duration of interaction they had (in minutes)\n* **Moon Phase During Interaction** : The Moon Phase during their interaction","afa21a9d":"# Ensembling Method","77e2f264":"## Splitting the dataset","92c35138":"Stacking Model:  \n*     Level 0 : LGB,GradientBoosting, CatBoosting  \n*     Level 1 : GradientBoosting","156ab988":"![](https:\/\/turbologo.com\/articles\/wp-content\/uploads\/2019\/12\/friends-logo-cover-1280x720.png)","0a3a7ac8":"## Unique values\n","fbeeac71":"# Label Encoding","8b06614e":"# Who is a Friend?","f44ab711":"In this part all the features can be analysed for getting some insights.\n1. In Moon Phase During Interaction and Interaction Type features are having equal distribution amoung different classes.\nNow we have to check whether removing these two features makes any difference to the model or not.","998d5aae":"# Import modules","2a24555c":"# Stacking","10d1b28a":"# EDA","6c9c8ba4":"### Predict Friends or Not\n* In this machine learning challenge you are to predict whether two persons are friends or not.You are given a data of recorded events from a group of people and using the given data you have to predict whether they are friends or not.","504e2f4c":"## Features"}}