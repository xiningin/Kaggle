{"cell_type":{"a2a9242a":"code","83691b5d":"code","ba7c7274":"code","6be8f0a0":"code","976bb862":"code","61087f9f":"code","a7353a6a":"code","015d18d9":"code","c49e9ff6":"code","0cc99e10":"code","63181b4a":"code","83c3fb22":"code","743d8e9c":"code","29f4f300":"code","e42956e5":"code","742c1f4d":"code","cb7713d7":"code","23867a06":"code","10de336e":"code","94ab5caf":"code","b893338b":"code","1eb64da3":"code","9c9f0c1f":"code","65dc8d87":"code","06f66f17":"code","61d05b6b":"code","f2801af1":"code","54a298e0":"code","06acf92e":"code","92b491b7":"code","3662e46a":"code","6c8b6e53":"code","a17f9d50":"code","a3a9d14c":"code","39dd578e":"code","b477d88d":"code","2bfa111a":"code","021f89ff":"code","42eba549":"code","86d469d6":"code","2a5441fd":"code","f6defdea":"code","345319a8":"code","77745fcd":"code","2a99367d":"code","73258d08":"code","473579eb":"code","354f0cfe":"code","fbbff77e":"code","63cc2817":"code","ced3e88f":"code","6bacc95d":"code","357758bb":"code","5b30765b":"code","18f502e3":"code","578566d6":"code","760f1e34":"code","e910ae1b":"code","0eaee4c9":"code","5c297284":"code","da716e41":"code","796edbf0":"code","b7e4f6c3":"code","26d49d78":"code","1f8b1ae5":"code","a21c676b":"code","6fbdc7a5":"code","f8fb0176":"code","4c433820":"code","39db4f33":"code","c64b61b3":"code","2cccfce2":"code","132d466c":"code","42a5c1a5":"code","cd709925":"code","94faaa72":"code","2587c597":"code","77edc744":"code","27cd95ec":"code","2fa2ae66":"code","a0b4175e":"code","c26fa668":"code","97b231ba":"code","3704d123":"code","2f5f2d44":"code","bce30e53":"code","771ad6d5":"code","6af5447e":"code","9d4a0b65":"code","4aea2f7a":"code","bdc3b8cb":"code","3430086d":"code","66d2cc7e":"code","3b5d43a4":"code","bf848bb9":"code","20a304f7":"code","16bdd8e1":"code","cc9fda16":"code","f6c92435":"code","a2876757":"code","13c75b07":"code","4ab2b7b7":"code","8210136e":"code","ca979ac8":"code","7bdb1c4c":"code","51ac4a96":"code","b88ec5d0":"code","e7fd2fa9":"code","1034c79a":"code","bf341c0e":"code","2df6bb79":"code","56d8f32d":"code","d53aaa17":"code","21992fbc":"code","534907d7":"code","aeaf23af":"code","faeae74c":"code","cfcd919f":"code","11b8dc0f":"code","62ec113a":"code","4f5b1508":"code","a25da696":"code","c540eae8":"code","1e231776":"code","31794c37":"code","558c437b":"code","59626a6f":"code","0a99ef38":"code","4fb88d7e":"code","adf0f6c6":"code","2ba588bc":"code","a3e3a2f6":"code","e676ee49":"code","4b166e91":"code","dc63e4db":"code","4a570fe5":"code","bbbd2e30":"code","02ec5eb9":"code","a6a04d9a":"code","bca58506":"code","5eed62d5":"code","7300a642":"code","ac0152de":"code","e680748c":"code","2c292b7f":"code","4778c2f6":"code","2a0ab853":"code","9ec947cb":"code","ec09ddc0":"code","82fc6c26":"code","aae6179a":"code","d4a8857a":"code","c0c1c30c":"code","7b6ed1cf":"code","2a0b38d0":"code","c7ef8f95":"code","0a08991a":"markdown","c6ecc252":"markdown","1a764cb1":"markdown","49ccd5d6":"markdown","469f2579":"markdown","7805334a":"markdown","82fcd492":"markdown","21611f3e":"markdown","700d40fa":"markdown","364b7fa8":"markdown","48fae8e9":"markdown","21874ba7":"markdown","7a20f6b3":"markdown","3c90b367":"markdown","ca72bdc9":"markdown","c079fced":"markdown","830348e4":"markdown","10ec1350":"markdown","d0626cc0":"markdown","95c466df":"markdown","d3e0c5bb":"markdown","9ba540fa":"markdown","abfa508a":"markdown","24e08106":"markdown","ec41cfa6":"markdown"},"source":{"a2a9242a":"import numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom itertools import product\nfrom sklearn.mixture import GaussianMixture\n\nimport warnings\nimport sys\n\nfrom sklearn import preprocessing\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier\n\nfrom mlxtend.classifier import StackingCVClassifier\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport random\nrandom_state = 42\nrandom.seed(random_state)\nnp.random.seed(random_state)\nos.environ['PYTHONHASHSEED'] = str(random_state)\n","83691b5d":"train = pd.read_csv(\"..\/input\/learn-together\/train.csv\", index_col='Id')\ntest = pd.read_csv(\"..\/input\/learn-together\/test.csv\", index_col='Id')","ba7c7274":"train.head()","6be8f0a0":"test.head()","976bb862":"print('Train shape: '+ str(train.shape))\nprint('Test shape: ' + str(test.shape))","61087f9f":"soil_cols = [col  for col in train.columns.values if col.startswith('Soil_Type')]\n","a7353a6a":"#Checking if there is a sample with not exactly one soil class\nnp.sum(np.sum(train[soil_cols].values, axis=1)!=1)","015d18d9":"train_soil=train.copy()[soil_cols]\ntrain_soil['Soil_Class']=np.argmax(train_soil.values, axis=1)\ntrain['Soil_Class']=train_soil['Soil_Class']\ntrain.drop(soil_cols, axis=1, inplace=True)\ntrain.head()","c49e9ff6":"test_soil=test.copy()[soil_cols]\ntest_soil['Soil_Class']=np.argmax(test_soil.values, axis=1)\ntest['Soil_Class']=test_soil['Soil_Class']\ntest.drop(soil_cols, axis=1, inplace=True)\ntest.head()","0cc99e10":"wild_cols = [col  for col in train.columns.values if col.startswith('Wilderness_Area')]\nnp.sum(np.sum(train[wild_cols].values,axis=1)!=1)","63181b4a":"train_wild=train.copy()[wild_cols]\ntrain_wild['Wilderness_Area']=np.argmax(train_wild.values, axis=1)\ntrain['Wilderness_Area']=train_wild['Wilderness_Area']\ntrain.drop(wild_cols, axis=1, inplace=True)\ntrain.head()","83c3fb22":"test_wild=test.copy()[wild_cols]\ntest_wild['Wilderness_Area']=np.argmax(test_wild.values, axis=1)\ntest['Wilderness_Area']=test_wild['Wilderness_Area']\ntest.drop(wild_cols, axis=1, inplace=True)\ntest.head()","743d8e9c":"train.describe(include='all')","29f4f300":"test.describe(include='all')","e42956e5":"train.hist(figsize=(16, 16), bins=50, xlabelsize=5, ylabelsize=5);","742c1f4d":"test.hist(figsize=(16, 16), bins=50, xlabelsize=5, ylabelsize=5);","cb7713d7":"f, axes = plt.subplots(2, 1, figsize=(7, 7), sharex=True, sharey=True)\n\nsns.distplot(train['Elevation'], color=\"r\", ax=axes[0])\nsns.distplot(test['Elevation'], color=\"b\", ax=axes[1])\n","23867a06":"plt.scatter(train.Elevation, train.Cover_Type,  s=50)\n","10de336e":"plt.scatter(train.Aspect, train.Cover_Type, s=50)\n","94ab5caf":"plt.figure(figsize=(5,10))\nplt.subplot(311)\nplt.scatter(train.Hillshade_9am, train.Hillshade_Noon, s=50, c=train.Cover_Type)\nplt.xlabel(\"9am\")\nplt.ylabel(\"Noon\")\n\nplt.subplot(312)\nplt.scatter(train.Hillshade_Noon, train.Hillshade_3pm, s=50, c=train.Cover_Type)\nplt.xlabel(\"Noon\")\nplt.ylabel(\"3pm\")\n\nplt.subplot(313)\nplt.scatter(train.Hillshade_9am, train.Hillshade_3pm, s=50, c=train.Cover_Type)\nplt.xlabel(\"9am\")\nplt.ylabel(\"3pm\")\n","b893338b":"plt.figure(figsize=(15,5))\nplt.subplot(131)\nsns.distplot(train['Hillshade_9am'], color=\"r\")\nplt.subplot(132)\n\nsns.distplot(train['Hillshade_Noon'], color=\"b\")\nplt.subplot(133)\n\nsns.distplot(train['Hillshade_3pm'], color=\"g\")","1eb64da3":"f, axes = plt.subplots(1, 3, figsize=(15, 5), sharex=True, sharey=True)\n\nsns.distplot(train['Hillshade_9am'], color=\"r\", ax=axes[0])\nsns.distplot(train['Hillshade_Noon'], color=\"b\", ax=axes[1])\nsns.distplot(train['Hillshade_3pm'], color=\"g\", ax=axes[2])","9c9f0c1f":"plt.scatter(train.Horizontal_Distance_To_Hydrology, \n            train.Vertical_Distance_To_Hydrology, s=50, c=train.Cover_Type)\n","65dc8d87":"plt.figure(figsize=(5,10))\nplt.subplot(311)\nplt.scatter(train.Elevation, train.Slope, s=50, c=train.Cover_Type)\nplt.xlabel(\"Elevation\")\nplt.ylabel(\"Slope\")\n \nplt.subplot(312)\nplt.scatter(train.Aspect, train.Slope, s=50, c=train.Cover_Type)\nplt.xlabel(\"Aspect\")\nplt.ylabel(\"Slope\")\n\nplt.subplot(313)\nplt.scatter(train.Aspect, train.Elevation, s=50, c=train.Cover_Type)\nplt.xlabel(\"Aspect\")\nplt.ylabel(\"Elevation\")\n","06f66f17":"plt.figure(figsize=(5,10))\nplt.subplot(311)\nplt.scatter(train.Horizontal_Distance_To_Fire_Points, train.Soil_Class, s=50, c=train.Cover_Type)\nplt.xlabel(\"H. distance to fire\")\nplt.ylabel(\"Soil Class\")\n \nplt.subplot(312)\nplt.scatter(train.Elevation, train.Soil_Class, s=50, c=train.Cover_Type)\nplt.xlabel(\"Elevation\")\nplt.ylabel(\"Soil Class\")\n\nplt.subplot(313)\nplt.scatter(train.Wilderness_Area, train.Soil_Class, s=50, c=train.Cover_Type)\nplt.xlabel(\"Wilderness Area\")\nplt.ylabel(\"Soil Class\")\n\n","61d05b6b":"plt.scatter( train.Elevation,train.Cover_Type, s=50)\n","f2801af1":"plt.figure(figsize=(5,10))\nplt.subplot(211)\nplt.scatter( train.Soil_Class,train.Cover_Type, s=50)\nplt.xlabel(\"Soil Class\")\nplt.ylabel(\"Cover Type\")\n \nplt.subplot(212)\nplt.scatter(train.Wilderness_Area, train.Cover_Type, s=50)\nplt.xlabel(\"Wilderness Area\")\nplt.ylabel(\"Cover Type\")\n\n\n\n","54a298e0":"from sklearn import preprocessing\n","06acf92e":"x = train.values #returns a numpy array\nmin_max_scaler = preprocessing.MinMaxScaler()\ntrain_scaled = min_max_scaler.fit_transform(x)\ndf_train_scaled = pd.DataFrame(train_scaled, columns=train.columns)","92b491b7":"x = test.values #returns a numpy array\nmin_max_scaler = preprocessing.MinMaxScaler()\ntest_scaled = min_max_scaler.fit_transform(x)\ndf_test_scaled = pd.DataFrame(test_scaled, columns=test.columns)","3662e46a":"plt.figure(figsize=(15, 15))\nsns.boxplot(data=df_train_scaled, orient=\"h\", palette=\"Set2\")\nplt.show()","6c8b6e53":"plt.figure(figsize=(15, 15))\nsns.boxplot(data=df_test_scaled, orient=\"h\", palette=\"Set2\")\nplt.show()","a17f9d50":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Slope)\nplt.show()","a3a9d14c":"plt.scatter(train[train.Slope>40].Slope, train[train.Slope>40].Cover_Type, s=50)\n","39dd578e":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Horizontal_Distance_To_Hydrology)\nplt.show()","b477d88d":"plt.scatter(train[train.Horizontal_Distance_To_Hydrology>600].Slope, train[train.Horizontal_Distance_To_Hydrology>600].Cover_Type, s=50)\n","2bfa111a":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Horizontal_Distance_To_Roadways)\nplt.show()","021f89ff":"plt.scatter(train[train.Horizontal_Distance_To_Roadways>4000].Slope, train[train.Horizontal_Distance_To_Roadways>4000].Cover_Type, s=50)\n","42eba549":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Horizontal_Distance_To_Fire_Points)\nplt.show()","86d469d6":"plt.scatter(train[train.Horizontal_Distance_To_Fire_Points>3000].Slope, train[train.Horizontal_Distance_To_Fire_Points>3000].Cover_Type, s=50)\n","2a5441fd":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Hillshade_9am)\nplt.show()","f6defdea":"plt.scatter(train[train.Hillshade_9am<150].Slope, train[train.Hillshade_9am<150].Cover_Type, s=50)\n","345319a8":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Hillshade_Noon)\nplt.show()","77745fcd":"plt.scatter(train[train.Hillshade_Noon<180].Slope, train[train.Hillshade_Noon<180].Cover_Type, s=50)\n","2a99367d":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Hillshade_3pm)\nplt.show()","73258d08":"plt.scatter(train[train.Hillshade_3pm<50].Slope, train[train.Hillshade_3pm<50].Cover_Type, s=50)\n","473579eb":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Vertical_Distance_To_Hydrology)\nplt.show()","354f0cfe":"plt.scatter(train[train.Vertical_Distance_To_Hydrology<0].Slope, train[train.Vertical_Distance_To_Hydrology<0].Cover_Type, s=50)\n","fbbff77e":"plt.scatter(train[train.Vertical_Distance_To_Hydrology>150].Slope, train[train.Vertical_Distance_To_Hydrology>150].Cover_Type, s=50)\n","63cc2817":"plt.figure(figsize=(8, 5))\nsns.boxplot(train.Elevation)\nplt.show()","ced3e88f":"plt.figure(figsize=(8, 5))\nsns.boxplot(test.Elevation)\nplt.show()","6bacc95d":"X=train.drop(['Cover_Type'] , axis =1)\nX.shape","357758bb":"test.shape","5b30765b":"Y=train['Cover_Type']\nY.head()","18f502e3":"X['Distance_To_Hydrology']=np.linalg.norm([X.Horizontal_Distance_To_Hydrology,\n                                           X.Vertical_Distance_To_Hydrology], axis=0)","578566d6":"plt.figure(figsize=(15,5))\n\nsns.distplot(X.Distance_To_Hydrology , color=\"r\")","760f1e34":"plt.figure(figsize=(10,5))\nplt.scatter(X.Distance_To_Hydrology, Y, s=50, c=train.Cover_Type)\nplt.xlabel(\"Distance to Hydrology\")\nplt.ylabel(\"Cover Type\")","e910ae1b":"test['Distance_To_Hydrology']=np.linalg.norm([test.Horizontal_Distance_To_Hydrology,\n                                              test.Vertical_Distance_To_Hydrology], axis=0)","0eaee4c9":"X['M_Distance']=np.linalg.norm([X.Horizontal_Distance_To_Hydrology,\n                                X.Horizontal_Distance_To_Fire_Points,\n                               X.Horizontal_Distance_To_Roadways], axis=0)","5c297284":"plt.figure(figsize=(10,5))\nplt.scatter(X.M_Distance, Y, s=50, c=train.Cover_Type)\nplt.xlabel(\"M-Distance\")\nplt.ylabel(\"Cover Type\")","da716e41":"test['M_Distance']=np.linalg.norm([test.Horizontal_Distance_To_Hydrology,\n                                test.Horizontal_Distance_To_Fire_Points,\n                               test.Horizontal_Distance_To_Roadways], axis=0)","796edbf0":"X['N_Distance']=(\n    X.Horizontal_Distance_To_Fire_Points+X.Horizontal_Distance_To_Roadways)\/(X.Horizontal_Distance_To_Hydrology+0.01)","b7e4f6c3":"plt.scatter(X.N_Distance, Y, s=50, c=train.Cover_Type)\nplt.xlabel(\"N-Distance\")\nplt.ylabel(\"Cover Type\")","26d49d78":"test['N_Distance']=(test.Horizontal_Distance_To_Fire_Points+test.Horizontal_Distance_To_Roadways)\/(test.Horizontal_Distance_To_Hydrology+0.01)","1f8b1ae5":"plt.scatter( X.Elevation,Y, s=30, c=train.Cover_Type)\n","a21c676b":"plt.scatter( X.Elevation**2,Y, s=30, c=train.Cover_Type)\n","6fbdc7a5":"X['Elevation-Squared']=X.Elevation**2\ntest['Elevation-Squared']=test.Elevation**2","f8fb0176":"np.sum(X.Elevation<=0)","4c433820":"plt.scatter( np.sqrt(X.Elevation),Y, s=30, c=train.Cover_Type)\n","39db4f33":"X['Elevation-Sqrt']=np.sqrt(X.Elevation)\ntest['Elevation-Sqrt']=np.sqrt(test.Elevation)","c64b61b3":"plt.scatter( np.log(X.Elevation),Y, s=30, c=train.Cover_Type)\n","2cccfce2":"X['Elevation-Log']=np.log(X.Elevation)\ntest['Elevation-Log']=np.log(test.Elevation)","132d466c":"plt.scatter( X.Elevation\/(np.sin(X.Slope+1)),train.Cover_Type, s=30, c=train.Cover_Type)\n","42a5c1a5":"X['Elevation-Slope']=X.Elevation\/np.sin(X.Slope+0.1)\ntest['Elevation-Slope']=test.Elevation\/np.sin(test.Slope+0.1)","cd709925":"plt.scatter( X.Elevation\/np.sin(X.Aspect+1),train.Cover_Type, s=30, c=train.Cover_Type)\n","94faaa72":"X['Elevation-Aspect']=X.Elevation\/np.sin(X.Aspect+1)\ntest['Elevation-Aspect']=test.Elevation\/np.sin(test.Aspect+1)","2587c597":"plt.scatter( X.Elevation -X.Distance_To_Hydrology,Y, s=30, c=train.Cover_Type)\n","77edc744":"X['Elevation-Hydro']=X.Elevation -X.Distance_To_Hydrology\ntest['Elevation-Hydro']=test.Elevation -test.Distance_To_Hydrology","27cd95ec":"plt.scatter( X.Elevation -X.Vertical_Distance_To_Hydrology,Y, s=30, c=train.Cover_Type)\n","2fa2ae66":"X['Elevation_V_Hydro']=X.Elevation -X.Vertical_Distance_To_Hydrology\ntest['Elevation_V_Hydro']=test.Elevation -test.Vertical_Distance_To_Hydrology","a0b4175e":"plt.scatter( X.Elevation +X.Vertical_Distance_To_Hydrology,Y, s=30, c=train.Cover_Type)\n","c26fa668":"plt.scatter( X.Elevation -X.Horizontal_Distance_To_Hydrology,Y, s=30, c=train.Cover_Type)\n","97b231ba":"X['Elevation_H_Hydro']=X.Elevation -X.Horizontal_Distance_To_Hydrology\ntest['Elevation_H_Hydro']=test.Elevation -test.Horizontal_Distance_To_Hydrology","3704d123":"plt.scatter( X.Elevation +X.Horizontal_Distance_To_Hydrology,Y, s=30, c=train.Cover_Type)\n","2f5f2d44":"X['Elevation_sum_H_Hydro']=X.Elevation +X.Horizontal_Distance_To_Hydrology\ntest['Elevation_sum_H_Hydro']=test.Elevation + test.Horizontal_Distance_To_Hydrology","bce30e53":"plt.scatter( X.Elevation -X.Horizontal_Distance_To_Fire_Points,Y, s=30, c=train.Cover_Type)\n","771ad6d5":"X['Elevation_Fire']=X.Elevation -X.Horizontal_Distance_To_Fire_Points\ntest['Elevation_Fire']=test.Elevation -test.Horizontal_Distance_To_Fire_Points","6af5447e":"plt.scatter( X.Elevation + X.Horizontal_Distance_To_Fire_Points,Y, s=30, c=train.Cover_Type)\n","9d4a0b65":"X['Elevation_sum_Fire']=X.Elevation + X.Horizontal_Distance_To_Fire_Points\ntest['Elevation_sum_Fire']=test.Elevation + test.Horizontal_Distance_To_Fire_Points","4aea2f7a":"plt.scatter( X.Elevation -X.Horizontal_Distance_To_Roadways,Y, s=30, c=train.Cover_Type)\n","bdc3b8cb":"X['Elevation_Road']=X.Elevation -X.Horizontal_Distance_To_Roadways\ntest['Elevation_Road']=test.Elevation -test.Horizontal_Distance_To_Roadways","3430086d":"plt.scatter( X.Elevation + X.Horizontal_Distance_To_Roadways,Y, s=30, c=train.Cover_Type)\n","66d2cc7e":"X['Elevation_sum_Road']=X.Elevation + X.Horizontal_Distance_To_Roadways\ntest['Elevation_sum_Road']=test.Elevation + test.Horizontal_Distance_To_Roadways","3b5d43a4":"plt.scatter( X.Elevation\/(X.Soil_Class+1),train.Cover_Type, s=30, c=train.Cover_Type)\n","bf848bb9":"X['Elevation_by_Soil']= X.Elevation\/(X.Soil_Class+1)\ntest['Elevation_by_Soil']= test.Elevation\/(test.Soil_Class+1)","20a304f7":"plt.scatter( X.Elevation*X.Soil_Class,train.Cover_Type, s=30, c=train.Cover_Type)\n","16bdd8e1":"X['Elevation_x_Soil']= X.Elevation*X.Soil_Class\ntest['Elevation_x_Soil']= test.Elevation*test.Soil_Class","cc9fda16":"plt.scatter( np.sin(X.Slope)\/(np.sin(X.Aspect+1)),train.Cover_Type, s=30, c=train.Cover_Type)\n","f6c92435":"plt.scatter( X.Aspect,train.Cover_Type, s=30, c=train.Cover_Type)\n","a2876757":"plt.scatter( X.Elevation*(X.Soil_Class)**10,train.Cover_Type, s=30, c=train.Cover_Type)\n","13c75b07":"X['ElevationSoil10']= X.Elevation*(X.Soil_Class)**10 \/np.max(X.Elevation*(X.Soil_Class)**10)\ntest['ElevationSoil10']= test.Elevation*(test.Soil_Class)**10 \/np.max(X.Elevation*(X.Soil_Class)**10)","4ab2b7b7":"plt.scatter( X.Elevation*(X.Wilderness_Area),train.Cover_Type, s=30, c=train.Cover_Type)\n","8210136e":"X['ElevationWilderness']=X.Elevation*X.Wilderness_Area\ntest['ElevationWilderness']=test.Elevation*test.Wilderness_Area","ca979ac8":"plt.scatter( X.Soil_Class\/(X.Wilderness_Area+1),train.Cover_Type, s=30, c=train.Cover_Type)\n","7bdb1c4c":"plt.scatter( (X.Wilderness_Area)\/(X.Soil_Class+1),train.Cover_Type, s=30, c=train.Cover_Type)\n","51ac4a96":"X['Wildernesss_by_Soil']=X.Wilderness_Area\/(X.Soil_Class+1)\ntest['Wildernesss_by_Soil']=test.Wilderness_Area\/(test.Soil_Class+1)\n","b88ec5d0":"plt.scatter( X.Soil_Class**2,train.Cover_Type, s=30, c=train.Cover_Type)\n","e7fd2fa9":"X['Soil_Class2'] = X.Soil_Class**2\ntest['Soil_Class2'] = test.Soil_Class**2","1034c79a":"plt.scatter( np.sqrt(X.Soil_Class),train.Cover_Type, s=30, c=train.Cover_Type)\n","bf341c0e":"X['Soil_sqrt'] = np.sqrt(X.Soil_Class)\ntest['Soil_sqrt']= np.sqrt(test.Soil_Class)","2df6bb79":"plt.scatter( -X.Hillshade_3pm+X.Hillshade_9am+X.Hillshade_Noon,train.Cover_Type, s=30, c=train.Cover_Type)\n","56d8f32d":"X['Shade912_3'] = -X.Hillshade_3pm+X.Hillshade_9am+X.Hillshade_Noon\ntest['Shade912_3']= -test.Hillshade_3pm+test.Hillshade_9am+test.Hillshade_Noon","d53aaa17":"X['Shade93_12'] = X.Hillshade_3pm+X.Hillshade_9am-X.Hillshade_Noon\ntest['Shade93_12']= test.Hillshade_3pm+test.Hillshade_9am-test.Hillshade_Noon","21992fbc":"X['Shade123_9'] = X.Hillshade_3pm-X.Hillshade_9am+X.Hillshade_Noon\ntest['Shade123_9']= test.Hillshade_3pm-test.Hillshade_9am+test.Hillshade_Noon","534907d7":"plt.scatter(np.abs(X.Horizontal_Distance_To_Fire_Points-X.Horizontal_Distance_To_Roadways ),train.Cover_Type, s=30, c=train.Cover_Type)\n","aeaf23af":"X['Abs_Fire_Roads'] =np.abs(X.Horizontal_Distance_To_Fire_Points-X.Horizontal_Distance_To_Roadways )\ntest['Abs_Fire_Roads']= np.abs(test.Horizontal_Distance_To_Fire_Points-test.Horizontal_Distance_To_Roadways )","faeae74c":"plt.scatter(np.abs(X.Horizontal_Distance_To_Fire_Points-X.Horizontal_Distance_To_Hydrology ),train.Cover_Type, s=30, c=train.Cover_Type)\n","cfcd919f":"X['Abs_Fire_Hydro'] =np.abs(X.Horizontal_Distance_To_Fire_Points-X.Horizontal_Distance_To_Hydrology )\ntest['Abs_Fire_Hydro']= np.abs(test.Horizontal_Distance_To_Fire_Points-test.Horizontal_Distance_To_Hydrology )","11b8dc0f":"plt.scatter(np.abs(X.Horizontal_Distance_To_Roadways-X.Horizontal_Distance_To_Hydrology ),train.Cover_Type, s=30, c=train.Cover_Type)\n","62ec113a":"X['Abs_Roads_Hydro'] =np.abs(X.Horizontal_Distance_To_Roadways-X.Horizontal_Distance_To_Hydrology )\ntest['Abs_Roads_Hydro']= np.abs(test.Horizontal_Distance_To_Roadways-test.Horizontal_Distance_To_Hydrology )","4f5b1508":"gm = GaussianMixture(n_components=8)\ngm.fit(X)\n\nX['Gaussian_Mixture'] = gm.predict(X)\ntest['Gaussian_Mixture'] = gm.predict(test)","a25da696":"X.shape","c540eae8":"test.shape","1e231776":"X_train, X_valid, Y_train, Y_valid = train_test_split(X, \n                                                      Y, \n                                                      test_size = 0.20,\n                                                      random_state=42)\n","31794c37":"X_test=test\nX_test.shape","558c437b":"rf = RandomForestClassifier(n_estimators=600, \n                            criterion='gini',\n                            max_depth=133,\n                            max_features='auto',\n                            random_state=42)","59626a6f":"rf.fit(X_train, Y_train) \nY_pred = rf.predict(X_valid)\nprint(\"Accuracy:\",metrics.accuracy_score(Y_valid, Y_pred))","0a99ef38":"sns.set(font_scale=1.5)\n\nimportances = pd.DataFrame({'Features': X_train.columns, \n                             'Importances': rf.feature_importances_})\n    \nimportances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\nfig = plt.figure(figsize=(18,10))\nsns.barplot(x='Importances', y='Features', data=importances)\nplt.xticks(rotation='vertical')\nplt.show()","4fb88d7e":"xgb = XGBClassifier(learning_rate=0.1, n_estimators=450, max_depth=25,\n                        min_child_weight=3, gamma=0.05, subsample=0.6, colsample_bytree=1.0,\n                        objective='multiclass:softmax', nthread=4, scale_pos_weight=1, seed=42)","adf0f6c6":"xgb_model=xgb.fit(X_train,Y_train)","2ba588bc":"Y_pred = xgb_model.predict(X_valid)\n\nprint(\"Accuracy:\",metrics.accuracy_score(Y_valid, Y_pred))","a3e3a2f6":"sns.set(font_scale=1.5)\n\nimportances = pd.DataFrame({'Features': X_train.columns, \n                             'Importances': xgb_model.feature_importances_})\n    \nimportances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\nfig = plt.figure(figsize=(18,15))\nsns.barplot(x='Importances', y='Features', data=importances)\nplt.xticks(rotation='vertical')\nplt.show()","e676ee49":"xtc=ExtraTreesClassifier(\n           max_depth=350, \n           n_estimators=450, n_jobs=-1,\n           oob_score=False, random_state=42, \n           warm_start=True)","4b166e91":"xtc.fit(X_train, Y_train) ","dc63e4db":"Y_pred = xtc.predict(X_valid)\n\nprint(\"Accuracy:\",metrics.accuracy_score(Y_valid, Y_pred))","4a570fe5":"sns.set(font_scale=1.5)\n\nimportances = pd.DataFrame({'Features': X_train.columns, \n                             'Importances': xtc.feature_importances_})\n    \nimportances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\nfig = plt.figure(figsize=(18,15))\nsns.barplot(x='Importances', y='Features', data=importances)\nplt.xticks(rotation='vertical')\nplt.show()","bbbd2e30":"ada=AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth  = 20,\n                                                                        min_samples_split = 2,\n                                                                        min_samples_leaf = 1,\n                                                                        random_state=42),\n                                                                        n_estimators=100,\n                                                                        random_state=42)","02ec5eb9":"ada.fit(X_train, Y_train) ","a6a04d9a":"Y_pred = ada.predict(X_valid)\n\nprint(\"Accuracy:\",metrics.accuracy_score(Y_valid, Y_pred))","bca58506":"sns.set(font_scale=1.5)\n\nimportances = pd.DataFrame({'Features': X_train.columns, \n                             'Importances': ada.feature_importances_})\n    \nimportances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\nfig = plt.figure(figsize=(18,15))\nsns.barplot(x='Importances', y='Features', data=importances)\nplt.xticks(rotation='vertical')\nplt.show()","5eed62d5":"lgb_model=lgb.LGBMClassifier(n_estimators=375,\n                        num_leaves=100,\n                        verbose=-1,\n                        random_state=42,\n                        n_jobs=-1)","7300a642":"lgb_model.fit(X_train, Y_train) ","ac0152de":"Y_pred = lgb_model.predict(X_valid)\n\nprint(\"Accuracy:\",metrics.accuracy_score(Y_valid, Y_pred))","e680748c":"sns.set(font_scale=1.5)\n\nimportances = pd.DataFrame({'Features': X_train.columns, \n                             'Importances': lgb_model.feature_importances_})\n    \nimportances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\nfig = plt.figure(figsize=(18,15))\nsns.barplot(x='Importances', y='Features', data=importances)\nplt.xticks(rotation='vertical')\nplt.show()","2c292b7f":"cat= CatBoostClassifier(n_estimators =300, \n                        #loss_function='Logloss',\n                        eval_metric='Accuracy',\n                        metric_period=200,\n                        max_depth = None, \n                        random_state=42)","4778c2f6":"cat.fit(X_train, Y_train) ","2a0ab853":"Y_pred = cat.predict(X_valid)\n\nprint(\"Accuracy:\",metrics.accuracy_score(Y_valid, Y_pred))","9ec947cb":"sns.set(font_scale=1.5)\n\nimportances = pd.DataFrame({'Features': X_train.columns, \n                             'Importances': cat.feature_importances_})\n    \nimportances.sort_values(by=['Importances'], axis='index', ascending=False, inplace=True)\n\nfig = plt.figure(figsize=(18,15))\nsns.barplot(x='Importances', y='Features', data=importances)\nplt.xticks(rotation='vertical')\nplt.show()","ec09ddc0":"ensemble = [('rf', rf),\n            #('xgb', xgb),\n            ('ada', ada),\n           #('lgbm', lgb_model),\n           ('xtc', xtc),\n           ('cat', cat)\n           ]","82fc6c26":"#with rf\nstack = StackingCVClassifier(classifiers=[clf for label, clf in ensemble],\n                             meta_classifier=rf,\n                             cv=4,\n                             use_probas=True,\n                             use_features_in_secondary=False,\n                             verbose=1,\n                             random_state=42,\n                             n_jobs=-1)","aae6179a":"# #with lgb\n# stack = StackingCVClassifier(classifiers=[clf for label, clf in ensemble],\n#                              meta_classifier=lgb_model,\n#                              cv=5,\n#                              use_probas=True,\n#                              use_features_in_secondary=False,\n#                              verbose=1,\n#                              random_state=42,\n#                              n_jobs=-1)","d4a8857a":"stack = stack.fit(X, Y)","c0c1c30c":"prediction_test = stack.predict(X_test.values)","7b6ed1cf":"output_dict = {'Id': test.index,\n                       'Cover_Type': prediction_test}\n\n\noutput_lr = pd.DataFrame(output_dict, columns = ['Id', 'Cover_Type'])\noutput_lr.head(10)","2a0b38d0":"output_lr.tail(10)","c7ef8f95":"output_lr.to_csv('submission.csv', index=False)","0a08991a":"For some reason, when training the stackiing model, Lgbm and Xgb where taking years to train (eventhough those models alone trained perfectly), so I supressed them from the ensemble list. I trained the stack model with all 6 classifiers on my (absolutely regular) laptop and all went fine.****","c6ecc252":"The Soil_Type variables look like one-hot encoded.","1a764cb1":"We add the gaussian mixture.","49ccd5d6":"We remark some differences between the train and test distributions. Notably in Elevation, Soil Class and Wilderness Area.","469f2579":"We are going to convert the Soil_CLass info from one-hot to label.","7805334a":"Now we'll look for outliers using boxplots. We will create a new dataframe from the train set, but with the columns normalized, so we can inspect easily the distributions.","82fcd492":"We'll do the same with the test set.","21611f3e":"# EDA","700d40fa":"# Models Level 1","364b7fa8":"# Feature Engineering","48fae8e9":"Let's load the libraries and import the relevant data.","21874ba7":"We plot some numeric relations betwee features and add them to the features in case we find them useful.","7a20f6b3":"The Wilderness_Area variables also look like one-hot encoded.","3c90b367":"## Catboost","ca72bdc9":"## Extra Trees","c079fced":"> # Roosvelt National Forest Challenge","830348e4":"Now we describe the train and test sets.","10ec1350":"# Models Level 2 ","d0626cc0":"## Adaboost","95c466df":"We point out that the Cover Type (the target variable) is evenly distributed.","d3e0c5bb":"Now we do more plots on the Train set to find some correlations.","9ba540fa":"## LightGBM","abfa508a":"## XGBoost","24e08106":"A superficial look tells us that both sets have more or less the same distribution. We look closer with some plots.","ec41cfa6":"## Random Forests"}}