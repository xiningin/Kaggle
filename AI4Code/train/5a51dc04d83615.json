{"cell_type":{"b6ee84f7":"code","b34417e9":"code","2688525c":"code","947fd612":"code","efe9f4e7":"code","a45178b8":"code","b3bf9104":"code","1772bf99":"code","dd4a6bf2":"code","bc762619":"code","4235f4aa":"code","cbc9f809":"code","c5a73eda":"code","abbc03c5":"code","0212ebe8":"code","f0c30fa6":"code","81b89c71":"code","535ede71":"code","dbdad4d2":"code","12958151":"code","71bfabc3":"code","f4a40a0b":"code","4510e65e":"code","fc6157e4":"code","af803a85":"markdown","1dcef11a":"markdown","97ac4dbc":"markdown","a8fb7edc":"markdown","443f0edc":"markdown","72e83b7a":"markdown","65380da8":"markdown","588cf526":"markdown","6b617518":"markdown","5f89a8ce":"markdown","eda48703":"markdown","4597a07e":"markdown","6b541862":"markdown","85f6758f":"markdown","d3910276":"markdown","892caeb9":"markdown"},"source":{"b6ee84f7":"import tensorflow as tf\nimport os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import np_utils\nimport cv2\nfrom glob import glob\nimport matplotlib.pyplot as plt                        \n%matplotlib inline ","b34417e9":"# Reading the images and labels\nimages_path = '\/kaggle\/input\/plant-seedlings-classification\/train\/*\/*.png'\nimages = glob(images_path)\ntrain_images = []\ntrain_labels = []\n\nfor img in images:\n    train_images.append(cv2.resize(cv2.imread(img), (256, 256)))\n    train_labels.append(img.split('\/')[-2])\ntrain_X = np.asarray(train_images)\ntrain_Y = pd.DataFrame(train_labels)","2688525c":"# Displaying an image\nplt.imshow(train_X[1])","947fd612":"train_X.shape","efe9f4e7":"train_Y[0].unique()","a45178b8":"# Converting labels to numbers\nencoder = LabelEncoder()\nencoder.fit(train_Y[0])\nencoded_labels = encoder.transform(train_Y[0])\ncategorical_labels = np_utils.to_categorical(encoded_labels)","b3bf9104":"encoder.classes_","1772bf99":"x_train,x_test,y_train,y_test=train_test_split(train_X,categorical_labels,test_size=0.2,random_state=7)","dd4a6bf2":"# Normalization of the Image Data\nx_train = x_train.astype('float32') \/ 255\nx_test = x_test.astype('float32') \/ 255 ","bc762619":"plt.imshow(x_train[0])","4235f4aa":"datagen= tf.keras.preprocessing.image.ImageDataGenerator(rotation_range=20,\n                                                         width_shift_range=0.2,\n                                                         height_shift_range=0.2,\n                                                         zoom_range=[0.4,1.5],\n                                                         horizontal_flip=True,\n                                                         vertical_flip=True)\n\ndatagen.fit(x_train)","cbc9f809":"#Clear any previous model from memory\ntf.keras.backend.clear_session()\n\n#Initialize model\nmodel = tf.keras.models.Sequential()\n\n#Add 1st Conv Layer\nmodel.add(tf.keras.layers.Conv2D(64, kernel_size=(3, 3), input_shape=(256, 256, 3), activation='relu'))\n\n#Add 2nd Conv Layer\nmodel.add(tf.keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))\n\n#normalize data\nmodel.add(tf.keras.layers.BatchNormalization())\n\n#Add Max Pool layer\nmodel.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))\n\n#Add 3rd Conv Layer\nmodel.add(tf.keras.layers.Conv2D(128, kernel_size=(3,3), activation='relu'))\n\n#normalize data\nmodel.add(tf.keras.layers.BatchNormalization())\n\n#Add Max Pool layer\nmodel.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))\n\n#Add 4th Conv Layer\nmodel.add(tf.keras.layers.Conv2D(256, kernel_size=(3,3), activation='relu'))\n\n#normalize data\nmodel.add(tf.keras.layers.BatchNormalization())\n\n#Add Max Pool layer\nmodel.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))\n\n#Add Global Max Pool layer\nmodel.add(tf.keras.layers.GlobalMaxPool2D())\n\n#Flatten the data\nmodel.add(tf.keras.layers.Flatten())\n\n#Add 1st dense layer\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\n#normalize data\nmodel.add(tf.keras.layers.BatchNormalization())\n\n#Add Dropout\nmodel.add(tf.keras.layers.Dropout(0.3))\n\n#Add 2nd dense layer\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\n#normalize data\nmodel.add(tf.keras.layers.BatchNormalization())\n\n#Add Dropout\nmodel.add(tf.keras.layers.Dropout(0.3))\n\n#Add Output Layer\nmodel.add(tf.keras.layers.Dense(12, activation='softmax'))","c5a73eda":"#Specify Lass and Optimizer\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","abbc03c5":"#Model Summary\nmodel.summary()","0212ebe8":"#Saving the best model using model checkpoint callback\nmodel_checkpoint=tf.keras.callbacks.ModelCheckpoint('\/kaggle\/working\/plantspecies_CNN_model.h5', #where to save the model\n                                                    save_best_only=True, \n                                                    monitor='val_accuracy', \n                                                    mode='max', \n                                                    verbose=1)","f0c30fa6":"history = model.fit_generator(datagen.flow(x_train, y_train, batch_size=16), \n                    epochs=200, validation_data=(x_test, y_test),   \n                    callbacks = [model_checkpoint])","81b89c71":"#Final score and accuracy of the model\nscore, acc = model.evaluate(x_test,y_test)\nscore1, acc1 = model.evaluate(x_train,y_train)\nprint('Test score:', score,'   Test accuracy:', acc)\nprint('Train score:', score1,'   Train accuracy:',acc1)","535ede71":"from matplotlib import pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","dbdad4d2":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","12958151":"test_images_path = '\/kaggle\/input\/plant-seedlings-classification\/test\/*.png'\ntest_images = glob(test_images_path)\ntest_images_arr = []\ntest_files = []\n\nfor img in test_images:\n    test_images_arr.append(cv2.resize(cv2.imread(img), (256, 256)))\n    test_files.append(img.split('\/')[-1])\n\ntest_X = np.asarray(test_images_arr)","71bfabc3":"# Normalization of the Image Data\ntest_X = test_X.astype('float32') \/ 255","f4a40a0b":"predictions = model.predict(test_X)","4510e65e":"preds = np.argmax(predictions, axis=1)\npred_str = encoder.classes_[preds]","fc6157e4":"final_predictions = {'file':test_files, 'species':pred_str}\nfinal_predictions = pd.DataFrame(final_predictions)\nfinal_predictions.to_csv(\"\/kaggle\/working\/submission.csv\", index=False)","af803a85":"## Initialize and build the model","1dcef11a":"## Split the training data into train and validation data set","97ac4dbc":"## Compile the model","a8fb7edc":"## Read the images from train folder and generate training dataset","443f0edc":"## Import the required libraries","72e83b7a":"## Plot an image from training data set","65380da8":"## Normalize the train and validation images","588cf526":"## Model Summary","6b617518":"## Read the images from test folder and generate test data set","5f89a8ce":"## Initialize the object of ImageDataGenerator","eda48703":"## Print all unique output classes","4597a07e":"## Fit the model","6b541862":"## Plot the accuracy and loss graph for train and validation set","85f6758f":"## Predict the accuracy for both train and validation data","d3910276":"## Label encode all the output classes","892caeb9":"## Predict the classes for test data"}}