{"cell_type":{"06735041":"code","5c5d3e63":"code","175a5f8c":"code","93011baa":"code","ac24fc17":"code","ed1c89a2":"code","e186a495":"code","65362870":"code","8b31eddb":"code","80282643":"code","a617908b":"code","1833f356":"code","761cccce":"code","4b9c3628":"code","518a9b87":"code","a595b687":"code","3ba8b715":"code","bae184fe":"code","7b7447bf":"code","699e4d24":"code","f4a0ee77":"code","85ef5b73":"code","ff966151":"code","67dcc7ae":"code","96d3e62c":"code","9ad431e9":"code","f348dac0":"code","564429a5":"code","e52ed81c":"code","1bdb8f0c":"code","b1ccebd7":"code","402beb38":"code","64e76851":"code","4a6466f3":"code","4f6d6e69":"code","a3333397":"code","3cca3fab":"code","50304b4a":"markdown","de6d0273":"markdown"},"source":{"06735041":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n%matplotlib inline","5c5d3e63":"person = pd.DataFrame({'Name':['Asif' , 'Basit' , 'John', 'Hary'],\n                       'DOB': ['3\/20\/1960', '3\/19\/1981', '9\/12\/1999' , '7\/12\/1967'],\n                       'EmpID': ['E453', 'E983', 'E675','E120']})\nperson\nperson.dtypes","175a5f8c":"# Change the datatype of the column to Datetime\nperson['DOB']=pd.to_datetime(person['DOB']) \nperson.dtypes\nperson","93011baa":"# Extract Month , Day , Year , 'Day of Week' and 'Week of Year' from the Date field \nperson['Month'] = person.DOB.dt.month\nperson['Day'] = person.DOB.dt.day\nperson['Year'] = person.DOB.dt.year\nperson['Week Number'] =person.DOB.dt.isocalendar().week\nperson['Day Of Week'] = person.DOB.dt.dayofweek\nperson['Day Name']=pd.to_datetime(person['DOB']).dt.day_name()\nperson['Month Name']=pd.to_datetime(person['DOB']).dt.month_name()\nperson","ac24fc17":"# Changing Datetime format to '%d\/%m\/%Y' using strftime()\nperson['DOB']=pd.to_datetime(person['DOB']).dt.strftime('%d\/%m\/%Y') # Note : This will change the datatype back to object\nperson\nperson.dtypes","ed1c89a2":"\n# Changing Datetime format to ''%m-%d-%Y' using strftime()\nperson['DOB']=pd.to_datetime(person['DOB']).dt.strftime('%m-%d-%Y') # Note : This will change the datatype back to object\nperson\nperson.dtypes","e186a495":"# Find employees who are born after 12-20-1980\nfrom datetime import date\nperson[pd.to_datetime(person['DOB']) > pd.Timestamp(date(1980,12,20))]","65362870":"\n# Find employees who are born after 12-20-1980\nfrom datetime import date\nperson[pd.to_datetime(person['DOB']) > pd.Timestamp('1980\/12\/20')]","8b31eddb":"\n# Find all records where DOB is between \"12-20-1980\" - \"12-20-2000\"\nfrom datetime import date\nperson[(pd.to_datetime(person['DOB']) > pd.Timestamp(date(1980,12,20))) & \n       (pd.to_datetime(person['DOB']) < pd.Timestamp(date(2000,12,20)))]","80282643":"\n# Min Date in a dataframe column\npd.to_datetime(person['DOB']).min()","a617908b":"# Max Date in a dataframe column\npd.to_datetime(person['DOB']).max()","1833f356":"# Current timestamp\ntimestamp = pd.to_datetime('now')\nprint('Timestamp :{}'.format(timestamp))\n\n# Current Date (Today)\ncurrent_date=pd.to_datetime('now').date()\nprint('Current Date : {}'.format(current_date))\n\n# Yesterday\nyesterday = pd.to_datetime('now').date()- pd.Timedelta('1 day')\nprint('Yesterday: {}'.format(yesterday))\n\n# tomorrow\ntomorrow = pd.to_datetime('now').date() + pd.Timedelta('1 day')\nprint('Tomorrow: {}'.format(tomorrow))\n#OR \ntomorrow = pd.to_datetime('now').date() + pd.DateOffset(days=1)\nprint('Tomorrow: {}'.format(tomorrow))\n\n#Add Business Day to current date\nadd_buss_day=pd.to_datetime('now').date()+pd.offsets.BDay(1)\nprint('Date after adding Business Day: {}'.format(add_buss_day)) # Saturday & Sunday will be excluded\n\n#Add 1 month to current date\nadd_month=pd.to_datetime('now').date()+pd.DateOffset(months=1)\nprint('Date after adding 1 month to current date: {}'.format(add_month)) \n\n# Date Difference in hours\ndiff_hrs= (pd.to_datetime('2021-03-26 21:11:13') - pd.to_datetime('2021-03-01 11:11:13')).total_seconds()\/\/3600\nprint('Date Difference in hours: {}'.format(diff_hrs))","761cccce":"# Age of the person (Extract year from current time and subtract from Year column)\nperson['Age'] = pd.to_datetime('now').year - person['Year']\nperson\n\n# OR \nperson['Age'] = pd.to_datetime('now').year - pd.to_datetime(person['DOB']).dt.year\nperson","4b9c3628":"# Lets work on simple dataset (Female birth Dataset)\n# The source of the dataset is credited to Newton (1988).\nfemale = pd.read_csv('https:\/\/raw.githubusercontent.com\/jbrownlee\/Datasets\/master\/daily-total-female-births.csv')\nfemale.head(10)","518a9b87":"# Find min & max date to get the date range\npd.to_datetime(female['Date']).max()-pd.to_datetime(female['Date']).min()  # This is one year of dataset that we need to anlyse.","a595b687":"# Change datatype of Date column to Datetime\nfemale['Date'] = pd.to_datetime(female['Date'])","3ba8b715":"# Create helper columns\nfemale['Month'] = female.Date.dt.month\nfemale['Day'] = female.Date.dt.day\nfemale['Year'] = female.Date.dt.year\nfemale['Week Number'] =female.Date.dt.isocalendar().week\nfemale['Day Of Week'] = female.Date.dt.dayofweek\nfemale['Day Name']=pd.to_datetime(female['Date']).dt.day_name()\nfemale['Month Name']=pd.to_datetime(female['Date']).dt.month_name()\n\n# OR We can use below lines of code as well\nfemale['Month'] = female.Date.apply(lambda x:x.month)\nfemale['Day'] = female.Date.apply(lambda x:x.day)\nfemale['Year'] = female.Date.apply(lambda x:x.year)\nfemale['Week Number'] =female.Date.apply(lambda x:x.week)\nfemale['Day Of Week'] = female.Date.apply(lambda x:x.dayofweek)\nfemale['Day Name']=pd.to_datetime(female['Date']).apply(lambda x:x.day_name())\nfemale['Month Name']=pd.to_datetime(female['Date']).apply(lambda x:x.month_name())\n\nfemale.head()","bae184fe":"# Total female births in the month of January\nfemale[female['Month Name'] =='January']['Births'].sum()","7b7447bf":"# Total female births in each month using for loop\nfor i in female['Month Name'].unique():\n    print('Female births in {0} : {1}'.format(i,female[female['Month Name'] ==i]['Births'].sum()))","699e4d24":"# Using \"group by\" to get female births in each month\nfemale.groupby('Month Name').sum()[['Births']] # Month Name column data is not in ascending order.","f4a0ee77":"# Use Pivot table to get female births in each month\npd.pivot_table(female,values=['Births'],index=['Month Name'],aggfunc=np.sum) # Month Name data is not in proper order.\npd.pivot_table(female,values=['Births'],index=['Month Name'],aggfunc=np.sum).plot.bar()","85ef5b73":"\n# We will convert \"Month Name\" column into Categorical variable and specify the ordering\norder = ['January','February','March','April','May','June',\n         'July','August','September','October','November','December']\n \nfemale['Month Name']=pd.Categorical(female['Month Name'],order)","ff966151":"female.groupby('Month Name').sum()[['Births']] # Now the output is much better after custom ordering\n","67dcc7ae":"# Bar plot to get monthly female births using matplotlib library\nplt.figure(figsize=(14,6))\nplt.bar(female.groupby('Month Name').sum().index,female.groupby('Month Name').sum()['Births'])\nplt.show()","96d3e62c":"# Bar plot to get monthly female births using Pandas\npd.pivot_table(female,values=['Births'],index=['Month Name'],aggfunc=np.sum).plot.bar()","9ad431e9":"\n# Same way we can implement custom ordering for Day Name field\norder=[ 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nfemale['Day Name']=pd.Categorical(female['Day Name'],order)\nfemale.groupby('Day Name').sum()[['Births']]","f348dac0":"# Plot Bar Graph to show female births on day basis.\nplt.figure(figsize=(14,6))\nplt.bar(female.groupby('Day Name').sum().index,female.groupby('Day Name').sum()['Births'])\nplt.show()","564429a5":"# Daily female births\nplt.figure(figsize=(15,5))\nplt.plot(female['Date'],female['Births'])","e52ed81c":"# Get all records for the month of Janaury(1959-01-01 - 1959-01-31). \n# Using boolean is not good method when we are dealing with large datasets.\nfemale[(pd.to_datetime(female['Date']) > pd.Timestamp(date(1959,1,1))) & \n       (pd.to_datetime(female['Date']) < pd.Timestamp(date(1959,1,31)))]","1bdb8f0c":"# Convert date column into Datetime index for faster selection.\nfemale = female.set_index(['Date'])\nfemale\nfemale.index # DatetimeIndex","b1ccebd7":"\n# Now lets select the data\nfemale.loc['1959'] # Get all data for year 1959","402beb38":"female.loc['1960'] # There is no data for 1960.","64e76851":"# Get all rows for the month of Janaury(1959-01-01 - 1959-01-31).\nfemale.loc['1959-01-01':'1959-01-31'][['Births']]","4a6466f3":"# Total births in the month of January \nfemale.loc['1959-01-01':'1959-01-31'][['Births']].sum()","4f6d6e69":"# plot line chart for January data using Pandas visualization\nfemale.loc['1959-01-01':'1959-01-31'][['Births']].plot(figsize=(13,5))","a3333397":"# plot line chart for January data using Matplotlib library\nplt.figure(figsize=(13,5))\nplt.plot(female.loc['1959-01-01':'1959-01-31'][['Births']])","3cca3fab":"#Generate Test Dataset using date_range() and random.randint()\ndf = pd.DataFrame({'Date':pd.date_range('1\/19\/1920', periods = 1200, freq ='M') ,'SampleData':np.random.randint(0,200,size=1200)})\ndf=df.set_index(['Date']) # Set Date column as index\ndf\ndf.loc['2010':'2012'].plot(figsize=(16,5)) # Plot line chart for data between 2010-2012","50304b4a":"# END","de6d0273":"# Working with Dates in Pandas"}}