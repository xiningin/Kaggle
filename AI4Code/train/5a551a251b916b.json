{"cell_type":{"e6384d29":"code","c9958b78":"code","e150e6d5":"code","fa2643f4":"code","30ed420b":"code","012b3f23":"code","1209e2fa":"code","73b787db":"code","7a66455c":"code","d1a7a658":"code","31421ecc":"code","869f78a1":"code","454a9b5b":"code","021f2479":"code","41c471be":"code","a74d7dc4":"code","4d7127dd":"code","be84caf0":"code","1a5b2a45":"code","2bf154c3":"code","fd99baa3":"markdown","6e0b647f":"markdown","af6f7cc7":"markdown","3b9e3594":"markdown","52f42203":"markdown","9ef815c7":"markdown","c117703d":"markdown","9337c4cb":"markdown","531c101a":"markdown","04da5796":"markdown","eb094a2e":"markdown"},"source":{"e6384d29":"import ble2lsl\nfrom ble2lsl.devices import muse2016\nfrom wizardhat import acquire, transform\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","c9958b78":"#if we had a device with us, we would use:\n#streamer = ble2lsl.Streamer(muse2016)\n#but if you're debugging or learning, use the dummy streamer with the command below:\nstreamer = ble2lsl.Dummy(muse2016)","e150e6d5":"#After writing streamer. you can use the tab key to see a list of properties and methods that streamer has,\n#for example, streamer.subscriptions shows all the subscribed data streams that the streamer object has picked up\n#from the device.\nstreamer.subscriptions\n","fa2643f4":"receiver = acquire.Receiver()","30ed420b":"receiver.buffers","012b3f23":"receiver.ch_names","1209e2fa":"receiver.buffers['EEG'].data","73b787db":"receiver.buffers['EEG'].data.shape\n#the default window for seeing data is 10 seconds. You can change that when you call acquire.Receiver(window=15) etc","7a66455c":"receiver.buffers['EEG'].unstructured\n#this version of the data has no labels and is just a pure numpy matrix","d1a7a658":"receiver.buffers['EEG'].get_timestamps()","31421ecc":"our_first_recording = receiver.record(5)\n#wait 5 seconds after running this command ","869f78a1":"our_first_recording.buffers['EEG'].data\n#notice it only goes up to 5 seconds","454a9b5b":"channel_to_view = 'TP9'\nsamples_to_view = 2000\n","021f2479":"raw = receiver.buffers['EEG'].data[channel_to_view][-samples_to_view:]\ntime_raw = receiver.buffers['EEG'].data['time'][-samples_to_view:]\n\nplt.subplots(figsize=(20,5))\nplt.plot(time_raw,raw)\n\n","41c471be":"lo_cut = 20\nhi_cut = 50\n\nfilter = transform.Bandpass(receiver.buffers['EEG'],lo_cut,hi_cut)\n\n","a74d7dc4":"raw = receiver.buffers['EEG'].data[channel_to_view][-samples_to_view:]\ntime_raw = receiver.buffers['EEG'].data['time'][-samples_to_view:]\nfilt = filter.buffer_out.data[channel_to_view][-samples_to_view:]\ntime_filt = filter.buffer_out.data['time'][-samples_to_view:]","4d7127dd":"plt.subplots(figsize=(20,5))\nplt.plot(time_raw,raw)\nplt.plot(time_filt,filt)\n\n\nplt.xlabel('time (s)',fontsize=20)\nplt.ylabel('voltage (mV)',fontsize=20)\nplt.legend(['Raw signal','Filtered Signal'],fontsize=20)","be84caf0":"pre_filter = transform.PSD(receiver.buffers['EEG'])\npost_filter = transform.PSD(filter.buffer_out)","1a5b2a45":"timestamp_to_view = pre_filter.buffer_out.get_timestamps(1)\npre_filter_data = pre_filter.buffer_out.data[['time',channel_to_view]]\npost_filter_data = post_filter.buffer_out.data[['time',channel_to_view]]\n\npsd_raw = pre_filter_data[pre_filter_data['time']==timestamp_to_view]\npsd_filt = post_filter_data[post_filter_data['time']==timestamp_to_view]\npsd_time = np.arange(0,len(psd_raw[channel_to_view].T))","2bf154c3":"plt.subplots(figsize=(20,5))\nplt.plot(psd_time,psd_raw[channel_to_view].T)\nplt.plot(psd_time,psd_filt[channel_to_view].T)\n\n\nplt.xlabel('Freq (Hz)',fontsize=20)\nplt.ylabel('Power',fontsize=20)\nplt.axvline(x=lo_cut,color='red',linestyle='--')\nplt.axvline(x=hi_cut,color='red',linestyle='--')\nplt.legend(['Raw signal','Filtered Signal'],fontsize=20)\nplt.title(f'Bandpass from {lo_cut} Hz to {hi_cut} Hz',fontsize=20)","fd99baa3":"Let's try the record method and record some data","6e0b647f":"Now the variable calledo our_first_recording is a receiver instance that has all the usual properties and methods that our first receiver had. we can access the data, but this time instead of changing over a window, it will stay static and have a total of 5 seconds of data","af6f7cc7":"Now we will use PSD transformer  to generate the frequency power spectrum of our data ","3b9e3594":"Next, lets set up a virtual (dummy) streamer with the ble2lsl library.","52f42203":"First lets import wizardhat, ble2lsl and the muse2016 device","9ef815c7":"Let's see if our filters worked by looking at the PSD of pre and post filter data","c117703d":"Now that you're connected to the device and it is streaming,  set up a data receiver object from wizardhat's receiver class. ","9337c4cb":"Next up, plotting.\nWizardHat has a Plot class built with a library called Bokeh, but we haven't added jupyter notebook support yet, so for now we will use another popular library called Matplotlib","531c101a":"Lets take a look at some of the methods and properties of this streamer object","04da5796":"Again, let's take a look to see what infromation is under the hood","eb094a2e":"Let's implement some filters on the data we collected and see what it looks like after filtering"}}