{"cell_type":{"c4aca73e":"code","a8c10cd2":"code","752a9058":"code","ebe28d3a":"code","ddf6e908":"code","91973faa":"code","eacfb566":"code","14a9ef0a":"code","5c5dfd13":"code","5a117981":"code","075ff49c":"code","f5b8a969":"code","9fe941a0":"code","db61df75":"code","d5f8e7ad":"code","9c30cdb3":"code","96a8a68a":"code","ab13218c":"code","742bb6da":"code","447e9a48":"code","51ad0aa0":"code","0f2acef2":"code","4875f9f9":"code","424d1174":"code","dc34551c":"code","d5f8fadb":"code","2aadfdf6":"code","aaf417f9":"code","58073305":"code","b2ec2215":"code","ba4d49b6":"code","9359bd9b":"code","a47e5a5f":"code","4022a4bd":"code","1d49c89b":"code","b322afa4":"code","2a566fc9":"code","3a12f81e":"code","619857ec":"markdown","dd730e72":"markdown","adf3be3f":"markdown"},"source":{"c4aca73e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a8c10cd2":"df_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","752a9058":"df_train","ebe28d3a":"df_train.label.unique()","ddf6e908":"from matplotlib.pyplot import imshow\n\nwidth=5\nheight=5\nrows = 2\ncols = 3\naxes=[]\n\nfig=plt.figure()\nfig.set_size_inches(8,10)\nfor i in range(rows*cols):\n    sample=np.reshape(df_train[df_train.columns[1:]].iloc[i].values\/255,(28,28))\n    axes.append(fig.add_subplot(rows,cols,i+1))\n    plt.title(\"Labeled class : {}\".format(df_train[\"label\"].iloc[i]))\n    plt.imshow(sample, 'gray')\nfig.tight_layout()\nplt.show()","91973faa":"plt.figure(figsize=(8,6))\nax = sns.countplot(x='label',data=df_train)\n\nplt.title(\"Label Distribution\")\ntotal= len(df_train.label)\nfor p in ax.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')","eacfb566":"df_train.describe()","14a9ef0a":"df_train.sum(axis=1)","5c5dfd13":"df_train.shape","5a117981":"#features engineering ad sum of pixcel values\npixels = df_train.columns.tolist()[1:]\ndf_train[\"sum\"] = df_train[pixels].sum(axis=1)\n\ndf_test[\"sum\"] = df_test[pixels].sum(axis=1)","075ff49c":"df_train.groupby(['label'])['sum'].mean()","f5b8a969":"len(df_train)","9fe941a0":"#make count of zero values feature\n\n#train = np.count_nonzero(df_train,axis=1)\n#test = np.count_nonzero(df_test,axis=1)\n\n#df_train['count_of_zero_percents'] = (784 - train)\n#df_test['count_of_zero_percents'] = (784 - test)\n\n#did not help the performance\n\n","db61df75":"# separate target values from df_train\ntargets = df_train.label\nfeatures = df_train.drop(\"label\",axis=1)","d5f8e7ad":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nfeatures[:] = scaler.fit_transform(features)\ndf_test[:] = scaler.transform(df_test)","9c30cdb3":"del df_train","96a8a68a":"from sklearn.decomposition import PCA as sklearnPCA\nsklearn_pca = sklearnPCA(n_components=2)\nY_sklearn = sklearn_pca.fit_transform(features)","ab13218c":"Y_sklearn","742bb6da":"#referred to https:\/\/sebastianraschka.com\/Articles\/2015_pca_in_3_steps.html and  https:\/\/www.kaggle.com\/arthurtok\/interactive-intro-to-dimensionality-reduction\n\n\nwith plt.style.context('seaborn-whitegrid'):\n    plt.figure(figsize=(10, 8))\n    for lab, col in zip((0,1,2,3,4,5,6,7,8,9),\n                       ('blue','red','green','yellow','purple','black','brown','pink','orange','beige')):\n        plt.scatter(Y_sklearn[targets==lab, 0],\n                    Y_sklearn[targets==lab, 1],\n                    label=lab,\n                    c=col)\n    plt.xlabel('Principal Component 1')\n    plt.ylabel('Principal Component 2')\n    plt.legend(loc='lower right')\n    plt.tight_layout()\n    plt.show()","447e9a48":"features.index","51ad0aa0":"sklearn_pca_3 = sklearnPCA(n_components=3)\nY_sklearn_3 = sklearn_pca_3.fit_transform(features)\nY_sklearn_3_test = sklearn_pca_3.transform(df_test)","0f2acef2":"# Store results of PCA in a data frame\nresult=pd.DataFrame(Y_sklearn_3, columns=['PCA%i' % i for i in range(3)], index=features.index)","4875f9f9":"result","424d1174":"my_dpi=96\nplt.figure(figsize=(480\/my_dpi, 480\/my_dpi), dpi=my_dpi)\n\nwith plt.style.context('seaborn-whitegrid'):\n    my_dpi=96\n    fig = plt.figure(figsize=(10, 10), dpi=my_dpi)\n    ax = fig.add_subplot(111,projection ='3d')\n    for lab, col in zip((0,1,2,3,4,5,6,7,8,9),\n                       ('blue','red','green','yellow','purple','black','brown','pink','orange','beige')):\n        plt.scatter(Y_sklearn[targets==lab, 0],\n                    Y_sklearn[targets==lab, 1],\n                    label=lab,\n                    c=col,s =60)                \n        \n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_zlabel('Principal Component 3')\n    ax.set_title(\"PCA on the Handwriting Data\")\n    plt.show()","dc34551c":"encoder = LabelEncoder()\ntargets[:] = encoder.fit_transform(targets[:])","d5f8fadb":"X_train,X_val, y_train,y_val = train_test_split(result,targets,random_state=1)","2aadfdf6":"# 3 Principal Components\nmodel = XGBClassifier(max_depth=5, objective='multi:softprob', n_estimators=1000, \n                        num_classes=10)\n\nhistory = model.fit(X_train, y_train,eval_set =[(X_val,y_val)],early_stopping_rounds =50)\nacc = accuracy_score(y_val, model.predict(X_val))\nprint(f\"Accuracy: , {round(acc,3)}\")\n\n\n\n\n\n","aaf417f9":"X_train,X_val, y_train,y_val = train_test_split(features,targets,random_state=1)\n","58073305":"\nmodel = XGBClassifier(max_depth=5, objective='multi:softprob', n_estimators=1000, \n                        num_classes=10)\n\nhistory = model.fit(X_train, y_train,eval_set =[(X_train,y_train),(X_val,y_val)],early_stopping_rounds =5)\nacc = accuracy_score(y_val, model.predict(X_val))\nprint(f\"Accuracy: , {round(acc,3)}\")\n\n\n#0.973 with two feature engineering","b2ec2215":"results = model.evals_result()","ba4d49b6":"from matplotlib import pyplot\n# plot learning curves\nplt.figure(figsize=(10, 8))\npyplot.plot(results['validation_0']['mlogloss'], label='train')\npyplot.plot(results['validation_1']['mlogloss'], label='test')\n# show the legend\npyplot.legend()\nplt.xlabel('iterations')\nplt.ylabel('mlogloss')\n# show the plot\npyplot.show()","9359bd9b":"from xgboost import plot_importance\nax = plot_importance(model,max_num_features=10)\nfig = ax.figure\nfig.set_size_inches(10,8)\nplt.show()","a47e5a5f":"import gc\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import StratifiedKFold\n\npreds = []\n\nkf = StratifiedKFold(n_splits=4,random_state=48,shuffle=True)\nacc =[]\nn=0 \n\nfor trn_idx, test_idx in kf.split(features, targets):\n    X_tr, X_val = features.iloc[trn_idx], features.iloc[test_idx]\n    y_tr,y_val= targets.iloc[trn_idx] , targets.iloc[test_idx]\n    \n    model = XGBClassifier(max_depth=10, objective='multi:softprob', n_estimators=1000, \n                        num_classes=10)\n    model.fit(X_tr,y_tr,eval_set = [(X_val,y_val)],early_stopping_rounds =100,verbose =False)\n    \n    preds.append(model.predict(df_test))\n    acc.append(accuracy_score(y_val,model.predict(X_val)))\n    \n    \n    print(f\"fold: {n+1} , accuracy: {round(acc[n]*100,3)}\")\n    n+=1\n    \n    del X_tr,X_val,y_tr,y_val\n    gc.collect()","4022a4bd":"print(f\"the mean Accuracy is : {round(np.mean(acc)*100,3)} \")","1d49c89b":"from scipy import stats\npredictions = stats.mode(preds)[0][0]\n","b322afa4":"predictions","2a566fc9":"predictions = encoder.inverse_transform(predictions)","3a12f81e":"output = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\noutput['Label'] = predictions\noutput.to_csv('submission.csv',index=False)","619857ec":"# Making a Model and Predictions","dd730e72":"# Explanatory Data Analysis","adf3be3f":"# With Cross Validation"}}