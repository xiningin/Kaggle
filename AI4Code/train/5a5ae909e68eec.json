{"cell_type":{"6a67b0c2":"code","906aa8b1":"code","e0082f74":"code","16a46192":"code","16950c43":"code","f5428316":"code","40ea1129":"code","68e445ea":"code","128e275f":"code","80a882f4":"code","649e1c8e":"code","ed462dfe":"code","be09eb02":"code","b7e55b65":"code","349db8ca":"markdown","bad41f54":"markdown","6444c721":"markdown"},"source":{"6a67b0c2":"import numpy as np # linear algebra\nimport pandas as pd\n# pd.set_option(\"display.max_rows\", 101)\nimport os\nimport cv2\nimport json\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams[\"font.size\"] = 15\nimport seaborn as sns\nfrom collections import Counter\nfrom PIL import Image\nimport math\nimport seaborn as sns\nfrom collections import defaultdict\nfrom pathlib import Path\nimport cv2\nfrom tqdm import tqdm","906aa8b1":"all_folds = os.listdir('..\/input\/severstal-steel-defect-detection\/train_images\/')\nall_folds = [x for x in all_folds]\ntrain_df = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/train.csv\")\ntrain_df.info()","e0082f74":"image_defects = train_df['ImageId'].unique().tolist()\nimage_no_defects=[item for item in all_folds if item not in image_defects]\nprint(\"\u6709\u7f3a\u9677\u7684\u56fe\u7247\uff1a{}\".format(len(image_defects)))\nprint(\"\u6ca1\u6709\u7f3a\u9677\u7684\u56fe\u7247\uff1a{}\".format(len(image_no_defects)))","16a46192":"images_class_num = {'0':0,'1':0,'2':0,'3':0,'4':0}\nimages_class = {'0':[],'1':[],'2':[],'3':[],'4':[]}\nimages_mulitlabel = {}\nimages_mulitlabel_num = {}\n\n#####\nimages_class_num['0'] = len(image_no_defects)\nimages_class_num['1'] = (train_df.ClassId == 1).sum()\nimages_class_num['2'] = (train_df.ClassId == 2).sum()\nimages_class_num['3'] = (train_df.ClassId == 3).sum()\nimages_class_num['4'] = (train_df.ClassId == 4).sum()\n\nimages_class['0'] = image_no_defects\nimages_class['1'] = [i for i in train_df.ImageId[train_df.ClassId == 1]]\nimages_class['2'] = [i for i in train_df.ImageId[train_df.ClassId == 2]]\nimages_class['3'] = [i for i in train_df.ImageId[train_df.ClassId == 3]]\nimages_class['4'] = [i for i in train_df.ImageId[train_df.ClassId == 4]]\n\n\nfor i in image_defects:\n    classid = train_df.ClassId[train_df.ImageId==i]\n    if len(classid)>1:\n        classid = str(classid.tolist())\n#         images_mulitlabel[i] = classid.tolist()\n        if str(classid) not in images_mulitlabel.keys():\n            images_mulitlabel[classid] = [i]\n        else:\n            images_mulitlabel[classid].append(i)\n\nimages_mulitlabel_num = images_mulitlabel.copy()\nfor i in images_mulitlabel_num:\n    images_mulitlabel_num[i] = len(images_mulitlabel_num[i])","16950c43":"# \u6709\u7455\u75b5\u3001\u65e0\u7455\u75b5\u56fe\u7247\u7684\u6570\u91cf\n\nprint(images_mulitlabel_num)\nsns.barplot(x=[i for i in images_mulitlabel_num], y=[images_mulitlabel_num[i] for i in images_mulitlabel_num])\nplt.show()","f5428316":"# \u5177\u6709\u591a\u79cd\u7455\u75b5\u7684\u56fe\u7247\u7684\u6570\u91cf\n# '[3, 4]'\u4ee3\u8868\u5177\u67093\u30014\u6807\u8bb0\u7684\u56fe\u7247\n\nprint(images_mulitlabel_num)\nsns.barplot(x=[i for i in images_mulitlabel_num], y=[images_mulitlabel_num[i] for i in images_mulitlabel_num])\nplt.show()","40ea1129":"# \u6bcf\u79cd\u7455\u75b5\u7c7b\u522b\u7684\u56fe\u7247\u6570\u91cf\n\nprint(images_class_num)\nsns.barplot(x=[i for i in images_class_num], y=[images_class_num[i] for i in images_class_num])\nplt.show()","68e445ea":"palet = [(249, 192, 12), (0, 185, 241), (114, 0, 218), (249,50,12)]\ntrain_path = \"..\/input\/severstal-steel-defect-detection\/train_images\"\n\ndef name_to_mask(name):\n    idx = train_df[train_df.ImageId==name].index.tolist()\n    mask = np.zeros((256, 1600, 4), dtype=np.uint8)\n    if idx==[]:\n        return mask\n    \n    # rle to mask\n    for i in idx:\n        mask_embedding = np.zeros(1600*256, dtype=np.uint8)\n        rle = train_df.EncodedPixels[i].split(\" \")\n        classid = train_df.ClassId[i]\n#         print(\"classid: {}\".format(classid))\n        positions = map(int, rle[0::2])\n        length = map(int, rle[1::2])\n        for pos, le in zip(positions, length):\n            mask_embedding[pos-1:pos+le-1] = 1\n        mask[:, :, classid-1] = mask_embedding.reshape(256, 1600, order='F')\n    return mask\n\ndef show_mask_image(name):\n    mask = name_to_mask(name)\n    img = cv2.imread(str(train_path +\"\/\"+ name))\n    fig, ax = plt.subplots(figsize=(15, 15))\n    for ch in range(4):\n        contours, _ = cv2.findContours(mask[:, :, ch], cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)\n        for i in range(0, len(contours)):\n            cv2.polylines(img, contours[i], True, palet[ch], 2)\n    ax.set_title(name)\n    ax.imshow(img)\n    plt.show()    \n    \nfig, ax = plt.subplots(1, 4, figsize=(15, 5))\nfor i in range(4):\n    ax[i].axis('off')\n    ax[i].imshow(np.ones((50, 50, 3), dtype=np.uint8) * palet[i])\n    ax[i].set_title(\"class color: {}\".format(i+1))\n\nfig.suptitle(\"each class colors\")\nplt.show()","128e275f":"for name in images_class['0'][:3]:\n    show_mask_image(name)","80a882f4":"for name in images_class['1'][:3]:\n    show_mask_image(name)","649e1c8e":"for name in images_class['2'][:3]:\n    show_mask_image(name)","ed462dfe":"for name in images_class['3'][:3]:\n    show_mask_image(name)","be09eb02":"for name in images_class['4'][:3]:\n    show_mask_image(name)","b7e55b65":"for name in images_mulitlabel['[2, 3]'][:1]:\n    show_mask_image(name)","349db8ca":"\u5404\u7c7b\u522b\u56fe\u7247\u7684\u6570\u91cf\n\n\u5177\u6709\u591a\u6807\u8bb0\u56fe\u7247\u7684\u6570\u91cf","bad41f54":"\u67e5\u770b\u56fe\u7247","6444c721":"\u6709\u7f3a\u9677\u3001\u65e0\u7f3a\u9677\u56fe\u7247\u6570\u91cf"}}