{"cell_type":{"693d4cce":"code","d68b9736":"code","dee84913":"code","bff950a8":"code","f7d0e3ed":"code","7fa9307d":"code","6dbaa628":"code","9267902d":"code","0259f300":"code","dada339e":"code","d03f59fc":"code","7e097130":"code","436245ef":"code","600d1d88":"code","d77a8473":"code","c27623d7":"code","fae92c6a":"code","f5f26727":"code","871f0274":"code","9ab8bb96":"markdown","b5ee812f":"markdown","ebf5d132":"markdown","0886f887":"markdown","2892490b":"markdown","d2e40cdd":"markdown","0d6e4e96":"markdown","3058b28d":"markdown","18f50b16":"markdown","9c97eb98":"markdown","23c28c52":"markdown","e4ff0d3c":"markdown","d968075b":"markdown","29566d1e":"markdown","63277d6d":"markdown"},"source":{"693d4cce":"import os\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches","d68b9736":"df = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\nprint(df.shape)\ndf.head()","dee84913":"df.dtypes","bff950a8":"(df.isna().sum() \/ df.shape[0]).nlargest(12)","f7d0e3ed":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax","7fa9307d":"sample = '20181230154135'\nfig, ax = create_football_field()\ndf.query(f\"PlayId == {sample} and Team == 'away'\").plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\ndf.query(f\"PlayId == {sample} and Team == 'home'\").plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nplt.title(f'Play # {sample}')\nplt.legend()\nplt.show()","6dbaa628":"df['PlayId'].value_counts().describe()","9267902d":"df.groupby(['PlayId']).agg({'Dis': 'sum'})['Dis'].nlargest(20).plot(kind='bar', figsize=(20, 5))","0259f300":"df.groupby(['PlayId']).agg({'S': 'mean'})['S'].nlargest(20).plot(kind='bar', figsize=(20, 5))","dada339e":"df['GameId'].value_counts().nlargest(20).plot(kind='bar', figsize=(20, 5))","d03f59fc":"df['GameId'].value_counts().describe()","7e097130":"numeric_df = df.select_dtypes('number').drop(['GameId', 'PlayId', 'X', 'Y'], axis=1)\nprint(numeric_df.columns)\nnumeric_df.head()","436245ef":"(numeric_df \/ numeric_df.max()).boxplot(figsize=(20, 5), rot=90)","600d1d88":"(numeric_df \/ numeric_df.max()).boxplot(figsize=(20, 5), rot=90)","d77a8473":"sns.distplot(numeric_df['Yards'])","c27623d7":"sns.distplot(numeric_df['S'])","fae92c6a":"sns.distplot(numeric_df['A'])","f5f26727":"corr = numeric_df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","871f0274":"cat_df = df.select_dtypes('object').drop(['TimeHandoff'], axis=1)\nprint(cat_df.columns)\ncat_df.head()","9ab8bb96":"512 unique game with varying amount of plays","b5ee812f":"Suprising how (S)peed isn't really correlated to anything. As expected (A)cceleration is strongly correlated to (S)peed since (A) is a measure of the change of (S)","ebf5d132":"### PlayID analysis","0886f887":"View the field, code taken from this kernel: https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position","2892490b":"## GameID analysis","d2e40cdd":"I drop GameID PlayerId and their (X) (Y) position as those columns might not have a lot too look at here","0d6e4e96":"The dataframe is pretty full with WindDirection missing only ~16% of the data followed by WindSpeed with ~13%. Given that the dataframe is 500k just rows dropping the nan rows might be possible.","3058b28d":"# To be continued","18f50b16":"There are 23171 unique playIds and each have played 22 accounts","9c97eb98":"# Categorical data","23c28c52":"(S)peed (A)cceleration and (Yards) have a lot of outliars","e4ff0d3c":"The player that is the fastest on average","d968075b":"The player that has traveled the most distance","29566d1e":"Below is a simple EDA of the NFL Big Data Bowl\n\nHere are the [rules](https:\/\/operations.nfl.com\/the-rules\/2019-nfl-rulebook\/) of the game\n\nIf you find this notebook helpful please upvote as it will motivate me to continue providing this material\nAll comments notes and fixes are welcome.","63277d6d":"# Numeric data"}}