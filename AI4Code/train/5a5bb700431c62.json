{"cell_type":{"646cc57d":"code","12721ff9":"code","018ab3ce":"code","d18db3c8":"code","d206618e":"code","63923cd9":"code","508591b8":"code","dcf0ddc6":"code","9695a32f":"code","e7ca9e96":"code","da6bc4ca":"code","af176ddf":"code","02c4cf2e":"code","338ae34f":"code","c4715b54":"code","2c385c04":"code","be7f0d88":"code","3ed9d313":"code","08e54252":"code","866e202e":"code","b57c160b":"code","d063eaf9":"code","51faa6ce":"code","f3fcea11":"code","6d5f9ad1":"code","5226b667":"code","9c9ad7f1":"code","fcafac45":"code","5262450d":"code","9b104fad":"code","cbb91eb2":"code","f84759d3":"code","feafe769":"code","4b30dcb6":"code","d3b6bf0d":"code","b378b2cd":"code","74eefc12":"code","f8d5fb98":"code","6746643b":"code","be01cec1":"code","0071353e":"code","014acc51":"code","b793d6d7":"code","9a806ee6":"code","aa10b409":"code","98ad726d":"code","87a25958":"code","fc5d9787":"code","d0a2d059":"code","515766cc":"code","65a42ef0":"code","5e0fd333":"code","24b38417":"code","cd3b1671":"code","4b27a9ee":"code","9cf45ad1":"code","fc75b0e7":"code","158d9bed":"code","01746eda":"code","519b1725":"code","69d1b351":"code","62b78c0e":"code","e55b607e":"code","89931965":"code","711dcf3d":"code","a33d340b":"code","a168f2ea":"code","484a01a5":"code","1b603b32":"markdown","d169642e":"markdown","a6ef0455":"markdown","5375f8e0":"markdown","b31b5916":"markdown","129a0faa":"markdown","d5547952":"markdown","f6656374":"markdown","5cdb49c6":"markdown","faa114d1":"markdown","c13466b8":"markdown"},"source":{"646cc57d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n# Author: Deepak Khatri\n# Based on ECG Classification notebook from Gregoire DC.\n# Some terms are taken from harmanbhutani's fork of Gregoire DC's notebook.","12721ff9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.utils import class_weight\nimport warnings\nwarnings.filterwarnings('ignore')","018ab3ce":"# import dataset\ntrain_df = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_train.csv\", header = None)\ntest_df = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_test.csv\", header = None)","d18db3c8":"# Value of each class\ntrain_df[187].value_counts()","d206618e":"# representation of classes % wise\nper_class = train_df[187].value_counts()\nplt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(per_class, labels=['normal beat','unknown Beats','Ventricular ectopic beats','Supraventricular ectopic beats','Fusion Beats'], colors=['tab:blue','tab:orange','tab:purple','tab:olive','tab:green'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","63923cd9":"from sklearn.utils import resample\ndf_1=train_df[train_df[187]==1]\ndf_2=train_df[train_df[187]==2]\ndf_3=train_df[train_df[187]==3]\ndf_4=train_df[train_df[187]==4]\ndf_0=(train_df[train_df[187]==0]).sample(n=20000,random_state=42)\n\ndf_1_upsample=resample(df_1,replace=True,n_samples=20000,random_state=123)\ndf_2_upsample=resample(df_2,replace=True,n_samples=20000,random_state=124)\ndf_3_upsample=resample(df_3,replace=True,n_samples=20000,random_state=125)\ndf_4_upsample=resample(df_4,replace=True,n_samples=20000,random_state=126)\n\ntrain_df=pd.concat([df_0,df_1_upsample,df_2_upsample,df_3_upsample,df_4_upsample])","508591b8":"# representation of classes % wise\nper_class = train_df[187].value_counts()\nplt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(per_class, labels=['normal beat','unknown Beats','Ventricular ectopic beats','Supraventricular ectopic beats','Fusion Beats'], colors=['tab:blue','tab:orange','tab:purple','tab:olive','tab:green'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","dcf0ddc6":"# randomly sampling from each class\nclasses=train_df.groupby(187,group_keys=False).apply(lambda train_df : train_df.sample(1))","9695a32f":"# peek on classes\nclasses","e7ca9e96":"# plotting classes ECG\nplt.figure(figsize=(16,8))\n# normal\nplt.subplot(2, 3, 1)  \nplt.plot(classes.iloc[0,:186])\nplt.title('normal beat')\n# unknown\nplt.subplot(2, 3, 2)  \nplt.plot(classes.iloc[1,:186])\nplt.title('unknown Beat')\n# veb\nplt.subplot(2, 3, 3)  \nplt.plot(classes.iloc[2,:186])\nplt.title('Ventricular ectopic beat')\n# seb\nplt.subplot(2, 3, 4)  \nplt.plot(classes.iloc[3,:186])\nplt.title('Supraventricular ectopic beat')\n# fusion\nplt.subplot(2, 3, 5)  \nplt.plot(classes.iloc[4,:186])\nplt.title('Fusion Beat')\n# show plot\nplt.show()","da6bc4ca":"def plot_hist(class_number,size,min_):\n    # get the class data\n    img=train_df.loc[train_df[187]==class_number].values\n    # crop it\n    img=img[:,min_:size]\n    # creates a continous steam of data\n    img_flatten=img.flatten()\n    \n    final1=np.arange(min_,size)\n    for i in range (img.shape[0]-1):\n        tempo1=np.arange(min_,size)\n        final1=np.concatenate((final1, tempo1), axis=None)\n    print(len(final1))\n    print(len(img_flatten))\n    plt.hist2d(final1,img_flatten, bins=(80,80),cmap=plt.cm.jet)\n    plt.show()","af176ddf":"# Normal Beat\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)  \nplt.plot(classes.iloc[0,:186])\nplt.title('Normal beat')\nplt.subplot(1, 2, 2)  \nplot_hist(0,70,5)","02c4cf2e":"# unknown\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)\nplt.plot(classes.iloc[1,:186])\nplt.title('unknown Beat')\nplt.subplot(1, 2, 2)  \nplot_hist(1,50,5)","338ae34f":"# veb\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)  \nplt.plot(classes.iloc[2,:186])\nplt.title('Ventricular ectopic beat')\nplt.subplot(1, 2, 2) \nplot_hist(2,60,30)","c4715b54":"# seb\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1) \nplt.plot(classes.iloc[3,:186])\nplt.title('Supraventricular ectopic beat')\nplt.subplot(1, 2, 2) \nplot_hist(3,60,25)","2c385c04":"# fusion\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)   \nplt.plot(classes.iloc[4,:186])\nplt.title('Fusion Beat')\nplt.subplot(1, 2, 2) \nplot_hist(4,50,18)","be7f0d88":"def add_gaussian_noise(signal):\n    noise=np.random.normal(0,0.05,186)\n    return (signal+noise)","3ed9d313":"tempo=classes.iloc[0,:186]\nbruiter=add_gaussian_noise(tempo)\n\nplt.subplot(2,1,1)\nplt.plot(classes.iloc[0,:186])\n\nplt.subplot(2,1,2)\nplt.plot(bruiter)\n\nplt.show()","08e54252":"target_train=train_df[187]\ntarget_test=test_df[187]\ny_train=to_categorical(target_train)\ny_test=to_categorical(target_test)","866e202e":"X_train=train_df.iloc[:,:186].values\nX_test=test_df.iloc[:,:186].values\n#for i in range(len(X_train)):\n#    X_train[i,:186]= add_gaussian_noise(X_train[i,:186])\nX_train = X_train.reshape(len(X_train), X_train.shape[1],1)\nX_test = X_test.reshape(len(X_test), X_test.shape[1],1)","b57c160b":"# Network\ndef network(X_train,y_train,X_test,y_test):\n    im_shape=(X_train.shape[1],1)\n    inputs_cnn=Input(shape=(im_shape), name='inputs_cnn')\n    conv1_1=Convolution1D(64, (6), activation='relu', input_shape=im_shape)(inputs_cnn)\n    conv1_1=BatchNormalization()(conv1_1)\n    pool1=MaxPool1D(pool_size=(3), strides=(2), padding=\"same\")(conv1_1)\n    conv2_1=Convolution1D(64, (3), activation='relu', input_shape=im_shape)(pool1)\n    conv2_1=BatchNormalization()(conv2_1)\n    pool2=MaxPool1D(pool_size=(2), strides=(2), padding=\"same\")(conv2_1)\n    conv3_1=Convolution1D(64, (3), activation='relu', input_shape=im_shape)(pool2)\n    conv3_1=BatchNormalization()(conv3_1)\n    pool3=MaxPool1D(pool_size=(2), strides=(2), padding=\"same\")(conv3_1)\n    flatten=Flatten()(pool3)\n    dense_end1 = Dense(64, activation='relu')(flatten)\n    dense_end2 = Dense(32, activation='relu')(dense_end1)\n    main_output = Dense(5, activation='softmax', name='main_output')(dense_end2)\n    \n    \n    model = Model(inputs= inputs_cnn, outputs=main_output)\n    model.compile(optimizer='adam', loss='categorical_crossentropy',metrics = ['accuracy'])\n    \n    \n    callbacks = [EarlyStopping(monitor='val_loss', patience=8),\n             ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]\n\n    history=model.fit(X_train, y_train,epochs=5,callbacks=callbacks, batch_size=32,validation_data=(X_test,y_test))\n    model.load_weights('best_model.h5')\n    return(model,history)","d063eaf9":"def evaluate_model(history,X_test,y_test,model):\n    scores = model.evaluate((X_test),y_test, verbose=0)\n    print(\"Accuracy: %.2f%%\" % (scores[1]*100))\n    \n    print(history)\n    fig1, ax_acc = plt.subplots()\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Model - Accuracy')\n    plt.legend(['Training', 'Validation'], loc='lower right')\n    plt.show()\n    \n    fig2, ax_loss = plt.subplots()\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Model- Loss')\n    plt.legend(['Training', 'Validation'], loc='upper right')\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.show()\n    target_names=['0','1','2','3','4']\n    \n    y_true=[]\n    for element in y_test:\n        y_true.append(np.argmax(element))\n    prediction_proba=model.predict(X_test)\n    prediction=np.argmax(prediction_proba,axis=1)\n    cnf_matrix = confusion_matrix(y_true, prediction)","51faa6ce":"from keras.layers import Dense, Convolution1D, MaxPool1D, Flatten, Dropout\nfrom keras.layers import Input\nfrom keras.models import Model\nfrom keras.layers.normalization import BatchNormalization\nimport keras\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nmodel,history=network(X_train,y_train,X_test,y_test)","f3fcea11":"evaluate_model(history,X_test,y_test,model)\ny_pred=model.predict(X_test)","6d5f9ad1":"from sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm, datasets\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,recall_score,precision_score,f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier","5226b667":"\nencoder = preprocessing.LabelEncoder()\nencoder.fit(target_train)\nY_train = encoder.transform(target_train)\nencoder.fit(target_test)\nY_test = encoder.transform(target_test)","9c9ad7f1":"nsamples, nx, ny = X_train.shape\ntrain_dataset = X_train.reshape((nsamples,nx*ny))\nnsamples, nx, ny = X_test.shape\ntest_dataset = X_test.reshape((nsamples,nx*ny))\n","fcafac45":"accu = []\nprec = []\nrecc = []\nf1   = []\nmodels =[]","5262450d":"ytest = Y_test","9b104fad":"\ndtree_model = DecisionTreeClassifier(max_depth = 100).fit(train_dataset, Y_train)\ndt_pred = dtree_model.predict(test_dataset)\n  \n# creating a confusion matrix\n#cm = confusion_matrix(Y_test, dtree_predictions)\n\n\naccuracy_score(Y_test, dt_pred)#, normalize=False)","cbb91eb2":"print('Accuracy Score : ' + str(accuracy_score(ytest, dt_pred)))\nprint('Precision Score : ' + str(precision_score(ytest,dt_pred,average='macro')))\nprint('Recall Score : ' + str(recall_score(ytest,dt_pred,average='macro')))\nprint('F1 Score : ' + str(f1_score(ytest,dt_pred,average='macro')))\n\n# Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,dt_pred)))\n\n\naccu.append(accuracy_score(ytest, dt_pred))\nprec.append(precision_score(ytest,dt_pred,average='macro'))\nrecc.append(recall_score(ytest,dt_pred,average='macro'))\nf1.append(f1_score(ytest,dt_pred,average='macro'))\nmodels.append(\"Decision Tree\" )","f84759d3":"clf = LogisticRegression(random_state=0).fit(train_dataset, Y_train)\nlr_pred = clf.predict(test_dataset)\n\n","feafe769":"print('Accuracy Score : ' + str(accuracy_score(ytest, lr_pred)))\nprint('Precision Score : ' + str(precision_score(ytest,lr_pred,average='macro')))\nprint('Recall Score : ' + str(recall_score(ytest,lr_pred,average='macro')))\nprint('F1 Score : ' + str(f1_score(ytest,lr_pred,average='macro')))\n\n# Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,lr_pred)))\n\n\n\naccu.append(accuracy_score(ytest, lr_pred))\nprec.append(precision_score(ytest,lr_pred,average='macro'))\nrecc.append(recall_score(ytest,lr_pred,average='macro'))\nf1.append(f1_score(ytest,lr_pred,average='macro'))\nmodels.append(\"Logistic Regression\" )","4b30dcb6":"gnb = GaussianNB()\nnb_pred = gnb.fit(train_dataset, Y_train).predict(test_dataset)\n\n\naccuracy_score(ytest,nb_pred)","d3b6bf0d":"print('Accuracy Score : ' + str(accuracy_score(ytest, nb_pred)))\nprint('Precision Score : ' + str(precision_score(ytest,nb_pred,average='macro')))\nprint('Recall Score : ' + str(recall_score(ytest,nb_pred,average='macro')))\nprint('F1 Score : ' + str(f1_score(ytest,nb_pred,average='macro')))\n\n#Dummy Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,nb_pred)))","b378b2cd":"accu.append(accuracy_score(ytest, nb_pred))\nprec.append(precision_score(ytest,nb_pred,average='macro'))\nrecc.append(recall_score(ytest,nb_pred,average='macro'))\nf1.append(f1_score(ytest,nb_pred,average='macro'))\nmodels.append(\"Gaussian naive_bayes\" )","74eefc12":"RF = RandomForestClassifier().fit(train_dataset, Y_train)\nrf_pred = RF.predict(test_dataset)","f8d5fb98":"print('Accuracy Score : ' + str(accuracy_score(ytest, rf_pred)))\nprint('Precision Score : ' + str(precision_score(ytest,rf_pred,average='macro')))\nprint('Recall Score : ' + str(recall_score(ytest,rf_pred,average='macro')))\nprint('F1 Score : ' + str(f1_score(ytest,rf_pred,average='macro')))\n\n#Dummy Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,rf_pred)))","6746643b":"accu.append(accuracy_score(ytest, rf_pred))\nprec.append(precision_score(ytest,rf_pred,average='macro'))\nrecc.append(recall_score(ytest,rf_pred,average='macro'))\nf1.append(f1_score(ytest,rf_pred,average='macro'))\nmodels.append(\"Random forrest\" )","be01cec1":"# create data\n#x = [1,2,3,4]\nx = ['accuracy','precision','recall','f1']\nplt.figure(figsize=(10,10))\nplt.title('score')\n# plot lines\nfor i in range(len(accu)):\n    plt.plot(x,[accu[i],prec[i],recc[i],f1[i]], label = models[i])\nplt.legend()\nplt.savefig('curves.png')\nplt.show()","0071353e":"from sklearn.feature_selection import SelectPercentile, chi2\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC","014acc51":"clf = Pipeline([('anova', SelectPercentile(chi2)),\n                ('scaler', StandardScaler()),\n                ('svc', SVC(gamma=\"auto\"))])","b793d6d7":"score_means = list()\nscore_stds = list()\npercentiles = (1, 3, 6, 10, 15, 20, 30, 40, 60, 80, 100)\n\nfor percentile in percentiles:\n    print(percentile)\n    clf.set_params(anova__percentile=percentile)\n    this_scores = cross_val_score(clf, train_dataset, Y_train)\n    score_means.append(this_scores.mean())\n    score_stds.append(this_scores.std())","9a806ee6":"plt.errorbar(percentiles, score_means, np.array(score_stds))\nplt.title(\n    'Performance of the SVM-Anova varying the percentile of features selected')\nplt.xticks(np.linspace(0, 100, 11, endpoint=True))\nplt.xlabel('Percentile')\nplt.ylabel('Accuracy Score')\nplt.axis('tight')\nplt.show()","aa10b409":"train_dataset[:2][:]","98ad726d":"params_grid = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\nsvm_model = GridSearchCV(SVC(kernel='linear',max_iter=1000,verbose=True), params_grid, cv=5)\nsvm_model.fit(train_dataset, Y_train)","87a25958":"# View the accuracy score\nprint('Best score for training data:', svm_model.best_score_,\"\\n\") \n\n# View the best parameters for the model found using grid search\nprint('Best C:',svm_model.best_estimator_.C,\"\\n\") \nprint('Best Kernel:',svm_model.best_estimator_.kernel,\"\\n\")\nprint('Best Gamma:',svm_model.best_estimator_.gamma,\"\\n\")\n\nfinal_model = svm_model.best_estimator_\nsvm_pred = final_model.predict(test_dataset)\nY_pred_label = list(encoder.inverse_transform(svm_pred))","fc5d9787":"accuracy_score(Y_test, Y_pred_label)","d0a2d059":"svm_lin = SVC(kernel='linear',C=10,max_iter=10000,verbose=True).fit(train_dataset, Y_train)","515766cc":"svm_pred1 = svm_lin.predict(test_dataset)\n#accuracy_score(Y_test, svm_pred1)","65a42ef0":"print('Accuracy Score : ' + str(accuracy_score(ytest, svm_pred1)))\nprint('Precision Score : ' + str(precision_score(ytest,svm_pred1,average='weighted')))\nprint('Recall Score : ' + str(recall_score(ytest,svm_pred1,average='weighted')))\nprint('F1 Score : ' + str(f1_score(ytest,svm_pred1,average='weighted')))\n\n#Dummy Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,svm_pred2)))","5e0fd333":"accu.append(accuracy_score(ytest, svm_pred1))\nprec.append(precision_score(ytest,svm_pred1,average='weighted'))\nrecc.append(recall_score(ytest,svm_pred1,average='weighted'))\nf1.append(f1_score(ytest,svm_pred1,average='weighted'))\nmodels.append(\"linear SVM\" )","24b38417":"svm_pol = SVC(kernel='poly',C=10,max_iter=10000,verbose=True).fit(train_dataset, Y_train)","cd3b1671":"svm_pred2 = svm_pol.predict(test_dataset)\n#accuracy_score(Y_test, svm_pred2)","4b27a9ee":"print('Accuracy Score : ' + str(accuracy_score(ytest, svm_pred2)))\nprint('Precision Score : ' + str(precision_score(ytest,svm_pred2,average='weighted')))\nprint('Recall Score : ' + str(recall_score(ytest,svm_pred2,average='weighted')))\nprint('F1 Score : ' + str(f1_score(ytest,svm_pred2,average='weighted')))\n\n#Dummy Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,svm_pred2)))","9cf45ad1":"accu.append(accuracy_score(ytest, svm_pred2))\nprec.append(precision_score(ytest,svm_pred2,average='weighted'))\nrecc.append(recall_score(ytest,svm_pred2,average='weighted'))\nf1.append(f1_score(ytest,svm_pred2,average='weighted'))\nmodels.append(\"polynomial SVM\" )","fc75b0e7":"svm_rbf = SVC(kernel='rbf',C=10,max_iter=10000,verbose=True).fit(train_dataset, Y_train)","158d9bed":"svm_pred3 = svm_rbf.predict(test_dataset)\n#accuracy_score(Y_test, svm_pred3)","01746eda":"print('Accuracy Score : ' + str(accuracy_score(ytest, svm_pred3)))\nprint('Precision Score : ' + str(precision_score(ytest,svm_pred3,average='weighted')))\nprint('Recall Score : ' + str(recall_score(ytest,svm_pred3,average='weighted')))\nprint('F1 Score : ' + str(f1_score(ytest,svm_pred3,average='weighted')))\n\n#Dummy Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,svm_pred3)))","519b1725":"accu.append(accuracy_score(ytest, svm_pred3))\nprec.append(precision_score(ytest,svm_pred3,average='weighted'))\nrecc.append(recall_score(ytest,svm_pred3,average='weighted'))\nf1.append(f1_score(ytest,svm_pred3,average='weighted'))\nmodels.append(\"rbf SVM\" )","69d1b351":"svm_sig = SVC(kernel='sigmoid',C=10,max_iter=10000,verbose=True).fit(train_dataset, Y_train)","62b78c0e":"svm_pred4 = svm_sig.predict(test_dataset)\n#accuracy_score(Y_test, svm_pred4)","e55b607e":"print('Accuracy Score : ' + str(accuracy_score(ytest, svm_pred4)))\nprint('Precision Score : ' + str(precision_score(ytest,svm_pred4,average='weighted')))\nprint('Recall Score : ' + str(recall_score(ytest,svm_pred4,average='weighted')))\nprint('F1 Score : ' + str(f1_score(ytest,svm_pred4,average='weighted')))\n\n#Dummy Classifier Confusion matrix\n\nprint('Confusion Matrix : \\n' + str(confusion_matrix(ytest,svm_pred4)))","89931965":"accu.append(accuracy_score(ytest, svm_pred4))\nprec.append(precision_score(ytest,svm_pred4,average='weighted'))\nrecc.append(recall_score(ytest,svm_pred4,average='weighted'))\nf1.append(f1_score(ytest,svm_pred4,average='weighted'))\nmodels.append(\"sigmoid SVM\" )","711dcf3d":"# create data\n#x = [1,2,3,4]\nx = ['accuracy','precision','recall','f1']\nplt.figure(figsize=(10,10))\nplt.title('score')\n# plot lines\nfor i in range(4):\n    plt.plot(x,[accu[i],prec[i],recc[i],f1[i]], label = models[i])\nfor i in range(4,8):\n    plt.plot(x,[accu[i],prec[i],recc[i],f1[i]], label = models[i],linestyle='dashed')\nplt.legend()\nplt.savefig('curves.png')\nplt.show()","a33d340b":"scores = pd.DataFrame({'model':models,'accuracy':accu,'precision':prec,'recall':recc,'f1 score' :f1})","a168f2ea":"scores.to_csv('scores.csv')","484a01a5":"scores","1b603b32":"#svm","d169642e":"<h1> DecisionTree<\\h1>\n","a6ef0455":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure(figsize=(10, 10))\nplot_confusion_matrix(cnf_matrix, classes=['N', 'S', 'V', 'F', 'Q'],normalize=True,\n                      title='Confusion matrix, with normalization')\nplt.show()","5375f8e0":"<h1>Logistic Regression<\\h1>","b31b5916":"# Random forrest","129a0faa":"# Gaussian naive_bayes","d5547952":"## Resampling for balacing the dataset","f6656374":"\n<h1>svm<\\h1>\n","5cdb49c6":"## Classes","faa114d1":"## Signal heatmap","c13466b8":"## Pretreat"}}