{"cell_type":{"351a68c0":"code","7ddf0a55":"code","16ad6d29":"code","951c36ac":"code","0fb4e335":"code","33cdbdef":"code","9e2b49e3":"code","7ec5b369":"code","1458bfd8":"code","5563090a":"code","7ec49423":"code","57ba87c3":"code","8d0f5eba":"code","9877d2fa":"code","64042ed0":"code","f51fbe50":"code","74942d9b":"code","49b90c1b":"code","9e36246c":"code","671a40d8":"code","e05cfddb":"code","56d11aaa":"code","e62ce32e":"code","350956e7":"code","38b9f5a8":"code","da52f619":"code","4c19eafa":"code","3588391e":"code","a1d22af7":"code","f88f3b3e":"code","f13ca627":"code","ffc79458":"code","359fdfe4":"code","4cad4d5c":"code","d9a9ecdb":"code","5017c2c9":"code","6a0fd9b5":"code","66a680da":"code","82185fd4":"code","5a4f7418":"code","465adbac":"code","5caa22ad":"code","ecfcd4ae":"code","a4db2c34":"code","276afd7d":"code","d79a70d9":"code","e77205c2":"code","70811a43":"code","e3c651cb":"code","aac6ece6":"code","2aee03b4":"code","9f3cbf11":"markdown","c8bcf01b":"markdown","07c99494":"markdown","258f45f3":"markdown","f242c510":"markdown","c77ad28c":"markdown","db8195d5":"markdown","0dad5d20":"markdown","fcee5771":"markdown","957beb7a":"markdown","98145ab9":"markdown","9994d179":"markdown","5d7ecbd3":"markdown","49edd433":"markdown","abeee1e8":"markdown","af1e6dc8":"markdown","60a080eb":"markdown","2c34d279":"markdown","fa90ed8b":"markdown","ff2a633a":"markdown","e862f1bc":"markdown","49c8ba62":"markdown","11bfb7ca":"markdown","0bc16877":"markdown","fe89e22f":"markdown","25c9246a":"markdown","577d5393":"markdown","0d8c7788":"markdown","22b48607":"markdown","4aa15cdb":"markdown","b4cafea0":"markdown","524ae3bd":"markdown"},"source":{"351a68c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ddf0a55":"# here are the modules we'll be using throughout this notebook\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nimport math","16ad6d29":"from sklearn.metrics import mean_absolute_error\n","951c36ac":"from scipy import stats","0fb4e335":"# Load our data from the csv file\nhouses = pd.read_csv('..\/input\/housedata\/data.csv') ","33cdbdef":"houses.shape","9e2b49e3":"houses.dtypes","7ec5b369":"houses.country.value_counts()","1458bfd8":"houses.statezip.value_counts()","5563090a":"\"The average price of a house is ${:,.0f}\".format(houses.price.mean())","7ec49423":"#get the average price for houses along their number of bedrooms:\nplt.figure(figsize=(10,6))\nsns.barplot(x=houses.bedrooms, y=houses['price'])","57ba87c3":"# get a price breakdown for each bedroom group\nbybedroom = houses.groupby(['bedrooms']).price.agg([len, min, max])","8d0f5eba":"#problem #1 and #2 - 2 houses with 0 bedrooms, giant outlier at 3 bedrooms\nbybedroom","9877d2fa":"# problem #3 - houses with null prices\nhouses_zero= houses[houses.price==0]\nprint('There are '+str(len(houses_zero))+' houses without a price')","64042ed0":"# problem #4 - house prices are not normal\nsns.distplot(houses['price'], fit=norm)","f51fbe50":"# new dataframe without problem #1 #2 #3\nhouses_o = houses[(houses.price<2.5*10**7) & (houses.bedrooms>0) & (houses.price>0)].copy()","74942d9b":"#recode houses with more than 6 bedrooms as 6 bedrooms\nhouses_o['bedrooms_recoded'] = houses_o['bedrooms'].replace([7,8,9],6)","49b90c1b":"houses_o['renovated_0_1'] = houses_o['yr_renovated']\/houses_o['yr_renovated']\nhouses_o['renovated_0_1'] = houses_o['renovated_0_1'].fillna(0)","9e36246c":"features = ['price','bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot',\n       'floors', 'waterfront', 'view', 'condition', 'sqft_above',\n       'sqft_basement', 'yr_built', 'yr_renovated']\nmask = np.zeros_like(houses_o[features].corr(), dtype=np.bool) \nmask[np.triu_indices_from(mask)] = True \n\nf, ax = plt.subplots(figsize=(16, 12))\nplt.title('Pearson Correlation Matrix',fontsize=25)\n\nsns.heatmap(houses_o[features].corr(),linewidths=0.25,vmax=0.7,square=True,cmap=\"BuGn\", #\"BuGn_r\" to reverse \n            linecolor='w',annot=True,annot_kws={\"size\":8},mask=mask,cbar_kws={\"shrink\": .9});","671a40d8":"# Move our features into the X DataFrame\nX = houses_o.loc[:,['bedrooms_recoded', 'floors','view','condition','renovated_0_1']]\n\n# Move our labels into the y DataFrame\ny = houses_o.loc[:,['price']] ","e05cfddb":"# separate y and X into train and test\nX_train, X_test, y_train, y_test = train_test_split(\n                                                    X, \n                                                    y, \n                                                    test_size=0.3, \n                                                    random_state=42\n                                                   )","56d11aaa":"#train a basic multiple regression model and print out the coefficients\nmod = sm.OLS(y_train, X_train)\nres = mod.fit()\nprint(res.summary())","e62ce32e":"# Ask the model to predict prices in the train and test set based just on our predictor variables\nlr = LinearRegression()\nlr.fit(X_train,y_train)\ntest_pre = lr.predict(X_test)\ntrain_pre = lr.predict(X_train)","350956e7":"# Now let's plot our predicted values on one axis and the real values on the other axis\nplt.scatter(train_pre, y_train, c = \"blue\",  label = \"Training data\")\nplt.scatter(test_pre, y_test, c = \"black\",  label = \"Validation data\")\nplt.title(\"Linear regression\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Real values\")\nplt.legend(loc = \"upper right\")\nplt.plot([0.2*10**6, 0.25*10**7], [0.2*10**6, 0.25*10**7], c = \"red\")\nplt.show()","38b9f5a8":"#get the results from the regression in dataframe format\nres = pd.DataFrame(data=train_pre, columns=['predicted values'])\n#join with the actual prices\nres = y_train.reset_index().join(res)\n#join with the training dataset\nresfin = res.join(X_train, on='index',lsuffix='_y')\n# compute the actual prices, predicted prices and error\nresfin['predprice']=res['predicted values']\nresfin['actprice']=res['price']\nresfin['error']=resfin['predprice']-resfin['actprice']","da52f619":"#get the results from the regression in dataframe format\nres_test = pd.DataFrame(data=test_pre, columns=['predicted values'])\n#join with the actual prices\nres_test = y_test.reset_index().join(res_test)\n#join with the training dataset\nresfin_test = res_test.join(X_test, on='index',lsuffix='_y')\n# compute the actual prices, predicted prices and error\nresfin_test['predprice']=resfin_test['predicted values']\nresfin_test['actprice']=resfin_test['price']\nresfin_test['error']=resfin_test['predprice']-resfin_test['actprice']\nresdf = pd.concat([resfin,resfin_test])","4c19eafa":"\"The mean error of our model is ${:,.0f}\".format(resfin_test['error'].mean())\n","3588391e":"#plot the error\nplt.figure(figsize=(15,8))\nsns.distplot(resfin_test['error'], fit=norm)","a1d22af7":"#standardize the errors\nx_array = np.array(resfin_test['error'])\nnormalized_X = stats.zscore(x_array)\n","f88f3b3e":"#let's get the normalized error back into our dataset\nerror_df = pd.DataFrame(data=normalized_X.T, columns=['normalized error'])\nresfin2 = resfin_test.join(error_df)\nresfin2['abs_norm_error'] = abs(resfin2['normalized error'])\n#now let's select only the errors that are 2 standard deviations away from the mean\nresfin2['massive underestimation'] = resfin2['normalized error']<-2 \n","f13ca627":"plt.figure(figsize=(10,5))\nsns.distplot(error_df, fit=norm)","ffc79458":"#how many big mistakes in our test dataset?\nresfin2['massive underestimation'].value_counts()","359fdfe4":"\"approximately {:.1%} of the test houses are massively underestimated\".format(resfin2['massive underestimation'].values.sum()\/len(resfin2))","4cad4d5c":"plt.figure(figsize=(12,8))\nplt.scatter(resfin2['predprice'], resfin2['actprice'], c = resfin2['massive underestimation'])\nplt.plot([0.2*10**6, 1.75*10**6], [0.2*10**6, 1.75*10**6], c = \"red\")\nplt.legend(loc = \"upper left\")","d9a9ecdb":"#Now let's explore - what kind of houses is the model particularly bad at estimating the price of?\npd.crosstab(resfin2['bedrooms_recoded'],resfin2['massive underestimation']).apply(lambda r: r\/r.sum(), axis=1)","5017c2c9":"result = houses_o.groupby([\"statezip\"])['price'].aggregate(np.median).reset_index().sort_values('price', ascending=False)\nplt.figure(figsize=(15,8))\nchart = sns.barplot(\n    x='statezip',\n    y='price',\n    data=houses_o,\n    order = result['statezip'],\n    estimator=np.median\n    \n    \n)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)","6a0fd9b5":"houses_o['posh_zip'] = houses_o['statezip'].isin(['WA 98039','WA 98004','WA 98040','WA 98109']).astype(int)\n","66a680da":"# Move our features into the X DataFrame\nX = houses_o.loc[:,['bedrooms_recoded', 'floors', 'condition','view','renovated_0_1', 'posh_zip']]\n\n# Move our labels into the y DataFrame\ny = houses_o.loc[:,['price']] ","82185fd4":"# separate y and X into train and test\nX_train, X_test, y_train, y_test = train_test_split(\n                                                    X, \n                                                    y, \n                                                    test_size=0.3, \n                                                    random_state=42\n                                                   )","5a4f7418":"#train a basic multiple regression model and print out the coefficients\nmod = sm.OLS(y_train, X_train)\nres = mod.fit()\nprint(res.summary())","465adbac":"# Ask the model to predict prices in the train and test set based just on our predictor variables\nlr = LinearRegression()\nlr.fit(X_train,y_train)\ntest_pre = lr.predict(X_test)\ntrain_pre = lr.predict(X_train)","5caa22ad":"#get the results from the regression in dataframe format\nres_test = pd.DataFrame(data=test_pre, columns=['predicted values'])\n#join with the actual prices\nres_test = y_test.reset_index().join(res_test)\n#join with the training dataset\nresfin_test = res_test.join(X_test, on='index',lsuffix='_y')\n# compute the actual prices, predicted prices and error\nresfin_test['predprice']=resfin_test['predicted values']\nresfin_test['actprice']=resfin_test['price']\nresfin_test['error']=resfin_test['predprice']-resfin_test['actprice']\nresdf = pd.concat([resfin,resfin_test])","ecfcd4ae":"#standardize the errors\nx_array = np.array(resfin_test['error'])\nnormalized_X = stats.zscore(x_array)\n","a4db2c34":"#let's get the normalized error back into our dataset\nerror_df = pd.DataFrame(data=normalized_X.T, columns=['normalized error'])\nresfin2 = resfin_test.join(error_df)\nresfin2['abs_norm_error'] = abs(resfin2['normalized error'])\n#now let's select only the errors that are 2 standard deviations away from the mean\nresfin2['massive underestimation'] = resfin2['normalized error']<-2 ","276afd7d":"plt.figure(figsize=(12,8))\nplt.scatter(resfin2['predprice'], resfin2['actprice'], c = resfin2['massive underestimation'])\nplt.plot([0.2*10**6, 1.75*10**6], [0.2*10**6, 1.75*10**6], c = \"red\")\nplt.legend(loc = \"upper left\")","d79a70d9":"#plot the residuals\nplt.figure(figsize=(15,8))\nsns.distplot(res.resid, fit=norm)","e77205c2":"# Move our features into the X DataFrame\nX = houses_o.loc[:,['sqft_living','condition', 'yr_built']]\n\n# Move our labels into the y DataFrame\ny = houses_o.loc[:,['price']] ","70811a43":"# separate y and X into train and test\nX_train, X_test, y_train, y_test = train_test_split(\n                                                    X, \n                                                    y, \n                                                    test_size=0.3, \n                                                    random_state=42\n                                                   )","e3c651cb":"#train a basic multiple regression model and print out the coefficients\nmod = sm.OLS(y_train, X_train)\nres = mod.fit()\nprint(res.summary())","aac6ece6":"#plot the residuals\nplt.figure(figsize=(15,8))\nsns.distplot(res.resid, fit=norm)","2aee03b4":"#partial regression plots\nfig = plt.figure(figsize=(12,8))\nfig = sm.graphics.plot_partregress_grid(res, fig=fig)","9f3cbf11":"Let's go ahead and separate the price from our features:","c8bcf01b":"I live in New Zealand and **550,000 USD** is roughly **900,000 NZD**, which gets you quite a nice house down here!","07c99494":"The price distribution is in blue, while the normal distribution is in black. Clearly, houses prices are not normal. This is not a problem per se, rather something to keep in mind.\n\nSo, to recap, we have 3 problems :\n1. Houses with 0 bedroom\n2. Giant outlier at almost $27M - 50 times the price of a normal house\n3. 49 houses without a price\n\n\nWe'll take the easy way out - remove them from our analysis.","258f45f3":"50 houses are underestimated in our test data! How much is that in %?","f242c510":"Let's visualise the price of a house and the zip code!","c77ad28c":"Great! Now that we have flagged our biggest mistakes, it will be easier to find out whether there is a pattern to them.","db8195d5":"OK, let's unpack this shall we?\n\nWhat's reassuring is that condition and renovated_0_1 stay non significant, meaning they don't seem to contribute too much to the price of a house. However posh_zip does contribute and not in a small way! It is the most significant variable by a long shot AND it contributes the most to the price of a house! If you could move a house from an average neighborhood to a good neighborhood, it increases the house value by $ 700k, everything else being constant!\n","0dad5d20":"OK so the model apparently has trouble with houses that feature 4 rooms or more. There may be something we're missing about these houses. Could be the location? After all, according to real estate agents, it's all about location!","fcee5771":"Alright, so all of the houses are located in the state of Washington (Pacific Northwest, where Seattle is). This might serve us for later.\n\nLet's check out the average price of a house in that area.","957beb7a":"Now, there is one other potential problem with our data. There are too few houses with more than 6 bedrooms. This is a problem if we want to use the number of bedrooms as a predictor of house price.\n\nTo fix this, we can simply group the houses with 7, 8 and 9 bedrooms with the houses featuring 6 bedrooms.","98145ab9":"Next let's isolate the model's biggest mistakes to see if there is a pattern.","9994d179":"We get a nice little novel above. I know this is a lot but it's necessary. \n\nWe can see for each of our predictor variables, (*bedrooms_recoded, floors, view,condition, renovated_0_1*) there are several columns - *coef, std err, t,  P>|t|, [0.025 and 0.975]*. The column we need to check first is *P>|t|*. It tells us what is the probability that our coefficients are equal to zero, meaning our predictor variables do not have an impact on price.\n\nHere we're lucky - most of these probabilities are zero, except for the condition of the house and whether it has been renovated or not.\n\nThe probability that *condition* and *renovated_0_1* are zero is 12.1% and 59.9%, respectively.\n\nThe next thing we can check is the coefficients themselves - what is the most important predictor variable? Here it seems that it's *view*, followed closely by *floors*. According to the model, if the house has a view, it will gain about $ 170k in value (1.712e+05 = 1,712*(10^5))\n\nSo this is obviously not a great model, but let's see what it does right and what it does wrong.","5d7ecbd3":"OK, so the first number tells us the number of rows (the number of houses) and the second one is the number of columns (the number of features).\n\nWe have 4600 houses in the dataset and 18 features, including price. Therefore, we can choose between 17 different features that influence the price of a house. Let's check these out.","49edd433":"OK something strange here.  There is clearly a relationship between the number of bedrooms and the average price of a house. However, seems that a house with 9 bedrooms (!) sells for less than a house with 4 bedrooms... \n\nAlso, some houses don't have any rooms?\n\nLet's look at this in more detail.","abeee1e8":"To me the first feature of a house that stands out is the number of bedrooms. Bigger houses have more bedrooms and thus command a higher price. Let's look at that relationship.","af1e6dc8":"Mean error on the test set is close to  $ 14k, which means that the model tends to overestimate the value of houses.\n\nLet's see what the shape of the errors looks like.\n\n","60a080eb":"OK, this can be a bit overwhelming, so let's focus on one element at a time. \n\nThe first thing to look at is the first column. It tells us how correlated the features in the houses are to the house price.\nWe can see that the most correlated feature is sqft_living, with a coefficent of 0.62. This makes sense - the higher the surface of the house, the higher the price.\n\nThe second most correlated feature is sqft_above, with 0.53. However, in our model **we cannot use both sqft_living and sqft_above**, and that's because these features are highly correlated - 0.88.\n\nIf we do use both of these features, our model won't be able to properly estimate the coefficients - it won't know whether the price is high because sqft_living is high or because sqft_above is high.\n\nSo, best practice is to select features that are highly correlated with house prices, but not correlated with each other.\nFor now, we'll pick the following:\n\n1. bedrooms_recoded\n2. floors\n3. view\n4. condition\n5. renovated_0_1","2c34d279":"Finally, we use a multiple regression model on the train set to find out what is the impact of our predictor variables on price:","fa90ed8b":"* We can see there are a handful of zipcodes that are way more expensive than the rest. Otherwise, statezip doesn't seem to play a huge role in the price of a house.\n\nLet's select the 5 most expensive zips and create a new binary variable called 'posh zip':","ff2a633a":"Our model has one too many variables, but it could me missing something too. The Omnibus test tells us about the probability that the residuals are not normally distributed. The result of this test was zero which means they're not. If they're not normal, it means there is a pattern to the residuals that we're missing, and maybe this pattern could be explained by another variable in our dataset.\n\nFor now, let's just check the shape of our residuals:","e862f1bc":"Next we need to separate our houses into train and test set","49c8ba62":"The table above provides an explanation for the price discrepancy we have seen. There is only one house with 9 bedrooms! This may be a house located far from the city, or the owner might have needed to sell it in a hurry. Whatever the circumstances, 1 house is not big enough a sample. We'll need to do something if we want to use the number of bedrooms as a predictor in our model.\n\nThe table above also highlighted 2 other problems with the data. \n1. Two houses have no bedroom!\n2. Some houses have a price of zero\n\nLet's look at this last problem in more detail.","11bfb7ca":"Hi and welcome to this notebook on predicting house prices! If you are new to data analysis, Python and\/or machine learning, this is the perfect place to start!\n\nThis notebook will guide you through this dataset - it is composed of more than 4,000 houses and the price they sold for, as well as some of their features, like number of bedrooms, bathrooms, etc...\n\nThe goal of this notebook is to answer the following question: *what are the most important features that influence the price of a house?*\n\nHere is what we're going to do:\n\n1. Exploratory Data Analysis (EDA) - let's find out what the features are and how they individually affect house prices\n2. Recoding - fixing the problems we've identified in EDA\n3. Feature selection - we have to be picky about which features we include in the model - which ones have to be in and which ones are optional?\n4. Model building - let's see what is the impact of our features on house prices!\n\nSo if you haven't already, grab yourself a nice cuppa and let's dig in!\n\n","0bc16877":"![](https:\/\/cdn.geekwire.com\/wp-content\/uploads\/2020\/03\/bigstock-Residential-Neighborhood-And-F-345221452-630x420.jpg)","fe89e22f":"OK we're done with the recoding.\nLet's get a nice Pearson correlation matrix going on","25c9246a":"So, how many houses do we have in our dataset?","577d5393":"Out of 4600 houses in the sample, 49 don't have a price. It's not a lot, but this might confuse the model.\n\nWe're almost done with exploring the features. Let's look at the price distribution.","0d8c7788":"Interesting. What state ?","22b48607":"Great! We've highlighted the underestimated houses in yellow. ","4aa15cdb":"Welp, something is definitely off here. there is a first peak around -1, and then we get the main peak around 1! That is surely not normal.","b4cafea0":"The x-axis represents the prices predicted by the model, while the y-axis shows the true price of these houses. Ideally, we would want houses to be grouped on the red line, meaning the estimated value and the true value of a house are very close. \n\nWe are not there yet, but it isn't too bad! Our predictions follow the red line and there is no obvious train\/test bias. Also, it seems that our predictions don't get worse when house prices increase, which is a good sign.\n\nIt seems our model has trouble with high-value houses though. It accurately forecasts the price of cheap and moderately priced properties, but when prices rise on the y axis, this is where we start to deviate from the ideal red line. The poster child for this prediction error is the obvious outlier sitting at 1.2x10^7 = a 12 million dollar house, where our model predicted less than $ 500 000!\n\nNow let's compute the mean error.","524ae3bd":"We have a nice list of all the features, some being *categorical variables* (object types), like the country of the house and some being *measures* (float64 or int64 types) like the surface of the basement.\n\nJust curious, what country are these houses in?"}}