{"cell_type":{"aca8d239":"code","0abbe32b":"code","6d22b723":"code","0b546d99":"code","3b9abcc6":"code","8b9318ec":"code","1cd88ce8":"code","6f22a35b":"code","b0e1b723":"code","4be8f938":"code","07aa1a1a":"code","cf837e60":"code","3f383687":"code","b137c3d9":"code","969be31f":"code","38e6f78c":"code","4f718487":"code","087eda8a":"code","5548dae7":"code","1c343f7b":"code","da578592":"code","c9f920aa":"code","a8af82d5":"code","5018e887":"code","68186aec":"code","953ba640":"code","88efcc34":"code","4f7471b2":"code","4b8f64f9":"code","5e5943f6":"code","4dd18a63":"code","6075bfa0":"code","861f1491":"code","fcc8fd50":"code","b7347cb1":"code","ff8f5c67":"code","172bd568":"code","f643c5da":"code","80b16169":"markdown","ba1e1614":"markdown","83c6fffa":"markdown","ef0921ad":"markdown","91b40fba":"markdown","9eaa308a":"markdown","a733d2ae":"markdown","c6978a21":"markdown","00a3c262":"markdown","1fdaf022":"markdown","045d85b2":"markdown","0d467586":"markdown","22fe54d0":"markdown","9ba47ca5":"markdown","9a637525":"markdown","2e4f52c0":"markdown","374d15f7":"markdown","dfbdf4a5":"markdown","7529cbf2":"markdown","fd7135d8":"markdown","6db88606":"markdown","eff4cdb6":"markdown","12bc8221":"markdown","7d7fd9af":"markdown","53930678":"markdown","532f7add":"markdown","2246d7de":"markdown","93144c09":"markdown","627f6ba8":"markdown","9fab98aa":"markdown","ec3a8b2a":"markdown","669203cc":"markdown","8f340c14":"markdown","417c16fe":"markdown","eab08e1c":"markdown","3c4a6c0c":"markdown","a9e0061d":"markdown","a2c18d46":"markdown","adf1f98a":"markdown","19df7500":"markdown","200c83a7":"markdown","ee35d922":"markdown","57d9a325":"markdown","70ad5e47":"markdown","fe0419af":"markdown","8b2fd834":"markdown","88235d5b":"markdown","afd5da1b":"markdown"},"source":{"aca8d239":"\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Exploratory Data Analysis Tools\nimport numpy as np\nimport pandas as pd\nimport datetime as dt\nimport matplotlib.pyplot as plt\nfrom string import ascii_letters\n\n# Modeling Tools\nimport fbprophet\nimport warnings\nimport itertools\nimport statsmodels.api as sm\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom math import sqrt\n\n\n# Data Visualization Tools\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nfrom plotly import tools\nimport plotly.tools as tls","0abbe32b":"# Opening source file\norg_data = pd.read_csv('..\/input\/Monthly_data_cmo.csv')\napmc = org_data # creating a separate dataset to operate on!!\napmc.tail()","6d22b723":"apmc.describe()","0b546d99":"# Checking Missing Data points, if any\napmc = apmc.dropna(subset=['Year', 'arrivals_in_qtl', 'min_price', 'max_price', 'modal_price'])\napmc.describe() # cleaning, dropping those rows with no values in any one of the above columns","3b9abcc6":"df3 = pd.DataFrame(apmc.groupby(['Commodity', 'Year']).agg('sum')).reset_index()\ndf3.tail()","8b9318ec":"trace1 = go.Bar(\n    x= df3.loc[df3['Year'] == 2016].Commodity,\n    y= df3.loc[df3['Year'] == 2016].arrivals_in_qtl,\n    name='2016',\n    marker=dict(\n        color='yellow', \n        line=dict(\n            color='rgb(8,48,107)',\n            width=0.2),\n        ),\n    opacity=0.6\n)\n\ntrace2 = go.Bar(\n    x= df3.loc[df3['Year'] == 2015].Commodity,\n    y= df3.loc[df3['Year'] == 2015].arrivals_in_qtl,\n    name='2015',\n    marker=dict(\n        color='brown', \n        line=dict(\n            color='rgb(8,48,107)',\n            width=0.2),\n        ),\n    opacity=0.6\n)\n\ntrace3 = go.Bar(\n    x= df3.loc[df3['Year'] == 2014].Commodity,\n    y= df3.loc[df3['Year'] == 2014].arrivals_in_qtl,\n    name='2014',\n    marker=dict(\n        color='red', \n        line=dict(\n            color='rgb(8,48,107)',\n            width=0.2),\n        ),\n    opacity=0.6\n)\n\nlayout = go.Layout(\n    title='Commodities Purchased (in Volumes) per year'\n)\n\ndata = [trace1, trace2, trace3]\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"popular_commodity\")","1cd88ce8":"df1 = pd.DataFrame(apmc.groupby(['Commodity']).sum()).reset_index()\ndf1 = df1[['Commodity', 'arrivals_in_qtl']]\n# df1.tail()\n\ndf1_a = df1[df1['arrivals_in_qtl'] > 1000000]\ndf1_a_sort = df1_a.sort_values('arrivals_in_qtl', ascending=True) # for latest python df.sort has been deprecated and updated to df.sort_values\n\n\ntrace = go.Bar(\n    x= df1_a_sort.Commodity,\n    y= df1_a_sort.arrivals_in_qtl,\n    marker=dict(\n        color='orange',\n    ),\n)\n\nlayout = go.Layout(\n    title='Most Popular Commodity'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"popular_Commodity\")","6f22a35b":"# selecting the bottom Selling Commodity in term of < 100  Quintals purchased over 2 years span\ndf1_b = df1[df1['arrivals_in_qtl']<100]\ndf1_b_sort = df1_b.sort_values('arrivals_in_qtl', ascending=True) # for latest python df.sort has been deprecated and updated to df.sort_values\n\ntrace = go.Bar(\n    x= df1_b_sort.Commodity,\n    y= df1_b_sort.arrivals_in_qtl,\n    marker=dict(\n        color='green',\n    ),\n)\n\nlayout = go.Layout(\n    title='Least Popular Commodity'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"popular_Commodity\")","b0e1b723":"#creating a new column Calculating the total market price\napmc['Total_Market_Price'] = apmc['modal_price'] * apmc['arrivals_in_qtl']","4be8f938":"df2 = pd.DataFrame(apmc.groupby(['district_name', 'Year']).agg('mean')).reset_index()\ndf2.tail(n=6)\n\ntrace14 = go.Bar(\n    x= df2.loc[df2['Year'] == 2014].district_name,\n    y = df2.loc[df2['Year'].isin([2014])].Total_Market_Price,\n    name='2014',\n    \n    marker=dict(\n        color='orange', \n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=1.0\n)\n\ntrace15 = go.Bar(\n    x= df2.loc[df2['Year'] == 2015].district_name,\n    y= df2.Total_Market_Price.loc[df2['Year'] == 2015],\n    name='2015',\n    marker=dict(\n        color='purple', \n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.8\n)\n\ntrace16 = go.Bar(\n    x= df2.loc[df2['Year'] == 2016].district_name,\n    y= df2.loc[df2['Year'] == 2016].Total_Market_Price,\n    name='2016',\n    marker=dict(\n        color='pink', \n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.6\n)\n\nlayout = go.Layout(\n    title='Market share per district per year'\n)\n\ndata = [trace14, trace15, trace16]\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"district_price\")","07aa1a1a":"# selecting the top 10 Selling Commodity in term of NUmber of Quintals purchased over 3 years\nprint(df1.sort_values('arrivals_in_qtl', ascending=False).head(n=10)) # for latest python df.sort has been deprecated and updated to df.sort_values","cf837e60":"df4 = apmc\ndf4 = df4.loc[df4['Commodity'].isin(['Onion','Soybean', 'Potato', 'Cotton', 'Rice(Paddy-Hus)', 'Tomato', ' Coriander  ', 'Methi (Bhaji)','Pigeon Pea (Tur)', 'Maize'])]\n# Getting the Sum and the mean of the values\ndf4_a = pd.DataFrame(df4.groupby(['Commodity', 'date']).agg('sum')).reset_index()\ndf4_b = pd.DataFrame(df4.groupby(['Commodity', 'date']).agg('mean')).reset_index()","3f383687":"trace21 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Onion'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Onion'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Onion'\n)\n\ntrace22 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Soybean'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Soybean'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Soybean'\n)\n\ntrace23 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Cotton'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Cotton'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Cotton'\n)\n\ntrace24 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Potato'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Potato'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Potato'\n)\n\ntrace25 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Rice(Paddy-Hus)'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Rice(Paddy-Hus)'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Rice(Paddy-Hus)'\n)\n\ntrace26 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Tomato'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Tomato'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Tomato'\n)\n\ntrace27 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Coriander'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Coriander'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Coriander'\n)\n\ntrace28 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Methi (Bhaji)'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Methi (Bhaji)'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Methi (Bhaji)'\n)\n\ntrace29 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Pigeon Pea (Tur)'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Pigeon Pea (Tur)'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Pigeon Pea (Tur)'\n)\n\ntrace20 = go.Scatter(\n    x= df4_a.loc[df4_a['Commodity'] == 'Maize'].date,\n    y= df4_a.loc[df4_a['Commodity'] == 'Maize'].arrivals_in_qtl,\n    mode = 'lines+markers',\n    name = 'Maize'\n)\n\ntrace31 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Onion'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Onion'].modal_price,\n    name = 'Onion_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n\ntrace32 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Soybean'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Soybean'].modal_price,\n    name = 'Soybean_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n\ntrace33 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Cotton'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Cotton'].modal_price,\n    name = 'Cotton_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n\ntrace34 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Potato'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Potato'].modal_price,\n    name = 'Potato_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n\ntrace35 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Rice(Paddy-Hus)'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Rice(Paddy-Hus)'].modal_price,\n    name = 'Rice(Paddy-Hus)_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n    \ntrace36 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Tomato'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Tomato'].modal_price,\n    name = 'Tomato_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n    \ntrace37 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Coriander'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Coriander'].modal_price,\n    name = 'Coriander_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n    \ntrace38 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Methi (Bhaji)'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Methi (Bhaji)'].modal_price,\n    name = 'Methi (Bhaji)_Price',\n    yaxis='y2',\n    opacity=0.5\n)\n    \ntrace39 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Pigeon Pea (Tur)'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Pigeon Pea (Tur)'].modal_price,\n    name = 'Pigeon Pea (Tur)_Price',\n    opacity=0.5,\n    yaxis='y2'\n)\n    \ntrace30 = go.Bar(\n    x= df4_b.loc[df4_b['Commodity'] == 'Maize'].date,\n    y= df4_b.loc[df4_b['Commodity'] == 'Maize'].modal_price,\n    name = 'Maize_Price', \n    opacity=0.5,\n    yaxis='y2'\n)\n\n\ndata = [trace21, trace22, trace23, trace24, trace25, trace26, trace27, trace28, trace29, trace20,\n        trace31, trace32, trace33, trace34, trace35, trace36, trace37, trace38, trace39, trace30]\n    \n\nlayout = go.Layout(\n    legend=dict(orientation=\"h\"),\n    \n    title='Monthly Chart : Top 10 Commodity, Economics v\/s Quantity',\n    yaxis=dict(\n        title='Quintals_Purchased_in_Maharashtra'\n    ),\n    yaxis2=dict(\n        title='Average_Modal_Price_Per_Quintal(INR)',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"popular_commodity\")","b137c3d9":"print(df1.sort_values('arrivals_in_qtl', ascending=True).head()) # for latest python df.sort has been deprecated and updated to df.sort_values","969be31f":"df0 = apmc\ndf0 = df0.loc[df0['Commodity'].isin(['CASTOR SEED','LEAFY VEGETABLE', 'Baru Seed', 'Jui', 'Papnas', 'MUSTARD', \n                                           'SARSAV', 'Terda','GOATS', 'Kalvad', 'Peer', 'NOLKOL', 'Plum',\n                                          'GROUNDNUT PODS (WET)', 'Karvand', 'He Buffalo'])]\n# Getting the Sum and the mean of the values\ndf0_a = pd.DataFrame(df0.groupby(['Commodity', 'date']).agg('sum')).reset_index()\ndf0_b = pd.DataFrame(df0.groupby(['Commodity', 'date']).agg('mean')).reset_index()","38e6f78c":"data = [\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'CASTOR SEED'].district_name, y=df0.loc[df0['Commodity'] == 'CASTOR SEED'].arrivals_in_qtl,\n        name = 'Castor seed', opacity=0.5),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'GOATS'].district_name, y=df0.loc[df0['Commodity'] == 'GOATS'].arrivals_in_qtl,\n        name = 'Goats', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Karvand'].district_name, y=df0.loc[df0['Commodity'] == 'Karvand'].arrivals_in_qtl,\n        name = 'Karvand', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'He Buffalo'].district_name, y=df0.loc[df0['Commodity'] == 'He Buffalo'].arrivals_in_qtl,\n        name = 'Buffalo', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'LEAFY VEGETABLE'].district_name, y=df0.loc[df0['Commodity'] == 'LEAFY VEGETABLE'].arrivals_in_qtl,\n        name = 'Leafy Veggie', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Baru Seed'].district_name, y=df0.loc[df0['Commodity'] == 'Baru Seed'].arrivals_in_qtl,\n        name = 'Baru Seed', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Jui'].district_name, y=df0.loc[df0['Commodity'] == 'Jui'].arrivals_in_qtl,\n        name = 'Jui', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Papnas'].district_name, y=df0.loc[df0['Commodity'] == 'Papnas'].arrivals_in_qtl,\n        name = 'Papnas', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'MUSTARD'].district_name, y=df0.loc[df0['Commodity'] == 'MUSTARD'].arrivals_in_qtl,\n        name = 'Mustard', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'SARSAV'].district_name, y=df0.loc[df0['Commodity'] == 'SARSAV'].arrivals_in_qtl,\n        name = 'Sarsav', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Terda'].district_name, y=df0.loc[df0['Commodity'] == 'Terda'].arrivals_in_qtl,\n        name = 'Terda', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Kalvad'].district_name, y=df0.loc[df0['Commodity'] == 'Kalvad'].arrivals_in_qtl,\n        name = 'Kalvad', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Peer'].district_name, y=df0.loc[df0['Commodity'] == 'Peer'].arrivals_in_qtl,\n        name = 'Peer', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'Plum'].district_name, y=df0.loc[df0['Commodity'] == 'Plum'].arrivals_in_qtl,\n        name = 'Plum', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'NOLKOL'].district_name, y=df0.loc[df0['Commodity'] == 'NOLKOL'].arrivals_in_qtl,\n        name = 'Nolkol', opacity=0.5\n    ),\n    go.Bar(\n        x=df0.loc[df0['Commodity'] == 'GROUNDNUT PODS (WET)'].district_name, y=df0.loc[df0['Commodity'] == 'GROUNDNUT PODS (WET)'].arrivals_in_qtl,\n        name = 'Groundnut Pods', opacity=0.5\n    )\n\n]\n\n\nlayout = go.Layout(\n    barmode='stack',\n    title='Least Popular Commodities and their Purchase District',\n    yaxis=dict(\n        title='Quintals_Purchased'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"popular_commodity\")","4f718487":"df6 = apmc\ndf6_a = pd.DataFrame(df6.groupby(['Commodity', 'district_name']).agg('mean')).reset_index()","087eda8a":"Commodity = 'Maize'\n\ntrace00 = go.Scatter(\n    x= df6_a.loc[df6_a['Commodity'] == Commodity].district_name,\n    y= df6_a.loc[df6_a['Commodity'] == Commodity].max_price,\n    mode = 'lines+markers',\n    line = dict(\n        color = ('rgb(22, 96, 167)'),\n        width = 2,\n        dash = 'dot'),\n    name = 'Price_MAX', \n    opacity=0.5\n)\n\ntrace01 = go.Scatter(\n    x= df6_a.loc[df6_a['Commodity'] == Commodity].district_name,\n    y= df6_a.loc[df6_a['Commodity'] == Commodity].modal_price,\n    mode = 'lines+markers',\n    line = dict(\n        color = ('Red'),\n        width = 2),\n    name = 'Price_MODE',\n    opacity=1.0\n)\n\ntrace02 = go.Scatter(\n    x= df6_a.loc[df6_a['Commodity'] == Commodity].district_name,\n    y= df6_a.loc[df6_a['Commodity'] == Commodity].min_price,\n    mode = 'lines+markers',\n    line = dict(\n        color = ('rgb(22, 96, 167)'),\n        width = 2,\n        dash = 'dot'),\n    name = 'Price_MIN', \n    opacity=0.5\n)\n\ntrace03 = go.Bar(\n    x= df6_a.loc[df6_a['Commodity'] == Commodity].district_name,\n    y= df6_a.loc[df6_a['Commodity'] == Commodity].arrivals_in_qtl,\n    name = 'Quantity', \n    opacity=0.2,\n    yaxis='y2'\n)\n\n\ndata = [trace00, trace01, trace02, trace03]\n\n    \n\nlayout = go.Layout(\n    legend=dict(orientation=\"v\"),\n    \n    title='Price Range Chart district-wise',\n    yaxis=dict(\n        title='Price per Quintal'\n    ),\n    yaxis2=dict(\n        title='Average_Quintal',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"popular_commodity\")","5548dae7":"df7 = apmc\ndf7_a = df7.loc[df7['Commodity'].isin(['CASTOR SEED','LEAFY VEGETABLE', 'Baru Seed', 'Jui', 'Papnas', 'MUSTARD', \n                                           'SARSAV', 'Terda','GOATS', 'Kalvad', 'Peer', 'NOLKOL', 'Plum',\n                                          'GROUNDNUT PODS (WET)', 'Karvand', 'He Buffalo'])]\n\ndf7_a= df7_a[[ 'Year', 'date' , 'arrivals_in_qtl', 'modal_price', 'min_price', 'max_price', 'Total_Market_Price' ]]\n\nsns.set(style=\"white\")\n\n# Generate a large random dataset\nd = df7_a\n\n# Compute the correlation matrix\ncorr = d.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","1c343f7b":"df7_b = df7.loc[df7['Commodity'].isin(['Onion', 'Soybean','Potato', 'Cotton', 'Rice(Paddy-Hus)'])]\n\ndf7_b= df7_b[[ 'Year', 'date' , 'arrivals_in_qtl', 'modal_price', 'min_price', 'max_price', 'Total_Market_Price' ]]\n\nsns.set(style=\"white\")\n\n# Generate a large random dataset\nd = df7_b\n\n# Compute the correlation matrix\ncorr = d.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","da578592":"df8 = apmc\ndf8 = df8.loc[df8['district_name'].isin(['Mumbai','Sangli', 'Wardha', 'Pune', 'Thane', 'Wasim', 'Nasik','Yewatmal', 'Gondiya'])]\ndf8_a = pd.DataFrame(df8.groupby(['district_name', 'Month']).agg('mean')).reset_index()","c9f920aa":"a4_dims = (15, 8.27)\nfig, ax = pyplot.subplots(figsize=a4_dims)\n\n# sns.set(style=\"whitegrid\")\np = sns.violinplot(ax = ax,\n                   data=df8_a,\n                   x = 'district_name',\n                   y = 'Total_Market_Price', bw=0.5, saturation = 1.25, width = 1.1\n                   )\nplt.show()","a8af82d5":"df5 = apmc\ndf5 = df5.loc[df5['Commodity'].isin(['Pigeon Pea (Tur)'])]\ndf5 = pd.DataFrame(df5.groupby(['date']).agg('mean')).reset_index()\ndf5 = df5 [['date', 'modal_price']]\ndf5.tail()","5018e887":"\ntrace00 = go.Scatter(\n    x= df5.date,\n    y= df5.modal_price,\n    mode = 'lines+markers',\n)\n\nlayout = go.Layout(\n    title='Pigeon_Pea Prices across the month'\n)\n\ndata = [trace00]\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"popular_commodity\")","68186aec":"#Preparing the dataset:   \n\ndf5.to_csv('forecast_APMC.csv')\n# df5.dtypes # our datatypes for date column is in objects, we shall convert it to datetime \ndateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m')\n\ndf5 = pd.read_csv('forecast_APMC.csv', parse_dates=['date'], index_col='date',date_parser=dateparse) # indexed the date column\ndf5 = df5[['modal_price']]\ndf5.head()","953ba640":"ts = df5\nticks = ts.loc[:, ['modal_price']]\nupsampled = ticks.modal_price.resample('7D', how = 'last') # upsampling it to weekly data points\ninterpolated = upsampled.interpolate(method='spline', order=2) # for more smoothened curve values. \n# print(interpolated )\nplt.plot(interpolated, color='red', label = 'Interpolated weekly data')\nplt.plot(ts, color='green', label = 'Original Monthly data')\nplt.show()","88efcc34":"# split into train and test sets\n \nstart_train = 0          # add variable integer for location of data points for start of training\nend_train = 100          # add variable integer for location of data points for end of training\nstart_test = 100        # add variable integer for location of data points for start of testing\nend_test = 112          # add variable integer for location of data points for end of testing\n\nX = interpolated\n\ntrain, test = X[start_train:end_train], X[start_test:end_test]\n# train, test = train_test_split(interpolated, test_size=0.2)       # splitting into train and test\nhistory = [interpolated for interpolated in train]                  # creating a historical memory bin\npredictions_forecast = list()                                    # creating an empty list for prediction forecasts\npredictions_CI = list()                                          # creating an empty list for 95% Confidence Intervals\npredictions_STD = list()  \n\ntest = test.tolist()    # converting test to list...\ntrain_list = train.tolist()  # converting train to list...","4f7471b2":"# walk-forward validation\nfor t in range(len(test)):\n\t# fit model\n\tmodel = ARIMA(history, order=(2,1,2)) # ideal order is taken from the AIC test above\n\tmodel_fit = model.fit()\n\n# one step forecast\n# \tyhat = model_fit.forecast()[0]\n\tforecast, stderr, conf = model_fit.forecast(steps = 1, alpha = 0.05) \n\n# store forecast and ob\n\tpredictions_forecast.append(forecast)\n\tpredictions_STD.append(stderr)\n\tpredictions_CI.append(conf)\n\thistory.append(test[t])","4b8f64f9":"residual_error = [predictions_forecast-test for predictions_forecast,test in zip(predictions_forecast,test)]\nplt.plot(residual_error, color='orange', label='Residual Errors')","5e5943f6":"# plot forecasts against actual outcomes\nplt.figure(figsize=(8,4))\nplt.plot(test, color = 'blue', label = 'Test Data')\nplt.plot(predictions_forecast, color='red' , label='Predicted Data')\n\nplt.grid(True)\nplt.xticks(rotation=90)\nplt.xlabel(\"Units\")\nplt.ylabel(\"Power Demand (kW)\")\n# plt.ylim(ymin=0)\nplt.legend()\nplt.show()","4dd18a63":"# data curating\nprophet_data = pd.read_csv('forecast_APMC.csv', parse_dates=['date'], index_col='date', date_parser=dateparse)\nprophet_data =  prophet_data[[ 'modal_price']]\n# prophet_data.tail()","6075bfa0":"#UPSAMPLING\nticks = prophet_data.loc[:, ['modal_price']]\nupsampled = ticks.modal_price.resample('D', how = 'last') # upsampling it to daily data points\ndata = upsampled.interpolate(method='spline', order=2) # for more smoothened curve values. \n# print(interpolated )\ndata.plot()\nplt.show()","861f1491":"data=data.reset_index()\ndata = data[['date', 'modal_price']]\ndata.tail()","fcc8fd50":"# Prophet requires columns ds (Date) and y (value)\nprc = data.rename(columns={'date': 'ds', 'modal_price': 'y'})","b7347cb1":"# Make the prophet model and fit on the data\nprc_prophet = fbprophet.Prophet(changepoint_prior_scale=0.90, seasonality_prior_scale = 0.99) # keeping High sensitivity to seasonal variability and changing points\nprc_prophet.fit(prc) ","ff8f5c67":"# Make a future dataframe for next 90 days (3 months)\nprc_forecast = prc_prophet.make_future_dataframe(periods=90, freq= \"d\") \n# Make predictions\nprc_forecast = prc_prophet.predict(prc_forecast)","172bd568":"prc_forecast = prc_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(n=90) \nprc_forecast.tail()\n\n# yhat --> forecasted Modal Price\n# yhat_lower and yhat_upper --> forecasted 95% confidence interval range of modal price","f643c5da":"prc_prophet.plot(prc_forecast, xlabel = 'Date', ylabel = 'Commodity_Price')\nplt.ylim(ymin=0);\nplt.title('Price Predictions');","80b16169":"### <font color='green'>4. Price versus Demand Seasonality<\/font> : \n#### To check the effect of seasonality in Modal Price as well as Volume purchased","ba1e1614":"### <Font color = 'Green'> 5. District Versus Least Popular Commodity <\/font> : \n#### This will help us identify the district which purchased least popular commodities over this period.","83c6fffa":"### <font color='green'>3. Market Share by Disctrict<\/font> : \n#### In order to look which district has generated the maximum market share in these two years","ef0921ad":"*Feature 4:*","91b40fba":"**Selecting the bottom Selling Commodity in term of < 100  Quintals purchased over 2 years span**","9eaa308a":"### <Font Color ='Green'> 6. Price range of a Commodity V\/S Districts <\/Font> : \n#### To Identify the districts with highest and lowest price ranges for a particular Commodity","a733d2ae":"### 1. ARIMA Forecast Model","c6978a21":"## Exploratory Data Analysis (EDA)\n\n\n### <font color='green'>1. Total Consumption (in 3 years) v\/s Commodity<\/font> : \n#### In order to look which commodity has sold the maximum over the years this plot is generated.","00a3c262":"# Price Forecasting Model\n\n\n---------------------------\n\n\n<font color = 'Blue'> Two Forecast models have been created:<\/font>\n\n1. AR-I-MA    : Based on regression and moving average \n\n2. FbProphet  : Based on Bayesian fourier series \n\n---------------------------\n\n<font color = 'Blue'>In order to forecast the price of an item 3 month ahead, following steps has been performed:<\/font>\n\n<font color = 'red'>Step 1:<\/font> Curate the dataset \n<font color = 'red'>Step 2:<\/font> Up-Sample the dataset\n<font color = 'red'>Step 3:<\/font> Check for Stationarity\n<font color = 'red'>Step 4:<\/font> Check for trend\n<font color = 'red'>Step 5:<\/font> Use modeling equations\n","1fdaf022":"*Feature 1:*","045d85b2":"*Feature 3:*","0d467586":"<font color = 'blue'> Here we can see that the commodity price has increased over the period and then decreased recently. However, overall there has been some growth. <\/Font>\n\nBefore we move into forecasting lets check the seasonality of this data. ","22fe54d0":"** Curating Dataset according to the model checks and needs:**\n\n> --> For our testing purpose Pigeon Pea has been selected as our test case.","9ba47ca5":"**Plot Residual Error**","9a637525":"##### Note:\n\nFrom this model we can get the upper and lower bound rages. However, it is to be seen that the 95% confidence interval becomes weak exponentially as the number of days increases.","2e4f52c0":"------------------------------","374d15f7":"\n\n**Instructions to access Graphs:**\n    1. Dis-select all the legend boxes by single left clicking on each one of them.\n    2. Now select Individual 'Crop' and The 'Crop_Price' by single left clicking them and compare \n\n\n\n\n<font color='blue'>Lets look into the graph:<\/font>\n    \n    1. Maize, Cotton, Soybean, Pigeon Pea are winter crops so their demands are higher in the winter months (NOV to FEB) -\n           There is no particular co-relation between the price and the amount purchased for both crops\n        \n    2. Methi (Bhaji) has interestingly dropped its demands in the year 2016 -\n           There is a negative co-relation between Price and Demand ( As price Increases,  Demand Decreases)\n        \n    3. Onion has seen a steep drop in demand in the month of Aug - Nov 2015 , owing to the high price increase - \n           There is a negative co-relation between Price and Demand ( As price Increases,  Demand Decreases)\n        \n    4. Potato does not show any particular seasonal trend in its demand. However, over the time the demand has increased.\n           There is a negative co-relation between Price and Demand ( As price Increases,  Demand Decreases)\n        \n    5. Rice has no particular seasonal trend. However, over the time, the demand has significantly grown.\n           There is no co-relation between the price and demand for this crop.\n        \n    6. Tomato has no seasonal Trend.\n           There is a negative co-relation between Price and Demand ( As price Increases,  Demand Decreases) ","dfbdf4a5":"### <font color='green'>8. District versus total market price(Monthly Pattern) <\/font> : \n#### To identify if there is any monthly pattren of total market price distribution for the top performing districts .","7529cbf2":"From the graph above, the <font color = 'green'> green <\/font> line plot is the original monthly data and the <font color = 'red'> red <\/font> line is the upsampled weekly data plot. \n\nThe weekly data (red line) is more smoother as there are more number of interpolated data points. Now we have the number of data points = 113","fd7135d8":"**Plotting the basic price variability with monthly data**","6db88606":"#### Lets plot the seasonal variability of the price and quantity for these commodities","eff4cdb6":"**Forecasted versus Original Data Plot**","12bc8221":"*Forecasting Model*","7d7fd9af":"** About the Raw Data:**","53930678":"*Forecast*","532f7add":" Lets sort the top 10 selling Commodities and check their seasonal variability","2246d7de":"<font color='blue'>\n**Instructions to access Graphs:**<\/font>\n<br>\n<font color='blue'>    \n    1. In the commodity Section type any Commodity name as per your choice (by default it is Onion)<\/font>\n<font color='blue'>     \n    2. Run the code snippet <\/font>\n\n<br>\n\n*Lets look into the graph:*\n    \n   1. For Onion (The most widely sold product, there is inconsistency in average prices across the districts. Onions are heavily costly in <Font Color = 'Red'> Jalna <\/font>.\n   \n   2. For Maize the cheapest price available is in <Font Color = 'Red'> Wasim <\/font>.\n   \n           \n           \nHowever, for all the commodities , there is no particular co-relation between the price each district and the demand. (It might be more clear if the economics is broken down, but the data is not available for that)\n    ","93144c09":"#### Note:\n\nComparing the second Image from the first one we can see that there is a striking difference in co-relation between \n Quantity and Modal Prices. \n \nFor Top Performimng Commodities these fators are weakly corelated. Which is not the same case for least purchased commodities.\n \nIs it because there are very less datapoints or scattered datapoints for the former?? (May be!!)","627f6ba8":"#### UP Sampling\n\n\n\n<font color = 'Blue'> Need to upsample to weekly data from monthly since we have only 26 datapoints and we need atleast 100 points to perform ARIMA forecast <\/font>","9fab98aa":"##### Note:\n\nWe can see that the residual error is mostly positive indicating that the model has over predicted most of the times, although by a small margin.","ec3a8b2a":"### <font color='green'>7. Co-relation Check <\/font> : \n#### To check if any of the attributes are heavily corelated with other : \n\n##### a. for Most popular Commodities (top 5) \n##### b. for Least popular Commodities (bottom 10)","669203cc":"*Model Fitting*","8f340c14":"One interesting thing to be noted here is that all the meat products like <font color='green'> Buffalo, Sheep, Goat, skin & Bones <\/font> are all under 100 quintals in 2 years. This infers that there is some strict regulation In the state , in terms of purchasing meat products.","417c16fe":"Here, we can see that 'Pune' has the maximum number of 'Least Popular' commodities <Font Color = 'Blue'> (Less than 10 Quintals) <\/Font> being purchased. Interestingly, Mumbai,Wardha, Sangli which has the top 3 market share does not surface in this list at all!","eab08e1c":"Wooah! The dataset seems to be clean in terms of No-Missing values!!","3c4a6c0c":"From the plot above we can see that the <font color='red'>Onion<\/font> is by far the most produced or popular Commodity in Maharashtra followed by <font color='red'>Soybean, Potato, Coriander, Cotton, Rice and Tomato<\/font>\n\nHowever, the onion is purchased more than 100 Million Quintals in 2 years span(Oct 2014 - Oct 2016)!!\n\nLets now check which commodities fare bad in terms of Quintals purchased. For simplification all the commodities less than 100 Quintals of purchase between (Oct 2014 - Oct 2016) is plotted","a9e0061d":"###  <Font color = 'red' >ARIMA Forecasting Model <\/font>","a2c18d46":"Auto Regression- Integrated- Moving Average is a model that incorporates future, past and seasonal variability of a data in modeling the forecasted value of a dataset,\n\nARIMA is a commomnly used timeseries forecast model in the industry today and is approached due to its robustness in terms of detecting seasonality.","adf1f98a":"<font color='red'>Mumbai <\/font> has the most market share for all the three years, followed by Sangli and Wardha.","19df7500":"**Curated and upsampled Data**","200c83a7":"From the description above can see that the dataset contains 3 years of data from 2014, 2015 and 2016, with 62,429 data points. However, lets check if there is any missing values.","ee35d922":"*Test-Train Split*","57d9a325":"**Read and Print Raw Data**","70ad5e47":"### 2. FbProphet Model","fe0419af":"Libraries Used:","8b2fd834":"### <font color='green'>2. Most Popular and Least Popular Commodity<\/font> : \n#### In order to look which commodity has sold the maximum and minimum over the years this plot is generated.","88235d5b":"*Feature 2*","afd5da1b":"#### Note:\nFrom the above graph we can say that the average market price over the months from top performing districts :\n\n1. Nasik, Pune, Thane have high seasonal market cap.\n2. Wasim has the mean price of the commodities on higher band in most of the months.\n3. Yewatmal, Gondiya  has the mean price of the commodities on lower band in most of the months.\n4. Mumbai, Sangli and Wardha has their mean market price evenly distributed across the months."}}