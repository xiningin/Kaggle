{"cell_type":{"cd5598e3":"code","fd8f828a":"code","e679a8ce":"code","bd0b6dd5":"code","cd81c000":"code","fd1401b4":"code","78214cde":"code","453fbe4b":"code","387e9221":"code","6b1c7678":"code","d544c351":"code","3aa19e13":"markdown","996aa974":"markdown","4f130209":"markdown","dca8b397":"markdown","aa577c4e":"markdown","eb01b27c":"markdown","7bef0871":"markdown","2786c8f2":"markdown","15a3d5e7":"markdown"},"source":{"cd5598e3":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Path of the file to read\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\nfeature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[feature_columns]\n\n# Specify Model\niowa_model = DecisionTreeRegressor()\n# Fit Model\niowa_model.fit(X, y)\n\nprint(\"First in-sample predictions:\", iowa_model.predict(X.head()))\nprint(\"Actual target values for those homes:\", y.head().tolist())\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex4 import *\nprint(\"Setup Complete\")","fd8f828a":"# Import the train_test_split function and uncomment\nfrom sklearn.model_selection import train_test_split\n\n# fill in and uncomment\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1)\n\n# Check your answer\nstep_1.check()","e679a8ce":"# The lines below will show you a hint or the solution.\n# step_1.hint() \nstep_1.solution()\n","bd0b6dd5":"# You imported DecisionTreeRegressor in your last exercise\n# and that code has been copied to the setup code above. So, no need to\n# import it again\n\n# Specify the model\niowa_model = DecisionTreeRegressor(random_state = 1)\n\n# Fit iowa_model with the training data.\niowa_model.fit(train_X, train_y)\n\n# Check your answer\nstep_2.check()","cd81c000":"# step_2.hint()\nstep_2.solution()","fd1401b4":"# Predict with all validation observations\nval_predictions = iowa_model.predict(val_X)\n\n# Check your answer\nstep_3.check()","78214cde":"# step_3.hint()\nstep_3.solution()","453fbe4b":"# print the top few validation predictions\nprint(val_predictions[:5])\n# print the top few actual prices from validation data\nprint(train_y.head())","387e9221":"# The model will appear accurate if the model is given \"in-sample\" training data.\n\n# But if this pattern doesn't hold when the model sees new data, the model would be very inaccurate when used in practice.\n\n# Since models' practical value come from making predictions on new data, we measure performance on data that wasn't used \n# to build the model. The most straightforward way to do this is to exclude some data from the model-building process, and \n# then use those to test the model's accuracy on data it hasn't seen before. This data is called validation data.\n","6b1c7678":"from sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(val_y, val_predictions)\n\n# uncomment following line to see the validation_mae\nprint(val_mae)\n\n# Check your answer\nstep_4.check()","d544c351":"# step_4.hint()\nstep_4.solution()","3aa19e13":"# Exercises\n\n## Step 1: Split Your Data\nUse the `train_test_split` function to split up your data.\n\nGive it the argument `random_state=1` so the `check` functions know what to expect when verifying your code.\n\nRecall, your features are loaded in the DataFrame **X** and your target is loaded in **y**.\n","996aa974":"Is that MAE good?  There isn't a general rule for what values are good that applies across applications. But you'll see how to use (and improve) this number in the next step.\n\n# Keep Going\n\nYou are ready for **[Underfitting and Overfitting](https:\/\/www.kaggle.com\/dansbecker\/underfitting-and-overfitting).**\n","4f130209":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161285) to chat with other Learners.*","dca8b397":"## Step 2: Specify and Fit the Model\n\nCreate a `DecisionTreeRegressor` model and fit it to the relevant data.\nSet `random_state` to 1 again when creating the model.","aa577c4e":"What do you notice that is different from what you saw with in-sample predictions (which are printed after the top code cell in this page).\n\nDo you remember why validation predictions differ from in-sample (or training) predictions? This is an important idea from the last lesson.\n\n## Step 4: Calculate the Mean Absolute Error in Validation Data\n","eb01b27c":"Inspect your predictions and actual values from validation data.","7bef0871":"**This notebook is an exercise in the [Introduction to Machine Learning](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/dansbecker\/model-validation).**\n\n---\n","2786c8f2":"## Step 3: Make Predictions with Validation data\n","15a3d5e7":"## Recap\nYou've built a model. In this exercise you will test how good your model is.\n\nRun the cell below to set up your coding environment where the previous exercise left off."}}