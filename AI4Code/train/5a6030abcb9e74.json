{"cell_type":{"c92abb0b":"code","143bd0bf":"code","0c80af14":"code","e2b17b19":"code","8c944f71":"code","c1406740":"code","fe925bb8":"code","a457a3ad":"code","4d8d346e":"code","49006a73":"code","76243200":"code","4335dcba":"code","9a37bd08":"code","8a933970":"code","03f87b24":"code","1b1b2bc9":"code","83269c76":"code","1ad46c57":"code","824abe1b":"markdown","67f3b7a8":"markdown","39cb8c5d":"markdown","05c72b91":"markdown","a6657162":"markdown","115c794b":"markdown","244e8962":"markdown","a30ba7da":"markdown","0a6ecb89":"markdown","41a4f498":"markdown","88100474":"markdown","c7940e8d":"markdown","7c53fbf8":"markdown","803fefce":"markdown","6454cc1a":"markdown","a7c52900":"markdown","93254116":"markdown","00e4cfd0":"markdown"},"source":{"c92abb0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","143bd0bf":"parasitized = os.listdir(\"..\/input\/cell_images\/cell_images\/Parasitized\")\nuninfected = os.listdir(\"..\/input\/cell_images\/cell_images\/Uninfected\")","0c80af14":"parasitized.remove(\"Thumbs.db\")\nuninfected.remove(\"Thumbs.db\")","e2b17b19":"parasitized_images = []\nfor p in parasitized:\n    img = Image.open(\"..\/input\/cell_images\/cell_images\/Parasitized\/\"+p)\n    img = img.resize((50,50))\n    parasitized_images.append(img)\n\nuninfected_images = []\nfor u in uninfected:\n    img = Image.open(\"..\/input\/cell_images\/cell_images\/Uninfected\/\"+u)\n    img = img.resize((50,50))\n    uninfected_images.append(img)","8c944f71":"rndm = np.random.randint(len(parasitized_images)-1,size = 10)\nplt.figure(1, figsize=(15,7))\nfor i in range(1,11):\n        plt.subplot(2,5,i)\n        if i < 6:\n            plt.imshow(parasitized_images[rndm[i-1]])\n            plt.axis(\"off\")\n            plt.title(\"Parasitized\")\n        else:\n            plt.imshow(uninfected_images[rndm[i-1]])\n            plt.axis(\"off\")\n            plt.title(\"Uninfected\")","c1406740":"x_array = np.empty((len(parasitized_images)+len(uninfected_images), 50, 50, 3))\nx_array = x_array.astype(int)","fe925bb8":"index = 0\nfor i in range(x_array.shape[0]):\n    if i < len(parasitized_images):\n        x_array[i] = np.array(parasitized_images[i])\n    else:\n        x_array[i] = np.array(uninfected_images[index])\n        index += 1","a457a3ad":"y_array = np.append(np.ones(len(parasitized_images)), np.zeros(len(uninfected_images)))","4d8d346e":"from keras.utils.np_utils import to_categorical\ny_array = to_categorical(y_array, num_classes = 2)","49006a73":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_array, y_array, random_state = 42, test_size = 0.1)\nprint(\"x_train shape: \",x_train.shape)\nprint(\"x_test shape: \",x_test.shape)\nprint(\"y_train shape: \",y_train.shape)\nprint(\"y_test shape: \",y_test.shape)","76243200":"plt.imshow(x_train[1991])\nplt.axis(\"off\")\nplt.title(\"Sample\")\nplt.show()","4335dcba":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu', input_shape = (50,50,3)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation = \"softmax\"))","9a37bd08":"model.compile(optimizer = \"Adam\" , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","8a933970":"epochs = 20\nbatch_size = 32","03f87b24":"datagen = ImageDataGenerator(\n        featurewise_center=False,\n        samplewise_center=False,\n        featurewise_std_normalization=False,\n        samplewise_std_normalization=False,\n        zca_whitening=False,\n        rotation_range=0.5,\n        zoom_range = 0.5,\n        width_shift_range=0.5,\n        height_shift_range=0.5,\n        horizontal_flip=False,\n        vertical_flip=False)\n\ndatagen.fit(x_train)","1b1b2bc9":"history = model.fit(x_train,y_train,epochs=epochs, batch_size=batch_size)","83269c76":"plt.plot(history.history['acc'], color='r', label=\"accuracies\")\nplt.title(\"Train Accuracies\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","1ad46c57":"print(\"Test accuracy: {} %\".format(round(model.evaluate(x_test,y_test)[1]*100,2)))","824abe1b":"We can see what parasitized and uninfected cells looks like below.","67f3b7a8":"When I create y label, I will consider parasitized as 1 and uninfected as 0.","39cb8c5d":"# 1. Introduction\n\n![](http:\/\/www.wikizero.biz\/index.php?q=aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy82LzY5L01hbGFyaWFfUGFyYXNpdGVfQ29ubmVjdGluZ190b19IdW1hbl9SZWRfQmxvb2RfQ2VsbF8lMjgzNDAzNDE0MzQ4MyUyOS5qcGc)\n\nMalaria is a mosquito-borne infectious disease that affects humans and other animals. Malaria causes symptoms that typically include fever, tiredness, vomiting, and headaches. In severe cases it can cause yellow skin, seizures, coma, or death. Symptoms usually begin ten to fifteen days after being bitten by an infected mosquito. If not properly treated, people may have recurrences of the disease months later. In those who have recently survived an infection, reinfection usually causes milder symptoms. This partial resistance disappears over months to years if the person has no continuing exposure to malaria.\n\nSource: wikipedia.com","05c72b91":"Now we have all image names in \"parasitized\" and \"uninfected\" lists. But images don't have same pixel rates. We need to resize all pictures and I choose 50x50 for this kernel.","a6657162":"# 2. Importing Libraries\n\nI used pyplot from matplotlib for showing test results, Pillow(PIL) library for manipulating images.","115c794b":"I removed \"Thumbs.db\" filenames from our parasitized and uninfected lists. If not, next processes will be broken due to wrong file extension.","244e8962":"# 8. Conclusion\n\nWhen we test our model with test data we hit nearly 95% accuracy. So we can say CNN method with this dataset succesful.\n\nDays before I hit nearly 60% test accuracy with Logistic Regression method. Also with ANN algorithm mean accuracy with this method was 65%.\n\nFrom here we could say CNN is the better method when processing images.\n\nThank you for reading this Kernel. I hope you enjoyed it.","a30ba7da":"Now we have to create x(pixels) and y(class) axis for each images. For x labels we need (27558(total sample), 50(horizontal pixel qty), 50(vertical pixel qty), 3(RGB)) array.\nAlso for Keras, we should feed models with integers if we want to implement RGB images.","0a6ecb89":"# 5. Creating CNN Model with Keras","41a4f498":"# 7. Test Model","88100474":"# Contents\n\n1. Introduction\n\n2. Importing Libraries\n\n3. Reading and Manipulating Data\n\n4. Creating x and y Labels\n\n5. Creating CNN Model with Keras\n\n6. Applying CNN Model\n\n7. Test Model\n\n8. Conclusion","c7940e8d":"There is two different folders named uninfected and parasitized. I took file names from each folder with below code.","7c53fbf8":"Filling empty numpy array with image values.","803fefce":"We trained our model with train datas. Now time to test our model.","6454cc1a":"# 4. Creating x and y Labels","a7c52900":"# 3. Reading and Manipulating Data","93254116":"Split data for train and test with sklearn library.","00e4cfd0":"# 6. Applying CNN Model"}}