{"cell_type":{"495e5e8c":"code","7093de97":"code","d28191d5":"code","17e4cbd6":"code","da4c1012":"code","4fabfd52":"code","4db6262b":"code","8de62261":"code","97785e94":"code","8e87ca01":"code","d43e958f":"code","ba402a7c":"code","6a81c8e0":"code","513a10ab":"code","7b8fe8cf":"code","2d901da7":"code","6c761098":"code","a818e4c8":"code","a670c698":"code","b46ccaf7":"code","9e88e149":"code","2afd32d7":"markdown","c02b5849":"markdown","46f2ab3e":"markdown","018404ec":"markdown","d1224f85":"markdown","57eed754":"markdown","25fea2f8":"markdown","e21b3328":"markdown","fb1eef3c":"markdown","f94632c1":"markdown","e3600988":"markdown","627fe453":"markdown","8e5c4914":"markdown"},"source":{"495e5e8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7093de97":"import pandas as pd\nimport plotly.express as px\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nfrom geopy.geocoders import Nominatim\nimport folium\nfrom branca.element import Figure\nimport time\nimport ipywidgets as widgets\napp = Nominatim(user_agent=\"tutorial\")","d28191d5":"# Loading the data\ndf = pd.read_csv('\/kaggle\/input\/bristol-airbnb-data\/listings (2).csv')\ndf.head()","17e4cbd6":"df.tail()","da4c1012":"print(df.dtypes)\nprint(\"-----------------------\")\nprint(\"shape of the data\" + str(df.shape))\n","4fabfd52":"# drop irrelavent coloumns\ndf = df.drop(['id','host_id','neighbourhood_group'],axis=1)","4db6262b":"# find the missing the values\nfor col in df.columns:\n    percent_missing = np.mean(df[col].isnull())\n    print('{} - {}%'.format(col,percent_missing))","8de62261":"# filling the missing values\ndf['last_review'] = df['last_review'].fillna(0)\ndf['reviews_per_month'] = df['reviews_per_month'].fillna(0)","97785e94":"df.head(5)","8e87ca01":"print(df.isnull().sum())","d43e958f":"fig = px.bar(df, x=df['room_type'].value_counts().keys(), y=df['room_type'].value_counts(), labels=dict(x=\"Room Type\", y=\"Number of rooms\",width=800, height=400), title=\"\")\nfig.update_layout(title_text='Number Of room for each type', title_x=0.5)\nfig.update_xaxes(type='category')\n# Customize aspect\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.show()","ba402a7c":"# mean,min,max room type and prices\nminimum_room_price = df.groupby([\"room_type\"])[\"price\"].min()\nmaximum_room_price = df.groupby(['room_type'])['price'].max()\navg_room_price = df.groupby(['room_type'])['price'].mean()\nfig = go.Figure(data=[\n    go.Bar(name='Minimum Price', x=minimum_room_price.keys(), y=minimum_room_price.values, marker=dict(color='rgba(52, 152, 219,0.6)')),\n    go.Bar(name='Maximum Price', x=maximum_room_price.keys(), y=maximum_room_price.values, marker=dict(color='rgba(230, 126, 34,0.6)')),\n    go.Bar(name='Average Price', x=avg_room_price.keys(), y=avg_room_price.values, marker=dict(color='rgba(243, 156, 18,0.6)')),\n\n])\nfig.update_layout(title_text='Room type vs Price', title_x=0.5, xaxis_title=\"Room type\",\n    yaxis_title=\"Price (\u00a3)\",)\n\nfig.update_xaxes(type='category')\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","6a81c8e0":"df.head()","513a10ab":"a = df.groupby(['room_type'])['neighbourhood']\nb = pd.DataFrame(a)\nb","7b8fe8cf":"fig = go.Figure(data=[\n    go.Bar(name='Entire home\/apt', x=b[1][0].value_counts().index, y=b[1][0].value_counts(), marker=dict(color='rgba(52, 152, 219,0.6)')),\n    go.Bar(name='Hotel room', x=b[1][1].value_counts().index, y=b[1][1].value_counts(), marker=dict(color='rgba(230, 126, 34,0.6)')),\n    go.Bar(name='Private room', x=b[1][2].value_counts().index, y=b[1][2].value_counts(), marker=dict(color='rgba(243, 156, 18,0.6)')),\n    go.Bar(name='Shared room', x=b[1][3].value_counts().index, y=b[1][3].value_counts(), marker=dict(color='rgba(211, 84, 0,0.6)')),\n\n\n])\nfig.update_layout(title_text='Neighbourhood vs Room Types', title_x=0.5, xaxis_title=\"Neighbourhood\",\n    yaxis_title=\"Number of rooms\",)\n\nfig.update_xaxes(type='category')\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","2d901da7":"mini = df.groupby(['neighbourhood'])['price'].min()\nmaxi = df.groupby(['neighbourhood'])['price'].min()\navg = df.groupby(['neighbourhood'])['price'].mean()\n\nfig = go.Figure(data=[\n    go.Bar(name='Minimum Price', x=mini.keys(), y=mini.values, marker=dict(color='rgba(52, 152, 219,0.6)')),\n    go.Bar(name='Maximum Price', x=maxi.keys(), y=maxi.values, marker=dict(color='rgba(230, 126, 34,0.6)')),\n    go.Bar(name='Average Price', x=avg.keys(), y=avg.values, marker=dict(color='rgba(243, 156, 18,0.6)')),\n\n])\nfig.update_layout(title_text='Neighbourhood vs Price', title_x=0.5, xaxis_title=\"Neighbourhood\",\n    yaxis_title=\"Price (\u00a3)\",)\n\nfig.update_xaxes(type='category')\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","6c761098":"def get_location_by_neighbourhood(neighbourhood):\n    \"\"\"This function returns a location as raw from an address\n    will repeat until success\"\"\"\n    time.sleep(1)\n    try:\n        return app.geocode(neighbourhood + ', Bristol').raw\n    except:\n        return get_location_by_neighbourhood(neighbourhood + ', Bristol')","a818e4c8":"location = widgets.Dropdown(\n    options=df['neighbourhood'].unique() ,\n    value='Windmill Hill',\n    description='Neighbourhood:',\n    disabled=False,\n)","a670c698":"location","b46ccaf7":"neighbourhood = location.value\nloc = get_location_by_neighbourhood(neighbourhood)\nlatitude = loc[\"lat\"]\nlongitude = loc[\"lon\"]\nprint(f\"{latitude}, {longitude}\")","9e88e149":"# Creating Basemap\nfig3=Figure(width=1300,height=800)\nm3=folium.Map(location=[latitude, longitude],tiles='cartodbpositron',zoom_start=11)\nfig3.add_child(m3)\n\n#Adding markers to the map\nfor i in range(len(df['latitude'])):\n    if str(df['neighbourhood'][i]) == location.value:\n        folium.Marker(location=[df['latitude'][i],df['longitude'][i]],popup=df['room_type'][i],tooltip=df['neighbourhood'][i]+\" \"+ \"\u00a3\" +str(df['price'][i])).add_to(m3)\n\n\nm3","2afd32d7":"* [Libraries](#step1)\n* [Data Preprocessing](#step2)\n    - [Finding the dtypes](#step2.1)\n    - [Dropping appropriate columns](#step2.2)\n    - [Fining the missing values and replacing the values](#step2.3)\n* [Exploratory Data Analysis](#step3)\n    - [Price vs Room Type](#step3.1)\n    - [Room Type vs Location](#step3.2)\n    - [Location vs Price](#step3.3)\n    - [Location](#step3.4)\n* [Machine learning Recommondation System](#step4)","c02b5849":"<h2 style=\"color:#3498db;\">Price vs Room Type<\/h2> <a id=step3.1> <\/a>","46f2ab3e":"<h2 style=\"color:#3498db;\">Location vs Room Type<\/h2> <a id=step3.2> <\/a>","018404ec":"<h1 style=\"color:#3498db;\">Exploratory Data Analysis<\/h1> <a id=step3> <\/a>","d1224f85":"<h2 style=\"color:#3498db;\">Location vs Price<\/h2> <a id=step3.3> <\/a>","57eed754":"<h2 style=\"color:#3498db;\">Dropping appropriate columns<\/h2> <a id=\"step2.2\"> <\/a>","25fea2f8":"<h1 style=\"color:#3498db;\">Libraries<\/h1> <a id=\"step1\"><\/a>\n","e21b3328":"<h2 style=\"color:#3498db;\">Finding the dtypes<\/h2> <a id=\"step2.1\"> <\/a>","fb1eef3c":"## Still Working If you liked it so far, please don't forget to comment and upvote. Thank you!\u00b6\n","f94632c1":"<h1 style=\"color:#3498db;\">Data preprocessing<\/h1> <a id=\"step2\"><\/a>\n\n","e3600988":"<h2 style=\"color:#3498db;\">Location<\/h2> <a id=step3.4> <\/a>","627fe453":"\n<h2 style=\"color:#3498db;\">Finding the missing values and replacing the values<\/h2> <a id=\"step2.3\"> <\/a>","8e5c4914":"<h1 style=\"color:#3498db;\">Machine Learning Recommondation System<\/h1> <a id=step4> <\/a>"}}