{"cell_type":{"1b0d7815":"code","0059c7b5":"code","f73fc8de":"code","bb69f8c2":"code","509807f3":"code","f11e3187":"code","501032d9":"code","ae1acb5b":"code","bb73c115":"code","54243b32":"code","51ff24f3":"code","ae095468":"code","f63763c2":"code","3e064283":"markdown","74375f2c":"markdown","b1e0798c":"markdown","9e6c0c30":"markdown"},"source":{"1b0d7815":"import pandas as pd\n\n#Openning the dataset and setting date as index\ndf = pd.read_csv(\"..\/input\/electric-production\/Electric_Production.csv\")\ndf = df.set_index(\"DATE\")\ndf.index = pd.to_datetime(df.index, format='%d-%m-%Y')\n# df = df.groupby(pd.Grouper(freq='m')).mean()\ndf.info()\ndf.head()","0059c7b5":"import matplotlib.pyplot as plt\n\n#Ploting temperature in Celsius degrees\nprint(\"Number of measurements: \"+str(len(df['Value'])))\ndf.plot(y='Value', rot=25);","f73fc8de":"dftm = df['Value']\nprint(dftm)","bb69f8c2":"import numpy as np\n\n# Spliting the last 2 years for test\ntrain = dftm[:12*27].values\nplt.plot(np.arange(len(train)),train)\ntrain = train.reshape((len(train), 1))\ntest = dftm[12*27:].values\nplt.plot(np.arange(len(train), len(train)+len(test)),test)\ntest = test.reshape((len(test), 1))\n#plt.plot(np.arange(len(df3d)),df3d)","509807f3":"from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n\nlength = 12\ngenerator = TimeseriesGenerator(train,train,length=length, batch_size=1)\nvalidation_generator = TimeseriesGenerator(test,test,length=length, batch_size=1)","f11e3187":"print(train[:length+1])","501032d9":"# Looking some TimeSeriesGenerator results\ni=0\nfor x,y in generator:\n    print(x)\n    print(y)\n    i = i + 1\n    if i == 2:\n        break","ae1acb5b":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense ,SimpleRNN, LSTM, GRU\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n\nmodel = Sequential()\nmodel.add(SimpleRNN(10, activation='relu', input_shape=(length,1)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()","bb73c115":"epochs = 100\nearly_stop = EarlyStopping(monitor='val_loss',patience=10)\nckpt = ModelCheckpoint('model6.hdf5', save_best_only=True, monitor='val_loss', verbose=1)\nhistory = model.fit_generator(\n    generator,\n    steps_per_epoch=len(generator),\n    epochs=epochs,\n    validation_data=validation_generator,\n    callbacks=[early_stop, ckpt])","54243b32":"history_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(5,5))\n#plt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","51ff24f3":"# Load the best model\nmodel.load_weights(\"model6.hdf5\")\n\n# Predicting some days ahead.\ntest_predictions = []\nfirst_eval_batch = train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, 1))\nfor i in range(len(test)):\n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    # store prediction\n    test_predictions.append(current_pred)\n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n#prediction = scaler.inverse_transform(test_predictions)","ae095468":"# Comparing test data and predictions\nplt.plot(np.arange(len(train)), train)\nplt.plot(np.arange(len(train),len(train)+len(test)),test)\nplt.plot(np.arange(len(train),len(train)+len(test)),test_predictions)","f63763c2":"# Calculating the mean squared error\nloss = np.mean(np.square(test[:,0] - np.array(test_predictions)[:,0]), axis=-1)\nprint(\"mse: \"+str(loss))","3e064283":"# Creating the model.","74375f2c":"Openning the dataset with pandas for exploratory analysis.","b1e0798c":"# Loading a dataset\n\nUsando o dataset de electric-production","9e6c0c30":"# Evaluating"}}