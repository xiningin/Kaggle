{"cell_type":{"7e9f7ee2":"code","e98e8fc7":"code","39f8d7de":"markdown","3dd1e8fe":"markdown"},"source":{"7e9f7ee2":"import numpy as np\nfrom sklearn import metrics\n\ndef mse(y_true, y_pred):\n    return metrics.mean_squared_error(y_true, y_pred)\n\ndef rmse(y_true, y_pred):\n    return np.sqrt(metrics.mean_squared_error(y_true, y_pred))\n\ndef mae(y_true, y_pred):\n    return metrics.mean_absolute_error(y_true, y_pred)\n\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred - y_true) \/ y_true)) * 100\n\ndef smape(y_true, y_pred):\n    return 2.0 * np.mean(np.abs(y_pred - y_true) \/ (np.abs(y_pred) + np.abs(y_true))) * 100\n\ndef rmsle(y_true, y_pred):\n    return np.sqrt(metrics.mean_squared_log_error([p if p>=0 else 0 for p in y_pred],[t if t>=0 else 0 for t in y_true]))\n\ny_true = np.array([1.0, 5.0, 4.0, 3.0, 2.0, 5.0, -3.0])\ny_pred = np.array([1.0, 4.5, 3.5, 5.0, 8.0, 4.5, 1.0])\n\n# MSE\nprint(mse(y_true, y_pred)) # 8.107142857142858\n# RMSE\nprint(rmse(y_true, y_pred)) # 2.847304489713536\n# MAE\nprint(mae(y_true, y_pred)) # 1.9285714285714286\n# MAPE\nprint(mape(y_true, y_pred)) # 76.07142857142858\n# SMAPE\nprint(smape(y_true, y_pred)) # 57.76942355889724\n# RMSLE\nprint(rmsle(y_true, y_pred))","e98e8fc7":"##### for xgboost demo rmsle\ndef rmsle_4_xgboost(y_pred, dtrain):\n    y_true = dtrain.get_label()\n    return 'error', rmsle(y_true, y_pred)","39f8d7de":"## Classification","3dd1e8fe":"## Regression"}}