{"cell_type":{"0a51b96b":"code","a483359f":"code","84293cb3":"code","4ddb2821":"code","7c056ad1":"code","1081d454":"code","f0a40d31":"code","43e83942":"code","1edb213c":"code","ef52fc51":"code","ed783be8":"code","a6c7c5e4":"code","5bf188e8":"code","2f09ec4a":"code","fca52050":"code","9e6d837b":"code","ef0ff643":"code","de5d4d94":"code","df85f7fe":"code","2012bcd0":"code","f9aea44c":"code","ac8050ee":"code","7a14cb2a":"code","a5f6bfe1":"code","f5180f51":"code","2e5bbb44":"code","cea72ae3":"code","7e33c8bf":"code","a17088f8":"code","f74b60f6":"code","bb483eb3":"markdown","d5a84150":"markdown","66265637":"markdown","c50a85b3":"markdown","54b37279":"markdown","fccd5cc8":"markdown","4395fbbf":"markdown","b08b78e6":"markdown","31fd55b3":"markdown","21c4cf6c":"markdown","be0cfde9":"markdown","7a7a5727":"markdown","bddfbc42":"markdown","497757b0":"markdown","f4035000":"markdown","380c9cc9":"markdown"},"source":{"0a51b96b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualisation\nimport matplotlib.pyplot as plt\nimport sklearn\n\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report\nfrom sklearn.tree import DecisionTreeRegressor \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n#print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a483359f":"data = pd.read_csv('..\/input\/googleplaystore.csv')\nreviews = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')\ndata.head()\ndata.info()","84293cb3":"data[\"Category\"].unique()\n# found out there is one line which has category of 1.9, the line is distorted, hence removed\ndata = data[data.Category != \"1.9\"]\n","4ddb2821":"# Installs need to be removed + to be able to be summed up.\ndef clean(x):\n    x = str(x).replace(\"+\", \"\").replace(\",\", \"\")\n    return int(x)\ndata[\"Installs\"] = data[\"Installs\"].apply(clean)","7c056ad1":"# get the year\ndata['Last Updated'] = data['Last Updated'].str[-4:]\ndata['Last Updated'].apply(lambda x: int(x))\ndata['Last Updated'].describe()","1081d454":"# convert Size to MB, fill varies with devices by mean of the column.\ndef convert_to_MB(x):\n    if \"k\" in x:\n        x = round(float(x.replace(\"k\", \"\"))\/1000, 2)\n    elif \"M\" in x:\n        x = round(float(x.replace(\"M\", \"\")), 2)\n    elif x == \"Varies with device\":\n        x = None # \"varies with devices\" set default to 10MB\n    #return round(x, 1)\n    return x\ndata[\"Size_MB\"] = data[\"Size\"].apply(convert_to_MB)\ndata[\"Size_MB\"].fillna((data[\"Size_MB\"].mean()), inplace=True)","f0a40d31":"# clean Price\ndata['Price'] = data['Price'].apply(lambda x: float(str(x).replace('$','')))\n","43e83942":"# convert reviews to float\ndata['Reviews'] = data['Reviews'].apply(lambda x: float(x))\ndata['Reviews'].head()","1edb213c":"plt.figure(figsize = (15, 6))\nplt.title('Number of installs per category')\ninstall_per_category = data.groupby(\"Category\")['Installs'].sum().reset_index()\nax = sns.barplot(x=\"Category\", y=\"Installs\", data=install_per_category)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 40, ha = 'right')\nplt.show()","ef52fc51":"plt.figure(figsize=(15,6))\nplt.title('Number of apps per category')\nax = sns.countplot(x='Category',data = data)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 40, ha = 'right')\nplt.show()","ed783be8":"plt.figure(figsize = (15, 6))\nplt.title('Average Size per Category')\nsize_per_category = data.groupby(\"Category\")['Size_MB'].mean().reset_index()\nax = sns.barplot(x=\"Category\", y=\"Size_MB\", data=size_per_category)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 40, ha = 'right')\nplt.show()","a6c7c5e4":"data[data['Category']==\"FAMILY\"].head(10)","5bf188e8":"plt.figure(figsize=(15,6))\nplt.title('Free Apps vs Paid Apps')\nax = sns.countplot(x='Type',data = data)\nplt.show()","2f09ec4a":"print(\"Percentage of free apps: \", round(len(data[data['Type'] == \"Free\"])\/len(data)*100, 2))","fca52050":"paid_apps = data[data['Price']!=0]\nplt.figure(figsize=(15,6))\nplt.title('Distribution of app prices')\nax = sns.distplot(paid_apps['Price'])\nplt.show()","9e6d837b":"print(\"Apps with price less than 10: \", round(len(paid_apps[paid_apps['Price'] <= 10])\/len(paid_apps)*100,2))\nprint(\"Apps with price more than 100: \", round(len(paid_apps[paid_apps['Price'] >= 100])\/len(paid_apps)*100,2))","ef0ff643":"paid_apps[paid_apps['Price'] >= 300]","de5d4d94":"plt.figure(figsize=(15,6))\nplt.title('Last Updated')\nax = sns.countplot(x='Last Updated', data=data)\nplt.show()","df85f7fe":"print(\"% Last update in 2018 covers: \", round(len(data[data[\"Last Updated\"]==\"2018\"])\/len(data[\"Last Updated\"])*100))","2012bcd0":"data[\"Android Ver\"].unique()","f9aea44c":"data['Current Ver'].unique()","ac8050ee":"print(data.count(axis=0))","7a14cb2a":"df = data.dropna(axis=0, how='any')[[\"Rating\", \"Reviews\", \"Size_MB\", \"Installs\", \"Type\", \"Price\", \"Last Updated\"]]\ndf.head()","a5f6bfe1":"plt.figure(figsize=(15,6))\nax = sns.pairplot(df, hue=\"Type\")\nplt.show()","f5180f51":"df = df.loc[:, df.columns != \"Type\"]\nX_train, X_test, y_train, y_test = train_test_split(df.loc[:, df.columns != 'Installs'], df.Installs, test_size=0.33, random_state=42)\nX_train.head()","2e5bbb44":"\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)","cea72ae3":"y_pred = clf.predict(X_test)\n# print(confusion_matrix(y_test, y_pred))\nprint(\"Accuracy is \", accuracy_score(y_test,y_pred)*100)\n# print(classification_report(y_test, y_pred))\n# Compute and plot the RMSE\nRMSE_0 = np.sqrt(np.sum(((y_test-y_pred)**2)\/len(y_test)))\nprint(\"Root Mean Square Error is: \", RMSE_0)","7e33c8bf":"\n# Fit regression model and predict\nregr_1 = DecisionTreeRegressor(criterion=\"mse\", max_depth=2)\nregr_2 = DecisionTreeRegressor(criterion=\"mse\", max_depth=5)\nregr_1.fit(X_train, y_train)\nregr_2.fit(X_train, y_train)\ny_pred_1 = regr_1.predict(X_test)\ny_pred_2 = regr_2.predict(X_test)\ny_pred_1\n# Compute and plot the RMSE\nRMSE_1 = np.sqrt(np.sum(((y_test-y_pred_1)**2)\/len(y_test)))\nRMSE_2 = np.sqrt(np.sum(((y_test-y_pred_2)**2)\/len(y_test)))\nprint(\"Root Mean Square Error 1 is: \", RMSE_1)\nprint(\"Root Mean Square Error 2 is: \", RMSE_2)","a17088f8":"plt.figure(figsize=(15,6))\nplt.title('Rating Distribution')\nax = sns.countplot(x='Rating', data=data)\nplt.show()","f74b60f6":"data_review = data.merge(reviews, how = 'inner', on = 'App')\ndata_review.head()","bb483eb3":"To explore which variable is likely related to other, I applied pairplot, but for this analysis I have to drop all lines which contain NaN. From 10840 rows we now have 9360 rows. \n\nWe first plot the pairplot to see if there is relationship between two variables. It does not really show a significant regression relationship. But we will start checking the relationship among these variables (Rating, Reviews, Size, Price and Last Updated) to see if there is connection with number of installs. I find the easy way to start explore relationship among many variables is using decision tree. Decision tree is a great method both for categorical variable and numerical one. \n\nOur hypothesis is: the more people install the app because the more rating the app has, the more review the app has as well as the latest updated","d5a84150":"We split the dataset into train set and testing set (33%) using sklearn package, train the classifier, make predictions and calculate the accuracy.","66265637":"1. **Cleansing the data**:\n    - Remove one line, which is distorted\n    - Remove + sign in Installs\n    - Convert \"Size\" to MB\n    - Remove $ sign in Price\n    - Get the year out of date","c50a85b3":"**Last Updated, Android Ver, Current Ver**\n\nMajority of apps **(68%)** have the latest update in 2018.\nI found that Android Version and Current Version of the apps are unrelevant, since they contain mixed information. That is why I will leave them out of the analysis.","54b37279":"Majority of google apps in store (92%) are free, and amongst paid apps, 88% are having prices of less than 10\\$. Interestingly, there are quite a few apps which have price more than 100\\$, or even more than 300\\$. It turns out, they are copy cat of \"I am rich\" app, selling at 399\\$, even got quite a lot of downloads (50.000\\+).","fccd5cc8":"****2) Visualisation****\n","4395fbbf":"My first attempt to work on datasets to expand my knowledge and practice in data science. I will only focus on the analyses or aspects that I think interesting. Look forward to comments and discussion.","b08b78e6":"As we see, the accuracy ratio is 51%, we need to fine-tune abit, so instead of decision tree classifier (as you see installs have may levels), we are going to use decision tree regressor. However the RMSE is not that much improved in compared to the classifier. We cannot conclude on the relationship among Installs and Rating, Size, Price. ","31fd55b3":"\n**Communication** and **games** are the most *downloaded* categories. **Family** and **games** have the *most* apps written. Apps belong to **family** and **games** categories are averagely *larger* in size. Although a closer look at apps in Family reveals that many of them are game-typed app such as Candy Bomb, Jewels Crush...\n\nCategories that are left behind include: Art & Design, Beauty, Events and Parenting (eventhough it should be categorised as Family). This could be a motivation for more developers who should write more apps in these less established categories?","21c4cf6c":"**Category - Installs - Size**","be0cfde9":"**2. Sentiments**","7a7a5727":"**2. Relationship**\n","bddfbc42":"**3. Sentiment Analysis**","497757b0":"**3.1. Ratings**\n\nMost of apps have ratings of 4+. ","f4035000":"**Price**","380c9cc9":"to be continued..."}}