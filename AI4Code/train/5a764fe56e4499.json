{"cell_type":{"e30c7598":"code","5bc48816":"code","a502aec6":"code","51e64545":"code","e5a0fafb":"code","baf60d71":"code","b22ae894":"code","9e58cb4e":"code","fb84c2c3":"code","2cbee975":"code","ee3c3982":"code","871fd046":"code","d4e3b78d":"code","ae47b285":"code","5d30e49b":"code","15c0b132":"code","83a93b94":"code","4f2e5a3e":"code","4649204b":"code","1ce0585d":"code","742a73af":"code","4839bba9":"code","0fc21f20":"code","d7ee31a7":"code","9cb46244":"code","becef2f3":"code","f09544b9":"code","ddfeff7b":"code","8aa96eea":"code","9be4465f":"code","ff733ac8":"code","7c8d78a1":"code","4d56f53f":"code","63db71b0":"code","a045970e":"code","24ce54b4":"code","afc661f6":"code","5452aa57":"code","8cf45e3d":"code","78c85c4c":"markdown","6e5256a6":"markdown","fc42898e":"markdown","f25e1942":"markdown","63a1bed7":"markdown","24aaf3a3":"markdown","fd2cb097":"markdown","d1f981ce":"markdown"},"source":{"e30c7598":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5bc48816":"data_train_nlp = pd.read_csv(open('train.csv', 'rb'))\ndata_test_nlp = pd.read_csv(open('test.csv', 'rb'))\nsample_sub_nlp = pd.read_csv(open('sample_submission.csv', 'rb'))","a502aec6":"data_train_nlp.head(2)","51e64545":"data_test_nlp.head(2)","e5a0fafb":"print(data_train_nlp.columns.tolist())","baf60d71":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import ensemble \nfrom sklearn.metrics import classification_report, accuracy_score","b22ae894":"col2 = data_train_nlp.isnull().sum()\ncol1 = train_nlp.columns\nnulls_train = {'columns': col1, '# of nulls': col2}\nnulls_train = pd.DataFrame(nulls_train).reset_index(inplace = False).drop('index', axis = 1)\nnulls_train","9e58cb4e":"col2 = data_test_nlp.isnull().sum()\ncol1 = test_nlp.columns\nnulls_test = {'columns': col1, '# of nulls': col2}\nnulls_test = pd.DataFrame(nulls_test).reset_index(inplace = False).drop('index', axis = 1)\nnulls_test","fb84c2c3":"# fig_nulls, ax = plt.subplots(1,2, figsize = (20,10))\nax[0].bar(nulls_train['columns'],nulls_train['# of nulls'], width = 0.5, color = 'orange')\n# titles2\nax[0].legend()\nax[0].set_title('Number of nulls in trainset')\nax[0].set_xlabel('column names')\nax[0].set_ylabel('number of nulls')\n# x and y axes\n#ax[0].set_ylim(0,5)\nax[1].bar(nulls_test['columns'],nulls_test['# of nulls'], width = 0.5, color = 'green')\n# titles2\nax[1].legend()\nax[1].set_title('Number of nulls in testset')\nax[1].set_xlabel('column names')\nax[1].set_ylabel('number of nulls')\n# x and y axes\n#ax[0].set_ylim(0,5)","2cbee975":"train_nlp = data_train_nlp\ntest_nlp = data_test_nlp","ee3c3982":"train_nlp['nReview'] =train_nlp['Review'].fillna(value='')\ntest_nlp['nReview'] =test_nlp['Review'].fillna(value='')\ntrain_nlp['nReview_Title'] =train_nlp['Review_Title'].fillna(value='')\ntest_nlp['nReview_Title'] =test_nlp['Review_Title'].fillna(value='')","871fd046":"train_nlp['nReview'] = train_nlp['nReview'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\ntest_nlp['nReview'] = test_nlp['nReview'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\ntrain_nlp['nReview_Title'] = train_nlp['nReview_Title'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\ntest_nlp['nReview_Title'] = test_nlp['nReview_Title'].apply(lambda x: \" \".join(x.lower() for x in x.split()))","d4e3b78d":"train_nlp.isna().sum(axis=0)","ae47b285":"test_nlp.isna().sum(axis=0)","5d30e49b":"print(\"Average age for test data:\", test_nlp['Age'].mean())\nprint(\"Average age for train data:\", train_nlp['Age'].mean())","15c0b132":"plt.hist(train_nlp['Age'])","83a93b94":"plt.hist(test_nlp['Age'])","4f2e5a3e":"print(test_nlp.drop(['Id','Pos_Feedback_Cnt' ], axis=1).groupby(['Division'], as_index = False).mean(['Age']).sort_values(['Age']))\nprint('=====================================================================================================================')\nprint(train_nlp.drop(['Id','Pos_Feedback_Cnt' ], axis=1).groupby(['Division'], as_index = False).mean(['Age']).sort_values(['Age']))","4649204b":"print(test_nlp.drop(['Id','Pos_Feedback_Cnt' ], axis=1).groupby(['Department'], as_index = False).mean(['Age']).sort_values(['Age']))\nprint('=====================================================================================================================')\nprint(train_nlp.drop(['Id','Pos_Feedback_Cnt' ], axis=1).groupby(['Department'], as_index = False).mean(['Age']).sort_values(['Age']))","1ce0585d":"print(test_nlp.drop(['Id','Pos_Feedback_Cnt' ], axis=1).groupby(['Product_Category'], as_index = False).mean(['Age']).sort_values(['Age']))\nprint('=====================================================================================================================')\nprint(train_nlp.drop(['Id','Pos_Feedback_Cnt' ], axis=1).groupby(['Product_Category'], as_index = False).mean(['Age']).sort_values(['Age']))\n#all the product types in test set exists in trainset as well","742a73af":"train_nlp.drop(['Id','Pos_Feedback_Cnt' ], axis=1).groupby(['Rating'], as_index = False).mean().sort_values(['Rating'])\n\n#age does not give much insight in this case\n#recpmmendation probability increases more after rating = 3\n#rating recommendation relation seems reasonable","4839bba9":"fig_age, ax = plt.subplots(figsize = (10,10))\nax.bar(train_nlp['Rating'],train_nlp['Age'], width = 0.5, color = 'orange')\n# titles2\nax.legend()\nax.set_title('Rating and Age')\nax.set_xlabel('Rating')\nax.set_ylabel('Age')","0fc21f20":"fig_rec, ax = plt.subplots(figsize = (10,10))\nax.bar(train_nlp['Rating'],train_nlp['Age'], width = 0.5, color = 'blue')\n# titles2\nax.legend()\nax.set_title('Rating and Recommendation')\nax.set_xlabel('Rating')\nax.set_ylabel('Recommendation rate')","d7ee31a7":"print(train_nlp['Pos_Feedback_Cnt'].max())\nprint(train_nlp['Pos_Feedback_Cnt'].nunique())","9cb46244":"print('Average recommendation:',train_nlp['Recommended'].mean())\nprint('Average rating:',train_nlp['Rating'].mean())\nprint('Minimum rating:',train_nlp['Rating'].min())\nprint('Maximum rating:',train_nlp['Rating'].max())","becef2f3":"print('Number of not recommended:',train_nlp[train_nlp['Recommended'] == 0]['Recommended'].count())\nprint('Number of recommended:',train_nlp[train_nlp['Recommended'] == 1]['Recommended'].count())","f09544b9":"print('Number of rating 1:',train_nlp[train_nlp['Rating'] == 1]['Rating'].count())\nprint('Number of rating 2:',train_nlp[train_nlp['Rating'] == 2]['Rating'].count())\nprint('Number of rating 3:',train_nlp[train_nlp['Rating'] == 3]['Rating'].count())\nprint('Number of rating 4:',train_nlp[train_nlp['Rating'] == 4]['Rating'].count())\nprint('Number of rating 5:',train_nlp[train_nlp['Rating'] == 5]['Rating'].count())","ddfeff7b":"len(train_nlp['Review'])","8aa96eea":"import string as str","9be4465f":"opinion = {'Words':  ['cute', 'good', 'bad', 'terrible', 'ridiculous', 'extraordinary', 'love', 'do not know', 'do not love', \"don't know\", \"dont know\", \"don't love\", \"magnificent\", \"happy\", \"terrific\", \"worse\"\n                              ],\n        \n        'Number of words':  [train_nlp['Review'].str.contains('cute', case = False).sum(),\ntrain_nlp['Review'].str.contains('good', case = False).sum(),\ntrain_nlp['Review'].str.contains('bad', case = False).sum(),\ntrain_nlp['Review'].str.contains('terrible', case = False).sum(),\ntrain_nlp['Review'].str.contains('ridiculous', case = False).sum(),\ntrain_nlp['Review'].str.contains('extraordinary', case = False).sum(),\ntrain_nlp['Review'].str.contains('love', case = False).sum(),\ntrain_nlp['Review'].str.contains('do not know', case = False).sum(),\ntrain_nlp['Review'].str.contains('do not love', case = False).sum(),\ntrain_nlp['Review'].str.contains(\"don't know\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"dont know\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"don't love\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"magnificent\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"happy\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"terrific\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"worse\", case = False).sum()\n                              ],\n        'Average recommendation rate': [train_nlp[train_nlp['Review'].str.contains('cute', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('good', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('bad', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('terrible', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('ridiculous', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('extraordinary', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('love', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('do not know', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('do not love', case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"don't know\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"dont know\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"don't love\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"magnificent\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"happy\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"terrific\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"worse\", case = False) == True]['Recommended'].mean()\n],\n        'Average Review Score': [train_nlp[train_nlp['Review'].str.contains('cute', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('good', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('bad', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('terrible', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('ridiculous', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('extraordinary', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('love', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('do not know', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains('do not love', case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"don't know\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"dont know\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"don't love\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"magnificent\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"happy\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"terrific\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"worse\", case = False) == True]['Rating'].mean()\n] }\nopinion_tab = pd.DataFrame (opinion, columns = ['Words', 'Number of words', 'Average recommendation rate',  'Average Review Score'])\n\nopinion_tab","ff733ac8":"season = {'Words':  [\"fall\", \"autumn\", \"spring\", \"winter\", \"summer\"\n],\n        \n        'Number of words':  [train_nlp['Review'].str.contains(\"fall\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"autumn\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"spring\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"winter\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"summer\", case = False).sum()\n],\n        'Average recommendation rate': [train_nlp[train_nlp['Review'].str.contains(\"fall\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"autumn\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"spring\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"winter\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"summer\", case = False) == True]['Recommended'].mean()\n],\n        'Average Review Score': [train_nlp[train_nlp['Review'].str.contains(\"fall\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"autumn\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"spring\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"winter\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"summer\", case = False) == True]['Rating'].mean()\n] }\nseason_tab = pd.DataFrame (season, columns = ['Words', 'Number of words', 'Average recommendation rate',  'Average Review Score'])\n\nseason_tab","7c8d78a1":"color = {'Words':  [\"green\", \"red\", \"yellow\", \"blue\", \"black\", \"white\", \"orange\", \"violet\", \"lilac\", \"purple\", \"marine\", \"dark\", \"light\", \"pink\", \"pastel\", \"brown\"\n],\n    \n        'Number of words':  [train_nlp['Review'].str.contains(\"green\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"red\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"yellow\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"blue\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"black\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"white\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"orange\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"violet\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"lilac\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"purple\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"marine\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"dark\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"light\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"pink\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"pastel\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"brown\", case = False).sum()\n],\n        'Average recommendation rate': [train_nlp[train_nlp['Review'].str.contains(\"green\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"red\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"yellow\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"blue\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"black\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"white\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"orange\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"violet\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"lilac\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"purple\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"marine\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"dark\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"light\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"pink\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"pastel\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"brown\", case = False) == True]['Recommended'].mean()\n],\n        'Average Review Score': [train_nlp[train_nlp['Review'].str.contains(\"green\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"red\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"yellow\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"blue\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"black\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"white\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"orange\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"violet\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"lilac\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"purple\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"marine\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"dark\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"light\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"pink\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"pastel\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"brown\", case = False) == True]['Rating'].mean()\n] }\ncolor_tab = pd.DataFrame (color, columns = ['Words','Number of words', 'Average recommendation rate',  'Average Review Score'])\n\ncolor_tab","4d56f53f":"material = {'Words':  [\"wool\", \"cotton\", \"silk\", \"leather\"\n],\n        \n    'Number of words':  [train_nlp['Review'].str.contains(\"wool\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"cotton\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"silk\", case = False).sum(),\ntrain_nlp['Review'].str.contains(\"leather\", case = False).sum()\n],\n        'Average recommendation rate': [train_nlp[train_nlp['Review'].str.contains(\"wool\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"cotton\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"silk\", case = False) == True]['Recommended'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"leather\", case = False) == True]['Recommended'].mean()\n],\n        'Average Review Score': [train_nlp[train_nlp['Review'].str.contains(\"wool\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"cotton\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"silk\", case = False) == True]['Rating'].mean(),\ntrain_nlp[train_nlp['Review'].str.contains(\"leather\", case = False) == True]['Rating'].mean()\n] }\nmaterial_tab = pd.DataFrame (material, columns = ['Words', 'Number of words', 'Average recommendation rate',  'Average Review Score'])\n\nmaterial_tab","63db71b0":"plt.ioff()\nfig_mat, ax = plt.subplots(1,3, figsize = (20,10))\ne = material_tab['Average Review Score']\nf = material_tab['Average recommendation rate']\ng = material_tab['Number of words']\nh = material_tab['Words']\nax[0].bar(h,e, width = 0.5, color = 'orange')\n# titles2\nax[0].legend()\nax[0].set_title('Rating')\nax[0].set_xlabel('Material')\nax[0].set_ylabel('Average rating Score')\n# x and y axes\nax[0].set_ylim(0,5)\nax[1].bar(h,f, width = 0.5, color = 'blue')\n# titles\nax[1].legend()\nax[1].set_title('Recommendation')\nax[1].set_xlabel('Material')\nax[1].set_ylabel('Average recommedation rate')\n# x and y axes\nax[1].set_ylim(0,1)\nax[2].bar(h,g, width = 0.5, color = 'green')\n# titles2\nax[2].legend()\nax[2].set_title('Words')\nax[2].set_xlabel('Material')\nax[2].set_ylabel('Number of words')\n# x and y axes\nax[0].set_ylim(0,5)","a045970e":"fig_col, ax = plt.subplots(1,3, figsize = (20,10))\ni = color_tab['Average Review Score']\nj = color_tab['Average recommendation rate']\nk = color_tab['Number of words']\nl = color_tab['Words']\nax[0].barh(l,i, height = 0.5, color = 'orange')\n# titles2\nax[0].legend()\nax[0].set_title('Rating')\nax[0].set_ylabel('Colors')\nax[0].set_xlabel('Average rating Score')\n# x and y axes\n#ax[0].set_ylim(0,5)\nax[1].barh(l,j, height = 0.5, color = 'blue')\n# titles\nax[1].legend()\nax[1].set_title('Recommendation')\nax[1].set_ylabel('Colors')\nax[1].set_xlabel('Average recommedation rate')\n# x and y axes\n#ax[1].set_ylim(0,1)\nax[2].barh(l,k, height = 0.5, color = 'green')\n# titles2\nax[2].legend()\nax[2].set_title('Words')\nax[2].set_ylabel('Colors')\nax[2].set_xlabel('Number of words')\n# x and y axes\n#ax[0].set_ylim(0,5\n# if we do not write it, it shows an ordered pair over the graph\nplt.show()","24ce54b4":"fig_opn, ax = plt.subplots(1,3, figsize = (20,10))\na = opinion_tab['Average Review Score']\nb = opinion_tab['Average recommendation rate']\nc = opinion_tab['Number of words']\nd = opinion_tab['Words']\nax[0].barh(d,a, height = 0.5, color = 'orange')\n# titles2\nax[0].legend()\nax[0].set_title('Rating')\nax[0].set_ylabel('Colors')\nax[0].set_xlabel('Average rating Score')\n# x and y axes\n#ax[0].set_ylim(0,5)\nax[1].barh(d,b, height = 0.5, color = 'blue')\n# titles\nax[1].legend()\nax[1].set_title('Recommendation')\nax[1].set_ylabel('Colors')\nax[1].set_xlabel('Average recommedation rate')\n# x and y axes\n#ax[1].set_ylim(0,1)\nax[2].barh(d,c, height = 0.5, color = 'green')\n# titles2\nax[2].legend()\nax[2].set_title('Words')\nax[2].set_ylabel('Colors')\nax[2].set_xlabel('Number of words')\n# x and y axes\n#ax[0].set_ylim(0,5)\n# if we do not write it, it shows an ordered pair over the graph\nplt.show()","afc661f6":"fig_seas, ax = plt.subplots(1,3, figsize = (20,10))\nm = season_tab['Average Review Score']\nn = season_tab['Average recommendation rate']\no = season_tab['Number of words']\np = season_tab['Words']\nax[0].bar(p,m, width = 0.5, color = 'orange')\n# titles2\nax[0].legend()\nax[0].set_title('Rating')\nax[0].set_xlabel('Material')\nax[0].set_ylabel('Average rating Score')\n# x and y axes\nax[0].set_ylim(0,5)\nax[1].bar(p,n, width = 0.5, color = 'blue')\n# titles\nax[1].legend()\nax[1].set_title('Recommendation')\nax[1].set_xlabel('Material')\nax[1].set_ylabel('Average recommedation rate')\n# x and y axes\nax[1].set_ylim(0,1)\nax[2].bar(p,o, width = 0.5, color = 'green')\n# titles2\nax[2].legend()\nax[2].set_title('Words')\nax[2].set_xlabel('Material')\nax[2].set_ylabel('Number of words')\n# x and y axes\nax[0].set_ylim(0,5)\n# if we do not write it, it shows an ordered pair over the graph\nplt.show()","5452aa57":"sns.heatmap(train_nlp.corr(),linewidths=0.5,vmax=1, linecolor='black', annot=True)","8cf45e3d":"sns.heatmap(test_nlp.corr(),linewidths=0.5,vmax=1, linecolor='black', annot=True)","78c85c4c":"# Nulls","6e5256a6":"# Importing and Installing Models","fc42898e":"# Processing","f25e1942":"# Rating and Recommendation","63a1bed7":"# Age","24aaf3a3":"# Correlation","fd2cb097":"# Analyzing","d1f981ce":"# Importing datasets"}}