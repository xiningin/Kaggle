{"cell_type":{"c34695cb":"code","41336690":"code","8ad10d3c":"code","a4949fd1":"code","b5e98efc":"code","a0e1df8b":"code","59dc96f0":"code","7f24412a":"code","24e3fd3b":"code","dfeb4f38":"code","75602101":"code","0b65623e":"code","1278ae3f":"code","bfad38a7":"code","d70c08d8":"code","7f610d40":"code","f3bcd1c1":"code","583ca574":"code","bd097c2b":"code","f1727665":"code","6a88fb87":"code","f72c980e":"code","c71a131c":"markdown","bb4662f4":"markdown","317d22e2":"markdown","2fdacb98":"markdown","21ee3857":"markdown","5d84533d":"markdown","2a643adc":"markdown","00daee71":"markdown","1a1d7e5a":"markdown"},"source":{"c34695cb":"import numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nmobile = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")\nmobile.head()\n\n\n\n","41336690":"mobile.describe()","8ad10d3c":"print(mobile.isnull().sum())","a4949fd1":"for i in mobile:\n    if(mobile[i].nunique()<30):\n        sns.countplot(x = mobile[i])\n        plt.show()","b5e98efc":"plt.figure(figsize = (30, 10))\nplt.subplot(331)\nsns.distplot(mobile['battery_power'])\nplt.subplot(332)\nsns.distplot(mobile['clock_speed'])\nplt.subplot(333)\nsns.distplot(mobile['int_memory'])\nplt.subplot(334)\nsns.distplot(mobile['m_dep'])\nplt.subplot(335)\nsns.distplot(mobile['mobile_wt'])\nplt.subplot(336)\nsns.distplot(mobile['px_height'])\nplt.subplot(337)\nsns.distplot(mobile['px_width'])\nplt.subplot(338)\nsns.distplot(mobile['ram'])\nplt.subplot(339)\nsns.distplot(mobile['talk_time'])\nplt.show()\n","a0e1df8b":"corr = mobile.corr()\ncorr.style.background_gradient(cmap='coolwarm')","59dc96f0":"mobile1 = mobile[['pc', 'three_g', 'ram', 'price_range']]\nmobile1","7f24412a":"corr = mobile1.corr()\ncorr.style.background_gradient(cmap='coolwarm')","24e3fd3b":"# Numero de clases\nnum_classes = 4\n\ny =mobile1['price_range']\n\n# generar las etiquetas\ny = keras.utils.to_categorical(y, num_classes)\ny","dfeb4f38":"# tamano de la imagen de entrada\ninput_shape = (3)\n\n# definicion del modelo Perceptron\nmodel = keras.Sequential(\n    [\n        keras.Input(shape=input_shape),\n        #layers.Flatten(),\n        layers.Dense(200, activation=\"relu\"),\n        layers.Dense(num_classes, activation=\"softmax\"),\n    ]\n)\n\n# Construir el modelo y ver la arquitectura\nmodel.build(input_shape)\nmodel.summary()","75602101":"# Definir los parametros de optimizacion y perdida del modelo (con CrossValidation)\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","0b65623e":"X = mobile1.copy().drop('price_range', axis=1)","1278ae3f":"history = model.fit(X, y, epochs=10, batch_size=250, verbose=1, validation_split=0.4)\n","bfad38a7":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(go.Scatter(\n    y=history.history['loss'],\n    mode='lines+markers',\n    name='training loss'\n), row=1, col=1)\n\nfig.add_trace(go.Scatter(\n    y=history.history['val_loss'],\n    mode='lines+markers',\n    name='validation loss'\n), row=1, col=1)\n\nfig.add_trace(go.Scatter(\n    y=history.history['accuracy'],\n    mode='lines+markers',\n    name='training accuracy'\n), row=1, col=2)\n\nfig.add_trace(go.Scatter(\n    y=history.history['val_accuracy'],\n    mode='lines+markers',\n    name='validation accuracy'\n), row=1, col=2)\n\nfig.update_xaxes(title_text='Epoch')\nfig.update_layout(title_text=\"Training History Metrics\")\nfig.show()","d70c08d8":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\n\n\n# make predictions with your classifier\n#y_pred =prediction\n        \n# optional: get true negative (tn), false positive (fp)\n# false negative (fn) and true positive (tp) from confusion matrix\n#M = confusion_matrix(y, y_pred)\n#tn, fp, fn, tp = M.ravel() \n\n# plotting the confusion matrix\n#plot_confusion_matrix(history, X, y)\n#plt.show()\n","7f610d40":"divorce = pd.read_csv(\"..\/input\/divorce-predictors-data-set-csv\/divorce-csv.csv\")\ndivorce.head()","f3bcd1c1":"divorce.info","583ca574":"corr = divorce.corr()\ncorr.style.background_gradient(cmap='coolwarm')","bd097c2b":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndivorce['Class'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Class')\nax[0].set_ylabel('')\nsns.countplot('Class',data=divorce,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","f1727665":"X = divorce.iloc[:,:-1]\nX.head\ny = divorce.iloc[:,-1]","6a88fb87":"from sklearn.linear_model import Perceptron\n\nclf = Perceptron(tol=1e-3, random_state=0)\nclf.fit(X, y)\nPerceptron()\nclf.score(X, y)","f72c980e":"from sklearn.metrics import plot_confusion_matrix\n\nplot_confusion_matrix(clf,X, y)","c71a131c":"# # # Histograms","bb4662f4":"# # Histograms","317d22e2":"# # # B. Scikitlearn","2fdacb98":"LOAD DATA","21ee3857":"Confusion Matrix","5d84533d":"# Perceptron","2a643adc":"# # Correlation Matrix","00daee71":"# # # Make predictions","1a1d7e5a":"# # CORRELATION"}}