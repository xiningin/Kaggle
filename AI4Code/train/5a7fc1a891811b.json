{"cell_type":{"1d74ae57":"code","afa6406c":"code","04fd8607":"code","29a61c41":"code","23a13b41":"code","9168aac6":"code","f5652fb6":"code","5f9ea172":"code","f41deef0":"code","478bdf8c":"code","234d6c80":"code","f25d046c":"code","0c5bc991":"code","4c2ee2b1":"code","4fedb7ea":"code","897a26db":"code","c8de37ab":"code","1359b842":"code","9639abe1":"code","4acab9f0":"code","69aaf58d":"code","ab4bae21":"code","71dd2568":"code","5be9f026":"code","9e9f8735":"code","a9926dd0":"code","d2514b51":"code","28ea3c72":"code","294066d5":"code","3f468de8":"code","b8437ee4":"code","a9d31578":"code","76855dca":"code","8fafc6d7":"code","87e264ac":"code","d571e1b9":"code","5eac6c7e":"code","6009a6b1":"code","f7211940":"code","dded5054":"code","86f21044":"code","77287eed":"code","a8e2fa69":"code","587fcebf":"code","ecf55107":"markdown","cd48c212":"markdown","b0b01ec3":"markdown","4cb9fe4a":"markdown","927cf5d6":"markdown","ae604d3b":"markdown","dc62ca1e":"markdown","2b85e1ef":"markdown","3ac6b766":"markdown","e534f12f":"markdown","e1c88c75":"markdown","037c00fe":"markdown","4e955835":"markdown","465cefc3":"markdown","96976fa6":"markdown","5f60950e":"markdown","96b974e5":"markdown","5d9a61f2":"markdown","7037f52a":"markdown","044621dc":"markdown","20c69587":"markdown","10c02304":"markdown"},"source":{"1d74ae57":"import os\nimport joblib\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","afa6406c":"train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv')","04fd8607":"cat_features = [feature for feature in train_df.columns if 'cat' in feature]\ncont_features = [feature for feature in train_df.columns if 'cont' in feature]","29a61c41":"print('Rows and Columns in train dataset:', train_df.shape)\nprint('Rows and Columns in test dataset:', test_df.shape)","23a13b41":"print('Missing values in train dataset:', sum(train_df.isnull().sum()))\nprint('Missing values in test dataset:', sum(test_df.isnull().sum()))","9168aac6":"train_df.head()","f5652fb6":"test_df.head()","5f9ea172":"fig = plt.figure(figsize=(15, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor col in range(0, 4):\n    for row in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.3, 5.3, 'Continuous Features Distribution on Train Dataset', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.3, 4.7, 'Continuous features have multimodal', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor col in cont_features:\n    sns.kdeplot(train_df[col], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(col, fontsize=10, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.2, 1.2)\n    locals()[\"ax\"+str(run_no)].set_xlabel('')\n    run_no += 1\n    \nax14.remove()\nax15.remove()","f41deef0":"train_df[cont_features].describe()","478bdf8c":"fig = plt.figure(figsize=(10, 3.5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\nax0.set_yticklabels([])\nax0.tick_params(axis='y', which=u'both',length=0)\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n\nax0.text(-0.5, 0.5, 'Target Distribution on Train Dataset', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'Target has a bimodal distribution', fontsize=15, fontweight='light', fontfamily='serif')        \n\nsns.kdeplot(train_df['target'], ax=ax0, shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\nax0.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax0.set_xlim(-0.5, 10.5)\nax0.set_xlabel('')\nax0.set_ylabel('')\n\nplt.show()","234d6c80":"print('Target')\ntrain_df['target'].describe()","f25d046c":"fig = plt.figure(figsize=(15, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor col in range(0, 4):\n    for row in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.3, 5.3, 'Continuous Features Distribution on Test Dataset', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.3, 4.7, 'Continuous features on test dataset resemble train dataset', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor col in cont_features:\n    sns.kdeplot(test_df[col], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(col, fontsize=10, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.2, 1.2)\n    locals()[\"ax\"+str(run_no)].set_xlabel('')\n    run_no += 1\n    \nax14.remove()\nax15.remove()","0c5bc991":"test_df[cont_features].describe()","4c2ee2b1":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.8, 115, 'Count of categorical features on Train dataset (%)', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.8, 107, 'Some features are dominated by one category', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df[col].value_counts() \/ len(train_df) * 100)\n    sns.barplot(x=chart_df.index, y=chart_df[col], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    run_no += 1","4fedb7ea":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.8, 109, 'Count of categorical features on Test dataset (%)', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.8, 101, 'Some features are dominated by one category', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(test_df[col].value_counts() \/ len(test_df) * 100)\n    sns.barplot(x=chart_df.index, y=chart_df[col], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    run_no += 1","897a26db":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(18, 8), facecolor=background_color)\ngs = fig.add_gridspec(1, 2)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\ncolors = [\"#2f5586\", \"#f6f5f5\",\"#2f5586\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nax0.set_facecolor(background_color)\nax0.text(0, -1, 'Features Correlation on Train Dataset', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(0, -0.4, 'Highest correlation in the dataset is 0.6', fontsize=13, fontweight='light', fontfamily='serif')\n\nax1.set_facecolor(background_color)\nax1.text(-0.1, -1, 'Features Correlation on Test Dataset', fontsize=20, fontweight='bold', fontfamily='serif')\nax1.text(-0.1, -0.4, 'Features in test dataset resemble features in train dataset ', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nsns.heatmap(train_df[cont_features].corr(), ax=ax0, vmin=-1, vmax=1, annot=True, square=True, \n            cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap, fmt='.1g')\n\nsns.heatmap(test_df[cont_features].corr(), ax=ax1, vmin=-1, vmax=1, annot=True, square=True, \n            cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap, fmt='.1g')\n\nplt.show()","c8de37ab":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(12, 8), facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\nax0 = fig.add_subplot(gs[0, 0])\ncolors = [\"#2f5586\", \"#f6f5f5\",\"#2f5586\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nax0.set_facecolor(background_color)\nax0.text(-1.1, 0.048, 'Correlation of Continuous Features with Target', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-1.1, 0.045, 'There is no features that pass 0.04 correlation with target', fontsize=13, fontweight='light', fontfamily='serif')\n\nchart_df = pd.DataFrame(train_df[cont_features].corrwith(train_df['target']))\nchart_df.columns = ['corr']\nsns.barplot(x=chart_df.index, y=chart_df['corr'], ax=ax0, color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\nax0.grid(which='major', axis='y', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax0.set_ylabel('')\n\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n\nplt.show()","1359b842":"fig = plt.figure(figsize=(15, 15), facecolor = '#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor feature in cont_features:\n        sns.scatterplot(x=train_df[feature], y=train_df['target'] ,ax=locals()[\"ax\"+str(run_no)], color='#2f5586', linewidth=0.3, edgecolor='black')\n        locals()[\"ax\"+str(run_no)].grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        run_no += 1\n        \nax0.text(-0.5, 14, 'Features and Target Relation', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 12.4, 'cont1 has a distinct separation', fontsize=13, fontweight='light', fontfamily='serif')\n\nax14.remove()\nax15.remove()\n\nplt.show()","9639abe1":"cat = 'cat0'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat0\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","4acab9f0":"cat = 'cat1'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat1\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","69aaf58d":"cat = 'cat2'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat2\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","ab4bae21":"cat = 'cat3'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, (len(value)*2.5)), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat3\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","71dd2568":"cat = 'cat4'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, (len(value)*2.5)), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat4\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","5be9f026":"cat = 'cat5'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, (len(value)*2.5)), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat5\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","9e9f8735":"cat = 'cat6'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(40, (len(value)*2.5)), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor col in range(0, 2):\n    for row in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat6\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","a9926dd0":"cat = 'cat7'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(40, (len(value)*2.5)), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor col in range(0, 2):\n    for row in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat7\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","d2514b51":"cat = 'cat8'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(40, (len(value)*2.5)), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor col in range(0, 2):\n    for row in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.5, 0.52, 'Target Distribution on \"cat8\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.46, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1\n    \nax7.remove()","28ea3c72":"cat = 'cat9'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(30, (len(value)*2.5)), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor col in range(0, 3):\n    for row in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.5, 0.6, 'Target Distribution on \"cat9\" feature ', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.5, 0.54, 'To see how target is distributed across each value', fontsize=13, fontweight='light', fontfamily='serif')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.015, 0)\n    locals()[\"ax\"+str(run_no)].set_xlim(-0.5, 10.5)\n    run_no += 1","294066d5":"train_fe_df = train_df.copy()\nfor col in cont_features:\n    train_fe_df[col] = np.log(train_fe_df[col])","3f468de8":"fig = plt.figure(figsize=(15, 15), facecolor = '#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor feature in cont_features:\n        sns.scatterplot(x=train_fe_df[feature], y=train_fe_df['target'] ,ax=locals()[\"ax\"+str(run_no)], color='#2f5586', linewidth=0.3, edgecolor='black')\n        locals()[\"ax\"+str(run_no)].grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        run_no += 1\n        \nax0.text(-12, 14, 'Log of Continuous Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-12, 12.8, 'Create a log of continuous feature and compare it with the target', fontsize=13, \n         fontweight='light', fontfamily='serif')\n\nax14.remove()\nax15.remove()\n\nplt.show()","b8437ee4":"train_fe_df = train_df.copy()\ntrain_fe_df['min'] = train_fe_df[cont_features].min(axis=1)","a9d31578":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.tick_params(axis='y', which=u'both',length=0)\nax1.tick_params(axis='y', which=u'both',length=0)\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(-0.2, 12, 'Minimum and Log Minimum of All Continuous Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.2, 11.3, 'Minimum and log minimum of all continuous features compared with target ', fontsize=15, \n         fontweight='light', fontfamily='serif')        \n\nsns.scatterplot(x=train_fe_df['min'], y=train_fe_df['target'] ,ax=ax0, color='#2f5586', linewidth=0.3, edgecolor='black')\nax0.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax0.set_xlabel('Min of all feature')  \n\nsns.scatterplot(x=np.log(train_fe_df['min']), y=train_fe_df['target'] ,ax=ax1, color='#2f5586', linewidth=0.3, edgecolor='black')\nax1.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax1.set_xlabel('Log min of all feature')\n\nplt.show()","76855dca":"train_fe_df = train_df.copy()\ntrain_fe_df['max'] = train_fe_df[cont_features].max(axis=1)","8fafc6d7":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.tick_params(axis='y', which=u'both',length=0)\nax1.tick_params(axis='y', which=u'both',length=0)\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(0.2, 12, 'Maximum and Log Maximum of All Continuous Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(0.2, 11.3, 'Maximum and log maximum of all continuous features compared with target ', fontsize=15, \n         fontweight='light', fontfamily='serif')        \n\nsns.scatterplot(x=train_fe_df['max'], y=train_fe_df['target'] ,ax=ax0, color='#2f5586', linewidth=0.3, edgecolor='black')\nax0.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax0.set_xlabel('Max of all feature')  \n\nsns.scatterplot(x=np.log(train_fe_df['max']), y=train_fe_df['target'] ,ax=ax1, color='#2f5586', linewidth=0.3, edgecolor='black')\nax1.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax1.set_xlabel('Log max of all feature')\n\nplt.show()","87e264ac":"train_fe_df = train_df.copy()\ntrain_fe_df['cont_sum'] = train_fe_df[cont_features].sum(axis=1)","d571e1b9":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.tick_params(axis='y', which=u'both',length=0)\nax1.tick_params(axis='y', which=u'both',length=0)\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(2, 12, 'Sum and Log Sum of All Continuous Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(2, 11.3, 'Sum and log sum of all continuous features compared with target ', fontsize=15, \n         fontweight='light', fontfamily='serif')        \n\nsns.scatterplot(x=train_fe_df['cont_sum'], y=train_fe_df['target'] ,ax=ax0, color='#2f5586', linewidth=0.3, edgecolor='black')\nax0.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax0.set_xlabel('Sum of all feature')  \n\nsns.scatterplot(x=np.log(train_fe_df['cont_sum']), y=train_fe_df['target'] ,ax=ax1, color='#2f5586', linewidth=0.3, edgecolor='black')\nax1.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax1.set_xlabel('Log sum of all feature')\n\nplt.show()","5eac6c7e":"train_fe_df = train_df.copy()\ntrain_fe_df['cont_multiply'] = 1\nfor col in cont_features:\n    train_fe_df['cont_multiply'] = train_fe_df[col] * train_fe_df['cont_multiply']","6009a6b1":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.tick_params(axis='y', which=u'both',length=0)\nax1.tick_params(axis='y', which=u'both',length=0)\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(-0.01, 12, 'Multiplication and Log Multiplication of All Continuous Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.01, 11.3, 'Multiplication and multiplication log of all continuous features compared with target ', fontsize=15, \n         fontweight='light', fontfamily='serif')        \n\nsns.scatterplot(x=train_fe_df['cont_multiply'], y=train_fe_df['target'] ,ax=ax0, color='#2f5586', linewidth=0.3, edgecolor='black')\nax0.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax0.set_xlabel('Multiplication of all feature')  \n\nsns.scatterplot(x=np.log(train_fe_df['cont_multiply']), y=train_fe_df['target'] ,ax=ax1, color='#2f5586', linewidth=0.3, edgecolor='black')\nax1.grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax1.set_xlabel('Log multiplication of all feature')\n\nplt.show()","f7211940":"train_fe_df = train_df.copy()\ntrain_fe_df['cont_sum'] = train_fe_df[cont_features].sum(axis=1)\nfor col in cont_features:\n    train_fe_df[col] = train_fe_df[col] \/ train_fe_df['cont_sum']\ntrain_fe_df = train_fe_df.drop('cont_sum', axis=1)","dded5054":"fig = plt.figure(figsize=(15, 15), facecolor = '#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor feature in cont_features:\n        sns.scatterplot(x=train_fe_df[feature], y=train_fe_df['target'] ,ax=locals()[\"ax\"+str(run_no)], color='#2f5586', linewidth=0.3, edgecolor='black')\n        locals()[\"ax\"+str(run_no)].grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        run_no += 1\n        \nax0.text(-0.1, 14, 'Prorate Continuous Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.1, 12.8, 'Prorate continuous feature to percentage in a row and compare it with target', fontsize=13, \n         fontweight='light', fontfamily='serif')\n\nax14.remove()\nax15.remove()\n\nplt.show()","86f21044":"fig = plt.figure(figsize=(15, 15), facecolor = '#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor feature in cont_features:\n        sns.scatterplot(x=np.log(train_fe_df[feature]), y=train_fe_df['target'] ,ax=locals()[\"ax\"+str(run_no)], color='#2f5586', linewidth=0.3, edgecolor='black')\n        locals()[\"ax\"+str(run_no)].grid(which='major', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        run_no += 1\n        \nax0.text(-13, 14, 'Log Prorate Continuous Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-13, 12.8, 'Log Prorate continuous feature to percentage in a row and compare it with target', fontsize=13, \n         fontweight='light', fontfamily='serif')\n\nax14.remove()\nax15.remove()\n\nplt.show()","77287eed":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.7, 9, 'Mean Encoding by Categorical Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.7, 8.3, 'There is no distinct mean differences in the target', fontsize=13, fontweight='light', fontfamily='serif')\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df.groupby(col)['target'].mean()).reset_index()\n    sns.barplot(x=chart_df[col], y=chart_df['target'], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    run_no += 1","a8e2fa69":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.7, 4.1, 'Minimum Encoding by Categorical Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.7, 3.8, 'Target minimum varies among categorial features', fontsize=13, fontweight='light', fontfamily='serif')\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df.groupby(col)['target'].min()).reset_index()\n    sns.barplot(x=chart_df[col], y=chart_df['target'], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    run_no += 1","587fcebf":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.7, 12.3, 'Maximum Encoding by Categorical Features', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-0.7, 11.3, 'Target maximum is quite flat among categorial features', fontsize=13, fontweight='light', fontfamily='serif')\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df.groupby(col)['target'].max()).reset_index()\n    sns.barplot(x=chart_df[col], y=chart_df['target'], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n    run_no += 1","ecf55107":"**Train dataset**","cd48c212":"**First 5 rows in the train dataset**","b0b01ec3":"[back to top](#table-of-contents)\n<a id=\"features_engineering\"><\/a>\n# 5. Features Engineering\n\nThis section will try to create a new features from existing features and see the relation with the target. The new features haven't been implemented to a model and still unknown it's effectiveness.\n\n<a id=\"fe_continuous\"><\/a>\n## 5.1. Continuous Features ","4cb9fe4a":"### 4.2.2 Categorical Features","927cf5d6":"[back to top](#table-of-contents)\n<a id=\"preparation\"><\/a>\n# 2. Preparation","ae604d3b":"[back to top](#table-of-contents)\n<a id=\"features_target_correlation\"><\/a>\n# 4. Features & Target Correlation\n**Observations:**\n* Highest correlation between features is 0.6.\n* Correlation between features on train and test dataset are quite similar.\n* There is no continuous features that has correlation with `target` above\/below +\/- 0.04.\n* `cont9` has the lowest correlation with target, almost reaching 0.\n* There is a distinct separation on `cont1` relative to the `target`.","dc62ca1e":"[back to top](#table-of-contents)\n<a id=\"first_5_rows\"><\/a>\n## 3.3. First 5 rows","2b85e1ef":"[back to top](#table-of-contents)\n<a id=\"missing_values\"><\/a>\n## 3.2. No of missing values","3ac6b766":"[back to top](#table-of-contents)\n<a id=\"general\"><\/a>\n# 3. General\n\n**Observations:**\n* Train set has 300,000 rows while test set has 200,000 rows.\n* There are 10 categorical features from `cat0` - `cat9` and 14 continuous features from `cont0` - `cont13`.\n* There is no missing values in the train and test dataset but there is no category `G` in `cat6` test dataset.\n* Categorical features ranging from alphabet `A` - `O` but it varies from each categorical feature with `cat0`, `cat1`, `cat3`, `cat5` and `cat6` are dominated by one category.\n* Continuous features on train anda test dataset ranging from -0.1 to 1 which are a multimodal distribution and they are resemble each other.\n* `target` has a range between 0 to 10.3 and has a bimodal distribution.\n\n**Ideas:**\n* Drop features that are dominated by one category `cat0`, `cat1`, `cat3`, `cat5` and `cat6` as they don't give variation to the dataset but further analysis still be needed.","e534f12f":"# Table of Contents\n\n<a id=\"table-of-contents\"><\/a>\n1. [Introduction](#introduction)\n2. [Preparation](#preparation)\n3. [General](#general)\n    * 3.1. [No of rows and columns](#rows_columns)\n    * 3.2. [No of missing values](#missing_values)\n    * 3.3. [First 5 rows](#first_5_rows)\n    * 3.4. [Basic statistics on continuous features](#basic_statistics_cont)\n    * 3.5. [Count of categorical features](#count_cat)\n4. [Features & Target Correlation](#features_target_correlation)\n    * 4.1. [Correlation between features](#features_correlation)\n    * 4.2. [Correlation with target](#target_correlation)\n5. [Features Engineering](#features_engineering)\n    * 5.1. [Continuous Features](#fe_continuous)\n6. [Target Encoding](#target_encoding)\n    * 6.1. [Mean Encoding](#mean_encoding)\n    * 6.2. [Minimum Encoding](#min_encoding)\n    * 6.3. [Maximum Encoding](#max_encoding)\n7. [Winners Solutions](#winners_solutions)","e1c88c75":"[back to top](#table-of-contents)\n<a id=\"features_correlation\"><\/a>\n# 4.1. Correlation between features","037c00fe":"**Test dataset**","4e955835":"[back to top](#table-of-contents)\n<a id=\"target_correlation\"><\/a>\n# 4.2. Correlation with target\n\n### 4.2.1 Continuous Features","465cefc3":"[back to top](#table-of-contents)\n<a id=\"rows_columns\"><\/a>\n## 3.1. No of rows and columns","96976fa6":"**First 5 rows in the test dataset**","5f60950e":"[back to top](#table-of-contents)\n<a id=\"count_cat\"><\/a>\n## 3.5. Count of categorical features","96b974e5":"[back to top](#table-of-contents)\n<a id=\"winners_solutions\"><\/a>\n# 7. Winners Solutions\nCongratulations for all the winners and thank you for sharing your solution. Below are the winners and their solutions:\n* 1st place position: [Ren](https:\/\/www.kaggle.com\/ryanzhang) - [1st place DAE training code](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/discussion\/222745)\n* 2nd place position: [Dave E](https:\/\/www.kaggle.com\/davidedwards1) - [#2 LB Approach](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/discussion\/222762)\n* 3rd place position: [Ken](https:\/\/www.kaggle.com\/kntyshd) - [3rd place solution (just ensembling GBDTs)](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/discussion\/223455)","5d9a61f2":"[back to top](#table-of-contents)\n<a id=\"mean_encoding\"><\/a>\n# 6. Target Encoding\n\n**Observations:**\n* There is no disctinct `target mean` in each categorical features which mostly around 7.\n* `Target minimum` varies among categorical features but mostly are below 6.\n* `Target maximum` is in range 8 - 10 and quite consistent among categorical features.\n\n<a id=\"mean_encoding\"><\/a>\n## 6.1. Mean Encoding ","7037f52a":"[back to top](#table-of-contents)\n<a id=\"introduction\"><\/a>\n# 1. Introduction\n\nKaggle competitions are incredibly fun and rewarding, but they can also be intimidating for people who are relatively new in their data science journey. In the past, we've launched many Playground competitions that are more approachable than our Featured competitions and thus, more beginner-friendly.\n\nThe dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting the amount of an insurance claim. Although the features are anonymized, they have properties relating to real-world features.","044621dc":"[back to top](#table-of-contents)\n<a id=\"max_encoding\"><\/a>\n## 6.3. Maximum Encoding ","20c69587":"[back to top](#table-of-contents)\n<a id=\"basic_statistics_cont\"><\/a>\n## 3.4. Basic statistics on continuous features","10c02304":"[back to top](#table-of-contents)\n<a id=\"min_encoding\"><\/a>\n## 6.2. Minimum Encoding "}}