{"cell_type":{"f6dc61c7":"code","337a27aa":"code","92637bd8":"code","cc79b1af":"code","28f9c8e8":"code","ab5c937b":"code","1e0a1417":"code","17b58824":"markdown"},"source":{"f6dc61c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","337a27aa":"import sys\nprint(sys.version)","92637bd8":"class ChessBoard:\n    \n    def __init__(self):\n        self.grid = np.ones((16,16,3))\n        self.blue_piece = []\n        self.red_piece = []\n        black = (0,0,0)\n        white = (1,1,1)\n        for i in range(16):\n            for k in range(16):\n                if (k+i)%2 ==0:\n                    self.grid[i,k] = black\n                else:\n                    self.grid[i,k] = white\n    \n    def render(self):\n        plt.imshow(self.grid,alpha=.75)\n        \n    def add_red(self,row,col):\n        red = (1,0,0)\n        self.grid[row,col]= red\n        self.red_piece = [row,col]\n    \n    def add_blue(self,row,col):\n        blue = (0,0,1)\n        self.grid[row,col]= blue\n        self.blue_piece = [row,col]\n        \n    def is_under_attack(self):\n        if self.blue_piece[0]==self.red_piece[0]:\n            return True\n        elif self.blue_piece[1]==self.red_piece[1]:\n            return True\n        elif self.blue_piece[1]-self.blue_piece[0] == self.red_piece[1]-self.red_piece[0]:\n            return True\n        else:\n            return False\n        \n                    \n\n        ","cc79b1af":"board = ChessBoard()\n#Under attack Diagonally\nboard.add_red(1,0)\nboard.add_blue(7,6)\nboard.render()\nboard.is_under_attack()\nassert board.is_under_attack() == True\nprint('Test passes')","28f9c8e8":"board = ChessBoard()\n#Under attack row\nboard.add_red(1,0)\nboard.add_blue(1,6)\nboard.render()\nboard.is_under_attack()\nassert board.is_under_attack() == True\nprint('Test passes')","ab5c937b":"board = ChessBoard()\n#Under attack column\nboard.add_red(2,6)\nboard.add_blue(5,6)\nboard.render()\nboard.is_under_attack()\nassert board.is_under_attack() == True\nprint('Test passes')","1e0a1417":"board = ChessBoard()\n#Not Under attack\nboard.add_red(6,6)\nboard.add_blue(3,2)\nboard.render()\nboard.is_under_attack()\nassert board.is_under_attack() == False\nprint('Test passes')","17b58824":"## Create a Grid"}}