{"cell_type":{"1e300af8":"code","dd6d951a":"code","6c864c08":"code","4594e8b2":"code","07626a6c":"code","ea798d9c":"code","d7db0993":"code","8ee25a2a":"code","7ce861e9":"code","26476ea2":"code","cdeb1c5c":"code","dad8fbbc":"code","72db04da":"code","e3b4cc9a":"code","edd2e163":"code","ff735c57":"markdown","ffc7e7fb":"markdown","62eb8c90":"markdown"},"source":{"1e300af8":"import numpy as np \nimport pandas as pd\nimport os\n\nfrom sklearn import preprocessing\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","dd6d951a":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv',index_col='id')","6c864c08":"train.hist(figsize = (20,15), grid=False, ylabelsize=5, xlabelsize=5)\nplt.show()","4594e8b2":"corrs = train.corr()\ncorrs = corrs.sort_values(by=['loss'],ascending=False)","07626a6c":"fig = plt.figure(figsize = (15,20))\nsns.barplot(y=corrs.index[1:],\n            x=corrs['loss'].values[1:],\n            orient=\"h\",\n            )\nplt.title(\"Correlation Between Feature Columns and Target Column (Loss)\")\nplt.xlabel(\"Correlation with Target\")\nplt.ylabel(\"Feature Columns\")\nplt.show()","ea798d9c":"target = train['loss']\ntrain.drop('loss', axis=1, inplace=True)","d7db0993":"#Distribution of loss is censored\nfig = plt.figure(figsize = (14,8))\nsns.countplot(x=target)\nplt.show()","8ee25a2a":"feature_cols = [col for col in test.columns.tolist()]\nscaler = preprocessing.StandardScaler()\ntrain[feature_cols] = scaler.fit_transform(train[feature_cols])\ntest[feature_cols] = scaler.transform(test[feature_cols])","7ce861e9":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(train, \n                                                      target, test_size=0.25, \n                                                      random_state=0, \n                                                      stratify=target)\nprint(X_train.shape)\nprint(X_valid.shape)\nprint(y_train.shape)\nprint(y_valid.shape)","26476ea2":"X_train=X_train.astype(np.float32)\nX_valid=X_valid.astype(np.float32)\ny_train=y_train.astype(np.float32)\ny_valid=y_valid.astype(np.float32)","cdeb1c5c":"import tensorflow as tf\nfrom tensorflow.keras import layers","dad8fbbc":"model = tf.keras.Sequential([\n    layers.Dense(128, input_shape=(100,),activation=\"tanh\"),\n    layers.Dense(256, activation=\"tanh\"),\n    layers.Dense(256, activation=\"tanh\"),\n    layers.Dropout(0.2),\n    layers.Dense(128, activation=\"tanh\"),\n    layers.Dropout(0.2),\n    layers.Dense(1)\n])\n\ndef rmse(y_true, y_pred):\n    return tf.sqrt(tf.reduce_mean((y_true-y_pred)**2))\n\n\nmodel.compile(loss=\"mse\",\n              optimizer=tf.keras.optimizers.Adagrad(),\n              metrics=[rmse])\n\nlr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_rmse', patience=2, factor=0.2)\ncb = tf.keras.callbacks.EarlyStopping(monitor=\"val_rmse\", \n                                      patience=10, \n                                      restore_best_weights=True)","72db04da":"history = model.fit(X_train, \n                    y_train, \n                    epochs=200, \n                    validation_data=(X_valid, y_valid), \n                    batch_size=128, \n                    validation_batch_size=64,\n                    callbacks=[cb, lr])","e3b4cc9a":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\n\n\nacc=history.history['rmse']\nval_acc=history.history['val_rmse']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc)) # Get number of epochs\n\nplt.plot(epochs, acc, 'r')\nplt.plot(epochs, val_acc, 'b')\nplt.title('Training and validation RMSE')\nplt.legend([\"Training\", \"Validation\" ])\nplt.xlabel(\"epochs\")\nplt.ylabel(\"Accuracy\")\nplt.ylim(top=8.1)\nplt.figure()\n\nplt.plot(epochs, loss, 'r')\nplt.plot(epochs, val_loss, 'b')\nplt.legend([\"Training\", \"Validation\" ])\nplt.xlabel(\"Epochs\")\nplt.ylim(top=66)\nplt.ylabel(\"Loss\")\n\nplt.title('Training and validation loss (MSE)')\nplt.show()","edd2e163":"predictions = model.predict(test)\noutput = pd.DataFrame({'id': test.index,'loss': np.squeeze(predictions)})\noutput.to_csv('submission.csv', index=False)","ff735c57":"# Visualize Data","ffc7e7fb":"# Read Data","62eb8c90":"# Correlation"}}