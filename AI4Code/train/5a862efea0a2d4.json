{"cell_type":{"77779abb":"code","d03dbe95":"code","b24068fe":"code","92f30ac6":"code","350976b9":"code","2ce83720":"code","cfa1de69":"code","9411fafa":"code","0373f9b1":"markdown"},"source":{"77779abb":"import numpy as np\nimport pandas as pd\nfrom pandas.tseries.frequencies import to_offset\nimport matplotlib.pyplot as plt\n\nsample_size = 100\ndf = pd.DataFrame(\n    {\n        \"signal_1\": np.arange(sample_size),\n        \"signal_2\": np.sin(np.linspace(0, 10, sample_size)),\n    },\n    index=pd.date_range(start=\"1991\", periods=sample_size, freq=\"1s\"),\n)\ndf[:5]\n","d03dbe95":"def rolling_apply_with_strides(\n    df, window_size=15, strides=5, unit=\"s\", functions=[np.mean]\n):\n    def resample_apply(i):\n        resampled = df.resample(\n                f\"{window_size}{unit}\",\n                label=\"left\",\n                offset=f\"{i}{unit}\",\n            ).agg(functions)\n        resampled.index = resampled.index + to_offset(f\"{window_size-1}{unit}\")\n        return resampled\n    res = pd.concat(\n        [\n            resample_apply(i)\n            for i in range(0, window_size, strides)\n        ]\n    ).sort_index()\n    return res\n","b24068fe":"window_size = 4\nunit = \"s\"\nstrides = 2\n\nres = rolling_apply_with_strides(df, window_size=window_size, strides=strides, unit=\"s\", functions=[np.std, np. mean])\n\nfig, ax = plt.subplots()\nax.plot(df[\"signal_2\"], \".:\")\nres[\"signal_2\"].plot(ax=ax, legend=True, style=\"k.:\")\n\nres.shape","92f30ac6":"pd.concat([df, res], axis=1)[:30]","350976b9":"sample_size = 100\ndf = pd.DataFrame(\n    {\n        \"signal_1\": np.arange(sample_size),\n        \"signal_2\": np.sin(np.linspace(0, 10, sample_size)),\n    },\n    index=np.arange(sample_size),\n)\ndf[:5]","2ce83720":"def rolling_apply_with_strides(\n    df, window_size=15, strides=5, functions=[np.mean]\n):\n    def group_apply(i):\n        tmp_df = df.groupby(tmp_index.shift(i)).agg(functions)\n        new_index = df.index[window_size+i-1::window_size]\n        tmp_df = tmp_df.iloc[:new_index.shape[0],:]\n        tmp_df.index = new_index\n        return tmp_df\n    \n    tmp_index = pd.Series(np.arange(df.shape[0]))\n    tmp_index = tmp_index\/\/window_size\n    res = pd.concat(\n        [\n            group_apply(i) for i in range(0, window_size, strides)\n        ]\n    ).sort_index()\n    return res","cfa1de69":"window_size = 4\nstrides = 2\n\nres = rolling_apply_with_strides(df, window_size=window_size, strides=strides, functions=[np.std, np. mean])\n\nfig, ax = plt.subplots()\nax.plot(df[\"signal_2\"], \".:\")\nres[\"signal_2\"].plot(ax=ax, legend=True, style=\"k.:\")\n\nres.shape","9411fafa":"pd.concat([df, res], axis=1)[:20]","0373f9b1":"# DataFrame without datetime index "}}