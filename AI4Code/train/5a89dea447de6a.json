{"cell_type":{"e0eae16f":"code","983dfad8":"code","f25af214":"code","50e4fe1c":"code","eade9106":"code","bca7c6df":"code","ed8b8e4d":"code","e73fd9eb":"code","40c13d12":"code","859ab7be":"code","53c35a47":"code","affcf92e":"code","dc14bb32":"code","ab275b8e":"code","f1ac0a84":"code","35e3fd1b":"code","1e437f33":"code","c2f58f3c":"code","09657a29":"code","0e0770c5":"code","84eb49b2":"code","9d41b9fb":"code","f845b796":"code","06fa075b":"code","59afe5a1":"code","5bece567":"code","54ea0df1":"code","c5168ac5":"code","d8617c65":"code","069dc451":"code","7d324ba4":"code","b45e0578":"code","18ae7947":"code","b99969bf":"code","977bf198":"code","325135ff":"code","8fc3a810":"code","54627cdd":"code","c1e9de2c":"code","e4e91d65":"code","ddadc61b":"code","75d4e891":"code","2339f6a6":"code","9f40e4b3":"code","3451eb86":"code","38ed92ea":"code","7e98752d":"code","1a876663":"code","6158a708":"code","bddec399":"code","4397e354":"code","d190f352":"code","43904de0":"code","ac431592":"code","ce0a55c2":"code","881d964a":"code","1b1a6ffa":"code","7567da2e":"code","8545e221":"code","d1149d7f":"code","8f80b11c":"code","b69e63b4":"code","b359700e":"code","6c557e4c":"code","75b742b5":"code","6dce4dbe":"code","1dee4909":"code","dd275ada":"code","04a24f1a":"code","62b5b6ba":"code","275cc06d":"code","ab357f8e":"code","c8a4be1b":"code","90ba79d0":"code","44e3d06e":"code","87c9b98d":"code","7389a1a5":"code","9d0a498b":"code","1d9ba7bd":"code","fcc365a7":"code","fb315929":"code","9c1433a4":"code","015a8469":"code","635198b8":"code","09b1d20c":"code","0318d5dd":"code","670c9363":"code","05ddb95b":"code","d2507257":"code","4155b62d":"code","553ad8c6":"code","272a7d1f":"code","760a2925":"code","37ddefa9":"code","f181120a":"code","5af5240b":"code","7faf83ff":"code","1eaf91c3":"code","97851273":"code","1a863089":"code","dda846ec":"code","22a5e6f7":"code","5e162397":"code","9e8bb0df":"code","9292ec2d":"code","da4ef023":"code","2e8f4181":"code","a1b49fab":"markdown","a93a5258":"markdown","71f39c84":"markdown","e7c496a8":"markdown","4e804acd":"markdown","859e84f4":"markdown","5bc6fc6c":"markdown","fa8279cf":"markdown","43a6c5fb":"markdown","317335c4":"markdown","ef45ffe8":"markdown","bd3c0d85":"markdown","edfa9c90":"markdown","eedd3a97":"markdown","25d75998":"markdown","7f4a1f8a":"markdown","d37f37be":"markdown"},"source":{"e0eae16f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom lightgbm import LGBMClassifier\nimport datetime","983dfad8":"train = pd.read_csv(\"data\/train.csv\", parse_dates=['Dates'])\ntest = pd.read_csv(\"data\/test.csv\", parse_dates=['Dates'], index_col='Id')","f25af214":"train.head()","50e4fe1c":"test.head()","eade9106":"train.info()","bca7c6df":"test.info()","ed8b8e4d":"train.drop([\"Descript\", \"DayOfWeek\", \"Resolution\"], axis=1, inplace=True)\ntest.drop([\"DayOfWeek\"], axis=1, inplace=True)","e73fd9eb":"train[\"Category\"].value_counts()","40c13d12":"data = train.groupby('Category').count().iloc[:, 0].sort_values(\n    ascending=False)\ndata = data.reindex(np.append(np.delete(data.index, 1), 'OTHER OFFENSES'))\n\nplt.figure(figsize=(10, 10))\nwith sns.axes_style(\"whitegrid\"):\n    ax = sns.barplot(\n        (data.values \/ data.values.sum()) * 100,\n        data.index,\n        orient='h')\n\nplt.title('Incidents per Crime Category')\nplt.xlabel('Incidents (%)')\n\nplt.show()","859ab7be":"train[\"PdDistrict\"].value_counts()","53c35a47":"data = train.groupby('PdDistrict').count().iloc[:, 0].sort_values(\n    ascending=False)\n\nplt.figure(figsize=(10, 10))\nwith sns.axes_style(\"whitegrid\"):\n    ax = sns.barplot(\n        (data.values \/ data.values.sum()) * 100,\n        data.index,\n        orient='h')\n\nplt.title('Incidents per District')\nplt.xlabel('Incidents (%)')\n\nplt.show()","affcf92e":"def append_date_feats(data_df):\n    data_df[\"HourOfDay\"] = data_df['Dates'].dt.hour\n    data_df[\"MinuteOfHour\"] = data_df['Dates'].dt.minute\n    data_df[\"DayOfWeek\"] = data_df[\"Dates\"].dt.dayofweek\n    data_df[\"DayOfMonth\"] = data_df[\"Dates\"].dt.day\n    data_df[\"Year\"] = data_df[\"Dates\"].dt.year\n    data_df[\"MonthOfYear\"] = data_df[\"Dates\"].dt.month\n    data_df[\"QuarterOfYear\"] = data_df[\"Dates\"].dt.quarter\n    #data_df.drop([\"Dates\"], axis=1, inplace=True)","dc14bb32":"append_date_feats(train)\nappend_date_feats(test)","ab275b8e":"train.head()","f1ac0a84":"sns.displot(data=train[train['Category'] == \"PORNOGRAPHY\/OBSCENE MAT\"], x=\"HourOfDay\", hue=\"QuarterOfYear\", kind=\"kde\")","35e3fd1b":"df_tmp = train.loc[train['Category'].isin(\n    ['ROBBERY', 'GAMBLING', 'BURGLARY', 'LARCENY\/THEFT', 'PROSTITUTION'])]\nsns.displot(data=df_tmp, x=\"HourOfDay\", hue=\"Category\", kind=\"kde\")","1e437f33":"print(train.loc[train.Y > 50].count()[0])\ntrain.loc[train.Y > 50].sample(5)","c2f58f3c":"train.drop_duplicates(inplace=True)\ntrain.replace({'X': -120.5, 'Y': 90.0}, np.NaN, inplace=True)\ntest.replace({'X': -120.5, 'Y': 90.0}, np.NaN, inplace=True)\n\nimp = SimpleImputer(strategy='mean')\n\nfor district in train['PdDistrict'].unique():\n    for hod in train['HourOfDay'].unique():\n        train_by_district = train['PdDistrict'] == district\n        train_by_cat = train['HourOfDay'] == hod\n        test_by_district = test['PdDistrict'] == district\n        test_by_cat = test['HourOfDay'] == hod\n        if len(train.loc[train_by_district & train_by_cat]) > 0 and len(test.loc[test_by_district & test_by_cat]) > 0:\n            train.loc[train_by_district & train_by_cat, ['X', 'Y']] = imp.fit_transform(train.loc[train_by_district & train_by_cat, ['X', 'Y']])\n            test.loc[test_by_district & test_by_cat, ['X', 'Y']] = imp.transform(test.loc[test_by_district & test_by_cat, ['X', 'Y']])","09657a29":"print(train.loc[train.Y > 50].count()[0])","0e0770c5":"train.head()","84eb49b2":"train[train['Address'].str.contains('block', case=False)]","9d41b9fb":"train[train['Address'].str.contains('\/', case=False)]","f845b796":"train[train['Address'].str.contains('\/', case=False)]['Address'].value_counts()[:20]","06fa075b":"all_streets = []\nfor add in train['Address'].values:\n    for sub_add in add.split(\" \/ \"):\n        for sub_sub_add in sub_add.split(\" of \"):\n            all_streets.append(sub_sub_add)","59afe5a1":"dfStreets = pd.Series(data=all_streets)","5bece567":"dfStreets.value_counts()[:20]","54ea0df1":"dfStreets[dfStreets.str.contains(\"Block\", case=False)].value_counts()[:10]","c5168ac5":"dfStreets[dfStreets.str.contains(\" ST\", case=False)].value_counts()[:10]","d8617c65":"dfStreets[dfStreets.str.contains(\" AV\", case=False)].value_counts()[:10]","069dc451":"dfStreets[dfStreets.str.contains(\" WY\", case=False)].value_counts()[:10]","7d324ba4":"dfStreets[dfStreets.str.contains(\" TR\", case=False)].value_counts()[:10]","b45e0578":"dfStreets[dfStreets.str.contains(\" DR\", case=False)].value_counts()[:10]","18ae7947":"def address_feats(data_df):\n    data_df[\"near_BLOCK\"] = data_df['Address'].str.contains('block', case=False)\n    data_df[\"near_CROSSING\"] = data_df['Address'].str.contains('\/')\n    data_df[\"near_ST\"] = data_df['Address'].str.contains(' ST')\n    data_df[\"near_AV\"] = data_df['Address'].str.contains(' AV')\n    data_df[\"near_WY\"] = data_df['Address'].str.contains(' WY')\n    data_df[\"near_DR\"] = data_df['Address'].str.contains(' DR')\n    data_df[\"near_TR\"] = data_df['Address'].str.contains(' TR')","b99969bf":"address_feats(train)\naddress_feats(test)","977bf198":"train['Category'].value_counts().index[:10]","325135ff":"top_10_crimes = train['Category'].value_counts().index[:10]\ndf_tmp = train.loc[(train['Category'].isin(top_10_crimes)) & train[\"Address\"].str.contains(\"400 Block\")]\nsns.displot(data=df_tmp, x=\"HourOfDay\", hue=\"Category\", kind=\"kde\")\ndf_tmp = train.loc[(train['Category'].isin(top_10_crimes)) & train[\"Address\"].str.contains(\"TURNER TR\")]\nsns.displot(data=df_tmp, x=\"HourOfDay\", hue=\"Category\", kind=\"kde\")","8fc3a810":"train[train[\"near_BLOCK\"]][\"Category\"].value_counts()[:10]","54627cdd":"train[train[\"near_AV\"]][\"Category\"].value_counts()[:10]","c1e9de2c":"from meteostat import Daily, Hourly, Stations","e4e91d65":"start_date_train, end_date_train = train[\"Dates\"].min(), train[\"Dates\"].max()\nstart_date_test, end_date_test = test[\"Dates\"].min(), test[\"Dates\"].max()\nstart_date_train, end_date_train","ddadc61b":"mean_x, mean_y = train[\"X\"].mean(), train[\"Y\"].mean()\nmean_x, mean_y","75d4e891":"stats = Stations().region(\"US\", \"CA\").fetch(1000)\nstats.head()","2339f6a6":"stats[\"X_Diff\"] = np.abs(stats[\"longitude\"] - mean_x)\nstats[\"Y_Diff\"] = np.abs(stats[\"latitude\"] - mean_y)\nstats[\"XY_Diff\"] = stats[\"X_Diff\"] * stats[\"Y_Diff\"]","9f40e4b3":"stats.sort_values(by=\"XY_Diff\")[:10]","3451eb86":"sf_station = stats.sort_values(by=\"XY_Diff\").index[2]","38ed92ea":"sf_station","7e98752d":"Hourly.clear_cache()","1a876663":"temp_data_train = Hourly(sf_station, start_date_train, end_date_train)\ntemp_data_train = temp_data_train.normalize()\ntemp_data_train = temp_data_train.interpolate()\ntemp_data_train = temp_data_train.fetch()","6158a708":"temp_data_test = Hourly(sf_station, start_date_test, end_date_test)\ntemp_data_test = temp_data_test.normalize()\ntemp_data_test = temp_data_test.interpolate()\ntemp_data_test = temp_data_test.fetch()","bddec399":"len(temp_data_train)","4397e354":"#temp_data_train = temp_data_train.dropna(how=\"all\")\n#temp_data_test = temp_data_test.dropna(how=\"all\")","d190f352":"temp_data_train.iloc[temp_data_train.index.get_loc(train[\"Dates\"][1000],method='nearest')]","43904de0":"temp_fields = [\"temp\", \"dwpt\", \"prcp\", \"rhum\", \"pres\", \"wspd\", \"wdir\"]","ac431592":"round_by_hour = lambda dt: datetime.datetime(dt.year, dt.month, dt.day, dt.hour)\ntrain['Dates_norm'] = train['Dates'].apply(round_by_hour)\ntest['Dates_norm'] = test['Dates'].apply(round_by_hour)","ce0a55c2":"len(test)","881d964a":"len(pd.merge(test, temp_data_test[temp_fields], left_on=\"Dates_norm\", how=\"left\", right_index=True, ))","1b1a6ffa":"train = pd.merge(train, temp_data_train[temp_fields], left_on=\"Dates_norm\", how=\"left\", right_index=True)\ntest = pd.merge(test, temp_data_test[temp_fields], left_on=\"Dates_norm\", how=\"left\", right_index=True)","7567da2e":"train.head()","8545e221":"df_tmp = train.loc[train['Category'].isin(top_10_crimes)]\nsns.displot(data=df_tmp, x=\"wdir\", hue=\"Category\", kind=\"kde\")","d1149d7f":"df_tmp = train.loc[(train['Category'].isin([\"PROSTITUTION\", \"KIDNAPPING\", \"SUICIDE\", \"DRUNKENNESS\"])) & (train[\"prcp\"] > 0.1)]\nsns.jointplot(data=df_tmp, x=\"temp\", y=\"prcp\", kind=\"kde\", hue=\"Category\")","8f80b11c":"from astral.geocoder import database, lookup\nfrom astral.sun import sun","b69e63b4":"round_by_day = lambda dt: dt.date()\ntrain['Dates_norm'] = train['Dates'].apply(round_by_day)\ntest['Dates_norm'] = test['Dates'].apply(round_by_day)","b359700e":"min_date = min(train[\"Dates_norm\"].min(), test[\"Dates_norm\"].min())\nmax_date = max(train[\"Dates_norm\"].max(), test[\"Dates_norm\"].max())","6c557e4c":"sf = lookup(\"San Francisco\", database())\nsun_date_dict = {d.date(): sun(sf.observer, date=d, tzinfo=sf.timezone) for d in pd.date_range(min_date, max_date).to_pydatetime().tolist()}","75b742b5":"def map_date_to_sun(a_date):\n    sun_info = sun_date_dict[a_date.date()]\n    if a_date < sun_info['dawn'].replace(tzinfo=None):\n        return \"PRE_DAWN\"\n    elif a_date < sun_info['sunrise'].replace(tzinfo=None):\n        return \"DAWN_SUNRISE\"\n    elif a_date < sun_info['noon'].replace(tzinfo=None):\n        return \"SUNRISE_NOON\"\n    elif a_date < sun_info['sunset'].replace(tzinfo=None):\n        return \"NOON_SUNSET\"\n    elif a_date < sun_info['dusk'].replace(tzinfo=None):\n        return \"SUNSET_DUSK\"\n    else:\n        return \"POST_DUSK\"","6dce4dbe":"print(train[\"Dates\"][250])\nprint(map_date_to_sun(train[\"Dates\"][250]))","1dee4909":"train[\"sun_info\"] = train[\"Dates\"].apply(map_date_to_sun)\ntest[\"sun_info\"] = test[\"Dates\"].apply(map_date_to_sun)","dd275ada":"train.head()","04a24f1a":"df_tmp = train.loc[train['Category'].isin([\"PROSTITUTION\"])]\nsns.displot(data=df_tmp, x=\"MonthOfYear\", hue=\"sun_info\", kind=\"kde\")","62b5b6ba":"test.drop([\"Address\", \"Dates_norm\", \"Dates\"], axis=1, inplace=True)\ntrain.drop([\"Address\", \"Dates_norm\", \"Dates\"], axis=1, inplace=True)","275cc06d":"test.fillna(0, inplace=True)\ntrain.fillna(0, inplace=True)","ab357f8e":"train = pd.get_dummies(train, columns=[\"PdDistrict\", \"sun_info\"])\ntest = pd.get_dummies(test, columns=[\"PdDistrict\", \"sun_info\"])","c8a4be1b":"train.info()","90ba79d0":"test.info()","44e3d06e":"le_category = LabelEncoder()\ny = le_category.fit_transform(train['Category'])","87c9b98d":"from sklearn.preprocessing import MinMaxScaler","7389a1a5":"scaler = MinMaxScaler()","9d0a498b":"X = train.drop([\"Category\"], axis=1)","1d9ba7bd":"X = scaler.fit_transform(X)","fcc365a7":"X.shape","fb315929":"X[0]","9c1433a4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1337)","015a8469":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","635198b8":"#model = RandomForestClassifier(n_jobs=-1).fit(X_train, y_train)\n\n#model = LGBMClassifier(objective='multiclass', num_class=39).fit(X_train, y_train)","09b1d20c":"from sklearn.experimental import enable_hist_gradient_boosting  # noqa\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, AdaBoostClassifier, HistGradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier","0318d5dd":"mlp = MLPClassifier(random_state=1, hidden_layer_sizes=15, verbose=True)","670c9363":"mlp.fit(X_train, y_train)","05ddb95b":"model = mlp","d2507257":"hgbc = HistGradientBoostingClassifier() # 26%","4155b62d":"hgbc.fit(X_train, y_train)","553ad8c6":"model = hgbc","272a7d1f":"#clf1 = HistGradientBoostingClassifier() # 26%\n#clf2 = RandomForestClassifier() # 25%\n#clf3 = LGBMClassifier(objective='multiclass', num_class=39) # 27%","760a2925":"abc = AdaBoostClassifier(random_state=0)","37ddefa9":"abc.fit(X_train, y_train)","f181120a":"model = abc","5af5240b":"model = VotingClassifier(estimators=[('hgbc', hgbc), ('mlp', mlp), (\"abc\", abc)], voting='soft', )","7faf83ff":"model.fit(X_train, y_train)","1eaf91c3":"predict_y = model.predict_proba(scaler.transform(test))","97851273":"predict_y.shape","1a863089":"df_sub = pd.DataFrame(predict_y, columns=le_category.classes_)\ndf_sub['Id'] = test.index\ndf_sub = df_sub.round(4)","dda846ec":"df_sub.to_csv('submission_voting.csv', index=False)","22a5e6f7":"from sklearn.metrics import classification_report\n\npredict_y_t = model.predict(X_test)\nprint(classification_report(y_test, predict_y_t, target_names=le_category.inverse_transform(np.arange(39)), labels=np.arange(39)))","5e162397":"perm = PermutationImportance(model).fit(X_test[:10000], y_test[:10000])\neli5.show_weights(perm, feature_names=train.drop(\"Category\", axis=1).columns.tolist())","9e8bb0df":"eli5.show_weights(perm, feature_names=train.drop(\"Category\", axis=1).columns.tolist(), top=100)","9292ec2d":"data_for_prediction = test.iloc[8262]\ndata_for_prediction","da4ef023":"import shap","2e8f4181":"shap.initjs()\n\n# Create object that can calculate shap values\nexplainer = shap.TreeExplainer(model)\n\n# Calculate Shap values\nshap_values = explainer.shap_values(data_for_prediction)\n\nshap.force_plot(explainer.expected_value[4], shap_values[4], data_for_prediction, link='logit')","a1b49fab":"## Eval Results","a93a5258":"## Import Data","71f39c84":"# SF Crime Data Analysis","e7c496a8":"To improve our accuracy, we will engineer some new features based on our existing data.","4e804acd":"A lot of examples in `train` are not located in San Francisco. We have to impute the values based on the mean of the district.","859e84f4":"# Model Prediction","5bc6fc6c":"After engineering some new features, it is time to make some predicitons and train our model.","fa8279cf":"## Weather Analysis","43a6c5fb":"## Sunlight Analysis","317335c4":"## Impute Coordinates","ef45ffe8":"Since we have some columns in `train`, which don't occure in `test`, we should drop them imediatly. Other columns like `DayOfWeek` is not necessary, since we got a date as ID.","bd3c0d85":"# Data Insights","edfa9c90":"## Address Features","eedd3a97":"## Export Submissions File","25d75998":"# Feature Engineering","7f4a1f8a":"## Date Features","d37f37be":"## Clean Initial Data"}}