{"cell_type":{"b1156d25":"code","bc655057":"code","271c2542":"code","0c8c1a7f":"code","3a15a41e":"code","998ddfe7":"code","98349eaa":"code","7c22f46d":"code","b0b3a731":"code","d12dc6ef":"code","1aec06a9":"code","b60f98e6":"code","c747d1dd":"code","c255240d":"code","71ef5a07":"code","780e5517":"code","a3fc3d7f":"code","55ccc0ce":"code","a6bc46f8":"code","b9a8ba0e":"code","02ba2dd7":"code","47b9d3f2":"code","d6b980fb":"code","de310d88":"code","f4ef028d":"code","b04c82ef":"code","c94cfd4b":"code","bde973d0":"code","0c3449c7":"code","a2960e8c":"code","8832191e":"code","a46ef7bf":"code","94b0650e":"code","4d548cab":"code","6cd7baa9":"code","e3493d9c":"code","ffa171e4":"code","f08b4706":"code","5edbc7d7":"code","e8e99542":"code","3d4cba93":"code","ea47b849":"code","2f0513b5":"code","ef2eb989":"code","074d80d0":"code","9c5fa9c8":"code","381786b3":"code","37c8032e":"code","7cb9398c":"code","e4c6d483":"code","2fb7c685":"code","31d72044":"code","2d65290d":"code","07f219d3":"code","a7af56ca":"code","1ed3fa5d":"code","fc0b201c":"code","b5bc0b5a":"code","837d4669":"code","e215561b":"code","1755d2c3":"code","7b950f62":"code","7e2bc36a":"code","18c90b8e":"code","eaedbca2":"code","00f35772":"code","454157c4":"code","c2f3638d":"code","bb80eb54":"code","c8611092":"code","60c2b4bd":"code","f9c99721":"code","1c1082b9":"code","85e7f1ff":"code","6fbc76e3":"code","f365d847":"code","f401e36b":"code","06ee0aaa":"code","afe72750":"code","13d9fdf7":"code","512d1b75":"code","4c052cf9":"code","4a79ff32":"markdown","c9c89276":"markdown","74892018":"markdown","584d69f7":"markdown","2f9344e9":"markdown","6960d16d":"markdown","46bb5ed2":"markdown","43dc61a6":"markdown","de888a74":"markdown","e6d285b3":"markdown","d8ce63d3":"markdown","8972193d":"markdown","3e03ccf4":"markdown","57daa46c":"markdown","eaf8884e":"markdown","0f6b208e":"markdown","4a2efd36":"markdown","98522206":"markdown","6a21a4b4":"markdown"},"source":{"b1156d25":"%matplotlib inline","bc655057":"import numpy as np \nimport pandas as pd \nimport plotly_express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cufflinks as cf\ncf.go_offline(False)\ncf.set_config_file(sharing = 'public',theme = 'space')\nfrom cufflinks import iplot","271c2542":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest =  pd.read_csv('..\/input\/titanic\/test.csv')","0c8c1a7f":"train.head()","3a15a41e":"test.head()","998ddfe7":"train.shape,test.shape","98349eaa":"#Columns with missing values and percetage of missing values in them\nnull_columns = [col for col in train.columns if train[col].isnull().sum()>1]\nfor col in null_columns:\n    print(col,': {},count {}'.format(train[col].isnull().mean(),train[col].isnull().sum()))","7c22f46d":"for col in null_columns:\n    df = train.copy()\n    df[col] = np.where(df[col].isna(),1,0)\n    df.groupby(col)['Survived'].value_counts().iplot(kind = 'bar',xTitle = '(Missing,Survived)',yTitle = 'count')","b0b3a731":"num_cols = [col for col in train.columns if train[col].dtypes!='O']#Features with numerical values\nconti_cols = ['Age','Fare']#Features with continuous numerical values","d12dc6ef":"#Let's find out the disribution of continuous varibles by plotting histograms.\nfor col in conti_cols:\n    df = train.copy()\n    df[col].iplot(kind = 'hist',linecolor = 'white',xTitle = col,yTitle = 'count')","1aec06a9":"for col in conti_cols:\n    df = train.copy()\n    df.groupby('Survived')[col].mean().iplot(kind = 'bar',xTitle = 'Survived',yTitle = 'mean'+col)","b60f98e6":"for col in conti_cols:\n    df = train.copy()\n    fig = px.histogram(data_frame=df,color='Survived',x = col,barmode='group',template='plotly_dark')\n    fig.show()","c747d1dd":"#Let's find out the outliers by ploting box plots for continuous variables\nfor col in conti_cols:\n    df = train.copy()\n    fig = px.box(y= col,data_frame=df,width=600,height=400,template = 'plotly_dark')\n    fig.show()","c255240d":"disc_cols = [col for col in num_cols if col not in conti_cols+['PassengerId']]#Features with discrete numerical values\ndisc_cols","71ef5a07":"for col in disc_cols:\n    df = train.copy()\n    df.groupby('Survived')[col].value_counts().iplot(kind = 'bar',xTitle = '(Survived,'+col+')',yTitle = 'count')","780e5517":"cat_col = [col for col in train.columns if train[col].dtypes == 'O']\ncat_col","a3fc3d7f":"train[cat_col].head()","55ccc0ce":"for col in cat_col:\n    print(col,\"cardinality is {}\".format(train[col].nunique()))","a6bc46f8":"for col in ['Sex','Embarked']:\n    df = train.copy()\n    fig = px.histogram(x= col,data_frame=df,color = 'Survived',height = 400,width = 600,barmode='group',template = 'plotly_dark')\n    fig.show()","b9a8ba0e":"fig = px.bar(x ='Cabin',data_frame = train,barmode='group',template='plotly_dark')\nfig.show()","02ba2dd7":"df = train.copy()\ndf['deck'] = train.Cabin.str[0]","47b9d3f2":"df.deck.unique()","d6b980fb":"train['missingcabin'] = np.where(train.Cabin.isna(),1,0)","de310d88":"train.missingcabin.value_counts()","f4ef028d":"train['deck'] = df.deck.fillna('Z')","b04c82ef":"train.deck.value_counts()","c94cfd4b":"df = test.copy()\ndf['deck'] = df.Cabin.str[0]","bde973d0":"df.deck.unique()","0c3449c7":"test['missingcabin'] = np.where(test.Cabin.isna(),1,0)\ntest['deck'] = df.deck.fillna('Z')\ntest.deck.value_counts()","a2960e8c":"train['title'] = train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","8832191e":"test['title'] = test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","a46ef7bf":"test['title'].value_counts()","94b0650e":"train['title'].value_counts()","4d548cab":"rep = {'Mr':'Mr','Miss':'Miss','Mrs':'Mrs','Master':'Master','Dr':'Miss','Rev':'Mr','Col':'Mr','Mile':'Miss','Major':'Mr','Ms':'Rare','Countess':'Mrs','Lady':'Mrs','Jonkheer':'Mrs','Mme':'Rare','Don':'Rare','Capt':'Rare','Sir':'Rare'}\n\ntrain['title'] = train.title.map(rep)","6cd7baa9":"train.title.value_counts()","e3493d9c":"rep = {'Mr':'Mr','Miss':'Miss','Mrs':'Mrs','Master':'Master','Col':'Mr','Rev':'Mr','Dr':'Miss','Dona':'Rare','Ms':'Rare'}\ntest['title'] = test.title.map(rep)\ntest.title.value_counts()","ffa171e4":"train.head()","f08b4706":"test.head()","5edbc7d7":"train.drop(['PassengerId','Name'],axis = 1,inplace = True)\ntest.drop(['PassengerId','Name'],axis = 1,inplace = True)","e8e99542":"train.shape,test.shape","3d4cba93":"train['famsize'] = train['SibSp']+train['Parch']+1\ntest['famsize'] = test['SibSp']+test['Parch']+1","ea47b849":"train.head()","2f0513b5":"test.head()","ef2eb989":"train.drop(['Cabin','Ticket'],axis = 1,inplace = True)\ntest.drop(['Cabin','Ticket'],axis = 1,inplace = True)","074d80d0":"x = train.groupby(['Pclass','title']).mean()['Age']# class and title wise age for impotation of missing values\nprint(x)","9c5fa9c8":"x.iplot(kind = 'bar',yTitle='Mean-Age',xTitle='(class,Title)',linecolor = 'white')","381786b3":"def apply_age(title,Pclass):\n    if(title=='Master' and Pclass==1):\n        age=5\n    elif (title=='Miss' and Pclass==1):\n        age=31\n    elif (title=='Mr' and Pclass==1):\n        age=42\n    elif (title=='Mrs' and Pclass==1):\n        age=40\n    elif (title=='Rare' and Pclass==1):\n        age=46\n    elif (title=='Master' and Pclass==2):\n        age=2\n    elif (title=='Mr' and Pclass==2):\n        age=33\n    elif (title=='Mrs' and Pclass==2):\n        age=33\n    elif (title=='Miss' and Pclass==2):\n        age=23\n    elif (title=='Rare' and Pclass==2):\n        age=28\n    elif (title=='Master' and Pclass==3):\n        age=5\n    elif (title=='Mr' and Pclass==3):\n        age=28\n    elif (title=='Miss' and Pclass==3):\n        age=16\n    elif (title=='Mrs' and Pclass==3):\n        age=33\n    else:\n        age=30 # mean age considered from describe()\n    return age","37c8032e":"y = test.groupby(['Pclass','title']).mean()['Age']\nprint(y)","7cb9398c":"y.iplot(kind = 'bar',xTitle = '(Class,Title)',yTitle = \"mean-age\")","e4c6d483":"train['Agemissing'] = np.where(train.Age.isna(),1,0)","2fb7c685":"age_null = train[train.Age.isna()]\nage_null['Age'] = age_null.apply(lambda row : apply_age(row['title'],row['Pclass']), axis = 1) \ntrain['Age'].fillna(value=age_null['Age'],inplace=True)","31d72044":"def apply_age_test(title,Pclass):\n    if(title=='Master' and Pclass==1):\n        age=8\n    elif (title=='Miss' and Pclass==1):\n        age=31\n    elif (title=='Mr' and Pclass==1):\n        age=42\n    elif (title=='Mrs' and Pclass==1):\n        age=43\n    elif (title=='Rare' and Pclass==1):\n        age=40\n    elif (title=='Master' and Pclass==2):\n        age=4\n    elif (title=='Mr' and Pclass==2):\n        age=33\n    elif (title=='Mrs' and Pclass==2):\n        age=33\n    elif (title=='Miss' and Pclass==2):\n        age=17\n    elif (title=='Rare' and Pclass==2):\n        age=28\n    elif (title=='Master' and Pclass==3):\n        age=5\n    elif (title=='Mr' and Pclass==3):\n        age=28\n    elif (title=='Miss' and Pclass==3):\n        age=16\n    elif (title=='Mrs' and Pclass==3):\n        age=33\n    else:\n        age=30 # mean age considered from describe()\n    return age","2d65290d":"test['Agemissing'] = np.where(test.Age.isna(),1,0)","07f219d3":"age_null_test = test[test.Age.isna()]\nage_null_test['Age'] = age_null_test.apply(lambda row : apply_age(row['title'],row['Pclass']), axis = 1) \ntest['Age'].fillna(value=age_null_test['Age'],inplace=True)","a7af56ca":"test.Age.isna().sum()","1ed3fa5d":"cat_train = train.copy()\ncat_test = test.copy()","fc0b201c":"train = pd.get_dummies(train,drop_first=True)\ntest = pd.get_dummies(test,drop_first=True)","b5bc0b5a":"train.head()","837d4669":"test.head()","e215561b":"col = [col for col in train.columns if col not in test.columns]\nprint(col)","1755d2c3":"train.drop('deck_T',axis = 1,inplace = True)","7b950f62":"train.shape","7e2bc36a":"y = train['Survived']\ntrain.drop('Survived',axis = 1,inplace = True)","18c90b8e":"pclass = {1:3,2:2,3:1}\ntrain['Pclass'] = train.Pclass.map(pclass)","eaedbca2":"train.Pclass.value_counts()","00f35772":"test['Pclass'] = test.Pclass.map(pclass)","454157c4":"train.info()","c2f3638d":"test.info()","bb80eb54":"test.Fare.fillna(test.Fare.median(),inplace=True)","c8611092":"test.info()","60c2b4bd":"test.Agemissing.value_counts()","f9c99721":"from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,ExtraTreesClassifier,VotingClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier,XGBRFClassifier\nfrom catboost import CatBoostClassifier","1c1082b9":"from sklearn.metrics import classification_report,accuracy_score,f1_score,roc_auc_score","85e7f1ff":"rf = RandomForestClassifier(n_estimators=150,max_depth=4,random_state=42)","6fbc76e3":"rf.fit(train,y)","f365d847":"print(classification_report(y,rf.predict(train)))","f401e36b":"roc_auc_score(y,rf.predict(train))","06ee0aaa":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","afe72750":"submission['Survived'] = rf.predict(test)","13d9fdf7":"submission.to_csv('Submission1',index=False)","512d1b75":"lgb = LGBMClassifier(n_estimators=200,max_depth=5,learning_rate=0.01,random_state=42)\nlgb.fit(train,y)\nprint(classification_report(y,lgb.predict(train)),roc_auc_score(y,lgb.predict(train)))","4c052cf9":"submission['Survived'] = lgb.predict(test)\nsubmission.to_csv('submission2',index = False)","4a79ff32":"**Hello! Kagglers welcome to your first machine learning competition on kaggle. In this notebook I have explained how one should approach any Machine Learning problem step by step,I too follow these steps while solving any machine learning problem.**","c9c89276":"# Workflow\n\n1. Exploratory Data Anlysis\n\n   1.Missing Values and ralation with target\n   \n   2.Numerical Variables(both continuous and discrete) distribution and their realtionship with target\n   \n   3.Outliers in Numerical Variables\n   \n   4.Categorical Variables distribution and their relationship with target.\n   \n   5.Cardinality of categorical variables.\n2. Feature Engineering\n3. Model Building\n4. Hyperparameter Tuning","74892018":"## Cardinality of categorical variables","584d69f7":"1. For missing values in Age 52 ot of 177 of the missing values instances Survived whereas 290 out of 714 of the non missing values instances Survived.\n2. For Cabin column 206 out 687 missing values instances are Survived so there must be some relation ship between cabin and data and survival chance\n3. For Embarked there are only 2 missing values and both are survived.","2f9344e9":"#### Relationship between Sex and Embarked categorical feature and target variable","6960d16d":"## Categorical Variables","46bb5ed2":"1. 342 out of 891 People survived, so our target variable is preety much balanced.\n2. Very large no. of passengers(372) from class 3 are not survived, whereas more passangers are survived in class 2 and class 3 than died.","43dc61a6":"#### Till this version of the notebook of I have done Exploratory Data Analysis,Feature Engineeringand created a baseline model, maybe in the next version i will do some hyperparameter tuning to improve score.\n\n**If you liked this notebook please upvote**","de888a74":"## Numerical variables.\n\nThere are two types of numerical variables in this dataset:\n1. Continuous numerical\n2. Discrete numerical","e6d285b3":"## Outliers in continuous variables","d8ce63d3":"1. Age column has some ouliers because of elderly people and kids on the ship.\n3. Fare column has many outliers it is because rich people have given more money for there covinience and comfort.","8972193d":"**Let's See how target variable is dependent on continuous numerical feature**","3e03ccf4":"## Missing values","57daa46c":"1. Age column is preety much normal distributed with some right side skewness.\n2. Fare column is highly skewed because most passengers on the ship were of third and second class passengers hence mostly data is distributed in low fare area.","eaf8884e":"**Let's see the realtionship between the discrete numerical fetures and dependent variables**","0f6b208e":"1. Name,Cabin,and Ticket columns have very high cardinality i will find a some way to reduce their high cardinality for that more analysis is needed","4a2efd36":"## Exploratory Data Analysis","98522206":"1. Cabin column has most missing values(77%) - I might drop this column in feature engineering section or create some new meaningful feature \n2. Age column has around 20% missing values.\n3. Embarked column has only 0.22% missing value-It will be filled by most frequent category in feature engineering section","6a21a4b4":"#### Check If there is any relationship betwwen null values and target variable \n\nFor this i will replace all missing values in those above missing value containing columns and replace them by 1 and others by 0 and then by ploting i will try to interpret the relation."}}