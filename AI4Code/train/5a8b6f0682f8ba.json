{"cell_type":{"a9201fb7":"code","bc8cc131":"code","b58770a3":"code","1572f643":"code","46007d77":"code","5d4d0afe":"code","6541ae5d":"code","9d1fc035":"markdown"},"source":{"a9201fb7":"import numpy as np\nimport pandas as pd\n\nfrom pathlib import Path\ndata_path_benchmark = Path('\/kaggle\/input\/covid19-benchmarks\/')\ndata_path_competition = Path('\/kaggle\/input\/covid19-global-forecasting-week-4\/')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt","bc8cc131":"train = pd.read_csv(data_path_competition \/ 'train.csv', index_col='Id')\nwk4_test = pd.read_csv(data_path_competition \/ 'test.csv', index_col='ForecastId')\n\nwk4_preds_fatalities = pd.read_csv(data_path_benchmark \/ 'wk4_preds_fatalities_selected_deduped.csv', index_col='ForecastId')\n\nihme_cols = ['location_name', 'date', 'deaths_mean','deaths_lower', 'deaths_upper']\nihme_1 = pd.read_csv(data_path_benchmark \/ 'ihme_2020_04_13.csv')[ihme_cols]\nihme_2 = pd.read_csv(data_path_benchmark \/ 'ihme_2020_04_16.csv')[ihme_cols]\n\nlanl_cols = ['dates', 'q.50', 'state']\nlanl_1 = pd.read_csv(data_path_benchmark \/ 'lanl_2020_04_12.csv')[lanl_cols]\nlanl_2 = pd.read_csv(data_path_benchmark \/ 'lanl_2020_04_15.csv')[lanl_cols]","b58770a3":"states = [\n  'Alabama','Alaska','Arizona','Arkansas','California','Colorado',\n  'Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois',\n  'Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland',\n  'Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana',\n  'Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York',\n  'North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania',\n  'Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah',\n  'Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming']\nlen(states)","1572f643":"def plot_fatalities(state, ax, add_legend=False):\n    max_preds = []\n\n    # Actual\n    select = (train['Country_Region']=='US') & (train['Province_State']==state)\n    ids = train.loc[select].index.tolist()\n    dates = train.loc[select, 'Date'].values\n    data = train.loc[ids, 'Fatalities'].values\n    ax.semilogy(dates, data, c='k', label='Actual', linewidth=4)\n\n    # LANL 1\n    lanl_ids = lanl_1['state'] == state\n    dates = lanl_1.loc[lanl_ids, 'dates'].values\n    data = lanl_1.loc[lanl_ids, 'q.50'].values\n    ax.semilogy(dates, data, label=f'LANL    (Apr 12)', c='g', alpha=0.5, linestyle='--')\n    \n    # IHME 1\n    ihme_ids = ihme_1['location_name'] == state\n    dates = ihme_1.loc[ihme_ids, 'date'].values.tolist()\n    data = ihme_1.loc[ihme_ids, 'deaths_mean'].cumsum().values.tolist()\n    start = dates.index('2020-03-15')\n    dates = dates[start:]\n    data = data[start:]\n    ax.semilogy(dates, data, label=f'IHME    (Apr 13)', alpha=0.5, c='b', linestyle='--')\n\n    # Kaggle Median\n    select = (wk4_test['Country_Region']=='US') & (wk4_test['Province_State']==state)\n    ids = wk4_test.loc[select].index.tolist()\n    dates = wk4_test.loc[select, 'Date'].tolist()\n    data = wk4_preds_fatalities.loc[ids].quantile(0.5, axis=1).values\n    ax.semilogy(dates[13:], data[13:], c='r', linestyle='--', label=f'Kaggle (Apr 14)') # predictions start on 13th row\n\n    # Top four Week 3 teams\n    subs = ['15210308.csv', '15210199.csv', '15208266.csv', '15210154.csv']\n    data = wk4_preds_fatalities.loc[ids, subs].quantile(0.5, axis=1).values\n    ax.semilogy(dates[13:], data[13:], c='r', label=f'Top Kaggle Week 3 Teams (Apr 14)') # predictions start on 13th row\n    \n    # LANL 2\n    lanl_ids = lanl_2['state'] == state\n    dates = lanl_2.loc[lanl_ids, 'dates'].values\n    data = lanl_2.loc[lanl_ids, 'q.50'].values\n    ax.semilogy(dates, data, label=f'LANL    (Apr 15)', c='g')\n    \n    # IHME 2\n    ihme_ids = ihme_1['location_name'] == state\n    dates = ihme_2.loc[ihme_ids, 'date'].values.tolist()\n    data = ihme_2.loc[ihme_ids, 'deaths_mean'].cumsum().values.tolist()\n    start = dates.index('2020-03-15')\n    dates = dates[start:]\n    data = data[start:]\n    ax.semilogy(dates, data, label=f'IHME    (Apr 16)', c='b')\n    max_preds.append(data[-1])\n    \n\n    ax.set_xlim(('2020-04-01', '2020-05-31'))\n    xtick_labels = [d.strftime('%Y-%m-%d') for d in pd.date_range('2020-04-01', '2020-05-31', freq='7d')]\n    ax.set_xticks(xtick_labels)\n    ax.grid(False)\n    ax.tick_params(axis='x', rotation=90)\n    ax.set_ylim(1, 10 ** 5)\n    if add_legend:\n        plt.legend(fontsize=16, loc='lower right')\n    else:\n        ax.text('2020-05-10', 3, state)\n        ","46007d77":"state = 'California'\nfig, ax = plt.subplots(nrows=1, ncols=1, sharex=True, sharey=True, figsize=(16, 9))\nplot_fatalities(state=state, ax=ax, add_legend=True)\nplt.title(f'{state} Fatalities (Cumulative)\\n', fontsize=24)\nplt.show();","5d4d0afe":"nr, nc = 5, 5\nfig, axs = plt.subplots(nrows=nr, ncols=nc, sharex=True, sharey=True, figsize=(20, 10))\nfor ax, state in zip(axs.flatten(), states[: nr * nc]):\n    plot_fatalities(state, ax)\n\nfig.autofmt_xdate()\nfor ax in axs.flatten():\n    ax.tick_params(axis='x', rotation=90)\nplt.suptitle('Cumulative Fatalities in US states', fontsize=24)\nplt.tight_layout()\nplt.show()","6541ae5d":"fig, axs = plt.subplots(nrows=nr, ncols=nc, sharex=True, sharey=True, figsize=(20, 10))\nfor ax, state in zip(axs.flatten(), states[-nr * nc:]):\n    plot_fatalities(state, ax)\n\nfig.autofmt_xdate()\nfor ax in axs.flatten():\n    ax.tick_params(axis='x', rotation=90)\nplt.suptitle('Cumulative Fatalities in US states', fontsize=24)\nplt.tight_layout()\nplt.show()","9d1fc035":"# US States A-Z"}}