{"cell_type":{"8fef2efe":"code","d21fb5f0":"code","b9765437":"code","c4c53fb5":"code","b46b9c55":"code","8b1c2082":"code","939e728a":"code","793924c1":"code","a853197c":"code","b50cec8f":"code","74e0a588":"code","96ba1fdd":"code","d1d13e9a":"code","59afd1d4":"code","22590e68":"code","68872e02":"code","47e676c5":"code","e14a9989":"code","bbac0e04":"code","e309c8b8":"code","6c13ab3a":"code","3d2b61db":"code","5536cf2f":"code","f8672adb":"code","e0a80925":"code","0855b1b6":"code","713ee17d":"code","fa27f10e":"code","7a03dc2b":"code","32a7af2f":"code","396e51eb":"code","cb73d027":"code","3699548e":"markdown","8659289a":"markdown","20dc81e2":"markdown","875de640":"markdown","76b5d9eb":"markdown","eb60a9b4":"markdown","75221477":"markdown","76ab5968":"markdown","566c31f8":"markdown","c91a3d54":"markdown"},"source":{"8fef2efe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d21fb5f0":"# read data\ndata = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata = data.set_index('id')\ndata.head()","b9765437":"# indexing using square brackets\ndata[\"price\"][2539]","c4c53fb5":"# Using column attribute and row label\ndata.price[2539]","b46b9c55":"# using lco accessor\ndata.loc[2539,[\"price\"]]","8b1c2082":"# Selecting only some columns\ndata[[\"price\",\"room_type\"]]","939e728a":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"price\"]))\nprint(type(data[[\"price\"]]))","793924c1":"# slicing and indexing series\ndata.loc[2539:25000,[\"price\",\"room_type\"]]","a853197c":"# reverse slicing\ndata.loc[24143:2539:-1,\"price\",\"minimum_nights\"]","b50cec8f":"# From something to end\ndata.loc[2539:25000,\"price\":]","74e0a588":"# Creating boolean series\nboolean = data.price >6000\ndata[boolean]","96ba1fdd":"# Combining filters\nfirst_filter = data.price >6000\nsecond_filter = data.minimum_nights >15\ndata[first_filter & second_filter]","d1d13e9a":"# Filtering column based others\ndata.price[data.minimum_nights<30]","59afd1d4":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.price.apply(div)","22590e68":"# or we can use lambda function\ndata.price.apply(lambda n: n\/2)","68872e02":"# Defining column using other columns\ndata[\"room_fee_per_day\"] = data.price \/ data.minimum_nights\ndata.head()","47e676c5":"# our index name is this:\nprint(data.index.name)\n#lets change it\ndata.index.name = \"id_number\"\ndata.head()","e14a9989":"# Overwrite index\n# if we want to modify index we need to change all of them\ndata.head()\n# first copy of our data to data3 then change index\ndata3 = data.copy()\n#lets make index start from 100. \ndata3.index = range(1,48896,1)\ndata3.head()","bbac0e04":"# lets read data frame one more time to start from beginning\ndata1 = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata1.head(100)","e309c8b8":"# Setting index: neighbourhood is outer minimum_nights is inner index\ndata1 = data.set_index([\"neighbourhood\",\"neighbourhood_group\"])\ndata1.head(100)","6c13ab3a":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","3d2b61db":"#pivoting\ndf.pivot(index =\"treatment\",columns = \"gender\",values=\"response\")","5536cf2f":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf","f8672adb":"# level determines indexes\ndf1.unstack(level =0)","e0a80925":"df1.unstack(level=1)","0855b1b6":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","713ee17d":"df","fa27f10e":"# df.pivot(index =\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df, id_vars =\"treatment\", value_vars=[\"age\",\"response\"])","7a03dc2b":"# We will use df\ndf","32a7af2f":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","396e51eb":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","cb73d027":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","3699548e":"# SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","8659289a":"# TRANSFORMING DATA\n\n* Plain python function\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","20dc81e2":"# FILTERING DATA FRAMES\n\n<br> Creating boolean series Combining filters filtering column based others","875de640":"### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","76b5d9eb":"# MANIPULATING DATA FRAMES WITH PANDAS\n\n**INDEXING DATA FRAMES**\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* selecting only some columns","eb60a9b4":"### MELTING DATA FRAMES\n* Reverse of pivoting","75221477":"# INDEX OBJECTS AND LABELED DATA\n\n<br> sequence of label","76ab5968":"# HIERARCHICAL INDEXING\n* Setting indexing","566c31f8":"### CATEGORICALS AND GROUPBY","c91a3d54":"# PIVOTING DATA FRAMES\n\n* pivoting: reshape tool"}}