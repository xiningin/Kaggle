{"cell_type":{"01fea90a":"code","e5e4463d":"code","9b36bb5f":"code","23f55f9d":"code","6d85d34d":"code","0a4d605d":"code","02daaaeb":"code","611cc942":"code","893d391b":"code","c6f887bd":"code","3580f176":"code","4f2e3608":"code","c47ece29":"code","16d7c4af":"code","5409b7a0":"code","e95216c5":"code","11a33d8a":"markdown","6e46309c":"markdown","df53732c":"markdown","9353a585":"markdown","00d0b8a0":"markdown","8ccc6d09":"markdown","3fe8a928":"markdown","673e3c9d":"markdown","da052c72":"markdown"},"source":{"01fea90a":"# Importing all libraries required in this notebook\nimport pandas as pd\nimport numpy as np  \nimport matplotlib.pyplot as plt  \n%matplotlib inline","e5e4463d":"#import data\nFile_path = \"..\/input\/student-hours-scores\/Hours and Scores.csv\"\nHS_data = pd.read_csv(File_path)\nprint(\"Data imported successfully\")\n","9b36bb5f":"HS_data.head(10)","23f55f9d":"HS_data.isnull()","6d85d34d":"HS_data.notnull()","0a4d605d":"# Plotting the distribution of scores\nHS_data.plot(x='Hours', y='Scores', style='o')  \nplt.title('Hours against Percentage of scores')  \nplt.xlabel('Hours Studied')  \nplt.ylabel('Percentage Score')  \nplt.show()","02daaaeb":"#Drop a column\nHS_data.pop('Unnamed: 0')","611cc942":"print(HS_data)","893d391b":"X = HS_data.iloc[:, :-1].values  \ny = HS_data.iloc[:, 1].values  ","c6f887bd":"from sklearn.model_selection import train_test_split  \nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                            test_size=0.2, random_state=0) ","3580f176":"from sklearn.linear_model import LinearRegression  \nregressor = LinearRegression()  \nregressor.fit(X_train, y_train) \n\nprint(\"Training complete.\")","4f2e3608":"# Plotting the regression line\nline = regressor.coef_*X+regressor.intercept_\n\n# Plotting for the test data\nplt.scatter(X, y)\nplt.plot(X, line);\nplt.title(\"Regression Line\")\nplt.show()","c47ece29":"print(X_test) # Testing data - In Hours\ny_pred = regressor.predict(X_test) # Predicting the scores","16d7c4af":"# Comparing Actual vs Predicted\nHS_data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  \nprint(HS_data)","5409b7a0":"# You can also test with your own data\nhours=9.25\nhours=np.array(hours).reshape(1, -1)\nown_pred = regressor.predict(hours)\nprint(\"No of Hours = {}\".format(hours))\nprint(\"Predicted Score = {}\".format(own_pred[0]))","e95216c5":"from sklearn import metrics  \nprint('Mean Absolute Error:', \n      metrics.mean_absolute_error(y_test, y_pred)) ","11a33d8a":"### **Preparing the data**\n\nThe next step is to divide the data into \"attributes\" (inputs) and \"labels\" (outputs).","6e46309c":"> ****Y'all Have A Good Evening!!","df53732c":"Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:","9353a585":"### **Making Predictions**\nNow that we have trained our algorithm, it's time to make some predictions.","00d0b8a0":"### **Evaluating the model**\n\nThe final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics.","8ccc6d09":"**From the graph above, we can clearly see that there is a positive linear relation between the number of hours studied and percentage of score.**","3fe8a928":"## **Linear Regression with Python Scikit Learn**\nIn this section we will see how the Python Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables.\n\n### **Simple Linear Regression**\nIn this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.","673e3c9d":"### **Training the Algorithm**\nWe have split our data into training and testing sets, and now is finally the time to train our algorithm. ","da052c72":"Let's plot our data points on 2-D graph to eyeball our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:"}}