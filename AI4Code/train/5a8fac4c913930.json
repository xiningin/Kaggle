{"cell_type":{"9a893c9d":"code","1dcd3d84":"code","860aa4ee":"code","fb0c78c4":"code","590b1795":"code","4c82bc00":"code","75c049fe":"code","e80734d4":"code","261436bb":"code","483d83dd":"code","be158a46":"code","24f4b6e4":"code","14800640":"code","56772ea4":"code","a36d79a1":"code","f97698bd":"code","dc5f7425":"code","a377748d":"code","3da426c3":"code","fd16c74b":"code","f6a3a794":"code","dbcd9304":"code","8e51c451":"code","a97bc2a7":"code","74e8f3a4":"code","ead3b93c":"code","bf83fe94":"code","d4600319":"code","812cab0a":"code","310b7442":"code","6786d1d9":"code","3965508d":"code","88810ae0":"code","82189a48":"code","63950c91":"code","ec876bab":"code","03bb8770":"code","262687f0":"code","f4450458":"code","db76eacb":"code","f7f303e7":"code","66bd3b7a":"code","d8191933":"code","75216a98":"code","495141e8":"code","5ee72a0e":"code","d4c60d9f":"code","1981cf15":"code","1422d9e1":"code","2afed0a7":"code","bd39c2fe":"code","bc42ec93":"code","db845ca2":"code","693aabbf":"code","5730db62":"code","6819a7b5":"code","ad4f775b":"code","d346ef77":"code","2f3f3b66":"code","23fb8057":"code","8f25e3ef":"code","aac4b132":"code","64014b56":"code","39c2c0c2":"code","1e233f77":"code","e9578b66":"code","22aa8083":"code","ed71a573":"code","951bf454":"code","addc7b04":"code","080c066e":"code","9ef34e70":"code","c243ec8a":"code","4b39bd23":"code","b328453c":"code","8b52ff49":"code","5b3f0357":"code","3f84ee5d":"code","a4969e17":"code","c1eb9628":"code","7f55b8dc":"code","24d00fd7":"code","996c6f47":"code","fc5ef2ff":"code","abd39627":"code","3024452a":"code","177180e1":"code","ed8e2526":"code","4194ba6e":"code","93c62a86":"code","27a00846":"code","cd088c13":"code","732e12e4":"code","0ede746b":"code","9b455862":"code","d42c4b0b":"code","26b0fa91":"markdown","3927aef1":"markdown","e64eb336":"markdown","25e2fc00":"markdown","d61c662f":"markdown","908182de":"markdown","6b4c8f68":"markdown","abaf7283":"markdown","39f046b1":"markdown","52957f4e":"markdown","8e4d286a":"markdown","8ccc7091":"markdown","3cb78f06":"markdown","8a031448":"markdown"},"source":{"9a893c9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1dcd3d84":"data = pd.read_csv('\/kaggle\/input\/ecommerce-data\/data.csv', encoding = \"ISO-8859-1\")","860aa4ee":"data.head()","fb0c78c4":"data['No'] = data['InvoiceNo'].str[0]","590b1795":"data['No'].value_counts()","4c82bc00":"data[data['No'] == 'C'].head(10)","75c049fe":"data[data['No'] == 'C'].Quantity.describe()","e80734d4":"# Products with start with C are returned articles","261436bb":"data[data['No'] == 'A']","483d83dd":"# Bad Operation ?","be158a46":"data['Code'] = data['StockCode'].str[0]","24f4b6e4":"data['Code'].value_counts()","14800640":"# Understanding letters code","56772ea4":"data[data['Code'] == 'P'].Description.value_counts()","a36d79a1":"# P : POSTAGE Products","f97698bd":"data[data['Code'] == 'D'].Description.value_counts()","dc5f7425":"data[(data['Code'] == 'D') & (data['StockCode'] != 'D') & (data['StockCode'] != 'DOT')]","a377748d":"# DCGS = Discount","3da426c3":"data[data['Code'] == 'C'].Description.value_counts()","fd16c74b":"data[data['Code'] == 'C'].Country.value_counts()","f6a3a794":"data[data['Code'] == 'M'].Description.value_counts()","dbcd9304":"data[data['Code'] == 'B'].Description.value_counts()","8e51c451":"data[data['Code'] == 'S'].Description.value_counts()","a97bc2a7":"data[data['Code'] == 'A'].Description.value_counts()","74e8f3a4":"data[data['Code'] == 'g'].Description.value_counts()","ead3b93c":"# G = Gift","bf83fe94":"data[data['Code'] == 'm'].Description.value_counts()","d4600319":"# Change this stock code\ndata.loc[data.Code == 'm', 'Code'] = 'M'","812cab0a":"data.UnitPrice.describe()","310b7442":"# Understanding negative values\ndata[data.UnitPrice < 0]","6786d1d9":"data[data.UnitPrice >= 0].UnitPrice.describe()","3965508d":"# Some articles are free (Unit Price = 0)","88810ae0":"# Distribution of prices < 10\nplt.figure(figsize=(10,6))\nsns.distplot(data[(data.UnitPrice < 10) & (data.UnitPrice >= 0)].UnitPrice, hist = False)","82189a48":"data.Quantity.describe()","63950c91":"# Distribution of quantity\nplt.figure(figsize=(10,6))\nsns.distplot(data[data.Quantity > 0].Quantity, hist = False)","ec876bab":"data.Country.value_counts()[:10]","03bb8770":"# Negative quantities as positive\ndata['Quantity'] = abs(data['Quantity'])","262687f0":"data['TotalPrice'] = data['Quantity'] * data['UnitPrice']","f4450458":"# Distribution of quantity\nplt.figure(figsize=(10,6))\nsns.distplot(data[data.TotalPrice > 0].TotalPrice, hist = False)","db76eacb":"data['Date'] = pd.to_datetime(data['InvoiceDate'])","f7f303e7":"data['Date'].head(10)","66bd3b7a":"data['year'] = data['Date'].dt.year\ndata['month'] = data['Date'].dt.month\ndata['day'] = data['Date'].dt.day\ndata['hour'] = data['Date'].dt.hour","d8191933":"data.year.value_counts()","75216a98":"plt.figure(figsize=(10,6))\nsns.countplot(data.month)","495141e8":"# Majority in November and December (for Christmas)","5ee72a0e":"plt.figure(figsize=(10,6))\nsns.countplot(data.day)","d4c60d9f":"plt.figure(figsize=(10,6))\nsns.countplot(data.hour)","1981cf15":"# check missing values for each column \ndata.isnull().sum().sort_values(ascending=False)","1422d9e1":"prod = data[~data.Description.isnull()]","2afed0a7":"prod['Description'].head(10)","bd39c2fe":"from wordcloud import WordCloud\n\nwordcloud = WordCloud(max_words=1000,margin=0).generate(' '.join(prod['Description']))\nplt.figure(figsize = (15, 10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","bc42ec93":"# fill description with nan\n\nprod['text'] = prod['Description'].fillna('')","db845ca2":"# lower description\n\nprod['text'] = prod['text'].str.lower()","693aabbf":"# stopwords\n\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\n\nprod['text'] = prod['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))","5730db62":"from wordcloud import WordCloud\n\nwordcloud = WordCloud(max_words=1000,margin=0).generate(' '.join(prod['text']))\nplt.figure(figsize = (15, 10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","6819a7b5":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\n\nvectorizer = TfidfVectorizer(stop_words='english')\nX = vectorizer.fit_transform(prod['text'])","ad4f775b":"# Calculate sum of squared distances\nssd = []\nK = range(1,10)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(X)\n    ssd.append(km.inertia_)","d346ef77":"# Plot sum of squared distances \/ elbow method\nplt.figure(figsize=(10,6))\nplt.plot(K, ssd, 'bx-')\nplt.xlabel('k')\nplt.ylabel('ssd')\nplt.title('Elbow Method For Optimal k')\nplt.show()","2f3f3b66":"# Best number of clusters is 5","23fb8057":"# Create and fit model\nkmeans = KMeans(n_clusters=5)\nmodel = kmeans.fit(X)","8f25e3ef":"pred = model.labels_\nprod['Cluster_prod'] = pred","aac4b132":"prod = prod[['Description', 'text', 'Cluster_prod']]","64014b56":"prod.head()","39c2c0c2":"fig = plt.figure(figsize = (20, 15))\nfor c in range(len(prod['Cluster_prod'].unique())):\n    ax = fig.add_subplot(3,2,c+1)\n    ax.set_title('Cluster %d'%c)\n    cluster = prod[prod.Cluster_prod == c]\n    wordcloud = WordCloud( max_words=1000,margin=0).generate(' '.join(cluster['text']))\n    ax.imshow(wordcloud)\n    ax.axis(\"off\")","1e233f77":"# Cluster A : Bags\n# Cluster B : Signs\n# Cluster C : Kitchen\n# Cluster D : Decoration\n# Cluster E : Retrospots","e9578b66":"data.columns","22aa8083":"cus = data[['CustomerID', 'InvoiceDate', 'Quantity', 'UnitPrice', 'Country', 'TotalPrice']]","ed71a573":"cus = cus[~cus.CustomerID.isnull()]","951bf454":"cus_prod = cus.groupby('CustomerID')['Quantity'].sum().reset_index()\ncus_prod.columns = ['CustomerID', 'TotalProducts']","addc7b04":"cus = cus.merge(cus_prod, on='CustomerID')","080c066e":"cus['InvoiceDate'] = cus['InvoiceDate'].str.split(' ').str[0]","9ef34e70":"transactions = cus[['CustomerID', 'InvoiceDate']].drop_duplicates()","c243ec8a":"transactions = transactions.groupby('CustomerID')['InvoiceDate'].count().reset_index()\ntransactions.columns = ['CustomerID', 'Transactions']","4b39bd23":"cus = cus.merge(transactions, on='CustomerID')","b328453c":"cus = cus.drop(['Quantity', 'UnitPrice', 'InvoiceDate'], axis=1)","8b52ff49":"# drop duplicates\ncus = cus.drop_duplicates()","5b3f0357":"len(cus)","3f84ee5d":"cus.head()","a4969e17":"# Label encoder\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\ncus['Country'] = le.fit_transform(cus.Country.values)","c1eb9628":"# cus['No'] = le.fit_transform(cus.No.values)\n# cus['Code'] = le.fit_transform(cus.Code.values)","7f55b8dc":"# Calculate sum of squared distances\nssd = []\nK = range(1,10)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(cus)\n    ssd.append(km.inertia_)","24d00fd7":"# Plot sum of squared distances \/ elbow method\nplt.figure(figsize=(10,6))\nplt.plot(K, ssd, 'bx-')\nplt.xlabel('k')\nplt.ylabel('ssd')\nplt.title('Elbow Method For Optimal k')\nplt.show()","996c6f47":"# Best number of clusters is 3","fc5ef2ff":"# Create and fit model\nkmeans = KMeans(n_clusters=3)\nmodel = kmeans.fit(cus)","abd39627":"pred = model.labels_\ncus['Cluster_cus'] = pred","3024452a":"cus.head()","177180e1":"# Create PCA for data visualization \/ Dimensionality reduction to 2D graph\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\npca_model = pca.fit_transform(cus)\ncus_transform = pd.DataFrame(data = pca_model, columns = ['PCA1', 'PCA2'])\ncus_transform['Cluster_cus'] = pred","ed8e2526":"plt.figure(figsize=(10,10))\ng = sns.scatterplot(data=cus_transform, x='PCA1', y='PCA2', palette=sns.color_palette()[:3], hue='Cluster_cus')\ntitle = plt.title('Personality Clusters with PCA')","4194ba6e":"customers = cus.groupby('Cluster_cus').mean()\ncustomers = customers.reset_index()","93c62a86":"customers.columns","27a00846":"customers[['Cluster_cus', 'CustomerID', 'Country', 'TotalPrice', 'TotalProducts', 'Transactions']]","cd088c13":"# Cluster A : From UK : few transactions and products, small total price\n# Cluster B : Regular with a good amount of products (weekly shopping)\n# Cluster C : Big amount of products, maybe for stock","732e12e4":"prod_cust = data.merge(cus[['Cluster_cus', 'CustomerID']], on='CustomerID')","0ede746b":"prod_cust = prod_cust.drop_duplicates()","9b455862":"prod_cust['text'] = prod_cust['Description'].fillna('')\nprod_cust['text'] = prod_cust['text'].str.lower()\nprod_cust['text'] = prod_cust['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))","d42c4b0b":"fig = plt.figure(figsize = (20, 15))\nfor c in range(len(prod_cust['Cluster_cus'].unique())):\n    ax = fig.add_subplot(3,1,c+1)\n    ax.set_title('Cluster %d'%c)\n    cluster = prod_cust[prod_cust.Cluster_cus == c]\n    wordcloud = WordCloud(max_words=1000,margin=0).generate(' '.join(cluster['text']))\n    ax.imshow(wordcloud)\n    ax.axis(\"off\")","26b0fa91":"# Customers Classification","3927aef1":"### Number of transactions (1 per day)","e64eb336":"# Data Exploration","25e2fc00":"# Let's look at the products for these clusters","d61c662f":"### Unit Price","908182de":"### Quantity","6b4c8f68":"### Total products bought","abaf7283":"### Invoice Number","39f046b1":"### Invoice Date","52957f4e":"### Countries","8e4d286a":"### Stock Code","8ccc7091":"### Total Price","3cb78f06":"# Products Classification","8a031448":"# Data Featuring"}}