{"cell_type":{"be3fd191":"code","04db35ee":"code","038cbb81":"code","cdff903c":"code","6a5171a1":"code","2d7a4d9a":"code","755e6f48":"code","95c2745f":"code","b3405397":"code","ec9f56f8":"code","966b0b64":"code","20cfd99e":"code","550649cc":"code","2fb8ec53":"code","858ea380":"code","055f1f11":"code","6b77d811":"code","70ea2bf7":"code","df079d74":"code","538f0f53":"code","00cabeb9":"code","83b3f3ae":"code","c563ce2a":"code","b41c9082":"code","40f85471":"code","2d051ac4":"code","eb682152":"code","4773bb93":"code","daa21da9":"code","b34349d1":"code","1ae45ad7":"code","2c06e4ee":"code","ca2b7071":"code","7b8ee766":"code","03693d4d":"code","d4a0eddd":"code","eddb65aa":"code","58b10d26":"code","24c36370":"code","59e9683b":"code","e27181e3":"code","8b8e0d67":"code","5748455a":"code","be1f65ad":"code","05333291":"code","959f1eae":"code","89b88fe1":"code","2eea2f21":"code","9003cf87":"code","91cc07a8":"code","ea9c6671":"code","4e09f95c":"code","736a78b4":"code","4c8b1d05":"code","3deb855d":"code","3eeb3e0a":"code","242dbffd":"code","e46d1502":"code","113eb2a4":"code","1ba2af9b":"code","4107aaa8":"code","cf3f44e3":"code","03c4c038":"code","57dea9f2":"code","a7575203":"markdown","9edd50a7":"markdown","bc9a8a18":"markdown","5fbbd183":"markdown","67ca7bcd":"markdown","6eef27eb":"markdown","8ac87ac5":"markdown","8584ca2f":"markdown","22c4ac75":"markdown","7e61282b":"markdown","ac39b91d":"markdown","f646b3de":"markdown","a1b954b4":"markdown","1659322d":"markdown"},"source":{"be3fd191":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, log_loss\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, mean_squared_error, mean_absolute_error\nfrom sklearn.metrics import classification_report, log_loss","04db35ee":"sns.set(style='darkgrid')","038cbb81":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')","cdff903c":"df.sample(5)","6a5171a1":"df.shape","2d7a4d9a":"df.describe()","755e6f48":"# DROP IRRELEVANT COLUMN\ndf.drop(['CLIENTNUM', 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1', \n         'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'], axis=1, inplace=True )","95c2745f":"df.info()","b3405397":"sns.heatmap(df.isna())","ec9f56f8":"# Target feature is 'Attrition_Flag' in which 'Attrited Customer' means it's a churn (1) and 'Existing Customer' means there is no churn (0)\n\ndf['Attrition_Flag'] = df['Attrition_Flag'].map({'Attrited Customer': 1, 'Existing Customer': 0})","966b0b64":"df1 = df.copy()","20cfd99e":"df1.dtypes","550649cc":"#Select numerical and categorical\n\ndf_num = df1.select_dtypes(include=['int64', 'float64'])\ndf_cat = df1.select_dtypes(exclude=['int64', 'float64'])\ndf_num = df_num.iloc[:, 1:15]","2fb8ec53":"df_num.shape","858ea380":"df_cat.sample()","055f1f11":"df_num.sample()","6b77d811":"df2 = df1.copy()","70ea2bf7":"df2.head()","df079d74":"plt.figure(figsize=(10,5))\ng= sns.countplot(x='Attrition_Flag', data=df2);\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height\/2,\n            '{}'.format(height),\n            ha=\"center\", color='white')\nplt.title('Count values to target variable')","538f0f53":"df_num.hist( bins=30, figsize=(15,15) );","00cabeb9":"df_cat.sample()","83b3f3ae":"df_cat['Income_Category'] = df_cat['Income_Category'].apply(lambda x:'< $40k' if x == 'Less than $40K' else x);","c563ce2a":"plt.figure(figsize=(15,7))\n\ng = sns.countplot(x='Gender', data=df_cat);\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height\/2,\n            '{}'.format(height),\n            ha=\"center\", color='white')","b41c9082":"plt.figure(figsize=(15,7))\ng = sns.countplot(x='Education_Level',data=df_cat);\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height\/2,\n            '{}'.format(height),\n            ha=\"center\", color='white')","40f85471":"plt.figure(figsize=(15,7))\ng= sns.countplot(x='Marital_Status', data=df_cat);\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height\/2,\n            '{}'.format(height),\n            ha=\"center\", color='white')","2d051ac4":"plt.figure(figsize=(15,5))\ng= sns.countplot(x='Income_Category', data=df_cat);\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height\/2,\n            '{}'.format(height),\n            ha=\"center\", color='white')","eb682152":"plt.figure(figsize=(15,5))\nplt.title('Number of Customers Inactive - Months_Inactive_12_mon')\ng = sns.countplot(x = 'Months_Inactive_12_mon', data = df2)\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height\/2,\n            '{}'.format(height),\n            ha=\"center\", color='white')","4773bb93":"plt.figure(figsize=[15,5])\nsns.boxplot(x=df_num['Customer_Age'], y=df_cat['Gender']);\nplt.xlabel('Age')","daa21da9":"df2.sample()","b34349d1":"correlations = df2.corr(method='pearson')","1ae45ad7":"f, ax = plt.subplots(figsize = (15,15))\nsns.heatmap(correlations, annot = True);","2c06e4ee":"df2.sample()","ca2b7071":"plt.figure(figsize=[20,7])\nsns.countplot(x='Customer_Age', hue='Attrition_Flag', data=df2);\nplt.xlabel('Age');","7b8ee766":"plt.figure(figsize=[20,7])\nax = sns.countplot(x='Months_Inactive_12_mon', hue='Attrition_Flag', data=df2);\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\nplt.xlabel('Months inactive');","03693d4d":"df2['Income_Category'] = df2['Income_Category'].apply(lambda x: '< 40K' if x == 'Less than $40K' else x)","d4a0eddd":"plt.figure(figsize=[20,7])\nax = sns.countplot(x='Income_Category', hue='Attrition_Flag', data=df2);\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\nplt.xlabel('FAIXA SALARIAL');","eddb65aa":"df2.sample()","58b10d26":"plt.figure(figsize=[20,7])\nax = sns.countplot(x='Contacts_Count_12_mon', hue='Attrition_Flag', data=df2);\nplt.xlabel('Contacts');","24c36370":"plt.figure(figsize=(20,7))\nax = sns.countplot(x='Card_Category',hue=df2['Attrition_Flag'], data=df_cat);\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","59e9683b":"df_cat.sample()","e27181e3":"df_cat_dummies = pd.get_dummies(df_cat)","8b8e0d67":"df_cat_dummies.head()","5748455a":"df3 = pd.concat([df_num, df_cat_dummies], axis=1)","be1f65ad":"X = df3.copy()\ny = df2['Attrition_Flag']","05333291":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","959f1eae":"modelLR = LogisticRegression()","89b88fe1":"modelLR.fit(X_train, y_train);","2eea2f21":"predictLR = modelLR.predict(X_test)","9003cf87":"print('Logistic Regression: \\n', classification_report(predictLR, y_test))\nprint('Logistic Regression Accuracy: ', accuracy_score(predictLR, y_test))","91cc07a8":"print('MAE:', mean_absolute_error(predictLR, y_test) )\nprint('MSE:', mean_squared_error(predictLR, y_test) )\nprint('RMSE:', np.sqrt(mean_squared_error(predictLR, y_test) ))","ea9c6671":"#Gerando matrix de confusao\ncm = confusion_matrix(y_test, predictLR)\nsns.heatmap(cm, annot=True);","4e09f95c":"modelRF = RandomForestClassifier()","736a78b4":"modelRF.fit(X_train, y_train)","4c8b1d05":"predictRF = modelRF.predict(X_test)","3deb855d":"print('Random Forest Classifier : \\n', classification_report(predictRF, y_test))\nprint('Random Forest Classifier Accuracy: ', accuracy_score(predictRF, y_test))","3eeb3e0a":"print('MAE:', mean_absolute_error(predictRF, y_test) )\nprint('MSE:', mean_squared_error(predictRF, y_test) )\nprint('RMSE:', np.sqrt(mean_squared_error(predictRF, y_test) ))","242dbffd":"# get confusion matrix\ncm = confusion_matrix(y_test, predictRF)\nsns.heatmap(cm, annot=True);","e46d1502":"modelGB = GradientBoostingClassifier()","113eb2a4":"modelGB.fit(X_train, y_train)","1ba2af9b":"predictGB = modelGB.predict(X_test)","4107aaa8":"print('Gradient Boost Classifier : \\n', classification_report(predictGB, y_test))\nprint('Gradient Boost Classifier Accuracy: ', accuracy_score(predictGB, y_test))","cf3f44e3":"print('MAE:', mean_absolute_error(predictGB, y_test) )\nprint('MSE:', mean_squared_error(predictGB, y_test) )\nprint('RMSE:', np.sqrt(mean_squared_error(predictGB, y_test) ))","03c4c038":"#Gerando matrix de confusao\ncm = confusion_matrix(y_test, predictGB)\nsns.heatmap(cm, annot=True);","57dea9f2":"# get important features\nplt.figure(figsize=(15,7))\nfeature_list = pd.Series(modelGB.feature_importances_, index=X_train.columns).sort_values(ascending=False)\nfeature_list.nlargest(10).sort_values(ascending=True).plot(kind='barh')\nplt.show()","a7575203":"## ***NUMERICAL VARIABLE***","9edd50a7":"## ***MULTIVARIATE ANALYSIS***","bc9a8a18":"## ***CATEGORICAL VARIABLE***\n\n","5fbbd183":"# **RANDOM FOREST CLASSIFIER**","67ca7bcd":"# ***Numerical and categorical***","6eef27eb":"\n\n*   As we can see, the base is unbalanced.\n\n","8ac87ac5":"Pearson's coefficient ranges from -1 to 1. So:\n\nr = 1 It means a perfect and positive correlation between the two variables.\n\nA negative and perfect correlation between the two variables \u2013 that is, if one increases, the other always decreases returns an r = -1.\n\nr = 0 It means that the two variables do not depend linearly on each other. However, there may be another dependency that is \"non-linear\". Thus, the result r = 0 must be investigated by other means.","8584ca2f":"# **GRADIENT BOOSTING CLASSIFIER**","22c4ac75":"**False**","7e61282b":"# **LOGISTIC REGRESSION**","ac39b91d":"## ***TARGET VARIABLE***\n\n","f646b3de":"# ***DATA DESCRIPTION***","a1b954b4":"# **BASE PRE-PRECESSING**","1659322d":"# ***EXPLORATORY DATA ANALYSIS (EDA)***"}}