{"cell_type":{"94174b64":"code","7b16fd37":"code","b280c820":"code","cd9deff3":"code","26467fa0":"code","18f78575":"code","f30c2f04":"code","32518147":"code","7f461140":"code","b1baaf3c":"code","8eaab9fd":"code","4db62fe7":"code","eef52f5b":"code","d509966f":"code","a6821bbc":"code","a04687dd":"code","7b3512fd":"code","fff1b272":"code","c4c7c2af":"code","b837c268":"code","622b83e8":"code","83989ff5":"code","b7c75640":"code","479ca30a":"code","7230effb":"code","3be5513e":"code","80492c12":"code","2c0d7e99":"code","7d10fa59":"code","a2ca495b":"code","00803da1":"code","f46f411f":"code","c0982672":"code","86bfdab5":"markdown","2333beab":"markdown","37cad45b":"markdown","99d97519":"markdown","3b1f3088":"markdown","cefdbb33":"markdown","aa2486d4":"markdown","de004cda":"markdown","1a951366":"markdown","3c9fc612":"markdown","18073a62":"markdown","7e483445":"markdown","445340e8":"markdown","296bc862":"markdown","52322523":"markdown","51c83282":"markdown","d36731ef":"markdown","4d827122":"markdown","b48f9413":"markdown","1388c1a1":"markdown","0ff54d73":"markdown","53e83483":"markdown","c6a18061":"markdown","9d45f553":"markdown","f8d02aa5":"markdown","60dbffe5":"markdown","28ac8d16":"markdown"},"source":{"94174b64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7b16fd37":"# Data Processing\nimport numpy as np\nimport pandas as pd\n\n# Basic Visualization tools\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nplt.rcParams['figure.dpi'] = 300\nimport seaborn as sns\nsns.set_palette('husl')\n\nplt.rc('figure',figsize=(17,13))\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nfrom plotly.subplots import make_subplots\n\n\n# Special Visualization\nimport wordcloud, missingno\nfrom wordcloud import WordCloud # wordcloud\nimport missingno as msno # check missing value\nimport networkx as nx\n\n'''Plotly visualization .'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\nimport cufflinks as cf #importing plotly and cufflinks in offline mode  \nimport plotly.offline  \ncf.go_offline()  \ncf.set_config_file(offline=False, world_readable=True)\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))","b280c820":"data = pd.read_csv('..\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')\ndata.head()","cd9deff3":"data.describe()#numerical","26467fa0":"data.describe(include='O') #categorical\n","18f78575":"msno.matrix(data)\n","f30c2f04":"temp_df = data['User Rating'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['User Rating'],\n                marker = dict(color = 'rgb(255,165,0)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'RATINGS COUNT' , xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n\ndef pie_plot(cnt_srs, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 14)),\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace\nbold(\"**MOST OF THE RATINGS ARE IN THE RANGE OF 4.6 TO 4.8**\")\npy.iplot([pie_plot(data['User Rating'].value_counts(), 'Rating')])","32518147":"fig, ax = plt.subplots(1,1, figsize=(12, 7), dpi=72)\nsns.regplot(data=data, x='Price', y='User Rating', ax=ax)\nplt.show()\n\n","7f461140":"fig, ax = plt.subplots(1,1, figsize=(12, 7), dpi=72)\nsns.regplot(data=data, x='Price', y='Reviews', ax=ax)\nplt.show()","b1baaf3c":"temp_df = data['Genre'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Genre'],\n                marker = dict(color = 'rgb(255,165,0)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\", xaxis = dict(title = 'Genre'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n\n'''A Function To Plot Pie Plot using Plotly'''\n\ndef pie_plot(cnt_srs, colors, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace\n\nbold(\"**NON-FICTION BESTSELLERS ARE MORE THAN FICTION**\")\npy.iplot([pie_plot(data['Genre'].value_counts(), ['magenta', 'cyan'], 'GENRE')])","8eaab9fd":"\ntemp_df1 = data['Year'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['Year'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'BESTSELLERS COUNT OVER THE YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\nd1 = data[data[\"Genre\"] == \"Fiction\"]\nd2 = data[data[\"Genre\"] == \"Non Fiction\"]\n\ncol =\"Year\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(\n                    x=vc1[col], \n                    y=vc1[\"count\"], \n                    name=\"Fiction\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace2 = go.Scatter(\n                    x=vc2[col], \n                    y=vc2[\"count\"], \n                    name=\"Non Fiction\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'GENRE BASED BESTSELLERS COUNT OVER THE YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1, trace2], layout=layout)\nfig.show()","4db62fe7":"df1 = data[data[\"Genre\"] == \"Fiction\"]\ndf2 = data[data[\"Genre\"] == \"Non Fiction\"]\n\ntemp_df1 = df1['User Rating'].value_counts().reset_index()\ntemp_df2 = df2['User Rating'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['User Rating'],\n                name=\"Fiction\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['index'],\n                y = temp_df2['User Rating'],\n                name = \"Non Fiction\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'RATING BY GENRE' , xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","eef52f5b":"common_books=data['Name'].value_counts()[:7].rename_axis('Common Books').reset_index(name='count')\nfig = px.treemap(common_books, path=['Common Books'], values='count',title='TOP 7 MULTIPLE TIMES BESTSELLERS')\n\nfig.show()","d509966f":"books=data['Name'].value_counts()[data['Name'].value_counts()>5].index\nfor i in list(books):\n    display(data[data['Name']==i])","a6821bbc":"temp_df1 = data.groupby('Year').mean().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Year'],\n                y = temp_df1['Reviews'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'AVERAGE REVIEWS OVER THE YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Reviews'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\ntemp_df1 = data.groupby('Year').mean().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Year'],\n                y = temp_df1['Price'],\n                marker = dict(color = 'rgb(148, 103, 189)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'AVERAGE PRICE OVER THE YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Price'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\ntemp_df1 = data.groupby('Year').mean().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Year'],\n                y = temp_df1['User Rating'],\n                marker = dict(color = 'rgb(250,13,92)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'AVERAGE RATING OVER THE YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Rating'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","a04687dd":"df1 = data[data[\"Genre\"] == \"Fiction\"]\ndf2 = data[data[\"Genre\"] == \"Non Fiction\"]\n\ntemp_df1 = df1.groupby('Year').mean().reset_index()\ntemp_df2 = df2.groupby('Year').mean().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Year'],\n                y = temp_df1['User Rating'],\n                name=\"Fiction\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['Year'],\n                y = temp_df2['User Rating'],\n                name = \"Non Fiction\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'AVERAGE RATING BY GENRE OVER YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Rating'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Year'],\n                y = temp_df1['Reviews'],\n                name=\"Fiction\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['Year'],\n                y = temp_df2['Reviews'],\n                name = \"Non Fiction\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'AVERAGE REVIEWS BY GENRE OVER YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Reviews'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Year'],\n                y = temp_df1['Price'],\n                name=\"Fiction\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['Year'],\n                y = temp_df2['Price'],\n                name = \"Non Fiction\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'AVERAGE PRICE BY GENRE OVER YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Price'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","7b3512fd":"temp_df1 = data.groupby('Author').count().reset_index().sort_values('Name',ascending=False).head(10)\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Author'],\n                y = temp_df1['Name'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 10 AUTHORS WITH MOST BESTSELLERS ' , xaxis = dict(title = 'Author',tickangle=45), yaxis = dict(title = 'COUNT'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","fff1b272":"temp_df1 = data.groupby('Author').mean().reset_index().sort_values('Price',ascending=False).head(10)\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Author'],\n                y = temp_df1['Price'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 10 AUTHORS WITH HIGHEST PRICED BESTSELLERS ' , xaxis = dict(title = 'Author'), yaxis = dict(title = 'Average Price'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\ntemp_df1 = data.groupby('Author').mean().reset_index().sort_values('User Rating',ascending=False).head(20)\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Author'],\n                y = temp_df1['User Rating'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 20 AUTHORS OF BESTSELLERS WITH HIGHEST AVERAGE RATING ' , xaxis = dict(title = 'Author',tickangle=45), yaxis = dict(title = 'Average Rating'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\ntemp_df1 = data.groupby('Author').mean().reset_index().sort_values('Reviews',ascending=False).head(20)\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Author'],\n                y = temp_df1['Reviews'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 10 AUTHORS OF BESTSELLERS WITH HIGHEST AVERAGE REVIEWS ' , xaxis = dict(title = 'Author',tickangle=45), yaxis = dict(title = 'Average Reviews'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","c4c7c2af":"data[data['Author'].isin(list(data.groupby(['Author','Genre']).count().reset_index()['Author'].value_counts()[:2].index))]","b837c268":"df1 = data.groupby('Author').mean().sort_values('Reviews',ascending=False).reset_index().head(10)\n\nfig = px.scatter(df1, x='User Rating', y='Reviews', color='Author')\n\nfig.update_traces(marker=dict(size=12,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()\n","622b83e8":"\ndf1 = data.groupby('Author').mean().sort_values('Price',ascending=False).reset_index().head(10)\n\nfig = px.scatter(df1, x='User Rating', y='Price', color='Author')\n\nfig.update_traces(marker=dict(size=12,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()","83989ff5":"df1 = data[data[\"Genre\"] == \"Fiction\"]\ndf2 = data[data[\"Genre\"] == \"Non Fiction\"]\n\ntemp_df1 = df1.groupby('Year').mean().reset_index()\ntemp_df2 = df2.groupby('Year').mean().reset_index()\n\ntrace1 = go.Scatter(\n                    x=temp_df1['Year'], \n                    y=temp_df1['Price'], \n                    name=\"Fiction\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace2 = go.Scatter(\n                    x=temp_df2['Year'], \n                    y=temp_df2['Price'], \n                    name=\"Non Fiction\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'Average Price over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Price'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1, trace2], layout=layout)\nfig.show()\n\ntrace1 = go.Scatter(\n                    x=temp_df1['Year'], \n                    y=temp_df1['User Rating'], \n                    name=\"Fiction\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace2 = go.Scatter(\n                    x=temp_df2['Year'], \n                    y=temp_df2['User Rating'], \n                    name=\"Non Fiction\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'Average Rating over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Rating'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1, trace2], layout=layout)\nfig.show()\n\ntrace1 = go.Scatter(\n                    x=temp_df1['Year'], \n                    y=temp_df1['Reviews'], \n                    name=\"Fiction\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace2 = go.Scatter(\n                    x=temp_df2['Year'], \n                    y=temp_df2['Reviews'], \n                    name=\"Non Fiction\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'Average Reviews over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Reviews'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1, trace2], layout=layout)\nfig.show()","b7c75640":"!pip install bubbly","479ca30a":"from bubbly.bubbly import bubbleplot \ndf1 = data.groupby(['Genre','Year']).mean().reset_index()\nfigure = bubbleplot(dataset=df1, x_column='User Rating', y_column='Reviews', \n    bubble_column='Genre', time_column='Year', color_column='Genre', \n    x_title=\"Avg User Rating\", y_title=\"Avg Reviews\", title='Bestsellers Amazon',\n    x_logscale=True, scale_bubble=3, height=650)\n\niplot(figure)","7230effb":"from bubbly.bubbly import bubbleplot \ndf1 = data.groupby(['Genre','Year']).mean().reset_index()\nfigure = bubbleplot(dataset=df1, x_column='User Rating', y_column='Price', \n    bubble_column='Genre', time_column='Year', color_column='Genre', \n    x_title=\"User Rating\", y_title=\"Avg Price\", title='Bestsellers Amazon',\n    x_logscale=True, scale_bubble=3, height=650)\n\niplot(figure)","3be5513e":"temp_df1 = data.groupby('Name').mean().reset_index().sort_values('Price',ascending=False).head(10)\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Name'],\n                y = temp_df1['Price'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 10 HIGHEST PRICED BESTSELLERS ' , xaxis = dict(title = 'Book',tickangle=45), yaxis = dict(title = 'Average Price'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Name'],\n                y = temp_df1['Reviews'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 10 BESTSELLERS WITH HIGHEST AVERAGE REVIEWS ' , xaxis = dict(title = 'Book',tickangle=45), yaxis = dict(title = 'Average Reviews'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","80492c12":"df1=data[data['Year']==2019]\n\n'''A Function To Plot Pie Plot using Plotly'''\n\ndef pie_plot(cnt_srs, colors, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace\n\nbold(\"**2019 Bestsellers are Non-Fiction Majorly**\")\npy.iplot([pie_plot(df1['Genre'].value_counts(), ['magenta', 'cyan'], 'GENRE')])","2c0d7e99":"temp_df1=data[data['Year']==2019].groupby('Author').count().reset_index().sort_values('Name',ascending=False).head(3)\ntrace1 = go.Bar(\n                x = temp_df1['Author'],\n                y = temp_df1['Name'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 3 AUTHORS WITH HIGHEST BESTSELLERS IN 2019 ' , xaxis = dict(title = 'Author'), yaxis = dict(title = 'COUNT'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n\ntemp_df1=data[data['Year']==2019].groupby('User Rating').count().reset_index().sort_values('Name',ascending=False)\ntrace1 = go.Bar(\n                x = temp_df1['User Rating'],\n                y = temp_df1['Name'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'Ratings In 2019 ' , xaxis = dict(title = 'Ratings'), yaxis = dict(title = 'COUNT'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n","7d10fa59":"temp_df1=data[data['Year']==2019].groupby('Author').mean().reset_index().sort_values('User Rating',ascending=False).head(10)\ntrace1 = go.Bar( x = temp_df1['Author'],\n                y = temp_df1['User Rating'],\n               marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'Top 10 highest Rated 2019 Authors ' , xaxis = dict(title = 'Authors',tickangle=45), yaxis = dict(title = 'Avg. Rating'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\ntemp_df1=data[data['Year']==2019].groupby('Name').mean().reset_index().sort_values('Price',ascending=False).head(10)\ntrace1 = go.Bar( x = temp_df1['Name'],\n                y = temp_df1['Price'],\n               marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'Top 10 highest Priced 2019 Bestsellers ' , xaxis = dict(title = 'Book',tickangle=45), yaxis = dict(title = 'Avg. Price'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","a2ca495b":"df=data[data['Price']==0]\ntemp_df = df['Genre'].value_counts().reset_index()\n\n\n\n\n'''A Function To Plot Pie Plot using Plotly'''\n\ndef pie_plot(cnt_srs, colors, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace\n\nbold(\"**Free Bestsellers are Fiction Mostly**\")\npy.iplot([pie_plot(df['Genre'].value_counts(), ['magenta', 'cyan'], 'GENRE')])","00803da1":"temp_df1 = df['Year'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['Year'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'FREE BESTSELLERS COUNT OVER THE YEARS' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","f46f411f":"\n\ntemp_df1 = df.groupby('Year').mean().reset_index()\n\n\n\ntrace1 = go.Scatter(\n                    x=temp_df1['Year'], \n                    y=temp_df1['User Rating'], \n                    name=\"Fiction\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(hovermode= 'closest', title = 'Average Rating Of Free Bestsellers over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Rating'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1], layout=layout)\nfig.show()\n\ntrace1 = go.Scatter(\n                    x=temp_df1['Year'], \n                    y=temp_df1['Reviews'], \n                    name=\"Fiction\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(hovermode= 'closest', title = 'Average Reviews Of Free Bestsellers over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Average Reviews'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1], layout=layout)\nfig.show()","c0982672":"temp_df1 = df.groupby('Author').count().reset_index().sort_values('Name',ascending=False).head(10)\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['Author'],\n                y = temp_df1['Name'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'AUTHORS OF FREE BESTSELLERS ' , xaxis = dict(title = 'Author',tickangle=45), yaxis = dict(title = 'COUNT'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","86bfdab5":"# REVIEWS,RATINGS AND PRICE OF BESTSELLERS:","2333beab":"# BESTSELLING BOOKS","37cad45b":"Reading and quick analysis of the data using describe","99d97519":"# BUBBLEPLOTS FOR YEAR BASED INTERACTIVE VISUALS :","3b1f3088":"Reviews and Price also tend to show an almost similar correlation as User Rating and Price.But again as most of the Bestsellers are crowded in a lower Price range,we can't conclude much.","cefdbb33":"# YEAR BASED ANALYSIS OF REVIEWS,RATINGS AND PRICE OF BESTSELLERS","aa2486d4":"VISUALIZING AVG. PRICE-AVG. RATINGS RELATIONSHIP OF TOP 10 AUTHORS WITH HIGHEST AVG. PRICED BESTSELLERS:","de004cda":"* For ratings less than 4.8,Non-Fiction books count overpowers Fiction books.\nBut the reverse can be seen for the ratings-4.8 and 4.9.This is an important point as ,earlier we have seen that non-fiction books have an overall higher count in the entire dataset.\n","1a951366":"# **GENRE-BASED REVIEWS,RATINGS AND PRICE OF BESTSELLERS:**","3c9fc612":"DK and Scholastic come in this category","18073a62":"* The User Ratings tend to show a slight negative correlation with Price of the Bestselling Book.\n* Most of the books are in the 'Less than 50\" price range ,so not much conclusion can be drawn.","7e483445":"**Check Missing Data (missingno)**\n\n* missingno provides a small toolset of flexible and easy-to-use missing data visualizations and utilities that allows you to get a quick visual summary of the completeness (or lack thereof) of your dataset.","445340e8":"# THE LATEST YEAR -2019 ANALYZED","296bc862":"# INTERACTIVE PLOTLY SCATTERPLOTS \nVISUALIZING AVG. REVIEWS-AVG. RATINGS RELATIONSHIP OF TOP 10 AUTHORS WITH HIGHEST AVG. REVIEWS:\n","52322523":"The number of bestselling books' count is constant ,i.e. 50 for all the years.Their distribution with Genre can be seen the above plots.","51c83282":"# FICTION AND NON-FICTION BESTSELLERS","d36731ef":"# **BESTSELLING BOOKS' AUTHORS:**","4d827122":" # **FREE BESTSELLERS ANALYZED**","b48f9413":"# Relationship between Price and Reviews:","1388c1a1":"# BESTSELLERS' RATINGS COUNT:\n","0ff54d73":"# AUTHORS WITH BESTSELLERS IN BOTH THE GENRES:FICTION AND NON-FICTION","53e83483":"Importing The Modules\n","c6a18061":"# THANKYOU FOR READING MY NOTEBOOK . DO UPVOTE AND GIVE FEEDBACK IF YOU FOUND IT USEFUL!","9d45f553":"> No FREE bestsellers in 2012 and after 2017.","f8d02aa5":"The Data has no missing values\n","60dbffe5":"#  AMAZON TOP 50 BESTSELLING BOOKS \n**PLOTLY VISUALIZATIONS**\n","28ac8d16":"# Relationship between Price and User Rating\n\nUsed regplot as a simple plot for this"}}