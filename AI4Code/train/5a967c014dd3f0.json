{"cell_type":{"bb708276":"code","d0c5be63":"code","148f8dc8":"code","2955a343":"code","011d69f6":"code","923f8de5":"code","31937f61":"code","5bc5cdb2":"code","fcf72f6d":"code","199500a6":"code","e2a1a77a":"code","dd0593e2":"code","90ad91b3":"code","aa6d9374":"code","b313ffc5":"code","877941f6":"code","7790f764":"code","48651b3a":"code","76b897ec":"code","e7f90149":"code","8dc1adef":"code","657440ee":"code","ca802583":"code","4095f075":"code","87ad256b":"markdown","596cae09":"markdown","53aff054":"markdown","9d056ecb":"markdown","7f4215fc":"markdown","9d43adf5":"markdown","9ca86216":"markdown","9807795d":"markdown","31501f47":"markdown","dae7ec59":"markdown","7786d4bb":"markdown","1bc0aae4":"markdown","03f19940":"markdown"},"source":{"bb708276":"# Libraries loading for the work\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","d0c5be63":"# Sklearn Library requirements for decision tree model building\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import plot_tree","148f8dc8":"# print the data files path \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","2955a343":"df = pd.read_csv(\"\/kaggle\/input\/mushroom-classification\/mushrooms.csv\")","011d69f6":"# Check to see if any missing values in the df\npd.isnull(df).sum()","923f8de5":"df.info()","31937f61":"df.head()","5bc5cdb2":"df.describe()","fcf72f6d":"labelencoder=LabelEncoder()\nfor column in df.columns:\n    df[column] = labelencoder.fit_transform(df[column])\n","199500a6":"df.head()","e2a1a77a":"# Column viel-type column is not having any thing other than 0 hence this does not contribute for classification, hence removed\ndf = df.drop(\"veil-type\", axis = 1)","dd0593e2":"# Splitting the data into train and test sets\ny= df[\"class\"]\nx= df.drop(\"class\",axis=1)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3, random_state= 42)","90ad91b3":"# Let us explore how after splitting the files look like\ny.head()","aa6d9374":"# How many rows. \nlen(y)","b313ffc5":"# y is Complete categorical column ","877941f6":"x.info()","7790f764":"x_train.head()","48651b3a":"# Complete columns (All predictors) are in x_train ","76b897ec":"y_train","e7f90149":"x.info()","8dc1adef":"dt = DecisionTreeClassifier(random_state = 43)\ndt.fit(x_train, y_train)","657440ee":"plt.figure(figsize=(30,20))\nplt.title(\"Decision Tree\")\nplot_tree(dt, feature_names=x_train.columns,  filled=True, rounded = True,fontsize= 16)","ca802583":"y_pred = dt.predict(x_test)","4095f075":"y_actual = pd.DataFrame(y_test.value_counts())\ny_actual = y_actual.reset_index()\ny_actual.columns = ['Class', 'AcutalCnt']\n\ny_predicted = pd.DataFrame(y_pred, columns=[\"Predicted\"])[\"Predicted\"]\ny_predicted = pd.DataFrame(y_predicted.value_counts())\ny_predicted = y_predicted.reset_index()\ny_predicted.columns = [\"Class\",\"PredictCnt\"]\ny_predicted\n\nconfusion_df = pd.merge(y_actual, y_predicted, on='Class', how='outer')\nconfusion_df['Error'] = abs(confusion_df['AcutalCnt']-confusion_df['PredictCnt'])\nconfusion_df\naccuracy = (confusion_df.AcutalCnt.sum()-confusion_df.Error.sum())\/confusion_df.AcutalCnt.sum()*100\nprint(confusion_df)\nprint(\"Model Accuracy is\", accuracy)","87ad256b":"### Note: Removed the viel-type column from the set","596cae09":"### 1. Libraries for the work","53aff054":"### 8. Confusion Matrix and Model accuracy","9d056ecb":"### 4. Modify the data for submitting to model preparation","7f4215fc":"### Note : This just an exercise to show and refer the steps and code of using decision tree model with python. ","9d43adf5":"### Decision Tree Classification Model with Python Sklearn on  Mushroom Classification Data","9ca86216":"### 2. Get the data file into the dataframe","9807795d":"### 7. Predicting the test file with the model prepared","31501f47":"### Note: All the features are categorical.For running the classification algorithm need to convert them to nominal","dae7ec59":"### 6. Classifier Model fitting","7786d4bb":"### 5. Split the dataframe into 1.train and 2.test sets","1bc0aae4":"### Note : No Missing values in the data set","03f19940":"### 3. Explore the data "}}