{"cell_type":{"fb32cae0":"code","a3a8ee31":"code","d636ff46":"code","1c51d0d9":"code","87c958e7":"code","5b2ccdc3":"code","81c20231":"code","fbb344dd":"code","74bb04d9":"code","b7cd7f48":"code","5f9a927e":"markdown"},"source":{"fb32cae0":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import confusion_matrix,f1_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder","a3a8ee31":"train_dataset = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_dataset = pd.read_csv('..\/input\/titanic\/test.csv')\n\n#get idea how our data looks\ntrain_dataset.head(4)","d636ff46":"#extracting the survived column data\ntrain_dataset_survival = train_dataset['Survived']","1c51d0d9":"# find empty entries in the dataset so that it can be handles while defining the model\npd.DataFrame(train_dataset.isna().sum() + test_dataset.isna().sum())","87c958e7":"def feature_scale(dataset):\n    data = pd.DataFrame()\n\n    data['Name'] = dataset['Name'].str.extract('([A-Za-z]+\\.)',expand=False)\n    data['Family_Size'] = dataset['Parch'] + dataset['SibSp']\n    \n    # fill the empty entries of the feature Age\n    data['Age'] = dataset['Age'].fillna(dataset['Age'].mean())\n    # fill the empty entries of the feature Fare\n    data['Fare'] = dataset['Fare'].fillna(dataset['Fare'].mean())\n    # fill the empty entries of the feature Embarked\n    data['Embarked'] = dataset['Embarked'].fillna(dataset['Embarked'].mode()[0])\n\n    # divide the Age into 6 categories:\n    # Category 1 : Child B\/w (0-10)\n    # Category 2 : Teenagers B\/w (10-20)\n    # Category 3 : Young B\/w (20-32)\n    # Category 4 : Adult B\/w (32-48)\n    # Category 5 : Aged B\/w (48-64)\n    # Category 6 : Senior B\/w (64-80)\n    data['Age'] = pd.cut(data['Age'],[0,10,20,32,48,64,80],precision=0)\n    \n    \n    # divide the fare into 4 categories based on pd.qcut(data['Fare'])\n    # Category 1 : B\/w (0-8)\n    # Category 2 : B\/w (8-10)\n    # Category 3 : B\/w (10-22)\n    # Category 4 : B\/w (22-40)\n    # Category 5 : B\/w (40-513)\n    data['Fare'] = pd.cut(data['Fare'],[0,8,10,22,40,513],include_lowest=1,precision=0)\n   \n    # Mlle, Ms. and Miss are same \n    # Mrs. and  Mme are same\n    data['Name'] = data['Name'].replace({'Mlle.':\"Miss.\",      \n                                         'Ms.':'Miss.',\n                                         'Mme.': 'Mrs.'})\n    #Group all the non-common title and assign them as Misc.\n    data['Name'] = data['Name'].replace([x for x,y in data['Name'].value_counts().items() if y<=10],'Misc.')\n    \n    #One Hot Encoding\n    data = data.join(pd.get_dummies(dataset['Sex']))\n    data = data.join(pd.get_dummies(dataset['Pclass'],prefix='Pclass'))\n    data = data.join(pd.get_dummies(dataset['Embarked'],prefix='Embarked'))    \n    data = data.join(pd.get_dummies(data['Age'],prefix = 'Age'))\n    data = data.join(pd.get_dummies(data['Fare'],prefix = 'Fare'))\n    data = data.join(pd.get_dummies(data['Name'],prefix = 'Name'))\n    \n    #Label Encoding\n    label_encoder = LabelEncoder()\n    data['Name'] = label_encoder.fit_transform(data['Name'])\n    data['Fare'] = label_encoder.fit_transform(data['Fare'].map(str))\n    data['Age'] = label_encoder.fit_transform(data['Age'])\n    data['Embarked'] = label_encoder.fit_transform(data['Embarked'])\n    data['Pclass'] = dataset['Pclass']\n    \n    #Though Cabin contains most of the entries thus can be used in this way as\n    # data will be of those passengers who could afford the Cabib\n    data['Cabin'] = dataset['Cabin'].fillna(0).map(lambda x: 1 if x!=0 else 0)\n    \n    return data","5b2ccdc3":"train_data = feature_scale(train_dataset)","81c20231":"model = RandomForestClassifier()\nmodel.fit(train_data,train_dataset_survival)\nscore = model.score(train_data,train_dataset_survival)\ny_pre = model.predict(train_data)\nc = confusion_matrix(train_dataset_survival,y_pre)\nprint(f'Score : {score}')\nprint(f'F1 Score : {f1_score(train_dataset_survival,y_pre)}')\nprint(f'Confusion Matrix \\n {c}')    ","fbb344dd":"test_data = feature_scale(test_dataset)","74bb04d9":"test_pred = model.predict(test_data)","b7cd7f48":"result = pd.DataFrame({ 'PassengerId' : test_dataset['PassengerId'], 'Survived': test_pred })\nresult.to_csv('submission.csv',index=False)","5f9a927e":"# Using Random Forest,Label Encoding and One hot encoding"}}