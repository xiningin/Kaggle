{"cell_type":{"3de11a96":"code","f3e7872e":"code","22753d4f":"code","2ddbd6bf":"code","2c356335":"code","1bf5826f":"code","3e82e6eb":"code","27cb600d":"code","9a83825b":"code","6e8f2306":"code","cd1af12c":"code","a0b4572b":"code","f87fe21a":"code","92696d5e":"code","fcb97c40":"code","75bed2d4":"code","8fc3d4a5":"code","b199cd9d":"code","ac662346":"code","fa58eee8":"code","be723fb4":"code","dfbdf024":"code","35670975":"code","57bee672":"code","17d6a204":"code","a100468e":"code","aa3a5427":"code","ca555057":"code","f6a058df":"code","68677719":"code","bfa0fd07":"code","0a10c953":"code","9a88e60e":"code","9b17b252":"code","13ab3d1e":"code","0e441d82":"code","667de699":"code","cbef7021":"code","59f343c2":"code","e33060b6":"code","4b491ca1":"code","81502094":"code","06b28bb7":"code","282c826f":"code","c8722aef":"code","f482ae44":"code","cd66ca67":"code","00f3bba4":"code","068a8fb5":"code","b88de383":"code","261d0fbe":"code","4d3215ae":"code","066dd25b":"code","bec6d7b4":"code","ae268d86":"code","96c6af9d":"code","d100589a":"code","bd4ba005":"code","0552d9eb":"code","56de1235":"code","66b8a798":"code","7c5d147f":"code","afba8565":"code","68487d89":"code","6459408f":"code","84a28777":"code","6112470c":"code","270d9a0b":"code","b68494dd":"code","73f5e829":"code","c5a5abcc":"code","9e023c05":"code","0f799069":"code","8870ec68":"code","0328ab16":"code","1d9f620a":"code","371ad98b":"code","fea9249a":"code","9bf86304":"markdown","ea8ee3f2":"markdown","6951bcdf":"markdown","4e772ac5":"markdown","8abd1ad1":"markdown","9a318e4e":"markdown","03ca838d":"markdown","08893e5b":"markdown","ae6652c9":"markdown","c8603ffc":"markdown","80674db5":"markdown","3ad58330":"markdown","b32dde62":"markdown","3078657b":"markdown","5ee6d0a7":"markdown","ca89f5d4":"markdown","129a3985":"markdown","47659a68":"markdown","fe1f9b75":"markdown","6154a495":"markdown"},"source":{"3de11a96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3e7872e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"darkgrid\")\nsns.color_palette(\"colorblind\")","22753d4f":"df = pd.read_csv('..\/input\/depression-anxiety-stress-scales\/DASS_data_21.02.19\/data.csv', sep=r'\\t')\ndf.head()","2ddbd6bf":"print(df.shape)\nprint(df.columns)","2c356335":"df.describe()","1bf5826f":"DASS_keys = {'Depression': [3, 5, 10, 13, 16, 17, 21, 24, 26, 31, 34, 37, 38, 42],\n             'Anxiety': [2, 4, 7, 9, 15, 19, 20, 23, 25, 28, 30, 36, 40, 41],\n             'Stress': [1, 6, 8, 11, 12, 14, 18, 22, 27, 29, 32, 33, 35, 39]}\n\n\nDASS_scores = {'Depression': [(0, 10), (10, 14), (14, 21), (21, 28)],\n             'Anxiety': [(0, 8), (8, 10), (10, 15), (15, 20)],\n             'Stress': [(0, 15), (15, 19), (19, 26), (26, 34)]}","3e82e6eb":"df_conditions = {'Anxiety_A':[],'Anxiety_I':[],'Anxiety_E':[],\n                 'Depression_A':[],'Depression_I':[],'Depression_E':[],\n                 'Stress_A':[],'Stress_I':[],'Stress_E':[]}\nfor i in DASS_keys[\"Anxiety\"]:\n    df_conditions['Anxiety_A'].append('Q' + str(i) + 'A')\n    df_conditions['Anxiety_I'].append('Q' + str(i) + 'I')\n    df_conditions['Anxiety_E'].append('Q' + str(i) + 'E')\n\nfor i in DASS_keys[\"Depression\"]:\n    df_conditions['Depression_A'].append('Q' + str(i) + 'A')\n    df_conditions['Depression_I'].append('Q' + str(i) + 'I')\n    df_conditions['Depression_E'].append('Q' + str(i) + 'E')\n\nfor i in DASS_keys[\"Stress\"]:\n    df_conditions['Stress_A'].append('Q' + str(i) + 'A')\n    df_conditions['Stress_I'].append('Q' + str(i) + 'I')\n    df_conditions['Stress_E'].append('Q' + str(i) + 'E')","27cb600d":"df_conditions = pd.DataFrame(df_conditions)\ndf_conditions","9a83825b":"pd.set_option('display.max_rows', 500)\ndf.isna().sum()","6e8f2306":"responses_col = []\nresponse = []\nposition = []\ntime = []\n\nfor i in range(0, 42*3, 3):\n    responses_col.append(df.columns[i])\n\nfor i in range(0, 42*3, 3):\n    response.append(df[df.columns[i]].mean())\n    \nfor i in range(0, 42*3, 3):\n    position.append(df[df.columns[i+1]].mean())\n    \nfor i in range(0, 42*3, 3):\n    time.append(df[df.columns[i+2]].mean())\nQ_Details = pd.DataFrame({'Response':response, 'Position':position, 'Time':time}, index=range(1,43))\nQ_Details.index.name = 'Question'","cd1af12c":"Q_Details.head(2)","a0b4572b":"plt.figure(figsize=(20,6))\nsns.lineplot(data=Q_Details,x=Q_Details.index,y='Response')","f87fe21a":"Q_Details[Q_Details['Response']<2]","92696d5e":"plt.figure(figsize=(20,6))\nsns.lineplot(data=Q_Details,x=Q_Details.index,y='Time')","fcb97c40":"Q_Details[Q_Details['Time']>12000]","75bed2d4":"plt.figure(figsize=(20,6))\nsns.lineplot(data=Q_Details,x=Q_Details.index,y='Position')","8fc3d4a5":"plt.figure(figsize=(20,6))\nsns.regplot(data=Q_Details,x='Position',y='Time')","b199cd9d":"sns.heatmap(Q_Details.corr(),annot=True)","ac662346":"sns.boxplot(data=df,y='age')","fa58eee8":"df.loc[df['age'] > 95, 'age'] = df['age'].mean()\nsns.boxplot(data=df,y='age')","be723fb4":"age_group = ['Below 20','20-24', '25-29', '30-34', '35-39', '40-49', '50-59', 'Above 60']\ndef age_grouping(df, string):\n    \"\"\"Input: df, string = age column name\n       Output: df with new column age group\"\"\"\n    age_group_func = [\n    (df[string]<20),\n     ((df[string]>=20) & (df[string]<25)),\n     ((df[string]>=25) & (df[string]<30)),\n     ((df[string]>=30) & (df[string]<35)),\n     ((df[string]>=35) & (df[string]<40)),\n     ((df[string]>=40) & (df[string]<50)),\n     ((df[string]>=50) & (df[string]<60)),\n     (df[string]>=60)\n    ]\n    df.insert(df.columns.get_loc('age'), \"age_group\" ,np.select(age_group_func, age_group))\n    return df\n    \ndf = age_grouping(df, 'age')\ndf.head(5)","dfbdf024":"df.drop('age',axis=1, inplace=True)\ndf.head(2)","35670975":"sns.boxplot(data=df,y='familysize')","57bee672":"df.loc[df['familysize'] > 20, 'familysize'] = df['familysize'].mean()\nsns.boxplot(data=df,y='familysize')","17d6a204":"df['not_valid'] = 0\ndf['not_valid'] = df['not_valid'].where(df['VCL6']== 0, df['not_valid'] + 1)\ndf['not_valid'] = df['not_valid'].where(df['VCL9']== 0, df['not_valid'] + 1)\ndf['not_valid'] = df['not_valid'].where(df['VCL12']== 0, df['not_valid'] + 1)\ndf['not_valid'].value_counts()","a100468e":"df = df.loc[~df['not_valid'].isin([2, 3])]\ndf.drop('not_valid',axis=1,inplace=True)\ndf.head(2)","aa3a5427":"pd.set_option('display.max_columns', 500)\ndf.iloc[:, 131:157]","ca555057":"tipi = df.iloc[:,131:141]\ntipi.head(2)","f6a058df":"vcl = df.iloc[:,141:157]\nvcl.head(2)","68677719":"personal = df.iloc[:,157:171]\npersonal.head(2)","bfa0fd07":"major = df.iloc[:,171]\nmajor.head()","0a10c953":"survey_d = df.iloc[:,127:131]\nsurvey_d.head(2)","9a88e60e":"country = df.iloc[:,126]\ncountry.head()","9b17b252":"depr_scores = df.apply(lambda x: x[df_conditions['Depression_A']]-1,axis=1).sum(axis=1)\ndepr_scores","13ab3d1e":"plt.figure(figsize=(20,6))\ntipi.insert(0, 'score', depr_scores.values)\nsns.countplot(data=tipi,x='score')","0e441d82":"plt.figure(figsize=(10,6))\nsns.heatmap(tipi.corr(), annot=True)","667de699":"personal.insert(0, 'score', depr_scores.values)\nsurvey_d.insert(0, 'score', depr_scores.values)","cbef7021":"plt.figure(figsize=(10,6))\nsns.heatmap(personal.corr(), annot=True)","59f343c2":"plt.figure(figsize=(10,6))\nsns.heatmap(survey_d.corr(), annot=True)","e33060b6":"fig, axes = plt.subplots(3, 5, figsize=(20,20))\nfor i, ax in enumerate(axes.ravel()):\n    sns.boxenplot(data=personal, y='score', x=personal.iloc[:,i], ax=ax)","4b491ca1":"mean_score_by_age = personal.groupby('age_group')['score'].mean().reset_index().sort_values(by='age_group')\nplt.figure(figsize=(15,6))\nsns.barplot(data=mean_score_by_age, y='score', x='age_group', order=age_group)","81502094":"tipi.drop('score', axis=1, inplace=True)\npersonal.drop('score', axis=1, inplace=True)\nsurvey_d.drop('score', axis=1, inplace=True)","06b28bb7":"anx_scores = df.apply(lambda x: x[df_conditions['Anxiety_A']]-1,axis=1).sum(axis=1)\nstress_scores = df.apply(lambda x: x[df_conditions['Stress_A']]-1,axis=1).sum(axis=1)\n\ntipi.insert(0, 'score', anx_scores.values)\npersonal.insert(0, 'score', anx_scores.values)\nsurvey_d.insert(0, 'score', anx_scores.values)\n\nplt.figure(figsize=(20,6))\nsns.countplot(data=tipi,x='score')","282c826f":"plt.figure(figsize=(10,6))\n#sns.heatmap(tipi.corr(), annot=True)\nsns.heatmap(personal.corr(), annot=True)\n#sns.heatmap(survey_d.corr(), annot=True)","c8722aef":"fig, axes = plt.subplots(3, 5, figsize=(20,12))\nfor i, ax in enumerate(axes.ravel()):\n    sns.boxenplot(data=personal, y='score', x=personal.iloc[:,i], ax=ax)","f482ae44":"mean_score_by_age = personal.groupby('age_group')['score'].mean().reset_index().sort_values(by='age_group')\nplt.figure(figsize=(15,6))\nsns.barplot(data=mean_score_by_age, y='score', x='age_group', order=age_group)","cd66ca67":"tipi.drop('score', axis=1, inplace=True)\npersonal.drop('score', axis=1, inplace=True)\nsurvey_d.drop('score', axis=1, inplace=True)","00f3bba4":"tipi.insert(0, 'score', stress_scores.values)\npersonal.insert(0, 'score', stress_scores.values)\nsurvey_d.insert(0, 'score', stress_scores.values)\n\nplt.figure(figsize=(20,6))\nsns.countplot(data=tipi,x='score')","068a8fb5":"plt.figure(figsize=(10,6))\nsns.heatmap(tipi.corr(), annot=True)","b88de383":"plt.figure(figsize=(10,6))\nsns.heatmap(personal.corr(), annot=True)\n#sns.heatmap(survey_d.corr(), annot=True)","261d0fbe":"fig, axes = plt.subplots(3, 5, figsize=(20,12))\nfor i, ax in enumerate(axes.ravel()):\n    sns.boxenplot(data=personal, y='score', x=personal.iloc[:,i], ax=ax)","4d3215ae":"mean_score_by_age = personal.groupby('age_group')['score'].mean().reset_index()\nplt.figure(figsize=(15,6))\nsns.barplot(data=mean_score_by_age, y='score', x='age_group', order=age_group)","066dd25b":"total_corr = df.iloc[:,126:]\ntotal_corr = total_corr.drop(columns=total_corr.iloc[:,15:31].columns,axis=1)\nplt.figure(figsize=(35,6))\nsns.heatmap(total_corr.corr(), annot=True)","bec6d7b4":"print(depr_scores.shape)\nprint(anx_scores.shape)\nprint(stress_scores.shape)","ae268d86":"print(major.str.lower().unique())\nprint(country.unique())","96c6af9d":"features = df[ \n    ['source', 'uniquenetworklocation','TIPI1','TIPI2','TIPI3','TIPI4','TIPI5','TIPI6','TIPI7','TIPI8','TIPI9','TIPI10',\n     'education','urban','gender','hand','orientation','race','voted','married','familysize',\n     'age_group','engnat','screensize','religion']\n]\n\nzero_to_nan = ['TIPI1','TIPI2','TIPI3','TIPI4','TIPI5','TIPI6','TIPI7','TIPI8','TIPI9','TIPI10',\n          'education','urban','gender','hand','orientation','race','voted','married','engnat','religion']\n[features[x].replace(0,np.nan, inplace=True) for x in zero_to_nan]\nfeatures.head(2)","d100589a":"df_train = features.dropna(subset=zero_to_nan)\ndf_train.shape","bd4ba005":"df_train.isnull().sum()","0552d9eb":"nan = features[~features.index.isin(df_train.index)]\nnan.shape","56de1235":"df_train.describe()","66b8a798":"def Score(df, string):\n    conditions = [\n    ((df >= DASS_scores[string][0][0]) & (df < DASS_scores[string][0][1])),\n    ((df >= DASS_scores[string][1][0]) & (df < DASS_scores[string][1][1])),\n    ((df >= DASS_scores[string][2][0]) & (df < DASS_scores[string][2][1])),\n    ((df >= DASS_scores[string][3][0]) & (df < DASS_scores[string][3][1])),\n    (((df >= DASS_scores[string][3][1])))\n    ]\n    values = ['Normal','Mild', 'Moderate', 'Severe', 'Extremely Severe']\n    df2 = pd.DataFrame({'score':df})\n    df2['Score_Label'] = np.select(conditions, values)\n    return df2\n    \ndepr_target = Score(depr_scores, 'Depression')\ndepr_target.head()","7c5d147f":"df_train = df_train.join(depr_target, how='left') \ndf_train.shape","afba8565":"print(depr_target.shape)\nprint(df_train.shape)","68487d89":"depr_target = df_train.iloc[:,-1]\ndepr_target.head()","6459408f":"df_train = df_train.iloc[:,:-2]\ndf_train.head(2)","84a28777":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_train, depr_target, test_size=0.2,random_state=42)","6112470c":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","270d9a0b":"from category_encoders import OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\npipe = make_pipeline(\n    OneHotEncoder(use_cat_names=True),\n    StandardScaler(),\n    RandomForestClassifier(min_samples_leaf=10, n_jobs=-1, random_state=10, oob_score=True)\n)\n\npipe.fit(X_train, y_train)\nprint('Train score:', pipe.score(X_train, y_train))\nprint('Test score:', pipe.score(X_test, y_test))","b68494dd":"rf = pipe.named_steps['randomforestclassifier']\ncolnames = pipe.named_steps['onehotencoder'].get_feature_names()\nimportances = pd.Series(rf.feature_importances_, colnames)\n\nn = 10\nplt.figure(figsize=(10,n\/4))\nplt.title(f'Top {n} features with onehotencoder')\nimportances.sort_values()[-n:].plot.barh();","73f5e829":"depr_target = Score(depr_scores, 'Depression')\ndf_train = df_train.join(depr_target, how='left') \ndepr_target = df_train.iloc[:,-2]\ndf_train = df_train.iloc[:,:-2]\nX_train, X_test, y_train, y_test = train_test_split(df_train, depr_target, test_size=0.2,random_state=42)","c5a5abcc":"from sklearn.ensemble import RandomForestRegressor\n\npipe = make_pipeline(\n    OneHotEncoder(use_cat_names=True),\n    StandardScaler(),\n    RandomForestRegressor(n_estimators = 100, oob_score=True, random_state=42)\n)\n\npipe.fit(X_train, y_train)\nprint('Train score:', pipe.score(X_train, y_train))\nprint('Test score:', pipe.score(X_test, y_test))\n\ny_pred = pipe.predict(X_test)","9e023c05":"rf = pipe.named_steps['randomforestregressor']\ncolnames = pipe.named_steps['onehotencoder'].get_feature_names()\nimportances = pd.Series(rf.feature_importances_, colnames)\n\nn = 10\nplt.figure(figsize=(10,n\/4))\nplt.title(f'Top {n} features with onehotencoder')\nimportances.sort_values()[-n:].plot.barh();","0f799069":"anx_target = Score(anx_scores, 'Anxiety')\ndf_train = df_train.join(anx_target, how='left') \nanx_target = df_train.iloc[:,-2]\ndf_train = df_train.iloc[:,:-2]\nX_train, X_test, y_train, y_test = train_test_split(df_train, anx_target, test_size=0.2,random_state=42)","8870ec68":"pipe = make_pipeline(\n    OneHotEncoder(use_cat_names=True),\n    StandardScaler(),\n    RandomForestRegressor(n_estimators = 100, oob_score=True, random_state=42)\n)\n\npipe.fit(X_train, y_train)\nprint('Train score:', pipe.score(X_train, y_train))\nprint('Test score:', pipe.score(X_test, y_test))\n\ny_pred = pipe.predict(X_test)","0328ab16":"rf = pipe.named_steps['randomforestregressor']\ncolnames = pipe.named_steps['onehotencoder'].get_feature_names()\nimportances = pd.Series(rf.feature_importances_, colnames)\n\nn = 10\nplt.figure(figsize=(10,n\/4))\nplt.title(f'Top {n} features with onehotencoder')\nimportances.sort_values()[-n:].plot.barh();","1d9f620a":"strss_target = Score(stress_scores, 'Stress')\ndf_train = df_train.join(strss_target, how='left') \nstrss_target = df_train.iloc[:,-2]\ndf_train = df_train.iloc[:,:-2]\nX_train, X_test, y_train, y_test = train_test_split(df_train, strss_target, test_size=0.2,random_state=42)","371ad98b":"pipe = make_pipeline(\n    OneHotEncoder(use_cat_names=True),\n    StandardScaler(),\n    RandomForestRegressor(n_estimators = 100, oob_score=True, random_state=42)\n)\n\npipe.fit(X_train, y_train)\nprint('Train score:', pipe.score(X_train, y_train))\nprint('Test score:', pipe.score(X_test, y_test))\n\ny_pred = pipe.predict(X_test)","fea9249a":"rf = pipe.named_steps['randomforestregressor']\ncolnames = pipe.named_steps['onehotencoder'].get_feature_names()\nimportances = pd.Series(rf.feature_importances_, colnames)\n\nn = 10\nplt.figure(figsize=(10,n\/4))\nplt.title(f'Top {n} features with onehotencoder')\nimportances.sort_values()[-n:].plot.barh();","9bf86304":"**Validity Check**\n\nAs mentioned in the codebook regarding VCL:\n> A value of 1 is checked, 0 means unchecked. The words at VCL6, VCL9, and VCL12 are not real words and can be used as a validity check.\n\nI will check for these features values to see if there are any tests which failed validity.","ea8ee3f2":"After trying a bunch of methods and different data organizing, it seems that random forest regressor and familiar methods wont give a solution to this problem.\n\nI will try doing the same with anxiety and stress:","6951bcdf":"Higher test score in predicting stress but still low.\n\nIn the future I will try a different way and upload a new version, thank you for reading","4e772ac5":"24th Jan, 2022\n\n# Depression, Anxiety and Stress Prediction\n**This dataset im going to to analyze and try building a model for is results from an online DASS test which scales levels of depression, anxiety and stress.**\n\nI would like to give credit for projects which I took inspirations from:\n\nhttps:\/\/www.kaggle.com\/yamqwe\/predicting-depression-anxiety-and-stress-eda#Numerical-Columns-%F0%9F%93%89\n\nhttps:\/\/www.kaggle.com\/davidleeee\/what-factors-predicts-someone-s-anxiety\n\nI highly recommend reading the full description of the data in order to understand it better:\n\n> This data was collected with an on-line version of the Depression Anxiety Stress Scales (DASS), see http:\/\/www2.psy.unsw.edu.au\/dass\/\n> \n> The survey was open to anyone and people were motivated to take it to get personalized results. At the end of the test they also were given the option to complete a short research survey. This datatset comes from those who agreed to complete the research survey and answered yes to the question \"Have you given accurate answers and may they be used for research?\" at the end.\n> \n> This data was collected 2017 - 2019.\n> \n> The following items were included in the survey:\n> \n> Q1\tI found myself getting upset by quite trivial things.\n> Q2\tI was aware of dryness of my mouth.\n> Q3\tI couldn't seem to experience any positive feeling at all.\n> Q4\tI experienced breathing difficulty (eg, excessively rapid breathing, breathlessness in the absence of physical exertion).\n> Q5\tI just couldn&#39;t seem to get going.\n> Q6\tI tended to over-react to situations.\n> Q7\tI had a feeling of shakiness (eg, legs going to give way).\n> Q8\tI found it difficult to relax.\n> Q9\tI found myself in situations that made me so anxious I was most relieved when they ended.\n> Q10\tI felt that I had nothing to look forward to.\n> Q11\tI found myself getting upset rather easily.\n> Q12\tI felt that I was using a lot of nervous energy.\n> Q13\tI felt sad and depressed.\n> Q14\tI found myself getting impatient when I was delayed in any way (eg, elevators, traffic lights, being kept waiting).\n> Q15\tI had a feeling of faintness.\n> Q16\tI felt that I had lost interest in just about everything.\n> Q17\tI felt I wasn&#39;t worth much as a person.\n> Q18\tI felt that I was rather touchy.\n> Q19\tI perspired noticeably (eg, hands sweaty) in the absence of high temperatures or physical exertion.\n> Q20\tI felt scared without any good reason.\n> Q21\tI felt that life wasn&#39;t worthwhile.\n> Q22\tI found it hard to wind down.\n> Q23\tI had difficulty in swallowing.\n> Q24\tI couldn&#39;t seem to get any enjoyment out of the things I did.\n> Q25\tI was aware of the action of my heart in the absence of physical exertion (eg, sense of heart rate increase, heart missing a beat).\n> Q26\tI felt down-hearted and blue.\n> Q27\tI found that I was very irritable.\n> Q28\tI felt I was close to panic.\n> Q29\tI found it hard to calm down after something upset me.\n> Q30\tI feared that I would be &quot;thrown&quot; by some trivial but unfamiliar task.\n> Q31\tI was unable to become enthusiastic about anything.\n> Q32\tI found it difficult to tolerate interruptions to what I was doing.\n> Q33\tI was in a state of nervous tension.\n> Q34\tI felt I was pretty worthless.\n> Q35\tI was intolerant of anything that kept me from getting on with what I was doing.\n> Q36\tI felt terrified.\n> Q37\tI could see nothing in the future to be hopeful about.\n> Q38\tI felt that life was meaningless.\n> Q39\tI found myself getting agitated.\n> Q40\tI was worried about situations in which I might panic and make a fool of myself.\n> Q41\tI experienced trembling (eg, in the hands).\n> Q42\tI found it difficult to work up the initiative to do things.\n> \n> Each item was presented one at a time in a random order for each new participant along with a 4 point rating scale asking the user to indicate how often that had been true of them in the past week where\n> \n> 1 = Did not apply to me at all \n> 2 = Applied to me to some degree, or some of the time\n> 3 = Applied to me to a considerable degree, or a good part of the time\n> 4 = Applied to me very much, or most of the time\n> \n> (see the file demo1.png for how this looked)\n> \n> This response is stored in variable A (e.g. Q1A). Also recorded was the time taken in milliseconds to answer that question (E) and that question's position in the survey (I).\n> \n> These other durations were also recorded (measured on the server's side):\n> \n> introelapse\t\tThe time spent on the introduction\/landing page (in seconds)\n> testelapse\t\tThe time spent on all the DASS questions (should be equivalent to the time elapsed on all the indiviudal questions combined)\n> surveyelapse\tThe time spent answering the rest of the demographic and survey questions\n> \n> On the next page was a generic demographics survey with many different questions.\n> \n> The Ten Item Personality Inventory was administered (see Gosling, S. D., Rentfrow, P. J., & Swann, W. B., Jr. (2003). A Very Brief Measure of the Big Five Personality Domains. Journal of Research in Personality, 37, 504-528.):\n> \n> TIPI1\tExtraverted, enthusiastic.\n> TIPI2\tCritical, quarrelsome.\n> TIPI3\tDependable, self-disciplined.\n> TIPI4\tAnxious, easily upset.\n> TIPI5\tOpen to new experiences, complex.\n> TIPI6\tReserved, quiet.\n> TIPI7\tSympathetic, warm.\n> TIPI8\tDisorganized, careless.\n> TIPI9\tCalm, emotionally stable.\n> TIPI10\tConventional, uncreative.\n> \n> The TIPI items were rated \"I see myself as:\" _____ such that\n> \n> 1 = Disagree strongly\n> 2 = Disagree moderately\n> 3 = Disagree a little\n> 4 = Neither agree nor disagree\n> 5 = Agree a little\n> 6 = Agree moderately\n> 7 = Agree strongly\n> \n> \n> \n> The following items were presented as a check-list and subjects were instructed \"In the grid below, check all the words whose definitions you are sure you know\":\n> \n> VCL1\tboat\n> VCL2\tincoherent\n> VCL3\tpallid\n> VCL4\trobot\n> VCL5\taudible\n> VCL6\tcuivocal\n> VCL7\tpaucity\n> VCL8\tepistemology\n> VCL9\tflorted\n> VCL10\tdecide\n> VCL11\tpastiche\n> VCL12\tverdid\n> VCL13\tabysmal\n> VCL14\tlucid\n> VCL15\tbetray\n> VCL16\tfunny\n> \n> A value of 1 is checked, 0 means unchecked. The words at VCL6, VCL9, and VCL12 are not real words and can be used as a validity check.\n> \n> A bunch more questions were then asked:\n> \n> \n> education\t\t\t\"How much education have you completed?\", 1=Less than high school, 2=High school, 3=University degree, 4=Graduate degree\n> urban\t\t\t\t\"What type of area did you live when you were a child?\", 1=Rural (country side), 2=Suburban, 3=Urban (town, city)\n> gender\t\t\t\t\"What is your gender?\", 1=Male, 2=Female, 3=Other\n> engnat\t\t\t\t\"Is English your native language?\", 1=Yes, 2=No\n> age\t\t\t\t\t\"How many years old are you?\"\n> hand\t\t\t\t\"What hand do you use to write with?\", 1=Right, 2=Left, 3=Both\n> religion\t\t\t\"What is your religion?\", 1=Agnostic, 2=Atheist, 3=Buddhist, 4=Christian (Catholic), 5=Christian (Mormon), 6=Christian (Protestant), 7=Christian (Other), 8=Hindu, 9=Jewish, 10=Muslim, 11=Sikh, 12=Other\n> orientation\t\t\t\"What is your sexual orientation?\", 1=Heterosexual, 2=Bisexual, 3=Homosexual, 4=Asexual, 5=Other\n> race\t\t\t\t\"What is your race?\", 10=Asian, 20=Arab, 30=Black, 40=Indigenous Australian, 50=Native American, 60=White, 70=Other\n> voted\t\t\t\t\"Have you voted in a national election in the past year?\", 1=Yes, 2=No\n> married\t\t\t\t\"What is your marital status?\", 1=Never married, 2=Currently married, 3=Previously married\n> familysize\t\t\t\"Including you, how many children did your mother have?\"\t\t\n> major\t\t\t\t\"If you attended a university, what was your major (e.g. \"psychology\", \"English\", \"civil engineering\")?\"\n> \n> The following values were derived from technical information:\n> \n> country\t\t\t\tISO country code of where the user connected from\n> screensize\t\t\t1=device with small screen (phone, etc), 2=device with big screen (laptop, desktop, etc)\n> uniquenetworklocation\t\t1=only one survey from user's specific network in dataset, 2=multiple surveys submitted from the network of this user  (2 does not necessarily imply duplicate records for an individual, as it could be different students at a single school or different memebers of the same household; and even if 1 there still could be duplicate records from a single individual e.g. if they took it once on their wifi and once on their phone)\n> source\t\t\thow the user found the test, 1=from the front page of the site hosting the survey, 2=from google, 0=other or unknown\n> ","8abd1ad1":"**Observation #11 -** The average depression score lowers with aging\n\nI will now do the same with anxiety and stress to test for different observations.","9a318e4e":"There is not much luck there, I will try with to predict the scores with regression.","03ca838d":"# Preprocessing","08893e5b":"I'm going to check for outliers for age and family size, and correct errors if there are any.","ae6652c9":"### Correlations\n\nNow that I have all features divided, I will check correlation for between categorical features to each condition(D\/A\/S), to try understerding more.\n\nIt seems that the scores are numbers between 1-4 but as the original text it is between 0-3. Score calculation should be with 0-3 answers, therefore I'll subtract by 1 each answer when calculating.","c8603ffc":"# Importing","80674db5":"I want to check if there is any connection between the responses, the positions and the time","3ad58330":"I'm now going to match the scores, and the scores label with the features to have a matching features table and label.\n\nI'm trying to use classifier to predict the score label, and then I will use regressor to try predicting the score itself.","b32dde62":"**Observation #1** - Position of the questions did not cause different answers, it is almost the same average for all questions.","3078657b":"**Observation #12 -** Gender and Voted have slighly higher correlation with anxiety and stress scores than in depression scores, not by much.","5ee6d0a7":"**Observation #3 -** There seems to be a positive correlation between TIPI4 to the score \n\n**Observation #4 -** In addition there is a negative correlation between TIPI9 to the score ","ca89f5d4":"For model training I would want to drop the answers == 0 for demographic questions since it may cause bad training.\n0 means it is unknown.","129a3985":"**Observation #5 -** People with higher education than high school, or less have lower score of depression on average.\n\n**Observation #6 -** People who identify themselves as Other gender are higher associated with higher depression levels.\n\n**Observation #7 -** Bisexuals seem to have higher depression scores on average.\n\n**Observation #8 -** People who haven't voted also had higher mean scores.\n\n**Observation #9 -** Currently married people have much lower average of scores than others.\n\n**Observation #10 -** It seems that we can associate most of the observations above by anomie. Bisexuals, atheists, non-voters, not-married, other gender and high-school educated - all of them logically could have less stability resulting from a lack of purpose or ideals.","47659a68":"**Observation #2** - There seems to be somewhat correlation between Position and Time, but I'm not going to get deep into it since its low.","fe1f9b75":"# Model Building","6154a495":"# EDA\n\nI'll start by categorizing each question by the given condition it is related to:\n\n> https:\/\/neurocogsystem.com\/wp-content\/uploads\/2021\/02\/DASS-42-Scoring.pdf"}}