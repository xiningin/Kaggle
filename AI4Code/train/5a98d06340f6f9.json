{"cell_type":{"e708921a":"code","c3580d11":"code","cc5e98ff":"code","6eda0f1d":"code","05a4cf09":"code","de009a6c":"code","d09af3de":"code","c36cf847":"markdown","8b4e7a51":"markdown","38dc4e32":"markdown","049eeef0":"markdown","287e3085":"markdown","ccd96bab":"markdown","2b2a0aee":"markdown"},"source":{"e708921a":"!pip install 'kaggle-environments>=0.2.1'\n\nimport kaggle_environments","c3580d11":"from kaggle_environments import evaluate, make\nimport numpy as np\nenv = make(\"halite\", debug=True)","cc5e98ff":"%%writefile submission.py\n\nimport numpy as np\nclass gameInfo:\n    '''Infomation about the state of the game'''\n    def __init__(self, observation):\n        #player id\n        self.player = observation['player']\n        # gives a list containing two player lists - which contain:\n        # - player halite (int); dict('shipyardid': shipyardloc); dict('shipn': shipn_loc) \n        self.players = observation['players']\n        # turn number\n        self.step = observation['step']\n        \n\n\nclass haliteBoard:\n    ''' Functions for the board\n    observation - dict with 3 keys\n        player: 0 # player id\n        step: turn in the game\n        halite map - array of halite\n    '''\n    def __init__(self, observation):\n         # creates a 1d array that matches the halite board for reference\n        self.loc_board1d = np.array(list(range(225)))\n        # creates a 2d array that matches the halite board for reference\n        self.loc_board2d = np.array(list(range(225))).reshape(15,15)\n        # the halite board - this should contain positions of all assets 1d\n        self.halite_board1d = np.array(observation.halite)\n         # the halite board - this should contain positions of all assets 2d\n        self.halite_board2d = np.array(observation.halite).reshape(15,15)\n        # map details\n        self.width = 15\n        self.height = 15\n        \n    def get_xy(self,posistion):\n        ''' Takes a position e.g 101 and returns the x,y coordinates as a tuple''' \n        x,y = np.where(self.loc_board2d == posistion)\n        coords = list(zip(x,y))\n        return coords[0]\n    \n    # make function that takes coordinates and gets the index of the map\n    def get_index(self, xy):\n        '''takes tuple of (x, y) and returns position on board'''\n        index = (xy[0] * 15) + xy[1] \n        return index\n        \n    \n    \n    \n    def get_nearest_halite(self,posistion):\n        '''finds the coordiantes for the nearest halite, \n        not accounting for wraparound returns (x,y)'''\n        # where the ship is\n        current_coords = self.get_xy(posistion)\n        # where the location on the board has halite\n        # this isn't working correctly\n        hx, hy = np.where(self.halite_board2d > 100)\n        #list of halite locations\n        halite_coords = list(zip(hx,hy))\n        distances = {}\n        \n        for i in halite_coords:\n            # find euclidean distance, doesn't take into account wrap around\n            dist = np.sqrt((i[0] - current_coords[0])**2 + (i[1] - current_coords[1])**2)\n            distances[i] = dist\n        # from the dict get the closest set of coords     \n        closest_xy =  min(distances, key=distances.get)\n        return closest_xy\n    \n   \n    def get_surrounding_halite(self, posistion):\n        '''returns a dict with halite in each direction accounting for wrap'''\n        b = self.halite_board1d\n        surrounding = {None:b[posistion],'NORTH':np.take(b,[posistion-15], mode = 'wrap'), \n                       'SOUTH':np.take(b,[posistion+15],mode = 'wrap'),\n                       'EAST':np.take(b,[posistion+1],mode = 'wrap'), \n                       'WEST':np.take(b,[posistion-1],mode = 'wrap')}\n        return surrounding\n\n    def get_surrounding_loc(self,posistion):\n        ''' returns the board location number of the surrounding locations \n        - N,S,E,W accounting for wrap '''\n        tb = self.loc_board1d\n        surrounding_locations = [np.take(tb,[posistion-15], mode = 'wrap'),\n                                 np.take(tb,[posistion+15],mode = 'wrap'),\n                                np.take(tb,[posistion+1],mode = 'wrap'),\n                                np.take(tb,[posistion-1],mode = 'wrap')]\n\n        return surrounding_locations\n    \n    def get_occupied_locs(self, posistion, shipyards, ships, opp_shipyards, opp_ships):\n        ''' Returns all the occupied locations (number) on the map \n        excluding the current position'''\n        \n        # need to handle for when there are no ships or shipyards\n        opp_ship_locs = [i[0] for i in list(opp_ships.values())]  # e.g [0, 34, 59]\n        player_ship_locs = [i[0] for i in list(ships.values())]\n        #logic ish\n        if len(opp_shipyards.values()) == 0:\n            return opp_ship_locs + player_ship_locs\n           \n        else:\n            opp_shipyard_locs = [i for i in list(opp_shipyards.values())]\n            return opp_ship_locs + player_ship_locs + opp_shipyard_locs\n        \n     # working well   \n    def is_shipyard_occupied(self, ships, shipyards):\n        ''' Returns true if there is a ship in our shipyard'''\n        player_ship_locs  = [i[0] for i in list(ships.values())]\n        if len(shipyards.values()) > 1:\n            shipyards = [i[0] for i in list(shipyards.values())]\n        elif len(shipyards.values()) < 1:\n            return False\n        else:\n            #we have one shipyard\n            shipyards =[i for i in list(shipyards.values())]\n            for i in player_ship_locs:\n                if i in shipyards:\n                    return True\n                else:\n                    return False\n                \n    def get_safe_options_surrounding(self, posistion, ship_locations,surrounding):\n        ''' Will take the ships position and the dict (ship_action) of moves \n        for greedy navigation and check if they are safe'''\n        # get the number locations around the ship\n        surrounding_locs = self.get_surrounding_loc(posistion)\n        # I want to remove the occupied locations from the max halite dict\n        surrounding_locs = [i[0] for i in surrounding_locs]\n        nav_dict = {}\n        nav_dict['NORTH'], nav_dict['SOUTH'], nav_dict['EAST'], nav_dict['WEST'] = surrounding_locs\n        # now simply remove the keys where their values are in ship_locations\n        for k,v in list(nav_dict.items()):\n            if v in ship_locations:\n                surrounding.pop(k)\n        return surrounding   \n        \n\ndef get_moves_to_target(ship_loc,ship_locations, board, target):\n    '''Takes ship location and target and returns a list of 1 or more viable moves'''\n    posistion_xy = board.get_xy(ship_loc)\n    # takes int\n    target_xy = board.get_xy(target)\n\n    move_dict = {}\n    if posistion_xy[0] > target_xy[0]:\n        move_dict['NORTH'] = ship_loc + 15\n    if posistion_xy[0] < target_xy[0]:\n        move_dict['SOUTH'] = ship_loc - 15\n    if posistion_xy[1] < target_xy[1]:\n         move_dict['EAST'] = ship_loc + 1\n    if posistion_xy[1] > target_xy[1]:\n         move_dict['WEST'] = ship_loc - 1\n    for k,v in list(move_dict.items()):\n            if v in ship_locations:\n                move_dict.pop(k)\n    return move_dict\n\n\n\ndef greedy_collect(ship_loc, ship_locations, board):\n    ''' Takes a ship location and the halite board returns a valid move'''\n    # needs to get the greedy move with a bias, and check if moves are safe\n    # How much it cost's to move?\n    move_cost = 0.1\n    surrounding = board.get_surrounding_halite(ship_loc)\n    #Bias staying still to stop wasting halite\n    surrounding[None] = surrounding[None] + (surrounding[None]* move_cost)\n    # for now if there is no halite at all move south\n    if sum([i for i in surrounding.values()]) == 0.0:\n        nearest_halite = board.get_nearest_halite(ship_loc)\n        target = board.get_index(nearest_halite)\n        moves = get_moves_to_target(ship_loc, ship_locations, board, target)\n        # now need to somehow check if the NORTH, SOUTH, WEST etc is \n        return np.random.choice(list(moves.keys()))\n\n    else:\n        surrounding = board.get_safe_options_surrounding(ship_loc, ship_locations,surrounding)\n        return max(surrounding, key=surrounding.get)\n    \n# Each ship id will be assigned a state, one of COLLECT or DEPOSIT, \n# this was something that was in the tutorial in halite 3\nglobal states\nstates = {}\n\nCOLLECT = \"COLLECT\"\nDEPOSIT = \"DEPOSIT\"\n    \n\ndef my_agent(obs):\n    state = gameInfo(obs)\n    board = haliteBoard(obs)\n    \n   \n    \n    halite, shipyards, ships = state.players[state.player]\n    opp_halite, opp_shipyards, opp_ships = state.players[1]\n    \n    action = {}\n    \n    for uid, shipyard in shipyards.items():\n    # Maintain one ship \n        if len(ships) == 0:\n            action[uid] = \"SPAWN\"\n    \n    for uid, ship in ships.items():\n        # Maintain one shipyard \n        if len(shipyards) == 0:\n            action[uid] = \"CONVERT\"\n            continue        \n    \n    for uid, ship_info in ships.items():\n        #Assuming it has just spawned\n        if uid not in states:\n            states[uid] = COLLECT\n        # If we are collecting    \n        if states[uid] == COLLECT:\n            if ship_info[1] > 500:\n                states[uid] = DEPOSIT\n            else:\n                #greedy collect\n                surrounding = board.get_surrounding_halite(ship_info[0])  # index 0 is the location, 1 is the amount of halite of the ship\n                # get ship locations\n                ship_locations = board.get_occupied_locs(ship_info[0], shipyards, ships, opp_shipyards, opp_ships)\n                ship_action = greedy_collect(ship_info[0], ship_locations, board)\n                if ship_action is not None:\n                    action[uid] = ship_action\n        \n        # return to shipyard\n        if states[uid] == DEPOSIT:\n            if ship_info[1] < 20:\n                states[uid] = COLLECT\n            else:\n                ship_locations = board.get_occupied_locs(ship_info[0], shipyards, ships, opp_shipyards, opp_ships)\n                moves = get_moves_to_target(ship_info[0], ship_locations, board, shipyard)\n                if moves == {}:\n                    ship_action = None\n                else:\n                    ship_action = np.random.choice(list(moves.keys()))\n                if ship_action is not None:\n                    action[uid] = ship_action    \n\n    return action","6eda0f1d":"class gameInfo:\n    '''Infomation about the state of the game'''\n    def __init__(self, observation):\n        #player id\n        self.player = observation['player']\n        # gives a list containing two player lists - which contain:\n        # - player halite (int); dict('shipyardid': shipyardloc); dict('shipn': shipn_loc) \n        self.players = observation['players']\n        # turn number\n        self.step = observation['step']\n        \n\n\nclass haliteBoard:\n    ''' Functions for the board\n    observation - dict with 3 keys\n        player: 0 # player id\n        step: turn in the game\n        halite map - array of halite\n    '''\n    def __init__(self, observation):\n         # creates a 1d array that matches the halite board for reference\n        self.loc_board1d = np.array(list(range(225)))\n        # creates a 2d array that matches the halite board for reference\n        self.loc_board2d = np.array(list(range(225))).reshape(15,15)\n        # the halite board - this should contain positions of all assets 1d\n        self.halite_board1d = np.array(observation.halite)\n         # the halite board - this should contain positions of all assets 2d\n        self.halite_board2d = np.array(observation.halite).reshape(15,15)\n        # map details\n        self.width = 15\n        self.height = 15\n        \n    def get_xy(self,posistion):\n        ''' Takes a position e.g 101 and returns the x,y coordinates as a tuple''' \n        x,y = np.where(self.loc_board2d == posistion)\n        coords = list(zip(x,y))\n        return coords[0]\n    \n    # make function that takes coordinates and gets the index of the map\n    def get_index(self, xy):\n        '''takes tuple of (x, y) and returns position on board'''\n        index = (xy[0] * 15) + xy[1] \n        return index\n        \n    \n    \n    \n    def get_nearest_halite(self,posistion):\n        '''finds the coordiantes for the nearest halite, \n        not accounting for wraparound returns (x,y)'''\n        # where the ship is\n        current_coords = self.get_xy(posistion)\n        # where the location on the board has halite\n        # this isn't working correctly\n        hx, hy = np.where(self.halite_board2d > 100)\n        #list of halite locations\n        halite_coords = list(zip(hx,hy))\n        distances = {}\n        \n        for i in halite_coords:\n            # find euclidean distance, doesn't take into account wrap around\n            dist = np.sqrt((i[0] - current_coords[0])**2 + (i[1] - current_coords[1])**2)\n            distances[i] = dist\n        # from the dict get the closest set of coords     \n        closest_xy =  min(distances, key=distances.get)\n        return closest_xy\n    \n   \n    def get_surrounding_halite(self, posistion):\n        '''returns a dict with halite in each direction accounting for wrap'''\n        b = self.halite_board1d\n        surrounding = {None:b[posistion],'NORTH':np.take(b,[posistion-15], mode = 'wrap'), \n                       'SOUTH':np.take(b,[posistion+15],mode = 'wrap'),\n                       'EAST':np.take(b,[posistion+1],mode = 'wrap'), \n                       'WEST':np.take(b,[posistion-1],mode = 'wrap')}\n        return surrounding\n\n    def get_surrounding_loc(self,posistion):\n        ''' returns the board location number of the surrounding locations \n        - N,S,E,W accounting for wrap '''\n        tb = self.loc_board1d\n        surrounding_locations = [np.take(tb,[posistion-15], mode = 'wrap'),\n                                 np.take(tb,[posistion+15],mode = 'wrap'),\n                                np.take(tb,[posistion+1],mode = 'wrap'),\n                                np.take(tb,[posistion-1],mode = 'wrap')]\n\n        return surrounding_locations\n    \n    def get_occupied_locs(self, posistion, shipyards, ships, opp_shipyards, opp_ships):\n        ''' Returns all the occupied locations (number) on the map \n        excluding the current position'''\n        \n        # need to handle for when there are no ships or shipyards\n        opp_ship_locs = [i[0] for i in list(opp_ships.values())]  # e.g [0, 34, 59]\n        player_ship_locs = [i[0] for i in list(ships.values())]\n        #logic ish\n        if len(opp_shipyards.values()) == 0:\n            return opp_ship_locs + player_ship_locs\n           \n        else:\n            opp_shipyard_locs = [i for i in list(opp_shipyards.values())]\n            return opp_ship_locs + player_ship_locs + opp_shipyard_locs\n        \n     # working well   \n    def is_shipyard_occupied(self, ships, shipyards):\n        ''' Returns true if there is a ship in our shipyard'''\n        player_ship_locs  = [i[0] for i in list(ships.values())]\n        if len(shipyards.values()) > 1:\n            shipyards = [i[0] for i in list(shipyards.values())]\n        elif len(shipyards.values()) < 1:\n            return False\n        else:\n            #we have one shipyard\n            shipyards =[i for i in list(shipyards.values())]\n            for i in player_ship_locs:\n                if i in shipyards:\n                    return True\n                else:\n                    return False\n                \n    def get_safe_options_surrounding(self, posistion, ship_locations,surrounding):\n        ''' Will take the ships position and the dict (ship_action) of moves \n        for greedy navigation and check if they are safe'''\n        # get the number locations around the ship\n        surrounding_locs = self.get_surrounding_loc(posistion)\n        # I want to remove the occupied locations from the max halite dict\n        surrounding_locs = [i[0] for i in surrounding_locs]\n        nav_dict = {}\n        nav_dict['NORTH'], nav_dict['SOUTH'], nav_dict['EAST'], nav_dict['WEST'] = surrounding_locs\n        # now simply remove the keys where their values are in ship_locations\n        for k,v in list(nav_dict.items()):\n            if v in ship_locations:\n                surrounding.pop(k)\n        return surrounding   \n        ","05a4cf09":"# Play as first position against random agent.\ntrainer = env.train([None, \"random\"])\n\nobservation = trainer.reset()\n\ndef get_moves_to_target(ship_loc,ship_locations, board, target):\n    '''Takes ship location and target and returns a list of 1 or more viable moves'''\n    posistion_xy = board.get_xy(ship_loc)\n    # takes int\n    target_xy = board.get_xy(target)\n\n    move_dict = {}\n    if posistion_xy[0] > target_xy[0]:\n        move_dict['NORTH'] = ship_loc + 15\n    if posistion_xy[0] < target_xy[0]:\n        move_dict['SOUTH'] = ship_loc - 15\n    if posistion_xy[1] < target_xy[1]:\n         move_dict['EAST'] = ship_loc + 1\n    if posistion_xy[1] > target_xy[1]:\n         move_dict['WEST'] = ship_loc - 1\n    for k,v in list(move_dict.items()):\n            if v in ship_locations:\n                move_dict.pop(k)\n    return move_dict\n\n\n\ndef greedy_collect(ship_loc, ship_locations, board):\n    ''' Takes a ship location and the halite board returns a valid move'''\n    # needs to get the greedy move with a bias, and check if moves are safe\n    # How much it cost's to move?\n    move_cost = 0.1\n    surrounding = board.get_surrounding_halite(ship_loc)\n    #Bias staying still to stop wasting halite\n    surrounding[None] = surrounding[None] + (surrounding[None]* move_cost)\n    # for now if there is no halite at all move south\n    if sum([i for i in surrounding.values()]) == 0.0:\n        nearest_halite = board.get_nearest_halite(ship_loc)\n        target = board.get_index(nearest_halite)\n        moves = get_moves_to_target(ship_loc, ship_locations, board, target)\n        # now need to somehow check if the NORTH, SOUTH, WEST etc is \n        return np.random.choice(list(moves.keys()))\n\n    else:\n        surrounding = board.get_safe_options_surrounding(ship_loc, ship_locations,surrounding)\n        return max(surrounding, key=surrounding.get)\n    \n# Each ship id will be assigned a state, one of COLLECT or DEPOSIT, \n# this was something that was in the tutorial in halite 3\nglobal states\nstates = {}\n\nCOLLECT = \"COLLECT\"\nDEPOSIT = \"DEPOSIT\"\n    \n\ndef my_agent(obs):\n    state = gameInfo(obs)\n    board = haliteBoard(obs)\n    \n   \n    \n    halite, shipyards, ships = state.players[state.player]\n    opp_halite, opp_shipyards, opp_ships = state.players[1]\n    \n    action = {}\n    \n    for uid, shipyard in shipyards.items():\n    # Maintain one ship \n        if len(ships) == 0:\n            action[uid] = \"SPAWN\"\n    \n    for uid, ship in ships.items():\n        # Maintain one shipyard \n        if len(shipyards) == 0:\n            action[uid] = \"CONVERT\"\n            continue        \n    \n    for uid, ship_info in ships.items():\n        #Assuming it has just spawned\n        if uid not in states:\n            states[uid] = COLLECT\n        # If we are collecting    \n        if states[uid] == COLLECT:\n            if ship_info[1] > 500:\n                states[uid] = DEPOSIT\n            else:\n                #greedy collect\n                surrounding = board.get_surrounding_halite(ship_info[0])  # index 0 is the location, 1 is the amount of halite of the ship\n                # get ship locations\n                ship_locations = board.get_occupied_locs(ship_info[0], shipyards, ships, opp_shipyards, opp_ships)\n                ship_action = greedy_collect(ship_info[0], ship_locations, board)\n                if ship_action is not None:\n                    action[uid] = ship_action\n        \n        # return to shipyard\n        if states[uid] == DEPOSIT:\n            if ship_info[1] < 20:\n                states[uid] = COLLECT\n            else:\n                ship_locations = board.get_occupied_locs(ship_info[0], shipyards, ships, opp_shipyards, opp_ships)\n                moves = get_moves_to_target(ship_info[0], ship_locations, board, shipyard)\n                if moves == {}:\n                    ship_action = None\n                else:\n                    ship_action = np.random.choice(list(moves.keys()))\n                if ship_action is not None:\n                    action[uid] = ship_action    \n\n    return action\n\n\n\nwhile not env.done:\n    my_action = my_agent(observation)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    ","de009a6c":"env.render(mode = 'ipython')","d09af3de":"def mean_reward(rewards):\n    wins = 0\n    ties = 0\n    loses = 0\n    for r in rewards:\n        r0 = 0 if r[0] is None else r[0]\n        r1 = 0 if r[1] is None else r[1]\n        if r0 > r1:\n            wins += 1\n        elif r1 > r0:\n            loses += 1\n        else:\n            ties += 1\n    return f'wins={wins\/len(rewards)}, ties={ties\/len(rewards)}, loses={loses\/len(rewards)}'\n\n# Run multiple episodes to estimate its performance.\n# Setup agentExec as LOCAL to run in memory (runs faster) without process isolation.\nprint(\"My Agent vs Random Agent:\", mean_reward(evaluate(\n    \"halite\",\n    [\"\/kaggle\/working\/submission.py\", \"random\"],\n    num_episodes=10, configuration={\"agentExec\": \"LOCAL\"}\n)))","c36cf847":"## Submission file <a name=\"submission\"><\/a>","8b4e7a51":"## Debugging zone <a name=\"debug\"><\/a>\n\n- list of things that need to be done","38dc4e32":"## Evaluation  <a name=\"evaluate\"><\/a>","049eeef0":"### main()","287e3085":"## Preamble <a name=\"preamble\"><\/a>\n\nI am making this Notebook because I am trying to get better at using classes in my programming. I have made a few notebooks prior to this with different agents,and I was making good progress, but as the script became more complicated I found it hard to keep up with what was going on.\n\n![](https:\/\/i.pinimg.com\/originals\/e5\/d3\/69\/e5d369ecc7b99d71963050c5f6f0479a.jpg)\n\nI competed solo in Halite 3 and came in position ~300 (I think), so I have the general jist of the task but I am still very much a beginner in all aspects.\n\nIn Halite 3, there was much more help and documentation in how to get involved and start. From reading the discussion page here, something similar may be in the works. I hope it does as it opens up the competition to much more people and I wouldn't of been able to compete if it wasn't for that.\n\n\nI hope you get something out of this, even if it is how not to do it\n","ccd96bab":"# Contents\n- [Preamble](#preamble)\n- [Submission](#submission)\n- [Debugging](#debug)\n- [Evaluate agent](#evaluate)\n- [Conclusions](#conclusions)","2b2a0aee":"## Conclusions <a name=\"conclusions\"><\/a>\n\n* Documenting eveything really helped keep track of what was going on.\n* The agent is very hacky and in my next development I will change things a lot, but it does feel like somewhat of an accomplishment to complete something.\n\n### Next time\n\n* accounting for wrap-around should be a priority\n* add multiple ships\n* optimise paramters."}}