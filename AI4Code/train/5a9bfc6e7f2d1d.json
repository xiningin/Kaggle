{"cell_type":{"143c1497":"code","82eb8f4a":"code","2d9a464c":"code","7167764a":"code","088cacde":"code","e9b6b8f8":"code","b47d87c5":"code","2992f692":"code","4a3f68c0":"code","fcdbf98f":"code","cd3a5e43":"code","5466f98a":"code","8c24da5e":"code","3d259375":"markdown","90dbaf2a":"markdown","25d0b021":"markdown","8b2c9108":"markdown","1abe8ba3":"markdown","4884e9dd":"markdown","277979cc":"markdown","5396e925":"markdown","5928c5ae":"markdown","8e48aa2e":"markdown","5d72ba6d":"markdown"},"source":{"143c1497":"# Importing the libraries\nimport pandas as pd\nfrom IPython.display import Image, HTML\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","82eb8f4a":"# Importing the dataset\nlistings = pd.read_csv('..\/input\/listings.csv', usecols = ['id', 'name', 'description'])\nlistings.head(10)","2d9a464c":"listings['name'] = listings['name'].astype('str')\nlistings['description'] = listings['description'].astype('str')","7167764a":"name_corpus = ' '.join(listings['name'])\ndescription_corpus = ' '.join(listings['description'])","088cacde":"name_wordcloud = WordCloud(stopwords = STOPWORDS, background_color = 'white', height = 2000, width = 4000).generate(name_corpus)\nplt.figure(figsize = (16,8))\nplt.imshow(name_wordcloud)\nplt.axis('off')\nplt.show()","e9b6b8f8":"description_wordcloud = WordCloud(stopwords = STOPWORDS, background_color = 'white', height = 2000, width = 4000).generate(description_corpus)\nplt.figure(figsize = (16,8))\nplt.imshow(description_wordcloud)\nplt.axis('off')\nplt.show()","b47d87c5":"listings['content'] = listings[['name', 'description']].astype(str).apply(lambda x: ' \/\/ '.join(x), axis = 1)","2992f692":"# Fillna\nlistings['content'].fillna('Null', inplace = True)","4a3f68c0":"tf = TfidfVectorizer(analyzer = 'word', ngram_range = (1, 2), min_df = 0, stop_words = 'english')\ntfidf_matrix = tf.fit_transform(listings['content'])","fcdbf98f":"cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)","cd3a5e43":"results = {}\nfor idx, row in listings.iterrows():\n    similar_indices = cosine_similarities[idx].argsort()[:-100:-1]\n    similar_items = [(cosine_similarities[idx][i], listings['id'][i]) for i in similar_indices]\n    results[row['id']] = similar_items[1:]","5466f98a":"def item(id):\n    name   = listings.loc[listings['id'] == id]['content'].tolist()[0].split(' \/\/ ')[0]\n    desc   = ' \\nDescription: ' + listings.loc[listings['id'] == id]['content'].tolist()[0].split(' \/\/ ')[1][0:165] + '...'\n    prediction = name  + desc\n    return prediction\n\ndef recommend(item_id, num):\n    print('Recommending ' + str(num) + ' products similar to ' + item(item_id))\n    print('---')\n    recs = results[item_id][:num]\n    for rec in recs:\n        print('\\nRecommended: ' + item(rec[1]) + '\\n(score:' + str(rec[0]) + ')')","8c24da5e":"recommend(item_id = 4085439, num = 5)","3d259375":"The most frequently words occurred in the name or title of listings are including: Seattle, Capitol Hill, View, Home, Cozy, etc. This obviously represents Seattle area data with common words in room listings. Unlike for the description, here some of the tops are already specific like: house, home, apartment, living room, space. They are typical words for hosts when describing their listings.","90dbaf2a":"Create two functions for showing the recommender results:\n1. Function to get a friendly item name and description from the content field, given an item ID\n2. Function to read the results out of the dictionary","25d0b021":"## Let's make a prediction","8b2c9108":"## Cosine Similarity\nCosine Similarity calculates similarity by measuring the cosine angle between two vectors. Vectors are converted from contents by TF-IDF and this measurement will identify which contents are closest to each other.\n","1abe8ba3":"## Train the Recommender","4884e9dd":"Now, we create a column containing a combination of name and description columns that is important for content-based recommendation system","277979cc":"## TF-IDF (Term Frequency - Inverse Document Frequency)\nCreate a TF-IDF matrix of unigrams and bigrams for each id or room. The \u201cstop words\u201d parameter tells the TF-IDF module to ignore common English words like 'the', \u2018about\u2019, etc.  TF-IDF will parse through the descriptions, identify distinct phrases in each item's description, and then find similar contents based on those phrases. Formula is below:\n\n\ud835\udc64_(\ud835\udc56,\ud835\udc57)=\u3016\ud835\udc61\ud835\udc53\u3017_(\ud835\udc56,\ud835\udc57)  x log\u2061(\ud835\udc41\/\u3016\ud835\udc51\ud835\udc53\u3017_\ud835\udc56 )\n\n\n\ud835\udc61\ud835\udc53\u3017_(\ud835\udc56,\ud835\udc57) = number of occurrences of i in j;\n\u3016\ud835\udc51\ud835\udc53\u3017_\ud835\udc56 = number of documents containing i;\n\ud835\udc41 = total number of documents","5396e925":"Finally, try to put an id from listings data and number of recommendation to show","5928c5ae":"# **Airbnb Content-Based Recommendation System**\n\n![](https:\/\/assets3.thrillist.com\/v1\/image\/1451130\/size\/tmg-article_main_wide_2x.jpg)\n\n## **Introduction**\nIn this notebook, I will attempt at implementing a recommendation algorithms (content-based). Here we will use listings data from Airbnb around Seattle area. The engine will learn from:\n1. id: listings id for every room around Seattle\n2. name: the title of room listings\n3. description: details given by the host to describe their rooms\n\n## **Objective:** \n* Learning from data and recommend the best rooms around Seattle to users, based on content similarities (name and description)\n* Providing more room options and increasing personalization to prospective guests","8e48aa2e":"## Exploratory Data Analysis\nAre there certain words that figure more often in listings' name and description? I suspect there are some words which are occured more frequently and considered more worthy of a title. Let us find out!","5d72ba6d":"Iterate through each item's similar items and store the 100 most-similar!"}}