{"cell_type":{"14ce4b70":"code","5e3f259d":"code","0c1cba5c":"code","02f95151":"code","6fe6aa73":"code","b39e9dfa":"code","e4ff3e8f":"code","5b6d7d08":"code","3d909306":"code","8b117886":"code","3597dec9":"code","3f0eb183":"code","f343dd0c":"code","9548e5ce":"code","a37b63b9":"code","e87af85e":"code","8c586f40":"code","1588ecf5":"markdown","5897000e":"markdown","ec496713":"markdown","0f606f83":"markdown","2b1de29a":"markdown"},"source":{"14ce4b70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e3f259d":"# we know what this is\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","0c1cba5c":"# create blank input tensor\ninputs = keras.Input(shape=(784,))","02f95151":"inputs.shape","6fe6aa73":"inputs.dtype","b39e9dfa":"# This is one of the layers we will be using for our neural network. \n# It has 64 nodes they are fully connected (Dense)\ndense = layers.Dense(64, activation=\"relu\")\n# connected to input layer\nx = dense(inputs)","e4ff3e8f":"# another Dense layer\nx = layers.Dense(64, activation=\"relu\")(x)\n# and our output layer with 10 nodes (10 digits)\noutputs = layers.Dense(10)(x)","5b6d7d08":"# this is our model. It has input layer, 2 fully connected dense layer and the output layer.\n# we don't have to define dense layers in keras.Model() because they are already connected \nmodel = keras.Model(inputs=inputs, outputs=outputs, name='mnist_model')\nmodel.summary()","3d909306":"#keras.utils.plot_model(model, \"my_first_model.png\")","8b117886":"#keras.utils.plot_model(model, \"my_first_model_with_shape_info.png\", show_shapes=True)\n\n# the number 784 is 28 x 28 x 3\n# 28 by 28 pixels, and 3 color channels that every picture has RGB","3597dec9":"# load mnist dataset from Kaggle\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nx_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\nx_train = train.loc[:, train.columns != 'label']\ny_train = train['label']\n\nx_train = np.array(x_train).astype(\"float32\")\/255\nx_test = np.array(x_test).astype(\"float32\")\/255\n\nprint(\"x_train\",x_train.shape)\n# y has shape (42000,) because it only has 1 colum. this is the label with all the answers\nprint(\"y_train\",y_train.shape)\nprint(\"x_test\",x_test.shape)","3f0eb183":"# load mnist dataset from keras\n# this dataset has test set label so we are going to use this one to evaluate accuracy right now\n(x_train_keras, y_train_keras), (x_test_keras, y_test_keras) = keras.datasets.mnist.load_data()\n\n# flatten 28x28 image to 784 pixels\n# then normalize the pixel values by dividing by 255\nx_train_keras = x_train_keras.reshape(60000, 784).astype(\"float32\")\/255\nx_test_keras = x_test_keras.reshape(10000, 784).astype(\"float32\")\/255\n\n# 60000 is the number of pictures in dataset by the way\nprint(\"x_train_keras\",x_train_keras.shape)\nprint(\"y_train\",y_train_keras.shape)\nprint(\"x_test_keras\",x_test_keras.shape)\nprint(\"y_test\",y_test_keras.shape)","f343dd0c":"# set loss func, optimizer, and accuracy metric\nmodel.compile(\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    optimizer=keras.optimizers.RMSprop(),\n    metrics=[\"accuracy\"],\n)\n\n# let the magic happen\nhistory = model.fit(x_train_keras, y_train_keras, batch_size=64, epochs=2, validation_split=0.2)\n\ntest_scores = model.evaluate(x_test_keras, y_test_keras, verbose=2)\nprint(\"Test loss\", test_scores[0])\nprint(\"Test accuracy\", test_scores[1])","9548e5ce":"#model.save(\"\/kaggle\/working\")\n#del model\n#model = keras.models.load_model(\"\/kaggle\/working\")\n","a37b63b9":"# Lets run the model with the kaggle given dataset\n# set loss func, optimizer, and accuracy metric\nmodel.compile(\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    optimizer=keras.optimizers.RMSprop(),\n    metrics=[\"accuracy\"],\n)\n\n# let the magic happen\nhistory = model.fit(x_train, y_train, batch_size=64, epochs=2, validation_split=0.2)","e87af85e":"predictions = model.predict(x_test)\npred = [np.argmax(i) for i in predictions]\nimage_id = range(1, predictions.shape[0] + 1)\nsubmission = pd.DataFrame({'ImageId': image_id, \"Label\": pred})\nsubmission.to_csv('digit_recognizer_submission.csv', index=False)","8c586f40":"# how to remove files or directories in python\n##import os\n#os.remove(\".\/digit_recognizer_submission\")\n#os.rmdir(\".\/assets\")","1588ecf5":"You define **dense** layer first, pass **inputs** to **dense** layer and get the **output(x)**","5897000e":"Adding 2 more layers to the model","ec496713":"We can save this model so that even if the code is lost, we can still use the model. \n\n* model architecture\n* model weight values - that we got from training\n* model training config - that was passed to `compile` \n* optimizer and its state - if any, to restart training where you left off","0f606f83":"The connection arrows are replaced by the call operation in code","2b1de29a":"This is the tutorial I found from Keras official website. \nit creates multiple models using keras to classify 28x28 pixel pictures on MNIST handwritten digit dataset. \nIt has like 97% accuracy so maybe it'll be able to understand Maxie's handwriting\n\nI had it working but I haven't been able to figure out how to put pictures and get predictions yet. I can just get accuracy on test set. "}}