{"cell_type":{"6f715866":"code","d82e2742":"code","f04ece9c":"code","cdee638c":"code","0f183665":"code","953e405d":"markdown"},"source":{"6f715866":"import tensorflow as tf\nimport pandas as pd\nimport cv2\nfrom tqdm import tqdm\nimport os","d82e2742":"IMAGE_PATH = \"..\/train\/\"\nRESIZE_TARGET_PATH = \"..\/train_600\/\"\nTF_RECORD_PATH = \"..\/train_600_tf_record\/\"\nK_FOLDS = 5","f04ece9c":"def _bytes_feature(value):\n    \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n    if isinstance(value, type(tf.constant(0))):\n        value = value.numpy()  # BytesList won't unpack a string from an EagerTensor.\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n    \"\"\"Returns a float_list from a float \/ double.\"\"\"\n    return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\n\ndef _int64_feature(value):\n    \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","cdee638c":"def resize_dataset():\n    import glob\n    values = glob.glob(f\"{IMAGE_PATH}*.jpg\")\n    for i in tqdm(range(len(values))):\n        img = cv2.imread(values[i])\n        img = cv2.cv2.resize(img, (600, 600))\n        cv2.imwrite(RESIZE_TARGET_PATH + values[i].split(\"\/\")[-1], img)\n\ndef serialize_example(columns, data):\n    byte_features = [\"StudyInstanceUID\", 'PatientID']\n    feature = {}\n    for column in columns:\n        if column in byte_features:\n            feature[column] = _bytes_feature(data[columns.index(column)].encode('utf-8'))\n        else:\n            feature[column] = _int64_feature(data[columns.index(column)])\n\n    feature[\"images\"] = _bytes_feature(tf.io.gfile.GFile(f\"{RESIZE_TARGET_PATH + data[columns.index('StudyInstanceUID')]}.jpg\", 'rb').read())\n    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n    return example_proto.SerializeToString()\n\ndef create_tfrecord(df_fold, fold=0, phase=\"train\"):\n    data = df_fold.values\n    columns = df_fold.columns.tolist()\n    if not os.path.exists(TF_RECORD_PATH):\n        os.makedirs(TF_RECORD_PATH)\n    with tf.io.TFRecordWriter(f'{TF_RECORD_PATH}\/{fold}_{phase}.tfrecord') as writer:\n        for i in tqdm(range(len(data))):\n            example = serialize_example(columns, data[i])\n            writer.write(example)\n    writer.close()\n","0f183665":"if __name__ == '__main__':\n    df_fold = pd.read_csv(\"train_folds.csv\")\n    for fold in range(K_FOLDS):\n        print(\"===========================================\")\n        print(f\"create fold tfrecord:   {fold}\")\n        print(\"create validation tfrecord\")\n        df_fold_val = df_fold[df_fold[\"fold\"] == fold]\n        create_tfrecord(df_fold_val,fold, phase=\"validate\")\n        print(\"create train tfrecord\")\n        df_fold_train = df_fold[df_fold[\"fold\"] != fold]\n        create_tfrecord(df_fold_train, fold)","953e405d":"### create tfrecord\n1. resize image to RESIZE_TARGET_PATH\n2. create tfrecord\n\nneed a little modify to use\n\n### how to create kfold cav\nhttps:\/\/www.kaggle.com\/underwearfitting\/how-to-properly-split-folds"}}