{"cell_type":{"6134c663":"code","ee667d99":"code","e394a07d":"code","8a80ea3b":"code","ffa754b4":"code","8f0b3549":"code","d7596bb1":"code","899c5c19":"code","f8d8e25b":"code","af2301cb":"code","94c0257b":"code","a97d450e":"code","8be474ff":"markdown"},"source":{"6134c663":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# Any results you write to the current directory are saved as output.","ee667d99":"# Read DATA\nDATA  = pd.read_csv('..\/input\/earthquake\/1398-08-16 1.12.03 AM.csv')\n\n# Clear columns we do not need\nDATA = DATA.drop(columns=['dis1','dis2','dis3','magnitude_type','mm','yy','local_time','day_name','dd'])\n\n# Rename Columns\nDATA = DATA.rename(columns={'n':'North','e':'East','ew':'East west','ns':'North South','gmt_date':'date','gmt_time':'time'})\n\n# Change the Data Type\nDATA['depth'] = DATA['depth'].apply(lambda x: int(x))\nDATA['East'] = DATA['East'].apply(lambda x:float(x))\nDATA['East west'] = DATA['East west'].apply(lambda x:float(x))\nDATA['magnitude'] = DATA['magnitude'].apply(lambda x:float(x))\nDATA['North'] = DATA['North'].apply(lambda x:float(x))\nDATA['North South'] = DATA['North South'].apply(lambda x:float(x))\n\n\n# Drop NAN values \nDATA = DATA.dropna()\n\n\nDATA.head()","e394a07d":"# converting Date column to date\nDATA.date = pd.to_datetime(DATA.date,format = '%Y-%m-%d')\n\n# Make Weekday\nDATA['Weekday'] = DATA.date.apply(lambda x: x.dayofweek)\n\n# Extract the Month\nDATA['Month'] = DATA.date.apply(lambda x:x.month)\n\n# Extract the Day\nDATA['Day'] = DATA.date.apply(lambda x: x.day)\n\n# Extract The Year\nDATA['Year'] = DATA.date.apply(lambda x:x.year)\n\n# Converting Time column To time(H:M:S)\nDATA.time = pd.to_datetime(DATA['time'])\n# Extracting the Hour\nDATA['Hour'] = DATA.time.apply(lambda x:x.hour)\n\n# Extracting The minute\nDATA['Minute'] = DATA.time.apply(lambda x:x.minute)\n\n# Show 5 random sample\n\nDATA.sample(5)\n","8a80ea3b":"# Coreelation between features\n\nplt.figure(figsize = (15,15))\nsns.heatmap(DATA.corr(),annot = True , fmt = '.1f',linewidths= .3)\nplt.show()","ffa754b4":"# Which year had the most earthquakes in IR\n\nDATA.Year.plot(kind = 'hist',color = 'red',edgecolor = 'black',bins = 100 , figsize = (12,12),label = 'Earthquakes frequency')\nplt.legend(loc = 'upprt right')\nplt.xlabel('years')\nplt.show()","8f0b3549":"DATA.location.value_counts().plot(kind = 'bar',color = 'red',figsize =(30,10),fontsize = 20)\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['font.sans-serif'] = ['B Nazanin', 'Tahoma']\nplt.rcParams['font.size'] = 14\nplt.rcParams['axes.unicode_minus'] = False\nplt.xlabel('City',fontsize = 18, color = 'blue')\nplt.ylabel('frequency',fontsize = 18,color = 'blue')\nplt.show()","d7596bb1":"DATA.depth.max()\nfiltre = DATA.depth == 50.0\nDATA[filtre]","899c5c19":"DATA[DATA['magnitude'] >= 7.4]","f8d8e25b":"threshold = sum(DATA.magnitude) \/ len(DATA.magnitude)\nDATA['magnitude-level'] = ['height' if i > threshold else 'low' for i in DATA.magnitude]\n\nDATA.loc[:10,['magnitude-level','magnitude','location']]","af2301cb":"dataover5 = DATA[DATA.magnitude >= 5]\n\nplt.figure(figsize = (15,5))\nplt.subplot(1,2,1)\ndataover5.Month.value_counts().sort_index().plot.bar()\nplt.xlabel('Months of The year')\nplt.subplot(1,2,2)\ndataover5.Weekday.value_counts().sort_index().plot.bar()\nplt.xlabel('Days of the Week')","94c0257b":"plt.figure(figsize = (15,5))\nplt.subplot(1,2,1)\nplt.plot(DATA.Year.value_counts().sort_index())\nplt.subplot(1,2,2)\nplt.plot(DATA[DATA.magnitude >= 5].Year.value_counts().sort_index())","a97d450e":"DATA.Year.value_counts().sort_index(ascending = False).plot.area()\nDATA[DATA.magnitude >= 4].Year.value_counts().sort_index(ascending = False).plot.area()\nplt.legend(['all earthquakes','5 plus'])","8be474ff":"**Let's look at Data :**"}}