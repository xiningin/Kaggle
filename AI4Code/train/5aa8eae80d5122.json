{"cell_type":{"b6bab263":"code","f05351cd":"code","b7febd31":"code","acf0341c":"code","6322f098":"code","ffe7d8a9":"code","1f0c2ab7":"code","9450aa38":"code","72629f5b":"code","f896387e":"code","37b2ab7a":"markdown","cfc79b08":"markdown","152a0978":"markdown","77a13323":"markdown","16e09a44":"markdown","01a99c33":"markdown","585d3145":"markdown","afd5c3ea":"markdown","53e72c61":"markdown","6172f71b":"markdown","0c3470ac":"markdown"},"source":{"b6bab263":"import pandas as pd\n\nstocks = pd.read_csv('..\/input\/stock1\/stocks.csv', header='infer' ) \nstocks.index = stocks['Date']\nstocks = stocks.drop(['Date'],axis=1)\nstocks.head()","f05351cd":"import numpy as np\n\nN,d = stocks.shape\ndelta = pd.DataFrame(100*np.divide(stocks.iloc[1:,:].values-stocks.iloc[:N-1,:].values, stocks.iloc[:N-1,:].values),\n                    columns=stocks.columns, index=stocks.iloc[1:].index)\ndelta.head()","b7febd31":"from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfig = plt.figure(figsize=(8,5)).gca(projection='3d')\nfig.scatter(delta.MSFT,delta.F,delta.BAC)\nfig.set_xlabel('Microsoft')\nfig.set_ylabel('Ford')\nfig.set_zlabel('Bank of America')\nplt.show()","acf0341c":"meanValue = delta.mean()\ncovValue = delta.cov()\nprint(meanValue)\nprint(covValue)","6322f098":"from numpy.linalg import inv\n\n#X = delta.as_matrix()\nX = delta.values\n#S = covValue.as_matrix()\nS = covValue.values\nfor i in range(3):\n    X[:,i] = X[:,i] - meanValue[i]\n    \ndef mahalanobis(row):\n    return np.matmul(row,S).dot(row)   \n    \nanomaly_score = np.apply_along_axis( mahalanobis, axis=1, arr=X)\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111, projection='3d')\np = ax.scatter(delta.MSFT,delta.F,delta.BAC,c=anomaly_score,cmap='jet')\nax.set_xlabel('Microsoft')\nax.set_ylabel('Ford')\nax.set_zlabel('Bank of America')\nfig.colorbar(p)\nplt.show()","ffe7d8a9":"anom = pd.DataFrame(anomaly_score, index=delta.index, columns=['Anomaly score'])\nresult = pd.concat((delta,anom), axis=1)\nresult.nlargest(2,'Anomaly score')","1f0c2ab7":"fig, (ax1,ax2) = plt.subplots(nrows=1, ncols=2, figsize=(15,6))\n\nts = delta[440:447]\nts.plot.line(ax=ax1)\nax1.set_xticks(range(7))\nax1.set_xticklabels(ts.index)\nax1.set_ylabel('Percent Change')\n\nts = delta[568:575]\nts.plot.line(ax=ax2)\nax2.set_xticks(range(7))\nax2.set_xticklabels(ts.index)\nax2.set_ylabel('Percent Change')","9450aa38":"from sklearn.neighbors import NearestNeighbors\nimport numpy as np\nfrom scipy.spatial import distance\n\nknn = 4\nnbrs = NearestNeighbors(n_neighbors=knn, metric=distance.euclidean).fit(delta.values)\ndistances, indices = nbrs.kneighbors(delta.values)\n\nanomaly_score = distances[:,knn-1]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111, projection='3d')\np = ax.scatter(delta.MSFT,delta.F,delta.BAC,c=anomaly_score,cmap='jet')\nax.set_xlabel('Microsoft')\nax.set_ylabel('Ford')\nax.set_zlabel('Bank of America')\nfig.colorbar(p)\nplt.show()","72629f5b":"anom = pd.DataFrame(anomaly_score, index=delta.index, columns=['Anomaly score'])\nresult = pd.concat((delta,anom), axis=1)\nresult.nlargest(5,'Anomaly score')","f896387e":"fig = plt.figure(figsize=(10,4))\n\nax = fig.add_subplot(111)\nts = delta[445:452]\nts.plot.line(ax=ax)\nax.set_xticks(range(7))\nax.set_xticklabels(ts.index)\nax.set_ylabel('Percent Change')","37b2ab7a":"We can compute the percentage of changes in the daily closing price of each stock as follows:\n\\begin{equation}\n\\Delta(t) = 100 \\times \\frac{x_t - x_{t-1}}{x_{t-1}} \n\\end{equation}\n\nwhere $x_t$ denotes the price of a stock on day $t$ and $x_{t-1}$ denotes the price on its previous day, $t-1$.","cfc79b08":"# Module 9: Anomaly Detection\n\nThe following tutorial contains Python examples for detecting anomalies (outliers) from data. You should refer to Chapters 9 of the \"Introduction to Data Mining\" book to understand some of the concepts introduced in this tutorial. The notebook can be downloaded from http:\/\/www.cse.msu.edu\/~ptan\/dmbook\/tutorials\/tutorial9\/tutorial9.ipynb.\n\nAnomaly detection is the task of identifying instances whose characteristics differ significantly from the rest of the data. In this tutorial, we will provide examples of applying different anomaly detection techniques using Python and its library packages. \n\nRead the step-by-step instructions below carefully. To execute the code, click on the corresponding cell and press the SHIFT-ENTER keys simultaneously.","152a0978":"The results are slightly different than the one shown in Section 9.1 since we have used Euclidean distance (instead of Mahalanobis distance) to detect the anomalies. We can examine the dates associated with the top-5 highest anomaly scores as follows. ","77a13323":"Note that the sharp drop in the stock prices on October 7, 2008 coincide with the beginning of the global financial crisis (https:\/\/en.wikipedia.org\/wiki\/Global_financial_crisis_in_October_2008) while the increase in the stock prices on April 9, 2009. ","16e09a44":"## 9.2 Using Distance-based Approach\n\nThis is a model-free anomaly detection approach as it does not require constructing an explicit model of the normal class to determine the anomaly score of data instances. The example code shown below employs the k-nearest neighbor approach to calculate anomaly score. Specifically, a normal instance is expected to have a small distance to its k-th nearest neighbor whereas an anomaly is likely to have a large distance to its k-th nearest neighbor. In the example below, we apply the distance-based approach with k=4 to identify the anomalous trading days from the stock market data described in the previous section.","01a99c33":"## 9.1 Using Parametric Models \n\nThis approach assumes that the majority of the data instances are governed by some well-known probability distribution, e.g., Binomial or Gaussian distribution. Anomalies can then detected by seeking for observations that do not fit the overall distribution of the data. \n\nIn this example, our goal is to detect anomalous changes in the daily closing prices of various stocks. The input data *stocks.csv* contains the historical closing prices of stocks for 3 large corporations (Microsoft, Ford Motor Company, and Bank of America). ","585d3145":"The top-2 anomalies are shown as a brown point in the figure above. The highest anomaly corresponds to the day in which the prices for all 3 stocks increase significantly whereas the second highest anomaly corresponds  to the day in which all 3 stocks suffer a large percentage drop in their closing prices. We can examine the dates associated with the top-2 highest anomaly scores as follows. ","afd5c3ea":"Assuming the data follows a multivariate Gaussian distribution, we can compute the mean and covariance matrix of the 3-dimensional data as follows","53e72c61":"To determine the anomalous trading days, we can compute the Mahalanobis distance between the percentage of price change on each day against the mean percentage of price change.\n\\begin{equation}\n\\textrm{Mahalanobis}(x) = (x - \\bar{x}) \\Sigma^{-1}(x - \\bar{x})^T\n\\end{equation}\nwhere $x$ is assumed to be a row vector.\n\nSee Equation 9.4 in Section 9.3.1 for more information about using Mahalanobis distance for detecting anomalies in multivariate Gaussian distribution.","6172f71b":"We can plot the distribution of the percentage daily changes in stock price. ","0c3470ac":"## 9.3 Summary\n\nThis tutorial illustrates examples applying an anomaly detection approach to a multivariate time series data. We consider two approaches, one based on a parametric statistical approach using multivariate Gaussian while the other is a nonparametric distance-based approach using k-nearest neighbor."}}