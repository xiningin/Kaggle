{"cell_type":{"90c5e156":"code","7f1718f8":"code","d5fbdaf5":"code","87211238":"code","005fbfe6":"code","7f65f60f":"code","e1d890fc":"code","de29fbfc":"code","5626be49":"code","ae62e5ba":"code","c7196fbc":"code","e19f79c1":"code","13a8cf8a":"code","84f565bc":"code","6b22c456":"code","d4929b49":"code","699c2ea3":"code","32dd9e97":"code","0d704bd8":"code","8aa407c2":"code","7bba709d":"code","fbe49418":"code","5bfa927f":"code","ecfb56dd":"code","1587676f":"code","09697d33":"code","655490fa":"code","adcf9191":"code","6c29cc1b":"code","3111b46e":"code","a2a5bc38":"markdown","c18bbe8b":"markdown"},"source":{"90c5e156":"!pip install imutils","7f1718f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom skimage.transform import resize\nfrom skimage.io import imread\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom os import listdir\nfrom sklearn.utils import shuffle #shuffling the data improves the model\nimport imutils  \nimport itertools\nimport plotly.graph_objs as go\nfrom sklearn import svm, metrics, datasets\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom plotly.offline import init_notebook_mode, iplot\nfrom sklearn.metrics import plot_confusion_matrix, confusion_matrix, accuracy_score\nfrom tqdm import tqdm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5fbdaf5":"image_dir=\"..\/input\/brain-mri-images-for-brain-tumor-detection\/\"","87211238":"os.makedirs('..\/output\/kaggle\/working\/augmented-images', exist_ok = True)\nos.makedirs('..\/output\/kaggle\/working\/augmented-images\/yes', exist_ok = True)\nos.makedirs('..\/output\/kaggle\/working\/augmented-images\/no', exist_ok = True)\n\naugmented_data_path ='..\/output\/kaggle\/working\/augmented-images\/'\n\naugmented_yes =augmented_data_path+'yes'\naugmented_no = augmented_data_path+'no'\n\nIMG_SIZE = (240, 240)","005fbfe6":"def augment_data(file_dir, n_generated_samples, save_to_dir):\n    data_gen = ImageDataGenerator(rotation_range=10, \n                                  width_shift_range=0.1, \n                                  height_shift_range=0.1, \n                                  shear_range=0.1, \n                                  brightness_range=(0.3, 1.0),\n                                  horizontal_flip=True, \n                                  vertical_flip=True, \n                                  fill_mode='nearest'\n                                 )\n\n    for filename in listdir(file_dir):\n        image = cv2.imread(file_dir + '\/' + filename)\n        # reshape the image\n        image = image.reshape((1,)+image.shape)\n        save_prefix = 'aug_' + filename[:-4]\n        i=0\n        for batch in data_gen.flow(x=image, batch_size=1, save_to_dir=save_to_dir,save_prefix=save_prefix, save_format='jpg'):\n                i += 1\n                if i > n_generated_samples:\n                    break","7f65f60f":"dir = os.listdir('..\/output\/kaggle\/working\/augmented-images\/yes') \n\nif len(dir) == 0: \n\n    # augment data for the examples with label equal to 'yes' representing tumurous examples\n    augment_data(file_dir=image_dir+'yes',n_generated_samples=6, save_to_dir=augmented_data_path+'yes')\n    # augment data for the examples with label equal to 'no' representing non-tumurous examples\n    augment_data(file_dir=image_dir+'no', n_generated_samples=9, save_to_dir=augmented_data_path+'no')\nelse:\n    print(len(dir))","e1d890fc":"def load_data(dir_list):\n\n    # load all images in a directory\n    X = []\n    y = []\n#     image_width, image_height = image_size\n    \n    for directory in dir_list:\n        for filename in listdir(directory):\n            image = cv2.imread(directory+'\/'+filename)\n#             image = crop_brain_contour(image, plot=False)\n#             image = cv2.resize(image, dsize=(image_width, image_height), interpolation=cv2.INTER_CUBIC)\n#             # normalize values\n#             image = image \/ 255.\n#             # convert image to numpy array and append it to X\n            X.append(image)\n            # append a value of 1 to the target array if the image\n            # is in the folder named 'yes', otherwise append 0.\n            if directory[-3:] == 'yes':\n                y.append([1])\n            else:\n                y.append([0])\n                \n    X = np.array(X)\n    y = np.array(y)\n    \n    # Shuffle the data\n    X, y = shuffle(X, y)\n    \n    print(f'Number of examples is: {len(X)}')\n    print(f'X shape is: {X.shape}')\n    print(f'y shape is: {y.shape}')\n    \n    return X, y","de29fbfc":"def plot_samples(X, y, labels_dict, n=50):\n    \"\"\"\n    Creates a gridplot for desired number of images (n) from the specified set\n    \"\"\"\n    for index in range(len(labels_dict)):\n        imgs = X[np.argwhere(y == index)][:n]\n        j = 10\n        i = int(n\/j)\n\n        plt.figure(figsize=(15,6))\n        c = 1\n        for img in imgs:\n            plt.subplot(i,j,c)\n            plt.imshow(img[0])\n\n            plt.xticks([])\n            plt.yticks([])\n            c += 1\n        plt.suptitle('Tumor: {}'.format(labels_dict[index]))\n        plt.show()","5626be49":"X_train, y_train = load_data([augmented_yes, augmented_no])","ae62e5ba":"plot_samples(X_train, y_train, ['yes','no'], 20)","c7196fbc":"def crop_brain_contour(image, plot=False):\n    \n    # Convert the image to grayscale, and blur it slightly\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    blurred = cv2.GaussianBlur(gray, (5, 5), 0)\n    # Canny Edge Detection Algortihm from OpenCV\n    thresh = cv2.threshold(blurred, 45, 255, cv2.THRESH_BINARY)[1]\n    thresh = cv2.erode(thresh, None, iterations=2)\n    thresh = cv2.dilate(thresh, None, iterations=2)\n    \n    # Find contours in thresholded image, then grab the largest one\n    cnts = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    cnts = cnts[0] if len(cnts) == 2 else cnts[1]\n    cnts = sorted(cnts, key=cv2.contourArea, reverse=True)\n    \n    # crop new image out of the original image using the four extreme points (left, right, top, bottom)\n    for c in cnts:\n        x,y,w,h = cv2.boundingRect(c)\n        new_image = image[y:y+h, x:x+w]\n        break        \n\n    if plot:\n        plt.figure()\n        plt.subplot(1, 2, 1)\n        plt.imshow(image)\n        plt.tick_params(axis='both', which='both', top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Original Image')\n        plt.subplot(1, 2, 2)\n        plt.imshow(new_image)\n        plt.tick_params(axis='both', which='both',top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Cropped Image')\n        plt.show()\n    \n    return new_image","e19f79c1":"ex_img = cv2.imread(image_dir+'yes\/Y107.jpg')\nex_crop_img = crop_brain_contour(ex_img, True)","13a8cf8a":"def Croping_Data(train):\n\n    # load all images in a directory\n    X = []\n    y = []\n    \n    for img in train:\n        image = crop_brain_contour(img, plot=False)\n        X.append(image)\n                \n    X = np.array(X)\n    \n    return X","84f565bc":"X = Croping_Data(X_train)","6b22c456":"plot_samples(X, y_train, ['yes','no'], 20)","d4929b49":"def Resize_Data(train):\n\n    # load all images in a directory\n    X = []\n    y = []\n    \n    IMG_WIDTH, IMG_HEIGHT = (240, 240)\n    \n    for img in train:\n        image = cv2.resize(img, (IMG_WIDTH, IMG_HEIGHT))\n        # normalize values\n        image = image \/ 255.\n        # convert image to numpy array and append it to X\n        X.append(image)\n                \n    X = np.array(X)\n    \n    return X","699c2ea3":"augmented_yes =augmented_data_path+'yes'\naugmented_no = augmented_data_path+'no'\n\nIMG_WIDTH, IMG_HEIGHT = (240, 240)\n\nX = Resize_Data(X)\ny = y_train","32dd9e97":"plot_samples(X, y_train, ['yes','no'],10)","0d704bd8":"def split_data(X, y, test_size=0.2):\n       \n    X_train, X_test_val, y_train, y_test_val = train_test_split(X, y, test_size=test_size)\n    X_test, X_val, y_test, y_val = train_test_split(X_test_val, y_test_val, test_size=0.5)\n    \n    return X_train, y_train, X_val, y_val, X_test, y_test","8aa407c2":"X_train, y_train, X_val, y_val, X_test, y_test = split_data(X, y, test_size=0.3)","7bba709d":"print (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of validation examples = \" + str(X_val.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))\nprint('Training data and target sizes: \\n{}, {}'.format(X_train.shape,y_train.shape))\nprint('Test data and target sizes: \\n{}, {}'.format(X_test.shape,y_test.shape))","fbe49418":"y = dict()\ny[0] = []\ny[1] = []\nfor set_name in (y_train, y_val, y_test):\n    y[0].append(np.sum(set_name == 0))\n    y[1].append(np.sum(set_name == 1))\n\ntrace0 = go.Bar(\n    x=['Train Set', 'Validation Set', 'Test Set'],\n    y=y[0],\n    name='No',\n    marker=dict(color='#33cc33'),\n    opacity=0.7\n)\ntrace1 = go.Bar(\n    x=['Train Set', 'Validation Set', 'Test Set'],\n    y=y[1],\n    name='Yes',\n    marker=dict(color='#ff3300'),\n    opacity=0.7\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title='Count of classes in each set',\n    xaxis={'title': 'Set'},\n    yaxis={'title': 'Count'}\n)\nfig = go.Figure(data, layout)\niplot(fig)","5bfa927f":"X_train = X_train.reshape(X_train.shape[0], 172800)\ny_train = y_train.reshape(y_train.shape[0], )\nprint('Training data and target sizes: \\n{}, {}'.format(X_train.shape,y_train.shape))\nX_val = X_val.reshape(X_val.shape[0], 172800)\ny_val = y_val.reshape(y_val.shape[0], )\nX_test = X_test.reshape(X_test.shape[0], 172800)\ny_test = y_test.reshape(y_test.shape[0], )\nprint('Test data and target sizes: \\n{}, {}'.format(X_test.shape,y_test.shape))","ecfb56dd":"# Create a classifier: a support vector classifier\nparam_grid = [\n  {'C': [1, 10], 'kernel': ['linear']},\n ]\nsvc = svm.SVC()\nclassifier = GridSearchCV(svc, param_grid, verbose = 3)\nclassifier.fit(X_train, y_train)\n#fit to the training data\n","1587676f":"# now to Now predict the value of the digit on the test data\ny_pred = classifier.predict(X_test)","09697d33":"print(\"Classification report for classifier %s:\\n%s\\n\"\n      % (classifier, metrics.classification_report(y_test, y_pred)))","655490fa":"print(\"Confusion matrix:\\n%s\" % metrics.confusion_matrix(y_test, y_pred))","adcf9191":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize = (6,6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    cm = np.round(cm,2)\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()","6c29cc1b":"labels = ['yes','no']\n# validate on val set\npredictions = classifier.predict(X_val)\npredictions = [1 if x>0.5 else 0 for x in predictions]\n\naccuracy = accuracy_score(y_val, predictions)\nprint('Val Accuracy = %.2f' % accuracy)\n\nconfusion_mtx = confusion_matrix(y_val, predictions) \ncm = plot_confusion_matrix(confusion_mtx, classes = labels, normalize=False)","3111b46e":"# validate on test set\npredictions = classifier.predict(X_test)\npredictions = [1 if x>0.5 else 0 for x in predictions]\n\naccuracy = accuracy_score(y_test, predictions)\nprint('Test Accuracy = %.2f' % accuracy)\n\nconfusion_mtx = confusion_matrix(y_test, predictions) \ncm = plot_confusion_matrix(confusion_mtx, classes = labels, normalize=False)","a2a5bc38":"# Preprocessing the Data","c18bbe8b":"# Data Visualization"}}