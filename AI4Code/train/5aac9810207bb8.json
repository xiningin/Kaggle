{"cell_type":{"d519c945":"code","1403445f":"code","3def933e":"code","337b353c":"code","971816af":"code","9058b311":"code","dbe7ca27":"code","59c58355":"code","4825a8b3":"code","c3dcd17d":"code","2e10ecb7":"code","606d3063":"code","61da8ae0":"code","ba74bd58":"code","4c1e4d85":"code","c106cee4":"code","2cf83807":"markdown","3368a0d2":"markdown","78d5501a":"markdown","4d172104":"markdown","c851524d":"markdown","1367f06b":"markdown","dddb64d5":"markdown","0daa2422":"markdown"},"source":{"d519c945":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1403445f":"import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","3def933e":"df = pd.read_csv('\/kaggle\/input\/tips-extended-analysis\/tips_extended_cleaned.csv')\ndf.sample(5)","337b353c":"df.shape","971816af":"test_ratio = 0.1 # 10% for testing, 90% for training\ndata_size = df.shape[0]\ntest_size = int(data_size * test_ratio)\ntrain_size = data_size - test_size\n(train_size, test_size)","9058b311":"# Randomize the records in df\ndf = df.sample(frac=1)\ntrain_df = df.head(train_size)\ntest_df = df.tail(test_size)\n(train_df.shape[0], test_df.shape[0])","dbe7ca27":"df.columns","59c58355":"feature_columns = ['Bill', 'Number_of_People', 'Arrived_in_cleaned', 'Time_of_visit_cleaned']\ntrain_x_df = train_df.loc[:, feature_columns]\ntrain_y_df = train_df.loc[:, ['Tips']]\ntest_x_df = test_df.loc[:, feature_columns]\ntest_y_df = test_df.loc[:, ['Tips']]","4825a8b3":"train_x = train_x_df.to_numpy()# 44 x 4\ntrain_y = train_y_df.to_numpy().reshape(-1) #1\ntest_x = test_x_df.to_numpy() # 4 x 4\ntest_y = test_y_df.to_numpy().reshape(-1) #1","c3dcd17d":"logistic_model = LogisticRegression(solver='liblinear', C=50)","2e10ecb7":"logistic_model.fit(train_x, train_y)","606d3063":"predicted = logistic_model.predict(test_x)\nprint('Actual:', test_y)\nprint('Predicted:', predicted)","61da8ae0":"mean_squared_error(test_y, predicted)","ba74bd58":"mean_absolute_error(test_y, predicted)","4c1e4d85":"import matplotlib.pyplot as plt\nts = len(test_y)\nplt.scatter(range(ts), test_y, label='actual_tips')\nplt.scatter(range(ts), predicted, label='predicted_tips')\nplt.legend()","c106cee4":"sample_in = [250, 6, 1, 2]\nsample_result = logistic_model.predict([sample_in])\nsample_result[0]","2cf83807":"# Convert train & test data to numpy","3368a0d2":"# Train the Model","78d5501a":"# Initiate the Algorithm","4d172104":"# Import Libraries","c851524d":"# Train-test split","1367f06b":"# Loading the Dataset","dddb64d5":"# Predict on real-world data","0daa2422":"# Test the Model"}}