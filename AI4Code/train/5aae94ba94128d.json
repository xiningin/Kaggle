{"cell_type":{"78ac59e6":"code","1f70b8fd":"code","def51ae5":"code","450fe54d":"code","dd166feb":"code","d0d839af":"code","f5835a5b":"code","658995f6":"code","58add8f6":"code","b4e7825b":"code","0f8f2bc5":"code","2ec44bf5":"code","fbbc8e1e":"code","0e317495":"code","877d9d35":"code","198bd335":"code","ab3138aa":"code","ce6129ab":"code","cce69427":"code","b3510285":"code","daf58ea8":"code","4930fea4":"code","a80e55c1":"code","3777ea17":"code","c6ef783b":"code","6c9d7a72":"code","5f475a6d":"code","7f106321":"code","d5bd4330":"code","5f2a05a6":"code","202b6915":"code","06241105":"code","a4110a6a":"code","d16f1f4f":"code","278d32cf":"code","f25a0128":"code","75bf4675":"code","aea462ca":"code","f57416be":"markdown","40bd246c":"markdown","5da3cf78":"markdown","191c24ba":"markdown","1153a42b":"markdown","966e9fb3":"markdown","546ada0d":"markdown","dff7607f":"markdown","2d74f403":"markdown","5a3d24fe":"markdown","44632ac3":"markdown","06a42414":"markdown"},"source":{"78ac59e6":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","1f70b8fd":"df_original = pd.read_csv('\/kaggle\/input\/ccdata\/CC GENERAL.csv', index_col='CUST_ID')\ndf = df_original.copy()","def51ae5":"df.shape","450fe54d":"df.columns","dd166feb":"df.sample(10)","d0d839af":"df.info()","f5835a5b":"df.isnull().sum()","658995f6":"# Filling out all the null values using median \n# More appropriate strategies might be required depending on the context\ndf.fillna(df.median(), inplace=True)","58add8f6":"for col in df.columns:\n    print('{:33} : {:6} : {:}'.format(col, df[col].nunique(), df[col].dtype))","b4e7825b":"(1e2*df['TENURE'].value_counts().sort_index()\/len(df)).plot(kind='barh')\nplt.title('Tenure Distribution')\nplt.xlabel('% Distribution');","0f8f2bc5":"sns.boxplot(x=\"TENURE\", y=\"BALANCE\", data=df)\nplt.ylim(-10**3, 10**4)\nplt.title('Balance distribution with Tenure');","2ec44bf5":"fig, axs = plt.subplots(nrows=4, ncols=4, figsize=(15, 15))\nfor i in range(4):\n    for j in range(4):\n        sns.distplot(df[df.columns[4 * i + j]], ax=axs[i,j])\nplt.show()","fbbc8e1e":"df.shape","0e317495":"from sklearn.cluster import KMeans\nk = 5\nkmeans = KMeans(n_clusters=k, random_state=1)\ndf['k_5_label'] = kmeans.fit_predict(df)","877d9d35":"kmeans.inertia_","198bd335":"profile = df.groupby('k_5_label').mean().T","ab3138aa":"round(profile)","ce6129ab":"# round(profile.apply(lambda x: (max(x) - min(x))\/x.median(), axis=1))","cce69427":"round(pd.DataFrame(kmeans.cluster_centers_.T))","b3510285":"from sklearn.cluster import MiniBatchKMeans\n\nminibatch_kmeans = MiniBatchKMeans(n_clusters=5, random_state=1)\ndf['k_5_batch'] = minibatch_kmeans.fit_predict(df)","daf58ea8":"pd.crosstab(df['k_5_label'], df['k_5_batch'])","4930fea4":"from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score","a80e55c1":"def evaluate_metrics(df, min_clust=2, max_clust=10, rand_state=1):\n    inertias = []\n    silhouette = []\n    ch_score = []\n    db_score = []\n    for n_clust in range(min_clust, max_clust):\n        kmeans = KMeans(n_clusters=n_clust, random_state=rand_state)\n        y_label = kmeans.fit_predict(df)\n        inertias.append(kmeans.inertia_)\n        silhouette.append(silhouette_score(df, y_label))\n        ch_score.append(calinski_harabasz_score(df, y_label))\n        db_score.append(davies_bouldin_score(df, y_label))        \n\n    fig, ax = plt.subplots(2, 2, figsize=(15, 10))\n    ax[0][0].plot(range(min_clust, max_clust), inertias, '-x', linewidth=2)\n    ax[0][0].set_xlabel('No. of clusters')\n    ax[0][0].set_ylabel('Inertia')\n    \n    ax[0][1].plot(range(min_clust, max_clust), silhouette, '-x', linewidth=2)\n    ax[0][1].set_xlabel('No. of clusters')\n    ax[0][1].set_ylabel('Silhouette Score')\n    \n    ax[1][0].plot(range(min_clust, max_clust), ch_score, '-x', linewidth=2)\n    ax[1][0].set_xlabel('No. of clusters')\n    ax[1][0].set_ylabel('Calinski Harabasz Score')\n    \n    ax[1][1].plot(range(min_clust, max_clust), db_score, '-x', linewidth=2)\n    ax[1][1].set_xlabel('No. of clusters')\n    ax[1][1].set_ylabel('Davies Bouldin Score')\n    fig.suptitle('Metrics to evaluate the number of clusters')\n    plt.show()","3777ea17":"evaluate_metrics(df.iloc[:, :-2], min_clust=2, max_clust=15, rand_state=0)","c6ef783b":"df = df_original.copy()\ndf.fillna(df.median(), inplace=True)","6c9d7a72":"from sklearn.preprocessing import StandardScaler\ndf_scaled = StandardScaler().fit_transform(df)","5f475a6d":"evaluate_metrics(df_scaled, min_clust=2, max_clust=15, rand_state=0)","7f106321":"from yellowbrick.cluster.silhouette import SilhouetteVisualizer","d5bd4330":"plt.style.use('seaborn-paper')\nfig, axs = plt.subplots(2, 3, figsize=(20, 15))\naxs = axs.reshape(6)\nfor i, k in enumerate(range(7, 13)):\n    ax = axs[i]\n    sil = SilhouetteVisualizer(KMeans(n_clusters=k, random_state=1), ax=ax)\n    sil.fit(df_scaled)\n    sil.finalize()","5f2a05a6":"plt.style.use('fivethirtyeight')","202b6915":"df.T","06241105":"kmeans = MiniBatchKMeans(n_clusters=8, random_state=1)\ndf['k_8_label'] = kmeans.fit_predict(df)","a4110a6a":"round(1e2 * df['k_8_label'].value_counts().sort_index()\/len(df), 2)","d16f1f4f":"round(df.groupby('k_8_label').mean().T, 2)","278d32cf":"#fig, ax = plt.subplots(figsize=(6, 4))\ndf.mean()","f25a0128":"round(1e2 * df['k_8_label'].value_counts().sort_index()\/len(df))","75bf4675":"(df[['BALANCE', 'PURCHASES', 'CASH_ADVANCE', 'CREDIT_LIMIT', 'PAYMENTS', 'k_8_label']]\n .groupby('k_8_label').mean().plot.bar(figsize=(15, 5)))\nplt.title('Purchase Behavior of various segments')\nplt.xlabel('SEGMENTS');","aea462ca":"(df[['PURCHASES_FREQUENCY', 'ONEOFF_PURCHASES_FREQUENCY', 'PURCHASES_INSTALLMENTS_FREQUENCY', 'CASH_ADVANCE_FREQUENCY', 'k_8_label']]\n .groupby('k_8_label').mean().plot.bar(figsize=(15, 5)))\nplt.title('Frequency behavior of various segments')\nplt.xlabel('SEGMENTS');","f57416be":"Let's look at the distribution of the population within the cluster.","40bd246c":"# Observations: \n\n## Large segments:\n* **Cluster 6**: This cluster shows low balances but average activity. This cluster will be an approprite cluster for spend campaign targetting.\n* **Cluster 0**: This cluster shows slightly higher balances and purchase activities, but higher one-off purchase behavior. \n* **Cluster 4**: This cluster has the highest activity, balances, and purchases. This group of customers interestingly also have a higher set of credit lines, indicating that an increasing credit limit increases leads to an increase in the purchase activitis. (A rigourous testing of this hypothesis should be carries out.)\n\n## Small segments:\n* **Cluster 2**: This group of customers is in a dire need of a credit limit increase. They also have the highest activities among all the clusters.\n* **Cluster 3**: This group of customers on the other hand are not completely utilizing the credit line assigned to them. Additional investigations are needed to understand why this particular set of consumers are not utilizing their lines or if their credit lines could in the future be assigned to a different set of consumers.","5da3cf78":"This uneven distribution in the clusters is a desirable or undesirable thing, depending on the business context.\nIf there is a need for equal number of clustes in the datasets, then some of the clusters can be combined into other clusters.\nIf however, the business ask is to create a anomaly\/fraud detection strategy (for example, identification of gamers), then having a small number of customers in a particular segment is not an issue.\n\nLet us see the profiles of the customers in different groups.","191c24ba":"It's worth understanding what do these features correspond to:\n\n* **BALANCE** : Balance amount left in customers account to make purchases\n* **BALANCE_FREQUENCY** : How frequently the Balance is updated, score between 0 and 1 \n* **PURCHASES** : Amount of purchases made from account\n* **ONEOFF_PURCHASES** : Maximum purchase amount done in one-go\n* **INSTALLMENTS_PURCHASES** : Amount of purchase done in installment\n* **CASH_ADVANCE** : Cash in advance given by the user\n* **PURCHASES_FREQUENCY** : How frequently the Purchases are being made, score between 0 and 1 \n* **ONEOFFPURCHASESFREQUENCY** : How frequently Purchases are happening in one-go\n* **PURCHASESINSTALLMENTSFREQUENCY** : How frequently purchases in installments are being done\n* **CASHADVANCEFREQUENCY** : How frequently the cash in advance being paid\n* **CASHADVANCETRX** : Number of Transactions made with \"Cash in Advanced\"\n* **PURCHASES_TRX** : Numbe of purchase transactions made\n* **CREDIT_LIMIT** : Limit of Credit Card for user\n* **PAYMENTS** : Amount of Payment done by user\n* **MINIMUM_PAYMENTS** : Minimum amount of payments made by user\n* **PRCFULLPAYMENT** : Percent of full payment paid by user\n* **TENURE** : Tenure of credit card service for user\n\n(1=frequent, 0=not frequent)","1153a42b":"With the general intuition obtained from various methods above, we conclude that 8 seems to be an appropriate number for clustering.","966e9fb3":"Not all customers are alike. Consumers usually show a wide variety of behaviors. A lot of times, Segments that are used in businesses are threshold based.\nWith growing number of features and a general theme of personlized products, there is a need for a scietific based methodology to group customers together.\nClustering based on the behavioral data comes to the rescue.\nThe aim of this analysis is to group credit card holders in appropriate groups to better understand their needs and behaviors and to serve them better with appropriate marketing offers.\n\nWe will use k-means algorithm to create the appropriate segmentation strategy.","546ada0d":"# Evaluations of clustering metrics\n\nTo figure out the number of clusters that can be found out in our datasets, we can evaluate a set of indices or scores.\n\n1. Silhoutte score\n2. Calinski Harabasz score\n3. Davies Bouldin score\n","dff7607f":"# Scaling of features","2d74f403":"## Minibatch Clustering","5a3d24fe":"The intertia is one measure of understanding the behaviors of clusters.","44632ac3":"Let us look at some of the main features of the clusters. **Balances, Purchases, Cash advances, Credit Limit, Payments** are some of the most important features at play for credit card products. It is really important however to be aware and keep in the mind the percentage distribution of the clusters.","06a42414":"# Credit Card Customer Segmentation using k-means clustering"}}