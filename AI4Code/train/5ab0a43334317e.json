{"cell_type":{"a3727306":"code","26ba7c62":"code","f01b8df0":"code","832e9244":"code","ddf83e15":"code","f1eac0ad":"code","44f0d6ba":"code","1afbab6d":"code","9b2bd034":"code","4ee4f511":"code","7ce4b172":"code","2658a357":"code","97591047":"code","49ecb653":"code","3e93b8e3":"code","3864e18d":"code","3d09289c":"code","54f03a4f":"code","c56852d3":"code","246c191a":"code","bd516616":"code","82018a34":"code","74dc3dde":"code","14611cae":"code","026f0bc3":"code","0490e7ea":"code","98afdf00":"code","b95534c5":"code","b77b35c7":"code","2c6e3568":"code","6074e9d7":"markdown","6cdf1e84":"markdown","f0e47796":"markdown","cd5e0256":"markdown","1e2482ab":"markdown","92df64a1":"markdown","b59c5b0e":"markdown","673b955e":"markdown","6af7355d":"markdown","5a6226c1":"markdown","4c3a55f4":"markdown","66cd2dcf":"markdown","1a38ffec":"markdown","ca1c4c17":"markdown","647b5d92":"markdown","6926dbe5":"markdown","8035d277":"markdown","99b294ad":"markdown","ae3f7f63":"markdown","caac32a3":"markdown","a97dde6a":"markdown","446a1a7d":"markdown","c5b6c3cb":"markdown","c1669d38":"markdown"},"source":{"a3727306":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","26ba7c62":"df= pd.read_csv('..\/input\/BlackFriday.csv')\n","f01b8df0":"df.head()","832e9244":"print('<Contain NaNs?>')\nprint(df.isnull().any())\nmissing_ser_percentage = (df.isnull().sum()\/df.shape[0]*100).sort_values(ascending=False)\nmissing_ser_percentage = missing_ser_percentage[missing_ser_percentage!=0].round(2)\nmissing_ser_percentage.name = 'missing values %'\nprint('\\n<NaN ratio>')\nprint(missing_ser_percentage)","ddf83e15":"df.fillna(0,inplace=True)\n","f1eac0ad":"for col in df.columns:\n    print('{} unique element: {}'.format(col,df[col].nunique()))","44f0d6ba":"df.dtypes\n","1afbab6d":"#unique values in Gender parameter\ngender = np.unique(df['Gender'])\ngender","9b2bd034":"def map_gender(gender):\n    if gender == 'M':\n        return 0\n    else:\n        return 1\ndf['Gender'] = df['Gender'].apply(map_gender)","4ee4f511":"age = np.unique(df['Age'])\nage\n","7ce4b172":"city_category = np.unique(df['City_Category'])\ncity_category","2658a357":"def map_city_categories(city_category):\n    if city_category == 'A':\n        return 2\n    elif city_category == 'B':\n        return 1\n    else:\n        return 0\ndf['City_Category'] = df['City_Category'].apply(map_city_categories)","97591047":"city_stay = np.unique(df['Stay_In_Current_City_Years'])\ncity_stay","49ecb653":"df.head()\n","3e93b8e3":"ageData = sorted(list(zip(df.Age.value_counts().index, df.Age.value_counts().values)))\nage, productBuy = zip(*ageData)\nage, productBuy = list(age), list(productBuy)\nageSeries = pd.Series((i for i in age))\n\ndata = [go.Bar(x=age, \n               y=productBuy, \n               name=\"How many products were sold\",\n               marker = dict(color=['#00FFFF', '#0000A0', '#ADD8E6', '#C0C0C0', '#808080', '#A52A2A', '#FF0000'],\n                            line = dict(color='#7C7C7C', width = .5)),\n              text=\"Age: \" + ageSeries)]\nlayout = go.Layout(title= \"How many products were sold by ages\")\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3864e18d":"age0_17 = len(df[df.Age == \"0-17\"].User_ID.unique())\nage18_25 = len(df[df.Age == \"18-25\"].User_ID.unique())\nage26_35 = len(df[df.Age == \"26-35\"].User_ID.unique())\nage36_45 = len(df[df.Age == \"36-45\"].User_ID.unique())\nage46_50 = len(df[df.Age == \"46-50\"].User_ID.unique())\nage51_55 = len(df[df.Age == \"51-55\"].User_ID.unique())\nage55 = len(df[df.Age == \"55+\"].User_ID.unique())\nagesBuyerCount = [age0_17,age18_25,age26_35,age36_45,age46_50,age51_55,age55]\n               \ntrace1 = go.Bar(x = age,\n                y = agesBuyerCount,\n                name = \"People count\",\n                marker = dict(color=['#F3B396', '#F3F196', '#A7F9AD', '#D5F0EF', '#AAADEE', '#EAC1E8', '#DF8787'],\n                             line = dict(color='#7C7C7C', width = 1)),\n                text = \"Age: \" + ageSeries)\ndata = [trace1]\nlayout = go.Layout(title= \"How many people did shopping by ages\")\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","3d09289c":"plt.figure(figsize=(15,5))\nage_order = ['0-17','18-25','26-35','36-45','46-50','51-55','55+']\nplt.subplot(131)\nsns.countplot('Age',order=age_order,hue='Gender',data=df,alpha = 0.8)\nplt.xlabel('Age',fontsize=14)\nplt.ylabel('')\nplt.xticks(rotation=70)\nplt.title('Number of customers',fontsize=14)\nplt.legend(['Male','Female'],frameon=True,fontsize=14)\nplt.tick_params(labelsize=15)\nplt.subplot(132)\ndf_Tpurchase_by_Age = df.groupby(['Age','Gender']).agg({'Purchase':np.sum}).reset_index()\nsns.barplot('Age','Purchase',hue='Gender',data=df_Tpurchase_by_Age,alpha = 0.8)\nplt.xlabel('Age',fontsize=14)\nplt.ylabel('')\nplt.xticks(rotation=70)\nplt.title('Total purchase',fontsize=14)\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)\nplt.subplot(133)\ndf_Apurchase_by_Age = df.groupby(['Age','Gender']).agg({'Purchase':np.mean}).reset_index()\nsns.barplot('Age','Purchase',hue='Gender',data=df_Apurchase_by_Age,alpha = 0.8)\nplt.xlabel('Age',fontsize=14)\nplt.ylabel('')\nplt.xticks(rotation=70)\nplt.title('Average purchase',fontsize=14)\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)","54f03a4f":"x_Gender = ['Male', 'Female']\ny_PurchaseAmountAccordingToGender = [df[df.Gender == 0 ].Purchase.sum(), df[df.Gender == 1].Purchase.sum()]\n\ndata = [go.Bar(x = x_Gender, \n                y = y_PurchaseAmountAccordingToGender,\n              marker = dict(color=['#A7F9AD','#AAADEE']))]\nlayout = go.Layout(title = 'Purchased Amount According To Gender (in US Dollars)')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c56852d3":"x_MaritalStatus = ['Single', 'Married']\ny_PurchaseAmountAccordingToMaritalStatus = [int(df[df.Marital_Status == 0].Purchase.sum()), int(df[df.Marital_Status == 1].Purchase.sum())]\n\ndata = [go.Bar(x = x_MaritalStatus, \n                y = y_PurchaseAmountAccordingToMaritalStatus,\n              marker = dict(color=['#D5F0EF','#AAADEE']))]\nlayout = go.Layout(title = 'Purchased Amount According To Marital Status (in US Dollars)')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","246c191a":"x_Status = ['Single & Male', 'Single & Female', 'Married & Male', 'Married & Female']\ny_Purchases = [df[(df.Gender == 0) & (df.Marital_Status == 0)].Purchase.sum(),\n              df[(df.Gender == 1) & (df.Marital_Status == 0)].Purchase.sum(),\n              df[(df.Gender == 0) & (df.Marital_Status == 1)].Purchase.sum(),\n              df[(df.Gender == 1) & (df.Marital_Status == 1)].Purchase.sum()]\n\ndata = [go.Bar(x = x_Status, \n                y = y_Purchases,\n              marker = dict(color=['#F3B396','#EAC1E8','#F3F196','#AAADEE']))]\nlayout = go.Layout(title = 'Purchased Amount According To Gender and Marital Status (in US Dollars)')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","bd516616":"x_CityC = ['A','B','C']\ny_PurchaseAmountAccordingToCity = [df[df.City_Category == 2].Purchase.sum(), df[df.City_Category == 1].Purchase.sum(), df[df.City_Category == 0].Purchase.sum()]\ndata = [go.Bar(x = x_CityC, \n                y = y_PurchaseAmountAccordingToCity,\n              marker = dict(color=['#F3F196','#AAADEE','#F3B396']))]\nlayout = go.Layout(title = 'Purchased Amount According To City Category (in US Dollars)')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","82018a34":"city_order = ['A','B','C']\nplt.figure(figsize=(15,5))\nplt.subplot(131)\ndf_Tpurchase_by_City = df.groupby(['City_Category','Occupation']).agg({'Purchase':np.sum}).reset_index()\nsns.barplot('City_Category','Purchase',hue='Occupation',data=df_Tpurchase_by_City,alpha = 0.8)\nplt.title('Total purchase',fontsize=14)\nplt.xlabel('City',fontsize=14)\nplt.ylabel('')\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)\nplt.subplot(132)\ndf_Apurchase_by_City = df.groupby(['City_Category','Occupation']).agg({'Purchase':np.mean}).reset_index()\nsns.barplot('City_Category','Purchase',hue='Occupation',data=df_Apurchase_by_City,alpha = 0.8)\nplt.title('Average purchase',fontsize=14)\nplt.xlabel('City',fontsize=14)\nplt.ylabel('')\nplt.legend(title='Occupation',frameon=True,fontsize=10,bbox_to_anchor=(1,0.5), loc=\"center left\")\nplt.tick_params(labelsize=15)","74dc3dde":"labels = sorted(df.Stay_In_Current_City_Years.unique())\nvalues = df.Stay_In_Current_City_Years.value_counts().sort_index()\n\ntrace = go.Pie(labels=labels, values=values)\n\niplot([trace])","14611cae":"df['Marital_Status_label']=np.where(df['Marital_Status'] == 0,'Single','Married')\ndf_Tpurchase_by_City_Marital = df.groupby(['City_Category','Marital_Status_label']).agg({'Purchase':np.sum}).reset_index()\ndf_Tpurchase_by_City_Stay = df.groupby(['City_Category','Stay_In_Current_City_Years']).agg({'Purchase':np.sum}).reset_index()\nfig = plt.figure(figsize=(15,5))\nfig.suptitle('Total purchase',fontsize=20)\nplt.subplot(121)\nsns.barplot('City_Category','Purchase',hue='Marital_Status_label',data=df_Tpurchase_by_City_Marital,alpha = 0.8)\nplt.xlabel('City',fontsize=14)\nplt.ylabel('')\nplt.legend(frameon=True,fontsize=14)\nplt.tick_params(labelsize=15)\nplt.subplot(122)\nsns.barplot('City_Category','Purchase',hue='Stay_In_Current_City_Years',data=df_Tpurchase_by_City_Stay,alpha = 0.8)\nplt.xlabel('City',fontsize=14)\nplt.ylabel('')\nplt.legend(title='Residency duration',frameon=True,fontsize=12,loc=2)\nplt.tick_params(labelsize=15)\ndf.drop('Marital_Status_label',axis=1,inplace=True)","026f0bc3":"corrmat = df.corr()\nfig,ax = plt.subplots(figsize = (15,9))\nsns.heatmap(corrmat, vmax=.8, square=True)","0490e7ea":"mean_cat_1 = df['Product_Category_1'].mean()\nmean_cat_2 = df['Product_Category_2'].mean()\nmean_cat_3= df['Product_Category_3'].mean()\nprint(f\"PC1: {mean_cat_1} \\n PC2: {mean_cat_2} \\n PC3 : {mean_cat_3}\")","98afdf00":"from sklearn.preprocessing import LabelEncoder","b95534c5":"df_Tpurchase_by_PC1_Age = df.groupby(['Product_Category_3','Age']).agg({'Purchase':np.sum}).reset_index()\nfig = plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.countplot('Product_Category_3',hue='Age',data=df,alpha = 0.8,hue_order=age_order)\nplt.title('Item count',fontsize=14)\nplt.xlabel('Product category 3',fontsize=14)\nplt.ylabel('')\nplt.legend(title='Age group',frameon=True,fontsize=12)\nplt.tick_params(labelsize=15)\nplt.subplot(122)\nsns.barplot('Product_Category_3','Purchase',hue='Age',data=df_Tpurchase_by_PC1_Age,alpha = 0.8)\nplt.title('Total purchase',fontsize=14)\nplt.xlabel('Product category 3',fontsize=14)\nplt.ylabel('')\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)\n\ndf_Tpurchase_by_PC1_Gender = df.groupby(['Product_Category_3','Gender']).agg({'Purchase':np.sum}).reset_index()\nfig = plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.countplot('Product_Category_3',hue='Gender',data=df,alpha = 0.8)\nplt.title('Item count',fontsize=14)\nplt.xlabel('Product category 3',fontsize=14)\nplt.ylabel('')\nplt.legend(['Male','Female'],frameon=True,fontsize=12)\nplt.tick_params(labelsize=15)\nplt.subplot(122)\nsns.barplot('Product_Category_3','Purchase',hue='Gender',data=df_Tpurchase_by_PC1_Gender,alpha = 0.8)\nplt.title('Total purchase',fontsize=14)\nplt.xlabel('Product category 3',fontsize=14)\nplt.ylabel('')\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15) ","b77b35c7":"df_Tpurchase_by_PC1_Age = df.groupby(['Product_Category_1','Age']).agg({'Purchase':np.sum}).reset_index()\nfig = plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.countplot('Product_Category_1',hue='Age',data=df,alpha = 0.8,hue_order=age_order)\nplt.title('Item count',fontsize=14)\nplt.xlabel('Product category 1',fontsize=14)\nplt.ylabel('')\nplt.legend(title='Age group',frameon=True,fontsize=12)\nplt.tick_params(labelsize=15)\nplt.subplot(122)\nsns.barplot('Product_Category_1','Purchase',hue='Age',data=df_Tpurchase_by_PC1_Age,alpha = 0.8)\nplt.title('Total purchase',fontsize=14)\nplt.xlabel('Product category 1',fontsize=14)\nplt.ylabel('')\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)\n\ndf_Tpurchase_by_PC1_Gender = df.groupby(['Product_Category_1','Gender']).agg({'Purchase':np.sum}).reset_index()\nfig = plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.countplot('Product_Category_1',hue='Gender',data=df,alpha = 0.8)\nplt.title('Item count',fontsize=14)\nplt.xlabel('Product category 1',fontsize=14)\nplt.ylabel('')\nplt.legend(['Male','Female'],frameon=True,fontsize=12)\nplt.tick_params(labelsize=15)\nplt.subplot(122)\nsns.barplot('Product_Category_1','Purchase',hue='Gender',data=df_Tpurchase_by_PC1_Gender,alpha = 0.8)\nplt.title('Total purchase',fontsize=14)\nplt.xlabel('Product category 1',fontsize=14)\nplt.ylabel('')\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)","2c6e3568":"df_Tpurchase_by_PC1_Age = df.groupby(['Product_Category_2','Age']).agg({'Purchase':np.sum}).reset_index()\nfig = plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.countplot('Product_Category_2',hue='Age',data=df,alpha = 0.8,hue_order=age_order)\nplt.title('Item count',fontsize=14)\nplt.xlabel('Product category 2',fontsize=14)\nplt.ylabel('')\nplt.legend(title='Age group',frameon=True,fontsize=12)\nplt.tick_params(labelsize=15)\nplt.subplot(122)\nsns.barplot('Product_Category_2','Purchase',hue='Age',data=df_Tpurchase_by_PC1_Age,alpha = 0.8)\nplt.title('Total purchase',fontsize=14)\nplt.xlabel('Product category 2',fontsize=14)\nplt.ylabel('')\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)\n\ndf_Tpurchase_by_PC1_Gender = df.groupby(['Product_Category_2','Gender']).agg({'Purchase':np.sum}).reset_index()\nfig = plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.countplot('Product_Category_2',hue='Gender',data=df,alpha = 0.8)\nplt.title('Item count',fontsize=14)\nplt.xlabel('Product category 2',fontsize=14)\nplt.ylabel('')\nplt.legend(['Male','Female'],frameon=True,fontsize=12)\nplt.tick_params(labelsize=15)\nplt.subplot(122)\nsns.barplot('Product_Category_2','Purchase',hue='Gender',data=df_Tpurchase_by_PC1_Gender,alpha = 0.8)\nplt.title('Total purchase',fontsize=14)\nplt.xlabel('Product category 2',fontsize=14)\nplt.ylabel('')\nplt.legend().set_visible(False)\nplt.tick_params(labelsize=15)","6074e9d7":"As we can see  people and males spent more money than married people and females.","6cdf1e84":"**Unique element in each column\n**","f0e47796":"It was shown that unmarried customers spent more than the married. Customers who lived in their city for 1 year tent to spend more than other groups.","cd5e0256":"the occupation distribution was quite similar ","1e2482ab":" <h7>Let's move on and see what all data types are avialable to use in our dataset.<\/h7>","92df64a1":" Gender may be helpful as it was clear that Male spent more than Female.","b59c5b0e":" I will create a fuction and map M=0 and F=1. ","673b955e":"<h3> Purchase by City by Marrital status and Residency duration <\/h3>\n","6af7355d":"It can be seen that nothing is highly correlated with the Purchase variable. Although a few conclusions can be drawn:<br>\n\n1-Product_Category_1 has a negative correlation with Purchase.<br>\n2-Maritial_Status and Age are strongly correlated. As Expected.<br>\n3-Product_Category_3 has a strong correlation with Purchase.Maybe the products in this category were cheap. let's see <br>","5a6226c1":"<h3> Gender <\/h3>\n","4c3a55f4":"<h2>Quick overview of the data<\/h2>\n\n   <h3>Dataset structure <\/h3> ","66cd2dcf":"Let's see the Age's parameter","1a38ffec":"** Final dataframe******","ca1c4c17":"**Lets see how city category affects the purchase.\n","647b5d92":"**In general,**\n* Male shopped more than Female\n* Single shopped more than Married\n* Customers from City B shopped the most\n* Customers who has resided in their city for 1 year shopped the most\n* Product_category_3 was the most selling<br>\nThese relationships between different features can be investigated further to set the new marketing strategies to maximize the profit of the retail store (possibly for the future black Fridays). For example, the retail store may consider doing more advertisements targetting their unmarried male customers in City B on product_category_3","6926dbe5":"the total purchase of [26-35] was the most simply because there were more customers in that age group. This may mean that Age may not be a strong predictor for Purchase","8035d277":"Let's see the City's parameter","99b294ad":"I believe that the NaN values for Product_Category_2 and Product_Categrory_3 would mean that the concerned person did not buy the products from these categories.\n\nHence, I believe that it would be safe to replace them with 0.\n\n <h4> Filling the missing values <\/h4>","ae3f7f63":"Also, it would be interesting to find the Product_Category_3 that was the most famous.","caac32a3":"Let's get Gender first.","a97dde6a":"Now, let's examine the relationship between age and purchase\n","446a1a7d":"Let's mapping","c5b6c3cb":"Okay so, the people belonging to category B tend to spend a little more.","c1669d38":"<h4>DATA CLEANING <\/h4>"}}