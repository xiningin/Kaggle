{"cell_type":{"d00460ec":"code","966d06a5":"code","17642529":"code","e0584903":"code","04eeb8f2":"code","62d03312":"code","e5e5540f":"code","14e88416":"code","fef59bca":"code","c0062626":"code","fee8ee58":"code","1d82104a":"code","caa090b2":"code","07807c63":"code","c21e4c2f":"code","f3358d6a":"code","d1bd6335":"code","12261dac":"code","bf61c39c":"code","271633f4":"code","86745425":"code","c7af0b95":"code","1796ce19":"code","8036d866":"code","b34c85f9":"code","d2982d6e":"code","c51a8dc4":"code","9c381080":"code","87320088":"code","cef00e23":"code","f8144145":"code","5774c8ff":"code","f7fa3aa3":"code","9e74962f":"code","f65e16ca":"code","030015f6":"code","b6ea9131":"code","545a7b26":"code","a9179c27":"code","85a0a82e":"code","723c6067":"code","7ae690aa":"code","6c09ba29":"code","414b11f3":"code","141ffc75":"code","189a26d9":"code","4118be3a":"code","f6d42525":"code","16fc6d8e":"code","14932e0b":"code","25b8c8d3":"code","36a29dd1":"code","c904f91a":"code","a02f8e3f":"code","0a7798f7":"code","44dd558d":"code","acbaabff":"code","42affe3d":"code","f6523519":"code","d158f2f0":"code","80bf4c9b":"code","38379f58":"code","27c5231e":"code","3fb6209b":"code","958b3508":"markdown","125810b1":"markdown","4d386b38":"markdown","79b6e118":"markdown","17378f26":"markdown","70f86fb9":"markdown","62674386":"markdown","e041e5f8":"markdown","513020ca":"markdown","0f386dda":"markdown","0ea402ca":"markdown","b91762bc":"markdown","abf28faf":"markdown","7fd82023":"markdown","a913e8d2":"markdown","1927fc57":"markdown","c03d5b20":"markdown","ce34955c":"markdown","a00b3c95":"markdown","b30f0de3":"markdown","ca658b22":"markdown","6435761c":"markdown","1e9f39b0":"markdown","fd63c150":"markdown","75cc84f1":"markdown","44c57fc8":"markdown"},"source":{"d00460ec":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","966d06a5":"Spiral_Train_Path = Path(\"..\/input\/parkinsons-drawings\/spiral\/training\")\nSpiral_Test_Path = Path(\"..\/input\/parkinsons-drawings\/spiral\/testing\")","17642529":"Spiral_Train_PNG_Path = list(Spiral_Train_Path.glob(r\"*\/*.png\"))\nSpiral_Test_PNG_Path = list(Spiral_Test_Path.glob(r\"*\/*.png\"))","e0584903":"Spiral_Train_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Spiral_Train_PNG_Path))\nSpiral_Test_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Spiral_Test_PNG_Path))","04eeb8f2":"Spiral_Train_PNG_Path_Series = pd.Series(Spiral_Train_PNG_Path,name=\"PNG\").astype(str)\nSpiral_Train_PNG_Labels_Series = pd.Series(Spiral_Train_PNG_Labels,name=\"CATEGORY\")","62d03312":"Spiral_Test_PNG_Path_Series = pd.Series(Spiral_Test_PNG_Path,name=\"PNG\").astype(str)\nSpiral_Test_PNG_Labels_Series = pd.Series(Spiral_Test_PNG_Labels,name=\"CATEGORY\")","e5e5540f":"Main_Spiral_Train_Data = pd.concat([Spiral_Train_PNG_Path_Series,Spiral_Train_PNG_Labels_Series],axis=1)","14e88416":"print(Main_Spiral_Train_Data.head(-1))","fef59bca":"Main_Spiral_Test_Data = pd.concat([Spiral_Test_PNG_Path_Series,Spiral_Test_PNG_Labels_Series],axis=1)","c0062626":"print(Main_Spiral_Test_Data.head(-1))","fee8ee58":"Main_Spiral_Train_Data = Main_Spiral_Train_Data.sample(frac=1).reset_index(drop=True)\nMain_Spiral_Test_Data = Main_Spiral_Test_Data.sample(frac=1).reset_index(drop=True)","1d82104a":"print(Main_Spiral_Train_Data.head(-1))\nprint(\"---\"*20)\nprint(Main_Spiral_Test_Data.head(-1))","caa090b2":"plt.style.use(\"dark_background\")","07807c63":"sns.countplot(Main_Spiral_Train_Data[\"CATEGORY\"])\nplt.show()","c21e4c2f":"sns.countplot(Main_Spiral_Test_Data[\"CATEGORY\"])\nplt.show()","f3358d6a":"Main_Spiral_Train_Data['CATEGORY'].value_counts().plot.pie(figsize=(7,7))\nplt.show()","d1bd6335":"Main_Spiral_Test_Data['CATEGORY'].value_counts().plot.pie(figsize=(7,7))\nplt.show()","12261dac":"figure = plt.figure(figsize=(10,10))\nx = plt.imread(Main_Spiral_Train_Data[\"PNG\"][0])\nplt.imshow(x)\nplt.xlabel(x.shape)\nplt.title(Main_Spiral_Train_Data[\"CATEGORY\"][0])","bf61c39c":"figure = plt.figure(figsize=(10,10))\nx = plt.imread(Main_Spiral_Test_Data[\"PNG\"][0])\nplt.imshow(x)\nplt.xlabel(x.shape)\nplt.title(Main_Spiral_Test_Data[\"CATEGORY\"][0])","271633f4":"fig, axes = plt.subplots(nrows=5,\n                        ncols=5,\n                        figsize=(10,10),\n                        subplot_kw={\"xticks\":[],\"yticks\":[]})\n\nfor i,ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Spiral_Train_Data[\"PNG\"][i]))\n    ax.set_title(Main_Spiral_Train_Data[\"CATEGORY\"][i])\nplt.tight_layout()\nplt.show()","86745425":"fig, axes = plt.subplots(nrows=5,\n                        ncols=5,\n                        figsize=(10,10),\n                        subplot_kw={\"xticks\":[],\"yticks\":[]})\n\nfor i,ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Spiral_Test_Data[\"PNG\"][i]))\n    ax.set_title(Main_Spiral_Test_Data[\"CATEGORY\"][i])\nplt.tight_layout()\nplt.show()","c7af0b95":"Spiral_New_JPG_Path = []\nfor i in range(0,72):\n    x = cv2.imread(Main_Spiral_Train_Data[\"PNG\"][i])\n    x = np.array(x).astype(\"float32\")\n    x = x.mean()\n    Spiral_New_JPG_Path.append(x)","1796ce19":"Spiral_New_JPG_Path_Series = pd.Series(Spiral_New_JPG_Path,name=\"PNG\")","8036d866":"print(Spiral_New_JPG_Path_Series)","b34c85f9":"encode = LabelEncoder()","d2982d6e":"Spiral_New_JPG_Labels = encode.fit_transform(Main_Spiral_Train_Data[\"CATEGORY\"])","c51a8dc4":"Spiral_New_JPG_Labels_Series = pd.Series(Spiral_New_JPG_Labels,name=\"CATEGORY\")","9c381080":"print(Spiral_New_JPG_Labels_Series)","87320088":"Main_Spiral_New_Data = pd.concat([Spiral_New_JPG_Path_Series,Spiral_New_JPG_Labels_Series],axis=1)","cef00e23":"print(Main_Spiral_New_Data)","f8144145":"x = Main_Spiral_New_Data[[\"PNG\"]]\ny = Main_Spiral_New_Data[\"CATEGORY\"]","5774c8ff":"print(x.shape)","f7fa3aa3":"print(y.shape)","9e74962f":"xTrain,xTest,yTrain,yTest = train_test_split(x,y,test_size=0.1,random_state=42)","f65e16ca":"print(xTrain.shape)\nprint(xTest.shape)\nprint(yTrain.shape)\nprint(yTest.shape)","030015f6":"lj = LogisticRegression(solver=\"liblinear\").fit(xTrain,yTrain)\ngnb = GaussianNB().fit(xTrain,yTrain)\nknnc = KNeighborsClassifier().fit(xTrain,yTrain)\ncartc = DecisionTreeClassifier(random_state=42).fit(xTrain,yTrain)\nrfc = RandomForestClassifier(random_state=42,verbose=False).fit(xTrain,yTrain)\ngbmc = GradientBoostingClassifier(verbose=False).fit(xTrain,yTrain)\nxgbc = XGBClassifier().fit(xTrain,yTrain)\nlgbmc = LGBMClassifier().fit(xTrain,yTrain)\ncatbc = CatBoostClassifier(verbose=False).fit(xTrain,yTrain)","b6ea9131":"modelsc = [lj,gnb,knnc,cartc,rfc,gbmc,xgbc,lgbmc,catbc]","545a7b26":"for model in modelsc:\n    name = model.__class__.__name__\n    predict = model.predict(xTest)\n    R2CV = cross_val_score(model,xTest,yTest,verbose=False).mean()\n    error = -cross_val_score(model,xTest,yTest,scoring=\"neg_mean_squared_error\",verbose=False).mean()\n    print(name + \": \")\n    print(\"-\" * 10)\n    print(\"ACC-->\",accuracy_score(yTest,predict))\n    print(\"R2CV-->\",R2CV*100)\n    print(\"MEAN SQUARED ERROR-->\",np.sqrt(error))\n    print(\"-\" * 30)","a9179c27":"lm = LinearRegression().fit(xTrain,yTrain)\npls = PLSRegression().fit(xTrain,yTrain)\nridge = Ridge().fit(xTrain,yTrain)\nlasso = Lasso().fit(xTrain,yTrain)\nelasticnet = ElasticNet().fit(xTrain,yTrain)\nknnr = KNeighborsRegressor().fit(xTrain,yTrain)\ncartr = DecisionTreeRegressor(random_state=42).fit(xTrain,yTrain)\nbaggr = BaggingRegressor(random_state=42,bootstrap_features=True,verbose=False).fit(xTrain,yTrain)\nrfr = RandomForestRegressor(random_state=42,verbose=False).fit(xTrain,yTrain)\ngbmr = GradientBoostingRegressor(verbose=False).fit(xTrain,yTrain)\nxgbr = XGBRegressor().fit(xTrain,yTrain)\nlgbmr = LGBMRegressor().fit(xTrain,yTrain)\ncatbr = CatBoostRegressor(verbose=False).fit(xTrain,yTrain)","85a0a82e":"models = [lm,pls,ridge,lasso,elasticnet,knnr,\n         cartr,baggr,rfr,gbmr,xgbr,lgbmr,catbr]","723c6067":"for model in models:\n    name = model.__class__.__name__\n    R2CV = cross_val_score(model,xTest,yTest,scoring=\"r2\").mean()\n    error = -cross_val_score(model,xTest,yTest,scoring=\"neg_mean_squared_error\").mean()\n    print(name + \": \")\n    print(\"-\" * 10)\n    print(R2CV)\n    print(np.sqrt(error))\n    print(\"-\" * 30)","7ae690aa":"Train_Generator = ImageDataGenerator(rescale=1.\/255,\n                                    zoom_range=0.7,\n                                    shear_range=0.7,\n                                    rotation_range=50,\n                                    horizontal_flip=True,\n                                     brightness_range=[0.2,0.9],\n                                     vertical_flip=True,\n                                    validation_split=0.1)","6c09ba29":"Train_Spiral_Set = Train_Generator.flow_from_dataframe(dataframe=Main_Spiral_Train_Data,\n                                                   x_col=\"PNG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"grayscale\",\n                                                   class_mode=\"categorical\",\n                                                       subset=\"training\")","414b11f3":"Validation_Spiral_Set = Train_Generator.flow_from_dataframe(dataframe=Main_Spiral_Train_Data,\n                                                   x_col=\"PNG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"grayscale\",\n                                                   class_mode=\"categorical\",\n                                                       subset=\"validation\")","141ffc75":"Test_Spiral_Set = Train_Generator.flow_from_dataframe(dataframe=Main_Spiral_Test_Data,\n                                                   x_col=\"PNG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"grayscale\",\n                                                   class_mode=\"categorical\")","189a26d9":"print(\"TRAIN: \")\nprint(Train_Spiral_Set.class_indices)\nprint(Train_Spiral_Set.classes[0:5])\nprint(Train_Spiral_Set.image_shape)\nprint(\"---\"*20)\nprint(\"VALIDATION: \")\nprint(Validation_Spiral_Set.class_indices)\nprint(Validation_Spiral_Set.classes[0:5])\nprint(Validation_Spiral_Set.image_shape)\nprint(\"---\"*20)\nprint(\"TEST: \")\nprint(Test_Spiral_Set.class_indices)\nprint(Test_Spiral_Set.classes[0:5])\nprint(Test_Spiral_Set.image_shape)","4118be3a":"example_Image = Main_Spiral_Train_Data[\"PNG\"][30]\nLoad_Image = image.load_img(example_Image,target_size=(210,210))\nArray_Image = image.img_to_array(Load_Image)\nArray_Image = Array_Image.reshape((1,) + Array_Image.shape)\ni = 0\nfor batch in Train_Generator.flow(Array_Image,batch_size=5):\n    plt.figure(i)\n    Image = plt.imshow(image.img_to_array(batch[0]))\n    i += 1\n    if i % 4 == 0:\n        break\nplt.show()","f6d42525":"Call_Back_Early = tf.keras.callbacks.EarlyStopping(monitor=\"val_accuracy\",\n                                                   patience=7,\n                                                   mode=\"max\")\nCall_Back_Check = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                     save_best_only=True,\n                                                     filepath=\".\/my_model\")","16fc6d8e":"Model_One = Sequential()\n\n#\nModel_One.add(Conv2D(2,(15,15),activation=\"relu\",\n                 input_shape=(256,256,1)))\nModel_One.add(MaxPooling2D((2,2)))\nModel_One.add(Dropout(0.2))\n#\nModel_One.add(Conv2D(4,(10,10),activation=\"relu\",\n                 strides=(2,2)))\nModel_One.add(MaxPooling2D((2,2)))\nModel_One.add(Dropout(0.2))\n\n#\nModel_One.add(Flatten())\nModel_One.add(Dropout(0.5))\nModel_One.add(Dense(512,activation=\"relu\"))\nModel_One.add(Dense(2,activation=\"softmax\"))","14932e0b":"Model_One.compile(optimizer=RMSprop(lr=0.001),loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","25b8c8d3":"CNN_Model_One = Model_One.fit(Train_Spiral_Set,\n                      validation_data=Validation_Spiral_Set,\n                            callbacks=[Call_Back_Check,Call_Back_Early],\n                      epochs=50)","36a29dd1":"Model_Results = Model_One.evaluate(Test_Spiral_Set)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","c904f91a":"Model_Two = tf.keras.models.Sequential([\n  # inputs \n  tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255),\n  tf.keras.layers.Flatten(input_shape=(113,)),\n  # hiddens layers\n    tf.keras.layers.Dense(10, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  # output layer\n  tf.keras.layers.Dense(2,activation=\"softmax\")\n])","a02f8e3f":"lossfunc = tf.keras.losses.CategoricalCrossentropy(from_logits=True)","0a7798f7":"Model_Two.compile(optimizer='adam', loss=lossfunc, metrics=['accuracy'])","44dd558d":"ANN_Model = Model_Two.fit(Train_Spiral_Set,\n                      validation_data=Validation_Spiral_Set,\n                      epochs=50,batch_size=10)","acbaabff":"Model_Results_Two = Model_Two.evaluate(Test_Spiral_Set)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","42affe3d":"Prediction_One = Model_One.predict(Test_Spiral_Set)\nPrediction_One = Prediction_One.argmax(axis=-1)","f6523519":"Predict_Proba_One = Model_One.predict_proba(Test_Spiral_Set)","d158f2f0":"Prediction_Two = Model_Two.predict(Test_Spiral_Set)\nPrediction_Two = Prediction_Two.argmax(axis=-1)","80bf4c9b":"Predict_Proba_Two = Model_Two.predict_proba(Test_Spiral_Set)","38379f58":"Main_Predict = 0.5 * (Predict_Proba_One + Predict_Proba_Two)","27c5231e":"print(Main_Predict)","3fb6209b":"fig, axes = plt.subplots(nrows=5,\n                         ncols=5,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Spiral_Test_Data[\"PNG\"].iloc[i]))\n    ax.set_title(f\"PREDICTION:{Main_Predict[i]}\")\nplt.tight_layout()\nplt.show()","958b3508":"#### CNN","125810b1":"# SHUFFLING","4d386b38":"#### SPIRAL","79b6e118":"#### TRAIN-TEST PATH","17378f26":"# HISTORY","70f86fb9":"# VISUALIZATION","62674386":"# TRANSFORMATION TO SERIES STRUCTURE","e041e5f8":"#### CNN","513020ca":"#### APPLYING GENERATOR","0f386dda":"#### TRANSFORMATION","0ea402ca":"#### SPIRAL","b91762bc":"#### ANN","abf28faf":"# CLASSIFIERS","7fd82023":"#### Content\n* Images of healthy and patients with Parkinsons drawing spirals and waves. The images are further divided into training and testing groups for comparing (or reproducing) the results of the original publication.\n\n#### Acknowledgements\n* The data came from the paper: Zham P, Kumar DK, Dabnichki P, Poosapadi Arjunan S and Raghav S (2017) Distinguishing Different Stages of Parkinson\u2019s Disease Using Composite Index of Speed and Pen-Pressure of Sketching a Spiral. Front. Neurol. 8:435. doi: 10.3389\/fneur.2017.00435\n\nhttps:\/\/www.frontiersin.org\/articles\/10.3389\/fneur.2017.00435\/full","a913e8d2":"#### LABELS","1927fc57":"# TRANSFORMATION TO DATAFRAME STRUCTURE","c03d5b20":"#### ANN","ce34955c":"#### TRANSFORMATION","a00b3c95":"# IMAGE GENERATOR PROCESS","b30f0de3":"#### COMMUNITY","ca658b22":"# PREDICTION PROCESS","6435761c":"#### MODELS","1e9f39b0":"# MODEL","fd63c150":"# PATH & LABELS","75cc84f1":"#### TRAIN & TEST","44c57fc8":"# PACKAGES AND LIBRARIES"}}