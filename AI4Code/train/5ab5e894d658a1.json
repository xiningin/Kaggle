{"cell_type":{"84eab81f":"code","5f9073a8":"code","a559e6d8":"code","80a01a84":"code","c5bd4c19":"code","116772ec":"code","a48dd8f7":"code","cc0e96f8":"code","176fa623":"code","69f5aa37":"code","45c75638":"code","77661777":"code","524d940d":"code","640fe792":"code","fe7e1a99":"code","846fe3a3":"code","830cd653":"code","cf5e57a6":"code","b1b81b3f":"code","3e57e4ec":"code","5ab03a01":"code","69bddc0d":"code","1acf4b54":"code","f946a174":"code","834e29f4":"code","4b12107c":"code","752f4f0d":"code","3798616f":"code","6b45134b":"code","9297c6ea":"code","2eaa5cee":"code","ecb934ab":"code","bf9bbe3d":"code","b4005e1a":"code","4af98200":"code","3f2dd3c8":"code","9f6e0546":"code","1124ab40":"code","0946e547":"code","b1dfa2ac":"code","785d4a57":"code","a5a29827":"code","0b4a8869":"code","c2a9a472":"code","6f54962f":"code","ce0b4212":"code","154f7343":"code","c425533f":"code","58b86bce":"code","76d4f659":"code","8ea890e3":"code","e10a875e":"code","32389f8d":"code","92b80dbd":"code","708cc928":"code","1f68e3c5":"code","6a8c480d":"code","43d81ec7":"code","6d66350e":"code","be171ed5":"code","f1fde1cf":"code","7d575d77":"code","b272f1b9":"code","dc391b98":"code","e1043d69":"code","053fc648":"code","0a33f808":"code","3845710e":"code","a627d918":"code","eac2691e":"code","0ac4142f":"code","2ebec32d":"code","cdcadfb2":"code","7dbf104d":"code","4dd6ea6a":"code","903ab558":"code","d556778e":"code","8d601c70":"code","d5b69e6e":"code","6b047224":"code","91f679a2":"code","7f36f6ad":"code","86de31b7":"code","73859f6f":"code","b17520fc":"code","177bf977":"code","b940bf39":"markdown","7fc40fdb":"markdown","4859506e":"markdown","a8c5ae16":"markdown","df6a269d":"markdown","537379da":"markdown","7db4eae9":"markdown","9f53c93e":"markdown","b756c342":"markdown","ed723307":"markdown","9cd499b4":"markdown","5fb4e6a8":"markdown","b9090176":"markdown","c3f91bbc":"markdown","1c7a7b90":"markdown","10000b10":"markdown","93408c84":"markdown"},"source":{"84eab81f":"%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nfrom datetime import timedelta\nimport datetime as dt\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nimport seaborn as sns\nimport xgboost as xgb\nimport os\nimport gc\ngc.enable()\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import MiniBatchKMeans\nimport warnings\nwarnings.filterwarnings('ignore')\nimport urllib        #for url stuff\n#import gmaps       #for using google maps to visulalize places on maps\nimport re            #for processing regular expressions\nimport datetime      #for datetime operations\nimport calendar      #for calendar for datetime operations\nimport time          #to get the system time\nimport scipy         #for other dependancies\nfrom sklearn.cluster import KMeans # for doing K-means clustering\nfrom haversine import haversine # for calculating haversine distance\nimport math          #for basic maths operations\nimport seaborn as sns #for making plots\nimport matplotlib.pyplot as plt # for plotting\nimport os  # for os commands\nfrom scipy.misc import imread, imresize, imsave  # for plots \nimport plotly.graph_objs as go\nimport plotly\nfrom bokeh.palettes import Spectral4\nfrom bokeh.plotting import figure, output_notebook, show\nfrom IPython.display import HTML\nfrom matplotlib.pyplot import *\nfrom matplotlib import cm\nfrom matplotlib import animation\nimport io\nimport base64\noutput_notebook()\nplotly.offline.init_notebook_mode() # run at the start of every ipython notebook","5f9073a8":"np.random.seed(1987)\nN = 100000 # number of sample rows in plots\nt0 = dt.datetime.now()\ntrain = pd.read_csv('..\/input\/ride-predict\/Train (2).csv')\ntest = pd.read_csv('..\/input\/ride-predict\/Test.csv')\nriders = pd.read_csv('..\/input\/ride-predict\/Riders.csv')\n#sample_submission = pd.read_csv('..\/input\/samplesubmission\/SampleSubmission.csv')","a559e6d8":"train.head()","80a01a84":"test.head()","c5bd4c19":"riders.head()","116772ec":"train = train.merge(riders, on='Rider Id', how='left')\ntest = test.merge(riders, on='Rider Id', how='left')\ndel riders","a48dd8f7":"#Exist only in training set!\ndel_col = ['Arrival at Destination - Day of Month', 'Arrival at Destination - Weekday (Mo = 1)', 'Arrival at Destination - Time']\ntrain.drop(del_col, axis=1, inplace=True)","cc0e96f8":"#We had 21201 diferrent values for \"Order No\" in the training set, \n#the same in the test set. (the same size as the number of row)\n#so, it will not improve our model, we need to delate them.\nprint(len(set(train['Order No'].to_list())))\nprint(len(set(test['Order No'].to_list())))\n#There is only one type of Vehicle \"Bike\", we need to delate it too.\nprint(len(set(test['Vehicle Type'].to_list())))\n\n#Columns delate \ndel train['Order No']; del test['Order No']; del train['Vehicle Type']; del test['Vehicle Type']","176fa623":"print('We have {} training rows and {} test rows.'.format(train.shape[0], test.shape[0]))\nprint('We have {} training columns and {} test columns.'.format(train.shape[1], test.shape[1]))","69f5aa37":"train.head(n=2)","45c75638":"#train[train['Precipitation in millimeters']<5]","77661777":"test.head(n=2)","524d940d":"plt.hist(train['Time from Pickup to Arrival'].values, bins=100)\nplt.xlabel('Time from Pickup to Arrival')\nplt.ylabel('number of train records')\nplt.show()","640fe792":"plt.hist(train['Average_Rating'].values, bins=100)\nplt.xlabel('Average_Rating')\nplt.ylabel('number of train records')\nplt.show()","fe7e1a99":"len(set(list(train['Average_Rating'].to_list())))","846fe3a3":"plt.hist(train['Platform Type'].values, bins=100)\nplt.xlabel('Platform Type')\nplt.ylabel('number of train records')\nplt.show()","830cd653":"plt.hist(train['No_Of_Orders'].values, bins=100)\nplt.xlabel('No_Of_Orders')\nplt.ylabel('number of train records')\nplt.show()","cf5e57a6":"train.describe()","b1b81b3f":"train['Placement - Time'] = pd.to_datetime(train['Placement - Time'])\ntrain['Confirmation - Time']  = pd.to_datetime(train['Confirmation - Time'])\ntrain['Arrival at Pickup - Time']  = pd.to_datetime(train['Arrival at Pickup - Time'])\ntrain['Pickup - Time']  = pd.to_datetime(train['Pickup - Time'])","3e57e4ec":"test['Placement - Time'] = pd.to_datetime(test['Placement - Time'])\ntest['Confirmation - Time']  = pd.to_datetime(test['Confirmation - Time'])\ntest['Arrival at Pickup - Time']  = pd.to_datetime(test['Arrival at Pickup - Time'])\ntest['Pickup - Time']  = pd.to_datetime(test['Pickup - Time'])","5ab03a01":"def haversine_distance(lat1, long1, lat2, long2):\n    data = [train, test]\n    for i in data:\n        R = 6371  #radius of earth in kilometers\n        #R = 3959 #radius of earth in miles\n        phi1 = np.radians(i[lat1])\n        phi2 = np.radians(i[lat2])\n    \n        delta_phi = np.radians(i[lat2]-i[lat1])\n        delta_lambda = np.radians(i[long2]-i[long1])\n    \n        #a = sin\u00b2((\u03c6B - \u03c6A)\/2) + cos \u03c6A . cos \u03c6B . sin\u00b2((\u03bbB - \u03bbA)\/2)\n        a = np.sin(delta_phi \/ 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda \/ 2.0) ** 2\n    \n        #c = 2 * atan2( \u221aa, \u221a(1\u2212a) )\n        c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    \n        #d = R*c\n        d = (R * c) #in kilometers\n        i['H_Distance'] = d\n    return d","69bddc0d":"haversine_distance('Pickup Lat', 'Pickup Long', 'Destination Lat', 'Destination Long')","1acf4b54":"train.head(n=1)","f946a174":"data = [train,test]\nfor i in data:\n    i['Minute_placement'] = i['Placement - Time'].dt.minute\n    i['Hour_placement'] = i['Placement - Time'].dt.hour\n    i['Minute_confirmation'] = i['Confirmation - Time'].dt.minute\n    i['Hour_confirmation'] = i['Confirmation - Time'].dt.hour\n    i['Minute_arriv'] = i['Arrival at Pickup - Time'].dt.minute\n    i['Hour_arriv'] = i['Arrival at Pickup - Time'].dt.hour\n    i['Minute_pickup'] = i['Pickup - Time'].dt.minute\n    i['Hour_pickup'] = i['Pickup - Time'].dt.hour","834e29f4":"del train['Placement - Time']; del train['Confirmation - Time']; del train['Arrival at Pickup - Time']; del train['Pickup - Time'];\ndel test['Placement - Time']; del test['Confirmation - Time']; del test['Arrival at Pickup - Time']; del test['Pickup - Time'];","4b12107c":"print('We have {} training rows and {} test rows.'.format(train.shape[0], test.shape[0]))\nprint('We have {} training columns and {} test columns.'.format(train.shape[1], test.shape[1]))","752f4f0d":"train.head(n=1)","3798616f":"train['rating\/orders'] = train['No_of_Ratings'] \/ train['No_Of_Orders']\ntest['rating\/orders'] = test['No_of_Ratings'] \/ test['No_Of_Orders']\n\ntrain['int_avg_rating'] = train['Average_Rating'].apply(np.int64)\ntest['int_avg_rating'] = test['Average_Rating'].apply(np.int64)\n\ntrain['Rider_number_len'] = train['Rider Id'].apply(lambda x : len(x.split('_')[2]) )\ntest['Rider_number_len'] = test['Rider Id'].apply(lambda x : len(x.split('_')[2]) )\n\ntrain['User_number_len'] = train['User Id'].apply(lambda x : len(x.split('_')[2]) )\ntest['User_number_len'] = test['User Id'].apply(lambda x : len(x.split('_')[2]) )\n\n\ntrain['interaction_Rider_User'] = train['Rider Id'] + '_' + train['User Id']\ntest['interaction_Rider_User'] = test['Rider Id'] + '_' + test['User Id']\n\ntrain['interaction_User_Platform_Type'] = train['User Id'] + '_' + train['Platform Type'].astype(str)\ntest['interaction_User_Platform_Type'] = test['User Id'] + '_' + test['Platform Type'].astype(str)\n\ntrain['interaction_Rider_Average_Rating'] = train['Rider Id'] + '_' + train['Average_Rating'].astype(str)\ntest['interaction_Rider_Average_Rating'] = test['Rider Id'] + '_' + test['Average_Rating'].astype(str)\n\ntrain['interaction_Rider_Precipitation'] = train['Rider Id'] + '_' + train['Precipitation in millimeters'].astype(str)\ntest['interaction_Rider_Precipitation'] = test['Rider Id'] + '_' + test['Precipitation in millimeters'].astype(str)\n\ntrain['interaction_Temperature_Precipitation'] = train['Temperature'].astype(str) + '_' + train['Precipitation in millimeters'].astype(str)\ntest['interaction_Temperature_Precipitation'] = test['Temperature'].astype(str) + '_' + test['Precipitation in millimeters'].astype(str)","6b45134b":"train['diff_KM_Harv'] = train['Distance (KM)'] - train['H_Distance']\ntest['diff_KM_Harv'] = test['Distance (KM)'] - test['H_Distance']\n\n# Create absolute differences\ntrain['abs_lat_diff'] = (train['Destination Lat'] - train['Pickup Lat']).abs()\ntrain['abs_lon_diff'] = (train['Destination Long'] - train['Pickup Long']).abs()\ntest['abs_lat_diff'] = (test['Destination Lat'] - test['Pickup Lat']).abs()\ntest['abs_lon_diff'] = (test['Destination Long'] - test['Pickup Long']).abs()","9297c6ea":"def minkowski_distance(x1, x2, y1, y2, p):\n    return ((abs(x2 - x1) ** p) + (abs(y2 - y1)) ** p) ** (1 \/ p)\ntrain['manhattan'] = minkowski_distance(train['Pickup Long'], train['Destination Long'],\n                                       train['Pickup Lat'], train['Destination Lat'], 1)\n\ntest['manhattan'] = minkowski_distance(test['Pickup Long'], test['Destination Long'],\n                                       test['Pickup Lat'], test['Destination Lat'], 1)","2eaa5cee":"# Absolute difference in latitude and longitude\ntrain['abs_lat_diff'] = (train['Destination Lat'] - train['Pickup Lat']).abs()\ntrain['abs_lon_diff'] = (train['Destination Long'] - train['Pickup Long']).abs()\n\ntest['abs_lat_diff'] = (test['Destination Lat'] - test['Pickup Lat']).abs()\ntest['abs_lon_diff'] = (test['Destination Long'] - test['Pickup Long']).abs()\n","ecb934ab":"train['delta_lat'] = train['Destination Lat'] - train['Pickup Lat']\ntrain['delta_lon'] = train['Destination Long'] - train['Pickup Long']\n\ntest['delta_lat'] = test['Destination Lat'] - test['Pickup Lat']\ntest['delta_lon'] = test['Destination Long'] - test['Pickup Long']","bf9bbe3d":"def calculate_direction(d_lon, d_lat):\n    result = np.zeros(len(d_lon))\n    l = np.sqrt(d_lon**2 + d_lat**2)\n    result[d_lon>0] = (180\/np.pi)*np.arcsin(d_lat[d_lon>0]\/l[d_lon>0])\n    idx = (d_lon<0) & (d_lat>0)\n    result[idx] = 180 - (180\/np.pi)*np.arcsin(d_lat[idx]\/l[idx])\n    idx = (d_lon<0) & (d_lat<0)\n    result[idx] = -180 - (180\/np.pi)*np.arcsin(d_lat[idx]\/l[idx])\n    return result\n\ntrain['direction'] = calculate_direction(train['delta_lon'], train['delta_lat'])\ntest['direction'] = calculate_direction(test['delta_lon'], test['delta_lat'])","b4005e1a":"# plot histogram of directions\nplt.figure(figsize=(10,6))\ntrain['direction'].hist(bins=180)\nplt.xlabel('direction (degrees)')\nplt.title('Histogram direction (Manhattan)')\n\n","4af98200":"#len(set(train['direction'].to_list()))\nli=[]\nl = train['direction'].to_list()\nfor i in l:\n    li.append(int(i))\nlen(set(li))","3f2dd3c8":"train['direction_sign'] = np.where(train['direction']>=0, 1, 0)\ntest['direction_sign'] = np.where(test['direction']>=0, 1, 0)","9f6e0546":"train['direction_int'] = train['direction'].apply(lambda x: int(x))\ntest['direction_int'] = test['direction'].apply(lambda x: int(x))","1124ab40":"train.columns.values","0946e547":"train['pickup_week_hour'] = train['Pickup - Weekday (Mo = 1)'] * 24 + train['Hour_pickup']\ntest['pickup_week_hour'] = test['Pickup - Weekday (Mo = 1)'] * 24 + test['Hour_pickup']","b1dfa2ac":"train['pickup_lat_bin'] = np.round(train['Pickup Lat'], 2)\ntrain['pickup_long_bin'] = np.round(train['Pickup Long'], 2)\ntrain['center_lat_bin'] = np.round(train['Pickup Lat'], 2)\ntrain['center_long_bin'] = np.round(train['Pickup Long'], 2)\n#train['pickup_dt_bin'] = (train['pickup_dt'] \/\/ (3 * 3600))\ntest['pickup_lat_bin'] = np.round(test['Pickup Lat'], 2)\ntest['pickup_long_bin'] = np.round(test['Pickup Long'], 2)\ntest['center_lat_bin'] = np.round(test['Pickup Lat'], 2)\ntest['center_long_bin'] = np.round(test['Pickup Long'], 2)\n#test['pickup_dt_bin'] = (test['pickup_dt'] \/\/ (3 * 3600))","785d4a57":"#train['avg_speed_h'] = 1000 * train['H_Distance'] \/ train['Time from Pickup to Arrival']\n#train['avg_speed_km'] = 1000 * train['Distance (KM)'] \/ train['Time from Pickup to Arrival']\n#test['avg_speed_h'] = 1000 * test['H_Distance'] \/ test['Time from Pickup to Arrival']\n#test['avg_speed_km'] = 1000 * test['Distance (KM)'] \/ test['Time from Pickup to Arrival']","a5a29827":"train.describe()","0b4a8869":"city_long_border = (36.7, 37.2)\ncity_lat_border = (-1.44, -1.15)\nfig, ax = plt.subplots(ncols=2, sharex=True, sharey=True)\nax[0].scatter(train['Pickup Long'].values, train['Pickup Lat'].values,\n              color='blue', s=1, label='train', alpha=0.1)\nax[1].scatter(test['Pickup Long'].values, test['Pickup Lat'].values,\n              color='green', s=1, label='test', alpha=0.1)\nfig.suptitle('Train and test area complete overlap.')\nax[0].legend(loc=0)\nax[0].set_ylabel('latitude')\nax[0].set_xlabel('longitude')\nax[1].set_xlabel('longitude')\nax[1].legend(loc=0)\nplt.ylim(city_lat_border)\nplt.xlim(city_long_border)\nplt.show()","c2a9a472":"coords = np.vstack((train[['Pickup Lat', 'Pickup Long']].values,\n                    train[['Destination Lat', 'Destination Long']].values,\n                    test[['Pickup Long', 'Pickup Long']].values,\n                    test[['Destination Lat', 'Destination Long']].values))\n\npca = PCA().fit(coords)\ntrain['pickup_pca0'] = pca.transform(train[['Pickup Lat', 'Pickup Long']])[:, 0]\ntrain['pickup_pca1'] = pca.transform(train[['Pickup Lat', 'Pickup Long']])[:, 1]\ntrain['dropoff_pca0'] = pca.transform(train[['Destination Lat', 'Destination Long']])[:, 0]\ntrain['dropoff_pca1'] = pca.transform(train[['Destination Lat', 'Destination Long']])[:, 1]\ntest['pickup_pca0'] = pca.transform(test[['Pickup Lat', 'Pickup Long']])[:, 0]\ntest['pickup_pca1'] = pca.transform(test[['Pickup Lat', 'Pickup Long']])[:, 1]\ntest['dropoff_pca0'] = pca.transform(test[['Destination Lat', 'Destination Long']])[:, 0]\ntest['dropoff_pca1'] = pca.transform(test[['Destination Lat', 'Destination Long']])[:, 1]","6f54962f":"train['center_latitude'] = (train['Pickup Lat'].values + train['Destination Lat'].values) \/ 2\ntrain['center_longitude'] = (train['Pickup Long'].values + train['Destination Long'].values) \/ 2\ntest['center_latitude'] = (test['Pickup Lat'].values + test['Destination Lat'].values) \/ 2\ntest['center_longitude'] = (test['Pickup Long'].values + test['Destination Long'].values) \/ 2","ce0b4212":"sample_ind = np.random.permutation(len(coords))\nkmeans = MiniBatchKMeans(n_clusters=1000, batch_size=10000).fit(coords[sample_ind])","154f7343":"train['pickup_cluster'] = kmeans.predict(train[['Pickup Lat', 'Pickup Long']])\ntrain['dropoff_cluster'] = kmeans.predict(train[['Pickup Lat', 'Pickup Long']])\ntest['pickup_cluster'] = kmeans.predict(test[['Pickup Lat', 'Pickup Long']])\ntest['dropoff_cluster'] = kmeans.predict(test[['Pickup Lat', 'Pickup Long']])\nt1 = dt.datetime.now()\nprint('Time till clustering: %i seconds' % (t1 - t0).seconds)","c425533f":"fig, ax = plt.subplots(ncols=1, nrows=1)\nax.scatter(train['Pickup Long'].values, train['Pickup Lat'].values, s=100, lw=0,\n           c=train.pickup_cluster.values, cmap='tab20', alpha=0.2)\nax.set_xlim(city_long_border)\nax.set_ylim(city_lat_border)\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\nplt.show()","58b86bce":"#train['Precipitation in millimeters'] = train['Precipitation in millimeters'].fillna((train['Precipitation in millimeters'].mean()))\n#test['Precipitation in millimeters'] = test['Precipitation in millimeters'].fillna((test['Precipitation in millimeters'].mean()))\n\ntrain['Precipitation in millimeters'] = train.groupby(['Arrival at Pickup - Day of Month', 'Hour_pickup'])['Precipitation in millimeters'].transform(lambda x: x.fillna(x.mean()))\ntest['Precipitation in millimeters'] = test.groupby(['Arrival at Pickup - Day of Month', 'Hour_pickup'])['Precipitation in millimeters'].transform(lambda x: x.fillna(x.mean()))\n\n#train['Temperature'] = train['Temperature'].fillna((train['Temperature'].mean()))\n#test['Temperature'] = test['Temperature'].fillna((test['Temperature'].median()))\n\ntrain['Temperature'] = train.groupby(['Arrival at Pickup - Day of Month', 'Hour_pickup'])['Temperature'].transform(lambda x: x.fillna(x.mean()))\ntest['Temperature'] = test.groupby(['Arrival at Pickup - Day of Month', 'Hour_pickup'])['Temperature'].transform(lambda x: x.fillna(x.mean()))","76d4f659":"train['Precipitation_level'] = train['Precipitation in millimeters'].apply(lambda x: 1 if x < 1 else 0)\ntest['Precipitation_level'] = test['Precipitation in millimeters'].apply(lambda x: 1 if x < 1 else 0)","8ea890e3":"train.head(n=1)","e10a875e":"train.head(n=1)","32389f8d":"from sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ncat_features = ['User Id', 'Personal or Business', 'Rider Id', 'interaction_Rider_User', \n                'interaction_User_Platform_Type', 'interaction_Rider_Average_Rating', \n                'Average_Rating', 'Precipitation in millimeters', \n                'interaction_Rider_Precipitation', 'interaction_Temperature_Precipitation', \n                'Rider_number_len', 'User_number_len']\n\n\n# Create new columns in clicks using preprocessing.LabelEncoder()\nfor feature in cat_features:\n    train[feature+'_labels'] = le.fit_transform(train[feature])\n    \nfor feature in cat_features:\n    test[feature+'_labels'] = le.fit_transform(test[feature])\n","92b80dbd":"train.head()","708cc928":"import category_encoders as ce\nfrom category_encoders.count import CountEncoder\ncount_features = ['Personal or Business_labels', 'interaction_Rider_User', \n                'interaction_User_Platform_Type', 'interaction_Rider_Average_Rating', \n                  'Average_Rating', 'Precipitation in millimeters',\n                  'interaction_Rider_Precipitation', 'interaction_Temperature_Precipitation', \n                'Rider_number_len', 'User_number_len', 'direction_int']\n\n# Create the count encoder\ncount_enc = CountEncoder(cols=cat_features)\n\n# Learn encoding from the training set\ncount_enc.fit(train[cat_features])\n\n\n# Apply encoding to the train and validation sets\ntrain = train.join(count_enc.transform(train[cat_features]).add_suffix('_count'))\ntest = test.join(count_enc.transform(test[cat_features]).add_suffix('_count'))\n","1f68e3c5":"train.head()","6a8c480d":"len(set(train['Precipitation in millimeters'].to_list()))","43d81ec7":"import category_encoders as ce\ncat_features = ['User Id', 'Personal or Business', 'Rider Id', 'interaction_Rider_User', \n                'interaction_User_Platform_Type', 'interaction_Rider_Average_Rating', \n                'Average_Rating', 'Precipitation in millimeters',\n               'interaction_Rider_Precipitation', 'interaction_Temperature_Precipitation', \n                'Rider_number_len', 'User_number_len', 'direction_int']\nfrom category_encoders import TargetEncoder\n\n# Create the target encoder. You can find this easily by using tab completion.\n# Start typing ce. the press Tab to bring up a list of classes and functions.\ntarget_enc = ce.TargetEncoder(cols=cat_features)\n\n\n# Learn encoding from the training set. Use the 'is_attributed' column as the target.\ntarget_enc.fit(train[cat_features], train['Time from Pickup to Arrival'])\n\n# Apply encoding to the train and validation sets as new columns\n# Make sure to add `_target` as a suffix to the new columns\ntrain = train.join(target_enc.transform(train[cat_features]).add_suffix('_target'), how='left')\ntest = test.join(target_enc.transform(test[cat_features]).add_suffix('_target'), how='left')","6d66350e":"train.head(n=1)","be171ed5":"from category_encoders import CatBoostEncoder\n\ncat_features = ['User Id', 'Personal or Business', 'Rider Id', 'interaction_Rider_User', \n                'interaction_User_Platform_Type', 'interaction_Rider_Average_Rating', \n                'Average_Rating', 'Precipitation in millimeters',\n               'interaction_Rider_Precipitation', 'interaction_Temperature_Precipitation', \n                'Rider_number_len', 'User_number_len', 'direction_int']\n\n# Create the CatBoost encoder\ncb_enc = ce.CatBoostEncoder(cols=cat_features)\n\n\n# Learn encoding from the training set\ncb_enc.fit(train[cat_features], train['Time from Pickup to Arrival'])\n\n\n# Apply encoding to the train and validation sets as new columns\n# Make sure to add `_cb` as a suffix to the new columns\ntrain = train.join(cb_enc.transform(train[cat_features]).add_suffix('_cb'))\ntest = test.join(cb_enc.transform(test[cat_features]).add_suffix('_cb'))\n","f1fde1cf":"train = train.drop(['User Id', 'Personal or Business', 'Rider Id', 'interaction_Rider_User', \n                'interaction_User_Platform_Type', 'interaction_Rider_Average_Rating', \n                    'interaction_Rider_Precipitation', 'interaction_Temperature_Precipitation'], axis = 1)\ntest = test.drop(['User Id', 'Personal or Business', 'Rider Id', 'interaction_Rider_User', \n                'interaction_User_Platform_Type', 'interaction_Rider_Average_Rating', \n                  'interaction_Rider_Precipitation', 'interaction_Temperature_Precipitation'], axis = 1)","7d575d77":"plt.hist(train['Personal or Business_labels'].values, bins=100)\nplt.xlabel('Personal or Business')\nplt.ylabel('number of train records')\nplt.show()","b272f1b9":"#indexNames = train[ (train['Time from Pickup to Arrival'] < 10)].index\n#train.drop(indexNames , inplace=True)","dc391b98":"columns = train.columns.values\ncolumns","e1043d69":"label_count_features = [ 'Platform Type', \n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n       'Confirmation - Day of Month', 'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long', 'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'User Id_labels', 'Personal or Business_labels',\n       'Rider Id_labels', 'User Id_count', 'Personal or Business_count',\n       'Rider Id_count']","053fc648":"cast_features = ['Platform Type', \n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n       'Confirmation - Day of Month', 'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long',  'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'User Id_cb', 'Personal or Business_cb',\n       'Rider Id_cb']","0a33f808":"all_features = ['Platform Type', \n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n       'Confirmation - Day of Month', 'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long', \n        'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'User Id_labels', 'Personal or Business_labels',\n       'Rider Id_labels', 'User Id_count', 'Personal or Business_count',\n       'Rider Id_count', 'User Id_target', 'Personal or Business_target',\n       'Rider Id_target']","3845710e":"features_target = [ 'Platform Type', \n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n       'Confirmation - Day of Month', 'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long', \n        'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'User Id_target', 'Personal or Business_target',\n       'Rider Id_target']","a627d918":"features_count = [ 'Platform Type', \n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n       'Confirmation - Day of Month', 'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long', \n        'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'User Id_labels', 'Personal or Business_labels',\n       'Rider Id_labels', 'User Id_count', 'Personal or Business_count',\n      ]","eac2691e":"features = ['Platform Type', \n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n       'Confirmation - Day of Month', 'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long', 'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'User Id_labels', 'Personal or Business_labels',\n       'Rider Id_labels']","0ac4142f":"new_features = ['Platform Type', \n        'Placement - Weekday (Mo = 1)',\n        'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long',  'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup',  'abs_lat_diff',\n       'abs_lon_diff', 'delta_lat', 'delta_lon', 'direction',\n       'User Id_labels', 'Personal or Business_labels', 'Rider Id_labels',\n       'interaction_labels', 'center_latitude', 'center_longitude']","2ebec32d":"ff = ['Platform Type', \n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n       'Confirmation - Day of Month', 'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long',  'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'diff_KM_Harv', 'abs_lat_diff',\n       'abs_lon_diff', 'manhattan', 'delta_lat', 'delta_lon', 'direction',\n       'center_latitude', 'center_longitude', 'User Id_labels',\n       'Personal or Business_labels', 'Rider Id_labels',\n       'interaction_labels', 'User Id_count',\n       'Personal or Business_count', 'Rider Id_count',\n       'interaction_count']","cdcadfb2":"alll = [\n       'Placement - Day of Month', 'Placement - Weekday (Mo = 1)',\n        'Confirmation - Weekday (Mo = 1)',\n       \n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', \n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long',  'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n        'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup',  'abs_lat_diff',\n       'abs_lon_diff', 'manhattan', 'delta_lat', 'delta_lon',\n       'pickup_week_hour', 'pickup_lat_bin', 'pickup_long_bin',\n       'center_latitude',\n       'center_longitude', 'pickup_cluster', 'dropoff_cluster',\n       'User Id_labels', 'Personal or Business_labels', 'Rider Id_labels',\n       'interaction_labels']","7dbf104d":"# 723\n\nmany = ['pickup_long_bin',\n 'Hour_pickup',\n 'interaction_Rider_Average_Rating_count',\n 'Arrival at Pickup - Day of Month',\n 'Pickup Lat',\n 'Hour_placement',\n 'Hour_confirmation',\n 'pickup_cluster',\n 'Destination Lat',\n 'interaction_Rider_User_count',\n 'Pickup Long',\n 'interaction_Rider_User_labels',\n 'Hour_arriv',\n 'Rider Id_labels',\n 'interaction_User_Platform_Type_count',\n 'Precipitation in millimeters',\n 'Destination Long',\n 'User Id_labels',\n 'Average_Rating',\n 'pickup_pca0',\n 'delta_lat',\n 'Pickup - Day of Month',\n 'interaction_Rider_Average_Rating_labels',\n 'direction',\n 'Rider Id_count',\n 'pickup_pca1',\n 'No_Of_Orders',\n 'H_Distance',\n 'User Id_count',\n 'Average_Rating_target',\n 'delta_lon',\n 'interaction_User_Platform_Type_labels',\n 'manhattan',\n 'Minute_placement',\n 'abs_lon_diff',\n 'Minute_confirmation',\n 'No_of_Ratings',\n 'pickup_week_hour',\n 'dropoff_pca1',\n 'Distance (KM)',\n 'dropoff_pca0',\n 'center_longitude',\n 'Minute_arriv',\n 'dropoff_cluster',\n 'Minute_pickup',\n 'abs_lat_diff',\n 'Temperature',\n 'Age',\n 'diff_KM_Harv',\n 'center_latitude',\n 'Rider Id_target']","4dd6ea6a":"plt.figure(1)\ncorr = train[many].corr()\nsns.heatmap(corr)","903ab558":"#feature_cols = new_features\nfeature_cols = many\n\nvalid_fraction = 0.1\ntrain_srt = train #.sort_values('click_time')\nvalid_rows = int(len(train_srt) * valid_fraction)\ntrain = train_srt[:-valid_rows * 2]\n# valid size == test size, last two sections of the data\nvalid = train_srt[-valid_rows * 2:]\ntest = test","d556778e":"import lightgbm as lgb\n\ndtrain = lgb.Dataset(train[feature_cols], label=train['Time from Pickup to Arrival'])\ndvalid = lgb.Dataset(valid[feature_cols], label=valid['Time from Pickup to Arrival'])\n#test = lgb.Dataset(test[feature_cols], label=test['Time from Pickup to Arrival'])\n\nparam = {'num_leaves': 31, 'objective': 'regression', 'learning_rate': 0.03,\n              \"boosting\": \"gbdt\", \"feature_fraction\": 0.7}\nparam['metric'] = 'rmse'\nparam[\"max_depth\"] = 5\nparam[\"verbosity\"] = 0\n#param[\"nthread\"] = -1\nparam[\"min_child_weight\"] = 1\n#param[\"bagging_fraction\"] = 0.8\nparam[\"bagging_seed\"] = 2017\n\nnum_round = 5000\nbst = lgb.train(param, dtrain, num_round, valid_sets=[dvalid], early_stopping_rounds=50)","8d601c70":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# sorted(zip(clf.feature_importances_, X.columns), reverse=True)\nfeature_imp = pd.DataFrame(sorted(zip(bst.feature_importance(),train[many].columns)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","d5b69e6e":"feature_imp","6b047224":"many = feature_imp['Feature'].to_list()\nmany[5:]","91f679a2":"ypred = bst.predict(test[feature_cols])\nsample_submission = pd.read_csv('..\/input\/samplesubmission\/SampleSubmission.csv')\nsample_submission['Time from Pickup to Arrival'] = ypred\nsample_submission.to_csv('submission1.csv', index=False, float_format='%.4f')\n","7f36f6ad":"sample_submission.head(n=20)","86de31b7":"featuress = many\ny = train['Time from Pickup to Arrival'].values\nXtr, Xv, ytr, yv = train_test_split(train[featuress].values, y, test_size=0.2, random_state=1987)\ndtrain = xgb.DMatrix(Xtr, label=ytr)\ndvalid = xgb.DMatrix(Xv, label=yv)\ndtest = xgb.DMatrix(test[featuress].values)\nwatchlist = [(dtrain, 'train'), (dvalid, 'valid')]\n\n# Try different parameters! My favorite is random search :)\nxgb_pars = {'min_child_weight': 1, 'eta': 0.3, 'colsample_bytree': 0.3, 'max_depth': 3,\n            'subsample': 0.8, 'lambda': 0.03, 'nthread': -1, 'booster' : 'gbtree', 'silent': 1,\n            'eval_metric': 'rmse', 'objective': 'reg:linear'}","73859f6f":"# You could try to train with more epoch\nmodel = xgb.train(xgb_pars, dtrain, 1000, watchlist, early_stopping_rounds=500,\n                  maximize=False, verbose_eval=10)","b17520fc":"print('Modeling RMSLE %.5f' % model.best_score)\nt1 = dt.datetime.now()\nprint('Training time: %i seconds' % (t1 - t0).seconds)","177bf977":"feature_importance_dict = model.get_fscore()\nfs = ['f%i' % i for i in range(len(featuress))]\nf1 = pd.DataFrame({'f': list(feature_importance_dict.keys()),\n                   'importance': list(feature_importance_dict.values())})\nf2 = pd.DataFrame({'f': fs, 'feature_name': featuress})\nfeature_importance = pd.merge(f1, f2, how='right', on='f')\nfeature_importance = feature_importance.fillna(0)\n\nfeature_importance[['feature_name', 'importance']].sort_values(by='importance', ascending=False)","b940bf39":"**Imputing missing values**\n\n","7fc40fdb":"# Clustring","4859506e":"# Drop Catecory Columns","a8c5ae16":"# Target encoding\n","df6a269d":"# 725\nmany = ['Platform Type', 'Placement - Day of Month',\n       'Placement - Weekday (Mo = 1)', 'Confirmation - Day of Month',\n       'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long',\n       'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'diff_KM_Harv', 'abs_lat_diff', 'abs_lon_diff',\n       'manhattan', 'delta_lat', 'delta_lon', 'pickup_week_hour',\n       'pickup_lat_bin', 'pickup_long_bin', 'center_lat_bin',\n       'center_long_bin', 'pickup_pca0', 'pickup_pca1', 'dropoff_pca0',\n       'dropoff_pca1', 'center_latitude', 'center_longitude',\n       'pickup_cluster', 'dropoff_cluster', 'User Id_labels',\n       'Personal or Business_labels', 'Rider Id_labels',\n       'interaction_Rider_User_labels',\n       'interaction_User_Platform_Type_labels',\n       'interaction_Rider_Average_Rating_labels', 'User Id_count',\n       'Personal or Business_count', 'Rider Id_count',\n       'interaction_Rider_User_count',\n       'interaction_User_Platform_Type_count',\n       'interaction_Rider_Average_Rating_count',\n       'Rider Id_target',\n       'Average_Rating_target']","537379da":"# CatBoost Encoding\n","7db4eae9":"# LGBM Model","9f53c93e":"We can calulate the distance in a sphere when latitudes and longitudes are given by Haversine formula\n\n**haversine(\u03b8) = sin\u00b2(\u03b8\/2)**","b756c342":"# CountEncoder","ed723307":"# Data Processing\n\n**Outliers**\n\nLet's explore if there is some outliers","9cd499b4":"# Using LabelEncoder","5fb4e6a8":"# Feature Egineering","b9090176":"**Check remaining missing values in Precipitation in millimeters**","c3f91bbc":"# Map","1c7a7b90":"# 726\nmany = ['Platform Type', 'Placement - Day of Month',\n       'Placement - Weekday (Mo = 1)', 'Confirmation - Day of Month',\n       'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long',\n       'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'diff_KM_Harv', 'abs_lat_diff', 'abs_lon_diff',\n       'manhattan', 'delta_lat', 'delta_lon', 'pickup_week_hour',\n       'pickup_lat_bin', 'pickup_long_bin', 'center_lat_bin',\n       'center_long_bin', 'pickup_pca0', 'pickup_pca1', 'dropoff_pca0',\n       'dropoff_pca1', 'center_latitude', 'center_longitude',\n       'pickup_cluster', 'dropoff_cluster', 'User Id_labels',\n       'Personal or Business_labels', 'Rider Id_labels',\n       'interaction_Rider_User_labels',\n       'interaction_User_Platform_Type_labels',\n       'interaction_Rider_Average_Rating_labels', 'User Id_count',\n       'Personal or Business_count', 'Rider Id_count',\n       'interaction_Rider_User_count',\n       'interaction_User_Platform_Type_count',\n       'interaction_Rider_Average_Rating_count',\n       'Rider Id_target',\n       'Average_Rating_target']","10000b10":"# 723\n\nmany = ['Platform Type', 'Placement - Day of Month',\n       'Placement - Weekday (Mo = 1)', 'Confirmation - Day of Month',\n       'Confirmation - Weekday (Mo = 1)',\n       'Arrival at Pickup - Day of Month',\n       'Arrival at Pickup - Weekday (Mo = 1)', 'Pickup - Day of Month',\n       'Pickup - Weekday (Mo = 1)', 'Distance (KM)', 'Temperature',\n       'Precipitation in millimeters', 'Pickup Lat', 'Pickup Long',\n       'Destination Lat', 'Destination Long',\n       'No_Of_Orders', 'Age',\n       'Average_Rating', 'No_of_Ratings', 'H_Distance',\n       'Minute_placement', 'Hour_placement', 'Minute_confirmation',\n       'Hour_confirmation', 'Minute_arriv', 'Hour_arriv', 'Minute_pickup',\n       'Hour_pickup', 'diff_KM_Harv', 'abs_lat_diff', 'abs_lon_diff',\n       'manhattan', 'delta_lat', 'delta_lon', 'pickup_week_hour',\n       'pickup_lat_bin', 'pickup_long_bin', 'center_lat_bin',\n       'center_long_bin', 'pickup_pca0', 'pickup_pca1', 'dropoff_pca0',\n       'dropoff_pca1', 'center_latitude', 'center_longitude',\n       'pickup_cluster', 'dropoff_cluster', 'User Id_labels',\n       'Personal or Business_labels', 'Rider Id_labels',\n       'interaction_Rider_User_labels',\n       'interaction_User_Platform_Type_labels',\n       'interaction_Rider_Average_Rating_labels', 'User Id_count',\n       'Personal or Business_count', 'Rider Id_count',\n       'interaction_Rider_User_count',\n       'interaction_User_Platform_Type_count',\n       'interaction_Rider_Average_Rating_count',\n       'Rider Id_target',\n       'Average_Rating_target']","93408c84":"I will change NaN values for **Precipitation in millimeters** feature with **0**\n\nTemperature values are **very distrubuted** in the same day, so we will replace **NaN** values with the **average of the column**"}}