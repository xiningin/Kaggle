{"cell_type":{"43491658":"code","7ef4e292":"code","39b3fbaf":"code","159c46fe":"code","7df698e5":"code","d2ba0f45":"code","42999e79":"code","2da278af":"code","1c30839b":"code","7e2b9dc0":"code","6f8644f9":"markdown","0b660ed8":"markdown","21b421a8":"markdown"},"source":{"43491658":"# Generic Libraries\nimport numpy as np\nimport pandas as pd\n\n# Visualisation Libraries\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport warnings\nfrom matplotlib import cm\n\npd.plotting.register_matplotlib_converters()\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\npd.set_option('display.max_columns', 500)\nwarnings.filterwarnings(\"ignore\")\n\nfrom tabulate import tabulate\n","7ef4e292":"#Data Load\nurl = '..\/input\/movie-data\/imdb_movie_data.csv'\ndata = pd.read_csv(url, header='infer')","39b3fbaf":"data = data.drop(columns=['Rank','Description','Actors'], axis=1)","159c46fe":"data.head()","7df698e5":"#Checking for Null Values\ndata.isna().sum()","d2ba0f45":"#Dropping Records with missing Revenue\ndata = data.dropna()","42999e79":"#Stats Summary\ndata.describe().transpose()","2da278af":"#Function to show the details for specific year\n\nlevels = [\"HIGH\", \"LOW\"]\nmax_info = []\nmin_info = []\nall_info = []\n\ndef details(x):\n    df_details = pd.DataFrame(data[data['Year']==x])\n    \n    # -- Revenue Analysis --\n    max_rev = df_details['Revenue'].max()\n    min_rev = df_details['Revenue'].min()\n    \n    # -- Rating Analysis --\n    max_rat = df_details['Rating'].max()\n    min_rat = df_details['Rating'].min()\n    \n   \n    for i, r in df_details.iterrows():\n        if r['Revenue'] == max_rev:\n            max_info.append(r['Title'])\n        elif r['Revenue'] == min_rev:   \n            min_info.append(r['Title'])\n        elif r['Rating'] == max_rat:\n            max_info.append(r['Title'])\n        elif r['Rating'] == min_rat:   \n            min_info.append(r['Title'])\n            \n    if len(max_info) > 2:\n        max_info.pop(2)\n    else:\n        pass\n        \n    if len(min_info) > 2:\n        min_info.pop(2)\n    else:\n        pass\n        \n    max_info.insert(0,\"HIGH\")\n    min_info.insert(0,\"LOW\")\n    \n    all_info = [max_info, min_info]\n    print(tabulate(all_info, headers=['', 'Revenue','Rating']))\n    \n    max_info.clear()\n    min_info.clear()\n    all_info.clear()\n","1c30839b":"details(2015)","7e2b9dc0":"details(2016)","6f8644f9":"## Analysis","0b660ed8":"**Not interested in Rank, Description, Actors columns**","21b421a8":"### Matrix displaying the High - Revenue \/ Rating & Low - Revenue \/ Rating movie title"}}