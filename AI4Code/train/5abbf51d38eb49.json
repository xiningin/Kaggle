{"cell_type":{"21ca7f61":"code","8a2b5785":"code","66868479":"code","8ad090f8":"code","0150a748":"code","be533092":"code","c44eba03":"code","4c689d95":"code","42633cc2":"code","49c0a6b0":"code","55fe53d8":"code","3c765b5c":"code","dbc328c2":"code","a468cb21":"code","f2fe5038":"code","cce189ba":"code","ec3ea7e0":"code","aa0f83f3":"code","23f39e86":"code","2d4306e4":"code","0c034e0b":"code","bdc45e49":"code","ac37251b":"code","9ef4acae":"code","af89f179":"code","e629bbe7":"code","128f6c74":"code","3b480fe1":"code","7bf09bd9":"code","5f27337d":"code","1e9db0f2":"code","d78461bc":"code","3f5bf2cf":"code","dc5846b0":"code","8eb6e1e2":"code","6deed227":"code","230a1a00":"code","50518c9c":"code","ec98a27a":"code","9ebe8f55":"code","88644d64":"code","fe794286":"markdown","adf21dc7":"markdown","ad6d98e9":"markdown","2e7929b3":"markdown","b1af144c":"markdown","0f700adb":"markdown","6312e77e":"markdown","3e0cdbff":"markdown","10627265":"markdown","0efc59fc":"markdown","97122c9b":"markdown","bf1d2754":"markdown","2639f287":"markdown","048bfb37":"markdown","b0e74ab3":"markdown","64706b35":"markdown","08c9e394":"markdown","0fdf452a":"markdown","7b24bb1c":"markdown","732ae5e6":"markdown","c4b49ae7":"markdown","43e0f31b":"markdown","b94595f1":"markdown","709729e5":"markdown","5ffa5f0d":"markdown","feee7c6e":"markdown","1bc7b596":"markdown","ce76e8e7":"markdown","b7764a26":"markdown","bd0b8285":"markdown","08fa38cd":"markdown","68592f72":"markdown"},"source":{"21ca7f61":"# Importing Pandas\nimport pandas as pd","8a2b5785":"# Simplest way without index lables\nfruits = pd.DataFrame({'Apples':[30, 50, 40], \n                       'Bananas':[21, 10, 15]})\n\nfruits","66868479":"# Creating dataFrames with user defined indexes\nfruits_1 = pd.DataFrame({'Apples':[30, 50, 40], \n                       'Bananas':[21, 10, 15]},\n                       index=['January', 'February', 'March'])\n\nfruits_1","8ad090f8":"# Another way to do above\nfruits_2 = pd.DataFrame([[60, 35], [5, 15], [21, 36]], \n                      columns=['Apples', 'Bananas'],\n                      index=['April', 'May', 'June'])\nfruits_2","0150a748":"# Another way with simplified columns\nitems_AB = pd.DataFrame([[30, 21], [50, 10], [40, 15]], \n                      columns=list('AB'),\n                      index=['January', 'February', 'March'])\nitems_AB","be533092":"# Always create a variable to save the new dataframe after append()\nfruits = fruits_1.append(fruits_2)\nfruits","c44eba03":"# Does not append the orginal dataframe\nfruits_1","4c689d95":"grocery = fruits_1.append(items_AB)\ngrocery","42633cc2":"fruits","49c0a6b0":"fruits['Orange'] = [10,56,78,23,78,36]\nfruits","55fe53d8":"#insert() gives the ability to add column to any location\nfruits.insert(0, 'Pineapple', [1,5,0,2,8,'NaN'])\nfruits","3c765b5c":"# Simple pandas series by using a list\npd.Series([1981, 5.2, 'Ann', 20000])","dbc328c2":"# Index can be created simila to DataFrames\n# Name can be allocated to entire series using 'name' attribute\npd.Series([1981, 5.2, 'Ann', 2000],\n         index=['Birth Year', 'Height', 'First Name', 'Paid'],\n         name='Customer Details')","a468cb21":"# Reading a CSV file\nfile_path = '..\/input\/wine-reviews\/winemag-data-130k-v2.csv'\nwine_reviews = pd.read_csv(file_path)\nwine_reviews","f2fe5038":"# Aks python to take the index file available in the CSV\n# There are more than 30 parameters similat to 'index_col'\nwine_reviews = pd.read_csv(file_path, index_col=0)\nwine_reviews","cce189ba":"# Remember not shape()\nwine_reviews.shape","ec3ea7e0":"# Remember this is a method\nwine_reviews.head(3)","aa0f83f3":"wine_reviews.describe()","23f39e86":"wine_reviews['price'].mean()\n#wine_reviews['price'].count()\n# wine_reviews['price'].std()\n# wine_reviews['price'].min()\n# wine_reviews['price'].max()","2d4306e4":"wine_reviews.columns","0c034e0b":"wine_reviews.columns[0]","bdc45e49":"wine_reviews.country.unique()","ac37251b":"wine_reviews.country.value_counts()","9ef4acae":"# Straight forward way\nwine_reviews.country.head()","af89f179":"# Access similar to dictionary value\nwine_reviews['country'].head()","e629bbe7":"# Access data using index\nwine_reviews['country'][1]","128f6c74":"# Selecting the 5th row\nwine_reviews.iloc[5]","3b480fe1":"# Selecting fifth (index 4) column\nwine_reviews.iloc[:, 4]","7bf09bd9":"# Begining to 3rd row\nwine_reviews.iloc[:3, [4,5]]","5f27337d":"# You can pass a list of specific number of rows \nwine_reviews.iloc[[5,8,7,15],0]","1e9db0f2":"wine_reviews.loc[5, ['country', 'province', 'region_1', 'region_2']]","d78461bc":"# Set 'winery' as the new index\nwine_reviews.set_index('winery')","3f5bf2cf":"# AND (&) logical operator\nwine_reviews.loc[(wine_reviews.country == 'Italy') & (wine_reviews.points >= 99)]","dc5846b0":"# OR (|) logical operator\nwine_reviews.loc[(wine_reviews.country == 'Italy') | (wine_reviews.points >= 99)]","8eb6e1e2":"# Selection based on the ountry list ['Italy', 'France', 'Spain']\nwine_reviews.loc[wine_reviews.country.isin(['Italy', 'France', 'Spain'])]","6deed227":"# Select the entries where price is null\nwine_reviews.loc[wine_reviews.price.isnull()]","230a1a00":"# Select the entries where price is NOT null\nwine_reviews.loc[wine_reviews.price.notnull()]","50518c9c":"# Assigning data is straight forward\nwine_reviews.loc[wine_reviews.price.isnull()] = 0\nwine_reviews.loc[wine_reviews.price.isnull()]","ec98a27a":"price = wine_reviews.price\nprice","9ebe8f55":"median = wine_reviews.price.median()\nmedian","88644d64":"median_price = wine_reviews.price - wine_reviews.price.mean()\nmedian_price","fe794286":"## 2. Series\n\n* A Series is a sequence of data values. \n* Consider, If a DataFrame is a table, a Series is a list. \n* You can also consider a series as a single column DataFrame\n* DataFrame can be considered as a bunch of Series \"glued together\". ","adf21dc7":"Index is not immutable, i.e. we can manipulate it","ad6d98e9":"**This notebook is an exercise in the [Pandas](https:\/\/www.kaggle.com\/learn\/pandas) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/residentmario\/creating-reading-and-writing).**\n\n---\n","2e7929b3":"# Reading Data Files","b1af144c":"## Maps\n\nCreate new columns based on existing columns. For an example choosing wines based on the rating\/price ratio","0f700adb":"## uniquie()\nTo see a list of unique values ","6312e77e":"Error: In following cse, eventhough indexes are same, new columns will not append to the same position.","3e0cdbff":"There are two core objects in pandas: the DataFrame and the Series.","10627265":"## head()\n\nUse 'head()' method to check first few rows of the data. Required number of rows can be passed as a parameter","0efc59fc":"## 1. DataFrame\n\n* A DataFrame is a table like MS EXCEL. \n* It contains an array of individual entries, each has a certain value. Each entry corresponds to a row (or record) and a column.\n* We are using the pd.DataFrame() constructor to generate these DataFrame objects","97122c9b":"## describe()\nSummarize data with statistics. Describe() will automatically identify numeric data types when geenrating the summary (type aware)","bf1d2754":"## Append rows","2639f287":"Conditional selection","048bfb37":"# Assigning Data","b0e74ab3":"# Data Access","64706b35":"**Pandas has its own access operators 'loc' and 'iloc'. Both loc and iloc ROW first, COLUMN second","08c9e394":"## value_counts()\nTo see a list of unique values and how often they occur in the dataset","0fdf452a":"How to use : symbol to slice and dice\n* : >> all\n* :3 >> begining to 3\n* 3: >> starting from item 3 till end\n* -5: >> last 5 items","7b24bb1c":"'isnull()' and 'notnull()' to find out null values and not null values","732ae5e6":"## Replacing null values","c4b49ae7":"## column()\n\nList all coumns as a list","43e0f31b":"# Creating Data","b94595f1":"## 2. iloc - index based selection\n\nWhen we use iloc we treat the dataset like a big matrix (a list of lists)","709729e5":"Individual value can be accessible using the column name and index similar to following","5ffa5f0d":"## Column calculations","feee7c6e":"## count(), mean(), std(), min(), max()\n\nIndividual statistics can be recall as follows\n\n","1bc7b596":"In Python, we can access the property of an object by accessing it as an attribute.","ce76e8e7":"## Append Column","b7764a26":"## shape\n\nUse 'shape' attribute to check the dimensions of the DataFrame (#rows, #columns)","bd0b8285":"## 3. loc - label based selection\n\n Since your dataset usually has meaningful indices, it's usually easier to do things using loc instead. ","08fa38cd":"'isin([list])' to check agains a list","68592f72":"## 1. Native selection"}}