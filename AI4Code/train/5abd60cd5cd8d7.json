{"cell_type":{"deb5742d":"code","7d04299b":"code","dcc28694":"code","22d64872":"code","f3c8b2a4":"code","4e6d6f6b":"code","f6881ba7":"code","cbb80f16":"code","3d20017c":"code","035f75ba":"code","cf08be43":"code","2e7aa3b0":"code","cbeb8965":"code","4d1088aa":"code","74055d64":"code","19705690":"code","9ab3bbca":"code","b87e5bcb":"code","21fbf974":"code","e02e01b0":"code","cb24a29f":"code","35b72b2e":"code","d507aa82":"code","f073bbd1":"code","1988fb63":"code","e83ccc67":"code","f69f0f65":"code","b98dd1c7":"code","adf7d7fc":"code","4b1bda83":"code","3d74b7bd":"code","81c78e2b":"code","6936d5ba":"code","9243ecc4":"code","2f743c58":"code","77e8a541":"code","009ac502":"code","1d993ef9":"code","f2f5ae7c":"code","3ee1a161":"code","14a738bb":"code","2954725c":"code","19a98a1e":"code","987a2b08":"code","410d1aef":"code","82c65a4d":"code","df9eb0b4":"code","d81dcfe2":"code","b9233217":"code","0143df10":"code","bd150d55":"code","b969d560":"code","30a14bdd":"code","c439272e":"code","c1403a78":"code","6033ee93":"code","47dc581d":"code","05f71464":"code","1b6185bd":"code","04d5bd30":"code","4d5c4ae2":"code","8ff104f9":"code","b1b68817":"code","bfbe5cf4":"code","62fc2619":"code","684ffad4":"code","307ef72a":"code","f813221c":"code","aef0c5db":"code","c6087738":"code","c00b5d85":"code","fd1a0378":"code","346cef05":"code","5171d8f6":"markdown","e88af8d5":"markdown","858b831c":"markdown","e411308d":"markdown","dd13fe5c":"markdown","243ea113":"markdown","d8775969":"markdown","07d12569":"markdown","5cc74d2b":"markdown","ac124f17":"markdown","787dfd6c":"markdown","d898c5e8":"markdown","fbdbd54a":"markdown","3daa5a0a":"markdown","3c12d2db":"markdown","f1922baa":"markdown","03604bef":"markdown","b0c0a261":"markdown","da372a68":"markdown","a88893c8":"markdown","e5f66703":"markdown","91be1870":"markdown"},"source":{"deb5742d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import sqrt\n#pd.options.mode.use_inf_as_na = True","7d04299b":"import os\nos.listdir('..\/input')","dcc28694":"pubg_train = pd.read_csv('..\/input\/train_V2.csv')\npubg_test = pd.read_csv('..\/input\/test_V2.csv') \n#Working with only 1000000 rows.\n\n#pubg_train = pd.read_csv('..\/input\/train_V2.csv',nrows=100000)\n#pubg_test = pd.read_csv('..\/input\/test_V2.csv',nrows=100000) ","22d64872":"print(pubg_train.head())\npubg_train.isnull().sum()","f3c8b2a4":"#pubg_train.loc[pubg_train['winPlacePerc'] == np.nan]\npubg_train.dropna(how='any',inplace=True)\n","4e6d6f6b":"pubg_train['matchType'].value_counts()","f6881ba7":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()  \npubg_train['matchType'] = le.fit_transform(pubg_train['matchType'])\npubg_test['matchType'] = le.fit_transform(pubg_test['matchType'])","cbb80f16":"pubg_train['Id']= pd.factorize(pubg_train.Id)[0]\npubg_train['groupId']= pd.factorize(pubg_train.groupId)[0]\npubg_train['matchId']= pd.factorize(pubg_train.matchId)[0]\n","3d20017c":"submission = pubg_test.loc[:,['Id']]","035f75ba":"pubg_test['Id']= pd.factorize(pubg_test.Id)[0]\npubg_test['groupId']= pd.factorize(pubg_test.groupId)[0]\npubg_test['matchId']= pd.factorize(pubg_test.matchId)[0]\n","cf08be43":"pubg_train.head()","2e7aa3b0":"#pubg_train.groupby('winPlacePerc').size()\n#pubg_train.skew()","cbeb8965":"pubg_train.info(memory_usage='deep')","4d1088aa":"#Function to optimize the memory by downgrading the datatype to optimal length\ndef mem_usage(pandas_obj):\n    if isinstance(pandas_obj,pd.DataFrame):\n        usage_b = pandas_obj.memory_usage(deep=True).sum()\n    else: # we assume if not a df it's a series\n        usage_b = pandas_obj.memory_usage(deep=True)\n    usage_mb = usage_b \/ 1024 ** 2 # convert bytes to megabytes\n    return \"{:03.2f} MB\".format(usage_mb)\n\n","74055d64":"dtype_list=[]\nfor col in pubg_train.columns:\n    dtype_list.append(pubg_train[col].dtypes)\ndtype_list=list(set(dtype_list))\nprint(\"Total Datatypes present: %s \"%dtype_list)\n","19705690":"# Analysing for Train dataset\nfor dtype in dtype_list:\n    \n    if 'int' in str(dtype):\n        print(\"Analyse %s\"%str(dtype))\n        df_int=pubg_train.select_dtypes(include=[str(dtype)])\n        converted_int = df_int.apply(pd.to_numeric,downcast='unsigned')\n    \n        print(mem_usage(df_int))\n        print(mem_usage(converted_int))\n        \n    elif 'float' in str(dtype):\n        print(\"Analyse %s\"%str(dtype))\n        df_float = pubg_train.select_dtypes(include=[str(dtype)])\n        converted_float = df_float.apply(pd.to_numeric,downcast='float')\n        \n        print(mem_usage(df_float))\n        print(mem_usage(converted_float))\n","9ab3bbca":"print(\"Memory Usage of Original dataset: %s\"%mem_usage(pubg_train))\npubg_train[converted_int.columns] = converted_int\npubg_train[converted_float.columns] = converted_float\nprint(\"Memory Usage of Optimized dataset: %s\"%mem_usage(pubg_train))","b87e5bcb":"pubg_train.info(memory_usage='deep')","21fbf974":"# Analysing for Test dataset\nfor dtype in dtype_list:\n    \n    if 'int' in str(dtype):\n        print(\"Analyse %s\"%str(dtype))\n        df_int=pubg_test.select_dtypes(include=[str(dtype)])\n        converted_int = df_int.apply(pd.to_numeric,downcast='unsigned')\n    \n        print(mem_usage(df_int))\n        print(mem_usage(converted_int))\n        \n    elif 'float' in str(dtype):\n        print(\"Analyse %s\"%str(dtype))\n        df_float = pubg_test.select_dtypes(include=[str(dtype)])\n        converted_float = df_float.apply(pd.to_numeric,downcast='float')\n        \n        print(mem_usage(df_float))\n        print(mem_usage(converted_float))","e02e01b0":"print(\"Memory Usage of Original dataset: %s\"%mem_usage(pubg_test))\npubg_test[converted_int.columns] = converted_int\npubg_test[converted_float.columns] = converted_float\n\nprint(\"Memory Usage of Optimized dataset: %s\"%mem_usage(pubg_test))","cb24a29f":"\npubg_train['playerJoined'] = pubg_train.groupby('matchId')['matchId'].transform('count')\npubg_test['playerJoined']=pubg_test.groupby('matchId')['matchId'].transform('count')\n\nplt.figure(figsize=(15,10))\nsns.countplot(x='playerJoined', data=pubg_train[pubg_train['playerJoined']>49])\nplt.title(\"Players Joined\",fontsize=15)\nplt.show()\n","35b72b2e":"pubg_train['headShotsPerKill'] = pubg_train['headshotKills']\/pubg_train['kills']\npubg_test['headShotsPerKill'] = pubg_test['headshotKills']\/pubg_test['kills']\n\npubg_train['headShotsPerKill'].fillna(0,inplace=True)\npubg_test['headShotsPerKill'].fillna(0,inplace=True)\n\npubg_train['headShotsPerKill'].replace(np.inf,0,inplace=True)\npubg_test['headShotsPerKill'].replace(np.inf,0,inplace=True)","d507aa82":"pubg_train['distTravelled'] = pubg_train['rideDistance']+pubg_train['swimDistance']+pubg_train['walkDistance']\npubg_test['distTravelled'] = pubg_test['rideDistance']+pubg_test['swimDistance']+pubg_test['walkDistance']\n\n#pubg_train.head()","f073bbd1":"pubg_train['itemsUsed'] = pubg_train['heals']+pubg_train['boosts']\npubg_test['itemsUsed'] = pubg_test['heals']+pubg_test['boosts']","1988fb63":"#pubg_train['roadKillsperRide'] =  pubg_train['roadKills']\/pubg_train['rideDistance']\n#pubg_test['roadKillsperRide'] =  pubg_test['roadKills']\/pubg_test['rideDistance']\n\n\n#pubg_train['roadKillsperRide'].replace([np.inf,-np.inf],np.nan)\n#pubg_train['roadKillsperRide'].fillna(0,inplace=True)\n#pubg_test['roadKillsperRide'].fillna(0,inplace=True)\n#pubg_train['roadKillsperRide'].replace(np.inf,0,inplace=True)\n#pubg_test['roadKillsperRide'].replace(np.inf,0,inplace=True)\n#pubg_train.head()","e83ccc67":"#pubg_train['roadKillsperRide_log'] = np.log(1+pubg_train.roadKillsperRide)\n#pubg_test['roadKillsperRide_log'] = np.log(1+pubg_test.roadKillsperRide)\n#pubg_train.drop(columns='roadKillsperRide_log',inplace=True)","f69f0f65":"pubg_train.skew()","b98dd1c7":"#pubg_train['headShotsPerKill'].unique()\n#type(0.73684211)\n#type(pubg_train['headShotsPerKill'][12])\n#pubg_train['headShotsPerKill'][12]","adf7d7fc":"pubg_train['teamwork']=pubg_train['revives']+pubg_train['assists']\npubg_test['teamwork']=pubg_test['revives']+pubg_test['assists']\n#pubg_train.head()","4b1bda83":"pubg_train['killpoints_norm'] = (pubg_train['killPoints']*pubg_train['playerJoined'])\/100\npubg_train['damageDealt_norm']= (pubg_train['damageDealt']*pubg_train['playerJoined'])\/100\npubg_train['kills_norm'] = (pubg_train['kills']*pubg_train['playerJoined'])\/100\npubg_train['rankPoints_norm']= (pubg_train['rankPoints']*pubg_train['playerJoined'])\/100\npubg_train['roadKills_norm']= (pubg_train['roadKills']*pubg_train['playerJoined'])\/100\npubg_train['teamKills_norm']= (pubg_train['teamKills']*pubg_train['playerJoined'])\/100\npubg_train['winPoints_norm']= (pubg_train['winPoints']*pubg_train['playerJoined'])\/100\npubg_train['headShotsPerKill_norm']= (pubg_train['headShotsPerKill']*pubg_train['playerJoined'])\/100\n#pubg_train['roadKillsperRide_norm']= (pubg_train['roadKillsperRide']*pubg_train['playerJoined'])\/100\npubg_train['teamwork_norm']= (pubg_train['teamwork']*pubg_train['playerJoined'])\/100","3d74b7bd":"pubg_train['roadKills_log'] = np.log(1+pubg_train.roadKills)\npubg_test['roadKills_log'] = np.log(1+pubg_test.roadKills)","81c78e2b":"pubg_test['killpoints_norm'] = (pubg_test['killPoints']*pubg_test['playerJoined'])\/100\npubg_test['damageDealt_norm']= (pubg_test['damageDealt']*pubg_test['playerJoined'])\/100\npubg_test['kills_norm'] = (pubg_test['kills']*pubg_test['playerJoined'])\/100\npubg_test['rankPoints_norm']= (pubg_test['rankPoints']*pubg_test['playerJoined'])\/100\npubg_test['roadKills_norm']= (pubg_test['roadKills']*pubg_test['playerJoined'])\/100\npubg_test['teamKills_norm']= (pubg_test['teamKills']*pubg_test['playerJoined'])\/100\npubg_test['winPoints_norm']= (pubg_test['winPoints']*pubg_test['playerJoined'])\/100\npubg_test['headShotsPerKill_norm']= (pubg_test['headShotsPerKill']*pubg_test['playerJoined'])\/100\n#pubg_test['roadKillsperRide_norm']= (pubg_test['roadKillsperRide']*pubg_test['playerJoined'])\/100\npubg_test['teamwork_norm']= (pubg_test['teamwork']*pubg_test['playerJoined'])\/100","6936d5ba":"\npubg_train['vehicleDestroys_log'] = np.log(1+pubg_train.vehicleDestroys)\npubg_test['vehicleDestroys_log'] = np.log(1+pubg_test.vehicleDestroys)\npubg_train['swimDistance_log']=np.log(1+pubg_train.swimDistance)\npubg_test['swimDistance_log']=np.log(1+pubg_test.swimDistance)\npubg_train['teamKills_log']=np.log(1+pubg_train.teamKills)\npubg_test['teamKills_log']=np.log(1+pubg_test.teamKills)\n\n\n\n#pubg_train.head()\n\n#pubg_train.drop(columns=['killPoints','damageDealt','kills','rankPoints','roadKills','teamKills','winPoints','headShotsPerKill','roadKillsperRide','teamwork'],inplace=True);\n#pubg_test.drop(columns=['killPoints','damageDealt','kills','rankPoints','roadKills','teamKills','winPoints','headShotsPerKill','roadKillsperRide','teamwork'],inplace=True);\n","9243ecc4":"#pubg_train.skew()\n","2f743c58":"pubg_train.drop(columns=['Id','groupId','matchId',],inplace=True)\npubg_test.drop(columns=['Id','groupId','matchId',],inplace=True)","77e8a541":"pubg_train.head()","009ac502":"pubg_test.head()","1d993ef9":"from sklearn.model_selection import train_test_split\n\nX=pubg_train.drop(['winPlacePerc'],axis=1)\ny=pubg_train['winPlacePerc']\n\n","f2f5ae7c":"#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=22,shuffle=True,stratify=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=22,shuffle=True)","3ee1a161":"print('X_train.shape %s, X_test.shape %s\\ny_train.shape %s, y_test.shape %s'%(X_train.shape,X_test.shape,y_train.shape,y_test.shape))","14a738bb":"from sklearn.preprocessing import StandardScaler","2954725c":"scaler = StandardScaler(copy=False)\n# Fit only to the training data\nscaler.fit(X_train)\nScaled_X_train = scaler.transform(X_train)\nScaled_X_test = scaler.transform(X_test)","19a98a1e":"'''scaler = StandardScaler()\nScaled_X_train = scaler.fit_transform(X_train)\nScaled_X_test = scaler.fit_transform(X_test)'''","987a2b08":"#X_train['roadKillsperRide'].max()\n#y_train.max()\n#np.isnan(np.min(X_train))\n#np.max(X_train['roadKillsperRide'])\n#type(X_train)\n#pubg_train.info()","410d1aef":"from sklearn import model_selection\n#performance metrics\n\n#Hyperparameter tuning\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n#Classifiers\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.pipeline import Pipeline","82c65a4d":"sample_X_train = Scaled_X_train[:100000,]\nsample_y_train = y_train[:100000]\n#y_test.shape","df9eb0b4":"sample_X_train.shape","d81dcfe2":"def randomized_search():\n    pipeline1 = Pipeline((\n    ('clf', RandomForestRegressor(max_depth=500,max_features=None)),    \n    ))\n\n    pipeline2 = Pipeline((\n    ('clf', LogisticRegression(class_weight='balanced',penalty='l2',solver='saga',max_iter=100)),\n    ))\n\n    pipeline3 = Pipeline((\n    ('clf', MLPRegressor()),\n    ))\n\n    pipeline4 = Pipeline((\n    ('clf', DecisionTreeRegressor(splitter='random')),\n    ))\n\n    parameters1 = {\n    'clf__n_estimators': [ 100],    \n    #'clf__max_features': ['auto', 'sqrt', 'log2',None],\n    #'clf__max_depth': [500,600,700]   \n    }\n\n    parameters2 = { \n    'clf__C':[0.1,0.001,1,10]\n    }\n\n    parameters3 = {        \n    'clf__alpha':[0.001,0.00001,0.0001],\n    'clf__max_iter':[250,400,500],\n    'clf__batch_size':[100,500,1000]\n    }\n    \n    parameters4 = {        \n    'clf__max_depth': [10,100,500,1000],\n    'clf__max_features': ['auto', 'sqrt', 'log2', None],\n    'clf__min_weight_fraction_leaf':[0,0.25,0.5]\n    }\n\n    pars = [(parameters1,\"RandomForestRegressor\"), (parameters2,\"LogisticRegression\"), (parameters3,\"MLPRegressor\"), (parameters4,\"DecisionTreeRegressor\")]\n    pips = [pipeline1, pipeline2, pipeline3, pipeline4]\n\n    '''\n    for i in range(len(pars)):    \n        model,name = pars[i]\n        print('-'*50)\n        print( \"Starting Randomized Search for %s\" %name)        \n        #rs = GridSearchCV(pips[1], pars[1], verbose=5, refit=False, n_jobs=3,cv=5)\n        rs = RandomizedSearchCV(pips[i], model, verbose=5, refit=False, n_jobs=3,cv=5,random_state=22,n_iter=20)\n        rs = rs.fit(sample_X_train, sample_y_train)\n        print(\"Finished Randomized Search for %s\"%name)\n        print('Best Score %.5f'%rs.best_score_)\n        print('Best Param %s'%rs.best_params_)\n        print('-'*50)\n    '''\n\n    model,name = pars[0]\n    print('-'*50)\n    print( \"Starting Randomized Search for %s\" %name)        \n        #rs = GridSearchCV(pips[1], pars[1], verbose=5, refit=False, n_jobs=3,cv=5)\n    rs = RandomizedSearchCV(pips[0], model, verbose=5, refit=False, n_jobs=3,cv=5,random_state=22,n_iter=20)\n    rs = rs.fit(sample_X_train, sample_y_train)\n    print(\"Finished Randomized Search for %s\"%name)\n    print('Best Score %.5f'%rs.best_score_)\n    print('Best Param %s'%rs.best_params_)\n    print('-'*50)\n        ","b9233217":"#randomized_search()","0143df10":"from sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom math import sqrt\n","bd150d55":"#Create Linear Regression Model object\n'''\nreg = linear_model.LinearRegression()\n\n#Train Model using train dataset\nreg.fit(Scaled_X_train,y_train)\n\n#Make Prediction using cross validation set\ny_pred_reg = reg.predict(Scaled_X_test)\n\n'''","b969d560":"# r2_score score: 1 is perfect prediction\n'''\nr2Score=r2_score(y_test,y_pred_reg)\nprint(\"Variance score (r2_score): %f\"%r2Score)\nprint('Model accuracy:%.2f '%(r2Score*100))\n \nprint(\"Root mean squared error of test:%f\"%sqrt(mean_squared_error(y_test,y_pred_reg)))'''","30a14bdd":"from sklearn.neural_network import MLPClassifier, MLPRegressor","c439272e":"'''\nmlp = MLPRegressor(solver='adam',hidden_layer_sizes=(10,10,10),alpha=0.1, random_state=1)\n\nmlp.fit(Scaled_X_train,y_train)\n\ny_pred_mlp = mlp.predict(Scaled_X_test)\n'''","c1403a78":"# r2_score score: 1 is perfect prediction\n'''\nmlp_score=mlp.score(Scaled_X_test,y_test)\nprint(\"Variance score (r2_score): %f\"%mlp_score)\nprint('Model accuracy:%.2f '%(mlp_score*100))\n\nprint(\"Root mean squared error of test:%f\"%sqrt(mean_squared_error(y_test,y_pred_mlp)))\n'''","6033ee93":"#Collect Garbage 'see doc for more info'\nimport gc\ngc.collect()","47dc581d":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold","05f71464":"'''\nrfr = RandomForestRegressor(max_depth=500,criterion='mse',max_features=None,n_estimators=75,bootstrap=True,min_samples_leaf=16,n_jobs=5,min_samples_split=4)\nrfr.fit(Scaled_X_train,y_train)\ny_pred_rfr = rfr.predict(Scaled_X_test)\n\n\n# r2_score score: 1 is perfect prediction\nrfr_score=r2_score(y_pred=y_pred_rfr,y_true=y_test)\nprint(\"Variance score (r2_score): %f\"%rfr_score)\nprint('Model accuracy:%.2f '%(rfr_score*100))\n\nprint(\"Root mean squared error of test:%f\"%sqrt(mean_squared_error(y_test,y_pred_rfr)))\n\n'''","1b6185bd":"#kfold = model_selection.KFold(n_splits=10,random_state=22,shuffle=True,)","04d5bd30":"#cv_result = model_selection.cross_val_score(rfr,X=X_train,y=y_train, cv=kfold,scoring='r2',verbose=True)","4d5c4ae2":"import lightgbm as lgb","8ff104f9":"params = {\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': 'rmse',    \n    'max_depth':-1,\n    'learning_rate': 0.01,\n    'feature_fraction': 0.9,\n    'bagging_fraction': 0.8,\n    'bagging_freq': 5,    \n    'num_leaves':1000,\n    'max_bin':1000,\n    'verbose': 0\n}","b1b68817":"# create dataset for lightgbm\nlgb_train = lgb.Dataset(Scaled_X_train, y_train)\nlgb_eval = lgb.Dataset(Scaled_X_test, y_test, reference=lgb_train)","bfbe5cf4":"print('Starting training...')\n# train\ngbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=100,\n                valid_sets=lgb_eval                \n                )","62fc2619":"print('Starting predicting...')\n# predict\ny_pred = gbm.predict(Scaled_X_test, num_iteration=gbm.best_iteration)\nprint('Done !')","684ffad4":"# eval\nprint('The rmse of prediction is:', mean_squared_error(y_test, y_pred) ** 0.5)","307ef72a":"gbm_score=r2_score(y_pred=y_pred,y_true=y_test)\nprint(\"Variance score (r2_score): %f\"%gbm_score)\nprint('Model accuracy:%.2f '%(gbm_score*100))\n\nprint(\"Root mean squared error of test:%f\"%sqrt(mean_squared_error(y_test,y_pred)))","f813221c":"'''\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\n\ndtr=DecisionTreeRegressor(max_depth=4)\ndtr_boost=AdaBoostRegressor(DecisionTreeRegressor(max_depth=4),n_estimators=300,random_state=12)\n\n\ndtr.fit(X_train,y_train)\n\ny_pred=dtr.predict(X_test)\n\n\nr2_score score: 1 is perfect prediction\ndtr_score=dtr.score(X_test,y_test)\nprint(\"Variance score (r2_score): %f\"%dtr_score)\nprint('Model accuracy:%.2f '%(dtr_score*100))\n\n\ntakes a hell lot of time.....Do not use this!\ndtr_boost.fit(X_train,y_train)\n\ny_pred=dtr_boost.predict(X_test)\n\nr2_score score: 1 is perfect prediction\ndtrBoost_score=dtr_boost.score(X_test,y_test)\nprint(\"Variance score (r2_score): %f\"%dtrBoost_score)\nprint('Model accuracy:%.2f '%(dtrBoost_score*100))\n''' \nprint('')","aef0c5db":"#Predicting the test dataset values\n#Scaling the test dataset\nscaled_test = scaler.transform(pubg_test)","c6087738":"final_pred2 = gbm.predict(scaled_test, num_iteration=gbm.best_iteration)\n#final_pred2 = gbm.predict(scaled_test)","c00b5d85":"submission['winPlacePerc'] = final_pred2","fd1a0378":"submission.head()","346cef05":"submission.to_csv('final_submission.csv',index=False)","5171d8f6":"## PUBG Predicting Chicken Dinner winner!","e88af8d5":"#### Rash Drivers ?","858b831c":"## Adding New Features (Feature engineering)","e411308d":"#### Teamwork works!","dd13fe5c":"#### Normalising feature ","243ea113":"#### Linear Regression","d8775969":"#### Neural Network Regression","07d12569":"#### Total distance covered in the game","5cc74d2b":"#### Cheers..\n- Train data reduced by 74.53 %\n- Test data reduced by 74.72 %","ac124f17":"#### Total items Used","787dfd6c":"### LightGBM","d898c5e8":"#### Normalised points based on total Players joined in the match","fbdbd54a":" #### Pros' goes for HeadShots...","3daa5a0a":"#### Boosted Decision Tree Classifier","3c12d2db":"\n### Random Forest Regressor","f1922baa":"### Divide the data in test and train","03604bef":"### Data loading and initial analysis","b0c0a261":"### Reducing size of large dataset","da372a68":"### HyperParameter Tuning","a88893c8":"### Encoding string values to integer","e5f66703":"### No. of players joined the Match","91be1870":"### Analysis of Algorithms used:\n- Linear regression: Quick and simple. Fairly easy accurate.\n- Neural Network: Slower compared to LR but much more accurate.\n- Decision Tree Classifier: Very slow and almost same as LR\n- Random Forest Regressor: Utilises the power of ensembling many random decision tree. It's relatively slower than Neural Nets."}}