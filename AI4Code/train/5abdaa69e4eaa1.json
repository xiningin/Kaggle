{"cell_type":{"fa1c3b8c":"code","f24d3196":"code","94cceb66":"code","7e92efa9":"code","7388af4a":"code","29a50bb6":"code","d30665f8":"code","2a38f906":"code","ebc7d47b":"code","a55c85b2":"code","d907b826":"code","1a86135e":"code","8aa2825f":"code","6bc7b2d6":"code","2faffe56":"code","20c8c6c5":"markdown","ea688261":"markdown","0b2a5931":"markdown","b93e246c":"markdown","276f0218":"markdown","3df06234":"markdown"},"source":{"fa1c3b8c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport math\nfrom sklearn.metrics import roc_auc_score\nimport pickle\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nimport fastai_structured as fs\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f24d3196":"train_X = pd.read_pickle(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/train_X.pkl\")\ntrain_y = pd.read_csv(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/train_y.csv\")","94cceb66":"train_y.head()","7e92efa9":"val_X = pd.read_pickle(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/val_X.pkl\")\nval_y = pd.read_csv(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/val_y.csv\")","7388af4a":"test_df = pd.read_pickle(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/test_df.pkl\")\ntest_df.head()","29a50bb6":"fs.train_cats(train_X)\nfs.apply_cats(val_X, train_X)\nfs.apply_cats(test_df, train_X)","d30665f8":"nas = {}\ndf_trn, _, nas = fs.proc_df(train_X, na_dict=nas)   ## Avoid creating NA columns as total cols may not match later\ndf_test, _, _ = fs.proc_df(test_df, na_dict=nas)\ndf_val, _, _ = fs.proc_df(val_X, na_dict = nas)\ndf_trn.head()","2a38f906":"def auc(x,y): \n    return roc_auc_score(x,y)\ndef print_score(m):\n    res = [auc(m.predict(df_trn), train_y), auc(m.predict(df_val), val_y)]\n    print(res)","ebc7d47b":"modelB = RandomForestClassifier(n_estimators=30, min_samples_leaf=20, max_features=0.7, \n                                n_jobs=-1, oob_score=True) ## Use all CPUs available","a55c85b2":"modelB.fit(df_trn, train_y)","d907b826":"print_score(modelB)","1a86135e":"predsB = pd.Series(modelB.predict(df_val))","8aa2825f":"test_predsB = pd.Series(modelB.predict(df_test))","6bc7b2d6":"predsB.to_csv(\"predsB.csv\", index = False, header = True)\ntest_predsB.to_csv(\"test_predsB.csv\", index = False, header = True)","2faffe56":"sample_submission = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/sample_submission.csv\")\nsample_submission['isFraud'] = modelB.predict_proba(df_test)[:,1]   \n#sample_submission['isFraud'] = modelB.predict(df_test)\nsample_submission.to_csv('simple_RF.csv', index=False)","20c8c6c5":"### Storing val & test pred","ea688261":"Previous kernel - https:\/\/www.kaggle.com\/priteshshrivastava\/ieee-pipeline-1-create-validation-set\n\nInput - Train & val, test CSVs\n\nOutput - Val & Test preds\n\nNext kernel - Meta model https:\/\/www.kaggle.com\/priteshshrivastava\/ieee-pipeline-3-stacking-with-meta-model","0b2a5931":"### Defining function to calculate the evaluation metric","b93e246c":"### Make predictions on validation AND test set","276f0218":"### Creating submission file for single model","3df06234":"### Specify & fit models on training set"}}