{"cell_type":{"6035fde3":"code","32499f50":"code","14a40495":"code","8aa450a7":"code","8459696b":"code","11c19178":"code","269a580c":"code","059f4c7f":"code","51270293":"code","720e00b4":"code","b1652be0":"code","46e0e5c1":"markdown","e929208f":"markdown","dc9d2672":"markdown","d5cbbfc4":"markdown","e8adb1f2":"markdown","c2403d45":"markdown","f89049d1":"markdown","0799ab61":"markdown"},"source":{"6035fde3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pylab as plt\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom sklearn.linear_model import LinearRegression\nimport datetime\nimport colorlover as cl\nplt.style.use('ggplot')\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n\n# Format the data\ndf = pd.read_csv('..\/input\/ieee-fraud-leaderboard\/ieee-fraud-detection-publicleaderboard_10_3_Final.csv')\ndf['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\ndf = df.set_index(['TeamName','SubmissionDate'])['Score'].unstack(-1).T\ndf.columns = [name for name in df.columns]\n\nFIFTEENTH_SCORE = df.max().sort_values(ascending=False)[15]\nFIFTYTH_SCORE = df.max().sort_values(ascending=False)[50]\nTOP_SCORE = df.max().sort_values(ascending=False)[0]","32499f50":"# Missing \"Young for you\"\ngold_teams = ['FraudSquad','2 uncles and 3 puppies','T.U.V', 'Lions','The Zoo',\n              'Grand Rookie(Done!Good luck to everyone!)\uff09', 'S.A.R.M.A', 'AlKo', 'M5',\n              'Flying Whales','\u90a6\u76db\u79d1\u6280\u5c0f\u5206\u961f','YuyaYamamoto','MaYa','Mr Lonely \u266c','spongebob',\n              'Taemyung Heo','conundrum.ai & Evgeny', '\u30af\u30bd\u30b6\u30b3\u3061\u3083\u3046\u306d\u3093','Our AUC says nothing to us',\n              'bird and fish', '\u5929\u884c\u5065,\u541b\u5b50\u4ee5\u81ea\u5f3a\u4e0d\u606f \u5730\u52bf\u5764,\u541b\u5b50\u4ee5\u539a\u5fb7\u8f7d\u7269']\n\ngold_df = df[gold_teams]\ngold_scores = [0.945884, 0.944210, 0.942580, 0.942453, 0.942391, 0.942314, 0.942268, 0.942129, 0.941750,\n              0.941638, 0.941413, 0.941338, 0.941153, 0.941096, 0.941011, 0.940934, 0.940756, 0.940730,\n              0.940526, 0.940250, 0.940076]\n\ngold_scores_df = pd.DataFrame(index=gold_teams,\n                             data=gold_scores,\n                             columns=['Private Score'])","14a40495":"# Interative Plotly\nmypal = cl.scales['9']['div']['Spectral']\ncolors = cl.interp( mypal, 21 )\nannotations = []\ninit_notebook_mode(connected=True)\nTOP_TEAMS = df.max().loc[df.max() > FIFTEENTH_SCORE].index.values\ndf_filtered = gold_df.ffill()\ndf_filtered = df_filtered.iloc[df_filtered.index >= '08-01-2019']\nteam_ordered = df_filtered.max(axis=0) \\\n    .sort_values(ascending=False).index.tolist()\n\ndata = []\ni = 0\nfor col in df_filtered[team_ordered].columns:\n    data.append(go.Scatter(\n                        x = df_filtered.index,\n                        y = df_filtered[col],\n                        name=col,\n                        line=dict(color=colors[i], width=2),)\n               )\n    i += 1\n\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Gold Medal Teams Private LB Journey',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\nlayout = go.Layout(yaxis=dict(range=[0.945, TOP_SCORE+0.001]),\n                   hovermode='x',\n                   plot_bgcolor='white',\n                  annotations=annotations,\n                  )\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(\n    legend=go.layout.Legend(\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Black\",\n        borderwidth=2,\n    )\n)\n\nfig.update_layout(legend_orientation=\"h\")\nfig.update_layout(template=\"plotly_white\")\n#fig.update_yaxes(showgrid=True, gridwidth=0.5, gridcolor='LightGrey')\nfig.update_xaxes(showgrid=False)\n\niplot(fig)","8aa450a7":"gold_scores_df.sort_values('Private Score', ascending=True). \\\n    plot(kind='barh',\n         xlim=(0.94, 0.946),\n         figsize=(15, 10),\n         title='Final Private Board Scores of Gold Teams',\n         color='lightgoldenrodyellow')\nplt.show()","8459696b":"# Interative Plotly\nmypal = cl.scales['9']['div']['Spectral']\ncolors = cl.interp( mypal, 15 )\nannotations = []\ninit_notebook_mode(connected=True)\nTOP_TEAMS = df.max().loc[df.max() > FIFTEENTH_SCORE].index.values\ndf_filtered = df[TOP_TEAMS].ffill()\ndf_filtered = df_filtered.iloc[df_filtered.index >= '08-01-2019']\nteam_ordered = df_filtered.max(axis=0) \\\n    .sort_values(ascending=False).index.tolist()\n\ndata = []\ni = 0\nfor col in df_filtered[team_ordered].columns:\n    data.append(go.Scatter(\n                        x = df_filtered.index,\n                        y = df_filtered[col],\n                        name=col,\n                        line=dict(color=colors[i], width=2),)\n               )\n    i += 1\n\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='IEEE Fraud Detection Leaderboard Tracking',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\nlayout = go.Layout(yaxis=dict(range=[0.945, TOP_SCORE+0.001]),\n                   hovermode='x',\n                   plot_bgcolor='white',\n                  annotations=annotations,\n                  )\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(\n    legend=go.layout.Legend(\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Black\",\n        borderwidth=2,\n    )\n)\n\nfig.update_layout(legend_orientation=\"h\")\nfig.update_layout(template=\"plotly_white\")\n#fig.update_yaxes(showgrid=True, gridwidth=0.5, gridcolor='LightGrey')\nfig.update_xaxes(showgrid=False)\n\niplot(fig)","11c19178":"# Scores of top teams over time\nplt.rcParams[\"font.size\"] = \"12\"\nALL_TEAMS = df.columns.values\ndf_ffill = df[ALL_TEAMS].ffill()\n\n# This is broken\ndf_ffill.T.sample(1000).T.plot(figsize=(20, 10),\n                           color=color_pal[0],\n                           legend=False,\n                           alpha=0.05,\n                           ylim=(0.925, TOP_SCORE+0.001),\n                           title='All Teams Public LB Scores over Time')\n\ndf.ffill().max(axis=1).plot(color=color_pal[1], label='1st Place Public LB', legend=True)\nplt.show()","269a580c":"plt.rcParams[\"font.size\"] = \"12\"\nax =df.ffill() \\\n    .count(axis=1) \\\n    .plot(figsize=(20, 8),\n          title='Number of Teams in the Competition by Date',\n         color=color_pal[5], lw=5)\nax.set_ylabel('Number of Teams')\nplt.axvline('09-23-2019', color='orange', linestyle='-.')\nplt.text('09-23-2019', 4000,'Merger Deadline',rotation=-90)\nplt.axvline('10-1-2019', color='orange', linestyle='-.')\nplt.text('10-1-2019', 4000,'Original Deadline',rotation=-90)\nplt.axvline('10-3-2019', color='orange', linestyle='-.')\nplt.text('10-3-2019', 4000,'Extended Deadline',rotation=-90)\nplt.show()","059f4c7f":"# plt.style.use('ggplot')\n# team_over_time = df.ffill() \\\n#     .count(axis=1)\n\n# lr = LinearRegression()\n# _ = lr.fit(np.array(pd.to_numeric(team_over_time.index).tolist()).reshape(-1, 1),\n#            team_over_time.values)\n\n# teamcount_df = pd.DataFrame(team_over_time)\n\n# teamcount_pred_df = pd.DataFrame(index=pd.date_range('07-15-2019','10-05-2019'))\n# teamcount_pred_df['Forecast Using All Data'] = lr.predict(np.array(pd.to_numeric(teamcount_pred_df.index).tolist()).reshape(-1, 1))\n\n# lr = LinearRegression()\n# _ = lr.fit(np.array(pd.to_numeric(team_over_time[-5000:].index).tolist()).reshape(-1, 1),\n#            team_over_time[-5000:].values)\n\n# teamcount_pred_df['Forecast Using Recent Data'] = lr.predict(np.array(pd.to_numeric(teamcount_pred_df.index).tolist()).reshape(-1, 1))\n\n# plt.rcParams[\"font.size\"] = \"12\"\n# ax =df.ffill() \\\n#     .count(axis=1) \\\n#     .plot(figsize=(20, 8),\n#           title='Forecasting the Final Number of Teams',\n#          color=color_pal[5], lw=5,\n#          xlim=('07-13-2019','10-02-2019'))\n# teamcount_pred_df['Forecast Using All Data'].plot(ax=ax, style='.-.', alpha=0.5, label='Regression Using All Data')\n# teamcount_pred_df['Forecast Using Recent Data'].plot(ax=ax, style='.-.', alpha=0.5, label='Regression Using last 1000 observations')\n# ax.set_ylabel('Number of Teams')\n# teamcount_pred_df.plot(ax=ax, style='.-.', alpha=0.5)\n# plt.axvline('09-23-2019', color='orange', linestyle='-.')\n# plt.text('09-23-2019', 4000,'Merger Deadline',rotation=-90)\n# plt.axvline('10-1-2019', color='orange', linestyle='-.')\n# plt.text('10-1-2019', 4000,'Original Deadline',rotation=-90)\n# plt.axvline('10-3-2019', color='orange', linestyle='-.')\n# plt.text('10-3-2019', 4000,'Extended Deadline',rotation=-90)\n# plt.show()","51270293":"plt.rcParams[\"font.size\"] = \"12\"\n# Create Top Teams List\nTOP_TEAMS = df.max().loc[df.max() > FIFTYTH_SCORE].index.values\ndf[TOP_TEAMS].max().sort_values(ascending=True).plot(kind='barh',\n                                       xlim=(FIFTYTH_SCORE-0.001,TOP_SCORE+0.001),\n                                       title='Top 50 Public LB Teams',\n                                       figsize=(12, 15),\n                                       color=color_pal[3])\nplt.show()","720e00b4":"plt.rcParams[\"font.size\"] = \"12\"\ndf[TOP_TEAMS].nunique().sort_values().plot(kind='barh',\n                                           figsize=(12, 15),\n                                           color=color_pal[1],\n                                           title='Count of Submissions improving LB score by Team')\nplt.show()","b1652be0":"plt.rcParams[\"font.size\"] = \"7\"\nn_weeks = (datetime.date(2019, 10, 3) - datetime.date(2019, 7, 14)).days \/ 7 # Num days of the comp\nn_weeks = int(n_weeks)\nfig, axes = plt.subplots(n_weeks, 1, figsize=(15, 25), sharex=True)\n#plt.subplots_adjust(top=8, bottom=2)\nfor x in range(n_weeks):\n    date2 = df.loc[df.index.date == datetime.date(2019, 7, 15) + datetime.timedelta(x*7+1)].index.min()\n    num_teams = len(df.ffill().loc[date2].dropna())\n    max_cutoff = df.ffill().loc[date2] < 5\n    df.ffill().loc[date2].loc[max_cutoff].plot(kind='hist',\n                               bins=500,\n                               ax=axes[x],\n                               title='{} ({} Teams)'.format(date2.date().isoformat(),\n                                                            num_teams),\n                                              xlim=(0.9, 0.96))\n    y_axis = axes[x].yaxis\n    y_axis.set_label_text('')\n    y_axis.label.set_visible(False)","46e0e5c1":"# All competitors LB Position over Time\n(Kernel keeps breaking so I subsample to 1000 random teams)","e929208f":"# Number of Teams by Date","dc9d2672":"# Lets track the Public LB Standings!","d5cbbfc4":"# Top Public LB Scores over time","e8adb1f2":"# Count of LB Submissions with Improved Score","c2403d45":"# Distribution of Scores over time","f89049d1":"# Gold Medal Paths\n(Missing the team \"Young for you\" because their name must have changed from the data I have.\n\nUpdating to incluse the paths of the gold medal \ud83e\udd47 teams on the private leaderboard!","0799ab61":"# Top LB Scores"}}