{"cell_type":{"1f561b04":"code","5ab680dd":"code","65f34eef":"code","64732056":"code","83501c3f":"code","33fd6ac5":"code","59f3a60a":"code","4106e37b":"code","6a82daca":"code","76733fec":"code","cca69247":"code","d8f41bed":"code","551ae562":"code","c8fbd3d6":"code","96a61800":"code","d01b1bfb":"code","0d1c06c7":"code","42c3428e":"markdown"},"source":{"1f561b04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ab680dd":"import os\nimport numpy as np \nimport pandas as pd\nimport datetime as dt\nfrom sklearn import preprocessing as prep\nimport librosa as lb\nimport librosa.display as lbd\nimport librosa.feature as lbf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom collections import Counter\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom matplotlib import rcParams\nimport plotly.offline\nsns.set(style='darkgrid')\nplt.rcParams['figure.figsize'] = (16,8)\nimport IPython.display as ipd\nimport ipywidgets as ipw\nimport warnings\nwarnings.filterwarnings('ignore')\n\nlink = 'https:\/\/ebird.org\/species\/'\nPATH_AUDIO = '..\/input\/birdsong-recognition\/train_audio\/'\n## configuring setup, constants and parameters\nPATH_TRAIN = \"..\/input\/birdsong-recognition\/train.csv\"\nPATH_TEST = \"..\/input\/birdsong-recognition\/test.csv\"\n\n# PATH_TRAIN_EXTENDED = \"..\/input\/xeno-canto-bird-recordings-extended-a-m\/train_extended.csv\"\n\n","65f34eef":"train = pd.read_csv(PATH_TRAIN)","64732056":"train.head()","83501c3f":"train.columns","33fd6ac5":"len(set(train.ebird_code))","59f3a60a":"# zero_crossings = lb.zero_crossings(x[n0:n1], pad=False)\n# print(sum(zero_crossings))","4106e37b":"df_bird_map = train[[\"ebird_code\", \"species\"]].drop_duplicates()\n\nfor ebird_code in os.listdir(PATH_AUDIO)[:20]:\n    species = df_bird_map[df_bird_map.ebird_code == ebird_code].species.values[0]\n    audio_file = os.listdir(f\"{PATH_AUDIO}\/{ebird_code}\")[0]\n    audio_path = f\"{PATH_AUDIO}\/{ebird_code}\/{audio_file}\"\n    ipd.display(ipd.HTML(f\"<h2>{ebird_code} ({species})<\/h2>\"))\n    ipd.display(ipd.Audio(audio_path))\n    ","6a82daca":"def plot_for_one_species(Audio_path):\n    values = Audio_path.split(\"\/\")\n    ipd.display(ipd.HTML(f\"<h2>{values[5]}<\/h2>\"))\n    ipd.display(ipd.Audio(Audio_path))\n    data , samplingrate = lb.load(Audio_path)\n    plt.figure(figsize=(12, 4))\n    plt.title(\"Visuvalizing the Audio\")\n    lb.display.waveplot(data, sr=samplingrate)\n    X = lb.stft(data)\n    Xdb = lb.amplitude_to_db(abs(X))\n    plt.figure(figsize=(14, 5))\n    lb.display.specshow(Xdb, sr=samplingrate, x_axis='time', y_axis='hz')\n    plt.colorbar()\n    plt.title(\"Spectrogram of the wave\")\n#     # Zooming in\n#     n0 = 9000\n#     n1 = 9100\n#     plt.figure(figsize=(14, 5))\n#     plt.plot(X[n0:n1])\n#     plt.grid()\n#     plt.title(\"Zero Crossing rate\")","76733fec":"path = '\/kaggle\/input\/birdsong-recognition\/train_audio\/nutwoo\/XC462016.mp3'\nplot_for_one_species(path)","cca69247":"fig = px.scatter(data_frame=train, x='longitude', y='latitude', color='ebird_code')\nfig.show()","d8f41bed":"fig = px.choropleth(data_frame=train,locations=\"country\",locationmode=\"country names\",hover_name=\"species\",title=\"Birds Location\")\nfig.show()","551ae562":"# displaying only the top 30 countries\ncountry = train.country.value_counts()\ncountry_df = pd.DataFrame({'country':country.index, 'frequency':country.values}).head(35)\n\nfig = px.bar(country_df, x=\"frequency\", y=\"country\",color='country', orientation='h',\n             hover_data=[\"country\", \"frequency\"],\n             height=1000,\n             title='Number of audio samples besed on country of recording')\nfig.show()\n\n","c8fbd3d6":"# displaying only the top 30 countries\nauthors = train.author.value_counts()\nauthors_df = pd.DataFrame({'authors':authors.index, 'frequency':authors.values}).head(35)\nfig = px.bar(authors_df, x=\"frequency\", y=\"authors\",color='authors', orientation='h',\n             hover_data=[\"authors\", \"frequency\"],\n             height=1000,\n             title='Authors Contribution')\nfig.show()\n\n","96a61800":"rcParams[\"figure.figsize\"] = 20,8\ntrain['ebird_code'].value_counts().plot(kind='hist')","d01b1bfb":"plt.figure(figsize=(20, 8))\ntrain['date'].value_counts().sort_index().plot();\n","0d1c06c7":"# def parser(row):\n#    # function to load files and extract features\n#    file_name = os.path.join(os.path.abspath(data_dir), str(row.ebird_code), str(row.filename))\n\n#    # handle exception to check if there isn't a file which is corrupted\n#    try:\n#         for i in tqdm(range(0,10)):\n#             with joblib.parallel_backend('dask'):\n#               # here kaiser_fast is a technique used for faster extraction\n#               X, sample_rate = lb.load(file_name, res_type='kaiser_fast') \n#               # we extract mfcc feature from data\n#               mfccs = np.mean(lb.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40).T,axis=0) \n#    except Exception as e:\n#       print(\"Error encountered while parsing file: \", file)\n#       return None, None\n \n#    feature = mfccs\n#    label = row.ebird_code\n \n#    return [feature, label]\n\n# temp = train.apply(parser, axis=1)\n# temp.columns = ['feature', 'label']","42c3428e":"#### There are totally 264 types of bird species availabel in the dataset"}}