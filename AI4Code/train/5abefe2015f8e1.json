{"cell_type":{"73abcd59":"code","136753b9":"code","93cf8d94":"code","406c1122":"code","c00a795f":"code","37c90751":"code","1dbac7e4":"code","9dd99577":"code","420142f9":"code","dc1fd10c":"code","6f324c0c":"code","68bfd80c":"code","facc4ba2":"code","1143c8d0":"code","19a0c95f":"code","8db2223f":"code","320e7fed":"code","f215ed14":"code","a021b92a":"code","ee6b949b":"code","b7b5bc2d":"code","137384c5":"code","cec8f1ef":"code","75e5dbf9":"code","cc81148b":"code","e4a7cc8c":"code","6c6cb9ad":"code","c5e58e8e":"code","f8b59fa8":"code","7d95d2dc":"code","751bc05d":"code","92ce6403":"code","565552c5":"code","04007eba":"code","a7e82501":"code","58df918b":"code","c80bc619":"code","efbf9058":"code","0272e3b4":"code","69545a70":"code","20f30baf":"code","11833c75":"code","76d6dd9c":"code","ff5b359b":"code","2c2a1cd4":"code","e49a1645":"code","a95fcb48":"code","a8cc057c":"code","22e43480":"code","72a91c14":"code","3725d5f8":"code","320b0f6d":"code","533c00ac":"code","a4b90894":"code","539c5c83":"code","cfa9fc80":"code","6150243b":"code","fea76cb0":"code","a9afdd0e":"code","a23ed0d5":"code","e479b1b1":"code","09de13b1":"code","1f4d6fa7":"code","fd278dea":"code","7dca12cf":"code","3068f6f3":"code","0c63ea1f":"code","cc7453fc":"code","85d25e69":"code","2e9d462d":"markdown","4817934e":"markdown","03a39857":"markdown","a32be131":"markdown","7d7a7118":"markdown","3c716149":"markdown","db851e2f":"markdown","818cde5c":"markdown","bd8d107c":"markdown","fd7c6b92":"markdown","b3dae954":"markdown"},"source":{"73abcd59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","136753b9":"train_df = pd.read_csv('\/kaggle\/input\/summeranalytics2020\/train.csv',index_col = 'Id')\nsample_df = pd.read_csv('\/kaggle\/input\/summeranalytics2020\/Sample_submission.csv',index_col = 'Id')\ntest_df = pd.read_csv('\/kaggle\/input\/summeranalytics2020\/test.csv',index_col = 'Id')","93cf8d94":"train_df.head()","406c1122":"Att = train_df.Attrition","c00a795f":"train_df.columns","37c90751":"train_df.describe()","1dbac7e4":"train_df.dtypes","9dd99577":"list1 = train_df.select_dtypes(include = object).columns.tolist()\ntrain_dummy = pd.get_dummies(train_df,columns = list1,prefix = list1,drop_first = True)\ntest_dummy = pd.get_dummies(test_df,columns = list1,prefix = list1,drop_first = True)\n#new_train=","420142f9":"train_dummy.shape","dc1fd10c":"train_dummy.dtypes","6f324c0c":"train_dummy.isnull().sum()","68bfd80c":"import seaborn as sns\nimport matplotlib.pyplot as plt","facc4ba2":"plt.figure(figsize = (20,20))\nsns.heatmap(train_df.corr(),annot = True,fmt ='.1g',cmap = 'coolwarm')","1143c8d0":"df_object = train_df[train_df.select_dtypes(object).columns]\ndf_object.shape","19a0c95f":"fig, ax = plt.subplots(7,2,figsize = (15,30))\nfor i in np.arange(7):\n    s = df_object.iloc[:,i]\n    sns.countplot(s, ax = ax[i,0], order = s.value_counts().index.tolist())\n    ax[i,0].set_title(df_object.columns[i]+' Training Dataset')\n    ax[i,0].tick_params(labelrotation=90)\n    sns.countplot(s, ax = ax[i,1], order = s.value_counts().index.tolist(), hue=Att)\n    ax[i,1].tick_params(labelrotation=90)\n    ","8db2223f":"df_int = train_df[train_df.select_dtypes(int).columns]\ndf_int.shape","320e7fed":"df_int.nunique()","f215ed14":"train_df.duplicated().sum(),test_df.duplicated().sum()","a021b92a":"train_df.drop_duplicates(inplace = True)","ee6b949b":"sns.countplot(x = 'PerformanceRating',hue = 'Attrition',data = train_df)","b7b5bc2d":"train_df.PerformanceRating.describe()","137384c5":"train_df.PerformanceRating.value_counts()","cec8f1ef":"train_df.drop(['Behaviour','PerformanceRating'],axis = 1,inplace = True)\ntest_df.drop(['Behaviour','PerformanceRating'],axis = 1,inplace = True)","75e5dbf9":"train_df.columns","cc81148b":"import matplotlib.pyplot as plt\nimport seaborn as sns","e4a7cc8c":"train_df.Age.unique()","6c6cb9ad":"train_df['age_bins'] = pd.cut(x=train_df['Age'], bins=[18,20,29,39,49,60],labels=['Teens','20s','30s','40s','50s'])\ntest_df['age_bins'] = pd.cut(x=test_df['Age'], bins=[18,20,29,39,49,60],labels=['Teens','20s','30s','40s','50s'])\n","c5e58e8e":"age = train_df.groupby('age_bins')\nage.groups.keys()","f8b59fa8":"train_df.head()","7d95d2dc":"sns.countplot(x = 'age_bins',hue = 'Attrition',data = train_df)","751bc05d":"train_df.YearsAtCompany.unique()","92ce6403":"train_df['years_in_company'] = pd.cut(x=train_df['YearsAtCompany'], bins=[0,5,10,15,20,25,30,37],labels=['0-5','5-10','10-15','15-20','20-25','25-30','30-35'])\ntest_df['years_in_company'] = pd.cut(x=test_df['YearsAtCompany'], bins=[0,5,10,15,20,25,30,37],labels=['0-5','5-10','10-15','15-20','20-25','25-30','30-35'])","565552c5":"sns.countplot(x = 'years_in_company',hue = 'Attrition',data = train_df)","04007eba":"train_df.TotalWorkingYears.unique()","a7e82501":"train_df['years_in_working'] = pd.cut(x=train_df['TotalWorkingYears'], bins=[0,5,10,15,20,25,30,39],labels=['0-5','5-10','10-15','15-20','20-25','25-30','30-35'])\ntest_df['years_in_working'] = pd.cut(x=test_df['TotalWorkingYears'], bins=[0,5,10,15,20,25,30,39],labels=['0-5','5-10','10-15','15-20','20-25','25-30','30-35'])\nsns.countplot(x = 'years_in_working',hue = 'Attrition',data = train_df)\n#TotalWorkingYears',\n#       'TrainingTimesLastYear', 'YearsAtCompany', 'YearsInCurrentRole',","58df918b":"train_df.shape,test_df.columns","c80bc619":"plt.scatter(x= train_df.YearsAtCompany,y = train_df.MonthlyIncome)","efbf9058":"train_df.columns","0272e3b4":"train_df.dtypes","69545a70":"#now since we already have bins for 3 categories lets remove them\nnew_train = train_df.drop(['Age','YearsAtCompany','TotalWorkingYears'],axis =1,inplace = True)\nnew_test = test_df.drop(['Age','YearsAtCompany','TotalWorkingYears'],axis =1,inplace = True)","20f30baf":"#new_train.dtypes\n#new_train = train_df","11833c75":"from sklearn.model_selection import train_test_split,cross_val_score\n","76d6dd9c":"train_df.dtypes\nlist1 = train_df.select_dtypes(include = object).columns.tolist()\ntrain_dummy1 = pd.get_dummies(train_df,columns = list1,prefix = list1,drop_first = True)\nlist2 = train_dummy1.select_dtypes(include = 'category').columns.tolist()\ntrain_dummy2 = pd.get_dummies(train_dummy1,columns = list2,prefix = list2,drop_first = True)\nlist3 = test_df.select_dtypes(include = object).columns.tolist()\ntest_dummy1 = pd.get_dummies(test_df,columns = list3,prefix = list3,drop_first = True)\nlist4 = test_dummy1.select_dtypes(include = 'category').columns.tolist()\ntest_dummy2 = pd.get_dummies(test_dummy1,columns = list4,prefix = list4,drop_first = True)","ff5b359b":"Y = train_dummy2.Attrition\nX = train_dummy2.drop(['Attrition'],axis = 1)\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = .2)","2c2a1cd4":"train_dummy2.shape,test_dummy2.shape","e49a1645":"train_dummy2.dtypes","a95fcb48":"from sklearn.ensemble import RandomForestClassifier\nonemodel1 = RandomForestClassifier(n_estimators=400,n_jobs = -1,min_samples_leaf=10)\nonemodel1.fit(x_train,y_train)","a8cc057c":"onemodel1.score(x_test,y_test)","22e43480":"cross_val_score(onemodel1,x_train,y_train,cv = 5,n_jobs = -1,verbose = 1,scoring = 'roc_auc').mean()","72a91c14":"onemodel2 = RandomForestClassifier(n_estimators=400,n_jobs = -1,min_samples_leaf=10)\nonemodel2.fit(X_train,Y_train)","3725d5f8":"cross_val_score(onemodel2,X_train,Y_train,cv = 5,n_jobs = -1,verbose = 1,scoring = 'roc_auc').mean()","320b0f6d":"onemodel2.score(X_test,Y_test)","533c00ac":"onemodel2.predict_proba(test_dummy2)","a4b90894":"from sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nonemodel5 = LGBMClassifier(random_state=7, n_estimators=100, colsample_bytree=0.5, \n                       max_depth=2, learning_rate=0.1, boosting_type='gbdt')\ncross_val_score(onemodel5, X_train, Y_train, cv=5, n_jobs=-1, verbose=1, scoring='roc_auc').mean()","539c5c83":"X_train.shape,test_dummy2.shape","cfa9fc80":"onemodel5.fit(X_train,Y_train)\nonemodel5.predict_proba(test_dummy2)","6150243b":"onemodel4 = XGBClassifier(seed=7, n_jobs=-1, n_estimators=100, random_state=7, max_depth=2, learning_rate=0.1)\ncross_val_score(onemodel4, X_train, Y_train, cv=5, n_jobs=-1, verbose=1, scoring='roc_auc').mean()","fea76cb0":"from sklearn.ensemble import VotingClassifier\nensemble = VotingClassifier(estimators=[('onemodel4', onemodel4), ('onemodel5', onemodel5),('onemodel2', onemodel2)],\n                                         voting='soft', n_jobs=-1)\ncross_val_score(ensemble, X, Y, cv=5, n_jobs=-1, verbose=1, scoring='roc_auc').mean()","a9afdd0e":"ensemble.fit(X, Y)\ny_pred = ensemble.predict_proba(test_dummy2)[:, 1]\nsub_df = pd.DataFrame({\"Id\":test_dummy2.index, \"Attrition\": y_pred})\nsub_df.to_csv(\"SA_submission_1.csv\", index=False)","a23ed0d5":"train_df.dtypes","e479b1b1":"train_dummy.dtypes","09de13b1":"train_dummy.drop(['Behaviour','PerformanceRating'],axis = 1,inplace = True)\ntest_dummy.drop(['Behaviour','PerformanceRating'],axis = 1,inplace = True)","1f4d6fa7":"train_dummy.drop_duplicates(inplace = True)","fd278dea":"Y = train_dummy.Attrition\nX = train_dummy.drop(['Attrition'],axis = 1)\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = .2)\nonemodel6 = RandomForestClassifier(n_estimators=400,n_jobs = -1,min_samples_leaf=10)\nonemodel6.fit(X_train,Y_train)","7dca12cf":"#for submission\ncross_val_score(onemodel6,X_train,Y_train,cv = 5,n_jobs = -1,verbose = 1,scoring = 'roc_auc').mean()","3068f6f3":"from sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nlgbmc = LGBMClassifier(random_state=7, n_estimators=100, colsample_bytree=0.5, \n                       max_depth=2, learning_rate=0.1, boosting_type='gbdt')\ncross_val_score(lgbmc, X_train, Y_train, cv=5, n_jobs=-1, verbose=1, scoring='roc_auc').mean()","0c63ea1f":"xgbc = XGBClassifier(seed=7, n_jobs=-1, n_estimators=100, random_state=7, max_depth=2, learning_rate=0.1)\ncross_val_score(xgbc, X_train, Y_train, cv=5, n_jobs=-1, verbose=1, scoring='roc_auc').mean()","cc7453fc":"from sklearn.ensemble import VotingClassifier\nensemble = VotingClassifier(estimators=[('onemodel6', onemodel6), ('xgbc', xgbc), ('lgbmc', lgbmc)],\n                                         voting='soft', n_jobs=-1)\ncross_val_score(ensemble, X, Y, cv=5, n_jobs=-1, verbose=1, scoring='roc_auc').mean()","85d25e69":"ensemble.fit(X, Y)\ny_pred = ensemble.predict_proba(test_dummy)[:, 1]\nsub_df = pd.DataFrame({\"Id\":test_dummy.index, \"Attrition\": y_pred})\nsub_df.to_csv(\"SA_submission_2.csv\", index=False)","2e9d462d":"# ** By one hot encoding **","4817934e":"Clearly we observe that there are 628 duplicated columns in the dataset.","03a39857":"# **Model without binning**","a32be131":"A few things really odd in this dataset are\n\n1.There are only 1000 unique employee numbers whereas the total number we have is 1628.\n\n2.The column performance rating has only 2 unique entries which is strange because usually the rating columns have atleast 4+ entries.\n\n3.The column Behavious has only 1 unique entry, this implies that is a useless column.","7d7a7118":"Clearly enough we dont have any null values in the dataset.\nFurther now, lets check for noise in the data.","3c716149":"# **Data Wrangling**","db851e2f":"# **Trying different models**","818cde5c":"Now we go through some columns and analyse if there is any noise present in the dataset.","bd8d107c":"Since we have object columns in the data and our ML algorithms dont work on object columns so converting all of them to integer.","fd7c6b92":"From the above plot we can clearly observe that the features like Years in current role,years since last promotion ,years at the company etc.have good correlation numbers and hence are highly correlated.","b3dae954":"The PerformanceRating column is clearly just noise in the data\n\nHence removing both PerformanceRating and behaviour columns."}}