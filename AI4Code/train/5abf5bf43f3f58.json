{"cell_type":{"d8711d83":"code","1d7bdb97":"code","42b58c4f":"code","45cecc00":"code","9fbbc1c2":"code","2c055365":"code","8c03303b":"code","2fe43285":"code","560be153":"code","bdbe5b7a":"code","b4a5c475":"code","2c5935ff":"code","636b80cf":"code","e491dc9c":"code","a03fce20":"code","e43594d6":"code","7f6ea567":"code","558ea061":"code","33e7af70":"code","e45a733a":"code","6109c0f9":"code","ea09e212":"code","8ee30ba3":"code","7a664f86":"code","2016d16c":"code","01df9469":"code","e9ded4a7":"code","a1fc9430":"code","a36cf0b1":"code","44058b7f":"code","490c5c4d":"code","db314493":"code","a06f8011":"markdown","d222af03":"markdown","fdb0a463":"markdown","baa3e3c2":"markdown","d9bc3001":"markdown","89a80da7":"markdown","11779c97":"markdown","9b696c5a":"markdown","7e7b25fd":"markdown"},"source":{"d8711d83":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MinMaxScaler, LabelBinarizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifierCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV\n\nfrom mlxtend.classifier import StackingClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nimport plotly.express as px\nfrom matplotlib import pyplot as plt\nimport scikitplot as skplt\nimport missingno as msno\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os\nimport re\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","1d7bdb97":"gradient = [\"#ffc000\",\"#ff9900\",\"#ff6400\",\"#ff0000\",\"#d90025\",\"#c8002f\",\"#b90038\",\"#ab0042\",\"#a0004d\"]\nprint(\"Gradient from the picture for this notebook\")\nsns.palplot(gradient) #combine\n#ffc000, #ff9900, #ff6400, #ff0000,#d90025,#c8002f, #b90038, #ab0042, #a0004d","42b58c4f":"train_table = pd.read_csv(f\"\/kaggle\/input\/titanic\/train.csv\").set_index(\"PassengerId\", drop=True)\ntest_table = pd.read_csv(f\"\/kaggle\/input\/titanic\/test.csv\").set_index(\"PassengerId\", drop=True)\ntable = pd.concat([train_table, test_table], axis=0)\ntable.head(10)","45cecc00":"msno.bar(table, figsize=(25,3), color=gradient)","9fbbc1c2":"table[table[\"Fare\"].isna()]","2c055365":"table.loc[table[\"Fare\"].isna(),\"Fare\"] = table[(table[\"Pclass\"]==3)][\"Fare\"].median()","8c03303b":"table.loc[1044]","2fe43285":"msno.bar(table, figsize=(25,3), color=gradient)","560be153":"table.loc[(table[\"Age\"].isna())&(table[\"Pclass\"]==1),\"Age\"] = table[(table[\"Pclass\"]==1)][\"Age\"].median()\ntable.loc[(table[\"Age\"].isna())&(table[\"Pclass\"]==2),\"Age\"] = table[(table[\"Pclass\"]==2)][\"Age\"].median()\ntable.loc[(table[\"Age\"].isna())&(table[\"Pclass\"]==3),\"Age\"] = table[(table[\"Pclass\"]==3)][\"Age\"].median()\ntable.head(10)","bdbe5b7a":"table[\"Adult\"] = 0\ntable[\"Kid\"] = 0\ntable.loc[(table[\"Age\"]>=18)&(table[\"Age\"]<60),\"Adult\"] = 1\ntable.loc[(table[\"Age\"]<18),\"Kid\"] = 1\ntable.head(35)","b4a5c475":"msno.bar(table, figsize=(25,3), color=gradient)","2c5935ff":"table[table[\"Embarked\"].isna()]","636b80cf":"plottable = table.copy(deep=True)\nplottable = plottable[~plottable[\"Survived\"].isna()]\nplottable[\"Survived\"] = plottable[\"Survived\"].astype(str)\nplot = px.histogram(plottable, x=\"Embarked\", color= \"Survived\", color_discrete_sequence=[\"#ffc000\", \"#ff6400\"])\nplot.show()","e491dc9c":"table[\"Embarked\"] = table[\"Embarked\"].fillna(\"S\")","a03fce20":"msno.bar(table, figsize=(25,3), color=gradient)","e43594d6":"table[\"Alone\"] = 0\ntable.loc[(table[\"SibSp\"]+table[\"Parch\"])==0,\"Alone\"]=1\ntable.head(10)","7f6ea567":"matr = table.copy(deep=True)\nmatr['Sex'] = LabelEncoder().fit_transform(matr['Sex'])\nmatr.head(10)","558ea061":"modelmatr = pd.DataFrame(index=matr.index)\n#Embarked\ndata = OneHotEncoder().fit_transform(matr[\"Embarked\"].to_numpy().reshape(-1,1)).toarray()\ncolumns = [f\"Embarked_{i}\" for i in range(data.shape[1])]\nmodelmatr = pd.concat([pd.DataFrame(data=data, columns=columns, index=matr.index),modelmatr], axis=1)\n\nmodelmatr = pd.concat([modelmatr,matr[[\"Survived\",\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Adult\",\"Kid\",\"Alone\"]]], axis=1)\nmodelmatr.head(10)","33e7af70":"#Pclass\nmodelmatr[\"Pclass\"] = MinMaxScaler().fit_transform(modelmatr[\"Pclass\"].to_numpy().reshape(-1,1))\n#Age\nmodelmatr[\"Age\"] = MinMaxScaler().fit_transform(modelmatr[\"Age\"].to_numpy().reshape(-1,1))\n#Fare\nmodelmatr[\"Fare\"] = MinMaxScaler().fit_transform(modelmatr[\"Fare\"].to_numpy().reshape(-1,1))\n#SibSp\nmodelmatr[\"SibSp\"] = MinMaxScaler().fit_transform(modelmatr[\"SibSp\"].to_numpy().reshape(-1,1))\n#Parch\nmodelmatr[\"Parch\"] = MinMaxScaler().fit_transform(modelmatr[\"Parch\"].to_numpy().reshape(-1,1))\nmodelmatr.head(10)","e45a733a":"data = modelmatr.copy(deep=True)\ntrain_table = data[~modelmatr[\"Survived\"].isna()]\nreal_table = data[modelmatr[\"Survived\"].isna()].drop(\"Survived\", axis=1)\ntrain_table.loc[:,\"Survived\"] = train_table.loc[:,\"Survived\"].astype(bool)\nxdata = train_table.drop(\"Survived\", axis=1)\nydata = train_table[\"Survived\"].astype(int)\ntrain_table.head(10)","6109c0f9":"xdata.head(10)","ea09e212":"ydata","8ee30ba3":"mod = {}\nacc = {}\nmod[\"submission\"] = SVC(**{'C': 5, 'degree': 2, 'gamma': 0.1, 'kernel': 'poly'})\nmod[\"submission\"].fit(xdata,ydata)\nyres = mod[\"submission\"].predict(xdata)\nacc[\"submission\"] = accuracy_score(ydata,yres)\nprint(f\"Accuracy by training process\\t:\\t{accuracy_score(ydata,yres)}\")\nf = pd.DataFrame(mod[\"submission\"].predict(real_table), index= real_table.index,columns = [\"Survived\"]).astype(int)\nf.to_csv(f'submission.csv')","7a664f86":"parametersLR = [\n    {\"penalty\":['l2'],\"solver\": ['newton-cg'],\"C\":[0.1, 1, 3, 6]},\n    {\"penalty\":['l2'],\"solver\": ['liblinear'],\"C\":[0.1, 1, 3, 7]},\n    {\"penalty\":['l2'],\"solver\": ['lbfgs'],\"C\":[0.1,0.3, 0.5, 1]},\n    {\"penalty\":['l1'],\"solver\": ['liblinear'],\"C\":[0.1, 1, 3, 6]},\n    {\"penalty\":['elasticnet'],\"solver\": ['saga'],\"C\":[0.1,0.25,0.5,1],'l1_ratio':[0, 0.1,0.5,1],'max_iter': [500]},\n]\n","2016d16c":"cv = ShuffleSplit(n_splits=5)","01df9469":"mod[\"LogisticRegression\"] = GridSearchCV(LogisticRegression(**{}), parametersLR,cv = cv)\nmod[\"LogisticRegression\"].fit(xdata,ydata)\nyres = mod[\"LogisticRegression\"].predict(xdata)\nacc[\"LogisticRegression\"] = accuracy_score(ydata,yres)\nprint(f\"Accuracy by training process\\t:\\t{accuracy_score(ydata,yres)}\")\nf = pd.DataFrame(mod[\"LogisticRegression\"].predict(real_table), index= real_table.index,columns = [\"Category\"]).astype(int)\nf.to_csv(f'LogisticRegression.csv')","e9ded4a7":"mod[\"LogisticRegression\"].cv_results_[\"mean_test_score\"]","a1fc9430":"mod[\"LogisticRegression\"].cv_results_[\"std_test_score\"]","a36cf0b1":"mod[\"LogisticRegression\"].cv_results_[\"params\"]","44058b7f":"mod[\"LogisticRegression\"].best_params_","490c5c4d":"plot = plt.figure(figsize=(35,10))\ncount=1\nfor k in mod:\n    ax = plot.add_subplot(1,len(mod),count)\n    count+=1\n    skplt.metrics.plot_confusion_matrix(ydata, mod[k].predict(xdata), normalize=True, figsize=(5,5), ax=ax, cmap=\"Reds\")\n    ax.set_title(k)\nplot.show()","db314493":"mod[\"ensemble\"] =  StackingClassifier(classifiers=(mod[\"LogisticRegression\"], mod[\"submission\"]),meta_classifier=LogisticRegression(**{\"penalty\":\"l2\",\"solver\": \"liblinear\",\"C\":0.1,}))\nmod[\"ensemble\"].fit(xdata,ydata)\nyres = mod[\"ensemble\"].predict(xdata)\nacc[\"ensemble\"] = accuracy_score(ydata,yres)\nprint(f\"Accuracy by training process\\t:\\t{accuracy_score(ydata,yres)}\")\nf = pd.DataFrame(mod[\"ensemble\"].predict(real_table), index= real_table.index,columns = [\"Survived\"]).astype(int)\nf.to_csv(f'submission.csv')","a06f8011":"Create model:","d222af03":"Load our data","fdb0a463":"Download info","baa3e3c2":"Fare:","d9bc3001":"Age:","89a80da7":"# Preparing data:","11779c97":"Embarked:","9b696c5a":"Another variant - Logistic Regression","7e7b25fd":"Let's remove \"nan\" from our table"}}