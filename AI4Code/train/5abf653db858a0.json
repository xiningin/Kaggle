{"cell_type":{"0b9101e4":"code","1e1e6fe1":"code","810cf6ba":"code","343956d2":"code","2aa8fb42":"code","c7acb2c2":"code","238ed40c":"code","73b8c49a":"code","e39b879e":"markdown","ef6437c0":"markdown","81d404d7":"markdown","0dfff477":"markdown"},"source":{"0b9101e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e1e6fe1":"import pandas as pd\npd.set_option('display.max_columns', None)\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report","810cf6ba":"train= pd.read_csv('..\/input\/forest-cover-type-prediction\/train.csv')","343956d2":"train.head()","2aa8fb42":"train.info()","c7acb2c2":"train['Cover_Type'].value_counts(normalize=True)","238ed40c":"X= train.drop('Cover_Type', axis=1)\ny= train['Cover_Type']\n\nX_train, X_test, y_train, y_test= train_test_split(X,y, test_size= 0.25)","73b8c49a":"tree= DecisionTreeClassifier(random_state=24)\nforest= RandomForestClassifier(random_state=24)\nknn= KNeighborsClassifier()\nsvm= SVC(random_state=24)\nxboost= XGBClassifier(random_state=24)\n\n\nmodels= [tree, forest, knn, svm, xboost]\n\nfor model in models:\n    model.fit(X_train, y_train)\n    y_pred= model.predict(X_test)\n    accuracy= accuracy_score(y_test, y_pred)\n    clf_report= classification_report(y_test, y_pred) \n    print(f\"The accuracy of model {type(model).__name__} is {accuracy:.2f}\")\n    print(clf_report)\n    print(\"\\n\")","e39b879e":"# Training and comparing multiple algorithms with few lines of code \n\nThe goal here is to compare how different classifiers work using the sklearn [classification report](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.classification_report.html).\n\nI will create a for loop to train and print the 5 following algorithms:\n\n- Decision Tree\n- Random Forest\n- K-nearest Neighbors\n- Support Vector Machine\n- XGBoost\n\nThe code was used on my article **\"How to train and compare Machine Learning models with few lines of\u00a0code\"**, available on my [Medium](https:\/\/medium.com\/@lmmfrederico).\n\nThe goal is not into data cleaning or data mining, so data will be used at it is. Of course with the necessary pre-processing step, the performance will be significantly changed.","ef6437c0":"## Training the models ","81d404d7":"### Evaluating the results\n\nBased on the precision, recall and f1-scores, in that first attempt we would pick **XGBoost**. Next steps would include hyperparameter tuning to improve model's performance. However, it's important to remember that we didn't performed any cleaning on the data, so it would be interesting to clean the data and run again the model's, to check how it changes performance. ","0dfff477":"### Checking how the target classes are distributed:"}}