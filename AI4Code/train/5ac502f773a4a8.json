{"cell_type":{"e8f51bb4":"code","77e36142":"code","fd2fcabb":"code","312c8a1a":"code","9cd64ad9":"code","00c0dae2":"code","5990c518":"code","5d0a177a":"code","f640858b":"code","a68b030e":"code","3db57a6f":"code","fab487d2":"code","d39f21c8":"code","39679778":"code","88b371db":"markdown","0645b588":"markdown","d4a47281":"markdown","9c069d3f":"markdown","10cb62c3":"markdown","ab14d0db":"markdown","d075cf07":"markdown","9ee2b164":"markdown","74ef0473":"markdown"},"source":{"e8f51bb4":"import os\nimport pandas as pd\nfrom statistics import mode\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier\nfrom numpy import argmax\nfrom matplotlib import pyplot as plt\nimport numpy as np","77e36142":"input_dir = '..\/input\/titanic\/'\ntrain_fn = os.path.join(input_dir, 'train.csv')\ntest_fn = os.path.join(input_dir, 'test.csv')\n\noutput_dir = '..\/input\/output\/'\n\ntrain_drop_cols = {'Cabin', 'SibSp', 'Parch', 'Ticket', 'Name'}","fd2fcabb":"def one_hot_encode(input_df, col):\n    le = LabelEncoder()\n    ohe = OneHotEncoder()\n    label_encoded = le.fit_transform(input_df[col])\n    label_encoded = label_encoded.reshape(len(label_encoded), 1)\n    onehot_encoded = ohe.fit_transform(label_encoded).toarray()\n    ohe_col_names = ['_'.join([col, _class]) for _class in le.classes_]\n    df = pd.DataFrame(onehot_encoded, columns=ohe_col_names)\n    input_df.drop(col, axis=1, inplace=True)\n    for col in ohe_col_names:\n        input_df[col] = df[col]\n    return input_df","312c8a1a":"train = pd.read_csv(train_fn)\ntest = pd.read_csv(test_fn)","9cd64ad9":"data = pd.concat([train, test], ignore_index=True)","00c0dae2":"nan_cols = set(data.columns[((data.isnull().sum() \/ data.shape[0])*100) > 0]) - train_drop_cols\nprint(\"NaN Columns: \", nan_cols)\n\nmedian_by_sex = data[['Sex', 'Age']].groupby('Sex').median()['Age'].to_dict()\nmode_by_pclass = 'S'\nmedian_by_pclass_and_emb = 8.0500\nimpute_dict = {\n    'Age': median_by_sex,\n    'Embarked': mode_by_pclass,\n    'Fare': median_by_pclass_and_emb\n}\nprint(\"Imputation Dictionery: \\n\", impute_dict)\n\nfor col, val in impute_dict.items():\n    if col == 'Age':\n        for sex, val2 in impute_dict[col].items():\n            data.loc[data['Sex'] == sex, col] = data.loc[data['Sex'] == sex, col].fillna(val2)\n    else:\n        data[col] = data[col].fillna(val)","5990c518":"data['FamilySize'] = data[['SibSp', 'Parch']].sum(axis=1)","5d0a177a":"cat_cols = {'Sex', 'Embarked'}\nfor col in cat_cols:\n    print(col)\n    data = one_hot_encode(data, col)","f640858b":"data.drop(train_drop_cols, axis=1, inplace=True)","a68b030e":"new_train = data[data['Survived'].notnull()]\nnew_test = data[data['Survived'].isnull()].drop('Survived', axis=1)","3db57a6f":"X = new_train.drop(['PassengerId', 'Survived'], axis=1)\ny = new_train['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, stratify=y, random_state=42)","fab487d2":"model_dict = {\n    'KNeighborsClassifier': KNeighborsClassifier(n_neighbors=9),\n    'LogisticRegression': LogisticRegression(max_iter=100000, random_state=0),\n    'LinearSVC': LinearSVC(max_iter=100000, random_state=0),\n    'SVC': SVC(gamma=0.1, C=0.3),\n    'GaussianNB': GaussianNB(),\n    'DecisionTreeClassifier': DecisionTreeClassifier(max_depth=4, random_state=0),\n    'RandomForestClassifier': RandomForestClassifier(n_estimators=50, max_depth=4, random_state=0),\n    'GradientBoostingClassifier': GradientBoostingClassifier(n_estimators=50, max_depth=1, random_state=0),\n    'MLPClassifier': MLPClassifier(random_state=0, solver='lbfgs', hidden_layer_sizes=[10, 10], alpha=0.0100),\n    'XGBClassifier': XGBClassifier(random_state=0, learning_rate=0.01, n_estimators=50, subsample=0.8, max_depth=4)\n}","d39f21c8":"data_list = list()\nfor name, model in model_dict.items():\n    data_dict = dict()\n    model.fit(X_train, y_train)\n    train_score = model.score(X_train, y_train)\n    test_score = model.score(X_test, y_test)\n    data_dict['model'] = name\n    data_dict['train_score'] = train_score\n    data_dict['test_score'] = test_score\n    data_list.append(data_dict)\nscore_df = pd.DataFrame(data_list)\nscore_df['score_diff'] = score_df['train_score'] - score_df['test_score']\nmodel_df = score_df.sort_values(['test_score'], ascending=[False])\nmodel_df","39679778":"m_name = 'XGBClassifier'\noutput_file = 'Submission_{}.csv'.format(m_name)\noutput_path = os.path.join('..\/input\/output\/', output_file)\nmodel = model_dict[m_name].fit(X, y)\npredictions = model.predict(new_test.drop('PassengerId', axis=1))\ntest['Survived'] = [int(i) for i in predictions.tolist()]\ntest[['PassengerId', 'Survived']].to_csv(output_file, index=False)","88b371db":"## Stratify Spliting of data","0645b588":"## Predictions","d4a47281":"## Merging Coorelated Columns to reduce dimentionality","9c069d3f":"## Missing Value Imputation","10cb62c3":"<hr>\n<h1>Feature Engineering<\/h1>\n<hr>","ab14d0db":"## One Hot Encode the Categorical Variables","d075cf07":"<hr>\n<h1>Model Building<\/h1>\n<hr>","9ee2b164":"data_list = list()\nfor val in [0.1, 0.2, 0.8]:\n    model = XGBClassifier(random_state=0, learning_rate=0.01, n_estimators=50, subsample=0.8, max_depth=4)\n    model.fit(X_train, y_train)\n    train_score = model.score(X_train, y_train)\n    test_score = model.score(X_test, y_test)\n    data_dict = dict()\n    data_dict['param_val'] = val\n    data_dict['train_score'] = train_score\n    data_dict['test_score'] = test_score\n    data_list.append(data_dict)\n\nscore_df = pd.DataFrame(data_list)\nscore_df['score_diff'] = score_df['train_score'] - score_df['test_score']\nscore_df.sort_values(['score_diff', 'test_score'], ascending=[True, False])","74ef0473":"## Drop Not Required Columns"}}