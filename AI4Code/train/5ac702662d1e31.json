{"cell_type":{"27c38b81":"code","c9f8e563":"code","e5960469":"code","8b2c271f":"code","7bd6ce6d":"code","a17464f3":"code","294d3a1a":"code","251f80da":"code","24ade1aa":"code","10092512":"code","2997843d":"code","5c9f369c":"code","f9dec631":"code","d1656796":"code","df8d236e":"code","24049a25":"code","eabc8b8b":"code","dc2f70ff":"code","91dde25a":"code","8ae047f1":"code","bdf32258":"code","93bce5fb":"code","59215c12":"code","99421542":"code","9de61fa9":"code","72b1ced3":"code","ec4099b4":"code","4c589495":"code","0b647738":"code","8505093f":"code","d8d509c7":"code","d00466bc":"code","a5b654cb":"code","e3926f1d":"code","f38e419f":"code","fba63b04":"code","d1e10456":"code","431dd073":"code","5e7bc3f8":"code","4c4c5cca":"code","b8a787f2":"code","80c1b8a5":"code","63aa0803":"code","491524a7":"code","e4c31afe":"code","7af5b263":"code","d575f51c":"code","e87de07f":"code","210feac2":"code","432ad670":"code","2b0495e4":"code","d843b28b":"code","361b35e9":"code","e56ab074":"code","53c01263":"code","9d918e76":"code","cf21e13c":"code","7dac8c4d":"markdown","d470eca3":"markdown","6f6bc9d2":"markdown","a15cce09":"markdown","8612c735":"markdown","cb72865c":"markdown","db76ad88":"markdown","5e536643":"markdown","2f726095":"markdown","80f34336":"markdown","3669d3ea":"markdown","a335b46f":"markdown","d53677d6":"markdown","3a14bba7":"markdown","fb1a303c":"markdown","dbfaab75":"markdown","98e43332":"markdown","9ab0135d":"markdown","fa77e667":"markdown","27856144":"markdown","53ec7b5d":"markdown","1c9f392c":"markdown","1bbd5170":"markdown","f0eb8d3f":"markdown","cba2a701":"markdown","7c50e22d":"markdown","bcf55f60":"markdown","9a633fb6":"markdown","8993acf3":"markdown","ef878943":"markdown","470903aa":"markdown","85585d08":"markdown","a29db061":"markdown","0aa800b9":"markdown","00ee9f0d":"markdown","81aaab70":"markdown","95f076a0":"markdown","96fa0da1":"markdown","ea3f63c7":"markdown","7db2450b":"markdown","548b9a1b":"markdown","580aba18":"markdown","ba76e472":"markdown","310be245":"markdown","69ee833e":"markdown","0f7ca2da":"markdown","a2dbb6a8":"markdown","7712b6dd":"markdown","ef73388c":"markdown","cbb302ab":"markdown","9104b4c0":"markdown","630c84ee":"markdown","5c4ddc15":"markdown","f1926cd0":"markdown","3c35e2a2":"markdown","db2a59ae":"markdown","9b69cddf":"markdown","d3657f18":"markdown","b6e062ab":"markdown","7fb771e1":"markdown","597af690":"markdown","4d22124c":"markdown","562e6d45":"markdown","c6cd1eff":"markdown","3a4e6b6f":"markdown","27fe731f":"markdown","25bad764":"markdown","366a59ce":"markdown","00b06e52":"markdown","e69860ee":"markdown","a89a1ce7":"markdown","536364d2":"markdown","045ed35f":"markdown","94bc8363":"markdown","9d639232":"markdown","ef48cc1e":"markdown","d676b319":"markdown","63b8f9fa":"markdown","54ada9ac":"markdown","60ecb53b":"markdown","a290111f":"markdown","f377d7a9":"markdown","ee1f6a18":"markdown","5d58bd7e":"markdown","5376e7a9":"markdown","3f162fa7":"markdown","95b2d130":"markdown","c37b67f0":"markdown","e3d499b1":"markdown","ffa22ffc":"markdown","f66159fc":"markdown","3a95694a":"markdown","02c9a4d8":"markdown","20a5eafd":"markdown","7d240022":"markdown","80a856bd":"markdown","daa1a7ce":"markdown","bbc14b3c":"markdown","65bd6ce8":"markdown","d0a9915b":"markdown","d761c8b6":"markdown","bbc25ce9":"markdown"},"source":{"27c38b81":"# This library is to work with Data Frames\nimport pandas as pd\n\n# This library is to work with vectors\nimport numpy as np\n\n# This library is to visualise statistical graphs\nimport seaborn as sns\n\n# This library is to visualise graphs\nimport matplotlib.pyplot as plt\n\n# To set some ploting parameters\nfrom matplotlib import rcParams\n\n# Library to work with Regular Expressions\nimport re\n\n# To ignore filterwarnings\nimport warnings\n\n# This library is to create dispays\nfrom IPython.display import Image\n\n\"\"\"\nAt my Github Repository i stored all the functions in appropriate util packages. At Kaggle submission i will directly use those functions.\n\n# Calling reporting functions from util_reporting\nfrom util_reporting import (\n    swarmplot_viz,\n    crosstab_viz,\n    factor_plot_viz,\n    relationship_viz,\n    df_first_look,\n    df_descriptive_statistics,\n    countplot_viz,\n    df_pivot_aggregated_statistics,\n    multiple_plot_viz,\n    boxplot_viz,\n    histogram_viz,\n    distplot_viz,\n    correlation_chart,\n)\n\n# Calling reporting functions from util_data_cleaning\nfrom util_data_cleaning import (\n    extract_first_string,\n    df_numeric_column_filler_with_aggregated_data,\n    calculating_zscore,\n)\n\"\"\"\n\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\n%config Completer.use_jedi = False\n\n# Seting a universal figure size<\nrcParams[\"figure.figsize\"] = 8, 6","c9f8e563":"# util_data_cleaning.py\nimport pandas as pd\nimport re\n\n\ndef extract_first_string(df, column_to_be_used, column_to_be_created):\n    \"\"\"\n    This function gets a Python Pandas dataframe and extracting the middle string from name column in the dataframe. And Replacing values in new column.\n    :param df: Dataframe to be analyze\n    :param column_to_be_used: The column is to be used to extract the middle string to the new column.\n    :param column_to_be_created: The column is to be created from \"column_to_be_used\"\n    :return: Returning Python Pandas dataframe.\n    \"\"\"\n    try:\n\n        df[column_to_be_created] = df[column_to_be_used].str.extract(\"([A-Za-z]+)\\.\")\n\n        df[column_to_be_created].replace(\n            [\n                \"Mlle\",\n                \"Mme\",\n                \"Ms\",\n                \"Dr\",\n                \"Major\",\n                \"Lady\",\n                \"Countess\",\n                \"Jonkheer\",\n                \"Col\",\n                \"Rev\",\n                \"Capt\",\n                \"Sir\",\n                \"Don\",\n            ],\n            [\n                \"Miss\",\n                \"Miss\",\n                \"Miss\",\n                \"Officer\",\n                \"Officer\",\n                \"Mrs\",\n                \"Mrs\",\n                \"Mr\",\n                \"Officer\",\n                \"Officer\",\n                \"Officer\",\n                \"Mr\",\n                \"Mr\",\n            ],\n            inplace=True,\n        )\n\n        return df\n\n    except Exception as e:\n        print(\"Error at df_first_look function: \", str(e))\n        return df\n\n\ndef df_numeric_column_filler_with_aggregated_data(\n    df, group_list, column_to_be_filled, aggregation_method=\"median\"\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and filling missing values in the column of the dataframe.\n    :param df: Dataframe to be analyze\n    :param group_list: The list of columns\n    :param column_to_be_filled: The column's NaN values are filled.\n    :param aggregation_method: Aggregation method to be used while filling. Default value is 'median'.\n    :return: Dataframe\n    \"\"\"\n    try:\n        df_dummy = df.groupby(group_list)[column_to_be_filled].transform(\n            aggregation_method\n        )  # to see age group's aggregation_method\n\n        df.loc[\n            df[column_to_be_filled].isnull(), column_to_be_filled\n        ] = df_dummy  # to fill the NaN rows by df_dummy.\n\n        return df\n\n    except Exception as e:\n        print(\"Error at df_first_look function: \", str(e))\n        return df\n\n\ndef calculating_zscore(df, cols):\n    \"\"\"\n    This function gets a Python Pandas dataframe and calculating z score for column list.\n    :param df: Dataframe to be analyze\n    :param cols: The column list for calculating zscore.\n    :return: Returning Python Pandas dataframe.\n    \"\"\"\n    try:\n        df_dummy = df.copy()\n        for col in cols:\n            col_zscore = col + \"_zscore\"\n            df_dummy[col_zscore] = (df_dummy[col] - df_dummy[col].mean()) \/ df_dummy[\n                col\n            ].std(ddof=0)\n\n        return df_dummy\n\n    except Exception as e:\n        print(\"Error at df_first_look function: \", str(e))\n        return df\n","e5960469":"# util_reporting.py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef df_first_look(df):\n    \"\"\"\n    This function gets a Python Pandas dataframe and visualize basic information about the dataframe.\n    :param df: Dataframe to be analyze\n    :return: This function doesn't return anything.\n    \"\"\"\n    try:\n        print(\"First 5 rows of dataframe:\\n--------------------------\\n\", df.head())\n        print(\"\")\n        print(\"Last 5 rows of dataframe:\\n--------------------------\\n\", df.tail())\n        print(\"\")\n        print(\n            \"Row count of dataframe:\\n-----------------------\\n\",\n            df.shape[0],\n            \"\\nColumn count of dataframe:\\n--------------------------\\n\",\n            df.shape[1],\n        )\n        print(\"\")\n        print(\n            \"List of columns in the dataframe:\\n---------------------------------\\n\",\n            df.columns.values,\n        )\n        print(\"\")\n        print(\n            \"Looking NaN values and datatypes of columns in the dataframe:\\n--------------------------------------------\\n\"\n        )\n        print(df.info())\n        print(\"\")\n\n    except Exception as e:\n        print(\"Error at df_first_look function: \", str(e))\n\n\ndef df_descriptive_statistics(df, column_list):\n    \"\"\"\n    This function gets a Python Pandas dataframe and list of columns to visualize descriptive statistics about those columns.\n    :param df: Dataframe to be analyze\n    :param column_list: List of columns to filter out only numeric columns to use in the fuction\"\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    try:\n        dummy_df = df[column_list].copy()\n        print(\n            f\"Descriptive Statisctics for column:\\n--------------------------\\n\",\n            dummy_df.describe(),\n        )\n        print(\"\")\n        print(f\"Mode values for column:\\n--------------------------\\n\", dummy_df.mode())\n        print(\"\")\n    except Exception as e:\n        print(\"Error at df_descriptive_statistics function: \", str(e))\n\n\ndef df_pivot_aggregated_statistics(\n    df, column_list, to_be_calculated_column, descriptive_statistic_list\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and calculating aggregation by columns in the dataframe.\n    :param df: Dataframe to be analyze\n    :param column_list: It takes a column list.\n    :param to_be_calculated_column: Calculation aggregation for this column.\n    :param descriptive_statistic_list: It takes a list which we use descriptive statistic(Mean,Median,Standard dev,Min,etc.)\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    df_dummy = (\n        df.groupby(column_list)[to_be_calculated_column]\n        .agg(descriptive_statistic_list)\n        .round(2)\n    )\n    print(df_dummy)\n\n\ndef countplot_viz(\n    data,\n    xcolumn,\n    xlabel,\n    ylabel,\n    title,\n    hue=None,\n    fontsize_label=16,\n    fontsize_title=20,\n    rotation=45,\n    palette=\"mako\",\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and visualize a countplot.\n    :param data: Dataframe to be analyze\n    :param xcolumn: This column designates x axis column.\n    :param xlabel: It designates name of x axis column.\n    :param ylabel: It designates name of y axis column.\n    :param title: This column designates name of graph.\n    :param hue: Name of variables in `data` or vector data, optional Inputs for plotting long-form data.\n    :param fontsize_label: It designates label size.\n    :param fontsize_title: It designates title size.\n    :param rotation: It designates rotation of graph.\n    :param palette: It designates colors of graph.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    plt.figure(figsize=(12, 5))\n\n    sns.countplot(x=xcolumn, data=data, hue=hue, palette=palette)\n    plt.xlabel(xlabel, fontsize=fontsize_label)  # seting the xtitle and size\n    plt.ylabel(ylabel, fontsize=fontsize_label)  # Seting the ytitle and size\n    plt.title(title, fontsize=fontsize_title)\n    plt.xticks(rotation=rotation)\n    if hue != None:\n        plt.legend(bbox_to_anchor=(1, 1), loc=1, borderaxespad=0)\n    plt.show()\n\n\ndef multiple_plot_viz(\n    data,\n    column_for_separate,\n    column_for_calculate,\n    title_1,\n    title_2,\n    edgecolor=\"black\",\n    color_1=\"orange\",\n    color_2=\"blue\",\n    bins=20,\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and visualize two countplots.\n    :param data: Dataframe to be analyze\n    :param xcolumn: This column designates x axis column.\n    :param xlabel: It designates name of x axis column.\n    :param ylabel: It designates name of y axis column.\n    :param title_1: This column designates one of graphs' name.\n    :param title_2: This column designates one of graphs' name.\n    :param edgecolor: It designates egecolor of graphs.\n    :param color_1: It designates color of graph_1.\n    :param color_2: It designates color of graph_1.\n    :param bins: It designates size of histogram bins.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    f, ax = plt.subplots(1, 2, figsize=(15, 5))\n\n    data[data[column_for_separate] == 0][column_for_calculate].plot.hist(\n        ax=ax[0], bins=bins, edgecolor=edgecolor, color=color_1\n    )\n    ax[0].set_title(title_1)\n    x1 = list(range(0, 85, 5))\n    ax[0].set_xticks(x1)\n\n    data[data[column_for_separate] == 1][column_for_calculate].plot.hist(\n        ax=ax[1], bins=bins, edgecolor=edgecolor, color=color_2\n    )\n    ax[1].set_title(title_2)\n    x2 = list(range(0, 85, 5))\n    ax[1].set_xticks(x2)\n\n\ndef crosstab_viz(data, index_column_1, index_column_2, aggregated_column, cmap=\"mako\"):\n    \"\"\"\n    This function gets a Python Pandas dataframe and visualize a crosstab.\n    :param data: Dataframe to be analyze\n    :param index_column_1: This column works as a stpliter of pivot.\n    :param index_column_2: This column works as a stpliter of pivot.\n    :param aggregated_column: Calculation aggregation for this column.\n    :param cmap: It designates colors of graph.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    return pd.crosstab(\n        [data[index_column_1], data[index_column_2]],\n        data[aggregated_column],\n        margins=True,\n    ).style.background_gradient(cmap=cmap)\n\n\ndef factor_plot_viz(\n    data, index_column_1, index_column_2, aggregated_column, title_factor\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and visualize a factor plot.\n    :param data: Dataframe to be analyze\n    :param index_column_1: This column works as a stpliter of pivot.\n    :param index_column_2: This column works as a stpliter of pivot.\n    :param aggregated_column: Calculation aggregation for this column.\n    :param title_factor: It designates name of graph.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    plt.figure(figsize=(12, 5))\n    sns.factorplot(aggregated_column, index_column_2, hue=index_column_1, data=data)\n    plt.title(title_factor)\n\n\ndef relationship_viz(\n    data, index_column_1, index_column_2, aggregated_column, title_factor\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and concats two different graphs that are factorplot and crosstab.\n    :param data: Dataframe to be analyze\n    :param index_column_1: This column works as a stpliter of pivot.\n    :param index_column_2: This column works as a stpliter of pivot.\n    :param aggregated_column: Calculation aggregation for this column.\n    :param title_factor: It designates name of factorplot graph.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    factor_plot_viz(\n        data, index_column_1, index_column_2, aggregated_column, title_factor\n    )\n    return crosstab_viz(data, index_column_1, index_column_2, aggregated_column)\n\n\ndef swarmplot_viz(\n    df,\n    colum_1,\n    colum_2,\n    groupped_column,\n    xlabel,\n    ylabel,\n    title,\n    fontsize=15,\n    fontsize_title=17,\n    palette=\"mako\",\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and visualize a swarmplot for 2 column by a grouping column.\n    :param df: Dataframe to be analyze\n    :param column_list: list of columns.\n    :param groupped_column: Calculation aggregation for this column.\n    :param xlabel: It designates name of x axis column.\n    :param ylabel: It designates name of y axis column.\n    :param title_1: These columns designates name of graph1.\n    :param title_2: These columns designates name of graph2.\n    :param fontsize: It designates label size.\n    :param fontsize_title: It designates title size.\n    :param palette: It designates colors of graph.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    plt.figure(figsize=(15, 10))\n    plt.subplot(2, 1, 2)\n\n    sns.swarmplot(colum_1, colum_2, data=df, hue=groupped_column, palette=palette)\n    plt.xlabel(xlabel, fontsize=fontsize)\n    plt.ylabel(ylabel, fontsize=fontsize)\n    plt.title(title, fontsize=fontsize_title)\n\n    plt.subplots_adjust(hspace=0.5, top=0.9)\n\n\ndef boxplot_viz(\n    data,\n    xcolumn,\n    xlabel,\n    title,\n    hue=None,\n    fontsize_label=16,\n    fontsize_title=20,\n    rotation=45,\n    palette=\"mako\",\n):\n    \"\"\"\n    This function gets a Python Pandas dataframe and visualize a countplot.\n    :param data: Dataframe to be analyze\n    :param xcolumn: This column shows x axis column.\n    :param xlabel: It designates name of x axis column.\n    :param ylabel: It designates name of y axis column.\n    :param title: This column designates name of graph.\n    :param hue: Name of variables in `data` or vector data, optional Inputs for plotting long-form data.\n    :param fontsize_label: It designates label size.\n    :param fontsize_title: It designates title size.\n    :param rotation: It designates rotation of graph.\n    :param palette: It designates colors of graph.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    plt.figure(1, figsize=(9, 6))\n\n    sns.boxplot(x=xcolumn, data=data, hue=hue, palette=palette)\n    plt.xlabel(xlabel, fontsize=fontsize_label)  # seting the xtitle and size\n    plt.title(title, fontsize=fontsize_title)\n    plt.xticks(rotation=rotation)\n    plt.show()\n\n\ndef histogram_viz(\n    data,\n    column,\n    separate_column,\n    condition_1,\n    condition_2,\n    label1,\n    label2,\n    color1=None,\n    color2=None,\n):\n    \"\"\"\n    Gets a Python Pandas dataframe and visualize histogram by a column's conditions.\n    :param data: Dataframe to be analyze\n    :param column: This column is for showing data distribution.\n    :param separate_column: this colum is for creating histogram by a column's conditions.\n    :param condition_1: It designates condition of separate column.\n    :param condition_2: It designates condition of separate column.\n    :param label1: It designates label by condition_1.\n    :param label2: It designates label by condition_2.\n    :param color1: It designates color for condition_1.\n    :param color2: It designates color for condition_2.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n    plt.hist(\n        list(data[data[separate_column] == condition_1][column]),\n        alpha=0.5,\n        label=label1,\n        color=color1,\n    )\n    plt.hist(\n        list(data[data[separate_column] == condition_2][column]),\n        alpha=0.5,\n        label=label2,\n        color=color2,\n    )\n    plt.legend(loc=\"upper right\")\n    plt.show()\n\n\ndef distplot_viz(\n    data,\n    column,\n    separate_column,\n    condition_1,\n    condition_2,\n    label1,\n    label2,\n    title,\n    color1=None,\n    color2=None,\n):\n    \"\"\"\n    Gets a Python Pandas dataframe and visualize displot by a column's conditions. It shows density of column.\n    :param data: Dataframe to be analyze\n    :param column: This column is for showing data distribution.\n    :param separate_column: this colum is for creating histogram by a column's conditions.\n    :param condition_1: It designates condition of separate column.\n    :param condition_2: It designates condition of separate column.\n    :param label1: It designates label by condition_1.\n    :param label2: It designates label by condition_2.\n    :param title: It designates title for graph.\n    :param color1: It designates color for condition_1.\n    :param color2: It designates color for condition_2.\n    :return: This function doesn't return anything.\n\n    \"\"\"\n\n    plt.figure(figsize=(15, 5))\n    sns.distplot(\n        data[data[separate_column] == condition_1][column],\n        hist=False,\n        kde=True,\n        kde_kws={\"shade\": True, \"linewidth\": 3},\n        label=label1,\n    )\n    sns.distplot(\n        data[data[separate_column] == condition_2][column],\n        hist=False,\n        kde=True,\n        kde_kws={\"shade\": True, \"linewidth\": 3},\n        label=label2,\n    )\n    plt.title(title, fontsize=17)\n    plt.xlabel(column, fontsize=15)\n    plt.ylabel(\"Density\", fontsize=15)\n    plt.legend()\n\n\ndef correlation_chart(df, column_list):\n    \"\"\"\n    This function gets a Python Pandas dataframe and list of columns to visualize correlations among those columns.\n    :param df: Dataframe to be analyze\n    :param column_list: List of columns to filter out only numeric columns to use in the fuction\"\n    :return: This function doesn't return anything.\n    \"\"\"\n    plt.figure(figsize=(12, 8))\n    plt.title(\"Correlation of Features for Data Frame\")\n    sns.heatmap(df[column_list].corr(), vmax=1.0, annot=True, cmap=\"mako\")\n    plt.show()\n","8b2c271f":"# Uploading data set\ndf_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","7bd6ce6d":"df_first_look(df_train)","a17464f3":"# To see missing values with heatmap:\n\nsns.heatmap(df_train.isnull(), cbar=False, yticklabels=False, cmap=\"mako\")","294d3a1a":"df_train[\"Appellation\"] = df_train[\"Name\"].str.extract(\"([A-Za-z]+)\\.\")","251f80da":"countplot_viz(df_train, \"Appellation\", \"Appellation\", \"Count\", \"Appellation Count\")","24ade1aa":"df_train = extract_first_string(df_train, \"Name\", \"Appellation\")","10092512":"df_train.Appellation.value_counts()","2997843d":"# To see count of rows and count of missing values of Age column:\n\nprint(\"Count of non-missing rows of Age column:\", df_train[\"Age\"].count())\nprint(\"Count of missing rows of Age column:\", df_train[\"Age\"].isnull().sum())","5c9f369c":"column_list = [\"Sex\", \"Pclass\", \"Appellation\"]\ndescriptive_statistic_list = [\"mean\", \"median\"]\ndf_pivot_aggregated_statistics(df_train, column_list, \"Age\", descriptive_statistic_list)","f9dec631":"column_list = [\"Sex\", \"Pclass\", \"Appellation\"]\ndf_train = df_numeric_column_filler_with_aggregated_data(df_train, column_list, \"Age\")","d1656796":"# To see count of rows and count of missing values of Age column:\n\nprint(\"Count of full rows of Age column:\", df_train[\"Age\"].count())\nprint(\"Count of missing rows of Age column:\", df_train[\"Age\"].isnull().sum())","df8d236e":"df_train[\"Survived_\"] = np.where(df_train[\"Survived\"] == 1, \"survived\", \"died\")","24049a25":"df_train[\"Survived_\"].value_counts()","eabc8b8b":"countplot_viz(df_train, \"Survived_\", \"Survived & Died\", \"Count\", \"Count of Survived\")","dc2f70ff":"df_train.Pclass.value_counts()","91dde25a":"countplot_viz(df_train, \"Pclass\", \"Classes of passengers\", \"Count\", \"Count of Classes\")","8ae047f1":"list_of_column_descriptive = [\"Age\"]\ndf_descriptive_statistics(df_train, list_of_column_descriptive)","bdf32258":"boxplot_viz(df_train, \"Age\", xlabel=\"Age\", title=\"Boxplot of Age\")","93bce5fb":"cols = [\"Age\", \"Fare\"]\ndf_train = calculating_zscore(df_train, cols)","59215c12":"# Total outlier count\nprint(\n    \"Total outlier count:\",\n    df_train[(df_train[\"Age_zscore\"] > 3) | (df_train[\"Age_zscore\"] < -3)].shape[0],\n)","99421542":"list_of_column_descriptive = [\"Fare\"]\ndf_descriptive_statistics(df_train, list_of_column_descriptive)","9de61fa9":"boxplot_viz(df_train, \"Fare\", xlabel=\"Fare\", title=\"Boxplot of Fare\")","72b1ced3":"# Total outlier count\nprint(\n    \"Total outlier count:\",\n    df_train[(df_train[\"Fare_zscore\"] > 3) | (df_train[\"Fare_zscore\"] < -3)].shape[0],\n)","ec4099b4":"df_train.Sex.value_counts()","4c589495":"countplot_viz(df_train, \"Sex\", \"Gender of passengers\", \"Count\", \"Count of Genders\")","0b647738":"df_train.Appellation.value_counts()","8505093f":"countplot_viz(\n    df_train,\n    \"Appellation\",\n    \"Appellation of passengers\",\n    \"Count\",\n    \"Count of Appellation\",\n)","d8d509c7":"df_train.Embarked.value_counts()","d00466bc":"countplot_viz(df_train, \"Embarked\", \"Port of Embarkation\", \"Count\", \"Count of Ports\")","a5b654cb":"df_train.SibSp.value_counts()","e3926f1d":"countplot_viz(df_train, \"SibSp\", \"Categories of SibSp\", \"Count\", \"Count of Categories\")","f38e419f":"df_train.Parch.value_counts()","fba63b04":"countplot_viz(df_train, \"Parch\", \"Categories of Parch\", \"Count\", \"Count of Categories\")","d1e10456":"df_train.Survived.value_counts()","431dd073":"countplot_viz(\n    df_train, \"Survived_\", \"Categories of Survived\", \"Count\", \"Count of Categories\"\n)","5e7bc3f8":"distplot_viz(\n    data=df_train,\n    column=\"Age\",\n    separate_column=\"Survived_\",\n    condition_1=\"died\",\n    condition_2=\"survived\",\n    label1=\"died\",\n    label2=\"survived\",\n    title=\"Age Distribuition by Survived\",\n    color1=\"blue\",\n    color2=\"red\",\n)","4c4c5cca":"histogram_viz(\n    data=df_train,\n    column=\"Age\",\n    separate_column=\"Survived_\",\n    condition_1=\"died\",\n    condition_2=\"survived\",\n    label1=\"died\",\n    label2=\"survived\",\n    color1=\"blue\",\n    color2=\"red\",\n)","b8a787f2":"distplot_viz(\n    data=df_train,\n    column=\"Fare\",\n    separate_column=\"Survived_\",\n    condition_1=\"died\",\n    condition_2=\"survived\",\n    label1=\"died\",\n    label2=\"survived\",\n    title=\"Fare Distribuition by Survived\",\n    color1=\"blue\",\n    color2=\"red\",\n)","80c1b8a5":"histogram_viz(\n    data=df_train,\n    column=\"Fare\",\n    separate_column=\"Survived_\",\n    condition_1=\"died\",\n    condition_2=\"survived\",\n    label1=\"died\",\n    label2=\"survived\",\n    color1=\"blue\",\n    color2=\"red\",\n)","63aa0803":"pd.crosstab(df_train.Survived, df_train.Sex, margins=True).style.background_gradient(\n    cmap=\"mako\"\n)","491524a7":"countplot_viz(\n    df_train,\n    \"Sex\",\n    \"Sex\",\n    \"Count\",\n    \"Sex Count by Survived\",\n    hue=\"Survived_\",\n)","e4c31afe":"pd.crosstab(\n    df_train.Survived, df_train.Appellation, margins=True\n).style.background_gradient(cmap=\"mako\")","7af5b263":"countplot_viz(\n    df_train,\n    \"Appellation\",\n    \"Appellation\",\n    \"Count\",\n    \"Appellation Count by Survived\",\n    hue=\"Survived_\",\n)","d575f51c":"pd.crosstab(df_train.Survived, df_train.Pclass, margins=True).style.background_gradient(\n    cmap=\"mako\"\n)","e87de07f":"countplot_viz(\n    df_train,\n    \"Pclass\",\n    \"Pclass\",\n    \"Count\",\n    \"Pclass Count by Survived\",\n    hue=\"Survived_\",\n)","210feac2":"pd.crosstab(\n    df_train.Survived, df_train.Embarked, margins=True\n).style.background_gradient(cmap=\"mako\")","432ad670":"countplot_viz(\n    df_train,\n    \"Embarked\",\n    \"Embarked\",\n    \"Count\",\n    \"Embarked Count by Survived\",\n    hue=\"Survived_\",\n)","2b0495e4":"pd.crosstab(df_train.Survived, df_train.SibSp, margins=True).style.background_gradient(\n    cmap=\"mako\"\n)","d843b28b":"countplot_viz(\n    df_train,\n    \"SibSp\",\n    \"SibSp\",\n    \"Count\",\n    \"Sibling & Spouse Count by Survived\",\n    hue=\"Survived_\",\n)","361b35e9":"pd.crosstab(df_train.Survived, df_train.Parch, margins=True).style.background_gradient(\n    cmap=\"mako\"\n)","e56ab074":"countplot_viz(\n    df_train,\n    \"Parch\",\n    \"Parch\",\n    \"Count\",\n    \"Parents & Children Count by Survived\",\n    hue=\"Survived_\",\n)","53c01263":"relationship_viz(\n    df_train, \"Sex\", \"Survived\", \"Pclass\", title_factor=\"Pclass & Sex & Survived\"\n)","9d918e76":"swarmplot_viz(\n    df_train,\n    \"Pclass\",\n    \"Fare\",\n    \"Survived_\",\n    \"Pclass Categories\",\n    \"Fare Distribution\",\n    \"Fare Distribution by Pclass Categories\",\n)","cf21e13c":"# lets look the correlation of df_train:\n\ncolumn_list = [\"Age\", \"Fare\", \"SibSp\", \"Parch\", \"Survived\", \"Pclass\"]\n\ncorrelation_chart(df_train, column_list)","7dac8c4d":"### SibSp:","d470eca3":"### Appellation:","6f6bc9d2":"### Sex-Pclass & Survived:","a15cce09":"### To Fill Missing Values:\n### Age Column:","8612c735":"* I called `distplot_viz` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and visualize displot by a column's conditions. \n    * It shows density of column. ","cb72865c":"##### Observation:\n* Most of passengers boarded The Titanic from Southampton. ","db76ad88":"* `Definition:` Embarked column shows the port of Embarkation.\n* `Categories & Labels:` C = Cherbourg, Q = Queenstown, S = Southampton","5e536643":"##### How to Read The Graph: \n* Crosstab shows survived or died people's count by sex and pclass. \n* Factorplot (Point plots) can be more useful than bar plots for focusing comparisons between different levels of one or more categorical variables. They are particularly adept at showing interactions: how the relationship between levels of one categorical variable changes across levels of a second categorical variable. The lines that join each point from the same hue level allow interactions to be judged by differences in slope, which is easier for the eyes than comparing the heights of several groups of points or bars.","2f726095":"##### How to Read The Graph: \n* This graph shows count of survived or died people by class of passengers' ticket. \n* x column shows class of tickets, y column shows counts of class of tickets by Survived.","80f34336":"##### How to Read The Graph:  \n* These graphs show count of survived and died passengers' age. \n* x column shows ages of passengers, y column shows frequency of Ages.","3669d3ea":"##### To Have Some Idea for Input in NaNs of Age Column with \"df_pivot_aggregated_statistics\" Function:\n* I called `df_pivot_aggregated_statistics` from  `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and calculating aggregation by columns in the dataframe.\n    * We look mean and median values of columns for using filling NaN values of Age column. ","a335b46f":"# Exploratory Data Analysis(EDA) with Titanic Data Set\n\nIn this kernel I did deep dive Exploratory Data Analysis(EDA) on the Titanic Disaster dataset to understand patterns of surviving passengers. Don\u2019t forget to upvote if you find this kernel helpful. I suggest you also read the complete dataset overview and data description found in [The Titanic - Machine Learning from Disaster page.](http:\/\/www.kaggle.com\/c\/titanic) \n\nI intentionally share all of my code. My aim is to have a good EDA code base that will minimise the development process for the next projects at the backlog.\n\nYou can glance at my util function notebooks to have an idea how i eased the EDA process at my [GitHub page.](http:\/\/github.com\/ElifKarakutukDinc\/Titanic) \n\n","d53677d6":"##### For Extracting:\n* I called `extract_first_string` from `util_data_cleaning.py`.\n* This function does;\n    * Extracting the middle string from name column in the dataframe.\n    * Replacing values with correct values in new column.","3a14bba7":"### Pclass & Survived:","fb1a303c":"* I called `countplot_viz` from `util_reporting.py`\n* This function does;\n    * This function visualizes a countplot.","dbfaab75":"##### How to Read The Graph: \n* This graph shows distribution of fare column by survived column. \n* x column shows distribution of fare, y column shows density.","98e43332":"* `Definition:` Pclass column shows the ticket class of passengers.\n* `Categories & Labels:` 1 = 1st, 2 = 2nd, 3 = 3rd","9ab0135d":"##### Observation:\n* Descriptive Statisctics: \n    * Median and mode values are equal but mean is slightly bigger. Because of this situation distribution is right skewed (positive skew). \n    * Avg passengers age shows that most of passengers are young.\n* Boxplot Graph and zscore Table:\n    * There are 7 outliers in the Age column. ","fa77e667":"### Parch(Parents\/Children) & Survived:","27856144":"##### Observation:\n* Gender is stated for all passengers. So there is no any NaN values at Sex column.  \n* Counts of male passengers more than female passengers. ","53ec7b5d":"### Age :","1c9f392c":"* I called `calculating_zscore` from `util_data_cleaning.py`.\n* This function does;\n    * This function calculating z score for column list. \n    * We calculated z score for age and fare columns. We'll use fare at the below lines. ","1bbd5170":"* `Definition:` This feature represents whether a person is alone or with his family members.\n* `Categories & Labels:`\n    * Sibling = brother, sister, stepbrother, stepsister\n    * Spouse = husband, wife\n    * 0,1,2,3,4,5,6,7,8 = Number of family person ","f0eb8d3f":"##### How to Read The Graph: \n* This graph shows count of Parent\/Child. \n* x column represents categories of Parent\/Child, y column shows counts of categories.","cba2a701":"* I called `correlation_chart` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and column list to visualize a correlation chart among those variables.","7c50e22d":"* `Definition:` Sex column shows the gender of passengers.\n* `Categories & Labels:` male, female","bcf55f60":"### Changing Categorical Column's Values: \n### Survived Column:","9a633fb6":"* Survived column has two categories: 0 and 1. Sinse this column is coded numericaly it is not easy to understand which value equal to which label. So I'm coding new values: `1 = \"survived\", 0 = \"died\"`. ","8993acf3":"##### How to Read The Graph: \n* This graph shows distribution of age column by survived column. \n* x column shows distribution of age, y column shows density.","ef878943":"##### How to Read The Graph: \n* This graph shows description statistics of Age column. \n* `The minimum` (the smallest number in the data set). The minimum is shown at the far left of the chart, at the end of the left \u201cwhisker.\u201d\n* `First quartile`, Q1, is the far left of the box (or the far right of the left whisker).\n* `The median` is shown as a line in the center of the box.\n* `Third quartile`, Q3, shown at the far right of the box (at the far left of the right whisker).\n* `The maximum` (the largest number in the data set), shown at the far right of the box.\n* Data sets can sometimes contain `outliers` that are suspected to be anomalies (perhaps because of data collection errors or just plain old flukes). If outliers are present, the whisker on the appropriate side is drawn to 1.5 * IQR rather than the data minimum or the data maximum. Small circles or unfilled dots are drawn on the chart to indicate where suspected outliers lie. Filled circles are used for known outliers.","470903aa":"##### How to Read The Graph: \n* This graph shows description statistics of Fare column. \n* `The minimum` (the smallest number in the data set). The minimum is shown at the far left of the chart, at the end of the left \u201cwhisker.\u201d\n* `First quartile`, Q1, is the far left of the box (or the far right of the left whisker).\n* `The median` is shown as a line in the center of the box.\n* `Third quartile`, Q3, shown at the far right of the box (at the far left of the right whisker).\n* `The maximum` (the largest number in the data set), shown at the far right of the box.\n* Data sets can sometimes contain `outliers` that are suspected to be anomalies (perhaps because of data collection errors or just plain old flukes). If outliers are present, the whisker on the appropriate side is drawn to 1.5 * IQR rather than the data minimum or the data maximum. Small circles or unfilled dots are drawn on the chart to indicate where suspected outliers lie. Filled circles are used for known outliers.","85585d08":"##### How to Read The Graph: \n* This graph shows count of survived or died people. \n* x column shows situations, y column shows counts of situations.","a29db061":"##### Observation:\n* Most of passengers who boarded The Titanic had not parent or child\n* In other passengers, most of passenger has one or two parent\/child. ","0aa800b9":"##### To Fill NaNs Values:\n* I called `df_numeric_column_filler_with_aggregated_data` from `util_data_cleaning.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and filling missing values in the column of the dataframe.\n    * It works like at above cell and fills all NaN rows with median values of columns. ","00ee9f0d":"* I called `histogram_viz` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and visualize histogram by a column's conditions.","81aaab70":"### Target Variables:\n### Survived:","95f076a0":"* `Definition:` Survived column shows passengers were survived or died.\n* `Categories & Labels:` Died, Survived","96fa0da1":"* `Definition:` Fare column shows the fares of passengers. \n    \n* I called `df_descriptive_statistics` from `util_reporting.py`.\n    * This function does;\n    * Gets a Python Pandas dataframe and list of columns to visualize descriptive statistics about those columns.","ea3f63c7":"##### Observation:\n* Most of passengers who boarded The Titanic had not Sibling\/Spouse. \n* In other passengers, most of passenger has one sibling or spouse.","7db2450b":"##### How to Read The Graph: \n* This graph shows count of passengers' ticket classes. \n* x column shows classes, y column shows counts of classes.","548b9a1b":"##### Observations:\n* Age Distribuition by Survived: \n    * Density axis shows most of died passengers' age are at 25-30 age scale. \n    * Density axis is extensive at survived passengers. it shows most of Survived passengers age are at 18-40 age scale. \n* Multiple Plot (Died & Survived):\n    * The age<5 were survived in large numbers(The Women and Child First Policy).\n    * The group of between 17 and 36 were saved in large numbers. \n    * The oldest Passenger was saved(80 years).\n    * Maximum number of deaths were in the age group of 23-27.","580aba18":"* I called `histogram_viz` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and visualize histogram by a column's conditions.","ba76e472":"##### How to Read The Graph: \n* This graph shows count of survived or died people by port of embarkation. \n* x column shows ports, y column shows count of ports by Survived.","310be245":"* I called `boxplot_viz` from `util_reporting.py`.\n* This function does;\n    * This function visualizes a boxplot for a column.","69ee833e":"##### Observation:\n* We changed categorical names as Survived and Died.\n* Count of died people more than count of survived people. ","0f7ca2da":"### Fare & Survived:","a2dbb6a8":"##### Observation:\n* We can see the discrimination between classes. First class more survived than third class.  \n* Death rate by class:\n    * %67,75 third class\n    * %17,66 second class\n    * %14,59 first class \n* Survived rate by class:\n    * %34,80 third class\n    * %25,43 second class\n    * %39,76 first class","7712b6dd":"##### How to Read The Graph: \n* This graph shows count of Port of Embarkation. \n* x column represents Ports, y column shows counts of Ports.","ef73388c":"##### Observations:\n* This charts confirmed us about women and children survived more than men.","cbb302ab":"##### How to Read The Graph: \n* This graph shows count of survived or died people. \n* x column shows situations, y column shows counts of situations.","9104b4c0":"##### Observation:\n* As we saw at sex column, counts of male passengers more than female passengers. \n* There are children and employees. ","630c84ee":"* `Definition:` Appellation column shows the title of passengers.\n* There were lots of spelling mistake at the column. We changed wrong names and categorize some names at the above cells.  \n* `Categories & Labels:` Mr, Miss,Mrs, Master, Officer","5c4ddc15":"### SibSp(Sibling\/Spouse) & Survived:","f1926cd0":"* %20 of Age column rows are missing. ","3c35e2a2":"### Embarked & Survived:","db2a59ae":"## Data Data Wrangling:\n### To Extract Appellation from Names:\n* This cell extracts appellations from Name column and create a new column with appellations. ","9b69cddf":"##### How to Read The Graph: \n* This graph shows count of survived or died people by class of appellation of passengers. \n* x column shows appellations, y column shows counts of appellation of passengers by Survived.","d3657f18":"##### Observation:\n* %68,17 of passengers had not sibling and spouse.\n* %61,17 of survived passengers were alone. %34,21 of alone passengers were survived. \n* If person have 1 or 2 family member, survived chance increase. But if they have more family member, survived chance decrease. Probably they tried to save all of them but they didn't it. ","b6e062ab":"### Sex:","7fb771e1":"## Multivariate Relationships:","597af690":"### Appellation & Survived:","4d22124c":"##### How to Fill Missing Values (NaN)? \n* We can fill as appellation of People for example;\n    * `df_train.groupby('appellation')['Age'].mean()` To check the average age by appellation.\n    * `df_train.loc[(df_train.Age.isnull())&(df_train.appellation == 'Mr'),'Age']=33`   Assigning the NaN Values with the found values of the mean ages (We do it for each appellation) \n    * I don't choose this option. Because I have to prepare same line for each appellation again and again.\n\n* We can add some condition for doing specific filling. To group the median age by sex, pclass and title, to have any idea and maybe input in Age NaN's: \n    * `df_train.groupby([\"Sex\",\"Pclass\",\"appellation\"])[\"Age\"]` We can fill by sex, class of tickets and appellations.  \n    * `df_train.loc[df_train.Age.isnull(), 'Age'] = df_train.groupby(['Sex','Pclass','appellation']).Age.transform('median')` Using the groupby to transform this variables\n    \n* We can create a `function` with this formulation. Also we can use it at other columns that have missing values or we can use it at future projects.   ","562e6d45":"* `Definition:` Age column shows the ages of passengers. \n* Age column had 177 NaN value rows. We filled all of them at the above cells.  \n\n\n* I called `df_descriptive_statistics` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and list of columns to visualize descriptive statistics about those columns.","c6cd1eff":"### Fare:","3a4e6b6f":"##### Observation:\n* Because of The Women and Child First Policy, women survived more than men. \n* %26 of women dead, %74 of women was survived. \n* %81 of men dead, %19 of men was survived. ","27fe731f":"# Exploratory Data Analysis(EDA)\nExploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns, to spot anomalies, to test hypothesis and to check assumptions with the help of summary statistics and graphical representations.\n\n* To take a closer look at the data take help of `.head()` function of Pandas library which returns first five observations of the data set. Similarly `.tail()` returns last five observations of the data set.\n* To find out the total number of rows and columns in the data set by using`.shape`.\n* To see label of each columns in the data set by using `.columns.values`\n* It is also a good practice to know the columns and their corresponding data types, along with finding whether they contain null values or not with `.info()`\n* The `.describe()` function in pandas is very handy in getting various summary statistics.This function returns the count, mean, standard deviation, minimum and maximum values and the quantiles of the data.\n* To get a couple of key insights just by looking at dependent variable are as follows:\n    * `.column.unique()`\n    * `.column.value_counts()`\n* To chech missing values in the data set's columns by using `.isnull().sum()`\n* To use `linear regression` for modelling, its necessary to remove correlated variables to improve your model. One can find correlations using pandas `.corr()` function and can visualize the correlation matrix using a heatmap in seaborn;\n    * Dark shades represents positive correlation while lighter shades represents negative correlation.\n    * If you set annot=True, you\u2019ll get values by which features are correlated to each other in grid-cells.\n    * It\u2019s a good practice to remove correlated variables during feature selection.\n* To check `Outliers`: `A box plot` (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution.\n* To check `the linearity of the variables` it is a good practice to `plot distribution graph` and look for skewness of features. Kernel density estimate (kde) is a quite useful tool for plotting the shape of a distribution.","25bad764":"##### Observation:\n* There are lots of spelling mistake at the column. \n* We can change wrong names and categorize some names. ","366a59ce":"### Fare-Pclass and Survived:","00b06e52":"##### Observation:\n* The cheapest ticket fare belong Third class. As we see from blue points count, most of died in this class. \n* The most expensive ticket fare belong first class. \n* Those who paid the highest fares were survived.","e69860ee":"### Embarked:","a89a1ce7":"##### Observations:\n* Fare Distribuition by Survived: \n    * Density axis shows most of died passengers' fare of tickets are cheapest. \n    * Density axis is extensive at survived passengers. As we see, People has survived who had most expensive fare tickets.   \n* Multiple Plot (Died & Survived):\n    * The most of died is fare<25. \n    * The number of deaths is lower in people who pay high fares.\n    * The majority of rescued people were in the fare<100 group We can attribute this to the fact that there are more people in that group.","536364d2":"##### How to Read The Graph: \n* This graph shows count of non-replaced appellations. \n* x column represents Appelations, y column shows counts of Appelations.","045ed35f":"##### How to Read The Graph: \n* This graph shows survived or died people's count of Parents & Children. \n* x column shows Parents & Children count, y column shows count of Parents & Children by Survived.","94bc8363":"##### How to Read The Graph: \n* This graph shows fare distribution of survived or died people by ticket class.\n* x column shows ticket class categories, y column shows fare distributions.\n* All point represents each passenger. ","9d639232":"* `Definition:` This feature represents whether a person is alone or with his family members.\n* `Categories & Labels:`\n    * Parent = mother, father\n    * Child = daughter, son, stepdaughter, stepson\n    * Some children travelled only with a nanny, therefore parch=0 for them.\n    * 0,1,2,3,4,5,6 = Number of family person ","ef48cc1e":"##### How to Read The Graph: \n* This graph shows count of passengers' genders. \n* x column shows genders, y column shows counts of gender.","d676b319":"##### How to Read The Graph: \n* This graph shows survived or died people's count of Sibling & Spouse. \n* x column shows Sibling & Spouse count, y column shows count of Sibling & Spouse by Survived.","63b8f9fa":"* I called `swarmplot_viz` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and visualize a swarmplot for 2 column by a grouping column.","54ada9ac":"##### Observation:\n* Descriptive Statisctics: \n    * Avg, median and mode are totally different. Distribution is right skewed (positive skew). Avg passengers fare shows that most of passenger took cheaper ticket.\n* Boxplot Graph and zscore Table: \n    * There are 20 outliers in the Age column. We can see these at boxplot and zscore table. \n    * Because of outliers first class ticket's fare, outliers happened. \n","60ecb53b":"##### How to Read The Graph: \n* This graph shows count of survived or died people by their gender. \n* x column shows genders, y column shows counts of gender by Survived.","a290111f":"## Understanding Variables:\n### Independent Variables:\n### Pclass:","f377d7a9":"##### Observation:\n* All Classes have passengers. \n* Most of passenger has 3rd class ticket.  \n* Counts of 1st and 2nd class are closely each other. ","ee1f6a18":"##### Observations:\n* We can see the discrimination between classes. First class more survived than third class.  \n* It is evident that irrespective of Pclass, Women were given first priority while rescue. Even Men from Pclass1 have a very low survival rate. \n* Women death rate by class:\n    * %50 third class\n    * %7,89 second class\n    * %3,19 first class \n* Men death rate by class:\n    * %86,45 third class\n    * %84,25 second class\n    * %63,11 first class","5d58bd7e":"##### How to Read The Graph: \n* This graph shows distribution of fare column by survived column. \n* x column shows distribution of fare, y column shows density.","5376e7a9":"##### How to Read The Graph: \n* This graph shows count of replaced appellations. \n* x column represents Appelations, y column shows counts of Appelations.","3f162fa7":"##### Observation:\n* Count of died people more than count of survived people. ","95b2d130":"##### How to Read The Graph: \n* This graph shows count of Sibling\/Spouse. \n* x column represents categories of Sibling\/Spouse, y column shows counts of categories.","c37b67f0":"##### Observation:\n* %76,09 of passengers had not any parent or child.\n* %68,12 of survived passengers were alone. %34,36 of alone passengers were survived. \n* If person have 1, 2 or 3 family member, survived chance increase. But if they have more family member, survived chance decrease. Probably they tried to save all of them but they didn't it. It is same with SibSp column. ","e3d499b1":"##### Observations:\n* Death rate by Port of Embarkation:\n    * %8,56 C = Cherbourg, France\n    * %13,67 Q = Queenstown,Ireland\n    * %77,77 S = Southampton, England\n\n\n* Survived rate of Ports: \n    * %55,36 of Cherbourg passengers were survived.\n    * %38,96 of Queenstown passengers were survived.\n    * %33,70 of Southampton passengers were survived.\n    * The chances for survival for Port C is highest around 0.55 while it is lowest for S.","ffa22ffc":"## Bivariate Relationships:","f66159fc":"##### How to Read The Graph: \n* This graph shows correlation of columns in data set.\n* x column and y column shows columns of data set. \n* The brighter the color the higher the positive correlation, the darker the color the greater the negative correlation. \n* The first thing to note is that only the numeric features are compared as it is obvious that we cannot correlate between alphabets or strings.\n* Correlation coefficient formulas are used to find how strong a relationship is between data. The formulas return a value between -1 and 1, where:\n    * 1 indicates a strong positive relationship.\n    * -1 indicates a strong negative relationship.\n    * A result of zero indicates no relationship at all.","3a95694a":"##### Observation:\n* We changed wrong names.\n* We categorized some names as \"Officer\". \n* After all changing, the column is more understandable. ","02c9a4d8":"* I called `distplot_viz` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and visualize displot by a column's conditions. \n    * It shows density of column. ","20a5eafd":"## Data Understanding:","7d240022":"### Sex & Survived: ","80a856bd":"* I called `boxplot_viz` from `util_reporting.py`.\n* This function does;\n    * This function visualizes a boxplot for a column.","daa1a7ce":"### Age & Survided: ","bbc14b3c":"##### Observation:\n* From the above heatmap,we can see that the features are not much correlated. \n* The highest positive correlation is between SibSp and Parch i.e 0.41. \n* The highest negative correlation is between Pclass and Fare i.e -0.55. ","65bd6ce8":"### Parch:","d0a9915b":"### The First Looking to Data Set:\n* I called `df_first_look` from `util_reporting.py`. \n* This function returns;\n    * First 5 rows of dataframe\n    * Last 5 rows of dataframe\n    * Row count of dataframe\n    * Column count of dataframe\n    * List of columns in the dataframe\n    * Looking NaN values and datatypes of columns in the dataframe","d761c8b6":"* I called `relationship_viz` from `util_reporting.py`.\n* This function does;\n    * Gets a Python Pandas dataframe and concats two different graphs that are factorplot and crosstab. ","bbc25ce9":"## The Correlation Chart"}}