{"cell_type":{"091fd97c":"code","e12dc28e":"code","fdff6a3d":"code","691fdbd5":"code","f7d17f15":"code","c32fb567":"code","f915e6aa":"code","8e9d8e63":"code","d9330b91":"code","43d5c87d":"code","f910ef65":"code","065e177d":"code","e01502e9":"code","82a6157e":"code","f2f17c5f":"code","e65b000f":"code","4fddfb08":"code","daa28157":"code","aa2be3ad":"code","f4bdb649":"code","c93a5684":"code","e0fea046":"code","1ad43992":"code","28e7209c":"code","f07fd647":"code","82dfb958":"code","368d234c":"code","1c589481":"code","42579dcf":"code","8d51fdec":"code","118fefc7":"code","6f6b07c2":"code","e868666e":"code","2b3a4b84":"code","91a67145":"code","2afd35e2":"code","7d4bea37":"code","020cf13b":"code","7d5303f6":"code","067d0ef9":"code","62224a15":"code","420c7d89":"code","3aa5de96":"markdown","0da42c25":"markdown","2f58381f":"markdown","417af53f":"markdown","0e91d2b0":"markdown"},"source":{"091fd97c":"import pandas as pd \ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","e12dc28e":"train.head()","fdff6a3d":"gender.head()","691fdbd5":"test.head()","f7d17f15":"test = pd.merge(test,gender,on=['PassengerId'])\ntest.head()","c32fb567":"train.info()\ntest.info()","f915e6aa":"for i in train['Age'] : \n    train['Age'].fillna(train['Age'].median(), inplace = True)\nfor j in test['Age'] : \n    test['Age'].fillna(test['Age'].median(), inplace = True)\n\nfor k in train['Embarked'] :\n    train['Embarked'].fillna(train['Embarked'].mode()[0], inplace = True)\nfor l in test['Embarked'] :\n    test['Embarked'].fillna(test['Embarked'].mode()[0], inplace = True)","8e9d8e63":"train.info()\ntest.info()","d9330b91":"#Changing the sex column with 0 and 1\ndef gen(Gen):\n    if Gen == 'male':\n        return 0\n    elif Gen == 'female':\n        return 1\ntrain['Sex'] = train['Sex'].apply(gen)\ntest['Sex'] = test['Sex'].apply(gen)","43d5c87d":"train['Title'] = [i.split('.')[0] for i in train.Name.astype('str')]\ntrain['Title'] = [i.split(',')[1] for i in train.Title.astype('str')]\ntrain.head()","f910ef65":"test['Title'] = [i.split('.')[0] for i in test.Name.astype('str')]\ntest['Title'] = [i.split(',')[1] for i in test.Title.astype('str')]\ntest.head()","065e177d":"test['Embarked'].unique()","e01502e9":"import seaborn as sns \nimport matplotlib.pyplot as plt\nplt.subplots(figsize=(10,8))\nsns.countplot(x=\"Embarked\",data=train,hue = \"Survived\").set_title(\"Embarked in Titanic \")","82a6157e":"train['Embarked'].value_counts()","f2f17c5f":"train['Pclass'].unique()","e65b000f":"train['Pclass'].value_counts()","4fddfb08":"plt.subplots(figsize=(10,8))\nsns.countplot(x=\"Pclass\",data=train,hue = \"Survived\").set_title(\"Pclass in Titanic \")","daa28157":"train['Title'].unique()","aa2be3ad":"def Title(t):\n    if t == ' the Countess' or t == ' Mlle' or t == ' Sir' or t == ' Ms' or t ==' Lady' or t ==' Mme':\n        return \"special\"\n    elif t == ' Mrs':\n        return ' Mrs'\n    elif t == ' Miss':\n        return ' Miss'\n    elif t == ' Master':\n        return ' Master'\n    elif t == ' Col':\n        return ' Col'\n    elif t == ' Major':\n        return ' Major'\n    elif t == ' Dr':\n        return ' Dr'\n    elif t == ' Mr':\n        return ' Mr'\n    else:\n        return 'another'\n\ntrain['Title'] = train['Title'].apply(Title)\ntest['Title'] = test['Title'].apply(Title)","f4bdb649":"train['Title'].value_counts()","c93a5684":"plt.subplots(figsize=(10,8))\nsns.countplot(x=\"Title\",data=train).set_title(\"People in Titanic based on the title\")","e0fea046":"#graph distribution of quantitative data\nplt.figure(figsize=[16,12])\n\n\nplt.subplot(234)\nplt.hist(x = [train[train['Survived']==1]['Fare'], train[train['Survived']==0]['Fare']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Fare Histogram by Survival')\nplt.xlabel('Fare ($)')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(235)\nplt.hist(x = [train[train['Survived']==1]['Age'], train[train['Survived']==0]['Age']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Age Histogram by Survival')\nplt.xlabel('Age')\nplt.ylabel('# of Passengers')\nplt.legend()\n","1ad43992":"drop_column = ['PassengerId']\ntrain.drop(drop_column, axis=1, inplace = True)\ntest.drop(drop_column, axis=1, inplace = True)","28e7209c":"train.groupby('Survived').mean()","f07fd647":"train = pd.get_dummies(train, columns = ['Embarked'])\ntest = pd.get_dummies(test, columns = ['Embarked'])","82dfb958":"drop_column = ['Cabin', 'Ticket']\ntrain.drop(drop_column, axis=1, inplace = True)\ntest.drop(drop_column, axis=1, inplace = True)","368d234c":"train = pd.get_dummies(train, columns = ['Title'])\ntest = pd.get_dummies(test, columns = ['Title'])","1c589481":"train.head()","42579dcf":"x = train.iloc[:,3:]  #delete target column from train dataset\ny = train['Survived'] # test dataset  ","8d51fdec":"from sklearn.model_selection import train_test_split\n# divide dataset into 65% train, and other 35% test.\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.35, random_state=0)","118fefc7":"train['Survived'].unique()","6f6b07c2":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix \nclassifier1 = KNeighborsClassifier(n_neighbors=2)\nclassifier1.fit(x_train, y_train)\n#Predicting the Test set results \ny_pred = classifier1.predict(x_test)\n#Making the confusion matrix \ncm = confusion_matrix(y_test,y_pred)\n\n\nsns.heatmap(cm, annot=True, linewidth=5, cbar=None)\nplt.title('KNN Classifier confusion matrix')\nplt.ylabel('True label')\nplt.xlabel('predicted label')","e868666e":"print('accuracy of train dataset is',classifier1.score(x_train, y_train))\nprint('accuracy of test dataset is',classifier1.score(x_test, y_test))","2b3a4b84":"#classification report for the test set\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","91a67145":"from sklearn.svm import SVC \nclassifier2 = SVC(kernel = 'rbf', random_state = 0)\nclassifier2.fit(x_train, y_train)\n#Predicting the Test set results \ny_pred = classifier2.predict(x_test)\n#Making the confusion matrix \n#from sklearn.metrics import confusion_matrix \ncm = confusion_matrix(y_test,y_pred)\n\n\n\nsns.heatmap(cm, annot=True, linewidth=5, cbar=None)\nplt.title('SVM with rbf kernel Classifier confusion matrix')\nplt.ylabel('True label')\nplt.xlabel('predicted label')","2afd35e2":"print('accuracy of train dataset is',classifier3.score(x_train, y_train))\nprint('accuracy of test dataset is',classifier3.score(x_test, y_test))","7d4bea37":"#classification report for the test set\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","020cf13b":"from sklearn.tree import DecisionTreeClassifier\nclassifier3 = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier3.fit(x_train, y_train)\n#Predicting the Test set results \ny_pred = classifier3.predict(x_test)\n#Making the confusion matrix \n#from sklearn.metrics import confusion_matrix \ncm = confusion_matrix(y_test,y_pred)\n\nsns.heatmap(cm, annot=True, linewidth=5, cbar=None)\nplt.title('Decision Tree Classifier confusion matrix')\nplt.ylabel('True label')\nplt.xlabel('predicted label')","7d5303f6":"print('accuracy of train dataset is',classifier3.score(x_train, y_train))\nprint('accuracy of test dataset is',classifier3.score(x_test, y_test))","067d0ef9":"#classification report for the test set\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","62224a15":"from sklearn.ensemble import RandomForestClassifier \n\nclassifier4 = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier4.fit(x_train,y_train)\n#Predicting the Test set results \ny_pred = classifier4.predict(x_test)\n#Making the confusion matrix \n#from sklearn.metrics import confusion_matrix \ncm = confusion_matrix(y_test,y_pred)\n\nsns.heatmap(cm, annot=True, linewidth=5, cbar=None)\nplt.title('RF with with entropy impurity Classifier confusion matrix')\nplt.ylabel('True label')\nplt.xlabel('predicted label')","420c7d89":"print('accuracy of train dataset is',classifier4.score(x_train, y_train))\nprint('accuracy of test dataset is',classifier4.score(x_test, y_test))","3aa5de96":"2. SVM with rbf (radial basis function) kernel","0da42c25":"**Feature selection to do classification by using ML method**","2f58381f":"1. K - Nearest neighbour","417af53f":"knowing the class that will be classified based on the data","0e91d2b0":"**Make the classification, to predict anyone who survived or not by using various classifier**"}}