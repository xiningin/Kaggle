{"cell_type":{"28eb6f18":"code","026de96b":"code","6a9206ab":"code","e901b1ad":"code","e6a59854":"code","ad2ea50d":"code","4feb08c1":"code","0d580ba6":"code","98438339":"code","f848f9df":"code","fd854929":"code","f7b64b82":"code","fdb96d90":"code","e287ea2d":"code","670e497c":"code","d7c4b07d":"code","857f927c":"code","b2305909":"code","280ed4bd":"code","2f579a7b":"code","4f54e2d3":"code","f30c3176":"code","74ec7f66":"code","cec2ce2a":"code","5a3ace5f":"code","3b295b98":"code","252e718c":"code","fee0d953":"code","67b1b19d":"code","14f92a43":"code","d9ddef8f":"code","2ab29642":"code","fd8f833a":"code","18091b66":"code","88218031":"code","71d56891":"code","a38cdafb":"code","2c71a03c":"code","b0c090f6":"code","4e68fd69":"code","0204a54a":"code","08da93bd":"code","c761f2d3":"code","30df93b8":"code","0a11e43e":"code","4bcd817e":"code","5901e09f":"code","1c3c12c4":"code","4e36c781":"code","c1c6d8e7":"code","32ccc584":"code","acdde0a0":"code","72ab00ee":"code","5b20c899":"code","6fea61b0":"code","23bb5892":"code","1cb05b3e":"code","e975c760":"code","a43f79a7":"code","123b3f90":"code","bb16737f":"code","18175451":"markdown"},"source":{"28eb6f18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model, metrics, model_selection\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","026de96b":"titanic=pd.read_csv('..\/input\/titanicdataset-traincsv\/train.csv')","6a9206ab":"titanic.head(5)","e901b1ad":"titanic[\"Sex\"].replace({\"male\": \"0\", \"female\": \"1\"}, inplace=True)","e6a59854":"titanic[\"Cabin\"].fillna(0)","ad2ea50d":"titanic.head(20)","4feb08c1":"\nle = preprocessing.LabelEncoder()\nle.fit(titanic[\"Cabin\"])\n\n","0d580ba6":"classes=list(le.classes_)\n","98438339":"titanic[\"Cabin\"]=le.transform(titanic[\"Cabin\"])\n","f848f9df":"\n\n  \n# Creating an instance of the sklearn.preprocessing.MinMaxScaler()\nscaler = MinMaxScaler()\n  \n# Scaling the Price column of the created dataFrame and storing\n# the result in ScaledPrice Column\ntitanic[[\"Cabin\"]] = scaler.fit_transform(titanic[[\"Cabin\"]])","fd854929":"titanic[\"Cabin\"].head(4)","f7b64b82":"titanic[\"Fare\"]=titanic[\"Fare\"].values.astype(int)","fdb96d90":"titanic[\"Cabin\"].value_counts()","e287ea2d":"mean=np.mean(titanic['Age'])\ntitanic['Age']=titanic[\"Age\"].fillna(mean)","670e497c":"titanic[\"Age\"]=titanic[\"Age\"].values.astype(int)\ntitanic[\"Parch\"]=titanic[\"Parch\"].values.astype(int)\ntitanic[\"SibSp\"]=titanic[\"SibSp\"].values.astype(int)","d7c4b07d":"titanic.dtypes","857f927c":"len(titanic)-titanic[\"Embarked\"].count()","b2305909":"titanic[\"Embarked\"].replace({\"C\": \"1\", \"S\": \"2\",\"Q\":\"3\"}, inplace=True)\ntitanic[\"Embarked\"]=titanic[\"Embarked\"].fillna(0)","280ed4bd":"titanic","2f579a7b":"survivors=titanic[titanic[\"Survived\"]==1]","4f54e2d3":"titanic.head(4)","f30c3176":"titanic.plot(kind = 'scatter', x = \"Fare\", y = \"Cabin\")","74ec7f66":"titanic.plot(kind = 'scatter', x = \"PassengerId\", y = \"Survived\")","cec2ce2a":"survivors.dtypes","5a3ace5f":" survivors[\"Age\"].plot(kind=\"bar\")","3b295b98":"survivors.plot(kind = 'scatter', x = \"PassengerId\", y = \"Age\")\n\nplt.show()","252e718c":"survivors.plot(kind = 'scatter', x = \"PassengerId\", y = \"Pclass\")\n\n","fee0d953":"survivors.plot(kind = 'scatter', x = \"PassengerId\", y = \"Parch\")","67b1b19d":"titanic.corr()","14f92a43":"X_train,X_test,Y_train,Y_test=train_test_split(titanic[[\"Age\",\"Pclass\",\"Parch\",\"Sex\",\"Cabin\",\"Fare\"]],titanic.Survived,test_size=0.2)","d9ddef8f":"X_train.head(4)","2ab29642":"Y_train.head(3)","fd8f833a":"model1=linear_model.LogisticRegression()","18091b66":"model1.fit(X_train,Y_train)","88218031":"X_test","71d56891":"Y_test","a38cdafb":"model1.predict(X_test)","2c71a03c":"model1.score(X_test,Y_test)","b0c090f6":"titanic","4e68fd69":"titanictest=pd.read_csv(\"..\/input\/titanic-test-set\/test.csv\")","0204a54a":"titanictest.head(10)","08da93bd":"titanictest[\"Age\"].value_counts()","c761f2d3":"titanic.isna().sum()","30df93b8":"titanictest.Age","0a11e43e":"mean1=np.mean(titanictest[\"Age\"])","4bcd817e":"titanictest[\"Age\"]=titanictest[\"Age\"].fillna(mean)","5901e09f":"titanictest[\"Fare\"]=titanictest[\"Fare\"].values.astype(int)","1c3c12c4":"le.fit(titanictest[\"Cabin\"])","4e36c781":"titanictest[\"Cabin\"]=le.transform(titanictest[\"Cabin\"])","c1c6d8e7":"titanictest[\"Cabin\"].head(3)","32ccc584":"titanictest[[\"Cabin\"]] = scaler.fit_transform(titanictest[[\"Cabin\"]])","acdde0a0":"titanictest[\"Cabin\"].head(3)","72ab00ee":"titanictest[\"Sex\"].replace({\"female\": \"1\", \"male\": \"0\"}, inplace=True)","5b20c899":"test1=titanictest[[\"Age\",\"Pclass\",\"Parch\",\"Sex\",\"Fare\",\"Cabin\"]]","6fea61b0":"test1.head(10)","23bb5892":"result1=model1.predict(titanictest[[\"Age\",\"Pclass\",\"Parch\",\"Sex\",\"Cabin\",\"Fare\"]])","1cb05b3e":"resultData=pd.DataFrame(result1,columns=[\"Survived\"])","e975c760":"titanic_PassengerId=pd.DataFrame(titanictest[\"PassengerId\"],columns=[\"PassengerId\"])","a43f79a7":"titanic_PassengerId","123b3f90":"titanicResult=titanic_PassengerId.join(resultData)","bb16737f":"titanicResult.to_csv(\"titanic_resultLR.csv\",index=None)","18175451":"\ntitanic[['Cabin']].apply(lambda x: pd.Series([x.str[split_locations[x.name]:][0], x.str[:split_locations[x.name]][0]]), axis=1)"}}