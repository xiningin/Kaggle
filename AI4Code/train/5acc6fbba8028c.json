{"cell_type":{"7225121c":"code","8a0ee634":"code","081f1b9e":"code","56256639":"code","d7f560db":"code","b1ff93ef":"code","c2c4fefd":"code","37f60971":"code","397119b2":"code","70bfe3d2":"code","7feecf6c":"code","26186388":"markdown","7a3c763b":"markdown","8018f6b1":"markdown","da8f48a6":"markdown","d5a06541":"markdown","16aeb4ca":"markdown","bd048584":"markdown"},"source":{"7225121c":"\n\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n# pd.options.mode.chained_assignment = None\nimport random\nfrom datetime import datetime\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\nfrom scipy import stats\n\n# import the relevant Keras modules\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Activation, Dense, LSTM, Dropout, GlobalMaxPooling1D\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping","8a0ee634":"DATA_PATH = '\/kaggle\/input\/daily-temperature-of-major-cities\/city_temperature.csv'\ndata = pd.read_csv(DATA_PATH, \n                   dtype={'States': 'string'}, \n                   low_memory=False,\n                  )\n\n# Drop columns we won't be using\ndata.drop(['Region', 'Country', 'State'], inplace=True, axis=1)\n\n# Let's train on one city\ninput_data = data.loc[data['City'] == 'Dhaka']\ninput_data['Date'] = pd.to_datetime(input_data[['Year', 'Month', 'Day']])\ninput_data.drop(['Month', 'Day', 'Year'], inplace=True, axis=1)\n\n# Drop outliers\ninput_data = input_data.loc[(np.abs(stats.zscore(input_data['AvgTemperature'])) < 3)]\n\ninput_data.head()","081f1b9e":"input_data[\"AvgTemperature\"] = np.where(input_data[\"AvgTemperature\"] == -99, np.nan, input_data[\"AvgTemperature\"])\ninput_data.isnull().sum()","56256639":"input_data[\"AvgTemperature\"] = input_data[\"AvgTemperature\"].ffill()\ninput_data.isnull().sum()","d7f560db":"plt.plot(input_data['Date'], input_data['AvgTemperature'])\nplt.show()","b1ff93ef":"def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n    n_vars = 1 if type(data) is list else data.shape[1]\n    df = pd.DataFrame(data)\n    cols, names = list(), list()\n    \n    # input sequence (t-n, ... t-1)\n    for i in range(n_in, 0, -1):\n        cols.append(df.shift(i))\n        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n        \n    # forecast sequence (t, t+1, ... t+n)\n    for i in range(0, n_out):\n        cols.append(df.shift(-i))\n        if i == 0:\n            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n        else:\n            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n            \n    # put it all together\n    agg = pd.concat(cols, axis=1)\n    agg.columns = names\n    \n    # drop rows with NaN values\n    if dropnan:\n        agg.dropna(inplace=True)\n        \n    return agg","c2c4fefd":"reframed = series_to_supervised(input_data, 1, 1)\nreframed.drop(reframed.columns[[0, 2, 3, 5]], inplace=True, axis=1)\nreframed.head()","37f60971":"# Train-test split\nvalues = reframed.values\ntrain, test = train_test_split(values)\n\n# Split into input and output\nX_train, y_train = train[:, :-1], train[:, -1]\nX_test, y_test = test[:, :-1], test[:, -1]\n\nscaler1 = MinMaxScaler()\nscaler2 = MinMaxScaler()\nX_train = scaler1.fit_transform(X_train)\ny_train = scaler2.fit_transform(y_train.reshape(-1, 1))\n\nX_test = scaler1.transform(X_test)\ny_test = scaler2.transform(y_test.reshape(-1, 1))\n\n\n# reshape input to be 3D [samples, timesteps, features]\nX_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))\nX_test = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","397119b2":"callbacks = [\n    EarlyStopping(\n        monitor='val_loss',\n        min_delta=1e-4,\n        patience=5,\n        verbose=1\n    ),\n    ModelCheckpoint(\n        filepath=\"weights.h5\", \n        monitor=\"val_loss\", \n        mode='min', \n        save_best_only=True,\n        save_weights_only=True,\n        verbose=1\n    )\n]\n\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dropout(0.25))\nmodel.add(Dense(X_train.shape[2]))\n\nmodel.compile(loss='mae', optimizer='adam')\nmodel.summary()","70bfe3d2":"model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test), \n          verbose=2, shuffle=False, callbacks=callbacks)\n\nmodel.load_weights('weights.h5')\nmodel.save('model.pb')","7feecf6c":"model = load_model(\"model.pb\")\nplt.plot(scaler2.inverse_transform(y_test.reshape(-1, 1)), label = \"actual\")\nplt.plot(scaler1.inverse_transform(model.predict(X_test)), label = \"predicted\")\nplt.xlabel('Day number')\nplt.ylabel('Temperature in F')\nplt.legend()\nplt.show()","26186388":"# Converting series to supervised","7a3c763b":"# Define and compile model","8018f6b1":"# Visualization","da8f48a6":"# Prepare data for training","d5a06541":"# Cleaning and processing data","16aeb4ca":"# Plot validation data vs predictions","bd048584":"# Importing libraries"}}