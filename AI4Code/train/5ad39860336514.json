{"cell_type":{"c33b37fa":"code","06b18ba1":"code","2b1f9a1b":"code","a1d2fe60":"code","b19abd3e":"code","dd1e0892":"code","b28f4b30":"code","e4be42e9":"code","8e57c6ad":"code","a1f258ca":"code","5f5ed610":"code","d081bf7d":"code","3a0b0402":"code","ef08712b":"code","e13db136":"markdown","77d150c2":"markdown","5c437cfd":"markdown","7f3386f7":"markdown","eb11f9ff":"markdown","6409b3bf":"markdown"},"source":{"c33b37fa":"!pip install poutyne\n\nimport poutyne as pt\nimport os\nimport random\nimport numpy as np\nimport math\nimport pandas as pd\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport time\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.rcParams['figure.dpi'] = 150\n\nfrom sklearn.metrics import accuracy_score\n\nfrom torchvision import transforms\nfrom torch.utils.data import Subset, DataLoader, Dataset","06b18ba1":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\ndevice.type","2b1f9a1b":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","a1d2fe60":"def train_valid_loaders(dataset, batch_size, train_split=0.8, shuffle=True, seed=69420):\n    num_data = len(dataset)\n    indices = np.arange(num_data)\n\n    if shuffle:\n        np.random.seed(seed)\n        np.random.shuffle(indices)\n\n    split = math.floor(train_split * num_data)\n    train_idx, valid_idx = indices[:split], indices[split:]\n\n    train_dataset = Subset(dataset, train_idx)\n    valid_dataset = Subset(dataset, valid_idx)\n\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=shuffle)\n    valid_loader = DataLoader(valid_dataset, batch_size=batch_size, shuffle=shuffle)\n\n    return train_loader, valid_loader","b19abd3e":"class MNIST(Dataset):\n    \n    def __init__(self, data, transform):\n        self.data = data\n        self.transform = transform\n    \n    def __len__(self):\n        return len(self.data)\n    \n    def __getitem__(self, idx):\n        try:\n            label = self.data.iloc[idx]['label']\n            X = self.data.iloc[idx, 1:].values.reshape((28,28)).astype(np.uint8)\n            return self.transform(X), label\n        except:\n            X = self.data.iloc[idx].values.reshape((28,28)).astype(np.uint8)\n            return self.transform(X)","dd1e0892":"net = torch.hub.load('pytorch\/vision:v0.8.0', 'squeezenet1_0', pretrained=True)\nnet.classifier[1] = nn.Conv2d(512, 10, kernel_size=(1, 1), stride=(1, 1))","b28f4b30":"net.to(device)\nmodel = pt.Model(\n    net,\n    'adam',\n    'cross_entropy',\n    batch_metrics=['accuracy'],\n    device=device\n)","e4be42e9":"train_transform = transforms.Compose([\n    transforms.ToTensor(),     \n    transforms.Lambda(lambda x: x.expand(3, -1, -1)),\n    transforms.RandomAffine(degrees=45, translate=(0.1, 0.1), scale=(0.8, 1.2)),\n    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])\n\ntest_transform = transforms.Compose([\n    transforms.ToTensor(),     \n    transforms.Lambda(lambda x: x.expand(3, -1, -1)),\n    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])","8e57c6ad":"train_set = MNIST(train_df, train_transform)\ntest_set = MNIST(test_df, test_transform)\n\ntrain_loader, valid_loader = train_valid_loaders(train_set, batch_size=128)\ntest_loader = DataLoader(test_set, batch_size=128)","a1f258ca":"history = model.fit_generator(\n    train_loader,\n    valid_loader,\n    epochs=2\n)","5f5ed610":"y_pred = model.predict_generator(test_loader)\ny_pred = np.argmax(y_pred, axis=1)","d081bf7d":"sample = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsample.head()","3a0b0402":"pred_df = pd.DataFrame({\n    'ImageId': [i for i in range(1, y_pred.shape[0]+1)],\n    'Label': y_pred.tolist()\n})\npred_df.head()","ef08712b":"pred_df.to_csv('.\/submission.csv', index=False)","e13db136":"# Transform Data","77d150c2":"# Prediction","5c437cfd":"# Model","7f3386f7":"# Load Data","eb11f9ff":"# Train","6409b3bf":"# Save"}}