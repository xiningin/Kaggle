{"cell_type":{"0349e1cc":"code","007d881a":"code","500661d4":"code","910aad0c":"code","82779163":"code","8cde45e3":"code","389859af":"code","b73c3da5":"code","27f9e126":"code","5220ec2a":"code","f7e20503":"code","a6ada5bb":"code","65751666":"code","8ba03971":"code","d0a57f86":"code","605c0594":"code","284de94d":"code","4ada39c3":"code","f56b2fbf":"code","fb6c524d":"markdown","560911e3":"markdown","5068efb4":"markdown","65328b45":"markdown","def0542d":"markdown","423c6544":"markdown"},"source":{"0349e1cc":"%matplotlib inline\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport os\nimport ast\nimport datetime as dt\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Activation\nfrom tensorflow.keras.metrics import categorical_accuracy, top_k_categorical_accuracy, categorical_crossentropy\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.optimizers import Adam\nstart = dt.datetime.now()","007d881a":"DP_DIR = '..\/input\/shuffle-csvs\/'\nINPUT_DIR = '..\/input\/quickdraw-doodle-recognition\/'\nBASE_SIZE = 256\nNCSVS = 100\nNCATS = 340\nnp.random.seed(seed=1987)\ntf.set_random_seed(seed=1987)\ndef f2cat(filename: str) -> str:\n    return filename.split('.')[0]\n\ndef list_all_categories():\n    files = os.listdir(os.path.join(INPUT_DIR, 'train_simplified'))\n    return sorted([f2cat(f) for f in files], key=str.lower)","500661d4":"def apk(actual, predicted, k=3):\n    \"\"\"\n    Source: https:\/\/github.com\/benhamner\/Metrics\/blob\/master\/Python\/ml_metrics\/average_precision.py\n    \"\"\"\n    if len(predicted) > k:\n        predicted = predicted[:k]\n\n    score = 0.0\n    num_hits = 0.0\n\n    for i, p in enumerate(predicted):\n        if p in actual and p not in predicted[:i]:\n            num_hits += 1.0\n            score += num_hits \/ (i + 1.0)\n\n    if not actual:\n        return 0.0\n\n    return score \/ min(len(actual), k)\n\ndef mapk(actual, predicted, k=3):\n    \"\"\"\n    Source: https:\/\/github.com\/benhamner\/Metrics\/blob\/master\/Python\/ml_metrics\/average_precision.py\n    \"\"\"\n    return np.mean([apk(a, p, k) for a, p in zip(actual, predicted)])\n\n\ndef preds2catids(predictions):\n    return pd.DataFrame(np.argsort(-predictions, axis=1)[:, :3], columns=['a', 'b', 'c'])","910aad0c":"def custom_single_cnn(size, conv_layers=(8, 16, 32, 64), dense_layers=(512, 256), conv_dropout=0.2,\n                      dense_dropout=0.2):\n    model = Sequential()\n    model.add(\n        Conv2D(conv_layers[0], kernel_size=(3, 3), padding='same', activation='relu', input_shape=(size, size, 1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    if conv_dropout:\n        model.add(Dropout(conv_dropout))\n\n    for conv_layer_size in conv_layers[1:]:\n        model.add(Conv2D(conv_layer_size, kernel_size=(3, 3), activation='relu'))\n        model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n        if conv_dropout:\n            model.add(Dropout(conv_dropout))\n\n    model.add(Flatten())\n\n    for dense_layer_size in dense_layers:\n        model.add(Dense(dense_layer_size, activation='relu'))\n        model.add(Activation('relu'))\n        if dense_dropout:\n            model.add(Dropout(dense_dropout))\n\n    model.add(Dense(NCATS, activation='softmax'))\n    return model\n\ndef top_3_accuracy(y_true, y_pred):\n    return top_k_categorical_accuracy(y_true, y_pred, k=3)","82779163":"STEPS = 500\nsize = 32\nbatchsize = 512","8cde45e3":"model = custom_single_cnn(size=size,\n                          conv_layers=[128, 64],\n                          dense_layers=[1024],\n                          conv_dropout=False,\n                          dense_dropout=0.25)\nmodel.compile(optimizer=Adam(lr=0.0024), loss='categorical_crossentropy',\n              metrics=[categorical_crossentropy, categorical_accuracy, top_3_accuracy])\nprint(model.summary())","389859af":"def draw_cv2(raw_strokes, size=256, lw=6):\n    img = np.zeros((BASE_SIZE, BASE_SIZE), np.uint8)\n    for stroke in raw_strokes:\n        for i in range(len(stroke[0]) - 1):\n            _ = cv2.line(img, (stroke[0][i], stroke[1][i]), (stroke[0][i + 1], stroke[1][i + 1]), 255, lw)\n    if size != BASE_SIZE:\n        return cv2.resize(img, (size, size))\n    else:\n        return img\n\ndef image_generator(size, batchsize, ks, lw=6):\n    while True:\n        for k in np.random.permutation(ks):\n            filename = os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(k))\n            for df in pd.read_csv(filename, chunksize=batchsize):\n                df['drawing'] = df['drawing'].apply(ast.literal_eval)\n                x = np.zeros((len(df), size, size))\n                for i, raw_strokes in enumerate(df.drawing.values):\n                    x[i] = draw_cv2(raw_strokes, size=size, lw=lw)\n                x = x \/ 255.\n                x = x.reshape((len(df), size, size, 1)).astype(np.float32)\n                y = keras.utils.to_categorical(df.y, num_classes=NCATS)\n                yield x, y\n\ndef df_to_image_array(df, size, lw=6):\n    df['drawing'] = df['drawing'].apply(ast.literal_eval)\n    x = np.zeros((len(df), size, size))\n    for i, raw_strokes in enumerate(df.drawing.values):\n        x[i] = draw_cv2(raw_strokes, size=size, lw=lw)\n    x = x \/ 255.\n    x = x.reshape((len(df), size, size, 1)).astype(np.float32)\n    return x","b73c3da5":"valid_df = pd.read_csv(os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(NCSVS - 1)), nrows=10**5)\nx_valid = df_to_image_array(valid_df, size)\ny_valid = keras.utils.to_categorical(valid_df.y, num_classes=NCATS)\nprint(x_valid.shape, y_valid.shape)\nprint('Validation array memory {:.2f} GB'.format(x_valid.nbytes \/ 1024.**3 ))","27f9e126":"train_datagen = image_generator(size=size, batchsize=batchsize, ks=range(NCSVS - 1))","5220ec2a":"x, y = next(train_datagen)\nn = 8\nfig, axs = plt.subplots(nrows=n, ncols=n, sharex=True, sharey=True, figsize=(12, 12))\nfor i in range(n**2):\n    ax = axs[i \/\/ n, i % n]\n    ax.imshow(x[i, :, :, 0], cmap=plt.cm.gray)\n    ax.axis('off')\nplt.tight_layout()\nfig.savefig('bw.png', dpi=300)\nplt.show();","f7e20503":"callbacks = [\n    EarlyStopping(monitor='val_categorical_accuracy', patience=7, min_delta=0.001, mode='max'),\n    ReduceLROnPlateau(monitor='val_categorical_accuracy', factor=0.5, patience=5, min_delta=0.005,\n                      mode='max', cooldown=3)\n]\nhist = model.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=100, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks = callbacks\n)","a6ada5bb":"hist_df = pd.DataFrame(hist.history)\nfig, axs = plt.subplots(nrows=2, sharex=True, figsize=(16, 10))\naxs[0].plot(hist_df.val_categorical_accuracy, lw=5, label='Validation Accuracy')\naxs[0].plot(hist_df.categorical_accuracy, lw=5, label='Training Accuracy')\naxs[0].set_ylabel('Accuracy')\naxs[0].set_xlabel('Epoch')\naxs[0].grid()\naxs[0].legend(loc=0)\naxs[1].plot(hist_df.val_categorical_crossentropy, lw=5, label='Validation MLogLoss')\naxs[1].plot(hist_df.categorical_crossentropy, lw=5, label='Training MLogLoss')\naxs[1].set_ylabel('MLogLoss')\naxs[1].set_xlabel('Epoch')\naxs[1].grid()\naxs[1].legend(loc=0)\nfig.savefig('hist.png', dpi=300)\nplt.show();","65751666":"valid_predictions = model.predict(x_valid, batch_size=128, verbose=1)\nmap3 = mapk(valid_df[['y']].values, preds2catids(valid_predictions).values)\nprint('Map3: {:.3f}'.format(map3))","8ba03971":"test = pd.read_csv(os.path.join(INPUT_DIR, 'test_simplified.csv'))\ntest.head()\nx_test = df_to_image_array(test, size)\nprint(test.shape, x_test.shape)\nprint('Test array memory {:.2f} GB'.format(x_test.nbytes \/ 1024.**3 ))","d0a57f86":"test_predictions = model.predict(x_test, batch_size=128, verbose=1)","605c0594":"top3 = preds2catids(test_predictions)\ntop3.head()\ntop3.shape","284de94d":"cats = list_all_categories()\nid2cat = {k: cat.replace(' ', '_') for k, cat in enumerate(cats)}\ntop3cats = top3.replace(id2cat)\ntop3cats.head()\ntop3cats.shape","4ada39c3":"test['word'] = top3cats['a'] + ' ' + top3cats['b'] + ' ' + top3cats['c']\nsubmission = test[['key_id', 'word']]\nsubmission.to_csv('bw_cnn_submission_{}.csv'.format(int(map3 * 10**4)), index=False)\nsubmission.head()\nsubmission.shape","f56b2fbf":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","fb6c524d":"## Training with Image Generator","560911e3":"# Keras Simple CNN Benchmark\n\nI assume you are already familiar with the competition dataset. This benchmark helps you to reach 0.77 MAP@3.\n\nThis kernel has three main components:\n\n* Simple configurable Convolutional Network\n* Fast and memory efficient Image Generator\n* Full training & submission with Kaggle Kernel\n\nI did some paramer search but it should not be hard to improve the current score. Simplified versions could be trained without GPU.","5068efb4":"## Create Submission","65328b45":"## Acknowledments\nThanks for @jpmiller and @mihaskalic for publishing their starter kernels quite early.\n\n [1] https:\/\/www.kaggle.com\/jpmiller\/image-based-cnn\n \n[2] https:\/\/www.kaggle.com\/mihaskalic\/when-in-doubt-convnets","def0542d":"## Setup\nImport the necessary libraries and a few ","423c6544":"## Simple ConvNet"}}