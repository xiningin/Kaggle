{"cell_type":{"ba05b98a":"code","5391e2cd":"code","8032b0de":"code","88350deb":"code","56c6edcb":"code","4faada1c":"code","e763abb2":"code","a03e0981":"code","bf9df013":"code","d235e35c":"code","a82ac10c":"code","65ce1d8e":"code","6e894a4d":"code","c0a0560d":"code","e774fde0":"code","cf45792b":"code","2009aa3e":"code","56fc0d4f":"code","dace6339":"code","21888105":"code","0f2ed173":"code","a32746e7":"code","bd168c91":"code","71ad2212":"code","775b3741":"code","428dec15":"code","b4ab740a":"code","fa1977d0":"code","22803e0f":"code","7552b084":"code","625ce4d9":"code","06196503":"code","80dee45f":"markdown","5d969d47":"markdown","f0fc68c3":"markdown","10b9e2bb":"markdown","5df88ded":"markdown","990dd118":"markdown","f28c0cd6":"markdown","b513a8b8":"markdown"},"source":{"ba05b98a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5391e2cd":"# importing the required libraries\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras \nimport seaborn as sns\n%matplotlib inline","8032b0de":"df = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","88350deb":"# shape\ndf.shape","56c6edcb":"# sample of dataset\ndf.sample(5)","4faada1c":"# We are dropping customer id as it bears no significant information\ndf.drop('customerID',axis=1,inplace=True)","e763abb2":"df.info()","a03e0981":"df.TotalCharges.values","bf9df013":"# Converting Total Charges to numeric\npd.to_numeric(df.TotalCharges,errors = 'coerce')","d235e35c":"# Dropping rows in which total charges is missing\ntel_df = df[df.TotalCharges != ' ']\ntel_df.TotalCharges = pd.to_numeric(tel_df.TotalCharges)","a82ac10c":"tel_df.info()","65ce1d8e":"sns.countplot(x=tel_df.Churn)\nprint('We see that majority of customers are retained as expected')","6e894a4d":"tenure_churn_no = tel_df[tel_df.Churn == 'No'].tenure\ntenure_churn_yes = tel_df[tel_df.Churn == 'Yes'].tenure\nsns.histplot(x=tel_df.tenure,hue = tel_df.Churn)\nplt.ylabel('No.of Customers')\nprint(\"We see that as tenure is increasing the no. of customers churning is decreasing\")","c0a0560d":"sns.histplot(x=tel_df.MonthlyCharges,hue=tel_df.Churn)\nplt.ylabel('No. of Customers')","e774fde0":"def unique_values(tel_df):\n    for col in tel_df:\n        if tel_df[col].dtypes == 'object':\n            print(f'{col} : {tel_df[col].unique()}')","cf45792b":"unique_values(tel_df)","2009aa3e":"# No internet service can be replaced with no\ntel_df.replace('No internet service','No',inplace=True)\ntel_df.replace('No phone service','No',inplace=True)\nunique_values(tel_df)","56fc0d4f":"yes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\n                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\nfor col in yes_no_columns:\n    tel_df[col].replace({'Yes':1,'No':0},inplace=True)\nunique_values(tel_df)","dace6339":"for col in tel_df:\n    print(f'{col}: {tel_df[col].unique()}')","21888105":"tel_df['gender'].replace({'Female':1,'Male':0},inplace=True)","0f2ed173":"Df = pd.get_dummies(data=tel_df, columns=['InternetService','Contract','PaymentMethod'])\nDf.columns","a32746e7":"Df.sample(5)","bd168c91":"cols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nDf[cols_to_scale] = scaler.fit_transform(Df[cols_to_scale])","71ad2212":"X = Df.drop('Churn',axis=1)\ny = Df.Churn\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)","775b3741":"X_train.shape","428dec15":"X_test.shape","b4ab740a":"model = keras.Sequential([\n    keras.layers.Dense(20,input_shape=(26,),activation='relu'),\n    keras.layers.Dense(1,activation='sigmoid'),\n])\n\nmodel.compile(optimizer='adam',\n             loss = 'binary_crossentropy',\n             metrics=['accuracy'])\n\nmodel.fit(X_train,y_train,epochs=50)","fa1977d0":"model.evaluate(X_test,y_test)","22803e0f":"prediction = model.predict(X_test)\ny_pred = []\nfor elem in prediction:\n    if elem>0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)","7552b084":"y_pred[:5]","625ce4d9":"import seaborn as sn\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","06196503":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test,y_pred))","80dee45f":"# Train Test Split","5d969d47":"# Encoding","f0fc68c3":"# Performance","10b9e2bb":"### Tenure","5df88ded":"# Reading dataset and info","990dd118":"### One hot encoding","f28c0cd6":"# Visualisations","b513a8b8":"# ANN Model"}}