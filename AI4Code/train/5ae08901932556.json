{"cell_type":{"e0bc267a":"code","fc2de2cc":"code","2b8e9534":"code","81c15a70":"code","04cbf47d":"code","d260de7d":"code","342a2349":"code","69ebd793":"code","3743cd7b":"code","1af4bdb4":"code","1eeec5ff":"code","9ad1f6b4":"code","b7976189":"code","872a305c":"code","0f9bec6b":"code","79bb19ee":"code","4f72397e":"code","b4648c3d":"code","8b1ba3ec":"code","19b24ad2":"code","003e9aab":"code","8f45e14d":"code","bc296b6e":"code","57ee8334":"code","ebfc43d4":"code","e1a3c07d":"code","6265eb51":"code","07ac2bd8":"code","0f761572":"code","19d22775":"code","f1f8f4bf":"code","80bc6cac":"markdown","592a0691":"markdown","61dcc3b8":"markdown","47bad981":"markdown","cfca8cff":"markdown","8f8492cf":"markdown","f6fca765":"markdown","426a1761":"markdown","4367c0fe":"markdown"},"source":{"e0bc267a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport matplotlib.pyplot as plt","fc2de2cc":"\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b8e9534":"# data loading\ndata_df = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndata_df.head()","81c15a70":"data_df.isnull().sum()","04cbf47d":"import seaborn as sns\n\nsns.set_style(\"whitegrid\")","d260de7d":"# what is the class distribution: \nprint(\"Is there class imbalance?\")\n\nsns.histplot(data=data_df, x='HeartDisease')\n\nplt.xlabel('Heart Disease Class')\nplt.ylabel(\"Frequency\")\nplt.title(\"Number of data for each class\")\nplt.show()","342a2349":"# how is the class distributed with respect to the ChestPainType\nax = sns.histplot(data=data_df, x='ChestPainType', hue='HeartDisease', \n            multiple='stack')\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Chest Pain Type')\nplt.ylabel(\"Frequency\")\nplt.show()","69ebd793":"# how is the class distributed with respect to the RestingECG\nax = sns.histplot(data=data_df, x='RestingECG', hue='HeartDisease', \n            multiple='stack')\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Resting ECG Type')\nplt.ylabel(\"Frequency\")\nplt.show()","3743cd7b":"# how is the class distributed with respect to the ChestPainType\nax = sns.histplot(data=data_df, x='Age', hue='HeartDisease', \n            multiple='stack', binwidth=3)\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Age')\nplt.ylabel(\"Frequency\")\nplt.show()","1af4bdb4":"# how is the class distributed with respect to the ChestPainType\nax = sns.histplot(data=data_df, x='ExerciseAngina', hue='HeartDisease', \n            multiple='stack')\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Exercise Again')\nplt.ylabel(\"Frequency\")\nplt.show()","1eeec5ff":"# how is the class distributed with respect to the ChestPainType\nax = sns.histplot(data=data_df, x='RestingBP', hue='HeartDisease', \n            multiple='stack', binwidth=10)\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Resting Blood Pressure')\nplt.ylabel(\"Frequency\")\nplt.show()","9ad1f6b4":"\nax = sns.histplot(data=data_df, x='MaxHR', hue='HeartDisease', \n            multiple='stack', binwidth=10)\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Maximum Heartrate')\nplt.ylabel(\"Frequency\")\nplt.show()","b7976189":"\nax = sns.histplot(data=data_df, x='Cholesterol', hue='HeartDisease', \n            multiple='stack', binwidth=100)\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Cholesterol')\nplt.ylabel(\"Frequency\")\nplt.show()","872a305c":"\nax = sns.histplot(data=data_df, x='FastingBS', hue='HeartDisease', \n            multiple='stack', binwidth=0.5)\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Fasting blood sugar')\nplt.ylabel(\"Frequency\")\nplt.show()","0f9bec6b":"\nax = sns.histplot(data=data_df, x='ST_Slope', hue='HeartDisease', \n            multiple='stack')\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('ST Slope')\nplt.ylabel(\"Frequency\")\nplt.show()","79bb19ee":"\nax = sns.histplot(data=data_df, x='Oldpeak', hue='HeartDisease', \n            multiple='stack', binwidth=2)\nax.bar_label(ax.containers[0])\nax.bar_label(ax.containers[1])\nplt.xlabel('Old Peak')\nplt.ylabel(\"Frequency\")\nplt.show()","4f72397e":"data_df.dtypes","b4648c3d":"data_df['Sex'].replace({'M':1, 'F':0}, inplace=True)\ndata_df['ExerciseAngina'].replace({'Y':1, 'N':0}, inplace=True)\n\ncategorical_cols = data_df.select_dtypes('object')\ncategorical_cols_encode = pd.get_dummies(categorical_cols)\n\ndata_df.drop(columns=categorical_cols, axis=1, inplace=True)\n\ndf = pd.concat([data_df, categorical_cols_encode], axis=1)","8b1ba3ec":"df.head()","19b24ad2":"df.describe()","003e9aab":"# normalize the data\nfrom sklearn.preprocessing import StandardScaler\n\nX = df.drop('HeartDisease', axis=1)\nY = df['HeartDisease']\n\nscaler = StandardScaler()\nscaled_x = scaler.fit_transform(X)\n\nscaled_x = pd.DataFrame(scaled_x, columns=X.columns)","8f45e14d":"scaled_x.head()","bc296b6e":"# training and evaluating the models\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error, accuracy_score, f1_score\n","57ee8334":"random_state = 22\n\nclassifiers = {\n    'Logistic Regression': LogisticRegression(random_state=random_state),\n    'AdaBoost': AdaBoostClassifier(random_state=random_state),\n    'GradientBoost': GradientBoostingClassifier(random_state=random_state),\n    'Random Forest': RandomForestClassifier(random_state=random_state)\n}","ebfc43d4":"result_tr_df = pd.DataFrame(\n    data=[], \n    columns = ['Accuracy', 'MSE', 'F1'],\n    index=classifiers.keys()\n)\n\nresult_ts_df = pd.DataFrame(\n    data=[], \n    columns = ['Accuracy', 'MSE', 'F1'],\n    index=classifiers.keys()\n)","e1a3c07d":"x_tr, x_ts, y_tr, y_ts = train_test_split(scaled_x, Y, \n                                          test_size=0.3,\n                                         random_state=random_state\n                                         )","6265eb51":"def evaluate_model(model, x, y):\n    y_pred = model.predict(x)\n    \n    acc = accuracy_score(y, y_pred)\n    mse = mean_squared_error(y, y_pred)\n    f1 = f1_score(y, y_pred)\n    \n    return {'Accuracy': acc, 'MSE': mse, 'F1': f1}","07ac2bd8":"from pprint import pprint","0f761572":"for name in classifiers.keys():\n    print(f\"Training model {name}\")\n    \n    model = classifiers[name]\n    model.fit(x_tr, y_tr)\n    \n    result_tr_df.loc[name] = evaluate_model(model, x_tr, y_tr)\n    result_ts_df.loc[name] = evaluate_model(model, x_ts, y_ts)","19d22775":"# the results on the training set\nresult_tr_df.style.highlight_max()","f1f8f4bf":"# the results on the test set\nresult_ts_df.style.highlight_max()","80bc6cac":"Looks like chest pain type ASY: Asymptomatic is influncing the true class where as pain type ATA: Atypical and NAP: Non-Aginal are characterstics of the false class. TA: Typical aginal pain is equally influencing the both classes.","592a0691":"Converting Categorical Features into Numerical","61dcc3b8":"For maximum heart rate < 130 there is more chance of having a heart disease","47bad981":"Looks like ST and LVH are more prominant in the true class. ","cfca8cff":"Based on the literature, the most important predictors of heart diseases are likely to be *chestPainType*, *RestingECG*, *Cholesterol*, *ExerciseAngina*. \n\n**Angina** is a type of chest pain which occurs due to reduced blood flow to the heart. Reduced blood flow deprive the body of oxygen and pain results.","8f8492cf":"If there is exercise induced Angina, then more likely to be heart disease","f6fca765":"- Age: age of the patient [years]\n- Sex: sex of the patient [M: Male, F: Female]\n- ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n- RestingBP: resting blood pressure [mm Hg]\n- Cholesterol: serum cholesterol [mm\/dl]\n- FastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n- RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n- MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n- ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n- Oldpeak: oldpeak = ST [Numeric value measured in depression]\n- ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n- HeartDisease: output class [1: heart disease, 0: Normal]","426a1761":"Resting blood pressure is distributed evenly across the classes.","4367c0fe":"After age > 55 years heart disease becomes more prominent."}}