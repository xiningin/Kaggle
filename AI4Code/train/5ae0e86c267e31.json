{"cell_type":{"95e465c0":"code","e688cd78":"code","110ba91e":"code","3d3381b4":"code","959960c6":"code","7e8693bf":"code","9b21f531":"code","6ad1df81":"code","9c4cb4d1":"code","dc7f3e12":"code","3c4f742c":"code","ecd3e208":"code","28f9c5ec":"code","b4a1c11c":"code","2a75e85c":"code","8fc6c3e8":"code","e80cee5a":"code","4ba05ae6":"code","d4241209":"code","e0c2791a":"code","a5ae5236":"code","4882ac2b":"code","ce4959fd":"code","fab4a44a":"markdown","c2a26a73":"markdown","051d175f":"markdown","a84baac4":"markdown","4b21a8b3":"markdown","13c14dec":"markdown","dcb983fd":"markdown","b2837b3e":"markdown","e622cccc":"markdown","4c2429ca":"markdown","5cc79267":"markdown","f98f2a1c":"markdown","fc2bd744":"markdown"},"source":{"95e465c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e688cd78":"df = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")\ndf.head()","110ba91e":"df.info()","3d3381b4":"df.isnull().sum()","959960c6":"df.drop(['name','host_name','last_review'], axis=1, inplace=True)\n","7e8693bf":"df.head()","9b21f531":"df.fillna({'reviews_per_month':0}, inplace=True)\ndf.isnull().sum()","6ad1df81":"df.describe().T","9c4cb4d1":"label = df['neighbourhood_group'].unique()\nsizes = df['neighbourhood_group'].value_counts()\ncolors = ['lightcoral','indianred', 'tomato','orangered', 'salmon']\nfig, ax = plt.subplots(1,1,figsize=(10,10))\nplt.pie(sizes,explode=[0.009,0.006,0,0,0], labels = label, shadow = False, labeldistance = 1.1,autopct='%1.3f%%', startangle = 90, colors=colors)\nax.set_title('Listings share as per Neighbourhood')\nplt.show()\n","dc7f3e12":"#color2 = [\"windows blue\", \"amber\", \"greyish\", \"faded green\", \"dusty purple\"]\nfig2, ax2 = plt.subplots(1,1, figsize=(10,10))\nsns.countplot('neighbourhood_group',data=df, order=df['neighbourhood_group'].value_counts().index)\nax2.set_title('Number of Listing - Bar Chart')","3c4f742c":"import folium\nfrom folium.plugins import HeatMap\nm=folium.Map([40.7128,-74.0060],zoom_start=11)\nHeatMap(df[['latitude','longitude']].dropna(),radius=8,gradient={0.3:'green',0.6:'yellow',1.0:'red'}).add_to(m)\ndisplay(m)\n","ecd3e208":"df2 = df[['latitude','longitude','price']].groupby(['latitude','longitude']).mean().copy()\ndf2.head()\ndf3 = df[['neighbourhood_group']]\n# df2.reset_index()\n# df2['price'][1]","28f9c5ec":"m2=folium.Map([40.7128,-74.0060],zoom_start=11, titles = \"HeatMap of Price\")\nHeatMap(df[['latitude','longitude','price']].groupby(['latitude','longitude']).mean().reset_index().values.tolist(),radius=10,gradient={0.25:'green',0.6:'yellow',0.8:'blue',1.0:'red'}).add_to(m2)\n# folium.CircleMarker(df2[['latitude','longitude'][1]], popup = 'some').add_to(m2)\n# m2.add_child(folium.ClickforMarker(popup='Awesome'))\n# m2.add_child(folium.ClickForMarker(df2[['latitude','longitude'][1]], popup='some'))\n# MarkerCluster(df[['latitude','longitude','price']].groupby(['latitude','longitude']).mean().reset_index().values.tolist(), popups = df[['latitude','longitude','price']].groupby(['latitude','longitude']).mean().reset_index().values.tolist(), overlay=True, control=True, show=True).add_to(m2)\n# BoatMarker(df[['latitude','longitude','price']].groupby(['latitude','longitude']).mean().reset_index().values.tolist(),radius=10,gradient={0.25:'green',0.6:'yellow',0.8:'blue',1.0:'red'}).add_to(m2)\n# width = df[['latitude']], height = df[['longitutde']], radius =\ndisplay(m2)","b4a1c11c":"import plotly.graph_objects as go\n# df['text'] = df['neighbourhood'] + ':' + df['price'] \n# + ', ' + df['state'] + '' + 'Arrivals: ' + df['cnt'].astype(str)\nfig = go.Figure(data=go.Scattergeo(\n        lon = df['longitude'],\n        lat = df['latitude'],\n        mode = 'markers',\n#         text = df['text'],\n        marker_color = df['price'],\n#         marker_size = df['price']\n        ))\n\nfig.update_layout(\n        title = 'Price Scatter Plot',\n        geo_scope='usa',\n    )\nfig.show()","2a75e85c":"m3=folium.Map([40.7128,-74.0060],zoom_start=11)\nHeatMap(df[['latitude','longitude','availability_365']].groupby(['latitude','longitude']).mean().reset_index().values.tolist(),radius=10,gradient={0.25:'green',0.6:'yellow',0.8:'blue',1.0:'red'}).add_to(m3)\ndisplay(m3)\n#0.25:'green',0.6:'yellow',0.8:'orange',1.0:'red'","8fc6c3e8":"#Next we will check price distribution in these neighbourhood groups\n#creating a sub-dataframe with no extreme values \/ less than 500\nsub_df=df[df.price < 300]\nfig3 = plt.subplots(figsize=(10,10))\nviz=sns.violinplot(data=sub_df, x='neighbourhood_group', y='price', scale=\"count\", hue = 'room_type')\nviz.set_title('Distribution of prices for each neighberhood_group')","e80cee5a":"df_cat = df.groupby(['neighbourhood_group','room_type'])['price'].mean().reset_index()\ndf_cat","4ba05ae6":"#Scatter plot between availability and price\nsx = df['availability_365']\nsy = df['price']\nplt.scatter(sx,sy,alpha=0.5)\nplt.show()","d4241209":"#transform data\nfrom sklearn import preprocessing\n\nenc = preprocessing.LabelEncoder()\nenc.fit(df['neighbourhood_group'])\ndf['neighbourhood_group']=enc.transform(df['neighbourhood_group'])    \n\nenc = preprocessing.LabelEncoder()\nenc.fit(df['neighbourhood'])\ndf['neighbourhood']=enc.transform(df['neighbourhood'])\n\nenc = preprocessing.LabelEncoder()\nenc.fit(df['room_type'])\ndf['room_type']=enc.transform(df['room_type'])\n\ndf.drop(['id', 'host_id'], axis = 1, inplace=True)","e0c2791a":"plt.figure(figsize=(30, 30))\nsns.pairplot(df, height=3, diag_kind=\"hist\")","a5ae5236":"df.head()","4882ac2b":"from sklearn.preprocessing import StandardScaler\ncol_to_scale = ['neighbourhood','room_type','availability_365','latitude','longitude','number_of_reviews','calculated_host_listings_count','minimum_nights','neighbourhood_group','reviews_per_month']\ndf[col_to_scale] = StandardScaler().fit_transform(df[col_to_scale])\ndf.head()","ce4959fd":"#Regression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nlm = LinearRegression()\n#'minimum_nights',,'id''neighbourhood_group','reviews_per_month',\nX = df[['neighbourhood','room_type','availability_365','latitude','longitude','number_of_reviews','calculated_host_listings_count']]\ny = df['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)\n\nlm.fit(X_train,y_train)\n\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\npred = lm.predict(X_test)\n\nprint(\"\"\"\n        Mean Squared Error: {}\n        R2 Score: {}\n        Mean Absolute Error: {}\n     \"\"\".format(\n        np.sqrt(metrics.mean_squared_error(y_test, pred)),\n        r2_score(y_test,pred) * 100,\n        mean_absolute_error(y_test,pred)\n        ))","fab4a44a":"# Regression Model","c2a26a73":"Well! clearly, no linear relation is there between price and room availability.","051d175f":"We can observe from R2 value, that this model only explains 8% of change in price through given variables. Hence, this data (and parameters) is not sufficient to provide any prediction model.\n","a84baac4":"Here the width of violin shape is defined by the count of rental places. Hence, you could see lean violin shape for Staten Island and Bronx.\nHere the white dot represents Mean and the lenght of black rectangle represent +\/- 1 SD.\n","4b21a8b3":"Here we have added NYC coordinates in Map() as we know this data is for NYC. Otherwise, we could use LocateControl() to locate data on World Map.\nGradient colors: Red, Yellow, Green shows the intensity of data points, red being most dense.  ","13c14dec":"**Interpretation:**\n1. We can observe mean price in NYC is 152. And it ranges between 69 to 175 dollars.\n2. On average customer stays for 7 nights.\n3. Each AIRBNB host has 7 listings on average!\n4. And all listing are mostly available all year long.","dcb983fd":"We can see there is no linear relation between price and other variables. \nHence, it is does not qualify for linear regression model.\nI will run the regression model to prove the point. ","b2837b3e":"**HeatMap for rental propertiies in NYC**","e622cccc":"**HeatMap of Price**","4c2429ca":"**Explore data for better understanding**","5cc79267":"Interpretation:\nLet's start with fields with Null values\n1. Last Review: This is the date when last review was posted. We can drop this field as it has no significance in our analysis.\n2. Review_per_month: We can simply replace null values with 0. Because it shows no reviews per posted for the listing.\n3. Name and Host_name: Well, these variables are also insignificant, so I will just drop them.","f98f2a1c":"**HeatMap of Room Availability**","fc2bd744":"# **Some Visualizations******"}}