{"cell_type":{"29268494":"code","36827f5e":"code","b839d524":"code","f26a7ec1":"code","0d016d74":"code","43aa20ce":"code","165e64ef":"code","6c65e414":"code","80b25992":"code","cff5f1ba":"code","91e87445":"markdown","d026f062":"markdown","dcf617ba":"markdown","bb955912":"markdown","4990f4b1":"markdown","ec3f6235":"markdown"},"source":{"29268494":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36827f5e":"from geopy import distance\ndef calculate_distance(lat1, long1, lat2, long2):\n    user_loc = (lat1, long1)\n    venue_loc = (lat2, long2)\n    return distance.distance(user_loc, venue_loc).km","b839d524":"combinedf = pd.read_csv('..\/input\/prediction-preparation\/combine_user_venues.csv')\npartialdf = combinedf[combinedf['user_id'] == 1326476]\npartialdf.shape","f26a7ec1":"partialdf.nunique()","0d016d74":"ratingsdf = pd.read_csv('..\/input\/data-exploration\/avgratings.csv')\nratedvenuesdf = ratingsdf[ratingsdf['user_id'] == 1326476]\nratedvenuesdf.head()","43aa20ce":"cond = partialdf['id'].isin(ratedvenuesdf['venue_id'])\npartialdf.drop(partialdf[cond].index, inplace = True)\npartialdf.shape","165e64ef":"partialdf['distance'] = partialdf.apply(lambda row : calculate_distance(row['user_latitude'], row['user_longitude'], row['latitude'], row['longitude']), axis=1)\npartialdf.head()","6c65e414":"shortlistdf = partialdf[partialdf['distance'] < 80]\nshortlistdf.head()","80b25992":"shortlistdf.shape","cff5f1ba":"shortlistdf.to_csv('shortlist_user3.csv', index=False)","91e87445":"Define a distance function to find the straight line geographical distance between 2 points.","d026f062":"Start calculating distance between this user and all the remaining venues","dcf617ba":"We're now going to process the large combine_user_venues.csv to get a shortlist of venues within 80km of each user","bb955912":"Write this to file: shortlist_user3.csv","4990f4b1":"We will also like to remove venues that the user has rated already. So we have to compare to the saved avgratings file.","ec3f6235":"Check there's only 1 unique userid"}}