{"cell_type":{"f030ed56":"code","6f44613d":"code","39677185":"code","c38a647b":"code","384f4b6f":"code","45373884":"code","bf93da4d":"code","b1685b3b":"code","3257186c":"code","a0091240":"code","4e0f457f":"code","7bc6c4ac":"code","00cc83df":"code","89373b05":"code","62996c6a":"code","cea6f5d8":"code","bbd2b2c4":"code","06345113":"code","ba3c11ab":"code","3ef1f1dd":"code","c25bcece":"code","9d003a7f":"code","a1c4c1c7":"code","6ba1207a":"markdown","c0e0c0ff":"markdown","6898d918":"markdown","c7baf0c0":"markdown","30d6c96e":"markdown","ae6cabce":"markdown","a920dc0e":"markdown","d90af6b0":"markdown","bd525c74":"markdown","76917298":"markdown","4f1fab38":"markdown","4da27766":"markdown","ef28cee8":"markdown","6cb41090":"markdown","4fd9e330":"markdown","066420b0":"markdown","11fb658c":"markdown","a37cf9b8":"markdown"},"source":{"f030ed56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6f44613d":"df_turkey = pd.read_csv(\"\/kaggle\/input\/Korona.csv\",sep =\";\")","39677185":"df_turkey.head()","c38a647b":"df_turkey.info()","384f4b6f":"df_turkey.rename(columns={'Total Case': 'Total_Case', 'Total Death': 'Total_Death'}, inplace=True)","45373884":"df_turkey.head()","bf93da4d":"df_turkey[\"Tests\"]=[\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"2015\",\"1981\",\"3656\",\"2952\",\"1738\",\"3672\",\"3952\",\"5035\",\"7286\",\"7533\",\"7641\",\"9982\",\"11535\",\"15422\",\"14397\",\"18757\",\"16160\",\"19664\",\"20065\",\"21400\",\"20023\",\"24900\",\"28578\",\"30864\",\"33170\",\"35720\"]\ndf_turkey.Tests.replace([\"-\"],0.0,inplace=True)\n\n\n","b1685b3b":"plt.figure(figsize= (15,10))\nsns.barplot(x=df_turkey.Tarih, y=df_turkey.Total_Case)\nplt.xticks(rotation=45)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of Total Case\")\nplt.title(\"Total Cases\")","3257186c":"data = go.Scatter(\n                    x = df_turkey.Tarih,\n                    y = df_turkey.Case,\n                    mode = \"lines\",\n                    name = \"Cases\",\n                    marker = dict(color = 'rgba(25, 130, 5, 0.8)'),\n                    text= df_turkey.Total_Case)\nlayout = dict(title = 'Cases Daily',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","a0091240":"data = go.Scatter(\n                    x = df_turkey.Tarih,\n                    y = df_turkey.Tests,\n                    mode = \"lines\",\n                    name = \"Cases\",\n                    marker = dict(color = 'rgba(25, 130, 5, 0.8)'),\n                    text= df_turkey.Case)\nlayout = dict(title = 'Number of Test',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","4e0f457f":"a=df_turkey.iloc[7:,5]\nb=df_turkey.iloc[7:,1] \ndata =go.Scatter(\n                    x = a,\n                    y = b,\n                    mode = \"markers\",\n                    marker = dict(color = 'rgba(240, 0, 220, 0.8)'),\n                    text= df_turkey.Tarih)\nlayout = dict(title = 'Tests vs Daily Cases',\n              xaxis= dict(title= 'Tarih',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Daily Cases',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","7bc6c4ac":"plt.figure(figsize= (15,10))\nsns.barplot(x=df_turkey.Tarih, y=df_turkey.Death)\nplt.xticks(rotation=45)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Death\")\nplt.title(\"Death\")","00cc83df":"a = df_turkey.iloc[10:23,1]\nb = df_turkey.iloc[20:33,3]\nc = df_turkey.iloc[20:33,0]\ndata = go.Scatter(\n                    x = a,\n                    y = b,\n                    mode = \"markers\",\n                    name = \"Cases\",\n                    marker = dict(color = 'rgba(25, 130, 5, 0.8)'),\n                    text= c\n                    )\nlayout = dict(title = 'Number of Death(Starting from 01.04.2020) vs Ten Days Before Daily Case',\n              xaxis= dict(title= 'Daily Case from 21.03.2020',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Daily Death from 01.04.2020',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","89373b05":"plt.figure(figsize= (15,10))\nsns.barplot(x=df_turkey.Tarih, y=df_turkey.Total_Death)\nplt.xticks(rotation=45)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Total Death\")\nplt.title(\"Total Death\")","62996c6a":"trace1 = go.Box(\n    y=df_turkey.Total_Case,\n    name = 'Total Case',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace1]\niplot(data)","cea6f5d8":"b=[]\nfor i in df_turkey.index:\n    a = [i + 1]\n    b.extend(a)\ndf_turkey[\"day_number\"]=b","bbd2b2c4":"x = df_turkey.day_number.values.reshape(-1,1)\n\ny=df_turkey.Total_Case.values.reshape(-1,1)\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\npoly_reg = PolynomialFeatures(degree=4)\nx_poly = poly_reg.fit_transform(x)\n\nfrom sklearn.linear_model import LinearRegression\nlinear_reg2 = LinearRegression()\n\nlinear_reg2.fit(x_poly,y)\nplt.scatter(x,y)\n\nplt.xlabel(\"Day Number\")\nplt.ylabel(\"Total Cases\")\ny_head = linear_reg2.predict(x_poly)\n\n\nplt.plot(x,y_head,color=\"green\")\nplt.show()\n\nfrom sklearn.metrics import r2_score\n\nprint(\"r_score\",r2_score(y,y_head))","06345113":"x_ = np.arange(0, 80, 1).reshape(-1,1)\nx_poly2 = poly_reg.fit_transform(x_)\ny_head2 = linear_reg2.predict(x_poly2)\n\nplt.plot(x_,y_head2,color=\"green\")\nplt.show()\nprint(\"13.04.2020 prediction = \",y_head2[34])\n","ba3c11ab":"x = df_turkey.day_number.values.reshape(-1,1)\n\ny=df_turkey.Total_Case.values.reshape(-1,1)\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\npoly_reg3 = PolynomialFeatures(degree=5)\nx_poly3 = poly_reg3.fit_transform(x)\n\nfrom sklearn.linear_model import LinearRegression\nlinear_reg3 = LinearRegression()\n\nlinear_reg3.fit(x_poly3,y)\nplt.scatter(x,y)\n\nplt.xlabel(\"Day Number\")\nplt.ylabel(\"Total Cases\")\ny_head3 = linear_reg3.predict(x_poly3)\n\n\nplt.plot(x,y_head3,color=\"green\")\nplt.show()\n\nfrom sklearn.metrics import r2_score\n\nprint(\"r_score\",r2_score(y,y_head3))","3ef1f1dd":"x_3 = np.arange(0, 80, 1).reshape(-1,1)\nx_poly3 = poly_reg3.fit_transform(x_3)\ny_head3 = linear_reg3.predict(x_poly3)\n\n\nplt.plot(x_3,y_head3,color=\"green\")\nplt.show()\n\nprint(\"13.04.2020 prediction = \",y_head3[34])","c25bcece":"a = df_turkey.iloc[10:23,1].values.reshape(-1,1)\nb = df_turkey.iloc[20:33,3].values.reshape(-1,1)\nc = a\/b\nc=c.reshape(-1,1)","9d003a7f":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_reg4 = PolynomialFeatures(degree=2)\nx_poly4 = poly_reg4.fit_transform(a)\n\nfrom sklearn.linear_model import LinearRegression\nlinear_reg4 = LinearRegression()\n\nlinear_reg4.fit(x_poly4,c)\nplt.scatter(a,c)\n\nplt.xlabel(\"Case from 21.03.2020\")\nplt.ylabel(\"Case\/Death from 01.04.2020\")\na_3 = np.arange(0, 3500, 1).reshape(-1,1)\nx_poly5 = poly_reg4.fit_transform(a_3)\ny_head5 = linear_reg4.predict(x_poly5)\nplt.plot(a_3,y_head5,color=\"green\")\nplt.show()\nfrom sklearn.metrics import r2_score\ny_head4 = linear_reg4.predict(x_poly4)\nprint(\"r_score\",r2_score(c,y_head4))","a1c4c1c7":"a2 = df_turkey.iloc[24:34,1].values.reshape(-1,1)\nx_predict = poly_reg4.fit_transform(a2)\ny_predict = linear_reg4.predict(x_predict)\ny_predict = a2\/y_predict\n\n\nplt.scatter(a2,y_predict,color = \"Red\")\n","6ba1207a":"<a id=\"4\"><\/a><br>\n## Cases Daily","c0e0c0ff":"<a id=\"2\"><\/a><br>\n## Total Cases","6898d918":"## for 2 Degree","c7baf0c0":"<a id=\"10\"><\/a><br>\n## Box Plot for Total Cases","30d6c96e":"<a id=\"1\"><\/a><br>\n# Visualization","ae6cabce":"## Prediction by 4 Degree Poly for 80 Days","a920dc0e":"## Death Prediction for 12.04.2020 to 22.04.2020","d90af6b0":"<a id=\"1\"><\/a><br>\n# Load and Check Data","bd525c74":"<a id=\"9\"><\/a><br>\n## Total Death","76917298":"<a id=\"11\"><\/a><br>\n# Regression Models","4f1fab38":"## 5 Degree Poly\n","4da27766":"## For Total Cases","ef28cee8":"## Prediction by 5 Degree Poly for 80 Days","6cb41090":"1. [Load and Check Data](#1)\n2. [Visualization](#2)\n    - [Total Cases](#3)\n    - [Cases Daily](#4)\n    - [Tests](#5)\n    - [Tests vs Daily Case](#6)\n    - [Death](#7)\n    - [Number of Death(Starting from 01.04.2020) vs Ten Days Before Daily Case](#8)\n    - [Total Death](#9)\n    - [Box Plot for Total Cases](#10)\n3. [Regression Models](#11)","4fd9e330":"<a id=\"7\"><\/a><br>\n## Death ","066420b0":"<a id=\"5\"><\/a><br>\n## Tests ","11fb658c":"<a id=\"6\"><\/a><br>\n## Tests vs Daily Cases","a37cf9b8":"<a id=\"8\"><\/a><br>\n## Number of Death(Starting from 01.04.2020) vs Ten Days Before Daily Case"}}