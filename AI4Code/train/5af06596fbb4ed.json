{"cell_type":{"0e54530c":"code","1fe88a25":"code","aeff2656":"code","f1c7de32":"code","0cd95ea4":"code","02d2b61e":"code","e204a130":"code","6da75216":"code","dfb2f87a":"code","c98ed386":"code","2809fd8e":"code","0f568893":"code","71a21ef1":"code","336d6e16":"code","9c5d4c27":"code","7287dec8":"code","a24a7f0d":"code","ec955731":"code","e028e785":"code","91e1e0ef":"code","653ce127":"code","3831e5b2":"code","e7154fb3":"code","9543b7c9":"code","0f8e1437":"code","a17bff61":"code","c14322bd":"code","2e25e9ea":"code","f4b7781e":"markdown","b3049318":"markdown"},"source":{"0e54530c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1fe88a25":"import zipfile\n\nzf = zipfile.ZipFile('..\/input\/bosch-production-line-performance\/train_numeric.csv.zip') \ntrain_numeric_chunks = pd.read_csv(zf.open('train_numeric.csv'), iterator=True, chunksize=100000)\n\npath = '..\/input\/bosch-dataset\/station_one_hot.csv'\none_hot_stations = pd.read_csv(path)\n\npd.options.display.max_columns = None\npd.options.display.max_rows = None\npd.options.display.max_colwidth = None","aeff2656":"def get_numeric_frame():\n    for data_frame in train_numeric_chunks:\n        yield data_frame\n\nget_df_numeric = get_numeric_frame()     \ndf_numeric = next(get_df_numeric)","f1c7de32":"while True:\n    try:\n        response_column = pd.concat([response_column, df_numeric[['Response']]])\n    except:\n        response_column = df_numeric[['Response']]\n    try:\n        df_numeric = next(get_df_numeric)\n    except:\n        break","0cd95ea4":"one_hot_stations.insert(1, '#OfStations', one_hot_stations.iloc[:,1:].isin([1]).sum(1))\none_hot_stations.insert(1, 'Response', response_column['Response'])\none_hot_stations.head()","02d2b61e":"fail_parts_one_hot_stations = one_hot_stations.loc[one_hot_stations['Response'] == 1]\nprint(\"Fail parts\/All parts = {}\/{}\".format(len(fail_parts_one_hot_stations), len(one_hot_stations)))","e204a130":"fail_parts_one_hot_stations.head()","6da75216":"from sklearn.cluster import KMeans, DBSCAN\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot as plt","dfb2f87a":"pc_list = []\nfor i in range(0, 53):\n    pc_list.append('PC'+str(i))\n    \nonly_stations = one_hot_stations.iloc[:,2:]\n    \npca = PCA(whiten=True).fit(only_stations)\ndf_pca_summary = pd.DataFrame({'var': pca.explained_variance_ratio_, 'PC':pc_list})","c98ed386":"df_pca_summary.plot.bar(x='PC', y='var', rot=0, figsize=(25,10))\nplt.xlabel(\"Variance explained\")\nplt.ylabel(\"Principle components\")\nplt.show()","2809fd8e":"# use 2 components\npca = PCA(n_components = 2, whiten=True)\npca.fit(only_stations)","0f568893":"number_of_samples = [[10000, 100000], [500000, 1183747]]\ncolor = [\"orange\", \"purple\"]\nlabel = [\"working parts\", \"fail parts\"]\n\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(20, 20))\n\nfor i in range(2):\n    for j in range(2):\n        sampled_data = one_hot_stations.sample(number_of_samples[i][j], random_state=1)\n        sampled_data_pca = pca.transform(sampled_data.iloc[:,2:])\n        \n        PCA_components = pd.DataFrame({\"Id\":sampled_data.Id , \"Response\":sampled_data.Response, \"pc1\":sampled_data_pca[:,0], \"pc2\":sampled_data_pca[:,1]})\n\n        for each in range(2):\n            axs[i][j].scatter(PCA_components.pc1[PCA_components.Response == each], PCA_components.pc2[PCA_components.Response == each], color = color[each], label=label[each])\n            axs[i][j].set_title(\"PCA with {} data points\".format(number_of_samples[i][j]))\n            axs[i][j].legend(loc = 'lower right')\n            axs[i][j].set_xlabel('pc1')\n            axs[i][j].set_ylabel('pc2')","71a21ef1":"PCA_components.sort_values(by=['Id'], inplace=True)","336d6e16":"PCA_components.head(10)","9c5d4c27":"inertias = []\n\nfor i in range(95, 105):\n    kmeans = KMeans(n_clusters=i)\n    kmeans.fit(PCA_components[['pc1', 'pc2']])\n    inertias.append(kmeans.inertia_)\n    \n\nplt.plot(range(95, 105), inertias)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('inertia')\nplt.show()","7287dec8":"n_clusters = 100\nkmeans = KMeans(n_clusters=n_clusters)\nkmeans.fit(PCA_components[['pc1', 'pc2']])\nprint(kmeans.inertia_)","a24a7f0d":"pred_y = kmeans.predict(PCA_components[['pc1', 'pc2']])","ec955731":"PCA_components[\"Cluster_Numbers_from_KMeans\"] = pred_y\nPCA_components.sample(20)","e028e785":"labels=[]\nfor i in range(n_clusters):\n    labels.append(\"Cluster \" + str(i))","91e1e0ef":"#cluster_colors = ['rgb(127,219,218)', 'rgb(173,228,152)','rgb(254,191,99)']\nplt.figure(figsize = (10, 10)) \nfor each in range(n_clusters):\n    plt.scatter(PCA_components.pc1[PCA_components[\"Cluster_Numbers_from_KMeans\"] == each], \n                PCA_components.pc2[PCA_components[\"Cluster_Numbers_from_KMeans\"] == each],\n                color = (np.random.random_sample(), np.random.random_sample(), np.random.random_sample()),\n                label = labels[each])\n\nplt.title(\"Cluster\")\n#plt.legend(loc=\"lower right\")\nplt.xlabel(\"pc1\")\nplt.ylabel(\"pc2\")","653ce127":"id_cluster_df = PCA_components[[\"Id\", \"Cluster_Numbers_from_KMeans\"]]\nid_cluster_df.to_csv(\"Parts_id_cluster.csv\")","3831e5b2":"part_station_info_c_list = []\nfor i in range(n_clusters):\n    parts_id_of_cluster = PCA_components.loc[PCA_components['Cluster_Numbers_from_KMeans'] == i][\"Id\"]\n    part_station_info_c_i = one_hot_stations.loc[one_hot_stations['Id'].isin(parts_id_of_cluster)]\n    part_station_info_c_i.insert(1, \"Cluster\", i)\n    part_station_info_c_list.append(part_station_info_c_i)\n    part_station_info_c_i.to_csv(\"Cluster{}_station.csv\".format(i))","e7154fb3":"part_station_info_c_list[12].head(10)","9543b7c9":"part_station_info_c_list[29].head(10)","0f8e1437":"part_station_info_c_list[49].head(10)","a17bff61":"part_station_info_c_list[62].head(10)","c14322bd":"part_station_info_c_list[91].head(10)","2e25e9ea":"part_station_info_c_list[73].head(10)","f4b7781e":"# PCA","b3049318":"# KMEANS"}}