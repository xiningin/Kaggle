{"cell_type":{"c971ff37":"code","82ce65fe":"code","09b7e656":"code","559bc255":"code","2c998ced":"code","15b8120d":"code","1ec48077":"code","7efc57eb":"code","56693785":"code","28635683":"code","2c795429":"code","a2f36f29":"code","6429e852":"code","e0bdb6a7":"code","ec40874c":"code","43f4f258":"code","416816f9":"code","28d22312":"code","966cc8e7":"code","173e9a87":"code","d788cf8f":"code","6ee83470":"code","03a28145":"code","d57f37b4":"code","680cfa4b":"code","9a205c71":"code","498a28d8":"code","be0c5b8f":"code","cc2e7e44":"code","285242f5":"code","d0386a19":"code","91874b37":"markdown","8d480270":"markdown","438c8f00":"markdown","34f5a11e":"markdown","a30b8e17":"markdown","a1d3ae93":"markdown","432ee589":"markdown","7a5b8905":"markdown","c89ea44c":"markdown","79ad5cec":"markdown","e1350ecf":"markdown","7d074c47":"markdown","3727284e":"markdown","ab605a18":"markdown"},"source":{"c971ff37":"import pandas as pd\nimport altair as alt\n\nimport folium\nfrom folium.plugins import MarkerCluster\nfrom geopy.geocoders import Nominatim\n\nimport warnings\nwarnings.filterwarnings( 'ignore' )","82ce65fe":"df = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')","09b7e656":"df.head(3)","559bc255":"df.shape","2c998ced":" df.isna().sum() \/ len(df) * 100","15b8120d":"# Select just the column that i will use\ndf1 = df[['Time from Start to Finish (seconds)', 'Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6']]","1ec48077":"# drop the first irrelavant row\ndf1.drop(0, axis=0, inplace=True)\n\n# Rename the column that i will use\ncols = {'Time from Start to Finish (seconds)':'Time_start_to_finish', 'Q1':'age', 'Q2':'gender', 'Q3':'country_reside', \n        'Q4':'formal_education', 'Q5':'title_job', 'Q6':'years_writing_code', }\ndf1.rename(columns=cols, inplace=True)\n\n\n#Change the extense name IRAN and UK\ndf1['country_reside'] = df1['country_reside'].str.replace('Iran, Islamic Republic of...', 'Iran')\ndf1['country_reside'] = df1['country_reside'].str.replace('United Kingdom of Great Britain and Northern Ireland', 'United Kingdom')\n\n# Creare a new column continent \nmap_continent = {'India':'Asia', 'Indonesia':'Asia', 'Pakistan':'Asia', 'Mexico':'North America', 'Russia':'Asia', 'Turkey':'Asia',\n                'Australia':'Australia', 'Nigeria':'Africa', 'Greece':'Europe', 'Belgium':'Europe', 'Japan':'Asia', 'Egypt':'Africa',\n                'Singapore':'Asia', 'Brazil':'South America', 'Poland':'Europe', 'China':'Asia','Iran':'Asia', 'United States of America':'North America',\n                'Italy':'Europe', 'Viet Nam':'Asia', 'Israel':'Asia', 'Peru':'South America', 'South Africa':'Africa', 'Other':'Other','Spain':'Europe', 'Bangladesh':'Asia',\n                'United Kingdom':'Europe', 'France':'Europe','Switzerland':'Europe', 'Algeria':'Africa', 'Tunisia':'Africa', 'Argentina':'South America', 'Sweden':'Europe',\n                'Colombia':'South America','I do not wish to disclose my location':'I do not wish to disclose my location', 'Canada':'North America','Chile':'South America', \n                'Netherlands':'Europe', 'Ukraine':'Europe', 'Saudi Arabia':'Asia', 'Romania':'Europe','Morocco':'Africa', 'Austria':'Europe', 'Taiwan':'Asia', 'Kenya':'Africa', 'Belarus':'Europe', \n                'Ireland':'Europe','Portugal':'Europe', 'Hong Kong (S.A.R.)':'Asia', 'Denmark':'Europe', 'Germany':'Europe','South Korea':'Asia', 'Philippines':'Asia', 'Sri Lanka':'Asia', \n                'United Arab Emirates':'Asia','Uganda':'Africa', 'Ghana':'Africa', 'Malaysia':'Asia', 'Thailand':'Asia', 'Nepal':'Asia', 'Kazakhstan':'Asia','Ethiopia':'Africa', 'Iraq':'Asia', \n                'Ecuador':'South America', 'Norway':'Europe', 'Czech Republic':'Europe'}\n\ndf1['continent'] = df1['country_reside'].map(map_continent)","7efc57eb":"df1.sample()","56693785":"df_age = df1.groupby('age', as_index=False)['gender'].count().rename( columns = {\"gender\":'total'})\ndf_age = pd.DataFrame(df_age)","28635683":"alt.Chart(df_age).mark_bar().encode(\n    x='age:N',\n    y='total:Q').properties(\n    title = 'AGE OF PEOPLE IN KAGLLE COMUNITY',\n    width=600,\n    height=400,\n\n).configure_title(\n    fontSize=20,\n    font='Arial',\n    color='#264653',\n    align='right',\n).configure_axis(\n    labelFontSize=12,\n)","2c795429":"mask = (df1['gender'] != 'Prefer not to say') & (df1['formal_education'] != 'I prefer not to answer')\ntotal_formal =  df1.loc[mask].groupby(['gender','formal_education'], as_index=False)['age'].count().rename( columns = {'age':'total'})","a2f36f29":"ax = alt.Chart(total_formal).mark_bar(opacity=0.8).encode(\n     x='total:Q',\n    y=alt.Y('gender:N', sort='-x'),\n    color='formal_education',\n    row='formal_education:N'\n    ).properties(\n    title='GENDER AND FORMAL EDUCATION',\n    width=300,\n    height=300,\n    background='#e9ecef',\n)\nax.configure_title(\n    fontSize=25,\n    font='Arial',\n    color='black',\n    align='center',\n).configure_axis(\n    labelFontSize=15,\n)","6429e852":"title_job =  df1.groupby(['title_job'], as_index=False)['age'].count().rename( columns = {'age':'total'})","e0bdb6a7":"alt.Chart(title_job).mark_bar().encode(\n    x=alt.X('title_job:N', sort='-y'),\n    y=alt.Y('total:Q'),\n    color='total:Q',\n    \n    ).properties(\n    title = 'TITLE JOB IN KAGGLE COMUNITY',\n    width=600,\n    height=300,\n\n).configure_title(\n    fontSize=15,\n    font='Arial',\n    color='#264653',\n    align='right',\n).configure_axis(\n    labelFontSize=12,\n)","ec40874c":"years_exp =  df1.groupby(['years_writing_code'], as_index=False)['age'].count().rename( columns = {'age':'total'})","43f4f258":"alt.Chart(years_exp).mark_bar().encode(\n    x=alt.X('years_writing_code:N', sort='-y'),\n    y=alt.Y('total:Q'),\n    color='total:Q',\n    \n    ).properties(\n    title = 'YEARS OF EXPERIENCE IN KAGGLE COMUNITY',\n    width=600,\n    height=300,\n\n).configure_title(\n    fontSize=15,\n    font='Arial',\n    color='#264653',\n    align='right',\n).configure_axis(\n    labelFontSize=12,\n)","416816f9":"df_country = df1.groupby('country_reside', as_index=False)['gender'].count().rename( columns = {\"gender\":'total'})\ndf_country = pd.DataFrame(df_country)\ndf_country_10 = df_country.nlargest(10, 'total')","28d22312":"alt.Chart(df_country_10).mark_bar().encode(\n     x='total:Q',\n    y=alt.Y('country_reside:N', sort='-x'),\n    color='total'\n\n    ).properties(\n    title='TOTAL BY COUNTRY',\n    width=600,\n    height=300,\n\n).configure_title(\n    fontSize=15,\n    font='Arial',\n    color='black',\n    align='right',\n\n).configure_axis(\n    labelFontSize=12,\n)","966cc8e7":"mask = (df1['continent'] != 'Other') & (df1['continent'] != 'I do not wish to disclose my location')\ndf1_contnent = df1.loc[mask].groupby('continent', as_index=False)['age'].count().rename( columns = {'age':'total'})","173e9a87":"ax = alt.Chart(df1_contnent).mark_bar().encode(\n     x='total:Q',\n    y=alt.Y('continent:N', sort='-x'),\n    color='total',\n    ).properties(\n    title='CONTINENT IN KAGGLE COMUNITY',\n    width=600,\n    height=300,\n    background='#e9ecef',\n)\nax.configure_title(\n    fontSize=15,\n    font='Arial',\n    color='black',\n    align='right',\n).configure_axis(\n    labelFontSize=12,\n)","d788cf8f":"mask = (df1['continent'] != 'Other') & (df1['continent'] != 'I do not wish to disclose my location')\naux2 = df1.loc[mask].groupby(['continent', 'age'], as_index=False)['gender'].count().rename( columns = {'gender':'total'})","6ee83470":"selectage = alt.selection_multi(fields=['age'], bind='legend')\n\nax = alt.Chart(aux2).mark_bar(opacity=0.7).encode(\n    x='total:Q',\n    y=alt.Y('continent:N', sort='-x'),\n    color='age',\n    opacity=alt.condition(selectage, alt.value(1), alt.value(0.2))\n    ).properties(\n    title='AGE BY CONTINENT',\n    width=600,\n    height=300,\n    background='#e9ecef',\n)\nax.configure_title(\n    fontSize=15,\n    font='Arial',\n    color='black',\n    align='right',\n).configure_axis(\n    labelFontSize=12,\n)\n\nax.add_selection(\n    selectage\n)\n","03a28145":"mask = (df1['continent'] != 'Other') & (df1['continent'] != 'I do not wish to disclose my location')\naux3 = df1.loc[mask].groupby(['continent', 'gender'], as_index=False)['age'].count().rename( columns = {'age':'total'})","d57f37b4":"select = alt.selection_multi(fields=['gender'], bind='legend')\n\nax1 = alt.Chart(aux3).mark_bar(opacity=0.7).encode(\n    x='total:Q',\n    y=alt.Y('continent:N', sort='-x'),\n    color='gender',\n    opacity=alt.condition(select, alt.value(1), alt.value(0.2))\n    ).properties(\n    title='GENDER BY CONTINENT',\n    width=600,\n    height=300,\n    background='#e9ecef',\n)\nax1.configure_title(\n    fontSize=15,\n    font='Arial',\n    color='black',\n    align='right',\n).configure_axis(\n    labelFontSize=12,\n)\n\nax1.add_selection(\n    select\n)","680cfa4b":"mask = (df1['continent'] != 'Other') & (df1['continent'] != 'I do not wish to disclose my location')\naux4 = df1.loc[mask].groupby(['continent', 'formal_education'], as_index=False)['age'].count().rename( columns = {'age':'total'})","9a205c71":"selections = alt.selection_multi(fields=['formal_education'], bind='legend')\n\nax = alt.Chart(aux4).mark_bar(opacity=0.7).encode(\n    x='total:Q',\n    y=alt.Y('continent:N', sort='-x'),\n    color='formal_education',\n    opacity=alt.condition(selections, alt.value(1), alt.value(0.2))\n    ).properties(\n    title='FORMAL EDUCATION BY CONTINENT',\n    width=600,\n    height=300,\n    background='#e9ecef',\n)\nax.configure_title(\n    fontSize=15,\n    font='Arial',\n    color='black',\n    align='right',\n).configure_axis(\n    labelFontSize=12,\n).add_selection(\n    selections\n)","498a28d8":"df2 = df_country.loc[(df_country['country_reside'] != 'I do not wish to disclose my location')].copy()\ndf2['country_reside'] = df2['country_reside'].replace('Hong Kong (S.A.R.)', 'Hong Kong')","be0c5b8f":"geolocator = Nominatim(user_agent='my_email')\ndef get_latitude(country):\n    try:\n        # Geolocate the center of the country\n        loc = geolocator.geocode(country)\n        # And return latitude and longitude\n        return loc.latitude\n    except:\n        # Return missing value\n        return np.nan\n  \ndef getlongitude(country):\n    try:\n        # Geolocate the center of the country\n        loc = geolocator.geocode(country)\n        # And return latitude and longitude\n        return loc.longitude\n    except:\n        # Return missing value\n        return np.nan","cc2e7e44":"df2['lat'] = df2['country_reside'].apply(lambda x: get_latitude(x))\ndf2['lon'] = df2['country_reside'].apply(lambda x: getlongitude(x))","285242f5":"selection = alt.selection_multi(fields=['country_reside'], bind='legend')\n\naux10 = alt.Chart(df_country_10).mark_bar().encode(\n     x=alt.X('total:Q'),\n    y=alt.Y('country_reside:N', sort='-x'),\n    color='country_reside',\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))\n\n    ).properties(\n    title='TOTAL ANSWERS BY COUNTRY',\n\n).configure_axis(\n    labelFontSize=12,\n).add_selection(\n    selection\n)","d0386a19":"# This map was inspired by this beautiful notebook: https:\/\/www.kaggle.com\/ruchi798\/kaggle-ml-ds-survey-analysis\n\nworld_map = folium.Map(tiles='cartodbpositron')\nmarker_cluster = MarkerCluster().add_to(world_map)\n\nfor i, row in df2.iterrows():\n        lat = row['lat']\n        lon = row['lon']\n        \n        popup_chart=folium.Popup(max_width=600).add_child(folium.VegaLite(aux10, width=500, height=250))\n        iframe = folium.IFrame(popup_chart)\n        popup = folium.Popup(iframe)\n\n        folium.CircleMarker(location = [lat, lon], \n                            popup = popup_chart, \n                            fill =True).add_to(marker_cluster)     \n\nworld_map","91874b37":"### **Age by continent**","8d480270":"### **Some Macro Analysis**","438c8f00":"## **AGE**","34f5a11e":"## **TITLE JOB**","a30b8e17":"## **YEARS EXPERIENCE**","a1d3ae93":"# **EXPLORATORY DATA ANALYSIS (EDA)**","432ee589":"## **COUNTRY**","7a5b8905":"# **ASIA MASTERS THE KAGGLE**  LOL","c89ea44c":"**THE MAPS BELOW ARE INTERACTIVE. SELECT THE COLOR OF LEGEND TO HIGHLIGHT**","79ad5cec":"# **DATA PREPRECESSING**","e1350ecf":"# **MAP**","7d074c47":"## **CONTINENT**","3727284e":"### **Gender by Continent**","ab605a18":"## **FORMAL EDUCATION AND GENDER**"}}