{"cell_type":{"678531f9":"code","9081d5df":"code","5844a1f1":"code","63a062c9":"code","5d7b9f26":"code","84c9743b":"code","97a79ba9":"code","7e7ccb65":"code","8cf67c9f":"code","35e16fce":"code","190736ea":"code","28cd96e2":"code","59e87dc1":"code","67c0e472":"code","ec608f86":"code","4514f692":"code","3d4dacc9":"code","18422bb4":"code","221c6b35":"code","73b07ff9":"code","574d3a8a":"code","a97b3725":"code","c64011d0":"code","2e07eb45":"markdown","e0794595":"markdown","18fbbc11":"markdown","cc5954df":"markdown","d2ca2912":"markdown","88b8a265":"markdown"},"source":{"678531f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9081d5df":"import xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import f1_score, recall_score\nimport os\nimport random, math\nfrom sklearn.model_selection import train_test_split as sk_train_test_split\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score\n","5844a1f1":"data= pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","63a062c9":"data.head(4)","5d7b9f26":"data.shape","84c9743b":"data.info()","97a79ba9":"data.isnull().sum()","7e7ccb65":"X= data.drop('Outcome', axis=1)\ny = data['Outcome']","8cf67c9f":"data['Outcome'].value_counts()","35e16fce":"dataplot = sns.heatmap(data.corr(), cmap=\"YlGnBu\", annot=True)","190736ea":"# X.drop('SkinThickness',inplace= True, axis=1)","28cd96e2":"X_train,X_test, y_train, y_test =train_test_split(X,y,test_size=0.2, random_state=42) ","59e87dc1":"from imblearn.over_sampling import SMOTE\noversample = SMOTE()\nX_T, y_T = oversample.fit_resample(X_train, y_train)","67c0e472":"\nmodel = xgb.XGBClassifier(n_estimators= 350,objective= 'binary:logistic', seed=42)\nmodel.fit(X_T, y_T )\n\n","ec608f86":"y_pred= model.predict(X_test)","4514f692":"print(accuracy_score(y_test, y_pred))\n","3d4dacc9":"print(f1_score(y_test, y_pred))","18422bb4":"from tensorflow.keras.layers import Convolution1D, Dense, Flatten, GlobalAveragePooling1D, AveragePooling2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import BatchNormalization, GlobalAveragePooling2D, Conv2D\nfrom tensorflow.keras.layers import Dropout, AveragePooling2D\nfrom sklearn.metrics import mean_squared_error","221c6b35":"\nn_features= X_train.shape[1]\nX_T = np.array(X_T).reshape(len(X_T), n_features)\nX_test= np.array(X_test).reshape(len(X_test), n_features)\n\n","73b07ff9":"input_shape = (n_features,)\nMLPmodel= Sequential()\nMLPmodel.add(Dense(350, input_shape=input_shape, activation='relu'))\nMLPmodel.add(Dropout(0.2))\nMLPmodel.add(Dense(50, activation='relu'))\n# MLPmodel.add(Dropout(0.1))\nMLPmodel.add(Dense(1, activation='sigmoid'))\n\n# Configure the model and start training\nMLPmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nMLPmodel.fit(X_train, y_train, epochs=20, batch_size=5, shuffle=True )","574d3a8a":"\n\nprediction= MLPmodel.predict_classes(X_test)\n\n","a97b3725":"print(accuracy_score(y_test, prediction))\n\nprint(f1_score(y_test, prediction, average = 'binary'))\n\n","c64011d0":"submission = pd.DataFrame(X_test)\nsubmission['Outcome'] = y_test\nsubmission['Predict_Outcome'] = prediction","2e07eb45":"Submitting the results:","e0794595":"**MLP model implementation**","18fbbc11":"\n**Corralation plot**","cc5954df":"**Train_test split:**","d2ca2912":"**XGB Classifier implemenation**","88b8a265":"**Applying SMOTE algorithm:**\n\nBe noted that only the train set should be manipulated using SMOTE algorithm. Since the test set must be representative of real-world data, we should not mix it with unreal data so that the performance of models will be evaluated on real data. "}}