{"cell_type":{"d3d79e3b":"code","a8cf33c0":"code","7155dc0d":"code","5db1f9eb":"code","52ff531e":"code","f087142d":"code","d2c27b77":"code","d701d099":"code","9eb0a103":"code","381bd160":"code","45616916":"code","12055488":"code","68540c6f":"code","0aa71b80":"code","ba5c8cd1":"code","cf8bd0db":"code","21cf971e":"code","c7a3dbd0":"code","ad2656c9":"code","148aec97":"code","2050b271":"code","74af5420":"code","09a1c36b":"code","120dc32b":"markdown","112818b1":"markdown","9fd9dae8":"markdown","7512d981":"markdown","66e18ab3":"markdown","fc96485e":"markdown","43559a0f":"markdown","011d342d":"markdown","8670f6b7":"markdown","9a6bdb5a":"markdown"},"source":{"d3d79e3b":"import pandas as pd\nimport numpy as np\nimport regex as re\nimport matplotlib.pyplot as plt","a8cf33c0":"data = pd.read_csv(\"..\/input\/large-random-tweets-from-pakistan\/Random \"\n                   \"Tweets from Pakistan- Cleaned- Anonymous.csv\",encoding_errors = 'ignore')","7155dc0d":"data.head()","5db1f9eb":"data.shape","52ff531e":"# As we are doing NLP related tasks, I'll keep only text column\ndata = data['full_text']","f087142d":"data = data.dropna()","d2c27b77":"# regular exp to filter out urdu text\nreg = re.compile(r'[\\-\\u06ff]+', re.UNICODE)\ndata = data.apply(lambda x: re.sub(reg, \"\", x))","d701d099":"# removing extra spaces\ndata = data.apply(lambda x: re.sub(r'[  ]+', \" \", x))\n\n# converting to lowercase letters \ndata = data.apply(lambda x: x.strip().lower())\n\n# remove hyperlinks\ndata = data.apply(lambda x: re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', '', x))\n\n# removing @Mentions\ndata = data.apply(lambda x:re.sub(r'@.+?\\s', '', x))\n\n# removing extra symbols\ndata = data.apply(lambda x: re.sub(r'#', '', x))\ndata = data.apply(lambda x: re.sub(r'rt : ', '', x))\ndata = data.apply(lambda x: re.sub(r'\\n', ' ', x))","9eb0a103":"data.shape","381bd160":"# removing duplicated data\ndata = data.drop_duplicates()","45616916":"data.shape","12055488":"import nltk\nimport string \nfrom nltk.corpus import stopwords  \nfrom nltk.stem import PorterStemmer  \nfrom nltk.tokenize import TweetTokenizer\nimport emoji\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download('stopwords')\n\n# dictionary for lemmatization\nnltk.download('wordnet')","68540c6f":"tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                           reduce_len=True)\ndata = data.apply(tokenizer.tokenize)","0aa71b80":"stopwords_english = stopwords.words('english')\n\ndef clean(x):\n    return [y for y in x if y not in stopwords_english and y not in string.punctuation\n          and (len(y) > 1 or emoji.is_emoji(y)) ]\n\ndate = data.apply(clean)","ba5c8cd1":"stemmer = PorterStemmer()\ndef stem(x):\n    return [stemmer.stem(y) for y in x]\n\n#stemming\nstemmed_tweets = data.apply(stem)","cf8bd0db":"from nltk.corpus import twitter_samples\n\nnltk.download('twitter_samples')\n\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')","21cf971e":"def process_tweet(tweet):\n    stemmer = PorterStemmer()\n    stopwords_english = stopwords.words('english')\n    # remove stock market tickers like $GE\n    tweet = re.sub(r'\\$\\w*', '', tweet)\n    # remove old style retweet text \"RT\"\n    tweet = re.sub(r'^RT[\\s]+', '', tweet)\n    # remove hyperlinks\n    tweet = re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', '', tweet)\n    # remove hashtags\n    # only removing the hash # sign from the word\n    tweet = re.sub(r'#', '', tweet)\n    # tokenize tweets\n    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                               reduce_len=True)\n    tweet_tokens = tokenizer.tokenize(tweet)\n    tweets_clean = []\n    for word in tweet_tokens:\n        if (word not in stopwords_english and  # remove stopwords\n                word not in string.punctuation):  # remove punctuation\n            # tweets_clean.append(word)\n            stem_word = stemmer.stem(word)  # stemming word\n            tweets_clean.append(stem_word)\n\n    return tweets_clean","c7a3dbd0":"def build_freqs(tweets, ys):\n    yslist = np.squeeze(ys).tolist()\n\n    freqs = {}\n    for y, tweet in zip(yslist, tweets):\n        for word in process_tweet(tweet):\n            pair = (word, y)\n            if pair in freqs:\n                freqs[pair] += 1\n            else:\n                freqs[pair] = 1\n    return freqs","ad2656c9":"train_pos  = all_positive_tweets[:4000]\ntest_pos  = all_positive_tweets[4000:]\ntrain_neg  = all_negative_tweets[:4000]\ntest_neg  = all_negative_tweets[4000:]\n\ntrain_x = train_pos + train_neg\ntest_x = test_pos + test_neg\n\ntrain_y = np.append(np.ones(len(train_pos)), np.zeros(len(train_neg)))\ntest_y = np.append(np.ones(len(test_pos)), np.zeros(len(test_neg)))\n\nfreqs = build_freqs(train_x, train_y)","148aec97":"def train_naive_bayes(freqs, train_x, train_y):\n    \n    loglikelihood = {}\n    logprior = 0\n\n    # calculate V, the number of unique words in the vocabulary\n    vocab = set([pair[0] for pair in freqs.keys()])\n    V = len(vocab)\n\n    # calculate N_pos and N_neg\n    N_pos = N_neg = 0\n    for pair in freqs.keys():\n        # if the label is positive (greater than zero)\n        if pair[1] > 0:\n\n            # Increment the number of positive words by the count for this (word, label) pair\n            N_pos += freqs[pair]\n\n        # else, the label is negative\n        else:\n\n            # increment the number of negative words by the count for this (word,label) pair\n            N_neg += freqs[pair]\n\n    # Calculate D, the number of documents\n    D = len(train_y)\n\n    # Calculate D_pos, the number of positive documents (*hint: use sum(<np_array>))\n    D_pos = (len(list(filter(lambda x: x > 0, train_y))))\n\n    # Calculate D_neg, the number of negative documents (*hint: compute using D and D_pos)\n    D_neg = (len(list(filter(lambda x: x <= 0, train_y))))\n\n    # Calculate logprior\n    logprior = np.log(D_pos) - np.log(D_neg)\n\n    # For each word in the vocabulary...\n    for word in vocab:\n        # get the positive and negative frequency of the word\n        freq_pos = lookup(freqs,word,1)\n        freq_neg = lookup(freqs,word,0)\n\n        # calculate the probability that each word is positive, and negative\n        p_w_pos = (freq_pos + 1) \/ (N_pos + V)\n        p_w_neg = (freq_neg + 1) \/ (N_neg + V)\n\n        # calculate the log likelihood of the word\n        loglikelihood[word] = np.log(p_w_pos\/p_w_neg)\n        \n    return logprior, loglikelihood\n\ndef lookup(freqs, word, label):\n    n = 0  # freqs.get((word, label), 0)\n\n    pair = (word, label)\n    if (pair in freqs):\n        n = freqs[pair]\n\n    return n\n\nlogprior, loglikelihood = train_naive_bayes(freqs, train_x, train_y)","2050b271":"def NB_predict(tweet):\n    p = 0\n    p += logprior\n\n    for token in tweet:\n        if token in loglikelihood:\n            p += loglikelihood[token]\n    return p","74af5420":"sample_tweet = data[122]\nsample_tweet","09a1c36b":"if NB_predict(sample_tweet) > 0:\n    print(\"tweet convays positive sentiment\")\n\nelse:\n    print(\"tweet has negative sentiment\")","120dc32b":"### Removing stop words","112818b1":"### Testing on our tweet dataset","9fd9dae8":"### Stemming","7512d981":"## NLP Preprocessing","66e18ab3":"### Exploratory Data Analysis","fc96485e":"###  Removing empty values","43559a0f":"### Getting Features from already labelled Tweets","011d342d":"### Tokenizing tweets","8670f6b7":"### Filtering & Cleaning","9a6bdb5a":"### Building positive and negative word frequencies"}}