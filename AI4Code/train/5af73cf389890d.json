{"cell_type":{"70ad3e53":"code","3841ead4":"code","1b9790c1":"code","01923967":"code","93aa566a":"code","0048698b":"code","66d5849c":"code","dc8f8f15":"code","1df20b66":"markdown"},"source":{"70ad3e53":"# useful libraries\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn import model_selection\nimport keras\n\nfrom PIL import Image \n","3841ead4":"# Dataset\ndf = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\nprint(df.shape)\ndf.head()","1b9790c1":"# split into train and valid \ntrain, validation = model_selection.train_test_split(\n    df,\n    test_size=0.3, \n    random_state=42,\n    stratify=df.label.values\n)","01923967":"# reset index on both dataframes\ntrain = train.reset_index(drop=True)\nvalidation = validation.reset_index(drop=True)","93aa566a":"# image ids and label dictionaries\npartition = dict()\n\npartition['train'] = list(train.image_id.values)\npartition['validation'] = list(validation.image_id.values)\n\nlabels = dict(zip(list(df.image_id), list(df.label)))","0048698b":"class DataGenerator(keras.utils.Sequence):\n    'Generates data for Keras'\n    def __init__(self, list_IDs, labels, batch_size=32, dim=(600,800), n_channels=3,\n                 n_classes=5, shuffle=True):\n        'Initialization'\n        self.dim = dim\n        self.batch_size = batch_size\n        self.labels = labels\n        self.list_IDs = list_IDs\n        self.n_channels = n_channels\n        self.n_classes = n_classes\n        self.shuffle = shuffle\n        self.on_epoch_end()\n\n    def __len__(self):\n        'Denotes the number of batches per epoch'\n        return int(np.floor(len(self.list_IDs) \/ self.batch_size))\n\n    def __getitem__(self, index):\n        'Generate one batch of data'\n        # Generate indexes of the batch\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n\n        # Find list of IDs\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n\n        # Generate data\n        X, y = self.__data_generation(list_IDs_temp)\n\n        return X, y\n\n    def on_epoch_end(self):\n        'Updates indexes after each epoch'\n        self.indexes = np.arange(len(self.list_IDs))\n        if self.shuffle == True:\n            np.random.shuffle(self.indexes)\n\n    def __data_generation(self, list_IDs_temp):\n        'Generates data containing batch_size samples' # X : (n_samples, *dim, n_channels)\n        # Initialization\n        X = np.empty((self.batch_size, *self.dim, self.n_channels))\n        y = np.empty((self.batch_size), dtype=int)\n\n        # Generate data\n        for i, ID in enumerate(list_IDs_temp):\n            # Store sample\n            X[i,] = np.asarray(Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+ID))\n\n            # Store class\n            y[i] = self.labels[ID]\n\n        return X, keras.utils.to_categorical(y, num_classes=self.n_classes)","66d5849c":"# Parameters\nparams = {'dim': (600,800),\n          'batch_size': 64,\n          'n_classes': 5,\n          'n_channels': 3,\n          'shuffle': True}","dc8f8f15":"# Generators\ntraining_generator = DataGenerator(partition['train'], labels, **params)\nvalidation_generator = DataGenerator(partition['validation'], labels, **params)","1df20b66":"**---------------------- Model Design > Compile > Train --------------------------------**"}}