{"cell_type":{"94b00650":"code","0cae0e43":"code","91255429":"code","fac7dc41":"code","8bb0a451":"code","32e230f3":"code","20f40195":"code","a2a5f8db":"code","bbd9dcf0":"code","f02da441":"code","fae4ac58":"code","4a6e662e":"code","d99e3dc8":"code","361ce117":"code","10f76d69":"code","c977e8cc":"code","8be78b4d":"markdown","1f342085":"markdown","cf298c0e":"markdown","09986c30":"markdown","4992387b":"markdown","fd38c3ea":"markdown","d145ff6e":"markdown","583b70e7":"markdown","b912eed0":"markdown","bdab86ee":"markdown","c3c8c058":"markdown","73cd8bc4":"markdown","81731dd3":"markdown","56aee5d9":"markdown","e2985346":"markdown","7a3847c2":"markdown"},"source":{"94b00650":"import pandas as pd \n\ntrain_file = '..\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip'\ntest_file = '..\/input\/sentiment-analysis-on-movie-reviews\/test.tsv.zip'\n\ntrain = pd.read_csv(train_file, delimiter = '\\t', compression = 'zip')\ntest = pd.read_csv(test_file, delimiter = '\\t', compression = 'zip')","0cae0e43":"train.shape","91255429":"test.shape","fac7dc41":"import nltk\nfrom nltk import RegexpTokenizer\ndef n_grams(phrase):\n    tokenizer = nltk.RegexpTokenizer(r\"\\w+\")\n    words = tokenizer.tokenize(phrase)\n    return len(words)\n\ntrain['N'] = train['Phrase'].apply(n_grams)\ntest['N'] = test['Phrase'].apply(n_grams)","8bb0a451":"train.head()","32e230f3":"train['N'].hist(bins = 20)\ntrain['N'].max()","20f40195":"test['N'].hist(bins = 20)\ntest['N'].max()","a2a5f8db":"train_sentences = train.groupby(['SentenceId']).first().reset_index()\ntrain_sentences['N'].hist(bins = 20)\ntrain_sentences.shape","bbd9dcf0":"test_sentences = test.groupby(['SentenceId']).first().reset_index()\ntest_sentences['N'].hist(bins = 20)","f02da441":"from nltk import Tree\nsent =  \"(S (NP (A Poor ) (N John)) (VP (V ran ) (Adv away)))\"\ntree = Tree.fromstring(sent)\ntree.pretty_print()","fae4ac58":"train.loc[(train['SentenceId'] == 2)]","4a6e662e":"phrases = train.loc[(train['SentenceId'] == 2)]['Phrase'].to_list()\nsentiments = train.loc[(train['SentenceId'] == 2)]['Sentiment'].to_list()\nroot = phrases[0]\nfor p, s in zip(phrases,sentiments):\n    start = root.index(p)\n    end = start + len(p) + len(str(s)) + 2\n    root = root[:start] + '(' + str(s) + ' ' + root[start:]\n    root = root[:end] + ')' + root[end:]\n    print(root)","d99e3dc8":"tree = Tree.fromstring(root)\ntree.pretty_print()","361ce117":"def phrase_tree(phrase_group):\n    phrases = phrase_group['Phrase'].to_list()\n    sentiments = phrase_group['Sentiment'].to_list()\n    root = phrases[0]\n    for p, s in zip(phrases,sentiments):\n        try:\n            start = root.index(p)\n        except:\n            root = 'error'\n        else:\n            end = start + len(p) + len(str(s)) + 2\n            root = root[:start] + '(' + str(s) + ' ' + root[start:]\n            root = root[:end] + ')' + root[end:]\n    return root\n\ntrain_trees = []\ntrain_groups = train.groupby(['SentenceId'])\nfor key, group in train_groups:\n    root = phrase_tree(group)\n    train_trees.append((key,root))","10f76d69":"errors = 0\nfor tree in train_trees:\n    if tree[1] == 'error':\n        errors += 1\nprint(errors)","c977e8cc":"train.loc[(train['SentenceId'] == 8382)]","8be78b4d":"Now we can examine the first rows of the dataframe.","1f342085":"## 2. Data Exploration\n\nThe data has already been split into separate train and test datasets, which are loaded into pandas below.","cf298c0e":"For instance, the following rows belong to sentence 2:","09986c30":"## 3. Visualizing Trees\n\nA phrase tree structure is a method of representing the hierarchical grammatical relationships between the constituents of a sentence. The **NLTK.Tree** package includes methods to both construct and visualize trees. For instance, the following code builds a tree to represent the simple sentence *Poor John ran away* with the nodes labelled with PoS tags. (Note that NLTK incudes a **draw** method, but the resulting trees cannot be viewed inline within the notebook). ","4992387b":"Finally, the tree structure can be visualized using th epretty_print method.","fd38c3ea":"I am also going to add a new column to the dataframe that counts the number of words (N) within the phrase. ","d145ff6e":"The following code builds separate lists for each constituent phrase and its sentiment and then adds parentheses and a label to the root sentence to mark the nodes.","583b70e7":"## 4. Examining Tree Structures in the Full Datasets\n\nUnfortunately, when we try to reconstruct the tree structure for the full train set, it is obvious that the data needs a significant mount of cleaning. The following code groups the data by sentence id and applys the mthod demonstrated above to add parentheses and node labels around the constituents. If a sub phrase is not found in the root sentence, it returns the string \"error\" rather than the tree structure.  ","b912eed0":"When we list the sentence ids that caused an error, we find that 71 sentences out of the 8529 total are missing the root sentence (and possibly other subphrases), which is almost 1%. ","bdab86ee":"The maximum phrase length in the test data is 52. Note that the distribution seems to be weighted more towards short phrases than in the train set.","c3c8c058":"Our data includes a list of every constituent phrase related to a root sentence, but the hierarchical structure has not been preserved. To reconstruct the tree, I will simply index the location of each sub phrase within the root sentence and add parentheses at the beginning and end of the constituent to define the node. Since we do not have node labels, I will use the sentiment score of the phrase as the label.  ","73cd8bc4":"The following example shows one of the sentences that threw an error. ","81731dd3":"# Visualizing Phrase Trees\n## 1. Overview\n\nThe Rotten Tomatoes movie review dataset includes a random set of individual sentences. These sentences have been scored for sentiment on a 5-part scale (0-4). Grammatical analysis has also been applied to each root sentence, with each constituent phrase at each level of the resulting phrase tree structure also scored for sentiment and added to the dataset under the root sentence. The hypothesis is that the inclusion of these constituents in the model can help improve weaknesses in the traditional \"bag-of-words\" approach related to the loss of grammatical information (e.g., scope of negation, reverse polarity). \n\nIn this notebook I will provide a method to reconstruct and visualize the phrase tree structure using the NLTK package. ","56aee5d9":"The following histogram shows the distribution of phrase lengths in the dataset. The maximum phrase length in the train data is 48. The distribution is obviously weighted towards the smaller lengths due to the recursive nature of the data (each smaller unit is part of a larger unit).","e2985346":"## 5. Conclusions\n\nBoth the train and test datasets have already been parsed, so it is not necessary for you to implement a grammatical analysis. Nevertheless, understanding the tree structure has a few implications for the sentiment analysis problem. First, if you are going to seperate a validation set from the train data, you should keep subphrases together with the root sentence or you will introduce a leakage problem. Second, be aware that the automated parsing seems to have left the data a bit messy, so be sure to clean it up. ","7a3847c2":"Phrases are identified by both a **SentenceId** and a **PhraseId**. Since the root sentence is the first phrase in each set, we can isolate the root sentences using **group_by** on the SentenceId and then taking the first row using **first()**. The distribution of sentence lengths is closer to a normal distribution for the train and test sets."}}