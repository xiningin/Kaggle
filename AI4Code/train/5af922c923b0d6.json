{"cell_type":{"78e8d507":"code","b3dccf2f":"code","acb499ef":"code","53dddb76":"code","01902d2f":"code","d0ac64b2":"code","777394ec":"code","5cb57327":"code","e1910430":"code","5daebb49":"code","5013059a":"code","f1aae8bc":"code","50450335":"code","cc822054":"code","a49eda23":"code","00d12baa":"code","3a1f5b79":"code","538f6010":"code","76659c69":"code","e50b9fc6":"code","f8cd27c6":"code","ef72f960":"code","2549560f":"code","60c39e9e":"code","e9a9bfe9":"code","9135118f":"code","8036db2b":"code","38803d43":"code","b230acf4":"code","e75142d6":"code","452228ee":"code","9725dc9f":"code","e56fcf8f":"code","040474cc":"code","a3747058":"code","196792b2":"markdown","99ed4cda":"markdown","79cf4600":"markdown","0b3910da":"markdown","2b47196a":"markdown","34b98af4":"markdown"},"source":{"78e8d507":"import numpy as np\nimport pandas as pd\nimport os,shutil","b3dccf2f":"# shutil.rmtree('\/kaggle\/working\/train_images') \n# shutil.rmtree('\/kaggle\/working\/val_images')","acb499ef":"parent = '..\/input\/pokemon-generation-one\/dataset'\nfolders = os.listdir(parent)","53dddb76":"new_folders = []\nfor i in folders:\n    if i=='dataset':\n        continue\n    new_folders.append(i)","01902d2f":"len(new_folders)","d0ac64b2":"lis = ['train_images','val_images','train_new_images']\npat = '\/kaggle\/working'\nfor f in lis:\n    if not os.path.isdir(os.path.join(pat,f)):\n        os.mkdir(os.path.join(pat,f))","777394ec":"os.listdir('\/kaggle\/working')","5cb57327":"from keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator","e1910430":"new_folders","5daebb49":"\nfor c in new_folders:\n    pat = os.path.join('\/kaggle\/working\/train_images',c)\n    if not os.path.isdir(pat):\n        os.mkdir(pat)\n    pat = os.path.join('\/kaggle\/working\/val_images',c)\n    if not os.path.isdir(pat):\n        os.mkdir(pat)\n    pat = os.path.join('\/kaggle\/working\/train_new_images',c)\n    if not os.path.isdir(pat):\n        os.mkdir(pat)","5013059a":"len(os.listdir('\/kaggle\/working\/train_new_images'))","f1aae8bc":"train_path = os.path.join('\/kaggle\/working','train_images')\nval_path = os.path.join('\/kaggle\/working','val_images')\nsplit = 0.7\nfor image_folder in new_folders:\n    p = os.path.join(parent,image_folder)\n    pat_train = os.path.join(train_path,image_folder)\n    pat_val = os.path.join(val_path,image_folder)\n    if not os.path.join(train_path,image_folder):\n        os.mkdir(os.path.join(train_path,image_folder))\n    if not os.path.join(val_path,image_folder):\n        os.mkdir(os.path.join(val_path,image_folder))\n    images = os.listdir(p)\n    length = int(split*(len(images)))\n    train_images = images[:length]\n    val_images = images[length:]\n    for proper_img in train_images:\n        sub = str(proper_img[-4:])\n        if sub == '.jpg' or sub == '.png' or sub == 'jpeg':\n            src = os.path.join(p,proper_img)\n            des = os.path.join(pat_train,proper_img)\n            shutil.copy(src,des)\n    for proper_img in val_images:\n        sub = str(proper_img[-4:])\n        if sub == '.jpg' or sub == '.png' or sub == 'jpeg':\n            src = os.path.join(p,proper_img)\n            des = os.path.join(pat_val,proper_img)\n            shutil.copy(src,des)","50450335":"des = os.path.join('\/kaggle\/working\/train_images')\nlis = os.listdir(des)\nprint(len(lis))\ndes = os.path.join('\/kaggle\/working\/val_images')\nlis = os.listdir(des)\nprint(len(lis))","cc822054":"lis = os.listdir('\/kaggle\/working\/train_images')","a49eda23":"count = []\nfor folder in lis:\n    p = os.path.join('\/kaggle\/working\/train_images',folder)\n    count.append(len(os.listdir(p)))\n    print(str(folder) + ' count is :'+str(len(os.listdir(p))))","00d12baa":"print(min(count))","3a1f5b79":"datagen = ImageDataGenerator(rescale=1.0\/255,\n                            width_shift_range=0.2,\n                             height_shift_range=0.2,\n                             shear_range=0.2,\n                             zoom_range=0.2,\n                             horizontal_flip=True,\n                             rotation_range=40,\n                             fill_mode='nearest'\n                            )","538f6010":"from PIL import Image\nimport math","76659c69":"train_path = '\/kaggle\/working\/train_images'\nfor folders in os.listdir(train_path):\n#     defining the image path or the path of folder in which images are present\n    images_path = os.path.join(train_path,folders)\n#     counting the numvber of image si particular folder\n    img_count = len(os.listdir(images_path))\n    if(img_count <= 107):\n        img_arr = os.listdir(images_path)\n        \n        for img in img_arr:\n            \n          \n            \n            \n            \n            img_ = image.load_img(os.path.join(images_path,img),target_size=(240,240))\n            img_ = image.img_to_array(img_)\n            img_ = img_.reshape(1,240,240,3)\n            \n            limit = np.floor(213\/img_count)\n           \n            i = 0\n            for x in datagen.flow(img_,batch_size=1,save_to_dir = images_path,save_prefix = folders,save_format = 'jpg'):\n                i += 1\n                x = x.reshape(240,240,3)\n                img = Image.fromarray(x,'RGB')\n                pathii = os.path.join(images_path,'save.png')\n                img.save(pathii)\n                if i>=limit:\n                    break\n        \n        ","e50b9fc6":"train_path = '\/kaggle\/working\/train_images'\nfor folder in os.listdir(train_path):\n    train_new_path = os.path.join(train_path,folder)\n    images = os.listdir(train_new_path)\n#     split = 100\n    images = images[:100]\n    for img in images:\n        src = os.path.join(train_new_path,img)\n        d = os.path.join('\/kaggle\/working\/train_new_images',folder)\n        des = os.path.join(d,img)\n        shutil.move(src,des)","f8cd27c6":"count = []\nlis = os.listdir('\/kaggle\/working\/train_new_images')\nfor folder in lis:\n    p = os.path.join('\/kaggle\/working\/train_new_images',folder)\n    count.append(len(os.listdir(p)))\n    print(str(folder) + ' count is :'+str(len(os.listdir(p))))","ef72f960":"print(min(count))","2549560f":"train_generator = datagen.flow_from_directory(\n                    '\/kaggle\/working\/train_new_images',\n    \n                    class_mode = 'categorical',\n                    batch_size = 128,\n                    shuffle = True,\n                    target_size = (240,240),\n                    )","60c39e9e":"val_generator = datagen.flow_from_directory(\n  \n                    directory='\/kaggle\/working\/val_images',\n                    class_mode = 'categorical',\n                    batch_size = 128,\n                    shuffle = True,\n                    target_size = (240,240),\n                    )","e9a9bfe9":"from keras.applications.resnet50 import ResNet50\nfrom keras.models import Sequential\nfrom keras.layers import *","9135118f":"model = ResNet50(include_top=False,weights='imagenet',input_shape = (240,240,3))","8036db2b":"model.summary()","38803d43":"from keras.layers import GlobalAveragePooling2D\nfrom keras.layers import Dense\nfrom keras import Model","b230acf4":"layer1 = GlobalAveragePooling2D()(model.output)\nlayer2 = Dense(1000,activation = 'relu')(layer1)\nlayer3 = Dense(500,activation='relu')(layer2)\nlayer_out = Dense(149,activation='softmax')(layer3)\n\nmodel_new = Model(inputs=model.input,outputs = layer_out)\n\n","e75142d6":"model_new.summary()","452228ee":"model_new.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","9725dc9f":"# hist = model_new.fit_generator?","e56fcf8f":"# hist = model_new.fit_generator","040474cc":"hist = model_new.fit_generator(train_generator,epochs=20,validation_data=val_generator)","a3747058":"hist = model_new.fit_generator(train_generator,epochs=1,validation_data=val_generator)","196792b2":"Lets Train it on one more epoch","99ed4cda":"<h1>As we can see above the data is not balanced at all so we just using data augmentaion concept and increase the no. of images to train our model well.<\/h1>","79cf4600":"By using another model or training on more number of epochs we can increase our accuracy to 70%","0b3910da":"Due to more images while training its shows memory error so we are going to train our data in which each pokemon have 100 images.","2b47196a":"<h1>Thank You !!!<\/h1>","34b98af4":"<h1>Maximum accuracy that we have achieved on 149 classification problem is 66.33%<\/h1>"}}