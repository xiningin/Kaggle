{"cell_type":{"0124f0bd":"code","0e06232c":"code","25e2382a":"code","980f7c6d":"code","54e98e31":"code","ce03a1b2":"code","610b3b44":"code","632be1d9":"code","081b58b6":"markdown","1d96f5de":"markdown","20e51500":"markdown","02039656":"markdown","05e536ba":"markdown"},"source":{"0124f0bd":"## Import required packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport pandas as pd\nimport tensorflow as tf\nimport geopandas as geopd\nimport datetime as dt\n\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable","0e06232c":"## Load data\ntrain=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntest=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/test.csv\")\ntrain['Date']=pd.to_datetime(train['Date'])\ntest['Date']=pd.to_datetime(test['Date'])\ntrain['Days']=((train['Date'] - dt.datetime(2020,1,22)).dt.total_seconds()\/(24*60*60)).apply(int)\ntest['Days']=((test['Date'] - dt.datetime(2020,1,22)).dt.total_seconds()\/(24*60*60)).apply(int)","25e2382a":"## Transform to dB scale, base 10\ntrain['ConfirmedCases_dB']=10*np.log10(train['ConfirmedCases'])\ntrain['Fatalities_dB']=10*np.log10(train['Fatalities'])\ntrain.loc[np.where(train.loc[:, 'ConfirmedCases_dB']==-np.inf)[0],'ConfirmedCases_dB']=np.nan # remove -inf\ntrain.loc[np.where(train.loc[:, 'Fatalities_dB']==-np.inf)[0],'Fatalities_dB']=np.nan # remove -inf\n\n## Get unique countries and dates\ncountryUnique=np.unique(train['Country\/Region'])\ndateUnique=np.unique(train['Date'])","980f7c6d":"## Populate a geopandas world map with CC and F data\nworld = geopd.read_file(geopd.datasets.get_path('naturalearth_lowres'))\n\nworld['ConfirmedCases_dB']=0\nworld['Fatalities_dB']=0\nfor world_country_idx in range(0,len(world)):\n#for world_country_idx in range(1,2):\n    world_country_name=world.iloc[world_country_idx]['name']\n    country_name=[]\n    country_idx=np.where(world_country_name==countryUnique)[0]\n    if country_idx.shape[0]>0:\n        #print(np.max(train.loc[np.where(train.loc[:, 'Country\/Region']==world_country_name)[0],'ConfirmedCases_dB']))\n        world.loc[world_country_idx,'ConfirmedCases_dB']=np.max(train.loc[np.where(train.loc[:, 'Country\/Region']==world_country_name)[0],'ConfirmedCases_dB'])\n        world.loc[world_country_idx,'Fatalities_dB']=np.max(train.loc[np.where(train.loc[:, 'Country\/Region']==world_country_name)[0],'Fatalities_dB'])\n    else:\n        if world_country_name=='United States of America':country_name='US'\n        elif world_country_name=='Dem. Rep. Congo':country_name='Congo (Kinshasa)'\n        elif world_country_name=='Congo':country_name='Congo (Brazzaville)'\n        elif world_country_name=='Dominican Rep.':country_name='Dominican Republic'\n        elif world_country_name=='C\u00f4te d\\'Ivoire':country_name='Cote d\\'Ivoire'\n        elif world_country_name=='Central African Rep.':country_name='Central African Republic'\n        elif world_country_name=='Eq. Guinea':country_name='Equatorial Guinea'\n        elif world_country_name=='Gambia':country_name='Gambia, The'\n        elif world_country_name=='South Korea':country_name='Korea, South'\n        elif world_country_name=='Taiwan':country_name='Taiwan*'\n        elif world_country_name=='Bosnia and Herz.':country_name='Bosnia and Herzegovina'\n        if country_name!=[]:\n            world.loc[world_country_idx,'ConfirmedCases_dB']=np.max(train.loc[np.where(train.loc[:, 'Country\/Region']==country_name)[0],'ConfirmedCases_dB'])\n            world.loc[world_country_idx,'Fatalities_dB']=np.max(train.loc[np.where(train.loc[:, 'Country\/Region']==country_name)[0],'Fatalities_dB'])\n        #else:\n            #print(world_country_name)","54e98e31":"## Plot a world map with the most recent data\n\nfig, ax = plt.subplots(2,1,figsize=(20,10))\ndivider = make_axes_locatable(ax[0])\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\nworld.plot(column='ConfirmedCases_dB', cmap='jet',ax=ax[0],legend=True, cax=cax, vmin=0, vmax=50);\nax[0].set_title('Confirmed Cases (dB)')\ndivider = make_axes_locatable(ax[1])\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\nworld.plot(column='Fatalities_dB', cmap='jet',ax=ax[1],legend=True, cax=cax, vmin=0, vmax=50);\nax[1].set_title('Fatalities (dB)')\n","ce03a1b2":"## Plot confirmed cases and fatalities by country\nnumRows, numCols = 17, 10\nfig, ax = plt.subplots(numRows,numCols,figsize=(20,20))\nfig.tight_layout(pad=1.0)\n\nfor country in range(0,len(countryUnique)):\n    row, col = np.divmod(country,numCols)\n    \n    # Collect numbers by country\n    cc=train.loc[np.where(train.loc[:, 'Country\/Region']==countryUnique[country])[0],'ConfirmedCases_dB']\n    f=train.loc[np.where(train.loc[:, 'Country\/Region']==countryUnique[country])[0],'Fatalities_dB']\n    days=train.loc[np.where(train.loc[:, 'Country\/Region']==countryUnique[country])[0],'Days']\n    \n    # Sum up countries that are divided into province\n    days_unique=np.unique(days); cc_unique=np.zeros(days_unique.shape); f_unique=np.zeros(days_unique.shape)\n    for d in range(0,len(days)):\n        idx=np.where(days.iloc[d]==days_unique)\n        if ~np.isnan(cc.iloc[d]):\n            cc_unique[idx]=cc_unique[idx]+10**(cc.iloc[d]\/10)\n        if ~np.isnan(f.iloc[d]):\n            f_unique[idx]=f_unique[idx]+10**(f.iloc[d]\/10)\n    if np.where(cc_unique)[0].shape[0]>0:\n        x_lower_lim=np.min([50,np.min(np.where(cc_unique))])\n    else:\n        x_lower_lim=0\n    cc_unique=10*np.log10(cc_unique)\n    f_unique=10*np.log10(f_unique)\n    \n    # Plotting\n    sn.scatterplot(x=days_unique,y=cc_unique,ax=ax[row,col])\n    sn.scatterplot(x=days_unique,y=f_unique,ax=ax[row,col])\n    ax[row,col].set_title(str(countryUnique[country]))\n    ax[row,col].set_ylim([-5,50])\n    ax[row,col].set_xlim([x_lower_lim,np.max(days_unique)])\n    ax[row,col].set_ylabel('CC \/ F (dB)')\n    ax[row,col].set_xlabel('',visible=False)\n    ax[row,col].grid(1)\n    \n    # set background gray if no cases\n    if np.sum(~np.isnan(cc))==0:\n        ax[row,col].set_facecolor([0.8,0.8,0.8])\n","610b3b44":"## Get unique countries + province combinations\nprovinceUnique, provinceUniqueIdx = np.unique(train.dropna(subset=['Province\/State'])['Province\/State'], return_index=True)\ncountryUniqueWithProvince=np.append(countryUnique,train.dropna(subset=['Province\/State'])['Country\/Region'].iloc[provinceUniqueIdx])\nemptyArray=np.empty(countryUnique.shape)\nemptyArray[:]=np.nan\nprovinceUniqueWithProvince=np.append(emptyArray,provinceUnique)","632be1d9":"## Plot confirmed cases and fatalities by province\nnumRows, numCols = 30, 10\nfig, ax = plt.subplots(numRows,numCols,figsize=(20,35))\nfig.tight_layout(pad=1.0)\nfor country in range(0,len(countryUniqueWithProvince)):\n    row, col = np.divmod(country,numCols)\n    \n    if pd.isna(provinceUniqueWithProvince[country]):\n        ax[row,col].set_title(str(countryUniqueWithProvince[country]))\n    \n        # Collect numbers by country\n        cc=train.loc[np.where(train.loc[:, 'Country\/Region']==countryUniqueWithProvince[country])[0],'ConfirmedCases_dB']\n        f=train.loc[np.where(train.loc[:, 'Country\/Region']==countryUniqueWithProvince[country])[0],'Fatalities_dB']\n        days=train.loc[np.where(train.loc[:, 'Country\/Region']==countryUniqueWithProvince[country])[0],'Days']\n    \n        # Sum up countries that are divided into province\n        days_unique=np.unique(days); cc_unique=np.zeros(days_unique.shape); f_unique=np.zeros(days_unique.shape)\n        for d in range(0,len(days)):\n            idx=np.where(days.iloc[d]==days_unique)\n            if ~np.isnan(cc.iloc[d]):\n                cc_unique[idx]=cc_unique[idx]+10**(cc.iloc[d]\/10)\n            if ~np.isnan(f.iloc[d]):\n                f_unique[idx]=f_unique[idx]+10**(f.iloc[d]\/10)\n        if np.where(cc_unique)[0].shape[0]>0:\n            x_lower_lim=np.min([50,np.min(np.where(cc_unique))])\n        else:\n            x_lower_lim=0\n        cc_unique=10*np.log10(cc_unique)\n        f_unique=10*np.log10(f_unique)\n        \n        # Plotting\n        sn.scatterplot(x=days_unique,y=cc_unique,ax=ax[row,col])\n        sn.scatterplot(x=days_unique,y=f_unique,ax=ax[row,col])\n    \n    else:\n        ax[row,col].set_title(str(provinceUniqueWithProvince[country]))\n        \n        # Collect numbers by province\n        cc=train.loc[np.where(train.loc[:, 'Province\/State']==provinceUniqueWithProvince[country])[0],'ConfirmedCases_dB']\n        f=train.loc[np.where(train.loc[:, 'Province\/State']==provinceUniqueWithProvince[country])[0],'Fatalities_dB']\n        days=train.loc[np.where(train.loc[:, 'Province\/State']==provinceUniqueWithProvince[country])[0],'Days']\n        \n        if np.where(~np.isnan(cc))[0].shape[0]>0:\n            x_lower_lim=np.min([50,np.where(~np.isnan(cc))[0][0]])\n        else:\n            x_lower_lim=0\n            \n        # Plotting\n        sn.scatterplot(x=days,y=cc,ax=ax[row,col])\n        sn.scatterplot(x=days,y=f,ax=ax[row,col])\n        \n    ax[row,col].set_ylim([-5,50])\n    ax[row,col].set_xlim([x_lower_lim,np.max(days_unique)])\n    ax[row,col].set_ylabel('CC \/ F (dB)')\n    ax[row,col].set_xlabel('',visible=False)\n    ax[row,col].grid(1)\n    \n    # colour code those countries with \"provinces\"\n    if countryUniqueWithProvince[country]=='US':\n        ax[row,col].set_facecolor(np.array([204,229,255])\/255)\n    elif countryUniqueWithProvince[country]=='China':\n        ax[row,col].set_facecolor(np.array([255,204,204])\/255)\n    elif countryUniqueWithProvince[country]=='Canada':\n        ax[row,col].set_facecolor(np.array([229,255,204])\/255)\n    elif countryUniqueWithProvince[country]=='Australia':\n        ax[row,col].set_facecolor(np.array([255,255,204])\/255)\n    elif countryUniqueWithProvince[country]=='United Kingdom':\n        ax[row,col].set_facecolor(np.array([229,204,255])\/255)\n    elif countryUniqueWithProvince[country]=='Netherlands':\n        ax[row,col].set_facecolor(np.array([255,204,255])\/255)\n    elif countryUniqueWithProvince[country]=='Denmark':\n        ax[row,col].set_facecolor(np.array([255,204,153])\/255)\n    elif countryUniqueWithProvince[country]=='France':\n        ax[row,col].set_facecolor(np.array([204,255,153])\/255)\n    elif countryUniqueWithProvince[country]=='Cruise Ship':\n        ax[row,col].set_facecolor(np.array([229,171,100])\/255)\n    \n    # set background gray if no cases\n    if np.sum(~np.isnan(cc))==0:\n        ax[row,col].set_facecolor([0.8,0.8,0.8])\n","081b58b6":"This notebook is a quick data visualization notebook, still very much a work in progress.\n\nCurrently it shows confirmed cases and fatalities by country\/region and province\/state.","1d96f5de":"Some of the countries are further sub-divided by province\/state: US, Canada, China, Netherlands, Australia, Denmark, UK, France, Cruise Ship. The x-axis for these graphs is wrong.\n\nAlso Diamond\/Grand Princess (listed as Province\/State) has two parts.\n\nTry to subdivide by province\/state.","20e51500":"Plotting confirmed cases and fatalities by country.\n\nIn decibel log10 scale\n\n0 dB = 1 case\n\n10 dB = 10 cases\n\n20 dB = 100 cases\n\n30 dB = 1,000 cases\n\n40 dB = 10,000 cases\n\n50 dB = 100,000 cases","02039656":"Given the exponential nature of the pandemic, the data is probably better expressed in a logarithmic scale.","05e536ba":"Work to be continued.\n\n1) Fix the way countries with provinces are grouped (done)\n\n2) Figure out how best to reshape the dataframe. By country? Or by date?\n\n3) Plot based on date, or date since a certain day (done)"}}