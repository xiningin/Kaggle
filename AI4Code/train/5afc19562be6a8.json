{"cell_type":{"876315e9":"code","c604c158":"code","5501a718":"code","cd33892b":"code","c0316b46":"code","d2ed4d47":"code","c328ea59":"code","0f5c064b":"code","c779de75":"code","67c1501b":"code","99324cb1":"code","0ed3d8dd":"code","c2641bf3":"code","377e7119":"code","8b3505d7":"code","3b14f93c":"code","85ab7593":"code","5a4390a1":"code","c3c2a437":"code","40229845":"code","d66e2c01":"code","5bd8baeb":"markdown","ec5c178d":"markdown","ad6b253f":"markdown","abdebc1d":"markdown","50c1c7b4":"markdown","e8fb57a6":"markdown","d69bd9c1":"markdown","cf1d1b5c":"markdown","32714060":"markdown","9f79f209":"markdown","48cb8fce":"markdown","5760b7f7":"markdown","b44b89bc":"markdown","2a29e164":"markdown","63c8808d":"markdown","dba1407e":"markdown","8c835aba":"markdown","ba67d214":"markdown","6c531586":"markdown","0ef39482":"markdown","34fae99f":"markdown","143bb704":"markdown"},"source":{"876315e9":"#data analysis\nimport pandas as pd\nimport numpy as np\n#visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n#modeling\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\n#warnings\nimport warnings\nwarnings.filterwarnings('ignore')","c604c158":"#importing datasets\ntrain=pd.read_csv('..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv')\ntest=pd.read_csv('..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/test_data.csv')\n\n#storing training target varible\ntrain_target=train.iloc[:,-1]\n\n#combining train and test dataset\ndataset = pd.concat([train,test],axis=0)\ndataset.info()","5501a718":"dataset['datetime']=pd.to_datetime(dataset['datetime'], format='%Y\/%m\/%d %H:%M:%S')\ndataset['year']=dataset['datetime'].dt.year\ndataset['month']=dataset['datetime'].dt.month\ndataset['day']=dataset['datetime'].dt.day\ndataset['hour']=dataset['datetime'].dt.hour\ndataset['minute']=dataset['datetime'].dt.minute","cd33892b":"# missing bargraph in training dataset\nmsno.bar(train, figsize=(12, 6), fontsize=12, color='steelblue')","c0316b46":"# missing bargraph in testing dataset\nmsno.bar(test, figsize=(12, 6), fontsize=12, color='steelblue')","d2ed4d47":"corr = train.corr()\nplt.figure(figsize=(12,10))\nmask = np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,mask=mask,annot=True,cbar=False)\nplt.show()","c328ea59":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=train['wind_speed(m\/s)'])\nplt.title('Train Dataset',fontsize=18)\nplt.ylabel('wind speed',fontsize=15)\nplt.subplot(122)\nsns.boxplot(y=test['wind_speed(m\/s)'])\nplt.title('Train Dataset',fontsize=18)\nplt.ylabel('')\nplt.show()","0f5c064b":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='wind_speed(m\/s)',y='windmill_generated_power(kW\/h)',data=dataset.iloc[:28200,:].astype({'year':str}),hue='year')\nplt.xlabel('Wind Speed',fontsize=13)\nplt.ylabel('Windmill Power',fontsize=13)\nplt.title('Windmill Power Vs Wind Speed',fontsize=16)","c779de75":"plt.figure(figsize=(12,5))\nmonth_power=dataset.iloc[:train.shape[0],:].astype({'month':str}).groupby('month',axis=0)['windmill_generated_power(kW\/h)'].max()\nplt.plot(month_power.index.values,month_power,'go-')\nplt.xlabel('Month',fontsize=15)","67c1501b":"fig = plt.figure(figsize=(12,8))\nplt.subplot(121)\nsns.countplot(data=train,x='turbine_status')\nplt.title('Train Dataset',fontsize=15)\nplt.subplot(122)\nsns.countplot(data=test,x='turbine_status')\nplt.title('Test Dataset',fontsize=15)","99324cb1":"fig = plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.countplot(data=train,x='cloud_level')\nplt.title('Train Dataset',fontsize=15)\nplt.subplot(122)\nsns.countplot(data=test,x='cloud_level')\nplt.title('Test Dataset',fontsize=15)","0ed3d8dd":"fig=plt.figure(figsize=(15,8))\nplt.subplot(121)\nsns.scatterplot(x='atmospheric_temperature(\u00b0C)',y='atmospheric_pressure(Pascal)',data=train,hue='cloud_level')\nplt.title('Train Dataset',fontsize=18)\nplt.xlabel('Atmosperic Temperature',fontsize=15)\nplt.ylabel('Atmosperic Pressure',fontsize=15)\nplt.subplot(122)\nsns.scatterplot(x='atmospheric_temperature(\u00b0C)',y='atmospheric_pressure(Pascal)',data=test,hue='cloud_level')\nplt.title('Test Dataset',fontsize=18)\nplt.xlabel('Atmosperic Temperature',fontsize=15)\nplt.ylabel('Atmosperic Pressure',fontsize=15)","c2641bf3":"fig=plt.figure(figsize=(12,6))\nsns.scatterplot(x='gearbox_temperature(\u00b0C)',y='windmill_generated_power(kW\/h)',data=train,hue='cloud_level')\nplt.title('Train Dataset',fontsize=18)\nplt.xlabel('Gearbox Temperature',fontsize=15)\nplt.ylabel('Windmill Power',fontsize=15)","377e7119":"fig=plt.figure(figsize=(12,6))\nsns.scatterplot(x='windmill_body_temperature(\u00b0C)',y='windmill_generated_power(kW\/h)',data=train,hue='cloud_level')\nplt.title('Train Dataset',fontsize=18)\nplt.xlabel('Windmill Temperature',fontsize=15)\nplt.ylabel('Windmill Power',fontsize=15)","8b3505d7":"# drop column tracking_id and datatime\ndataset.drop(columns=['tracking_id','datetime','gearbox_temperature(\u00b0C)','windmill_body_temperature(\u00b0C)','blade_length(m)','windmill_height(m)','year'],axis=1,inplace=True)\n\n### Numerical Imputation using Mean Values\ncolumns=dataset.select_dtypes(include='float64').columns[:-1]\nfor col in columns:\n    dataset[col].fillna(value=dataset[col].mean(),inplace=True)\n    \n### Categorical Imputation using Mode\ndataset['turbine_status'].fillna(dataset['turbine_status'].mode()[0],inplace=True)\ndataset['cloud_level'].fillna(dataset['cloud_level'].mode()[0],inplace=True)\n\n### Encoding on Categorical values\nturbine_dummies = pd.get_dummies(dataset['turbine_status'],prefix='t')\ncloud_dummies = pd.get_dummies(dataset['cloud_level'],prefix='c')\ndataset = pd.concat([dataset,turbine_dummies,cloud_dummies],axis=1)\ndataset.drop(columns=['turbine_status','cloud_level'],axis=1,inplace=True)","3b14f93c":"### spliting training and testing\ntrain_sample = dataset.iloc[:train.shape[0],:] #filled target values from original train dataset\ntest_sample = dataset.iloc[train.shape[0]:,:] #unfilled target values from original train dataset\n\ntrain_1 = train_sample[train_sample['windmill_generated_power(kW\/h)'].notna()].reset_index(drop=True)\ntest_1 = train_sample[train_sample['windmill_generated_power(kW\/h)'].isna()].reset_index(drop=True)\n\nX_train = train_1.drop(columns='windmill_generated_power(kW\/h)',axis=1).reset_index(drop=True)\nY_train = train_1['windmill_generated_power(kW\/h)'].reset_index(drop=True)\nX_test = test_1.drop(columns='windmill_generated_power(kW\/h)',axis=1).reset_index(drop=True)\n\n\nprint(\"X_train shape\",X_train.shape)\nprint(\"Y_train shape\",Y_train.shape)\nprint(\"X_test shape\",X_test.shape)","85ab7593":"# Model Creation for filling target values of train dataset\nxgb = XGBRegressor(n_estimators=1000,max_depth=8,booster='gbtree',learning_rate=0.1,objective='reg:squarederror')\n\n#Model fitting and prediction\nxgb.fit(X_train,Y_train)\nY_test = xgb.predict(X_test)\n\n#Converting into Series\nY_test=pd.Series(Y_test,name='windmill_generated_power(kW\/h)')","5a4390a1":"# Combining X_test and Y_test to form final test dataset\ntest_final = pd.concat([X_test,Y_test],axis=1)\n\n# Combining train_1 and test_final to form final train dataset\ntrain_final = pd.concat([train_1,test_final],axis=0)\n\n#dropping target from test_sample\ntest_sample.drop(columns='windmill_generated_power(kW\/h)',axis=1,inplace=True)","c3c2a437":"# Predicting values for original test dataset\nxgb.fit(train_final.drop(columns=['windmill_generated_power(kW\/h)'],axis=1),train_final['windmill_generated_power(kW\/h)'])\nfinal_ans = xgb.predict(test_sample)","40229845":"#feature importance \nplt.rcParams[\"figure.figsize\"] = (18,10)\nplot_importance(xgb)\nplt.show()","d66e2c01":"power=pd.Series(final_ans,name='windmill_generated_power(kW\/h)')\nfile=pd.concat([test[['tracking_id','datetime']],power],axis=1)\nfile.to_csv('XGB_ans.csv',index=False)","5bd8baeb":"#### Maximum power geenrated month wise","ec5c178d":"#### Feature Importance Graph","ad6b253f":"#### Cloud Level","abdebc1d":"## Importing libraries and dataset","50c1c7b4":"## Imputation","e8fb57a6":"## Modeling","d69bd9c1":"> Distribution of cloud level on training and testing data is quit same.<br>\nAnd **Low** value is maximum in both dataset.<br>\nHence , imputation can be done by mode technique","cf1d1b5c":">#### In year 2019, maximum power is generated.","32714060":"#### Gearbox Temperature","9f79f209":"> ##### Maximum power generated in January month.","48cb8fce":"#### Windmill Body Temperature","5760b7f7":"#### Correlation graph","b44b89bc":"#### This notebook has my solution\/approach to the problem statement of finding widnmill power at Hackerarth Compitetion 2021.\n> **A Fine Windy Day: HackerEarth Machine Learning challenge**<br>\nLink : https:\/\/www.hackerearth.com\/challenges\/competitive\/hackerearth-machine-learning-challenge-predict-windmill-power\/problems\/","2a29e164":"> ##### Tracking Id can be deleted, as it will not show any effect on windmill power.\n> ##### There are manyc columns filled with null values, need to impute them.","63c8808d":"#### **Datetime** column is in object format. It should be converted into datetime formate.","dba1407e":"> #### I used Boruta Feature selection technique and rejected attributes are :\n> ##### gearbox_temperature(\u00b0C),windmill_body_temperature(\u00b0C),blade_length(m),windmill_height(m),year","8c835aba":"> #### In training and testing dataset, all columns are filled with more than 70%.","ba67d214":"#### Steps Involved :\n##### 1. Importing dataset and libraries\n##### 2. Analysi train and test data\n##### 3. Imputation \n##### 4. Modeling","6c531586":"#### Atmosperic Temperature Vs Atmosperic pressure","0ef39482":"#### Wind Speed","34fae99f":"## Visualization","143bb704":"#### Turbine Status"}}