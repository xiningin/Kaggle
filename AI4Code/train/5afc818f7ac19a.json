{"cell_type":{"bddc408b":"code","bd4833d1":"code","31dbe967":"code","53d44e07":"code","cfe97fc7":"code","67e872b9":"code","06ac084c":"code","f7950aba":"code","f43f8136":"code","14d0d4c7":"code","e507a3c2":"code","a7ab4bb1":"code","f8aac951":"code","b6fb68a1":"code","4ef0de5c":"code","7b244a13":"code","5b2b6929":"code","d666644d":"code","35780b0d":"code","a1f9ab4b":"code","297303f8":"markdown","2fbed57a":"markdown","9ab22bbe":"markdown","4cb068b2":"markdown","540bdc73":"markdown","7b63e1d5":"markdown","776ef138":"markdown","08252060":"markdown","abb3a866":"markdown"},"source":{"bddc408b":"# Import all the necessary libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom keras.callbacks import ReduceLROnPlateau\nimport cv2\nimport os\nimport pandas as pd\nimport numpy as np","bd4833d1":"train_idg = ImageDataGenerator(\n    rescale = 1.\/255.,\n    rotation_range = 30,  \n    zoom_range = 0.2, \n    width_shift_range=0.1,  \n    height_shift_range=0.1,  \n    horizontal_flip = True,\n)\ntest_idg = ImageDataGenerator(\n    rescale = 1.\/255.\n)\nval_idg = ImageDataGenerator(\n    rescale=1.\/255.\n)","31dbe967":"IMG_SIZE = (224, 224)\n\ntrain = train_idg.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/train', \n                                      class_mode='binary',\n                                      color_mode=\"grayscale\",\n                                      target_size = IMG_SIZE\n                                     )\ntest = test_idg.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/test', \n                                    class_mode='binary',\n                                    color_mode=\"grayscale\",\n                                    target_size = IMG_SIZE\n                                   )\nval = val_idg.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/val',\n                                  class_mode='binary',\n                                  color_mode=\"grayscale\",\n                                  target_size = IMG_SIZE\n                                 )","53d44e07":"trainX, trainY = train.next()\ntestX, testY = test.next()\nvalX, valY = val.next()","cfe97fc7":"print(len(trainX), len(trainY))","67e872b9":"print('Train X=%s Y=%s' %(trainX.shape, trainY.shape))\nprint('Test X=%s Y=%s' %(testX.shape, testY.shape))\nprint('Val X=%s Y=%s' %(valX.shape, valY.shape))","06ac084c":"labels = ['Normal' if label == 0 else 'Pneumonia' for label in trainY]\nsns.countplot(labels)","f7950aba":"for idx in range(10):\n    plt.figure(figsize=(5,5))\n    plt.imshow(trainX[idx].reshape(224,224), cmap='gray')\n    plt.title(labels[idx])","f43f8136":"print('TrainX : ',trainX[0].shape)","14d0d4c7":"model = Sequential()\nmodel.add(Conv2D(32 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (224, 224,1)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(128 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(256 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(units = 128 , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1 , activation = 'sigmoid'))\nmodel.compile(optimizer = \"rmsprop\" , loss = 'binary_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","e507a3c2":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.3, min_lr=0.000001)","a7ab4bb1":"history = model.fit(train ,batch_size=64, epochs = 14 , validation_data = val ,callbacks = [learning_rate_reduction])","f8aac951":"print(\"Loss of the model is - \" , model.evaluate(testX,testY)[0])\nprint(\"Accuracy of the model is - \" , model.evaluate(testX,testY)[1]*100 , \"%\")","b6fb68a1":"epochs = [i for i in range(14)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Validation Accuracy')\nax[0].set_title('Training & Validation Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'g-o' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'r-o' , label = 'Validation Loss')\nax[1].set_title('Testing Accuracy & Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Training & Validation Loss\")\nplt.show()","4ef0de5c":"predictions = model.predict_classes(testX)\npredictions = predictions.reshape(1,-1)[0]\npredictions[:15]","7b244a13":"print(classification_report(testY, predictions, target_names = ['Pneumonia (Class 0)','Normal (Class 1)']))","5b2b6929":"print('Confusion Matrix\\n')\nmatrix = confusion_matrix(testY,predictions)\nprint(matrix)","d666644d":"correct = np.nonzero(predictions == testY)[0]\nincorrect = np.nonzero(predictions != testY)[0]\nprint(len(correct), len(incorrect))","35780b0d":"i = 0\nfor c in correct[:6]:\n    plt.subplot(3,2,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(testX[c].reshape(224, 224), cmap=\"gray\", interpolation='none')\n    plt.title(\"Predicted Class {},Actual Class {}\".format(predictions[c], testY[c]))\n    plt.tight_layout()\n    i += 1","a1f9ab4b":"i = 0\nfor c in incorrect[:6]:\n    plt.subplot(3,2,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(testX[c].reshape(224, 224), cmap=\"gray\", interpolation='none')\n    plt.title(\"Predicted Class {},Actual Class {}\".format(predictions[c], testY[c]))\n    plt.tight_layout()\n    i += 1","297303f8":"### Here I am creating a CNN for Pneumonia disease classification on chest X-Ray images","2fbed57a":"### Visualize the first 10 images from out training set","9ab22bbe":"### Visualize incorrect predictions","4cb068b2":"### Loding and Preprocessing Step\n\n1. Create Datagenerator instances for train, test and validation\n2. Apply data augmentation to traning images for better training of the model","540bdc73":"### Visualize the class imbalance. ","7b63e1d5":"Here we are using **ReduceLROnPlateau** which is used to reduce the learning rate by a factor of 2-10 once learning stagnates. This callback monitors a quantity and if no improvement is seen for a 'patience' number of epochs, the learning rate is reduced.","776ef138":"### Define our CNN model architecture","08252060":"Here, as we can see clearly from the count plot that we have sufficient examples for pneumonia cases to train our model.","abb3a866":"### Visualize correct predictions"}}