{"cell_type":{"f5b2fb97":"code","60a2e8ff":"code","1e0e42b8":"code","f681982c":"code","ec01c560":"code","6c3e6314":"code","f59ad993":"code","c9c89310":"code","c50cf4bf":"code","369f2902":"code","39c21c0d":"code","16fc5846":"code","a308b5e3":"code","c7f58c6b":"code","fce2fda9":"code","7a4b255c":"code","3c947d95":"code","25a59e7b":"code","898de29b":"code","7a0e71ff":"markdown","b2aab0a8":"markdown","a96126cc":"markdown","a23e40b9":"markdown","4671c6ad":"markdown"},"source":{"f5b2fb97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60a2e8ff":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","1e0e42b8":"mnist = tf.keras.datasets.mnist","f681982c":"(X_train, y_train), (X_test, y_test) = mnist.load_data()","ec01c560":"X_train, X_test = X_train\/255.0, X_test\/255.0\nprint('X_train.shape = {}'.format(X_train.shape))","6c3e6314":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten(input_shape = (28,28)))\nmodel.add(tf.keras.layers.Dense(128, activation = 'relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(10, activation = 'softmax'))","f59ad993":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","c9c89310":"H = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=15)","c50cf4bf":"plt.plot(H.history['accuracy'], 'bo-', color='b', label = 'accuracy')\nplt.plot(H.history['val_accuracy'], color='red', label = 'val_accuracy')\nplt.legend()\nplt.title('Accuracy and val accuracy', weight = 'bold')\nplt.tight_layout()","369f2902":"plt.plot(H.history['loss'], 'bo-', color='b', label = 'loss')\nplt.plot(H.history['val_loss'], color='red', label = 'val_loss')\nplt.legend()\nplt.title('Loss and val loss', weight = 'bold')\nplt.tight_layout()","39c21c0d":"evaluate = model.evaluate(X_test, y_test)","16fc5846":"print(evaluate[1])","a308b5e3":"pred = model.predict_classes(X_test)\npred","c7f58c6b":"from sklearn.metrics import confusion_matrix, classification_report","fce2fda9":"cm = confusion_matrix(y_test, pred)\nsns.heatmap(cm, annot=True)","7a4b255c":"num = range(10)\nval = ['class = {}'.format(item) for item in num]\nprint(classification_report(y_test, pred, target_names=val))","3c947d95":"mis = np.where(pred != y_test)[0]\ni = np.random.choice(mis)\nplt.imshow(X_test[i], cmap='gray')\nplt.title('Truth Label: {} Predicted: {}'.format(y_test[i], pred[i]))\n","25a59e7b":"d = 2000\nplt.imshow(X_test[d], cmap='gray')\nprint(pred[d])","898de29b":"L, W = 6, 6\nfig, axes = plt.subplots(L,W,figsize = (16,15))\naxes = axes.ravel()\n\nfor i in np.arange(0, L*W):\n    axes[i].imshow(X_test[i], cmap = 'gray')\n    axes[i].set_title('True: {}\\nPredicted: {}'.format(y_test[i], pred[i]))\n    axes[i].axis('off')\n    \nplt.subplots_adjust(wspace=0.6, hspace=1)","7a0e71ff":"# **Model Testing**","b2aab0a8":"# **Plot for accuracy and validation accuracy**","a96126cc":"# **Model Validation**","a23e40b9":"# **Data Splitting**","4671c6ad":"# **Model Building**"}}