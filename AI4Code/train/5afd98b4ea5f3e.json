{"cell_type":{"714ba89d":"code","d574aead":"code","7017773d":"code","49315be7":"code","2b3a8b1f":"code","56b80963":"code","9ce31b5c":"code","7c5be427":"code","acf93136":"code","7a7721e2":"code","9538dddf":"code","44b018ea":"code","c7a24785":"code","50197c07":"code","54b060f0":"code","6f3a669a":"code","3770e0a4":"code","75560fc6":"code","652077e8":"code","84a5b140":"markdown","344f393e":"markdown","9c07b707":"markdown","d9b1e5c6":"markdown","4a9340a8":"markdown","585904ec":"markdown","31ad3fe2":"markdown","c89732dc":"markdown","19a13e5f":"markdown","08f0af0e":"markdown","63f1cec1":"markdown","cff6c494":"markdown","5391e258":"markdown","cd2080fb":"markdown","9132c504":"markdown","20e0f158":"markdown","36a83b77":"markdown","e131bbfd":"markdown"},"source":{"714ba89d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d574aead":"import pandas as pd","7017773d":"df_all = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","49315be7":"df_all.head()","2b3a8b1f":"for col in df_all.columns:\n    print(col) ","56b80963":"print(df_all.shape[0], '\ud3b8')","9ce31b5c":"df_year = df_all['release_year'].value_counts()\n\nprint( df_year.idxmax(), '\ub144')","7c5be427":"print(df_year.max(), '\ud3b8')","acf93136":"import matplotlib.pyplot as plt\nfrom matplotlib import font_manager, rc\n\n%matplotlib inline\n\ndef draw_bar_chart(data, title):\n    plt.rcParams['axes.unicode_minus'] = False\n    fontpath = '..\/input\/nanumgothic\/NanumGothic.ttf'\n    fontprop = font_manager.FontProperties(fname=fontpath, size=12)\n\n    fig, ax = plt.subplots(1,1, figsize=(18, 6))\n\n    ax.bar(data.index, data.values, width=0.55, \n           edgecolor='darkgray', color='#d4dddd',\n           linewidth=0.7)\n\n    for i in data.index:\n        ax.annotate(f\"{data[i]}\", \n                       xy=(i, data[i]),\n                       va = 'center', ha='center',fontweight='light',\n                       color='#4a4a4a')\n\n    for s in ['top', 'left', 'right']:\n        ax.spines[s].set_visible(False)\n\n    fig.text(0.1, 0.95, title, fontproperties=fontprop)    \n    ax.grid(axis='y', linestyle='-', alpha=0.4)    \n    plt.show()\n","7a7721e2":"df_year_19yrs = df_year[:20].sort_index(ascending=True)\n\ndraw_bar_chart(df_year_19yrs, '\uc5f0\ub3c4\ubcc4 \ucd9c\uc2dc \ud0c0\uc774\ud2c0 \uc218')","9538dddf":"df_type = df_all['type'].value_counts()\n\nfor index in df_type.index:\n    print(f'{index}\\t: {df_type[index]}\ud3b8')\n    \nplt.pie(df_type.values, labels=df_type.index, autopct='%.1f%%')\nplt.show()\n    ","44b018ea":"df_director = df_all['director'].dropna().value_counts()\n\ndf_director","c7a24785":"df_director_ten = df_director[:10]\n\n\nfor index in df_director_ten.index:\n    print(f'{index} : {df_director_ten[index]}\ud3b8')","50197c07":"df_raul_list = df_all[df_all['director'] == 'Ra\u00fal Campos, Jan Suter']\n\ndf_raul_list.head()","54b060f0":"def split_data(data):\n    buff = {}\n    \n    for i in range(len(data)):\n        if type(data[i]) == str:\n            for j in data[i].split(','):\n                item = j.strip()\n\n                if item in buff:\n                    buff[item] +=1\n                else:\n                    buff[item] = 1\n\n    index = np.array([])\n    values = np.array([])\n    \n    for item in sorted(buff.items(), reverse=True, key=lambda item: item[1]):\n        index = np.append(index, item[0])\n        values = np.append(values, item[1])\n    \n    return pd.Series(data=values, index=index, dtype=np.int)","6f3a669a":"data = split_data(df_all['country'])\n\ndata","3770e0a4":"draw_bar_chart(data[:10], '\ub9cc\ub4e4\uc5b4\uc9c4 \ub098\ub77c \uc0c1\uc704 10')","75560fc6":"data = split_data(df_all['cast'])\n\ndata","652077e8":"draw_bar_chart(data[:10], '\ucd5c\ub2e4 \ucd9c\uc5f0 \ubc30\uc6b0 10\uc704')","84a5b140":"# EDA\ub85c \ub137\ud50c\ub9ad\uc2a4 \uc54c\uc544\ubcf4\uae30\n\n![](https:\/\/i.cbc.ca\/1.4925337.1543629829!\/cpImage\/httpImage\/image.jpg_gen\/derivatives\/16x9_780\/netflix-prices-20181129.jpg)\n\n\ub137\ud50c\ub9ad\uc2a4 \ud0c0\uc774\ud2c0\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubcf4\uc790\n\n\uc6b0\uc120 kaggle\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c \uac00\uc838 \uc640\uc11c \ucd94\uac00\ud558\uace0\n\n\ud0d0\uc0ac\uc801 \ub370\uc774\ud130 \ubd84\uc11d(EDA, Exploratory Data Analysis)\uc73c\ub85c  \ub137\ud50c\ub9ad\uc2a4 \ubd84\uc11d\ud574 \ubcf4\ub294 \uc21c\uc73c\ub85c \uc9c4\ud589...","344f393e":"\uc0c1\uc704 10\uac1c\uad6d\ub9cc \ucd94\ub824\uc11c \ubc14\ucc28\ud2b8\ub85c \uadf8\ub824 \ubcf4\uba74\n\n\ub2f9\uc5f0\ud788 \ubbf8\uad6d\uc774 1\uc704\uace0,\ubc1c\ub9ac\uc6b0\ub4dc 2\uc704\uace0 \uc6b0\ub9ac\ub098\ub77c\ub3c4 8\uc704\ub85c \uc21c\uc704\uad8c\uc784","9c07b707":"\uadf8\ub54c \ud0c0\uc774\ud2c0 \uc218\ub294","d9b1e5c6":"\uc5f0\ub3c4\ubcc4\ub85c \ucd9c\uc2dc\ub41c \ud0c0\uc774\ud2c0 \uc218\ub97c \ubf51\uc544 \ubcf4\uc790\n\n\ud0c0\uc774\ud2c0\uc774 \uac00\uc7a5 \ub9ce\uc774 \ucd9c\uc2dc\ub41c \ud574\ub294","4a9340a8":"\ubc00\ub808\ub2c8\uc5c4\ubd80\ud130 19\ub144\uae4c\uc9c0\ub9cc \ubf51\uc544\uc11c \ucc28\ud2b8\ub97c \uadf8\ub824 \ubcf4\uba74","585904ec":"\uc6b0\uc120 pandas\ub97c import\ud558\uace0 \uc2dc\uc791\ud574 \ubcf4\uc790 ","31ad3fe2":"\ub137\ud50c\ub9ad\uc2a4 \ud0c0\uc774\ud2c0 \uc815\ubcf4 \uc77d\uc5b4 \uc624\uae30","c89732dc":"\uc7a5\ub974, \ub7ec\ub2dd \ud0c0\uc784, \uc2dc\uccad\uc81c\ud55c \uc5f0\ub839 \ub300\ub3c4 \ub354 \ub0a8\uc558\uc9c0\ub9cc, \ub108\ubb34 \ub9ce\uc774 \uc54c\uc544\ubd10\uc11c \uc774\uc81c \uadf8\ub9cc \uc54c\uc544\ubcf4\uae30\ub85c \ud568.\n\n\ub05d~","19a13e5f":"\uceec\ub7fc\uc740...","08f0af0e":"\uc77d\uc740 \ub370\uc774\ud130 \ud615\ud0dc\uac00 \uc5b4\ub5a4\uc9c0 \uccb4\ud06c","63f1cec1":"\ub2e4\uc791 \uac10\ub3c5 10\uc704\uae4c\uc9c0\ub9cc \ubf51\uc544 \ubcf4\uba74","cff6c494":"... \uadf8\ub798\ub3c4 \ubaa8\ub974\uaca0\uc74c. \ub300\ucda9 \uba55\uc2dc\ucf54\uc5d0\uc11c \uc2a4\ud0e0\ub4dc\uc5c5 \ucf54\uba54\ub514\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\ub294 \uc815\ub3c4.\n\n\uac10\ub3c5\uc740 \uc774\uc81c \ubd24\uc73c\ub2c8\uae4c, \ub9cc\ub4e4\uc5b4\uc9c4 \uad6d\uac00\ub97c \uc54c\uc544 \ubcf4\uba74","5391e258":"\uc774\ubc88\uc5d0\ub294 \uac10\ub3c5\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubcf4\uba74, \uac10\ub3c5 \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud558\uba74 \uc544\ub798\uc640 \uac19\uc740\ub370\n\n\uac10\ub3c5 \uc815\ubcf4\uac00 \uc5c6\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc5b4\uc11c \ud0c0\uc774\ud2c0 \uc218\uc640 \uac10\ub3c5 \uc218\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc74c, \ubb3c\ub860 \uac19\uc740 \uac10\ub3c5\uc774 \uc5ec\ub7ec \uc791\ud488\uc744 \ub9cc\ub4dc\ub294 \uacbd\uc6b0\ub3c4 \uc788\uace0","cd2080fb":"\uc774 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uc0ac\uc6a9\ud574\uc11c \ubd84\uc11d \uc2dc\uc791\n\n\ud0c0\uc774\ud2c0\uc758 \uac2f\uc218\ub294","9132c504":"\uc2a4\ucf5c\uc138\uc774\uc9c0, \uc2a4\ud544\ubc84\uadf8 \uac10\ub3c5\uc774\uc57c \uc720\uba85\ud558\ub2c8\uae4c \uc54c\uaca0\uc9c0\ub9cc\n\n1\ub4f1\uc744 \ud55c Ra\u00fal Campos, Jan Suter\ub294 \ucc98\uc74c \ubcf4\ub294 \uac10\ub3c5\ub4e4\uc774\uc5b4\uc11c, drill down\ud574 \ubcf4\uba74(\uacf5\ud1b5 \uc5f0\ucd9c\uc740 \uac10\ub3c5 \ud55c \uba85\uc73c\ub85c \uac04\uc8fc\ud568)","20e0f158":"\ucd9c\uc5f0\ud55c \ubc30\uc6b0\ub4e4\uc744 \uc0b4\ud3b4 \ubcf4\uba74","36a83b77":"1\uc704\ub294 \uc544\ub204\ud31c \ucf00\ub974\ub77c\uace0 \ud568. \uc798 \ubaa8\ub974\uaca0\uc74c. \uc544\ub798\uc640 \uac19\uc740 \ubd84\uc774\ub77c\uace0 \ud568\n\n![](https:\/\/lh3.googleusercontent.com\/proxy\/vlrk6KjNc1gVI1-xUDKmOqK0sSe6mBGEze5JYwOtBHD8ymjY511rMDIrvFfcm469052gYMBSVkjGiI1RgFNYgMfo_zdK4f1rV8R0MH0mUsGjuVZWAcRj5Z_H5lDhb2PkxHpUsVGUqLbxHW7ZiVEE)\n\n\uc5ed\uc2dc 10\uc704\uae4c\uc9c0 \ucc28\ud2b8\ub97c \uadf8\ub824\ubcf4\uba74","e131bbfd":"\uc601\ud654\uc640 TV\uc2dc\ub9ac\uc988\uc758 \ud3b8\uc218\ub97c \ubcf4\uba74"}}