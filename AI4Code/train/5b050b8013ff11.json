{"cell_type":{"d6afc729":"code","c99d5bbe":"code","399a500f":"code","19f454a6":"code","139d9cdf":"code","6a2cb615":"code","0139aa4a":"code","53f1fcbc":"code","9859e315":"code","9ef27014":"code","7af2291b":"code","55c0a452":"code","c38f4aa4":"code","5827f812":"code","5178a70c":"code","b028fff8":"code","04a038d5":"code","f5527421":"code","a53ed70a":"code","584c848e":"code","7433331f":"markdown","14b1c7c1":"markdown","cbeb6a18":"markdown","b58ceafb":"markdown"},"source":{"d6afc729":"import math\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom pathlib import Path\n\nROOT_PATH = Path('..\/input\/meta-kaggle')","c99d5bbe":"TEAM_NAME = 'wakame'\nCOMP_NAME = 'Elo Merchant Category Recommendation'","399a500f":"def get_competition_id(competition_name):\n    competitions = pd.read_csv(ROOT_PATH \/ 'Competitions.csv')\n    c = competitions[competitions['Title'].str.contains(competition_name)]\n    competition_id = c['Id'].iloc[0]\n    return competition_id\n\ndef get_teams_df(competition_id):\n    teams = pd.read_csv(ROOT_PATH \/ 'Teams.csv')\n    teams.rename(columns={'Id':'TeamId'}, inplace=True)\n    teams = teams[teams['CompetitionId'] == competition_id]\n    return teams\n\ndef get_submission_df():\n    submissions = pd.read_csv(ROOT_PATH \/'Submissions.csv')\n    submissions.rename(columns={'Id':'SubmissionId'}, inplace=True)\n    return submissions\n\ndef get_team_id(teams, team_name):\n    team_id = teams[teams['TeamName'] == team_name]['TeamId'].iloc[0]\n    return team_id\n\ndef get_specific_team_name_score(competition_name, team_name):\n    competition_id = get_competition_id(competition_name)\n    teams = get_teams_df(competition_id)\n    submissions = get_submission_df()\n    \n    df = pd.merge(submissions, teams, how='inner', on='TeamId')\n    team_id = get_team_id(teams, team_name)\n    use_cols = ['SubmissionDate', 'ScoreDate', 'IsAfterDeadline', \n                'PublicScoreFullPrecision', 'PrivateScoreFullPrecision',\n                'ScoreFirstSubmittedDate', 'LastSubmissionDate', \n                'IsBenchmark', 'Medal', 'MedalAwardDate',\n                'PublicScoreLeaderboardDisplay', 'PrivateScoreLeaderboardDisplay',\n                'PublicLeaderboardRank', 'PrivateLeaderboardRank']\n    \n    return df[df['TeamId'] == team_id][use_cols]","19f454a6":"df = get_specific_team_name_score(COMP_NAME, TEAM_NAME)","139d9cdf":"display(df)","6a2cb615":"df.to_csv('lb.csv')","0139aa4a":"use_cols = ['SubmissionDate', 'PublicScoreFullPrecision', 'PrivateScoreFullPrecision', 'IsAfterDeadline']\ndf = df[use_cols]","53f1fcbc":"df['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\ndf_on_comp = df[df['IsAfterDeadline'] != True].sort_values(by=['SubmissionDate'])","9859e315":"display(df_on_comp)","9ef27014":"px.line(df_on_comp,\n        x='SubmissionDate',\n        y=['PublicScoreFullPrecision', 'PrivateScoreFullPrecision'])","7af2291b":"competition_id = get_competition_id(COMP_NAME)\nteams = get_teams_df(competition_id)\nsubmissions = get_submission_df()\n\ndf = pd.merge(submissions, teams, how='inner', on='TeamId')","55c0a452":"display(df.head())","c38f4aa4":"competitions = pd.read_csv(ROOT_PATH \/ 'Competitions.csv')","5827f812":"c = competitions[competitions['Title'].str.contains(COMP_NAME)]\ncompetition_id = c['Id'].iloc[0]","5178a70c":"total_teams = competitions[competitions['Id'] == competition_id]['TotalTeams'].iloc[0]","b028fff8":"# https:\/\/www.kaggle.com\/progression\nif 0 < total_teams < 99:\n    rules = {'bronze': 0.4 , 'silver': 0.2, 'gold': 0.1}\nelif 100 < total_teams < 249:\n    rules = {'bronze': 0.4 , 'silver': 0.2, 'gold': 10}\nelif 250 < total_teams < 999:\n    rules = {'bronze': 100 , 'silver': 50, 'gold': 10 + total_teams \/\/ 500}\nelif 1000 <= total_teams:\n    rules = {'bronze': 0.1 , 'silver': 0.05, 'gold': 10 + total_teams \/\/ 500}\nelse:\n    raise ValueError('')","04a038d5":"def get_medal_place(_total_teams, rule):\n    medal_place = math.floor(_total_teams * rule) if isinstance(rule, float) else rule\n    return medal_place\n\nbronze = get_medal_place(total_teams, rules['bronze'])\nsilver = get_medal_place(total_teams, rules['silver'])\ngold = get_medal_place(total_teams, rules['gold'])","f5527421":"print(bronze, silver, gold)","a53ed70a":"df[df['PrivateLeaderboardRank'] == bronze]","584c848e":"df.columns","7433331f":"# Public\/Private LB Score Progress\nOutput a CSV(lb.csv) containing Public\/Private LB Score and submit date and time.","14b1c7c1":"# Set your TEAM_NAME and COMP_NAME\n\nStore the competition name and the team name for which you want to retrieve the LBscore in their respective variables ( COMP_NAME\/TEAM_NAME).\n\n## How to get a competition name\n\nCopy the strings displayed on the competition page.\n(e.g. https:\/\/www.kaggle.com\/c\/elo-merchant-category-recommendation)\n\n![fig_1.PNG](attachment:fig_1.PNG)\n\n## How to get a team name\n\nCopy the strings displayed on the team page.\n(e.g. https:\/\/www.kaggle.com\/c\/elo-merchant-category-recommendation\/team)\n\n![fig_2.PNG](attachment:fig_2.PNG)","cbeb6a18":"# Column Meaning\n\n|  Column_name  |  Meaning  |\n| ---- | ---- |\n|  SubmissionDate  |  Submission date |\n|  ScoreDate  |  Same meaning as SubmissionDate  |\n|  ScoreFirstSubmittedDate  |  -  |\n|  LastSubmissionDate  |  - |\n|  MedalAwardDate  |  Medal granting date |\n|  IsAfterDeadline  |  Whether to post after the deadline  |\n|  PublicScoreFullPrecision  |  Actual score  |\n|  PrivateScoreFullPrecision  |  Actual score  |\n|  PublicScoreLeaderboardDisplay  |  The score shown in LB  |\n|  PrivateScoreLeaderboardDisplay  |  The score shown in LB  |\n|  PublicLeaderboardRank  |  LB's rank  |\n|  PrivateLeaderboardRank  |  LB's rank  |","b58ceafb":"# Plot Public\/Private LB Score Progress"}}