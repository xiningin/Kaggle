{"cell_type":{"9d3b093d":"code","15a35062":"code","743b4280":"code","7299dc05":"code","b32af355":"code","2ea82aa3":"code","81051661":"code","468b5a0c":"code","5ae38b69":"code","f240b3f0":"code","86207143":"code","0b6b9580":"code","63f38a51":"code","383b4718":"code","2a42366e":"code","fb254790":"code","ba7d5d33":"code","0c1daa6d":"markdown","aeed147a":"markdown","4664697e":"markdown","7001dc12":"markdown","c2d46be4":"markdown","87ad4fec":"markdown","6df51fcf":"markdown","3020cb38":"markdown","6ff9f5ab":"markdown","e0a432eb":"markdown","7c999a45":"markdown","c14c6e56":"markdown","cc9a0fa7":"markdown","35362928":"markdown","bec83859":"markdown","0c594f72":"markdown","f2009b90":"markdown","95951432":"markdown","9b37db31":"markdown","ad3d7cb6":"markdown","1bdedcee":"markdown","29d4957c":"markdown"},"source":{"9d3b093d":"import os\nimport spacy\nimport wordcloud\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go","15a35062":"train_dir = \"..\/input\/feedback-prize-2021\/train\"\ntest_dir = \"..\/input\/feedback-prize-2021\/test\"\ntrain_files = os.listdir(train_dir)\ntest_files = os.listdir(test_dir)\n\nfor file in range(len(train_files)):\n    train_files[file] = str(train_dir) + \"\/\" +  str(train_files[file])\nfor file in range(len(test_files)):\n    test_files[file] = str(test_dir) + \"\/\" +  str(test_files[file])\n    \ntrain = pd.read_csv(\"..\/input\/feedback-prize-2021\/train.csv\")\nsub = pd.read_csv(\"..\/input\/feedback-prize-2021\/sample_submission.csv\")","743b4280":"print(\"Total number of train files = \" , len(train_files))\nprint(\"Total number of test files = \" , len(test_files))","7299dc05":"f = open(train_files[0], \"r\")\nprint(f.read())","b32af355":"f = open(test_files[3], \"r\")\nprint(f.read())","2ea82aa3":"train.head()","81051661":"print(\"Number of rows in train dataframe = \" , len(train))","468b5a0c":"train.describe()","5ae38b69":"train.isnull().sum()","f240b3f0":"sub.head()","86207143":"fig = px.bar(x = np.unique(train[\"discourse_type\"]),\ny = [list(train[\"discourse_type\"]).count(i) for i in np.unique(train[\"discourse_type\"])] , \n            color = np.unique(train[\"discourse_type\"]),\n             color_continuous_scale=\"Emrld\") \nfig.update_xaxes(title=\"Classes\")\nfig.update_yaxes(title = \"Number of Rows\")\nfig.update_layout(showlegend = True,\n    title = {\n        'text': 'Discourse Type Distribution ',\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        template=\"plotly_white\")\nfig.show()","0b6b9580":"fig = px.bar(x = np.unique(train[\"discourse_type_num\"]),\ny = [list(train[\"discourse_type_num\"]).count(i) for i in np.unique(train[\"discourse_type_num\"])] , \n            color = np.unique(train[\"discourse_type_num\"]),\n             color_continuous_scale=\"blues\") \nfig.update_xaxes(title=\"Classes\")\nfig.update_yaxes(title = \"Number of Rows\")\nfig.update_layout(showlegend = True,\n    title = {\n        'text': 'Enumerated class label of Discourse Element Distribution ',\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        template=\"plotly_white\")\nfig.show()","63f38a51":"train[\"discourse_len\"] = train[\"discourse_end\"] - train[\"discourse_start\"]\nfig = px.histogram(data_frame= train,x = \"discourse_len\",  marginal=\"violin\",nbins = 400 )\nfig.update_layout(template=\"plotly_white\")\nfig.show()","383b4718":"fig = px.histogram(data_frame= train,x = \"discourse_start\",  marginal=\"violin\" ,nbins = 400)\nfig.update_layout(template=\"plotly_white\")\nfig.show()","2a42366e":"fig = px.histogram(data_frame= train,x = \"discourse_end\",  marginal=\"violin\" ,nbins = 400)\nfig.update_layout(template=\"plotly_white\")\nfig.show()","fb254790":"wordcloud = wordcloud.WordCloud(stopwords=wordcloud.STOPWORDS, max_font_size=80, max_words=5000,\n                      width = 600, height = 400,\n                      background_color='black').generate(' '.join(txt for txt in train[\"discourse_text\"]))\nfig, ax = plt.subplots(figsize=(14,10))\nax.imshow(wordcloud, interpolation='bilinear')\nax.set_axis_off()\nplt.imshow(wordcloud);","ba7d5d33":"r = 20\nents = []\nfor i, row in train[train['id'] == train_files[r][35:-4]].iterrows():\n    ents.append({\n                    'start': int(row['discourse_start']), \n                     'end': int(row['discourse_end']), \n                     'label': row['discourse_type']\n                })\n\nwith open(train_files[r], 'r') as file: data = file.read()\n\ndoc2 = {\n    \"text\": data,\n    \"ents\": ents,\n}\n\ncolors = {'Lead': '#EE11D0','Position': '#AB4DE1','Claim': '#1EDE71','Evidence': '#33FAFA','Counterclaim': '#4253C1','Concluding Statement': 'yellow','Rebuttal': 'red'}\noptions = {\"ents\": train.discourse_type.unique().tolist(), \"colors\": colors}\nspacy.displacy.render(doc2, style=\"ent\", options=options, manual=True, jupyter=True);","0c1daa6d":"### Discourse Type Distribution","aeed147a":"### Quick view of Train Dataframe","4664697e":"### Quick view of Submission File","7001dc12":"### Test Essay Sample","c2d46be4":"### Column Description\n* **id** - ID code for essay response\n* **discourse_id** - ID code for discourse element\n* **discourse_start** - character position where discourse element begins in the essay response\n* **discourse_end** - character position where discourse element ends in the essay response\n* **discourse_text** - text of discourse element\n* **discourse_type** - classification of discourse element\n* **discourse_type_num** - enumerated class label of discourse element\n* **predictionstring** - the word indices of the training sample, as required for predictions","87ad4fec":"## Train Tabular Dataframe","6df51fcf":"  # <center> \ud83d\udcca FEEDBACK PRIZE - EDA \ud83d\udcca <\/center>\n## <center>If you find this notebook useful, support with an upvote\ud83d\udc4d<\/center>","3020cb38":"### The 7 different Discourse Type\n\n* **Lead** - an introduction that begins with a statistic, a quotation, a description, or some other device to grab the reader\u2019s attention and point toward the thesis\n* **Position** - an opinion or conclusion on the main question\n* **Claim** - a claim that supports the position\n* **Counterclaim** - a claim that refutes another claim or gives an opposing reason to the position\n* **Rebuttal** - a claim that refutes a counterclaim\n* **Evidence** - ideas or examples that support claims, counterclaims, or rebuttals.\n* **Concluding Statement** - a concluding statement that restates the claims","6ff9f5ab":"### Enumerated class label of Discourse Element Distribution","e0a432eb":"# <center>EDA<\/center> ","7c999a45":"# <center>WORD CLOUD<\/center> ","c14c6e56":"**Created by Sanskar Hasija**\n\n**\ud83d\udcca Feedback Prize - EDA \ud83d\udcca**\n\n**15 DECEMBER 2021**\n","cc9a0fa7":"# <center>DATA DISTRIBUTION<\/center> ","35362928":"# <center>DISCOURSE TEXT DISTRIBUTION<\/center> ","bec83859":"### Length of Discourse Text","0c594f72":"### Basic statistics of training data","f2009b90":"### Null Values ","95951432":"### Ending Position of Discourse Text","9b37db31":"### Train Essay Sample","ad3d7cb6":"# <center>TEXT VISUALIZATION<\/center> ","1bdedcee":"### Starting Position of Discourse Text","29d4957c":"# <center>IMPORTS<\/center> "}}