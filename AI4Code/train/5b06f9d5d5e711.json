{"cell_type":{"b4ec3c2c":"code","0eba773a":"code","e03ba394":"code","53e50607":"code","aa584254":"code","24b127a4":"code","71ba8943":"code","d6f20c4e":"code","0933ee0e":"code","4008fc3c":"code","f4009587":"code","4239567a":"code","9edbf5e0":"code","5bb9ffdc":"code","b35298b9":"code","685f6e14":"code","0479c8b9":"code","78314494":"code","750dac75":"code","cea98203":"code","892c3bed":"code","76167453":"code","3e3b320f":"code","e666f890":"code","b63aec8f":"code","18765b51":"code","e9f6faa4":"code","ebdb9705":"code","2241b570":"code","ec51f05e":"code","ae8abb01":"code","22cab041":"code","dd7c615b":"code","40388c98":"code","c2de9989":"code","f6e1986b":"code","f6d0db20":"code","3ad0e1d9":"code","188af1ce":"code","cd26e045":"code","074c9363":"code","246504f4":"code","f9dd63d5":"code","82fe21ea":"code","8564699d":"code","103e7808":"code","0757ee98":"code","025f52a8":"code","dca5ad91":"code","5d38ccab":"code","f3642129":"code","ff7d40b7":"code","9e17ed9e":"code","9d7e0d70":"code","4751dfd2":"code","dd336652":"code","edc294d0":"code","5e43b457":"code","fc8eb727":"code","5c5b0a12":"code","d200a613":"code","b13d9206":"code","b9021669":"code","d6e38506":"code","de9e19ea":"code","571217a0":"code","c733774c":"code","757b1b5a":"code","61e4be61":"code","02400cff":"code","d562bc41":"code","b710958f":"code","56c14ea0":"code","e985403b":"code","56910b39":"code","9aea5f53":"code","cbcf1e38":"code","48168d50":"code","a1cfcb8a":"code","7535a3ea":"code","972812c8":"code","3341d4f9":"code","63c00ae4":"code","922551bd":"code","4714c553":"code","0b664bfb":"code","902a24c6":"markdown","62db85f9":"markdown","22588443":"markdown","0bd295ca":"markdown","9c383f02":"markdown","a0bcb878":"markdown","37c20988":"markdown","4656fe50":"markdown","4085e426":"markdown","0ee83e50":"markdown","60df3527":"markdown","13ae8f05":"markdown","2356663f":"markdown","f47008ae":"markdown","076f9d8c":"markdown","ae097b54":"markdown","0b8ac29d":"markdown","d5681106":"markdown","8ed2df46":"markdown","0bfe801d":"markdown","b4c0740b":"markdown","44f8cb66":"markdown","2f6824bc":"markdown","084f605a":"markdown","d0f9906d":"markdown","0b99919f":"markdown","ef7f5ede":"markdown","cb6b142a":"markdown","49da4516":"markdown","223219fe":"markdown","c380f648":"markdown","db42b4b5":"markdown","5485cc60":"markdown","7ca5e1f2":"markdown","dc3b9826":"markdown","9c573206":"markdown","b98794fd":"markdown","7412a972":"markdown","acae5679":"markdown","2ccd52b3":"markdown","28ca5687":"markdown","0ce72715":"markdown","5de3d201":"markdown","31385e37":"markdown","088e95e5":"markdown","4ec88c67":"markdown","befcb1db":"markdown","19f55279":"markdown","15c0c8e7":"markdown","d5131562":"markdown","d8948d4a":"markdown","d29d1f76":"markdown","1034f040":"markdown","64100d53":"markdown","aa42e689":"markdown","2f099711":"markdown","d68b91c9":"markdown","bb78a243":"markdown"},"source":{"b4ec3c2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0eba773a":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","e03ba394":"print(*(\"Size of data table: {}\".format(len(df)),\n        df.columns.values, \n        \"Number of columns: {}\".format(len(df.columns))), \n      sep='\\n')","53e50607":"df.head()","aa584254":"dico = {\"Continuous\" : [\"Age\", \"Fare\"],\n        \"Discrete\" : [\"SibSp\", \"Parch\"],\n        \"Categorical\" : [\"Survived\", \"Sex\", \"Embarked\"],\n        \"Ordinal\": [\"Pclass\"],\n        \"Alphanumeric\" : [\"Ticket\", \"Cabin\"]}\nfor dtype, feature in dico.items():\n    print(\"{}: {}\".format(dtype, ', '.join(feature)))","24b127a4":"print(*(df['Survived'].value_counts(),\n        \"-----\"*3,\n        df['Sex'].value_counts(),\n        \"-----\"*3,\n        df['Embarked'].value_counts(),\n        \"-----\"*3,\n        df['Pclass'].value_counts()), \n      sep='\\n')","71ba8943":"df.info()","d6f20c4e":"df[df['Embarked'].isnull()]","0933ee0e":"not_embark = df[df['Embarked'].isnull()]","4008fc3c":"#df.drop([61, 829], inplace=True)","f4009587":"df.info()","4239567a":"# We group by the data by the cabin's values and count to get how many passengers there\n# were in each cabin\ncabin_count = df.groupby('Cabin').count()","9edbf5e0":"len(cabin_count[cabin_count['PassengerId']>=2]['PassengerId'])","5bb9ffdc":"shared_cabins = dict(cabin_count[cabin_count['PassengerId']>=2]['PassengerId'])","b35298b9":"nb_pass = {}\nfor i in range(min(shared_cabins.values()), max(shared_cabins.values())+1):\n    l = [v for v in shared_cabins.values() if v==i]\n    nb_pass[\"Number of passengers: {}\".format(i)]=len(l)\nprint(nb_pass)","685f6e14":"shared_cabins_names = [k for k in shared_cabins.keys()]","0479c8b9":"grouped = df.loc[df['Cabin'].isin(shared_cabins_names)].groupby('Cabin')['Name']","78314494":"for key, item in grouped:\n    print(grouped.get_group(key), \"\\n\\n\")","750dac75":"df.info()","cea98203":"import seaborn as sns","892c3bed":"sns.relplot(x='PassengerId', y='Age', hue='Pclass', data=df)","76167453":"useries = df[df['Pclass']==1][['Pclass', 'Age', 'Sex']].reset_index().drop('index', axis=1)\nmseries = df[df['Pclass']==2][['Pclass', 'Age', 'Sex']].reset_index().drop('index', axis=1)\nlseries = df[df['Pclass']==3][['Pclass', 'Age', 'Sex']].reset_index().drop('index', axis=1)","3e3b320f":"dplot = pd.concat([useries, mseries, lseries])","e666f890":"sns.relplot(x=df.index, y='Age', hue='Pclass', data=dplot).set(title = 'Scatter plot showing the relationship between Age and Pclass')","b63aec8f":"print(*(\n        \"Pclass=1\",\n        \"Mean: {}\".format(useries['Age'].mean()), \n        'Std: {}'.format(useries['Age'].std()),\n        \"-\"*11,\n        \"Pclass=2\",\n        \"Mean: {}\".format(mseries['Age'].mean()), \n        'Std: {}'.format(mseries['Age'].std()),\n        \"-\"*11,\n        \"Pclass=3\",\n        \"Mean: {}\".format(lseries['Age'].mean()), \n        'Std: {}'.format(lseries['Age'].std())\n),\n      sep='\\n')","18765b51":"sns.boxplot(x=\"Pclass\", y=\"Age\", hue=\"Sex\", data=dplot)","e9f6faa4":"for pclass in [1, 2, 3]:\n    for sex in ['female', 'male']:\n        val = df[(df['Pclass']==pclass) & (df['Sex']==sex)]['Age'].median()\n        indices = []\n        for index, nan in df[(df['Pclass']==pclass) & (df['Sex']==sex)]['Age'].isnull().items():\n            if nan==True:\n                indices.append(index)\n        df.loc[indices, 'Age'] = val","ebdb9705":"df.head()","2241b570":"import re","ec51f05e":"titles = df['Name'].str.extract(r'(,\\s[a-zA-Z]+\\.?)')[0].apply(lambda x: x.strip(', '))","ae8abb01":"titles[:10]","22cab041":"df['Title'] = titles\ndf = df.drop('Name', axis=1)","dd7c615b":"df.head()","40388c98":"df['Title'].value_counts()","c2de9989":"# To copy the titles we're willing to regroup\nlist(df['Title'].value_counts()[4:].index)","f6e1986b":"df.replace({'Title': ['Dr.',\n 'Rev.',\n 'Mlle.',\n 'Major.',\n 'Col.',\n 'Mme.',\n 'Lady.',\n 'the',\n 'Jonkheer.',\n 'Don.',\n 'Sir.',\n 'Capt.',\n 'Ms.']}, 'Others', inplace=True)","f6d0db20":"df['Title'].value_counts()","3ad0e1d9":"df = df.drop('Cabin', axis=1)","188af1ce":"df.drop(np.where(df['Embarked'].isnull())[0], axis=0, inplace=True)","cd26e045":"df.drop('PassengerId', axis=1, inplace=True)","074c9363":"df.drop('Ticket', axis=1, inplace=True)","246504f4":"df.columns","f9dd63d5":"q1f = len(df[(df['Sex']=='female')&(df['Survived']==1)])\/len(df[df['Survived']==1])*100 \nq1m = 100-q1f\n\nprint(\n    *(\n        \"Percentage of female survivors among all survivors: {}\".format(q1f),\n        \"Percentage of male survivors among all survivors: {}\".format(q1m)\n    ),\n    sep='\\n'\n)","82fe21ea":"q2f = len(df[(df['Sex']=='female')&(df['Survived']==1)])\/len(df[df['Sex']=='female'])*100 \nq2m = len(df[(df['Sex']=='male')&(df['Survived']==1)])\/len(df[df['Sex']=='male'])*100\n\nprint(\n    *(\n        \"Percentage of female survivors among all females: {}\".format(q2f),\n        \"Percentage of male survivors among all males: {}\".format(q2m)\n    ),\n    sep='\\n'\n)","8564699d":"g = sns.FacetGrid(df, col=\"Survived\")\ng.map(sns.histplot, 'Age')","103e7808":"g = sns.FacetGrid(df, row='Sex', col=\"Survived\", height=4, aspect=1.5, margin_titles=True)\ng.map(sns.histplot, 'Age', stat='count')","0757ee98":"g = sns.FacetGrid(df, row='Sex', col=\"Survived\", height=4, aspect=1.5, margin_titles=True)\ng.map(sns.histplot, 'Age', stat='count', kde=True)","025f52a8":"(df[(df['Sex']=='female')&(df['Survived']==1)]['Age'].mean(),\n df[(df['Sex']=='female')&(df['Survived']==1)]['Age'].std())","dca5ad91":"(df[(df['Sex']=='male')&(df['Survived']==1)]['Age'].mean(),\n df[(df['Sex']=='male')&(df['Survived']==1)]['Age'].std())","5d38ccab":"a1 = len(df[(df['Age']<=12)])\na2 = len(df[(df['Age']<=12) & (df['Survived']==1)])\/a1*100\nprint(\n    *(\n        \"Total number of children: {}\".format(a1),\n        \"Percentage of saved children: {}\".format(a2)\n    ), \n    sep='\\n')","f3642129":"df[(df['Sex']=='female')&(df['Survived']==1)]['Title'].value_counts()","ff7d40b7":"df[(df['Sex']=='male')&(df['Survived']==1)]['Title'].value_counts()","9e17ed9e":"sns.histplot(x='Embarked', hue='Sex', multiple=\"dodge\", shrink=.8, data=df, palette='rocket')","9d7e0d70":"len(df[df['Embarked']=='S'])\/len(df)*100","4751dfd2":"sns.histplot(x='Embarked', hue='Sex', multiple=\"dodge\", shrink=.8, \n             data=df[df['Survived']==1], palette='rocket')","dd336652":"sns.histplot(x='Pclass', hue='Sex', multiple=\"dodge\", shrink=.8, data=df, palette='rocket')","edc294d0":"sns.histplot(x='Pclass', hue='Sex', multiple=\"dodge\", shrink=.8, \n             data=df[df['Survived']==1], palette='rocket')","5e43b457":"p3 = len(df[(df['Survived']==1)&(df['Sex']=='female')&(df['Pclass']==3)])\np2 = len(df[(df['Survived']==1)&(df['Sex']=='female')&(df['Pclass']==2)])\np1 = len(df[(df['Survived']==1)&(df['Sex']=='female')&(df['Pclass']==1)])\nt = len(df[(df['Survived']==1)&(df['Sex']=='female')])\n\n(p3\/t*100, p2\/t*100, p1\/t*100)","fc8eb727":"df[(df['Survived']==1)&(df['Sex']=='female')]['Fare'].describe()","5c5b0a12":"df[(df['Survived']==1)&(df['Sex']=='male')]['Fare'].describe()","d200a613":"df[(df['Survived']==1)&(df['Sex']=='female')].groupby('Pclass')['Fare'].describe()","b13d9206":"df[(df['Survived']==1)&(df['Sex']=='male')].groupby('Pclass')['Fare'].describe()","b9021669":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","d6e38506":"titanicPipeline = ColumnTransformer([\n    (\"numerical_features\", StandardScaler(), ['Age', 'Fare', 'SibSp', 'Parch']),\n    (\"categorical_features\", OneHotEncoder(), ['Pclass', 'Sex', 'Embarked', 'Title'])\n])","de9e19ea":"train_df = df.copy()\ntrain_df.drop('Survived', axis=1, inplace=True)","571217a0":"train_df_r = titanicPipeline.fit_transform(train_df)","c733774c":"ytrain = np.array(df['Survived'])","757b1b5a":"from sklearn.utils import shuffle","61e4be61":"Xtrain, ytrain = shuffle(train_df_r, ytrain, random_state=0)","02400cff":"#from sklearn.linear_model import LogisticRegression\n#lr_clf = LogisticRegression(random_state = 0, max_iter=1000)\n#lr_clf.fit(Xtrain, ytrain)\n","d562bc41":"from sklearn.neural_network import MLPClassifier","b710958f":"clf = MLPClassifier(hidden_layer_sizes = (32, 32), solver = 'adam', max_iter=5000)\nclf.fit(Xtrain, ytrain)","56c14ea0":"testdf = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e985403b":"titles_test = testdf['Name'].str.extract(r'(,\\s[a-zA-Z]+\\.?)')[0].apply(lambda x: x.strip(', '))","56910b39":"testdf['Title'] = titles_test","9aea5f53":"testdf['Title'].value_counts()","cbcf1e38":"testdf.replace({'Title': ['Col.',\n'Rev.',\n'Ms.',\n'Dona.',\n'Dr.']}, 'Others', inplace=True)","48168d50":"testdf.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)","a1cfcb8a":"replacement_dico = {}\nfor pclass in [1, 2, 3]:\n    for sex in ['female', 'male']:\n        val = df[(df['Pclass']==pclass) & (df['Sex']==sex)]['Age'].median()\n        replacement_dico[(pclass, sex)] = val","7535a3ea":"for pclass in [1, 2, 3]:\n    for sex in ['female', 'male']:\n        val = replacement_dico[(pclass, sex)]\n        indices = []\n        for index, nan in testdf[(testdf['Pclass']==pclass) & (testdf['Sex']==sex)]['Age'].isnull().items():\n            if nan==True:\n                indices.append(index)\n        testdf.loc[indices, 'Age'] = val","972812c8":"testdf.loc[152, 'Fare'] = 14.52","3341d4f9":"testdf_r = titanicPipeline.transform(testdf)","63c00ae4":"np.argwhere(np.isnan(testdf_r))","922551bd":"#predicted = lr_clf.predict(testdf_r)\npredicted = clf.predict(testdf_r)","4714c553":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","0b664bfb":"submission = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predicted})\nsubmission.to_csv('submission.csv', index=False)","902a24c6":"Before we train the model we have to rescale the numerical features and one-hot encode the categorical ones. We use a ColumnTransformer for that purpose which we will apply different preprocessing steps on the specified columns.","62db85f9":"So far we found that:\n* two passengers didn't embark and we removed them from the data.\n* Only 45 cabins out of 202 registred cabins were used by more than 2 passengers.\n* The majority of those shared cabins were shared by family members.\n\nThe last two points don't bring much insight at the moment so we'll run the ML algorithms on the data without the *Cabin* feature, it may be used as an exploratory variable and maybe we could add it later. \n\nWe will also drop later *PassenderId* which only serves for indexing, but we'll keep it now since it may help with selecting rows etc.","22588443":"So the fees go from really low prices to really high ones and as one would suspect, it depends on the socio-economic status of the passenger, as show the statistics below:","0bd295ca":"##### 1. What is the percentage of $Sex=i$ survivors among all survivors?\nLet's find $q_{1}$","9c383f02":"##### 4. What are the most repetitive titles among $Sex=i$ survivors?\nLet's find $q_{4}$","a0bcb878":"The fact that they survived strenghtens our belief about the two passengers. Let's store the data of two passengers and check later after training and testing our model if they would have survived the sinking or not.","37c20988":"Let's check how many titles we got and the proportion of each one. We can do that directly with ```value_counts()``` for categorical variables.","4656fe50":"Even among females the majority survived which is not the case for males.","4085e426":"##### iii) Taking care of *Embarked*","0ee83e50":"##### ii) Taking care of *Cabin*","60df3527":"##### v) Taking care of *Ticket*","13ae8f05":"Let's check how many cabins were shared and how many passengers there were","2356663f":"We can choose as the center of the 'majority' interval of $Ages$ for the $Survived=1$ and $Sex=i$: the mean of each corresponding categories, and the width the corresponding standard deviation. It'll contain $87\\%$ of $Ages$ for each category.","f47008ae":"##### i) Taking care of *Name*\nLet's take a look again at the first five columns and see if there is a general pattern for registring the titles and names of passengers.","076f9d8c":"### I\/ Data Exploration and Cleaning\nWe start by looking at the **size** of our data table, the **columns** names and by having a look at the **first rows** of our data.","ae097b54":"**i)** The *Name* feature can capture some socio-economic information since some spheres of society may choose some names rather than others, it may also correlate a bit with *Age* as names change from a generation to another. But as it is right now it's difficult to exploit the *Name* feature so an idea is to extract only the first names which will constitute a categorical variable, but with not so many rows it's better to constitute a categorical variable of the titles.\n\n**ii)** We mentioned earlier that we'll drop the *Cabin* column as it contains many missing values and it doesn't provide much insight on the passengers.\n\n**iii)** We also said that we'll drop two rows for which *Embarked* is missing and for which $Survived=1$, indicating that the passengers probably didn't get on the Titanic.\n\n**iv)** We'll drop the *PassengerId* as it only serves as indexing and doesn't capture a feature about the passengers.\n\n**v)** We'll also drop the *Ticket* column since it is just the ticket number and doesn't contain information about the passenger to relate to its survival.","0b8ac29d":"We notice that the feature *Embarked* is missing two values, we can assume that they didn't embark on the Titanic. Let's look check if they what the *Survived* feature is for these two rows.\n\n```df['Embarked'].isnull()``` returns a boolean-type series of False when the value isn't null and True when it's the case. We feed it to our DataFrame so as it selects only rows with True value.","d5681106":"So a majority of passengers came from Southampton which may bias a bit our model since:","8ed2df46":"So overall more females survived than males.","0bfe801d":"Maybe the shared cabins were shared among families. Let's check that.","b4c0740b":"### II\/ Data Analysis","44f8cb66":"We notice that some titles don't have much holders like Dr. , Rev. , Mlle. ... So it's better to regroup all those titles in an independent category named *Others*. ","2f6824bc":"So the general format is: *LastName1*, *Title*.? *FirstName* *LastName2* (*Names*)? with the point after the title is optional (we don't know if it's always the case), and the same goes for the names between parentheses.\n\nThe easy way to grab the title is to notice that it always comes after a comma ',' followed by a whitespace (blank space) '\\s', then it's a one or more mix of upper and lower case alphabets [a-zA-Z]+ it optionally ends with a point '\\.?'\n\nThe series.str.extract returns a *DataFrame* with a column per capture group (pattern). We'll select that column and apply a function to strip each title from the comma and blank space. ","084f605a":"Even though there were more people coming from the lower class, the upper class knows the highest rate of survivors among all $Sex$. Though there is less survivors among $Sex=female$ passengers from the middle class than among the worker class. This is due maybe due to the difference in passengers numbers from each class. To get an acrurate idea we have to 'normalize': ","d0f9906d":"Since these two passengers didn't embark on the Titanic, their data won't be helpful for our models. \nWe'll delete the two rows from our dataframe later.","0b99919f":"While the titles for female passengers at the moment could suggest an *Age* category, being a 'Miss.' suggests being younger than a 'Mrs.', while all men possessed the title 'Mr.'. And it's hard to interpret other titles as we don't have them explicitely.","ef7f5ede":"The data looks like it could be bell-shaped. Let's plot a kernel density estimation to help visualize that, and to help choosing intervals over which to divide $Age$.","cb6b142a":"Let's prepare the test data and apply our model to it and then submit the predictions.","49da4516":"##### 6. What is the percentage of $Pclass$ categories present among $Sex=i$ survivors?\nLet's find $q_{6}$\n","223219fe":"As we can see, if we plot the data directly we can gain no insight, it's because the *PassengerId* of each socio-economic class is mixed. Let's create a 'cleaner' table for out plot.","c380f648":"Let's check if everything's okay","db42b4b5":"Now that we have cleaner data, let's analyze the correlations between our features and our aim variable *Survived* and see if we can get further clean data, add or extrat better features...","5485cc60":"\nThis first look give us an idea about the **data type** of our features and if there are any missing values. It is usually not enough to only look at the first rows to know if there are any missing values though. Let's print nicely what each feature's **data type** is. This will help for choosing which type of **graphs** to plot depending on which **data type** we're dealing with.","7ca5e1f2":"##### 5. For $Sex=i$ fixed, what are the $Embarked$ categories that hold the highest percentage of survivors?\nLet's find $q_{5}$","dc3b9826":"We notice then our visualization alone of the count was leading us down a wrong path, in term of percentages of female survivors we can say it's the 'same' whether they come from the lower or middle class.","9c573206":"We notice that there isn't much difference across *Sex* for $Pclass=2$ which is not the case for $Pclass=1$ and $Pclass=3$. We also notice that the median *Age* for males is higher than the median age for females. And overall, whether the passengers were labeled as male or female, the median ages decreases as we move from the upper socio-economic status to the lower socio-economic status.\n\nIn order to have a more rigorous analysis we have to use thorough statistical tests like ANOVA (one-way analysis of variance)... but it's no 'big deal' to replace the missing values of *Age* with the median value corresponding to the appropriate *Pclass* and *Sex* for each passenger whose *Age* wasn't registered.","b98794fd":"So $72\\%$ of our data comes from $Embarked=S$. It's safe to assume that a majority of survivors would come from Southampton too.","7412a972":"So $87\\%$ of female passengers had ages in the interval: $[15, 41]$, whereas $87\\%$ of male passengers had ages in the interval: $[12, 42]$. This can be explained by the fact that *Age* was more disperse among male passengers.\n\nLet's look at how many children, $Age\\leq12$, were there and how many were saved.","acae5679":"Visually we can notice that there is much more dispersion, variance across the upper class compared to the other two. We also notice that the mean of ages for the upper class is a bit above the mean of the ages of the two other classes but the mean of ages for the middle and lower class are a bit close. \n\nWe need to use statistical tests to find if there are significatively different or not.","2ccd52b3":"As one could expect, the majority of passengers come from the lower class, while there is a bit more passengers from the upper class than the middle.","28ca5687":"Although the distribution looks like it's skewed to the right it is natural for the *Age* variable since there are more ages possible for 'old' passengers than 'children'. Let's look at the distribution of *Age* over *Survived* and *Sex*.","0ce72715":"##### 2. What is the percentage of $Sex=i$ survivors out of all $Sex=i$ passengers?\nLet's find $q_{2}$","5de3d201":"So out of 202 cabins only 45 were shared. Let's look at how many people were in each shared cabin.","31385e37":"Now that we have replace the missing *Age* values by the median corresponding to the *Pclass* and *Sex* of the passenger, we'll no longer have null values after taking care of *Cabin* and the two rows of *Embarked*.","088e95e5":"### III\/ Model Building","4ec88c67":"Let's condition our analysis on the *Sex* feature too to get more insight on the *Age* **distribution** across those two categorical variables. We use the **boxplots** for that.","befcb1db":"Let's now fill in the missing values for the 'Age' column. As we mentionned earlier, we have to study the correlations between *Age* feature and the other features and only keep the most significant one in order to derive from them statistics (mean, standard deviation, median...) to fill in the missing values.\n\nSince *Age* is a continuous feature and *Pclass* is a categorical one, let's see first if we can visually say that there is a **relationship** between these two features.","19f55279":"We notice at first sight that the majority are families, but there are some exceptions where cabins are shared between people not from the same family.","15c0c8e7":"Below is a set of questions I'm trying to find the answer to, $i\\in\\{female,male\\}$. We answer each question with a quantity $q_{j}$ where $j$ denotes the question.\n\n1. What is the percentage of $Sex=i$ survivors among all survivors? => $q_{1}$\n2. What is the percentage of $Sex=i$ survivors out of all $Sex=i$ passengers? => $q_{2}$\n3. What is the *Age* range for which there is the most survivors for each $Sex=i$? => interval\n4. What are the most repetitive titles among $Sex=i$ survivors? => $q_{4}$\n5. For $Sex=i$ fixed, what are the $Embarked$ categories that hold the highest percentage of survivors? => $q_{5}$\n6. What is the percentage of $Pclass$ categories present among $Sex=i$ survivors? => $q_{6}$\n7. What is the 'mean' *Fare* interval for the $Sex=i$ survivors? => interval\n\nWe have to keep in mind that our sample only contains $889$ passengers out of the $2240$ that were present the day it sank, which represents $39.68\\%$ of the total passengers.","d5131562":"##### 3. What are the *Age* ranges that survived for each $Sex=i$ survivors?\nLet's visualize the distribution of $Age$ over $Survived$ and $Sex$ and let's find $q_{3}$","d8948d4a":"It's important to shuffle the data so the algorithm doesn't learn some order that's preintroduced.","d29d1f76":"We notice that the non-null count for the *Cabin* column is very low, but at the same time many slept in the same cabin. Let's check this fact.","1034f040":"The *Age* being obviously an essential criteria for choosing which passengers to save first, we can't just drop the column for having Null values. Moreover, it only lacks 177 values.\n\nTo fill in the missing values for the *Age* feature, we have to make sure we're not working across all categories. I believe there are correlations between the other features and the *Age*. It could be that passengers of the lower class ($Pclass=3$) are younger than the other socio-economic classes because they're a majority of young workers who traveled to search for better opportunities.","64100d53":"It's provided on Kaggle a good description of what each variable is and how many categories there are for the categorical variable, but in case it's not provided, we can use the method ```value_counts()``` to get this information.","aa42e689":"##### 7. What is the 'majority' *Fare* interval for the $Sex=i$ survivors?","2f099711":"##### iv) Taking care of *PassengerId*","d68b91c9":"We start by examining the continuous features. Let's start by plotting the distribution of *Age* over the two *Survived* categories.","bb78a243":"We saw earlier when looking at the first five rows of the data that some values are missing. To know which features are lacking values in some rows and how many missing values there are, we use ```df.info()```."}}