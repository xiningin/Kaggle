{"cell_type":{"32162cd2":"code","7d4a1d66":"code","0126d294":"code","35cbf192":"code","805f7930":"code","370a982a":"code","9b92af0d":"code","3dab6f84":"code","895b5b56":"code","3a27c1a4":"code","d4e892d3":"code","fa28ad43":"code","1f7ed47e":"code","eaec19a5":"code","d185a63f":"code","bf2cdcb3":"code","f4b98ca2":"code","9ad82d2b":"code","a04afb40":"code","51f23022":"code","6e3b13f2":"code","eb087950":"markdown","ca22e7ed":"markdown","b334a530":"markdown","e6be91ac":"markdown","d2a2fcbb":"markdown","0fbd9459":"markdown","c9767dc5":"markdown","78780284":"markdown","c6fb7c9f":"markdown","ef5d3302":"markdown","4f4f281e":"markdown","23805439":"markdown","acc49300":"markdown","6a82b261":"markdown","d3522182":"markdown","7523f968":"markdown","16dbe4ff":"markdown"},"source":{"32162cd2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# split dataset into train and test\nfrom sklearn.model_selection import train_test_split\n\n# eval(accuracy_score, precision_score, recall_score, roc_auc_score,f1_score, confusion_matrix, precision_recall_curve,roc_curve)\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score, f1_score\nfrom sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve\n\n# \uc815\uaddc\ubd84\ud3ec\ub97c \uc774\uc6a9\ud55c \uc804\ucc98\ub9ac \nfrom sklearn.preprocessing import StandardScaler\n\n# \ud68c\uadc0\ubd84\uc11d\nfrom sklearn.linear_model import LogisticRegression","7d4a1d66":"diabets_data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndiabets_data.head(3)","0126d294":"diabets_data.info()","35cbf192":"# zero value should be replace into some extent of value. e.g) mean, median\n# median() should be acceptible.\ndiabets_data.describe()","805f7930":"diabets_data['Outcome'].value_counts()","370a982a":"def get_clf_eval(y_test, pred=None, pred_proba=None):\n    '''\n    Accuracy, Precision, Recall \n    '''\n    eval_dict = {}\n    confusion = confusion_matrix( y_test, pred)\n    accuracy = accuracy_score(y_test , pred)\n    precision = precision_score(y_test , pred)\n    recall = recall_score(y_test , pred)\n    f1 = f1_score(y_test,pred)\n    \n    # ROC-AUC \n    roc_auc = roc_auc_score(y_test, pred_proba)\n    \n    print('confusion matrix')\n    print(confusion)\n    \n    # ROC-AUC print \n    print('accuracy: {0:.4f}, precision: {1:.4f}, recall: {2:.4f},F1: {3:.4f}, AUC:{4:.4f}'.format(accuracy, precision, recall, f1, roc_auc))   \n    eval_dict['Accuracy'] = accuracy\n    eval_dict['Precision'] = precision\n    eval_dict['Recall'] = recall\n    eval_dict['F1'] = f1\n    eval_dict['ROC AUC'] = roc_auc\n    return eval_dict","9b92af0d":"def precision_recall_curve_plot(y_test=None, pred_proba_c1=None):\n    \"\"\"\n    threshold ndarray\uc640 \uc774 threslhold\uc5d0 \ub530\ub978 \uc815\ubc00\ub3c4, \uc7ac\ud604\uc728 \ucd94\ucd9c \ud6c4 \uc2dc\uac01\ud654 \n    \"\"\"\n    precisions, recalls, thresholds = precision_recall_curve(y_test, pred_proba_c1)\n    \n    plt.figure(figsize = (8, 6))\n    threshold_boundary = thresholds.shape[0]\n    plt.plot(thresholds, precisions[0: threshold_boundary], linestyle = '--', label = 'Precision', color='red')\n    plt.plot(thresholds, recalls[0:threshold_boundary], label = 'Recall', color='blue')\n    \n    start, end = plt.xlim() # 0 \uacfc 1\uc744 X-axis, Y-axis\n    \n    plt.xticks(np.round(np.arange(start, end, 0.1), 2))\n    plt.xlabel(\"threshold\")\n    plt.ylabel(\"Precision and Recall\")\n    plt.legend()\n    plt.show()","3dab6f84":"X = diabets_data.iloc[:, :-1]\ny = diabets_data.iloc[:,-1]\n\nX_train, X_test, y_train, y_test  = train_test_split(X, y, test_size=.2, random_state=2021)\n\nlr_clf = LogisticRegression()\nlr_clf.fit(X_train, y_train) # train\n\npreds = lr_clf.predict(X_test)\npred_proba = lr_clf.predict_proba(X_test)[:,1]","895b5b56":"get_clf_eval(y_test, preds, pred_proba)","3a27c1a4":"# precision recall curve\nprecision_recall_curve_plot(y_test, pred_proba)","d4e892d3":"zero_features = [\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\"]\n\ndef show_hist_zero_feature(zero_features,df):\n    '''\n    Show histogram for zero features\n    '''\n    for zero_feature in zero_features:\n        plt.figure(figsize=(8, 6))\n        plt.hist(diabets_data[zero_feature], bins = 10)\n        plt.title(zero_feature)\n    plt.show()","fa28ad43":"show_hist_zero_feature(zero_features, diabets_data)","1f7ed47e":"zero_features = [\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\"]\ndef get_zero_features_rate(zero_features):\n    \"\"\"\n    Return DataFrame which have two feature \n    cnt, ratio\n    \"\"\"\n    result = {}\n    total_count = diabets_data['Glucose'].count()\n    \n    for zero_feature in zero_features:\n        zero_count = diabets_data[diabets_data[zero_feature]==0][zero_feature].count()\n        percent = np.round(100 * zero_count \/ total_count, 2)\n        result[zero_feature] = [zero_count, percent]\n    result_df = pd.DataFrame(data = result.values(), index = result.keys(), columns = ['Feature Value_0_cnt', 'Feature Value_0_Ratio'])\n    return result_df\n\nget_zero_features_rate(zero_features)","eaec19a5":"# \uc704\uc758 \ud3c9\uade0\uac12\ubcf4\ub2e4\ub294 \uc911\uc559\uac12(median)\uc73c\ub85c \ub300\uce58\nmedian_zero_features = [diabets_data[zero_features].median()]\nmedian_zero_features","d185a63f":"diabets_data[zero_features]=diabets_data[zero_features].replace(0, diabets_data[zero_features].median())\ndisplay(diabets_data.head(), diabets_data.tail())","bf2cdcb3":"diabets_data.describe()","f4b98ca2":"X = diabets_data.iloc[:, :-1]\ny = diabets_data.iloc[:, -1]\n\nscaler = StandardScaler()\nscaler.fit(X)\nX_scaled = scaler.transform(X)","9ad82d2b":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=.2, random_state=2021, stratify=y)\nlr_clf = LogisticRegression()\nlr_clf.fit(X_train, y_train)\n\npred = lr_clf.predict(X_test)\npred_proba = lr_clf.predict_proba(X_test)[:, 1]\nget_clf_eval(y_test, pred, pred_proba)","a04afb40":"from sklearn.preprocessing import Binarizer","51f23022":"def get_eval_by_threshold(y_test, preds, pred_proba, thresholds):\n    '''\n    Evaluation value enhancement using threshold value\n    '''\n    result = {}\n    for customer_threshold in thresholds:\n        binarizer = Binarizer(threshold = customer_threshold)\n        binarizer.fit(pred_proba)\n        # Binarizer\uc740 \uc77c\ucc28\uc6d0\uc758 ndarray\ud0c0\uc785\uc744 \uc778\uc790\ub85c \ubc1b\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uc55e\ub2e8\uc5d0\uc11c .reshape(-1,1)\n        customer_predict = binarizer.transform(pred_proba)\n        result[customer_threshold] = get_clf_eval(y_test, customer_predict, pred_proba)\n    return result","6e3b13f2":"thresholds = [0.3, 0.33, 0.36, 0.39, 0.42, 0.45, 0.48, 0.50]\npd.DataFrame(get_eval_by_threshold(y_test, pred, pred_proba.reshape(-1, 1), thresholds))","eb087950":"### Get Accuracy, Precision, recall ","ca22e7ed":"### Precision-Recall Curve","b334a530":"## Model build for Logistic Regression\n- split datasests into train, test\n- fit\n- predict\n- predict_proba","e6be91ac":"## EDA(Exploratory Data Access)","d2a2fcbb":"## Package load","0fbd9459":"## post-processing for zero feature","c9767dc5":"### distribution of Label class - feature `Outcome`","78780284":"### Accuracy, Precision, Recall","c6fb7c9f":"* We should have to find the solution to enhance the recall ratio,thus reconsidering the following\n* Find the solution to replace zero into some meaningful value","ef5d3302":"## feature Scaling\n* StandardScaler -> fit, transform -> train_test_split -> Logistic Regression","4f4f281e":"## Pima Indian Diabets Prediction\n* Evaluation measure including Precision, Accuracy, recall, F1 Score, ROC_AUC,","23805439":"### Recall enhancement through threshold ","acc49300":"### Distribution for Zero features","6a82b261":"## Feature Description\n- Pregnancies : \uc784\uc2e0 \ud69f\uc218\n- Blood Pressure : \ud608\uc555\n- Glucose : \ud3ec\ub3c4\ub2f9 \ubd80\ud558 \uc218\uce58\uac80\uc0ac\n- Skin Thickness : \ud314 \uc0bc\ub450\uadfc \ub4b7\ucabd\uc758 \ud53c\ud558\uc9c0\ubc29 \uce21\uc815\uac12(mm)\n- Insulin : \ud608\uccad \uc778\uc290\ub9b0(mu U\/ml)\n- BMI : \uccb4\uc9c8\ub7c9 \uc9c0\uc218(\uccb4\uc911(kg) \/ \ud0a4(m)^2)\n- DiabetesPediggreeFunctions : \ub2f9\ub1e8 \ub0b4\ub825 \uac00\uc911\uce58\n- Age: \ub098\uc774\n- Outcome : \ud074\ub798\uc2a4 \uacb0\uc815 \uac12(0 \ub610\ub294 1)","d3522182":"### Visualization for Precision and Recall","7523f968":"### Technical statistics","16dbe4ff":"### "}}