{"cell_type":{"b4830444":"code","231f8666":"code","9de03f35":"code","b76c49fc":"code","ea6a57f7":"code","95a3fc1e":"code","6d0f9fe0":"code","e239437e":"code","e1006fcc":"code","4a792785":"code","14aec26f":"code","b038b7b5":"code","919d9e5e":"markdown","19ee660c":"markdown","4e5aabba":"markdown"},"source":{"b4830444":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","231f8666":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data","9de03f35":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data","b76c49fc":"mean_age_train = train_data[\"Age\"].mean()\nmean_age_train #Finding the mean of the age in train data\n#The train data has more values and is therefore a better value","ea6a57f7":"train_data[\"AgeFilled\"]=train_data[\"Age\"].fillna(mean_age_train)\ntrain_data[\"AgeFilled\"].head(10) #Filling the missing values in the train data with the mean age","95a3fc1e":"test_data[\"AgeFilled\"]=train_data[\"Age\"].fillna(mean_age_train)\ntest_data[\"AgeFilled\"].head(10) #Filling the missing values in the test data with the mean age","6d0f9fe0":"train_data[\"Embarked\"].value_counts() #Finding out which stop boarded the most passengers","e239437e":"train_data[\"EmbarkedFilled\"]=train_data[\"Embarked\"].fillna(\"S\")\ntrain_data.head(10) #Filling the missing values in the train data with the most boarded stop","e1006fcc":"test_data[\"EmbarkedFilled\"]=train_data[\"Embarked\"].fillna(\"S\") \ntest_data.head(10) #Filling the missing values in the test data with the most boarded stop","4a792785":"train_data[\"Relatives\"]=(train_data[\"SibSp\"]+train_data[\"Parch\"]) \ntrain_data.head(10) #Making a new column consisting of the sum of \"SibSp\" and \"Parch\" in the train data","14aec26f":"test_data[\"Relatives\"]=(test_data[\"SibSp\"]+test_data[\"Parch\"])\ntest_data.head(10) #Making a new column consisting of the sum of \"SibSp\" and \"Parch\" in the test data","b038b7b5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\ny_train = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"Relatives\", \"AgeFilled\", \"EmbarkedFilled\"]\nX_train = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nclf = LogisticRegression(max_iter=500)\nclf.fit(X=X_train, y=y_train)\ny_pred = clf.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': y_pred})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","919d9e5e":"## Making new features","19ee660c":"## Cleansing existing features ","4e5aabba":"## Importing the test- and train data"}}