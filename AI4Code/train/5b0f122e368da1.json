{"cell_type":{"d6ea9b46":"code","d537e975":"code","5cf7064e":"code","bda3dded":"code","262d044f":"code","449ad388":"code","b902a826":"code","10e8178e":"code","8f7aaec1":"code","7b91f43a":"code","9961c0e2":"code","879e5b0c":"code","d1b3f9dc":"code","e1d62a81":"code","aa3de9cc":"code","8076d5f3":"code","d7722258":"code","d9ace7e9":"code","984a19cd":"code","630a24ee":"code","42ee1353":"code","7bb8d9ea":"code","49462ae3":"code","4c8852a4":"code","43d4edb1":"code","5ca5ecad":"code","86fac882":"code","537651a9":"code","8c7dad52":"code","6fc274bc":"code","de75c893":"code","52593377":"code","bf99e735":"code","03b79377":"code","14a4747c":"markdown","79a0879d":"markdown","37462a71":"markdown","8467c6a6":"markdown","7d85e7c1":"markdown","0cee9bcc":"markdown","a201914b":"markdown"},"source":{"d6ea9b46":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost as xgb\nimport plotly.graph_objs as go\n\nfrom pandas_profiling import ProfileReport\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error, accuracy_score, mean_absolute_error\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)\nplt.style.use(\"dark_background\")\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d537e975":"auto_df = pd.read_csv(\"..\/input\/autompg-dataset\/auto-mpg.csv\", na_values=['?'])","5cf7064e":"auto_df['car name'] = auto_df['car name'].replace(['volkswagen','vokswagen','vw'],'volkswagen')\nauto_df['car name'] = auto_df['car name'].replace('maxda','mazda')\nauto_df['car name'] = auto_df['car name'].replace('toyouta','toyota')\nauto_df['car name'] = auto_df['car name'].replace('capri','ford')\nauto_df['car name'] = auto_df['car name'].replace(['chevroelt','chevy'],'chevrolet')","bda3dded":"def check_df(dataFrame, head = 10):\n    print(\" SHAPE \".center(140,'-'))\n    print('Rows: {}'.format(dataFrame.shape[0]))\n    print('Columns: {}'.format(dataFrame.shape[1]))\n    print(\" TYPES \".center(140,'-'))\n    print(dataFrame.dtypes)\n    print(\" HEAD \".center(140,'-'))\n    print(dataFrame.head(head))\n    print(' TAIL '.center(140,'-'))\n    print(dataFrame.tail(head))\n    print(' MISSING VALUES '.center(140,'-'))\n    print(dataFrame.isnull().sum())\n    print(' CORRELATED VALUES '.center(140,'-'))\n    print(dataFrame.corr())\n    print(' DUPLICATED VALUES '.center(140,'-'))\n    print(dataFrame.duplicated().sum())\n    \ncheck_df(auto_df)","262d044f":"auto_df.drop('car name', axis=1, inplace=True)","449ad388":"auto_df['origin'] = auto_df['origin'].replace([1, 2, 3], ['USA', 'Europe', 'Japan'])","b902a826":"auto_df.head(10)","10e8178e":"auto_df['origin'].value_counts()","8f7aaec1":"auto_df.isnull().sum()","7b91f43a":"auto_df.isnull().sum()\/auto_df.shape[0]","9961c0e2":" auto_df.profile_report()","879e5b0c":"sns.pairplot(auto_df, hue=\"origin\", palette=\"viridis\")","d1b3f9dc":"plt.figure(figsize=(20,14))\nsns.heatmap(auto_df.corr(), linewidths = 1.0, linecolor = 'black', annot=True, cmap='rocket_r')\nplt.title('Correlation Matrix')\nplt.xticks(rotation=90)\nplt.yticks(rotation=0)","e1d62a81":"data = [go.Scatter(x = auto_df['horsepower'], \n                  y = auto_df['mpg'],\n                  mode = 'markers',\n                  marker=dict(color=auto_df['cylinders'],\n                               size=1.5*auto_df['cylinders'],\n                               showscale=True)\n                  )]\n\nlayout = go.Layout(title = 'Plotly Auto-mpg')\n\nfig = go.Figure(data = data, layout = layout)\nfig.show()","aa3de9cc":"origin = auto_df.pop('origin')","8076d5f3":"auto_df['USA'] = (origin == 1) * 1.0\nauto_df['Europe'] = (origin == 2) * 1.0\nauto_df['Japan'] = (origin == 3) * 1.0","d7722258":"X = auto_df.drop(['mpg'], axis = 1)\ny = auto_df['mpg']","d9ace7e9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","984a19cd":"X_train.shape","630a24ee":"X_test.shape","42ee1353":"scaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","7bb8d9ea":"print(X_train.shape)\nprint(X_test.shape)","49462ae3":"xgb_params = {'nthread': [3],\n              'n_jobs': [3, 4],\n              'objective': ['reg:linear'], \n              'learning_rate':[0.03, 0.05, 0.07, 0.1],\n              'n_estimators':[250, 500, 750, 1000],\n              'max_depth': [4, 5, 6],\n              'min_child_weight': [3],\n              'subsample': [0.6],\n              'colsample_bytree': [0.5]}\n\nxgb_model = XGBRegressor()\n\nxgb_grid = GridSearchCV(xgb_model, xgb_params, cv = 5, refit = True, verbose = 2)\n\nxgb_grid.fit(X_train, y_train)\nxgb_model = xgb_grid.best_estimator_\n\ny_predict = xgb_grid.predict(X_test)\nprint(\"Model\\t\\t\\t\\t RMSE \\t\\t MSE \\t\\t MAE \\t\\t R2\")\nprint(\"\"\"XGBoost Regressor \\t {:.2f} \\t\\t {:.2f} \\t\\t{:.2f} \\t\\t{:.2f}\"\"\".format(\n            np.sqrt(mean_squared_error(y_test, y_predict)),\n            mean_squared_error(y_test, y_predict),\n            mean_absolute_error(y_test, y_predict),\n            r2_score(y_test, y_predict)))","4c8852a4":"pd.DataFrame(list(zip(y_test, y_predict)), columns = ['Actual Values', 'Predicted Values'])","43d4edb1":"# Check from here\nmodel = Sequential()\n\nmodel.add(Dense(32, activation = 'relu'))\n\nmodel.add(Dense(32, activation = 'relu'))\n\nmodel.add(Dense(32, activation = 'relu'))\n\nmodel.add(Dense(32, activation = 'relu'))\n\nmodel.add(Dense(32, activation = 'relu'))\n\nmodel.add(Dense(32, activation = 'relu'))\n\nmodel.add(Dense(32, activation = 'relu'))\n\nmodel.add(Dense(1))","5ca5ecad":"model.compile(loss = 'mse', optimizer = tf.keras.optimizers.RMSprop(0.0001), metrics = ['mae','mse'])","86fac882":"model.summary()","537651a9":"history = model.fit(X_train, y = y_train, epochs = 300, validation_data=(X_test, y_test))","8c7dad52":"hist = pd.DataFrame(history.history)\nhist.tail()","6fc274bc":"hist[['loss','val_loss']].plot()","de75c893":"y_pred = model.predict(X_test)","52593377":"pd.DataFrame(list(zip(y_test,y_pred)), columns = ['Actual Values', 'Predicted Values'])","bf99e735":"print(\"Model\\t\\t\\t\\t RMSE \\t\\t MSE \\t\\t MAE \\t\\t R2\")\nprint(\"\"\"Neural Network Model \\t {:.2f} \\t\\t {:.2f} \\t\\t{:.2f} \\t\\t{:.2f}\"\"\".format(\n            np.sqrt(mean_squared_error(y_test, y_pred)),\n            mean_squared_error(y_test, y_pred),\n            mean_absolute_error(y_test, y_pred),\n            r2_score(y_test, y_pred)))","03b79377":"loss, mae, mse = model.evaluate(X_test, y_test)","14a4747c":"# Feature Engineering","79a0879d":"# Importing Libraries","37462a71":"# EDA","8467c6a6":"# XGBoost Regression Model Training","7d85e7c1":"# Data Description + Cleaning","0cee9bcc":"# Neural Network Model","a201914b":"# Train Test Split"}}