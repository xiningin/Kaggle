{"cell_type":{"7336e64d":"code","860ae69d":"code","6d88502c":"code","b04799d7":"code","0d547f7f":"code","31f6a5b3":"code","42f702dd":"code","e71431a9":"code","6d22eb5f":"code","450deefd":"code","3f00e9e0":"code","0c1bd03f":"code","b549bbb2":"code","957cd382":"code","799e5de1":"code","fdbcc016":"code","4e422d5d":"code","1c2afcc7":"code","8167dd95":"code","52812c54":"code","90696933":"code","105d1a97":"code","da89c59a":"code","6a165dfb":"code","d8f64754":"code","5d7a2167":"code","6136d08c":"code","9463c532":"code","20c45555":"code","aead40de":"code","8e9674cc":"code","316c507b":"code","daaaca28":"code","8f335c0a":"code","9df3fb01":"code","da4e0bed":"code","9dd78cef":"code","da7d34e1":"code","f9307b1b":"code","53b09071":"code","e4818d17":"code","b0d50d96":"code","cefc7a1a":"code","dbf38eed":"code","ea240aa3":"code","6881d986":"code","4d6faab6":"markdown","a47ed453":"markdown","498cd1e5":"markdown","beba62c2":"markdown","1aefcf27":"markdown","21237cfb":"markdown","8e67d545":"markdown","bfaa1a5b":"markdown","d0cb265c":"markdown","d497e500":"markdown","52c78a00":"markdown","8d8fec41":"markdown","364c8d43":"markdown","283310a2":"markdown","7c662098":"markdown","acd17d5f":"markdown","2b4b780d":"markdown","5cb752c4":"markdown","cf2c9a11":"markdown","12865272":"markdown","8a06e4fe":"markdown","cf59fa9c":"markdown","8ce123f9":"markdown","f4e598a9":"markdown","1fce4855":"markdown","cf058ba2":"markdown","4fd5482a":"markdown","f5e0bf41":"markdown","f292e05d":"markdown","67c138fb":"markdown","5518aa62":"markdown","396aa81f":"markdown","66a774e5":"markdown","b89e7f73":"markdown","87d5fa3a":"markdown","a5b3d325":"markdown","b23b8151":"markdown","a4145dca":"markdown","eb419132":"markdown","3e29f110":"markdown","1095112d":"markdown","49a9b529":"markdown","644a843f":"markdown","ffbebd6a":"markdown","e85f93fe":"markdown","b8bfb1ab":"markdown","5ce25906":"markdown","88ea1091":"markdown","38a85424":"markdown","31d5070b":"markdown","b610aa2a":"markdown","e6e959ea":"markdown","a46c53d5":"markdown","a0c4c1f0":"markdown","e1b213ad":"markdown"},"source":{"7336e64d":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nfrom IPython.display import Image\nfrom ast import literal_eval\nimport warnings\nwarnings.filterwarnings('ignore')","860ae69d":"%matplotlib inline\nsns.set_style(\"darkgrid\")","6d88502c":"pokemon_df = pd.read_csv(\"..\/input\/pokemon\/pokemon.csv\")","b04799d7":"print(f\"Unique primary types: {pokemon_df['type1'].nunique()}\")\nprint(f\"Unique secondary types: {pokemon_df['type2'].nunique()}\")","0d547f7f":"pokemon_df.describe().T","31f6a5b3":"pokemon_df.isnull().sum()[pokemon_df.columns[pokemon_df.isnull().any()]]","42f702dd":"pokemon_df.drop(['japanese_name', 'pokedex_number', 'base_egg_steps', 'classfication', 'percentage_male'], axis=1, inplace=True)","e71431a9":"pokemon_df[\"type\"] = pokemon_df.apply(\n    lambda x: x[\"type1\"] if pd.isnull(x[\"type2\"]) else f\"{x['type1']}_{x['type2']}\", \n    axis=1)","6d22eb5f":"pokemon_df[\"abilities\"] = pokemon_df.apply(lambda x: literal_eval(x[\"abilities\"]), axis=1)","450deefd":"pokemon_df[\"n_abilities\"] = pokemon_df.apply(lambda x: len(x[\"abilities\"]), axis=1)","3f00e9e0":"pokemon_df[\"bmi\"] = pokemon_df.apply(lambda x: x['weight_kg']\/(x['height_m']**2), axis=1)","0c1bd03f":"pokemon_df[\"capture_rate\"].replace({'30 (Meteorite)255 (Core)': np.nan}, inplace=True)\npokemon_df[\"capture_rate\"] = pd.to_numeric(pokemon_df[\"capture_rate\"])","b549bbb2":"plt.figure(figsize=(20,10))\nax = sns.countplot(pokemon_df.generation)\nax.set_title(\"How many new pok\u00e9mon are there per generation?\", size=20)\nax.set(xlabel=\"Generation\", ylabel=\"Count\");","957cd382":"type1_value_counts = pokemon_df[\"type1\"].value_counts()","799e5de1":"plt.figure(figsize=(20,10))\nax = squarify.plot(type1_value_counts, \n              label=type1_value_counts.index,\n              color=sns.color_palette(\"tab20\", len(type1_value_counts)),\n              pad=1,\n              text_kwargs={'fontsize': 12})\nax.set_title(\"What are the most prevalent primary types?\", size=20)\nplt.axis('off');","fdbcc016":"print(f\"To note that a very large number of Pok\u00e9mon do not have a secondary type: {pokemon_df['type2'].isnull().sum()}\")","4e422d5d":"type2_value_counts = pokemon_df[\"type2\"].value_counts()\ntypes_df = pd.concat([type1_value_counts, type2_value_counts], axis=1)","1c2afcc7":"ax = types_df.plot(kind=\"bar\", stacked=True, figsize=(20,10))\nax.set_title(\"What are the most prevalent types?\", size=20)\nax.set(xlabel=\"Type\", ylabel=\"Count\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=20);\nax.legend([\"Type 1\", \"Type 2\"]);","8167dd95":"top15_type_counts = pokemon_df[~pokemon_df['type2'].isnull()][\"type\"].value_counts()[:15]","52812c54":"plt.figure(figsize=(20,10))\nax = sns.barplot(y=top15_type_counts.index, x=top15_type_counts.values, orient='h')\nax.set_title(\"What are the most common type combinations?\", size=20)\nax.set(ylabel=\"Type\", xlabel=\"Count\");\n\n# Annotate value labels to each type\nfor index, value in enumerate(top15_type_counts): \n    plt.annotate(value, xy=(value-0.5, index), color='white') ","90696933":"legendary_pokemon = pokemon_df[pokemon_df['is_legendary'] == 1]\nlegendary_pokemon_types_top5 = legendary_pokemon[\"type\"].value_counts()[:5]","105d1a97":"plt.figure(figsize=(20,10))\nax = sns.barplot(y=legendary_pokemon_types_top5.index, x=legendary_pokemon_types_top5.values, orient='h')\nax.set_title(\"What are the most common types of legendary pok\u00e9mon?\", size=20)\nax.set(xlabel=\"Count\", ylabel=\"Type\")\n\n# Annotate value labels to each type\nfor index, value in enumerate(legendary_pokemon_types_top5): \n    plt.annotate(value, xy=(value-0.25, index), color='white') ","da89c59a":"type1_by_generation_group = pokemon_df.groupby(['generation', 'type1'])['name'].count().to_frame().reset_index()\ntype1_by_generation_group.rename(columns={\"name\": \"count\"}, inplace=True)\n\ntype1_by_generation_dict  = {}\nfor generation in list(type1_by_generation_group[\"generation\"].unique()):\n    current_generation = []\n    for type1 in type1_by_generation_group[\"type1\"].unique():\n        try:\n            current_generation.append(\n                type1_by_generation_group.loc[(type1_by_generation_group['generation']==generation) \n                                        & (type1_by_generation_group[\"type1\"] == type1)][\"count\"].values[0])\n        except IndexError:\n            current_generation.append(0)\n    type1_by_generation_dict[f\"Generation {generation}\"] = current_generation\n\ntype1_by_generation = pd.DataFrame(type1_by_generation_dict, index= type1_by_generation_group[\"type1\"].unique())","6a165dfb":"ax = type1_by_generation.plot(kind=\"bar\", stacked=True, figsize=(20,10))\nax.set_title(\"How does type1 vary across generations?\", size=20)\nax.set(xlabel=\"Type1\", ylabel=\"Count\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=20);","d8f64754":"Image(\"..\/input\/boxplot-example\/boxplot_example.png\", width=400, height=400)","5d7a2167":"plt.figure(figsize=(20,10))\nax = sns.boxplot(x='generation',y='capture_rate', hue=\"is_legendary\", data = pokemon_df)\nax.set_title(\"Which generation has the easiest pok\u00e9mon to catch?\", size=20)\nax.set(xlabel=\"Generation\", ylabel=\"Capture Rate\")\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, [\"Non-legendary\", \"Legendary\"], loc='upper right');","6136d08c":"plt.figure(figsize=(20,10))\nax = sns.boxplot(x='type1',y='capture_rate', hue=\"is_legendary\", data = pokemon_df)\nax.set_title(\"Which type has the easiest pok\u00e9mon to catch?\", size=20)\nax.set(xlabel=\"Type1\", ylabel=\"Capture Rate\")\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, [\"Non-legendary\", \"Legendary\"], loc='upper right');","9463c532":"plt.figure(figsize=(20,10))\nax = sns.countplot(data=pokemon_df, x=\"n_abilities\", hue=\"is_legendary\")\nax.set_title(\"How many abilities do pok\u00e9mon usually have?\", size=20)\nax.set(xlabel=\"Number of Abilities\", ylabel=\"Count\");\nax.legend([\"Non-legendary\", \"Legendary\"], loc='upper right');","20c45555":"plt.figure(figsize=(20,10))\nax = sns.scatterplot(x = 'weight_kg', y = 'height_m', style ='is_legendary', data=pokemon_df)\nax.set_title(\"What are the heavier and taller pok\u00e9mon?\", size=20)\nax.set(xlabel=\"Weight (kg)\", ylabel=\"Height (m)\")\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, [\"Non-legendary\", \"Legendary\"]);\n\n# Annotate the top 5 pok\u00e9mon for weight and height\ntop5_weight_height_merged = pd.concat([pokemon_df.nlargest(5, 'height_m'), pokemon_df.nlargest(5, 'weight_kg')]).drop_duplicates(subset=['name'])\nfor index, row in top5_weight_height_merged.iterrows():\n    plt.annotate(row['name'], xy=(row['weight_kg'], row['height_m']), fontsize=10)","aead40de":"top10_highest_bmi = pokemon_df.loc[:, [\"name\", \"bmi\"]].sort_values(by=\"bmi\", ascending=False)[:10]","8e9674cc":"plt.figure(figsize=(20,10))\nax = sns.barplot(y=top10_highest_bmi[\"bmi\"], x=top10_highest_bmi[\"name\"])\nax.set_title(\"Which pok\u00e9mon has the highest BMI?\", size=20)\nax.set(xlabel=\"Name\", ylabel=\"BMI\");","316c507b":"top10_lowest_bmi = pokemon_df.loc[:, [\"name\", \"bmi\"]].sort_values(by=\"bmi\", ascending=True)[:10]","daaaca28":"plt.figure(figsize=(20,10))\nax = sns.barplot(y=top10_lowest_bmi[\"bmi\"], x=top10_lowest_bmi[\"name\"])\nax.set_title(\"Which pok\u00e9mon has the lowest BMI?\", size=20)\nax.set(xlabel=\"Name\", ylabel=\"BMI\");","8f335c0a":"plt.figure(figsize=(20,10))\nax = sns.boxplot(x='generation',y='base_total', hue='is_legendary',data = pokemon_df)\nax.set_title(\"Which is the best generation?\", size=20)\nax.set(xlabel=\"Generation\", ylabel=\"Base Total\")\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, [\"Non-legendary\", \"Legendary\"]);","9df3fb01":"grid_kws = {\"height_ratios\": (.9, .05), \"hspace\": .25}\nf, (ax, cbar_ax) = plt.subplots(2, gridspec_kw=grid_kws, figsize=(20,10))\nsns.heatmap((pokemon_df[pokemon_df[\"is_legendary\"]==0].loc[:,['hp','sp_attack','sp_defense','attack','defense','speed']]).corr(),\n            annot= True,\n            fmt = \".2f\",\n            vmin = -1,\n            vmax = 1,\n            ax=ax,\n            cbar_ax=cbar_ax,\n            cbar_kws={\"orientation\": \"horizontal\"},\n            cmap='coolwarm')\nax.set_title('Correlation Between Attributes of Non-legendary Pok\u00e9mon', size = 20);","da4e0bed":"grid_kws = {\"height_ratios\": (.9, .05), \"hspace\": .25}\nf, (ax, cbar_ax) = plt.subplots(2, gridspec_kw=grid_kws, figsize=(20,10))\nsns.heatmap((pokemon_df[pokemon_df[\"is_legendary\"]==1].loc[:,['hp','sp_attack','sp_defense','attack','defense','speed']]).corr(),\n            annot= True,\n            fmt = \".2f\",\n            vmin = -1,\n            vmax = 1,\n            ax=ax,\n            cbar_ax=cbar_ax,\n            cbar_kws={\"orientation\": \"horizontal\"},\n            cmap='coolwarm')\nax.set_title('Correlation Between Attributes of Legendary Pok\u00e9mon', size = 20);","9dd78cef":"non_legendary_pokemon_attributes = pokemon_df[pokemon_df[\"is_legendary\"]==0].groupby(['type1']).median()[[\"attack\", \"sp_attack\", \"defense\", \"sp_defense\", \"hp\", \"speed\", \"base_total\"]]","da7d34e1":"grid_kws = {\"height_ratios\": (.9, .05), \"hspace\": .25}\nf, (ax, cbar_ax) = plt.subplots(2, gridspec_kw=grid_kws, figsize=(20,10))\nsns.heatmap(non_legendary_pokemon_attributes,\n            annot= True,\n            fmt = \".2f\",\n            vmin = 0,\n            vmax = 150,\n            ax=ax,\n            cbar_ax=cbar_ax,\n            cbar_kws={\"orientation\": \"horizontal\"},\n            cmap=\"YlOrRd\")\nax.set_title('Median of Attributes by Type of Non-legendary Pok\u00e9mon', size = 20)\nax.set(ylabel=\"Type1\", xlabel=\"Attribute\");","f9307b1b":"legendary_pokemon_attributes = pokemon_df[pokemon_df[\"is_legendary\"]==1].groupby(['type1']).median()[[\"attack\", \"sp_attack\", \"defense\", \"sp_defense\", \"hp\", \"speed\", \"base_total\"]]","53b09071":"grid_kws = {\"height_ratios\": (.9, .05), \"hspace\": .25}\nf, (ax, cbar_ax) = plt.subplots(2, gridspec_kw=grid_kws, figsize=(20,10))\nsns.heatmap(legendary_pokemon_attributes,\n            annot= True,\n            fmt = \".2f\",\n            vmin = 0,\n            vmax = 150,\n            ax=ax,\n            cbar_ax=cbar_ax,\n            cbar_kws={\"orientation\": \"horizontal\"},\n            cmap=\"YlOrRd\")\nax.set_title('Median of Attributes by Type of Legendary Pok\u00e9mon', size = 20)\nax.set(ylabel=\"Type1\", xlabel=\"Attribute\");","e4818d17":"against_columns = [\"against_bug\", \"against_dark\", \"against_dragon\", \"against_electric\", \"against_fairy\", \"against_fight\", \"against_fire\",\n \"against_flying\", \"against_ghost\", \"against_grass\", \"against_ground\", \"against_ice\", \"against_normal\", \"against_poison\", \n \"against_psychic\", \"against_rock\", \"against_steel\", \"against_water\"]\n\npokemon_type_effectiveness = pokemon_df.groupby(['type1']).median()[against_columns]","b0d50d96":"grid_kws = {\"height_ratios\": (.9, .05), \"hspace\": .5}\nf, (ax, cbar_ax) = plt.subplots(2, gridspec_kw=grid_kws, figsize=(20,10))\nsns.heatmap(pokemon_type_effectiveness,\n            annot= True,\n            fmt = \".2f\",\n            vmin = 0,\n            vmax = 4,\n            ax=ax,\n            cbar_ax=cbar_ax,\n            cbar_kws={\"orientation\": \"horizontal\"},\n            cmap=\"YlOrRd\")\nax.set_title('Effectiveness Type Chart', size = 20)\nax.set(ylabel=\"Type1\", xlabel=\"Attribute\");","cefc7a1a":"top10_pokemon_base_total = pokemon_df.sort_values(by=\"base_total\", ascending=False).reset_index()[:10]","dbf38eed":"plt.figure(figsize=(20,10))\nax = sns.barplot(y=top10_pokemon_base_total[\"name\"], x=top10_pokemon_base_total[\"base_total\"], orient='h')\nax.set_title(\"Which is the best pok\u00e9mon?\", size=20)\nax.set(xlabel=\"Base Total\", ylabel=\"Name\")\n\n# Annotate value labels to each pok\u00e9mon\nfor index, row in top10_pokemon_base_total.iterrows(): \n    plt.annotate(row[\"base_total\"], xy=(row[\"base_total\"]-20, index), color='white') ","ea240aa3":"attributes=[\"attack\", \"sp_attack\", \"defense\", \"sp_defense\", \"hp\", \"speed\"]\n\nmewtwo= top10_pokemon_base_total[top10_pokemon_base_total[\"name\"] == \"Mewtwo\"][attributes].values.tolist()[0]\nrayquaza = top10_pokemon_base_total[top10_pokemon_base_total[\"name\"] == \"Rayquaza\"][attributes].values.tolist()[0]","6881d986":"angles=np.linspace(0,2*np.pi,len(attributes), endpoint=False)\nangles=np.concatenate((angles,[angles[0]]))\nattributes.append(attributes[0])\nmewtwo.append(mewtwo[0])\nrayquaza.append(rayquaza[0])\n\nfig=plt.figure(figsize=(20,10))\nax=fig.add_subplot(111, polar=True)\n\n# Mewtwo Plot\nax.plot(angles, mewtwo, 'o-', color='g', linewidth=1, label='Mewtwo')\nax.fill(angles, mewtwo, alpha=0.25, color='g')\n# Rayquaza Plot\nax.plot(angles,rayquaza, 'o-', color='orange', linewidth=1, label='Rayquaza')\nax.fill(angles, rayquaza, alpha=0.25, color='orange')\n\nax.set_thetagrids(angles[:-1] * 180\/np.pi, attributes[:-1], fontsize=12)\nplt.grid(True)\nplt.legend(loc=\"upper right\", fontsize=12)\nax.set_title(\"Mewtwo vs Rayquaza\", fontsize=20, pad=50);","4d6faab6":"Haunter and its previous form (Gastly) are the winners, followed by Dratini and its evolution (Dragonair).","a47ed453":"Pretty different, isn't it?\n\nConsidering legendary pok\u00e9mon, the relationships between attack and sp_defense and defense and sp_attack changed to negative. Plus, the relationship between attack and speed and defense and speed got stronger (positive and negative, respectively). ","498cd1e5":"* Regarding non-legendary pok\u00e9mon:\n    - Top 5 types - attack: fighting, dragon, ground, dark, steel\n    - Top 5 types - sp_attack: psychic, electric, fairy, fire, ghost\n    - Top 5 types - defense: steel, rock, ground, ghost, ice\n    - Top 5 types - sp_defense: steel, fairy, ghost, psychic, dragon\n    - Top 5 types - hp: fairy, normal, fighting, ice, ground\n    - Top 5 types - speed: flying, electric, fire, dark, dragon\n    - Top 5 types - base_total: ghost, steel, fighting, fairy and ice\n\nGood types to attack are electric, fire, dark and dragon, since they are in the top 5 for attack or sp_attack and speed.\n\nGood types to defend are fairy, ice and ground, since they are in the top 5 for defense or sp_defense and hp.\n\nTo highlight ground, which is in the top 5 for attack, defense and hp. However, it is not in the top5 for base_total, due to its low values for sp_attack, sp_defense and speed.","beba62c2":"* Regarding legendary pok\u00e9mon:\n    - Top 5 types - attack: ground, bug, fairy, normal, dragon\n    - Top 5 types - sp_attack: dragon, dark, fairy, ground, electric\n    - Top 5 types - defense: ground, steel, normal, dragon, ghost\n    - Top 5 types - sp_defense: ice, water, normal, psychic, rock\n    - Top 5 types - hp: ghost, dark, fairy, normal, dragon\n    - Top 5 types - speed: flying, normal, grass, rock, electric\n    - Top 5 types - base_total: dragon, ground, fairy, ghost, normal\n\nGood types to attack are normal and electric, since they are in the top 5 for attack or sp_attack and speed.\n\nGood types to defend are ghost, normal and dragon, since they are in the top 5 for defense or sp_defense and hp.\n\nTo highlight normal, which is in the top 5 for attack, defense, sp_defense, hp and speed. However, it is only fifth in base_total.","1aefcf27":"Since the abilities column is a stringified list, there is the need to convert it back to a list.","21237cfb":"Cosmoem is a clear winner!","8e67d545":"**Which generation has the easiest pok\u00e9mon to catch?**","bfaa1a5b":"We will go through the rest of this notebook asking some interesting questions and creating different charts to answer them.","d0cb265c":"To note an unusual amount of fairy type pok\u00e9mon in generation 6 and dark and psychic in generation 5. \n\nA few types doesn't even exist in some generations, like fairy in generation 3 and ground in generation 6.","d497e500":"**How many abilities do pok\u00e9mon usually have?**\n\nThe question gives a hint of what kind of plot is adequate, doesn't it? Count plot, of course!","52c78a00":"The first feature is created by joining type1 and type2 into a single type.","8d8fec41":"**If you like this notebook, please give it an upvote as it keeps me motivated. Plus, I am open to feedback.**","364c8d43":"Flying is the most common type 2, followed by poison and ground.\n\n**What are the most common type combinations?**\n\nA horizontal bar chart seems to be a good choice for visualizing this. By representing the data horizontally you get more room for labelling. The y-axis is used for the categorical variable and the length of the bars on the x-axis corresponds to the magnitude of the numeric variable.","283310a2":"Generation 4 has the best pok\u00e9mon, while generation 3 has the best legendary pok\u00e9mon.","7c662098":"Source: Swaminathan, S. Data Visualization with Python MOOC. Coursera","acd17d5f":"**What are the most prevalent primary types?**\n\nLet's use a treemap to visualize this. A treemap allows to see what proportion each element has compared to the whole, by displaying each element as a rectangle.","2b4b780d":"**How many new pok\u00e9mon are there per generation?**\n\nWe are going to use a count plot to answer this, which can be thought of as a histogram across a categorical variable.","5cb752c4":"We are also creating the BMI column, which represents the Body Mass Index of the pok\u00e9mon. The formula is calculated by dividing the weight in kilograms by the square of the height in meters.","cf2c9a11":"# Imports","12865272":"# Descriptive Statistics","8a06e4fe":"Water type pok\u00e9mon are the most common, followed by normal and grass.\n\n**What about secondary types?**\n\nTo perform this analysis we are using a stacked bar plot. In a bar plot, the length of each bar is proportional to the value of the item it illustrates. The x-axis represents different categories of a variable, while in a histogram, the x-axis represents the values of a single variable on a numerical scale.","cf59fa9c":"**Which is the best pok\u00e9mon?**\n\nLet's look at the top 10 most powerful Pok\u00e9mon (as per the basic total stat) using a bar plot.","8ce123f9":"Fairy type has the easiest pok\u00e9mon to catch, while dragon has the hardest.\n\nThe easiest legendary pok\u00e9mon to catch are of type grass and bug.","f4e598a9":"To highlight that electric is only weak against (against>=2) ground and normal is only weak against fighting.\nIt is curious that ghost is weak against ghost and that flying is extremely weak against ice. \n\n* There are some types that are pretty useless against (against=0):\n    - psychic against dark\n    - dragon against fairy \n    - ground against flying\n    - fighting against ghost\n    - normal against ghost\n    - ghost against normal\n    - electric against ground\n    - poison against steel\n    \nTake a look [here](https:\/\/pokemondb.net\/type) to validate these results.","1fce4855":"Finally, Minior has two capture rates, so we are just ignoring such value by assigning it to NaN and changing the column type to numeric.","cf058ba2":"The next step is to create a column with the number of abilities.","4fd5482a":"Rayquaza has better attack and defense while Mewtwo is better considering the remaining attributes.","f5e0bf41":"Psychic is the most common type of legendary pok\u00e9mon, followed by water.\n","f292e05d":"# References","67c138fb":"For this question we are going to use a box plot. Boxplots compare the distributions of a numeric variable grouped according to a categorical variable.\n\nA boxplot represents the distribution of given data through 5 main dimensions. The first dimension is the minimum, and its value can be obtained by subtracting 1.5 times the IQR (interquartile range) from the first quartile. The second dimension is the first quartile which is 25% of the way through the sorted data. In other words, 1\/4 of the data points are less than this value. The third dimension is the median, i.e., 50% through the sorted data. The fourth dimension is the third quartile, which is 75% through the sorted data. The maximum is the last dimension, which is equal to the third quartile summed with 1.5 multiplied by the interquartile range. Boxplots also display outliers as individual dots that occur outside the upper and lower extremes.\n\nThe image below depicts the already explained dimensions of a boxplot.","5518aa62":"# Data Visualization","396aa81f":"1. (2020). Pokemon Data Visualization. Available at: https:\/\/www.kaggle.com\/shreekant009\/pokemon-data-visualization\/notebook\n2. Agarwal, L. (2018). Data Visualization - Pokemon Data. Available at: https:\/\/www.kaggle.com\/lakshyaag\/data-visualization-pokemon-data\n3. (2019). Pok\u00e9mon! Kaggle Learn Edition. Available at: https:\/\/www.kaggle.com\/aplayer98\/pok-mon-kaggle-learn-edition\n4. Coetzee, J. (2018). DataVis Battle Entry: Getting to know my Pok\u00e9mon. Available at: https:\/\/towardsdatascience.com\/reddit-datavis-entry-getting-to-know-my-pok%C3%A9mon-e0bcf4b4b803\n5. Verma, A. (2018). GgPlot \u2018Em All | Pokemon. Available at: https:\/\/towardsdatascience.com\/exploratory-analysis-of-pokemons-using-r-8600229346fb\n6. The Python Graph Gallery. (2018). Radar Chart. Available at: https:\/\/www.python-graph-gallery.com\/radar-chart\n7. Chandradas, A. (2021). How to Create a Radar Chart in Python. Available at: https:\/\/towardsdatascience.com\/how-to-create-a-radar-chart-in-python-36b9ebaa7a64\n8. Bruce, P., Bruce, A and Gedeck, P. (2017). Practical Statistics for Data Scientists: 50+ Essential Concepts Using R and Python\n9. Swaminathan, S. Data Visualization with Python MOOC. Coursera","66a774e5":"**Which is the best type?**\n\nLet's use heatmaps again to compare the different types of Pok\u00e9mon.","b89e7f73":"3 is the most common number of abilities for non-legendary pok\u00e9mon, while most legendary pok\u00e9mon only have 1 ability.","87d5fa3a":"* Regarding non-legendary pok\u00e9mon:\n    \n    - There seems to be a positive relationship between hp and sp_attack, sp_defense and attack. Such relationship is less significant for defense, which is kind of surprising, I thought a defensive Pokemon would have a higher hp.\n    - Attack has the strongest relationship with defense.\n    - Defense has the strongest relationship with sp_defense.\n    - Speed has a very weak negative relationship with defense.","a5b3d325":"**Which is the best generation?**\n\nA boxplot is a good choice for this as we will make assumptions based on the distribution of the base total stat.","b23b8151":"Before the exploratory data analysis, let's discard unnecessary columns from the dataset and create some new ones that will be useful throughout the analysis.","a4145dca":"**Let's analyze type effectiveness.**\n\nHeatmaps are really a good fit for this type of analysis, aren't they?","eb419132":"**How are attributes related?**\n\nThe best way to visualize this is by using a heatmap. A heatmap shows the magnitude of a phenomenon as color in two dimensions. The color may vary by hue or intensity, which gives visual cues about how the phenomenon is clustered or varies over space.","3e29f110":"Let's load the dataset, look at the descriptive statistics and check for missing values.","1095112d":"2\/5 of the tallest pok\u00e9mon are legendary, while 4\/5 of the heavier pok\u00e9mon are legendary.\n\nCelesteela is the only pok\u00e9mon in the top 5 in weight and height.","49a9b529":"Normal + flying, grass + poison and bug + flying are the most common type combinations.","644a843f":"# Data Processing","ffbebd6a":"And we have a tie! Let's compare Mewtwo and Rayquaza in a fancier way, by using a radar chart.\nA radar chart allows to visualize one or more series of values over multiple quantitative variables.","e85f93fe":"Generation 3 has the easiest pok\u00e9mon to catch, while generation 4 has the hardest.\n\nLegendary pok\u00e9mon are easier to capture from generation 6 onwards.","b8bfb1ab":"**Which pok\u00e9mon has the lowest BMI?**\n\nAgain, we are using a barplot.","5ce25906":"<span style=\"font-size:2em;\">**The Complete Pok\u00e9mon Dataset**<\/span>\n\nThis dataset contains information on all 802 pok\u00e9mon from all seven generations. The information contained in this dataset includes base stats, performances against other types, heights, weights, classifications, egg steps, experience points, abilities, etc. The information was scraped from [serebii](http:\/\/serebii.net\/). \n\n**Features:**\n- abilities: A stringified list of abilities that the pok\u00e9mon is capable of having.\n- against_?: Eighteen features that denote the amount of damage taken against an attack of a particular type of pok\u00e9mon.\n- attack: The base attack of the pok\u00e9mon.\n- base_egg_steps: The number of steps required to hatch an egg of the pok\u00e9mon.\n- base_happiness: Base happiness of the pok\u00e9mon.\n- base_total: Sum of hp, attack, defense, sp_attack, sp_defense and speed.\n- capture_rate: Capture rate of the pok\u00e9mon.\n- classification: The classification of the pok\u00e9mon as described by the Sun and Moon pok\u00e9dex.\n- defense: The base defense of the pok\u00e9mon.\n- experience_growth: The experience growth of the pok\u00e9mon.\n- height_m: Height of the pok\u00e9mon in metres.\n- hp: The base HP of the pokemon. It is short for Hit Point, which determines how much damage a pok\u00e9mon can receive before fainting.\n- japanese_name: The original Japanese name of the pok\u00e9mon.\n- name: The English name of the pok\u00e9mon.\n- percentage_male: The percentage of the species that are male. Blank if the pok\u00e9mon is genderless.\n- pokedex_number: The entry number of the pok\u00e9mon in the National Pok\u00e9dex.\n- sp_attack: The base special attack of the pok\u00e9mon.\n- sp_defense: The base special defense of the pok\u00e9mon.\n- speed: The base speed of the pok\u00e9mon.\n- type1: The primary type of the pok\u00e9mon.\n- type2: The secondary type of the pok\u00e9mon.\n- weight_kg: The weight of the pok\u00e9mon in kilograms.\n- generation: The numbered generation which the pok\u00e9mon was first introduced.\n- is_legendary: Denotes if the pok\u00e9mon is legendary.","88ea1091":"We are now ready to draw some plots!","38a85424":"**What are the heavier and taller pok\u00e9mon?**\n\nTo look at the weights and heights of all pok\u00e9mon, we are plotting a scatter plot. A scatter plot displays values belonging to typically two variables against each other. Usually it is a dependent variable to be plotted against an independent variable in order to determine if any correlation between the two variables exists. If color-coded, it can also show the relationship with a third categorical variable.","31d5070b":"**What are the most common types of legendary pok\u00e9mon?**\n\nLet's use a horizontal bar chart again.","b610aa2a":"**Which type has the easiest pok\u00e9mon to catch?**\n\nAs in the previous question, we are going to use a boxplot.","e6e959ea":"**Which pok\u00e9mon has the highest BMI?**\n\nA barplot is the best solution to answer this question!","a46c53d5":"Now we activate the [matplotlib inline backend](https:\/\/matplotlib.org\/stable\/tutorials\/introductory\/usage.html#what-is-a-backend) and set the [style sheet](https:\/\/matplotlib.org\/stable\/gallery\/style_sheets\/style_sheets_reference.html) to \"darkgrid\". ","a0c4c1f0":"**How does type1 vary across generations?**\n\nTo show the increment of each type1 over generations, we will have a stacked bar chart once again.","e1b213ad":"Odd generations have more new pok\u00e9mon compared to even ones."}}