{"cell_type":{"cba3809c":"code","fd4e2bee":"code","26513c33":"code","ede757e4":"code","9311a4f3":"code","3d3358ec":"code","9fac0c68":"markdown","59269682":"markdown","b0b2f5cc":"markdown"},"source":{"cba3809c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd4e2bee":"import pandas as pd \n\ndf = pd.read_csv('..\/input\/chipotle\/chipotle.tsv', sep='\\t')\n## df = pd.read_csv(\"rating-data.tsv\",sep='\\t')\ndf.head()","26513c33":"df_tmp=df[['order_id','item_name']]\ndf_tmp_arr=[[]for i in range(1835)]\nnum=0\nfor i in df_tmp['item_name'] :\n    df_tmp_arr[df_tmp['order_id'][num]].append(i)\n    num+=1","ede757e4":"df_tmp_arr.pop(0)\nnum=0\nfor i in df_tmp_arr :\n    df_tmp_arr[num] = list(set(df_tmp_arr[num]))\n    num+=1\n#df_tmp_arr","9311a4f3":"from mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\nte = TransactionEncoder()\nte_ary = te.fit(df_tmp_arr).transform(df_tmp_arr)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\ndf.head()","3d3358ec":"frequent_itemsets = apriori(df, min_support=0.05, use_colnames=True)\nfrequent_itemsets","9fac0c68":"\uadf8\ub7fc \uc774\uc81c \uc190\ub2d8\uc774 \"\uc5b4\ub5a4 \uba54\ub274\ub97c \uc8fc\ub85c \uba39\ub098\uc694?\" \uc5d0 \ub300\ud574,\n\n'Chicken Bowl'\uc744 \uba39\ub294\ub2e4\uba74 'Canned Soft Drink'\ub97c \ud568\uaed8 \uba39\uac70\ub098,\n\n'Chicken Bowl'\uc744 \uba39\uc744 \ub54c 'Chips'\ub97c \uc8fc\ub85c \ud568\uaed8 \uba39\ub294\ub2e4\uace0 \ub9d0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n ","59269682":"[['Chips and Fresh Tomato Salsa',\n  'Izze',\n  'Nantucket Nectar',\n  'Chips and Tomatillo-Green Chili Salsa'],\n ['Chicken Bowl'],\n ['Chicken Bowl', 'Side of Chips'],\n ['Steak Burrito', 'Steak Soft Tacos'],\n ['Steak Burrito', 'Chips and Guacamole'],\n ['Chicken Soft Tacos', 'Chicken Crispy Tacos'],\n ['Chicken Bowl', 'Chips and Guacamol","b0b2f5cc":" \n\n\uc190\ub2d8 : \"\uc5b4\ub5a4 \uba54\ub274\ub97c \uc8fc\ub85c \uba39\ub098\uc694?\"\n\n \n\n\uc9c1\uc6d0 : \"\ud1a0\ub9c8\ud1a0\ud30c\uc2a4\ud0c0\uc640 \ub9c8\ub974\uac8c\ub9ac\ub530 \ud53c\uc790\ub97c \ud568\uaed8 \ucd94\ucc9c\ub4dc\ub824\uc694\"\n\n "}}