{"cell_type":{"f6718877":"code","6b30e9f6":"code","ec4e0186":"code","e240fa92":"code","1938ddb8":"code","dbb0e7a0":"code","c027fca5":"code","a3dca6c6":"code","cf78186d":"code","8011082e":"code","8c121aa6":"code","ee5451d2":"code","86c5382f":"code","b4d1ddb7":"code","f70586ac":"code","7a038168":"code","33dbcfcf":"code","b95b4d7b":"code","9a6e1636":"code","e0001507":"code","5cf9b394":"code","824640c8":"code","d30b8a70":"code","b93edf66":"code","9e0ee9c0":"code","698c38db":"code","dfc2ad23":"code","ff252b0d":"markdown","8d46b1fa":"markdown","2a02f0f2":"markdown","3c5f0635":"markdown","6a254f71":"markdown","1c9aa71f":"markdown","204aa3b1":"markdown","7cd68846":"markdown","0d0325f2":"markdown"},"source":{"f6718877":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","6b30e9f6":"df = pd.read_csv('..\/input\/socialnetwork-ads\/Social_Network_Ads.csv')","ec4e0186":"df.head()","e240fa92":"df.info()","1938ddb8":"fig = px.scatter(df, x=\"Age\", y=\"EstimatedSalary\", color=\"Purchased\")\nfig.show()","dbb0e7a0":"fig = px.scatter(df,  x=\"Age\", y=\"EstimatedSalary\", color=\"Purchased\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","c027fca5":"fig = px.bar(df, x=\"Purchased\", y=\"EstimatedSalary\", color=\"Age\", barmode=\"group\")\nfig.show()","a3dca6c6":"fig = px.scatter_matrix(df, dimensions=[\"EstimatedSalary\", \"Age\"], color=\"Purchased\")\nfig.show()","cf78186d":"fig = px.parallel_coordinates(df, color=\"Purchased\", labels={\"species_id\": \"Purchased\",\n                  \"sepal_width\": \"Age\", \"sepal_length\": \"EstimatedSalary\"},\n                    color_continuous_scale=px.colors.diverging.Tealrose, color_continuous_midpoint=0.5)\nfig.show()","8011082e":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","8c121aa6":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","ee5451d2":"#Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","86c5382f":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","b4d1ddb7":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","f70586ac":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","7a038168":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","33dbcfcf":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)","b95b4d7b":"y_pred = classifier.predict(X_test)","9a6e1636":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","e0001507":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","5cf9b394":"y_pred = classifier.predict(X_test)","824640c8":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","d30b8a70":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\n#Evaluation\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","b93edf66":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","9e0ee9c0":"y_pred = classifier.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","698c38db":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)","dfc2ad23":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","ff252b0d":"#Confusion Matrix","8d46b1fa":"# K-NN-Model","2a02f0f2":"# SVM","3c5f0635":"# Feature scaling","6a254f71":"# Naive BAyes","1c9aa71f":"# Decision Tree Classification","204aa3b1":"**CONCLUSION**\n* K-NN classifier provides best accuracy score","7cd68846":"# Visualizations","0d0325f2":"# Random Forest Classification model"}}