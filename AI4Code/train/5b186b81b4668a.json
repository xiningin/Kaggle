{"cell_type":{"a005a45d":"code","4e2e049a":"code","b005c188":"code","d13561f6":"code","c45195c9":"code","f6fdca2f":"code","d41eb571":"code","ffacf603":"code","0b25abf5":"code","5a654feb":"code","3951ea98":"code","ac2aa545":"code","a2309825":"code","89543fda":"markdown","05fa57a6":"markdown","b3908c43":"markdown","e0c49639":"markdown","c0ff066f":"markdown","d7b42c08":"markdown","bbc72658":"markdown","4fdf73ac":"markdown","e977053d":"markdown","527ef101":"markdown","f9c00abd":"markdown","f41a512a":"markdown"},"source":{"a005a45d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e2e049a":"import numpy as np\n\nnpz = np.load('\/kaggle\/input\/ship-and-iceberg-images\/input_data.npz')\n\nX_train = npz['X_train']\nY_train = npz['Y_train']\ndel npz\n\nprint('We have {} examples to work with'.format(Y_train.shape[0]))","b005c188":"from skimage.io import imshow\nimport matplotlib.pyplot as plt\n\nix = 100 #0-4112\nimshow(np.squeeze(X_train[ix,:,:,2]))#Looking at the combined channel\nplt.show()\nlabels = ['Ship','Iceberg']  #0 is no iceberg(ship) and 1 is iceberg\nprint ('This is:',labels[int(Y_train[ix])])","d13561f6":"ix = 110 #0-4112\nimshow(np.squeeze(X_train[ix,:,:,2]))#Looking at the combined channel\nplt.show()\nlabels = ['Ship','Iceberg']  #0 is no iceberg(ship) and 1 is iceberg\nprint ('This is:',labels[int(Y_train[ix])])","c45195c9":"from tensorflow.keras.layers import Input\n\n# We have 2 inputs, 1 for each picture\nleft_input = Input((75,75,3))\nright_input = Input((75,75,3))","f6fdca2f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Activation, MaxPooling2D, Conv2D, Flatten, Dense\n\n# We will use 2 instances of 1 network for this task\nbase_network = Sequential([\n    Conv2D(5,3, input_shape=(75,75,3)),\n    Activation('relu'),\n    MaxPooling2D(),\n    Conv2D(5,3),\n    Activation('relu'),\n    MaxPooling2D(),\n    Conv2D(7,2),\n    Activation('relu'),\n    MaxPooling2D(),\n    Conv2D(7,2),\n    Activation('relu'),\n    Flatten(),\n    Dense(18),\n    Activation('sigmoid')\n])","d41eb571":"# Connect both left and right input to the same network\n# Remember, they have the same weights\nprocessed_a = base_network(left_input)\nprocessed_b = base_network(right_input)","ffacf603":"from tensorflow.keras.layers import Lambda\nfrom tensorflow.keras import backend as K\n\n# Getting the L1 Distance between the 2 encodings\nL1_layer = Lambda(lambda tensor:K.abs(tensor[0] - tensor[1]))\n\n# Add the distance function to the network\nL1_distance = L1_layer([processed_a, processed_b])","0b25abf5":"from tensorflow.keras.models import Model\n\nprediction = Dense(1,activation='sigmoid')(L1_distance)\nsiamese_net = Model(inputs=[left_input,right_input],outputs=prediction)","5a654feb":"from tensorflow.keras.optimizers import Adam\n\noptimizer = Adam(0.001, decay=2.5e-4)\n\nsiamese_net.compile(loss=\"binary_crossentropy\",optimizer=optimizer,metrics=['accuracy'])","3951ea98":"siamese_net.summary()","ac2aa545":"import random\n\n# First let's separate the dataset from 1 matrix to a list of matricies\nimage_list = np.split(X_train[:1000],1000)\nlabel_list = np.split(Y_train[:1000],1000)\n\nleft_input = []\nright_input = []\ntargets = []\n\n#Number of pairs per image\npairs = 5\n#Let's create the new dataset to train on\nfor i in range(len(label_list)):\n    for _ in range(pairs):\n        compare_to = i\n        while compare_to == i: #Make sure it's not comparing to itself\n            compare_to = random.randint(0,999)\n        left_input.append(image_list[i])\n        right_input.append(image_list[compare_to])\n        if label_list[i] == label_list[compare_to]:# They are the same\n            targets.append(1.)\n        else:# Not the same\n            targets.append(0.)\n            \nleft_input = np.squeeze(np.array(left_input))\nright_input = np.squeeze(np.array(right_input))\ntargets = np.squeeze(np.array(targets))\n\niceimage = X_train[101]\ntest_left = []\ntest_right = []\ntest_targets = []\n\nfor i in range(Y_train.shape[0]-1000):\n    test_left.append(iceimage)\n    test_right.append(X_train[i+1000])\n    test_targets.append(Y_train[i+1000])\n\ntest_left = np.squeeze(np.array(test_left))\ntest_right = np.squeeze(np.array(test_right))\ntest_targets = np.squeeze(np.array(test_targets))","a2309825":"siamese_net.fit([left_input,right_input], targets,\n          batch_size=16,\n          epochs=10,\n          verbose=1,\n          validation_data=([test_left,test_right],test_targets))","89543fda":"# 7. Get the L1 distance between the two inputs","05fa57a6":"# 13. Train the Siamese train on left and right input image pairs and validate using test pairs","b3908c43":"# 2. Image of a ship","e0c49639":"# 4. Create a Siamese network","c0ff066f":"# 1. Load the data","d7b42c08":"# 3. Image of a iceberg","bbc72658":"# 6. Process the left and right inputs to the same Base Network","4fdf73ac":"# 8. Add the prediction layer in the end \n# 9. Create the Siamese Network ","e977053d":"# 11. Siamese network summary","527ef101":"# 10. Compile the Siamese network with Adam as optimizer","f9c00abd":"# 5. Create a base network","f41a512a":"# 12. Create the pair of images to train on"}}