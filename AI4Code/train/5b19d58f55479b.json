{"cell_type":{"0b9667ad":"code","8af6935c":"code","c9480806":"code","81d19750":"code","ed6421b0":"code","2a6153e6":"code","fa6ca438":"code","aab19023":"code","025185ea":"markdown","86feeaf8":"markdown","087fb3bb":"markdown"},"source":{"0b9667ad":"################################\n# Modules\n################################\n\nimport numpy as np\nimport itertools\nimport matplotlib.pyplot as plt\n!pip install pygeos==0.8\nimport pygeos\n!pip install momepy\nimport momepy as mm\nimport geopandas as gpd\n\nfrom skimage.morphology import skeletonize\nfrom shapely.geometry import Polygon\nfrom pathlib import Path\nfrom shapely.geometry import Point, Polygon","8af6935c":"pygeos.__version__","c9480806":"################################\n# Read data\n################################\n\ndata_dir = Path('..\/input\/tanzania\/')  # Data directory\n\n# Go to: \n# https:\/\/www.openstreetmap.org\/search?query=dar%20es%20salaam#map=16\/-6.7820\/39.2633\n# for UL and LR corner coordinates\nbounds = (39.258605, -6.781834, 39.263742, -6.787532)\nbounds\ndar_blg=gpd.read_file(data_dir\/'hotosm_tza_buildings.gpkg', bbox=bounds)","81d19750":"################################\n# Visual check\n################################\n\nprint(dar_blg.crs)\nax = dar_blg.plot(figsize=(10, 10), alpha=0.5, edgecolor='k')\ndar_blg.head()","ed6421b0":"################################\n# Pre-process\n################################\n\ncity = dar_blg.to_crs({'init': 'epsg:21037'})\nprint(city.crs)\n\n# Validity\ncity.is_valid.all()\ncity.geometry = city.buffer(0)\ncity.is_valid.all()\n\n# Remove multipolygon\ncity.geom_type.value_counts()\ncity = city[city.geom_type == 'Polygon']\n\n# Reset index\ncity = city.reset_index(drop=True)\n\n# Merge overlapps\ngeoms = city.geometry.unary_union\ncity = gpd.GeoDataFrame(geometry=[geoms])\n\ncity = city.explode().reset_index(drop=True)","2a6153e6":"################################\n# Tessellation\n################################\n\ncity['uID'] = range(len(city))\n\ncheck = mm.CheckTessellationInput(city)\ncity = city.drop(check.collapse.index.union(check.overlap.index).union(check.split.index))\n\ncity_limit = mm.buffered_limit(city, 50)\ncity_tess = mm.Tessellation(city, \"uID\", city_limit, segment=2).tessellation\n\ncity_tess.shape\n\nax = city.plot(figsize=(16, 16))\ncity_tess.plot(ax=ax, facecolor='none', edgecolor='r', linewidth=.4)","fa6ca438":"################################\n# Figure-ground operation for skeleton extraction\n################################\n'''\n# Merge adjacent polygons\n#blg_buffer = dar_blg\n#for i in range(1):\n#    blg_buffer = blg_buffer['geometry'].convex_hull\n#    blg_buffer = gpd.GeoDataFrame(geometry=blg_buffer)\n#    blg_buffer = gpd.overlay(blg_buffer, blg_buffer, how='intersection')\n#    blg_buffer = blg_buffer.unary_union\n#    blg_buffer = gpd.GeoDataFrame(geometry=[polygon for polygon in blg_buffer])\n#blg_buffer.plot(figsize=(10, 10), alpha=0.5, edgecolor='k')\n\n# Bounding box to polygon\nbbox = dar_blg.total_bounds\ncoordinates = [(bbox[0], bbox[3]), (bbox[2], bbox[3]), (bbox[2], bbox[1]), (bbox[0], bbox[1])]\npolygon = Polygon(coordinates)\nbound_poly = gpd.GeoDataFrame(crs = {'init':'epsg:4326'})\nbound_poly.loc[0,'name'] = 'bound'\nbound_poly.loc[0, 'geometry'] = polygon\n\n# Ground as bounding box minus buildings\nground = gpd.overlay(bound_poly, dar_blg, how='difference')\nground.plot(figsize=(10, 10), alpha=0.5, edgecolor='k')\n'''","aab19023":"# Rasterize and find skeletons as street elements >> very slow!!\n'''\nheight = 500\nwidth = int((bbox[2]-bbox[0])\/(bbox[3]-bbox[1])*height)\nx, y = np.meshgrid(np.linspace(bbox[0], bbox[2], num=width), np.linspace(bbox[1], bbox[3], num=height))\nx, y = x.flatten(), y.flatten()\npoints = np.vstack((x,y)).T\n\n_pnts = [Point(point[0],point[1]) for point in points]\n#pnts = gpd.GeoDataFrame(geometry=_pnts, crs = {'init':'epsg:4326'})\n\npoly = ground['geometry'][0]\npnts_binary = [poly.contains(pt) for pt in _pnts]\n#pnts['intersection'] = pnts.within(poly)\n#np.where(pnts_binary==True)\n\nrasterized = [[pt.x, pt.y, pnts_binary[ind]] for ind, pt in enumerate(_pnts)]\n\nr = np.array(rasterized)\nm = r[:,2].reshape(height,width)\nm = np.flip(m,axis=0)\nplt.figure(figsize=(10, 10))\nplt.imshow(m)\n\n# Perform skeletonization\nskeleton = skeletonize(m)\nplt.figure(figsize=(10, 10))\nplt.imshow(skeleton)\n'''","025185ea":"# Pathways in slums\n\n### An ongoing collaborative efforts towards open-source platform for slum mapping\n\n## Foreword\n-------------------\nUsing maps and aerial images for understanding slums has been active for years. The slums are characterized by deprivation in multiple dimensions, such as social exclusion, poor housing and environmental conditions, lacking tenure security, as well as basic services. But on maps or images, hardly any information more than the physical characteristics can be captured. Thus, a fundamental assumption to use maps and images to study slums is that socioeconomic status such as poverty is manifested in the physical morphology of slums, such as informality of paths and buildings. But what defines a path given its fuzziness in slums relative to the buildings? In this work, we are showing our steps of mapping pathways given the buildings in slums.\n\n## Technical backends\n-------------------\n##### This page contains a Python program for mapping informal pathways in slums given the building footprints.\n\n##### The program is running in the form of Python Jupyter Notebook based on designated kernel served by Kaggle.com, where kernels are standalone programming environment. The standalone kernel along with the Jupyter Notebook format enforce the program to be in consistent environment and executed in controlled sequence, and further ensure experiment reproducibility.\n\n##### The Python Jupyter Notebook also ensures sectional execution of the program and gives a feeling of \"click-and-run\".\n\n##### The notebook kernel is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n##### The program is still under development and subject to modification before publishing.\n\n-------------------\n###### Credit to this work can be given as:\n```\nVenerandi, A; Wang, J.; Mapping path networks in slums, (2021), Kaggle community,\nhttps:\/\/www.kaggle.com\/jonwang4\/deepslum\n```","86feeaf8":"### Tessellation approach","087fb3bb":"### Raster skeleton approaches"}}