{"cell_type":{"e1068832":"code","402b73b2":"code","e2d3caf5":"code","2872bf3b":"code","99067550":"code","35e4e01c":"code","3f2d5b2c":"code","118ecbe9":"code","cd9fc040":"code","6a64effb":"code","5e4169ce":"code","c9e40761":"code","850d92e1":"code","8752d3ef":"code","82b641c0":"code","38e07a65":"code","f338ac88":"code","53682d07":"code","36287b22":"code","8bb367fe":"code","53cfb5ab":"code","271ba766":"code","f55d8049":"code","00134e54":"code","fb44ed18":"code","9a84696c":"code","2b206233":"code","d3ad0885":"code","5c800029":"code","56a2a1cc":"code","4f176e6b":"markdown","55895d93":"markdown","464799b3":"markdown","5a8ca76e":"markdown","e6846338":"markdown","f09ef29a":"markdown","10bafb3a":"markdown","fcf7564d":"markdown","c92218b7":"markdown","a2874fa5":"markdown","3578d48d":"markdown","7f5d74f4":"markdown","6328ab01":"markdown","9a024848":"markdown","6bb9bef6":"markdown"},"source":{"e1068832":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","402b73b2":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import accuracy_score\n","e2d3caf5":"train = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","2872bf3b":"train.head()","99067550":"train.shape","35e4e01c":"train.nunique()","3f2d5b2c":"train.isnull().sum()","118ecbe9":"sns.countplot(x = train.iloc[:,1].values)\nplt.xlabel(\"Sex\")","cd9fc040":"sns.countplot(x = train.iloc[:,2].values)\nplt.xlabel(\"cp\")","6a64effb":"sns.countplot(x = train.iloc[:,5].values)\nplt.xlabel(\"fbs\")","5e4169ce":"sns.countplot(x = train.iloc[:,6].values)\nplt.xlabel(\"Restecg\")","c9e40761":"sns.countplot(x = train.iloc[:,8].values)\nplt.xlabel(\"exng\")","850d92e1":"sns.countplot(x = train.iloc[:,10].values)\nplt.xlabel(\"slp\")","8752d3ef":"sns.countplot(x = train.iloc[:,11].values)\nplt.xlabel(\"caa\")","82b641c0":"sns.countplot(x = train.iloc[:,12].values)\nplt.xlabel(\"thall\")","38e07a65":"sns.boxenplot(x = train.iloc[:,0].values)\nplt.xlabel(\"Age\")","f338ac88":"sns.boxenplot(x = train.iloc[:,3].values)\nplt.xlabel(\"trtbps\")","53682d07":"sns.boxenplot(x = train.iloc[:,4].values)\nplt.xlabel(\"Chol\")","36287b22":"sns.boxenplot(x = train.iloc[:,7].values)\nplt.xlabel(\"thalachh\")","8bb367fe":"sns.boxenplot(x = train.iloc[:,9].values)\nplt.xlabel(\"Oldpeak\")","53cfb5ab":"sns.countplot(x = train.iloc[:,-1].values)\nplt.xlabel(\"Output\")","271ba766":"x = train.iloc[:,:-1].values\ny = train.iloc[:,-1].values\nprint(x)\nprint(y)","f55d8049":"x_train,x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 23)","00134e54":"sc = StandardScaler()\nsc.fit_transform(x_train)","fb44ed18":"log_reg = LogisticRegression()\nlog_reg.fit(x_train, y_train)\ny_pred_lr = log_reg.predict(x_test)\nprint(\"Accuracy of Logistic Regression is\", accuracy_score(y_test, y_pred_lr))","9a84696c":"svc = SVC()\nsvc.fit(x_train, y_train)\ny_pred_svc = svc.predict(x_test)\nprint(\"Accuracy of Support Vector Machine is\", accuracy_score(y_test, y_pred_svc))","2b206233":"svm = SVC()\nparameter = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n              'C': [1, 10, 100, 1000]},\n             {'kernel': ['linear'],\n              'C': [1, 10, 100, 1000]}]\n\nsearcher = GridSearchCV(svm, parameter)\n\nsearcher.fit(x_train, y_train)\n\nprint(\"The best set of parameters for SVM are:\", searcher.best_params_)\nprint(\"The best score of SVM is:\", searcher.best_score_)\n\ny_pred_svm = searcher.predict(x_test)\n\nprint(\"Accuracy score of SVM after hyperparameter tuning is:\", accuracy_score(y_test, y_pred_svm))","d3ad0885":"dt = DecisionTreeClassifier(random_state = 26)\ndt.fit(x_train, y_train)\n\ny_pred_dt = dt.predict(x_test)\n\nprint(\"Accuracy score of Decision Tree is:\", accuracy_score(y_test, y_pred_dt))","5c800029":"rf = RandomForestClassifier(n_estimators = 40, random_state =  61)\nrf.fit(x_train, y_train)\n\ny_pred_rf = rf.predict(x_test)\n\nprint(\"Accuracy score of Random Forest is:\", accuracy_score(y_test, y_pred_rf))","56a2a1cc":"gb = GradientBoostingClassifier(random_state = 31)\ngb.fit(x_train, y_train)\n\ny_pred_gb = gb.predict(x_test)\n\nprint(\"Accuracy score of Gradient Boost is:\", accuracy_score(y_test, y_pred_gb))","4f176e6b":"RANDOM FOREST CLASSIFIER","55895d93":"**EXPLORATORY DATA ANALYSIS**","464799b3":"DECISION TREE CLASSIFIER","5a8ca76e":"**Using Boxen plot to find the count of numerical columns**","e6846338":"There is no missing data in the dataset.","f09ef29a":"LOGISTIC REGRESSION","10bafb3a":"**FITTING DATA TO THE MODEL**","fcf7564d":"**Finding count of each category in Categorical Columns**","c92218b7":"1. **IMPORTING LIBRARIES**","a2874fa5":"Categorical Columns:\n* sex\n* cp\n* fbs\n* restecg\n* exng\n* slp\n* caa\n* thall\n\nNumerical Columns:\n* age\n* trtbps\n* chol\n* thalachh\n* oldpeak","3578d48d":"**Countplot of target output**","7f5d74f4":"Hyperparameter Tuning","6328ab01":"GRADIENT BOOST CLASSIFIER","9a024848":"2. **IMPORTING DATASET**","6bb9bef6":"SUPPORT VECTOR MACHINES"}}