{"cell_type":{"a9d00ece":"code","3499b7aa":"code","eb8a62d4":"code","b7f22db4":"code","00e10d69":"code","b040a0f1":"code","6b2e1ac8":"code","c2dd9478":"code","d4049799":"code","b17db212":"code","39ef31cd":"code","15253fd2":"code","a6f68b5f":"code","05471e53":"code","cc24e8eb":"code","7df2a8df":"code","fac722a2":"code","a72e6c03":"code","3a909fa9":"code","c71c03ee":"code","947a83a1":"code","2d79b45a":"code","3ad448ed":"markdown","fcf1a24a":"markdown","8b6b0f7e":"markdown","48996217":"markdown"},"source":{"a9d00ece":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3499b7aa":"df = pd.read_csv('\/kaggle\/input\/amazon-reviews-unlocked-mobile-phones\/Amazon_Unlocked_Mobile.csv')\ndf = df.sample(frac=0.1, random_state=10)\ndf.head()","eb8a62d4":"#Drop the missing values.\ndf.dropna(inplace=True)\n\n#remove any neutral rating equals to 3.\ndf = df[df['Rating']!=3]\n\n#Encode 4 star and 5 star as positively rated 1.\n#Encode 1 star and 2 star as poorely rated 0.\ndf['Positively Rated'] = np.where(df['Rating']>3,1,0)\ndf.head(10)","b7f22db4":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('fivethirtyeight')\nfig,(ax0,ax1) = plt.subplots(nrows=1,\n                            ncols=2,\n                            figsize = (20,12))\nax0.scatter(df['Rating'],df['Review Votes'])\nax0.set(title='Rating vs Review Votes',\n       xlabel='Rating',\n       ylabel='Review Votes')\nax1.plot(df['Rating']==4,df['Rating']==5)\nax1.set(title='Rating 4 vs Rating 5',\n       xlabel='Rating 4',\n       ylabel='Rating 5');","00e10d69":"# most ratings are positive\ndf['Positively Rated'].mean()","b040a0f1":"from sklearn.model_selection import train_test_split\n\nX = df['Reviews']\ny = df['Positively Rated']\n#spliting data into training and test set.\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0)\nprint('X_train first entry:\\n',X_train.iloc[0])\nprint('\\nX_train shape',X_train.shape)","6b2e1ac8":"df['Positively Rated'].value_counts()","c2dd9478":"from sklearn.feature_extraction.text import CountVectorizer\n#fit the countVectorizer to the training data.\nvect = CountVectorizer()\nvect.fit(X_train)\n\n#getting every 2000 vocabulay features.\nvect.get_feature_names()[::2000]","d4049799":"len(vect.get_feature_names())","b17db212":"#transform the document in the training data to a document term matrix.\nX_train_vectorized = vect.transform(X_train)\nX_train_vectorized","39ef31cd":"from sklearn.linear_model import LogisticRegression\n#train the model.\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized,y_train)","15253fd2":"from sklearn.metrics import roc_auc_score,roc_curve\n\n#predict the transform test document.\npredictions = model.predict(vect.transform(X_test))\nprint('AUC: ',roc_auc_score(y_test,predictions))","a6f68b5f":"#get the feature names as numpy array.\nfeature_names = np.array(vect.get_feature_names())\n\n#sort the coffecient from the model.\nsorted_coef_index = model.coef_[0].argsort()\n\n'''Find the 10 smallest and 10 largest coefficients.\n The 10 largest coefficients are being indexed using [:-11:-1] \n so the list returned is in order of largest to smallest.'''\n\nprint('Smallest Coefficient(Negative reviews): \\n{}\\n'.format(feature_names[sorted_coef_index[:10]]))\nprint('Largest Coeffiecient(Positive reviews): \\n{}'.format(feature_names[sorted_coef_index[:-11:-1]]))","05471e53":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# Fit the TfidfVectorizer to the training data specifiying a minimum document frequency of 5\nvect = TfidfVectorizer(min_df=5).fit(X_train)\nlen(vect.get_feature_names())","cc24e8eb":"X_train_vectorized = vect.transform(X_train)\n\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\npredictions = model.predict(vect.transform(X_test))\n\nprint('AUC: ', roc_auc_score(y_test, predictions))","7df2a8df":"feature_names = np.array(vect.get_feature_names())\n\nsorted_tfidf_index = X_train_vectorized.max(0).toarray()[0].argsort()\n\nprint('Smallest tfidf:\\n{}\\n'.format(feature_names[sorted_tfidf_index[:10]]))\nprint('Largest tfidf: \\n{}'.format(feature_names[sorted_tfidf_index[:-11:-1]]))","fac722a2":"sorted_coef_index = model.coef_[0].argsort()\n\nprint('Smallest Coefs:\\n{}\\n'.format(feature_names[sorted_coef_index[:10]]))\nprint('Largest Coefs: \\n{}'.format(feature_names[sorted_coef_index[:-11:-1]]))","a72e6c03":"# These reviews are treated the same by our current model\nprint(model.predict(vect.transform(['not an issue, phone is working',\n                                    'an issue, phone is not working'])))","3a909fa9":"# Fit the CountVectorizer to the training data specifiying a minimum \n# document frequency of 5 and extracting 1-grams and 2-grams\nvect = CountVectorizer(min_df=5, ngram_range=(1,2)).fit(X_train)\n\nX_train_vectorized = vect.transform(X_train)\n\nlen(vect.get_feature_names())","c71c03ee":"model = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\npredictions = model.predict(vect.transform(X_test))\n\nprint('AUC: ', roc_auc_score(y_test, predictions))","947a83a1":"feature_names = np.array(vect.get_feature_names())\n\nsorted_coef_index = model.coef_[0].argsort()\n\nprint('Smallest Coefs:\\n{}\\n'.format(feature_names[sorted_coef_index[:10]]))\nprint('Largest Coefs: \\n{}'.format(feature_names[sorted_coef_index[:-11:-1]]))","2d79b45a":"# These reviews are now correctly identified\nprint(model.predict(vect.transform(['not an issue, phone is working',\n                                    'an issue, phone is not working'])))","3ad448ed":"# Sentiment Analysis \n\nSentiment analysis is the interpretation and classification of emotions (positive, negative and neutral) within text data using text analysis techniques. Sentiment analysis allows businesses to identify customer sentiment toward products, brands or services in online conversations and feedback.\n\nThis notebook uses the data from amazon reviews in mobile phones.","fcf1a24a":"# Count Vectorizer","8b6b0f7e":"# n-grams","48996217":"# TFIDF(Term Frequency-Inverse Document Frequency"}}