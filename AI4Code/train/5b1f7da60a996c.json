{"cell_type":{"d1ffbf31":"code","366f43e8":"code","c194ad75":"code","2b289bcb":"code","42acc275":"code","6c088fc9":"code","91e3a172":"code","2ea977db":"code","6fc06ea5":"code","b9e38034":"code","b452fc08":"code","9af91348":"code","c3caa17d":"code","5d56cdb8":"code","ac10ec23":"code","7e29216c":"code","c8e9b3e3":"code","60e6e28e":"code","e46efa13":"code","71d12e57":"code","d2064ca3":"code","f9c3cc8a":"code","c3d11b6f":"code","b5038e6d":"code","60d7791c":"code","0e05e82e":"code","69aefe8c":"markdown","f9901c7d":"markdown","4c9338a4":"markdown","72cd914a":"markdown","0914f403":"markdown","ab246b39":"markdown","ebf49d63":"markdown"},"source":{"d1ffbf31":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#encoding\nfrom category_encoders.ordinal import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\n#model\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import f1_score","366f43e8":"train = pd.read_csv('..\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('..\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('..\/input\/kakr-4th-competition\/sample_submission.csv')","c194ad75":"train","2b289bcb":"target = (train['income'] != '<=50K').astype(int)","42acc275":"target","6c088fc9":"train.drop(['income'], axis = 1, inplace = True)","91e3a172":"train.head()","2ea977db":"LE_encoder = OrdinalEncoder(list(train.columns))\ntrain_le = LE_encoder.fit_transform(train, target)\ntest_le = LE_encoder.transform(test)","6fc06ea5":"train_le.head()","b9e38034":"train.head()","b452fc08":"train.drop(['id'], axis = 1, inplace=True)\ntest.drop(['id'], axis = 1, inplace=True)","9af91348":"X_train, X_valid, y_train, y_valid = train_test_split(train_le, target, \n                                                          test_size=0.3,\n                                                          random_state=202,\n                                                          shuffle=True,\n                                                          stratify=target)","c3caa17d":"X_train","5d56cdb8":"X_valid","ac10ec23":"dc_tree = DecisionTreeClassifier()\ndc_tree.fit(X_train, y_train)","7e29216c":"sample_submission['prediction'] = dc_tree.predict(test_le).astype(int)\nsample_submission.to_csv('submission.csv', index = False)","c8e9b3e3":"dc_tree.score(X_valid, y_valid)","60e6e28e":"dc_tree = DecisionTreeClassifier()\ndc_tree.fit(X_train, y_train)\ny_pred = dc_tree.predict(X_valid)\nprint(\"Decision Tree accuracy : %.4f\"%np.mean(y_pred==y_valid))","e46efa13":"rf = RandomForestClassifier(max_depth = 15)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_valid)\nprint(\"Random Forest accuracy : %.4f\"%np.mean(y_pred==y_valid))","71d12e57":"sample_submission['prediction'] = rf.predict(test_le).astype(int)\nsample_submission.to_csv('submission.csv', index = False)","d2064ca3":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_valid)\nprint(\"SVC accuracy : %.4f\"%np.mean(y_pred == y_valid))","f9c3cc8a":"LE_encoder.cols","c3d11b6f":"train.info()","b5038e6d":"for col in train.columns:\n    if train[col].dtype == object:\n        values = train[col].unique()\n        print('==', col, len(values), '==')\n        #print(train[i].drop_duplicates())\n        print('\\n'.join(values))\n        #print(train[col].value_counts())\n        print()","60d7791c":"for i in train['education'].drop_duplicates():\n    print(i)","0e05e82e":"for i in train['education_num'].drop_duplicates(), train['education'].drop_duplicates():\n    print(i)","69aefe8c":"[ordinal encoder](https:\/\/www.google.com\/search?sxsrf=ALeKk03xy0_8s9b2nTVCmrIpuHX8sTut2w:1606278488553&q=ordinalencoder&spell=1&sa=X&ved=2ahUKEwiBtOHV7ZztAhUBE4gKHUo5DmgQBSgAegQIBRA0&biw=755&bih=660&dpr=1.25)","f9901c7d":"## other encoding","4c9338a4":"# feature engineering","72cd914a":"## Decision Tree","0914f403":"# Base Line","ab246b39":"## Random Forest","ebf49d63":"## Support Vector Machine"}}