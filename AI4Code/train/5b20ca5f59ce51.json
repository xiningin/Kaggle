{"cell_type":{"00158f19":"code","32c84415":"code","4cddd6ce":"code","4aeb8c01":"code","05208ba6":"code","02926f8a":"code","c15f401c":"code","a55b72c2":"code","6c695ee9":"code","c051e103":"code","26f722d8":"code","9cb059f1":"code","35401c6a":"code","d67cebbe":"code","6f2b91eb":"code","150368b6":"code","47951922":"code","e6fead0d":"code","944eeafd":"code","c1e8a53b":"code","99ca45bc":"markdown","901b288f":"markdown","a34a5f39":"markdown","fea0bad4":"markdown","8410b6ce":"markdown","3b346aa2":"markdown","15b1d794":"markdown","fa69e101":"markdown","212d9110":"markdown","19ce5db6":"markdown","efc322dc":"markdown","977781af":"markdown","4ae45c39":"markdown","ee654123":"markdown","327a387b":"markdown","47d740b8":"markdown","3dd38d57":"markdown"},"source":{"00158f19":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport plotly as py\nimport plotly.express as px\n\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\n\nimport warnings\nwarnings.filterwarnings('ignore')","32c84415":"covid19confirmed = pd.read_csv('..\/input\/from-john-hopkins-university\/time_series_covid19_confirmed_global.csv')\n\ncovid19recovered = pd.read_csv('..\/input\/from-john-hopkins-university\/time_series_covid19_recovered_global.csv')\n\ncovid19deaths = pd.read_csv('..\/input\/from-john-hopkins-university\/time_series_covid19_deaths_global.csv')\n\ncovid19 = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates=['ObservationDate', 'Last Update'])\n\ncovid19Brazil = pd.read_csv('..\/input\/corona-virus-brazil\/brazil_covid19.csv')","4cddd6ce":"#Checking the last 5 records to confirm when each dataset was updated:\n\nprint('covid19confirmed:')\nprint(covid19confirmed.tail())\n\n###\n\nprint('covid19recovered:')\nprint(covid19recovered.tail())\n\n###\n\nprint('covid19deaths:')\nprint(covid19deaths.tail())\n\n###\n\nprint('covid19:')\nprint(covid19.tail())\n\n###\n\nprint('covid19Brazil:')\nprint(covid19Brazil.tail())\n\n###","4aeb8c01":"#Rename column \"ObservationDate\" to 'Date'\n\ncovid19 = covid19.rename(columns={'ObservationDate' : 'Date'})","05208ba6":"#Dataset dimensions (rows vs columns)\n\nprint('covid19confirmed:')\nprint(covid19confirmed.shape)\n\n###\n\nprint('covid19recovered:')\nprint(covid19recovered.shape)\n\n###\n\nprint('covid19deaths:')\nprint(covid19deaths.shape)\n\n###\n\nprint('covid19:')\nprint(covid19.shape)\n\n###\n\nprint('covid19Brazil:')\nprint(covid19Brazil.shape)\n\n###","02926f8a":"#Checking for null or missing data values in each dataset\n\nprint('covid19confirmed:')\nprint(pd.DataFrame(covid19confirmed.isnull().sum()))\n\n###\nprint('covid19recovered:')\nprint(pd.DataFrame(covid19recovered.isnull().sum()))\n\n###\n\nprint('covid19deaths:')\nprint(pd.DataFrame(covid19deaths.isnull().sum()))\n\n###\n\nprint('covid19:')\nprint(pd.DataFrame(covid19.isnull().sum()))\n\n###\n\nprint('covid19Brazil:')\nprint(pd.DataFrame(covid19Brazil.isnull().sum()))\n\n###","c15f401c":"#Some dataset have null or missings data values, then let's replace to \"unknow\" values\n\ncovid19confirmed = covid19confirmed.fillna('unknow') \ncovid19recovered = covid19recovered.fillna('unknow')\ncovid19deaths = covid19deaths.fillna('unknow')\ncovid19 = covid19.fillna('unknow')","a55b72c2":"all_cases_world = covid19.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum()\nall_cases_world = all_cases_world.reset_index()\nall_cases_world = all_cases_world.sort_values('Date', ascending=False)\n\nfig = go.Figure()\nfig.update_layout(title_text='Total number of confirmed, deaths and recovered cases in the World', \n                  xaxis_title='Period Date', yaxis_title='Total Cases', template='plotly_dark')\n\nfig.add_trace(go.Scatter(x=all_cases_world['Date'],\n                        y=all_cases_world['Confirmed'],\n                        mode='lines+markers',\n                        name='Global Confirmed',\n                        line=dict(color='yellow', width=2)))\n\nfig.add_trace(go.Scatter(x=all_cases_world['Date'],\n                        y=all_cases_world['Deaths'],\n                        mode='lines+markers',\n                        name='Global Deaths',\n                        line=dict(color='red', width=2)))\n\nfig.add_trace(go.Scatter(x=all_cases_world['Date'],\n                        y=all_cases_world['Recovered'],\n                        mode='lines+markers',\n                        name='Global Recovered',\n                        line=dict(color='green', width=2)))\n\n\nfig.show()","6c695ee9":"global_rate = covid19.groupby(['Date']).agg({'Confirmed':['sum'],'Deaths':['sum'], 'Recovered': ['sum']})\nglobal_rate.columns = ['Global_Confirmed', 'Global_Deaths', 'Global_Recovered']\nglobal_rate = global_rate.reset_index()\nglobal_rate['Increase_New_Cases_by_Day'] = global_rate['Global_Confirmed'].diff().shift(-1)\n\n#Calculating rates\n#Lambda function\nglobal_rate['Global_Deaths_rate_%'] = global_rate.apply(lambda row: ((row.Global_Deaths)\/(row.Global_Confirmed))*100, axis=1).round(2)\nglobal_rate['Global_Recovered_rate_%'] = global_rate.apply(lambda row: ((row.Global_Recovered)\/(row.Global_Confirmed))*100, axis=1).round(2)\nglobal_rate['Global_Growth_rate_%'] = global_rate.apply(lambda row: row.Increase_New_Cases_by_Day\/row.Global_Confirmed*100, axis=1).round(2)\nglobal_rate['Global_Growth_rate_%'] = global_rate['Global_Growth_rate_%'].shift(+1)\n\nfig = go.Figure()\nfig.update_layout(title_text='Global rate of growth confirmed, deaths and recovered cases',\n                 xaxis_title='Period Date', yaxis_title='Rate', template='plotly_dark')\n\nfig.add_trace(go.Scatter(x=global_rate['Date'],\n                        y=global_rate['Global_Growth_rate_%'],\n                        mode='lines+markers',\n                        name='Global Growth Confirmed rate %',\n                        line=dict(color='yellow', width=2)))\n\nfig.add_trace(go.Scatter(x=global_rate['Date'],\n                        y=global_rate['Global_Deaths_rate_%'],\n                        mode='lines+markers',\n                        name='Global Deaths rate %',\n                        line=dict(color='red', width=2)))\n\nfig.add_trace(go.Scatter(x=global_rate['Date'],\n                        y=global_rate['Global_Recovered_rate_%'],\n                        mode='lines+markers',\n                        name='Global Recovered rate %',\n                        line=dict(color='green', width=2)))\n\nfig.show()","c051e103":"global_rate.loc[:,['Date','Global_Confirmed', 'Global_Deaths', 'Global_Recovered', 'Increase_New_Cases_by_Day']].tail()","26f722d8":"last_update = '4\/20\/20'\nglobal_cases = covid19confirmed\nglobal_cases = global_cases[['Country\/Region', last_update]]\nglobal_cases = global_cases.groupby('Country\/Region').sum().sort_values(by=last_update, ascending=False)\nglobal_cases['Confirmed'] = covid19confirmed[['Country\/Region', last_update]].groupby('Country\/Region').sum().sort_values(by=last_update, ascending=False)\nglobal_cases['Recovered'] = covid19recovered[['Country\/Region', last_update]].groupby('Country\/Region').sum().sort_values(by=last_update, ascending=False)\nglobal_cases['Deaths'] = covid19deaths[['Country\/Region', last_update]].groupby('Country\/Region').sum().sort_values(by=last_update, ascending=False)\nglobal_cases['Active'] = global_cases[last_update] - global_cases['Recovered'] - global_cases['Deaths']\nglobal_cases['Mortality_Rate_%'] = ((global_cases['Deaths'])\/(global_cases['Confirmed'])*100).round(2)\nglobal_cases = global_cases.loc[:,['Confirmed', 'Deaths', 'Recovered', 'Active', 'Mortality_Rate_%']]\nglobal_cases.head(50)","9cb059f1":"prediction = covid19.copy()\n\nprediction = prediction.groupby(['Date', 'Country\/Region']).agg({'Confirmed':['sum'], 'Deaths':['sum'], 'Recovered':['sum']})\nprediction.columns = ['Confirmed', 'Deaths', 'Recovered']\nprediction = prediction.reset_index()\nprediction = prediction[prediction.Confirmed!=0]\nprediction = prediction[prediction.Deaths!=0]\n\n#Prevent division by zero\ndef ifNull(d):\n    temp=1\n    if d!=0:\n        temp=d\n    return temp\n\nprediction['mortality_rate'] = prediction.apply(lambda row: ((row.Deaths+1)\/ifNull((row.Confirmed)))*100, axis=1)","35401c6a":"floorVar = 0\nworldPop = 10000000\n\n#Modelling total confirmed cases \nconfirmed_train_dataset = pd.DataFrame(covid19.groupby('Date')['Confirmed'].sum().reset_index()).rename(columns={'Date': 'ds', 'Confirmed': 'y'})\nconfirmed_train_dataset['floor'] = floorVar\nconfirmed_train_dataset['cap'] = worldPop\n\n#Modelling deaths\ndeaths_train_dataset = pd.DataFrame(covid19.groupby('Date')['Deaths'].sum().reset_index()).rename(columns={'Date': 'ds', 'Deaths': 'y'})\ndeaths_train_dataset['floor'] = 0\ndeaths_train_dataset['cap'] = 2500\n\n#Modelling mortality rate\nmortality_train_dataset = pd.DataFrame(prediction.groupby('Date')['mortality_rate'].mean().reset_index()).rename(columns={'Date': 'ds', 'mortality_rate': 'y'})","d67cebbe":"#Total dataframe model\nm = Prophet(\n    growth=\"logistic\",\n    interval_width=0.98,\n    yearly_seasonality=False,\n    weekly_seasonality=False,\n    seasonality_mode='additive')\n\nm.fit(confirmed_train_dataset)\nfuture = m.make_future_dataframe(periods=50)\nfuture['cap'] = worldPop\nfuture['floor'] = floorVar\nconfirmed_forecast = m.predict(future)\n\n#Mortality rate model\nm_mortality = Prophet()\nm_mortality.fit(mortality_train_dataset)\nmortality_future = m_mortality.make_future_dataframe(periods=31)\nmortality_forecast = m_mortality.predict(mortality_future)\n\n#Deaths model\nm2 = Prophet(\n    growth=\"logistic\",\n    interval_width=0.95)\nm2.fit(deaths_train_dataset)\nfuture2 = m2.make_future_dataframe(periods=7)\nfuture2['cap'] = 2500\nfuture2['floor'] = 0\ndeaths_forecast = m2.predict(future2)","6f2b91eb":"fig = plot_plotly(m, confirmed_forecast)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.10,\n                       xanchor='left', yanchor='bottom',\n                       text='Total predictions to Confirmed cases in the World',\n                       font=dict(family='Arial',\n                                size=25,\n                                color='rgb(37,37,37)'),\n                       showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","150368b6":"fig_deaths = plot_plotly(m2, deaths_forecast)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.10,\n                       xanchor='left', yanchor='bottom',\n                       text='Total predictions to Deaths in the World',\n                       font=dict(family='Arial',\n                                size=25,\n                                color='rgb(37,37,37)'),\n                       showarrow=False))\nfig_deaths.update_layout(annotations=annotations)\nfig_deaths","47951922":"fig_lethality = plot_plotly(m_mortality, mortality_forecast)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.10,\n                       xanchor='left', yanchor='bottom',\n                       text='Predictions of the lethality rate in the World',\n                       font=dict(family='Arial',\n                                size=25,\n                                color='rgb(37,37,37)'),\n                       showarrow=False))\nfig_lethality.update_layout(annotations=annotations)\nfig_lethality","e6fead0d":"Brazil_cases = covid19.copy()\nBrazil_cases = covid19.loc[covid19['Country\/Region']=='Brazil']\nBrazil_cases = Brazil_cases.groupby(['Date', 'Country\/Region']).agg({'Confirmed':['sum'], 'Deaths':['sum'], 'Recovered':['sum']}).sort_values('Date', ascending=False)\nBrazil_cases.columns = ['Confirmed', 'Deaths', 'Recovered']\nBrazil_cases = Brazil_cases.reset_index()\nBrazil_cases['Confirmed_New_Daily_Cases'] = Brazil_cases['Confirmed'].diff().shift(-1)\nBrazil_cases['Deaths_New_Daily_Cases'] = Brazil_cases['Deaths'].diff().shift(-1)\nBrazil_cases['Recovered_New_Daily_Cases'] = Brazil_cases['Recovered'].diff().shift(-1)\nBrazil_cases_confirmed = Brazil_cases[Brazil_cases['Confirmed']!=0]\n#Brazil_cases_confirmed","944eeafd":"fig = go.Figure()\nfig.update_layout(title_text='Confirmed, Deaths and Recoveries cases in Brazil',\n                 xaxis_title='Period Date', yaxis_title='Cases', template='plotly_dark')\n\nfig.add_trace(go.Scatter(x=Brazil_cases_confirmed['Date'],\n                        y=Brazil_cases_confirmed['Confirmed'],\n                        mode='lines+markers',\n                        name='Brazil Confirmed Cases',\n                        line=dict(color='yellow', width=2)))\n\nfig.add_trace(go.Scatter(x=Brazil_cases_confirmed['Date'],\n                        y=Brazil_cases_confirmed['Deaths'],\n                        mode='lines+markers',\n                        name='Brazil Deaths Cases',\n                        line=dict(color='red', width=2)))\n\nfig.add_trace(go.Scatter(x=Brazil_cases_confirmed['Date'],\n                        y=Brazil_cases_confirmed['Recovered'],\n                        mode='lines+markers',\n                        name='Brazil Recovered Cases',\n                        line=dict(color='green', width=2)))\n\nfig.show()","c1e8a53b":"Brazil_cases_rate = covid19.copy()\nBrazil_cases_rate = covid19.loc[covid19['Country\/Region']=='Brazil']\nBrazil_cases_rate = Brazil_cases.groupby(['Date', 'Country\/Region']).agg({'Confirmed':['sum'], 'Deaths':['sum'], 'Recovered':['sum']}).sort_values('Date', ascending=False)\nBrazil_cases_rate.columns = ['Confirmed', 'Deaths', 'Recovered']\nBrazil_cases_rate = Brazil_cases_rate.reset_index()\nBrazil_cases_rate['Confirmed_New_Daily_Cases'] = Brazil_cases_rate['Confirmed'].diff().shift(-1)\nBrazil_cases_rate = Brazil_cases_rate[Brazil_cases_rate.Confirmed!=0]\nBrazil_cases_rate = Brazil_cases_rate[Brazil_cases_rate.Deaths!=0]\n\n#Prevent division by zero\n\n","99ca45bc":"> Interactive Graph - Q7:\n\n> Forecast to lethality rate in the World","901b288f":"# Covid-19 - Exploratory Analysis and Predictions\n\n\n\n![](https:\/\/i.ibb.co\/txCZFvr\/3-D-medical-animation-coronavirus-structure.jpg)","a34a5f39":"> Interactive Graph - Q02: \n\n>Global rate for growth confirmed, deaths and recovered cases","fea0bad4":">Interactive Graph - Q01: \n\n>Total number of confirmed, death and recovered cases of people around the world","8410b6ce":"Loading dataset\n\nLast Update 04\/20\/2020","3b346aa2":"> Table 02 - Q4 & Q5:\n\n> Total numbers confirmed, deaths, recovered, active cases and mortality rate by Country","15b1d794":"Data Processing","fa69e101":"> Table 01 - Q3: \n\n>Total confirmed, deaths, recovered and increase new confirmed cases by day","212d9110":"Import Libraries","19ce5db6":"> Interactive Graph - Q8:\n\n> Question...","efc322dc":"> Interactive Graphs - Q6: \n\n> Forecast of the covid-19 progress in the world to Confirmed cases","977781af":"About this Dataset\n\nThese datasets explored in these analyzes below are provided by Johns Hopkins University, a renowned institution in the United States that is at the forefront of data collected worldwide about Covid-19.  I also collect data from the Kaggle platform, where it gathers users from all over the world collaborating with real data and from reliable sources.\n\nAll datasets explored have information with daily updates on the numbers of confirmed cases, deaths and recovery from Covid-19. Note that they are time series data and the numbers of cases on a given day are cumulative numbers.\n\n\nAbout this Analysis\n\nIt is an exploratory analysis in order to discover relations, patterns, behaviors, trends and predictions, through answers to questions related to the data for be to analyzed.  The objective is also to observe the main characteristics of the data that reveal really objective and clear information, frequently by visual methods, so that they are understood.\n\nThe Python programming language will be used to apply statistical techniques and machine learning algorithms.\n\n---\n\n\nFontes | Sources (Datasets): \n\nJohns Hopkins University:\nhttps:\/\/coronavirus.jhu.edu\/\n\nKaggle:\nhttps:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\nhttps:\/\/www.kaggle.com\/unanimad\/corona-virus-brazil\n\nAll datasets on github:\n\nhttps:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data\/csse_covid_19_time_series\nhttps:\/\/github.com\/niltontac\/EspAnalise-EngDados\/tree\/master\/data\/Novel_Corona_Virus_2019_Dataset\nhttps:\/\/github.com\/niltontac\/EspAnalise-EngDados\/tree\/master\/data\/covid19_brazil_data\n\n","4ae45c39":"Global predictions using Machine Learning Algorithm - Prophet - procedure for forecasting time series data","ee654123":"Plotly Visualizations: Exploratory Data Analysis and Predictions in the World and Brazil.\n\nWorldwide:","327a387b":"Brazil\n\n> Analysis of the advancement of covid-19 in Brazil","47d740b8":"> Interactive Graphs - Q6:\n\n> Forecast of the covid-19 progress in the world to Deaths cases","3dd38d57":"> Interactive Graph - Q?:\n\n> Question..."}}