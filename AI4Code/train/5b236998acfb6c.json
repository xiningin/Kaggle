{"cell_type":{"2c2e35aa":"code","f6b48796":"code","8822b397":"code","7f631288":"code","3072e236":"code","314f58fe":"code","82fc52b8":"markdown","1cb47410":"markdown","83af73fd":"markdown"},"source":{"2c2e35aa":"! pip install pyfolio\n! pip install PyPortfolioOpt","f6b48796":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom pypfopt import risk_models as RiskModels\nimport datetime\nfrom pypfopt import black_litterman\nfrom pypfopt.black_litterman import BlackLittermanModel\nfrom pypfopt.efficient_frontier import EfficientFrontier\n%matplotlib inline\n# portfolio optimization\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\n# https:\/\/pyportfolioopt.readthedocs.io\/en\/latest\/","8822b397":"prices = pd.read_csv(\"\/kaggle\/input\/group3data\/his_data.csv\", names=(\"Date\", \"JPY\", \"NZD\", \"AUD\", \"EUR\", \"GBP\", \"HKD\", \"BRL\", \"DKK\", \"INR\", \"CAD\", \"CHF\")).drop(0)\nprices['Date'] = prices['Date'].astype('str')\nprices['Date'] = prices[\"Date\"].str[:4] + \"-\" + prices[\"Date\"].str[4:6] + \"-\" + prices[\"Date\"].str[6:8]\nprices['Date'] = pd.to_datetime(prices['Date'])\nprices = prices.set_index('Date')\ncurrencies = [\"JPY\", \"NZD\", \"AUD\", \"EUR\", \"GBP\", \"HKD\", \"BRL\", \"DKK\", \"INR\", \"CAD\", \"CHF\"]\nfor currency in currencies:\n    prices[currency] = prices[currency].astype(float)","7f631288":"shrunk_covariance = RiskModels.CovarianceShrinkage(prices)\nshrunk_covariance = shrunk_covariance.shrunk_covariance()","3072e236":"weight_set = []\nP = np.array([\n        [-0.3,-0.1,-0.2,-0.2,-0.1,-0.1,1, 0, 0, 0, 0],# BRL up 3%\n        [1,0,0,0,0,0,0,0,0,0,0]]) # JPY up 1%\nQ = np.array([[0.0003],[0.001]]) # 2-vector\ndelta = black_litterman.market_implied_risk_aversion(prices[\"JPY\"])\nOmega = BlackLittermanModel.default_omega(cov_matrix = shrunk_covariance, P = P, tau = 0.05)\nbl = BlackLittermanModel(shrunk_covariance, P = P, Q = Q, omega = Omega)\nrets = bl.bl_returns()\nbl.bl_weights(delta)\nweight = bl.clean_weights()","314f58fe":"df = pd.DataFrame(weight,\n                  columns=currencies,\n                  index=['Equilibrium Weights'])\ndf.T.plot(kind='bar')","82fc52b8":"\u2191 this result means my forecasting is reflected in portfolio  \n\u2191\u65e5\u672c\u304c1%\u4e0a\u304c\u308b\u3068\u3057\u3066\u3044\u305f\u308a\u3001BRL\u304c\u4ed6\u3088\u308a\u30823%\u4e0a\u304c\u308b\u3068\u3044\u3046\u4e88\u6e2c\u3092\u53cd\u6620\u3057\u3066\u3044\u308b\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b\u3002","1cb47410":"## reflect my forecasting to Portfolio\n## \u898b\u901a\u3057\u306e\u53cd\u6620\n\u3069\u3053(P\u306e\u5217\u3067\u6307\u5b9a)\u304c\u3069\u308c\u304f\u3089\u3044\u306e\u78ba\u7387(Omega)\u3067\u4f55\uff05(Q)\u5909\u5316\u3059\u308b\u304b\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","83af73fd":"## read historical Data\n## \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\u3053\u3053\u3067\u306f\u3001\u305d\u306e\u65e5\u307e\u3067\u306b\u308f\u304b\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u307f\u3092\u8aad\u307f\u8fbc\u3080"}}