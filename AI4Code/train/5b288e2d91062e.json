{"cell_type":{"244c4c4f":"code","4accf212":"code","d7216137":"code","f9314190":"code","e0b16deb":"code","96a0d8a4":"code","eb603a12":"code","00ca6091":"code","d9c11505":"code","656b7a1d":"code","33ae656e":"code","a05101d9":"code","ecf81deb":"code","dd3ad675":"code","c51d596c":"code","b06210ff":"code","17c53df5":"code","1d25bebf":"code","dea0fa16":"markdown","0bb05654":"markdown","a397d632":"markdown","b5396276":"markdown","e45cacf0":"markdown","4853e598":"markdown","ba15e039":"markdown","447bf70d":"markdown"},"source":{"244c4c4f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4accf212":"import pandas as pd \nimport numpy as np\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\n","d7216137":"df=pd.read_csv('\/kaggle\/input\/online-retail-ii-data-set-from-ml-repository\/Year 2010-2011.csv', encoding = 'unicode_escape')\ndf.head()","f9314190":"df.info()\ndf.isnull().sum()","e0b16deb":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","96a0d8a4":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","eb603a12":"replace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")","00ca6091":"df.dropna(inplace=True)\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]\ndf = df[df[\"Price\"] > 0]\n","d9c11505":"df_de = df[df['Country'] == \"Germany\"]","656b7a1d":"def check_id(dataframe, product_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == product_code][[\"Description\"]].values[0].tolist()\n    return product_name","33ae656e":"ProductCode=[\"21987\", \"23235\", \"22747\"] \nProductName={i:check_id(df_de,i) for i in ProductCode}\nProductName","a05101d9":"def product_unstack(dataframe):\n    return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n\nproduct_unstack(df_de).head()","ecf81deb":"def create_rules(dataframe):\n    dataframe = product_unstack(dataframe)\n    frequent_itemsets = apriori(dataframe, min_support=0.01, use_colnames=True)\n    rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\n    return rules","dd3ad675":"rules=create_rules(df_de).sort_values(\"lift\",ascending=False)\nrules.head()","c51d596c":"\ndef recommend_list(dataframe,ProductCode,k=3):\n    recom_list=[] \n    for index,i in enumerate(dataframe[\"antecedents\"]):\n        for j in list(i):\n            if j==ProductCode:\n                for p in list(range(len(list(dataframe.iloc[index][\"consequents\"])))):\n                    recom_list.append(list(dataframe.iloc[index][\"consequents\"])[p])\n    return recom_list[0:3]\n\n","b06210ff":"df_=pd.DataFrame({i:recommend_list(rules,i) for i in ProductCode})\ndf_","17c53df5":"a=[]\nfor i in list(range(len(ProductCode))):\n    for j in list(range(3)):\n        a.append(df_.values[i,j])\n        ","1d25bebf":"RecommendName=pd.DataFrame({i:check_id(df_de,i) for i in a}).T\nRecommendName\n                           \n","dea0fa16":"Reviewing Dataset","0bb05654":"Determining for Outliers","a397d632":"Dealing with Outliers","b5396276":"Generating Recommendation List for Products","e45cacf0":"This function helps to transform from pruduct id to product name","4853e598":"According to Apriori Model, it is generated association rule set","ba15e039":"Preparing dataset for ARL model structure\n> *This model is done by using transactions from 'Germany'*","447bf70d":"From transactional dataset to 'Market X Product' matrix"}}