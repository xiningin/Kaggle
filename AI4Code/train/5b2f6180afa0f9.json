{"cell_type":{"fa25cc2e":"code","3d059eee":"code","fe5f0ef0":"code","9b477162":"code","3bfc480c":"code","676d3fe7":"code","489a9ccf":"code","a9248d07":"code","70cab7c5":"code","ed5a6ad4":"code","363ce7e1":"code","197451b5":"code","8ae361e7":"code","92d17f1c":"code","1d8199fb":"code","7bf4adbc":"code","10a7dea1":"code","e3f268ac":"code","26d8cbc4":"markdown","ac0ec2cc":"markdown","d7928944":"markdown","a4b9ec48":"markdown","44182949":"markdown","ae45fccf":"markdown","89d760cf":"markdown","d0167515":"markdown","81170d20":"markdown","5040d2af":"markdown","b69dc0c9":"markdown","5fc01f5a":"markdown","23f2f7fa":"markdown","af2231b7":"markdown","3be98960":"markdown","9f5b19c5":"markdown","1b4e1eb2":"markdown","8e3f4783":"markdown","8771b9dd":"markdown","325faa64":"markdown","cab9771b":"markdown","f9a9b2b4":"markdown","f317aedd":"markdown","2ba87cd5":"markdown","531d8218":"markdown"},"source":{"fa25cc2e":"!pip install -q quick-ml","3d059eee":"# maintain the order of the imports\n\nimport tensorflow as tf\nimport quick_ml","fe5f0ef0":"from quick_ml.begin_tpu import define_tpu_strategy, get_training_dataset, get_validation_dataset, get_test_dataset","9b477162":"strategy, tpu = define_tpu_strategy()","3bfc480c":"from kaggle_datasets import KaggleDatasets\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('cats-dogs-tfrecords-192x192')\nprint(GCS_DS_PATH)","676d3fe7":"train_tfrec_path = '\/train.tfrecords'\nval_tfrec_path = '\/val.tfrecords'","489a9ccf":"BATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nEPOCHS = 6\nSTEPS_PER_EPOCH = 14961 \/\/ BATCH_SIZE\nprint(\"STEPS PER EPOCH -> \", STEPS_PER_EPOCH)","a9248d07":"dictionary_labeled = \"{'image_raw' : tf.io.FixedLenFeature([], tf.string), 'label' : tf.io.FixedLenFeature([], tf.int64)}\"\nIMAGE_SIZE = \"192,192\"\n\nfrom quick_ml.begin_tpu import get_labeled_tfrecord_format\nget_labeled_tfrecord_format(dictionary_labeled, IMAGE_SIZE)","70cab7c5":"train_dataset = get_training_dataset(GCS_DS_PATH, train_tfrec_path, BATCH_SIZE)","ed5a6ad4":"val_dataset = get_validation_dataset(GCS_DS_PATH, val_tfrec_path, BATCH_SIZE)","363ce7e1":"from quick_ml.load_models_quick import create_model","197451b5":"with strategy.scope():\n    model = create_model(1, model_name = 'EfficientNetB1', classification_model = 'default', freeze = False, input_shape = [192,192,3], activation = 'sigmoid', weights = 'imagenet', optimizer = 'rmsprop', loss = 'binary_crossentropy', metrics = 'accuracy')","8ae361e7":"model.fit(train_dataset, \n         epochs = EPOCHS, \n         steps_per_epoch =STEPS_PER_EPOCH,\n         validation_data = val_dataset, batch_size = BATCH_SIZE)","92d17f1c":"from quick_ml.training_predictions import get_models_training_report","1d8199fb":"models = ['VGG16', 'InceptionV3', 'DenseNet201', 'EfficientNetB1']","7bf4adbc":"df1 = get_models_training_report(models, tpu, 1, train_dataset, STEPS_PER_EPOCH, EPOCHS, BATCH_SIZE, val_dataset, classification_model = 'default', freeze = False, input_shape = [192,192,3], activation = 'sigmoid', weights = 'imagenet', optimizer = 'rmsprop', loss = 'binary_crossentropy', metrics = 'accuracy')","10a7dea1":"df1","e3f268ac":"df1.to_csv('output.csv', index = False)","26d8cbc4":"Specifications :-\n\n* Efficient Net B1\n* Binary Output -> n_class -> 1\n* classification model -> using 'default' classification model used by quick_ml. This is the classification model by removing the top of the pretrained model architecture. You can define your own classification model using TF and pass it as an argument to 'classification_model'\n* freeze -> True or False, depening on whether to freeze the entire model during training or not\n* input_shape -> of the images in TFRecords\n* activation -> sigmoid\n* weights -> imagenet\n\nFor compilation\n\n* optimizer -> RMSProp\n* loss -> binary cross entropy\n* metrics -> accuracy","ac0ec2cc":"Once **GCS_DS_PATH** for the Labeled Dataset is obtained, the **train_tfrec_path** is mentioned & the **Batch Size** is defined along with the above step where we mentioned the labeled_tfrecord_format, we can begin loading the training datasets. Learn more by scrolling down to **get_training_dataset** section under **Begin Working w\/ TPU page**.","d7928944":"## Models Training Report (Multi-Model Training)","a4b9ec48":"### Installation","44182949":"define_tpu_strategy is used to instantiate the TPU strategy (if TPU present) & tpu instance (if TPU present). Learn more [here](https:\/\/www.quickml.info\/begin-working-w-tpu)","ae45fccf":"### Get TPU Strategy & load the datasets","89d760cf":"Note:- Please mention the full name of the dataset as an argument in get_gcs_path() rather than leaving it empty. In presence of more than one dataset, it would cause conflict. However, in the presence of single dataset, it's a good practice to mention the full name of the dataset as an argument in the get_gcs_path().","d0167515":"Once **GCS_DS_PATH** for the Labeled Dataset is obtained, the **val_tfrec_path** is mentioned & the **Batch Size** is defined along with the above step where we mentioned the labeled_tfrecord_format, we can begin loading the training datasets. Learn more by scrolling down to **get_validation_dataset** section under **Begin Working w\/ TPU page**.","81170d20":"#### Model Specifications","5040d2af":"#### Defining the Training Parameters","b69dc0c9":"## Single Model Training","5fc01f5a":"Training 4 models randomly. You can train upto 24 models in a single go.","23f2f7fa":"## Summary -> <br>\n\nIn this notebook, we'll learn how to perform Binary Classification using quick_ml. We'll be using Cats & Dogs Dataset in TFRecords Format. <br><br>\nThe workflow of the Binary Classification process will be as follows -> <br>\n* Installation & Imports\n* Obtaining TPU Strategy \n* Defining the Dataset & Training Parameters\n* Loading Training & Validation Dataset\n* Single Model Training\n* Multi Model Training","af2231b7":"get_labeled_tfrecord_format is used to define the format of the TFRecords dataset to be used for model trianing. Learn more [here](https:\/\/www.quickml.info\/begin-working-w-tpu)","3be98960":"with optimizer as 'rmsprop'","9f5b19c5":"* Batch Size - Usually 16 strategy.num_replicas_in_sync. However, 32strategy.num_replicas_in_sync will work equally good and faster.\n* Number of Epochs to train for\n* Num_Training_Images\n* Steps Per Epoch","1b4e1eb2":"#### Define the Parameters","8e3f4783":"If the GCS_DS_PATH was printed sucessfully, mention the relative path (relative to the GCS_DS_PATH's folder directory) of the tfrec files.","8771b9dd":"Get Models Training Report is used to generate performance report for various models. Learn more about Model Training Report at https:\/\/www.quickml.info\/models-training-report","325faa64":"##### loading the training & validation dataset","cab9771b":"#### Defined Labeled TFRecord Format","f9a9b2b4":"After successful installation, please ensure the order of imports, i.e., first Tensorflow then quick_ml. <br>\nIf every step was properly followed, you'll receive an output message stating Tensorflow successfully imported along with the version number.","f317aedd":"Define a list of models to train and generate report on.","2ba87cd5":"Use create_model to create_model and compile it in the fastest possible manner. Learn more about create model [here](https:\/\/www.quickml.info\/create-models-quickly)","531d8218":"## Official Website -> https:\/\/www.quickml.info"}}