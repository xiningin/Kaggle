{"cell_type":{"b3e3db1f":"code","249af4bc":"code","a7c9398c":"code","4a5d436c":"code","bb5f49fc":"code","25eb66b8":"code","c7ba71b3":"code","d8b8c89d":"code","22cf6991":"code","9900f3c6":"code","94136000":"code","27f9c297":"code","e0ccd7eb":"code","3fca0413":"code","493ef768":"code","4538188c":"code","342d4554":"code","57120019":"code","1ef3d8bc":"code","a179a25c":"code","0c4f0ebb":"markdown","a9a19ccb":"markdown","5f993d5b":"markdown","c72eeaf6":"markdown","44095d4d":"markdown"},"source":{"b3e3db1f":"import pandas as pd # package for high-performance, easy-to-use data structures and data analysis\nimport numpy as np # fundamental package for scientific computing with Python\nimport matplotlib\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)","249af4bc":"#Loading the dataset\ndf = pd.read_csv('..\/input\/iba-ml2-mid-project\/train.csv',index_col= 'Id')","a7c9398c":"#exploring Data\ndf.head()","4a5d436c":"df.info()","bb5f49fc":"df.describe()","25eb66b8":"# finding the data types, it identifies that there is 1 object columns which should be transformed to the float\ndf.dtypes.value_counts()","c7ba71b3":"#cleaning data and replacing wrongly placed ',' with the '.'\ndf['credit_line_utilization'] = df['credit_line_utilization'].astype(str)\nfor  i in range(1,len(df['credit_line_utilization'])):\n  df['credit_line_utilization'][i] = df['credit_line_utilization'][i].replace(',','.')\n#transofrming strings to float\ndf['credit_line_utilization'] = df['credit_line_utilization'].astype(float)","d8b8c89d":"# finding the unique values for all columns\ndf.apply(pd.Series.nunique, axis = 0)","22cf6991":"#looking for corralation between columns\nsns.heatmap(df.corr())","9900f3c6":"#identifying missing values \ndf.isnull().sum()","94136000":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","27f9c297":"# Function to calculate missing values by column# Funct \ndef missing_values_table(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Return the dataframe with missing information\n        return mis_val_table_ren_columns","e0ccd7eb":"missing_values = missing_values_table(df)\nmissing_values.head(20)","3fca0413":"# Distribution of the Target Column, which identifies that this is a imbalanced dataset, only 6.95 are positive\ntemp = df['defaulted_on_loan'].value_counts()\nx = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\nx.iplot(kind='pie',labels='labels',values='values', title='defaulted_on_loan or not')","493ef768":"#Relationship between age and number_of_credit_lines\nsns.scatterplot(data = df,y = 'age',x = 'number_of_credit_lines',hue = 'defaulted_on_loan')","4538188c":"#Relationship between age and monthly_income\nsns.scatterplot(data = df,y = 'age',x = 'monthly_income',hue = 'defaulted_on_loan')","342d4554":"#Relationship between monthly_income and number_of_credit_lines\nsns.scatterplot(data = df,y = 'monthly_income',x = 'number_of_credit_lines',hue = 'defaulted_on_loan')","57120019":"# Distribution number_dependent_family_members\ntemp = df['number_dependent_family_members'].value_counts()\nZ = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\nZ.iplot(kind='pie',labels='labels',values='values', title='number_dependent_family_members')","1ef3d8bc":"sns.boxplot(df['monthly_income'])  \nplt.show() \nsns.boxplot(df['number_of_credit_lines'])\nplt.show()\nsns.boxplot(df['credit_line_utilization'])\nplt.show()\nsns.boxplot(df['age'])  \nplt.show() \nsns.boxplot(df['number_of_previous_late_payments_up_to_89_days'])\nplt.show()\nsns.boxplot(df['number_of_previous_late_payments_up_to_59_days'])\nplt.show()\nsns.boxplot(df['number_of_previous_late_payments_90_days_or_more'])\nplt.show()\nsns.boxplot(df['real_estate_loans'])\nplt.show()\nsns.boxplot(df['ratio_debt_payment_to_income'])\nplt.show()\nsns.boxplot(df['number_dependent_family_members'])\nplt.show()","a179a25c":"df['defaulted_on_loan'].value_counts()","0c4f0ebb":"Missing Values Identification","a9a19ccb":"Exploring individual Columns","5f993d5b":"As can be seen from above there are siginificant outliers (anomalies) in dataset, which whould be deal with","c72eeaf6":"Identifying outliers","44095d4d":"Exploring Dataset"}}