{"cell_type":{"7385b1f5":"code","e96d2793":"code","53ff5cf0":"code","9377843d":"code","f88e9936":"code","e5d08ac5":"code","e7039b3a":"code","be9b69bf":"code","5c7df285":"code","c01c977a":"code","c07a3dca":"code","9458b9de":"code","3cf4d8da":"code","d457894d":"code","61d9ac8e":"code","cf309a8e":"code","88b9e8f6":"code","47315e46":"code","be3061fe":"markdown"},"source":{"7385b1f5":"import pandas as pd\nimport numpy as np\nimport missingno as msno\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom tqdm import tqdm\n%matplotlib inline","e96d2793":"df = pd.read_csv('..\/input\/wine-dataset-for-clustering\/wine-clustering.csv')\ndf","53ff5cf0":"sb.heatmap(df.isnull(), cbar=False)","9377843d":"df.describe()","f88e9936":"sb.pairplot(df,palette=\"dark\")","e5d08ac5":"sb.heatmap(df, cmap=\"Accent\")","e7039b3a":"sb.set(style=\"darkgrid\", font_scale=1.5, rc={'figure.figsize':(20,20)})\nax=df.hist(bins=20, color=\"green\")","be9b69bf":"scale = StandardScaler()","5c7df285":"cluster_ = df.copy()","c01c977a":"cluster_[cluster_.columns] = scale.fit_transform(cluster_)","c07a3dca":"from sklearn.decomposition import PCA\npca = PCA(2)\npca_result = pca.fit_transform(cluster_) \nsb.set(style=\"darkgrid\", rc={'figure.figsize':(9,6)}, font_scale=2)\nplt.scatter(x=pca_result[:,0], y=pca_result[:,1], color=\"black\", lw=2)\nplt.xlabel(\"Principle Component 1\")\nplt.ylabel(\"Principle Component 2\")\nplt.title(\"Strongest Principle Components\")\nplt.show()","9458b9de":"import sklearn.cluster as cluster\n\ninertia = []\nfor i in tqdm(range(2,10)):\n    kmeans = cluster.KMeans(n_clusters=i,\n               init='k-means++',\n               n_init=15,\n               max_iter=500,\n               random_state=17)\n    kmeans.fit(cluster_)\n    inertia.append(kmeans.inertia_)","3cf4d8da":"from sklearn.metrics import silhouette_score\n\nsilhouette = {}\nfor i in tqdm(range(2,10)):\n    kmeans = cluster.KMeans(n_clusters=i,\n               init='k-means++',\n               n_init=15,\n               max_iter=500,\n               random_state=17)\n    kmeans.fit(cluster_)\n    silhouette[i] = silhouette_score(cluster_, kmeans.labels_, metric='euclidean')","d457894d":"sb.set(style=\"darkgrid\", rc={'figure.figsize':(13,8)}, font_scale=2)\n\nplt.subplot(1,2,1)\nplt.plot(range(2,len(inertia)+2), inertia, marker=\"*\", lw=2, color=\"skyblue\", ms=10)\nplt.xlabel(\"Number of clusters\")\nplt.title(\"K-Means Inertia\", fontweight='bold')\n\nplt.subplot(1,2,2)\nplt.bar(range(len(silhouette)), list(silhouette.values()), align='center', width=.7, edgecolor=\"black\", lw=2, color=\"skyblue\" )\nplt.xticks(range(len(silhouette)), list(silhouette.keys()))\nplt.xlabel(\"Number of clusters\")\nplt.title(\"Silhouette Score\", fontweight='bold')\n\nplt.show()","61d9ac8e":"kmeans= cluster.KMeans(n_clusters=3, random_state=17, init='k-means++')\nkmeans_labels = kmeans.fit_predict(cluster_)\ncentroids = kmeans.cluster_centers_\ncentroids_pca = pca.transform(centroids)\npd.Series(kmeans_labels).value_counts()","cf309a8e":"df2 = df.copy()\ndf2['Cluster'] = kmeans_labels\n\naux=df2.columns.tolist()\naux[0:len(aux)-1]\n\nsb.set(style=\"darkgrid\", rc={'figure.figsize':(13,8)}, font_scale=2)\n\nfor cluster in aux[0:len(aux)-1]:\n    grid = sb.FacetGrid(df2, col=\"Cluster\")\n    grid.map(plt.hist, cluster, color=\"skyblue\", lw=1, edgecolor=\"black\")","88b9e8f6":"centroids_df = pd.DataFrame(scale.inverse_transform(centroids), columns= df.columns)\ncentroids_df","47315e46":"sb.set(style='darkgrid', rc={'figure.figsize':(12,8)},font_scale=2)\nplt.scatter(x=pca_result[:,0], y=pca_result[:,1], c=kmeans_labels, cmap=\"CMRmap\", lw=4)\nplt.scatter(x=centroids_pca[:,0], y=centroids_pca[:,1], marker=\"+\", s=500, linewidths=3, lw=4, color=\"blue\", zorder=10)\nplt.xlabel(\"Principle Component 1\")\nplt.ylabel(\"Principle Component 2\")\nplt.title(\"Clustered Data\")","be3061fe":"**Importing Libraries**"}}