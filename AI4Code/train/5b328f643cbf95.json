{"cell_type":{"d65cd186":"code","1265c9cf":"code","1e9b100b":"code","4b44c6a5":"code","bf2bcb43":"code","d7928072":"code","fdbc836f":"code","7d384a3d":"code","73ff89b9":"code","247646bf":"code","f4b418bd":"code","dfb9d7ee":"code","d534b589":"code","c5958efa":"code","64ecc938":"code","453208a0":"code","9cb46657":"markdown","15656c2e":"markdown","f93317ed":"markdown","81255365":"markdown","cf6f0b2c":"markdown","88992726":"markdown","d94ba7b8":"markdown","f6b74e07":"markdown","69e111bd":"markdown","3848e640":"markdown","d7ddd312":"markdown","29800b5c":"markdown","9f1bced6":"markdown","0e008c17":"markdown","51bf7b72":"markdown","57b07ecd":"markdown","a57a15d3":"markdown","1d246d05":"markdown","3d28cde5":"markdown","35754814":"markdown"},"source":{"d65cd186":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# Any results you write to the current directory are saved as output.","1265c9cf":"# load data set\nx_l = np.load('..\/input\/Sign-language-digits-dataset\/X.npy')\nY_l = np.load('..\/input\/Sign-language-digits-dataset\/Y.npy')\nimg_size = 64\nplt.subplot(1, 2, 1)\nplt.imshow(x_l[260].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 2, 2)\nplt.imshow(x_l[900].reshape(img_size, img_size))\nplt.axis('off')","1e9b100b":"# Join a sequence of arrays along an row axis.\nX = np.concatenate((x_l[204:409], x_l[822:1027] ), axis=0) # from 0 to 204 is zero sign and from 205 to 410 is one sign \nz = np.zeros(205)\no = np.ones(205)\nY = np.concatenate((z, o), axis=0).reshape(X.shape[0],1)\nprint(\"X shape: \" , X.shape)\nprint(\"Y shape: \" , Y.shape)","4b44c6a5":"# Then lets create x_train, y_train, x_test, y_test arrays\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15, random_state=42)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]","bf2bcb43":"X_train_flatten = X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2])\nX_test_flatten = X_test .reshape(number_of_test,X_test.shape[1]*X_test.shape[2])\nprint(\"X train flatten\",X_train_flatten.shape)\nprint(\"X test flatten\",X_test_flatten.shape)","d7928072":"x_train = X_train_flatten.T\nx_test = X_test_flatten.T\ny_train = Y_train.T\ny_test = Y_test.T\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","fdbc836f":"# short description and example of definition (def)\ndef dummy(parameter):\n    dummy_parameter = parameter + 5\n    return dummy_parameter\nresult = dummy(3)     # result = 8\n\n# lets initialize parameters\n# So what we need is dimension 4096 that is number of pixels as a parameter for our initialize method(def)\ndef initialize_weights_and_bias(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b","7d384a3d":"#w,b =initialize_weights_and_bias(4096)","73ff89b9":"# calculation of z\n#z = np.dot(w.T,x_train)+b\ndef sigmoid(z):\n    \n    y_head=1\/(1+np.exp(-z))\n    return y_head","247646bf":"y_head = sigmoid(0)\ny_head","f4b418bd":"# Forward propagation steps:\n# find z = w.T*x+b\n# y_head = sigmoid(z)\n# loss(error) = loss(y,y_head)\n# cost = sum(loss)\ndef forward_propagation(w,b,x_train,y_train):\n    z=np.dot(w.T,x_train)+b\n    y_head=sigmoid(z) #probabilistic 0-1\n    loss=-y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1] #x_train_shape[1] is for scaling\n    return cost\n\n    ","dfb9d7ee":"# In backward propagation we will use y_head that found in forward progation\n# Therefore instead of writing backward propagation method, lets combine forward propagation and backward propagation\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]  #x_train shape[1] is for scaling\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1] #x_train.shape[1] is for scaling\n    gradients={\"derivative_weight\":derivative_weight,\"derivative_bias\":derivative_bias}\n    return cost,gradients\n    ","d534b589":"# Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # updating(learning) parameters is number_of_iterarion times\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list\n    ","c5958efa":" # prediction\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n# predict(parameters[\"weight\"],parameters[\"bias\"],x_test)","64ecc938":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 4096\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 0.01, num_iterations = 150)","453208a0":"from sklearn import linear_model\nlogreg = linear_model.LogisticRegression(random_state = 42,max_iter= 150)\nprint(\"test accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)))\nprint(\"train accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)))","9cb46657":"<a id=\"5\"><\/a> <br>\n## Initializing parameters\n* As you know input is our images that has 4096 pixels(each image in x_train).\n* Each pixels have own weights.\n* The first step is multiplying each pixels with their own weights.\n* The question is that what is the initial value of weights?\n    * There are some techniques that I will explain at artificial neural network but for this time initial weights are 0.01.\n    * Okey, weights are 0.01 but what is the weight array shape? As you understand from computation graph of logistic regression, it is (4096,1)\n    * Also initial bias is 0.\n* Lets write some code. In order to use at coming topics like artificial neural network (ANN), I make definition(method).","15656c2e":"* We make prediction.\n* Now lets put them all together.","f93317ed":"<a id=\"4\"><\/a> <br>\n##  Computation Graph\n* Computation graphs are a nice way to think about mathematical expressions.\n* It is like visualization of  mathematical expressions.\n* For example we have $$c = \\sqrt{a^2 + b^2}$$\n* It's computational graph is this. As you can see we express math with graph.\n<a href=\"http:\/\/imgbb.com\/\"><img src=\"http:\/\/image.ibb.co\/hWn6Lx\/d.jpg\" alt=\"d\" border=\"0\"><\/a>","81255365":"* As you can see, we have 348 images and each image has 4096 pixels in image train array.\n* Also, we have 62 images and each image has 4096 pixels in image test array.\n* Then lets take transpose. You can say that WHYY, actually there is no technical answer. I just write the code(code that you will see oncoming parts) according to it :)","cf6f0b2c":"* Woow, I get tired :) Up to this point we learn our parameters. It means we fit the data. \n* In order to predict we have parameters. Therefore, lets predict.\n* In prediction step we have x_test as a input and while using it, we make forward prediction.","88992726":"<a id=\"7\"><\/a> <br>\n##  Optimization Algorithm with Gradient Descent\n* Well, now we know what is our cost that is error.\n* Therefore, we need to decrease cost because as we know if cost is high it means that we make wrong prediction.\n* Lets think first step, every thing starts with initializing weights and bias. Therefore cost is dependent with them.\n* In order to decrease cost, we need to update weights and bias.\n* In other words, our model needs to learn the parameters weights and bias that minimize cost function. This technique is called gradient descent.\n* Lets make an example:\n    * We have w = 5 and bias = 0 (so ignore bias for now). Then we make forward propagation and our cost function is 1.5.\n    * It looks like this. (red lines)\n    <a href=\"http:\/\/imgbb.com\/\"><img src=\"http:\/\/image.ibb.co\/dAaYJH\/7.jpg\" alt=\"7\" border=\"0\"><\/a>\n    * As you can see from graph, we are not at minimum point of cost function. Therefore we need to go through minimum cost. Okey, lets update weight. ( the symbol := is updating)\n    * w := w - step. The question is what is this step? Step is slope1. Okey, it looks remarkable. In order to find minimum point, we can use slope1. Then lets say slope1 = 3 and update our weight. w := w - slope1 => w = 2.\n    * Now, our weight w is 2. As you remember, we need to find cost function with forward propagation again. \n    * Lets say according to forward propagation with w = 2, cost function is 0.4. Hmm, we are at right way because our cost function is decrease. We have new value for cost function that is cost = 0.4. Is that enough? Actually I do not know lets try one more step.\n    * Slope2 = 0.7 and w = 2. Lets update weight w : = w - step(slope2) => w = 1.3 that is new weight. So lets find new cost.\n    * Make one more forward propagation with w = 1.3 and our cost = 0.3. Okey, our cost even decreased, it looks like fine but is it enough or do we need to make one more step? The answer is again I do not know, lets try.\n    * Slope3 = 0.01 and w = 1.3. Updating weight w := w - step(slope3) => w = 1.29 ~ 1.3. So weight does not change because we find minimum point of cost function. \n    * Everything looks like good but how we find slope? If you remember from high school or university, in order to find slope of function(cost function) at given point(at given weight) we take derivative of function at given point. Also you can ask that okey well we find slope but how it knows where it go. You can say that it can go more higher cost values instead of going minimum point. The asnwer is that slope(derivative) gives both step and direction of step. Therefore do not worry :)\n    * Update equation is this. It says that there is a cost function(takes weight and bias). Take derivative of cost function according to weight and bias. Then multiply it with  \u03b1 learning rate. Then update weight. (In order to explain I ignore bias but these all steps will be applied for bias)\n    <a href=\"http:\/\/imgbb.com\/\"><img src=\"http:\/\/image.ibb.co\/hYTTJH\/8.jpg\" alt=\"8\" border=\"0\"><\/a>\n    * Now, I am sure you are asking what is learning rate that I mentioned never. It is very simple term that determines learning rate. Hovewer there is tradeoff between learning fast and never learning. For example you are at Paris(current cost) and want to go Madrid(minimum cost). If your speed(learning rate) is small, you can go Madrid very slowly and it takes too long time. On ther other hand, if your speed(learning rate) is big, you can go very fast but maybe you make crash and never go to Madrid. Therefore, we need to choose wisely our speed(learning rate).\n    * Learning rate is also called hyperparameter that need to be chosen and tuned. I will explain it more detailed in artificial neural network with other hyperparameters. For now just say learning rate is 1 for our previous example.\n  \n* I think now you understand the logic behind forward propagation(from weights and bias to cost) and backward propagation(from cost to weights and bias to update them). Also you learn gradient descent. Before implementing the code you need to learn one more thing that is how we take derivative of cost function according to weights and bias. It is not related with python or coding. It is pure mathematic. There are two option first one is to google how to take derivative of log loss function and second one is even to google what is derivative of log loss function :) I choose second one because I cannot explain math without talking :) \n$$ \\frac{\\partial J}{\\partial w} = \\frac{1}{m}x(  y_head - y)^T$$\n$$ \\frac{\\partial J}{\\partial b} = \\frac{1}{m} \\sum_{i=1}^m (y_head-y)$$","d94ba7b8":"<a id=\"Overview the Data Set\"><\/a> <br>\n# Overview the Data Set\n* We will use \"sign language digits data set\" for this tutorial.\n* In this data there are 2062 sign language digits images.\n* As you know digits are from 0 to 9. Therefore there are 10 unique sign.\n* At the beginning of tutorial we will use only sign 0 and 1 for simplicity. \n* In data, sign zero is between indexes 204 and 408. Number of zero sign is 205.\n* Also sign one is between indexes 822 and 1027. Number of one sign is 206. Therefore, we will use 205 samples from each classes(labels).\n* Note: Actually 205 sample is very very very little for deep learning. But this is tutorial so it does not matter so much. \n* Lets prepare our X and Y arrays. X is image array (zero and one signs) and Y is label array (0 and 1).","f6b74e07":"<font color='purple'>\nWhat we did up to this point:\n* Choose our labels (classes) that are sign zero and sign one\n* Create and flatten train and test sets\n* Our final inputs(images) and outputs(labels or classes) looks like this:\n<a href=\"http:\/\/ibb.co\/bWMK7c\"><img src=\"http:\/\/image.ibb.co\/fOqCSc\/3.png\" alt=\"3\" border=\"0\"><\/a>","69e111bd":"<a id=\"1\"><\/a> <br>\n# INTRODUCTION\n* **Deep learning:** One of the machine learning technique that learns features directly from data. \n* **Why deep learning:** When the amounth of data is increased, machine learning techniques are insufficient in terms of performance and deep learning gives better performance like accuracy.\n<a href=\"http:\/\/ibb.co\/m2bxcc\"><img src=\"http:\/\/preview.ibb.co\/d3CEOH\/1.png\" alt=\"1\" border=\"0\"><\/a>\n* **What is amounth of big:** It is hard to answer but intuitively 1 million sample is enough to say \"big amounth of data\"\n* **Usage fields of deep learning:** Speech recognition, image classification, natural language procession (nlp) or recommendation systems\n* **What is difference of deep learning from machine learning:** \n    * Machine learning covers deep learning. \n    * Features are given machine learning manually.\n    * On the other hand, deep learning learns features directly from data.\n<a href=\"http:\/\/ibb.co\/f8Epqx\"><img src=\"http:\/\/preview.ibb.co\/hgpNAx\/2.png\" alt=\"2\" border=\"0\"><\/a>\n\n<br>Lets look at our data.","3848e640":"* Now we have 3 dimensional input array (X) so we need to make it flatten (2D) in order to use as input for our first deep learning model.\n* Our label array (Y) is already flatten(2D) so we leave it like that.\n* Lets flatten X array(images array).\n","d7ddd312":"* As we write sigmoid method and calculate y_head. Lets learn what is loss(error) function\n* Lets make example, I put one image as input then multiply it with their weights and add bias term so I find z. Then put z into sigmoid method so I find y_head. Up to this point we know what we did. Then e.g y_head became 0.9 that is bigger than 0.5 so our prediction is image is sign one image. Okey every thing looks like fine. But, is our prediction is correct and how do we check whether it is correct or not? The answer is with loss(error) function:\n    * Mathematical expression of log loss(error) function is that: \n    <a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/image.ibb.co\/eC0JCK\/duzeltme.jpg\" alt=\"duzeltme\" border=\"0\"><\/a>\n    * It says that if you make wrong prediction, loss(error) becomes big. **DENKLEM DUZELTME**\n        * Example: our real image is sign one and its label is 1 (y = 1), then we make prediction y_head = 1. When we put y and y_head into loss(error) equation the result is 0. We make correct prediction therefore our loss is 0. However, if we make wrong prediction like y_head = 0, loss(error) is infinity.\n* After that, the cost function is summation of loss function. Each image creates loss function. Cost function is summation of loss functions that is created by each input image.\n* Lets implement forward propagation.\n","29800b5c":"* In order to create image array, I concatenate zero sign and one sign arrays\n* Then I create label array 0 for zero sign images and 1 for one sign images.","9f1bced6":"* We learn logic behind simple neural network(logistic regression) and how to implement it.\n* Now that we have learned logic, we can use sklearn library which is easier than implementing all steps with hand for logistic regression.\n\n\n","0e008c17":"<a id=\"3\"><\/a> <br>\n# Logistic Regression\n* When we talk about binary classification( 0 and 1 outputs) what comes to mind first is logistic regression.\n* However, in deep learning tutorial what to do with logistic regression there??\n* The answer is that  logistic regression is actually a very simple neural network. \n* By the way neural network and deep learning are same thing. When we will come artificial neural network, I will explain detailed the terms like \"deep\".\n* In order to understand logistic regression (simple deep learning) lets first learn computation graph.","51bf7b72":"* Up to this point we learn \n    * Initializing parameters (implemented)\n    * Finding cost with forward propagation and cost function (implemented)\n    * Updating(learning) parameters (weight and bias). Now lets implement it.","57b07ecd":"![![image.png](attachment:image.png)]\n","a57a15d3":"* Now lets look at computation graph of logistic regression\n<a href=\"http:\/\/ibb.co\/c574qx\"><img src=\"http:\/\/preview.ibb.co\/cxP63H\/5.jpg\" alt=\"5\" border=\"0\"><\/a>\n    * Parameters are weight and bias.\n    * Weights: coefficients of each pixels\n    * Bias: intercept\n    * z = (w.t)x + b  => z equals to (transpose of weights times input x) + bias \n    * In an other saying => z = b + px1*w1 + px2*w2 + ... + px4096*w4096\n    * y_head = sigmoid(z)\n    * Sigmoid function makes z between zero and one so that is probability. You can see sigmoid function in computation graph.\n* Why we use sigmoid function?\n    * It gives probabilistic result\n    * It is derivative so we can use it in gradient descent algorithm (we will see as soon.)\n* Lets make example:\n    * Lets say we find z = 4 and put z into sigmoid function. The result(y_head) is almost 0.9. It means that our classification result is 1 with 90% probability.\n* Now lets start with from beginning and examine each component of computation graph more detailed.","1d246d05":"<a id=\"6\"><\/a> <br>\n## Forward Propagation\n* The all steps from pixels to cost is called forward propagation\n    * z = (w.T)x + b => in this equation we know x that is pixel array, we know w (weights) and b (bias) so the rest is calculation. (T is transpose)\n    * Then we put z into sigmoid function that returns y_head(probability). When your mind is confused go and look at computation graph. Also equation of sigmoid function is in computation graph.\n    * Then we calculate loss(error) function. \n    * Cost function is summation of all loss(error).\n    * Lets start with z and the write sigmoid definition(method) that takes z as input parameter and returns y_head(probability)","3d28cde5":"* The shape of the X is (410, 64, 64)\n    * 410 means that we have 410 images (zero and one signs)\n    * 64 means that our image size is 64x64 (64x64 pixels)\n* The shape of the Y is (410,1)\n    *  410 means that we have 410 labels (0 and 1) \n* Lets split X and Y into train and test sets.\n    * test_size = percentage of test size. test = 15% and train = 75%\n    * random_state = use same seed while randomizing. It means that if we call train_test_split repeatedly, it always creates same train and test distribution because we have same random_state.","35754814":"<a id=\"8\"><\/a> <br>\n## Logistic Regression with Sklearn\n* In sklearn library, there is a logistic regression method that ease implementing logistic regression.\n* I am not going to explain each parameter of logistic regression in sklear but if you want you can read from there http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html\n* The accuracies are different from what we find. Because logistic regression method use a lot of different feature that we do not use like different optimization parameters or regularization.\n* Lets make conclusion for logistic regression and continue with artificial neural network."}}