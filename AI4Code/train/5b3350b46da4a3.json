{"cell_type":{"779990b3":"code","f7a591a4":"code","28c1d0ac":"code","f4a22e98":"code","16f3183d":"code","a8b941f2":"code","83549b1f":"code","d314737f":"code","6f137315":"code","d6377cbb":"code","760e2548":"code","df740c99":"code","51456966":"code","c9564efc":"code","932dd5f0":"code","ec24aabc":"code","b705b831":"code","de486f5b":"code","863f6d7d":"markdown","68ddb81b":"markdown","0071a2c8":"markdown","8eb15c10":"markdown","54a493ea":"markdown"},"source":{"779990b3":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.svm import OneClassSVM\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np","f7a591a4":"df = pd.read_csv('..\/input\/aircraft-performance-dataset-aircraft-bluebook\/Airplane_Stochastic_Imputation.csv')\n\ndf['THR\/AUW'] = df['THR']\/df['AUW']\ndf['SHP\/AUW'] = df['SHP']\/df['AUW']","28c1d0ac":"def mask_and_X(eng):\n    \n    eng_dic = {'Jet': 'SHP',\n               'Propjet': 'THR',\n               'Piston': 'THR'}\n    \n    unit = eng_dic[eng]\n    unit_weight = unit + '\/AUW'\n    \n    X = df.drop(['Model', 'Company', 'TP mods'], axis = 1)\n    X = X[X['Engine Type'] == eng].drop([unit, unit_weight, 'Engine Type', 'Hmax (One)', 'ROC (One)'], axis=1)\n    mask = X['Multi Engine'] == True \n    X = X.drop(['Multi Engine'], axis = 1)\n    \n    return mask, X\n\ndef plot_outliers(mask, X, eng, out_mask = None):\n    \n    eng_dic = {'Jet': 'THR',\n               'Propjet': 'SHP',\n               'Piston': 'SHP'}\n    \n    unit = eng_dic[eng]\n    x = unit + '\/AUW'\n    \n    dfplot = X.copy()\n    dfplot = dfplot.drop(['AUW', 'MEW', unit], axis=1)\n    fig, ax = plt.subplots(7, 2, figsize=(15, 30))\n    \n    for i, c in enumerate(dfplot.columns):\n        \n        if c != x: \n            \n            sns.scatterplot(data=dfplot, x=x, y=c, ax=ax[i\/\/2, i%2])\n            ax[i\/\/2, i%2].scatter(dfplot.loc[mask, x], dfplot.loc[mask, c], s=15, label='Multi Engine')\n            ax[i\/\/2, i%2].legend()\n            \n            if out_mask is not None:\n                ax[i\/\/2, i%2].scatter(dfplot.loc[~out_mask, x], dfplot.loc[~out_mask, c], s=10, label='Outlier')\n                ax[i\/\/2, i%2].scatter(dfplot.loc[out_mask, x], dfplot.loc[out_mask, c], s=10, label='No Outlier')\n                ax[i\/\/2, i%2].legend()\n            \n            if i\/\/2 != 6:\n                ax[i\/\/2, i%2].set_xlabel('')\n    \n    fig.tight_layout()\n    \n    return\n        \nmask, X = mask_and_X('Jet')\nplot_outliers(mask, X, 'Jet')","f4a22e98":"df.loc[df['Engine Type'] == 'Jet', 'Multi Engine'] = True","16f3183d":"mask, X = mask_and_X('Piston')\nplot_outliers(mask, X, 'Piston')","a8b941f2":"mask, X = mask_and_X('Piston')\n\nmodel = IsolationForest().fit(X)\n\nout_mask = model.predict(X)\n\nout_mask = np.where(mask == 1, True, False)\n\nout_mask\n\nmask, X = mask_and_X('Piston')\nplot_outliers(mask, X, 'Piston', out_mask)","83549b1f":"sum(mask == out_mask)","d314737f":"X['Multi Engine'] = out_mask\ndf.update(X, overwrite=False) ","6f137315":"mask, X = mask_and_X('Propjet')\nplot_outliers(mask, X, 'Propjet')","d6377cbb":"mask, X = mask_and_X('Propjet')\n\nmodel = IsolationForest().fit(X)\n\nout_mask = model.predict(X)\n\nout_mask = np.where(mask == 1, True, False)\n\nout_mask\n\nmask, X = mask_and_X('Propjet')\nplot_outliers(mask, X, 'Propjet', out_mask)","760e2548":"sum(mask == out_mask)","df740c99":"X['Multi Engine'] = out_mask\ndf.update(X, overwrite=False) ","51456966":"end_mask = df['Multi Engine'] == False\n\ndf.loc[end_mask, 'Hmax (One)'] = df.loc[end_mask, 'Hmax'].copy()\ndf.loc[end_mask, 'ROC (One)'] = df.loc[end_mask, 'ROC'].copy()\n\ndf = df.drop(['THR\/AUW', 'SHP\/AUW'], axis = 1)\n\nplt.figure(figsize=(12, 6))\nsns.heatmap(df.isnull());","c9564efc":"df.info()","932dd5f0":"lst = ['Model', 'Company', 'Engine Type', 'Multi Engine', 'TP mods', 'SHP', 'THR']\n\ndf_msg = df[df['Multi Engine'] == True].drop(lst, axis=1)\n\nimp = IterativeImputer(LinearRegression(), max_iter=30, verbose=1)\n\ndf_msg_ind = df_msg.index\ndf_msg_col = df_msg.columns\n\ndf_msg = imp.fit_transform(df_msg)\n\ndf_imp = pd.DataFrame(data=df_msg, index=df_msg_ind, columns = df_msg_col)","ec24aabc":"df.update(df_imp, overwrite=False)\n\ndf.info()","b705b831":"plt.figure(figsize=(12, 6))\nsns.heatmap(df.isnull());","de486f5b":"df.to_csv('Airplane_Complete_Imputation.csv', index=False)","863f6d7d":"As we can see, the instances that we know that are multi engine are distributed according to the ones that we know nothing about. Another thing to notice is that the instances are in the left quandrant are likely to be multi engine. Therefore, we will consider them all multi engine jets, since jets are very expensive if they are single engine.","68ddb81b":"We now see different distributions, so, we will apply Outlier Dectetion to classify them.","0071a2c8":"Now, we will plot the Properties of the airplane with the Thrust or Power divided by AUW. The basic ideia behind is that Low Eng\/AUW and High Property is very likelly to be multi engine, in contrast with the opposite quarter. ","8eb15c10":"This is the last step at input missing data and data, with a vastly aplication of techniques that can be founded [here](https:\/\/www.kaggle.com\/heitornunes\/data-wrangling-and-cleanup), and [here](https:\/\/www.kaggle.com\/heitornunes\/data-imputation-stochastic-regression), and also [here](https:\/\/www.kaggle.com\/heitornunes\/revisiting-imputation-iterativeimputer). In this step, we will predict if an airplane is Multi (probably Dual) or a single engine. We will use only use the knownledge if a airplane is Multi Engine, not knowing nothing about One Engine airplanes. Therefore, this will be a outlier detection.","54a493ea":"![Sem t\u00edtulo.png](attachment:a53561ab-3277-49ff-8a14-f495af97beda.png)"}}