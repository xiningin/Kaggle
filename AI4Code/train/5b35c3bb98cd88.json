{"cell_type":{"c371d5b9":"code","19215414":"code","4d59d50a":"code","7f5d8c71":"code","04eebe6f":"code","e49d1ee7":"code","1c165411":"code","284583d5":"code","7cc90831":"code","196bed48":"code","c3878fa4":"code","89bdc287":"code","8cddd1af":"code","13749cee":"markdown","b3297523":"markdown","e745157b":"markdown"},"source":{"c371d5b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19215414":"import matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nimport pickle","4d59d50a":"X_trainC = pickle.load(open('\/kaggle\/input\/recycle-symbols-classification-dataset\/X_train.pickle', 'rb'))\ny_trainC = pickle.load(open('\/kaggle\/input\/recycle-symbols-classification-dataset\/y_train.pickle', 'rb'))\nX_testC = pickle.load(open('\/kaggle\/input\/recycle-symbols-classification-dataset\/X_test .pickle', 'rb'))\ny_testC = pickle.load(open('\/kaggle\/input\/recycle-symbols-classification-dataset\/y_test.pickle', 'rb'))","7f5d8c71":"class_names = ['1', '2', '4', '5', '7', '20','21', '22', 'ce',\n               'circle','eac', 'electronic', 'fork', 'FSC', 'gulf_mark',\n               'instructions', 'jap_paper', 'jap_plastic', 'tidyman',\n               'triangle', 'triman']","04eebe6f":"#normalizing\nX_trainC, X_testC = X_trainC\/225, X_testC\/225","e49d1ee7":"model_color_dropout = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(128, (3,3), padding='same', activation=tf.nn.relu,\n                           input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D((2,2), strides=2),\n    tf.keras.layers.Conv2D(128, (3,3), padding='same', activation=tf.nn.relu),\n    tf.keras.layers.MaxPooling2D((2,2), strides=2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dense(21, activation='softmax')\n    ])\n\nmodel_color_dropout.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])","1c165411":"from tensorflow.keras.callbacks import EarlyStopping\n\nEPOCHS = 100\nBATCH_SIZE = 100  \nIMG_SHAPE  = 150 \n\nearlystop_callback = EarlyStopping(\n  monitor='val_accuracy', min_delta=0.0001,\n  patience=20,restore_best_weights=True)\n\nhistory = model_color_dropout.fit(\n    X_trainC,y_trainC,\n    steps_per_epoch=int(np.ceil(len(X_trainC) \/ float(BATCH_SIZE))),\n    epochs=EPOCHS,\n    validation_data=(X_testC,y_testC),\n    validation_steps=int(np.ceil(len(X_testC) \/ float(BATCH_SIZE))),\n    callbacks=[earlystop_callback]\n)","284583d5":"test_loss, test_acc = model_color_dropout.evaluate(X_testC,  y_testC, verbose=2)\n\nprint('\\nTest accuracy:', test_acc, y_testC[0])","7cc90831":"#checking prediction of the first image\nmodel_color_dropout_result = tf.keras.Sequential([model_color_dropout, \n                                         tf.keras.layers.Softmax()])\npredictions = model_color_dropout_result.predict(X_testC)\nprint('actual class: ',y_testC[0], 'predicted class: ',np.argmax(predictions[0]))","196bed48":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\n\nepochs_range = range(len(history.history['loss'])) #instead of EPOCKS\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","c3878fa4":"def plot_image_color(i, predictions_array, true_label, img):\n  true_label, img = true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)","89bdc287":"i = 1\nplt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplot_image_color(i, predictions[i], y_testC, X_testC)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  y_testC)\nplt.show()","8cddd1af":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 15\nnum_cols = 2\nnum_images = num_rows*num_cols\nplt.figure(figsize=(5*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image_color(i, predictions[i], y_testC, X_testC)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], y_testC)\nplt.tight_layout()\nplt.show()","13749cee":"### DNN +drop out+early stop","b3297523":"### Setup","e745157b":"### Classification illustration"}}