{"cell_type":{"b41f4d3b":"code","56bb225a":"code","da557171":"code","7ffae2e2":"code","d89aba0b":"code","c1549de8":"code","6ae63096":"code","4860e276":"code","4e1283ac":"code","42180a53":"code","86ecf2ef":"code","53976e57":"code","3c083fbd":"code","e0571750":"code","803f9d72":"code","945f3bbc":"code","2b32ff6c":"code","04dc896e":"code","d34e0ac5":"code","6ae9ab3c":"markdown","68f7431a":"markdown","802fc7e2":"markdown","2fce6dbf":"markdown","21d7e78f":"markdown","2cc3a322":"markdown","40050164":"markdown","a4a7def9":"markdown","819dda2b":"markdown","1e599de9":"markdown","5191936b":"markdown","ee170b4b":"markdown","caf7c38e":"markdown"},"source":{"b41f4d3b":"import numpy as np  \nimport pandas as pd \nimport os\nimport pydicom\nfrom tqdm import tqdm_notebook as tqdm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom skimage import exposure\n\n# import mask utilities\nimport sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\nfrom mask_functions import rle2mask","56bb225a":"def extract_dcm_pixel_array(file_path):\n    return pydicom.dcmread(file_path).pixel_array\n\ndef extract_dcm_metadata(file_path):\n    ds = pydicom.dcmread(file_path)\n    d = {}\n    for elem in ds.iterall():\n        if elem.name != 'Pixel Data' and elem.name != \"Pixel Spacing\" :\n            d[elem.name.lower().replace(\" \",\"_\").replace(\"'s\",\"\")] = elem.value\n        elif elem.name == \"Pixel Spacing\" :\n            d[\"pixel_spacing_x\"] = elem.value[0]\n            d[\"pixel_spacing_y\"] = elem.value[1]\n            \n    return d\n\ndef create_metadataset (df):\n\n    ImageIds = []\n    data  = []\n    all_feats = set()    \n\n    for index, row in tqdm ( df[[\"ImageId\", \"path\"] ].drop_duplicates().iterrows() ) :            \n        path = row[\"path\"] \n        ImageId =  row[\"ImageId\"]       \n        feature_dict = extract_dcm_metadata (path)\n        data.append(feature_dict)\n        ImageIds.append(ImageId)\n        feats = set (feature_dict.keys())\n        if len ( feats - all_feats ) > 0:\n            all_feats = all_feats.union(feats)\n\n\n    df_meta = pd.DataFrame(columns=[\"ImageId\"])\n    df_meta[\"ImageId\"]=ImageIds\n\n    for feat in sorted(all_feats):\n        df_meta[feat]=[ d[feat] for d in data ]\n\n    df_meta['patient_age'] =  df_meta['patient_age'].map (lambda x: int(x))   \n    return df_meta\n\nDATA_PATH = \"..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\/\"\nSAMPLE_SUBMISSION = \"..\/input\/siim-acr-pneumothorax-segmentation\/sample_submission.csv\"\n\ndf_train  = pd.DataFrame([(name.replace(\".dcm\",\"\"),  os.path.join(root, name)) for root, dirs, files in os.walk(DATA_PATH + \"\/dicom-images-train\" )\n             for name in files if name.endswith((\".dcm\"))], columns = ['ImageId','path']) \n\ndf_test = pd.DataFrame([(name.replace(\".dcm\",\"\"), os.path.join(root, name)) for root, dirs, files in os.walk(DATA_PATH + \"\/dicom-images-test\" )\n             for name in files if name.endswith((\".dcm\"))], columns = ['ImageId','path']) \n\ndf_sub = pd.read_csv(SAMPLE_SUBMISSION)\n\n\ndf_rle = pd.read_csv(DATA_PATH + \"\/train-rle.csv\")  \ndf_rle = df_rle.rename ( columns =  { ' EncodedPixels': 'EncodedPixels' })\ndf_rle [\"EncodedPixels\"] = df_rle [\"EncodedPixels\"].map(lambda x: x[1:])\ndf_train = df_train.merge(df_rle, on=\"ImageId\", how=\"left\")\n\nnot_pneumothorax_ImageId = set(df_train.query( \"EncodedPixels == '-1' or EncodedPixels.isnull()\",  engine='python') [\"ImageId\"])\ndf_train[\"pneumothorax\"] = df_train[\"ImageId\"].map(lambda x: 0 if x  in not_pneumothorax_ImageId else 1)\n\n\ndf_train[\"rle_count\"] = df_train[\"ImageId\"].map(df_rle.groupby([\"ImageId\"]).size())\ndf_train[\"rle_count\"] = df_train[\"rle_count\"].fillna(-1)  \n\n## adding dicom metadata\ndf_train = df_train.merge(create_metadataset ( df_train ), on=\"ImageId\", how='left') \ndf_test = df_test.merge(create_metadataset ( df_test ), on=\"ImageId\", how='left')\n\n## removing dicom metadata with no variance\ndf_all = df_train.append(df_test, sort=False)\ncols = [ c for c in  df_all.columns if len(df_all[c].unique()) != 1]\ndf_train= df_train[cols]\ncols = [ c for c in  cols if c not in [\"EncodedPixels\", \"rle_count\", \"pneumothorax\"]]\ndf_test = df_test [cols]\n\ndf_train.to_csv(\"train.csv\",index=False)\ndf_test.to_csv(\"test.csv\",index=False)\n\ndf_sub[\"entries\"] = df_sub[\"ImageId\"].map( df_sub.groupby(['ImageId']).size() )\n\n\n\nprint ( \"train-rle: {}, unique ImageId: {}\".format(len(df_rle), len(df_rle[\"ImageId\"].unique()))) \nprint ( \"train: {}, unique ImageId: {}\".format(len(df_train), len(df_train[\"ImageId\"].unique()))) \nprint(\"train ImageId not in rle: {}\".format( \n    len( df_train.query ( \"EncodedPixels.isnull()\",  engine='python') )))\nprint(\"train ImageId with multiple rle: {}\".format( \n    len( df_train.query ( \"rle_count > 1\",  engine='python')[\"ImageId\"].unique() )))\n\nprint ( \"sample_submission: {}, unique ImageId: {}, ImegeId with multiple entries: {}\".format(\n    len(df_sub), \n    len(df_sub[\"ImageId\"].unique()), \n    len ( df_sub.query ( \"entries > 1\")[\"ImageId\"].unique() )\n    )) \n\nprint ( \"test: {}, unique ImageId: {}\".format(len(df_test), len(df_test[\"ImageId\"].unique())))\nprint(\"test ImageId not in sample_submission: {}\".format( \n    len( df_test [ ~ df_test[\"ImageId\"].isin(df_sub[\"ImageId\"])])))","da557171":"pneumothorax = df_train.query ( \"pneumothorax == 1 and rle_count == 1\",  engine='python').sample(n=5).reset_index()\n\nfig, axs = plt.subplots(2, 5, figsize=(30,10))\nfig.suptitle(\"samples with pneumothorax (train)\", fontsize=30)\nfor j, row in pneumothorax.iterrows():\n    img = extract_dcm_pixel_array (row['path'])\n    x = 0\n    y = j % 5\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].axis('off')\n    \n    rle_mask = rle2mask(row[\"EncodedPixels\"] , 1024, 1024).T\n    x = 1\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].imshow(rle_mask, alpha=0.5, cmap=\"Blues\")    \n    axs[x,y].axis('off')\n    \n    \n    \nfig.subplots_adjust(top=0.9)\n\n\nplt.show()","7ffae2e2":"images = df_train.query ( \"pneumothorax == 0\",  engine='python')[\"path\"].values\nnp.random.shuffle(images)\n\n\nfig, axs = plt.subplots(2, 5, figsize=(30,10))\nfig.suptitle(\"samples without pneumothorax (train)\", fontsize=30)\nfor j, path in enumerate(images[:10]):\n    img = extract_dcm_pixel_array (path)\n    x = j \/\/ 5\n    y = j % 5\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].axis('off')\nfig.subplots_adjust(top=0.9)\n\n\nplt.show()","d89aba0b":"images = df_train.query ( \"EncodedPixels.isnull()\",  engine='python')[\"path\"].values\nnp.random.shuffle(images)\n\n\nfig, axs = plt.subplots(2, 5, figsize=(30,10))\nfig.suptitle(\"samples without a mask in train-rle.csv (train)\", fontsize=30)\nfor j, path in enumerate(images[:10]):\n    img = extract_dcm_pixel_array (path)\n    x = j \/\/ 5\n    y = j % 5\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].axis('off')\nfig.subplots_adjust(top=0.9)\n\n\nplt.show()","c1549de8":"images = df_test [ ~ df_test[\"ImageId\"].isin(df_sub[\"ImageId\"])][\"path\"].values\nnp.random.shuffle(images)\n\n\nfig, axs = plt.subplots(1, 5, figsize=(30,10))\nfig.suptitle(\"not in sample submission (test)\", fontsize=30)\nfor j, path in enumerate(images[:5]):\n    img = extract_dcm_pixel_array (path)\n    y = j % 5\n    axs[y].imshow(img, cmap='bone')\n    axs[y].axis('off')\nfig.subplots_adjust(top=1.0)\n\n\nplt.show()","6ae63096":"train_data = df_train.drop([\"EncodedPixels\"],axis=1).drop_duplicates()\ntrain_data[\"dataset\"] = \"train\"\ntest_data = df_test\ntest_data[\"dataset\"] = \"test\"\nall_data = train_data.append(test_data, sort=False)\n\ng = sns.FacetGrid(all_data.query ( \"patient_age < 100\"  ), \n                  hue='dataset', row=\"patient_sex\", col='view_position',  margin_titles=True)\ng.map(sns.distplot, \"patient_age\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train and Test distribution\")\nplt.show()\n\n\n","4860e276":"pvt_train = train_data.groupby([\"view_position\", \"patient_sex\"]).agg({\"ImageId\":'count'}).reset_index().pivot(index=\"patient_sex\",columns=\"view_position\", values=\"ImageId\")\npvt_test = test_data.groupby([\"view_position\", \"patient_sex\"]).agg({\"ImageId\":'count'}).reset_index().pivot(index=\"patient_sex\",columns=\"view_position\", values=\"ImageId\")\n\nf, axes = plt.subplots(1, 2, figsize=(12, 6))\n\ng = sns.heatmap(pvt_train, annot=True, fmt=\"d\", linewidths=.5, ax=axes[0])\naxes[0].title.set_text(\"Train distribution\")\nsns.heatmap(pvt_test, annot=True, fmt=\"d\", linewidths=.5, ax=axes[1])\naxes[1].title.set_text(\"Test distribution\")\n\nplt.show()\n\n\n","4e1283ac":"g = sns.FacetGrid(train_data.query ( \"patient_age < 100\"  ), palette= {0:\"green\", 1:\"gray\"},\n                  hue='pneumothorax', row=\"patient_sex\", col='view_position',  margin_titles=True)\ng.map(sns.distplot, \"patient_age\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train distribution\")\nplt.show()\n","42180a53":"%%time\ntrain_data[\"mean_pixel_value\"] = train_data[\"path\"].map(lambda x : extract_dcm_pixel_array(x).mean() )\ntest_data[\"mean_pixel_value\"] = test_data[\"path\"].map(lambda x : extract_dcm_pixel_array(x).mean() )\n","86ecf2ef":"sns.distplot(train_data[\"mean_pixel_value\"], label=\"train\")\nsns.distplot(test_data[\"mean_pixel_value\"], label=\"test\")\nplt.legend()\nplt.show()","53976e57":"g = sns.FacetGrid(train_data,\n                  hue='pneumothorax', row=\"patient_sex\", col='view_position',  margin_titles=True)\ng.map(sns.distplot, \"mean_pixel_value\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train distribution\")\nplt.show()\n\n","3c083fbd":"high_means = train_data.query( \"mean_pixel_value > 140 and  mean_pixel_value < 170\" )[\"path\"].values\nnp.random.shuffle(high_means)\nlow_means = train_data.query( \"mean_pixel_value > 90 and  mean_pixel_value < 110\" )[\"path\"].values\nnp.random.shuffle(low_means)\n\nfig, axs = plt.subplots(2, 10, figsize=(20,5))\n\nfor j,path in enumerate(low_means[:10]):\n    img = extract_dcm_pixel_array (path)\n    axs[0,j].imshow(img, cmap='bone')\n    axs[0,j].axis('off')\n    axs[0,j].title.set_text(str(round(img.mean(),2)))\n\nfor j, path in enumerate(high_means[:10]):\n    img = extract_dcm_pixel_array (path)\n    axs[1,j].imshow(img, cmap='bone')\n    axs[1,j].axis('off')\n    axs[1,j].title.set_text(str(round(img.mean(),2)))\n\n\nplt.show()\n","e0571750":"train_data = train_data.sort_values(by=[\"mean_pixel_value\"])\n\nfig, axs = plt.subplots(2, 10, figsize=(20,5))\n\nfor j, path in enumerate ( train_data[\"path\"].values[:10] ):\n    img = extract_dcm_pixel_array (path)\n    axs[0,j].imshow(img, cmap='bone')\n    axs[0,j].axis('off')\n    axs[0,j].title.set_text(str(round(img.mean(),2)))\n\nfor j,path in enumerate(train_data[\"path\"].values[-10:] ):\n    img = extract_dcm_pixel_array (path)\n    axs[1,j].imshow(img, cmap='bone')\n    axs[1,j].axis('off')\n    axs[1,j].title.set_text(str(round(img.mean(),2)))\n\nplt.show()\n    \n","803f9d72":"# Rescaling intensities doesn't seem to solve the issue\nfig, axs = plt.subplots(2, 10, figsize=(20,5))\n\nfor j, path in enumerate ( train_data[\"path\"].values[:10] ):\n    img = extract_dcm_pixel_array (path)\n    img = exposure.rescale_intensity(img, in_range=tuple(np.percentile(img, (2, 98))))\n    axs[0,j].imshow(img, cmap='bone')\n    axs[0,j].axis('off')\n    axs[0,j].title.set_text(str(round(img.mean(),2)))\n\nfor j,path in enumerate(train_data[\"path\"].values[-10:] ):\n    img = extract_dcm_pixel_array (path)\n    img = exposure.rescale_intensity(img, in_range=tuple(np.percentile(img, (2, 98))))\n    axs[1,j].imshow(img, cmap='bone')\n    axs[1,j].axis('off')\n    axs[1,j].title.set_text(str(round(img.mean(),2)))\n\nplt.show()","945f3bbc":"# Histogram equalization!\nfig, axs = plt.subplots(2, 10, figsize=(20,5))\n\nfor j, path in enumerate ( train_data[\"path\"].values[:10] ):\n    img = extract_dcm_pixel_array (path)\n    img = exposure.equalize_hist(img)\n    axs[0,j].imshow(img, cmap='bone')\n    axs[0,j].axis('off')\n    axs[0,j].title.set_text(str(round(img.mean(),2)))\n\nfor j,path in enumerate(train_data[\"path\"].values[-10:] ):\n    img = extract_dcm_pixel_array (path)\n    img = exposure.equalize_hist(img)\n    axs[1,j].imshow(img, cmap='bone')\n    axs[1,j].axis('off')\n    axs[1,j].title.set_text(str(round(img.mean(),2)))\n\nplt.show()","2b32ff6c":"%%time\ntrain_data[\"eq_mean_pixel_value\"] = train_data[\"path\"].map(lambda x : exposure.equalize_hist(extract_dcm_pixel_array(x)).mean() )\ntest_data[\"eq_mean_pixel_value\"] = test_data[\"path\"].map(lambda x : exposure.equalize_hist(extract_dcm_pixel_array(x)).mean() )","04dc896e":"sns.distplot(train_data[\"eq_mean_pixel_value\"], label=\"eq_train\")\nsns.distplot(test_data[\"eq_mean_pixel_value\"], label=\"eq_test\")\nplt.legend()\nplt.show()","d34e0ac5":"multiple_masks = train_data.query ( \"rle_count > 1\",  engine='python').sort_values(by=\"rle_count\", ascending=False)\nmultiple_masks =  multiple_masks[[\"ImageId\",\"path\",\"rle_count\"]][:5]\n\nfor i, row in multiple_masks.iterrows():\n    path = row[\"path\"]\n    image_id = row[\"ImageId\"]\n    rle = df_train.query( \"ImageId == '\" + image_id + \"'\" )\n    \n    img = extract_dcm_pixel_array (path)\n    fig, ax = plt.subplots(1, 2, sharey=True, figsize=(20,10))\n    \n    #plt.set_title(image_id)\n    ax[0].imshow(img, cmap='bone')\n    ax[1].imshow(img, cmap='bone')\n\n    rle_count = row[\"rle_count\"]\n    \n    rle_mask = np.zeros ( (1024, 1024) )    \n    for i, row in rle.iterrows():\n        mask =  row[\"EncodedPixels\"] \n        rle_mask += rle2mask(mask, 1024, 1024).T \n\n    ax[1].imshow(rle_mask, alpha=0.5, cmap=\"Blues\")    \n\n    plt.axis('off')\n    plt.show()\n\n    ","6ae9ab3c":"# Train, Test and uniques ImageId\n\nThanks [@jeesper](https:\/\/www.kaggle.com\/jesperdramsch) for the [SIIM ACR Pneumothorax Segmentation Data](https:\/\/www.kaggle.com\/jesperdramsch\/siim-acr-pneumothorax-segmentation-data)\n\nForked from https:\/\/www.kaggle.com\/steubk\/first-steps-with-siim-acr-pneumothorax-data\/ to explore image histogram equalization","68f7431a":"### Extremes of the distribution","802fc7e2":"## X-Ray visualization\n","2fce6dbf":"#### Plot distribution again after histogram equalization ","21d7e78f":"# The bimodal mean_pixel_value distribution\nsee [@Giulia Savorgnan's](https:\/\/www.kaggle.com\/giuliasavorgnan) [discussion](https:\/\/www.kaggle.com\/c\/siim-acr-pneumothorax-segmentation\/discussion\/97525)","2cc3a322":"#### Extremes of the distribution: rescaling intensities","40050164":"A visual explanation here [https:\/\/www.youtube.com\/watch?v=0vZ9gVyWreo](https:\/\/www.youtube.com\/watch?v=0vZ9gVyWreo)","a4a7def9":"# Metadata distributions","819dda2b":"in train set there are 624 images with multiple masks\n(in sample_submission there are 78 images with multiple entries)","1e599de9":"# Images with multiple pneumothorax masks","5191936b":"#### Extremes of the distribution: histogram equalization","ee170b4b":"in test set there are 5 images not in sample_submission.csv","caf7c38e":"in train set there are 37 images without a mask in train-rle.csv"}}