{"cell_type":{"e30729ce":"code","8258dead":"code","1c6eb24a":"code","eeb9e20e":"code","d9463627":"code","f47709bc":"code","594ea5b8":"code","cbb9a915":"code","c9e4c179":"code","b00540ff":"code","5f6b0d6b":"code","4386b1b1":"code","399800b8":"code","ca657085":"code","ef69d1a2":"code","eb080190":"code","37fc1c88":"code","b5f24b3e":"code","939295c1":"markdown","ee9670e1":"markdown","217c351f":"markdown","4cb59ead":"markdown","2b596f2d":"markdown","df646794":"markdown","a3b13f98":"markdown","c7c40c4e":"markdown","abd7d0aa":"markdown","f47869b4":"markdown"},"source":{"e30729ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8258dead":"import pandas\nimport numpy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1c6eb24a":"data = pandas.read_csv(\"..\/input\/crop-production-in-india\/crop_production.csv\")\ndata.head(7)","eeb9e20e":"df = data.copy()\ndf.dropna(axis=0, inplace=True)\ndf.isna().sum()","d9463627":"df[\"Crop\"].value_counts()","f47709bc":"crop_count = df[\"Crop\"].value_counts()\ndf = df.loc[df[\"Crop\"].isin(crop_count.index[crop_count > 1500])]","594ea5b8":"Rice = df[(df[\"Crop\"] == \"Rice\")]\nRice[\"production\"] = Rice[\"Production\"]\/10000\nRice.head()","cbb9a915":"plt.figure(figsize=(14, 10))\nsns.regplot(Rice[\"Area\"], Rice[\"production\"])\nplt.show()","c9e4c179":"dt = Rice.copy()","b00540ff":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder, MinMaxScaler\nle = LabelEncoder()\nscaler = MinMaxScaler()\ndt[\"district\"] = le.fit_transform(dt[\"District_Name\"])\ndt['season'] = le.fit_transform(dt[\"Season\"])\ndt[\"area\"] = scaler.fit_transform(dt[[\"Area\"]])\ndt[\"state\"] = le.fit_transform(dt[\"State_Name\"])","5f6b0d6b":"X = dt[[\"area\", \"district\", \"season\", \"state\"]]\ny = dt[\"Production\"]","4386b1b1":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, AdaBoostRegressor\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVR","399800b8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\nprint(model.score(X_test, y_test))","ca657085":"wheat = data[data[\"Crop\"] == \"Wheat\"]","ef69d1a2":"wheat1 = wheat.copy()\nwheat1['prod'] = wheat[\"Production\"]\/1000\nwheat1[\"area\"] = wheat[\"Area\"]\/1000\nwheat1.dropna(inplace=True)","eb080190":"wheat1[\"season\"] = le.fit_transform(wheat1[\"Season\"])\nwheat1[\"dist\"] = le.fit_transform(wheat1[\"District_Name\"])\nwheat1[\"state\"] = le.fit_transform(wheat1[\"State_Name\"])","37fc1c88":"X = wheat1[[\"area\", \"season\", \"dist\", \"state\"]]\ny = wheat1['prod']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)","b5f24b3e":"model = RandomForestRegressor(n_estimators=100)\nmodel.fit(X_train, y_train)\nprint(model.score(X_test, y_test))","939295c1":"# Seperating rice (\ud83c\udf5a) from other crops ","ee9670e1":"# Wheat ","217c351f":"*Any sugesions in the comments below*","4cb59ead":"***It's very inaccurate to predict production for different crops.\nBut it's very precise to prdict production for a single crop.***","2b596f2d":"# Preprocessing and splitting labels and targets","df646794":"# Model building and scoring","a3b13f98":"**Data Loading :**","c7c40c4e":"*If you like this notebook, upvote it.*","abd7d0aa":"# Importing Necessary Tools","f47869b4":"**Regression plot :**"}}