{"cell_type":{"fbfbb509":"code","518d4cae":"code","66c7435e":"code","aa85f756":"code","64c79f87":"code","742e587b":"code","83bb235f":"code","2c07cfcc":"code","5d88ae7c":"code","78167d02":"code","fab3f540":"code","f7064f13":"code","56a83938":"code","24f1fcf6":"code","b63ff7f3":"code","71ce580f":"code","c4d388bb":"code","ff5c043b":"code","d78efabe":"code","859b7567":"code","7e342d17":"code","3588e241":"code","eec085e3":"code","89b05613":"code","03abff57":"code","b08c89fd":"code","5d1a2995":"code","7fe88a3d":"code","094e3d08":"code","f117eaf2":"code","d35e08f4":"code","d29ae443":"code","d6b805c1":"code","b0b71ca3":"code","186854b8":"code","b8152089":"code","9ea934d3":"code","7bae5b6b":"code","e48e13fb":"code","c61c4b89":"code","b637864b":"code","7f77f79e":"code","c0a42387":"code","937e8790":"code","c8e1ece9":"code","16d3fbef":"code","df56d626":"code","313ff940":"markdown"},"source":{"fbfbb509":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","518d4cae":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")\ndf.head()","66c7435e":"for i in range(10):\n    print(df.text[i])","aa85f756":"import re\nimport unicodedata\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nstop_words = stopwords.words('english')\n\n# Converts the unicode file to ascii\ndef unicode_to_ascii(s):\n    return ''.join(c for c in unicodedata.normalize('NFD', s)\n        if unicodedata.category(c) != 'Mn')\n\ndef preprocess_sentence(w):\n    w = unicode_to_ascii(w.lower().strip())\n    # creating a space between a word and the punctuation following it\n    # eg: \"he is a boy.\" => \"he is a boy .\"\n    w = re.sub(r\"([?.!,\u00bf])\", '', w)\n    w = re.sub(r'[\" \"]+', \" \", w)\n    # replacing everything with space except (a-z, A-Z, \".\", \"?\", \"!\", \",\")\n    w = re.sub(r\"[^a-zA-Z?.!]+\", \" \", w)\n    w = re.sub(r'\\b\\w{0,2}\\b', '', w)\n\n    # remove stopword\n    mots = word_tokenize(w.strip())\n    mots = [mot for mot in mots if mot not in stop_words]\n    return ' '.join(mots).strip()\n\ndf.text= df.text.apply(lambda x :preprocess_sentence(x))\ndf.head()","64c79f87":"for i in range(10):\n    print(df.text[i])","742e587b":"df.info()","83bb235f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x=\"target\", data=df, palette = \"husl\");","2c07cfcc":"df.keyword.unique()","5d88ae7c":"df[(df.target == 1) & (df.keyword == 'panic')]","78167d02":"df[(df.target == 0) & (df.keyword == 'panic')]","fab3f540":"myDFtest = df[(df.target == 1) & (df.keyword == 'panic')]\nmyDFtest.text","f7064f13":"for i in ([5370,5374,5387]):\n    print(myDFtest.text[i])","56a83938":"df[(df.target == 1) & (df.keyword == 'fire')]","24f1fcf6":"df[(df.target == 0) & (df.keyword == 'fire')]","b63ff7f3":"len(df.location.unique()) # l'ensemble des valeurs uniques possibles repr\u00e9sente une trop grande proportion des donn\u00e9es pour que\n# cela repr\u00e9sente un int\u00e9r\u00eat de garder cette feature","71ce580f":"df = df.drop(['location', 'id'], axis=1)\n# en fait on n'enl\u00e8ve pas les Na parce qu'il y en a dans le jeu de donn\u00e9es test sur lequel se fait l'\u00e9valuation\n# df = df.dropna(axis = 0, how = 'any', subset = [\"keyword\"])\ndf.info()","c4d388bb":"#dummies = pd.get_dummies(df.keyword)\n#df = df.join(dummies)\n# df = df.drop(['keyword'], axis=1)\n#df.head()","ff5c043b":"from gensim.models import Word2Vec\n\n# defining the model by initializing a Word2Vec object\nw2v_model = Word2Vec(min_count=20, # fr\u00e9quence du mot dans tous les tweets\n                     window=2, # distance maximale entre le mot actuel et le mot pr\u00e9dit dans une phrase\n                     vector_size = 100, # taille de l'embedding\n                     alpha=0.03, \n                     negative=10, # 10 mots de bruit doivent \u00eatre noy\u00e9s\n                     seed=1)","d78efabe":"# building the voc from a sequence of sentences\nsentences = [str(line).split() for line in df['text']]\nw2v_model.build_vocab(sentences, progress_per=10000)\n#words = w2v_model.wv.key_to_index\nwords = list(w2v_model.wv.key_to_index)\n\nprint('Vocabulary size: %d' % len(words))\nprint(words)","859b7567":"# training the model\nw2v_model.train(sentences, total_examples=w2v_model.corpus_count,\n                epochs=30)","7e342d17":"# finding the vector for one word\nx = w2v_model.wv['earthquake']\nprint('Shape of one vector: ', x.shape, '\\n')\n#print(x [:15])\nx","3588e241":"print('Similarity between \\'smoke\\' and \\'fire\\': ', w2v_model.wv.similarity(\"smoke\", \"fire\"))\nprint('Similarity between \\'smoke\\' and \\'boy\\': ', w2v_model.wv.similarity(\"smoke\", \"boy\"))","eec085e3":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler\n\n# creating an array of vectors of each word in the vocubulary\nZ = w2v_model.wv[w2v_model.wv.key_to_index]\n\n# scaling each feature\nscaler = MinMaxScaler()\nZ_scaled = scaler.fit_transform(Z)\n\n# performing a PCA\npca = PCA(n_components=2)\nresult = pca.fit_transform(Z_scaled)\n\n# print the shape of the result\nprint('Shape of the array result :', result.shape)","89b05613":"# Generate a scatter plot of the top-n words positively or negatively related \n# to a specific word\ndef PCA_results(word, relation = 'positive', n = 10):\n    # get the most similar words\n    if relation =='positive':\n        related_words = w2v_model.wv.most_similar(positive=[word], topn=n)\n    else: \n        related_words = w2v_model.wv.most_similar(negative=[word], topn=n)\n    # keep only the words in the list\n    related_words = [w for (w, i) in related_words]\n    # find their index in word\n    index_related_words = [words.index(w) for w in related_words]\n    # filter PCA results for the related words\n    PCA_related_words = result[index_related_words]\n    \n    # generate a scatter plot\n    color = 'blue' if relation =='positive' else 'green' # color\n    plt.scatter(PCA_related_words[:,0], PCA_related_words[:,1], color = color, label=relation)\n    \n    # add the words annotations in the graphs\n    for i in range (n):\n        plt.annotate(related_words[i], xy=(PCA_related_words[i, 0], PCA_related_words[i, 1]))\n\n# Generate a scatter plot of a word \n# and its top-n positively or negatively related words\ndef visualize(word, n=5):\n    \n    plt.figure(figsize=(15,7))\n    \n    # plot related words in the scatterplot\n    PCA_results(word, relation = 'positive', n = n)\n    PCA_results(word, relation = 'negative', n = n)\n    \n    # add the word in red in the graph\n    index_word = words.index(word)\n    plt.scatter(result[index_word,0],result[index_word,1], color = 'red', label='word')\n    plt.annotate(word, xy=(result[index_word, 0], result[index_word, 1]))\n    \n    plt.xlabel('PC1')\n    plt.ylabel('PC2')\n    plt.legend()\n\n    plt.show();","03abff57":"visualize('earthquake', n=10)","b08c89fd":"visualize('fire', n=720)","5d1a2995":"from sklearn.model_selection import train_test_split\nX_text_train, X_text_test, y_train, y_test = train_test_split(df.text, df.target, test_size=0.2, random_state=1234)","7fe88a3d":"import tensorflow as tf\n# D\u00e9finition du tokenizer\ntokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=10000)\n# Mettre \u00e0 jour le dictionnaire du tokenizer\ntokenizer.fit_on_texts(X_text_train)","094e3d08":"# D\u00e9finition des dictionnaires\nword2idx = tokenizer.word_index\nidx2word = tokenizer.index_word\nvocab_size = tokenizer.num_words","f117eaf2":"vocab_size # note: toute \u00e0 l'heure via word2vec on avait 722 parce qu'on avait choisi une freq min de 20 mais si par ex on avait choisi 1 on aurait plus de 20 000 mots de vocab","d35e08f4":"X_train = tokenizer.texts_to_sequences(X_text_train)\nX_test = tokenizer.texts_to_sequences(X_text_test)","d29ae443":"maxlen = 500\nX_train = tf.keras.preprocessing.sequence.pad_sequences(X_train, maxlen=maxlen, padding='post')\nX_test = tf.keras.preprocessing.sequence.pad_sequences(X_test, maxlen=maxlen, padding='post')","d6b805c1":"X_train","b0b71ca3":"X_train.shape","186854b8":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Embedding, Dense, GlobalAveragePooling1D, Dropout\n\nembedding_dim = 300\nmodel = Sequential()\nmodel.add(Embedding(10000, embedding_dim))\nmodel.add(GlobalAveragePooling1D())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(2, activation='softmax'))\nmodel.summary()","b8152089":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train,\n    batch_size = 32,\n    epochs = 20,\n    validation_data = [X_test, y_test])","9ea934d3":"model.evaluate(X_test, y_test)","7bae5b6b":"pred = model.predict(X_test)\ny_pred = pred.argmax(axis=1)\nconfusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Classe r\u00e9elle'], colnames=['Classe pr\u00e9dite'])\nconfusion_matrix","e48e13fb":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Embedding, Dense, GlobalAveragePooling1D, RNN, GRUCell, Dropout\nembedding_dim = 200\n\nmodel = Sequential()\nmodel.add(Embedding(10000, embedding_dim))\nmodel.add(RNN(GRUCell(128), return_sequences=True))\nmodel.add(Dropout(0.3))\nmodel.add(GlobalAveragePooling1D())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.summary()","c61c4b89":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n\n#history = model.fit(X_train, y_train.values, batch_size = 64, epochs=10, validation_data = [X_test, y_test.values])","b637864b":"model.evaluate(X_test, y_test.values, batch_size=128)","7f77f79e":"pred = model.predict(X_test)\ny_pred = pred.argmax(axis=1)\ny_pred","c0a42387":"confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Classe r\u00e9elle'], colnames=['Classe pr\u00e9dite'], normalize=True)\nconfusion_matrix","937e8790":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\n\n# Split data in train and validate dataset.\ndf_train, df_test, y_train, y_test = train_test_split(df.drop(['target', 'keyword'], axis=1), df.target, test_size=0.2, random_state=1234)\n# Stopword\nstopWords = set(stopwords.words('english'))\n# Bag of words\nvectorizer = CountVectorizer(stop_words=stopWords, max_features=5000)\nX_train_text = vectorizer.fit_transform(df_train.text)\nX_test_text = vectorizer.transform(df_test.text)","c8e1ece9":"from sklearn.naive_bayes import BernoulliNB\nber = BernoulliNB()\nber.fit(X_train_text, y_train)\nber.score(X_test_text, y_test)","16d3fbef":"y_pred = ber.predict(X_test_text)\nconfusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Classe r\u00e9elle'], colnames=['Classe pr\u00e9dite'], normalize=True)\nconfusion_matrix","df56d626":"confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Classe r\u00e9elle'], colnames=['Classe pr\u00e9dite'])\nconfusion_matrix","313ff940":"Afin de construire notre mod\u00e8le Word2Vec, nous utiliserons le package gensim de Python, qui est une biblioth\u00e8que tr\u00e8s populaire pour le traitement du langage naturel. La documentation est disponible ici.\n\nLe processus de construction et de formation d'un mod\u00e8le se d\u00e9roule en 3 \u00e9tapes:\n\n1. D\u00e9finition du mod\u00e8le \u00e0 l'aide du constructeur Word2Vec:\n\n    model = Word2Vec(window=5, min_count=5, size=100, sg=0, sample=0.001, negative=5)\n\n    Cette \u00e9tape n\u00e9cessite de d\u00e9finir un certain nombre de param\u00e8tres, dont:\n\n        window: la distance maximale entre le mot actuel et le mot pr\u00e9dit dans une phrase. La valeur par d\u00e9faut est 5.\n        min_count : la fr\u00e9quence minimale des mots \u00e0 prendre en compte. La valeur par d\u00e9faut est 5.\n        size: la dimension de l'embedding. La valeur par d\u00e9faut est 100. -sg: 1 pour l'algorithme skip-gram; autrement CBOW.\n        sample: le seuil pour configurer quels mots de fr\u00e9quence plus \u00e9lev\u00e9e sont sous-\u00e9chantillonn\u00e9s de mani\u00e8re al\u00e9atoire. La valeur par d\u00e9faut est 0.001\n        negative: la variable qui contr\u00f4le l'\u00e9chantillonnage n\u00e9gatif. Si> 0, il sp\u00e9cifie combien de \"mots de bruit\" doivent \u00eatre noy\u00e9s. S'il est d\u00e9fini sur 0, aucun \u00e9chantillonnage n\u00e9gatif n'est utilis\u00e9. La valeur par d\u00e9faut est 5."}}