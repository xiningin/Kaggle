{"cell_type":{"ce822c3a":"code","a561d590":"code","45bfa524":"code","cd77f6cd":"code","997c3e0b":"code","d05e4e36":"code","22e9fd4c":"code","ac74c1a3":"code","9398c18d":"code","88e74680":"code","06f9219a":"code","ccd892e7":"code","4df1db27":"code","f14b7e30":"code","6a7e2b70":"code","bf5e313f":"code","bbfcc931":"code","67b294ba":"code","eff2f38a":"code","06e8493d":"code","190ae0bf":"code","834b58e2":"code","956f6680":"code","d3b691a8":"code","295cb081":"code","e4aa5872":"code","28659d59":"code","812269b9":"code","81a0745f":"code","95660cf7":"code","1e8fd5bd":"code","4c8e47da":"code","6c2b7b61":"code","255aa2cf":"code","b05503b4":"code","de7d21e6":"code","023c5079":"code","4978ede1":"code","d53f2a29":"code","1a2bdd69":"code","135c33ea":"code","fcaf06ce":"code","9b8c5fd8":"code","9afe8571":"code","a3e13849":"code","7d482884":"code","e9cb0639":"code","737acf9c":"code","d1871ad8":"code","30764c3a":"code","87a596aa":"code","ac13e63d":"code","695481f5":"code","e832b349":"code","d5387463":"code","c893e940":"code","cbaed1fb":"markdown","ea3e2426":"markdown","92b32623":"markdown","91f0d66f":"markdown","5d23add8":"markdown","37aca282":"markdown","c765f783":"markdown","8725d933":"markdown","c91b7e0d":"markdown","c6758294":"markdown","736682e8":"markdown","6e449d93":"markdown","707e0864":"markdown","b1b32dd2":"markdown","6bc5b974":"markdown","1ea1a0ab":"markdown","cfc84046":"markdown","00863cb2":"markdown","715946e8":"markdown","82dade8e":"markdown","aa93b2b3":"markdown","f115c101":"markdown","31e7c60b":"markdown","ab8cc6c3":"markdown","0c24dbda":"markdown","83605fce":"markdown","438e0523":"markdown","9001315d":"markdown","915a7355":"markdown","c1e54b8b":"markdown","0c9c8272":"markdown","aff4df81":"markdown","0833eb3e":"markdown","f2453d10":"markdown","746de23e":"markdown","9a1af1d2":"markdown","02909899":"markdown"},"source":{"ce822c3a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sklearn\nimport seaborn as sns\nimport os\nimport tensorflow as tf\n!pip install -q tensorflow_decision_forests\nimport tensorflow_decision_forests as tfdf\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split, StratifiedKFold","a561d590":" class Config:\n    is_kaggle_platform = os.path.exists(\"\/kaggle\/input\")\n    dataset_name = \"titanic\"\n    data_path = \"\/kaggle\/input\/%s\/\"%(dataset_name) if is_kaggle_platform else \"\"\n    submit_filename = \"submission.csv\"\nconfig = Config()","45bfa524":"if not config.is_kaggle_platform:\n  try:\n    import kaggle\n  except:\n    !pip install kaggle\n  if not os.path.exists(\"\/root\/.kaggle\/kaggle.json\"):\n    !echo \"{\\\"username\\\":\\\"{Uour username}\\\",\\\"key\\\":\\\"{Your APIKey}\\\"}\" >> \/root\/.kaggle\/kaggle.json\n    !chmod 600 \/root\/.kaggle\/kaggle.json\n  !kaggle competitions download -c $config.dataset_name","cd77f6cd":"train = pd.read_csv(config.data_path + \"train.csv\")\ntest = pd.read_csv(config.data_path + \"test.csv\")","997c3e0b":"train.head()","d05e4e36":"test.head()","22e9fd4c":"train.isnull().sum()","ac74c1a3":"test.isnull().sum()","9398c18d":"embark_label = train[\"Embarked\"].mode()[0]\ntrain[\"Cabin\"] = train[\"Cabin\"].replace(np.NAN,  \"Unknown\")\ntrain[\"Embarked\"] = train[\"Embarked\"].replace(np.NAN, embark_label)\n#train[\"Age\"] = train[\"Age\"].replace(np.NAN, train[\"Age\"].median())\ntest[\"Cabin\"] = test[\"Cabin\"].replace(np.NAN, \"Unknown\")\n#test[\"Age\"] = test[\"Age\"].replace(np.NAN, test[\"Age\"].median())\n#test[\"Fare\"] = test[\"Fare\"].replace(np.NAN, test[\"Fare\"].median())","88e74680":"cabin_labels = sorted(set(list(train[\"Cabin\"].unique()) + list(test[\"Cabin\"].unique())))\nprint(cabin_labels[:30])","06f9219a":"train[\"Cabin_type\"] = train[\"Cabin\"].apply(lambda cabin: cabin[0])\ntest[\"Cabin_type\"] = test[\"Cabin\"].apply(lambda cabin: cabin[0])","ccd892e7":"train[\"family_member_size\"] = 1 + train[\"SibSp\"] + train[\"Parch\"]\ntest[\"family_member_size\"] = 1 + test[\"SibSp\"] + test[\"Parch\"]","4df1db27":"def convert_faimly_member_size(size):\n    if size == 1:\n        return \"single\"\n    elif size < 5:\n        return \"medium\"\n    else:\n        return \"large\"\nshould_add_family_member_type = False\nif should_add_family_member_type:\n    for data in [train, test]:\n        data[\"family_member_type\"] = train[\"family_member_size\"].apply(convert_faimly_member_size)","f14b7e30":"categorical_features = [\"Sex\", \"Cabin_type\", \"Embarked\"]\nif should_add_family_member_type:\n    categorical_features.append(\"family_member_type\")\ncategorical_label_dictionary = dict()\nfor feature in categorical_features:\n    unique_labels = sorted(set(list(train[feature].unique()) + list(test[feature].unique())))\n    for data in [train, test]:\n        categorical_label_dictionary[feature] = unique_labels\n        data[feature + \"_value\"] = data[feature].apply(lambda item: unique_labels.index(item))","6a7e2b70":"train.head(10)","bf5e313f":"train.info()","bbfcc931":"train.describe()","67b294ba":"train.corr()[\"Survived\"].sort_values(key=lambda x: abs(x), ascending=False)","eff2f38a":"related_columns = list(train.corr()[train.corr()[\"Survived\"].abs() > 0.05].index)\nrelated_columns.remove(\"Survived\")\nprint(related_columns)","06e8493d":"sns.countplot(x=\"Sex\", hue=\"Survived\", data=train)\nplt.title(\"Survival of different Gender\")\nplt.show()","190ae0bf":"sns.histplot(x=\"Age\", hue=\"Survived\", data=train)\nplt.title(\"Survival of different Age\")\nplt.show()","834b58e2":"train.groupby(\"Pclass\")[\"Survived\"].mean()","956f6680":"sns.countplot(x=\"Pclass\", hue=\"Survived\", data=train)\nplt.title(\"Survival of different Pclass\")\nplt.show()","d3b691a8":"plt.figure(figsize=(15, 7))\nsns.histplot(x=\"Fare\", hue=\"Survived\", bins=20, kde=True, data=train)\nplt.title(\"Survival of different Fare\")\nplt.show()","295cb081":"train.groupby(\"Cabin_type\")[\"Survived\"].mean()","e4aa5872":"sns.countplot(x=\"Cabin_type\", hue=\"Survived\", data=train)\nplt.title(\"Survival of different Cabin\")\nplt.show()","28659d59":"train.groupby(\"Embarked\")[\"Survived\"].mean()","812269b9":"sns.countplot(x=\"Embarked\", hue=\"Survived\", data=train)\nplt.title(\"Survival of different Embarked\")\nplt.show()","81a0745f":"train.groupby(\"SibSp\")[\"Survived\"].mean()","95660cf7":"sns.countplot(x=\"SibSp\", hue=\"Survived\", data=train)\nplt.title(\"Survival of different SibSp\")\nplt.show()","1e8fd5bd":"train.groupby(\"Parch\")[\"Survived\"].mean()","4c8e47da":"sns.countplot(x=\"Parch\", hue=\"Survived\", data=train)\nplt.title(\"Survival of different SibSp\")\nplt.show()","6c2b7b61":"sns.countplot(x=\"family_member_size\", hue=\"Survived\", data=train)\nplt.title(\"Survival of Family Member Size\")\nplt.show()","255aa2cf":"if should_add_family_member_type:\n    sns.countplot(x=\"family_member_type\", hue=\"Survived\", data=train)\n    plt.title(\"Survival of Family Member Type\")\n    plt.show()","b05503b4":"train_test = pd.concat([train, test])\ntrain_test.head()","de7d21e6":"categorical_columns_to_one_hot = [\"Sex\", \"Cabin_type\", \"Embarked\"]\nif should_add_family_member_type:\n    categorical_columns_to_one_hot.append(\"family_member_type\")\nfor feature in categorical_columns_to_one_hot:\n    items = pd.get_dummies(train_test[feature + \"_value\"])\n    labels = categorical_label_dictionary[feature]\n    items.columns = [feature + \"_\" + labels[column] for column in list(items.columns)]\n    train_test[items.columns] = items\n    train_test.pop(feature + \"_value\")","023c5079":"p_class_df = pd.get_dummies(train_test[\"Pclass\"])\np_class_df.columns = [\"Pclass%d\" % (column) for column in p_class_df.columns]\np_class_df.head()","4978ede1":"train_test = pd.concat([train_test, p_class_df], axis=1)","d53f2a29":"train_test.pop(\"Pclass\")","1a2bdd69":"mean_value = train_test.mean()\nstd_value = train_test.std()\nmean_value.pop(\"Survived\")\n_ = std_value.pop(\"Survived\")","135c33ea":"train_test.head()","fcaf06ce":"for column in [\"Name\", \"Sex\", \"Ticket\", \"Cabin\", \"Cabin_type\", \"Embarked\", \"family_member_size\", \"family_member_type\"]:\n    if column in train_test.columns:\n        train_test.pop(column)","9b8c5fd8":"train_features = train_test.iloc[0: len(train)]\ntest_features = train_test.iloc[len(train):]","9afe8571":"test_features.head()","a3e13849":"train_features.pop(\"PassengerId\")\ntest_features.pop(\"Survived\")\ntrain_features.head()","7d482884":"test_features.head()","e9cb0639":"data_scaling_strategies = [\"none\", \"max\", \"standard\"]\ndata_scaling_strategy = data_scaling_strategies[2]\nif data_scaling_strategy == data_scaling_strategies[1]:\n    features_max = pd.concat([train_features, validation_features]).max()\n    train_features = train_features \/ features_max\n    test_features[train_features.columns] = test_features[train_features.columns] \/ features_max\nif data_scaling_strategy == data_scaling_strategies[2]:\n    for data in [train_features, test_features]:\n        columns_to_scale = [\"Age\", \"Fare\"]\n        data.loc[:, columns_to_scale] = (data.loc[:, columns_to_scale]  - mean_value[columns_to_scale]) \/ std_value[columns_to_scale]\nprint(train_features.shape)\nprint(test_features.shape)","737acf9c":"train_features = train_features.astype(\"float64\")\ntest_features = test_features.astype(\"float64\")","d1871ad8":"test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test_features)","30764c3a":"models = []\nthresold = 0.80","87a596aa":"kfold = StratifiedKFold(n_splits=5, shuffle=True)\nfor index, (train_indices, valid_indices) in enumerate(kfold.split(train_features, train_features[\"Survived\"])):\n    train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_features.iloc[train_indices], label=\"Survived\").shuffle(len(train_features))\n    valid_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_features.iloc[valid_indices], label=\"Survived\")\n    model = tfdf.keras.RandomForestModel(num_trees=100)\n    model.compile(metrics=[\"accuracy\"])\n    history = model.fit(train_ds, validation_data=valid_ds)\n    if history.history[\"val_accuracy\"][0] > thresold:\n        models.append(model)","ac13e63d":"kfold = StratifiedKFold(n_splits=5, shuffle=True)\nfor index, (train_indices, valid_indices) in enumerate(kfold.split(train_features, train_features[\"Survived\"])):\n    train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_features.iloc[train_indices], label=\"Survived\").shuffle(len(train_features))\n    valid_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_features.iloc[valid_indices], label=\"Survived\")\n    model = tfdf.keras.GradientBoostedTreesModel(num_trees=100)\n    model.compile(metrics=[\"accuracy\"])\n    history = model.fit(train_ds, validation_data=valid_ds)\n    if history.history[\"val_accuracy\"][0] > thresold:\n        models.append(model)","695481f5":"kfold = StratifiedKFold(n_splits=5, shuffle=True)\nfor index, (train_indices, valid_indices) in enumerate(kfold.split(train_features, train_features[\"Survived\"])):\n    train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_features.iloc[train_indices], label=\"Survived\").shuffle(len(train_features))\n    valid_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_features.iloc[valid_indices], label=\"Survived\")\n    model = tfdf.keras.CartModel()\n    model.compile(metrics=[\"accuracy\"])\n    history = model.fit(train_ds, validation_data=valid_ds)\n    if history.history[\"val_accuracy\"][0] > thresold:\n        models.append(model)","e832b349":"tfdf.model_plotter.plot_model_in_colab(models[0])","d5387463":"y_pred_array = []\nfor model in models:\n    y_pred_array.append(model.predict(test_ds))\ny_pred_array = np.array(y_pred_array).mean(axis=0)\ny_pred_array.shape","c893e940":"y_pred = np.array(y_pred_array > 0.5, dtype=int).reshape(-1)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred\n})\nsubmission.to_csv(\"submission.csv\", index=False)\nif not config.is_kaggle_platform:\n  !kaggle competitions submit $config.dataset_name -m \"Submission\" -f $config.submit_filename","cbaed1fb":"Let's see the Cabin labels, there are so many of them. But I make an assmption that the First Alphabet matters, it indicated the location and class of the Passengers so it had an impact to survive.","ea3e2426":"### Add family member size and faimily member type Column","92b32623":"# TF-DF Titanic Prediction\n## Table of Contents\n- Summary\n- Import Packages\n- Import datasets\n- Data Wrangling\n- Data Preprocessing\n    - Add Cabin type Column\n    - Add family member size and faimily member type Column\n    - Handle Categorical Features\n- Exploratory Data Analysis\n    - Basic Statistic infos\n    - What's the factor to survive?\n        - Survival of different Gender\n        - Survival of different Age\n        - Survival of different Pclass\n        - Survival of different Fare\n        - Survival of different Cabin\n        - Survival of different Embarked\n        - Survival of different SibSp (Number of siblings or spouses)\n        - Survival of different Parch (Number of parents or children)\n        - Survival of different family member size\n- More Data Preprocessing\n    - Convert Categorical features to one hot features\n    - Train Validation Split\n    - Feature Scaling\n- Model Development\n    - Using RandomForestModel\n    - Using GradientBoostedTreeModel\n    - Using CartModel\n- Submission\n\n## Summary\n\nIn this Notebook I will use TensorFlow Decidision Forest to create a Titanic Predictior.","91f0d66f":"## Data Preprocessing","5d23add8":"After converting family member size to categorical feature, the relation between family member size and survival rate were more obvious.","37aca282":"### Basic Statistic infos","c765f783":"### Using GradientBoostedTreesModel","8725d933":"#### Survival of different Pclass\n- Passengers from Pclass 1 had 62% Survival Rate;\n- Passengers from Pclass 2 had 47% Survival Rate;\n- Passengers from Pclass 3 had 24% Survival Rate;","c91b7e0d":"## Exploratory Data Analysis","c6758294":"Let's see after we preprocess, what does the data look like?","736682e8":"#### Survival of different Fare\nMost of the tickets were less than 100 pounds. Only about 1 \/ 5 with fare around 10 pounds survived.","6e449d93":"## Data Wrangling","707e0864":"#### Survival of different Cabin\n- More than half Passengers from Cabin started with C, D, E, F, G survived;\n- Less than half Passengers from Cabin started with A,B survived;\n- 30% of Passengers with unknown Cabin survived;\n- Almost no Passengers from Cabin started with T survived.","b1b32dd2":"## Feature Scaling","6bc5b974":"## Model Development\nI am going to use following models for model development:\n- RandomForestModel\n- GradientBoostedTreesModel\n- CartModel\n\nI will apply K-Fold to each of them. I will use models that performs well on validation dataset (validation accuracy exceed a certain thresold like 83%) to make prediction on test dataset, finally I will use average value of their final results to make submission.","1ea1a0ab":"### Convert Categorical features to one hot features","cfc84046":"#### Survival of different Embarked\n- About 1 \/ 3 passengers from Embarked Q, S survived;\n- About half passengers from Embarked C survived;","00863cb2":"#### Survival of different Parch (Number of parents or children)\n- Passengers without parents or children had 1 \/ 3 survival rate.\n- Passengers with 1 - 3 parents or children had 1 \/ 2 survival rate.\n- Passengers with more than 4 parents or children were less likely to survive.\n","715946e8":"Calucate mean and std value for future use.","82dade8e":"#### Survival of different Gender\nWomen have a higher Survival rate than Men.","aa93b2b3":"### What's the factor to survive?\nAs we can see it's related to Gender, PClass, Status, Fare, Cabin and Embarked. ","f115c101":"We can indicate family member size by SibSp and Parch feature: ","31e7c60b":"## Configuration","ab8cc6c3":"## Submission","0c24dbda":"### Using Cart Model","83605fce":"#### Survival of different Age\n","438e0523":"### Using RandomForestModel","9001315d":"#### Survival of different SibSp (Number of siblings or spouse)\n- Passengers without siblings or spouse had 1 \/ 3 Survival Rate.\n- Passengers with one or two siblings or spouse had about 1 \/ 2 Survival Rate.\n- Passengers with more than two siblings or spouse were less likely to survive.","915a7355":"### Remove unused columns","c1e54b8b":"### Handle Categorical Features","0c9c8272":"## More data Preprocessing","aff4df81":"## Import Packages","0833eb3e":"## Import datasets","f2453d10":"According to the EDA below, Family member size had a impact on Survival, but it was not a linear relationship, that was why it had a low pearson correlation score. So I will convert it to a categorical feature with single(1 family member), medium(2-4 family members), large(more than 4 members). I will add a Feature Toggle here to control whether to use this function","746de23e":"#### Survival of different family member size\n- Those who were alone (1 family member size) had 1 \/ 3 Survival Rate.\n- Those who had 2 - 4 family member size had more than 1 \/ 2 Survival Rate.\n- Those who had 5 - 11 family member size were less likely to survive.","9a1af1d2":"### Add Cabin type Column","02909899":"As we can see Age, Cabin and Fare information contains missing values, so we need to apply Missing Value  Imputation to them. The most common way is to replace categorical missing values with most fequent category and repalce numerical missing values with average value of that feature."}}