{"cell_type":{"dabd28ac":"code","6d2cff40":"code","e141b185":"code","b6dcb838":"code","7473d5f8":"code","0d5d0e20":"code","a329043e":"code","f468c242":"code","56526244":"code","0d3cd05a":"code","e4988e04":"code","cb5930dd":"code","b6c6c126":"code","6f648803":"code","dcd0b186":"code","626857b3":"code","a56b3795":"code","5b609899":"code","16d334c1":"code","6203419a":"code","2a9c755b":"code","c387d114":"code","6a8b75f4":"code","8747eb4e":"code","8adb0ad4":"code","218447f0":"code","dc7cbef9":"code","0b703ac3":"code","798822cc":"code","9381e629":"code","bce3196e":"code","81f7b1ac":"code","287ff65b":"code","149ebbb5":"code","53faa9e9":"code","331760a9":"markdown","a74cd348":"markdown","95962041":"markdown","7c740b56":"markdown","9f11a070":"markdown","0353bfaa":"markdown","d2a7f2c0":"markdown","b64ea817":"markdown","fa2bb393":"markdown","d891a9a3":"markdown","b2b89048":"markdown","5c0b6574":"markdown","6861bde1":"markdown","df37a993":"markdown","4226300b":"markdown","36fb9f2b":"markdown"},"source":{"dabd28ac":"#pip install plotly","6d2cff40":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e141b185":"# Load data that we will use.\ntimesData = pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")","b6dcb838":"timesData.shape","7473d5f8":"timesData.head()","0d5d0e20":"timesData.info()","a329043e":"timesData.isna().sum()","f468c242":"timesData.student_staff_ratio.value_counts()","56526244":"timesData.info()","0d3cd05a":"# prepare data frame\ndf = timesData.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","e4988e04":"df2014 = timesData[timesData.year == 2014].iloc[:100,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]","cb5930dd":"fig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=df2014['world_rank'], y=df2014['citations'],\n                    mode='markers',\n                    name='2014',\n                    text= df2014.university_name))\nfig.add_trace(go.Scatter(x=df2015['world_rank'], y=df2015['citations'],\n                    mode='markers',\n                    name='2015',\n                    text= df2015.university_name))\nfig.add_trace(go.Scatter(x=df2016['world_rank'], y=df2016['citations'],\n                    mode='markers',\n                    name='2016',\n                    text= df2016.university_name))\n# Add title\nfig.update_layout(\n    title=\"Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years\",\n    xaxis_title=\"World Rank\",\n    yaxis_title=\"Citation\")\n\n\nfig.show()","b6c6c126":"df2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","6f648803":"fig = go.Figure(data=[\n    go.Bar(name='Citations', x=df2014.university_name, y=df2014.citations,text = df2014.country),\n    go.Bar(name='Teaching', x=df2014.university_name, y=df2014.teaching,text = df2014.country)\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","dcd0b186":"fig = go.Figure(data=[\n    go.Bar(name='Citations', x=df2014.university_name, y=df2014.citations),\n    go.Bar(name='Teaching', x=df2014.university_name, y=df2014.teaching)\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\n\n# Change the title\nfig.update_layout(\n    title=\"Citations and teaching of top 3 universities in 2014\",\n    xaxis_title=\"Top 3 universities\")\n\nfig.show()","626857b3":"df2016 = timesData[timesData.year == 2016].iloc[:7,:]\ndf2016","a56b3795":"labels = df2016.university_name\nvalues = [float(i.replace(',','.')) for i in df2016.num_students]","5b609899":"# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","16d334c1":"# pull is given as a fraction of the pie radius\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0, 0, 0.2, 0])])\nfig.show()","6203419a":"df2016 = timesData[timesData.year == 2016].iloc[:20,:]\ndf2016","2a9c755b":"df2016.info()","c387d114":"# data preparation\ndf2016['world_rank'] = df2016['world_rank'].astype(float)\ndf2016['teaching'] = df2016['teaching'].astype(float)\ndf2016['international'] = df2016['international'].astype(float)\ndf2016['num_students'] = [float(i.replace(',','.')) for i in df2016.num_students]","6a8b75f4":"fig = go.Figure(data=[go.Scatter(\n    x=df2016['world_rank'],\n    y=df2016['teaching'],\n    text=df2016.university_name,\n    mode='markers',\n    marker=dict(\n        color=df2016['international'],\n        size=df2016['num_students'],\n        showscale=True))])\n\nfig.show()","8747eb4e":"# data preparation\ndf2011 = timesData[timesData.year == 2011]\ndf2012 = timesData[timesData.year == 2012]","8adb0ad4":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df2011.student_staff_ratio,name='2011'))\nfig.add_trace(go.Histogram(x=df2012.student_staff_ratio,name='2012'))\n\n# Overlay both histograms\nfig.update_layout(barmode='overlay')\n\nfig.update_layout(\n    title_text='Students-staff ratio in 2011 and 2012', # title of plot\n    xaxis_title_text='Student-staff ratio', # xaxis label\n    yaxis_title_text='Count') # yaxis label\n    \n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()","218447f0":"# data prepararion\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","dc7cbef9":"# data preparation\nx2015 = timesData[timesData.year == 2015]","0b703ac3":"fig = go.Figure()\nfig.add_trace(go.Box(y=x2015.total_score, name='Total score of universities in 2015',\n                marker_color = 'indianred'))\nfig.add_trace(go.Box(y=x2015.research, name = 'Research of universities in 2015',\n                marker_color = 'lightseagreen'))\n\nfig.show()","798822cc":"# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015.index = np.arange(1, len(data2015)+1)\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)","9381e629":"data2015","bce3196e":"# import figure factory\nimport plotly.figure_factory as ff\n\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","81f7b1ac":"import plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.teaching,\n    name = \"teaching\")\n\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\")\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2'),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2'),    \n    title = 'Income and Teaching vs World Rank of Universities')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","287ff65b":"dataframe","149ebbb5":"import plotly.express as px\n\nfig = px.scatter_3d(dataframe, x=dataframe.world_rank,\n                        y=dataframe.research,\n                        z=dataframe.citations)\nfig.show()","53faa9e9":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Initialize figure with subplots\nfig = make_subplots(rows=2, cols=2, start_cell=\"bottom-left\")\n\n# Initialize figure with subplots\nfig = make_subplots(\n    rows=2, cols=2, subplot_titles=(\"research\", \"citations\", \"income\", \"total_score\")\n)\n\n\n# Add traces\nfig.add_trace(go.Scatter(x=dataframe.world_rank, y=dataframe.research,name='research'), row=1, col=1)\nfig.add_trace(go.Scatter(x=dataframe.world_rank, y=dataframe.citations,name='citations'), row=1, col=2)\nfig.add_trace(go.Scatter(x=dataframe.world_rank, y=dataframe.income,name='income'), row=2, col=1)\nfig.add_trace(go.Scatter(x=dataframe.world_rank, y=dataframe.total_score,name='total_score'), row=2, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"research\", row=1, col=1)\nfig.update_yaxes(title_text=\"citations\", row=1, col=2)\nfig.update_yaxes(title_text=\"income\", row=2, col=1)\nfig.update_yaxes(title_text=\"total_score\", row=2, col=2)\n\n# Update title and height\nfig.update_layout(title_text=\"Research, citation, income and total score VS World Rank of Universities\", height=700)\n\n\nfig.show()","331760a9":"<a id=\"11\"><\/a> <br>\n# Inset Plots\n<font color='red'>\nInset Matrix = 2 plots are in one frame\n<font color='black'>","a74cd348":"<a id=\"5\"><\/a> <br>\n# Pie Charts\n<font color='red'>\nPie Charts Example: Students rate of top 7 universities in 2016\n<font color='black'>\n* fig: create figures\n    * data: plot type\n        * values: values of plot\n        * labels: labels of plot\n        * name: name of plots\n        * hoverinfo: information in hover\n        * hole: hole width\n        * type: plot type like pie\n    * layout: layout of plot\n        * title: title of layout\n        * annotations: font, showarrow, text, x, y","95962041":" <a id=\"13\"><\/a> <br>\n# Multiple Subplots\n<font color='red'>\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<font color='black'>\n\n","7c740b56":"<font color='red'>\nSecond Pie Charts Example: Students rate of top 7 universities in 2016 (style2)\n","9f11a070":"<a id=\"6\"><\/a> <br>\n# Bubble Charts\n<font color='red'>\nBubble Charts Example: University world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016\n<font color='black'>\n* x = x axis\n* y = y axis\n* mode = markers(scatter)\n*  marker = marker properties\n    * color = third dimension of plot. Internaltional score\n    * size = fourth dimension of plot. Number of students\n* text: university names","0353bfaa":"<a id=\"1\"><\/a> <br>\n# Loading Data and Explanation of Features\n<font color='red'>\n* timesData includes 14 features that are:\n    <font color='black'>\n    * world_rank             \n    * university_name       \n    * country               \n    * teaching                \n    * international            \n    * research                 \n    * citations                \n    * income                   \n    * total_score              \n    * num_students             \n    * student_staff_ratio      \n    * international_students   \n    * female_male_ratio        \n    * year ","d2a7f2c0":"> <a id=\"9\"><\/a> <br>\n# Box Plots\n<font color='red'>\n* Box Plots\n    * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.\n        \n    <font color='black'>\n    * trace = box\n        * y = data we want to visualize with box plot \n        * marker = color","b64ea817":"<a id=\"10\"><\/a> <br>\n# Scatter Matrix Plots\n<font color='red'>\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n<font color='black'>\n* import figure factory as ff\n* create_scatterplotmatrix = creates scatter plot\n    * data2015 = prepared data. It includes research, international and total scores with index from 1 to 401\n    * colormap = color map of scatter plot\n    * colormap_type = color type of scatter plot\n    * height and weight","fa2bb393":"<a id=\"8\"><\/a> <br>\n# Word Cloud\nNot a pyplot but learning it is good for visualization. Lets look at which country is mentioned most in 2011.\n* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the country name list(x2011) a word cloud","d891a9a3":"<a id=\"7\"><\/a> <br>\n# Histogram\n<font color='red'>\nLets look at histogram of students-staff ratio in 2011 and 2012 years. \n    <font color='black'>\n* trace1 = first histogram\n    * x = x axis\n    * y = y axis\n    * opacity = opacity of histogram\n    * name = name of legend\n    * marker = color of histogram\n* trace2 = second histogram\n* layout = layout \n    * barmode = mode of histogram like overlay. Also you can change it with *stack*","b2b89048":"# INTRODUCTION\n* In this kernel, we will learn how to use plotly library.\n    * Plotly library: The plotly Python library (plotly.py) is an interactive, open-source plotting library that supports over 40 unique chart types covering a wide range of statistical, financial, geographic, scientific, and 3-dimensional use-cases.\n\n<br>Content:\n1. [Loading Data and Explanation of Features](#1)\n1. [Line Charts](#2)\n1. [Scatter Charts](#3)\n1. [Bar Charts](#4)\n1. [Pie Charts](#5)\n1. [Bubble Charts](#6)\n1. [Histogram](#7)\n1. [Word Cloud](#8)\n1. [Box Plot](#9)\n1. [Scatter Plot Matrix](#10)\n\n1. [Inset Plots](#11)\n1. [3D Scatter Plot with Colorscaling](#12)\n1. [Multiple Subplots](#13)\n\n\nSource: [DATAI Team](https:\/\/www.kaggle.com\/kanncaa1)","5c0b6574":"<font color='red'>\nSecond Bar Charts Example: citations and teaching of top 3 universities in 2014 (style2)\n<br> Actually, if you change only the barmode from *group* to *relative* in previous example, you achieve what we did here. However, for diversity I use different syntaxes. \n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * name = name of the plots\n    * type = type of plot like bar plot\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * xaxis = label of x axis\n    * barmode = bar mode of bars like grouped( previous example) or relative\n    * title = title of layout\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","6861bde1":"<a id=\"3\"><\/a> <br>\n# Scatter\n<font color='red'>\nScatter Example: Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","df37a993":"<a id=\"2\"><\/a> <br>\n# Line Charts\n<font color='red'>\nLine Charts Example: Citation and Teaching vs World Rank of Top 100 Universities\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","4226300b":"<a id=\"12\"><\/a> <br>\n# 3D Scatter Plot with Colorscaling\n<font color='red'>\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<font color='black'>\n* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale:  actually it is 4th dimension","36fb9f2b":"<a id=\"4\"><\/a> <br>\n# Bar Charts\n<font color='red'>\nFirst Bar Charts Example: citations and teaching of top 3 universities in 2014 (style1)\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout"}}