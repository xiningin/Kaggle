{"cell_type":{"5253cd02":"code","661f618b":"code","daaec645":"code","5253bf8b":"code","d3ee7165":"code","90371257":"code","39d3589b":"code","055e675d":"code","9b6e257e":"code","87c9a16c":"code","16d9e426":"code","1c87996c":"code","daf25d11":"code","5afa9009":"code","171bdef7":"markdown","5eaab86a":"markdown","15f06c9c":"markdown"},"source":{"5253cd02":"import os\nimport sys\nimport pickle\nfrom random import randint,seed\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image, ImageFilter\nimport seaborn as sns\nsns.set(style='white')\nfrom ipywidgets import IntSlider\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, mean_squared_error, log_loss, confusion_matrix\nimport matplotlib.pyplot as plt\nnp.seterr(all='ignore')\n# np.random.seed(100)\n# threshold=50\nBCH=2  #batch size for visualisation\nLEVEL = 'level_3'","661f618b":"class SigmoidNeuron:\n  \n  def __init__(self):\n    self.w = None\n    self.b = None\n    \n  def perceptron(self, x):\n    return np.dot(x, self.w.T) + self.b\n  \n  def sigmoid(self, x):\n    return 1.0\/(1.0 + np.exp(-x))\n  \n  def grad_w_mse(self, x, y):\n    y_pred = self.sigmoid(self.perceptron(x))\n    return (y_pred - y) * y_pred * (1 - y_pred) * x\n  \n  def grad_b_mse(self, x, y):\n    y_pred = self.sigmoid(self.perceptron(x))\n    return (y_pred - y) * y_pred * (1 - y_pred)\n  \n  def grad_w_ce(self, x, y):\n    y_pred = self.sigmoid(self.perceptron(x))\n    if y == 0:\n      return y_pred * x\n    elif y == 1:\n      return -1 * (1 - y_pred) * x\n    else:\n      raise ValueError(\"y should be 0 or 1\")\n    \n  def grad_b_ce(self, x, y):\n    y_pred = self.sigmoid(self.perceptron(x))\n    if y == 0:\n      return y_pred \n    elif y == 1:\n      return -1 * (1 - y_pred)\n    else:\n      raise ValueError(\"y should be 0 or 1\")\n  \n  def fit(self, X, Y, epochs=1, learning_rate=1, initialise=True, loss_fn=\"mse\", display_loss=False):\n    \n    # initialise w, b\n    if initialise:\n      self.w = np.random.randn(1, X.shape[1])\n      self.b = 0\n      \n    if display_loss:\n      loss = {}\n    \n    for i in tqdm_notebook(range(epochs), total=epochs, unit=\"epoch\"):\n      dw = 0\n      db = 0\n      for x, y in zip(X, Y):\n        if loss_fn == \"mse\":\n          dw += self.grad_w_mse(x, y)\n          db += self.grad_b_mse(x, y) \n        elif loss_fn == \"ce\":\n          dw += self.grad_w_ce(x, y)\n          db += self.grad_b_ce(x, y)\n      self.w -= learning_rate * dw\n      self.b -= learning_rate * db\n      \n      if display_loss:\n        Y_pred = self.sigmoid(self.perceptron(X))\n        if loss_fn == \"mse\":\n          loss[i] = mean_squared_error(Y, Y_pred)\n        elif loss_fn == \"ce\":\n          loss[i] = log_loss(Y, Y_pred)\n    \n    if display_loss:\n      plt.plot(loss.values())\n      plt.xlabel('Epochs')\n      if loss_fn == \"mse\":\n        plt.ylabel('Mean Squared Error')\n      elif loss_fn == \"ce\":\n        plt.ylabel('Log Loss')\n      plt.show()\n      \n  def predict(self, X):\n    Y_pred = []\n    for x in X:\n      y_pred = self.sigmoid(self.perceptron(x))\n      Y_pred.append(y_pred)\n    return np.array(Y_pred)","daaec645":"seed(10)\nfor i in range(BCH):\n    image_folder = ['background','hi', 'ta', 'en']\n    path= '..\/input\/level_3_train\/level_3\/'\n    def path_fun(folder_name):\n        full_path= path+folder_name+'\/'\n        image_name_list=os.listdir(full_path)\n        return full_path+image_name_list[randint(0,len(image_name_list))]\n    fig,ax= plt.subplots(8,18,figsize=(15,10))\n    c=0\n    # import pdb; pdb.set_trace()\n    for level in range(0,8,2):\n\n        for col in range(18):\n    #         if level==2 and col==4:\n    #             print(path_fun(image_folder[c]))\n            ax[level,col].set_yticklabels([])\n            ax[level,col].set_xticklabels([])\n            nis=Image.open(path_fun(image_folder[c])).convert('L')\n            ax[level,col].imshow(nis)\n\n    #         nis=nis.filter(ImageFilter.UnsharpMask(2,10,10))  \n    \n            my_data= np.array(nis)\n            my_data=np.where(my_data>10,255,my_data)  \n            \n            #Since most of the images have \n            #dark texts,thus selecting all those pixels that are greater than 10 intensity and \n            #replacing them with white does filter most of the background noise. However, this \n            #would also filter out many blurred texts. Also, many such images where black pixels\n            #are randomly spread will still stay.\n            \n            filtered_image=Image.fromarray(my_data)\n            ax[1+level,col].set_yticklabels([])\n            ax[1+level,col].set_xticklabels([])\n            ax[1+level,col].imshow(filtered_image)\n        c+=1\n\n","5253bf8b":"def read_all(folder_path, key_prefix=\"\"):\n    '''\n    It returns a dictionary with 'file names' as keys and 'flattened image arrays' as values.\n    '''\n    print(\"Reading:\")\n    images = {}\n    files = os.listdir(folder_path)\n    for i, file_name in tqdm_notebook(enumerate(files), total=len(files)):\n        file_path = os.path.join(folder_path, file_name)\n        image_index = key_prefix + file_name[:-4]\n        image = Image.open(file_path)\n        image = image.convert(\"L\")\n        \n\n#         image=image.filter(ImageFilter.UnsharpMask(2,10,10))\n \n\n        my_data= np.array(image)\n        my_data=np.where(my_data>10,255,my_data)\n        image = Image.fromarray(my_data)\n        \n        images[image_index] = np.array(image.copy()).flatten()\n        image.close()\n    return images","d3ee7165":"\n# nis0=Image.open('..\/input\/level_2_train\/level_2\/background\/100_d2.jpg').convert('L')\n\n# nis1=Image.open('..\/input\/level_2_train\/level_2\/hi\/c0_84.jpg').convert('L')\n\n# # nis1=nis1.filter(ImageFilter.UnsharpMask(2,10,10))\n\n# # my_data= np.array(nis0)\n    \n# # my_data=np.where(my_data>45,255,my_data)\n\n# # Image.fromarray(my_data)\n# plt.imshow(nis1)","90371257":"languages = ['ta', 'hi', 'en']\n\nimages_train = read_all(\"..\/input\/level_3_train\/\"+LEVEL+\"\/\"+\"background\", key_prefix='bgr_') # change the path\nfor language in languages:\n    images_train.update(read_all(\"..\/input\/level_3_train\/\"+LEVEL+\"\/\"+language, key_prefix=language+\"_\" ))\nprint(len(images_train))\n\nimages_test = read_all(\"..\/input\/level_3_test\/kaggle_\"+LEVEL, key_prefix='') # change the path\nprint(len(images_test))\n","39d3589b":"list(images_test.keys())[:5]","055e675d":"X_train = []\nY_train = []\nfor key, value in images_train.items():\n    X_train.append(value)\n    if key[:4] == \"bgr_\":\n        Y_train.append(0)\n    else:\n        Y_train.append(1)\n\nID_test = []\nX_test = []\nfor key, value in images_test.items():\n  ID_test.append(int(key))\n  X_test.append(value)\n  \n        \nX_train = np.array(X_train)\nY_train = np.array(Y_train)\nX_test = np.array(X_test)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape)","9b6e257e":"scaler = StandardScaler()\nX_scaled_train = scaler.fit_transform(X_train)\nX_scaled_test = scaler.transform(X_test)","87c9a16c":"# sn_mse = SigmoidNeuron()\n# sn_mse.fit(X_scaled_train, Y_train, epochs=500, learning_rate=0.0015, loss_fn=\"mse\", display_loss=True)","16d9e426":"sn_ce = SigmoidNeuron()\nsn_ce.fit(X_scaled_train, Y_train, epochs=300, learning_rate=0.07, loss_fn=\"ce\", display_loss=True)","1c87996c":"def print_accuracy(sn):\n  Y_pred_train = sn.predict(X_scaled_train)\n  Y_pred_binarised_train = (Y_pred_train >= 0.5).astype(\"int\").ravel()\n  accuracy_train = accuracy_score(Y_pred_binarised_train, Y_train)\n  sns.heatmap(confusion_matrix(Y_pred_binarised_train,Y_train),annot=True)\n  print(\"Train Accuracy : \", accuracy_train)\n  print(\"-\"*50)","daf25d11":"# print_accuracy(sn_mse)\nprint_accuracy(sn_ce)","5afa9009":"Y_pred_test = sn_ce.predict(X_scaled_test)\nY_pred_binarised_test = (Y_pred_test >= 0.5).astype(\"int\").ravel()\n\nsubmission = {}\nsubmission['ImageId'] = ID_test\nsubmission['Class'] = Y_pred_binarised_test\n\nsubmission = pd.DataFrame(submission)\nsubmission = submission[['ImageId', 'Class']]\nsubmission = submission.sort_values(['ImageId'])\nsubmission.to_csv(\"submisision.csv\", index=False)","171bdef7":"# Some Image Processing Steps:","5eaab86a":"Choosing a set of random image and plotting them. First row would be `greyscaled image`, followed by the `transformed image` for every folder. 2 such batches are created. ","15f06c9c":"## Sample Submission"}}