{"cell_type":{"849f09c9":"code","408f3e35":"code","77eca225":"code","56e91e19":"code","6ffd65ef":"code","40cf541e":"code","515196f4":"code","d299cae9":"code","a2142f46":"code","de3137a5":"code","fadfd213":"code","6223af98":"code","132cfc83":"code","b26cf18e":"code","cab2c3f0":"code","dde736f6":"code","32237cb9":"code","9605be0f":"code","1a7b484f":"code","e187a61e":"code","a64c275e":"code","40997e59":"code","4104a9d0":"code","edd8db5b":"code","e98b4914":"code","8b66dcbb":"code","e253fbb8":"markdown","2ae3dba7":"markdown","9793ea98":"markdown","29b3d32d":"markdown","80b25d22":"markdown","7bc1b9b2":"markdown","09944597":"markdown","8f4ee4cf":"markdown","62f41a90":"markdown","13f3453d":"markdown","b35f0f04":"markdown"},"source":{"849f09c9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')","408f3e35":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","77eca225":"df.info()","56e91e19":"df.describe()","6ffd65ef":"col = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\nfor i in col:\n    df[i] = df[i].apply(lambda x: np.NaN if x==0 else x)\ndf.head()","40cf541e":"print('Missing Values')\ndf.isna().sum()","515196f4":"df.drop(['Insulin', 'SkinThickness'], axis=1, inplace=True)\ndf.head()","d299cae9":"cols = ['BMI', 'Glucose', 'BloodPressure']\nfor i in cols:\n    df.fillna(df[i].mean(), inplace=True)","a2142f46":"df.isna().sum()\n","de3137a5":"df.corr()","fadfd213":"sns.set_palette('magma')\nx = np.triu(df.corr())\nplt.figure(figsize=(15,7))\nsns.heatmap(df.corr(), mask = x, annot=True, center=0)","6223af98":"df.columns","132cfc83":"colors = sns.color_palette('tab10')\ncols = list(df.columns)\ncols.remove('Outcome')\nfig, axs = plt.subplots(nrows=2, ncols=len(cols),figsize=(20, 10))\nfor i,col in enumerate(cols):\n    sns.boxplot(data=df, x=col, ax = axs[0,i], color=colors[i])\n    sns.histplot(data=df, x=col, ax=axs[1,i], multiple='dodge', color=colors[i], kde=True)\n","b26cf18e":"uv = df['Pregnancies'].quantile(0.99)\ndf['Pregnancies'][df.Pregnancies>uv] = uv","cab2c3f0":"uv = df.BloodPressure.quantile(0.98)\nlv = df.BloodPressure.quantile(0.01)\ndf['BloodPressure'][df.BloodPressure>uv] = uv\ndf['BloodPressure'][df.BloodPressure<lv] = lv","dde736f6":"uv = df.BMI.quantile(0.97)\ndf.BMI[df.BMI>uv] = uv\n","32237cb9":"uv = df.DiabetesPedigreeFunction.quantile(0.96)\ndf.DiabetesPedigreeFunction[df.DiabetesPedigreeFunction > uv] = uv","9605be0f":"colors = sns.color_palette('Set3')\nsns.set_style('white')\ncols = list(df.columns)\ncols.remove('Outcome')\n\nfig, axs = plt.subplots(nrows=2, ncols=len(cols), figsize=(20, 10))\nfor i, col in enumerate(cols):\n    sns.boxplot(data=df, x=col, ax=axs[0, i], color=colors[i])\n    sns.histplot(data=df, x=col, ax=axs[1, i], color=colors[i], kde=True)\n","1a7b484f":"sns.set_palette('Set2')\nsns.set_style('whitegrid')\nfig, axs = plt.subplots(nrows=6, figsize=(15, 25))\nfor i, col in enumerate(cols):\n    sns.histplot(data=df, x=col, hue='Outcome', ax=axs[i], multiple='dodge')\nfig.tight_layout()\n","e187a61e":"sns.set_palette('Set3')\nsns.set_style('dark')\nsns.pairplot(df, hue = 'Outcome')","a64c275e":"from sklearn.model_selection import train_test_split\ncols = list(df.columns)\ncols.remove('Outcome')\nX = df[cols]\ny = df['Outcome']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)","40997e59":"from sklearn.metrics import classification_report, plot_confusion_matrix\nsns.set_style('white')\nsns.set_palette('tab10')\ndef model_accuracy(model, X_train, X_test, y_train, y_test):\n    model.fit(X_train, y_train)\n    pred = model.predict(X_test)\n    print(classification_report(y_test,pred))\n    plot_confusion_matrix(model, X_train, y_train)\n","4104a9d0":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nmodel1 = LogisticRegression(max_iter=180)\nmodel_accuracy(model1, X_train, X_test, y_train, y_test)","edd8db5b":"from sklearn.ensemble import RandomForestClassifier\nmodel2 = RandomForestClassifier(random_state=2)\nmodel2.fit(X_train, y_train)\nmodel_accuracy(model2, X_train, X_test, y_train, y_test)\n","e98b4914":"from sklearn.naive_bayes import GaussianNB\nmodel3 = GaussianNB()\nmodel3.fit(X_train, y_train)\nmodel_accuracy(model3, X_train, X_test, y_train, y_test)\n","8b66dcbb":"def diabetes_prediction(model):\n    preg = int(input('No. of pregnancies: '))\n    glu = int(input('Plasma glucose concentration a 2 hours in an oral glucose tolerance test: '))\n    b_pres = int(input('Diastolic blood pressure (mm Hg): '))\n    bmi = float(input('Body mass index (weight in kg\/(height in m)^2): ')) \n    pedi = float(input('Diabetes Pedigree Function: '))\n    age = int(input('Age: '))\n    \n    values = [[preg,glu,b_pres,bmi,pedi, age]]\n    pred = model.predict(values)\n    print('\\nPrediction: ')\n    for i in pred:\n        if i==0:\n            print('Not Diabetic')\n        elif i==1:\n            print('Diabetic')\n            \nRand_forest = RandomForestClassifier()\nRand_forest.fit(X,y)\n#diabetes_prediction(Rand_forest)","e253fbb8":"## Random Forest","2ae3dba7":"# Model Selection","9793ea98":"# Diabetes Classification ","29b3d32d":"# Handling Outliers","80b25d22":"# Model building and predictions","7bc1b9b2":"## Gaussian Naive Bayes","09944597":"# Handling Missing Values","8f4ee4cf":"## Logistic Regression","62f41a90":"# The Data","13f3453d":"<img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBQUFBgUFRQZGRgaGBgYGBoYGBgYGRgZGBgZGhkZGRgbIC0kGx0pIBgYJTclKS4wNDQ0GiM5PzkyPi0yNDABCwsLEA8QHRISHjIpJCQyMjIwMjIyMjIyMjI7MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMv\/AABEIAKMBNgMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAFAAIDBAYBBwj\/xAA+EAACAQIEAwYEAwYGAgMBAAABAhEAAwQSITEFQVEGEyJhcYEykaGxFELBI3LR4fDxBxVSYoKSM8IkU6IW\/8QAGgEAAgMBAQAAAAAAAAAAAAAAAAECAwQFBv\/EAC0RAAIBAwMCBQMEAwAAAAAAAAABAgMEERIhMTJBBRNRYXEigZEUocHRM0Kx\/9oADAMBAAIRAxEAPwDENaK0+3fdfhYiPOtNieGg7af1zoPieHkco+38q5sqcobnp6VxTqrD5H4bj95D8U+tFcN2tIEOutZt7ZGhFNyUo3El3JTsaU+Uem8O7R2LiAFwDGxqe3dtvOVgfQ15XkqS3fuJ8Lke9Xxu\/VGOp4Sv9Wep\/hxEimWbJDVgsJ2lvW4B8QFaLh3axGYZhFXwrxkYKtjWhyso2KinqapYfitpxowq8hB2NXJmOUWuUT2zUuaokFNvXgo3pkCLGXoqol8nQ1HdfMa4ulMAhm0qzh6GrdnSiNloFRGSutNg04XBXcwpiGBzT1u0oFcKUASrdp4eq2WnoKAFiXgGgVx5NE+I3IWgytQBKDXap4ziFu0he4wCiBPmdAB1J6UCx3bWzbUtlfQqIZWQkEiSuZRJA1gUAaoU17iruQPeuKs\/mn0oF\/8AzNy5duPfuM1vMGtqHYDJvke0BlMEbySaADaX1YSpzDqNqG8YxV62oNq1nJnTOiR7tvVrg3DLdtXa22ZbrC4IACwUULAA2gAydTOtX2w88hSAxfCMVi7l9heDKmQMFyEDNJUoXJgnZvD9Oega1IggQd+dSXsMFu2yW0YOmXaWjOpHmAj\/ADq13tsRHN+7no8xBnbXT3FIZlsL2YtW3D20YsqsEzO5UAzplJjL5UV4Jhl7lGRAisisEAjLIkrA2IJM+c1YxHEQozGAFxC2X1kjOVCsI657Z9GPrQ84spmRSzNbxigiT4kvMrmQN1Vb5Ov\/ANflNABS7btiAzCWMKCQMxgmAOZgHTyoa8d9YuWx4e8u4dzBWCQSZB3h7KgH\/dpvNcvpcDPbChf\/AJKX7RMnMgNtro0mGJa6ADHLlrXbOGFxWMtD3UvALpkdMkqDEEZkOvPMfWgCR+JEBGbKsYlrNwbkLLqjKdIJPdt5Bj61VF+42SMzPbxVwH8ge0S6gHkwRXQ+qDnT\/wDKGceKFLEl5h8zABQ8RAYhV1G22u9X7HCxmzlmmSdCVWSPF4V0MkltZ1NAGf4pw+09vub9xVti\/ddSYXKxZjkJaZnOxEDUL8+VrrWDTWF3MmIEmAJPXQAe1KjAZBDWarXcKDyo62HqJsPQ0Wxm0ZPE8LB2Hsdv5UHxGAKnT5fw61vnw3lVO\/ggdxWSpbKW8dmdS38QlHaW6MGVjeu5a0mL4V5T9\/50IvYNl21H9bisE4Si90dqjWhVWzKJt00JFWQPaky1XrNGgkwuKKkT9N61fAeJs5y+IdOYj9DWXw2FLct9q13Z\/BgSw2Gk9TzNararOU1FPbucrxCjSjByxuHBiH61wknc09ErpSusebaGKKdFKK7QROoYNXVvrG9UaaaACYcHnTgaDM5Gxpox7L50CDmc05btBrXFgd1NXLeLQ84oAIrcqUGqSODzFVuK8Yt2LbO7gQOtAGT7d9pms3BaQCSJknKNPMAn5VY7O2rr2w91kfNDLkzQARsWbVvWBXm\/GuIrfuG6zEktAUDQL616N2B4ihwVsPoVfuBIJ8RPgB6TI35mhgFsbwpb9s23XMpg6SCCpkEMCCCCNxVb8KLdy1YZc1t0cAuSxz28hVSWJzShczv4DV69xYIGOXRMQlh5IBU3CgVoHL9pbPo1DeIYkklmEvhsXaiBvbuKgZh1i3fcHzU0sDNAhVABoOQ\/gKrXseggzMuLXMgOTAU9NYHuOtB8RnK3suoTE2r1liZBVTaa4k8tVvL5BhUGdbnewxKXMRZfw6lGUWsrLE+HPaUzpuxmgRaweN7m3kgRbxC4ZhPwI7qto7D8ty17E770r\/E2Aubk2sTbRgPzWn7ss3oqXWPqlQWsHcuFma2QLjftQ5USUQKjpBbmiRIBiCdoq5b4QxOa5cLEoVZQFywRBgxPv\/agMlDiN5kDjRR+Jt3LTMRGUd01xSfyye+UTvmFOu2S6OwZmW5iLV0AAqyFDaiDB0z2wxMbFqNJgLYCgqGyxlzawQInXnBOvnU4QCmBn7vC3fPooL3A7FiSGhEAOQc1yKBqPhmrK8FByl3YlUyGDGYAyMx3Ma8+ZoxFcpAVxhV0OUSBAMageR9hTmWKmimutGQKbzT8NsR5\/pXbiV2yINLIyZDr7UqRFKlkCwbNMNir2SlkqQA1sPUT4WixSmm1SGmAbuDobiuHTy9xWsNmonwwNQlBSWGXU60oPKZ57jOGeXuP1FCnwzK0Hbr5V6NieH8xQXHcJL\/CPWudXtcJuP4O7aeJ5ajP8g3huDLARu2g8hzNbLC4QIoUbAVzhfDggBjWIHkKKJbrTaUNEcvlnOv7zzZYXCIUtVxrVWwldZK2HNbBjpTIoi9qq72qYisRTSKmcAb1Ez9AT9B9aAIXSah\/DjcmnYi3cYrDqqicwyyT0hjt8qQs\/wC467kx94pARl15a+n8qaEY7LVtAF0CyeppPcPn9qAMj2sN63Zz27hQ27igwd1fw\/dkPtWMvk3FLXLjMQyyCd1MEn6n5V6XxXh\/fApl8LiGEkadZ6\/wqPszwQ4e0Fa2heWm4FBZhmJWT5TFNPBFnnnDeG3Lyulm0Xa2wYnQZfIliN8rCtt2Z4Xc\/DuWdAt02b9oLLFXQo6sdhuiaetHsBwBLdy5cWQ105n10Jknb1J+dFcNgVQAAAAaAAbU2wwAAjXke4ttpum27K\/gVioVQSJDCAqydD4BpVn\/ACm4857iglkbMiZSMsgrDMwggxO+pPSD4txXctRGDMLwpLasmrKxJYOS0yII15abVbSwq6AAegip8tLLTAjiuVJlppWgBhrhqQrUbuBzpANroFU24gskBHMbkjIPm0T7TVFOMPctd5bCq2ZkYEM+VkYqy6RJkaexoAOha4y0J4Wb5zG4zGYjMoWN9lXSPUzRAWCdzSA5cioZjWrS4UVL+G00FGBlNXkUqnVORpUYALZaWWnxSimIZlrmWpIpRQMiyVw26millpAVmsiq6YLWaI5aWWgeSDu6cEqXLXYoEMC0mgCTUgFcZaYFZnn4VJ8z4R9dfpUT2mO7eyiPqau93XSlAgb+FHT9T86Rs0QZKYUoAoGzUZsDpRBkqMpQBT7nyp64YVZyV0LQBAmHXpUotipFWn5aAIwldy029iET43VdtyOZgfOquH4xYuCbdwOIDZhOUhtobY+lAFvLXCtU8XjXCzbUEyPiDERInYbxNCsZj73eWStzwPcey+XJ4XKkpJgkEMmQid38qANAwiqOI4jaQkFpYQMqgs0nlAqq+LgEw0LiEw7zAKFyiq+kypz2zy0edIiq2MdgLpO9nEWkcagPYfu2Lak6hbjaiNbZpgXMBxlLyhratlIkFhl5kFcu8giDpvpTcZjSF0cKS6oCIPjYgBNdiTprG9Dn4e1tcTbtprbv28TaCgksjFbjoOsut9Y6OKuYrgzt+KRSALjW71tj8K3kCiSBqADZtN\/yNAAPHs5uLczuVS8ti8rO0DvQgUhAYgG5abNMxPKat4vHOiXjAU2LlvP0awQjO46HIz+6UbxHBbbm9mY5byIrAaFWQMM6t\/qgpy07sVZOCt5nbICXVUeRIZVzQpU6EeNuXOlgDJY\/BuTiVAd3ttaxFoCZZNCbQA0aWtXVjo4o5w7hxt3LxCgI5R18nyZLgy8hCIfVjRPEsVUlRmYAkLIXMeQk6CguDuY2+gfKmGEkFGR7twZSREt3ajbcBwRqCaAwXMVxK1bDszEi3HeZFLd2CufM0cgsMYkgEGNaIqB61kePYZe+dcl6LiKxyi+9m6\/wBbiW4BhFAbM6ggpuJIMWMbeZELqqMVUuoOYKxAzKCN4Mik2kTjHIYLVG1wdflQzvZ3JP0p6v0FR1EnBLuTXLonY0qYo60qMsWEaCKUV2K7UyA2K7FdpRSA5FKK7XaAGxSinRXYoAZFdinRXYpiGgUop8UooAbFcinxSYgbkD1oAjK0yKZiMdbQTM+Q1oDjO1YV0traaXDkM5AHgyyIGsw0j9001Fsi5pGgKU1l66VhLvbi5bxZt3QFtlJTIvizyNyTqIDUL4n2r71v2dp3klQXZ99fyBoG1GGNSTWTe4rjeFtqXe8mUMEYq2YKx2DZZj3pXuJqAxRS5VgCJUHlJ1MbGa8Rs4e+tu5h9FR2BKsQPgPhI56EKPatp2HxTJaYm\/myX7TuAS0o8W3DE\/lAZW\/wCFLAZNHiuM4kXEti2qC4zohIJOdUzpPLVVuSP9o11q1iMe\/wCz1zB7vckrBCOA055IiChXnqRXbmEf9ooRmNvEpetzoGVsjuEY6fmurE6SBU17h5PegMqh7tu8hiSrpkJldNCbYO\/5jQMFYjCW3zMyFh+JWzcByjKZCpc8I8U5rRE\/lfyim4LCfhrbhYHc4oBpgzYuur5SSNAq3uUf+P1o9dwts97mmLhV2BOWCiqMyncGFTWfyimXcXaUNclfE6I7AAklmVUzdQO8BnoZphsUr+Ff9qoDs1vE279qdSVORnRWb1vJE6AgaaVNiOHE9+q5VFy5avITrluIEnTkM1pD55mqvw\/tNZutk8St3XelXhXUBsrZhtGq+IEg69DQ\/GcSvvnW2zKzNeQeBe7VMj91cW4V1eVRiJI8TArsQAHsRg0bvizELcyM+y5TbUDOG5GFTU7ZBUyLbdngKSypn5hkObJPIiM3sfSsfgcXiWum4WEiQGKySjrbRgyI0BwbVuYIBIYwsxRPBYZrebu1yh3LssKF+FVAETAhQefQQIpgaN7yLuwqL8UvIE\/QULOGYtm119asW8C52BpAPu48wYgfWg9zF33nxkegA+8z9KN2eHePK4iAD6z5+xoX2l42uDdLGHwpv4i5qqAwFHigsxk65H\/6GSKaEy7w83Ao0J6sRv7gRVuHaqvZTiGOum4MZhUsgZchVwxaZzAgM20DXTfaj2Sk0PIM\/CnnQzjF+3YTO2pJhVG5J\/StHdMCvO+1tws6k7CfrWa5m4wclybLKkqtVRlwSWuM3CZ8AHTLp86M4Pia3PCwCtyj4T\/CshhLgjKaLJhm7vvAJUHKfLaD5a\/cda4sLqrGWc59Tu17KjpxjHozTlaVDuH4+RDHUczzH8aVdeFzBxTycOdpNSawbClXYrsVqMY2uxTorjEASTA6nQUsjwciuxVS7xSym7g\/uy32qje7RIPhRj5sQo+etUTuqUOZIvhbVZ8RYZiugVmW7SuJhFPSJ09TOtW8NxO5ctyMocgxppmkhdPlUKV5SqS0xe5KpZ1aa1SWwbimvcVdyBQbhXEe+s4e45h71tWymfiyBnWOUa\/Kq2J4hbPdMoOW472yTpka2LhMj1tuPati3MktkEn43ZDi0CS5RnAykAqrKrGT0Lr86c\/Ej+VfnWVNzM+HvMArLev4Z42AYsq\/N7Vr\/tXVdyEOZ3azi2RwsklLmZUzAbgJetNPILNWKKKXNhfE8QYlVNzLnJVQCBmIBJAjmArH2NB+EYxu5sC5mZ2drDN\/vti4GZ5M+I2z7sKlTh1wAqiAd3iu8tliIZLhz3CImDF28sdQOtWv8mYh1NwhWvpeTKIKFSjMsncMyvPk5p7IrbyVbmMaFJCqBiDZcElvCSyoQdILE2jqD8RHnQrFZficl2sYrXTUJdEKIG6hLw\/61qjwi2c8rIuMjuDqCyBArAciMif9ajxS27bKCINxioOglgjOAx\/dRvlRkWGeZdoG7m6rLb0Fx4JGjZ4fT\/k7\/Lzqu+KvkNlhBnzqRy2n9fnRLtVdvXbQItBVhLgABYiVlizyIhiR8JBABnWB3gvCBctFnZpMEDwgEMNYIJPzA3pPGS6GcGbxNpmuS7\/FvB2O\/wCgo12C4jbw18HVg6sjEageJYY+Q0+dNfszdYplAzKVBJLKGCT4jBJJM9AK0eA7OAMxIXVy4GQeHMFBA90BpNomjS4DtJbujYqxVHAzAwrrK5jpDAggryjnNAbHG8XcYzAGa2XABQoDbCXgjxDgOXaGgjQgmIBbDcD8RcKSSSSQDEkydtN+ZothuCnfKB1Jj9KQGSw2HxCnRoKzl0V\/iUK+YqtsENCNoJlNSZ0ba7OkLkFx8pyhgWkNktpbUkDQtlRNfKd63P8Al4UqCN\/70K7T8bODfD2bOG769fZ1QFggAQAsSxBk+IaaaA69UhtFXAcFyzlBgzIA08QGb0kiTrvRCzwldBlBjXXWPc7U3s3d4q10tjEwyWSpyrbzG4GkZZOYrETOvSKNoIuOvXKw9DI+6n50BgqJwxQJYgAfSpbOHtsme26sNYZSGUxoYI9DWN\/xU4GjYW7i\/G7oLfgZz3YUOASEGx8UnXl5mdh2ew1i3h0GHQJaZQ6AEnR\/HMkkmc0zTGU+0mPfC4O7ftW1d7agqHnLqwBJjUgAkwN43G9ZjB4XH4lsPdvcVRBcyXFs2VC5kgPlWSC8jfMGrZ43Bres3LL\/AAujoZ6EFZ+xryLgGO4VhCMTiEdcZbuXQbSBiqsrMBlBhRoQPEdwaAPZ8Qfhbzg++31j51lO2PALNx7eJOKGFuqQiXSVE5s0KCWU5oZwIOuYyDAgpwLjX4zCte7l7QlgguRLBIKuI\/KT9QfWu8VwmGxVvu76B1nMBLBlaCMyspkGCRp1oAwNzEPgcZhktcQfFNduoty2zl\/AzQSRmKr8UiACMvMTXq1ZbgnZ\/BYV82GwwD6w7lmYTocrOSV06RWnWhgR3hpWO45g8wI58q2jig\/FcNIkVVUipRaZfRqOE1JHmmqtBrR8C4iEYo2tthlYHz0zeoqhxfCfmG9D8Nd5V5+tB0Z5R6uDjc0tzS8TwZstG6t4kI2I9Rz\/AJUqtcE4naKd1fEhdVJBMeWnr96VR8qE\/qUsexmdapD6XDOO+DSXeNWl2zN6CPvBqje7QH8qqPUlvoIoRlHQn1pwXyA\/rzpVPEq0uHj4RmhY0Y8rPyWLvFrz\/mI\/dAX6jWqri42rH3YyfnTi45t8qb3q8gTWOVacuqTf3NMacY9MUvscFnq3yH605bK9J8zS708hHr\/Oms55tVbwT+oluII1A\/WrnD3lGA3Gv2\/hQs3F61a4TiB3mX\/UPqNftNarKemsvfYouYN037blvBcNuFUGi91iXuISfitPn0gbQt11g80B6VaXgCMrK9w5TiO\/QKACkkM6EmZDMbknTS4Rymr1kkLA15e1PXNzgV6lTPOTjuULPCLahgVBzOtxs3iBdAgDgHYjIp05id6vLbAp8efyroUdKnqKfLIXYClmPJT9vvVlLZO0Ch+I4vgrbhLmMsq5MBTcQNMxqCdPepZDQTkHyH1qC\/hVcZWlhppAgx5EUUuYcASOop50BygTGg2k9JoHpAzcLzfk+ev3rtvhAJg6RUfY3tAcbhzdZFR1uPbdVJYArBG4B1DKaOufEPMfb+9A0jP8TxWCwRti\/cyG42VJBjSJLEDwqMyyx0GYTRxsJbKkBQJG439Zrzft3iMM3ErdvFuFspg7jE5S3jusyAKoBlhlDDTlRL\/DTtH3iHCXGJe3JsuwKm9YmFYA6yugg6wV31oJB3tFi7lrAXrtpsrpaLq0BisCWIB0JAmJ0mvLMdjLlvDWccvF2uYo5H7rOxIVwC6NbDkBUgz4ACAdNo9hxmFFyzesnZ0uJ7OGj6MK8b4VbC4Y2l4XefFkuouAORZLk5CIJZGRSBqF1XU0Ae1Ya\/3llLmksiOYIIGYAtBG41OtZH\/E7Dt3VjEIWVrN4NmScyKykMwA1MQunPajXYvhtzD4G3avaOA5KyDkDuzhJGhyhgNNNNNKkxOIw9+ybd0BkYeJDM6EHlrIIBBHQUCAHCcdhOHs5xHFTee4VJD3M4WJ1S2CxQGdTMQo2itldXxq3kV+xH2PzrLYHheCtEGzgkzCMruoZxzEM+Zh9KKXcRceOUGRH60Ai5xrA9\/h7tmQO8R0BIkAspCkjnBg1D2ewjYbCWbNx1ZrdtULLOU5BAiddgKZNxvzH20qRMJ119daBiOLAuMdwSPsAftVdnTObiWUDmJuFVzmNBJAk\/Ori4QVKlgCjIFYC4w1O\/TSkuDq8FrppZAgt2Qu1S0qVIZw1BeSRVimOKQGN41hcs9DWRxKQcw9\/wCNem8SwodSK884nh2tueo+orBdU9SOx4fcOLGWb3nXaHpdgkClXGdNpnolKL3NcbzHcgU03BzYmqQsMd2+X9frVi1hCdqpVtOXYyynTjzJEour0pwvnkKt4bg07lj5bCr34a1b3An5n5mrf0bisyaRkqXlNbRWQIru3wqx\/dBP1qVOH3m3UL+8w\/8AWaJXMf8A6RFV2ctMkk8gNah5dNcZZTK9l2SX7kI4cB8dz2Rf\/Y\/wqxZuW7ZBS2JGzNLH1HSoxYfnpXVw9STcXssGapcymsSZJiONXORPtpQtuIvMmTPVj+kUawOCQtLxHKRI+VFMXg7YtP3ZQFhlBAE67jTb15Vsp03Ui5Sl9mZdaTwkZu3xYqZQlRp0PqD1G9a3h+LF23mGhGjA6QfTzrGtgcgnvAzaSP586PcDZgy\/6WVlPqsEH5Aj3otqrpVVHs9se\/sOpiUeN13LvFbbXMHirakhjauhSpIIJRogjnNZXsV2dwWI4YrDDW+8e29t3yhnLqWQsrnUSQG001rb4Y+MqeYrz3Adn+MYUXcPg2s2bJuF0dyH3VFkSGKyEnKU0JOpr0EODCzQ\/wCGHEGv8Mtqx8VvPYedxkPgB88jJWrttKg+VA+yPBE4fhzbNzO7O1y450zOwUGByACqParOH4mBmDA\/E0RzBJIoHjJmuwVtrGM4hhSPCLq3k6ZXLD28Kp669K2uJaAG6MPr4f1oe3EyT4bfuT+gpXO8uCDoOgoyGCE8JsDFPjHYMzIiAOFKoEJMqTsTI+VS3buGN1b2QNcRSiPlMhW3AaIg\/wBb01cB1qxbwYHKjIsFM8QYOzBdDGh8hE1Hc4jfb4QB7SfrRT8IvSniwByoyIErYu3B43b02HyFTWuGgVT4l2hW3c7q0mdwYYkwiHpP5j5D51AnHcQDJW2RO2Vl08jmNVOpFPdmedzTi8Nh63hFHKphZFQ8O4gt0aDKw3U\/cHmKuRU08l0JRksx4IwgruWnRSimTORSiuxSNADTUOIvpbXM7BR1JpuPxa2kLsdAPn5VgsTjbl5y7nT8q8lHlVlOm5M32dnKu228Jcv+jT3u01oGFVn+Sj61y12mtE+JHXz0I+mtZtbc1Nbws6Vo8mJ1X4fbpYafzk22HxCXFzIwYdR9j0qQ1icOz2HzodfzLyYdDR69xVbioLZ1cSeqgbg+e9Za8dC1djl3Nk6bTi8xff8AsnxmKA0UTynlP60HxPDkumXWfPUfaiSINv5x\/KpCg0Ijp1rg1qs5vOcL0IU8Q4Mze7LYdv8AUn7rTP8A2BpVpyvMUqoxL1L1c1F3ZUtcHUcqnuWUtiSNdgOpoqq0F4sua6muyGB5sYJ+QrqXT8qk5R5MkZuUsNkV7FMRC6Dy51RZJ3q4lg1KuFNcJzcnmW7Ls44By2B0qzZtEbaelX7eEq3awlOKk+CDkDbeGJqdMFRRLAqdbdXxoN8kHMHW8EKn\/CCCKuBRTXcASTFWqjFci1Mx+OwWRjFXOzuFObPrAn3JEVaxCLcfTUDfzorhkAEARVlrZylUUpbJce7JSqqMWu7KmIBDSN6rulxjqzfOB9KLsgNdFuu1jBmyCrOA5mphgRV8LXYoAqLhgOVWUSqmO4klrQ6t\/pXf36VTt8fHO2QPJpPyis87qlB6W9y+NtUkspbBrLXIpuHvLcUMpkH+oNSGr1JNZRQ008MaaH8XxRt23Zdwpj1jSr7UF40ZUqecj503wQn0vBkeF5BozQYJkkCTzmfcVpMPZtXFHjylZDaEzOxBrzzht9sxGQkzr5kaefStnw3O\/wCZU0J8RHyHU1y8yzjByfpjNrGScYpbNwMTAB1adIn7VqcZi7dq21y44VFEknaKw3G8ITmUPIKxO3L+9ZLtZxy5irdiwCcqW\/2gB+K4hZDP\/Sf+daKdTSmpGm1q7uJo+Jf4rW1YizYLgfmdsgPoBNXez3+JWHvuLV5O5djCtOZCTyzfl968uwzpaYG5bJRlKOBo2VwVYqxGjQTFQ8XTCAL+Ga4YnN3gUFtfC0Lovpry1mavhPVumbkfSVcasl\/hfxR8RgV7wlmtu9rMd2VQrJPorAe1a16uGYztlij4UGxOvt\/eg2GaBV7tmhlW6MR8\/wC1C8O81soY0nq\/DYr9Mse+QpZq6jwJodbPSpgxirXHJZOGSXEuIoXwq5GLKcjbZhPUMoP0NWLlyqNlCLwuj8vhPmGBzfoax30M0GkRqxUaLybJWzaDYf1FSA6c\/wCt6o4dzPxCI3q33\/KvKRknnPJwpRwzhNKlqeX6UqWBBtqCcSvZWVyJAMN5A8\/ajT0F4kteguKeuDXqZKcsSyy\/ZthhIq2lgVnsA7qQEMeR29ulHLTXOaj\/ALCuTChJPDj+C2WOzLndCmxTe+boPn\/Koy7c2+Q\/jWjyG+EQ1E8003Ry19Kg09fXWug1dG2fdkXIezt5D6mqOIjzJ5E6\/IbCrhWqrj9oB5H9KvVCK7EXJkmHsgVcSoUqQNWlLBU2PNdU0zNXVOtNhHkeaD8Y4v3f7O3q\/M8l\/nXOL8Vy\/s7erHQnp6edBLduNTqeZrkXt7p+iD37v0OraWmfrnx2XqNt2idWMkmSTvr1oniMPZGWGG2oGp+Z2oezztUGIxAX1rjRqbNYzn1Om4Sk1h4+AtwLExdKDVWBPuvP5VonuBdyB6kD715fa444Ld3Ck+HPucvMLOgnr5adaVu01wy5LE82JY\/M12LSu6dNRay\/+exXX8Lc5apPC\/LZ6crhtiD6GaEcaXwz0M1jUwzoZQlWHNSVPzFErXHGYd1e1J0R9BJ\/0uBpPQj++yNwpPElgxV\/DZRi3B6kuezMbauRefU6O+5PJzWowFwnL0JNZLElVxFwbeNv\/wBeL7mtVgGEQJ0jf2rHU2keUu6emp+C9ilJBHKDWSscOi7cuEeAuFP+2VUgnoCcw\/4+dbW4mddNTG1CU4bdFx4U5HRZB5wTy5\/FUZrX9KfJK3i1PKRFe4LaZDIBNed8Tw6i4VRTE9OfkK9BNi8hy\/Cs6kqW36CRV3hfZ9Ld5rlwF3WCijKACZlv3lMbkgfWqraFWhJqT2OvCDk9g92G4X+DwSW7kK7TccEgZWczlPmBlHtWhLA7EGs3atqTm3Gx3JcaSI6\/w8quBhzYqQkARPPUk7kAEc+fWujC49v3LnRx3KnaPBZ0I5H6Hkaw9pijFH0I+o6jyr0NGYzbeX2G2o8M\/FMHSOmxoLxjgeYSBmHI8xWqlX7o32V47duMt0wVZfSnNcqnhuHYhrndpbY9ToAPUmtDhuylw63LgHkAT9dK2K5TOo72gt2wNattccIglj\/UnoKO3OFd2gA108R6nmaO8P4bbsrCrrzPM+pqw9oGqalTX8HIu791Xpjsl+5kUcppGn1HpVvD45Ppzka+elFL\/DVNR2+FAHaubOzhKWpbMy+btuQoS+oE0qL2cOFEUqX6KPuQ81kzVRx6CNq7SrcyhAzDDxD1o6hpUqr7kjj1ylSpoQ4U4V2lUxDqH4z\/AMiev6GlSoAtJT6VKporY4VWx7kKYMafqKVKoVeiXwW0eqPyZmxqWPtTrtKlXj5npu4j8JNZrjbnI+vOPY8qVKrqPUvgvoc\/cpYbQD0FGeH7iu0q6FPk3XHSw5cQRt1+1Zzj21KlV1Tg59r1mdZA905tZCz5+Fa9E4XhECCFGw8+nWu0qpuuTytzFeZwHbKADam2UHebfkb7rSpVC3\/yR+ST4KvE7YldPP3Ea1A6AIjDdlu5jJ1y\/DPpypUq2XHU\/j+S+h0\/f+CsDlBIgfE2w3lRPyMURwTlioJkQfqTSpVXDqRbPpZSv+FGjTKAw8mi5r60btbH+t6VKtFDqK6vSSYJBG1WqVKthkZw00UqVADK6KVKgY6lSpUxH\/\/ZYY\" style=\"width:100%\">","b35f0f04":"## Initital findings:\n- There are missing values in 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin' and 'BMI' columns\n- There are outliers in Glucose, BloodPressure, BMI, and DiabetesPedigreeFunction"}}