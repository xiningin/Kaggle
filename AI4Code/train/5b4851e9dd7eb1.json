{"cell_type":{"a50aaf2a":"code","bf588f47":"code","c4b38dc8":"code","a2198bf8":"code","daac29e9":"code","f15393f9":"code","584e01e2":"code","b84c18a3":"code","45b20312":"code","b83ff59b":"code","71092d45":"code","11ba0e49":"code","c060e139":"code","07b84827":"code","cbadc34c":"code","ea11d7a4":"code","3e6efd95":"code","f4c0d775":"code","4f88e46e":"code","2d29056e":"code","e064d191":"code","a7c3525b":"code","6c81c135":"code","3e3564e8":"code","5948a78f":"markdown","c7b44022":"markdown","2743b5a3":"markdown","18fed9e5":"markdown","c4da434c":"markdown","808bb3d4":"markdown","b8d1b196":"markdown","77df9d80":"markdown","5bea947e":"markdown","94847ec9":"markdown","c6ed2165":"markdown","3f4f55bc":"markdown","71c53722":"markdown","07122825":"markdown","dc2ec225":"markdown","7dfc8c2d":"markdown","583e4713":"markdown","1c5ef7f7":"markdown","b44dae89":"markdown"},"source":{"a50aaf2a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sklearn.tree as sktree\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bf588f47":"raw_transfers19 = pd.read_csv(\"..\/input\/soccer-players-values-and-their-statistics\/transfermarkt_fbref_201920.csv\", sep=';')\nraw_transfers19","c4b38dc8":"player_corrected = [i for i in raw_transfers19['player']]\nsquad_corrected = [i for i in raw_transfers19['squad']]","a2198bf8":"# Correction code by https:\/\/www.kaggle.com\/kiliandudu\/football-price-prediction\nplayer_corrected = [i for i in raw_transfers19['player']]\nsquad_corrected = [i for i in raw_transfers19['squad']]\nfor corrupted_column in [player_corrected, squad_corrected]:\n    for indice_j, nom_j in enumerate(corrupted_column) :\n        tab_c = list(nom_j)\n        l = len(tab_c)\n        for indice_c,caractere in enumerate(tab_c) :\n            if caractere == '\u0102' :\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x81' :\n                        tab_c[indice_c] = 'A'\n                        del tab_c[indice_c + 1]\n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\xad' :\n                        tab_c[indice_c] = 'i'\n                        del tab_c[indice_c + 1]\n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x98' :\n                        tab_c[indice_c] = 'O'\n                        del tab_c[indice_c + 1]\n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00a9' :\n                        tab_c[indice_c] = 'e'\n                        del tab_c[indice_c + 1]\n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u02c7' :\n                        tab_c[indice_c + 1] = 'a'\n                        del tab_c[indice_c + 1]  \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2030' :\n                        tab_c[indice_c] = 'E'\n                        del tab_c[indice_c + 1]   \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u0142' :\n                        tab_c[indice_c] = 'o'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00ab' :\n                        tab_c[indice_c] = 'e'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u017b' :\n                        tab_c[indice_c] = 'i'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2021' :\n                        tab_c[indice_c] = 'c'\n                        del tab_c[indice_c + 1]  \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2013' :\n                        tab_c[indice_c] = 'O'\n                        del tab_c[indice_c + 1]    \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u201c' :\n                        tab_c[indice_c] = 'O'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b1' :\n                        tab_c[indice_c] = 'n'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '' :\n                        tab_c[indice_c] = 'A'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u013d' :\n                        tab_c[indice_c] = 'u'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b6' :\n                        tab_c[indice_c] = 'o'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b8' :\n                        tab_c[indice_c] = 'o'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u015e' :\n                        tab_c[indice_c] = 'e'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00a7' :\n                        tab_c[indice_c] = 'c'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u015f' :\n                        tab_c[indice_c] = 'u'\n                        del tab_c[indice_c + 1]\n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00a4' :\n                        tab_c[indice_c] = 'a'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00b0' :\n                        tab_c[indice_c] = 'o'\n                        del tab_c[indice_c + 1] \n                        break\n                    else :\n                        tab_c[indice_c] = 'a'\n                        break\n            if caractere == '\u0141':\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == 'o' :\n                        tab_c[indice_c] = 'o'\n                        del tab_c[indice_c + 1] \n                        break\n            if caractere == '\u0139' :\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u017a' :\n                        tab_c[indice_c] = 's'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x81' :\n                        tab_c[indice_c] = 'L'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\xa0' :\n                        tab_c[indice_c] = 'S'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u02c7' :\n                        tab_c[indice_c] = 's'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u013e' :\n                        tab_c[indice_c] = 'z'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u00bb' :\n                        tab_c[indice_c] = 'Z'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u201e' :\n                        tab_c[indice_c] = 'n'\n                        del tab_c[indice_c + 1] \n                        break\n            if caractere == '\u00c4' :\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u203a' :\n                        tab_c[indice_c] = 'e'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u0164' :\n                        tab_c[indice_c] = 'c'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2026' :\n                        tab_c[indice_c] = 'a'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2122' :\n                        tab_c[indice_c] = 'e'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u2021' :\n                        tab_c[indice_c] = 'c'\n                        del tab_c[indice_c + 1] \n                        break\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\\x83' :\n                        tab_c[indice_c] = 'a'\n                        del tab_c[indice_c + 1] \n                        break\n            if caractere == '\u010c' :\n                    if (indice_c + 1) < l and tab_c[indice_c + 1] == '\u203a' :\n                        tab_c[indice_c] = 't'\n                        del tab_c[indice_c + 1] \n                        break\n        corrupted_column[indice_j] = \"\".join(tab_c)","daac29e9":"raw_transfers19 = raw_transfers19.drop(['player'], axis=1)\nraw_transfers19.insert(1, 'player', player_corrected)\nraw_transfers19 = raw_transfers19.drop(['squad'], axis=1)\nraw_transfers19.insert(4, 'squad', squad_corrected)\nraw_transfers19","f15393f9":"print(\"Le joueur le plus cher vaut :\", raw_transfers19.value[raw_transfers19.value.idxmax()])\nprint(\"Il s'agit de :\", raw_transfers19.player[raw_transfers19.value.idxmax()])","584e01e2":"raw_param = pd.read_csv(\"..\/input\/additional-files\/parameters.csv\", index_col=0, header=0)\nraw_param = raw_param.replace(r\"\\n\", \"\", regex=True)\nfor position in (\"GK\", \"DEF\", \"MID\", \"FWD\"):\n    raw_param[position] = raw_param[position].apply(lambda string: float(string))\nraw_param.dtypes","b84c18a3":"above_threshold = lambda n: abs(n) >= 0.35\n\ninfluent_param = raw_param[[\"GK\", \"DEF\", \"MID\", \"FWD\"]].apply(above_threshold).sum(axis=1) > 0\nraw_param[influent_param]","45b20312":"influent_param[influent_param].index","b83ff59b":"transfers19 = raw_transfers19.loc[: ,influent_param[influent_param].index]\ntransfers19","71092d45":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor","11ba0e49":"X = transfers19\ny = raw_transfers19.value\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=1)\nprint(\"Train shape :\", X_train.shape)\nprint(\"Test shape :\", X_test.shape)","c060e139":"price_model_tree = DecisionTreeRegressor(random_state=1)\nprice_model_tree.fit(X_train, y_train)\n\ntest_predictions = price_model_tree.predict(X_test)\ntest_mae = mean_absolute_error(test_predictions, y_test)\nprint(\"Validation MAE when not specifying max_leaf_nodes: {:,.0f}\".format(test_mae))","07b84827":"fn=X.columns\ncn=y.name\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(20,10), dpi=100)\nsktree.plot_tree(price_model_tree,\n                 filled = True)\naxes.set_title('Decision Tree', fontsize = 14)\nfig.savefig('tree_nomax.png')","cbadc34c":"def get_mae(max_leaf_nodes, X_train, X_test, y_train, y_test):\n    \"\"\"Return the mae of the random forest.\"\"\"\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=1)\n    model.fit(X_train, y_train)\n    preds_test = model.predict(X_test)\n    mae = mean_absolute_error(y_test, preds_test)\n    return(mae)\n\ncandidate_max_leaf_nodes = range(20, 30)\n\nbest_mae =  get_mae(5, X_train, X_test, y_train, y_test)\nfor max_leaf_nodes in candidate_max_leaf_nodes[1:]:\n    candidate_mae = get_mae(max_leaf_nodes, X_train, X_test, y_train, y_test)\n    if candidate_mae < best_mae:\n        best_mae, best_candidate = candidate_mae, max_leaf_nodes\n\nbest_tree_size = best_candidate\nprint(f\"Best tree size is {best_tree_size} nodes.\")","ea11d7a4":"price_model_tree_max = DecisionTreeRegressor(max_leaf_nodes=best_tree_size, random_state=1)\nprice_model_tree_max.fit(X_train, y_train)\n\ntest_predictions = price_model_tree_max.predict(X_test)\ntest_mae = mean_absolute_error(test_predictions, y_test)\nprint(\"Validation MAE when max_leaf_nodes={}: {:,.0f}\".format(best_tree_size, test_mae))","3e6efd95":"fn=X.columns\ncn=y.name\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(12,6), dpi=600)\nsktree.plot_tree(price_model_tree_max,\n                 filled = True)\naxes.set_title('Decision Tree with maximum size', fontsize = 14)\nfig.savefig('tree_max.png')","f4c0d775":"from sklearn.ensemble import RandomForestRegressor\n\nprice_model_forest = RandomForestRegressor(n_estimators=100, max_leaf_nodes=best_tree_size, random_state=1)\nprice_model_forest.fit(X_train, y_train)\n\ntest_predictions = price_model_forest.predict(X_test)\ntest_mae = mean_absolute_error(test_predictions, y_test)\nprint(\"Validation MAE when max_leaf_nodes={}: {:,.0f}\".format(best_tree_size, test_mae))","4f88e46e":"fn=X.columns\ncn=y.name\nfig, axes = plt.subplots(nrows=1, ncols=5, figsize=(11,3), dpi=300)\nfor index in range(0, 5):\n    sktree.plot_tree(price_model_forest.estimators_[index],\n                     #feature_names = fn,\n                     filled = True,\n                     ax = axes[index])\n    axes[index].set_title('Estimator: ' + str(index+1), fontsize = 11)\nfig.savefig('forest_5trees.png')","2d29056e":"from sklearn.linear_model import Ridge\n\nprice_model_ridge = Ridge(random_state=1)\nprice_model_ridge.fit(X_train, y_train)\n\ntest_predictions = price_model_ridge.predict(X_test)\ntest_mae = mean_absolute_error(test_predictions, y_test)\nprint(\"Validation MAE: {:,.0f}\".format(test_mae))","e064d191":"from sklearn.model_selection import GridSearchCV\n\nprice_model_ridgecv = Ridge(random_state=1)\nparameters = [{\"alpha\": [6000, 10000, 50000]}]\n\ngrid = GridSearchCV(estimator=price_model_ridgecv, param_grid=parameters, cv=10)\ngrid.fit(X_train, y_train)\nprint(\"Best estimator: \", grid.best_estimator_)\nprint(\"Best score: \", grid.best_score_)\n\nprice_model_ridgecv = Ridge(alpha=grid.best_params_[\"alpha\"], random_state=1)\nprice_model_ridgecv.fit(X_train, y_train)\ntest_predictions = price_model_ridgecv.predict(X_test)\ntest_mae = mean_absolute_error(test_predictions, y_test)\nprint(\"Validation MAE: {:,.0f}\".format(test_mae))","a7c3525b":"from sklearn.linear_model import Lasso\n\nprice_model_ridge = Lasso(random_state=1)\nprice_model_ridge.fit(X_train, y_train)\n\ntest_predictions = price_model_ridge.predict(X_test)\ntest_mae = mean_absolute_error(test_predictions, y_test)\nprint(\"Validation MAE: {:,.0f}\".format(test_mae))","6c81c135":"players_index = transfers19.loc[raw_transfers19.player.isin([\"Neymar\", \"Daniel Wass\", \"Benjamin Pavard\", \"Yannick Gerhardt\", \"Lionel Messi\"])].index\nraw_transfers19.iloc[players_index]\n#reviews.loc[(reviews.country == 'Italy') & (reviews.points >= 90)]","3e3564e8":"predictions = price_model_forest.predict(transfers19.iloc[players_index])\nfor i in range(len(players_index)):\n    predicted_value = round(predictions[i], 0)\n    real_value = raw_transfers19.iloc[players_index[i]].value\n    print(\"----------------------------------------\")\n    print(\"Predictions for\", raw_transfers19.iloc[players_index[i]].player)\n    print(\"Predicted value :\", str(predicted_value)[:-2], \"\u20ac\")\n    print(\"Real value :     \", real_value,  \"\u20ac\")\n    print(\"Difference :     \", predicted_value - real_value)\n    print(\"Error rate :     \", round(100*abs(predicted_value - real_value)\/real_value, 1), \"%\")","5948a78f":"##### Great, the corrupted characters have been corrected.\nNow, let's decide which features to use.","c7b44022":"#### Last Error (occured after 1h): ####\n\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/model_selection\/_split.py:672: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=5.\n  % (min_groups, self.n_splits)), UserWarning) <br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  \"the number of iterations.\", ConvergenceWarning)<br><br>\n\nBest estimator:  LogisticRegression(C=0.01, solver='liblinear')<br>\nBest score:  0.07675675675675676<br><br>\n\n\/opt\/conda\/lib\/python3.7\/site-packages\/sklearn\/svm\/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.<br>\n  \"the number of iterations.\", ConvergenceWarning)<br>\n\n---------------------------------------------------------------------------<br>\nKeyError                                  Traceback (most recent call last)<br>\n\/tmp\/ipykernel_39\/3165797164.py in <module>\n      9 print(\"Best score: \", grid.best_score_)\n     10 \n---> 11 price_model_logistic = LogisticRegression(penalty=grid.best_params_[\"penalty\"], C=grid.best_params_[\"C\"], solver=\"liblinear\", random_state=1)\n     12 price_model_logistic.fit(X_train, y_train)\n     13 test_predictions = price_model_logistic.predict(X_test)\n\nKeyError: 'penalty'","2743b5a3":"Now, let's work on the hyperparameter C (strength of the slope correction).<br>\nWe are going to use a Cross-Validation model.","18fed9e5":"<font color='red'>\n    \n# II. Modelling #\n\n<\/font>\n\n* Separation of dataset between train\/val\n* Model creation and training","c4da434c":"from sklearn.linear_model import LogisticRegression\n\nprice_model_logistic = LogisticRegression(solver=\"liblinear\")\nparameters = [{\"penalty\": [\"l1\", \"l2\"]},\n              {\"C\": [0.01, 0.1, 1., 10., 100.]}]\ngrid = GridSearchCV(estimator=price_model_logistic, param_grid=parameters, cv=5)\ngrid.fit(X_train, y_train)\nprint(\"Best estimator: \", grid.best_estimator_)\nprint(\"Best score: \", grid.best_score_)\n\nprice_model_logistic = LogisticRegression(penalty=grid.best_params_[\"penalty\"], C=grid.best_params_[\"C\"], solver=\"liblinear\", random_state=1)\nprice_model_logistic.fit(X_train, y_train)\ntest_predictions = price_model_logistic.predict(X_test)\ntest_mae = mean_absolute_error(test_predictions, y_test)\nprint(\"Validation MAE: {:,.0f}\".format(test_mae))","808bb3d4":"<font color='violet'>\n    \n### FIRST MODEL : Decision Tree ###\n\n<\/font>\n\nLet's create this model. First, we won't specify any maximum depth for the tree. Then we will do so and compare the results.","b8d1b196":"Let's separate our between training set and validation set. This way, we can use the training set to teach our model and the validation set to calculate its error. Wouldn't it be cheating if we tested it on the data it's been training with ^^ ?","77df9d80":"Now let's create an algorithm able to calculate the optimum size for our tree.","5bea947e":"These are the players whose value we want to predict.","94847ec9":"<font color='violet'>\n    \n### SECOND MODEL : Random Forest ###\n\n<\/font>\n\nNow let's create several independant trees and let them vote to choose the best estimation !","c6ed2165":"<font color='violet'>\n    \n### THIRD MODEL : Ridge Regression ###\n\n<\/font>\n\nWe are going to create estimate the price thanks to Regression model (least square corrected with squared slope, to reduce variance but a bit biased...).<br>\nThis time, we use all the parameters we had at first","3f4f55bc":"Let's try to predict a few values thanks to our best model so far : the Random Forest.","71c53722":"<font color='red'>\n    \n# I. Dataset preparation #\n\n<\/font>\n\n* Cells cleaning\n* Selection of influent parameters*","07122825":"<font color='violet'>\n    \n### FIFTH MODEL : Logistic Regression ###\n\n<\/font>\n\nWe are going to create estimate the price thanks to Logistic Regression model, which artibitrates between Ridge and Lasso.<br>\n<b>[STILL UNDER CONSTRUCTION]<b>","dc2ec225":"<font color='violet'>\n    \n### FOURTH MODEL : Lasso Regression ###\n\n<\/font>\n\nWe are going to create estimate the price thanks to Lasso Regression model (least squares corrected with absolute slope)","7dfc8c2d":"Now let's visualize the model we just created.","583e4713":"This MAE is pretty important. Let's visualize our Tree.","1c5ef7f7":"<font color='red'>\n    \n# III. Testing the predictions #\n\n<\/font>\n\n* Selection of a few players-test\n* [This section is still under construction]","b44dae89":"Look at the 'player' and 'squad' columns: some characters have been corrupted. We will correct them."}}