{"cell_type":{"5a08d316":"code","582cb4c3":"code","0fe16e70":"code","1d843955":"code","e40eaff8":"code","1dbc3f2b":"code","56e7ea8a":"code","0ab33604":"code","4cc49b43":"code","5e58ce46":"code","499ae33f":"code","0f639f67":"code","8f54ee26":"code","3bb4cf47":"code","899a8d2d":"code","2b3c5b6a":"code","1327994e":"code","8d363d4b":"code","52aa329b":"code","b4b744cf":"code","822b72c7":"code","2c3d821e":"code","d1fad4e7":"code","445319a5":"code","53220a49":"code","1d4fc47b":"code","c6b4eb42":"code","16130d98":"code","138464c3":"code","4bb910cf":"markdown","581978f8":"markdown","7ad9a3b2":"markdown","15d90bab":"markdown","7bda095c":"markdown","4cc68973":"markdown","081248d5":"markdown","6f07f9b7":"markdown","458337da":"markdown","1a481dae":"markdown","0865bc9d":"markdown","9114f78c":"markdown","44045b02":"markdown","99e54525":"markdown","a8f136a0":"markdown","94f8665c":"markdown","10fc23c5":"markdown","089ce99d":"markdown","4e48b0d8":"markdown","954e064d":"markdown","7b8daa25":"markdown","75b4ac31":"markdown","35a01b82":"markdown"},"source":{"5a08d316":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\n# --- setup ---\npd.set_option('max_columns', 50)\n","582cb4c3":"%%time\ndatadir = Path('\/kaggle\/input\/liverpool-ion-switching-feather')\n\ntrain = pd.read_feather(datadir\/'train.feather')\ntest = pd.read_feather(datadir\/'test.feather')\nsample_submission = pd.read_feather(datadir\/'sample_submission.feather')","0fe16e70":"train.head()","1d843955":"test.head()","e40eaff8":"sample_submission.head()","1dbc3f2b":"signal_array = train['signal'].values\nopen_channels = train['open_channels'].values\n\ntest_signal_array = test['signal'].values","56e7ea8a":"import numpy\nimport pywt\nfrom scipy import signal\nfrom scipy.ndimage import zoom\nfrom scipy.signal import savgol_filter\n\n\n# Referenced from: https:\/\/scipy-cookbook.readthedocs.io\/items\/SignalSmooth.html\ndef smooth(x, window_len=11, window='hanning', same_size=True):\n    \"\"\"smooth the data using a window with requested size.\n\n    This method is based on the convolution of a scaled window with the signal.\n    The signal is prepared by introducing reflected copies of the signal\n    (with the window size) in both ends so that transient parts are minimized\n    in the beginning and end part of the output signal.\n\n    input:\n        x: the input signal\n        window_len: the dimension of the smoothing window; should be an odd integer\n        window: the type of window from 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'\n            flat window will produce a moving average smoothing.\n\n    output:\n        the smoothed signal\n\n    example:\n\n    t=linspace(-2,2,0.1)\n    x=sin(t)+randn(len(t))*0.1\n    y=smooth(x)\n\n    see also:\n\n    numpy.hanning, numpy.hamming, numpy.bartlett, numpy.blackman, numpy.convolve\n    scipy.signal.lfilter\n\n    TODO: the window parameter could be the window itself if an array instead of a string\n    NOTE: length(output) != length(input), to correct this: return y[(window_len\/2-1):-(window_len\/2)] instead of just y.\n    \"\"\"\n    if x.ndim != 1:\n        raise ValueError(\"smooth only accepts 1 dimension arrays.\")\n\n    if x.size < window_len:\n        raise ValueError(\"Input vector needs to be bigger than window size.\")\n\n    if window_len < 3:\n        return x\n\n    if window not in ['flat', 'hanning', 'hamming', 'bartlett', 'blackman']:\n        raise ValueError(\"Window is on of 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'\")\n\n    s = numpy.r_[x[window_len - 1:0:-1], x, x[-2:-window_len - 1:-1]]\n    if window == 'flat':  # moving average\n        w = numpy.ones(window_len, 'd')\n    else:\n        w = eval('numpy.' + window + '(window_len)')\n\n    y = numpy.convolve(w \/ w.sum(), s, mode='valid')\n    if same_size:\n        # y = y[int(window_len\/2-1):-int(window_len\/2)]\n        y = y[(window_len - 1) \/\/ 2:-(window_len - 1) \/\/ 2]\n    return y\n\n\ndef smooth_wave(x, window_len=11, mode='hanning'):\n    \"\"\"Smooth `x` wave array.\n\n    Args:\n        x (numpy.ndarray): 1-dim array.\n        window_len (int): window length for smoothing. odd value is expected.\n        mode (str):\n            'none' for not apply smoothing.\n            'savgol' for applying savgol_filter.\n            'flat', 'hanning', 'hamming', 'bartlett', 'blackman' for convolve smoothing.\n\n    Returns:\n        smoothed_x (numpy.ndarray): 1-dim array, same shape with `x`.\n    \"\"\"\n    if mode == 'none':\n        return x\n    elif mode == 'savgol':\n        return savgol_filter(x, window_length=window_len, polyorder=2)\n    else:\n        return smooth(x, window_len=window_len, window=mode, same_size=True)","0ab33604":"def filter_wave(x, cutoff=(-1, -1), N=4, filtering='lfilter'):\n    \"\"\"Apply low pass\/high pass\/band pass filter on wave `x`\n\n    Args:\n        x (numpy.ndarray): original wave array.\n        cutoff (tuple): tuple of 2 int.\n            1st element is for lowest frequency to pass. -1 indicates to allow freq=0\n            2nd element is for highest frequency to pass. -1 indicates to allow freq=infty\n        N (int): order of filter\n        filtering (str): filtering method. `lfilter` or `filtfilt` method.\n\n    Returns:\n        filtered_x (numpy.ndarray): same shape with `x`, filter applied.\n    \"\"\"\n    assert x.ndim == 1\n    output = 'sos' if filtering == 'sos' else 'ba'\n    if cutoff[0] <= 0 and cutoff[1] <= 0:\n        # Do not apply filter\n        return x\n    elif cutoff[0] <= 0 and cutoff[1] > 0:\n        # Apply low pass filter\n        output = signal.butter(N, Wn=cutoff[1]\/len(x), btype='lowpass', output=output)\n    elif cutoff[0] > 0 and cutoff[1] <= 0:\n        # Apply high pass filter\n        output = signal.butter(N, Wn=cutoff[0]\/len(x), btype='highpass', output=output)\n    else:\n        # Apply band pass filter\n        output = signal.butter(N, Wn=(cutoff[0]\/len(x), cutoff[1]\/len(x)), btype='bandpass', output=output)\n\n    if filtering == 'lfilter':\n        b, a = output\n        return signal.lfilter(b, a, x)\n    elif filtering == 'filtfilt':\n        b, a = output\n        return signal.filtfilt(b, a, x)\n    elif filtering == 'sos':\n        sos = output\n        return signal.sosfilt(sos, x)\n    else:\n        raise ValueError(\"[ERROR] Unexpected value filtering={}\".format(filtering))\n","4cc49b43":"def plot_signal(smooth_fn=None, label='smooth signal', target_indices=None, interval=50,\n                separate_indices=None):\n    width = 500000\n    if target_indices is None:\n        target_indices = np.arange(10)\n\n    for i in target_indices:\n        s = 500000 * i\n        y = signal_array[s:s+width][::interval]\n        t = open_channels[s:s+width][::interval]\n        plt.subplots(1, 1, figsize=(18, 5))\n        plt.plot(y, label='signal', zorder=1)\n        if smooth_fn is not None:\n            if separate_indices is None:\n                y2 = smooth_fn(signal_array[s:s+width])[::interval]\n            else:\n                y2 = np.concatenate([smooth_fn(signal_array[s+separate_indices[i]:s+separate_indices[i+1]]) for i in range(len(separate_indices) - 1)]) [::interval]\n            plt.plot(y2, label=label, zorder=1)\n        plt.scatter(x=np.arange(t.shape[0]), y=t, color='green', label='label', zorder=2)\n        plt.title(f'Train batch={i}')\n        plt.legend()\n        plt.tight_layout()\n        plt.show()\n        plt.close()","5e58ce46":"plot_signal()","499ae33f":"def plot_test_signal(smooth_fn=None, label='smooth signal', target_indices=None, interval=50):\n    width = 500000\n    if target_indices is None:\n        target_indices = np.arange(4)\n\n    for i in target_indices:\n        s = 500000 * i\n        y = test_signal_array[s:s+width][::interval]\n        plt.subplots(1, 1, figsize=(18, 5))\n        plt.plot(y, label='signal', zorder=1)\n        if smooth_fn is not None:\n            y2 = smooth_fn(test_signal_array[s:s+width])[::interval]\n            plt.plot(y2, label=label, zorder=1)\n        plt.title(f'Test batch={i}')\n        plt.legend()\n        plt.tight_layout()\n        plt.show()\n        plt.close()","0f639f67":"plot_test_signal()","8f54ee26":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=1000, mode='hanning'), target_indices=[1, 7])","3bb4cf47":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=10000, mode='hanning'), target_indices=[1, 7])","899a8d2d":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=100000, mode='hanning'), target_indices=[1, 7])","2b3c5b6a":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=10000, mode='flat'), target_indices=[1, 7])","1327994e":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=10000, mode='hamming'), target_indices=[1, 7])","8d363d4b":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=10000, mode='bartlett'), target_indices=[1, 7])","52aa329b":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=10000, mode='blackman'), target_indices=[1, 7])","b4b744cf":"plot_signal(smooth_fn=lambda x: smooth_wave(x, window_len=10001, mode='savgol'), target_indices=[1, 7])","822b72c7":"cutoff_high = 100\nplot_signal(smooth_fn=lambda x: filter_wave(x, cutoff=(0, cutoff_high), filtering='lfilter'), target_indices=[1, 7])","2c3d821e":"cutoff_high = 300\nplot_signal(smooth_fn=lambda x: filter_wave(x, cutoff=(0, cutoff_high), filtering='lfilter'), target_indices=[1, 7])","d1fad4e7":"cutoff_high = 500\nplot_signal(smooth_fn=lambda x: filter_wave(x, cutoff=(0, cutoff_high), filtering='lfilter'), target_indices=[1, 7])","445319a5":"cutoff_high = 300\nplot_signal(smooth_fn=lambda x: filter_wave(x, cutoff=(0, cutoff_high), filtering='filtfilt'), target_indices=[1, 7])","53220a49":"cutoff_high = 300\nplot_signal(smooth_fn=lambda x: filter_wave(x, cutoff=(0, cutoff_high), filtering='sos'), target_indices=[1, 7])","1d4fc47b":"cutoff_high = 50\nplot_signal(smooth_fn=lambda x: filter_wave(x, cutoff=(0, cutoff_high), filtering='filtfilt'), target_indices=[1],\n            separate_indices=[0, 100000, 500000])","c6b4eb42":"def moving_average(a, n=50000) :\n    ret = np.cumsum(a, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] \/ n\n\nplot_signal(smooth_fn=lambda x: moving_average(x, n=10000), target_indices=[1],)","16130d98":"def pd_rolling_mean(a, n=50000):\n    df = pd.DataFrame({'signal': a})\n    rolling_df = df.rolling(window=n, min_periods=1, center=True)\n    return rolling_df.mean().values\n\nplot_signal(smooth_fn=lambda x: pd_rolling_mean(x, n=10000), target_indices=[1],)","138464c3":"plot_signal(smooth_fn=lambda x: pd_rolling_mean(x, n=10000), target_indices=[1],\n            separate_indices=[0, 100000, 500000])","4bb910cf":"# Implementation summary & references\n\nThat's all! In summary, I used follwing methods to compute smoothed signal.\n\n\n1. `numpy.convolve` for 'flat', 'hanning', 'hamming', 'bartlett', 'blackman' window.\n - https:\/\/scipy-cookbook.readthedocs.io\/items\/SignalSmooth.html\n\n2. `scipy.signal.savgol_filter` for 'savgol' filtering.\n - http:\/\/lagrange.univ-lyon1.fr\/docs\/scipy\/0.17.1\/generated\/scipy.signal.savgol_filter.html\n \n3. `scipy.signal` for filtering 'lfilter', 'filtfilt', 'sos'.\n - https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.signal.lfilter.html\n - https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.signal.filtfilt.html\n - https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.signal.sosfilt.html\n - https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.signal.butter.html\n\n4. `pd.rolling` for moving average computation\n\n - https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.rolling.html","581978f8":"# plot all with smoothing\n\nNow I will demonstrate several smoothing methods, to compare how these works to estimate the \"baseline\".","7ad9a3b2":"We can see signal jump at the batch=1. Try using window by setting center.","15d90bab":"As we can see, baseline is moving at first steps of Train batch=1, and Train batch = 6, 7, 8, 9. However the `label` is kept similar scale. So we need to remove this \"baseline\", called \"drift\".\n\nNext, let's see test signal.","7bda095c":"Seems `window_len=100000` is smooth but not makes too much lag, `window_len=1000` captures local change but not smooth.\n`window_len=10000` seems to be good balance.\n\nLet's compare different window mode, 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'.","4cc68973":"# Liverpool ion switching: smoothing visualization\n\nWe are asked to predict \"open_channels\" from \"signal\" data in this compeition.\nWhen you look the data, you can understand the important data preprocessing is how to \"remove noise\" from the signal.\n\nIn this kernel, I will try **various kinds of smoothing methods and see its behavior**.","081248d5":"# Low-pass filter\n\nNext, let's see low-pass filtering methods.\n\nAt first, I will try several cutoff for high frequency 100, 300, 500 with \"lfilter\" method.","6f07f9b7":"# Signal smoothing\n\n","458337da":"## hamming","1a481dae":"# Load data\n\nI use [Liverpool ion switching feather](https:\/\/www.kaggle.com\/corochann\/liverpool-ion-switching-feather) dataset to load the data much faster. You can also refer the kernel [Convert to feather format for fast data loading](https:\/\/www.kaggle.com\/corochann\/convert-to-feather-format-for-fast-data-loading).","0865bc9d":"# Savgol filter\n\nLet's try another filtering, savgol filter.","9114f78c":"Seems it is sensitive to the signal jump of Batch=1.","44045b02":"# Moving average\n\nFor comparison, let's see the behavior when we use moving average.","99e54525":"## hanning\n\nThese are smoothed line using **\"hanning\" window**, with changing `window_len` to 1000, 10000, 100000 respectively.\nI will only plot Training batch = 1, 7 for simplicity.","a8f136a0":"Batch 1 and 2 has signal jump for each 1\/5 steps. Test batch=2 has moving baseline.","94f8665c":"## flat","10fc23c5":"Actually for Training batch=1 jump, it is more easy to manually separate indices to calculate the signal. Below is the demonstration.","089ce99d":"Now I will try another filtering method **\"filtfilt\" and \"sos\"**.","4e48b0d8":"While we can see signal *lag* in the \"lfilter\" and \"sos\" method at the batch=1 signal jump, \"filtfilt\" method has less lag since it sees the signal from both direction.","954e064d":"When maximum cutoff frequency is high (maximum cutoff=500 in the bottom), original signal's high frequency information is kept and it is sensitive to local change.<br\/>\nWhen we make maximum cutoff frequency to low (maximum cutoff=100 in the top), original signal's high frequency information is lost and it becomes smooth line.","7b8daa25":"## blackman","75b4ac31":"## bartlett","35a01b82":"# plot all\n\nAt first, let's visualize signal for train & test data."}}