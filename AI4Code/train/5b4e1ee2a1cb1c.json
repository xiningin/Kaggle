{"cell_type":{"16c00833":"code","c7abb9a7":"code","8f5901df":"code","b70fc2f9":"code","ed6e2073":"code","263a800c":"code","67b3d6c4":"code","0bf3fb11":"code","0a143226":"code","64307568":"code","c2a55233":"code","a93847ee":"code","3f2a0f1f":"code","e7634aff":"code","a29e96f9":"code","2f704a57":"markdown","108fc9a7":"markdown"},"source":{"16c00833":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7abb9a7":"import pandas as pd\ndf = pd.read_csv('..\/input\/the-housing-data\/Housing_data.csv',sep=';')\ndf.head()","8f5901df":"X = df.drop(['price'] , axis=1)\nY = df[['price']]","b70fc2f9":"print(Y['price'].min())\nprint(Y['price'].max())","ed6e2073":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y)","263a800c":"from sklearn.linear_model import LinearRegression\nlmodel = LinearRegression()","67b3d6c4":"lmodel.fit(xtrain,ytrain)","0bf3fb11":"Yp_train = lmodel.predict(xtrain)\nYp_test = lmodel.predict(xtest)\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nprint(mean_absolute_error(ytrain,Yp_train))\nprint(mean_absolute_error(ytest,Yp_test))","0a143226":"X = df.drop(['price'] , axis=1)\nY = df[['price']]","64307568":"from sklearn.preprocessing import PolynomialFeatures\npol = PolynomialFeatures(degree = 3)\n\npol.fit(X)\nXp = pol.transform(X)","c2a55233":"from sklearn.model_selection import train_test_split\nxtrain_p , xtest_p , ytrain_p , ytest_p = train_test_split(Xp,Y)","a93847ee":"print(X.shape)\nprint(Xp.shape)","3f2a0f1f":"lmodel_p = LinearRegression()\nlmodel_p.fit(xtrain_p,ytrain_p)","e7634aff":"Ypp_train = lmodel_p.predict(xtrain_p)\nYpp_test = lmodel_p.predict(xtest_p)\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nprint(mean_absolute_error(Ypp_train,ytrain_p))\nprint(mean_absolute_error(Ypp_test,ytest_p))","a29e96f9":"from sklearn.model_selection import train_test_split\nxtrain_p , xtest_p , ytrain_p , ytest_p = train_test_split(X,Y)\n\ntraining_error = []\ntesting_error = []\nfor i in range(1,10):\n    pol = PolynomialFeatures(degree = i)\n\n    xtrain_p = pol.fit_transform(xtrain_p)\n    xtest_p = pol.fit_transform(xtest_p)\n    \n    lmodel_p = LinearRegression()\n    lmodel_p.fit(xtrain_p,ytrain_p)\n    \n    Ypp_train = lmodel_p.predict(xtrain_p)\n    Ypp_test = lmodel_p.predict(xtest_p)\n    \n    training_error.append(mean_absolute_error(Ypp_train,ytrain_p))\n    testing_error.append(mean_absolute_error(Ypp_test,ytest_p))","2f704a57":"**Polynomial Regression**","108fc9a7":"**Linear Regression**"}}