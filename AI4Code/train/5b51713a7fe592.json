{"cell_type":{"75db3e10":"code","55ae7166":"code","e0d46732":"code","38e1e5d8":"code","9552e878":"code","d1b767a0":"code","dc09539b":"code","eddfc695":"code","da10fd0c":"code","63df5ab3":"code","774fa585":"code","874ac780":"code","58f9f8b2":"code","8b87d441":"markdown","ac1f79f6":"markdown","546dc506":"markdown","00584354":"markdown","50c4b9a1":"markdown","547c28e6":"markdown","4b0d6645":"markdown"},"source":{"75db3e10":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import confusion_matrix, classification_report","55ae7166":"data = pd.read_csv('..\/input\/flight-delays\/flights.csv', nrows=50000)","e0d46732":"data","38e1e5d8":"data.info()","9552e878":"def onehot_encode(df, column_dict):\n    df = df.copy()\n    for column, prefix in column_dict.items():\n        dummies = pd.get_dummies(df[column], prefix=prefix)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    return df","d1b767a0":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Remove columns with more than 25% missing values\n    missing_columns = df.loc[:, df.isna().mean() >= 0.25].columns\n    df = df.drop(missing_columns, axis=1)\n    \n    # Drop unneeded columns\n    df = df.drop(['YEAR', 'MONTH', 'FLIGHT_NUMBER', 'TAIL_NUMBER'], axis=1)\n    \n    # One-hot encode nominal feature columns\n    df = onehot_encode(\n        df,\n        column_dict={\n            'AIRLINE': 'AL',\n            'ORIGIN_AIRPORT': 'OA',\n            'DESTINATION_AIRPORT': 'DA'\n        }\n    )\n    \n    # Fill remaining missing values with column means\n    remaining_na_columns = df.loc[:, df.isna().sum() > 0].columns\n    for column in remaining_na_columns:\n        df[column] = df[column].fillna(df[column].mean())\n    \n    # Split df into X and y\n    y = df['CANCELLED'].copy()\n    X = df.drop('CANCELLED', axis=1).copy()\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = pd.DataFrame(scaler.transform(X_train), columns=X.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns=X.columns)\n   \n    return X_train, X_test, y_train, y_test","dc09539b":"def evaluate_model(model, X_test, y_test):\n    \n    model_acc = model.score(X_test, y_test)\n    print(\"Test Accuracy: {:.2f}%\".format(model_acc * 100))\n    \n    y_true = np.array(y_test)\n    y_pred = model.predict(X_test)\n    \n    cm = confusion_matrix(y_true, y_pred)\n    clr = classification_report(y_true, y_pred, target_names=[\"NOT CANCELLED\", \"CANCELLED\"])\n    \n    plt.figure(figsize=(8, 8))\n    sns.heatmap(cm, annot=True, vmin=0, fmt='g', cmap='Blues', cbar=False)\n    plt.xticks(np.arange(2) + 0.5, [\"NOT CANCELLED\", \"CANCELLED\"])\n    plt.yticks(np.arange(2) + 0.5, [\"NOT CANCELLED\", \"CANCELLED\"])\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"Actual\")\n    plt.title(\"Confusion Matrix\")\n    plt.show()\n    \n    print(\"Classification Report:\\n----------------------\\n\", clr)","eddfc695":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","da10fd0c":"X_train","63df5ab3":"y_train","774fa585":"y_train.value_counts()","874ac780":"model = LogisticRegression()\nmodel.fit(X_train, y_train)","58f9f8b2":"evaluate_model(model, X_test, y_test)","8b87d441":"# Preprocessing","ac1f79f6":"# Task for Today  \n\n***\n\n## Flight Cancellation Prediction  \n\nGiven *data about US flights in 2015*, let's try to predict whether a given flight will be **cancelled**.\n\nWe will use a logistic regression model to make our predictions. ","546dc506":"# Helper Functions","00584354":"# Results","50c4b9a1":"# Training","547c28e6":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/M0ND7Gpdt14","4b0d6645":"# Getting Started"}}