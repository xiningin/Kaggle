{"cell_type":{"a5540f3c":"code","ed5a6129":"code","5f159d5a":"code","7f84fcb9":"code","aff681dd":"code","71722929":"code","2470441d":"code","917dc218":"code","cded0ae3":"code","ab758bf3":"code","c249d1cc":"code","b6203340":"code","e589f6d0":"code","aca74284":"code","2522b3c3":"code","8a3b2b0b":"code","16ce6a63":"code","357c4fff":"code","1cfd3269":"code","bfa98a2e":"code","a573ebd0":"code","1efab17e":"code","4eddccde":"code","d98dc7f4":"code","f7243218":"code","5bcf007f":"code","36489215":"code","5e2e29d5":"code","86bc8eda":"code","d99a13d0":"code","2b9963ff":"code","a70c3e6c":"code","d92d5875":"code","5cd8749f":"code","f4ba78f7":"code","06a9f0fe":"code","08169fce":"code","3ef7d270":"code","81a8727d":"code","074ead37":"code","230c256c":"code","f2ddb382":"code","180e3cbc":"code","3fc76db2":"code","b646c24a":"code","24260e7a":"code","e73d3b03":"code","65dec2b7":"code","a8f99dc6":"code","61fd9c7a":"code","bd7902e0":"code","4bfae74e":"code","eebb0929":"code","518fb04b":"code","df9a5129":"code","8ae2395d":"code","da40a7d2":"code","41cc2507":"code","1763bcb0":"code","64e05596":"code","fc48fb2a":"code","a6e939ae":"code","fa4a22cb":"code","682c457c":"code","34e49aed":"code","2075bd3b":"code","e1677875":"code","698f8534":"code","58bc3f81":"code","daa337b1":"code","18e5ab53":"code","282d93e8":"code","bcf416e1":"code","487cc1c3":"code","d33a3acb":"code","dd34f132":"code","e3c7aad7":"code","f269f098":"code","4a10859f":"code","d19642ab":"code","59898fd1":"markdown","b95d7efb":"markdown","168ac337":"markdown","9ddce97f":"markdown","733ba56e":"markdown","4ad29eb6":"markdown","c6278653":"markdown","5024a388":"markdown","ca1d0ac9":"markdown","99cecfb8":"markdown","08b1a50a":"markdown","4ca21d10":"markdown","a703fa5f":"markdown","0ef733dc":"markdown","40f9da65":"markdown","9cacb1ae":"markdown","0e4a0788":"markdown","60fb3ec0":"markdown","9f5a2663":"markdown","850ab2af":"markdown","3f28e113":"markdown","9a3cea08":"markdown","a3b16392":"markdown","171f1f67":"markdown","17618c46":"markdown","880601b9":"markdown","93ec5d50":"markdown","a6ed268d":"markdown","ff5abc44":"markdown","9df9fe26":"markdown","88ca8ece":"markdown","7999cf79":"markdown","602bcb66":"markdown","dce4ff68":"markdown","b86dffb9":"markdown","85f94c5c":"markdown","774d2856":"markdown","02e88ef5":"markdown","3818687a":"markdown","793c2373":"markdown","b49807a7":"markdown","e42385dc":"markdown","454a7d93":"markdown","a65531df":"markdown"},"source":{"a5540f3c":"# This Python 3 environment comes with helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image:\n# https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom collections import Counter\nimport re\nimport datetime\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter)\n# will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ed5a6129":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","5f159d5a":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","7f84fcb9":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","aff681dd":"df_train.info()","71722929":"df_train.head(5)","2470441d":"df_test.info()","917dc218":"df_test.head(5)","cded0ae3":"sample_submission.head(5)\n# \u043f\u0440\u0438\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:\n# \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 ('Restaurant_id') \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 ('Rating')","ab758bf3":"sample_submission.info()","c249d1cc":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c,\n# \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","b6203340":"data.info()","e589f6d0":"data.head(5)","aca74284":"data.Reviews[1]","2522b3c3":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Number_of_Reviews_isNAN',\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445\ndata['Number_of_Reviews_isNAN'] = pd.isna(\n    data['Number of Reviews']).astype('uint8')","8a3b2b0b":"data['Number_of_Reviews_isNAN']","16ce6a63":"# \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 0\ndata['Number of Reviews'].fillna(0, inplace=True)","357c4fff":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c:\ndata['Number of Reviews'].isna().value_counts()","1cfd3269":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Price Range_isNAN',\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445\ndata['Price Range_isNAN'] = pd.isna(data['Price Range']).astype('uint8')","bfa98a2e":"# \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0430\u043c\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430:\ndata['Price Range'].value_counts()","a573ebd0":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0446\u0435\u043d\u043e\u0432\u044b\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u043c:\ndata['Price Range'] = data['Price Range'].fillna('$$ - $$$')","1efab17e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c:\ndata['Price Range'].isna().value_counts()","4eddccde":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Cuisine Style_isNAN',\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445\ndata['Cuisine Style_isNAN'] = pd.isna(data['Cuisine Style']).astype('uint8')","d98dc7f4":"data['Cuisine Style_isNAN'].value_counts()","f7243218":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 'European' \u0441 \"\u043b\u0438\u0448\u043d\u0438\u043c\u0438\" \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438, \u043a\u0430\u043a \u0438 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u044f\u0447\u0435\u0439\u043a\u0430\u0445\ndata['Cuisine Style'] = data['Cuisine Style'].fillna(\"['European']\")","5bcf007f":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c:\ndata['Cuisine Style'].isna().value_counts()","36489215":" data.nunique(dropna=False)","5e2e29d5":"# \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u043a\u043e\u043f\u0438\u044e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 'City' - \u043e\u043d\u0430 \u043d\u0430\u043c \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f\ndata['City_Copy'] = data['City']","86bc8eda":"# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\namount_of_cities = len(data['City'].unique())\n# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435,'nan' \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c,\n# \u0442.\u043a. \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'City' \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n# \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434 \"One-Hot Encoding\"\ndata = pd.get_dummies(data, columns=['City'],\n                      prefix='', prefix_sep='', dummy_na=False)\ncity_sum = {} #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\nfor city in data.columns[-amount_of_cities:]:\n    city_sum[city] = data[city].sum()\nprint(\"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\", city_sum)","d99a13d0":"data.sample(5)","2b9963ff":"data['Price Range'].value_counts()","a70c3e6c":"def price_marker(price):\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0446\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 1, 2, 3:\n    if price == '$':\n        price = 1\n        return price\n    elif price == '$$$$':\n        price = 3\n        return price\n    price = 2\n    return price\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0446\u0435\u043d\u044b:\ndata['Price marked'] = data['Price Range'].apply(price_marker)","d92d5875":"# \u0446\u0435\u043b\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0448\u0430\u0433\u0430 -\n# \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\"\n# \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u0442\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u043e\u0442 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043a\u0438:\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: str(x)[1:-1])\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: x.replace(\"'\",\"\"))\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: x.replace(\" \",\"\"))\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: x.split(\",\"))","5cd8749f":"# \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\":\ndata['Number of Cuisines'] = data['Cuisine Style'].apply(lambda x: len(x))","f4ba78f7":"# \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435:\ncuisine_list = []\nfor i in data['Cuisine Style']:\n    for j in i:\n        cuisine_list.append(j)\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u0443\u0445\u043d\u044f\u043c\u0438:\ncuisine_collections = Counter(cuisine_list)\n# \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c:\ncuisine_list = list(cuisine_collections.keys())\nprint(\"\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 {} \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c\".format(len(cuisine_list)))","06a9f0fe":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0443\u0445\u043d\u0438 \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e:\ncuisine_collections","08169fce":"data.head(5)","3ef7d270":"# \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Reviews':\n# \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0438\u0437 \u043d\u0435\u0433\u043e \u0434\u0430\u0442\u044b \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 Datetime\npattern = re.compile('\\d\\d\/\\d\\d\/\\d\\d\\d\\d')\ndata['Reviews'] = data['Reviews'].fillna('')\ndata['Review_dates'] = data['Reviews'].apply(lambda x: pattern.findall(x))\ndata['Review_1'] = data['Review_dates'].apply(lambda x: x[:1])\ndata['Review_2'] = data['Review_dates'].apply(lambda x: x[1:])","81a8727d":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0440\u0435\u0432\u044c\u044e:\nfor i in range(len(data['Review_1'])):\n    if len(data['Review_1'][i]) == 0:\n        data['Review_1'][i].append('01\/07\/2018')\nfor i in range(len(data['Review_2'])):\n    if len(data['Review_2'][i]) == 0:\n        data['Review_2'][i].append('01\/03\/2018')","074ead37":"# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 Datetime:\ndata['Review_1'] = data['Review_1'].apply(\n                   lambda x: datetime.strptime(x[0], '%m\/%d\/%Y'))\ndata['Review_2'] = data['Review_2'].apply(\n                   lambda x: datetime.strptime(x[0], '%m\/%d\/%Y'))\ndata.drop(['Review_dates'], axis=1, inplace=True)","230c256c":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Review_Delta' \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0432\u044c\u044e:\ndata['Review_Delta'] = data['Review_1'] - data['Review_2']\ndata['Review_Delta'] = data['Review_Delta'].apply(lambda x: x.days)","f2ddb382":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'How_old_Review':\n# \u0441\u0442\u0430\u0440\u043e\u0441\u0442\u044c \u0440\u0435\u0432\u044c\u044e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e:\nnewest_review = data['Review_1'].max()\ndata['How_old_Review'] = data['Review_1'].apply(\n                         lambda x: (newest_review - x).days)","180e3cbc":"data.head(5)","3fc76db2":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Relative_Ranking' -\n# \u0440\u0430\u043d\u0433 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:\ndef rel_rank(row, c_s):\n    #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n    # \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n    for i in c_s.keys():\n        if row[i] == 1:\n            res = row['Ranking']\/c_s[i]\n    return res\n\ndata['Relative_Ranking'] = data.apply(lambda x: rel_rank(x, city_sum), axis=1)","b646c24a":"# \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0441 \u0430\u0433\u043b\u043e\u043c\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c wikipedia.org\n# \u043d\u0430\u0448\u0435\u043b \u0438 \u0432\u0432\u0435\u043b \u0432\u0440\u0443\u0447\u043d\u0443\u044e\npopul_data = {'Amsterdam':827, 'Athens':3168, 'Barcelona':3186,\n              'Berlin':6177, 'Bratislava':700, 'Brussels':1831,\n              'Budapest':2965, 'Copenhagen':1308, 'Dublin':1347,\n              'Edinburgh':507, 'Geneva':496, 'Hamburg':1841,\n              'Helsinki':1299, 'Krakow':1200, 'Lisbon':3000,\n              'Ljubljana':508, 'London':8416, 'Luxembourg':162,\n              'Lyon':1748, 'Madrid':3266, 'Milan':3218,\n              'Munich':1471, 'Oporto':237, 'Oslo':1558,\n              'Paris':10620, 'Prague':1301, 'Rome':3900,\n              'Stockholm':2352, 'Vienna':1897, 'Warsaw':3100,\n              'Zurich':1334}","24260e7a":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Population' - \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0442\u044b\u0441. \u0436\u0438\u0442\u0435\u043b\u0435\u0439:\ndef city_popul(row, p_d):\n    #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430\n    for i in p_d.keys():\n        if row[i] == 1:\n            res = p_d[i]\n    return res\n\ndata['Population'] = data.apply(lambda x: city_popul(x, popul_data), axis=1)","e73d3b03":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Review to Population' -\n# \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e:\ndata['Review to Population'] = data['Number of Reviews'] \/ data['Population']","65dec2b7":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Rel_Rank to Population' -\n# \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e:\ndata['Rel_Rank to Population'] = data['Relative_Ranking'] \/ data['Population']","a8f99dc6":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=100)","61fd9c7a":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","bd7902e0":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","4bfae74e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","eebb0929":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","518fb04b":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","df9a5129":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","8ae2395d":"# \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\nfig, ax = plt.subplots(figsize = (14, 6))\nsns.boxplot(x='City', y='Rating', data=df_train, ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot for ' + 'City')\nplt.show()","da40a7d2":"# \u0440\u0430\u043d\u0433\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\nfig, ax = plt.subplots(figsize = (14, 6))\nsns.boxplot(x='City', y='Ranking', data=df_train, ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot for ' + 'Ranking')\nplt.show()","41cc2507":"# \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n# \u0435\u0433\u043e \u0431\u0435\u0440\u0435\u043c \u043d\u0435 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 df_train, \u0430 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data,\n# \u0442\u0430\u043a \u043a\u0430\u043a \u0432 data \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a -\n# \"\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\":\nfig, ax = plt.subplots(figsize = (14, 6))\nsns.boxplot(x='City_Copy', y='Relative_Ranking', data=data, ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot for ' + 'Relative_Ranking')\nplt.show()","1763bcb0":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data.drop(['sample'], axis=1).corr(),)","64e05596":"# \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c,\n                      # \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\n# data.info()","fc48fb2a":"def preproc_data(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n\n    df_output = df_input.copy()\n\n    # ################### 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ##########################\n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    df_output.drop(['Restaurant_id','ID_TA',], axis = 1, inplace=True)\n\n    # ################### 2. NAN ####################################\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 (\u043f\u043e\u043f\u0443\u0442\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438):\n    df_output['Number_of_Reviews_isNAN'] = pd.isna(\n                                   df_output['Number of Reviews']).astype('uint8')\n    df_output['Number of Reviews'].fillna(0, inplace=True)\n    # \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0446\u0435\u043d\u0430\u0445 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u043c - \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0446\u0435\u043d\u043e\u0432\u044b\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u043c:\n    df_output['Price Range_isNAN'] = pd.isna(\n                                    df_output['Price Range']).astype('uint8')\n    df_output['Price Range'] = df_output['Price Range'].fillna('$$ - $$$')\n    # \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u0443\u0445\u043d\u044f\u0445 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u043c\u044f \u0441\u0430\u043c\u044b\u043c\u0438 \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u043c\u0438,\n    # \u0442\u0430\u043a \u043a\u0430\u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u043c\u044f \u043a\u0443\u0445\u043d\u044f\u043c\u0438 \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u041c\u0410\u0415, \u0447\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0435\u0439\n    df_output['Cuisine Style_isNAN'] = pd.isna(\n                                       df_output['Cuisine Style']).astype('uint8')\n    df_output['Cuisine Style'] = df_output['Cuisine Style'].fillna(\n                         \"['European', 'Vegetarian Friendly', 'International']\")\n\n    # ################### 3. Encoding #############################\n    # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:\n    amount_of_cities = len(df_output['City'].unique())\n    df_output = pd.get_dummies(df_output, columns=['City'],\n                               prefix='', prefix_sep='',dummy_na=False)\n    city_sum = {}\n    for city in df_output.columns[-amount_of_cities:]:\n        city_sum[city] = df_output[city].sum()\n\n    # ################### 4. Feature Engineering ##################\n    def price_marker(price):\n        # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0446\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 1, 2, 3\n        if price == '$':\n            price = 1\n            return price\n        elif price == '$$$$':\n            price = 3\n            return price\n        price = 2\n        return price\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0446\u0435\u043d\u044b\n    df_output['Price marked'] = df_output['Price Range'].apply(price_marker)\n\n    # \u0446\u0435\u043b\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0448\u0430\u0433\u0430 -\n    # \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\"\n    # \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u0442\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u043e\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043a\u0438:\n    df_output['Cuisine Style'] = df_output['Cuisine Style'].apply(\n                                 lambda x: str(x)[1:-1])\n    df_output['Cuisine Style'] = df_output['Cuisine Style'].apply(\n                                 lambda x: x.replace(\"'\",\"\"))\n    df_output['Cuisine Style'] = df_output['Cuisine Style'].apply(\n                                 lambda x: x.replace(\" \",\"\"))\n    df_output['Cuisine Style'] = df_output['Cuisine Style'].apply(\n                                 lambda x: x.split(\",\"))\n    # \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\":\n    df_output['Number of Cuisines'] = df_output['Cuisine Style'].apply(\n                                      lambda x: len(x))\n\n    # \u0432 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n    # \u043e\u043d \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f:\n    # long_cuisine_list = []\n    # for i in df_output['Cuisine Style']:\n    #     for j in i:\n    #         long_cuisine_list.append(j)\n    # c = Counter(long_cuisine_list)\n    # cuisine_list = list(c.keys())\n\n    # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Reviews':\n    #\u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0438\u0437 \u043d\u0435\u0433\u043e \u0434\u0430\u0442\u044b \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 Datetime\n    pattern = re.compile('\\d\\d\/\\d\\d\/\\d\\d\\d\\d')\n    df_output['Reviews'] = df_output['Reviews'].fillna('')\n    df_output['Review_dates'] = df_output['Reviews'].apply(\n                                lambda x: pattern.findall(x))\n    df_output['Review_1'] = df_output['Review_dates'].apply(lambda x: x[:1])\n    df_output['Review_2'] = df_output['Review_dates'].apply(lambda x: x[1:])\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0440\u0435\u0432\u044c\u044e:\n    for i in range(len(df_output['Review_1'])):\n        if len(df_output['Review_1'][i]) == 0:\n            df_output['Review_1'][i].append('01\/07\/2018')\n    for i in range(len(df_output['Review_2'])):\n        if len(df_output['Review_2'][i]) == 0:\n            df_output['Review_2'][i].append('01\/03\/2018')\n    # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 Datetime:\n    df_output['Review_1'] = df_output['Review_1'].apply(\n                            lambda x: datetime.strptime(x[0], '%m\/%d\/%Y'))\n    df_output['Review_2'] = df_output['Review_2'].apply(\n                            lambda x: datetime.strptime(x[0], '%m\/%d\/%Y'))\n    df_output.drop(['Review_dates'], axis=1, inplace=True)\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Review_Delta' \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0432\u044c\u044e:\n    df_output['Review_Delta'] = df_output['Review_1'] - df_output['Review_2']\n    df_output['Review_Delta'] = df_output['Review_Delta'].apply(\n                                lambda x: x.days)\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'How_old_Review'-\n    # \u0441\u0442\u0430\u0440\u043e\u0441\u0442\u044c \u0440\u0435\u0432\u044c\u044e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e:\n    newest_review = df_output['Review_1'].max()\n    df_output['How_old_Review'] = df_output['Review_1'].apply(\n                                  lambda x: (newest_review - x).days)\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Relative_Ranking' -\n    # \u0440\u0430\u043d\u0433 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n    # \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n    def rel_rank(row, c_s):\n        # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n        # \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n        for i in c_s.keys():\n            if row[i] == 1:\n                res = row['Ranking']\/c_s[i]\n        return res\n    df_output['Relative_Ranking'] = df_output.apply(\n                                    lambda x: rel_rank(x, city_sum), axis=1)\n\n    # ################### Data from internet ################################\n    # \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0441 \u0430\u0433\u043b\u043e\u043c\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c wikipedia.org\n    # \u043d\u0430\u0448\u0435\u043b \u0438 \u0432\u0432\u0435\u043b \u0432\u0440\u0443\u0447\u043d\u0443\u044e\n    popul_data = {'Amsterdam':827, 'Athens':3168, 'Barcelona':3186,\n                  'Berlin':6177, 'Bratislava':700, 'Brussels':1831,\n                  'Budapest':2965, 'Copenhagen':1308, 'Dublin':1347,\n                  'Edinburgh':507, 'Geneva':496, 'Hamburg':1841,\n                  'Helsinki':1299, 'Krakow':1200, 'Lisbon':3000,\n                  'Ljubljana':508, 'London':8416, 'Luxembourg':162,\n                  'Lyon':1748, 'Madrid':3266, 'Milan':3218,\n                  'Munich':1471, 'Oporto':237, 'Oslo':1558,\n                  'Paris':10620, 'Prague':1301, 'Rome':3900,\n                  'Stockholm':2352, 'Vienna':1897, 'Warsaw':3100,\n                  'Zurich':1334}\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Population' - \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0442\u044b\u0441. \u0436\u0438\u0442\u0435\u043b\u0435\u0439:\n    def city_popul(row, p_d):\n        #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430\n        for i in p_d.keys():\n            if row[i] == 1:\n                res = p_d[i]\n        return res\n    df_output['Population'] = df_output.apply(\n                              lambda x: city_popul(x, popul_data), axis=1)\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Review to Population' -\n    # \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e:\n    df_output['Review to Population'] = df_output['Number of Reviews'] \\\n                                      \/ df_output['Population']\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Rel_Rank to Population' -\n    # \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043e\u0442\u043d\u043e\u0441. \u0440\u0430\u043d\u0433\u0430 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e:\n    df_output['Rel_Rank to Population'] = df_output['Relative_Ranking'] \\\n                                        \/ df_output['Population']\n\n\n    # ################### 5. Clean ########################################\n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0442\u0438\u043f\u043e\u0432 \"object\" \u0438 \"Datetime\"\n    object_columns = [s for s in df_output.columns if \\\n                      df_output[s].dtypes == 'object']\n    df_output.drop(object_columns, axis = 1, inplace=True)\n\n    df_output.drop(['Review_1'], axis=1,inplace=True)\n    df_output.drop(['Review_2'], axis=1, inplace=True)\n\n\n    return df_output","a6e939ae":"df_preproc = preproc_data(data)\ndf_preproc.head(3)","fa4a22cb":"df_preproc.info()","682c457c":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","34e49aed":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435q train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(\n                                   X, y, test_size=0.2, random_state=RANDOM_SEED)","2075bd3b":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","e1677875":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","698f8534":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(\n        n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","58bc3f81":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n# \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","daa337b1":"# \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0434\u043e 0.5\ny_pred = (y_pred*2).round()\/2\ny_pred","18e5ab53":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test),\n# \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\n# \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","282d93e8":"# MAE=0.16875 < MAE=0.21 in baseline notebook","bcf416e1":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438\n# \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","487cc1c3":"test_data.sample(10)","d33a3acb":"test_data = test_data.drop(['Rating'], axis=1)","dd34f132":"sample_submission","e3c7aad7":"predict_submission = model.predict(test_data)","f269f098":"predict_submission","4a10859f":"# \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0434\u043e 0.5\npredict_submission = (predict_submission * 2).round() \/ 2\npredict_submission","d19642ab":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","59898fd1":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430","b95d7efb":"# \u0421\u0442\u043e\u043b\u0431\u0435\u0446 'City'\n\n","168ac337":"# 4. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","9ddce97f":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e.\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c, \u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","733ba56e":"## \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u0430","4ad29eb6":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","c6278653":"# Model \n\u0421\u0430\u043c ML","5024a388":"\u041d\u0430 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 4.0, \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430. \u0422\u043e\u0447\u043a\u0438-\"\u0432\u044b\u0431\u0440\u043e\u0441\u044b\" \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u0432\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u044b 0...5","ca1d0ac9":"## C\u0442\u043e\u043b\u0431\u0435\u0446 'Number of Reviews'","99cecfb8":"# \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Relative_Ranking'- \n\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435  \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","08b1a50a":"# 3. \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","4ca21d10":"![](https:\/\/www.pata.org\/wp-content\/uploads\/2014\/09\/TripAdvisor_Logo-300x119.png)\n# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor\n","a703fa5f":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435.\n","0ef733dc":"## C\u0442\u043e\u043b\u0431\u0435\u0446 'Cuisine Style'","40f9da65":"# import","9cacb1ae":"\u042f\u0432\u043d\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0433\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043d\u0435\u043c).\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445:","0e4a0788":"# \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439","60fb3ec0":"## C\u0442\u043e\u043b\u0431\u0435\u0446 'Price Range'","9f5a2663":"## \u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 boxplot:","850ab2af":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","3f28e113":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Relative_Ranking' - \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. ","9a3cea08":"# EDA \n## Exploratory Data Analysis","a3b16392":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n*  'City' - 31 \u0433\u043e\u0440\u043e\u0434 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 - \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c\n* 'Price Range'- 3 \u0433\u0440\u0430\u0434\u0430\u0446\u0438\u0438 - \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 1,2,3;","171f1f67":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","17618c46":"# DATA\n\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b","880601b9":"# \u0421\u0442\u043e\u043b\u0431\u0435\u0446 \"Price Range\"","93ec5d50":"1. \u0418\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f 'Rating'. \u0415\u0441\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 'Price Range_isNAN' \u0438 'Cuisine Style_isNAN'. \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u043f\u043e \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u0436\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0446\u0435\u043d\u0430\u043c \u0438 \u043f\u043e \u043a\u0443\u0445\u043d\u044f\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 'Number of Cuisines' \u0438  'Price Range_isNAN' \u0438 'Cuisine Style_isNAN'. \u0415\u0441\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0438\u043b\u044b \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u043d\u0433\u043e\u043c 'Ranking' \u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0430 'Population'. \u0412 \u0446\u0435\u043b\u043e\u043c, \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043e\u043b\u043b\u0438\u043d\u0435\u0430\u0440\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0432\u0438\u0434\u043d\u043e, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438.","a6ed268d":"# \u0421\u0442\u043e\u043b\u0431\u0435\u0446 'Reviews'","ff5abc44":"## \u0427\u0442\u043e \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0430 \u044d\u0442\u043e\u043c \u0448\u0430\u0433\u0435?\n* \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.\n* \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b.\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435.\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.\n* \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0442\u0438\u043f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","9df9fe26":"\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?","88ca8ece":"# Data Preprocessing\n\u0422\u0435\u043f\u0435\u0440\u044c, \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430, \u0437\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u0432\u0441\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.","7999cf79":"\u0410 \u043a\u0442\u043e-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044b \u043b\u044e\u0431\u044f\u0442 \u043f\u043e\u0435\u0441\u0442\u044c=) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","602bcb66":"\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 40000 \u0438 10000 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041e\u0431\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n* df_train \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445: 'Cuisine Style', 'Price Range', 'Number of Reviews'\n* df_test \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445: 'Cuisine Style', 'Price Range', 'Number of Reviews', 'Reviews'\n\n","dce4ff68":"# 1. \u0427\u0415\u041c \u041c\u042b \u0411\u0423\u0414\u0415\u041c \u0417\u0410\u041d\u0418\u041c\u0410\u0422\u042c\u0421\u042f?\n\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0443\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\u041a\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432 \u0433\u043e\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435: \u0432 \u043d\u0451\u043c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d \u043f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0442\u043e\u043d\u043a\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. **\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u2014 RandomForestRegression. \n\u041d\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438.**\n\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (Feature Engineering) \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438.","b86dffb9":"# 2. \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n\n\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e 40 000 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0415\u0432\u0440\u043e\u043f\u044b, \u0430 \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c, \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0441\u0430\u0439\u0442\u0430 TripAdvisor \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e:\n* Restaurant_id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \/ \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432;\n* City \u2014 \u0433\u043e\u0440\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d;\n* Cuisine Style \u2014 \u043a\u0443\u0445\u043d\u044f \u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u0431\u043b\u044e\u0434\u0430, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0435 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n* Ranking \u2014 \u043c\u0435\u0441\u0442\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0432\u043e\u0435\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430;\n* Rating \u2014 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c TripAdvisor (\u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c);\n* Price Range \u2014 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n* Number of Reviews \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n* Reviews \u2014 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430;\n* URL_TA \u2014 URL \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 TripAdvisor;\n* ID_TA \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 TripAdvisor.","85f94c5c":"# \u0421\u0442\u043e\u043b\u0431\u0435\u0446 'Cuisine Style'","774d2856":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","02e88ef5":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","3818687a":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","793c2373":"\u041f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e 'Price Range' \u044d\u0442\u043e - \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.  \n\u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e (\u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a). \u0410 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 1,2,3  ","b49807a7":"# \u0412\u044b\u0432\u043e\u0434\u044b:\n","e42385dc":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d \u043a \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c \u043e\u0442 TripAdvisor. \u0420\u0430\u0431\u043e\u0442\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u043b\u0430\u0441\u044c \u0432 \u043e\u0447\u0438\u0441\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0446\u0435\u043b\u044c\u044e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430. \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0431\u044b\u043b\u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 ML.\n\n\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0431\u044b\u043b\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 'Number of Reviews', 'Price Range' \u0438 'Cuisine Style'. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  'isNAN' \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'City' \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f 31 \u0433\u043e\u0440\u043e\u0434. \u0411\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 (7193) - \u0432 \u041b\u043e\u043d\u0434\u043e\u043d\u0435. \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u044b\u043b \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 get_dummies.\n\n\u041e\u0440\u0434\u0435\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Price Range'- 3 \u0433\u0440\u0430\u0434\u0430\u0446\u0438\u0438 - \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 1,2,3. \u0411\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 - \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0446\u0435\u043d\u043e\u0432\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435.\n\n\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Cuisine Style': \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 125 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c. \u0421\u0430\u043c\u044b\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 - \u0432\u0435\u0433\u0435\u0442\u0430\u0440\u0438\u0430\u043d\u0441\u043a\u0430\u044f \u0438 \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0430\u044f. \u041d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.\n\n\u0418\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'Reviews' \u0431\u044b\u043b\u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u044b \u0434\u0430\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a  \"\u0441\u0442\u0430\u0440\u043e\u0441\u0442\u044c \u0440\u0435\u0432\u044c\u044e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u0432 \u0434\u043d\u044f\u0445\".\n\n\u0421\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Relative_Ranking'- \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435  \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0412\u0430\u0436\u043d\u043e: \u0432 \u0438\u0442\u043e\u0433\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432\u043d\u0435\u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'Population' \u0431\u044b\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u0430 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: 'Review to Population' (\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e) \u0438 'Rel_Rank to Population' (\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e). \n\n\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043e\u043b\u043b\u0438\u043d\u0435\u0430\u0440\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 ML.\n\n\u0411\u044b\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f  \"RandomForestRegression\". \u041e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u0434\u043e 0.5, \u043a\u0430\u043a \u0448\u0430\u0433 'Rating' \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435) \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u043e \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443. \u041c\u0435\u0442\u0440\u0438\u043a\u0430 Mean Absolute Error  \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 MAE=0.16875 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u042d\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c MAE \u0438\u0437 baseline notebook.\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u0430\u044f \u0432\u044b\u0448\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 feature engineering \u0434\u0430\u043b\u0438 \u0441\u0432\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u0438 \u043f\u043e\u0432\u044b\u0441\u0438\u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n \n \n\n\n\n\n\n\n\n\n","454a7d93":"# Submission\n","a65531df":"## \u041a\u0410\u041a\u041e\u0419 \u041a\u0415\u0419\u0421 \u0420\u0415\u0428\u0410\u0415\u041c?\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 DS \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 TripAdvisor. \u041e\u0434\u043d\u0430 \u0438\u0437 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u2014 \u044d\u0442\u043e \u043d\u0435\u0447\u0435\u0441\u0442\u043d\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u043a\u0440\u0443\u0447\u0438\u0432\u0430\u044e\u0442 \u0441\u0435\u0431\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433. \u041e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430. \u0415\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u0442\u043e, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0438\u0433\u0440\u0430\u0435\u0442 \u043d\u0435\u0447\u0435\u0441\u0442\u043d\u043e, \u0438 \u0435\u0433\u043e \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c.\n\u0412\u0430\u043c \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c.\n"}}