{"cell_type":{"68f74ee4":"code","0d90002f":"code","fa8702fe":"code","5c66445d":"code","7e9d5055":"code","573f428a":"code","ba5912f3":"code","8648f31c":"code","8c27d939":"code","ce6ab6cc":"code","ed835149":"code","cccc37e3":"code","a7315f10":"code","c40d6b31":"code","23be7b09":"code","b7766855":"code","475cb9d6":"code","0c9cb0b2":"code","73faa40b":"code","02c786d4":"code","1c520254":"code","ce5a5f0e":"code","6b151081":"code","a23a9d21":"code","b6325a4b":"code","c210cf81":"code","cf089a7a":"code","f14aa78e":"code","d5ea51fe":"code","da80ae27":"code","f0159731":"code","07aaf89a":"code","17919fdc":"code","874d337e":"code","39f1d13b":"code","c8c252a4":"code","7934cb02":"code","f921124f":"code","1f21922f":"code","dcf2074a":"code","68e723ab":"code","189edd76":"code","0bc3bf4c":"code","3975ab66":"code","5c4e417f":"code","69ec466d":"code","8943fecc":"code","2a7dd398":"code","04cfa113":"code","b743dab0":"code","e3bdb034":"code","afa5e429":"markdown","c00147ad":"markdown","fb1e4447":"markdown","cddacb80":"markdown","47938d75":"markdown","8040b51e":"markdown","86b97656":"markdown","a7ff4610":"markdown","078ad5f0":"markdown","d8155974":"markdown","0b5bc36e":"markdown"},"source":{"68f74ee4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d90002f":"import tensorflow as tf\ntf.test.is_gpu_available()","fa8702fe":"device_name = tf.test.gpu_device_name()\nif device_name != '\/device:GPU:0':\n  raise SystemError('GPU device not found')\nprint('Found GPU at: {}'.format(device_name))","5c66445d":"tf.device('\/device:GPU:0')","7e9d5055":"import matplotlib.pyplot as plt\nimport datetime\nimport matplotlib.dates as mdates\nfrom datetime import datetime, timedelta\nimport seaborn as sns\nfrom pandas.plotting import register_matplotlib_converters\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout\nimport keras_tuner as kt","573f428a":"register_matplotlib_converters()\nsns.set(font_scale=1.5, style=\"whitegrid\")","ba5912f3":"df = pd.read_csv(\"..\/input\/historical-bitcoin-data\/Bitcoin Historical Data - In Rupees.csv\")","8648f31c":"df[\"Date\"] = df[\"Date\"].replace(\",\", \"\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\" \", \"-\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Jan\", \"01\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Feb\", \"02\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Mar\", \"03\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Apr\", \"04\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"May\", \"05\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Jun\", \"06\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Jul\", \"07\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Aug\", \"08\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Sep\", \"09\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Oct\", \"10\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Nov\", \"11\", regex=True)\ndf[\"Date\"] = df[\"Date\"].replace(\"Dec\", \"12\", regex=True)","8c27d939":"df['Date']","ce6ab6cc":"df.head()","ed835149":"df[\"Price\"] = df[\"Price\"].replace(\",\", \"\", regex=True)\ndf[\"Open\"] = df[\"Open\"].replace(\",\", \"\", regex=True)\ndf[\"High\"] = df[\"High\"].replace(\",\", \"\", regex=True)\ndf[\"Low\"] = df[\"Low\"].replace(\",\", \"\", regex=True)\ndf[\"Change %\"] = df[\"Change %\"].replace(\"%\", \"\", regex=True)","cccc37e3":"def value_to_float(x):\n    if type(x) == float or type(x) == int:\n        return x\n    if 'K' in x:\n        if len(x) > 1:\n            return float(x.replace('K', '')) * 1000\n        return 1000.0\n    if 'M' in x:\n        if len(x) > 1:\n            return float(x.replace('M', '')) * 1000000\n        return 1000000.0\n    if 'B' in x:\n        return float(x.replace('B', '')) * 1000000000\n    return 0.0\n\ndf['Vol.'] = df['Vol.'].apply(value_to_float)","a7315f10":"df['Date'] = pd.to_datetime(df[\"Date\"], format='%m-%d-%Y')","c40d6b31":"df.head()","23be7b09":"df.describe()","b7766855":"df[\"Price\"] = pd.to_numeric(df[\"Price\"], downcast=\"float\")\ndf[\"Open\"] = pd.to_numeric(df[\"Open\"], downcast=\"float\")\ndf[\"High\"] = pd.to_numeric(df[\"High\"], downcast=\"float\")\ndf[\"Low\"] = pd.to_numeric(df[\"Low\"], downcast=\"float\")\ndf[\"Vol.\"] = pd.to_numeric(df[\"Vol.\"], downcast=\"float\")\ndf[\"Change %\"] = pd.to_numeric(df[\"Change %\"], downcast=\"float\")","475cb9d6":"df.info()","0c9cb0b2":"plt.style.use('seaborn')","73faa40b":"price_date = df['Date']\nprice_close = df['Price']\nplt.plot_date(price_date, price_close, linestyle='solid')\nplt.tight_layout()\nplt.show()","02c786d4":"fig = plt.figure(figsize = (10, 5))\nplt.plot(df[\"Date\"], df[\"Vol.\"], color ='maroon')\nplt.title(\"Trading Volume Chart\")\nplt.show()","1c520254":"ma_day = [50, 200]\n\nfor ma in ma_day:\n    column_name = f\"MA for {ma} days\"\n    df[column_name] = df['Price'].rolling(ma).mean()","ce5a5f0e":"plt.style.use(\"fivethirtyeight\")\nplt.plot(df['Date'],df[['Price', 'MA for 50 days', 'MA for 200 days']])\nplt.legend(['Price', 'MA for 50 days', 'MA for 200 days'])","6b151081":"df = df.set_index('Date')","a23a9d21":"df['Daily Return'] = df['Price'].pct_change()\ndf['Daily Return'].plot(legend=True, linestyle='--', marker='o')","b6325a4b":"sns.distplot(df['Daily Return'].dropna(), bins=100, color='purple')\nplt.ylabel('Daily Return')","c210cf81":"plt.figure(figsize=(16,6))\nplt.title('Close Price History')\nplt.plot(df['Price'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","cf089a7a":"df.drop([\"Change %\",\"MA for 50 days\",\"MA for 200 days\",\"Daily Return\"],axis=1,inplace=True)","f14aa78e":"df","d5ea51fe":"df = df[::-1]","da80ae27":"X_train0, X_test0, y_train0, y_test0 = train_test_split(df[[\"Vol.\",\"Open\",\"High\",\"Low\"]], df['Price'], test_size=0.05, random_state=42,shuffle=False)","f0159731":"X_train0","07aaf89a":"\n\nscaler = MinMaxScaler()\nscaled_data = scaler.fit_transform(df[[\"Vol.\",\"Open\",\"High\",\"Low\"]])\n\n\nscaler_y = MinMaxScaler()\nscaled_data_y = scaler_y.fit_transform(df[[\"Price\"]])","17919fdc":"scaled_data","874d337e":"X_train, X_test, y_train, y_test = train_test_split(scaled_data, scaled_data_y, test_size=0.05, random_state=42,shuffle=False)","39f1d13b":"X_train","c8c252a4":"print(X_train.shape)","7934cb02":"X_train, X_test, y_train, y_test = np.array(X_train),np.array(X_test), np.array(y_train), np.array(y_test)","f921124f":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\nX_train.shape","1f21922f":"y_train = np.reshape(y_train, (y_train.shape[0], 1))\ny_test = np.reshape(y_test, (y_test.shape[0],1))\ny_train.shape","dcf2074a":"def model_builder(hp):\n    model = Sequential()\n    model.add(LSTM(hp.Int('input_unit',min_value=32,max_value=512,step=32), return_sequences=True, input_shape= ( X_train.shape[1],X_train.shape[2])))\n    for i in range(hp.Int('n_layers', 1, 4)):\n        model.add(LSTM(hp.Int(f'lstm_{i}_units',min_value=32,max_value=512,step=32),return_sequences=True))\n    model.add(LSTM(hp.Int('layer_2_neurons',min_value=32,max_value=512,step=32)))\n    model.add(Dropout(hp.Float('Dropout_rate',min_value=0,max_value=0.5,step=0.1)))\n    model.add(Dense(30, activation=hp.Choice('dense_activation',values=['relu', 'sigmoid'],default='relu')))\n    model.add(Dense(1, activation=hp.Choice('dense_activation',values=['relu', 'sigmoid'],default='relu')))\n   \n    model.compile(loss='mean_squared_error', optimizer='adam',metrics = ['mse'])\n    \n    return model\n    \ntuner = kt.RandomSearch(model_builder, objective=\"mse\", max_trials = 4, executions_per_trial =2,directory = \".\/\")\n\ntuner.search(x=X_train, y=y_train, epochs = 20, batch_size =64, validation_data=(X_test, y_test))","68e723ab":"best_model = tuner.get_best_models(num_models=1)[0]","189edd76":"tuner.results_summary()","0bc3bf4c":"y_pred = best_model.predict(X_test)","3975ab66":"# from keras.models import Sequential\n# from keras.layers import Dense, LSTM\n\n# # Build the LSTM model\n# model = Sequential()\n# model.add(LSTM(128, return_sequences=True, input_shape= ( X_train.shape[1],X_train.shape[2])))\n# model.add(LSTM(64, return_sequences=False))\n# model.add(Dense(25))\n# model.add(Dense(1))\n\n# # Compile the model\n# model.compile(optimizer='adam', loss='mean_squared_error')\n\n# # Train the model\n# model.fit(X_train, y_train, batch_size=2, epochs=100, verbose=0)","5c4e417f":"y_pred.shape","69ec466d":"# y_pred=model.predict(X_test)","8943fecc":"y_pred = scaler_y.inverse_transform(y_pred)","2a7dd398":"type(y_test0)","04cfa113":"valid = pd.DataFrame(y_test0)\nvalid['Predicted'] = y_pred","b743dab0":"plt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(y_train0)\nplt.plot(valid[['Price', 'Predicted']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","e3bdb034":"valid","afa5e429":"## Checking if GPU is avaliable.","c00147ad":"## What was the daily return of the stock on average?\n\nNow that we've done some baseline analysis, let's go ahead and dive a little deeper. We're now going to analyze the risk of Bitcoin investments. In order to do so we'll need to take a closer look at the daily changes of the crypto currency, and not just its absolute value. Let's go ahead and use pandas to retrieve teh daily returns for Botcoin.","fb1e4447":"## Plot of price variation as per the date\nThe following plot shows how the prices vary day to day in chronological order.","cddacb80":"## Predicting the closing price of Bitcoin","47938d75":"Now that we've seen the visualizations for the closing price and the volume traded each day, let's go ahead and caculate the moving average for the stock.","8040b51e":"## What was the moving average of BitCoin?\n\nThe 50-day moving average is calculated by summing up the past 50 data points and then dividing the result by 50, while the 200-day moving average is calculated by summing the past 200 days and dividing the result by 200.","86b97656":"## Objective\nThe aim of this kernal is to train an LSTM model to predict the future price of Bitcoin based on past time series data. This kernal will use LSTM model from the Keras Library\n\n## What is LSTM?\n\nLSTM stands for long short-term memory networks, used in the field of Deep Learning. It is a variety of recurrent neural networks (RNNs) that are capable of learning long-term dependencies, especially in sequence prediction problems. LSTM has feedback connections, i.e., it is capable of processing the entire sequence of data, apart from single data points such as images. This finds application in speech recognition, machine translation, etc. LSTM is a special kind of RNN, which shows outstanding performance on a large variety of problems.\n\n<center><img src = \"https:\/\/miro.medium.com\/max\/1400\/1*goJVQs-p9kgLODFNyhl9zA.gif\" alt=\"LSTM aniamtion\" width=700px><\/center>\n\n","a7ff4610":"## Loading Dataset and Performing EDA\n\n","078ad5f0":"<h1><center style=\"color: navy\"> Bitcoin Price Prediction using LSTM <\/center><\/h1>\n<center><img src = \"https:\/\/img.etimg.com\/photo\/84370297.cms\" alt=\"Brain Scan\" width=700px><\/center>\n\n#### What is Bitcoin?\n\nBitcoins can be used to buy merchandise anonymously. In addition, international payments are easy and cheap because bitcoins are not tied to any country or subject to regulation. Small businesses may like them because there are no credit card fees. Some people just buy bitcoins as an investment, hoping that they\u2019ll go up in value.\n\n#### How is Bitcoin traded?\n\nMany marketplaces called \u201cbitcoin exchanges\u201d allow people to buy or sell bitcoins using different currencies. Coinbase is a leading exchange, along with Bitstamp and Bitfinex. But security can be a concern: bitcoins worth tens of millions of dollars were stolen from Bitfinex when it was hacked in 2016.\n\nPeople can send bitcoins to each other using mobile apps or their computers. It\u2019s similar to sending cash digitally.\n\nPeople compete to \u201cmine\u201d bitcoins using computers to solve complex math puzzles. This is how bitcoins are created. Currently, a winner is rewarded with 6.25 bitcoins roughly every 10 minutes.","d8155974":"## Libraries Used\n<ul>\n    <li>Numpy<\/li>\n    <li>Pandas<\/li>\n    <li>Keras<\/li>\n    <li>Matplotlib<\/li>\n    <li>Sklearn<\/li>\n<\/ul>","0b5bc36e":"## Plot of volume variation as per the date\nThe following plot shows how the volume vary day to day in chronological order."}}