{"cell_type":{"0b01ac4d":"code","1a716920":"code","b4bab29a":"code","9d099262":"code","0eef68e4":"code","a74522dc":"code","db32e427":"code","5119bc89":"code","e030d46c":"code","650f1356":"code","009b28a0":"code","3236ded6":"markdown","296b099f":"markdown","2db9a80f":"markdown","55fa9495":"markdown","8c9a0eb4":"markdown"},"source":{"0b01ac4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import classification_report, mean_squared_error\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a716920":"creditcards = pd.read_csv(\"\/kaggle\/input\/creditcard-fraud-detection\/creditcard.csv\")","b4bab29a":"print(creditcards.columns)\nprint(creditcards.shape)","9d099262":"corMatrix = creditcards.corr()","0eef68e4":"sns.heatmap(corMatrix)\nplt.show","a74522dc":"xcol = creditcards.columns.tolist()\n","db32e427":"xcol = [col for col in xcol if col not in [\"Class\"]]\nycol = \"Class\"\nprint(xcol)","5119bc89":"X = creditcards[xcol]\nY = creditcards[ycol]","e030d46c":"#defining predictions\nIF = IsolationForest(max_features = 4)\nIF.fit(X)\nYPredictions = IF.predict(X)\n\n#Switch values to coincide with 0=valid\nYPredictions[YPredictions==1] = 0\nYPredictions[YPredictions == -1] = 1\n\n\nprint(classification_report(Y,YPredictions))","650f1356":"Actualfraud = creditcards.index[creditcards[\"Class\"]==1].tolist()\nlen(Actualfraud)\n\n","009b28a0":"countmiss = 0\nfor fraud in Actualfraud:\n    print(\"The Predicted value for fraud at line: {} is {}\".format(fraud, YPredictions[fraud]))\n    if YPredictions[fraud] == 0:\n        countmiss = countmiss+1\n\nprint(\"Total missed: {}\".format(countmiss))\naccuracy = (len(Actualfraud)-countmiss)\/float(len(Actualfraud))*100\nprint(\"Accuracy: {}%\".format(accuracy))","3236ded6":"Since there are only 492 Fraud Cases, I am going to compare my predictions with the actual.","296b099f":"A little bit about myself. I was a practicing engineer in Canada that has industry experience mostly in the energy industry space. I deal with a lot of data analysis (not machine learning) with mostly financial and scada data.\n\nI have recently quit my job upon receiving an offer for graduate school in Software Engineering. While waiting for school to start, I am currently trying to improve my skillset and have just recently found Kaggle, so here I am :)","2db9a80f":"This is my first notebook so it is just a test. In this case, I am using the creditcard-fraud-detection dataset and just playing around with the IsolationForest model. As you can see, the precision that I am getting for detecting fraud is not that great (82%). I will continue to look at in how to improve (or perhaps you can give me pointers?) for fraud detection as I have read somewhere iforest should be the best anomaly detection.","55fa9495":"Since we are classifying if there is a fraud, Y = class and X = everything else","8c9a0eb4":"1. # My First Step of the Kaggle Journey: Credit Card Fraud Test"}}