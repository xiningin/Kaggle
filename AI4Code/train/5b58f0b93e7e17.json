{"cell_type":{"612bba4b":"code","f71d603a":"code","03272eca":"code","3ca4f371":"code","6d87146a":"code","ccdaf38e":"code","68313616":"code","5be6bcaf":"code","8a15a783":"code","5cc9c50c":"code","9cf57f9d":"code","320b5346":"code","c94b5caf":"code","cb3a9c60":"code","33934876":"code","0998bc79":"code","adf4260c":"code","0eb6ca65":"code","785c5c58":"code","57d783ee":"code","b100a490":"code","25bfe15d":"code","6dbb478c":"code","409efc04":"code","844e860e":"code","bbffe50f":"code","edfba838":"code","1ff7ee75":"code","3bfc6319":"code","0ee23e5d":"code","428f6f2e":"code","559d97bc":"code","b79ef063":"code","a2b08778":"code","5b38e6af":"code","f0a82044":"code","85b26a52":"code","3558e749":"code","c094f6bd":"code","4aab7b15":"code","32910d6e":"code","3eff1bb5":"code","7e6b9fc9":"code","8fc685aa":"code","489ca55d":"code","c4b1327a":"code","3b50c3c3":"code","c5aab3b2":"code","4bbcc3ca":"code","8765eb3a":"code","90cabeca":"markdown","0c0745c4":"markdown","0282091b":"markdown","132cd6f3":"markdown","7e5008bf":"markdown","e04b41dd":"markdown","be76a223":"markdown","c9d398eb":"markdown","dcfee162":"markdown","480aedd8":"markdown","2e686b05":"markdown","31e4ec63":"markdown","b8f0fe12":"markdown","e0959284":"markdown","8762559c":"markdown","8deb2795":"markdown","25f69602":"markdown","86b0be6d":"markdown","c89ef1ec":"markdown","a48703d1":"markdown","b5b81101":"markdown","279a202f":"markdown","a777bfab":"markdown"},"source":{"612bba4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f71d603a":"df=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","03272eca":"df.head(5)","3ca4f371":"df.info()","6d87146a":"df.isnull().sum()","ccdaf38e":"df.describe().T","68313616":"import plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ninit_notebook_mode(connected=True)  ","5be6bcaf":"male = df[df[\"sex\"]==1]\nfemale = df[df[\"sex\"]==0]\n\nmale_survi = male[df[\"DEATH_EVENT\"]==0]\nmale_not = male[df[\"DEATH_EVENT\"]==1]\nfemale_survi = female[df[\"DEATH_EVENT\"]==0]\nfemale_not = female[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['Male - Survived','Male - Not Survived', \"Female -  Survived\", \"Female - Not Survived\"]\nvalues = [len(male[df[\"DEATH_EVENT\"]==0]),len(male[df[\"DEATH_EVENT\"]==1]),\n         len(female[df[\"DEATH_EVENT\"]==0]),len(female[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - Gender\")\nfig.show()","8a15a783":"anaemia=df[df['anaemia']==1]\nno_anaemia=df[df['anaemia']==0]\ndeath_with_anaemia=anaemia[df['DEATH_EVENT']==1]\nsur_with_anaemia=anaemia[df['DEATH_EVENT']==0]","5cc9c50c":"values_1=[len(death_with_anaemia),len(sur_with_anaemia)]\nlabels_1=['not survived having anaemia','survived having anaemia']\nfig=go.Figure(data=[go.Pie(labels=labels_1,values=values_1,hole=0.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - Aneamia\")\nfig.show()","9cf57f9d":"surv=df[df['DEATH_EVENT']==0]['age']\nnot_surv=df[df['DEATH_EVENT']==1]['age']\nvalues=[surv,not_surv]\nlabels=['survived','not_survived']\nfig=ff.create_distplot(values,labels,bin_size=0.5)\nfig.show()","320b5346":"smoke=df[df['smoking']==1]\nnot_smoke=df[df['smoking']==0]\nsmoke_surv=smoke[df['DEATH_EVENT']==0]\nsmoke_not_surv=not_smoke[df['DEATH_EVENT']==1]\nnot_smoke_surv=not_smoke[df['DEATH_EVENT']==0]\nnot_smoke_not_surv=not_smoke[df['DEATH_EVENT']==1]\nvalues=[len(smoke_surv),len(smoke_not_surv),len(not_smoke_surv),len(not_smoke_not_surv)]\nlabels=['smoke-survived','smoke -not survived','not smoke-survived','not smoke-not survived']\n","c94b5caf":"fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on - Smoking\")","cb3a9c60":"plt.figure(figsize=(12,5))\nsns.countplot(df['diabetes'],data=df)","33934876":"diabetes_yes = df[df['diabetes']==1]\ndiabetes_no = df[df['diabetes']==0]\ndiabetes_yes_survi = diabetes_yes[df[\"DEATH_EVENT\"]==0]\ndiabetes_yes_not_survi = diabetes_yes[df[\"DEATH_EVENT\"]==1]\ndiabetes_no_survi = diabetes_no[df[\"DEATH_EVENT\"]==0]\ndiabetes__no_not_survi = diabetes_no[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['Diabetes Yes - Survived','Diabetes Yes - Not Survived', 'Diabetes NO - Survived', 'Diabetes NO - Not Survived']\nvalues = [len(diabetes_yes[df[\"DEATH_EVENT\"]==0]),len(diabetes_yes[df[\"DEATH_EVENT\"]==1]),\n         len(diabetes_no[df[\"DEATH_EVENT\"]==0]),len(diabetes_no[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - Diabetes\")\nfig.show()","0998bc79":"hbp_yes = df[df['high_blood_pressure']==1]\nhbp_no = df[df['high_blood_pressure']==0]\nhbp_yes_survi = hbp_yes[df[\"DEATH_EVENT\"]==0]\nhbp_yes_not_survi = hbp_yes[df[\"DEATH_EVENT\"]==1]\nhbp_no_survi = hbp_no[df[\"DEATH_EVENT\"]==0]\nhbp_no_not_survi = hbp_no[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['HBP Yes - Survived','HBP Yes - Not Survived', 'HBP No - Survived', 'HBP NO - Not Survived']\nvalues = [len(hbp_yes[df[\"DEATH_EVENT\"]==0]),len(hbp_yes[df[\"DEATH_EVENT\"]==1]),\n         len(hbp_no[df[\"DEATH_EVENT\"]==0]),len(hbp_no[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - HBP(high blood pressure)\")\nfig.show()","adf4260c":"value=df.corr()\nplt.figure(figsize=(12,5))\ncmap=sns.diverging_palette(h_neg=10,h_pos=240,as_cmap=True)\nsns.heatmap(value,cmap=cmap,center=0,linewidth=1,annot=True,fmt=\".2f\")\nplt.show()","0eb6ca65":"mask=np.triu(np.ones_like(value,dtype=bool))\nplt.figure(figsize=(12,5))\ncmap=sns.diverging_palette(h_neg=10,h_pos=240,as_cmap=True)\nsns.heatmap(value,mask=mask,cmap=cmap,center=0,linewidth=1,annot=True,fmt=\".2f\")\nplt.show()\n","785c5c58":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\ny=df['DEATH_EVENT']\nx=df.drop('DEATH_EVENT',axis=1)","57d783ee":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=12)","b100a490":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nsc=StandardScaler()\nlr=LogisticRegression(max_iter=10000)\nx_train=sc.fit_transform(x_train)","25bfe15d":"from sklearn.metrics import accuracy_score\nlr.fit(x_train,y_train)\npreds=lr.predict(sc.transform(x_test))\nscore=accuracy_score(y_test,preds)","6dbb478c":"score","409efc04":"rfe_lr=RFE(estimator=lr,n_features_to_select=9,verbose=1)\nrfe_lr.fit(x_train,y_train)\nrfe_lr.score(sc.transform(x_test),y_test)","844e860e":"lr_mask=rfe_lr.support_","bbffe50f":"x.columns[rfe_lr.support_]","edfba838":"dict(zip(x.columns,rfe_lr.ranking_))","1ff7ee75":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\nrfc.feature_importances_","3bfc6319":"mask=rfc.feature_importances_ >0.1\nx_reduced=x.loc[:,mask]\nprint(x_reduced.columns)","0ee23e5d":"rfe_rfc=RFE(estimator=rfc,n_features_to_select=9,verbose=1)\nrfe_rfc.fit(x_train,y_train)\nrfe_rfc.score(sc.transform(x_test),y_test)\nrfc_mask=rfe_rfc.support_","428f6f2e":"x.columns[rfe_rfc.support_]","559d97bc":"dict(zip(x.columns,rfe_rfc.ranking_))","b79ef063":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\nrfe_gb = RFE(estimator=gbc, \n             n_features_to_select=9, step=3, verbose=1)\nrfe_gb.fit(x_train, y_train)","a2b08778":"rfe_gb.score(sc.transform(x_test),y_test)","5b38e6af":"rfe_gb_mask = rfe_gb.support_","f0a82044":"votes=np.sum([lr_mask,rfe_gb_mask,rfc_mask],axis=0)\nprint(votes)\n","85b26a52":"final_mask=votes>=3\nx_final=x.loc[:,final_mask]","3558e749":"x_final.columns","c094f6bd":"features=df[['age', 'ejection_fraction', 'serum_creatinine', 'serum_sodium', 'sex','platelets',\n       'time']]","4aab7b15":"from sklearn.model_selection import train_test_split\nx_train_1,x_test_1,y_train_1,y_test_1=train_test_split(features,y,test_size=0.2,random_state=12)","32910d6e":"x_train_std=sc.fit_transform(x_train_1)","3eff1bb5":"gbc.fit(x_train_std,y_train_1)\npreds_1=gbc.predict(sc.transform(x_test_1))\nscore_1=accuracy_score(y_test_1,preds_1)","7e6b9fc9":"score_1 *100","8fc685aa":"from sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\ncm = confusion_matrix(y_test_1, preds_1)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Gradient Boost Classifier Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","489ca55d":"rfc.fit(x_train_std,y_train_1)\npreds_2=rfc.predict(sc.transform(x_test_1))\nscore_2=accuracy_score(y_test_1,preds_2)","c4b1327a":"score_2 *100","3b50c3c3":"cm = confusion_matrix(y_test, preds_2)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Gradient Boost Classifier Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","c5aab3b2":"from sklearn.svm import SVC\nsvm=SVC()\nsvm.fit(x_train_std,y_train_1)\npreds_3=svm.predict(sc.transform(x_test_1))\nscore_3=accuracy_score(y_test_1,preds_3)","4bbcc3ca":"score_3 *100","8765eb3a":"cm = confusion_matrix(y_test, preds_3)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Gradient Boost Classifier Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","90cabeca":"# Lets import the data first","0c0745c4":"**lets visualize the various aspects of the data and try to observe the relationship between different features**","0282091b":"# Analysis on survival: High Blood Pressure","132cd6f3":"# RFE WITH RANDOM FOREST\n","7e5008bf":"# Gender Analysis","e04b41dd":"*the above dictonary shows the features that got eliminated in varoius iterations *","be76a223":"*please upvote the notebook if you like my work and found this notebook helpful*","c9d398eb":"# Analysis on survival:Age","dcfee162":"#  Analysis on survival:SMOKING","480aedd8":"lets dive into the daaset for more insight information","2e686b05":"# Feature Engineering:Tree based feature selection","31e4ec63":"**now move into the maths of the dataset**","b8f0fe12":"**check for the null values in the dataset**","e0959284":"# Combining the votes of above three models :*here we will only cosider those features which are recommended by these three models*","8762559c":"# here we have removed 3 features and the accuracy is almost the same","8deb2795":"# so we have finally selected our features for the model ","25f69602":"# to make it more informative:**here we use masking using numpy**\n","86b0be6d":"# Analysis on Aneamia","c89ef1ec":"# Correlation:Heatmap ","a48703d1":"# Feature Engineering ","b5b81101":"# choose the feature selected by all three models i.e having three votes","279a202f":"# RFE:also known as recursive feature elemination is a feature selection technique which eliminates the less important features.For more info [click here](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_selection.RFE.html)","a777bfab":"# Feature Engineering:GradientBoosting"}}