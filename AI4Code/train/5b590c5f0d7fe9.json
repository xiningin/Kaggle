{"cell_type":{"9271462c":"code","e09e3672":"code","06049cdc":"code","4a3a780f":"code","3a83b65d":"code","ca0f8aa6":"code","f465ef40":"code","296c9ede":"code","9c17dd9d":"code","a2fbfcd0":"code","e060558f":"code","cee1fa48":"code","a34d2180":"code","8ac28c54":"code","74e4c51a":"code","359ddfa5":"code","24411a58":"code","1cc9f1d0":"code","fc838cf8":"code","460c9021":"code","4a29bfe5":"code","499bdeb5":"code","75026620":"code","82175769":"code","85d25759":"code","2e94f1bc":"code","9ad8f33f":"code","9c97e496":"code","bf9eb87f":"code","7ba8aa27":"code","6834b84c":"code","194ea96d":"code","d465b05a":"code","5ca0574b":"code","47d8e928":"code","87a64906":"code","acd3d9c4":"code","f0a3bb89":"code","15faf39d":"code","e94eefe9":"code","13c24315":"code","708ca92b":"markdown","d65ce5c8":"markdown","b679523d":"markdown","785b2096":"markdown"},"source":{"9271462c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e09e3672":"for dirname, _, filenames in os.walk('.\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","06049cdc":"import cv2\nimport glob\nimport os","4a3a780f":"os.mkdir('fm')","3a83b65d":"os.mkdir('fm\/mask')","ca0f8aa6":"os.mkdir('fm\/nomask')","f465ef40":"size=(200,200)","296c9ede":"\ninputFolder='..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\/Non Mask'\nfolderLen= len(inputFolder)\n#os.mkdir('.\/fm\/mask')\nfor img in glob.glob(inputFolder +\"\/*.*\"):\n    image=cv2.imread(img)\n    imgResized=cv2.resize(image,size)\n    cv2.imwrite(\"fm\/nomask\"+img[folderLen:],imgResized)","9c17dd9d":"inputFolder='..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\/Mask'\nfolderLen= len(inputFolder)\n#os.mkdir('.\/fm\/nomask')\nfor img in glob.glob(inputFolder +\"\/*.*\"):\n    image=cv2.imread(img)\n    imgResized=cv2.resize(image,size)\n    cv2.imwrite(\"fm\/mask\"+img[folderLen:],imgResized)","a2fbfcd0":"inputFolder='.\/fm\/nomask'\nfolderLen= len(inputFolder)\n#os.mkdir('fm')\nfor img in glob.glob(inputFolder +\"\/*.*\"):\n    image=cv2.imread(img)\n    print(image.shape)","e060558f":"inputFolder='.\/fm\/mask'\nfolderLen= len(inputFolder)\n#os.mkdir('fm')\nfor img in glob.glob(inputFolder +\"\/*.*\"):\n    image=cv2.imread(img)\n    print(image.shape)","cee1fa48":"image.load_img('.\/fm\/nomask\/IMG20210712200542_00.jpg')","a34d2180":"#IMPORTING LIBRARIES\nimport tensorflow as tf\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator","8ac28c54":"#train_data is used for feature scaling and image augmentation (image augmentation is applied to avoid overfitting).\ntrain_data = ImageDataGenerator(rescale = 1.\/255,shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n#defining training set, here size of image is reduced to 64x64, batch of images is kept as 64 and class is defined as 'binary'.\ntraining_set = train_data.flow_from_directory('.\/fm', batch_size = 5, target_size = size, class_mode = 'binary')","74e4c51a":"#defining the CNN as a sequence of layers.\ncnn = tf.keras.models.Sequential()","359ddfa5":"#adding 1st Convolutional layer\n#note that in image augmentation we kept the image size as 64x64, therefore input_shape should also be same [64,64,3] (here 3 signifies that this is a colorful image (R,G,B))\ncnn.add(tf.keras.layers.Conv2D(filters = 32,kernel_size = 3, input_shape = [200,200,3],activation = 'relu'))\n#activation function relu is applied to decrease any linearity that might have arrised while applying filters.","24411a58":"# applying max pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))","1cc9f1d0":"#adding 2nd Convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters = 32,kernel_size = 3, activation = 'relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))","fc838cf8":"#adding 3rd Convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters = 32,kernel_size = 3, activation = 'relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))","460c9021":"#the input of step 4 is an flattened array,\ncnn.add(tf.keras.layers.Flatten())","4a29bfe5":"#forming an ann with 128 input neurons\ncnn.add(tf.keras.layers.Dense(units = 400, activation = 'relu'))","499bdeb5":"#adding ouput layer of the ann\ncnn.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))","75026620":"#compiling the CNN\ncnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","82175769":"cnn","85d25759":"#training the model\ncnn.fit(x = training_set,  epochs = 50)","2e94f1bc":"cnn.save('facemask_cnn_model-200.h5')","9ad8f33f":"from keras.models import load_model \nimport numpy as np\nfrom keras.preprocessing import image\n\ndef test_mask(model,testimage):\n    classifier = load_model('facemask_cnn_model.h5')\n    training_set.class_indices\n    #importing images\n    test_img = image.load_img(testimage,target_size = (150,150))\n    #converting image to array\n    test_img = image.img_to_array(test_img)\n    test_img = np.expand_dims(test_img,axis = 0)\n    result = classifier.predict(test_img)\n    if result[0][0] >= 0.5:\n        prediction = ' Picture without mask'\n    else:\n        prediction = 'Picture with mask'\n    return prediction\n    ","9c97e496":"test_mask('facemask_cnn_model.h5','.\/fm\/nomask\/259.jpg')","bf9eb87f":"from keras.models import load_model \nclassifier = load_model('facemask_cnn_model.h5')","7ba8aa27":"import numpy as np\nfrom keras.preprocessing import image\ntraining_set.class_indices","6834b84c":"testimage=input(\"Link of test Image\")","194ea96d":"image.load_img(testimage)\n","d465b05a":"#importing images\ntest_img = image.load_img(testimage,target_size = (150,150))\n#converting image to array\ntest_img = image.img_to_array(test_img)\ntest_img = np.expand_dims(test_img,axis = 0)\nresult = classifier.predict(test_img)\nif result[0][0] >= 0.5:\n    prediction = ' Picture without mask'\nelse:\n    prediction = 'Picture with mask'\nprint(prediction)","5ca0574b":"image.load_img('.\/fm\/mask\/face (3).jpeg')","47d8e928":"image.load_img('.\/fm\/mask\/face (3).jpeg')","87a64906":"#importing images\ntest_img = image.load_img('.\/fm\/mask\/face (3).jpeg',target_size = (150,150))\n#converting image to array\ntest_img = image.img_to_array(test_img)\ntest_img = np.expand_dims(test_img,axis = 0)\nresult = classifier.predict(test_img)\nif result[0][0] >= 0.5:\n    prediction = ' Picture without mask'\nelse:\n    prediction = 'Picture with mask'\nprint(prediction)","acd3d9c4":"image.load_img('.\/IMG20210712200636_00.jpg')","f0a3bb89":"#importing images\ntest_img = image.load_img('.\/IMG20210712200636_00.jpg',target_size = (150,150))\n#converting image to array\ntest_img = image.img_to_array(test_img)\ntest_img = np.expand_dims(test_img,axis = 0)\nresult = classifier.predict(test_img)\nif result[0][0] >= 0.5:\n    prediction = ' Picture without mask'\nelse:\n    prediction = 'Picture with mask'\nprint(prediction)","15faf39d":"inputFolder=input(\"Link of Folder\")","e94eefe9":"for img in glob.glob(inputFolder +\"\/*.*\"):\n    print(img)\n    image.load_img(img)\n    #importing images\n    test_img = image.load_img(img,target_size = (150,150))\n#converting image to array\n    test_img = image.img_to_array(test_img)\n    test_img = np.expand_dims(test_img,axis = 0)\n    result = classifier.predict(test_img)\n    if result[0][0] >= 0.5:\n        prediction = ' Picture without mask'\n    else:\n        prediction = 'Picture with mask'\n    print(prediction)","13c24315":" image.load_img(img)","708ca92b":"#size","d65ce5c8":"# Training the model","b679523d":"# above code imports 3 pakages","785b2096":"# Above code gives list of files and directories"}}