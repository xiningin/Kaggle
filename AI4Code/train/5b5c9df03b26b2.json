{"cell_type":{"8bf5b558":"code","8921dd3b":"code","f3e34fee":"code","2fe94e62":"code","8c3091b2":"code","c8e28b99":"code","3fba0520":"code","18841577":"code","e52c60bc":"code","fb7966fc":"code","c10d39ca":"code","7e6a0ffd":"code","86dc30e5":"code","d7972e66":"code","023297d3":"code","a191e087":"code","bde3bde2":"code","e332069f":"code","f0445bba":"code","561cdb17":"code","b5d0aafb":"code","eddac75b":"code","bd22a8d3":"code","45313939":"code","54b907c9":"code","36773ba1":"code","791c70b4":"code","54972226":"code","3a0af769":"markdown","9efb656e":"markdown","976bd615":"markdown","579f38c8":"markdown","8db57b79":"markdown","083d4cf8":"markdown","ef105aac":"markdown","2f466930":"markdown","75633ea9":"markdown"},"source":{"8bf5b558":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler","8921dd3b":"train_data = pd.read_csv(\"..\/input\/train.csv\")\n# first five train_data samples\ntrain_data.head()","f3e34fee":"# summary of the training dataset\ntrain_data.info()","2fe94e62":"# changing the datatype of the Pclass column\ntrain_data['Pclass'] = train_data['Pclass'].astype('object')","8c3091b2":"train_data.isna().sum()","c8e28b99":"# filling the nan values in the age column with mean age\ntrain_data['Age'] = train_data['Age'].fillna(round(train_data['Age'].mean()))\ntrain_data['Embarked'] = train_data['Embarked'].fillna(train_data['Embarked'].mode()[0])","3fba0520":"survival = pd.crosstab(train_data['Survived'], train_data['Sex'], normalize = True)\nprint(survival)\nsurvival.plot(kind = 'Bar', stacked = True)","18841577":"sns.countplot(y = \"Pclass\", hue = \"Survived\", data = train_data)","e52c60bc":"sns.countplot(y= 'Embarked', hue = \"Survived\", data = train_data)","fb7966fc":"numerical = list(set(['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']))\ncorr_matrix = train_data[numerical].corr()\nsns.heatmap(corr_matrix, annot = True)","c10d39ca":"X = train_data.drop([\"Survived\", \"Name\", \"Cabin\", \"Ticket\", 'Sex', 'Embarked'], axis = 1)\nembarked_sex = train_data[['Sex', 'Embarked']]\nembarked_sex = pd.get_dummies(embarked_sex, prefix = [\"Sex\", \"Embarked\"])\ny = train_data.Survived\nX = pd.concat([X,embarked_sex], axis = 1)\nX.head()","7e6a0ffd":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.40)","86dc30e5":"my_model1 = RandomForestClassifier(random_state = 1)\npipeline1 = make_pipeline(my_model1)\npipeline1.fit(X_train, y_train)\ny_val1 = pipeline1.predict(X_test)\nprint(accuracy_score(y_test, y_val1))","d7972e66":"rf_model_on_full_data = RandomForestClassifier(random_state = 1)\nrf_model_on_full_data.fit(X,y)","023297d3":"test_data = pd.read_csv(\"..\/input\/test.csv\")\ntest_data = test_data.drop([\"Name\", \"Cabin\", \"Ticket\"], axis = 1)\ntest_data = pd.get_dummies(test_data, prefix = [\"Sex\", \"Embarked\"])\ntest_data.head()","a191e087":"test_data.isna().sum()","bde3bde2":"test_data['Age'] = test_data['Age'].fillna(round(test_data.Age.mean()))\ntest_data['Fare'] = test_data['Fare'].fillna(round(test_data.Fare.mean()))","e332069f":"test_predictions1 = rf_model_on_full_data.predict(test_data)","f0445bba":"output1 = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': test_predictions1})\noutput1.to_csv(\"submission1.csv\", index = False)","561cdb17":"my_scalar = StandardScaler()\nmy_model2 = KNeighborsClassifier(n_neighbors = 10, algorithm = 'ball_tree',\n                              leaf_size = 20, weights = 'uniform', metric = 'manhattan')\npipeline2= make_pipeline(my_scalar, my_model2)\npipeline2.fit(X_train, y_train)\ny_val2 = pipeline2.predict(X_test)\nprint(accuracy_score(y_test, y_val2))","b5d0aafb":"knn_on_full_model = KNeighborsClassifier(n_neighbors = 10, algorithm = 'ball_tree',\n                              leaf_size = 20, weights = 'uniform', metric = 'manhattan')\nknn_pipe = make_pipeline(my_scalar, knn_on_full_model)\nknn_pipe.fit(X, y)","eddac75b":"test_predictions2 = knn_pipe.predict(test_data)","bd22a8d3":"output2 = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': test_predictions2})\noutput2.to_csv(\"submission2.csv\", index = False)","45313939":"my_model3 = DecisionTreeClassifier(criterion = 'gini', random_state = 17, max_depth = 6)\npipeline3 = make_pipeline(my_model3)\npipeline3.fit(X_train, y_train)\ny_val3 = pipeline3.predict(X_test)\nprint(accuracy_score(y_test, y_val3))","54b907c9":"tree_param = {'max_depth': range(1,11),\n             'max_features': range(4,8)}\ntree_grid = GridSearchCV(my_model3, tree_param, cv = 5, n_jobs = -1, verbose = True)\ntree_grid.fit(X_train, y_train)\nprint(tree_grid.best_params_)\nprint(tree_grid.best_score_)\nprint(accuracy_score(y_test, tree_grid.predict(X_test)))","36773ba1":"tree_model_on_full_data = DecisionTreeClassifier(criterion = 'gini',random_state = 1)\ntree_param = {'max_depth': range(1,11),\n             'max_features': range(4,8)}\ntree_grid = GridSearchCV(tree_model_on_full_data, tree_param, cv = 5, n_jobs = -1, verbose = True)\ntree_grid.fit(X, y)\nprint(tree_grid.best_params_)\nprint(tree_grid.best_score_)","791c70b4":"test_predictions3 = tree_grid.predict(test_data)","54972226":"output3 = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': test_predictions3})\noutput3.to_csv(\"submission3.csv\", index = False)","3a0af769":"### Using decision trees","9efb656e":"### Survival by class","976bd615":"### Using KNN Classification","579f38c8":"From the above plot we can say that about 40% of the pasengers survived the accident. Out of the 40%, about 26% were females and the rest were males.","8db57b79":"# Categorizing the training data into feature and target variable","083d4cf8":"### Survival on the place embarked","ef105aac":"### Using the Random Forest Classification","2f466930":"### Relationship between different numeric data","75633ea9":"## Dividing the training data furthur into training and testing data"}}