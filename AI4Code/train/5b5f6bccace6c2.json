{"cell_type":{"ae563cbd":"code","178889a0":"code","a74b341a":"code","12de550a":"code","dfcc5900":"code","f7a506b4":"code","1fe2708c":"code","cbb8e9ca":"code","cba83814":"code","7d003721":"code","1acbd026":"code","6e9cc0ac":"code","4f8a3fb5":"code","2fa8dea7":"code","a1cf1299":"code","5daf1058":"code","ad097585":"code","c09941b4":"code","e2df374d":"code","9401fad6":"markdown","49b5b2cd":"markdown","1c31bb4f":"markdown"},"source":{"ae563cbd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\n#For reading stock data from yahoo\nfrom pandas_datareader.data import DataReader\n\n# For time stamps\nfrom datetime import datetime","178889a0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a74b341a":"tech_list = ['RELIANCE.NS', 'SBIN.NS', 'INFY.NS', 'TCS.NS']\n# tech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\ndf = pd.read_csv('\/kaggle\/input\/indianstockssbitcsreliinfy\/IndianStocksData(2010--2021).csv')\n# print(df)\nfor stock in tech_list:   \n#     Set DataFrame as the Stock Ticker\n    globals()[stock] = DataReader(stock, 'yahoo', start, end)\n    print(stock)\n    print(globals()[stock])","12de550a":"df = DataReader('SBIN.NS', data_source='yahoo', start='2012-01-01', end=datetime.now())\n# Show teh data\ndf\ndf.hist(bins=25, grid=False,figsize=(10, 10),color='#86bf91');","dfcc5900":"# df = DataReader('TCS', data_source='yahoo', start='2012-01-01', end=datetime.now())\n# # Show teh data\n# df\nfor stock in tech_list:   \n#     Set DataFrame as the Stock Ticker\n    df = DataReader(stock, 'yahoo', start='2012-01-01', end=datetime.now())\n    df\n    plt.figure(figsize=(16,8))\n    plt.title(f\"{stock}\")\n    plt.plot(df['Adj Close'])\n    plt.xlabel('Date', fontsize=18)\n    plt.ylabel('Adj Close Price INR', fontsize=18)\n    plt.show()","f7a506b4":"# df = DataReader('TCS', data_source='yahoo', start='2012-01-01', end=datetime.now())\n# # Show teh data\n# df\nfor stock in tech_list:   \n#     Set DataFrame as the Stock Ticker\n    df = DataReader(stock, 'yahoo', start='2012-01-01', end=datetime.now())\n    df\n    plt.figure(figsize=(16,8))\n    plt.title(f\"{stock}\")\n    plt.plot(df['Volume'])\n    plt.xlabel('Date', fontsize=18)\n    plt.ylabel('VOLUME', fontsize=18)\n    plt.show()","1fe2708c":"# Grab all the closing prices for the tech stock list into one DataFrame\nclosing_df = DataReader(tech_list, 'yahoo', start, end=datetime.now())['Adj Close']\n\n# Let's take a quick look\nclosing_df.head()\n","cbb8e9ca":"# Now that we have all the closing prices, let's go ahead and get the daily return for all the stocks,\n# Make a new tech returns DataFrame\ntech_rets = closing_df.pct_change()\ntech_rets.head()","cba83814":"rets = tech_rets.dropna()\n\narea = np.pi*20\n\nplt.figure(figsize=(12, 10))\nplt.scatter(rets.mean(), rets.std(), s=area)\nplt.xlabel('Expected return')\nplt.ylabel('Risk')\n\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(label, xy=(x, y), xytext=(50, 50), textcoords='offset points', ha='right', va='bottom', \n                 arrowprops=dict(arrowstyle='-', color='blue', connectionstyle='arc3,rad=-0.3'))","7d003721":"df = DataReader('CIPLA.NS', data_source='yahoo', start='2012-01-01', end=datetime.now())\n# Show teh data\ndf\n# for stock in tech_list:   \n# #     Set DataFrame as the Stock Ticker\n#     df = DataReader(stock, 'yahoo', start='2012-01-01', end=datetime.now())\n#     df\n#     plt.figure(figsize=(16,8))\n#     plt.title('Close Price History')\n#     plt.plot(df['Close'])\n#     plt.xlabel('Date', fontsize=18)\n#     plt.ylabel('Close Price INR', fontsize=18)\n#     plt.show()\n\nplt.figure(figsize=(16,8))\nplt.title('Adj Close Price History')\nplt.plot(df['Adj Close'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Adj Close Price INR', fontsize=18)\nplt.show()","1acbd026":"df['Daily Return'] = df['Adj Close'].pct_change()\n# Then we'll plot the daily return percentage\n\n#for SBIN\nplot = df['Daily Return'].plot(legend=True, linestyle='--', marker='o', color=\"#BB0000\")\nplot.set_title('SBIN')\nplot.set_ylabel(\"Daily Return Percentage\")","6e9cc0ac":"plt.figure(figsize=(8, 8))\n\ndf['Daily Return'] = df['Adj Close'].pct_change()\n# Then we'll plot the daily return percentage\n\nsns.distplot(df['Daily Return'].dropna(), bins=130, color='purple')\nplt.xlabel(\"Daily Return Percentage\")\nplt.title(\"SBIN\")","4f8a3fb5":"# Create a new dataframe with only the 'Close column \ndata = df.filter(['Adj Close'])\n# Convert the dataframe to a numpy array\ndataset = data.values\n# Get the number of rows to train the model on\ntraining_data_len = int(np.ceil( len(dataset) * .95 ))\n\ntraining_data_len\n#if we want more rows then change the start year ","2fa8dea7":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","a1cf1299":"train_data = scaled_data[0:int(training_data_len), :]\n# Split the data into x_train and y_train data sets\nx_train = []\ny_train = []\n\nfor i in range(200, len(train_data)):\n    x_train.append(train_data[i-200:i, 0])\n    y_train.append(train_data[i, 0])\n    if i<= 200:\n        print(x_train)\n        print(y_train)\n        print()\n        \n# Convert the x_train and y_train to numpy arrays \nx_train, y_train = np.array(x_train), np.array(y_train)\n\n# Reshape the data\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n# x_train.shape","5daf1058":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\n# Build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(128, return_sequences=True, input_shape= (x_train.shape[1], 1)))\nmodel.add(LSTM(64, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)\n","ad097585":"import math\ntest_data = scaled_data[training_data_len - 200: , :]\n# Create the data sets x_test and y_test\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(200, len(test_data)):\n    x_test.append(test_data[i-200:i, 0])\n    \n# Convert the data to a numpy array\nx_test = np.array(x_test)\n\n# Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n# Get the models predicted price values \npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\n# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\n# mse = np.square(np.subtract(predictions,y_test)).mean()\n# rmse = math.sqrt(mse)\nrmse","c09941b4":"train = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Prediction Graph')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price INR', fontsize=18)\nplt.plot(train['Adj Close'])\nplt.plot(valid[['Adj Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","e2df374d":"valid","9401fad6":"**What was the correlation between different stocks closing prices?**\nNow what if we wanted to analyze the returns of all the stocks in our list? Let's go ahead and build a DataFrame with all the ['Adj Close'] columns for each of the stocks dataframes","49b5b2cd":"****Prospective stock analysis model to improve the investment chances using Machine Learning**\n**\n\n\nSUDHANSHU KUSHWAHA - RA1711003011424\n\nNIRBHAY SINGH NARUKA - RA1711003010347\n","1c31bb4f":"Volume vs Date graph for given tech list"}}