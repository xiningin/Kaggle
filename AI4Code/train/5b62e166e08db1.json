{"cell_type":{"b37cec4b":"code","f1693ed1":"code","0d68e378":"code","f87f6228":"code","ffbc9da9":"code","30b68ca7":"code","84740b06":"code","1e0aed1d":"code","08ac3fdc":"code","e88e7c7e":"code","c8ba0904":"code","3ed0a3e5":"code","20c1fa6d":"code","2c28517e":"code","6c4a5dd3":"code","6c8dabe5":"code","e0bb3d0f":"code","6d840e3c":"code","f78855a5":"code","23ea95fc":"code","c5c5f8a4":"code","aa949d9d":"code","2a464932":"code","aa9cebb1":"code","24e13d50":"code","14bc1dac":"code","e46274a9":"code","edaf81c6":"code","fac8196b":"code","b138d7c6":"code","5f113e51":"code","57e7b9e9":"code","ae0cc3a2":"code","be111556":"code","27c0a92f":"markdown","2e84c59b":"markdown","4f1b8dad":"markdown","d55c235b":"markdown","d8fb22e8":"markdown","d37d52fb":"markdown","222f31cc":"markdown","c9c8d1d3":"markdown","9c359a1f":"markdown","7c8f98e0":"markdown","702a84bc":"markdown","d3216b94":"markdown","20432456":"markdown","faebc882":"markdown","71e94ee5":"markdown","4ca00350":"markdown","33049107":"markdown","8d334125":"markdown","fea36d2a":"markdown","83fd9955":"markdown","a2e3bad6":"markdown","6dfdd99e":"markdown","ca22378f":"markdown","4ae28c57":"markdown","40029fb4":"markdown"},"source":{"b37cec4b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nimport os \n%matplotlib inline\nfrom collections import Counter\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport math\nfrom os import listdir, mkdir\nimport pydicom\nimport scipy.ndimage\nimport pydicom as dcm\nimport imageio\nimport tqdm as tqdm\nimport glob\nfrom PIL import Image\nfrom IPython.display import HTML\n","f1693ed1":"train = pd.read_csv(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train.csv\")\ntest = pd.read_csv(\"..\/input\/rsna-str-pulmonary-embolism-detection\/test.csv\")\nsub = pd.read_csv(\"..\/input\/rsna-str-pulmonary-embolism-detection\/sample_submission.csv\")\n","0d68e378":"train.shape , test.shape, sub.shape ","f87f6228":"train.head()","ffbc9da9":"train.nunique()","30b68ca7":"files = glob.glob('..\/input\/rsna-str-pulmonary-embolism-detection\/train\/*\/*\/*.dcm')","84740b06":"features = []\nfor i in train.columns:\n    features.append(i)\nfeatures = features[3:]\nprint(features)\nprint(len(features))","1e0aed1d":"\nfig,ax = plt.subplots(3,5,figsize=(15,15))\nsns.countplot(train['pe_present_on_image'],ax=ax[0][0],)\nsns.countplot(train['negative_exam_for_pe'],ax=ax[0][1])\nsns.countplot(train['qa_motion'],ax=ax[0][2])\nsns.countplot(train['qa_contrast'],ax=ax[0][3])\nsns.countplot(train['flow_artifact'],ax=ax[1][0])\nsns.countplot(train['rv_lv_ratio_gte_1'],ax=ax[1][1])\nsns.countplot(train['rv_lv_ratio_lt_1'],ax=ax[1][2])\nsns.countplot(train['leftsided_pe'],ax=ax[1][3])\nsns.countplot(train['chronic_pe'],ax=ax[1][4])\nsns.countplot(train['true_filling_defect_not_pe'],ax=ax[2][0])\nsns.countplot(train['rightsided_pe'],ax=ax[2][1])\nsns.countplot(train['acute_and_chronic_pe'],ax=ax[2][2])\nsns.countplot(train['central_pe'],ax=ax[2][3])\nsns.countplot(train['indeterminate'],ax=ax[2][4])\n","08ac3fdc":"train.info()","e88e7c7e":"test.head()\nprint(f\" Total predictions to be Done in test set are {test.shape[0]} samples\")","c8ba0904":"print('Null values in train data:',train.isnull().sum().sum())\nprint('Null values in test data:',test.isnull().sum().sum())","3ed0a3e5":"sample = train.iloc[0]\nsample","20c1fa6d":"train[\"acute_pe\"] = -1\ntrain.drop(\"acute_pe\",axis=1,inplace=True)","2c28517e":"'''\ndef acute_pe_type(df):\n    if df[\"chronic_pe\"] == 0 and df[\"acute_and_chronic_pe \"] == 0:\n        df[\"acute_pe\"] =1\n    return df\n'''","6c4a5dd3":"import plotly.express as px\n\nfrom matplotlib import animation, rc\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nrc('animation', html='jshtml')\n\nnp.random.seed(42)","6c8dabe5":"x = train.drop(['StudyInstanceUID', 'SeriesInstanceUID', 'SOPInstanceUID'], axis=1).sum(axis=0).sort_values().reset_index()\nx.columns = ['Labels', 'Records']\nfig = px.bar(\n    x, \n    x='Records', \n    y='Labels', \n    orientation='h', \n    title='Lables with Non-Zero Entries', \n    height=600, \n    width=800\n)\nfig.show()","e0bb3d0f":"data = train.drop(['StudyInstanceUID', 'SeriesInstanceUID', 'SOPInstanceUID'], axis=1).astype(bool).sum(axis=1).reset_index()\ndata.columns = ['row', 'counts']\ndata = data.groupby(['counts'])['row'].count().reset_index()\nfig = px.pie(\n    data, \n    values=100 * data['row']\/len(train), \n    names=\"counts\", \n    title='Percentage Activations of Samples', \n    width=800, \n    height=500\n)\nfig.show()","6d840e3c":"corr = train.corr()\nf,ax=plt.subplots(figsize=(10,10))\nax = sns.heatmap(corr,cmap=\"afmhot\")#annot=True","f78855a5":"def load_scans(dcm_path):\n    files = listdir(dcm_path)\n    f = [pydicom.dcmread(dcm_path + \"\/\" + str(file)) for file in files]\n    return f","23ea95fc":"basepath = \"..\/input\/rsna-str-pulmonary-embolism-detection\/\"\nexample = basepath + \"train\/\" + train.StudyInstanceUID.values[0] +'\/'+ train.SeriesInstanceUID.values[0]\nfile_names = os.listdir(example)\nscans = load_scans(example)\n","c5c5f8a4":"print(\"Some Meta-Deta Information\")\nscans[1]","aa949d9d":"fig,ax = plt.subplots(figsize=(14,10))\nax.imshow(dcm.dcmread(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train\/6897fa9de148\/2bfbb7fd2e8b\/be0b7524ffb4.dcm\").pixel_array);\n#6897fa9de148\t2bfbb7fd2e8b\t41220fda34a3\t\nprint(\"Sample DICOM Image CT Scan\")","2a464932":"test_image = dcm.dcmread(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train\/4833c9b6a5d0\/57e3e3c5f910\/f4fdc88f2ace.dcm\").pixel_array\nprint('Image shape: ', test_image.shape)","aa9cebb1":"f, plots = plt.subplots(6, 6, sharex='col', sharey='row', figsize=(17, 17))\nfor i in range(36):\n    plots[i \/\/ 6, i % 6].axis('off')\n    plots[i \/\/ 6, i % 6].imshow(dcm.dcmread(np.random.choice(files[:5000])).pixel_array)","24e13d50":"### Source: https:\/\/www.kaggle.com\/allunia\/pulmonary-fibrosis-dicom-preprocessing\ndef load_slice(path):\n    slices = [dcm.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: float(x.ImagePositionPatient[2]))\n    try:\n        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])\n    except:\n        slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)\n        \n    for s in slices:\n        s.SliceThickness = slice_thickness\n        \n    return slices\ndef transform_to_hu(slices):\n    images = np.stack([file.pixel_array for file in slices])\n    images = images.astype(np.int16)\n\n    images[images <= -1000] = 0\n    \n    # convert to HU\n    for n in range(len(slices)):\n        \n        intercept = slices[n].RescaleIntercept\n        slope = slices[n].RescaleSlope\n        \n        if slope != 1:\n            images[n] = slope * images[n].astype(np.float64)\n            images[n] = images[n].astype(np.int16)\n            \n        images[n] += np.int16(intercept)\n    \n    return np.array(images, dtype=np.int16)","14bc1dac":"sns.set_style('white')\nhu_scans = transform_to_hu(scans)\n\nfig, ax = plt.subplots(1,2,figsize=(15,4))\n\n\nax[0].set_title(\"CT-scan in HU\")\nax[0].imshow(hu_scans[0], cmap=\"plasma\")\n#ax[1].set_title(\"HU values distribution\");\nsns.distplot(hu_scans[0].flatten(), ax=ax[1],color='red', kde_kws=dict(lw=2, ls=\"--\",color='blue'));\nax[1].grid(False)","e46274a9":"plt.figure(figsize=(12,6))\nfor n in range(20):\n    image = scans[n].pixel_array.flatten()\n    rescaled_image = image * scans[n].RescaleSlope + scans[n].RescaleIntercept\n    sns.distplot(image.flatten());\nplt.title(\"HU unit distributions for 20 examples\");","edaf81c6":"sample_patient = load_slice('..\/input\/rsna-str-pulmonary-embolism-detection\/train\/0003b3d648eb\/d2b2960c2bbf')\nsample_patient_pixels = transform_to_hu(sample_patient)\n\ndef sample_stack(stack, rows=6, cols=6, start_with=10, show_every=5):\n    fig,ax = plt.subplots(rows,cols,figsize=[18,20])\n    for i in range(rows*cols):\n        ind = start_with + i*show_every\n        ax[int(i\/rows),int(i % rows)].set_title(f'slice {ind}')\n        ax[int(i\/rows),int(i % rows)].imshow(stack[ind],cmap='bone')\n        ax[int(i\/rows),int(i % rows)].axis('off')\n    plt.show()\n\nsample_stack(sample_patient_pixels)","fac8196b":"from IPython import display\n","b138d7c6":"imageio.mimsave(\"\/tmp\/gif.gif\", sample_patient_pixels, duration=0.1)\ndisplay.Image(filename=\"\/tmp\/gif.gif\", format='png')","5f113e51":"def getvalue(feature):\n    if type(feature) == pydicom.multival.MultiValue:\n        return np.int(feature[0])\n    else:\n        return np.int(feature)","57e7b9e9":"\nim_path = []\ntrain_path = '..\/input\/rsna-str-pulmonary-embolism-detection\/train\/'\nfor i in listdir(train_path): \n    for j in listdir(train_path + i):\n        x = i+'\/'+j\n        im_path.append(x)\n\nright_pixelspacing = []\ncenter_pixelspacing = []\nslice_thicknesses = []\nids = []\nid_pth = []\nrow_values = []\ncolumn_values = []\nwindow_widths = []\nwindow_levels = []\n\nfor i in im_path:\n    ids.append(i.split('\/')[0]+'_'+i.split('\/')[1])\n    example_dcm = listdir(train_path  + i + \"\/\")[0]\n    id_pth.append(train_path + i)\n    dataset = pydicom.dcmread(train_path + i + \"\/\" + example_dcm)\n    \n    window_widths.append(getvalue(dataset.WindowWidth))\n    window_levels.append(getvalue(dataset.WindowCenter))\n    \n    spacing = dataset.PixelSpacing\n    slice_thicknesses.append(dataset.SliceThickness)\n    \n    row_values.append(dataset.Rows)\n    column_values.append(dataset.Columns)\n    right_pixelspacing.append(spacing[0])\n    center_pixelspacing.append(spacing[1])\n\n    \ndicaom_meta = pd.DataFrame(data=ids, columns=[\"ID\"])\ndicaom_meta.loc[:, \"rows\"] = row_values\ndicaom_meta.loc[:, \"columns\"] = column_values\ndicaom_meta.loc[:, \"area\"] = dicaom_meta[\"rows\"] * dicaom_meta[\"columns\"]\ndicaom_meta.loc[:, \"right_pixel_space\"] = right_pixelspacing\ndicaom_meta.loc[:, \"center_pixel_space\"] = center_pixelspacing\ndicaom_meta.loc[:, \"pixelspacing_area\"] = dicaom_meta.center_pixel_space * dicaom_meta.right_pixel_space\ndicaom_meta.loc[:, \"slice_thickness\"] = slice_thicknesses\ndicaom_meta.loc[:, \"id_pth\"] = id_pth\ndicaom_meta.loc[:, \"window_width\"] = window_widths\ndicaom_meta.loc[:, \"window_level\"] = window_levels","ae0cc3a2":"dicaom_meta.to_csv(\"meta_data_dcm.csv\",index=False)","be111556":"dicaom_meta.head()","27c0a92f":"# Image Data Exploration","2e84c59b":"![pulmonary_embolism.png](attachment:pulmonary_embolism.png)","4f1b8dad":"**In this above we could the see Hounsfield Units Distribution of Dicom Images**\n\nWe could see that most of images have HU Value near to 1000","d55c235b":"# General Information:\n\nA pulmonary embolism (PE) is caused by an artery blockage in the lung. It is time consuming to confirm a PE and prone to overdiagnosis. Machine learning could help to more accurately identify PE cases.\n\nIt is among the most fatal cardiovascular diseases. Timely and accurate diagnosis will help these patients receive better care.\n\nIn this competition, you\u2019ll detect and classify PE cases. In particular, you'll use chest CTPA images.\n\n\n\n\n\n","d8fb22e8":"***Exam-level weighted log loss:***\n![loss.PNG](attachment:loss.PNG)\n\n***Image Level Weighted Loss:***\n![image_level_loss.PNG](attachment:image_level_loss.PNG)\n\nTheir are 9 study-level labels and 1 image-level labels\n\nA **binary log loss equation** for each label is taken and then  the mean of the log loss over all labels is calculated.\n","d37d52fb":"* The Corelation of the Labels GIven could be seen above\n\n* cp_motion and cp_contrast are highly corelated to the indeterminate class\n\n* Similarly the Co-relation between Chronic_pe and Right,left and center pe could be seen","222f31cc":"# Lets Analayze the output's Done for this Sample Image \n# \nAs **Indeterminate == 0** we Compute this output Labels Only \n\n1. rv_lv_ratio_lt_1  => 1  , Which is the (RL\/LV) Ratio\n2. leftsided_pe     => 1  , Which is the positional output of PE type\n3. rightsided_pe     => 1   , Which is the positional output of PE type\n\nWe could See **Only 2 Output Categories the Output** for the Type of Pulmonary Embolism is Missing . \n\nAs we could see that the **Chronic_pe == 0 and acute_and_chronic_pe == 0** . The **Type of PE to be predicted is ACUTE TYPE.**\n\n**So a New Feature needs to be created for those samples who are Acute PE Patients**","c9c8d1d3":"Almost All the counts seemed to be skewed . So high imbalance among the PE positive and PE negative could be seen","9c359a1f":"# Lots of possibilities for Feature Engineering of the Meta Data is possible  . \n\nWell Cover that some other time :\n\n1.**Physical Area** Covered by slice and Volume Swept by a slice\n\n2. **Pixel Spacing** : Lets you  know distance covered by 1 pixel in physical World","7c8f98e0":"All the Features except the 3 UID , have binary labels associated with them either(0,1)\n\n  **Image Level Features :**\n\n1. **pe_present_on_image** => Tells Whether their is any formation of Pulmonary Embolism in the Image.( 0 - No \"PE\" , 1- \"PE\" formation)\n\n **Informational Features :**\n\nThis Features are Informational and ***Does not*** require any Predictions.\n\n1. **qa_motion** => indicates whether radiologists noted an issue with **motion** in the study . Also Binary (0 or 1)\n2. **qa_contrast** => indicates whether radiologists noted an issue with **Contrast** in the study\n3. **flow_artifact** \n4. **true_filling_defect_not_pe**  => Not a PE Defect\n\n **Exam Level Features** :\n\nAll Labels are binary Labels\n\nWeights Mentioned are Used while **Calculating the Weighted Log Loss**: \n\n1. **negative_exam_for_pe** => images in the study that have PE present , Weight Associated for Loss => **0.0736196319**\n2. **rv_lv_ratio_gte_1**  =>  whether the RV\/LV ratio present in the study is** >= 1** , Weight Associated for Loss => **0.2346625767 **\n3. **rv_lv_ratio_lt_1** => Whether ration **RV\/LV is <1** , Weight Associated for Loss => **0.0782208589**\n4. **leftsided_pe** => Indication of PE present on **Left side of Image** , Weight Associated for Loss => **0.06257668712**\n5. **rightsided_pe** => Right Sided PE , Weight Associated for Loss => **0.06257668712**\n6. **chronic_pe** => If PE** persistant for Long time **then Chronic PE , Weight Associated for Loss => 0.1042944785\n7. **acute_and_chronic_pe**  => if PE present is **both acute & chronic**   , Weight Associated for Loss => **0.1042944785**\n8. **central_pe** => center of Image PE , Weight Associated for Loss => **0.1877300613**\n9. **indeterminate** = > If** not able to create the necessary Exam Labels** then flag this to 1 , Weight Associated for Loss => **0.09202453988**\n\n\n\n\n","702a84bc":"# Extracting Meta-Data from Dicom Data and Storing in CSV Format","d3216b94":"**The HU Distrubution is mostly saturated at values between -1000  and 0  . So water and Air are the Major Constituents**","20432456":"# RSNA-STR Pulmonary Embolism Detection Data Understanding and EDA","faebc882":"# **Data overview**\n\nThis competition has unique and interesting data, let's analyze it.\n\n**SOPInstanceUID** => Is an Unique identifier associated with an Image\n \n**StudyInstanceUID SeriesInstanceUID SOPInstanceUID** => This Columns are used just for locating the dcm File\n\n\n    ","71e94ee5":"**Lets look at Sequence of Slices of Images so as to gain intuition of CT Scan**","4ca00350":"Visualization of Image Data and Animation taken from the below kernal\n\nhttps:\/\/www.kaggle.com\/nitindatta\/pulmonary-embolism-dicom-preprocessing-eda\n\n","33049107":"Train has (3 UID's) and the remaining are features and Target labels . \n\nTest has 3 columns and all those are the 3 UID's","8d334125":"# TO be Continued :\n\n1. Creating A Baseline with Pytorch\n\n**I Hope the Kernal Helps You !!**","fea36d2a":"# Points Discussed\n\n1. The outputs to be predicted (4 labels to predict ) \n2. visualization of DIcom Data\n3. Creation of Additional Feature acute_pe\n4. Understanding the Data Clearly\n5. Generating the Basic Meta-Data ","83fd9955":"Lets Checkout the Tranining Features for 1 sample Image","a2e3bad6":"# Metric:\n\nThe metric used in this competition is **weighted log loss**. It is weighted to account for the relative importance of some labels. \n\n\n","6dfdd99e":"# What are we Predicting :\n\nThe Output Format Should be **4 Labels** associated with **Every Unique Image UID **.\n\n![output-label.PNG](attachment:output-label.PNG)\n\nThe 4 Labels to Predict Are :\n\nThis 4 labels are divided into 2 Groups namely (Yes-Indeterminate) & (No-InDeterminate) , ie. If set of exam labels for an image could not be created it goes into Indeterminate group . \n\n**If NOt Indeterminate:**\n\n1. Location Label (Atleast 1) : rightsided_pe,leftsided_pe,central_pe\n\n2. (RL\/LV) Ratio (Only 1 Label) : (>=1) or (<1)\n \n3. Type of PE (Only 1) : Chronic_pe ,acute_and_chronic_pe . If Both are not then only Acute PE\n\n**If Indeterminate:**\n\n1. The QA Label are responsible for not able to determine the PE ( Atleast 1 QA Label) : qa_contrast,qa_motion\n","ca22378f":"**Lets make subplots of the dicom Data to get to know various Images**","4ae28c57":"**Animation:**","40029fb4":"* In the Above Dicom file we Could see the MetaData Associated with the image .\n\n* We use something called as Hounsfield Units which is defined as Relative quantitative measurement of radio density used by radiologists in the interpretation of computed tomography (CT) images.\n\n* The CT-scans are already in the HU format"}}