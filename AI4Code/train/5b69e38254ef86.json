{"cell_type":{"77b914e8":"code","060ad2b1":"code","2ffabd22":"code","7f3ae847":"code","eac7576d":"code","3beac109":"code","3a875885":"code","1e8f315a":"code","61a1e944":"code","ba01c527":"code","5647bfcd":"code","dad64ed2":"code","2992aa83":"code","c78ea424":"code","d74f8d23":"code","1ec243ad":"code","6faa7b11":"code","af2e72c6":"markdown","1ac18f74":"markdown","1ab1da8f":"markdown","4bce1641":"markdown","6d5b079a":"markdown","b9ceb6ec":"markdown","48703763":"markdown","b0de3d1f":"markdown","211c9fe0":"markdown","0cd4338b":"markdown","57de3e75":"markdown","64063a2b":"markdown","31ae2ba8":"markdown","8322f140":"markdown","b3798a72":"markdown"},"source":{"77b914e8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#for logistic regression\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#for Artificial Neural Networks\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout ,Flatten, Conv2D, MaxPool2D\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","060ad2b1":"train = pd.read_csv('..\/input\/train.csv')\n\ntest = pd.read_csv('..\/input\/test.csv')","2ffabd22":"train.head()","7f3ae847":"X = train.iloc[:,1:]\n\nY = train['label']","eac7576d":"score = [] # we will put scores into this serie\n\n#we will split data to evaluate model\nx_train , x_val , y_train , y_val = train_test_split(X, Y, test_size = 0.15, random_state = 41)\n\n#we will try model for each number of iteration\nfor i in range(1,15): \n    lr = linear_model.LogisticRegression(max_iter = i,random_state = 41)\n    lr.fit(x_train,y_train) \n    score.append(lr.score(x_val,y_val))\n\n#plot of scores and parameters\nplt.figure(figsize = (15,9)) \nplt.ylabel('Prediction Score') \nplt.xticks(np.arange(0, 15, 1)) \nplt.xlabel('Number of Parameters') \nplt.plot(range(1,15),score) \nplt.show()","3beac109":"lr = linear_model.LogisticRegression(max_iter = 9,random_state = 41)\n\nlr.fit(x_train,y_train)\n\nlr.score(x_val,y_val)","3a875885":"test.head()","1e8f315a":"xtrain = X.iloc[:33600].values\/255\n\nxtest = X.iloc[33600:41999].values\/255\n\nytrain = Y.iloc[:33600].values\n\nytest = Y.iloc[33600:41999].values\n\nytrain = keras.utils.to_categorical(ytrain, 10)\n\nytest = keras.utils.to_categorical(ytest, 10)","61a1e944":"model = Sequential()\nmodel.add(Dense(700,activation = 'tanh',input_shape=(784,)))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(100,activation = 'relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(10,activation = 'relu'))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()","ba01c527":"model.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","5647bfcd":"model.fit(xtrain, ytrain,\n          epochs=25,\n          batch_size=500)\nscore = model.evaluate(xtest, ytest, batch_size=500)","dad64ed2":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64,kernel_size=(4,4),padding='same',activation='relu',input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))","2992aa83":"optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","c78ea424":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nmodel.fit(xtrain.reshape(-1,28,28,1), ytrain,\n          epochs=64,\n          batch_size=512)\nscore = model.evaluate(xtest.reshape(-1,28,28,1), ytest, batch_size=500)","d74f8d23":"p = model.predict(test.values.reshape(-1,28,28,1)\/255)\n\np = np.argmax(p,axis = 1)","1ec243ad":"plt.figure(figsize = (15,15))\nfor i in range (1,101):\n    plt.subplot(10,10,i)\n    plt.imshow(test.values[i-1].reshape(28,28),cmap = 'Greys')\n    plt.axis('off')\n    plt.title(('Label : ',p[i-1]))\n","6faa7b11":"df = {'ImageId' : range(1,28001),'Label' : p}\n\nsubmission = pd.DataFrame(df)\n\nsubmission.to_csv('submission.csv', index = False)","af2e72c6":"**Preparing model and prediction**","1ac18f74":"**Building model**","1ab1da8f":"**Predicting result**","4bce1641":"<h1> Convolutional Neural Network<\/h1>","6d5b079a":"<h1>Logistic Regression<\/h1>","b9ceb6ec":"**Preparing submission file**","48703763":"**Determining number of iteration **","b0de3d1f":"**First 5 rows of train dataframe**","211c9fe0":"<h1>Artificial Neural Network<\/h1> ","0cd4338b":"**Slicing dataset into features and label**","57de3e75":"9 iteration looks good..","64063a2b":"**Preparing data**","31ae2ba8":"**Loading data**","8322f140":"**Importing libraries**","b3798a72":"You can critisise this kernel with comment.Thank you."}}