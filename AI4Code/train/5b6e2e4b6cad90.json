{"cell_type":{"3e4db0b6":"code","aaeda89c":"code","7a1a2fb3":"code","a431abaf":"code","d8a78d0c":"code","cae8782c":"code","29f84740":"code","a0db4f41":"code","6c2be760":"code","92bc5d6e":"code","62509c15":"code","52ca3f29":"code","55381939":"code","a2d9ef75":"markdown","23ed78ea":"markdown","b52eceb2":"markdown","396072ee":"markdown"},"source":{"3e4db0b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aaeda89c":"data = pd.read_csv('..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv')","7a1a2fb3":"data","a431abaf":"data.info()","d8a78d0c":"Abnormal = data[data[\"class\"] == \"Abnormal\"]\nNormal = data[data[\"class\"] == \"Normal\"]","cae8782c":"plt.scatter(Abnormal.pelvic_incidence, Abnormal.pelvic_radius, color = \"red\", label = \"Abnormal\", alpha = 0.3)\nplt.scatter(Normal.pelvic_incidence, Normal.pelvic_radius, color = \"blue\", label = \"Normal\", alpha = 0.3)\nplt.xlabel(\"Pelvic Incidence\")\nplt.ylabel(\"Pelvic Radius\")\nplt.legend()\nplt.show()\n","29f84740":"# Assign the Abnormal values as 1, Normal values as 0 \ndata[\"class\"] = [1 if each == \"Abnormal\" else 0 for each in data[\"class\"]]","a0db4f41":"y = data[\"class\"].values\nx_data = data.drop([\"class\"], axis=1)","6c2be760":"x = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))","92bc5d6e":"from sklearn.model_selection import train_test_split\n\n# Split 80% of the data to train, 20% of the data to test -->  test_size = 0.2 \nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)\n","62509c15":"from sklearn.neighbors import KNeighborsClassifier\n\n# Finding k value\nscore_list = []\nfor each in range(1,30):\n    knn1 = KNeighborsClassifier(n_neighbors = each)\n    knn1.fit(x_train, y_train)\n    score_list.append(knn1.score(x_test, y_test))\n\n","52ca3f29":"\nplt.plot(range(1,30), score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()","55381939":"knn = KNeighborsClassifier(n_neighbors = 15)\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)\n\nprint(\"{} knn score {}\".format(15, knn.score(x_test, y_test)))\n","a2d9ef75":"****TRAIN-TEST SPLIT****","23ed78ea":"****Normalization****\n* (x - min(x))-(max(x) - min(x))","b52eceb2":"**As you can see, k value that has the best accuracy is 15.**","396072ee":"*Firstly, we should find the right k number that gives us a good accuracy.*\n* I first looked at the graph which has range(1,100) and the highest accuracy seemed to be between 1 and 30, So I made it range(1,30)"}}