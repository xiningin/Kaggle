{"cell_type":{"a4fb3669":"code","5eeae575":"code","341e557c":"code","84bab51b":"code","9b02b128":"code","17c7c48e":"code","2520351d":"code","bb3f619d":"code","a9b67bc9":"code","0e23afb6":"code","61feffed":"code","2ceeaa44":"code","06717c21":"code","daa16ee9":"code","c3fedcd9":"code","422beffd":"code","1f15ab2d":"code","7698cc5d":"code","bc42fd20":"code","a1a898f6":"code","23d0e02f":"code","07cbfe1e":"code","2f8d5355":"code","4d593c05":"code","3ed0ce5c":"code","e568c40e":"code","6b2738dc":"code","12fe2535":"code","b8c3df4e":"code","efc4de50":"code","cd6c5433":"code","e2b403b3":"code","258b841e":"code","a9dd4386":"code","956f5480":"code","18d9dc4b":"code","2055795f":"code","58ce5e36":"code","2228b85e":"code","49b66369":"code","25e76e04":"code","a3e16584":"code","5dfd0d55":"code","6b7604ac":"code","395400e1":"code","41e2202a":"code","84132bbb":"code","927849c5":"code","f4a43e40":"code","7be57e40":"code","512d5345":"code","9cf45084":"code","0e6eac16":"code","5de3567a":"code","c7da7e34":"code","57b5edae":"code","f987bb1a":"markdown","ca7a4307":"markdown"},"source":{"a4fb3669":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5eeae575":"df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf.head()","341e557c":"df.drop(\"Name\",axis=1,inplace=True)\ndf.drop(\"Ticket\",axis=1,inplace=True)\ndf.drop([\"Fare\"],axis=1,inplace=True)","84bab51b":"df.head()","9b02b128":"df.isna().sum()","17c7c48e":"#fill the missing cabin values with mode\ndf[\"Cabin\"].fillna(str(df[\"Cabin\"].mode().values[0]),inplace=True)","2520351d":"df[\"Cabin\"]=df[\"Cabin\"].apply(lambda x:str(x).replace(' ','')if ' ' in str(x) else str(x))","bb3f619d":"df[\"Deck\"] = df[\"Cabin\"].str.slice(0,1)","a9b67bc9":"df.drop([\"Cabin\"],axis=1,inplace=True)","0e23afb6":"def impute_median(series):\n    return series.fillna(series.median())","61feffed":"df.Age=df.Age.transform(impute_median)","2ceeaa44":"df.isnull().sum()","06717c21":"df[\"Embarked\"]=df[\"Embarked\"].fillna(\"S\")","daa16ee9":"df.isnull().sum()","c3fedcd9":"df['Is_Married'] = np.where(df['SibSp']==1, 1, 0)\ndf.head()","422beffd":"df[\"Family_Size\"]=df.SibSp+df.Parch\ndf.head()","1f15ab2d":"df['Elderly'] = np.where(df['Age']>=50, 1, 0)","7698cc5d":"df.head()","bc42fd20":"df.dtypes","a1a898f6":"#encode the categorical data values\nfrom sklearn.preprocessing import LabelEncoder\nlabelEncoder_Y=LabelEncoder()\ndf.iloc[:,3]=labelEncoder_Y.fit_transform(df.iloc[:,3].values)\ndf.iloc[:,7]=labelEncoder_Y.fit_transform(df.iloc[:,7].values)\ndf.iloc[:,8]=labelEncoder_Y.fit_transform(df.iloc[:,8].values)","23d0e02f":"df.dtypes","07cbfe1e":"#get a count ofthe number female or male \ndf.Sex.value_counts()","2f8d5355":"sns.countplot(df.Sex,label=\"count\")\nplt.show()","4d593c05":"#get a count of the number survived or not\ndf.Survived.value_counts()","3ed0ce5c":"#visualize the count \nsns.countplot(df.Survived,label=\"count\")\nplt.show()","e568c40e":"#create a pair plot\nsns.pairplot(df.iloc[:,1:12],hue=\"Survived\")\nplt.show()","6b2738dc":"#get the correlation of the columns\ndf.iloc[:,1:12].corr()","12fe2535":"#visualize the correlation\nplt.figure(figsize=(10,10))\nsns.heatmap(df.iloc[:,1:12].corr(), annot=True,fmt=\".0%\")\nplt.show()","b8c3df4e":"test.head()","efc4de50":"test['Is_Married'] = np.where(test['SibSp']==1, 1, 0)\ntest.head()","cd6c5433":"test[\"Family_Size\"]=test.SibSp+test.Parch\ntest.head()","e2b403b3":"test['Elderly'] = np.where(test['Age']>=50, 1, 0)\ntest.head()","258b841e":"test.drop(\"Name\",axis=1,inplace=True)\ntest.drop(\"Ticket\",axis=1,inplace=True)\ntest.drop(\"Fare\",axis=1,inplace=True)","a9dd4386":"test.isnull().sum()","956f5480":"test.Age=test.Age.transform(impute_median)","18d9dc4b":"#fill the missing cabin values with mode\ntest[\"Cabin\"].fillna(str(test[\"Cabin\"].mode().values[0]),inplace=True)","2055795f":"test[\"Cabin\"]=test[\"Cabin\"].apply(lambda x:str(x).replace(' ','')if ' ' in str(x) else str(x))","58ce5e36":"test[\"Deck\"] = test[\"Cabin\"].str.slice(0,1)","2228b85e":"test.drop([\"Cabin\"],axis=1,inplace=True)","49b66369":"test.dtypes","25e76e04":"#encode the categorical data values\nfrom sklearn.preprocessing import LabelEncoder\nlabelEncoder_Y=LabelEncoder()\ntest.iloc[:,2]=labelEncoder_Y.fit_transform(test.iloc[:,2].values)\ntest.iloc[:,6]=labelEncoder_Y.fit_transform(test.iloc[:,6].values)\ntest.iloc[:,10]=labelEncoder_Y.fit_transform(test.iloc[:,10].values)\n","a3e16584":"test.head()","5dfd0d55":"#Split the data set into independent(x) and dependent (y) data sets\nx=df.iloc[:,2:12].values\ny=df.iloc[:,1].values.reshape(-1,1)\nx_test  = test.drop(\"PassengerId\",axis=1).copy()","6b7604ac":"#0.469\n#split the data set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.469,random_state=42)","395400e1":"#scale the data(feature scaling)\nfrom sklearn.preprocessing import StandardScaler\n\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.fit_transform(x_test)","41e2202a":"x_train.shape","84132bbb":"x_test.shape","927849c5":"y_train.shape","f4a43e40":"y_test.shape","7be57e40":"#create a function for the models\ndef models(x_train,y_train):\n  #Logistic Regression Model\n  from sklearn.linear_model import LogisticRegression\n  log=LogisticRegression(random_state=42)\n  log.fit(x_train,y_train)\n  \n  #Decision Tree\n  from sklearn.tree import DecisionTreeClassifier\n  tree=DecisionTreeClassifier(criterion='entropy',random_state=0)\n  tree.fit(x_train,y_train)\n  \n  #Random Forest Classifier\n  from sklearn.ensemble import RandomForestClassifier\n  forest = RandomForestClassifier(n_estimators=15,criterion=\"entropy\",random_state=0)\n  forest.fit(x_train,y_train)\n\n  #Print the models accuracy on the training data\n  print(\"[0]Logistic Regression Training Accuracy:\",log.score(x_train,y_train))\n  print(\"[1]Decision Tree Classifier Training Accuracy:\",tree.score(x_train,y_train))\n  print(\"[2]Random Forest Classifier Training Accuracy:\",forest.score(x_train,y_train))\n  \n  return log,tree,forest","512d5345":"#Getting all of the models\nmodel = models(x_train,y_train)","9cf45084":"#test model accuracy on confusion matrix\nfrom sklearn.metrics import confusion_matrix\n\n\nfor i in range(len(model)):\n  print(\"Model \", i)\n  cm =confusion_matrix(y_test,model[i].predict(x_test))\n\n  TP=cm[0][0]\n  TN=cm[1][1]\n  FN=cm[1][0]\n  FP=cm[0][1]\n\n  print(cm)\n  print(\"Testing Accuracy = \", (TP+TN) \/ (TP+TN+FN+FP))\n  print()","0e6eac16":"#show another way to get metrics of the models\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\n\nfor i in range(len(model) ):\n  print(\"Model \",i)\n  print( classification_report(y_test,model[i].predict(x_test)))\n  print( accuracy_score(y_test,model[i].predict(x_test)))\n  print()","5de3567a":"pred=model[0].predict(x_test)\nprint(pred)\n","c7da7e34":"PassengerId = test['PassengerId']\nsubmission = pd.DataFrame({ 'PassengerId': PassengerId,\n                            'Survived': pred })\nsubmission.to_csv(r'submission.csv',index=False)","57b5edae":"from IPython.display import FileLink\nFileLink(r'submission.csv')","f987bb1a":"<a href=\".\/submission.csv\"> Download File <\/a>","ca7a4307":"Test DATA\n"}}