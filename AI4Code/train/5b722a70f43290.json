{"cell_type":{"48a92d81":"code","5a0b3977":"code","ab53edb0":"code","491c2df0":"code","eb65e4dc":"code","22f7c393":"code","6219bbf9":"code","3e325a50":"code","5068d931":"code","6dca314e":"code","344627cd":"code","5aac2957":"code","f00eedcf":"code","f1cb9db2":"code","b1996c18":"code","50a9d651":"code","ed2b1117":"code","c9a9760a":"code","3eb70794":"code","372e0dd0":"code","6220e1b6":"code","fcee3da5":"code","37ad9446":"code","e854cd73":"code","16e94155":"code","9b77add0":"code","35e59fe1":"code","e2534c20":"code","3de59561":"code","c0f1a7ea":"code","feab50bf":"code","bfc25afd":"code","70e82ea4":"code","3c1e6172":"code","1594527c":"code","508dd505":"code","bafd1744":"code","d95ae6b9":"code","8c5892a0":"code","8aa96b1e":"code","2b8c2811":"code","13316fce":"code","8df03277":"code","5fb968a7":"code","5a78d114":"code","0cfa3c36":"code","e6c875ad":"code","1c8ed241":"code","1a2875c8":"code","bbf04ead":"code","c725748e":"code","6206864b":"code","fa32e890":"code","6272aa48":"code","9fa31619":"code","977d4933":"code","1b828338":"code","1985410c":"code","16d4272d":"code","7a11fc69":"code","f080a5b7":"code","a906dae8":"code","7011a7a9":"code","56f442b5":"code","e4ec1b58":"code","62716133":"code","f749e997":"code","90070d0c":"code","32aaa299":"code","bfd49d01":"code","ab2ec762":"code","88c9b34d":"code","13f0a264":"code","e62d5609":"code","104b79f1":"code","042412f4":"code","0988c9d6":"code","296c5564":"code","9d53f826":"code","c53923e8":"code","bd6d79e3":"markdown","e81732b9":"markdown","28787760":"markdown","0fe42140":"markdown","13f071d0":"markdown","87affdc9":"markdown","4d1370f3":"markdown","3dca14de":"markdown","8960cd67":"markdown","529e9a68":"markdown","57e877ce":"markdown","f5cc4a16":"markdown","7ada58bb":"markdown","871c83b7":"markdown","8ae6ef4d":"markdown","726406dd":"markdown","8fb9ac86":"markdown","1f16caf2":"markdown","698ac588":"markdown","f324ad48":"markdown","d9a5a7bd":"markdown","aa1df742":"markdown","04c238a4":"markdown","c3693b91":"markdown","f4f4b5b5":"markdown","4e825ab1":"markdown","ad7466bd":"markdown","84bd9b93":"markdown","8bb0cda6":"markdown","94789439":"markdown","a7a587af":"markdown","078ceab7":"markdown","8e1932b7":"markdown","cabf34b8":"markdown","d3fadc54":"markdown","1cb4f788":"markdown","76d7d05f":"markdown","492b9ad5":"markdown","042dc6e9":"markdown","bb63e804":"markdown","b0a86ac4":"markdown","5d9369ac":"markdown","3c59d84b":"markdown","784dc82a":"markdown","b3e683c9":"markdown","a07428bc":"markdown","ff000749":"markdown","74f368d2":"markdown","536166f3":"markdown","f5342db4":"markdown","78cd42b4":"markdown","ec862159":"markdown","91f8b0bc":"markdown","668df96c":"markdown","904e3c4d":"markdown","dc6aab80":"markdown","25fd3ea2":"markdown","6afad8ed":"markdown"},"source":{"48a92d81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a0b3977":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring\/'\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 (train, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438)\ndata = pd.read_csv(DATA_DIR+'\/train.csv')\n# \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 (test, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438)\ndata_test = pd.read_csv(DATA_DIR+'test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","ab53edb0":"from pandas import Series\nimport pandas as pd\nimport numpy as np\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve, f1_score, accuracy_score, precision_score, recall_score\n\nimport datetime\nfrom sklearn.model_selection import GridSearchCV\n\n# \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport warnings; warnings.simplefilter('ignore') # \u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u043d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\nRANDOM_SEED = 40                                 # \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\n!pip freeze > requirements.txt                   # \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","491c2df0":"# \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0439\n# client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n# education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n# sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n# age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n# car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n# car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n# de\u0441line_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n# good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n# bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n# home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n# work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n# income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n# foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n# sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n# first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n# score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n# region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n# app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n# default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","eb65e4dc":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430\n\nnum_cols=['age', 'decline_app_cnt', 'income', 'bki_request_cnt','score_bki', 'region_rating', 'first_time', 'month']\nnum_cols_1=['age', 'decline_app_cnt', 'income', 'bki_request_cnt','score_bki', 'region_rating', 'first_time']\nbin_cols=['sex','car','car_type','good_work','foreign_passport']\ncat_cols=['education','home_address','work_address','sna']\n\n# C\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b\neducation_list = {'SCH' : 1,\n                'GRD' : 2,\n                'UGR' : 3,\n                  'PGR' : 4,\n                  'ACD' : 5\n                }\n\n#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439\ndef quantile_func(df, column):\n    #\u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0430\u0445:\n    iqr = df[column].quantile(0.75) - df[column].quantile(0.25)\n\n    #25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c:\n    perc25 = df[column].quantile(0.25)\n    #75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c:\n    perc75 = df[column].quantile(0.75)\n\n    #\u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:\n    l = perc75 + 1.5*iqr\n    #\u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:\n    f = perc25 - 1.5*iqr\n\n    print('\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:',\n          l, '\u041d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:', f)\n    \n    #\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:', column, ':',\n         df[df[column]<(perc25-1.5*iqr)][column].count() +\n          df[df[column]>(perc75+1.5*iqr)][column].count())\n    \n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\ndef log_func(df, column):\n    df[column] = df[column].apply(lambda x: np.log(x+1))\n\n    \n    \n#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435:\ndef mean_func(df, column):\n    #\u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0430\u0445:\n    iqr = df[column].quantile(0.75) - df[column].quantile(0.25)\n\n    #25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c:\n    perc25 = df[column].quantile(0.25)\n    #75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c:\n    perc75 = df[column].quantile(0.75)\n\n    #\u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:\n    l = perc75 + 1.5*iqr\n    #\u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:\n    f = perc25 - 1.5*iqr\n    #\u0432\u0441\u0451 \u0447\u0442\u043e \u0432\u044b\u043f\u0430\u0434\u0430\u0435\u0442 \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n    df[column] = df[column].apply(lambda m: df[column].mean() if m < f else m)\n    df[column] = df[column].apply(lambda m: df[column].mean() if m > l else m)","22f7c393":"data.head()","6219bbf9":"# \u043e\u0446\u0435\u043d\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\ndata.default.value_counts()","3e325a50":"data_test.head()","5068d931":"# \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u043e\u0431\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e 0 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \n\ndata['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c train\ndata_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c test\ndata_test['default'] = 0 # \u0442.\u043a. \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0442\u043e \u043f\u043e\u043a\u0430 0","6dca314e":"data_joined = data_test.append(data, sort=False).reset_index(drop=True)","344627cd":"display(data_joined.info())\ndisplay(data_joined.shape)","5aac2957":"for i in num_cols_1:\n    plt.figure()\n    sns.distplot(data_joined[i][data_joined[i] > 0].dropna(), kde = False, rug=False)\n    plt.title(i)\n    plt.show()","f00eedcf":"for column in bin_cols:\n    plt.figure()\n    sns.countplot(data_joined[column])\n    plt.title(column)\n    plt.show()","f1cb9db2":"for column in cat_cols:\n    plt.figure()\n    sns.countplot(data_joined[column])\n    plt.title(column)\n    plt.show()","b1996c18":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445:\n\ndata_joined.isnull().sum()","50a9d651":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430\u0438\u0432\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c:\n\ndata_naive = data_joined.dropna(axis = 0) # \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Education\ndata_naive = data_naive.drop(columns = ['client_id','sample','app_date']) # \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u044d\u0442\u0430\u043f\u0435","ed2b1117":"data_naive.shape","c9a9760a":"# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0434\u0430\u043c\u043c\u0438 \u0440\u0430\u0441\u0441\u043a\u043b\u0430\u0434\u043a\u0443 \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: \n\ndata_naive = pd.get_dummies(data_naive, columns=['sex', 'foreign_passport', 'car_type','education','car'])","3eb70794":"# \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \n\nX = data_naive.drop(columns = 'default')\ny = data_naive.default\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","372e0dd0":"# \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438:\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","6220e1b6":"y_pred = model.predict(X_test)","fcee3da5":"print('roc_auc_score:', roc_auc_score(y_test, y_pred))\nprint('accuracy:', accuracy_score(y_test, y_pred))\nprint('precision_score', precision_score(y_test, y_pred))\nprint('f1_score:', f1_score(y_test, y_pred))\nprint('recall_score:', recall_score(y_test, y_pred))","37ad9446":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c ROC-AUC \u043a\u0440\u0438\u0432\u0443\u044e:\n\nprobs = model.predict_proba(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","e854cd73":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443:\n\nprint(confusion_matrix(y_test, y_pred))","16e94155":"#display(data_joined.client_id.describe())\n#data_joined = data_joined.drop(columns = 'client_id')\n\n# \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u0430\u043d\u043a\u0430 - \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","9b77add0":"data_joined.app_date.value_counts()","35e59fe1":"# \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 - \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0434\u0430\u0442\u0443 \u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043c\u0435\u0441\u044f\u0446 - \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\ndata_joined['app_date'] = pd.to_datetime(data_joined['app_date'])\ndata_joined['month'] = data_joined['app_date'].apply(lambda x: x.month)\ndata_joined = data_joined.drop(columns = 'app_date')","e2534c20":"data_joined.month.hist()","3de59561":"display(data_joined.education.value_counts()) \ndisplay(data_joined.education.isnull().sum())","c0f1a7ea":"data_joined['education'] = data_joined['education'].fillna('SCH')\n\n# \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0443\u0440\u043e\u0432\u043d\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\ndata_joined['education'] = data_joined['education'].replace(to_replace = education_list)\n\ndata_joined.education.hist()","feab50bf":"data_joined.sex.hist()\n\ndisplay(data_joined.sex.value_counts())","bfc25afd":"data_joined.age.hist()","70e82ea4":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:\n\nquantile_func(data_joined, 'age')","3c1e6172":"# \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u0438\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\nlog_func(data_joined,'age')\n\ndata_joined.age.hist()","1594527c":"data_joined.car.hist()","508dd505":"data_joined.car_type.hist()","bafd1744":"data_joined.decline_app_cnt.hist()\n\ndisplay(data_joined.decline_app_cnt.value_counts())\n\ndisplay(quantile_func(data_joined, 'decline_app_cnt'))","d95ae6b9":"data_joined['decline_app_cnt'] = data_joined['decline_app_cnt'].apply(lambda x: 1 if x != 0 else x)\n\ndata_joined.decline_app_cnt.hist()","8c5892a0":"data_joined.good_work.hist()","8aa96b1e":"data_joined.score_bki.hist()\ndisplay(quantile_func(data_joined, 'score_bki'))\ndisplay(data_joined.score_bki.describe())","2b8c2811":"mean_func(data_joined,'score_bki')\n\ndisplay(data_joined.score_bki.describe())\ndata_joined.score_bki.hist()","13316fce":"#\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a score_bki\n\nscaler = MinMaxScaler()\nminmax = scaler.fit_transform(data_joined.loc[:,['score_bki']])\ndata_joined['score_bki'] = minmax","8df03277":"data_joined.bki_request_cnt.hist()\ndisplay(quantile_func(data_joined, 'bki_request_cnt'))\ndisplay(data_joined.bki_request_cnt.describe())","5fb968a7":"mean_func(data_joined,'bki_request_cnt')\n\ndata_joined.bki_request_cnt.hist()","5a78d114":"data_joined.region_rating.hist()","0cfa3c36":"#\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f MinMaxScaler\n\nscaler = MinMaxScaler()\nminmax = scaler.fit_transform(data_joined.loc[:,['region_rating']])\ndata_joined['region_rating'] = minmax","e6c875ad":"data_joined.work_address.hist()","1c8ed241":"display(data_joined.home_address.hist())","1a2875c8":"display(data_joined.income.describe())\n\nquantile_func(data_joined, 'income')\n\ndata_joined.income.hist()","bbf04ead":"mean_func(data_joined, 'income')","c725748e":"# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\nminmax = scaler.fit_transform(data_joined.loc[:,['income']])\ndata_joined['income'] = minmax\n\ndata_joined.income.hist()","6206864b":"data_joined.sna.hist()","fa32e890":"data_joined.first_time.hist()","6272aa48":"data_joined.foreign_passport.hist()","9fa31619":"data_joined.default.hist()","977d4933":"sns.set(font_scale=1)\nplt.subplots(figsize=(10,8))\nsns.heatmap(data_joined[num_cols].corr(), annot=True, fmt='.2f')","1b828338":"label_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data_joined[column] = label_encoder.fit_transform(data_joined[column])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata_joined.head()","1985410c":"# \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e mutual_info_classif \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn:\n\nimp_cat = Series(mutual_info_classif(data_joined[bin_cols + cat_cols],\n                                     data_joined['default'], discrete_features =True),\n                                     index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","16d4272d":"sns.set(font_scale=1)\nplt.subplots(figsize=(16,14))\nsns.heatmap(data_joined.corr(), annot=True, fmt='.2f', linewidths = 0.1)","7a11fc69":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e:\n\ncorr = data_joined.corr()\ncorr[corr == 1] = 0\nc1 = corr.abs().unstack()\nc1.sort_values(ascending = False)","f080a5b7":"data_joined['car+car_type'] = data_joined['car']+data_joined['car_type']\n\n#\u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443\ndata_joined['car+car_type'] = label_encoder.fit_transform(data_joined['car+car_type'])\n\n# \u0443\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata_joined.drop(['work_address','car','car_type','first_time'], inplace = True, axis = 1)","a906dae8":"#\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\nfor column in ['sna', 'month', 'bki_request_cnt', 'education', 'car+car_type']:\n    data_joined[column] = data_joined[column].apply(lambda s: np.log(s+1))","7011a7a9":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\ndata_joined.head()","56f442b5":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043d\u0430 train \u0438 test\n\ntrain = data_joined.query('sample == 1').drop(['sample'], axis=1)\ntest = data_joined.query('sample == 0').drop(['sample'], axis=1)","e4ec1b58":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0443 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 X \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e:\n\nX = train.drop(columns = ['default', 'client_id'])\nY = train['default']","62716133":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 train \u0438 test\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = RANDOM_SEED, test_size=0.2)","f749e997":"model_1 = LogisticRegression(max_iter = 1000)\nmodel_1.fit(X_train, Y_train)\nY_pred = model_1.predict(X_test)","90070d0c":"probs = model_1.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","32aaa299":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430:\n\nprint('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, Y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, Y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, Y_pred), 4)))","bfd49d01":"confusion_matrix(Y_test, Y_pred)","ab2ec762":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c class_weight \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n\nlr_best = LogisticRegression(class_weight='balanced',\n                            random_state=RANDOM_SEED)\n\nparams = {'C': np.linspace(0, 100, 5),\n         'max_iter': np.linspace(start=1,stop=1000,num=10, dtype=int)}\n\nmodel_best = GridSearchCV(lr_best, param_grid=params, verbose=1, cv=2)\n\nmodel_best.fit(X_train, Y_train)\nprobs = model_best.predict_proba(X_test)\ny_pred = model_best.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')","88c9b34d":"print('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, y_pred), 4)))","13f0a264":"confusion_matrix(Y_test, y_pred)","e62d5609":"# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u0437 train['default']==0 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u043e\u0435\n# \u0440\u0430\u0432\u043d\u044f\u043b\u043e\u0441\u044c \u0431\u044b train['default']==1, \u0438 \u0437\u0430\u0442\u0435\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0441 train['default']==1\n\ntrain_reduced = pd.concat([train[train['default']==0].sample(\n    len(train[train['default']==1]), random_state=RANDOM_SEED), train[train['default']==1]])\n\nX = train_reduced.drop(columns = ['default','client_id'])\nY = train_reduced['default']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = RANDOM_SEED, test_size=0.2)","104b79f1":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c class_weight \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n\nlr_best = LogisticRegression(class_weight='balanced',\n                            random_state=RANDOM_SEED)\n\nparams = {'C': np.linspace(0, 100, 5),\n         'max_iter': np.linspace(start=1,stop=500,num=10, dtype=int)}\n\nmodel_best_1 = GridSearchCV(lr_best, param_grid=params, verbose=1, cv=2)\n\nmodel_best_1.fit(X_train, Y_train)\nprobs = model_best_1.predict_proba(X_test)\ny_pred_1 = model_best_1.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')\n\nprint(\"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438: \", model_best_1.best_params_)","042412f4":"confusion_matrix(Y_test, y_pred_1)","0988c9d6":"X_test2 = test.drop(columns = ['default','client_id'])\ny_probs = model_best_1.predict_proba(X_test2)[:,1]","296c5564":"test['default'] = y_probs","9d53f826":"submission = test[['client_id','default']]\ndisplay(submission.sample(10))\ndisplay(submission.shape)","c53923e8":"submission.to_csv('submission.csv', index=False)","bd6d79e3":"# 5. \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","e81732b9":"\u0432\u0438\u0434\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0443 \nwork_address \u0438 home_address - \u0443\u0434\u0430\u043b\u0438\u043c work_address\ncar \u0438 car_type - \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u043e\u0431\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nsna \u0438 first_time - \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442 \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e - \u0443\u0434\u0430\u043b\u044f\u0435\u043c first_time, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043a\u0430\u043a \u043c\u044b \u0443\u0436\u0435 \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u0438 sna \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u0435\u0441","28787760":"#### education","0fe42140":"#### app_date","13f071d0":"\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","87affdc9":"# 6. \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439","4d1370f3":"#### income","3dca14de":"# 8. \u041c\u043e\u0434\u0435\u043b\u0438","8960cd67":"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","529e9a68":"\u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u044b - \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435:","57e877ce":"### 8.3 \u041c\u043e\u0434\u0435\u043b\u044c c undersampling","f5cc4a16":"#### car_type","7ada58bb":"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","871c83b7":"#### car","8ae6ef4d":"\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","726406dd":"\u043d\u0430\u0448\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f - \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0443\u0436\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043b\u043e\u0441\u044c \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435","8fb9ac86":"#### sex","1f16caf2":"#### region_rating","698ac588":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 LabelEncoder","f324ad48":"\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0447\u0442\u043e \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u044b - \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435","d9a5a7bd":"\u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 True Positive \u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u043e\u0434\u043d\u0430\u043a\u043e \u0432\u044b\u0434\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0431\u0430\u043d\u043a\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043c\u043e\u0433\u0443\u0442 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0434\u0435\u043d\u044c\u0433\u0438 \u0438 \u0434\u043e\u043f\u0443\u0441\u0442\u044f\u0442 \u0434\u0435\u0444\u043e\u043b\u0442 - \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u0443\u0431\u044b\u0442\u043a\u0430\u043c","aa1df742":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Education","04c238a4":"### 8.1 Logistic Regression \n\n\u043e\u0431\u0443\u0447\u0438\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 ","c3693b91":"#### score_bki ","f4f4b5b5":"\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 - sna","4e825ab1":"\u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043c\u043e\u0434\u0435\u043b\u0438, \u0440\u0435\u0437\u044c\u0442\u0430\u0442\u044b \u043a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u043d\u0435 \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u044f\u044e\u0449\u0438\u0435","ad7466bd":"\u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u044b - \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ","84bd9b93":"\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","8bb0cda6":"#### home_address \u0438 work_address","94789439":"\u043e\u0442\u043c\u0435\u0442\u0438\u043c \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 - \u0434\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u043a\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","a7a587af":"\u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u0435\u0441\u0442\u044c, ROC-AUC score \u043f\u043e\u0434\u0440\u043e\u0441, \u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0439, \u043f\u043e\u0441\u044b\u043b\u0430\u044e \u0432 \u0441\u0430\u0431\u043c\u0438\u0442 \u0442\u0440\u0435\u0442\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u044c","078ceab7":"\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0436\u0435\u043d\u0449\u0438\u043d \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043d\u0430 13\u043a \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d","8e1932b7":"#### client_id","cabf34b8":"#### decline_app_cnt","d3fadc54":"#### bki_request_cnt","1cb4f788":"\u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\n\nincome - region_raiting - \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0447\u0435\u043c \u0431\u043e\u0433\u0430\u0447\u0435 \u0440\u0435\u0433\u0438\u043e\u043d \u0442\u0435\u043c \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u044b \u0432\u044b\u0448\u0435","76d7d05f":"# 4. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","492b9ad5":"#### sna","042dc6e9":"\u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0443\u0436\u0435 \u043e\u0442\u043c\u0435\u0447\u0430\u043b\u0438 \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0434\u0435\u0444\u043e\u043b\u0442 \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043b\u0430\u0442\u044f\u0442 \u0438\u0441\u043f\u0440\u0430\u0432\u043d\u043e","bb63e804":"# 1. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","b0a86ac4":"\u0418\u0442\u0430\u043a, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 ROC-AUC \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0436\u043d\u0435\u043c \u0443\u0440\u043e\u0432\u043d\u0435, \u043e\u0434\u043d\u0430\u043a\u043e f1_score \u0438 recall_score - \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0440\u043e\u0441\u043b\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043e\u0448\u0438\u0431\u043e\u043a: \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b\u0430 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u0440\u044f\u0434, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b\u0430 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0433\u043e \u0442\u043e\u0447\u043d\u043e \u0432\u044b\u043f\u043b\u0430\u0442\u044f\u0442","5d9369ac":"\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","3c59d84b":"#### age","784dc82a":"\u043a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u044b - \u0432\u0438\u0434\u0435\u043d \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442 ","b3e683c9":"\u0432\u0441\u0435\u0433\u043e 478 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 SCH - \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u043e\u0434\u043e\u0439","a07428bc":"# 2. \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u041c\u043e\u0434\u0435\u043b\u044c\n\n\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430\u0438\u0432\u043d\u0443\u044e \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 \u0447\u0435\u0433\u043e \u043e\u0442\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","ff000749":"#### foreign_passport","74f368d2":"\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","536166f3":"#### default","f5342db4":"\u043e\u0442\u043c\u0435\u0442\u0438\u043c \u0434\u043b\u044f \u0441\u0435\u0431\u044f \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442 - \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u044d\u0442\u043e \u043d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0438 \u0432\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 EDA","78cd42b4":"#### good_work","ec862159":"# 3. EDA","91f8b0bc":"# 7. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","668df96c":"### 8.2 \u041c\u043e\u0434\u0435\u043b\u044c LogisticRegression (\u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b)","904e3c4d":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0432\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e - \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0438\u0445 \u0431\u043b\u0438\u0436\u0435 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 EDA","dc6aab80":"\u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","25fd3ea2":"\u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u044f\u0441\u043d\u043e \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0431\u043e\u043b\u0435\u0435 80% - \u044d\u0442\u043e \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u043a\u0430\u0437\u0430 - \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u043d\u044b\u0435 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u043d\u0430 1 - \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439:","6afad8ed":"#### first_time"}}