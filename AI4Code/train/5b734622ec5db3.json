{"cell_type":{"a0eece11":"code","4629e848":"code","025c95ec":"code","1fafc85d":"code","c102cd5d":"code","ca042896":"code","4f7b8a51":"code","73387d8d":"code","fe702ccb":"code","a3d93c1b":"code","fad53a79":"code","1d4d2be4":"code","bb6283b9":"code","be7480db":"code","1d96e1a2":"code","bcbc6ab1":"code","edb817f2":"code","286a99ee":"code","640db637":"code","61e9252c":"code","4aad560d":"code","2aefa890":"code","89585e28":"code","1fcaac5b":"code","32aa3b42":"code","56fec7f2":"code","2986dbdd":"markdown","9a2fd570":"markdown","40a3e4c9":"markdown","ddef08ae":"markdown","b660fd5f":"markdown","76cd7508":"markdown","ba9cdfba":"markdown"},"source":{"a0eece11":"# Import libraries\n# https:\/\/stackoverflow.com\/questions\/53024266\/using-pandas-to-write-df-to-sqlite\nimport pandas as pd, csv, sqlite3\n\n# Create sqlite database and cursor\nconn = sqlite3.connect('test.db')\nc = conn.cursor()\n# Create the table of pitches\nc.execute(\"\"\"CREATE TABLE IF NOT EXISTS pitches (\n            pitch_type text,\n            game_date text,\n            release_speed real\n            )\"\"\")\nconn.commit()\n\ntest = conn.execute('SELECT * from pitches')\nnames = [description[0] for description in test.description]\nprint(names)\n\ndf = pd.DataFrame([['SL','8\/31\/2017','81.9']],columns = ['pitch_type','game_date','release_speed'])\n#df = pd.read_csv('https:\/\/raw.githubusercontent.com\/lukes\/ISO-3166-Countries-with-Regional-Codes\/master\/all\/all.csv')\ndf.to_sql('pitches', conn, if_exists='append', index=False)\n\nconn.execute('SELECT * from pitches').fetchall()","4629e848":"!pip install SQLAlchemy\n!pip install PyMySQL\n!pip install pandas-gbq","025c95ec":"from sqlalchemy import create_engine\nimport pandas as pd, csv, sqlite3\n#engine = create_engine('test_v1.db', echo=False)\nconn_ = sqlite3.connect('test_v1.db')\ncsvfile = 'https:\/\/raw.githubusercontent.com\/lukes\/ISO-3166-Countries-with-Regional-Codes\/master\/all\/all.csv'\ndf = pd.read_csv(csvfile)\ndf.to_sql('countries', conn_, if_exists='append', index=False)\nconn_.execute('SELECT name from countries').fetchall()","1fafc85d":"conn = sqlite3.connect('test_v1.db')\ndf_ = pd.read_sql('SELECT * FROM countries', conn)\ndf_.head()","c102cd5d":"from google.cloud import bigquery","ca042896":"# https:\/\/medium.com\/datamindedbe\/import-sql-server-data-in-bigquery-d640441d5d56\nimport pandas\nimport pandas_gbq\n\n# TODO: Set project_id to your Google Cloud Platform project ID.\nproject_id = \"kaggle-323006\"\n\n# TODO: Set table_id to the full destination table ID (including the\n#       dataset ID).\ntable_id = 'my_dataset.my_table'\n\ndf = pandas.DataFrame(\n    {\n        \"my_string\": [\"a\", \"b\", \"c\"],\n        \"my_int64\": [1, 2, 3],\n        \"my_float64\": [4.0, 5.0, 6.0],\n        \"my_bool1\": [True, False, True],\n        \"my_bool2\": [False, True, False],\n        \"my_dates\": pandas.date_range(\"now\", periods=3),\n    }\n)\n\npandas_gbq.to_gbq(df, table_id, project_id=project_id, if_exists='replace')","4f7b8a51":"client = bigquery.Client(project=\"kaggle-323006\")\nhn_dataset_ref = client.dataset('my_dataset', project='kaggle-323006')\nprint(type(hn_dataset_ref))\nhn_dset = client.get_dataset(hn_dataset_ref)\nprint(type(hn_dset))\nprint([x.table_id for x in client.list_tables(hn_dset)])\nhn_full = client.get_table(hn_dset.table('my_table'))\nprint(type(hn_full))\nprint([command for command in dir(hn_full) if not command.startswith('_')])\nprint(hn_full.schema)","73387d8d":"schema_subset = [col for col in hn_full.schema if col.name in ('my_string', 'my_int64', 'my_float64')]\nresults = [x for x in client.list_rows(hn_full, start_index=2, selected_fields=schema_subset, max_results=10)]\nprint(results)","fe702ccb":"for i in results:\n    print(dict(i))","a3d93c1b":"BYTES_PER_GB = 2**30\nhn_full.num_bytes \/ BYTES_PER_GB","fad53a79":"def estimate_gigabytes_scanned(query, bq_client):\n    # see https:\/\/cloud.google.com\/bigquery\/docs\/reference\/rest\/v2\/jobs#configuration.dryRun\n    my_job_config = bigquery.job.QueryJobConfig()\n    my_job_config.dry_run = True\n    my_job = bq_client.query(query, job_config=my_job_config)\n    BYTES_PER_GB = 2**30\n    return my_job.total_bytes_processed \/ BYTES_PER_GB","1d4d2be4":"estimate_gigabytes_scanned(\"SELECT * FROM `kaggle-323006.my_dataset.my_table`\", client)","bb6283b9":"!pip install dnspython -q","be7480db":"import pandas as pd\nimport numpy as np\nimport pymongo","1d96e1a2":"# version\nprint(pymongo.version)","bcbc6ab1":"def mongoConecta(url, database, collection):\n    mongo_url = url\n    cliente = pymongo.MongoClient(mongo_url)\n    DB = cliente[database]\n    DC = DB[collection]\n    return DC","edb817f2":"!pip install pymongo==3.11.2","286a99ee":"# https:\/\/realpython.com\/introduction-to-mongodb-and-python\/\nimport pymongo\nfrom pymongo import MongoClient\nclient = MongoClient()\nclient","640db637":"# client = MongoClient(host=\"localhost\", port=27017)\n# client.Connect(\"mongodb:\/\/datastore:27017\")\n\nclient = MongoClient(host='192.168.1.100',\n                     port=27017,\n                     username='admin',\n                     password='psw',\n                     authSource='admin')","61e9252c":"db = client.rptutorials\ndb","4aad560d":"db = client[\"rptutorials\"]","2aefa890":"tutorial1 = {\n    \"title\": \"Working With JSON Data in Python\",\n    \"author\": \"Lucas\",\n    \"contributors\": [\n        \"Aldren\",\n        \"Dan\",\n        \"Joanna\"\n    ],\n    \"url\": \"https:\/\/realpython.com\/python-json\/\"\n}","89585e28":"tutorial = db.tutorial\ntutorial","1fcaac5b":"# result = tutorial.insert_one(tutorial1)\n# result\n\n\n# print(f\"One tutorial: {result.inserted_id}\")","32aa3b42":"# from mongoengine import Document, ListField, StringField, URLField\n\n# class Tutorial(Document):\n#     title = StringField(required=True, max_length=70)\n#     author = StringField(required=True, max_length=20)\n#     contributors = ListField(StringField(max_length=20))\n#     url = URLField(required=True)","56fec7f2":"# tutorial1 = Tutorial(\n#     title=\"Beautiful Soup: Build a Web Scraper With Python\",\n#     author=\"Martin\",\n#     contributors=[\"Aldren\", \"Geir Arne\", \"Jaya\", \"Joanna\", \"Mike\"],\n#     url=\"https:\/\/realpython.com\/beautiful-soup-web-scraper-python\/\"\n# )\n\n# tutorial1.save()  # Insert the new tutorial","2986dbdd":"# SQL","9a2fd570":"# Creating mongoDB Connection","40a3e4c9":"# Working with collections and documents","ddef08ae":"# MongoDB","b660fd5f":"# Bigquery: Read data","76cd7508":"# Read SQL data in pandas","ba9cdfba":"# Bigquery: Write data"}}