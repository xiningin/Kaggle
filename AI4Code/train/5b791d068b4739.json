{"cell_type":{"0bc90ac5":"code","c57090dc":"code","c8e6adac":"code","dd838f6c":"code","ed2454c8":"code","8879b4e4":"code","8a08a670":"code","a009cae4":"code","3707c642":"code","38f86856":"code","dbdab577":"code","77018a55":"code","4c825d7a":"code","b5eaae92":"code","d453fa87":"code","3508a88e":"code","2cf61a08":"code","08197b24":"code","6b9ee42b":"code","072ef928":"code","84b17d01":"code","e5252ba9":"code","0b5c9daf":"code","f8f45e82":"code","4a725442":"code","194e1e59":"code","d6e95a9e":"code","f7b59cff":"code","f059852d":"code","9c4da2ff":"code","52c4c291":"code","bf6fd942":"code","1429bd41":"code","6cb1078e":"code","6e5e7478":"code","81d74860":"code","ad5d840a":"code","6dc65d22":"code","5fa38a79":"code","7fadeff3":"code","d48a8d16":"code","c46fe8c0":"code","855c29c5":"code","e1c4bfef":"code","d24fe508":"code","3f64b24f":"code","94d67121":"code","bdc018d7":"code","4fdbc12d":"code","07f882f6":"code","8da32922":"markdown","e94dd8d8":"markdown","c6aa2dbe":"markdown","ad8a04b4":"markdown","65adb466":"markdown","a14036a1":"markdown","bcaa4f8d":"markdown","39dd702d":"markdown","cf98d0a4":"markdown","69c97851":"markdown","36c93681":"markdown","c989d828":"markdown","af9acda0":"markdown","f336cce5":"markdown","286d1b60":"markdown","be30ee23":"markdown","ef45a629":"markdown","6f982632":"markdown"},"source":{"0bc90ac5":"import pandas as pd\nimport numpy as np\nimport matplotlib\n#matplotlib.use('TkAgg')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","c57090dc":"# Pycharm configuration to display the whole dataframe printed in the \"run\" output.\npd.set_option('display.width', 400)\npd.set_option('display.max_columns', 10)","c8e6adac":"airbnb = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","dd838f6c":"print('number of samples: ',airbnb.shape[0])\nprint('number of columns: ',airbnb.shape[1])","ed2454c8":"print('Dataframe details: \\n')\nprint(airbnb.info(verbose=True))\nprint('\\nNull values in dataset:\\n')\nprint(airbnb.isnull().sum().sort_values(ascending=False))\nprint('\\nPercentage of null values in last_review column: ',round(airbnb['last_review'].isnull().sum()\/len(airbnb)*100,2),'%')","8879b4e4":"fig, ax = plt.subplots(figsize=(17,6))\nplt.title('Null values in last_review and reviews_per_month', fontsize=15)\nsns.heatmap(airbnb[['last_review','reviews_per_month']].isnull(), cmap=\"Blues\", yticklabels=False, ax=ax, cbar_kws={'ticks': [0, 1]})\nplt.show()","8a08a670":"# Let's visualize the columns with missing values to see how they are distributed. \nmsno.matrix(airbnb)\nplt.show()","a009cae4":"msno.heatmap(airbnb)\nplt.show()","3707c642":"# Also it seems column number_of_reviews usually has a value of 0 when last_review is null. So column last_review may be dropped\nairbnb.drop('last_review',axis=1,inplace=True)","38f86856":"# And we can fillna the other columns that have null values\nairbnb['reviews_per_month'].fillna(value=0,inplace=True)\nairbnb['name'].fillna(value='$',inplace=True)\nairbnb['host_name'].fillna(value='#',inplace=True)","dbdab577":"# Before we move on, there are a few listings with zero listing price. What's the purpose of listing a place asking for 0 dollars? Are those legit data entries? Let's take a look.\nzero_price = airbnb[airbnb['price']==0]\nprint(zero_price.head(3))","77018a55":"# There are 11 listings with 0 prices, yet nothing looks special about those listings. So let's get rid of these 0 priced listings as they can be misleading.\nairbnb = airbnb[airbnb['price']>0]","4c825d7a":"# Check if all null values are handled\nprint('Null values in dataset:\\n')\nprint(airbnb.isnull().sum().sort_values(ascending=False))\n# Learn about dtypes of each feature in the dataframe\nprint('\\nData types: \\n')\nprint(airbnb.info(verbose=True))\n# Generate descriptive statistics that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution\nprint('\\nData description: \\n')\nprint(airbnb.describe())","b5eaae92":"# A quick overview of correlations between features using heatmap\nplt.figure(figsize=(12,8))\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\nsns.heatmap(airbnb.corr(),annot=True,linewidths=0.1,cmap='Reds')","d453fa87":"# Number of listings per room type\nprint(airbnb['room_type'].value_counts())\nsns.countplot(x='room_type',data=airbnb,palette='viridis')\nplt.title('No of Listings per Room Type')","3508a88e":"# Let's see how many listings a host usually has\ndef listing_count(count):\n    if count == 1:\n        return 'only 1'\n    elif count<=3:\n        return '2-3'\n    elif count<=5:\n        return '4-5'\n    elif count<=10:\n        return '6-10'\n    elif count<=20:\n        return '11-20'\n    elif count<=30:\n        return '21-30'\n    elif count <= 50:\n        return '31-50'\n    elif count<=80:\n        return '51-80'\n    else:\n        return '81+'\nairbnb['host_listings_count_group'] = airbnb['calculated_host_listings_count'].apply(listing_count)\ng = sns.countplot(x='host_listings_count_group',data=airbnb,order=['only 1','2-3','4-5','6-10','11-20','21-30','31-50','51-80','81+'],palette='viridis')\nplt.title('Listing Ownership Distribution')\ntotal = float(len(airbnb))\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x() + p.get_width() \/ 2.,\n            height + 3,\n            '{:1.1f}%'.format(height \/ total*100),\n            ha=\"center\")","2cf61a08":"# We can change the above visualization to a pie chart just for practice purpose\nlisting_counts = airbnb.groupby('host_listings_count_group').agg('count')\nlabel = listing_counts['id'].sort_values(ascending=False).index\nsize = listing_counts['id'].sort_values(ascending=False)\nexp = (0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8)\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(size, explode=exp, labels=label, autopct='%1.1f%%',shadow=False, startangle=0)\nax.set(title='Listing Ownership Distribution')\nplt.setp(autotexts,size=8,weight=\"bold\")\nax.axis('equal')","08197b24":"# number of listings per neighborhood groups\nprint(airbnb['neighbourhood_group'].value_counts(ascending=False))\nairbnb['neighbourhood_group'].value_counts(ascending=False).plot.bar()\nplt.title('No of Listings Per Neighborhood Group')","6b9ee42b":"# top 3 neighborhoods with most number of listings in each neighborhood groups\nfor group_name in airbnb['neighbourhood_group'].unique():\n    neighbor = airbnb[airbnb['neighbourhood_group']==group_name]['neighbourhood'].value_counts(ascending=False)[:3]\n    print('{} top 3 neighborhoods with corresponding count of listings:\\n{} \\n'.format(group_name,neighbor))","072ef928":"# number of listings per neighborhood group, categorized by room type\nsns.countplot(x='neighbourhood_group',data=airbnb,hue='room_type',palette='viridis')\nplt.title('Number of listings in each neighborhood per room types')","84b17d01":"# number of listings per neighborhood, categorized by room type, sort in DESC order by count of listings\nlisting_per_neighbor = airbnb.groupby(['room_type','neighbourhood'],sort=False)['id'].agg([('count','count')]).reset_index().sort_values(by=['room_type','count'],ascending=[True,False])\nprint(listing_per_neighbor)","e5252ba9":"# top 10 neighborhoods with most number of listings per each room type\ntop10 = listing_per_neighbor.groupby(['room_type']).apply(lambda x: x.nlargest(10,'count'))\nprint(top10)","0b5c9daf":"# visualize top 10 neighborhoods per each room type\nfig,axes = plt.subplots(nrows=1,ncols=3,sharey=True,figsize=(18,6))\nfig.suptitle('Top 10 Neighborhoods per Room Type', fontsize=16)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nsns.barplot(x='neighbourhood',y='count',data=top10[top10['room_type']=='Entire home\/apt'],ax=axes[0],palette='viridis')\naxes[0].set_title('Entire home\/apt')\nsns.barplot(x='neighbourhood',y='count',data=top10[top10['room_type']=='Private room'],ax=axes[1],palette='viridis')\naxes[1].set_title('Private room')\nsns.barplot(x='neighbourhood',y='count',data=top10[top10['room_type']=='Shared room'],ax=axes[2],palette='viridis')\naxes[2].set_title('Shared room')","f8f45e82":"# price distribution per neighborhood group, a quick overview\nsns.violinplot(x='neighbourhood_group',y='price',data=airbnb,palette='viridis')\nplt.title('Price Distribution per Neighborhood Group')","4a725442":"# let's get rid of the long tails and take a closer look\ng = sns.boxplot(x='neighbourhood_group',y='price',data=airbnb,palette='viridis')\ng.set(yscale='log')\nplt.title('Price Distribution per Neighborhood Group')","194e1e59":"# detailed price statistics in each neighborhood group, for example min\/max, 25\/50\/75 percentile\nprice_stat = pd.DataFrame()\nfor group in airbnb['neighbourhood_group'].unique():\n    prices = airbnb[airbnb['neighbourhood_group']==group][['price']]\n    stats = prices.describe(percentiles=[.25,.5,.75])\n    stats = stats.iloc[1:]\n    stats.reset_index(inplace=True)\n    stats.rename(columns={'index': 'Stats','price': group}, inplace=True)\n    #print(stats)\n    price_stat = pd.concat([price_stat,stats],axis=1)\nprice_stat = price_stat.loc[:,~price_stat.columns.duplicated()].set_index('Stats')\nprint(price_stat)","d6e95a9e":"# average price of listings in each neighborhood\nprice_by_nei = airbnb.groupby(['neighbourhood_group','neighbourhood'],sort=False)['price'].agg([('price_avg','mean')]).reset_index().sort_values(by=['neighbourhood_group','price_avg'],ascending=[True,False])\nhighest10 = price_by_nei.groupby(['neighbourhood_group']).apply(lambda x: x.nlargest(10,'price_avg'))\nprint(highest10)","f7b59cff":"# visualize top 10 neighborhoods with highest average price within each neighborhood group\nfig,axes = plt.subplots(nrows=1,ncols=5,sharey=True,figsize=(25,6))\nfig.suptitle('Top 10 Neighborhoods with Highest Average Listing Price', fontsize=16)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\n    ax.yaxis.label.set_visible(False)\nsns.pointplot(x='neighbourhood',y='price_avg',data=highest10[highest10['neighbourhood_group']=='Manhattan'],ax=axes[0],palette='viridis')\naxes[0].set_title('Manhattan')\nsns.pointplot(x='neighbourhood',y='price_avg',data=highest10[highest10['neighbourhood_group']=='Brooklyn'],ax=axes[1],palette='viridis')\naxes[1].set_title('Brooklyn')\nsns.pointplot(x='neighbourhood',y='price_avg',data=highest10[highest10['neighbourhood_group']=='Staten Island'],ax=axes[2],palette='viridis')\naxes[2].set_title('Staten Island')\nsns.pointplot(x='neighbourhood',y='price_avg',data=highest10[highest10['neighbourhood_group']=='Queens'],ax=axes[3],palette='viridis')\naxes[3].set_title('Queens')\nsns.pointplot(x='neighbourhood',y='price_avg',data=highest10[highest10['neighbourhood_group']=='Bronx'],ax=axes[4],palette='viridis')\naxes[4].set_title('Bronx')","f059852d":"# check the distribution of listing availability\nsns.distplot(airbnb['availability_365'],kde=False)\nplt.title('Availability in a year')\nplt.xlabel('Availability')\nplt.ylabel('Frequency')","9c4da2ff":"# Is there a pattern between price and availability? let's explore with jointplot\nsns.jointplot(x='availability_365',y='price',data=airbnb)\nplt.title('Price v.s. Availability in a year')","52c4c291":"# let's zoom out and take a closer look\nsns.jointplot(x='availability_365',y='price',data=airbnb[airbnb['price']<1000])\nplt.title('Price v.s. Availability in a year')\n# the answer to the above question is: no","bf6fd942":"# next let's do a trend analysis of availability between neighborhood groups\nairbnb['availability_365_group_int'] = airbnb['availability_365']\/\/30 * 30\nairbnb['availability_365_group'] = airbnb['availability_365_group_int'].apply(lambda x: '0-30 d' if x == 0 else (str(x) + ' d+'))\n\nplt.figure(figsize=(10,8))\ng = sns.boxplot(x='neighbourhood_group',y='price',data=airbnb,hue='availability_365_group',dodge=True,palette='plasma',fliersize=1,linewidth=1,\n              hue_order=['0-30 d','30 d+','60 d+','90 d+','120 d+','150 d+','180 d+','210 d+','240 d+','270 d+','300 d+','330 d+','360 d+'])\ng.set(yscale='log')\nplt.title('Trend analysis of availability with price in each neighborhood group')\nplt.xlabel('Neighborhood')\nplt.ylabel('Price')","1429bd41":"# check the distribution of review numbers\nplt.figure(figsize=(10,8))\nmap_img = plt.imread('..\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nplt.imshow(map_img,zorder=1,aspect='auto',extent=[-74.258, -73.7, 40.49, 40.92])\ng = plt.scatter(x=airbnb['longitude'],y=airbnb['latitude'],c=airbnb['number_of_reviews'],cmap=plt.get_cmap('plasma'),alpha=0.5,s=10,zorder=2)\nplt.title('Map of Price Distribution')\nplt.colorbar(g).set_label('Number of Reviews')\nplt.grid(True)","6cb1078e":"# top 500 most reviewed listings and their locations\nmost_reviewed_500 = airbnb.sort_values(by='number_of_reviews',ascending=False)[:500][['host_id','number_of_reviews','latitude','longitude','price']]\nplt.figure(figsize=(10,8))\nmap_img = plt.imread('..\/input\/new-york-city-airbnb-open-data\/New_York_City_.png', 0)\nplt.imshow(map_img, zorder=1, aspect='auto', extent=[-74.258, -73.7, 40.49, 40.92])\ng = plt.scatter(x=most_reviewed_500['longitude'],y=most_reviewed_500['latitude'],c=most_reviewed_500['price'],cmap=plt.get_cmap('plasma'),alpha=0.5,s=10,zorder=2)\nplt.title('Map of Top 500 Most Reviewed Listings')\nplt.xlabel('Listing Longitude')\nplt.ylabel('Listing Latitude')\nplt.colorbar(g).set_label('Price of Listings')\nplt.grid(True)","6e5e7478":"# check how number of reviews variate along with different availability groups\nimport matplotlib.ticker as mtick\n\nplt.figure(figsize=(10,8))\n# sns.swarmplot(x='neighbourhood_group',y='number_of_reviews',data=airbnb[airbnb['price']<600],hue='availability_365_group',dodge=True,palette='plasma',size=2,hue_order=['0-30 d','30 d+','60 d+','90 d+','120 d+','150 d+','180 d+','210 d+','240 d+','270 d+','300 d+','330 d+','360 d+'])\n# swarmplot doesn't give a clear picture of how review numbers variate between different groups of availability\ng = sns.boxplot(x='neighbourhood_group',y='number_of_reviews',data=airbnb[airbnb['number_of_reviews']>0],hue='availability_365_group',dodge=True,palette='plasma',fliersize=1,linewidth=1,\n              hue_order=['0-30 d','30 d+','60 d+','90 d+','120 d+','150 d+','180 d+','210 d+','240 d+','270 d+','300 d+','330 d+','360 d+'])\ng.set_yscale('log',basey=np.e)\ng.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.1f'))\nplt.title('Trend analysis of review numbers with availability in each neighborhood group')\nplt.xlabel('Neighborhood')\nplt.ylabel('Number of Reviews')\nplt.legend(loc=\"lower left\",ncol=airbnb['availability_365_group'].nunique()\/\/2+1,mode='expand',fancybox = True, shadow = True,bbox_to_anchor=(0,-0.2,1,0.2))","81d74860":"# for convenience we ignore outliers from price and minimum_nights columns\nsns.jointplot(x='minimum_nights',y='price',data=airbnb[(airbnb['price']<600) & (airbnb['minimum_nights']<30)])","ad5d840a":"# now let's exam the location of listings, and display the locations on the NYC map\nplt.figure(figsize=(10,8))\ng = sns.scatterplot(x='longitude',y='latitude',data=airbnb,hue='neighbourhood_group',s=8,palette='viridis',zorder=2)\nmap_img = plt.imread('..\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\ng.imshow(map_img,zorder=1,extent=g.get_xlim() + g.get_ylim(),aspect=g.get_aspect())\nplt.title('Map of listings')\nplt.legend(title='Neighbourhood Groups')\nplt.xlabel('Listing Longitude')\nplt.ylabel('Listing Latitude')\nplt.legend(frameon=False)","6dc65d22":"# price distribution on the map\nplt.figure(figsize=(10,8))\nmap_img = plt.imread('..\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nplt.imshow(map_img,zorder=1,aspect='auto',extent=[-74.258, -73.7, 40.49, 40.92])\ng = plt.scatter(x=airbnb['longitude'],y=airbnb['latitude'],c=airbnb['price'],cmap=plt.get_cmap('coolwarm'),alpha=0.5,s=10,zorder=2,norm=matplotlib.colors.LogNorm())\nplt.title('Map of Price Distribution')\nplt.colorbar(g).set_label('Log Price of Listings')\nplt.grid(True)","5fa38a79":"# let's exam the average price a host posts on all his\/her listings\nlisting_mean_price = airbnb[airbnb['calculated_host_listings_count']<50].groupby(['host_id','calculated_host_listings_count'],sort=False)['price'].agg([('price_avg','mean')]).reset_index().sort_values(by=['calculated_host_listings_count','price_avg'])\nprint(listing_mean_price.head())","7fadeff3":"# let's first do a stripplot to see how host listings count distribute\ng = sns.stripplot(x='calculated_host_listings_count',y='price_avg',data=listing_mean_price,palette='viridis')\ng.set(yscale='log')","d48a8d16":"# from above we can see most hosts own less than 10 listings. Let's take a closer look at those hosts with 10 or less listings\ng = sns.boxplot(x='calculated_host_listings_count',y='price_avg',data=listing_mean_price[listing_mean_price['calculated_host_listings_count']<11],palette='viridis')\ng.set(yscale='log')","c46fe8c0":"from sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","855c29c5":"airbnb_prep = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\nairbnb_prep.drop(['id','name','host_name','last_review'],axis=1,inplace=True) # since we drop name, host_name and last_review, we no longer need to care about missing values from these columns\nairbnb_prep['reviews_per_month'] = airbnb_prep['reviews_per_month'].fillna(value=0,inplace=False)\nairbnb_prep = airbnb_prep[airbnb_prep['price']>0]","e1c4bfef":"le = preprocessing.LabelEncoder()\nle.fit(airbnb_prep['neighbourhood_group'])\nairbnb_prep['neighbourhood_group'] = le.transform(airbnb_prep['neighbourhood_group'])\nle.fit(airbnb_prep['neighbourhood'])\nairbnb_prep['neighbourhood'] = le.transform(airbnb_prep['neighbourhood'])\nle.fit(airbnb_prep['room_type'])\nairbnb_prep['room_type'] = le.transform(airbnb_prep['room_type'])","d24fe508":"airbnb_prep.sort_values(by='price',ascending=True,inplace=True)\nprint(airbnb_prep.head())","3f64b24f":"X = airbnb_prep.drop(['price'],axis=1,inplace=False)\ny = airbnb_prep['price']\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=101)","94d67121":"lm = LinearRegression()\nlm.fit(X_train,y_train)\n# predict y using trained model\ny_pred = lm.predict(X_test)\n# get evaluation matrix\nprint(\"\"\"\n        Mean Squared Error: {}\n        R2 Score: {}\n        Mean Absolute Error: {}\n      \"\"\".format(\n    np.sqrt(metrics.mean_squared_error(y_test,y_pred)),\n    metrics.r2_score(y_test,y_pred)*100,\n    metrics.mean_absolute_error(y_test,y_pred)\n))","bdc018d7":"linear_error = pd.DataFrame({'Actual Values':np.array(y_test).flatten(),\n                             'Predicted Values':y_pred.flatten()})\nprint(linear_error.head(10))\nsns.regplot(x=y_pred,y=y_test)\nplt.title('Evaluated predictions - Linear')\nplt.xlabel('Predictions')\nplt.ylabel('Test')","4fdbc12d":"GBoost = GradientBoostingRegressor()\nGBoost.fit(X_train,y_train)\n# predict y using trained model\ny_pred2 = GBoost.predict(X_test)\n# get evaluation matrix\nprint(\"\"\"\n        Mean Squared Error: {}\n        R2 Score: {}\n        Mean Absolute Error: {}\n      \"\"\".format(\n    np.sqrt(metrics.mean_squared_error(y_test,y_pred2)),\n    metrics.r2_score(y_test,y_pred2)*100,\n    metrics.mean_absolute_error(y_test,y_pred2)\n))","07f882f6":"gboost_error = pd.DataFrame({'Actual Values':np.array(y_test).flatten(),\n                             'Predicted Values':y_pred2.flatten()})\nprint(gboost_error.head(10))\nsns.regplot(x=y_pred2,y=y_test)\nplt.title('Evaluated predictions - GBoost')\nplt.xlabel('Predictions')\nplt.ylabel('Test')","8da32922":"# Exploratory data analysis","e94dd8d8":"# Project Description\n\nThis project uses a data set that contains almost 50 thousand airbnb listings in NYC. Information about the listings include room info, host info, neighborhoods, geographical location, reviews, availability, et cetera.\n\nThe purpose of this task is to predict the price of NYC Airbnb rentals based on the data provided and any external dataset(s) with relevant information.","c6aa2dbe":"# Project Pipeline\n\n1. Data extract and preprocessing\n    * Missing values\n    * Abnormal values\n    * Redundant features\n2. Exploratory data analysis and visualization\n    * Price related\n    * Geographical distributions\n3. Prediction using two of the most popular techniques:\n    * Linear Regression\n    * Gradient Boosting\n4. Summary","ad8a04b4":"It seems that extreme high priced listings tend to ask for a smaller minimum_nights of stay, though from correlation matrix we don't see such negative correlation between price and minimum_nights.","65adb466":"Before we start prediction, one thing to point out is that we are missing some other important features such as average rating of listings. Compared to number of reviews or reviews per month, I think the average rating is a more relevant factor to the price of listings. Also, it'd be great if the dataset contains data on things like parking, gym, in-unit washer\/dryer, etc. \nWith above said, we can expect the result of the models might not be robust as the dataset isn't comprehensive... ","a14036a1":"*From above we can see there is a slight trend that: when a host owns 5 or less listings, the average price of listings tend to descrease along with increase of number of listings. When a host owns 6 or more listings, the average price of listings tend to increase along with increase of number of listings. Maybe because middle class have limited budget while rich people tend to invest in more real estates with higher prices?*","bcaa4f8d":"From the above boxplot we can see there is a weak trend that the higher the price, the more available(vacant) the listing will be on the market.","39dd702d":"# Prediction","cf98d0a4":"We can see 66% hosts usually have only 1 listing","69c97851":"It looks top reviewed listings are mostly located in Manhattan and North Brooklyn.","36c93681":"There isn't a clear trend here. It seems that at certain point listings with more reviews tend to be more available on the market. Is it because more negative reviews are given and displayed?","c989d828":"Using this matrix functionn we can very quickly find that reviews_per_month and last_review have a very similar pattern of missing values while missing values from host_name and name don't show such pattern\n\n","af9acda0":"Check null values. Important questions when thinking about missing data:\n1. How prevalent is the missing data?\n2. Is missing data random or does it have a pattern?","f336cce5":"# Summary","286d1b60":"Using the heatmap function, we can tell correlation of missingness between reviews_per_month and last_review is 1, which means if one variable appears then the other variable is very likely to be present. ","be30ee23":"From the above we can see both columns reviews_per_month and last_review have the same large amount of null values. Also number of null values for host_name and name are different, so maybe there is something worth exploring.","ef45a629":"# Data extract and preprocessing","6f982632":"This is a good project for data visualization practice with Python. As we mentioned earlier, it's not a good project to practice modelling skills as it misses certain data dimensions. \n\nIn this practice, we utilized visualization techniques to explore distribution of each data feature as well as relations between different features. We also made good use of the latitude and longitude columns to generate geographical heatmap color-coded by features such as price, number of reviews.\n\nAnother thing we could do is apply natural language processing techniques to study the most frequency words hosts use to name and describe their listings, and to further study on the relationship between the frequent words and the number of reviews. In the dataset we only have name feature of listings, it could be helpful if the dataset has a column for description of listings. \n\nOverall, we discovered a few interesting relations between features, and raised a couple questions worth further discussion."}}