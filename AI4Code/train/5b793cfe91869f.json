{"cell_type":{"32093603":"code","c300140b":"code","1fa51e9e":"code","6534696e":"code","764a0f76":"code","8d84a43b":"code","e733e96b":"code","4e7ff0b6":"code","ca42c3b2":"code","f3fcba4d":"code","c449262d":"code","5333283d":"code","f5be2a9a":"code","1b92fd66":"code","0514655a":"code","ac5f3401":"code","3ebf568b":"code","5b44c382":"code","8fba8fe5":"code","8912f5a2":"code","d1bf5bbc":"code","1f0c5004":"code","07ec3f1e":"code","1b7d325b":"markdown","bbd81c27":"markdown","9b6c6cca":"markdown","09e16e36":"markdown","71d06358":"markdown","8200f2a2":"markdown","67fde628":"markdown","8608b71c":"markdown","2781845b":"markdown","459c3c7c":"markdown","e54d68e9":"markdown"},"source":{"32093603":"import pandas as pd\n\ndf = pd.read_csv(\"..\/input\/train.csv\")\nprint(df.info())","c300140b":"from sklearn.metrics.scorer import make_scorer\n\ndef rmlse(y, y0):\n    assert len(y) == len(y0)\n    return np.sqrt(np.mean(np.power(np.log1p(y)-np.log1p(np.clip(y0, 0, None)), 2)))\n\nrmsle_scorer = make_scorer(rmlse, greater_is_better=False)","1fa51e9e":"import pandas as pd\n\ndf = pd.read_csv(\"..\/input\/train.csv\")\nprint(df.info())","6534696e":"test = pd.read_csv(\"..\/input\/test.csv\")\nprint(test.info())","764a0f76":"print(df.genres)","8d84a43b":"import numpy as np\n\nallgenres = set([i[\"name\"] for j in df.genres[df.genres.notnull()] for i in eval(j)])\nd = {i: np.zeros(df.shape[0], dtype=int) for i in allgenres}\nd[\"Missing\"] = np.zeros(df.shape[0], dtype=int)\ngenres_matrix = pd.DataFrame(d)\n\ngenres_matrix[\"Missing\"][pd.isnull(df.genres)] = 1.0\nfor j,i in enumerate(pd.notnull(df.genres)):\n    if i:\n        for k in eval(df.genres[j]):\n            genres_matrix.loc[j, k[\"name\"]] += 1\ngenres_matrix[\"genres_number\"] = genres_matrix.apply(sum, axis=1)","e733e96b":"print(set(genres_matrix.genres_number))","4e7ff0b6":"print(df.production_companies[0:10])","ca42c3b2":"allcompanies = set([i[\"name\"] for j in df.production_companies[df.production_companies.notnull()] for i in eval(j)])\nd = {i: np.zeros(df.shape[0], dtype=int) for i in allcompanies}\nd[\"Missing\"] = np.zeros(df.shape[0], dtype=int)\ncompanies_matrix = pd.DataFrame(d)\n\ncompanies_matrix[\"Missing\"][pd.isnull(df.production_companies)] = 1.0\nfor j,i in enumerate(pd.notnull(df.production_companies)):\n    if i:\n        for k in eval(df.production_companies[j]):\n            companies_matrix.loc[j, k[\"name\"]] += 1\ncompanies_matrix[\"companies_number\"] = companies_matrix.sum(axis=1)-companies_matrix.Missing","f3fcba4d":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"..\/input\/train.csv\")\ntrain = pd.DataFrame(df[[\"budget\", \"popularity\", \"runtime\", \"status\", \"original_language\"]])\ntrain = pd.get_dummies(train)\ntest = pd.read_csv(\"..\/input\/test.csv\")\ndfte = pd.DataFrame(test[[\"budget\", \"popularity\", \"runtime\", \"status\", \"original_language\"]])\ndfte = pd.get_dummies(dfte)\nmissing_columns = set(dfte.columns) - set(train.columns)\nfor _ in missing_columns:\n    train[_] = 0\nmissing_columns = set(train.columns) - set(dfte.columns)\nfor _ in missing_columns:\n    dfte[_] = 0","c449262d":"train.loc[1335, \"runtime\"] = 130.0\ntrain.loc[2302, \"runtime\"] = 90.0\ntrain[\"homepage_missing\"] = np.array(df.homepage.isna(), dtype=int)\ntrain[\"belongs_to_collection_missing\"] = np.array(df.belongs_to_collection.isna(), dtype=int)\ntrain[\"release_day\"] = [int(i.split(\"\/\")[1]) for i in df.release_date]\ntrain[\"release_month\"] = [int(i.split(\"\/\")[0]) for i in df.release_date]\ntrain[\"release_year\"] = [int(i.split(\"\/\")[2]) for i in df.release_date]\ntrain[\"release_year\"] = [2000+i if i < 18 else 1900+i for i in train.release_year]\n\ntrain[\"poster_length\"] = 0\ntrain.loc[df.poster_path.notnull(), \"poster_length\"] = [len(i) for i in df.poster_path[df.poster_path.notnull()]]\n\nlabel = df[\"revenue\"]","5333283d":"train[\"contains_com\"] = 0\ntrain[\"contains_uk\"] = 0\ntrain[\"contains_fr\"] = 0\ntrain[\"contains_de\"] = 0\ntrain[\"contains_net\"] = 0\ntrain[\"contains_kr\"] = 0\ntrain[\"contains_disney\"] = 0\ntrain[\"contains_sony\"] = 0\ntrain[\"contains_warnerbros\"] = 0\ntrain[\"contains_indexhtml\"] = 0\ntrain[\"contains_movie\"] = 0\ntrain[\"contains_wikipedia\"] = 0\ntrain[\"count_slash\"] = 0\n\ntrain.loc[df.homepage.notnull(), \"contains_com\"] = [1 if ((i != \"\") & (\".com\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_uk\"] = [1 if ((i != \"\") & (\".uk\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_fr\"] = [1 if ((i != \"\") & (\".fr\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_de\"] = [1 if ((i != \"\") & (\".de\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_net\"] = [1 if ((i != \"\") & (\".net\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_kr\"] = [1 if ((i != \"\") & (\".kr\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_disney\"] = [1 if ((i != \"\") & (\"disney\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_sony\"] = [1 if ((i != \"\") & (\"sony\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_warnerbros\"] = [1 if ((i != \"\") & (\"warnerbros\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_indexhtml\"] = [1 if ((i != \"\") & (\"index.html\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_movie\"] = [1 if ((i != \"\") & (\"movie\" in i.lower())) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"contains_wikipedia\"] = [1 if ((i != \"\") & (\"wikipedia\" in i)) else 0 for i in df.homepage[df.homepage.notnull()]]\ntrain.loc[df.homepage.notnull(), \"count_slash\"] = [len(i.split(\"\/\")) for i in df.homepage[df.homepage.notnull()]]","f5be2a9a":"import numpy as np\n\nd = {i: np.zeros(df.shape[0], dtype=int) for i in allgenres}\nd[\"Missing\"] = np.zeros(df.shape[0], dtype=int)\ngenres_matrix = pd.DataFrame(d)\n\ngenres_matrix[\"Missing\"][pd.isnull(df.genres)] = 1.0\nfor j,i in enumerate(pd.notnull(df.genres)):\n    if i:\n        for k in eval(df.genres[j]):\n            genres_matrix.loc[j, k[\"name\"]] += 1\ngenres_matrix[\"genres_number\"] = genres_matrix.sum(axis=1)-genres_matrix.Missing\nprint(genres_matrix.shape)","1b92fd66":"allcompanies = set([i[\"name\"] for j in df.production_companies[df.production_companies.notnull()] for i in eval(j)])\nd = {i: np.zeros(train.shape[0], dtype=int) for i in allcompanies}\nd[\"Missing\"] = np.zeros(train.shape[0], dtype=int)\ncompanies_matrix = pd.DataFrame(d)\n\ncompanies_matrix[\"Missing\"][pd.isnull(df.production_companies)] = 1.0\nfor j,i in enumerate(pd.notnull(df.production_companies)):\n    if i:\n        for k in eval(df.production_companies[j]):\n            companies_matrix.loc[j, k[\"name\"]] += 1\ncompanies_matrix[\"companies_number\"] = companies_matrix.sum(axis=1)-companies_matrix.Missing\nprint(companies_matrix.shape)","0514655a":"train[\"row\"] = np.linspace(0, train.shape[0], train.shape[0], dtype=int)\ngenres_matrix[\"row\"]= np.linspace(0, train.shape[0], train.shape[0], dtype=int)\ncompanies_matrix[\"row\"]= np.linspace(0, train.shape[0], train.shape[0], dtype=int)\ntrain = pd.concat([train, genres_matrix, companies_matrix], axis=1, join=\"inner\")\ntrain.drop([\"row\"], axis = 1, inplace=False)\nprint(train.shape)","ac5f3401":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\n\nmodel  = RandomForestRegressor(n_estimators=100, random_state=2019)\nscores_randomforest = cross_val_score(model, train, label, cv=10, scoring=rmsle_scorer)\nprint(-np.mean(scores_randomforest), \"+\/-\" ,np.std(scores_randomforest))","3ebf568b":"model  = RandomForestRegressor(n_estimators=100)\nmodel.fit(train, label)","5b44c382":"dfte[\"homepage_missing\"] = np.array(test.homepage.isna(), dtype=int)\ndfte[\"belongs_to_collection_missing\"] = np.array(test.belongs_to_collection.isna(), dtype=int)\ndfte.loc[243, \"runtime\"] = 93.0\ndfte.loc[1489, \"runtime\"] = 91.0\ndfte.loc[1632, \"runtime\"] = 100.0\ndfte.loc[3817, \"runtime\"] = 90.0\n\ntest.loc[828, \"release_date\"] = \"03\/30\/2001\"\ndfte[\"release_day\"] = [int(i.split(\"\/\")[1]) for i in test.release_date]\ndfte[\"release_month\"] = [int(i.split(\"\/\")[0]) for i in test.release_date]\ndfte[\"release_year\"] = [int(i.split(\"\/\")[2]) for i in test.release_date]\ndfte[\"release_year\"] = [2000+i if i < 18 else 1900+i for i in dfte.release_year]\n\ndfte[\"poster_length\"] = 0\ndfte.loc[test.poster_path.notnull(), \"poster_length\"] = [len(i) for i in test.poster_path[test.poster_path.notnull()]]","8fba8fe5":"dfte[\"contains_com\"] = 0\ndfte[\"contains_uk\"] = 0\ndfte[\"contains_fr\"] = 0\ndfte[\"contains_de\"] = 0\ndfte[\"contains_net\"] = 0\ndfte[\"contains_kr\"] = 0\ndfte[\"contains_disney\"] = 0\ndfte[\"contains_sony\"] = 0\ndfte[\"contains_warnerbros\"] = 0\ndfte[\"contains_indexhtml\"] = 0\ndfte[\"contains_movie\"] = 0\ndfte[\"contains_wikipedia\"] = 0\ndfte[\"count_slash\"] = 0\n\ndfte.loc[test.homepage.notnull(), \"contains_com\"] = [1 if ((i != \"\") & (\".com\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_uk\"] = [1 if ((i != \"\") & (\".uk\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_fr\"] = [1 if ((i != \"\") & (\".fr\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_de\"] = [1 if ((i != \"\") & (\".de\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_net\"] = [1 if ((i != \"\") & (\".net\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_kr\"] = [1 if ((i != \"\") & (\".kr\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_disney\"] = [1 if ((i != \"\") & (\"disney\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_sony\"] = [1 if ((i != \"\") & (\"sony\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_warnerbros\"] = [1 if ((i != \"\") & (\"warnerbros\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_indexhtml\"] = [1 if ((i != \"\") & (\"index.html\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_movie\"] = [1 if ((i != \"\") & (\"movie\" in i.lower())) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"contains_wikipedia\"] = [1 if ((i != \"\") & (\"wikipedia\" in i)) else 0 for i in test.homepage[test.homepage.notnull()]]\ndfte.loc[test.homepage.notnull(), \"count_slash\"] = [len(i.split(\"\/\")) for i in test.homepage[test.homepage.notnull()]]","8912f5a2":"import numpy as np\n\nd = {i: np.zeros(test.shape[0], dtype=int) for i in allgenres}\nd[\"Missing\"] = np.zeros(test.shape[0], dtype=int)\ngenres_matrix = pd.DataFrame(d)\n\ngenres_matrix[\"Missing\"][pd.isnull(test.genres)] = 1.0\nfor j,i in enumerate(pd.notnull(test.genres)):\n    if i:\n        for k in eval(test.genres[j]):\n            genres_matrix.loc[j, k[\"name\"]] += 1\ngenres_matrix[\"genres_number\"] = genres_matrix.sum(axis=1)-genres_matrix.Missing\nprint(genres_matrix.shape)","d1bf5bbc":"d1 = {i: np.zeros(test.shape[0], dtype=int) for i in allcompanies}\nd1[\"Missing\"] = np.zeros(test.shape[0], dtype=int)\ncompanies_matrix = pd.DataFrame(d1)\n\ncompanies_matrix[\"Missing\"][pd.isnull(test.production_companies)] = 1.0\nfor j,i in enumerate(pd.notnull(test.production_companies)):\n    if i:\n        for k in eval(test.production_companies[j]):\n            if (k[\"name\"] in d1.keys()):\n                companies_matrix.loc[j, k[\"name\"]] += 1\ncompanies_matrix[\"companies_number\"] = companies_matrix.sum(axis=1)-companies_matrix.Missing\nprint(companies_matrix.shape)","1f0c5004":"dfte[\"row\"] = np.linspace(0, dfte.shape[0], dfte.shape[0], dtype=int)\ngenres_matrix[\"row\"]= np.linspace(0, dfte.shape[0], dfte.shape[0], dtype=int)\ncompanies_matrix[\"row\"]= np.linspace(0, dfte.shape[0], dfte.shape[0], dtype=int)\ndfte = pd.concat([dfte, genres_matrix, companies_matrix], axis=1, join=\"inner\")\ndfte.drop([\"row\"], axis = 1, inplace=False)","07ec3f1e":"predictions = model.predict(dfte)\npredictions = np.clip(predictions, 0, None)\nsubmission = pd.DataFrame({\n    \"id\" : test.id,\n    \"revenue\": predictions\n})\nsubmission.to_csv(\"submission.csv\", index=False)","1b7d325b":"## Genres","bbd81c27":"# Adding variables","9b6c6cca":"## Production companies","09e16e36":"## Features","71d06358":"## Train the model","8200f2a2":"Train on the full train set:","67fde628":"## Prepare submission","8608b71c":"# Importing data","2781845b":"The input variables currenly unused:\n\n* **id**                      \n* ~~**belongs_to_collection**~~\n* ~~**budget**~~                  \n* **genres**                  \n* ~~**homepage**~~                 \n* **imdb_id**                  \n* ~~**original_language**~~        \n* **original_title**           \n* **overview**                 \n* ~~**popularity**~~             \n* ~~**poster_path**~~             \n* **production_companies**    \n* **production_countries**     \n* ~~**release_date**~~            \n* ~~**runtime**~~                \n* **spoken_languages**        \n* ~~**status**~~                   \n* **tagline**                  \n* **title**                   \n* **Keywords**                \n* **cast**                     \n* **crew**                    \n* ~~**revenue**~~                 \n\nThe metric to be used is **RMLSE**:","459c3c7c":"Prepare the test set:","e54d68e9":"# Model\n\n## Select train and test"}}