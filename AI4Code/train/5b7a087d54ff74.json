{"cell_type":{"a27066f6":"code","3f521a33":"code","c4be22b5":"code","0728c2e5":"code","0779b8d0":"code","53d4a9fc":"code","00aa30ed":"code","df36ece4":"code","786e9c9b":"code","a1518807":"code","7559e909":"code","1fc94063":"code","9a97dd46":"code","8dd8362f":"code","7792eb7c":"code","64ae863b":"code","89567b63":"code","19fff39f":"code","295a8889":"code","3e5d28e9":"code","6938b916":"code","f31dbe41":"code","bf54c949":"code","ab196fda":"code","3ab6d4aa":"code","a038fda3":"code","9136b46b":"code","3c4b65ff":"code","c1fccce4":"code","fe427fa4":"code","e9216d7f":"code","bf84d899":"code","ef54110c":"code","df1bd76c":"code","8fe2d1db":"code","23c94c2d":"code","5fa40ad6":"code","8f773f14":"code","97bac3ee":"code","6aba7cee":"code","1e1defa2":"code","6e1d946b":"code","c1cc2ac9":"code","da3d4a0f":"code","d95f54d8":"code","7c86e032":"code","33e816a2":"code","b654f34d":"code","515b644c":"code","1c8d6b81":"code","372236e4":"code","81f7c504":"code","f2720e24":"markdown","4b0358b2":"markdown","86a02cfc":"markdown","985f927d":"markdown","7fad9bcf":"markdown","5fa9d228":"markdown","2aa09a1a":"markdown","cc79cb47":"markdown","ff0e667a":"markdown","5c657ac2":"markdown","4d898c4b":"markdown","5a9e75b2":"markdown","736911a7":"markdown","29520bcc":"markdown","6c30e2f6":"markdown","1120ac60":"markdown","e8dedaf5":"markdown","fdc43f4e":"markdown","28cfea12":"markdown","6cf5c7ce":"markdown","3f4ae7b4":"markdown","69898fe0":"markdown","41482aa5":"markdown","ecd1bac2":"markdown","c1d3836e":"markdown","0e22288f":"markdown","141cf816":"markdown","341b40e0":"markdown","6ea5cd8b":"markdown","e3e0d0b2":"markdown","3417c9f5":"markdown","cf585399":"markdown","9d3fd5ac":"markdown","2ff7093b":"markdown","d0b5c447":"markdown","ffa67f78":"markdown","c5b271d2":"markdown","58f8916a":"markdown","b11c1a38":"markdown","366d03ee":"markdown","1f6643cd":"markdown","e32b7f0c":"markdown","a00b6d49":"markdown","466876cb":"markdown","a04402e3":"markdown","ee326f44":"markdown","10eef877":"markdown","f04773b8":"markdown"},"source":{"a27066f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f521a33":"df = pd.read_csv('..\/input\/banking-dataset-marketing-targets\/train.csv', sep=\";\")\ndf.head()","c4be22b5":"df.tail()","0728c2e5":"df.shape #(There ar 45211 rows and 17 columns)","0779b8d0":"df.dtypes #The dtypes property is used to find the dtypes in the DataFrame.","53d4a9fc":"df.info()","00aa30ed":"#Creating a series from a dataframe\n# Series represents a single column of a dataframe\ntype(df.marital)","df36ece4":"# Checking the missing values in all the columns\n\nprint(\"Missing values in all the columns:\")\nprint(df.isna().sum())\n","786e9c9b":"# check missing values for each column \ndf.isnull().sum().sort_values(ascending=False)","a1518807":"df.describe()","7559e909":"df.describe(include='all')","1fc94063":"df.nunique()","9a97dd46":"df.nunique(axis=0)","8dd8362f":"df.groupby(by=['job'], as_index=False)['balance'].count()","7792eb7c":"df.job.value_counts()","64ae863b":"df.groupby(by=['marital'], as_index=False)['balance'].count()","89567b63":"df.groupby(by=['education'], as_index=False)['balance'].count()","19fff39f":"df.groupby(by=['default'], as_index=False)['balance'].count()","295a8889":"df.groupby(by=['y'], as_index=False)['balance'].count()","3e5d28e9":"df_temp_new = df[(df['age'] > 25) & (df['age'] < 45)]","6938b916":"df_new = df_temp_new[['age', 'balance','duration']]\ndf_new.head()","f31dbe41":"df.loc[(df.age > 25) & (df.age <45), ['age', 'balance','duration']].head()","bf54c949":"df.month.unique()","ab196fda":"df['month_new'] = df['month'].map({'jan': 1, 'feb': 2,'mar': 3,'apr': 4,'may': 5,'jun': 6,'jul': 7,'aug': 8,'sep': 9,'oct': 10,'nov': 11,'dec': 12})\ndf.head()","3ab6d4aa":"pd.crosstab(df.loan,df.housing)","a038fda3":"pd.crosstab(df.loan,df.y)","9136b46b":"pd.crosstab(df.y,df.housing)","3c4b65ff":"import seaborn as sns ","c1fccce4":"sns.countplot(x='age',data=df)","fe427fa4":"sns.displot(data=df, x='age', kind=\"kde\")","e9216d7f":"sns.displot(data=df, x='age', hue='y', kind=\"kde\")","bf84d899":"plt.figure(figsize=(100, 18))\nsns.countplot(x='balance',data=df)\nplt.show()\n\n# import plt from matplotlib","ef54110c":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(100, 18))\nsns.displot(data=df, x='balance', kind=\"kde\")\n","df1bd76c":"sns.countplot(x='duration',data=df)","8fe2d1db":"import seaborn as sns\nsns.barplot(x=\"job\", y=\"age\", data=df)","23c94c2d":"jobs = pd.DataFrame(df.job.value_counts())\njobs.reset_index(inplace=True)\njobs.columns = ['job', 'count']\njobs","5fa40ad6":"sns.barplot(y=\"job\", x= 'count', data=jobs, orient='h')","8f773f14":"sns.barplot(x=\"marital\", y=\"age\", data=df)","97bac3ee":"sns.barplot(x=\"education\", y=\"age\", data=df)","6aba7cee":" df.age.astype(int)","1e1defa2":"df['y_new'] = df['y'].map({'yes': 1, 'no': 0})\ndf.head()","6e1d946b":"from scipy import stats\nstats.ttest_ind(df.age,df.y_new)","c1cc2ac9":"y_age_yes = df.loc[df.y == 'yes', 'age'].reset_index(drop=True)\ny_age_no = df.loc[df.y == 'no', 'age'].reset_index(drop=True)\ny_age_yes.shape, y_age_no.shape","da3d4a0f":"y_age_yes.mean(), y_age_no.mean()","d95f54d8":"stats.ttest_ind(y_age_yes,y_age_no, equal_var=False)","7c86e032":"stats.ttest_ind(df.balance,df.y_new)","33e816a2":"contigency= pd.crosstab(df['y_new'], df['job']) \ncontigency","b654f34d":"#Chi-square test of independence. \nfrom scipy.stats import chi2_contingency\nc, p, dof, expected = chi2_contingency(contigency) \n# Print the p-value\nprint(p)","515b644c":"contigency= pd.crosstab(df['y_new'], df['education']) \ncontigency","1c8d6b81":"c, p, dof, expected = chi2_contingency(contigency) \n# Print the p-value\nprint(p)","372236e4":"pd.crosstab(df.age,df.y_new)","81f7c504":"pd.crosstab(df.loan,df.y_new).plot.bar(stacked=True)","f2720e24":"> Abhi: Try to understand why strings are stored as objects, also try to optimize the storage. Eg if you find a column which wont require 64 bits try to reduce it to 32. <br>\n> df.info gives you a little more information about the dataset, also the memory it is occupying","4b0358b2":"#### Shape","86a02cfc":"############################################################################################","985f927d":"#### Number of records in different default types ","7fad9bcf":"#### Basic stats of all columns","5fa9d228":"#### Bar plot of jobs","2aa09a1a":"### Insights\n\n#### Build assumptions and test using the data\n \n* Do young customer book more TDs or older generation?\n* Do people who already have loan tend to buy TDs?\n* Add some more and test you assumptions\/hypothesis...","cc79cb47":"> Abhi: Best way to filter out rows and columns in pandas is to use loc and iloc. loc uses column names and iloc uses index for filtering","ff0e667a":"#### Number of records in different education types ","5c657ac2":"#### Do young customer book more TDs or older generation?","4d898c4b":"#### Data type of all the columns","5a9e75b2":"#### Perfrom chi sq on y * job","736911a7":"#### Missing values in all columns","29520bcc":"## Variables\n\n*  age (numeric)\n*  job : type of job (categorical: \"admin.\",\"unknown\",\"unemployed\",\"management\",\"housemaid\",\"entrepreneur\",\"student\", \"blue-collar\",\"self-employed\",\"retired\",\"technician\",\"services\")\n*  marital : marital status (categorical: \"married\",\"divorced\",\"single\"; note: \"divorced\" means divorced or widowed)\n*  education (categorical: \"unknown\",\"secondary\",\"primary\",\"tertiary\")\n*  default: has credit in default? (binary: \"yes\",\"no\")\n*  balance: average yearly balance, in euros (numeric)\n*  housing: has housing loan? (binary: \"yes\",\"no\")\n*  loan: has personal loan? (binary: \"yes\",\"no\")\n\n### related with the last contact of the current campaign:\n*  contact: contact communication type (categorical: \"unknown\",\"telephone\",\"cellular\")\n*  day: last contact day of the month (numeric)\n*  month: last contact month of year (categorical: \"jan\", \"feb\", \"mar\", \u2026, \"nov\", \"dec\")\n*  duration: last contact duration, in seconds (numeric)\n\n### other attributes:\n*  campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n*  pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric, -1 means client was not previously contacted)\n*  previous: number of contacts performed before this campaign and for this client (numeric)\n*  poutcome: outcome of the previous marketing campaign (categorical: \"unknown\",\"other\",\"failure\",\"success\")\n\n### Output variable (desired target):\n* y - has the client subscribed a term deposit? (binary: \"yes\",\"no\")","6c30e2f6":"############################################################################################","1120ac60":"> Abhi: Using the data you need to answer if young people buy td or not","e8dedaf5":"### Stats\n\n* Perform t test\/ anova on y * age\n* Perform t test\/ anova on y * balance\n* Perfrom chi sq on y * job\n* Perfrom chi sq on y * education","fdc43f4e":"#### Do people who already have loan tend to buy TDs?","28cfea12":"############################################################################################","6cf5c7ce":"## Distinct values in all columns","3f4ae7b4":"> Abhi: The t test is done in a different way","69898fe0":"> Same for duration, for continous varibles use distplot","41482aa5":"#### Perfrom chi sq on y * education","ecd1bac2":"#### Create a mapping for month column and create a new month column eg jan-1, feb-2 .....","c1d3836e":"> Abhi: Another way to plot continuous values","0e22288f":"#### Bar plot of marital","141cf816":"#### Distribution on age","341b40e0":"#### Number of records in different job types ","6ea5cd8b":"> Abhi: Ploting countplot on balances will take lot of time","e3e0d0b2":"> Abhi: Another way to do the same thing is by using value_counts, it will also arranfe in descending order","3417c9f5":"#### Distribution on balance","cf585399":"> Abhi: In python isna() and isnull() do the same thing so you dont need to use both the functions, coming from R background I can understand because R's dataframes treat na and null different. <br>\n> In python missing values are NaN","9d3fd5ac":"### Slicing the data\n\n* Select rows with age above 25 and less than 45 and select age, balance and duration columns to create a separate dataframe. Calculate avg values of these columns.\n* Create a mapping for month column and create a new month column eg jan-1, feb-2 .....\n* Create a cross tab with loan and housing loan column, loan and y & housing and y\n","2ff7093b":"### Basic EDA\n\n* Number of records in different job types \n* Number of records in different martial status \n* Number of records in different education types \n* Number of records in different default types \n* Number of records in different y types ","d0b5c447":"### Visualization\n\n* Distribution on age\n* Distribution on balance\n* Distribution on duration\n* Bar plot of jobs\n* Bar plot of marital\n* Bar plot of education","ffa67f78":"#### Number of records in different y types ","c5b271d2":"############################################################################################","58f8916a":"#### Bar plot of education","b11c1a38":"#### Add some more and test you assumptions\/hypothesis...","366d03ee":"### Understaing the data\n\n* shape\n* data type of all the columns\n* missing values in all columns\n* basic stats of all columns\n* distinct values in all columns","1f6643cd":"#### Number of records in different martial status ","e32b7f0c":"############################################################################################","a00b6d49":"#### Perform t test\/ anova on y * balance","466876cb":"> Abhi: One option when we have lengthly names try to use horizontal bar plot. Also we should not plot jobs and age in barplots. Try to calculate count of jobs and plot a barplot","a04402e3":"#### Distribution on duration","ee326f44":"#### Create a cross tab with loan and housing loan column, loan and y & housing and y","10eef877":"#### Perform t test\/ anova on y * age","f04773b8":"#### Select rows with age above 25 and less than 45 and select age, balance and duration columns to create a separate dataframe. Calculate avg values of these columns."}}