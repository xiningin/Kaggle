{"cell_type":{"a8632c2f":"code","5ab30881":"code","2281b446":"code","d0a374c1":"code","de310d4a":"code","0eb81215":"code","b63b5da3":"code","b1120403":"code","8a58c60d":"markdown"},"source":{"a8632c2f":"import matplotlib.pyplot as plt\nfrom random import choice","5ab30881":"class Randomwalk:\n\n\tdef __init__(self, num_points=5000):\n\t\tself.num_points = num_points\n\t\tself.x_values = [0]\n\t\tself.y_values = [0]\n\n\tdef fill_walk(self):\n\t\twhile len(self.x_values) < self.num_points:\n\t\t\tx_direction = choice([1,-1])\n\t\t\tx_distance = choice([0,1,2,3,4])\n\t\t\tx_step = x_direction * x_distance\n\n\t\t\ty_direction = choice([1,-1])\n\t\t\ty_distance = choice([0,1,2,3,4])\n\t\t\ty_step = y_direction * y_distance\n\n\t\t\tif x_step == 0 and y_step ==0:\n\t\t\t\tcontinue\n\n\t\t\tx = self.x_values[-1] + x_step\n\t\t\ty = self.y_values[-1] + y_step\n\n\t\t\tself.x_values.append(x)\n\t\t\tself.y_values.append(y)\n\t\t\t","2281b446":"# Make a random walk\nrw = Randomwalk()\nrw.fill_walk()\n\n# Plot points in the walk\nplt.style.use('classic')\nfig, ax = plt.subplots()\nax.scatter(rw.x_values, rw.y_values, s=15)\n\nprint(rw.x_values[:20])\nprint(rw.y_values[:20])\nprint(len(rw.x_values))\n\nplt.show()","d0a374c1":"# Coloring the points\n\n# Make a random walk\nrw = Randomwalk()\nrw.fill_walk()\n\n# Plot points in the walk\nplt.style.use('classic')\nfig, ax = plt.subplots()\n\npoint_numbers = range(rw.num_points)\nax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors='none', s=15)\n\nprint(rw.x_values[:20])\nprint(rw.y_values[:20])\nprint(rw.num_points)\nprint(point_numbers)\n\nplt.show()","de310d4a":"# Ploting starting and ending points\n\n# Make a random walk\nrw = Randomwalk()\nrw.fill_walk()\n\n# Plot points in the walk\nplt.style.use('classic')\nfig, ax = plt.subplots()\npoint_numbers = range(rw.num_points)\nax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors='none', s=15)\n\n# Emphasize the first and the last points\nax.scatter(0,0, c='green', edgecolors='none', s=100)\nax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none', s=100)\n\nplt.show()","0eb81215":"# Cleanning up the axes\n\n# Make a random walk\nrw = Randomwalk()\nrw.fill_walk()\n\n# Plot points in the walk\nplt.style.use('classic')\nfig, ax = plt.subplots()\npoint_numbers = range(rw.num_points)\nax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors='none', s=15)\n\n# Emphasize the first and the last points\nax.scatter(0,0, c='green', edgecolors='none', s=100)\nax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none', s=100)\n\n# Remove the axes\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n\nplt.show()","b63b5da3":"# Adding plot points\n\n# Make a random walk\nrw = Randomwalk(50_000)\nrw.fill_walk()\n\n# Plot points in the walk\nplt.style.use('classic')\nfig, ax = plt.subplots()\npoint_numbers = range(rw.num_points)\nax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors='none', s=1)\n\n# Emphasize the first and the last points\nax.scatter(0,0, c='green', edgecolors='none', s=100)\nax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none', s=100)\n\n# Remove the axes\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n\nplt.show()\n","b1120403":"# Altering the size to fill the screen\n\n# Make a random walk\nrw = Randomwalk(50_000)\nrw.fill_walk()\n\n# Plot points in the walk\nplt.style.use('classic')\nfig, ax = plt.subplots(figsize=(15,9))\npoint_numbers = range(rw.num_points)\nax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors='none', s=1)\n\n# Emphasize the first and the last points\nax.scatter(0,0, c='green', edgecolors='none', s=100)\nax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none', s=100)\n\n# Remove the axes\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n\nplt.show()\n","8a58c60d":"# Python Crash Course\nProjects from the book Python Crash Course by Eric Matthes"}}