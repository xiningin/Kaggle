{"cell_type":{"6aee342c":"code","b2cb6958":"code","fac5e0cf":"code","0cab1d8d":"code","13781faf":"code","2347ff75":"code","e28f37a9":"code","2a212eab":"code","15ce45e4":"code","968a6e4f":"code","06e11e40":"code","d2d8e9c0":"code","f1a2cb6a":"code","336ed289":"code","ab6acdee":"code","0064f3c1":"code","1f1f0909":"code","6a90f0c1":"code","1a8e7c10":"code","413ca37a":"code","6188a405":"code","d79ac9f9":"code","ce6525ed":"code","2fafea39":"code","761af574":"code","3b90639b":"code","e9dda62d":"code","3d84746d":"code","27b085b3":"code","1826b350":"code","d1d15471":"code","28614d25":"code","bcb9feb5":"code","4b06d757":"code","fd79709f":"code","d0c7e7b3":"code","8c14a702":"code","e8928f35":"code","b3bf93d5":"code","1fd2e26e":"code","187fa7ae":"code","26b342d0":"code","12d4ea93":"code","a4f5cdfc":"code","2b9bf2f4":"code","473e31f9":"code","0aab9223":"code","db8d8c02":"code","0c191325":"code","65ce28ab":"code","086c6224":"code","6ecee87c":"code","7aecb1c3":"code","50a40279":"code","4db9b514":"code","a7d3b0bb":"code","2fc8196f":"code","746dee9e":"code","a91f6b0e":"code","378369b3":"code","c196ead5":"code","dd76ee40":"code","d497c4d6":"code","d755f931":"code","94cd0950":"code","5ba445f8":"code","eec37c1d":"code","b9f1f376":"code","452b12f2":"code","4a4902bb":"markdown","7841410d":"markdown","c41c64d6":"markdown","bd7fee97":"markdown","f2249ec8":"markdown","0e2727b0":"markdown","11ef4e1c":"markdown","154179bf":"markdown","bf0f2a47":"markdown"},"source":{"6aee342c":"# This Python 3 environment comes with many helpful analytics libraries installed\n\n# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set() # setting seaborn default for plots\n\n\n\n%matplotlib inline","b2cb6958":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","fac5e0cf":"train_df.columns","0cab1d8d":"train_df.head()","13781faf":"train_df.describe()","2347ff75":"train_df.info()","e28f37a9":"test_df.info()","2a212eab":"train_df.isnull().sum()","15ce45e4":"test_df.isnull().sum()","968a6e4f":"train_df['Survived'].value_counts()","06e11e40":"def bar_chart(feature):\n    survived = train_df[train_df['Survived']==1][feature].value_counts()\n    dead = train_df[train_df['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","d2d8e9c0":"bar_chart('Sex')","f1a2cb6a":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","336ed289":"bar_chart('Pclass')","ab6acdee":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","0064f3c1":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","1f1f0909":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","6a90f0c1":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","1a8e7c10":"train_test_data = [train_df, test_df] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain_df['Title'].value_counts()","413ca37a":"test_df['Title'].value_counts()","6188a405":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","d79ac9f9":"bar_chart('Title')","ce6525ed":"X_train_df = train_df.drop(columns=['Survived', 'PassengerId', 'Name', 'Ticket', 'Cabin'])\nX_test_df = test_df.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])","2fafea39":"y_train_df = train_df['Survived']\ny_test_df = test_df['PassengerId']","761af574":"X_train_df.isnull().sum()","3b90639b":"X_test_df.isnull().sum()","e9dda62d":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","3d84746d":"X_train_df['Age'] = X_train_df[['Age','Pclass']].apply(impute_age,axis=1)\nX_test_df['Age'] = X_test_df[['Age','Pclass']].apply(impute_age,axis=1)","27b085b3":"def Age_cat(x):\n    if x <=4 :\n        return 1\n    elif x>4 and x<=14:\n        return 2\n    elif x>14 and x<=30:\n        return 3\n    else:\n        return 4","1826b350":"X_train_df['Age'] = X_train_df['Age'].apply(Age_cat)\nX_test_df['Age'] = X_test_df['Age'].apply(Age_cat)","d1d15471":"X_train_df.Age.unique()","28614d25":"X_train_df['With_someone'] = X_train_df['SibSp'] | X_train_df['Parch']\nX_test_df['With_someone'] = X_test_df['SibSp'] | X_test_df['Parch']\nX_train_df['Family'] = X_train_df['SibSp'] + X_train_df['Parch']+1\nX_test_df['Family'] = X_test_df['SibSp'] + X_test_df['Parch']+1","bcb9feb5":"X_train_df['With_someone'] =X_train_df['With_someone'].apply(lambda x:1 if x >=1 else 0)\nX_test_df['With_someone'] =X_test_df['With_someone'].apply(lambda x:1 if x >=1 else 0)","4b06d757":"X_train_df['With_someone'].unique()","fd79709f":"X_train_df.head()","d0c7e7b3":"mod = X_train_df.Embarked.value_counts().argmax()\nX_train_df.Embarked.fillna(mod, inplace=True)","8c14a702":"fare_med = train_df.Fare.median()\nX_test_df.Fare.fillna(fare_med, inplace=True)","e8928f35":"X_train_df.isnull().sum()","b3bf93d5":"X_test_df.isnull().sum()","1fd2e26e":"X_train_df.columns","187fa7ae":"X_train_df.replace({\"male\": 0, \"female\": 1}, inplace=True)\nX_test_df.replace({\"male\": 0, \"female\": 1}, inplace=True)\nX_train_df.replace({\"S\": 0, \"C\": 1, \"Q\": 2}, inplace=True)\nX_test_df.replace({\"S\": 0, \"C\": 1, \"Q\": 2}, inplace=True)","26b342d0":"X_train_df.head()","12d4ea93":"X_train_df = pd.get_dummies(X_train_df, columns=['Pclass', 'Embarked','Age','Title'], drop_first=True)\nX_test_df = pd.get_dummies(X_test_df, columns=['Pclass', 'Embarked','Age','Title'], drop_first=True)\nX_train_df.head()","a4f5cdfc":"X_train_df = X_train_df.drop(columns=['SibSp','Parch'])\nX_test_df = X_test_df.drop(columns=['SibSp','Parch'])","2b9bf2f4":"X_train_df.shape, X_test_df.shape","473e31f9":"from sklearn.preprocessing import MinMaxScaler\nsc_X = MinMaxScaler()\nX_train_df[['Fare','Family']] = sc_X.fit_transform(X_train_df[['Fare','Family']])\nX_test_df[['Fare','Family']] = sc_X.transform(X_test_df[['Fare','Family']])","0aab9223":"X_train_df.head()","db8d8c02":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import RandomForestClassifier","0c191325":"logi_clf = LogisticRegression(random_state=0)\nlogi_parm = {\"penalty\": ['l1', 'l2'], \"C\": [0.1, 0.5, 1, 5, 10, 50]}\n\nsvm_clf = SVC(random_state=0)\nsvm_parm = {'kernel': ['rbf', 'poly'], 'C': [0.1, 0.5, 1, 5, 10, 50], 'degree': [3, 5, 7], \n            'gamma': ['auto', 'scale']}\n\ndt_clf = DecisionTreeClassifier(random_state=0)\ndt_parm = {'criterion':['gini', 'entropy']}\n\nknn_clf = KNeighborsClassifier()\nknn_parm = {'n_neighbors':[5, 10, 15, 20], 'weights':['uniform', 'distance'], 'p': [1,2]}\n\ngnb_clf = GaussianNB()\ngnb_parm = {'priors':['None']}\n\nclfs = [logi_clf, svm_clf, dt_clf, knn_clf]\nparams = [logi_parm, svm_parm, dt_parm, knn_parm] ","65ce28ab":"clf1 = RandomForestClassifier()\nclf1.fit(X_train_df,y_train_df)\nrf_rand = GridSearchCV(clf1,{'n_estimators':[50,100,200,300,500],'max_depth':[i for i in range (2,11)]},cv=10)\nrf_rand.fit(X_train_df,y_train_df)\nprint(rf_rand.best_score_)\nprint(rf_rand.best_params_)","086c6224":"clf2 = GradientBoostingClassifier()\nclf2.fit(X_train_df,y_train_df)\ngb_rand = GridSearchCV(clf2,{'n_estimators':[50,100,200,300,500],'learning_rate':[0.01,0.1,1],'max_depth':[i for i in range (2,11)]},cv=10)\ngb_rand.fit(X_train_df,y_train_df)\nprint(gb_rand.best_score_)\nprint(gb_rand.best_params_)","6ecee87c":"clf3 = SVC(gamma='auto')\nclf3.fit(X_train_df,y_train_df)\nsvc_rand = GridSearchCV(clf3,{'C':[5,10,15,20],'degree':[i for i in range(1,11)]},cv=10)\nsvc_rand.fit(X_train_df,y_train_df)\nprint(svc_rand.best_score_)\nprint(svc_rand.best_params_)","7aecb1c3":"clf1 = RandomForestClassifier(max_depth=6,n_estimators=200)\nclf1.fit(X_train_df,y_train_df)\nclf2 = GradientBoostingClassifier(n_estimators=300,learning_rate=0.01,max_depth=4,random_state=0)\nclf2.fit(X_train_df,y_train_df)\nclf3 = SVC(C=5,degree=1,gamma='auto',probability=True)\nclf3.fit(X_train_df,y_train_df)","50a40279":"eclf = VotingClassifier(estimators=[('rf',clf1),('gb',clf2),('svc',clf3)],voting='soft',weights=[2.5,2.5,2])","4db9b514":"eclf.fit(X_train_df,y_train_df)","a7d3b0bb":"#clfs_opt = []\n#clfs_best_scores = []\n#clfs_best_param = []\n#for clf_, param in zip(clfs, params):\n#    clf = RandomizedSearchCV(clf_, param, cv=5)\n#    clf.fit(X_train_sc, y_train_df)\n#    clfs_opt.append(clf)\n#    clfs_best_scores.append(clf.best_score_)\n#    clfs_best_param.append(clf.best_params_)","2fc8196f":"#max(clfs_best_scores)","746dee9e":"#arg = np.argmax(clfs_best_scores)\n#clfs_best_param[arg]","a91f6b0e":"#clf = clfs_opt[arg]","378369b3":"#pred = clf.predict(X_test_sc)","c196ead5":"#Grad_clf = GradientBoostingClassifier(n_estimators=100,learning_rate=1.0,max_depth=1,random_state=0)\n#Grad_clf.fit(X_train_df,y_train_df)","dd76ee40":"#rand = RandomizedSearchCV(Grad_clf,{'learning_rate':[0.01,0.1,1],'max_depth':[1,5,10],\n                                    #'n_estimators':[50,100,200,500]},n_iter=15,cv=10)","d497c4d6":"#rand.fit(X_train_df,y_train_df)","d755f931":"#print(rand.best_score_)\n#print(rand.best_params_)\n","94cd0950":"#Grad_clf = GradientBoostingClassifier(n_estimators=200,learning_rate=0.01,max_depth=5)\n#Grad_clf.fit(X_train_df,y_train_df)","5ba445f8":"pred = eclf.predict(X_test_df)","eec37c1d":"cols = ['PassengerId', 'Survived']\nsubmit_df = pd.DataFrame(np.hstack((y_test_df.values.reshape(-1,1),pred.reshape(-1,1))), \n                         columns=cols)","b9f1f376":"submit_df.to_csv('submission.csv', index=False)","452b12f2":"submit_df.head()","4a4902bb":"# OneHot Encoding","7841410d":"# Lable Encoding","c41c64d6":"* Categorical: Survived, Sex, and Embarked. Ordinal: Pclass. <br>\n* Continous: Age, Fare. <br>\n* Discrete: SibSp, Parch. <br>","bd7fee97":"# Algorithms Training","f2249ec8":"# Feature engineering","0e2727b0":"# Data Preprocessing","11ef4e1c":"## Data Scaling","154179bf":"## Name","bf0f2a47":"# Data Visualization"}}