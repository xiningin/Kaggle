{"cell_type":{"9334dd53":"code","65d91ea0":"code","d74dba86":"code","42b4cd6d":"code","3a698c11":"code","930de9e3":"code","0734b3bb":"code","b381c491":"markdown","62efcf4d":"markdown","7c9a6909":"markdown","e68eb1a8":"markdown","0293b5b8":"markdown","4755fb30":"markdown"},"source":{"9334dd53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65d91ea0":"import torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport pandas as pd\nimport numpy as np","d74dba86":"train = pd.readcsv('numDeathtrain.csv', header=None, skiprows=1, usecols=range(2,7))\ntrain = train.dropna()\ntest = pd.readcsv('numDeathtest.csv', header = None, skiprows=1,usecols=range(1,5))\ntest = test.dropna()","42b4cd6d":"xdata = train.loc[0:,1:5] ydata = train.loc[:,6]\n\ntrainxdata = np.array(xdata) trainydata = np.array(ydata)\n\ntrainx = torch.FloatTensor(trainxdata) trainy = torch.FloatTensor(trainydata)\n\ntxdata = test.loc[0:,1:4] testxdata = np.array(txdata)\ntestx = torch.FloatTensor(testx_data)","3a698c11":"W = torch.zeros((4, 1), requiresgrad=True) b = torch.zeros(1, requiresgrad=True)\n\noptimizer = optim.SGD([W, b], lr= 1e-5 )\n\nnbepochs = 10000 for epoch in range(nbepochs + 1):\n\nhypothesis = train_x.matmul(W) + b\n#prediction = model(x_train)\ncost = torch.mean((hypothesis - train_y)**2)\n#cost = F.mse_loss(prediction, y_train)\n\n\n\noptimizer.zero_grad()\ncost.backward()\noptimizer.step()\n\n\nif epoch % 100== 0:\n    print('Epoch {:4d}\/{} Cost: {:.6f}'.format(\n        epoch, nb_epochs, cost.item()\n    ))","930de9e3":"prediction = test_x.matmul(W) + b\nprint(prediction)","0734b3bb":"submit = pd.read_csv('submit.csv')\n\nfor i in range(len(prediction)) :\nsubmit['Expected'][i] = prediction[i].item()\nsubmit.to_csv('baseline.csv' , mode = 'w' , index = False)\n! kaggle competitions submit -c predict-numdeath -f baseline.csv -m \"submit\"","b381c491":"\ubaa8\ub378 \ud559\uc2b5","62efcf4d":"\ub370\uc774\ud130 \ub85c\ub4dc","7c9a6909":"\ub370\uc774\ud130 \ud30c\uc2f1","e68eb1a8":"\ubaa8\ub4c8 \uc784\ud3ec\ud2b8","0293b5b8":"\uc608\uce21\ud558\uae30","4755fb30":"\uc81c\ucd9c \ud30c\uc77c \ub9cc\ub4e4\uae30 & \uc81c\ucd9c"}}