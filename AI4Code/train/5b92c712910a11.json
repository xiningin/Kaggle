{"cell_type":{"9b7adf27":"code","053f1814":"code","40884138":"code","36c41e7d":"code","34fc58c5":"code","b2d4fc62":"code","9bcf8ba7":"code","e43ff325":"code","d0dfba01":"code","61e7b334":"code","f42f84d4":"code","6dc811e3":"code","a3af4aa9":"code","6d8df4e6":"code","eeb3d6d6":"code","7d04d0ae":"code","97cf8189":"code","1bf2273e":"code","372ff8c4":"code","c2d6aea4":"code","872365c3":"code","c5b72aa3":"code","ccb7debe":"code","685a2662":"code","d1d1cba2":"code","49b34988":"code","e6f6c20c":"code","2dc18987":"code","9e39afcb":"code","20268d4e":"code","c5c9965e":"code","2666c527":"code","48442298":"code","e9485c89":"code","febdf1bf":"code","722d91c9":"code","9d8730ec":"code","f4e46e46":"code","1fc0af82":"code","17152395":"code","5881a70b":"code","6cb5f859":"code","208e6f62":"code","ee2f7b23":"code","ff60775f":"code","85685c4b":"code","530f0645":"markdown","86e7230f":"markdown","4a159a76":"markdown","5ebac6a8":"markdown","cf6c7212":"markdown","89ff1362":"markdown","daa9e449":"markdown","98a60d4c":"markdown","cdc0c3dc":"markdown","35e16d9b":"markdown","8ae3a566":"markdown","689d89a0":"markdown","1474bbce":"markdown","18cfb129":"markdown"},"source":{"9b7adf27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","053f1814":"import pandas as pd\nimport numpy as np\nimport re\nimport nltk\nimport spacy\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#plotly\nimport plotly.offline as py\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')","40884138":"import pandas as pd\nimport numpy as np\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","36c41e7d":"train=pd.read_csv('..\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv.zip',compression='zip',\n                 header=0,delimiter='\\t',quoting=0, doublequote=False, escapechar='\\\\')\ntrain.head()","34fc58c5":"test=pd.read_csv('..\/input\/word2vec-nlp-tutorial\/testData.tsv.zip', compression='zip',\n                header=0, delimiter='\\t', quoting=0)\ntest.head()","b2d4fc62":"unlabeled=pd.read_csv('..\/input\/word2vec-nlp-tutorial\/unlabeledTrainData.tsv.zip', compression='zip',\n                 header=0,delimiter='\\t',quoting=0, doublequote=False, escapechar='\\\\')\nunlabeled.head()","9bcf8ba7":"def get_database_info(df):\n    # first view of the database\n    \n    print(\"No of columns of database\", df.shape[1])\n    print(\"No of rows \", df.shape[0])\n    print(\"Names of the columns\", df.columns)\n    print(\"Missing value counts\", df.isnull().value_counts())\n    print(df.describe().T)\n    print(df.info())\n    return df.head(5)\n    ","e43ff325":"def calculate_missing_percentage(df):\n    missing_stats=df.isnull().sum()\/len(df)*100\n    prod_count=pd.DataFrame(missing_stats.sort_index())\n    plt.figure()\n    # plot in barplot\n    \n    sns.barplot(x=missing_stats.index, y=missing_stats.values, alpha=0.8)\n    plt.title(\"Percent Missing\")\n    plt.ylabel(\"Missing\", fontsize=12)\n    plt.xlabel(\"Feature\", fontsize=12)\n    plt.xticks(rotation=90)\n    plt.show()\n    ","d0dfba01":"def draw_num_plot(df, column):\n    # to draw the KDE plot\n    \n    plt.figure(figsize=(10,10))\n    col = column\n    grouped = df[col].value_counts().reset_index()\n    grouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n    ## plot\n    trace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\n    layout = go.Layout(title=\"\", height=600, legend=dict(x=0.1, y=1.1))\n    fig = go.Figure(data = [trace], layout = layout)\n    iplot(fig)","61e7b334":"def histogram_plot(df, col):\n    df[col].plot(\n    kind='hist',\n    bins=50,\n    title='Reviewers Age Distribution')\n    \n    ","f42f84d4":"plt.style.use('seaborn-darkgrid')\n\norange_black = ['#fdc029', '#df861d', 'FF6347', '#aa3d01',\n                '#a30e15', '#800000', '#171820']\n\nplt.rcParams['figure.figsize'] = (10,5) \nplt.rcParams['figure.facecolor'] = '#FFFACD' \nplt.rcParams['axes.facecolor'] = 'FFFFE0' \nplt.rcParams['axes.grid'] = True \nplt.rcParams['grid.color'] = orange_black[3]\nplt.rcParams['grid.linestyle'] = '--'","6dc811e3":"get_database_info(train)\ncalculate_missing_percentage(train)\ndraw_num_plot(train, 'sentiment')\nhistogram_plot(train, 'sentiment')","a3af4aa9":"get_database_info(test)\ncalculate_missing_percentage(test)","6d8df4e6":"get_database_info(unlabeled)\ncalculate_missing_percentage(unlabeled)","eeb3d6d6":"train['review_lower']=train['review'].str.lower()\ntrain.head()","7d04d0ae":"punc_to_remove=string.punctuation\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('','',punc_to_remove))\n\ntrain[\"text_to_punc\"]=train['review_lower'].apply(lambda text: remove_punctuation(text))\n","97cf8189":"train.head()","1bf2273e":"from nltk.corpus import stopwords\n\",\".join(stopwords.words(\"english\"))","372ff8c4":"STOPWORDS=set(stopwords.words(\"english\"))\n\ndef remove_stopword(text):\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n\ntrain['text_to_stop']=train['review'].apply(lambda text: remove_stopword(text))\ntrain.head()\n","c2d6aea4":"train.drop(['review_lower', 'text_to_punc'], axis=1, inplace=True)","872365c3":"train.head()","c5b72aa3":"train.head()","ccb7debe":"from collections import Counter\ncnt=Counter()\n\nfor text in train['text_to_stop'].values:\n    for word in text.split():\n        cnt[word]+=1\n        \ncnt.most_common(10)","685a2662":"FREQWORDS = set([w for (w, wc) in cnt.most_common(10)])\ndef remove_freqwords(text):\n    \"\"\"custom function to remove the frequent words\"\"\"\n    return \" \".join([word for word in str(text).split() if word not in FREQWORDS])\n\ntrain[\"text_wo_stopfreq\"] = train[\"text_to_stop\"].apply(lambda text: remove_freqwords(text))\ntrain.head()","d1d1cba2":"\nn_rare_word=10\nRAREWORDS=set([w for (w ,wc) in cnt.most_common()[:-n_rare_word-1:-1]])\n\ndef remove_rareword(text):\n    return \" \".join([word for word in str(text).split() if word not in RAREWORDS])\n\ntrain['rare_text']=train['text_wo_stopfreq'].apply(lambda text: remove_rareword(text))\ntrain.head(10)","49b34988":"from nltk.stem.porter import PorterStemmer\n\ntrain.drop([\"text_wo_stopfreq\",\"rare_text\"], axis=1, inplace=True)","e6f6c20c":"train.head()","2dc18987":"stemmer=PorterStemmer()\n\ndef stem_porter(text):\n        return \" \".join([stemmer.stem(word) for word in text.split()])\n    \ntrain[\"test_stemmed\"]=train['review'].apply(lambda text : stem_porter(text))\ntrain.head()","9e39afcb":"from nltk.stem.snowball import SnowballStemmer\nSnowballStemmer.languages","20268d4e":"from nltk.stem import WordNetLemmatizer\n\nlematizer=WordNetLemmatizer()\n\ndef lemmatizer_words(text):\n    return \" \".join([lematizer.lemmatize(word) for word in text.split()])\n\ntrain['lemma_text']=train['review'].apply(lambda text: lemmatizer_words(text))\ntrain.head()","c5c9965e":"train['lemma_text'][0]","2666c527":"from nltk.corpus import wordnet\nfrom nltk.stem import WordNetLemmatizer\n\nlemmmatizer=WordNetLemmatizer()\n\nwordnet_map={\"N\":wordnet.NOUN, \"V\":wordnet.VERB, \"J\":wordnet.ADJ, \"R\":wordnet.ADV}\ndef lemmatized_words(text):\n    pos_tagged_text = nltk.pos_tag(text.split())\n    return \" \".join([lematizer.lemmatize(word , wordnet_map.get(pos[0], wordnet.NOUN)) for word, pos in pos_tagged_text])\n\ntrain[\"text_lemmatized\"] = train[\"review\"].apply(lambda text: lemmatized_words(text))\ntrain.head()","48442298":"train['text_lemmatized'][0]","e9485c89":"import re\n\nTAG_RE = re.compile(r'<[^>]+>')\n\ndef remove_tags(text):\n    return TAG_RE.sub('', text)\n\ntrain['text_to_html']=train['review'].apply(lambda text: remove_tags(text))\ntrain.head()","febdf1bf":"train['text_to_html'][0]","722d91c9":"def remove_urld(text):\n    url_pattern=re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url_pattern.sub(r'', text)\n\ntrain['no_url']=train['review'].apply(lambda text: remove_urld(text))    \ntrain.head()","9d8730ec":"train['no_url'][0]","f4e46e46":"train['no_url'][1]","1fc0af82":"# https:\/\/gist.github.com\/nealrs\/96342d8231b75cf4bb82 \ncList = {\n  \"ain't\": \"am not\",\n  \"aren't\": \"are not\",\n  \"can't\": \"cannot\",\n  \"can't've\": \"cannot have\",\n  \"'cause\": \"because\",\n  \"could've\": \"could have\",\n  \"couldn't\": \"could not\",\n  \"couldn't've\": \"could not have\",\n  \"didn't\": \"did not\",\n  \"doesn't\": \"does not\",\n  \"don't\": \"do not\",\n  \"hadn't\": \"had not\",\n  \"hadn't've\": \"had not have\",\n  \"hasn't\": \"has not\",\n  \"haven't\": \"have not\",\n  \"he'd\": \"he would\",\n  \"he'd've\": \"he would have\",\n  \"he'll\": \"he will\",\n  \"he'll've\": \"he will have\",\n  \"he's\": \"he is\",\n  \"how'd\": \"how did\",\n  \"how'd'y\": \"how do you\",\n  \"how'll\": \"how will\",\n  \"how's\": \"how is\",\n  \"I'd\": \"I would\",\n  \"I'd've\": \"I would have\",\n  \"I'll\": \"I will\",\n  \"I'll've\": \"I will have\",\n  \"I'm\": \"I am\",\n  \"I've\": \"I have\",\n  \"isn't\": \"is not\",\n  \"it'd\": \"it had\",\n  \"it'd've\": \"it would have\",\n  \"it'll\": \"it will\",\n  \"it'll've\": \"it will have\",\n  \"it's\": \"it is\",\n  \"let's\": \"let us\",\n  \"ma'am\": \"madam\",\n  \"mayn't\": \"may not\",\n  \"might've\": \"might have\",\n  \"mightn't\": \"might not\",\n  \"mightn't've\": \"might not have\",\n  \"must've\": \"must have\",\n  \"mustn't\": \"must not\",\n  \"mustn't've\": \"must not have\",\n  \"needn't\": \"need not\",\n  \"needn't've\": \"need not have\",\n  \"o'clock\": \"of the clock\",\n  \"oughtn't\": \"ought not\",\n  \"oughtn't've\": \"ought not have\",\n  \"shan't\": \"shall not\",\n  \"sha'n't\": \"shall not\",\n  \"shan't've\": \"shall not have\",\n  \"she'd\": \"she would\",\n  \"she'd've\": \"she would have\",\n  \"she'll\": \"she will\",\n  \"she'll've\": \"she will have\",\n  \"she's\": \"she is\",\n  \"should've\": \"should have\",\n  \"shouldn't\": \"should not\",\n  \"shouldn't've\": \"should not have\",\n  \"so've\": \"so have\",\n  \"so's\": \"so is\",\n  \"that'd\": \"that would\",\n  \"that'd've\": \"that would have\",\n  \"that's\": \"that is\",\n  \"there'd\": \"there had\",\n  \"there'd've\": \"there would have\",\n  \"there's\": \"there is\",\n  \"they'd\": \"they would\",\n  \"they'd've\": \"they would have\",\n  \"they'll\": \"they will\",\n  \"they'll've\": \"they will have\",\n  \"they're\": \"they are\",\n  \"they've\": \"they have\",\n  \"to've\": \"to have\",\n  \"wasn't\": \"was not\",\n  \"we'd\": \"we had\",\n  \"we'd've\": \"we would have\",\n  \"we'll\": \"we will\",\n  \"we'll've\": \"we will have\",\n  \"we're\": \"we are\",\n  \"we've\": \"we have\",\n  \"weren't\": \"were not\",\n  \"what'll\": \"what will\",\n  \"what'll've\": \"what will have\",\n  \"what're\": \"what are\",\n  \"what's\": \"what is\",\n  \"what've\": \"what have\",\n  \"when's\": \"when is\",\n  \"when've\": \"when have\",\n  \"where'd\": \"where did\",\n  \"where's\": \"where is\",\n  \"where've\": \"where have\",\n  \"who'll\": \"who will\",\n  \"who'll've\": \"who will have\",\n  \"who's\": \"who is\",\n  \"who've\": \"who have\",\n  \"why's\": \"why is\",\n  \"why've\": \"why have\",\n  \"will've\": \"will have\",\n  \"won't\": \"will not\",\n  \"won't've\": \"will not have\",\n  \"would've\": \"would have\",\n  \"wouldn't\": \"would not\",\n  \"wouldn't've\": \"would not have\",\n  \"y'all\": \"you all\",\n  \"y'alls\": \"you alls\",\n  \"y'all'd\": \"you all would\",\n  \"y'all'd've\": \"you all would have\",\n  \"y'all're\": \"you all are\",\n  \"y'all've\": \"you all have\",\n  \"you'd\": \"you had\",\n  \"you'd've\": \"you would have\",\n  \"you'll\": \"you you will\",\n  \"you'll've\": \"you you will have\",\n  \"you're\": \"you are\",\n  \"you've\": \"you have\"\n}","17152395":"c_re = re.compile('(%s)' % '|'.join(cList.keys()))\ndef expandContractions(text, c_re=c_re):\n    def replace(match):\n        return cList[match.group(0)]\n    return c_re.sub(replace, text)","5881a70b":"train['decontracted_word']=train['review'].apply(lambda text: expandContractions(text, c_re=c_re))\ntrain.head()","6cb5f859":"from wordcloud import WordCloud\n\n# Thanks : https:\/\/www.kaggle.com\/aashita\/word-clouds-of-various-shapes ##\ndef plot_wordcloud(text, mask=None, max_words=1000, max_font_size=100, figure_size=(14.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    \n\n    wordcloud = WordCloud(background_color='black',max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \nplot_wordcloud(train[\"text_to_html\"], title=\"Word Cloud of Review\")","208e6f62":"def plot_wordcloud(text, mask=None, max_words=400, max_font_size=120, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='white',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    mask = mask)\n    wordcloud.generate(text)\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'green', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \nd = '..\/input\/masks\/masks-wordclouds\/'","ee2f7b23":"comments_text = str(train.text_to_html)\ncomments_mask = np.array(Image.open(d + 'comment.png'))\nplot_wordcloud(comments_text, comments_mask, max_words=400, max_font_size=120, \n               title = 'Most common words in all of the Review', title_size=50)","ff60775f":"n = round(train.shape[0]*0.01)\ntop_recommended_comments_text = str(train.nlargest(n, columns='sentiment').text_to_html)\nupvote_mask = np.array(Image.open(d + 'upvote.png'))\nplot_wordcloud(top_recommended_comments_text, upvote_mask, max_words=300000, max_font_size=300,\n               title = 'Most common words in the top 1% most upvoted comments')","85685c4b":"from IPython.display import Image\nImage(\"..\/input\/thank-you\/download.jpg\", width=1000, height=1000)","530f0645":"# Text Preprocessing","86e7230f":"# Reading a zip file with help of Pandas","4a159a76":"# Conclusion \n* More Update awill be done Soon\n* This is the firdt step of text cleaning\n* 2nd part will come soon \n* Till then keep liking this ","5ebac6a8":"# Lemmatization","cf6c7212":"# Word Cloud ","89ff1362":"# Remove HTML tag from the text ","daa9e449":"# Stop Words","98a60d4c":"# [Data Set](https:\/\/www.kaggle.com\/c\/word2vec-nlp-tutorial\/overview\/part-1-for-beginners-bag-of-words)\nThe labeled data set consists of 50,000 IMDB movie reviews, specially selected for sentiment analysis. The sentiment of reviews is binary, meaning the IMDB rating < 5 results in a sentiment score of 0, and rating >=7 have a sentiment score of 1. No individual movie has more than 30 reviews. The 25,000 review labeled training set does not include any of the same movies as the 25,000 review test set. In addition, there are another 50,000 IMDB reviews provided without any rating labels.\n\n# File descriptions\n* labeledTrainData - The labeled training set. The file is tab-delimited and has a header row followed by 25,000 rows containing an id, sentiment, and text for each review.  \n* testData - The test set. The tab-delimited file has a header row followed by 25,000 rows containing an id and text for each review. Your task is to predict the sentiment for each one. \n* unlabeledTrainData - An extra training set with no labels. The tab-delimited file has a header row followed by 50,000 rows containing an id and text for each review. \n* sampleSubmission - A comma-delimited sample submission file in the correct format.\n# Data fields\n* id - Unique ID of each review\n* sentiment - Sentiment of the review; 1 for positive reviews and 0 for negative reviews\n* review - Text of the review\n","cdc0c3dc":"# 1.1 Lower Case","35e16d9b":"# Removal of Frequent words","8ae3a566":"# Removal of punctuation","689d89a0":"# Decontracted\n* Expanding the chat words like \"i've --- I have\"","1474bbce":"# Snow ball stemmer","18cfb129":"# Removal of URLs"}}