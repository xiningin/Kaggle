{"cell_type":{"e65a6af3":"code","c95b9853":"code","d9e0b5c9":"code","370f7376":"code","58f39bf6":"code","6e91a016":"code","ed63d461":"code","8e9b55f3":"code","2b899953":"code","ede13642":"code","dc92229e":"code","20476633":"code","ce8a376b":"code","4cbf2494":"code","20fc29b6":"code","262acf01":"code","eaaeb532":"code","d974884f":"code","41400ca8":"code","4a82e918":"code","1b200bb1":"code","2364dba2":"code","2ce8d64d":"code","3cdc8d6b":"code","66bc3a7a":"code","f9ec824a":"code","67fdf111":"code","5ce1db1e":"code","050661e6":"code","7fa275f5":"code","7d9f80f1":"code","3045945f":"code","525079a0":"code","c056010e":"code","4861e35d":"code","542e3e9a":"code","d0643fc6":"code","4e66b006":"code","b682957a":"code","ff8b57ed":"code","103d0d20":"code","e61a98cd":"code","4ef9a637":"code","4dd59b65":"code","6ddbd6c6":"code","07f91ccc":"code","756b9f1b":"code","6000e4c2":"code","30344df6":"code","68ef412b":"code","683915ed":"code","d01bd1c4":"code","6561734c":"code","1227d4a5":"code","b516c366":"code","fc295fec":"code","3704fb50":"code","f57ef496":"code","875510ba":"code","fb46878d":"code","2d75ca34":"code","e72610eb":"code","8b187232":"code","d2831e2b":"code","3b21b9d3":"markdown","2b52bf8a":"markdown","2a88a064":"markdown","a64c4728":"markdown","26aa957b":"markdown","5714ee78":"markdown","bfe9731d":"markdown","613b2ccf":"markdown","12c5c575":"markdown","68ef1e17":"markdown","4e13c1c4":"markdown","f3b1bd63":"markdown","cb13ce1a":"markdown","4ecc283f":"markdown","d3e60af7":"markdown","5173efe9":"markdown","bf9cc26b":"markdown"},"source":{"e65a6af3":"import numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c95b9853":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d9e0b5c9":"confirmed_global= pd.read_csv('\/kaggle\/input\/covid19-assignment\/time_series_covid19_confirmed_global.csv')\ndeaths_global= pd.read_csv('\/kaggle\/input\/covid19-assignment\/time_series_covid19_deaths_global.csv')\nrecovered_global= pd.read_csv('\/kaggle\/input\/covid19-assignment\/time_series_covid19_recovered_global.csv')","370f7376":"confirmed_global.head()","58f39bf6":"confirmed_global.columns","6e91a016":"dates= confirmed_global.columns[4:]\ndates","ed63d461":"confirmed_df = confirmed_global.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                                     value_vars=dates, var_name='Date', value_name='Confirmed'\n                                    )","8e9b55f3":"death_df= deaths_global.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                                     value_vars=dates, var_name='Date', value_name='Death')","2b899953":"recovered_df= recovered_global.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                                     value_vars=dates, var_name='Date', value_name='Recovered')","ede13642":"recovered_df.head()","dc92229e":"death_df.head()","20476633":"confirmed_df.head()","ce8a376b":"confirmed_df.info()","4cbf2494":"all_data = confirmed_df.merge(right=death_df, how='left',\n                              on=['Province\/State', 'Country\/Region', 'Date', 'Lat', 'Long'])\n\n# Merging all_data and recovered_df\nall_data = all_data.merge(right=recovered_df, how='left',\n                            on=['Province\/State', 'Country\/Region', 'Date', 'Lat', 'Long'])","20fc29b6":"all_data.head()","262acf01":"all_data.info()","eaaeb532":"all_data['Date']=pd.to_datetime(all_data['Date'])","d974884f":"all_data.isna().sum()","41400ca8":"plt.figure(figsize=(9,6))\nsns.heatmap(all_data.isna(),yticklabels=False,cmap='viridis',cbar=False)","4a82e918":"#filling null values by 0.\nall_data['Recovered']= all_data['Recovered'].fillna(0)","1b200bb1":"all_data['Recovered']= all_data['Recovered'].astype('int64')","2364dba2":"all_data['Active']= all_data['Confirmed']- all_data['Recovered']- all_data['Death']","2ce8d64d":"all_data.head()","3cdc8d6b":"all_data.loc[all_data['Province\/State']=='Greenland','Country\/Region']='Greenland'","66bc3a7a":"data_grouped = all_data.groupby(['Date', 'Country\/Region'])['Confirmed','Death','Recovered','Active'].sum().reset_index()","f9ec824a":"data_grouped.info()","67fdf111":"data_grouped.head()","5ce1db1e":"country_wise= data_grouped.groupby(['Country\/Region'])['Confirmed','Death','Recovered','Active'].sum().reset_index()","050661e6":"country_wise.head()","7fa275f5":"country_wise.info()","7d9f80f1":"day_wise= data_grouped.groupby(['Date'])['Confirmed','Death','Recovered','Active'].sum().reset_index()","3045945f":"day_wise.tail()","525079a0":"line_plot = day_wise[['Date','Confirmed','Recovered', 'Active','Death']]\nline_plot = line_plot.melt(id_vars='Date', value_vars=['Confirmed','Recovered', 'Active','Death'],var_name='Status', value_name='No. of cases')\nline_plot.head()","c056010e":"px.line(line_plot, x='Date', y='No. of cases', color='Status',title='Total Cases in the World upto 13-07-2020')","4861e35d":"confirm_color= 'deepskyblue'\ndeath_color='red'\nrecovered_color='limegreen'\nactive_color='grey'","542e3e9a":"def bar_plot(df,col,color):\n    fig=px.bar(df,x='Date',y=col,color_discrete_sequence=[color],title=' Total '+str(col)+' cases in the World')\n    fig.show()","d0643fc6":"bar_plot(day_wise,'Confirmed',confirm_color)","4e66b006":"bar_plot(day_wise,'Death',death_color)","b682957a":"bar_plot(day_wise,'Recovered',recovered_color)","ff8b57ed":"bar_plot(day_wise,'Active',active_color)","103d0d20":"px.line(line_plot, x='Date', y='No. of cases',log_y=True, color='Status',title='Total Cases in the World on Logarthmic Scale')","e61a98cd":"def plot_bar_countrywise(col,country, color):\n    df=all_data[all_data['Country\/Region']==country]\n    df['prev_case']=df[col].shift(1,axis=0)\n    df['daily_'+str(col)]= df[col]-df['prev_case']\n    fig = px.bar(df, x=\"Date\", y=df['daily_'+str(col)], width=700, color_discrete_sequence=[color])\n    fig.update_layout(title='Daily Increase in '+col+' Cases in {}'.format(country), yaxis_title=\"No. of Cases\", xaxis_title=\"Date\")\n    fig.show()","4ef9a637":"plot_bar_countrywise('Confirmed','India',confirm_color)","4dd59b65":"plot_bar_countrywise('Death','India',death_color)","6ddbd6c6":"plot_bar_countrywise('Recovered','India',recovered_color)","07f91ccc":"plot_bar_countrywise('Confirmed','US',confirm_color)","756b9f1b":"plot_bar_countrywise('Death','US',death_color)","6000e4c2":"plot_bar_countrywise('Recovered','US',recovered_color)","30344df6":"plot_bar_countrywise('Confirmed','Brazil',confirm_color)","68ef412b":"plot_bar_countrywise('Death','US',death_color)","683915ed":"plot_bar_countrywise('Recovered','US',recovered_color)","d01bd1c4":"countrywise_daywise_data=all_data[['Country\/Region','Date','Confirmed','Recovered', 'Active','Death']]\ncountrywise_daywise_data=countrywise_daywise_data.melt(id_vars=['Date','Country\/Region'], value_vars=['Confirmed','Recovered', 'Active','Death'],var_name='Status', value_name='No. of cases')\ncountrywise_daywise_data.head()","6561734c":"def line_plot_daywise(df,country):\n    new_df=df[df['Country\/Region']==country].reset_index(drop=True)\n    fig=px.line(new_df, x='Date', y='No. of cases', color='Status',title='Total Cases in {} upto 13-07-2020 (Linear scale)'.format(country))\n    fig.show()","1227d4a5":"line_plot_daywise(countrywise_daywise_data,'India')","b516c366":"line_plot_daywise(countrywise_daywise_data,'US')","fc295fec":"line_plot_daywise(countrywise_daywise_data,'Spain')","3704fb50":"line_plot_daywise(countrywise_daywise_data,'Brazil')","f57ef496":"def plot_rec_death_rate(df,country):\n    new_df= df[df['Country\/Region']==country].reset_index(drop=True)\n    new_df['recovery_rate']=new_df['Recovered']\/new_df['Confirmed']\n    new_df['CFR']= new_df['Death']\/new_df['Confirmed']\n    new_df.fillna(0,inplace=True)\n    plt.figure(figsize=(8,6))\n    plt.plot(new_df['Date'],new_df['recovery_rate'],label='Recovery Rate')\n    plt.plot(new_df['Date'],new_df['CFR'],label='Case Fatality Ratio')\n    plt.title(label='Recovery Rate and CFR in {}'.format(country))\n    plt.xlabel('Time')\n    plt.xticks(rotation=90)\n    plt.ylabel('Ratio')\n    plt.ylim(0,1)\n    plt.legend()\n    plt.show()","875510ba":"plot_rec_death_rate(data_grouped,'India')","fb46878d":"plot_rec_death_rate(data_grouped,'China')","2d75ca34":"plot_rec_death_rate(data_grouped,'US')","e72610eb":"plot_rec_death_rate(data_grouped,'Spain')","8b187232":"#Total cases as on 13\/07\/2020\ncases=[13104391,573003,7161007,5370381]\ntotal_cases = pd.DataFrame(cases, index=['Confirmed','Death','Recovered','Active'], columns=['No. of Cases'])","d2831e2b":"plt.figure(figsize=(8,8))\nplt.pie(total_cases['No. of Cases'],labels=total_cases['No. of Cases'].index,autopct='%.2f%%',labeldistance=None);\nplt.title('Percentage of cases upto 2020-07-13 (Worldwide)',fontdict={'fontsize':18});\nplt.legend();","3b21b9d3":"# Cummulative Cases of Brazil","2b52bf8a":"# Cummulative Cases of INDIA","2a88a064":"# INDIA ","a64c4728":"**NULL values in a particular column are shown by yellow lines on the below heatmap plot.**","26aa957b":"# Instructions:\n 1. Plots might take some time to load.(Because of plotly)\n 2. If plots are not loaded then reload the workspace.\n 3. In this notebook, three datasets i.e.\n     * time_series_covid19_confirmed_global.csv\n     * time_series_covid19_deaths_global.csv\n     * time_series_covid19_recovered_global.csv \n     \n    are used to analyze the COVID-19 situations.","5714ee78":"# Brazil","bfe9731d":"**Converting Date object to datetime format.**","613b2ccf":"# Cummulative Cases of USA","12c5c575":"**data_grouped is being grouped in such a way that data of Confirmed, Recovered, Active and Death cases (Worldwide) are being shown on the daily basis.**","68ef1e17":"**Since we can see that the data on particular dates are given in columns. Therefore, we need to use melt() to unpivot DataFrames from current wide format into long format. In other words, we are kind of transposing all date columns into values. This can be done as:**","4e13c1c4":"# Cummulative Cases of Spain","f3b1bd63":"# USA","cb13ce1a":"# Loading the data:","4ecc283f":"**Daily Increase in cases can be found out by passing the country name in the below function.**","d3e60af7":"**Recovery Rate and Case Fatality Ratio of a particular country can be seen below as the day passes.**","5173efe9":"### Next Analysis is done in the [next file](http:\/\/https:\/\/www.kaggle.com\/ankityadav98\/assignment-file2).\n\n# Thank You.","bf9cc26b":"**data_grouped is being grouped in such a way that data of Confirmed, Recovered, Active and Death cases are being shown on the basis of Country\/Region whereas data_grouped data was on daily basis.**"}}