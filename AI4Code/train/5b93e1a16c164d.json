{"cell_type":{"f6ab01f9":"code","c53e7728":"code","e208bb5f":"code","1c6e4784":"code","65524aad":"code","258bc2c9":"code","a69cf2bd":"code","58d3f38e":"code","82382a49":"code","fae76b34":"code","509ada57":"code","bb5e8cbd":"code","999939fe":"code","074371e6":"code","36a77b4f":"code","f1ec8b12":"code","01dff4ad":"code","858fbb88":"code","247e111a":"code","6e5a49b0":"code","6e0914fb":"code","80774660":"code","db964191":"code","0cc09ca4":"code","fa6aa87f":"code","548ba9f6":"code","6abd0536":"code","296a55a8":"code","270394ca":"code","f0252256":"code","4d02ab9c":"code","ae31b41c":"code","ce3eb05b":"code","6d1be7a4":"code","e7d70b0f":"code","97bc9165":"code","a2d20b7b":"code","6a019ade":"code","d6e3b09b":"code","2fcaa16e":"markdown","0639bb43":"markdown","5e1f9e45":"markdown","0a35fac4":"markdown","e695ae30":"markdown","631c1258":"markdown","8de70e68":"markdown","c4b0f17b":"markdown","8a5f3007":"markdown","730f5ddd":"markdown","a2915967":"markdown","a33bd23c":"markdown","180c806e":"markdown","0815185d":"markdown","0b709fd8":"markdown","9c86b577":"markdown","61492a86":"markdown","1de34329":"markdown","95adec68":"markdown","8c894e2a":"markdown","a6ffed4d":"markdown","7f0b9d97":"markdown","60a472de":"markdown","76661826":"markdown","e8b03252":"markdown","94e8f834":"markdown","6e3f1392":"markdown","b3ece836":"markdown","da15125b":"markdown","f242ce6b":"markdown","dddc7cb7":"markdown","5e3aac4f":"markdown","48d80cf3":"markdown","57fb0b23":"markdown","1d2a271e":"markdown","40d2e891":"markdown","844bc7df":"markdown"},"source":{"f6ab01f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c53e7728":"import numpy as np\nimport pandas as pd\nimport datetime as dt\n\npd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.5f' % x)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)","e208bb5f":"df_ = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", \n                    sheet_name=\"Year 2009-2010\") \ndf = df_.copy()\ndf.head()\n","1c6e4784":"df.info()","65524aad":"\ndf['Country'].nunique()","258bc2c9":"df['Country'].value_counts()","a69cf2bd":"df.sort_values(by='Price', ascending=False).head()","58d3f38e":"df['Description'].nunique()","82382a49":"df.groupby(\"Description\").agg({\"Quantity\": lambda x: x.sum()}).sort_values(\"Quantity\", ascending=False).head()","fae76b34":"print(f\"Number of uniques in StockCode: {df['StockCode'].nunique()}\")\nprint(f\"Number of uniques in Description:{df['Description'].nunique()}\")","509ada57":"a =df.groupby('StockCode').agg({'Description': \"nunique\"})\na.reset_index(inplace=True)\na.head()\nb = list(a.loc[a['Description'] > 1, 'StockCode'])   \n\nfor urun_kodu in b:\n    print(f\"urun kodu = {urun_kodu} {df.loc[df['StockCode'] == urun_kodu, 'Description'].unique()}\")","bb5e8cbd":"df.loc[df['StockCode'] == 20677, 'Description'].unique() ","999939fe":"df.dropna(inplace=True)","074371e6":"df.info()","36a77b4f":"df.describe([0.01, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 0.99]).T","f1ec8b12":"df = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]","01dff4ad":"df.describe([0.01, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 0.99]).T","858fbb88":"df['TotalPrice'] = df['Quantity'] * df['Price']","247e111a":"df.head()","6e5a49b0":"df['InvoiceDate'].max()","6e0914fb":"today_date = df['InvoiceDate'].max() + dt.timedelta(days=2)\ntoday_date","80774660":"rfm = df.groupby('Customer ID').agg({'InvoiceDate': lambda date: (today_date - date.max()).days,\n                                    'Invoice': lambda inv: inv.nunique(),\n                                    'TotalPrice': lambda price: price.sum()})","db964191":"rfm.head()","0cc09ca4":"rfm.columns = ['Recency', 'Frequency', 'Monetary']\nrfm.head()","fa6aa87f":"rfm.describe([0.01, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 0.99]).T","548ba9f6":"rfm[\"RecencyScore\"] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])\n\nrfm[\"FrequencyScore\"] = pd.qcut(rfm['Frequency'].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n\nrfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels=[1, 2, 3, 4, 5])","6abd0536":"rfm[\"RFM_SCORE\"] = (rfm['RecencyScore'].astype(str) +\n                    rfm['FrequencyScore'].astype(str) +\n                    rfm['MonetaryScore'].astype(str))\n\nrfm.head()","296a55a8":"rfm[rfm['RFM_SCORE'] == \"555\"].head()","270394ca":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At_Risk',\n    r'[1-2]5': 'Cant_Loose',\n    r'3[1-2]': 'About_to_Sleep',\n    r'33': 'Need_Attention',\n    r'[3-4][4-5]': 'Loyal_Customers',\n    r'41': 'Promising',\n    r'51': 'New_Customers',\n    r'[4-5][2-3]': 'Potential_Loyalists',\n    r'5[4-5]': 'Champions'\n}","f0252256":"rfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)\nrfm.head()","4d02ab9c":"rfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)\nrfm.head()","ae31b41c":"rfm['Segment'].value_counts()","ce3eb05b":"rfm[[\"Segment\", \"Recency\", \"Frequency\", \"Monetary\"]].groupby(\"Segment\").agg([\"mean\", \"count\"])","6d1be7a4":"rfm[rfm[\"Segment\"] == \"Need_Attention\"].head()","e7d70b0f":"marketing_df = pd.DataFrame()\nmarketing_df[\"Cant_Loose\"] = rfm[rfm[\"Segment\"] == \"Cant_Loose\"].index","97bc9165":"marketing_df.head()","a2d20b7b":"marketing_df['Cant_Loose'] = marketing_df['Cant_Loose'].astype(int)\nmarketing_df.head()","6a019ade":"marketing_df.info","d6e3b09b":"marketing_df.to_csv(\"cant_loose.csv\")","2fcaa16e":"assign \"today's date\" as 2 days after the last date of purchase to make sure that none of the Recency values become zero","0639bb43":"## Time for Action","5e1f9e45":"the most expensive products:","0a35fac4":"renaming rfm columns:","e695ae30":"we will be using Recency and Frequency scores for customer segmentation. We are assuming that a customer who has recently purchased and who is often purchasing should have high RFM scores.","631c1258":"see the number of customers that fall into each category","8de70e68":"the last date of purchase:","c4b0f17b":"**Need_Attention** segment has 207 customers that last purchased nearly 2 months ago, despite the fact that they don't frequently purchase, they spend quite a good amount of money. So we should be focusing on this group. In order to make them transform into a customer that purchases frequently, we can offer them some discount with a time limit of 30 days. So that they would revisit and purchase.","8a5f3007":"the names of the countries with the total values:","730f5ddd":"there are negative values on Quantity variable, this is caused by the refund invoices (Invoices containing the letter \"C\"), reassign df without refund invoices","a2915967":"**Can't_Loose** segment has purchased for 9 times this year but the last date of this was nearly 4 months, they spend a good amount of money and they used to be our loyal customers, we can't loose them. We should put this 77 customers into our loyalty program, offer them seasonal discounts, make them feel special while purchasing from our company and make them loyal again. We can export the customer id list into an excel file and pass this file to our Marketing Department.  ","a33bd23c":"In order to maintain a good CRM (Customer Relationship Management), a company should be aware of each customer\u2019s attitude towards the company. The company should know the answers to the following questions:     \n1. when did the customer last purchased? (Recency)   \n2. how often does the customer purchase?  (Frequency)  \n3. how much money did the customer spend?  (Monetary)   \n\nThe answers to the above questions would make the customer be categorized and after this process, the company would be dealing with tens of segments instead of tens of thousands customers. **RFM** is an acronym that stands for **Recency**, **Frequency** and **Monetary**. In order to assign each customer into the appropriate segment, RFM metrics should be calculated and afterwards RFM scores should be computed.\n","180c806e":"## install packages and set configurations\n","0815185d":"## RFM Scores","0b709fd8":"the values were expected to be equal, so there must be more than one unique value in Description variable for one unique StockCode. let's check each StockCode value with the corresponding Description values, get every StockCode that has more than one unique Description in a list form (I hid the output due to its number of rows):","9c86b577":"## Naming the RFM Scores","61492a86":"number of unique products:","1de34329":"## RFM Metrics","95adec68":"## Read data","8c894e2a":"the following dict has been made according to the famous RFM graphic","a6ffed4d":"drop na values","7f0b9d97":"## Data Preperation","60a472de":"change the dtype of Customer ID variable in order to get rid of the decimal part:","76661826":"Now that we have all the scores for the customers and we have been able to categorize them into 10 groups, it's time for action. We will be using metrics for this process, not scores. We will be focusing on the groups that need a better customer relationship and try to figure out what we can do in order to make that specific segment purchase more frequently and become loyal. Thanks to RFM scores of the segments, we know what exactly that segment needs.","e8b03252":"## Getting to know the variables:\n\n**InvoiceNo**   : The number of the invoice, unique per each purchase. Refund invoice numbers contain \"C\"  \n**StockCode**   : Unique code per each item  \n**Description** : Name of the item  \n**Quantity**    : The number of items within the invoice  \n**InvoiceDate** : Date and time of the purchase  \n**UnitPrice**   : Price of a single item, as of Sterlin  \n**CustomerID**  : Unique id number per each customer  \n**Country**     : The country where the customer is living  \n","94e8f834":"in the last step, we will convert the metrics into category names","6e3f1392":"as an example derived from the above list, both the Descriptions: 'PINK SPOTTY BOWL' and 'PINK POLKADOT BOWL' have the same StockCode: 20677. This means that there are duplicates in Description variable (possibly due to manuel entries or merge) so it would be better to use StockCode.","b3ece836":"* the min number of Recency metric means that this customer has just purchased, so the highest score (5) should be given to the lower number of Recency.  \n* the max number of Frequency and Monetary metrics mean that the customer is purchasing frequently and spending more money, so the highest score (5) should be given to the highest Frequency and Monetary values.","da15125b":"check if there are any zeros in rfm:","f242ce6b":"take a closer look at the customers that need attention:","dddc7cb7":"most purchased items:","5e3aac4f":"create a new df called rfm in order to calculate Recency, Frequency and Monetary values.  \ndf is grouped by customers and:   \n\n* the number of days between today_date and the last purchase date of this customer is **Recency**  \n* the number of unique invoices of this customer is **Frequency**  \n* the sum of TotalPrice is this customer's **Monetary**  \n","48d80cf3":"## Data Understanding","57fb0b23":"how many countries in df:","1d2a271e":"display some of the customers with the highest scores:","40d2e891":"negative values are excluded. We are not removing outliers (such as the max value on Quantity and Price variables) because we will be scoring the dataset.","844bc7df":"check the number of uniques for StockCode ve Description variables:"}}