{"cell_type":{"e57510c3":"code","1fa3b31d":"code","1c4da7b8":"code","c2bf1c27":"code","4fc8fba6":"code","2995b4f1":"code","66ff9245":"code","88111e77":"code","50a709f6":"code","d115d130":"code","05e955fd":"code","740548d1":"code","5f46db11":"code","4b692d7d":"markdown","2670d3b6":"markdown","96130dfc":"markdown"},"source":{"e57510c3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.models import Model\nfrom keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping\n%matplotlib inline\n\n\nimport multiprocessing","1fa3b31d":"files=['..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv',\n       '..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv',\n       '..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/all_data.csv',\n       '..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/sample_submission.csv'\n      ]\n\ndef load_data(file):\n    return pd.read_csv(file)\nwith multiprocessing.Pool() as pool:\n    test,train,all_data,sub=pool.map(load_data,files)","1c4da7b8":"train['target']=np.where(train['target']>0.5,1.0,0.0)","c2bf1c27":"\nX = train.comment_text\nY = train.target\n\n# le = LabelEncoder()\n# Y = le.fit_transform(Y)\n# Y = Y.reshape(-1,1)","4fc8fba6":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.15)","2995b4f1":"max_words = 1000\nmax_len = 150\ntok = Tokenizer(num_words=max_words)\ntok.fit_on_texts(X_train)\nsequences = tok.texts_to_sequences(X_train)\nsequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len)","66ff9245":"def RNN():\n    inputs = Input(name='inputs',shape=[max_len])\n    layer = Embedding(max_words,50,input_length=max_len)(inputs)\n    layer = LSTM(64)(layer)\n    layer = Dense(256,name='FC1')(layer)\n    layer = Activation('relu')(layer)\n    layer = Dropout(0.5)(layer)\n    layer = Dense(1,name='out_layer')(layer)\n    layer = Activation('sigmoid')(layer)\n    model = Model(inputs=inputs,outputs=layer)\n    return model","88111e77":"model = RNN()\nmodel.summary()\nmodel.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])","50a709f6":"model.fit(sequences_matrix,Y_train,batch_size=128,epochs=2,\n          validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.0001)])","d115d130":"tt=test.comment_text\n\ntok.fit_on_texts(tt)\ntest_sequences = tok.texts_to_sequences(tt)\ntest_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)","05e955fd":"\ntxts = tok.texts_to_sequences(tt)\ntxts = sequence.pad_sequences(txts, maxlen=max_len)\npreds = model.predict(txts)","740548d1":"sub['prediction']=preds","5f46db11":"sub.to_csv('submission.csv',index=False)","4b692d7d":"# RNN Architecture","2670d3b6":"# Preprocessing","96130dfc":"# Generating Prediction"}}