{"cell_type":{"83bc8458":"code","0651bdd4":"code","55322654":"code","4caf28c9":"code","4684820f":"code","c1b56a91":"code","44c04f0c":"code","391af180":"code","9df78eec":"code","5ceec248":"code","2bfd6545":"code","5dab250b":"code","8c6d9b29":"code","39544f33":"code","257e3589":"code","31676ced":"code","f4126890":"code","41d6996d":"code","7979168c":"code","07c4dc96":"code","b0e83d86":"code","16dd8d0d":"code","b773b3b4":"code","88e7f8b5":"code","5f241bd8":"code","5c0ffad9":"code","9f733abe":"code","98635078":"code","140e7ee4":"code","2f13e51c":"code","11041f32":"code","16af3a34":"code","ffc1aa42":"code","4a0b9500":"code","b9918713":"code","23893b81":"code","d9b34ae1":"code","18772b8f":"code","8547b39a":"code","b7c7fecb":"code","2a654f72":"code","ab42de2f":"code","ff4b572b":"code","3b201029":"code","e5491d07":"code","31b6ab69":"code","634a2e31":"code","53b776e0":"markdown","ecc452c2":"markdown"},"source":{"83bc8458":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0651bdd4":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.preprocessing.image import load_img,img_to_array,ImageDataGenerator\nfrom keras.optimizers import SGD\nfrom keras.optimizers import Adam\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout","55322654":"def binclass(folder,target):\n    images=[]\n    for filename in os.listdir(folder):\n        img=cv2.imread(os.path.join(folder,filename),0)\n        \n        if img is not None:\n            images.append([img,target])\n    return images","4caf28c9":"normal=binclass(\"..\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\/Normal\/\",0)","4684820f":"plt.imshow(normal[10][0])","c1b56a91":"abnormal = binclass(\"..\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\/Tuberculosis\/\",1)","44c04f0c":"img=cv2.imread(\"..\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\/Normal\/Normal-1.png\")\nimg.shape","391af180":"plt.imshow(abnormal[0][0])","9df78eec":"normal.extend(abnormal)\ntotal=normal","5ceec248":"feature_mat=[]\ntarget=[]\nfor a,b in total:\n    feature_mat.append(a)\n    target.append(b)","2bfd6545":"plt.imshow(feature_mat[0])\nprint(target[0])","5dab250b":"plt.imshow(feature_mat[4000])\nprint(feature_mat[4000].shape)","8c6d9b29":"frames = np.empty((480, 640, 3, 4200))\n\nfor k in range(4200):\n    frames[:,:,:,k] = cv2.imread('frame_{}.jpg'.format(k))","39544f33":"x=[]\nimg_size=220\nfor a in feature_mat:\n    arr=cv2.resize(a,(250,250))\n    x.append(arr)","257e3589":"np.shape(x[0])","31676ced":"'''from tensorflow.keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(rescale=1.0\/255.0)\nnormval=datagen.flow(feature_mat,batch_size=64)'''","f4126890":"plt.imshow(x[0])\nprint(target[0])","41d6996d":"norm_x=[]\nfor a in x:\n    tmp=a\/250\n    norm_x.append(tmp)","7979168c":"plt.imshow(norm_x[0])\nprint(target[0])","07c4dc96":"x_train,x_test,y_train,y_test = train_test_split(norm_x,target)","b0e83d86":"print(np.array(x_train).shape)\nprint(np.array(x_test).shape)\nprint(np.array(y_train).shape)\nprint(np.array(y_test).shape)","16dd8d0d":"img_rows=x_train[0].shape[0]\nimg_cols=x_train[0].shape[1]\nprint(img_rows)\nprint(img_cols)","b773b3b4":"x_train = np.array(x_train)\nx_test = np.array(x_test)","88e7f8b5":"X_train=x_train.reshape(x_train.shape[0],img_rows,img_cols,1)\n\nX_test=x_test.reshape(x_test.shape[0],img_rows,img_cols,1)\n","5f241bd8":"X_test.shape","5c0ffad9":"X_train.shape","9f733abe":"print(np.array(X_train).shape)\nprint(np.array(X_test).shape)\nprint(np.array(y_train).shape)\nprint(np.array(y_test).shape)","98635078":"def def_model():\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(250, 250,1)))\n    model.add(MaxPooling2D((2, 2)))\n    \n    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n    model.add(MaxPooling2D((2, 2)))\n    \n    model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n    model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n    model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n\n    model.add(Dense(2, activation='softmax'))\n    # compile model\n    opt = Adam(lr=0.001)\n    model.compile(optimizer=opt, loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    return model","140e7ee4":"model =  def_model()\nhistory = model.fit(np.array(X_train),np.array(y_train), epochs=10,validation_data=(X_test, np.array(y_test)))","2f13e51c":"print(history.history.keys())\n#accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n#loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","11041f32":"a=np.array(X_test)\na[0,2,1]","16af3a34":"a.shape","ffc1aa42":"predicted = model.predict(a)","4a0b9500":"predicted","b9918713":"result = []\nfor item in predicted:\n    result.append(np.argmax(item))","23893b81":"print(result)","d9b34ae1":"df = pd.DataFrame(list(zip(y_test, result)),columns =['Actual', 'Predicted'])","18772b8f":"df","8547b39a":"df.iloc[19]","b7c7fecb":"#path=\"..\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\/Normal\/Normal-1.png\"","2a654f72":"#img = load_img(path,target_size=(220,200))\n#input_arr=img_to_array(img)\/255\n","ab42de2f":"sns.heatmap(confusion_matrix(result,y_test),annot=True)","ff4b572b":"input_shape=(220,200,3)","3b201029":"base_model = tf.keras.applications.ResNet50V2(weights='imagenet', input_shape=input_shape, include_top=False)\n\nfor layer in base_model.layers:\n    layer.trainable = False\n    \n    \nmodel = Sequential()\nmodel.add(base_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()","e5491d07":"path=\"..\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\/Normal\/Normal-1.png\"\n\nimg = load_img(path,target_size=(220,200))\ninput_arr=img_to_array(img)\/255\n\nplt.imshow(input_arr)\nplt.show()\n\ninput_arr.shape\n\ninput_arr = np.expand_dims(input_arr , axis = 0)\n\npred = model.predict(input_arr)\npred\ny_pred = []\nfor prob in pred:\n    if prob >= 0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)\nif y_pred[0] == 0:\n    print(\"The Person Doesn't have tuberculosis\")\nelse:\n    print(\"The Person has tuber\")","31b6ab69":"model.compile(optimizer=Adam(lr=0.001),loss='binary_crossentropy',metrics=['accuracy'])","634a2e31":"history = model.fit(np.array(X_train),np.array(y_train), epochs=10,validation_data=(X_test, np.array(y_test)))","53b776e0":"**RESNET50**","ecc452c2":"**CONVNET**"}}