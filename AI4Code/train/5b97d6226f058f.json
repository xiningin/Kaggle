{"cell_type":{"1a953c19":"code","00b38980":"code","dab8c17e":"code","8a44ae6c":"code","4f01a5bd":"code","52944c0f":"code","c89f90a5":"code","c3f0e2ef":"code","8f78501a":"code","e5683502":"code","35f88b04":"code","8b147f50":"code","a908135b":"code","443086db":"code","06d5416d":"code","de49b35e":"code","f23fbcde":"markdown","85fe1f26":"markdown","90e9f03d":"markdown","5d7d642d":"markdown","9305c862":"markdown","ba70fe33":"markdown","f156ca16":"markdown","3bbcad6b":"markdown","af0fea83":"markdown","72a24880":"markdown","fc76ab74":"markdown","30c05b3d":"markdown"},"source":{"1a953c19":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","00b38980":"import zipfile\ntrain_zip = zipfile.ZipFile('..\/input\/forest-cover-type-kernels-only\/train.csv.zip')\ntest_zip = zipfile.ZipFile('..\/input\/forest-cover-type-kernels-only\/test.csv.zip')\n\ndata = pd.read_csv(train_zip.open('train.csv'))\ntest_data =  pd.read_csv(test_zip.open('test.csv'))","dab8c17e":"data.info()","8a44ae6c":"#check for null values and count it\nprint(data.isnull().sum())","4f01a5bd":"#get duplicates \ndata.duplicated()","52944c0f":"print(data.shape)\nprint(test_data.shape)","c89f90a5":"data.columns","c3f0e2ef":"l = ['Elevation','Aspect', 'Slope','Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology',\n       'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon',\n        'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points']\n\nfig = plt.figure(figsize=(20,20))\nfig.subplots_adjust(hspace=0.5, wspace=0.5)\ni=1\nrows = 5\ncols = 2\nfor col in l:\n    ax = fig.add_subplot(rows, cols, i)\n    sns.barplot(x=\"Cover_Type\", y=col, data=data)\n    plt.ylabel(col)\n    i+=1","8f78501a":"l = ['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3',\n       'Wilderness_Area4', 'Soil_Type1', 'Soil_Type2', 'Soil_Type3',\n       'Soil_Type4', 'Soil_Type5', 'Soil_Type6', 'Soil_Type7', 'Soil_Type8',\n       'Soil_Type9', 'Soil_Type10', 'Soil_Type11', 'Soil_Type12',\n       'Soil_Type13', 'Soil_Type14', 'Soil_Type15', 'Soil_Type16',\n       'Soil_Type17', 'Soil_Type18', 'Soil_Type19', 'Soil_Type20',\n       'Soil_Type21', 'Soil_Type22', 'Soil_Type23', 'Soil_Type24',\n       'Soil_Type25', 'Soil_Type26', 'Soil_Type27', 'Soil_Type28',\n       'Soil_Type29', 'Soil_Type30', 'Soil_Type31', 'Soil_Type32',\n       'Soil_Type33', 'Soil_Type34', 'Soil_Type35', 'Soil_Type36',\n       'Soil_Type37', 'Soil_Type38', 'Soil_Type39', 'Soil_Type40']\nfig = plt.figure(figsize=(20,20))\nfig.subplots_adjust(hspace=0.5, wspace=0.5)\ni=1\nrows = 10\ncols = 5\nfor col in l:\n    ax = fig.add_subplot(rows, cols, i)\n    sns.barplot(x=\"Cover_Type\", y=col, data=data)\n    plt.ylabel(col)\n    i+=1","e5683502":"labels = data['Cover_Type']\nfeatures =['Elevation', 'Aspect', 'Slope',\n       'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology',\n       'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon',\n       'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points',\n       'Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3',\n       'Wilderness_Area4', 'Soil_Type1', 'Soil_Type2', 'Soil_Type3',\n       'Soil_Type4', 'Soil_Type5', 'Soil_Type6', 'Soil_Type7', 'Soil_Type8',\n       'Soil_Type9', 'Soil_Type10', 'Soil_Type11', 'Soil_Type12',\n       'Soil_Type13', 'Soil_Type14', 'Soil_Type15', 'Soil_Type16',\n       'Soil_Type17', 'Soil_Type18', 'Soil_Type19', 'Soil_Type20',\n       'Soil_Type21', 'Soil_Type22', 'Soil_Type23', 'Soil_Type24',\n       'Soil_Type25', 'Soil_Type26', 'Soil_Type27', 'Soil_Type28',\n       'Soil_Type29', 'Soil_Type30', 'Soil_Type31', 'Soil_Type32',\n       'Soil_Type33', 'Soil_Type34', 'Soil_Type35', 'Soil_Type36',\n       'Soil_Type37', 'Soil_Type38', 'Soil_Type39', 'Soil_Type40']","35f88b04":"x = data.loc[:,features]\ny = labels\nx_train, x_val, y_train, y_val = train_test_split( x.values, y.values, test_size=0.1, random_state=5 )","8b147f50":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(x_train, y_train)\npred = knn.predict(x_val)\naccuracy_score(y_val, pred)","a908135b":"RF = RandomForestClassifier(n_estimators=1000, random_state=5)\nRF.fit(x_train, y_train)\npred = RF.predict(x_val)\naccuracy_score(y_val,pred)","443086db":"DT = DecisionTreeClassifier(max_depth=10)\nDT.fit(x_train, y_train)\npred = DT.predict(x_val)\naccuracy_score(y_val,pred)","06d5416d":"x_test = test_data.loc[:,features]\ny_test = RF.predict(x_test)\ny_test","de49b35e":"submission = pd.DataFrame()\nsubmission['Id'] = test_data[\"Id\"]\nsubmission['Cover_Type'] = y_test\nsubmission.to_csv('submission.csv', index=False)","f23fbcde":"**try to classify this problem by 3 classifiers and get best of them**\n\n**KNN**","85fe1f26":"**import train and test files**","90e9f03d":"**get forest cover type for test data**","5d7d642d":"**Split data into training and validition**","9305c862":"**Data cleaning**\n\n**get info and check for null values** \n\n**get duplicates and drop it if exists**","ba70fe33":"**visualize the relation between cover type and categorical features**","f156ca16":"\n**Conclusion**\n\n**1 - No missing data**\n\n**2 - No duplicates in data**\n\n**3 - the cover type is affected by many variables**\n\n**4 - KNN clasifier is the best with 0.87 val accuracy**","3bbcad6b":"**Desicion Tree**","af0fea83":"**generate submission file**","72a24880":"**Specify training features and labels**","fc76ab74":"**Random Forest**","30c05b3d":"**visualize the relation between cover type and numeric features**"}}