{"cell_type":{"5d5980e6":"code","f9ff145e":"code","1b7d88c6":"code","db5111e9":"code","522ba144":"code","52772457":"code","54c1ab06":"code","51043c04":"code","7ffac61e":"code","f227fd99":"code","c0c2ee7a":"code","ba94e331":"code","9eab4ea0":"markdown","68168c73":"markdown","57bae696":"markdown","46ea837c":"markdown","f8a286dd":"markdown","a81af006":"markdown","0fbbfc36":"markdown","db189ae2":"markdown","7877f383":"markdown","24146bfd":"markdown","7a8ff303":"markdown"},"source":{"5d5980e6":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport tensorflow as tf\nimport matplotlib.image as mpimg\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img","f9ff145e":"print(os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray'))\nprint(os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/test'))\nprint(os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/train'))\nprint(os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/val'))","1b7d88c6":"import os\npneumonia = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\")\npneumonia_dir = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\"\n\nplt.figure(figsize=(20, 10))\n\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(pneumonia_dir, pneumonia[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \nplt.tight_layout()","db5111e9":"import os\npneumonia = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\")\npneumonia_dir = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\"\n\nplt.figure(figsize=(20, 10))\n\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(pneumonia_dir, pneumonia[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \nplt.tight_layout()","522ba144":"img_normal=load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/IM-0115-0001.jpeg')\nimg_pneumonia=load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/person1002_bacteria_2933.jpeg')","52772457":"fig=plt.figure(figsize=(20,6))\nax1 = fig.add_subplot(121)\nplt.imshow(img_normal)\nax2 = fig.add_subplot(122)\nplt.imshow(img_pneumonia)\nax1.title.set_text('Normal')\nax2.title.set_text('Pneumonia')\nplt.show()","54c1ab06":"import tensorflow as tf\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\npretrained_base= InceptionV3(weights='imagenet', include_top=False,input_shape=(224,224,3))\npretrained_base.trainable = False","51043c04":"from tensorflow.keras.callbacks import EarlyStopping\n\nearly_stopping = EarlyStopping(\n    min_delta=0.1,\n    patience= 5,\n    restore_best_weights=True,\n)\n\nmodel=tf.keras.models.Sequential([\n    pretrained_base,\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128,activation='relu'),\n    tf.keras.layers.Dense(1,activation='sigmoid')   \n\n])\n\nmodel.summary()\n\nmodel.compile(loss='binary_crossentropy',optimizer=tf.keras.optimizers.Adam(lr=0.001),metrics=['accuracy'])\n","7ffac61e":"train_datagen=ImageDataGenerator(rescale=1\/255)\ntrain_data=train_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/',target_size=(224,224),\n                                             batch_size=128,class_mode='binary')\n\ntest_datagen=ImageDataGenerator(rescale=1\/255)\ntest_data=test_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/',target_size=(224,224),\n                                      batch_size=128,class_mode='binary')\n\nvalidation_datagen=ImageDataGenerator(rescale=1\/255)\nvalidation_data=validation_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/',target_size=(224,224),\n                                  batch_size=128,class_mode='binary')\n","f227fd99":"history=model.fit(train_data,epochs= 9,validation_data=validation_data,callbacks=[early_stopping])","c0c2ee7a":"history_df=pd.DataFrame(history.history)\nhistory_df.loc[:,['loss','val_loss']].plot();\nprint(\"Minimum validation loss: {}\".format(history_df['val_loss'].min()))","ba94e331":"import cv2\nimg_11 = cv2.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/person100_bacteria_475.jpeg')\nimg_1 = cv2.resize(img_11,(224,224))\nimg_1 = np.reshape(img_1,[1,224,224,3])\nclass_1 = model.predict(img_1)\nclass_1=int(class_1)\n\nif class_1 < 0.5:\n    print('person is normal')\nelse:\n    print('person is pneumonia postive')\n    \nplt.imshow(img_11)\nplt.axis(\"off\")\nplt.show()\nprint(class_1)","9eab4ea0":"<h2>if we look simultaneously at both pneumonia postive and normal person ,its really difficult to differentiate betweem two x-rays thus this model will really help to indentfy the pneumonia positve person. ","68168c73":"<H2>Lets take a look at some x-ray pictures of pneumonia positive person","57bae696":"<h2>Lets test our model on some example of postive lebel image whether the model predicts right result or not.","46ea837c":"<h2>As the above figure shows it is difficult for normal person to identify wheter the peson have pneumonia or not as the both X-rays look quite same.","f8a286dd":"<h2> train our model on training data through total of 10 epochs","a81af006":"<H2>Now lets take a look some example of x-ray pictures of normal person","0fbbfc36":"<h2>Model has correctly predicted the label of input.","db189ae2":"<h2>lets make our Convolutional neural network. neural network consist of 5 CNN layers and last layer consitst sigmoid activation to give class of the output 1 for pneumonia posotive and 0 for pneumonia negative. ","7877f383":"<h2>This is the notebook which uses CNN to predict whether the patient have pnemonia or not on examine the X-ray image.used keras as main deep learning framework and used tensorflow in backend and Nvidia Tesla K80 gpu for better and faster computations.","24146bfd":"<h2>lets start our work by importing the required libraries.keras provide inbuild libraries to perform image preprocessing, as we cannot directly feed images to neural networks, ImageDataGenerator will generates a tf.data.Dataset from images from directory.","7a8ff303":"<h2>the ImageDataGenerator function takes images from directory and convert this image data into tensor data which is ready to feed to neural networks."}}