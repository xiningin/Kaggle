{"cell_type":{"e3ec893b":"code","33617bf0":"code","f4742b06":"code","6bf798d8":"code","fba880ef":"code","06214720":"code","ad9beb7b":"code","20e3937e":"code","3b98dec1":"code","508c3b09":"code","20cd8470":"code","5efc8233":"code","dedb5476":"code","d3f9c56f":"code","a97db9ca":"code","ec09932c":"code","0a5dd3c7":"code","1f385d6e":"code","1c77f2db":"code","8da0bacb":"code","a2273fc1":"code","6790ac58":"markdown"},"source":{"e3ec893b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.offline as po\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nfrom plotly.offline import init_notebook_mode,iplot,plot\ninit_notebook_mode(connected=True)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33617bf0":"data = pd.read_csv(\"\/kaggle\/input\/who-covid19-data-tabe\/WHO COVID-19 global table data August 11th 2021 at 10.41.34 AM.csv\")","f4742b06":"data.head()","6bf798d8":"data=data.reset_index()","fba880ef":"data.rename(columns =  {'Name': 'Continent'}, inplace = True)\ndata.rename(columns =  {'index': 'Country'}, inplace = True) ","06214720":"data.rename(columns =  {'Name': 'Continent'}, inplace = True)\ndata.rename(columns =  {'index': 'Country'}, inplace = True)  \ndata.rename(columns =  {'WHO Region': 'Cases - cumulative total real'}, inplace = True)\ndata.rename(columns =  {'Cases - newly reported in last 7 days per 100000 population': 'Cases - newly reported in last 24 hours real'}, inplace = True) \ndata.rename(columns =  {'Cases - newly reported in last 24 hours': 'Deaths - cumulative total real'}, inplace = True) \ndata.rename(columns =  {'Deaths - cumulative total': 'df'}, inplace = True) ","ad9beb7b":"data['Country']= data['Country'].replace('United States of America', 'United States')\ndata['Country']= data['Country'].replace('Russian Federation', 'Russian')\ndata['Country']= data['Country'].replace('The United Kingdom' , 'United Kingdom')\ndata['Country']= data['Country'].replace('Iran (Islamic Republic of)' , 'Iran')\ndata['Country']= data['Country'].replace('Czechia' , 'Czech Republic')\ndata['Country']= data['Country'].replace('occupied Palestinian territory, including east Jerusalem' , 'Palestine, State of')\ndata['Country']= data['Country'].replace('Republic of Moldova' , 'Moldova')\ndata['Country']= data['Country'].replace('Viet Nam' , 'Vietnam')\ndata['Country']= data['Country'].replace('Bolivia (Plurinational State of)' , 'Bolivia')\ndata['Country']= data['Country'].replace( 'Palestine','Palestine, State of')\ndata['Country']= data['Country'].replace('Venezuela (Bolivarian Republic of)' , 'Venezuela')\ndata['Country']= data['Country'].replace('Republic of Korea' , 'Korea, Republic of')\ndata['Country']= data['Country'].replace( 'Korea(Republic of','Korea, Republic of')\ndata['Country']= data['Country'].replace( 'Bosnia and Herzegovina','Bosnia And Herzegovina')\ndata['Country']= data['Country'].replace( ' Namibia ','Namibia')\ndata['Country']= data['Country'].replace( 'Syrian Arab Republic','Syria')\ndata['Country']= data['Country'].replace( 'United Republic of Tanzania','Tanzania')","20e3937e":"data = data[0:][1:]","3b98dec1":"data.head()","508c3b09":"countryData = dict(\n                    type = 'choropleth',\n                    colorscale=\"YlGnBu\",                    \n                    locations = data['Country'],\n                    locationmode = 'country names',\n                    z = data['Cases - cumulative total real'],\n                    text = 'Case(s)',\n                    colorbar = {'title' : 'Total Case(s)'}\n                    )","20cd8470":"layout = dict(title = '<b>Total COVID 19 confirmed Cases by Country<\/b>',\n              geo = dict(showframe = False, \n                       projection = {'type':'orthographic'}, \n                       showlakes = True, lakecolor=\"blue\",\n                       showocean=True, oceancolor=\"LightBlue\",\n                       showland=True, landcolor=\"LightGreen\"))\n#                 geo = dict(projection = {'type':'mercator,orthographic'})","5efc8233":"choromap = go.Figure(data = [countryData],layout = layout)\n# fig.update_layout(title_x=0.5, width=700, height=700, font=dict(family=\"Times New Roman\", size=18), font_color=\"#000000\", title_font_color=\"#FF9833\")\npo.iplot(choromap,validate=False)","dedb5476":"top50 = data[['Country','Cases - cumulative total real']].head(50)\n# top50 = top50.style.format({\"Cases - cumulative total\": \"{:,.0f}\"})\ntop50.style.bar(subset=['Cases - cumulative total real'], color='#347aeb').format({\"Cases - cumulative total real\": \"{:,.0f}\"})","d3f9c56f":"countryData = dict(\n                    type = 'choropleth',\n                    colorscale=\"amp\",                    \n                    locations = data['Country'],\n                    locationmode = 'country names',\n                    z = data['Deaths - cumulative total real'],\n                    text = 'Case(s)',\n                    colorbar = {'title' : 'Death(s)'}\n                    )\nlayout = dict(title = '<b>Total COVID 19 Deaths by Country<\/b>',\n              geo = dict(showframe = False, \n                       projection = {'type':'orthographic'}, \n                       showlakes = True, lakecolor=\"blue\",\n                       showocean=True, oceancolor=\"LightBlue\",\n                       showland=True, landcolor=\"LightGreen\"))\n#                 geo = dict(projection = {'type':'mercator'})\nchoromap = go.Figure(data = [countryData],layout = layout)\n# fig.update_layout(title_x=0.5, width=700, height=700, font=dict(family=\"Times New Roman\", size=18), font_color=\"#000000\", title_font_color=\"#FF9833\")\npo.iplot(choromap,validate=False)","a97db9ca":"SortByDeath = data.sort_values('Deaths - cumulative total real',ascending=False)\nSortByDeath.index = np.arange(1, len(SortByDeath) + 1)\ntopD50 = SortByDeath[['Country','Deaths - cumulative total real']].head(50)\n# top50 = top50.style.format({\"Cases - cumulative total\": \"{:,.0f}\"})\ntopD50.style.bar(subset=['Deaths - cumulative total real'], color='#d65f5f').format({\"Deaths - cumulative total real\": \"{:,.0f}\"})","ec09932c":"GroupedByContinents = data.groupby('Continent').sum()\nGroupedByContinents","0a5dd3c7":"GroupedByContinents = GroupedByContinents.sort_values(by='Cases - cumulative total real')","1f385d6e":"GroupedByContinents['Recovered'] = GroupedByContinents['Cases - cumulative total real'] - GroupedByContinents['Deaths - cumulative total real']","1c77f2db":"GroupedByContinents","8da0bacb":"barWidth = 0.25\nplt.rcParams['figure.figsize'] = (20, 10)\n# set heights of bars\nbars1 = GroupedByContinents['Cases - cumulative total real']\nbars2 = GroupedByContinents['Deaths - cumulative total real']\nbars3 = GroupedByContinents['Recovered']\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n \n# Make the plot\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='Confirmed Cases')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='Deaths')\nplt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='Recovered')\n \n# Add xticks on the middle of the group bars\nplt.xlabel('Continents', fontweight='bold')\nplt.ylabel('Count per Million', fontweight='bold')\nplt.title('\\nCovid 19 Cases\/Death\/Recovered by Continents \\n', fontsize=26,fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(bars1))], ['Other','Western Pacific','Africa','East Mediterranean','South-East Asia','Europe','Americas'])\nplt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n# Create legend & Show graphic\nplt.legend()\nplt.show()","a2273fc1":"size = GroupedByContinents['Cases - cumulative total real']\ncolors = ['lightblue', 'lightgreen','purple','grey','orange','#2076a2','#f56642']\nlabels = \"Others\", \"Western Pacific\",\"Africa\",\"East Mediterranean\",\"South-East Asia\",\"Europe\",\"America\"\nexplode = [0, 0.01,0.01,0.01,.01,.01,.01]\n\nmy_circle = plt.Circle((0, 0), 0.7, color = 'white')\n\nplt.rcParams['figure.figsize'] = (10, 10)\nplt.pie(size, colors = colors, labels = labels, shadow = True, explode = explode, autopct = '%.2f%%')\nplt.title('Covid 19 cases per continent', fontsize = 20,fontweight='bold',color='red')\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.legend()\nplt.show()","6790ac58":"## Top 50 Countries Covid 19  Confirmed cases"}}