{"cell_type":{"2ea40275":"code","c80e24c9":"code","77ba5bd0":"code","17e76ee9":"code","e82676a6":"code","92ff8b71":"code","a57c3697":"code","cc21b6a5":"code","17468961":"code","ce140759":"code","2fe8253d":"code","e1279a45":"code","fd422f97":"code","51d06c02":"code","8bc6e425":"code","46dc6102":"code","87075715":"code","40ef7517":"code","29f1ae17":"code","457c198c":"code","3a4e0c53":"code","38a170a2":"code","5f9ca7c0":"code","53861cbf":"code","843926f9":"code","8aea8e81":"code","bee04d07":"code","47ebaeeb":"code","02b3e7ed":"code","53419c12":"code","07b99849":"code","8c449c04":"code","121bedfb":"code","36645ca3":"code","3286a7a9":"code","29c76d5b":"code","3a222039":"code","a58e1aef":"code","29fcb5c6":"code","75e1fe35":"code","92aa2a13":"code","c6a362b0":"code","6c6269d2":"code","af4ef99c":"code","38d5e37e":"code","8f26e7b6":"code","93f3a001":"code","e4d92f5d":"code","c73c4645":"code","aede5b63":"code","87bcffc6":"code","2178cb7f":"code","f679a7e6":"code","8ea926fb":"code","a19749c9":"code","d928904c":"code","e6352c33":"code","11c61dbf":"code","b39a7e6e":"markdown","85aaf0d9":"markdown","f1d01f0d":"markdown","2ba343a8":"markdown","36c39e45":"markdown","c8686691":"markdown","aa255c40":"markdown","35a30aa2":"markdown","374a89fa":"markdown","26d7060f":"markdown","148a7488":"markdown","6511da22":"markdown","47f1b1e0":"markdown","a1c04e88":"markdown","28a9d007":"markdown","6e3a05ba":"markdown"},"source":{"2ea40275":"import os\nimport time\nimport glob\nimport calendar\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats\n%matplotlib inline","c80e24c9":"path = '..\/input\/'\n\nall_files = glob.glob(os.path.join(path, \"*.data\")) \n\ndf_data = pd.read_csv('..\/input\/secom.data', sep=\"\\s+\",header=None)\ndf_target = pd.read_csv('..\/input\/secom_labels.data', sep=\"\\s+\",header=None)\n\ndf_data.head()","77ba5bd0":"df_target.head()","17e76ee9":"df_data.shape, df_target.shape","e82676a6":"df_target.iloc[:,1]\n\n# Drop date cols\ndf_target.drop([1], axis=1,inplace=True)\ndf_target.rename(columns = {list(df_target)[0]:'Target'}, inplace=True)","92ff8b71":"df_target.head()","a57c3697":"# Convert all Fails(1) to -1 \nfor i, val in enumerate(df_target.Target):\n    if val == 1:\n        df_target.iloc[i,0] = 0\n\nfor i, val in enumerate(df_target.Target):\n    if val == -1:\n        df_target.iloc[i,0] = 1\ndf_target.head() ","cc21b6a5":"plt.figure()\nsns.countplot(df_target.Target)\nplt.title('Distribution of Pass\/Fail')\nplt.show()","17468961":"df = pd.concat([df_data, df_target], axis=1)","ce140759":"correlation = df.corr()\n\nf, ax = plt.subplots(figsize=(20,10))\nplt.title('Correlations in dataset', size=20)\nsns.heatmap(correlation)\nplt.show()","2fe8253d":"missing_val_count_by_column = (df_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","e1279a45":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer()\ndf_data_imputed = imputer.fit_transform(df_data)","fd422f97":"missing_val_count_by_column = (pd.DataFrame(df_data_imputed).isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","51d06c02":"# Scale values\nfrom sklearn.preprocessing import StandardScaler\nX_scaled = StandardScaler().fit_transform(df_data_imputed)","8bc6e425":"from sklearn.decomposition import PCA\npca = PCA()\nX_scaled_pca = pca.fit(X_scaled)","46dc6102":"plt.figure(figsize=(10, 4))\naxes= plt.axes()\naxes.grid()\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.title('Cumulative variance of principle components')\nplt.xticks(range(0,530,25))\nplt.xlim(-1,525)\nplt.yticks(np.arange(0,1.1,0.1))\nplt.xlabel('Number of components')\nplt.ylabel('Cumulative explained variance')\nplt.tight_layout()","87075715":"X = df_data\ny = df_target\n\nn_classes = y.shape[1]","40ef7517":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=4)\n\n\n# Impute missing values\nimputer = SimpleImputer()\nX_train = imputer.fit_transform(X_train)\nX_test = imputer.transform(X_test)\n# Scale\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\ny_test = y_test.values","29f1ae17":"X_train.shape,y_train.shape,y_test.shape","457c198c":"def plot_roc(model,y_test,y_pred,title,label_auc):\n    logit_roc_auc = roc_auc_score(y_test, model.predict(X_test))\n    fpr, tpr, thresholds = roc_curve(y_test, model.predict_proba(X_test)[:,1])\n    plt.figure()\n    plt.plot(fpr, tpr, label= label_auc+' (area = %0.2f)' % logit_roc_auc)\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title(title)\n    plt.legend(loc=\"lower right\")\n    plt.savefig('Log_ROC')\n    plt.show()","3a4e0c53":"def permutation_test_between_clfs(y_test, pred_proba_1, pred_proba_2, nsamples=1000):\n    auc_differences = []\n    auc1 = roc_auc_score(y_test.ravel(), pred_proba_1.ravel())\n    auc2 = roc_auc_score(y_test.ravel(), pred_proba_2.ravel())\n    observed_difference = auc1 - auc2\n    for _ in range(nsamples):\n        mask = np.random.randint(2, size=len(pred_proba_1.ravel()))\n        p1 = np.where(mask, pred_proba_1.ravel(), pred_proba_2.ravel())\n        p2 = np.where(mask, pred_proba_2.ravel(), pred_proba_1.ravel())\n        auc1 = roc_auc_score(y_test.ravel(), p1)\n        auc2 = roc_auc_score(y_test.ravel(), p2)\n        auc_differences.append(auc1 - auc2)\n    return print(\"difference in roc curves: {0:.4f} \\nprobability to observe a larger difference on a shuffled data set: {1}\".format(observed_difference, np.mean(auc_differences >= observed_difference)))\n","38a170a2":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom scipy import interp\n\nstart = time.time()\n\nclassifier = LogisticRegression(solver='sag', max_iter=4000, n_jobs=-1)\nclassifier.fit(X_train, np.ravel(y_train))\ny_pred1 = classifier.predict(X_test)\n\nend = time.time()\nprint(\"\\nTime taken: {:.2f} seconds\".format(end-start))","5f9ca7c0":"confusion_matrix = metrics.confusion_matrix(y_test,y_pred1)\nconfusion_matrix","53861cbf":"from sklearn.metrics import classification_report\nauc_roc = metrics.classification_report(y_test,y_pred1)\nprint('Logistic Regression Classification Report:\\n {}'.format(auc_roc))","843926f9":"plot_roc(classifier,y_test, y_pred1, 'ROC Logistic Regression','Logistic Regression')","8aea8e81":"from sklearn.svm import SVC\n\nstart = time.time()\n\nclassifier = SVC(kernel=\"linear\", probability=True, verbose=1)\nclassifier.fit(X_train, np.ravel(y_train))\ny_pred2 = classifier.predict(X_test)\n\nend = time.time()\nprint(\"\\nTime taken: {:.2f} seconds\".format(end-start))","bee04d07":"confusion_matrix = metrics.confusion_matrix(y_test,y_pred2)\nconfusion_matrix","47ebaeeb":"auc_roc = metrics.classification_report(y_test, y_pred2)\nprint('SVC Classification Report:\\n {}'.format(auc_roc))","02b3e7ed":"plot_roc(classifier,y_test, y_pred2, 'ROC SVC','SVC')","53419c12":"\npermutation_test_between_clfs(y_test, y_pred1, y_pred2, nsamples=1000)","07b99849":"from sklearn.feature_selection import RFE\n\nstart = time.time()\n\nclassifier = LogisticRegression(solver='sag', max_iter=4000, n_jobs=-1)\nrfe = RFE(classifier,verbose=1,step=30)\nrfe = rfe.fit(X_train, np.ravel(y_train))\n\nend = time.time()\nprint(\"\\nTime taken: {:.2f} seconds\".format(end-start))","8c449c04":"# Create new X train and test with est features from RFE\nfeatures = X.columns[rfe.support_]\nprint(features)\nX_train_rfe = pd.DataFrame(X_train)[features]\nX_test_rfe = pd.DataFrame(X_test)[features]","121bedfb":"classifier = LogisticRegression(solver='sag', max_iter=4000, n_jobs=-1)\nclassifier.fit(X_train_rfe, np.ravel(y_train))\ny_pred11 = classifier.predict(X_test_rfe)","36645ca3":"confusion_matrix = metrics.confusion_matrix(y_test,y_pred11)\nconfusion_matrix","3286a7a9":"auc_roc = metrics.classification_report(y_test,y_pred11)\nprint('Logistic Regression with RFE Classification Report:\\n {}'.format(auc_roc))","29c76d5b":"logit_roc_auc = roc_auc_score(y_test, classifier.predict(X_test_rfe))\nfpr, tpr, thresholds = roc_curve(y_test, classifier.predict_proba(X_test_rfe)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression w\/RFE (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Logistic Regression with RFE')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","3a222039":"permutation_test_between_clfs(y_test, y_pred1, y_pred11, nsamples=1000)","a58e1aef":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import chi2 ,SelectKBest\nnorm = MinMaxScaler()\n\n# Normalise training data \nX_train_norm = norm.fit_transform(X_train)","29fcb5c6":"selector = SelectKBest(chi2, k=295)\nselector.fit(X_train_norm, y_train)\nX_train_kbest = selector.transform(X_train)\nX_test_kbest = selector.transform(X_test)","75e1fe35":"classifier = LogisticRegression(solver='sag', max_iter=4000, n_jobs=-1)\nclassifier.fit(X_train_kbest, np.ravel(y_train))\ny_pred12 = classifier.predict(X_test_kbest)","92aa2a13":"confusion_matrix = metrics.confusion_matrix(y_test,y_pred12)\nconfusion_matrix","c6a362b0":"auc_roc = metrics.classification_report(y_test,y_pred12)\nprint('Logistic Regression with chi2 test Classification Report:\\n {}'.format(auc_roc))","6c6269d2":"logit_roc_auc = roc_auc_score(y_test, classifier.predict(X_test_kbest))\nfpr, tpr, thresholds = roc_curve(y_test, classifier.predict_proba(X_test_kbest)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression w\/chi2 (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Logistic Regression with chi2 test')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","af4ef99c":"permutation_test_between_clfs(y_test, y_pred1, y_pred12, nsamples=1000)","38d5e37e":"start = time.time()\n\nclassifier = SVC(kernel=\"linear\", probability=True, verbose=1)\nrfe = RFE(classifier,verbose=1,step=30)\nrfe = rfe.fit(X_train, np.ravel(y_train))\n\nend = time.time()\nprint(\"\\nTime taken: {:.2f} seconds\".format(end-start))","8f26e7b6":"# Create new X train and test with est features from RFE\nfeatures = X.columns[rfe.support_]\nprint(features)\nX_train_rfe = pd.DataFrame(X_train)[features]\nX_test_rfe = pd.DataFrame(X_test)[features]","93f3a001":"classifier = SVC(kernel=\"linear\", probability=True, verbose=1)\nclassifier.fit(X_train_rfe, np.ravel(y_train))\ny_pred21 = classifier.predict(X_test_rfe)","e4d92f5d":"confusion_matrix = metrics.confusion_matrix(y_test,y_pred21)\nconfusion_matrix","c73c4645":"auc_roc = metrics.classification_report(y_test,y_pred21)\nprint('SVC with RFE Classification Report:\\n {}'.format(auc_roc))","aede5b63":"logit_roc_auc = roc_auc_score(y_test, classifier.predict(X_test_rfe))\nfpr, tpr, thresholds = roc_curve(y_test, classifier.predict_proba(X_test_rfe)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='SVC w\/RFE (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('SVC with RFE')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","87bcffc6":"permutation_test_between_clfs(y_test, y_pred2, y_pred21, nsamples=1000)","2178cb7f":"norm = MinMaxScaler()\n\n# Normalise training data \nX_train_norm = norm.fit_transform(X_train)","f679a7e6":"selector = SelectKBest(chi2, k=295)\nselector.fit(X_train_norm, y_train)\nX_train_kbest = selector.transform(X_train)\nX_test_kbest = selector.transform(X_test)","8ea926fb":"classifier = SVC(kernel=\"linear\", probability=True, verbose=1)\nclassifier.fit(X_train_kbest, np.ravel(y_train))\ny_pred22 = classifier.predict(X_test_kbest)","a19749c9":"confusion_matrix = metrics.confusion_matrix(y_test,y_pred22)\nconfusion_matrix","d928904c":"auc_roc = metrics.classification_report(y_test,y_pred22)\nprint('SVC with chi2 test Classification Report:\\n {}'.format(auc_roc))","e6352c33":"logit_roc_auc = roc_auc_score(y_test, classifier.predict(X_test_kbest))\nfpr, tpr, thresholds = roc_curve(y_test, classifier.predict_proba(X_test_kbest)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='SVC w\/chi2 (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC SVC with chi2 test')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","11c61dbf":"permutation_test_between_clfs(y_test, y_pred2, y_pred22, nsamples=1000)","b39a7e6e":"## PCA","85aaf0d9":"# Log Reg vs Log Reg w\/chi2 permutation test","f1d01f0d":"## Algorithm 1 w\/Feature selection 1 - Logistic regression with Recursive Feature Elimination","2ba343a8":"The above plot shows almost 100% variance by the first 250 components","36c39e45":"## Algorithm 1 w\/Feature selection 2 - Logistic regression with chi2 test","c8686691":"# SVC vs SVC w\/RFE permutation test","aa255c40":"Verify imputer transformation","35a30aa2":"# Log Reg vs SVC permutation test","374a89fa":"### Dealing with missing values","26d7060f":"# Log Reg vs Log Reg w\/RFE permutation test","148a7488":"## Algorithm 2 w\/Feature selection 1 - SVC with RFE","6511da22":"## Have a look at all data","47f1b1e0":"## Algorithm 2 w\/Feature selection 2 - SVC with chi2 test","a1c04e88":"## Algorithm 1 - Logistic Regression","28a9d007":"## Algorithm 2 - SVC","6e3a05ba":"# SVC vs SVC w\/chi2 permutation test"}}