{"cell_type":{"acafa20c":"code","2e6d7cfe":"code","5d251417":"code","ed75c6ba":"code","0c23e419":"code","bd5c0e3a":"code","bd03bf1c":"code","496330c0":"code","d5ea0283":"code","ca625188":"code","0606f832":"code","6400bab5":"code","98266cee":"code","565c7155":"code","a659e480":"code","c70b6cdb":"code","43979c6a":"code","1e535383":"code","277ac26e":"code","44814491":"code","ea4e8896":"code","62adeeb6":"code","d26985d7":"code","0053f413":"code","949fcd3e":"code","34567503":"code","7adae108":"code","f9348e82":"code","c20789ea":"code","fab75744":"code","8b69ef44":"code","1241811d":"code","9d36b191":"code","d91242a8":"code","7e1f1798":"code","ba95316e":"code","d78e91bd":"code","5e3db2bf":"code","3db7dcc6":"code","e2cb175b":"code","a59a29f7":"code","e36cf34e":"code","e8182d1d":"code","16df2576":"code","9b6daaee":"code","1c8d8552":"code","f662cf61":"code","622f3b4f":"code","6b8f7ebe":"code","3b67808f":"code","e667a304":"markdown","838cc0c6":"markdown","40673076":"markdown","808cf1eb":"markdown","83d9b2f0":"markdown","f0dad090":"markdown","95b5cf4b":"markdown","d889db3e":"markdown","f68a4e65":"markdown","5c760542":"markdown"},"source":{"acafa20c":"import pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')","2e6d7cfe":"#Importing dataset\ndf_churn_raw = pd.read_csv('..\/input\/bigml_59c28831336c6604c800002a.csv')","5d251417":"#Display dimension of the data\ndf_churn_raw.shape","ed75c6ba":"#Display first 5 rows of the dataset\ndf_churn_raw.head()","0c23e419":"#Display last 5 rows of the dataset\ndf_churn_raw.tail()","bd5c0e3a":"#Display randomly selected 5 rows of the dataset\ndf_churn_raw.sample(5)","bd03bf1c":"#Display list of column names of the dataset\ndf_churn_raw.columns","496330c0":"#Display datatype, non null entries count for each column\ndf_churn_raw.info()","d5ea0283":"# area code should not be an int. Lets change the data type to object\ndf_churn_raw['area code'] = df_churn_raw['area code'].astype('object')","ca625188":"#lets display the datatypes again\ndf_churn_raw.dtypes","0606f832":"#Get basic stats for numeric data\ndf_churn_raw.describe()","6400bab5":"#Object features are not present in the describe stat. lets include them\ndf_churn_raw.describe(include=['object','bool'])","98266cee":"#Check for null values in each column\ndf_churn_raw.isnull().any()","565c7155":"#Sum null values\ndf_churn_raw.isnull().sum()","a659e480":"#Lets see unique values in 'state' column\ndf_churn_raw.state.unique()","c70b6cdb":"#Display number of unique values in a column\ndf_churn_raw['area code'].nunique()","43979c6a":"#Display the count of unique values for churn column\ndf_churn_raw['churn'].value_counts()","1e535383":"# Relative frequency of the values in Churn column. 85.5% have not churned. 14.5% churned\ndf_churn_raw['churn'].value_counts(normalize =True)","277ac26e":"df_churn_raw.head()","44814491":"#Selection rows in position 0 to 10 and columns 4 and 6\ndf_churn_raw.iloc[0:10,4:6]","ea4e8896":"#Selecting last 4 rows\ndf_churn_raw.iloc[-5:-1,3:6]","62adeeb6":"#Selecting rows with label from 0 to 10 and column name 'total day charge'\ndf_churn_raw.loc[0:10,'total day charge']","d26985d7":"#Selecting rows labeled from 0 to 10 and 2 columns named 'total day charge' and 'total day minutes'\ndf_churn_raw.loc[0:10,['total day charge','total day minutes']]","0053f413":"#Selecting first 20 rows and columns specified\ndf_churn_raw.loc[:20,['total day charge','total day minutes']]","949fcd3e":"#Selecting 2 columns and displaying as a dataframe. Limiting the entries displayed to 10.\ndf_churn_raw[['total day charge','total day minutes']].head(10)","34567503":"#Lets select customers who made day calls below average and day charge was above average. Valuable customers for us.\n\nfil = (df_churn_raw['total day calls']<df_churn_raw['total day calls'].mean()) & (df_churn_raw['total day charge']> df_churn_raw['total day charge'].mean())\ndf_churn_raw.loc[fil].head()","7adae108":"#Copy the valuable customers data to another dataset\ndf_temp = df_churn_raw[fil]","f9348e82":"df_temp.shape","c20789ea":"df_temp.head()","fab75744":"df_temp['total minutes'] = df_temp['total day minutes'] + df_temp['total eve minutes'] + df_temp['total night minutes']\ndf_temp['total charge'] = df_temp['total day charge'] + df_temp['total eve charge'] + df_temp['total night charge']\ndf_temp['total calls'] = df_temp['total day calls'] + df_temp['total eve calls'] + df_temp['total night calls']","8b69ef44":"#If I want to change the minute to hour, map gives the easies way to do so. \n#map works on series and hence it can be used to manipulate one column at a time\ndf_temp['total minutes'].map(lambda x: x\/60).head(10)","1241811d":"#Let us write a small funtion to change minutes top hours\ndef change_mins_hrs(x):\n    return x\/60","9d36b191":"#Series manipulation can be done using function as well:\ndf_temp['total minutes'].map(change_mins_hrs).head(10)","d91242a8":"df_temp.head()","7e1f1798":"#I do not like the 'yes' and 'no' values in International plan and voice mail plan. Let us change them to True and False.\n#Defining a dictionary that maps yes with True and no with False.\ndic = {'yes':'True','no':'False'}","ba95316e":"#Using map to replace yes with True and no with False in 'International plan' column\ndf_temp['international plan'] = df_temp['international plan'].map(dic)","d78e91bd":"#Using map to replace yes with True and no with False in 'Voice plan' column\ndf_temp['voice mail plan'] = df_temp['voice mail plan'].map(dic)","5e3db2bf":"df_temp.head()","3db7dcc6":"#If we want to manipulate data in 2 or more columns, applymap is our guy. Applying function on 3 columns at the same time:\ndf_temp[['total day minutes','total eve minutes','total night minutes']].applymap(change_mins_hrs).head(10)","e2cb175b":"#Now using 'apply'. 'apply' has same qualities as 'applymap' and few additional powers.\n#When we need to apply an operation column-wise or row-wise on a dataframe, 'apply' comes handy.\n#Mean of 3 columns(column-wise):\ndf_temp[['total day minutes','total eve minutes','total night minutes']].apply(np.mean,axis=0)","a59a29f7":"#Mean of 3 columns(row-wise) for each observation:\ndf_temp[['total day minutes','total eve minutes','total night minutes']].apply(np.mean,axis=1).head(10)","e36cf34e":"df_churn_raw.head()","e8182d1d":"#By area code, we want to see sum of total charge for day, evening and night:\ndf_churn_raw.groupby('area code').aggregate({'total day charge':'sum','total eve charge':'sum',\n                                            'total night charge':'sum'})","16df2576":"#How many subscribe to international plan by area code?\npd.crosstab(df_churn_raw['area code'],df_churn_raw['international plan'],margins=True)","9b6daaee":"#How many subscribe to international plan by area code (relative frequency)?\npd.crosstab(df_churn_raw['area code'],df_churn_raw['international plan'],margins=True,normalize = True)","1c8d8552":"#What is the average total day charge by each area code for international plan subscribers and non-subscribers?\npd.crosstab(df_churn_raw['area code'],df_churn_raw['international plan'],\n            values=df_churn_raw['total day charge'],aggfunc=np.mean)","f662cf61":"#What is the average total night charge by each area code for international plan subscribers and non-subscribers?\npd.crosstab(df_churn_raw['area code'],df_churn_raw['international plan'],\n            values=df_churn_raw['total night charge'],aggfunc=np.mean)","622f3b4f":"#Number of customer service calls and churn relationship in each area?\npd.crosstab(df_churn_raw['area code'],df_churn_raw['churn'],values=df_churn_raw['customer service calls'],aggfunc=np.mean)","6b8f7ebe":"#How many customer service calls were placed by customers who did and did not churned?\ntable = pd.pivot_table(df_churn_raw,index=['churn','international plan'],\n                    values = 'customer service calls',aggfunc = np.mean)","3b67808f":"table\n#Is there something to do with customer service?","e667a304":"## Why did customers who churned have placed more service calls ? Was there an issue with service quality, coverage etc? \n## Further analysis of customer call records can give good insights behind the churn.","838cc0c6":"# 3. Selecting and Indexing\n\n#### a. Selecting by position - iloc\n#### b. Selecting by label - loc","40673076":"# 1. Importing necessary library functions","808cf1eb":"# 4. Using map, apply, applymap","83d9b2f0":"# 2. Viewing or Inspecting dataset","f0dad090":"Create 3 new columns:\n1. total minutes = adding minutes from day, evening and night\n2. total charge = adding charge from day, evening and night\n3. total calls = adding calls from day, evening and night","95b5cf4b":"#### People who churned seemed to have contacted customer service more compared to people who did not churn.\n#### It raises question about the reason\/issues behind those calls.","d889db3e":"# Telecom Churn Data Analysis\n\nThis notebook explores telecom churn dataset using Pandas. It covers basic and advanced Pandas functions used for data analysis including map, apply, applymap, groupby, crosstab, pivot_table.  \n\nFew questions to ask the data:\n1. How does churn depend on calling behavior like call duration, call charge and call time?\n2. How does area code or international plan or voice mail plan affect churn?\n3. How is customer service call related to churn?","f68a4e65":"# 5. Summary Tables\n#### groupby, crosstab, pivot_table","5c760542":"#### pivot_table"}}