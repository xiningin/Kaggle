{"cell_type":{"00d4b014":"code","35d4978c":"code","37da0647":"code","d95c5da1":"code","7a0f3e37":"code","e6127ba3":"code","cd273d68":"code","2ba3058a":"code","201e8fc1":"code","9a666d55":"code","cc1414cb":"code","c003db37":"code","d805c04d":"code","8539307f":"code","790e4889":"code","4761d910":"code","1698e198":"code","fdd0c9e5":"code","512acdbe":"code","68c8e44e":"code","81da1b72":"code","41319a4c":"code","2e179d04":"code","bc05cb63":"code","ded97db6":"markdown","3c73b024":"markdown","2881735b":"markdown","f514533d":"markdown","66ce9dc7":"markdown","1735e330":"markdown","b0d55aa7":"markdown","6c5fff6e":"markdown","b1acc6a8":"markdown","2b9d8b60":"markdown","2f629874":"markdown","5ab71f7b":"markdown","f731393b":"markdown","670a528c":"markdown","7a6e6775":"markdown","2d3fabe9":"markdown","957bcf9f":"markdown","410865e5":"markdown","374accbe":"markdown","c82145f4":"markdown","ab58c454":"markdown","a6bdc518":"markdown","83798eeb":"markdown"},"source":{"00d4b014":"import numpy as np\nimport pandas as pd\nfrom pandas import read_csv\n\nfile_name='..\/input\/fifa-21-complete-player-dataset\/players_21.csv'\ndata=read_csv(file_name)\npd.set_option('display.max_columns',None)\ndata.rename(columns={'height_cm':'Height(cm)','weight_kg':'Weight(kg)','skill_moves':'Skill Moves',\n                        'attacking_crossing':'Crossing','attacking_finishing':'Finishing',\n                        'attacking_heading_accuracy':'Heading Accuracy','attacking_short_passing':'Short Passing',\n                        'attacking_volleys':'Volleys','skill_dribbling':'Dribbling',\n                        'skill_curve':'Curve','skill_fk_accuracy':'FK. Accuracy',\n                        'skill_long_passing':'Long Passing','skill_ball_control':'Ball Control',\n                        'movement_acceleration':'Acceleration','movement_sprint_speed':'Sprint Speed',\n                        'movement_agility':'Agility','movement_reactions':'Reactions',\n                        'movement_balance':'Balance','power_shot_power':'Shot Power',\n                        'power_jumping':'Jumping','power_stamina':'Stamina',\n                        'power_strength':'Strength','power_long_shots':'Long Shots',\n                        'mentality_aggression':'Aggression','mentality_interceptions':'Interceptions',\n                        'mentality_positioning':'Positioning','mentality_vision':'Vision',\n                        'mentality_penalties':'Penalties','mentality_composure':'Composure',\n                        'defending_marking':'Marking','defending_standing_tackle':'Standing Tackle',\n                        'defending_sliding_tackle':'Sliding Tackle'},inplace=True)\ndata","35d4978c":"def sim_pos(row):\n    return row.player_positions.partition(',')[0]\n\ndef foot_trans(row):\n    if row.preferred_foot=='Right':\n        return 5-row.weak_foot\n    else:\n        return row.weak_foot-5\n    \ndef pos_trans(row):\n    if row.player_positions in ['ST','CF']:\n        return 'ST'\n    if row.player_positions in ['LW','RW','LM','RM']:\n        return 'WF'\n    if row.player_positions in ['CAM','CDM','CM']:\n        return 'MF'\n    if row.player_positions in ['LWB','RWB','LB','RB']:\n        return 'WB'\n    if row.player_positions in ['CB']:\n        return 'CB'\n    if row.player_positions in ['GK']:\n        return 'GK'\n\ndef calc_marking(row):\n    return int((10*row['defending']-3*row['Standing Tackle']-2*row['Interceptions']\n                -row['Heading Accuracy']-row['Sliding Tackle'])\/3) if row['player_positions']!='GK' else np.nan\n    \ndata['player_positions']=data.apply(sim_pos,axis=1)\ndata['Right Foot']=data.apply(foot_trans,axis=1)\ndata['rough_position']=data.apply(pos_trans,axis=1)\ndata['Marking']=data.apply(calc_marking, axis=1)\n","37da0647":"gkdata=data[data['player_positions']=='GK']\ngkdata=gkdata.dropna(axis=1,how='all')\ngkdata=gkdata.dropna(axis=0,how='any',subset=('gk_diving','gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning'))\nnogkdata=data[data['player_positions']!='GK']\nnogkdata=nogkdata.dropna(axis=1,how='all')\nnogkdata=nogkdata.dropna(axis=0,how='any',subset=('pace','shooting','passing','dribbling','defending','physic','pace'))","d95c5da1":"import plotly.express as px\n\nall_pos=['LS','ST','RS','LW','LF','CF','RF','RW','LAM','CAM','RAM','LM','LCM','CM','RCM','RM','LWB','LDM','CDM','RDM','RWB',\n         'LB','LCB','CB','RCB','RB','GK']\nsta_pos=pd.DataFrame(np.zeros(27).reshape(1,27),columns=all_pos)\n\ndef add(row):\n    sta_pos[row.player_positions][0]+=1\n    \ndata.apply(add,axis=1)\nsta_pos=sta_pos.loc[:,~(sta_pos==0).all()]\n\nfig = px.pie(sta_pos, values=sta_pos.loc[0,:], names=sta_pos.columns, \n             title='Proportion of Each Position',\n             color_discrete_sequence=px.colors.sequential.Plotly3)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","7a0f3e37":"import plotly.graph_objects as go\n\ncol1='rgb(0,152,158)'\ncol2='rgb(180,215,141)'\ncol3='rgb(255,230,122)'\ncol4='rgb(246,172,26)'\ncol5='rgb(216,34,13)'\ncol6='#c77eb5'\ncols=[col1,col2,col3,col4,col5,col6]\n\nnogklabel=['PAC','SHO','PAS','DRI','DEF','PHY']\nnogkcol=['pace','shooting','passing','dribbling','defending','physic']\nnogkval=[nogkdata.loc[:,i] for i in nogkcol]\ngklabel=['DIV','HAN','KIC','REF','SPD','POS']\ngkcol=['gk_diving','gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning']\ngkval=[gkdata.loc[:,i] for i in gkcol]\n\nfor i in range(2):\n    fig=go.Figure()\n    for label, val, col in zip(nogklabel if i==0 else gklabel, nogkval if i==0 else gkval, cols):\n        fig.add_trace(go.Box(\n            y=val,\n            name=label,\n            boxpoints='outliers',\n            pointpos=-1.2,\n            marker_color=col,\n            line_color=col\n        ))\n    fig.update_layout(title_text=\"Non-GK Boxplot\" if i==0 else \"GK Boxplot\")\n    fig.show()","e6127ba3":"all_pos=['ST','LW','CF','RW','CAM','LM','CM','RM','LWB','CDM','RWB','LB','CB','RB','GK']\nsegs=[90,85,80,75,70,65,60,55,50,45]\nsta=pd.DataFrame(np.zeros(150).reshape((10,15)),index=segs,columns=all_pos)\n\ndef add(row):\n    for i in segs:\n        if row.overall>i:\n            seg=i\n            break\n    sta[row.player_positions][seg]+=1\n    \ndata.apply(add,axis=1)\nfig=go.Figure(data=go.Heatmap(\n    x=all_pos,\n    y=segs,\n    z=sta,\n    type='heatmap',\n    colorscale='Viridis'))\nfig.update_layout(title='Overall Rating Distribution Group by Player Position')\nfig.show()","cd273d68":"nogk_pos=['ST','LW','CF','RW','CAM','LM','CM','RM','LWB','CDM','RWB','LB','CB','RB']\nsegnames=['PAC','SHO','PAS','DRI','DEF','PHY']\nsegs=['pace','shooting','passing','dribbling','defending','physic']\nsegnames=segnames[::-1]\nsegs=segs[::-1]\nsta=pd.DataFrame(np.zeros(84).reshape((6,14)),index=segs,columns=nogk_pos)\n\nfor seg in segs:\n    for pos in nogk_pos:\n        sta[pos][seg]=sum(nogkdata[seg][nogkdata['player_positions']==pos])\/len(list(nogkdata[seg][nogkdata['player_positions']==pos]))\n        \nfig=go.Figure(data=go.Heatmap(\n    x=nogk_pos,\n    y=segnames,\n    z=sta,\n    type='heatmap',\n    colorscale='Viridis'))\nfig.update_layout(title='Average Level of Each Attribute Group by Player Position')\nfig.show()","2ba3058a":"from sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nattributes=['Height(cm)','Weight(kg)','Right Foot','Skill Moves',\n            'Crossing','Finishing','Heading Accuracy','Short Passing','Volleys',\n            'Dribbling','Curve','FK. Accuracy','Long Passing','Ball Control',\n            'Acceleration','Sprint Speed','Agility','Reactions','Balance',\n            'Shot Power','Jumping','Stamina','Strength','Long Shots',\n            'Aggression','Interceptions','Positioning','Vision','Penalties','Composure',\n            'Marking','Standing Tackle','Sliding Tackle']\n\nshow_data=nogkdata[nogkdata.overall>=80]\nX = show_data[attributes]\nY = show_data['rough_position']\n\npca = PCA(n_components=3)\ncomponents_pca = pca.fit_transform(X)\n\ntotal_var = pca.explained_variance_ratio_.sum() * 100\n\nfig = px.scatter_3d(\n    components_pca, x=0, y=1, z=2, color=Y,color_discrete_map={'ST':col1,'WF':col2,'MF':col3,'WB':col4,'CB':col5},\n    title=f'PCA (Total Explained Variance: {total_var:.2f}%)',\n    labels={'0': 'Dim 1', '1': 'Dim 2', '2': 'Dim 3'},\n    hover_name=show_data['short_name']#,opacity=0.8\n)\nfig.show()\nlda = LinearDiscriminantAnalysis(n_components=3)\ncomponents_lda = lda.fit_transform(X,Y)\n\nfig = px.scatter_3d(\n    components_lda, x=0, y=1, z=2, color=Y,color_discrete_map={'ST':col1,'WF':col2,'MF':col3,'WB':col4,'CB':col5},\n    title='LDA',\n    labels={'0': 'Dim 1', '1': 'Dim 2', '2': 'Dim 3'},\n    hover_name=show_data['short_name']#,opacity=0.8\n)\nfig.show()","201e8fc1":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(nogkdata[attributes], nogkdata['player_positions'], test_size=0.3)","9a666d55":"from sklearn.naive_bayes import GaussianNB\n\nbayes = GaussianNB()\nbayes.fit(X_train, y_train)\nprint(bayes.score(X_test, y_test))","cc1414cb":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train, y_train)\nprint(rfc.score(X_test, y_test))","c003db37":"fi=rfc.feature_importances_\n\nfig = go.Figure()\nsorted_indexes = fi.argsort()[::-1]\nfig = px.bar(pd.DataFrame(np.array(attributes)[sorted_indexes],fi[sorted_indexes]),\n             x=np.array(attributes)[sorted_indexes], y=fi[sorted_indexes],\n             color=fi[sorted_indexes],\n             hover_name=np.array(attributes)[sorted_indexes],\n             labels={'x':'','y':'Importance'}, height=500, opacity=0.8\n             )\nfig.update_layout(title='Feature Importances in Random Forest',xaxis=dict(tickangle=45))","d805c04d":"attr_labels=nogk_pos.copy()\nattr_labels.sort()\n\nrk=np.zeros(3*len(y_test)).reshape(3,len(y_test))\nrk=[[0 for i in range(len(y_test))] for j in range(3)]\npr=np.zeros(3*len(y_test)).reshape(len(y_test),3)\n\nprobas=rfc.predict_proba(X_test[attributes])\n\nfor row in range(len(probas)):\n    for index, prob in enumerate(probas[row]):\n        for i in range(3):\n            if prob > pr[row][i]:\n                pr[row][i]=prob\n                rk[i][row]=attr_labels[index]\n                break\n\nacc=0\n\nfor i in range(len(y_test)):\n    if y_test.iloc[i]==rk[0][i] or y_test.iloc[i]==rk[1][i] or y_test.iloc[i]==rk[2][i]:\n        acc+=1\n\nprint(acc\/len(y_test))","8539307f":"def rfc_predict_pos(attr_data):\n    \n    proba=rfc.predict_proba(attr_data)\n\n    rk=[0 for i in range(3)]\n    pr=[0 for i in range(3)]\n\n    for index, prob in enumerate(proba[0]):\n        for i in range(3):\n            if prob > pr[i]:\n                pr[i]=prob\n                rk[i]=index\n                break\n                \n    print('Most probable position: {}'.format(attr_labels[rk[0]]))\n    print('Potential positions: {} {}'.format(attr_labels[rk[1]],attr_labels[rk[2]]))","790e4889":"sofifa_id=207494\n\n'''\n#!RELEASE! !THIS! !ANNOTATION!\n\nsofifa_id=int(input('Please input a sofifa_id:\\n\nExamples: L. Messi:158023, J. Oblak:200389, F. de Jong:228702, J. Lingard:207494\\n\\n'))\n\n#!RELEASE! !THIS! !ANNOTATION!\n'''","4761d910":"def base_info(player):\n    if player.empty:\n        print(\"Can't find a player with sofifa_id = \"+str(sofifa_id))\n    else:\n        player=player.reset_index()\n        print()\n        print('Sofifa_id: '+str(player['sofifa_id'][0]))\n        print('Name: '+player['short_name'][0])\n        print('Age: '+str(player['age'][0]))\n        print('Nation: '+player['nationality'][0])\n        print('Club: '+player['club_name'][0])\n        print('Position: '+player['player_positions'][0])\n        print('Overall Rating: '+str(player['overall'][0]))\n        \nplayer=data[data['sofifa_id']==sofifa_id].reset_index()\nbase_info(player)","1698e198":"import matplotlib.patches as mpatches\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\n\ncolor1=(0,152\/255,158\/255,0.8)\ncolor2=(180\/255,215\/255,141\/255,0.8)\ncolor3=(255\/255,230\/255,122\/255,0.8)\ncolor4=(246\/255,172\/255,26\/255,0.8)\ncolor5=(216\/255,34\/255,13\/255,0.8)\ncolors=[color1,color2,color3,color4,color5]\n\ndef radar_plot(player):\n\n    player=player.reset_index()\n\n    angles=np.linspace(0,2*np.pi,6,endpoint=False)\n    angles=np.concatenate((angles, [0]))\n\n    if player.player_positions[0]!='GK':\n        attributes=player.loc[0,['pace','shooting','passing','dribbling','defending','physic','pace']]\n        labels=('PAC\\n{:d}'.format(int(player.loc[0,'pace'])),\n                'SHO\\n{:d}\\n'.format(int(player.loc[0,'shooting'])),\n                'PAS\\n{:d}\\n'.format(int(player.loc[0,'passing'])),\n                'DRI\\n{:d}'.format(int(player.loc[0,'dribbling'])),\n                '\\nDEF\\n{:d}'.format(int(player.loc[0,'defending'])),\n                '\\nPHY\\n{:d}'.format(int(player.loc[0,'physic'])),\n                'PAC\\n{:d}'.format(int(player.loc[0,'pace'])))\n    else:\n        attributes=player.loc[0,['gk_diving','gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning','gk_diving']]\n        labels=('DIV\\n{:d}'.format(int(player.loc[0,'gk_diving'])),\n                'HAN\\n{:d}\\n'.format(int(player.loc[0,'gk_handling'])),\n                'KIC\\n{:d}\\n'.format(int(player.loc[0,'gk_kicking'])),\n                'REF\\n{:d}'.format(int(player.loc[0,'gk_reflexes'])),\n                '\\nSPD\\n{:d}'.format(int(player.loc[0,'gk_speed'])),\n                '\\nPOS\\n{:d}'.format(int(player.loc[0,'gk_positioning'])),\n                'DIV\\n{:d}'.format(int(player.loc[0,'gk_diving'])))\n\n    fig=plt.figure(figsize=(6,6))\n    rect0 = [0, 0, 1, 1]\n    rect1 = [0.00005, 0.00005, 0.9999, 0.9999]\n    rect2 = [0.1, 0.1, 0.8, 0.8]\n    rect3 = [0.2, 0.2, 0.6, 0.6]\n    rect4 = [0.3, 0.3, 0.4, 0.4]\n    rect5 = [0.4, 0.4, 0.2, 0.2]\n\n    rects=[rect1,rect2,rect3,rect4,rect5]\n\n    for rect,col in zip(rects,colors):\n        bk=plt.axes(rect,projection='polar')\n        bk.fill(angles,[1,1,1,1,1,1,1],color=col)\n        bk.set_ylim(0,1)\n        bk.axis('off')\n\n    rdp=plt.axes(rect0,projection='polar')\n    rdp.plot(angles,attributes,color='#222222',linestyle=\"-\",lw=2)\n    rdp.fill(angles,attributes,color='#222222',alpha=0.3)\n    rdp.set_thetagrids(angles\/np.pi*180,labels,fontsize=13)\n    rdp.set_title(player.short_name[0],fontsize=20)\n    rdp.patch.set_alpha(0)\n    rdp.set_rticks([])\n    rdp.set_ylim(0,100)\n    #rdp.axis('off')\n    plt.show()\n    \nradar_plot(player)","fdd0c9e5":"def str_wea(player):\n    nearby_data=data[(data.rough_position==player.rough_position[0])\n                     &(abs(data.overall-player.overall[0])<=5)\n                     &(data.sofifa_id!=player.sofifa_id[0])]\n\n    comp_attr=[i for i in attributes if i not in ['Height(cm)','Weight(kg)','Right Foot','Skill Moves']]\n\n    rank=pd.DataFrame(np.zeros(len(comp_attr)).reshape(1,-1),columns=comp_attr)\n    for attr in comp_attr:\n        rank[attr][0]=sum(nearby_data.apply(lambda row: 1 if row[attr]>player[attr][0] else 0,axis=1))\n    rank=rank.apply(lambda col: col\/len(nearby_data),axis=0)\n    sorted_rank=rank.loc[0,:].argsort()\n\n    strength,weakness=[],[]\n    for attr in np.array(comp_attr)[sorted_rank]:\n        if (rank.loc[0,attr]<=0.10 or len(strength)<3) and not np.isnan(player[attr][0]):\n            strength.append(rank[attr])\n    for attr in np.array(comp_attr)[sorted_rank[::-1]]:\n        if (rank.loc[0,attr]>=0.90 or len(weakness)<3) and not np.isnan(player[attr][0]):\n            weakness.append(rank[attr])\n    strength=pd.DataFrame(strength).T.apply(lambda col:1-col,axis=0)\n    weakness=pd.DataFrame(weakness).T\n\n    str_x=pd.concat([strength, 1-strength], axis=0).T\n    str_x.columns=['over','beneath']\n    str_x['over']=pd.to_numeric(100*str_x['over']).round(0).astype(int)\n    str_x['beneath']=pd.to_numeric(100*str_x['beneath']).round(0).astype(int)\n    str_x=np.array(str_x)\n    str_y=list(strength.columns)\n    wea_x=pd.concat([weakness, 1-weakness], axis=0).T\n    wea_x.columns=['over','beneath']\n    wea_x['over']=pd.to_numeric(100*wea_x['over']).round(0).astype(int)\n    wea_x['beneath']=pd.to_numeric(100*wea_x['beneath']).round(0).astype(int)\n    wea_x=np.array(wea_x)\n    wea_y=list(weakness.columns)\n\n    colors=['#00C12B','#F76F87']\n    top_labels=['Stronger then','Weaker then']\n    titles=['Strength','Weakness']\n\n    for t in range(2):\n        if t==1:\n            colors=colors[::-1]\n            top_labels=top_labels[::-1]\n        fig = go.Figure()\n        x_data,y_data=[str_x,wea_x][t],[str_y,wea_y][t] \n        for i in range(0, len(x_data[0])):\n            for xd, yd in zip(x_data, y_data):\n                fig.add_trace(go.Bar(\n                    x=[xd[i]], y=[yd],\n                    orientation='h',\n                    marker=dict(color=colors[i],opacity=0.8,\n                        line=dict(color='rgb(248, 248, 249)'))))\n\n        fig.update_layout(\n            xaxis=dict(\n                showgrid=False,\n                showline=False,\n                showticklabels=False,\n                zeroline=False,\n                domain=[0.1, 1]\n            ),\n            yaxis=dict(\n                showgrid=False,\n                showline=False,\n                showticklabels=False,\n                zeroline=False,\n            ),\n            barmode='stack',\n            paper_bgcolor='rgb(248, 248, 255)',\n            plot_bgcolor='rgb(248, 248, 255)',\n            showlegend=False,\n        )\n\n        annotations = []\n\n        for yd, xd in zip(y_data, x_data):\n            annotations.append(dict(xref='paper', yref='y',\n                                    x=0.09, y=yd,\n                                    xanchor='right',\n                                    text=str(yd)+' ({})'.format(str(int(player.loc[0,yd]))),\n                                    font=dict(family='Arial',size=15,\n                                              color='rgb(67, 67, 67)'),\n                                    showarrow=False))\n\n            space = 0\n            for i in range(len(xd)):\n                    annotations.append(dict(xref='x', yref='y',\n                                            x=space + (xd[i]\/2), y=yd,\n                                            text=str(xd[i]) + '%',\n                                            font=dict(family='Arial',size=15,\n                                                      color='rgb(248, 248, 255)'),\n                                            showarrow=False))\n                    if yd == y_data[-1]:\n                        annotations.append(dict(xref='x', yref='paper',\n                                                x=space + (xd[i]\/2), y=1+0.7\/len(y_data),\n                                                text=top_labels[i],\n                                                font=dict(family='Arial',size=15,\n                                                          color='rgb(67, 67, 67)'),\n                                                showarrow=False))\n                    space += xd[i]\n\n        fig.update_layout(annotations=annotations,title=titles[t]+' of {}'.format(str(player.short_name[0])),\n                          width=990, height=40*len(y_data)+110,\n                          margin=dict(l=80, r=0, b=10, t=100, autoexpand=True),font=dict(size=20))\n\n        fig.show()\n        \nstr_wea(player)","512acdbe":"typ='D'\n\n'''\n#!RELEASE! !THIS! !ANNOTATION!\n\ntyp=input('If you want to type in your own data, then type in \"O\" to continue.\\n\nIf you want to use the default data, then type in \"D\".\\n\\n')\n        \n#!RELEASE! !THIS! !ANNOTATION!\n'''","68c8e44e":"if typ=='D':\n    user_attr=pd.DataFrame(np.array([np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 180, 60, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,\n        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 4, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,\n        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,\n        60, 50, 40, 60, 60, 55, 30, 50, 50, 55, 50, 50, 50, 55, 55, 40, 40, 60, 40, 40, 50,\n        50, 65, 60, 50, 50, 40, 30, 20, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,\n        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,\n        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 3, np.nan]).reshape(1,-1),index=[0],columns=nogkdata.columns)\n    user_attr['short_name']='Lei Luo'\n    \nelse:\n    print('\\nPlease type in your attributes in the order of:')\n    user_attr=pd.DataFrame(index=[0],columns=nogkdata.columns)\n    user_attr['short_name'][0]=input('Name:\\n')\n    for attr in attributes:\n        user_attr[attr][0]=int(input('{}:\\n'.format(attr)))\n        \nuser_attr['pace']=int(0.45*user_attr['Acceleration']\n                      +0.55*user_attr['Sprint Speed'])\nuser_attr['shooting']=int(0.05*user_attr['Positioning']\n                          +0.45*user_attr['Finishing']\n                          +0.20*user_attr['Long Shots']\n                          +0.05*user_attr['Penalties']\n                          +0.20*user_attr['Shot Power']\n                          +0.05*user_attr['Volleys'])\nuser_attr['passing']=int(0.35*user_attr['Short Passing']\n                         +0.20*user_attr['Vision']\n                         +0.20*user_attr['Crossing']\n                         +0.15*user_attr['Long Passing']\n                         +0.05*user_attr['Curve']\n                         +0.05*user_attr['FK. Accuracy'])\nuser_attr['dribbling']=int(0.35*user_attr['Dribbling']\n                           +0.35*user_attr['Ball Control']\n                           +0.10*user_attr['Agility']\n                           +0.05*user_attr['Balance']\n                           +0.10*user_attr['Reactions']\n                           +0.05*user_attr['Composure'])\nuser_attr['defending']=int(0.30*user_attr['Marking']\n                           +0.30*user_attr['Standing Tackle']\n                           +0.20*user_attr['Interceptions']\n                           +0.10*user_attr['Heading Accuracy']\n                           +0.10*user_attr['Sliding Tackle'])\nuser_attr['physic']=int(0.50*user_attr['Strength']\n                        +0.25*user_attr['Stamina']\n                        +0.20*user_attr['Aggression']\n                        +0.05*user_attr['Jumping'])","81da1b72":"rfc_predict_pos(user_attr[attributes])\nradar_plot(user_attr)","41319a4c":"self=user_attr\nmin_dis=-1\nmin_id=0\n\ndef find_sim(row):\n    global min_dis,min_id\n    dis=np.linalg.norm(row[attributes]-self.loc[0,attributes])\n    if dis!=0 and (dis<min_dis or min_dis==-1):\n        min_dis=dis\n        min_id=row.sofifa_id\n\ndef gk_find_sim(row):\n    global min_dis,min_id\n    gk_attr=['Height(cm)','Weight(kg)','Right Foot','gk_diving','gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning']\n    dis=np.linalg.norm(row[gk_attr]-self.loc[0,gk_attr])\n    if dis!=0 and (dis<min_dis or min_dis==-1):\n        min_dis=dis\n        min_id=row.sofifa_id\n\nnogkdata.apply(find_sim,axis=1)\nsim_player=nogkdata[nogkdata['sofifa_id']==min_id]\nprint('Similar Player Info:')\nbase_info(sim_player)\nradar_plot(sim_player)","2e179d04":"self=user_attr\nmax_cos=-1\nmax_id=0\n\ndef find_idol(row):\n    global max_cos,max_id\n    vector1=row[attributes]\n    vector2=self.loc[0,attributes]\n    cos=np.dot(vector1,vector2)\/(np.linalg.norm(vector1)*(np.linalg.norm(vector2)))\n    if cos!=1 and cos>max_cos:\n        max_cos=cos\n        max_id=row.sofifa_id\n\nshow_data.apply(find_idol,axis=1)\nidol_player=nogkdata[nogkdata['sofifa_id']==max_id]\nprint('Idol Player Info:')\nbase_info(idol_player)\nradar_plot(idol_player)","bc05cb63":"base_info(player)\nradar_plot(player)\n\nself=player\nmin_dis=-1\nmin_id=0\n\nif player['player_positions'][0]!='GK':\n    nogkdata.apply(find_sim,axis=1)\n    sim_player=nogkdata[nogkdata['sofifa_id']==min_id]\nelse:\n    gkdata.apply(gk_find_sim,axis=1)\n    sim_player=gkdata[gkdata['sofifa_id']==min_id]\n    \nprint('\\nSimilar Player of {}:'.format(str(player.short_name[0])))\nbase_info(sim_player)\nradar_plot(sim_player)\n\nstr_wea(player)","ded97db6":"Random forest improves the accuracy to about 70%. To be honest, in comparision with deep neural networks, this isn't a good performance either. But RFC is rather convenient, which is an advantage.\n\nWe did not try neural networks in this notebook. In fact, the PCA in the third part only explains less than 80% of the variance. This means that if you want to achieve higher accuracy, high-dimensional input is inevitable.","3c73b024":"The y coordinate of the second picture are the basic attributes of the player, and the color of the square represents the average level of that attribute at that position.","2881735b":"## \u2162. Feature Engineering\n\nHere we use PCA(Principal Component Analysis) and LDA(Linear Discriminant Analysis) separately to find the feature of various attributes. \n\nUsing the top-3 features, we project the data of players whose overall rating is higher than 80 into a three-dimensional space to see their distribution.\n\nEnlarging the projection map of LDA, we can easily find some players who are good at playing multiple positions in those outliers, like Fernandinho, Javi Mart\u00ednez and Thomas M\u00fcller.","f514533d":"Finally, let\u2019s take a whole look at the performance of the selected player.","66ce9dc7":"##### That's all. Thank you for reading, and welcome to improve the code on my basis.\n\n##### Any comments and suggestions will be appreciated.","1735e330":"We can also find idol players for you to learn from.\n\nThis recommendation is based on the cosine distance, which return the closest player whose overall rating is not less than 80.","b0d55aa7":"## \u2163. Classifier\n\nIn this part, we will use Naive Bayes and Random Forest to classify players in different positions.\n\nActually, I also tried the support vector machine at the beginning, but it was too slow in the condition of large amounts as well as multi-category of data, driving me crazy.\n\nWe need to divide the training set and test set first.","6c5fff6e":"Then draw a radar plot of the chosen player to show his basic attributes.","b1acc6a8":"# Find Your Idols: Clustering and Neighbor Analysis\n\nFind your favorite star from the FIFA-21 data set and analyze his strengths and weaknesses\uff01\n\n![FIFA21](https:\/\/nimg.ws.126.net\/?url=http%3A%2F%2Fdingyue.ws.126.net%2F2020%2F0619%2Fb596f42bj00qc62tw0048c000su00g0m.jpg&thumbnail=650x2147483647&quality=80&type=jpg)\n\nWith the help of machine learning and feature engineering, you can predict the position of each player on the court, and find the correlation among various attributes. In addition, you are free to customize your own player and find an idol player to learn from.\n\n#### Caution: \nSince the code on kaggle cannot directly input your own data, \n**I strongly recommend that you copy this notebook to your own notebook, run the code inside the annotation of Part V**\nto try your own data and enjoy yourself\uff01\n\nThis notebook will proceed in the following order:\n\n### \u2160. Data Cleaning\n### \u2161. Descriptive Statistics\n### \u2162. Feature Engineering\n### \u2163. Classifier\n### \u2164. Neighbor Analysis and Display\n\nWish you a pleasant jouney in FIFA21 data set!","2b9d8b60":"The next two heat maps show the difference in data among players in different positions. \n\nThe x coordinate is the player's position. The y coordinate of the first picture is the player's overall rating, and the color of the square represents the number of people with that overall rating at that position.","2f629874":"If we allow the random forest to give the three most likely answers, the accuracy rate can be increased to more than 80%.","5ab71f7b":"## \u2164. Neighbor Analysis and Display\n\nThis part is the most interesting among all! You can find your favorite player here, analyze his strength and weakness. You can also input your own attributes to see your performance in FIFA-21.\n\n#### Caution: \nSince the code on kaggle cannot directly input your own data, \n**I strongly recommend that you copy this notebook to your own notebook, run the code inside the annotation**\nto try your own data and enjoy yourself\uff01\n\nEach player in the data set is uniquely identified by a sofa_id. Please enter a sofa_id to continue.\n\nThe sofa_id of some famous players are as follows:\n\nFW:\n\nL. Messi: 158023\n\nC. Ronaldo: 20801\n\nLewandowski: 188545\n\nNeymar Jr: 190871\n\nK. Mbapp\u00e9: 231747\n\nMF:\n\nK. De Bruyne: 192985\n\nF. de Jong: 228702\n\nJ. Lingard: 207494\n\nJ. Kimmich: 212622\n\nT. Kroos: 182521\n\nDF:\n\nV. van Dijk: 203376\n\nL. Bonucci: 184344\n\nAzpilicueta: 184432\n\nD. Alaba: 197445\n\nSergio Ramos: 155862\n\nGK:\n\nJ. Oblak: 200389\n\nM. ter Stegen: 192448\n\nT. Courtois: 192119\n\nM. Neuer: 167495\n\nDe Gea: 193080","f731393b":"Using naive bayes to classify, we got an accuracy of 60%. Not satisfying enough, is it?","670a528c":"In order to make the subsequent work more smoothly, I set the player's position as the first position in the column 'player_positions', and calculated the fuzzy position for each player, including:\n\nST, CF -> ST\n\nLW, RW, LM, RM -> WF\n\nCAM, CDM, CM -> CM\n\nLWB, RWB, LB, RB -> WB\n\nCB -> CB\n\nGK -> GK\n\nThis transition played a role in the subsequent judgment of similar players.\n\nI also set up a new column 'Right Foot', using a number [-5,5] to indicate how much the player's right foot is stronger than the left foot. For example, Messi\u2019s \u2018Right Foot\u2019 is -1, while Ronaldo\u2019s is 1.\n\nA tough thing is that, in the original data set, the data in column 'Marking' is empty. I had to use the column 'DEF' to roughly estimate the missing value in 'Marking'.","7a6e6775":"Next, we will analyze the strengths and weaknesses of this player.\n\nWe select all players whose fuzzy position is the same as this player and whose overall rating differs within 5 from this player. Then, we calculate the ranking of each attribute of this player among the selected players, choosing the attribute with the high ranking as the strength and the one with the low ranking as the weakness.\n\nFinally, in the bar plot, we can see the percentage of similar players that this player is greater than, as well as the percentage of similar players that this player is weaker then.","2d3fabe9":"Devide data into two groups: gkdata and nogkdata.","957bcf9f":"## \u2161. Descriptive Statistics\n\nIn this part, plots are drawn to describe the whole data set's feature.\n\nLet us see how many players are in each position at the beginning.\n\nIt is shown that CB ranks first, while CF, LWB, and RWB are relatively fewer. The previous fuzzy position seems reasonable.","410865e5":"We can also find the player most similar to you in the data set, according to the attributes you input.\n\nIt is worth noting that this recommendation is based on Euclidean distance.","374accbe":"Have a look at feature importances in random forest. 'Sliding Tackle' weighs the most, while 'Skill Moves' has little effect.","c82145f4":"Now we define a position prediction function. It will be used in the next part.","ab58c454":"Most inspiring part comes! Feel free to customize your own player now, or you can input 'D' to use the default data (which describes the author of this notebook).\n\nAccording to the formula, the system can calculate your basic attributes, such as shooting, defending, etc.","a6bdc518":"For non-GK players and GK players, draw a box plot separately to view the distribution of their basic attributes.\n\nWe can see the wide distribution of the two attributes of shooting and defense. The speed of goalkeepers are generally slower.","83798eeb":"## \u2160. Data Cleaning\n\nData Cleaning is a necessary part before analysis or mining. In this part, we drop or fix illegal data, and transform some data into a better format for further analysis.\n\nFirst, let's import the FIFA-21 data set and take a rough view of it. Note that the column names are long, so here I have shortened some of them. "}}