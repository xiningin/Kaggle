{"cell_type":{"b55d3e4e":"code","00fe2278":"code","e112d570":"code","68d006f1":"code","47de9e03":"code","15511882":"code","ce043389":"code","f4445812":"code","8260cd19":"code","36d3bd62":"code","c5b357d3":"code","70d3e5de":"code","aac3288e":"code","179a0cb3":"code","3ad18db7":"code","c4032deb":"code","59a2b0ab":"code","63739690":"code","f0cb6b07":"code","ad99cb7a":"code","c980601a":"code","d6cbb869":"code","4a0e5dc4":"code","b275d57e":"code","3c84ca99":"code","9e5a781b":"code","4ad93787":"code","1fddfe6a":"code","fba4363b":"code","44be3c74":"code","ea63c918":"code","6e7e99b3":"code","2d9a9a09":"code","0c03a431":"code","31f7cb33":"code","47914005":"code","116c532d":"code","c2d165be":"code","e78efff8":"code","82706539":"markdown","adde311c":"markdown","04307d0b":"markdown","2ded6d3e":"markdown","8d5d8185":"markdown","37a3d067":"markdown","b911121c":"markdown","02fefaa5":"markdown","1ccab6fa":"markdown","0ee5a583":"markdown","ab64f94c":"markdown","21beaba2":"markdown","c6b6b6c0":"markdown","674537f7":"markdown","6e97ec6f":"markdown","a07d0bd6":"markdown","6267cfb4":"markdown","5df799a4":"markdown","f719112c":"markdown","404decb6":"markdown","8031a2e0":"markdown"},"source":{"b55d3e4e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom matplotlib.ticker import FormatStrFormatter \nimport plotly.graph_objects as go\nimport plotly.express as exp ","00fe2278":"netflix_data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\nnetflix_data","e112d570":"netflix_data.columns","68d006f1":"netflix_data.info()","47de9e03":"#Identificando quantos valores n\u00falos cada coluna possui\nnetflix_data.isnull().sum()","15511882":"netflix_data = netflix_data.drop(labels=['show_id'], axis=1)","ce043389":"## add new features in the dataset\nnetflix_data[\"date_added\"] = pd.to_datetime(netflix_data['date_added'])\nnetflix_data['year_added'] = netflix_data['date_added'].dt.year\nnetflix_data['month_added'] = netflix_data['date_added'].dt.month","f4445812":"netflix_data['season_count'] = netflix_data.apply(\n    lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\",\n     axis = 1)\n\nnetflix_data['duration'] = netflix_data.apply(\n    lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\",\n     axis = 1)","8260cd19":"netflix_data['duration'] = pd.to_numeric(netflix_data['duration'].replace(\"\", np.NaN))\nnetflix_data['season_count'] = pd.to_numeric(netflix_data['season_count'].replace(\"\", np.NaN))\n","36d3bd62":"netflix_data.head()","c5b357d3":"movie = netflix_data.filter(items=['type', 'year_added']).loc[netflix_data['type'] == 'Movie'].dropna()\ntv_show = netflix_data.filter(items=['type', 'year_added']).loc[netflix_data['type'] == 'TV Show'].dropna()","70d3e5de":"fig = go.Figure(data=[go.Pie(labels=['Filmes', 'Programas de TV'], values= [movie['type'].count(),\n                                                                            tv_show['type'].count()],\n                             textinfo='label+percent')], layout=go.Layout(title=\"Divis\u00e3o do conte\u00fado\"))\nfig.show()","aac3288e":"moviesByYearAdded = movie['year_added'].value_counts().reset_index().rename(columns={'year_added': 'count', 'index': 'year'})\nmoviesByYearAdded = moviesByYearAdded.sort_values(by=['year'], ascending=True)\n\ntvShowByYearAdded = tv_show['year_added'].value_counts().reset_index().rename(columns={'year_added': 'count', 'index': 'year'})\ntvShowByYearAdded = tvShowByYearAdded.sort_values(by=['year'], ascending=True)","179a0cb3":"moviePlot = go.Scatter(x=moviesByYearAdded['year'], y=moviesByYearAdded['count'], name = \"Movie\")\ntvshowPlot = go.Scatter(x=tvShowByYearAdded['year'], y = tvShowByYearAdded['count'], name = \"TV Show\")\n\n\nlayout = go.Layout(\n    title = \"Crescimento dos t\u00edtulos baseado no seu tipo ao longo dos anos\",\n    xaxis_title = \"Anos\",\n    yaxis_title = \"Quantidade\",\n)\n\nfig = go.Figure(data = [moviePlot, tvshowPlot] , layout = layout)\nfig.show()\n","3ad18db7":"duration_movie = netflix_data['duration'].dropna()","c4032deb":"duration_movie.describe(include='all')","59a2b0ab":"print(\"Dura\u00e7\u00e3o total: \", round(duration_movie.sum()\/60,2), \"horas\")","63739690":"fig = exp.histogram(netflix_data['duration'], x=\"duration\", title = \"Quantidade de titulos por intervalo de dura\u00e7\u00e3o\" )\nfig.update_layout(\n    xaxis_title = \"dura\u00e7\u00e3o\",\n    yaxis_title = \"quantidade\",\n)\nfig.show()","f0cb6b07":"tvshow_duration = netflix_data['season_count'].dropna()","ad99cb7a":"tvshow_duration.describe(include='all')","c980601a":"print(\"Dura\u00e7\u00e3o total: \", round(tvshow_duration.sum(),2), \"temporadas\")","d6cbb869":"fig = exp.histogram(netflix_data['season_count'], x = \"season_count\",\n                    title = \"Quantidade de programas de TV por n\u00famero de temporadas\")\nfig.update_layout(\n    xaxis_title = \"temporadas\",\n    yaxis_title = \"quantidade\",\n)\nfig.show()","4a0e5dc4":"titlesByRating = netflix_data.copy()\ntitlesByRating = titlesByRating['rating'].value_counts().reset_index().rename(columns={'index': 'rating', 'rating': 'count'})\ntitlesByRating\nfig, ax = plt.subplots(figsize=(10,10))\nsns.set_style(style=\"darkgrid\")\nax = sns.barplot(x=titlesByRating['rating'], y = titlesByRating['count'], data=titlesByRating)\nax.tick_params(labelsize=12) #Ajustando ticklabels para uma fonte maior. \nax.set_xlabel(\"Rating\", fontsize = 12)\nax.set_ylabel(\"Quantidade\", fontsize = 12)\nfig.suptitle(\"Quantidade de t\u00edtulos por classifica\u00e7\u00e3o\", fontsize = 16, y = 0.92)\nplt.show()","b275d57e":"'''\n    Essa fun\u00e7\u00e3o ir\u00e1 \"quebrar\" as Series que possuem m\u00faltiplos valores em suas linhas, transformando toda linha em valor \u00fanico\n    Dessa forma ser\u00e1 poss\u00edvel an\u00e1lisar, por exemplo, todos os poss\u00edveis diretores, atores, atrizes, etc.\n'''\ndef transformColumn(serie):\n  new_serie = []\n  for i in serie: \n   if (len(i) > 1): #Verifica se h\u00e1 mais de um autor por t\u00edtulo\n     for j in i:\n       new_serie.append(j.strip()) #Insere individualmente cada diretor re\n   else:\n     new_serie.append(i[0])\n\n  new_serie = pd.Series(data=new_serie)\n  return new_serie\n","3c84ca99":"netflixDataCopy = netflix_data.copy()\ntitlesByCountry = netflix_data['country'].dropna()\n\ntitlesByCountry = titlesByCountry.apply(lambda x: x.split(\",\"))\ntitlesByCountry = transformColumn(titlesByCountry)\ntitlesByCountry = titlesByCountry.value_counts().reset_index().rename(columns={\"index\": \"country\", 0: \"count\"})[0:20]\n\n","9e5a781b":"fig = exp.bar(x=titlesByCountry['count'], y = titlesByCountry['country'], orientation='h',\n              data_frame=titlesByCountry,\n              color='country', title=\"T\u00edtulos por pa\u00eds\")\nfig.update_layout(dict(xaxis_title=\"quantidade\", yaxis_title=\"pa\u00edses\",\n                      ))\nfig.show()","4ad93787":"increaseTitlesNetflix = netflix_data.copy()\nincreaseTitlesNetflix = increaseTitlesNetflix.filter(items=['country', 'release_year'])\nincreaseTitlesNetflix = increaseTitlesNetflix.loc[(increaseTitlesNetflix['country'].isin(['Brazil', 'United States',\n                                                                                          'United Kingdom',\n                                                                                          'India']))]\n                                                                                        \n\nincreaseTitlesNetflix = increaseTitlesNetflix.dropna()\nincreaseTitlesNetflix = increaseTitlesNetflix.loc[increaseTitlesNetflix['release_year'] >= 2000]","1fddfe6a":"brazilianTitlesByReleaseYear = increaseTitlesNetflix.loc[increaseTitlesNetflix['country'] == 'Brazil']\n\nbrazilianTitlesByReleaseYear = brazilianTitlesByReleaseYear['release_year'].value_counts().reset_index().rename(\n    columns={'index': 'release_year', 'release_year': 'count'})\n\nbrazilianTitlesByReleaseYear = brazilianTitlesByReleaseYear.sort_values(by=['release_year'], ascending=True)\n","fba4363b":"UnitedStatesTitlesByReleaseYear = increaseTitlesNetflix.loc[increaseTitlesNetflix['country'] == 'United States']\n\nUnitedStatesTitlesByReleaseYear = UnitedStatesTitlesByReleaseYear['release_year'].value_counts().reset_index().rename(\n    columns={'index': 'release_year', 'release_year': 'count'})\nUnitedStatesTitlesByReleaseYear = UnitedStatesTitlesByReleaseYear.sort_values(by=['release_year'], ascending=True)\n","44be3c74":"UKTitlesByReleaseYear = increaseTitlesNetflix.loc[increaseTitlesNetflix['country'] == 'United Kingdom']\n\nUKTitlesByReleaseYear = UKTitlesByReleaseYear['release_year'].value_counts().reset_index().rename(\n    columns={'index': 'release_year', 'release_year': 'count'})\nUKTitlesByReleaseYear = UKTitlesByReleaseYear.sort_values(by=['release_year'], ascending=True)","ea63c918":"indiaTitlesByReleaseYear = increaseTitlesNetflix.loc[increaseTitlesNetflix['country'] == 'India']\n\nindiaTitlesByReleaseYear = indiaTitlesByReleaseYear['release_year'].value_counts().reset_index().rename(\n    columns={'index': 'release_year', 'release_year': 'count'})\nnetflix_data\nindiaTitlesByReleaseYear = indiaTitlesByReleaseYear.sort_values(by=['release_year'], ascending=True)\n","6e7e99b3":"unitedStatesPlot = go.Scatter(x = UnitedStatesTitlesByReleaseYear['release_year'],\n                                     y =UnitedStatesTitlesByReleaseYear['count'],\n                                     marker=dict(color='blue'),name = \"Estados Unidos\", mode = 'lines')\n\nbrazilPlot = go.Scatter(x = brazilianTitlesByReleaseYear['release_year'],\n                                     y =brazilianTitlesByReleaseYear['count'],\n                                     marker=dict(color='purple'),name = \"Brasil\", mode ='lines')\n\nukPlot = go.Scatter(x = UKTitlesByReleaseYear['release_year'],\n                                     y = UKTitlesByReleaseYear['count'],\n                                     marker=dict(color='red'),  name = \"Reino Unido\", mode = 'lines')\n\nindiaPlot = go.Scatter(x = indiaTitlesByReleaseYear['release_year'],\n                                     y = indiaTitlesByReleaseYear['count'],\n                                     marker=dict(color='gold'), name = \"India\", mode = 'lines')\n\ndataPlot = [unitedStatesPlot, brazilPlot, ukPlot, indiaPlot]\n\nlayout = go.Layout(\n    title = 'Crescimento dos t\u00edtulos por pa\u00eds ao longo dos anos',\n    xaxis_title = \"Anos\",\n    yaxis_title = \"Quantidade\", \n    xaxis = dict(tickvals=[2000, 2002, 2005, 2008, 2010, 2012, 2015, 2018, 2020]),\n)\nfig = go.Figure(data=dataPlot, layout=layout)\n\nfig.show()","2d9a9a09":"#Prepara\u00e7\u00e3o da lista de diretores\ndirectors = netflix_data['director'].dropna()\n\ndirectors = directors.apply(lambda x : x.split(\",\"))\n\n#Respons\u00e1vel por transformar os elementos que s\u00e3o listas em novos elementos\nnew_serie = transformColumn(directors)\nnew_serie = new_serie.value_counts()\n\ndirectors_df = pd.DataFrame()\ndirectors_df['director'] = new_serie\ndirectors_df = directors_df.reset_index().rename(columns={'director': 'count', \"index\": \"director\"})\ndirectors_df = directors_df[0:30]\n","0c03a431":"bar1 = go.Bar(x = directors_df['director'], y=directors_df['count'],  orientation='v', \n               marker={'color': 'coral'})\n\nlayout = go.Layout(\n    title=\"Quantidade de t\u00edtulos por diretor\",\n    xaxis_title= \"Diretores\",\n    yaxis_title = \"Quantidade\",\n)\n\nfig = go.Figure(data= bar1, layout=layout)\nfig.show()","31f7cb33":"gender = netflix_data['listed_in']\ngender = gender.apply(lambda x: x.split(\",\"))\ngender = transformColumn(gender)\ngender = gender.value_counts().reset_index().rename(columns={\"index\": \"gender\", 0: \"count\"})[0:20]\n","47914005":"plot = go.Bar(x=gender['count'], y=gender['gender'], orientation='h')\nlayout = go.Layout(\n    title = \"T\u00edtulos por g\u00eanero\",\n    xaxis_title = \"quantidade\",\n    yaxis_title = \"g\u00eaneros\",\n  \n)\nfig = go.Figure(data=plot, layout=layout)\nfig.update_yaxes(autorange='reversed')\nfig.show()","116c532d":"def actorsByCountryTrace(country):\n  actorsData = netflix_data.copy()\n  aux = pd.Series(dtype='object')\n  actorsData = actorsData.filter(items=['cast', 'country', 'type']).dropna()\n  \n  actorsData = actorsData.loc[(actorsData['country'] == country) & (actorsData['type'] == \"Movie\")]\n \n  newActorsData = actorsData['cast'].apply(lambda x: x.split(\",\"))\n  \n  newActorsData = transformColumn(newActorsData)\n  newActorsData = newActorsData.value_counts().reset_index().rename(columns={\"index\": \"actor\", 0:'count'})[0:20]\n  \n  return go.Bar(x=newActorsData['count'], y = newActorsData['actor'],\n                orientation='h',marker=dict(color=\"#355070\"), name = \"\".format(country))","c2d165be":"traces = []\ncountries = ['United States', 'United Kingdom', 'India', 'Japan', 'Canada']\nCOLORS = ['moccasin', 'mediumpurple', 'darkblue', 'deepskyblue', 'antiquewhite']\n\nfor country in countries: \n  traces.append(actorsByCountryTrace(country))","e78efff8":"from plotly.subplots import make_subplots\nfig = make_subplots(rows = 2, cols= 3, subplot_titles=countries, horizontal_spacing=0.2, vertical_spacing=0.1)\n\nfig.add_trace(traces[0], row=1, col=1)\nfig.add_trace(traces[1], row=1, col=2)\nfig.add_trace(traces[2], row=1, col=3)\nfig.add_trace(traces[3], row=2, col=1)\nfig.add_trace(traces[4], row=2, col=2)\n\nfig.update_layout(height=1200, showlegend=False, title='Top 20 atores com mais filmes')\nfig.update_yaxes(autorange='reversed')\nfig.show()","82706539":"# Como s\u00e3o as dura\u00e7\u00f5es dos filmes e dos programas de TV na Netflix?\n","adde311c":"# Distribui\u00e7\u00e3o dos t\u00edtulos com base na classifica\u00e7\u00e3o","04307d0b":"## Identificando valores nulos no conjunto de dados ","2ded6d3e":"# Quantidade de t\u00edtulos por pa\u00eds","8d5d8185":"Ap\u00f3s visualizar rapidamente como \u00e9 composto nosso conjunto de dados, podemos extrair algumas informa\u00e7\u00f5es sobre ele rapidamente.","37a3d067":"Outras duas mudan\u00e7as que podem ser feitas dizem respeito a coluna ```duration```, nela temos a descri\u00e7\u00e3o do tempo sendo feita com valores em minutos ou com a quantidade de temporadas, por exemplo, \"90 min\" ou \"3 Seasons\", por\u00e9m, em termos de analise possuir esses dados no formato de ```string``` n\u00e3o \u00e9 vantajoso. E para tratar disso, utilizaremos os recursos: \n * ```apply()```: Possibilita aplicar uma fun\u00e7\u00e3o em um eixo do dataframe;\n * ```split()```: Vai dividir a string quando encontrar o caracter passado; \n\nA primeira mudan\u00e7a diz respeito a cria\u00e7\u00e3o de uma nova coluna: ```season_count```, ela conter\u00e1 apenas o valor n\u00famerico correspondente a  quantidade de temporadas de cada s\u00e9rie ou programa de TV. \n\nE a segunda mudan\u00e7a \u00e9 a remo\u00e7\u00e3o da unidade \"min\" na coluna ```duration```\n","b911121c":"### Programas de TV","02fefaa5":"Ap\u00f3s realizadas essas transforma\u00e7\u00f5es os valores das linhas nas colunas ```duration``` e  ```season_count``` ainda s\u00e3o ```strings``` e para que possamos mudar isso, utilizaremos a fun\u00e7\u00e3o do pandas: ```to_numeric()``` que ser\u00e1 respons\u00e1vel por transformar toda a coluna em valores n\u00famericos.\n\nAl\u00e9m disso, as posi\u00e7\u00f5es vazias dessa coluna est\u00e3o definidas como `strings` vazias e para facilitar o tratamento desses valores ausentes utilizaremos a fun\u00e7\u00e3o `replace()` para substituir esses valores por `NaN` e com isso poderemos remover os valores faltantes de forma mais simples. ","1ccab6fa":"## O que significa cada coluna?\n\n* ```show_id```: c\u00f3digo de identifica\u00e7\u00e3o de cada t\u00edtulo.\n* ```type```: identifica qual o tipo do t\u00edtulo, se \u00e9 um filme ou um programa de tv.\n* ```title```: nome do t\u00edtulo.\n* ```director```: diretor ou diretores do filme ou programa de TV.\n* ```cast```: elenco.\n* ```country```: pa\u00eds origem.\n* ```date_added```: data em que foi adicionado a Netflix.\n* ```release_year```: ano de lan\u00e7amento.\n* ```rating```: classifica\u00e7\u00e3o do t\u00edtulo\n* ```duration```: dura\u00e7\u00e3o em minutos para o caso dos filmes e em temporadas para os programas de TV. \n* ```listed_in```: categoria do t\u00edtulo.\n* ```description```: sinopse. \n","0ee5a583":"# Divis\u00e3o do conte\u00fado da Netflix\n\n","ab64f94c":"# Como foi o crescimentos dos t\u00edtulos em um conjunto de pa\u00edses? \n\nPara responder essa pergunta \u00e9 necess\u00e1rio definir um conjunto de pa\u00edses e uma escala de tempo para a an\u00e1lise. Ser\u00e3o avaliados 4 pa\u00edses dentro do intervalo de tempo de 2000 at\u00e9 2020. Sendo que ser\u00e1 considerado o ano de lan\u00e7amento.\n\nE colocaremos em foco 4 pa\u00edses:\n\n* Estados Unidos\n* India\n* Reino Unido\n* Brasil ","21beaba2":"# Quantidade de t\u00edtulos por diretor\n","c6b6b6c0":"# An\u00e1lise explorat\u00f3ria dos t\u00edtulos presentes na Netflix\n\nO objetivo desse mini-projeto \u00e9 a visualiza\u00e7\u00e3o e compreens\u00e3o do conjunto de dados em quest\u00e3o que representa os filmes e programas de TV dispon\u00edveis na Netflix.  \n\nEsse conjunto de dados foi obtido na plataforma Kaggle:\n\n\n*   https:\/\/www.kaggle.com\/shivamb\/netflix-shows\n\n\n\n\n\nPara que seja poss\u00edvel realizar essa an\u00e1lise, ser\u00e1 necess\u00e1rio utilizar um conjunto de ferramentas que auxilir\u00e3o em todo processo. S\u00e3o elas: \n\n* Pandas: biblioteca que possibilitar\u00e1 a manipula\u00e7\u00e3o e an\u00e1lise dos dados. \n\n* Plotly, Matplotlib, Seaborn: bibliotecas gr\u00e1ficas para visualiza\u00e7\u00e3o de dados.\n\n\n\n\n","674537f7":"O primeiro passo a ser dado \u00e9 fazer a leitura da nossa base de dados. Nesse caso, ela foi disponibilizada no formato '.csv' e a utilizaremos de forma local, ou seja, \u00e9 necess\u00e1rio fazer o upload do arquivo antes de executar as c\u00e9lulas do colab. ","6e97ec6f":"# Crescimento dos filmes e programas de TV ao longo dos anos.\n\nO crescimento ser\u00e1 analisado com base no ano em que foi adicionado ao catalogo da Netflix (`date_added`)","a07d0bd6":"# Quais s\u00e3o os g\u00eaneros presentes na Netflix?\n","6267cfb4":"# Atores com mais filmes na Netflix\n","5df799a4":"A primeira mudan\u00e7a constituir\u00e1 na remo\u00e7\u00e3o da coluna ```show_id```, isso porque n\u00e3o ser\u00e1 necess\u00e1rio manter identificadores \u00fanicos para esse caso. \n\n","f719112c":"### Filmes","404decb6":"# Prepara\u00e7\u00e3o dos dados\n\nNessa etapa, realizaremos transforma\u00e7\u00f5es que facilitar\u00e3o a an\u00e1lise dos dados, dentre elas a remo\u00e7\u00e3o de colunas desnecess\u00e1rias, tratamento de strings e datas, etc.","8031a2e0":"A coluna ```date_added``` que representa quando o t\u00edtulo foi adicionado no catalogo da Netflix, est\u00e1 no formato de ```string``` e para tornar esse campo mais f\u00e1cil de usar, realizaremos a convers\u00e3o para o tipo ```datetime```, usando da fun\u00e7\u00e3o do pandas: ```to_datetime()```\n\nAl\u00e9m disso, isolaremos tanto o m\u00eas quanto o ano em novas colunas do DataFrame.\n\n\n"}}