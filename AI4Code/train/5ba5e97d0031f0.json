{"cell_type":{"b3208ddc":"code","4969e86f":"code","6f46ef54":"code","12ef220a":"code","dad79510":"code","c38ed30b":"code","e61054de":"code","84e12de3":"code","dc0f3eef":"code","12233168":"markdown","8a0e38db":"markdown","a362a243":"markdown","75ae3a2d":"markdown","10f2c948":"markdown"},"source":{"b3208ddc":"!ls \/kaggle\/input\/drowsiness-detection","4969e86f":"import cv2, os\nimport numpy as np\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.image import imread\nimport tensorflow as tf \nfrom tensorflow import keras\nfrom tensorflow.keras import models, layers, Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom tensorflow.keras.applications import ResNet50\nfrom keras.applications.resnet50 import preprocess_input\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n","6f46ef54":"data_dir = '\/kaggle\/input\/drowsiness-detection'","12ef220a":"train_datagen = ImageDataGenerator(validation_split=0.3,\n                                   preprocessing_function=preprocess_input) # don't use rescale = 1.\/255\n\ntrain_generator = train_datagen.flow_from_directory( data_dir,\n                                                     target_size=(224,224),\n                                                     batch_size=100,\n                                                     shuffle=True,\n                                                     class_mode='binary',\n                                                     subset='training')\n\nvalidation_datagen = ImageDataGenerator(validation_split=0.3,\n                                        preprocessing_function=preprocess_input)\n\nvalidation_generator =  validation_datagen.flow_from_directory( data_dir,\n                                                                target_size=(224,224),\n                                                                batch_size=100,\n                                                                class_mode='binary',\n                                                                subset='validation')   ","dad79510":"model_res50 = Sequential()\n\nmodel_res50.add(ResNet50(\n    include_top=False,\n    pooling='avg',\n    weights='imagenet'\n    ))\n\nmodel_res50.add(Dense(1, activation='sigmoid'))\n\nmodel_res50.layers[0].trainable = False \n\nmodel_res50.summary()\n\n\nsteps_per_epoch_training = len(train_generator)\nsteps_per_epoch_validation = len(validation_generator)\n","c38ed30b":"model_res50.compile(optimizer='adam', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])\n\nhistory = model_res50.fit(\n    train_generator,\n    steps_per_epoch=steps_per_epoch_training,\n    validation_steps=steps_per_epoch_validation,\n    epochs=7,\n    validation_data=validation_generator,\n    verbose=1\n)","e61054de":"%matplotlib inline\n\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\n#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nacc=history.history['accuracy']\nval_acc=history.history['val_accuracy']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot(epochs, acc, 'r', \"Training Accuracy\")\nplt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\nplt.title('Training and validation accuracy')\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot(epochs, loss, 'r', \"Training Loss\")\nplt.plot(epochs, val_loss, 'b', \"Validation Loss\")\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","84e12de3":"model_res50.save('drowsines_model_ResNet50_Binary2.h5')","dc0f3eef":"img_array = cv2.imread('prediction\\s0030_01108_0_0_1_0_0_01.png', cv2.IMREAD_GRAYSCALE)\nbacktorgb = cv2.cvtColor(img_array, cv2.COLOR_GRAY2BGR)\nnew_array = cv2.resize(backtorgb, (image_size, image_size))\nX_input = np.array(new_array).reshape(1, image_size, image_size, 3)\n# plt.imshow(new_array)\nprediction = model.predict(X_input\/255.0)\nprediction[0]","12233168":"- We do not explicitly label the images \n-  ImageGenerator will read images from subdirectories, and automatically label them from the name of that subdirectory","8a0e38db":"## Image Data Generator and Data Augmentation\n\n- Things like rotating and flipping the existing images allows you to generate training data that is more varied, and can help the model generalize better ","a362a243":"- Let's see some images \n","75ae3a2d":"## Imports","10f2c948":"## Prediction"}}