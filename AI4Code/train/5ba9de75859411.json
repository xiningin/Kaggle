{"cell_type":{"4b90accf":"code","34144afd":"code","38c02390":"code","c54dfb8d":"code","fde9b45f":"code","c7f43973":"code","a03b1085":"code","aceb7a0f":"code","c9a3f377":"code","bb97c095":"code","039c3652":"code","923a1ae5":"markdown","aa0b5c9d":"markdown","22281e71":"markdown","e8ca43ff":"markdown","80e1edd8":"markdown","9b39efd1":"markdown"},"source":{"4b90accf":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom sklearn.model_selection import KFold\n\nfrom sklearn.ensemble import RandomForestRegressor","34144afd":"data = pd.read_csv('..\/input\/data-every-day-youtube-episodes\/youtube_data.csv')","38c02390":"data","c54dfb8d":"data.info()","fde9b45f":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop unused columns\n    df = df.drop(['Video', 'Video title'], axis=1)\n    \n    # Drop row with missing target value\n    missing_target_row = df[df['Subscribers'].isna()].index\n    df = df.drop(missing_target_row, axis=0).reset_index(drop=True)\n    \n    # Extract date features\n    df['Video publish time'] = pd.to_datetime(df['Video publish time'])\n    df['Video month'] = df['Video publish time'].apply(lambda x: x.month)\n    df['Video day'] = df['Video publish time'].apply(lambda x: x.day)\n    df = df.drop('Video publish time', axis=1)\n    \n    # Convert durations to seconds\n    df['Average view duration'] = pd.to_datetime(df['Average view duration']).apply(lambda x: (x.minute * 60) + x.second)\n    \n    # Split df into X and y\n    y = df['Subscribers']\n    X = df.drop('Subscribers', axis=1)\n    \n    return X, y","c7f43973":"X, y = preprocess_inputs(data)","a03b1085":"X","aceb7a0f":"y","c9a3f377":"rmses = []\nr2s = []\n\nkf = KFold(n_splits=5)\n\nfor train_idx, test_idx in kf.split(X):\n    X_train = X.iloc[train_idx, :]\n    X_test = X.iloc[test_idx, :]\n    y_train = y.iloc[train_idx]\n    y_test = y.iloc[test_idx]\n    \n    model = RandomForestRegressor()\n    model.fit(X_train, y_train)\n    \n    y_pred = model.predict(X_test)\n    \n    rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n    rmses.append(rmse)\n    \n    r2 = 1 - (np.sum((y_test - y_pred)**2) \/ np.sum((y_test - y_test.mean())**2))\n    r2s.append(r2)","bb97c095":"print(\"     RMSE: {:.2f}\".format(np.mean(rmses)))\nprint(\"R^2 Score: {:.5f}\".format(np.mean(r2s)))","039c3652":"plt.figure(figsize=(10, 10))\nsns.scatterplot(x=y_pred, y=y_test)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.xlim(0, 15)\nplt.ylim(0, 15)\nplt.title(\"Actual vs. Predicted Values\")\nplt.show()","923a1ae5":"# Preprocessing","aa0b5c9d":"# Task for Today  \n\n***\n\n## YouTube Subscriber Count Prediction  \n  \nGiven *data about Data Every Day YouTube videos*, let's try to predict the **number of subscribers** that will be generated from a given video.  \n  \nWe will use a random forest regression model to make our predictions.","22281e71":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/ojJDJYsqRpc","e8ca43ff":"# Results","80e1edd8":"# Training\/Validation","9b39efd1":"# Getting Started"}}