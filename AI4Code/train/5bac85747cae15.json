{"cell_type":{"c7914c10":"code","37f2130a":"code","9da85c06":"code","17a42623":"code","cb67e5bf":"code","a99adbe6":"code","1c4737c1":"code","f56b8797":"code","33fa4446":"code","f1e1af37":"code","6f98817c":"code","7c8a225e":"code","c07311b4":"code","533ce3e0":"code","bf9f8ba9":"code","24b7672a":"code","9386fba6":"code","12475ece":"code","ea8940ad":"code","f4fb25d9":"code","6c89123e":"code","c8cfbe7a":"code","2c826628":"code","70a5e99e":"code","b8d84edd":"code","5551b57b":"code","1543bdbd":"markdown","d8305564":"markdown","ddcdf475":"markdown","4a69b7d2":"markdown","6d7550b5":"markdown","232075a3":"markdown","9e6573bb":"markdown","4b70cc09":"markdown","71f335b9":"markdown","ccdbb857":"markdown","9fa67319":"markdown","2f11f74f":"markdown","6ba8542c":"markdown","2b63ed85":"markdown","c4554399":"markdown","84e0e336":"markdown"},"source":{"c7914c10":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37f2130a":"#making necessary imports\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport os.path","9da85c06":"holidays=pd.read_csv('..\/input\/store-sales-time-series-forecasting\/holidays_events.csv')\noil=pd.read_csv('..\/input\/store-sales-time-series-forecasting\/oil.csv')\nstores=pd.read_csv('..\/input\/store-sales-time-series-forecasting\/stores.csv')\ntest=pd.read_csv('..\/input\/store-sales-time-series-forecasting\/test.csv')\ntrain=pd.read_csv('..\/input\/store-sales-time-series-forecasting\/train.csv')\ntransactions=pd.read_csv('..\/input\/store-sales-time-series-forecasting\/transactions.csv')","17a42623":"test1=pd.read_csv('..\/input\/store-sales-time-series-forecasting\/test.csv') #creating another copy of test data which will be used later.","cb67e5bf":"#Merging all available datasets to perform exploratory data analysis\nm1=pd.merge(holidays,oil)\nm2=pd.merge(train,stores)\nm3=pd.merge(m2,transactions)\ndf=pd.merge(m3,m1,on=\"date\")","a99adbe6":"df.head()","1c4737c1":"df.describe()","f56b8797":"#Replacing the null values with the mean daily oil prices\ndf.loc[(df.dcoilwtico.isnull()),'dcoilwtico']=df.dcoilwtico.mean()","33fa4446":"#checking the dataset\ndf.info()","f1e1af37":"#Converting the date column from string to datetime dtype.\nfrom datetime import datetime\ndf['new_date']=pd.to_datetime(df['date'],format='%Y-%m-%d',errors='coerce')","6f98817c":"#Time Series plot of the sales data\nsns.lineplot(x='new_date',y='sales',data=df,ci=None,estimator='mean')","7c8a225e":"df[[\"year\", \"month\", \"day\"]] = df[\"date\"].str.split(\"-\", expand = True)\n\n\ndf['month'].replace(['01','02','03','04','05','06','07','08','09','10','11','12'],['Jan','Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec'],inplace=True)\ndf['month'] = pd.Categorical(df['month'],\n                                   categories=['Jan','Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec'],\n                                   ordered=True)\ndf['day'] = pd.Categorical(df['day'],categories=['01','02','03','04','05','06','07','08','09','10','11', '12', '14','15','16','17','18','19','20','21','22','23', '24', '25', '26', '27','28','29','30','31'],ordered=True)\n        ","c07311b4":"#plotting the monthwise sales trend\nf,ax=plt.subplots(1,2,figsize=(25,15))\nsns.lineplot(x='year',y='sales',data=df,ci=None,estimator='mean',ax=ax[0])\nsns.lineplot(x='month',y='sales',data=df,ci=None,estimator='mean',ax=ax[1])","533ce3e0":"df['family'].nunique()","bf9f8ba9":"df['family'].replace(['AUTOMOTIVE', 'HARDWARE', 'LAWN AND GARDEN', 'PLAYERS AND ELECTRONICS'], 'Tools', inplace = True)\ndf['family'].replace(['BEAUTY', 'LINGERIE', 'LADIESWEAR','PERSONAL CARE','CELEBRATION','MAGAZINES','BOOKS', 'BABY CARE'], 'LifeStyle', inplace = True)\ndf['family'].replace(['HOME APPLIANCES','HOME AND KITCHEN I', 'HOME AND KITCHEN II','HOME CARE','SCHOOL AND OFFICE SUPPLIES'], 'Home', inplace=True)\ndf['family'].replace([ 'GROCERY II', 'PET SUPPLIES','SEAFOOD','LIQUOR,WINE,BEER'], 'Food', inplace=True)\ndf['family'].replace(['DELI', 'EGGS'], 'Daily', inplace=True)","24b7672a":"#Preparing the train and test datasets which would be used for prediction later\n\ntrain['family'].replace(['AUTOMOTIVE', 'HARDWARE', 'LAWN AND GARDEN', 'PLAYERS AND ELECTRONICS'], 'Tools', inplace = True)\ntrain['family'].replace(['BEAUTY', 'LINGERIE', 'LADIESWEAR','PERSONAL CARE','CELEBRATION','MAGAZINES','BOOKS', 'BABY CARE'], 'LifeStyle', inplace = True)\ntrain['family'].replace(['HOME APPLIANCES','HOME AND KITCHEN I', 'HOME AND KITCHEN II','HOME CARE','SCHOOL AND OFFICE SUPPLIES'], 'Home', inplace=True)\ntrain['family'].replace([ 'GROCERY II', 'PET SUPPLIES','SEAFOOD','LIQUOR,WINE,BEER'], 'Food', inplace=True)\ntrain['family'].replace(['DELI', 'EGGS'], 'Daily', inplace=True)\n\ntest['family'].replace(['AUTOMOTIVE', 'HARDWARE', 'LAWN AND GARDEN', 'PLAYERS AND ELECTRONICS'], 'Tools', inplace = True)\ntest['family'].replace(['BEAUTY', 'LINGERIE', 'LADIESWEAR','PERSONAL CARE','CELEBRATION','MAGAZINES','BOOKS', 'BABY CARE'], 'LifeStyle', inplace = True)\ntest['family'].replace(['HOME APPLIANCES','HOME AND KITCHEN I', 'HOME AND KITCHEN II','HOME CARE','SCHOOL AND OFFICE SUPPLIES'], 'Home', inplace=True)\ntest['family'].replace([ 'GROCERY II', 'PET SUPPLIES','SEAFOOD','LIQUOR,WINE,BEER'], 'Food', inplace=True)\ntest['family'].replace(['DELI', 'EGGS'], 'Daily', inplace=True)","9386fba6":"#Plotting the sales using bar-plot w.r.t to 'family' categories.\n\nd=df.groupby('family')['sales'].mean().sort_values(ascending=False)\nd=pd.DataFrame(d)\ndf.sales= pd.to_numeric(df.sales, errors='coerce')\nax,f=plt.subplots(figsize=(25,15))\nsns.barplot(x='sales',y=d.index,data=d,ax=None,ci=None)","12475ece":"#Plot of sales w.r.t store number\n\ns=df.groupby('store_nbr')['sales'].mean().sort_values(ascending=False)\ns=pd.DataFrame(s)\nax,f=plt.subplots(figsize=(25,15))\nsns.barplot(x=s.index,y='sales',data=s,ax=None,ci=None,order=s.index)","ea8940ad":"#For that,we will make new columns\n\ndf['city_state']=df['city']+\"_\"+df['state']\ndf['type_locale']=df['type_y']+\"_\"+\"locale\"\n\ncity_state=df[(df['store_nbr']==44)|(df['store_nbr']==45)|(df['store_nbr']==47)|(df['store_nbr']==30)|(df['store_nbr']==32)][['city_state','store_nbr']]\ncity_state.value_counts()","f4fb25d9":"c=df.groupby(['city_state'])['sales'].mean().sort_values(ascending=False)\nc=pd.DataFrame(c)\nax,f=plt.subplots(figsize=(30,20))\nsns.barplot(x='sales',y=c.index,data=c,ax=None,ci=None)","6c89123e":"f,ax=plt.subplots(figsize=(20,10))\ng=df.groupby(['type_locale'])['sales'].mean()\n\ng.plot.pie(autopct='%1.1f%%',ax=None)","c8cfbe7a":"#splitting the train dataset into train and test\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(train.loc[:, train.columns != 'sales'], train['sales'], test_size=0.33, random_state=42)","2c826628":"from xgboost import XGBRegressor\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# one-hot encode the categorical features\ncat_attribs = ['id','date','family']\nfull_pipeline = ColumnTransformer([('cat', OneHotEncoder(handle_unknown='ignore'), cat_attribs)], remainder='passthrough')\n\nencoder = full_pipeline.fit(X_train)\nX_train = encoder.transform(X_train)\nX_test = encoder.transform(X_test)\ntest=encoder.transform(test)\n# train the model\nmodel = XGBRegressor(n_estimators=10, max_depth=20, verbosity=2)\nmodel.fit(X_train, y_train)\n\n# extract the training set predictions\nmodel.predict(X_train)\n# array([7.0887003, 3.7923286, 7.0887003], dtype=float32)\n\n# extract the test set predictions\nmodel.predict(X_test)\n# array([7.0887003, 7.0887003], dtype=float32)","70a5e99e":"model.score(X_test, y_test) #accuracy\n#accuracy_score is for classification tasks only. For regression you should use something different\n#Where X_test is sample, y_test is corresponding ground truth values. It will compute predictions inside\n#R-squared can be computed by calling score function\n","b8d84edd":"pred1=model.predict(test)\npred=pd.DataFrame(pred1)\n\n\npred.rename(columns={0:'sales'},inplace=True)\npred.index=test1['id']\npred","5551b57b":"pred.to_csv('submission.csv')","1543bdbd":"The plot shows that there is an increasing trend of sales with each year. Irregularities and fluctuations are also observed. From 2013 to 2017, the sales have increased, thus showing an upward trend.","d8305564":"From here as well, we can see that Quito_Pichincha has reported the highest sales.","ddcdf475":"Maximum sales are there for 'Grocery I' followed by 'Beverages', ;Produce', 'Cleaning' , etc. The minimum is in case of 'Tools'.","4a69b7d2":"**Next, we will try to analyse the monthwise sales to find out which months on an average have contributed to high sales. This can be done by splitting the 'date' column into year, month and day columns.**","6d7550b5":"# **Predictive Analysis**","232075a3":"**Let's analyse the effects of 'family'and 'store_nbr' on sales.**","9e6573bb":"There are no null values in the dataset.","4b70cc09":"There are 33 unique categories in family which can be re-classified into groups as follows.","71f335b9":"Highest sales are for store numbers 44,45,47,etc. and lowest are for 30,32,etc.","ccdbb857":"Let's see which city and states correspond to the highest and lowest sales store numbers.","9fa67319":"We observe null values are present in the \"daily oil prices column\" or \"dcoilwtico\".","2f11f74f":"We will now study the average sales across different city_states.","6ba8542c":"The highest and lowest sales store numbers are present in city_state Quito_Pichincha and Guayaquil_Guayas respectively.","2b63ed85":"# **Exploratory Data Analysis**","c4554399":"Additional_locale reports highest sales.","84e0e336":"As before, an upward trend is observed yearwise. For months, on an average, there has been the highest sales in the month of January with sharp dips in February and June (minimum average sales) and again increased in December."}}