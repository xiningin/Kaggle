{"cell_type":{"308ac596":"code","fb993071":"code","157f99b8":"code","28208401":"code","779aa725":"code","b5642699":"code","2d6b5662":"code","8fdf2889":"code","8f37eb78":"code","f198ae81":"code","9ace6af9":"code","10738440":"code","2d4b197a":"code","3de0ea8e":"code","b677e874":"code","baa695f8":"code","d9488901":"code","c6b0ff59":"code","7d7e0f28":"code","bcbcfa22":"code","49bca8c3":"code","ccbfde6b":"code","c5052828":"code","5cac52b5":"code","5e532a55":"code","7a434df3":"code","c5c6f190":"code","65f1936c":"code","35162269":"code","db614be1":"code","c800760a":"code","f42e64c7":"code","0d2a4f29":"code","f93756ef":"code","0e760387":"code","ab3377ac":"code","a7e8b391":"code","33770dd5":"code","db49ce96":"code","10c6dab5":"code","8d38a654":"code","e65b271d":"code","7ad95a22":"code","ca2d3d1d":"code","2e72501a":"code","aca05a36":"code","8990cd44":"code","f695d101":"code","58f67fe4":"code","5843cf2d":"code","c4568185":"code","cf466fce":"code","7704a555":"code","641ee4a7":"markdown","772deaa4":"markdown","7d3b416f":"markdown","ed4ce264":"markdown","4b2ae204":"markdown","6f612f5f":"markdown","47718174":"markdown","07f20fcf":"markdown","4ec088c7":"markdown","c1d0e363":"markdown","21e46820":"markdown","ba0351ba":"markdown","107e2acb":"markdown","8d52368f":"markdown","7b57556d":"markdown","272e2c1c":"markdown","f63e65b4":"markdown","b6f7ac3e":"markdown","348983fa":"markdown","097ac4d8":"markdown","28e127c3":"markdown","a20c280e":"markdown","57f25cbf":"markdown","7001ee9a":"markdown","41b98b01":"markdown","87cf0898":"markdown","20484022":"markdown","85cdbe45":"markdown","8411a26f":"markdown","ae0e7d89":"markdown","61e1fd5e":"markdown","e038ed85":"markdown","720a7779":"markdown","2ef8e343":"markdown","8a76b57e":"markdown","3d967eb4":"markdown","566464e0":"markdown","94f82d0a":"markdown","88caa76b":"markdown"},"source":{"308ac596":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb993071":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport time\nfrom collections import Counter\nfrom matplotlib import pyplot as plt\nfrom warnings import filterwarnings\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.stats import norm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score,KFold\nimport plotly.express as px\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import feature_selection","157f99b8":"import warnings\nwarnings.filterwarnings('ignore')","28208401":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","779aa725":"train_len = len(train_df)\ncombined = train_df.append(test_df,ignore_index=True)\ncombined.fillna(np.nan)","b5642699":"combined.isnull().sum()","2d6b5662":"train_df.describe()","8fdf2889":"g = sns.barplot(x=\"Pclass\",y=\"Survived\",data=train_df)\ng.set_ylabel(\"Survival Probability\")","8f37eb78":"g = sns.barplot(x=\"Sex\",y=\"Survived\",data=train_df)\ng.set_ylabel(\"Survival Probability\")","f198ae81":"g = sns.barplot(x=\"Pclass\",y=\"Survived\",hue=\"Sex\",data=train_df)\ng.set_ylabel(\"Survival Probability\")","9ace6af9":"combined.groupby(['Pclass','Sex'])['Age'].mean()","10738440":"sns.distplot(train_df[\"Age\"])","2d4b197a":"g = sns.FacetGrid(train_df[train_df['Age'].notnull()], col='Sex',row='Pclass',hue=\"Survived\")\ng = g.map(sns.distplot, \"Age\",bins=10,hist_kws=dict(edgecolor=\"k\", linewidth=2),kde=False).add_legend()\n","3de0ea8e":"combined['AgeGroup'] = 'adult'\ncombined.loc[combined['Name'].str.contains('Master'),'AgeGroup'] = \"child\"\ncombined.loc[combined['Age'] <= 14.0,'AgeGroup'] = \"child\"\ncombined.loc[(combined['Age'].isnull()) & (combined['Name'].str.contains('Miss')) & (combined['Parch'] != 0) ,'AgeGroup'] = \"child\"","b677e874":"combined[combined['Age'].notnull()].groupby(['Pclass','Sex','AgeGroup'])['Age'].mean()","baa695f8":"def Age(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    Sex=cols[2]\n    AgeGroup=cols[3]\n    if pd.isnull(Age):\n        if Pclass==1:\n            if Sex==\"male\":\n                if AgeGroup=='adult':\n                    return 42\n                else:\n                    return 7\n            elif Sex==\"female\":\n                if AgeGroup=='adult':\n                    return 37\n                else:\n                    return 8\n        elif Pclass==2:\n            if Sex==\"male\":\n                if AgeGroup=='adult':\n                    return 33\n                else:\n                    return 4\n            elif Sex==\"female\":\n                if AgeGroup=='adult':\n                    return 31\n                else:\n                    return 7\n        elif Pclass==3:\n            if Sex==\"male\":\n                if AgeGroup=='adult':\n                    return 29\n                else:\n                    return 7\n            elif Sex==\"female\":\n                if AgeGroup=='adult':\n                    return 27\n                else:\n                    return 5\n    else:\n        return Age\n    \ncombined[\"Age\"]=combined[[\"Age\",\"Pclass\",\"Sex\",\"AgeGroup\"]].apply(Age,axis=1)","d9488901":"def AgeBand(col):\n    Age=col[0]\n    if Age <=7:\n        return \"0-7\"\n    elif Age <=14:\n        return \"8-14\"\n    elif Age <=21:\n        return \"15-21\"\n    elif Age <= 28:\n        return \"22-28\"\n    elif Age <= 35:\n        return \"29-35\"\n    elif Age <= 42:\n        return \"36-42\"\n    elif Age <= 49:\n        return \"43-49\"\n    elif Age <= 56:\n        return \"50-56\"\n    elif Age <= 63:\n        return \"57-63\"\n    else:\n        return \">=64\"\n\ncombined[\"AgeBand\"]=combined[[\"Age\"]].apply(AgeBand,axis=1)","c6b0ff59":"g = sns.FacetGrid(combined[combined['Survived'].notnull()], col='Pclass')\ng = g.map(sns.barplot,\"AgeBand\",\"Survived\", order=[ \"0-7\",\"8-14\",\"15-21\",\"22-28\",\"29-35\",\"36-42\",\"43-49\",\"50-56\",\"57-63\",\">=64\"])\nfor axes in g.axes.flat:\n    _ = axes.set_xticklabels(axes.get_xticklabels(), rotation=70)\nplt.tight_layout()","7d7e0f28":"sns.barplot(\"Embarked\",\"Survived\",data=combined[combined['Survived'].notnull()])","bcbcfa22":"combined.groupby(['Pclass','Embarked'])['PassengerId'].count()","49bca8c3":"sns.barplot(\"Pclass\",\"Survived\",hue=\"Embarked\",data=combined[combined['Survived'].notnull()],ci=None)\n","ccbfde6b":"combined[combined['Embarked'].isnull()]['Embarked'] = combined['Embarked'].mode()","c5052828":"sns.barplot(\"SibSp\",\"Survived\",data=train_df, ci = None)","5cac52b5":"sns.barplot(\"Parch\",\"Survived\",data=train_df, ci = None)","5e532a55":"combined['FamilySize'] = combined['SibSp'] + combined['Parch'] + 1  # +1 is to include the passenger him\/herself\nsns.barplot(\"FamilySize\",\"Survived\",data=combined[combined['Survived'].notnull()], ci = None)","7a434df3":"ticketCount = combined.groupby('Ticket')['PassengerId'].count().reset_index()\nticketCount.rename(columns={'PassengerId':'Count on Ticket'},inplace=True)\ncombined = combined.merge(ticketCount, on=\"Ticket\",how=\"left\")","c5c6f190":"combined['Diff'] = combined['FamilySize'] - combined['Count on Ticket']\ncombined['Family Status'] = combined.apply(lambda x:\"Has Family On Same Ticket\" if (x['FamilySize'] - x['Count on Ticket']) <= 0 else \"Family Not on same ticket\",axis=1)\n","65f1936c":"combined['Family Status'] = combined.apply(lambda x:\"Is Alone\" if (x['FamilySize']==1) & (x['Count on Ticket']==1)  else x['Family Status'],axis=1)","35162269":"g = sns.FacetGrid(combined[combined['Survived'].notnull()], col='Pclass')\ng.map(sns.barplot,\"Family Status\",\"Survived\",ci=None)\nfor axes in g.axes.flat:\n    _ = axes.set_xticklabels(axes.get_xticklabels(), rotation=70)\n","db614be1":"combined['Cabin Class'] = 'No Cabin'\n\ncombined['Cabin Class'] = combined.apply(lambda x: \"No Cabin\" if pd.isna(x[\"Cabin\"]) else x[\"Cabin\"][0] , axis=1)\n\n","c800760a":"\ntickcab = combined[combined['Cabin Class'] != 'No Cabin'][['Ticket','Cabin Class']].drop_duplicates()\n\ntickcab = tickcab.rename(columns={'Cabin Class':'CabNam'})\ncombined = combined.merge(tickcab,how=\"left\",on=\"Ticket\")\n\ncombined['CabNam'].fillna('No Cabin')\n\ncombined['Cabin Class'] = combined.apply(lambda x:x['Cabin Class'] if x['Cabin Class'] != 'No Cabin' else x['CabNam'],axis=1)\ncombined.drop(columns=['CabNam'],inplace=True)\ncombined.drop_duplicates(inplace=True)\n","f42e64c7":"sns.barplot(\"Cabin Class\",\"Survived\",data=combined[combined[\"Survived\"].notnull()],ci=None)","0d2a4f29":"g = sns.distplot(combined[\"Fare\"], color=\"m\",label=\"Skewness : %.2f\"%(combined[\"Fare\"].skew()))\ng = g.legend(loc=\"best\")","f93756ef":"combined[\"Fare\"] = combined[\"Fare\"].map(lambda i: np.log(i) if i > 0 else 0)\ncombined[\"Fare\"] = combined[\"Fare\"]\/combined['Count on Ticket']","0e760387":"g = sns.distplot(combined[\"Fare\"], color=\"m\",label=\"Skewness : %.2f\"%(combined[\"Fare\"].skew()))\ng = g.legend(loc=\"best\")","ab3377ac":"combined.head()","a7e8b391":"companion = pd.pivot_table(combined, values='PassengerId',index=['Ticket'],columns=['AgeGroup'], aggfunc=\"count\").reset_index().fillna(0)\ncompanion.columns = ['Ticket','No. of Adult Companion', 'No. of Child Companion']\ncombined = combined.merge(companion, on='Ticket',how='left')","33770dd5":"combined.loc[combined['AgeGroup']=='adult','No. of Adult Companion'] = combined.loc[combined['AgeGroup']=='adult','No. of Adult Companion'] - 1\ncombined.loc[combined['AgeGroup']=='child','No. of Child Companion'] = combined.loc[combined['AgeGroup']=='child','No. of Child Companion'] - 1\n\ncombined['Companion'] = 'Adult & Child Companion'\ncombined['Companion'] = combined.apply(lambda x:'Only Adult Companion' if (x['No. of Adult Companion'] > 0) & (x['No. of Child Companion']==0) else x['Companion'],axis=1)\ncombined['Companion'] = combined.apply(lambda x:'Only Child Companion' if (x['No. of Adult Companion'] == 0) & (x['No. of Child Companion']>0) else x['Companion'],axis=1)\ncombined['Companion'] = combined.apply(lambda x:'No Companion' if (x['No. of Adult Companion'] == 0) & (x['No. of Child Companion']==0) else x['Companion'],axis=1)","db49ce96":"combined[combined[\"Survived\"].notnull()].groupby(['AgeGroup','Companion'])['PassengerId'].count()","10c6dab5":"combined[combined[\"Survived\"].notnull()].groupby(['AgeGroup','Companion'])['Survived'].mean()","8d38a654":"combined.columns","e65b271d":"#take backup for later use\ntrain_copy = combined[:train_len]\ntest_copy = combined[train_len:].reset_index(drop=True)\ntest_copy.drop(columns=['Survived'],inplace=True)","7ad95a22":"combined.drop(columns=['PassengerId','Name','Age', 'AgeGroup','SibSp','Parch','Ticket','Cabin','Count on Ticket','Diff','No. of Adult Companion','No. of Child Companion'],inplace=True)","ca2d3d1d":"combined.columns","2e72501a":"combined.head()","aca05a36":"combined = pd.get_dummies(combined, columns = [\"Sex\",\"Embarked\",\"AgeBand\",\"Family Status\",\"Cabin Class\",\"Companion\"],drop_first=True)","8990cd44":"train = combined[:train_len]\ntest = combined[train_len:]\ntest.drop(columns=['Survived'],inplace=True)","f695d101":"X = train.iloc[:,1:]\ny = train.iloc[:,0]\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","58f67fe4":"X_train.head()","5843cf2d":"#Dtree\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\npred_train = decision_tree.predict(X_train)\npred=decision_tree.predict(X_test)\npred_train_df=pd.DataFrame({\"Actual\":y_train,\"Pred\":pred_train})\npred_df=pd.DataFrame({\"Actual\":y_test,\"Pred\":pred})\ncm=confusion_matrix(y_test,pred)\ncm","c4568185":"report=classification_report(y_test,pred)\nprint(\"Decision Tree report \\n\",report)","cf466fce":"#RFC\n\nrfc=ensemble.RandomForestClassifier(max_depth=6,random_state=0,n_estimators=64)\nrfc.fit(X_train, y_train)\npred_train = rfc.predict(X_train)\npred=rfc.predict(X_test)\npred_train_df=pd.DataFrame({\"Actual\":y_train,\"Pred\":pred_train})\npred_df=pd.DataFrame({\"Actual\":y_test,\"Pred\":pred})\n\ncm=confusion_matrix(y_test,pred)\nprint(cm)\n\nreport=classification_report(y_test,pred)\nprint(\"Random Forest report \\n\",report)","7704a555":"y_test_rfc = rfc.predict(test).astype(int)\ntest_out = pd.concat([test_copy['PassengerId'],pd.Series(y_test_rfc,name=\"Survived\")],axis=1)\ntest_out['Survived'] = test_out['Survived'].astype('int')\ntest_out.to_csv('submission.csv',index=False)","641ee4a7":"**Fare**","772deaa4":"***Inspired from notebook \"Titanic Top 4% with ensemble modeling\" by Yassine Ghouzam***","7d3b416f":"***Fill nulls in Age using above***","ed4ce264":"* There are people who paid 0 fare. There are only 15 of them in training data though. These, according to google, are either sea men for American Line (whose Ticket is Line) or part of the crew overseeing the maiden voyage.\n\n* The max fare is much higher than the 75% fare. Looking at the data, all passengers travelling on same ticket has same fare. It might be better to use fare per passenger per ticket\n\n* 75% of entries have SibSp + Parch <=1. However, exploring the training set shows that there are people travelling on same ticket who are neither sibsp nor parch. We might need another metric which shows number of passengers on a ticket","4b2ae204":"***Companion on Ticket*** \n\nBased on number of Adult and Child companions create a categorical variable called Companion","6f612f5f":"* Looks like across all Pclasses, survival probability is higher if a passenger has family is on same ticket, ie, family is together\n* In Pclass 1 and 2, passengers who are alone have less probability of survival. Not sure how to explain that.","47718174":"Looks like smaller the companionship, better the chances of survival. Children as we already saw earlier have better changes or survival.\nSome of these have very small sample size though. For ex, child with Only child companion","07f20fcf":"Ok. Same pattern. Female passengers have more survival probability than male and across Pclasses upper class passengers have more probability of survival","4ec088c7":"Right. So looks like upto family size of 3 the survival probability is good","c1d0e363":"We can drop PassengerId, Name, Age, Age Group (we have age band), SibSp, Parch (we have FamilySize), Ticket, Count on Ticket, Cabin (we have Cabin Class), Diff (we have family status), No. of Adult Companion, No. of child companion (we have companion)","21e46820":"Survival Probability clearly varying based on the Age bins","ba0351ba":"***Age***","107e2acb":"So what columns do we have finally?","8d52368f":"Categorical Variables","7b57556d":"Create Categorical variabls","272e2c1c":"10 bins is giving a better picture.\n\n***Pclass = 1***\nFemale passengers have very high survival probability across age tenors\nAmong male passengers, children always survive. Middle aged male passengers have higher survival probability than older males\n\n***Pclass = 2***\nFemale passengers have very high survival probability across age tenors\nAmong male passengers, children always survive. Male passengers across other tenors have very less chance of survival\n\n***Pclass = 3***\nDoesnt look good for male passengers. Elderly male passengers have no chance of survival\nAmong Female, Children have good chance of survival. Middle aged female passengers the survival is even and elderly have very less chance.\n\nCombination of Pclass, AgeBand and Sex seems to be a good indicator of survival probability","f63e65b4":"***Embarked***","b6f7ac3e":"Clearly, people who don't have any cabin have lesser probability of survival. People in Cabins E,D,B have very high probability of survival","348983fa":" ***Feature Analysis***","097ac4d8":"***Fill nulls in Embarked with most freq boarding point***","28e127c3":"There are no nulls in Ticket number. \nAre people of same family on same ticket? ie, are the family members together when the incident happened?\nAre there passengers travelling together who are neither SibSp nor Parch?","a20c280e":"**Prediction**","57f25cbf":"Except for Parch=3 which is an exception, other cases smaller the family better chances of survival.Create a FamilySize attribute and check this","7001ee9a":"**Modelling**","41b98b01":"Take a look at SibSp and Parch","87cf0898":"People who embarked at C has higher chance of Survival. Why? Probably because close to 50% of people who boarded at C boarded into Pclass 1, where as most people who boarded at Q and S boarded into Pclass 3","20484022":"***Create Age Bins***","85cdbe45":"Let's fill nulls in Age based on Pclass, Sex and Age Group","8411a26f":"Set status as alone if the passenger neither has any Parch or SibSp nor has any co-passenger on the same ticket","ae0e7d89":"Clear pattern again. Female are more probable to survive than male.How does it look at Pclass level?","61e1fd5e":"***Pclass***","e038ed85":"Pretty clear pattern - upper class passengers have higher probability of survival. \nHow does it look at 'Sex' level?","720a7779":"****Joining Train and Test Set for filling nulls and feature engineering****","2ef8e343":"***Cabin***\n\nCabin has lot of nulls. Possible that people who don't have any cabin have the corresponding value as null. But it's also possible that there is missing data.\n\nWill perform 2 actions in Cabin\n\n1. Take first letter of the Cabin to get the Cabin Class and ignoring the Cabin Number\n2. We can use 'Ticket' and populate same cabin to people who are on the same ticket - to fill nulls\n3. Remaining passengers who have nulls would be considered as 'No Cabin'","8a76b57e":"It looks like people who boarded at C some how have a better survival rate irrespective of Pclass","3d967eb4":"**Name**\n\nName has titles - Probably can be used separate Children,Adult to fill nulls in ages","566464e0":"Does having a adult or child companion impact survival?","94f82d0a":"***Check for nulls***","88caa76b":"***Sex***"}}