{"cell_type":{"6fd3c578":"code","038f6e6d":"code","07bc8066":"code","36114e06":"code","8b52d360":"code","9dedb303":"code","99d7b0e4":"code","b0c5f3e2":"code","719f7ffd":"code","dc6d6e5a":"code","31201ed1":"code","5c9d0630":"code","c194f682":"markdown","adcd5aff":"markdown","af5eb583":"markdown","581e7b96":"markdown","b06f15dc":"markdown","e0e33152":"markdown"},"source":{"6fd3c578":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","038f6e6d":"# !pip install sentencepiece\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport logging\n\nlogging.basicConfig(level=logging.INFO)","07bc8066":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","36114e06":"%%time\nimport tensorflow_hub as hub \nimport tokenization\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","8b52d360":"train = pd.read_csv('..\/input\/arabizi-dialect\/Train (1).csv')\ntest = pd.read_csv('..\/input\/arabizi-dialect\/Test (1).csv')","9dedb303":"%%time\nimport tensorflow_hub as hub \nimport tokenization\nmodule_url = 'https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/2'\nbert_layer = hub.KerasLayer(module_url, trainable=True)","99d7b0e4":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)\n\ndef bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence) + [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n\ndef build_model(bert_layer, max_len=512):\n    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    pooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    net = tf.keras.layers.Dense(64, activation='relu')(clf_output)\n    net = tf.keras.layers.Dropout(0.2)(net)\n    net = tf.keras.layers.Dense(8, activation='relu')(net)\n    net = tf.keras.layers.Dropout(0.2)(net)\n    out = tf.keras.layers.Dense(3, activation='softmax')(net)\n    \n    model = tf.keras.models.Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='categorical_crossentropy', metrics=['accuracy'])\n    \n    return model","b0c5f3e2":"max_len = 150\ntrain_input = bert_encode(train.text.values, tokenizer, max_len=max_len)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=max_len)\ntrain_labels = tf.keras.utils.to_categorical(train.label.values, num_classes=3)","719f7ffd":"model = build_model(bert_layer, max_len=max_len)\nmodel.summary()","dc6d6e5a":"%%time\ncheckpoint = tf.keras.callbacks.ModelCheckpoint('model.h5', monitor='val_accuracy', save_best_only=True, verbose=1)\nearlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=3, verbose=1)\n\ntrain_history = model.fit(\n    train_input, train_labels, \n    validation_split=0.2,\n    epochs=3,\n    callbacks=[checkpoint, earlystopping],\n    batch_size=8,\n    verbose=1\n)","31201ed1":"'''\n%%time \nmodel.load_weights('model.h5')\ntest_pred = model.predict(test_input)\n\n# Creating an empty data frame\nsubmission_Zindi = pd.DataFrame()\n# Assigning values to the data frame-submission_kaggle\nsubmission_Zindi['ID'] = test.ID\nsubmission_Zindi['label'] = np.argmax(test_pred, axis=-1)\n# Head of submission_kaggle\nsubmission_Zindi.head()# saving data as  SampleSubmission.csv\nsubmission_Zindi.loc[ :].to_csv('SampleSubmission.csv',index=False) '''","5c9d0630":"%%time \nmodel.load_weights('model.h5')\ntest_pred = model.predict(test_input)\n\nsub = pd.read_csv('..\/input\/arabizi-dialect\/SampleSubmission (32).csv')\nsub['ID'] = test.ID\nsub['label'] = np.argmax(test_pred, axis=-1)\nsub.to_csv('submission.csv', index=False)","c194f682":"# Step_3: Run model and export predictions","adcd5aff":"# Step_1 load packages and data","af5eb583":"Each epoch takes about 1 hours (even with GPU acceleration). After all, we have a large dataset.","581e7b96":"# Step_2: build bert_layer and model","b06f15dc":"1. We will need bert `Tokenization` class","e0e33152":"We check only the first 150 characters of each review. \n\nYou can also increase this length, but the running time will increase too."}}