{"cell_type":{"563a9d8e":"code","2f350747":"code","7744d79d":"code","6643ab98":"code","4d0f5132":"code","3afcd5cd":"code","a6b88da6":"code","d8bc6418":"code","90b58b91":"code","94708636":"code","52242663":"code","c4fe8b61":"code","fedf4256":"code","9e2bfb99":"code","61b8f533":"code","93633237":"code","038f6703":"code","c366a203":"code","eb12cbff":"code","80ce13a9":"code","c90fee56":"code","cb70c44c":"code","5ecbf77a":"code","d09aa3e9":"code","872ab138":"code","c3973e56":"code","c7c59c6c":"code","ec71df1c":"code","94de245b":"code","4374cdd1":"code","5a67fb3d":"code","16482826":"code","d12f7ddf":"code","e6dd0b98":"code","2a7aa44e":"code","95e9d993":"code","106c5afd":"code","b9064ecf":"code","19ca2c1b":"code","58d0b731":"markdown","db7af1b7":"markdown","c869d667":"markdown","7f768ad2":"markdown","9d2718f4":"markdown","c5db9dcd":"markdown","b8accec6":"markdown","94f7747a":"markdown","079a012a":"markdown","fedaff4f":"markdown","047b5053":"markdown"},"source":{"563a9d8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f350747":"# Display max_column\npd.set_option('display.max_columns', 60)","7744d79d":"# load data\ntest = pd.read_csv(\"\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv\")","6643ab98":"# First 5 row of trainning dataset\ntrain.head()","4d0f5132":"# shape of trainning data\ntrain.shape","3afcd5cd":"# null value of dataset\ntrain.isna().sum()","a6b88da6":"# Frequecy of different types of match\nmatchTypes = [\"solo\", \"duo\", \"squad\", \"normal-solo\", \"normal-duo\", \"normal-squad\", \"solo-fpp\", \"duo-fpp\", \"squad-fpp\", \"normal-solo-fpp\", \"normal-duo-fpp\", \"normal-squad-fpp\", \"crashtpp\", \"flaretpp\", \"flarefpp\", \"crashfpp\"]\ntrain[\"matchType\"].value_counts()[matchTypes].plot(kind=\"bar\", figsize=(10,6), color=\"#ff8000\")\nplt.title(\"Frequecy of different types of match\", fontweight=\"bold\")","d8bc6418":"# Frequency of Kill Counts\nplt.subplots(figsize=(18,7))\nsns.countplot(train['kills']).set_title(\"Kill Counts\")","90b58b91":"# Useful information of dataset\ntrain.info()","94708636":"# Total Headshot Kill Count\nplt.subplots(figsize=(10,6))\nsns.countplot(x=train[\"headshotKills\"].astype('str').sort_values(), data=train).set_title(\"Head Shot Kills Count\")","52242663":"# Revives frequency\nsns.countplot(x=train[\"revives\"])","c4fe8b61":"# Longest Survival Duration\ntrain[\"damageDealt\"].max()","fedf4256":"# win without damage\nwithout_damage = train[train[\"damageDealt\"]==0]\nwinning = len(without_damage[without_damage[\"winPlacePerc\"]==1])\n# longest ply duration\nduration = len(train[train[\"matchDuration\"]==2237])\n# win without single kill\nwithout_kill = train[train[\"kills\"]==0]\nwithout_kill_count = len(without_kill[without_kill[\"winPlacePerc\"]==1])","9e2bfb99":"print(f\"{winning} player win without dealing with damage\")\n\nprint(f\"{duration} player plays longest survival match\")\n\nprint(f\"{without_kill_count} player win without single kill\")","61b8f533":"# Healing item use\nplt.subplots(figsize=(10, 6))\nplt.title(\"Number Of Healing Item Used\")\nsns.distplot(train[\"heals\"])","93633237":"# Player group... In solo no group, in duo minimum 50 group and in squad (25 * 4) minimum 25 group\nsolo_game = train[train[\"numGroups\"] > 50]\nsolo = len(solo_game)\n\nduo_game = train[(train[\"numGroups\"] > 25) & (train[\"numGroups\"] <= 50)]\nduo = len(duo_game)\n\nsquad_game = train[train[\"numGroups\"] <= 25]\nsquad = len(squad_game)","038f6703":"print(f\"{solo} solo game player\\n {duo} player in duo\\n and {squad} player in squad\")","c366a203":"solo_game","eb12cbff":"# heal vs win percentage\nplt.subplots(figsize=(16, 8))\nsns.pointplot(x=solo_game[\"heals\"], y=solo_game[\"winPlacePerc\"], color=\"#ff6347\")\nplt.text(14,0.6, 'solo-heal vs win perc',color='#ff6347',fontsize = 17)\nsns.pointplot(x=duo_game[\"heals\"], y=duo_game[\"winPlacePerc\"], color=\"#4ca3dd\")\nplt.text(14,0.64, 'duo-heal vs win perc',color='#4ca3dd',fontsize = 17)\nsns.pointplot(x=squad_game[\"heals\"], y=squad_game[\"winPlacePerc\"], color=\"#212126\")\nplt.text(14,0.67, 'squad-heal vs win perc',color='#212126',fontsize = 17)","80ce13a9":"# Number of enemy players knocked vs win percentage\n# N.B In solo match their is no chance to knock\nplt.subplots(figsize=(16,7))\nsns.pointplot(x=duo_game[\"DBNOs\"], y=duo_game[\"winPlacePerc\"], color=\"#ff8000\")\nplt.text(14,0.5, \"duo-DBNOs vs winPlacePerc\", color=\"#ff8000\")\nsns.pointplot(x=squad_game[\"DBNOs\"], y=squad_game[\"winPlacePerc\"], color=\"#212126\")\nplt.text(14,0.53, \"squad-DBNOs vs winPlacePerc\", color=\"#212126\")","c90fee56":"# Copy data\n# Diffent Player has same Match ID\nData = train.copy()\nData[\"JoinServer\"] = Data.groupby(\"matchId\")[\"matchId\"].transform(\"count\")","cb70c44c":"plt.subplots(figsize=(14,6))\na = Data[Data[\"JoinServer\"]>49]\nsns.countplot(a[\"JoinServer\"])","5ecbf77a":"# correlation\ncorr_matrix = train[3:].corr()\ncorr_matrix[\"winPlacePerc\"].sort_values(ascending=False)","d09aa3e9":"# heatmap\nplt.subplots(figsize=(20,10))\nsns.heatmap(corr_matrix,annot=True)","872ab138":"# scatter matrix\nfrom pandas.plotting import scatter_matrix\na = [\"damageDealt\", \"winPlacePerc\"]\nscatter_matrix(solo_game[a], figsize=(10,6))","c3973e56":"a = [\"damageDealt\", \"winPlacePerc\"]\nscatter_matrix(duo_game[a], figsize=(10,6))","c7c59c6c":"a = [\"damageDealt\", \"winPlacePerc\"]\nscatter_matrix(squad_game[a], figsize=(10,6))","ec71df1c":"# add distance\ntrain[\"TotalDistance\"] = train[\"rideDistance\"] + train[\"swimDistance\"] + train[\"walkDistance\"]","94de245b":"# create new DataFrame\nnew_data = train.groupby(\"Id\")[\"TotalDistance\", \"heals\", \"winPlacePerc\"].sum().sort_values(by=\"TotalDistance\", ascending=False)\nnew = pd.DataFrame(new_data)[:40]","4374cdd1":"plt.subplots(figsize=(20,8))\nfig = sns.barplot(x=new.index, y=\"TotalDistance\", data=new)\nplt.xticks(rotation=90)","5a67fb3d":"# for solo match\nsolo_match_random = train[(train[\"matchType\"]==\"solo\") & (train[\"matchId\"]==\"ce9bc89b3ca08c\")].reset_index()\n# for duo match\nduo_match_random = train[(train[\"matchType\"]==\"duo\") & (train[\"matchId\"]==\"110163d8bb94ae\")].reset_index()\n# for squad match\nsquad_match_random = train[(train[\"matchType\"]==\"squad\") & (train[\"matchId\"]==\"df014fbee741c6\")].reset_index()","16482826":"duo_match_random","d12f7ddf":"# some analysis\ndef analysis_random_match(matchType):\n    matchType[\"DamagePercentage\"] = matchType[\"damageDealt\"] \/ 100\n    matchType[\"DamagePercentage\"].plot(kind=\"bar\", figsize=(18,7))\n    \n    chickenDinner = matchType[matchType[\"winPlacePerc\"]==1]\n    a = chickenDinner[\"DamagePercentage\"].to_string(index=False)\n    print(f\"Damage by those who got Chicken Dinner is {a} percent\")\n    \n    high = matchType[\"DamagePercentage\"].max()\n    id_no = matchType[matchType[\"DamagePercentage\"] == high]\n    sno = id_no[\"Id\"].to_string(index=False)\n    kill_enemy = id_no[\"killPlace\"].to_string(index=False)\n    duration = id_no[\"matchDuration\"]\/60\n    print(f\"High Damage is {high} by ID no. is {sno}\\nEnemy Player Killed {kill_enemy}\\nMatch Duration {duration.to_string(index=False)}min\")\n    matchType[\"headshotKills\"].plot(kind=\"bar\", figsize=(18,7), color=\"#212126\")\n    b = matchType[\"matchType\"][:1]\n    plt.title(f\"DamagePercentage and headshotKills in {b.to_string(index=False)} match\")\n    plt.xlabel(\"ID No.\")\n    plt.legend()","e6dd0b98":"analysis_random_match(duo_match_random)","2a7aa44e":"analysis_random_match(solo_match_random)","95e9d993":"analysis_random_match(squad_match_random)","106c5afd":"# count of revive vs knock\ndef reviveVsDBNOs(typeMatch):\n    plt.subplots(figsize=(14,6))\n    sns.countplot(x=\"DBNOs\", hue=\"revives\", data=typeMatch)","b9064ecf":"reviveVsDBNOs(duo_match_random)","19ca2c1b":"reviveVsDBNOs(squad_match_random)","58d0b731":"# If You Like, Please Upvote\n\n* work is progress","db7af1b7":"![an-insane-vss-kill-in-pubg-39e8.png](attachment:an-insane-vss-kill-in-pubg-39e8.png)","c869d667":"# EDA - Exploratory Data Analysis","7f768ad2":"# Take a random match id and analyze. Different player has same match id.","9d2718f4":"# Enemy Player Knocked\n![ab89d744fc06eb64cdaddd602df5e623.jpg](attachment:ab89d744fc06eb64cdaddd602df5e623.jpg)","c5db9dcd":"![featured-medical.PNG](attachment:featured-medical.PNG)","b8accec6":"# If you like it, Please upvote","94f7747a":"matchId - ID to identify match. There are no matches that are in both the training and testing set.","079a012a":"# First 40 who Traveled long distance","fedaff4f":"Data fields\n\n* DBNOs - Number of enemy players knocked.\n* assists - Number of enemy players this player damaged that were killed by teammates.\n* boosts - Number of boost items used.\n* damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n* headshotKills - Number of enemy players killed with headshots.\n* heals - Number of healing items used.\n* Id - Player\u2019s Id\n* killPlace - Ranking in match of number of enemy players killed.\n* killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n* killStreaks - Max number of enemy players killed in a short amount of time.\n* kills - Number of enemy players killed.\n* longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n* matchDuration - Duration of match in seconds.\n* matchId - ID to identify match. There are no matches that are in both the training and testing set.\n* matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n* rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n* revives - Number of times this player revived teammates.\n* rideDistance - Total distance traveled in vehicles measured in meters.\n* roadKills - Number of kills while in a vehicle.\n* swimDistance - Total distance traveled by swimming measured in meters.\n* teamKills - Number of times this player killed a teammate.\n* vehicleDestroys - Number of vehicles destroyed.\n* walkDistance - Total distance traveled on foot measured in meters.\n* weaponsAcquired - Number of weapons picked up.\n* winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n* groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n* numGroups - Number of groups we have data for in the match.\n* maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n* winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.\n","047b5053":"![pubg-characters_1527574750459_1538650763686.jpg](attachment:pubg-characters_1527574750459_1538650763686.jpg)\n\n# PlayerUnknown's Battlegrounds (PUBG) is an online multiplayer battle royale game developed and published by PUBG Corporation, a subsidiary of South Korean video game company Bluehole. The game is based on previous mods that were created by Brendan \"PlayerUnknown\" Greene for other games, inspired by the 2000 Japanese film Battle Royale, and expanded into a standalone game under Greene's creative direction. In the game, up to one hundred players parachute onto an island and scavenge for weapons and equipment to kill others while avoiding getting killed themselves. The available safe area of the game's map decreases in size over time, directing surviving players into tighter areas to force encounters. The last player or team standing wins the round. "}}