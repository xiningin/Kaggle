{"cell_type":{"ae9f93ec":"code","dd537a6d":"code","ed0a61c9":"code","04d7ee71":"code","1529c58a":"code","fed3cb96":"markdown","d9f1dcd5":"markdown","ab39ff2e":"markdown","fac36ed6":"markdown","5c24053d":"markdown","80d3a8ca":"markdown","f5606961":"markdown","16a13e76":"markdown"},"source":{"ae9f93ec":"import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","dd537a6d":"data = load_breast_cancer()\n\nX,y = data.data,data.target\nprint(f'X.shape: {X.shape}')\nprint(f'y.shape: {y.shape}')\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nprint(f'X_train.shape: {X_train.shape}')\nprint(f'X_test.shape: {X_test.shape}')\nprint(f'y_train.shape: {y_train.shape}')\nprint(f'y_test.shape: {y_test.shape}')","ed0a61c9":"from sklearn.base import BaseEstimator\n\nclass IfesPerceptron(BaseEstimator):\n    \"Implements a Perceptron-type neural network with a neuron\"\n    def __init__(self):\n        pass\n\n    def funcao_ativacao(self, XWb):\n        \"The activation function is the step function (also called step or heaviside)\"\n        # returns 0 se x < 0\n        # returns 1 se x >= 0\n        return np.heaviside(XWb, 1)\n\n    def fit(self, X, y=None):\n        \"Train using one instance at a time\"\n        self.numero_instancias = X.shape[0]\n        self.numero_features = X.shape[1]\n\n        # Learning rate\n        self.taxa_aprendizado = 0.1\n\n        # W weight matrices\n        # According to Tariq Rashid's book, it is good practice to start the weights randomly\n        # between +- 1\/square_root(nodes_entry)\n        self.W = np.random.normal(0.0, pow(self.numero_features, -0.5), (1, self.numero_features))\n        print(f'Matrix W Initial ({self.W.shape}): {self.W}')\n\n        # Vetor de peso bias b (inicializada sempre como 1)\n        self.b = [1]\n        print(f'Vector b: {self.b}')\n\n        for instancia in range(self.numero_instancias):\n            XWb = np.dot(X[instancia], self.W.T) + self.b\n            h_WbX = self.funcao_ativacao(XWb)\n            print(f'XW+b: {XWb}')\n            print(f'Result of the activation function: {h_WbX}')\n\n            # Atualiza\u00e7\u00e3o dos pesos de W\n            self.W += self.taxa_aprendizado * (y[instancia] - h_WbX) * X[instancia]\n            print(f'Matrix W after instance {instancia}: {self.W}')\n\n    def predict(self, X, y=None):\n        \"Predict all X_test answers using the trained weight matrix\"\n        XWb = np.dot(X, self.W.T)\n        hWbX = self.funcao_ativacao(XWb)\n        return hWbX","04d7ee71":"clf_ifes_perceptron = IfesPerceptron()\nclf_ifes_perceptron.fit(X_train,y_train)\ny_pred = clf_ifes_perceptron.predict(X_test,y_test)","1529c58a":"print(f'ACCURACY SCORE: {accuracy_score(y_pred, y_test)}')","fed3cb96":"# Simple Perceptron neural net from scratch","d9f1dcd5":"Figure 1: Perceptron architecture. (from https:\/\/www.asimovinstitute.org\/neural-network-zoo\/)","ab39ff2e":"<img style=\"float:left\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAUIAAACKCAIAAABQA9SmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAACS7SURBVHhe7Z0HXFNX+8cBrdqh1tXW1rpateK27r+CW7G2UuteoIgDtdZRq7522Wqt2jpqtfWto7Vara9V2aDiBgeggBMICWGvsAIJGff+f8m5TdMbAgmJQMz5fs6Hz8295zz3Qu73Ps+5GTiwFArFxqEaUyg2D9WYQrF5qMYUis1DNaZQbB6qMYVi81CNKRSbh2pModg8VGMKxeahGlMoNg\/VmEKxeajGFIrNQzWmUKyJUCgsKyvjHhjAMIxYLFar1dxjK0E1plgTnKY4iUtKSuRyOZa5tTUKDsPq2hjj4cOHb7\/9dnx8PJaxU\/wR8KfAH4T8KYjD7dq1u3Pnjkql0o6wDlRjitVAIhoxYkRXLV26dMHy77\/\/XlhYyG2uCaRS6aJFi44dO8Y9fpJAV\/zKO3bsKC0t9fX1dXFxwR+B\/DXefffdkJAQmUwGe\/\/73\/+iGw6MG2YNqMYUqxEbG9u2bdvjx49fv3794sWLP\/74I1LT9OnTi4uLuR7VTkFBwfvvv48j4R4\/SfBb9+7dOzMzE1n38OHD+N39\/f2xMiws7Pvvv+\/Wrdu6deuQoouKivr06XPu3DmFQsGNtBiqMcVqxMTEdOrUKSEhAcs4lZF8Lly40KFDh+joaKzBGZyWloYzOzQ0NCcnR6lUagexqDyzs7MjIiICAgLwkziP4ViJnmfPnr158yZyF9YgArTEwzNnzjx48ABJj0QgnSMjI4OCgqBHSkoKdk02of977723efPmR48ePX78WCQSoTP2iCOBXdgjLj0kDnIpVgYGBgYHB6enp+vqcMiGo7179y7WI6MmJSXpgvPw9PTcsmULiQaNhw8fjqPCMvaIlfhdmjdvjmPAw59++snd3d2KVzeqMcVq6GtMQGpCSXnw4EHIAAf69+8\/fvz4cePGDR069Nq1a+RW0NWrV3HGDxs2bOLEiRMmTIBpMByOubq6jhw5ctKkSegcFxeHsx+R586dO3DgQKzs1avXpk2bMPNEBHiFyP369XNzcxs9enTfvn23b98ukUiwCRpjj507d0aoUaNGLV++HHFg74ABA9AZLmEr7EWco0ePDho0CMc2duxY7PF\/\/\/sfeiJCamoqjg39sWnMmDEIvmvXLkOTMXdo3bo1jpD4r68xIT8\/H7NiXAsQFn8oHBKuDtw2i6EaU6wGT2Ocr4mJiR07dvTz80OGxETx66+\/xrmLk\/vTTz9FzZmVlYVup0+fHjx4MNJUbm5uXl4ejII5kH\/jxo24CmANHmIlwCwXnt+\/fx9BID8io3RHBGyqX78+9o7IiAlLIfkPP\/yArEuy8datWxEKYBc4KtTYQ4YMSU5OxkPYRaoG7PHXX3\/FcHRDhzfeeAMJHJ0x4YefSPUIjk0HDhzo2bMnuYmlz+3bt\/G7k2sH4GkMt\/EXeOWVV8LDwxETdfVLL72EPw6WSQcLoRpTrAZEwtmPEhp6IMUhha5evRq6QhhUm3AVZSTUAlC9VatW9+7dwyhoPGLECN0ZjxS9bds2pFySq3WgmoVpSOkkAvT28vLy8fHBJqIx9kisILeRkFphXblzYzxEXoVL5CEq3sWLF2MOr6vSsYDcu3btWtQF0Lh9+\/bYO9mEK8g777wDmclDHbh2oBzA7shDaIzfF6KiPy5DqMnnzZuHmbPuzhYyM+p\/3czCQqjGFKsBjSEnykWoi5QF61xcXHAGQxhUsLNnz4ZdhH379iEdYZYL8Xgaw8nJkyevWrWKl6lOnTrl7OwMw0kETC\/Xr1+PAhibeBoD4jzqdlM0xhUB9TayN3kIcAVB4YD6HAs8jTFqwYIFX331FXmo448\/\/sAvq7stD42Rw3HAUBd\/im7duiEa5vNkK0Bx\/ttvv1nrLhfVmGI1oHGbNm2Ql6AuSl+xWAzBsB6nPqaXZGqqD0pTQ42Rr1A5o+rmaYyTHmX5woULucHLl3\/00UefffYZNhlqjAoWdXVoaCjReM+ePWQ9gacxEiYmw\/oJFnbt3LkThbehxigoUALgCkIe6vjzzz+R\/\/U17tOnz5UrV\/CngL1IyLziAoafOXOGakypdfDmxjqg2cyZM729vXlmEngao6BFTw8PD929YgKZvhoGB4YaQx44j5\/Q+IMPPti1axdZT+BpTPrgiqDbI4r2ZcuWTZ06FZrxNMZVplyNz58\/36NHD8y0yUPDW1z6oOxHMRIVFcX7HasM1ZhiNYxpDBmQrFBvIz9jNoiTmECs42mMDr6+vi1btiS3rNENP3G6Y6Lbv3\/\/vXv3Iq2R4VhPIhCNMQMn\/dEBmo0fP14ikSB5IoEjb+tCoT9PY6zcunUrSmJU19rAKgxEtjx48CCWTdQYHXDMubm55GHFGuNXQ8lN7vBZBaoxxWoY0xjg7EfGwxQR9e1ff\/0FkZD9SMkNjUeOHKl\/xstksunTp3fo0AFZFFu3b98eGRmJawGmr+3atVu5cuWJEyeOHTu2du1aFKvoTzRG3b5\/\/370R72Nsf7+\/tgED3FRaNasGfZ78uRJ+IwrAk9jAK8wdwVHjhwhd6cwBUBOxiYTNQaY7p49e5bUyRVrHBISggpcl7oth2pMsRqYka5Zs6bcJIO0CSt2797t7u6O3DtlyhR4SM54KPrNN9\/ovxcCnWEyOmOSDN88PT0DAwORM9EfpfW8efPg2zvvvIMLAdkX0RjOT5w4EfKgII+IiCCJFyAyJrrkBeEvvvgCJXRYWNi2bduIpQTsMSMjA1vRx83N7dtvv0U3sgkqrlq1CvNn8hCjDh06hOKCPNQHs2uMJQMxK968ebP+L6UPrmi8A7AQqjHFaiDRwbQK5nvYCj8x+8VP5ElSEmMByhmO0nXG6a7fGQ9JBBTPZCXRGBU71uv6a2NoQB\/EJ5vIEDwEZKwOcvCkGxZ0W7Gg\/0vphpOH+kD4zp07Y8aLvQP0MfylMFz3CjPvACyhahqrFcUPC1NO5Tz4MjtuDWk59zYUiH4rzbvFqI1+SotCeRIQjfVvcdUI2Duq\/S5dupBS3xB0QH4eMmQIqnrejWsLMU9jRl0qzQhMuzZC4NcoOeDZ1KB6maH1cs5rWta5eilBDYT+L4jOdS4U\/qIqw6ygJv+mFPsBmRk1M3mHFreqhsAFBdWysVoaIEX\/\/vvvSPjWPVSTNWZUSumjtKsuooCGkot1VTcd1bcc0Jjb\/zQ8VN1yKLjklBzwnCikTUlWMOoRbjiF8sSAEkVFRRUU89VJubW0Prq5gBUxTWOmjJH4pp1\/OS+sjvKmxlg20mjDVshcdNkxOfBFpXA5q9bcjaRQKE8OEzRmyljpLTbm1UoF1m\/oqekf\/QKbuf3pNhkVVFZWFrnriAttTk5OBTUVhfIkqExjRsXKBWzcGzxLzWh3mrD5Z1nGpHvrKDasXm\/oY2J81EWY5MBGyFlpf19f3ylTppDXAOGzq6trbGws2UShVA+VaazMZePHspFOfDnNarGtWXk8y1Y+dUlNTd2xY4cVXxbXB07++eefly9f5h6Xh0KhiImJ2bhx45w5c2bMmOHj43P48OGKs+uJEyfGjBlDXlfE8Ts7O0dGRpJNFEr1UKHGjILNP81GP8fX0uzmxIo\/ZNWVl5q3b9\/u2rVrcnIy99iqFBYWTpo0Sf+DLDyQhAMCAnr06IFuW7du3b9\/\/6effopl3TvsyoVqTKlxKtRYmcM+HGDgZJXa3RZsyR0urHH0NUZihHgQIyEhQSAQSCQS3Q1AlUpVVFSk25SXl4fOuk1I5mSmSkAQpFOMxcLEiRO\/+eabzMxMVL+6T3jruH\/\/frt27Xbv3o2epJZGtFLt2wmwjDVYFolEjx49wnA4rx1ENabUPBVqXHyFvdOYL2TVWlRdNvtnlqnkQ9L6GkdFRcE65MaePXvip5ub2927d0k3eDht2rTu3btjPRgxYkRoaCgcwyapVIqe4eHhpCfYsmXLunXrZDIZ5HR3d2\/Tpk3fvn379euHCS3XQwssnTt3LoTUvQtPH1wFsP6LL77ATnv16tW\/f3+4Sl7BpxpTahzjGjMqNnsvG+nIF7LKTfABq+I+jWkMfY3DwsJ69+598+bNpKQkJMD58+fDH5J1xWLxa6+9hg5Ixdi0bdu2N998EzpBNqTiPn36XLhwQRtPw5o1a5YuXQq9STb+\/PPPMQQgr3I9tGBrixYtAgMDdYldH1wFVq1aBUVv3LiBvf\/000\/YIyJAfqoxpcYxrrFayooW8lW0pMW9wSoyueBG4Gk8ePBgJF4swxZMUFu2bBkdHY1liISkmpiYqB2keZlnz549AwYMQKVdscYVzI1xRWjatGl6ejr3WA+y99dff\/3ixYuaN8uqVCUlJQMHDty3bx92TTWm1DjGNVZJ2PjRfBUtaTGvsKWa716qAGMaA5iDUtbf3x8pl6cxQNImA6usMfIzsnFGRgb3WA9Mg8+dOwfJz58\/f+VvfHx8Fi5ciFk31ZhS4xjXWJnHPnLlq2hJu\/tSpXe5KtAYU18XF5fjx48jGRpq\/ODBA\/jz8OFDojF84zaYrDF21KRJk5iYGN2NNB0os48cOQKNh\/2b5cuXIyzVuBpAQaQqk6jkWVwrk2AVt41iWxq7uroa0\/jWrVsYiMkqNEbSDggI4DYYaLx7925uw7\/BiYKBn3zyCdI+t+pvkI2DgoKaNWuGTVjWgSPBKKrxk4NRy+SS2zlxKwXBbyX4NhH4vSjw1za\/Jkkhzhl3lsvzb6MP19uOqaCoLmQFk\/kqWtJiXmPl3FcoGKNqGmPNoUOH+vbtC4cxPR47dux3331HNgGdxmD69OmbNm3iNhhw+vRp8o3ECMit0gJXYSlm5uW+dQQajx49Wl9j\/BZkE6XKMGqFPPecMLSzMKBxRkj94qtOZRGat\/eqtA0LJdecMkLrJ\/k3Rh9Zzjn050baJcY1ZuRs2md8FS1pDwdp3hNWIaZrjHnssmXLUAPHx8djZceOHffu3YtNKIAPHDgA5YKDg7Hp\/v37Hh4eixcvhsPYumHDhqFDh965cwdF+MmTJ8krRjrkcjk64wKBTQkJCcjt9+7dO3r0aFpaGva+YMGCTp06hYaGIiyqd19fX\/LS1MWLF3v27BkREYHh2dnZvXr1wgEg85OYFPNRM0pJdtQsUWDTgktOihvcB+l4pxPWYD3cLrzshJ5ZUbMwypR3Cj6VGNeYZVjJKTaqHu\/PV\/UmXsmqua\/zNsajR4\/gKlH35s2b7733HhIs2QTlJk+eDHnILa5WrVrNmDGjR48eXbp0gUXHjh0jxTAyJxa+\/fZbXA5At27d0Gfr1q3EWOTMadOmIWF2794d0fLy8rSx\/wHJHNNgJHb0ARju5uYWGxuLncLM7du3Yw32iJ84NjK8uLh4\/fr1o0aNkkgk2MupU6f69eunf4+NYg5qViVhHo8uuFwPipryURz0kUc4oD9Gae7L2qXJFWjMsrL7bMzLvL9aFVv0c5oPSFT2J0ZCg0iYdvKWAXlNWCaTQVRSVMMuLKC0hvbkjVYEdEA3pNCkpCQkdsiGh+TGFRIybBRqwQKveCYgVFZWFrIxeW0Z3cgrySRsRkaGQCAg68lwRMaFA3kYDqMPfmIZR64NRjELhlXls0kz2ai6pgis3zT9o+pqxiKC\/X1fRYUaq6Vs8lLrvAPkXldWkcaFtRje3JjylKAuYdM3s1EN+CeP6Q1jEcH+PuJeocZInqX32LvN+X8scxtSseSE5nPLViI9PX348OGpRr7xiGKTMCpWepu924x\/8pjbEAFxEM2eqFhj7QUyYzsbbcEFMrKO5m0kld3cMgtUuSiVyXSX8pTAvTJieennqIlT2dt+nzIq0xioCtiEd6t6r8uJvefMlqXZ29WRYjbSSCukYtI0Cdm+Xro3QWNy8zDBvTS8vvKGSTcP0VS3HEqv12HudWNliZV+sIli72g+h\/OTpd9O8U9z0kSzp8xhisaAYVTSnOjZQv+G0mtOUNSYzFivfTXPMSXoWXFYb0aRrbkKUCgVoypmhZ68c8mihmiIaTeYqLEWRl2S6Ss610kc+Hz+xbqKG9x33Ooa9JZeq5Ma1EDg10QS\/51aWWKHt\/4pVUGZwz7oy1fRkoZoiGk3mKOxFrVKKk0\/nRHxbqJvY4FvA5F\/g+QATcNCwtkXhOf75SbsVZRa7bUlil2gyNB8YRtPRUsaoiGm3WC2xjrUqtKywjuy3Oul2iaT3FbJy\/\/\/cRRKJVCNLaPqGmtBzazfKJQqochk49rzVbSkIVpl31HxNGGhxhSKNVBK2MfD+Cpa0hBN80kJe4FqTKkFqEtZ8Qq+ipY0RKvsczhPE1RjSm1AzeYdt9rH6RAH0ezplU6qMaV2IHvMxrTkC1mlVny9UUledLkfX3taoRpTageajzd9pfmwoYGW5rWoujs\/aT518rsnT56USCR2IjPVmFJLYDT\/9C+2LV9Lc1ts24R7IT4+i7t37z5hwgRfX9+8vDyryMyolIxSwTVV7Xp\/MdWYUmtg5GxBsEX\/qARjEYGRg8ePH3t7ezs7O48aNerSpUu5ublVkVmtUpcUlKU9Kn14tSDsYEHIXq6FHcQarMdW9OE61xxUY0ptAqV12mdsdCP1LQeGp6jxhp7oj1GasXrfGVBWViYUCr28vNq2bTt48ODw8HAzymxGrZJKZPE30ra5C71bJM2qlzzDMW2mA2lYxhqsx1b0QU\/05wbWBFRjSi1DLWNyDqUENyy55qg24eN06IOeqSENmZyDGMsF0UOhUEDmxYsXv\/zyy66urlevXi0sLNR9OVR5MIyyTJEpSNk4XDCzXtZshzIvB7W3A7vgXw1rsB5b0Qc90R+jNFODmoBqTKl1QKPS7DBhSPuMkPrycI3MDGnaxKtp2odYLwt3TAuuLwxpV5J1AaO48eWBJBwfH798+fImTZqMHDny\/Pnz5MtSGYOvrYeNhVd\/F8xvkTnLQTGfb69hQx\/0RH+M0ppcA1CNKbUTRl2WJXm8SRjQVBzwTGZoHUmYU\/EVp+Krmp8Fl5ywJiXwmUS\/prkPvlbJs0xMg5A2ISFhxYoVjRo1wpw5KChI93WLBEalLLl\/SeDZON+Tr2vFDf0Fno0wtkbuflGNKbUaRlUqTT+dHbsq7fpY8WVX0lKvjcWagpT\/qRRSrp+ZiEQiZObGjRsPHz7cz8+PfPkpLh1y8T2BVzOJB99SUxpGYSwiVP88mWpMqfUwahTMjFrxr4YS2gJbkJYxPRaLxcuWLWvVqpWLi4u\/v39ptli8rk\/mbEfGYCZsSsMojEUEVUF1fyqDakyxX1BOy+Xy5ORkyPxWh\/Yf\/t+rwlnPqKrkMGkYiwgFYQcY5T9fnF4NUI0p9g5kLi0tTXt4J86jafFcvpnmNkQQLmmjzKvWb86gGlMomiK7OMpfOKeBJamYNEQQzXlWGuWPmFzwJw\/VmEJhGYUs54\/1abMcGQMtzW2IgDiIhphc9CeP2RrLk2Pzzm5N3TI+0at5\/MwGpCV4Nk7eMDD76CfaG+52\/S8qKbaISpqf9o1bfpVuUBs2xEE0xOSiP3lM1phRy5KiUr8ZJ\/BsmOJRP39eHZmXI+oHtbaVzXcsmFsn3aNeksfzwlVdim\/+RWWm2BCqgqzkFZ1kXnwhq9YQB9EQk4v+5DFFY0Ytl+YcWyeY2zhjTl2l1lvD2gNrsB5iSzydkjxegPCqwqzqfwGNQqkCyvwM0ZLWprxny5SGOIiGmFz0J0\/lGqtlxek7pyXNea50nkZU3hEbNkaTnB1SZz+TvKaXqiiXmkyp\/RCNcd7yTuaqNcSpXRqrZdLsX1fCYbmZ9YZyvkPa7DopG4drTaZfmqmhsLAwNzdXqVSq1eri4mKxWMxtoNQ0qsJs8Sc9LX+1iTTEQTTE5KI\/eSrSmFHIiyL+TJrbqGQe\/0BNaTBZNOuZzP8uUpea9+\/tGEbzgVGc6KWlpfrvdzUFw3e6Vw3EMSVUWVkZjlMqlXLv5quQ\/fv3e3l54ZfCqAMHDkybNo3bQKlpcIpm7JqWO4d\/DletIQ6imXvaW4JxjRlGkZkoXNK60LOcmbCJDTk8ybNRSew5E+94wZy8vLwjR44sXbp01qxZ3t7eO3fuRNYyRWa4cfr06aCgIO6xBUDLw4cPx8XFcY\/Lo6ioKCQk5OOPP545c6aHh8e6deuCg4Mrlvn777+fNGkSguMitWfPnjFjxnAbKDUNzk+J\/\/cpM52s8oIT4iBadd7lNaqxuqw09+SX4ll1TJkPG2v4lXLmOKR8OsjEAkMkEk2dOnXw4MFr167dt2\/fpk2bxo0bN2DAgKtXr1aaG5EV58yZs2HDBu6xBWRlZQ0fPtzX15d7bADK488++6xXr14LFizYvXs3nPTx8ZkwYQL85HqUB9W4NiONCxPMeR4lJO8cNrchgtCzYcn9S1zcasGoxoqsJOHiVlUrp\/WbprSe2xAJGamWC20EVJs4y8eOHSsQCMinupGEJRLJsmXLnJ2dMzI0NwwgM5leakdoHsJeJEYsY2H27NmrV6+GhABZHcNlMhkWhEJhQkJCWlpaSUmJLrEjSE7OP\/+tixQC5F+fY7irq+uxY8ewkJ2dXVBQQPoQEOHgwYM4pFu3bum8JdU1WUYoDMEe8Yvg2HRfN0E1rp3g+cLTd\/7sn\/7vN0HW4Z3A5jZESP1iqKqwWv8RnBGNoUekb\/KcZy1\/bxoScupMx1zNm1oqebP4o0eP3njjjRs3buiX0MQu5D04gGWo3qVLF7hNtqInMvaaNWuwDItQ37Zs2bKvlunTp6PExRT07bff7t69ew8tSPK4HGAUQqFW79y5MxZIKDyR2MuDBw+wDHsHDRrUvn17xOnfv\/\/mzZtJHwLkb9Wq1fHjx8vNvQiOXbz\/\/vtkj5gA4\/JBTKYa10LwvPv7+w8bNuzVlq986eEmmFXfkvvVGIsIJXEXcB5wO6gWyteYUZbl\/bUpdSb\/KKvWCjwdUjcOUxXncdGNAMeQAyEt9\/hvoO6qVatQ5UI5ONC4ceP09HSyCRkVm+bPn49laIzp9JIlS6AiQCaEPJ9\/\/jnK8piYmMTERFTmo0aNgjxIlQiFbPn888\/rLhnI26+88kpkpOa\/1EPjIUOG\/Pzzz4iDi0tqairpQ4iIiIDhqP+5x3ogLNIvfgt3d3fsEbuAty4uLuS6QzW2AEZVlq+SZ3NNkY813JaqAoFDQ0MHDhzYrl27pUuXJicnywpy03dNT5lh0gurhg2jMBYRqvPmFqF8jTU37nbPyLPSjbsyLweRTytFbiWvr7i5ueGvqStNdSCp\/vrrr61bt65UY8O5MTRGpU2qboDqGgn2l19+qVTjCubGp06d6tatG\/pwj\/XAoR45cuStt97Kz8\/HRQRAZjh\/9+5dbKUamwujlsnzo3PiPhYEOyf6NRX4NRH4k9Y0KaRLxt2VZQXR6MP1NhkkhkuXLuFJRPWHKRsExhrNmcCoVQWZyWt6ZM4y22T0xyiMRYTqf69E+Rojc6Z+6Wqtl9EwPRYvfEkuvMNFN8LQoUNXrlyJs5x7\/Ddw448\/\/oBjlmuMufHHH388fvx4SzQ+evQoqmXMmbnHeiD+jBkzcBjI\/ITz58+\/+uqrly9fxlaqsekwaoU894LoXFdhQJOMkAZFV5zKIhyUN\/9pJdecMkLrJwU0EZ7rKsu5gP7cSOPgScezHBYWBoGRgT\/66CNMrPRvlwBGrVRK0pM\/6YW8avqMEj3RH6MwFhG4WNVIRRpLq1dj2Dhx4kTe\/SSAk37Lli29e\/e2XGPUUdu2bcNsGc9clTWGmci3mPFyj\/XAMYwePbpTp06oq\/UJDw\/HwVONTUPNKCU50R6ioGb5l5wUNzRfXssYfEWm5iv1bjnA7YJLTqLAZtnRHhiFsVyMf4NnGU+Nn5\/foEGDOnTogOkbpks8gf9BrVLmilM3jxXNqls0t5K0jK3og57oj1E19Z3VxjSWpH41otDMbxUz1qBx8sKX5cmxXHQjBAUFdezYEXNR7vHfQMIRI0asWLECJsDDF198EX2wjE36GkMPDw+P\/\/znP9pBHDyNUTvhKYRpGI4rMTTGKLLJUOOzZ8+STTxQJ7ds2fL27duGJwGiTZ06dfHixagg9CE9qcYmoGZVEiZ+bMHlelDU0F7Dhj7ycAf0xyiM5ZmMvzwSw19\/\/TV27FhcXtevX3\/nzh0ITM4fo6C6Ls7LD94jWtpGPKuuxEPzDgjdB4HQsIw1WI+t6IOemls\/Nfe+YyNzY5k062dvy2++kybD3HhZO2V+JV9QVFhYiDwJzbDArdLmzzNnzrRo0YJML0HPnj0PHDgAE7CsrzGemw8\/\/BAKaXtx8DRGCh02bNh3332HZUxfX3vttaioKPKM6mucm5uLZ\/23337TjDEAM94pU6aMGzfOcHqMo923bx8uRro96rNjx44PPvgAaQEH\/+OPP44aNYrbQOFgWFU+mzSbjaprisD6TdM\/qq5mLCJo737hacJTfPLkSXd3dwi8Zs0aCIzrONmTKTAqRVn64zzfbalfjxQtapky\/8U0r4akYRlrsB5b0afGP89XvsaMSikJ2CmeYYVPUaPleTikfTte828yKgQXzhs3bqBeRVKFtCKR6OHDhyin27Rpg9yFZ4V0++GHH958880rV67Ex8ffu3cPhTTRGEpD+ObNm1+\/fl0gEKAkhlTQ+PXXXw8MDEQJHRcX5+np6eLiQm6GQ3vU8NAV67E1OjoaeZ5oDKWXLFkycuRIxEfmx1VDs2M9MjIyUOS7ubldu3ZNqAWXg507dyImrkEDBgyYMGFCTEwMDiM2NvbQoUMIiFG4LqCow+6QkJHq27Zti\/2SgBQN6hI241s2qgFPUTMaxmZsUSmKJBIJMjCeX0yDly5diueRPAVVAIlZJZWUpT4svnWmKPwEaVjGGqzHVq5fjVK+xjj4kthQkefzVnndWDzTUeK7jVFWfsWCeLAXGuOv36VLl65du2JiifJV\/yKKbLZx48bu3bujD37CmcOHD2M9kio2LVq0yNnZGZtQOaempkJjyNanTx+sAZMnT8ZKckXAVSMnJwd5FXvBph49eqCQTk5OJqFwjYDhOAasX7BgAe8qjggwefXq1RiIPgBHgkIAfmJTZmYmLi7YhMgYjkKO1A44t3DFQXJArobtJKWTgBSkDrYkkr3bjG+mue1us8grP7u7v4u\/v7e3N+bAVRbYhjCmsfajWys6FVg8PVbMdxB6NS2Nj4AcXOgKgQawkaRizEIxsUGa5bb9DZIebESug3VIrUQSADMhEnIjBpJ\/vQWNp0+fjmhYk5SUBH+IwwToijXYilApKSn6+8ICSjKsRzT0MZxKYQ32hQk2jpO8tozDJnNgckHBsSHZIiyOlqzHT4SC5GS2jD7Yqg1GwRNfyAqmsJGOfC3Nbo5ndz67eMFMXIh1J8ZTj1GNNf8C4\/Kvwln1LEnIjLfme4kyds+otKJ+QvDmxpTai1VSsbapo5sy0ttcWPvAqMZA8wLamp65c6r+CaeSeQ5J85vJkqJq6kb8rl27fHx8zLqxQakBUFFn\/8xGOvGErGpz0kRDTLuhIo0ZlUKWeDvJ+6WiuVUxWe7lIPR4Ps93m7rsn\/9VWc1gCora1bAsp9QuVMWs0NPARgsaoiGm3VCRxoApk+WH\/Jg0vzkmyab\/Rww4XzrPQeTxXMae2eqS6n5\/KcX2UOawD\/vxVbSkIRpi2g2VaAwYhbz41mmB90t5Hk7K8r5Mj9fU3povMUnybJh9eIVaVmTinS2KXaPIYGNb81W0pCEaYtoNlWsMGJWyNOGm8KNOyR7PFs\/jvtcWPhOlyQJyNVbK5zumedRLnNe04NLhSj+ZSKFwUI0twySNtTCq4lyJ\/w7BoldRLad71CucV6d0vhNpxV51sj2fgeSJc5tk7l+gyEqiSZhiBopMNq4dX0VLGqIhpt1gusYcquI8aZRf9u9rkj\/9P9GaHqQlr++X8ZNX0bU\/FFlCrh+FYjpKCft4GF9FSxqiaT4pYS+YrTGFYn3Upaz4I76KljREQ0y7gWpMqQUwajbvOBtVj29j1RriIJo9\/Z8DqjGldiB7xMa05AtZtYY4iGZPUI0ptQN1CZv2pebDhjwnzW2IgDiIZk9QjSm1BIaVC9jYtnwtzW2xbTRxLP7CPduCakypNTBytiCIvdOYb6bpDWMLAjVx7AyqMaU2oSmtN7DRDTXfv8VT1HhDT\/THKM1YOyunCVRjSi1DLWOyf0kJfqHkmqPahK\/yQR\/0TAt5AaMwlgtiZ1CNKbUOhlGWZJ8TBrfNCK0nj9DIzJCmTbyapn2I9fJwx\/TgeugpzQrFKG68\/UE1ptROGHVZZt6jL4UBTcQBdbNC60guOhVfcZRedSy+6lhwyQlrUgLrJvo1ybn\/pUqeaW\/3tHhQjSm1GYZRlRSnncyOWZ52bZT48hDSUq6OwpoC8QllWZGdC0ygGlNqPYwKBTOy878ao9B+vwd1WAPVmEKxeajGFIrNQzWmUGweqjGFYvNQjSkUm4dqTKHYPFRjCsXmoRpTKDYP1ZhCsXmoxhSKzUM1plBsHqoxhWLzUI0pFJuHakyh2DxUYwrF5qEaUyg2D9WYQrF5qMYUis1DNaZQbB6qMYVi81CNKRSbh2pModg8VGMKxeahGlMoNg\/VmEKxeajGFIqNw7L\/D2UVLq\/xhw1PAAAAAElFTkSuQmCC\">","fac36ed6":"### Loading dataset\n- Input: there are 30 numeric features\n- Output: a binary variable (1 or 0)","5c24053d":"### Classifier\n\n- Used BaseEstimator as reference.","80d3a8ca":"### Results\n","f5606961":"- Implement a classic perceptron architecture for a binary problem (in a class of type BaseEstimator)\n- Test with a binary database of the scikit-learn datasets module. Ex .: load_breast_cancer","16a13e76":"### Training and testing"}}