{"cell_type":{"e6a148d8":"code","ac4a9b45":"code","99f76693":"code","3fab1dda":"code","c5c4e752":"code","05251707":"code","80fffef2":"code","08d5c74d":"code","ed606b38":"code","ac09728d":"code","0e402b05":"code","2e6a4e13":"code","61ff60a6":"code","98044ed4":"code","7022977f":"code","6287d9c1":"code","35c4db49":"code","96f28f44":"code","40fffb12":"code","c0b2ba7e":"code","2ee9c8db":"code","83ddd0f9":"code","aaf7b396":"code","ca389624":"code","105cd758":"code","56410280":"code","5ff000a3":"code","856f82b2":"code","a05acfc9":"code","87d4882d":"code","63f213ba":"code","318658a8":"code","9bfc8202":"code","fd6dbf4c":"code","a244c116":"code","db5166c8":"code","7e5b1678":"code","0d26d62e":"code","ff3f424b":"code","2d7dbff2":"code","73602a0e":"code","ac7348fe":"code","6ecda49a":"code","9818984f":"code","2d01439f":"code","e06053d6":"code","eff37294":"code","58259dbe":"code","c3edd4b8":"code","4f2a5380":"code","1fa8964b":"code","13bcc270":"code","af03680b":"code","c42931fe":"code","dd3dae63":"code","59c75fa2":"code","91a445b2":"code","029a006e":"code","2009f127":"code","7e528fd6":"code","bd050d7a":"code","f3b44725":"code","5e6fd4af":"code","1a6bd0f1":"code","f4a32b9d":"code","e89bad51":"code","96b1d1e5":"code","03a9dde2":"code","956120c8":"code","ed959989":"code","6b607c0e":"code","f1bc71fa":"code","828a8baa":"code","5a35af73":"code","10962f74":"code","a7e1bf2c":"code","7b7be174":"code","3157b331":"code","0eab31c6":"code","4d8e93ed":"code","107ea837":"code","bf7c306e":"code","0fc2b974":"code","4e983275":"markdown","5df32a03":"markdown","bdf98d95":"markdown","630f315b":"markdown","9aee73d1":"markdown","854a551d":"markdown","62aa3b60":"markdown","de749de8":"markdown","8bbf6563":"markdown","37fd2faa":"markdown","4c2bd159":"markdown","25caa7d2":"markdown","83aab8e8":"markdown","49eca685":"markdown","805b7e34":"markdown","194c3cc6":"markdown","d59e960a":"markdown","8a4111b0":"markdown","06ef59c1":"markdown","48dbf6ad":"markdown","3c15160d":"markdown","dcdca6f2":"markdown","5a56bd2d":"markdown","6ed8464c":"markdown","13ff154b":"markdown","123870b8":"markdown","5e010e0e":"markdown","dca9fd03":"markdown","5606e0a0":"markdown","aaa56d30":"markdown","24b2349a":"markdown"},"source":{"e6a148d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ac4a9b45":"avocado=pd.read_csv(\"..\/input\/avocado.csv\")","99f76693":"avocado.info()","3fab1dda":"columns1=[\"#\",\"Date\",\"AveragePrice\",\"Total Volume\",\"4046\",\"4225\",\"4770\",\"Total Bags\",\"Small Bags\",\"Large Bags\",\"XLarge Bags\",\"type\",\"year\",\"region\"]\navocado.columns=columns1","c5c4e752":"avocado.info()","05251707":"avocado.describe()","80fffef2":"avocado.dtypes","08d5c74d":"avocado.columns","ed606b38":"avocado.head()","ac09728d":"avocado.tail()","0e402b05":"avocado.corr()","2e6a4e13":"f,ax=plt.subplots(figsize=(15,15))\nsns.heatmap(avocado.corr() , annot=True ,linewidths=.5,fmt=\".2f\")\nplt.title(\"Avocado Corralation Map\")\nplt.show()","61ff60a6":"#Line Plot\n\n# Total number of avocados with PLU 4046 sold\n# Total number of avocados with PLU 4225 sold\n\navocado[\"4046\"].plot(kind=\"line\",color=\"red\",linestyle=\":\",label=\"4046\",grid=True,alpha=0.5,figsize=(10,10))\navocado[\"4225\"].plot(kind=\"line\",color=\"green\",linestyle=\":\",label=\"4225\",grid=True,alpha=0.5,figsize=(10,10))\nplt.legend()\nplt.title(\"Data of 4046 and 4225 \")\nplt.show()\n","98044ed4":"#Scatter Plot\n\navocado.plot(kind=\"scatter\",x=\"AveragePrice\",y=\"Small Bags\",color=\"g\",grid=True,linestyle=\"-\",figsize=(10,10))\nplt.title(\"Average price of Small Bags\")\nplt.show()","7022977f":"#Histogram\n\navocado[\"AveragePrice\"].plot(kind=\"hist\",color=\"blue\",bins=30,grid=True,alpha=0.65,label=\"Average Price\",figsize=(10,10))\nplt.legend()\nplt.xlabel(\"Average Price\")\nplt.title(\"Average Price Distribution\")\nplt.show()","6287d9c1":"series=avocado[\"Total Bags\"]\nprint(type(series))\ndf=avocado[[\"Total Bags\"]]\nprint(type(df))","35c4db49":"#1\nfiltre=avocado[\"Total Bags\"]> 35500\navocado[filtre]","96f28f44":"#2\navocado[avocado[\"region\"]==\"Atlanta\"]","40fffb12":"#1\navocado[np.logical_and(avocado[\"year\"]==2015, avocado[\"Total Volume\"]>10)]\n","c0b2ba7e":"#2\navocado[(avocado[\"type\"]==\"conventional\") & (avocado[\"AveragePrice\"]<0.6)]","2ee9c8db":"def list1func():\n    \"\"\" return defined list1 list \"\"\"\n    list1=[\"alex\",\"hagi\",\"maradona\",\"sneijder\"]\n    return list1\na,h,m,s=list1func()\nprint(a,h,m,s)","83ddd0f9":"#1\nx=2\ndef func():\n    x=3\n    return x\nprint(x)        # global scope\nprint(func())   # local scope","aaf7b396":"#2\nx=y=4          # global scope\ndef func2():\n    x=y+1        #local scope\n    return x           \nprint(x)\nprint(func2())","ca389624":"import builtins  #scopes provided by python\ndir(builtins)","105cd758":"def func():\n    \"\"\"return value x*add\"\"\"\n    def add():\n        \"\"\"add local variable \"\"\"\n        x=2\n        y=8\n        z=y+x\n        return z\n    return add()**2\nprint(func())","56410280":"#default arguments\n\ndef func(x,y,z=3):      # default argument is overwritten\n    \"\"\" return x+(y*z) \"\"\"\n    return z+(x*y)\nprint(func(2,1))","5ff000a3":"#flexible arguments\n\ndef func2(*args):\n    for i in args:\n        print(i)\nfunc2(1,2,3,4,5)\n\n#flexible arguments **kwargs --->> dictionary\ndef func3(**kwargs):\n    for key, value in kwargs.items():\n        print(key+\":\"+value)\n        \nfunc3(alex=\"Brazil\",hagi=\"Romania\")\n\n","856f82b2":"def f(x):\n    \"\"\"  \"\"\"\n    return lambda y: y**x  \nsquare=f(2)\ncube=f(3)\nprint(cube(1))\nprint(square(2))","a05acfc9":"limit=avocado.AveragePrice.mean()\nprint(limit)\navocado[\"rating\"]=[\"expensive\" if i>limit else \"cheap\" for i in avocado.AveragePrice]\navocado.loc[0:25,[\"rating\",\"AveragePrice\"]]","87d4882d":"#1\nprint(avocado[\"type\"].value_counts(dropna=False))  #Shows the number of different avocado types","63f213ba":"#2\nprint(avocado[\"year\"].value_counts(dropna=False)) ","318658a8":"print(avocado.boxplot(column=\"AveragePrice\",by=\"year\"))","9bfc8202":"#1\nnewData=avocado.head()\nmelted=pd.melt(frame=newData,id_vars=\"type\",value_vars=[\"Small Bags\",\"Total Bags\"])\nmelted","fd6dbf4c":"data1=avocado[avocado[\"Total Bags\"]>15000000]\ndata2=avocado[avocado[\"Small Bags\"]>10000000]\n#print(data1,data2)\nconcData=pd.concat([data1,data2],axis=0,ignore_index=True)\nconcData\n#print(data1,data2,concData)","a244c116":"avocado.dtypes","db5166c8":"avocado[\"year\"]=avocado[\"year\"].astype(\"float\")\navocado.region=avocado.region.astype(\"category\")\navocado.dtypes","7e5b1678":"avocado.info() ","0d26d62e":"avocado[\"XLarge Bags\"].value_counts(dropna =False) #no null value","ff3f424b":"assert  avocado[\"XLarge Bags\"].notnull().all()   #return empty","2d7dbff2":"#Edit columns name \n#avocado.columns = avocado.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\n#avocado.columns","73602a0e":"data1=avocado.loc[:,[\"Small Bags\",\"AveragePrice\",\"Total Bags\"]]\ndata1.plot()","ac7348fe":"#1 subplots\ndata1.plot(subplots=True)\nplt.show()","6ecda49a":"#2 scatter plot\ndata1.plot(kind=\"scatter\",x=\"AveragePrice\",y=\"Small Bags\")\nplt.show()","9818984f":"#3 hist plot\ndata1.plot(kind=\"hist\",y=\"AveragePrice\",bins=50,range=(0,1))","2d01439f":"#histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"AveragePrice\",bins = 50,range= (0,1),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"AveragePrice\",bins = 50,range= (0,1),normed = True,ax = axes[1],cumulative=True)\nplt.savefig('graph.png')\nplt","e06053d6":"avocado.describe()","eff37294":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","58259dbe":"import warnings\nwarnings.filterwarnings(\"ignore\")\ndata2 = avocado.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2","c3edd4b8":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","4f2a5380":"data2.resample(\"A\").mean()","1fa8964b":"data2.resample(\"M\").mean()","13bcc270":"data2.resample(\"M\").first().interpolate(\"linear\")","af03680b":"data2.resample(\"M\").mean().interpolate(\"linear\")","c42931fe":"avocado=avocado.set_index(\"#\")\navocado.head()","dd3dae63":"avocado[\"AveragePrice\"][1]","59c75fa2":"avocado.AveragePrice[1]","91a445b2":"avocado.loc[1,[\"AveragePrice\"]]","029a006e":"avocado[[\"AveragePrice\",\"Total Bags\"]]","2009f127":"print(type(avocado[\"Total Bags\"]))  #series\nprint(type(avocado[[\"Total Bags\"]]))  #data frames","7e528fd6":"avocado.loc[::,\"AveragePrice\":\"Total Bags\"]","bd050d7a":"avocado.loc[::-1,\"AveragePrice\":\"Total Bags\"]","f3b44725":"avocado.loc[:,\"Large Bags\":]","5e6fd4af":"#1\nfilter1=avocado[\"AveragePrice\"]>3\navocado[filter1]","1a6bd0f1":"#2\nfilter2=avocado[\"AveragePrice\"]>3\nfilter3=avocado[\"year\"]==2017\navocado[filter2 & filter3]","f4a32b9d":"#3\navocado.AveragePrice[avocado.AveragePrice>3]","e89bad51":"def div(n):\n    return n*2\n\navocado.AveragePrice.apply(div)","96b1d1e5":"avocado.AveragePrice.apply(lambda n:n*2)","03a9dde2":"avocado[\"Total\"]=avocado[\"Total Bags\"]+avocado[\"Total Volume\"]\navocado.head()","956120c8":"print(avocado.index.name) #output \"#\"\navocado.index.name=\"index_name\"\navocado.head()","ed959989":"data=avocado.copy()\ndata.index=range(0,18249,1)\ndata.head(50)","6b607c0e":"data2=avocado.set_index([\"region\",\"type\"])\ndata2.head(500)","f1bc71fa":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndframe = pd.DataFrame(dic)\ndframe","828a8baa":"dframe.pivot(index=\"gender\",columns = \"treatment\",values=\"response\")","5a35af73":"df1 = dframe.set_index([\"treatment\",\"gender\"])\ndf1","10962f74":"df1.unstack(level=0)","a7e1bf2c":"df1.unstack(level=1)","7b7be174":"df2 = df1.swaplevel(0,1)\ndf2","3157b331":"#reverse of pivoting\npd.melt(dframe,id_vars=\"treatment\",value_vars=[\"response\",\"age\"])","0eab31c6":"dframe","4d8e93ed":"dframe.groupby(\"treatment\").mean()","107ea837":"dframe.groupby(\"treatment\").age.max()","bf7c306e":"dframe.groupby(\"response\").age.max()","0fc2b974":"dframe.groupby(\"treatment\")[[\"age\",\"response\"]].min()","4e983275":"HIERARCHICAL INDEXING","5df32a03":"> **L\u0130ST COMPREHENS\u0130ON**","bdf98d95":"FILTERING DATA FRAMES","630f315b":">   **CLEANING DATA**","9aee73d1":" >*** MATPLOTL\u0130B***    ","854a551d":"INDEX OBJECTS AND LABELED DATA","62aa3b60":"> **NESTED FUNCT\u0130ON**","de749de8":"PIVOTING DATA FRAMES","8bbf6563":"SLICING DATA FRAME","37fd2faa":"TRANSFORMING DATA","4c2bd159":"> **PANDAS**","25caa7d2":"CONCATENATING DATA","83aab8e8":"STATISTICAL EXPLORATORY DATA ANALYSIS","49eca685":"> **LAMBDA FUNCTION**","805b7e34":"> **DEFAULT and FLEXIBLE ARGUMENTS**","194c3cc6":"DATA TYPES","d59e960a":"*Filtering --> Data Frame *","8a4111b0":"MISSING DATA and TESTING WITH ASSERT","06ef59c1":">** SCOPE**","48dbf6ad":"VISUAL EXPLORATORY DATA ANALYSIS\n","3c15160d":"INDEXING PANDAS TIME SERIES ","dcdca6f2":"EXPLORATORY DATA ANALYSIS","5a56bd2d":"TIDY DATA","6ed8464c":"VISUAL EXPLORATORY DATA ANALYSIS","13ff154b":"> **USER DEF\u0130NED FUNCT\u0130ON**","123870b8":"*Filtering ------> logical and*","5e010e0e":"MELTING DATA FRAMES","dca9fd03":"CATEGORICALS AND GROUPBY","5606e0a0":"STACKING and UNSTACKING DATAFRAME","aaa56d30":"PANDAS TIME SERIES\n","24b2349a":"**MANIPULATING DATA FRAMES WITH PANDAS**\n"}}