{"cell_type":{"20820f15":"code","64ebebc1":"code","55aa99f4":"code","607e90a4":"code","c26c844e":"code","696d312d":"code","d02ab970":"code","841ded92":"code","778427d9":"code","605503af":"code","1ec76f19":"code","5ac52854":"code","2806148e":"code","a94a29af":"code","5aa7ea7b":"code","d99002ed":"code","00897930":"code","d4d26b63":"code","2c403b61":"code","b9f9d50f":"code","4be79098":"markdown","ac8c69fb":"markdown","bd8f4f49":"markdown","b24d71ee":"markdown","8cbb2776":"markdown"},"source":{"20820f15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64ebebc1":"hf = pd.read_excel('\/kaggle\/input\/brazilian-lottery-loto-fcil\/LotoFacil_DataSet.xlsx')","55aa99f4":"hf.tail()","607e90a4":"hf = hf.set_index('Concurso')","c26c844e":"hf.tail()","696d312d":"hf.info()","d02ab970":"#Importing the funcions to perform PLS Regression on our data set\n\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt","841ded92":"X = hf.iloc[: , 16:41] # X containing just the \"C\" - Cumulative sum of the numbers\ny = hf['R5'] # y containing the target cumulative sum for the nest draw for the number 3","778427d9":"n_comp = np.arange(1,26,1)\n\nscore = []\nfor n in n_comp:\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)\n    reg = PLSRegression(n_components= n)\n    reg.fit(X_train, y_train)\n    sc = r2_score(y_test, reg.predict(X_test))\n    score.append(sc)\n\nplt.xlabel('N\u00famero de componentes')\nplt.ylabel('Score')\nplt.plot(n_comp, score)","605503af":"X_count = hf[['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', \n           'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21', 'C22', 'C23', 'C24', 'C25']]\ntargets = ['R1','R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10', 'R11', 'R12','R13', 'R14', \n           'R15', 'R16', 'R17', 'R18', 'R19', 'R20', 'R21', 'R22', 'R23', 'R24', 'R25']","1ec76f19":"#Modelling the answer of the dataset for each target (R's) using 25 components\n\nfor n in targets:\n    X_train, X_test, y_train, y_test = train_test_split (X_count, hf[n], random_state = 0)\n    reg = PLSRegression(n_components = 25)\n    fit = reg.fit(X_train, y_train)\n    sc = r2_score(y_test, reg.predict(X_test))\n    mse = mean_squared_error(y_test, reg.predict(X_test))\n    print('Score {}: {}' .format(n, sc))\n    print('MSE {}: {}' .format(n, mse))","5ac52854":"X_ = X_count.iloc[0:-1, :] # Draws 0 up to 2027\nX_pred = X_count.iloc[2027:] # Draw 2028 to be predicted","2806148e":"#Predicting the answer for the selected draw and saving in 'result.xlsx' file\nresult = []\nfor r in targets:\n    X_train, X_test, y_train, y_test = train_test_split(X_count, hf[r], random_state = 0)\n    pls = PLSRegression(n_components = 25)\n    pls.fit(X_train, y_train)\n    prediction = pls.predict(X_pred)[0]\n    result.append(prediction[0])\nfinal = pd.DataFrame(result, index = targets, columns = ['Predicted'])","a94a29af":"final # Predicted cumulative sum with number of the draw 2028. This are the cumulative that should happen in the draw 2029.","5aa7ea7b":"# Now, let's check what are the numbers to be played.\nX_pred_answer = hf.iloc[2027: ,41:]","d99002ed":"X_transposed = X_pred_answer.T","00897930":"result = X_transposed.merge(final, how = 'inner', right_index = True, left_index = True)","d4d26b63":"result","2c403b61":"result['play'] = round(result['Predicted'] - result[2028])","b9f9d50f":"result","4be79098":"Now you have 11 number with high chance to be in the next draw, just choose other 4 as your wish.\nThis concludes this PLS Method to predict numbers for Loto facil. Good Look!","ac8c69fb":"# As we can see, there is a high correlation between the Cumulative sum and the prediction of the next cumulative sum of the next draw. \n# Now, let's save the last draw of the data set and try to predict.","bd8f4f49":"# Opening the data set, visualizing some draws and cheking the info.","b24d71ee":"Adding a new column with the difference between the real and predicted values, if the difference is one, we play the number (this means that in the next draw the cumulative sum will be higher than now), other wise we don't play.","8cbb2776":"# Test to identify how many components our PLS must have."}}