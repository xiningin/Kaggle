{"cell_type":{"2de63418":"code","c62bfdef":"code","cfb0b8b4":"code","9702b871":"code","0566246c":"code","9d89bc03":"markdown","a574ffb7":"markdown","d12b33a7":"markdown","b4c61c39":"markdown"},"source":{"2de63418":"!pip3 install git+https:\/\/download.radtorch.com\/ -q","c62bfdef":"from radtorch import pipeline, core\nfrom radtorch.settings import *","cfb0b8b4":"data_dir = '\/kaggle\/input\/rsna-str-pulmonary-embolism-detection\/train\/'\ndata_csv = '\/kaggle\/input\/rsna-str-pulmonary-embolism-detection\/train.csv'","9702b871":"df = pd.read_csv(data_csv)\ndf.head()","0566246c":"print ('EXTREME EXPLORATORY DATA ANALYSIS')\nprint('===================================')\nprint ('Number of Studies =', len(df.StudyInstanceUID.unique()))\nprint ('Number of Series =', len(df.SeriesInstanceUID.unique()))\nprint ('Number of Images =', len(df.SOPInstanceUID.unique()))\nprint ('Number of Studies with Positive PE =', len((df[df['negative_exam_for_pe']==0]).SeriesInstanceUID.unique()))  \nprint ('Number of Studies with Negative PE =', len((df[df['negative_exam_for_pe']==1]).SeriesInstanceUID.unique()))  \nprint ('Number of Images with positive PE within Positive Studies =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)]))\nprint ('Number of Images with negative PE within Positive Studies =', len(df.loc[(df['pe_present_on_image'] == 0) & (df['negative_exam_for_pe'] == 0)]))\nprint ('Number of Images with positive PE within Negative Studies =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 1)]))\nprint ('Number of Images with negative PE within Negative Studies =', len(df.loc[(df['pe_present_on_image'] == 0) & (df['negative_exam_for_pe'] == 1)]))\nprint ('')\nprint ('Number of Images with Right sided PE ONLY =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)& (df['rightsided_pe'] == 1)& (df['leftsided_pe'] ==0)& (df['central_pe'] == 0)]))\nprint ('Number of Images with Left sided PE ONLY =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)& (df['leftsided_pe'] == 1)& (df['rightsided_pe'] == 0)&(df['central_pe'] == 0)]))\nprint ('Number of Images with Central PE ONLY =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)& (df['central_pe'] == 1)&(df['rightsided_pe'] == 0)& (df['leftsided_pe'] == 0)]))\nprint ('')\nprint ('Number of Images with Right & Left PE =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)& (df['rightsided_pe'] == 1)& (df['leftsided_pe'] == 1)]))\nprint ('Number of Images with Right & Central PE =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)& (df['rightsided_pe'] == 1)& (df['central_pe'] == 1)]))\nprint ('Number of Images with Left & Central PE =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)& (df['leftsided_pe'] == 1)& (df['central_pe'] == 1)]))\nprint ('Number of Images with Right\/Left\/Central PE =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)& (df['rightsided_pe'] == 1)& (df['leftsided_pe'] == 1)& (df['central_pe'] == 1)]))\nprint ('')\nprint ('Number of Studies which are indeterminate for PE =', len(df[df['indeterminate']==1]))\nprint ('Number of Studies which are indeterminate b\/c contrast issues ONLY =', len(df.loc[(df['indeterminate'] == 1) & (df['qa_contrast'] == 1)& (df['qa_motion'] == 0)]))\nprint ('Number of Studies which are indeterminate b\/c motion issues ONLY =', len(df.loc[(df['indeterminate'] == 1) & (df['qa_motion'] == 1)& (df['qa_contrast'] == 0)]))\nprint ('Number of Studies which are indeterminate b\/c contrast and motion issues =', len(df.loc[(df['indeterminate'] == 1) & (df['qa_motion'] == 1)& (df['qa_contrast'] == 1)]))\nprint ('')\nchronic = len(df.loc[(df['pe_present_on_image'] == 1) & (df['chronic_pe'] == 1)])\nacute_chronic = len(df.loc[(df['pe_present_on_image'] == 1) & (df['acute_and_chronic_pe'] == 1)])\nacute = len(df.loc[(df['pe_present_on_image'] == 1) & (df['negative_exam_for_pe'] == 0)])-(chronic+acute_chronic)\nprint ('Number of Images with positive PE and Acute =', acute)\nprint ('Number of Images with positive PE and Chronic =', chronic)\nprint ('Number of Images with positive PE and Acute\/Chronic =', acute_chronic)\nprint ('')\nprint ('Number of Images with positive PE with flow artifact =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['flow_artifact'] == 1)]))\nprint ('Number of Images with positive PE without flow artifact =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['flow_artifact'] == 0)]))\nprint ('Number of Images with negative PE with flow artifact =', len(df.loc[(df['pe_present_on_image'] == 0) & (df['flow_artifact'] == 1)]))\nprint ('Number of Images with negative PE without flow artifact =', len(df.loc[(df['pe_present_on_image'] == 0) & (df['flow_artifact'] == 0)]))\nprint ('')\nprint ('Number of Images with positive PE with true_filling_defect_not_pe =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['true_filling_defect_not_pe'] == 1)]))\nprint ('Number of Images with positive PE without true_filling_defect_not_pe =', len(df.loc[(df['pe_present_on_image'] == 1) & (df['true_filling_defect_not_pe'] == 0)]))\nprint ('Number of Images with negative PE with true_filling_defect_not_pe =', len(df.loc[(df['pe_present_on_image'] == 0) & (df['true_filling_defect_not_pe'] == 1)&(df['indeterminate'] == 0)]))\nprint ('Number of Images with negative PE without true_filling_defect_not_pe =', len(df.loc[(df['pe_present_on_image'] == 0) & (df['true_filling_defect_not_pe'] == 0)&(df['indeterminate'] == 0)]))\n","9d89bc03":"![](http:\/\/)","a574ffb7":"# Extreme Exploratory Data Analysis","d12b33a7":"![](https:\/\/raw.githubusercontent.com\/elbanan\/RSNA2020\/master\/eda_1.png)","b4c61c39":"### I will be updating the post regularly. Keep Checking :) "}}