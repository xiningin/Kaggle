{"cell_type":{"39a3603e":"code","60132091":"code","55342be6":"code","0c211bea":"code","3d8e9258":"code","ed7c2435":"code","9f42a83f":"code","fcd6870d":"code","42cc4df8":"code","cc5d581a":"code","43859bca":"code","47199571":"code","6ab5e8e3":"code","788fc657":"code","28317638":"code","a7f091c3":"markdown","a1148720":"markdown","f6a01c39":"markdown","6a038d10":"markdown","75c03392":"markdown","11af0693":"markdown","8abfd60e":"markdown","63590459":"markdown"},"source":{"39a3603e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","60132091":"train = pd.read_csv('..\/input\/train.tsv', sep=\"\\t\")\ntest = pd.read_csv('..\/input\/test.tsv', sep=\"\\t\")\nsub = pd.read_csv('..\/input\/sampleSubmission.csv', sep=\",\")","55342be6":"train.head()","0c211bea":"from sklearn.feature_extraction.text import CountVectorizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import text, sequence\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nimport re","3d8e9258":"train['Phrase'] = train['Phrase'].apply(lambda x: x.lower())\ntrain['Phrase'] = train['Phrase'].apply((lambda x: re.sub('[^a-zA-z0-9\\s]','',x)))\n\ntest['Phrase'] = test['Phrase'].apply(lambda x: x.lower())\ntest['Phrase'] = test['Phrase'].apply((lambda x: re.sub('[^a-zA-z0-9\\s]','',x)))","ed7c2435":"print(set(train.Sentiment)) #Output Labels","9f42a83f":"max_fatures = 2000\ntokenizer = Tokenizer(num_words=max_fatures,filters='!\"#$%&()*+,-.\/:;<=>?@[\\\\]^_`{|}~\\t\\n',\n                                   lower=True,split=' ')\ntokenizer.fit_on_texts(train['Phrase'].values)\nX = tokenizer.texts_to_sequences(train['Phrase'].values)\nX = pad_sequences(X)","fcd6870d":"embed_dim = 128\nlstm_out = 196\n\nmodel = Sequential()\nmodel.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))\n#model.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(5,activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\nprint(model.summary())","42cc4df8":"Y = pd.get_dummies(train['Sentiment']).values\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state = 42)\nprint(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)","cc5d581a":"batch_size = 32\nmodel.fit(X_train, Y_train, epochs = 10, batch_size=batch_size, verbose = 1)","43859bca":"validation_size = 1200\n\nX_validate = X_test[-validation_size:]\nY_validate = Y_test[-validation_size:]\nX_test = X_test[:-validation_size]\nY_test = Y_test[:-validation_size]\nscore,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size)\nprint(\"score: %.2f\" % (score))\nprint(\"acc: %.2f\" % (acc))","47199571":"x_test = test['Phrase'].values\nprint(x_test)","6ab5e8e3":"x_test_tokenized = tokenizer.texts_to_sequences(x_test)\nx_testing = sequence.pad_sequences(x_test_tokenized, maxlen=45)","788fc657":"y_testing = model.predict(x_testing, verbose = 1)","28317638":"predictions = np.round(np.argmax(y_testing, axis=1)).astype(int)\nsub['Sentiment'] = predictions\nsub.to_csv(\"submission_result.csv\", index=False)","a7f091c3":"**General information**\nIn this kernel I'll work with data from Movie Review Sentiment Analysis Playground Competition.\n\nThis is a very basic notebook for begineers who wants to get into LSTM keras. I have created the basic model after that you can improve your model.","a1148720":"For improvement you can make a bigger network model. And also use the whole dataset and submit the prediction, you will get good accuracy. \nIf you like Applause. Thank you.","f6a01c39":"**Creating the model**\nNext, I compose the LSTM Network. Note that embed_dim, lstm_out, batch_size, droupout_x variables are hyperparameters, their values are somehow intuitive, can be and must be played with in order to achieve good results. Please also note that I am using softmax as activation function. The reason is that our Network is using categorical crossentropy, and softmax is just the right activation method for that.","6a038d10":"**Importing libraries required**\nWe are using keras with tensorflow as backend.","75c03392":"**Reading the dataset**","11af0693":"Hereby I declare the train and test dataset.","8abfd60e":"Here we train the Network.","63590459":"I am filtering the Phrases so only valid texts and words remain. Then, I define the number of max features as 2000 and use Tokenizer to vectorize and convert text into Sequences so the Network can deal with it as input."}}