{"cell_type":{"6ee253ef":"code","7d4506f9":"code","9641dfc0":"code","08ca4e5b":"code","6356d48f":"code","cec7767f":"code","d9003b1a":"code","4128ebaa":"code","19f1956d":"code","cd0c0132":"code","37411432":"code","31262703":"code","1e7e5aa8":"code","f67c503d":"code","4f42c82d":"code","b9796085":"code","75c1446f":"code","9356ef4d":"code","78377c06":"code","1ab425ed":"code","26f7679a":"code","873b2afa":"code","dfe95013":"code","09bcbce2":"code","6589726d":"code","c9c746bb":"code","ebe79938":"code","fbcce21f":"code","21570d4a":"code","8ec66ebd":"code","eb0633c8":"code","fa6ec3aa":"code","766db94a":"code","ad8ba28d":"code","3555b109":"code","1e9000d4":"code","b1900b19":"code","760cc6a1":"code","72a1cc7b":"code","476d5d9d":"code","62db513c":"code","3024e089":"code","9b4ec9f5":"code","f33de6d2":"code","eb838d65":"code","503ab570":"code","decb37dd":"code","c9623f35":"code","c47eb33b":"code","29f54c4b":"code","7286cc8d":"code","b4001301":"code","a9a7598e":"code","381760a9":"code","6cc31967":"code","da37bcb0":"code","5c63caec":"code","cc082121":"code","4380d823":"code","fde77aaf":"code","854638be":"code","cf10664e":"code","5d82738a":"code","c0d946e1":"code","1992b476":"markdown","071af653":"markdown","143df814":"markdown","482a397f":"markdown","0e70c132":"markdown","da537ae5":"markdown","85573375":"markdown","bc81b0e2":"markdown","c295cdd0":"markdown","0fc85895":"markdown","18ff4a5a":"markdown","a8020786":"markdown","7b373264":"markdown","4e9a3c40":"markdown","4f26ae55":"markdown","29fd6594":"markdown","ac6513fe":"markdown","376d3c69":"markdown","e4281621":"markdown","60f3805d":"markdown","eeb9bbbf":"markdown","d17dbf5d":"markdown","c780d7b1":"markdown","bcc74a0c":"markdown","dc8dd075":"markdown","61514486":"markdown","55ee9a80":"markdown","e8b1e12c":"markdown","4d29faa6":"markdown","48dcac92":"markdown","dfe68149":"markdown","b0bf88e4":"markdown","a893c4c1":"markdown","d9be9a83":"markdown","2f714909":"markdown","202b0a9f":"markdown","7a8afa82":"markdown","75540992":"markdown","ce95300e":"markdown","566e18aa":"markdown","10e22860":"markdown","e5f0b0fc":"markdown","bf9e2e59":"markdown","e0e9cbb3":"markdown","18c569e4":"markdown","751ed2c2":"markdown","68569f54":"markdown","e91ffc9a":"markdown","7abbc94b":"markdown","3116ef19":"markdown","14c70815":"markdown","c18a4c9e":"markdown","e4b48cc1":"markdown","ae38c745":"markdown","cf303842":"markdown","8ab1c234":"markdown","2fe00d6c":"markdown","fa2291d4":"markdown"},"source":{"6ee253ef":"#import libraries\n\nimport pandas as pd\nimport numpy as np\nimport missingno\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats.mstats import winsorize","7d4506f9":"#read data\ndata = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')","9641dfc0":"#glimpse\ndata.head()","08ca4e5b":"#for future reference\nnew_price = data['New_Price']","6356d48f":"data.info()","cec7767f":"#getting brand and model of car from name\ndata['Brand'] = data['Name'].map(lambda x : x.split(' ')[0])\ndata['Model'] = data['Name'].map(lambda x : x.split(' ')[1])\n\n#Converting to string and extracting first value, then converting to float\ndata['Engine(cc)'] = data['Engine'].astype(str).map(lambda x : x.split(' ')[0]).replace('nan' , np.nan).astype(np.float)\n\ndata['Power(bph)'] = data['Power'].astype(str).map(lambda x : x.split(' ')[0]).replace('null' , np.nan).astype(np.float)\n\n#changing data type to float\ndata['Seats'] = data['Seats'].astype(np.float)","d9003b1a":"#since mileage has two units, to keep it consistent, we will convert the km\/kg to km\/l\ndef mileage_convert(x):\n    if type(x) == str:\n        if x.split()[-1] == 'km\/kg':\n            return float(x.split()[0])*1.40\n        elif x.split()[-1] == 'kmpl':\n            return float(x.split()[0])\n    else:\n        return x\n    \ndata['Mileage(km\/l)'] = data['Mileage'].apply(mileage_convert)","4128ebaa":"#drop redundant and un-needed columns\ndata = data.drop(['Unnamed: 0', 'Mileage', 'Engine', 'Power'], axis = 1)","19f1956d":"missingno.matrix(data,figsize=(10,5), fontsize=12);","cd0c0132":"#see null data\nd = data.isnull().any()\n\n#calculating percentage of missing data and storing in a dictionary\nk = {}\nfor i,j in zip(d,data):\n    if i==True:\n        print(\"{} - {} % \".format(j,data[j].isnull().sum()\/(data.shape[0]\/100)))\n        #print(Dtype(j))\n        #print(i,j)\n        k[j] = data[j].isnull().sum()\/(data.shape[0]\/100 )\n        \n\n#removing columns with more that 75% missing data\nfor i in k:\n    if k[i]>=75:\n        data = data.drop([i],axis=1)\n\n#filling rest with mean    \nfor i in data:\n    if data[i].dtype!=object:\n        #print(type(i))\n        data[i].fillna(int(data[i].median()), inplace=True)\n#print(data)","37411432":"#print matrix again\nmissingno.matrix(data,figsize=(10,5), fontsize=12);","31262703":"#statistical summary of the dataframe\ndata.describe()","1e7e5aa8":"data.head()","f67c503d":"sns.boxplot(x = data['Year'])","4f42c82d":"sns.boxplot(x = data['Kilometers_Driven'])","b9796085":"#Outer fences of the variable CRIM\ndef fences(df, variable_name):    \n    q1 = df[variable_name].quantile(0.25)\n    q3 = df[variable_name].quantile(0.75)\n    iqr = q3-q1\n    outer_fence = 3*iqr\n    outer_fence_le = q1-outer_fence\n    outer_fence_ue = q3+outer_fence\n    return outer_fence_le, outer_fence_ue\n\nouter_fence_le, outer_fence_ue = fences(data, 'Kilometers_Driven')\nprint('Lower end outer fence: ', outer_fence_le)\n#-83000.0\nprint('Upper end outer fence: ', outer_fence_ue)\n#190000.0","75c1446f":"#Explore different quantiles at the upper end\nprint('90% quantile:   ', data['Kilometers_Driven'].quantile(0.90))       \nprint('92.5% quantile: ', data['Kilometers_Driven'].quantile(0.925))      \nprint('95% quantile:   ', data['Kilometers_Driven'].quantile(0.95))       \nprint('97.5% quantile: ', data['Kilometers_Driven'].quantile(0.975))      \nprint('99% quantile:   ', data['Kilometers_Driven'].quantile(0.99))       \nprint('99.9% quantile: ', data['Kilometers_Driven'].quantile(0.999))      ","9356ef4d":"data['Kilometers_Driven'] = winsorize(data['Kilometers_Driven'].values, limits = [0, 0.01]).data","78377c06":"sns.boxplot(x = data['Kilometers_Driven'])","1ab425ed":"sns.boxplot(x = data['Seats'])","26f7679a":"# Position of the Outlier\nout_row = np.where(data['Seats']<2)\n\nfor i in out_row:\n    data.drop(i,inplace = True)","873b2afa":"sns.boxplot(x = data['Seats'])","dfe95013":"sns.boxplot(x = data['Mileage(km\/l)'])","09bcbce2":"# Position of the Outlier\nout_row = np.where(data['Mileage(km\/l)']<5)\n\nfor i in out_row:\n    data.drop(i,inplace = True)","6589726d":"sns.boxplot(x = data['Mileage(km\/l)'])","c9c746bb":"sns.boxplot(x = data['Engine(cc)'])","ebe79938":"sns.boxplot(x = data['Power(bph)'])","fbcce21f":"data.Brand.unique()","21570d4a":"data.Model.unique()","8ec66ebd":"''''def car_type(x):\n    \n    hb = ['Alto', 'Indica', 'i10', 'Swift','Figo', 'Altroz', 'Baleno', 'Wagon', 'Tiago', 'Beat', 'Indigo','Jazz','EON']\n    sedan = ['A4','Ciaz','City']\n    suv = ['Creta','Innova','Rover', 'Pajero']\n    muv = ['Ertiga']\n    crossover = []\n    coupe = []\n    convertible = []\n'''","eb0633c8":"data.Location.unique()","fa6ec3aa":"def extract_region(x):\n    if x == 'Delhi' or x == 'Jaipur':\n        return 'North'\n    elif x == 'Bangalore' or x == 'Chennai' or x == 'Coimbatore' or x == 'Hyderabad' or x == 'Kochi':\n        return 'South'\n    elif x == 'Kolkata':\n        return 'East'\n    if x == 'Mumbai' or x == 'Pune' or x == 'Ahmedabad':\n        return 'West'\n    \ndata['Region'] = data['Location'].apply(extract_region)","766db94a":"data.head()","ad8ba28d":"#first we will see the unique values in each of the variables\ndata.Fuel_Type.unique()","3555b109":"#encoding\ndef encode_fuel(x):\n    if x == 'CNG':\n        return 1\n    elif x == 'Diesel':\n        return 2\n    elif x == 'Petrol':\n        return 3\n    elif x == 'LPG':\n        return 4\n    else:\n        return 5\n\ndata['encoded_Fuel_Type'] = data['Fuel_Type'].apply(encode_fuel)","1e9000d4":"#check unique\ndata.Owner_Type.unique()","b1900b19":"#encode\ndef encode_owner(x):\n    if x == 'First':\n        return 1\n    if x == 'Second':\n        return 2\n    if x == 'Third':\n        return 3\n    if x == 'Fourth & Above':\n        return 4\n    \ndata['encoded_Owner_Type'] = data['Owner_Type'].apply(encode_owner)","760cc6a1":"#encode\ndef encode_region(x):\n    if x == 'North':\n        return 1\n    elif x == 'South':\n        return 2\n    elif x == 'East':\n        return 3\n    else:\n        return 4\n    \ndata['encoded_Region'] = data['Region'].apply(encode_region)","72a1cc7b":"pd.get_dummies(data['Fuel_Type'])","476d5d9d":"#new_price.unique()","62db513c":"def new_price_consistent(x):\n    if type(x) == str:\n        if x.split()[-1] == 'Cr':\n            return float(x.split()[0])*100\n        return float(x.split()[0])\n    else:\n        return x\n    \nnew_price = new_price.apply(new_price_consistent)","3024e089":"#new_price.unique()","9b4ec9f5":"#Before Imputation\nbefore_imputation_mean = new_price.mean() \nbefore_imputation_std = new_price.std()","f33de6d2":"sns.histplot(data=new_price)","eb838d65":"#imputing using median\nnew_price.fillna(int(new_price.median()), inplace=True)","503ab570":"#After Imputation\nafter_imputation_mean = new_price.mean() \nafter_imputation_std = new_price.std()","decb37dd":"sns.histplot(data=new_price)","c9623f35":"print(\"Before Mean: \",before_imputation_mean)\nprint(\"After Mean: \",after_imputation_mean)","c47eb33b":"print(\"Before std: \",before_imputation_std)\nprint(\"After std: \",after_imputation_std)","29f54c4b":"data.head()","7286cc8d":"sns.barplot(y=\"Location\", x=\"Price\", data=data)","b4001301":"sns.barplot(y=\"Region\", x=\"Price\", data=data)","a9a7598e":"sns.barplot(y=data['Price'], x=data['Fuel_Type'])","381760a9":"sns.barplot(y=data['Price'], x=data['Transmission'])","6cc31967":"sns.barplot(y=data['Price'], x=data['Owner_Type'])","da37bcb0":"sns.scatterplot(x=data['Kilometers_Driven'], y=data['Price'], color=\".15\")","5c63caec":"sns.lineplot(x=data['Engine(cc)'], y=data['Price'], color=\".15\")","cc082121":"sns.scatterplot(x=data['Engine(cc)'], y=data['Price'], color=\".15\")","4380d823":"sns.lineplot(x=data['Power(bph)'], y=data['Price'], color=\".15\")","fde77aaf":"sns.scatterplot(x=data['Power(bph)'], y=data['Price'], color=\".15\")","854638be":"sns.lineplot(x=data['Mileage(km\/l)'], y=data['Price'], color=\".15\")","cf10664e":"sns.scatterplot(x=data['Mileage(km\/l)'], y=data['Price'], color=\".15\")","5d82738a":"fig_dims = (28, 10)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(x=\"Brand\", y=\"Price\", data=data)","c0d946e1":"fig_dims = (18, 10)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(x=\"Year\", y=\"Price\", data=data)","1992b476":"Since most of the datatypes are ```object``` types, they need to be changed. Apart from this we can also see missing data present.","071af653":"![old car photo](https:\/\/images.unsplash.com\/photo-1495013034289-3664878e32f8?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=783&q=80)","143df814":"Categorical Variables -\n\n1. Fuel_Type\n2. Owner_Type\n3. Region","482a397f":"## Region vs Price","0e70c132":"To get a better view of this positive correlation, let us plot a scatterplot","da537ae5":"## Mileage (km\/l) vs Price","85573375":"## Transmission vs Price","bc81b0e2":"Better!","c295cdd0":"**Coimbatore** and **Bangalore** can be seen to have the highest prices, and **Kolkata** having the least. This huge difference has greatly effected the region wise price too.","0fc85895":"## Using pandas library, we can also do one hot encoding like following:","18ff4a5a":"## Lets go!","a8020786":"## Brand vs Price","7b373264":"# Bivariate Analysis of Price (y) and other variables (X)","4e9a3c40":"(Work in progress) To group the cars, we can use the model name to group them as their types which is hatchback, sedan, SUV, MUV, crossover, coupe or convertible","4f26ae55":"## Owner Type vs Price","29fd6594":"The graph makes perfect sense! We can clearly see that with increase in buying selling, the prices fall.","ac6513fe":"# Comaparing before and after imputation distribution of target variable","376d3c69":"In this project we will do the following\n\n1. Import required libraries \n2. Convert data types and extract features\n3. Treat Missing values\n4. Identify and treat outliers \n5. Decrease number of unique values (cluster)\n6. Encode categorical data\n7. Compare before after imputation value of target variable\n8. Bivariate analysis","e4281621":"# Imports","60f3805d":"Removing the cars, whose mileage is 0","eeb9bbbf":"## Mileage in Km\/l","d17dbf5d":"We can clearly see a positive correlation here, but it has crashes here are there. For example as 3500cc the price has dropped as compared to 3200cc","c780d7b1":"We can see the huge difference in prices based on fuel too. **Diesel** and **Electric** being on the high range. Though it can also be because few high end models have diesel or electric type, like Audi","bcc74a0c":"To encode, here we are using labels, but we can also do **one_hot_encoding** using ```pd.get_dummies```,which will be shown in a while","dc8dd075":"Many Coupe and convertible cars have 560bph power, hence here again, we do not need to remove them","61514486":"Since the years seem to be sane, that is from 1998 to 2019, they dont contain impossible values","55ee9a80":"# Used Cars Exploratory Data Analysis","e8b1e12c":"## Engine in cc","4d29faa6":"## KM driven vs Price","48dcac92":"Some of the values contain 'Cr' and some contain 'Lakhs' which need to be changed for consistency","dfe68149":"## Engine (cc) vs Price","b0bf88e4":"## Seats","a893c4c1":"We can see the two variables were strongly correlated till 300bph, after which the correlation has weakened considerably","d9be9a83":"## Fuel type vs Price","2f714909":"## Power in bph","202b0a9f":"## Location vs Price","7a8afa82":"Since all the locations are major cities and metroes, the only way to divide them is by their region, hence here we are dividing them as north, south, east and west","75540992":"We can see that **South** region has the high end here, which can be said to be greatly because of **Coimbatore** and **Bangalore**.","ce95300e":"Removing the cars having 0 seats","566e18aa":"# Missing Value","10e22860":"# Outliers","e5f0b0fc":"To get rid of this outlier, we will do winsorization, which will put a threshold on the limits, and those will be 1 ","bf9e2e59":"# Data types and Feature Extraction","e0e9cbb3":"## Kilometers Driven","18c569e4":"Fascinating graph, we can see a very faint negative correlation between both. Some of the cars with more km's cost more than the one's with lowest km's. ","751ed2c2":"Like mean, standard deviation too has gone through drops","68569f54":"On googling, I came across cars having 6000cc engine, an example is the ```Range Rover```. Therefore there are no impossible values here","e91ffc9a":"No suprises! Lamborghini has the highest price, while Ambassador,Datsun, Chevrolet and Fiat are the lowest. This can be because of the low availibility of their spare parts and the discontinuation of Chevrolet.\n\nOne interesting find is, Audi, Porsche and Mercedes, have considerably lower price. ","7abbc94b":"Here too, we can see the difference in price, the gap is huge, and can be prevalent because\n1. Newer models, which are costly have automatic type\n2. Older models who have automatic type are mainly high end and hence cost high","3116ef19":"# Unique Value count","14c70815":"Another graph with no surprise!\n\nNewer the car, higher the price.","c18a4c9e":"Here, we can see that ```New Price``` is heavily empty and there are few empty columns here and there. To deal with this we will do the following\n1. Check percentage of missing data, and store in a dictionary\n2. Those columns having more that 75% of data missing will be dropped\n3. The remaining columns, if not string type, will be imputed using median","e4b48cc1":"## Year","ae38c745":"We can see no clear pattern here, the cars with high mileage are low priced. Most of the data is clustered between 10 and 30 km\/l","cf303842":"We can see a significant drop in the mean value after imputation","8ab1c234":"## Year vs Price","2fe00d6c":"## Power(bph) vs Price","fa2291d4":"# Encode categorical variables"}}