{"cell_type":{"5ab4ddb7":"code","143363ac":"code","27cea239":"code","e7c1c48f":"code","6187a743":"code","c9d35dca":"code","8cad0264":"code","8e892072":"code","7ca03830":"code","18599869":"code","6840dbaf":"code","c7154339":"code","14960f6c":"code","1dd10c7a":"code","86e76adf":"code","0086f91d":"code","9a62c0f6":"code","505aa5e8":"code","3291f266":"code","dbc7e033":"code","126cb9d2":"code","a4d9a33f":"code","dc8f1ec3":"code","62fe62e2":"code","959f05e7":"code","11a451b6":"code","12223b4b":"code","788da16f":"code","0a63df4e":"code","2b54ef74":"code","df0dd1ae":"code","35d50b7e":"code","290316fd":"code","e0ed2be2":"code","7e3d470a":"code","2ec6dd73":"code","40699dcb":"code","75223933":"code","7317235b":"code","4e969ace":"code","ea3d75a9":"code","0fcc62b0":"code","83ebf2b0":"code","38fa9484":"code","7b03fb37":"code","e0af83ae":"code","50bbe9eb":"code","456f4030":"code","e9b8567b":"code","d9c6e869":"code","a7c6ae47":"code","6aecaa0d":"code","712d6468":"code","f3dd752a":"code","dd5eb96a":"code","8a28b147":"code","43de62af":"code","a66e3014":"code","254b83f1":"code","a17fa863":"code","d4e45e25":"code","daa32345":"code","8ce45d91":"code","0527d55e":"code","eb3ce3a7":"code","57e96fc4":"code","ed31bda9":"code","b10afd8e":"code","1e4ed184":"code","580b7879":"code","a73c65a7":"code","1716ab59":"code","2fedec78":"code","4e865464":"code","5f3aa036":"code","0516fd78":"code","53c2e6ed":"code","2369182b":"code","8db4e577":"code","a1db1a1a":"code","c5ff2b36":"code","1f8896d9":"code","39abf476":"code","a8625def":"code","f98c3eee":"code","b3f0b433":"code","9ecf9497":"code","6f66f931":"code","24aa3e90":"code","13a85419":"code","3ec294ea":"code","7c415b72":"code","733c1054":"code","1fec38b2":"code","256a6005":"code","dbf8ff68":"code","fc8d152f":"code","d578b3b2":"code","a4989e26":"code","c42d5bb2":"code","089e0333":"code","92bc5551":"code","a02e8f73":"code","301cd755":"code","d268b98c":"code","da7a138d":"code","87639534":"code","25826bb9":"code","481ddc5d":"code","652d94e3":"code","67034361":"code","cac4bc2c":"code","0b3ec81a":"code","d0ecbb65":"code","1e3437c6":"code","2d315ebd":"code","912a76ce":"code","f7657909":"code","05e66937":"code","03e02f73":"code","321fdffa":"code","89b1163d":"code","3235db4b":"code","39f2cede":"code","a6e86d49":"code","aff25ea1":"code","ff26a91c":"code","a5f8b9d6":"code","f5a45ec9":"code","78bf7790":"code","25baa892":"code","6d95b6ab":"code","d6ae7e17":"code","d7fd6bb5":"code","5127460f":"code","aed18ea0":"code","1f11dea7":"code","1b0d383f":"code","830ff31d":"code","5eca0ea8":"code","611e7b88":"code","deb98061":"code","95bbed5a":"code","f575550c":"code","024bb58a":"code","8fdcdfc9":"code","4a20a601":"code","5576d653":"code","5d02bcde":"code","a3c64599":"code","32ad5bb2":"code","97d6b95f":"code","600c098f":"code","872bf6f4":"code","490a3381":"code","302d1d4e":"code","b169d825":"code","065ccbdd":"code","66a4ca7a":"code","5cb7338e":"code","c2f06118":"code","77427a66":"code","8be45e0c":"code","b12fada4":"code","acbfea34":"code","7034d6f7":"code","83c383a9":"code","d68a8ff7":"code","1e14716a":"code","a4c571ef":"code","a148f80a":"code","9768d3d0":"code","e223f402":"code","35ec092b":"code","38260ada":"code","6c1a0e5d":"code","4d6701f8":"code","9733e5da":"code","7abbf3bd":"code","ad5da933":"code","c2373ce7":"code","29c9e694":"code","9c5d36a4":"code","7285eb84":"code","fa2556ef":"code","c14a370d":"code","f9f2fe48":"code","b48eb88c":"code","f39bb539":"code","c8d72ca2":"code","c449f984":"code","bdce6aaf":"code","e434af15":"code","ad586e99":"code","2a1e63fa":"code","1b283bce":"code","ba6cf4f7":"code","af291ce3":"code","5c0a94f7":"code","127709fa":"code","e2d3ad85":"code","4d5879eb":"code","ee3e0b85":"code","10a684a1":"code","cce988a6":"code","3480f342":"code","edb81262":"code","ffa6b66d":"code","10afe7a3":"code","ba588170":"code","a6009327":"code","cbd01c39":"code","529794e4":"code","f532fa0c":"code","fbb00654":"code","a94951f9":"code","e4ab110d":"code","4a74fd5e":"code","e0ffe22e":"code","f52704ef":"code","0b817787":"code","12b527b8":"code","e280843b":"code","c198f014":"code","ef2952fe":"code","6f475043":"code","a599efa8":"code","9074f542":"code","ad7efd61":"code","547161ef":"code","195eaf29":"code","3525a188":"code","823965f5":"code","46489b08":"code","3505ee89":"markdown","d7c28bbb":"markdown","1eedb5ef":"markdown","0b2596a1":"markdown","6b81f865":"markdown","98ed6b8b":"markdown","4335517b":"markdown","6ecad171":"markdown","7f222fcb":"markdown","08fecaff":"markdown","6a11a4e0":"markdown","54e95674":"markdown","ec24704a":"markdown","7189e829":"markdown","8ba9e2c9":"markdown","cf530090":"markdown","257637b7":"markdown","4562dfc8":"markdown","7a7d6fe8":"markdown","61dece05":"markdown","1d7cbd09":"markdown","e7de8614":"markdown","880d3a12":"markdown","7de434c6":"markdown","341a1af6":"markdown","f3273382":"markdown","59212267":"markdown","b89ff017":"markdown","30261f51":"markdown","ca41ee99":"markdown","496d6ca1":"markdown","d874b61c":"markdown","660351c4":"markdown","fa612e0b":"markdown","4e9e9a9b":"markdown","d082f9f8":"markdown","c0b50975":"markdown","7134af65":"markdown","81069bf7":"markdown","a5a9fa0c":"markdown","908fdf59":"markdown","92f87eab":"markdown","1fac20d8":"markdown","f75cbcad":"markdown","136aa14c":"markdown","e3a792d3":"markdown","24f8b7ae":"markdown","e1bf7429":"markdown","50f31870":"markdown","0939c854":"markdown","60e5ee65":"markdown","c43d6e8d":"markdown","11bdc72f":"markdown","0f0a4a47":"markdown","9132db5b":"markdown","5475c9f5":"markdown","be59e241":"markdown","d5cbf161":"markdown","1b93ddf7":"markdown","218b13af":"markdown","895e04a3":"markdown","0852c607":"markdown","b3e42b0f":"markdown","3f7d8633":"markdown","f57141c5":"markdown","7dd0752a":"markdown","41591b6b":"markdown","42399738":"markdown","efd8ae1a":"markdown","a59d18f4":"markdown","978588cf":"markdown","94bbd05f":"markdown","510d9986":"markdown","10ffedc6":"markdown","e4f8a42c":"markdown","e7be0d71":"markdown","0488e9fa":"markdown","d3f0755c":"markdown","63dc25f1":"markdown","dfced247":"markdown","ec1aa989":"markdown","f2b0c7b1":"markdown","f20b2a63":"markdown","b0fae97d":"markdown","8b26cec1":"markdown","2f164988":"markdown","8c56a8ed":"markdown","128fec3c":"markdown","5e6a33a7":"markdown","90e40f82":"markdown","04a1e115":"markdown","9d8f9548":"markdown","3071a8d6":"markdown","9a0a13f8":"markdown","1107fcf5":"markdown","d1216943":"markdown","8ee7dcfd":"markdown","c9358901":"markdown","bcc92cc5":"markdown","4a52bfb0":"markdown","9907d99c":"markdown","b95b640e":"markdown","ae84cdca":"markdown","5a0a74b6":"markdown","417e0f1c":"markdown","1ca5adf7":"markdown","29f0c5c6":"markdown","21efe09d":"markdown","a1079897":"markdown","6b147fa4":"markdown","f414ff3b":"markdown","fe88cebb":"markdown","314c7eb9":"markdown","21c5996d":"markdown","50342d34":"markdown","f9a84bb7":"markdown","4f72d7ec":"markdown","f83b11ce":"markdown","5fa79467":"markdown","da0dabc7":"markdown","8ef3c4fd":"markdown","8e9c40ba":"markdown","6024d342":"markdown","4d91dcb8":"markdown","e43a4386":"markdown","bf09e698":"markdown","3ecc1a91":"markdown","0e1d060b":"markdown","ae5ebd47":"markdown","7072957d":"markdown","b44979b4":"markdown","f80f04e5":"markdown","298d67a1":"markdown","e22dbe3a":"markdown","dad03642":"markdown","ef4828a7":"markdown","a4db2001":"markdown","74ea9948":"markdown","c41c40c0":"markdown","3922b889":"markdown","b5d811fe":"markdown","9c746159":"markdown","2dab40a1":"markdown","21f31ff6":"markdown","dbcfa020":"markdown","0b5137a0":"markdown","c5acd29e":"markdown","6f9161a5":"markdown","175482f4":"markdown","904d971b":"markdown","8d5c0e57":"markdown","1bb23714":"markdown","0656176e":"markdown","19b48c5a":"markdown","56cf568a":"markdown","94d92422":"markdown","bc1920b6":"markdown","01b1d6aa":"markdown","174db0d1":"markdown","cb734e37":"markdown","88e40738":"markdown","408f7df7":"markdown","3e1812ce":"markdown","14d99f8e":"markdown","b063b4aa":"markdown","8b41aff7":"markdown","dde59b21":"markdown","5f96f0e3":"markdown","c4d740cf":"markdown","78fca2ed":"markdown","8750c7e7":"markdown","238fa5ea":"markdown","e8b3a71e":"markdown","0c6d897d":"markdown"},"source":{"5ab4ddb7":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","143363ac":"import warnings\nwarnings.filterwarnings(\"ignore\")","27cea239":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e7c1c48f":"# Add low_memory=False if there are RAM limitations\ndf = pd.read_csv(\"\/kaggle\/input\/lending-club\/accepted_2007_to_2018q4.csv\/accepted_2007_to_2018Q4.csv\",low_memory=False) # takes some time because of the length of file","6187a743":"df.head()","c9d35dca":"len(df)","8cad0264":"# We want to predict if a particular loan was fully paid or charged off (if it was paid or the customer was not able to pay back the loan amount)\ndf['loan_status'].value_counts()","8e892072":"# We will drop rows which have loan_status other than Fully Paid and Charged Off\ndf = df[(df['loan_status'] == 'Fully Paid') | (df['loan_status'] == 'Charged Off')]","7ca03830":"# check number of df after dropping rows. it was 2260701 initially\nlen(df)","18599869":"# lets check if loan_status now has only fully paid and charged off\nsns.countplot(x=df['loan_status'], data=df, palette='viridis')","6840dbaf":"((df.isnull().sum()\/len(df))*100).sort_values(ascending=False)","c7154339":"plt.figure(figsize=(18,4),dpi=300) # make image larger and clearer\n# y contains the % of missing values od each column and x is the index of the series in above cell\nsns.barplot(y=((df.isnull().sum()\/len(df))*100).sort_values(), x=((df.isnull().sum()\/len(df))*100).sort_values().index, palette='viridis') \nplt.xticks(rotation=90); # to rotate x-axis labels from horizontal to vertical","14960f6c":"keep = df.columns[((df.isnull().sum()\/len(df))*100 < 50)].to_list()\nkeep # list of columns to be kept","1dd10c7a":"len(keep)","86e76adf":"df = df[keep] # dropping features with 50% or more missing data","0086f91d":"df.shape","9a62c0f6":"plt.figure(figsize=(18,4),dpi=400)\nsns.barplot(y=((df.isnull().sum()\/len(df))*100).sort_values(), x=((df.isnull().sum()\/len(df))*100).sort_values().index, palette='viridis')\nplt.xticks(rotation=90);","505aa5e8":"final_features = ['addr_state', 'annual_inc', 'earliest_cr_line', 'emp_length', 'emp_title', 'fico_range_high', 'fico_range_low', 'grade', 'home_ownership', 'application_type',\n                    'initial_list_status', 'int_rate', 'loan_amnt', 'num_actv_bc_tl', 'loan_status', 'mort_acc', 'tot_cur_bal', 'open_acc', 'pub_rec', 'pub_rec_bankruptcies', \n                    'purpose', 'revol_bal', 'revol_util', 'sub_grade', 'term', 'title', 'total_acc', 'verification_status']","3291f266":"df = df[final_features]","dbc7e033":"df.shape\n# We now have 27 features to play with (loan_status is the output)","126cb9d2":"df","a4d9a33f":"df.dtypes.value_counts()","dc8f1ec3":"df['loan_status'] # The feature we need to predict","62fe62e2":"df_temp = df.copy() # copy so that it does not affect the original data frame\ndf_temp['loan_status'] = pd.get_dummies(df_temp['loan_status'], drop_first=True)","959f05e7":"plt.figure(figsize=(6,3),dpi=120)\ndf_temp.corr()['loan_status'].sort_values().drop('loan_status').plot(kind='bar', cmap='viridis') # correlation with loan_status for continuous features with loan_status feature dropped\nplt.xticks(rotation=90); ","11a451b6":"plt.figure(figsize=(18,4),dpi=400)\nsns.barplot(y=((df.isnull().sum()\/len(df))*100).sort_values(), x=((df.isnull().sum()\/len(df))*100).sort_values().index, palette='viridis')\nplt.xticks(rotation=90);","12223b4b":"df_missing = ((df.isnull().sum()\/len(df))*100)[((df.isnull().sum()\/len(df))*100) > 0]\ndf_missing","788da16f":"def if_null_values(feat_name):\n    if feat_name in df_missing:\n        return(f\"% of missing values = {df_missing[feat_name].round(2)}\")\n    else:\n        return(\"No missing values\")","0a63df4e":"if_null_values('addr_state')","2b54ef74":"df['addr_state'].unique() # unique values in this feature","df0dd1ae":"len(df['addr_state'].unique())","35d50b7e":"df['addr_state'].value_counts()","290316fd":"add_state_dummies = pd.get_dummies(df['addr_state'], drop_first=True) # drop_first will drop the first dummy column \nadd_state_dummies","e0ed2be2":"df = pd.concat([df.drop('addr_state', axis=1), add_state_dummies], axis=1)","7e3d470a":"if_null_values('annual_inc')","2ec6dd73":"df['annual_inc'].describe()","40699dcb":"plt.figure(figsize=(12,5), dpi=130)\nsns.distplot(x=df['annual_inc'], bins=100)","75223933":"len(df[df['annual_inc'] > 250000])","7317235b":"percent_of_rows_of_customers_with_annual_inc_more_than_250000 = 13447*100\/len(df) ","4e969ace":"percent_of_rows_of_customers_with_annual_inc_more_than_250000","ea3d75a9":"df = df[df['annual_inc'] <= 250000]","0fcc62b0":"len(df)","83ebf2b0":"plt.figure(figsize=(12,5), dpi=130)\nsns.distplot(x=df['annual_inc']);","38fa9484":"sns.displot(data=df, x='annual_inc', hue='loan_status', bins=80, height=5, aspect=3, kde=True, palette='viridis');","7b03fb37":"df.groupby('loan_status')['annual_inc'].describe()","e0af83ae":"if_null_values('earliest_cr_line')","50bbe9eb":"df['earliest_cr_line'].head()","456f4030":"df['earliest_cr_line'] = df['earliest_cr_line'].apply(lambda date: int(date[-4:]))","e9b8567b":"df['earliest_cr_line'].head()","d9c6e869":"sns.displot(data=df, x='earliest_cr_line', hue='loan_status', bins=100, height=4, aspect=3, kde=True, palette='viridis');","a7c6ae47":"df.groupby('loan_status')['earliest_cr_line'].describe()","6aecaa0d":"if_null_values('emp_length')","712d6468":"df['emp_length'].head()","f3dd752a":"emp_length_order = [ '< 1 year', '1 year', '2 years', '3 years', '4 years', '5 years', '6 years', '7 years', '8 years', '9 years', '10+ years']","dd5eb96a":"plt.figure(figsize=(12,4))\nsns.countplot(x='emp_length',data=df,order=emp_length_order, palette='viridis')","8a28b147":"plt.figure(figsize=(14,6))\nsns.countplot(x='emp_length',data=df,order=emp_length_order,hue='loan_status', palette='viridis')","43de62af":"emp_charged_off = df[df['loan_status']==\"Charged Off\"].groupby(\"emp_length\").count()['loan_status']\nemp_fully_paid = df[df['loan_status']==\"Fully Paid\"].groupby(\"emp_length\").count()['loan_status']\npercentage_charged_off = (emp_charged_off * 100)\/(emp_charged_off + emp_fully_paid)\npercentage_charged_off","a66e3014":"plt.figure(figsize=(12,4), dpi=130)\npercentage_charged_off.plot(kind='bar', cmap='viridis')","254b83f1":"df = df.drop('emp_length', axis=1)","a17fa863":"df.columns","d4e45e25":"df.shape","daa32345":"if_null_values('emp_title')","8ce45d91":"df['emp_title'].describe()","0527d55e":"df = df.drop('emp_title', axis=1)","eb3ce3a7":"df['fico_range_high'].describe()","57e96fc4":"df['fico_range_low'].describe()","ed31bda9":"df['fico'] = (df['fico_range_high'] + df['fico_range_low']) \/ 2\ndf['fico']","b10afd8e":"df = df.drop(['fico_range_high', 'fico_range_low'], axis=1)","1e4ed184":"df.shape","580b7879":"plt.figure(figsize=(12,5), dpi=110)\nsns.distplot(x=df['fico'], bins=100)","a73c65a7":"plt.figure(figsize=(20,7), dpi=300)\nsns.displot(data=df, x='fico', hue='loan_status', bins=100, height=4, aspect=3, kde=True, palette='viridis')","1716ab59":"plt.figure(figsize=(10,5), dpi=70)\nsns.boxplot(data=df, y='loan_status', x='fico', palette='viridis')","2fedec78":"df.groupby('loan_status')['fico'].describe()","4e865464":"sorted(df['grade'].unique())","5f3aa036":"sorted(df['sub_grade'].unique())","0516fd78":"plt.figure(figsize=(12,4))\nsns.countplot(x='grade',data=df,hue='loan_status', order=sorted(df['grade'].unique()), palette='viridis');","53c2e6ed":"plt.figure(figsize=(16,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='viridis')","2369182b":"plt.figure(figsize=(16,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='viridis' ,hue='loan_status')","8db4e577":"df = df.drop('grade', axis=1)","a1db1a1a":"dummies_sub_grade = pd.get_dummies(df['sub_grade'], drop_first=True)","c5ff2b36":"df = pd.concat([df.drop('sub_grade', axis=1), dummies_sub_grade], axis=1)","1f8896d9":"df.shape","39abf476":"if_null_values('home_ownership')","a8625def":"df['home_ownership'].value_counts()","f98c3eee":"df['home_ownership'] = df['home_ownership'].replace(['NONE', 'ANY'], 'OTHER')","b3f0b433":"plt.figure(figsize=(12,4))\nsns.countplot(x='home_ownership',data=df,hue='loan_status', palette='viridis')","9ecf9497":"df['home_ownership'].value_counts()","6f66f931":"charged_off = df[df['loan_status']==\"Charged Off\"].groupby(\"home_ownership\").count()['loan_status']\nfully_paid = df[df['loan_status']==\"Fully Paid\"].groupby(\"home_ownership\").count()['loan_status']\npercentage_charged_off = (charged_off * 100)\/(charged_off + fully_paid)\npercentage_charged_off.plot(kind='bar', cmap='viridis')\nplt.title(\"Percentage charged off per home_ownership category\");","24aa3e90":"dummies_home_ownership = pd.get_dummies(df['home_ownership'], drop_first=True)","13a85419":"df = pd.concat([df.drop('home_ownership', axis=1), dummies_home_ownership], axis=1)","3ec294ea":"df.shape","7c415b72":"if_null_values('application_type')","733c1054":"df['application_type'].value_counts()","1fec38b2":"plt.figure(figsize=(12,7))\nsns.countplot(x='application_type',data=df,hue='loan_status', palette='viridis');","256a6005":"charged_off = df[df['loan_status']==\"Charged Off\"].groupby(\"application_type\").count()['loan_status']\nfully_paid = df[df['loan_status']==\"Fully Paid\"].groupby(\"application_type\").count()['loan_status']\npercentage_charged_off = (charged_off * 100)\/(charged_off + fully_paid)\npercentage_charged_off.plot(kind='bar', cmap='viridis')\nplt.title(\"Percentage charged off per application_type category\");","dbf8ff68":"dummies_application_type = pd.get_dummies(df['application_type'], drop_first=True)\ndf = pd.concat([df.drop('application_type', axis=1), dummies_application_type], axis=1)","fc8d152f":"if_null_values('initial_list_status')","d578b3b2":"df['initial_list_status'].value_counts()","a4989e26":"plt.figure(figsize=(12,7))\nsns.countplot(x='initial_list_status',data=df,hue='loan_status', palette='viridis');","c42d5bb2":"charged_off = df[df['loan_status']==\"Charged Off\"].groupby(\"initial_list_status\").count()['loan_status']\nfully_paid = df[df['loan_status']==\"Fully Paid\"].groupby(\"initial_list_status\").count()['loan_status']\npercentage_charged_off = (charged_off * 100)\/(charged_off + fully_paid)\npercentage_charged_off.plot(kind='bar', cmap='viridis')\nplt.title(\"Percentage charged off per initial_list_status category\");","089e0333":"df = df.drop('initial_list_status', axis=1)","92bc5551":"if_null_values('int_rate')","a02e8f73":"df['int_rate'].describe()","301cd755":"df.groupby('loan_status')['int_rate'].describe()","d268b98c":"sns.boxplot(data=df, y='loan_status', x='int_rate', palette='viridis');","da7a138d":"if_null_values('loan_amnt')","87639534":"df['loan_amnt'].describe()","25826bb9":"df.groupby('loan_status')['loan_amnt'].describe()","481ddc5d":"sns.boxplot(data=df, y='loan_status', x='loan_amnt', palette='viridis');","652d94e3":"if_null_values('num_actv_bc_tl')","67034361":"df['num_actv_bc_tl'].describe()","cac4bc2c":"df['num_actv_bc_tl'] = df['num_actv_bc_tl'].fillna(4)","0b3ec81a":"df['num_actv_bc_tl'].isnull().sum()","d0ecbb65":"df.groupby('loan_status')['num_actv_bc_tl'].describe()","1e3437c6":"df = df[df['num_actv_bc_tl'] < 10]","2d315ebd":"df.groupby('loan_status')['num_actv_bc_tl'].describe()","912a76ce":"sns.boxplot(data=df, y='loan_status', x='num_actv_bc_tl', palette='viridis')","f7657909":"if_null_values('mort_acc')","05e66937":"df['mort_acc'].describe()","03e02f73":"df.corr()['num_actv_bc_tl'].sort_values()[:-1]","321fdffa":"df['mort_acc'] = df['mort_acc'].fillna(df.groupby('open_acc')['mort_acc'].transform(lambda x:x.value_counts().index[0]))","89b1163d":"df['mort_acc'].isnull().sum()","3235db4b":"df.groupby('loan_status')['mort_acc'].describe()","39f2cede":"df = df[df['mort_acc'] < 9]","a6e86d49":"df.groupby('loan_status')['mort_acc'].describe()","aff25ea1":"sns.boxplot(data=df, y='loan_status', x='mort_acc', palette='viridis')","ff26a91c":"if_null_values('total_acc')","a5f8b9d6":"df['total_acc'].describe()","f5a45ec9":"plt.figure(figsize=(24,4))\nplt.xticks(rotation=90)\nsns.countplot(data=df, x='total_acc', palette='viridis');","78bf7790":"df = df[df['total_acc'] < 64]","25baa892":"df.shape","6d95b6ab":"plt.figure(figsize=(24,4))\nplt.xticks(rotation=90)\nsns.countplot(data=df, x='total_acc', palette='viridis');","d6ae7e17":"plt.figure(figsize=(24,4))\nplt.xticks(rotation=90)\nsns.countplot(data=df, x='total_acc', hue='loan_status', palette='viridis');","d7fd6bb5":"df.groupby('loan_status')['total_acc'].describe()","5127460f":"if_null_values('tot_cur_bal')","aed18ea0":"df['tot_cur_bal'].describe()","1f11dea7":"df['tot_cur_bal'] = df['tot_cur_bal'].fillna(df['tot_cur_bal'].describe()['mean'])","1b0d383f":"df['tot_cur_bal'].isnull().sum()","830ff31d":"plt.figure(figsize=(24,6))\nsns.histplot(data=df, x='tot_cur_bal', bins=400, palette='viridis');","5eca0ea8":"df = df[df['tot_cur_bal'] < 1000001]","611e7b88":"plt.figure(figsize=(24,6))\nsns.histplot(data=df, x='tot_cur_bal', bins=150, palette='viridis');","deb98061":"plt.figure(figsize=(24,6))\nsns.histplot(data=df, x='tot_cur_bal', bins=150, hue='loan_status', palette='viridis');","95bbed5a":"df.groupby('loan_status')['tot_cur_bal'].describe()","f575550c":"if_null_values('open_acc')","024bb58a":"plt.figure(figsize=(24,6))\nsns.countplot(data=df, x='open_acc', palette='viridis');","8fdcdfc9":"plt.figure(figsize=(24,6))\nsns.countplot(data=df, x='open_acc', hue='loan_status', palette='viridis');","4a20a601":"df.groupby('loan_status')['open_acc'].describe()","5576d653":"if_null_values('pub_rec')","5d02bcde":"plt.figure(figsize=(24,6))\nsns.histplot(data=df, x='pub_rec', palette='viridis');","a3c64599":"len(df[df['pub_rec'] > 2])*100\/len(df)","32ad5bb2":"df = df[df['pub_rec'] < 3]","97d6b95f":"df.groupby('loan_status')['pub_rec'].describe()","600c098f":"if_null_values('pub_rec_bankruptcies')","872bf6f4":"abs(df.corr()['pub_rec_bankruptcies']).sort_values(ascending=False)[1:5]","490a3381":"def inc_cat(income):\n    if income < 50000:\n        return('cat 1')\n    if income >= 50000 and income <100000:\n        return('cat 2')\n    if income >= 100000 and income <150000:\n        return('cat 3')\n    if income >= 150000 and income <200000:\n        return('cat 4')\n    if income >= 200000:\n        return('cat 5')\n\ndf['annual_inc_categorised'] = df['annual_inc'].apply(inc_cat) # make a new column in the df for categorised income","302d1d4e":"df[['annual_inc_categorised', 'annual_inc']]","b169d825":"df['pub_rec_bankruptcies'] = df['pub_rec_bankruptcies'].fillna(df.groupby('annual_inc_categorised')['pub_rec_bankruptcies'].transform('mean'))","065ccbdd":"df['pub_rec_bankruptcies'].isnull().sum()","66a4ca7a":"df = df.drop('annual_inc_categorised', axis=1)","5cb7338e":"df.groupby('loan_status')['pub_rec_bankruptcies'].describe()","c2f06118":"if_null_values('purpose')","77427a66":"len(df['purpose'].unique())","8be45e0c":"plt.figure(figsize=(14,6))\nsns.countplot(data=df,x='purpose', hue='loan_status', palette='viridis');\nplt.xticks(rotation=90);","b12fada4":"plt.figure(figsize=(14,6))\ncharged_off = df[df['loan_status']==\"Charged Off\"].groupby(\"purpose\").count()['loan_status']\nfully_paid = df[df['loan_status']==\"Fully Paid\"].groupby(\"purpose\").count()['loan_status']\npercentage_charged_off = (charged_off * 100)\/(charged_off + fully_paid)\npercentage_charged_off.plot(kind='bar', cmap='viridis')\nplt.title(\"Percentage charged off per purpose category\");","acbfea34":"dummies_purpose = pd.get_dummies(df['purpose'], drop_first=True)","7034d6f7":"df = pd.concat([df.drop('purpose', axis=1), dummies_purpose], axis=1)","83c383a9":"df.shape","d68a8ff7":"if_null_values('term')","1e14716a":"df['term'].unique()","a4c571ef":"df['term'] = df['term'].apply(lambda x: int(x[0:3]))","a148f80a":"sns.countplot(data=df, x='term', palette='viridis')","9768d3d0":"charged_off = df[df['loan_status']==\"Charged Off\"].groupby(\"term\").count()['loan_status']\nfully_paid = df[df['loan_status']==\"Fully Paid\"].groupby(\"term\").count()['loan_status']\npercentage_charged_off = (charged_off * 100)\/(charged_off + fully_paid)\npercentage_charged_off.plot(kind='bar', cmap='viridis')\nplt.title(\"Percentage charged off per term category\");","e223f402":"dummies_term = pd.get_dummies(df['term'], drop_first=True)","35ec092b":"pd.concat([df.drop('term', axis=1), dummies_term], axis=1)","38260ada":"if_null_values('title')","6c1a0e5d":"len(df['title'].unique())","4d6701f8":"df['title'].head(10)","9733e5da":"df = df.drop('title', axis=1)","7abbf3bd":"df.shape","ad5da933":"if_null_values('revol_bal')","c2373ce7":"sns.boxplot(data=df, y='loan_status', x='revol_bal', palette='viridis')","29c9e694":"len(df[df['revol_bal'] > 100000])","9c5d36a4":"len(df[df['revol_bal'] > 100000]) * 100 \/ len(df)","7285eb84":"df = df[df['revol_bal'] < 100001]","fa2556ef":"sns.boxplot(data=df, y='loan_status', x='revol_bal', palette='viridis');","c14a370d":"df.groupby('loan_status')['revol_bal'].describe()","f9f2fe48":"if_null_values('revol_util')","b48eb88c":"df['revol_util'] = df['revol_util'].fillna(df['revol_util'].mean())","f39bb539":"df['revol_util'].isnull().sum()","c8d72ca2":"plt.figure(figsize=(24,6))\nsns.histplot(data=df, x='revol_util', bins=88, palette='viridis');","c449f984":"df = df[df['revol_util'] < 150]","bdce6aaf":"plt.figure(figsize=(24,6))\nsns.histplot(data=df, x='revol_util', bins=88, palette='viridis');","e434af15":"plt.figure(figsize=(24,6))\nsns.histplot(data=df, x='revol_util', bins=88, hue='loan_status', palette='viridis');","ad586e99":"sns.boxplot(data=df, y='loan_status', x='revol_util', palette='viridis')","2a1e63fa":"df.groupby('loan_status')['revol_util'].describe()","1b283bce":"if_null_values('verification_status')","ba6cf4f7":"df['verification_status'].value_counts()","af291ce3":"sns.countplot(data=df, x='verification_status', hue='loan_status', palette='viridis');","5c0a94f7":"charged_off = df[df['loan_status']==\"Charged Off\"].groupby(\"verification_status\").count()['loan_status']\nfully_paid = df[df['loan_status']==\"Fully Paid\"].groupby(\"verification_status\").count()['loan_status']\npercentage_charged_off = (charged_off * 100)\/(charged_off + fully_paid)\npercentage_charged_off.plot(kind='bar', cmap='viridis')\nplt.title(\"Percentage charged off per verification_status category\");","127709fa":"dummies_verification_status = pd.get_dummies(df['verification_status'], drop_first=True)\ndf = pd.concat([df.drop('verification_status', axis=1), dummies_verification_status], axis=1)","e2d3ad85":"df['loan_status'] = df['loan_status'].map({'Fully Paid':1,'Charged Off':0})","4d5879eb":"df['loan_status']","ee3e0b85":"df.dtypes.value_counts()","10a684a1":"df.shape ","cce988a6":"X = df.drop('loan_status', axis=1)","3480f342":"y = df['loan_status']","edb81262":"from sklearn.model_selection import train_test_split","ffa6b66d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15) # keeping 15% for test ","10afe7a3":"from sklearn.preprocessing import MinMaxScaler","ba588170":"scaler = MinMaxScaler()","a6009327":"X_train = scaler.fit_transform(X_train)","cbd01c39":"X_test = scaler.transform(X_test)","529794e4":"from xgboost import XGBClassifier","f532fa0c":"# fit model to training data\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)","fbb00654":"preds = model.predict(X_test) ","a94951f9":"from sklearn.metrics import accuracy_score,plot_confusion_matrix,classification_report","e4ab110d":"print(classification_report(y_test,preds))","4a74fd5e":"plot_confusion_matrix(model,X_test,y_test)","e0ffe22e":"from sklearn.ensemble import RandomForestClassifier","f52704ef":"rf = RandomForestClassifier(n_estimators=100)","0b817787":"rf.fit(X_train,y_train)","12b527b8":"preds = rf.predict(X_test)","e280843b":"print(classification_report(y_test,preds))","c198f014":"plot_confusion_matrix(rf,X_test,y_test)","ef2952fe":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.constraints import max_norm","6f475043":"model = Sequential()\n\n# input layer\nmodel.add(Dense(119,  activation='relu'))\nmodel.add(Dropout(0.1))\n\n# hidden layer\nmodel.add(Dense(78,  activation='relu'))\nmodel.add(Dropout(0.1))\n\n# hidden layer\nmodel.add(Dense(39, activation='relu'))\nmodel.add(Dropout(0.1))\n\n# hidden layer\nmodel.add(Dense(19, activation='relu'))\nmodel.add(Dropout(0.1))\n\n# output layer\nmodel.add(Dense(units=1,activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam')\n\n# With GPUs, Kaggle provides 13 GB of RAM whereas using only the CPU, we get 16 Gb of RAM. Somehow 13 Gb is just not sufficient here. With GPU, it takes around 14 sec for each epoch.\n# So I am using just CPU for ANN as well. The below error is probably due to that. ","a599efa8":"model.fit(x=X_train, \n          y=y_train, \n          epochs=10,\n          batch_size=256,\n          validation_data=(X_test, y_test), \n          )","9074f542":"losses = pd.DataFrame(model.history.history)","ad7efd61":"losses[['loss','val_loss']].plot()","547161ef":"from sklearn.metrics import classification_report,confusion_matrix","195eaf29":"predictions = (model.predict(X_test) > 0.5).astype(\"int32\")\nprint(classification_report(y_test,predictions))","3525a188":"from sklearn.metrics import ConfusionMatrixDisplay\n\ncm = confusion_matrix(y_test,predictions)\nf = sns.heatmap(cm, annot=True, fmt='d', cmap='viridis', square=True) #plot_confusion_matrix does not work directly for ANN","823965f5":"predictions = (model.predict(X_test) > 0.7).astype(\"int32\")\nprint(classification_report(y_test,predictions))","46489b08":"from sklearn.metrics import ConfusionMatrixDisplay\n\ncm = confusion_matrix(y_test,predictions)\nf = sns.heatmap(cm, annot=True, fmt='d', cmap='viridis', square=True) #plot_confusion_matrix does not work directly for ANN","3505ee89":"The salary distribution is highly skewed towards right.<br>\nLet's find how many customers have annual_inc > $250000.","d7c28bbb":"We will read the 'accepted_2007_to_2018Q4' data file from which we will source the necessary data.","1eedb5ef":"Lets remove the month and just keep the year as integer.","0b2596a1":"It is imbalanced.","6b81f865":"## 4.16 tot_cur_bal\n<a id=\"4.16\"><\/a>","98ed6b8b":"Let's check the distribution now.","4335517b":"Minute difference can be seen in the mean 'pub_rec' between the two 'loan_status' categories. We will go ahead and keep this feature.","6ecad171":"The job title supplied by the Borrower when applying for the loan.","7f222fcb":"Lets drop the features with 50% or more missing data since, 1. It is difficult to fill in values for so many missing rows, 2. There are 151 features, we need to reduce them significantly because the size of the data set (1345310 rows) otherwise the hardware would not be able to support the data set.","08fecaff":"Difference can be seen betweeen percentage charged off per 'initial_list_status' categories.","6a11a4e0":"The initial listing status of the loan. Possible values are \u2013 W, F.","54e95674":"The mean annual_inc for customers who fully paid the loan and who did not differs by around $5000.","ec24704a":"Create an ascending order list ","7189e829":"Percentage charged off per initial_list_status category.","8ba9e2c9":"The total number of credit lines currently in the borrower's credit file.","cf530090":"# 7. Conclusion\n<a id=\"7\"><\/a>","257637b7":"Lets check if that worked.","4562dfc8":"Check number of cutomers separated by grade and based on their loan_status.","7a7d6fe8":"## 4.10 initial_list_status\n<a id=\"4.10\"><\/a>","61dece05":"Plot the distribution of annual incomes","1d7cbd09":"Let's convert these strings to integers.","e7de8614":"'num_actv_bc_tl' and 'open_acc' are closely related. Let's fill missing 'mort_acc' by the mode of corresponding value in 'num_actv_bc_tl'.","880d3a12":"The aim of this project is to predict the chance that a loan will charge off, i.e., the customers who are not able to pay back the loan amount. Since customers who don't pay back their loan amount are a source of loss for the company, we want to build a model which predicts if a particular applicant will or will not be able to payback the loan amount. We are going to act as a data scientist for LendingClub for this particular project and try to search for potential solution for their problem. Ofcourse some domain knowledge is required but we will be skipping those features that are outside our understanding. Without further ado, let's directly jump onto solving the challenge!","7de434c6":"## 4.6 fico_range_high and fico_range_low\n<a id=\"4.6\"><\/a>","341a1af6":"## 4.23 revol_bal\n<a id=\"4.23\"><\/a>","f3273382":"Number of currently active bankcard accounts.","59212267":"Drop 'addr_state' feature and concat 'add_state_dummies' to df.","b89ff017":"Columns with missing values and % of missing values.","30261f51":"Mean earliest_cr_line for customers who fully paid the loan was approx. 1 year before the customers who did not pay the loan.","ca41ee99":"Let's merge 'ANY' and 'NONE' into 'OTHER'.","496d6ca1":"Difference can be seen in the mean 'total_acc' between the two 'loan_status' categories. We will go ahead and keep this feature.","d874b61c":"Interest Rate on the loan.","660351c4":"Check distribution of earliest_cr_line of customers who Fully Paid the loan and customers who did not.","fa612e0b":"Percentage charged off per application_type category.","4e9e9a9b":"We will try out these models:<br>\nXGBoost<br>\nRandom Forests<br>\nANN","d082f9f8":"Since, this feature is categorical, let's create dummy variables. We will also drop the original feature (application_type) and concat the newly created dummy features.","c0b50975":"There are still some outliers but that's okay because we can't drop a good percentage of rows.","7134af65":"## 6.1 XGBoost\n<a id=\"6.1\"><\/a>","81069bf7":"Create a function to check % of missing data for a particular column.","a5a9fa0c":"There are some outliers. Let's drop the rows with customers who have 'pub_rec > 2.","908fdf59":"Clear difference can be seen in the mean 'int_rate' between the two 'loan_status' categories.","92f87eab":"# 6. Creating Models\n<a id=\"6\"><\/a>","1fac20d8":"Since we don't have a clear understanding for many features, it would be unwise to include them into our analysis without truly understanding a feature. \\\nMoreover, not all features will be available to us before a person gets loan. \\\nSome features will only be available after a person gets a loan. We have the following features we will be proceeding with:","f75cbcad":"Clear difference can be seen in the mean 'loan_amnt' between the two 'loan_status' categories.","136aa14c":"## 4.2 annual_inc\n<a id=\"4.2\"><\/a>","e3a792d3":"Check number of customers in each sub_grade separated by loan_status","24f8b7ae":"Since there are some outliers, we will drop rows with customers with 'tot_cur_bal' > $1000000.","e1bf7429":"## 4.1 addr_state\n<a id=\"4.1\"><\/a>","50f31870":"Total credit revolving balance.","0939c854":"It's just 0.64%, let's just drop these","60e5ee65":"We will convert the feature into dummies.","c43d6e8d":"For some reason number of states is 51, rather than 50. I don't have the required info about which extra 'state' is present here. We'll proceed with 51 states.","11bdc72f":"## 4.25 verification_status\n<a id=\"4.25\"><\/a>","0f0a4a47":"Lets drop the original columns.","9132db5b":"The month the borrower's earliest reported credit line was opened.","5475c9f5":"## 4.19 pub_rec_bankruptcies\n<a id=\"4.19\"><\/a>","be59e241":"Let's plot a countplot for different categories for application types, separated by loan_status.","d5cbf161":"# 3. Data Cleaning\n<a id=\"3\"><\/a>","1b93ddf7":"There are some outliers. Let's drop them.","218b13af":"Visible differences between different categories of home_ownership.","895e04a3":"There is not much differnce. This feature won't make much differnece in our training and predictions. Hence, its better to drop this feature.","0852c607":"Let's plot the distribution of 'open_acc' of customers.","b3e42b0f":"# 5. Scaling and Test Train split\n<a id=\"5\"><\/a>","3f7d8633":"Minute difference can be seen in the mean 'open_acc' between the two 'loan_status' categories. We will go ahead and keep this feature.","f57141c5":"Let's create dummy variables for this feature.","7dd0752a":"All features are done, except the feature we want to predict. Let us map the contents in the feature, i.e., 'Fully Paid' and 'Charged Off' to boolean values.","41591b6b":"## 4.12 loan_amnt\n<a id=\"4.12\"><\/a>","42399738":"## 4.13 num_actv_bc_tl\n<a id=\"4.13\"><\/a>","efd8ae1a":"### Objectives","a59d18f4":"There are 13447 rows of customers with annual_inc > 250000, i.e., 1%. Since these are outliers, let's drop these rows.","978588cf":"## 4.7 grade and sub_grade\n<a id=\"4.7\"><\/a>","94bbd05f":"The number of open credit lines in the borrower's credit file.","510d9986":"Check number of customers in each sub_grade.","10ffedc6":"## 4.5 emp_title\n<a id=\"4.5\"><\/a>","e4f8a42c":"Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.","e7be0d71":"Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.","0488e9fa":"Percentage charged off is almost same. Let's drop this feature.","d3f0755c":"Let's plot 'initial_list_status' for the two 'loan_status'.","63dc25f1":"## 4.17 open_acc\n<a id=\"4.17\"><\/a>","dfced247":"## 4.9 application_type\n<a id=\"4.9\"><\/a>","ec1aa989":"Indicates whether the loan is an individual application or a joint application with two co-borrowers.","f2b0c7b1":"Difference can be seen in the mean 'revol_bal' between the two 'loan_status' categories. We will go ahead and keep this feature.","f20b2a63":"# 1. Introduction and Objectives\n<a id=\"1\"><\/a>","b0fae97d":"We will create a function to categorise 'annual_inc' in 5 categories and based on these categories, we will fill in the missing values of 'pub_rec_bankruptcies' by a group_by call.","8b26cec1":"Let's now drop the 'annual_inc_categorised' feature.","2f164988":"Lets check the distributions of annual income of customers who fully paid the loan whose loan was charged off.","8c56a8ed":"There are 14 categorical features currently.","128fec3c":"### Introduction","5e6a33a7":"This is still not indicating if there's any relationship between emp_length and being charged off. Let us find % of charged off customers per year.","90e40f82":"% of rows with annual income > $250000.","04a1e115":"Let's fill na values with mode of corresponding annual_inc values.","9d8f9548":"Difference can be seen in the mean 'revol_util' between the two 'loan_status' categories.","3071a8d6":"int_rate, fico_range_high and fico_range_low are highly correlated with loan_status compared to other features.","9a0a13f8":"Let us now fill in the missing value by the mean value of 'pub_rec_bankruptcies' for the corresponding 'annual_inc_categorised' column.","1107fcf5":"Let's fill null values with mean.","d1216943":"The number of payments on the loan. Values are in months and can be either 36 or 60.","8ee7dcfd":"Customers whose loan term was 60 months had almost double chance of charging off.","c9358901":"We can try out plethora of models. Unfortunately, due to the size of this data set, the hardware available to us in Kaggle (RAM specifically) exceeds the max alloted to us and so, I am only able to test a couple of (or three) models at once. ","bcc92cc5":"Let's check if that worked.","4a52bfb0":"This is a categorical feature which needs to be converted into dummies.","9907d99c":"# LendingClub Loan Data Prediction (EDA and Model Building)","b95b640e":"There is a differnce between fico scores of customers who Fully paid loan and wh did not.","ae84cdca":"Since there are some outliers, we will drop rows with customers with mort_acc > 8.","5a0a74b6":"Total current balance of all accounts.","417e0f1c":"Let's create dummy variables for these.","1ca5adf7":"As sub_grade is categorical, lets create dummies for the same.","29f0c5c6":"Number of derogatory public records.","21efe09d":"*By Aayush Kumar*","a1079897":"We have removed those 1749 rows. We had 1345310 rows initially and after droping 13447 rows we have 1331863 rows.","6b147fa4":"Indicates if income was verified by LC, not verified, or if the income source was verified.","f414ff3b":"What percentage of total rows is 8098?","fe88cebb":"Percentage charged off per home_ownership category.","314c7eb9":"Both fico_range_high and fico_range_low have similar mean and standard deviation. So, we will use mean of both scores.","21c5996d":"Let's calculate the correlation of 'pub_rec_bankruptcies' with other continuous features.","50342d34":"Let's find the % of null values in each column sorted in descending order of missing values.","f9a84bb7":"## 4.24 revol_util\n<a id=\"4.24\"><\/a>","4f72d7ec":"Range of num_actv_bc_tl is from 0 to 35 with mean at 3.64 and mojority of values between 2 to 5. Lets fill the missing values with the integer value closest to mean, i.e., 4.","f83b11ce":"## 4.11 int_rate\n<a id=\"4.11\"><\/a>","5fa79467":"# 2. Basic Libraries and File Imports\n<a id=\"2\"><\/a>","da0dabc7":"It is still a bit skewed but exceedingly better than before.","8ef3c4fd":"Let's check the distribution now.","8e9c40ba":"This feature has a lot of unique values for dummies. Plus this info and the info in feature purpose is closely matching. Lets drop this feature.","6024d342":"## Table of Contents\n\n* [1. Introduction and Objectives](#1)\n* [2. Basic Libraries and File Imports](#2)\n* [3. Data Cleaning](#3)\n* [4. Preprocessing, Exploratory Analysis and Feature Engineering](#4)\n * [4.1 addr_state](#4.1)\n * [4.2 annual_inc](#4.2)\n * [4.3 earliest_cr_line](#4.3)\n * [4.4 emp_length](#4.4)\n * [4.5 emp_title](#4.5)\n * [4.6 fico_range_high and fico_range_low](#4.6)\n * [4.7 grade and sub_grade](#4.7)\n * [4.8 home_ownership](#4.8)\n * [4.9 application_type](#4.9)\n * [4.10 initial_list_status](#4.10)\n * [4.11 int_rate](#4.11)\n * [4.12 loan_amnt](#4.12)\n * [4.13 num_actv_bc_tl](#4.13)\n * [4.14 mort_acc](#4.14)\n * [4.15 total_acc](#4.15)\n * [4.16 tot_cur_bal](#4.16)\n * [4.17 open_acc](#4.17)\n * [4.18 pub_rec](#4.18)\n * [4.19 pub_rec_bankruptcies](#4.19)\n * [4.20 purpose](#4.20)\n * [4.21 term](#4.21)\n * [4.22 title](#4.22)\n * [4.23 revol_bal](#4.23)\n * [4.24 revol_util](#4.24)\n * [4.25 verification_status](#4.25)\n* [5. Scaling and Test Train split](#5)\n* [6. Creating Models](#6)\n * [6.1 XGBoost](#6.1)\n * [6.2 Random Forests](#6.2)\n * [6.3 ANN](#6.3)\n* [7. Conclusion](#7)","4d91dcb8":"Let's check percentage charged off per initial_list_status category.","e43a4386":"Let's make a countplot of number of customers with different 'total_acc'.","bf09e698":"### Scaling","3ecc1a91":"Concat the 'dummies_sub_grade' after dropping the original feature 'sub_grade'.","0e1d060b":"## 6.3 ANN\n<a id=\"6.3\"><\/a>","ae5ebd47":"Let us examine each feature, drop those which seem unimportant and create dummies for the ones which are categorical.","7072957d":"## 4.22 title\n<a id=\"4.22\"><\/a>","b44979b4":"Lets calculate features with missing values. ","f80f04e5":"If you are unsure what drop_first=True does, check this out: https:\/\/stackoverflow.com\/questions\/63661560\/drop-first-true-during-dummy-variable-creation-in-pandas.","298d67a1":"Minute difference can be seen in the mean 'num_actv_bc_tl' between the two 'loan_status' categories. We will go ahead and keep this feature.","e22dbe3a":"Minute difference can be seen in the mean 'mort_acc' between the two 'loan_status' categories. We will go ahead and keep this feature.","dad03642":"Create dummies for loan_status so that correlation can be calculated wrt to loan_status for other continuous features.","ef4828a7":"There are 378007 unique values, way too many to create dummies. Hence, it is wise to drop this feature.","a4db2001":"LendingClub is is a US peer-to-peer lending company and the world's largest peer-to-peer lending platform. According to Wikipedia,\n> LendingClub is a peer-to-peer lending company, headquartered in San Francisco, California. It was the first peer-to-peer lender to register its offerings as securities with the Securities and Exchange Commission (SEC), and to offer loan trading on a secondary market. At its height, LendingClub was the world's largest peer-to-peer lending platform. The company claims that 15.98 billion in loans had been originated through its platform up to December 31, 2015. LendingClub enabled borrowers to create unsecured personal loans between 1,000 dollars and 40,000 dolars. The standard loan period was three years. Investors were able to search and browse the loan listings on LendingClub website and select loans that they wanted to invest in based on the information supplied about the borrower, amount of loan, loan grade, and loan purpose. Investors made money from the interest on these loans. LendingClub made money by charging borrowers an origination fee and investors a service fee.","74ea9948":"## 4.18 pub_rec\n<a id=\"4.18\"><\/a>","c41c40c0":"Since there are some outliers, we will drop rows with customers with 'total_acc' > 63.","3922b889":"The question arises, what are we actually trying to predict?<br>\nBeing in the shoes of a data scientist of a loan proider company, my aim, in the given scenario would be to predict as accurately as possible the customers whose loan was charged off, i.e., they were not able to fully pay their loan. We might be able to predict the cases where a customer won't pay back the loan amount but that will also result in cases where the model predicts that a customer will not pay back the loan amount but in reality, the customer will. This way, the company will lose potential customers.<br>\nSo, there is always a trade-off. We need to step back and question, whatare we trying to do and what work has already been done? <br>\nThe current model, far from perfect, was an attempt to build a prototype to predict the customers who will fully pay or would not be able to payback the amount. Although, there is a scope of improvement by considering more features and test out different paramenters for different models. I was reaching the permissible RAM limits in my notebook, hence I was not able to thoroughly test out different parameters and more models.<br>\nAny suggestions to improve the notebook are welcome!","b5d811fe":"Lets remove the rows with annual_inc > $250000","9c746159":"Since there are only 4 categories in home_ownership column, we will convert it into dummies.","2dab40a1":"Mean 'tot_cur_bal' is higher in case of customers who fully paid the loan.","21f31ff6":"## 4.20 purpose\n<a id=\"4.20\"><\/a>","dbcfa020":"Range of mort_acc is from 0 to 51 with mean at 1.66","0b5137a0":"A category provided by the borrower for the loan request.","c5acd29e":"## 4.15 total_acc\n<a id=\"4.15\"><\/a>","6f9161a5":"There are some outliers. Let's first check how many rows are there with 'revol_bal' > $100000.","175482f4":"Number of public record bankruptcies.","904d971b":"## 4.21 term\n<a id=\"4.21\"><\/a>","8d5c0e57":"## 4.3 earliest_cr_line\n<a id=\"4.3\"><\/a>","1bb23714":"The loan title provided by the borrower.","0656176e":"Visible differences between different categories of home_ownership.","19b48c5a":"Let's plot the distribution of 'tot_cur_bal' of the customers.","56cf568a":"## 4.4 emp_length\n<a id=\"4.4\"><\/a>","94d92422":"Minute difference can be seen in the mean 'pub_rec' between the two 'loan_status' categories. We will go ahead and keep this feature.","bc1920b6":"## 4.8 home_ownership\n<a id=\"4.8\"><\/a>","01b1d6aa":"The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.","174db0d1":"LC assigned loan grade and sub grade.","cb734e37":"Customers who don't pay back loan have higher grade.<br>\nInformation of 'grade' is already embedded in 'sub_grade'.<br>\nLet's drop 'grade' feature.","88e40738":"Let's fill in the missing values with the mean of non missing values in 'revol_util'.","408f7df7":"## 6.2 Random Forests\n<a id=\"6.2\"><\/a>","3e1812ce":"# 4. Preprocessing, Exploratory Analysis and Feature Engineering\n<a id=\"4\"><\/a>","14d99f8e":"Number of mortgage accounts.","b063b4aa":"Since there are some outliers, we will drop rows with customers with 'num_actv_bc_tl' > 9.","8b41aff7":"Check available files.","dde59b21":"Let's check unique grade and sub_grade categories.","5f96f0e3":"Let's plot the % of missing values.","c4d740cf":"## 4.14 mort_acc\n<a id=\"4.14\"><\/a>","78fca2ed":"Concat the 'dummies_home_ownership' after dropping the original feature 'home_ownership'","8750c7e7":"The state provided by the borrower in the loan application.","238fa5ea":"The home ownership status provided by the borrower during registration or obtained from the credit report. Our values are: RENT, OWN, MORTGAGE, OTHER.","e8b3a71e":"The self-reported annual income provided by the borrower during registration.","0c6d897d":"Check distribution of fico score of customers who Fully Paid the loan and customers who did not."}}