{"cell_type":{"e843f37b":"code","c53b113d":"code","2b5dc95d":"code","eee03eeb":"code","cdb3ae98":"code","1a9d2231":"code","32da11fa":"code","31bf4df8":"code","6399730f":"code","f058e375":"markdown","36cf2962":"markdown","66743dab":"markdown","6f30ca94":"markdown","8803071a":"markdown","9bf5386e":"markdown","35cc964b":"markdown","001741ac":"markdown","1ed69173":"markdown","4ec1d445":"markdown","abc53ecb":"markdown","a7e40ce8":"markdown","09d503e5":"markdown","0831ad20":"markdown","654d26c3":"markdown","022d7ea9":"markdown","60727c3e":"markdown","ff05ea8d":"markdown"},"source":{"e843f37b":"import numpy as np\nimport os \nimport matplotlib.pyplot as plt\nimport cv2\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport keras\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, LeakyReLU, Reshape, Flatten, Input\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Conv2DTranspose\n\nfrom tensorflow.compat.v1.keras.layers import BatchNormalization","c53b113d":"def list_images(basePath, contains=None):\n    # return the set of files that are valid\n    return list_files(basePath, validExts=(\".jpg\", \".jpeg\", \".png\", \".bmp\"), contains=contains)\n\ndef list_files(basePath, validExts=(\".jpg\", \".jpeg\", \".png\", \".bmp\"), contains=None):\n    # loop over the directory structure\n    for (rootDir, dirNames, filenames) in os.walk(basePath):\n        # loop over the filenames in the current directory\n        for filename in filenames:\n            # if the contains string is not none and the filename does not contain\n            # the supplied string, then ignore the file\n            if contains is not None and filename.find(contains) == -1:\n                continue\n\n            # determine the file extension of the current file\n            ext = filename[filename.rfind(\".\"):].lower()\n\n            # check to see if the file is an image and should be processed\n            if ext.endswith(validExts):\n                # construct the path to the image and yield it\n                imagePath = os.path.join(rootDir, filename).replace(\" \", \"\\\\ \")\n                yield imagePath\n                \ndef load_images(directory='', size=(64,64)):\n    images = []\n    labels = []  # Integers corresponding to the categories in alphabetical order\n    label = 0\n    \n    imagePaths = list(list_images(directory))\n    \n    for path in imagePaths:\n        \n        if not('OSX' in path):\n        \n            path = path.replace('\\\\','\/')\n\n            image = cv2.imread(path) #Reading the image with OpenCV\n            image = cv2.resize(image,size) #Resizing the image, in case some are not of the same size\n\n            images.append(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    \n    return images","2b5dc95d":"images=load_images('..\/input\/data')","eee03eeb":"_,ax = plt.subplots(5,5, figsize = (8,8)) \nfor i in range(5):\n    for j in range(5):\n        ax[i,j].imshow(images[5*i+j])\n        ax[i,j].axis('off')","cdb3ae98":"class GAN():\n    def __init__(self):\n        self.img_shape = (64, 64, 3)\n        \n        self.noise_size = 100\n\n        optimizer = Adam(0.0002,0.5)\n\n        self.discriminator = self.build_discriminator()\n        self.discriminator.compile(loss='binary_crossentropy', \n                                   optimizer=optimizer,\n                                   metrics=['accuracy'])\n\n        self.generator = self.build_generator()\n        self.generator.compile(loss='binary_crossentropy', optimizer=optimizer)\n        \n        self.combined = Sequential()\n        self.combined.add(self.generator)\n        self.combined.add(self.discriminator)\n        \n        self.discriminator.trainable = False\n        \n        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)\n        \n        self.combined.summary()\n        \n    # Creating the generator, the large kernels in the convolutional layers allow the network to create complex structures.\n    def build_generator(self):\n        epsilon = 0.00001 # Small float added to variance to avoid dividing by zero in the BatchNorm layers.\n        noise_shape = (self.noise_size,)\n        \n        model = Sequential()\n        \n        model.add(Dense(4*4*512, activation='linear', input_shape=noise_shape))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Reshape((4, 4, 512)))\n        \n        model.add(Conv2DTranspose(512, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(256, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(128, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(64, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(3, kernel_size=[4,4], strides=[1,1], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n\n        # Standard activation for the generator of a GAN\n        model.add(Activation(\"tanh\"))\n        \n        model.summary()\n\n        noise = Input(shape=noise_shape)\n        img = model(noise)\n\n        return Model(noise, img)\n\n    def build_discriminator(self):\n\n        model = Sequential()\n\n        model.add(Conv2D(128, (3,3), padding='same', input_shape=self.img_shape))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(Conv2D(128, (3,3), padding='same'))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(MaxPooling2D(pool_size=(3,3)))\n        model.add(Dropout(0.2))\n\n        model.add(Conv2D(128, (3,3), padding='same'))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(Conv2D(128, (3,3), padding='same'))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(MaxPooling2D(pool_size=(3,3)))\n        model.add(Dropout(0.3))\n\n        model.add(Flatten())\n        model.add(Dense(128))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dense(128))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dense(1, activation='sigmoid'))\n        \n        model.summary()\n        \n        img = Input(shape=self.img_shape)\n        validity = model(img)\n\n        return Model(img, validity)\n\n    def train(self, epochs, batch_size=128, metrics_update=50, save_images=100, save_model=2000):\n\n        X_train = np.array(images)\n        X_train = (X_train.astype(np.float32) - 127.5) \/ 127.5\n\n        half_batch = int(batch_size \/ 2)\n        \n        mean_d_loss=[0,0]\n        mean_g_loss=0\n\n        for epoch in range(epochs):\n            idx = np.random.randint(0, X_train.shape[0], half_batch)\n            imgs = X_train[idx]\n\n            noise = np.random.normal(0, 1, (half_batch, self.noise_size))\n            gen_imgs = self.generator.predict(noise)\n\n            # Training the discriminator\n            \n            # The loss of the discriminator is the mean of the losses while training on authentic and fake images\n            d_loss = 0.5 * np.add(self.discriminator.train_on_batch(imgs, np.ones((half_batch, 1))),\n                                  self.discriminator.train_on_batch(gen_imgs, np.zeros((half_batch, 1))))\n\n            # Training the generator\n            noise = np.random.normal(0, 1, (batch_size, self.noise_size))\n\n            valid_y = np.array([1] * batch_size)\n            g_loss = self.combined.train_on_batch(noise, valid_y)\n            \n            mean_d_loss[0] += d_loss[0]\n            mean_d_loss[1] += d_loss[1]\n            mean_g_loss += g_loss\n            \n            # We print the losses and accuracy of the networks every 200 batches mainly to make sure the accuracy of the discriminator\n            # is not stable at around 50% or 100% (which would mean the discriminator performs not well enough or too well)\n            if epoch % metrics_update == 0:\n                print (\"%d [Discriminator loss: %f, acc.: %.2f%%] [Generator loss: %f]\" % (epoch, mean_d_loss[0]\/metrics_update, 100*mean_d_loss[1]\/metrics_update, mean_g_loss\/metrics_update))\n                mean_d_loss=[0,0]\n                mean_g_loss=0\n            \n            # Saving 25 images\n            if epoch % save_images == 0:\n                self.save_images(epoch)\n            \n            # We save the architecture of the model, the weights and the state of the optimizer\n            # This way we can restart the training exactly where we stopped\n            if epoch % save_model == 0:\n                self.generator.save(\"generator_%d\" % epoch)\n                self.discriminator.save(\"discriminator_%d\" % epoch)\n\n    # Saving 25 generated images to have a representation of the spectrum of images created by the generator\n    def save_images(self, epoch):\n        noise = np.random.normal(0, 1, (25, self.noise_size))\n        gen_imgs = self.generator.predict(noise)\n        \n        # Rescale from [-1,1] into [0,1]\n        gen_imgs = 0.5 * gen_imgs + 0.5\n\n        fig, axs = plt.subplots(5,5, figsize = (8,8))\n\n        for i in range(5):\n            for j in range(5):\n                axs[i,j].imshow(gen_imgs[5*i+j])\n                axs[i,j].axis('off')\n\n        plt.show()\n        \n        fig.savefig(\"animeGenerated\/Faces_%d.png\" % epoch)\n        plt.close()","1a9d2231":"#This folder will contain the images generated during the training\n!mkdir animeGenerated","32da11fa":"gan=GAN()\ngan.train(epochs=15001, batch_size=256, metrics_update=200, save_images=1000, save_model=15000)","31bf4df8":"!pip show tensorflow","6399730f":"!pip show keras","f058e375":"## Looking at some images","36cf2962":"## Importing libraries and loading data","66743dab":"The objective of a GAN is to train a data generator in order to imitate a given dataset.\nA GAN is similar to a zero sum game between two neural networks, the generator of data and a discriminator, trained to recognize original data from fakes created by the generator.","6f30ca94":"### Things to keep in mind while training a GAN","8803071a":"## Training the networks","9bf5386e":"## Generative Adversarial Networks","35cc964b":"In a Deep Convolutional GAN, the data generator has the following structure :","001741ac":"<img src=\"https:\/\/skymind.ai\/images\/wiki\/GANs.png\" width=\"800px\">","1ed69173":"### Training session","4ec1d445":"A high batch size leads to a more regular convergence.\n\nWe will save the model at the end of the training, we save the architecture of the model, the weights and the state of the optimizer. It allows us to restart the training exactly where we stopped.\n\nWe will look at a sample of images every 1000 epoch.","abc53ecb":"**In the case of a GAN, cost functions may not converge using gradient descent.**\n<br\/>Training a GAN is very different from training a regular neural network. The main difference come from the fact that the discriminator also evolves.\nTherefore, the cost function that the generator tries to minimize is also evolving.\n\n**The discriminator must be powerful enough to recognize small differences between the real and fake images.**\n<br\/>If the discriminator does not perform well, the generator cannot progress.\nIf the accuracy of the discriminator stabilizes near 50%, the generator already tricks the discriminator well and does not need to improve.\n\n**The two networks must progress in synergy to avoid a diminished gradient during the training of the generator.**\n<br\/>The discriminator must not be too effective at the beginning, if it is, the generator will not progress until it randomly creates a very convincing image.\n\nWe want to avoid **mode collapse** which is when the generator creates the same output no matter the input noise.\nIt leads to an overfitting from the discriminator which remembers the features of the fake, no matter how convincing it is.\n\n**A high learning rate creates a situation in which both networks overfit to exploit short term opponent weaknesses.**\n<br\/>The **learning rate** of the optimizer must be carefully chosen.\nA high learning rate prevents the generator from reaching a certain level of details, it prevents the convergence.\nIt also leads to an overfitting from the discriminator which recognizes the most recent features made by the generator but forgets the previous ones.","a7e40ce8":"It takes a noise vector as the input in order to diversify the potential outputs.\n<br><br>In a simplified way, after the training each dimension will correspond to a feature of the image, for example the hair shape of the character.","09d503e5":"## Creating the GAN","0831ad20":"A few images are convincing and those images present different hair styles, hair colors or face orientations.\n\n**We avoided mode collapse** and the networks seem to have a good synergy with a stable accuracy at around 85% for the discriminator during most of the training.\n\nHowerver, the generator does not create globally convincing faces, for example some of them present different shape and colors between the two eyes.","654d26c3":"<img src=\"https:\/\/pytorch.org\/tutorials\/_images\/dcgan_generator.png\" width=\"800px\">","022d7ea9":"At each step, the discriminator is trained on a batch containing real and fake images. The generator is then trained to produce a batch of images.\n<br>**In order to create effective GANs on images, we must use convolutional layers in the discriminator and in the generator.**","60727c3e":"**The goal is to create new faces of anime characters using a Deep Convolutional Generative Adversarial Network (DCGAN).**","ff05ea8d":"# Generating Faces"}}