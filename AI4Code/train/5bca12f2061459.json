{"cell_type":{"c567882c":"code","48d926b5":"code","da88051b":"code","3bfa3d22":"code","df866b29":"code","ff522b23":"code","57dba50b":"code","88bf9489":"code","bbd10bcb":"code","1bb468cf":"code","b2dada20":"code","64a3226e":"code","09c318c1":"code","b4f97771":"code","b6bc2847":"code","c463a305":"code","6caf46b2":"code","15e74f10":"code","45f63b5c":"code","3d8aca37":"code","1b465a4e":"markdown"},"source":{"c567882c":"import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# %tensorflow_version 2.x  # this line is not required unless you are in a notebook\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","48d926b5":"fashion_mnist = keras.datasets.fashion_mnist  # load dataset\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","da88051b":"train_images.shape","3bfa3d22":"train_images[0,23,23]  # let's have a look at one pixel","df866b29":"train_labels[:10]  # let's have a look at the first 10 training labels","ff522b23":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","57dba50b":"plt.figure()\nplt.imshow(train_images[1])\nplt.colorbar()\nplt.grid(False)\nplt.show()","88bf9489":"n = len(class_names)","bbd10bcb":"train_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","1bb468cf":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),  # input layer (1)\n    keras.layers.Dense(128, activation='relu'),  # hidden layer (2)\n    keras.layers.Dense(n, activation='softmax') # output layer (3)\n])","b2dada20":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","64a3226e":"model.fit(train_images, train_labels, epochs=10) \n# we pass the data, labels and epochs and watch the magic!","09c318c1":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=1) \nprint('Test accuracy:', test_acc)","b4f97771":"predictions = model.predict(test_images)","b6bc2847":"predictions[0]","c463a305":"np.argmax(predictions[0])","6caf46b2":"test_labels[0]","15e74f10":"COLOR = 'white'\nplt.rcParams['text.color'] = COLOR\nplt.rcParams['axes.labelcolor'] = COLOR\n\ndef predict(model, image, correct_label):\n    class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n    prediction = model.predict(np.array([image]))\n    predicted_class = class_names[np.argmax(prediction)]\n    show_image(image, class_names[correct_label], predicted_class)\n    return predicted_class\n\ndef show_image(img, label, guess):\n    plt.figure()\n    plt.imshow(img, cmap=plt.cm.binary)\n    plt.title(\"Expected: \" + label)\n    plt.xlabel(\"Guess: \" + guess)\n    plt.colorbar()\n    plt.grid(False)\n    plt.show()\n\ndef get_number():\n    while True:\n        num = input(\"Pick a number: \")\n        if num.isdigit():\n            num = int(num)\n            if 0 <= num <= 1000:\n                return int(num)\n        else:\n            print(\"Try again...\")\n\nnum = get_number()\nimage = test_images[num]\nlabel = test_labels[num]\nguess = predict(model, image, label)","45f63b5c":"print(f\"Expected: {label}\")","3d8aca37":"print(f\"Guess: {guess}\")","1b465a4e":"hyperparameter tuning"}}