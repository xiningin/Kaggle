{"cell_type":{"62257004":"code","f9133140":"code","4b4ca628":"code","a11284e5":"code","0e39ce16":"code","7b53a5d7":"code","be2a4500":"code","c48c44d9":"code","f198a480":"code","923ec3ec":"code","ecfea8b4":"code","bb0e259e":"code","5f90e702":"code","39fc88b1":"code","251eef11":"code","d9c1c207":"code","b60529e4":"code","ffe3eb05":"code","aa8bdc91":"code","1295ad1d":"markdown","37c51825":"markdown","58ea6777":"markdown","4a78e8c5":"markdown","2934f2f4":"markdown","a16656d9":"markdown","b8c6c763":"markdown","1762b7a1":"markdown","e0580089":"markdown","5119bc18":"markdown","feb4fc2d":"markdown","2419b85c":"markdown","407acd4f":"markdown","1a9cdb32":"markdown","1f985725":"markdown"},"source":{"62257004":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom collections import defaultdict\nfrom collections import  Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\nimport tensorflow as tf\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.regularizers import l1\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Embedding,LSTM,Dense,SpatialDropout1D\nfrom keras.initializers import Constant\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\nfrom sklearn.metrics import accuracy_score \nimport numpy as np\nfrom time import time\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f9133140":"data= pd.read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv', encoding='latin-1')\ndata","4b4ca628":"data=data.iloc[:,:2]\ndata['message_len'] = data.v2.apply(len)\ndata['v1']=data['v1'].replace({'ham':0,'spam':1})\ndata.head()","a11284e5":"plt.figure(figsize=(12, 8))\n\ndata[data.v1==0].message_len.plot(bins=35, kind='hist', color='blue', \n                                       label='Ham messages', alpha=0.6)\ndata[data.v1==1].message_len.plot(kind='hist', color='red', \n                                       label='Spam messages', alpha=0.6)\nplt.legend()\nplt.xlabel(\"Message Length\")","0e39ce16":"df=data.iloc[:,:2]\ndf.head()","7b53a5d7":"def clean_text(text):\n \n    text = re.sub('[^a-zA-Z]', ' ', text)  \n\n    text = text.lower()  \n\n    text = text.split(' ')  \n    \n    text = [w for w in text if not w in set(stopwords.words('english'))] \n\n    text = ' '.join(text)    \n            \n    return text\n\n\n\ndf['v2'] = df['v2'].apply(lambda x : clean_text(x))\ndf.head()","be2a4500":"def create_corpus(df):\n    corpus=[]\n    for tweet in tqdm(df['v2']):\n        words=[word.lower() for word in word_tokenize(tweet) if((word.isalpha()==1) & (word not in stop))]\n        corpus.append(words)\n    return corpus\n\ncorpus=create_corpus(df)","c48c44d9":"embedding_dict={}\nwith open('\/kaggle\/input\/glove-global-vectors-for-word-representation\/glove.6B.50d.txt','r') as f:\n    for line in f:\n        values=line.split()\n        word=values[0]\n        vectors=np.asarray(values[1:],'float32')\n        embedding_dict[word]=vectors\nf.close()","f198a480":"MAX_LEN=10\ntokenizer_obj=Tokenizer()\ntokenizer_obj.fit_on_texts(corpus)\nsequences=tokenizer_obj.texts_to_sequences(corpus)\n\ntweet_pad=pad_sequences(sequences,maxlen=MAX_LEN,truncating='post',padding='post')","923ec3ec":"word_index=tokenizer_obj.word_index\nprint('Number of unique words:',len(word_index))","ecfea8b4":"num_words=len(word_index)+1\nembedding_matrix=np.zeros((num_words,50))\n\nfor word,i in tqdm(word_index.items()):\n    if i > num_words:\n        continue\n    \n    emb_vec=embedding_dict.get(word)\n    if emb_vec is not None:\n        embedding_matrix[i]=emb_vec","bb0e259e":"X_train,X_val, y_train, y_val = train_test_split(tweet_pad,df.v1, test_size=.2, random_state=2)","5f90e702":"print('Shape of train sequences: ',X_train.shape)\nprint('Shape of train labels: ',y_train.shape)\nprint(\"Shape of Validation sequences: \",X_val.shape)\nprint(\"Shape of Validation  labels: \",y_val.shape)","39fc88b1":"model=Sequential()\n\nembedding_layer=Embedding(num_words,50,embeddings_initializer=Constant(embedding_matrix),\n                   input_length=MAX_LEN,trainable=False)\n\nmodel.add(embedding_layer)\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2,return_sequences=True))\nmodel.add(tf.keras.layers.LSTM(32,return_sequences=True))\nmodel.add(tf.keras.layers.LSTM(16))\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\n\nmodel.add(Dense(1, activation='sigmoid'))","251eef11":"optimzer=Adam(learning_rate=1e-4)\nmodel.compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['acc'])\nmodel.summary()","d9c1c207":"history=model.fit(X_train,y_train,batch_size=32,epochs=10,validation_data=(X_val,y_val),verbose=1)","b60529e4":"model_loss = pd.DataFrame(model.history.history)\nmodel_loss.head()","ffe3eb05":"model_loss[['loss','val_loss']].plot(ylim=[0,1])\nplt.show()","aa8bdc91":"model_loss[['acc','val_acc']].plot(ylim=[0,1])\nplt.show()","1295ad1d":"Lets checkout the message length whether the sms is a spam or not.","37c51825":"# Thankyou For Reading!!!","58ea6777":"## Fitting The Model.","4a78e8c5":"## Lets visualize the Accuracy over the Epochs.","2934f2f4":"## Creating a Dataframe of Loss And Accuracy.","a16656d9":"Here we will use GloVe pretrained corpus model to represent our words.It is available in 3 varieties :50D ,100D and 200 Dimentional.We will try 50 D here because the Dataset is small.If you have a larger dataset,you can use 100D or 200D.","b8c6c763":"# Loading The Dataset.","1762b7a1":"# Lets Do Some EDA.","e0580089":"We are only going to use the first two columns also we are going to replace spam with 1 and ham with 0 in column 1.","5119bc18":"## GloVe for Vectorization","feb4fc2d":"# Text Preprocessing.","2419b85c":"## Lets visualize the Loss over the Epochs.","407acd4f":"## Importing The Required Libraries","1a9cdb32":"# Splitting The Data into train and validation set.","1f985725":"# Creating Our Model."}}