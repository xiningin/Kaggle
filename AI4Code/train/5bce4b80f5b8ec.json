{"cell_type":{"ade03147":"code","09073dca":"code","0da9bb8c":"code","6d1fab97":"code","6572b232":"code","2e263ce5":"code","5ff21a6f":"code","c1bbfd52":"code","53959971":"code","937a86bc":"code","e3470cda":"code","f000034e":"code","0107b302":"code","e21046c7":"code","7037014c":"code","39061df1":"code","ea0719d3":"code","1f4699c6":"code","9fd426e0":"code","f4db3a36":"code","24885d85":"code","1a81484b":"code","87ad722c":"code","234d0d73":"code","fabf06bd":"code","affd08b6":"code","3c9ea170":"code","c534e19e":"code","02602599":"code","8924a8ec":"code","d5239d87":"code","ac466dd0":"code","add31f34":"code","bfcea8f1":"code","dd5213ba":"code","dae11fc4":"code","dfd409b8":"code","afa6acf4":"code","d48f5e92":"code","1200358d":"code","456bec78":"code","78f0fcc4":"code","88d69820":"code","eed37232":"code","a94c4925":"code","9a3d32b7":"code","07770549":"code","1f3d08a8":"markdown","74a4699e":"markdown"},"source":{"ade03147":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom wordcloud import *\nimport wordcloud\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport warnings\nwarnings.filterwarnings(\"ignore\")","09073dca":"df = pd.read_csv(\"..\/input\/iba-ml1-final-project\/train.csv\", index_col=0)\ndf.head()","0da9bb8c":"columns_d=df.columns\ncolumns_d","6d1fab97":"for col in columns_d:\n    missing = np.mean(df[col].isna())\n    print('{} - {}%'.format(col, round(missing*100)))","6572b232":"df.corr()","2e263ce5":"corr_with_TARGET_1 = df.corr().iloc[:-1, -1].sort_values(ascending=False)\ncorr_with_TARGET_1","5ff21a6f":"corr_with_TARGET_2 = df.corr().iloc[-2, [0,1,3]].sort_values(ascending=False)\ncorr_with_TARGET_2","c1bbfd52":"sns.set(font_scale=1)\nplt.figure(figsize=(10, 10))\nsns.barplot(x=corr_with_TARGET_1.values, y=corr_with_TARGET_1.index)\nplt.title('Correlation with target variable => Recommended')","53959971":"sns.set(font_scale=1)\nplt.figure(figsize=(10, 10))\nsns.barplot(x=corr_with_TARGET_2.values, y=corr_with_TARGET_2.index)\nplt.title('Correlation with target variable => Recommended')","937a86bc":"df.info()","e3470cda":"df.describe()","f000034e":"df.columns","0107b302":"# The age distribution in data\n# Hide grid lines\nplt.grid(False)\nplt.hist(df['Age'], color='green', label = \"Age\")\nplt.legend()\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.title(\"Age Distribution in Data\")","e21046c7":"plt.grid(False)\nsns.countplot(x = 'Division', data = df)","7037014c":"plt.grid(False)\nsns.countplot(x = 'Department', data = df)","39061df1":"plt.figure(figsize=(10,10))\nsns.boxplot(x = 'Rating', y = 'Age', data = df)","ea0719d3":"plt.figure(figsize=(10,10))\nax=df.Rating.value_counts()\nlabels=df['Rating'].value_counts().index\nplt.pie(ax,labels=labels,autopct='%.2f')\nplt.title(\"Rating percentage\",fontsize=25,color='purple')\nplt.legend()\nplt.show()","1f4699c6":"print(df['Division'].unique())\nprint(df['Department'].unique())\nprint(df['Product_Category'].unique())","9fd426e0":"plt.figure(figsize=(10, 10))\nsns.heatmap(df.isnull(), cmap=\"Blues\")","f4db3a36":"df=df.fillna(' ')","24885d85":"rd = df[df['Recommended'] == 1] # recommended\nnrd = df[df['Recommended'] == 0] # not recommended\nrd.head()","1a81484b":"plt.grid(False)\ndf[\"Recommended\"].value_counts().plot(kind='bar')\nplt.xlabel(\"Recommended\")\nplt.ylabel(\"Counts\")\nplt.title(\"Proportion Target Class\")","87ad722c":"sns.set(style=\"darkgrid\")\n\nsns.histplot(data = df\n            ,x = 'Age'\n            ,color = 'navy'\n            ,kde = True\n            ,bins = 10\n            ,hue='Recommended'\n            )\nplt.show()","234d0d73":"sns.heatmap(df.corr())","fabf06bd":"plt.figure(figsize=(18, 18))\nplt.subplot2grid((2, 2), (0, 0))\nplt.xticks(rotation=45)\nplt.hist(rd['Rating'], color = \"red\", alpha = 0.5, label = \"Recommended\")\nplt.hist(nrd['Rating'], color = \"blue\", alpha = 0.5, label = \"Not Recommended\")\nplt.title(\"Recommended Items in Rating\")\nplt.legend()","affd08b6":"plt.style.use('ggplot')\n\nfig = plt.figure(figsize=(18, 18))\nax1 = plt.subplot2grid((2, 2), (0, 0))\nax1 = plt.xticks(rotation=45)\nax1 = plt.hist(rd['Division'], color = \"red\", alpha = 0.5, label = \"Recommended\")\nax1 = plt.hist(nrd['Division'], color = \"blue\", alpha = 0.5, label = \"Not Recommended\")\nax1 = plt.title(\"Recommended Items in each Division\")\nax1 = plt.legend()\n\nax2 = plt.subplot2grid((2, 2), (0, 1))\nax2 = plt.xticks(rotation=45)\nax2 = plt.hist(rd['Department'], color=\"green\", alpha = 0.5, label = \"Recommended\")\nax2 = plt.hist(nrd['Department'], color=\"yellow\", alpha = 0.5, label = \"Not Recommended\")\nax2 = plt.title(\"Recommended Items in each Department\")\nax2 = plt.legend()\n\nax3 = plt.subplot2grid((2, 2), (1, 0), colspan=2)\nax3 = plt.xticks(rotation=45)\nax3 = plt.hist(rd['Product_Category'], color=\"blue\", alpha = 0.5, label = \"Recommended\")\nax3 = plt.hist(nrd['Product_Category'], color=\"cyan\", alpha = 0.5, label = \"Not Recommended\")\nax3 = plt.title(\"Recommended Items in each Category\")\nax3 = plt.legend()","3c9ea170":"df['Review Length'] = df['Review'].astype(str).apply(len)\ndf.head()","c534e19e":"fig = plt.figure(figsize=(15, 10))\nax = sns.distplot(df['Review Length'], color=\"red\")\nax = plt.title(\"Length of Reviews\")","02602599":"plt.figure(figsize=(20,10))\nsns.boxplot(x = 'Age', y = 'Review Length', data = df)","8924a8ec":"plt.style.use('ggplot')\n\nfig = plt.figure(figsize=(18, 18))\nax1 = plt.subplot2grid((2, 2), (0, 0))\nax1 = plt.xticks(rotation=45)\nax1 = sns.boxplot(x = 'Division', y = 'Review Length', data = df)\nax1 = plt.title(\"Review Length in each Division\")\n\nax2 = plt.subplot2grid((2, 2), (0, 1))\nax2 = plt.xticks(rotation=45)\nax2 = sns.boxplot(x = 'Department', y = 'Review Length', data = df)\nax2 = plt.title(\"Review Length in each Department\")\n\nax3 = plt.subplot2grid((2, 2), (1, 0), colspan=2)\nax3 = plt.xticks(rotation=45)\nax3 = sns.boxplot(x = 'Product_Category', y = 'Review Length', data = df)\nax3 = plt.title(\"Review Length in each Category\")","d5239d87":"plt.figure(figsize=(10,10))\nsns.boxplot(x = 'Rating', y = 'Pos_Feedback_Cnt', data = df)","ac466dd0":"# wordcloud for Title\nw=df['Review_Title'].str.cat(sep=' ')\n# Create the wordcloud object\nwordcloud = WordCloud(background_color=\"yellow\",width=800, height=480, margin=0).generate(w)\n \n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()","add31f34":"# wordcloud for Review Text\nw1=df['Review'].str.cat(sep=' ')\n# Create the wordcloud object\nwordcloud = WordCloud(background_color=\"white\",width=800, height=480, margin=0, colormap='gist_heat').generate(w1)\n \n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()","bfcea8f1":"conv=df.cov()\nconv","dd5213ba":"sns.heatmap(conv,annot=True)","dae11fc4":"import re\n\ndef clean_data(text):\n    letters_only = re.sub(\"[^a-zA-Z]\", \" \", text) \n    words = letters_only.lower().split()                            \n    return( \" \".join( words )) \n\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords= set(STOPWORDS)|{'skirt', 'blouse','dress','sweater', 'shirt','bottom', 'pant', 'pants' 'jean', 'jeans','jacket', 'top', 'dresse'}\n\ndef create_cloud(rating):\n    x= [i for i in rating]\n    y= ' '.join(x)\n    cloud = WordCloud(background_color='white',width=1600, height=800,max_words=100,stopwords= stopwords).generate(y)\n    plt.figure(figsize=(15,7.5))\n    plt.axis('off')\n    plt.imshow(cloud)\n    plt.show()","dfd409b8":"rating5= df[df['Rating']==5]['Review'].apply(clean_data)\ncreate_cloud(rating5)","afa6acf4":"rating4= df[df['Rating']==4]['Review'].apply(clean_data)\ncreate_cloud(rating4)","d48f5e92":"rating3= df[df['Rating']==3]['Review'].apply(clean_data)\ncreate_cloud(rating3)","1200358d":"rating2=df[df['Rating']==2]['Review'].apply(clean_data)\ncreate_cloud(rating2)","456bec78":"rating1=df[df['Rating']==1]['Review'].apply(clean_data)\ncreate_cloud(rating1)","78f0fcc4":"df.columns","88d69820":"copy1=df\ncopy2=df","eed37232":"def top_n_ngram(corpus,n = None,ngram=1):\n    vec = CountVectorizer(stop_words = 'english',ngram_range=(ngram,ngram)).fit(corpus)\n    \n    bag_of_words = vec.transform(corpus) \n    \n    sum_words = bag_of_words.sum(axis =0)\n    \n    words_freq = [(word,sum_words[0,idx]) for word,idx in vec.vocabulary_.items()]\n\n    words_freq = sorted(words_freq,key = lambda x:x[1],reverse = True)\n    \n    return words_freq[:n]","a94c4925":"common_words = top_n_ngram(copy1['Review'], 20,1)\n\ncopy1 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\n\nplt.figure(figsize =(10,5))\n\ncopy1.groupby('ReviewText').sum()['count'].sort_values(ascending=False).plot(\nkind='bar', title='Top 20 unigrams in review after removing stop words')","9a3d32b7":"df.columns","07770549":"common_words_2 = top_n_ngram(copy2['Review'], 20, 2)\n\ncopy2 = pd.DataFrame(common_words_2, columns = ['ReviewText' , 'count'])\n\nplt.figure(figsize =(10,5))\n\ncopy2.groupby('ReviewText').sum()['count'].sort_values(ascending=False).plot(\nkind='bar', title='Top 20 bigrams in review after removing stop words')","1f3d08a8":"# *** The End ***","74a4699e":"#  EDA"}}