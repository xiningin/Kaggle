{"cell_type":{"63e10def":"code","febf94d5":"code","5261e079":"code","6d402bde":"code","ae0787ac":"code","53ddcf55":"code","e110d8de":"code","b539ee47":"code","35c69e09":"code","4d89284e":"code","1efa2451":"code","959049dd":"code","9eba8370":"code","304ed7b9":"code","910a57c8":"code","77210ecb":"code","ad88c409":"code","7e14f144":"code","4610c6c6":"code","c43f8146":"code","25ff80ed":"code","d744ecd4":"code","49ea6906":"code","fa41c453":"code","563355df":"code","160f4054":"code","82b117fd":"code","de0beede":"code","da867e69":"code","ab1c2494":"code","eeeafec2":"code","8e3e73e5":"code","7a14d06b":"code","ca270f61":"code","4c57360b":"code","d2ce9c53":"code","466b2db5":"code","1e95cdc6":"code","cdc87edd":"code","1a983173":"code","8a949bfa":"code","50dc574c":"code","28bef3ba":"code","d8e7c19b":"code","27809904":"code","466ea1aa":"code","9efa4741":"code","57a77b28":"code","93201812":"code","e186d4ca":"code","95f99101":"code","331accdc":"code","a230f218":"code","ec0c5958":"code","b0acf2cb":"code","48cb1851":"code","7b64d3a5":"code","35b9e51e":"code","5ad0a13e":"code","609bb99f":"code","882b01d4":"code","cbc3ad80":"code","b2b7741f":"code","d0123c11":"code","531bb835":"markdown","85887555":"markdown","3fe70984":"markdown","0454f973":"markdown","debb30f0":"markdown","0690f747":"markdown","62996366":"markdown","31146f4d":"markdown","c68ca7b1":"markdown","0ee58615":"markdown","b0869a9e":"markdown","c6a49714":"markdown","36ff4d1f":"markdown","8aaa29d5":"markdown","ac39a8a3":"markdown","1c6069c8":"markdown"},"source":{"63e10def":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\n%matplotlib inline\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","febf94d5":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()\ntrain_data","5261e079":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","6d402bde":"train_data.info()","ae0787ac":"test_data.info()","53ddcf55":"train_data.isnull().sum()","e110d8de":"test_data.isnull().sum()","b539ee47":"#checking if the guess of females survived in gender_subbmission.csv is reasonable\n\nwomen = train_data.loc[train_data.Sex == 'female']['Survived']\nrate_women = sum(women)\/len(women)\nprint(\"Percentage of women who survived: \", rate_women)","35c69e09":"men = train_data.loc[train_data.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\nprint(\"Percentage of men who survived: \", rate_men)","4d89284e":"#74% female survived and 18% men survived; means that the the assumption in gender_submission.csv is not a bad guess","1efa2451":"#sns.countplot(train_data['Embarked'])\nsns.countplot(x = 'Embarked', data = train_data)\n\n","959049dd":"train_data.PassengerId.nunique()\npassengerId = test_data['PassengerId']","9eba8370":"train_data.head()","304ed7b9":"train_data.drop(labels='PassengerId', axis=1, inplace=True)\ntest_data.drop(labels='PassengerId', axis=1, inplace=True)","910a57c8":"fx, axes = plt.subplots(1, 2, figsize=(15,6))\naxes[0].set_title(\"Pclass vs Frequency\")\naxes[1].set_title(\"Pclass vs Survival rate\")\nfig1_pclass = sns.countplot(data=train_data, x='Pclass', ax=axes[0])\nfig2_pclass = sns.barplot(data=train_data, x='Pclass',y='Survived', ax=axes[1])\n","77210ecb":"train_data['Survived'].groupby(train_data['Pclass']).mean()","ad88c409":"train_data['Name'].nunique()","7e14f144":"train_data.head()\n","4610c6c6":"train_data['Title'] = train_data['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\ntest_data['Title'] = train_data['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\n\ntrain_data['Name_Len'] = train_data['Name'].apply(lambda x: len(x))\ntest_data['Name_Len'] = test_data['Name'].apply(lambda x: len(x))\n\ntrain_data.drop('Name', axis=1, inplace=True)\ntest_data.drop('Name', axis=1, inplace=True)","c43f8146":"train_data.head()","25ff80ed":"test_data.head()","d744ecd4":"test_data.Name_Len = (test_data.Name_Len\/10).astype(np.int64)+1\ntrain_data.Name_Len = (train_data.Name_Len\/10).astype(np.int64)+1","49ea6906":"train_data['Survived'].groupby(train_data['Title']).mean()","fa41c453":"train_data['Title']","563355df":"train_data['Survived'].groupby(train_data['Name_Len']).mean()","160f4054":"fx, axes = plt.subplots(2, 1, figsize=(15, 10))\naxes[0].set_title(\"Title vs Frequency\")\naxes[1].set_title(\"Title vise Survival rate\")\nfig1_title = sns.countplot(data=train_data, x='Title', ax=axes[0])\nfig2_title = sns.barplot(data=train_data, x='Title',y='Survived', ax=axes[1])","82b117fd":"fx, axes = plt.subplots(1, 2, figsize=(15, 6))\naxes[0].set_title(\"Gender vs Frequency\")\naxes[1].set_title(\"Gender vise Survival rate\")\nfig1_gen = sns.countplot(data=train_data, x='Sex', ax=axes[0])\nfig2_gen = sns.barplot(data=train_data, x='Sex', y='Survived', ax=axes[1])","de0beede":"train_data['Survived'].groupby(train_data['Sex']).mean()","da867e69":"genders = {'male': 0, 'female': 1}\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genders)","ab1c2494":"print(train_data['Age'].isnull().sum())\nprint(test_data['Age'].isnull().sum())\ntrain_data.info()","eeeafec2":"#training_age_n = train_data['Age'].dropna(axis=0)\nmy_imputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\ntrain_data['Age'] = my_imputer.fit_transform(train_data[['Age']]).ravel()\ntest_data['Age'] = my_imputer.transform(test_data[['Age']]).ravel()\ntraining_age_n = train_data\n","8e3e73e5":"train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1\ntest_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1\nfx, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].set_title('Family Size counts')\naxes[1].set_title('Survival Rate vs Family Size')\nfig1_family = sns.countplot(x=train_data.FamilySize, ax=axes[0], palette='cool')\nfig2_family = sns.barplot(x=train_data.FamilySize, y=train_data.Survived, ax=axes[1], palette='cool')","7a14d06b":"train_data['Survived'].groupby(train_data['FamilySize']).mean()","ca270f61":"train_data['isAlone'] = train_data['FamilySize'].map(lambda x: 1 if x == 1 else 0)\ntest_data['isAlone'] = test_data['FamilySize'].map(lambda x: 1 if x == 1 else 0)","4c57360b":"fx, axes = plt.subplots(1, 2, figsize=(15, 6))\nfig1_alone = sns.countplot(data=train_data, x='isAlone', ax=axes[0])\nfig2_alone = sns.barplot(data=train_data, x='isAlone', y='Survived', ax=axes[1])","d2ce9c53":"train_data.drop(labels=['SibSp', 'Parch'], axis=1, inplace=True)\ntest_data.drop(labels=['SibSp', 'Parch'], axis=1, inplace=True)\ntrain_data.head()","466b2db5":"train_data['Ticket_Len'] = train_data['Ticket'].apply(lambda x: len(x))\ntest_data['Ticket_Len'] = test_data['Ticket'].apply(lambda x: len(x))","1e95cdc6":"fx, axes = plt.subplots(2, 1, figsize=(15, 10))\naxes[0].set_title(\"Ticket Length vs Frequency\")\naxes[1].set_title(\"Length vise Survival rate\")\nfig1_tlen = sns.countplot(data=train_data, x='Ticket_Len', ax=axes[0])\nfig2_tlen = sns.barplot(data=train_data, x='Ticket_Len',y='Survived', ax=axes[1])","cdc87edd":"\ntrain_data['Survived'].groupby(train_data['Ticket_Len']).mean()","1a983173":"train_data.drop(labels='Ticket', axis=1, inplace=True)\ntest_data.drop(labels='Ticket', axis=1, inplace=True)\ntrain_data.head()","8a949bfa":"test_data['Fare'][np.isnan(test_data['Fare'])] = test_data.Fare.mean()","50dc574c":"fx, axes = plt.subplots(1, 2, figsize=(15,5))\nfig1_fare = sns.distplot(a=train_data.Fare, bins=15, ax=axes[0], hist_kws={'rwidth':0.7})\nfig1_fare.set_title('Fare vise Frequency')\n\n# Creating a new list of survived and dead\n\npass_survived_fare = train_data[train_data.Survived == 1].Fare\npass_dead_fare = train_data[train_data.Survived == 0].Fare\n\naxes[1].hist(x=[train_data.Fare, pass_survived_fare, pass_dead_fare], bins=5, label=['Total', 'Survived', 'Dead'], \\\n        log=True)\naxes[1].legend()\naxes[1].set_title('Fare vise Survival')\nplt.show()","28bef3ba":"train_data.Fare = (train_data.Fare\/20).astype(np.int64) + 1 \ntest_data.Fare = (test_data.Fare\/20).astype(np.int64) + 1","d8e7c19b":"#print(training_data[['Fare','Survived']].groupby(['Fare'], as_index = False).mean())\ntrain_data['Survived'].groupby(train_data['Fare']).mean()","27809904":"train_data.head()\n","466ea1aa":"cabin_null = float(test_data.Cabin.isnull().sum())\nprint(cabin_null\/len(test_data) *100)","9efa4741":"cabin_null = float(train_data.Cabin.isnull().sum())\nprint(cabin_null\/len(train_data) *100)","57a77b28":"train_data['hasCabin'] = train_data.Cabin.notnull().astype(int)\ntest_data['hasCabin'] = test_data.Cabin.notnull().astype(int)","93201812":"fx, axes = plt.subplots(1, 2, figsize=(15, 6))\nfig1_hascabin = sns.countplot(data=train_data, x='hasCabin', ax=axes[0])\nfig2_hascabin = sns.barplot(data=train_data, x='hasCabin', y='Survived', ax=axes[1])","e186d4ca":"train_data.drop(labels='Cabin', axis=1, inplace=True)\ntrain_data.head()","95f99101":"test_data.drop(labels='Cabin', axis=1, inplace=True)\ntest_data.head()","331accdc":"train_data['Embarked'].describe()\n","a230f218":"train_data['Embarked'] = train_data['Embarked'].fillna('S')\n","ec0c5958":"fx, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].set_title('Embarked Counts')\naxes[1].set_title('Survival Rate vs Embarked')\nfig1_embarked = sns.countplot(x=train_data.Embarked, ax=axes[0])\nfig2_embarked = sns.barplot(x=train_data.Embarked, y=train_data.Survived, ax=axes[1])","b0acf2cb":"\ntrain_data['Survived'].groupby(train_data['Embarked']).mean()","48cb1851":"#print(training_data[['Embarked', 'Fare']].groupby(['Embarked'], as_index = False).mean())\ntrain_data['Fare'].groupby(train_data['Embarked']).mean()","7b64d3a5":"ports = {'S': 0, 'C': 1, 'Q':2}\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(ports)","35b9e51e":"features = ['Pclass', 'Age', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'hasCabin']\ntrain_data.head()\n","5ad0a13e":"train_data[features].info()","609bb99f":"train_data[features].head()","882b01d4":"\nX = train_data[features]\ny = train_data['Survived']\nX_test = test_data[features]\nX.head()","cbc3ad80":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nX_train, val_X, y_train, val_y = train_test_split(X, y, random_state=0)\n\n","b2b7741f":"from sklearn.ensemble import RandomForestClassifier\nrdmf = RandomForestClassifier(n_estimators=100, max_depth = 10, random_state = 1)\nrdmf.fit(X_train, y_train)\nval_predictions = rdmf.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","d0123c11":"predictions = rdmf.predict(X_test)\noutput = pd.DataFrame({'Survived': predictions})\noutput.to_csv('my_submission4.csv', index=False)","531bb835":"# Cabin","85887555":"full_data = pd.concat([train_data, test_data])\nfull_data.head()","3fe70984":"# Fare","0454f973":"train_age_mean = full_data.Age.mean()\ntrain_age_std = full_data.Age.std()\ntrain_age_null = train_data.Age.isnull().sum()\nrand_tr_age = np.random.randint(train_age_mean - train_age_std, train_age_mean + train_age_std, size=train_age_null)\ntrain_data['Age'][np.isnan(train_data['Age'])] = rand_tr_age\ntrain_data['Age'] = train_data['Age'].astype(int) + 1\n\n# Null Ages in Test set (86 null values)\ntest_age_mean = full_data.Age.mean()\ntest_age_std = full_data.Age.std()\ntest_age_null = test_data.Age.isnull().sum()\nrand_ts_age = np.random.randint(test_age_mean - test_age_std, test_age_mean + test_age_std, size=test_age_null)\ntest_data['Age'][np.isnan(test_data['Age'])] = rand_ts_age\ntest_data['Age'] = test_data['Age'].astype(int)\n\ntrain_data.Age = (train_data.Age\/15).astype(np.int64)\ntest_data.Age = (test_data.Age\/15).astype(np.int64) + 1","debb30f0":"# PClass","0690f747":"# Cleaning Data","62996366":"# Embarked","31146f4d":"# SibSp and Parch","c68ca7b1":"# Gender","0ee58615":"# Ticket","b0869a9e":"rint(train_data[['Age', 'Survived']].groupby(['Age'], as_index = False).mean())","c6a49714":"# isAlone","36ff4d1f":"# Name","8aaa29d5":"# Passenger ID","ac39a8a3":"# Age","1c6069c8":"fx, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].set_title(\"Age vs frequency\")\naxes[1].set_title(\"Age vise Survival rate\")\nfig1_age = sns.distplot(a=training_age_n, bins=15, ax=axes[0], hist_kws={'rwidth':0.7})\n\n# Creating a new list of survived and dead\n\npass_survived_age = train_data[train_data['Survived'] == 1].Age\npass_dead_age = train_data[train_data['Survived'] == 0].Age\n\naxes[1].hist([train_data.Age, pass_survived_age, pass_dead_age], bins=5, range=(0, 100), label=['Total', 'Survived', 'Dead'])\naxes[1].legend()\nplt.show()"}}