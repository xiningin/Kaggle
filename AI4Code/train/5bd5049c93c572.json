{"cell_type":{"637a7f67":"code","4fb34d5d":"code","73c92aab":"code","eed679e8":"code","91b1e7ce":"code","b7a4a29a":"code","5d93523d":"code","8b05bc17":"code","6689a59a":"code","94af61e8":"code","4e8db7d8":"code","91f56d2c":"code","e976f167":"code","0dc0a9b9":"code","4e8a54ba":"code","3d07137f":"code","9caa9bf8":"code","0f2429bb":"code","0d37b141":"code","7ad56369":"code","9124adec":"code","03e95e5a":"markdown","0bf7b397":"markdown","4b00e295":"markdown"},"source":{"637a7f67":"import os\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nprint(os.listdir(\"\/kaggle\/input\/\/\"))\n# Any results you write to the current directory are saved as output.","4fb34d5d":"import tensorflow as tf\ntf.__version__\n#cv2.__version__","73c92aab":"%cd \/kaggle\/working\/ \n# changing the directory for installation of below modules\n# tensorflow models section has an object detection library\n# piping logs to text files, otherwise the notebook is not very readable\n!git clone --quiet https:\/\/github.com\/tensorflow\/models.git > models.txt\n# protobuf is needed for creating py files from models library above\n!apt-get install -qq protobuf-compiler > proto.txt \n# pycoco for coco scores\n!pip install -q pycocotools > pycoco.txt\n# creating py files from protos\n%cd \/kaggle\/working\/models\/research\n!protoc object_detection\/protos\/*.proto --python_out=.\n# setting path, if not set, python can not use object detection library (from models)\nimport os\nos.environ['PYTHONPATH'] += ':\/kaggle\/working\/models\/research\/:\/kaggle\/working\/models\/research\/slim\/'\n# if prints OK, then installation and environment are set up correctly \n!python object_detection\/builders\/model_builder_test.py","eed679e8":"# copy coco config to the working dir for editing\n!cp \/kaggle\/input\/my-training\/nssd_mobilenet_v2_coco.config \/kaggle\/working\/","91b1e7ce":"# modified from https:\/\/www.dlology.com\/blog\/how-to-train-an-object-detection-model-easy-for-free\/\n# changing config file by changing the path to records and setting variables\nimport re\npipeline_fname=\"\/kaggle\/working\/nssd_mobilenet_v2_coco.config\"\nfine_tune_checkpoint=\"\/kaggle\/input\/my-training\/model.ckpt\"\ntrain_record_fname=\"\/kaggle\/input\/face-recognition-part-1\/train.tfrecord\"\ntest_record_fname=\"\/kaggle\/input\/face-recognition-part-1\/test.tfrecord\"\nlabel_map_pbtxt_fname=\"\/kaggle\/input\/face-recognition-part-1\/object_label.pbtxt\"\nbatch_size=64\nnum_steps=20000 # more steps of training gives higher accuracy\nnum_classes=62 # specify classes\nnum_examples=5000 # generate examples by augmenting existing images in tfrecords\n\nwith open(pipeline_fname) as f:\n    s = f.read()\nwith open(pipeline_fname, 'w') as f:\n    \n    # fine_tune_checkpoint\n    s = re.sub('fine_tune_checkpoint: \".*?\"',\n               'fine_tune_checkpoint: \"{}\"'.format(fine_tune_checkpoint), s)\n    \n    # tfrecord files both train and test.\n    s = re.sub(\n        '(input_path: \".*?)(train.record)(.*?\")', 'input_path: \"{}\"'.format(train_record_fname), s)\n    s = re.sub(\n        '(input_path: \".*?)(test.record)(.*?\")', 'input_path: \"{}\"'.format(test_record_fname), s)\n    # label_map_path\n    s = re.sub(\n        'label_map_path: \".*?\"', 'label_map_path: \"{}\"'.format(label_map_pbtxt_fname), s)\n    # Set training batch_size.\n    s = re.sub('batch_size: [0-9]+',\n               'batch_size: {}'.format(batch_size), s)\n    # Set training steps, num_steps\n    s = re.sub('num_steps: [0-9]+',\n               'num_steps: {}'.format(num_steps), s)\n    s = re.sub('num_examples: [0-9]+',\n               'num_examples: {}'.format(num_examples), s) \n    # Set number of classes num_classes.\n    s = re.sub('num_classes: [0-9]+',\n               'num_classes: {}'.format(num_classes), s)\n    f.write(s)","b7a4a29a":"# folder for saving trained model\n#!rm -r \/kaggle\/working\/training\nos.mkdir('\/kaggle\/working\/training')","5d93523d":"#!ls \/kaggle\/working\/\ntrain='\/kaggle\/working\/training\/'","8b05bc17":"# if you are training for the first time, you can remove this cell!!!\n# this is for further training from my last checkpoint\n!cp \/kaggle\/input\/float-trained16k\/* \/kaggle\/working\/training\/\n#opening checkpoint text file to edit the last step:\nch=open('\/kaggle\/working\/training\/checkpoint','w')\nch.write('model_checkpoint_path: \"model.ckpt-16000\"\\nall_model_checkpoint_paths: \"model.ckpt-16000\"')\nch.close() # without checkpoint step, training does not continue","6689a59a":"#training starts by running model_main.py and passing the paths\n!python \/kaggle\/working\/models\/research\/object_detection\/model_main.py \\\n    --pipeline_config_path={pipeline_fname} \\\n    --model_dir=\/kaggle\/working\/training\/ \\\n    --alsologtostderr > \/kaggle\/working\/train.txt\nprint(\"Finished training\")","94af61e8":"!ls \/kaggle\/working\/training\n#!cat {pipeline_fname}","4e8db7d8":"!cp {pipeline_fname} \/kaggle\/working\/training\/\nconf_path='\/kaggle\/working\/training\/nssd_mobilenet_v2_coco.config'","91f56d2c":"#save frozen graph of the model for inference later (for notebook usage only, not for tflite converting)\nimport re\nimport numpy as np\n\noutput_directory = '\/kaggle\/working\/trained_model'\n\nlst = os.listdir(train)\nlst = [l for l in lst if 'model.ckpt-' in l and '.meta' in l]\nsteps=np.array([int(re.findall('\\d+', l)[0]) for l in lst])\nlast_model = lst[steps.argmax()].replace('.meta', '')\nlast_model_path = os.path.join(train, last_model)\n\nprint(last_model_path)\n!python \/kaggle\/working\/models\/research\/object_detection\/export_inference_graph.py \\\n    --input_type=image_tensor \\\n    --pipeline_config_path={pipeline_fname} \\\n    --output_directory={output_directory} \\\n    --trained_checkpoint_prefix={last_model_path} \\\n    > \/kaggle\/working\/graph.txt\nprint('Finished exporting')","e976f167":"!ls \/kaggle\/working\/trained_model\/","0dc0a9b9":"os.mkdir('\/kaggle\/working\/freezetflite')\noutd='\/kaggle\/working\/freezetflite'","4e8a54ba":"# freezing graph for tensorflow lite for android use\n!python \/kaggle\/working\/models\/research\/object_detection\/export_tflite_ssd_graph.py \\\n--pipeline_config_path={conf_path} \\\n--trained_checkpoint_prefix={last_model_path} \\\n--output_directory={outd} \\\n--add_postprocessing_op=true","3d07137f":"# converting frozen graph to obtain tflite, used on Android later\n!tflite_convert  --graph_def_file=\/kaggle\/working\/freezetflite\/tflite_graph.pb \\\n--output_file=\/kaggle\/working\/freezetflite\/62faces_float.tflite \\\n--input_arrays=normalized_input_image_tensor \\\n--output_arrays='TFLite_Detection_PostProcess','TFLite_Detection_PostProcess:1','TFLite_Detection_PostProcess:2','TFLite_Detection_PostProcess:3' \\\n--input_shape=1,300,300,3 \\\n--allow_custom_ops ","9caa9bf8":"# modified from https:\/\/www.dlology.com\/blog\/how-to-train-an-object-detection-model-easy-for-free\/\n%cd \/kaggle\/working\/models\/research\/object_detection\nimport warnings\nwarnings.filterwarnings('ignore')\n\nPATH_TO_CKPT='\/kaggle\/working\/trained_model\/frozen_inference_graph.pb'\nPATH_TO_LABELS = label_map_pbtxt_fname\nPATH_DIR ='\/kaggle\/input\/faces-data\/'\nTEST_IMAGE_PATHS =[os.path.join(PATH_DIR+i) for i in os.listdir(PATH_DIR)]\n\n#import matplotlib; matplotlib.use('Agg')\nimport numpy as np\nimport os\nimport six.moves.urllib as urllib\nimport sys\nimport tarfile\nimport tensorflow as tf\nimport zipfile\n\nfrom collections import defaultdict\nfrom io import StringIO\n#from matplotlib import pyplot as plt\n\nfrom PIL import Image\n\n# This is needed since the notebook is stored in the object_detection folder.\nsys.path.append(\"..\")\nfrom object_detection.utils import ops as utils_ops\n\n\n# This is needed to display the images.\n#%matplotlib inline\n\n\nfrom object_detection.utils import label_map_util\n\nfrom object_detection.utils import visualization_utils as vis_util\n\n\ndetection_graph = tf.Graph()\nwith detection_graph.as_default():\n    od_graph_def = tf.GraphDef()\n    with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:\n        serialized_graph = fid.read()\n        od_graph_def.ParseFromString(serialized_graph)\n        tf.import_graph_def(od_graph_def, name='')\n\n\nlabel_map = label_map_util.load_labelmap(PATH_TO_LABELS)\ncategories = label_map_util.convert_label_map_to_categories(\n    label_map, max_num_classes=num_classes, use_display_name=True)\ncategory_index = label_map_util.create_category_index(categories)\n\n\ndef load_image_into_numpy_array(image):\n    (im_width, im_height) = image.size\n    return np.array(image.getdata()).reshape(\n        (im_height, im_width, 3)).astype(np.uint8)\n\n# Size, in inches, of the output images.\nIMAGE_SIZE = (12, 8)\n\n\ndef run_inference_for_single_image(image, graph):\n    with graph.as_default():\n        with tf.Session() as sess:\n            # Get handles to input and output tensors\n            ops = tf.get_default_graph().get_operations()\n            all_tensor_names = {\n                output.name for op in ops for output in op.outputs}\n            tensor_dict = {}\n            for key in [\n                'num_detections', 'detection_boxes', 'detection_scores',\n                'detection_classes', 'detection_masks'\n            ]:\n                tensor_name = key + ':0'\n                if tensor_name in all_tensor_names:\n                    tensor_dict[key] = tf.get_default_graph().get_tensor_by_name(\n                        tensor_name)\n            if 'detection_masks' in tensor_dict:\n                # The following processing is only for single image\n                detection_boxes = tf.squeeze(\n                    tensor_dict['detection_boxes'], [0])\n                detection_masks = tf.squeeze(\n                    tensor_dict['detection_masks'], [0])\n                # Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.\n                real_num_detection = tf.cast(\n                    tensor_dict['num_detections'][0], tf.int32)\n                detection_boxes = tf.slice(detection_boxes, [0, 0], [\n                                           real_num_detection, -1])\n                detection_masks = tf.slice(detection_masks, [0, 0, 0], [\n                                           real_num_detection, -1, -1])\n                detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(\n                    detection_masks, detection_boxes, image.shape[0], image.shape[1])\n                detection_masks_reframed = tf.cast(\n                    tf.greater(detection_masks_reframed, 0.5), tf.uint8)\n                # Follow the convention by adding back the batch dimension\n                tensor_dict['detection_masks'] = tf.expand_dims(\n                    detection_masks_reframed, 0)\n            image_tensor = tf.get_default_graph().get_tensor_by_name('image_tensor:0')\n\n            # Run inference\n            output_dict = sess.run(tensor_dict,\n                                   feed_dict={image_tensor: np.expand_dims(image, 0)})\n\n            # all outputs are float32 numpy arrays, so convert types as appropriate\n            output_dict['num_detections'] = int(\n                output_dict['num_detections'][0])\n            output_dict['detection_classes'] = output_dict[\n                'detection_classes'][0].astype(np.uint8)\n            output_dict['detection_boxes'] = output_dict['detection_boxes'][0]\n            output_dict['detection_scores'] = output_dict['detection_scores'][0]\n            if 'detection_masks' in output_dict:\n                output_dict['detection_masks'] = output_dict['detection_masks'][0]\n    return output_dict\n\n\nfor image_path in TEST_IMAGE_PATHS:\n    image = Image.open(image_path)\n    # the array based representation of the image will be used later in order to prepare the\n    # result image with boxes and labels on it.\n    image_np = load_image_into_numpy_array(image)\n    # Expand dimensions since the model expects images to have shape: [1, None, None, 3]\n    image_np_expanded = np.expand_dims(image_np, axis=0)\n    # Actual detection.\n    output_dict = run_inference_for_single_image(image_np, detection_graph)\n    # Visualization of the results of a detection.\n    vis_util.visualize_boxes_and_labels_on_image_array(\n        image_np,\n        output_dict['detection_boxes'],\n        output_dict['detection_classes'],\n        output_dict['detection_scores'],\n        category_index,\n        instance_masks=output_dict.get('detection_masks'),\n        use_normalized_coordinates=True,\n        line_thickness=5)\n    plt.figure(figsize=IMAGE_SIZE)\n    plt.imshow(image_np)","0f2429bb":"import shutil\nshutil.rmtree('\/kaggle\/working\/models')","0d37b141":"!ls \/kaggle\/working\/training\/","7ad56369":"!ls \/kaggle\/working\/","9124adec":"!ls \/kaggle\/working\/trained_model\/","03e95e5a":"Our model has been trained. Now we will run inference on some images to check whether it is detecting and recognizing faces.","0bf7b397":"# Transfer learning for Object detection models","4b00e295":"In the first part of our notebook, we created annotated images of people from LFW dataset. In this notebook, we will train an existing model to recognize those 62 people using Tensorflow object detection library.  \nP.S. refer to version 17 for the quantized model; this is a float type model."}}