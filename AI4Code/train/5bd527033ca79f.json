{"cell_type":{"eb11e34d":"code","4b82ddd8":"code","b297305e":"code","9585a5ae":"code","d8477a7e":"code","34dc29ab":"code","6487e9a6":"code","43991d7f":"code","d6a22cc9":"code","da9f19fa":"code","e3c7ae73":"code","1cfac6ce":"code","055e33fc":"code","4aed8f4e":"code","de74f657":"code","94668b35":"code","dd5edbd5":"code","7172f475":"code","901f60b2":"code","b77d986e":"code","92c2595a":"code","3664b1ee":"code","7d236a2d":"markdown","793e419d":"markdown","7b85491d":"markdown","2afdd1fd":"markdown","899d32f3":"markdown","63e321d0":"markdown","29b684c2":"markdown","d1387fd3":"markdown","c838a4cb":"markdown","6885dceb":"markdown","4e7190f0":"markdown"},"source":{"eb11e34d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b82ddd8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot","b297305e":"dataset = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","9585a5ae":"dataset","d8477a7e":"dataset.info()","34dc29ab":"dataset.isnull().sum()","6487e9a6":"dataset['quality'] = [1 if i > 6.5 else 0 for i in dataset['quality']]","43991d7f":"dataset","d6a22cc9":"dataset['quality'].value_counts()","da9f19fa":"x = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","e3c7ae73":"x","1cfac6ce":"y","055e33fc":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)","4aed8f4e":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","de74f657":"from sklearn.neighbors import KNeighborsClassifier","94668b35":"classifier = KNeighborsClassifier()\nclassifier.fit(x_train, y_train)","dd5edbd5":"from sklearn.metrics import confusion_matrix, accuracy_score","7172f475":"y_pred = classifier.predict(x_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))","901f60b2":"from sklearn.model_selection import cross_val_score","b77d986e":"accuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","92c2595a":"from sklearn.model_selection import GridSearchCV","3664b1ee":"parameters = [{'n_neighbors': [3, 5, 7, 9, 11, 13, 15], 'leaf_size': [10, 20, 30, 40, 50], 'metric': ['euclidean']},\n              {'n_neighbors': [3, 5, 7, 9, 11, 13, 15], 'leaf_size': [10, 20, 30, 40, 50], 'metric': ['manhattan']},\n              {'n_neighbors': [3, 5, 7, 9, 11, 13, 15], 'leaf_size': [10, 20, 30, 40, 50], 'metric': ['chebyshev']},\n              {'n_neighbors': [3, 5, 7, 9, 11, 13, 15], 'leaf_size': [10, 20, 30, 40, 50], 'p': [1, 2], 'metric': ['minkowski']}]\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\ngrid_search.fit(x_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)","7d236a2d":"# **Importing Libraries**","793e419d":"# **Feature Scaling**","7b85491d":"quality > 6.5 = 'good'\n\nquality < 6.5 = 'bad'","2afdd1fd":"Check if there are any null values present.","899d32f3":"# **Making the Confusion Matrix**","63e321d0":"**Therefore, above shows the best parameters for KNN model.**","29b684c2":"# **Applying Grid Search to find the best model and the best parameters**","d1387fd3":"# **Importing Dataset**","c838a4cb":"# **Splitting dataset into Train and Test set**","6885dceb":"## Training the KNeighborsClassifier model on the Training set","4e7190f0":"# **Applying k-Fold Cross Validation**"}}