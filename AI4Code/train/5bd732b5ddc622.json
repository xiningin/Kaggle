{"cell_type":{"0d1b15cf":"code","097cec37":"code","c8c47a53":"code","e910917e":"code","2810f802":"code","33b31722":"code","1bc27b97":"code","76012a72":"code","d1951731":"code","ba1d644b":"code","5be7f37c":"code","b0ba0d2a":"code","47d7625d":"code","cd5a8d6a":"code","779c8434":"code","99319d9c":"code","87479059":"code","e195e14a":"code","9c0b5680":"code","e0e5a00e":"code","d4d1d594":"code","5ba95351":"code","072a2c04":"code","fa714cef":"markdown","3721b1e5":"markdown","8b87ff82":"markdown","8bd879d3":"markdown","c6deef41":"markdown","5df268d3":"markdown","a81526f8":"markdown","f7a49ece":"markdown","cb256252":"markdown"},"source":{"0d1b15cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom fbprophet import Prophet\nimport seaborn as sns\nfrom statsmodels.tools.eval_measures import rmse\nfrom fbprophet.diagnostics import cross_validation, performance_metrics\nfrom fbprophet.plot import plot_cross_validation_metric\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","097cec37":"data = pd.read_csv('..\/input\/hourly-energy-consumption\/PJMW_hourly.csv')\ndata.shape","c8c47a53":"data.head()","e910917e":"min(data['Datetime'])","2810f802":"max(data['Datetime'])","33b31722":"data.columns = ['ds', 'y']\ndata.head()","1bc27b97":"data['ds'] = pd.to_datetime(data['ds'])","76012a72":"data.plot(x='ds', y='y', figsize=(14,5))","d1951731":"data = data.set_index('ds')","ba1d644b":"data.resample(rule='A').mean().plot.bar(title = \"Yearly mean energy consumption\", figsize=(12,5))","5be7f37c":"data.resample(rule='Q').mean().plot.bar(title = \"Quarterly mean energy consumption\", figsize=(18,5))","b0ba0d2a":"data['y']['2002-12-31 01:00:00':'2002-12-31 23:00:00'].plot(figsize=(12,4)).autoscale(axis='x',tight=True);","47d7625d":"split_date = '2015-01-01 01:00:00'\ntrain = data.loc[data.index < split_date].copy()\ntest = data.loc[data.index >= split_date].copy()","cd5a8d6a":"train.shape","779c8434":"test.shape","99319d9c":"model = Prophet()\nmodel.fit(train.reset_index())","87479059":"pred = model.predict(test.reset_index())","e195e14a":"model.plot(pred);","9c0b5680":"model.plot_components(pred);","e0e5a00e":"future_dates = model.make_future_dataframe(periods=240, freq = 'H')","d4d1d594":"future_dates.tail()","5ba95351":"forecast_pred = model.predict(future_dates)","072a2c04":"forecast_pred.head()","fa714cef":"The input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.","3721b1e5":"## EDA\n\nLet's check the yearly average energy consumption","8b87ff82":"As we can see, on some dates there's huge drop in the energy consumption. Later we can check how model will perofrm if we remove these drops.","8bd879d3":"Let's plot one day energy consumption.","c6deef41":"## Read Data\nWe have hourly power consumption data from PJM which is on the east side of US. Data is from 2002 to 2018 at hourly basis.","5df268d3":"## Train Test Split","a81526f8":"As we can see in daily analysis, in morning time there's less power consumption and it will increase in the night time.","f7a49ece":"## Create and Fit Model","cb256252":"## Forecast future predictions\n\nTo make future prediciton with prophet, first we need to specify the period for which we want to do forecast. Prophet provides in built function to genearate the future dates for prediction.\n\nIn this function you have to specify how many periods you want to forecast. Prophet by default expect daily data so if you don't have daily data then you have to specify the frequency parameter.\n\nfor ex: for monthly data for 2 years, you have to specify like this:\n\n    future_dates = model.make_future_dataframe(periods=24, freq = 'MS')"}}