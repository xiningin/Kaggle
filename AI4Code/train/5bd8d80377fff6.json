{"cell_type":{"ab906c4b":"code","21ce87a6":"code","4c8a8c13":"code","fb87d964":"code","9b6878d2":"code","979ade43":"code","ac8ff5c7":"code","9e23b504":"code","58e9127f":"code","454e2cfe":"code","85904a67":"code","393b5211":"code","99aec1d6":"code","d9b6fe93":"code","45b7be20":"code","80be73a3":"code","00978f6a":"code","7c923d1c":"code","d9bd62b5":"code","bb7908fb":"code","896e8468":"code","a4206de6":"code","1aff1f98":"code","955db14c":"code","12451260":"code","343ccc64":"code","a9e8e359":"code","a00907cb":"code","70d2cd23":"code","dfbe8a0f":"code","39079f9a":"code","b54a5b2e":"code","5b440111":"code","16469ac1":"code","78f6d6cb":"code","95507716":"markdown","a9839077":"markdown","2ebed93a":"markdown","2cf1ea1d":"markdown","f33370b7":"markdown","59710d68":"markdown","e26f077d":"markdown","2abfb71d":"markdown","112d593c":"markdown","f6955bce":"markdown","e14a92d7":"markdown","3c3ba87f":"markdown","ec0317d0":"markdown","8ecd46a8":"markdown","7eaf7ad2":"markdown","1791bbf1":"markdown","40ae6d56":"markdown","a5df0ad8":"markdown","6452c254":"markdown","c9bf341a":"markdown"},"source":{"ab906c4b":"#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices.\n#Along with a large collection of high-level mathematical functions to operate on these arrays.","21ce87a6":"import numpy as np \nprint(np.__version__)\nprint(np.show_config)","4c8a8c13":"my_list = [1,2,3,4]\nnp.array(my_list)","fb87d964":"list_of_list = [['a','b','c'],[1,2,3]]\nnp.array(list_of_list)","9b6878d2":"\nmy_dict = {'a':1,'b':2,'c':3,'d':4}\nnp.array(my_dict)","979ade43":"data = [[1,2,3,4,5],('a','b','c','d'),{'a':1,'b':2,'c':3,'d':4},[7,8,9,10]]\nnp.array(data)","ac8ff5c7":"matrix = [[1,2,3],[4,5,6],[7,8,9]]\nmatrix","9e23b504":"np.array(matrix)","58e9127f":"np.arange(7)","454e2cfe":"#generate array from '0'(include) to '10' (exclude)\nnp.arange(0,10)","85904a67":"#generate array from '0'(include) to '10' (exclude) with step size '2' and datatype =float\nnp.arange(start= 0,stop = 10,step= 2, dtype=float)","393b5211":"np.add(5,7)","99aec1d6":"L1 = np.arange(1,10,2)\nL2 = np.arange(0,10)\nnp.add(L1,L2)","d9b6fe93":"L1 = np.arange(1,20,2) # odd number\nprint(L1)\nL2 = np.arange(0,10)\nprint(L2)\nnp.add(L1,L2)","45b7be20":"matrix_1 =np.arange(9).reshape(3,3)\nprint(matrix_1)\nprint('---------------------')\nmatrix_2 = np.arange(3)\nprint(matrix_2)\nprint(\"--------------------\")\nnp.add(matrix_1,matrix_2)\n","80be73a3":"print(matrix_1.shape)\nprint(matrix_2.shape)","00978f6a":"np.linspace(start = 0,stop = 3)  #bydefault no. of Sample size = 50 ","7c923d1c":"np.linspace(start = 2 , stop = 3 , num =5)","d9bd62b5":"np.linspace(7,9,5,retstep=True)","bb7908fb":"np.zeros(shape=5)","896e8468":"np.zeros(shape =8 ,dtype = int)","a4206de6":"np.zeros(shape=(2,2))","1aff1f98":"np.ones(7)","955db14c":"np.ones(7,dtype=int)","12451260":"np.ones(shape=(2,2))","343ccc64":"np.eye(6,dtype=int)","a9e8e359":"np.eye(6,k=1)","a00907cb":"np.eye(6,k=-1)","70d2cd23":"#To Create an array of the given shape & populate , it with random sample from a \"uniform distribution\" over (0,1)\nnp.random.rand(2)","dfbe8a0f":"np.random.rand(4,4)","39079f9a":"#To Create an array of the given shape & populate , it with random sample from a  \"Standard Normal \"distribution.\nprint(np.random.randn())\nprint('-------------------------------------------')\nprint(np.random.randn(5))","b54a5b2e":"np.random.randn(3,3)","5b440111":"#To Create an array of the given shape & populate , it with random sample from a  \"Discrete uniform \" distribution.\n#retun random integer from low(inclusive) to high (exclusive)\n\nprint(np.random.randint(10))\nprint(\"---------------------------------------\")\nprint(np.random.randint(low = 2,high = 20 ,size =10 ))\nprint('------------------------------------------------')","16469ac1":"print(np.random.randint(low = 2,high = 20 ,size =10 ,dtype = float))","78f6d6cb":"np.random.randint(5,size = (3,3))","95507716":"# linspace : Return evenly spaced numbers over a specified interval.","a9839077":"![Practice Numpy ](http:\/\/https:\/\/en.wikipedia.org\/wiki\/NumPy#\/media\/File:NumPy_logo.svg)","2ebed93a":"# Build in Method\n \n2. add    - add : ndarray or scalar The sum of `x1` and `x2`, element-wise.  Returns a scalar if both  `x1` and `x2` are scalars\n3.","2cf1ea1d":"# Converting multiple data type into numpy array","f33370b7":"# Get the numpy version and show numpy build configuration","59710d68":"shape will give the dimemsion of the array","e26f077d":"# arange : return evenly spaced value with in s given interval\n","2abfb71d":"adding two matrixs","112d593c":"# Eye : Return a 2-D array with ones on the diagonal and zeros elsewhere","f6955bce":"shapes should be same then it will add","e14a92d7":"# randn","3c3ba87f":"# Matrix ","ec0317d0":"# Random - Numpy also has lots of ways to create random arrays","8ecd46a8":"# randint","7eaf7ad2":"# rand","1791bbf1":"# add : ndarray or scalar , The sum of `x1` and `x2`, element-wise.Returns a scalar if both  `x1` and `x2` are scalars","40ae6d56":"# Zero : Return a new array of given shape and type, filled with zeros","a5df0ad8":"# Ones : Return a new array of given shape and type, filled with ones","6452c254":"# Converting List\/list of lists into numpy array","c9bf341a":"# Converting Dict into numpy array"}}