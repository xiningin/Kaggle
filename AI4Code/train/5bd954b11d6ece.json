{"cell_type":{"79bcdded":"code","ed7efe76":"code","a03fd5bc":"code","ac947e83":"code","f30e1637":"code","0cfe5308":"code","69ef0f1b":"code","a67b98c1":"code","1c68c3a9":"code","c856edaf":"code","bb6aae0e":"code","1887cf07":"code","0afdfda7":"code","33f3698a":"code","8090fe9a":"code","459b56aa":"code","d164ac0f":"code","6916de7f":"code","deaad43e":"code","d9806a28":"code","638caaaf":"code","6ba7d9ad":"code","ae97b0f2":"code","31b307a2":"code","3e8f683a":"code","2e59137d":"code","bcdd4c81":"code","9f46bf62":"code","c0cda6ad":"code","c10373b9":"code","996bb317":"code","018418d5":"code","cafbc406":"code","24b9650a":"code","951f3fd2":"code","2e49a09d":"code","515025dc":"code","f6ec2a92":"code","b3f75722":"code","6e9e9342":"code","4ba5e236":"code","08e44e23":"code","e3920370":"code","39d80e85":"code","c5f79810":"code","7382d07c":"code","d85479c5":"code","73251dc8":"code","b78144e5":"code","1b767d9f":"code","be7221e4":"code","911cc760":"code","743b25e1":"code","4796f2a2":"code","f047f43f":"code","7df1a5a1":"code","173cea98":"code","c323baf4":"code","4beaa920":"code","42ac9b1c":"code","8194d4eb":"code","b2ce304d":"code","8c1ec049":"code","2601a6e8":"code","acda75ff":"code","4e6a8d7a":"code","cd9ea59e":"code","603e704b":"code","61f8c1f4":"code","30f9b41a":"code","2aec9119":"code","5f8cf24c":"code","3adc03b2":"code","1679cdda":"code","2feceef0":"code","9ea37d90":"code","2346856a":"code","9c7734ce":"code","e6ed199d":"code","1e444ae0":"code","4b3c9baa":"code","1dccabbc":"code","76e7e7f0":"code","eee47380":"code","e70c871f":"code","90feaa00":"code","a8804262":"code","24b1677e":"code","b1028ef4":"code","ad776918":"code","e8ccd44d":"code","06bbd539":"code","a96c9cc3":"code","62687bc0":"code","68bc9f89":"code","1e48f8b4":"code","3ac503a4":"code","e61b0ca0":"code","4abb1d05":"code","7b181b2b":"markdown","bf99f0bb":"markdown","bd9a08ed":"markdown","d8cf9e8b":"markdown","0c1cec23":"markdown","8544a24d":"markdown","98d7548e":"markdown","ea97f7bc":"markdown","010b1143":"markdown","85f98d16":"markdown","a5a36d59":"markdown","8675b45a":"markdown","967efbb8":"markdown","600c90e8":"markdown","b2a4a010":"markdown","1a25c889":"markdown","4dd3b2d7":"markdown","52a4431b":"markdown","d082a87a":"markdown","f2c6d9d3":"markdown","205523d9":"markdown","62f00d58":"markdown","d4185766":"markdown"},"source":{"79bcdded":"#Let's Import the Packages...\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","ed7efe76":"import warnings\nwarnings.filterwarnings('ignore')","a03fd5bc":"#Let's Read csv file\ntitanic = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n#Show some records of dataframe\ntitanic.sample(5)","ac947e83":"titanic.index","f30e1637":"# get information about data!!\ntitanic.info()\n# In this data some features are in the form object .However, except for gender, others have no effect survived.","0cfe5308":"# We choose the features that affect survival\ntitanic_select = titanic.loc[:,['PassengerId','Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]\ntitanic_select","69ef0f1b":"# get information new dataset\ntitanic_select.info()\n# We have two problems: 1- Sex and Embarked is object 2- Age  and Emarked have mis data","a67b98c1":"#  check missing Values \ntitanic_select.isnull().sum()\n# Age have 177 missing value","1c68c3a9":"#Examine the miss data visually to select the best strategy\nsns.heatmap(titanic_select.isnull(), cbar = False,cmap=\"YlGnBu\").set_title(\"Missing values \")\n# The miss data are evenly distributed. So we use the mean ","c856edaf":"# fill missing values with mean column values\ntitanic_select.fillna(titanic_select.mean(), inplace=True)\n# count the number of NaN values in each column\ntitanic_select.isnull().sum()","bb6aae0e":"# drop rows with missing values (2 row2 NAN in Embarked)\ntitanic_select.dropna(inplace = True)","1887cf07":"titanic_select.isnull().sum()","0afdfda7":"titanic_select.info()","33f3698a":"titanic_select","8090fe9a":"# ENCODING Convert object to int\ntitanic_select.replace({ 'Sex': {'male':0 , 'female':1} , 'Embarked' : {'C': 0 , 'S': 1, 'Q':2}} ,inplace=True)","459b56aa":"#Convert Age float to int\ntitanic_select['Age'] = titanic_select['Age'].astype(int)\ntitanic_select","d164ac0f":"# convert fare round anf float to int\ntitanic_select[\"Fare\"] = np.round(titanic_select[\"Fare\"])\ntitanic_select[\"Fare\"] = titanic_select[\"Fare\"].astype(int)","6916de7f":"titanic_select.info()","deaad43e":"# Finding out the correlation between the features\ncorr = titanic_select.corr()\ncorr.shape","d9806a28":"# Plotting the heatmap of correlation between features\nplt.figure(figsize=(25,25))\nsns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='YlGnBu')","638caaaf":"# crosstab between Pclass,Sex,Embarked,SibSp,Parch and Survived\npd.crosstab(titanic_select.Pclass,titanic_select.Survived,normalize = \"index\" )","6ba7d9ad":"pd.crosstab(titanic_select.Sex,titanic_select.Survived,normalize = \"index\" )\n","ae97b0f2":"pd.crosstab(titanic_select.Embarked,titanic_select.Survived,normalize = \"index\" )","31b307a2":"pd.crosstab(titanic_select.SibSp,titanic_select.Survived,normalize = \"index\" )","3e8f683a":"pd.crosstab(titanic_select.Parch,titanic_select.Survived,normalize = \"index\" )","2e59137d":"print('seaborn: %s' % sns.__version__)","bcdd4c81":"# number of total Servived sex\nsns.displot(data=titanic, x=\"Survived\",hue='Sex') ","9f46bf62":"sns.displot(data=titanic, x=\"Survived\",hue='Embarked',kind ='kde') ","c0cda6ad":"sns.displot(data=titanic, x=\"Survived\",hue='Parch',kind ='kde')","c10373b9":"sns.displot(data=titanic_select, x=\"Fare\",hue='Survived',kind ='kde')","996bb317":"sns.displot(data=titanic_select, x=\"Parch\",hue='Survived',kind ='kde')","018418d5":"sns.catplot(x=\"Survived\", y=\"Age\", data=titanic_select,kind=\"swarm\")","cafbc406":"sns.catplot(x=\"Survived\", y=\"Fare\",hue = 'Sex', data=titanic_select,kind=\"violin\")","24b9650a":"sns.catplot(x=\"Survived\", y=\"SibSp\",hue = 'Sex', data=titanic_select,kind=\"swarm\")","951f3fd2":"sns.factorplot(\"Pclass\", \"Survived\", \"Sex\",data=titanic_select, kind=\"bar\",size=6, palette=\"muted\",legend_out=False)","2e49a09d":"from sklearn.linear_model import LogisticRegression # for Logistic Regression Algorithm\nfrom sklearn.model_selection import train_test_split # to split the dataset for training and testing \nfrom sklearn import metrics # for checking the model accuracy\n","515025dc":"X = titanic_select.drop(['PassengerId','Survived'],axis = 1)\ny = titanic_select['Survived']\nprint(X.shape)\nprint(y.shape)\nX","f6ec2a92":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","b3f75722":"logreg = LogisticRegression(solver='liblinear')\nlogreg.fit(X_train, y_train)","6e9e9342":"y_pred = logreg.predict(X_test)","4ba5e236":"print('The accuracy of Logistic Regression is: ', (metrics.accuracy_score(y_test, y_pred)))","08e44e23":" #Recall\nfrom sklearn.metrics import recall_score\nprint('The Recall of Logistic Regression is: ', (metrics.recall_score(y_test, y_pred)))","e3920370":"# Precision\nfrom sklearn.metrics import precision_score\nprint('The Precision of Logistic Regression is: ', (metrics.precision_score(y_test, y_pred)))","39d80e85":"confusion_matrix = pd.crosstab(logreg.predict(X),y)","c5f79810":"confusion_matrix","7382d07c":"sns.heatmap(confusion_matrix, annot=True)\nplt.show()","d85479c5":"data_test = pd.read_csv('..\/input\/titanic\/test.csv')","73251dc8":"X_test_d = data_test.loc[:,['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]","b78144e5":"X_test_d","1b767d9f":"X_test_d.isnull().sum()","be7221e4":"X_test_d.fillna(titanic_select.mean(), inplace=True)","911cc760":"X_test_d.isnull().sum()","743b25e1":"X_test_d.replace({ 'Sex': {'male':0 , 'female':1} , 'Embarked' : {'C': 0 , 'S': 1, 'Q':2}} ,inplace=True)\nX_test_d['Age'] = X_test_d['Age'].astype(int)\nX_test_d[\"Fare\"] = np.round(X_test_d[\"Fare\"])\nX_test_d[\"Fare\"] =X_test_d[\"Fare\"].astype(int)\nX_test_d","4796f2a2":"y_PredLogTest=logreg.predict(X_test_d)\ny_PredLogTest","f047f43f":"Survived = pd.DataFrame(y_PredLogTest, columns = ['Survived'])","7df1a5a1":"csv_input = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ncsv_input['Survived'] = Survived\ncsv_input.to_csv('LogesticReg.csv', index=False)","173cea98":"from sklearn.neighbors import KNeighborsClassifier","c323baf4":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","4beaa920":"knn = KNeighborsClassifier()","42ac9b1c":"knn.fit(X_train, y_train)","8194d4eb":"y_pred_knn = knn.predict(X_test)","b2ce304d":"knn.score(X_train, y_train)","8c1ec049":"knn.score(X_test, y_test)","2601a6e8":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","acda75ff":"print(classification_report(y_test, y_pred_knn))","4e6a8d7a":"cm =confusion_matrix(y_test, y_pred_knn)\nsns.heatmap(cm, square=True , annot=True)","cd9ea59e":"error_rate = []\n# Might take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","603e704b":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=15)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","61f8c1f4":"knn7 = KNeighborsClassifier(n_neighbors=7)","30f9b41a":"knn7.fit(X_train, y_train)","2aec9119":"y_pred_knn7 = knn.predict(X_test)","5f8cf24c":"knn7.score(X_train, y_train)","3adc03b2":"knn7.score(X_test, y_test)","1679cdda":"# Evaluation knn(knn7)  on test.cvs and output y_Predknn7Test.csv\ny_Predknn7Test=knn7.predict(X_test_d)\ny_Predknn7Test\nSurvived = pd.DataFrame(y_Predknn7Test, columns = ['Survived'])\ncsv_input = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ncsv_input['Survived'] = Survived\ncsv_input.to_csv('y_Predknn7Test.csv', index=False)","2feceef0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","9ea37d90":"from sklearn.tree import DecisionTreeClassifier\nclassifier_Decicsion = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier_Decicsion.fit(X_train, y_train)","2346856a":"y_pred_Decision = classifier_Decicsion.predict(X_test)","9c7734ce":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred_Decision)\nprint(cm)\naccuracy_score(y_test,y_pred_Decision)","e6ed199d":"y_Pred_Dici_data=classifier_Decicsion.predict(X_test_d)\ny_Pred_Dici_data\nSurvived = pd.DataFrame(y_Pred_Dici_data, columns = ['Survived'])\ncsv_input = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ncsv_input['Survived'] = Survived\ncsv_input.to_csv('y_Pred_Dici_data.csv', index=False)","1e444ae0":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","4b3c9baa":"# Building  Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(criterion = 'entropy', random_state = 42)\nrfc.fit(X_train, y_train)","1dccabbc":"from sklearn.metrics import f1_score\nrfc_pred_test = rfc.predict(X_test)\nprint('Testing Set Evaluation F1-Score=>',f1_score(y_test,rfc_pred_test))","76e7e7f0":"y_Pred_rfc_data=rfc.predict(X_test_d)\ny_Pred_rfc_data\nSurvived = pd.DataFrame(y_Pred_rfc_data, columns = ['Survived'])\ncsv_input = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ncsv_input['Survived'] = Survived\ncsv_input.to_csv('y_Pred_rfc_data.csv', index=False)","eee47380":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","e70c871f":"from sklearn.svm import SVC\nsvclassifier = SVC(kernel='linear')\nsvclassifier.fit(X_train, y_train)","90feaa00":"y_pred_svm = svclassifier.predict(X_test)","a8804262":"y_pred_svm","24b1677e":"accuracy = accuracy_score(y_test, y_pred_svm) * 100\nprint(\"Accuracy of the Logistic Regression Model: \",accuracy)","b1028ef4":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test,y_pred_svm))\nprint(classification_report(y_test,y_pred_svm))","ad776918":"y_Pred_svm_data=svclassifier.predict(X_test_d)\ny_Pred_svm_data\nSurvived = pd.DataFrame(y_Pred_svm_data, columns = ['Survived'])\ncsv_input = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ncsv_input['Survived'] = Survived\ncsv_input.to_csv('y_Pred_svm_data.csv', index=False)","e8ccd44d":"!pip install xgboost","06bbd539":"import xgboost as xgb","a96c9cc3":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","62687bc0":"from xgboost import XGBClassifier","68bc9f89":"model = XGBClassifier()\nmodel.fit(X_train, y_train)","1e48f8b4":"y_pred_XGB = model.predict(X_test)","3ac503a4":"accuracy = accuracy_score(y_test,y_pred_XGB) * 100\nprint(\"Accuracy of the Logistic Regression Model: \",accuracy)","e61b0ca0":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test,y_pred_XGB))\nprint(classification_report(y_test,y_pred_XGB))","4abb1d05":"y_Pred_XGB_data=svclassifier.predict(X_test_d)\ny_Pred_XGB_data\nSurvived = pd.DataFrame(y_Pred_XGB_data, columns = ['Survived'])\ncsv_input = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ncsv_input['Survived'] = Survived\ncsv_input.to_csv('y_XGB_svm_data.csv', index=False)","7b181b2b":"## Importing the libraries","bf99f0bb":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Prepare Data and EDA <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","bd9a08ed":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> SVM <\/span><\/strong>","d8cf9e8b":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Visualization <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","0c1cec23":"# **Evaluation   Random Forest on test.cvs and output  y_Pred_rfc_data.csv**","8544a24d":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Logistic Regression <\/span><\/strong>","98d7548e":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Evaluation logistic_reg(logreg)  on test.cvs and output log_submission.csv <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">  \n<\/div>","ea97f7bc":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">load Data <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","010b1143":"# **Good luck****","85f98d16":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> XGBoost <\/span><\/strong>","a5a36d59":"## Evaluation","8675b45a":" ## Optimal value of K","967efbb8":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Train  Models <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">\n<\/div>","600c90e8":" # **Evaluation    SVM on test.cvs and output y_Pred_svm_data.csv**","b2a4a010":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> Decision Tree<\/span><\/strong>","1a25c889":"## Load ","4dd3b2d7":"# **Evaluation    Decision_Tree on test.cvs and output y_Pred_Dici_data.csv**","52a4431b":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> Random Forest <\/span><\/strong>","d082a87a":"<div class=\"alert alert-block alert-success\">\n    <h1 align=\"center\">Machine Learning in Python<\/h1>\n    <h3 align=\"center\">Titanic Multi Model<\/h3>\n<\/div>","f2c6d9d3":"# **Evaluation    XGBoost on test.cvs and output y_XGB_svm_data.csv**","205523d9":"<img src = \"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/3136\/logos\/front_page.png\" width=50%>","62f00d58":"# **Evaluation knn(knn7)  on test.cvs and output y_Predknn7Test.csv**","d4185766":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> KNN Regressor<\/span><\/strong>"}}