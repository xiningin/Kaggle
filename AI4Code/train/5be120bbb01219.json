{"cell_type":{"b8e09f0a":"code","18c663a6":"code","72fac9c2":"code","5db87da1":"code","00fa955f":"code","398721fe":"code","027e1b7d":"code","09da2bd8":"code","7c525408":"code","e179ac0d":"code","5557071f":"code","fa6f2875":"code","064da35e":"code","1a63d389":"code","27778b0c":"code","4b017226":"code","6cb3ebab":"code","ba4bbd5e":"code","e22b9785":"code","84a27b35":"code","7cbbec98":"code","655cd0f4":"code","09514763":"code","20650454":"code","cea028be":"code","6705c7f2":"code","f2f26114":"code","54fe0d92":"code","3a897784":"code","f9764c77":"code","03f56ffb":"code","de077725":"markdown","a8564347":"markdown","c49d035e":"markdown","87d90c09":"markdown","2ae66563":"markdown","c3008af1":"markdown","ee5e8728":"markdown","9a1f16ec":"markdown","db087aa2":"markdown","cfd8d9a7":"markdown","d8632802":"markdown","4e659317":"markdown","7604cdc3":"markdown","3e6f2915":"markdown","4b286e57":"markdown","a4a77a9e":"markdown","77db84fd":"markdown","d8fd9e8e":"markdown","31bc5b8b":"markdown","1d2b39e2":"markdown","84b191fe":"markdown","85d72c0e":"markdown"},"source":{"b8e09f0a":"import pandas as pd,\\\nnumpy as np,\\\nmatplotlib.pyplot as plt,\\\nseaborn as sns,\\\nplotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px","18c663a6":"nCov = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\", \n                   usecols=['ObservationDate', 'Province\/State', 'Country\/Region', 'Confirmed', 'Deaths', 'Recovered'])\n\nnCov.columns = ['Date', 'Province\/State', 'Country', 'Confirmed', 'Deaths', 'Recovered']\n\nnCov['Date'] = pd.to_datetime(nCov['Date']).dt.to_period('D')\nnCov['Date'] = nCov['Date'].values.astype('datetime64[D]')\n# nCov['Province\/State'] = nCov['Province\/State'].str.replace('\\(From Diamond Princess\\)', \"\")\nnCov['Province\/State'] = nCov['Province\/State'].str.replace('Diamond Princess', \"DP\")\nnCov['Province\/State'] = nCov['Province\/State'].str.replace('From DP', \"DP\")\nnCov['Country'] = nCov['Country'].str.replace('Diamond Princess', \"DP\")\n\nnCov.replace('None', np.nan, inplace=True)\nnCov.fillna('Not Specified', inplace=True)","72fac9c2":"country_code = pd.read_csv('..\/input\/plotly_countries\/2014_world_gdp_with_codes.csv', usecols=['COUNTRY', 'CODE'])\ncountry_code.loc[country_code['COUNTRY'] == \"Korea, South\", 'COUNTRY'] = 'South Korea'\ncountry_code.loc[country_code['COUNTRY'] == \"United States\", 'COUNTRY'] = 'US'\ncountry_code.loc[country_code['COUNTRY'] == \"United Kingdom\", 'COUNTRY'] = 'UK'\ncountry_code.loc[country_code['COUNTRY'] == \"Cote d'Ivoire\", 'COUNTRY'] = \"Ivory Coast\"\ncountry_code.loc[country_code['COUNTRY'] == \"Korea, South\", 'COUNTRY'] = 'South Korea'\ncountry_code.loc[country_code['COUNTRY'] == \"China\", 'COUNTRY'] = 'Mainland China'","5db87da1":"nCov.head()","00fa955f":"country_code.head()","398721fe":"nCov_describe = nCov.describe()\nnCov_describe","027e1b7d":"fig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n          [{\"type\": \"bar\"}, {\"type\": \"bar\"}]], \n    subplot_titles=(\"Average\", \"Standard Deviation\", \"Minimum\", \"Maximum\")\n)\n\nnCov_mean = nCov_describe.loc['mean'].sort_values(ascending=False)\nnCov_std = nCov_describe.loc['std'].sort_values(ascending=False)\nnCov_min = nCov_describe.loc['min'].sort_values(ascending=False)\nnCov_max = nCov_describe.loc['max'].sort_values(ascending=False)\n\nfig.add_trace(go.Bar(y=nCov_mean, x=nCov_mean.index, text=nCov_mean, textposition='auto',\n                     marker={'color': ['orange', 'green', 'red'], 'opacity': 0.75}, \n                     name='Average'), 1, 1)\n\nfig.add_trace(go.Bar(y=nCov_std, x=nCov_std.index, text=nCov_std, textposition='auto',\n                     marker={'color': ['orange', 'green', 'red'], 'opacity': 0.75}, \n                     name='Standard Deviation'), 1, 2)\n\nfig.add_trace(go.Bar(y=nCov_min, x=nCov_min.index, text=nCov_min, textposition='auto',\n                     marker={'color': ['orange', 'green', 'red'], 'opacity': 0.75}, \n                     name='Minimum'), 2, 1)\n\nfig.add_trace(go.Bar(y=nCov_max, x=nCov_max.index, text=nCov_max, textposition='auto',\n                     marker={'color': ['orange', 'green', 'red'], 'opacity': 0.75}, \n                     name='Maximum'),2,2)\n\nfig.update_layout(height=750, showlegend=False, width=750,\n                  title_text='Global COVID-19 Case Status Statistical Properties per Province, 2020', uniformtext_minsize=4)\nfig.update_traces(texttemplate='%{text:.1f}')\n\nfig.show()","09da2bd8":"country_grouped = nCov.groupby(['Country', 'Province\/State']).max().groupby('Country').sum()\ncountry_grouped['Country'] = country_grouped.index\ncountry_grouped.head()","7c525408":"province_grouped = nCov.groupby(['Country', 'Province\/State']).max()\nprovince_grouped['Country'] = province_grouped.index.get_level_values(0)\nprovince_grouped['Province\/State'] = province_grouped.index.get_level_values(1)\nprovince_grouped = province_grouped.droplevel(0).drop('Date', axis=1)\nprovince_grouped.head()","e179ac0d":"date_grouped = nCov.groupby(['Country', 'Province\/State', 'Date']).max() # Grouping is only to sort. \"Max\" doesn't do anything\ndate_grouped = date_grouped.diff(axis=0)\ndate_grouped.\\\nloc[nCov.groupby(['Country', 'Province\/State']).nth(0).\\\nset_index('Date', append=True).index] = \\\nnCov.groupby(['Country', 'Province\/State']).nth(0)\\\n.set_index('Date', append=True)","5557071f":"date_grouped = nCov.groupby(['Country', 'Province\/State', 'Date']).max() # Grouping is only to sort. \"Max\" doesn't do anything\ndate_grouped = date_grouped.diff(axis=0)\ndate_grouped.\\\nloc[nCov.groupby(['Country', 'Province\/State']).nth(0).\\\nset_index('Date', append=True).index] = \\\nnCov.groupby(['Country', 'Province\/State']).nth(0)\\\n.set_index('Date', append=True)\ndate_grouped.loc[date_grouped['Recovered'] < 0, ['Recovered']] = 0\ndate_grouped.loc[date_grouped['Confirmed'] < 0, ['Confirmed']] = 0\ndate_grouped.loc[date_grouped['Deaths'] < 0, ['Deaths']] = 0","fa6f2875":"date_country_grouped = date_grouped","064da35e":"date_grouped_sum = date_grouped.groupby(['Date']).sum()\ndate_grouped_cumsum = date_grouped_sum.cumsum()\ndate_grouped_sum['Date'] = date_grouped_sum.index\ndate_grouped_cumsum['Date'] = date_grouped_cumsum.index","1a63d389":"date_grouped_sum.head()","27778b0c":"date_grouped_cumsum.head()","4b017226":"df = country_grouped\\\n.merge(country_code.set_index('COUNTRY'), left_index=True, right_index=True, how='left').dropna()","6cb3ebab":"## CONFIRMED\nfig = px.choropleth(df, locations=\"CODE\",\n                    color=\"Confirmed\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.Peach, range_color=[0, 40], labels={\"Confirmed\": \"Scaled Confirmed\"})\n\nfig.update_layout(title_text=\"Global COVID-19 Confirmed Cases\")\nfig.show()\n\n## RECOVERED\nfig = px.choropleth(df, locations=\"CODE\",\n                    color=\"Recovered\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.Viridis, range_color=[1,40], labels={\"Recovered\": \"Scaled Recovered\"})\n\nfig.update_layout(title_text=\"Global COVID-19 Recovered Cases\")\nfig.show()\n\n## DEATHS\nfig = px.choropleth(df, locations=\"CODE\",\n                    color=\"Deaths\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.Inferno, range_color=[1,40], labels={\"Deaths\": \"Scaled Deaths\"})\n\nfig.update_layout(title_text=\"Global COVID-19 Death Cases\")\nfig.show()","ba4bbd5e":"# pg_tree = province_grouped.copy()\n\npg_tree = nCov.copy()\npg_tree['Under Treatment'] = pg_tree['Confirmed'] - (pg_tree['Recovered'] + pg_tree['Deaths'])\npg_tree.drop('Confirmed', axis=1, inplace=True)\npg_tree = pd.DataFrame(pg_tree.groupby(['Country', 'Province\/State']).max().drop('Date', axis=1).stack(), columns=['Value'])\npg_tree['Country'] = pg_tree.index.get_level_values(0)\npg_tree['Province\/State'] = pg_tree.index.get_level_values(1)\npg_tree['Status'] = pg_tree.index.get_level_values(2)\npg_tree.droplevel([0, 1])\npg_tree.reset_index(drop=True, inplace=True)\n\nworld_sun = pg_tree\nworld_sun_exc_china = pg_tree.loc[pg_tree['Country'] != 'Mainland China']\n\nworld_sun_exc = pg_tree.loc[(pg_tree['Country'] != 'South Korea') &\n                            (pg_tree['Country'] != 'Mainland China') &\n                                 (pg_tree['Country'] != 'Italy') &\n                                 (pg_tree['Country'] != 'Others') &\n                                 (pg_tree['Country'] != 'Iran')]\n\nchina_sun = pg_tree.loc[pg_tree['Country'] == 'Mainland China'].drop('Country', axis=1)\nchina_sun_exec_hubei = china_sun.drop(china_sun.loc[china_sun['Province\/State'] == 'Hubei'].index)\nus_sun = pg_tree.loc[pg_tree['Country'] == 'US'].drop('Country', axis=1)\n\n\n\nfig = px.sunburst(world_sun.replace(0, 0.0000001), values='Value', maxdepth=3,\n                  path=['Country', 'Province\/State', 'Status'])\nfig.update_layout(height=800,uniformtext=dict(minsize=9 ,mode='hide'), title_text=\"Worldwide Cases\")\nfig.show()\n\nfig = px.sunburst(world_sun_exc_china.replace(0, 0.0000001), values='Value', maxdepth=3,\n                  path=['Country', 'Province\/State', 'Status'])\nfig.update_layout(height=800,uniformtext=dict(minsize=9 ,mode='hide'), title_text=\"Worldwide Cases (Exclusion: China)\")\nfig.show()\n\nfig = px.sunburst(world_sun_exc.replace(0, 0.0000001), values='Value', maxdepth=3,\n                  path=['Country', 'Province\/State', 'Status'])\nfig.update_layout(height=800,uniformtext=dict(minsize=9 ,mode='hide'), title_text=\"Worldwide Cases (Exclusion: China, S-Korea, Italy, Others, Iran)\")\nfig.show()\n\nfig = px.sunburst(china_sun.replace(0, 0.0000001), values='Value', maxdepth=3,\n                  path=[ 'Province\/State', 'Status'])\nfig.update_layout(height=800,uniformtext=dict(minsize=9 ,mode='hide'), title_text=\"China Cases\")\nfig.show()\n\nfig = px.sunburst(china_sun_exec_hubei.replace(0, 0.0000001), values='Value', maxdepth=3,\n                  path=['Province\/State', 'Status'])\nfig.update_layout(height=800,uniformtext=dict(minsize=9 ,mode='hide'), title_text=\"China Cases (Exclusion: Hubei)\")\nfig.show()\n\nfig = px.sunburst(us_sun.replace(0, 0.0000001), values='Value', maxdepth=3,\n                  path=['Province\/State', 'Status'])\nfig.update_layout(height=800,uniformtext=dict(minsize=9 ,mode='hide'), title_text=\"US Cases\")\nfig.show()","e22b9785":"pie_chart_cases = country_grouped.copy()\npie_chart_cases['Under Treatment'] = pie_chart_cases['Confirmed'] - (pie_chart_cases['Deaths'] + pie_chart_cases['Recovered'])\npie_chart_cases.drop('Confirmed', axis = 1, inplace = True)\npie_chart_cases = pie_chart_cases[['Under Treatment', 'Deaths', 'Recovered']].sum()\n\nfig = go.Figure()\n\nfig.add_trace(go.Pie(labels=pie_chart_cases.index, text=pie_chart_cases.values,\n                     values=pie_chart_cases.values, name=\"Cases\", marker={'colors': ['orange', 'red', 'rgb(0,204,150)']}))\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textposition='inside', insidetextfont=dict(size=16))\nfig.update_layout(height=700, uniformtext_mode=False, \n    title_text=\"Global COVID-19 Cases\")\nfig.show()","84a27b35":"country_grouped_pie = country_grouped\n\ncountry_grouped_conf = country_grouped_pie.drop(country_grouped_pie.loc[country_grouped_pie['Confirmed'] == 0].index)\ncountry_grouped_rec = country_grouped_pie.drop(country_grouped_pie.loc[country_grouped_pie['Recovered'] == 0].index)\ncountry_grouped_death = country_grouped_pie.drop(country_grouped_pie.loc[country_grouped_pie['Deaths'] == 0].index)\n\nfig = make_subplots(rows=2, cols=2, column_width=[0.65, 0.35], vertical_spacing = 0.1,\n                    specs=[[{'type':'domain', \"colspan\": 2}, None], \n                           [{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=country_grouped_conf.index, \n                     values=country_grouped_conf['Confirmed'], name=\"Confirmed Cases\"), 1, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_rec.index, \n                     values=country_grouped_rec['Recovered'], name=\"Recovered Cases\"), 2, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_death.index, \n                     values=country_grouped_death['Deaths'], name=\"Death Cases\"), 2, 2)\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textposition='inside')\nfig.update_layout(height=1200, uniformtext_mode=False,\n    title_text=\" COVID-19 Cases in All Countries\",\n    annotations=[{'text':'Confirmed', 'x':0.1, 'y':1, 'font_size':18, 'showarrow':False},\n                 {'text':'Recovered', 'x':-0.1, 'y':0.4, 'font_size':18, 'showarrow':False},\n                 {'text':'Deaths', 'x':0.75, 'y':0.35, 'font_size':18, 'showarrow':False}])\nfig.show()\n\n##########\n\ncountry_grouped_pie = country_grouped.drop('Mainland China')\n\ncountry_grouped_conf = country_grouped_pie.drop(country_grouped_pie.loc[country_grouped_pie['Confirmed'] == 0].index)\ncountry_grouped_rec = country_grouped_pie.drop(country_grouped_pie.loc[country_grouped_pie['Recovered'] == 0].index)\ncountry_grouped_death = country_grouped_pie.drop(country_grouped_pie.loc[country_grouped_pie['Deaths'] == 0].index)\n\nfig = make_subplots(rows=2, cols=2, column_width=[0.65, 0.35], vertical_spacing = 0.1,\n                    specs=[[{'type':'domain', \"colspan\": 2}, None], \n                           [{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=country_grouped_conf.index, \n                     values=country_grouped_conf['Confirmed'], name=\"Confirmed Cases\"), 1, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_rec.index, \n                     values=country_grouped_rec['Recovered'], name=\"Recovered Cases\"), 2, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_death.index, \n                     values=country_grouped_death['Deaths'], name=\"Death Cases\"), 2, 2)\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textposition='inside')\nfig.update_layout(height=1200, uniformtext_mode=False,\n    title_text=\"COVID-19 Cases in All Countries (Exclusion: China)\",\n    annotations=[{'text':'Confirmed', 'x':0.1, 'y':1, 'font_size':18, 'showarrow':False},\n                 {'text':'Recovered', 'x':-0.1, 'y':0.4, 'font_size':18, 'showarrow':False},\n                 {'text':'Deaths', 'x':0.75, 'y':0.35, 'font_size':18, 'showarrow':False}])\nfig.show()\n#######################\n\n\n\nprovince_grouped_pie = province_grouped\n\ncountry_grouped_conf = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Confirmed'] == 0].index)\ncountry_grouped_rec = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Recovered'] == 0].index)\ncountry_grouped_death = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Deaths'] == 0].index)\n\nfig = make_subplots(rows=2, cols=2, column_width=[0.65, 0.35], vertical_spacing = 0.1,\n                    specs=[[{'type':'domain', \"colspan\": 2}, None], \n                           [{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=country_grouped_conf.index, \n                     values=country_grouped_conf['Confirmed'], name=\"Confirmed Cases\"), 1, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_rec.index, \n                     values=country_grouped_rec['Recovered'], name=\"Recovered Cases\"), 2, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_death.index, \n                     values=country_grouped_death['Deaths'], name=\"Death Cases\"), 2, 2)\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textposition='inside')\nfig.update_layout(height=1200, uniformtext_mode=False,\n    title_text=\" COVID-19 Cases in All Provinces\",\n    annotations=[{'text':'Confirmed', 'x':0.1, 'y':1, 'font_size':18, 'showarrow':False},\n                 {'text':'Recovered', 'x':-0.1, 'y':0.4, 'font_size':18, 'showarrow':False},\n                 {'text':'Deaths', 'x':0.75, 'y':0.35, 'font_size':18, 'showarrow':False}])\nfig.show()\n\n##########\n\nprovince_grouped_pie = province_grouped.drop('Hubei')\n\ncountry_grouped_conf = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Confirmed'] == 0].index)\ncountry_grouped_rec = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Recovered'] == 0].index)\ncountry_grouped_death = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Deaths'] == 0].index)\n\nfig = make_subplots(rows=2, cols=2, column_width=[0.65, 0.35], vertical_spacing = 0.1,\n                    specs=[[{'type':'domain', \"colspan\": 2}, None], \n                           [{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=country_grouped_conf.index, \n                     values=country_grouped_conf['Confirmed'], name=\"Confirmed Cases\"), 1, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_rec.index, \n                     values=country_grouped_rec['Recovered'], name=\"Recovered Cases\"), 2, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_death.index, \n                     values=country_grouped_death['Deaths'], name=\"Death Cases\"), 2, 2)\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textposition='inside')\nfig.update_layout(height=1200, uniformtext_mode=False,\n    title_text=\"COVID-19 Cases in All Provinces (Exclusion: Hubei)\",\n    annotations=[{'text':'Confirmed', 'x':0.1, 'y':1, 'font_size':18, 'showarrow':False},\n                 {'text':'Recovered', 'x':-0.1, 'y':0.4, 'font_size':18, 'showarrow':False},\n                 {'text':'Deaths', 'x':0.75, 'y':0.35, 'font_size':18, 'showarrow':False}])\nfig.show()","7cbbec98":"province_grouped_pie = province_grouped[province_grouped['Country'] == 'Mainland China']\n\ncountry_grouped_conf = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Confirmed'] == 0].index)\ncountry_grouped_rec = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Recovered'] == 0].index)\ncountry_grouped_death = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Deaths'] == 0].index)\n\nfig = make_subplots(rows=2, cols=2, column_width=[0.65, 0.35], vertical_spacing = 0.1,\n                    specs=[[{'type':'domain', \"colspan\": 2}, None], \n                           [{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=country_grouped_conf.index, \n                     values=country_grouped_conf['Confirmed'], name=\"Confirmed Cases\"), 1, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_rec.index, \n                     values=country_grouped_rec['Recovered'], name=\"Recovered Cases\"), 2, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_death.index, \n                     values=country_grouped_death['Deaths'], name=\"Death Cases\"), 2, 2)\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textposition='inside')\nfig.update_layout(height=1200, uniformtext_mode=False,\n    title_text=\" China COVID-19 Cases in Provinces\",\n    annotations=[{'text':'Confirmed', 'x':0.1, 'y':1, 'font_size':18, 'showarrow':False},\n                 {'text':'Recovered', 'x':-0.1, 'y':0.4, 'font_size':18, 'showarrow':False},\n                 {'text':'Deaths', 'x':0.75, 'y':0.35, 'font_size':18, 'showarrow':False}])\nfig.show()\n\n##########\n\nprovince_grouped_pie = province_grouped[province_grouped['Country'] == 'Mainland China'].drop('Hubei')\n\ncountry_grouped_conf = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Confirmed'] == 0].index)\ncountry_grouped_rec = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Recovered'] == 0].index)\ncountry_grouped_death = province_grouped_pie.drop(province_grouped_pie.loc[province_grouped_pie['Deaths'] == 0].index)\n\nfig = make_subplots(rows=2, cols=2, column_width=[0.65, 0.35], vertical_spacing = 0.1,\n                    specs=[[{'type':'domain', \"colspan\": 2}, None], \n                           [{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=country_grouped_conf.index, \n                     values=country_grouped_conf['Confirmed'], name=\"Confirmed Cases\"), 1, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_rec.index, \n                     values=country_grouped_rec['Recovered'], name=\"Recovered Cases\"), 2, 1)\n\nfig.add_trace(go.Pie(labels=country_grouped_death.index, \n                     values=country_grouped_death['Deaths'], name=\"Death Cases\"), 2, 2)\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textposition='inside')\nfig.update_layout(height=1200, uniformtext_mode=False,\n    title_text=\" China COVID-19 Cases in Provinces (Exclusion: Hubei)\",\n    annotations=[{'text':'Confirmed', 'x':0.1, 'y':1, 'font_size':18, 'showarrow':False},\n                 {'text':'Recovered', 'x':-0.1, 'y':0.4, 'font_size':18, 'showarrow':False},\n                 {'text':'Deaths', 'x':0.75, 'y':0.35, 'font_size':18, 'showarrow':False}])\nfig.show()","655cd0f4":"country_grouped_exc_mainland = country_grouped.drop(['Mainland China']).sort_values(by='Confirmed')\nfig = px.bar(country_grouped_exc_mainland, x=\"Confirmed\", y=\"Country\",\n             color=\"Deaths\", text='Confirmed',\n             title='Confirmed & Death Cases in Countries - (Exclusion: China)', labels={\"Confirmed\": \"Confirmed Cases\"},\n             height=1500, orientation='h')\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=12, yaxis=dict(tickangle=10, tickmode='linear'))\nfig.show()","09514763":"country_grouped_exc_mainland.sort_values(by='Recovered', ascending=True, inplace=True)\n\nfig = px.bar(country_grouped_exc_mainland, x=\"Recovered\", y=\"Country\",\n             color=\"Deaths\", text='Recovered',\n             title='Recovered & Death Cases in Countries (Exclusion: China)', labels={\"Recovered\": \"Recovered Cases\"},\n             height=1500, orientation='h')\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=12, yaxis=dict(tickangle=10, tickmode='linear'))\nfig.show()","20650454":"china_provinces = date_country_grouped.loc['Mainland China'].groupby('Province\/State').max()\\\n.sort_values(by='Confirmed')\n\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=china_provinces['Confirmed'], y=china_provinces.index.tolist(), \n                     orientation='h', text= china_provinces['Confirmed'], \n                    name='Confirmed', textposition='none', marker={'color': 'orange', 'opacity': 0.75}))\n\nfig.add_trace(go.Bar(x=china_provinces['Recovered'], y=china_provinces.index.tolist(),\n                     orientation='h', text= china_provinces['Recovered'],\n                    name='Recovered', textposition='none', marker={'color': 'green', 'opacity': 0.75}))\n\nfig.add_trace(go.Bar(x=china_provinces['Deaths'], y=china_provinces.index.tolist(),\n                      orientation='h', text= china_provinces['Deaths'],\n                    name='Deaths', textposition='outside', marker={'color': 'red', 'opacity': 0.75}))\n\n\nfig.update_layout(height=700, showlegend=True, \n                  title_text='Cases in Provinces\/Cities (Anotated by Death Cases)', uniformtext_minsize=12, barmode='stack')\n\nfig.update_traces(texttemplate='%{text:.2d}')\n\nfig.show()\n\nchina_provinces = date_country_grouped.loc['Mainland China'].drop('Hubei').groupby('Province\/State').max()\\\n.sort_values(by='Confirmed')\n\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=china_provinces['Confirmed'], y=china_provinces.index.tolist(), \n                     orientation='h', text= china_provinces['Confirmed'], \n                    name='Confirmed', textposition='none', marker={'color': 'orange', 'opacity': 0.75}))\n\nfig.add_trace(go.Bar(x=china_provinces['Recovered'], y=china_provinces.index.tolist(),\n                     orientation='h', text= china_provinces['Recovered'],\n                    name='Recovered', textposition='none', marker={'color': 'green', 'opacity': 0.75}))\n\nfig.add_trace(go.Bar(x=china_provinces['Deaths'], y=china_provinces.index.tolist(),\n                      orientation='h', text= china_provinces['Deaths'],\n                    name='Deaths', textposition='outside', marker={'color': 'red', 'opacity': 0.75}))\n\n\nfig.update_layout(height=700, showlegend=True, \n                  title_text='Cases in Provinces\/Cities (Anotated by Death Cases, Exclusion: Hubei)', uniformtext_minsize=12, barmode='stack')\n\nfig.update_traces(texttemplate='%{text:.2d}')\n\nfig.show()","cea028be":"date_grouped = date_grouped_cumsum\ndate_grouped = date_grouped.sort_index(ascending=False)\n\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=date_grouped.index.tolist(), y=date_grouped['Confirmed'],\n                    mode='lines+markers',\n                    name='Confirmed', marker={'color': 'orange', 'opacity': 0.8} ))\nfig.add_trace(go.Scatter(x=date_grouped.index.tolist(), y=date_grouped['Recovered'],\n                    mode='lines+markers',\n                    name='Recovered', marker={'color': 'green', 'opacity': 0.6} ))\nfig.add_trace(go.Scatter(x=date_grouped.index.tolist(), y=date_grouped['Deaths'],\n                    mode='lines+markers',\n                    name='Deaths', marker={'color': 'red', 'opacity': 1} ))\n\nfig.update_layout(height=500, title_text=\"Global Corona Spread with Time (Cumulative)\")\nfig.show()\n\n###############\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(y=date_grouped.index.tolist(), x=date_grouped['Confirmed'],orientation='h',\n                    name='Confirmed', marker={'color': 'orange', 'opacity': 0.8} ))\n\nfig.add_trace(go.Bar(y=date_grouped.index.tolist(), x=date_grouped['Recovered'],orientation='h',\n                    name='Recovered', marker={'color': 'green', 'opacity': 0.6}))\n\nfig.add_trace(go.Bar(y=date_grouped.index.tolist(), x=date_grouped['Deaths'],orientation='h',\n                    name='Deaths', marker={'color': 'red', 'opacity': 1}))\n\nfig.update_layout(barmode='stack')\nfig.update_layout(height=900, title_text=\"Global Corona Spread with Time (Cumulative Stacked Vars)\",\n                  yaxis=dict(tickmode='linear', tickangle=30) )\nfig.show()\n","6705c7f2":"fig = px.bar(date_grouped_cumsum, x='Confirmed', y='Date', text='Confirmed',\n              color='Deaths', hover_data=['Recovered'],\n             labels={'Confirmed':'Confirmed Cases'}, height=900, \n             title='COVID-19 Confirmed and Death Cases with Time (Cumulative)', orientation='h')\n\nfig.update_traces(texttemplate='%{text:.3s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, yaxis=dict(tickangle=20, tickmode='linear'))\nfig.show()\n\nfig = px.bar(date_grouped_sum, x='Confirmed', y='Date', text='Confirmed',\n              color='Deaths', hover_data=['Recovered'],\n             labels={'Confirmed':'Confirmed Cases'}, height=900, \n             title='COVID-19 Confirmed and Death Cases with Time (NON-Cumulative)', orientation='h')\n\nfig.update_traces(texttemplate='%{text:.3s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, yaxis=dict(tickangle=20, tickmode='linear'))\n\nfig.show()","f2f26114":"china_date = date_country_grouped.loc['Mainland China'].drop('Hubei').droplevel(0).groupby('Date').sum().cumsum()\nhubei_date = date_country_grouped.loc['Mainland China'].loc['Hubei'].groupby('Date').max().cumsum()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=china_date.index.tolist(), y=china_date['Confirmed'], mode=\"markers+lines\",\n                    name='Confirmed', textposition='top left', marker={'color': 'orange', 'opacity': 0.75}))\n\nfig.add_trace(go.Scatter(x=china_date.index.tolist(), y=china_date['Recovered'], mode=\"markers+lines\",\n                    name='Recovered', textposition='top left', marker={'color': 'green', 'opacity': 0.75}))\n\nfig.add_trace(go.Scatter(x=china_date.index.tolist(), y=china_date['Deaths'], mode=\"markers+lines\",\n                    name='Deaths', textposition='top left', marker={'color': 'red', 'opacity': 0.75}))\nfig.update_layout(showlegend=True, \n                  title_text='Cases in Provinces\/Cities with Time (Exclusion: Hubei, Cumulative)', uniformtext_minsize=12)\n\nfig.show()\n\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=hubei_date.index.tolist(), y=hubei_date['Confirmed'], mode=\"markers+lines\",\n                    name='Confirmed', marker={'color': 'orange', 'opacity': 0.75}))\n\nfig.add_trace(go.Scatter(x=hubei_date.index.tolist(), y=hubei_date['Recovered'], mode=\"markers+lines\",\n                    name='Recovered', marker={'color': 'green', 'opacity': 0.75}))\n\nfig.add_trace(go.Scatter(x=hubei_date.index.tolist(), y=hubei_date['Deaths'], mode=\"markers+lines\",\n                    name='Deaths', marker={'color': 'red', 'opacity': 0.75}))\nfig.update_layout(showlegend=True, \n                  title_text='Cases in Hubei Province - Cumulative', uniformtext_minsize=12)\n\nfig.show()\n","54fe0d92":"def plot_time_scatter(date_country_grouped, country_name):\n    country_date = date_country_grouped.loc[country_name].droplevel(0).groupby('Date').sum()\n    country_date['Under Treatment'] = country_date['Confirmed'] - (country_date['Recovered'] + country_date['Deaths'])\n    \n    country_date[['Confirmed', 'Deaths', 'Recovered', 'Under Treatment']] = \\\n    country_date[['Confirmed', 'Deaths', 'Recovered', 'Under Treatment']].apply(np.abs)\n\n    fig = go.Figure()\n \n    fig.add_trace(go.Scatter(x=country_date.index.tolist(), y=country_date['Recovered'], mode=\"markers+lines\",\n                        name='Recovered', textposition='top left', marker={'color': 'green', 'opacity': 0.75}))\n\n    fig.add_trace(go.Scatter(x=country_date.index.tolist(), y=country_date['Deaths'], mode=\"markers+lines\",\n                        name='Deaths', textposition='top left', marker={'color': 'red', 'opacity': 0.75}))\n\n    fig.add_trace(go.Scatter(x=country_date.index.tolist(), y=country_date['Under Treatment'], mode=\"markers+lines\",\n                        name='Under Treatment', textposition='top left', marker={'color': 'gray', 'opacity': 0.75}))\n\n    fig.update_layout(height=600, showlegend=True, \n                      title_text= ''+str(country_name)+ ' Cases with Time', uniformtext_minsize=12)\n\n    fig.show()\n\n\nplot_time_scatter(date_country_grouped, 'Mainland China')\nplot_time_scatter(date_country_grouped, 'South Korea')\nplot_time_scatter(date_country_grouped, 'Italy')\nplot_time_scatter(date_country_grouped, 'Iran')\nplot_time_scatter(date_country_grouped, 'Japan')\nplot_time_scatter(date_country_grouped, 'US')\nplot_time_scatter(date_country_grouped, 'Singapore')\nplot_time_scatter(date_country_grouped, 'France')\nplot_time_scatter(date_country_grouped, 'Hong Kong') ","3a897784":"\nmainland_china_dates = date_country_grouped.loc['Mainland China'].droplevel(0).groupby('Date').sum().cumsum()\nrest_dates = date_country_grouped.drop('Mainland China').droplevel(0).groupby('Date').sum().cumsum()\n\nfig = go.Figure()\nfig.add_trace(go.Bar(y=mainland_china_dates.index,\n                x=mainland_china_dates['Confirmed'],\n                name='Mainland China', orientation='h',text=mainland_china_dates['Confirmed'],textposition='outside',\n                marker_color='rgba(255, 0,0, 0.5)'\n                ))\nfig.add_trace(go.Bar(y=rest_dates.index,\n                x=rest_dates['Confirmed'], text=rest_dates['Confirmed'], textposition='outside',\n                name='Rest', orientation='h',\n                marker_color='rgba(255,200,0, 1)'\n                ))\nfig.update_layout(height=1200, showlegend=True,\n                      title_text= 'Cases with Time', uniformtext_minsize=12, yaxis=dict(tickmode='linear', tickangle=10))","f9764c77":"ratios = country_grouped\n\nratios['Under Treatment'] = ratios['Confirmed'] - (ratios['Recovered'] + ratios['Deaths'])\n\n    \nratios = ratios[ratios['Confirmed'] > ratios['Confirmed'].median()][['Confirmed', 'Under Treatment', 'Recovered', 'Deaths']]\nratios = ratios.drop('Confirmed', axis=1)\nratios = (ratios.T \/ ratios.sum(axis=1)).T.dropna()\n\nhighest_death_ratio = ratios.sort_values(by='Deaths', ascending=False).iloc[:5,:]\nhighest_recovered_ratio = ratios.sort_values(by='Recovered', ascending=False).iloc[:5,:]\nhighest_ut_ratio = ratios.sort_values(by='Under Treatment', ascending=False).iloc[:5,:]","03f56ffb":"# Under Treatment\nfig = go.Figure()\nfig.add_trace( go.Funnel(\n    name = highest_ut_ratio.iloc[0,:].name,\n    orientation='v',\n    x = highest_ut_ratio.columns,\n    y = highest_ut_ratio.iloc[0,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_ut_ratio.iloc[1,:].name,\n    orientation = \"v\",\n    x = highest_ut_ratio.columns,\n    y = highest_ut_ratio.iloc[1,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_ut_ratio.iloc[2,:].name,\n    orientation = \"v\",\n    x = highest_ut_ratio.columns,\n    y = highest_ut_ratio.iloc[2,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_ut_ratio.iloc[3,:].name,\n    orientation = \"v\",\n    x = highest_ut_ratio.columns,\n    y = highest_ut_ratio.iloc[3,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_ut_ratio.iloc[4,:].name,\n    orientation = \"v\", \n    x = highest_ut_ratio.columns,\n    y = highest_ut_ratio.iloc[4,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.update_layout(height=700, title='Highest countries in Under Treatment case ratio')\nfig.show()\n\n# Recovered \nfig = go.Figure()\nfig.add_trace( go.Funnel(\n    name = highest_recovered_ratio.iloc[0,:].name,\n    orientation='v',\n    x = highest_recovered_ratio.columns,\n    y = highest_recovered_ratio.iloc[0,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_recovered_ratio.iloc[1,:].name,\n    orientation = \"v\",\n    x = highest_recovered_ratio.columns,\n    y = highest_recovered_ratio.iloc[1,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_recovered_ratio.iloc[2,:].name,\n    orientation = \"v\",\n    x = highest_recovered_ratio.columns,\n    y = highest_recovered_ratio.iloc[2,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_recovered_ratio.iloc[3,:].name,\n    orientation = \"v\",\n    x = highest_recovered_ratio.columns,\n    y = highest_recovered_ratio.iloc[3,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_recovered_ratio.iloc[4,:].name,\n    orientation = \"v\",\n    x = highest_recovered_ratio.columns,\n    y = highest_recovered_ratio.iloc[4,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.update_layout(height=700, title='Highest countries in RECOVERED cases ratio')\nfig.show()\n\n\n# Deaths \nfig = go.Figure()\nfig.add_trace( go.Funnel(\n    name = highest_death_ratio.iloc[0,:].name,\n    orientation='v',\n    x = highest_death_ratio.columns,\n    y = highest_death_ratio.iloc[0,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_death_ratio.iloc[1,:].name,\n    orientation = \"v\",\n    x = highest_death_ratio.columns,\n    y = highest_death_ratio.iloc[1,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_death_ratio.iloc[2,:].name,\n    orientation = \"v\",\n    x = highest_death_ratio.columns,\n    y = highest_death_ratio.iloc[2,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_death_ratio.iloc[3,:].name,\n    orientation = \"v\",\n    x = highest_death_ratio.columns,\n    y = highest_death_ratio.iloc[3,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.add_trace(go.Funnel(\n    name = highest_death_ratio.iloc[4,:].name,\n    orientation = \"v\",\n    x = highest_death_ratio.columns,\n    y = highest_death_ratio.iloc[4,:],\n    textposition = \"auto\", hoverinfo='x+y',\n    textinfo = 'percent total'))\n\nfig.update_layout(height=700, title='Highest countries in DEATH cases ratio')\nfig.show()","de077725":"###  Detailed Case Types in Mainland China","a8564347":"### Country Grouping\n_Note that cases are **cumulative sum**, thus we need to get the last date for each province, then group sum by country_","c49d035e":"### Import Data\nSimple preprocessing\n\n**NOTE: Diamond Princess is changed to DP**","87d90c09":"# Proportion of Cases in Countries & Provinces","2ae66563":"# Preprocessing","c3008af1":"# Country\/Province-Specific Cases Time-Series","ee5e8728":"# COVID-19 - Corona Virus Analysis \n### Context\n> From World Health Organization - On 31 December 2019, WHO was alerted to several cases of pneumonia in Wuhan City, Hubei Province of China. The virus did not match any other known virus. This raised concern because when a virus is new, we do not know how it affects people.\n> \n> So daily level information on the affected people can give some interesting insights when it is made available to the broader data science community.\n> \n> Johns Hopkins University has made an excellent dashboard using the affected cases data. This data is extracted from the same link and made available in csv format.","9a1f16ec":"### Plots ordered by highest number of confirmed cases in countries","db087aa2":"### Country Code  Dataset","cfd8d9a7":"### Two Date Groupings - Cumulative Sum and actual values by day\n_**REMEMBER:** Any immediate aggregation by date is wrong, numbers won't represent real values but summed up cumulative sums_\n\n**STEPS:**\n1. Group by Country, Province, Date (No function is applied)\n2. get the difference between each two proceeding values in groups\n3. Fix first values\n4. Get the actual **Grouping Sums then from that, cumsum**","d8632802":"# Ratios \n### (For countries exceeding confirmed cases median)","4e659317":"### COVID-19 Dataset","7604cdc3":"_Country names edited for dataset same value matching_","3e6f2915":"# Percentage of Types of Cases in Countries & Provinces","4b286e57":"### Province Grouping","a4a77a9e":"# COVID-19 Spread Time Series","77db84fd":"# China and the Rest Time-Series","d8fd9e8e":"# To Be Continued ...\n\nThank you. I hope that was a clear analysis of COVID-19 outbreak. Also, I hope that we do not need to analyze this dataset anymore. \nAnd don't forget to wash your hands everyone, Stay Healthy!\n\nPlease comment for any confusing part in the notebook, possible mistakes, criticisms, or advice. ","31bc5b8b":"# Detailed Case Types by Country","1d2b39e2":"\\begin{equation*}\n\\frac{Under Treatment}{Under Treatment + Deaths + Recovered},,, \\frac{Deaths}{Under Treatment + Deaths + Recovered},,,\\frac{Recovered}{Under Treatment + Deaths + Recovered}\n\\end{equation*}","84b191fe":"# COVID-19 Spread in Countries","85d72c0e":"# Descriptive Statistics"}}