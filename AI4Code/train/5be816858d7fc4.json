{"cell_type":{"fe26f43b":"code","c77eae0e":"code","28fd69cc":"code","473a895e":"code","243a989c":"code","7c542f32":"code","6f7bd1df":"code","0e6c5fff":"code","0e5c9e3a":"code","5cfeb3c8":"code","6b189804":"code","eb342269":"code","66fd8701":"code","4f061446":"code","3403bdd0":"code","f6bdbc1e":"code","53e67940":"code","475909ab":"code","8e4fc990":"code","13dbcc9e":"code","033086dc":"code","ae41d5c4":"code","0e5333c5":"code","e54b0f04":"code","64290c7b":"code","d393c812":"code","3e94d636":"code","f6adad86":"code","f7e2da71":"code","6d6733db":"code","f86faed1":"code","3da285d9":"code","4950fc48":"code","f4a7951a":"code","2203922b":"code","b5df7895":"code","934ee99b":"code","9ac0e1f1":"code","ba7fe1d4":"markdown","158e887e":"markdown","53ac9130":"markdown","30810191":"markdown","228a38f3":"markdown","dd4ffa6b":"markdown","9620a89e":"markdown","cbc54dea":"markdown","09138a1b":"markdown","7eb8cbd9":"markdown","c5a6c6d6":"markdown","f288ed8e":"markdown","ee9e9f01":"markdown","d346928c":"markdown","265ffa4e":"markdown"},"source":{"fe26f43b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c77eae0e":"import lightgbm as lgb\n#import optuna.integration.lightgbm as lgb\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error # \u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\nfrom sklearn.metrics import mean_squared_log_error # \u5bfe\u6570\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\nfrom sklearn.metrics import r2_score # \u6c7a\u5b9a\u4fc2\u6570\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","28fd69cc":"sample_submission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\")","473a895e":"sample_submission.head()","243a989c":"sample_submission.info()","7c542f32":"train.head()","6f7bd1df":"train.describe()","0e6c5fff":"test.head()","0e5c9e3a":"test.describe()","5cfeb3c8":"train['date_time_2'] = pd.to_datetime(train['date_time'])\n#train['year'] = train['date_time_2'].dt.year\ntrain['month'] = train['date_time_2'].dt.month\ntrain['dayofweek'] = train['date_time_2'].dt.dayofweek\ntrain['hour'] = train['date_time_2'].dt.hour\n\ntest['date_time_2'] = pd.to_datetime(test['date_time'])\n#test['year'] = test['date_time_2'].dt.year\ntest['month'] = test['date_time_2'].dt.month\ntest['dayofweek'] = test['date_time_2'].dt.dayofweek\ntest['hour'] = test['date_time_2'].dt.hour","6b189804":"\nsns.catplot(x=\"month\", y=\"target_carbon_monoxide\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"month\", y=\"target_benzene\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"month\", y=\"target_nitrogen_oxides\", data=train, kind=\"violin\")\nplt.show()\n","eb342269":"\nsns.catplot(x=\"dayofweek\", y=\"target_carbon_monoxide\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"dayofweek\", y=\"target_benzene\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"dayofweek\", y=\"target_nitrogen_oxides\", data=train, kind=\"violin\")\nplt.show()\n","66fd8701":"\nsns.catplot(x=\"hour\", y=\"target_carbon_monoxide\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"hour\", y=\"target_benzene\", data=train, kind=\"violin\")\nplt.show()\nsns.catplot(x=\"hour\", y=\"target_nitrogen_oxides\", data=train, kind=\"violin\")\nplt.show()\n","4f061446":"\nsns.pairplot(train[[\"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\", \"deg_C\"]])\nprint(\"deg_C and sensors(Train)\")\nplt.show()\n","3403bdd0":"\nsns.pairplot(test[[\"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\", \"deg_C\"]])\nprint(\"deg_C and sensors(Test)\")\nplt.show()\n","f6bdbc1e":"\nsns.pairplot(train[[\"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\", \"relative_humidity\"]])\nprint(\"relative_humidity and sensors(Train)\")\nplt.show()\n","53e67940":"\nsns.pairplot(test[[\"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\", \"relative_humidity\"]])\nprint(\"relative_humidity and sensors(Test)\")\nplt.show()\n","475909ab":"\nsns.pairplot(train[[\"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\", \"absolute_humidity\"]])\nprint(\"absolute_humidity and sensors(Train)\")\nplt.show()\n","8e4fc990":"\nsns.pairplot(test[[\"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\", \"absolute_humidity\"]])\nprint(\"absolute_humidity and sensors(Test)\")\nplt.show()\n","13dbcc9e":"# Relationship between absolute_humidity and sensors\n\nsns.jointplot(x=\"sensor_1\", y=\"absolute_humidity\", data=train)\nplt.title(\"Train\")\nplt.show()\nsns.jointplot(x=\"sensor_1\", y=\"absolute_humidity\", data=test)\nplt.title(\"Test\")\nplt.show()\nsns.jointplot(x=\"sensor_2\", y=\"absolute_humidity\", data=train)\nplt.title(\"Train\")\nplt.show()\nsns.jointplot(x=\"sensor_2\", y=\"absolute_humidity\", data=test)\nplt.title(\"Test\")\nplt.show()\nsns.jointplot(x=\"sensor_3\", y=\"absolute_humidity\", data=train)\nplt.title(\"Train\")\nplt.show()\nsns.jointplot(x=\"sensor_3\", y=\"absolute_humidity\", data=test)\nplt.title(\"Test\")\nplt.show()\nsns.jointplot(x=\"sensor_4\", y=\"absolute_humidity\", data=train)\nplt.title(\"Train\")\nplt.show()\nsns.jointplot(x=\"sensor_4\", y=\"absolute_humidity\", data=test)\nplt.title(\"Test\")\nplt.show()\nsns.jointplot(x=\"sensor_5\", y=\"absolute_humidity\", data=train)\nplt.title(\"Train\")\nplt.show()\nsns.jointplot(x=\"sensor_5\", y=\"absolute_humidity\", data=test)\nplt.title(\"Test\")\nplt.show()\n","033086dc":"\nsns.pairplot(train[[\"deg_C\", \"relative_humidity\", \"absolute_humidity\"]])\nprint(\"Temperature and humidity(Train)\")\nplt.show()\n","ae41d5c4":"\nsns.pairplot(test[[\"deg_C\", \"relative_humidity\", \"absolute_humidity\"]])\nprint(\"Temperature and humidity(Test)\")\nplt.show()\n","0e5333c5":"%%time\n\n# Seasonal factors\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 1 or train[\"month\"][i] == 2 or train[\"month\"][i] == 12):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_winter\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 1 or test[\"month\"][i] == 2 or test[\"month\"][i] == 12):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_winter\"] = ary\n\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 3 or train[\"month\"][i] == 4 or train[\"month\"][i] == 5):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_spring\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 3 or test[\"month\"][i] == 4 or test[\"month\"][i] == 5):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_spring\"] = ary\n\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 6 or train[\"month\"][i] == 7 or train[\"month\"][i] == 8):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_summer\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 6 or test[\"month\"][i] == 7 or test[\"month\"][i] == 8):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_summer\"] = ary\n\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 9 or train[\"month\"][i] == 10 or train[\"month\"][i] == 11):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_autumn\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 9 or test[\"month\"][i] == 10 or test[\"month\"][i] == 11):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_autumn\"] = ary\n\n# Week factors\ntrain[\"is_weekend\"] = (train[\"date_time_2\"].dt.dayofweek >= 5).astype(\"int\")\ntest[\"is_weekend\"] = (test[\"date_time_2\"].dt.dayofweek >= 5).astype(\"int\")\n\n# Time zone factors\nary =[]\nfor i in range(len(train[\"date_time_2\"])):\n    if (7 <= train[\"hour\"][i] <= 9):#7,8,9\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_commute_m\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_2\"])):\n    if (7 <= test[\"hour\"][i] <= 9):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_commute_m\"] = ary\n\nary =[]\nfor i in range(len(train[\"date_time_2\"])):\n    if (18 <= train[\"hour\"][i] <= 20):#18,19,20\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_commute_e\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_2\"])):\n    if (18 <= test[\"hour\"][i] <= 20):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_commute_e\"] = ary\n\nary =[]\nfor i in range(len(train[\"date_time_2\"])):\n    if (10 <= train[\"hour\"][i] <= 16):#10\uff5e16\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_work\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_2\"])):\n    if (10 <= test[\"hour\"][i] <= 16):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_work\"] = ary\n\nary =[]\nfor i in range(len(train[\"date_time_2\"])):\n    if (train[\"hour\"][i] >= 23 or train[\"hour\"][i] <= 5):#23,5\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_night\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_2\"])):\n    if (test[\"hour\"][i] >= 23 or test[\"hour\"][i] <= 5):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_night\"] = ary\n\n# Outlier flag\n\"\"\"\n# deg_C = 23 \uff5e 25 factors\nary =[]\nfor i in range(len(train[\"deg_C\"])):\n    if (train[\"deg_C\"][i] >= 23 and train[\"deg_C\"][i] < 25):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_deg_C_23_25\"] = ary\n\nary =[]\nfor i in range(len(test[\"deg_C\"])):\n    if (test[\"deg_C\"][i] >= 23 and test[\"deg_C\"][i] < 25):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_deg_C_23_25\"] = ary\n\"\"\"\nary =[]\nfor i in range(len(train[\"absolute_humidity\"])):\n    if (train[\"absolute_humidity\"][i] < 0.25 and 23 < train[\"deg_C\"][i] < 25):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_low_absolute_humidity\"] = ary\n\nary =[]\nfor i in range(len(test[\"absolute_humidity\"])):\n    if (test[\"absolute_humidity\"][i] < 0.25 and 23 < test[\"deg_C\"][i] < 25):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_low_absolute_humidity\"] = ary\n","e54b0f04":"# Concat train and test\nall = pd.concat([train,test],ignore_index=True)\n\n# Scaling\nmonth = all['month']\nmonth = np.array(month)\nall['month'] = preprocessing.minmax_scale(month[:])\ndayofweek = all['dayofweek']\ndayofweek = np.array(dayofweek)\nall['dayofweek'] = preprocessing.minmax_scale(dayofweek[:])\nhour = all['hour']\nhour = np.array(hour)\nall['hour'] = preprocessing.minmax_scale(hour[:])\n\ndeg_C = all['deg_C']\ndeg_C = np.array(deg_C)\nall['deg_C_2'] = preprocessing.minmax_scale(deg_C[:])\nrelative_humidity = all['relative_humidity']\nrelative_humidity = np.array(relative_humidity)\nall['relative_humidity_2'] = preprocessing.minmax_scale(relative_humidity[:])\nabsolute_humidity = all['absolute_humidity']\nabsolute_humidity = np.array(absolute_humidity)\nall['absolute_humidity_2'] = preprocessing.minmax_scale(absolute_humidity[:])\nsensor_1 = all['sensor_1']\nsensor_1 = np.array(sensor_1)\nall['sensor_1_2'] = preprocessing.minmax_scale(sensor_1[:])\nsensor_2 = all['sensor_2']\nsensor_2 = np.array(sensor_2)\nall['sensor_2_2'] = preprocessing.minmax_scale(sensor_2[:])\nsensor_3 = all['sensor_3']\nsensor_3 = np.array(sensor_3)\nall['sensor_3_2'] = preprocessing.minmax_scale(sensor_3[:])\nsensor_4 = all['sensor_4']\nsensor_4 = np.array(sensor_4)\nall['sensor_4_2'] = preprocessing.minmax_scale(sensor_4[:])\nsensor_5 = all['sensor_5']\nsensor_5 = np.array(sensor_5)\nall['sensor_5_2'] = preprocessing.minmax_scale(sensor_5[:])\n\n# Split all for train and test\ntrain_scale = all.iloc[train.index[0]:train.index[-1]+1].drop(columns=[\"deg_C\", \"relative_humidity\", \"absolute_humidity\", \"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\"])\ntest_scale = all.iloc[train.index[-1]+1:].drop(columns=[\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\", \"deg_C\", \"relative_humidity\", \"absolute_humidity\", \"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\"])\ntest_scale = pd.DataFrame.reset_index(test_scale).drop(columns=[\"index\"])","64290c7b":"train_scale.head()","d393c812":"test_scale.head()","3e94d636":"\n%%time\ncorr = train_scale.corr().round(2)\nplt.figure(figsize=(20,10))\nsns.heatmap(corr, vmin=-1, vmax=1, center=0, square=False, annot=True, cmap='coolwarm')\nplt.show()\n","f6adad86":"columns_2 = test_scale.columns.drop(['date_time', 'date_time_2', 'month'])#, 'dayofweek', 'hour'\ncolumns_2","f7e2da71":"X = train_scale[columns_2].values\nX_test = test_scale[columns_2].values\n\nvalue_2 = train_scale['target_benzene'].values.reshape(-1,1)","6d6733db":"X_train_2, X_test_2, t_train_2, t_test_2 = train_test_split(X, value_2,test_size=0.3, random_state=0)\n\nlgb_train_2 = lgb.Dataset(X_train_2, t_train_2)\nlgb_eval_2 = lgb.Dataset(X_test_2, t_test_2, reference=lgb_train_2)\n\nparams_2 = {\n        'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'regression',\n        'metric': {'l2'},\n        'learning_rate': 0.002,\n        'num_leaves': 16,#16(RMSLE_2 : 0.08844484794714792,R2_2 : 0.978516414910062)\n        'num_iterations': 20000,\n        'verbosity': -1\n}\n\nmodel_2 = lgb.train(\n    params_2,\n    train_set=lgb_train_2,\n    valid_sets=lgb_eval_2,\n    early_stopping_rounds=100,\n    verbose_eval=1000\n)\n\n\n# Verification\n\npred_2 = model_2.predict(X_test_2)\n\nmsle_2 = mean_squared_log_error(t_test_2, pred_2) # MSLE(\u5bfe\u6570\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee)\u306e\u7b97\u51fa\nrmsle_2 = np.sqrt(msle_2) # \u221aMSLE\u306e\u7b97\u51fa\nprint('RMSLE_2 : {}'.format(rmsle_2))\n\nr2_2 = r2_score(t_test_2,pred_2)\nprint('R2_2    : {}'.format(r2_2))\n","f86faed1":"sample_submission['target_benzene'] = model_2.predict(X_test)\n\ntest_scale['target_benzene'] = model_2.predict(X_test)\n\n# Concat train and test\nall = pd.concat([train_scale,test_scale],ignore_index=True)\ntarget_benzene = all['target_benzene']\ntarget_benzene = np.array(target_benzene)\nall['target_benzene'] = preprocessing.minmax_scale(target_benzene[:])\n\n# Split all for train and test\ntrain_scale = all.iloc[train.index[0]:train.index[-1]+1]\ntest_scale = all.iloc[train.index[-1]+1:].drop(columns=[\"target_carbon_monoxide\", \"target_nitrogen_oxides\"])\n\ncolumns_1 = test_scale.columns.drop(['date_time', 'date_time_2', 'month'])#, 'dayofweek', 'hour'\ncolumns_1","3da285d9":"X = train_scale[columns_1].values\nX_test = test_scale[columns_1].values\nvalue_1 = train_scale['target_carbon_monoxide'].values.reshape(-1,1)","4950fc48":"X_train_1, X_test_1, t_train_1, t_test_1 = train_test_split(X, value_1,test_size=0.3, random_state=0)\n\nlgb_train_1 = lgb.Dataset(X_train_1, t_train_1)\nlgb_eval_1 = lgb.Dataset(X_test_1, t_test_1, reference=lgb_train_1)\n\nparams_1 = {\n        'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'regression',\n        'metric': {'l2'},\n        'learning_rate': 0.01,\n        'num_leaves': 8,#8(RMSLE_1 : 0.10294909285376616,R2_1 : 0.9311012615666501)\n        'num_iterations': 20000,\n        'verbosity': -1\n}\n\nmodel_1 = lgb.train(\n    params_1,\n    train_set=lgb_train_1,\n    valid_sets=lgb_eval_1,\n    early_stopping_rounds=100,\n    verbose_eval=1000\n)\n\n# Verification\n\npred_1 = model_1.predict(X_test_1)\n\nmsle_1 = mean_squared_log_error(t_test_1, pred_1)\nrmsle_1 = np.sqrt(msle_1)\nprint('RMSLE_1 : {}'.format(rmsle_1))\n\nr2_1 = r2_score(t_test_1,pred_1)\nprint('R2_1    : {}'.format(r2_1))","f4a7951a":"sample_submission['target_carbon_monoxide'] = model_1.predict(X_test)\n\ntest_scale['target_carbon_monoxide'] = model_1.predict(X_test)\n\n# Concat train and test\nall = pd.concat([train_scale,test_scale],ignore_index=True)\ntarget_carbon_monoxide = all['target_carbon_monoxide']\ntarget_carbon_monoxide = np.array(target_carbon_monoxide)\nall['target_carbon_monoxide'] = preprocessing.minmax_scale(target_carbon_monoxide[:])\n\n# Split all for train and test\ntrain_scale = all.iloc[train.index[0]:train.index[-1]+1]\ntest_scale = all.iloc[train.index[-1]+1:].drop(columns=[\"target_nitrogen_oxides\"])\n\ncolumns_3 = test_scale.columns.drop(['date_time', 'date_time_2', 'month'])\ncolumns_3","2203922b":"X = train_scale[columns_3].values\nX_test = test_scale[columns_3].values\nvalue_3 = train_scale['target_nitrogen_oxides'].values.reshape(-1,1)","b5df7895":"\nX_train_3, X_test_3, t_train_3, t_test_3 = train_test_split(X, value_3,test_size=0.3, random_state=0)\n\nlgb_train_3 = lgb.Dataset(X_train_3, t_train_3)\nlgb_eval_3 = lgb.Dataset(X_test_3, t_test_3, reference=lgb_train_3)\n\nparams_3 = {\n        'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'regression',\n        'metric': {'l2'},\n        'learning_rate': 0.0005,\n        'num_leaves': 92,#132(RMSLE_3 : 0.19056726479718006,R2_3 : 0.9450136429424264)\n        'num_iterations': 20000,\n        'verbosity': -1\n}\n\nmodel_3 = lgb.train(\n    params_3,\n    train_set=lgb_train_3,\n    valid_sets=lgb_eval_3,\n    early_stopping_rounds=100,\n    verbose_eval=1000\n)\n\n\n# Verification\n\npred_3 = model_3.predict(X_test_3)\n\nmsle_3 = mean_squared_log_error(t_test_3, pred_3)\nrmsle_3 = np.sqrt(msle_3)\nprint('RMSLE_3 : {}'.format(rmsle_3))\n\nr2_3 = r2_score(t_test_3,pred_3)\nprint('R2_3    : {}'.format(r2_3))","934ee99b":"sample_submission['target_nitrogen_oxides'] = model_3.predict(X_test)\n\nsample_submission","9ac0e1f1":"sample_submission.to_csv('submission.csv', index=False)","ba7fe1d4":"### 4-1 Modeling for target_benzene","158e887e":"# 3. Preprosessing","53ac9130":"There are high values in the commuting time zone.","30810191":"There is a high positive correlation between each other's targets.<br>\nThere is a difference in the correlation between the target and sensors.<br>\nTherefore, the prediction is made in descending order of correlation with the sensor.<br><br>\nFirst, I predict the value of benzene only.<br>\nThen, after adding the predicted bebzen value as an explanatory variable, I predict the carbon monoxide value only.<br>\nFinally, add the predicted carbon monoxide value and then I predict the nitrogen oxides value.","228a38f3":"# 5. Make submission file","dd4ffa6b":"'deg_C' has minus values.","9620a89e":"### 4-4 Predict target_nitrogen_oxides","cbc54dea":"There are seasonal factors.","09138a1b":"### 4-3 Predict target_carbon_monoxide and next modeling for target_nitrogen_oxides","7eb8cbd9":"All targets are high on weekdays and low on weekends.","c5a6c6d6":"There are strange distributions around 25\u00b0C.","f288ed8e":"# 4. Modeling and prediction","ee9e9f01":"### 4-2 Predict target_benzene and next modeling for target_carbon_monoxide","d346928c":"# 1. Import data","265ffa4e":"# 2. EDA"}}