{"cell_type":{"07b2a451":"code","14f5db76":"code","a0413828":"code","66195f9e":"code","5423fd3f":"code","e66205d3":"code","5bfac4f4":"code","3372851b":"code","b611c46f":"code","b9e91ba0":"code","5c813dc1":"code","a305d41f":"code","463aa43c":"code","5136d093":"code","4eb0c5a3":"code","797b4b4e":"code","d8bd7b24":"code","24f8bfcd":"code","a31a348e":"code","07882382":"code","d9eb9b50":"code","88012cea":"code","3bf8acf9":"code","aabad98f":"code","02ebe9ac":"code","66760b02":"code","19b3206c":"code","ad6b1b90":"code","f99ca563":"code","31f65f17":"code","473f6863":"code","24ab6cbf":"code","e67637ca":"code","bcc5c06d":"code","5fb28767":"code","7772090a":"code","68b504b4":"code","92233426":"code","2fc29cf1":"code","46446db6":"code","b3a89f8b":"code","eb7f3119":"code","4b8ac307":"code","cdccdf21":"code","58bb81c0":"code","46255d57":"code","a411e2c3":"code","e4a71bcf":"code","360c442b":"code","524ee6bd":"code","405f76a9":"code","99cc9543":"code","edb693c2":"code","12c8368d":"code","000bff07":"code","edc80753":"markdown","136a8371":"markdown","d8e97db7":"markdown","cb221094":"markdown","36fc108d":"markdown","ded79b49":"markdown","a3bb19a1":"markdown","bbffdc9e":"markdown","6bc32731":"markdown","c5a96c84":"markdown","19024d28":"markdown","df83c626":"markdown","fc5d5f2f":"markdown","ef3abc7a":"markdown","d61ca5ed":"markdown","cc923465":"markdown","559a2733":"markdown","edb8d891":"markdown"},"source":{"07b2a451":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","14f5db76":"df = pd.read_csv('..\/input\/domain-name-security\/train.csv')","a0413828":"df","66195f9e":"df.describe()","5423fd3f":"df.info()","e66205d3":"missing_values_count = df.isnull().sum()\n\ntotal_cells = np.product(df.shape)\n\ntotal_missing = missing_values_count.sum()\n\npercentage_missing = (total_missing\/total_cells)*100\nprint(percentage_missing)","5bfac4f4":"for i in df.columns:\n    print(df[i].unique())","3372851b":"from sklearn import preprocessing","b611c46f":"le = preprocessing.LabelEncoder()\nle.fit(df['Action'])\nlist(le.classes_)\ndf['Action'] = le.transform(df['Action']) \ndf","b9e91ba0":"NAN = [(c, df[c].isnull().mean()*100) for c in df]\nNAN = pd.DataFrame(NAN, columns=['column_name', 'percentage'])\nNAN","5c813dc1":"null_counts = df.isnull().sum()\nnull_counts","a305d41f":"columns_None = ['Source Port','Destination Port','Elapsed Time (sec)','NAT Source Port','Bytes Received','Bytes Sent','NAT Destination Port','Bytes']\ndf[columns_None] = df[columns_None].fillna(df.mode().iloc[0])","463aa43c":"df","5136d093":"df.fillna(method='ffill', inplace=True)","4eb0c5a3":"df","797b4b4e":"null_count = df.isnull().sum()\nnull_count","d8bd7b24":"from sklearn.ensemble import RandomForestRegressor","24f8bfcd":"x = df.copy()\ny = x.pop('Action')","a31a348e":"for colname in x.select_dtypes('object'):\n    x[colname],_ = x[colname].factorize()\n    \ndiscrete_features = x.dtypes ==int","07882382":"sns.histplot(data=df, x=\"Source Port\", kde = True)","d9eb9b50":"sns.relplot(x='Bytes', y='pkts_sent',hue='Action', data=df)","88012cea":"def draw_histograms(dataframe, features, rows, cols):\n    fig=plt.figure(figsize=(20,20))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        dataframe[feature].hist(bins=20,ax=ax,facecolor='green')\n        ax.set_title(feature+\" Distribution\",color='Red')\n        \n    fig.tight_layout()  \n    plt.show()\ndraw_histograms(df,df.columns,4,4)","3bf8acf9":"r = np.random.RandomState(0)\ndf1 = pd.DataFrame(r.rand(10,10))\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","aabad98f":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size=0.20,random_state=0)","02ebe9ac":"X_train.shape","66760b02":"X_test.shape","19b3206c":"Y_test.shape","ad6b1b90":"from sklearn.metrics import accuracy_score","f99ca563":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report","31f65f17":"def print_score(clf, X_train, Y_train, X_test, Y_test, train=True):\n    if train:\n        pred = clf.predict(X_train)\n        clf_report = pd.DataFrame(classification_report(Y_train, pred, output_dict=True))\n        print(\"Train Result:\\n================================================\")\n        print(f\"Accuracy Score: {accuracy_score(Y_train, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(Y_train, pred)}\\n\")\n        \n    elif train==False:\n        pred = clf.predict(X_test)\n        clf_report = pd.DataFrame(classification_report(Y_test, pred, output_dict=True))\n        print(\"Test Result:\\n================================================\")        \n        print(f\"Accuracy Score: {accuracy_score(Y_test, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(Y_test, pred)}\\n\")","473f6863":"import xgboost as xgb\n\nxgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42)\nxgb_model.fit(X_train, Y_train)\n\nY_pred_xgb = xgb_model.predict(X_test)","24ab6cbf":"Y_pred_xgb.shape","e67637ca":"score_xgb = round(accuracy_score(Y_pred_xgb,Y_test)*100,2)\n\nprint(\"The accuracy score achieved using XGBoost is: \"+str(score_xgb)+\" %\")","bcc5c06d":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=7)\nknn.fit(X_train,Y_train)\nY_pred_knn=knn.predict(X_test)","5fb28767":"Y_pred_knn.shape","7772090a":"score_knn = round(accuracy_score(Y_pred_knn,Y_test)*100,2)\n\nprint(\"The accuracy score achieved using KNN is: \"+str(score_knn)+\" %\")","68b504b4":"from sklearn.naive_bayes import GaussianNB\n\nnb = GaussianNB()\n\nnb.fit(X_train,Y_train)\n\nY_pred_nb = nb.predict(X_test)","92233426":"Y_pred_nb.shape","2fc29cf1":"score_nb = round(accuracy_score(Y_pred_nb,Y_test)*100,2)\n\nprint(\"The accuracy score achieved using Naive Bayes is: \"+str(score_nb)+\" %\")","46446db6":"scores = [score_nb,score_knn,score_xgb]\nalgorithms = [\"Naive Bayes\",\"K-Nearest Neighbors\",\"XGBoost\"]    \n\nfor i in range(len(algorithms)):\n    print(\"The accuracy score achieved using \"+algorithms[i]+\" is: \"+str(scores[i])+\" %\")","b3a89f8b":"sns.set(rc={'figure.figsize':(7,6)})\nplt.xlabel(\"Algorithms\")\nplt.ylabel(\"Accuracy score\")\n\nsns.barplot(algorithms,scores)","eb7f3119":"df1 = pd.read_csv('..\/input\/domain-name-security\/test.csv')","4b8ac307":"df1","cdccdf21":"NAN = [(c, df1[c].isnull().mean()*100) for c in df1]\nNAN = pd.DataFrame(NAN, columns=['column_name', 'percentage'])\nNAN","58bb81c0":"columns_None = ['Source Port','Destination Port','Elapsed Time (sec)','NAT Source Port','Bytes Received','Bytes Sent','NAT Destination Port','Bytes']\ndf1[columns_None] = df1[columns_None].fillna(df1.mode().iloc[0])","46255d57":"df1.fillna(method='ffill', inplace=True)","a411e2c3":"df1.fillna(method='backfill', inplace=True)","e4a71bcf":"df1.head()","360c442b":"df1.shape","524ee6bd":"Y_pred_xgb = xgb_model.predict(df1)","405f76a9":"submission = pd.DataFrame({\n        \"ID\": df1['ID'],\n        \"Action\": Y_pred_xgb\n    })","99cc9543":"submission","edb693c2":"submission['Action'] = submission['Action'].replace([0,1,2,3],['allow', 'deny' ,'drop', 'reset-both'])","12c8368d":"submission","000bff07":"submission.to_csv('DomainNameSecuritySubmission.csv', index=False)","edc80753":"# End Model Prediction","136a8371":"## Data Visualization With most Dependent Features","d8e97db7":"## show a few features with their Mutual Info scores","cb221094":"### Replace all NaN values with the most frequent elements","36fc108d":"## K Nearest Neighbors","ded79b49":"## Apply XGBoost","a3bb19a1":"## Import Libraries","bbffdc9e":"## Label encoding from categorical featurtes","6bc32731":"### Replace NaN values with the preceeding values ","c5a96c84":"### Multivariate Analysis","19024d28":"### Total percentage of data is missing","df83c626":"## Naive Bayes","fc5d5f2f":"## Correlation Matrix","ef3abc7a":"### Train Test split","d61ca5ed":"## Final Accuracy of all Models that which Model is best fitted","cc923465":"## Import DataSet","559a2733":"# Submission on Kaggle","edb8d891":"### Data Cleaning"}}