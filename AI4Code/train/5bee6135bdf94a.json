{"cell_type":{"25701416":"code","41f437c0":"code","2a76403f":"code","5b755c26":"code","1a308128":"code","b5cc3521":"code","e0ea87e1":"code","bdc0ba17":"code","9ae41e53":"code","7515fa76":"code","5e64ea9e":"code","d5bde47d":"code","55dd0235":"code","989ab236":"code","823239d4":"code","5cf5c69c":"code","43d2f077":"code","7ed1168e":"code","793b6448":"code","babeb5f2":"code","02ff0799":"code","bde81119":"code","da47c71a":"code","cf12a1ec":"code","e37d51e1":"code","3e23c1ae":"code","160d15a8":"code","6da84f1b":"code","8f762a56":"code","46e72322":"code","1837c570":"code","be7ce4bc":"code","c2a91d7c":"code","2e5c302d":"code","1657f15c":"code","379ecd5f":"code","0689bf8e":"code","ab45d671":"code","c8fe7567":"code","eb8283db":"code","9864a08b":"code","9fb98fe8":"code","8b3f65fe":"code","757b96ca":"code","d08adadb":"code","3844db8b":"code","222473f0":"markdown","7f824417":"markdown","ed722be5":"markdown","938ad1c0":"markdown","12e703fd":"markdown","e35472db":"markdown","cc08a073":"markdown","5f2378ee":"markdown","31b9242a":"markdown","3f432d1c":"markdown","8d8f2045":"markdown","8ee94d88":"markdown","4967b194":"markdown","a4dba57b":"markdown","b66246e7":"markdown"},"source":{"25701416":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","41f437c0":"import numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import MinMaxScaler\n%matplotlib inline","2a76403f":"df = pd.read_csv('..\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')\ndf.shape","5b755c26":"df.info()","1a308128":"df.isna().sum()","b5cc3521":"df.head()","e0ea87e1":"genre = df['Genre']\ngenre.value_counts().plot(kind='pie',autopct='%.2f',labels=genre.unique())\nplt.show()","bdc0ba17":"sns.histplot(x=df['User Rating'],hue=df['Genre'],element='poly')\nplt.show()","9ae41e53":"years = list(range(2009,2020))\nplt.figure(figsize=(15,5))\nsns.scatterplot(x=df['Year'],y=df['User Rating'],hue=df['Genre'])\nplt.xticks(ticks=years)\nplt.title('User Ratings (2009-2019)')\nplt.show()","7515fa76":"top10_alltime = df[['Name', 'Author', 'Reviews','User Rating']]\ntop10_alltime.sort_values('Reviews',ascending=False)[:10]","5e64ea9e":"#Dropping duplicate rows\ndf.drop_duplicates(inplace=True,subset=['Name'])\ndf.shape","d5bde47d":"#Top 10  Most Reviewed books\ntop10_alltime = df[['Name', 'Author', 'Reviews','User Rating']]\ntop10_alltime.sort_values('Reviews',ascending=False)[:10]","55dd0235":"years = sorted(df['Year'].unique())\nyears","989ab236":"year_group = df.groupby('Year')","823239d4":"num_of_books = []\ngenre = []\nfor year in years:\n    books = year_group.get_group(year)['Genre']\n    genre.append(books.value_counts())\n    num_of_books.append(books.value_counts().sum())","5cf5c69c":"plt.figure(figsize=(7,7))\nsns.barplot(y=num_of_books,x=years)\nplt.xlabel('Year')\nplt.ylabel('Number of Books')\nplt.show()","43d2f077":"def genre_ratio_year_wise():\n    i = 0\n    for g in genre:\n        plt.title(f'{years[i]} books.')\n        plt.pie(g,autopct='%.2f',labels=g.index)\n        plt.xlabel(f'Total Books{g.sum()}')\n        plt.show()\n\n        i += 1\n        print('\\n')\n","7ed1168e":"genre_ratio_year_wise()","793b6448":"def top_5_books_year_wise():\n    year_top5_dfs = dict()\n    for year in years:\n        yr_df = year_group.get_group(year)\n        top5 = yr_df[['Name', 'Author', 'Reviews','User Rating','Year','Genre']]\n        year_top5_dfs[year] = top5.sort_values('Reviews',ascending=False)[:5]\n    return year_top5_dfs","babeb5f2":"top5 = top_5_books_year_wise()","02ff0799":"top5[2009]","bde81119":"top5[2015]","da47c71a":"top5[2019]","cf12a1ec":"df.columns","e37d51e1":"df.drop(['Name','Year'], axis=1).columns","3e23c1ae":"sum(df['Author'].value_counts()[df['Author'].value_counts() >= 5])","160d15a8":"sum(df['Author'].value_counts()[df['Author'].value_counts() <5])","6da84f1b":"others = df['Author'].value_counts()[df['Author'].value_counts() <5].keys()\ndf['Author'].replace(others,'Others',inplace=True)\ndf['Author'].value_counts()","8f762a56":"author = df['Author']\nauthor = pd.get_dummies(author)\nauthor.sample(5)","46e72322":"author.shape","1837c570":"df.drop('Author',axis=1,inplace=True)","be7ce4bc":"df = pd.concat([df,author],axis=1)","c2a91d7c":"df.head()","2e5c302d":"df['Genre'].replace(['Non Fiction','Fiction'],[0, 1],inplace=True)\ndf['Genre'].unique()","1657f15c":"book_names = pd.DataFrame({'Name':df['Name']})\nbook_names.shape","379ecd5f":"book_names.index = [i for i in range(351)]","0689bf8e":"df.set_index('Name',inplace=True)\ndf.head()","ab45d671":"#cols to scale\ncols = df.columns[:4]\ncols","c8fe7567":"clf = MinMaxScaler()\nscalled = clf.fit_transform(df[cols])","eb8283db":"i = 0\nfor col in cols:\n    df[col] = scalled[:,i]\n    i += 1","9864a08b":"df.head()","9fb98fe8":"def getRecommendation_books_for(book_name,no_of_books=6,get_similarity_rate=False):\n    #NearestNeighbors Algorithm to get Nearest  Book values\n    kn = NearestNeighbors(n_neighbors=no_of_books+1,metric='manhattan')\n    kn.fit(df)\n    print(f'Similar Books for \"{book_name[0]}\":')\n    \n    #indices Indicated the index value of the recommended books\n    distances, indices = kn.kneighbors(df.loc[book_name])\n    nearest_books = [book_names.loc[i][0] for i in indices.flatten()][1:]\n    \n    if not get_similarity_rate:\n        return nearest_books\n    \n    sim_rates = []\n    for book in nearest_books:\n        sim = cosine_similarity(df.loc[book_name],[df.loc[book]]).flatten()\n        sim_rates.append(sim[0])\n    recommended_books = pd.DataFrame({'Recommended Books':nearest_books,'Similarity':sim_rates})\n    recommended_books.sort_values(by='Similarity',ascending=True)\n    return recommended_books","8b3f65fe":"getRecommendation_books_for(book_names.loc[339],5,True)","757b96ca":"getRecommendation_books_for(book_names.loc[34],5,True)","d08adadb":"getRecommendation_books_for(book_names.loc[10],5)","3844db8b":"getRecommendation_books_for(book_names.loc[199],5,True)","222473f0":"# **Number of Books in each year**","7f824417":"## **As we can see the dataset contains Duplicate Values**\n## **Let's Remove them**","ed722be5":"# **Top 5 books in 2015**","938ad1c0":"# **Book Recommendation**","12e703fd":"# **Feature Scaling**","e35472db":"# **Top5 books in 2019**","cc08a073":"**Similarly you can check Other years as well**","5f2378ee":"# **Predicting Recommended Books**","31b9242a":"# **Top 10 Most Reviewed Books**","3f432d1c":"# **Top 5 books in 2009**","8d8f2045":"### **Similarly I have done Android App Recommendation and K-Drama Recommendation**\n### **If you're interested then click on below links:**\n1. **<a href=\"https:\/\/www.kaggle.com\/nandalald\/android-app-recommendation\/\">Android App Recommendation<\/a>**\n2. **<a href=\"https:\/\/www.kaggle.com\/nandalald\/recommend-similar-kdramas\">K-Drama Recommendation<\/a>**","8ee94d88":"### **Features used for Recommending a book**","4967b194":"# **Setting Author Names to others who wrote less than 5 books**","a4dba57b":"# **Genre Ratio of each year**","b66246e7":"# **Top 5 Most Reviewed Books of each year**"}}