{"cell_type":{"a8971f5b":"code","a06b745b":"code","da3faa53":"code","4cb108e6":"code","ff1ae5d5":"code","04281120":"code","a4627174":"code","fa921d23":"code","3f2fe364":"code","1820697b":"code","67c2b85f":"code","9e216ca5":"code","03834bb7":"code","04adf209":"code","b8420e15":"code","6c757d5a":"code","bef876a7":"code","46c12124":"code","d4d9c421":"code","c8095b2a":"code","750859b2":"code","4a37d776":"code","6c89db91":"code","1f7d347d":"code","111ae6c2":"code","cccf553c":"code","6d90ce0c":"code","3482cca1":"code","138701dd":"code","71cef0dd":"code","d0f12d3c":"code","66fd640c":"code","7ae3bc95":"code","b295b77c":"code","d5d8ccc2":"code","5f22db56":"code","1397cc8c":"code","605f7881":"code","b3a6bd1a":"code","0a431dd9":"markdown","107a945f":"markdown","12a4df18":"markdown","3f9ddad2":"markdown","ecdeefa6":"markdown","3223c5b1":"markdown","41c62668":"markdown","ecb9e6e0":"markdown","9390925b":"markdown","61c18841":"markdown","bcf49cb0":"markdown","44f3ddec":"markdown","134b615e":"markdown","8c3f0e63":"markdown","961ac06d":"markdown","0ad44485":"markdown","b0f375a4":"markdown","80c19159":"markdown","4e735f37":"markdown","a9e81586":"markdown","905ae259":"markdown","fe3c40f1":"markdown"},"source":{"a8971f5b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split,cross_val_score,train_test_split,GridSearchCV\nfrom sklearn.linear_model import Ridge,Lasso,ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn import model_selection\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import RidgeCV,LassoCV, ElasticNetCV\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import StandardScaler, scale\nimport statsmodels\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import StandardScaler,RobustScaler\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\nfrom sklearn.impute import KNNImputer\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn import neighbors","a06b745b":"data=pd.read_csv(\"..\/input\/hitters-baseball-data\/Hitters.csv\")\ndf=data.copy()\ndf.head()","da3faa53":"df.dtypes","4cb108e6":"df.shape","ff1ae5d5":"df.isnull().sum()","04281120":"df=df.dropna()","a4627174":"df.shape","fa921d23":"df = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf.head()","3f2fe364":"df.describe([0.01,0.05,0.25,0.5,0.75, 0.95, 0.99]).T","1820697b":"def dataset_preparation(data):\n    global X_train, X_test, y_train, y_test, X, y\n    df=data.copy()\n    df=df.dropna()\n    df = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\n    y = df[\"Salary\"]\n    X = df.drop('Salary', axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state =46)","67c2b85f":"dataset_preparation(data)\nlinear_reg_model=LinearRegression()\nlinear_reg_model.fit(X_train,y_train)\nprint(\"Linear Regression B0:{}\".format(linear_reg_model.intercept_))\nprint(\"Linear Regression B's:{}\".format(linear_reg_model.coef_))\ny_train_predict=linear_reg_model.predict(X_train)\nprint(\"Linear Regression Train Error: {}\".format(np.sqrt(mean_squared_error(y_train, y_train_predict))))\ny_test_predict=linear_reg_model.predict(X_test)\nprint(\"Linear Regression Test Error: {}\".format(np.sqrt(mean_squared_error(y_test, y_test_predict))))\nlinear_reg_test_error=np.sqrt(mean_squared_error(y_test, y_test_predict))\nlinear_reg_model = LinearRegression()\nlinear_reg_model.fit(X, y)\nprint(\"Linear Regression Cross-Validation First way Error: {}\".format(np.sqrt(np.mean(-cross_val_score(linear_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))))\nlinear_reg_cv_error=np.sqrt(np.mean(-cross_val_score(linear_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nlinear_reg_model = LinearRegression().fit(X_train, y_train)\ny_test_predict = linear_reg_model.predict(X_test)\nprint(\"Linear Regression Cross-Validation Second way Train Error: {}\".format(np.sqrt(np.mean(-cross_val_score(linear_reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))\n#scaler = RobustScaler()\n#scaler.fit(X_train)","9e216ca5":"dataset_preparation(data)\nridge_reg_model=Ridge()\nridge_reg_model.fit(X_train,y_train)\nprint(\"Ridge Regression B0:{}\".format(ridge_reg_model.intercept_))\nprint(\"Ridge Regression B's:{}\".format(ridge_reg_model.coef_))\ny_train_predict=ridge_reg_model.predict(X_train)\nprint(\"Ridge Regression Train Error: {}\".format(np.sqrt(mean_squared_error(y_train, y_train_predict))))\ny_test_predict=ridge_reg_model.predict(X_test)\nprint(\"Ridge Regression Test Error: {}\".format(np.sqrt(mean_squared_error(y_test, y_test_predict))))\nridge_reg_test_error=np.sqrt(mean_squared_error(y_test, y_test_predict))\nridge_reg_model = Ridge()\nridge_reg_model.fit(X, y)\nridge_reg_cv_error=ridge_reg_cv_error=np.sqrt(np.mean(-cross_val_score(ridge_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nprint(\"Ridge Regression Cross-Validation First way Error: {}\".format(np.sqrt(np.mean(-cross_val_score(ridge_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))))\nridge_reg_model = Ridge()\nridge_reg_model.fit(X_train, y_train)\ny_test_predict = ridge_reg_model.predict(X_test)\nprint(\"Ridge Regression Cross-Validation Second way Train Error: {}\".format(np.sqrt(np.mean(-cross_val_score(ridge_reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))\n","03834bb7":"dataset_preparation(data)\nlasso_reg_model=Lasso()\nlasso_reg_model.fit(X_train,y_train)\nprint(\"Lasso Regression B0:{}\".format(lasso_reg_model.intercept_))\nprint(\"Lasso Regression B's:{}\".format(lasso_reg_model.coef_))\ny_train_predict=lasso_reg_model.predict(X_train)\nprint(\"Lasso Regression Train Error: {}\".format(np.sqrt(mean_squared_error(y_train, y_train_predict))))\ny_test_predict=lasso_reg_model.predict(X_test)\nprint(\"Lasso Regression Test Error: {}\".format(np.sqrt(mean_squared_error(y_test, y_test_predict))))\nlasso_reg_test_error=np.sqrt(mean_squared_error(y_test, y_test_predict))\nlasso_reg_model = Lasso()\nlasso_reg_model.fit(X, y)\nprint(\"Lasso Regression Cross-Validation First way Error: {}\".format(np.sqrt(np.mean(-cross_val_score(lasso_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))))\nlasso_reg_cv_error=np.sqrt(np.mean(-cross_val_score(lasso_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nlasso_reg_model = Lasso()\nlasso_reg_model.fit(X_train, y_train)\ny_test_predict = lasso_reg_model.predict(X_test)\nprint(\"Lasso Regression Cross-Validation Second way Train Error: {}\".format(np.sqrt(np.mean(-cross_val_score(ridge_reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","04adf209":"dataset_preparation(data)\nelasticnet_reg_model=ElasticNet()\nelasticnet_reg_model.fit(X_train,y_train)\nprint(\"ElasticNet Regression B0:{}\".format(elasticnet_reg_model.intercept_))\nprint(\"ElasticNet Regression B's:{}\".format(elasticnet_reg_model.coef_))\ny_train_predict=elasticnet_reg_model.predict(X_train)\nprint(\"ElasticNet Regression Train Error: {}\".format(np.sqrt(mean_squared_error(y_train, y_train_predict))))\ny_test_predict=elasticnet_reg_model.predict(X_test)\nprint(\"ElasticNet Regression Test Error: {}\".format(np.sqrt(mean_squared_error(y_test, y_test_predict))))\nelasticnet_reg_test_error=np.sqrt(mean_squared_error(y_test, y_test_predict))\nelasticnet_reg_model = ElasticNet()\nelasticnet_reg_model.fit(X, y)\nprint(\"ElasticNet Regression Cross-Validation First way Error: {}\".format(np.sqrt(np.mean(-cross_val_score(elasticnet_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))))\nelasticnet_reg_cv_error=np.sqrt(np.mean(-cross_val_score(elasticnet_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nelasticnet_reg_model = ElasticNet()\nelasticnet_reg_model.fit(X_train, y_train)\ny_test_predict = elasticnet_reg_model.predict(X_test)\nprint(\"ElasticNet Regression Cross-Validation Second way Train Error: {}\".format(np.sqrt(np.mean(-cross_val_score(elasticnet_reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","b8420e15":"results=pd.DataFrame({\"Test Error\":[linear_reg_test_error,ridge_reg_test_error,lasso_reg_test_error,elasticnet_reg_test_error],\n                      \"Cv Error\":[linear_reg_cv_error,ridge_reg_cv_error,lasso_reg_cv_error,elasticnet_reg_cv_error]})\nresults.index=[\"Linear\",\"Ridge\",\"Lasso\",\"ElasticNet\"]\nresults","6c757d5a":"import seaborn as sns\ndef boxplot_draw(column):\n    sns.set_theme(style=\"whitegrid\")\n    ax = sns.boxplot(x=df[column])\n    ax = sns.swarmplot(x=df[column],color='0.25')\nboxplot_draw('HmRun')","bef876a7":"boxplot_draw('CAtBat')","46c12124":"boxplot_draw('Years')","d4d9c421":"boxplot_draw('CHits')","c8095b2a":"boxplot_draw('CHmRun')","750859b2":"boxplot_draw('Salary')","4a37d776":"def fill_null_threshold(data):\n    global y, X ,X_train, X_test, y_train, y_test\n    df=data.copy()\n    df = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\n    imputer = KNNImputer(n_neighbors = 6)\n    df_filled = imputer.fit_transform(df)\n    df = pd.DataFrame(df_filled,columns = df.columns)\n    y = df[\"Salary\"]\n    X = df.drop(['Salary'], axis=1)\n    X_categorical=X[[\"League_N\",\"Division_W\",\"NewLeague_N\"]]\n    X_noncategorical=X.drop([\"League_N\",\"Division_W\",\"NewLeague_N\"],axis=1)\n    clf = LocalOutlierFactor(n_neighbors =13, contamination = 0.1)\n    clf.fit_predict(X_noncategorical)\n    X_noncategorical_scores=clf.negative_outlier_factor_\n    threshold_value=np.sort(X_noncategorical_scores)[14]\n    X_categorical.drop(X_categorical[X_noncategorical_scores<threshold_value].index,inplace=True)\n    X_noncategorical.drop(X_noncategorical[X_noncategorical_scores<threshold_value].index,inplace=True)\n    y.drop(y[X_noncategorical_scores<threshold_value].index,inplace=True)\n    X=pd.concat([X_noncategorical,X_categorical],axis=1)\n    df=pd.concat([X,y],axis=1)\n    Q1 = df[\"Salary\"].quantile(0.05)\n    Q3 = df[\"Salary\"].quantile(0.95)\n    IQR = Q3-Q1\n    lower = Q1 - 1.5*IQR\n    upper = Q3 + 1.5*IQR\n    df.loc[df[\"Salary\"] > upper,\"Salary\"] = upper\n    y = df[\"Salary\"]\n    X = df.drop(['Salary'], axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.20, random_state =46)\nfill_null_threshold(data)","6c89db91":"linear_table_column_names=[\"Linear_y_train_error\",\"Linear_y_test_error\",\"Linear_CV_Error\"]\nlinear_table=[]\nfill_null_threshold(data)\nlinear_reg_model=LinearRegression()\nlinear_reg_model.fit(X_train,y_train)\nlinear_y_train_predict=linear_reg_model.predict(X_train)\nlinear_y_train_error=np.sqrt(mean_squared_error(y_train, linear_y_train_predict))\nlinear_y_test_predict=linear_reg_model.predict(X_test)\nlinear_y_test_error=np.sqrt(mean_squared_error(y_test, linear_y_test_predict))\nlinear_reg_model = LinearRegression()\nlinear_reg_model.fit(X, y)\nlinear_reg_cv_error=np.sqrt(np.mean(-cross_val_score(linear_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nlinear_table.append([linear_y_train_error,linear_y_test_error,linear_reg_cv_error])\nlinear_table=pd.DataFrame(data=linear_table,columns=linear_table_column_names)\nlinear_table","1f7d347d":"fill_null_threshold(data)\nridge_table_names=[\"Ridge_y_train_error\",\"Ridge_y_test_error\",'Ridge_reg_cv_error']\nridge_table=[]\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)\nridge_reg_model=Ridge()\nridge_reg_model.fit(X_train,y_train)\nridge_y_train_predict=ridge_reg_model.predict(X_train)\nridge_y_train_error=np.sqrt(mean_squared_error(y_train, ridge_y_train_predict))\nridge_y_test_predict=ridge_reg_model.predict(X_test)\nridge_reg_test_error=np.sqrt(mean_squared_error(y_test, ridge_y_test_predict))\nridge_reg_model = Ridge()\nridge_reg_model.fit(X, y)\nridge_reg_cv_error=np.sqrt(np.mean(-cross_val_score(ridge_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\"))) \nridge_table.append([ridge_y_train_error,ridge_reg_test_error,ridge_reg_cv_error])\nridge_table=pd.DataFrame(data=ridge_table,columns=ridge_table_names)\nridge_table","111ae6c2":"#Tuned Ridge\nfill_null_threshold(data)\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)\nalphas1 = np.linspace(0,1,1000)\nridge_cv_tuned = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv_tuned.fit(X_train, y_train)\nridge_tuned = Ridge(alpha = ridge_cv_tuned.alpha_).fit(X_train, y_train)\nridge_cv_tuned_y_test_pred=ridge_cv_tuned.predict(X_test)\nridge_cv_tuned_y_test_error=np.sqrt(mean_squared_error(y_test, ridge_cv_tuned_y_test_pred))\nprint(\"ridge_cv_tuned_y_test_error: \"+ str(ridge_cv_tuned_y_test_error)+\" Alpha: \"+str(ridge_cv_tuned.alpha_))","cccf553c":"fill_null_threshold(data)\nlasso_table_names=[\"Lasso_y_train_error\",\"Lasso_y_test_error\",'Lasso_reg_cv_error']\nlasso_table=[]\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)\nlasso_reg_model=Lasso()\nlasso_reg_model.fit(X_train,y_train)\nlasso_y_train_predict=lasso_reg_model.predict(X_train)\nlasso_y_train_error=np.sqrt(mean_squared_error(y_train, lasso_y_train_predict))\nlasso_y_test_predict=lasso_reg_model.predict(X_test)\nlasso_reg_test_error=np.sqrt(mean_squared_error(y_test, lasso_y_test_predict))\nlasso_reg_model = Lasso()\nlasso_reg_model.fit(X, y)\nlasso_reg_cv_error=np.sqrt(np.mean(-cross_val_score(lasso_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\"))) \nlasso_table.append([lasso_y_train_error,lasso_reg_test_error,lasso_reg_cv_error])\nlasso_table=pd.DataFrame(data=lasso_table,columns=lasso_table_names)\nlasso_table\n","6d90ce0c":"#Tuned Lasso\nfill_null_threshold(data)\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)\nalphas1 = np.linspace(0,1,1000)\nlasso_cv_tuned = LassoCV(alphas = alphas1, cv = 10, normalize = True)\nlasso_cv_tuned.fit(X_train, y_train)\nlasso_tuned = Lasso(alpha = lasso_cv_tuned.alpha_).fit(X_train, y_train)\nlasso_cv_tuned_y_test_pred=lasso_cv_tuned.predict(X_test)\nlasso_cv_tuned_y_test_error=np.sqrt(mean_squared_error(y_test, lasso_cv_tuned_y_test_pred))\nprint(\"lasso_cv_tuned_y_test_error: \"+ str(lasso_cv_tuned_y_test_error)+\" Alpha: \"+str(lasso_cv_tuned.alpha_))","3482cca1":"fill_null_threshold(data)\nelasticnet_table_names=[\"elasticnet_y_train_error\",\"elasticnet_y_test_error\",'elasticnet_reg_cv_error']\nelasticnet_table=[]\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)\nelasticnet_reg_model=ElasticNet()\nelasticnet_reg_model.fit(X_train,y_train)\nelasticnet_y_train_predict=elasticnet_reg_model.predict(X_train)\nelasticnet_y_train_error=np.sqrt(mean_squared_error(y_train, elasticnet_y_train_predict))\nelasticnet_y_test_predict=elasticnet_reg_model.predict(X_test)\nelasticnet_reg_test_error=np.sqrt(mean_squared_error(y_test, elasticnet_y_test_predict))\nelasticnet_reg_model = ElasticNet()\nelasticnet_reg_model.fit(X, y)\nelasticnet_reg_cv_error=np.sqrt(np.mean(-cross_val_score(elasticnet_reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\"))) \nelasticnet_table.append([elasticnet_y_train_error,elasticnet_reg_test_error,elasticnet_reg_cv_error])\nelasticnet_table=pd.DataFrame(data=elasticnet_table,columns=elasticnet_table_names)\nelasticnet_table","138701dd":"#Tuned ElasticNet\nfill_null_threshold(data)\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)\nenet_params = {\"l1_ratio\": np.linspace(0,1,100),\"alpha\":np.linspace(0,1,100)}\nelasticnet_model=ElasticNet()\nelasticnet_gridsearch = GridSearchCV(elasticnet_model, enet_params, cv = 10,n_jobs=-1).fit(X_train, y_train)\nelasticnet_tuned = ElasticNet(**elasticnet_gridsearch.best_params_).fit(X_train, y_train)\nelasticnet_cv_tuned_y_test_pred=elasticnet_tuned.predict(X_test)\nelasticnet_cv_tuned_y_test_error=np.sqrt(mean_squared_error(y_test, elasticnet_cv_tuned_y_test_pred))\nprint(\"elasticnet_cv_tuned_y_test_error: \"+ str(elasticnet_cv_tuned_y_test_error)+\" best_params_: \"+str(elasticnet_gridsearch.best_params_))","71cef0dd":"results_with_to_fill_and_preprocessing=pd.DataFrame({\"Test Error\":[linear_y_test_error,ridge_reg_test_error,lasso_reg_test_error,elasticnet_reg_test_error],\n                      \"Cv Error\":[linear_reg_cv_error,ridge_reg_cv_error,lasso_reg_cv_error,elasticnet_reg_cv_error],\n                    \"Tuned\":['No Value',ridge_cv_tuned_y_test_error,lasso_cv_tuned_y_test_error,elasticnet_cv_tuned_y_test_error]})\nresults_with_to_fill_and_preprocessing.index=[\"Linear\",\"Ridge\",\"Lasso\",\"ElasticNet\"]\nresults_with_to_fill_and_preprocessing","d0f12d3c":"fill_null_threshold(data)\nknn_model=KNeighborsRegressor().fit(X_train,y_train)\ny_pred=knn_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test,y_pred))","66fd640c":"#GridSearchCV\nfill_null_threshold(data)\nknn_params={\"n_neighbors\":np.arange(2,30,1)}\nknn_model=KNeighborsRegressor()\nknn_cv_model=GridSearchCV(knn_model,knn_params,cv=10).fit(X,y)\nknn_cv_model.best_params_","7ae3bc95":"knn_tuned=KNeighborsRegressor(**knn_cv_model.best_params_).fit(X_train,y_train)\ny_pred_tuned=knn_tuned.predict(X_test)\ny_test_error_tuned=np.sqrt(mean_squared_error(y_test,y_pred_tuned))\ny_test_error_tuned","b295b77c":"fill_null_threshold(data)\nsvr_model=SVR(\"linear\").fit(X_train,y_train)\ny_pred=svr_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test,y_pred))","d5d8ccc2":"#SVR Tuning\nsvr_model=SVR(\"linear\")\nsvr_params={\"C\":np.linspace(0,1,5)}\nsvr_cv_model=GridSearchCV(svr_model,svr_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)\nsvr_tuned=SVR(**svr_cv_model.best_params_).fit(X_train,y_train)\ny_pred=svr_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test,y_pred))","5f22db56":"fill_null_threshold(data)\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_scaled=scaler.transform(X_train)\nscaler.fit(X_test)\nX_test_scaled=scaler.transform(X_test)\nmlp_model=MLPRegressor().fit(X_train_scaled,y_train)\ny_pred=mlp_model.predict(X_test_scaled)\nnp.sqrt(mean_squared_error(y_test,y_pred))","1397cc8c":"#Model Tuning \nmlp_params={\"alpha\":[0.01,0.1,0.02,0.001,0.0001],\n            \"hidden_layer_sizes\":[(10,20),(5,5),(100.100),(1000,100,10)],\n            \"learning_rate\" : ['constant', 'invscaling', 'adaptive']}\nmlp_cv_model=GridSearchCV(mlp_model,mlp_params,cv=10,verbose=2,n_jobs=-1).fit(X_train_scaled,y_train)\nmlp_tuned=MLPRegressor(**mlp_cv_model.best_params_).fit(X_train_scaled,y_train)\ny_pred=mlp_tuned.predict(X_test_scaled)\nnp.sqrt(mean_squared_error(y_test,y_pred))","605f7881":"fill_null_threshold(data)\ncart_model = DecisionTreeRegressor(random_state = 52)\ncart_model.fit(X_train, y_train)\ny_pred = cart_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","b3a6bd1a":"#Tuning \ncart_params = {\"max_depth\": [2,3,4,5,10,20, 100, 1000],\n              \"min_samples_split\": [2,10,5,30,50,10]}\ncart_model = DecisionTreeRegressor()\ncart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10).fit(X_train, y_train)\ncart_tuned = DecisionTreeRegressor(**cart_cv_model.best_params_).fit(X_train, y_train)\ny_pred = cart_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","0a431dd9":"### In without data preprocessing I removed 59 observations from dataset.","107a945f":"### outliers observing with Boxplot ","12a4df18":"# ElasticNet Regression","3f9ddad2":"# ","ecdeefa6":"### 3 categorical ('League', 'Division', 'NewLeague') variables is changed with dummy variables.","3223c5b1":"### Salary variable has 59 missing observations. It's the dependent variable, so either 59 observations will be removed or will be filled with preditictions. ","41c62668":"# Lasso","ecb9e6e0":"# Linear With Outlier Analysis","9390925b":"# CART","61c18841":"# Linear Regression","bcf49cb0":"Hitters dataset includes various statistics of the players who played in the 1986\u20131987 season. Dataset consist of 20 variables and 322 observations, only the salary variable has missing observations. The definitions of the variables of the dataset are as follows:\n* AtBat: Number of shots made with a baseball bat during the 1986\u20131987 season\n* Hits: Number of hits made in the 1986\u20131987 season\n* HmRun: Most valuable hits in the 1986\u20131987 season\n* Runs: The points he earned for his team in the 1986\u20131987 season\n* RBI: Number of players a batsman had jogged when he hit in the season\n* Walks: Number of mistakes made by the opposing player\n* Years: Player\u2019s playing time in major league (in year)\n* CAtBat: Number of shots made with a baseball bat in career\n* CHits: Number of hits made in the career\n* CHmRun: Most valuable hits in the career\n* CRuns: The points he earned for his team in his career\n* CRBI: Number of players a batsman had jogged when he hit in the career\n* CWalks: Number of mistakes made by the opposing player in career\n* League: A factor with A and N levels showing the league in which the player played until the end of the season\n* Division: A factor with levels E and W indicating the position played by the player at the end of 1986\n* PutOuts: Helping your teammate in-game\n* Assists: Number of assists made by the player in the 1986\u20131987 season\n* Errors: Player\u2019s errors in the 1986\u20131987 season\n* NewLeague: A factor with A and N levels showing the player\u2019s league at the start of the 1987 season\n* Salary: The salary of the player in the 1986\u20131987 season (in thousand)","44f3ddec":"* Without data preprocessing results are quite high. \n* The best result is from Ridge Regression.","134b615e":"# Lasso Regression","8c3f0e63":"# KNN","961ac06d":"# Ridge Regression With Outlier Analysis","0ad44485":"# Support Vector Regression","b0f375a4":"# Ridge Regression","80c19159":"# Neural Networks","4e735f37":"# Without data preprocessing ","a9e81586":"# With data preprocessing and To Fill in Null","905ae259":"# ElasticNet Regression","fe3c40f1":"* to take best results three loops was created. \n* for fill_n in range(3,9) => to fill null values knn was used and between 3 and 9 numbers were tried for nearest neighbors\n* for n_n in range(3,20) => outlier values were removed from data with local outlier factor (LOF), therefore between 3 and 20 numbers were tried\n* for t in range(0,15) => between 0 and 15 number were tried for threshold value. after the lof method we should define a point to remove outliers. \n* outliers of the dependent variable (y) was pressured with Iqr method (%90-%10) "}}