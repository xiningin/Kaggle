{"cell_type":{"abbcf955":"code","204381f6":"code","0b779634":"code","9f293406":"code","03a6ee67":"code","915945fb":"code","5abd386c":"code","8d7dd3a2":"code","c9c0cf2d":"code","a6258d51":"code","e8d155a5":"code","0f8791e3":"code","32384c66":"code","a550e187":"code","5d04ba79":"code","4df8adee":"code","0a18d9d0":"code","81455a46":"code","03eaf378":"code","e0381c55":"code","d1cd4f95":"code","b33b85fb":"code","fd0f50f5":"code","7fe07118":"code","61b6d2a4":"code","cac6c8f9":"code","08a2a571":"code","882a6769":"code","d557f809":"code","f1f9904c":"code","c87140a5":"markdown","41f042e8":"markdown","3cc98ac9":"markdown"},"source":{"abbcf955":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","204381f6":"df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","0b779634":"df.shape","9f293406":"import seaborn as sns \nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')","03a6ee67":"df.isnull().sum()","915945fb":"discrete = [f for f in df.columns if df[f].nunique()<20 and f!='Outcome']\ndiscrete","5abd386c":"np.sort(df.Pregnancies.unique())","8d7dd3a2":"df[df.Pregnancies>10]","c9c0cf2d":"sns.countplot(df[\"Pregnancies\"], hue = df[\"Outcome\"])","a6258d51":"plt.figure(figsize = (10,10))\nsns.histplot(x =\"Pregnancies\", hue = \"Outcome\",data=df, kde = True,palette=\"dark\")","e8d155a5":"plt.figure(figsize = (10,10))\nsns.histplot(x =\"Glucose\", hue = \"Outcome\",data=df, kde = True,palette = \"flare\")","0f8791e3":"plt.figure(figsize = (10,10))\nsns.histplot(x =\"BloodPressure\", hue = \"Outcome\",data=df, kde = True,palette = \"dark\")","32384c66":"plt.figure(figsize = (10,10))\nsns.histplot(x =\"SkinThickness\", hue = \"Outcome\",data=df, kde = True,palette=\"light:#5A9\")","a550e187":"plt.figure(figsize = (10,10))\nsns.histplot(x =\"Insulin\", hue = \"Outcome\",data=df, kde = True)","5d04ba79":"plt.figure(figsize = (10,10))\nsns.histplot(x =\"BMI\", hue = \"Outcome\",data=df, kde = True)","4df8adee":"plt.figure(figsize = (10,10))\nsns.histplot(x =\"Age\", hue = \"Outcome\",data=df, kde = True,palette=\"Set1\")","0a18d9d0":"sns.lmplot(data=df, x=\"Age\", y=\"BloodPressure\",hue = \"Outcome\",palette=\"Set2\",col = \"Outcome\")","81455a46":"sns.lmplot(data=df, x=\"Age\", y=\"Glucose\",hue = \"Outcome\",palette=\"Set1\")","03eaf378":"sns.lmplot(data=df, x=\"Age\", y=\"SkinThickness\",hue = \"Outcome\",palette=\"Set3\")","e0381c55":"for i in df.columns:\n    if i!='Outcome':\n        sns.boxplot(x = df[\"Outcome\"],y=df[i],palette=\"Set2\")\n        plt.show()","d1cd4f95":"plt.figure(figsize=(15,15\n                   ))\nsns.heatmap(df.corr(),cmap=\"spring\",annot = True)","b33b85fb":"plt.figure(figsize=(20,20\n                   ))\nsns.pairplot(df,hue = \"Outcome\")","fd0f50f5":"sns.countplot(df[\"Outcome\"])","7fe07118":"df.head()","61b6d2a4":"X = df.drop([\"Outcome\"],axis=1)\ny = df[\"Outcome\"]","cac6c8f9":"from sklearn.impute import SimpleImputer \n\nfill_values = SimpleImputer(missing_values=0,strategy=\"median\")\nX = fill_values.fit_transform(X)","08a2a571":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","882a6769":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=10)\n","d557f809":"from imblearn.over_sampling import SMOTE\nos = SMOTE(random_state=42)\nX_train,y_train = os.fit_resample(X_train, y_train.ravel())","f1f9904c":"from xgboost import XGBClassifier\nxgb = XGBClassifier(subsample=1)\nxgb.fit(X_train,y_train)\nxgb.score(X_test,y_test)","c87140a5":"## Glucose vs Outcome ","41f042e8":"## Number of Pregnancies vs Outcome ","3cc98ac9":"# EDA"}}