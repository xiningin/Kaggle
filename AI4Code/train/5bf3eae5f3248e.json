{"cell_type":{"053aa449":"code","7062a4ca":"code","ddcde864":"code","4e59f287":"code","6b96846e":"code","2af0fdb7":"code","ce380bd4":"code","bf057c1e":"code","0aaa9a27":"code","298a7ba6":"code","9ce42df9":"code","34a8ccdc":"code","a7bf3cfc":"code","b72103fb":"code","5d04cdc3":"code","5aa9a58f":"code","35ff73b2":"code","1732f783":"code","0325f569":"code","1064d741":"code","3f07d37a":"code","683ab669":"code","6d17d2d4":"code","89bb3096":"code","e4ccdc6f":"code","5d873f2c":"code","dceb45a2":"code","587e7dca":"code","1faa1ec4":"code","cfe50abc":"code","b5b9eb42":"code","e536968a":"code","b59c4244":"code","b346eba5":"code","3ab64c55":"code","e80d2793":"code","b6956ce3":"code","fd5db2aa":"code","70936b8c":"code","83f0515f":"code","b53496c0":"code","165d9b4f":"code","94903a1f":"code","055f5629":"code","57e6acb0":"code","af14bc3b":"code","33d03a5a":"code","cc9428ba":"code","abb833fd":"code","697a0870":"code","5dc6765f":"code","ccc51e39":"code","0ba3bdd2":"code","340c35d9":"code","f7279690":"code","5fbb4c2d":"code","a1fd0d96":"code","a299825d":"code","d2da02b6":"code","dcfe5eef":"code","46bb5eab":"code","bf83842b":"code","98c3834f":"code","45fffdea":"code","0f62b08b":"code","e8f6f783":"code","4b8e0eab":"code","40ac0141":"markdown","6a3b7c6a":"markdown","b6d527f0":"markdown","d119149e":"markdown","ca052d12":"markdown","fa549881":"markdown","8985a0a0":"markdown","10d7fe17":"markdown","592dfdaf":"markdown","386ddc45":"markdown","84df62a4":"markdown","5b7ed90a":"markdown","34b5d5ca":"markdown","61b8b0df":"markdown","9a0fb530":"markdown","e7a7e839":"markdown","42d56f4c":"markdown","0b2feb0d":"markdown","57a1f1d0":"markdown","692e0f99":"markdown","bc3dba4c":"markdown","2aeca937":"markdown","3ea2167b":"markdown","c518b253":"markdown","1fe1045c":"markdown","d762c942":"markdown","6ff2ecca":"markdown","435f0228":"markdown","8a6ddcdb":"markdown","a959c303":"markdown","d60308e2":"markdown","09ec53e2":"markdown","63ecbbbe":"markdown","0ba010f0":"markdown","f3ed4ddc":"markdown"},"source":{"053aa449":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (12.0,9.0)","7062a4ca":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')\ndf","ddcde864":"df.tail()","4e59f287":"df.shape","6b96846e":"df.info()","2af0fdb7":"##Value counts for every columns\nfor column in df.columns:\n    print(df[column].value_counts())\n    print('*' * 20)","ce380bd4":"df.describe()","bf057c1e":"sns.pairplot(df)","0aaa9a27":"plt.title('Relation Between Age and Charges')\nsns.scatterplot(x = df['age'], y= df['charges'])\nplt.show()","298a7ba6":"plt.title('Regression line Between Age and Charges')\nsns.regplot(x = df['age'], y= df['charges'])\nplt.show()","9ce42df9":"plt.title('Relation Between BMI and Charges')\nsns.scatterplot(x = df['bmi'], y= df['charges'])\nplt.show()\nplt.title('Regression line Between BMI and Charges')\nsns.regplot(x = df['bmi'] , y = df['charges'])\nplt.show()","34a8ccdc":"plt.title('Relation Between BMI and Charges')\nsns.scatterplot(x = df['smoker'], y= df['charges'])\nplt.show()\nsns.swarmplot(x=df['smoker'],y = df['charges'] )","a7bf3cfc":"plt.title('Relation Between BMI and Charges')\nsns.scatterplot(x = df['bmi'], y= df['charges'] , hue = df['smoker'])\nplt.show()","b72103fb":"sns.lmplot(x = 'bmi',y = 'charges', hue = 'smoker' , data=df)","5d04cdc3":"plt.title('Relation between Children and Charges')\nsns.barplot(x=df['children'], y=df['charges'])","5aa9a58f":"plt.title('Relation between Sex and Charges')\nsns.swarmplot(x = df['sex'] , y = df['charges'])\nplt.show()\nsns.barplot(x = df['sex'], y = df['charges'])\nplt.show()","35ff73b2":"plt.title('Relation between Region and Charges')\nsns.barplot(x=df['region'], y=df['charges'])\nplt.show()","1732f783":"sns.heatmap(df.corr() , cmap = 'Wistia' , annot = True)","0325f569":"df.isnull().sum()","1064d741":"sns.heatmap(df.isnull())","3f07d37a":"missing_val_per = (df.isnull().sum() \/ df.shape[0] ) * 100\nmissing_val_per","683ab669":"def outlier_zscore(data):\n    global outliers,zscore\n    outliers = []\n    zscore = []\n    threshold = 3.5\n    mean = np.mean(data)\n    std = np.std(data)\n    for i in data:\n        z_score= (i - mean)\/std \n        zscore.append(z_score)\n        if np.abs(z_score) > threshold:\n            outliers.append(i)\n    print(outliers)\n    return len(outliers), outliers","6d17d2d4":"## Checking whether age column has any outlier","89bb3096":"age_outliers_number, age_outliers = outlier_zscore(df.age)","e4ccdc6f":"print(f\"The number of outliers are {age_outliers_number} and the outliers are {age_outliers}\")","5d873f2c":"df['age'].describe()","dceb45a2":"sns.boxplot(y = 'age', data = df)","587e7dca":"## Checking whether bmi column has any outlier","1faa1ec4":"df['bmi'].describe()","cfe50abc":"bmi_outliers_number, bmi_outliers = outlier_zscore(df.bmi)","b5b9eb42":"print(f\"The number of outliers are {bmi_outliers_number} and the outliers are {bmi_outliers}\")","e536968a":"sns.boxplot(y = 'bmi', data = df)","b59c4244":"#Removing the outliers of bmi \nfor num, i in enumerate(df['bmi']):\n    if i in bmi_outliers:\n        df['bmi'][num] = 48.5\n","b346eba5":"bmi_outliers_number, bmi_outliers = outlier_zscore(df.bmi)","3ab64c55":"print(f\"And now the number of outliers are {bmi_outliers_number}\")","e80d2793":"df['bmi'].describe()","b6956ce3":"## Checking whether children column has any outlier","fd5db2aa":"df['children'].describe()","70936b8c":"chil_outliers_number, chil_outliers = outlier_zscore(df.children)\n","83f0515f":"print(f\"The number of outliers are {bmi_outliers_number} and the outliers are {bmi_outliers}\")","b53496c0":"sns.boxplot(y = 'children', data = df)","165d9b4f":"## Checking whether children column has any outlier","94903a1f":"df['charges'].describe()","055f5629":"charges_outliers_number, charges_outliers = outlier_zscore(df.charges)","57e6acb0":"print(f\"The number of outliers are {charges_outliers_number} and the outliers are {charges_outliers}\")","af14bc3b":"sns.boxplot(y = 'charges', data = df)","33d03a5a":"#Removing the outliers of bmi \nfor num, i in enumerate(df['charges']):\n    if i in charges_outliers:\n        df['charges'][num] = 55000.00000","cc9428ba":"charges_outliers_number, charges_outliers = outlier_zscore(df.charges)","abb833fd":"print(f\"And now the number of outliers are {charges_outliers_number}\")","697a0870":"df['charges'].describe()","5dc6765f":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","ccc51e39":"df['sex'] = le.fit_transform(df['sex'])\ndf['smoker'] = le.fit_transform(df['smoker'])\ndf['region'] = le.fit_transform(df['region'])","0ba3bdd2":"df.head()","340c35d9":"x = df.iloc[ : , : -1]\ny = df.iloc[ : , -1]","f7279690":"x","5fbb4c2d":"y","a1fd0d96":"from sklearn.model_selection import train_test_split","a299825d":"x_train , x_test , y_train , y_test = train_test_split(x, y, test_size = 0.2 , random_state = 51)","d2da02b6":"print(\" Shape of x_train = \", x_train.shape)\nprint(\" Shape of x_test = \", x_test.shape)\nprint(\" Shape of y_train = \", y_train.shape)\nprint(\" Shape of y_test = \", y_test.shape)","dcfe5eef":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(x_train)\nx_train = sc.transform(x_train)\nx_test = sc.transform(x_test)","46bb5eab":"x_train","bf83842b":"x_test","98c3834f":"from sklearn.linear_model import LinearRegression","45fffdea":"lr = LinearRegression() \nlr.fit(x_train, y_train)","0f62b08b":"print(\"Intercept : \" , lr.intercept_)\nprint(\"Slope : \" , lr.coef_)","e8f6f783":"y_pred = lr.predict(x_test)\ny_pred_df = pd.DataFrame(y_pred, columns=[\"Predicted Values\" ])\ny_test_df = pd.DataFrame(np.array(y_test), columns=[\"Real Values\"])\npd.concat([y_test_df , y_pred_df] , axis=1)","4b8e0eab":"from sklearn.metrics import r2_score , mean_squared_error\nscore = r2_score(y_test , y_pred)\nprint(\"R2 Score : {}\".format(score))\nprint(\"Model Accuracy: {}%\".format(score * 100))","40ac0141":"**Label Encoding**","6a3b7c6a":"**Finding correlation between Region and Charges by ploting a barplot plot**","b6d527f0":"# Medical Cost Insurance Prediction\n\n\n","d119149e":"**Create Model & Fit**","ca052d12":"There is a positive relation between Age and Charges","fa549881":"**Finding correlation between Smokers and Charges by ploting a scatter plot and swarmplot**","8985a0a0":"**Dividing into features and target variable**","10d7fe17":"## Dataset","592dfdaf":"**Get Results**","386ddc45":"**Seeing the percentage of missing values**","84df62a4":"**Feature Scaling**","5b7ed90a":"Thus there is no outlier in the age column","34b5d5ca":"**Importing Dataset**","61b8b0df":"There is a postive relation between Bmi and Charges as we can see it from the regression line\n","9a0fb530":"There are no missing values in the dataset","e7a7e839":"**Outlier Detection using Z-Score Method**","42d56f4c":"**Spliting Dataset into train and test data**","0b2feb0d":"**Linear Regression Model Training**","57a1f1d0":"## Data Visualization","692e0f99":"**Checking the missing values**","bc3dba4c":"**Importing Libraries**","2aeca937":"As we can see from the plots, smoker tends to pay more charges than non smoker.\nThe slope of the regression line of smoker is more steeper than the slope of the non smoker","3ea2167b":"**Seeing the missing values in the heatmap**","c518b253":"**Finding correlation between Children and Charges by ploting a barplot**\n","1fe1045c":"**Prediction**","d762c942":"**Finding correlation between Age and Charges by ploting a scatter plot.**","6ff2ecca":"**Final Corelation plot**\n","435f0228":"## Multiple Linear Regression","8a6ddcdb":"**Finding correlation between BMI and Charges by ploting a scatter plot**\n","a959c303":"## Data Preprocessing","d60308e2":"**Describe**","09ec53e2":"**Metrics**","63ecbbbe":" There is not much difference between cost paid by mail and female. Thus sex of the person does not necessarily determine the insurance charges one pays.Either I can delete it or keep it","0ba010f0":"**Finding correlation between Sex and Charges**","f3ed4ddc":"From the plot we can see people having 2 or 3 childs has more charges."}}