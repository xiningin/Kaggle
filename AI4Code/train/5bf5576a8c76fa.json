{"cell_type":{"834c7ef0":"code","407a2ef5":"code","d44e6123":"code","7899cebc":"code","c79c7fdd":"code","e0ec458c":"code","ad99f43e":"code","fe1c116c":"code","e52b850f":"code","ab6c23a3":"code","0b4de56d":"code","7b647fc7":"code","6246d54e":"code","6c0646f5":"code","09c39a36":"code","659a1a67":"code","5c07cb93":"code","0581e959":"code","71462bfa":"code","cd423810":"code","9b07926d":"code","3b0d7ab4":"code","9454f440":"code","5ca071db":"code","a939fd62":"code","a64c906c":"markdown","1cb927e0":"markdown","75f259e0":"markdown","bfe8cd5d":"markdown","7a06aa0f":"markdown","95aa2f39":"markdown","98ab4445":"markdown","de2fa8fd":"markdown","eedf7e3a":"markdown","78eac537":"markdown","1b6c80a0":"markdown","8bbc7e81":"markdown","75e7af1b":"markdown","550c939b":"markdown","4aceecba":"markdown"},"source":{"834c7ef0":"!pip install dataprep","407a2ef5":"import numpy as np\nimport pandas as pd\nimport os\nimport sqlite3\nimport matplotlib.pyplot as plt\nfrom dataprep.eda import plot, plot_correlation\nimport datetime as dt\nimport seaborn as sns","d44e6123":"# View files available for reading\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7899cebc":"# Create a database connection\ncon = sqlite3.connect('\/kaggle\/input\/formula-1-race-data-sqlite\/Formula1_4tables.sqlite')\n\n# Create a cursor that uses the connection\ncursor = con.cursor()","c79c7fdd":"# List the database tables\n# SQLite files have an sqlite_master table with this information\n# See https:\/\/www.kite.com\/python\/answers\/how-to-list-tables-using-sqlite3-in-python\n\nquery = '''\n        SELECT name\n        FROM sqlite_master\n        WHERE type='table';\n        '''\ncursor.execute(query)\ncursor.fetchall()","e0ec458c":"# Create dataframe from query of drivers table\nquery = '''\n        SELECT *\n        FROM drivers\n        LIMIT 3;\n        '''\ndrivers = pd.read_sql_query(query, con)\ndrivers","ad99f43e":"query = '''\n        SELECT *\n        FROM races\n        LIMIT 3;\n        '''\nraces = pd.read_sql_query(query, con)\nraces","fe1c116c":"query = '''\n        SELECT *\n        FROM circuits\n        LIMIT 3;\n        '''\ncircuits = pd.read_sql_query(query, con)\ncircuits","e52b850f":"query = '''\n        SELECT * \n        FROM results\n        LIMIT 3;\n        '''\nresults = pd.read_sql_query(query, con)\nresults","ab6c23a3":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name',\n        races.name AS 'race name', races.date AS 'race date', results.positionOrder AS 'finish'\n        FROM results\n        JOIN drivers ON results.driverId = drivers.driverId\n        JOIN races ON results.raceId = races.raceId\n        WHERE results.positionOrder = 1;\n        '''\nrace_winners = pd.read_sql_query(query, con)\nrace_winners.head()","0b4de56d":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name', \n        drivers.dob AS 'birthday', drivers.nationality, SUM(results.points) AS 'all-time points'\n        FROM drivers\n        JOIN results ON drivers.driverId = results.driverId\n        GROUP BY drivers.driverId\n        ORDER BY SUM(results.points) DESC;\n        '''\ntotal_points_by_driver = pd.read_sql_query(query, con)\ntotal_points_by_driver.head()","7b647fc7":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name', \n        drivers.dob AS 'birth_date', COUNT(*) AS 'no. of wins'\n        FROM results\n        JOIN drivers ON results.driverId = drivers.driverId\n        JOIN races ON results.raceId = races.raceId\n        WHERE results.positionOrder = 1\n        GROUP BY drivers.driverId\n        ORDER BY COUNT(*) DESC;\n        '''\ntotal_wins_by_driver = pd.read_sql_query(query, con)\ntotal_wins_by_driver.head()","6246d54e":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name',\n        races.name AS 'race name', races.date AS 'race date', results.positionOrder AS 'finish'\n        FROM results\n        JOIN drivers ON results.driverId = drivers.driverId\n        JOIN races ON results.raceId = races.raceId\n        WHERE results.positionOrder = 1 AND drivers.surname = 'Schumacher' AND drivers.forename = 'Michael';\n        '''\nschumacher_test = pd.read_sql_query(query, con)\nschumacher_test","6c0646f5":"query = '''\n        SELECT drivers.nationality, SUM(results.points) AS 'total points'\n        FROM drivers\n        JOIN results ON drivers.driverId = results.driverId\n        GROUP BY drivers.nationality\n        HAVING SUM(results.points) > 0\n        ORDER BY SUM(results.points) DESC;\n        '''\ntotal_points_by_nation = pd.read_sql_query(query, con)\ntotal_points_by_nation.head()","09c39a36":"query = '''\n        SELECT races.date AS 'raceDate', races.year AS 'raceYear', races.raceId AS 'raceID',\n        races.name AS 'race', results.position AS 'driverPosition', results.points AS 'driverPoints',\n        drivers.driverId AS 'driverID', drivers.forename AS 'driverFirstname', \n        drivers.surname AS 'driverLastname', drivers.dob AS 'driverDOB', drivers.nationality AS 'driverNationality',\n        circuits.location AS 'circuitLocation', circuits.country AS 'circuitCountry', circuits.lat, circuits.lng\n        FROM races\n        JOIN results ON races.raceId = results.raceId\n        JOIN circuits ON races.circuitId = circuits.circuitId\n        JOIN drivers ON results.driverId = drivers.driverId;\n        '''\neda_df = pd.read_sql_query(query, con)\neda_df.head()","659a1a67":"eda_df[[\"raceDate\", \"driverDOB\"]]","5c07cb93":"dob_old = eda_df[\"driverDOB\"].copy()\ndob_new = pd.to_datetime(dob_old)\ndob_new\n","0581e959":"raceDate_old = eda_df[\"raceDate\"].copy()\nraceDate_new = pd.to_datetime(raceDate_old)\nraceDate_new","71462bfa":"eda_df[\"driverDOB\"] = dob_new","cd423810":"eda_df[\"driverDOB\"].head()","9b07926d":"eda_df[\"raceDate\"] = raceDate_new","3b0d7ab4":"eda_df[\"raceDate\"].head()","9454f440":"eda_df.info()","5ca071db":"eda_df[[\"raceDate\", \"driverDOB\"]].head(20)","a939fd62":"plot(eda_df)","a64c906c":"## List winner of each race, with race name and date","1cb927e0":"# Data Review and Preparation","75f259e0":"# Query to Dataframe","bfe8cd5d":"### Modify date fields to regularize format","7a06aa0f":"# Sample Queries","95aa2f39":"# Exploratory Data Analysis","98ab4445":"# View database schema\n\nUsing pandas `read_sql_query`\n\nSee: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_sql_query.html\n\n","de2fa8fd":"# Read and Review Data using SQL","eedf7e3a":"#### Note that some dates list day first (e.g. driverDOB record 2), while most are mm\/dd\/yyyy","78eac537":"## List all time points leaders, with birthday and nationality","1b6c80a0":"# Formula 1 Query, Prep, and EDA\n\n### This notebook will integrate SQL and Python by demonstrating how SQL queries can be used to create pandas dataframes, which can in turn be used for Exploratory Data Analysis with Python\/pandas. ","8bbc7e81":"## List the highest point scoring countries","75e7af1b":"## List all time winningest drivers","550c939b":"### Compare two date fields","4aceecba":"## List all of the individual race wins for the winningest driver"}}