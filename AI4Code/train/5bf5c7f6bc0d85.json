{"cell_type":{"f3797df5":"code","2668a157":"code","a28ef9e2":"code","9ed4d3be":"code","d72397e5":"code","d55c9aa0":"code","634f47a1":"code","85eef27b":"code","f04e4583":"code","95eae699":"code","2f05ee51":"code","67859763":"code","8f306181":"code","9d274624":"code","ac56b183":"code","d7040516":"code","d72dbcf7":"code","2198911c":"code","26ed01d1":"code","e185723f":"code","a059ed0d":"code","c3df0597":"code","ba3058d7":"markdown"},"source":{"f3797df5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import GroupKFold\n\nimport os\nprint(os.listdir(\"..\/input\"))","2668a157":"train = pd.read_csv('..\/input\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/test.csv', index_col='id')","a28ef9e2":"train.head()","9ed4d3be":"train.shape","d72397e5":"test.shape","d55c9aa0":"structures = pd.read_csv('..\/input\/structures.csv')\ndisplay(structures.head())","634f47a1":"# Map the atom structure data into train and test files\n\ndef map_atom_info(df, atom_idx):\n    df = pd.merge(df, structures, how = 'left',\n                  left_on  = ['molecule_name', f'atom_index_{atom_idx}'],\n                  right_on = ['molecule_name',  'atom_index'])\n    \n    df = df.drop('atom_index', axis=1)\n    df = df.rename(columns={'atom': f'atom_{atom_idx}',\n                            'x': f'x_{atom_idx}',\n                            'y': f'y_{atom_idx}',\n                            'z': f'z_{atom_idx}'})\n    return df\n\ntrain = map_atom_info(train, 0)\ntrain = map_atom_info(train, 1)\n\ntest = map_atom_info(test, 0)\ntest = map_atom_info(test, 1)","85eef27b":"train.head()","f04e4583":"%%time\n# This block is SPPED UP\n\ntrain_p_0 = train[['x_0', 'y_0', 'z_0']].values\ntrain_p_1 = train[['x_1', 'y_1', 'z_1']].values\ntest_p_0 = test[['x_0', 'y_0', 'z_0']].values\ntest_p_1 = test[['x_1', 'y_1', 'z_1']].values\n\ntrain['dist'] = np.linalg.norm(train_p_0 - train_p_1, axis=1)\ntest['dist'] = np.linalg.norm(test_p_0 - test_p_1, axis=1)","95eae699":"molecules = train.pop('molecule_name')\ntest = test.drop('molecule_name', axis=1)","2f05ee51":"train.head()","67859763":"train['fold'] = 0","8f306181":"n_splits = 3\ngkf = GroupKFold(n_splits=n_splits) # we're going to split folds by molecules\n\n\nfor fold, (in_index, oof_index) in enumerate(gkf.split(train, groups=molecules)):\n    train.loc[oof_index, 'fold'] = fold","9d274624":"import h2o\nprint(h2o.__version__)\nfrom h2o.automl import H2OAutoML\n\nh2o.init(max_mem_size='14G')","ac56b183":"train = h2o.H2OFrame(train)","d7040516":"test = h2o.H2OFrame(test)","d72dbcf7":"train['type'] = train['type'].asfactor()\ntrain['atom_0'] = train['atom_0'].asfactor()\ntrain['atom_1'] = train['atom_1'].asfactor()\n\ntest['type'] = test['type'].asfactor()\ntest['atom_0'] = test['atom_0'].asfactor()\ntest['atom_1'] = test['atom_1'].asfactor()","2198911c":"x = test.columns\ny = 'scalar_coupling_constant'","26ed01d1":"aml = H2OAutoML(max_models=2, seed=47, max_runtime_secs=3600)\naml.train(x=x, y=y, training_frame=train)","e185723f":"# View the AutoML Leaderboard\nlb = aml.leaderboard\nlb.head(rows=lb.nrows)  # Print all rows instead of default (10 rows)","a059ed0d":"# The leader model is stored here\naml.leader","c3df0597":"preds = aml.predict(test)\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv')\nsample_submission['scalar_coupling_constant'] = preds.as_data_frame().values.flatten()\nsample_submission.to_csv('h2o_submission_3.csv', index=False)","ba3058d7":"[H2O AutoML](http:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/automl.html) is an automated machine learning meta-algorithm that is part of the [H2O software library](http:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-py\/docs\/intro.html#what-is-h2o). (It shold not be confused with [H2O DriverlessAI](https:\/\/www.h2o.ai\/products\/h2o-driverless-ai\/), which is a commercial product and built from an entirely different code base.) H2O\u2019s AutoML can be used for automating the machine learning workflow, which includes automatic training and tuning of many models within a user-specified time-limit. Stacked Ensembles \u2013 one based on all previously trained models, another one on the best model of each family \u2013 will be automatically trained on collections of individual models to produce highly predictive ensemble models which, in most cases, will be the top performing models in the AutoML Leaderboard."}}