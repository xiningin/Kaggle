{"cell_type":{"39699846":"code","c0156257":"code","2f4a0983":"code","4b996786":"code","885c6084":"code","8a629db0":"code","669fe9eb":"code","447a37fd":"code","623de4bb":"code","2d9a1ea3":"code","321cf263":"markdown","396a2dfb":"markdown","063357a5":"markdown","c5161207":"markdown","daeda66f":"markdown","56da42bc":"markdown","b81967fa":"markdown","9dc15086":"markdown"},"source":{"39699846":"import os\nimport matplotlib.pyplot as plt\nimport PIL.Image as Image\nfrom keras.applications.vgg16 import VGG16\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import preprocess_input\nimport numpy as np","c0156257":"file_names = os.listdir(\"..\/input\/fruit\")\nfile_names.sort()\nprint(file_names)\nprint('The number of fruit images: ', len(file_names))","2f4a0983":"c = 8\nr = len(file_names) \/\/ c + 1\nplt.figure(figsize=(15,15))\nfor i, file_name in enumerate(file_names):\n    abs_file_path = '..\/input\/fruit\/' + file_name\n    img = image.load_img(abs_file_path, target_size=(224, 224))\n    x = image.img_to_array(img)\n    x = x.astype('float32') \/ 255\n    plt.subplot(r, c, i+1)\n    plt.title(i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(x)","4b996786":"# consine similarity\ndef cosine_similarity(ratings):\n    sim = ratings.dot(ratings.T)\n    norms = np.array([np.sqrt(np.diagonal(sim))])\n    return (sim \/ norms \/ norms.T)","885c6084":"y_test = []\nx_test = []\nfor file_name in file_names:\n    abs_file_path = '..\/input\/fruit\/' + file_name\n    img = image.load_img(abs_file_path, target_size=(224, 224))\n    y_test.append(int(file_name[0:2]))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    if len(x_test) > 0:\n        x_test = np.concatenate((x_test, x))\n    else:\n        x_test = x","8a629db0":"x_test.shape","669fe9eb":"print(y_test)","447a37fd":"# convert input to VGG format\nx_test = preprocess_input(x_test)\n\n# include_top=False: exclude top(last) 3 fully-connected layers. get features dim=(1,7,7,512)\nmodel = VGG16(weights='imagenet', include_top=False)\n\n# use VGG to extract features\nfeatures = model.predict(x_test)","623de4bb":"# flatten as one dimension\nfeatures_compress = features.reshape(len(y_test), 7 * 7 * 512)\n\n# compute consine similarity\ncos_sim = cosine_similarity(features_compress)","2d9a1ea3":"# random choose 5 samples to test\ninputNos = np.random.choice(len(y_test), 5, replace=False)\n\nfor inputNo in inputNos:\n    # select two best similar images \n    top = np.argsort(-cos_sim[inputNo], axis=0)[1:3]\n    recommend = [y_test[i] for i in top]\n    output = 'input: \\'{}\\', recommend: {}'.format(inputNo + 1, recommend)\n    print(output)","321cf263":"**This kernel uses VGG model to extract features of images, and use these features to compute cosine similarity so as to find similar images. **","396a2dfb":"## Compute consine similarity","063357a5":"## Find similar images","c5161207":"## Define a function: cosine similarity","daeda66f":"## Extract features by using VGG","56da42bc":"## Reference\n[\u9673\u662d\u660e - CNN \u61c9\u7528](https:\/\/ithelp.ithome.com.tw\/articles\/10192389)","b81967fa":"## Show fruit images","9dc15086":"## Convert all images to arrays"}}