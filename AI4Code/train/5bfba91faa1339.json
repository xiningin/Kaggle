{"cell_type":{"97e24be3":"code","aabe2556":"code","61da97f1":"code","82ff026b":"code","08b9c3c3":"code","61a70f79":"code","0abb33e0":"code","ca4896fe":"code","319c14eb":"code","6bee4270":"code","101f080a":"code","bfb1e90d":"code","f1f468a3":"code","a0de3af1":"code","3f3c6323":"code","8c6cc0bb":"code","386d0a07":"code","56117918":"code","1b386127":"code","00ae47b6":"markdown","b08e69db":"markdown","9fa9adeb":"markdown","8dae2f86":"markdown"},"source":{"97e24be3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport regex as re\nfrom wordcloud import WordCloud\nimport spacy\nimport collections\nnlp = spacy.load('en_core_web_sm',disable=['parser', 'ner'])\nimport nltk\nfrom nltk.util import ngrams    \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aabe2556":"df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\")","61da97f1":"df.columns","82ff026b":"df['excerpt'][0]","08b9c3c3":"df['target'].plot.hist()","61a70f79":"df['standard_error'].plot.hist()","0abb33e0":"plt.scatter(df['target'],df['standard_error'])","ca4896fe":"df[df['target']==0]","319c14eb":"regex_http = re.compile(r\"(?i)\\b((?:https?:\/\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\")\nregex_alpha = re.compile('[^0-9A-Za-z\\s]') #remove all non alphanumeric characters\nregex_numbers = re.compile(r'\\b\\d+[a-z]*|[a-z]*\\d+\\b')\nregex_space = re.compile('\\s+')\nd = {regex_http:' ', regex_alpha:' ', regex_numbers: ' ', regex_space: ' ' , '\\xa0' : ' '}","6bee4270":"df['clean_sentence'] = df.excerpt.replace(d, regex=True)\ndf['clean_sentence'] = df['clean_sentence'].apply(lambda x : x.lower())","101f080a":"# Lemmatization with stopwords removal using spacy\ndf['lemmatized']=df['clean_sentence'].apply(lambda x: ' '.join([token.lemma_ for token in list(nlp(x)) if ((not token.is_punct) and (token.is_stop==False))]))","bfb1e90d":"words = ' '.join(df['lemmatized']).split()\ncount = collections.Counter(words)\ncount.most_common(15)","f1f468a3":"word_df = pd.DataFrame(count.most_common(30),columns = ['Word','Frequency'])","a0de3af1":"fig, ax = plt.subplots(figsize=(12, 12))\n\n# Plot horizontal bar graph\nword_df.sort_values(by='Frequency').plot.barh(x='Word',\n                      y='Frequency',\n                      ax=ax)\n\nax.set_title(\"Common Words Found in Excerpts after cleaning\")\n\nplt.show()","3f3c6323":"wordcloud = WordCloud(width = 3000, \n                      height = 2000, \n                      random_state=1, \n                      background_color='black', \n                      colormap='Set2', \n                      collocations=False).generate(\" \".join(list(df['lemmatized'])))\n\n# Save image\nwordcloud.to_file(\"wordcloud.png\")\n\n# plot the WordCloud image                       \nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n  \nplt.show()","8c6cc0bb":"text = \" \".join(list(df['lemmatized']))\ntokens = nltk.word_tokenize(text)\nbigram_words = nltk.bigrams(tokens)\ntrigram_words = nltk.trigrams(tokens)","386d0a07":"bi_fdist = nltk.FreqDist(bigram_words)\ntri_fdist = nltk.FreqDist(trigram_words)","56117918":"bi_fdist.most_common(15)","1b386127":"tri_fdist.most_common(15)","00ae47b6":"## Top Bigrams and Trigrams ","b08e69db":"## Excerpt data preprocessing","9fa9adeb":"Standard error can be seen high where target values are very high(too tough to read)\/ very low(too easy to read)","8dae2f86":"## Frequent words in train excerpt data"}}