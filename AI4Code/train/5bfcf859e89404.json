{"cell_type":{"71cf12ca":"code","d467ba29":"code","c91b97e0":"code","0c3b68fb":"code","07a1aeed":"code","dd7b75d3":"code","434d0715":"code","24b9cdd5":"code","25127543":"code","1e79152f":"code","ae0ecca9":"code","bca9f89c":"code","33d7cafe":"code","8a230a77":"code","d30321d4":"code","4cfb35ad":"code","147b22f2":"code","1b56ac69":"code","89727acd":"code","1c24afa2":"code","57fc2783":"code","2f79d820":"code","0baaf7ea":"code","05955979":"code","5a47010e":"code","e712cc42":"code","eee23a3a":"code","d0a2729f":"code","61581564":"code","3e7bbc94":"code","9f0327c2":"code","876c142a":"code","7ee0bf01":"code","39536e63":"code","c5a28dfc":"code","c6a449c5":"code","01516e2d":"markdown","ec3f365e":"markdown","8b008ceb":"markdown","37c8ba0d":"markdown","7882b9ff":"markdown","c8cc54b0":"markdown","0c7641a0":"markdown","2e68845c":"markdown","f9ef8411":"markdown","43068056":"markdown","97897df5":"markdown","92151a62":"markdown","650da564":"markdown","279f4cca":"markdown","4b0fc75b":"markdown","9dc593f4":"markdown","a6a1312a":"markdown","28bae7df":"markdown","04e1cd53":"markdown","150df20d":"markdown","19775da2":"markdown","bb341305":"markdown","680c710f":"markdown"},"source":{"71cf12ca":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d467ba29":"df=pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head(10)","c91b97e0":"df.isnull().sum()\n","0c3b68fb":"plt.rcParams['figure.figsize']=15,6\nsns.set_style('darkgrid')\n\nx=df.iloc[:,:-1]\ny=df.iloc[:,-1]\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nmodel=ExtraTreesClassifier()\nmodel.fit(x,y)\nprint(model.feature_importances_)\nfeat_imp=pd.Series(model.feature_importances_,index=x.columns)\nfeat_imp.plot(kind='barh')\nplt.show()\n","07a1aeed":"# Box Plot for Ejection Fraction\nsns.boxplot(df['ejection_fraction'])\nplt.show()","dd7b75d3":"df['ejection_fraction']=df[df['ejection_fraction']<70]\nsns.boxplot(df['ejection_fraction'])\nplt.show()","434d0715":"#Boxplot for age\nsns.boxplot(df['age'])\nplt.show()","24b9cdd5":"#Distribution of Age\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['age'],\n    xbins=dict( # bins used for histogram\n        start=40,\n        end=95,\n        size=2\n    ),\n    marker_color='#e8aa60',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='Age Distribution',\n    xaxis_title_text='Age',\n    yaxis_title_text='Count', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    plot_bgcolor='#000000',\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n)\nfig.show()","25127543":"# Now lets categorize the above histogram by DEATH_EVENT\n\nimport plotly.express as px\nfig = px.histogram(df, x=\"age\", color=\"DEATH_EVENT\", hover_data=df.columns)\nfig.show()","1e79152f":"#Distribution of Serum Creatinine\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['serum_creatinine'],\n    xbins=dict( # bins used for histogram\n        start=0.5,\n        end=9.4,\n        size=0.2\n    ),\n    marker_color='#e8ab60',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='Serum Creatinine Distribution',\n    xaxis_title_text='Serum Creatinine',\n    yaxis_title_text='Count', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    plot_bgcolor='#000000',\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n)\nfig.show()","ae0ecca9":"#Histogram in comparison to DEATH_EVENT\n\nfig = px.histogram(df, x=\"serum_creatinine\", color=\"DEATH_EVENT\",marginal='violin', hover_data=df.columns)\nfig.show()","bca9f89c":"#Distribution of Platelets\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['platelets'],\n    xbins=dict( # bins used for histogram\n        start=25000,\n        end=850000,\n        size=10000\n    ),\n    marker_color='#e8ab60',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='Platelets Distribution',\n    xaxis_title_text='Platelets',\n    yaxis_title_text='Count', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    plot_bgcolor='#000000',\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n)\nfig.show()","33d7cafe":"#Histogram of platelets as a function of DEATH_EVENT\n\nfig = px.histogram(df, x=\"platelets\", color=\"DEATH_EVENT\",marginal='violin', hover_data=df.columns)\nfig.show()","8a230a77":"df['time'].describe()","d30321d4":"fig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['time'],\n    xbins=dict( # bins used for histogram\n        start=4,\n        end=285,\n        size=5\n    ),\n    marker_color='#e8ab60',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='Time Distribution',\n    xaxis_title_text='Time',\n    yaxis_title_text='Count', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    plot_bgcolor='#000000',\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n)\nfig.show()","4cfb35ad":"fig1=px.pie(df, values='diabetes',names='DEATH_EVENT', title='Diabetes VS Death Event',width=600, height=400)\nfig2=px.pie(df, values='DEATH_EVENT',names='diabetes',width=500, height=400)\n\nfig1.show()\n\nfig2.show()\n","147b22f2":"df.head()","1b56ac69":"fig1=px.pie(df, values='smoking',names='DEATH_EVENT', title='Smoking VS Death Event',width=600, height=400)\nfig2=px.pie(df, values='DEATH_EVENT',names='smoking',width=500, height=400)\n\nfig1.show()\n\nfig2.show()","89727acd":"fig1=px.pie(df, values='high_blood_pressure',names='DEATH_EVENT', title='High BP VS Death Event',width=600, height=400)\nfig2=px.pie(df, values='DEATH_EVENT',names='high_blood_pressure',width=500, height=400)\n\nfig1.show()\n\nfig2.show()","1c24afa2":"#We select the following features\n\nFeatures=['time','ejection_fraction','serum_creatinine','age']","57fc2783":"df.head()\nx=df.iloc[:,[0,4,7,11]].values\ny=df.iloc[:,-1].values","2f79d820":"df.head()","0baaf7ea":"print(x)","05955979":"#Splitting the data into train and test set\n\nfrom sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","5a47010e":"x_test","e712cc42":"x_test=np.nan_to_num(x_test)","eee23a3a":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","d0a2729f":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(max_iter=10000)\nclassifier.fit(x_train,y_train)","61581564":"# Predicting the value for the test set\n\ny_pred=classifier.predict(x_test)","3e7bbc94":"#Making Confusion matrix and predicting accuracy score\n\nmylist=[]\nfrom sklearn.metrics import confusion_matrix,accuracy_score\ncm=confusion_matrix(y_test,y_pred)\nac=accuracy_score(y_test,y_pred)\nprint(cm)\nprint(ac)","9f0327c2":"#Finding the optimum number of neighbors\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nlist1=[]\nfor neighbors in range(1,10):\n    classifier=KNeighborsClassifier(n_neighbors=neighbors,metric='minkowski')\n    classifier.fit(x_train,y_train)\n    y_pred=classifier.predict(x_test)\n    list1.append(accuracy_score(y_test,y_pred))\nplt.plot(list(range(1,10)),list1)\nplt.show()","876c142a":"classifier=KNeighborsClassifier(n_neighbors=7,metric='minkowski')\nclassifier.fit(x_train,y_train)","7ee0bf01":"y_pred=classifier.predict(x_test)","39536e63":"#Finding the confusion matrix and accuracy score\n\ncm=confusion_matrix(y_test,y_pred)\nac=accuracy_score(y_test,y_pred)\nprint(cm)\nprint(ac)","c5a28dfc":"from sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier()\nclassifier.fit(x_train,y_train)","c6a449c5":"y_pred=classifier.predict(x_test)\n\nmylist=[]\nfrom sklearn.metrics import confusion_matrix,accuracy_score\ncm=confusion_matrix(y_test,y_pred)\nac=accuracy_score(y_test,y_pred)\nprint(cm)\nprint(ac)","01516e2d":"# Objective\n\nThe aim of this project to collect clinical data and predict the possibilty of heart failure based on certain health parameters. \nAlong the way, certain data insights are also demonstrated to get a clear picture of the data before making predictions.\nIn the project, we will use 3 main ML models namely - Logistic Regression , KNN and Decistion Tree Classfier to determine the accuracy of the prediction","ec3f365e":"We find that there are two outliers in the above boxplot. Therefore we remove them.","8b008ceb":"# Initialization","37c8ba0d":"**It is also interesting to note that 59.4% of deaths related to heart failure occur to people without high blood pressure**","7882b9ff":"**We can see that the outliers have been removed**","c8cc54b0":"**From the given data we select only 4 factors - Age ,Time, Serum Creatinine and Ejection Fraction for our analysis**","0c7641a0":"3.Decision Tree Classifier","2e68845c":"**Using logistic regression, we get 85% accuracy**","f9ef8411":"**Checking for null values**","43068056":"**The first piechart shows that only 31.3% of the smokers die of heart failure**","97897df5":"**Plotting feature importances**","92151a62":"# Data Insights","650da564":"**Among the three models tried above, we find that the logistic regression gives us the best possible accuracy of 85%**","279f4cca":"No outliers in age","4b0fc75b":"Using Decsion Tree Classifier we get 83.33% Accuracy","9dc593f4":"1.Logistic Regression","a6a1312a":"**The above pie chart shows that 32% of people who have diabetes die of heart failure whereas 68% dont**\n**Also 58.3% of people who die of heart failure dont have diabetes**","28bae7df":"# Trying out different learning models","04e1cd53":"**Reading the file**","150df20d":"We get 83% accuracy with KNN","19775da2":"**2.K Nearest Neighbours**","bb341305":"# Training and testing the model","680c710f":"**Importing necessary packages**"}}