{"cell_type":{"886b46b1":"code","6d8918c6":"code","3b87a9d7":"code","52955b9f":"code","4ac27645":"code","1a23f79a":"code","8617fd39":"code","d98f2c3e":"code","50115d23":"code","32fc13a6":"code","38b11a8c":"code","d18c9c88":"code","db5452ad":"code","dff225d0":"code","492039d6":"code","076ed30e":"code","400d6301":"code","805281a5":"code","ed36cd0b":"code","17417e97":"code","23da7a85":"code","c3403e90":"code","4e494992":"code","43be2ac7":"code","25d14684":"markdown","8d20fb93":"markdown","78780270":"markdown","62c127b7":"markdown","166bacd6":"markdown","4a850783":"markdown","fb03e57e":"markdown","0969abce":"markdown","dd8525f4":"markdown","9213b159":"markdown","f30177eb":"markdown","219164a0":"markdown","43314768":"markdown","88ba35c6":"markdown","949fb594":"markdown","2450fbaf":"markdown"},"source":{"886b46b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d8918c6":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","3b87a9d7":"from fastai import *\nfrom fastai.vision.all import *\nimport fastai.vision as fv\nfrom fastai.metrics import error_rate\nimport os\nimport pandas as pd\nimport numpy as np\nfrom pathlib import Path\nimport shutil\nfrom IPython.display import clear_output","52955b9f":"torch.cuda.is_available()","4ac27645":"torch.backends.cudnn.enabled","1a23f79a":"x = '..\/input\/brain-mri-images-for-brain-tumor-detection\/'\npath = Path('.\/')\npath.ls()","8617fd39":"!apt-get install tree\nclear_output()","d98f2c3e":"# create new folders\n!mkdir TRAIN TEST TRAIN\/YES TRAIN\/NO TEST\/YES TEST\/NO\n!tree -d","50115d23":"IMG_PATH = '..\/input\/brain-mri-images-for-brain-tumor-detection\/brain_tumor_dataset\/'\n# split the data by train\/val\/test\nfor CLASS in os.listdir(IMG_PATH):\n    if not CLASS.startswith('.'):\n        IMG_NUM = len(os.listdir(IMG_PATH + CLASS))\n        for (n, FILE_NAME) in enumerate(os.listdir(IMG_PATH + CLASS)):\n            img = IMG_PATH + CLASS + '\/' + FILE_NAME\n            if n < 5:\n                shutil.copy(img, 'TEST\/' + CLASS.upper() + '\/' + FILE_NAME)\n                print('TEST\/' + CLASS.upper() + '\/' + FILE_NAME)\n            else:\n                shutil.copy(img, 'TRAIN\/'+ CLASS.upper() + '\/' + FILE_NAME)","32fc13a6":"train = get_image_files('.\/TRAIN')\nvalid = get_image_files('.\/TEST')\nprint(len(train))\nprint(len(valid))","38b11a8c":"np.random.seed(40)\ndata = ImageDataLoaders.from_folder(path, train = '.\/TRAIN', valid_pct=0.2, item_tfms=Resize(224), num_workers=4, batch_tfms=[Normalize.from_stats(*imagenet_stats)])","d18c9c88":"data.show_batch()","db5452ad":"print(data.vocab)\nprint(len(data.vocab))","dff225d0":"learn = cnn_learner(data, models.resnet50, metrics=[accuracy], model_dir = Path('..\/kaggle\/working'),path = Path(\".\"))","492039d6":"learn.lr_find()","076ed30e":"lr1 = 1e-3\nlr2 = 1e-1\nlearn.fit_one_cycle(10,slice(lr1,lr2))","400d6301":"lr = 1e-1\nlearn.fit_one_cycle(40,slice(lr))","805281a5":"learn.unfreeze()\n","ed36cd0b":"learn.lr_find()","17417e97":"#the model is overfitting due to the limited amount of data\nlearn.fit_one_cycle(10, slice(9e-7,7e-5),cbs=[ShowGraphCallback()])","23da7a85":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()","c3403e90":"img = fv.data.load_image('TEST\/NO\/N15.jpg')\nimg","4e494992":"img_tensor = vision.core.PILImage.create(np.array(img.convert('RGB')))\nprint(learn.predict(img_tensor)[0])","43be2ac7":"# learn.export(file = Path(\"\/kaggle\/working\/export.pkl\"))\n# learn.model_dir = \"\/kaggle\/working\"\n# learn.save(\"stage-1\",return_path=True)","25d14684":"<h2>Finding LR<\/h2>","8d20fb93":"<h2>Table of contents<\/h2>\n<h2>1. Introduction<\/h2>\n<ul>\n    <li><a href=\"#tumor\">What is a Brain Tumor?<\/a><\/li>\n    <li><a href=\"#resnet\">What is ResNet50?<\/a><\/li>\n<\/ul>","78780270":"<h2>Create Model<\/h2>\n<ul>\n<li>We now use a pre-trained ResNet50 Convolutional Neural Net model, and use transfer learning to learn weights of only the last layer of the network.<\/li>\n<li>Why Transfer learning? Because with transfer learning, you begin with an existing (trained) neural network used for image recognition \u2014 and then tweak it a bit (or more) here and there to train a model for your particular use case. And why do we do that? Training a reasonable neural network would mean needing approximately 300,000 image samples, and to achieve really good performance, we\u2019re going to need at least a million images.<\/li>\n<li>In our case, we have approximately 253+ images in our training set \u2014 you have one guess to decide if that would have been enough if were to train a neural net from scratch.<\/li>\n<\/ul>","62c127b7":"<h2>Introduction<\/h2><br>\n<div id=\"tumor\"><h3>What is A Brain Tumor?<\/h3><\/div>\n<p><\/p>\n<p>A brain tumor is a mass or growth of abnormal cells in your brain.<\/p>\n<p>\nMany different types of brain tumors exist. Some brain tumors are noncancerous (benign), and some brain tumors are cancerous (malignant). Brain tumors can begin in your brain (primary brain tumors), or cancer can begin in other parts of your body and spread to your brain as secondary (metastatic) brain tumors.\n<\/p>\n<p>\nHow quickly a brain tumor grows can vary greatly. The growth rate as well as the location of a brain tumor determines how it will affect the function of your nervous system.\n<\/p>\n<p>\nBrain tumor treatment options depend on the type of brain tumor you have, as well as its size and location.<\/p>\n<br>\n<div id=\"resnet\"><h3>What is A ResNet 50?<\/h3><\/div>\n<p><\/p>\n<center><img src=\"https:\/\/i.stack.imgur.com\/gI4zT.png\" width=600px alt=\"ResNet\"><\/center>\n<p><\/p>\n<p>\nResNet, short for Residual Networks is a classic neural network used as a backbone for many computer vision tasks. This model was the winner of ImageNet challenge in 2015. The fundamental breakthrough with ResNet was it allowed us to train extremely deep neural networks with 150+layers successfully. Prior to ResNet training very deep neural networks was difficult due to the problem of vanishing gradients.<\/p>\n<p><\/p>","166bacd6":"<h2>Checking For Cuda to use GPU Accelerator<\/h2>","4a850783":"<h2>Data loading for training model<\/h2>\n<ul>\n    <li>Decide validation percentage ( 0.2 => 20% )<\/li>\n    <li>Provide path for training data<\/li>\n    <li>Decide augmentations criteria (optional)<\/li>\n    <li>Decide image size (which is 224 in my case)<\/li>\n    <li>Test data can also be added but it's optional<\/li>\n<\/ul>","fb03e57e":"<h2>Objective<\/h2>\n<p>The aim of this kernal is to train an image classification model that can classify a given Brain MRI Scan Image as having a tumor or not. This kernal will use ResNET 50 on the Brain MRI Image Dataset.<\/p><br>\n<p>This notebook will be using the methods of <a href=\"https:\/\/docs.fast.ai\/\">FastAI v2<\/a><\/p>","0969abce":"<h2>Data Exploration<\/h2>\n","dd8525f4":"<h2>Setting up path for training data<\/h2>","9213b159":"<h2>Libraries Used<\/h2>\n<ul>\n    <li>Numpy<\/li>\n    <li>Pandas<\/li>\n    <li>FastAI<\/li>\n<\/ul>","f30177eb":"<h2>Prediction Using Trained Model<\/h2>","219164a0":"<h2>Training Model<\/h2>","43314768":"<h1><center style=\"color: red\"> Brain Tumor Detection using CNN <\/center><\/h1>\n<center><img src = \"https:\/\/pubs.rsna.org\/cms\/10.1148\/radiol.14140130\/asset\/images\/medium\/radiol.14140130.fig10a.gif\" alt=\"Brain Scan\"><\/center>\n","88ba35c6":"<h2>Interpret the results<\/h2>","949fb594":"<h2>Creating file paths and Splitting Dataset into Test and Train.<\/h2>","2450fbaf":"<h2>Hyper Parameter Tuning<\/h2>"}}