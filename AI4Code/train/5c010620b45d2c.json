{"cell_type":{"5d68bd03":"code","17c10194":"code","f90aa0d6":"code","5ca4eee4":"code","863a366e":"code","4881d107":"code","294a5e26":"code","82504d1a":"code","5286ba8b":"code","80e21681":"code","b84534f8":"code","f86d38e7":"code","dd8228d7":"code","86dde0ce":"code","1ea930bb":"code","b4e91d9f":"code","836068f9":"code","aa2853f3":"code","981ce7d2":"code","8727d9e3":"code","2018e73d":"code","68e9117d":"code","be5ddd0c":"code","5956b93b":"code","b63d916f":"code","0bd99714":"code","c3db1574":"code","2f99cb3b":"code","b3506ccc":"code","b3f158bc":"code","5b40f54a":"code","82b7a12d":"code","f0f0f253":"code","04e03d4d":"code","8e194f28":"code","f896b15b":"code","85feb847":"code","ce60c4e6":"code","9144a960":"code","2eecd20c":"code","091bbfb7":"code","8850b040":"code","816a368c":"code","bae926e6":"code","f593fd80":"code","df423b20":"code","3da337c7":"code","96b1889f":"code","58d02367":"code","0cdeb58e":"code","ea40329e":"code","8c7cf24d":"code","78353643":"code","5b2f7b5b":"code","3c58427b":"code","f132fee8":"code","bc7ccc3b":"code","15da7ac7":"code","911e84b0":"code","a7f536c5":"code","baad1323":"code","79848f75":"code","2c744e81":"code","8d21b6fb":"code","92b9c95c":"code","b128fbb8":"code","f588323e":"code","ade85bb7":"code","ea29402a":"code","70404ab5":"code","4c1193c0":"code","8a773b91":"code","b6e7617b":"code","654cd56a":"code","a9668063":"code","496f588f":"code","63e0a8ff":"code","e15f32a4":"code","5a798513":"code","f1d402fe":"markdown","9b8274b0":"markdown","4b9b9d54":"markdown","0ca77125":"markdown"},"source":{"5d68bd03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17c10194":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f90aa0d6":"train_data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","5ca4eee4":"dtn=train_data.copy()\ndts=test_data.copy()","863a366e":"dtn.head()","4881d107":"dts.head()","294a5e26":"print(dtn.shape)\nprint(dts.shape)","82504d1a":"dtn.info()","5286ba8b":"dts.info()","80e21681":"#1. train dataset has 3 float type column, 35 int type column and 43 object type column.\n#2. test dataset has 11 float type column, 26 int type column and 43 object type column.","b84534f8":"pd.set_option(\"display.max_rows\",None)","f86d38e7":"dtn.isnull().sum()","dd8228d7":"dts.isnull().sum()","86dde0ce":"for i in dtn.columns:\n    if dtn[i].dtypes=='object':\n        print(dtn[i].unique())\n        print(dtn[i].value_counts())","1ea930bb":"for i in dts.columns:\n    if dts[i].dtypes=='object':\n        print(dts[i].unique())\n        print(dts[i].value_counts())","b4e91d9f":"dtn.describe()","836068f9":"dts.describe()","aa2853f3":"dtn.drop(columns=['Id','Alley','Street','Utilities','FireplaceQu','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndts.drop(columns=['Id','Alley','Street','Utilities','FireplaceQu','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)","981ce7d2":"dtn.head()","8727d9e3":"dts.head()","2018e73d":"# train dataset\nfor i in dtn.columns:\n    if dtn[i].dtypes=='object':\n        plt.figure(figsize=(20,8))\n        sns.countplot(dtn[i])\n        plt.show()","68e9117d":"for i in dtn.columns:\n    if dtn[i].dtypes!='object':\n        plt.figure(figsize=(20,8))\n        sns.distplot(dtn[i])\n        plt.show()","be5ddd0c":"for i in dts.columns:\n    if dts[i].dtypes=='object':\n        plt.figure(figsize=(20,8))\n        sns.countplot(dts[i])\n        plt.show()","5956b93b":"for i in dts.columns:\n    if dts[i].dtypes!='object':\n        plt.figure(figsize=(20,8))\n        sns.distplot(dts[i])\n        plt.show()","b63d916f":"dtn.drop(columns=['3SsnPorch','PoolArea','ScreenPorch','MiscVal','EnclosedPorch'],axis=1,inplace=True)\ndts.drop(columns=['3SsnPorch','PoolArea','ScreenPorch','MiscVal','EnclosedPorch'],axis=1,inplace=True)","0bd99714":"ls=['LotFrontage','LotArea','YearBuilt','YearRemodAdd','MasVnrArea','BsmtFinSF1','BsmtUnfSF','TotalBsmtSF','1stFlrSF',\n    '2ndFlrSF','GrLivArea','GarageYrBlt','GarageArea','WoodDeckSF','OpenPorchSF','YrSold']\n\nfor i in ls:\n    sns.scatterplot(x=dtn[i],y='SalePrice',data=dtn)\n    plt.show()","c3db1574":"# filling null values\n# train data\ndtn['LotFrontage']=dtn['LotFrontage'].fillna(dtn['LotFrontage'].median())\ndtn['BsmtQual']=dtn['BsmtQual'].fillna(dtn['BsmtQual'].mode()[0])\ndtn['BsmtCond']=dtn['BsmtCond'].fillna(dtn['BsmtCond'].mode()[0])\ndtn['BsmtExposure']=dtn['BsmtExposure'].fillna(dtn['BsmtExposure'].mode()[0])\ndtn['BsmtFinType1']=dtn['BsmtFinType1'].fillna(dtn['BsmtFinType1'].mode()[0])\ndtn['BsmtFinType2']=dtn['BsmtFinType2'].fillna(dtn['BsmtFinType2'].mode()[0])\ndtn['GarageType']=dtn['GarageType'].fillna(dtn['GarageType'].mode()[0])\ndtn['GarageYrBlt']=dtn['GarageYrBlt'].fillna(dtn['GarageYrBlt'].mode()[0])\ndtn['GarageFinish']=dtn['GarageFinish'].fillna(dtn['GarageFinish'].mode()[0])\ndtn['GarageQual']=dtn['GarageQual'].fillna(dtn['GarageQual'].mode()[0])\ndtn['GarageCond']=dtn['GarageCond'].fillna(dtn['GarageCond'].mode()[0])\ndtn['MasVnrType']=dtn['MasVnrType'].fillna(dtn['MasVnrType'].mode()[0])\ndtn['MasVnrArea']=dtn['MasVnrArea'].fillna(dtn['MasVnrArea'].median())\ndtn['Electrical']=dtn['Electrical'].fillna(dtn['Electrical'].mode()[0])\n","2f99cb3b":"# filling null values\n# test data\ndts['LotFrontage']=dts['LotFrontage'].fillna(dts['LotFrontage'].median())\ndts['BsmtQual']=dts['BsmtQual'].fillna(dts['BsmtQual'].mode()[0])\ndts['BsmtCond']=dts['BsmtCond'].fillna(dts['BsmtCond'].mode()[0])\ndts['BsmtExposure']=dts['BsmtExposure'].fillna(dts['BsmtExposure'].mode()[0])\ndts['BsmtFinType1']=dts['BsmtFinType1'].fillna(dts['BsmtFinType1'].mode()[0])\ndts['BsmtFinType2']=dts['BsmtFinType2'].fillna(dts['BsmtFinType2'].mode()[0])\ndts['GarageType']=dts['GarageType'].fillna(dts['GarageType'].mode()[0])\ndts['GarageYrBlt']=dts['GarageYrBlt'].fillna(dts['GarageYrBlt'].mode()[0])\ndts['GarageFinish']=dts['GarageFinish'].fillna(dts['GarageFinish'].mode()[0])\ndts['GarageQual']=dts['GarageQual'].fillna(dts['GarageQual'].mode()[0])\ndts['GarageCond']=dts['GarageCond'].fillna(dts['GarageCond'].mode()[0])\ndts['MasVnrType']=dts['MasVnrType'].fillna(dts['MasVnrType'].mode()[0])\ndts['MasVnrArea']=dts['MasVnrArea'].fillna(dts['MasVnrArea'].median())\ndts['MSZoning']=dts['MSZoning'].fillna(dts['MSZoning'].mode()[0])\ndts['Exterior1st']=dts['Exterior1st'].fillna(dts['Exterior1st'].mode()[0])\ndts['Exterior2nd']=dts['Exterior2nd'].fillna(dts['Exterior2nd'].mode()[0])\ndts['BsmtFinSF1']=dts['BsmtFinSF1'].fillna(dts['BsmtFinSF1'].median())\ndts['BsmtFinSF2']=dts['BsmtFinSF2'].fillna(dts['BsmtFinSF2'].median())\ndts['BsmtUnfSF']=dts['BsmtUnfSF'].fillna(dts['BsmtUnfSF'].median())\ndts['TotalBsmtSF']=dts['TotalBsmtSF'].fillna(dts['TotalBsmtSF'].mean())\ndts['BsmtFullBath']=dts['BsmtFullBath'].fillna(dts['BsmtFullBath'].mode()[0])\ndts['BsmtHalfBath']=dts['BsmtHalfBath'].fillna(dts['BsmtHalfBath'].mode()[0])\ndts['KitchenQual']=dts['KitchenQual'].fillna(dts['KitchenQual'].mode()[0])\ndts['Functional']=dts['Functional'].fillna(dts['Functional'].mode()[0])\ndts['GarageCars']=dts['GarageCars'].fillna(dts['GarageCars'].mode()[0])\ndts['GarageArea']=dts['GarageArea'].fillna(dts['GarageArea'].mean())\ndts['SaleType']=dts['SaleType'].fillna(dts['SaleType'].mode()[0])","b3506ccc":"dtn.isnull().sum()","b3f158bc":"dts.isnull().sum()","5b40f54a":"dtn.shape","82b7a12d":"dts.shape","f0f0f253":"for i in dtn.columns:\n    if dtn[i].dtypes!='object':\n        sns.boxplot(dtn[i])\n        plt.show()","04e03d4d":"dtn.skew()","8e194f28":"dts.skew()","f896b15b":"from sklearn.preprocessing import PowerTransformer\npt=PowerTransformer(method='yeo-johnson',standardize=True)","85feb847":"# Removing the skewness only from the continuous columns.\n\nls=['MSSubClass','LotFrontage','LotArea','MasVnrArea','BsmtUnfSF','BsmtFinSF1','BsmtFinSF2',\n    'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','WoodDeckSF',\n    'OpenPorchSF']\n\npt=PowerTransformer(method='yeo-johnson',standardize=True)\nfor i in ls:\n    dtn[i]=pt.fit_transform(dtn[i].values.reshape(-1,1))\n    dts[i]=pt.fit_transform(dts[i].values.reshape(-1,1))","ce60c4e6":"dtn.skew()","9144a960":"dts.skew()","2eecd20c":"# converting years into number of years\n\ndtn['YearBuilt']=2021-dtn['YearBuilt']\ndtn['YearRemodAdd']=2021-dtn['YearRemodAdd']\ndtn['GarageYrBlt']=2021-dtn['GarageYrBlt']\ndtn['YrSold']=2021-dtn['YrSold']","091bbfb7":"# converting years into number of years\n\ndts['YearBuilt']=2021-dts['YearBuilt']\ndts['YearRemodAdd']=2021-dts['YearRemodAdd']\ndts['GarageYrBlt']=2021-dts['GarageYrBlt']\ndts['YrSold']=2021-dts['YrSold']","8850b040":"dtn.head()","816a368c":"dts.head()","bae926e6":"plt.figure(figsize=(22,10))\nsns.heatmap(dtn.corr(),annot=True)","f593fd80":"plt.figure(figsize=(22,10))\nsns.heatmap(dts.corr(),annot=True)","df423b20":"dtn.drop(columns=['1stFlrSF','GarageArea','GarageYrBlt','TotRmsAbvGrd'],axis=1,inplace=True)\ndts.drop(columns=['1stFlrSF','GarageArea','GarageYrBlt','TotRmsAbvGrd'],axis=1,inplace=True)","3da337c7":"# Encoding the categorical columns\n\nfrom sklearn.preprocessing import OrdinalEncoder\noe=OrdinalEncoder()","96b1889f":"lst=['MSZoning','LotShape','LandContour','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType',\n    'HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation',\n    'BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical',\n    'KitchenQual','Functional','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','SaleType','SaleCondition']\n\nfor i in lst:\n    dtn[i]=oe.fit_transform(dtn[i].values.reshape(-1,1))\n    dts[i]=oe.fit_transform(dts[i].values.reshape(-1,1))","58d02367":"# Spliting the data\n\nX=dtn.drop('SalePrice',axis=1)\ny=dtn['SalePrice'].copy()","0cdeb58e":"# Scaling\n\nfrom sklearn.preprocessing import MinMaxScaler\nmm=MinMaxScaler()","ea40329e":"x=mm.fit_transform(X)\nx=pd.DataFrame(x,columns=X.columns)\nx.head()","8c7cf24d":"sc_dts=mm.fit_transform(dts)\nsc_dts=pd.DataFrame(sc_dts,columns=dts.columns)\nsc_dts.head()","78353643":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.3,random_state=40)","5b2f7b5b":"print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)","3c58427b":"# Model Training\n\nfrom sklearn.model_selection import cross_val_score","f132fee8":"lr=LinearRegression()","bc7ccc3b":"lr.fit(x_train,y_train)\npredlr=lr.predict(x_test)\nprint(r2_score(y_test,predlr))\nprint(np.sqrt(mean_squared_error(y_test,predlr)))\ncrs=cross_val_score(lr,x,y,cv=10)\nprint(crs.mean())","15da7ac7":"# Regularization\n\nfrom sklearn.linear_model import Lasso, Ridge","911e84b0":"lss=Lasso()\nrg=Ridge()","a7f536c5":"lss.fit(x_train,y_train)\npredls=lss.predict(x_test)\nprint(r2_score(y_test,predls))\nprint(np.sqrt(mean_squared_error(y_test,predls)))\ncrs=cross_val_score(lss,x,y,cv=10)\nprint(crs.mean())","baad1323":"rg.fit(x_train,y_train)\npredrg=rg.predict(x_test)\nprint(r2_score(y_test,predrg))\nprint(np.sqrt(mean_squared_error(y_test,predrg)))\ncrs=cross_val_score(rg,x,y,cv=10)\nprint(crs.mean())","79848f75":"# Hyperparameter Tuning using GridSearchCV\nfrom sklearn.model_selection import GridSearchCV","2c744e81":"# lasso\n\npar={'alpha':[0.0001,0.001,0.01,0.1,1,2,5,10,11]}\ngcv=GridSearchCV(lss,par,cv=10)\ngcv.fit(x_train,y_train)","8d21b6fb":"gcv.best_params_","92b9c95c":"# model again with new parameter \n\nls=Lasso(alpha=11)\nls.fit(x_train,y_train)\npredls=ls.predict(x_test)\nprint(r2_score(y_test,predls))\nprint(np.sqrt(mean_squared_error(y_test,predls)))\ncrs=cross_val_score(ls,x,y,cv=10)\nprint(crs.mean())","b128fbb8":"# Ridge\n\npar={'alpha':[0.0001,0.001,0.01,0.1,1,2,5,10,11]}\ngcv=GridSearchCV(rg,par,cv=10)\ngcv.fit(x_train,y_train)","f588323e":"gcv.best_params_","ade85bb7":"rdg=Ridge(alpha=2)\nrdg.fit(x_train,y_train)\npredrdg=rdg.predict(x_test)\nprint(r2_score(y_test,predrdg))\nprint(np.sqrt(mean_squared_error(y_test,predrdg)))\ncrs=cross_val_score(rdg,x,y,cv=10)\nprint(crs.mean())","ea29402a":"# Saving the Final Model\n\nimport joblib","70404ab5":"joblib.dump(rdg,'House_Price_rdg.obj')","4c1193c0":"# loading the model for predicting the test data.\nmodel=joblib.load('House_Price_rdg.obj')","8a773b91":"pred=model.predict(sc_dts)","b6e7617b":"Final_Result=pd.DataFrame({\"Id\":test_data['Id'],'SalePrice':pred})\nFinal_Result.head()","654cd56a":"Final_Result.to_csv(\"submission.csv\")","a9668063":"result=pd.read_csv(\".\/submission.csv\")","496f588f":"result.head()","63e0a8ff":"result.drop(\"Unnamed: 0\",axis=1,inplace=True)","e15f32a4":"result.head()","5a798513":"result.to_csv(\"submission.csv\",index=False)","f1d402fe":"we try to remove the outliers but we lost data more than 25% so we kept it as it is.","9b8274b0":"Observations --\n\n1. if LotArea increases from 0 to 20,000, SalePrice increases but after that it become less    effective on SalePrice.\n2. Much LotArea affect the SalePrice negatively.\n3. BsmtUnfSF show somewhat constant behavior with saleprice till 1000 after that it has        positive relation with saleprice.\n4. GrLivArea is very much positively related to saleprice.\n5. Later the house bulit, price tended to increase a lot.\n6. GarageYrBlt is also affect the saleprice positively.\n7. There is one more point that Garage are more important feature than basements.","4b9b9d54":"1. There are some columns which are highly collinear to each other that are given as -       TotalBsmt with 1stFlrSF, GarageCars with GarageArea, GarageYrBlt with YearBuilt, TotRmsAbvGrd with GrLivArea, TotRmsAbvGrd with BedroomAbvGr.\n2. we can drop one of them so we are going to drop 1stFlrSF, GarageArea, GarageYrBlt and TotRmsAbvGrd.","0ca77125":"From all above Ridge worked well so our final model will be Ridge."}}