{"cell_type":{"d5d90f95":"code","cb251481":"code","f50f1d94":"code","7fd53191":"code","60c31856":"code","638b9b95":"code","7599a992":"code","a5927ae6":"code","46be5de8":"code","20b988c1":"code","bf635060":"code","7a5bc5a9":"code","9043dc15":"code","8b1436fc":"code","991bc577":"code","75eea235":"code","6c26a6a5":"code","622fb700":"code","57db8006":"code","43952cb7":"code","e1a90a7a":"code","22b9e704":"code","f90316bb":"code","cc2e8356":"code","fae7c4c9":"markdown","33006d56":"markdown","34554dd3":"markdown","33e9e18d":"markdown","9137c2d2":"markdown","85826b5a":"markdown","777a1f3a":"markdown","0c6ae107":"markdown","bd133209":"markdown","f5933cbc":"markdown","ef0b5576":"markdown","e62b3e4e":"markdown","e8a7a9ca":"markdown","ff9c4154":"markdown","80936df8":"markdown","6242b826":"markdown"},"source":{"d5d90f95":"# Data handling \nimport pandas as pd \nimport numpy as np \n\n# Preprocessing \nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.model_selection import train_test_split\nimport category_encoders as ce\nfrom sklearn.impute import KNNImputer \nfrom sklearn.impute import SimpleImputer\n\n# Models\nfrom lightgbm import LGBMRegressor\n\n# Metrics \nfrom sklearn.metrics import mean_squared_error","cb251481":"# import data\ndata_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndata_train.head()","f50f1d94":"data_train.info()","7fd53191":"data_train.describe()","60c31856":"# Defining response and explanatory variables \ny = data_train[\"SalePrice\"]\nX = data_train.drop(columns=[\"SalePrice\"])\n\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Splitting features into numeric and categorical variables \nX_train_numeric = X_train.select_dtypes(exclude=\"object\")\nX_test_numeric = X_test.select_dtypes(exclude=\"object\")\nX_train_categorical = X_train.select_dtypes(include=\"object\")\nX_test_categorical = X_test.select_dtypes(include=\"object\")","638b9b95":"X_train_categorical[\"Alley\"].fillna(\"No Access\", inplace=True)\nX_test_categorical[\"Alley\"].fillna(\"No Access\", inplace=True)\nX_train_categorical[\"BsmtQual\"].fillna(\"No Basement\", inplace=True)\nX_test_categorical[\"BsmtQual\"].fillna(\"No Basement\", inplace=True)\nX_train_categorical[\"BsmtCond\"].fillna(\"No Basement\", inplace=True)\nX_test_categorical[\"BsmtCond\"].fillna(\"No Basement\", inplace=True)\nX_train_categorical[\"BsmtExposure\"].fillna(\"No Basement\", inplace=True)\nX_test_categorical[\"BsmtExposure\"].fillna(\"No Basement\", inplace=True)\nX_train_categorical[\"BsmtFinType1\"].fillna(\"No Basement\", inplace=True)\nX_test_categorical[\"BsmtFinType1\"].fillna(\"No Basement\", inplace=True)\nX_train_categorical[\"BsmtFinType2\"].fillna(\"No Basement\", inplace=True)\nX_test_categorical[\"BsmtFinType2\"].fillna(\"No Basement\", inplace=True)\nX_train_categorical[\"FireplaceQu\"].fillna(\"No Fireplace\", inplace=True)\nX_test_categorical[\"FireplaceQu\"].fillna(\"No Fireplace\", inplace=True)\nX_train_categorical[\"GarageType\"].fillna(\"No Garage\", inplace=True)\nX_test_categorical[\"GarageType\"].fillna(\"No Garage\", inplace=True)\nX_train_categorical[\"GarageFinish\"].fillna(\"No Garage\", inplace=True)\nX_test_categorical[\"GarageFinish\"].fillna(\"No Garage\", inplace=True)\nX_train_categorical[\"GarageQual\"].fillna(\"No Garage\", inplace=True)\nX_test_categorical[\"GarageQual\"].fillna(\"No Garage\", inplace=True)\nX_train_categorical[\"GarageCond\"].fillna(\"No Garage\", inplace=True)\nX_test_categorical[\"GarageCond\"].fillna(\"No Garage\", inplace=True)\nX_train_categorical[\"PoolQC\"].fillna(\"No Pool\", inplace=True)\nX_test_categorical[\"PoolQC\"].fillna(\"No Pool\", inplace=True)\nX_train_categorical[\"Fence\"].fillna(\"No Fence\", inplace=True)\nX_test_categorical[\"Fence\"].fillna(\"No Fence\", inplace=True)\nX_train_categorical[\"MiscFeature\"].fillna(\"None\", inplace=True)\nX_test_categorical[\"MiscFeature\"].fillna(\"None\", inplace=True)","7599a992":"# Split Nominal and Ordinal Categorical Variables \nX_train_categorical_nominal = X_train_categorical.loc[:, [\"MSZoning\", \"Street\", \"Alley\", \"LotConfig\", \"Neighborhood\", \n                                                           \"Condition1\", \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \n                                                           \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"MasVnrType\", \"Foundation\", \n                                                           \"Heating\", \"CentralAir\", \"Electrical\", \"Functional\", \"GarageType\", \n                                                           \"PavedDrive\", \"MiscFeature\", \"SaleType\", \"SaleCondition\"]]\nX_test_categorical_nominal = X_test_categorical.loc[:, [\"MSZoning\", \"Street\", \"Alley\", \"LotConfig\", \"Neighborhood\", \n                                                           \"Condition1\", \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \n                                                           \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"MasVnrType\", \"Foundation\", \n                                                           \"Heating\", \"CentralAir\", \"Electrical\", \"Functional\", \"GarageType\", \n                                                           \"PavedDrive\", \"MiscFeature\", \"SaleType\", \"SaleCondition\"]]\nX_train_categorical_ordinal = X_train_categorical.loc[:, [\"LotShape\", \"LandContour\", \"Utilities\", \"LandSlope\", \"ExterQual\", \n                                                          \"ExterCond\",\"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \n                                                          \"BsmtFinType2\",\"HeatingQC\", \"KitchenQual\", \"FireplaceQu\", \"GarageFinish\", \n                                                          \"GarageQual\",\"GarageCond\", \"PoolQC\",\"Fence\"]]\nX_test_categorical_ordinal = X_test_categorical.loc[:, [\"LotShape\", \"LandContour\", \"Utilities\", \"LandSlope\", \"ExterQual\", \n                                                          \"ExterCond\",\"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \n                                                          \"BsmtFinType2\",\"HeatingQC\", \"KitchenQual\", \"FireplaceQu\", \"GarageFinish\", \n                                                          \"GarageQual\",\"GarageCond\", \"PoolQC\",\"Fence\"]]\n\n# Binary encoding for nominal variables \nobject_cols = X_train_categorical_nominal.columns\nlow_cardinality_cols = [col for col in object_cols if X_train_categorical_nominal[col].nunique() < 10]\nX_train_categorical_lownominal = X_train_categorical_nominal.loc[:, low_cardinality_cols]\nX_test_categorical_lownominal = X_test_categorical_nominal.loc[:, low_cardinality_cols]\nbinary_encoder = ce.BinaryEncoder(cols=X_train_categorical_lownominal.columns, return_df=True)\nX_train_categorical_nominal_encoded = binary_encoder.fit_transform(X_train_categorical_lownominal)\nX_test_categorical_nominal_encoded = binary_encoder.transform(X_test_categorical_lownominal)","a5927ae6":"# Ordinal Encoding for ordinal variables \n## Defining categories\nlotshape_categories = {\"Reg\": 0, \"IR1\": 1, \"IR2\": 2, \"IR3\": 3}\nlandcontour_categories = {\"Lvl\": 0, \"Bnk\": 1, \"HLS\": 2, \"Low\": 3}\nutilities_categories = {\"ELO\": 0, \"NoSeWa\": 1, \"NoSewr\": 2, \"AllPub\": 3}\nlandslope_categories = {\"Gtl\": 0, \"Mod\": 1, \"Sev\": 2}\nexterqual_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nextercond_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nbsmtqual_categories = {\"No Basement\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\nbsmtcond_categories = {\"No Basement\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\nbsmtexposure_categories = {\"No Basement\": 0, \"No\": 1, \"Mn\": 2, \"Av\": 3, \"Gd\": 4}\nbsmtfintype1_categories = {\"No Basement\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6}\nbsmtfintype2_categories = {\"No Basement\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6}\nheatingqc_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nkitchenqual_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nfireplacequal_categories = {\"No Fireplace\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\ngaragefinish_categories = {\"No Garage\": 0, \"Unf\": 1, \"RFn\": 2, \"Fin\": 3}\ngaragequal_categories = {\"No Garage\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\ngaragecond_categories = {\"No Garage\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\npoolqc_categories = {\"No Pool\": 0, \"Fa\": 1, \"Gd\": 2, \"Ex\": 3}\nfence_categories = {\"No Fence\": 0, \"MnWw\": 1, \"GdWo\": 2, \"MnPrv\": 3, \"GdPrv\": 4}\n\n# Ordinal encoding for these ordinal categorical variables \nordinal_encoder = ce.OrdinalEncoder(mapping = [{\"col\":\"LotShape\",\"mapping\":lotshape_categories}, \n                                       {\"col\":\"LandContour\", \"mapping\":landcontour_categories}, \n                                       {\"col\":\"Utilities\", \"mapping\":utilities_categories}, \n                                       {\"col\":\"LandSlope\", \"mapping\":landslope_categories},\n                                       {\"col\":\"ExterQual\", \"mapping\":exterqual_categories}, \n                                       {\"col\":\"ExterCond\", \"mapping\":extercond_categories}, \n                                       {\"col\":\"BsmtQual\", \"mapping\":bsmtqual_categories}, \n                                       {\"col\":\"BsmtCond\", \"mapping\":bsmtcond_categories},\n                                       {\"col\":\"BsmtExposure\", \"mapping\":bsmtexposure_categories}, \n                                       {\"col\":\"BsmtFinType1\", \"mapping\":bsmtfintype1_categories}, \n                                       {\"col\":\"BsmtFinType2\", \"mapping\":bsmtfintype2_categories}, \n                                       {\"col\":\"HeatingQC\", \"mapping\":heatingqc_categories}, \n                                       {\"col\":\"KitchenQual\", \"mapping\":kitchenqual_categories}, \n                                       {\"col\":\"FireplaceQu\", \"mapping\":fireplacequal_categories},\n                                       {\"col\":\"GarageFinish\", \"mapping\":garagefinish_categories}, \n                                       {\"col\":\"GarageQual\", \"mapping\":garagequal_categories}, \n                                       {\"col\":\"GarageCond\", \"mapping\":garagecond_categories},\n                                       {\"col\":\"PoolQC\", \"mapping\":poolqc_categories}, \n                                       {\"col\":\"Fence\", \"mapping\":fence_categories}],\n                                    return_df=True)\n\nX_train_categorical_ordinal_encoded = ordinal_encoder.fit_transform(X_train_categorical_ordinal)\nX_test_categorical_ordinal_encoded = ordinal_encoder.transform(X_test_categorical_ordinal)","46be5de8":"# Combining both ordinal and nominal categorical variables \nX_train_categorical_encoded = pd.concat([X_train_categorical_nominal_encoded, X_train_categorical_ordinal_encoded], axis=1)\nX_test_categorical_encoded = pd.concat([X_test_categorical_nominal_encoded, X_test_categorical_ordinal_encoded], axis=1)","20b988c1":"# KNNImputer to impute missing values\nimputer = KNNImputer(n_neighbors=10)\nmissing_cols = [\"LotFrontage\", \"MasVnrArea\", \"GarageYrBuilt\"] \nX_train_numeric_imputed = imputer.fit_transform(X_train_numeric)\nX_test_numeric_imputed = imputer.transform(X_test_numeric)\n\nX_train_numeric_processed = pd.DataFrame(X_train_numeric_imputed, columns=X_train_numeric.columns, index=X_train.index)\nX_test_numeric_processed = pd.DataFrame(X_test_numeric_imputed, columns=X_test_numeric.columns, index=X_test.index)","bf635060":"# Combine dataframes\nX_train = pd.concat([X_train_numeric_processed, X_train_categorical_encoded], axis=1)\nX_test = pd.concat([X_test_numeric_processed, X_test_categorical_encoded], axis=1)","7a5bc5a9":"lof = LocalOutlierFactor(n_neighbors=5)\nyhat = pd.DataFrame(lof.fit_predict(X_train), columns=[\"outliers_d\"], index=X_train.index)\noutliers_index = yhat[yhat[\"outliers_d\"]==-1].index\noutliers_index","9043dc15":"X_train.drop(outliers_index, inplace=True)\ny_train.drop(outliers_index, inplace=True)","8b1436fc":"# Define function to calculate RMSE\ndef calculate_rmse(y_test, predictions): \n    y_test_log = np.log(y_test, where=(y_test!=0))\n    predictions_log = np.log(predictions, where=(predictions!=0))\n    mse = mean_squared_error(y_test_log, predictions_log)\n    rmse = np.sqrt(mse)\n    return rmse\n\n# Log targets\ny_train_log = np.log(y_train)\ny_test_log = np.log(y_test)","991bc577":"# Initial model \nmodel = LGBMRegressor(random_state=0)\nmodel.fit(X_train, y_train_log)\npredictions = model.predict(X_test)\nrmse = calculate_rmse(y_test_log, predictions)\nprint(\"RMSE: {0:0.5f}\".format(rmse))","75eea235":"# 1st model improvement \nfor num_leaves in range(20, 31, 1): \n    model_1 = LGBMRegressor(num_leaves=num_leaves, random_state=0)\n    model_1.fit(X_train, y_train_log)\n    predictions_1 = model_1.predict(X_test)\n    rmse_1 = calculate_rmse(y_test_log, predictions_1)\n    print(\"num_leaves: {0}, RMSE: {1:0.5f}\".format(num_leaves, rmse_1))","6c26a6a5":"# 2nd model improvement \nfor max_depth in range(1, 11, 1): \n    model_2 = LGBMRegressor(max_depth=max_depth, num_leaves=25, random_state=0)\n    model_2.fit(X_train, y_train_log)\n    predictions_2 = model_2.predict(X_test)\n    rmse_2 = calculate_rmse(y_test_log, predictions_2)\n    print(\"max_depth: {0}, RMSE: {1:0.5f}\".format(max_depth, rmse_2))","622fb700":"# 3rd model improvement \nfor n in range(400, 510, 10): \n    model_3 = LGBMRegressor(n_estimators=n, max_depth=8, num_leaves=25, random_state=0)\n    model_3.fit(X_train, y_train_log)\n    predictions_3 = model_3.predict(X_test)\n    rmse_3 = calculate_rmse(y_test_log, predictions_3)\n    print(\"n_estimators: {0}, RMSE: {1:0.5f}\".format(n, rmse_3))","57db8006":"# 4th model improvement \nfor lamb in range(1, 11, 1): \n    lamb = lamb \/ 100\n    model_4 = LGBMRegressor(reg_lambda=lamb, n_estimators=420, max_depth=8, \n                           num_leaves=25, random_state=0)\n    model_4.fit(X_train, y_train_log)\n    predictions_4 = model_4.predict(X_test)\n    rmse_4 = calculate_rmse(y_test_log, predictions_4)\n    print(\"lambda: {0}, RMSE: {1:0.5f}\".format(lamb, rmse_4))","43952cb7":"# Import test data\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest.head()","e1a90a7a":"# Data Cleaning\n\n# Splitting features into numeric and categorical \ntest_numeric = test.select_dtypes(exclude=\"object\")\ntest_categorical = test.select_dtypes(include=\"object\")\n\n# Categorical \n## Missing values\ntest_categorical[\"Alley\"].fillna(\"No Access\", inplace=True)\ntest_categorical[\"BsmtQual\"].fillna(\"No Basement\", inplace=True)\ntest_categorical[\"BsmtCond\"].fillna(\"No Basement\", inplace=True)\ntest_categorical[\"BsmtExposure\"].fillna(\"No Basement\", inplace=True)\ntest_categorical[\"BsmtFinType1\"].fillna(\"No Basement\", inplace=True)\ntest_categorical[\"BsmtFinType2\"].fillna(\"No Basement\", inplace=True)\ntest_categorical[\"FireplaceQu\"].fillna(\"No Fireplace\", inplace=True)\ntest_categorical[\"GarageType\"].fillna(\"No Garage\", inplace=True)\ntest_categorical[\"GarageFinish\"].fillna(\"No Garage\", inplace=True)\ntest_categorical[\"GarageQual\"].fillna(\"No Garage\", inplace=True)\ntest_categorical[\"GarageCond\"].fillna(\"No Garage\", inplace=True)\ntest_categorical[\"PoolQC\"].fillna(\"No Pool\", inplace=True)\ntest_categorical[\"Fence\"].fillna(\"No Fence\", inplace=True)\ntest_categorical[\"MiscFeature\"].fillna(\"None\", inplace=True)\n\n## Encoding\n### Split Nominal and Ordinal Categorical Variables \ntest_categorical_nominal = test_categorical.loc[:, [\"MSZoning\", \"Street\", \"Alley\", \"LotConfig\", \"Neighborhood\", \"Condition1\", \n                                              \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \n                                              \"Exterior2nd\", \"MasVnrType\", \"Foundation\", \"Heating\", \"CentralAir\", \"Electrical\", \n                                              \"Functional\", \"GarageType\", \"PavedDrive\", \"MiscFeature\", \"SaleType\", \"SaleCondition\"]]\ntest_categorical_ordinal = test_categorical.loc[:, [\"LotShape\", \"LandContour\", \"Utilities\", \"LandSlope\", \"ExterQual\", \"ExterCond\", \n                                     \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"HeatingQC\", \n                                      \"KitchenQual\", \"FireplaceQu\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PoolQC\", \n                                     \"Fence\"]]\n### Binary encoding for nominal variables \nobject_cols = test_categorical_nominal.columns\nlow_cardinality_cols = [col for col in object_cols if test_categorical_nominal[col].nunique() < 10]\ntest_categorical_lownominal = test_categorical_nominal.loc[:, low_cardinality_cols]\ntest_categorical_nominal_encoded = binary_encoder.transform(test_categorical_lownominal)\n### Ordinal Encoding for ordinal variables \n#### Defining categories\nlotshape_categories = {\"Reg\": 0, \"IR1\": 1, \"IR2\": 2, \"IR3\": 3}\nlandcontour_categories = {\"Lvl\": 0, \"Bnk\": 1, \"HLS\": 2, \"Low\": 3}\nutilities_categories = {\"ELO\": 0, \"NoSeWa\": 1, \"NoSewr\": 2, \"AllPub\": 3}\nlandslope_categories = {\"Gtl\": 0, \"Mod\": 1, \"Sev\": 2}\nexterqual_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nextercond_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nbsmtqual_categories = {\"No Basement\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\nbsmtcond_categories = {\"No Basement\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\nbsmtexposure_categories = {\"No Basement\": 0, \"No\": 1, \"Mn\": 2, \"Av\": 3, \"Gd\": 4}\nbsmtfintype1_categories = {\"No Basement\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6}\nbsmtfintype2_categories = {\"No Basement\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6}\nheatingqc_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nkitchenqual_categories = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\nfireplacequal_categories = {\"No Fireplace\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\ngaragefinish_categories = {\"No Garage\": 0, \"Unf\": 1, \"RFn\": 2, \"Fin\": 3}\ngaragequal_categories = {\"No Garage\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\ngaragecond_categories = {\"No Garage\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\npoolqc_categories = {\"No Pool\": 0, \"Fa\": 1, \"Gd\": 2, \"Ex\": 3}\nfence_categories = {\"No Fence\": 0, \"MnWw\": 1, \"GdWo\": 2, \"MnPrv\": 3, \"GdPrv\": 4}\n\n#### Ordinal encoding for these ordinal categorical variables \ntest_categorical_ordinal_encoded = ordinal_encoder.transform(test_categorical_ordinal)\n\n### Combining both ordinal and nominal categorical variables \ntest_categorical_encoded = pd.concat([test_categorical_nominal_encoded, test_categorical_ordinal_encoded], axis=1)\n\n# Numeric\n## Missing Values\n# KNNImputer to impute missing values\ntest_numeric_imputed = imputer.transform(np.array(test_numeric))\ntest_numeric_processed = pd.DataFrame(test_numeric_imputed, columns=test_numeric.columns)\n\n# Combine numeric and categorical \ntest_preprocessed = pd.concat([test_categorical_encoded, test_numeric_processed], axis=1)\ntest_preprocessed[\"Electrical_3\"] = 0\ntest_preprocessed[\"Heating_3\"] = 0\ntest_preprocessed[\"RoofMatl_3\"] = 0","22b9e704":"# Final model \nLGBM_model = LGBMRegressor(reg_lamba=0.08, n_estimators=420, max_depth=8, num_leaves=25, random_state=0)\nLGBM_model.fit(X_train, y_train_log)\ntest_predictions_log = LGBM_model.predict(test_preprocessed)\ntest_predictions = np.exp(test_predictions_log)","f90316bb":"# Export results \noutput = pd.DataFrame({\"Id\": test[\"Id\"], \n                      \"SalePrice\": test_predictions})\noutput.to_csv(\"submission.csv\", index=False)","cc2e8356":"output","fae7c4c9":"### Numeric Variables","33006d56":"# Model Development","34554dd3":"Optimal num_leaves = 25","33e9e18d":"### Outliers","9137c2d2":"Optimal n_estimators=420","85826b5a":"Optimal max_depth = 8","777a1f3a":"# Submission","0c6ae107":"### Categorical Variables","bd133209":"Optimal lambda = 0.08","f5933cbc":"# Preprocessing","ef0b5576":"## Data Cleaning","e62b3e4e":"#### Missing Values","e8a7a9ca":"## Predictions","ff9c4154":"#### Encoding","80936df8":"# Packages","6242b826":"## Preprocessing"}}