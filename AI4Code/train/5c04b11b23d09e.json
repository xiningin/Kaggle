{"cell_type":{"f0fe0609":"code","7daabfef":"code","c78b862c":"code","cd420b93":"code","fc523d5d":"code","b5ca221b":"code","a643bacc":"code","43e83561":"code","a8284ea7":"code","f2fe428e":"code","4f985f9a":"code","ce75fa8b":"code","7859d58f":"code","22cabb8c":"code","0d8e9d52":"code","b8158dd5":"code","54ced660":"code","272e60ac":"code","6f829588":"code","49801c1c":"code","0b828d4d":"code","963ce738":"code","6d4699cd":"code","5aab840f":"code","ab3ce1de":"code","5f35e4b7":"markdown","28feeb25":"markdown"},"source":{"f0fe0609":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7daabfef":"df1 = pd.read_csv('\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv')","c78b862c":"df1.head()","cd420b93":"df1['class'].value_counts()","fc523d5d":"!pip install pycaret","b5ca221b":"import pycaret\nimport matplotlib.pyplot as plt\n%matplotlib inline","a643bacc":"#import classification module \nfrom pycaret.classification import *","43e83561":"#intialize the setup (in Notebook env)\nexp_clf = setup(df1, target = 'class')","a8284ea7":"# return best model\nbest = compare_models()","f2fe428e":"# train a decision tree model with default parameters\nlr = create_model('lr')","4f985f9a":"# tune hyperparameters of logistic Regression\ntuned_lr = tune_model(lr)","ce75fa8b":"# tune hyperparameters to optimize AUC\ntuned_lr = tune_model(lr, optimize = 'AUC')","7859d58f":"# ensemble logistic Regression model with 'Bagging'\nbagged_lr = ensemble_model(lr)","22cabb8c":"# ensemble logistic Regression model with 'Boosting'\nboosted_lr = ensemble_model(lr,method='Boosting')","0d8e9d52":"#plot a model\nplot_model(lr,plot='confusion_matrix')","b8158dd5":"plot_model(lr,plot='class_report')","54ced660":"plot_model(lr,plot='feature')","272e60ac":"plot_model(lr,plot='parameter')","6f829588":"# train a voting classifier dynamically\nblender_top5 = blend_models(compare_models(n_select = 5))","49801c1c":"# stack trained models dynamically\ntop5 = compare_models(n_select = 5)\nstacked_models = stack_models(estimator_list = top5[1:], meta_model = top5[0])","0b828d4d":"#create a model\nlr = create_model('lr')\n#evaluate a model\nevaluate_model(lr)","963ce738":"# selecting best model\nbest = automl()","6d4699cd":"best","5aab840f":"df = pull()","ab3ce1de":"df","5f35e4b7":"### Auto ML","28feeb25":"### 3 Category DataSet"}}