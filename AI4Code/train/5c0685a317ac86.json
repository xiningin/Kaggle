{"cell_type":{"869268de":"code","bdab7525":"code","ac802b13":"code","1b202f68":"code","479d1624":"code","dfc51637":"code","9c0f6d90":"code","ce51d97f":"code","4d24a3a9":"code","0c374e76":"code","66446861":"code","88562abd":"code","26d5f0e8":"code","844b256a":"code","295efc6a":"code","120ff751":"code","892abc6a":"code","375d5fd2":"code","b48d7659":"code","8e7a8f37":"code","d48c3543":"code","16b11e79":"code","76e2a596":"code","5c68d303":"code","e39b5b37":"code","56b509a0":"code","89085c0a":"code","9e232594":"code","c37f17f2":"code","04c734cc":"code","eda42722":"code","3485183b":"code","92ef8cd2":"code","0dc70f3b":"code","d08dff1b":"code","344b3f4b":"code","87157870":"code","03690443":"code","0d4dc454":"code","695e4a16":"code","f30bdc0c":"code","4eb69188":"code","67c06d42":"code","98b6cbc8":"code","7d8ada35":"code","21eb80a5":"code","60ab519a":"code","2b612321":"code","1ef4942c":"code","211003fe":"code","d592d1b2":"code","2fa3d06a":"code","4ef30412":"code","898b9b2e":"code","bd2947a9":"code","a08a53c2":"code","829859fa":"code","78332fc5":"code","29a4dc12":"code","1166b047":"code","aaf6795b":"code","416cd5e8":"code","6a4602b1":"code","17138c38":"code","ec8cdc64":"code","4c027cda":"code","43613f56":"code","99cb29bb":"code","91b616b5":"code","0e82764d":"code","2b488735":"code","008389cd":"code","660a85e1":"code","d53a4c97":"code","5424afb5":"code","d9159fec":"code","52e14fa6":"code","a0edfc55":"code","3778f7af":"code","55d37ae7":"code","bdafa54d":"code","637dec0f":"code","f9d61d91":"code","88d36311":"code","f606b8f7":"code","f9db947c":"markdown","bea0e41e":"markdown","1df5ebf8":"markdown","92686967":"markdown","9c9e5f12":"markdown","3ffe208f":"markdown","8a2349b5":"markdown","082c2232":"markdown","b621f081":"markdown","f8bf9a0d":"markdown","92cdcc15":"markdown","8bb4da8d":"markdown","b9b1b43e":"markdown","47688c2d":"markdown","44e7c54d":"markdown","0c3d15e0":"markdown","4ad28f95":"markdown","3b4db81a":"markdown","37fccdb2":"markdown","9e24e94f":"markdown","f08b8f55":"markdown","6b4338c9":"markdown","665144de":"markdown","0ed573a0":"markdown","6406d725":"markdown","14e09b13":"markdown","9d40f993":"markdown","1784fbd4":"markdown","ba4cba4d":"markdown","f5f72df7":"markdown","fb387698":"markdown","f98f7396":"markdown","fce49e51":"markdown","8685e558":"markdown","acd02371":"markdown","93f8c831":"markdown","064ee324":"markdown","f0aef54c":"markdown","ee06d1c6":"markdown","f614f417":"markdown","2eab2f31":"markdown","1e1711b6":"markdown","de67250c":"markdown","bc7392d3":"markdown","6055bf36":"markdown","63400e7a":"markdown"},"source":{"869268de":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","bdab7525":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom pdpbox import pdp,get_dataset,info_plots\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report,confusion_matrix","ac802b13":"sns.set_theme(style=\"ticks\")","1b202f68":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot","479d1624":"train = pd.read_csv('..\/\/input\/\/titanic\/\/train.csv')","dfc51637":"test  = pd.read_csv('..\/\/input\/\/titanic\/\/test.csv')","9c0f6d90":"# display the dataset\ntrain.head().style.set_caption('Sample of training data')","ce51d97f":"def missing_zero_values_table(df):\n    mis_val = df.isnull().sum()\n    mis_val_percent = round(df.isnull().mean().mul(100),2)\n    mz_table = pd.concat([mis_val,mis_val_percent],axis=1)\n    mz_table = mz_table.rename(columns = {df.index.name:'col_name',0:'Missing Values',1:'% of Total Values'})\n    mz_table['Data_type']=df.dtypes\n    mz_table=mz_table.sort_values('% of Total Values',ascending=False)\n    print(\"Your selected dataframe has ** \"+str(df.shape[1])+\" ** columns and ** \"+str(df.shape[0])+\" ** Rows.\\n\"\n                 \"There are ** \"+str(mz_table[mz_table.iloc[:,1] != 0].shape[0])+\n                  \" ** columns that have missing values. \\n\")\n    return mz_table.reset_index()","4d24a3a9":"fig = px.imshow(train.isnull(),title='Missing Value')\nfig.update_yaxes(showticklabels=False)\nfig.show()","0c374e76":"missing_zero_values_table(train).style.background_gradient(cmap='Reds')","66446861":"missing_zero_values_table(test).style.background_gradient(cmap='Greens')","88562abd":"survivors = go.Pie(labels=train.Survived.value_counts().index,\n                   values=train.Survived.value_counts(),\n                   hoverinfo='label+percent',textinfo='value',\n                  title=\"Count of number of survivors\",)\niplot([survivors])","26d5f0e8":"df = train.copy()","844b256a":"temp = df.groupby(['Survived','Sex']).size().reset_index().rename(columns={0:'count'})\npx.bar(temp,x='Sex',y='count',color='Survived')","295efc6a":"px.box(df,'Age')","120ff751":"print('Oldest Passenger was of :',df['Age'].max(),',Survived :','Yes' if int(df[df.Age==df['Age'].max()].Survived) else 'No')\nprint('Youngest Passenger was of :',df['Age'].min(),',Survived :','Yes' if int(df[df.Age==df['Age'].min()].Survived) else 'No')\nprint('Average Age on the ship : ',round(df['Age'].mean(),2))\ncm=sns.light_palette('green',as_cmap=True)\ndf['Age_range']=pd.qcut(df['Age'],10)\ndf.groupby(['Age_range'])['Survived'].mean().to_frame().style.background_gradient(cmap=cm)","892abc6a":"px.violin(df, y=\"Age\", x=\"Sex\", color=\"Survived\", box=True, points=\"all\")","375d5fd2":"px.box(df,'Fare')","b48d7659":"train[['Fare','Survived']].groupby(['Survived'],as_index=False).mean().sort_values(by='Survived',ascending=False)","8e7a8f37":"train.groupby(['Sex','Survived'])[['Fare']].agg(['min','mean','max'])","d48c3543":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df[df.Survived==1].Fare,name='Survived'))\nfig.add_trace(go.Histogram(x=df[df.Survived==0].Fare,name='Died'))\n\nfig.update_layout(barmode='stack',title='Passenger fare')\nfig.update_yaxes(title_text='Count')\nfig.update_xaxes(title_text='Fare')\nfig.show()","16b11e79":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = df[(df.Survived==1) & (df.Sex=='male')].Age ,\n                         y = df[(df.Survived==1) & (df.Sex=='male')].Fare,\n                         mode='markers',\n                         name='Survived + Male'))\nfig.add_trace(go.Scatter(x = df[(df.Survived==0) & (df.Sex=='male')].Age ,\n                         y = df[(df.Survived==0) & (df.Sex=='male')].Fare,\n                         mode='markers',\n                         name='Died + Male'))\nfig.add_trace(go.Scatter(x = df[(df.Survived==1) & (df.Sex=='female')].Age ,\n                         y = df[(df.Survived==1) & (df.Sex=='female')].Fare,\n                         mode='markers',\n                         name='Survived + Female'))\nfig.add_trace(go.Scatter(x = df[(df.Survived==0) & (df.Sex=='female')].Age ,\n                         y = df[(df.Survived==0) & (df.Sex=='female')].Fare,\n                         mode='markers',\n                         name='Died + Female'))\nfig.update_layout(title='Fare & Age')\nfig.update_xaxes(title_text='Age')\nfig.update_yaxes(title_text='Fare')\nfig.show()","76e2a596":"display(df.Cabin.unique())\nprint(\"There are \"+str(len(df.Cabin.unique()))+\" different values for cabin and \"+str(df.Cabin.isnull().sum())+\" Cases are missing.\")","5c68d303":"# keep all first letters of cabin in a new variable and use \"M\" for each missing\ndf['Deck'] = df.Cabin.apply(lambda s:s[0] if pd.notnull(s) else 'M')","e39b5b37":"px.bar(x=df.groupby('Deck')['Survived'].mean().index,\n       y=df.groupby('Deck')['Survived'].mean(),\n      title=\"Analysis by Cabin\",\n        labels={'y':'Mean','x':'Cabins'})","56b509a0":"pd.crosstab([train.Sex,train.SibSp],[train.Survived],margins=True).style.background_gradient()","89085c0a":"sns.pairplot(df, hue=\"Survived\")","9e232594":"train['Initial']='Mr'\nfor i in train:\n    train['Initial']=train.Name.str.extract('([A-Za-z]+)\\.')\n    \ntest['Initial']='Mr'\nfor i in train:\n    test['Initial']=test.Name.str.extract('([A-Za-z]+)\\.')","c37f17f2":"pd.crosstab(train.Initial,train.Sex).T.style.background_gradient()","04c734cc":"pd.crosstab(test.Initial,test.Sex).T.style.background_gradient()","eda42722":"train['Initial'].replace(['Don','Rev','Dr','Mme','Ms','Major','Lady','Sir','Mlle','Col','Capt','Countess', 'Jonkheer'],\n                                  ['Mr','Mr','Mr','Miss','Miss','Mr','Mrs','Mr','Miss','Other','Mr','Other','Other'],inplace=True)","3485183b":"test['Initial'].replace([    'Col','Dona','Dr','Ms','Rev'],\n                                  ['Other','Mr','Mr','Miss','Mr'],inplace=True)","92ef8cd2":"train.groupby('Initial')['Age'].mean()","0dc70f3b":"test.groupby('Initial')['Age'].mean()","d08dff1b":"train.loc[(train.Age.isnull())&(train.Initial=='Mr'),'Age'    ]=33\ntrain.loc[(train.Age.isnull())&(train.Initial=='Mrs'),'Age'   ]=36\ntrain.loc[(train.Age.isnull())&(train.Initial=='Master'),'Age']=5\ntrain.loc[(train.Age.isnull())&(train.Initial=='Miss'),'Age'  ]=22\ntrain.loc[(train.Age.isnull())&(train.Initial=='Other'),'Age' ]=46\n\ntest.loc[(test.Age.isnull())&(test.Initial=='Mr'),'Age'    ]=32\ntest.loc[(test.Age.isnull())&(test.Initial=='Mrs'),'Age'   ]=39\ntest.loc[(test.Age.isnull())&(test.Initial=='Master'),'Age']=7\ntest.loc[(test.Age.isnull())&(test.Initial=='Miss'),'Age'  ]=22\ntest.loc[(test.Age.isnull())&(test.Initial=='Other'),'Age' ]=50","344b3f4b":"train.Age.isnull().sum() or test.Age.isnull().sum()","87157870":"train['Deck'] = train.Cabin.apply(lambda s:s[0] if pd.notnull(s) else 'M')","03690443":"idx = train[train.Deck == 'T'].index\ntrain.loc[idx,'Deck'] = 'A'\n\ntrain['Deck'] = train['Deck'].replace(['A','B','C'],'ABC')\ntrain['Deck'] = train['Deck'].replace(['D','E'],'DE')\ntrain['Deck'] = train['Deck'].replace(['F','G'],'FG')\n\ntrain['Deck'].value_counts()","0d4dc454":"test['Deck'] = test.Cabin.apply(lambda s:s[0] if pd.notnull(s) else 'M')\nidx = test[test.Deck == 'T'].index\ntest.loc[idx,'Deck'] = 'A'\n\ntest['Deck'] = test['Deck'].replace(['A','B','C'],'ABC')\ntest['Deck'] = test['Deck'].replace(['D','E'],'DE')\ntest['Deck'] = test['Deck'].replace(['F','G'],'FG')","695e4a16":"train.loc[train.Embarked.isnull()]","f30bdc0c":"train.loc[train.Embarked.isnull(),'Embarked'] = 'S'","4eb69188":"test.loc[test.Fare.isnull(),'Fare'] = 0","67c06d42":"px.scatter(train,y = 'Parch' ,x ='SibSp',color='Survived')","98b6cbc8":"yf = train.Survived\nbase_features = ['Parch','SibSp','Age','Fare','Pclass']\nxf = train[base_features]","7d8ada35":"x_train,x_test,y_train,y_test = train_test_split(xf,yf,random_state=1)","21eb80a5":"first_model = RandomForestRegressor(n_estimators=21,random_state=1).fit(x_train,y_train)","60ab519a":"#Explore the relationship between SipSp and Parch in the predictions for a RF Model\n\ninter = pdp.pdp_interact(model=first_model,dataset=x_test,model_features=base_features,features=['SibSp','Parch'])\npdp.pdp_interact_plot(pdp_interact_out=inter, feature_names=['SibSp', 'Parch'], plot_type='contour')\nplt.show()","2b612321":"train['FamilySize'] = train['SibSp'] + train['Parch']\ntrain[['FamilySize','Survived']].groupby(['FamilySize'],as_index=False).agg('mean').style.background_gradient()","1ef4942c":"test['FamilySize'] = test['SibSp'] + test['Parch']","211003fe":"train['IsAlone'] = 0\ntrain.loc[train['FamilySize'] == 0 , 'IsAlone'] = 1\ntrain[['IsAlone','Survived']].groupby(['IsAlone'],as_index=False).mean()","d592d1b2":"test['IsAlone'] = 0\ntest.loc[test['FamilySize'] == 0 , 'IsAlone'] = 1","2fa3d06a":"cols = ['Survived', 'Parch', 'SibSp', 'Embarked','IsAlone', 'FamilySize']\n\nnr_rows = 2\nnr_cols = 3\n\nfig,axs = plt.subplots(nr_rows,nr_cols,figsize=(nr_cols*3.5,nr_rows*3))\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):\n        i = r * nr_cols + c\n        ax = axs[r][c]\n        sns.countplot(train[cols[i]],hue=train['Survived'],ax=ax)\n        ax.set_title(cols[i],fontsize=14,fontweight='bold')\n        ax.legend(title=\"survived\",loc='upper center')\nplt.tight_layout()","4ef30412":"inter = pdp.pdp_interact(model=first_model,dataset=x_test,model_features=base_features,features=['Age','Pclass'])\npdp.pdp_interact_plot(pdp_interact_out=inter,feature_names=['Age','Pclass'],plot_type='contour')\nplt.show()","898b9b2e":"g = sns.FacetGrid(train, row='Sex', col='Pclass', hue='Survived', margin_titles=True, size=3, aspect=1.1)\ng.map(sns.distplot, 'Age', kde=False, bins=4, hist_kws=dict(alpha=0.6))\ng.add_legend()  \nplt.show()","bd2947a9":"train['age_bins'] = 0\ntrain.loc[train['Age'] <= 16,'age_bins'] = 1\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32),'age_bins'] = 2\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 64),'age_bins'] = 3\ntrain.loc[train['Age'] > 64 , 'age_bins'] = 4\ntrain['age_bins'] = train['age_bins'].astype(int)","a08a53c2":"test['age_bins'] = 0\ntest.loc[test['Age'] <= 16,'age_bins'] = 1\ntest.loc[(test['Age'] > 16) & (test['Age'] <= 32),'age_bins'] = 2\ntest.loc[(test['Age'] > 32) & (test['Age'] <= 64),'age_bins'] = 3\ntest.loc[test['Age'] > 64 , 'age_bins'] = 4\ntest['age_bins'] = test['age_bins'].astype(int)","829859fa":"sns.barplot(x='Pclass', y='Survived', hue='age_bins', data=train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Age and Sex\")\nplt.show()","78332fc5":"train['Age*Class'] = train.age_bins * train.Pclass","29a4dc12":"test['Age*Class'] = test.age_bins * test.Pclass","1166b047":"train[[\"Age*Class\", \"Survived\"]].groupby(['Age*Class'], as_index=False).mean().sort_values(by='Survived', ascending=False)","aaf6795b":"pd.crosstab([train.Survived], [train.Sex,train['Age*Class']], margins=True).style.background_gradient(cmap='autumn_r')","416cd5e8":"pd.crosstab([train.Survived], [train.Sex,train['IsAlone']], margins=True).style.background_gradient(cmap='autumn_r')","6a4602b1":"train_dummies = pd.get_dummies(train['Deck'],prefix='Cabin')\ntrain = pd.concat([train,train_dummies],axis=1)\ntrain.drop(['Deck','Cabin'],axis=1,inplace=True)","17138c38":"test_dummies = pd.get_dummies(test['Deck'],prefix='Cabin')\ntest = pd.concat([test,test_dummies],axis=1)\ntest.drop(['Deck','Cabin'],axis=1,inplace=True)","ec8cdc64":"train_dummies = pd.get_dummies(train['Initial'],prefix='Initial')\ntrain = pd.concat([train,train_dummies],axis=1)\ntrain.drop(['Initial','Name'],axis=1,inplace=True)","4c027cda":"test_dummies = pd.get_dummies(test['Initial'],prefix='Initial')\ntest = pd.concat([test,test_dummies],axis=1)\ntest.drop(['Initial','Name'],axis=1,inplace=True)","43613f56":"train_dummies = pd.get_dummies(train['Embarked'],prefix='Embarked')\ntrain = pd.concat([train,train_dummies],axis=1)\ntrain.drop(['Embarked'],axis=1,inplace=True)","99cb29bb":"test_dummies = pd.get_dummies(test['Embarked'],prefix='Embarked')\ntest = pd.concat([test,test_dummies],axis=1)\ntest.drop(['Embarked'],axis=1,inplace=True)","91b616b5":"le = LabelEncoder()\ntrain['Sex']=le.fit_transform(train['Sex'])","0e82764d":"test['Sex'] = le.fit_transform(test['Sex'])","2b488735":"train.drop(['Ticket','PassengerId'],axis=1,inplace=True)\ntest.drop(['Ticket','PassengerId'],axis=1,inplace=True)","008389cd":"ChangeType = ['Embarked_C','Embarked_Q', 'Embarked_S','Cabin_ABC', 'Cabin_DE', \n              'Cabin_FG','Cabin_M', 'Initial_Master', 'Initial_Miss', 'Initial_Mr',\n              'Initial_Mrs', 'Initial_Other']\nfor i in ChangeType:\n    train[i] = pd.to_numeric(train[i])\nfor i in ChangeType:\n    test[i] = pd.to_numeric(test[i])","660a85e1":"train.isnull().sum().sort_index()\/len(train)","d53a4c97":"train.dropna(inplace=True)\ntest.dropna(inplace=True)","5424afb5":"Xtrain = train.drop(['Survived'], axis = 1)\nytrain = train.Survived.copy()","d9159fec":"x_train,x_test,y_train,y_test = train_test_split(Xtrain,ytrain,random_state=42)","52e14fa6":"ss = StandardScaler()\nx_train = ss.fit_transform(x_train)","a0edfc55":"m = RandomForestClassifier(n_estimators=180,min_samples_leaf=3,max_features=0.5,n_jobs=-1)\nm.fit(x_train,y_train)\nm.score(x_train,y_train)","3778f7af":"ss = StandardScaler()\nx_test = ss.fit_transform(x_test)\ny_predict = m.predict(x_test)\naccuracy_score(y_test,y_predict)","55d37ae7":"print(classification_report(y_test,y_predict))","bdafa54d":"m = RandomForestClassifier(n_estimators=200,min_samples_leaf=3,max_features=0.5,n_jobs=-1)\nm.fit(x_train,y_train)\nm.score(x_train,y_train)","637dec0f":"ss = StandardScaler()\ntest = ss.fit_transform(test)","f9d61d91":"result = m.predict(test).astype(int)","88d36311":"result.size","f606b8f7":"PATH = '..\/input\/titanic\/'\naux=pd.read_csv(f'{PATH}test.csv',low_memory=False)\ndf_output = pd.DataFrame()\ndf_output['PassengerId'] = aux['PassengerId']\ndf_output['Survived'] = result\ndf_output[['PassengerId','Survived']].to_csv('submission.csv', index=False)","f9db947c":"we have different sclae and must be change it","bea0e41e":"Less values give a clue of more survival mean,however a crosstab maybe would give more clear information:","1df5ebf8":"When we plot the ticket fare of passengers who are survived\/dead, we can see that the passengers with cheaper ticket fares are more likely to die. That is passengers with expensive tickets (could be more important social status) are seem to be rescued on priority.","92686967":"## 2.5 SibSp","9c9e5f12":"# Model Evaluation","3ffe208f":"Survival (0 = No; 1 = Yes)  \nUnfortunately this accident has a lot of dies :(","8a2349b5":"\n\nfinally I explore new features, for example, a measure of 'Age x Class' would give better insight of the survival rate?\n","082c2232":"Check the train data missing values","b621f081":"Miss Amelie: https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/amelia-icard.html  \n\nMrs. George Nelson: https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/martha-evelyn-stone.html","f8bf9a0d":"# 3.Feature Engineering","92cdcc15":"There are just two missing for embarked. It stands to reason that people who paid a similar amount, also had a class 1 ticket and were on the same deck, embarked from the same location. I also read in the Kaggle forum that you can google individual passengers, so I gave it a try:","8bb4da8d":"And also we can see men who are between 20 and 40 are survived more compared to older aged men as depicted by the orange histogram. Women on the other hand survived more than men, comparatively well on all the age groups.","b9b1b43e":"Then, introducing new features as Family size (to join these Parch and SibSp)","47688c2d":"## Save the output predictions in the requried format and submit it to Kaggle!!","44e7c54d":"This plot show us how higher class and lower age have better chance of survive, while lower class (3) and older (age >2) have lower chance of survive. This seems logic, the reduction of classes can improve the learning of the model based on the (relative small) data we have","0c3d15e0":"## 2.2 Age","4ad28f95":"Age    \nFill Na value (Age columns has 177 Na value)  \nWhich one of the passenger lied !!","3b4db81a":"To sum up the work, the next set of graphics shows the relationships with and without the new features","37fccdb2":"Chart below says that more male passengers are died compared to females (Gender discrimination :-) )","9e24e94f":"# Run the model on the test data","f08b8f55":"Investigating what type of missing values are\n\n* Missing Values\n* % of Total Values\n* Data Type","6b4338c9":"Oh my god, It's really heartbreaking    \nthat is true    \nif you pay money more than 100, and you are female the chance of survived is  really up when you are in this accident","665144de":"Regarding the linked articles both embarked in Southampton. Data science is about research, too!","0ed573a0":"The features can be built to:\n* reduce the number of states of the SibSp and Parch column\n* Create new columns that could improve prediction: such as if the passenger is alone or not\n* Drop columns that doesn't improve predictions","6406d725":"Check the test data missing values","14e09b13":"Fill NaN ages","9d40f993":"men who were alone have lower chance of survive","1784fbd4":"To explore better the relationship between these variables before featuring, I create a first model:","ba4cba4d":"# Prepare the Data for Machine Learning Algorithms","f5f72df7":"From this I found out when age is low the chance of Survived is up  \nbut I can't understand why this range of age (31.8,36.0] Survived is up !!  \nWho are those passengers??  \nLet search and found out !!  ","fb387698":"## 2.4 Cabin","f98f7396":"## 2.3 Fare","fce49e51":"The first features to work on are SibSp and Parch","8685e558":"The next option is to cerate IsAlone feature to check wheter a person traveling alolne is more likely to survived or died","acd02371":"Why chance of survived of passengers who pay more money is up   \n1 - age is highest and pay more money  \n2 - sex is female   \n3 - money   ","93f8c831":"# 2.Discover and visualize the data to gain insights","064ee324":"# 1.Take a Quick Look at the Data Structure","f0aef54c":"There are significant differences in survival rates because guests on the upper decks were quicker on the lifeboats. We will group up some decks.","ee06d1c6":"If you are alone the chance of survive is going up","f614f417":"Relationship between the features","2eab2f31":"It seems like less age and higher class is a better combination to survive","1e1711b6":"## 2.1 Sex","de67250c":"no Money !!  \nmax 512 !!","bc7392d3":"# Our Final Model","6055bf36":"Following the graphics below, The age can be groupped into less classes:","63400e7a":"in the visualization we found out age and survived has relationship find related to the passanger class"}}