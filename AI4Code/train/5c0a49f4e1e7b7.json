{"cell_type":{"1e0c83e9":"code","c21c6baf":"code","35067683":"code","6b15dfb2":"code","e3e179a4":"code","4c408062":"code","8ed2a751":"code","cd1d3ab8":"code","f6ceeb1e":"code","a90eaf95":"code","994fbee7":"code","09cf8c0b":"markdown","6bf1d3f7":"markdown","6b25ea34":"markdown","34260d5c":"markdown"},"source":{"1e0c83e9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nimport seaborn as sns","c21c6baf":"# load dataframe\ntrain_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')","35067683":"train_df","6b15dfb2":"train_df.info()","e3e179a4":"# element extraction\nfeatures = ['country', 'store', 'product']\nkey_dict = ['countries', 'stores', 'products']\nvalue_dict = []\nfor feat in features:\n    item = train_df[feat].unique()\n    value_dict.append(item)\nfeat_dict = dict(zip(key_dict,value_dict))\nprint(feat_dict)","4c408062":"def plot_graph(country, store, product):\n    train_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\n    # convert date type from 'str' to 'datetime'\n    train_df['date'] = pd.to_datetime(train_df.date)\n    df = train_df[(train_df['country']== country) & (train_df['store'] == store) & (train_df['product'] == product)]\n    fig = plt.figure(figsize=(50,10))\n    plt.bar(df['date'],df['num_sold'])\n    plt.axvline(datetime.date(2015, 1, 1), 0, 6500, color=\"red\", linestyle=\"--\")\n    plt.axvline(datetime.date(2016, 1, 1), 0, 6500, color=\"red\", linestyle=\"--\")\n    plt.axvline(datetime.date(2017, 1, 1), 0, 6500, color=\"red\", linestyle=\"--\")\n    plt.axvline(datetime.date(2018, 1, 1), 0, 6500, color=\"red\", linestyle=\"--\")\n    mean = df['num_sold'].mean()\n    median = df['num_sold'].median()\n    df_max = df['num_sold'].max()\n    df_min = df['num_sold'].min()\n    \n    \n    fig.suptitle(f'The sales of {product} in {store}, {country} \\n MEAN:{mean:.1f}, MEDIAN:{median}, MAX:{df_max}, MIN:{df_min}', fontsize = 30) \n    plt.show()","8ed2a751":"# Display\nfor c in feat_dict['countries']:\n    for s in feat_dict['stores']:\n        for p in feat_dict['products']:\n            plot_graph(c,s,p)","cd1d3ab8":"def box_plot(country, store, product):\n    train_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\n    # convert date type from 'str' to 'datetime'\n    train_df['date'] = pd.to_datetime(train_df.date)\n    df = train_df[(train_df['country']== country) & (train_df['store'] == store) & (train_df['product'] == product)]\n    fig = plt.figure(figsize=(40,10))\n    # The median and other values in the figure are calculated including outliers.\n    plt.boxplot(df[\"num_sold\"],\n                vert=False,\n                patch_artist=True,  \n                widths=0.5,  \n                boxprops=dict(facecolor='#1E90FF80', \n                             color='black', linewidth=1),\n                medianprops=dict(color='black', linewidth=1), \n                whiskerprops=dict(color='black', linewidth=1), \n                capprops=dict(color='black', linewidth=1),\n                flierprops=dict(markeredgecolor='black', markeredgewidth=1))\n    \n    mean = df['num_sold'].mean()\n    median = df['num_sold'].median()\n    df_max = df['num_sold'].max()\n    df_min = df['num_sold'].min()\n    df_25 = df['num_sold'].quantile(0.25)\n    df_75 = df['num_sold'].quantile(0.75)\n    \n    fig.suptitle(f'The sales of {product} in {store}, {country} \\n MEAN:{mean:.1f}, MIN:{df_min}, 25%: {df_25}, MEDIAN:{median}, 75%: {df_75}, MAX:{df_max}', fontsize = 30) \n    plt.show()","f6ceeb1e":"# Display\nfor c in feat_dict['countries']:\n    for s in feat_dict['stores']:\n        for p in feat_dict['products']:\n            box_plot(c,s,p)","a90eaf95":"def pie_chart(columns:str):\n    df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\n    labels = df[columns].unique()\n    data = [df[df[columns] == i]['num_sold'].sum() for i in labels]\n    fig = plt.figure(figsize=(9,9))\n    plt.pie(data, labels=labels, autopct='%.2f')\n    plt.title(f'Total sum of product sold by {columns} ', fontsize=16)\n    for i in range(len(labels)):\n        print(f'{labels[i]}: {df[df[columns] == labels[i]].num_sold.sum()}')\n    plt.axis('equal')\n    plt.show()","994fbee7":"# Display\nfor feat in features:\n    pie_chart(feat)","09cf8c0b":"## Time series graph","6bf1d3f7":"# EDA\n* Time series graph\n* Box plot\n* pie chart","6b25ea34":"## Box plot","34260d5c":"## Pie chart"}}