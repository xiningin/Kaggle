{"cell_type":{"218497ed":"code","754abd97":"code","cdc2c645":"code","4d6d7b8e":"code","eb26467e":"code","8778f95b":"code","a9781e03":"code","8afc881c":"code","172254b4":"code","56f7a07d":"code","f1df37c1":"code","7e79b376":"code","aa81d847":"code","66949386":"code","a579fd6a":"code","a1779988":"code","02b238b1":"code","397aae1b":"code","52e12d21":"code","78b49803":"code","9fd418a9":"code","a6d9ef9a":"code","99beef17":"code","d46999f9":"code","64661cde":"code","dd2e4046":"code","c16ab69a":"code","9e5b9350":"code","7a20a8d7":"code","39478453":"code","5bf6d6ab":"code","74236264":"code","995f56ff":"code","35b7ee5f":"code","a14410dc":"code","0fdfd8b3":"code","b85478a5":"code","856016f8":"code","ed63518c":"code","547019fb":"code","fed95882":"code","87f0a195":"code","d21c24ca":"code","0cd9dc4e":"code","9d17bef0":"code","5ac93838":"code","61a71245":"code","db9f5e43":"code","4593d5f5":"code","44889e27":"code","39ca8358":"code","be6a5c2f":"code","ebade752":"code","296444f8":"markdown","7b527b03":"markdown","310ce4f6":"markdown","ab5c102d":"markdown","46d4a914":"markdown","9e008960":"markdown","209a95b6":"markdown","ee2c86e5":"markdown","0903082f":"markdown","e3ebb5d5":"markdown","1b64e0be":"markdown","56c3f5f9":"markdown","def2fb76":"markdown","33408b58":"markdown","aad355b3":"markdown","333a73d4":"markdown","b70a8522":"markdown","d5ade436":"markdown","5a4e9982":"markdown","74abe004":"markdown","9118dc1b":"markdown","ebaaedfb":"markdown","2124950c":"markdown","511f4a2d":"markdown","e1d5e361":"markdown","57dd3784":"markdown","3153bc89":"markdown","6b917cbd":"markdown","71a85b48":"markdown","bed0485d":"markdown","7a731f7a":"markdown","c6df4764":"markdown","b81ccf5f":"markdown","67867bcb":"markdown"},"source":{"218497ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nfrom pandas_profiling import ProfileReport\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nimport plotly.express as px\n%matplotlib inline\nimport seaborn as sns\nimport time\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","754abd97":"# Import and first look at our train_data\ndata_train = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")\ndata_train.head()","cdc2c645":"data_train.profile_report()","4d6d7b8e":"desc = data_train.describe().T\ndf1 = pd.DataFrame(index=['battery_power', 'blue', 'clock_speed', 'dual_sim',\n                          'fc', 'four_g', 'int_memory', 'm_dep', 'mobile_wt', \n                          'n_cores', 'pc', 'px_height', 'px_width', 'ram', \n                          'sc_h', 'sc_w', 'talk_time', 'three_g','touch_screen',\n                          'wifi', 'price_range'], \n                   columns= [\"count\",\"mean\",\"std\",\"min\",\n                             \"25%\",\"50%\",\"75%\",\"max\"], data= desc )\n\nf,ax = plt.subplots(figsize=(10,10))\n\nsns.heatmap(df1, annot=True,cmap = \"rocket_r\", fmt= '.0f',\n            ax=ax,linewidths = 3,linecolor = 'cornflowerblue', cbar = False,\n            annot_kws={\"size\": 16})\nplt.xticks(size = 18)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"Variables\", fontsize = 20 )\nplt.title(\"Descriptive Statistics\", fontsize = 20)\nplt.show()","eb26467e":"fig,((ax0, ax1,ax2), (ax3, ax4,ax5)) = plt.subplots(nrows=2, ncols=3)\nfig.set_figheight(10)\nfig.set_figwidth(10)\n \nindex = [0,1]\nvalues = [sum(data_train['blue'] == 0),sum(data_train['blue'] == 1)]\nax0.bar(index,values)\nax0.set_title('Bluetooth',fontsize=20)\nax0.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n\nvalues2 = [sum(data_train['dual_sim'] == 0),sum(data_train['dual_sim'] == 1)]\nax1.bar(index,values2,color = 'black')\nax1.set_title('dual_sim',fontsize=20)\nax1.xaxis.set_major_locator(MaxNLocator(integer=True))\n\nvalues3 = [sum(data_train['four_g'] == 0),sum(data_train['four_g'] == 1)]\nax2.bar(index,values3,color = 'red')\nax2.set_title('4G',fontsize=20)\nax2.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n\nvalues4 = [sum(data_train['three_g'] == 0),sum(data_train['three_g'] == 1)]\nax3.bar(index,values4,color = 'green')\nax3.set_title('3G',fontsize=20)\nax3.xaxis.set_major_locator(MaxNLocator(integer=True))\n\nvalues5 = [sum(data_train['touch_screen'] == 0),sum(data_train['touch_screen'] == 1)]\nax4.bar(index,values5,color = 'purple')\nax4.set_title('touch_screen',fontsize=20)\nax4.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n\nvalues6 = [sum(data_train['wifi'] == 0),sum(data_train['wifi'] == 1)]\nax5.bar(index,values6)\nax5.set_title('WiFi',fontsize=20)\nax5.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n \nfig.tight_layout()\nplt.show()","8778f95b":"fig = px.histogram(data_train,x = 'battery_power',\n                  title = 'Battery_power',\n                  color_discrete_sequence = ['royalblue'])\nfig.update_layout(\nxaxis_title_text = 'battery_power',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","a9781e03":"fig = px.histogram(data_train,x = 'int_memory',\n                  title = 'Internal Memory in Gigabytes',\n                  color_discrete_sequence = ['limegreen'])\nfig.update_layout(\nxaxis_title_text = 'Internal Memory in Gigabytes',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","8afc881c":"fig = px.histogram(data_train,x = 'ram',\n                  title = 'RAM',\n                  color_discrete_sequence = ['goldenrod'])\nfig.update_layout(\nxaxis_title_text = 'RAM',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","172254b4":"fig = px.histogram(data_train,x = 'm_dep',\n                  title = 'Mobile Depth in cm ',\n                  color_discrete_sequence = ['salmon'])\nfig.update_layout(\nxaxis_title_text = 'Mobile Depth in cm',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","56f7a07d":"fig = px.histogram(data_train,x = 'mobile_wt',\n                  title = 'Weight of mobile phone ',\n                  color_discrete_sequence = ['gold'])\nfig.update_layout(\nxaxis_title_text = 'Weight of mobile phone',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","f1df37c1":"fig = px.histogram(data_train,x = 'clock_speed',\n                  title = 'Speed at which microprocessor executes instructions ',\n                  color_discrete_sequence = ['deeppink'])\nfig.update_layout(\nxaxis_title_text = 'clock_speed',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","7e79b376":"fig = px.histogram(data_train,x = 'fc',\n                  title = 'Front Camera mega pixels',\n                  color_discrete_sequence = ['mediumpurple'])\nfig.update_layout(\nxaxis_title_text = 'Front Camera mega pixels',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","aa81d847":"fig = px.histogram(data_train,x = 'pc',\n                  title = 'Primary Camera mega pixels ',\n                  color_discrete_sequence = ['darkcyan'])\nfig.update_layout(\nxaxis_title_text = 'Primary Camera mega pixels',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","66949386":"fig = px.histogram(data_train,x = 'n_cores',\n                  title = 'Number of cores of processor ',\n                  color_discrete_sequence = ['darkkhaki'])\nfig.update_layout(\nxaxis_title_text = 'Number of cores of processor ',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","a579fd6a":"fig = px.histogram(data_train,x = 'px_height',\n                  title = 'Pixel Resolution Height ',\n                  color_discrete_sequence = ['cyan'])\nfig.update_layout(\nxaxis_title_text = 'px_height',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","a1779988":"fig = px.histogram(data_train,x = 'px_width',\n                  title = 'Pixel Resolution Width',\n                  color_discrete_sequence = ['crimson'])\nfig.update_layout(\nxaxis_title_text = 'px_width',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","02b238b1":"fig = px.histogram(data_train,x = 'sc_h',\n                  title = 'Screen Height of mobile in cm',\n                  color_discrete_sequence = ['orangered'])\nfig.update_layout(\nxaxis_title_text = 'sc_h',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","397aae1b":"fig = px.histogram(data_train,x = 'sc_w',\n                  title = 'Screen Width of mobile in cm',\n                  color_discrete_sequence = ['slateblue'])\nfig.update_layout(\nxaxis_title_text = 'sc_w',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","52e12d21":"fig = px.histogram(data_train,x = 'talk_time',\n                  title = 'Longest time that a single battery charge will last when you are ',\n                  color_discrete_sequence = ['navy'])\nfig.update_layout(\nxaxis_title_text = 'talk_time',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","78b49803":"fig = px.histogram(data_train,x = 'price_range',\n                  title = 'Price_range',\n                  color_discrete_sequence = ['green'])\nfig.update_layout(\nxaxis_title_text = 'price_range',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","9fd418a9":"matrix = np.triu(data_train.corr())\nsns.set_style(\"white\")\nf,ax=plt.subplots(figsize = (16,16))\nsns.heatmap(data_train.corr(),annot= True,fmt = \".2f\",ax=ax,\n            vmin = -1,\n            vmax = 1, mask = matrix,cmap = \"coolwarm\",\n            linewidth = 0.2,linecolor = \"white\")\nplt.xticks(rotation=70)\nplt.yticks(rotation=0)\nplt.title('Correlation Map', size = 14)\nplt.show()","a6d9ef9a":"fig = px.box(data_train, x=\"price_range\", y=\"ram\",color=\"price_range\",width=750,\n             height=390)\nfig.show()","99beef17":"fig = px.box(data_train, x=\"price_range\", y=\"battery_power\",color=\"price_range\",width=750,\n             height=450)\nfig.show()","d46999f9":"X_train = data_train.drop(['price_range'], axis=1)\nY_train = data_train['price_range']","64661cde":"X_train, X_val, Y_train, Y_val = train_test_split(X_train , Y_train,test_size=0.25,random_state=52)\nX_train.shape","dd2e4046":"norm = preprocessing.MinMaxScaler()\nnorm.fit(X_val)\nX_val_norm = norm.transform(X_val)\nX_val_norm= pd.DataFrame(X_val_norm, index=X_val.index, columns=X_val.columns)\nX_val_norm","c16ab69a":"norm = preprocessing.MinMaxScaler() \nnorm.fit(X_train)\nX_train_norm = norm.transform(X_train)\nX_train_norm= pd.DataFrame(X_train_norm, index=X_train.index, columns=X_train.columns)\nX_train_norm","9e5b9350":"start_time = time.time()\nparameters = {'kernel': ['linear'],'C': [1,5,10,15,20,50,100,500,1000] }\nmodel = svm.SVC()\ngrid = GridSearchCV(model, parameters)\ngrid = GridSearchCV(estimator=model,\n             param_grid=parameters)\ngrid.fit(X_train_norm, Y_train)\nprint(\"Parametres of the best model:\")\nprint(grid.best_params_)\nprint(\"Train accuracy:\")\ngrid_predictions_train = grid.predict(X_train_norm)\nprint((metrics.accuracy_score(Y_train, grid_predictions_train))*100,\"%\")\nprint(\"Validation accuracy:\")\ngrid_predictions_val = grid.predict(X_val_norm)\nprint((metrics.accuracy_score(Y_val, grid_predictions_val))*100,\"%\")\nprint(\"Time:\")\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","7a20a8d7":"conf_matrix_train=metrics.confusion_matrix(Y_train,grid_predictions_train)\nconf_matrix_train = pd.DataFrame(conf_matrix_train, index=grid.classes_, columns=grid.classes_)\nconf_matrix_train","39478453":"conf_matrix_val=metrics.confusion_matrix(Y_val,grid_predictions_val)\nconf_matrix_val = pd.DataFrame(conf_matrix_val, index=grid.classes_, columns=grid.classes_)\nconf_matrix_val","5bf6d6ab":"start_time = time.time()\nparameters = {'kernel': ['poly'], 'degree':range(1,20),'C': [1,5,10,15,20,50,100,500,1000] }\nmodel = svm.SVC()\ngrid = GridSearchCV(model, parameters)\ngrid = GridSearchCV(estimator=model,\n             param_grid=parameters)\ngrid.fit(X_train_norm, Y_train)\nprint(\"Parametres of the best model:\")\nprint(grid.best_params_)\nprint(\"Train accuracy:\")\ngrid_predictions_train = grid.predict(X_train_norm)\nprint((metrics.accuracy_score(Y_train, grid_predictions_train))*100,\"%\")\nprint(\"Validation accuracy:\")\ngrid_predictions_val = grid.predict(X_val_norm)\nprint((metrics.accuracy_score(Y_val, grid_predictions_val))*100,\"%\")\nprint(\"Time:\")\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","74236264":"conf_matrix_train=metrics.confusion_matrix(Y_train,grid_predictions_train)\nconf_matrix_train = pd.DataFrame(conf_matrix_train, index=grid.classes_, columns=grid.classes_)\nconf_matrix_train","995f56ff":"conf_matrix_val=metrics.confusion_matrix(Y_val,grid_predictions_val)\nconf_matrix_val = pd.DataFrame(conf_matrix_val, index=grid.classes_, columns=grid.classes_)\nconf_matrix_val","35b7ee5f":"start_time = time.time()\ngamma = np.arange(0.001,1,0.01)\ngamma = gamma.tolist()\nparameters = {'kernel': ['sigmoid'], 'gamma':  gamma, 'C': [1,5,10,15,20,50,100,500,1000] }\nmodel = svm.SVC()\ngrid = GridSearchCV(model, parameters)\ngrid = GridSearchCV(estimator=model,\n             param_grid=parameters)\ngrid.fit(X_train_norm, Y_train)\nprint(\"Parametres of the best model:\")\nprint(grid.best_params_)\nprint(\"Train accuracy:\")\ngrid_predictions_train = grid.predict(X_train_norm)\nprint((metrics.accuracy_score(Y_train, grid_predictions_train))*100,\"%\")\nprint(\"Validation accuracy:\")\ngrid_predictions_val = grid.predict(X_val_norm)\nprint((metrics.accuracy_score(Y_val, grid_predictions_val))*100,\"%\")\nprint(\"Time:\")\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","a14410dc":"conf_matrix_train=metrics.confusion_matrix(Y_train,grid_predictions_train)\nconf_matrix_train = pd.DataFrame(conf_matrix_train, index=grid.classes_, columns=grid.classes_)\nconf_matrix_train","0fdfd8b3":"conf_matrix_val=metrics.confusion_matrix(Y_val,grid_predictions_val)\nconf_matrix_val = pd.DataFrame(conf_matrix_val, index=grid.classes_, columns=grid.classes_)\nconf_matrix_val","b85478a5":"start_time = time.time()\ngamma = np.arange(0.001,1,0.01)\ngamma = gamma.tolist()\nparameters = {'kernel': ['rbf'], 'gamma':  gamma, 'C':[1,5,10,15,20,50,100,500,1000]  }\nmodel = svm.SVC()\ngrid = GridSearchCV(model, parameters)\ngrid = GridSearchCV(estimator=model,\n             param_grid=parameters)\ngrid.fit(X_train_norm, Y_train) \nprint(\"Parametres of the best model:\")\nprint(grid.best_params_)\nprint(\"Train accuracy:\")\ngrid_predictions_train = grid.predict(X_train_norm)\nprint((metrics.accuracy_score(Y_train, grid_predictions_train))*100,\"%\")\nprint(\"Validation accuracy:\")\ngrid_predictions_val = grid.predict(X_val_norm)\nprint((metrics.accuracy_score(Y_val, grid_predictions_val))*100,\"%\")\nprint(\"Time:\")\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","856016f8":"conf_matrix_train=metrics.confusion_matrix(Y_train,grid_predictions_train)\nconf_matrix_train = pd.DataFrame(conf_matrix_train, index=grid.classes_, columns=grid.classes_)\nconf_matrix_train","ed63518c":"conf_matrix_val=metrics.confusion_matrix(Y_val,grid_predictions_val)\nconf_matrix_val = pd.DataFrame(conf_matrix_val, index=grid.classes_, columns=grid.classes_)\nconf_matrix_val","547019fb":"start_time = time.time()\nneignbors = range(1,100,1)\nparameters = {'n_neighbors': neignbors}\n\nmodel = KNeighborsClassifier()\ngrid = GridSearchCV(model, parameters)\ngrid = GridSearchCV(estimator=model,\n             param_grid=parameters)\ngrid.fit(X_train, Y_train) \nprint(\"Parametres of the best model:\")\nprint(grid.best_params_)\nprint(\"Train accuracy:\")\ngrid_predictions_train = grid.predict(X_train)\nprint((metrics.accuracy_score(Y_train, grid_predictions_train))*100,\"%\")\nprint(\"Validation accuracy:\")\ngrid_predictions_val = grid.predict(X_val)\nprint((metrics.accuracy_score(Y_val, grid_predictions_val))*100,\"%\")\nprint(\"Time:\")\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","fed95882":"conf_matrix_train=metrics.confusion_matrix(Y_train,grid_predictions_train)\nconf_matrix_train = pd.DataFrame(conf_matrix_train, index=grid.classes_, columns=grid.classes_)\nconf_matrix_train","87f0a195":"conf_matrix_val=metrics.confusion_matrix(Y_val,grid_predictions_val)\nconf_matrix_val = pd.DataFrame(conf_matrix_val, index=grid.classes_, columns=grid.classes_)\nconf_matrix_val","d21c24ca":"start_time = time.time()\nmodel = GaussianNB(priors = [0.25, 0.25, 0.25, 0.25])\nmodel.fit(X_train_norm,Y_train)\nprint(\"Train accuracy:\")\ngrid_predictions_train = model.predict(X_train_norm)\nprint(\"Accuracy:\",(metrics.accuracy_score(Y_train, grid_predictions_train))*100,\"%\")\nprint(\"Validation accuracy:\")\ngrid_predictions_val = model.predict(X_val_norm)\nprint((metrics.accuracy_score(Y_val, grid_predictions_val))*100,\"%\")\nprint(\"Time:\")\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","0cd9dc4e":"conf_matrix_train=metrics.confusion_matrix(Y_train,grid_predictions_train)\nconf_matrix_train = pd.DataFrame(conf_matrix_train, index=grid.classes_, columns=grid.classes_)\nconf_matrix_train","9d17bef0":"conf_matrix_val=metrics.confusion_matrix(Y_val,grid_predictions_val)\nconf_matrix_val = pd.DataFrame(conf_matrix_val, index=grid.classes_, columns=grid.classes_)\nconf_matrix_val","5ac93838":"data_test = pd.read_csv(\"..\/input\/mobile-price-classification\/test.csv\")\ndata_test.info()","61a71245":"data_test_SVM = data_test.drop(['id'], axis=1)\nnorm = preprocessing.MinMaxScaler() \nnorm.fit(data_test_SVM)\ndata_test_norm = norm.transform(data_test_SVM)\ndata_test_norm = pd.DataFrame(data_test_norm, index=data_test_SVM.index, columns=data_test_SVM.columns)\ndata_test_norm","db9f5e43":"print(\"Our test dataset distribution:\")\ndata_test_norm.shape","4593d5f5":"model = svm.SVC(kernel = 'linear', C = 500)\nmodel.fit(X_train_norm, Y_train)\nPrice_predict = model.predict(data_test_norm)\ndata_test_SVM[\"price_range\"] = Price_predict.tolist()\ndata_test_SVM['id'] = data_test['id']\ncols = data_test_SVM.columns.tolist()\ncols = [cols[-1]]+cols[:-1] # or whatever change you need\ndata_test_SVM = data_test_SVM.reindex(columns=cols)\ndata_test_SVM[['id', 'price_range']]","44889e27":"data_test_KNN = data_test.drop(['id'], axis=1)\nmodel = KNeighborsClassifier( n_neighbors=  29)\nmodel.fit(X_train, Y_train)\nPrice_predict = model.predict(data_test_KNN)\ndata_test_KNN[\"price_range\"] = Price_predict.tolist()\ndata_test_KNN['id'] = data_test['id']\ncols = data_test_KNN.columns.tolist()\ncols = [cols[-1]]+cols[:-1]  \ndata_test_KNN = data_test_KNN.reindex(columns=cols)\ndata_test_KNN[['id', 'price_range']]","39ca8358":"data_test_bayes = data_test.drop(['id'], axis=1)\nmodel = GaussianNB(priors = [0.25, 0.25, 0.25, 0.25])\nmodel.fit(X_train_norm,Y_train)\nPrice_predict = model.predict(data_test_norm)\ndata_test_bayes[\"price_range\"] = Price_predict.tolist()\ndata_test_bayes['id'] = data_test['id']\ncols = data_test_bayes.columns.tolist()\ncols = [cols[-1]]+cols[:-1]  \ndata_test_bayes = data_test_bayes.reindex(columns=cols)\ndata_test_bayes[['id', 'price_range']]","be6a5c2f":"#Stacking all forecasts into one dataset\ndata_test_SVM[\"price_range_KNN\"] = data_test_KNN[\"price_range\"]\ndata_test_SVM[\"price_range_bayes\"] = data_test_bayes[\"price_range\"]\ndata_test_SVM.head()","ebade752":"# Checking how many IDs have equal forecasts for all 3 methods\nlen(data_test_SVM[(data_test_SVM['price_range'] == data_test_SVM['price_range_KNN']) & (data_test_SVM['price_range'] == data_test_SVM['price_range_bayes'])])","296444f8":"### **Cross-validation matrix of a train set**","7b527b03":"# **Conclusion:**\n## The most efficient method for mobile price range classifying - SVM with linear function as it shows good accuracy and model training takes about 6 seconds. Overall, all 3 methods shows equal results in 755 IDs out of 1000 which let us rely on our forecasts.","310ce4f6":"## **Correlation gap**","ab5c102d":"### **Cross-validation matrix of a train set**","46d4a914":"## **Making forecast**","9e008960":"### **Cross-validation matrix of a validation set**","209a95b6":"## **Splitting train data on train set and valid set**","ee2c86e5":"### **Cross-validation matrix of a train set**","0903082f":"## **KNN classifier**","e3ebb5d5":"### **Cross-validation matrix of a validation set**","1b64e0be":"### **Cross-validation matrix of a validation set**","56c3f5f9":"##   **This line of code let us find out our data distribution, distribution of each variable; also we can find out if we have gaps in our dataset.**","def2fb76":"### **Test data normalization**","33408b58":"### ***Sigmoid function***","aad355b3":"## **Bayes forecast**","333a73d4":"### **Cross-validation matrix of a validation set**","b70a8522":"## **SVM klassifier with GRID search**","d5ade436":"### **Cross-validation matrix of a train set**","5a4e9982":"### **Cross-validation matrix of a train set**","74abe004":"## **Visualization of binary features**","9118dc1b":"## **Data normalization**","ebaaedfb":"### ***Linear function***","2124950c":"## **Correlation between battery power and price range**","511f4a2d":"## **Bayessian classifier**","e1d5e361":"## **Visualization of other variables**","57dd3784":"## **KNN forecast**","3153bc89":"## **Correlation between RAM and price range**","6b917cbd":"### **Cross-validation matrix of a validation set**","71a85b48":"## ***SVM forecast***","bed0485d":"## **Decriptive statistics** ","7a731f7a":"### **Cross-validation matrix of a valid set**","c6df4764":"### ***Gaussian function***","b81ccf5f":"### **Cross-validation matrix of a train set**","67867bcb":"### ***Polynomial function***"}}