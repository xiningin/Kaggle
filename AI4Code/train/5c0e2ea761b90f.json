{"cell_type":{"8403c9e4":"code","02d333ad":"code","01a12d40":"code","ae98e967":"code","57bed095":"code","09315276":"code","299421b2":"code","153fa21f":"code","a94b1b7a":"code","da168411":"code","6817f42f":"code","bde6bf18":"code","b56e2d7c":"code","781b1949":"markdown","ee301ed1":"markdown","7082f933":"markdown","f0ebc307":"markdown","ff62db5d":"markdown","dfd72bfd":"markdown","de85fb39":"markdown","86c28213":"markdown","1d97b5fb":"markdown","45a93a86":"markdown","44ec58b4":"markdown","7d5f4db3":"markdown","e49a5bb5":"markdown"},"source":{"8403c9e4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02d333ad":"df=pd.read_csv(\"\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\", index_col=\"sl_no\")\ndf.head(10)","01a12d40":"df.info()","ae98e967":"print(df.groupby('status')['gender'].value_counts(normalize=True))\nprint(\"\\n\")\nprint(df.groupby('status')['ssc_b'].value_counts(normalize=True))\nprint(\"\\n\")\nprint(df.groupby('status')['hsc_b'].value_counts(normalize=True))\nprint(\"\\n\")\nprint(df.groupby('status')['hsc_s'].value_counts(normalize=True))\nprint(\"\\n\")\nprint(df.groupby('status')['degree_t'].value_counts(normalize=True))\nprint(\"\\n\")\nprint(df.groupby('status')['workex'].value_counts(normalize=True))\nprint(\"\\n\")\nprint(df.groupby('status')['specialisation'].value_counts(normalize=True))\n","57bed095":"missing_value=pd.DataFrame({\" missing values\" : df.isnull().sum() , \"persentage missing values\" : (df.isnull().sum()\/len(df.index)*100)})\nmissing_value","09315276":"df = df.fillna(df.mean())\ndf.describe()","299421b2":"X = df.drop('status', axis = 1)\ny_cat = df.status\n\nfrom sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\n\n#placed as 1, not placed as 0\ny = encoder.fit_transform(y_cat)\nX = pd.get_dummies(X)","153fa21f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3, random_state=41)","a94b1b7a":"from sklearn.neighbors import KNeighborsClassifier\n\n# Setup arrays to store train and test accuracies\nneighbors = np.arange(1, 15)\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\n# Loop over different values of k\nfor i, k in enumerate(neighbors):\n    # Setup a k-NN Classifier with k neighbors: knn\n    knn = KNeighborsClassifier(n_neighbors= k )\n\n    # Fit the classifier to the training data\n    knn.fit(X_train, y_train)\n    \n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train, y_train)\n\n    #Compute accuracy on the testing set\n    test_accuracy[i] = knn.score(X_test, y_test)\n\n# Generate plot\nplt.title('k-NN: Varying Number of Neighbors')\nplt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.show()\n","da168411":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, roc_auc_score\nfrom sklearn.model_selection import cross_val_score\n\nknn = KNeighborsClassifier(n_neighbors= 5 )\nknn.fit(X_train, y_train)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\n\ncv_scores = cross_val_score(knn, X, y, cv=5)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\nprint(cv_scores)\nprint(\"\\n average 5 fold tree : {}\".format(np.mean(cv_scores)))\n\ny_pred_proba=knn.predict_proba(X_test)[:,1]\n\nprint(\"\\n ROC AUC Score knn : {}\".format(roc_auc_score(y_test, y_pred_proba)))\nprint(\"\\n accuracy score : {}\".format(accuracy_score(y_test,y_pred)))\n","6817f42f":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\n\nscaler.fit(X)\nX = scaler.transform(X)\n","bde6bf18":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3, random_state=41)\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Setup arrays to store train and test accuracies\nneighbors = np.arange(1, 15)\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\n# Loop over different values of k\nfor i, k in enumerate(neighbors):\n    # Setup a k-NN Classifier with k neighbors: knn\n    knn = KNeighborsClassifier(n_neighbors= k )\n\n    # Fit the classifier to the training data\n    knn.fit(X_train, y_train)\n    \n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train, y_train)\n\n    #Compute accuracy on the testing set\n    test_accuracy[i] = knn.score(X_test, y_test)\n\n# Generate plot\nplt.title('k-NN: Varying Number of Neighbors')\nplt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.show()\n","b56e2d7c":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, roc_auc_score\nfrom sklearn.model_selection import cross_val_score\n\nknn = KNeighborsClassifier(n_neighbors= 5 )\nknn.fit(X_train, y_train)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\n\ncv_scores = cross_val_score(knn, X, y, cv=5)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\nprint(cv_scores)\nprint(\"\\n average 5 fold tree : {}\".format(np.mean(cv_scores)))\n\ny_pred_proba=knn.predict_proba(X_test)[:,1]\n\nprint(\"\\n ROC AUC Score knn : {}\".format(roc_auc_score(y_test, y_pred_proba)))\nprint(\"\\n accuracy score : {}\".format(accuracy_score(y_test,y_pred)))\n","781b1949":"it is safe to use 4-13 neighbors, so that it doesn't overfit or underfit","ee301ed1":"# Campus Recruitment","7082f933":"we are gonna change the missing value in salary variable with 'mean' strategy ","f0ebc307":"# KNeighborsClassifier Fitting, Predicting, Scoring, validating on n neighbors","ff62db5d":"it seem using standard scaler decrease our model accuracy, so we are going to use model without standard scaler","dfd72bfd":"# Looking at  the proportion on every object variable with variable \"status\"","de85fb39":"missing data on \"salary\"","86c28213":"# Dealing With Missing Data","1d97b5fb":"hope this kernel helps and please upvote if u find this helpfull and comment to let me know if there's something to improve. thanks :)","45a93a86":"with KNeighborsClassifier we got 98% accuracy and the the model are valid to use on new data","44ec58b4":"# Spliting Data Train and Test","7d5f4db3":"# Importing the Dataset","e49a5bb5":"# KNeighborsClassifier Fitting, Predicting, Scoring, validating on n neighbors with Standard Scaler"}}