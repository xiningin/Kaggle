{"cell_type":{"a9423598":"code","2e92a179":"code","0056a4da":"code","08b0ba41":"code","30593e54":"code","377fa04b":"code","b5b2f96b":"code","a2cb7380":"code","48225b2b":"code","823ba311":"code","2c8a8941":"code","d96cb30b":"code","ae95bce3":"code","0086fe23":"code","fb77b068":"code","757f5093":"code","412f6c31":"code","27a15a84":"code","ca7e83e3":"code","64c52bb5":"code","8b395690":"code","8c0b7456":"code","5ef453ca":"code","9b1becc4":"code","b2382f83":"code","a017aad9":"code","1e80cc6f":"code","4910e0c1":"code","8dccf119":"code","bc52bc1d":"code","590ea7ca":"code","7c5430a6":"code","ba6dbe3a":"code","8e0adc7f":"code","09badfea":"code","e8516226":"code","6d2e38bc":"code","81586b58":"markdown","d2abb02b":"markdown","721eb586":"markdown","9b141f7d":"markdown","17ec625e":"markdown","ffd5b9ea":"markdown","fb66a12d":"markdown","0e98a629":"markdown","3b1ff554":"markdown","e6d4625e":"markdown","09e638dc":"markdown","fcce3fe5":"markdown","505bb8a1":"markdown","5a81e0a1":"markdown","b79c23b4":"markdown","3c49398d":"markdown"},"source":{"a9423598":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e92a179":"import matplotlib.pyplot as plt","0056a4da":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","08b0ba41":"football","30593e54":"edu = pd.read_csv('\/kaggle\/input\/datalab3\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","377fa04b":"edu.head(5)","b5b2f96b":"edu.tail(5)","a2cb7380":"edu[10:14] # show middle rows","48225b2b":"edu.describe()","823ba311":"edu['Value']","2c8a8941":"edu['GEO']","d96cb30b":"edu.iloc[90:94][['TIME','GEO']]","ae95bce3":"edu[edu['Value'] > 6.5].tail()","0086fe23":"edu[edu[\"Value\"].isnull()].head() #showing values that are null","fb77b068":"edu.max(axis = 0) #max of every column","757f5093":"print ('Pandas max function:', edu['Value'].max()) #value max\nprint ('Python max function:', max(edu['Value'])) #value max using python function doesnt work because there are nan values","412f6c31":"s = edu[\"Value\"]\/100\ns.head()","27a15a84":"s = edu[\"Value\"].apply(np.sqrt) # applying root square to the column 'value'\ns.head()","ca7e83e3":"s = edu[\"Value\"].apply(lambda d: d**2) #another way to apply math operations with lambda\ns.head()","64c52bb5":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max() #normed values\nedu.tail()","8b395690":"edu.drop('ValueNorm', axis = 1, inplace = True) #inplace true para que sustituya el df\nedu.head()","8c0b7456":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True) #adding a new row\nedu.tail()","5ef453ca":"edu.drop(max(edu.index), axis = 0, inplace = True) #droping the last row (max index)\nedu.tail()","9b1becc4":"eduDrop = edu[~edu[\"Value\"].isnull()].copy() #Remove the data that is null \neduDrop.head()","b2382f83":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"]) #drop all nan values\neduDrop.head()","a017aad9":"eduFilled = edu.fillna(value = {\"Value\": 0}) #fill the nan values with 0\neduFilled.head()","1e80cc6f":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True) #sort the data by the column 'value'\nedu.head()","4910e0c1":"edu.sort_index(axis = 0, ascending = True, inplace = True) #sort by index\nedu.head()","8dccf119":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean() #grouping by contries (GEO) we calculate the mean\ngroup.head()","bc52bc1d":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()\n# we pivot the table: columns the year, row the countries.","590ea7ca":"pivedu.loc[['Spain','Portugal'], [2006,2011]]\n#filtered pivoted table","7c5430a6":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","ba6dbe3a":"pivedu.rank(ascending=True, method='first').head()","8e0adc7f":"pivedu","09badfea":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()\n# sum the rank and show the first 5 countries","e8516226":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\");\n#summ the pivot table (all the years) and sort by value. Then we do a bar plot","6d2e38bc":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')\n# we select the colors for the years and plot the pivoted table","81586b58":"- 7) What do you observe regarding the parameter ascending=False?\n\nIt reverses the order in the rank, being the lower value the first in the rank","d2abb02b":"- 2) What happens if we give a number as argument to the method head()?\n\nIt shows the first rows of the DataFrame, we can select how many rows it has to show.","721eb586":"- 6) What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\nedu[\u2019Value\u2019] > 6.5 creates a Serie where the values are 'True' if they are bigger than 6.5 and 'False' if they are smaller. \n\nWith 'edu[edu['Value'] > 6.5]'  we can apply this function as a filter for the Dataframe. But remember that this will not sustitute the edu Dataframe","9b141f7d":"- 4) Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nIt will show the number of data of every column (only the columns with values, not strings), also the average of all the values, the standard deviation, the minimum and maximum value, and 3 values of the quartiles.","17ec625e":"### Manipulating data","ffd5b9ea":"### Sorting data","fb66a12d":"- 1 ) Which is the size of the edu DataFrame (rows x columns)?\n\n284 rows and 3 columns","0e98a629":"### Rearranging data","3b1ff554":"## Selecting data","e6d4625e":"### Ranking data","09e638dc":"### Filtering data","fcce3fe5":"## Reading data","505bb8a1":"### Grouping data","5a81e0a1":"### Plotting data\n","b79c23b4":"- What does the method tail()return?\n\nIt shows the last rows of the DataFrame","3c49398d":"- 5) What does this index return? What does the first index represent? And the second one?\n\nIt returns a fragment of the Dataframe. We can choose the rows with the first index, and the columns to show with the second one."}}