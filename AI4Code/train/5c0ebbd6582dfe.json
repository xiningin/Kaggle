{"cell_type":{"305cd1d7":"code","544c3aa5":"code","a79e2f10":"code","b935156e":"code","31b4feb9":"code","40a8be84":"code","a0ec8b8c":"code","e5fbeb0a":"code","ebdbbe1c":"code","a47d08a6":"code","cd7d129b":"code","df020575":"code","75a8e485":"code","189d9800":"code","cb93df2c":"code","e98a52cc":"code","5b0415a3":"code","83c36325":"code","685e35b8":"code","aea8766f":"code","a2870715":"code","c0e19504":"code","165045c2":"code","807cb8ed":"code","6e49b9b9":"markdown","dec30e8a":"markdown","4155c3ed":"markdown","7f929675":"markdown","4c52916f":"markdown","8d04c43d":"markdown","c2597f73":"markdown","0478b9fd":"markdown","19afa5aa":"markdown","8fd0f131":"markdown","00b4954d":"markdown","0d89cad0":"markdown","53a9be96":"markdown","4c015338":"markdown","25cfdb2e":"markdown","9c123c8e":"markdown","2ae9be65":"markdown","1e5066b6":"markdown","6101c38e":"markdown","4017d3a8":"markdown","d724f228":"markdown","692cf0fa":"markdown","7113f219":"markdown","5b7cb723":"markdown","14cd652c":"markdown","eafe6802":"markdown","99fa7479":"markdown","345acabc":"markdown","369a26d9":"markdown","daf10c25":"markdown","56afe788":"markdown","766e917b":"markdown","66c8ce9e":"markdown","362a1538":"markdown","640d742e":"markdown","a6e9277c":"markdown","2143b8ad":"markdown","9eaa5830":"markdown","3732617f":"markdown","5e404862":"markdown","e2401bcc":"markdown","1641c5df":"markdown","371a9fe2":"markdown","68a8069f":"markdown","8057830b":"markdown"},"source":{"305cd1d7":"import os\nfrom collections import Counter\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import mode\n\nSEED = 420","544c3aa5":"train_df = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json',lines=True)\ntest_df = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsample_submission_df = pd.read_csv('..\/input\/stanford-covid-vaccine\/sample_submission.csv')","a79e2f10":"one_example = train_df.iloc[0]\none_example.sequence","b935156e":"rotated_df = pd.DataFrame(list(one_example.sequence), columns=['sequence'])\nrotated_df","31b4feb9":"one_example.structure","40a8be84":"rotated_df_structure = pd.concat([\n    rotated_df,\n    pd.DataFrame(list(one_example.structure), columns=['structure'])\n], axis=1)\nrotated_df_structure.iloc[:10]","a0ec8b8c":"rotated_df_pred_loop = pd.concat([\n    rotated_df_structure,\n    pd.DataFrame(list(one_example.predicted_loop_type), columns=['predicted_loop_type'])\n], axis=1)\nrotated_df_pred_loop.iloc[:10]","e5fbeb0a":"pd.DataFrame(\n    {\n        'reactivity': list(one_example.reactivity),\n        'deg_Mg_pH10': list(one_example.deg_Mg_pH10),\n        'deg_pH10': list(one_example.deg_pH10),\n        'deg_Mg_50C': list(one_example.deg_Mg_50C),\n        'deg_50C': list(one_example.deg_50C)\n    }\n)","ebdbbe1c":"train_sequence_breakdown = Counter(''.join(list(train_df.sequence)))\ntest_sequence_breakdown = Counter(''.join(list(test_df.sequence)))\n\nx_labels = ['G', 'A', 'C', 'U']\n\nplt.figure(figsize=(16, 5))\nplt.subplot(1, 2, 1)\nplt.title('Sequence character counts (train)')\nplt.bar(x_labels, [train_sequence_breakdown[l] for l in x_labels])\n\nplt.subplot(1, 2, 2)\nplt.title('Sequence character counts (test)')\nplt.bar(x_labels, [test_sequence_breakdown[l] for l in x_labels])\n\nplt.show()","a47d08a6":"# This function takes a list of sequences and converts into a python `Counter` of ngram tokens\n\ndef get_ngrams_counters(sequences, n=2):\n    output = Counter()\n    for sequence in sequences:\n        output += Counter([sequence[i:i+n] for i in range(len(sequence)-1)])\n        \n    return output","cd7d129b":"train_ngram_sequence = get_ngrams_counters(train_df.sequence)\ntest_ngram_sequence = get_ngrams_counters(test_df.sequence)\n\n# Used to sort by frequency.\ntrain_ngram_sequence = dict(train_ngram_sequence.most_common(10000))\ntest_ngram_sequence = dict(test_ngram_sequence.most_common(10000))\n\nplt.figure(figsize=(16, 5))\nplt.subplot(1, 2, 1)\nplt.title(f'Sequence character bigram counts (train) ({len(train_ngram_sequence)} unique bigrams)')\nplt.bar(dict(train_ngram_sequence).keys(), dict(train_ngram_sequence).values())\n\nplt.subplot(1, 2, 2)\nplt.title(f'Sequence character bigram counts (test) ({len(test_ngram_sequence)} unique bigrams)')\nplt.bar(dict(test_ngram_sequence).keys(), dict(test_ngram_sequence).values())\n\nplt.show()","df020575":"train_ngram_sequence = get_ngrams_counters(train_df.sequence, 3)\ntest_ngram_sequence = get_ngrams_counters(test_df.sequence, 3)\n\n# Used to sort by frequency.\ntrain_ngram_sequence = dict(train_ngram_sequence.most_common(10000))\ntest_ngram_sequence = dict(test_ngram_sequence.most_common(10000))\n\nplt.figure(figsize=(25, 10))\nplt.title(f'Sequence character trigram (train) ({len(train_ngram_sequence)} unique trigrams)')\nplt.bar(dict(train_ngram_sequence).keys(), dict(train_ngram_sequence).values())\nplt.xticks(rotation=45)\n\nplt.figure(figsize=(25, 10))\nplt.title(f'Sequence character trigram (test) ({len(test_ngram_sequence)} unique trigrams)')\nplt.bar(dict(test_ngram_sequence).keys(), dict(test_ngram_sequence).values())\nplt.xticks(rotation=45)\n\nplt.show()","75a8e485":"train_structure_breakdown = Counter(''.join(list(train_df.structure)))\ntest_structure_breakdown = Counter(''.join(list(test_df.structure)))\n\nx_labels = ['(', ')', '.']\n\nplt.figure(figsize=(16, 5))\nplt.subplot(1, 2, 1)\nplt.title('Structure character counts (train)')\nplt.bar(x_labels, [train_structure_breakdown[l] for l in x_labels])\n\nplt.subplot(1, 2, 2)\nplt.title('Structure character counts (test)')\nplt.bar(x_labels, [test_structure_breakdown[l] for l in x_labels])\n\nplt.show()","189d9800":"def get_paired_tokens(*sequences):\n    output = Counter()\n    for seq_chars in zip(*sequences):\n        for i in range(len(seq_chars[0])-1):\n            new_token = ''\n            for seq_char in seq_chars:\n                new_token += ' '+seq_char[i]\n            output += Counter([new_token])\n        \n    return output","cb93df2c":"train_sequence_structure_pairs = get_paired_tokens(train_df.sequence, train_df.structure)\ntest_sequence_structure_pairs = get_paired_tokens(train_df.sequence, train_df.structure)\n\ntrain_sequence_structure_pairs = dict(train_sequence_structure_pairs.most_common(1000))\ntest_sequence_structure_pairs = dict(test_sequence_structure_pairs.most_common(1000))\n\nplt.figure(figsize=(25, 10))\nplt.title(f'Train sequence and structure character pairs dist')\nplt.bar(train_sequence_structure_pairs.keys(), train_sequence_structure_pairs.values())\nplt.xticks(rotation=45)\n\nplt.figure(figsize=(25, 10))\nplt.title(f'Test sequence and structure character pairs dist')\nplt.bar(test_sequence_structure_pairs.keys(), test_sequence_structure_pairs.values())\nplt.xticks(rotation=45)\n\nplt.show()","e98a52cc":"train_predicted_loop_type_breakdown = Counter(''.join(list(train_df.predicted_loop_type)))\ntest_predicted_loop_type_breakdown = Counter(''.join(list(test_df.predicted_loop_type)))\n\ntrain_predicted_loop_type_breakdown = dict(train_predicted_loop_type_breakdown.most_common(1000))\ntest_predicted_loop_type_breakdown = dict(test_predicted_loop_type_breakdown.most_common(1000))\n\nx_labels = train_predicted_loop_type_breakdown.keys()\n\nplt.figure(figsize=(16, 5))\nplt.subplot(1, 2, 1)\nplt.title('Structure character counts (train)')\nplt.bar(x_labels, [train_predicted_loop_type_breakdown[l] for l in x_labels])\n\nplt.subplot(1, 2, 2)\nplt.title('Structure character counts (test)')\nplt.bar(x_labels, [test_predicted_loop_type_breakdown[l] for l in x_labels])\n\nplt.show()","5b0415a3":"train_sequence_predicted_loop_pairs = get_paired_tokens(train_df.sequence, train_df.predicted_loop_type)\ntest_sequence_predicted_loop_pairs = get_paired_tokens(train_df.sequence, train_df.predicted_loop_type)\n\ntrain_sequence_predicted_loop_pairs = dict(train_sequence_predicted_loop_pairs.most_common(1000))\ntest_sequence_predicted_loop_pairs = dict(test_sequence_predicted_loop_pairs.most_common(1000))\n\nplt.figure(figsize=(25, 10))\nplt.title(f'Train sequence and predicted loop character pairs dist')\nplt.bar(train_sequence_structure_pairs.keys(), train_sequence_structure_pairs.values())\nplt.xticks(rotation=45)\n\nplt.figure(figsize=(25, 10))\nplt.title(f'Test sequence and predicted loop character pairs dist')\nplt.bar(test_sequence_structure_pairs.keys(), test_sequence_structure_pairs.values())\nplt.xticks(rotation=45)\n\nplt.show()","83c36325":"# This function performs some basic statististical analysis on the various labels.\n\ndef do_analysis(df, column_name):\n    all_vals = [y for x in df[column_name] for y in x]\n    print(f\"Analysis across all samples for {column_name}\")\n    print(f'Mean: {np.mean(all_vals)}')\n    print(f'Max: {np.max(all_vals)}')\n    print(f'Min: {np.min(all_vals)}')\n    print(f'Mode: {mode(all_vals).mode[0]}')\n    print(f'STD: {np.std(all_vals)}')\n    print()\n    \n    plt.hist(all_vals)\n    plt.title(f'Histogram for {column_name} across all samples')\n    plt.show()\n    \n    print(\"Statistics aggregated per sample\")\n    fig, axes = plt.subplots(1, 4, figsize=(15, 5), squeeze=False)\n\n    df[column_name].apply(\n        lambda x: np.mean(x)).plot(\n            kind='hist',\n            bins=50, ax=axes[0,0],\n            title=f'Mean dist {column_name}')\n\n    df[column_name].apply(\n        lambda x: np.max(x)).plot(\n            kind='hist',\n            bins=50, ax=axes[0,1],\n            title=f'Max dist {column_name}')\n\n    df[column_name].apply(\n        lambda x: np.min(x)).plot(\n            kind='hist',\n            bins=50, ax=axes[0,2],\n            title=f'Min dist {column_name}')\n    df[column_name].apply(\n        lambda x: np.std(x)).plot(\n            kind='hist',\n            bins=50, ax=axes[0,3],\n            title=f'Std {column_name}')\n    plt.show()","685e35b8":"do_analysis(train_df, 'reactivity')","aea8766f":"do_analysis(train_df, 'deg_Mg_pH10')","a2870715":"do_analysis(train_df, 'deg_50C')","c0e19504":"do_analysis(train_df, 'deg_Mg_50C')","165045c2":"bpps_files = os.listdir('..\/input\/stanford-covid-vaccine\/bpps\/')\nexample_bpps = np.load(f'..\/input\/stanford-covid-vaccine\/bpps\/{bpps_files[0]}')\nprint('bpps file shape:', example_bpps.shape)","807cb8ed":"plt.style.use('default')\nfig, axs = plt.subplots(5, 5, figsize=(15, 15))\naxs = axs.flatten()\nfor i, f in enumerate(bpps_files):\n    if i == 25:\n        break\n    example_bpps = np.load(f'..\/input\/stanford-covid-vaccine\/bpps\/{f}')\n    axs[i].imshow(example_bpps)\n    axs[i].set_title(f)\nplt.tight_layout()\nplt.show()","6e49b9b9":"In the public train\/test set the sequence is 107 in the public train\/test set and 130 long in the private test set.\n\nThis is an important consideration when creating a model: *you need to build a solution that can handle sequence lengths longer than anything in the training set*.\n\nLet's take a sequence from the first sampple in the training set and explore it:","dec30e8a":"#### predicted_loop_type\n\nApparently 'loop type' describes the structural context. Either `S` (paired \"Stem\") `M` (Multiloop), `I` (Internal loop), `B` (Bulge), `H` (Hairpin loop), `E` (dangling End) and `X` (eXternal loop)\n\nLet's join those to our dataframe.","4155c3ed":"Describes whether the sequence element is \"paired\" or \"unpaired\". Represented as either a `(` (paired), `.`, (unpaired) or `)` (paired).","7f929675":"Let's combine the structure and pairing to understand how they relate to each other.\n\nThe below function pairs 2 sequences (eg element 0 of sequence is paired with element 0 of structure and so on) and can be used to find which sequences characters are paired with structure.","4c52916f":"As labels, we are provided 5 vectors that need to be predicted for each sample in the test set.\n\nThey are float arrays that have either 68 in the public train\/test set and 91 elements in the private test set.\n\n* `reactivity`: \"used to determine \"the likely secondary structure of the RNA sample\".\n* `deg_Mg_pH10`:  \"used to determine the likelihood of degradation at the base\/linkage after incubating with magnesium in high pH (pH 10).\"\n* `deg_pH10`: \"used to determine the likelihood of degradation at the base\/linkage after incubating without magnesium at high pH (pH 10).\"\n* `deg_Mg_50C`: \"used to determine the likelihood of degradation at the base\/linkage after incubating with magnesium at high temperature (50 degrees Celsius).\"\n* `deg_50C`: \"used to determine the likelihood of degradation at the base\/linkage after incubating without magnesium at high temperature (50 degrees Celsius).\"","8d04c43d":"### Load data <a id=2a><\/a>","c2597f73":"## Modelling approaches (WIP) <a id=4>\n\nIn progress.\n\n#### Treat as a sequence-to-sequence problem.\n\nA sequence-to-sequence model like a Transformer or LSTM could be good starting points. However, care should be taken that the model can output variable length sequences, as the private test set has longer sequence lengths than \n\n#### Treat each row in isolation\n\nEach sequence character could possibly be treated like a single isolated row and be used to predict each output label. Then a GBM tool like XGBoost could be used as is standard in structured data competitions. However, this approach disregards all the context from the entire dataset.\n\nI suspect a combination of the 2 approaches will be the best bet for this competition.","0478b9fd":"Each character in the sequence is either: `A`, `G`, `U` or `C`. We can rotate the table to see the data in a more conventional format.","19afa5aa":"## Competition Overview <a id=\"1\"><\/a>\n\n[mRNA vaccines](https:\/\/www.nature.com\/articles\/nrd.2017.243) are a promising improvement to conventional vaccines because they are cheaper & faster to make and safer to adminster.\n\nThey have a major downside: RNA molecules have the tendency to spontaneously degrade making transportion difficult.\n\nIn this competition, we seek to predict which part of the RNA is most prone to degradation. If we can succeed in doing this, we may be able to improve the stability of mRNA vaccines and therefore, accelerate the process of developing and mass producing a COVID19 vaccine.\n\n### Problem goal <a id=\"1a\"><\/a>\n\nGiven an RNA sequence, can you predict the likely degradation rates at each position, as a sequence of values?\n\nCan you also predict the rates under a variety of conditions?\n\n\n### About the organisers <a id=\"1b\"><\/a>\n\n\"Eterna is an online video game platform that challenges players to solve scientific problems such as mRNA design through puzzles.\n\nThe solutions are synthesized and experimentally tested at Stanford by researchers to gain new insights about RNA molecules.\n\nThe Eterna community has previously unlocked new scientific principles, made new diagnostics against deadly diseases, and engaged the world\u2019s most potent intellectual resources for the betterment of the public.\"\n\n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/pGMu569jkEc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","8fd0f131":"\nLet's turn our attention to `predicted_loop_type`","00b4954d":"#### `sequence`","0d89cad0":"You are given a JSON object for each sample.\n\nEach sample contains \n\n1. an RNA sequence represented as `A`, `G`, `U` or `C` characters.\n2. metadata for each sequence element, including the structure property, which represents if it's \"paired\" or \"unpaired\", and predicted loop type,  which provides an estimate of the \"loop type\".\n\nWe'll look at each of these fields in some detail here, than greater detail in section 3.","53a9be96":"### Predicted loop type <a id=3c><\/a>","4c015338":"Trigrams may be another interesting approach to learning about how sequences are typically ordered. ","25cfdb2e":"#### structure","9c123c8e":"#### deg_Mg_50C","2ae9be65":"Let's take a look at a label for one sample:","1e5066b6":"### Labels <a id=2c><\/a>","6101c38e":"So, it seems that there are some characters that commonly appear together.","4017d3a8":"#### Frequency","d724f228":"### Sequence <a id=3a><\/a>","692cf0fa":"# OpenVaccine: Quick start EDA\n\n<img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/5eb6fae5122cea533e0c3c3f\/1589051238766-K3676NNLELHFO72M9OBQ\/ke17ZwdGBToddI8pDm48kDFgITcRoterXoQdllT5ciUUqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYxCRW4BPu10St3TBAUQYVKcV7ZyRJyI8bwZiMJRrgPaAKqUaXS0tb9q_dTyNVba_kClt3J5x-w6oTQbPni4jzRa\/eterna_covid-19_web_1200_v2.jpg?format=1500w\" alt=\"Fight Covid-19 with eterna\" width=\"400\"\/>\n\n## Table of contents\n\n* [<font size=4>Competition overview<\/font>](#1)\n\n  * [Goal of competition](#1a)\n  * [About the organisers](#1b)\n\n\n* [<font size=4>Quick start guide to data<\/font>](#2)\n\n  * [Load data](#2a)\n  * [Understanding inputs](#2b)\n  * [Understadning labels](#2c)\n\n\n* [<font size=4>In-depth EDA<\/font>](#3)\n\n  * [`sequence` column](#3a)\n  * [`structure` column](#3b)\n  * [`loop_type_predictions` column](#3c)\n  * [Exploring labels](#3d)\n  * [Exploring Bpps data](#3e)\n\n\n* [<font size=4>Modelling approaches (WIP)<\/font>](#4)","7113f219":"Now let's see how predicted_loop relates to the sequence character.","5b7cb723":"Here's the first 10 sequence characters for the original sample and their corresponding structure.","14cd652c":"### Model inputs <a id=2b><\/a>","eafe6802":"Let's start by exploring the frequency of each sequence character across all samples.","99fa7479":"## Quick start guide to data <a id=2><\/a>","345acabc":"#### deg_Mg_pH10","369a26d9":"#### Relationship between structure and sequence","daf10c25":"The approach I've used for plotting the first 25 of them is based on [this](https:\/\/www.kaggle.com\/isaienkov\/openvaccine-eda-feature-engineering-modeling) helpful notebook.","56afe788":"Let's explore the same thing for the other 4 labels:","766e917b":"#### deg_50C","66c8ce9e":"## In depth EDA <a id=3><\/a>","362a1538":"There are also some error values for each of the elements of the label sequence. We'll ignore those for now.","640d742e":"#### Frequencies","a6e9277c":"#### Sequence n-gram frequency","2143b8ad":"Let's take another look at the sequence values across the train and test datasets, exploring their frequency.","9eaa5830":"### [3e. Bpps files](#3e)","3732617f":"#### reactivity","5e404862":"I'm interested in learning about how frequently certain characters appear side-by-side. To do that, i'm going to break the sequences into bigrams and explore the frequency.","e2401bcc":"### Labels <a id=3d><\/a>","1641c5df":"### Structure <a id=3b><\/a>","371a9fe2":"We are also provided a series of `bpps` files, though they aren't described anywhere on the competition home page. [This](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/discussion\/182021) is a solid discussion on them.","68a8069f":"It seems that ( and ) are equal, which likely means they are parseable. ( opens and ) closes the \"pairs\".","8057830b":"#### Frequency"}}