{"cell_type":{"748e7a4b":"code","b69600e7":"code","448a3aa8":"code","82447868":"code","47104cfb":"code","747fde4a":"code","a1f409c8":"code","ea857c55":"code","67fd896c":"code","9ddee446":"code","12ca1e0b":"code","7b61d991":"code","9f5e4d71":"code","9bb7bff5":"code","ede4a4a7":"code","aac58708":"code","8a9daf61":"code","f8bec3c0":"code","80d3d2ad":"code","e81ebc34":"code","1e9da9b8":"code","b20ca01b":"code","7218ea66":"code","d919cee1":"code","75ea3c6d":"code","fd01348f":"code","ceef04e1":"code","1a24afb3":"code","205a8dbe":"code","cfc1147a":"code","b2ac4c26":"markdown","d2889241":"markdown","556619e5":"markdown","e95e3d23":"markdown","da8d5e8e":"markdown","07ae3ddb":"markdown","4083ca35":"markdown","d9d6b6c3":"markdown","f30e4729":"markdown","dce3106d":"markdown","885eb237":"markdown","3d8f1c9e":"markdown","cb8befbf":"markdown","3a8ab43a":"markdown","6c12428e":"markdown","0e13a6e8":"markdown","cdc1e551":"markdown","13695557":"markdown","8e7d172a":"markdown","6e819906":"markdown","eda7464f":"markdown"},"source":{"748e7a4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b69600e7":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_df.head()","448a3aa8":"print(train_df.shape)\nprint(test_df.shape)","82447868":"train_df.info()","47104cfb":"train_df.describe()","747fde4a":"train_df.isnull().sum()","a1f409c8":"train_df['Pclass'].value_counts()","ea857c55":"train_df.describe(include=['O']) ##describe non-numirc data","67fd896c":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))\n\nwomen = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\n\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False)\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[0], kde =False)\nax.legend()\nax.set_title('Female')\n\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False)\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[1], kde = False)\nax.legend()\nax.set_title('Male')","9ddee446":"FacetGrid = sns.FacetGrid(train_df, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nFacetGrid.add_legend()","12ca1e0b":"sns.barplot(x='Pclass', y='Survived', data=train_df)","7b61d991":"comined_data=[train_df,test_df]\n\nfor dataset in comined_data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'alone'] = 0\n    dataset.loc[dataset['relatives'] == 0, 'alone'] = 1\n    dataset['alone'] = dataset['alone'].astype(int)\n    \n\nprint(train_df['alone'].value_counts())\ntrain_df.head()\n    ","9f5e4d71":"axes = sns.factorplot('relatives','Survived', \n                      data=train_df, aspect = 2.5, )","9bb7bff5":"train_df.drop(['PassengerId'],axis=1,inplace=True)","ede4a4a7":"for dataset in comined_data:\n    dataset.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)\n    \ntrain_df.head()","aac58708":"train_df['Age'].isnull().sum()\n","8a9daf61":"train_df['Embarked'].isnull().sum()","f8bec3c0":"train_df.info()","80d3d2ad":"for dataset in comined_data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \ntrain_df.info()","e81ebc34":"genders={'male':0,'female':1}\n\n\nfor dataset in comined_data:\n    dataset['Sex']=dataset['Sex'].map(genders)\n\n    \n","1e9da9b8":"train_df.info()","b20ca01b":"common_value = 'S'\ntrain_df['Embarked'].fillna(value=common_value,inplace=True)\n\n\nports = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in comined_data:\n    dataset['Embarked']=dataset['Embarked'].map(ports)\n\ntrain_df.head()","7218ea66":"train_df.info()","d919cee1":"train_df['Age'].fillna(value=train_df['Age'].median(),inplace=True)  \ntrain_df['Age']=train_df['Age'].astype(int)    \ntrain_df.info()\n\ntest_df['Age'].fillna(value=test_df['Age'].median(),inplace=True)  \ntest_df['Age']=test_df['Age'].astype(int)    \ntest_df.info()","75ea3c6d":"X = train_df.drop(\"Survived\", axis=1)\nY = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX.shape, Y.shape, X_test.shape\n\n","fd01348f":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n\nX_train, X_val, Y_train, Y_val = train_test_split(X,Y,test_size= 0.2)\n","ceef04e1":"# model = RandomForestClassifier()\n# model.fit(X_train, Y_train)\n# Y_pred = model.predict(X_val)\n# acc = round(model.score(X_val, Y_val) * 100, 2)\n# acc","1a24afb3":"from sklearn.model_selection import GridSearchCV\n\nparam_grid ={ 'n_estimators':[90,100,110],\n              'max_depth':[5,7,9],\n             'min_samples_split' : [ 5, 10],\n             'min_samples_leaf' : [1, 2, 4]\n    }\n\n\nmodel = GridSearchCV(estimator = RandomForestClassifier(),param_grid=param_grid, cv=5)\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_val)\nacc_log = round(model.score(X_val, Y_val) * 100, 2)\nprint(model.best_estimator_)\nacc_log","205a8dbe":"pred = model.predict(X_test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": pred\n    })\n\nsubmission.to_csv('titanic.csv', index=False)","cfc1147a":"# submission.shape","b2ac4c26":"# 2. Embarked, Pclass and Sex:","d2889241":"## Model","556619e5":"## 3. Embarked","e95e3d23":"# 1. Age and Sex:","da8d5e8e":"## 2. Sex","07ae3ddb":"# 3. Pclass","4083ca35":"# Data exploration:","d9d6b6c3":"**we have a high probabilty of survival with 1 to 3 relitves, but a lower one if we have less than 1 or more than 3.**","f30e4729":"# Missing values","dce3106d":"**passengers in pclass=1 have higher probability to survive**","885eb237":"#### **Age - Embarked**","3d8f1c9e":"# Converting categorical features to numeric","cb8befbf":"* Name \n* cabin (has many nulls)\n* tickets\n* passengerID","3a8ab43a":"## 4. Age","6c12428e":"#### combine sibsp and parch in (relative) featur, it shows number of relatives person has in titanic","0e13a6e8":"**women have higher probability of survival unlike men, infants also have a little bit higher probability of survival**","cdc1e551":"# Data preprocessing:\n","13695557":"## 1. fare","8e7d172a":"**In ports S,Q women have higher probability to survive than men**","6e819906":"# Dropping columns","eda7464f":"# 4. SibSp and Parch:"}}