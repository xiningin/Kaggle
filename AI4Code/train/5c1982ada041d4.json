{"cell_type":{"542ee7cf":"code","7140eba9":"code","03734488":"code","710cf9cf":"code","9eb16179":"code","ff5e46a1":"code","800ecf41":"code","a1893110":"code","f0e6555d":"code","9e2703bc":"code","23fe8dae":"code","0ea6ff78":"code","60289a48":"markdown","86acabe7":"markdown","a71948bd":"markdown","83e591df":"markdown","268a687c":"markdown","4278c237":"markdown","137e0995":"markdown","468b0f37":"markdown","dbae73a7":"markdown","a1505572":"markdown","65b92e90":"markdown","a5a87876":"markdown","d1beda91":"markdown","a153aa54":"markdown","e5f25ec2":"markdown"},"source":{"542ee7cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7140eba9":"from keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","03734488":"classifier=Sequential()","710cf9cf":"classifier.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))","9eb16179":"classifier.add(MaxPooling2D(pool_size=(2,2)))","ff5e46a1":"classifier.add(Conv2D(32,(3,3),activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))","800ecf41":"classifier.add(Flatten())","a1893110":"classifier.add(Dense(128,activation='relu'))\nclassifier.add(Dense(1,activation='sigmoid'))","f0e6555d":"classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","9e2703bc":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/dataset\/training_set',\n                                                 target_size=(64,64),\n                                                 batch_size=32,\n                                                 class_mode='binary')\ntest_set = test_datagen.flow_from_directory('\/kaggle\/input\/dataset\/test_set',\n                                            target_size=(64,64),\n                                            batch_size=32,\n                                            class_mode='binary')","23fe8dae":"classifier.summary()","0ea6ff78":"classifier.fit(training_set,\n          steps_per_epoch=8000,\n          epochs=5,\n          validation_data=test_set,\n          validation_steps=2000)","60289a48":"# Part-3\n# Training the dataset\n**steps_per_epoch** corresponds to the number of images in the training_set on which our model will be trained.\n\nWe will be validating our result on the test set,so we will assign **validation_data** as test_set.\n\n**Validation_steps** corresponds to the number of images in the test_set ","86acabe7":"**Hey there!!\nThis is the very first Kaggle notebook I created and also the first CNN network that I built.\nIf you have any suggestions or doubts,please feel free to write it up in the comment section.\nAlso,please give an upvote to this post.It will motivate me alot and maybe I can come up with more interesting projects in the future!!!**\n","a71948bd":"# Summary","83e591df":"# Step-1\n# Adding the first convolutional layer\n![convolution1.png](attachment:convolution1.png)![Convolution2.png](attachment:Convolution2.png)\n\nFor my problem,I chose the number of feature detector to be 32 with each having 3 rows and 3 columns.\n\n![Convolution3.png](attachment:Convolution3.png)\n\nI have taken 3 channels and 64*64 as dimension of 2D array in each of the channel.\n\n![Covolution4.png](attachment:Covolution4.png)\n\nWe will use the Rectifier activation function to ensure that we don't have negative pixels.","268a687c":"# Part-2\n# Fitting the Convolutional Neural Network to the images\nWe will rescale all the pixel values from 0 to 255 into 0s and 1s.Other features like shear_range and zoom_range are used.Also,all the images are flipped horizontally.(Look up **Keras Documentation** for more information)","4278c237":"# Step-3\n# Adding the second convolutional layer","137e0995":"# Part-1 \n# Building the Covolutional Neural Network","468b0f37":"# Step-5\n# Compiling the Convolutional Neural Network\nWe use loss fuction as **binary_crossentropy** for two reasons:-\n1. This function corresponds to the logarithmic loss,i.e,the loss function we use in general for classification problems.\n2. We have a binary output.(If we have more than two outcomes,then we will use the **categorical_crossentropy**.","dbae73a7":"# Step-4\n# Flattening\n![Flatten1.png](attachment:Flatten1.png)","a1505572":"These are sample images of cats and dogs that we wish to classify.\n","65b92e90":"\n# Initialising the Convolutional Neural Network","a5a87876":"# Step-4\n# Full Connection\n![FullConnection1.png](attachment:FullConnection1.png)\nThe number of nodes in the hidden layer is 128. To activate the nodes in the hidden layer we use the **rectifier activation** function.\n\nSince we have a binary outcome(a cat or a dog),we will use the **sigmoid activation function** for the output layer.(If we have outcome of more than 2 categories,we will use the **softmax activation function**.We are expecting only one node in the output layer which will have the probability of whether the image is of a dog or a cat.","d1beda91":"# Importing the Keras Libraries and Packages\n1. A **Sequential** model is appropriate for a plain stack of layers where each  layer has exactly one input tensor and one output tensor.It is not appropriate when the model has multiple inputs or multiple outputs.You cannot use it when you are layer sharing(different inputs are given and the weights are shared between the layers and give a single output) or you want non-linear topology(e.g. a residual connection,a multi branch model)        \n(Residual connections are used to allow gradients to flow through a network directly,without passing through non linear activation functions.)          \nWe can create a Sequential model incrementally via the **add()** method as I have done in my code.\n\n2. **Conv2D** package is used to make 2D convolutional layer.I'm using Conv2D since I'm classifying images.There are other packages like **Conv1D**,**Conv3D**,etc which can be used as per requirement.\n\n3.  **MaxPooling2D** package is used for down sampling the convolutional layer by taking the maximum value over the window defined by **pool_size** for each dimension along the feature axis.The window is shifted by **strides** in each dimension.\n\n4. **Flatten** is used to flatten the input.\n\n5. **Dense** is the regular deeply connected neural network layer.","a153aa54":"![fullconnection1.png](attachment:fullconnection1.png)\nThis is how our full connection looks like.","e5f25ec2":"# Step-2\n# Pooling\n![Pooling1.png](attachment:Pooling1.png)\n\nWe take a 2*2 sub-table and while sliding it through the feature map we take the maximum of the four cells we come across."}}