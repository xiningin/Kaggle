{"cell_type":{"08e45275":"code","6050ad56":"code","02cc1c82":"code","cc031fc8":"code","18f49b58":"code","6e2f669c":"code","b3277388":"code","08a7acaa":"code","9bf31483":"code","1af1fab8":"code","cc98d780":"code","3e4e2fbf":"code","fb106040":"code","ea9c9ea0":"code","13423e91":"code","a649e380":"code","46842aad":"code","2b2f02dc":"code","42118100":"code","dbdf743b":"code","4cc6a2fe":"code","93b6f909":"code","09d39498":"code","d0324fd8":"code","acebe57b":"markdown","1c3dc042":"markdown","2120f1c8":"markdown","d23b38c3":"markdown","bec4f470":"markdown","a6564939":"markdown"},"source":{"08e45275":"import numpy as np\nimport pandas as pd\nimport json\n\npd.set_option('display.max_colwidth', 150)","6050ad56":"path_to_2021 = \"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\"\npath_to_2020 = \"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\"\npath_to_2019 = \"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\"\npath_to_2018 = \"..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv\"\n\ndata_2021 = pd.read_csv(path_to_2021, low_memory=False)\ndata_2020 = pd.read_csv(path_to_2020, low_memory=False)\ndata_2019 = pd.read_csv(path_to_2019, low_memory=False)\ndata_2018 = pd.read_csv(path_to_2018, low_memory=False)\n\npath_to_cols_info = \"..\/input\/dataset-kaggle-survey-2018-2021\/info_data\/columns_info.json\"\n\nwith open(path_to_cols_info, \"r\") as cols_info_file:\n    diff_cols = json.load(cols_info_file)","02cc1c82":"diff_sa_cols = diff_cols.get('single columns')\npd.DataFrame(diff_sa_cols).iloc[1:, :]","cc031fc8":"pd.DataFrame(data_2021['Q8'].value_counts())","18f49b58":"pd.DataFrame(data_2019['Q19'].value_counts())","6e2f669c":"pd.DataFrame(data_2018['Q18'].value_counts())","b3277388":"pd.DataFrame(data_2021['Q41'].value_counts(sort=False))","08a7acaa":"pd.DataFrame(data_2018['Q12_MULTIPLE_CHOICE'].value_counts(sort=False))","9bf31483":"def show_ga_diff(num_group):\n    if isinstance(num_group, int):\n        num_group = str(num_group)\n        \n    if num_group not in diff_ga_cols.keys():\n        return False\n    \n    diff_data = diff_ga_cols.get(num_group)\n\n    return pd.DataFrame(diff_data)","1af1fab8":"diff_ga_cols = diff_cols.get('group columns')\nprint(len(diff_ga_cols))","cc98d780":"show_ga_diff(0)","3e4e2fbf":"show_ga_diff(1)","fb106040":"show_ga_diff(20)","ea9c9ea0":"def get_columns(df):\n    single_cols = df.filter(like=\"SA\").columns.to_list()\n    multiple_cols = df.filter(like=\"GA\").columns.to_list()\n    \n    multiple_groups = []\n    for multiple_col in multiple_cols:\n        found_group = multiple_col.split(\"_\")[0]\n        if found_group not in multiple_groups:\n            multiple_groups.append(found_group)\n    \n    return single_cols, multiple_cols, multiple_groups","13423e91":"path_to_merged = \"..\/input\/dataset-kaggle-survey-2018-2021\/kaggle_survey_2018-2021_data.csv\"\npath_to_merged_header = \"..\/input\/dataset-kaggle-survey-2018-2021\/kaggle_survey_2018-2021_header.csv\"\n\ndata = pd.read_csv(path_to_merged, low_memory=False)\ndata_head = pd.read_csv(path_to_merged_header, nrows=1)\n\ndata_description = data_head.loc[0].to_dict()\n\nsingle_cols, multiple_cols, multiple_groups = get_columns(data)","a649e380":"def show_sa_title(col_name=None):    \n    for x_col in single_cols:\n        if col_name and col_name != x_col:\n            continue\n        \n        question = data_description.get(x_col)\n        print()\n        print(\">>> ({}) {}\".format(x_col, question))\n    \n    print()\n\n\ndef show_sa_info(col_name, is_title=True, is_sort=False, is_norm=False):\n    if col_name not in data.columns:\n        return False\n\n    col_years = \"Year\"\n    \n    if is_norm == True:\n        how_normalize = 'columns'\n    else:\n        how_normalize = False\n        \n    result = pd.crosstab(data[col_name], data[col_years], margins=True,\n                                                             margins_name='All',\n                         rownames=['Answer'], normalize=how_normalize)\n\n    if how_normalize:\n        result = result.mul(100).round(2)\n    \n    if is_sort == True and 'All' in result.columns:\n        result = result.sort_values('All', ascending=False)    \n    \n    if is_title == True:\n        show_sa_title(col_name)\n    \n    return result","46842aad":"show_sa_title()","2b2f02dc":"show_sa_info('SA1')","42118100":"show_sa_info('SA1', is_norm=True, is_sort=True)","dbdf743b":"def show_ga_title(group_name=None):    \n    for x_group in multiple_groups:\n        if group_name and group_name != x_group:\n            continue\n        \n        cols_list = data.filter(like=(x_group + \"_\")).columns.to_list()\n        first_question = data_description.get(cols_list[0])\n        group_select = '(Select all that apply)'\n        group_title = first_question.split(group_select)[0]\n        print()\n        print(\">>> ({}) {}\".format(x_group, group_title))\n    \n    print()\n\n        \ndef show_ga_info(group_name, is_title=True, is_sort=False, is_norm=False):\n    if group_name not in multiple_groups:\n        return False\n    \n    col_years = \"Year\"\n    cols_list = data.filter(like=(group_name + \"_\")).columns.to_list()\n    result = pd.melt(data, id_vars=[col_years], value_vars=cols_list)\n    \n    if is_norm == True:\n        how_normalize = 'columns'\n    else:\n        how_normalize = False\n        \n    result = pd.crosstab(result['value'], result[col_years], margins=True,\n                                                             margins_name='All',\n                         rownames=['Answer'], normalize=how_normalize)\n\n    if how_normalize:\n        result = result.mul(100).round(2)\n    \n    if is_sort == True and 'All' in result.columns:\n        result = result.sort_values('All', ascending=False)    \n    \n    if is_title == True:\n        show_ga_title(group_name)\n    \n    return result","4cc6a2fe":"show_ga_title()","93b6f909":"x_group = \"GA0\"\nshow_ga_info(x_group)","09d39498":"x_group = \"GA0\"\nshow_ga_info(x_group, is_norm=True)","d0324fd8":"x_group = \"GA21\"\nshow_ga_info(x_group, is_norm=True, is_sort=True)","acebe57b":"## 4.2. Group answers","1c3dc042":"# 4. Merged data","2120f1c8":"## 4.1. Single answers","d23b38c3":"# 2. Check single columns diff","bec4f470":"# 3. Check group columns diff","a6564939":"# 1. Import & Load & Extract"}}