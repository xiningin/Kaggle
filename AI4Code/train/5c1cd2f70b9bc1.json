{"cell_type":{"fee85357":"code","ef37ceaf":"code","7c40e256":"code","6d63dd2d":"code","6fcff19f":"code","cd821793":"code","a14fbee5":"code","7b628fe2":"code","37006a12":"code","ab3c529d":"code","1720012a":"code","9f781b29":"code","bf890a6e":"code","cc710334":"code","b87e1f59":"code","98467951":"code","d41f7034":"code","5d5f4639":"code","7cf13aae":"code","72ae2b6b":"markdown","a6f6ae51":"markdown","13506040":"markdown","cff4eb90":"markdown","c1480749":"markdown","b94dc35c":"markdown","b1aca8ef":"markdown","d1eeeac4":"markdown","f40335c0":"markdown","ac84cea0":"markdown","ee590cfa":"markdown","8df2d548":"markdown","9bdcf9a9":"markdown","6e86e28b":"markdown","1533c6d3":"markdown","0ef54b2f":"markdown","bf7df309":"markdown"},"source":{"fee85357":"pip install -U lightautoml","ef37ceaf":"# Standard python libraries\nimport os\nimport time\nimport re\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport torch\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.dataset.roles import DatetimeRole\nfrom lightautoml.tasks import Task\nfrom lightautoml.utils.profiler import Profiler","7c40e256":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 3600 # Time in seconds for automl run","6d63dd2d":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","6fcff19f":"%%time\n\ntrain_data = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntrain_data.head()","cd821793":"test_data = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')\ntest_data.head()","a14fbee5":"submission = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')\nsubmission.head()","7b628fe2":"def add_specific_feats(data):\n    data['f1_mul_f2'] = data['cont1'] * data['cont2']\n    data['f5_mul_f8'] = data['cont5'] * data['cont8']\n    data['f0_mul_f2'] = data['cont0'] * data['cont2']\n    data['f1_mul_f5'] = data['cont1'] * data['cont5']\n    \n    data['f3_mul_f4'] = data['cont3'] * data['cont4']\n    data['f5_rat_f8'] = data['cont5'] \/ data['cont8']\n    data['f1_min_f2'] = data['cont1'] - data['cont2']\n    data['f1_pls_f6'] = data['cont1'] + data['cont6']\n    \n    data['f4_min_f8'] = data['cont4'] - data['cont8']\n    data['f4_mul_f8'] = data['cont4'] * data['cont8']\n    data['f2_mul_f4'] = data['cont2'] * data['cont4']\n    data['f3_rat_f9'] = data['cont3'] \/ data['cont9']\n    \n    data['f6_rat_f10'] = data['cont6'] \/ data['cont10']\n    data['f5_pls_f8'] = data['cont5'] + data['cont8']\n    data['f2_pls_f6'] = data['cont2'] + data['cont6']\n    data['f6_mul_f8'] = data['cont6'] * data['cont8']\n    \n    data['f6_min_f8'] = data['cont6'] - data['cont8']\n    data['f0_pls_f10'] = data['cont0'] + data['cont10']\n    return data\n\ntrain_data = add_specific_feats(train_data)\ntest_data = add_specific_feats(test_data)","37006a12":"tr_data, te_data = train_test_split(train_data, \n                                     test_size=TEST_SIZE, \n                                     stratify=train_data['target'], \n                                     random_state=RANDOM_STATE)\nprint('Data splitted. Parts sizes: tr_data = {}, te_data = {}'.format(tr_data.shape, te_data.shape))","ab3c529d":"%%time\n\n# AUC metric is the default one for binary tasks in LightAutoML\ntask = Task('binary', )","1720012a":"%%time\n\nroles = {\n    'target': 'target',\n    'drop': ['id'],\n}","9f781b29":"%%time \n\nautoml = TabularAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS})\noof_pred = automl.fit_predict(tr_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","bf890a6e":"%%time\n\ntest_pred = automl.predict(te_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(roc_auc_score(tr_data['target'].values, oof_pred.data[:, 0])))\nprint('TEST score: {}'.format(roc_auc_score(te_data['target'].values, test_pred.data[:, 0])))","cc710334":"%%time \n\nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS})\noof_pred = automl.fit_predict(tr_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","b87e1f59":"%%time\n\ntest_pred = automl.predict(te_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(roc_auc_score(tr_data['target'].values, oof_pred.data[:, 0])))\nprint('TEST score: {}'.format(roc_auc_score(te_data['target'].values, test_pred.data[:, 0])))","98467951":"%%time \n\nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS})\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","d41f7034":"%%time\n\ntest_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(roc_auc_score(train_data['target'].values, oof_pred.data[:, 0])))","5d5f4639":"submission['target'] = test_pred.data[:, 0]\nsubmission.to_csv('automl_utilized_3600_with_feats.csv', index = False)","7cf13aae":"submission","72ae2b6b":"## Step 5. Create AutoML with time utilization ","a6f6ae51":"# Step 0.3. Fix torch number of threads and numpy seed ","13506040":"## Step 9. Prepare submission","cff4eb90":"# Step 0.6. Data splitting for train-test ","c1480749":"## Step 2. Setup columns roles","b94dc35c":"## Step 8. Predict for test data and check OOF score","b1aca8ef":"# Step 0.0. Install LightAutoML","d1eeeac4":"## Step 3. Create AutoML from preset and train on 80% of data","f40335c0":"# ========= AutoML preset usage =========\n\n\n## Step 1. Create Task","ac84cea0":"## Step 7. Train on full data ","ee590cfa":"# Step 0.4. Data load ","8df2d548":"# Step 0.5. Extra features generation","9bdcf9a9":"Below we are going to create specific AutoML preset for TIMEOUT utilization (try to spend it as much as possible):","6e86e28b":"## Step 4. Predict to validation data and check scores","1533c6d3":"# Step 0.2. Parameters ","0ef54b2f":"# Step 0.1. Import necessary libraries ","bf7df309":"## Step 6. Predict to validation data and check scores for utilized automl"}}