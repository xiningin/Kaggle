{"cell_type":{"2d5d3331":"code","06f95281":"code","d834e776":"code","1527fd40":"code","c644ef39":"code","a1899298":"code","1e505906":"code","d9bc67db":"code","38eb0d6b":"code","9c423e2c":"code","a1051926":"code","0a543fac":"code","fddd8de0":"code","d0916ec3":"code","f08078c3":"code","433c2d75":"code","f7ac1a83":"code","afa7b94e":"code","4036bec3":"code","29a20c0b":"code","490881ad":"code","e124298f":"code","26d9b4a0":"code","1492af2a":"code","4b19c2a2":"code","ea31f4f3":"code","e3a5f8a4":"code","6119a891":"code","f74cd2bc":"code","24e7703c":"code","4f66c3de":"code","8d0a52d0":"code","70c18103":"code","f8ebe6ed":"code","9e5abbc8":"code","71d35a13":"code","4135c39e":"code","5eb7bd84":"code","f4fc2e4a":"code","7e03336c":"code","d36e4638":"code","938103e2":"code","99dbad1a":"code","f15aa571":"code","ea1cc87f":"code","c06f5bd1":"code","0860ac3b":"code","e6d40020":"code","04fae6df":"code","8ecbdcd6":"code","0c66087d":"code","6b0cbcf2":"code","6a17e85f":"code","ec36b3aa":"code","a8e1ebfd":"code","45e8255c":"code","a44cac5d":"code","7ac98564":"code","657c1b69":"code","e80d58b3":"code","37cc9993":"markdown","5b21dc63":"markdown","fb7f1707":"markdown","afccd4c0":"markdown","5dd8ee3a":"markdown","727b7942":"markdown","bd08b14c":"markdown","f175d80e":"markdown","46c657c1":"markdown","292bda6f":"markdown","a03dbe46":"markdown","93fc9c83":"markdown","d32c72db":"markdown","15e3c6d7":"markdown","cce93e4f":"markdown","54904b25":"markdown","206590ed":"markdown","eedaed2d":"markdown","e6af4dda":"markdown","c2edb69c":"markdown","ace68da2":"markdown","26542f50":"markdown","c7c63231":"markdown","8fe59336":"markdown","c24b2693":"markdown","62a9d89b":"markdown","d1e40d47":"markdown","e0aa7538":"markdown","b4bcace1":"markdown","e8f81cf7":"markdown","cf5d8131":"markdown","0af5eeda":"markdown","b9cf3422":"markdown","e8ab368d":"markdown","8fe63f06":"markdown","009738ba":"markdown"},"source":{"2d5d3331":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns # visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06f95281":"data= pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","d834e776":"data.info()","1527fd40":"# bilgiler aras\u0131ndaki ili\u015fkiyi anlamam\u0131z\u0131 sa\u011flayan parametrelere correlation denir. \n# E\u011fer 2 tane future aras\u0131nda correlation 1 se bunlar birbirleriyle do\u011fru orant\u0131\u0131d\u0131r.\n\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt='.1f',ax=ax)","c644ef39":"data.head(10) #i\u00e7ine hi\u00e7bi\u015fey yazmazsan 5 \u00f6\u011fe g\u00f6sterir.","a1899298":"data.columns","1e505906":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","d9bc67db":"# Scatter Plot bizim amac\u0131m\u0131z 2 tane veriable aras\u0131ndaki ili\u015fkiyi bulma. Do\u011fru orant\u0131 m\u0131 ters orant\u0131 m\u0131 gibi\n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')              # label = name of label\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot')            # title = title of plot\nplt.show()","38eb0d6b":"# Histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","9c423e2c":"# clf() = cleans it up again you can start a fresh 'plotumuzu siler'\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf() #silme i\u015flemi\n# We cannot see plot due to clf()","a1051926":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","0a543fac":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","fddd8de0":"# In order to run all code you need to take comment this line\n#del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","d0916ec3":"series = data['Defense']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\nprint(type(data_frame))","f08078c3":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","433c2d75":"# 1 - Filtering Pandas data frame\nx = data['Defense']>200     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","f7ac1a83":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 2oo and higher attack value than 100\ndata[np.logical_and(data['Defense']>200, data['Attack']>100 )]","afa7b94e":"lis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Attack']][0:1].iterrows():\n    print(index,\" : \",value)","4036bec3":"# example of what we learn above\ndef tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","29a20c0b":"# guess prints what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","490881ad":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","e124298f":"# Build in scopelar bunlard\u0131r.\nimport builtins\ndir(builtins)","26d9b4a0":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","1492af2a":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs): #bu s\u00f6zl\u00fck olmu\u015f oldu\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456) # rahat bi\u00e7imde s\u00f6zl\u00fc\u011f\u00fcn i\u00e7ini doldurduk","4b19c2a2":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","ea31f4f3":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","e3a5f8a4":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","6119a891":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","f74cd2bc":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list1)))\n","24e7703c":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","4f66c3de":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","8d0a52d0":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","70c18103":"# For example max HP is 255 or min defense is 5\ndata.describe() #ignore null entries","f8ebe6ed":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Green line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Attack',by = 'Legendary')","9e5abbc8":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","71d35a13":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted # id_vars de\u011fi\u015fmeden kalacak b\u00f6l\u00fcm yani Name. Yani melt ettikten sonra da name future'\u0131 kalacak. value vars k\u0131sm\u0131da yeni olu\u015fturmak istedi\u011fim ver.lar","4135c39e":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","5eb7bd84":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","f4fc2e4a":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 1 : adds dataframes in column\nconc_data_col","7e03336c":"data.dtypes","d36e4638":"# lets convert object(str) to categorical and int to float.\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","938103e2":"data.dtypes","99dbad1a":"data.info()","f15aa571":"# Lets chech Type 2\ndata[\"Type 2\"].value_counts(dropna =False)\n# As you can see, there are 386 NAN value\n","ea1cc87f":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","c06f5bd1":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","0860ac3b":"data[\"Type 2\"].fillna('empty',inplace = True)\n","e6d40020":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values\n","04fae6df":"# data frames from dictionary\ncountry = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","8ecbdcd6":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","0c66087d":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","6b0cbcf2":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),density=True, stacked=True)\nplt.show()","6a17e85f":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),density=True, stacked=True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),density=True, stacked=True,ax = axes[1],cumulative = True) #toplaya toplaya gidiyor\nplt.savefig('graph.png')\nplt","ec36b3aa":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","a8e1ebfd":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","45e8255c":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","a44cac5d":"# plot ve scatter ayn\u0131 o y\u00fczden direkt histogramdan ba\u015fl\u0131yoruz\n# hist plot \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),density=True, stacked=True)\n","7ac98564":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean()","657c1b69":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","e80d58b3":"data2.resample(\"M\").mean().interpolate(\"linear\")","37cc9993":"**ANONYMOUS FUNCT\u0130ON**\n* Lambda fonksiyonuna benziyor\n* map(func,seq) : map function bir listedeki t\u00fcm \u00f6\u011felere bir i\u015flev uygular","5b21dc63":"**DIAGNOSE DATA for CLEANING** TEM\u0130ZL\u0130K \u0130\u00c7\u0130N TE\u015eH\u0130S VER\u0130LER\u0130\n* Datada baz\u0131 temiz olmayan veriler var. Bunlar\u0131 te\u015fhis edip temizlememiz laz\u0131m\n* b\u00fcy\u00fck k\u00fc\u00e7\u00fck harf problemleri temiz olmayan bir \u015feydir\n* bir data \u00fczerinde bo\u015fluk da temiz olmayan bir \u015feydir\n* Datalarda missing datalar olabilir -- null olarak g\u00f6r\u00fcnebilir. Bu da temiz olmayan datad\u0131r\n* De\u011fi\u015fik i\u015faretli datalar olabilir. Bunlar\u0131 da optimize etmek gerekir. bu da temiz olmayan bir \u015feydir\n","fb7f1707":"**Correlation Map**","afccd4c0":"**MISSING DATA and TESTING WITH ASSERT**\n* missing data bir datada daha \u00f6nce tan\u0131mlanmam\u0131\u015f de\u011feri olmayan \u015feylerdir. NaN gibi d\u00fc\u015f\u00fcn\n* \u00e7\u00f6z\u00fcm yollar\u0131\n* onu \u00f6ylece b\u0131rakabiliriz.\n* datasetten \u00e7\u0131karabiliriz dropna()\n* e\u011fer bo\u015f missing datalar varsa NULL ile doldurabiliriz fillna()\n* E\u011fer mising value varsa medyanla ortalama de\u011ferle doldurabilir\n* Assert statement do\u011fruluk kontrolu\n","5dd8ee3a":"**DICTIONARY**\n\nWhy do we need dictionary?\n\n* It has 'key' and 'value'\n* Faster than lists\n* What is key and value. Example:\n* dictionary = {'spain' : 'madrid'}\n* Key is spain.\n* Values is madrid.\n\n**It's that easy.**\n* Lets practice some other properties like keys(), values(), update, add, check, remove key, remove all entries and remove dicrionary.","727b7942":"**PIVOTING DATA**\n* Melti eski haline \u00e7evirir","bd08b14c":"* [i + 1 for i in num1 ]: list of comprehension\n* i +1: list comprehension syntax\n* for i in num1: for loop syntax\n* i: iterator\n* num1: iterable object","f175d80e":"**CONCATENATING DATA**\n* 2 tane data frame i birle\u015ftirebiliriz demek","46c657c1":"**BUILDING DATA FRAMES FROM SCRATCH**\n* data frameleri csv den import ettik.\n* data framelerin dictionarylerden nas\u0131l elde edildi\u011fini g\u00f6r\u00fccez\n* broadcasting yeni column yarat ve yeni de\u011ferleri ata","292bda6f":"**Datam\u0131 import ediyorum**","a03dbe46":"**WHILE and FOR LOOPS**","93fc9c83":"**Matplotlib**\n\n1. Line plot; x eksenimiz e\u011fer zamansa line plot kullanmak iyidir\n2. Scatter plotu; 2 tane verianle aras\u0131nda ili\u015fki olup olmad\u0131\u011f\u0131n\u0131 anlamak istersek\n3. Histogram; E\u011fer bir verinin s\u0131kl\u0131\u011f\u0131n\u0131 anlamak istiyorsak histogram kullan\u0131r\u0131z","d32c72db":"* Before continuing with pandas, we need to learn logic, control flow and filtering.\n* Comparison operator: ==, <, >, <=\n* Boolean operators: and, or ,not\n* Filtering pandas","15e3c6d7":"**USER DEFINED FUNCTION** Kullan\u0131c\u0131 tan\u0131ml\u0131 Fonksiyon\n* docstings: Bize fonksiyonun ne yapt\u0131\u011f\u0131n\u0131 a\u00e7\u0131klayan string comment gibi d\u00fc\u015f\u00fcn\n* tuble: tuble ne oldu\u011funu a\u00e7\u0131klarsak; tuble birden fazla veri t\u00fcr\u00fcn\u00fc bir arada bulundurabilen virg\u00fcllerle veya parantez ile g\u00f6sterilen immutable(de\u011fi\u015ftirilemeyen) veri tipleridir.","cce93e4f":"**SCOPE** Kapsam\n* Tan\u0131mlad\u0131\u011f\u0131m\u0131z veriablelar\u0131n \u00e7e\u015fidi denebilir\n* global : main body de tan\u0131mlanan scopelard\u0131r. Herkes ula\u015fabilir\n* local: metodun i\u00e7inde tan\u0131mlan\u0131r\n* built in scope : daha \u00f6nce belli bir g\u00f6reve atanan isimlerdir ex: len print vs.\n","54904b25":"**Zip**\n* zip(): zip list pythonda birle\u015ftirmek olarak kullan\u0131l\u0131yor.","206590ed":"**DEFAULT and FLEXIBLE ARGUMENTS**\n\n* default argument example:\n* def f(a, b=1):\n*   \"\"\" b = 1 is default argument\"\"\"\n\n* Flexible argument example:\n* def f(*args):\n* \"\"\" *args can be one or more\"\"\"\n\n* def f(** kwargs)\n*  \"\"\" **kwargs is a dictionary\"\"\"\n\n","eedaed2d":"**VISUAL EXPLORATORY DATA ANALYSIS**  G\u00f6rsel bir \u015fekilde datay\u0131 inceleme ve analiz etme\n* Box plot metodu kullan\u0131l\u0131r. Ayk\u0131r\u0131 de\u011ferler min\/max medyan vs. \n","e6af4dda":"**Datam\u0131n bilgilerini al\u0131yorum**","c2edb69c":"**Lambda Function**\n* Fonksiyon yazman\u0131n k\u0131sa yolu","ace68da2":"**What is quantile?**\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in middle of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","26542f50":"**Tan\u0131mlamalar**","c7c63231":"**VISUAL EXPLORATORY DATA ANALYSIS**\n* Plot\n* Subplot\n* Histogram:\n* bins: number of bins\n* range(tuble): min and max values of bins\n* normed(boolean): normalize or not\n* cumulative(boolean): compute cumulative distribution","8fe59336":"**ITERATORS**\n* listenin i\u00e7ine girip for d\u00f6ng\u00fcs\u00fcyle eri\u015fim sa\u011flamak gibi d\u00fc\u015f\u00fcn\n","c24b2693":"**INDEXING PANDAS TIME SERIES**\n* datetime = object time serilerin \u00f6zellikleri indexlerinin time serilerden olu\u015fmas\u0131. \n* pandas time seriler i\u00e7in \u00f6zel bir \u015fey yapm\u0131\u015f onu g\u00f6r\u00fccez.\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","62a9d89b":"**TIDY DATA** D\u00fczenli veriler\n* melt() fonksiyonu (eritmek) Bu datadan belli ba\u015fl\u0131 yeni futurelar \u00e7\u0131kartarak datay\u0131 de\u011ferleri sabit kalacak \u015fekilde de\u011fi\u015ftirmek","d1e40d47":"**PANDAS**\n* What do we need to know about pandas?\n\n* CSV: comma - separated values","e0aa7538":"**LIST COMPREHENS\u0130ON**\n* \u00d6NEML\u0130!\n*  listeleri tek bir sat\u0131rda olu\u015fturmak i\u00e7in d\u00f6ng\u00fcler i\u00e7in daralt\u00f6a denebilir\n","b4bcace1":"**Sahip oldu\u011fu ba\u015fl\u0131klar\u0131 g\u00f6steren def.**","e8f81cf7":"**EXPLORATORY DATA ANALYSIS (EDA)** KE\u015e\u0130F VER\u0130 ANAL\u0130Z\u0130\n* value_counts(): Frequency counts Type say\u0131lar\u0131n\u0131 veren\n* outliers: ayk\u0131r\u0131 ayr\u0131k anlam\u0131nda di\u011fer datalardan ayk\u0131r\u0131 olan dataya deniyor.\n* ![ssqr.png](attachment:bbad0bf3-57f6-4f43-89e5-34a67d5fff39.png) \n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR \n* We will use describe() method. Describe method includes\n\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n*  min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n","cf5d8131":"**Nested Function** i\u00e7 i\u00e7e i\u015flev\n* fonksyon i\u00e7ine fonksiyon yazmak denebilir\n","0af5eeda":"**REVIEW of PANDAS**\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy","b9cf3422":"**RESAMPLING PANDAS TIME SERIES** \n","e8ab368d":"**En ba\u015ftaki datalar\u0131 g\u00f6steren def.**","8fe63f06":"**DATA TYPES**\n* 5 tane basit veri tipi var. string boolean integer float ve categorical\n\n","009738ba":"**PANDAS FOUNDATION**"}}