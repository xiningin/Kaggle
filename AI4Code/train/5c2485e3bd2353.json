{"cell_type":{"7d9f3c34":"code","5f5e7844":"code","c1d63d66":"code","ff8e7574":"code","5571790a":"code","e6e487e0":"code","f836abf3":"code","49dc1007":"code","3a9b372c":"code","4a17a7bb":"code","08febeae":"code","fac1bcf4":"code","957129fd":"code","312dbe75":"code","cf3f4565":"code","1c96408b":"code","e666bd45":"code","167a1733":"code","53facf57":"code","2a5c7c97":"code","a67fb3f3":"code","99081d53":"code","92fce7d6":"code","4a73fe0d":"code","d061ab7c":"code","c6b15054":"code","b0bf830e":"code","c0dffb45":"code","81f518e7":"code","933790a4":"code","f0c9e243":"code","469b7559":"code","0714de21":"code","69fbe429":"code","ae6af761":"code","abd070c8":"code","2fcf78a3":"code","aca12e2b":"code","5f182b5f":"code","e467bb7a":"code","115eea9d":"code","b00e6325":"code","04efe96f":"code","2332387c":"code","a54bc89b":"markdown","2fb214df":"markdown","2d00cbe0":"markdown","67549709":"markdown","b3c32af4":"markdown","1437e107":"markdown","a64b6a64":"markdown","eba6760f":"markdown","b8a284d6":"markdown","8a26bf47":"markdown","1da7a65d":"markdown","1489dfa6":"markdown","ee55a9e9":"markdown","03a80eda":"markdown","b7256d7b":"markdown","1de75ac3":"markdown","75f6a533":"markdown","8bcb0fd6":"markdown","ff9ba548":"markdown"},"source":{"7d9f3c34":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os","5f5e7844":"import warnings\nwarnings.filterwarnings('ignore')","c1d63d66":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ff8e7574":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin\/breast cancer.csv')\n","5571790a":"df.head()","e6e487e0":"df.tail()","f836abf3":"df.shape","49dc1007":"df.describe().T","3a9b372c":"df.diagnosis.unique()","4a17a7bb":"df['diagnosis'].value_counts()","08febeae":"sns.countplot(df['diagnosis'], palette='husl')","fac1bcf4":"df.drop('id',axis=1,inplace=True)\ndf.drop('Unnamed: 32',axis=1,inplace=True)","957129fd":"df.head()","312dbe75":"df['diagnosis'] = df['diagnosis'].map({'M':1,'B':0})\ndf.head()","cf3f4565":"df.isnull().sum()","1c96408b":"df.corr()","e666bd45":"plt.hist(df['diagnosis'], color='g')\nplt.title('Plot_Diagnosis (M=1 , B=0)')\nplt.show()","167a1733":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(), annot=True)","53facf57":"# generate a scatter plot matrix with the \"mean\" columns\ncols = ['diagnosis',\n        'radius_mean', \n        'texture_mean', \n        'perimeter_mean', \n        'area_mean', \n        'smoothness_mean', \n        'compactness_mean', \n        'concavity_mean',\n        'concave points_mean', \n        'symmetry_mean', \n        'fractal_dimension_mean']\n\nsns.pairplot(data=df[cols], hue='diagnosis', palette='rocket')","2a5c7c97":"# Generate and visualize the correlation matrix\ncorr = df.corr().round(2)\n\n# Mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set figure size\nf, ax = plt.subplots(figsize=(20, 20))\n\n# Define custom colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\n\nplt.tight_layout()","a67fb3f3":"# first, drop all \"worst\" columns\ncols = ['radius_worst', \n        'texture_worst', \n        'perimeter_worst', \n        'area_worst', \n        'smoothness_worst', \n        'compactness_worst', \n        'concavity_worst',\n        'concave points_worst', \n        'symmetry_worst', \n        'fractal_dimension_worst']\ndf = df.drop(cols, axis=1)\n\n# then, drop all columns related to the \"perimeter\" and \"area\" attributes\ncols = ['perimeter_mean',\n        'perimeter_se', \n        'area_mean', \n        'area_se']\ndf = df.drop(cols, axis=1)\n\n# lastly, drop all columns related to the \"concavity\" and \"concave points\" attributes\ncols = ['concavity_mean',\n        'concavity_se', \n        'concave points_mean', \n        'concave points_se']\ndf = df.drop(cols, axis=1)\n\n# verify remaining columns\ndf.columns","99081d53":"# Draw the heatmap again, with the new correlation matrix\ncorr = df.corr().round(2)\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nf, ax = plt.subplots(figsize=(20, 20))\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\nplt.tight_layout()","92fce7d6":"X=df.drop(['diagnosis'],axis=1)\ny = df['diagnosis']","4a73fe0d":"from sklearn.model_selection import train_test_split","d061ab7c":"X_train, X_test,y_train, y_test=train_test_split(X,y,test_size=0.3,random_state=40)","c6b15054":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\n\nX_train=ss.fit_transform(X_train)\nX_test=ss.fit_transform(X_test)","b0bf830e":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\n\nmodel1=lr.fit(X_train,y_train)\nprediction1=model1.predict(X_test)","c0dffb45":"from sklearn.metrics import confusion_matrix\n\ncm=confusion_matrix(y_test,prediction1)\ncm","81f518e7":"sns.heatmap(cm,annot=True)\nplt.savefig('h.png')","933790a4":"TP=cm[0][0]\nTN=cm[1][1]\nFN=cm[1][0]\nFP=cm[0][1]\nprint('Testing Accuracy:',(TP+TN)\/(TP+TN+FN+FP))","f0c9e243":"from sklearn.metrics import accuracy_score","469b7559":"accuracy_score(y_test,prediction1)","0714de21":"from sklearn.tree import DecisionTreeClassifier\n\ndtc=DecisionTreeClassifier()\nmodel2=dtc.fit(X_train,y_train)\nprediction2=model2.predict(X_test)\ncm2= confusion_matrix(y_test,prediction2)","69fbe429":"cm2","ae6af761":"accuracy_score(y_test,prediction2)","abd070c8":"from sklearn.ensemble import RandomForestClassifier\n\nrfc=RandomForestClassifier()\nmodel3 = rfc.fit(X_train, y_train)\nprediction3 = model3.predict(X_test)\nconfusion_matrix(y_test, prediction3)","2fcf78a3":"accuracy_score(y_test, prediction3)","aca12e2b":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, prediction3))","5f182b5f":"print(classification_report(y_test, prediction1))\n\nprint(classification_report(y_test, prediction2))","e467bb7a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB","115eea9d":"models=[]\n\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\n","b00e6325":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score","04efe96f":"# evaluate each model\n\nresults =[]\nnames=[]\nfor name , model in models:\n    kfold=KFold(n_splits=10, random_state=40)\n    cv_results= cross_val_score(model, X_train, y_train, cv=kfold,scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    \n    msg= '%s:, %f, (%f)' % (name, cv_results.mean(), cv_results.std())\n    print(msg)","2332387c":"# make predictions on test datasets\n\nSVM = SVC()\nSVM.fit(X_train, y_train)\npredictions= SVM.predict(X_test)\nprint(accuracy_score(y_test, predictions))\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))","a54bc89b":"## clean and prepare the data","2fb214df":"TP :112 cases are  correctly identified \nTN :53 are correctly rejected\nFN : 3 are incorrectly rejected and \nFP : 3 are incorrectly identified","2d00cbe0":"#### K Nearest Neighbor (K NN)\n#### Support Vector Machine\n#### Naive Bayes","67549709":"almost perfectly linear patterns between the radius, perimeter and area attributes are hinting at the presence of multicollinearity between these variables. (they are highly linearly related)\nAnother set of variables that possibly imply multicollinearity are the concavity, concave_points and compactness.","b3c32af4":"## Load the Data","1437e107":"## Import Libraries","a64b6a64":"##### We are getting the best accuracy with SVM which is 96.4%  , the model is predicting with 96% accuracy on our test data\n","eba6760f":"radius_mean , perimeter _mean, area_mean have a high correlation with malignant tumor","b8a284d6":"we can verify the presence of multicollinearity between some of the variables. \nFor instance, the radius_mean column has a correlation of 1 and 0.99 with perimeter_mean and area_mean columns, respectively.\nThis is because the three columns essentially contain the same information, which is the physical size of the observation\n(the cell). \nTherefore we should only pick ONE of the three columns when we go into further analysis.","8a26bf47":"also there is multicollinearity between the attributes compactness, concavity, and concave points. So we can choose just ONE\nout of these, I am going for Compactness.","1da7a65d":"Another place where multicollienartiy is apparent is between the \"mean\" columns and the \"worst\" column.\nFor instance, the radius_mean column has a correlation of 0.97 with the radius_worst column.","1489dfa6":"#### Decision Tree","ee55a9e9":"#def diagnosis_value(diagnosis):\n    if diagnosis == 'M':\n        return 1\n    else:\n        return 0\n\n#df['diagnosis'] = df['diagnosis'].apply(diagnosis_value)","03a80eda":"#### Logistic Regression","b7256d7b":"## Building Model\n","1de75ac3":"Multicollinearity is a problem as it undermines the significance of independent varibales and we fix it \nby removing the highly correlated predictors from the model\nUse Partial Least Squares Regression (PLS) or Principal Components Analysis, regression methods that cut the number \nof predictors to a smaller set of uncorrelated components.","75f6a533":"#### Random Forest","8bcb0fd6":"### Feature Scaling","ff9ba548":"### Models and finding out the Best one"}}