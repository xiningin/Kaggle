{"cell_type":{"e6c2545e":"code","7851ee1d":"code","77d17d1d":"code","ae645381":"code","908e3967":"code","eabd4095":"code","be5f10ea":"code","359577c1":"code","8a46aac2":"code","f70c5d31":"code","5ac7ef39":"code","e272a4b2":"code","15bf636a":"code","a2e9b1a9":"code","9858abe6":"code","5da20ae5":"code","490839f3":"code","90d86cc6":"code","b87f0326":"code","37e7c891":"code","3a408400":"code","e60bcda6":"code","8e515665":"code","e2445954":"code","39e22ddd":"code","696e025e":"code","74b174ff":"code","093e837d":"code","d8c359cf":"code","90ce5d54":"code","697a4fc1":"code","6fc3b6b0":"code","e4b8e7cc":"code","c03819f5":"code","414efa0e":"code","0cac489c":"code","c85a4cf9":"code","99ae5ceb":"code","fcd180f1":"code","4a5de286":"code","1a7e4cf7":"markdown","a8bb75f8":"markdown","3cc9219a":"markdown","5daff7f6":"markdown","59db0959":"markdown"},"source":{"e6c2545e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7851ee1d":"!pip install numpy","77d17d1d":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","ae645381":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","908e3967":"train.info()","eabd4095":"test.info()","be5f10ea":"all = pd.concat([train, test], sort = False)\nall.info()","359577c1":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","8a46aac2":"all.info()","f70c5d31":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","5ac7ef39":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","e272a4b2":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","15bf636a":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","a2e9b1a9":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","9858abe6":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","5da20ae5":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","490839f3":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","90d86cc6":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","b87f0326":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","37e7c891":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","3a408400":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","e60bcda6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","8e515665":"from sklearn.ensemble import RandomForestClassifier","e2445954":"RF_model = RandomForestClassifier()","39e22ddd":"from sklearn.model_selection import GridSearchCV","696e025e":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \nparameters = {'n_estimators' : (10,30,50,70,90,100)\n              , 'criterion' : ('gini', 'entropy')\n              , 'max_depth' : (3,5,7,9,10)\n              , 'max_features' : ('auto', 'sqrt')\n              , 'min_samples_split' : (2,4,6)\n              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n             }","74b174ff":"RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","093e837d":"RF_grid_model = RF_grid.fit(X_train, y_train)","d8c359cf":"RF_grid_model.best_estimator_","90ce5d54":"RF_model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='entropy', max_depth=3, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=4,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","697a4fc1":"RF_model.fit(X_train, y_train)","6fc3b6b0":"predictions = RF_model.predict(X_test)\npredictions","e4b8e7cc":"print(f'Test : {RF_model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_model.score(X_train, y_train):.3f}')\n      ","c03819f5":"all_test.head()","414efa0e":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","0cac489c":"TestForPred.info()","c85a4cf9":"t_pred = RF_model.predict(TestForPred).astype(int)","99ae5ceb":"PassengerId = all_test['PassengerId']","fcd180f1":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","4a5de286":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","1a7e4cf7":"****Extra Features:","a8bb75f8":"****Train\/Test Split","3cc9219a":"****Check Accuracy","5daff7f6":"### Build Random Forest","59db0959":"****Final Predictions"}}