{"cell_type":{"48464b02":"code","41f85c60":"code","06aef745":"code","a49193a6":"code","ad567af1":"code","1661e559":"code","9c88ca18":"code","4d01bc12":"code","28b5ee65":"code","6833fdeb":"code","b98b592e":"code","5125566d":"code","753aa81e":"code","55c69cea":"code","c4eac3b3":"code","b52fbaec":"code","da69694b":"code","d0ec47aa":"code","18d06dc0":"code","c0738d11":"code","19fb9653":"code","c91c45d8":"code","4f620d64":"code","13d2f695":"code","1003abb6":"code","335fd4d1":"code","836c5423":"code","306e7517":"code","a2bff57d":"code","522863bf":"code","7104dd9c":"code","68d28252":"code","d3131836":"code","86abbb81":"code","2d6e2aef":"code","e05be20c":"code","f7bfeee7":"code","705c8677":"code","786cff1f":"markdown","944b1534":"markdown","691c089a":"markdown","951d89f6":"markdown","4bba7fb2":"markdown","f17fab29":"markdown","c3c22c6d":"markdown","0561d87a":"markdown","63230dad":"markdown","378cdc75":"markdown","931180d8":"markdown","8e708cda":"markdown","c0a43ad3":"markdown","0ebe9977":"markdown","b9185b7f":"markdown","4df80024":"markdown","e57c2598":"markdown","21031c04":"markdown"},"source":{"48464b02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","41f85c60":"database=pd.read_csv(\"..\/input\/2017.csv\") #database variable\n","06aef745":"print(database.info())\n","a49193a6":"# \".\" replace \"_\" because accessing the fields will cause problems with dot\n#example: Happiness.Rank raplace Happiness_Rank\ndatabase.columns=[i.replace(\".\",\"_\") for i in database.columns] #t\u00fcm alan isimlerine nokta yerine _ ile de\u011fi\u015ftirdim kodlamadayken problem olmas\u0131ndan kaynakl\u0131\ndatabase.columns","ad567af1":"database.head(5) # en mutlu ilk 5 \u00fclke","1661e559":"\ndatabase.Generosity.plot(kind='line',color='blue',label='Generosity',linewidth=2,grid=True,linestyle='-')\ndatabase.Freedom.plot(color='red',label='Freedom',linewidth=2,grid=True,linestyle=':')\nplt.legend(loc='upper right')\nplt.xlabel('Happiness Rank')\nplt.ylabel('Freedom and Generosity')\nplt.title('Freedom vs Generosity')\nplt.show()\n","9c88ca18":"\ndatabase.plot(kind=\"scatter\",x=\"Happiness_Rank\",y=\"Health__Life_Expectancy_\", color=\"green\")\nplt.xlabel(\"Happiness Rank\")\nplt.ylabel(\"Health Life Expectancy\")\nplt.title(\"Happiness Rank vs Health Life Expectancy\")\nplt.show()\n","4d01bc12":"# with score of comparison\ndatabase.plot(kind=\"scatter\",x=\"Happiness_Score\",y=\"Health__Life_Expectancy_\", color=\"green\")\nplt.xlabel(\"Happiness Score\")\nplt.ylabel(\"Health Life Expectancy\")\nplt.title(\"Happiness Score vs Health Life Expectancy\")\nplt.show()","28b5ee65":"#norway and turkey match\nnorwayTurkey=database[(database[\"Country\"]==\"Norway\") | (database[\"Country\"]==\"Turkey\")]\nnorwayTurkey","6833fdeb":"\n#The most happy country with the most unhappy country comparison\nminRank=max(database[\"Happiness_Rank\"]) # Lowest happy country\nmaxRank=min(database[\"Happiness_Rank\"]) # the most happy country\nprint(\"Un Happy: \",minRank)\nprint(\"Happy: \",maxRank)\nhpCountries=database[(database[\"Happiness_Rank\"]==minRank) | (database[\"Happiness_Rank\"]==maxRank)]\nhpCountries","b98b592e":"#Tuple example\ndef tuple_example():\n    values=database[(database[\"Happiness_Rank\"]>=1) & (database[\"Happiness_Rank\"]<3)]\n    return values[\"Country\"]\na,b=tuple_example() # two values, a=Norway, b=Denmark\nprint(a,b)","5125566d":"#Scope Example\nname=\"global scope\"\ndef scopeFunc():\n    name=\"Local Scope\"\n    return name\nprint(name) #global scope #main code block\nprint(scopeFunc()) # local scope in method","753aa81e":"#Python built in scope examples: print, len, int,str etc.\nimport builtins\ndir(builtins)","55c69cea":"#Nested Functions\n\n#Example: name and surname combining method and printer method\n#Nested Method Starting.\ndef printerFunc(name,surname): #External method\n    def comibinedNames(name,surname):#internal method\n        return name+\" \"+surname\n    print(name,surname)\n#Nested Method Finished.\nname=\"Hakan\"\nsurname=\"Yusufoglu\"\nprinterFunc(name,surname)\n","c4eac3b3":"#Default Arguments(parameter)\n#Example mean method\ndef averageFunc(score1,score2,score3=48): #score3= Default value so default argumen\n    sumValues=score1+score2+score3\n    return sumValues\/3\nprint(averageFunc(10,10)) #score3 value=48 because default argumen=48\n#and\nprint(averageFunc(10,10,10)) #score3 value=10 because changed with 10","b52fbaec":"#Flexible Arguments\n#Example many value print\n\ndef sumFunc(*values):\n    for i in values:\n        print(i)\nsumFunc(10) #1 parameter\nprint(\"\")\nsumFunc(20,30)#two parameter etc (many parameter)","da69694b":"#Lamda Functions\n#Briefly faster function\n#Example mean method\n\navarage=lambda score1,score2,score3=48: (score1+score2+score3)\/3 #up: normal method\nprint(avarage(10,10))\nprint(avarage(10,10,10))","d0ec47aa":"#Example: Happiness Score mean\ndef meanFunction_2():\n    sumValuable=0\n    counter=0\n    meanValuable=0\n    for i in database[\"Happiness_Score\"]:\n        counter+=1\n        sumValuable+=i\n    meanValuable=sumValuable\/counter\n    return meanValuable\nprint(meanFunction_2())","18d06dc0":"database.head(10)\nmeanScore=sum(database[\"Happiness_Score\"])\/len(database[\"Happiness_Score\"])\n#Example happy or unhappy countries with dataframe(World Happiness Report)\ndatabase[\"Happy_Status\"]=[\"Happy\" if i>meanScore else \"UnHappy\" for i in database.Happiness_Score]\ndatabase.loc[60:75,[\"Country\",\"Happiness_Score\",\"Happy_Status\"]]","c0738d11":"print(database.shape)\n#155 rows, 13 columns\nprint(type(database.shape))\n#return tuple","19fb9653":"animalExample={\"Mammals\":(\"human\",\"lion\",\"dogg\"),\"invertebrate\":\"spider\"}\nprint(animalExample[\"Mammals\"])\ndataframe_1=pd.DataFrame.from_dict(animalExample) #\ninvert_1=dataframe_1[\"invertebrate\"].value_counts(dropna=False)\nmammals_1=dataframe_1[\"Mammals\"].value_counts(dropna=False)\nprint(mammals_1) \nprint(invert_1)\nprint(dataframe_1)","c91c45d8":"\ndatabase.describe()","4f620d64":"    database.boxplot(column=\"Happiness_Score\",by=\"Happy_Status\",grid=True)\n    #Result: Happy Countries= 7,80 between 5,30 values\n    #UnHappy Countries= 2,30 between 5,20 values","13d2f695":"groupingMelt=pd.melt(frame=database.head(),id_vars=\"Country\",value_vars=[\"Happiness_Rank\",\"Happiness_Score\",\"Happy_Status\"])\ngroupingMelt\n#variable= column name\n#value=data in column\n\n#Pivot Table\n\ngroupingMelt.pivot(index=\"Country\",columns=\"variable\",values=\"value\")\n","1003abb6":"column_2=database[\"Country\"].head()\ncolumn_3=database[\"Happy_Status\"].head()\ncolms=pd.concat([column_2,column_3],axis=1) # accept as axis=1 column axis=0 row \ncolms","335fd4d1":"#Does it exist nan country value or Is there repetitive data?\ndatabase[\"Country\"].value_counts(dropna=True) #Dropna Does it exist nan?","836c5423":"assert 1==1\ndatabase.head()","306e7517":"tables=database.loc[:,[\"Freedom\",\"Generosity\"]]\ntables.plot(subplots=True)\nplt.show()","a2bff57d":"tables.plot(kind=\"hist\",y=\"Generosity\",bins=50, range=(0,1),normed=True)","522863bf":"#\u0130ndexing data \n\nnewDataFrame=pd.read_csv(\"..\/input\/2017.csv\")\nnewDataFrame=newDataFrame.set_index(\"Happiness.Rank\")\nnewDataFrame[\"Country\"][1] #[1] happiness rank so new index","7104dd9c":"\ndef multiply(values):\n    return values*5\ndatabase.Generosity.apply(multiply)\n","68d28252":"library={\"books\":[\"Great Expectations\",\"Chess\",\"Oliver Twist\"],\"page_no\":[335,80,552],\"author\":[\"Charles_Dickens\",\"Stefan_Zweig\",\"Charles_Dickens\"]}\ndataframe_1=pd.DataFrame(library)\ndataframe_1","d3131836":"#pivot table\ndataframe_1.pivot(index=\"books\",columns=\"author\",values=\"page_no\")","86abbb81":"#group by using mean page no\ndataframe_1.groupby(\"author\").mean() #so Charles Dickens page number average=443.5 \n#Stefan Zweig page number average=80 because one entity","2d6e2aef":"#max page number by author\ndataframe_1.groupby(\"author\").max()","e05be20c":"#min page number by author\ndataframe_1.groupby(\"author\").min()","f7bfeee7":"dataframe_1.describe()","705c8677":"dataframe_1.info()","786cff1f":"**EXPLORATORY DATA ANALYSIS**\nLearning with examples\n","944b1534":"**TRANSFORMING DATA**","691c089a":"One Step: I'am learning Data Science step one\nTarget: Learn artificial intelligence\nThank you everybody.","951d89f6":"**PIVOTING DATA FRAMES**\n\n","4bba7fb2":"**Comparison  of Health Life Expectancy and Happiness Rank**\n\nScatter Plot: Used the library of matplotlib.\n\nX Axis: Happiness Rank \n\nY Axis: \n    1.  The most health expectancy value = 1.0\n    2. Lowest health expectancy value = 0.0\nResult: We can say healthy life expectancy in happy countries is high and vice versa","f17fab29":"**Cross country comparison and The most happy country with the most unhappy country comparison**","c3c22c6d":"**TIDY DATA**\nGrouping data melting... ","0561d87a":"**PANDAS FOUNDATION**","63230dad":"**Cleaning Data**\n\nColumn regulation for missing data, irregular data etc.","378cdc75":"**Comparison Of Freedom and Generosity By Happiness Rank**\n\nLine Plot: Used the library of matplotlib.\n\nX axis= Happiness Rank\n\nY axis= Comparison of freedom and generosity\n\nResult: We cannot say there is generosity in very freedom","931180d8":" **Most Happy 5 Countries**\n\nThis method indicates data up to numeric value written in parentheses.\n\n*Example using*: dataFrame.head(numaric_valuable)\n","8e708cda":"**CONCATENATING DATA**","c0a43ad3":"**MANIPULATING DATA FRAMES WITH PANDAS**","0ebe9977":"****","b9185b7f":"**MISSING DATA and TESTING WITH ASSERT**","4df80024":"**VISUAL EXPLORATORY DATA ANALYSIS**\n\n*  Black line at top is max\n*  Blue line at top is 75%\n*  Green line is median (50%)\n*  Blue line at bottom is 25%\n*  Black line at bottom is min\n*  There are no outliers","e57c2598":"**LIST COMPREHENS\u0130ON**\nWe use list comprehension for data analysis often.","21031c04":"**PYTHON DATA SCIENCE TOOLBOX**\n"}}