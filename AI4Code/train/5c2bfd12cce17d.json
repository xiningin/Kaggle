{"cell_type":{"3f5b61c1":"code","159c387a":"code","b4710e29":"code","25688c5a":"code","80469f18":"code","225400bb":"code","290f6aa7":"markdown","8a4a9824":"markdown","b1a88e5b":"markdown","9d1f5d44":"markdown","f8bb8290":"markdown"},"source":{"3f5b61c1":"%%javascript\n\n\/\/ disable scrolled windows\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}","159c387a":"! conda install hvplot -y  # makes nicer plots","b4710e29":"import json\nfrom glob import glob\nimport requests\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport hvplot.pandas\nimport holoviews as hv\nhv.extension(\"bokeh\")\nfrom IPython.display import display, HTML\n\nfrom kaggle_environments import make\n\npd.set_option('max_columns', 25)","25688c5a":"def get_info(bots, game_count):\n    # Initial request for submissions\n    info_url = \"https:\/\/www.kaggle.com\/requests\/EpisodeService\/ListEpisodes\"\n    bot_list = []\n    for bot in bots:\n        r = requests.post(info_url, json={\"SubmissionId\": bot})\n        r_bot = r.json()\n        bot_df = pd.DataFrame(r_bot['result']['episodes'])\n        bot_list.append(bot_df[-game_count:])\n    bot_all = pd.concat(bot_list, ignore_index=True)\n    return bot_all.drop_duplicates('id')\n\n\ndef download_replays(bot_all):\n    replay_url = \"https:\/\/www.kaggle.com\/requests\/EpisodeService\/GetEpisodeReplay\"\n    for id in bot_all.id:\n        try:\n            r = requests.post(replay_url, json={\"EpisodeId\": int(id)})\n        except:\n            print(\"Nope, not working.\")\n        else:\n            print(f\"Downloaded {id}.json\")\n            replay = r.json()\n            with open(f\"{id}.json\", 'w') as f:\n                f.write(replay['result']['replay'])\n\n\nbots = [17312714]  # stanleyjzheng\ngame_count = 6\n\ndownloads_unique = get_info(bots, game_count)\ndownload_replays(downloads_unique)\n","80469f18":"\ndef open_game(filename):\n    with open(filename) as file:\n        game = json.load(file)\n    env = make('halite', configuration=game['configuration'], steps=game['steps'])\n    env.render(mode=\"ipython\", width=500, height=400, autoplay=False, step=399)\n    return game\n\n\ndef plot_halite(game):\n    halite_start = game['steps'][1][0]['observation']['halite']\n    halite_end = game['steps'][399][0]['observation']['halite']\n    halite_start_2d = np.reshape(halite_start, (21,21))\n    halite_end_2d = np.reshape(halite_end, (21,21))\n    sns.set()\n    fig, axes = plt.subplots(ncols=2, figsize=(16, 6))\n    ax1, ax2 = axes\n    ax1.set_title(\"Starting Halite\")\n    ax2.set_title(\"Ending Halite\")\n    sns.heatmap(halite_start_2d.astype(np.int16), ax=ax1,square=True, cmap='viridis', fmt='d',\n                    annot=True, annot_kws={\"size\": 8})\n    sns.heatmap(halite_end_2d.astype(np.int16), ax=ax2,square=True, cmap='viridis', fmt='d',\n                    annot=True, annot_kws={\"size\": 8})  \n    plt.show()\n    \n\ndef get_types(game):\n    # board halite\n    halite = np.zeros((400,441), dtype=np.int16)\n    for step in np.arange(400):\n        halite[step] = game['steps'][step][0]['observation']['halite']\n\n    # player_halite\n    cash = np.zeros((400,2), dtype=np.uint32)\n    for step in np.arange(400):\n        for player in np.arange(2):\n            p_cash = game['steps'][step][0]['observation']['players'] \\\n                            [player][0]\n            cash[step,player] = p_cash\n\n    # yards: 10k, 20k, 30k, 40k at yard position\n    yards = np.zeros((400,441), dtype=np.uint16)\n    for step in np.arange(400):\n        for player in np.arange(2):\n            yard_dict = game['steps'][step][0]['observation']['players'] \\\n                            [player][1]\n            for v in yard_dict.values():\n                yards[step,v] = (player+1)*10_000\n\n    # ships: first digit is player number, remainder is cargo\n    ships = np.zeros((400,441), dtype=np.uint16)\n    for step in np.arange(400):\n        for player in np.arange(2):\n                ship_dict = game['steps'][step][0]['observation']['players'] \\\n                            [player][2]\n                for v in ship_dict.values():\n                    num = (player+1)*10_000 + v[1]\n                    ships[step, v[0]] = num\n\n    assets_dict = {'halite': halite,\n                   'cash': cash,\n                   'yards': yards,\n                   'ships': ships}\n    return assets_dict\n\n\n# filter arrays by player and return values\ndef p_mask_ships(a, player):\n    \"\"\"Player is from 0 to 1.\"\"\"\n    p = player+1\n    mask = (a > p*10_000) & (a < p*10_000+9_999)\n    return mask\n\n\ndef p_mask_yards(a, player):\n    \"\"\"Player is from 0 to 1.\"\"\"\n    p = player+1\n    mask = (a == p*10_000)\n    return mask\n\n\ndef make_dfs(assets_dict):\n    assets_long = np.zeros((400*2, 4), dtype=np.int32)\n    for i in range(2):\n        start = i*400\n        assets_long[start:start+400, 0] = assets_dict['cash'][:, i]\n        assets_long[start:start+400, 1] = np.where(\n            p_mask_ships(assets_dict['ships'],i),\n            np.mod(assets_dict['ships'],10000), 0).sum(axis=1)\n        assets_long[start:start+400, 2] = np.where(\n            p_mask_ships(assets_dict['ships'],i), 500, 0).sum(axis=1)\n        assets_long[start:start+400, 3] = np.where(\n            p_mask_yards(assets_dict['yards'],i), 500, 0).sum(axis=1)\n\n    assets_df = pd.DataFrame(data=assets_long , columns=['player_halite',\n                        'cargo', 'ship_value', 'yard_value'])\n    assets_df = assets_df.assign(\n            step = np.tile(np.arange(400), 2),\n            player = np.repeat(np.arange(2), 400),\n            total_assets = assets_df[['cargo',\n                'ship_value', 'yard_value']].sum(axis=1),\n            ship_count = assets_df.ship_value \/ 500,\n            yard_count = assets_df.yard_value \/ 500,\n            avg_cargo = assets_df.cargo\/assets_df.ship_value\/500\n            )\n    board_halite_df = pd.DataFrame({'step': np.arange(400),\n                        'board_halite': assets_dict['halite'].sum(axis=1)})\n    return board_halite_df, assets_df\n\n\ndef plot_steps(board_halite_df, assets_df):\n    plot_opts = dict(width=320, height=220,\n                     xlim=(0,400),\n                     xticks=list(range(0,401,50)),\n                      ylabel=\"\"\n                     )\n    asset_list = []\n    cmap = ['yellow', 'red', 'green', 'purple']\n    cols = ['player_halite', 'total_assets', 'ship_count', 'cargo',\n                'avg_cargo', 'yard_count']\n    h = board_halite_df.hvplot.line(x='step', y='board_halite', color='black',\n                                   **plot_opts)\n    \n    # Plot by asset type\n    for col in cols:\n        if col == 'total_assets':\n            start = h\n        else:\n            start = pd.DataFrame([0]).hvplot.line(**plot_opts) # blank\n\n        for i, (_, df) in enumerate(assets_df.groupby('player')):\n            start *= df.hvplot.line(x='step', y=col, title=col,\n                        color=cmap[i])\n        asset_list.append(start)\n\n    asset_layout = hv.Layout(asset_list).opts(shared_axes=False).cols(3) \\\n                        .relabel(\"Game stats\")\n    display(asset_layout)\n\n    # Plot by player\n    player_opts = dict(width=280, height=260, \n                       ylabel=\"\",\n                       legend='top_left'\n                       )\n    player_list = []\n    cols = ['player_halite','yard_value', 'ship_value']\n    for i, (p_name, df) in enumerate(assets_df.groupby('player')):\n        player = pd.DataFrame([0]).hvplot.line(**player_opts) # blank\n        for col in cols:\n            player *= df.hvplot.line(x='step', y=col, title=str(p_name),\n                                     cmap=['gray', 'blue', 'green'], **player_opts)\n        player_list.append(player)    \n\n    player_layout = hv.Layout(player_list).opts(shared_axes=False) \\\n                        .relabel(\"Halite, ship count, and yard count by player\")\n    display(player_layout)\n","225400bb":"# main\nfilenames = glob('*.json')\nfilenames.sort(reverse=True)\nfor f in filenames:\n    print(f)\n    game = open_game(f)\n    plot_halite(game)\n    asset_dict = get_types(game)\n    board_halite_df, assets_df = make_dfs(asset_dict)\n    plot_steps(board_halite_df, assets_df)","290f6aa7":"One thing you might see is how board halite grows until there are about 30 ships out there mining. So part of a good strategy is to build ships as quickly as possible in the first 100 moves. \n\n\nI hope this notebook helps with understanding bot performace. Good luck!","8a4a9824":"# Analyzing your games\n\nHere is code and charts you can use to see what's going on in our games.","b1a88e5b":"<img src=\"http:\/\/spiriferminerals.com\/foto_artyk\/inowroclaw\/Halite_Inowroclaw_20cma.jpg\" width=\"500\">\n","9d1f5d44":"The first step is to scrape some matches to review. Here's an example for getting the last several matches of a top-ranked bot.","f8bb8290":"The next blocks of code produce the following information:\n\n - a replay of the match\n - halite heatmaps at the beginning and end of the match\n - a series of graphs comparing each player during the match: halite score, total assets, ships, yards, and cargo\n - the same info organized by player"}}