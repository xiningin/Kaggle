{"cell_type":{"ae03c03f":"code","68601159":"code","d230b807":"code","367308f7":"code","52017812":"code","ba7dffe7":"code","4d3b8439":"code","25bc710f":"code","0326825c":"code","9f63916c":"code","4375b302":"code","da719a4f":"code","919d53e8":"code","8a0fd9f2":"code","4009f109":"code","e327f3b6":"markdown","c825c0f9":"markdown","0241bb14":"markdown","6ac863e1":"markdown","0956dccf":"markdown","786aa371":"markdown","3f35921e":"markdown","d174be75":"markdown","3ac5a036":"markdown","c168ddb2":"markdown","9b954312":"markdown","92f11f43":"markdown"},"source":{"ae03c03f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport ast\nimport os\nimport plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nfrom plotly.graph_objs import *\nfrom geopy.geocoders import Nominatim\nimport os\nimport re\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ninit_notebook_mode()\nprint('Files are:\\n\\t' + '\\t\\n\\t'.join(os.listdir(\"..\/input\")))\n\n# Any results you write to the current directory are saved as output.","68601159":"cleaning = pd.read_csv('..\/input\/prr-9545-street-sweeping-2013-2015-05.08.2015.csv')","d230b807":"cleaning.head()","367308f7":"print(\"Number of NaN Values in Each Column:\\n===================================================\")\ncleaning.isna().sum()","52017812":"def num_to_day(x):\n    return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][x]\ndef num_to_month(x):\n    return [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"][x - 1]\n        \n\ndef map_x(x):\n    if not pd.isna(x):\n        splited_hour = int(x.split(':')[0])\n        if splited_hour < 6:\n            return \"00AM-6AM\"\n        if splited_hour < 12 and splited_hour > 6:\n            return \"6AM-12PM\"\n        if splited_hour >= 12 and splited_hour < 18:\n            return \"12PM-6PM\"\n        if splited_hour > 18:\n            return \"6PM-00AM\"\n    else:\n        return None\n    \ndef map_street(x):\n    splited = x.split(' ')\n    if len(splited)  < 2:\n        return \"WALKER\"\n    else:\n        return splited[1]\n    \ndef prep_data(df):\n    df.set_index('Citation Number', inplace=True)\n    df[\"Citation_Date\"] = pd.to_datetime(df['Citation Date'], infer_datetime_format=True)\n    df[\"latitude\"] = df[\"Location 1\"].apply(lambda x:float(ast.literal_eval(x)[\"latitude\"]) if not pd.isna(x) else None)\n    df[\"longitude\"] = df[\"Location 1\"].apply(lambda x:float(ast.literal_eval(x)[\"longitude\"]) if not pd.isna(x) else None)\n    df[\"time_of_the_day\"] = df[\"Citation Time\"].apply(map_x)\n    df[\"street\"] = df[\"Location\"].apply(map_street)\n    df[\"year\"] = df[\"Citation_Date\"].apply(lambda x:x.year)\n    df[\"month_of_year\"] = df[\"Citation_Date\"].apply(lambda x:num_to_month(x.month))\n    df[\"day_of_month\"] = df[\"Citation_Date\"].apply(lambda x:x.day)\n    df[\"day_of_week\"] = df[\"Citation_Date\"].apply(lambda x:num_to_day(x.weekday()))\n    df.drop([\"Citation Date\", \"Location 1\"], inplace=True, axis=1)\n    return df","ba7dffe7":"cleaning = prep_data(cleaning)","4d3b8439":"records_per_year = cleaning.groupby(by=\"year\", axis=0).count()\nprint(\"The records are from 2013 to 2015(8th of May)\\n===============================================\")\nfor x in range(2013, 2016):\n    print(\"\\n Year {}: \\n\\t{:,} Tickets\".format(x, records_per_year.loc[x][\"Location\"]))","25bc710f":"cleaning.head(5)","0326825c":"trace = go.Histogram(x=cleaning[\"Issued Amount\"], xbins=dict(start=np.min(cleaning[\"Issued Amount\"]), size=0.75, end=np.max(cleaning[\"Issued Amount\"])),\n                   marker=dict(color='rgb(75, 150, 25)'))\n\nlayout = go.Layout(\n    title=\"Issued Amount Frequency Counts\"\n)\n\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename='histogram-freq-counts-larger-bins')","9f63916c":"lst_tuples = list(zip(cleaning[\"street\"].values, list(cleaning[\"street\"].groupby(by=cleaning[\"street\"].values, axis=0).count())))\nlst_tuples.sort(key=lambda tup: tup[1], reverse=True)\nstreets_names = [x[0] for x in lst_tuples]\ncount_streets = [x[1] for x in lst_tuples]\ntrace1 = {\n  \"y\": count_streets[:50], \n  \"x\": streets_names[:50], \n  \"marker\": {\"color\": \"rgb(100, 100, 5)\"}, \n  \"type\": \"bar\"\n}\nlayout = {\n  \"title\": \"Streets Violation Frequency\", \n  \"xaxis\": {\n    \"tickfont\": {\"size\": 12}, \n    \"title\": \"<br><br><br>Street\",\n    \"tickangle\": 45\n  }, \n  \"yaxis\": {\n    \"title\": \"Frequency <br>\", \n    \"titlefont\": {\"size\": 12}\n  }\n}\nfig = Figure(data=[trace1], layout=layout)\niplot(fig, filename='Where Do Most Tickets are Given ? (TOP 50 Streets)')","4375b302":"fig, ax = plt.subplots(nrows=3, ncols=1)\nplt.subplots_adjust(left=0, right=2.2, top=3, bottom=0)\ni = 0\nfor row in ax:\n        year = 2013 + i\n        streets = np.sort(cleaning[cleaning[\"year\"] == year].groupby(by='street', as_index=False, axis=0).count().nlargest(12,'Location')[\"street\"].values, axis=-1, kind='mergesort')\n        row.set_title(str(year))\n        sns.countplot(data=cleaning[cleaning[\"street\"].isin(streets)], x=\"street\",hue=\"time_of_the_day\", palette=\"Set1\", ax=row, order=streets)\n        i+=1","da719a4f":"fig, ax = plt.subplots(nrows=3, ncols=3)\nplt.subplots_adjust(left=0, right=3, top=7, bottom=0)\ni_list = 0\ncleaning_years = [x[x[\"year\"] == y] for x, y in zip([cleaning, cleaning, cleaning], [2013, 2014, 2015])]\nfor i, row in enumerate(ax):\n    for j, col in enumerate(row):\n        year_string = str(2013 + i)\n        if j == 1:\n            month_or_day = 'Day of The Month'\n            title = year_string+ '\\n' + month_or_day +'\\n Tickets Count'\n            col.set_title(title)\n            col.set_xticklabels(col.get_xticklabels(), rotation=90)\n            sns.countplot(data=cleaning_years[i_list], x=\"day_of_month\" ,palette=\"Set1\", ax=col)\n        elif j == 2:\n            month_or_day = 'Month of The Year'\n            title = year_string + '\\n' + month_or_day +'\\n Tickets Count'\n            col.set_title(title)\n            col.set_xticklabels(col.get_xticklabels(), rotation=45)\n            sns.countplot(data=cleaning_years[i_list], x=\"month_of_year\",palette=\"Set1\", ax=col, order=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"])\n        else:\n            month_or_day = 'Day of The Week'\n            title = year_string+ '\\n' + month_or_day +'\\n Tickets Count'\n            col.set_title(title)\n            col.set_xticklabels(col.get_xticklabels(), rotation=25)\n            sns.countplot(data=cleaning_years[i_list], x=\"day_of_week\" ,palette=\"Set1\", ax=col, order=[ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"])\n            \n    i_list += 1","919d53e8":"g = sns.catplot(data=cleaning,kind=\"count\", x=\"day_of_week\",col=\"year\", hue=\"time_of_the_day\", palette='magma', order=[ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"])\ng.set_xticklabels(rotation=25)","8a0fd9f2":"temp = cleaning.groupby(by=\"street\").count()\ntemp2 = cleaning.groupby(by=\"street\").mean()\nstreets = cleaning.groupby(by=\"street\", as_index=False).count().nlargest(25000, \"year\")[\"street\"].values\ntuples = []\nfor street in streets:\n    tuples.append((street, temp.loc[street][\"year\"], cleaning[cleaning[\"street\"] == street].iloc[0][\"latitude\"], cleaning[cleaning[\"street\"] == street].iloc[0][\"longitude\"]))\ndata = [\n    go.Scattermapbox(\n        lat=[i[2] for i in tuples],\n        lon=[i[3] for i in tuples],\n        mode='markers',\n        name=\"Tickets\",\n        marker=dict(\n            size = (np.array([i[1] for i in tuples]) \/ 1000) + 20,\n            color='rgb(135, 14, 87)',\n            opacity=0.5\n        ),\n        text= [\"{:,} Tickets, Street: {} \".format(x[1], x[0]) for x in tuples]\n    )\n]\n\nlayout = go.Layout(\n    autosize=True,\n    hovermode='closest',\n    title=\"Tickets Map\", \n    mapbox=dict(\n        accesstoken=\"pk.eyJ1Ijoic3luY3VzaCIsImEiOiJjam05aTEyNHUwMDNnM3JscjRvODFuMDY1In0.Iw54eGGxr-h70qh86bMFjA\",\n        bearing=0,\n        center=dict(\n            lat=37.8044,\n            lon=-122.2711\n        ),\n        pitch=0,\n        zoom=10\n    ),\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='Multiple Mapbox')","4009f109":"ax = sns.barplot(x=\"year\", y=\"Issued Amount\", data=cleaning.groupby(by=\"year\", axis=0, as_index=False).sum(), palette='magma')\nax.set_title(\"Oakland Revenue from Cleaning Tickets\")\nax.set_ylabel(\"Revenue (in $)\")\nax.set_yscale('log')\nprint(\"Oakland Municipality Made \\n\")\nsumi = 0\nfor x, y in zip(cleaning.groupby(by=\"year\", axis=0)[\"Issued Amount\"].sum(), [\"2013\", \"2014\", \"2015\"]):\n    print(\"\\t{:,} $ in {} from Cleaning Tickets\\n\".format(x, y))\n    sumi += x \nprint(\"Oakland Municipality Made {:,} $ in Total\".format(sumi))","e327f3b6":"# Data Import and Preparation (Cleaning+ + Adding Features + Data Integrity) <a id=\"3\"><\/a>\n----------------------------------------","c825c0f9":"### Prepare the Data for Work","0241bb14":"# Analysis <a id=\"4\"><\/a>\n-------------------------------------","6ac863e1":"## Adding Features","0956dccf":"# Introduction <a id=\"1\"><\/a>\n-----------------------------------------------------------","786aa371":"## Import Data","3f35921e":"> Oakland is the largest city and the county seat of Alameda County, California, United States. A major West Coast port city, Oakland is the largest city in the East Bay region of the San Francisco Bay Area, the third largest city overall in the San Francisco Bay Area, the eighth most populated city in California, and the 45th largest city in the United States. With a population of 412,040 as of 2016, it serves as a trade center for the San Francisco Bay Area; its Port of Oakland is the busiest port in the San Francisco Bay, the entirety of Northern California, and the fifth busiest in the United States of America. An act to incorporate the city was passed on May 4, 1852, and incorporation was later approved on March 25, 1854, which officially made Oakland a city. Oakland is a charter city.\nOakland's territory covers what was once a mosaic of California coastal terrace prairie, oak woodland, and north coastal scrub. Its land served as a rich resource when its hillside oak and redwood timber were logged to build San Francisco.Oakland's fertile flatland soils helped it become a prolific agricultural region. In the late 1860s, Oakland was selected as the western terminal of the Transcontinental Railroad. Following the 1906 San Francisco earthquake, many San Francisco citizens moved to Oakland, enlarging the city's population, increasing its housing stock and improving its infrastructure. It continued to grow in the 20th century with its busy port, shipyards, and a thriving.\n## Oakland on the Map\n![on us map](https:\/\/www.worldatlas.com\/img\/locator\/city\/031\/22331-oakland-locator-map.jpg)\n![meow](http:\/\/art-en-provence.com\/wp-content\/uploads\/2018\/07\/Dadabecbee-Pictures-In-Gallery-Map-Of-Oakland-California.jpg)\n## Skyline\n![city skyline](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/d\/d5\/OAKLAND%2C_CA%2C_USA_-_Skyline_and_Bridge.JPG\/1280px-OAKLAND%2C_CA%2C_USA_-_Skyline_and_Bridge.JPG)\n\n\n# So What is the Data All About?\n\n### The data contains all the parking tickets given to car owners who parked their car in an illegal spot and blocked the street sweeping vehicles.\n\n### The fine currently stands on 66 $\n\n\n![meow5](http:\/\/www.parksomerville.com\/images\/showcase-sweepers.jpg)\n","d174be75":"## Data Integrity","3ac5a036":"# Table of Contents\n-------------------------------------\n1. [ Introduction ](#1)\n2. [Packages Import](#2)\n3. [Data Import and Preparation (Cleaning + Adding Features + Data Integrity)](#3)\n4. [Analysis](#4)","c168ddb2":"### New Data After Adding New Features","9b954312":"# Packages Import <a id=\"2\"><\/a>\n----------------------------","92f11f43":"## Sneak Peak at the Data"}}