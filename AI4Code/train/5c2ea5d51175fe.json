{"cell_type":{"10d328fa":"code","831089ea":"code","c25e7cda":"code","667cf559":"code","c11a78aa":"code","e74b0157":"code","7d2ea9fa":"code","ba38f761":"code","2cbd187f":"code","1c24f847":"code","88f68c51":"markdown","a335b09f":"markdown","dada9f89":"markdown"},"source":{"10d328fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","831089ea":"import json\nimport math\nimport os\n\nimport cv2\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, Callback\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nfrom tqdm import tqdm\nimport imgaug as ia\nfrom imgaug import augmenters as iaa\n\n%matplotlib inline","c25e7cda":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\n\nprint(train_df.shape)\n\ntrain_df.head()","667cf559":"def display_samples(df, columns=5, rows=4):\n    fig = plt.figure(figsize=(5*columns, 4*rows))\n    \n    for i in range(columns*rows):\n        image_path = df.loc[i, 'id_code']\n        image_id = df.loc[i, 'diagnosis']\n        img = cv2.imread(f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_path}.png')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        fig.add_subplot(rows, columns, i+1)\n        plt.title(image_id)\n        plt.imshow(img)\n        \ndisplay_samples(train_df)","c11a78aa":"def crop_image_from_gray(img, tol=7):\n    if img.ndim == 2:\n        mask = img > tol\n        return img[np.ix_(mask.any(1), mask.any(0))]\n    \n    elif img.ndim == 3:\n        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        \n        mask = gray_img > tol\n        check_shape = img[:, :, 0][np.ix_(mask.any(1), mask.any(0))].shape[0]\n        \n        if check_shape == 0:\n            return img\n        else:\n            img1 = img[:, :, 0][np.ix_(mask.any(1), mask.any(0))]\n            img2 = img[:, :, 1][np.ix_(mask.any(1), mask.any(0))]\n            img3 = img[:, :, 2][np.ix_(mask.any(1), mask.any(0))]\n            img = np.stack([img1, img2, img3], axis=-1)\n        return img","e74b0157":"def circle_crop(img, sigmaX=10):   \n    \"\"\"\n    Create circular crop around image centre    \n    \"\"\"    \n    img = crop_image_from_gray(img)    \n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    \n    height, width, depth = img.shape    \n    \n    x = int(width\/2)\n    y = int(height\/2)\n    r = np.amin((x,y))\n    \n\n    circle_img = np.zeros((height, width), np.uint8)\n    cv2.circle(circle_img, (x,y), int(r), 1, thickness=-1)\n    img = cv2.bitwise_and(img, img, mask=circle_img)\n    img = crop_image_from_gray(img)\n    img=cv2.addWeighted (img, 4, cv2.GaussianBlur(img, (0,0), sigmaX), -4, 128)\n    \n    return img ","7d2ea9fa":"train_num = train_df[:20].shape[0]\nX_train = np.empty((train_num, 224, 224, 3), dtype=np.uint8)\n\nfor num, code in enumerate(tqdm(train_df[:20]['id_code'])):\n    img = cv2.imread('..\/input\/aptos2019-blindness-detection\/train_images\/' + code + '.png')\n    img = circle_crop(img)\n    img = cv2.resize(img, (224, 224))\n    X_train[num, :, :, :] = img","ba38f761":"columns=5\nrows=4\n\nfig = plt.figure(figsize=(5*columns, 4*rows))\n\nfor i in range(columns*rows):\n    img = X_train[i]\n    fig.add_subplot(rows, columns, i+1)\n    plt.imshow(img)","2cbd187f":"def img_aug(X, columns=5, rows=4):\n    aug_num = X.shape[0]\n    \n    #Augmentation\n    seq = iaa.SomeOf(3, [iaa.Affine(rotate=(-10, 10)), #\u56de\u8ee2\n                          iaa.Fliplr(0.5), #\u5de6\u53f3\u53cd\u8ee2\n                          iaa.Flipud(0.5), #\u4e0a\u4e0b\u53cd\u8ee2\n                          iaa.Affine(scale=(0.9, 1.1)), #\u62e1\u5927\u7e2e\u5c0f\n                          iaa.Multiply((0.7, 1.3)), #\u660e\u6697\n                          iaa.Dropout(0.02), #Dropout\n                          iaa.ContrastNormalization((0.85, 1.15), per_channel=0.5)\n                         ])\n    images = [X[i] for i in range(aug_num)]\n    image_aug = seq.augment_images(images)\n\n    #show\n    fig = plt.figure(figsize=(5*columns, 4*rows))\n    for num, img in enumerate(image_aug):\n        fig.add_subplot(rows, columns, num+1)\n        plt.imshow(img)\n        ","1c24f847":"img_aug(X_train)","88f68c51":"Augmentation(imgaug)","a335b09f":"Cropping  \nhttps:\/\/www.kaggle.com\/ratthachat\/aptos-updatedv14-preprocessing-ben-s-cropping","dada9f89":"Normal image"}}