{"cell_type":{"494ffaec":"code","5cad5a5f":"code","10440a67":"code","308cf61b":"code","f0f4ba83":"code","a26278e2":"code","d3587e2d":"code","8875b1b1":"code","8d34fcc0":"code","89d9fb07":"code","de00d978":"code","f94b5770":"code","78274efe":"code","177a8e6c":"code","468be1c3":"code","05f55eac":"code","424a5054":"code","5b94010b":"code","a0cec025":"code","9907917b":"code","6addab51":"code","bad335e4":"code","d6bb76cf":"code","27beafa6":"code","1fc9a490":"code","f02ba26b":"code","07ba8255":"code","41480b9e":"code","2f3e279a":"code","d8dd5300":"code","ef3b6228":"code","60b74cc9":"code","e91687c7":"code","8fc99c51":"code","badf17bd":"code","28d9010c":"code","700dedcd":"code","9c39699f":"code","ff111e83":"markdown","97d76706":"markdown","659e9828":"markdown","146bd364":"markdown","c781b6a3":"markdown","aaa58603":"markdown"},"source":{"494ffaec":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score,ConfusionMatrixDisplay,precision_score,recall_score,f1_score,classification_report,roc_curve,plot_roc_curve,auc,precision_recall_curve,plot_precision_recall_curve,average_precision_score\nfrom imblearn.over_sampling import SMOTE, ADASYN\nfrom imblearn.under_sampling import NearMiss, TomekLinks,  EditedNearestNeighbours \nfrom imblearn.combine import SMOTETomek\nfrom imblearn.combine import SMOTEENN\nfrom imblearn.pipeline import Pipeline as imbpipeline\nfrom imblearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import plot_confusion_matrix\nimport time\nimport folium\nfrom folium.plugins import HeatMap\nimport plotly.express as px\n\nplt.style.use('fivethirtyeight')\n%matplotlib inline\npd.set_option('display.max_columns', 32)","5cad5a5f":"pip install smote-variants","10440a67":"# sv.distance_SMOTE()","308cf61b":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndf.head()","f0f4ba83":"df.info()","a26278e2":"std_scaler = StandardScaler()\ndf['normAmount'] = std_scaler.fit_transform(df['Amount'].values.reshape(-1, 1))\ndf = df.drop(['Time','Amount'],axis=1)\ndf.head()","d3587e2d":"y = df['Class']\nX = df.drop(['Class'], axis=1)","8875b1b1":"X","8d34fcc0":"y","89d9fb07":"X.info()","de00d978":"X_train, X_test, y_train, y_test = train_test_split(X , y , test_size = 0.2, random_state=11)","f94b5770":"pipeline = make_pipeline(SMOTE(random_state=11), \n                              LogisticRegression(random_state=11))\n# params = {'C': [0.01, 0.1]} \nlog_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.005, 0.01, 0.02, 0.03, 0.04, 0.05, 0.1, 0.2, 0.4, 0.5, 0.6, 0.8, 1.0, 1.3, 1.5, 1.7, 2.0]}\n# new_params = {'svc__' + key: params[key] for key in params}\nnew_params = {'logisticregression__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","78274efe":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","177a8e6c":"cnf_matrix = confusion_matrix(y_test,y_test_predict)\nsns.heatmap(cnf_matrix, \n            xticklabels=['Not Stroke', 'Stroke'],\n            yticklabels=['Not Stroke', 'Stroke'],\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show\n","468be1c3":"pipeline = make_pipeline(ADASYN(), \n                              LogisticRegression(random_state=11))\nlog_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.005, 0.01, 0.02, 0.03, 0.04, 0.05, 0.1, 0.2, 0.4, 0.5, 0.6, 0.8, 1.0, 1.3, 1.5, 1.7, 2.0]}\nnew_params = {'logisticregression__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)\n# 0.9374572795625428 0.9074074074074074","05f55eac":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","424a5054":"cnf_matrix = confusion_matrix(y_test,y_test_predict)\nsns.heatmap(cnf_matrix, \n            xticklabels=['Not Stroke', 'Stroke'],\n            yticklabels=['Not Stroke', 'Stroke'],\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show\n\n# 5.2e+04 4.7e+03\n# 10      98","5b94010b":"pipeline = make_pipeline(SMOTETomek(), \n                              LogisticRegression(random_state=11))\nlog_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.05, 0.01, 0.1]}\nnew_params = {'logisticregression__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=3, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\n# model = pipeline.fit(X_train, y_train)\n# y_test_predict = model.predict(X_test)\n# print(classification_report(y_test,y_test_predict))\n# recall_score(y_test, y_test_predict)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","a0cec025":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","9907917b":"cnf_matrix = confusion_matrix(y_test,y_test_predict)\nsns.heatmap(cnf_matrix, \n            xticklabels=['Not Stroke', 'Stroke'],\n            yticklabels=['Not Stroke', 'Stroke'],\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show","6addab51":"pipeline = make_pipeline(EditedNearestNeighbours(), \n                              LogisticRegression(random_state=11))\nlog_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.05, 0.01, 0.1]}\nnew_params = {'logisticregression__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=3, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","bad335e4":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","d6bb76cf":"cnf_matrix = confusion_matrix(y_test,y_test_predict)\nsns.heatmap(cnf_matrix, \n            xticklabels=['Not Stroke', 'Stroke'],\n            yticklabels=['Not Stroke', 'Stroke'],\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show","27beafa6":"pipeline = make_pipeline(SMOTEENN(), \n                              LogisticRegression(random_state=11))\nlog_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.05, 0.01, 0.1]}\nnew_params = {'logisticregression__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=3, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","1fc9a490":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","f02ba26b":"cnf_matrix = confusion_matrix(y_test,y_test_predict)\nsns.heatmap(cnf_matrix, \n            xticklabels=['Not Stroke', 'Stroke'],\n            yticklabels=['Not Stroke', 'Stroke'],\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show","07ba8255":"pipeline = make_pipeline(NearMiss(), \n                              LogisticRegression(random_state=11))\nlog_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.005, 0.01, 0.02, 0.03, 0.04, 0.05, 0.1, 0.2, 0.4, 0.5, 0.6, 0.8, 1.0, 1.3, 1.5, 1.7, 2.0]}\nnew_params = {'logisticregression__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","41480b9e":"pipeline = make_pipeline(NearMiss(), \n                              KNeighborsClassifier())\nlog_params = {'leaf_size': list(range(1,5)), 'n_neighbors': list(range(1,5)), 'p':[1,2]}\nnew_params = {'kneighborsclassifier__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)\n","2f3e279a":"pipeline = make_pipeline(SMOTE(random_state=11), \n                              KNeighborsClassifier())\nlog_params = {'leaf_size': list(range(1,5)), 'n_neighbors': list(range(1,5)), 'p':[1,2]}\nnew_params = {'kneighborsclassifier__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","d8dd5300":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","ef3b6228":"cnf_matrix = confusion_matrix(y_test,y_test_predict)\nsns.heatmap(cnf_matrix, \n            xticklabels=['Not Stroke', 'Stroke'],\n            yticklabels=['Not Stroke', 'Stroke'],\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show","60b74cc9":"pipeline = make_pipeline(NearMiss(), \n                              SVC(random_state=11))\nparams = {'C': [0.001, 0.01, 0.05, 0.5, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0, 1.3, 1.5, 1.7, 2.0]} \n# log_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.01, 0.05, 0.5, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0, 1.3, 1.5, 1.7, 2.0]}\nnew_params = {'svc__' + key: params[key] for key in params}\n# new_params = {'logisticregression__' + key: log_params[key] for key in log_params}\nstratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","e91687c7":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","8fc99c51":"cnf_matrix = confusion_matrix(y_test,y_test_predict)\nsns.heatmap(cnf_matrix, \n            xticklabels=['Not Stroke', 'Stroke'],\n            yticklabels=['Not Stroke', 'Stroke'],\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show","badf17bd":"# pipeline = make_pipeline(SMOTE(random_state=11), \n#                               SVC(random_state=11))\n# params = {'C': [0.01]} \n# # log_params = {'penalty': ['none', 'l2'], 'C': [0.001, 0.01, 0.05, 0.5, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0, 1.3, 1.5, 1.7, 2.0]}\n# new_params = {'svc__' + key: params[key] for key in params}\n# # new_params = {'logisticregression__' + key: log_params[key] for key in log_params}\n# stratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\n# grid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\n# grid_search.fit(X_train, y_train)\n# cv_score = grid_search.best_score_\n# test_score = grid_search.score(X_test,y_test)\n# print(cv_score,test_score)","28d9010c":"# def show_metrics(title, accuracy, precision, recall, f1, auc):\n#     print(title, 'Results:\\n')\n#     print('Accuracy: {}'.format(round(np.mean(accuracy), 2)))\n#     print('Precision: {}'.format(round(np.mean(precision), 2)))\n#     print('Recall: {}'.format(round(np.mean(recall), 2)))\n#     print('F1-Score: {}'.format(round(np.mean(f1), 2)))\n#     print('AUC: {}'.format(round(np.mean(auc), 2)))\n#     print()\n#     print('*'*80)\n#     print()","700dedcd":"# smote_during_cv_accuracy = []\n# smote_during_cv_precision = []\n# smote_during_cv_recall = []\n# smote_during_cv_f1 = []\n# smote_during_cv_auc = []\n\n\n# kf = StratifiedKFold(n_splits=2, shuffle = False, random_state=11)\n# cv = KFold(n_splits=5, random_state=42)\n# for train, test in kf.split(X_train, y_train):\n#     t0 = time.time()  #start time    \n#     X_train_fold, y_train_fold = X_train[train], y_train[train]\n#     # Get the validation data\n#     X_val_fold, y_val_fold = X_train[test], y_train[test]\n#     pipeline = make_pipeline(SMOTE(random_state=11), \n#                               LogisticRegression(random_state=11))\n#     model = pipeline.fit(X_train_fold, y_train_fold)\n#     smote_during_cv_predictions = model.predict(X_val_fold)\n#     smote_during_cv_accuracy.append(pipeline.score(X_train[test], y_train[test]))\n#     smote_during_cv_precision.append(precision_score(y_train[test], smote_during_cv_predictions))\n#     smote_during_cv_recall.append(recall_score(y_train[test], smote_during_cv_predictions))\n#     smote_during_cv_f1.append(f1_score(y_train[test], smote_during_cv_predictions))\n#     smote_during_cv_auc.append(roc_auc_score(y_train[test], smote_during_cv_predictions))\n    \n    \n#     #confusion matrices --- since the no. of splits is 10, I must have 10 confusion matrices\n#     smote_during_cv_conf_matrices.append(confusion_matrix(y_train[test], smote_during_cv_predictions))\n    \n#     t1 = time.time()  #stop time\n#     print('Computation Time: {}s\\n'.format(round(t1-t0, 2)))\n#     print('*'*80)\n#     print()","9c39699f":"# show_metrics('SMOTE During Cross Validation', smote_during_cv_accuracy, smote_during_cv_precision, smote_during_cv_recall, smote_during_cv_f1, smote_during_cv_auc)","ff111e83":"# Edited Nearest Neighbor","97d76706":"# Reference: https:\/\/kiwidamien.github.io\/how-to-do-cross-validation-when-upsampling-data.html\n# https:\/\/analyticsindiamag.com\/hands-on-guide-to-loras-a-better-oversampling-algorithm\/\n# https:\/\/www.sciencedirect.com\/science\/article\/pii\/S1532046420300940","659e9828":"# SMOTE Logistic Regression","146bd364":"# SMOTE + ENN","c781b6a3":"# SMOTETomek\n","aaa58603":"# ADASYN"}}