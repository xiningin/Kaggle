{"cell_type":{"149cde9a":"code","9e08867c":"code","aea60b9e":"code","71a1e2b2":"code","2d1de2ca":"code","e3bdf65b":"code","a01217ce":"code","0799e0ad":"code","c1fef41b":"code","2726b721":"code","693078d2":"code","cedbcd3d":"code","3ba84eac":"code","466132ba":"code","3c258d5c":"code","19ac6faa":"code","df5891ef":"code","7b2803f7":"code","990d53bf":"code","3c50ed76":"code","9c943c54":"code","7ad7e9f2":"code","b4ed4337":"code","7552be6d":"code","6fb9f329":"code","c45fe3dd":"code","4e95b5ce":"code","5422c0a8":"code","e9eecce3":"code","574c68f6":"code","a7947d82":"code","fdd580b9":"code","5d758291":"code","d055c182":"code","527894cd":"code","d143d523":"code","d2ad6670":"code","126f0e73":"code","b61b4391":"code","03a60c9f":"code","d5f29dc1":"code","1430316b":"code","73016fec":"code","5aceb34b":"code","34871ceb":"code","8611a18a":"code","7b9cb647":"markdown","908d834c":"markdown","0dd2b9bb":"markdown","54e59a3e":"markdown","c75f261e":"markdown","44c478b5":"markdown","7fc66aaa":"markdown","3d1c89c3":"markdown","8579d274":"markdown","98316cc1":"markdown","8a80db07":"markdown","314f0d2a":"markdown","ce0c0cc3":"markdown"},"source":{"149cde9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom tqdm.notebook import tqdm\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# Any results you write to the current directory are saved as output.","9e08867c":"import os\nimport json\nfrom pprint import pprint\nfrom copy import deepcopy\n\nimport numpy as np\nimport pandas as pd","aea60b9e":"def format_name(author):\n    middle_name = \" \".join(author['middle'])\n    \n    if author['middle']:\n        return \" \".join([author['first'], middle_name, author['last']])\n    else:\n        return \" \".join([author['first'], author['last']])\n\n\ndef format_affiliation(affiliation):\n    text = []\n    location = affiliation.get('location')\n    if location:\n        text.extend(list(affiliation['location'].values()))\n    \n    institution = affiliation.get('institution')\n    if institution:\n        text = [institution] + text\n    return \", \".join(text)\n\ndef format_authors(authors, with_affiliation=False):\n    name_ls = []\n    \n    for author in authors:\n        name = format_name(author)\n        if with_affiliation:\n            affiliation = format_affiliation(author['affiliation'])\n            if affiliation:\n                name_ls.append(f\"{name} ({affiliation})\")\n            else:\n                name_ls.append(name)\n        else:\n            name_ls.append(name)\n    \n    return \", \".join(name_ls)\n\ndef format_body(body_text):\n    texts = [(di['section'], di['text']) for di in body_text]\n    texts_di = {di['section']: \"\" for di in body_text}\n    \n    for section, text in texts:\n        texts_di[section] += text\n\n    body = \"\"\n\n    for section, text in texts_di.items():\n        body += section\n        body += \"\\n\\n\"\n        body += text\n        body += \"\\n\\n\"\n    \n    return body\n\ndef format_bib(bibs):\n    if type(bibs) == dict:\n        bibs = list(bibs.values())\n    bibs = deepcopy(bibs)\n    formatted = []\n    \n    for bib in bibs:\n        bib['authors'] = format_authors(\n            bib['authors'], \n            with_affiliation=False\n        )\n        formatted_ls = [str(bib[k]) for k in ['title', 'authors', 'venue', 'year']]\n        formatted.append(\", \".join(formatted_ls))\n\n    return \"; \".join(formatted)","71a1e2b2":"def load_files(dirname):\n    filenames = os.listdir(dirname)\n    raw_files = []\n\n    for filename in tqdm(filenames):\n        filename = dirname + filename\n        file = json.load(open(filename, 'rb'))\n        raw_files.append(file)\n    \n    return raw_files\n\ndef generate_clean_df(all_files):\n    cleaned_files = []\n    \n    for file in tqdm(all_files):\n        features = [\n            file['paper_id'],\n            file['metadata']['title'],\n            format_authors(file['metadata']['authors']),\n            format_authors(file['metadata']['authors'], \n                           with_affiliation=True),\n            format_body(file['abstract']),\n            format_body(file['body_text']),\n            format_bib(file['bib_entries']),\n            file['metadata']['authors'],\n            file['bib_entries']\n        ]\n\n        cleaned_files.append(features)\n\n    col_names = ['paper_id', 'title', 'authors',\n                 'affiliations', 'abstract', 'text', \n                 'bibliography','raw_authors','raw_bibliography']\n\n    clean_df = pd.DataFrame(cleaned_files, columns=col_names)\n    clean_df.head()\n    \n    return clean_df","2d1de2ca":"biorxiv_dir = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/biorxiv_medrxiv\/biorxiv_medrxiv\/'\nfilenames = os.listdir(biorxiv_dir)","e3bdf65b":"all_files = []\n\nfor filename in filenames:\n    filename = biorxiv_dir + filename\n    file = json.load(open(filename, 'rb'))\n    all_files.append(file)","a01217ce":"cleaned_files = []\n\nfor file in tqdm(all_files):\n    features = [\n        file['paper_id'],\n        file['metadata']['title'],\n        format_authors(file['metadata']['authors']),\n        format_authors(file['metadata']['authors'], \n                       with_affiliation=True),\n        format_body(file['abstract']),\n        format_body(file['body_text']),\n        format_bib(file['bib_entries']),\n        file['metadata']['authors'],\n        file['bib_entries']\n    ]\n    \n    cleaned_files.append(features)","0799e0ad":"len(cleaned_files)","c1fef41b":"col_names = [\n    'paper_id', \n    'title', \n    'authors',\n    'affiliations', \n    'abstract', \n    'text', \n    'bibliography',\n    'raw_authors',\n    'raw_bibliography'\n]\n\nclean_df = pd.DataFrame(cleaned_files, columns=col_names)","2726b721":"len(clean_df)","693078d2":"smalldf=clean_df[['title','abstract','text','authors']]","cedbcd3d":"#smalldf['text'].iloc[1]\nfrom gensim.summarization.summarizer import summarize\nsmalldf['text'] = smalldf['text'].apply(lambda x: summarize(x))","3ba84eac":"clean_df['text'].iloc[1]","466132ba":"smalldf['text'].iloc[1]","3c258d5c":"import regex as re\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import LancasterStemmer, SnowballStemmer, RegexpStemmer, WordNetLemmatizer \n#this was part of the NLP notebook\nimport nltk\n#import sentence tokenizer\nfrom nltk import sent_tokenize\n#import word tokenizer\nfrom nltk import word_tokenize\n#list of stopwords\nfrom nltk.corpus import stopwords\nimport string\nimport spacy\nfrom spacy.lemmatizer import Lemmatizer\nfrom spacy.lookups import Lookups\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\nimport pandas as pd\nfrom collections import Counter","19ac6faa":"def remove_urls(text):\n    url_pattern = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url_pattern.sub(r'', text)\nlemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    return \" \".join([lemmatizer.lemmatize(word) for word in text.split()])\nSTOPWORDS = set(stopwords.words('english'))\ndef remove_stopwords(text):\n    \"\"\"custom function to remove the stopwords\"\"\"\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\npunct =[]\npunct += list(string.punctuation)\npunct += '\u2019'\npunct.remove(\"'\")\n\ndef remove_punctuations(text):\n    for punctuation in punct:\n        text = text.replace(punctuation, ' ')\n    return text\n","df5891ef":"def cleanText(col):\n    smalldf[col]=smalldf[col].str.lower()\n    smalldf[col]= smalldf[col].apply(lambda x: x.replace('\\n', ' '))\n    smalldf[col]= smalldf[col].apply(lambda text: remove_urls(text))\n    smalldf[col]= smalldf[col].str.split()\n    smalldf[col]= smalldf[col].apply(lambda final_df: [x for x in final_df if x.isalpha()])\n    smalldf[col]= smalldf[col].str.join(' ')\n    smalldf[col]= smalldf[col].apply(lambda text: remove_punctuations(text))\n    smalldf[col]= smalldf[col].apply(lambda text: lemmatize_words(text))\n    smalldf[col]= smalldf[col].apply(lambda text: remove_stopwords(text))\n    smalldf[col]= smalldf[col].map(lambda x: re.sub(r'\\d+', '', x))","7b2803f7":"cleanText('title')\ncleanText('abstract')\ncleanText('text')","990d53bf":"smalldf.tail()","3c50ed76":"\ndef extraCleaning(col):\n    smalldf[col]=smalldf[col].str.lower()\n    smalldf[col]=smalldf[col].str.replace('title','')\n    smalldf[col]=smalldf[col].str.replace('abstract','')\n    smalldf[col]=smalldf[col].str.replace('preprint','')\n    smalldf[col]=smalldf[col].str.replace('biorxiv','')\n    smalldf[col]=smalldf[col].str.replace('author','')\n    smalldf[col]=smalldf[col].str.replace('copyright','')\n    smalldf[col]=smalldf[col].str.replace('holder','')\n    smalldf[col]=smalldf[col].str.replace('https','')\n    smalldf[col]=smalldf[col].str.replace('license','')\n    smalldf[col]=smalldf[col].str.replace('wa','')\n    smalldf[col]=smalldf[col].str.replace('ha','')\n    smalldf[col]=smalldf[col].str.replace('medrxiv','')\n    smalldf[col]=smalldf[col].str.replace('granted','')\n    smalldf[col]=smalldf[col].str.replace('rights','')\n    smalldf[col]=smalldf[col].str.replace('reserved','')\n    smalldf[col]=smalldf[col].str.replace('holder','')\n","9c943c54":"extraCleaning('title')\nextraCleaning('abstract')\nextraCleaning('text')","7ad7e9f2":"smalldf.head()","b4ed4337":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nabstactCorpus = smalldf.abstract.values\nwordcloud = WordCloud(\n    width = 3000,\n    height = 2000,\n    background_color = 'black',max_words=1000).generate(str(abstactCorpus))\nfig = plt.figure(\n    figsize = (40, 30),\n    facecolor = 'k',\n    edgecolor = 'k')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.title('Abstract Corpus')\nplt.show()","7552be6d":"titleCorpus = smalldf.title.values\nwordcloud = WordCloud(\n    width = 3000,\n    height = 2000,\n    background_color = 'black',max_words=1000).generate(str(titleCorpus))\nfig = plt.figure(\n    figsize = (40, 30),\n    facecolor = 'k',\n    edgecolor = 'k')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.title('Title Corpus')\n\nplt.show()","6fb9f329":"\ntextCorpus = smalldf.text.values\nwordcloud = WordCloud(\n    width = 3000,\n    height = 2000,\n    background_color = 'black',max_words=1000).generate(str(textCorpus))\nfig = plt.figure(\n    figsize = (40, 30),\n    facecolor = 'k',\n    edgecolor = 'k')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.title('Text Corpus')\n\nplt.show()","c45fe3dd":"x=' '.join(str(x) for x in textCorpus) \nimport collections\nfrom nltk.util import ngrams \ntokens=x.split()\nop = ngrams(tokens, 1)\nop = collections.Counter(op)\nop.most_common(50)","4e95b5ce":"op2 = ngrams(tokens, 2)\nop2 = collections.Counter(op2)\nop2.most_common(50)","5422c0a8":"op2 = ngrams(tokens, 3)\nop2 = collections.Counter(op2)\nop2.most_common(100)","e9eecce3":"countVaccine = sum(1 for _ in re.finditer(r'\\b%s\\b' % re.escape('vaccine'), x))\ncountVaccine","574c68f6":"countCare = sum(1 for _ in re.finditer(r'\\b%s\\b' % re.escape('care'), x))\ncountCare","a7947d82":"countDiagnostics = sum(1 for _ in re.finditer(r'\\b%s\\b' % re.escape('diagnostics'), x))\ncountDiagnostics","fdd580b9":"def countOccurences(a, word): \n      \n    x = a.split(\" \") \n  \n    c = 0\n    for i in range(0, len(x)): \n\n        if (word == x[i]): \n           c = c + 1\n             \n    return c  ","5d758291":"smalldf['VaccineCount'] = smalldf['text'].apply(lambda x: countOccurences(x,'vaccine'))","d055c182":"smalldf[smalldf['VaccineCount']>0]","527894cd":"smalldf['CareCount'] = smalldf['text'].apply(lambda x: countOccurences(x,'care'))\nsmalldf[smalldf['CareCount']>0]","d143d523":"smalldf['DiagnosticsCount'] = smalldf['text'].apply(lambda x: countOccurences(x,'diagnostics'))\nsmalldf[smalldf['DiagnosticsCount']>0]","d2ad6670":"from gensim.models.doc2vec import Doc2Vec, TaggedDocument\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.manifold import TSNE\n!pip install TSNE","126f0e73":"tagged_data = [TaggedDocument(words=word_tokenize(_d.lower()), tags=[str(i)]) for i, _d in enumerate(smalldf['text'])]","b61b4391":"max_epochs = 100\nvec_size = 40\nalpha = 0.025\n\nmodel = Doc2Vec(size=vec_size,alpha=alpha, min_alpha=0.00025,min_count=1,dm =1)\n  \nmodel.build_vocab(tagged_data)\n\nfor epoch in range(max_epochs):\n    print('iteration {0}'.format(epoch))\n    model.train(tagged_data,\n                total_examples=model.corpus_count,\n                epochs=model.iter)\n    # decrease the learning rate\n    model.alpha -= 0.0002\n    # fix the learning rate, no decay\n    model.min_alpha = model.alpha","03a60c9f":"model.docvecs.most_similar(0)","d5f29dc1":"vec=[]\nfor i in range(0,len(model.docvecs)):\n    vec.append(model.docvecs[i])","1430316b":"v=pd.DataFrame(vec)","73016fec":"tsne = TSNE(n_components=2, verbose=1, perplexity=100, n_iter=1000)\ntsne_results = tsne.fit_transform(v)","5aceb34b":"import seaborn as sns\nplt.figure(figsize=(16,10))\n\nax=sns.scatterplot(x=tsne_results[:,0], y=tsne_results[:,1],palette=sns.color_palette(\"hls\", 10),legend=\"full\",alpha=0.3,color='red')\n\n\nax.set(xlabel='Dimension 1', ylabel='Dimension 2')\n\nplt.title('Vector Representation of Text Corpus in 2D')\nplt.show()","34871ceb":"smalldf['OriginalTitle']=clean_df['title']\nsmalldf['OriginalAbstract']=clean_df['abstract']\nsmalldf['OriginalText']=clean_df['text']","8611a18a":"smalldf.head(3)","7b9cb647":"## Using textrank by gensim to summarise the text of the papers","908d834c":"## Focusing only on this content related columns for this kernel.","0dd2b9bb":"## Visualising text vectors using T-SNE in 2D","54e59a3e":"## Putting the original elements back to one common dataframe.","c75f261e":"## We can also find most similar content at a particular index","44c478b5":"## Exploring occurences of keywords in the text corpus","7fc66aaa":"## Text Preprocessing","3d1c89c3":"# The goal of this notebook is to provide a guiding tool kit to navigate through different research papers faster.\n### Note: Prototyped on top of \"CORD-19: EDA, parse JSON and generate clean CSV\ud83e\uddf9\" kernel.\n","8579d274":"## Removing some frequent non informative words ","98316cc1":"## Finding frequencies of most common 1grams,2grams and 3grams in the text corpus","8a80db07":"## To find the text where keyword appeared","314f0d2a":"## Displaying word clouds for text, absract and title column ","ce0c0cc3":"## Converting text into vectors using Doc2Vec library by gensim"}}