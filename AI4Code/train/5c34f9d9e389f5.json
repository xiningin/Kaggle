{"cell_type":{"f69cc571":"code","a5ffe72c":"code","f1705f47":"code","a60c937f":"code","37bcd9bc":"code","17e8b17a":"code","6bffb69e":"code","2a461af4":"code","46806755":"code","badd65f4":"code","33322fae":"code","af7c2ce1":"code","b306604d":"code","44197a05":"code","ca8e88f2":"code","05ef0152":"code","4e2c5527":"code","3d2ce096":"code","eac60ec3":"code","14816e17":"code","988767b4":"code","6cc2c2e7":"code","233e2506":"code","6d6f26f7":"code","c581ee8e":"code","01fbe4c9":"code","3c15dabe":"code","395961b8":"code","291623f5":"code","28f7d0f3":"code","35c8f2fd":"code","ec74f78b":"code","58ddc66a":"code","3221fcec":"code","a08a0ba1":"code","59badb22":"code","f62f71bc":"code","57aeba8f":"code","c0bad465":"code","a08a2101":"code","cc4e1e36":"code","3fdc672c":"code","87b546ff":"code","972bdf01":"code","2ed6ed08":"code","8ba20a0d":"markdown","7befd78b":"markdown","fa1d3442":"markdown","6c1f0642":"markdown","19e2593d":"markdown","6bc1d3c0":"markdown","1945709e":"markdown","3a46beed":"markdown","1debb470":"markdown","8cdee71d":"markdown","d224b9da":"markdown","5c196db3":"markdown","eb0fdc15":"markdown","a1dd76a1":"markdown","19dd961f":"markdown","e5045dbb":"markdown","111f2c98":"markdown","cf1ab41e":"markdown","2e257972":"markdown","823fe0e3":"markdown","b41e232c":"markdown","49c58030":"markdown","880f18c0":"markdown","52790aeb":"markdown","7ebf40b1":"markdown","7c0343bd":"markdown","1803f56b":"markdown","aa1521f0":"markdown","712330b6":"markdown","dc6d0dc1":"markdown","52b8aafb":"markdown","e6d6f70a":"markdown","05c16f90":"markdown","866a8b36":"markdown","57bc9ea4":"markdown","1f7be6ed":"markdown","0772eeb2":"markdown","cb90bb76":"markdown","12f4ccf4":"markdown","5cb07a36":"markdown","48a6bafd":"markdown","441d6929":"markdown","c99294d2":"markdown","3458b160":"markdown","8251709d":"markdown","e67bd06e":"markdown","43b98f01":"markdown","10e55d59":"markdown","4cb02550":"markdown","3ca48504":"markdown","62fb99f9":"markdown","dec8997d":"markdown","5982a005":"markdown","e2dbb9b4":"markdown","c6ca0654":"markdown","54ed0d8f":"markdown","9af623c9":"markdown","f72c3d2a":"markdown","1f823e7e":"markdown","03118668":"markdown"},"source":{"f69cc571":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5ffe72c":"\"\"\"\npandas \u306e read_csv() \u306f\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u3001read_excel() \u306f\u66f4\u306b sheet_name \u3068\u3044\u3046\u5f15\u6570\u306b\u5bfe\u8c61\u30b7\u30fc\u30c8\u3082\u6307\u5b9a\u3057\u307e\u3059\u3002\n= \u306f\u4ee3\u5165\u6f14\u7b97\u5b50\u306a\u306e\u3067\u3001 = \u306e\u5de6\u8fba\u306b\u66f8\u3044\u305f\u5909\u6570\u306b\u95a2\u6570\u306e\u623b\u308a\u5024\u304c\u4ee3\u5165\u3055\u308c\u307e\u3059\u3002\"\"\"\n\n# read_csv()\ntrain = pd.read_csv('\/kaggle\/input\/club-data-set\/club_churn_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/club-data-set\/club_churn_test.csv')\nreal_y_test = pd.read_csv('\/kaggle\/input\/club-data-set\/real_y_test_2.csv')\n\n# read_excel\nproblem_statement = pd.read_excel(\"\/kaggle\/input\/club-data-set\/Assignment.xlsx\",\n                                  sheet_name=\"Problem statement\")","f1705f47":"problem_statement","a60c937f":"def to_string(value):\n    \"\"\"\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u3002\n\n    \u5f15\u6570\u3092 str \u578b\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002\u305f\u3060\u3057 numpy.nan \u304c\u6e21\u3055\u308c\u305f\u3089\u30d6\u30e9\u30f3\u30af\u3092\u8fd4\u3059\u3002\n    \"\"\"\n    return '' if str(value)==str(np.nan) else str(value)\n\nfor index, row in problem_statement.iterrows():\n    print(' '.join([to_string(row[0]), to_string(row[1])]))","37bcd9bc":"train","17e8b17a":"test","6bffb69e":"real_y_test","2a461af4":"# \u5404\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u6b21\u5143\u6570\u3068\u30ab\u30e9\u30e0\u540d\u3092\u3056\u3056\u3063\u3068\u78ba\u8a8d\u3057\u307e\u3059\nprint(f'club_churn_train.csv \u306e\u6b21\u5143\u6570\uff08\u884c\u6570, \u5217\u6570\uff09\u306f {train.shape} \u3067\u3059')\nprint(f'club_churn_train.csv \u306e\u5217\u540d\u4e00\u89a7\uff1a\\n{train.columns} ')\nprint(f'\\nclub_churn_test.csv \u306e\u6b21\u5143\u6570\u306f {test.shape} \u3067\u3059')\nprint(f'club_churn_test.csv \u306e\u5217\u540d\u4e00\u89a7\uff1a\\n{test.columns} ')\nprint(f'\\nreal_y_test_2.csv \u306e\u6b21\u5143\u6570\u306f {real_y_test.shape} \u3067\u3059')\nprint(f'real_y_test_2.csv \u306e\u5217\u540d\u4e00\u89a7\uff1a\\n{real_y_test.columns} ')","46806755":"train.info()","badd65f4":"# \u7b2c\u4e00\u5f15\u6570\u306b\u5909\u63db\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u3001format \u306b\u65e5\u4ed8\u306e\u66f8\u5f0f\u3092 Python \u304c\u8a8d\u8b58\u3067\u304d\u308b\u5f62\u5f0f\u3067\u6307\u5b9a\ntrain.START_DATE = pd.to_datetime(train.START_DATE, format='%Y%m%d')\ntrain.END_DATE = pd.to_datetime(train.END_DATE, format='%Y%m%d')\ntrain.info()","33322fae":"test.START_DATE = pd.to_datetime(test.START_DATE, format='%Y%m%d')\ntest.END_DATE = pd.to_datetime(test.END_DATE, format='%Y%m%d')\ntest.info()","af7c2ce1":"real_y_test.info()","b306604d":"train.describe()","44197a05":"test.describe()","ca8e88f2":"train.MEMBER_MARITAL_STATUS.unique()  # \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0.\u5217\u540d.unique()","05ef0152":"train.MEMBER_MARITAL_STATUS.value_counts()  # \u8981\u306f \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0.\u5217\u540d \u3068\u3059\u308c\u3070\u8868\u306e\u4e2d\u306e\u7279\u5b9a\u306e\u5217\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059","4e2c5527":"train.MEMBER_MARITAL_STATUS.nunique()","3d2ce096":"train.MEMBER_MARITAL_STATUS.value_counts(dropna=False)","eac60ec3":"train.MEMBER_MARITAL_STATUS.nunique(dropna=False)","14816e17":"for col in train.select_dtypes(exclude='number').columns:\n    print(f'\u5217\uff09{col}\uff1a')\n    print(f'{train[col].nunique(dropna=False)} \u7a2e\u985e\u306e\u30ab\u30c6\u30b4\u30ea\u304c\u5b58\u5728\u3057\u307e\u3059\uff1a')  # \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0[\u5217\u540d] \u3067\u3082\u500b\u3005\u306e\u5217\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\n    print(f'{train[col].value_counts(dropna=False)}\\n')","988767b4":"import matplotlib.pyplot as plt  # \u4ee3\u8868\u7684\u306a\u53ef\u8996\u5316\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\nimport seaborn as sns  # matplotlib \u3092\u4f7f\u3044\u3084\u3059\u304f\u3059\u308b wrapper\n\n# Notebook \u4e0a\u306b\u30b0\u30e9\u30d5\u3092\u76f4\u306b\u63cf\u753b\u3057\u305f\u3044\u6642\u306e\u304a\u307e\u3058\u306a\u3044\n%matplotlib inline","6cc2c2e7":"sns.scatterplot(x=\"ANNUAL_FEES\", y=\"ADDITIONAL_MEMBERS\", data=train)\nplt.title(\"ANNUAL_FEES vs ADDITIONAL_MEMBERS\")","233e2506":"sns.scatterplot(x=\"ANNUAL_FEES\", y=\"ADDITIONAL_MEMBERS\", hue=\"MEMBERSHIP_STATUS\", data=train)\nplt.title(\"ANNUAL_FEES vs ADDITIONAL_MEMBERS, colored by MEMBERSHIP_STATUS\")","6d6f26f7":"sns.distplot(train.MEMBER_AGE_AT_ISSUE)  \nplt.title(\"MEMBER_AGE_AT_ISSUE of training set\")  # \u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb","c581ee8e":"sns.distplot(train.MEMBER_AGE_AT_ISSUE, hue=\"MEMBERSHIP_STATUS\")  \nplt.title(\"MEMBER_AGE_AT_ISSUE of training set, colored by MEMBERSHIP_STATUS\")  # \u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb","01fbe4c9":"# MEMBERSHIP_STATUS \u306e\u4e00\u89a7\nmembership_statuses = np.sort(train.MEMBERSHIP_STATUS.unique())\n# \u63cf\u753b\u51e6\u7406\nax = None\nfor membership_status in membership_statuses:\n    # MEMBERSHIP_STATUS \u306e\u30ab\u30c6\u30b4\u30ea\u6bce\u306b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\n    if ax is None:\n        ax = sns.distplot(train.loc[train.MEMBERSHIP_STATUS==membership_status, \"MEMBER_AGE_AT_ISSUE\"], kde=False)\n    else:\n        sns.distplot(train.loc[train.MEMBERSHIP_STATUS==membership_status, \"MEMBER_AGE_AT_ISSUE\"], ax=ax, kde=False)\n# \u51e1\u4f8b\u306e\u63cf\u753b\nplt.legend(membership_statuses,  # \u51e1\u4f8b\n           loc='upper right',  # \u63cf\u753b\u4f4d\u7f6e\n           frameon=False)  # \u51e1\u4f8b\u306e\u67a0\u306e\u6709\u7121","3c15dabe":"plt.figure(figsize=(14, 14))  # figsize=(width, height), unit=inches\n\ni = 1\nnumeric_columns = train.select_dtypes('number').columns\nn_numeric_columns = len(numeric_columns.tolist())\n\nfor col in numeric_columns:  # \u9023\u7d9a\u91cf\u306e\u30ab\u30e9\u30e0\u3092 col \u306b\u9806\u6b21\u4ee3\u5165\n    \n    # \u63cf\u753b\u4f4d\u7f6e\u306e\u6307\u5b9a\uff08\u884c\u6570\u3001\u5217\u6570\u3001\u5de6\u4e0a\u304b\u3089\u4f55\u756a\u76ee\u306e\u4f4d\u7f6e\u304b\uff1f\uff09\n    plt.subplot(1 + n_numeric_columns\/3, 3, i)\n    \n    # i \u756a\u76ee\u306e\u4f4d\u7f6e\u306b\u73fe\u5728\u306e col \u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u66f8\u304f\uff08MEMBERSHIP_STATUS \u3067\u8272\u5206\u3051\uff09\n    ax = None\n    for membership_status in membership_statuses:\n        if ax is None:\n            ax = sns.distplot(train.loc[train.MEMBERSHIP_STATUS==membership_status, col], kde=False)\n        else:\n            sns.distplot(train.loc[train.MEMBERSHIP_STATUS==membership_status, col], ax=ax, kde=False)\n    plt.legend(membership_statuses,  # \u51e1\u4f8b\n           loc='upper right',  # \u63cf\u753b\u4f4d\u7f6e\n           frameon=False)  # \u51e1\u4f8b\u306e\u67a0\u306e\u6709\u7121\n    i = i + 1","395961b8":"plt.figure(figsize=(14, 10))  # figsize=(width, height), unit=inches\nsns.pairplot(train)","291623f5":"plt.figure(figsize=(8, 4))\nplt.subplot(1, 2, 1)\nsns.countplot(train.MEMBERSHIP_STATUS, order=membership_statuses)\nplt.title(\"Label of training set\")\nplt.subplot(1, 2, 2)\nsns.countplot(real_y_test.MEMBERSHIP_STATUS, order=membership_statuses)\nplt.title(\"Label of test set\")","28f7d0f3":"# AGENT_CODE \u6bce\u306e\u4ef6\u6570 N_CUSTOMERS \u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b\ntrain_n_customers = train \\\n                   .groupby('AGENT_CODE') \\\n                   .MEMBERSHIP_NUMBER \\\n                   .count() \\\n                   .reset_index() \\\n                   .rename(columns={'AGENT_CODE':'AGENT_CODE',\n                                    'MEMBERSHIP_NUMBER':'N_CUSTOMERS'})\nprint(\"train_n_customers \u3092\u8868\u793a\u3057\u307e\u3059\")\ndisplay(train_n_customers)\n# \u5143\u306e\u30c7\u30fc\u30bf\u3068 AGENT_CODE \u3092\u30ad\u30fc\u306b\u5185\u90e8\u7d50\u5408\u3059\u308b\ntrain = train.merge(right = train_n_customers, \n                    on = 'AGENT_CODE', \n                    how = 'inner')\ndisplay(\"train \u3092\u8868\u793a\u3057\u307e\u3059\")\ndisplay(train)","35c8f2fd":"# \u524d\u534a\u306e\u51e6\u7406\u304c\u7d42\u4e86\u3057\u305f\u6642\u70b9\ntrain.groupby('AGENT_CODE').MEMBERSHIP_NUMBER.count()","ec74f78b":"# reset_index() \u3057\u305f\u7d50\u679c\ntrain.groupby('AGENT_CODE').MEMBERSHIP_NUMBER.count().reset_index()","58ddc66a":"# \u30ea\u30cd\u30fc\u30e0\u307e\u3067\u5b8c\u4e86\u3057\u305f\u7d50\u679c\ntrain_n_customers = train \\\n                   .groupby('AGENT_CODE') \\\n                   .MEMBERSHIP_NUMBER \\\n                   .count() \\\n                   .reset_index() \\\n                   .rename(columns={'AGENT_CODE':'AGENT_CODE',\n                                    'MEMBERSHIP_NUMBER':'N_CUSTOMERS'})\ntrain_n_customers","3221fcec":"test_n_customers = test \\\n                  .groupby('AGENT_CODE') \\\n                  .MEMBERSHIP_NUMBER \\\n                  .count() \\\n                  .reset_index() \\\n                  .rename(columns={'AGENT_CODE':'AGENT_CODE',\n                                   'MEMBERSHIP_NUMBER':'N_CUSTOMERS'})\ntest = test.merge(right = test_n_customers, \n                  on = 'AGENT_CODE', \n                  how = 'inner')","a08a0ba1":"membership_statuses = train.MEMBERSHIP_STATUS.unique()\nplt.figure(figsize=(8, 4))\n\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u63cf\u753b\u51e6\u7406\nplt.subplot(1, 2, 1)\nax = None\nfor membership_status in membership_statuses:\n    # MEMBERSHIP_STATUS \u306e\u30ab\u30c6\u30b4\u30ea\u6bce\u306b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\n    if ax is None:\n        ax = sns.distplot(train.loc[train.MEMBERSHIP_STATUS==membership_status, \"N_CUSTOMERS\"], kde=False)\n    else:\n        sns.distplot(train.loc[train.MEMBERSHIP_STATUS==membership_status, \"N_CUSTOMERS\"], ax=ax, kde=False)\n# \u51e1\u4f8b\u306e\u63cf\u753b\nplt.legend(membership_statuses,  # \u51e1\u4f8b\n           loc='upper right',  # \u63cf\u753b\u4f4d\u7f6e\n           frameon=False)  # \u51e1\u4f8b\u306e\u67a0\u306e\u6709\u7121\nplt.title('N_CUSTOMERS of training set')\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u63cf\u753b\u51e6\u7406\nplt.subplot(1, 2, 2)\nax = None\nfor membership_status in membership_statuses:\n    # MEMBERSHIP_STATUS \u306e\u30ab\u30c6\u30b4\u30ea\u6bce\u306b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\n    if ax is None:\n        ax = sns.distplot(test.loc[real_y_test.MEMBERSHIP_STATUS==membership_status, \"N_CUSTOMERS\"], kde=False)\n    else:\n        sns.distplot(test.loc[real_y_test.MEMBERSHIP_STATUS==membership_status, \"N_CUSTOMERS\"], ax=ax, kde=False)\n# \u51e1\u4f8b\u306e\u63cf\u753b\nplt.legend(membership_statuses,  # \u51e1\u4f8b\n           loc='upper right',  # \u63cf\u753b\u4f4d\u7f6e\n           frameon=False)  # \u51e1\u4f8b\u306e\u67a0\u306e\u6709\u7121\nplt.title('N_CUSTOMERS of test set')\nsns.despine()","59badb22":"# \u7279\u5fb4\u91cf\u3068\u30e9\u30d9\u30eb\u3092\u5225\u3005\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5206\u3051\u308b\ninformative_features = [\n    \"MEMBERSHIP_TERM_YEARS\",\n    \"ANNUAL_FEES\",\n    \"MEMBER_MARITAL_STATUS\",\n    \"MEMBER_GENDER\",\n    \"MEMBER_ANNUAL_INCOME\",\n    \"MEMBER_OCCUPATION_CD\",\n    \"MEMBERSHIP_PACKAGE\",\n    \"MEMBER_AGE_AT_ISSUE\",\n    \"ADDITIONAL_MEMBERS\",\n    \"PAYMENT_MODE\",\n    \"N_CUSTOMERS\"\n]\nlabel = \"MEMBERSHIP_STATUS\"\n\n# x_... \u306b\u7279\u5fb4\u91cf\u3001y_... \u306b\u30e9\u30d9\u30eb\n# ... \u306f\u8a13\u7df4\u30c7\u30fc\u30bf\u304c train \u3067\u6027\u80fd\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u304c test\nx_train = train.loc[:, informative_features]\ny_train = train[label]\nx_test = test.loc[:, informative_features]\ny_test = real_y_test[label]\n\nx_train.MEMBER_OCCUPATION_CD = x_train.MEMBER_OCCUPATION_CD.astype('object')\nx_test.MEMBER_OCCUPATION_CD = x_test.MEMBER_OCCUPATION_CD.astype('object')\n\n\nprint('x_train \u306e\u5148\u982d10\u4ef6:')\ndisplay(x_train.head())\n\nprint('y_train \u306e\u5148\u982d10\u4ef6:')\ndisplay(y_train.head())\n\nprint('x_test \u306e\u5148\u982d10\u4ef6:')\ndisplay(x_test.head())\n\nprint('y_test \u306e\u5148\u982d10\u4ef6:')\ndisplay(y_test.head())","f62f71bc":"sample = pd.DataFrame({\n    \"Interview impression\":[\"not bad\", \"not bad\", np.nan, \"not bad\", \"good\", np.nan, \"good\"],  # \u6b20\u640d\u5024\u304c\u3042\u308b\uff01\n    \"Math score\": [1, 8, 9, 9, 5, 10, 6],\n    \"Toeic score\":[910, 715, 745, 650, 435, 815, 830],\n    \"Test result\":[\"pass\", \"failure\", \"failure\", \"failure\", \"pass\", \"failure\", \"pass\"]\n    })\nsample","57aeba8f":"x_train_sample = sample.loc[0:4, [\"Interview impression\", \"Math score\", \"Toeic score\"]]\ny_train_sample = sample.loc[0:4, [\"Test result\"]]\nx_test_sample = sample.loc[5:, [\"Interview impression\", \"Math score\", \"Toeic score\"]]\ny_test_sample = sample.loc[5:, [\"Test result\"]]\n\nprint(\"\u8a13\u7df4\u30c7\u30fc\u30bf\")\ndisplay(x_train_sample)\ndisplay(y_train_sample)\n\nprint(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\")\ndisplay(x_test_sample)\ndisplay(y_test_sample)","c0bad465":"# Interview impression \u3092\u518d\u78ba\u8a8d\u3057\u307e\u3059\nprint(\"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e Interview impression\")\ndisplay(x_train_sample[\"Interview impression\"])\nprint(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e Interview impression\")\ndisplay(x_test_sample[\"Interview impression\"])","a08a2101":"# \u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b\nx_train_sample[\"Interview impression\"].fillna('not bad', inplace=True)  # \u6b20\u640d\u5024\u3092\u7f6e\u63db\u3059\u308b\nx_test_sample[\"Interview impression\"].fillna('not bad', inplace=True)  # \u6b20\u640d\u5024\u3092\u7f6e\u63db\u3059\u308b\nprint(\"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e Interview impression \uff08\u6b20\u640d\u5024\u88dc\u5b8c\u6e08\uff09\")\ndisplay(x_train_sample[\"Interview impression\"])\nprint(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e Interview impression \uff08\u6b20\u640d\u5024\u88dc\u5b8c\u6e08\uff09\")\ndisplay(x_test_sample[\"Interview impression\"])","cc4e1e36":"x_train_sample[\"Interview impression\"] = x_train_sample[\"Interview impression\"].apply(lambda x: 1 if x==\"good\" else 0)\nx_test_sample[\"Interview impression\"] = x_test_sample[\"Interview impression\"].apply(lambda x: 1 if x==\"good\" else 0)\nprint(\"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e Interview impression \uff08\u30a8\u30f3\u30b3\u30fc\u30c9\u6e08\uff09\")\ndisplay(x_train_sample[\"Interview impression\"])\nprint(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e Interview impression \uff08\u30a8\u30f3\u30b3\u30fc\u30c9\u6e08\uff09\")\ndisplay(x_test_sample[\"Interview impression\"])","3fdc672c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\n\nx_train_copy = x_train.copy(deep=True) \nx_test_copy = x_test.copy(deep=True)\n\n\"\"\"\u30cc\u30eb\u5024\u306e\u88dc\u5b8c\n\u4eca\u56de\u306f\u30cc\u30eb\u5024\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002SimpleImputer \u304c\u4fbf\u5229\u3067\u3059\u3002\n\"\"\"\nimputer = SimpleImputer(strategy='most_frequent')\nimputer.fit(x_train_copy)\nx_train_imputed = pd.DataFrame(imputer.transform(x_train_copy),\n                               columns=x_train_copy.columns.tolist())\nx_test_imputed = pd.DataFrame(imputer.transform(x_test_copy),\n                              columns=x_test_copy.columns.tolist())\n\n\"\"\"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\uff08\u6570\u5024\u3078\u306e\u7f6e\u63db\uff09 \n\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u6271\u3048\u306a\u3044\u306e\u3067\u6570\u5024\u3092\u5272\u308a\u632f\u308a\u307e\u3059\u3002\u30ab\u30c6\u30b4\u30ea\u5316\u306b\u306f LabelEncoder \u304c\u4f7f\u3048\u307e\u3059\u3002\n\"\"\"\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u30ab\u30c6\u30b4\u30ea\u306e\u5217\u540d\u3092\u53d6\u308a\u51fa\u30571\u3064\u305a\u3064\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\ncategorical = x_train_copy.select_dtypes(exclude='number').columns.tolist()  # \u30ab\u30c6\u30b4\u30ea\u306e\u5217\u540d\nfor col in categorical:\n    # LabelEncoder \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n    encoder = LabelEncoder()\n    # \u73fe\u5728\u51e6\u7406\u4e2d\u306e\u5217\u306b\u5bfe\u3057\u3066 LebelEncoder \u3092 fit() \u3055\u305b\u308b\uff08\u4eca\u56de\u306e\u5834\u5408\u306f\u30ab\u30c6\u30b4\u30ea\u306b\u6570\u5024\u3092\u5272\u308a\u632f\u3063\u3066\u3044\u308b\uff09\n    encoder.fit(x_train_imputed[col])\n    # fit() \u3067\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u306b\u57fa\u3065\u3044\u3066\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3059\u308b\n    x_train_imputed[col] = encoder.transform(x_train_imputed[col])\n    x_test_imputed[col] = encoder.transform(x_test_imputed[col])\n    \n\"\"\"\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u8a13\u7df4\u3068\u8a55\u4fa1\n\"\"\"\n# RandomForestClassifier \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\nclf = RandomForestClassifier(random_state=0)\n# \u524d\u51e6\u7406\u3057\u305f\u7279\u5fb4\u91cf\u3068\u30e9\u30d9\u30eb\u306b\u5bfe\u3057\u3066 fit() \u3055\u305b\u3066\u5206\u985e\u5668\u3092\u69cb\u7bc9\u3059\u308b\nclf.fit(x_train_imputed, y_train)\n# predict() \u3067\u8a13\u7df4\u6e08\u306e\u5206\u985e\u5668\u306b\u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\u3055\u305b\u308b\ny_train_predict = clf.predict(x_train_imputed)\ny_test_predict = clf.predict(x_test_imputed)\n\n# \u6b63\u89e3\u7387\u306e\u8868\u793a\nprint(f'\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\uff1a{sum(y_train==y_train_predict)\/y_train.shape[0]}')\nprint(f'\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\uff1a{sum(y_test==y_test_predict)\/y_test.shape[0]}')","87b546ff":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OrdinalEncoder\n\nx_train_copy = x_train.copy(deep=True) \nx_test_copy = x_test.copy(deep=True)\n\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent'))])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OrdinalEncoder())])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, x_train_copy.select_dtypes(include=\"number\").columns.tolist()),\n        ('cat', categorical_transformer, x_train_copy.select_dtypes(exclude=\"number\").columns.tolist())])\n\n# Append classifier to preprocessing pipeline.\n# Now we have a full prediction pipeline.\nclf2 = Pipeline(steps=[('preprocessor', preprocessor),\n                       ('classifier', RandomForestClassifier(random_state=0))])\nclf2.fit(x_train_copy, y_train)\ny_train_predict = clf2.predict(x_train)\ny_test_predict = clf2.predict(x_test)\n\n# \u6b63\u89e3\u7387\u306e\u8868\u793a\nprint(f'\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\uff1a{sum(y_train==y_train_predict)\/y_train.shape[0]}')\nprint(f'\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\uff1a{sum(y_test==y_test_predict)\/y_test.shape[0]}')","972bdf01":"from sklearn.model_selection import GridSearchCV\n\nx_train_copy = x_train.copy(deep=True) \nx_test_copy = x_test.copy(deep=True)\n\n\"\"\"\u30cc\u30eb\u5024\u306e\u88dc\u5b8c\n\u4eca\u56de\u306f\u30cc\u30eb\u5024\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002SimpleImputer \u304c\u4fbf\u5229\u3067\u3059\u3002\n\"\"\"\nimputer = SimpleImputer(strategy='most_frequent')\nimputer.fit(x_train_copy)\nx_train_imputed = pd.DataFrame(imputer.transform(x_train_copy),\n                               columns=x_train_copy.columns.tolist())\nx_test_imputed = pd.DataFrame(imputer.transform(x_test_copy),\n                              columns=x_test_copy.columns.tolist())\n\n\"\"\"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\uff08\u6570\u5024\u3078\u306e\u7f6e\u63db\uff09 \n\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u6271\u3048\u306a\u3044\u306e\u3067\u6570\u5024\u3092\u5272\u308a\u632f\u308a\u307e\u3059\u3002\u30ab\u30c6\u30b4\u30ea\u5316\u306b\u306f LabelEncoder \u304c\u4f7f\u3048\u307e\u3059\u3002\n\"\"\"\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u30ab\u30c6\u30b4\u30ea\u306e\u5217\u540d\u3092\u53d6\u308a\u51fa\u30571\u3064\u305a\u3064\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\ncategorical = x_train_copy.select_dtypes(exclude='number').columns.tolist()  # \u30ab\u30c6\u30b4\u30ea\u306e\u5217\u540d\nfor col in categorical:\n    # LabelEncoder \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n    encoder = LabelEncoder()\n    # \u73fe\u5728\u51e6\u7406\u4e2d\u306e\u5217\u306b\u5bfe\u3057\u3066 LebelEncoder \u3092 fit() \u3055\u305b\u308b\uff08\u4eca\u56de\u306e\u5834\u5408\u306f\u30ab\u30c6\u30b4\u30ea\u306b\u6570\u5024\u3092\u5272\u308a\u632f\u3063\u3066\u3044\u308b\uff09\n    encoder.fit(x_train_imputed[col])\n    # fit() \u3067\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u306b\u57fa\u3065\u3044\u3066\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3059\u308b\n    x_train_imputed[col] = encoder.transform(x_train_imputed[col])\n    x_test_imputed[col] = encoder.transform(x_test_imputed[col])\n\nclf3 = RandomForestClassifier(random_state=0)\n\n# \u63a2\u7d22\u3057\u305f\u3044\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8f9e\u66f8\u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\nparam_grid = {\n    \"n_estimators\": [10, 100, 1000],\n    \"max_features\":['auto', 'sqrt'],\n    \"criterion\": [\"gini\", \"entropy\"],\n    \"max_depth\":[3, 4, 5, 6, None],\n    \"bootstrap\": [True, False]\n}\n\n# GridSearchCV \u3092\u4f7f\u3046\u3068 param_grid \u3067\u6307\u5b9a\u3057\u305f\u3059\u3079\u3066\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\n# \u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u3057\u3066 cross validation \u3092\u884c\u3044\u6700\u3082\u30b9\u30b3\u30a2\u304c\u826f\u3044\u7d44\u307f\u5408\u308f\u305b\u3092\n# \u63a2\u7d22\u3057\u3066\u304f\u308c\u307e\u3059\nsearcher = GridSearchCV(estimator=clf3, \n                        param_grid=param_grid,\n                        cv=5, \n                        # random_state=0, \n                        n_jobs=-1,\n                        scoring=\"accuracy\")\nsearcher.fit(x_train_imputed, y_train)\ny_train_predict = searcher.predict(x_train_imputed)\ny_test_predict = searcher.predict(x_test_imputed)\n\n# \u6b63\u89e3\u7387\u306e\u8868\u793a\nprint(f'\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\uff1a{sum(y_train==y_train_predict)\/y_train.shape[0]}')\nprint(f'\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\uff1a{sum(y_test==y_test_predict)\/y_test.shape[0]}')","2ed6ed08":"searcher.best_params_","8ba20a0d":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f `seaborn` \u306e [`distplot()`](https:\/\/seaborn.pydata.org\/generated\/seaborn.distplot.html)\u3092\u4f7f\u3044\u307e\u3059\u3002","7befd78b":"`RandomForestClassifier` \u306b\u306f\u5206\u985e\u5668\u306e\u80b2\u3066\u65b9\u3092\u5236\u5fa1\u3059\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4eba\u304c\u5024\u3092\u6c7a\u3081\u307e\u3059\u3002\u9069\u5207\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u624b\u6cd5\u306e\u4e00\u3064\u306b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u304c\u3042\u308a\u307e\u3059\u304c `GridSearchCV` \u3092\u4f7f\u3046\u3068\u3053\u308c\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002","fa1d3442":"\u624b\u59cb\u3081\u306b\u6563\u5e03\u56f3\u3067\u3059\u3002[`scatterplot()`](https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html) \u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066 `ANNUAL_FEES` \u3068`ADDITIONAL_MEMBERS` \u306e\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3057\u307e\u3059\u3002","6c1f0642":"\u6b21\u306b\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u5bfe\u3057\u3066\u30ab\u30c6\u30b4\u30ea\u306e\u7a2e\u985e\u3084\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u306e\u306f `value_counts()`, `unique()`, `nunique()` \u3067\u3059\u3002  \n`MEMBER_MARITAL_STATUS` \u3092\u4f7f\u3044\u3001\u3069\u3093\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u304b\u3071\u3063\u3068\u898b\u3066\u307f\u307e\u3059\u3002","19e2593d":"`train`, `test`, `real_y_test` \u306b\u3064\u3044\u3066\u3082\u540c\u3058\u3088\u3046\u306b\u8868\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002  ","6bc1d3c0":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","1945709e":"### \u5206\u985e\u3059\u308b\u524d\u306b\uff01\n\u3044\u304d\u306a\u308a\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u306f\u51e6\u7406\u305b\u305a\u3001\u5c11\u898f\u6a21\u306e\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u305d\u308c\u305e\u308c\u304c\u4f55\u3092\u3059\u308b\u306e\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u4f55\u3092\u3059\u308b\u3064\u3082\u308a\u304b\u4e8b\u524d\u306b\u30a4\u30e1\u30fc\u30b8\u3092\u62b1\u3044\u3066\u9802\u304f\u305f\u3081\u306a\u306e\u3067\u65e2\u306b\u30a4\u30e1\u30fc\u30b8\u304c\u6e67\u304f\u4eba\u306f\u8aad\u307f\u98db\u3070\u3057\u3067\u304b\u307e\u3044\u307e\u305b\u3093\u3002  \n\u6b21\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002","3a46beed":"`train_n_customers` \u304c\u5b8c\u6210\u3057\u305f\u306e\u3067\u5f8c\u306f\u5143\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u7d50\u5408\u3059\u308b\u3060\u3051\u3067\u3059\uff01","1debb470":"[`apply()`\u3068\u3044\u3046\u95a2\u6570](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.apply.html)\u3092\u4f7f\u3044\u7f6e\u63db\u3057\u307e\u3057\u305f\u3002  \n\n>`x_train_sample[\"Interview impression\"].apply(lambda x: 1 if x==\"good\" else 0)` \n\n\u3053\u3046\u3059\u308b\u3068\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 `x_train_sample` \u306e\u5217 `Interview impression` \u306e\u5404\u884c\u306e\u5024\u306b\u5bfe\u3057\u3066 `apply()` \u306e\u5f15\u6570\u306b\u6e21\u3057\u305f\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u5f97\u3089\u308c\u307e\u3059\u3002  `apply()` \u306e\u5f15\u6570\u306f `def` \u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3067\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001`lambda` \u3067\u5b9a\u7fa9\u3057\u305f[\u7121\u540d\u95a2\u6570](https:\/\/docs.python.org\/ja\/3\/reference\/expressions.html) \u3067\u3082\u826f\u3044\u306e\u3067\u8a66\u3057\u306b\u3064\u304b\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n","8cdee71d":"\u5168\u3066\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u5bfe\u3057\u3066\u4e0a\u8a18\u3092\u7e70\u308a\u8fd4\u3059\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u30eb\u30fc\u30d7\u3067\u7e70\u308a\u8fd4\u3057\u3066\u307f\u307e\u3059\u3002  \n\u306a\u304a\u3001\u3088\u304f\u898b\u308b\u3068 `unique()` \u3067\u78ba\u8a8d\u3067\u304d\u308b\u60c5\u5831\u306f `value_counts()` \u3067\u3082\u78ba\u8a8d\u3067\u304d\u308b\u306e\u3067 `unique()` \u306f\u3082\u3046\u898b\u307e\u305b\u3093\u3002","d224b9da":"\u30ab\u30c6\u30b4\u30ea\u9805\u76ee\u306b\u5bfe\u3057\u3066\u306f [`countplot()`](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html#seaborn.countplot)\u3092\u4f7f\u3046\u3068\u4ef6\u6570\u3092\u53ef\u8996\u5316\u3067\u304d\u307e\u3059\u3002","5c196db3":"## \u30c7\u30fc\u30bf\u306e\u8981\u7d04\u3092\u8868\u793a\u3059\u308b","eb0fdc15":"### AGENT_CODE \u6bce\u306e\u4ef6\u6570 N_CUSTOMERS \u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b","a1dd76a1":"`read_...()` \u3067\u8aad\u307f\u8fbc\u3093\u3060\u30d5\u30a1\u30a4\u30eb\u306f [\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/frame.html) \u3068\u3044\u3046\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f2\u6b21\u5143\u8868\u306e\u30c7\u30fc\u30bf\u3092\u8868\u73fe\u3057\u305f\u30af\u30e9\u30b9\u3067\u3001\u5206\u6790\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u8272\u3005\u3068\u5099\u308f\u3063\u3066\u3044\u307e\u3059\u3002  \n\nCode \u306e\u30bb\u30eb\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u53c2\u7167\u3059\u308b\u5909\u6570\u540d\u3092\u66f8\u3044\u3066\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4e2d\u8eab\u3092\u898b\u3089\u308c\u307e\u3059\u3002`problem_statement` \u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n","19dd961f":"## \u53ef\u8996\u5316  \n\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u77e5\u308b\u305f\u3081\u306b\u6b21\u306f\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\u3002\u53ef\u8996\u5316\u306e\u65b9\u6cd5\u306f\u8272\u3005\u3042\u308a\u307e\u3059\u304c\u3001\u9023\u7d9a\u91cf\u306e\u53ef\u8996\u5316\u624b\u6cd5\u3067\u3042\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6563\u5e03\u56f3\u3001\u30ab\u30c6\u30b4\u30ea\u9805\u76ee\u306b\u5bfe\u3057\u3066\u306f\u68d2\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u306f `seaborn` \u3068 `matplotlib.pyplot` \u3067\u3059\u3002[Kaggle \u306e Course](https:\/\/www.kaggle.com\/learn\/data-visualization)\u306b\u3082\u53ef\u8996\u5316\u306e\u30ab\u30ea\u30ad\u30e5\u30e9\u30e0\u304c\u3042\u308b\u306e\u3067\u304a\u8a66\u3057\u4e0b\u3055\u3044\u3002","e5045dbb":"# Overview","111f2c98":"\u9023\u7d9a\u91cf\u306b\u5bfe\u3057\u3066\u4ee5\u4e0b\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n|\u9805\u76ee  |\u5185\u5bb9  |\n|:---:|:---|\n|count  |\u975e\u6b20\u640d\u5024\u306e\u884c\u6570\u3002|\n|mean  |\u5e73\u5747\u5024\u3002\u30c7\u30fc\u30bf\u306e\u4e2d\u5fc3\u3092\u8868\u3057\u307e\u3059\u3002|\n|std  |\u6a19\u6e96\u504f\u5dee\u3002\u30c7\u30fc\u30bf\u306e\u30d0\u30e9\u3064\u304d\u3092\u8868\u3057\u307e\u3059\u3002|\n|min, max  |\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3002\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u8868\u3057\u307e\u3059\u3002|\n|25%, 50%, 75%  |\u56db\u5206\u4f4d\u6570\u3002\u5024\u3092\u5c0f\u2192\u5927\u3068\u80cc\u306e\u9806\u306b\u6574\u5217\u3057\u305f\u6642\u306b\u3001\u5148\u982d\u304b\u3089 25%, 50%, 75% \u306b\u4f4d\u7f6e\u3059\u308b\u5024\u3067\u3059\u3002\u7279\u306b50%\u306e\u5024\u306f\u4e2d\u592e\u5024\u3068\u547c\u3070\u308c\u307e\u3059\u3002|","cf1ab41e":"\u4eca\u56de\u306f\u6b20\u640d\u5024\u3001\u9023\u7d9a\u91cf\u306e\u8981\u7d04\u7d71\u8a08\u3001\u30ab\u30c6\u30b4\u30ea\u306e\u7a2e\u985e\u3084\u4ef6\u6570\u3092\u898b\u3066\u307f\u307e\u3059\u3002  \n- `info()` \u3067\u6b20\u640d\u5024\u306e\u6709\u7121\u3084\u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d\u3059\u308b\n- `describe()` \u3067\u9023\u7d9a\u91cf\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8868\u793a\u3059\u308b\n- `value_counts()`, `nunique()`, `unique()` \u3067\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6982\u89b3\u3059\u308b","2e257972":"## \u7279\u5fb4\u91cf\u306e\u8ffd\u52a0  \n\n\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f `AGENT_CODE` \u3068\u3044\u3046\u5217\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u6050\u3089\u304f\u30af\u30e9\u30d6\u306e\u30b9\u30bf\u30c3\u30d5\u3092\u8b58\u5225\u3059\u308b\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3059\u304c\u3001`AGENT_CODE` \u6bce\u306e\u884c\u6570\u3092\u30b9\u30bf\u30c3\u30d5\u304c\u62b1\u3048\u3066\u3044\u308b\u9867\u5ba2\u6570\u3068\u3057\u3001`N_CUSTOMERS` \u3068\u3044\u3046\u65b0\u3057\u3044\u5217\u306b\u8ffd\u52a0\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002  \n\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5834\u5408\u3002  \n\n|AGENT_CODE|\n|:---:|\n|10000|\n|10000|\n|10000|\n|10001|\n|10001|\n|10002|\n  \n10000, 10001, 10002 \u304c\u305d\u308c\u305e\u308c 3, 2, 1 \u4ef6\u5b58\u5728\u3057\u307e\u3059\u3002\u3053\u306e\u5834\u5408 `N_CUSTOMERS` \u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u8a08\u7b97\u3055\u308c\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002\n\n|AGENT_CODE|N_CUSTOMERS|\n|:---:|---:|\n|10000|3|\n|10000|3|\n|10000|3|\n|10001|2|\n|10001|2|\n|10002|1|\n\n\u3053\u306e\u8a08\u7b97\u3092\u884c\u3046\u305f\u3081\u3001\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u52a0\u5de5\u96c6\u8a08\u3092\u884c\u3044\u307e\u3059\u3002  \n\n- groupby() \u306b\u3088\u308b\u96c6\u8a08  \n- rename() \u306b\u3088\u308b\u5217\u540d\u306e\u5909\u66f4    \n- merge() \u306b\u3088\u308b\u7d50\u5408\u64cd\u4f5c  \n","823fe0e3":"2\u884c\u76ee\u306b\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u3042\u308b\u306e\u3067\u884c\u6570\u304c9325\u4ef6\u3068\u518d\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n>9325 entries\n\n\u30ab\u30e9\u30e0\u6bce\u306b\u6b20\u640d\u3057\u3066\u3044\u306a\u3044\u884c\u6570\u3068\u30c7\u30fc\u30bf\u578b\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002`float` \u3084 `int` \u306f\u305d\u306e\u901a\u308a\u5c0f\u6570\u3001\u5b9f\u6570\u3067\u3059\u3002`object`\u306f\u30ab\u30c6\u30b4\u30ea\u578b\u3068\u8003\u3048\u3066\u4e0b\u3055\u3044\u3002  \n\u30c7\u30fc\u30bf\u578b\u306f\u4ed6\u306b\u3082\u65e5\u4ed8\u578b\u304c\u3042\u308a\u307e\u3059\u3002`START_DATE`, `END_DATE` \u306f\u4eca\u306f\u6574\u6570\u30fb\u5b9f\u6570\u3067\u3059\u304c\u3001\u3053\u308c\u3089\u306e\u30ab\u30e9\u30e0\u306f\u65e5\u4ed8\u3092 _YYYYMMDD_ \u3067\u5f62\u5f0f\u3067\u8868\u73fe\u3057\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u578b\u3092\u65e5\u4ed8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u5909\u63db\u306b\u306f pandas \u306e [`to_datetime()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.to_datetime.html) \u3092\u4f7f\u3044\u307e\u3059\u3002  ","b41e232c":"\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n>TypeError: distplot() got an unexpected keyword argument 'hue'\n\n`hue`\u3068\u3044\u3046\u5f15\u6570\u306f\u5b58\u5728\u3057\u306a\u3044\u3068\u306e\u610f\u5473\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4e00\u5de5\u592b\u3059\u308b\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3082\u8272\u5206\u3051\u3067\u304d\u307e\u3059\u3002","49c58030":"\u96c6\u8a08\u8ef8\u3068\u3057\u3066\u6307\u5b9a\u3057\u305f `AGENT_CODE` \u306e\u6a2a\u306b `MEMBERSHIP_NUMBER` \u3092 count() \u3057\u305f\u7d50\u679c\u304c\u4e26\u3093\u3067\u3044\u307e\u3059\u3002","880f18c0":"`train_n_customers` \u3092\u4f5c\u308b\u305f\u3081\u306e\u51e6\u7406\u3092\u9806\u3092\u8ffd\u3063\u3066\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n`train.groupby('AGENT_CODE').MEMBERSHIP_NUMBER.count()` \u307e\u3067\u306e\u90e8\u5206\u3067`AGENT_CODE` \u6bce\u306e\u4ef6\u6570\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002  \n\n`groupby()` \u306f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5bfe\u3059\u308b\u96c6\u8a08\u64cd\u4f5c\u3092\u884c\u3046\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002  \n  \n>`\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0.groupby(\u96c6\u8a08\u8ef8\u306b\u3057\u305f\u3044\u5217).\u96c6\u8a08\u5bfe\u8c61\u3068\u3057\u305f\u3044\u5217.\u96c6\u8a08\u95a2\u6570()`   \n  \n\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 `train` \u306e`AGENT_CODE` \u6bce\u306e\u4ef6\u6570\u3092\u8a08\u7b97\u3057\u305f\u3044\u3067\u3059\u3002\u4ef6\u6570\u3092\u51fa\u3059\u96c6\u8a08\u95a2\u6570\u306f `count()` \u3092\u4f7f\u3044\u307e\u3059\u3002\u3088\u3063\u3066\u4ee5\u4e0b\u306e\u66f8\u304d\u65b9\u306b\u306a\u308a\u307e\u3059\u3002  \n  \n>`train.groupby('AGENT_CODE').MEMBERSHIP_NUMBER.count()`\n  \n\u3053\u306e\u51e6\u7406\u3067\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u304c\u5f97\u3089\u308c\u308b\u304b\u3001\u6b21\u306e\u30bb\u30eb\u3067\u78ba\u8a8d\u3057\u307e\u3059\u3002\n","52790aeb":"\u7d50\u5408\u306b\u306f `merge()` \u3092\u4f7f\u3044\u307e\u3059\u3002  \n\n>`train = train.merge(right = train_n_customers, on = 'AGENT_CODE', how = 'inner')`\n\n`right` \u306b\u7d50\u5408\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3001`on`\u306b\u7d50\u5408\u306b\u4f7f\u3046\u30ad\u30fc\u3001`how` \u306b\u5185\u90e8\u7d50\u5408\u3092\u793a\u3059 `inner` \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 ","7ebf40b1":"\u3053\u308c\u3067\u6700\u521d\u306e\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\uff01","7c0343bd":"## \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8","1803f56b":"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e 3 \u4ef6\u76ee\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e 1 \u4ef6\u76ee\u304c\u6b20\u640d\u3057\u3066\u3044\u307e\u3059\u3002\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6700\u983b\u5024\u306f _not bad_ \u306a\u306e\u3067\u3053\u306e\u5024\u3067\u88dc\u5b8c\u3057\u307e\u3059\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u3082\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6700\u983b\u5024\u3067\u88dc\u5b8c\u3057\u307e\u3059\uff09\u3002\u6c7a\u307e\u3063\u305f\u5024\u3067\u88dc\u5b8c\u3059\u308b\u6642\u306f [`fillna()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html)\u3092\u4f7f\u3046\u3068\u7c21\u5358\u3067\u3059\u3002","aa1521f0":"\u3053\u3053\u307e\u3067\u3067\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u5f8c\u306f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u5206\u985e\u5668\u3092\u4f5c\u308b\u3060\u3051\u3067\u3059\u3002","712330b6":"### \u5143\u306e\u30c7\u30fc\u30bf\u3068 AGENT_CODE \u3092\u30ad\u30fc\u306b\u5185\u90e8\u7d50\u5408\u3059\u308b","dc6d0dc1":"`START_DATE`, `END_DATE` \u306e\u578b\u304c\u5909\u308f\u3063\u305f\u4e8b\u304c\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002  ","52b8aafb":"\u305d\u306e\u4ed6\u306e\u5404\u8ad6\u3002  \n\n- \u4eca\u56de\u306f\u30cc\u30eb\u5024\u3092\u6700\u983b\u5024\u3067\u57cb\u3081\u307e\u3057\u305f\u3002\u3053\u308c\u304c\u552f\u4e00\u306e\u65b9\u6cd5\u3067\u306f\u306a\u304f\u300c\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\u300d\u300c\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\u300d\u300c\u524d\u5f8c\u306e\u5024\u3067\u57cb\u3081\u308b\u300d\u300c\u30cc\u30eb\u5c02\u7528\u306e\u5024\u3092\u7528\u610f\u3057\u3066\u57cb\u3081\u308b\u300d\u7b49\u69d8\u3005\u306a\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u300c\u88dc\u5b8c\u305b\u305a\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3059\u308b\u300d\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\n- \u4eca\u56de\u306f\u30ab\u30c6\u30b4\u30ea\u9805\u76ee\u3092\u6570\u5024\u306b\u7f6e\u63db\u3057\u3066\u5bfe\u51e6\u3057\u307e\u3057\u305f\u304c\u3001\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u3069\u3046\u6271\u3048\u3070\u9069\u5207\u306a\u306e\u304b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u4f9d\u5b58\u3059\u308b\u70b9\u306b\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\u6570\u5024\u3078\u306e\u7f6e\u63db\u306b\u4e26\u3076\u30e1\u30b8\u30e3\u30fc\u306a\u65b9\u6cd5\u3068\u3057\u3066 Onehot Encoding \u3068\u3044\u3046\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u4e0b\u3055\u3044\u3002  \n  https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html\n\n- \u4eca\u56de\u3001\u6570\u5024\u9805\u76ee\u306f\u30cc\u30eb\u5024\u3092\u57cb\u3081\u308b\u4ee5\u5916\u306e\u524d\u51e6\u7406\u306f\u7279\u306b\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u3063\u3066\u306f\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff08\u6570\u5024\u306e\u5927\u304d\u3055\u3092\u63c3\u3048\u308b\u51e6\u7406\uff09\u304c\u5fc5\u8981\u3067\u3059\u3002\u6c7a\u5b9a\u6728\u3067\u306a\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u591a\u304f\u306f\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u304c\u5fc5\u8981\u3067\u3059\u3002","e6d6f70a":"`AGENT_CODE`, `MEMBERSHIP_NUMBER` \u306e2\u5217\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u5f8c\u8005\u306e\u5217\u304c`N_CUSTOMERS`\u306b\u6301\u305f\u305b\u305f\u3044\u30b9\u30bf\u30c3\u30d5\u304c\u62b1\u3048\u3066\u3044\u308b\u9867\u5ba2\u6570\u306a\u306e\u3067\u3001\u5217\u540d\u3092\u5909\u3048\u307e\u3059\u3002\n\u5217\u540d\u306e\u5909\u66f4\u306b\u306f `rename()` \u306e `columns` \u306b\u30ea\u30cd\u30fc\u30e0\u524d\u5f8c\u306e\u540d\u79f0\u3092\u8f9e\u66f8\u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070OK\u3067\u3059\u3002  \nPython \u3067\u306f\u8f9e\u66f8\u3092 `{key : value}` \u3068\u3044\u3046\u98a8\u306b\u66f8\u304d\u307e\u3059\u306e\u3067\u3001\u6b21\u306e\u30bb\u30eb\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","05c16f90":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\u304c 0.6219864995178399 --> 0.6875602700096431 \u306b\u6539\u5584\u3057\u305f\u4e8b\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u307f\u3089\u308c\u307e\u3059\u3002","866a8b36":"\u6587\u7ae0\u304c16\u884c\u3042\u308b\u3088\u3046\u3067\u3059\u3002`NaN` \u304c\u591a\u6570\u767b\u5834\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u6b20\u640d\u5024\u3067\u5b9f\u969b\u306e\u5024\u306f `np.nan` \u3067\u3059\u3002  \n\u6587\u7ae0\u3092\u8aad\u3080\u3046\u3048\u3067\u90aa\u9b54\u3067\u3057\u304b\u306a\u3044\u306e\u3067\u3001Python\u306e\u6587\u6cd5\u3092\u899a\u3048\u308b\u3053\u3068\u3082\u517c\u306d\u30661\u884c\u305a\u3064\u8aad\u307f\u3084\u3059\u304f\u3057\u3066\u307f\u307e\u3059\uff01","57bc9ea4":"\u307e\u305a\u306f `info()` \u3067\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u6982\u89b3\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002","1f7be6ed":"- `unique()` \u306f\u30ab\u30c6\u30b4\u30ea\u306e\u4e00\u89a7\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\n- `value_counts()` \u306f\u5404\u30ab\u30c6\u30b4\u30ea\u306e\u4ef6\u6570\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\n- `nunique()` \u306f\u30ab\u30c6\u30b4\u30ea\u6570\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n`unique()` \u306e\u51fa\u529b\u306b\u767b\u5834\u3059\u308b _nan_ \u306f\u6b20\u640d\u5024\u3067\u3059\u3002`unique()` \u4ee5\u5916\u306f\u6b20\u640d\u5024\u3092\u7121\u8996\u3057\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u66f8\u304d\u65b9\u3060\u3068\u52a0\u5473\u3057\u3066\u304f\u308c\u307e\u3059\u3002","0772eeb2":"[`select_dtypes()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.select_dtypes.html)\u3092\u4f7f\u3044\u5143\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u6570\u5024\u5217\u3092\u9664\u5916\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u5f97\u3001\u305d\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e `columns` \u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u3001\u30ab\u30c6\u30b4\u30ea\u306e\u5217\u3060\u3051\u3092\u62bd\u51fa\u3067\u304d\u307e\u3059\u3002","cb90bb76":"\u7e26\u306b\u3082\u6a2a\u306b\u3082\u9577\u3044\u306e\u3067\u3001\u5404\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u60c5\u5831\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u8981\u7d04\u3057\u3066\u307f\u307e\u3059\u3002","12f4ccf4":"\u65b0\u3057\u304f\u4f5c\u3063\u305f\u7279\u5fb4\u91cf\u306e\u5206\u5e03\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002","5cb07a36":"`Test result` \u304c\u4e88\u6e2c\u5bfe\u8c61\u30e9\u30d9\u30eb\u3067\u305d\u306e\u4ed6\u304c\u7279\u5fb4\u91cf\u3068\u3057\u307e\u3059\u3002\u5148\u982d 5 \u4ef6\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u3001\u6b8b\u308a\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u307e\u3059\u3002","48a6bafd":"# \u691c\u67fb\u3068\u53ef\u8996\u5316","441d6929":"## \u5206\u985e\u30e2\u30c7\u30eb\u306e\u4f5c\u6210","c99294d2":"`ColumnTransformer`, `Pipeline` \u3092\u4f7f\u3046\u3068\u4e0a\u8a18\u306e\u524d\u51e6\u7406\u3092\u3088\u308a\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002","3458b160":"\u30e9\u30d9\u30eb\u306e\u5206\u5e03\u304c\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3067\u307b\u307c\u540c\u4e00\u3067\u3042\u308b\u4e8b\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3067\u30e9\u30d9\u30eb\u306e\u5206\u5e03\u304c\u7570\u306a\u308a\u904e\u304e\u308b\u3068\u96e3\u6613\u5ea6\u304c\u8df3\u306d\u4e0a\u304c\u308b\u306e\u3067\u30e9\u30c3\u30ad\u30fc\u3067\u3059\u3002  \n\n\u3068\u308a\u3042\u3048\u305a\u53ef\u8996\u5316\u306f\u3053\u3053\u307e\u3067\u306b\u3057\u307e\u3059\u3002\u4e0a\u8a18\u306f\u3042\u304f\u307e\u3067\u4f8b\u3067\u3042\u308a\u3001\u5b9f\u969b\u3067\u3042\u308c\u3070\u4ed6\u306e\u30b0\u30e9\u30d5\u3092\u8a66\u3057\u305f\u308a\u3001\u5404\u9805\u76ee\u3092\u7db2\u7f85\u7684\u306b\u53ef\u8996\u5316\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3053\u306e Kernel \u3092 Folk \u3057\u3066\u8272\u3005\u8a66\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002  ","8251709d":"`seaborn` \u306e[`pairplot()`](https:\/\/seaborn.pydata.org\/generated\/seaborn.pairplot.html) \u3092\u4f7f\u3046\u3068\u6563\u5e03\u56f3\u884c\u5217\u3092\u63cf\u753b\u3067\u304d\u307e\u3059\u3002  \n\u9023\u7d9a\u91cf\u306e\u30ab\u30e9\u30e0\u306e\u7d44\u307f\u5408\u308f\u305b\u5168\u3066\u306b\u5bfe\u3057\u3066\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3057\u3066\u304f\u308c\u307e\u3059\u3002","e67bd06e":"\u307e\u305a\u306f **\u6b20\u640d\u5024\u306e\u88dc\u5b8c** \u304b\u3089\u3067\u3059\u3002\u4f7f\u7528\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u5b9f\u88c5\u6b21\u7b2c\u3067\u306f\u6b20\u640d\u5024\u304c\u3042\u308b\u3068\u3046\u307e\u304f\u5206\u6790\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u4f55\u3089\u304b\u306e\u5024\u3067\u7a74\u57cb\u3081\u3092\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u304c\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u3067\u3059\u3002  \n`Interview impression` \u306f\u3044\u304f\u3064\u304b\u306e\u884c\u304c\u6b20\u640d\u3057\u3066\u3044\u307e\u3059\u3002\u88dc\u5b8c\u306e\u65b9\u6cd5\u306f\u69d8\u3005\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u6700\u983b\u5024\u3067\u88dc\u5b8c\u3057\u307e\u3059\u3002\n","43b98f01":"\u6b21\u306b [`describe()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.describe.html) \u3067\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5185\u306e\u6570\u5024\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8868\u793a\u3057\u307e\u3059\u3002","10e55d59":"- \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n- \u691c\u67fb\u3068\u53ef\u8996\u5316\n- \u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\n- \u5206\u985e\u5668\u306e\u4f5c\u6210\n  - \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n  - SVM\n","4cb02550":"\u6b21\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\uff08\u6570\u5024\u3078\u306e\u7f6e\u63db\uff09\u3092\u884c\u3044\u307e\u3059\u3002\u3084\u308a\u65b9\u306f\u5358\u7d14\u3067 _not bad_ -> 0, _good_ -> 1 \u3068\u30ab\u30c6\u30b4\u30ea\u306b\u6574\u6570\u5024\u3092\u5bfe\u5fdc\u4ed8\u3051\u3066\u7f6e\u63db\u3059\u308b\u3060\u3051\u3067\u3059\u3002  \n\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3067\u7f6e\u63db\u3059\u308b\u30ab\u30c6\u30b4\u30ea\u30fb\u6570\u5024\u306e\u30da\u30a2\u304c\u7570\u306a\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u8a13\u7df4\u30c7\u30fc\u30bf\u306f _not bad_ -> 0, _good_ -> 1 \u306a\u306e\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f _not bad_ -> 1, _good_ -> 0 \u306f NG \u3067\u3059\uff01","3ca48504":"\u51fa\u529b\u3092\u898b\u308b\u30684\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u304c\u4eca\u56de\u306f csv \u30d5\u30a1\u30a4\u30eb3\u3064\u3068 Assignment.xlsx \u306e Problem statement \u3068\u3044\u3046\u30b7\u30fc\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002  \n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u306f pandas \u306e `read.csv()`, `read_excel()` \u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002[\u524d\u8005](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html)\u306f csv \u30d5\u30a1\u30a4\u30eb\u3001[\u5f8c\u8005](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_excel.html)\u306f Excel \u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3048\u307e\u3059\u3002\u66f8\u304d\u65b9\u306f\u6b21\u306e\u30bb\u30eb\u3092\u898b\u3066\u304f\u3060\u3055\u3044\uff01\n\n\n<details>  \n<summary>\u304a\u307e\u3051<\/summary>\n    \n- \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8  \n  `import ...`\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002`pandas`, `numpy`, `os` \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u30c7\u30fc\u30bf\u5206\u6790\u306b\u304a\u3044\u3066\u7279\u306b\u91cd\u8981\u306a\u306e\u306f\u5148\u982d\u306e2\u3064\u3067\u3059\u3002  \n  - [pandas](https:\/\/pandas.pydata.org\/)  \n    \u8868\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u306e IO, \u52a0\u5de5\u96c6\u8a08\u3092\u884c\u3048\u308b\u30c4\u30fc\u30eb\u304c\u4e00\u901a\u308a\u305d\u308d\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n  - [numpy](https:\/\/numpy.org\/)  \n    \u6570\u5024\u8a08\u7b97\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002  \n    \n  \u306a\u304a\u3001`import A as A'` \u3068\u66f8\u304f\u3068 A \u3068\u3044\u3046\u540d\u524d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067 A' \u3068\u3044\u3046\u540d\u524d\u3067\u6271\u3048\u307e\u3059\u3002pandas \u306f pd, numpy \u306f np \u3068\u3059\u308b\u306e\u304c Python ML \u696d\u754c\u306e\u5358\u306a\u308b\u6163\u7fd2\u3067\u3059\u3002  \n\n- \u30eb\u30fc\u30d7\u306e\u66f8\u304d\u65b9\n```\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):  \n    for filename in filenames:  \n        print(os.path.join(dirname, filename))\n```  \n  `os`\u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306e `walk()` \u95a2\u6570\u3092\u4f7f\u3044\u3001_\/kaggle\/input_ \u30d5\u30a9\u30eb\u30c0\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u95a2\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u3053\u306e\u3088\u3046\u306b `modulename.function()` \u3068\u3044\u3046\u66f8\u304d\u65b9\u3092\u3057\u307e\u3059\u3002`walk()`\u306e\u4ed5\u69d8\u306f[\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https:\/\/docs.python.org\/ja\/3\/library\/os.html?highlight=os%20walk)\u306b\u8a18\u8f09\u306e\u901a\u308a\u306a\u306e\u3067\u8208\u5473\u304c\u3042\u308b\u4eba\u306f\u8aad\u3093\u3067\u307f\u3066\u4e0b\u3055\u3044\u3002\u3053\u3053\u3067\u306f Python \u7279\u6709\u306e `for` \u6587\u306e\u66f8\u304d\u65b9\u304c\u5927\u4e8b\u3067\u3059\u3002\n\n  ```\n  for \u5909\u6570 in \u30b7\u30fc\u30b1\u30f3\u30b9:\n      \u51e6\u7406\u5185\u5bb9...\n  ```  \n  - _\u30b7\u30fc\u30b1\u30f3\u30b9_ \u306b\u306f\u914d\u5217\u3084\u914d\u5217\u3092\u8fd4\u3059\u95a2\u6570\u7b49\u304c\u5165\u308b  \n    \u8907\u6570\u306e\u8981\u7d20\u3092\u304f\u308b\u304f\u308b\u56de\u305b\u308b\u3088\u3046\u306a\u3082\u306e\u306a\u3089\u5927\u4f53\u5927\u4e08\u592b\u3067\u3059\uff08\u53b3\u5bc6\u306b\u8a00\u3046\u3068\u30eb\u30fc\u30d7\u306e\u5bfe\u8c61\u306b\u51fa\u6765\u308b\u306e\u304b\uff1f\u3068\u304b\u51fa\u6765\u305f\u5834\u5408\u306b\u3069\u3093\u306a\u8981\u7d20\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u304b\uff1f\u306f\u30af\u30e9\u30b9\u5b9a\u7fa9\u6b21\u7b2c\u3067\u3059\u304c\uff09\u3002\n  - _\u5909\u6570_ \u306b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u4e2d\u8eab\u304c1\u3064\u305a\u3064\u4ee3\u5165\u3055\u308c\u308b  \n  - `for` \u306e\u884c\u672b\u306f __:__ \u3067\u7d42\u3048\u308b\uff01  \n  - _\u51e6\u7406\u5185\u5bb9_ \u306f `for` \u306b\u5bfe\u3057\u3066 4 \u3064\u306e\u7a7a\u767d\u30b9\u30da\u30fc\u30b9\u3067\u30a4\u30f3\u30c7\u30f3\u30c8\u3059\u308b\u3053\u3068\uff01  \n\n  \u30eb\u30fc\u30d7\uff08\uff0b\u6761\u4ef6\u5206\u5c90\uff09\u306b\u3064\u3044\u3066\u306f[\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](https:\/\/docs.python.org\/ja\/3.5\/tutorial\/) \u306e 3.2\uff5e4. \u306b\u8a73\u3057\u3044\u3067\u3059\u304c\u3001\u5927\u4f53\u306e\u30b1\u30fc\u30b9\u3067\u4e0a\u8a184\u3064\u306e\u30dd\u30a4\u30f3\u30c8\u304c\u5f53\u3066\u306f\u307e\u308a\u307e\u3059\u3002\n    \n<\/details>","62fb99f9":"`hue` \u3068\u3044\u3046\u5f15\u6570\u306b\u30ab\u30c6\u30b4\u30ea\u306e\u5217\u540d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30ab\u30c6\u30b4\u30ea\u306b\u5fdc\u3058\u3066\u63cf\u753b\u3059\u308b\u70b9\u306e\u8272\u5206\u3051\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002","dec8997d":"Kaggle \u3067 Python \u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u5b9f\u884c\u3059\u308b\u3068\u30d5\u30a1\u30a4\u30eb\u306e\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002","5982a005":"\u5b9f\u969b\u306b\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3053\u306e\u754c\u9688\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3042\u308b `scikit-learn` \u3092\u4f7f\u3044\u307e\u3059\u3002  \n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u7279\u5fb4\u91cf\u3060\u3051\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002  \n- MEMBERSHIP_TERM_YEARS\n- ANNUAL_FEES\n- MEMBER_MARITAL_STATUS\n- MEMBER_GENDER\n- MEMBER_ANNUAL_INCOME\n- MEMBER_OCCUPATION_CD\n- MEMBERSHIP_PACKAGE\n- MEMBER_AGE_AT_ISSUE\n- ADDITIONAL_MEMBERS\n- PAYMENT_MODE\n- N_CUSTOMERS\n\n\u307e\u305a\u521d\u3081\u306b\u7279\u5fb4\u91cf\u3068\u30e9\u30d9\u30eb\u3092\u5225\u3005\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5206\u3051\u307e\u3059\u3002`scikit-learn` \u3067\u51e6\u7406\u3059\u308b\u306b\u306f\u305d\u3046\u3057\u305f\u65b9\u304c\u697d\u3067\u3059\u3002  \n\u305d\u306e\u5f8c\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5fdc\u3058\u305f\u9069\u5207\u306a\u30c7\u30fc\u30bf\u6574\u5f62\u3001\u524d\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002  ","e2dbb9b4":"\u4ee5\u4e0b\u306e\u524d\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n- \u6b20\u640d\u5024\u306e\u88dc\u5b8c\n- \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\uff08\u6570\u5024\u3078\u306e\u7f6e\u63db\uff09  \n- \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u8a13\u7df4\u3068\u8a55\u4fa1  \n","c6ca0654":"\u4ee5\u4e0b\u306e\u70b9\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002  \n- `train` \u3068 `test` \u306f\u975e\u5e38\u306b\u4f3c\u305f\u5217\u69cb\u6210\u3067\u3059\u3002`test` \u306b\u306f `train` \u306b\u3042\u308b `MEMBERSHIP_STATUS` \u306e\u5217\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u3000\u3000\n- `test` \u3068 `real_y_test` \u306f\u884c\u6570\u304c\u540c\u3058\u3067\u3059\u3002`real_y_test` \u306b\u306f `MEMBERSHIP_STATUS` \u306e\u5217\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n  \n`MEMBERSHIP_STATUS` \u304c\u4eca\u56de\u306e\u5206\u985e\u30bf\u30b9\u30af\u306b\u304a\u3051\u308b\u4e88\u6e2c\u5bfe\u8c61\u30e9\u30d9\u30eb\u3067\u3059\u3002  \n\u4ee5\u964d\u306f`MEMBERSHIP_STATUS` \u306e\u5024\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u958b\u767a\u3057\u3066\u3044\u304d\u307e\u3059\u3002club_churn_train.csv \u3092\u8a13\u7df4\u30c7\u30fc\u30bf\uff08\u5206\u985e\u30e2\u30c7\u30eb\u306e\u958b\u767a\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\uff09\u3001club_churn_train.csv \u3068 y_real_test_2.csv \u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u8a55\u4fa1\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\uff09\u3068\u3057\u307e\u3059\u3002  \n\n\n<details>\n    <summary>\u304a\u307e\u3051<\/summary>\n\nPython \u306f\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u8a18\u53f7\u3067\u56f2\u307e\u308c\u305f\u6587\u5b57\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u8a8d\u8b58\u3057\u307e\u3059\uff08'12345' \u3084 \"Hello, world\" \u3068\u3044\u3063\u305f\u98a8\u306b\uff09\u3002  \n`print()` \u306f\u6587\u5b57\u5217\u3092\u5f15\u6570\u306b\u6e21\u3059\u3068\u305d\u306e\u307e\u307e\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002  \n<br>\n`print()`\u306e\u5f15\u6570\u3092 __f__ \u3068 {} \u304c\u6df7\u3058\u3063\u305f\u6587\u5b57\u5217\u306b\u3057\u3066\u3044\u307e\u3059\u3002  \n\n>`f'club_churn_train.csv \u306e\u6b21\u5143\u6570\uff08\u884c\u6570, \u5217\u6570\uff09\u306f {train.shape} \u3067\u3059'` \u306e\u3088\u3046\u306b   \n\n\u3053\u306e\u66f8\u304d\u65b9\u3092\u3059\u308b\u3068 Python \u306f {} \u306e\u4e2d\u8eab\u306e\u5909\u6570\u3092\u8a08\u7b97\u3057\u305f\u7d50\u679c\u3092\u6587\u5b57\u5217\u306b\u3059\u308b\u3088\u3046\u6c17\u3092\u52b9\u304b\u305b\u3066\u304f\u308c\u308b\u306e\u3067 `print()` \u3067\u30c7\u30d0\u30c3\u30b0\u3092\u3057\u305f\u3044\u6642\u306b\u4fbf\u5229\u3067\u3059\u3002\u4eca\u56de\u306f {} \u306e\u4e2d\u8eab\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u30fb\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6307\u5b9a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n- \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u6b21\u5143\u6570\u3092\u8fd4\u3059\u3059\u308b `shape()`  \n- \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30ab\u30e9\u30e0\u540d\u3092\u4fdd\u6301\u3059\u308b `columns`  \n\n\u6b21\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u898b\u308b\u3068\u3001\u7406\u89e3\u304c\u6df1\u307e\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\\> \\# \u305f\u3060\u306e\u6587\u5b57\u5217  \n\\> print('\u246010\u306820\u3092\u8db3\u3057\u306615\u3092\u5f15\u3044\u305f\u7b54\u3048\u306f10+20-15\u3067\u3059')  \n\u246010\u306820\u3092\u8db3\u3057\u306615\u3092\u5f15\u3044\u305f\u7b54\u3048\u306f10+20-15\u3067\u3059  \n\\> \\# f, {} \u3092\u4f7f\u3063\u305f\u6587\u5b57\u5217  \n\\> print(f'\u246110\u306820\u3092\u8db3\u3057\u306615\u3092\u5f15\u3044\u305f\u7b54\u3048\u306f{10+20-15}\u3067\u3059')  \n\u246110\u306820\u3092\u8db3\u3057\u306615\u3092\u5f15\u3044\u305f\u7b54\u3048\u306f15\u3067\u3059  \n\\> a = 10 + 20 - 15  \n\\> print(f'\u246210\u306820\u3092\u8db3\u3057\u306615\u3092\u5f15\u3044\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3057\u305f\u5909\u6570\u306e\u4e2d\u8eab\u306f{a}\u3067\u3059')  \n\u246210\u306820\u3092\u8db3\u3057\u306615\u3092\u5f15\u3044\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3057\u305f\u5909\u6570\u306e\u4e2d\u8eab\u306f15\u3067\u3059\n\n<\/details>","54ed0d8f":"`test` \u306e\u65b9\u306b\u3082\u540c\u3058\u64cd\u4f5c\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002","9af623c9":"\u8aad\u307f\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\uff01\u30c7\u30fc\u30bf\u63d0\u4f9b\u8005\u306e\u554f\u984c\u610f\u8b58\u3068\u307b\u3057\u3044\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002  \n\n- \u95a2\u6570\u5ba3\u8a00  \n  `def function_name(args):` \u3067\u72ec\u81ea\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u8a73\u3057\u304f\u306f[\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e4.6. \u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b](https:\/\/docs.python.org\/ja\/3.5\/tutorial\/controlflow.html#defining-functions)\u3092\u8aad\u3093\u3067\u307f\u3066\u4e0b\u3055\u3044\u3002  \n  \u95a2\u6570\u306f\u623b\u308a\u5024\u304c\u6709\u3063\u3066\u3082\u7121\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u304c\u3001\u6709\u308a\u306e\u5834\u5408\u306f `return ...` \u3067\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u6b20\u640d\u5024\u306f\u30d6\u30e9\u30f3\u30af\u306b\u7f6e\u63db\u3057\u3001\u305d\u308c\u4ee5\u5916\u306f\u5358\u306b\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u305f\u5024\u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u306e\u3067\u3001\u305d\u306e\u3088\u3046\u306a\u5024\u3092 `return` \u3055\u305b\u3066\u3044\u307e\u3059\u3002  \n\n- Python \u306e if \u3068\u4e09\u9805\u6f14\u7b97\u5b50  \n  Python \u306e if \u306e\u4f7f\u3044\u65b9\u306f [\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](https:\/\/docs.python.org\/ja\/3.5\/tutorial\/controlflow.html#if-statements)\u306b\u3082\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n  \n  ```\n  if \u6761\u4ef61:\n      \u6761\u4ef61\u304c\u6e80\u305f\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\n  elif \u6761\u4ef62:\n      \u6761\u4ef62\u304c\u6e80\u305f\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\n  else:\n      \u3069\u306e\u6761\u4ef6\u3082\u6e80\u305f\u3055\u308c\u306a\u304b\u3063\u305f\u6642\u306e\u51e6\u7406\n  ```\n  `elif` \u3084 `else` \u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u306e\u3067\u306a\u304f\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u3002_\u6761\u4ef6n_ \u306e\u90e8\u5206\u306f\u8ad6\u7406\u5f0f\u3067\u3082\u826f\u3044\u3067\u3059\u3057\u3001\u30d6\u30fc\u30eb\u5024\u3067\u3082\u3001[\u5b9f\u306f\u6574\u6570\u3068\u304b\u6587\u5b57\u5217\u306e\u5909\u6570\u3067\u3082\u5024\u306b\u5fdc\u3058\u3066 True or False \u304c\u5224\u5b9a\u3055\u308c\u307e\u3059](https:\/\/docs.python.org\/ja\/3\/library\/stdtypes.html)\u3002  \n  \u66f4\u306b\u4ee5\u4e0b\u306e\u66f8\u304d\u65b9\u3082\u30a2\u30ea\u3067\u3059\u3002\n  \n  > \u5909\u6570 = \u6761\u4ef6\u6587\u304c\u771f\u306e\u5834\u5408\u306e\u5024 if \u6761\u4ef6\u6587 else \u6761\u4ef6\u6587\u304c\u507d\u306e\u5834\u5408\u306e\u5024\n  \n  \u30b3\u30fc\u30c9\u3067\u306f\u3053\u306e\u66f8\u304d\u65b9\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002","f72c3d2a":"`hue` \u306f\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002","1f823e7e":"\u6b21\u304b\u3089\u524d\u51e6\u7406\u306b\u5165\u308a\u307e\u3059\u3002","03118668":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4e00\u6c17\u306b\u66f8\u304f\u4e8b\u3082\u3067\u304d\u307e\u3059\uff01  \n\u306a\u304a [`matplotlib.pyplot` \u306e `figure()` \u306e `figsize`](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.figure.html) \u3092\u6307\u5b9a\u3059\u308b\u3068\u30b0\u30e9\u30d5\u306e\u5927\u5c0f\u3092\u5909\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"}}