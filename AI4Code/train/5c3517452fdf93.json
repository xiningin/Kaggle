{"cell_type":{"35568afa":"code","4ad2bde9":"code","ace2fb7c":"code","d98cb2c4":"code","52caaa8f":"code","eb80a70f":"code","c2d76811":"code","117706ef":"code","323d7b44":"code","87ab65ee":"code","6749c103":"code","0e05dab7":"code","3b9415e7":"code","a0bdb77b":"code","2dba2b83":"code","b375452e":"code","210898bb":"code","e96d55d6":"code","ef987a46":"code","c345987f":"code","6caebbd6":"code","acdbdcb1":"code","61d2d72b":"code","22a72ceb":"code","18df5787":"code","6b62d6b8":"code","f7fa6be8":"code","0e5168cd":"code","1b0c0d87":"code","d32d2398":"code","a61fa5eb":"code","3f0a1a92":"code","bfb7364b":"code","6b7cb13e":"code","9dd126e7":"code","239fd1cc":"code","2b447e00":"code","bee6f721":"code","bdb54820":"code","b79caff3":"code","0e28a821":"markdown","fc284f33":"markdown","7c0e2074":"markdown","d7961b83":"markdown","037d597d":"markdown","94d6b46f":"markdown","b696577b":"markdown","2ba66525":"markdown"},"source":{"35568afa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4ad2bde9":"from sklearn import datasets\nimport matplotlib.pyplot as plt\nimport numpy as np, pandas as pd, math\nfrom sklearn.linear_model import LogisticRegression ","ace2fb7c":"np.random.seed(22)\n\nmeans = [[3.2, 2], [4, 2]]\ncov = [[.3, .2], [.2, .3]]\nN = 50\nN1=10\nX0 = np.random.multivariate_normal(means[0], cov, N) # class 1\nX1 = np.random.multivariate_normal(means[1], cov, N1) # class -1 \nX = np.concatenate((X0.T, X1.T), axis = 1) # all data \ny = np.concatenate((-1*np.ones((1, N)), 1*np.ones((1, N1))), axis = 1) # labels \n# print(X)\n# print(y)","d98cb2c4":"plt.figure(figsize=(10,10))","52caaa8f":"plt.plot(X0[:, 0], X0[:, 1], 'b^', markersize = 4, alpha = .8)\nplt.plot(X1[:, 0], X1[:, 1], 'go', markersize = 4, alpha = .8)\nplt.plot([3, 3.1], [0, 3.5], lw=1, color=\"darkorange\")\n\nplt.plot([1.18070687, 4.28018474], [0, 3.8], lw=1, color=\"green\") # Run 1\nplt.plot([1.35426177, 3.87462372], [0.,  3.8], lw=1, color=\"darkgreen\") # Run 2\nplt.axis('equal')\nplt.xlabel('x1')\nplt.ylabel('x2')\nplt.plot()\nplt.show()","eb80a70f":"# Xbar \nX = np.concatenate((np.ones((1, N+N1)), X), axis = 0)","c2d76811":"def h(w, x):    \n    return np.sign(np.dot(w.T, x))\n\ndef has_converged(X, y, w):    \n    return np.array_equal(h(w, X), y) \n\ndef perceptron(X, y, w_init):\n    w = [w_init]\n    eta=0.1\n    J=[5]\n    N = X.shape[1]\n    d = X.shape[0]\n    mis_points = []\n    n_iteration = 0\n    while True:\n        # mix data \n        # ho\u00e1n v\u1ecb\n        mix_id = np.random.permutation(N)\n        for i in range(N):\n            xi = X[:, mix_id[i]].reshape(d, 1)\n            yi = y[0, mix_id[i]]\n            if h(w[-1], xi)[0] != yi: # misclassified point\n                mis_points.append(mix_id[i])\n                w_new = w[-1] + yi*xi \n                w.append(w_new)\n            # tinh J thu i:\n                j_new=0            \n                for j in range(N):\n                    xj = X[:, mix_id[j]].reshape(d, 1)\n                    yj = y[0, mix_id[j]]\n                    if h(w[-2], xj)[0] != yj:\n                        j_new=j_new-yj*np.dot(w[-2].T,xj)[0,0]\n                J.append(j_new)\n        n_iteration = n_iteration + 1\n        if has_converged(X, y, w[-1]) or n_iteration > 1000:\n            print(\"Converged at {} iteration\".format(n_iteration))\n            break\n    return (w, mis_points,J)","117706ef":"d = X.shape[0]\nw_init = np.array([[0],[-1],[1]])\nprint(w_init)\n(w,m,J) = perceptron(X, y, w_init)\nprint(len(w))\n# print(J)","323d7b44":"print(w[-1])\nprint(J[-1])\nprint(w[0])","87ab65ee":"plt.figure(figsize=(15, 8))\n\nfor i in range (100):\n    w0 = w[i*50][0]\n    w1 = w[i*50][1]\n    w2 = w[i*50][2]\n    x2 = np.array([0, 3.8])\n    x1 = (-w0 - w2*x2)\/w1\n    plt.plot(x1, x2, lw=1, color=\"red\") # Run 2\n    if i<1:\n        plt.plot(x1, x2, lw=2, color=\"blue\") # Run 2\nplt.plot(x1, x2, lw=3, color=\"black\") # Run 2\nplt.plot(X0[:, 0], X0[:, 1], 'b^', markersize = 4, alpha = .8)\nplt.plot(X1[:, 0], X1[:, 1], 'go', markersize = 4, alpha = .8)\nplt.axis('equal')\nplt.xlabel('x1')\nplt.ylabel('x2')\nplt.plot()\nplt.axis([0, 6, 0, 4])\nplt.show()","6749c103":"X = np.array([[0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 1.75, 2.00, 2.25, 2.50, \n              2.75, 3.00, 3.25, 3.50, 4.00, 4.25, 4.50, 4.75, 5.00, 5.50]])\ny = np.array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1])\nX = np.concatenate((np.ones((1, X.shape[1])), X), axis = 0)\ndef sigmoid(s):\n    return 1\/(1 + np.exp(-s))\n\ndef logistic_sigmoid_regression(X, y, w_init, eta, tol = 1e-4, max_count = 10000):\n    w = [w_init]    \n    it = 0\n    N = X.shape[1]\n    d = X.shape[0]\n    count = 0\n    check_w_after = 20\n    while count < max_count:\n        # mix data \n        mix_id = np.random.permutation(N)\n        for i in mix_id:\n            xi = X[:, i].reshape(d, 1)\n            yi = y[i]\n            zi = sigmoid(np.dot(w[-1].T, xi))\n            w_new = w[-1] + eta*(yi - zi)*xi\n            count += 1\n            # stopping criteria\n            if count%check_w_after == 0:                \n                if np.linalg.norm(w_new - w[-check_w_after]) < tol:\n                    return w\n            w.append(w_new)\n    return w\neta = .05 \nd = X.shape[0]\nw_init = np.random.randn(d, 1)\n\nw = logistic_sigmoid_regression(X, y, w_init, eta)\nprint(w[-1])\n","0e05dab7":"print(len(w))","3b9415e7":"X0 = X[1, np.where(y == 0)][0]\ny0 = y[np.where(y == 0)]\nX1 = X[1, np.where(y == 1)][0]\ny1 = y[np.where(y == 1)]\nplt.figure(figsize=(15, 8))\n\nplt.plot(X0, y0, 'ro', markersize = 8)\nplt.plot(X1, y1, 'bs', markersize = 8)\n\nxx = np.linspace(-2, 8, 1000)\nplt.axis([-2, 8, -0.1, 1.1])\nfor i in range(100):\n    w0 = w[i*30][0][0]\n    w1 = w[i*30][1][0]\n    threshold = -w0\/w1\n    yy = sigmoid(w0 + w1*xx)\n    plt.plot(xx, yy, 'g-', linewidth = 2)\n    if i<4:\n        plt.plot(xx, yy, 'b-', linewidth = 2)\nplt.plot(xx, yy,'*', 'black', linewidth = 2)\nplt.plot(threshold, .5, 'y^', markersize = 2)\nplt.xlabel('studying hours')\nplt.ylabel('predicted probability of pass')\nplt.grid()\nplt.show()","a0bdb77b":"pdfBreast = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","2dba2b83":"pdfBreast.shape","b375452e":"pdfBreast.head()","210898bb":"pdfBreast.describe()","e96d55d6":"pdfBreast.columns","ef987a46":"lsCol = pdfBreast.columns\nftCol = [c for c in lsCol if c not in [\"id\", \"diagnosis\", \"Unnamed: 32\"]]\nlbCol = \"diagnosis\"","c345987f":"ftCol","6caebbd6":"data = pdfBreast[ftCol].values\nlabel = (pdfBreast[lbCol]=='M').values\n# print(data)\n# print(label)","acdbdcb1":"# Area Mean vs Label\ntumorSize = pdfBreast[\"radius_mean\"].values\n# print(tumorSize)\n# print(label)","61d2d72b":"plt.figure(figsize=(10, 5))\nplt.plot(tumorSize, label, 'bo')\n# plt.axis([140, 190, 45, 75])\nplt.xlabel('Tumor Size')\nplt.ylabel('Malignant')\nplt.grid(True)\nplt.show()","22a72ceb":"# TODO:\nlogReg = LogisticRegression()\nlogReg.fit(tumorSize.reshape(-1, 1), label)","18df5787":"X_new = np.linspace(0, 30, 100).reshape(-1, 1)\ny_proba = logReg.predict_proba(X_new)\nplt.plot(X_new, y_proba[:, 1], \"g-\", label=\"Predicting\")\nplt.plot(tumorSize, label, 'bo')\n# plt.axis([140, 190, 45, 75])\nplt.xlabel('Tumor Size')\nplt.ylabel('Malignant')\nplt.grid(True)\nplt.show()","6b62d6b8":"pdfTitanic = pd.read_csv(\"\/kaggle\/input\/titanic\/train_and_test2.csv\")","f7fa6be8":"pdfTitanic.shape","0e5168cd":"pdfTitanic.head()","1b0c0d87":"pdfTitanic.describe()","d32d2398":"# pdfTitanic.hist(bins=50, figsize=(20,15))\n# plt.show()","a61fa5eb":"pdfTitanic.plot(kind=\"scatter\", x=\"Age\", y=\"Fare\", alpha=0.1)","3f0a1a92":"pdfTitanic.plot(\n    kind=\"scatter\", x=\"Age\", y=\"Fare\", alpha=0.4,figsize=(10,7),\n    c=\"2urvived\", cmap=plt.get_cmap(\"jet\"), colorbar=True,\n)\nplt.legend()","bfb7364b":"lsCol = [c for c in pdfTitanic.columns if \"zero\" not in c]","6b7cb13e":"# TODO:a\npdfData = pdfTitanic[lsCol]\nlbCol = \"2urvived\"\ndata = pdfTitanic[lsCol].values\nlabel = (pdfTitanic[lbCol]==1).values\nX = pdfTitanic[[\"Age\",\"Sex\",\"Embarked\",\"Pclass\"]].values\nprint(X.shape)\nprint(pdfTitanic[lbCol].shape)\n","9dd126e7":"plt.figure(figsize=(10, 5))\nplt.plot(X[:,0].reshape(-1,1), label, 'bo')\n# plt.axis([140, 190, 45, 75])\nplt.xlabel('age')\nplt.ylabel('dead\/alive')\nplt.grid(True)\nplt.show()","239fd1cc":"print(X.shape)\nprint(label.shape)\nfromNumber=100\nnumber=400\nresult=logReg.fit(X[fromNumber:number,:], label[fromNumber:number])","2b447e00":"more=200\ny_pred = logReg.predict(X[number:number+more,:])\nprint('Accuracy of logistic regression classifier on test set: {:.3f}'.format(logReg.score(X[number:number+more,:], label[number:number+more])))\nprint(X.shape)\nprint(y.shape)","bee6f721":"logReg.predict_proba(X[number:number+20,:])","bdb54820":"# X = np.array([[0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 1.75, 2.00, 2.25, 2.50, \n#               2.75, 3.00, 3.25, 3.50, 4.00, 4.25, 4.50, 4.75, 5.00, 5.50]])\n# y = np.array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1])\nXb = np.array(X)\n\nXb=Xb.T\nXb = np.concatenate((np.ones((1,Xb.shape[1])), Xb), axis = 0)\nprint(Xb.shape)\ny=np.array(pdfTitanic[lbCol])\nprint(Xb.shape)\nprint(y.shape)\ndef sigmoid(s):\n    return 1\/(1 + np.exp(-s))\n# tang max_count se bi error\ndef logistic_sigmoid_regression(X, y, w_init, eta, tol = 1e-4, max_count = 500):\n    w = [w_init]    \n    it = 0\n    N = X.shape[1]\n    d = X.shape[0]\n    count = 0\n    check_w_after = 20\n    while count < max_count:\n        # mix data \n        # tang mix_data la bi error\n        mix_id = np.random.permutation(50)\n        for i in mix_id:\n            xi = X[:, i].reshape(d, 1)\n            yi = y[i]\n            zi = sigmoid(np.dot(w[-1].T, xi))\n#             print(\"x:\",xi)\n#             print(\"y:\",yi)\n#             print(\"z: \",zi)\n            w_new = w[-1] + eta*(yi - zi[0][0])*xi\n            count += 1\n#             print(w_new)\n            # stopping criteria\n            if count%check_w_after == 0:                \n                if np.linalg.norm(w_new - w[-check_w_after]) < tol:\n                    return w\n            w.append(w_new)\n        return w\neta = .0005 \nd = Xb.shape[0]\nw_init = np.random.randn(d, 1)\nprint(Xb.shape)\nprint(y.shape)\nw = logistic_sigmoid_regression(Xb, y, w_init, eta)\nprint(w[-1])\n","b79caff3":"print(X.shape)\nprint(y.shape)\nprint(w[-1])","0e28a821":"### 1. Perceptron Learning Algorithm","fc284f33":"### 2.1 Titanic Survivor - examine data","7c0e2074":"### 2.2 Titanic Survivor - analyse with import lib","d7961b83":"### 2. Logistic Regression","037d597d":"### 2. Titanic Survivor","94d6b46f":"### 1. Breast Cancer","b696577b":"## Practice","2ba66525":"### 2.3 Titanic Survivor - analyse with code"}}