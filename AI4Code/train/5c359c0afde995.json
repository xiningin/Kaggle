{"cell_type":{"b5ae53dd":"code","4dbf15b5":"code","037c45e0":"code","e83009dd":"code","e49c1e36":"code","df9ab78b":"code","3b397dbe":"code","01c6826e":"code","528e5435":"code","030e2cff":"code","61dd4479":"code","5ca65f32":"code","32e5bb19":"code","e1a351a0":"code","dd84de2f":"code","52f92048":"code","907de43a":"code","30207598":"code","a089fa0b":"code","0d6fd2f6":"code","e97eb449":"code","dd8d1a75":"code","723d439f":"code","395a7bbd":"code","5d492652":"code","702b997c":"code","e544a2a5":"code","845eb5fb":"code","af00ea57":"code","82c54c05":"code","ecc56549":"code","577b40db":"code","345e7585":"code","15cc9acb":"code","d115fb5f":"code","0966afef":"code","e67fba10":"code","bd525f28":"code","af5f0078":"code","dac32211":"code","c107b3fc":"code","a5a00406":"code","6dc7eb17":"code","ab3f8f05":"code","2e5d775d":"code","624dc194":"code","0eab4f71":"code","3e28bb7b":"code","e8bf7363":"code","039211ca":"code","cd2004ed":"code","6365fc5d":"code","c8b06b3b":"code","1252a705":"code","0acf64ce":"code","5b8af1ef":"code","23a8b73d":"code","f66d0e2d":"code","f59dbc96":"code","5da078f2":"code","d48d57af":"code","a0f2d4ee":"code","500598fb":"code","f7a686ed":"code","89020aae":"code","c0297e2d":"code","8b014c80":"code","ddc37569":"code","357591b8":"code","4943fc76":"code","ff6069a4":"markdown","df472157":"markdown"},"source":{"b5ae53dd":"#Load pandas library\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom matplotlib import pyplot","4dbf15b5":"#URL of the dataset\ndiamonds_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/diamonds.csv\"\n#Yes, we can read files from a URL straight into a pandas DataFrame!\ndiamonds_df = pd.read_csv(diamonds_url)\n# Since the dataset is available in seaborn, we can alternatively read it in using the following line of code\ndiamonds_df = sns.load_dataset('diamonds')\n\ndef get_100_multiple_ceil(x):\n    y = math.ceil(x\/100)*100\n    return y\n\ndiamonds_df['price_per_carat'] = diamonds_df['price']\/diamonds_df['carat']\ndiamonds_df['price_per_carat_is_high'] = np.where(diamonds_df['price_per_carat']>3500,1,0)\ndiamonds_df['price']= diamonds_df['price']*1.3\ndiamonds_df['rounded_price']=diamonds_df['price'].apply(math.ceil)\ndiamonds_df['rounded_price_to_100multiple']=diamonds_df['price'].apply(lambda x:math.ceil(x\/100)*100)\ndiamonds_df['rounded_price_to_100multiple']=diamonds_df['price'].apply(get_100_multiple_ceil)\n\ndiamonds_df.head()","037c45e0":"def hist_func(data, col, bins1):\n    data.hist(column=col, bins=bins1)\n    \nhist_func(diamonds_df, ['x','y','z'],50)","e83009dd":"sns.distplot(diamonds_df.price)","e49c1e36":"sns.distplot(np.log(diamonds_df.price))","df9ab78b":"cut_count_table = pd.crosstab(index=diamonds_df['cut'],columns='count')","3b397dbe":"cut_count_table.plot(kind='bar')","01c6826e":"sns.catplot(\"cut\", data=diamonds_df, aspect=1.5, kind=\"count\",color=\"b\")","528e5435":"from numpy import median, mean\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x=\"cut\", y=\"price\", data=diamonds_df,estimator=mean)","030e2cff":"ax = sns.barplot(x=\"cut\", y=\"price\", data=diamonds_df, estimator=mean, ci=68, order=['Ideal','Good','Very Good','Fair','Premium'])","61dd4479":"ax = sns.barplot(x=\"cut\", y=\"price\", hue='color', data=diamonds_df)","5ca65f32":"ax = sns.barplot(x='cut', y='price', hue='color', data=diamonds_df)\nax.legend(loc='upper right',ncol = 4)\nax.set_xlabel('cut', fontdict={'fontsize':15})\nax.set_ylabel('price',fontdict={'fontsize':15})","32e5bb19":"flights_df = sns.load_dataset(\"flights\")\nprint(flights_df.head())","e1a351a0":"ax = sns.lineplot(x=\"year\", y=\"passengers\", data=flights_df[flights_df['month']=='January'], color='green')\nax = sns.lineplot(x=\"year\", y=\"passengers\", data=flights_df[flights_df['month']=='February'], color='red')\nax = sns.lineplot(x=\"year\", y=\"passengers\", data=flights_df[flights_df['month']=='March'], color='blue')","dd84de2f":"df_pivoted = flights_df.pivot(\"month\", \"year\", \"passengers\")\na4_dims = (11.7, 8.27)\nfig, n_ax = pyplot.subplots(figsize=a4_dims)\nax = sns.heatmap(df_pivoted)","52f92048":"df_pivoted = flights_df.pivot(\"month\", \"year\", \"passengers\")\na4_dims = (11.7, 8.27)\nfig, n_ax = pyplot.subplots(figsize=a4_dims)\nax = sns.heatmap(df_pivoted,annot=True,fmt='g',cmap='terrain')","907de43a":"chrt = alt.Chart(flights_df).mark_rect().encode(\n        x=alt.X('year:N'),\n        y=alt.Y('passengers:Q',stack=\"normalize\", title=\"Normalized Count\"),\n        color=alt.Color('month:N', legend=alt.Legend(orient=\"bottom\"))\n    ).properties(width=600, height=200,\n                 background='#f5f5f5',title={\n    \"text\": [\"Passengers by Year\"],\n    \"fontSize\":18, \"fontWeight\":600, \"subtitleFontSize\":14\n    })\n\nchrt","30207598":"bars_ml = alt.Chart(flights_df).mark_bar(\n        cornerRadiusTopLeft=3,\n        cornerRadiusTopRight=3\n    ).encode(\n        y=alt.Y('year:O', axis=alt.Axis(grid=False, titleAngle=0)),\n        x=alt.X('passengers:Q',stack=\"normalize\", title=\"Normalized Count\"),\n        color=alt.Color('month:N', legend=alt.Legend(orient=\"top\"), title=\"Month\")\n    ).properties(width=500, height=500,title={\n    \"text\": [\"Yearly count of passenger\"],\n    \"subtitle\": [\"Month vs Passenger\"],\n    \"fontSize\":18, \"fontWeight\":600, \"subtitleFontSize\":14\n    })\n\nbars_ml","a089fa0b":"df_pivoted = flights_df.pivot(\"month\", \"year\", \"passengers\")\nax = sns.clustermap(df_pivoted, col_cluster=True, row_cluster=False,metric='correlation')","0d6fd2f6":"## set the plot style to include ticks on the axes. \nmpg_df = sns.load_dataset(\"mpg\")\nsns.set(style=\"ticks\") \n## hexbin plot \nsns.jointplot(mpg_df.weight, mpg_df.mpg, kind=\"hex\", color=\"#4CB391\")","e97eb449":"# generate KDE plot: first two parameters are arrays of X and Y coordinates of data points \n# parameter shade is set to True so that the contours are filled with a color gradient based on number of data points \nsns.kdeplot(mpg_df.weight, mpg_df.mpg, shade=True)","dd8d1a75":"ax1 = sns.scatterplot(x=\"model_year\", y=\"mpg\", data=mpg_df)","723d439f":"#Change the confidence interval to 68: \nsns.lineplot(x=\"model_year\", y=\"mpg\", data=mpg_df, ci=68)","395a7bbd":"mpg_df = sns.load_dataset(\"mpg\")\nax = sns.distplot(mpg_df.weight, bins=50, kde=False)\n# `label` defines the name used in legend\nplt.axvline(x=np.mean(mpg_df.weight), color='red', label='mean')\nplt.axvline(x=np.median(mpg_df.weight), color='orange',\nlabel='median')\nplt.legend(loc='upper right')","5d492652":"scat = px.scatter(mpg_df, x = 'model_year', y = 'mpg', color = 'origin',marginal_y = 'box')\n\nscat.show()","702b997c":"mpg_df.head()","e544a2a5":"mpg_df['model_decade'] = np.floor(mpg_df.model_year\/10)*10\nmpg_df['model_decade'] = mpg_df['model_decade'].astype(int)\n\nscat1 = px.scatter(mpg_df, x = 'displacement', y = 'horsepower', color = 'origin',marginal_y = 'box', marginal_x = 'rug', animation_frame = 'model_decade',animation_group = 'model_decade')\nscat1.show()","845eb5fb":"plt.legend(loc='upper right')\n\nmpg_df1 = mpg_df[mpg_df['model_year'] < 73]\n# boxplot: mpg (mileage) vs model_decade \n# parameter hue is used to group by a specific feature, in this case 'origin' \nsns.boxplot(x='model_year', y='mpg', data=mpg_df1, hue='origin')\n","af00ea57":"# creating the feature 'model_decade' \nmpg_df['model_decade'] = np.floor(mpg_df.model_year\/10)*10 \nmpg_df['model_decade'] = mpg_df['model_decade'].astype(int) \n# code for violinplots \n# parameter hue is used to group by a specific feature, in this case 'origin', while x represents the model year and y represent mileage \nsns.violinplot(x='model_decade', y='mpg', data=mpg_df, hue='origin')\n","82c54c05":"from bokeh.io import curdoc, output_notebook\nfrom bokeh.plotting import figure, show\nfrom bokeh.models import HoverTool, ColumnDataSource, CategoricalColorMapper, Slider\nfrom bokeh.palettes import Spectral6\nfrom bokeh.layouts import widgetbox, row","ecc56549":"url_co2 = 'https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/co2.csv'\nco2 = pd.read_csv(url_co2)\nurl_gm = 'https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/gapminder.csv'\ngm = pd.read_csv(url_gm)\n\ndf_gm = gm[['Country', 'region']].drop_duplicates()\n\ndf_w_regions = pd.merge(co2, df_gm, left_on='country', right_on= 'Country',how='inner')\ndf_w_regions = df_w_regions.drop('Country', axis = 'columns')\n\nnew_co2 = pd.melt(df_w_regions, id_vars=['country','region'])\n\ncolumns1 = ['country','region','year','co2']\nnew_co2.columns = columns1\n\n\nnew_co2['year'] = new_co2['year'].astype('int64')\ndf_co2 = new_co2[new_co2['year'] > 1963]\ndf_co2 = df_co2.sort_values(by=['country', 'year'])\n\n\ndf_gdp = gm[['Country', 'Year', 'gdp']]\ndf_gdp.columns = ['country', 'year', 'gdp']\n\ndata = pd.merge(df_co2, df_gdp, on=['country', 'year'], how='left')\ndata = data.dropna()","577b40db":"def update_plot(attr, old, new):\n    yr = slider.value\n    new_data = {\n        'x': data.gdp[data['year'] == yr],\n        'y': data.co2[data['year'] == yr],\n        'country': data.country[data['year'] == yr],\n        'region': data.region[data['year'] == yr],\n    }\n    source.data = new_data\n    plot.title.text = 'CO2 Emissions vs GDP in %d' % yr","345e7585":"output_notebook()\nregions_list = data.region.unique().tolist()\ncolor_mapper = CategoricalColorMapper(factors=regions_list,palette=Spectral6)\n\nsource = ColumnDataSource(data={\n'x': data.gdp[data['year'] == 1964],\n'y': data.co2[data['year'] == 1964],\n'country': data.country[data['year'] == 1964],\n'region': data.region[data['year'] == 1964],\n})\n\nxmin, xmax = min(data.gdp), max(data.gdp)\nymin, ymax = min(data.co2), max(data.co2)\n\nplot = figure(title='CO2 Emissions vs GDP in 1964',plot_height=600, plot_width=1000,x_range=(xmin, xmax),y_range=(ymin, ymax), y_axis_type='log')\nplot.circle(x='x', y='y', fill_alpha=0.8, source=source,legend='region', color=dict(field='region', transform=color_mapper),size=7)\nplot.legend.location = 'bottom_right'\nplot.xaxis.axis_label = 'Income Per Person'\nplot.yaxis.axis_label = 'CO2 Emissions (tons per person)'\n\nslider = Slider(start=min(data.year), end=max(data.year), step=1,\nvalue=min(data.year), title='Year')\n\nhover = HoverTool(tooltips=[('Country', '@country'), ('GDP', '@x'),('CO2 Emission', '@y')])\nplot.add_tools(hover)\n\nslider.on_change('value', update_plot)\nlayout = row(widgetbox(slider), plot)\ncurdoc().add_root(layout)\n\nshow(plot)   \n","15cc9acb":"np_co2 = np.array(data['co2'])\nnp_gdp = np.array(data['gdp'])\nnp.corrcoef(np_co2,np_gdp)","d115fb5f":"import pandas as pd\nimport plotly.express as px\n\n\nfig = px.scatter(data, x=\"gdp\", y=\"co2\", animation_frame=\"year\",animation_group=\"country\", color=\"region\", hover_name=\"country\",facet_col=\"region\", width=1579, height=400, log_x=True, size_max=45,range_x=[xmin,xmax], range_y=[ymin,ymax])\n\nfig.show()","0966afef":"fig = px.density_contour(data, x=\"gdp\", y=\"co2\", marginal_x='rug', marginal_y='box', animation_frame=\"year\",animation_group=\"country\", color=\"region\", hover_name=\"country\",width=1579, height=400, range_x=[xmin,xmax], range_y=[ymin,ymax])\n\nfig.show()","e67fba10":"!pip install vega","bd525f28":"import altair as alt\nalt.renderers.enable('notebook')\n#RendererRegistry.enable('notebook')\n\n\ndata1 = data[data['year']<1964]\n\nalt.Chart(data1).mark_circle().encode(\n    x='gdp',\n    y='co2',\n    color='year',\n    ).interactive()\n","af5f0078":"hpi_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/hpi_data_countries.tsv\"\n# Once downloaded, read it into a DataFrame using pandas\nhpi_df = pd.read_csv(hpi_url, sep='\\t')\nhpi_df.head()","dac32211":"fig = plt.figure()\nax = fig.add_subplot(111)\nax = sns.scatterplot(x='Wellbeing (0-10)', y='Happy Planet Index',hue='Region', data=hpi_df)\nplt.show()","c107b3fc":"!pip install altair vega_datasets notebook vega # needs internet in settings (right panel)\nimport altair as alt\nalt.renderers.enable('kaggle')","a5a00406":"alt.Chart(hpi_df).mark_circle().encode(x='Wellbeing (0-10):Q',y='Happy Planet Index:Q',color='Region:N',).interactive()","6dc7eb17":"sns.pairplot(hpi_df, hue = \"Region\")","ab3f8f05":"import pandas as pd\nimport plotly.express as px\n\n\nfig = px.scatter(hpi_df, x=\"Wellbeing (0-10)\", y=\"Happy Planet Index\", color=\"Region\", hover_name=\"Country\", width=1000, height=400, log_x=True, size_max=45)\n\nfig.show()","2e5d775d":"input_dropdown = alt.binding_select(options=list(set(hpi_df.Region)))\nselected_points = alt.selection_single(fields=['Region'], bind=input_dropdown, name='Select')\ncolor = alt.condition(selected_points,alt.Color('Region:N'),alt.value('lightgray'))\nalt.Chart(hpi_df).mark_circle().encode(x='Wellbeing (0-10):Q',y='Happy Planet Index:Q',color=color,tooltip='Country:N').add_selection(selected_points)","624dc194":"alt.Chart(hpi_df).mark_bar().encode(x='Region:N',y='mean(Happy Planet Index):Q',tooltip='mean(Happy Planet Index):Q',).properties(width=400)","0eab4f71":"fig = px.sunburst(hpi_df, path=['Region','Country'], values='Happy Planet Index',\n                  color='Wellbeing (0-10)',\n                  color_continuous_scale='viridis_r')\nfig.update_layout(title_text='Sunburst Image of Happy Planet and Wellbeing',template='plotly_dark')\nfig.show()","3e28bb7b":"import altair as alt\nbars1 = alt.Chart(hpi_df).mark_bar().encode(x='Region:N',y='mean(Happy Planet Index):Q',tooltip='mean(Happy Planet Index):Q',).properties(width=400)\nline1 = alt.Chart(hpi_df).mark_rule(color='firebrick').encode(y='mean(Happy Planet Index):Q',size=alt.SizeValue(3),tooltip='mean(Happy Planet Index):Q',)\nbars2 = alt.Chart(hpi_df).mark_bar().encode(x='Region:N',y='mean(Wellbeing (0-10)):Q',tooltip='mean(Wellbeing (0-10)):Q',).properties(width=400)\nline2 = alt.Chart(hpi_df).mark_rule(color='firebrick').encode(y='mean(Wellbeing (0-10)):Q',size=alt.SizeValue(3),tooltip='mean(Wellbeing (0-10)):Q',)\nbars1 | line1 | bars2 | line2","e8bf7363":"import altair as alt\nbars = alt.Chart().mark_bar().encode(x='Region:N',y='mean(Happy Planet Index):Q',).properties(width=400)\nline = alt.Chart().mark_rule(color='firebrick').encode(y='mean(Happy Planet Index):Q',size=alt.SizeValue(3))\nalt.layer(bars, line, data=hpi_df)","039211ca":"import altair as alt\nselected_bars = alt.selection(type='interval', encodings=['x'])\nbars = alt.Chart(hpi_df).mark_bar().encode(x='Region:N',\n                                           y='mean(Happy Planet Index):Q', opacity=alt.condition(selected_bars, alt.OpacityValue(1), \n                                            alt.OpacityValue(0.7)),).properties(width=400).add_selection(selected_bars)\nline = alt.Chart(hpi_df).mark_rule(color='firebrick').encode(y='mean(Happy Planet Index):Q',\n                                                             size=alt.SizeValue(3)).transform_filter(selected_bars)\nbars + line","cd2004ed":"alt.Chart(hpi_df).mark_rect().encode(alt.X('Happy Planet Index:Q', bin=True),\n                                     alt.Y('Wellbeing (0-10):Q', bin=True),alt.Color('count()',\n                                        scale=alt.Scale(scheme='greenblue'),legend=alt.Legend(title='Total Countries'))).interactive()","6365fc5d":"heatmap = alt.Chart(hpi_df).mark_rect().encode(alt.X('Happy Planet Index:Q', bin=True),\n                                               alt.Y('Wellbeing (0-10):Q', bin=True))\ncircles = heatmap.mark_point().encode(alt.ColorValue('lightgray'),alt.Size('count()',legend=alt.Legend(title='Records in Selection')),\n                                             tooltip='count():Q')\n\nheatmap + circles","c8b06b3b":"import altair as alt\nimport pandas as pd\nhpi_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/hpi_data_countries.tsv', sep='\\t')\n\n\nselected_region = alt.selection(type=\"single\", encodings=['x'])\nheatmap = alt.Chart(hpi_df).mark_rect().encode(alt.X('Wellbeing (0-10):Q', bin=True),\n                                               alt.Y('Life Expectancy (years):Q', bin=True),\n                                               alt.Color('count()',scale=alt.Scale(scheme='greenblue'),\n                                                         legend=alt.Legend(title='Total Countries'))).properties(width=350)\n\ncircles = heatmap.mark_point().encode(alt.ColorValue('grey'),\n                                      alt.Size('count()', \n                                        legend=alt.Legend(title='Records in Selection'))).transform_filter(selected_region)\n\nbars = alt.Chart(hpi_df).mark_bar().encode(x='Region:N',\n                                           y='count()', color=alt.condition(selected_region, \n                                            alt.ColorValue(\"steelblue\"), alt.ColorValue(\"grey\"))).properties(width=350).add_selection(selected_region)\nheatmap + circles | bars","1252a705":"from bokeh.plotting import figure, show, output_file\nfrom bokeh.plotting import figure, output_notebook, show, ColumnDataSource\n\noutput_notebook()\n\nuk_eu_population = pd.read_csv('..\/input\/ukeupop\/ukpop.csv')\n\nuk_population = uk_eu_population[uk_eu_population.country == 'UK']\n\nsource_uk = ColumnDataSource(dict(year=uk_population.year, change = uk_population.change))\nfrance_population = uk_eu_population[uk_eu_population.country == 'France']\nsource_france = ColumnDataSource(dict(year=france_population.year,change=france_population.change))\n\nTOOLTIPS = [(\"population:\", \"@change\")]\n\nr = figure(title=\"Line Plot comparing Population Change\", plot_height=450, tooltips=TOOLTIPS)\nr.line(x=\"year\", y=\"change\", source=source_uk, color='#1F78B4', legend='UK', line_color=\"red\", line_width=3)\nr.line(x=\"year\", y=\"change\", source=source_france, legend='France', line_color=\"black\", line_width=2)\nr.grid.grid_line_alpha=0.3\nshow(r)","0acf64ce":"import pandas as pd\nfrom bokeh.plotting import figure, output_notebook, show, ColumnDataSource\nfrom bokeh.io import push_notebook, show, output_notebook\nfrom ipywidgets import interact\noutput_notebook()\n\n\nTOOLTIPS = [ (\"date\", \"@date\"), (\"value\", \"@close\") ] \np = figure(title=\"Interactive plot to change line width and color\", \n           plot_width=900, plot_height=400, x_axis_type=\"datetime\", tooltips=TOOLTIPS)\n\ndef prepare_data():\n    microsoft_stock = pd.read_csv(\"..\/input\/googlestock\/microsoft_stock.csv\")\n    microsoft_stock[\"date\"] = pd.to_datetime(microsoft_stock[\"date\"])\n    google_stock = pd.read_csv(\"..\/input\/google-stock1\/google_stock1.csv\")\n    google_stock[\"date\"] = pd.to_datetime(google_stock[\"date\"])\n    return microsoft_stock, google_stock\n\n\nmicrosoft_stock, google_stock = prepare_data()\n\nmicrosoft_line = p.line(\"date\",\"close\", source=microsoft_stock, line_width=1.5, legend=\"microsoft_stock\")\ngoogle_line = p.line(\"date\", \"close\", source=google_stock, line_width=1.5, legend=\"google_stock\")\n\ndef update(color, width=1):\n    google_line.glyph.line_color = color\n    google_line.glyph.line_width = width\n    push_notebook()\n\ninteract(update, color=[\"red\", \"blue\", \"gray\"], width=(1,5))\nshow(p, notebook_handle=True)\n    \n    ","5b8af1ef":"import numpy as np\nfrom ipywidgets import interact\nfrom bokeh.io import push_notebook, show,output_notebook\nfrom ipywidgets import interact\nfrom bokeh.models import BoxAnnotation\n\noutput_notebook()\n\nfrom bokeh.sampledata.sea_surface_temperature import sea_surface_temperature\ndata = sea_surface_temperature.loc['2016-02-01':'2016-03-22']\n\n\np = figure(x_axis_type=\"datetime\", title=\"Sea Surface Temperature Range\")\np.background_fill_color = \"#dfffff\"\np.xgrid.grid_line_color=None\np.xaxis.axis_label = 'Time'\np.yaxis.axis_label = 'Value'\n\np.line(data.index, data.temperature, line_color='grey')\np.circle(data.index, data.temperature, color='grey', size=1)\np.add_layout(BoxAnnotation(top=5, fill_alpha=0.1, fill_color='red', line_color='red'))\np.add_layout(BoxAnnotation(bottom=4.5, fill_alpha=0.1, fill_color='red', line_color='red'))\n           \nshow(p)\n","23a8b73d":"from ipywidgets import interact\nimport numpy as np\nfrom bokeh.io import push_notebook, show, output_notebook\nfrom bokeh.plotting import figure\noutput_notebook()\nx = np.linspace(0, 4*np.pi, 1000)\ny = np.sin(x)\np = figure(title=\"simple line example\", plot_height=300, plot_width=600, y_range=(-2,2), background_fill_color='#efffff')\nr = p.line(x, y, color=\"#8888ff\", line_width=1.5, alpha=0.8)\n\ndef update(f, w=1, A=1, phi=0):\n    if f == \"sin\": func = np.sin\n    elif f == \"cos\": func = np.cos\n    elif f == \"tan\": func = np.tan\n    r.data_source.data['y'] = A * func(w * x + phi)\n    push_notebook()\n    show(p, notebook_handle=True)\n    \ninteract(update, f=[\"sin\", \"cos\", \"tan\"], w=(0,50), A=(1,10), phi=(0,20, 0.1))\n    ","f66d0e2d":"import pandas as pd\n\ninternet_usage_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/share-of-individuals-using-the-internet.csv\"\ninternet_usage_df = pd.read_csv(internet_usage_url)\ninternet_usage_df = internet_usage_df.sort_values(by=['Year'], ascending=[True])\n\ninternet_usage_2016 = internet_usage_df.query(\"Year==2016\")\ninternet_usage_2016.head()\n\nimport plotly.express as px\nfig = px.choropleth(internet_usage_2016,locations=\"Code\", color=\"Individuals using the Internet (% of population)\", hover_name=\"Country\", \n                    color_continuous_scale=px.colors.sequential.Plasma)\n\nfig.update_layout(title_text = 'Internet usage across the Asian Continent (% population) - 2016', \n                  geo_scope = 'asia', # can be set to north america | south america | africa | asia | europe | usa\n                 )\n\nfig.show()","f59dbc96":"fig = px.choropleth(internet_usage_df,locations=\"Code\", color=\"Individuals using the Internet (% of population)\", \n                    hover_name=\"Country\",\n                    animation_frame=\"Year\",\n                    color_continuous_scale=px.colors.sequential.Plasma)\n\nfig.update_layout(title_text = 'Internet usage across the Asian Continent (% population)', \n                  geo = dict(projection={'type':'natural earth'})\n                 )\n\nfig.show()","5da078f2":"us_population_url = 'https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/us_state_population.tsv'\ndf = pd.read_csv(us_population_url, sep='\\t')\n\ndf1 = pd.melt(df, id_vars=['State', 'Code'], var_name=\"Year\", value_name=\"Population\")","d48d57af":"df.head()","a0f2d4ee":"df1.head()","500598fb":"import plotly.graph_objects as go\n\n# initialize the figure\nfig = go.Figure(data=go.Choropleth(locations=df1['Code'], # Code for US states\n                                   z = df1['Population'].astype(int), # Data to be color-coded\n                                   locationmode = 'USA-states', # set of locations match\n                        #entries in 'locations' \n                        #    colorscale = 'Blues',\n                        #    colorbar_title = \"Population\",\n                                  ))\n\nfig.update_layout(title_text = 'US Population across states',\n                  geo_scope='usa', # limit map scope to USA\n                )\nfig.show()","f7a686ed":"walmart_locations_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/1962_2006_walmart_store_openings.csv\"\nwalmart_loc_df = pd.read_csv(walmart_locations_url)\n\nimport plotly.graph_objects as go\nfig = go.Figure(data=go.Scattergeo(\n    lon = walmart_loc_df['LON'], # column containing longitude information of the locations to plot\n    lat = walmart_loc_df['LAT'], # column containing latitude information of the locations to plot\n    text = walmart_loc_df['STREETADDR'], # column containing value to be displayed on hovering over the map\n    mode = 'markers' # a marker for each location\n    ))\n\nfig.update_layout(title = 'Walmart stores across world', geo_scope='usa',)\nfig.show()","89020aae":"walmart_stores_by_state = walmart_loc_df.groupby('STRSTATE').count()['storenum'].reset_index().rename(columns={'storenum':'NUM_STORES'})\n\n\nimport plotly.express as px\nfig = px.scatter_geo(walmart_stores_by_state,\n                     locations=\"STRSTATE\", # name of column which contains state codes\n                     size=\"NUM_STORES\", # name of column which contains aggregate value to visualize\n                     locationmode = 'USA-states',\n                     hover_name=\"STRSTATE\",size_max=45)\nfig.update_layout(\n    # add a title text for the plot\n    title_text = 'Walmart stores across states in the US',# limit plot scope to USA\n    geo_scope='usa'\n)\nfig.show()","c0297e2d":"import plotly.express as px\n\ninternet_users_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/number-of-internet-users-by-country.csv\"\ninternet_users_df = pd.read_csv(internet_users_url)\n\ninternet_users_df.sort_values(by=['Year'],inplace=True)\ninternet_users_df.head()\n\nfig = px.scatter_geo(internet_users_df.query(\"Year==2016\"), \n                     locations=\"Code\", # name of column indicating country-codes,\n                     size=\"Number of internet users (users)\", # name of column by which to size the bubble\n                     hover_name=\"Country\", # name of column to be displayed while hovering over the map\n                     size_max=80, # parameter to scale all bubble sizes\n                     color_continuous_scale=px.colors.sequential.Plasma)\n\nfig.update_layout(# add a title text for the plot\n    title_text = 'Internet users across the world - 2016', # set projection style for the plot\n    geo = dict(projection={'type':'natural earth'}) # by default, projection type is set to 'equirectangular'\n)\n\nfig.show()","8b014c80":"import plotly.express as px\nimport pandas as pd\n\ninternet_users_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/number-of-internet-users-by-country.csv\"\ninternet_users_df = pd.read_csv(internet_users_url)\n\ninternet_users_df.sort_values(by=['Year'],inplace=True)\ninternet_users_df.head()\n\nfig = px.scatter_geo(internet_users_df,locations=\"Code\", # name of column indicating country-codes\n                     size=\"Number of internet users (users)\", # name of column by which to size the bubble\n                     hover_name=\"Country\", # name of column to be displayed while hovering over the map\n                     size_max=80, # parameter to scale all bubble size\n                     animation_frame=\"Year\",\n)\nfig.update_layout( # add a title text for the plot \n    title_text = 'Internet users across the world',# set projection style for the plot\n    geo = dict(projection={'type':'natural earth'}) # by default,projection type is set to 'equirectangular'\n)\nfig.show()","ddc37569":"import pandas as pd\nimport plotly.graph_objects as go\n\nus_airports_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/airports.csv\"\nus_airports_df = pd.read_csv(us_airports_url)\n\n\nfig = go.Figure()\nfig.add_trace(go.Scattergeo(locationmode = 'USA-states', lon = us_airports_df['LONGITUDE'], lat = us_airports_df['LATITUDE'],\n                            hoverinfo = 'text', text = us_airports_df['AIRPORT'], mode = 'markers', marker = dict(size = 5,color = 'black')))\n\nfig.update_layout(title_text = 'Airports in the USA',showlegend = False, geo = go.layout.Geo(scope = 'usa'),)\nfig.show()\n","357591b8":"new_year_2015_flights_url = \"https:\/\/raw.githubusercontent.com\/TrainingByPackt\/Interactive-Data-Visualization-with-Python\/master\/datasets\/new_year_day_2015_delayed_flights.csv\"\nnew_year_2015_flights_df = pd.read_csv(new_year_2015_flights_url).head(5)\n\n# merge the DataFrames on origin airport codes\nnew_year_2015_flights_df = new_year_2015_flights_df.merge(us_airports_df[['IATA_CODE','LATITUDE','LONGITUDE']], \n                                                          left_on='ORIGIN_AIRPORT', right_on='IATA_CODE', how='inner')\n# drop the duplicate column containing airport code\nnew_year_2015_flights_df.drop(columns=['IATA_CODE'],inplace=True)\n\n# rename the latitude and longitude columns to reflect that they correspond to the origin airport\nnew_year_2015_flights_df.rename(columns={\"LATITUDE\":\"ORIGIN_AIRPORT_LATITUDE\", \"LONGITUDE\":\"ORIGIN_AIRPORT_LONGITUDE\"},inplace=True)\n\n# merge the DataFrames on destination airport codes\nnew_year_2015_flights_df = new_year_2015_flights_df.merge(us_airports_df[['IATA_CODE','LATITUDE','LONGITUDE']], \n                                                          left_on='DESTINATION_AIRPORT', right_on='IATA_CODE', how='inner')\n\n# drop the duplicate column containing airport code\nnew_year_2015_flights_df.drop(columns=['IATA_CODE'],inplace=True)\n# rename the latitude and longitude columns to reflect that they correspond to the destination airport\nnew_year_2015_flights_df.rename(columns={'LATITUDE':'DESTINATION_AIRPORT_LATITUDE', 'LONGITUDE':'DESTINATION_AIRPORT_LONGITUDE'},inplace=True)\n\n\nfor i in range(len(new_year_2015_flights_df)):\n    fig.add_trace(go.Scattergeo(locationmode = 'USA-states',\n                                lon = [new_year_2015_flights_df['ORIGIN_AIRPORT_LONGITUDE'][i], new_year_2015_flights_df['DESTINATION_AIRPORT_LONGITUDE'][i]],\n                                lat = [new_year_2015_flights_df['ORIGIN_AIRPORT_LATITUDE'][i], new_year_2015_flights_df['DESTINATION_AIRPORT_LATITUDE'][i]],\n                                mode = 'lines', line = dict(width = 1,color = 'red')))\n\n    fig.update_layout(title_text = 'Delayed flight on Jan 1, 2015 in USA',showlegend = False,geo = go.layout.Geo(scope = 'usa'),)\n                  \n\nfig.show()","4943fc76":"!pip install pivottablejs\nfrom pivottablejs import pivot_ui\npivot_ui(new_year_2015_flights_df)","ff6069a4":"Referennces:\n\n1. Interactive Data Visualization with Python by Abha Belorkar \n\n2. https:\/\/www.kaggle.com\/datahobbit\/eda-of-kaggle-data-science-survey-2020-by-country\n","df472157":"# This notebook is to summarize different Data Visualization. Interactive ones are at the end\nI have used the book and code snippets from Interactive Data Visualization with Python by Abha Belorkar as reference \nThe primary agenda is to create a notebook with all options of visualizations possible and to use the code from here for all future visualizations"}}