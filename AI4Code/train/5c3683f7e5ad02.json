{"cell_type":{"535bc705":"code","c0230c99":"code","77ce036e":"code","09b9b1f3":"code","4c1818cd":"code","eb3c19df":"code","d66a5794":"code","80cfe858":"code","1882a4cf":"code","77d822a2":"code","7796a614":"code","0a8be4a0":"code","ea1962fe":"code","5f647612":"code","8d56c232":"code","c15cf31b":"code","3a71af16":"code","1aac2fbf":"code","467e1801":"code","fb6894c3":"code","5663d8bc":"code","c005e848":"code","864dc3ba":"code","0bf900f7":"markdown","2d24f747":"markdown","e8b6789d":"markdown","cff90af0":"markdown","2f5318fb":"markdown","28d980e2":"markdown","e2751cc6":"markdown","3b19001a":"markdown","16af35fe":"markdown","875f56f4":"markdown","5e815b5f":"markdown","41804c69":"markdown","eade8445":"markdown"},"source":{"535bc705":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom matplotlib import pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\n%matplotlib inline\nfrom plotly.subplots import make_subplots\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c0230c99":"data = pd.read_csv(\"..\/input\/covid192\/covid19 - covid19.csv\")\ncoordinates = pd.read_csv(\"..\/input\/coordi\/Indian Coordinates.csv\")\ndata.describe(include=\"all\")","77ce036e":"data.head()","09b9b1f3":"print(pd.isnull(data).sum())\n","4c1818cd":"Recovered = data[data['Current Status'] == \"Recovered\"]\nRecovered_count = Recovered['1'].count()\n","eb3c19df":"Active = data[data['Current Status'] == \"Hospitalized\"]\nActive_count = Active['1'].count()\nDeath = data[data['Current Status'] == \"Deceased\"]\nDeath_count = Death['1'].count()\nprint('There are', Recovered_count, 'recovered',Death_count,'deaths and',Active_count,'active cases.' )","d66a5794":"male = data[data.Gender=='M']\nfemale = data[data.Gender=='F']\n","80cfe858":"plt.figure(figsize=(15, 5))\nplt.title('Gender')\ndata.Gender.value_counts().plot.bar();\nprint(\"Male = M and Female = F\")","1882a4cf":"df = pd.DataFrame(data) \ndf['Recovered'] = data['Current Status']\ndf['Death'] = data['Current Status']\ndf['Active'] = data['Current Status']\ndata.head()","77d822a2":"embarked_mapping = {\"Recovered\": 1, \"Hospitalized\": 0, \"Deceased\": 0}\ndata['Recovered'] = data['Recovered'].map(embarked_mapping)\nactive_mapping = {\"Recovered\": 0, \"Hospitalized\": 1, \"Deceased\": 0}\ndata['Active'] = data['Active'].map(active_mapping)\ndeath_mapping = {\"Recovered\": 0, \"Hospitalized\": 0, \"Deceased\": 1}\ndata['Death'] = data['Death'].map(death_mapping)\ndata","7796a614":"plt.figure(figsize=(25,10))\ndf=pd.DataFrame({'Nationality':data['Nationality'].value_counts().index,'Count':data['Nationality'].value_counts().values})\nax=sns.barplot(x=\"Count\",y=\"Nationality\",data=df, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=15,color='black')\nax.set_title('Count of people affected and their nationality', pad=20)\nplt.xlabel('Count of people affected', fontsize=20)\nplt.ylabel('Nationality', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=14)\nplt.show()","0a8be4a0":"plt.figure(figsize=(20,5))\ndf=pd.DataFrame({'Type of transmission':data['Type of transmission'].value_counts().index,'Count':data['Type of transmission'].value_counts().values})\nax=sns.barplot(x=\"Count\",y=\"Type of transmission\",data=df, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=15,color='black')\nax.set_title('Count of people affected and their nationality', pad=20)\nplt.xlabel('Count of people affected', fontsize=20)\nplt.ylabel('Type of transmission', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=8)\nplt.show()","ea1962fe":"plt.figure(figsize=(25,20))\nax=sns.barplot(data['Detected State'].value_counts().values,data['Detected State'].value_counts().index, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=12,color='black')\nax.set_title('Count of detected cases in different states of India.', pad=20)\nplt.xlabel('Count of people detected', fontsize=20)\nplt.ylabel('State', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=15)\nplt.show()","5f647612":"data['Date Announced'] = data['Date Announced'].astype('datetime64[ns]') \n\ndata['Date Announced'] = data['Date Announced'].dt.strftime('%m\/%d\/%Y')\ndata\n","8d56c232":"recent_stats = data.groupby('Date Announced', as_index = False)['Active', 'Death', 'Recovered'].sum()\nsorted_stats = recent_stats.sort_values(by = 'Date Announced', ascending = False)\nsorted_stats.head()","c15cf31b":"fig = go.Figure() \nimport matplotlib.dates as mdates\nmyFmt = mdates.DateFormatter('%d-%m-%y')\nax.xaxis.set_major_formatter(myFmt)\nfig.add_trace(go.Scatter(\n                x= sorted_stats['Date Announced'],\n                y= sorted_stats['Active'],\n                name = \"Active Cases\",\n                line_color= \"deepskyblue\",\n                opacity= 0.8))\nfig.update_layout(title_text= \"Daily reported covid cases across India \")\n\nfig.show()","3a71af16":"fig2 = go.Figure() \n\nfig2.add_trace(go.Scatter(\n                x= recent_stats['Date Announced'],\n                y= recent_stats['Death'],\n                name= \"Total Deaths\",\n                line_color= \"gray\",\n                opacity= 0.8))\nfig2.add_trace(go.Scatter(\n                x= recent_stats['Date Announced'],\n                y= recent_stats['Recovered'],\n                name= \"Recovered\",\n                line_color= \"deeppink\",\n                opacity= 0.8))\n\nfig2.update_layout(title_text= \"Death and recovered cases across India on different DATES.\")\nfig2.show()","1aac2fbf":"plt.figure(figsize=(25,15))\nax=sns.barplot(data['Detected District'].value_counts()[:20].values,data['Detected District'].value_counts()[:20].index, palette=sns.dark_palette(\"blue\", reverse=True))\nfor i in ax.patches:\n    ax.text(i.get_width()+0.50, i.get_y()+0.50, \\\n            str(int(i.get_width())), fontsize=30,color='black')\nax.set_title('Top 20 districts with highest count of affected people.', pad=20,fontsize=40)\nplt.xlabel('Count of people affected', fontsize=30)\nplt.ylabel('District', fontsize=30)\n# plt.rc('xtick',labelsize=0)\n# plt.rc('ytick',labelsize=20)\nplt.show()","467e1801":"# get recent stats\nage_stats = data.groupby('Age Bracket', as_index = False)['Active', 'Death', 'Recovered'].sum()\nsortedage_stats = age_stats.sort_values(by = 'Age Bracket', ascending = False)\nsortedage_stats.head()","fb6894c3":"fig4 = go.Figure()\nfig4.add_trace(go.Scatter(\n                x= sortedage_stats['Age Bracket'],\n                y= sortedage_stats['Active'],\n                name = \"Active Cases\",\n                line_color= \"deepskyblue\",\n                opacity= 0.8))\nfig4.update_layout(title_text= \"Daily reported covid cases with different AGE GROUP \")\n\nfig4.show()","5663d8bc":"fig3 = go.Figure() \n\nfig3.add_trace(go.Scatter(\n                x= age_stats['Age Bracket'],\n                y= age_stats['Death'],\n                name= \"Total Deaths\",\n                line_color= \"gray\",\n                opacity= 0.8))\nfig3.add_trace(go.Scatter(\n                x= age_stats['Age Bracket'],\n                y= age_stats['Recovered'],\n                name= \"Recovered\",\n                line_color= \"deeppink\",\n                opacity= 0.8))\n\nfig3.update_layout(title_text= \"Death and recovered cases with different AGE GROUP\")\nfig3.show()","c005e848":"\nf, ax = plt.subplots(figsize=(23,10))\nax=sns.scatterplot(x=\"Age Bracket\", y=\"Active\", data=data,\n             color=\"black\",label = \"Active\")\nax=sns.scatterplot(x=\"Age Bracket\", y=\"Recovered\", data=data,\n             color=\"red\",label = \"Recovered\")\nax=sns.scatterplot(x=\"Age Bracket\", y=\"Death\", data=data,\n             color=\"blue\",label = \"Death\")\nplt.plot(data['Age Bracket'],data.Active,zorder=1,color=\"black\")\nplt.plot(data['Age Bracket'],data.Recovered,zorder=1,color=\"red\")\nplt.plot(data['Age Bracket'],data.Death,zorder=1,color=\"blue\")","864dc3ba":"plt.figure(figsize=(25,10))\nax=sns.swarmplot(data['Current Status'],data['Age Bracket'],palette=sns.dark_palette(\"blue\", reverse=True))\nax.set_title('Graph between age and current status of affected people', pad=20,fontsize=20)\nplt.xlabel('Current Status', fontsize=20)\nplt.ylabel('Age Bracket', fontsize=20)\nplt.rc('xtick',labelsize=10)\nplt.rc('ytick',labelsize=10)","0bf900f7":"# IMPORT MATERIAL ","2d24f747":"# Ways to prevent Corona:\n\n* Wash your hands regularly for 20 seconds, with soap and water or alcohol-based hand rub\n* Cover your nose and mouth with a disposable tissue or flexed elbow when you cough or sneeze\n* Avoid close contact (1 meter or 3 feet) with people who are unwell\n* Stay home and self-isolate from others in the household if you feel unwell\n* Don't touch your eyes, nose, or mouth if your hands are not clean","e8b6789d":"# *First of all, Apart from notbook and analysis.I want to say that please don't take this virus lightly.It has already affected more than a million people. \n# Strictly abide to the decisions of the government and stay within your houses during lockdown period.*","cff90af0":"# *Data Interpretation COVID19 India*","2f5318fb":"# Thank you. ","28d980e2":"# It was just the beginning, I will update the data and include more Data Visuals daily.","e2751cc6":"![](https:\/\/www.railway-technology.com\/wp-content\/uploads\/sites\/24\/2020\/03\/connection-4884862_1280.jpg)","3b19001a":"# Most affected age group with covid19 is 20 to 35 years old.","16af35fe":" **As you guys could see, Most of the Indians who were tested positive are in between 20-30.**","875f56f4":"# Most of the Deaths are occuring in between age group 60-70.","5e815b5f":"# Reason for most of the covid19 cases is still unknown.","41804c69":"# Mumbai is the leading city with over 200 cases.","eade8445":"# Most of the affected people are Indians only.\n"}}