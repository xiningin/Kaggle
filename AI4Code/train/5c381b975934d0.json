{"cell_type":{"4a5fe16a":"code","4caad8db":"code","43728411":"code","46286834":"code","767029e3":"code","8e3450e4":"code","b22fbebd":"code","50e41951":"code","18ea53ed":"code","d6ab8e79":"code","3b12ddd3":"code","8f387312":"code","46f268fb":"code","56173ad2":"code","8946bd0f":"code","8dbffeb0":"code","03d0c436":"code","ef2d4812":"code","5ca6150b":"code","24825f94":"code","c802be33":"code","49558294":"code","78bc0815":"code","ff39886c":"code","11f24ba8":"code","0d7c5084":"code","5bf3befe":"code","37f5970a":"code","0d921675":"markdown","f080d7fc":"markdown","7765818c":"markdown","22bb6b4b":"markdown","ace098aa":"markdown","6fac03e0":"markdown","95ffd15c":"markdown","0c7888ec":"markdown","d094a78c":"markdown","2610f61e":"markdown","e11a459a":"markdown","cc9b2918":"markdown","56e037b5":"markdown","2f5607ae":"markdown","1d068f00":"markdown","4228bfff":"markdown","f1998442":"markdown","b3eee1ea":"markdown","09cfe49b":"markdown","3a4c7ae4":"markdown"},"source":{"4a5fe16a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4caad8db":"import pandas as pd,numpy as np\nimport matplotlib.pyplot as plt    # For plotting\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","43728411":"ef = pd.read_csv('..\/input\/nyc-tax-lot-zoning\/pluto.csv')","46286834":"ef = ef.iloc[:,:10]\nef.head()","767029e3":"df = pd.read_csv('..\/input\/nyc-tax-regression\/Train.csv')","8e3450e4":"new_df = pd.merge(df, ef,  how='inner', left_on=['Block','Lot'], right_on = ['block','lot'],left_index = True,copy = False)\nnew_df.shape","b22fbebd":"new_df = new_df[np.isfinite(new_df['block'])]","50e41951":"new_df2 = new_df.drop_duplicates(subset = ['PropertyID'])\nnew_df2.shape","18ea53ed":"import pandas_profiling as pp\npp.ProfileReport(new_df2)","d6ab8e79":"new_df2 = new_df2.drop(['Address','State','TotalNoOfUnits','DateOfEvaluation','PropertyID'],axis = 1)\nnew_df2 = new_df2.drop(['Block','Lot','address','block','lot','bldgclass'],axis = 1)\nnew_df2.head()","3b12ddd3":"new_df2.iloc[:,[0,2,4,5,9,12,13,17]] = new_df2.iloc[:,[0,2,4,5,9,12,13,17]].astype('category')\nnew_df2.dtypes","8f387312":"def cut_levels(x, threshold, new_value):\n    x = x.copy()\n    value_counts = x.value_counts()\n    labels = value_counts.index[value_counts < threshold]\n    x[np.in1d(x, labels)] = new_value\n    return x\n\n# def cut_levels(x, threshold, new_value):\n#     value_counts = x.value_counts()\n#     labels = value_counts.index[value_counts < threshold]\n#     x[np.in1d(x, labels)] = new_value\n\nnew_df2['zonedist1'] = cut_levels(new_df2['zonedist1'], 21, 'others')\nnew_df2['BldgClassCategory'] = cut_levels(new_df2['BldgClassCategory'], 14, 'others')\nnew_df2['Surroundings'] = cut_levels(new_df2['Surroundings'], 30, 'others')\nnew_df2['BldgClass_AtEvaluationTime'] = cut_levels(new_df2['BldgClass_AtEvaluationTime'], 20, 'others')\n\n#new_df2['Surroundings'].value_counts()","46f268fb":"new_df2['Age'] = 2014-new_df2['YearOfConstruction']\nnew_df2 = new_df2.drop(['YearOfConstruction'],axis = 1)\n\nnew_df2['Age'] = new_df2['Age'].astype('int')\nnew_df2.dtypes","56173ad2":"new_df3 = new_df2[~new_df2.index.duplicated()]\nnew_df3['builtfar'] = new_df3['builtfar'].fillna(method = 'ffill')","8946bd0f":"X = new_df3.copy().drop(\"PropertyEvaluationvalue\",axis=1) \ny = new_df3[\"PropertyEvaluationvalue\"]\n\n## Split the data into trainx, testx, trainy, testy with test_size = 0.20 using sklearn\ntrainx, testx, trainy, testy = train_test_split(X, y, test_size=0.20)\n\n## Print the shape of X_train, X_test, y_train, y_test\nprint(trainx.shape)\nprint(testx.shape)\nprint(trainy.shape)\nprint(testy.shape)","8dbffeb0":"trainx.head()","03d0c436":"# !pip3 install --upgrade git+https:\/\/github.com\/scikit-learn-contrib\/categorical-encoding\n\nfrom category_encoders import *\n","ef2d4812":"enc = TargetEncoder(cols=['Surroundings', 'BldgClassCategory','Borough',\n                          'NoOfResidentialUnits','NoOfCommercialUnits','TaxClass_AtEvaluationTime','council','landuse',\n                          'BldgClass_AtEvaluationTime','zonedist1','schooldist','ZipCode']).fit(trainx,trainy)\n# transform the datasets\ntrainx2 = enc.transform(trainx.reset_index(drop=True),trainy)\ntestx2 = enc.transform(testx.reset_index(drop = True))\n","5ca6150b":"trainx2['assessland'] = trainx2['assessland'].replace(0,trainx2['assessland'].mean())\ntestx2['assessland'] = testx2['assessland'].replace(0,testx2['assessland'].mean())\n","24825f94":"trainx2['LandAreaInSqFt'] = np.log(trainx2['LandAreaInSqFt'])\ntrainx2['GrossAreaInSqFt'] = np.log(trainx2['GrossAreaInSqFt'])\ntrainx2['assessland'] = np.log(trainx2['assessland'])\n#trainx2['builtfar'] = np.log(trainx2['builtfar'])\n\ntestx2['LandAreaInSqFt'] = np.log(testx2['LandAreaInSqFt'])\ntestx2['GrossAreaInSqFt'] = np.log(testx2['GrossAreaInSqFt'])\ntestx2['assessland'] = np.log(testx2['assessland'])\n#testx2['builtfar'] = np.log(testx2['builtfar'])","c802be33":"trainx2 = trainx2.reset_index()\ntestx2 = testx2.reset_index()","49558294":"from sklearn.preprocessing import StandardScaler\n\n## Scale the numeric attributes\nscaler = StandardScaler()\nscaler.fit(trainx2)\n\ntrainx2 = scaler.transform(trainx2)\ntestx2 = scaler.transform(testx2)\n#tf1[['GrossAreaInSqFt','LandAreaInSqFt','Age']] = scaler.transform(tf1[['GrossAreaInSqFt','LandAreaInSqFt','Age']])\ntrainx2 = pd.DataFrame(trainx2)\ntestx2 = pd.DataFrame(testx2)\n\ntrainx2.head()","78bc0815":"# from sklearn.decomposition import PCA\n\n# pca_model = PCA(n_components=6)\n# pca_model.fit(trainx2)\n# trainx2 = pca_model.transform(trainx2)\n# testx2 = pca_model.transform(testx2)","ff39886c":"from sklearn.neighbors import KNeighborsRegressor\nKNN = KNeighborsRegressor(n_neighbors=15,metric='manhattan',leaf_size=40,p=3,weights='distance',algorithm = 'kd_tree')\n%time KNN.fit(trainx2,trainy)","11f24ba8":"from sklearn.metrics import mean_absolute_error,mean_squared_error\nimport numpy as np\ndef mean_absolute_percentage_error(y_true, y_pred):\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n# import math\n# %time KNN_train_pred = KNN.predict(trainx2)\n# print(mean_absolute_percentage_error(KNN_train_pred,trainy))\n\n%time KNN_test_pred = KNN.predict(testx2)\nprint(mean_absolute_percentage_error(KNN_test_pred,testy))","0d7c5084":"from sklearn.model_selection import GridSearchCV\n\ngrid_params = {\n    'n_neighbors':[7,9,11,13,15,17],\n    'weights' : ['uniform','distance'],\n    'metric' : ['euclidean','manhattan']\n}\n\ngs = GridSearchCV(KNeighborsRegressor(),\n                  grid_params,\n                  verbose = 1,\n                  cv = 3,\n                  n_jobs = -1\n                 )\n%time gs_results = gs.fit(trainx2,trainy)","5bf3befe":"gs_results.best_estimator_","37f5970a":"df_sub = pd.DataFrame(knn_subpred2)\ndf_sub.to_csv('Sub4_226.csv')","0d921675":"![Approach](http:\/\/https:\/\/www.kaggle.com\/sriharipramod\/nyc-regression-approach)","f080d7fc":"![](http:\/\/)","7765818c":"### Log transforming numerical features with skewness","22bb6b4b":"## Predictive Modelling","ace098aa":"#### Grid Search CV","6fac03e0":"**Feature Engineering**\n\nExtracting Age feature from Year of Construction","95ffd15c":"Reducing the levels by binning the less frequent levels into 'Others'","0c7888ec":"Handling NaNs - Forward filling","d094a78c":"### **Problem Description**\n\nPredict assessed property value  for the purpose of property tax assessment\n\nAssessed value depends on the variables such as  location, building class for understanding constructive use, area (land and\/or buildup), year of construction etc.  Location can be measured by certain data elements like ZIP code, longitudinal, latitudinal measures etc\n\nWe try to create an analytical and modelling framework to predict the property evaluation value based on the quantitative and qualitative features provided in the dataset","2610f61e":"Importing additional database for feature engineering (from **NewYork OpenData**)","e11a459a":"Reading Train.csv file","cc9b2918":"## Target Encoding","56e037b5":"Converting Datatypes","2f5607ae":"Importing Libraries","1d068f00":"## Standard Scaling","4228bfff":"## Train Test(Validation) Split","f1998442":"## Exploratory Data Analysis","b3eee1ea":"Merging both the data tables on Block and Lot features","09cfe49b":"## Best result : MAPE on validation set = 22.542","3a4c7ae4":"### KNN Regressor"}}