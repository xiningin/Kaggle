{"cell_type":{"6edff33a":"code","56e753f1":"code","5a924ed1":"code","bf55578a":"code","d018c237":"code","00537d4d":"code","f7b764cb":"code","c4f93fd4":"code","abc05c89":"code","09fbacd2":"code","0edb72fa":"code","d03903cb":"code","1131f173":"code","488ef25e":"code","e0adb96f":"code","5e8d3346":"code","8f12d12e":"code","b77454c7":"code","3d06bc5e":"code","42679673":"code","8ee5abb2":"code","1ad931a6":"code","e274357c":"code","b5282f87":"code","664ebf9e":"code","d2461662":"code","3d81f73b":"code","46e0c611":"code","2604ed54":"code","1b565392":"code","14a160f6":"code","0371309f":"markdown","7088a580":"markdown","b74b125a":"markdown","9f6fc87f":"markdown","470d5060":"markdown","55036c9f":"markdown","38782727":"markdown"},"source":{"6edff33a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set_style('dark')\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error","56e753f1":"train_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","5a924ed1":"train_df.head()","bf55578a":"test_df.head()","d018c237":"com=pd.concat([train_df,test_df],axis=0)","00537d4d":"def missing_value(data):\n    for col in com.columns:\n        if com[col].isna().sum()!=0:\n            missing=com[col].isna().sum()\n            print(f\"{col: <{20}} {missing}\")\n         \nmissing_value(com)   ","f7b764cb":"com=com.drop(['MiscFeature','Fence','PoolQC',\n                        'Alley'],axis=1)\ncom.shape","c4f93fd4":"col_with_zero_value=['BsmtFinSF2','LowQualFinSF','BsmtHalfBath',\n                     'EnclosedPorch','3SsnPorch','ScreenPorch',\n                     'PoolArea','MiscVal']\n\ncom=com.drop(col_with_zero_value,axis=1)","abc05c89":"fig,ax=plt.subplots(figsize=(30,30))\nsns.heatmap(com.corr(),annot=True)","09fbacd2":"#high corr between 'GarageCars' and 'GarageArea' so let's remove 'GarageCars'\ncom=com.drop(['GarageCars'],axis=1)","0edb72fa":"#split data into num and categ\nnum_cols=[col for col in com.columns if \n          (com[col].dtype in (\"int32\", \"int64\", \"float64\"))]\ncateg_col=[col for col in com.columns if \n          (com[col].dtype =='object')]","d03903cb":"#missing value \nmissing_value(com[num_cols])   ","1131f173":"for col in num_cols:\n    if com[col].isna().sum!=0:\n        com[col]=com[col].fillna(\n            com[col].mean())       ","488ef25e":"#some col have Nan cell but it means no feature in it\ncol_nan=['FireplaceQu','GarageType','GarageFinish','BsmtFinType2','BsmtFinType1',\n         'BsmtExposure','BsmtCond','MasVnrType','BsmtQual','GarageQual','GarageCond']\nfor col in col_nan:\n    if com[col].isna().sum!=0:\n        com[col]=com[col].fillna('na')","e0adb96f":"#other missing value\nfor col in categ_col:\n    if com[col].isna().sum!=0:\n        com[col]=com[col].fillna(com[col].mode()[0])","5e8d3346":"missing_value(com)","8f12d12e":"num_data=com[num_cols]\n#scal num data\nstc=StandardScaler()\nscal_num_data=pd.DataFrame(stc.fit_transform(com[num_cols]),columns=num_cols)\nscal_num_data=scal_num_data.drop(['Id','SalePrice'],axis=1)","b77454c7":"#OneHotEncoder\ncateg_data=com[categ_col]\nenc= OneHotEncoder(sparse=False, handle_unknown='ignore')\nenc_categ=enc.fit_transform(categ_data)\nenc_categ=pd.DataFrame(enc_categ) \ncom=pd.concat([scal_num_data,enc_categ],axis=1)","3d06bc5e":"train=com.iloc[0:1460,:]\ntest=com.iloc[1460:,:]","42679673":"#To see the distribution of num data in relation to the price\nfig, ax = plt.subplots(5,6,figsize=(25,25))\nax=ax.flatten()\nfor i, col in enumerate(num_cols):\n    sns.scatterplot(y='SalePrice', x=col, ax=ax[i], data=train_df)\n    ax[i].set_ylabel(col)\nplt.show()","8ee5abb2":"y=train_df['SalePrice']\nX=train","1ad931a6":"#let's cheak price of every unique value in categ data\nfor col in categ_col:\n    print(train_df.groupby(train_df[col])['SalePrice'].mean().sort_values())\n    print('_'*40)","e274357c":"y=train_df['SalePrice']\n#train_df_final=pd.concat([scal_num_data,enc_categ],axis=1)\nX=train","b5282f87":"X_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.8,random_state=5)","664ebf9e":"LR_model=LinearRegression()   \nRF_model=RandomForestRegressor(n_estimators=200)\nKNN_model=KNeighborsRegressor(n_neighbors=8)\nDT_model=DecisionTreeRegressor(random_state=1)\nxg_model=xgb.XGBRegressor(learning_rate=.1,booster='dart')","d2461662":"LR_model.fit(X_train,y_train)\ny_pred=LR_model.predict(X_test)\nprint('r2_score for RL: ',r2_score(y_test,y_pred))\nprint('rmse for RL_model: ',np.sqrt(mean_squared_error(y_test,y_pred)))","3d81f73b":"KNN_model.fit(X_train,y_train)\ny_pred=KNN_model.predict(X_test)\nprint('r2_score for KNN: ',r2_score(y_test,y_pred))\nprint('rmse for KNN_model: ',np.sqrt(mean_squared_error(y_test,y_pred)))","46e0c611":"xg_model.fit(X_train,y_train)\ny_pred=xg_model.predict(X_test)\nprint('r2_score for xg: ',r2_score(y_test,y_pred))\nprint('rmse for RL_model: ',np.sqrt(mean_squared_error(y_test,y_pred)))","2604ed54":"RF_model.fit(X_train,y_train)\ny_pred=RF_model.predict(X_test)\nprint('r2_score for RF: ',r2_score(y_test,y_pred))\nprint('rmse for RF_model: ',np.sqrt(mean_squared_error(y_test,y_pred)))","1b565392":"DT_model.fit(X_train,y_train)\ny_pred=DT_model.predict(X_test)\nprint('r2_score for DT: ',r2_score(y_test,y_pred))\nprint('rmse for DT_model: ',np.sqrt(mean_squared_error(y_test,y_pred)))","14a160f6":"pred_test=RF_model.predict(test)\npred=pd.DataFrame(pred_test)","0371309f":"now it is clean without any missing value","7088a580":"wait,wait ,we have a better fitting","b74b125a":"As expected,it is xgboost ","9f6fc87f":"no no what is that ","470d5060":"after we finish ,let's split it into original data","55036c9f":"not bad,but RF model is the best","38782727":"at least it is more better"}}