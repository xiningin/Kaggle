{"cell_type":{"9afacdad":"code","135a0f3a":"code","36638a66":"code","39d0dbb9":"code","53b545d1":"code","77405485":"code","b1ee083b":"code","ef39f442":"code","c203608e":"code","30ed0c1e":"code","204fe86b":"code","60e99a90":"code","8d39eb90":"code","e2fb2cce":"code","35cfd127":"code","9110bef4":"code","c0883ad8":"markdown","bbc178b2":"markdown","f808a61a":"markdown","fb726b9f":"markdown","766e5738":"markdown"},"source":{"9afacdad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n       # print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","135a0f3a":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport glob\n\nimport shutil \nnewpath = '\/kaggle\/working\/images' \nif not os.path.exists(newpath):\n    os.makedirs(newpath)\nprint(os.listdir(\"..\/input\/dogs-vs-cats\/Data\/Train\/\"))","36638a66":"# copy dog training images to working directory\nmypath = \"..\/input\/dogs-vs-cats\/Data\/Train\/Dogs\"\nfor root, dirs, files in os.walk(mypath):\n    for file in files:\n      src = mypath+\"\/\"+file\n      dst = \"\/kaggle\/working\/images\"\n      shutil.copy(src, dst)","39d0dbb9":"# copy cat training images to working directory\nmypath = \"..\/input\/dogs-vs-cats\/Data\/Train\/Cats\"\nfor root, dirs, files in os.walk(mypath):\n    for file in files:\n      src = mypath+\"\/\"+file\n      dst = \"\/kaggle\/working\/images\"\n      shutil.copy(src, dst)","53b545d1":"# copy  testing images to working directory\nmypath = \"..\/input\/dogs-vs-cats\/Data\/Test\/\"\nfor root, dirs, files in os.walk(mypath):\n    for file in files:\n      src = mypath+\"\/\"+file\n      dst = \"\/kaggle\/working\/images\"\n      shutil.copy(src, dst)","77405485":"train_df = pd.read_csv('..\/input\/dogs-vs-cats\/Data\/Train.csv')\ntest_df = pd.read_csv('..\/input\/dogs-vs-cats\/Data\/Sample_Submission.csv')[\"File_Name\"].to_frame()\n\ntrain_df.head()","b1ee083b":"from keras.preprocessing.image import img_to_array\n\ntrain_data = np.empty((train_df.shape[0], 200, 200, 3), dtype=np.uint8)\nfor i, fpath in enumerate(train_df[\"File_Name\"].values):\n    img = cv2.imread(\"\/kaggle\/working\/images\/\"+fpath)\n    img=cv2.resize(img,(200,200))\n    train_data[i, ...] = img\n\ntest_data = np.empty((test_df.shape[0], 200, 200,3), dtype=np.uint8)\nfor i, fpath in enumerate(test_df[\"File_Name\"].values):\n    img = cv2.imread(\"\/kaggle\/working\/images\/\"+fpath)\n    img=cv2.resize(img,(200,200))\n    test_data[i, ...] = img\n","ef39f442":"print(train_data.shape)","c203608e":"import tensorflow as tf\nfrom keras import applications\nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.models import Sequential, Model \n\n    \nmodel= applications.ResNet50(weights = \"imagenet\", include_top=False, input_shape = (200, 200, 3))\nfor layer in model.layers:\n    layer.trainable = False\n\n#Adding custom Layers \n\nx = model.layers[-1].output\nx = Flatten()(x)\nx = Dense(256, activation=\"relu\")(x)\nx = Dropout(0.3)(x)\nx = Dense(1000, activation=\"relu\")(x)\n\npredictions = Dense(1, activation=\"sigmoid\")(x)\n\n# creating the final model \nmodel_final = Model( inputs = model.input,outputs = predictions)\n    #model_final.summary()\ny_train = np.asarray(train_df[\"Category\"]).astype('float32').reshape((-1,1))\nmodel_final.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    \nmodel_final.fit(train_data,y_train,epochs=6,validation_split=0.1)\n","30ed0c1e":"!mkdir -p saved_model\nmodel_final.save('saved_model\/my_model')","204fe86b":"tflite_model_file = \"\/kaggle\/working\/final_model.tflite\"\nconverter = tf.lite.TFLiteConverter.from_saved_model('\/kaggle\/working\/saved_model\/my_model')\n#converter.optimizations = [tf.lite.Optimize.OPTIMIZE_FOR_SIZE]\ntflite_model = converter.convert()\nwith open(tflite_model_file, \"wb\") as f:\n    f.write(tflite_model)","60e99a90":"ans=model_final.predict(test_data)","8d39eb90":"ans= ans>0.5\nans","e2fb2cce":"ans=ans*1\nans","35cfd127":"output=pd.DataFrame()\noutput['File_Name']=test_df['File_Name']\noutput['Category']=ans\noutput.to_csv('mobilenetv2_5_adam.csv',index=False)","9110bef4":"tf.__version__","c0883ad8":"# **Create and train the model**","bbc178b2":"# **Save the model**","f808a61a":"# **Generating output Dog:1 Cat:0**","fb726b9f":"# **Convert the model to tflite(for deployment)**","766e5738":"# **Load the data and preprocess it**"}}