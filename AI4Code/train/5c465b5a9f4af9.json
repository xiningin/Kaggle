{"cell_type":{"dfb22318":"code","17329e11":"code","c6edf00b":"code","1715dc2a":"code","dd8c24ec":"code","e50fb8e7":"code","b80b3b81":"code","e8de84b7":"code","1deeae23":"code","4d5431fc":"code","9db3baf4":"code","736570e3":"code","5ca33fd9":"code","5f53c1f7":"markdown","99a2be12":"markdown","3531f95a":"markdown","65c23af1":"markdown","f9fa5be7":"markdown","55c0a253":"markdown","2e39b1c5":"markdown","3d6bfb51":"markdown"},"source":{"dfb22318":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt","17329e11":"path = '..\/input\/logistic-regression\/Social_Network_Ads.csv'\ndf = pd.read_csv(path)\ndf.head()","c6edf00b":"gender_to_idx = {'Male': 0, 'Female': 1}\ndf.replace(gender_to_idx, inplace=True)","1715dc2a":"age_max = df['Age'].max()\n\nsalary_std = df['EstimatedSalary'].std()\nsalary_mean = df['EstimatedSalary'].mean()\n\ndf['Age'] \/= age_max\ndf['EstimatedSalary'] = (df['EstimatedSalary'] - salary_mean) \/ salary_std","dd8c24ec":"df.head()","e50fb8e7":"# indexes for purchased\nidx_zero = df[df['Purchased'] == 0].index\nidx_one = df[df['Purchased'] == 1].index\n\nplt.figure(figsize=(14,8))\nplt.title(\"Age\/Salary vs ADS Purchase\")\nplt.plot(df['Age'][idx_zero], df['EstimatedSalary'][idx_zero], 'bo', label='Not Purchased')\nplt.plot(df['Age'][idx_one], df['EstimatedSalary'][idx_one], 'ro', label='Purchased')\nplt.ylabel('Estimated Salary')\nplt.xlabel('Age')\nplt.legend()\nplt.show()","b80b3b81":"def sigmoid(x):\n    return 1. \/ (1. + np.exp(-x))\n\ndef cost_function_reg(theta, X, y, lambda_reg):\n    m = y.shape[0]\n    theta = theta[:, np.newaxis] \n    \n    # forward\n    h = sigmoid(X.dot(theta))\n    \n    # cost\n    J = (1\/m) * (-y.T.dot(np.log(h)) - (1-y).T.dot(np.log(1-h))) + (lambda_reg\/(2*m)) * np.sum(theta[1:]**2)\n\n    # backward\n    dl = h - y\n    grad = (1\/m) * dl.T.dot(X) + ((lambda_reg\/m) * theta.T)\n    grad[0, 0] = (1\/m) * dl.T.dot(X[:, 0])\n\n    return J, grad[0]","e8de84b7":"def predict(X, theta):\n    z = sigmoid(X.dot(theta))\n    y_pred = [1 if z[i] >= 0.5\n                 else 0 for i in range(len(z))]\n    return y_pred\n\ndef accuracy(y_hat, y):\n    return np.mean(y_hat == y)","1deeae23":"def reset(df):\n    X = np.hstack((np.ones((df.shape[0],1)),df[['Age', 'EstimatedSalary']].values))\n    y = np.array(df['Purchased'].values).reshape(-1,1)\n\n    m = np.zeros(3)\n    v = np.zeros(3)\n    vhat = np.zeros(3)\n    \n    scale = 1\/max(1., (2+2)\/2.)\n    limit = np.sqrt(3.0 * scale)\n    theta = np.random.uniform(-limit, limit, size=(3))\n    \n    return theta, X, y ,m, v, vhat","4d5431fc":"alpha = 0.1\nbeta1 = 0.9\nbeta2 = 0.99\n\nnr_epochs = 100\nbatches = np.array_split(np.arange(len(df)), len(df) \/ 128)","9db3baf4":"lambda_reg = [0, 5, 10, 25]\n\nbest_acc = 0\nbest_params = {'theta': None}\n\nfor lambda_ in lambda_reg:\n    \n    theta, X, y, m, v, vhat = reset(df)\n    \n    costs = 0\n    for t in range(nr_epochs):\n\n        for b in batches:\n            J, g = cost_function_reg(theta, X[b], y[b], lambda_)\n            costs += J\n\n            # AMSGrad optimizer\n            for i in range(g.shape[0]):\n                m[i] = beta1**(t+1) * m[i] + (1.0 - beta1**(t+1)) * g[i]\n                v[i] = (beta2 * v[i]) + (1.0 - beta2) * g[i]**2\n                vhat[i] = max(vhat[i], v[i])\n                theta -= alpha * m[i] \/ (np.sqrt(vhat[i]) + 1e-8)\n\n    y_hat = predict(X, theta)\n    accs = accuracy(y_hat, y.reshape(-1))\n            \n    costs = costs \/ nr_epochs \/ len(batches)\n    print(\"Lambda:%3d, Accuracy:%1.3f, Costs:%1.3f\" % (lambda_, accs, costs))\n    \n    if(best_acc < accs):\n        best_acc = accs\n        best_params['theta'] = theta","736570e3":"y_hat = predict(X, best_params['theta'])\nacc = accuracy(y_hat, y.reshape(-1))\nprint(\"Accuracy:%1.3f\" % acc)","5ca33fd9":"# preds indexes for purchases\npred_zero = np.where(np.array(y_hat) == 0)[0].tolist()\npred_one = np.where(np.array(y_hat) == 1)[0].tolist()\n\nplt.figure(figsize=(14,8))\nplt.title(\"Age\/Salary vs ADS Purchase\")\nplt.plot(df['Age'][pred_zero], df['EstimatedSalary'][pred_zero], 'bo', label='Not Purchased')\nplt.plot(df['Age'][pred_one], df['EstimatedSalary'][pred_one], 'ro', label='Purchased')\nplt.ylabel('Estimated Salary')\nplt.xlabel('Age')\nplt.legend()\nplt.show()","5f53c1f7":"<h1 id=\"params\" style=\"color:#5d3f40; background:#d0d1d3; border:0.5px dotted #5d3f40;\"> \n    <center>Hyperparameters\n        <a class=\"anchor-link\" href=\"#params\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","99a2be12":"<h1 id=\"dataset\" style=\"color:#5d3f40; background:#d0d1d3; border:0.5px dotted #5d3f40;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","3531f95a":"<h1 id=\"train\" style=\"color:#5d3f40; background:#d0d1d3; border:0.5px dotted #5d3f40;\"> \n    <center>Training\n        <a class=\"anchor-link\" href=\"#train\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","65c23af1":"<div width=\"100%\">\n    <img width=\"100%\" src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/1846\/3197\/6a5ff6daea1050c44d680bc692bcc784\/dataset-cover.jpg\" \/>\n<\/div>","f9fa5be7":"![logistic.png](attachment:8bfc40df-a71b-43fc-95bc-e5594275fe05.png)","55c0a253":"<h1 id=\"preds\" style=\"color:#5d3f40; background:#d0d1d3; border:0.5px dotted #5d3f40;\"> \n    <center>Prediction\/Accuracy functions\n        <a class=\"anchor-link\" href=\"#preds\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","2e39b1c5":"<h1 id=\"results\" style=\"color:#5d3f40; background:#d0d1d3; border:0.5px dotted #5d3f40;\"> \n    <center>Analysis\n        <a class=\"anchor-link\" href=\"#results\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","3d6bfb51":"<h1 id=\"cost\" style=\"color:#5d3f40; background:#d0d1d3; border:0.5px dotted #5d3f40;\"> \n    <center>Cost function\n        <a class=\"anchor-link\" href=\"#cost\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>"}}