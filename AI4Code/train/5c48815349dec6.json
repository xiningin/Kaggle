{"cell_type":{"aa901593":"code","2d865695":"code","66c1f706":"markdown","e3a88909":"markdown","5cc8a4fe":"markdown"},"source":{"aa901593":"from sklearn.linear_model import LinearRegression\nfrom IPython.display import IFrame\nfrom IPython.display import display\nfrom ipywidgets import Layout, HBox, VBox, interact,\\\nIntSlider, FloatSlider,ToggleButtons, ColorPicker, Dropdown, interactive_output\n\nimport numpy as np\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n","2d865695":"style_ = {'description_width': 'initial', 'handle_color': 'cyan'}\nlayout_ = Layout(width='600px')\n\ndata_ = px.data.tips()\ndata_ = data_.replace({'Sun':0, 'Sat':7, 'Thur':3, 'Fri':5,'Female':0, 'Male':1,'No':0, 'Yes':1,'Dinner':1, 'Lunch':0})\n\nclass Tool:\n    def __init__(self, name):\n        self.name = name\n\n    def Dropdown_(self, value):\n        return Dropdown(description=self.name,\n                        value=value,\n                        options=list(data_.columns))\n    \n    def FloatSlider_(self, value, min, max, step):\n        return FloatSlider(description=self.name,\n                           style=style_,\n                           layout=layout_,\n                           min=min,max=max,step=step,value=value,)\n    \n    def ColorPicker_(self, value):\n        return ColorPicker(description=self.name,\n                           concise=False,\n                           value=value)\n    \n    def IntSlider_(self, value, min, max, step):\n        return IntSlider(description=self.name,\n                           style=style_,\n                           layout=layout_,\n                           min=min,max=max,step=step,value=value,)\n         \ndef Change(No_of_parameters):\n    fig = go.Figure()\n    dataset__length__ = Tool(\"Dataset Length: \").IntSlider_(min=1,max=244,step=1,value=180)\n    \n#     colm_X1 = Tool(\"Parameters: \").Dropdown_(value='tip')\n#     colm_X2 = Tool(\"Parameters: \").Dropdown_(value='tip')\n#     colm_Y = Tool(\"Parameters: \").Dropdown_(value='tip')\n    \n    if No_of_parameters == 1:\n        \n        def Plot1D(marker_opacity, marker_col, marker_size, line_opacity, line_col, line_width,\n                   colm, dataset_length):\n            fig = go.Figure(\n                go.Scatter(\n                    x=data_[colm][:dataset_length],\n                    y=np.zeros(len(data_[colm][:dataset_length])),\n                    mode='markers',\n                    marker=dict(size=marker_size, color=marker_col),\n                    opacity=marker_opacity,\n                ))\n\n            fig.update_xaxes(showgrid=False, )\n            fig.update_yaxes(showgrid=False,\n                             zeroline=True,\n                             zerolinecolor=line_col,\n                             zerolinewidth=line_width,\n                             showticklabels=False)\n\n            fig.update_layout(\n                title=f\"<b> Line Plot for feature {colm.title()} <b>\",\n                xaxis_title=f\"{colm.upper()}\",\n                plot_bgcolor='white',\n                font=dict(\n                    family=\"Ubuntu\",\n                    size=18,\n                    color=\"Black\",),\n                height=300,)\n            fig.show()\n            \n        interact(Plot1D,\n                 marker_opacity = Tool(\"Marker Opacity: \").FloatSlider_(min=0,max=1,step=0.001,value=0.8),\n                 marker_col = Tool('Marker color: ').ColorPicker_(value='#27c4ff'),\n                 marker_size = Tool(\"Marker Size: \").FloatSlider_(min=0.01, max=50, step=0.1, value=15),\n                 line_opacity = Tool(\"Line Opacity: \").FloatSlider_(min=0,max=1,step=0.001,value=0.8),\n                 line_col = Tool('Line color: ').ColorPicker_(value='#2e2e2e'),\n                 line_width = Tool('Line Width: ').FloatSlider_(min=0.1,max=30,step=0.1,value=2.5),\n                \n                 colm = Tool(\"Parameters: \").Dropdown_(value='tip'),\n                 dataset_length = dataset__length__,\n                )\n\n    elif No_of_parameters == 2:\n        m, b = np.polyfit(data_.total_bill[:180], data_.tip[:180], 1)\n        def Dataset(dataset_length):\n            def Plot2D(marker_opacity, marker_col, marker_size, line_opacity, line_col, line_width, \n                   b1, b0, colm_X, colm_Y):\n            \n                X = data_[colm_X][:dataset_length]\n                Y = data_[colm_Y][:dataset_length]\n                \n                b1, b0 = np.polyfit(X, Y, 1)\n\n                fig = go.Figure(\n                    go.Scatter(\n                        x= X,\n                        y= Y,\n                        name=f\"b0 = {round(b0,2)},  b1 = {round(b1,2)}\",\n                        mode='markers',\n                        marker=dict(color=marker_col,\n                                    size=marker_size,\n                                    line=dict(color='#2E2E2E', width=0.5)\n                                   ),\n                        opacity=marker_opacity\n                    ))\n\n                fig.add_traces(\n                    go.Scatter(\n                        x=X,\n                        y=np.dot(b1, X) + b0,\n                        name=f'Line of Best Fit',\n                        mode='lines',\n                        line=dict(width=line_width, color=line_col,smoothing=0.8),\n                        opacity=line_opacity,\n                    ))\n\n                fig.update_layout(\n                    title=f\"<b> {colm_X.title()} VS {colm_Y.title()} <b>\",\n                    xaxis_title=f\"{colm_X.upper()}\",\n                    yaxis_title=f\"{colm_Y.upper()}\",\n                   #legend_title=r\"$ y=b_0x+b_1 $\",\n                    font=dict(\n                        family=\"Ubuntu\",\n                        size=15,\n                        color=\"Black\",\n                    ),\n#                     plot_bgcolor='#ededed',\n                    height=500,\n                    width=950,\n                )\n\n                fig.show()\n            \n            interact(Plot2D,\n                 marker_opacity = Tool(\"Marker Opacity: \").FloatSlider_(min=0,max=1,step=0.001,value=0.7),\n                 marker_col = Tool('Marker color: ').ColorPicker_(value='#10b2f7'),\n                 marker_size = Tool(\"Marker Size: \").FloatSlider_(min=0.01, max=50, step=0.1, value=15),\n                 line_opacity = Tool(\"Line Opacity: \").FloatSlider_(min=0,max=1,step=0.001,value=0.5),\n                 line_col = Tool('Line color: ').ColorPicker_(value='#fb9a33'),\n                 line_width = Tool('Line Width: ').FloatSlider_(min=0.1,max=30,step=0.1,value=2.5),\n                 \n                 b1=Tool(f\"<b>Slope {r'$(b_1)$'} <b>\").FloatSlider_(min=-5,max=5,step=0.01,value=float(m)),\n                 b0=Tool(f\"<b>Intercept {r'$(b_0)$'} <b>\").FloatSlider_(min=-10,max=10,step=0.01,value=float(b)),\n                 colm_X = Tool(r\"$X = $\").Dropdown_(value='total_bill'),\n                 colm_Y = Tool(r\"$Y = $\").Dropdown_(value='tip'),\n                )\n        \n        interact(Dataset,dataset_length = dataset__length__)\n\n    elif No_of_parameters ==3:\n        \n        def Dataset(dataset_length):\n            Y = data_.iloc[:, 1][:dataset_length]\n            X1X2 = data_[[f'{data_.columns[0]}',f'{data_.columns[6]}']][:dataset_length]\n\n            LR = LinearRegression().fit( X1X2, Y)\n            b0_, b1_, b2_ = LR.intercept_, LR.coef_[0], LR.coef_[1]\n\n            def Plot3D(marker_opacity, marker_col, marker_size, line_opacity, line_col, line_width, mesh_col,\n                       mesh_opacity, b0, b1, b2, colm_X1, colm_X2, colm_Y):\n                \n                X1 = data_[colm_X1][:dataset_length]\n                X2 = data_[colm_X2][:dataset_length]\n                Y = data_[colm_Y][:dataset_length]\n                \n                X1X2 = data_[[colm_X1, colm_X2]][:dataset_length]\n                LR = LinearRegression().fit( X1X2, Y)\n                b0, b1, b2 = LR.intercept_, LR.coef_[0], LR.coef_[1]\n\n                Y_pred = b0 + np.dot(b1,X1) + np.dot(b2,X2) \n                X1_pred = - (b0\/b1) + np.dot((1\/b1), Y) - np.dot((b2\/b1), X2) \n                X2_pred = - (b0\/b2) - np.dot((b1\/b2), X1) + np.dot((1\/b2), Y)\n\n                fig = go.Figure(go.Scatter3d(x=X1, y=X2, z=Y_pred,\n                                             mode='lines',\n                                             name=f'Line of Best Fit',\n                                             line=dict(width=line_width, color=line_col),\n                                             opacity=line_opacity,))\n    \n                fig.add_traces(go.Scatter3d(x=X1, y=X2, z=Y,\n                                            mode='markers',\n                                            name=f\"b0={round(b0, 2)}, b1={round(b1, 2)},  b2={round(b2, 2)}\",\n                                            marker=dict(color=marker_col,\n                                                        size=marker_size,\n#                                                         line=dict(color='grey', width=0),\n                                                       ),\n                                            opacity=marker_opacity\n                                           ))\n\n                fig.add_trace(go.Mesh3d(x=X1, y=X2, z=Y_pred,\n                                        opacity=mesh_opacity,\n                                        color=mesh_col,\n                                        showscale=True,\n                                        name=\"Plane\",\n                                       ))\n\n                fig.update_layout(\n                    title=f\"<b> {colm_X1.title()} VS {colm_X2.title()} VS {colm_Y.title()}<b>\",\n                    scene = dict(\n                        xaxis_title=f'{colm_X1.upper()}',\n                        yaxis_title=f'{colm_X2.upper()}',\n                        zaxis_title=f'{colm_Y.upper()}'),\n#                         ,\n#                         margin=dict(r=20, b=10, l=10, t=10),\n    #                 legend_title=r\"$ y=b_0x+b_1 $\",\n                    font=dict(\n                        family=\"Ubuntu\",\n                        size=15,\n                        color=\"Black\",\n                    ),\n                    plot_bgcolor='white',\n                    height=700,\n                    width=950,\n                )\n\n                fig.show()\n\n            interact(Plot3D,\n                     marker_opacity = Tool(\"Marker Opacity: \").FloatSlider_(min=0,max=1,step=0.001,value=0.7),\n                     marker_col = Tool('Marker color: ').ColorPicker_(value='#26c037'),\n                     marker_size = Tool(\"Marker Size: \").FloatSlider_(min=0.01, max=50, step=0.1, value=5),\n                     line_opacity = Tool(\"Line Opacity: \").FloatSlider_(min=0,max=1,step=0.001,value=0.9),\n                     line_col = Tool('Line color: ').ColorPicker_(value='#182831'),\n                     line_width = Tool('Line Width: ').FloatSlider_(min=0.1,max=30,step=0.1,value=2.5),\n\n                     mesh_col = Tool('Mesh color: ').ColorPicker_(value='#f0de32'),\n                     mesh_opacity = Tool(\"Mesh Opacity: \").FloatSlider_(min=0,max=1,step=0.001,value=0.6),\n\n                     colm_X1 = Tool(\"$X_1 = $\").Dropdown_(value='size'),\n                     colm_X2 = Tool(\"$X_2 = $\").Dropdown_(value='total_bill'),\n                     colm_Y = Tool(\"$Y = $\").Dropdown_(value='tip'),\n\n                     b0=Tool(f\"<b>$b_0 = $<b>\").FloatSlider_(min=-10,max=10,step=0.001,value=float(b0_)),    \n                     b1=Tool(f\"<b>$b_1 = $<b>\").FloatSlider_(min=-5,max=5,step=0.001,value=float(b1_)),\n                     b2=Tool(f\"<b>$b_2 = $<b>\").FloatSlider_(min=-10,max=10,step=0.001,value=float(b2_)),\n                )\n            \n        interact(Dataset,dataset_length = dataset__length__)\n        \n    elif No_of_parameters == 4:\n        display('    \ud83d\ude05\ufe0f \ud83d\ude05\ufe0f \ud83d\ude05\ufe0f ')\n        display(IFrame(src = 'https:\/\/lh3.googleusercontent.com\/gfFHywH5cuBorbDP5eON2yFvBJ4ClFPbwzQYQvIu9Gk3Uk24h28chRhFQW1MxfdHpmZLTAgKg8OaFrb6NklKXnlwWEZAo0h_ZtbpBmiZSQeJFzVJ-TTmUe8rhzWkaccmNB_DY0IXjbuGBxev1dqk2bqIgf1vWMU8TW2ZrRvO-8kezbvcdSxT0DQ0WkT5bAV4pwMF8sw19k45mhy_fTsUMC9qASyfV1E9HxqluX1AOqCjb3hFAHixLyhb7dIEXp6pH7tAchzdi-jEdf24mGbZMOe1Lvqb-yqPbDSnZlGYB5FVflx6mF4ogpABNK7YJ9FhSoERWsd-objeNR7Q0Cu3TyFoo1uphlJtrFQL1Co5Wrh4bndbsRak1tusWHGuuDlZzOKF1aY6SCP5vgg67jEJX3DfbFhc2nkxx4Cd38MOrnejsFc3vTMQ3sXqgeDKkl2sBbqRchtKGmVMR1TOeRxGjsZCpNygjBW0jFVHai9jRlrCSQYRIhKCbHp-L7T4x6NaD4PB7Fo1xARyZ__aLlQfNAWMsCEGqR4x3r1nnEAmLD1loyPrUdtJao2GGP6u75qlOfKyxNgS6Shw2gnazae96LV_Dc6tAApGLT8oSHxkDUxK4HVm-6raIG0mHx9qCak2CMjR7leTcAhwEHDFrVIqNHMk_2XSakwQ7FHqVspe6kMBpqCd7BH8SP-3dRSLrQ=w640-h427-no?authuser=0',\n                       width=900, height=500\n                      )) \n        \n############################### End of the Function ########################################################\ninteract(\n    Change,\n    No_of_parameters = ToggleButtons(\n        value=3,\n        options=[(\"1D\", 1), (\"2D\", 2), (\"3D\", 3),(\"4D\", 4)],\n        description='Plot: ',\n        disabled=False,\n        button_style='info',  # 'success', 'info', 'warning', 'danger' or ''\n        tooltips=[\n            'Plot graph with one variable ', 'Plot graph with two variables ',\n            'Plot graph with three variable '\n        ],\n    ),  \n)\n","66c1f706":"# Visulization of Regression on Multiple Parameters","e3a88909":"  ### Plotting using Ipython widgets and Plotly ","5cc8a4fe":"### Importing Necessary Libraries"}}