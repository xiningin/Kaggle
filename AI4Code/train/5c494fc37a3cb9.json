{"cell_type":{"79f1e877":"code","2f15c484":"code","6398a25c":"code","fcbb006e":"code","fb8dc186":"code","348d0fc9":"markdown"},"source":{"79f1e877":"from __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\nimport keras\nimport numpy as np\nimport pickle\nfrom skimage import io , color\nimport colorsys\nimport numpy\nimport os\nfrom ipywidgets import widgets\nfrom keras.datasets.cifar import load_batch\nfrom keras import backend as K\nfrom ipywidgets import interact\nnp.random.seed(1337)\n# remove file from kaggle working directory\nconverted_filenam =''\nfor files in os.listdir(\"\/kaggle\/working\/\") :\n    if os.path.isfile(\"\/kaggle\/working\/\"+files):\n        os.remove(\"\/kaggle\/working\/\"+files)\n        \ndef load_data():\n    \"\"\"Loads CIFAR10 dataset.\n    # Returns\n        Tuple of Numpy arrays: `(x_train, y_train), (x_test, y_test)`.\n    \"\"\"\n    path = '..\/input\/cifar10-python\/cifar-10-batches-py'\n    num_train_samples = 50000\n\n    x_train = np.empty((num_train_samples, 3, 32, 32), dtype='uint8')\n    y_train = np.empty((num_train_samples,), dtype='uint8')\n\n    for i in range(1, 6):\n        fpath = os.path.join(path, 'data_batch_' + str(i))\n        (x_train[(i - 1) * 10000: i * 10000, :, :, :],\n         y_train[(i - 1) * 10000: i * 10000]) = load_batch(fpath)\n\n    fpath = os.path.join(path, 'test_batch')\n    x_test, y_test = load_batch(fpath)\n\n    y_train = np.reshape(y_train, (len(y_train), 1))\n    y_test = np.reshape(y_test, (len(y_test), 1))\n\n    if K.image_data_format() == 'channels_last':\n        x_train = x_train.transpose(0, 2, 3, 1)\n        x_test = x_test.transpose(0, 2, 3, 1)\n\n    return (x_train, y_train), (x_test, y_test)\n\ndef convertHSL(image):    \n    for x in range(0, 32):\n        for x1 in range(0, 32):\n            image[x][x1][0] ,image[x][x1][1] ,image[x][x1][2]= colorsys.rgb_to_hls(image[x][x1][0] ,image[x][x1][1] ,image[x][x1][2])            \n    return image\n\ndef srgb2rgb(c):    \n    if (c > 0.03928):\n       c= ((c + 0.055)\/1.055)**2.4 \n    else: c= c\/12.92   \n    return c\n\n#linearized by inverting the gamma correction\ndef normalised_srgb(image):    \n    for x in range(0, 32):\n        for x1 in range(0, 32):\n            image[x][x1][0] = srgb2rgb(image[x][x1][0])\n            image[x][x1][1] = srgb2rgb(image[x][x1][1])\n            image[x][x1][2] = srgb2rgb(image[x][x1][2])\n    return image\n\n\ndef convert(colorspace='RGB' , subtract_pixelmean=False):\n    num_classes = 10\n    # Subtracting pixel mean improves accuracy True or False\n    subtract_pixel_mean = subtract_pixelmean\n        \n    # Load the CIFAR10 data.\n    (x_train, y_train), (x_test, y_test) = load_data()\n    \n    # Input image dimensions.\n    #input_shape = x_train.shape[1:]\n\n    # Normalize data.\n    x_train = x_train.astype('float32') \/ 255\n    x_test = x_test.astype('float32') \/ 255\n    \n    \n    #conver to HSL\n    if colorspace==\"HSL\" :\n        for x in range(x_train.shape[0]):\n            x_train[x]=convertHSL(x_train[x])\n            \n        for x1 in range(x_test.shape[0]):\n            x_test[x1]=convertHSL(x_test[x1])\n\n    #conver to HSV\n    if colorspace==\"HSV\" :\n        for x in range(x_train.shape[0]):\n            x_train[x] = color.rgb2hsv(x_train[x])\n            \n        for x1 in range(x_test.shape[0]):\n            x_test[x1] = color.rgb2hsv(x_test[x1])  \n            \n    #conver to XYZ\n    if colorspace==\"XYZ\" :\n        for x in range(x_train.shape[0]):\n            x_train[x] = color.rgb2xyz(x_train[x])          \n        for x1 in range(x_test.shape[0]):\n            x_test[x1] = color.rgb2xyz(x_test[x1])  \n                \n        \n    #conver to LUV\n    if colorspace==\"LUV\" :\n        for x in range(x_train.shape[0]):\n            x_train[x] = color.rgb2luv(x_train[x]) \n            \n        for x1 in range(x_test.shape[0]):\n            x_test[x1] = color.rgb2luv(x_test[x1])  \n    #conver to LAB\n    if colorspace==\"LAB\" :\n        for x in range(x_train.shape[0]):\n            x_train[x] = color.rgb2lab(x_train[x]) \n            \n        for x1 in range(x_test.shape[0]):\n            x_test[x1] = color.rgb2lab(x_test[x1])  \n            \n    #conver to YUV\n    if colorspace==\"YUV\" :\n        for x in range(x_train.shape[0]):\n            x_train[x] = color.rgb2yuv(x_train[x]) \n            \n        for x1 in range(x_test.shape[0]):\n            x_test[x1] = color.rgb2yuv(x_test[x1])\n            \n    \n    filenam=colorspace\n    # If subtract pixel mean is enabled\n    if subtract_pixel_mean:\n        filenam=filenam+\"subtract_pixel_mean\"\n        x_train_mean = np.mean(x_train, axis=0)\n        x_train -= x_train_mean\n        x_test -= x_train_mean\n    \n    print('x_train shape:', x_train.shape)\n    print(x_train.shape[0], 'train samples')\n    print(x_test.shape[0], 'test samples')\n    print('y_train shape:', y_train.shape)\n    \n    # Convert class vectors to binary class matrices.\n    y_train = keras.utils.to_categorical(y_train, num_classes)\n    y_test = keras.utils.to_categorical(y_test, num_classes)\n    \n    filenam = filenam + \"cifar10_normalized.pkl\"\n    print(filenam)\n    with open(filenam, 'wb') as f:\n        pickle.dump(((x_train, y_train), (x_test, y_test)), f)\n    print(\"finish\")\n    return filenam\n\n@interact\ndef show_articles_more_than(colorspace=['RGB', 'HSL', 'HSV', 'LAB','LUV','YUV'], subtract_pixel_mean=False):\n    global converted_filenam\n    converted_filenam = convert(colorspace, subtract_pixel_mean)\n    return converted_filenam \n\n\n\nimport pickle\nimport matplotlib.pyplot as plt  \nwith open('\/kaggle\/working\/'+converted_filenam, 'rb') as f:\n    (x_train, y_train), (x_test, y_test) = pickle.load(f)    \nplt.imshow(x_train[7])\nplt.show()\n#io.imsave(converted_filenam+'B1_7.png',x_train[7])","2f15c484":"from __future__ import print_function\nimport keras\nfrom keras.layers import Dense, Conv2D, BatchNormalization, Activation\nfrom keras.layers import AveragePooling2D, Input, Flatten\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.regularizers import l2\nfrom keras import backend as K\nfrom keras.models import Model\nfrom keras.datasets import cifar10\nfrom keras.callbacks import ModelCheckpoint , TensorBoard\n#callbacks=callbacks ,steps_per_epoch=391\nimport numpy as np\nimport os\nimport pickle\nbatch_size = 128 #@param {type:\"slider\", min:0, max:1024, step:32}\n\nepochs = 200\ndata_augmentation = True #@param {type:\"boolean\"}\nnum_classes = 10\nsavemodel =\"\"\nn = 3\n\nversion = 1\n\n# Computed depth from supplied model parameter n\nif version == 1:\n    depth = n * 6 + 2\n\n# Model name, depth and version\nmodel_type = 'ResNet%dv%d' % (depth, version)\n# Load the CIFAR10 data.\npath=\"\/kaggle\/working\/\"\nwith open(path+converted_filenam, 'rb') as f:\n    (x_train, y_train), (x_test, y_test) = pickle.load(f) \n# Input image dimensions.\ninput_shape = x_train.shape[1:]\ndef lr_schedule(epoch):\n    lr = 1e-3\n    if epoch > 180:\n        lr *= 0.5e-3\n    elif epoch > 160:\n        lr *= 1e-3\n    elif epoch > 120:\n        lr *= 1e-2\n    elif epoch > 80:\n        lr *= 1e-1\n    print('Learning rate: ', lr)\n    return lr\n\n\ndef resnet_layer(inputs,\n                 num_filters=16,\n                 kernel_size=3,\n                 strides=1,\n                 activation='relu',\n                 batch_normalization=True,\n                 conv_first=True):\n    \"\"\"2D Convolution-Batch Normalization-Activation stack builder\n\n    # Arguments\n        inputs (tensor): input tensor from input image or previous layer\n        num_filters (int): Conv2D number of filters\n        kernel_size (int): Conv2D square kernel dimensions\n        strides (int): Conv2D square stride dimensions\n        activation (string): activation name\n        batch_normalization (bool): whether to include batch normalization\n        conv_first (bool): conv-bn-activation (True) or\n            bn-activation-conv (False)\n\n    # Returns\n        x (tensor): tensor as input to the next layer\n    \"\"\"\n    conv = Conv2D(num_filters,\n                  kernel_size=kernel_size,\n                  strides=strides,\n                  padding='same',\n                  kernel_initializer='he_normal',\n                  kernel_regularizer=l2(1e-4))\n\n    x = inputs\n    if conv_first:\n        x = conv(x)\n        if batch_normalization:\n            x = BatchNormalization()(x)\n        if activation is not None:\n            x = Activation(activation)(x)\n    else:\n        if batch_normalization:\n            x = BatchNormalization()(x)\n        if activation is not None:\n            x = Activation(activation)(x)\n        x = conv(x)\n    return x\n\n\ndef resnet_v1(input_shape, depth, num_classes=10):\n    if (depth - 2) % 6 != 0:\n        raise ValueError('depth should be 6n+2 (eg 20, 32, 44 in [a])')\n    # Start model definition.\n    num_filters = 16\n    num_res_blocks = int((depth - 2) \/ 6)\n\n    inputs = Input(shape=input_shape)\n    x = resnet_layer(inputs=inputs)\n    # Instantiate the stack of residual units\n    for stack in range(3):\n        for res_block in range(num_res_blocks):\n            strides = 1\n            if stack > 0 and res_block == 0:  # first layer but not first stack\n                strides = 2  # downsample\n            y = resnet_layer(inputs=x,\n                             num_filters=num_filters,\n                             strides=strides)\n            y = resnet_layer(inputs=y,\n                             num_filters=num_filters,\n                             activation=None)\n            if stack > 0 and res_block == 0:  # first layer but not first stack\n                # linear projection residual shortcut connection to match\n                # changed dims\n                x = resnet_layer(inputs=x,\n                                 num_filters=num_filters,\n                                 kernel_size=1,\n                                 strides=strides,\n                                 activation=None,\n                                 batch_normalization=False)\n            x = keras.layers.add([x, y])\n            x = Activation('relu')(x)\n        num_filters *= 2\n\n    # Add classifier on top.\n    # v1 does not use BN after last shortcut connection-ReLU\n    x = AveragePooling2D(pool_size=8)(x)\n    y = Flatten()(x)\n    outputs = Dense(num_classes,\n                    activation='softmax',\n                    kernel_initializer='he_normal')(y)\n\n    # Instantiate model.\n    model = Model(inputs=inputs, outputs=outputs)\n    return model\nmodel = resnet_v1(input_shape=input_shape, depth=depth)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(lr=lr_schedule(0)),\n              metrics=['accuracy'])\nmodel.summary()\nprint(model_type)\n# Prepare callbacks for model saving and for learning rate adjustment and log tensorboard\nmodel_name = 'cifar10_%s_model.{epoch:03d}.h5' % model_type\nsavemodel = converted_filenam+model_name\ncheckpoint = ModelCheckpoint(filepath=savemodel,\n                             monitor='val_acc',\n                             verbose=1,\n                             save_best_only=True , mode='max')\n\n\n\nlr_scheduler = LearningRateScheduler(lr_schedule)\n\nlr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),\n                               cooldown=0,\n                               patience=5,\n                               min_lr=0.5e-6)\n\nmycallbacks = [checkpoint, lr_reducer, lr_scheduler]\n\n# Run training, with or without data augmentation.\nif not data_augmentation:\n    print('Not using data augmentation.')\n    history =model.fit(x_train, y_train,\n              batch_size=batch_size,\n              epochs=epochs,\n              validation_data=(x_test, y_test),\n              shuffle=True,\n              callbacks=mycallbacks)\nelse:\n    print('Using real-time data augmentation.')\n    # This will do preprocessing and realtime data augmentation:\n    datagen = ImageDataGenerator(\n        # set input mean to 0 over the dataset\n        featurewise_center=False,\n        # set each sample mean to 0\n        samplewise_center=False,\n        # divide inputs by std of dataset\n        featurewise_std_normalization=False,\n        # divide each input by its std\n        samplewise_std_normalization=False,\n        # apply ZCA whitening\n        zca_whitening=False,\n        # epsilon for ZCA whitening\n        zca_epsilon=1e-06,\n        # randomly rotate images in the range (deg 0 to 180)\n        rotation_range=0,\n        # randomly shift images horizontally\n        width_shift_range=0.1,\n        # randomly shift images vertically\n        height_shift_range=0.1,\n        # set range for random shear\n        shear_range=0.,\n        # set range for random zoom\n        zoom_range=0.,\n        # set range for random channel shifts\n        channel_shift_range=0.,\n        # set mode for filling points outside the input boundaries\n        fill_mode='nearest',\n        # value used for fill_mode = \"constant\"\n        cval=0.,\n        # randomly flip images\n        horizontal_flip=True,\n        # randomly flip images\n        vertical_flip=False,\n        # set rescaling factor (applied before any other transformation)\n        rescale=None,\n        # set function that will be applied on each input\n        preprocessing_function=None,\n        # image data format, either \"channels_first\" or \"channels_last\"\n        data_format=None,\n        # fraction of images reserved for validation (strictly between 0 and 1)\n        validation_split=0.0)\n\n    # Compute quantities required for featurewise normalization\n    # (std, mean, and principal components if ZCA whitening is applied).\n    datagen.fit(x_train)\n\n    # Fit the model on the batches generated by datagen.flow().\n    history =model.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n                        validation_data=(x_test, y_test),\n                        epochs=epochs, verbose=1, callbacks=mycallbacks, workers=4)\n\n# Score trained model.\nscores = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])\n\nfrom pickle import dump \nwith open('History'+savemodel, 'wb') as handle: # saving the history of the model\n    dump(history.history, handle)\nprint(\"finich\")","6398a25c":"# retrieve weights from the second hidden layer\nfilters, biases = model.layers[1].get_weights()\nprint(filters)\nf_min, f_max = filters.min(), filters.max()\nfilters = (filters - f_min) \/ (f_max - f_min)\n# plot first few filters\nn_filters, ix = 6, 1\nfor i in range(n_filters):\n    # get the filter\n    f = filters[:, :, :, i]\n    print(\"Filters of hidden Layers\")\n    print(f)\n    # plot each channel separately\n    for j in range(3):\n        # specify subplot and turn of axis\n        ax = pyplot.subplot(n_filters, 3, ix)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        # plot filter channel in grayscale\n        pyplot.imshow(f[:, :, j], cmap='gray')\n        ix += 1\n# show the figure\npyplot.show()","fcbb006e":"#Printing filters\nimport numpy as np\nimport cv2\nfrom PIL import Image\nfilters, biases = model.layers[1].get_weights()\nf_min, f_max = filters.min(), filters.max()\nfilters = (filters - f_min) \/ (f_max - f_min)\n# plot first few filters\nn_filters, ix = 6, 1\nfor i in range(n_filters):\n    # get the filter\n    f = filters[:, :, :, i]\n    for j in range(3):\n        # specify subplot and turn of axis\n        ax = pyplot.subplot(n_filters, 3, ix)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        # plot filter channel in grayscale\n        pyplot.imshow(f[:, :, j], cmap='gray')\n        ix += 1\n# show the figure\npyplot.show()","fb8dc186":"from numpy import array\nprint(filters.shape)\n#Taking only first channel\n#Each channel has 16 filters and each filter is 3X3 with 3 channels\nfor t in range(16):\n    z=filters[2:,:,:,-t]\n    for j in range(2):\n        #Reshaping into 3X3 Filters by taking only 1 channel of input\n        q=numpy.reshape(z, (3,3))\n        a=np.fft.fftshift(np.abs(np.fft.fft2(q))**2)\n        pyplot.imshow(np.log(a))\n    pyplot.show()","348d0fc9":"Visualizing CIFAR-10 Filters and Weightg along with Fourier Transformation"}}