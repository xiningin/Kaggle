{"cell_type":{"8f7de39e":"code","ed429cca":"code","d614ea16":"code","7b046a46":"code","bd956564":"code","dfd30c4a":"code","f47942e2":"code","06176ab3":"code","7f828c1d":"code","6ee3cd23":"code","41a9919c":"code","fd5b4bf1":"code","6ae25d7f":"code","548153b5":"code","ed27cda7":"code","90424b90":"code","228f6bdd":"code","1665420e":"code","e522e43e":"code","fe6920d0":"code","17d2bb61":"code","1421d550":"code","6a5ae9df":"code","02b3253f":"code","e05336bf":"code","973fe14b":"code","4551ecc9":"code","e2c4e160":"code","9b83597a":"code","d77d5ef1":"code","1080c0d8":"markdown","33d6dfaa":"markdown"},"source":{"8f7de39e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ed429cca":"#Loading Data into Train and Test\ndf_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","d614ea16":"df_train.shape","7b046a46":"df_test.shape","bd956564":"df_train.columns","dfd30c4a":"df_train[:5]","f47942e2":"df_test[:1]","06176ab3":"#Reshapping them to fit into the model\ntrain_X = df_train.drop('label', axis=1).values.reshape(-1,28,28,1)\ntrain_Y = df_train['label'].values.reshape(-1,1) #To hold lable values","7f828c1d":"train_Y.shape","6ee3cd23":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(train_X, train_Y, test_size = 0.1, random_state=72)","41a9919c":"X_train.shape","fd5b4bf1":"X_val.shape","6ae25d7f":"#Plotting some images\nfor i in range(9):\n    img = X_train[i].reshape(28,28)\n    # define subplot to show plots in 3x3 matrix\n    plt.subplot(330+1+i)\n    # plot raw pixel data\n    plt.imshow(img,cmap='gray')","548153b5":"# convert from integers to floats \ntrain_X = tf.cast(X_train, tf.float32)\nValidate_train = tf.cast(X_val, tf.float32)\n# normalization to range 0-1\ntrain_X = train_X \/ 255.\nValidate_train = Validate_train \/ 255.","ed27cda7":"#To make sure we do nnot overfit the model\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5)","90424b90":"model = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n  tf.keras.layers.MaxPooling2D(2, 2),\n  tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n  tf.keras.layers.MaxPooling2D(2,2),\n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(256, activation='relu'),\n  tf.keras.layers.Dense(10, activation='softmax')\n])","228f6bdd":"model.summary()","1665420e":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","e522e43e":"history = model.fit(train_X, Y_train, epochs=20, validation_data=(Validate_train, Y_val)#,steps_per_epoch=6000\n              ,callbacks=[callback],verbose=2\n    )","fe6920d0":"test_X = df_test.values.reshape(-1,28,28,1)","17d2bb61":"test_X.shape","1421d550":"test_X = tf.cast(test_X, tf.float32)\ntest_X = test_X \/ 255.","6a5ae9df":"#Using Image Augmenetation\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(train_X)","02b3253f":"# Fit the model\nbatch_size = 75\nepochs = 30\nhistory = model.fit_generator(datagen.flow(train_X,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (Validate_train, Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[callback])","e05336bf":"pred = model.predict(test_X)\npred = pd.DataFrame(pred)\npred['Label'] = pred.idxmax(axis=1)\npred.head(5)","973fe14b":"pred['index'] = list(range(1,len(pred)+1))\npred.head()","4551ecc9":"submission = pred[['index','Label']]\nsubmission.head()","e2c4e160":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","9b83597a":"submission.rename(columns={'index':'ImageId'},inplace = True)\nsubmission.head()","d77d5ef1":"submission.to_csv('Submission.csv',index=False)","1080c0d8":"pred['index'] = list(range(1,len(pred)+1))\npred.head()","33d6dfaa":"pred = model.predict(test_X)\npred = pd.DataFrame(pred)\npred['Label'] = pred.idxmax(axis=1)\npred.head(5)"}}