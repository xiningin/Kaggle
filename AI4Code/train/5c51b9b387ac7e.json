{"cell_type":{"22e07ff1":"code","37303747":"code","581e50c1":"code","919a68cc":"code","4e915f28":"code","647d86fb":"code","568b1583":"code","0d31cd39":"code","baa43622":"code","78c26087":"code","8386cf23":"code","15f75dfa":"code","15fa3d45":"code","9b9bf8d4":"code","ad9fa32a":"code","eece5e8e":"code","6cdb2f53":"code","77f8d717":"code","649a1ed6":"code","9cad931c":"code","53330427":"code","54edf071":"code","393ca1ab":"code","a868e964":"code","0700e15f":"code","c32c3144":"code","7168cca4":"code","35fd39a8":"markdown","fc5767a3":"markdown"},"source":{"22e07ff1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","37303747":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\nimport cv2\nimport os\nimport h5py\nimport matplotlib.pyplot as plt\nimport skimage.io\nfrom skimage.transform import resize\nfrom imgaug import augmenters as iaa\nfrom tqdm import tqdm\nimport PIL\nfrom PIL import Image, ImageOps\nfrom sklearn.utils import class_weight, shuffle\nfrom keras.losses import binary_crossentropy, categorical_crossentropy\nfrom keras.applications.resnet50 import preprocess_input\nimport keras.backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.optimizers import SGD\nimport tensorflow as tf\nfrom sklearn.metrics import f1_score, fbeta_score, cohen_kappa_score, accuracy_score\nfrom keras.utils import Sequence\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")","581e50c1":"def fd_histogram(image, mask=None):\n    # convert the image to HSV color-space\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n    # compute the color histogram\n    hist  = cv2.calcHist([image], [0, 1, 2], None, [bins, bins, bins], [0, 256, 0, 256, 0, 256])\n    # normalize the histogram\n    cv2.normalize(hist, hist)\n    # return the histogram\n    return hist.flatten()\n\ndef fd_sift(image) :\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    kps, des = sift.detectAndCompute(image, None)\n    return des if des is not None else np.array([]).reshape(0, 128)\n","919a68cc":"os.listdir('\/kaggle\/input\/animals10\/animals\/raw-img')\nfoldernames = os.listdir('\/kaggle\/input\/animals10\/animals\/raw-img')\ncategories = []\nfiles = []\nlabels = []\ni = 0\nfor folder in foldernames:\n    labels.append(folder)\n    filenames = os.listdir(\"..\/input\/animals10\/animals\/raw-img\/\" + folder);\n    for file in filenames:\n        files.append(\"..\/input\/animals10\/animals\/raw-img\/\" + folder + \"\/\" + file)\n        categories.append(i)\n    i = i + 1\n        \n        \ndf = pd.DataFrame({\n    'filename': files,\n    'category': categories\n})","4e915f28":"# df.head","647d86fb":"y = df['category']\ndf['category'].value_counts()","568b1583":"train_df = df\ntrain_df.head()","0d31cd39":"x = train_df['filename']\ny = train_df['category']\n\nx, y = shuffle(x, y, random_state=8)\ny.hist()","baa43622":"x.shape,y.shape","78c26087":"sift = cv2.ORB_create()","8386cf23":"def fd_sift(image) :\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    kps, des = sift.detectAndCompute(image, None)\n    return des if des is not None else np.array([]).reshape(0, 128)","15f75dfa":"# train_x, valid_x, train_y, valid_y = train_test_split(x, y, test_size=0.1, stratify=y, random_state=8)\n# print(train_x.shape)\n# print(train_y.shape)\n# print(valid_x.shape)\n# print(valid_y.shape)","15fa3d45":"global_features = []\nlabels          = y\nfixed_size = (500,500,3)\nfor file in x[:1000]:\n    image = cv2.imread(file)\n    image.resize(fixed_size)\n    fv_sift = fd_sift(image)\n    global_feature = np.hstack([fv_sift])\n    global_feature.resize(fixed_size)\n    global_features.append(global_feature)","9b9bf8d4":"for i in global_features[:10]:\n    print(i.shape)","ad9fa32a":"targetNames = np.unique(labels)\ntargetNames","eece5e8e":"le          = LabelEncoder()\ntarget      = le.fit_transform(labels)\nle,target","6cdb2f53":"# global_features","77f8d717":"scaler            = MinMaxScaler(feature_range=(0, 1))\n# rescaled_features = scaler.fit_transform(global_features)","649a1ed6":"X_train = np.array(global_features)\nX_train = X_train.reshape(len(X_train),500*500*3)\nY_train = np.array(y[0:1000])\nlen(X_train),X_train.shape","9cad931c":"train_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, \n                                                      test_size=0.1, \n                                                      stratify=Y_train, \n                                                      random_state=8)\nprint(train_x.shape)\nprint(train_y.shape)\nprint(valid_x.shape)\nprint(valid_y.shape)","53330427":"model = KNeighborsClassifier(n_neighbors = 10, p = 1)\nmodel.fit(train_x,train_y)","54edf071":"# y_pred = model.predict(valid_x)\n# print(accuracy_score(valid_y, y_pred)*100)","393ca1ab":"test_x = x[:-28200]\ntest_y = y[:-28200]\nfor i,j in zip(test_x[:10],test_y[:10]):\n    sample = cv2.imread(i)\n    print(j)\n    print(i)\n    plt.imshow(sample)\n    plt.show()\n    sample.resize(fixed_size)","a868e964":"test_X_reshape = np.array(test_x)\n# test_X_reshape = test_X_reshape.reshape(len(test_X_reshape),500*500*3)\n# y_pred = model.predict()\ntest_X_reshape\nall_samples = []\nfor file in test_x:\n    sample = cv2.imread(file)\n    sample.resize(fixed_size)\n    fv_sift = fd_sift(image)\n    all_sample = np.hstack([fv_sift])\n    all_sample.resize(fixed_size)\n    all_samples.append(all_sample)\n\nsamples = np.array(all_samples)\nsamples = samples.reshape(len(samples),500*500*3)\nlen(samples),samples.shape","0700e15f":"res = model.predict(samples)","c32c3144":"res","7168cca4":"# # boxplot algorithm comparison\n# fig = pyplot.figure()\n# fig.suptitle('Machine Learning algorithm comparison')\n# ax = fig.add_subplot(111)\n# pyplot.boxplot(results)\n# ax.set_xticklabels(names)\n# pyplot.show()","35fd39a8":"TEST","fc5767a3":"TRAINING"}}