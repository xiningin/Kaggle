{"cell_type":{"cc32d549":"code","bc10dff6":"code","7346e380":"code","7c2c7eb2":"code","c6929d86":"code","107d24b6":"code","8c871a13":"code","1e869661":"code","935e5923":"code","a308b3ac":"code","8aacafdf":"code","c052e9f7":"code","6101d532":"code","fa9cd7fb":"code","10594649":"code","799761c0":"code","8021749e":"code","435a2723":"code","e845528c":"code","dcef57c4":"code","d9e05cc9":"code","4fdfb3a6":"code","c19086d2":"code","f8014fea":"code","8da0aee8":"code","571fe014":"code","9999b38c":"code","5544ed31":"code","57a3f8fa":"code","5acd0f40":"markdown","ec3eefc3":"markdown","bb46ea33":"markdown","29f37d1c":"markdown","933912a8":"markdown","14a1622e":"markdown","ce5309fd":"markdown","fc98d0a9":"markdown","b7183d6b":"markdown","74192a69":"markdown","b168ac89":"markdown","1e23ff30":"markdown","0db4e991":"markdown","a39a7889":"markdown","f39c42d6":"markdown","6b981b9a":"markdown","c91d1221":"markdown","adfa4c9c":"markdown"},"source":{"cc32d549":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport re\nimport spacy\nnlp = spacy.load('en_core_web_lg')\nimport itertools\nfrom collections import Counter\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV","bc10dff6":"df = pd.read_csv('..\/input\/sms-spam-collection-dataset\/spam.csv',encoding = \"ISO-8859-1\")","7346e380":"df.head()","7c2c7eb2":"sns.countplot(df['v1'])","c6929d86":"df.isna().sum()","107d24b6":"df_tmp = df.copy()\ndf_tmp['text_len'] =  df_tmp['v2'].apply(lambda x:len(x))","8c871a13":"sns.histplot(data=df_tmp,x='text_len',hue='v1',log_scale=True)\nplt.title('Text length')","1e869661":"def word_count(text):\n    word_list_spam = [x.split() for x in df[df['v1']=='spam'][text]]\n    word_list_ham = [x.split() for x in df[df['v1']=='ham'][text]]\n    word_count_spam = Counter(itertools.chain.from_iterable(word_list_spam))\n    word_count_ham = Counter(itertools.chain.from_iterable(word_list_ham))\n    return word_count_spam, word_count_ham\n\ndef to_DataFrame(word_count,target):\n    keys = []\n    values = []\n    for key, value in word_count.items():\n        keys.append(key)\n        values.append(value)\n    \n    df_word_count = pd.DataFrame({'word':keys, 'count':values, 'target':target})\n    return df_word_count\n\ndef word_count_plot(text,n_top=25):\n    word_count_spam, word_count_ham = word_count(text)\n    df_word_count_ham = to_DataFrame(word_count_ham,'ham').sort_values(by='count', ascending=False)\n    df_word_count_spam = to_DataFrame(word_count_spam,'spam').sort_values(by='count', ascending=False)\n\n    fig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,15))\n    sns.barplot(data=df_word_count_ham[:n_top], y='word',x='count',ax=ax1)\n    sns.barplot(data=df_word_count_spam[:n_top], y='word',x='count',ax=ax2)\n    ax1.set_title('Word counts in ham')\n    ax2.set_title('Word coutns in spam')","935e5923":"word_count_plot('v2',50)","a308b3ac":"def abbreviation_converter(text):\n    converted_text = re.sub(r'\\bu\\b','you',text.lower())\n    converted_text = re.sub(r'\\br\\b','are',converted_text)\n    converted_text = re.sub(r'\\bur\\b','you are',converted_text)\n    converted_text = re.sub(r'\\bnt\\b','nice try',converted_text)\n    converted_text = re.sub(r'\\b\u00cc\\b','I',converted_text)\n    converted_text = re.sub(r'\\b2\\b','to',converted_text)\n    converted_text = re.sub(r'\\b4\\b','for',converted_text)\n    converted_text = re.sub(r'\\bmsg\\b','message',converted_text)\n    converted_text = re.sub(r'\\btxt\\b','text',converted_text)\n    converted_text = re.sub(r'<.*?>','',converted_text)\n    converted_text = re.sub(r'\\blt;#&gt\\b','',converted_text)\n    converted_text = re.sub(r'[=-><+-]','',converted_text)\n    return converted_text\n\ndf['v2_conv'] = df['v2'].apply(lambda x: abbreviation_converter(x))","8aacafdf":"df['text'] = df['v2_conv'].apply(lambda x: nlp(x))","c052e9f7":"df['text_clean'] = df['text'].apply(lambda x: [w.lemma_ for w in x \n                                    if w.is_punct != 1\n                                    and w.is_stop != 1\n                                    and w.like_num != 1\n                                   and w.like_url != 1\n                                    and w.text not in ['u']])\ndf['text_clean'] = df['text_clean'].apply(lambda x: ' '.join(x))","6101d532":"word_count_plot('text_clean',50)","fa9cd7fb":"mapping = {'ham':0,'spam':1}\nX_train, X_test, y_train, y_test = train_test_split(df['text_clean'], df['v1'].map(mapping),test_size=0.2, random_state=42)","10594649":"pipeline_lr = Pipeline([('tfidf',TfidfVectorizer()),\n                     ('lr_clf',LogisticRegression())])\npipeline_lr.fit(X_train,y_train)","799761c0":"y_pred = pipeline_lr.predict(X_test)\n\nprint(classification_report(y_test,y_pred))","8021749e":"sns.heatmap(confusion_matrix(y_test,y_pred),\n            annot=True, fmt='d', cmap='magma', square=True,linewidths=.5,\n            xticklabels=['Ham predicted','Spam predicted'],\n           yticklabels=['Ham','Spam'])","435a2723":"pipeline_svc = Pipeline([('tfidf',TfidfVectorizer()),\n                     ('svc',SVC())])\npipeline_svc.fit(X_train,y_train)","e845528c":"y_pred = pipeline_svc.predict(X_test)\n\nprint(classification_report(y_test,y_pred))","dcef57c4":"sns.heatmap(confusion_matrix(y_test,y_pred),\n            annot=True, fmt='d', cmap='magma', square=True,linewidths=.5,\n            xticklabels=['Ham predicted','Spam predicted'],\n           yticklabels=['Ham','Spam'])","d9e05cc9":"pipeline_xgb = Pipeline([('tfidf',TfidfVectorizer()),\n                     ('xgb',GradientBoostingClassifier())])\npipeline_xgb.fit(X_train,y_train)","4fdfb3a6":"y_pred = pipeline_xgb.predict(X_test)\n\nprint(classification_report(y_test,y_pred))","c19086d2":"sns.heatmap(confusion_matrix(y_test,y_pred),\n            annot=True,fmt='d', cmap='magma', square=True,linewidths=.5,\n            xticklabels=['Ham predicted','Spam predicted'],\n           yticklabels=['Ham','Spam'])","f8014fea":"tfidf = TfidfVectorizer()\ntfidf.fit(X_train)\nX_train_tfidf = tfidf.transform(X_train)\nX_test_tfidf = tfidf.transform(X_test)","8da0aee8":"param_grid = {'C':[0.01, 0.1, 1,10, 100, 1000], 'gamma':[0.001, 0.01, 0.1, 1, 10, 100]}\n\ngrid_search = GridSearchCV(SVC(), param_grid, cv=5)\n\ngrid_search.fit(X_train_tfidf,y_train)","571fe014":"print(f'Grid search score: {grid_search.score(X_test_tfidf,y_test)}')\nprint(f'Best paramters: {grid_search.best_params_}')","9999b38c":"results = pd.DataFrame(grid_search.cv_results_)\nscores = np.array(results.mean_test_score).reshape(6,6)\n\nsns.heatmap(scores, annot=True, cmap='viridis',\n            xticklabels=param_grid['gamma'], yticklabels=param_grid['C'], \n            square=True, fmt='.3f')\nplt.xlabel('gamma')\nplt.ylabel('C')","5544ed31":"final_svc_model = grid_search.best_estimator_\ny_pred = final_svc_model.predict(X_test_tfidf)\n\nprint(classification_report(y_test,y_pred))","57a3f8fa":"sns.heatmap(confusion_matrix(y_test,y_pred),\n            annot=True,fmt='d', cmap='magma', square=True,linewidths=.5,\n            xticklabels=['Ham predicted','Spam predicted'],\n           yticklabels=['Ham','Spam'])","5acd0f40":"SVM worked well. We did parameter tuning with grid-search.","ec3eefc3":"## Gradient Boosting Classifier","bb46ea33":"Vectorization is performed using TfIdf. Several simple classification models are tried below.","29f37d1c":"# Modelling","933912a8":"# Cleaning","14a1622e":"## Support vector machine","ce5309fd":"Finally, we predict using the best SVC model","fc98d0a9":"Define functions for word count plot.","b7183d6b":"# Parameter tuning and finalize model","74192a69":"## Logistic Regression Classifier","b168ac89":"Spam messages tend to be longer than ham messages.","1e23ff30":"This is the count of words after text cleaning. Spam messages often contain 'free' and 'win' and other monetary wrods like 'prize', 'cash', and 'award'.","0db4e991":"Let's clean up the text using SpaCy. We lemmetalize text and removes stop-words, puctuation, numbers, and URL.","a39a7889":"Plot grid search results.","f39c42d6":"Let's convert messages to to SpaCy nlp. We convert some major abbreviations in text beforehand.","6b981b9a":"This is the counts of words before text cleaning.","c91d1221":"# EDA","adfa4c9c":"The End"}}