{"cell_type":{"84e048cf":"code","52253bb5":"code","f484018e":"code","1aa790fc":"code","d68d3669":"code","96aedc8c":"code","c44c6850":"code","2ec47bef":"code","ae51f13e":"code","10577372":"code","a6ace9a0":"code","c7dc1d20":"code","3f126721":"code","d019e94f":"code","289722b5":"code","9d1c5347":"code","30c45ac1":"code","b6a152ec":"code","57934bd4":"code","f48f4630":"code","110fbb99":"code","b24babbe":"code","96c0da65":"code","7d1c1677":"code","eff5a4d3":"markdown","941668de":"markdown","ba8ff19b":"markdown","e208093b":"markdown","e5575423":"markdown","1e9d862b":"markdown"},"source":{"84e048cf":"import plotly.offline as pyo\npyo.init_notebook_mode()\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport cv2 \nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom sklearn import preprocessing\nimport random\nimport tensorflow as tf\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n!pip install visualkeras","52253bb5":"def dataframe_creation():\n    df4 = pd.read_csv('..\/input\/ocular-disease-recognition-odir5k\/full_df.csv')\n    df4['filename']='..\/input\/ocular-disease-recognition-odir5k\/preprocessed_images\/'+df4['filename']\n    df4['Left-Fundus']='..\/input\/ocular-disease-recognition-odir5k\/preprocessed_images\/'+df4['Left-Fundus']\n    df4['Right-Fundus']='..\/input\/ocular-disease-recognition-odir5k\/preprocessed_images\/'+df4['Right-Fundus']\n    df4['Line'] = df4['Left-Diagnostic Keywords']+' | '+df4['Right-Diagnostic Keywords']\n    df4 = df4.drop(['filepath','target'], axis=1)\n    return df4\ndf = dataframe_creation()\nprint(df.shape)\ndf.head()","f484018e":"df['Patient Sex'].unique()","1aa790fc":"count = 1\nf = plt.figure(figsize=(50,20))\nfor Class in df['labels'].unique():\n    seg = df[df['labels']==Class]\n    address = seg.sample().iloc[0]['filename']\n    img = cv2.imread(address)\n    #print(img)\n    ax = f.add_subplot(2, 5,count)\n    ax = plt.imshow(img)\n    ax = plt.title(Class,fontsize= 30)\n    count = count + 1\nplt.suptitle(\"Retinal Classification\", size = 32)\nplt.show()","d68d3669":"w , h= 16,16\nfinal_class = 8","96aedc8c":"listImg = os.listdir('..\/input\/ocular-disease-recognition-odir5k\/preprocessed_images')\nstring = '..\/input\/ocular-disease-recognition-odir5k\/preprocessed_images\/'\nlist2 = list(map(lambda orig_string: string + orig_string , listImg))\nindexify =[]\nfor i in df.index:\n    if df.iloc[i]['Left-Fundus'] in list2 and df.iloc[i]['Right-Fundus'] in list2:\n        continue\n    else:\n        indexify.append(i)","c44c6850":"print(df.shape)\ndf = df.drop(indexify)\nprint(df.shape)","2ec47bef":"from tqdm import tqdm\nleft = []\nfor location in tqdm(df.iloc[:]['Left-Fundus']):\n    img = cv2.imread(location,0)\n    img = cv2.resize(img, (w,h), interpolation = cv2.INTER_AREA)\n    img = img.reshape(w,h,1)\n    left.append(img)\nright = []\nfor location in tqdm(df.iloc[:]['Right-Fundus']):\n    img = cv2.imread(location,0)\n    img = cv2.resize(img, (w,h), interpolation = cv2.INTER_AREA)\n    img = img.reshape(w,h,1)\n    right.append(img)\nX1 = np.array(left)\nX2 = np.array(right)","ae51f13e":"from sklearn.preprocessing import OneHotEncoder\ny = np.array(df.iloc[:][['N','D','G','C','A','H','M','O']])\ny = np.array(y)\nprint('Label :   '+str(y.shape))","10577372":"import tensorflow as tf\ntf.config.run_functions_eagerly(True)\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Flatten , Conv1D\nfrom tensorflow.keras.layers import concatenate\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D,MaxPooling1D\nfrom tensorflow.keras.utils import plot_model\ndef model_b():\n    inp1 = Input(shape=(X1.shape[1],X1.shape[2],1,))\n    inp2 = Input(shape=(X2.shape[1],X2.shape[2],1,))\n    new_input = Input(shape=(X1.shape[1],X1.shape[2], 3))\n    conv1 = Conv2D(3, kernel_size=3, padding ='same', activation='relu')(inp1)\n    i1 = tf.keras.applications.ResNet50(include_top=False,weights=\"imagenet\",input_tensor=new_input,\n                        input_shape=None,\n                         pooling='avg',\n                    )(conv1)\n    conv2= Conv2D(3, kernel_size=3, padding ='same', activation='relu')(inp2)\n    i2 = tf.keras.applications.ResNet50V2(include_top=False,weights=\"imagenet\",input_tensor=new_input,\n                        input_shape=None,\n                         pooling='avg',\n                    \n                    )(conv2)\n    merge = concatenate([i1,i2])\n    class1 = Dense(1024, activation='relu')(merge)\n    class1 = Dense(512, activation='relu')(class1)\n    class1 = Dense(256, activation='relu')(class1)\n    class1 = Dense(128, activation='relu')(class1)\n    class1 = Dense(64, activation='relu')(class1)\n    output = Dense(final_class, activation='sigmoid')(class1)\n    model = Model(inputs=[inp1,inp2], outputs=output)\n    return model\nmd = model_b()","a6ace9a0":"plot_model(md, to_file='Hybrid_neural_network.png')","c7dc1d20":"from sklearn.model_selection import train_test_split\nX_train1, X_test1, X_train2, X_test2, y_train, y_test = train_test_split(X1,X2, y, test_size=0.20, random_state=42)","3f126721":"X_train1, X_valid1, X_train2, X_valid2, y_train, y_valid = train_test_split(X_train1,X_train2, y_train, test_size=0.20, random_state=42)","d019e94f":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nimport tensorflow as tf\ndef LR_verify():\n        model = model_b()\n        METRICS = [\n                'accuracy'\n        ]  \n        model.compile(\n                optimizer='Adam',\n                loss='binary_crossentropy',\n                metrics=METRICS\n            )\n        history = model.fit([X1,X2], y, epochs=100,verbose=1,shuffle = True, validation_data=([X_valid1,X_valid2],y_valid))\n        return model,history\nmodel,history= LR_verify()","289722b5":"from tensorflow.keras.models import model_from_json\nmodel_json = model.to_json()\nname = 'ODIR_ResNet'\nwith open(name+\".json\", \"w\") as json_file:\n    json_file.write(model_json)\nmodel.save_weights(name+\".h5\")\nimport pandas as pd\nhist_df = pd.DataFrame(history.history) \nhist_df.to_csv(name+'.csv',index = False)\nhist_df.tail()","9d1c5347":"json_file = open('.\/'+name+'.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights(\".\/\"+name+\".h5\")\nprint(\"Loaded model from disk\")","30c45ac1":"METRICS = [\n                'accuracy',\n                tf.keras.metrics.FalseNegatives(),\n                tf.keras.metrics.FalsePositives(),\n                tf.keras.metrics.Precision(),\n                tf.keras.metrics.Recall(),\n                tf.keras.metrics.TrueNegatives(),\n                tf.keras.metrics.TruePositives()\n        ]  \nloaded_model.compile(\n                optimizer='Adam',\n                loss='binary_crossentropy',\n                metrics=METRICS\n            )\nscore = loaded_model.evaluate([X1,X2], y, verbose=0)","b6a152ec":"for i in range(len(score)):\n    print(loaded_model.metrics_names[i]+\" : \"+str(score[i]))","57934bd4":"METRICS = [\n                'accuracy',\n                tf.keras.metrics.FalseNegatives(),\n                tf.keras.metrics.FalsePositives(),\n                tf.keras.metrics.Precision(),\n                tf.keras.metrics.Recall(),\n                tf.keras.metrics.TrueNegatives(),\n                tf.keras.metrics.TruePositives()\n        ]  \nloaded_model.compile(\n                optimizer='Adam',\n                loss='binary_crossentropy',\n                metrics=METRICS\n            )\nscore = loaded_model.evaluate([X_valid1,X_valid2], y_valid, verbose=0)","f48f4630":"for i in range(len(score)):\n    print(loaded_model.metrics_names[i]+\" : \"+str(score[i]))","110fbb99":"METRICS = [\n                'accuracy',\n                tf.keras.metrics.FalseNegatives(),\n                tf.keras.metrics.FalsePositives(),\n                tf.keras.metrics.Precision(),\n                tf.keras.metrics.Recall(),\n                tf.keras.metrics.TrueNegatives(),\n                tf.keras.metrics.TruePositives()\n        ]  \nloaded_model.compile(\n                optimizer='Adam',\n                loss='binary_crossentropy',\n                metrics=METRICS\n            )\nscore = loaded_model.evaluate([X_test1,X_test2], y_test, verbose=0)","b24babbe":"for i in range(len(score)):\n    print(loaded_model.metrics_names[i]+\" : \"+str(score[i]))","96c0da65":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nimport pandas as pd\nyhat = loaded_model.predict([X_test1,X_test2])\nyhat = yhat.round()\nreport = classification_report(y_test, yhat,target_names=['N','D','G','C','A','H','M','O'],output_dict=True)\ndf = pd.DataFrame(report).transpose()\ndf","7d1c1677":"df.to_csv('Class_Wise_Accuracy')","eff5a4d3":"## Validation","941668de":"# Visualize Data","ba8ff19b":"## Test","e208093b":"# Train Test Splitting","e5575423":"## Train","1e9d862b":"# Results"}}