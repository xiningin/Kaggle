{"cell_type":{"d553122f":"code","c33a7ad7":"code","9ae62391":"code","bf723c5c":"code","0f49313f":"code","5d825f08":"code","83f9e1cc":"code","51ea30cc":"code","93e39501":"code","37dd9497":"code","1345092e":"code","0fda3cdc":"code","fa7fc5df":"code","f14cb957":"code","cb540924":"code","a13f0210":"code","f7f1f9ad":"code","147a638a":"code","0082b00c":"code","9937f8e3":"code","bb21633d":"code","43cf0729":"code","afa8ab5e":"code","3e1dfe32":"code","9a8a59b0":"code","633cc075":"code","04a0674f":"code","1aff6188":"code","f34c9a92":"code","ab48776f":"code","106b12e3":"code","eb68ca1e":"code","d18a0103":"code","c1bfa4d8":"code","51a16f7f":"code","4bd7d8c2":"code","087598f0":"code","6cd7b409":"code","7dba477a":"code","0875941a":"code","85aeeffb":"code","8bacf46a":"code","636efba8":"code","5b7e4676":"code","8a3cea92":"code","f78bf97d":"code","92243dd5":"code","13702a20":"markdown","ebc54cbf":"markdown","34b40608":"markdown","42313f46":"markdown","01d3a237":"markdown","28b1fc5b":"markdown","5793ba9b":"markdown","687698c0":"markdown","72ec1343":"markdown","6f9df90f":"markdown","abe1bddd":"markdown","30fd3094":"markdown","9a266808":"markdown","11fb35a9":"markdown","dc92208e":"markdown","64cc9cfd":"markdown","41a8f47c":"markdown","96c8732c":"markdown","948d0194":"markdown","db2d17f7":"markdown","1907e388":"markdown","b2c1ef67":"markdown","7f49d995":"markdown","93273f6c":"markdown","2dc7cdd9":"markdown","f7265db6":"markdown","67849bcf":"markdown","8ade5c83":"markdown","48f60b8e":"markdown","b0f2af1d":"markdown","8d3b91b8":"markdown","b3fc7346":"markdown","72d532f8":"markdown","99da5cce":"markdown","45910184":"markdown","837acf89":"markdown","7eff260e":"markdown","c69cdcbc":"markdown","030f8380":"markdown","24b5bf51":"markdown","622e7ece":"markdown","bd002788":"markdown","5830c1f1":"markdown"},"source":{"d553122f":"import pandas as pd\ndata =pd.read_csv('..\/input\/lianjia\/new.csv',encoding = 'GB2312',low_memory=False)\nprint(data.shape[0])","c33a7ad7":"data","9ae62391":"data.isnull().sum(axis=0)","bf723c5c":"data['DOM'].fillna(data['DOM'].median(),inplace=True)\ndata=data.dropna(axis=0, how='any')","0f49313f":"data.isnull().sum(axis=0)","5d825f08":"print(data.shape[0])","83f9e1cc":"data['floor']=data['floor'].map(lambda x:x.split(' ')[1]).astype('int64')","51ea30cc":"data['constructionTime'].value_counts()","93e39501":"data=data[~data['constructionTime'].isin(['\u672a\u77e5'])]","37dd9497":"data['livingRoom']=data['livingRoom'].astype('int64')\ndata['drawingRoom']=data['drawingRoom'].astype('int64')\ndata['bathRoom']=data['bathRoom'].astype('int64')\ndata['constructionTime']=data['constructionTime'].astype('int64')\ndata['buildingType']=data['buildingType'].astype('int64')\n","1345092e":"data['tradeTime'] = pd.to_datetime(data['tradeTime'])\ndata.info()","0fda3cdc":"print(data.shape[0])","fa7fc5df":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nsns.set(style='whitegrid', context='notebook')\ncols = ['DOM','totalPrice','price','followers','square','livingRoom','drawingRoom','kitchen','bathRoom','floor','constructionTime','ladderRatio','communityAverage']\ncm = np.corrcoef(data[cols],rowvar=0)\nplt.figure(figsize=(10, 10))\nsns.set(font_scale=1.5)\nhm = sns.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size': 15},yticklabels=cols,xticklabels=cols)\nplt.show()","f14cb957":"avgprice=pd.DataFrame(data=data.resample('1M',on='tradeTime')['price'].mean())\navgprice['count']=data.resample('1M',on='tradeTime')['id'].count()\navgprice=avgprice.dropna(axis=0, how='any')\navgprice['count']=avgprice['count'].astype('int64')","cb540924":"avgprice.index","a13f0210":"avgprice=avgprice[4:]","f7f1f9ad":"avgprice.plot()","147a638a":"import matplotlib.dates as mdate\nplt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(25,16),dpi=100)\nax = plt.gca()\nax.xaxis.set_major_formatter(mdate.DateFormatter('%Y-%m'))\nplt.xticks(pd.date_range(avgprice.index[0],avgprice.index[-1],freq='10M'))\nplt.plot(avgprice.index,avgprice['price'],color=\"steelblue\", linewidth=10, alpha=.25)\nplt.scatter(avgprice.index, avgprice['price'],s=avgprice['count']\/10,color=\"black\",alpha=.75)\nplt.show()","0082b00c":"data=data[data['tradeTime']>'2010']\nheat_data=data[data['tradeTime']>'2015-05']\nheat_data=heat_data[heat_data['tradeTime']<'2015-06']","9937f8e3":"max_price=heat_data['price'].max()","bb21633d":"dict={}\ndict_list=heat_data.apply(lambda x:{x['id']:[x['Lng'],x['Lat']]},axis=1).to_list()\nfor item in dict_list:\n    dict.update(item)","43cf0729":"values=heat_data.apply(lambda x:(x['id'],x['price']),axis=1).to_list()","afa8ab5e":"import warnings\nwarnings.filterwarnings(\"ignore\")","3e1dfe32":"!pip install pyecharts\n!pip install echarts-china-provinces-pypkg","9a8a59b0":"from pyecharts.charts import Geo\nfrom pyecharts import options as opts\nfrom pyecharts.globals import ChartType\nimport json\n# with open('..\/input\/test_data.json', 'w', encoding='utf-8') as json_file:\n#     json_file.write(json.dumps(dict))\ngeo=Geo()\ngeo.add_schema(maptype= \"\u5317\u4eac\",label_opts=opts.LabelOpts(is_show=False),center=[116.2317, 39.5427])\ngeo.add_coordinate_json(json_file='..\/input\/locjson\/test_data.json')\ngeo.add('\u70ed\u529b\u56fe',values,label_opts=opts.LabelOpts(is_show=False),is_large=True,progressive_threshold=10000)\ngeo.set_global_opts(\n        visualmap_opts=opts.VisualMapOpts(is_piecewise=True,max_ = max_price,split_number=8),\n        title_opts=opts.TitleOpts(title=\"Geo-HeatMap\"),\n    )","633cc075":"geo.render_notebook()","04a0674f":"from math import sqrt\nfrom math import cos\nfrom math import sin\nimport math\n\ndef rad(d):\n    return d * math.pi \/ 180.0\n \ndef getDistance(lat1, lng1, lat2, lng2):\n    EARTH_REDIUS = 6378.137\n    radLat1 = rad(lat1)\n    radLat2 = rad(lat2)\n    a = radLat1 - radLat2\n    b = rad(lng1) - rad(lng2)\n    s = 2 * math.asin(math.sqrt(math.pow(sin(a\/2), 2) + cos(radLat1) * cos(radLat2) * math.pow(sin(b\/2), 2)))\n    s = s * EARTH_REDIUS\n    return s","1aff6188":"data['center-distance']=data.apply(lambda x :getDistance(x['Lat'],x['Lng'], 39.5427,116.2317),axis=1)","f34c9a92":"feature_cols=['DOM','followers','square','livingRoom','drawingRoom','kitchen','bathRoom','floor','constructionTime','elevator','ladderRatio','communityAverage','fiveYearsProperty','subway','center-distance']","ab48776f":"def classify_values(data,column_name):\n    temp=pd.DataFrame(data[column_name].value_counts())\n    \n    for index in temp.index: \n        if index==2:\n            continue\n        data[column_name+str(index)]=data[column_name].apply(lambda x: 1 if x==index else 0)\n        feature_cols.append(column_name+str(index))","106b12e3":"classify_values(data,'renovationCondition')\nclassify_values(data,'buildingStructure')\nclassify_values(data,'buildingType')\nclassify_values(data,'district')","eb68ca1e":"data['tradeTime'].value_counts","d18a0103":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats\nX = data[feature_cols]\ny = data[['price']]\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state=1)\nlinreg = LinearRegression(fit_intercept=True)\nlinreg.fit(X_train, y_train)","c1bfa4d8":"import statsmodels.api as sm\nX2 = sm.add_constant(X_train)\nest = sm.OLS(y_train, X2)\nest2 = est.fit()\nprint(est2.summary())","51a16f7f":"y_pred = linreg.predict(X_test)","4bd7d8c2":"from sklearn import metrics\nprint (\"MSE:\",metrics.mean_squared_error(y_test, y_pred))\nprint (\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","087598f0":"y_avgreg=pd.DataFrame(data=linreg.predict(X))","6cd7b409":"data.index = range(len(data))\ny_avgreg.columns=['regPrice']\ny_avgreg['tradeTime']=data['tradeTime']\ny_avgreg","7dba477a":"y_avgreg=pd.DataFrame(data=y_avgreg.resample('1M',on='tradeTime')['regPrice'].mean())\n\ny_avgreg.head()","0875941a":"y_truth=pd.DataFrame(data=data.resample('1M',on='tradeTime')['price'].mean())\ny_truth","85aeeffb":"plt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(25,16),dpi=100)\nax = plt.gca()\nax.xaxis.set_major_formatter(mdate.DateFormatter('%Y-%m'))\nplt.xticks(pd.date_range(y_truth.index[0],y_truth.index[-1],freq='12M'))\nplt.plot(y_truth.index,y_truth['price'],color=\"steelblue\",linewidth=10, alpha=.45)\nplt.plot(y_avgreg.index, y_avgreg['regPrice'],color=\"black\",linewidth=10,alpha=.75)\nplt.show()","8bacf46a":"data=data[~data['buildingStructure'].isin([1])]\ndata=data[~data['renovationCondition'].isin([1])]\ndata_2015=data[data['tradeTime']>'2015']\ndata_2015=data_2015[data_2015['tradeTime']<'2016']\ndata_2015.index=range(len(data_2015))","636efba8":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nX = data_2015[feature_cols[:15]]\ny = data_2015[['price']]\nselector=RFE(estimator=LinearRegression(), n_features_to_select=15)","5b7e4676":"selector.fit_transform(X, y)\nselector.get_support()","8a3cea92":"features=[]\nfor index,value in enumerate(selector.get_support()):\n    if value==True:\n        features.append(feature_cols[index])\nfeatures.append(feature_cols[15])\nfeatures.append(feature_cols[17])\nfeatures=features+feature_cols[18:22]\nfeatures=features+feature_cols[23:]\nX = data_2015[features]","f78bf97d":"X.drop(['DOM'],axis=1,inplace=True)\nX.drop(['buildingStructure6'],axis=1,inplace=True)\nX.drop(['buildingStructure4'],axis=1,inplace=True)\nX.drop(['buildingStructure5'],axis=1,inplace=True)\nX.drop(['district6'],axis=1,inplace=True)\nX.drop(['district7'],axis=1,inplace=True)\nX.drop(['district12'],axis=1,inplace=True)\nX.drop(['district5'],axis=1,inplace=True)","92243dd5":"X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=1)\nlinreg = LinearRegression(fit_intercept=True)\nlinreg.fit(X_train, y_train)\nX2 = sm.add_constant(X_train)\nest = sm.OLS(y_train, X2)\nest2 = est.fit()\nprint(est2.summary())","13702a20":"\u5904\u7406floor\u5b57\u6bb5\uff0c\u5c06\u8be5\u5217\u7684\u697c\u5c42\u6570\u53d6\u51fa\uff1b","ebc54cbf":"\u67e5\u770b\u5404\u5217\u6570\u636e\u7f3a\u5931\u884c\u6570\u3002","34b40608":"### \u6a21\u578b\u68c0\u9a8c","42313f46":"- \u4ece\u56fe\u4e2d\u53ef\u4ee5\u53d1\u73b0\u623f\u4ef7\u4e0e\u6bcf\u5e73\u7c73\u5747\u4ef7\u3001\u9762\u79ef\u3001\u5927\u5385\u3001\u536b\u751f\u95f4\u3001\u5c0f\u533a\u5747\u4ef7\u7684\u5448\u6b63\u76f8\u5173\u5173\u7cfb\u4e14\u76f8\u5173\u7cfb\u6570\u8f83\u9ad8\uff0c\u5747\u63a5\u8fd10.5\uff1b\n- ladderRatio\u4e0e\u5176\u4ed6\u53d8\u91cf\u5747\u4e0d\u76f8\u5173\uff1b\n- \u623f\u5c4b\u9762\u79ef\u4e0e\u5927\u5385\u3001\u5367\u5ba4\u3001\u536b\u751f\u95f4\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u5747\u8f83\u9ad8\uff0c\u5206\u522b\u4e3a0.72\u30010.62\u30010.73\uff1b\n- \u6bcf\u5e73\u7c73\u5747\u4ef7\u4e0e\u5c0f\u533a\u5747\u4ef7\u5448\u6b63\u76f8\u5173\u5173\u7cfb\u4e14\u76f8\u5173\u7cfb\u6570\u4e3a0.68\uff0c\u7b26\u5408\u8ba4\u77e5\u4e60\u60ef\uff1b","01d3a237":"\u4f7f\u7528RFE\u65b9\u6cd5\u5bf9\u5b9a\u91cf\u7279\u5f81\u8fdb\u884c\u9009\u62e9\uff0c\u6700\u7ec8\u53d1\u73b0\u5f53\u7279\u5f81\u5168\u9009\u65f6\uff0c\u56de\u5f52\u7ed3\u679cR^2\u8f83\u9ad8\uff0c\u6545\u53c2\u6570n_features_to_select=15","28b1fc5b":"\u6839\u636e\u6570\u636e\u96c6\u7ecf\u7eac\u5ea6\u8fdb\u884c\u623f\u5c4b\u5230\u5929\u5b89\u95e8\u8ddd\u79bb\u8ba1\u7b97\uff0c\u4f5c\u4e3a\u65b0\u7279\u5f81\u52a0\u5165\u6570\u636e\u96c6","5793ba9b":"\u4f7f\u7528train_test_split\u65b9\u6cd5\u5c06\u56e0\u53d8\u91cf\u548c\u81ea\u53d8\u91cf\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\uff0c\u9ed8\u8ba4\u6bd4\u4f8b\u4e3a3:1\uff0c\u4f7f\u7528scikit-learn\u6784\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u8fdb\u884c\u8bad\u7ec3\u3002","687698c0":"### \u6570\u636e\u7c7b\u578b\u4fee\u6539","72ec1343":"## \u6a21\u578b\u8c03\u4f18","6f9df90f":"\u4f7f\u7528pandas\u8bfb\u5165\u6570\u636e\uff0c\u5e76\u83b7\u53d6\u6570\u636e\u96c6\u957f\u5ea6\u3002","abe1bddd":"\u5728\u6240\u6709\u6570\u636e\uff08\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\uff09\u4e0a\u8fdb\u884c\u9884\u6d4b\uff0c\u5e76\u4f5c\u56fe\u89c2\u5bdf\u3002","30fd3094":"\u5220\u9664\u6570\u636e\u540e\u5bf9\u6570\u636e\u7f3a\u5931\u60c5\u51b5\u8fdb\u884c\u68c0\u67e5\u3002","9a266808":"\u6309\u7167\u6708\u9891\u7387\u5bf9\u6570\u636e\u7684price\u5217\u6c42\u5e73\u5747\u5e76\u8fdb\u884c\u8ba1\u6570\uff0c\u5220\u9664\u4efb\u610f\u5217\u6709\u7a7a\u503c\uff08\u4e3b\u8981\u9488\u5bf9price\uff09\u7684\u6570\u636e\u3002","11fb35a9":"\u89c2\u5bdf\u7d22\u5f15\u53d1\u73b0\u5b58\u5728\u4e0d\u8fde\u7eed\u7684\u6708\u4efd\u6570\u636e\uff0c\u8fdb\u884c\u5220\u9664\u3002","dc92208e":"\u5bf9\u90e8\u5206\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5904\u7406\uff0c\u8bbe\u7f6e\u4e3aint64\uff1b","64cc9cfd":"\u7ecf\u4e0a\u8ff0\u5904\u7406\u8fc7\u540e\uff0c\u6570\u636e\u603b\u5171\u8fd8\u6709297701\u6761","41a8f47c":"\u7edf\u8ba1\u53d1\u73b0DOM\u7f3a\u5931\u884c\u6570\u7ea6\u536050%\uff0c\u9700\u8865\u5168\u7f3a\u5931\u6570\u636e\uff1b\u800cbuildingType\u3001elevator\u7b49\u5217\u7f3a\u5931\u884c\u6570\u8f83\u5c11\u53ef\u8fdb\u884c\u5220\u9664\u5904\u7406\uff0c\u5bf9\u603b\u4f53\u4fe1\u606f\u542b\u91cf\u7684\u5f71\u54cd\u8f83\u5c0f\u3002","96c8732c":"\u53bb\u9664\u6389buildingStructure\u3001renovationCondition\u4e2d\u7f3a\u4e4f\u89e3\u91ca\u6027\u7684\u7c7b","948d0194":"\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u53d1\u73b02015\u5e74\u6570\u636e\u8f83\u4e3a\u5e73\u7f13\uff0c\u8fd9\u8bf4\u660e\u8be5\u5e74\u4efd\u623f\u4ef7\u53d7\u653f\u7b56\u3001\u592e\u884c\u8d37\u6b3e\u5229\u7387\u7b49\u5b8f\u89c2\u7ecf\u6d4e\u56e0\u7d20\u5f71\u54cd\u8f83\u5c0f\uff0c\u53ef\u7528\u4e8e\u7814\u7a76\u4e00\u822c\u7279\u5f81\u5bf9\u623f\u4ef7\u7684\u5f71\u54cd\u3002","db2d17f7":"\u5904\u7406constructionTime\u5b57\u6bb5\uff0c\u53d1\u73b0\u6709\u4e2d\u6587\u6807\u6ce8\u4e3a\u201c\u672a\u77e5\u201d\u7684\u6570\u636e\uff0c\u8fdb\u884c\u5220\u9664\uff1b","1907e388":"\u6b64\u65f6\u6570\u636e\u96c6\u5171316448\u6761\u3002","b2c1ef67":"\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u9488\u5bf9\u76f8\u540c\u4ea4\u6613\u65f6\u95f4\uff08\u6309\u6708\u4efd\uff09\u7684\u6bcf\u5e73\u7c73\u5747\u4ef7\u53ca\u4ea4\u6613\u91cf\u505a\u56fe\u8868\uff0c\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0\u6570\u636e\u4e2d\u6709\u90e8\u5206\u6708\u4efd\u4e0d\u8fde\u7eed\uff0c\u8fdb\u884c\u4e86\u5220\u9664\uff0c\u6700\u7ec8\u6570\u636e\u96c6\u4e2d\u53ea\u5269\u4e0b\u4e86\u4ea4\u6613\u65f6\u95f4\u57282010\u5e741\u6708\u52302018\u5e741\u6708\u4e4b\u95f4\u7684\u6570\u636e\u3002","7f49d995":"\u9009\u53d6\u7279\u5f81\u6307\u6807\uff0c\u5bf9\u623f\u5b50\u7684\u603b\u4ef7\u8fdb\u884c\u56de\u5f52\u62df\u5408\uff1b\u9009\u53d6\u6240\u6709\u6570\u503c\u578b\u6570\u636e\uff0c\u8fc7\u7a0b\u4e2d\u53d1\u73b0renovationCondition\u3001buildingStructure\u3001buildingType\u3001district\u5c5e\u4e8e\u5b9a\u6027\u53d8\u91cf\u4e14\u79cd\u7c7b\u8d85\u8fc72\u79cd\uff1b","93273f6c":"\u5c06tradeTime\u8f6c\u6362\u4e3adatetime\u7c7b\u578b\u3002","2dc7cdd9":"\u95ee\u9898\uff1a\u5229\u7528Kaggle\u4e0a2011-2018\u5e74\u521d\u7684\u5317\u4eac\u94fe\u5bb6\u623f\u4ef7\u6570\u636e\u8fdb\u884c\u672a\u6765\u623f\u4ef7\u7684\u9884\u6d4b","f7265db6":"\u6545\u9009\u53d62015\u5e745\u6708\u6570\u636e\uff0c\u9488\u5bf9\u6bcf\u5e73\u7c73\u4ef7\u683c\u53ca\u4f4d\u7f6e\u505a\u5730\u7406\u70ed\u529b\u56fe\u3002\u7ecf\u89c2\u5bdf\uff0c\u53d1\u73b0\u5317\u4eac\u623f\u4ef7\u5b58\u5728\u4ee5\u5929\u5b89\u95e8\u4e3a\u4e2d\u5fc3\u5411\u56db\u5468\u9010\u6e10\u964d\u4f4e\u7684\u8d8b\u52bf\uff0c\u6545\u901a\u8fc7\u7ecf\u7eac\u5ea6\u8ba1\u7b97\u589e\u52a0\u7279\u5f81\u6570\u636e\u5217center-distance\u63cf\u8ff0\u623f\u5c4b\u5230\u5929\u5b89\u95e8\u7684\u8ddd\u79bb\uff0c\u5355\u4f4d\u4e3a\u5343\u7c73\u3002","67849bcf":"\u5b9a\u4e49\u65b9\u6cd5\u5bf9\u4e0a\u8ff0\u56db\u79cd\u5b9a\u6027\u53d8\u91cf\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u5176\u968f\u673a\u7684\u4e00\u4e2a\u53d6\u503c\uff08index\u4e3a2\uff09\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0c\u9632\u6b62\u51fa\u73b0\u5171\u7ebf\u6027\uff1b","8ade5c83":"### \u76f8\u5173\u5173\u7cfb","48f60b8e":"# \u5317\u4eac\u623f\u4ef7\u9884\u6d4b","b0f2af1d":"\u53bb\u9664\u5728\u56de\u5f52\u8fc7\u7a0b\u4e2d\u53c2\u6570\u68c0\u9a8c\u4e0d\u663e\u8457\u7684\u53d8\u91cf","8d3b91b8":"\u6a21\u578b\u62df\u5408\u4f18\u5ea6\u53ca\u5404\u53d8\u91cf\u53c2\u6570\u503c\u3001p\u503c\u5982\u4e0b\u56fe\u6240\u793a\u3002","b3fc7346":"\u9488\u5bf9\u6bcf\u6708\u4ea4\u6613\u91cf\u505a\u6c14\u6ce1\u56fe\uff08\u5706\u5708\u8d8a\u5927\u4ee3\u8868\u4ea4\u6613\u91cf\u8d8a\u5927\uff09\uff0c\u4e0e\u6bcf\u5e73\u7c73\u5747\u4ef7\u6240\u505a\u6298\u7ebf\u56fe\u8fdb\u884c\u590d\u5408\u3002","72d532f8":"\u7f29\u5c0f\u6570\u636e\u8303\u56f4\uff0c2015\u5e74\u4ef7\u683c\u53d8\u52a8\u8f83\u5c0f\uff0c\u53d62015\u5e74\u6240\u6709\u6570\u636e\uff1b","99da5cce":"\u6b64\u6b65\u5e94\u6ce8\u610f\u8fdb\u884c\u7d22\u5f15\u91cd\u62cd\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u56e0\u9884\u6d4b\u7ed3\u679c\u548c\u4ea4\u6613\u65f6\u95f4\u4e0d\u5bf9\u5e94\u800c\u4ea7\u751f\u4f5c\u56fe\u7684\u504f\u5dee\u3002","45910184":"### \u6570\u636e\u6e05\u6d17","837acf89":"## \u591a\u5143\u7ebf\u6027\u56de\u5f52","7eff260e":"\u9009\u53d6DOM,totalprice,price,followers,square,livingRoom,drawingRoom,kitchen,bathRoom,floor,constructionTime,ladderRatio,communityAverage\u7b49\u5b9a\u91cf\u6570\u636e\u6c42\u76f8\u5173\u7cfb\u6570\uff0c\u5e76\u4f5c\u70ed\u529b\u56fe\u3002","c69cdcbc":"### \u6570\u636e\u900f\u89c6","030f8380":"\u753b\u6298\u7ebf\u56fe\u89c2\u5bdf\u8d8b\u52bf\uff1b","24b5bf51":"## \u6570\u636e\u9884\u5904\u7406","622e7ece":"### \u8ba8\u8bba","bd002788":"### \u56de\u5f52\u6a21\u578b","5830c1f1":"\u9488\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b\uff0c\u5e76\u8ba1\u7b97MSE\u3001RMSE\uff1b"}}