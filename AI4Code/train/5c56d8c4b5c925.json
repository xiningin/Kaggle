{"cell_type":{"d5ced074":"code","9817a7db":"code","ddf3d92d":"code","9ac220b8":"code","300be914":"code","1c9764f1":"code","1f75a6fe":"code","009c6856":"code","5501d48f":"code","39bd2430":"code","d0a9975d":"code","b42029f9":"code","ea5660ba":"code","550f422c":"code","98da88fa":"code","502db055":"code","662437c7":"code","0b7ee056":"code","c078d1b8":"code","bbdaa648":"code","26f02937":"code","b26a53c4":"code","2b7d3f25":"code","fcae1455":"code","51414624":"code","59db5277":"code","53007f3b":"code","05b19151":"code","4c086895":"code","41159be9":"code","989da3ce":"code","639846b8":"code","7d2aca54":"code","be0c017b":"code","e82c2a8f":"code","5c03f3dd":"code","40c65280":"code","2a788597":"code","27758620":"code","72bc3146":"code","ae9ef82d":"code","4dda688a":"code","7597ed12":"code","8636c926":"code","55daaeb9":"code","e676a470":"code","2bee11c8":"code","aa797c6a":"code","785a0a42":"code","dfa8450f":"code","270c30b4":"code","0c700295":"code","e2ade00b":"code","1daec9b6":"code","f67cbea2":"code","547338a9":"code","ff770122":"code","a67172d1":"code","8f84c9b5":"code","d3147955":"code","fa499cab":"code","82516db8":"code","575b86df":"code","7febf83f":"markdown","dc6d8e2c":"markdown","6e98b1da":"markdown","532972e3":"markdown","0b1c36e8":"markdown","b8d78b5f":"markdown"},"source":{"d5ced074":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom dateutil.parser import parse \nplt.rcParams['axes.labelsize'] = 14\nplt.rcParams['xtick.labelsize'] = 12\nplt.rcParams['ytick.labelsize'] = 12\nplt.rcParams['text.color'] = 'k'","9817a7db":"item_categories=pd.read_csv(r'..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nitems=pd.read_csv(r'..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nraw_sales=pd.read_csv(r'..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nshops=pd.read_csv(r'..\/input\/competitive-data-science-predict-future-sales\/shops.csv')","ddf3d92d":"sample=pd.read_csv(r'..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nsample","9ac220b8":"sales1 = pd.merge(raw_sales, items, on ='item_id',how ='left')\nsales2 = pd.merge(sales1, item_categories, on ='item_category_id',how ='left')\nsales3 = pd.merge(sales2, shops, on ='shop_id',how ='left')\nsales3","300be914":"sales3.isna().sum()","1c9764f1":"y=sales3[['date', 'item_cnt_day']]\ny.head()","1f75a6fe":"y = y.groupby('date')['item_cnt_day'].sum().reset_index()\ny.head()","009c6856":"y.shape[0]","5501d48f":"for i in range(0,y.shape[0]):\n  y['date'][i] = pd.concat(y['date'][i].str[-4:], y['date'][i].str[3:4], y['date'][i].str[0:2])","39bd2430":"pd.concat([y['date'].str[-4:], y['date'].str[3:5], y['date'].str[0:2]])","d0a9975d":"y['date'].str[3:5]","b42029f9":"y['date'].str[0:2]","ea5660ba":"y['date'] = pd.concat(y['date'].str[-4:], y['date'].str[3:4], y['date'].str[0:2])","550f422c":"y.set_index('date')\ny.index","98da88fa":"y","502db055":"x = y['item_cnt_day'].resample('MS').mean()","662437c7":"y.plot(figsize=(15, 6))\nplt.show()","0b7ee056":"sns.heatmap(sales3.corr())","c078d1b8":"cnt_by_month=sales3.groupby('date_block_num').sum()\ncnt_by_month=cnt_by_month.drop(['shop_id', 'item_id', 'item_price', 'item_category_id'], axis=1)\ncnt_by_month.reset_index(inplace=True)\n\ncnt_by_item=sales3.groupby('item_id').sum()\ncnt_by_item=cnt_by_item.drop(['shop_id', 'date_block_num', 'item_price', 'item_category_id'], axis=1)\ncnt_by_item.reset_index(inplace=True)\n\ncnt_by_shop=sales3.groupby('shop_id').sum()\ncnt_by_shop=cnt_by_shop.drop(['item_id', 'date_block_num', 'item_price', 'item_category_id'], axis=1)\ncnt_by_shop.reset_index(inplace=True)","bbdaa648":"fig1 = sns.relplot(x='date_block_num', y='item_cnt_day', data=cnt_by_month)\nfig1a = fig1.fig \nfig1a.suptitle(\"Total solds Time Series\", fontsize=12)\n\n\nfig2 = sns.relplot(x='item_id', y='item_cnt_day', data=cnt_by_item)\nfig2a = fig2.fig \nfig2a.suptitle(\"Items sold\", fontsize=12)\n\n\nfig3 = sns.relplot(x='shop_id', y='item_cnt_day', data=cnt_by_shop)\nfig3a = fig3.fig \nfig3a.suptitle(\"Solds per Shop\", fontsize=12)","26f02937":"print('Best Selling Months:')\ndate_outlier=[i for i in cnt_by_month['item_cnt_day'] if i > 160000]\ndate_outlier1=pd.DataFrame({\"item_cnt_day\": date_outlier})\ndate_outlier2 = pd.merge(date_outlier1, cnt_by_month, on ='item_cnt_day', how ='inner')\ndate_outlier2","b26a53c4":"sales3.loc[sales3['date_block_num'] == 11, 'date']","2b7d3f25":"sales3.loc[sales3['date_block_num'] == 23, 'date']","fcae1455":"#Peak sales were before Winter Holidays, seasonal outliers","51414624":"print('Best Selling Items:')\nitem_outlier=[i for i in cnt_by_item['item_cnt_day'] if i > 150000]\nitem_outlier1=pd.DataFrame({\"item_cnt_day\": item_outlier})\nitem_outlier2 = pd.merge(item_outlier1, cnt_by_item, on ='item_cnt_day', how ='inner')\nitem_outlier2","59db5277":"print('Best Selling Shops:')\nshop_outlier=[i for i in cnt_by_shop['item_cnt_day'] if i > 180000]\nshop_outlier1=pd.DataFrame({\"item_cnt_day\": shop_outlier})\nshop_outlier2 = pd.merge(shop_outlier1, cnt_by_shop, on ='item_cnt_day', how ='inner')\nshop_outlier2","53007f3b":"sales4=sales3.copy()\nsales4 = sales4[(sales4.date_block_num != 11) & (sales4.date_block_num != 23)]\nsales4 = sales4[sales4.item_id != 20949]\nsales4 = sales4[(sales4.shop_id != 25) & (sales4.shop_id != 28) & (sales4.shop_id != 31 & (sales4.shop_id != 54))]","05b19151":"sales4","4c086895":"sales5=sales4.drop(['date', 'item_name', 'item_category_name', 'shop_name'], axis=1)\nsales5","41159be9":"sales6=sales5.copy()\nsales6=sales6.drop(['item_price', 'item_category_id'], axis=1)","989da3ce":"sales6 = sales6.groupby(['date_block_num','shop_id','item_id']).sum()\nsales6.reset_index(inplace=True)","639846b8":"sales6","7d2aca54":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nsales6[['item_cnt_day']] = scale.fit_transform(sales6[['item_cnt_day']])","be0c017b":"sales7 = sales6.pivot_table(index=['shop_id','item_id'], columns='date_block_num', values='item_cnt_day', fill_value=0)\nsales7.reset_index(inplace=True)","e82c2a8f":"sales7","5c03f3dd":"sales8 = sales6.groupby(['shop_id','item_id']).sum()\nsales8.reset_index(inplace=True)","40c65280":"sales8","2a788597":"sales7['mean'] = sales7.iloc[:, 2:].mean(axis=1)","27758620":"sales7['mean']","72bc3146":"x=sales7.drop('mean', axis=1)\ny=sales7['mean']","ae9ef82d":"x","4dda688a":"y","7597ed12":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","8636c926":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)","55daaeb9":"model.score(X_train, y_train)","e676a470":"y_pred = model.predict(X_test)","2bee11c8":"mean_squared_error(y_train, model.predict(X_train))","aa797c6a":"mean_squared_error(y_test, y_pred)","785a0a42":"from sklearn.ensemble import RandomForestRegressor","dfa8450f":"RFR = RandomForestRegressor(n_estimators = 10)\nRFR.fit(X_train,y_train)","270c30b4":"RFR.score(X_train,y_train)","0c700295":"y_pred = RFR.predict(X_test)","e2ade00b":"mean_squared_error(y_test, y_pred)","1daec9b6":"test=pd.read_csv(r'..\/input\/competitive-data-science-predict-future-sales\/test.csv')","f67cbea2":"test","547338a9":"test1=test.merge(x, how=\"left\", on = ['shop_id', 'item_id'])","ff770122":"test1","a67172d1":"test2=test1.copy()\ntest2=test2.fillna(0)\ntest2=test2.drop('ID', axis=1)\ntest2","8f84c9b5":"y_pred1=RFR.predict(test2)","d3147955":"y_new_inverse = scale.inverse_transform(y_pred1)","fa499cab":"y_pred2=pd.DataFrame(y_new_inverse, columns=['item_cnt_month'])\ny_pred2","82516db8":"submission=pd.concat([test['ID'], y_pred2], axis=1)","575b86df":"submission.to_csv(r'.\/submission.csv', index = False)","7febf83f":"**Build the Linear Regression Model**","dc6d8e2c":"**Check for Correlations**","6e98b1da":"**Export the outcome**","532972e3":"**Prediction Time Series Data using Linear Regression and RandomForestRegressor**\n\nApproach:\n\n - Clean the data\n - Remove outliers\n - Build a model\n - Apply the model to test data","0b1c36e8":"**Plot the data to see the outliers**","b8d78b5f":"**Sumif the count per days according to months, items & shops**"}}