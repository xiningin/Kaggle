{"cell_type":{"2b1ffecd":"code","bde02cf0":"code","010fc7aa":"code","e803c5f5":"code","31c64ea4":"code","49b0f339":"markdown","7d6a2180":"markdown","1ac34927":"markdown"},"source":{"2b1ffecd":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ntrain_file = '..\/input\/train.csv'\ndata = pd.read_csv(train_file, delimiter=',')\ntest_file = '..\/input\/test.csv'\ntdata = pd.read_csv(test_file, delimiter=',')\n\ntrain_data = data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Cabin', 'Fare', 'Survived', 'Name', 'Ticket']]\ntest_data = tdata[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Cabin', 'Fare', 'Name', 'Ticket']]\n\ndef update_name(df):\n    df['Lname'] = df.Name.apply(lambda x: x.split(',')[0])\n    return df\n\ndef update_sex(df):\n    df.Sex = df.Sex.str[0]\n    return df\n\ndef update_cabin(df):\n    df.Cabin = df.Cabin.fillna('N')\n    df.Cabin = df.Cabin.str[0]\n    return df\n\ndef update_fare(df):\n    df.Fare = df.Fare.fillna(0)\n    bins = (-1, 0, 8, 15, 31, 60, 513)\n    bin_names = [0, 1, 2, 3, 4, 5]\n    df.Fare = pd.cut(df.Fare, bins, labels=bin_names)\n    return df\n\ndef update_age(df):\n    df.Age = df.Age.fillna(0)\n    bins = (-1, 0, 5, 12, 20, 28, 38, 60, 90)\n    bin_names = [0, 1, 2, 3, 4, 5, 6, 7]\n    df.Age = pd.cut(df.Age, bins, labels=bin_names)\n    return df\n\ndef update_columns(df):\n    df = update_name(df)\n    df = update_sex(df)\n    df = update_cabin(df)\n    df = update_fare(df)\n    df = update_age(df)\n    df = df.drop(['Name'], axis=1)\n    return df\n\ntrain_data = update_columns(train_data)\ntest_data = update_columns(test_data)\n\ndef encode_features(df):\n    features = ['Sex', 'Ticket', 'Cabin', 'Lname']\n    df_combined = df[features]\n    \n    for feature in features:\n        le = preprocessing.LabelEncoder()\n        le = le.fit(df_combined[feature])\n        df[feature] = le.transform(df[feature])\n    return df\n    \ntrain_data = encode_features(train_data)\ntest_data = encode_features(test_data)\n\nX_all = train_data.drop(['Survived'], axis=1)\ny_all = train_data['Survived']","bde02cf0":"plt.figure(figsize=(16, 6))\nsns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Age\", data=train_data);","010fc7aa":"plt.figure(figsize=(16, 6))\nsns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Fare\", data=train_data);","e803c5f5":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train_data);","31c64ea4":"from sklearn.tree import DecisionTreeClassifier\nclf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=100)\nclf.fit(X_all, y_all)\ntest_predictions = clf.predict(test_data)\n\npreds = {'PassengerId': tdata['PassengerId'], 'Survived': test_predictions}\ndf = pd.DataFrame(data=preds)\ndf.to_csv('preds.csv', sep=',', index=False)","49b0f339":"# Read Data","7d6a2180":"# Analysis","1ac34927":"# Supervised Learning"}}