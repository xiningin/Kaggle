{"cell_type":{"2259281d":"code","44172cd0":"code","f6e716c0":"code","33fcd479":"code","ef17a278":"code","13b0a357":"code","abd424e8":"code","ece3a4ff":"code","8fd69b2a":"code","65af9eac":"code","d827262e":"code","0000943a":"code","40f6b7e8":"code","7169030d":"code","87886c6c":"code","c53b59f1":"code","b419b9e2":"code","1e5593cf":"code","45040bf1":"code","d7fb132d":"code","ed8cde01":"code","36aaa8ed":"markdown","5b533f24":"markdown","6014a124":"markdown","c8269b72":"markdown"},"source":{"2259281d":"import pandas as pd #\nfrom tqdm import tqdm\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.subplots as pxs\nimport skimage.io as ski\nimport plotly.graph_objects as pxg\nimport librosa as lr\nimport librosa.display as lrd\nimport tensorflow as tf\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nplt.rcParams['figure.figsize'] = [9, 9]","44172cd0":"# \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 fashion mnist\nfashion_mnist_data = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')\nfashion_mnist_data.shape","f6e716c0":"#\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nfashion_train_x, fashion_test_x, fashion_train_y, fashion_test_y = train_test_split(fashion_mnist_data.iloc[:,1:], fashion_mnist_data.label)","33fcd479":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \"fashion mnist\"\nfashion_clsf = RandomForestClassifier(n_estimators=300, max_depth=100, random_state=3)\nfashion_clsf.fit(fashion_train_x, fashion_train_y)\nfashion_clsf_score = fashion_clsf.score(fashion_test_x, fashion_test_y)\nfashion_clsf_score","ef17a278":"#\u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \"chinese mnist\" \nchinese_mnist_data = pd.read_csv(\"\/kaggle\/input\/chinese-mnist\/chinese_mnist.csv\")\nchinese_mnist_data.shape","13b0a357":"def return_image(el):\n    return f\"input_{el[0]}_{el[1]}_{el[2]}.jpg\"\n\nchinese_mnist_data['image'] = chinese_mnist_data.apply(return_image, axis=1)","abd424e8":"chinese_mnist_clear_data = pd.DataFrame(columns=[[\"code\"] + [el for el in range(4096)]])\n\nfor inx, el in tqdm(enumerate(chinese_mnist_data.image)):\n    tmp = ski.imread(f\"\/kaggle\/input\/chinese-mnist\/data\/data\/{el}\")\n    tmp_arr = []\n    for el in tmp:\n        for le in el:\n            tmp_arr.append(le)\n    clear = [chinese_mnist_data.iat[inx,2]] + tmp_arr\n    clear_ser = pd.Series(clear, index=chinese_mnist_clear_data.columns)\n    chinese_mnist_clear_data = chinese_mnist_clear_data.append(clear_ser, ignore_index=True)\n    if inx == 2110:\n        break","ece3a4ff":"chinese_mnist_clear_data.shape","8fd69b2a":"chinese_train_x, chinese_test_x, chinese_train_y, chinese_test_y = train_test_split(chinese_mnist_clear_data.iloc[:,1:],chinese_mnist_clear_data.code)","65af9eac":"chinese_train_x = chinese_train_x.astype(np.int32)\nchinese_test_x = chinese_test_x.astype(np.int32)\nchinese_train_y = chinese_train_y.astype(np.int32)\nchinese_test_y = chinese_test_y.astype(np.int32)","d827262e":"# classify chineseminst\nchinese_clsf = RandomForestClassifier(n_estimators=300, max_depth=100, random_state=3)\nchinese_clsf.fit(chinese_train_x, chinese_train_y.values.ravel())\nchinese_clsf_score = chinese_clsf.score(chinese_test_x, chinese_test_y)\nchinese_clsf_score","0000943a":"#signmnist dataset\nsign_mnist = pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")\nsign_mnist.shape","40f6b7e8":"#\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nsign_train_x, sign_test_x, sign_train_y, sign_test_y = train_test_split(sign_mnist.iloc[:,1:], sign_mnist.label)","7169030d":"#\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \"signmnist\"\nsign_clsf = RandomForestClassifier(n_estimators=300, max_depth=100, random_state=3)\nsign_clsf.fit(sign_train_x, sign_train_y)\nsign_clsf_score = sign_clsf.score(sign_test_x, sign_test_y)\nsign_clsf_score","87886c6c":"# \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \"soundurban\"\nsound_set = pd.read_csv(\"\/kaggle\/input\/urbansound8k\/UrbanSound8K.csv\")\nsound_set.shape","c53b59f1":"sound_set['path'] = sound_set.apply(lambda el: f\"\/kaggle\/input\/urbansound8k\/fold{el.fold}\/{el.slice_file_name}\", axis=1)","b419b9e2":"# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \"\u0447\u0438\u0441\u0442\u044b\u043c\u0438\" \u0437\u0432\u0443\u043a\u0430\u043c\u0438\nsound_clear = pd.DataFrame(columns=[[\"code\"] + [el for el in range(128)]])","1e5593cf":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \"\u0447\u0438\u0441\u0442\u044b\u0435\" \u0437\u0432\u0443\u043a\u0438 \u0432 \u043d\u0430\u0431\u043e\u0440\nfor inx, el in tqdm(enumerate(sound_set[\"class\"])):\n    tmp = np.mean(lr.feature.mfcc(lr.load(sound_set.iat[inx,8])[0], n_mfcc=128), axis=1)\n    clear = [el] + list(tmp)\n    clear_ser = pd.Series(clear, index=sound_clear.columns)\n    sound_clear =  sound_clear.append(clear_ser.to_frame().T, ignore_index=True)\n    if inx == 707:\n        break","45040bf1":"sound_clear.shape","d7fb132d":"# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nsound_train_x, sound_test_x, sound_train_y, sound_test_y = train_test_split(sound_clear.iloc[:,1:],sound_clear.code)","ed8cde01":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \"Urbansound\"\nsound_clsf = RandomForestClassifier(n_estimators=300, max_depth=100, random_state=3)\nsound_clsf.fit(sound_train_x, sound_train_y)\nsound_clsf_score = sound_clsf.score(sound_test_x, sound_test_y)\nsound_clsf_score","36aaa8ed":"#######################################################################","5b533f24":"\u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0447\u0438 \u043d\u0430\u0431\u043e\u0440\u0438 \u0434\u0430\u043d\u0438\u0445 \u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0457 \u0440\u043e\u0431\u043e\u0442\u0438 \u21162 \u0432\u0438\u043a\u043e\u043d\u0430\u0442\u0438 \u043a\u043b\u0430\u0441\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0434\u0435\u0440\u0435\u0432 \u0440\u0456\u0448\u0435\u043d\u044c \u0430\u0431\u043e \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u0438\u0445 \u043b\u0456\u0441\u0456\u0432. \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438. ","6014a124":"\u0412\u044b\u0432\u043e\u0434: \u041c\u044b \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043b\u0430\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \"\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\".\n\u0411\u044b\u0441\u0442\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u0440\u043e\u0448\u0451\u043b \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \"Chineseminst\"","c8269b72":"#####################################################################"}}