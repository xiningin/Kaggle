{"cell_type":{"315c5236":"code","599e38cf":"code","ef78c634":"code","026cc865":"code","900f8825":"code","6ad60fc9":"code","0c808a86":"code","e6bc7371":"code","bcdec3f8":"code","f1421127":"code","5b4b8dd7":"code","a3c171c3":"markdown","05d12ccc":"markdown","d50b4ece":"markdown","f47da9b9":"markdown","8dde28ba":"markdown","9d189586":"markdown"},"source":{"315c5236":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.ensemble import GradientBoostingRegressor","599e38cf":"data = pd.read_csv('..\/input\/dummy-advertising-and-sales-data\/Dummy Data HSS.csv')","ef78c634":"data","026cc865":"data.info()","900f8825":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop rows with missing target values\n    missing_target_rows = df[df['Sales'].isna()].index\n    df = df.drop(missing_target_rows, axis=0).reset_index(drop=True)\n    \n    # Fill remaining missing values with column means\n    for column in ['TV', 'Radio', 'Social Media']:\n        df[column] = df[column].fillna(df[column].mean())\n    \n    # Split df into X and y\n    y = df['Sales']\n    X = df.drop('Sales', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    return X_train, X_test, y_train, y_test","6ad60fc9":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","0c808a86":"X_train","e6bc7371":"y_train","bcdec3f8":"nominal_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(sparse=False))\n])\n\npreprocessor = ColumnTransformer(transformers=[\n    ('nominal', nominal_transformer, ['Influencer'])\n], remainder='passthrough')\n\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('regressor', GradientBoostingRegressor())\n])","f1421127":"model.fit(X_train, y_train)","5b4b8dd7":"y_pred = model.predict(X_test)\n\nrmse = np.sqrt(np.mean((y_test - y_pred)**2))\nr2 = 1 - (np.sum((y_test - y_pred)**2) \/ np.sum((y_test - y_test.mean())**2))\n\nprint(\"RMSE: {:.2f}\".format(rmse))\nprint(\" R^2: {:.4f}\".format(r2))\n\nplt.figure(figsize=(10, 10))\nsns.scatterplot(x=y_pred, y=y_test)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Actual vs. Predicted Values\")\nplt.show()","a3c171c3":"# Results","05d12ccc":"# Training","d50b4ece":"# Getting Started","f47da9b9":"# Task for Today  \n\n***\n\n## Marketing Sales Prediction  \n\nGiven *data about budgets in a marketing campaign*, let's try to predict the **sales** generated by a given budget allocation.\n\nWe will use a gradient boosting regression model to make our predictions.","8dde28ba":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/j5ay4Fn99Uw","9d189586":"# Preprocessing"}}