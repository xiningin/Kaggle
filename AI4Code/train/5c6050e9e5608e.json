{"cell_type":{"44276d72":"code","716372a7":"code","8fff50c0":"code","037571c1":"code","cfb35b5b":"code","70727c9b":"code","f18c02a8":"code","ca3b5d79":"code","11bfd983":"code","f1c8c29a":"code","4d09ca25":"code","ae12b154":"code","7bea4cba":"code","4b450e97":"code","fed60ec8":"code","a5e1fe4b":"code","1d4acea7":"code","8769e0d6":"code","c0656806":"code","7d40b01a":"code","ba6ca788":"code","34cc9ecf":"code","426116d7":"code","646bd38d":"code","1ac069ac":"code","b71cda8e":"code","a34e4101":"code","43b8f901":"code","1aa16d83":"code","d4356eed":"code","63bd92f4":"markdown","da7a6e49":"markdown","319f1b0b":"markdown","cde25950":"markdown","f11a9dff":"markdown","62dddf32":"markdown","15d8f301":"markdown","a3d5b9ca":"markdown","5f9ad020":"markdown","9265dd09":"markdown","8c044660":"markdown","38baf25d":"markdown","5e60c683":"markdown","d81312ee":"markdown","c62a2f6a":"markdown","fafef793":"markdown","c250df51":"markdown","f8b3dba6":"markdown","6e78c76d":"markdown","47903917":"markdown","9649719b":"markdown","9e7b1ddc":"markdown"},"source":{"44276d72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","716372a7":"data = pd.read_csv('..\/input\/mushrooms.csv')","8fff50c0":"data.info()  # Display the content of data","037571c1":"# shape gives number of rows and columns in a tuple\ndata.shape","cfb35b5b":"data.head()","70727c9b":"data.tail()","f18c02a8":"data.describe()","ca3b5d79":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()","11bfd983":"data = data.apply(label_encoder.fit_transform)","f1c8c29a":"data.dtypes","4d09ca25":"data.head()","ae12b154":"data.sample(5)","7bea4cba":"y = data['class'].values\nx_data = data.drop(['class'], axis=1)","4b450e97":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data))","fed60ec8":"x.isnull().sum() #Indicates values not defined in our data","a5e1fe4b":"#as you see there are 8124 NaN values\n#we drop veil_type feature from data\nx.drop([\"veil-type\"],axis=1,inplace=True) ","1d4acea7":"x.isnull().sum().sum()  #Indicates sum of values in our data","8769e0d6":"print(x.shape)\nprint(y.shape)","c0656806":"x.head(10)","7d40b01a":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)\n","ba6ca788":"def initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b","34cc9ecf":"def sigmoid(z):\n    \n    y_head = 1\/(1 + np.exp(-z))\n    \n    return y_head","426116d7":"def forward_backward_propagation(w, b, x_train, y_train):\n    #forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\":derivative_weight,\"derivative_bias\":derivative_bias}\n    return cost,gradients","646bd38d":"def update(w, b, x_train, y_train, learning_rate, number_of_iteration):\n    \n    cost_list = []\n    index = []\n    \n    for i in range(number_of_iteration):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w, b, x_train, y_train)\n        \n        # lets update\n        w = w - learning_rate*gradients[\"derivative_weight\"]\n        b = b - learning_rate*gradients[\"derivative_bias\"]\n        \n        cost_list.append(cost)\n        index.append(i)\n        \n    parameters = {\"weight\":w,\"bias\":b}\n    \n    # Creating trace1\n    trace1 = go.Scatter(\n                    x = index,\n                    y = cost_list,\n                    mode = \"lines\",\n                    name = \"Cost\",\n                    marker = dict(color = 'rgba(160, 112, 2, 0.8)'),\n                    text= index)\n    data = [trace1]\n    \n    layout = dict(title = 'Number of Cost and Cost Values',\n              xaxis= dict(title= 'Number of Cost',ticklen= 10,zeroline= True))\n    \n    fig = dict(data = data, layout = layout)\n    iplot(fig)\n    \n    # Creating trace1\n    trace1 = go.Scatter(\n                    x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],\n                    y = parameters['weight'].reshape(x_train.shape[0]), #print(parameters['weight'].reshape(21).shape)\n                    mode = \"lines\",\n                    name = \"Weight\",\n                    marker = dict(color = 'rgba(255, 77, 77, 1)'),\n                    text=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])    \n    # Creating trace2\n    trace2 = go.Scatter(\n                    x = [1],\n                    y = np.array(parameters['bias']),\n                    mode = \"markers+text\",\n                    name = \"Bias\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= [\"Bias Value\"])    \n    \n    data = [trace1,trace2]\n    \n    layout = dict(title = 'Weights and Bias Values',\n              xaxis= dict(title= 'Number of Weights',ticklen= 10,zeroline= True))\n    \n    fig = dict(data = data, layout = layout)\n    iplot(fig)\n    \n    return parameters,gradients,cost_list\n                ","1ac069ac":"def predict(w, b, x_test):\n    \n    # x_test is a input for forward propagation\n    z = np.dot(w.T,x_test) + b\n    y_head = sigmoid(z)\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    # if z is bigger than 0.5, our prediction is one (y_head=1)\n    # if z is smaller than 0.5, our prediction is zero (y_head=0)\n    \n    for i in range(y_head.shape[1]):\n        if y_head[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    \n    return y_prediction","b71cda8e":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate, num_iterations):\n    # initialize\n    dimension = x_train.shape[0] #that is 21\n    w,b = initialize_weights_and_bias(dimension)\n    \n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate, num_iterations)\n    \n    y_prediction_train = predict(parameters[\"weight\"], parameters[\"bias\"], x_train)\n    y_prediction_test = predict(parameters[\"weight\"], parameters[\"bias\"], x_test)\n    \n    #Print Train Accuracy\n    train_accuracy = (100 - np.mean(np.abs(y_prediction_train - y_train)) * 100)\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    #Print Test Accuracy\n    test_accuracy = (100 - np.mean(np.abs(y_prediction_test - y_test)) * 100)\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \n    # create trace1 \n    trace1 = go.Bar(\n                x = np.array(\"Train Accuracy\"),\n                y = np.array(train_accuracy),\n                name = \"Train Accuracy\",\n                marker = dict(color ='rgba(1, 255, 128, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5))\n                    )\n    # create trace2 \n    trace2 = go.Bar(\n                x = np.array(\"Test Accuracy\"),\n                y = np.array(test_accuracy),\n                name = \"Test Accuracy\",\n                marker = dict(color ='rgba(1, 128, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5))\n                    )\n\n    data = [trace1,trace2]\n    layout = go.Layout(barmode = \"group\")\n    fig = go.Figure(data = data, layout = layout)\n    iplot(fig)","a34e4101":"logistic_regression(x_train, y_train, x_test, y_test, learning_rate = 1, num_iterations = 500)","43b8f901":"from sklearn.linear_model import LogisticRegression\n\nlog_reg_model = LogisticRegression()\nlog_reg_model.fit(x_train.T,y_train.T)\n\n#Print Train Accuracy\ntrain_accuracy_sk = (log_reg_model.score(x_train.T,y_train.T))*100\nprint(\"train accuracy {}\".format(log_reg_model.score(x_train.T,y_train.T)*100))\ntest_accuracy_sk = (log_reg_model.score(x_test.T,y_test.T))*100\nprint(\"test accuracy {}\".format(log_reg_model.score(x_test.T,y_test.T)*100))\n\n# create trace1 \ntrace1 = go.Bar(\n         x = np.array(\"Train Accuracy\"),\n         y = np.array(train_accuracy_sk),\n         name = \"Train Accuracy\",\n         marker = dict(color ='rgba(255, 77, 77, 1)',\n         line=dict(color='rgb(0,0,0)',width=1.5))\n                    )\n    # create trace2 \ntrace2 = go.Bar(\n         x = np.array(\"Test Accuracy\"),\n         y = np.array(test_accuracy_sk),\n         name = \"Test Accuracy\",\n         marker = dict(color ='rgba(36, 255, 222, 1)',\n         line=dict(color='rgb(0,0,0)',width=1.5))\n                    )\n\ndata = [trace1,trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1aa16d83":"y_pred = log_reg_model.predict(x_test.T)\ny_pred","d4356eed":"y_pred = log_reg_model.predict(x_test.T)\ny_true = y_test.T\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(cm, annot=True, linewidth=0.5, fmt=\".0f\",  cmap='RdPu', ax = ax)\nplt.xlabel = (\"y_pred\")\nplt.ylabe = (\"y_true\")\nplt.show()","63bd92f4":"### Sigmoid Function Method","da7a6e49":"#### Updating Weight and Bias\n\n* alpha = learning rate\n* J: cost function\n* w: weight\n* b: bias\n\n* Update equation is this. It says that there is a cost function(takes weight and bias). Take derivative of cost function according to weight and bias. Then multiply it with  \u03b1 learning rate. Then update weight. (In order to explain I ignore bias but these all steps will be applied for bias)\n\n<a href=\"http:\/\/imgbb.com\/\"><img src=\"http:\/\/image.ibb.co\/hYTTJH\/8.jpg\"><\/a>\n\n* Learning rate is also called hyperparameter that need to be chosen and tuned.","319f1b0b":"### Confusion Matrix","cde25950":"* The accuracies are different from what we find. Because logistic regression method use a lot of different feature(parameters) that we do not use like different optimization parameters or regularization.\n","f11a9dff":"# Logistic Regression\n* When we talk about binary classification( 0 and 1 outputs) what comes to mind first is logistic regression.","62dddf32":"#### Mathematical expression of log loss(error) function is that: <br><br>\n<a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/image.ibb.co\/eC0JCK\/duzeltme.jpg\" ><\/a>\n* It says that if you make wrong prediction, loss(error) becomes big. ","15d8f301":"* I am not going to explain each parameter of logistic regression in sklear but if you want you can read from there http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html","a3d5b9ca":"# Logistic Regression with Scikit-Learn ","5f9ad020":"<a id=\"9\"><\/a> <br>\n# INTRODUCTION\n* In this kernel, we will learn Logistic Regression.<br>\n#### Content:\n  * Initialize parameters weight and bias\n  * Forward propagation\n  * Loss function\n  * Cost function\n  * Backward propagation (gradient descent)\n  * Prediction with learnt parameters weight and bias\n  * Logistic regression with sklearn","9265dd09":"### Initializing Parameters(weights and bias) Method","8c044660":"* Now lets look at computation graph of logistic regression<br><br>\n<a href=\"http:\/\/ibb.co\/c574qx\"><img src=\"http:\/\/preview.ibb.co\/cxP63H\/5.jpg\"><\/a>\n<br><br>\n* Parameters are weight and bias.  \n* Weights: coefficients of each pixels\n* Bias: intercept\n* z = (w.t)x + b  => z equals to (transpose of weights times input x) + bias \n* In an other saying => z = b + px1*w1 + px2*w2 + ... + px4096*w4096\n* y_head = sigmoid(z)\n* Sigmoid function makes z between zero and one so that is probability. \n    Parameters to be found are weights and bias\n* Initial values of weight and bias parameters can be chosen arbitrarily\n* For every iteration, we are going to calculate loss function\n* Sum of the loss function will be our cost function\n* We are going to update weight and bias parameters using derivative of cost function and a learning rate\n* Learning rate and number of iteration(we will learn when we test our data) are hyperparameter that are chosen randomly and tuned.\n* After many iteratios, the cost will be minimized and we will obtain final weight and bias parameters to be used (our machine will learn them).\n* Using these final weight and bias parameters we are going to predict a given test data","38baf25d":"* Normalization Formula = (x - min(x))\/(max(x)-min(x))","5e60c683":"# Conclusion\n* If you like it, please upvote :)\n* If you have any question, I will be appreciate to hear it.","d81312ee":"### Updating(Learning) Parameters Method","c62a2f6a":" ### Prediction Method","fafef793":"### Logistic Regression Method","c250df51":"### Clean and Normalization Data","f8b3dba6":"#### Derivatives of cost function weight and bias\n\n$$ \\frac{\\partial J}{\\partial w} = \\frac{1}{m}x(  y_head - y)^T$$\n$$ \\frac{\\partial J}{\\partial b} = \\frac{1}{m} \\sum_{i=1}^m (y_head-y)$$","6e78c76d":"<a id=\"7\"><\/a> <br>\n####  Optimization Algorithm with Gradient Descent\n* Well, now we know what is our cost that is error.\n* Therefore, we need to decrease cost because as we know if cost is high it means that we make wrong prediction.\n* Lets think first step, every thing starts with initializing weights and bias. Therefore cost is dependent with them.\n* In order to decrease cost, we need to update weights and bias.\n* In other words, our model needs to learn the parameters weights and bias that minimize cost function. This technique is called gradient descent.\n* Lets make an example:\n     * We have w = 5 and bias = 0 (so ignore bias for now). Then we make forward propagation and our cost function is 1.5.\n<a href=\"http:\/\/imgbb.com\/\"><img src=\"http:\/\/image.ibb.co\/dAaYJH\/7.jpg\"><\/a>\n* As you can see from graph, we are not at minimum point of cost function. Therefore we need to go through minimum cost.","47903917":"### Label Encoding","9649719b":"### Train-Test Split Data","9e7b1ddc":"### Forward and Backward Propagation Method"}}