{"cell_type":{"46912b56":"code","4940453f":"code","a9947d22":"code","9ad88df5":"code","7818693b":"code","9a85a4dc":"code","eed3c854":"code","21c50243":"code","868de161":"code","b3afcf9e":"code","1def56fc":"code","d46bbd70":"code","ec7450e8":"code","8443ecc4":"code","3d2297fe":"code","46e5b5f3":"code","eaa4c579":"code","c8ffbc8f":"code","3da1df76":"code","2f6e0463":"code","2ee01322":"code","9e853eda":"code","fbc6f9cf":"code","f30ba65b":"code","f9c6d1b0":"code","21f47dd1":"code","c2039218":"code","8b87ee8a":"code","2e2da03b":"code","8e973398":"code","ee554576":"code","767792e3":"code","3c315a06":"code","3fd0a215":"code","dd87d005":"code","2dec88fa":"code","473962ac":"code","4af70f4e":"code","67d93760":"code","b012e42d":"code","36ce17d7":"code","4c3d4257":"code","a1132ba1":"code","4701cb02":"code","9029e3a0":"code","9b3faca0":"code","cca678c4":"code","b39508fc":"code","dec74c4f":"code","77f3cec4":"code","82552294":"code","9fcd975b":"code","f60e6191":"code","831e1444":"code","2baa1a2e":"code","06ce9813":"code","c535f1f4":"code","7c5cb189":"code","7c004385":"code","f8abbe1d":"code","150edc74":"code","2021ac80":"code","828ea4a2":"code","619454f7":"code","54436ece":"code","369f7a78":"code","48836ff0":"code","875b6d43":"code","0d3f0fa8":"code","6969434f":"code","b3d7615c":"code","fa7d006d":"code","b70e6554":"code","2794d7dc":"code","e01ac7d5":"code","9f4d155d":"code","99c3a370":"code","a3148c30":"code","9af03c11":"code","1467d1b0":"code","7171469d":"code","6bfdf69d":"code","3492d7be":"code","168ed06a":"code","922b6692":"code","f36ea4ab":"code","ce3afe51":"code","be75f8c9":"code","c20009e6":"code","c26aba33":"code","2b4de43e":"code","69045784":"code","c3d6e478":"code","929500e4":"code","8b756a35":"code","f195ffd3":"code","5acb0fe9":"code","4736f6b2":"code","889cead7":"code","b9acdcbf":"code","826fc7d6":"code","4c870788":"code","d853d17e":"code","5e41f510":"code","112e404d":"code","004e37b9":"code","7d3e5391":"code","ff4a247f":"code","3de40976":"code","d4a1a166":"code","92040b86":"code","ab4da6e1":"code","a5665071":"code","ea1280b8":"code","fc1a79d2":"code","ba38024b":"markdown","1da44732":"markdown","2ebc2167":"markdown","1851142b":"markdown","4e7e151a":"markdown","dcf8b045":"markdown","09819b9b":"markdown","ec85454b":"markdown","a636f76c":"markdown","6c87a4aa":"markdown","bf29347d":"markdown","da95e99f":"markdown","78f3d16f":"markdown","87c123fc":"markdown","458e62a6":"markdown","2ad849db":"markdown","105ef8f6":"markdown","0de99d03":"markdown","6663eaff":"markdown","48985798":"markdown","266aa132":"markdown","dbd8e3ec":"markdown","d2e6c814":"markdown","7e1ba4c5":"markdown","d23a4173":"markdown","8a8c9eda":"markdown","b486ca00":"markdown","0a90b64c":"markdown","dad484ff":"markdown","29784d46":"markdown","75f11091":"markdown","c140e310":"markdown","6ed3133d":"markdown","5e070a43":"markdown","bd7f66ca":"markdown","6085269e":"markdown","ee6632f5":"markdown","cdbc0bca":"markdown","24953564":"markdown","67310a29":"markdown"},"source":{"46912b56":"! pip install wget\n\n# Data Processing\nimport numpy as np\nimport pandas as pd\nimport wget\nfrom datetime import datetime, timedelta\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport folium\n%matplotlib inline\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display, HTML\n\n# set formatting\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n\nprint(\"Setup Complete\")","4940453f":"yesterday = datetime.today() - timedelta(days=1)\nyesterday = yesterday.strftime('%m-%d-%Y')","a9947d22":"yesterday","9ad88df5":"# url of the raw csv dataset\nurls = [\n    'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv',\n    'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv',\n    'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv',\n    f'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/{yesterday}.csv'\n]\n[wget.download(url) for url in urls]","7818693b":"confirmed_df = pd.read_csv(r'time_series_covid19_confirmed_global.csv')\ndeath_df = pd.read_csv(r'time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv(r'time_series_covid19_recovered_global.csv')\ndf = pd.read_csv(f'{yesterday}.csv')","9a85a4dc":"df.head()","eed3c854":"confirmed_df.head()","21c50243":"dates = confirmed_df.columns[4:]","868de161":"confirmed_df_long = confirmed_df.melt(\n    id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n    value_vars=dates, \n    var_name='Date', \n    value_name='Confirmed'\n)\n\ndeath_df_long = death_df.melt(\n    id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n    value_vars=dates, \n    var_name='Date', \n    value_name='Deaths'\n)\n\nrecovered_df_long = recovered_df.melt(\n    id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n    value_vars=dates, \n    var_name='Date', \n    value_name='Recovered'\n)","b3afcf9e":"recovered_df_long","1def56fc":"confirmed_df_long","d46bbd70":"recovered_df_long = recovered_df_long[recovered_df_long['Country\/Region']!='Canada']","ec7450e8":"# Merging confirmed_df_long and death_df_long\nfull_table = confirmed_df_long.merge(\n  right=death_df_long, \n  how='left',\n  on=['Province\/State', 'Country\/Region', 'Date', 'Lat', 'Long']\n)","8443ecc4":"# Merging full_table and recovered_df_long\nfull_table = full_table.merge(\n  right=recovered_df_long, \n  how='left',\n  on=['Province\/State', 'Country\/Region', 'Date', 'Lat', 'Long']\n)","3d2297fe":"full_table.head()","46e5b5f3":"full_table['Date'] = pd.to_datetime(full_table['Date'])","eaa4c579":"full_table.isna().sum()","c8ffbc8f":"full_table['Recovered'] = full_table['Recovered'].fillna(0).astype(int)","3da1df76":"ship_rows = full_table['Province\/State'].str.contains('Grand Princess') | full_table['Province\/State'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('MS Zaandam')","2f6e0463":"ship_df = full_table[ship_rows]\nship_df.head()","2ee01322":"full_table = full_table[~(ship_rows)]","9e853eda":"full_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']","fbc6f9cf":"full_table.head()","f30ba65b":"full_grouped = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","f9c6d1b0":"# new cases \ntemp = full_grouped.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# renaming columns\ntemp.columns = ['Country\/Region', 'Date', 'New cases', 'New deaths', 'New recovered']\n\n# merging new values\nfull_grouped = pd.merge(full_grouped, temp, on=['Country\/Region', 'Date'])\n\n# filling na with 0\nfull_grouped = full_grouped.fillna(0)\n\n# fixing data types\ncols = ['New cases', 'New deaths', 'New recovered']\nfull_grouped[cols] = full_grouped[cols].astype('int')\n\n# \nfull_grouped['New cases'] = full_grouped['New cases'].apply(lambda x: 0 if x<0 else x)","21f47dd1":"full_grouped.head()","c2039218":"temp = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\nworld_cases = temp.to_numpy()\ntemp.style.background_gradient(cmap='Pastel1')","8b87ee8a":"temp = full_grouped.groupby(['Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].max()\ntemp.sort_values('Confirmed', ascending=False).style.bar(subset=['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'],\n                                                         align = 'left', color='#d65f5f')","2e2da03b":"temp = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Deaths', 'Recovered', 'Active'],\n                 var_name='Case', value_name='Count')\n\nfig = px.line(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time')\nfig","8e973398":"fig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time')\nfig","ee554576":"fig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time')\nfig","767792e3":"temp = temp[~(temp.Case == 'Confirmed')]\nfig = px.pie(temp, values='Count', names='Case', title= f'Confirmed Cases: {world_cases.item(1)}')\nfig.update_traces(textinfo='percent+value+label')\nfig.show()","3c315a06":"temp = full_grouped\n# adding two more columns\ntemp['Mortality Rate'] = round(temp['Deaths']\/temp['Confirmed'], 3)\ntemp['Recovery Rate'] = round(temp['Recovered']\/temp['Confirmed'], 3)\n\ntemp.groupby(['Country\/Region'])['Mortality Rate', 'Recovery Rate' ].max().sort_values('Recovery Rate', ascending=False).style.background_gradient(cmap='Reds')","3fd0a215":"temp = full_grouped.groupby('Date').sum().reset_index()\n\ntemp['Mortality Rate'] = round(temp['Deaths']\/temp['Confirmed'], 3)\ntemp['Recovery Rate'] = round(temp['Recovered']\/temp['Confirmed'], 3)\n\ntemp = temp.melt(id_vars='Date', value_vars=['Mortality Rate', 'Recovery Rate'], \n                 var_name='Ratio', value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, \n              title='Recovery and Mortality Rate Over The Time')\nfig","dd87d005":"fig = px.bar(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, \n              title='Recovery and Mortality Rate Over The Time')\nfig","2dec88fa":"temp = full_grouped.groupby('Date')['New cases', 'New deaths', 'New recovered'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['New cases', 'New deaths', 'New recovered'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.line(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Daily Cases')\nfig","473962ac":"fig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Daily Cases')\nfig","4af70f4e":"fig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Daily Cases')\nfig","67d93760":"fig = px.pie(temp, values='Count', names='Case', title='Confirmed Cases')\nfig.update_traces(textinfo='percent+value+label')\nfig.show()","b012e42d":"temp = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Deaths', 'Recovered', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp['Log Count'] = np.log(temp['Count'])\n\nfig = px.line(temp, x=\"Date\", y=\"Log Count\", color='Case',\n             title='Log of Cases over time')\nfig","36ce17d7":"fig = px.area(temp, x=\"Date\", y=\"Log Count\", color='Case',\n             title='Log of Cases over time')\nfig","4c3d4257":"fig = px.bar(temp, x=\"Date\", y=\"Log Count\", color='Case',\n             title='Log of Cases over time')\nfig","a1132ba1":"fig = px.pie(temp, values='Log Count', names='Case', title='Confirmed Cases')\nfig.update_traces(textinfo='percent+label')\nfig.show()","4701cb02":"country_grouped = df.groupby('Country_Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","9029e3a0":"country_grouped['Active'] = country_grouped['Active'].astype(int)","9b3faca0":"country_grouped = country_grouped.sort_values('Confirmed', ascending=False)","cca678c4":"others_series = pd.Series(np.sum(country_grouped[10:]))\ncountry_grouped_others = country_grouped[:10]\ncountry_grouped_others = country_grouped_others.append(others_series, ignore_index=True)\ncountry_grouped_others.iloc[10,0] = 'Rest of the World'","b39508fc":"# Confirmed Cases\nfig = px.choropleth(country_grouped, locations=\"Country_Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country_Region\", range_color=[1,700000], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig","dec74c4f":"fig = px.pie(country_grouped_others, values='Confirmed', names='Country_Region', title='Confirmed Cases')\nfig.update_traces(textinfo='percent+label')\nfig.show()","77f3cec4":"fig = px.bar(country_grouped.head(20).sort_values('Confirmed', ascending=True), \n             x=\"Confirmed\", y=\"Country_Region\",title='Confirmed Cases Top 20 Countries', \n             text='Confirmed', orientation='h', \n             width=700, height=700)\nfig.update_traces(opacity=0.6)\nfig","82552294":"# Deaths\nfig = px.choropleth(country_grouped[country_grouped['Deaths']>0], \n                    locations=\"Country_Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country_Region\", \n                    range_color=[1,50000], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig","9fcd975b":"fig = px.pie(country_grouped_others.sort_values('Deaths', ascending=False), values='Deaths', names='Country_Region', title='Total Deaths')\nfig.update_traces(textinfo='percent+label')\nfig.show()","f60e6191":"fig = px.bar(country_grouped.sort_values('Deaths', ascending=False).head(20).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"Country_Region\", title='Total Deaths Top 20 Countries', text='Deaths', orientation='h', \n             width=700, height=700)\nfig.update_traces(opacity=0.6)\nfig","831e1444":"# Recoveris\nfig = px.choropleth(country_grouped[country_grouped['Recovered']>0], \n                    locations=\"Country_Region\", locationmode='country names',\n                    color=\"Recovered\", hover_name=\"Country_Region\", \n                    range_color=[1,50000], color_continuous_scale=\"agsunset\",\n                    title='Countries Recovered Cases')\nfig","2baa1a2e":"fig = px.pie(country_grouped_others.sort_values('Recovered', ascending=False), values='Recovered', names='Country_Region', title='Total Recovered')\nfig.update_traces(textinfo='percent+label')\nfig.show()","06ce9813":"fig = px.bar(country_grouped.sort_values('Recovered', ascending=False).head(20).sort_values('Recovered', ascending=True), \n             x=\"Recovered\", y=\"Country_Region\", title='Total Recovered Top 20 Countries', text='Recovered', orientation='h', \n             width=700, height=700)\nfig.update_traces(opacity=0.6)\nfig","c535f1f4":"# Active\nfig = px.choropleth(country_grouped[country_grouped['Active']>0], \n                    locations=\"Country_Region\", locationmode='country names',\n                    color=\"Active\", hover_name=\"Country_Region\", \n                    range_color=[1,50000], color_continuous_scale=\"agsunset\",\n                    title='Countries Active Cases')\nfig","7c5cb189":"fig = px.pie(country_grouped_others.sort_values('Active', ascending=False), values='Active', names='Country_Region', title='Total Active Cases')\nfig.update_traces(textinfo='percent+label')\nfig.show()","7c004385":"fig = px.bar(country_grouped.sort_values('Active', ascending=False).head(20).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"Country_Region\", title='Top 20 Countries Active Cases', text='Active', orientation='h', \n             width=700, height=700)\nfig.update_traces(opacity=0.6)\nfig","f8abbe1d":"import altair as alt\n\ntop_countries = country_grouped['Country_Region'].head(10)\ntop_countries_data = full_grouped[full_grouped['Country\/Region'].isin(top_countries)]\n\ninterval = alt.selection_interval()\n\n\ncircle = alt.Chart(top_countries_data).mark_circle().encode(\n    x = 'monthdate(Date):O',\n    y = 'Country\/Region',\n    color = alt.condition(interval, 'Country\/Region', alt.value('lightgray')),\n    size = alt.Size('New cases:Q',\n            scale = alt.Scale(range = [0, 1000]),\n            legend = alt.Legend(title = 'Daily new cases')\n    )\n).properties(\n    width = 500,\n    height = 300,\n    selection = interval\n)\n\nbars = alt.Chart(top_countries_data).mark_bar().encode(\n    y = 'Country\/Region',\n    color = 'Country\/Region',\n    x = 'sum(New cases):Q'\n).properties(\n    width = 500\n).transform_filter(\n    interval\n)\n\ncircle & bars","150edc74":"# https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\nHTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","2021ac80":"def cdr_graph(df, region):\n    \"\"\"\n    Input:\n        df of type :\n            * Date: datetime64[ns]\n            * Country\/Region: object\n            * Confirmed: int64\n            * Deaths: int64\n            * Recovered: int64\n            * Active: int64\n            * New cases: int64\n            * New deaths: int64\n            * New recovered: int64\n            * Mortality Rate: float64\n            * Recovery Rate: float64<br>\n            dtype: object\n        region of df: String\n    return:\n        line, area, bar Graphs of ['Confirmed', 'Deaths', 'Recovered', 'Active'] cases \n\n    \"\"\"\n    temp = df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n    temp = temp.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Deaths', 'Recovered', 'Active'],\n                 var_name='Case', value_name='Count')\n\n    line = px.line(temp, x=\"Date\", y=\"Count\", color='Case',\n             title=f'{region} Cases over time')\n    area = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title=f'{region} Cases over time')\n    bar = px.bar(temp, x=\"Date\", y=\"Count\", color='Case',\n             title=f'{region} Cases over time')\n    temp = temp[~(temp.Case == 'Confirmed')]\n    pie = px.pie(temp, values='Count', names='Case', title='Confirmed Cases')\n    pie.update_traces(textinfo='percent+label')\n    \n    display(line)\n    display(area)\n    display(bar)\n    display(pie)\n","828ea4a2":"def mr_graph(df, region):\n    \"\"\"\n    Input:\n        df of type :\n            * Date: datetime64[ns]\n            * Country\/Region: object\n            * Confirmed: int64\n            * Deaths: int64\n            * Recovered: int64\n            * Active: int64\n            * New cases: int64\n            * New deaths: int64\n            * New recovered: int64\n            * Mortality Rate: float64\n            * Recovery Rate: float64<br>\n            dtype: object\n        region of df: String\n    return:\n        line, bar Graphs of ['Mortality Rate', 'Recovery Rate'] cases \n\n    \"\"\"\n    temp = df.groupby('Date').sum().reset_index()\n\n    temp['Mortality Rate'] = round(temp['Deaths']\/temp['Confirmed'], 3)\n    temp['Recovery Rate'] = round(temp['Recovered']\/temp['Confirmed'], 3)\n\n    temp = temp.melt(id_vars='Date', value_vars=['Mortality Rate', 'Recovery Rate'], \n                     var_name='Ratio', value_name='Value')\n\n    line = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, \n                  title=f'Recovery and Mortality Rate of {region} Over The Time')\n    bar = px.bar(temp, x=\"Date\", y=\"Value\", color='Ratio', \n                 title=f'Recovery and Mortality of {region} Rate Over The Time')\n    display(line)\n    display(bar)\n","619454f7":"def daily_graph(df, region):\n    \"\"\"\n    Input:\n        df of type :\n            * Date: datetime64[ns]\n            * Country\/Region: object\n            * Confirmed: int64\n            * Deaths: int64\n            * Recovered: int64\n            * Active: int64\n            * New cases: int64\n            * New deaths: int64\n            * New recovered: int64\n            * Mortality Rate: float64\n            * Recovery Rate: float64<br>\n            dtype: object\n        region of df: String\n    return:\n        line, area, bar Graphs of ['New cases', 'New deaths', 'New recovered'] cases \n\n    \"\"\"\n    temp = df.groupby('Date')['New cases', 'New deaths', 'New recovered'].sum().reset_index()\n    temp = temp.melt(id_vars=\"Date\", value_vars=['New cases', 'New deaths', 'New recovered'],\n                     var_name='Case', value_name='Count')\n\n    line = px.line(temp, x=\"Date\", y=\"Count\", color='Case', title=f'{region} Daily Cases')\n    area = px.area(temp, x=\"Date\", y=\"Count\", color='Case', title=f'{region} Daily Cases')\n    bar = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', title=f'{region} Daily Cases')\n    pie = px.pie(temp, values='Count', names='Case', title='Confirmed Cases')\n    pie.update_traces(textinfo='percent+label')\n    \n    display(line)\n    display(area)\n    display(bar)\n    display(pie)","54436ece":"india_data = full_grouped[full_grouped['Country\/Region'] == 'India']","369f7a78":"HTML('<img src = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/95\/COVID-19_India_Total_Cases_Animated_Map.gif\" height = \"700\", width = \"500\">')","48836ff0":"cdr_graph(india_data, 'India')","875b6d43":"mr_graph(india_data, 'India')","0d3f0fa8":"daily_graph(india_data, 'India')","6969434f":"# import Packages for Prediction\n!pip install pmdarima\nfrom pmdarima.arima import auto_arima\nfrom sklearn.metrics import mean_squared_error\nfrom datetime import timedelta\nfrom fbprophet import Prophet","b3d7615c":"# change Date column name\nfull_grouped = full_grouped.rename(columns = {'Date': 'ds'})\n\n# Group data\ndf_group = full_grouped.groupby(by = 'ds')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\n\n# change index to datetime\ndf_group.index = pd.to_datetime(df_group.index)\n\n# Set frequncy of time series\ndf_group = df_group.asfreq(freq = '1D')\n\n# Sort the values\ndf_group = df_group.sort_index(ascending = True)\n\n# Fill NA values with zero\ndf_group = df_group.fillna(value = 0)\n\ndf_group = df_group.rename(columns = {'Date': 'ds'})\n\n# Show the end of th data\ndisplay(df_group.tail())\ndisplay(df_group.head())","fa7d006d":"model_scores=[]","b70e6554":"model_train = df_group.iloc[:int(df_group.shape[0]*0.95)]\nvalid = df_group.iloc[int(df_group.shape[0]*0.95):]\ny_pred = valid.copy()\nmodel_scores=[]","2794d7dc":"model_ar = auto_arima(model_train[\"Confirmed\"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=5,max_q=0,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_ar.fit(model_train[\"Confirmed\"])","e01ac7d5":"prediction_ar=model_ar.predict(len(valid))\ny_pred[\"AR Model Prediction\"]=prediction_ar","9f4d155d":"model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"AR Model Prediction\"])))\nprint(\"Root Mean Square Error for AR Model: \",np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"AR Model Prediction\"])))","99c3a370":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=model_train.index, y=model_train[\"Confirmed\"],\n                    mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=valid.index, y=valid[\"Confirmed\"],\n                    mode='lines+markers',name=\"Validation Data for Confirmed Cases\",))\nfig.add_trace(go.Scatter(x=valid.index, y=y_pred[\"AR Model Prediction\"],\n                    mode='lines+markers',name=\"Prediction of Confirmed Cases\",))\nfig.update_layout(title=\"Confirmed Cases AR Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\")\nfig.show()","a3148c30":"AR_model_new_prediction=[]\nnew_date=[]\n# predicting next 20 days\nfor i in range(0,21):\n    new_date.append(df_group.index[-1]+timedelta(days=i))\n    AR_model_new_prediction.append(model_ar.predict(len(valid)+i)[-1])","9af03c11":"pd.options.display.float_format = '{:.3f}'.format\nmodel_predictions=pd.DataFrame(zip(new_date,AR_model_new_prediction),\n                               columns=['Dates', 'AR_model_new_prediction'])\nmodel_predictions.head()","1467d1b0":"model_train = df_group.iloc[:int(df_group.shape[0]*0.95)]\nvalid = df_group.iloc[int(df_group.shape[0]*0.95):]\ny_pred = valid.copy()","7171469d":"model_ma= auto_arima(model_train[\"Confirmed\"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=0,max_q=5,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_ma.fit(model_train[\"Confirmed\"])","6bfdf69d":"prediction_ma=model_ma.predict(len(valid))\ny_pred[\"MA Model Prediction\"]=prediction_ma","3492d7be":"model_scores.append(np.sqrt(mean_squared_error(valid[\"Confirmed\"],prediction_ma)))\nprint(\"Root Mean Square Error for MA Model: \",np.sqrt(mean_squared_error(valid[\"Confirmed\"],prediction_ma)))","168ed06a":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=model_train.index, y=model_train[\"Confirmed\"],\n                    mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=valid.index, y=valid[\"Confirmed\"],\n                    mode='lines+markers',name=\"Validation Data for Confirmed Cases\",))\nfig.add_trace(go.Scatter(x=valid.index, y=y_pred[\"MA Model Prediction\"],\n                    mode='lines+markers',name=\"Prediction for Confirmed Cases\",))\nfig.update_layout(title=\"Confirmed Cases MA Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\")\nfig.show()","922b6692":"MA_model_new_prediction=[]\nfor i in range(0, 21):\n    MA_model_new_prediction.append(model_ma.predict(len(valid)+i)[-1])\nmodel_predictions[\"MA Model Prediction\"]=MA_model_new_prediction\nmodel_predictions.head()","f36ea4ab":"model_train = df_group.iloc[:int(df_group.shape[0]*0.95)]\nvalid = df_group.iloc[int(df_group.shape[0]*0.95):]\ny_pred = valid.copy()","ce3afe51":"model_arima= auto_arima(model_train[\"Confirmed\"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=6,max_q=6,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_arima.fit(model_train[\"Confirmed\"])","be75f8c9":"prediction_arima=model_arima.predict(len(valid))\ny_pred[\"ARIMA Model Prediction\"]=prediction_arima","c20009e6":"model_scores.append(np.sqrt(mean_squared_error(valid[\"Confirmed\"],prediction_arima)))\nprint(\"Root Mean Square Error for ARIMA Model: \",np.sqrt(mean_squared_error(valid[\"Confirmed\"],prediction_arima)))","c26aba33":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=model_train.index, y=model_train[\"Confirmed\"],\n                    mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=valid.index, y=valid[\"Confirmed\"],\n                    mode='lines+markers',name=\"Validation Data for Confirmed Cases\",))\nfig.add_trace(go.Scatter(x=valid.index, y=y_pred[\"ARIMA Model Prediction\"],\n                    mode='lines+markers',name=\"Prediction for Confirmed Cases\",))\nfig.update_layout(title=\"Confirmed Cases ARIMA Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\")\nfig.show()","2b4de43e":"ARIMA_model_new_prediction=[]\nfor i in range(0, 21):\n    ARIMA_model_new_prediction.append(model_arima.predict(len(valid)+i)[-1])\nmodel_predictions[\"ARIMA Model Prediction\"]=ARIMA_model_new_prediction\nmodel_predictions.head()","69045784":"df_prophet = df_group[['Confirmed']]","c3d6e478":"df_prophet = df_prophet.reset_index()","929500e4":"df_prophet = df_prophet.rename(columns = {'ds': 'ds', 'Confirmed': 'y'})","8b756a35":"df_prophet['ds'] = pd.to_datetime(df_prophet['ds'])","f195ffd3":"m = Prophet()\nm.fit(df_prophet)","5acb0fe9":"future = m.make_future_dataframe(periods = 20)\nforecast = m.predict(future)","4736f6b2":"model_scores.append(np.sqrt(mean_squared_error(df_group[\"Confirmed\"],forecast['yhat'].head(df_group.shape[0]))))\nprint(\"Root Mean Squared Error for Prophet Model: \",np.sqrt(mean_squared_error(df_group[\"Confirmed\"],forecast['yhat'].head(df_group.shape[0]))))","889cead7":"figure = m.plot(forecast, xlabel = 'Date', ylabel = 'Confirmed Cases')","b9acdcbf":"figure2 = m.plot_components(forecast)","826fc7d6":"model_predictions[\"Prophet's Prediction\"]=list(forecast[\"yhat\"].tail(21))","4c870788":"model_predictions.head()","d853d17e":"model_names=['Auto Regressive Model (AR)', 'Moving Average Model (MA)', 'ARIMA Model', 'Facebook\\'s Prophet Model']","5e41f510":"model_summary=pd.DataFrame(zip(model_names,model_scores),columns=[\"Model Name\",\"Root Mean Squared Error\"]).sort_values([\"Root Mean Squared Error\"])","112e404d":"model_summary","004e37b9":"model_train = df_group.iloc[:int(df_group.shape[0]*0.95)]\nvalid = df_group.iloc[int(df_group.shape[0]*0.95):]\ny_pred = valid.copy()","7d3e5391":"model_arima_deaths= auto_arima(model_train[\"Recovered\"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=6,max_q=6,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_arima_deaths.fit(model_train[\"Recovered\"])","ff4a247f":"predictions_deaths=model_arima_deaths.predict(len(valid))\ny_pred[\"ARIMA Recovered Prediction\"]=predictions_deaths","3de40976":"print(\"Root Mean Square Error for ARIMA Model: \",np.sqrt(mean_squared_error(valid[\"Confirmed\"],prediction_arima)))","d4a1a166":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=model_train.index, y=model_train[\"Recovered\"],\n                    mode='lines+markers',name=\"Train Data for Recovered Cases\"))\nfig.add_trace(go.Scatter(x=valid.index, y=valid[\"Recovered\"],\n                    mode='lines+markers',name=\"Validation Data for Recovered Cases\",))\nfig.add_trace(go.Scatter(x=valid.index, y=y_pred[\"ARIMA Recovered Prediction\"],\n                    mode='lines+markers',name=\"Prediction for Recovered Cases\",))\nfig.update_layout(title=\"Recovered Cases ARIMA Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Recovered Cases\")\nfig.show()","92040b86":"model_train = df_group.iloc[:int(df_group.shape[0]*0.95)]\nvalid = df_group.iloc[int(df_group.shape[0]*0.95):]\ny_pred = valid.copy()","ab4da6e1":"model_arima_deaths= auto_arima(model_train[\"Deaths\"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=6,max_q=6,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_arima_deaths.fit(model_train[\"Deaths\"])","a5665071":"predictions_deaths=model_arima_deaths.predict(len(valid))\ny_pred[\"ARIMA Death Prediction\"]=predictions_deaths","ea1280b8":"print(\"Root Mean Square Error for ARIMA Model: \",np.sqrt(mean_squared_error(valid[\"Confirmed\"],prediction_arima)))","fc1a79d2":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=model_train.index, y=model_train[\"Deaths\"],\n                    mode='lines+markers',name=\"Train Data for Death Cases\"))\nfig.add_trace(go.Scatter(x=valid.index, y=valid[\"Deaths\"],\n                    mode='lines+markers',name=\"Validation Data for Death Cases\",))\nfig.add_trace(go.Scatter(x=valid.index, y=y_pred[\"ARIMA Death Prediction\"],\n                    mode='lines+markers',name=\"Prediction for Death Cases\",))\nfig.update_layout(title=\"Death Cases ARIMA Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Death Cases\")\nfig.show()","ba38024b":"Aggregating data into `Country\/Region` wise and groupthem by `Date` and `Country\/Region`","1da44732":"# Data Set Used\n[COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19)","2ebc2167":"## <a id = 'Prd'>3.3 Prediction of Recoveries, Deaths<\/a>\n[Go back to the main page](#main)","1851142b":"### <a id = 'Arimad'>3.3.2 ARIMA for Deaths<\/a>\n[Go back to the main page](#main)","4e7e151a":"### <a id = 'Arm'>3.2.1 AR Model<\/a>\n[Go back to the main page](#main)","dcf8b045":"# <a id = 'Dav'>2. Data Analysis and Visualization<\/a>\n[Go back to the main page](#main)","09819b9b":"Apart from missing values, there are COVID-19 cases reported from 3 cruise ships: \n* Grand Princess \n* Diamond Princess \n* MS Zaandam\n\nThese data need to be extracted and treated differently due to Province\/State and Country\/Region mismatch over time.","ec85454b":"### <a id = 'Tie'>2.6.1 Taking India as an Example<\/a>\n[Go back to the main page](#main)","a636f76c":"Their are `NaN` values in *Provision\/State* since many countries only report country wise but there are `3648 NaNs` in *Recovered*; replacing them with `0`. ","6c87a4aa":"### <a id = 'Arimam'>3.2.3 ARIMA Model<\/a>\n[Go back to the main page](#main)","bf29347d":"Adding day wise New Cases, New Deaths, New Recovered","da95e99f":"### <a id = 'Tcc'>2.5.1 Top 10 countries in term of Confirmed cases<\/a>\n[Go back to the main page](#main)\n","78f3d16f":"***Here we can see ARIMA Model gives the lowest RMSE***<br>\n*Therefore we can use it for prediction*","87c123fc":"By looking at raw data we see that Canada don't report recovered data Province\/state-wise but rather than country wise therefore we have to remove that","458e62a6":"## <a id = 'Pcw'>3.2 Predicting confirmed cases worldwide<\/a>\n[Go back to the main page](#main)","2ad849db":"### <a id = 'Ncadr'>2.2.1 Number of confirmed cases, active cases, deaths, recoveries<\/a>\n[Go back to the main page](#main)","105ef8f6":"## <a id = 'Wlcdr'>2.4 World Log of cases over time, log of death over time, log of corona recoveries over time<\/a>\n[Go back to the main page](#main)","0de99d03":"## <a id = 'Wdicdr'>2.3 World Daily Increases in confirmed cases, confirmed deaths, confirmed recoveries<\/a>\n[Go back to the main page](#main)","6663eaff":"### <a id = 'Arimar'>3.3.1 ARIMA for Recoveries<\/a>\n[Go back to the main page](#main)","48985798":"## <a id = 'Da'>1.3 Data Aggregation<\/a>\n[Go back to the main page](#main)","266aa132":"There are 3 tasks we would like to do:\n1. Converting Date from string to datetime\n2. Replacing missing value NaN\n3. Coronavirus cases reported from 3 cruise ships should be treated differently","dbd8e3ec":"### <a id = 'Fp'>3.2.4 Facebook Prophet<\/a>\n[Go back to the main page](#main)","d2e6c814":"Adding additional columns for :\n1. active cases : `active = confirmed \u2014 deaths \u2014 recovered`","7e1ba4c5":"## <a id = 'Wtcwtd'>2.1 World Total and Country wise Total Data<\/a>\n[Go back to the main page](#main)","d23a4173":"# <a id = 'P'>3. Prediction<\/a>\n[Go back to the main page](#main)","8a8c9eda":"***Similarly we can do for all other Countries***","b486ca00":"## <a id = 'Csg'>2.5 Country Specific Graphs<\/a>\n[Go back to the main page](#main)","0a90b64c":"## <a id = Mcdr>1.1 Merging Confirmed, Deaths and Recovered<\/a>\n[Go back to the main page](#main)","dad484ff":"# <a id='Dp'>1. Data Processing<\/a>\n[Go back to the main page](#main)","29784d46":"### <a id = 'Pvot'>2.5.2 Progression of Virus Over Time<\/a>\n[Go back to the main page](#main)","75f11091":"![Covid](https:\/\/media.giphy.com\/media\/Q66Otqclp5Xmzg2B8X\/giphy.gif)\n# What is corona virus?\n<p>\n    Corona viruses are a large family of viruses which may cause illness in animals or humans. In humans, several coronaviruses are known\nto cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS)\nand Severe Acute Respiratory Syndrome (SARS). The most recently discovered coronavirus causes coronavirus disease COVID-19.\n    <\/p>\n    \n# What is COVID-19?\n<p>\n    COVID-19 is the infectious disease caused by the most recently discovered corona virus. This new virus and disease were unknown\nbefore the outbreak began in Wuhan, China, in December 2019.\n    <\/p>\n","c140e310":"### <a id = 'Mam'>3.2.2 MA Model<\/a>\n[Go back to the main page](#main)","6ed3133d":"# COVID19: Processing, Visualization and Prediction\nIn This project we will be processing, Visualizing and Predicting Covid-19 cases by using publically available data of Cases around the world. Here we will be predicting Cases, Deaths and recoveries for the next **20 days**. The notebook is updated everytime after running with latest data ","5e070a43":"## <a id = 'Cscdr'>2.6 Country specific Cases, death, recoveries graph<\/a>\n[Go back to the main page](#main)","bd7f66ca":"## <a id = 'Wncadrmr'>2.2 World Number of confirmed cases, active cases, deaths, recoveries, mortality rate (CFR), and recovery rate<\/a>\n[Go back to the main page](#main)","6085269e":"## <a id = 'Dp'>3.1 Data processing<\/a>\n[Go back to the main page](#main)","ee6632f5":"##  <a id = 'Dc'>1.2 Data Cleaning<\/a>\n[Go back to the main page](#main)","cdbc0bca":"# <a id = 'Initial'>Initial Setup<\/a>","24953564":"### <a id = 'Rm'>2.2.2 Recovery and Mortality Rate<\/a>\n[Go back to the main page](#main)","67310a29":"\n## <a id='main'>Table of Contents<\/a>\n- [Initial Setup](#Initial)\n- [1. Data Processing](#Dp)\n    * [1.1 Merging Confirmed, Deaths and Recovered](#Mcdr)\n    * [1.2 Data Cleaning](#Dc)\n    * [1.3 Data Aggregation](#Da)\n- [2. Data Analysis and Visualization](#Dav)\n    * [2.1 World Total and Country wise Total Data](#Wtcwtd)\n    * [2.2 World Number of confirmed cases, active cases, deaths, recoveries, mortality rate (CFR), and recovery rate](#Wncadrmr)\n        * [2.2.1 Number of confirmed cases, active cases, deaths, recoveries](#Ncadr)\n        * [2.2.2 Recovery and Mortality Rate](#Rm)\n    * [2.3 World Daily Increases in confirmed cases, confirmed deaths, confirmed recoveries](#Wdicdr)\n    * [2.4 World Log of cases over time, log of death over time, log of corona recoveries over time](#Wlcdr)\n    * [2.5 Country Specific Graphs](#Csg)\n        * [2.5.1 Top 10 countries in term of Confirmed cases](#Tcc)\n        * [2.5.2 Progression of Virus Over Time](#Pvot)\n    * [2.6 Country specific Cases, death, recoveries graph](#Cscdr)\n        * [2.6.1 Taking India as an Example](#Tie)\n* [3. Prediction](#P)\n    * [3.1 Data processing](#Dp)\n    * [3.2 Predicting confirmed cases worldwide](#Pcw)\n        * [3.2.1 AR Model](#Arm)\n        * [3.2.2 MA Model](#Mam)\n        * [3.2.3 ARIMA Model](#Arimam)\n        * [3.2.4 Facebook Prophet](#Fp)\n    * [3.3 Prediction of Recoveries, Deaths](#Prd)\n        * [3.3.1 ARIMA for Recoveries](#Arimar)\n        * [3.3.1 ARIMA for Deaths](#Arimad)\n    \n    \n    \n    "}}