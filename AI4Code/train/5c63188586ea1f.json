{"cell_type":{"8e3b82fc":"code","4af6327d":"code","87d92b50":"code","657dee8a":"code","c66ee9a9":"code","50b58589":"code","d445540f":"code","f66574a3":"markdown","dc9f9e66":"markdown","b66b335a":"markdown","b7521aee":"markdown"},"source":{"8e3b82fc":"import tensorflow as TF\nimport tensorflow.keras as Keras\nimport numpy as Np\nimport pandas as Pd\nimport matplotlib.pyplot as Plt\nimport seaborn as Sns\n\nRawData = Keras.datasets.fashion_mnist\n(TrainData, TrainLabels), (TestData, TestLabels) = RawData.load_data()","4af6327d":"Products = ['T-Shirt', 'Trouser', 'PullOver', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\nTrainData.shape","87d92b50":"TrainData = TrainData\/250\nTestData = TestData\/250\nValidationData = Np.array(TrainData[50000:])\nTrainData = Np.array(TrainData[:50000])\nValidationLabels = Np.array(TrainLabels[50000:])\nTrainLabels = Np.array(TrainLabels[:50000])\nPlt.figure()\nPlt.imshow(TrainData[10])\nPlt.colorbar()\nPlt.grid(False)\nPlt.show()","657dee8a":"Plt.figure(figsize=(10,10))\nfor i in range(20):\n    Plt.subplot(5, 10, i+1)\n    Plt.xticks([])\n    Plt.yticks([])\n    Plt.grid(False)\n    Plt.imshow(TrainData[i], cmap=Plt.cm.binary)\n    Plt.xlabel(Products[TrainLabels[i]])\nPlt.show()","c66ee9a9":"Output_Size = 10\nHidden_Layer = 256\nBatch_Size = 32\nEpochs = 10\nEarly_stopping = TF.keras.callbacks.EarlyStopping(patience=2) #Parada temprana, podemos parametrizar el metodo con \"patience = Num\"\n\nModel = Keras.Sequential([\n    Keras.layers.Flatten(input_shape=(28,28)), #Trasforma el arreglo bi-dimensional a uno unimensional de 784 pixeles\n    Keras.layers.Dense(Hidden_Layer, activation='relu'),# 128 nodos\n    Keras.layers.Dense(Output_Size, activation='softmax')# capa de regreso con la probabilidad\n])\n\nModel.compile(\n    optimizer='Adam',\n    loss='SparseCategoricalCrossentropy',\n    metrics=['accuracy']\n)\n\nModel.fit(\n    x=TrainData,\n    y=TrainLabels,\n    batch_size= Batch_Size,\n    epochs= Epochs,\n    verbose=2,\n    validation_data=(ValidationData, ValidationLabels)\n)","50b58589":"test_loss, test_acc = Model.evaluate(TestData, TestLabels, verbose=2)\nprint('Test Accuracy: ', test_acc)\nIMG = Np.expand_dims(TestData[5], 0)\nHola = Model.predict(IMG)\n","d445540f":"Sns.set_style('dark', {'aces.facecolor': 'black'})\nFig, Ax = Plt.subplots(2,1, figsize=(15,15))\n\ndef Predecir(Num):\n    Img = Np.expand_dims(TestData[Num],0)\n    Prediction = Model.predict(Img)\n    Plt.grid(False)\n    Plt.xticks([])\n    Plt.yticks([])\n    Plt.title('Imagen de entrada', fontsize=40)\n    Plt.imshow(TestData[Num], cmap=Plt.cm.binary)\n    Plt.xlabel(Products[TestLabels[Num]], fontsize=30)\n    Plt.sca(Ax[0])\n    Plt.grid(False)\n    Plt.xticks(range(10))\n    Plt.yticks(Np.linspace(0,1,11))\n    Plt.title('Predicci\u00f3n', fontsize=40)\n    Plt.bar(Products, Prediction[0], color='Red')\n    Plt.sca(Ax[1])\n\n\nPredecir(9)","f66574a3":"## Preprocesamiento de datos","dc9f9e66":"## Predicciones","b66b335a":"# Clasificaci\u00f3n basica. Predecir una imagen de moda\n## Se utiliza una red neuronal basica para la clasificaci\u00f3n de imagenes como ropa, tenis y camisetas.\n## El dataset es exatraido de esta fuente: <a href='https:\/\/www.tensorflow.org\/tutorials\/keras\/classification?hl=es-419'>TensorFlow<\/a>","b7521aee":"## Construcci\u00f3n del modelo"}}