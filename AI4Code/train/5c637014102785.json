{"cell_type":{"60f5ed05":"code","9db382d0":"code","10ef105a":"code","f3301c6d":"code","0d943233":"code","96dc7e7d":"code","4a17f0a1":"code","432acf6f":"code","af90e7c4":"code","4e1cfba3":"code","1acd3942":"code","b47d0eb7":"code","368846c1":"code","4cb43463":"code","0e33dbcb":"code","eea6695f":"code","189b1ad5":"code","4b1be7cd":"code","1e22731a":"code","c3757529":"code","5513e91a":"code","5b7ffe0c":"code","03932656":"code","209580f7":"code","0100a47e":"code","0d6edfc2":"code","74bc1154":"code","f92b84e9":"code","0a23c4ad":"code","afb52ee9":"code","7805d5be":"code","c1c4e06c":"markdown","f7ae7318":"markdown","a3f4dd48":"markdown","c6873e25":"markdown","21782037":"markdown","4891d8c8":"markdown","9c49bf93":"markdown","1c8bceae":"markdown","fdb059e9":"markdown","d09a9ffb":"markdown","a94b4a88":"markdown","6bbf9109":"markdown","a34be974":"markdown","06eeffec":"markdown","12c8fea0":"markdown","ceaa4312":"markdown","55b484e3":"markdown"},"source":{"60f5ed05":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9db382d0":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport plotly\nimport plotly.express as px","10ef105a":"df = pd.read_csv('..\/input\/android-permission-dataset\/Android_Permission.csv')\ndf","f3301c6d":"df.columns","0d943233":"df.describe()","96dc7e7d":"df.shape","4a17f0a1":"def target_count(data):\n    trace = go.Bar( x = data['Class'].value_counts().values.tolist(), \n                    y = [1, 0], \n                    orientation = 'h', \n                    text=data['Class'].value_counts().values.tolist(), \n                    textfont=dict(size=15),\n                    textposition = 'auto',\n                    opacity = 0.8,marker=dict(\n                    color=['red', 'green'],\n                    line=dict(color='#000000',width=1.5)))\n\n    layout = dict(title = 'Count of Class (green = benign, red = malware)')\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig, filename=\"bar.html\")\n    \n\n#------------PERCENTAGE-------------------\ndef target_percent(data):\n    trace = go.Pie(labels = [1, 0], values = data['Class'].value_counts(), \n                   textfont=dict(size=15), opacity = 0.8,\n                   marker=dict(colors=['red', 'green'], \n                               line=dict(color='#000000', width=1.5)))\n\n\n    layout = dict(title = 'Distribution of Class')\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig, filename=\"piechart.html\")\n    ","432acf6f":"target_count(df)","af90e7c4":"target_percent(df)","4e1cfba3":"percent_null = df.isnull().mean().round(4) * 100","1acd3942":"trace = go.Bar(x = percent_null.index, y = percent_null.values ,opacity = 0.8, text = percent_null.values,  textposition = 'auto',marker=dict(color = '#7EC0EE',\n        line=dict(color='#000000',width=1.5)))\n\nlayout = dict(title =  \"Missing Values (count & %)\")\n\nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","b47d0eb7":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n\nnumeric_col = df.select_dtypes(include=numerics)","368846c1":"unique_numeric_col = numeric_col.loc[:, df.nunique() > 2]\nunique_numeric_col","4cb43463":"Rating = df['Rating']\nN_Ratings = df['Number of ratings']\nPrice = df['Price']\nDPC = df['Dangerous permissions count']\nSPC = df['Safe permissions count']\nClass = df['Class']\nplotgraph = sns.pairplot(pd.DataFrame(list(zip(Rating, N_Ratings, Price, DPC, SPC, Class)), \n                        columns=['Rating', 'Number of ratings', 'Price', 'Dangerous permissions count', 'Safe permissions count', 'Class']), \n                        hue='Class', palette=\"Set2\")","0e33dbcb":"unique_numeric_col_wc = pd.DataFrame(list(zip(Rating, N_Ratings, Price, DPC, SPC, Class)), \n                        columns=['Rating', 'Number of ratings', 'Price', 'Dangerous permissions count', 'Safe permissions count', 'Class'])","eea6695f":"plt.figure(figsize=(16,8))\np = sns.heatmap(unique_numeric_col_wc.corr(), annot=True, cmap=\"YlGnBu\")","189b1ad5":"# calculate mean\nmean = np.nanmean(df['Dangerous permissions count'].unique())\nmean","4b1be7cd":"df['Dangerous permissions count'].replace('nan', mean)","1e22731a":"g1 = go.Box(\n    y=(df['Dangerous permissions count'][df.Class==0]),\n    name = 'Benign',\n    marker = dict(\n        color = 'rgb(0,150,0)',\n    )\n)\ng2 = go.Box(\n    y=(df['Dangerous permissions count'][df.Class==1]),\n    name = 'Malware',\n    marker = dict(\n        color = 'rgb(150,0,0)',\n    )\n)\n\nlayout = go.Layout(\n    title = \"Dangerous Permissions Count\",\n    yaxis= {'title': 'Dangerous Permissions Count'}\n)\ndata = [g1, g2]\nplotly.offline.iplot({'data': data, 'layout': layout})","c3757529":"g1 = go.Box(\n    y=(df['Safe permissions count'][df.Class==0]),\n    name = 'Benign',\n    marker = dict(\n        color = 'rgb(0,150,0)',\n    )\n)\ng2 = go.Box(\n    y=(df['Safe permissions count'][df.Class==1]),\n    name = 'Malware',\n    marker = dict(\n        color = 'rgb(150,0,0)',\n    )\n)\n\nlayout = go.Layout(\n    title = \"Safe Permissions Count\",\n    yaxis= {'title': 'Safe Permissions Count'}\n)\ndata = [g1, g2]\nplotly.offline.iplot({'data': data, 'layout': layout})","5513e91a":"g1 = go.Box(\n    y=(df['Rating'][df.Class==0]),\n    name = 'Benign',\n    marker = dict(\n        color = 'rgb(0,150,0)',\n    )\n)\ng2 = go.Box(\n    y=(df['Rating'][df.Class==1]),\n    name = 'Malware',\n    marker = dict(\n        color = 'rgb(150,0,0)',\n    )\n)\nlayout = go.Layout(\n    title = \"Rating vs Class\",\n    yaxis= {'title': 'Ratings'}\n)\ndata = [g1, g2]\nplotly.offline.iplot({'data': data, 'layout': layout})\nprint(\"Mean Rating of Benign Class: \" + str(df['Rating'][df.Class==0].mean()))\nprint(\"Mean Rating of Malware Class: \" + str(df['Rating'][df.Class==1].mean()))","5b7ffe0c":"d = {'Price0_benign': [len(df[(df['Price']==0) & (df['Class']==0)])], \n     'Price0_malware': [len(df[(df['Price']==0) & (df['Class']==1)])],\n     'Price>0_benign': [len(df[(df['Price']>0) & (df['Class']==0)])],\n     'Price>0_malware': [len(df[(df['Price']>0) & (df['Class']==1)])]}\n\nprice_cls = pd.DataFrame(data=d)\nplt.figure(figsize=(16,8))\nsns.barplot(data=price_cls)","03932656":"cat_benign = df.groupby('Category')['Class'].apply(lambda x: (x==0).sum()).reset_index(name='Benign').sort_values('Benign', ascending=False)","209580f7":"plt.figure(figsize=(16,8))\nsns.barplot(y=\"Category\", x=\"Benign\", data=cat_benign)","0100a47e":"cat_malware = df.groupby('Category')['Class'].apply(lambda x: (x==1).sum()).reset_index(name='Malware').sort_values('Malware', ascending=False)","0d6edfc2":"plt.figure(figsize=(16,8))\nsns.barplot(y=\"Category\", x=\"Malware\", data=cat_malware)","74bc1154":"cat_all = pd.concat([cat_malware, cat_benign['Benign']], axis=1)","f92b84e9":"t1 = go.Bar(\n    y= cat_all['Malware'],\n    x= cat_all['Category'],\n    name='Malware',\n    marker=dict(color = 'rgb(150,0,0)')\n)\n\nt2 = go.Bar(\n    y= cat_all['Benign'],\n    x= cat_all['Category'],\n    name='Benign',\n    marker=dict(color = 'rgb(0,150,0)')\n)\n\ndata = [t1, t2]\nlayout = go.Layout(\n    title = 'Malware\/Benign',\n    barmode='stack',\n    xaxis = {'tickangle': -45},\n    yaxis = {'title': 'Malware\/Benign'}\n)\n\nfig = go.Figure(data=data, layout=layout)\n\nplotly.offline.iplot({'data': data, 'layout': layout})","0a23c4ad":"len(df['Package'].unique())","afb52ee9":"df.groupby('Package')['Class'].apply(lambda x: (x==0).sum()).reset_index(name='Benign').sort_values('Benign', ascending=False).head(20)","7805d5be":"df.groupby('Package')['Class'].apply(lambda x: (x==1).sum()).reset_index(name='Malware').sort_values('Malware', ascending=False).head(20)","c1c4e06c":"# Category and Package with most malware\/benign","f7ae7318":"#### Get all numerical columns","a3f4dd48":"#### Please upvote my notebook if you found this helpful. Thank you \ud83d\ude04","c6873e25":"# Correlation of Numeric Columns","21782037":"# Safe\/Dangerous Permissions Count and Class","4891d8c8":"# Class Distribution","9c49bf93":"#### Package with most benign","1c8bceae":"# Price and Class","fdb059e9":"#### Category with most malware","d09a9ffb":"#### Select columns with more than 2 unique values","a94b4a88":"#### Category with most benign","6bbf9109":"#### Check correlation","a34be974":"# Check NaN\/Missing values","06eeffec":"# Rating and Class","12c8fea0":"#### Package with most malware","ceaa4312":"#### replace nan value in Dangerous permissions count column with mean","55b484e3":"<h1 style=\"font-size:300%; font-family:monospace; background:#3CB371; color:white; text-align:center; border:10px solid ; padding:25px;\"> Android Permission Dataset<\/h1>"}}