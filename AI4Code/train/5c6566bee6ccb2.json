{"cell_type":{"71e850bf":"code","36b76d2e":"code","950199e3":"code","bf668ac3":"code","5cb83fbc":"code","11e23f1b":"code","e3bcca9e":"code","876562da":"code","2a463fb9":"code","7b1fb541":"code","92c9401b":"markdown","f458de4a":"markdown","96dcc26f":"markdown","dc431c1f":"markdown","1be63a20":"markdown","8fec81d8":"markdown","38e82e91":"markdown"},"source":{"71e850bf":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport os\nimport gc\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import roc_auc_score\n\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter('ignore')","36b76d2e":"N_SPLITS = 5\nN_ESTIMATORS = 5000\nEARLY_STOPPING_ROUNDS = 200\nVERBOSE = 500\nSEED = 2021","950199e3":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","bf668ac3":"INPUT = \"..\/input\/tabular-playground-series-oct-2021\/\"\n\ntrain = pd.read_csv(INPUT + \"train.csv\")\ntest = pd.read_csv(INPUT + \"test.csv\")\nsubmission = pd.read_csv(INPUT + \"sample_submission.csv\")\n\nfeatures = [col for col in test.columns if 'f' in col]\nTARGET = 'target'\n\ntarget = train[TARGET].copy()\ntrain = train.drop('target', axis=1)","5cb83fbc":"train.shape, test.shape","11e23f1b":"# lgb_params = {\n#     'objective': 'binary',\n#     'n_estimators': N_ESTIMATORS,\n#     'random_state': SEED,\n#     'learning_rate': 5e-3,\n#     'subsample': 0.6,\n#     'subsample_freq': 1,\n#     'colsample_bytree': 0.4,\n#     'reg_alpha': 10.0,\n#     'reg_lambda': 1e-1,\n#     'min_child_weight': 256,\n#     'min_child_samples': 20,\n# }","e3bcca9e":"lgb_params = {'objective': 'binary',\n               'boosting_type': 'gbdt',\n               'num_leaves': 62, \n               'max_depth': 512,\n               'learning_rate': 0.02,\n               'n_estimators': N_ESTIMATORS,\n               'reg_alpha': 29.5,\n               'reg_lambda': 94.1,\n               'random_state': SEED,\n               'bagging_seed': SEED,\n               'feature_fraction_seed': SEED,\n               'n_jobs': 4,\n               'subsample': 0.5, \n               'subsample_freq': 2, \n               'colsample_bytree': 0.41, \n               'min_child_samples': 117,\n               'min_child_weight': 426}","876562da":"lgb_oof = np.zeros(train.shape[0])\nlgb_pred = np.zeros(test.shape[0])\nlgb_importances = pd.DataFrame()\n\nskf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=target)):\n    print(f\"===== fold {fold} =====\")\n    X_train = train[features].iloc[trn_idx]\n    y_train = target.iloc[trn_idx]\n    X_valid = train[features].iloc[val_idx]\n    y_valid = target.iloc[val_idx]\n    X_test = test[features]\n    \n    start = time.time()\n    model = lgb.LGBMClassifier(**lgb_params)\n    model.fit(\n        X_train, \n        y_train,\n        eval_set=[(X_valid, y_valid)],\n        eval_metric='auc',\n        early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n        verbose=VERBOSE,\n    )\n    \n    fi_tmp = pd.DataFrame()\n    fi_tmp['feature'] = model.feature_name_\n    fi_tmp['importance'] = model.feature_importances_\n    fi_tmp['fold'] = fold\n    fi_tmp['seed'] = SEED\n    lgb_importances = lgb_importances.append(fi_tmp)\n\n    lgb_oof[val_idx] = model.predict_proba(X_valid)[:, -1]\n    lgb_pred += model.predict_proba(X_test)[:, -1] \/ N_SPLITS\n\n    elapsed = time.time() - start\n    auc = roc_auc_score(y_valid, lgb_oof[val_idx])\n    print(f\"fold {fold} - lgb auc: {auc:.6f}, elapsed time: {elapsed:.2f}sec\\n\")\n\nprint(f\"oof lgb roc = {roc_auc_score(target, lgb_oof)}\")\n\nnp.save(\"lgb_oof.npy\", lgb_oof)\nnp.save(\"lgb_pred.npy\", lgb_pred)","2a463fb9":"order = list(lgb_importances.groupby('feature').mean().sort_values('importance', ascending=False).index)\n\nfig = plt.figure(figsize=(16, 16), tight_layout=True)\nsns.barplot(x=\"importance\", y=\"feature\", data=lgb_importances.groupby('feature').mean().reset_index(), order=order)\nplt.title(\"LightGBM feature importances\")","7b1fb541":"submission[TARGET] = lgb_pred\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission","92c9401b":"# LGBMClassifier","f458de4a":"# Submission","96dcc26f":"### This notebook is based on [TPS Sep 2021 single LGBM](https:\/\/www.kaggle.com\/hiro5299834\/tps-sep-2021-single-lgbm)\n### Thank you","dc431c1f":"# Datasets","1be63a20":"# Feature importance","8fec81d8":"# Libraries","38e82e91":"# Parameters"}}