{"cell_type":{"a58dde3a":"code","1f6cf1bd":"code","969333a5":"code","4212f099":"code","b6ee8534":"code","c0fb0b47":"code","34b83da5":"code","6b5b0748":"code","6bd3a27d":"code","7bfc9a47":"code","11547f42":"code","52667cd4":"code","84876590":"code","69d76e65":"markdown","c9d8ddde":"markdown","3f2d2303":"markdown","57e15d11":"markdown","35f846e9":"markdown","e9ab6950":"markdown","3a7c8614":"markdown","86cae473":"markdown"},"source":{"a58dde3a":"import pandas as pd\nimport math\nimport scipy.stats as st\nfrom sklearn.preprocessing import MinMaxScaler","1f6cf1bd":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","969333a5":"df = pd.read_csv(\"\/kaggle\/input\/amazon-reviews\/amazon_reviews.csv\")","4212f099":"df.head()","b6ee8534":"par = df[\"overall\"].mean()\ndf[\"overall\"].mean()","c0fb0b47":"df[\"day_diff\"].describe([0.03, 0.05, 0.01, 0.25, 0.75, 0.90, 0.95, 0.99])","34b83da5":"df[\"day_diff_scaled\"] = MinMaxScaler(feature_range=(1,360)).fit(df[[\"day_diff\"]]).transform(df[[\"day_diff\"]])\ndf[\"day_diff_scaled\"] = df[\"day_diff_scaled\"].astype(int)\ndf.head()","6b5b0748":"tbwa = df.loc[df[\"day_diff_scaled\"] <= 30, \"overall\"].mean() * 28 \/ 100 + \\\ndf.loc[(df[\"day_diff_scaled\"] > 30) & (df[\"day_diff_scaled\"] <= 90), \"overall\"].mean() * 26 \/ 100 + \\\ndf.loc[(df[\"day_diff_scaled\"] > 90) & (df[\"day_diff_scaled\"] <= 180), \"overall\"].mean() * 24 \/ 100 + \\\ndf.loc[df[\"day_diff_scaled\"] > 180, \"overall\"].mean() * 22 \/ 100","6bd3a27d":"print(\"Time-Based Weighted Average Rating: \" + f'{tbwa:.2f}' + \"\\n\"\n      \"Average Rating: \" + f'{par:.2f}')","7bfc9a47":"df[\"helpful_no\"] = df[\"total_vote\"] - df[\"helpful_yes\"]\nup = df[\"helpful_yes\"].tolist()\ndown = df[\"helpful_no\"].tolist()\ncomments = pd.DataFrame({\"up\": up, \"down\": down})","11547f42":"def wilson_lower_bound(up, down, confidence=0.95):\n    n = up + down\n    if n == 0:\n        return 0\n    z = st.norm.ppf(1 - (1 - confidence) \/ 2)\n    phat = 1.0 * up \/ n\n    return (phat + z * z \/ (2 * n) - z * math.sqrt((phat * (1 - phat) + z * z \/ (4 * n)) \/ n)) \/ (1 + z * z \/ n)","52667cd4":"comments[\"wlb\"] = comments.apply(lambda x: wilson_lower_bound(x[\"up\"], x[\"down\"]), axis=1)\ndf[\"wilson_lower_bound\"] = comments[\"wlb\"]","84876590":"df_top_comments = df.sort_values(\"wilson_lower_bound\",ascending=False).head(20)\ndf_top_comments[[\"overall\", \"summary\", \"helpful_yes\", \"helpful_no\", \"wilson_lower_bound\"]]","69d76e65":"#### That means, we see the time-based-weighted average rating more than average rating. So it means, current ratings were mostly positive than before.","c9d8ddde":"#### Here is the list of top 20 comments.<br>As you can see also low ratings have a high place in our list. Because people find the comment useful and they click up vote.<br>If we take the line 3, we see the up votes(positive) 1568 pieces and down votes(negative) 126 pieces. That means, people find that comment useful and they think, that product deserves 1.0 rating.<br>For the compare let's take index number 1609 and 4302. So we see 7 up votes(positive) higher than 14 up votes(positive) because it has no down votes(negative) and 14 up votes(positive) is with 2 down(negative) votes, it means the down votes(negativ) takes the comment go down as I mentioned above.","3f2d2303":"#### *Description: The Dataset describes ratings and comments of one electronic device from Amazon.*\n##### *Columns of Dataset:*\n\n1. reviewerID: ID Number of Customer\n2. asin: ID Number of Product\n3. reviewer Name: Name of Customer\n4. helpful: Vote of comments (positive, negative)\n5. reviewText: comment\n6. overall: rating\n7. summary: summary of comment\n8. unixReviewTime: Date of comment, that created from Amazon\n9. reviewTime: Date of comment\n10. day_diff: Difference between date of Analyse and date of comment\n11. helpful_yes: Positive votes of comment (These are from another customers)\n12. total_vote: total votes\n\n##### *Firstly we will calculate the average rating and also time-based-weighted average rating. Then, we will see how the current comments effect the average rating.<br>At the end we will sort the comments with wilson lower bound score more accurately.*\n","57e15d11":"#### So, now we can make a time based weighted average rating. The idea is, that we are gonna put forward current comments and show the current rating.<br><br> What will we do? What is the time-based-weighted-average?<br><br> We have now all comments and ratings in one year. Day difference will be divided to 4 parts and also we are gonna give our weighted ratings as total of 1, like below:<br>(You can give your scores, it is completely subjective) <br><br> *within 1 month:* 0.28<br>*between 1 and 3 months:* 0.26<br>*between 3 and 6 months:* 0.24<br>*over than 6 months:* 0.22<br>","35f846e9":"#### Also we are gonna check the quantiles of day difference. Day difference is between the analysis date and the comment date. And we will see that there are already more than 3 months of comments below 3%. That's why we should edit the column \"day_diff\" with scaler, so that all comments are gonna be scaled in a year and name it as \"day_diff_scaled\".","e9ab6950":"#### First, we can take our average rating and save it for later.","3a7c8614":"#### Import the Dataset","86cae473":"#### Not finished! There is a sorting option and it is with Wilson Lower Bound Score.<br><br>Wilson lower bound score provides a way to sort a product based on positive and negative votes.<br>There are positive(helpful_yes) and negative(helpful_no) votes and we want to understand how popular the product will be across the all customers.<br>We can predict with %95 confidence, that means that we have a confidence interval and we use here the low limit.<br>To understanding well, if there are lots of negative votes despite the positive votes more than negatives, it will go down anyway. Because the importance is, less negative votes. Don't forget it. Votes are the evalution of comments. Now let's see how is the wilson lower bound sorting. "}}