{"cell_type":{"6d716c26":"code","e97e09cc":"code","f8788226":"code","bc6a0e82":"code","d28b3396":"code","874bc827":"code","3789b39a":"code","0c55b446":"code","2425a6cc":"code","4b7654cd":"code","8315a696":"code","cf18ff24":"code","0d80dbb8":"code","520db85b":"code","ba72ed88":"code","60acfe49":"code","abbca3ea":"code","088a639a":"code","6043f522":"code","3cb8bf95":"code","b2378656":"code","cd4568fd":"code","1c42b7e5":"code","86fd0d64":"code","6bda17b9":"code","4af1760a":"code","d73e24b7":"code","71d9dea3":"code","fa34fecc":"code","f24f8058":"code","b5c175e6":"code","ecd687de":"code","a60e8f8d":"code","045c9034":"code","658d94b6":"code","e7a743fd":"code","f980ff10":"code","a4b018fd":"code","4f0b2825":"code","20b36479":"code","8cd93cc2":"code","d0b3ec24":"code","2ac1781d":"code","9229da37":"code","5af2e146":"code","1ad52b0c":"code","516de4a8":"code","4a6fd033":"code","a6afd755":"code","d55af53f":"code","9b8e7db3":"code","1368f710":"code","0c541320":"code","0f745df7":"markdown","194d3e34":"markdown","6a45689a":"markdown","56fafd19":"markdown","cc0d6ee6":"markdown","c5f5a8b0":"markdown","0c04835b":"markdown","abe02e50":"markdown","8d8e8d2d":"markdown","6e30563b":"markdown","a8afd889":"markdown","46b8b1f2":"markdown","8d8fdc2d":"markdown"},"source":{"6d716c26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n#  For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.metrics import r2_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e97e09cc":"train = pd.read_csv('..\/input\/predict-the-powerkwh-produced-by-windmills\/dataset\/train.csv')\ntest = pd.read_csv('..\/input\/predict-the-powerkwh-produced-by-windmills\/dataset\/test.csv')","f8788226":"train.head()","bc6a0e82":"test.head()","d28b3396":"train.info()","874bc827":"test.info()","3789b39a":"train.describe()","0c55b446":"test.describe()","2425a6cc":"corr = train.corr()\nplt.figure(figsize=(20,10))\nmask = np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,mask=mask,annot=True)\nplt.show()","4b7654cd":"train.drop(['generator_temperature(\u00b0C)','windmill_body_temperature(\u00b0C)'],inplace=True,axis=1)\ntest.drop(['generator_temperature(\u00b0C)','windmill_body_temperature(\u00b0C)'],inplace=True,axis=1)","8315a696":"train.info()","cf18ff24":"test.info()","0d80dbb8":"train.isnull().sum()","520db85b":"test.isnull().sum()","ba72ed88":"sns.heatmap(train.isnull(),cbar=False,yticklabels=False,cmap = 'viridis')","60acfe49":"sns.heatmap(test.isnull(),cbar=False,yticklabels=False,cmap = 'viridis')","abbca3ea":"train['gearbox_temperature(\u00b0C)'].fillna(train['gearbox_temperature(\u00b0C)'].mean(),inplace=True)\ntrain['area_temperature(\u00b0C)'].fillna(train['area_temperature(\u00b0C)'].mean(),inplace=True)\ntrain['rotor_torque(N-m)'].fillna(train['rotor_torque(N-m)'].mean(),inplace=True)\ntrain['blade_length(m)'].fillna(train['blade_length(m)'].mean(),inplace=True)\ntrain['blade_breadth(m)'].fillna(train['blade_breadth(m)'].mean(),inplace=True)\ntrain['windmill_height(m)'].fillna(train['windmill_height(m)'].mean(),inplace=True)\ntrain['cloud_level'].fillna(train['cloud_level'].mode()[0],inplace=True)\ntrain['atmospheric_temperature(\u00b0C)'].fillna(train['atmospheric_temperature(\u00b0C)'].mean(),inplace=True)\ntrain['atmospheric_pressure(Pascal)'].fillna(train['atmospheric_pressure(Pascal)'].mean(),inplace=True)\ntrain['wind_speed(m\/s)'].fillna(train['wind_speed(m\/s)'].mean(),inplace=True)\ntrain['shaft_temperature(\u00b0C)'].fillna(train['shaft_temperature(\u00b0C)'].mean(),inplace=True)\ntrain['blades_angle(\u00b0)'].fillna(train['blades_angle(\u00b0)'].mean(),inplace=True)\ntrain['engine_temperature(\u00b0C)'].fillna(train['engine_temperature(\u00b0C)'].mean(),inplace=True)\ntrain['motor_torque(N-m)'].fillna(train['motor_torque(N-m)'].mean(),inplace=True)\ntrain['wind_direction(\u00b0)'].fillna(train['wind_direction(\u00b0)'].mean(),inplace=True)","088a639a":"test['gearbox_temperature(\u00b0C)'].fillna(test['gearbox_temperature(\u00b0C)'].mean(),inplace=True)\ntest['area_temperature(\u00b0C)'].fillna(test['area_temperature(\u00b0C)'].mean(),inplace=True)\ntest['rotor_torque(N-m)'].fillna(test['rotor_torque(N-m)'].mean(),inplace=True)\ntest['blade_length(m)'].fillna(test['blade_length(m)'].mean(),inplace=True)\ntest['blade_breadth(m)'].fillna(test['blade_breadth(m)'].mean(),inplace=True)\ntest['windmill_height(m)'].fillna(test['windmill_height(m)'].mean(),inplace=True)\ntest['cloud_level'].fillna(test['cloud_level'].mode()[0],inplace=True)\ntest['atmospheric_temperature(\u00b0C)'].fillna(test['atmospheric_temperature(\u00b0C)'].mean(),inplace=True)\ntest['atmospheric_pressure(Pascal)'].fillna(test['atmospheric_pressure(Pascal)'].mean(),inplace=True)\ntest['wind_speed(m\/s)'].fillna(test['wind_speed(m\/s)'].mean(),inplace=True)\ntest['shaft_temperature(\u00b0C)'].fillna(test['shaft_temperature(\u00b0C)'].mean(),inplace=True)\ntest['blades_angle(\u00b0)'].fillna(test['blades_angle(\u00b0)'].mean(),inplace=True)\ntest['engine_temperature(\u00b0C)'].fillna(test['engine_temperature(\u00b0C)'].mean(),inplace=True)\ntest['motor_torque(N-m)'].fillna(test['motor_torque(N-m)'].mean(),inplace=True)\ntest['wind_direction(\u00b0)'].fillna(test['wind_direction(\u00b0)'].mean(),inplace=True)","6043f522":"train.info()","3cb8bf95":"train.dropna(how='any',axis=0,inplace=True)","b2378656":"train.info()","cd4568fd":"test.info()","1c42b7e5":"train['cloud_level'].replace(['Extremely Low', 'Low', 'Medium'],[0, 1, 2],inplace=True)\ntest['cloud_level'].replace(['Extremely Low', 'Low', 'Medium'],[0, 1, 2],inplace=True)","86fd0d64":"train['turbine_status'].value_counts()","6bda17b9":"test['turbine_status'].value_counts()","4af1760a":"dummy = ['turbine_status']\ntrain_dummy = pd.get_dummies(train[dummy])\ntest_dummy = pd.get_dummies(test[dummy])","d73e24b7":"train_dummy","71d9dea3":"test_dummy","fa34fecc":"train = pd.concat([train,train_dummy],axis=1)\ntest = pd.concat([test,test_dummy],axis=1)","f24f8058":"train.info()","b5c175e6":"test.info()","ecd687de":"train[\"datetime\"] = pd.to_datetime(train[\"datetime\"])\ntest[\"datetime\"] = pd.to_datetime(test[\"datetime\"])\n\ntrain['dmonth'] = train['datetime'].dt.month\ntrain['dday'] = train['datetime'].dt.day\ntrain['ddayofweek'] = train['datetime'].dt.dayofweek\n\ntest['dmonth'] = test['datetime'].dt.month\ntest['dday'] = test['datetime'].dt.day\ntest['ddayofweek'] = test['datetime'].dt.dayofweek","a60e8f8d":"train.info()","045c9034":"test.info()","658d94b6":"X = train.drop(['tracking_id','datetime','windmill_generated_power(kW\/h)','turbine_status'],axis=1)\ny = train['windmill_generated_power(kW\/h)']","e7a743fd":"print(X.shape, y.shape)","f980ff10":"testData = test.drop(['tracking_id','datetime','turbine_status'],axis=1)","a4b018fd":"print(testData.shape)","4f0b2825":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)\ntestData = sc.transform(testData)","20b36479":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.8,random_state=0)\nprint(X_train.shape,y_train.shape)\nprint(X_test.shape,y_test.shape)","8cd93cc2":"from sklearn.tree import DecisionTreeRegressor\nregressor_dt = DecisionTreeRegressor(random_state = 42)\nregressor_dt.fit(X_train, y_train)","d0b3ec24":"y_train_pred_dt = regressor_dt.predict(X_train)\ny_test_pred_dt = regressor_dt.predict(X_test)","2ac1781d":"print(r2_score(y_true=y_train,y_pred=y_train_pred_dt))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred_dt))","9229da37":"from sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor(n_estimators=200, n_jobs=1, oob_score=True, random_state=42)\nregressor_rf.fit(X_train, y_train)","5af2e146":"y_train_pred_rf = regressor_rf.predict(X_train)\ny_test_pred_rf = regressor_rf.predict(X_test)","1ad52b0c":"print(r2_score(y_true=y_train,y_pred=y_train_pred_rf))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred_rf))","516de4a8":"from xgboost import XGBRegressor\nregressor_xg = XGBRegressor(n_estimators=1000, max_depth=8, booster='gbtree', n_jobs=1, learning_rate=0.1, reg_lambda=0.01, reg_alpha=0.2)\nregressor_xg.fit(X_train, y_train)","4a6fd033":"y_train_pred_xg = regressor_xg.predict(X_train)\ny_test_pred_xg = regressor_xg.predict(X_test)","a6afd755":"print(r2_score(y_true=y_train,y_pred=y_train_pred_xg))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred_xg))","d55af53f":"model = regressor_xg.predict(testData)","9b8e7db3":"model","1368f710":"model.shape","0c541320":"Ywrite=pd.DataFrame(model,columns=['windmill_generated_power(kW\/h)'])\nvar =pd.DataFrame(test[['tracking_id','datetime']])\ndataset_test_col = pd.concat([var,Ywrite], axis=1)\ndataset_test_col.to_csv(\"Prediction.csv\",index=False)","0f745df7":"### XGBoost Regression","194d3e34":"### Desicion Tree Regression","6a45689a":"## EDA and Data Preprocessing of the DataSet","56fafd19":"### Random Forest Regression","cc0d6ee6":"#### Converting the feature \"datetime\" into pandas datetime format","c5f5a8b0":"### Data Modelling","0c04835b":"**Splitting the dataSet**","abe02e50":"**For the model to be stable enough, we drop highly correlated features. So,\n\"motor_torque(N-m)\" and \"generator_temperature(\u00b0C)\" are highly correlated, so will be dropped from both the dataset.**","8d8e8d2d":"### Testing the model on the test dataSet and creating the submission file","6e30563b":"**Checking Missing Values in the DataSet**","a8afd889":"### Dealing with the Missing Values\n\n**Replacing the missing values by the mean**","46b8b1f2":"**Since \"turbine_status\" and \"cloud_level\" are categorical,<br>\nSo, we use Dummy Variable encoding for \"turbine_status\" and ordinally encode the \"cloud_level\"**","8d8fdc2d":"#### Plotting Correlation Matrix"}}