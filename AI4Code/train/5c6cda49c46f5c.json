{"cell_type":{"fa73a3dd":"code","50857074":"code","2030c9cd":"code","724c4cd3":"code","ab55376d":"code","518bdc05":"code","0e671c9b":"code","07429709":"code","a0acc02c":"code","285c50ca":"code","d627b720":"markdown","369c25e8":"markdown","f15019cb":"markdown","c1e0eb30":"markdown","a9ffb59c":"markdown","d85183e6":"markdown","6dcbe5b8":"markdown","396602bb":"markdown","0381aa94":"markdown"},"source":{"fa73a3dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50857074":"import pandas as pd\nimport numpy as np\nimport re\nimport sys\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom nltk.tokenize import TweetTokenizer\nfrom wordcloud import WordCloud\nfrom string import punctuation\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom textblob import TextBlob","2030c9cd":"tweets = pd.read_csv('\/kaggle\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv')","724c4cd3":"stop_nltk= stopwords.words(\"english\")\nstop_updated= stop_nltk+[\"https\",'t.co','...']\nlemm= WordNetLemmatizer()\ntweet_tok=  TweetTokenizer()\n\ndef clean_text(text):\n    tokens= tweet_tok.tokenize(text.lower())\n    tokens1 = [re.sub('^https:\/\/t.co\/[\\w]+','',tok) for tok in tokens]\n    tokens2 = [re.sub('^@[\\w]+','',tok) for tok in tokens1]\n    tokens3 = [re.sub('^#[\\w]+','',tok) for tok in tokens2]\n    tokens4 = [re.sub('[0-9]+','',tok) for tok in tokens3]\n    lemmed=[lemm.lemmatize(term) for term in tokens4 if term not in  stop_updated and term not in list(punctuation) and len(term)>2]\n    res=' '.join(lemmed)\n    return res","ab55376d":"tweets['Clean_Tweets']= tweets['text'].apply(clean_text)","518bdc05":"analyser= SentimentIntensityAnalyzer() \n\ndef get_vader_sentiment(sent):\n    return analyser.polarity_scores(sent)['compound']\n\ntweets['sent_vader']= tweets['Clean_Tweets'].apply(get_vader_sentiment)\n\nsent_pred=[]\nfor i in range(len(tweets['sent_vader'])):\n    if tweets['sent_vader'][i]>=0.05:\n        sent_pred.append('positive')\n    elif tweets['sent_vader'][i]<=-0.05:\n        sent_pred.append('negative')\n    else:\n        sent_pred.append('neutral')  \n\ntweets['sent_pred']= sent_pred","0e671c9b":"def get_textblob_sentiment(sent):\n    return TextBlob(sent).sentiment.polarity\n\n\ntweets['sent_TextBlob']= tweets['Clean_Tweets'].apply(get_textblob_sentiment)\n\nsent_pred=[]\nfor i in range(len(tweets['sent_TextBlob'])):\n    if tweets['sent_TextBlob'][i]>=0.05:\n        sent_pred.append('positive')\n    elif tweets['sent_TextBlob'][i]<=-0.05:\n        sent_pred.append('negative')\n    else:\n        sent_pred.append('neutral')  \n\ntweets['sent_predTextBlob']= sent_pred","07429709":"fig, axes = plt.subplots(1, 2, figsize=(16, 7), sharey=True)\nfig.suptitle('Percentage of Sentiment Distribution of Tweet')\n\n# TextBlob\nperc = pd.DataFrame((tweets['sent_predTextBlob'].value_counts()\/len(tweets))*100)\nperc.reset_index(inplace=True)\nperc.columns = ['Sentiment','Percentage']\naxes[0].pie(perc['Percentage'],\n        labels=perc['Sentiment'],\n        autopct='%1.1f%%',\n        colors=['steelblue','yellowgreen','crimson'])\naxes[0].set_title(\"TextBlob\")\n\n# VADER\nper = pd.DataFrame((tweets['sent_pred'].value_counts()\/len(tweets))*100)\nper.reset_index(inplace=True)\nper.columns = ['Sentiment','Percentage']\naxes[1].pie(perc['Percentage'],\n        labels=per['Sentiment'],\n        autopct='%1.1f%%',\n        colors=['steelblue','yellowgreen','crimson'])\naxes[1].set_title(\"VADER\")\nfig.show()","a0acc02c":"fig, axes = plt.subplots(1, 2, figsize=(16, 7), sharey=True)\nfig.suptitle('Favorites received based on Sentiment of Tweet')\n\n# TextBlob\na = pd.DataFrame(tweets.groupby(['sent_predTextBlob'])['favorites'].sum())\nsns.barplot(ax=axes[0], x=a.index, y=a['favorites'], palette= 'YlOrRd')\naxes[0].set_title(\"TextBlob\")\n\n# VADER\nb = pd.DataFrame(tweets.groupby(['sent_pred'])['favorites'].sum())\nsns.barplot(ax=axes[1], x=b.index, y=b['favorites'], palette= 'YlOrRd')\naxes[1].set_title(\"VADER\")\nfig.show()","285c50ca":"fig, axes = plt.subplots(1, 2, figsize=(16, 7), sharey=True)\nfig.suptitle('Retweets received based on Sentiment of Tweet')\n\n# TextBlob\na = pd.DataFrame(tweets.groupby(['sent_predTextBlob'])['retweets'].sum())\nsns.barplot(ax=axes[0], x=a.index, y=a['retweets'], palette= 'nipy_spectral')\naxes[0].set_title(\"TextBlob\")\n\n# VADER\nb = pd.DataFrame(tweets.groupby(['sent_pred'])['retweets'].sum())\nsns.barplot(ax=axes[1], x=b.index, y=b['retweets'], palette= 'nipy_spectral')\naxes[1].set_title(\"VADER\")\nfig.show()","d627b720":"## Favourites received based on Sentiment of Tweet","369c25e8":"## Cleaning the Tweets","f15019cb":"# Sentiment Analysis through VADER","c1e0eb30":"## Importing the Required Libraries","a9ffb59c":"## Conclusion","d85183e6":"# Sentiment Analysis through TextBlob","6dcbe5b8":"## Retweets based on Sentiment of Tweet","396602bb":"## Percentage of Tweets classified into each category","0381aa94":"![](http:\/\/)* TextBlob classifed 51.2% of Tweets to be Neutral sentiment, while, VADER classified 39.8% tweets to Neutral sentiment\n* TextBlob classified 39.8% Tweets as Positivie, while VADER classified 51.2% tweets as Postive sentiment\n* Both TextBlob & VADER classified 9.0% Tweets as Negative sentiment\n* Maximum Favorites are receieved by Neutral sentiment Tweets according to TextBlob, while according to VADER maximum Favorites are received by Positive sentiment Tweets\n* Both TextBlob & VADER reveal that Maximum Retweets are received by Neutral Sentiement Tweets\n"}}