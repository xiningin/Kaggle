{"cell_type":{"b0ec1c35":"code","4667e63a":"code","aabd69c2":"code","2a4dac9b":"code","10d2a0be":"code","4bcca352":"code","e774c5d7":"code","19d1f582":"code","89efa5e3":"code","83d914b5":"code","b3e1ffe5":"code","797bbed7":"code","76701daa":"code","48f70560":"code","ab570833":"code","1ae9718a":"code","2ab01019":"code","cef1e0d6":"code","136a7ca0":"code","eebe53e0":"code","65551c9b":"code","c1d1b5fc":"code","e9f805e4":"code","e19b6da1":"code","f77a6f6a":"code","5242c4e2":"code","068119c4":"code","4e5e05f5":"code","45b4b2bc":"code","99f72d65":"code","d5196acb":"code","5e784579":"code","bc1e794d":"code","68d09506":"code","23203248":"code","6b9c9eaa":"code","aff881bd":"code","358afa28":"code","526c0e4a":"code","78d3fce0":"code","94236da3":"code","70f860a7":"code","14b61646":"code","bf27f865":"code","e41395e1":"code","41ae53e0":"code","b10d9843":"code","24ab3b9a":"code","da1beb06":"code","30090455":"code","392c16a8":"code","0f29d46b":"code","cd8da579":"code","82c35971":"code","d81bd98c":"code","a80fd392":"code","f46c3ea6":"code","aa54775e":"code","92aa00c0":"code","43b5277b":"code","3344702d":"code","3371d759":"code","efb54ce0":"code","7f5fa4d3":"code","2747ce08":"code","a676cda0":"code","000d123a":"code","47a84583":"code","860882f8":"code","f2e3f1ad":"code","26c70171":"code","7c0d1ec3":"code","4b272710":"code","ac278474":"code","7c2c1c72":"code","2f0cf253":"code","8a7eceb1":"code","3de97115":"code","a676b277":"code","a0407e86":"code","59b300c7":"code","368de94e":"code","10b89548":"code","ed274e8a":"code","448e322a":"code","53ed3925":"code","820d8fa1":"code","6e687209":"code","9a062426":"code","55bba564":"code","0458520a":"code","eabcd27a":"code","a776714a":"code","5e144740":"code","73e407e7":"code","c4fc5a05":"code","052d9152":"code","5d1d8366":"code","c031de53":"code","9a9143ed":"code","7ec51ba8":"code","08e4f307":"code","f057a6cf":"code","2a894202":"code","ca20e192":"code","a296d650":"code","2213a5ce":"code","c0e7ca79":"code","68667e5a":"code","8244e634":"code","94c59acf":"code","189c3f26":"code","1daae372":"code","37fa0c6e":"code","8edf0860":"code","68ab8949":"code","9036d9ee":"code","df350346":"code","a005d9c4":"code","f1634ced":"code","f77eaa13":"code","ccc66776":"code","f4674259":"code","9432e9db":"code","ef7a9f54":"code","08515b4d":"code","bd4a733b":"code","39d706be":"code","cef853d1":"code","4ac3c79c":"code","62d3ccc1":"code","e5cba50a":"code","33690e2f":"code","b9ab9549":"code","124ce6e1":"code","7b8a21b4":"code","90c1d9fb":"code","594248ed":"code","bc842e55":"code","acfdbe71":"code","e445003b":"code","e7bc3aeb":"code","7927dfd7":"code","ca5d05cc":"code","c7ec8cb1":"code","f7b2bd62":"code","bfb1f7b8":"code","d7e185a2":"code","6defbe84":"code","3c0dfac7":"code","fdc10814":"code","ac4e5a45":"code","471e4696":"code","e37b2546":"code","dd087bac":"code","24118c44":"code","a25aea5a":"code","bd1efc89":"code","0156d789":"code","aa455f21":"code","7ffab559":"code","82457afa":"code","f930f046":"code","062dd37e":"code","7be8bcac":"code","7bef2395":"code","0c9a14da":"code","b571982f":"code","b38e662f":"code","07d52ace":"code","355fe15c":"code","9ef1f9b2":"code","25dc4b68":"code","54051e03":"code","6b3ef1bc":"code","42a64d6d":"code","a8fedbb4":"code","73b779bc":"code","32125628":"code","007d4e70":"code","1a28ea58":"code","30ec7c97":"code","2732ab1c":"code","8242ec6e":"code","7d3c3453":"code","4075624f":"code","69214eb2":"code","bc9e5de4":"code","7683ada6":"code","0daa1b98":"code","0f5f6773":"code","5f9d3a79":"code","12853e5e":"code","89b24155":"code","b080cae5":"code","180e19da":"code","bba9085c":"code","999f10f6":"code","4123dd97":"code","fe403afc":"code","fee3750b":"code","8bf9473f":"code","ceb5c3df":"code","b5996b9f":"code","d54fab30":"markdown","0d44bcc0":"markdown","d7459361":"markdown","f78e4c50":"markdown","c825b213":"markdown","53413721":"markdown","bb0952a9":"markdown","1a5e4817":"markdown","b685fbb9":"markdown","04b98652":"markdown","50d11e1a":"markdown","ced100d9":"markdown","395cac7d":"markdown","4eddb588":"markdown","e6917425":"markdown","c6820c95":"markdown","f2611424":"markdown","0287828a":"markdown","bcee4971":"markdown","82a06776":"markdown","26358b27":"markdown","e5173d6f":"markdown","08424e10":"markdown","598b38ae":"markdown","16b297a2":"markdown","a8f169c3":"markdown","0bd16618":"markdown","553a7831":"markdown","4b1b189f":"markdown","408d9771":"markdown","2ff86610":"markdown","9d6eb0a9":"markdown","aa82cb03":"markdown","7856cfba":"markdown","0e8f75ce":"markdown","43ac56b5":"markdown","d2eb8733":"markdown","0508a717":"markdown","098eb897":"markdown","35df7fb2":"markdown","8ef3a709":"markdown","73888cd2":"markdown","43f3e009":"markdown","257ef85e":"markdown","ee659497":"markdown","86581444":"markdown","bb45b269":"markdown","0ff9b695":"markdown","ea87b2ca":"markdown","a1098f1b":"markdown","3b3716ec":"markdown","5952ecea":"markdown","414afedf":"markdown","481479b5":"markdown","920ae7f3":"markdown","c4d4fa76":"markdown","d2b06466":"markdown","8f644b82":"markdown"},"source":{"b0ec1c35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport networkx as nx\nimport matplotlib.pyplot as plt # for plot\nfrom matplotlib.pyplot import figure\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4667e63a":"df= pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv\")\ndf2 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/games.csv\")\ndf3 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/players.csv\")\ndf4 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/plays.csv\")\ndf5 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\")\n#df5_2 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv\")\n#df5_3 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv\")","aabd69c2":"#making dataframe using only related feature that we want to use\nplays = df4[['gameId','playId','possessionTeam','specialTeamsPlayType','specialTeamsResult','kickerId','returnerId','kickBlockerId','penaltyCodes','penaltyYards','preSnapHomeScore','preSnapVisitorScore','passResult','kickLength','kickReturnYardage','playResult']]\ngames = df2[['gameId','homeTeamAbbr','visitorTeamAbbr']]\nplayers = df3[['nflId','collegeName']]\nscout = df[['gameId','playId','snapDetail','operationTime','hangTime','kickType','kickDirectionIntended','kickDirectionActual','returnDirectionIntended','returnDirectionActual','missedTackler','assistTackler','tackler','kickoffReturnFormation','gunners','puntRushers','specialTeamsSafeties','vises','kickContactType']]\n\n#track2018 = df5[['s','a','dis','nflId','gameId','playId']]\n#track2019 = df5_2[['s','a','dis','nflId','gameId','playId']]\n#track2020 = ddf5_3[['s','a','dis','nflId','gameId','playId','jerseyNumber','team']]\n","2a4dac9b":"#merging plays dataset and scout dataset into play_scout\nplay_scout = pd.merge(plays, scout, how='left', on=['playId','gameId'])","10d2a0be":"#separate multiple user in dataset using explode technique\n\nplay_scout = play_scout.assign(returnerId=play_scout['returnerId'].str.split(';')).explode('returnerId')\nplay_scout = play_scout.assign(penaltyCodes=play_scout['penaltyCodes'].str.split(';')).explode('penaltyCodes')\nplay_scout = play_scout.assign(missedTackler=play_scout['missedTackler'].str.split(';')).explode('missedTackler')\nplay_scout = play_scout.assign(assistTackler=play_scout['assistTackler'].str.split(';')).explode('assistTackler')\nplay_scout = play_scout.assign(gunners=play_scout['gunners'].str.split(';')).explode('gunners')\nplay_scout = play_scout.assign(puntRushers=play_scout['puntRushers'].str.split(';')).explode('puntRushers')\nplay_scout = play_scout.assign(specialTeamsSafeties=play_scout['specialTeamsSafeties'].str.split(';')).explode('specialTeamsSafeties')\nplay_scout = play_scout.assign(vises=play_scout['vises'].str.split(';')).explode('vises')","4bcca352":"#add new coulumn 'home team' of returner team into first dataframe by gameId\nplay_scout['homeTeam'] =play_scout.gameId.map(games.set_index('gameId')['homeTeamAbbr'].to_dict())","e774c5d7":"#merging dataframe play_scout and games into play_scout\nplay_scout=play_scout.merge(games[['gameId','homeTeamAbbr','visitorTeamAbbr']],how='left',left_on=['gameId','possessionTeam'],right_on=['gameId','homeTeamAbbr']).drop('homeTeamAbbr', axis='columns').fillna(games['homeTeamAbbr'])","19d1f582":"#define visitor team and add new coulumn 'visitor team'\nfor i in range(len(play_scout)):\n  if (play_scout.loc[i, 'possessionTeam'] != play_scout.loc[i, 'homeTeam']) :\n        play_scout.loc[i, 'visitorTeamAbbr'] = play_scout.loc[i, 'homeTeam']","89efa5e3":"#rename visitor team to returner team\nplay_scout = play_scout.rename(columns={\"visitorTeamAbbr\": \"returnerTeam\"})","83d914b5":"play_scout.head()","b3e1ffe5":"# calcalute home and visitor current score\nfor x in range(len(play_scout)-1):\n  if play_scout.loc[x, 'preSnapHomeScore'] != play_scout.loc[x+1, 'preSnapHomeScore']:\n    play_scout.loc[x, 'homeCurrentScore'] = (play_scout.loc[x+1, 'preSnapHomeScore']-play_scout.loc[x, 'preSnapHomeScore'])\n  else:\n    play_scout.loc[x, 'homeCurrentScore'] = 0\n  if play_scout.loc[x, 'preSnapVisitorScore'] != play_scout.loc[x+1, 'preSnapVisitorScore']:\n    play_scout.loc[x, 'visitorCurrentScore'] = (play_scout.loc[x+1, 'preSnapVisitorScore']-play_scout.loc[x, 'preSnapVisitorScore'])\n  else:\n    play_scout.loc[x, 'visitorCurrentScore'] = 0","797bbed7":"#calculate event score\nplay_scout['eventScore']= play_scout['homeCurrentScore']+play_scout['visitorCurrentScore']","76701daa":"#normalized home and visitor score\nfor x in range(len(play_scout)-1):\n  if play_scout.loc[x, 'homeCurrentScore']<0: \n    play_scout.loc[x, 'homeCurrentScore']=0\n  if play_scout.loc[x, 'visitorCurrentScore']<0: \n    play_scout.loc[x, 'visitorCurrentScore']=0","48f70560":"#define score or not score\nfor x in range(len(play_scout)-1):\n  if play_scout.loc[x, 'eventScore'] > 0: #not score\n    play_scout.loc[x, 'eventScore'] = 1\n  else:\n    play_scout.loc[x, 'eventScore'] = 0 #not score","ab570833":"#merging play_scout dataframa and players dataframe into play_scout for define kicker college\nplay_scout = pd.merge(play_scout, players, how='left', left_on=['kickerId'],right_on=['nflId'])","1ae9718a":"del play_scout['nflId']","2ab01019":"#rename\nplay_scout = play_scout.rename(columns={\"collegeName\": \"kickerCollege\"})","cef1e0d6":"#change datatype for returner id\n#play_scout['returnerId'] = play_scout['returnerId'].astype(np.float).astype(\"Int64\")\nplay_scout['returnerId'] = play_scout['returnerId'].astype(np.float)","136a7ca0":"#merging play_scout dataframa and players dataframe into play_scout for define returner college\nplay_scout = pd.merge(play_scout, players, how='left', left_on=['returnerId'],right_on=['nflId'])","eebe53e0":"del play_scout['nflId']","65551c9b":"play_scout = play_scout.rename(columns={\"collegeName\": \"returnerCollege\"})","c1d1b5fc":"play_scout.shape","e9f805e4":"play_scout.head(1)","e19b6da1":"play_scout.dtypes","f77a6f6a":"#define kick and return accuracy\nfor x in range(len(play_scout)-1):\n  if play_scout.loc[x, 'kickDirectionIntended'] == play_scout.loc[x, 'kickDirectionActual']:\n    play_scout.loc[x, 'kickAccuracy'] = 1\n  else:\n    play_scout.loc[x, 'kickAccuracy'] = 0\n  if play_scout.loc[x, 'returnDirectionIntended'] == play_scout.loc[x, 'returnDirectionActual']:\n    play_scout.loc[x, 'returnAccuracy'] = 1\n  else:\n    play_scout.loc[x, 'returnAccuracy']  = 0","5242c4e2":"#laoding data track\ntrack = df5[['gameId','playId','nflId','jerseyNumber','team']]","068119c4":"track.shape","4e5e05f5":"track.dropna()","45b4b2bc":"track = track.drop_duplicates()","99f72d65":"track = track.reset_index(drop=True)","d5196acb":"track.head()","5e784579":"#add new coulumn \"hometeam\"\ntrack['homeTeam'] =track.gameId.map(games.set_index('gameId')['homeTeamAbbr'].to_dict())","bc1e794d":"#add new coulumn \"awayteam\"\ntrack['awayTeam'] =track.gameId.map(games.set_index('gameId')['visitorTeamAbbr'].to_dict())","68d09506":"#define team name for each player based on home team and visitor team\nfor x in range(len(track)-1):\n  if track.loc[x, 'team'] == 'home':\n    track.loc[x, 'teamName'] = track.loc[x, 'homeTeam']\n  else:\n    track.loc[x, 'teamName'] = track.loc[x, 'awayTeam']","23203248":"del track['team']","6b9c9eaa":"del track['homeTeam']\ndel track['awayTeam']","aff881bd":"play_scout.head()","358afa28":"# split data from  missed Tackler to gather Jersey number and Team Name\nplay_scout['missedTackler'] = play_scout['missedTackler'].str.replace(\" \",\"\")\nplay_scout['jersyMT']=play_scout['missedTackler'].str[3:]\nplay_scout['missedTackler'] = play_scout['missedTackler'].str[:3]\n","526c0e4a":"# split data from  Assist Tackler to gather Jersey number and Team Name\nplay_scout['assistTackler'] = play_scout['assistTackler'].str.replace(\" \",\"\")\nplay_scout['jersyAT']=play_scout['assistTackler'].str[3:]\nplay_scout['assistTackler'] = play_scout['assistTackler'].str[:3]","78d3fce0":"# split data from  Tackler to gather Jersey number and Team Name\nplay_scout['tackler'] = play_scout['tackler'].str.replace(\" \",\"\")\nplay_scout['jersyT']=play_scout['tackler'].str[3:]\nplay_scout['tackler'] = play_scout['tackler'].str[:3]\n\n","94236da3":"# split data from  Gunners to gather Jersey number and Team Name\nplay_scout['gunners'] = play_scout['gunners'].str.replace(\" \",\"\")\nplay_scout['jersyG']=play_scout['gunners'].str[3:]\nplay_scout['gunners'] = play_scout['gunners'].str[:3]\n\n","70f860a7":"# split data from  puntRushers to gather Jersey number and Team Name\nplay_scout['puntRushers'] = play_scout['puntRushers'].str.replace(\" \",\"\")\nplay_scout['jersyPR']=play_scout['puntRushers'].str[3:]\nplay_scout['puntRushers'] = play_scout['puntRushers'].str[:3]","14b61646":"# split data from  specialTeamsSafeties to gather Jersey number and Team Name\nplay_scout['specialTeamsSafeties'] = play_scout['specialTeamsSafeties'].str.replace(\" \",\"\")\nplay_scout['jersySTS']=play_scout['specialTeamsSafeties'].str[3:]\nplay_scout['specialTeamsSafeties'] = play_scout['specialTeamsSafeties'].str[:3]","bf27f865":"# split data from  vises to gather Jersey number and Team Name\nplay_scout['vises'] = play_scout['vises'].str.replace(\" \",\"\")\nplay_scout['jersyV']=play_scout['vises'].str[3:]\nplay_scout['vises'] = play_scout['vises'].str[:3]","e41395e1":"pd.set_option('display.max_columns', None)\nplay_scout.head()","41ae53e0":"track.dtypes","b10d9843":"play_scout.dtypes","24ab3b9a":"#change data type to float\nplay_scout['jersyMT'] = play_scout['jersyMT'].astype(np.float)\nplay_scout['jersyAT'] = play_scout['jersyAT'].astype(np.float)\nplay_scout['jersyT'] = play_scout['jersyT'].astype(np.float)\nplay_scout['jersyG'] = play_scout['jersyG'].astype(np.float)\nplay_scout['jersyPR'] = play_scout['jersyPR'].astype(np.float)\nplay_scout['jersySTS'] = play_scout['jersySTS'].astype(np.float)\nplay_scout['jersyV'] = play_scout['jersyV'].astype(np.float)\n","da1beb06":"#merging play scout and track based on Missed Tackler Player\nplay_scout = pd.merge(play_scout, track, how='left',left_on=['jersyMT','gameId','playId','missedTackler'],right_on=['jerseyNumber','gameId','playId','teamName'])\n\n#clean un used coulumn\ndel play_scout['jerseyNumber']\ndel play_scout['teamName']\n\nplay_scout = play_scout.rename(columns={\"nflId\": \"MTId\"})\n","30090455":"#merging play scout and track based on Assist Tackler Player\nplay_scout = pd.merge(play_scout, track, how='left',left_on=['jersyAT','gameId','playId','assistTackler'],right_on=['jerseyNumber','gameId','playId','teamName'])\n#clean un used coulumn\ndel play_scout['jerseyNumber']\ndel play_scout['teamName']\nplay_scout = play_scout.rename(columns={\"nflId\": \"ATId\"})\n","392c16a8":"#merging play scout and track based on  Tackler Player\nplay_scout = pd.merge(play_scout, track, how='left',left_on=['jersyT','gameId','playId','tackler'],right_on=['jerseyNumber','gameId','playId','teamName'])\n#clean un used coulumn\ndel play_scout['jerseyNumber']\ndel play_scout['teamName']\nplay_scout = play_scout.rename(columns={\"nflId\": \"TId\"})\n\n","0f29d46b":"#merging play scout and track based on  Gunners Player\nplay_scout = pd.merge(play_scout, track, how='left',left_on=['jersyG','gameId','playId','gunners'],right_on=['jerseyNumber','gameId','playId','teamName'])\ndel play_scout['jerseyNumber']\ndel play_scout['teamName']\nplay_scout = play_scout.rename(columns={\"nflId\": \"GId\"})","cd8da579":"#merging play scout and track based on  Punt Rusher Player\nplay_scout = pd.merge(play_scout, track, how='left',left_on=['jersyPR','gameId','playId','puntRushers'],right_on=['jerseyNumber','gameId','playId','teamName'])\ndel play_scout['jerseyNumber']\ndel play_scout['teamName']\nplay_scout = play_scout.rename(columns={\"nflId\": \"PRId\"})","82c35971":"#merging play scout and track based on  specialTeamsSafeties Player\nplay_scout = pd.merge(play_scout, track, how='left',left_on=['jersySTS','gameId','playId','specialTeamsSafeties'],right_on=['jerseyNumber','gameId','playId','teamName'])\ndel play_scout['jerseyNumber']\ndel play_scout['teamName']\nplay_scout = play_scout.rename(columns={\"nflId\": \"STSId\"})\n\n","d81bd98c":"#merging play scout and track based on  vises Player\nplay_scout = pd.merge(play_scout, track, how='left',left_on=['jersyV','gameId','playId','vises'],right_on=['jerseyNumber','gameId','playId','teamName'])\ndel play_scout['jerseyNumber']\ndel play_scout['teamName']\nplay_scout = play_scout.rename(columns={\"nflId\": \"VId\"})","a80fd392":"play_scout","f46c3ea6":"#merging play_scout and player \nplay_scout = pd.merge(play_scout, players, how='left', left_on=['MTId'],right_on=['nflId'])\ndel play_scout['nflId']\nplay_scout = play_scout.rename(columns={\"collegeName\": \"MTCollege\"})","aa54775e":"play_scout = pd.merge(play_scout, players, how='left', left_on=['ATId'],right_on=['nflId'])\ndel play_scout['nflId']\nplay_scout = play_scout.rename(columns={\"collegeName\": \"ATCollege\"})","92aa00c0":"play_scout = pd.merge(play_scout, players, how='left', left_on=['TId'],right_on=['nflId'])\ndel play_scout['nflId']\nplay_scout = play_scout.rename(columns={\"collegeName\": \"TCollege\"})","43b5277b":"play_scout = pd.merge(play_scout, players, how='left', left_on=['GId'],right_on=['nflId'])\ndel play_scout['nflId']\nplay_scout = play_scout.rename(columns={\"collegeName\": \"GCollege\"})","3344702d":"play_scout = pd.merge(play_scout, players, how='left', left_on=['PRId'],right_on=['nflId'])\ndel play_scout['nflId']\nplay_scout = play_scout.rename(columns={\"collegeName\": \"PRCollege\"})","3371d759":"play_scout = pd.merge(play_scout, players, how='left', left_on=['STSId'],right_on=['nflId'])\ndel play_scout['nflId']\nplay_scout = play_scout.rename(columns={\"collegeName\": \"STSCollege\"})","efb54ce0":"play_scout = pd.merge(play_scout, players, how='left', left_on=['VId'],right_on=['nflId'])\ndel play_scout['nflId']\nplay_scout = play_scout.rename(columns={\"collegeName\": \"VCollege\"})","7f5fa4d3":"play_scout.head()","2747ce08":"# Import label encoder\nfrom sklearn import preprocessing\n \n# label_encoder object knows how to understand word labels.\nlabel_encoder = preprocessing.LabelEncoder()\n \n# Encode labels in column 'species'.\nplay_scout['specialTeamsPlayType_cat']= label_encoder.fit_transform(play_scout['specialTeamsPlayType'])\nplay_scout['specialTeamsResult_cat']= label_encoder.fit_transform(play_scout['specialTeamsResult'])\nplay_scout['passResult_cat']= label_encoder.fit_transform(play_scout['passResult'].astype(str))\nplay_scout['kickType_cat']= label_encoder.fit_transform(play_scout['kickType'].astype(str))\nplay_scout['kickContactType_cat']= label_encoder.fit_transform(play_scout['kickContactType'].astype(str))\nplay_scout['kickerCollege_cat']= label_encoder.fit_transform(play_scout['kickerCollege'].astype(str))\nplay_scout['returnerCollege_cat']= label_encoder.fit_transform(play_scout['returnerCollege'].astype(str))","a676cda0":"play_scout.head()","000d123a":"pd.set_option('display.max_columns', None)\nplay_scout.head()","47a84583":"dataModel = play_scout[['specialTeamsPlayType_cat','kickType_cat' , 'kickContactType_cat', 'kickAccuracy', 'returnAccuracy', 'kickLength', 'hangTime','playResult','eventScore','specialTeamsResult_cat']]","860882f8":"dataModel = dataModel.dropna()","f2e3f1ad":"dataModel.isnull().sum()","26c70171":"#Feature and Target Selection\nfeature = dataModel[['specialTeamsPlayType_cat','kickType_cat' , 'kickContactType_cat', 'kickAccuracy', 'returnAccuracy', 'kickLength', 'hangTime','playResult']]\ntarget = dataModel[['eventScore']]","7c0d1ec3":"import warnings\nwarnings.filterwarnings('ignore')","4b272710":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","ac278474":"#Import knearest neighbors Classifier model\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Create KNN Classifier\nknn = KNeighborsClassifier(n_neighbors=5)\n\n#Train the model using the training sets\nknn.fit(X_train, y_train.values.ravel())\n\n#Predict the response for test dataset\ny_pred = knn.predict(X_test)\n\n#Predict the response for test dataset\nx_pred = knn.predict(X_train)","7c2c1c72":"from sklearn.metrics import classification_report,confusion_matrix\n\n#Confusion Matrix for Training Data\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","2f0cf253":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","8a7eceb1":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","3de97115":"#Import knearest neighbors Classifier model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create KNN Classifier\nrf = RandomForestClassifier()\n\n#Train the model using the training sets\nrf.fit(X_train, y_train.values.ravel())\n\n#Predict the response for test dataset\ny_pred = rf.predict(X_test)\n\nx_pred =rf.predict(X_train)","a676b277":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","a0407e86":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","59b300c7":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","368de94e":"from sklearn.tree import DecisionTreeClassifier\n\nDT = DecisionTreeClassifier()\n\n#Train the model using the training sets\nDT.fit(X_train, y_train.values.ravel())\n\n#Predict the response for test dataset\ny_pred = DT.predict(X_test)\n\nx_pred = DT.predict(X_train)","10b89548":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","ed274e8a":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","448e322a":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","53ed3925":"#Import Logistic SVC model\nfrom sklearn.svm import SVC, LinearSVC\n\n#Create KNN Classifier\nSVC = SVC()\n\n#Train the model using the training sets\nSVC.fit(X_train, y_train.values.ravel())\n\n#Predict the response for test dataset\ny_pred = SVC.predict(X_test)\n\nx_pred =SVC.predict(X_train)","820d8fa1":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","6e687209":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","9a062426":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","55bba564":"#Import Logistic SVC model\nfrom sklearn.svm import SVC, LinearSVC\n\n#Create KNN Classifier\nLSVC = LinearSVC()\n\n#Train the model using the training sets\nLSVC.fit(X_train, y_train.values.ravel())\n\n#Predict the response for test dataset\ny_pred = LSVC.predict(X_test)\n\nx_pred = LSVC.predict(X_train)","0458520a":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","eabcd27a":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","a776714a":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","5e144740":"from sklearn.linear_model import LogisticRegression, Ridge, SGDClassifier\n\nSGD = SGDClassifier()\n\n#Train the model using the training sets\nSGD.fit(X_train, y_train.values.ravel())\n\n#Predict the response for test dataset\ny_pred = SGD.predict(X_test)\n\nx_pred =SGD.predict(X_train)","73e407e7":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","c4fc5a05":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","052d9152":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","5d1d8366":"from sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier(hidden_layer_sizes=(8,8,8), activation='relu', solver='adam', max_iter=500)\nmlp.fit(X_train,y_train)\n\npredict_train = mlp.predict(X_train)\npredict_test = mlp.predict(X_test)","c031de53":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,predict_train))\nprint(classification_report(y_train,predict_train))","9a9143ed":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,predict_test))\nprint(classification_report(y_test,predict_test))","7ec51ba8":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3, shuffle=True) # 70% training and 30% test","08e4f307":"# Importing the Keras libraries and packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Initialising the ANN\nclassifier = Sequential()","f057a6cf":"# Adding the input layer and the first hidden layer\nclassifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu', input_dim =8))\n\n# Adding the second hidden layer\nclassifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","2a894202":"# Fitting the ANN to the Training set\nclassifier.fit(X_train, y_train, batch_size = 10, epochs = 10)","ca20e192":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\n\nx_pred = classifier.predict(X_train)\nx_pred = (x_pred > 0.5)","a296d650":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","2213a5ce":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","c0e7ca79":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.2) # 70% training and 30% test","68667e5a":"#Import svm model\nfrom sklearn import svm\n\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\n#Train the model using the training sets\nclf.fit(X_train, y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)\n\nx_pred = clf.predict(X_train)","8244e634":"#Confusion Matrix for Training Data\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_train,x_pred))\nprint(classification_report(y_train,x_pred))","94c59acf":"#Confusion Matrix for Testing Data\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","189c3f26":"dfgraph= play_scout[['kickerId', 'returnerId', 'specialTeamsResult', 'kickerCollege','returnerCollege', 'eventScore', 'MTId', 'ATId', 'TId', 'GId', 'PRId', 'STSId', 'VId', 'MTCollege', 'ATCollege', 'TCollege', 'GCollege', 'PRCollege', 'STSCollege', 'VCollege']] \ndfgraph.head()","1daae372":"dfgraphKR= dfgraph[['kickerId', 'returnerId', 'specialTeamsResult', 'kickerCollege','returnerCollege', 'eventScore']] ","37fa0c6e":"dfgraphKR.isnull().sum()","8edf0860":"dfgraphKR.dropna(subset = [\"kickerId\"], inplace=True)\ndfgraphKR.dropna(subset = [\"returnerId\"], inplace=True)\ndfgraphKR.dropna(subset = [\"kickerCollege\"], inplace=True)","68ab8949":"dfgraphKR = dfgraphKR.reset_index(drop=True)","9036d9ee":"#define team name for each player based on home team and visitor team\nfor x in range(len(dfgraphKR)-1):\n  if dfgraphKR.loc[x, 'kickerCollege'] == dfgraphKR.loc[x, 'returnerCollege']:\n    dfgraphKR.loc[x, 'KRCollege'] = 1\n  else:\n    dfgraphKR.loc[x, 'KRCollege'] = 0","df350346":"dfgraphKR.head()","a005d9c4":"dfgraphKR['kickerId'] =dfgraphKR['kickerId'].astype(int)","f1634ced":"GDirectKR = nx.from_pandas_edgelist(dfgraphKR,source='kickerId',target='returnerId', create_using=nx.DiGraph(),edge_attr='specialTeamsResult')","f77eaa13":"degCent = nx.degree_centrality(GDirectKR)\nnode_color = ['orange' if type(v)==float else 'green' for v in GDirectKR]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GDirectKR, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()","ccc66776":"#college team\n\nGCollegeKR = nx.from_pandas_edgelist(dfgraphKR,source='kickerCollege',target='returnerCollege', create_using=nx.DiGraph(),edge_attr='KRCollege')","f4674259":"color = [\n\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\"]","9432e9db":"colors = []\ni = 0\nfor node in GCollegeKR:\n    if node in dfgraphKR[\"kickerId\"].values:\n      colors.append(\"navy\")  \n    elif node in dfgraphKR[\"returnerId\"].values:\n      colors.append(\"lightgreen\")\n    else:\n        colors.append(color[i])\n        i+=1","ef7a9f54":"degCent = nx.degree_centrality(GCollegeKR)\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GCollegeKR, with_labels=True,\n                 node_color=colors,\n                 node_size=1200)\n\nplt.show()","08515b4d":"dfgraphKG= dfgraph[['kickerId', 'GId', 'specialTeamsResult', 'kickerCollege','GCollege', 'eventScore']] ","bd4a733b":"dfgraphKG.isnull().sum()","39d706be":"dfgraphKG.dropna(subset = [\"kickerId\"], inplace=True)\ndfgraphKG.dropna(subset = [\"GId\"], inplace=True)\ndfgraphKG.dropna(subset = [\"GCollege\"], inplace=True)","cef853d1":"dfgraphKG['kickerId'] =dfgraphKG['kickerId'].astype(int)","4ac3c79c":"GDirectKG = nx.from_pandas_edgelist(dfgraphKG,source='kickerId',target='GId', create_using=nx.DiGraph(),edge_attr='specialTeamsResult')","62d3ccc1":"degCent = nx.degree_centrality(GDirectKG)\nnode_color = ['orange' if type(v)==float else 'green' for v in GDirectKG]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GDirectKG, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()","e5cba50a":"#college team\n\nGCollegeKG = nx.from_pandas_edgelist(dfgraphKG,source='kickerCollege',target='GCollege', create_using=nx.DiGraph(),edge_attr='eventScore')\n\ncolor = [\n\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\"]\n\ncolors = []\ni = 0\nfor node in GCollegeKG:\n    if node in dfgraphKG[\"kickerId\"].values:\n      colors.append(\"navy\")  \n    elif node in dfgraphKG[\"GId\"].values:\n      colors.append(\"lightgreen\")\n    else:\n        colors.append(color[i])\n        i+=1\n\n        \n#ploting graph\ndegCent = nx.degree_centrality(GCollegeKG)\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GCollegeKG, with_labels=True,\n                 node_color=colors,\n                 node_size=1200)\n\nplt.show()","33690e2f":"dfgraphKT= dfgraph[['kickerId', 'TId', 'specialTeamsResult', 'kickerCollege','TCollege', 'eventScore']] ","b9ab9549":"dfgraphKT.isnull().sum()","124ce6e1":"dfgraphKT.dropna(subset = [\"kickerId\"], inplace=True)\ndfgraphKT.dropna(subset = [\"TId\"], inplace=True)\ndfgraphKT.dropna(subset = [\"TCollege\"], inplace=True)","7b8a21b4":"dfgraphKT['kickerId'] =dfgraphKT['kickerId'].astype(int)","90c1d9fb":"GDirectKT = nx.from_pandas_edgelist(dfgraphKT,source='kickerId',target='TId', create_using=nx.DiGraph(),edge_attr='specialTeamsResult')\n\ndegCent = nx.degree_centrality(GDirectKT)\nnode_color = ['orange' if type(v)==float else 'green' for v in GDirectKT]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GDirectKT, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()","594248ed":"#college team\n\nGCollegeKT = nx.from_pandas_edgelist(dfgraphKT,source='kickerCollege',target='TCollege', create_using=nx.DiGraph(),edge_attr='eventScore')\n\ncolor = [\n\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\"]\n\ncolors = []\ni = 0\nfor node in GCollegeKT:\n    if node in dfgraphKT[\"kickerId\"].values:\n      colors.append(\"navy\")  \n    elif node in dfgraphKT[\"TId\"].values:\n      colors.append(\"lightgreen\")\n    else:\n        colors.append(color[i])\n        i+=1\n\n        \n#ploting graph\ndegCent = nx.degree_centrality(GCollegeKT)\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GCollegeKT, with_labels=True,\n                 node_color=colors,\n                 node_size=1200)\n\nplt.show()","bc842e55":"dfgraphKAT= dfgraph[['kickerId', 'ATId', 'specialTeamsResult', 'kickerCollege','ATCollege', 'eventScore']] ","acfdbe71":"dfgraphKAT.isnull().sum()","e445003b":"dfgraphKAT.dropna(subset = [\"kickerId\"], inplace=True)\ndfgraphKAT.dropna(subset = [\"ATId\"], inplace=True)\ndfgraphKAT.dropna(subset = [\"ATCollege\"], inplace=True)","e7bc3aeb":"dfgraphKAT['kickerId'] =dfgraphKAT['kickerId'].astype(int)","7927dfd7":"GDirectKAT = nx.from_pandas_edgelist(dfgraphKAT,source='kickerId',target='ATId', create_using=nx.DiGraph(),edge_attr='specialTeamsResult')\n\ndegCent = nx.degree_centrality(GDirectKAT)\nnode_color = ['orange' if type(v)==float else 'green' for v in GDirectKAT]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GDirectKAT, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()","ca5d05cc":"#college team\n\nGCollegeKAT = nx.from_pandas_edgelist(dfgraphKAT,source='kickerCollege',target='ATCollege', create_using=nx.DiGraph(),edge_attr='eventScore')\n\ncolor = [\n\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\"]\n\ncolors = []\ni = 0\nfor node in GCollegeKAT:\n    if node in dfgraphKAT[\"kickerId\"].values:\n      colors.append(\"navy\")  \n    elif node in dfgraphKAT[\"ATId\"].values:\n      colors.append(\"lightgreen\")\n    else:\n        colors.append(color[i])\n        i+=1\n\n        \n#ploting graph\ndegCent = nx.degree_centrality(GCollegeKAT)\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GCollegeKAT, with_labels=True,\n                 node_color=colors,\n                 node_size=1200)\n\nplt.show()","c7ec8cb1":"dfgraphRPR= dfgraph[['returnerId', 'PRId', 'specialTeamsResult', 'returnerCollege','PRCollege', 'eventScore']] ","f7b2bd62":"dfgraphRPR.isnull().sum()","bfb1f7b8":"dfgraphRPR.dropna(subset = [\"returnerId\"], inplace=True)\ndfgraphRPR.dropna(subset = [\"PRId\"], inplace=True)\ndfgraphRPR.dropna(subset = [\"PRCollege\"], inplace=True)","d7e185a2":"dfgraphRPR['returnerId'] =dfgraphRPR['returnerId'].astype(int)","6defbe84":"GDirectRPR = nx.from_pandas_edgelist(dfgraphRPR,source='returnerId',target='PRId', create_using=nx.DiGraph(),edge_attr='specialTeamsResult')\n\ndegCent = nx.degree_centrality(GDirectRPR)\nnode_color = ['red' if type(v)==float else 'blue' for v in GDirectRPR]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GDirectRPR, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()","3c0dfac7":"#college team\n\nGCollegeRPR = nx.from_pandas_edgelist(dfgraphRPR,source='returnerCollege',target='PRCollege', create_using=nx.DiGraph(),edge_attr='eventScore')\n\ncolor = [\n\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\"]\n\ncolors = []\ni = 0\nfor node in GCollegeRPR:\n    if node in dfgraphRPR[\"returnerId\"].values:\n      colors.append(\"navy\")  \n    elif node in dfgraphRPR[\"PRId\"].values:\n      colors.append(\"lightgreen\")\n    else:\n        colors.append(color[i])\n        i+=1\n\n        \n#ploting graph\ndegCent = nx.degree_centrality(GCollegeRPR)\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GCollegeRPR, with_labels=True,\n                 node_color=colors,\n                 node_size=1200)\n\nplt.show()","fdc10814":"dfgraphRSTS= dfgraph[['returnerId', 'STSId', 'specialTeamsResult', 'returnerCollege','STSCollege', 'eventScore']] ","ac4e5a45":"dfgraphRSTS.isnull().sum()","471e4696":"dfgraphRSTS.dropna(subset = [\"returnerId\"], inplace=True)\ndfgraphRSTS.dropna(subset = [\"STSId\"], inplace=True)\ndfgraphRSTS.dropna(subset = [\"STSCollege\"], inplace=True)","e37b2546":"dfgraphRSTS['returnerId'] =dfgraphRSTS['returnerId'].astype(int)","dd087bac":"GDirectRSTS = nx.from_pandas_edgelist(dfgraphRSTS,source='returnerId',target='STSId', create_using=nx.DiGraph(),edge_attr='specialTeamsResult')\n\ndegCent = nx.degree_centrality(GDirectRSTS)\nnode_color = ['red' if type(v)==float else 'blue' for v in GDirectRSTS]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GDirectRSTS, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()","24118c44":"#college team\n\nGCollegeRSTS = nx.from_pandas_edgelist(dfgraphRSTS,source='returnerCollege',target='STSCollege', create_using=nx.DiGraph(),edge_attr='eventScore')\n\ncolor = [\n\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\"]\n\ncolors = []\ni = 0\nfor node in GCollegeRSTS:\n    if node in dfgraphRSTS[\"returnerId\"].values:\n      colors.append(\"navy\")  \n    elif node in dfgraphRSTS[\"STSId\"].values:\n      colors.append(\"lightgreen\")\n    else:\n        colors.append(color[i])\n        i+=1\n\n        \n#ploting graph\ndegCent = nx.degree_centrality(GCollegeRSTS)\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GCollegeRSTS, with_labels=True,\n                 node_color=colors,\n                 node_size=1200)\n\nplt.show()","a25aea5a":"dfgraphRV= dfgraph[['returnerId', 'VId', 'specialTeamsResult', 'returnerCollege','VCollege', 'eventScore']] ","bd1efc89":"dfgraphRV.isnull().sum()","0156d789":"dfgraphRV.dropna(subset = [\"returnerId\"], inplace=True)\ndfgraphRV.dropna(subset = [\"VId\"], inplace=True)\ndfgraphRV.dropna(subset = [\"VCollege\"], inplace=True)","aa455f21":"dfgraphRV['returnerId'] =dfgraphRV['returnerId'].astype(int)","7ffab559":"GDirectRV = nx.from_pandas_edgelist(dfgraphRV,source='returnerId',target='VId', create_using=nx.DiGraph(),edge_attr='specialTeamsResult')\n\ndegCent = nx.degree_centrality(GDirectRV)\nnode_color = ['red' if type(v)==float else 'blue' for v in GDirectRV]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GDirectRV, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()","82457afa":"#college team\n\nGCollegeRV = nx.from_pandas_edgelist(dfgraphRV,source='returnerCollege',target='VCollege', create_using=nx.DiGraph(),edge_attr='eventScore')\n\ncolor = [\n\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\",\"lightcoral\", \"gray\", \"lightgray\", \"firebrick\", \"red\", \"chocolate\", \"darkorange\", \"moccasin\", \"gold\", \"yellow\", \"darkolivegreen\", \"chartreuse\", \"forestgreen\", \"lime\", \"mediumaquamarine\", \"turquoise\", \"teal\", \"cadetblue\", \"purple\", \"blue\", \"slateblue\", \"blueviolet\", \"magenta\", \"lightsteelblue\",\"orange\",\"green\",\"navy\"]\n\ncolors = []\ni = 0\nfor node in GCollegeRV:\n    if node in dfgraphRV[\"returnerId\"].values:\n      colors.append(\"navy\")  \n    elif node in dfgraphRV[\"VId\"].values:\n      colors.append(\"lightgreen\")\n    else:\n        colors.append(color[i])\n        i+=1\n\n        \n#ploting graph\ndegCent = nx.degree_centrality(GCollegeRV)\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(GCollegeRV, with_labels=True,\n                 node_color=colors,\n                 node_size=1200)\n\nplt.show()","f930f046":"#now, we want to construct the graph that representing the Special Teams Play Type with GameId so we can find the most Play Type that have been using in NFL American Football By Special Teams\n\n# Add all columns in the table as edge attribute\nG = nx.from_pandas_edgelist(play_scout, 'gameId', 'specialTeamsPlayType', edge_attr=True )","062dd37e":"# Add all columns in the table as edge attribute\nG2 = nx.from_pandas_edgelist(play_scout, 'gameId', 'specialTeamsResult', edge_attr=True )","7be8bcac":"degCent = nx.degree_centrality(G)\nnode_color = ['orange' if type(v)==int else 'green' for v in G]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(G, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()\n\n\n#From the graph below  we can see that the most Play type that have been using by Special Team is \"Kickoff\"","7bef2395":"\ndegCent = nx.degree_centrality(G2)\nnode_color = ['blue' if type(v)==int else 'red' for v in G2]\nnode_size =  [v * 10000 for v in degCent.values()]\nplt.figure(figsize=(20,20))\n\n# draw figure with customized options\nnx.draw(G2, with_labels=True,\n                 node_color=node_color,\n                 node_size=node_size)\n\nplt.show()\n\n\n#From the graph below  we can see that the most Result is \"Return\"","0c9a14da":"!pip install torch","b571982f":"!pip install --verbose --no-cache-dir torch-scatter\n!pip install --verbose --no-cache-dir torch-sparse","b38e662f":"!pip install torch_geometric","07d52ace":"import numpy as np\nimport pandas as pd\nimport pickle\nimport csv\nimport os\nimport torch\nfrom torch_geometric.data import InMemoryDataset, Dataset, Data","355fe15c":"np.random.seed(42)\n","9ef1f9b2":"dfgraph.nunique()\n","25dc4b68":"dfgraph.isna().sum()\n","54051e03":"df_KR = dfgraph[['kickerCollege','returnerCollege','kickerId','returnerId','specialTeamsResult', 'eventScore',]]\n","6b3ef1bc":"df_KR.isna().sum()\n","42a64d6d":"df_KR=df_KR.dropna()\n","a8fedbb4":"df_KR.isna().sum()\n","73b779bc":"# average length of kickerCollege \ndfgraph.groupby('kickerCollege')['returnerCollege'].size().mean()\n","32125628":"from sklearn.preprocessing import LabelEncoder\n\nitem_encoder = LabelEncoder()\ndf_KR['kickerId'] = item_encoder.fit_transform(df_KR.kickerId)\ndf_KR.head()","007d4e70":"item_encoder = LabelEncoder()\ndf_KR['specialTeamsResult'] = item_encoder.fit_transform(df_KR.specialTeamsResult)\ndf_KR.head()","1a28ea58":"item_encoder = LabelEncoder()\ndf_KR['returnerId'] = item_encoder.fit_transform(df_KR.returnerId)\ndf_KR.head()","30ec7c97":"item_encoder = LabelEncoder()\ndf_KR['returnerCollege'] = item_encoder.fit_transform(df_KR.returnerCollege)\ndf_KR.head()","2732ab1c":"item_encoder = LabelEncoder()\ndf_KR['kickerCollege'] = item_encoder.fit_transform(df_KR.kickerCollege)\ndf_KR.head()","8242ec6e":"df_KR =df_KR.reset_index(drop=True)\n","7d3c3453":"for x in range(len(df_KR)-1):\n  if df_KR.loc[x,'kickerCollege'] == df_KR.loc[x,'returnerCollege']:\n    df_KR.loc[x,'label'] = True\n  else:\n   df_KR.loc[x,'label'] = False","4075624f":"df_KR.nunique()","69214eb2":"# display wheter kicker and returner are from same college\ndf_KR.head()","bc9e5de4":"df_KR.groupby('label').sum()","7683ada6":"df_KR.drop_duplicates('kickerCollege')['label'].mean()","0daa1b98":"kick_return = dict(df_KR.groupby('kickerId')['returnerId'].apply(list))\n#kick_return","0f5f6773":"import torch\nfrom torch_geometric.data import InMemoryDataset, Data\nfrom tqdm import tqdm\n\nclass NFLDataset(InMemoryDataset):\n    def __init__(self, root, transform=None, pre_transform=None):\n        super(NFLDataset, self).__init__(root, transform, pre_transform)\n        self.data, self.slices = torch.load(self.processed_paths[0])\n\n    @property\n    def raw_file_names(self):\n        return []\n    @property\n    def processed_file_names(self):\n        return ['..\/NFL.dataset']\n\n    def download(self):\n        pass\n    \n    def process(self):\n        \n        data_list = []\n\n        # process by session_id\n        ##inhere\n        grouped = df_KR.groupby('kickerCollege')\n        ##inhere\n        for kickerCollege, group in tqdm(grouped):\n          ##inhere\n            sess_item_id = LabelEncoder().fit_transform(group.returnerCollege)\n            group = group.reset_index(drop=True)\n            group['sess_item_id'] = sess_item_id\n            ##inhere\n            node_features = group.loc[group.kickerCollege==kickerCollege,['sess_item_id','returnerCollege']].sort_values('sess_item_id').returnerCollege.drop_duplicates().values\n\n            node_features = torch.LongTensor(node_features).unsqueeze(1)\n            target_nodes = group.sess_item_id.values[1:]\n            source_nodes = group.sess_item_id.values[:-1]\n\n            edge_index = torch.tensor([source_nodes,\n                                   target_nodes], dtype=torch.long)\n            x = node_features\n\n            y = torch.FloatTensor([group.label.values[0]])\n\n            data = Data(x=x, edge_index=edge_index, y=y)\n            data_list.append(data)\n        \n        data, slices = self.collate(data_list)\n        torch.save((data, slices), self.processed_paths[0])","5f9d3a79":"dataset = NFLDataset(root='..\/')","12853e5e":"dataset = dataset.shuffle()\ntrain_dataset = dataset[:40]\nval_dataset = dataset[40:50]\ntest_dataset = dataset[50:]\nlen(train_dataset), len(val_dataset), len(test_dataset)","89b24155":"#from torch_geometric.data import DataLoader\nfrom torch_geometric.loader import DataLoader\nbatch_size= 2\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size)\nval_loader = DataLoader(val_dataset, batch_size=batch_size)\ntest_loader = DataLoader(test_dataset, batch_size=batch_size)","b080cae5":"train_dataset[20]","180e19da":"num_items = df_KR.returnerId.max()+1 \nnum_items ","bba9085c":"import torch\nfrom torch.nn import Sequential as Seq, Linear, ReLU\nfrom torch_geometric.nn import MessagePassing\nfrom torch_geometric.utils import remove_self_loops, add_self_loops\nclass SAGEConv(MessagePassing):\n    def __init__(self, in_channels, out_channels):\n        super(SAGEConv, self).__init__(aggr='max') #  \"Max\" aggregation.\n        self.lin = torch.nn.Linear(in_channels, out_channels)\n        self.act = torch.nn.ReLU()\n        self.update_lin = torch.nn.Linear(in_channels + out_channels, in_channels, bias=False)\n        self.update_act = torch.nn.ReLU()\n        \n    def forward(self, x, edge_index):\n        # x has shape [N, in_channels]\n        # edge_index has shape [2, E]\n        \n        \n        edge_index, _ = remove_self_loops(edge_index)\n        edge_index, _ = add_self_loops(edge_index, num_nodes=x.size(0))\n        \n        \n        return self.propagate(edge_index, size=(x.size(0), x.size(0)), x=x)\n\n    def message(self, x_j):\n        # x_j has shape [E, in_channels]\n\n        x_j = self.lin(x_j)\n        x_j = self.act(x_j)\n        \n        return x_j\n\n    def update(self, aggr_out, x):\n        # aggr_out has shape [N, out_channels]\n\n\n        new_embedding = torch.cat([aggr_out, x], dim=1)\n        \n        new_embedding = self.update_lin(new_embedding)\n        new_embedding = self.update_act(new_embedding)\n        \n        return new_embedding","999f10f6":"embed_dim = 5\nfrom torch_geometric.nn import GraphConv, TopKPooling, GatedGraphConv\nfrom torch_geometric.nn import global_mean_pool as gap, global_max_pool as gmp\nimport torch.nn.functional as F\nclass Net(torch.nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n\n        self.conv1 = SAGEConv(embed_dim, 5)\n        self.pool1 = TopKPooling(5, ratio=0.8)\n        self.conv2 = SAGEConv(5, 5)\n        self.pool2 = TopKPooling(5, ratio=0.8)\n        self.conv3 = SAGEConv(5, 5)\n        self.pool3 = TopKPooling(5, ratio=0.8)\n        ##inhere\n        self.item_embedding = torch.nn.Embedding(num_embeddings=df_KR.returnerCollege.max()+1, embedding_dim=embed_dim)\n        self.lin1 = torch.nn.Linear(10, 5)\n        self.lin2 = torch.nn.Linear(5, 3)\n        self.lin3 = torch.nn.Linear(3, 1)\n        self.bn1 = torch.nn.BatchNorm1d(5)\n        self.bn2 = torch.nn.BatchNorm1d(3)\n        self.act1 = torch.nn.ReLU()\n        self.act2 = torch.nn.ReLU()        \n  \n    def forward(self, data):\n        x, edge_index, batch = data.x, data.edge_index, data.batch\n        x = self.item_embedding(x)\n        x = x.squeeze(1)        \n\n        x = F.relu(self.conv1(x, edge_index))\n\n        x, edge_index, _, batch, _ , _ = self.pool1(x, edge_index, None, batch)\n        x1 = torch.cat([gmp(x, batch), gap(x, batch)], dim=1)\n\n        x = F.relu(self.conv2(x, edge_index))\n     \n        x, edge_index, _, batch, _ , _= self.pool2(x, edge_index, None, batch)\n        x2 = torch.cat([gmp(x, batch), gap(x, batch)], dim=1)\n\n        x = F.relu(self.conv3(x, edge_index))\n\n        x, edge_index, _, batch, _, _ = self.pool3(x, edge_index, None, batch)\n        x3 = torch.cat([gmp(x, batch), gap(x, batch)], dim=1)\n\n        x = x1 + x2 + x3\n\n        x = self.lin1(x)\n        x = self.act1(x)\n        x = self.lin2(x)\n        x = self.act2(x)      \n        x = F.dropout(x, p=0.5, training=self.training)\n\n        x = torch.sigmoid(self.lin3(x)).squeeze(1)\n\n        return x","4123dd97":"!pip install GPUtil","fe403afc":"import torch\nfrom GPUtil import showUtilization as gpu_usage\nfrom numba import cuda\n\ndef free_gpu_cache():\n    print(\"Initial GPU Usage\")\n    gpu_usage()                             \n\n    torch.cuda.empty_cache()\n\n    cuda.select_device(0)\n    cuda.close()\n    cuda.select_device(0)\n\n    print(\"GPU Usage after emptying the cache\")\n    gpu_usage()\n\nfree_gpu_cache()","fee3750b":"device = torch.device('cuda')\nmodel = Net().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.005)\ncrit = torch.nn.BCELoss()","8bf9473f":"def train():\n    model.train()\n\n    loss_all = 0\n    for data in train_loader:\n        data = data.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        label = data.y.to(device)\n        loss = crit(output, label)\n        loss.backward()\n        loss_all += data.num_graphs * loss.item()\n        optimizer.step()\n    return loss_all \/ len(train_dataset)","ceb5c3df":"from sklearn.metrics import roc_auc_score\ndef evaluate(loader):\n    model.eval()\n\n    predictions = []\n    labels = []\n\n    with torch.no_grad():\n        for data in loader:\n\n            data = data.to(device)\n            pred = model(data).detach().cpu().numpy()\n\n            label = data.y.detach().cpu().numpy()\n            predictions.append(pred)\n            labels.append(label)\n\n    predictions = np.hstack(predictions)\n    labels = np.hstack(labels)\n    \n    return roc_auc_score(labels, predictions)","b5996b9f":"for epoch in range(10):\n    loss = train()\n    train_acc = evaluate(train_loader)\n    #val_acc = evaluate(val_loader)    \n   # test_acc = evaluate(test_loader)\n   # print('Epoch: {:03d}, Loss: {:.5f}, Train Auc: {:.5f}, Val Auc: {:.5f}, Test Auc: {:.5f}'.\n   #       format(epoch, loss, train_acc, val_acc, test_acc))\n    print('Epoch: {:03d}, Loss: {:.5f}, Train Auc: {:.5f}'.\n          format(epoch, loss, train_acc))","d54fab30":"## **DATA PREPOCESSING**","0d44bcc0":"### Now, we want to construct the graph that representing the Special Teams Play Type with GameId so we can find the most Play Type that have been using in NFL American Football By Special Teams\n","d7459361":"## 7. MLP","f78e4c50":"### Besides, we can also construct the graph that representing the Special Teams Result with GameId so we can find the most Special Teams strategie resulted in NFL American Football we can achieve it using degree of centrality\n","c825b213":"## 6. SGD","53413721":"### 4. Merge track and play_scout\n#### Preparation","bb0952a9":"### 2.3 Kicker and Asist Tackler Relation ","1a5e4817":"### 5. Merge player and play_scout to define College name","b685fbb9":"## 8. CNN","04b98652":"![Kicker And Returner Relationship With Others Player Type](https:\/\/drive.google.com\/file\/d\/1bn9eT9lHND8gqGVwm6PA3fBbN1PuRTaE\/view?usp=sharing)\n\n","50d11e1a":"## 10. SVM","ced100d9":"## GNN","395cac7d":"## **Feature and Target Selection**\n\nAfter the pre-processing stage is complete, the selected feature will be used for data mining and modelling algorithm implementation.","4eddb588":"This notebook is intended to be a study of the NFL Big Data Bowl data, as well as some general engineering and building classification models of interest.\nThe major focus here is feature engineering, which uses four of the NFL's special teams datasets to develop a model that can predict whether a punt or a kickoff will result in a touchdown or not.\nAnother goal of this notebook is to explore more about the relation between players using Knowledge Graph and in the end, will result a recommender system\nSo, this notebook consist of 2 part :\nPart 1: Prediction Model\nPart 2: Knowledge Graph","e6917425":"## **BUILD MODEL & MATRIX EVALUATION**","c6820c95":"#### College Relation Between Returner and Punt Rusher","f2611424":"#### Graph Construction and Visualization","0287828a":"## **Modelling and Evaluation Matrix**\n\n1. We do the data mining techniques in this step. This process aims to extract potential patterns to obtain useful data that will be used to solve existing problems. We use traditional methods, namely Decission Tree, Random Forest, KNN, Linear Regression, SGD, SVC and advanced algorithms, namely SVM,MLP, and CNN. It aims to compare the method used to determine the toughness of the algorithm being tested.\n2. At this evaluation part, the results of data mining techniques in the form of typical patterns and predictive models are evaluated to assess whether the existing hypothesis is indeed achieved. We will use Evaluation metrics such as recall, f-1 score, and precision.\n\nI purposely run data modeling individually for each algorithm so that the data splitting process is also different and the data is randomized as a whole for each model","bcee4971":"### 2.2. Kicker and Tackler Relation","82a06776":"## 3. Decission Tree","26358b27":"#### Graph Construction and Visualization","e5173d6f":"### 2.1 Kicker and Gunners Relation","08424e10":"#### Merging Play scout and Track dataframe","598b38ae":"#### Graph Construction and Visualization","16b297a2":"# **PART II. KNOWLEDGE GRAPH**","a8f169c3":"## 3. Relation between Retuner and Other Player Type","0bd16618":"#### College Relation Between Returner and Vises","553a7831":"### 3.3 Returner and Vises Relation","4b1b189f":"#### College Relation","408d9771":"## 1. KNN","2ff86610":"### 1. Merge Plays and Scout dataset","9d6eb0a9":"#### Graph Construction and Visualization","aa82cb03":"#### College Relation","7856cfba":"## 2. Relation between Kicker and Other Player Type","0e8f75ce":"## 2. RF","43ac56b5":"#### In this part, I will generate new feature named \"eventScore\", ","d2eb8733":"#### College Relation Between Kicker and Assist Tackler","0508a717":"### 6. Encoding","098eb897":"## LOADING DATASET\nLoad Dataset into dataframe","35df7fb2":"## 1. Kicker Returner Relation","8ef3a709":"#### College Relation Between Returner and STS","73888cd2":" \n1.\tIntroduction\n\nAmerican Football is one of America's most popular strategic sports, played by two teams of eleven players on a rectangular field with goalposts at each end. Each team in American football consists of 3 different units: offensive team, defensive team, and special team, which have their respective functions in the game. Unlike offence or defence, special teams are responsible for scoring points and protecting points and field positions. According to Will Hewlett, special teams are one of the most overlooked aspects of football [1]. Although Many people might underestimate the impact of special teams because special team units are only on the field for about 20% of the play in most games, special team play can mean the difference between winning and losing[2]. The performance of a special team alone will not win a football game, but it can make a significant impact on the result, with a difference of more than a goal between the best and worst punt units.\nAs a collective term, Special teams are made up of several similar, but ultimately different, units: punt, punt return, kick-off, kick-off return, field goal\/PAT, and field goal\/PAT block[3]. Each unit has its specialization and specific strategies to get a score or good field position. In general, there are 4 types of games played by special teams, namely Kick off, Punt, Field Goal and Extra Point. Unlike Field Goal and Extra Point, Kickoff and Punt can change the game direction; besides aiming to secure the field position, this type of game also has its own risks and advantages. For example, if the kicking team do a Kick-off and the return team manages to catch the ball and bring it to the end of the opponent's zone, this will give the opponent a significant advantage. Therefore, selecting the play type result strategy from the type of game will determine the game's outcome. Because of the importance of the special team play type, especially Kick-off and Punt's performances, our goal is to predict the special team play type result to improve the team winning strategy. \nObjectives :\nThe long term goal of our project is to predict the special team play type result (score or not score) to improve the team winning strategy. The objective of our projects such as :\n1.\tTo predict the special team result ( score or not score) based on a related dataset provided by Kaggle.\n2.\tTo compare and evaluate the performance of the selected supervised learning algorithm.\n3.\tTo provide final recommendations to those in need regarding a good strategy in improving the special teams' performance.\n","43f3e009":"### To check wheter kicker and returner are from same college","257ef85e":"### 3.2 Returner and STS Relation","ee659497":"### GNN","86581444":"### **DATA PREPARATION**","bb45b269":"#### Graph Construction and Visualization","0ff9b695":"### 3.1 Returner and Punt Rusher Relation","ea87b2ca":"#### College Relation","a1098f1b":"### 3. Merge Plays_scout and players dataset","3b3716ec":"# Predicting Special Team Play Result and Player Recommendation Using Knowledge Graph","5952ecea":"### 2. Merge Plays_scout and games dataset","414afedf":"## 5. Linier SVC","481479b5":"## GRAPH ANALYSIS","920ae7f3":"#### Graph Construction and Visualization","c4d4fa76":"# **PART I. PREDICTION MODEL**\n\nPredicting Play Type Result ( Score or not Score)","d2b06466":"## 4. SVC","8f644b82":"#### Graph Construction and Visualization"}}