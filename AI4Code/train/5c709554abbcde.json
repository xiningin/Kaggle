{"cell_type":{"b6ee086b":"code","30a0c92e":"code","16414a52":"code","9dd49022":"code","268576f1":"code","33bfa371":"code","3bb3ed09":"code","d58035c1":"code","f63d61bf":"code","6ae1f7df":"code","5da8d30b":"code","4e7663fe":"code","22024dc9":"code","cffb0abb":"code","1a05dce4":"code","37d75ace":"code","a08e6f13":"code","a4b15e49":"code","eac40aa3":"code","91189d36":"code","f1deeaa9":"code","fddb84f3":"code","cfe532e3":"code","05fd1b1e":"code","b2ba0964":"code","af8f83ae":"code","de0fbe72":"code","e026d303":"code","dcf7fe28":"code","357b1c8f":"code","275f7b99":"code","27e3b332":"code","54a1d450":"code","d0ff1472":"code","46b5cd60":"code","ebbaec65":"code","44252329":"code","26624099":"code","d5945cec":"code","0d73b08e":"code","74d27477":"code","090cc9b8":"code","5f736206":"code","863ac501":"code","90297d63":"code","0d97bddb":"code","1407b966":"code","e1a6f323":"code","67009991":"code","f8896a20":"code","25f02051":"code","d7ee911d":"code","dab4c7ca":"code","f2bf8e7b":"code","1e1eb638":"code","4bbbae08":"code","9a272089":"code","645ba378":"code","bc28f1b1":"code","7d536666":"code","adcd779b":"code","a6dd9792":"code","7b9ad70e":"code","f4277c48":"code","d93329f6":"code","c328ffe8":"code","a3cca638":"code","221caddc":"code","3d51583d":"code","975f65c2":"code","e42a1eca":"code","75ed0925":"code","8a526ae3":"code","1fdc857d":"code","667b2059":"code","bfafb195":"code","b61101a7":"code","b54afca8":"code","1512582a":"code","71997269":"code","3f3f306e":"code","28070674":"code","20cc5a53":"code","cedcafcc":"code","2efea001":"code","12c9d8fa":"code","bba928a7":"code","8ee83e3b":"code","91a5077a":"code","2fda29cb":"code","4c5b4924":"code","ce21a391":"code","e11279fb":"code","6fb42823":"code","4f845cfe":"code","85ab2efa":"code","a1e603e7":"code","2c352096":"code","0e400fc8":"markdown","deaf5f4b":"markdown"},"source":{"b6ee086b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","30a0c92e":"df=pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","16414a52":"df.head(10)","9dd49022":"df.isnull().sum()","268576f1":"import seaborn as sns","33bfa371":"sns.boxplot(df['Pregnancies'])","3bb3ed09":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","d58035c1":"df.isnull().sum()","f63d61bf":"def median_target(var):   \n    temp = df[df[var].notnull()]\n    temp = temp[[var, 'Outcome']].groupby(['Outcome'])[[var]].median().reset_index()\n    return temp","6ae1f7df":"median_target('Insulin')","5da8d30b":"df.loc[(df['Outcome'] == 0 ) & (df['Insulin'].isnull()), 'Insulin'] = 102.5\ndf.loc[(df['Outcome'] == 1 ) & (df['Insulin'].isnull()), 'Insulin'] = 169.5","4e7663fe":"median_target('Glucose')","22024dc9":"df.loc[(df['Outcome'] == 0 ) & (df['Glucose'].isnull()), 'Glucose'] = 107\ndf.loc[(df['Outcome'] == 1 ) & (df['Glucose'].isnull()), 'Glucose'] = 140","cffb0abb":"median_target('SkinThickness')","1a05dce4":"df.loc[(df['Outcome'] == 0 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = 27\ndf.loc[(df['Outcome'] == 1 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = 32","37d75ace":"median_target('BloodPressure')","a08e6f13":"df.loc[(df['Outcome'] == 0 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = 70\ndf.loc[(df['Outcome'] == 1 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = 74.5","a4b15e49":"median_target('BMI')","eac40aa3":"df.loc[(df['Outcome'] == 0 ) & (df['BMI'].isnull()), 'BMI'] = 30.1\ndf.loc[(df['Outcome'] == 1 ) & (df['BMI'].isnull()), 'BMI'] = 34.3","91189d36":"df.loc[:,'N1']=0\ndf.loc[(df['Age']<=30) & (df['Glucose']<=120),'N1']=1","f1deeaa9":"df.loc[:,'N2']=0\ndf.loc[(df['BMI']<=30),'N2']=1","fddb84f3":"df.loc[:,'N3']=0\ndf.loc[(df['Age']<=30) & (df['Pregnancies']<=6),'N3']=1","cfe532e3":"df.loc[:,'N4']=0\ndf.loc[(df['Glucose']<=105) & (df['BloodPressure']<=80),'N4']=1","05fd1b1e":"df.loc[:,'N5']=0\ndf.loc[(df['SkinThickness']<=20) ,'N5']=1","b2ba0964":"df.loc[:,'N6']=0\ndf.loc[(df['BMI']<30) & (df['SkinThickness']<=20),'N6']=1","af8f83ae":"df.loc[:,'N7']=0\ndf.loc[(df['Glucose']<=105) & (df['BMI']<=30),'N7']=1","de0fbe72":"df.loc[:,'N9']=0\ndf.loc[(df['Insulin']<200),'N9']=1","e026d303":"df.loc[:,'N10']=0\ndf.loc[(df['BloodPressure']<80),'N10']=1","dcf7fe28":"df.loc[:,'N11']=0\ndf.loc[(df['Pregnancies']<4) & (df['Pregnancies']!=0) ,'N11']=1","357b1c8f":"df['N0'] = df['BMI'] * df['SkinThickness']\n\ndf['N8'] =  df['Pregnancies'] \/ df['Age']\n\ndf['N13'] = df['Glucose'] \/ df['DiabetesPedigreeFunction']\n\ndf['N12'] = df['Age'] * df['DiabetesPedigreeFunction']\n\ndf['N14'] = df['Age'] \/ df['Insulin']\n","275f7b99":"df.loc[:,'N15']=0\ndf.loc[(df['N0']<1034) ,'N15']=1","27e3b332":"df.head()","54a1d450":"df.shape","d0ff1472":" from sklearn.preprocessing import StandardScaler","46b5cd60":"X = df.drop(['Outcome'], 1)\ny = df['Outcome']","ebbaec65":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,classification_report,roc_curve,accuracy_score\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","44252329":"std = StandardScaler()\nx_train = std.fit_transform(x_train)\nx_test = std.transform(x_test)","26624099":"from keras.utils import np_utils\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Activation, Conv2D,MaxPooling2D, Flatten","d5945cec":"model = Sequential()\nmodel.add(Dense(32,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))","0d73b08e":"print(model.summary())\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer=\"sgd\",metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=200, verbose=1, validation_data=(x_test, y_test))\nloss, accuracy = model.evaluate(x_test,y_test, verbose=0)\nprint(\"Loss : \"+str(loss))\nprint(\"Accuracy :\"+str(accuracy*100.0))","74d27477":"from sklearn.svm import SVC\nmodel=SVC(kernel='linear')\nmodel.fit(x_train,y_train)","090cc9b8":"y_pred=model.predict(x_test)","5f736206":"accuracy_score(y_test,y_pred)","863ac501":"confusion_matrix(y_test,y_pred)","90297d63":"target_col = [\"Outcome\"]\ncat_cols   = df.nunique()[df.nunique() < 12].keys().tolist()\ncat_cols   = [x for x in cat_cols ]","0d97bddb":"num_cols   = [x for x in df.columns if x not in cat_cols + target_col]","1407b966":"std = StandardScaler()\nscaled = std.fit_transform(df[num_cols])\nscaled = pd.DataFrame(scaled,columns=num_cols)","e1a6f323":"plt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","67009991":"df['SkinThickness']=","f8896a20":"df.loc[(df['Outcome'] == 0 ) & (df['SkinThickness']>35), 'SkinThickness'] = 27","25f02051":"df.loc[(df['Outcome'] == 1 ) & (df['SkinThickness']>35), 'SkinThickness'] = 32","d7ee911d":"plt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","dab4c7ca":"median_target('Pregnancies')","f2bf8e7b":"df.loc[(df['Outcome'] == 0 ) & (df['Pregnancies']>13), 'Pregnancies'] = 2","1e1eb638":"df.loc[(df['Outcome'] == 1 ) & (df['Pregnancies']>13), 'Pregnancies'] = 4","4bbbae08":"median_target('BloodPressure')","9a272089":"sns.boxplot(df['BloodPressure'])","645ba378":"df.loc[(df['Outcome'] == 1 ) & (df['BloodPressure']>105), 'BloodPressure'] = 74.5","bc28f1b1":"df.loc[(df['Outcome'] == 0 ) & (df['BloodPressure']>105), 'BloodPressure'] = 70","7d536666":"sns.boxplot(df['Age'])","adcd779b":"median_target('Age')","a6dd9792":"df.loc[(df['Outcome'] == 1 ) & (df['Age']>65), 'Age'] = 36","7b9ad70e":"df.loc[(df['Outcome'] == 0 ) & (df['Age']>65), 'Age'] = 27","f4277c48":"plt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","d93329f6":"median_target('BMI')","c328ffe8":"sns.boxplot(df['BMI'])","a3cca638":"df.loc[(df['Outcome'] == 1 ) & (df['BMI']>50), 'BMI'] = 34.5","221caddc":"df.loc[(df['Outcome'] == 0 ) & (df['BMI']>50), 'BMI'] = 30.1","3d51583d":"sns.boxplot(df['BMI'])","975f65c2":"plt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","e42a1eca":"scaled.head()","75ed0925":"# Def X and Y\nX = df.drop('Outcome', 1)\ny = df['Outcome']","8a526ae3":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,classification_report,roc_curve,accuracy_score\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","1fdc857d":"from sklearn.svm import SVC\nmodel=SVC(kernel='linear')\nmodel.fit(x_train,y_train)","667b2059":"from sklearn.model_selection import GridSearchCV \n  \n# defining parameter range \nparam_grid = {'C': [0.1, 1, 10, 100, 1000],  \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n              'kernel': ['rbf']}  \n  \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3) \n  \n# fitting the model for grid search \ngrid.fit(x_train, y_train) \n","bfafb195":"print(grid.best_params_) ","b61101a7":"print(grid.best_estimator_) ","b54afca8":"model=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n                           decision_function_shape='ovr', degree=3,\n                           gamma='auto_deprecated', kernel='linear', max_iter=-1,\n                           probability=False, random_state=None, shrinking=True,\n                           tol=0.001, verbose=False)\nmodel.fit(x_train,y_train)","1512582a":"y_pred=model.predict(x_test)","71997269":"confusion_matrix(y_test,y_pred)","3f3f306e":"accuracy_score(y_test,y_pred)","28070674":"from sklearn.metrics import classification_report","20cc5a53":"print(classification_report(y_test, y_pred))","cedcafcc":" from sklearn.neighbors import KNeighborsClassifier\nharsh=KNeighborsClassifier(n_neighbors=25)","2efea001":"harsh.fit(x_train,y_train)","12c9d8fa":"y_pred=harsh.predict(x_test)","bba928a7":"confusion_matrix(y_test,y_pred)\n","8ee83e3b":"accuracy_score(y_test,y_pred)","91a5077a":" from sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier","2fda29cb":"knn_clf = KNeighborsClassifier(n_neighbors = 25)\nharsh=VotingClassifier(estimators = [('knn', knn_clf), ('lgbm', lgbm_clf)],\n                      weights = [1,1]))","4c5b4924":"df['Insulin']=df['Insulin'].fillna(df['Insulin'].median())","ce21a391":"df['SkinThickness']=df['SkinThickness'].fillna(df['SkinThickness'].median())","e11279fb":"df['BloodPressure']=df['BloodPressure'].fillna(df['BloodPressure'].median())","6fb42823":"df['BMI']=df['BMI'].fillna(df['BMI'].median())","4f845cfe":"df['Glucose']=df['Glucose'].fillna(df['Glucose'].median())","85ab2efa":"df.isnull().sum()","a1e603e7":"plt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","2c352096":"plot_distribution('Glucose', 0)","0e400fc8":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","deaf5f4b":"median_target('Insulin')"}}