{"cell_type":{"1f32c57b":"code","dcb197c3":"code","02355898":"code","61dd4e69":"code","ef4ebf1c":"code","adb81b6a":"code","0b2dfd7b":"code","34f800fa":"code","49d61ff5":"code","45479c00":"code","ca996e40":"code","d32258a3":"code","ddad0759":"code","d85a783e":"code","850018f8":"code","5ea1f0de":"code","23180618":"code","a4fc8f69":"code","4798b699":"code","13224fa3":"code","6fb42689":"code","2300e768":"code","2e21a06e":"code","0cfa0358":"code","538002c2":"code","dfb1f1ed":"code","df64b109":"code","9ec50b71":"code","3c1787b8":"code","ab929368":"code","cc44c6c3":"code","ede703be":"code","177c165f":"code","5d031392":"code","da7f3a13":"code","70b695b5":"code","dbfd0326":"code","b4e969d8":"code","0828aaf3":"code","79406de6":"code","038d6fd5":"code","7ff50788":"code","921956e7":"code","84cb59cd":"code","2959af0e":"code","77ffa56d":"code","929e3280":"code","0792e4b8":"code","efcbb38a":"code","cb942c3f":"code","3fde0d70":"markdown","9c5b89c8":"markdown","8bac8bdd":"markdown","67b9b856":"markdown","ecd21ab6":"markdown","c00cc1bb":"markdown","304c50ba":"markdown"},"source":{"1f32c57b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport sklearn\nimport tensorflow as tf\nfrom tensorflow import keras","dcb197c3":"data_path = '..\/input\/kobe-bryant-shot-selection\/data.csv.zip'\n\ndf = pd.read_csv(data_path)\ndf.head()","02355898":"cols_to_drop = ['game_id', 'game_event_id', 'lat', 'lon', 'team_id', 'team_name', 'matchup', 'game_date']\n\ndf = df.drop(cols_to_drop, axis=1)\ndf","61dd4e69":"test_data = df.loc[df['shot_made_flag'].isnull()]\ntest_data.head()","ef4ebf1c":"df = df[df['shot_made_flag'].notna()]\ndf = df.drop('shot_id', axis=1)\n\ndf.head()","adb81b6a":"corr = df.corr()\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5)","0b2dfd7b":"corr","34f800fa":"cols_to_drop = ['loc_x', 'playoffs']\n\ndf = df.drop(cols_to_drop, axis=1)\ndf.head()","49d61ff5":"df['action_type'].value_counts()","45479c00":"df['combined_shot_type'].value_counts()","ca996e40":"df = df.drop('action_type', axis=1)","d32258a3":"df['time_remainig'] = df['minutes_remaining'] * 60 + df['seconds_remaining']\ndf.head()","ddad0759":"df = df.drop(['minutes_remaining', 'seconds_remaining'], axis=1)\ndf.head()","d85a783e":"def category_feature_importance(feature, target, col_wrap=4):\n    print(df[feature].value_counts())\n    sns.catplot(target, col=feature, col_wrap=col_wrap, data=df, \n        kind=\"count\", height=4, aspect=.8)","850018f8":"category_feature_importance('shot_type', 'shot_made_flag')","5ea1f0de":"category_feature_importance('shot_zone_area', 'shot_made_flag', 3)","23180618":"category_feature_importance('shot_zone_basic', 'shot_made_flag')","a4fc8f69":"category_feature_importance('opponent', 'shot_made_flag', 5)","4798b699":"category_feature_importance('season', 'shot_made_flag')","13224fa3":"df.head()","6fb42689":"df.groupby('shot_made_flag').mean()['loc_y'].plot(kind='bar')","2300e768":"sns.stripplot(\"shot_distance\", data=df)  # Above 70 shot distance","2e21a06e":"sns.stripplot(\"loc_y\", data=df)  # Above 600 shot distance","0cfa0358":"filt = (df['loc_y'] < 600) & (df['shot_distance'] < 70)\ndf = df[filt]","538002c2":"sns.stripplot(\"loc_y\", data=df)","dfb1f1ed":"def cols_to_convert_to_int(df, cols):\n    def categorical_to_int(series):\n        temp = {x: i for i, x in enumerate(series.unique())}\n        series = series.apply(lambda x:temp[x])\n        return series\n    for col in cols:\n        df[col] = categorical_to_int(df[col])","df64b109":"cols_to_convert_to_int(df, ['combined_shot_type', 'season', 'shot_type', 'shot_zone_area', 'shot_zone_basic', 'shot_zone_range', 'opponent'])\ndf.head()","9ec50b71":"# Scale the df\ndf = (df - df.mean())\/df.std()\ndf.head()","3c1787b8":"df = df.sample(frac = 1) ","ab929368":"all_labels = df['shot_made_flag']\nall_data = df.drop('shot_made_flag', axis=1)\n\nassert(len(all_labels) == len(all_data))","cc44c6c3":"from keras.utils import to_categorical\n\ntrain_size = int((80\/100) * df.shape[0])\n\ntrain_data = all_data[: train_size].values\ntrain_labels = to_categorical(all_labels[: train_size].values)\n\nvalid_data = all_data[train_size: ].values\nvalid_labels = to_categorical(all_labels[train_size: ].values)\n\n# np.random.seed(42)\n# np.random.shuffle(train_data)\n\nassert(len(train_data) == len(train_labels))\nassert(len(valid_data) == len(valid_labels))","ede703be":"print(train_labels[: 2])\nprint(train_data[: 2])","177c165f":"model = keras.models.Sequential([\n    keras.layers.Dense(32),\n    keras.layers.Dropout(0.5),\n    keras.layers.LeakyReLU(),\n    keras.layers.Dense(2, activation='softmax'),\n])\n\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['acc'])","5d031392":"my_cb = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\n\nhistory = model.fit(train_data, train_labels, epochs=200, \n              validation_data=(valid_data, valid_labels),\n              callbacks=[my_cb])","da7f3a13":"print(history.history.keys())\nepochs = len(history.history['loss'])\nepochs","70b695b5":"y1 = history.history['loss']\ny2 = history.history['val_loss']\nx = np.arange(1, epochs+1)\n\nplt.plot(x, y1, y2)\nplt.legend(['loss', 'val_loss'])\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.tight_layout()","dbfd0326":"y1 = history.history['acc']\ny2 = history.history['val_acc']\nx = np.arange(1, epochs+1)\n\nplt.plot(x, y1, y2)\nplt.legend(['acc', 'val_acc'])\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.tight_layout()","b4e969d8":"res = model.evaluate(valid_data, valid_labels)","0828aaf3":"df.head()","79406de6":"test_data['time_remaining'] = test_data['minutes_remaining'] * 60 + test_data['seconds_remaining']\ntest_data = test_data.drop(['action_type', 'loc_x', 'playoffs', 'minutes_remaining', 'seconds_remaining'], axis=1)\ncols_to_convert_to_int(test_data, ['combined_shot_type', 'season', 'shot_type', 'shot_zone_area', 'shot_zone_basic', 'shot_zone_range', 'opponent'])\ntest_data.head()","038d6fd5":"id_nums = test_data['shot_id']\ntest_data = test_data.drop('shot_id', axis=1)","7ff50788":"test_data = test_data.drop('shot_made_flag', axis=1)\ntest_data.head()","921956e7":"test_data = (test_data - test_data.mean())\/test_data.std()\ntest_data.head()","84cb59cd":"test = test_data.values\ntest[: 2]","2959af0e":"assert(len(train_data[0]) == len(test[0]))","77ffa56d":"ans = model.predict(test)","929e3280":"answers = []\nfor entry in ans:\n    answers.append(entry[1])","0792e4b8":"final = pd.DataFrame({'shot_id': id_nums, 'shot_made_flag': answers})","efcbb38a":"final.head()","cb942c3f":"kaggle_output_path = '.\/submission.csv'\nfinal.to_csv(kaggle_output_path, index=False)","3fde0d70":"# Data Preparation","9c5b89c8":"# Data Preprocessing","8bac8bdd":"# Training the model","67b9b856":"# Evaluating the model","ecd21ab6":"# Building and Compiling the model","c00cc1bb":"# Make predictions","304c50ba":"# Let's bring in the imports and the data"}}