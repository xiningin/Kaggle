{"cell_type":{"61b97e4c":"code","a3a4ecf8":"code","07dd8ed2":"code","4493f57b":"code","1d421a49":"code","ddf33b80":"code","4999968e":"code","b55d4374":"code","4444b1d5":"code","f7046df2":"code","fdd25196":"code","c6d9ccc2":"code","25cf5a52":"code","ff318e17":"code","1c47403b":"code","222b3b4f":"code","1adfd126":"code","ba203f60":"code","551e7541":"code","db818490":"code","aee7193a":"code","5de318c9":"code","6c532518":"code","6cff9586":"code","9e082557":"code","e5be3822":"code","85578a2d":"code","4745332b":"code","3bc13b39":"code","ea099bf7":"code","b17749a0":"code","05e33b87":"code","3914343b":"code","905d019b":"code","a6a529b3":"code","f317d239":"code","548437ab":"code","5d175bc5":"code","4f4efcf2":"code","073fc078":"code","046f6074":"code","aa6a5bbb":"code","3788fed5":"markdown","7e5bc8fa":"markdown","1627ff14":"markdown","5e880b73":"markdown","4d5a8a46":"markdown","01b01ecc":"markdown","0efec0cb":"markdown","988b2301":"markdown","618d9c9b":"markdown","5d009720":"markdown","77d5806f":"markdown","bf762d91":"markdown","b418c372":"markdown","636648f8":"markdown","bd0cd826":"markdown","b8fd0d72":"markdown","edae6590":"markdown","dd664e83":"markdown"},"source":{"61b97e4c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor as vif\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.model_selection import train_test_split,RandomizedSearchCV,GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nimport statsmodels.api as sm\nfrom sklearn.metrics import accuracy_score,f1_score,confusion_matrix,roc_auc_score,roc_curve,classification_report","a3a4ecf8":"!pip install openpyxl","07dd8ed2":"df=pd.read_excel('..\/input\/bank-loan-modelling\/Bank_Personal_Loan_Modelling.xlsx', 'Data')\ndf.head()","4493f57b":"df.drop(['ID','ZIP Code'],axis=1,inplace=True)","1d421a49":"df.shape","ddf33b80":"cat_col=['Education','Family','Securities Account','CD Account','Online','CreditCard']\nnum_col=['Age','Experience','Income','Mortgage','CCAvg']","4999968e":"fig, ax = plt.subplots(3,2, figsize=(14,12))\naxes_ = [axes_row for axes in ax for axes_row in axes]\n\nfor i,col in enumerate(cat_col):\n    sns.countplot(data=df,x=col,ax=axes_[i])\n    if col=='advertiser_id':\n        plt.xticks(rotation=90)\n    plt.tight_layout()","b55d4374":"fig, ax = plt.subplots(3,2, figsize=(14,12))\naxes_ = [axes_row for axes in ax for axes_row in axes]\n\nfor i,col in enumerate(num_col):\n    sns.histplot(data=df,x=col,ax=axes_[i])\n    if col=='advertiser_id':\n        plt.xticks(rotation=90)\n    plt.tight_layout()","4444b1d5":"sns.countplot(data=df,x='Personal Loan')\nplt.show()","f7046df2":"for i in ['Family','Education']:\n    print(i,'\\n',df[i].nunique())","fdd25196":"df = pd.get_dummies(df,columns=['Education'],drop_first=True)","c6d9ccc2":"df.isnull().sum()","25cf5a52":"df['Experience']=df['Experience'].replace({-1:1,-2:2,-3:3})","ff318e17":"for i in df[num_col]:\n    sns.boxplot(x=df[i],orient='h')\n    plt.show()","1c47403b":"for i in ['Income','CCAvg','Mortgage']:\n    print(f'Skewness of {i}:',df[i].skew())","222b3b4f":"for i in ['Income','CCAvg','Mortgage']:\n    sns.boxplot(x=np.sqrt(df[i]),orient='h')\n    plt.show()","1adfd126":"for i in ['Income','CCAvg','Mortgage']:\n    sns.boxplot(x=np.log1p(df[i]),orient='h')\n    plt.show()","ba203f60":"for i in ['Income','CCAvg','Mortgage']:\n    df[i]=np.log1p(df[i])","551e7541":"df['Personal Loan'].value_counts()","db818490":"X = df.drop('Personal Loan',axis=1)\ny = df['Personal Loan']","aee7193a":"from imblearn.over_sampling import SMOTE","5de318c9":"smote = SMOTE(sampling_strategy = 'minority',random_state = 4)\n\nX,y = smote.fit_resample(X,y)","6c532518":"y.value_counts()","6cff9586":"sns.pairplot(df,diag_kind='kde')\nplt.show()","9e082557":"Xc = sm.add_constant(X)\n\nmodel = sm.Logit(y,Xc).fit()\nmodel.summary()","e5be3822":"pd.DataFrame(model.pvalues,X.columns)","85578a2d":"plt.figure(figsize=(12,10))\nsns.heatmap(df.corr(),annot=True)\nplt.show()","4745332b":"X = df.drop(['Personal Loan'],axis=1)\ny = df['Personal Loan']\n\nXc = sm.add_constant(X)\n\nmodel = sm.Logit(y,Xc).fit()\nmodel.summary()","3bc13b39":"pd.DataFrame([vif(Xc.values,i) for i in range(Xc.shape[1])],Xc.columns)","ea099bf7":"X = df.drop(['Personal Loan','Experience'],axis=1)\ny = df['Personal Loan']\n\nXc = sm.add_constant(X)\n\nmodel = sm.Logit(y,Xc).fit()\nmodel.summary()","b17749a0":"pd.DataFrame([vif(Xc.values,i) for i in range(Xc.shape[1])],Xc.columns)","05e33b87":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","3914343b":"X_trainc = sm.add_constant(X_train)\nmodel = sm.Logit(y_train,X_trainc).fit()\ny_train_prob=model.predict(X_trainc)\ny_train_pred=y_train_prob.apply(lambda x: 1 if x>0.5 else 0)\n\nprint('Train')\nprint('ROC AUC:',roc_auc_score(y_train,y_train_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_train,y_train_pred))\nprint('Accuracy Score',accuracy_score(y_train,y_train_pred))\n\nX_testc = sm.add_constant(X_test)\ny_test_prob=model.predict(X_testc)\ny_test_pred=y_test_prob.apply(lambda x: 1 if x>0.5 else 0)\n\nprint('\\n\\nTest')\nprint('ROC AUC:',roc_auc_score(y_test,y_test_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_test,y_test_pred))\nprint('Accuracy Score',accuracy_score(y_test,y_test_pred))","905d019b":"rfc = RandomForestClassifier()\nparams = {'n_estimators':sp_randint(50,250),\n          'max_depth':sp_randint(1,15),\n         'min_samples_split':sp_randint(2,50),\n          'min_samples_leaf':sp_randint(1,20),\n          'max_features':sp_randint(1,9),\n          'criterion':['gini','entropy']}\n\nrsearch = RandomizedSearchCV(rfc,param_distributions=params,cv=3,n_iter=100,n_jobs=-1,scoring='roc_auc',random_state=4)\nrsearch.fit(X,y)\nrsearch.best_params_","a6a529b3":"rfc=RandomForestClassifier(**rsearch.best_params_,random_state=4)\nrfc.fit(X_train,y_train)\ny_train_pred=rfc.predict(X_train)\ny_train_prob=rfc.predict_proba(X_train)[:,1]\n\nprint('Train')\nprint('ROC AUC:',roc_auc_score(y_train,y_train_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_train,y_train_pred))\nprint('Accuracy Score',accuracy_score(y_train,y_train_pred))\n\ny_test_prob=rfc.predict_proba(X_test)[:,1]\ny_test_pred=rfc.predict(X_test)\n\nprint('\\n\\nTest')\nprint('ROC AUC:',roc_auc_score(y_test,y_test_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_test,y_test_pred))\nprint('Accuracy Score',accuracy_score(y_test,y_test_pred))","f317d239":"import lightgbm as lgb\nlgbmc = lgb.LGBMClassifier(random_state=4)\n\nparams = {'n_estimators':sp_randint(50,250),\n          'max_depth':sp_randint(1,15),\n          'num_leaves':sp_randint(10,50),\n         'learning_rate':sp_uniform(0.01,1)}\n\nrsearch = RandomizedSearchCV(lgbmc,param_distributions=params,cv=3,n_iter=100,n_jobs=-1,scoring='roc_auc',random_state=4)\nrsearch.fit(X,y)\nrsearch.best_params_","548437ab":"lgbmc=lgb.LGBMClassifier(**rsearch.best_params_,random_state=4)\nlgbmc.fit(X_train,y_train)\ny_train_pred=lgbmc.predict(X_train)\ny_train_prob=lgbmc.predict_proba(X_train)[:,1]\n\nprint('Train')\nprint('ROC AUC:',roc_auc_score(y_train,y_train_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_train,y_train_pred))\nprint('Accuracy Score',accuracy_score(y_train,y_train_pred))\n\ny_test_prob=lgbmc.predict_proba(X_test)[:,1]\ny_test_pred=lgbmc.predict(X_test)\n\nprint('\\n\\nTest')\nprint('ROC AUC:',roc_auc_score(y_test,y_test_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_test,y_test_pred))\nprint('Accuracy Score',accuracy_score(y_test,y_test_pred))","5d175bc5":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()","4f4efcf2":"from sklearn.neighbors import KNeighborsClassifier","073fc078":"Xs=ss.fit_transform(X)\nknn = KNeighborsClassifier()\n\nparams = {'n_neighbors':[i for i in range(1,21)],\n         'p':np.arange(1,6)}\n\ngsearch = GridSearchCV(knn,param_grid=params,scoring='roc_auc',cv=3)\ngsearch.fit(X,y)\n\ngsearch.best_params_","046f6074":"X_trains = ss.fit_transform(X_train)\nX_tests = ss.transform(X_test)","aa6a5bbb":"knn=KNeighborsClassifier(**gsearch.best_params_)\nknn.fit(X_train,y_train)\ny_train_pred=knn.predict(X_train)\ny_train_prob=knn.predict_proba(X_train)[:,1]\n\nprint('Train')\nprint('ROC AUC:',roc_auc_score(y_train,y_train_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_train,y_train_pred))\nprint('Accuracy Score',accuracy_score(y_train,y_train_pred))\n\ny_test_prob=knn.predict_proba(X_test)[:,1]\ny_test_pred=knn.predict(X_test)\n\nprint('\\n\\nTest')\nprint('ROC AUC:',roc_auc_score(y_test,y_test_prob))\nprint('Confusion Matrix:\\n',confusion_matrix(y_test,y_test_pred))\nprint('Accuracy Score',accuracy_score(y_test,y_test_pred))","3788fed5":"## Statistical Model","7e5bc8fa":"#### 'Education' is category while 'Family' is not. The 'Family' column denotes the size of the family and therefor it is a numerical variable","1627ff14":"## Exploratory Data Analysis ","5e880b73":"After dropping Experience the multicollinearity has reduced. So we can continue with the remaiing variables","4d5a8a46":"From this we understand that the dependent variable (target) is highly imbalanced","01b01ecc":"### Removing Imbalance in Target Variable","0efec0cb":"There are no null values in the data","988b2301":"From the above plot we understand that there are outliers in Income, CCAvg, and Mortgage.","618d9c9b":"Transforming the threee variables with log transform gives the best result.","5d009720":"### Dropping columns that provide no value to model building or analysis","77d5806f":"#### Correcting Errors in the Expereience column, nobody can have negative experience. We assume it's mistake while capturing the data. We map them to their positive values.","bf762d91":"## Random Forest Classifier","b418c372":"#### LGBM","636648f8":"Age and Experience exhibit multicollinearity among them. So we drop Experience first and check for multicollinearity.","bd0cd826":"#### Testing Scores of the base statistical model","b8fd0d72":"#### Checking for multicollinearity","edae6590":"Model scores for train and test are very good and very similar with a high accuracy.","dd664e83":"### Dummifying Categorical Variables"}}