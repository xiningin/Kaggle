{"cell_type":{"303123bf":"code","9fabf772":"code","d9b23b9d":"code","2bb8390c":"code","42254446":"code","0a53a8f5":"code","ddaef352":"code","02bdf657":"code","550d9216":"code","8ec71cc2":"code","a6295b6f":"code","447e169b":"code","030f51f1":"code","98d5572d":"code","3cc07623":"code","fada3dc8":"code","975ec67e":"code","14e0985b":"code","2662a098":"code","5762d73e":"code","7dd3fd56":"code","33f18f3b":"code","175c22bb":"code","d09deb9a":"code","9c89e3ce":"code","0ed64bb4":"code","e33d4446":"code","a1b5d5cd":"code","60c2abc1":"code","332c531e":"code","116a35eb":"code","b4f7f49d":"code","1e55a522":"code","cd31d258":"code","9b4aa258":"code","4b538efc":"code","45d179b9":"code","53df5ca1":"code","36b31604":"markdown","51675121":"markdown","924d5cc1":"markdown","c9db57e5":"markdown","d8c27191":"markdown","c105dc8b":"markdown","103d2cab":"markdown","45512afb":"markdown","1827079c":"markdown","19ca5424":"markdown","3164b1df":"markdown","828adcbc":"markdown","e9174216":"markdown"},"source":{"303123bf":"!pip3 install ipywidgets\n!jupyter nbextension enable --py --sys-prefix widgetsnbextension\n!pip install torchtext==0.2.3\n!pip install Pillow==4.1.1\n!pip install blosc\n## Fastai 0.7 with minor changes has been installed from personal Gitub repo : https:\/\/github.com\/pritesh2312\/fastai-v0.7","9fabf772":"%load_ext autoreload\n%autoreload 2\n%matplotlib inline","d9b23b9d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\n\nfrom fastai.imports import *\nfrom fastai.torch_imports import *\nfrom fastai.io import *\n\nimport os\nprint(os.listdir(\"..\/input\"))","2bb8390c":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\ntrain.head()","42254446":"df_trn = train.drop(['label'], axis = 1)\ny_trn =  train['label']\n\nx_train, x_val, y_train, y_val = train_test_split(df_trn, y_trn, test_size=0.33, random_state=42)","0a53a8f5":"x_train = x_train.values\ntype(x_train), x_train.shape","ddaef352":"y_train = y_train.values\ntype(y_train), y_train.shape","02bdf657":"x_val = x_val.values\ntype(x_val), x_val.shape","550d9216":"y_val = y_val.values\ntype(y_val), y_val.shape","8ec71cc2":"x_test = test.values","a6295b6f":"mean = x_train.mean()\nstd = x_train.std()\n\nx_train = (x_train-mean)\/std\nmean, std, x_train.mean(), x_train.std()","447e169b":"x_val = (x_val-mean)\/std\nx_val.mean(), x_val.std()","030f51f1":"x_test = (x_test-mean)\/std\nx_test.mean(), x_test.std()","98d5572d":"def show(img, title=None):\n    plt.imshow(img, cmap=\"gray\")\n    if title is not None: plt.title(title)","3cc07623":"def plots(ims, figsize=(12,6), rows=2, titles=None):\n    f = plt.figure(figsize=figsize)\n    cols = len(ims)\/\/rows\n    for i in range(len(ims)):\n        sp = f.add_subplot(rows, cols, i+1)\n        sp.axis('Off')\n        if titles is not None: sp.set_title(titles[i], fontsize=16)\n        plt.imshow(ims[i], cmap='gray')","fada3dc8":"x_imgs = np.reshape(x_val, (-1,28,28)); x_imgs.shape","975ec67e":"show(x_imgs[0], y_val[0])","14e0985b":"plots(x_imgs[:8], titles=y_val[:8])","2662a098":"from fastai.metrics import *\nfrom fastai.model import *\nfrom fastai.dataset import *\n\nimport torch.nn as nn","5762d73e":"net = nn.Sequential(\n    nn.Linear(28*28, 100),\n    nn.ReLU(),\n    nn.Linear(100, 100),\n    nn.ReLU(),\n    nn.Linear(100, 10),\n    nn.LogSoftmax()\n#).cuda()  ## For GPU\n)         ## For CPU","7dd3fd56":"loss=nn.NLLLoss()\nmetrics=[accuracy]\n# opt=optim.SGD(net.parameters(), 1e-1, momentum=0.9)\nopt=optim.SGD(net.parameters(), 1e-1, momentum=0.9, weight_decay=1e-3)","33f18f3b":"#?ImageClassifierData.from_arrays","175c22bb":"md = ImageClassifierData.from_arrays('..\/input\/', (x_train,y_train), (x_val, y_val), test = x_test)","d09deb9a":"fit(net, md, n_epochs=5, crit=loss, opt=opt, metrics=metrics)","9c89e3ce":"set_lrs(opt, 1e-2)","0ed64bb4":"fit(net, md, n_epochs=10, crit=loss, opt=opt, metrics=metrics)","e33d4446":"preds = predict(net, md.val_dl)\npreds.shape","a1b5d5cd":"preds = preds.argmax(1)","60c2abc1":"np.mean(preds == y_val)","332c531e":"plots(x_imgs[:8], titles=preds[:8])","116a35eb":"preds = predict(net, md.test_dl)\npreds.shape","b4f7f49d":"#??predict(net, )","1e55a522":"preds = preds.argmax(1)","cd31d258":"test_imgs = np.reshape(x_test, (-1,28,28)); test_imgs.shape","9b4aa258":"plots(test_imgs[:8], titles=preds[:8])","4b538efc":"submit = pd.read_csv('..\/input\/sample_submission.csv')\nsubmit.head()","45d179b9":"submit['Label'] = preds\nsubmit.head()","53df5ca1":"submit.to_csv(\"pytorch_v1.csv\", index=False)  ## To avoid adding the first column of row nos","36b31604":"### Validation accuracy","51675121":"The predictions seem reasonably accurate. Let's submit the predictions !!","924d5cc1":"## Look at the data\nPlotting functions","c9db57e5":"### Performance on sample validation set images","d8c27191":"## Preparing training, validation and test sets","c105dc8b":"Convert to dataframes to numpy to work with PyTorch & fast.ai libraries","103d2cab":"## Imports and settings","45512afb":"## Predict on Test Set","1827079c":"## Normalization","19ca5424":"## Predictions on Validation set","3164b1df":"### Performance on Test Set images","828adcbc":"## Submission","e9174216":"## Creating the model"}}