{"cell_type":{"619dce37":"code","c5d7d9b2":"code","611ff945":"code","14f44e05":"code","96079c12":"code","f6eab120":"code","4e5de297":"code","ade43ba6":"code","a62c03e1":"code","d05d859b":"code","db505c93":"code","bbc7326c":"code","ec36f0f0":"code","25426bbc":"code","b78c475a":"code","ccef4b53":"code","f93072c6":"code","ccf64aec":"code","dc08e1a7":"code","ec4ef1f8":"code","c71dcd8d":"code","863c3ceb":"code","89ca9b24":"code","3d144c99":"code","5db0f2d6":"code","f33053c0":"code","7e7455d3":"code","e3ac9ccf":"code","558101e4":"code","5f9df04f":"code","be2b829b":"code","116b62f0":"code","602175b1":"code","374fc32f":"code","e6a0742d":"code","1f62f35a":"code","c504d521":"code","53ff62e4":"code","e0538341":"code","71e12437":"code","e45e4298":"code","66f63cc8":"code","4813c3ae":"code","6d94d8d3":"markdown","3a13aaf7":"markdown","660f7fdb":"markdown","06b277e5":"markdown","0fb2cfb3":"markdown","1fc136af":"markdown","901f99ab":"markdown","b1f16839":"markdown","3a67b7b3":"markdown","cf72ec40":"markdown","5b0d93a8":"markdown","f2715ae1":"markdown","9b6b6c00":"markdown","c77ef6f6":"markdown","840579f0":"markdown","f7c0fcc9":"markdown","0b11ac5c":"markdown","b68180c6":"markdown","cb695941":"markdown","3a346f87":"markdown","1b505835":"markdown"},"source":{"619dce37":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Missingno is a Python library that provides the ability to understand the distribution of missing values through informative visualizations. ... With this library\nimport missingno as msno\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","c5d7d9b2":"df=pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndf.head()","611ff945":"df.info()","14f44e05":"df.describe().T","96079c12":"# Visualizing Missing Values\nmsno.matrix(df)","f6eab120":"df.isnull().sum()","4e5de297":"msno.bar(df)","ade43ba6":"for i in df.columns:\n    null_rate=df[i].isnull().sum()\/len(df)*100\n    if null_rate>0 :\n        print(\"{} 's null rate:{}%\".format(i,round(null_rate,2)))","a62c03e1":"df.nunique()","d05d859b":"Null_rating=df[df['rating'].isnull()]\nNull_rating.style.highlight_null(null_color='red')","db505c93":"rating_replacements = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA '\n}\nfor id, rate in rating_replacements.items():\n    df.iloc[id,8]=rate\ndf['rating'].isnull().sum()","bbc7326c":"df.drop(['director', 'cast'], inplace=True, axis=1)\ndf.columns","ec36f0f0":"df=df[df[\"date_added\"].notna()]","25426bbc":"df.isnull().sum()","b78c475a":"df['country']=df['country'].fillna(df['country'].mode()[0])\ndf['country'].isnull().sum()","ccef4b53":"df['country'].nunique()","f93072c6":"df['principal_country']=df['country'].apply(lambda x: x.split(\",\")[0])\ndf['principal_country'].head()","ccf64aec":"df['principal_country'].nunique()","dc08e1a7":"df.isna().sum()","ec4ef1f8":"df.dtypes","c71dcd8d":"df['year_added'] = df['date_added'].apply(lambda x: x.split(\" \")[-1])\ndf['year_added'].head()","863c3ceb":"df['month_added'] = df['date_added'].apply(lambda x: x.split(\" \")[0])\ndf['month_added'].head()","89ca9b24":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}","3d144c99":"df['target_ages'] = df['rating'].replace(ratings_ages)\ndf['target_ages'].unique()","5db0f2d6":"plt.figure(figsize=(10, 6), dpi=80)\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x='type', data=df)\nplt.title('MOVIES VS TV_SHOWS')\nplt.xlabel('TYPES')\nplt.ylabel('COUNT')\nplt.show()","f33053c0":"df['type'] = pd.Categorical(df['type'])\n\n# target_ages is another category (4 classes)\ndf['target_ages'] = pd.Categorical(df['target_ages'], categories=['Kids', 'Older Kids', 'Teens', 'Adults'])\n\n# Year added should be integer so we can compare with `released_year`\ndf['year_added'] = pd.to_numeric(df['year_added'])","7e7455d3":"plt.figure(figsize=(15,8))\nlabel=['TV Show', 'Movie']\nplt.pie(df['type'].value_counts().sort_values(), labels=label, explode=[0.15,0.15], \n        autopct='%1.2f%%', startangle=90)\nplt.title('Different Types of Netflix Content')\nplt.axis('equal')","e3ac9ccf":"df_movie = df[df['type']=='Movie'].groupby('release_year').count()\ndf_tv = df[df['type']=='TV Show'].groupby('release_year').count()\n\n\ndf_movie.reset_index(level=0, inplace=True)\ndf_tv.reset_index(level=0, inplace=True)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_movie['release_year'], y=df_movie['show_id'],\n                    mode='lines',\n                    name='Movies', marker_color='mediumpurple'))\nfig.add_trace(go.Scatter(x=df_tv['release_year'], y=df_tv['show_id'],\n                    mode='lines',\n                    name='TV Shows', marker_color='lightcoral'))\nfig.update_layout(title_text='Trend Movies vs TV Shows in recent years', title_x=0.5)\nfig.show()","558101e4":"def generate_rating_df(df):\n    rating_df = df.groupby(['rating', 'target_ages']).agg({'show_id': 'count'}).reset_index()\n    rating_df = rating_df[rating_df['show_id'] != 0]\n    rating_df.columns = ['rating', 'target_ages', 'counts']\n    rating_df = rating_df.sort_values('target_ages')\n    return rating_df\n\n\nrating_df = generate_rating_df(df)\nfig = px.bar(rating_df, x='rating', y='counts', color='target_ages', title='Ratings of Movies And TV Shows Based On Target Age Groups',  labels={'counts':'COUNT', 'rating':'RATINGS', 'target_ages':'TARGET AGE GROUPS' })\nfig.show()","5f9df04f":"df_tv = df[df[\"type\"] == \"TV Show\"]\ndf_movie = df[df[\"type\"] == \"Movie\"]\n\nmovie_ratings = df_movie.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,8)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=movie_ratings)\nplt.title('Top Movie Ratings Based On Rating System',size='20')\nplt.show()","be2b829b":"tv_ratings = df_tv.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,8)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=tv_ratings)\nplt.title('Top TV Show Ratings Based On Rating System',size='20')\nplt.show()","116b62f0":"plt.figure(figsize=(12,10))\nsns.set(style=\"whitegrid\")\nax = sns.countplot(y=\"release_year\", data=df_movie, palette=\"coolwarm\", order=df_movie['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF MOVIES', fontsize=15, fontweight='bold')\nplt.show()","602175b1":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"release_year\", data=df_tv, palette=\"coolwarm\", order=df_tv['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF TV Show', fontsize=15, fontweight='bold')\nplt.show()","374fc32f":"from collections import Counter\ncountry_data = df['country']\ncountry_count = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(\n    ', ',',').split(',')))).sort_values(ascending=False)\ntop20country = country_count.head(20)\nplt.figure(figsize=(15,5))\nsns.barplot(x= top20country.index, y=top20country, palette=\"pastel\")\nplt.xticks(rotation=50)\nplt.title('Top 20 countries with most contents', fontsize=15, fontweight='bold')\nplt.show()","e6a0742d":"rating_order_movie =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nrating_order_tv =  [ 'TV-Y', 'TV-G', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14', 'R', 'TV-MA']\nmovie_rating = df_movie['rating'].value_counts()[rating_order_movie]\ntv_rating = df_tv['rating'].value_counts()[rating_order_tv].fillna(0)\ndef rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(15, 7))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()\n    \n\nrating_barplot(movie_rating,'Movie', 1500)","1f62f35a":"rating_barplot(tv_rating,'TV Show' , 600, 1500)","c504d521":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_movie['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'black',colormap='vlag', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","53ff62e4":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_tv['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'lightblue', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","e0538341":"imdb_movie_names = pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb movies.csv',\n                               usecols=['title', 'year', 'avg_vote'])\n\nnew_ratings = pd.DataFrame({'Title':imdb_movie_names.title,\n                    'Rating': imdb_movie_names.avg_vote,\n                           'Year' : imdb_movie_names.year})\n\nnew_ratings.drop_duplicates(subset=['Title','Year','Rating'], inplace=True)\nprint(new_ratings.shape)\nnew_ratings.head(5)","71e12437":"Inner_join_data = new_ratings.merge(df,left_on='Title', right_on='title', how='inner')\nInner_join_data=Inner_join_data.sort_values(by='Rating', ascending=False)","e45e4298":"top_rated=Inner_join_data[0:15]\nfig =px.sunburst(\n    top_rated,\n    path=['title','country'],\n    values='Rating',\n    color='Rating')\nfig.show()","66f63cc8":"countries_data = Inner_join_data['country'].value_counts().sort_values(ascending=False)\ncountry_count = pd.DataFrame(countries_data)\nTop_countries = country_count.head(15)\nVisualization = px.bar(Top_countries, title = \"Countries with highest rated content\")\nVisualization.show()","4813c3ae":"from plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Visualization using Choropleth\n\ndf = df['country'].value_counts()\n\niplot([go.Choropleth(\n    locationmode='country names',\n    locations=df.index.values,\n    text=df.index,\n    z=df.values,\n)])","6d94d8d3":"**Observation**: There are almost half the number of TV Shows than there are Movies on Netflix","3a13aaf7":"<div class=\"alert alert-block alert-info\"> Please Upvote \u270c if you like the notebook and share possible improvements in the comments.<\/div>","660f7fdb":"**Observation**: As per our earlier analysis, we can see that the 'director' column has the highest whereas 'rating' column has the lowest number of missing values!\n","06b277e5":"#### Observation\nit's better to Drop 'director' & 'cast' columns because its Contains Null Values and not needed for Analysis.        ","0fb2cfb3":"**In Country column there are some entry where it has multiple values. so we will add a new column with just the first one so we can check which regions have more productions**","1fc136af":"##  <div class=\"alert alert-block alert-info\"> Netflix, Inc. is an American content platform and production company headquartered in Los Gatos, California. Netflix was founded in 1997 by Reed Hastings and Marc Randolph in Scotts Valley, California.<\/div>","901f99ab":"##  <div class=\"alert alert-block alert-info\"> <center> 2. Preprocessing <\/center><div>","b1f16839":"**For finding Top rated movies, we are adding one more dataset \"imdb-extensive-dataset\". We will join this with Netflix data and display the top rated movies by matching the \"Title\" in both data sets.**\n\n","3a67b7b3":"# <center> Netflix EDA, Visualization & Recommendation<\/center> ","cf72ec40":"#### Observation\nFrom the above visualisation we can observe that \"director\" has a peculiar pattern that stands out.\"cast\" and \"country\" have a similar pattern of missing values while column \"date_added\" shows a different pattern.","5b0d93a8":"<div class=\"alert alert-block alert-info\"> Please Upvote \u270c if you like the notebook and share possible improvements in the comments.<\/div>","f2715ae1":"##  <div class=\"alert alert-block alert-info\"> About Dataset <\/div> ","9b6b6c00":"**WOW** we fixed all the Null Values in datset","c77ef6f6":"##  <div class=\"alert alert-block alert-info\"> <center> 3. Data Visualization <\/center><div>","840579f0":"**All the missing values in the ratings column has been fixed!**","f7c0fcc9":"##  <div class=\"alert alert-block alert-info\"> <center> 1. Importing Required Libraries <\/center><div>","0b11ac5c":"##  <div class=\"alert alert-block alert-info\"> Problem Statement<\/div>","b68180c6":"**We have null values left only in the 'country' column. Let's try to fix it with the value which occurs the most number of times i.e. MODE**","cb695941":"**netflix_titles.csv: The csv file contains information about the various movies and the data related to them:**\n\n* Show ID - unique ID of that particular show\n* Type - type of the video - movie, TV Series etc.\n* Title - title of the video\n* Director - director name\n* Cast - cast members\n* Country - country where it was released\n* Data Added - date when it became live on NETFLIX\n* Release Year - year of release\n* Rating - user rating\n* Duration - duration of the movie, TV Series etc.\n* Listed in - Genre information\n* Description - concise plot of the series\n","3a346f87":"### Stats of dataset using Pandas Profiling\n![Stats using Pandas Profiling](attachment:6407f0d7-ed7d-49f2-af55-83631364da2a.png)","1b505835":"**Problem Statement\nSome of the interesting questions (tasks) which can be performed on this dataset**\n\n* Understanding what content is available in different countries\n* Identifying similar content by matching text-based features\n* Network analysis of Actors \/ Directors and find interesting insights\n* Is Netflix has increasingly focusing on TV rather than movies in recent years."}}