{"cell_type":{"e06d48b6":"code","ef755539":"code","2c9bef6a":"code","f004df16":"code","6893ac99":"code","59296018":"code","372381bb":"code","8876c0fb":"code","5bf7dde8":"code","1919fd8b":"code","9744121c":"code","6fa19fa6":"code","b7656940":"code","0db36612":"code","cc5db219":"code","3924efde":"code","2545199b":"code","87bfdebd":"code","9b6da42e":"code","b980fb7a":"code","956b2c0e":"code","4c1badb4":"code","6c01333d":"code","36ac61c4":"code","7f253bcc":"code","1eebb79c":"code","1095f00c":"code","1aa3ec43":"code","b375b62e":"code","45abc931":"code","2c454a0c":"code","6cffc24f":"code","72f9a28d":"code","0351a2f7":"code","cc0bd02b":"code","6d455e9e":"code","eb439fca":"code","83aa0ea3":"code","ddce08ce":"code","ff53f5d6":"markdown","a552de8f":"markdown","43ae70c4":"markdown"},"source":{"e06d48b6":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nfrom typing import List, Dict, Optional\nimport numpy as np\nfrom sklearn.model_selection import RepeatedKFold\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport math\nimport time\nimport random\nimport lightgbm as lgb\nimport gc\nimport os\nfrom collections import defaultdict\nimport datatable as dt\nfrom sklearn.preprocessing import LabelEncoder\nfrom numba import jit\nfrom sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold, GroupKFold, GridSearchCV, train_test_split, TimeSeriesSplit\nfrom sklearn import metrics\nimport riiideducation\n\n_ = np.seterr(divide='ignore', invalid='ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/riiid-test-answer-prediction'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ef755539":"data_types_dict = {\n    'timestamp': 'int64',\n    'user_id': 'int32', \n    'content_id': 'int16', \n    'content_type_id':'int8', \n    'task_container_id': 'int16',\n    #'user_answer': 'int8',\n    'answered_correctly': 'int8', \n    'prior_question_elapsed_time': 'float32', \n    'prior_question_had_explanation': 'bool'\n}\ntarget = 'answered_correctly'","2c9bef6a":"train_df = dt.fread('..\/input\/riiid-test-answer-prediction\/train.csv',\n                    columns=set(data_types_dict.keys())).to_pandas()\n","f004df16":"print('Train size: ',train_df.shape)","6893ac99":"#checking how much memory this dataframe is using\ntrain_df.memory_usage(deep=True)","59296018":"train_df.info()","372381bb":"#changing prior_question_had_explanation from object to boolean\ntrain_df['prior_question_had_explanation']=train_df['prior_question_had_explanation'].astype('boolean')\n\ntrain_df.memory_usage(deep=True)","8876c0fb":"%%time\n\nquestions = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv')\nlectures = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/lectures.csv')\nexample_test = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/example_test.csv')\nexample_sample_submission = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/example_sample_submission.csv')","5bf7dde8":"train_df.head(10)","1919fd8b":"#number of unique users in our dataset\n\ntrain_df['user_id'].nunique()","9744121c":"#unique user interactions\ntrain_df['content_id'].nunique()","6fa19fa6":"#unique user interactions which are questions\nprint(f\"We have {train_df['content_id'].nunique()} content ids of which {train_df[train_df['content_type_id']==False]['content_id'].nunique()} are questions \")","b7656940":"train_df['task_container_id'].nunique()","0db36612":"#\ntrain_df['answered_correctly'].value_counts()","cc5db219":"plt.hist(train_df['timestamp'], bins=40);","3924efde":"questions.head()","2545199b":"lectures.head()","87bfdebd":"train_df.groupby(['user_id'])['timestamp'].max().sort_values(ascending=False).head()","9b6da42e":"train_df=train_df.loc[train_df['answered_correctly']!=-1].reset_index(drop=True)\ntrain_df=train_df.drop(['timestamp','content_type_id'], axis=1)\ntrain_df['prior_question_had_explanation']=train_df['prior_question_had_explanation'].fillna(value=False).astype(bool)","b980fb7a":"user_answers_df=train_df.groupby('user_id').agg({'answered_correctly': ['mean', 'count']}).copy()\nuser_answers_df.columns=['mean_user_accuracy','questions_answered']\n\ncontent_answers_df =train_df.groupby('content_id').agg({'answered_correctly':['mean','count']}).copy()\ncontent_answers_df.columns=['mean_accuracy','question_asked']","956b2c0e":"train_df = train_df.iloc[90000000:,:]","4c1badb4":"train_df=train_df.merge(user_answers_df, how='left', on='user_id')\ntrain_df=train_df.merge(content_answers_df, how='left', on='content_id')","6c01333d":"train_df.fillna(value=0.5, inplace=True)","36ac61c4":"train_df.head(10)","7f253bcc":"le = LabelEncoder()\ntrain_df[\"prior_question_had_explanation\"] = le.fit_transform(train_df[\"prior_question_had_explanation\"])","1eebb79c":"train_df=train_df.sort_values(['user_id'])","1095f00c":"y=train_df['answered_correctly']\n\ncolumns = ['mean_user_accuracy', 'questions_answered', 'mean_accuracy', 'question_asked',\n           'prior_question_had_explanation']","1aa3ec43":"X=train_df[columns]","b375b62e":"del train_df","45abc931":"scores=[]\nfeature_importance=pd.DataFrame()\nmodels=[]","2c454a0c":"params = {'num_leaves': 32,\n          'max_bin': 300,\n          'objective': 'binary',\n          'max_depth': 13,\n          'learning_rate': 0.03,\n          \"boosting_type\": \"gbdt\",\n          \"metric\": 'auc',\n         }","6cffc24f":"columns = ['mean_user_accuracy', 'questions_answered', 'mean_accuracy', 'question_asked',\n#            'prior_question_had_explanation', 'mean_diff1', 'mean_diff2'\n          ]","72f9a28d":"folds = StratifiedKFold(n_splits=5, shuffle=False)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(X, y)):\n    print(f'Fold {fold_n} started at {time.ctime()}')\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    model = lgb.LGBMClassifier(**params, n_estimators=700, n_jobs = 1)\n    model.fit(X_train, y_train, \n            eval_set=[(X_train, y_train), (X_valid, y_valid)],eval_metric='auc',verbose=1000, early_stopping_rounds=10)\n    score = max(model.evals_result_['valid_1']['auc'])\n    \n    models.append(model)\n    scores.append(score)\n\n    fold_importance = pd.DataFrame()\n    fold_importance[\"feature\"] = columns\n    fold_importance[\"importance\"] = model.feature_importances_\n    fold_importance[\"fold\"] = fold_n + 1\n    feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n    break","0351a2f7":"print('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))","cc0bd02b":"feature_importance[\"importance\"] \/= 1\ncols = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n    by=\"importance\", ascending=False)[:50].index\n\nbest_features = feature_importance.loc[feature_importance.feature.isin(cols)]\n\nplt.figure(figsize=(16, 12));\nsns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False));\nplt.title('LGB Features (avg over folds)');","6d455e9e":"del X,y","eb439fca":"env = riiideducation.make_env()","83aa0ea3":"iter_test = env.iter_test()","ddce08ce":"for (test_df, sample_prediction_df) in iter_test:\n    y_preds = []\n    test_df = test_df.merge(user_answers_df, how = 'left', on = 'user_id')\n    test_df = test_df.merge(content_answers_df, how = 'left', on = 'content_id')\n    test_df['prior_question_had_explanation'] = test_df['prior_question_had_explanation'].fillna(value = False).astype(bool)\n    test_df = test_df.loc[test_df['content_type_id'] == 0].reset_index(drop=True)\n    test_df.fillna(value = 0.5, inplace = True)\n    test_df[\"prior_question_had_explanation_enc\"] = le.fit_transform(test_df[\"prior_question_had_explanation\"])\n    for model in models:\n        y_pred = model.predict_proba(test_df[columns], num_iteration=model.best_iteration_)[:, 1]\n        y_preds.append(y_pred)\n\n    y_preds = sum(y_preds) \/ len(y_preds)\n    test_df['answered_correctly'] = y_preds\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])\n","ff53f5d6":"Timestamp\ntimestamp is important because it is user interaction and the first event from that user. so starting\ntime could be different for each user","a552de8f":"Feature engineering","43ae70c4":"train.csv\n\n1. **row_id**: (int64) ID code for the row.\n\n2. **timestamp**: (int64) the time between this user interaction and the first event from that user.\n\n    user_id: (int32) ID code for the user.\n\n3. **content_id**: (int16) ID code for the user interaction\n\n4. **content_type_id**: (int8) 0 if the event was a question being posed to the user, 1 if the event was \n    the user watching a lecture.\n\n5. **task_container_id**: (int16) Id code for the batch of questions or lectures. For example, a user might \n    see three questions in a row before seeing the explanations for any of them. Those three would\n    all share a task_container_id. Monotonically increasing for each user.\n\n6. **user_answer**: (int8) the user's answer to the question, if any. Read -1 as null, for lectures.\n\n7. **answered_correctly**: (int8) if the user responded correctly. Read -1 as null, for lectures.\n\n8. **prior_question_elapsed_time**: (float32) How long it took a user to answer their previous question      bundle, ignoring any lectures in between. The value is shared across a single question bundle, and is   null for a user's first question bundle or lecture. Note that the time is the total time a user took to \n   solve all the questions in the previous bundle.\n\n9. **prior_question_had_explanation**: (bool) Whether or not the user saw an explanation and the correct \n    response(s) after answering the previous question bundle, ignoring any lectures in between. \n    The value is shared across a single question bundle, and is null for a user's first question \n    bundle or lecture. Typically the first several questions a user sees were part of an onboarding\n    diagnostic test where they did not get any feedback.\n"}}