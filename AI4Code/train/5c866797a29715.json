{"cell_type":{"db0cc044":"code","b141096e":"code","9bbabd56":"code","996d9627":"code","be34c79f":"code","15cacd75":"code","da2aca3e":"code","f13c1394":"code","9f1b2a13":"code","476744b2":"code","688e74a8":"code","180e2772":"code","0a0e19cd":"code","367dc46b":"code","14279af7":"code","439c65bf":"code","ff7f03bd":"code","01181895":"code","a5f20130":"code","a3d6fd92":"code","baf24c65":"code","9e425ebf":"code","9d94a3d5":"code","6155065e":"code","81ef5e91":"code","3f9ccc99":"code","51c99f89":"code","5982b49a":"code","8b928fda":"code","a47e10d1":"code","6f2c5a53":"code","fdc70b07":"code","7108feb7":"code","b8ef4aa8":"code","5e155770":"code","fde40ff0":"code","0468b7e9":"code","493d4b74":"code","918153d9":"code","d1240b01":"code","40b0abc9":"code","4aec9ec2":"code","5846eee2":"code","39ced2e4":"code","25156639":"code","cc32df84":"code","b2f799c7":"code","b63c4e4b":"code","0903dfb5":"code","1ec06cca":"code","577dd04f":"code","a070cbf2":"code","682045f5":"code","c79a0dad":"code","a60b485b":"code","b396a044":"code","57db2c10":"code","f6c62e13":"code","683c25d1":"code","c43716d5":"code","5c6aac3b":"code","88dfef90":"code","14de5fae":"code","0a2222b5":"code","1d0f7b6c":"code","272a6591":"code","8bb0b3f8":"code","7202b087":"code","e6a14674":"code","01c72bb3":"code","b83afe0a":"code","b24e2c6b":"code","a1a480f8":"code","0af66164":"code","965cac9a":"code","848edf62":"code","bb39af45":"code","bdc3d4e2":"code","b4845a22":"code","fa994eaa":"code","9cbac679":"code","e8ad6d4d":"code","8b823656":"markdown","2b08e504":"markdown","16372806":"markdown","8ea0741f":"markdown","ead6d8f4":"markdown","2ff57c45":"markdown","7298ae48":"markdown","20f9fe84":"markdown","d5ba24a0":"markdown","f22b6726":"markdown","4f63974b":"markdown","243db82e":"markdown","32cc6294":"markdown","e0f9aada":"markdown"},"source":{"db0cc044":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline","b141096e":"# read dataset\ntrain_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","9bbabd56":"# show head of dataset\ntrain_df.head()","996d9627":"# shape of dataset\ntrain_df.shape","be34c79f":"#check feature\/columns in datset\ntrain_df.columns","15cacd75":"# get details of each features\/columns\ntrain_df.info()","da2aca3e":"#show null values using heatmap\nplt.figure(figsize=(16,6))\nsns.heatmap(train_df.isnull())","f13c1394":"# find sum of null values in each features\npd.set_option('display.max_rows',100)\ntrain_df.isnull().sum()[:10]","9f1b2a13":"train_df['LotFrontage'] = train_df['LotFrontage'].fillna(train_df['LotFrontage'].mean())","476744b2":"train_df.drop(['Alley'],axis=1,inplace=True)","688e74a8":"# find sum of null values in each features\npd.set_option('display.max_rows',100)\ntrain_df.isnull().sum()[9:20]","180e2772":"# find sum of null values in each features\npd.set_option('display.max_rows',100)\ntrain_df.isnull().sum()[19:30]","0a0e19cd":"train_df['MasVnrType'] = train_df['MasVnrType'].fillna(train_df['MasVnrType'].mode()[0])","367dc46b":"train_df['MasVnrArea'] = train_df['MasVnrArea'].fillna(train_df['MasVnrArea'].mean())","14279af7":"train_df['BsmtQual'] = train_df['BsmtQual'].fillna(train_df['BsmtQual'].mode()[0])","439c65bf":"# find sum of null values in each features\npd.set_option('display.max_rows',100)\ntrain_df.isnull().sum()[29:40]","ff7f03bd":"train_df['BsmtCond'] = train_df['BsmtCond'].fillna(train_df['BsmtCond'].mode()[0])\ntrain_df['BsmtExposure'] = train_df['BsmtExposure'].fillna(train_df['BsmtExposure'].mode()[0])\ntrain_df['BsmtFinType1'] = train_df['BsmtFinType1'].fillna(train_df['BsmtFinType1'].mode()[0])\ntrain_df['BsmtFinType2'] = train_df['BsmtFinType2'].fillna(train_df['BsmtFinType2'].mode()[0])","01181895":"# find sum of null values in each features\npd.set_option('display.max_rows',100)\ntrain_df.isnull().sum()[39:50]","a5f20130":"train_df['Electrical'] = train_df['Electrical'].fillna(train_df['Electrical'].mode()[0])","a3d6fd92":"# find sum of null values in each features\npd.set_option('display.max_rows',100)\ntrain_df.isnull().sum()[55:70]","baf24c65":"train_df.drop(['FireplaceQu'],axis=1,inplace=True)","9e425ebf":"train_df['GarageType'] = train_df['GarageType'].fillna(train_df['GarageType'].mode()[0])\ntrain_df['GarageYrBlt'] = train_df['GarageYrBlt'].fillna(train_df['GarageYrBlt'].mode()[0])\ntrain_df['GarageFinish'] = train_df['GarageFinish'].fillna(train_df['GarageFinish'].mode()[0])\ntrain_df['GarageQual'] = train_df['GarageQual'].fillna(train_df['GarageQual'].mode()[0])\ntrain_df['GarageCond'] = train_df['GarageCond'].fillna(train_df['GarageCond'].mode()[0])","9d94a3d5":"# find sum of null values in each features\npd.set_option('display.max_rows',100)\ntrain_df.isnull().sum()[69:]","6155065e":"train_df.drop(['PoolQC','Fence', 'MiscFeature'],axis=1,inplace=True)","81ef5e91":"train_df.isnull().sum().max()","3f9ccc99":"#drop ID column\ntrain_df.drop(['Id'],axis=1,inplace=True)","51c99f89":"train_df.shape","5982b49a":"train_df.columns","8b928fda":"#show null values using heatmap\nplt.figure(figsize=(16,6))\nsns.heatmap(train_df.isnull())","a47e10d1":"#read dataset\ntest_dff = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","6f2c5a53":"# show head\ntest_dff.head()","fdc70b07":"# find feature of dataset\ntest_dff.columns","7108feb7":"# shape of datset\ntest_dff.shape","b8ef4aa8":"# get details of dataset\ntest_dff.info()","5e155770":"# finf null values count in each feature\ntest_dff.isnull().sum()","fde40ff0":"test_dff.isnull().sum()[:20]","0468b7e9":"test_df = test_dff.copy()","493d4b74":"test_df['MSZoning'] = test_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0])\n\ntest_df.drop(['Alley'],axis=1,inplace=True)\n\ntest_df['LotFrontage'] = test_df['LotFrontage'].fillna(test_df['LotFrontage'].mean())\ntest_df['Utilities'] = test_df['Utilities'].fillna(test_df['Utilities'].mode()[0])","918153d9":"test_df.isnull().sum()[20:45]","d1240b01":"test_df['Exterior1st'] = test_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0])\ntest_df['Exterior2nd'] = test_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0])\ntest_df['MasVnrType'] = test_df['MasVnrType'].fillna(test_df['MasVnrType'].mode()[0])\ntest_df['BsmtQual'] = test_df['BsmtQual'].fillna(test_df['BsmtQual'].mode()[0])\ntest_df['BsmtCond'] = test_df['BsmtCond'].fillna(test_df['BsmtCond'].mode()[0])\ntest_df['BsmtExposure'] = test_df['BsmtExposure'].fillna(test_df['BsmtExposure'].mode()[0])\ntest_df['BsmtFinType1'] = test_df['BsmtFinType1'].fillna(test_df['BsmtFinType1'].mode()[0])\ntest_df['BsmtFinType2'] = test_df['BsmtFinType2'].fillna(test_df['BsmtFinType2'].mode()[0])\n\ntest_df['MasVnrArea'] = test_df['MasVnrArea'].fillna(test_df['MasVnrArea'].mean())\ntest_df['BsmtFinSF1'] = test_df['BsmtFinSF1'].fillna(test_df['BsmtFinSF1'].mean())\ntest_df['BsmtFinSF2'] = test_df['BsmtFinSF2'].fillna(test_df['BsmtFinSF2'].mean())\ntest_df['BsmtUnfSF'] = test_df['BsmtUnfSF'].fillna(test_df['BsmtUnfSF'].mean())\ntest_df['TotalBsmtSF'] = test_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mean())","40b0abc9":"test_df.isnull().sum()[45:65]","4aec9ec2":"test_df['BsmtFullBath'] = test_df['BsmtFullBath'].fillna(test_df['BsmtFullBath'].mean())\ntest_df['BsmtHalfBath'] = test_df['BsmtHalfBath'].fillna(test_df['BsmtHalfBath'].mean())\n\ntest_df['KitchenQual'] = test_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0])\ntest_df['Functional'] = test_df['Functional'].fillna(test_df['Functional'].mode()[0])\n\ntest_df.drop(['FireplaceQu'],axis=1,inplace=True)\n\ntest_df['GarageType'] = test_df['GarageType'].fillna(test_df['GarageType'].mode()[0])\ntest_df['GarageYrBlt'] = test_df['GarageYrBlt'].fillna(test_df['GarageYrBlt'].mode()[0])\ntest_df['GarageFinish'] = test_df['GarageFinish'].fillna(test_df['GarageFinish'].mode()[0])\ntest_df['GarageQual'] = test_df['GarageQual'].fillna(test_df['GarageQual'].mode()[0])\n\ntest_df['GarageCars'] = test_df['GarageCars'].fillna(test_df['GarageCars'].mean())\ntest_df['GarageArea'] = test_df['GarageArea'].fillna(test_df['GarageArea'].mean())\n\ntest_df['GarageCond'] = test_df['GarageCond'].fillna(test_df['GarageCond'].mode()[0])","5846eee2":"test_df.isnull().sum()[65:]","39ced2e4":"test_df.drop(['PoolQC','Fence', 'MiscFeature'],axis=1,inplace=True)\n\ntest_df['SaleType'] = test_df['SaleType'].fillna(test_df['SaleType'].mode()[0])\n","25156639":"test_df.isnull().sum().max()","cc32df84":"test_df.shape","b2f799c7":"test_df.columns","b63c4e4b":"#show null values using heatmap\nplt.figure(figsize=(16,6))\nsns.heatmap(train_df.isnull())","0903dfb5":"test_df.to_csv('newtest.csv')","1ec06cca":"# get columns which is having object data type\ntrain_obj_col = train_df.select_dtypes(include=['object'])","577dd04f":"train_obj_col.columns","a070cbf2":"def category_onehot_encoding(multicolumns):\n    df_final = final_df\n    i=0\n    for fields in multicolumns:\n        print(fields)\n        df1 = pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        \n        if i==0:\n            df_final = df1.copy()\n        else:\n            df_final = pd.concat([df_final,df1],axis=1)\n        i=i+1\n    df_final = pd.concat([final_df,df_final],axis=1)\n    \n    return df_final","682045f5":"main_df = train_df.copy()","c79a0dad":"#combine test data\ntest_data = pd.read_csv('newtest.csv')","a60b485b":"test_data.shape","b396a044":"train_data = train_df.copy()","57db2c10":"train_data.shape","f6c62e13":"test_data.drop([test_data.columns[0]],axis=1,inplace=True)","683c25d1":"test_data.shape","c43716d5":"#now combine both data row wise \nfinal_df = pd.concat([train_data,test_data],axis=0)","5c6aac3b":"final_df.shape","88dfef90":"final_df = category_onehot_encoding(train_obj_col)","14de5fae":"final_df.shape","0a2222b5":"#remove all duplicate collumns\nfinal_df = final_df.loc[:,~final_df.columns.duplicated()]","1d0f7b6c":"final_df.shape","272a6591":"#devide dataset into test and train\ndf_train = final_df.iloc[:1460,:]\ndf_test = final_df.iloc[1460:,:]","8bb0b3f8":"# but noe in test dataset their is Saleprice columns so we want to drop this column\ndf_test.drop(['SalePrice'],axis=1,inplace=True)","7202b087":"df_train.shape","e6a14674":"df_test.shape","01c72bb3":"x_train = df_train.drop(['SalePrice','Id'],axis=1)# create a new datafeam without Saleprice which is our training data\ny_train = df_train['SalePrice']","b83afe0a":"x_train.head()\n","b24e2c6b":"y_train.head()","a1a480f8":"demo = df_test.drop(['Id'],axis=1)","0af66164":"import xgboost as xgb","965cac9a":"Classifier  = xgb.XGBRegressor()\nClassifier.fit(x_train,y_train)","848edf62":"#create a pickle file and save fit model if we do this we no need to train model again and again","bb39af45":"import pickle\nfilename = 'trainedmodel.pkl'\npickle.dump(Classifier,open(filename,'wb'))","bdc3d4e2":"y_pred = Classifier.predict(demo)","b4845a22":"y_pred","fa994eaa":"submission2 = pd.DataFrame({\n    'Id':test_df['Id'],\n    'SalePrice':y_pred\n})","9cbac679":"submission2.to_csv('house_price_prediction_submition_2.csv',index=False)","e8ad6d4d":"show_sub = pd.read_csv('house_price_prediction_submition_2.csv')\nshow_sub.tail()","8b823656":"In this dataset there is 1460 rows and 81 columns where 1 column is a target column which is ['SalePrice']","2b08e504":"create a function which handling categorical feature and convert it into categorical feature","16372806":"Now,   Int,float is replace by mean of that feature and object is replace by mode","8ea0741f":"## Handling Missing data","ead6d8f4":"# Building ML model  ","2ff57c45":"In this plot white line shows the null values .\nNow we drop feature which is having more that 50% null values","7298ae48":"# Now our data is clean let's start to understand data","20f9fe84":"From above info we can say that dataset is contain int,float,object dtype of columns.\nNow check null values in dataset","d5ba24a0":"### [I'm](https:\/\/www.linkedin.com\/in\/rushikesh-lavate\/) a newcomer to kaggle please deliver me honest feedback so I can improve my self, give me upvote if you like. \n#### Thank You, everyone","f22b6726":"## Apply Xgboost ","4f63974b":"## Read and Understand testing dataset","243db82e":"## Read and Understand training dataset","32cc6294":"From this plot you can see that there is no null values in our training dataset","e0f9aada":"## Import required libraries"}}