{"cell_type":{"5cff8f66":"code","d04ce779":"code","07b16959":"code","04ed3356":"code","1b359851":"code","eaa6a6f9":"code","78a18623":"code","c1b9a540":"code","923b7cc1":"code","f55577b2":"code","7fad7ab1":"code","47fb902e":"code","a61b0a6d":"code","5ecc5a0d":"code","20b01e3e":"code","f43d6b11":"code","f4f9a0f7":"code","12a2d345":"code","15937bd3":"markdown"},"source":{"5cff8f66":"import os\nos.listdir('..\/input\/handwritten-digits')","d04ce779":"loc0 = '..\/input\/handwritten-digits\/digit_0'\nloc1 = '..\/input\/handwritten-digits\/digit_1'\nloc2 = '..\/input\/handwritten-digits\/digit_2'\nloc3 = '..\/input\/handwritten-digits\/digit_3'\nloc4 = '..\/input\/handwritten-digits\/digit_4'\nloc5 = '..\/input\/handwritten-digits\/digit_5'\nloc6 = '..\/input\/handwritten-digits\/digit_6'\nloc7 = '..\/input\/handwritten-digits\/digit_7'\nloc8 = '..\/input\/handwritten-digits\/digit_8'\nloc9 = '..\/input\/handwritten-digits\/digit_9'","07b16959":"from tqdm import tqdm\nimport cv2\n\n#Extract Features\n\nfeatures = []\n\nfor i in tqdm(os.listdir(loc0)):\n    f = cv2.imread(os.path.join(loc0,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc1)):\n    f = cv2.imread(os.path.join(loc1,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc2)):\n    f = cv2.imread(os.path.join(loc2,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc3)):\n    f = cv2.imread(os.path.join(loc3,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc4)):\n    f = cv2.imread(os.path.join(loc4,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc5)):\n    f = cv2.imread(os.path.join(loc5,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc6)):\n    f = cv2.imread(os.path.join(loc6,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc7)):\n    f = cv2.imread(os.path.join(loc7,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc8)):\n    f = cv2.imread(os.path.join(loc8,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc9)):\n    f = cv2.imread(os.path.join(loc9,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)","04ed3356":"import numpy as np\nX = np.array(features).reshape(-1,80,80,1)\nX.shape","1b359851":"#Extract Labels\n\nlabels = []\n\nfor i in tqdm(os.listdir(loc0)):\n    labels.append(0)\n    \nfor i in tqdm(os.listdir(loc1)):\n    labels.append(1)\n    \nfor i in tqdm(os.listdir(loc2)):\n    labels.append(2)\n    \nfor i in tqdm(os.listdir(loc3)):\n    labels.append(3)\n    \nfor i in tqdm(os.listdir(loc4)):\n    labels.append(4)\n    \nfor i in tqdm(os.listdir(loc5)):\n    labels.append(5)\n    \nfor i in tqdm(os.listdir(loc6)):\n    labels.append(6)\n    \nfor i in tqdm(os.listdir(loc7)):\n    labels.append(7)\n    \nfor i in tqdm(os.listdir(loc8)):\n    labels.append(8)\n    \nfor i in tqdm(os.listdir(loc9)):\n    labels.append(9)","eaa6a6f9":"Y = np.array(labels)\nY.shape","78a18623":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,random_state=2)","c1b9a540":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras import models\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Activation,Conv2D,MaxPooling2D,Flatten,Dropout\nfrom keras.utils import np_utils","923b7cc1":"#Normalising the features\nxtrain_n = xtrain\/xtrain.max()\nxtest_n = xtest\/xtest.max()","f55577b2":"#one hot encoding\nytrain_h = np_utils.to_categorical(ytrain)\nytest_h = np_utils.to_categorical(ytest)","7fad7ab1":"model = Sequential()\nmodel.add(Conv2D(32,(3,3) , padding='same' , input_shape=xtrain_n.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(64,(3,3) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(128,(3,3) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(256,(3,3) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(512,(3,3) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(10,activation='softmax'))","47fb902e":"model.summary()","a61b0a6d":"sgd=keras.optimizers.SGD(0.3)\nmodel.compile(optimizer='sgd',\n              loss = 'categorical_crossentropy',\n              metrics=['accuracy'])","5ecc5a0d":"model.fit(xtrain_n,ytrain_h,epochs=50,validation_data = (xtest_n,ytest_h)) #epochs=200","20b01e3e":"\nprint(model.evaluate(xtrain_n,ytrain_h))\nprint(model.evaluate(xtest_n,ytest_h))","f43d6b11":"ytest_pred = []\nfor rows in model.predict(xtest_n):\n    ytest_pred.append(np.argmax(rows))","f4f9a0f7":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(ytest,ytest_pred)","12a2d345":"model.save('HandwrittenDigits_model.h5')","15937bd3":"#Neural Network CNN"}}