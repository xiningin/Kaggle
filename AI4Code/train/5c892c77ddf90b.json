{"cell_type":{"913ef91a":"code","9365b6ba":"code","d1a4a08c":"code","1a151213":"code","6bf26702":"code","37b56fc3":"code","4a7bafa3":"code","ac4565b1":"code","ec606bb9":"code","538f620a":"code","efdcf793":"code","3022a076":"code","aebd1962":"code","be9b3583":"code","69bdd9c2":"code","9c5d89d7":"code","fa381555":"code","7aca3bf6":"code","ddac7487":"code","806bf879":"code","04ff8f4f":"code","4e2bfc2a":"code","f851a117":"code","ed863f75":"code","e1d19977":"code","ed0339d9":"code","3fe2d062":"markdown","56f67d99":"markdown","bc250eea":"markdown","88ec7378":"markdown","745d389b":"markdown","5ed71f61":"markdown","64915b6b":"markdown"},"source":{"913ef91a":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\nimport numpy as np\nfrom itertools import product\nfrom sklearn.preprocessing import LabelEncoder\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport time\nimport sys\nimport gc\nimport pickle\nsys.version_info","9365b6ba":"X_full = pd.read_csv('..\/input\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/test.csv', index_col='Id')","d1a4a08c":"X_full","1a151213":"X_full[['SalePrice']].idxmax() ","6bf26702":"#outliers = [30, 88, 462, 631, 1322]\n#X_full.drop(X_full.index[outliers])","37b56fc3":"columns=['Alley','LandContour','Fence','GarageYrBlt','HalfBath','Condition1','Condition2','PavedDrive','MiscFeature']","4a7bafa3":"X_full=X_full.drop(columns,axis=1)\nX_test_full=X_test_full.drop(columns,axis=1)","ac4565b1":"# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)","ec606bb9":"# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)","538f620a":"# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() <7  and \n                    X_train_full[cname].dtype == \"object\"]","efdcf793":"# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]","3022a076":"# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","aebd1962":"X_train.head()","be9b3583":"X_train.MSZoning.unique()","69bdd9c2":"plt.figure(figsize=(16,9))\nsns.barplot(x=X_train.MSZoning,y=y_train)","9c5d89d7":"plt.figure(figsize=(16,9))\nsns.barplot(x=X_train.index,y=y_train)","fa381555":"#common regression line\nplt.figure(figsize=(16,9))\nsns.regplot(x=X_train['YearRemodAdd'], y=y_train)","7aca3bf6":"plt.figure(figsize=(16,9))\nsns.barplot(x=X_train.RoofStyle,y=y_train)","ddac7487":"#common regression line\nplt.figure(figsize=(16,9))\nsns.regplot(x=X_train['YearBuilt'], y=y_train)","806bf879":"y_train.max()","04ff8f4f":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","4e2bfc2a":"# Define model\nimport xgboost \nmodel = xgboost.XGBRegressor(colsample_bytree=0.4,\n                 gamma=0,                 \n                 learning_rate=0.07,\n                 max_depth=3,\n                 min_child_weight=1.5,\n                 n_estimators=500,                                                                    \n                 reg_alpha=0.75,\n                 reg_lambda=0.45,\n                 subsample=0.6,\n                 seed=42) \nlightgbm = LGBMRegressor(objective='regression',\n                         num_leaves=4,\n                         learning_rate=0.01,\n                         n_estimators=5000,\n                         max_bin=200,\n                         bagging_fraction=0.75,\n                         bagging_freq=5,\n                         bagging_seed=7,\n                         feature_fraction=0.2,\n                         feature_fraction_seed=7,\n                         verbose=-1,\n                         # min_data_in_leaf=2,\n                         # min_sum_hessian_in_leaf=11\n                         )\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])","f851a117":"ts=time.time()\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE:', mean_absolute_error(y_valid, preds))\ntime.time()-ts","ed863f75":"# Preprocessing of test data, fit model\npreds_test = clf.predict(X_test)\npreds_test=preds_test.astype('int64')","e1d19977":"plot_features(model,(16,20))","ed0339d9":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","3fe2d062":"**OUTLIERS**","56f67d99":"# PIPELINE","bc250eea":"# IMPORTING LIBRARIES","88ec7378":"# READING THE DATA","745d389b":"# DATA VISUALISATION","5ed71f61":"# TRAINING THE MODEL","64915b6b":"> # Generate test predictions"}}