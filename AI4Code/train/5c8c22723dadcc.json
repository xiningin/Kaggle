{"cell_type":{"8d4c3014":"code","6793d214":"code","770399d1":"code","69fe19eb":"code","bfd30710":"code","42c7a811":"code","789984fe":"code","461bd4ca":"code","986fcf8a":"code","9ee3ce24":"code","4bf3a4c0":"code","7e3db620":"code","8b7e1eb0":"code","2369b228":"code","e0bdb988":"code","330b547c":"code","bd5eccc5":"code","4574b5e5":"code","f1e56892":"code","4bec421b":"code","db79f4a3":"code","625278b7":"code","fbc4cebd":"code","d3387892":"code","a0c2cc0b":"code","597b4b6e":"code","7ff68be5":"code","f1fc5860":"code","97e1593b":"code","297d1e40":"code","015948b8":"code","60447877":"code","489612ca":"code","48eac768":"code","31723121":"code","38afb9e0":"code","9e7ef20a":"code","c7a26c34":"code","b50ffa2b":"code","322aecb5":"code","8fd4264d":"code","a02c16d1":"markdown","ce97eda1":"markdown","8d85f51e":"markdown","f0b742a8":"markdown","7287b8cb":"markdown","fffbd9de":"markdown","9558c4ab":"markdown","a92318f1":"markdown","987a036d":"markdown","00dd4389":"markdown","61171879":"markdown","b5b3b935":"markdown","13c2aa35":"markdown","8ea63a6e":"markdown","dc8beb42":"markdown","a80369b7":"markdown","a6f74916":"markdown","044129bd":"markdown","e6d2fe83":"markdown","503809be":"markdown","b124b727":"markdown","1a07c830":"markdown","55a58999":"markdown","b7b04931":"markdown","b134fecb":"markdown","24dc8c2d":"markdown","95bd5a39":"markdown","f5e96f80":"markdown","8a606da4":"markdown","6252b01a":"markdown","7b3e3d70":"markdown","4f9aaa9b":"markdown","d85770bf":"markdown","16f7f3c7":"markdown","737d8198":"markdown","592b6dac":"markdown","bd752f79":"markdown","7b1a03a0":"markdown","aadc4b43":"markdown","2502442c":"markdown","faa8979d":"markdown","5003bdac":"markdown","02c982a9":"markdown","70301856":"markdown","2db1373c":"markdown"},"source":{"8d4c3014":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport rasterio as rio\nimport folium \nimport seaborn as sns","6793d214":"def plot_points_on_map(dataframe,latitude_value,longitude_value,zoom):\n    #df = dataframe[begin_index:end_index]\n    location = [latitude_value,longitude_value]\n    fuelColor = {'Coal': 'darkred',\n                 'Oil': 'black',\n                 'Gas': 'lightgray',\n                 'Hydro': 'lightblue',\n                 'Solar': 'orange',\n                 'Wind': 'green'\n                }\n    plot = folium.Map(location=location,zoom_start=zoom)\n    for i in range(0,len(dataframe)):\n        fuel = dataframe['primary_fuel'][i]\n        lat = dataframe['latitude'][i]\n        lon = dataframe['longitude'][i]\n        name = dataframe['name'][i]\n        popup = \"{}, geolocation : [{},{}], {} \".format(fuel,lat, lon, name)\n        color = fuelColor[fuel]\n        folium.Marker([lat,lon],\n                      popup=popup,\n                      icon=folium.Icon(color=color, icon_color='white', icon='bolt', prefix='fa')\n                     ).add_to(plot)  \n    \n\n    return(plot)\n\n    ","770399d1":"'''\ndef plot_points_on_map(dataframe,begin_index,end_index,latitude_column,latitude_value,longitude_column,longitude_value,zoom):\n    df = dataframe[begin_index:end_index]\n    location = [latitude_value,longitude_value]\n    \n    plot = folium.Map(location=location,zoom_start=zoom)\n    for i in range(0,len(df)):\n        popup = folium.Popup(str(df.primary_fuel[i:i+1]))\n        folium.Marker([df[latitude_column].iloc[i],df[longitude_column].iloc[i]],popup=popup).add_to(plot)\n    return(plot)\n'''\ndef overlay_image_on_puerto_rico(file_name,band_layer,lat,lon,zoom):\n    band = rio.open(file_name).read(band_layer)\n    m = folium.Map([lat, lon], zoom_start=zoom)\n    folium.raster_layers.ImageOverlay(\n        image=band,\n        bounds = [[18.6,-67.3,],[17.9,-65.2]],\n        colormap=lambda x: (1, 0, 0, x),\n    ).add_to(m)\n    return m\n\ndef plot_scaled(file_name):\n    vmin, vmax = np.nanpercentile(file_name, (5,95))  # 5-95% stretch\n    img_plt = plt.imshow(file_name, cmap='gray', vmin=vmin, vmax=vmax)\n    plt.show()\n\ndef split_column_into_new_columns(dataframe,column_to_split,new_column_one,begin_column_one,end_column_one):\n    for i in range(0, len(dataframe)):\n        dataframe.loc[i, new_column_one] = dataframe.loc[i, column_to_split][begin_column_one:end_column_one]\n    return dataframe","69fe19eb":"pd.set_option('max_columns', 30)","bfd30710":"power_plants = pd.read_csv('\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/gppd\/gppd_120_pr.csv')\n\npower_plants.head(5)","42c7a811":"power_plants = split_column_into_new_columns(power_plants,'.geo','latitude',50,66)\npower_plants = split_column_into_new_columns(power_plants,'.geo','longitude',31,48)\npower_plants['latitude'] = power_plants['latitude'].astype(float)\na = np.array(power_plants['latitude'].values.tolist()) # 18 instead of 8\npower_plants['latitude'] = np.where(a < 10, a+10, a).tolist() ","789984fe":"power_plants.columns","461bd4ca":"power_plants_df = power_plants[['capacity_mw', \n                               'commissioning_year', \n                               'country', 'country_long', \n                               'estimated_generation_gwh', \n                               'generation_gwh_2013', 'generation_gwh_2014', \n                               'generation_gwh_2015', 'generation_gwh_2016',  \n                               'generation_gwh_2017', 'geolocation_source', \n                               'source', 'name', \n                               'other_fuel1', 'other_fuel2', 'other_fuel3', \n                               'owner', 'primary_fuel','.geo']]","986fcf8a":"power_plants_df = split_column_into_new_columns(power_plants_df,'.geo','latitude',50,66)\npower_plants_df = split_column_into_new_columns(power_plants_df,'.geo','longitude',31,48)\npower_plants_df['latitude'] = power_plants_df['latitude'].astype(float)\npower_plants_df['longitude'] = power_plants_df['longitude'].astype(float)\n","9ee3ce24":"power_plants_df.head(2)","4bf3a4c0":"lat=18.200178; lon=-66.664513\nplot_points_on_map(power_plants_df,lat,lon,9)","7e3db620":"power_plants_df.isnull().sum()","8b7e1eb0":"import ee\nfrom kaggle_secrets import UserSecretsClient\nfrom google.oauth2.credentials import Credentials\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"isis\")","2369b228":"ee.Authenticate()","e0bdb988":"!cat ~\/.config\/earthengine\/credentials","330b547c":"#user_secret = \"\" # Your user secret, defined in the add-on menu of the notebook editor\n#refresh_token = UserSecretsClient().get_secret(user_secret)\ncredentials = Credentials(\n        None,\n        refresh_token=secret_value_0,\n        token_uri=ee.oauth.TOKEN_URI,\n        client_id=ee.oauth.CLIENT_ID,\n        client_secret=ee.oauth.CLIENT_SECRET,\n        scopes=ee.oauth.SCOPES)\n#ee.Initialize(credentials=credentials)","bd5eccc5":"ee.Initialize()","4574b5e5":"def add_ee_layer(self, ee_image_object, vis_params, name):\n  # https:\/\/github.com\/google\/earthengine-api\/blob\/master\/python\/examples\/ipynb\/ee-api-colab-setup.ipynb\n  map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)\n  folium.raster_layers.TileLayer(\n    tiles = map_id_dict['tile_fetcher'].url_format,\n    attr = 'Map Data &copy; <a href=\"https:\/\/earthengine.google.com\/\">Google Earth Engine<\/a>',\n    name = name,\n    overlay = True,\n    control = True\n  ).add_to(self)\n\ndef plot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom):\n    # https:\/\/github.com\/google\/earthengine-api\/blob\/master\/python\/examples\/ipynb\/ee-api-colab-setup.ipynb\n    folium.Map.add_ee_layer = add_ee_layer\n    vis_params = {\n      'min': minimum_value,\n      'max': maximum_value,\n      'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}\n    my_map = folium.Map(location=[latitude,longitude], zoom_start=zoom, height=500)\n    s5p = ee.ImageCollection(dataset).filterDate(\n        begin_date, end_date)\n    my_map.add_ee_layer(s5p.first().select(column), vis_params, 'Color')\n    my_map.add_child(folium.LayerControl())\n    display(my_map)","f1e56892":"from datetime import datetime\ndata_path = '\/kaggle\/input\/ds4g-environmental-insights-explorer'\ngldas_files = os.listdir(data_path + '\/eie_data\/gldas')","4bec421b":"def convert_df( dff, j):\n    name, ext = dff['filename'][j].split('.')\n    #print (name, ext)\n    df_name = name[0:3]\n    split_str = name.split('_')\n    \n    if df_name in 'gld' :\n        dff['dataset'][j] = split_str[0]\n        dff['date_from'][j] = split_str[1]+split_str[2]\n        dff['date_to'][j] = split_str[1]+split_str[2]\n    elif df_name in 'gfs':\n        dff['dataset'][j] = split_str[0]\n        dff['date_from'][j] = split_str[1]\n        dff['date_to'][j] = split_str[1]\n    elif df_name in 's5p':\n        dff['dataset'][j] = split_str[0]+'_'+split_str[1]\n        dff['date_from'][j] = split_str[2]\n        dff['date_to'][j] = split_str[3]\n        ","db79f4a3":"df_gldas = pd.DataFrame(gldas_files)\ndf_gldas.rename(columns={0:'filename'}, inplace=True)\ndf_gldas['dataset'] = \"\"\ndf_gldas['date_from']=\"\"\ndf_gldas['date_to']=\"\"\n\nfor i in range(df_gldas.shape[0]):\n    convert_df(df_gldas, i)\ndf_gldas.head()   ","625278b7":"gfs_files = os.listdir(data_path + '\/eie_data\/gfs')\ndf_gfs = pd.DataFrame(gfs_files)\ndf_gfs.rename(columns={0:'filename'}, inplace=True)\ndf_gfs['dataset'] = \"\"\ndf_gfs['date_from']=\"\"\ndf_gfs['date_to']=\"\"\n\nfor i in range(df_gfs.shape[0]):\n    convert_df(df_gfs, i)\ndf_gfs.head(5)  ","fbc4cebd":"s5p_files = os.listdir(data_path + '\/eie_data\/s5p_no2')\ndf_s5p_no2 = pd.DataFrame(s5p_files)\ndf_s5p_no2.rename(columns={0:'filename'}, inplace=True)\ndf_s5p_no2['dataset'] = \"\"\ndf_s5p_no2['date_from']=\"\"\ndf_s5p_no2['date_to']=\"\"\n\nfor i in range(df_s5p_no2.shape[0]):\n    convert_df(df_s5p_no2, i)\ndf_s5p_no2.head(5)  \n\n","d3387892":"dataset = \"COPERNICUS\/S5P\/OFFL\/L3_NO2\"\ncolumn = 'NO2_column_number_density'\nbegin_date = '2019-05-04'\nend_date = '2019-05-10'\nminimum_value = 0\nmaximum_value = 0.0002\nlatitude = 18.142901\nlongitude = -65.444001\nzoom = 11\nplot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom)","a0c2cc0b":"image = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20190504T165553_20190510T183608.tif'\nlatitude=18.142901; longitude=-65.444001\noverlay_image_on_puerto_rico(image,band_layer=1,lat=latitude,lon=longitude,zoom=8)\n","597b4b6e":"import tifffile as tiff\nmean_no2_emission = np.mean(tiff.imread(image)[:, :, 0 : 1])\nprint (\"{:.8f}\".format(mean_no2_emission))\n#print (np.sum(tiff.imread(image)[:, :, 0 : 1]))","7ff68be5":"image2 = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20190302T163011_20190308T182209.tif'\nlatitude=18.142901; longitude=-65.444001\noverlay_image_on_puerto_rico(image2,band_layer=1,lat=latitude,lon=longitude,zoom=8)","f1fc5860":"mean_no2_emission = np.mean(tiff.imread(image2)[:, :, 0 : 1])\nmean_no2_emission","97e1593b":"image3 = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20181004T162458_20181010T175419.tif'\nlatitude=18.142901; longitude=-65.444001\noverlay_image_on_puerto_rico(image3,band_layer=1,lat=latitude,lon=longitude,zoom=8)\n","297d1e40":"mean_no2_emission = np.mean(tiff.imread(image3)[:, :, 0 : 1])\nmean_no2_emission","015948b8":"image4 = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20180807T161744_20180813T174606.tif'\nlatitude=18.142901; longitude=-65.444001\noverlay_image_on_puerto_rico(image4,band_layer=1,lat=latitude,lon=longitude,zoom=8)\n","60447877":"mean_no2_emission_image4 = np.mean(tiff.imread(image4)[:, :, 0 : 1])\nprint (\"{:.8f}\".format(mean_no2_emission_image4))","489612ca":"power_plants_df = power_plants_df.sort_values('capacity_mw',ascending=False).reset_index()\npower_plants_df[['name','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh']][29:30]\nquantity_of_electricity_generated = power_plants_df['estimated_generation_gwh'][29:30].values\nprint('Quanity of Electricity Generated: ', quantity_of_electricity_generated)","48eac768":"Emission_Factor = float(mean_no2_emission_image4\/quantity_of_electricity_generated)\n#Emission_Factor","31723121":"print (\"Emission factor for Vieques {:.12f} mol * h \/ m^2 * gw\".format(Emission_Factor))","38afb9e0":"'''\nharpconvert --format hdf5 --hdf5-compression 9\n-a 'tropospheric_NO2_column_number_density_validity>50;derive(datetime_stop {time})'\nS5P_OFFL_L2__NO2____20181010T074409_20181010T092539_05135_01_010100_20181016T092316.nc\ngrid_info.h5\n'''","9e7ef20a":"dataset = \"NOAA\/GFS0P25\"\ncolumn = 'temperature_2m_above_ground'\nbegin_date = '2018-07-08'\nend_date = '2018-07-14'\nminimum_value = 0\nmaximum_value = 50\nlatitude = 18.20\nlongitude = -66.66\nzoom = 8\nplot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom)\n\ndataset = \"NASA\/GLDAS\/V021\/NOAH\/G025\/T3H\"\ncolumn = 'Tair_f_inst'\nbegin_date = '2018-07-08'\nend_date = '2018-07-14'\nminimum_value = 270\nmaximum_value = 310\nlatitude = 18.20\nlongitude = -66.66\nzoom = 8\nplot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom)","c7a26c34":"image = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20180701T161259_20180707T175356.tif'\n# Opening the file\nraster = rio.open(image)\n# All Metadata for the whole raster dataset\nraster.meta\n","b50ffa2b":"from rasterio.plot import show\n#show(raster)\n# Plotting the red channel.\nshow((raster, 1), cmap='pink')\nshow((raster, 2), cmap='pink')\nshow((raster, 3), cmap='pink')\nshow((raster, 4), cmap='pink')","322aecb5":"from rasterio.plot import show_hist\n\nshow_hist(raster, bins=4, lw=0.5, stacked=True, alpha=0.8,\nhisttype='stepfilled', title=\"Histogram\")","8fd4264d":"#\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\n#\/s5p_no2\/s5p_no2_20180701T161259_20180707T175356.tif'\nimage = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20180714T170945_20180720T185244.tif'\npoi = ee.Geometry.Point(18.20, -66.66)\ns2 = ee.ImageCollection(image).filterDate('2018-07-14', '2018-07-20');\n#ee.ImageCollection(os.listdir(s5p_path))\n#type(s2)\n\ns2.select('tropospheric_NO2_column_number_density', 'NO2_column_number_density');\nprint (s2)","a02c16d1":"### Lets concentrate on a single geolocation","ce97eda1":"**The above reading shows 0.0000507 as No2 density**","8d85f51e":"### Calculate the No2 density for the second image","f0b742a8":"### Whereas the GEE shows value for the same dates 2018-10-04 to 2018-10-10","7287b8cb":"### From the tiff image we  get  0.00004196   as mean NO2 column density value","fffbd9de":"### GEE data shows 0.0000454 as NO2 density","9558c4ab":"### Fourth Image","a92318f1":"![image.png](attachment:image.png)","987a036d":"#### Even this image does not have reading for the date range","00dd4389":"### Step 4: Organize the data from the image files","61171879":"### Sample SO2 column density from _OFFL_SO2 dataset","b5b3b935":"![image.png](attachment:image.png)","13c2aa35":"### From GEE, NO2 density data for Date for 02-03-2019 to 08-03-2019  ","8ea63a6e":"**About Google Earth Engine\n\nGoogle Earth Engine is a cloud-based platform for planetary-scale environmental data analysis. **","dc8beb42":"Analysing images using the the Rasterio module\n\nRasterio is a module for reading and writing several different raster formats in Python.\n\nA raster image is an image file format that is defined by a pixel that has one or more numbers associated with it. The number defines the location, size, or color of the pixels. Raster images are commonly .BMP, .GIF, .JPEG, .PNG, and .TIFF files. Today, almost all of the images you see on the Internet and images taken by a digital camera are raster images.\n\nLet\u2019s start with inspecting one of the files we downloaded:","a80369b7":"### In this kernal, I am reading the NO2 column density value from tiff image and also from GEE directly. May be few cells are showing error , But they are showing output in my kernal. Please replace your ee user secret value in cell 13 to access ee.","a6f74916":"![](http:\/\/)","044129bd":"![image.png](attachment:image.png)","e6d2fe83":"**This is empty, so there is no recordings for given date range **","503809be":"### Lets draw the second image from the folder","b124b727":"### Data taken from GEE for the geolocation of Vieques latitude=18.142901; longitude=-65.444001 for the above dates(Refer gpgd_120.csv for coordinates and dates from df_s5p_no2","1a07c830":"# DS4G - Geospatial Analysis, Accessing GEE","55a58999":"Provider's Note: the names with extension _tavg are variables averaged over the past 3-hours, the names with extension '_acc' are variables accumulated over the past 3-hours, the names with extension '_inst' are instantaneous variables, and the names with '_f' are forcing variables.","b7b04931":"### Step 3:  To Connect with Earth Engine Data ","b134fecb":"![image.png](attachment:image.png)","24dc8c2d":"* Driver : Data Format\n* dtype : data type\n* width and Height : The dimensions of the image are : 475 X 148\n* count : There are 12 bands in the image\n* crs: Coordinate Reference Systems which refers to the way in which spatial data that represent the earth\u2019s surface.A particular CRS can be referenced by its EPSG code (i.e.,epsg:4121). The EPSG is a structured dataset of CRS and Coordinate Transformations(link]\n* transform : Affine transform (how raster is scaled, rotated, skewed, and\/or translated)","95bd5a39":"### Step 5: Lets focus on the image details one by one","f5e96f80":"### Reading No2 column density value from the given image [for first record in s5p_no2]","8a606da4":"![image.png](attachment:image.png)","6252b01a":"## About Google Earth Engine\n","7b3e3d70":"### Lets plot the third image and check","4f9aaa9b":"#### Need to extract the date details from the file names, GFS , GLDAS contains single date with time, whereas s5p contains both starting and ending datetime","d85770bf":"### Load all Libraries","16f7f3c7":"**Step 1: Explore the power plant data**","737d8198":"### Using the location from PP csv data, checking the NO2 column density only for Vieques (which is a Oil power plant) in the map","592b6dac":"**The dataset gppd_120_pr.csv contains 24 columns, we include only those are required as of now**","bd752f79":"### How to analyse image with rasterio","7b1a03a0":"#### Attempting to pass parameters and trying to read GEE data","aadc4b43":"### Do we suppose to replace the NaN values with these for analysis???","2502442c":"### Lets draw the first image from s5p_no2 files","faa8979d":"E = A x EF x (1-ER\/100)\nwhere:\n\nE = emissions; A = activity rate; EF = emission factor, and ER =overall emission reduction efficiency, %\n\ntherefore\n\nEF = E \/ [A x (1-ER\/100)]\nTo simplify things a bit, I'll reduce that equation to: EF = E \/ A\n\nSimplified Emissions Factor = Emissions \/ Activity Rate\nWhich again can be similified to the following:\n\nSimplified Emissions Factor = (Measure of NO2 emissions) \/ (Quanity of electricity generated)","5003bdac":"### Step 6: Emission Factor Calculation","02c982a9":"#### Still working !!","70301856":"Google's mission is to organize the world's information and make it universally accessible and useful. In line with this mission, Earth Engine organizes geospatial information and makes it available for analysis. More generally, Google strives to make the world a better place through the use of technology.","2db1373c":"### Step 2 : Plot the PP data"}}