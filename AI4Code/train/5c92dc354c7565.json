{"cell_type":{"c2fad2d2":"code","146527eb":"code","88cc2ade":"code","b4e32272":"code","64fcbd7f":"code","4483410b":"code","2bffc3fc":"code","3b2b6d1a":"code","b3c74f72":"code","bb5257af":"code","1545ab23":"code","0e9054bd":"code","0f09ae39":"code","46998312":"code","2ee795f3":"code","d3878037":"code","4ec039b3":"code","1b11ea5d":"code","fb72f263":"code","9c585b10":"code","322e2f09":"code","5294f0f4":"code","7343670c":"code","209f5a74":"code","2d5096ae":"code","494e06b9":"code","0264ccc1":"code","3f522e2d":"code","c6ffd9f0":"code","89f8d4c7":"code","a347a610":"code","7ef4dd9f":"code","53787fdf":"code","8ebfb5a4":"code","cab94388":"code","bf2a02cb":"code","3eed78c0":"code","c4815912":"code","f7ba37c6":"code","44b7b830":"code","e4d632ca":"code","22727e3b":"markdown","f530b059":"markdown","96532bb9":"markdown","1387b5c5":"markdown","45ef9c04":"markdown","dd17a653":"markdown","c7c56430":"markdown","ad02ed80":"markdown","4cc46156":"markdown","3b1fecf7":"markdown","c07ca715":"markdown","c4282e98":"markdown","6e8c58b5":"markdown","9b68b4de":"markdown","850936d9":"markdown","5d41a129":"markdown","a3e9ec50":"markdown","57a1d5e1":"markdown","e75556f1":"markdown"},"source":{"c2fad2d2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n# for Importing the Dataset\nimport pandas as pd\n# for calculating Polarity and Subjectivity\nfrom textblob import TextBlob\n# load in all the modules we're going to need\nimport nltk\nimport collections\n# for Wordscloud\nfrom wordcloud import WordCloud\nfrom sklearn.feature_extraction.text import CountVectorizer\n# function for making ngrams\nfrom nltk.util import ngrams\nimport time\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nplt.style.use(style=\"seaborn\")\n%matplotlib inline\nimport openpyxl\nfrom pathlib import Path\n","146527eb":"pip install openpyxl","88cc2ade":"df_train=pd.read_csv('..\/input\/feedback-prize-2021\/train.csv')","b4e32272":"df_train.head(10)","64fcbd7f":"df_train.shape","4483410b":"df_train.info()","2bffc3fc":"# \u0639\u0631\u0636 \u0627\u0645\u0627 \u0627\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062a\u062d\u062a\u0648\u0649 \u0639\u0644\u0649 \u0627\u0649 \u0641\u0642\u062f\ndf_train.isnull().sum()","3b2b6d1a":"# \u0639\u0631\u0636 \u0627\u0648 \u0648\u0635\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0639\u0646 \u0637\u0631\u064a\u0642 \u062d\u0633\u0627\u0628 \u0627\u0644 \u0645\u062a\u0648\u0633\u0637 \u0648\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0627\u0648\u0644 \u0648\u0627\u0644\u062b\u0627\u0646\u0649 \ndf_train.describe()","b3c74f72":"df_train.describe(include = 'object')","bb5257af":"# lets check the Value Counts for discourse_text \ndf_train['discourse_text'].value_counts()","1545ab23":"# Lets calculate the length of the Reviews\ndf_train['length'] = df_train['discourse_text'].apply(len)","0e9054bd":"# Lets calculate the Polarity of the Reviews\ndef get_polarity(text):\n    textblob = TextBlob(str(text.encode('utf-8')))\n    pol = textblob.sentiment.polarity\n    return pol\n\n# lets apply the function\ndf_train['polarity'] = df_train['discourse_text'].apply(get_polarity)","0f09ae39":"# Lets calculate the Subjectvity of the Reviews\ndef get_subjectivity(text):\n    textblob = TextBlob(str(text.encode('utf-8')))\n    subj = textblob.sentiment.subjectivity\n    return subj\n\n# lets apply the Function\ndf_train['subjectivity'] = df_train['discourse_text'].apply(get_subjectivity)","46998312":"## lets summarize the Newly Created Features\ndf_train[['length','polarity','subjectivity']]","2ee795f3":"# calculating the Character Count in the Reviews\ndf_train['char_count'] = df_train['discourse_text'].apply(len)","d3878037":"# calculating the Word Count\ndf_train['word_count'] = df_train['discourse_text'].apply(lambda x: len(x.split()))","4ec039b3":"# Calculating the Word Density\ndf_train['word_density'] = df_train['char_count'] \/ (df_train['word_count']+1)","1b11ea5d":"# importing the List of Punctuations\nimport string\npunctuation = string.punctuation\n\n# Calculating the Punctuation Count\ndf_train['punctuation_count'] = df_train['discourse_text'].apply(lambda x: len(\"\".join(_ for _ in x if _ in punctuation))) ","fb72f263":"## lets summarize the Newly Created Features\ndf_train[['char_count','word_count','word_density','punctuation_count']]","9c585b10":"# lets make a function to remove Numbers from the reviews\nimport re\ndef drop_numbers(list_text):\n    list_text_new = []\n    for i in list_text:\n        if not re.search('\\d', i):\n            list_text_new.append(i)\n    return ''.join(list_text_new)\n\ndf_train['discourse_text'] = df_train['discourse_text'].apply(drop_numbers)","322e2f09":"# lets visualize the Top 10 Reviews after Removal of Punctuations and Numbers\ndf_train['discourse_text'].head(10)","5294f0f4":"## Visualizing Polarity and Subjectivity\n\nplt.rcParams['figure.figsize'] = (10, 4)\n\nplt.subplot(1, 2, 1)\nsns.distplot(df_train['polarity'])\n\nplt.subplot(1, 2, 2)\nsns.distplot(df_train['subjectivity'])\n\nplt.suptitle('Distribution of Polarity and Subjectivity')\nplt.show()","7343670c":"# lets check relation between Polarity and Subjectivity\n\nsns.scatterplot(df_train['polarity'], df_train['subjectivity'],color='red')\nplt.title('Polarity vs Subjectivity')\nplt.show()","209f5a74":"## Visualizing the Most Frequent Words\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(df_train.discourse_text)\nsum_words = words.sum(axis=0)\n\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\nfrequency = pd.DataFrame(words_freq, columns=['word', 'freq'])\n\nplt.style.use('fivethirtyeight')\ncolor = plt.cm.ocean(np.linspace(0, 1, 20))\nfrequency.head(20).plot(x='word', y='freq', kind='bar', figsize=(15, 6), color = color)\nplt.title(\"Most Frequently Occuring Words - Top 20\")\nplt.show()","2d5096ae":"## Visualizing the Least Frequent Words\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(df_train.discourse_text)\nsum_words = words.sum(axis=0)\n\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\nfrequency = pd.DataFrame(words_freq, columns=['word', 'freq'])\n\nplt.style.use('fivethirtyeight')\ncolor = plt.cm.ocean(np.linspace(0, 1, 20))\nfrequency.tail(20).plot(x='word', y='freq', kind='bar', figsize=(15, 6), color = color)\nplt.title(\"Least Frequently Occuring Words - Top 20\")\nplt.show()","494e06b9":"# Visualizing the BiGrams\n\ntext = str(df_train['discourse_text'])\ntokenized = text.split()\n\n# and get a list of all the bi-grams\nesBigrams = ngrams(tokenized, 2)\n\n# get the frequency of each bigram in our corpus\nesBigramFreq = collections.Counter(esBigrams)\n\n# what are the ten most popular ngrams in this Spanish corpus?\nesBigramFreq.most_common(10)","0264ccc1":"# Visualizing the Trigrams\n\ntext = str(df_train['discourse_text'])\ntokenized = text.split()\n\n# and get a list of all the bi-grams\nesTrigrams = ngrams(tokenized, 3)\n\n# get the frequency of each bigram in our corpus\nesTrigramFreq = collections.Counter(esTrigrams)\n\n# what are the ten most popular ngrams in this Spanish corpus?\nesTrigramFreq.most_common(10)","3f522e2d":"# lets plot the Wordscloud\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(df_train['discourse_text'])\nsum_words = words.sum(axis=0)\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\n\nwordcloud = WordCloud(background_color = 'lightcyan', width = 2000, height = 2000).generate_from_frequencies(dict(words_freq))\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 10))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.title(\"Vocabulary from Reviews\", fontsize = 20)\nplt.show()","c6ffd9f0":"## Cleaning the Data\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\n\nfor i in range(0, 3150):\n    review = re.sub('[^a-zA-Z]', ' ', df_train['discourse_text'][i])  ## Removing all Unecessary items\n    review = review.lower()                                         ## Converting into Lower Case\n    review = review.split()\n    ps = PorterStemmer()                                            ## Stemming\n    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]  ## Removing Stopwords\n    review = ' '.join(review)\n    corpus.append(review)","89f8d4c7":"# creating bag of words\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(max_features = 2500)\n\nx = cv.fit_transform(corpus).toarray()\ny = df_train.iloc[:, 4].values\n\nprint(x.shape)\nprint(y.shape)","a347a610":"from collections import Counter\n\n# Count unique words\ndef counter_word(Feed):\n    count = Counter()\n    for i in Feed.values:\n        for word in i.split():\n            count[word] += 1\n    return count","7ef4dd9f":"text = df_train['discourse_text']\n\ncounter = counter_word(text)\nprint(len(counter))","53787fdf":"train_size = int(df_train.shape[0] * 0.8)\n\ntrain_sentences = df_train['discourse_text'][:train_size]\ntrain_labels = df_train['discourse_text'][:train_size]\n\ntest_sentences = df_train['discourse_text'][train_size:]\ntest_labels = df_train['discourse_text'][train_size:]","8ebfb5a4":"print(train_size)\nprint(\"*******************************\")\nprint(train_sentences)\nprint(\"*******************************\")\nprint(train_labels)","cab94388":"pip install keras==2.3.1","bf2a02cb":"import keras\nfrom keras.preprocessing.text import Tokenizer\ntokenizer = Tokenizer(all)\ntokenizer.fit_on_texts(train_sentences)","3eed78c0":"word_index = tokenizer.word_index \ntokenizer = Tokenizer(oov_token='<oov>') # For those words which are not found in word_index\ntokenizer.fit_on_texts(df_train['discourse_text'])\ntotal_words = len(tokenizer.word_index) + 1\n\nprint(\"Total number of words: \", total_words)\nprint(\"Word: ID\")\nprint(\"------------\")\nprint(\"<oov>: \", tokenizer.word_index['<oov>'])","c4815912":"input_sequences = []\nfor line in df_train['discourse_text']:\n    token_list = tokenizer.texts_to_sequences([line])[0]\n    #here we can print the token_list but it is very long.\n    #print(token_list[:1])\n    \n    for i in range(1, len(token_list)):\n        n_gram_sequence = token_list[:i+1]\n        input_sequences.append(n_gram_sequence)\n\n# print(input_sequences)\nprint(\"Total input sequences: \", len(input_sequences))","f7ba37c6":"# pad sequences \nmax_sequence_len = max([len(x) for x in input_sequences])\ninput_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\ninput_sequences[1]","44b7b830":"# create features and label\nxs, labels = input_sequences[:,:-1],input_sequences[:,-1]\nys = tf.keras.utils.to_categorical(labels, num_classes=total_words)","e4d632ca":"model = Sequential()\nmodel.add(Embedding(total_words, 100, input_length=max_sequence_len-1))\nmodel.add(Bidirectional(LSTM(150)))\nmodel.add(Dense(total_words, activation='softmax'))\nadam = Adam(lr=0.01)\nmodel.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\nhistory = model.fit(xs, ys, epochs=50, verbose=1)\n#print model.summary()\nprint(model)","22727e3b":"# \u062a\u0635\u0648\u0631 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0623\u0643\u062b\u0631 \u062a\u0643\u0631\u0627\u0631\u0627","f530b059":"# \u062a\u0635\u0648\u0631 BiGrams","96532bb9":"## \u062f\u0639\u0646\u0627 \u0646\u0631\u0633\u0645 \u0633\u062d\u0627\u0628\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a","1387b5c5":"# \u062d\u0642\u064a\u0628\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a\n\n    \u0646\u0645\u0648\u0630\u062c \u062d\u0642\u064a\u0628\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0647\u0648 \u062a\u0645\u062b\u064a\u0644 \u0645\u0628\u0633\u0637 \u064a\u0633\u062a\u062e\u062f\u0645 \u0641\u064a \u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0644\u063a\u0629 \u0627\u0644\u0637\u0628\u064a\u0639\u064a\u0629 \u0648\u0627\u0633\u062a\u0631\u062c\u0627\u0639 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a (IR). \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u060c \u064a\u062a\u0645 \u062a\u0645\u062b\u064a\u0644 \u0627\u0644\u0646\u0635 (\u0645\u062b\u0644 \u062c\u0645\u0644\u0629 \u0623\u0648 \u0645\u0633\u062a\u0646\u062f) \u0643\u062d\u0642\u064a\u0628\u0629 (\u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u062a\u0639\u062f\u062f\u0629) \u0645\u0646 \u0643\u0644\u0645\u0627\u062a\u0647 \u060c \u0645\u062a\u062c\u0627\u0647\u0644\u0627\u064b \u0627\u0644\u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0646\u062d\u0648\u064a\u0629 \u0648\u062d\u062a\u0649 \u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0645\u0639 \u0627\u0644\u062d\u0641\u0627\u0638 \u0639\u0644\u0649 \u0627\u0644\u062a\u0639\u062f\u062f\u064a\u0629.","45ef9c04":"#  \u0625\u064a\u062c\u0627\u062f \u0627\u0644\u0637\u0648\u0644 \u0648\u0627\u0644\u0642\u0637\u0628\u064a\u0629 \u0648\u0627\u0644\u0630\u0627\u062a\u064a\u0629 \u0644\u0644\u0646\u0635","dd17a653":"# \u062d\u0633\u0627\u0628 \u0627\u0644\u0645\u062a\u062a\u0627\u0644\u064a\u0627\u062a","c7c56430":"# \u062a\u0646\u0638\u064a\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a","ad02ed80":"![ewfrewfg](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxITEhUTExMWFhUXFhsXFRcYGBcXGBgZFxUWGhkZFxgYHSggGB0lGxoYITEhJSkrLi4xGB8zODMtNygtLi0BCgoKDg0OGxAQGy0mICYyLTAtLy0tLi0tLTItLy0tLS8tLS0tLS0tLS0vLSstKy0tLS0tLy0tLS0tLS0tLS0tLf\/AABEIAL8BCAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAAAwQFBgcBAgj\/xABHEAACAQIEAwUDCQQHBwUAAAABAhEAAwQSITEFQVEGEyJhkTJxgQcUQlJygqGx0SNiksEVU4OisrPwMzRDY6PC0iQlk+Hi\/8QAGgEAAgMBAQAAAAAAAAAAAAAAAAQBAgMFBv\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\/c1m5HgCZsCT\/zJJNoOpUVKQAzNMjrVPaSv2VdSrAFToQdqUIpqcOy+w0DTwkZlEHlqCNNN40Gm89VYqKHZLCzOVyPqm48esyfWpfwWkCqoAAhUUAe5VGwruW79ZBv9Ennp9LpSdwpaDXHbYEszcgBJgDYQNgKq1jW\/SIV31Hv+txMcST90phrZUaxmJlo6nzOpjb3AU4ppgcZburntsGWWWR1Rirb+YOvPendWVFWO0faHuibSEK+mZzynYID7THTqBPM6U1bDYoot661wksoKKqi5btkNmICAHOxyzEkAEdasHFrKXUNguVa4JXLOYZSDm02AMa+YHOq5xHiuLsWu6ugBzmi+CpDIuXxBdw\/ijUciffo28NAE9eywqfDLnExG235nguNgTiFCHP3oc5Xb20sEiO+ndvayqdZg7ZjVvwuHW2ioghVUKo6ACBUX2TwjWsMisuVizuQd\/HcZhm55oImdamqq47LRjQBmi5AmdbcfCUw4hwy1fAFxc0bakETvqDTmzaVVCqIAEADkBS1FUyiZ3Wpe4tDSbDZFFFFSqoooooQim+NxHd23uRORWaOuUEx+FOKjuPXcuHunnkKidpYZRPxIoUEwmHCuOvdvtZa2gADw63MwLW3ClcpUEczr0MTE1YKp3Za5GIYEli1vwljmIysJAJ18WYE9e7HSrjUlVp1W1Wh7dDxUNwb5xmbvc0RqGy+3J9gr9GI\/1vFcS4riVv3IaLdszlCCSFQv4ywMK3syCD02NW6qn20waM1p2VTo6agH2srDf7LetREoqVO7YXxMbaK2UxfEvmKrbmOZOlMuzGMNy1kYy9s5STuy7ox66aE8yrVN1jXpPqABry3jAEnlcGPGFem9pAcBIOirnaWbeW\/lLGO7KrzYmbf9+V\/tKgbeMLrbvFChkoynUgFsv+YF3A0LVZePYxCDhww75xKiRKAGRcI\/dIkDmQOUkM+H8HW7muM37JnJVABDDQNmJ3RmDNAiQdyDFcrtHsluIcH04DiQHEk\/TBBtxMj02TVGrkbfTbx1TO7iwo8TKvmSB+dMsFcxNy6wyBrZYraykScu7MWI0+HSJq8YfA2rfsW0T7Kqv5CqxjcWMLdLtuGcqvO7bvPnIToysI6eHxQCCMcP\/wDP0KQd3rs88ssXBkXN7RPCRoStDiXPPwCD91L8G4cbRLuQXYQAvsqBqQCYLEncwNhppJmDTDB4m3iLa3FmDy2IOxB6EGRTjDqwEMZ6GuzRb3MUmNhsWI28d5JvN53g6qPJdJdqom3bIvBWMxGvwkU841xIWLYeFJLBVDNkWTJ1aDGgPLUwKa43Dd2QwbUk\/D9aqfbvtQym1bQLmE3HzDMsFWQAg8iC0j3Vyuw2uZiKmDLYeSXATNo\/65DcwTPGy1xLgGCqfp3\/AKU7ZCY+33zAoEBAWZU6B1bNAJEEERHvp1wKyiMw1LtrmPMxqSBoDtsKQ4dciwiKsM4D3I+uwBIAHIaKPJQKl+FWhlkrrJ1\/SqOxYxePptoOlrJJMEtOlhzAgg6AwRMKwZkpnNv6p1i7wtozmYVSxjeFBJiozhHH1vuU7q4hAJ8eUTlycgxI0dT69KlL9lXVkYSrAqw6giCNPKs07IcfzY8Iy24YXLaOqhXbUMrXGBhiQnIDVq9G2m5wJA0uUoXtbAOp0Wo1CdrOF3MThmt2yoaQwzCZymQAZGUzBB8oOhNTdFUUqn9mOH2rV5WUsc9pwC30TnRmWI8JMbfuHpVwqq4w93du5dTacYhVG+Vw2ce9j34H2hVksXldVdCGVgGUjYgiQR8KgFXeBYjdNcPhGF25cJgNoACSTEasTtGoCDQSx1LaKYrBJcZGdZNtsyTsDG8bHqJ2IB3Ap5TXH461ZttcuuqIu7MYA\/10qVROqgO1b3xbVLDAG5mtmdNGRvEGAlSsSPOKb4Ht\/wANutlXFID++Gtg+43AAaT4jxJLha7buIURe7tuCChuXGWfFsRPdCeoYUOBbsrUwHHkudhbmIi8l7vCEfKrNBUwTOVpzE67eyoCga5qtlIYXDrbRUXZQAPh186XoVUUUUUIRRRRQhFRXab\/AHdvtW\/85KkzTXiOG721ctzGdCoPQkaH4HWhVcJBCo9nEG263BqUbPHMjUMB5lSwHmRVx4zxq1hsM+Jck21UN4dS2YgLl6ySPWqSjEjUQdiOasDDKfMEEfCpLBvbu2LmCxBi3cUrbY7DNsuuxVtV+A5a3IXL7PrZSaTvLx3Ht91R8Z8q2Nu31GGtoiZhFsjOzidnY+yI6RHWtM7Yt4bQ55i3wFtgfxYVCdnrFi1hFUBVK2ouEhVb2ZJb3gz5givGLxpvFGIIC2wqg6GIBdiDtmIGnRRsSQAua4\/CIhO435NA5nSXCApHspcjEMv1rRJ\/s3WP8xqtjuAJOgAk+4VU+yiTiGb6log\/2jqR\/ltU12lYjCXyP6ph6iCfSquMKMCCaLfP7lZ3xG6113efHcYkfuk6WwCNoGUT5VpXEsfawlhrtw5bdpdYHIQAABzJgAedZTjMelmHdgIIInmQZAHpTP5QflFTG2fm9i2y2ywZ3eAzZTIAUEwJgyTypbAMdVkxqV3e1y2kWMBFh5+f3Vj4Z8rtu7iEtNhmS27hA+cMwzGAWTLtJ1gmPOrB8oFnSxc6M1v+NQ0\/9P8AGqd2Y7GWbeG+cXAHvgNctuGYoIGa2wXTUaGDOtXPt7fHd2U5tcLx+6ttgfxda1xZpljsukJXAtqNr0ydSR6aH7pn2ExsXLlo7OO8H2lhW9QV\/gNXdmA3MVm3ZX\/e7Pvb\/KuVfOJYHvVClogzsCD7x\/OscI4mkJ2W3adMMxBjeD19\/FOrlpW3E1g\/ajFd7ib79bjgfZUlV\/ugVvNpIUDoANd9K+f+KWyt66p3W46n4Owrs9lsaKrnbx56jf0XFxpOQDn+CtmxuLsYOycU7RbVQYGpOYAADqSYj31F9nvlFwWKZbYL2rjGFW4IzHXQMpI5c6jcFibOPwFjD3fEVYJdWSGi2jFGBGomEM\/aHWqzjvk+UY7C27DPkdi9zMQciWipJBEEzIHvI61zsPhqOHBogZbkwNJ362EJxxqPHeC491qHa3iXzfCXbgMNlyp9t\/CvoTPwrH+yrZcZho\/rkHwLAH8DVi+U3jgu3Vw6GUsklyNjc2j7oke9mHKovsNgDdxtg8lYuevgEg\/xZR8a6+Hp93hXvd\/sD9rLn1XZqzWjboras1JWr6sSFYEjeOWpGvxUj4UsBSNvDqpJE67yzHmTzPUn8Ogrkp9VTtXZK4gOGZe8s5TljUW3JIMg\/wBZoRBGsGley2PyN3DeyxJt+T7snx1YeebyFSParC5rOcb2j3n3QCH9\/hJMcyoqpsJ8uYI3BBkEHkQYM+VWAsuZiaz6NcOJJbw9JjnofRWLt\/icQmDcYXN37kKmX2o3fL0OQNr6axWEpcxeIu28HevXfHfRct1nOR3OXMQxn6VbaOLG4LbPOa3KXAoJJL5clwKNSpCsNJgk8hNecHwmy2Ja8yZQmW+WOjM+XKC4IlVATQaagyOtqdXJIhdHIKjA9p\/pZJxTsNibGKTDvBV9VuqDkKD2jrsR08x1FWvj+Hc4FMDYt+1cCIAZLZnLARGkasT+5Pus\/FMSbzd4ZAiEB5IdYI5MSJP3Ryp32Uw2a89zki5R9poJ+IUD\/wCSrOqOdBOy57K7jiMlP6d\/D+7eZVpw1oqiqTJCgE9SBE0tRRWK6SKKKKEIooooQuEURXi9dVQWYgAbk1FHj9sZpVsobKGAkNqQSCNI50IUb2k4SwY37YJB1uKNSCBGdR7twOk9ZgtCORBHvBB\/OtHBrPLyw9wdLt0D3C68VYFcntCg0fMG+v7SbZigQwVEQSgLhQfZDzoOW0xz512iu1YBIVa1SpBeZjTr9q1dl8Lls5ju7En3A5UA+6AfexqUxmGFy29ttnUqfcwIP5007OvOHt+WZf4XZf5V74RjDcQZvaCISdNSyzsNqovRMADQBpC+cO1L3PnNxLm9tzbjkMpgx7yJnnUVHrW8duPk9tYxmv2j3d+NfqXI+sOTRz8hPWqDgOy6WXJuZndWI8QACsDBkAmTPOYrY4ulQpC2lgAFpTwdbF1jBEm5JPqY1PlyBIsr3w3CZcHZYKXYWbbNbzsEuQi5lIBiW1G2p3nWoPG8UfE3DcfQkCFGyryCn6Q1nNzJ5aAPeE8YNlShUusysEAqTuNfok69ZJ35IcJ4f84xFtDKjMzHL9FYYkCeUlV+IrkVKnetDWnVd2jR\/wAZ7qjx9I1\/XMj9byp3sLgCztfI8KgonmxjMR7gIn95hyq7xSNm0lpAqgKiiANgAKa4vH5VDJbZ5MaBhvOvskkaSSBtJEmAXabAxoaFx8RWNaoah3UjWPfKRwnucWbo9i8M4+2IDj8m+8a1K\/xBUs99dBtqFDFWjMCdlIUkFpIEAnWs47W8XGMRJy20V5VicxMgiCRCjrAnbemMPiW0Koc77E28ACsXYSpiGEMHqQB6khVXg+Ke3eW4hIK+JioBOX6Qgg7+4xoasXHOOXMou4dmXMCj3PDnIaGyjKISMp9nXUzBOsXwrAozMttyZWHMZQFJ1HUkxy+NPu1bgW0Xq8\/BUP8A5Ct3vGIxAcAdhcR7fsJF73YaKGYE6mDMW4i0m5seG6rdpBGZtgduu3P19PTVvk+4E1m2b90EXboAVTulvcA9GY6keSjSKp3ycYVLmNGdQ2S2zqCJAZSgDR1E+utbHW\/aNcl3dDrr3U4SkIzoorw7AAk7DU0lh8SHmAQRGhEGDsfj\/KuXI0TsGJTis74vhTh7ndAQGMWSdskEn35IIjyWfarRKhO1qA4eTuty2VPQm4qmPusw+NWCWxVIVKZna6qODC27q3HzuVVsvM5jAjkq6ZugOnSvV7FtcuksAPCCAC3sycisQRnAOZoOkkRtXaRvW\/pTlIG+kRzkHlpVsomVyRi6gpCloL+Jnj\/ASt66ek8gBuSYAUeZMAVd+C4HubSoYLe05HNm1MeXIeQFRHZzgsBL12S\/tIkZVUGcpIMnPlPM6TtImrPUErpYPDGkCX6n7f2iiiiqp1cJortFCEUUUUIUZx60zWWChTzM8gNZBOxptc4lYaxlXUlMotgazGgjy6+VP04lZNxrQup3iQHXMJGYSAR7q9rgbUqwRQVnLAiJMmKEJDglvLYQHNtJzb6mT8OlU7GrF26P+a\/4ux\/nWhVlHaXiTLir4tmFDxBAOoUBuU+1NbUaTqjsrUlj2ZqYHP8ABUjXKrd7i94A+ID7o\/nTG9xC83\/Ef4eH\/DFMjBVCdlyhQPFa92SP\/pgOly7+N5z+RFSVjCqhYrpIAgQAAogQBVP+SzEzZvWidUuBwOguL\/5Ix+NXmk6jMjy07LvUvob4BFZ520tKuKJXdraMw85dZ9FA+FaHXz5xfjFy9iLl8swLsconZB7K+4CPxNVOGdiGlgMeKZoYsYWqKjgSL6eCsVWPsKf\/AFLaf8Jtenjt6fH\/ALazL+lL\/wDWflTngHHLmGxKXwSYMOJnMh9pf5jzArOj2TVY7OXC2wm9o3ATmL7bo1qRptabxcxa87Ezot9a2CQSJjbyPX3+fmaVpKzdVlDKZVgCpGxBEg+leRfXNlnxdNeQU\/8AcPWrrnLzjMHbuqFuKGUMGg7SpkSOevI1R\/lcvAWrCdXZv4VA\/wC+tBrI\/lQx4uYsWwdLKBT9t\/E393JTWCaXV28r9ecLDEmKZ9Ey7IJ\/tG+yP8R\/nSHa67NxF6W5\/iP\/AOa8cC4xasqyvmktIgSIyjz99NeN4tbt3MsxlA1EbTTrGl2LLiLX+0Lj5HZ80bD8BT3yXNGN99px\/eQ\/yrX6w3sVjO6x1hiYUvkP9oCg\/vEH4VuVLdoNIrTxA\/S62EM0+vH8rhFI2cOqaKI9T7t+Q6UvSXermy5hmjNlkTExMbxPOkITUlK1T\/lC43bs2ktxmuOysqgxCqwJZuk6gefuNWy44UFiYAEk9ANzWC8e4q2KxFy8Zhj4AfooNFHpv5k05g8P31S+g1660S2JqBrI42\/asljj9hhqSp6Mp\/NZH40YnjdmN82mwBM+\/SIqmAUE10P\/ADqc6n2\/X4XIFNoM9fZfRFi8rqrqQVYBlI2IIkEfClarvYEt\/R9jPvDR9nvHyf3ctWKuK4QSF3gZEoopG3eDTE6dQRzI5jXb8utLVClFFFFCEUw4sLxtMMOVF06Kz+ys7sQPagagczFP6KELJeP9imwid6Ha+rGb7uBmzndz+6fw5zOjfg\/HsThyO7clf6tpZD5Abr92PjWvXEBBBAIIgg7EdDWe9puzDWAbuHBa1qSg1NudyvMp+Inpt0cPiGOb3VUDkT17pSrScDnp9fvwVt4L2gs4hSQcrquZ0J1UcyD9JfP1islxF83He4d3dnP32LR+NeFc7gkGDqDBgiDqORBI9xrlO4fCCi9xG+nHn+EtVr940BSPAeGfOb3dRI7u4x+CEKfg7JUEh0B61N8E7RNhe8Nq2pd4Ad5ICjkFEakmZnkulQlS3OarnHSwHXAkmFDsoYBveVePksc9\/eHI21J+Daf4jWl1RPkw4ayW7l9hHeEKn2UmWHkWMfcnnV5muRinB1ZxHUCF0KAIpiV6r577S8POHxV6zyVzl+w3iT+6RX0JWO\/K0B8+WN+4SffnufyirYRxFSOKriBLJ4KlV0CgCuE100ktr+TTiHe4FATJtMbR9wgqPgrKPhVlFhQ2bn1k8wo2+6Kzv5G8Rpibfmjge\/MD+S1pLVx6zctRwXRpmWArs1jXyolBjYRVUi0pcgAFnYsZaNzly1soFYT2\/vZ+IYg9GC\/w20X8wa0wgmpKpiD8CgVBYgDUkwPMnapLiWAazeuWmOttipPWNjHmIPxr32Rwve43DJ\/zVY+5PGfwWrd8qfCCt1cUo8LgJc8nUeEn3rA+5510WVQ2sGHce89DzSjmE0y4bH2hVrstdtrjMObihk7wKVYAjxgqpIOmjENPlWxcc41ZwtvvLrRyVRqznoo5\/kOdYTbUkgDQkgD3k6VP8WxZxF0veIdicqlmKbGCLajRVnrud53qMThO8qg7RfrrRFGvkYRuluOduMViCQjGxb5Khho\/efefdApfsv2cxl+MbZvd1cQ\/sjczML2vjD6zkO066zG1KdlOxhxDi5ckYYa66NcIMFNNgCCC3wHUavathQFUAAAAACAANAAOQpfFVaTG91SA5n8fv0W1Bj3HO8+AVW7acQdOHOXXu7lwC2VkMAXMOARuMoaD7tqyACtY+Uvh929ZtC3Bi7OTYse7eCpOkhc+h\/8Ao5TetspKsCpG4YEH4g6imOzC3IRN59upWOMDswMWXPL\/AEaccKwRv3rdldDccLPQHc\/ASfhTWrD2BP8A7hhz0Lz8bNwD8SB8adrPLKbnDYH7Jam0OeAeK2bD2VtoqIIVVCqOgUQB6UtTDiLsqgr8T0pTAXGZAW3rxwxjP8k4aDIGaYtHj\/HLVd3IcmdLW7Kr7KgTvAjmT+ZPqaVooptURRRRQhFFFFCF53r1RRQhVLtH2YweV77lrOUFna3AB+6QRJPSCSay68wJMTlnwgxoOWaNCYrTflKwWKu4ZRh7YuZXDusnOQoMZVGj7nQ9BAJqL7B9mMPesribsXSxMWz7KEEghwfabqDp5Hen8PiBTpkvJOwGyVq0i5wygDmqXw\/ht6+Ys2nucpUaA+bHwr8SKuvAPk+Mh8WwjfulMz9t\/wCS+vKtAtoFACgADQACAPcKUqlXG1H2Fh7+qszDMbc3Sdu2AAAAABAA0AA2AHKvDXlDKpIDNOUczAk6dB18x1peonBYZzee6xIEkCQMzAEgCPo2xyA1Y+I0mmFLVkvygdn8XdxjXRbzIwAthWWcqKJkEgjxE\/xDrWtVX8S2a\/cJ+jFtfdlVyR7y0H7A6VZlU0zmCkUhVOUrILXZjGuwQYd8xBIByroCAdWIGhYetTWH+T3EDIcQy2w7ZYU539hm1jwj2Y3O9aZwVMzXLvKe7T3ITmPkS8j3W1NK8eXwK\/1Lik+5ptk\/APPwrY4uoRsFmMNTa+NQoTsxwa1hLqraB8aMHZjJYgqVnkIAbQAb1bgKgLRi9Z83Yf8ASuH+VWClg4uuVvVaGugIr577RvmxeJb\/AJ930FxgPwFfQlfOfF2m\/dPW659XNO4IfEfBJ4n6QrR8lOEz40vGlu2zfFoUfgW9K1zGYVLqNbuKGRhDKdiKpHyRcPy4e7fI1uvlX7NuR\/iLD4Vf6yxLpqFXoiGBZpxH5Nrivmw15YmQt2QVgz7Sg5vQfGpThXYRQ2fEOG592nsySCRnIDFZExA9NKu9FS7FVnNgu\/frqgUKYMgdfZJogAgaAaADQD3UpRRS61URx4f7E8hcg+Wa3cAP8UD41FYvhti9dtrftq6sHtidCCQHBDDVdLbDQ\/Sqc45bzWLkCSozqOrWyHUfEqBUYDL2YO9wR\/Cx\/IVQ2cCt2XpOHXVlA8Y+T3DqA9proE+NQQ0LB1WVkwYnXaedeeG9lLVopctXXLKQ6scpUwZEgASpGmhGh3rQ6iMXwnUvZIVjqUP+zYnUnTVGJ+kOpJBNbur1iIzn1WFNlFpu0Jbh3EO8lWGW4okrMgj6yHmPxHPlMjVWZiWAE27yeJQw16HYw9s7GDHmGAic4fj1ug\/RddHQ7qf5g6wedZAmIWlRgaZGhT2iiipWaKKKKEIooooQiiiihCKRs2FUsVVQWMsQACxgCWjcwAJ8qWooQiiiihCKKKKEIqqtcYh8vtvedU5+LvGRTHMADMfJTUp2m4wuEw1y+2oUAAfvMwVZ8pInymovsxfs3rh7q6txcOoWQQ0u66uSOeXSR9dxyqCJWlN2WSrHhbC20VF9lVCidTAEanma7iLIdGRtVZSp9xEGlqKlZqr4Nznw+bVhdZHPVktX1YjykE1aKzTiXbSxh8Sy3EuDusUQ5ynKFe23iDcz4icu5ANX7hnEbWItrdsvntt7LAETBjmAd6MpaLhXe8OPkE9r5xxKlrrhRJZyAOpLmB61v3F+MWMMme++ReuVm\/wg1knyb4S3ieIF8wK2Zux1OaE0PQnN90daawz8gc48EtWbmyjmtb4Fw4YfD2rI+ggBPVt2PxaT8akKKKVWyKKKKEIooooQiqtgkyPYT+rvNb+C2ryoT7xkP3qtNZj214viPn\/zLBBDdurbu5idUuW8zEEbapbt6H+dSGFxsrB4aDK06imfDL7XLNu46G27IrMhEFWKglSPI6U8qFVNcZg0uiHWY1B1DKdpVhqpidR1rPu2uMuWLtnCWmJxF+Bh7wbI9sm4o\/aBB4lPOAAYMrpNaXTMcNs96b\/dJ3pGXvMozwOQbcCpETJRJiAkuCXbzWLZxCZL0RcWQRmUkEiDEGMw8jUjRRUIRRRRQhFFFFCmCiiuGihEFdooooRBRRRRQiCiiivLChEFMuM8Mt4m01m6CUYqTBg+B1YfiBUXguxmDtYk4q2jJcJJ8NxwknfwAxG+m3lViArtSCQoyooooqFMFMG4VYLXGNpCbhU3MwzBighSQdJA0mnqqAIGgr1XKEQV2m6YW2GzhFDRGYKA0HlO8aD0pxRQiCiiiihEFFFFcNCIK7RXkCvVCIKKaWOHWUdriWkV3Mu4VQzH95gJNO6KEQUUUVyhEFdorgrtCIKKKKKEQUUUUUIgrEOzvDDfzO7uEUqoCkBnZgzQGc5VChWLMZgDY047QcLFu2L1i4xWQGlxcEMSAyuoGYBgQQQCCRyINR3AuM9wHRlLIxB8JAZGAMMuYMp8LMpUgggwaV4x2ha8ndKuVJB8RDM0Zj4iqqokAaKABkUDz7hFTvOX4\/a86H0e5I\/295\/STXhWJKBsxzEiFLAHKUa5nYkwgyqTDRoQa8Lw7FRbMNFwEoS4AIChiTJ8AykNLRoZ2rj8dvsMpyeyVYhQC8pklzzYLoD+prv9PXItyqEquSSpJZCmUo2sEZYGwOgMyJq3zOXXnxVfknQuXqxwnGOWCq0qxVpuKuoyzGYifaXUSPEvUSnguH4m5EEjxOvjcJ4raFmXxGdANTsJEkTXP6dvfu7Rt1W0v5WU\/HrXTxu4WVvD4DcMR4WN3S5nB9rMvh9wFE1OXXmq\/J4n24\/r15JS3wvEtlCFmYlwQLi5RkKDRs+VpLKPeQBM15\/ozFy65WlFzN+0BGUqWBBmG0VjCyfC3Q0L2gvb+H2s3sgAftLTwAOQa2mnQGuf03dClDlKsoUiPtwRB0PjPl4tRpU\/N5dean5Oxcixw7FuququVf2Tm39rUgmVXwt4jA8J10pZeB40z4G0MGbijbLJ1bUeJddvENda4vaG4I\/Z2vCGA8AJFts825J9iHYQNYjXQUXu0t9hBCxlZAAIAU91IAnQAWUA9x3moJqzoOvMI+Ru4+yjr1y6jMrMwZSVYEmQQYIOvWvHzh\/rH1P613GYlrlx7jRmdmdo0EsSTHlJpKtRpdYE3sUp84f6x9T+tHzh\/rH1P60nRUqJKU+cP9Y+p\/Wj5w\/1j6n9aTooRJSnzh\/rH1P60fOH+sfU\/rSdFCJKU+cP9Y+p\/Wj5w\/1j6n9aTooRJSnzh\/rH1P60fOH+sfU\/rSdFCJKU+cP9Y+p\/Wj5w\/wBY+p\/Wk6KESUp84f6x9T+tHzh\/rH1P60nRQi6f3cJiVMNmBgnVhssTz0iQY6GdqV\/ovFzlytPTOJ0JG09Qfw6imT8RuEhjcckSAZMid\/XT0FKjiuIH\/GfefaO+uv4n1rOKm0e61mnN83slbeBxTezJnaLgO6hhsfqkH3UmbGImPHOYrEndZkb+RpFOIXAIFxwNiJMRAEegArnz25M52kPmBkznmc09Z1mp+Ll7qPg5+ycnA4rXwXtN9G6gaddSNutc+Z4qJyXvR+c\/ofSvA4pfEftW0EDxHYRp+A9BQOK3\/wCuf+I8+dHx8vdE0ufsvF\/vkMPnUxMNKmOsGu0lfxDuQXYkgBRPQbD\/AF1oq40usyRNl\/\/Z)","4cc46156":"### \u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u062a\u0644\u062e\u064a\u0635 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a","3b1fecf7":"# \u0639\u0631\u0636 \u0627\u0645\u0627 \u0627\u0630\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062a\u062d\u062a\u0648\u0649 \u0639\u0644\u0649 \u0627\u0649 \u0641\u0642\u062f \u0645\u0646 \u0627\u0644\u062e\u0644\u0627\u064a\u0627 ","c07ca715":"# \u062a\u0635\u0648\u0631 \u0627\u0644\u0623\u0634\u0643\u0627\u0644 \u0627\u0644\u062b\u0644\u0627\u062b\u064a\u0629","c4282e98":"# \u0625\u064a\u062c\u0627\u062f \u0639\u062f\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0648\u0627\u0644\u0634\u062e\u0635\u064a\u0627\u062a \u0648\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u0631\u0642\u064a\u0645","6e8c58b5":"#  \u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u062e\u0635\u0627\u0626\u0635","9b68b4de":"## \u0631\u0633\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a ","850936d9":"# \u0639\u0631\u0636 \u0627\u0644\u0628\u0627\u064a\u0627\u0646\u0627\u062a","5d41a129":"# \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062e\u0648\u0631\u0632\u0645\u064a\u0627\u062a \u0627\u0644\u062a\u0639\u0644\u064a\u0645 \u0627\u0644\u0639\u0645\u064a\u0642","a3e9ec50":"# \u0639\u0631\u0636 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0647 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a","57a1d5e1":"# \u0627\u0633\u062a\u0642\u0637\u0627\u0628 \u0627\u0644\u0646\u0635    \n\n    \u0625\u0646\u0647 \u0627\u0644\u062a\u0639\u0628\u064a\u0631 \u0627\u0644\u0630\u064a \u064a\u062d\u062f\u062f \u0627\u0644\u062c\u0627\u0646\u0628 \u0627\u0644\u0639\u0627\u0637\u0641\u064a \u0644\u0644\u0631\u0623\u064a. \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0646\u0635\u064a\u0629 \u060c \u064a\u0645\u0643\u0646 \u062a\u062d\u062f\u064a\u062f \u0646\u062a\u064a\u062c\u0629 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0645\u0634\u0627\u0639\u0631 \u0644\u0643\u0644 \u0643\u064a\u0627\u0646 \u0641\u064a \u0627\u0644\u062c\u0645\u0644\u0629 \u0623\u0648 \u0627\u0644\u0645\u0633\u062a\u0646\u062f \u0623\u0648 \u0627\u0644\u062c\u0645\u0644\u0629. \u064a\u0645\u0643\u0646 \u062a\u062d\u062f\u064a\u062f \u0642\u0637\u0628\u064a\u0629 \u0627\u0644\u0645\u0634\u0627\u0639\u0631 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \u0625\u064a\u062c\u0627\u0628\u064a\u0629 \u0648\u0633\u0644\u0628\u064a\u0629 \u0648\u0645\u062d\u0627\u064a\u062f\u0629.","e75556f1":"` \u0630\u0627\u062a\u064a\u0629 \u0627\u0644\u0646\u0635\n\n\u0641\u064a \u0627\u0644\u0644\u063a\u0629 \u0627\u0644\u0637\u0628\u064a\u0639\u064a\u0629 \u060c \u062a\u0634\u064a\u0631 \u0627\u0644\u0630\u0627\u062a\u064a\u0629 \u0625\u0644\u0649 \u0627\u0644\u062a\u0639\u0628\u064a\u0631 \u0639\u0646 \u0627\u0644\u0622\u0631\u0627\u0621 \u0648\u0627\u0644\u062a\u0642\u064a\u064a\u0645\u0627\u062a \u0648\u0627\u0644\u0645\u0634\u0627\u0639\u0631 \u0648\u0627\u0644\u062a\u0643\u0647\u0646\u0627\u062a \u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u062a\u062a\u0636\u0645\u0646 \u0627\u0644\u0645\u0634\u0627\u0639\u0631. \u064a\u062a\u0645 \u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0646\u0635 \u0627\u0644\u0630\u0627\u062a\u064a \u0628\u0634\u0643\u0644 \u0623\u0643\u0628\u0631 \u0645\u0639 \u0627\u0644\u0639\u0627\u0637\u0641\u0629 \u0623\u0648 \u0627\u0644\u0642\u0637\u0628\u064a\u0629.`"}}