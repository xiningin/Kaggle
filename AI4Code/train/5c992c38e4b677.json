{"cell_type":{"6d5d0adb":"code","9f4e91dd":"code","f2117907":"code","d9d877ae":"code","5c842700":"code","6035ebdb":"code","42adc8f2":"code","d6b17ad0":"code","156ad57b":"code","aa3d1012":"code","08302f16":"markdown","50f5f899":"markdown","fabfdb4b":"markdown","660ebaf9":"markdown","3d7d8026":"markdown","4cca1d56":"markdown","5450937c":"markdown"},"source":{"6d5d0adb":"!pip install tensorflow==1.14","9f4e91dd":"\n#!pip install keras-rl\n\n#!pip install h5py","f2117907":"import numpy as np\nimport gym\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Flatten\nfrom keras.optimizers import Adam\n\nfrom rl.agents.dqn import DQNAgent\nfrom rl.policy import EpsGreedyQPolicy\nfrom rl.memory import SequentialMemory","d9d877ae":"!pip install gym[atari]","5c842700":"ENV_NAME = 'Pong-v0'\n\n#get the environment\n#extract the number of actions available in the Cartpole problem\nenv = gym.make(ENV_NAME)\nnp.random.seed(123)\nenv.seed(123)\n\nnb_actions = env.action_space.n\nprint(nb_actions)","6035ebdb":"model = Sequential()\nmodel.add(Flatten(input_shape=(1,)  + env.observation_space.shape ))\nmodel.add(Dense(16))\nmodel.add(Activation('relu'))\nmodel.add(Dense(nb_actions))\nmodel.add(Activation('linear'))\nprint(model.summary())","42adc8f2":"policy = EpsGreedyQPolicy()\nmemory = SequentialMemory(limit=50000, window_length=1)\n\ndqn = DQNAgent(model=model, nb_actions= nb_actions, memory=memory, nb_steps_warmup=100, \n               target_model_update=1e-2, policy=policy)\n\ndqn.compile(Adam(lr=1e-3), metrics=['mae'])\n\n#trainig...visualization slows down training quite a lot..so putting it off\ndqn.fit(env, nb_steps=5000, visualize=False, verbose=2)","d6b17ad0":"dqn.test(env, nb_episodes=5, visualize=False)","156ad57b":"!apt-get install python-opengl -y\n!pip install pyvirtualdisplay","aa3d1012":"from matplotlib import animation , rc\nimport matplotlib.pyplot as plt\n\n#Run the env\nobservation = env.reset()\n\nfig = plt.figure()\n\nframe = []\nfor t in range(50000):\n    action = env.action_space.sample()\n    state, reward, done,info = env.step(action)\n    img = plt.imshow(env.render('rgb_array'))\n    frame.append([img])\n    if(done):\n        break\n\n        \nan = animation.ArtistAnimation(fig, frame, interval=100, repeat_delay=1000, blit=True)\nrc('animation', html='jshtml')\nan","08302f16":"**Next, we configure and compile our agent. We set our policy as Epsilon Greedy and we also set our memory as Sequential Memory because we want to store the result of actions we performed and the rewards we get for each action.**","50f5f899":"# Import Neccesary library","fabfdb4b":"**More optimiztion is required in order to make the model run more accuratrly**","660ebaf9":"# Test our reinforcement learning model","3d7d8026":"# Playing ","4cca1d56":"# Building a very simple single hidden layer neural network model.","5450937c":"# Set the relevant variables"}}