{"cell_type":{"3fc6c71c":"code","e9737fb8":"code","f1c277d0":"code","f4c55d9c":"code","26d2c35d":"code","6c983d7e":"code","fb38b2e7":"code","19ff2f43":"code","86294b1c":"code","7228cc92":"code","0ed5ca1c":"code","8c86dfcf":"code","b9719b0a":"code","da245148":"code","9b84c0ca":"code","06814f3f":"code","638e9754":"code","9c02f686":"code","35e60cc5":"code","62cbcffd":"code","e46d9f71":"code","cbd81f31":"code","b53bd944":"code","6d0cccfe":"code","e7c4330d":"code","cce4e6c2":"code","99aa7007":"code","331ffa49":"code","800d489a":"code","4760deed":"markdown","30b709ff":"markdown","e38d1d3d":"markdown","1598d620":"markdown","a5dc3e75":"markdown","a9d6163f":"markdown","f0ab6d2a":"markdown","4057be51":"markdown","fcbe8465":"markdown","27fe403a":"markdown","5f96a147":"markdown","c5ec7974":"markdown","3257533d":"markdown"},"source":{"3fc6c71c":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntrain_path = '..\/input\/brilliantdiamondsregressiontask\/train.csv'\ntest_X_path = '..\/input\/brilliantdiamondsregressiontask\/test_X.csv'\ntest_y_path = '..\/input\/brilliantdiamondsregressiontask\/test_y.csv'","e9737fb8":"df = pd.read_csv(train_path, index_col=0)\ndf","f1c277d0":"df.drop(['url', 'date_fetched'], axis=1, inplace=True)","f4c55d9c":"plt.hist(df['price'], bins='auto')\nplt.title('Histogram of sold prices')\nplt.xlabel('Price')\nplt.xscale('log')\nplt.ylabel('Frequency')\nplt.tight_layout()","26d2c35d":"plt.boxplot(df['price'])\nplt.title('Boxplot of sold prices')\nplt.ylabel('Price')\nplt.tight_layout()","6c983d7e":"plt.figure()\nplt.hist(df['carat'], bins='auto')\nplt.title('Histogram of Carats')\nplt.xlabel('Carat')\nplt.xscale('log')\nplt.ylabel('Frequency')\nplt.tight_layout()\n\nplt.figure()\nplt.boxplot(df['carat'])\nplt.title('Boxplot of Carats')\nplt.ylabel('Carat')\nplt.tight_layout()","fb38b2e7":"plt.figure(figsize=(8, 5))\nsns.countplot(x=df['shape'])\nplt.tight_layout()\n(df['shape'].value_counts()\/df['shape'].value_counts().sum())*100","19ff2f43":"plt.figure(figsize=(8, 5))\nsns.countplot(x=df['cut'])\nplt.tight_layout()\n(df['cut'].value_counts()\/df['cut'].value_counts().sum())*100","86294b1c":"plt.figure(figsize=(8, 5))\nsns.countplot(x=df['clarity'])\nplt.tight_layout()\n(df['clarity'].value_counts()\/df['clarity'].value_counts().sum())*100","7228cc92":"plt.figure(figsize=(8, 5))\nsns.countplot(x=df['color'])\nplt.tight_layout()\n(df['color'].value_counts()\/df['color'].value_counts().sum())*100","0ed5ca1c":"from sklearn.preprocessing import OneHotEncoder","8c86dfcf":"y = df.pop('price').values","b9719b0a":"df.head()","da245148":"cat_cols = df.columns[df.dtypes=='object']\noh = OneHotEncoder(sparse=False)\n\nX = oh.fit_transform(df[cat_cols])","9b84c0ca":"X = np.concatenate((X, df['carat'].values.reshape(-1, 1)), axis=1)","06814f3f":"X.shape, y.shape","638e9754":"from sklearn.metrics import make_scorer, mean_squared_error\nfrom sklearn.model_selection import cross_val_score, KFold\n\ndef rmse(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))\n\nrmse = make_scorer(rmse, greater_is_better=False)\n\ncv = KFold(n_splits=10, shuffle=True)","9c02f686":"%%time\nfrom lightgbm import LGBMRegressor\nmodel = LGBMRegressor(objective='rmse', metric='rmse')\n\nscores = cross_val_score(\n    model,\n    X, y,\n    scoring=rmse,\n    cv=cv\n)\n\nplt.plot(scores)\nplt.title(f\"Cross Validation Score for {model}\")\nplt.xlabel(\"Fold\")\nplt.ylabel(\"RMSE\")\nplt.tight_layout()\nprint(f\"Mean RMSE: {round(np.mean(scores*-1), 5)}\")","35e60cc5":"%%time\nfrom xgboost import XGBRegressor\nmodel = XGBRegressor()\n\nscores = cross_val_score(\n    model,\n    X, y,\n    scoring=rmse,\n    cv=cv\n)\n\nplt.plot(scores)\nplt.title(f\"Cross Validation Score for {model}\")\nplt.xlabel(\"Fold\")\nplt.ylabel(\"RMSE\")\nplt.tight_layout()\nprint(f\"Mean RMSE: {round(np.mean(scores*-1), 5)}\")","62cbcffd":"%%time\nfrom catboost import CatBoostRegressor\nmodel = CatBoostRegressor(verbose=0)\n\nscores = cross_val_score(\n    model,\n    X, y,\n    scoring=rmse,\n    cv=cv\n)\n\nplt.plot(scores)\nplt.title(f\"Cross Validation Score for {model}\")\nplt.xlabel(\"Fold\")\nplt.ylabel(\"RMSE\")\nplt.tight_layout()\nprint(f\"Mean RMSE: {round(np.mean(scores*-1), 5)}\")","e46d9f71":"test_X_df = pd.read_csv(test_X_path, index_col=0)\ntest_X_df.head()","cbd81f31":"test_X_df.drop(['url', 'date_fetched'], axis=1, inplace=True)","b53bd944":"test_X = oh.transform(test_X_df[cat_cols])","6d0cccfe":"test_X = np.concatenate((test_X, test_X_df['carat'].values.reshape(-1, 1)), axis=1)","e7c4330d":"test_y = pd.read_csv(test_y_path, index_col=0)\ntest_y.head()","cce4e6c2":"test_X.shape, test_y.shape","99aa7007":"def rmse(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))","331ffa49":"i = 0\npreds = 0\n\nfor train_index, test_index in cv.split(X):\n    i += 1\n    \n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    model = CatBoostRegressor(verbose=0)\n    model.fit(X_train, y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=5)\n    \n    y_pred = model.predict(X_test)\n    loss = rmse(y_test, y_pred)\n    \n    print(f\"RMSE for Fold {i}: {round(loss, 5)}\")\n    \n    preds += model.predict(test_X)\n    \npreds \/= 10","800d489a":"rmse(test_y, preds)","4760deed":"## CatboostRegressor","30b709ff":"# Exploratory Plots","e38d1d3d":"The histogram is showing a very wide tail which could imply anomalies","1598d620":"The boxplot confirms our suspicions and tells us that there are lots of anomalies. This will inform how we scale the data later.","a5dc3e75":"# Preprocessing","a9d6163f":"Each categorical variable has severe class imbalances","f0ab6d2a":"## XGBRegressor","4057be51":"# Imports","fcbe8465":"# Training Best Model","27fe403a":"# Modelling","5f96a147":"## LGBMRegressor","c5ec7974":"Drop the URL as that is arbitrary and date_fetched because it is the same","3257533d":"Carats also show a wide distribution"}}