{"cell_type":{"bc3f05c5":"code","16651772":"code","aa17d0f1":"code","790fff3c":"code","21cc4485":"code","9a81020b":"code","2162622e":"code","a923b24f":"code","53071cfc":"code","675afd04":"code","b9703737":"code","b3750f54":"markdown","5763cd0d":"markdown","c0abdb01":"markdown","877d5bed":"markdown","6df28fb3":"markdown"},"source":{"bc3f05c5":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor","16651772":"data = pd.read_csv('..\/input\/szeged-weather\/weatherHistory.csv')","aa17d0f1":"data","790fff3c":"data.info()","21cc4485":"data","9a81020b":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop Summary, Loud Cover, and Daily Summary columns\n    df = df.drop(['Summary', 'Loud Cover', 'Daily Summary'], axis=1)\n    \n    # Fill missing values in Precip Type column\n    df['Precip Type'] = df['Precip Type'].fillna(df['Precip Type'].mode()[0])\n    \n    # Extract date\/time features from Formatted Date column\n    df['Formatted Date'] = pd.to_datetime(data['Formatted Date'], format='%Y-%m-%d %H:%M:%S.%f %z')\n    \n    df['Year'] = df['Formatted Date'].apply(lambda x: x.year)\n    df['Month'] = df['Formatted Date'].apply(lambda x: x.month)\n    df['Day'] = df['Formatted Date'].apply(lambda x: x.day)\n    df['Hour'] = df['Formatted Date'].apply(lambda x: x.hour)\n    \n    df = df.drop('Formatted Date', axis=1)\n    \n    # Binary encode Precip Type column\n    df['Precip Type'] = df['Precip Type'].apply(lambda x: 1 if x == 'snow' else 0)\n    \n    # Split df into X and y\n    y = df['Visibility (km)'].copy()\n    X = df.drop('Visibility (km)', axis=1).copy()\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = pd.DataFrame(scaler.transform(X_train), columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","2162622e":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","a923b24f":"X_train","53071cfc":"y_train","675afd04":"models = {\n    \"  Linear Regression\": LinearRegression(),\n    \"      Decision Tree\": DecisionTreeRegressor(),\n    \"K-Nearest Neighbors\": KNeighborsRegressor()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","b9703737":"for name, model in models.items():\n    print(name + \" R^2: {:.5f}\".format(model.score(X_test, y_test)))","b3750f54":"# Training\/Results","5763cd0d":"# Task for Today  \n\n***\n\n## Visibility Prediction  \n\nGiven *data about weather in Szeged, Hungary from 2006-2016*, let's try to predict the **visibility** on a given day at a given time.\n\nWe will use linear regression, decision tree regression, and K-nearest neighbors regression to make our predictions. ","c0abdb01":"# Preprocessing","877d5bed":"# Getting Started","6df28fb3":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/2O68xxOO5zc"}}