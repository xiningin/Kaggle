{"cell_type":{"a5ac87f7":"code","a0f5f847":"code","2c507623":"code","b801a837":"code","8c03eb44":"code","ee7bf8f5":"code","190015b3":"code","c0517df4":"code","d0c22988":"code","3da88a5c":"markdown","0ea878b5":"markdown","04a786ab":"markdown","09ac2402":"markdown"},"source":{"a5ac87f7":"!conda install gdcm -c conda-forge -y","a0f5f847":"import os\n\nfrom PIL import Image\nimport pandas as pd\nfrom tqdm.auto import tqdm","2c507623":"import numpy as np\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data","b801a837":"def resize(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    \n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im","8c03eb44":"train = pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')","ee7bf8f5":"path = '..\/input\/siim-covid19-detection\/train\/ae3e63d94c13\/288554eb6182\/e00f9fe0cce5.dcm'\ndicom = pydicom.read_file(path)","190015b3":"image_id = []\ndim0 = []\ndim1 = []\nsplits = []\n\nfor split in ['test', 'train']:\n    save_dir = f'\/kaggle\/tmp\/{split}\/'\n\n    os.makedirs(save_dir, exist_ok=True)\n    \n    for dirname, _, filenames in tqdm(os.walk(f'..\/input\/siim-covid19-detection\/{split}')):\n        for file in filenames:\n            # set keep_ratio=True to have original aspect ratio\n            xray = read_xray(os.path.join(dirname, file))\n            im = resize(xray, size=1024)  \n            im.save(os.path.join(save_dir, file.replace('dcm', 'jpg')))\n\n            image_id.append(file.replace('.dcm', ''))\n            dim0.append(xray.shape[0])\n            dim1.append(xray.shape[1])\n            splits.append(split)","c0517df4":"%%time\n!tar -zcf train.tar.gz -C \"\/kaggle\/tmp\/train\/\" .\n!tar -zcf test.tar.gz -C \"\/kaggle\/tmp\/test\/\" .","d0c22988":"df = pd.DataFrame.from_dict({'image_id': image_id, 'dim0': dim0, 'dim1': dim1, 'split': splits})\ndf.to_csv('meta.csv', index=False)","3da88a5c":"> #### Thanks:\n> - https:\/\/www.kaggle.com\/xhlulu\/siim-covid-19-convert-to-jpg-256px\n> - I used the above kernel directly, just changed the image size to (640x640)","0ea878b5":"# References\n1. https:\/\/www.kaggle.com\/xhlulu\/siim-covid19-resized-to-256px-jpg\n","04a786ab":"## Other Kernels (Training, Inferance ,EDA and Dataset) \n- [SIIM COVID-19 Detectron2 Training](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-covid-19-detectron2-training)\n- [SIIM COVID-19 Detectron2 Inferance](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-covid-19-detectron2-inferance)\n- [SIIM-FISABIO-RSNA COVID-19 Detection-EDA](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-fisabio-rsna-covid-19-detection-eda)\n- [SIIM-COVID-19 Detection Training Labels (Dataset)](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siimcovid19-detection-training-label)\n","09ac2402":"# **SIIM COVID-19 Convert DCM to JPG 640px**"}}