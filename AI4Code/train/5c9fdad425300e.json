{"cell_type":{"51e5a6b0":"code","82aecd2b":"code","3c57bf03":"code","a5a20e61":"code","a522fc41":"code","38458d9e":"code","3393acce":"code","ddf448c0":"code","2abc82ec":"code","32598808":"code","9a8a27ce":"code","64b3de10":"code","6ee65552":"code","3438edce":"code","c7d08da3":"code","d643a928":"code","b8dbf520":"code","9caa74ee":"code","09cbef2b":"code","6ab74128":"code","b2f35c90":"code","faf47d8b":"code","db4f0b23":"code","6d425912":"code","f2ee0df3":"code","51563a59":"code","d1f0c8be":"code","f7f18052":"code","f4bacfb9":"code","ffe0f63a":"markdown","32c498ab":"markdown"},"source":{"51e5a6b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82aecd2b":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom datetime import datetime\nfrom datetime import date\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n","3c57bf03":"holidays_events = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/holidays_events.csv\")\noil = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/oil.csv\")\nstores = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/stores.csv\")\ntest = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/train.csv\")\ntransactions = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/transactions.csv\")\n\nsample = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/sample_submission.csv\")","a5a20e61":"stores","a522fc41":"test.head()","38458d9e":"train[:5]\ntrain[:-5]","3393acce":"transactions[:5]\ntransactions[:-5]","ddf448c0":"oil[:5]\noil[:-5]","2abc82ec":"holidays_events.head()","32598808":"plt.figure(figsize=(5, 5))\nsns.countplot(data=stores, x='type', order=stores.type.value_counts().index)\nplt.ylabel('count')\nplt.xlabel('type')\nplt.show()","9a8a27ce":"plt.figure(figsize=(25, 5))\nsns.countplot(data=stores, x='state', order=stores.state.value_counts().index)\nplt.ylabel('count')\nplt.xlabel('type')\nplt.show()","64b3de10":"plt.figure(figsize=(25, 5))\nsns.countplot(data=stores, x='city', order=stores.city.value_counts().index)\nplt.ylabel('count')\nplt.xlabel('type')\nplt.show()","6ee65552":"plt.figure(figsize=(20, 15))\n\nsns.barplot(x='sales',y='family',data=train)\nplt.ylabel('family', fontsize=18)\nplt.xlabel('Sales', fontsize=16)\nplt.show()","3438edce":"dict1 = dict()\nfor family in train.family.unique():\n    dict1[family] = 0\n\nfor sale in range(len(train)):\n    dict1[train[\"family\"][sale]]+=train['sales'][sale]\nfor family in dict1:\n    dict1[family] = dict1[family]\/len(train)","c7d08da3":"\ntrain = train.merge(oil, on='date')\ntrain = train.merge(holidays_events[['date', 'type', 'transferred']], on='date')\ntrain = train.merge(stores, on='store_nbr')\ntrain['Year'] = train['date'].apply(lambda x: x.split(\"-\")[0])\ntrain['Month'] =train['date'].apply(lambda x: x.split(\"-\")[1])\ntrain['Day'] = train['date'].apply(lambda x: x.split(\"-\")[2])\ntrain['dayNum'] = train['date'].apply(lambda x: (datetime.strptime(x, \"%Y-%m-%d\")- datetime(2013,1,1)).days)\ntrain['familyNum'] = train['family'].apply(lambda x: dict1[x])\ntrain['type_y']= train['type_y'].apply(lambda x: ord(str(x)))\ntrain['transferred']= train['transferred'].apply(lambda x: int(x))\ntrain['dcoilwtico'] = train['dcoilwtico'].fillna(0)\nencoding = train.groupby('type_x').size()\nencoding = encoding\/len(train)\ntrain['type_x'] = train['type_x'].map(encoding)\nencoding = train.groupby('city').size()\nencoding = encoding\/len(train)\ntrain['city'] = train['city'].map(encoding)\nencoding = train.groupby('state').size()\nencoding = encoding\/len(train)\ntrain['state'] = train['state'].map(encoding)","d643a928":"train","b8dbf520":"test = test.merge(oil, on='date')\ntest = test.merge(holidays_events[['date', 'type', 'transferred']], on='date')\ntest = test.merge(stores, on='store_nbr')\ntest['Year'] = test['date'].apply(lambda x: x.split(\"-\")[0])\ntest['Month'] =test['date'].apply(lambda x: x.split(\"-\")[1])\ntest['Day'] = test['date'].apply(lambda x: x.split(\"-\")[2])\ntest['dayNum'] = test['date'].apply(lambda x: (datetime.strptime(x, \"%Y-%m-%d\")- datetime(2013,1,1)).days)\ntest['familyNum'] = test['family'].apply(lambda x: dict1[x])\ntest['type_y']= test['type_y'].apply(lambda x: ord(str(x)))\ntest['transferred']= test['transferred'].apply(lambda x: int(x))\ntest['dcoilwtico'] = test['dcoilwtico'].fillna(0)\nencoding = test.groupby('type_x').size()\nencoding = encoding\/len(test)\ntest['type_x'] = test['type_x'].map(encoding)\nencoding = test.groupby('city').size()\nencoding = encoding\/len(test)\ntest['city'] = test['city'].map(encoding)\nencoding = test.groupby('state').size()\nencoding = encoding\/len(test)\ntest['state'] = test['state'].map(encoding)","9caa74ee":"test","09cbef2b":"plt.figure(figsize=(20, 15))\n\nsns.lineplot(x='dayNum',y='sales',data=train)\nplt.ylabel('sales', fontsize=18)\nplt.xlabel('day', fontsize=16)\nx = train['dayNum']\ny = train['sales']\nm, b = np.polyfit(x, y, 1)\nplt.plot(x, m*x + b)\n\nplt.show()","6ab74128":"plt.figure(figsize=(20, 15))\n\nplt.ylabel('oil price', fontsize=18)\nplt.xlabel('day', fontsize=16)\nsns.lineplot(x='dayNum',y='dcoilwtico',data=train)\n\nplt.show()","b2f35c90":"plt.figure(figsize=(20, 15))\n\nplt.ylabel('sales', fontsize=18)\nplt.xlabel('month', fontsize=16)\nsns.lineplot(x=train['Month'], y=train['sales'], hue=train['Year'])\n\nplt.show()\n\n","faf47d8b":"plt.figure(figsize=(20, 15))\n\nsns.lineplot(x='dayNum',y='sales',hue=\"type_y\",data=train)\nplt.ylabel('sales', fontsize=18)\nplt.xlabel('day', fontsize=16)\n\nplt.show()","db4f0b23":"grocery1 = train[train.family==\"GROCERY I\"]\nbeverages = train[train.family==\"BEVERAGES\"]\nproduce = train[train.family==\"PRODUCE\"]\ncleaning = train[train.family==\"CLEANING\"]\ndairy = train[train.family==\"DAIRY\"]\n","6d425912":"plt.figure(figsize=(20, 15))\n\nplt.ylabel('top 5 sales', fontsize=18)\nplt.xlabel('day', fontsize=16)\nsns.lineplot(x='dayNum',y='sales',data=grocery1,color=\"red\")\nsns.lineplot(x='dayNum',y='sales',data=beverages,color='orange')\nsns.lineplot(x='dayNum',y='sales',data=produce,color='green')\nsns.lineplot(x='dayNum',y='sales',data=cleaning,color='blue')\nsns.lineplot(x='dayNum',y='sales',data=dairy,color='purple')\n\n\nplt.show()","f2ee0df3":"'''store_sales = pd.read_csv(\n    '..\/input\/store-sales-time-series-forecasting\/train.csv',\n    usecols=['store_nbr', 'family', 'date', 'sales'],\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales['date'] = store_sales.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\n\n\ndf_test = pd.read_csv(\n    '..\/input\/store-sales-time-series-forecasting\/test.csv',\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\ndf_test['date'] = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()'''","51563a59":"'''y = store_sales.unstack(['store_nbr', 'family'])\ny'''","d1f0c8be":"X = train.drop(['family','date','sales'],axis=1)\ny = train['sales']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","f7f18052":"lin = LinearRegression()\nmodel = lin.fit(X_train, y_train)\npreds = model.predict(X_test)\n","f4bacfb9":"data = test.drop(['family','date'],axis=1)\npreds = model.predict(data)\nsample['sales'] = preds\nsample.to_csv('submission.csv', index=False)","ffe0f63a":"Every 1st of january no sales.\n\nBig spike before and after jan. 1st","32c498ab":"upward trend overall.\n\nbig spikes before + after jan 1st\n\nmarch of 2016 and 2017 spikes?"}}