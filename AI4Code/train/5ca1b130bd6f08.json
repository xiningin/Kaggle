{"cell_type":{"29a88148":"code","ac057c3b":"code","a7750bcb":"code","bce391b1":"code","4778587c":"code","dfebc389":"code","87f3c79a":"code","2902b67a":"code","1541833a":"code","368f5f6f":"code","7d94b741":"code","6bfd3932":"code","4f0c7fe2":"code","ad2ee972":"code","02d39cc3":"code","e5c76731":"code","58ff82f4":"code","acf46712":"code","d4df817b":"code","32757070":"code","df0dd948":"code","dac1a4ea":"code","777aa913":"code","0d7f4171":"code","56667e6c":"code","4d7040ba":"code","7c253d30":"code","c5d44fe9":"code","a7f5dd70":"code","08861ce3":"code","bbb97273":"code","c3125d16":"code","3d7a09e9":"code","70788d73":"code","c7ee9723":"code","74c2d4bf":"code","fb5ccfdb":"code","be56995f":"code","0152a1fd":"code","90b7d341":"code","4154c3cd":"code","ab18cdcc":"code","ff0bb174":"code","e869be08":"markdown"},"source":{"29a88148":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ac057c3b":"dataUsers = pd.read_csv('..\/input\/Users.csv') \ndataUsers.head()   # it shows us just first 5 rows of our dataset","a7750bcb":"dataUsers.tail()  # it shows us just last 5 rows of our dataset","bce391b1":"dataUsers.info()   # info about dataset, for exp. there are 1933837 entries in this dataset","4778587c":"dataUsers.columns # if we want to see just columns name","dfebc389":"dataFrameUsers = dataUsers.copy()","87f3c79a":"# I know, this is long way to find out how many users join in kaggle according to years. \n# But i think, it can be a good way just for practice about python syntax :)\ndataRegister1 = dataFrameUsers[['RegisterDate']]\ndataRegister1\ncount10 = 0\ncount11 = 0\ncount12 = 0\ncount13 = 0\ncount14 = 0\ncount15 = 0\ncount16 = 0\ncount17 = 0\ncount18 = 0\n\nfor each in dataRegister1[\"RegisterDate\"]:\n    if (\"2010\" in each):\n         count10 += 1\n    elif(\"2011\" in each):\n         count11 += 1\n    elif(\"2012\" in each):\n         count12 += 1\n    elif(\"2013\" in each):\n         count13 += 1\n    elif(\"2014\" in each):\n         count14 += 1\n    elif(\"2015\" in each):\n         count15 += 1\n    elif(\"2016\" in each):\n         count16 += 1\n    elif(\"2017\" in each):\n        count17 += 1\n    elif(\"2018\" in each):\n        count18 += 1\nprint(\"2010:\",count10,\" 2011:\",count11,\" 2012:\",count12,\" 2013:\",count13,\" 2014:\",count14,\" 2015:\",count15,\" 2016:\",count16,\" 2017:\",count17,\" 2018:\",count18)\n","2902b67a":"# to find out years one by one \ndef yilSay(x):\n    y = str(x)\n    count = 0\n    for each in dataUsers['RegisterDate']:\n        if (y in each):\n             count = count + 1\n    return count\n\nprint(yilSay(2017))  #  #user joined Kaggle in 2017","1541833a":"# to find out all of the years results\ndef f(*args):   \n    for years in args:\n        print(yilSay(years))\n\nresult = f(2010,2011,2012,2013,2014,2015,2016,2017,2018)\nprint(type(result))","368f5f6f":"# and the last one is for if you want to find out all of the years results and put it into a list\ncountUsersList = list()\ndef f(*args):   \n    for years in args:\n        countUsersList.append(yilSay(years))\n\nresultYears = f(2010,2011,2012,2013,2014,2015,2016,2017,2018)\nprint(countUsersList)\n","7d94b741":"# create a list for new dataframes index column\ni = 0\nliste = list()\nwhile i != 9 :\n    liste.append(i)\n    i += 1\n\n#create dataframe\nidx = liste\ncolNames =  ['Years', 'UserCounts']\ndf  = pd.DataFrame(index = idx, columns = colNames)\ndf","6bfd3932":"# create years\ni = 2010\nlisteYears = list()\nwhile i != 2019 :\n    listeYears.append(i)\n    i += 1\nprint(listeYears)\n\n# filling columns\ndf['Years'] = listeYears\ndf['UserCounts'] = countUsersList\ndf","4f0c7fe2":"# plotting with Scatter Plot\ndf.plot(kind='scatter', x='Years', y='UserCounts', color = 'red')\nplt.xlabel = 'Years'\nplt.ylabel = 'UserCounts'\nplt.title = '#Users by Years'\nplt.show()","ad2ee972":"# again scatter plot\nplt.scatter(df.Years,df.UserCounts,color = 'red', alpha = 0.5)\nplt.show()","02d39cc3":"# Line plot\ndf.loc[:,[\"Years\",\"UserCounts\"]]\ndf.plot()\nplt.show()","e5c76731":"df.plot(subplots = True)\nplt.show()","58ff82f4":"# if we want to show the performance tiers which are higher than 4\nx = dataUsers['PerformanceTier'] > 4\ndataUsers[x]","acf46712":"#filtering pandas for logical and\ndataUsers[np.logical_and(dataUsers['Id'] > 1000000 , dataUsers['PerformanceTier'] >= 3)]","d4df817b":"# if we want to count\ndata = dataUsers[np.logical_and(dataUsers['Id'] > 1000000 , dataUsers['PerformanceTier'] >= 3)]\ncount_row = data.shape[0]\nprint(\"Count Row : \",count_row)","32757070":"# same result with 18th line\ndataUsers[(dataUsers['Id'] > 1000000) & (dataUsers['PerformanceTier'] >= 3)] ","df0dd948":"# or we can use like this, again same result 18th line\nfirst_filter = dataUsers.Id > 1000000\nsecond_filter = dataUsers.PerformanceTier >= 3\ndataUsers[first_filter & second_filter]","dac1a4ea":"# add new column to dataframe and use list comprehension\ndataFrameUsers[\"PerformanceTierLevel\"] = [\"HighLevel\" if i > 3 else \"LowLevel\" for i in dataFrameUsers.PerformanceTier]\ndataFrameUsers","777aa913":"# new dataset - we have NaN values\ndataKernels = pd.read_csv('..\/input\/Kernels.csv') \ndataKernels.info()   # info about dataset","0d7f4171":"dataKernels.head()","56667e6c":"dataKernels.shape    # dataset has 183797 rows and 16 features","4d7040ba":"dataKernels.describe()   # ignore null entries ","7c253d30":"# if there are nan values that also be counted\nprint(dataKernels.ForumTopicId.value_counts(dropna = False )) # have 170307 NaN values","c5d44fe9":"dataMissing = dataKernels.loc[0:10,\"Id\":\"CreationDate\"]\n# if we want to drop NaN values and save df \ndataMissing['ForumTopicId'].dropna(inplace = True) \n# inplace = True means save df without NaN values\ndataMissing\n# take a look our df, you can notice that NaN values still remain. \n# Unfortunately I don't know why :( if you know please inform me. But anyway I'll practise a few steps later again :)","a7f5dd70":"# go back line 29 and check it is true or false\nassert dataMissing[\"ForumTopicId\"].notnull().all()\n# return nothing because we drop NaN values","08861ce3":"# filling values 0 insted of NaN\ndataMissing[\"ForumTopicId\"].fillna('0', inplace=True)\ndataMissing","bbb97273":"# Now creating new dataframe in orter to see dropna, fillna results\ndataF = {'country': ['Turkey','Sweden' ,np.nan, 'Spain', 'Italy'], \n            'capital': ['Ankara', 'Stockholm','Helsinki', 'Madrid', 'Roma'], \n            'population': [5445, np.nan, np.nan, 3166 ,2868]}\ndF = pd.DataFrame(dataF, columns = ['country', 'capital', 'population'])\ndF","c3125d16":"dF.dropna()  # NaN values are gone, but df have same values","3d7a09e9":"dF['country'].dropna()  # NaN values are just gone for country columns but df still same","70788d73":"dF2 = dF.copy()\ndF2[\"population\"].fillna('0', inplace=True)  # filling values 0 insted of NaN and save\ndF2","c7ee9723":"# if we want to permanently eliminate NaN values, use inplace = True\ndF3 = dF.copy()\ndF3.dropna(inplace=True)\ndF3","74c2d4bf":"# if we want to combine 2 dataframes\ndata1 = dataKernels.head()\ndata2 = dataKernels.tail()\nconc_data_row = pd.concat([data1,data2], axis=0, ignore_index = True)  # axis = 0 : adds dataframes in row\nconc_data_row","fb5ccfdb":"# if we want to find out type of data4\ndata2.dtypes","be56995f":"# Time Series\ndataTL = dataKernels.loc[0:30,\"Id\":\"TotalVotes\"]\ndataTimeList = dataKernels[\"CreationDate\"].loc[0:30]\ndataTimeList\n#dataTimeList['CreationDate'] = pd.to_datetime(dataKernels['CreationDate'])","0152a1fd":"datetime_object = pd.to_datetime(dataTimeList.tolist())\nprint(type(datetime_object))   ","90b7d341":"dataTL[\"DateCreation\"] = datetime_object.to_datetime()\ndataTL.set_index(\"DateCreation\")  #  dataTL is timeseries","4154c3cd":"dataKernels = pd.read_csv('..\/input\/Kernels.csv') \n# Hierarchical Index\ndataKernels1 = dataKernels.set_index([\"AuthorUserId\",\"TotalVotes\"])  \ndataKernels1.head(5) ","ab18cdcc":"# take columns from TotalViews to TotalVotes and rows up to 30\ndataKernels1 = dataKernels.loc[0:20,\"TotalViews\":\"TotalVotes\"]\ndataKernels1","ff0bb174":"dataKernels.groupby(\"AuthorUserId\").TotalViews.max()","e869be08":"Lets see how many users have joined to Kaggle in which years? And take a look at loop data structures, control flow and functions."}}