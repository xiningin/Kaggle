{"cell_type":{"5b4e8218":"code","59e23263":"code","cb7003e1":"code","9d2563ac":"code","f6125ad4":"code","5ede8c02":"code","aad98a8b":"code","d5badb41":"code","ea254cb2":"code","349dd8b5":"code","b82c2b23":"markdown","6a28b44c":"markdown","6f31ce0b":"markdown","a440d789":"markdown","1a08ce16":"markdown","d1c0f54e":"markdown","b97b4b1c":"markdown","2c8d9c89":"markdown","799d7b7d":"markdown","88e8c90c":"markdown","a48c0f2e":"markdown","0eec3fab":"markdown","ae0dc528":"markdown","bc5edd59":"markdown"},"source":{"5b4e8218":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib import figure\nimport matplotlib\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59e23263":"games=pd.read_csv('..\/input\/most-selling-pc-games\/Games.csv')","cb7003e1":"games.head()","9d2563ac":"g=games.groupby(\"Genre\")","f6125ad4":"g.sum().sort_values(by='Sales', ascending=False)\n","5ede8c02":"\npopular_genre={}\npop_genre={}\nfor genre,genre_df in g:\n    genre\n    genre_df\n    popular_genre[genre]=genre_df['Sales'].sum()\n    pop_genre[genre]=len(genre_df)\ngenre_dataframe = pd.DataFrame(list(popular_genre.items()),columns = ['Genre','Aggregate Sales']) \nprint(genre_dataframe[genre_dataframe['Aggregate Sales']==genre_dataframe['Aggregate Sales'].max()])\n#Action role-playing:58.1\ngenre_dataframe=genre_dataframe.sort_values(by='Aggregate Sales',ascending=False) #for better visualization\n\n# plothing the sales per genre\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(15, 5)\nplt.scatter(genre_dataframe['Genre'], genre_dataframe['Aggregate Sales'])\nplt.xticks(rotation=90) \nplt.title(\"Aggregated Sales per Genre\")\nplt.grid()\nplt.show()","aad98a8b":"\n\ngenre = pd.DataFrame(list(pop_genre.items()),columns = ['Genre','Number of Games'])\nprint(genre[genre['Number of Games']==genre['Number of Games'].max()])\n#visualization\ngenre=genre.sort_values(by=\"Number of Games\", ascending=False)\n\nplt.figure(figsize=(20, 5))\nplt.scatter(genre['Genre'],genre['Number of Games'])\nplt.xticks(rotation=90)\n\nplt.title(\"Number of Games:\")\nplt.grid()\nplt.show()","d5badb41":"p=games.groupby(\"Publisher\")\npublish={}\nfor pub,publisher_df in p:\n    publish[pub]=len(publisher_df)\npublisher = pd.DataFrame(list(publish.items()),columns = ['Publisher','Number of Games Published'])\nprint(publisher[publisher['Number of Games Published']==publisher['Number of Games Published'].max()])\n#visualization\npublisher=publisher.sort_values(by=\"Number of Games Published\", ascending=False)\n\nplt.figure(figsize=(20, 5))\nplt.scatter(publisher['Publisher'],publisher['Number of Games Published'])\nplt.xticks(rotation=90)\nplt.yticks(np.arange(0,21,1))\n\nplt.ylim(0,20)\nplt.title(\"Number of Games published by respective publishers:\")\nplt.grid()\nplt.show()\n    ","ea254cb2":"d=games.groupby(\"Developer\")\ndev={}\nfor deve,develop_df in d:\n    dev[deve]=len(develop_df)\ndeveloper = pd.DataFrame(list(dev.items()),columns = ['Developer','Number of Games Developed'])\nprint(developer[developer['Number of Games Developed']==developer['Number of Games Developed'].max()])\n#visualization\ndeveloper=developer.sort_values(by=\"Number of Games Developed\", ascending=False)\n\nplt.figure(figsize=(20, 5))\nplt.scatter(developer['Developer'],developer['Number of Games Developed'])\nplt.xticks(rotation=90)\n\n# plt.yticks(np.arange(0,21,1))\n\n\nplt.title(\"Number of Games published by respective developers:\")\nplt.grid()\nplt.show()","349dd8b5":"s=games.groupby(\"Series\")\n\n\nser={}\nfor sere,ser_df in s:\n    ser[sere]=len(ser_df)\nseries = pd.DataFrame(list(ser.items()),columns = ['Series','Number of Series'])\nprint(series[series['Number of Series']==series['Number of Series'].max()])\n#visualization\nseries=series.sort_values(by=\"Number of Series\", ascending=False)\n\nplt.figure(figsize=(20, 5))\nplt.scatter(series['Series'],series['Number of Series'])\nplt.xticks(rotation=90)\n\n# plt.yticks(np.arange(0,21,1))\n\n\nplt.title(\"Number of Series:\")\nplt.grid()\nplt.show()","b82c2b23":"**Maximum sale genre is:**\\\nAction role-playing with aggregate sales of 58.1","6a28b44c":"**Which genre is the most popular ?**","6f31ce0b":"**The publisher that published most games is:**\\\nElectronics Arts with 19 games published","a440d789":"**Method 1:** \n\n","1a08ce16":"**Questions to be answered** \\\nWhich genre is the most popular ?\\\nWhich publisher published most of the games ?\\\nWhich developer developed most of the games ?\\\nWhich series is the most popular ?","d1c0f54e":"**Which series is the most popular ?**","b97b4b1c":"**Which genre has maximum sales ?**\n","2c8d9c89":"**Most popular Genre** is Real-time Strategy","799d7b7d":"**Command & Conquer** is the most popular series.","88e8c90c":"**The developer developed most of the games is :**\\\nBlizzard Entertainment with 8 games developed","a48c0f2e":"**Which publisher published most of the games ?**","0eec3fab":"**Which developer developed most of the games ?**","ae0dc528":"**dataframe.groupby()** :function is used to split the data into groups based on some criteria. pandas objects can be split on any of their axes. The abstract definition of grouping is to provide a mapping of labels to group names.","bc5edd59":"**Method 2**"}}