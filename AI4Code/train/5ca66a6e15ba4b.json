{"cell_type":{"ff0dce51":"code","cbe4f66b":"code","1467a3e3":"code","1377ad23":"code","0dfc981d":"code","9444b058":"code","7b3f6c00":"code","65a7d1d1":"code","60327791":"code","ec549cf4":"code","363fb405":"code","edfacb58":"code","a89ba2bd":"code","f19107b0":"code","4305ddec":"code","1a635050":"code","5ff56e6d":"code","b0a53a04":"code","99f9bc2f":"code","9020278a":"code","3e39ebc1":"code","5051c935":"code","af5fa325":"code","e97fe74f":"code","1e7bf67a":"code","9c6891b0":"code","7a1c649c":"code","492486a5":"code","ac093628":"code","70440329":"code","395db907":"code","aaf8e8f9":"code","41cb8bed":"code","b90cc86d":"code","0a9049ec":"code","a7779d0e":"code","c4d277dd":"markdown","a036d490":"markdown","7a27f4e9":"markdown","bf88103b":"markdown","2d3bbd93":"markdown","652678be":"markdown","52fcd077":"markdown"},"source":{"ff0dce51":"!pip install keras-toolkit==0.1.0rc3 -q","cbe4f66b":"import numpy as np\nimport pandas as pd\nimport os\nimport random\nimport tensorflow as tf\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\n\nfrom tensorflow.keras import applications\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import losses\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras import metrics\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications import vgg16\nfrom tensorflow.keras import backend as K\nimport tensorflow_addons as tfa\nfrom sklearn.model_selection import train_test_split\n\nimport keras_toolkit as kt\nfrom kaggle_datasets import KaggleDatasets\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# bokeh packages\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import *\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot,widgetbox\nfrom bokeh.models.widgets import Tabs,Panel\noutput_notebook()","1467a3e3":"seed=42\nrandom.seed(seed)\nnp.random.seed(seed)\nos.environ['PYTHONHASHSEED'] = str(seed)\ntf.random.set_seed(123)","1377ad23":"target_shape = (224, 224)\ndef preprocess_image(filename, target_shape=target_shape):\n    \"\"\"\n    Load the specified file as a JPEG image, preprocess it and\n    resize it to the target shape.\n    \"\"\"\n\n    image_string = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    image = tf.image.resize(image, target_shape)\n    return image\n\n\ndef preprocess_triplets(anchor, positive, negative):\n    \"\"\"\n    Given the filenames corresponding to the three images, load and\n    preprocess them.\n    \"\"\"\n\n    return (\n        preprocess_image(anchor),\n        preprocess_image(positive),\n        preprocess_image(negative),\n    )\n","0dfc981d":"COMPETITION_NAME = 'shopee-product-matching'\nstrategy = kt.accelerator.auto_select(verbose=True)\nGCS_DS_PATH = KaggleDatasets().get_gcs_path(COMPETITION_NAME)\nBATCH_SIZE = strategy.num_replicas_in_sync * 16","9444b058":"train = pd.read_csv('..\/input\/shopee-generate-data-for-triplet-loss\/train_triplets_imgs.csv')\n\ntrain = train.apply(lambda col: GCS_DS_PATH + '\/train_images\/' + col)\ntrain_paths, val_paths = train_test_split(train, train_size=0.8, random_state=42)\ntrain_paths.head()","7b3f6c00":"dtrain = kt.image.build_dataset(\n    (train_paths.anchor, train_paths.positive, train_paths.negative), \n    decode_fn=preprocess_triplets,\n    bsize=BATCH_SIZE,\n    augment=False,\n    repeat=False\n)\n\ndvalid = kt.image.build_dataset(\n    (val_paths.anchor, val_paths.positive, val_paths.negative), \n    decode_fn=preprocess_triplets,\n    bsize=BATCH_SIZE,\n    augment=False,\n    repeat=False\n)","65a7d1d1":"def visualize(pairs):\n    anchor, positive, negative = pairs\n    fig, ax = plt.subplots(10,3, figsize=(10,20))\n    \n    for i in range(10):\n        ax[i, 0].imshow((anchor[i]))\n        ax[i, 1].imshow((positive[i]))\n        ax[i, 2].imshow((negative[i]))\n        ax[i, 0].set_title(\"anchor\")\n        ax[i, 1].set_title(\"Positive\")\n        ax[i, 2].set_title(\"Negative\")\n        ax[i, 0].axis('off')\n        ax[i, 1].axis('off')\n        ax[i, 2].axis('off')","60327791":"visualize_samples = next(iter(dtrain))\nvisualize(visualize_samples)","ec549cf4":"visualize_samples = next(iter(dtrain))\nvisualize(visualize_samples)","363fb405":"'''with strategy.scope():\n    base_cnn = resnet.ResNet50(\n        weights=\"imagenet\", input_shape=target_shape + (3,), include_top=False\n    )\n\n    flatten = layers.Flatten()(base_cnn.output)\n    dense1 = layers.Dense(512, activation=\"relu\")(flatten)\n    dense1 = layers.BatchNormalization()(dense1)\n    dense2 = layers.Dense(256, activation=\"relu\")(dense1)\n    dense2 = layers.BatchNormalization()(dense2)\n    output = layers.Dense(256)(dense2)\n\n    embedding = Model(base_cnn.input, output, name=\"Embedding\")\n\n    trainable = False\n    for layer in base_cnn.layers:\n        if layer.name == \"conv5_block1_out\":\n            trainable = True\n        layer.trainable = trainable'''","edfacb58":"def get_layers_output_by_name(model,layer_names):\n        return {v: model.get_layer(v).output for v in layer_names}","a89ba2bd":"with strategy.scope():\n    vgg_model = vgg16.VGG16(weights=\"imagenet\", include_top=False, input_shape=target_shape + (3,))\n    for layer in vgg_model.layers[:10]:\n            layer.trainable = False\n    intermediate_layer_outputs = get_layers_output_by_name(vgg_model, \n                                                        [\"block1_pool\", \"block2_pool\", \"block3_pool\", \"block4_pool\"])\n    convnet_output = layers.GlobalAveragePooling2D()(vgg_model.output)\n    for layer_name, output in intermediate_layer_outputs.items():\n            output = layers.GlobalAveragePooling2D()(output)\n            convnet_output = layers.concatenate([convnet_output, output])\n    convnet_output = layers.Dense(512, activation = 'relu')(convnet_output)\n    convnet_output = layers.Dropout(0.6)(convnet_output)\n    convnet_output = layers.Dense(512, activation = 'relu')(convnet_output)\n    #convnet_output = layers.Dropout(0.5)(convnet_output)\n    convnet_output = layers.Lambda(lambda p: K.l2_normalize(p,axis=1))(convnet_output)\n    \n    '''anchor_input = layers.Input(shape=target_shape + (3,),name=\"anchor\")    \n    s1 = layers.MaxPool2D(pool_size=(4,4),strides = (4,4),padding='valid')(anchor_input)\n    s1 = layers.ZeroPadding2D(padding=(4, 4), data_format=None)(s1)\n    s1 = layers.Conv2D(96, kernel_size=(8, 8),strides=(4,4), padding='valid')(s1)\n    s1 = layers.ZeroPadding2D(padding=(2, 2), data_format=None)(s1)\n    s1 = layers.MaxPool2D(pool_size=(7,7),strides = (4,4),padding='valid')(s1)\n    s1 = layers.Flatten()(s1)\n    \n    positive_input = layers.Input(shape=target_shape + (3,),name=\"positive\")    \n    s2 = layers.MaxPool2D(pool_size=(8,8),strides = (8,8),padding='valid')(positive_input)\n    s2 = layers.ZeroPadding2D(padding=(4, 4), data_format=None)(s2)\n    s2 = layers.Conv2D(96, kernel_size=(8, 8),strides=(4,4), padding='valid')(s2)\n    s2 = layers.ZeroPadding2D(padding=(1, 1), data_format=None)(s2)\n    s2 = layers.MaxPool2D(pool_size=(3,3),strides = (2,2),padding='valid')(s2)\n    s2 = layers.Flatten()(s2)'''\n    \n    '''merge_one = layers.concatenate([s1, s2])\n    merge_one_norm = layers.Lambda(lambda  x: K.l2_normalize(x,axis=1))(merge_one)\n    merge_two = layers.concatenate([merge_one_norm, convnet_output], axis=1)\n    emb = layers.Dense(512)(merge_two)\n    l2_norm_final = layers.Lambda(lambda  x: K.l2_normalize(x,axis=1))(emb)'''\n    \n    #embedding= Model(inputs=[anchor_input, positive_input, vgg_model.input], outputs=convnet_output)\n    embedding= Model(inputs=[vgg_model.input], outputs=convnet_output,name=\"Embedding\")","f19107b0":"model =  embedding\ntf.keras.utils.plot_model(model, show_shapes=True, show_layer_names=True)","4305ddec":"class DistanceLayer(layers.Layer):\n    \"\"\"\n    This layer is responsible for computing the distance between the anchor\n    embedding and the positive embedding, and the anchor embedding and the\n    negative embedding.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def call(self, anchor, positive, negative):\n        ap_distance = tf.reduce_sum(tf.square(anchor - positive), -1)\n        an_distance = tf.reduce_sum(tf.square(anchor - negative), -1)\n        return (ap_distance, an_distance)\n\n\nwith strategy.scope():\n    anchor_input = layers.Input(name=\"anchor\", shape=target_shape + (3,))\n    positive_input = layers.Input(name=\"positive\", shape=target_shape + (3,))\n    negative_input = layers.Input(name=\"negative\", shape=target_shape + (3,))\n\n    distances = DistanceLayer()(\n        embedding(vgg16.preprocess_input(anchor_input)),\n        embedding(vgg16.preprocess_input(positive_input)),\n        embedding(vgg16.preprocess_input(negative_input)),\n    )\n\n    siamese_network = Model(\n        inputs=[anchor_input, positive_input, negative_input], outputs=distances\n    )","1a635050":"class SiameseModel(Model):\n    \"\"\"The Siamese Network model with a custom training and testing loops.\n\n    Computes the triplet loss using the three embeddings produced by the\n    Siamese Network.\n\n    The Contrastive Loss is defined as:\n       L(\u03b8) = (1-y)(1\/2)D(Xq, Xp)^2 + y(1\/2){max(0, m - D(Xq, Xn)^2)}\n    \"\"\"\n\n    def __init__(self, siamese_network, margin=0.5):\n        super(SiameseModel, self).__init__()\n        self.siamese_network = siamese_network\n        self.margin = margin\n        self.loss_tracker = metrics.Mean(name=\"loss\")\n\n    def call(self, inputs):\n        return self.siamese_network(inputs)\n\n    def train_step(self, data):\n        # GradientTape is a context manager that records every operation that\n        # you do inside. We are using it here to compute the loss so we can get\n        # the gradients and apply them using the optimizer specified in\n        # `compile()`.\n        with tf.GradientTape() as tape:\n            loss = self._compute_loss(data)\n\n        # Storing the gradients of the loss function with respect to the\n        # weights\/parameters.\n        gradients = tape.gradient(loss, self.siamese_network.trainable_weights)\n\n        # Applying the gradients on the model using the specified optimizer\n        self.optimizer.apply_gradients(\n            zip(gradients, self.siamese_network.trainable_weights)\n        )\n\n        # Let's update and return the training loss metric.\n        self.loss_tracker.update_state(loss)\n        return {\"loss\": self.loss_tracker.result()}\n\n    def test_step(self, data):\n        loss = self._compute_loss(data)\n\n        # Let's update and return the loss metric.\n        self.loss_tracker.update_state(loss)\n        return {\"loss\": self.loss_tracker.result()}\n\n    def _compute_loss(self, data):\n        # The output of the network is a tuple containing the distances\n        # between the anchor and the positive example, and the anchor and\n        # the negative example.\n        loss = tf.convert_to_tensor(0,dtype=tf.float32)\n        g = tf.constant(1.0, shape=[1], dtype=tf.float32)\n        h = tf.constant(0.0, shape=[1], dtype=tf.float32)\n        \n        def _contrastive_loss(y_true, y_pred):\n            return tfa.losses.contrastive_loss(y_true, y_pred)\n        \n        ap_distance, an_distance = self.siamese_network(data)\n        loss_query_pos = _contrastive_loss(g, ap_distance)\n        loss_query_neg = _contrastive_loss(h, an_distance)\n        loss = loss + loss_query_pos + loss_query_neg\n\n        # Computing the Triplet Loss by subtracting both distances and\n        # making sure we don't get a negative value.\n        #loss = ap_distance - an_distance\n        loss = tf.maximum(loss + self.margin, 0.0)\n        return loss\n\n    @property\n    def metrics(self):\n        # We need to list our metrics here so the `reset_states()` can be\n        # called automatically.\n        return [self.loss_tracker]","5ff56e6d":"class SiameseModelExperiment(Model):\n    \"\"\"The Siamese Network model with a custom training and testing loops.\n\n    Computes the triplet loss using the three embeddings produced by the\n    Siamese Network.\n    \"\"\"\n\n    def __init__(self, network, margin=0.5, batch_size=32):\n        super(SiameseModelExperiment, self).__init__()\n        self.model = network\n        self.margin = margin\n        self.batch_size = batch_size\n        self.loss_tracker = metrics.Mean(name=\"loss\")\n\n    def call(self, inputs):\n        return self.model(inputs)\n\n    def train_step(self, data):\n        # GradientTape is a context manager that records every operation that\n        # you do inside. We are using it here to compute the loss so we can get\n        # the gradients and apply them using the optimizer specified in\n        # `compile()`.\n        with tf.GradientTape() as tape:\n            q_emd = self.model((data[0], data[0], data[0]), training = True)\n            p_emd = self.model((data[1], data[1], data[1]), training = True)\n            n_emd = self.model((data[2], data[2], data[2]), training = True)\n            loss_value = self.contrastive_loss_function(q_emd, p_emd, n_emd, self.batch_size)\n            accuracy_value = self.accuracy(q_emd, p_emd, n_emd, self.batch_size)\n\n        grads = tape.gradient(loss_value, self.model.trainable_weights)\n        self.optimizer.apply_gradients(zip(grads, self.model.trainable_weights))\n        return {\"loss\": loss_value, \"acc\":accuracy_value}\n    \n    def test_step(self, data):\n        loss = self._compute_loss(data)\n\n        # Let's update and return the loss metric.\n        self.loss_tracker.update_state(loss)\n        return {\"loss\": self.loss_tracker.result()}\n    \n    def contrastive_loss_function(self, q_emd, p_emd, n_emd, batch_size):\n        '''\n          Ref: https:\/\/github.com\/gofynd\/mildnet\/blob\/master\/trainer\/loss.py\n          This function takes embedding generated by model for each of the image\n          part of the triplet and return the loss value for the batch.\n          q_emd(input): embedding generated by model for query image(tensor of size [batch, 4096])\n          p_emd(input): embedding generated by model for query image(tensor of size [batch, 4096])\n          n_emd(input): embedding generated by model for query image(tensor of size [batch, 4096])\n          batch_size(input): batch size for each step\n          loss(output): Final loss for a batch\n        '''\n        def _contrastive_loss(y_true, y_pred):\n            return tfa.losses.contrastive_loss(y_true, y_pred)\n\n        loss = tf.convert_to_tensor(0,dtype=tf.float32)\n        g = tf.constant(1.0, shape=[1], dtype=tf.float32)\n        h = tf.constant(0.0, shape=[1], dtype=tf.float32)\n\n        for obs_num in range(batch_size):\n            dist_query_pos = tf.sqrt(tf.reduce_sum((q_emd[obs_num] - p_emd[obs_num])**2))\n            dist_query_neg = tf.sqrt(tf.reduce_sum((q_emd[obs_num] - n_emd[obs_num])**2))\n            loss_query_pos = _contrastive_loss(g, dist_query_pos)\n            loss_query_neg = _contrastive_loss(h, dist_query_neg)\n            loss = loss + loss_query_pos + loss_query_neg\n\n        loss = loss\/(batch_size*2)\n        zero = tf.constant(0.0, shape=[1], dtype=tf.float32)\n        return tf.maximum(loss, zero)\n    \n    def accuracy(self, q_emd, p_emd, n_emd, batch_size):\n        '''\n          Ref: https:\/\/github.com\/gofynd\/mildnet\/blob\/master\/trainer\/accuracy.py\n          This function takes in embedding and return the accuracy value for the batch\n          q_emd(input): embedding generated by model for query image(tensor of size [batch, 4096])\n          p_emd(input): embedding generated by model for query image(tensor of size [batch, 4096])\n          n_emd(input): embedding generated by model for query image(tensor of size [batch, 4096])\n          batch_size(input): batch size for each step\n          accuracy(output): Final accuracy value for a batch\n        '''\n        accuracy = 0\n        for obs_num in range(batch_size):\n            dist_query_pos = tf.sqrt(tf.reduce_sum((q_emd[obs_num] - p_emd[obs_num])**2))\n            dist_query_neg = tf.sqrt(tf.reduce_sum((q_emd[obs_num] - n_emd[obs_num])**2))\n            accuracy += tf.cond(dist_query_neg > dist_query_pos, lambda : 1, lambda : 0)\n\n        return (accuracy * 100) \/ batch_size","b0a53a04":"with strategy.scope():\n    siamese_model = SiameseModel(siamese_network)\n    #siamese_model.compile(optimizer=optimizers.Adam(0.0001))\n    siamese_model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate = 0.001))\n\nhist = siamese_model.fit(dtrain, epochs=20, validation_data=dvalid)","99f9bc2f":"siamese_model.save_weights('siamese_model.h5')\nsiamese_model.siamese_network.save_weights('siamese_network.h5')\nembedding_net = siamese_model.siamese_network.get_layer(\"Embedding\")\nembedding_net.save_weights('embedding_net.h5')","9020278a":"import plotly.express as px\npx.line(hist.history)","3e39ebc1":"def visualize_test(pairs, pred):\n    anchor, positive, negative = pairs\n    fig, ax = plt.subplots(10,3, figsize=(10,20))\n    \n    for i in range(10):\n        ax[i, 0].imshow((anchor[i]))\n        ax[i, 1].imshow((positive[i]))\n        ax[i, 2].imshow((negative[i]))\n        ax[i, 0].set_title(\"anchor\")\n        ax[i, 1].set_title(\"Positive: {:.3f}\".format(1 - pred[0][i]))\n        ax[i, 2].set_title(\"Negative: {:.3f}\".format(1 - pred[1][i]))\n        ax[i, 0].axis('off')\n        ax[i, 1].axis('off')\n        ax[i, 2].axis('off')","5051c935":"data_test = next(iter(dvalid))\npred = siamese_model.predict([data_test[0],data_test[1],data_test[2]])\nvisualize_test(data_test, pred)","af5fa325":"data_test = next(iter(dvalid))\npred = siamese_model.predict([data_test[0],data_test[1],data_test[2]])\nvisualize_test(data_test, pred)","e97fe74f":"data_test = next(iter(dvalid))\npred = siamese_model.predict([data_test[0],data_test[1],data_test[2]])\nvisualize_test(data_test, pred)","1e7bf67a":"data_test = next(iter(dvalid))\npred = siamese_model.predict([data_test[0],data_test[1],data_test[2]])\nvisualize_test(data_test, pred)","9c6891b0":"data_valid = pd.read_csv('..\/input\/shopee-generate-data-for-triplet-loss\/train_triplets_titles.csv')\ndata_valid =data_valid.loc[val_paths.index,:].reset_index(drop=True)","7a1c649c":"data_valid2 =val_paths.reset_index(drop=True)","492486a5":"pred = model.predict(dvalid)\npred = np.nan_to_num(pred)","ac093628":"# Encoding all the images for inclusion in a dataframe.\n\nfrom io import BytesIO\nfrom PIL import Image\nimport base64\n\ndef embeddable_image(img):\n    img = img.split('\/')[-1]\n    img = '..\/input\/shopee-product-matching\/train_images\/'+img\n    \n    data = Image.open(img)\n    data =np.asarray(data)\n    \n    img_data = data.astype(np.uint8)\n    image = Image.fromarray(img_data).resize((50,50), Image.BICUBIC)\n    buffer = BytesIO()\n    image.save(buffer, format='png')\n    for_encoding = buffer.getvalue()\n    return 'data:image\/png;base64,' + base64.b64encode(for_encoding).decode()","70440329":"from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport seaborn as sns","395db907":"scale = preprocessing.StandardScaler()\nX = scale.fit_transform(pred)\nX_norm = preprocessing.normalize(X)\n\npca_N = PCA(n_components=2)\nprincipalComponents_N = pca_N.fit_transform(X_norm)","aaf8e8f9":"# initial source\nsource = ColumnDataSource(data=dict(\n    x = principalComponents_N[:, 0],\n    y = principalComponents_N[:, 1],\n    x_backup = principalComponents_N[:, 0],\n    y_backup = principalComponents_N[:, 1],\n    anchor = data_valid.anchor,\n    positive = data_valid.positive,\n    negative = data_valid.negative\n))\n\n# hover tool\nhover = HoverTool(tooltips = [(\"anchor\",\"@anchor\"),(\"positive\",\"@positive\"),(\"negative\",\"@negative\")],\n                 point_policy=\"follow_mouse\")\n\n# plotting\nplot=figure(title =\"PCA Visualization\",\n            plot_width=900, plot_height=850, \n            tools=[hover,\"crosshair\",\"pan\",\"box_zoom\",\"wheel_zoom\", \"reset\"])\n# plot settings\nplot.scatter('x', 'y', size=5, \n          source=source,\n          \n          line_alpha=0.3,\n          line_color=\"black\")\n\n# this is different from what we learn up to now.\n# update method: When slider is changed or when different value from drop down tool is chosen this method is called.\n# In this method x and y axis are updated from drop dawn value and year is updated from slider value.\nshow(plot,notebook_handle=True)","41cb8bed":"# initial source\nsource = ColumnDataSource(data=dict(\n    x = principalComponents_N[:, 0],\n    y = principalComponents_N[:, 1],\n    x_backup = principalComponents_N[:, 0],\n    y_backup = principalComponents_N[:, 1],\n    anchor = data_valid.anchor,\n    image = list(map(embeddable_image, data_valid2.anchor))\n))\n\n# hover tool\n#hover = HoverTool(tooltips = [(\"anchor\",\"@anchor\"),(\"positive\",\"@positive\"),(\"negative\",\"@negative\")],\n#                 point_policy=\"follow_mouse\")\n\n# plotting\nplot=figure(title =\"PCA Visualization with Anchor Images\",\n            plot_width=900, plot_height=850, \n            tools=[\"pan\", \"wheel_zoom\", \"reset\",\"crosshair\",\"box_zoom\"])\n\nplot.add_tools(HoverTool(tooltips=\"\"\"\n<div>\n    <div>\n        <img src='@image' style='float: left; margin: 30px 30px 30px 30px'\/>\n    <\/div>\n    <div>\n        <span style='font-size: 10px; color: #224499'>Anchor:<\/span>\n        <span style='font-size: 10px'>@anchor<\/span>\n    <\/div>\n<\/div>\n\"\"\"))\n\n# plot settings\nplot.scatter('x', 'y', size=5, \n          source=source,\n          \n          line_alpha=0.3,\n          line_color=\"black\")\n\n# this is different from what we learn up to now.\n# update method: When slider is changed or when different value from drop down tool is chosen this method is called.\n# In this method x and y axis are updated from drop dawn value and year is updated from slider value.\nshow(plot,notebook_handle=True) ","b90cc86d":"from sklearn.manifold import TSNE\n\npca_50 = PCA(n_components=5)\nprincipalComponents_50 = pca_50.fit_transform(pred)\n\ntsne_50 = TSNE(random_state = 42, n_components=2,verbose=0, perplexity=50, n_iter=300).fit_transform(principalComponents_50)","0a9049ec":"# initial source\nsourceA = ColumnDataSource(data=dict(\n    x = tsne_50[:, 0],\n    y = tsne_50[:, 1],\n    x_backup = tsne_50[:, 0],\n    y_backup = tsne_50[:, 1],\n    anchor = data_valid.anchor,\n    positive = data_valid.positive,\n    negative = data_valid.negative\n))\n\n# hover tool\nhoverA = HoverTool(tooltips = [(\"anchor\",\"@anchor\"),(\"positive\",\"@positive\"),(\"negative\",\"@negative\")],\n                 point_policy=\"follow_mouse\")\n\n# plotting\nplotA=figure(title =\"TSNE on PCA Visualization\",\n            plot_width=900, plot_height=850, \n            tools=[hoverA,\"crosshair\",\"pan\",\"box_zoom\"])\n# plot settings\nplotA.scatter('x', 'y', size=5, \n          source=sourceA,\n          \n          line_alpha=0.3,\n          line_color=\"black\")\n\n# this is different from what we learn up to now.\n# update method: When slider is changed or when different value from drop down tool is chosen this method is called.\n# In this method x and y axis are updated from drop dawn value and year is updated from slider value.\nshow(plotA,notebook_handle=True) ","a7779d0e":"# initial source\nsource = ColumnDataSource(data=dict(\n    x = tsne_50[:, 0],\n    y = tsne_50[:, 1],\n    x_backup = tsne_50[:, 0],\n    y_backup = tsne_50[:, 1],\n    anchor = data_valid.anchor,\n    image = list(map(embeddable_image, data_valid2.anchor))\n))\n\n# hover tool\n#hover = HoverTool(tooltips = [(\"anchor\",\"@anchor\"),(\"positive\",\"@positive\"),(\"negative\",\"@negative\")],\n#                 point_policy=\"follow_mouse\")\n\n# plotting\nplot=figure(title =\"TSNE on PCA50 Visualization with Anchor Images\",\n            plot_width=900, plot_height=850, \n            tools=[\"pan\", \"wheel_zoom\", \"reset\",\"crosshair\",\"box_zoom\"])\n\nplot.add_tools(HoverTool(tooltips=\"\"\"\n<div>\n    <div>\n        <img src='@image' style='float: left; margin: 30px 30px 30px 30px'\/>\n    <\/div>\n    <div>\n        <span style='font-size: 10px; color: #224499'>Anchor:<\/span>\n        <span style='font-size: 10px'>@anchor<\/span>\n    <\/div>\n<\/div>\n\"\"\"))\n\n# plot settings\nplot.scatter('x', 'y', size=5, \n          source=source,\n          \n          line_alpha=0.3,\n          line_color=\"black\")\n\n# this is different from what we learn up to now.\n# update method: When slider is changed or when different value from drop down tool is chosen this method is called.\n# In this method x and y axis are updated from drop dawn value and year is updated from slider value.\nshow(plot,notebook_handle=True) ","c4d277dd":"## Visualize data","a036d490":"## Extra Visualizations","7a27f4e9":"## Visualization over validation data","bf88103b":"## Training Model class for Multi-scale convolutional neural network architecture","2d3bbd93":"## About\nThis notebook has been forked from [Shopee: Siamese ResNet-50 with triplet loss on TPU](https:\/\/www.kaggle.com\/xhlulu\/shopee-siamese-resnet-50-with-triplet-loss-on-tpu), so please go and check out the notebook and support his work.<br>\nI have tried to solve the Shopee similar image estimation problem with reference to the research paper [Retrieving Similar E-Commerce Images Using Deep Learning](https:\/\/arxiv.org\/pdf\/1901.03546v1.pdf), code - https:\/\/github.com\/gofynd\/mildnet","652678be":"## Train","52fcd077":"## Note\nThe commented segment shown in the below code cell represents the **Multi-scale convolutional neural network** architecture as discussed in the research paper [Retrieving Similar E-Commerce Images Using Deep Learning](https:\/\/arxiv.org\/pdf\/1901.03546v1.pdf), which I tried to build but was facing errors when I was trying to train the model. **SiameseModelExperiment** is the training model class that I built for the model if **Multi-scale convolutional neural network** was the architecture.<br>\nPlease give it try to solve the error and I wish you could solve it."}}