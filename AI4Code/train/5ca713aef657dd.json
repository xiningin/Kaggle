{"cell_type":{"44574d30":"code","a2242e5d":"code","aff4c98a":"code","c7c0b2cb":"code","322b2bd8":"code","43e424b0":"markdown"},"source":{"44574d30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2242e5d":"class Node:\n    def __init__(self, dataval=None):\n        self.dataval = dataval\n        self.nextval = None\n        self.prevval = None\n\nclass LinkedList:\n    def __init__(self):\n        self.headval = None\n    \n    def printlistExtra(self):\n        node = self.headval\n        while node is not None:\n            print(f\"Node: {node.dataval}\")\n            if node.nextval is not None:\n                print(f\"Nextval: {node.nextval.dataval}\")\n            if node != self.headval:\n                print(f\"Prevval: {node.prevval.dataval}\")\n            print(\"-------\")\n            node = node.nextval\n    \n    def printlist(self):\n        node = self.headval\n        while node is not None:\n            if node.nextval is None:\n                print(node.dataval)\n                break\n            print(f\"{node.dataval}, \", end=\"\")\n            node = node.nextval\n\n    def insertAtBegin(self,newval):\n        newnode = Node(newval)\n        newnode.nextval = self.headval\n        self.headval.prevval = newnode\n        self.headval = newnode\n        \n    def insertAtEnd(self,newval):\n        newnode = Node(newval)\n        if self.headval is None:\n            self.headval = newnode\n            return\n        node = self.headval\n        while node.nextval:\n            node = node.nextval\n        node.nextval = newnode\n        newnode.prevval = node\n    \n    def insertAfterNode(self,node, newval):\n        # node is before newnode\n        # check if Node is None -> print \"error\" and return\n        if node is None:\n            print(\"Node does not exist - Error\")\n            return\n        \n        newnode = Node(newval)\n        newnode.nextval = node.nextval\n        newnode.prevval = node\n        node.nextval.prevval = newnode\n        node.nextval = newnode\n    \n    def removeNode(self,node2Remove):\n        if node2Remove is None:\n            print(\"Node does not exist - Error\")\n            return\n        node = self.headval\n        \n        # Special case if node2Remove is headnode\n        if self.headval == node2Remove:\n            node2Remove.nextval.prevval = None\n            self.headval = self.headval.nextval\n            node2Remove.nextval = None\n            \n        \n        while node.nextval:\n            if node.nextval == node2Remove:\n                node.nextval = node2Remove.nextval\n                if node.nextval is not None:\n                    node2Remove.nextval.prevval = node\n                node2Remove.nextval = None\n                #node2Remove.dataval = None\n                node2Remove.prevval = None\n                return\n            node = node.nextval\n    \n    def insertValuesAtEnd(self, values):\n        for value in values:\n            self.insertAtEnd(value)\n            \n    def getLength(self):\n        count = 0\n        if self.headval is None:\n            return\n        count += 1\n        node = self.headval\n        while node.nextval is not None:\n            node = node.nextval\n            count+=1\n        return count\n    \n    def swapNodes(self, n1, n2):\n        if n1 is None or n2 is None:\n            print(\"Error, one of the swapped nodes is None\")\n            return","aff4c98a":"data = [23,55,41,12,44,97,17,69,25,48,45,6,62,31,12,61,40,7,96,83]\n\nmylist = LinkedList()\nmylist.insertValuesAtEnd(data)\nmylist.printlist()\nprint(mylist.getLength())","c7c0b2cb":"def InsertionSortDLL(linkedlist):\n    length = linkedlist.getLength()\n    if length <= 1:\n        return linkedlist\n\n    for i in range(1, length):\n\n        node_i = linkedlist.headval\n        # loop for the i index\n        for u in range(i):\n            node_i = node_i.nextval\n        node_j = node_i.prevval\n        \n        # main swap loop\n        while node_i.dataval < node_j.dataval:\n            \n            # If conditions if the J is the headval\n            if node_j == linkedlist.headval:\n                node_i.nextval.prevval = node_j\n                node_i.prevval = None\n                node_j.prevval = node_i\n                node_j.nextval = node_i.nextval\n                node_i.nextval = node_j\n                linkedlist.headval = node_i\n                break\n            \n            else:\n                if node_i.nextval is not None:\n                    node_i.nextval.prevval = node_j\n                node_j.prevval.nextval = node_i\n                node_i.prevval = node_j.prevval\n                node_j.prevval = node_i\n                node_j.nextval = node_i.nextval\n                node_i.nextval = node_j\n\n            linkedlist.printlist()\n            # Go back 2 indices because of the swap (i and j)\n            node_j = node_j.prevval.prevval\n    return ","322b2bd8":"InsertionSortDLL(mylist)","43e424b0":"Double Linked List"}}