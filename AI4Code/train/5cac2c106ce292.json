{"cell_type":{"88878b6b":"code","37a786a8":"code","68166db9":"code","bcb37fc7":"code","d8bf904c":"code","88277527":"code","6e270d5e":"code","84543bc3":"code","76ebf07b":"code","03567e0a":"code","ac07daaf":"markdown","37563ca5":"markdown","0f9d508b":"markdown","dd78b04d":"markdown","00394fa1":"markdown","b29fcb20":"markdown","f54b47af":"markdown","29bdd7b1":"markdown","87d6f442":"markdown","941b6edf":"markdown","107be65e":"markdown"},"source":{"88878b6b":"#Requests library is for fetching data\nimport requests\n#Pandas for traversing and structuring data\nimport pandas as pd\n#json_normalize is used coverting JSON to Pandas Dataframe\nfrom pandas.io.json import json_normalize \n#Matplotlib for creating visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n#Datetime as we are going to search data for each day\nfrom datetime import date,timedelta\nimport operator\n#Below code is used when you want to store animated video to your system\n#plt.rcParams['animation.ffmpeg_path'] = 'C:\/ffmpeg\/bin\/ffmpeg.exe'","37a786a8":"# Set up formatting for the movie files\nWriter = animation.writers['ffmpeg']\nwriter = Writer(fps=3, metadata=dict(artist='Me'), bitrate=1800)","68166db9":"raw_data=requests.get('https:\/\/api.covid19india.org\/raw_data.json')\nraw_data=raw_data.json()","bcb37fc7":"#Converting JSON Data to Pandas Dataframe\ndf_raw_data=pd.json_normalize(raw_data,\"raw_data\")\n\n#Dropping currently unwanted rows from Dataframe\ndf_raw_data=df_raw_data.drop(['source2','source1','source3','gender','contractedfromwhichpatientsuspected','estimatedonsetdate','patientnumber','detecteddistrict','detectedcity','agebracket'],axis=1)\n\n#Removing row with empty State value from Dataframe\ndf_raw_data=df_raw_data[df_raw_data['detectedstate']!=\"\"]\n\n#Reading first 5 rows\ndf_raw_data.head(5)","d8bf904c":"states_group=df_raw_data.groupby('detectedstate')\nstates=list(states_group.groups.keys())\nprint(f\"We have data from {len(states)} states in India\")","88277527":"colors = dict(zip(\n   ['Andaman and Nicobar Islands',\n 'Andhra Pradesh',\n 'Arunachal Pradesh',\n 'Assam',\n 'Bihar',\n 'Chandigarh',\n 'Chhattisgarh',\n 'Delhi',\n 'Goa',\n 'Gujarat',\n 'Haryana',\n 'Himachal Pradesh',\n 'Jammu and Kashmir',\n 'Jharkhand',\n 'Karnataka',\n 'Kerala',\n 'Ladakh',\n 'Madhya Pradesh',\n 'Maharashtra',\n 'Manipur',\n 'Meghalaya',\n 'Mizoram',\n 'Odisha',\n 'Puducherry',\n 'Punjab',\n 'Rajasthan',\n 'Tamil Nadu',\n 'Telangana',\n 'Tripura',\n 'Uttar Pradesh',\n 'Uttarakhand',\n 'West Bengal'],\n    ['#adb0ff', '#ffb3ff', '#90d595', '#e48381','#aafbff', '#f7bb5f', '#eafb50','#E91010','#E96F10','#35E910','#11E910','#10E971',\n    '#D198A5','#D1989E', '#90d595', '#e48381','#aafbff', '#f7bb5f', '#eafb50','#E91010','#E96F10','#35E910','#11E910','#10E971',\n    '#10E7E9','#10CDE9','#1095E9','#98A9D1','#BC98D1','#CF98D1','#D198BF','#D198B4']\n))","6e270d5e":"total_cases_dict={}\n#Creating subplot for our graph\nfig_single, ax_single = plt.subplots(figsize=(15, 8))\n#Assigning random date and finding out results\nrandom_date=date(2020,4,22)\n#Format date before searching in dataframe as Format in data frame is dd\/mm\/yyyy\nrandom_date=random_date.strftime(\"%d\/%m\/%Y\")\n#Getting data for the day we are searching for\ndf_according_date1=df_raw_data[df_raw_data['dateannounced']==(random_date)]\n#Group data according to States\ndf_grouped=df_according_date1.groupby('detectedstate')\n#Finding total cases reported in each state\nfor val in zip(df_grouped.groups.keys(),df_grouped.groups.values()):\n        state=val[0]\n        temp=len(val[1])\n        try:\n            total_cases_dict[state]=total_cases_dict[state]+temp\n        except:\n            total_cases_dict[state]=temp\ntotal_cases_dict1 = dict(sorted(total_cases_dict.items(), key=operator.itemgetter(1)))\ntotal_states=list(total_cases_dict1.keys())\ntotal_count=list(total_cases_dict1.values())\nax_single.clear()\n#Plotting bar data using data\nax_single.barh(total_states,total_count, color=[colors[x] for x in total_states])\n\n#Finding small factor to subtract or add to the count to give to good look to our bar chart\ntry:\n    dx=max(total_count)\/200\nexcept:\n    dx=0\nfor i, (state, count) in enumerate(zip(total_states, total_count)):\n    #Adding state name inside the bar so we do actual count-small factor\n    ax_single.text(count-dx, i,     state,           size=10, weight=600, ha='right', va='bottom')\n    #Adding count outside the bar so we do actual count-small factor\n    ax_single.text(count+dx, i,     f'{count:,.0f}',  size=14, ha='left',  va='center')\n    #Adding todays date to the middle of graph\n    ax_single.text(1, 0.4, random_date, transform=ax_single.transAxes, color='#777777', size=46, ha='right', weight=800)\n    #Assigning label to x-axis\n    ax_single.text(0, 1.06, 'Total Confirmed Cases', transform=ax_single.transAxes, size=12, color='#777777')\n    ax_single.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax_single.xaxis.set_ticks_position('top')\n    ax_single.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax_single.set_yticks([])\n    ax_single.margins(0, 0.01)\n    ax_single.grid(which='major', axis='x', linestyle='-')\n    ax_single.set_axisbelow(True)\n    ax_single.text(0, 1.12, 'Confirmed Corona Virus cases in India from 30th January,2020 to 1st May,2020',\n            transform=ax_single.transAxes, size=24, weight=600, ha='left')\n    ax_single.text(1, 0, 'by Satish Fulwani', transform=ax_single.transAxes, ha='right',\n            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)","84543bc3":"#Here we are using total_cases_dict dictionary for keeping track of cases registred till date in particular state\nfig, ax = plt.subplots(figsize=(15, 8))\ntotal_cases_dict={}\ndef draw_graph(todays_date):\n    #Converting date to specified form\n    todays_date=todays_date.strftime(\"%d\/%m\/%Y\")\n    df_according_date=df_raw_data[df_raw_data['dateannounced']==(todays_date)]\n    df_grouped=df_according_date.groupby('detectedstate')\n    #Below loop check if state is present in total_cases_dict if state is present so updates the count, if state is not present then state is added to dict with count\n    for val in zip(df_grouped.groups.keys(),df_grouped.groups.values()):\n        state=val[0]\n        temp=len(val[1])\n        try:\n            total_cases_dict[state]=total_cases_dict[state]+temp\n        except:\n            total_cases_dict[state]=temp\n    total_cases_dict1 = dict(sorted(total_cases_dict.items(), key=operator.itemgetter(1)))\n    total_states=list(total_cases_dict1.keys())\n    total_count=list(total_cases_dict1.values())\n    ax.clear()\n    ax.barh(total_states,total_count,color=[colors[x] for x in total_states])\n    try:\n        dx=max(total_count)\/200\n    except:\n        dx=0\n    for i, (state, count) in enumerate(zip(total_states, total_count)):\n        ax.text(count, i,     state,           size=10, weight=600, ha='right', va='center')\n        ax.text(count+dx, i,     f'{count:,.0f}',  size=14, ha='left',  va='center')\n    ax.text(1, 0.4, todays_date, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Total Cases', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.12, 'Confirmed Corona Virus cases in India from 30th January,2020 to 1st May,2020',\n            transform=ax.transAxes, size=18, weight=600, ha='left')\n    ax.text(1, 0, 'by @satish fulwani', transform=ax.transAxes, ha='right',\n            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)\n\nrandom_date=date(2020,4,23)\ndraw_graph(random_date)","76ebf07b":"#Defing subplot\nfig, ax = plt.subplots(figsize=(15, 8))\n#Dictionary for storing data of confirmed cases till date\ntotal_cases_dict={}\n#start_date variable declares the start date to be considered for racing plot\nstart_date=date(2020,1,30)\n#end_date variable declares the end date to be considered for racing plot\nend_date=date(2020,5,1)\n\n#We have to use delta as we have to pass dates between start_date and end_date to our function\ndelta=end_date-start_date\ntotal_days=[]\n#Below loop is for generating dates between start and end date\nfor i in range(delta.days+1):\n    day=start_date+timedelta(days=i)\n    total_days.append(day)\n    \n#Defining our animator function which will be called for all dates in our start and end window\nanimator = animation.FuncAnimation(fig, draw_graph,frames=total_days,save_count=300)\n\n#Below code will show Racing graph in Jupyter notebook\nHTML(animator.to_jshtml())\n\n#Below code is used to store video to our local system\n#For using below line make sure you install 'ffmpeg', which is used to load and store video files to our system \n# animator.save('corona-confirmed-cases.mp4',writer=writer)","03567e0a":"fig.savefig('covid-19')","ac07daaf":"# COVID-19 India Data Analysis\n\nThis project is created as to understand the increase in confirmed COVID-19 cases in India.\n\nIn this project I have created the Racing Bar Graph for increase in confirm cases of each State in India from January,2020 to May,2020.\n\nVarious articles were reffered by me to understand Racing Bar Graph.\n### Links for reference:\n     1) https:\/\/towardsdatascience.com\/bar-chart-race-in-python-with-matplotlib-8e687a5c8a41\n     2) https:\/\/www.kaggle.com\/caniban\/bar-chart-race-with-matplotlib\n     3) https:\/\/documenter.getpostman.com\/view\/10724784\/SzYXXKmA?version=latest\n     \nData used is from API: https:\/\/api.covid19india.org\/raw_data.json\n\n##### Topics covered in this Notebook are:\n - Preprocessing of Raw Data\n - Bar graph of confirmed cases in India for all states on Single Day\n - Racing Bar graph for all states from 30th January,2020 to 1st May,2020\n\n### For any queries reach out to me at:\n - Github: https:\/\/github.com\/satishf889\n - LinkedIn: https:\/\/in.linkedin.com\/in\/satish-fulwani-a831a9150\n - Email: satish.fulwani63@gmail.com\n\n\nNote: Data in this api is getting updated slowly so you might see differences in count.","37563ca5":"### Import all the required libraries","0f9d508b":"### Saving final image as png format","dd78b04d":"### Getting data from API (We are using Raw Data API)  ","00394fa1":"### Creating writer for storing file to local system","b29fcb20":"### Adding all the above steps to Method which would be called by FuncAnimation class.(For more details read comments in above cell)","f54b47af":"### We would be using Animations FuncAnimation class, which helps us to store live animations\nFor more details read: https:\/\/www.geeksforgeeks.org\/matplotlib-animation-funcanimation-class-in-python\/","29bdd7b1":"### Generating Graph for Cases registered on Single Day","87d6f442":"### Finding out total States in Data that will be used further assigning different colors to bars","941b6edf":"### Creating color Dictionary and assigning color to each state","107be65e":"### Performing Data manupulations"}}