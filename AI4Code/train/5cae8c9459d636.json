{"cell_type":{"279bf7f0":"code","7cf2c50c":"code","78e4a7e5":"code","ceeaba69":"code","7b2c27fc":"code","6e8e013f":"code","acbf777d":"code","c8acc383":"markdown","37ce8e47":"markdown","24c1b8ba":"markdown","8f27e912":"markdown","2aa89576":"markdown","7cc8fe43":"markdown"},"source":{"279bf7f0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings  \nwarnings.filterwarnings('ignore')","7cf2c50c":"data = pd.read_csv('..\/input\/monthly-container-holding-of-ports-in-south-korea\/container.csv', index_col=0)\ndata.head()","78e4a7e5":"data = data[data['Harbor']!='East Sea, Mukho']\ndata_notKR = data[data['isKorean']==False]\ndata = data[data['isKorean']==True]\ndata = pd.merge(data, data_notKR, how='left', on=['Harbor', 'Date'])\ndata.drop(['isKorean_x', 'isKorean_y'], axis=1, inplace=True)\ndata.head()","ceeaba69":"from sklearn.model_selection import GridSearchCV\nfrom statsmodels.tsa.arima_model import ARIMA, ARIMAResults\n\nbest_orders = {}\nbest_scores = {}\n\norders = []\nfor i in range(0, 3):\n    for j in range(0, 3):\n        for y in range(0, 3):\n            orders.append((i, j, y))\n\nfor harbor in data['Harbor'].unique():\n    h_data = data[data['Harbor']==harbor]\n    h_data['Empty_40_total'] = (h_data['Empty_40_x'] + h_data['Empty_40_y']).astype('float64')\n    series = pd.Series(list(h_data['Empty_40_total']), index=h_data['Date'])\n    \n    x = series[:'2019-12-31']\n    y = series['2020-01-01']\n    \n    best_score = np.inf\n    best_order = (0,0,0)\n    \n    #Grid Search\n    for order in orders:\n        model = ARIMA(x, order=order)\n        try:\n            model = model.fit(trend='nc')\n        except:\n            continue    \n        f = model.forecast(steps=1)\n        f = f[0] # forecasted next month\n        err = np.abs(y-f)\n        if err<best_score:\n            best_score = err\n            best_order = order\n            \n    best_orders[harbor] = best_order\n    best_scores[harbor] = best_score","7b2c27fc":"print(best_scores.items())","6e8e013f":"err_rate = []\nerr = []\nfor scores in best_scores.items():\n    y = data[data['Harbor']==scores[0]]\n    y = y[y['Date']=='2020-01-01']\n    y = y['Empty_40_x']+y['Empty_40_y']\n    err.append(scores[1].item())\n    error_rate = scores[1]\/y * 100\n    err_rate.append(error_rate.item())\n    print(scores[0], error_rate.item())","acbf777d":"print('Avg. Error Rate:', np.mean(err_rate))\nprint('Avg. Error:', np.mean(err))","c8acc383":"# Forecasing Empty_40 ft inventory of next month\n- Train data: Jan 2018 ~ Dec 2019 Empty 40 data of each harbor\n- Test data: Jan 2020 Empty 40 data of each harbor","37ce8e47":"## Error rate by harbor","24c1b8ba":"# Time Series Forecast using ARIMA model\n- Let's predict stock of 10ft empty container of Busan Harbor.\n- Trained on 2018~2019 data and tested on 2020 Jan ~ 2020 May data.","8f27e912":"## Average ERROR","2aa89576":"# Evaluation","7cc8fe43":"# Data Integration"}}