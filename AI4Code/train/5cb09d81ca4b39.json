{"cell_type":{"90ef20b3":"code","6471ca73":"code","bc0932ec":"code","4f11a897":"code","e2b5bd56":"code","34d49214":"code","266e00aa":"code","8e32df2f":"code","3f0fe6e3":"code","e42ce572":"code","ec1ec3a4":"code","badc2d34":"code","95185e96":"code","bba6681e":"code","5f932656":"code","3e66b7fb":"code","96367425":"code","7a65ee40":"code","5be8786e":"code","84eb9982":"code","28cf2e4a":"code","390651c8":"code","fc98e3b7":"code","d9140be5":"code","a3328e89":"code","93b720ad":"code","7e92df6a":"code","e7728cbf":"code","9594b368":"code","bb1d1fc9":"code","a1d703d9":"code","33597af9":"code","d2cd3388":"code","b46ee0f1":"code","4058d171":"code","e3f983f4":"code","b3f5ce87":"code","19835ee3":"code","0600a87a":"code","1b80e5a2":"code","aa4eacb1":"code","e2b6658a":"code","03dc5043":"code","947551b4":"code","a2785bd3":"code","e09381bc":"code","d8fc4019":"code","920f5819":"code","d7deb195":"markdown","f7841364":"markdown","40880e97":"markdown","a7ac0b62":"markdown","11e4db21":"markdown","8be44985":"markdown","aa2689c0":"markdown"},"source":{"90ef20b3":"import tqdm\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nfrom sklearn.impute import SimpleImputer","6471ca73":"train = pd.read_csv(\"..\/input\/training_set_metadata.csv\")\ntest = pd.read_csv(\"..\/input\/test_set_metadata.csv\")\nsub_sample = pd.read_csv(\"..\/input\/sample_submission.csv\")","bc0932ec":"print(train.shape)\ntrain.head()","4f11a897":"print(test.shape)\ntest.head()","e2b5bd56":"sub_sample.head()","34d49214":"# but class 99 missing here\nsorted(train.target.unique())","266e00aa":"# checking null\/missing values in train dataset\ntrain.isnull().sum()","8e32df2f":"# impute missing values by replacing them with mean values of that feature\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntrain[\"distmod\"] = imp.fit_transform(np.array(train[\"distmod\"]).reshape(-1,1))","3f0fe6e3":"train.isnull().sum().any()","e42ce572":"# checking null values in test dataset\ntest.isnull().sum()","ec1ec3a4":"# different approach to deal with null values\ntest.distmod.fillna(test[\"distmod\"].mean(), inplace=True)\ntest.hostgal_specz.fillna(test.hostgal_specz.mean(), inplace=True)","badc2d34":"test.isnull().sum().any()","95185e96":"# checking correlation between features\nplt.figure(figsize=(12,9))\nsns.heatmap(train.corr(), annot=True, fmt=\".1f\", cmap=\"RdYlBu\")","bba6681e":"# lets look at the target distribution visually\nplt.figure(figsize=(15,6))\ntrain.target.value_counts().sort_index().plot.bar()","5f932656":"colors = np.random.rand(train.shape[0])\narea = (25 * np.random.rand(train.shape[0]))**2\n        \nplt.subplots(figsize=(15,6))\nplt.scatter(train.distmod, train.hostgal_specz, s = area, c = colors, alpha = 0.5)\nplt.xlabel(\"distmod\")\nplt.ylabel(\"host galaxy spectroscopic redshift\")\nplt.show()","3e66b7fb":"colors = np.random.rand(train.shape[0])\narea = (25 * np.random.rand(train.shape[0]))**2\n        \nplt.subplots(figsize=(15,6))\nplt.scatter(train.distmod, train.hostgal_photoz, s = area, c = colors, alpha = 0.5)\nplt.xlabel(\"distmod\")\nplt.ylabel(\"host galaxy photometric redshift\")\nplt.show()","96367425":"colors = np.random.rand(train.shape[0])\narea = (25 * np.random.rand(train.shape[0]))**2\n        \nplt.subplots(figsize=(15,6))\nplt.scatter(train.distmod, train.hostgal_photoz_err, s = area, c = colors, alpha = 0.5)\nplt.xlabel(\"distmod\")\nplt.ylabel(\"host galaxy photometric redshift error\")\nplt.show()","7a65ee40":"fig, ax = plt.subplots(figsize=(18,8))\n\nfor target_class in train.target.unique():\n    used_class = train[train.target == target_class]\n    \n    colors = np.random.rand(len(used_class))\n    area = (25 * np.random.rand(len(used_class)))**2\n    \n    ax.scatter(x = used_class.gal_l, y = used_class.gal_b, alpha = 0.5, s = area, c = colors)\n\nplt.xlabel(\"galactical longitude\")\nplt.ylabel(\"galactical latitude\")","5be8786e":"# adding 99 target class manually\ntargets = np.hstack([np.unique(train['target']), [99]])","84eb9982":"targets","28cf2e4a":"target_map = {j : i for i, j in enumerate(targets)}","390651c8":"target_map","fc98e3b7":"target_ids = [target_map[i] for i in train['target']]\ntrain[\"target_id\"] = target_ids # adding a new feature to the train dataset","d9140be5":"train.head()","a3328e89":"# Build the flat probability arrays for both the galactic and extragalactic groups\ngalactic_cut = train['hostgal_specz'] == 0","93b720ad":"print(galactic_cut[:5])","7e92df6a":"galactic_data = train[galactic_cut]","e7728cbf":"galactic_data.head()","9594b368":"extragalactic_data = train[~galactic_cut]\ngalactic_classes = np.unique(galactic_data['target_id'])","bb1d1fc9":"extragalactic_data.head()","a1d703d9":"galactic_classes","33597af9":"extragalactic_classes = np.unique(extragalactic_data['target_id'])","d2cd3388":"extragalactic_classes","b46ee0f1":"# Add class 99 (id=14) to both groups.\ngalactic_classes = np.append(galactic_classes, 14)\nextragalactic_classes = np.append(extragalactic_classes, 14)","4058d171":"galactic_probabilities = np.zeros(15)","e3f983f4":"galactic_probabilities","b3f5ce87":"galactic_probabilities[galactic_classes] = 1. \/ len(galactic_classes)","19835ee3":"galactic_probabilities[galactic_classes]","0600a87a":"extragalactic_probabilities = np.zeros(15)\nextragalactic_probabilities[extragalactic_classes] = 1. \/ len(extragalactic_classes)","1b80e5a2":"extragalactic_probabilities[extragalactic_classes]","aa4eacb1":"# Apply this prediction to a table\ndef do_prediction(table):\n    probs = []\n    for index, row in tqdm.tqdm(table.iterrows(), total=len(table)):\n        if row['hostgal_photoz'] == 0:\n            prob = galactic_probabilities\n        else:\n            prob = extragalactic_probabilities\n        probs.append(prob)\n    return np.array(probs)","e2b6658a":"pred = do_prediction(train)","03dc5043":"pred","947551b4":"test_pred = do_prediction(test)","a2785bd3":"col_names = ['class_%d' % i for i in targets]\nsubmission_df = pd.DataFrame(data = test_pred, columns = col_names)","e09381bc":"submission_df.insert(0, \"object_id\", test[\"object_id\"].values)","d8fc4019":"submission_df.head()","920f5819":"submission_df.to_csv(\"submission.csv\", index=False)","d7deb195":"__`distmod` feature contains `NaN` values__.","f7841364":"__Below code taken from this [kernel](https:\/\/www.kaggle.com\/kyleboone\/naive-benchmark-galactic-vs-extragalactic)__.","40880e97":"__`hostgal_specz` and `distmod`  feature contains `NaN` values__.","a7ac0b62":"__It seems, submission format requires One Hot Encoded `target` class with `object_id`__.","11e4db21":"### Loading datasets","8be44985":"### Data Visualization","aa2689c0":"__No highly correlated feature present in the train dataset__."}}