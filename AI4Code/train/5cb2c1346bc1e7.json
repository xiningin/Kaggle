{"cell_type":{"d7117028":"code","fd9f8a0e":"code","58be33c7":"code","328a90f0":"code","b17877fa":"code","5f0793e6":"code","32edb162":"code","e9fd5052":"code","d4f90549":"code","bf050939":"code","b8ceeac6":"code","4b4d633e":"code","82435782":"code","910adaf7":"code","8e8b9530":"code","a402bf32":"code","fdad58e5":"code","dde894d5":"code","5d114330":"code","732736e8":"code","195204a8":"code","c45ebd76":"code","99214a13":"code","73da3ef7":"code","bd000eb7":"code","4ccc9507":"code","01827b12":"code","b7830f84":"code","28b93b84":"code","bc89eebd":"code","99c9469a":"code","99f32c4a":"code","479c71d5":"code","880fa8e1":"code","c52537ae":"code","6dcf30b1":"code","345ac74c":"code","3540ece5":"code","c69e1149":"code","74548828":"code","a1f07f31":"code","428741c8":"code","9de34b85":"code","401ce504":"code","6e153f8c":"code","9f61487e":"code","7435e694":"code","4c439727":"code","5d8455f2":"code","bdbb12d6":"markdown","216f57fa":"markdown","1de1f573":"markdown","a6b593d9":"markdown","4bbb4de2":"markdown","e25b2d1a":"markdown","56ed0c26":"markdown","65069874":"markdown","63cff346":"markdown","7ff0b185":"markdown","fc68cb2b":"markdown","25d4132e":"markdown","ed93a71c":"markdown","de6b46a6":"markdown","15d54035":"markdown","b876bcf5":"markdown","ab13b51d":"markdown","7d156329":"markdown","59fdc3cc":"markdown","d36756a2":"markdown"},"source":{"d7117028":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd9f8a0e":"from sklearn import linear_model,metrics,preprocessing\nfrom sklearn import ensemble,tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.neighbors import RadiusNeighborsClassifier","58be33c7":"df1= pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","328a90f0":"df1.head()","b17877fa":"#we map the quality values from 0 to 5\nqual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n}\ndf1.loc[:,\"quality\"]=df1.quality.map(qual_map)","5f0793e6":"#For our convenience we have mapped the quality indexes from 3-8 to 0-5, and shall treat this as a multi-class \n#classification problem.\ndf1\n","32edb162":"#Naively splitting data without visualization \n#using dataframe.sample for random sampling of the data.We will reset the indices,as they change after \n#shuffling the data.\n\ndf1= df1.sample(frac=1).reset_index(drop=True)\n\n#top 1000 out of 1600 rows are our training data.\ndf1_train=df1.head(1000)\n\n#bottom 600 out of 1600 rows are our testing data.\ndf1_test=df1.tail(600)\n\n\n","e9fd5052":"df1_train","d4f90549":"df1_test","bf050939":"#Now as this problem can be treated as a classification task, we train this using Decision Tree model\nimport sklearn\nfrom sklearn import tree\nfrom sklearn import metrics\n\nclassifier= tree.DecisionTreeClassifier(max_depth=3)\n\ncols=['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\nclassifier.fit(df1_train[cols],df1_train.quality)","b8ceeac6":"train_predictions= classifier.predict(df1_train[cols])\n\ntest_predictions= classifier.predict(df1_test[cols])","4b4d633e":"train_accuracy= metrics.accuracy_score(df1_train.quality,train_predictions)\n\ntest_accuracy= metrics.accuracy_score(df1_test.quality,test_predictions)\n","82435782":"train_accuracy","910adaf7":"test_accuracy","8e8b9530":"#Importing libraries for visualization.\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a402bf32":"#Global size of texts on the plots.\nmatplotlib.rc('xtick', labelsize=15)\nmatplotlib.rc('ytick', labelsize=15)\n","fdad58e5":"#To ensure that plot is displayed inside the notebook itself\n%matplotlib inline","dde894d5":"#initializing the list to store the training & testing accuracies, beginning from\n#50%\n\ntrain_accuracies=[0.5]\ntest_accuracies=[0.5]\n","5d114330":"#looping over some values of max_depths\n\nfor d in range(1,25):\n    classifier1= tree.DecisionTreeClassifier(max_depth=d)\n    classifier1.fit(df1_train[cols],df1_train.quality)\n    \n    train_predictions=classifier1.predict(df1_train[cols])\n    test_predictions=classifier1.predict(df1_test[cols])\n    \n    train_acc= metrics.accuracy_score(df1_train.quality,train_predictions)\n    test_acc = metrics.accuracy_score(df1_test.quality,test_predictions)\n    \n    train_accuracies.append(train_acc)\n    test_accuracies.append(test_acc)\n    \n    \n","732736e8":"#creating plots using matplotlib and seaborn\nplt.figure(figsize=(12,5))\nsns.set_style(\"whitegrid\")\nplt.plot(train_accuracies,label=\"Training Accuracy\")\nplt.plot(test_accuracies,label=\"Testing Accuracy\")\n\nplt.legend(loc=\"upper left\", prop={'size':15})\nplt.xticks(range(0,26,5))\nplt.xlabel(\"max_depth\",size=20)\nplt.ylabel(\"accuracy\",size=20)\nplt.show()","195204a8":"print(\"The train accuracies are given as :\")\nprint(train_accuracies)","c45ebd76":"print(\"The corresponding testing accuracies are given as :\")\nprint(test_accuracies)\n","99214a13":"plt.figure(figsize=(15,10))\nsns.heatmap(df1.corr(),annot=True)\nplt.show()","73da3ef7":"#Plot a boxplot to check for Outliers\n#Target variable is Quality. So will plot a boxplot each column against target variable\nsns.boxplot('quality', 'fixed acidity', data = df1)","bd000eb7":"sns.boxplot('quality', 'volatile acidity', data = df1)","4ccc9507":"sns.boxplot('quality', 'citric acid', data = df1)","01827b12":"sns.boxplot('quality', 'chlorides', data = df1)","b7830f84":"sns.boxplot('quality', 'free sulfur dioxide', data = df1)","28b93b84":"sns.boxplot('quality', 'total sulfur dioxide', data = df1)","bc89eebd":"sns.boxplot('quality', 'density', data = df1)","99c9469a":"sns.boxplot('quality', 'pH', data = df1)","99f32c4a":"sns.boxplot('quality', 'sulphates', data = df1)","479c71d5":"sns.boxplot('quality', 'alcohol', data = df1)","880fa8e1":"#To ostify our arguement lets look at the distribution of quality labels in the given data.\nq= sns.countplot(x='quality',data=df1)\nq.set_xlabel(\"quality\", fontsize=20)\nq.set_ylabel(\"count\", fontsize=20)\n\n","c52537ae":"df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')","6dcf30b1":"def help_Decision_tree(fold):\n    df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')\n    qual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n    }\n    df2.loc[:,\"quality\"]=df2.quality.map(qual_map)\n    features=[\n        f for f in df2.columns if f not in(\"quality\",\"kfold\")\n        ]\n    for col in features:\n        df2.loc[:,col]=df2[col].astype(str).fillna(\"NONE\")\n    \n    df2_train=df2[df2.kfold!=fold].reset_index(drop=True)\n    df2_valid=df2[df2.kfold==fold].reset_index(drop=True)\n    \n    \n    x_train= df2_train.drop(\"quality\",axis=1).values\n    y_train= df2_train.quality.values\n    \n    x_valid= df2_valid.drop(\"quality\",axis=1).values\n    y_valid= df2_valid.quality.values\n    \n    model= tree.DecisionTreeClassifier()\n    model.fit(x_train,y_train)\n    \n    valid_preds=model.predict(x_valid)\n    accur= metrics.accuracy_score(y_valid,valid_preds)\n    print(f\"Fold = {fold}, Accuracy = {accur}\")\n    ","345ac74c":"for i in range(0,5):\n    print(help_Decision_tree(i))\n    print()","3540ece5":"def help_Random_Forest(fold):\n    df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')\n    qual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n    }\n    df2.loc[:,\"quality\"]=df2.quality.map(qual_map)\n    features=[\n        f for f in df2.columns if f not in(\"quality\",\"kfold\")\n        ]\n    for col in features:\n        df2.loc[:,col]=df2[col].astype(str).fillna(\"NONE\")\n    \n    df2_train=df2[df2.kfold!=fold].reset_index(drop=True)\n    df2_valid=df2[df2.kfold==fold].reset_index(drop=True)\n    \n    \n    x_train= df2_train.drop(\"quality\",axis=1).values\n    y_train= df2_train.quality.values\n    \n    x_valid= df2_valid.drop(\"quality\",axis=1).values\n    y_valid= df2_valid.quality.values\n    \n    model2= RandomForestClassifier()\n    model2.fit(x_train,y_train)\n    \n    valid_preds=model2.predict(x_valid)\n    accur= metrics.accuracy_score(y_valid,valid_preds)\n    print(f\"Fold = {fold}, Accuracy = {accur}\")\n    ","c69e1149":"for i in range(0,5):\n    print(help_Random_Forest(i))\n    print()","74548828":"def help_svc(fold):\n    df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')\n    qual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n    }\n    df2.loc[:,\"quality\"]=df2.quality.map(qual_map)\n    features=[\n        f for f in df2.columns if f not in(\"quality\",\"kfold\")\n        ]\n    for col in features:\n        df2.loc[:,col]=df2[col].astype(str).fillna(\"NONE\")\n    \n    df2_train=df2[df2.kfold!=fold].reset_index(drop=True)\n    df2_valid=df2[df2.kfold==fold].reset_index(drop=True)\n    \n    \n    x_train= df2_train.drop(\"quality\",axis=1).values\n    y_train= df2_train.quality.values\n    \n    x_valid= df2_valid.drop(\"quality\",axis=1).values\n    y_valid= df2_valid.quality.values\n    \n    model3= SVC()\n    model3.fit(x_train,y_train)\n    \n    valid_preds=model3.predict(x_valid)\n    accur= metrics.accuracy_score(y_valid,valid_preds)\n    print(f\"Fold = {fold}, Accuracy = {accur}\")\n    ","a1f07f31":"for i in range(0,5):\n    print(help_svc(i))\n    print()","428741c8":"def help_mlp(fold):\n    df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')\n    qual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n    }\n    df2.loc[:,\"quality\"]=df2.quality.map(qual_map)\n    features=[\n        f for f in df2.columns if f not in(\"quality\",\"kfold\")\n        ]\n    for col in features:\n        df2.loc[:,col]=df2[col].astype(str).fillna(\"NONE\")\n    \n    df2_train=df2[df2.kfold!=fold].reset_index(drop=True)\n    df2_valid=df2[df2.kfold==fold].reset_index(drop=True)\n    \n    \n    x_train= df2_train.drop(\"quality\",axis=1).values\n    y_train= df2_train.quality.values\n    \n    x_valid= df2_valid.drop(\"quality\",axis=1).values\n    y_valid= df2_valid.quality.values\n    \n    model4= MLPClassifier()\n    model4.fit(x_train,y_train)\n    \n    valid_preds=model4.predict(x_valid)\n    accur= metrics.accuracy_score(y_valid,valid_preds)\n    print(f\"Fold = {fold}, Accuracy = {accur}\")\n    ","9de34b85":"for i in range(0,5):\n    print(help_mlp(i))\n    print()","401ce504":"def help_gbc(fold):\n    df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')\n    qual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n    }\n    df2.loc[:,\"quality\"]=df2.quality.map(qual_map)\n    features=[\n        f for f in df2.columns if f not in(\"quality\",\"kfold\")\n        ]\n    for col in features:\n        df2.loc[:,col]=df2[col].astype(str).fillna(\"NONE\")\n    \n    df2_train=df2[df2.kfold!=fold].reset_index(drop=True)\n    df2_valid=df2[df2.kfold==fold].reset_index(drop=True)\n    \n    \n    x_train= df2_train.drop(\"quality\",axis=1).values\n    y_train= df2_train.quality.values\n    \n    x_valid= df2_valid.drop(\"quality\",axis=1).values\n    y_valid= df2_valid.quality.values\n    \n    model5= GradientBoostingClassifier()\n    model5.fit(x_train,y_train)\n    \n    valid_preds=model5.predict(x_valid)\n    accur= metrics.accuracy_score(y_valid,valid_preds)\n    print(f\"Fold = {fold}, Accuracy = {accur}\")\n    ","6e153f8c":"for i in range(0,5):\n    print(help_gbc(i))\n    print()","9f61487e":"def help_Knn(fold):\n    df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')\n    qual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n    }\n    df2.loc[:,\"quality\"]=df2.quality.map(qual_map)\n    features=[\n        f for f in df2.columns if f not in(\"quality\",\"kfold\")\n        ]\n    for col in features:\n        df2.loc[:,col]=df2[col].astype(str).fillna(\"NONE\")\n    \n    df2_train=df2[df2.kfold!=fold].reset_index(drop=True)\n    df2_valid=df2[df2.kfold==fold].reset_index(drop=True)\n    \n    \n    x_train= df2_train.drop(\"quality\",axis=1).values\n    y_train= df2_train.quality.values\n    \n    x_valid= df2_valid.drop(\"quality\",axis=1).values\n    y_valid= df2_valid.quality.values\n    \n    model6= KNeighborsClassifier()\n    model6.fit(x_train,y_train)\n    \n    valid_preds=model6.predict(x_valid)\n    accur= metrics.accuracy_score(y_valid,valid_preds)\n    print(f\"Fold = {fold}, Accuracy = {accur}\")\n    ","7435e694":"for i in range(0,5):\n    print(help_Knn(i))\n    print()","4c439727":"def help_ExtraTreeClassifier(fold):\n    df2= pd.read_csv('\/kaggle\/input\/folds-winequality\/Train_folds_winequality-red.csv')\n    qual_map={\n    3:0,\n    4:1,\n    5:2,\n    6:3,\n    7:4,\n    8:5\n    }\n    df2.loc[:,\"quality\"]=df2.quality.map(qual_map)\n    features=[\n        f for f in df2.columns if f not in(\"quality\",\"kfold\")\n        ]\n    for col in features:\n        df2.loc[:,col]=df2[col].astype(str).fillna(\"NONE\")\n    \n    df2_train=df2[df2.kfold!=fold].reset_index(drop=True)\n    df2_valid=df2[df2.kfold==fold].reset_index(drop=True)\n    \n    \n    x_train= df2_train.drop(\"quality\",axis=1).values\n    y_train= df2_train.quality.values\n    \n    x_valid= df2_valid.drop(\"quality\",axis=1).values\n    y_valid= df2_valid.quality.values\n    \n    model7= ExtraTreeClassifier()\n    model7.fit(x_train,y_train)\n    \n    valid_preds=model7.predict(x_valid)\n    accur= metrics.accuracy_score(y_valid,valid_preds)\n    print(f\"Fold = {fold}, Accuracy = {accur}\")\n    ","5d8455f2":"for i in range(0,5):\n    print(help_ExtraTreeClassifier(i))\n    print()","bdbb12d6":"Predicting the Decision tree model created above on the data.","216f57fa":"Therefore, random forest algorithm performed the best in this multiclass classification task, where I have considered the originally provided data by using a more elaborative approach of using Stratified KFold Cross Validation.Thereby accounting well with the issue of Overfitting. \n","1de1f573":"Clearly an average of around 60% veracity.","a6b593d9":"Box plot based stastical inferences.","4bbb4de2":"We can see here the distribution of data is very unbalanced,and thus the results.\n\nWe now move towards the approach of Cross-Validating the entire data set.\nThe script for which can be found below.","e25b2d1a":"Clearly an average of around 50% veracity.","56ed0c26":"Kindly hit the upvote button :) \n    AND support my work !","65069874":"Random forest outperforms every other algorithm as we see, clearly dealing well with the unbalanced data and the overfitting issue.Clearly an average of around 70% veracity.","63cff346":"Clearly an average of around 56% veracity.","7ff0b185":"Clearly the problem can be classified both as a regression or a classification based tasks.For simplicity I have tried to gain insights by using some of the typical classification based techniques.\nFollowing classification procedures are being employed here using the Stratified KFold Cross Validation:\n1. Decision Tree classification\n2. Random Forest\n3. SVC Classifier\n4. Multi Layer Perceptron based Neural network\n5. Gradient Boosting Classifier\n6. K Nearest Neighbour classifier\n7. Extra Trees based classification\n\n\n","fc68cb2b":"Hello reader,\n\nThis exercise is good for beginners who are learning about Overfitting and its consequences to the overall predictions. Efforts are being made to analyze importance of Cross-Validation on a dataset and its effect upon removing the Overfitting in a data.Also the importance of Data visualization has been discussed here.It is often a misconception, where we avoid to look at the distribution of a data, leading to failure of models at production.\nTo forefit such issues, a naive approach of splitting the model for training-testing followed by an in-depth discussion of the distribution of the data has been done here.\n\nPlease don't forget to upvote this Notebook :D","25d4132e":"Clearly an average of around 65% veracity.","ed93a71c":"\nimport pandas as pd\nfrom sklearn import model_selection\n\nif __name__==\"__main__\":\n    df= pd.read_csv(\"winequality-red.csv\")\n    \n    df[\"kfold\"]=-1\n    df=df.sample(frac=1).reset_index(drop=True)\n    \n    y=df.quality.values\n    \n    kf=model_selection.StratifiedKFold(n_splits=5)\n    \n    for f,(t_,v_) in enumerate(kf.split(X=df,y=y)):\n        df.loc[v_,'kfold']=f\n    \n    df.to_csv(\"Train_folds_winequality-red.csv\", index=False)\n    ","de6b46a6":"Determining correlation between various input features.","15d54035":"Note below , that the train_accuracy and test_accuracy for a negligble hyperparameter tuning, i.e. using \nmax_depth=3 for the decision tree, gives these results. \n\nWe now try to see the variations in training and testing accuracies when the max_depth for the Decision tree is \ntuned.","b876bcf5":"So clearly the graph above indicates a clear case of overfitting.Here the model fits perfectly on the training data and performs poorly when it comes to the test data set.\nOverfitting is observed as a case where test loss increases as we keep increasing training loss.\nAs the maximum depth tends to increase the model performs badly, and training loss increases.","ab13b51d":"Clearly this data represents 11 parameters on which the quality of a Red Wine depends.\nWe have a task here to predict the quality of a certain type of wine from 3 to 8.\nThe better the quality, the more likeability for its consumption :)","7d156329":"Clearly an average of around 50% veracity.","59fdc3cc":"Clearly an average of around 55% veracity.","d36756a2":"Here I have created and uploaded a new Stratified-KFolded data set, with 5 splits.\nIn this approach,the performance is measured using this data now where out of 5 folds , 4 are always used as\ntraining set and 1 being used as testing set for each iteration upon a particualr fold."}}