{"cell_type":{"bf82ac99":"code","ec273cb5":"code","d8586c92":"code","09d63512":"code","5960f8c0":"code","84b355dd":"code","34bc06cc":"code","37d86c64":"code","742af9c5":"code","baec0361":"code","0d5ec742":"code","b1c5ff0b":"code","8d880e99":"code","11ce03c3":"code","d4086f07":"code","79edc124":"code","f273dc7b":"code","4056bdfb":"code","5fd7d619":"code","7d6159f8":"code","78b578b0":"code","527ba141":"code","8c2f7cce":"code","128efbb3":"code","d8e2c818":"code","abaca5f0":"code","2815cc1d":"code","9691ab84":"code","0dbc7fe9":"code","ee2a820f":"code","4374482b":"code","1733db95":"code","a50e8a45":"code","71a1b070":"code","bcaccadb":"code","72339366":"code","6e011567":"code","c54c8e47":"code","4ab905df":"markdown","85615d9f":"markdown","8b5ab618":"markdown","36cc6446":"markdown","dd910c4b":"markdown","f9a44a52":"markdown","2f4bc8e8":"markdown"},"source":{"bf82ac99":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n% matplotlib inline\nimport seaborn as sns\nsns.set(style=\"whitegrid\", color_codes=True)\nsns.set(font_scale=1)\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import Imputer","ec273cb5":"data1 = pd.read_csv(\"..\/input\/train.csv\")\ndata2 = pd.read_csv(\"..\/input\/test.csv\")","d8586c92":"data1.head()\n# Top 5 rows","09d63512":"data1.shape\n# (rows,columns)","5960f8c0":"data1.info()\n# getting through data ","84b355dd":"data1.describe()\n# statistical analysis (Numerical columns)","34bc06cc":"corr=data1.corr()[\"SalePrice\"]\ncorr[np.argsort(corr,axis=0)[::-1]]","37d86c64":"# For lots of columns dataset, and when finding correlations\/anything visually\n\nnum_feat=data1.columns[data1.dtypes!=object]\nnum_feat=num_feat[1:-1] \n# first and last column excluded\nlabels = []\nvalues = []\nfor col in num_feat:\n    labels.append(col)\n    values.append(np.corrcoef(data1[col].values, data1.SalePrice.values)[0,1])\n    # np.corrcoef(dataframe[column].values,dataframe.Column.values)[range])\n    \nind = np.arange(len(labels))\n# Array from 0 to length of list \nwidth = 0.45\nfig, ax = plt.subplots(figsize=(12,40))\n# Plot size\nax.barh(ind, np.array(values), color='green')\n# Horizontal bar(no.of bars,length of each,color)\nax.set_yticks(ind+((width)))\n# green bars from title \nax.set_yticklabels(labels, rotation='horizontal')\nax.set_xlabel(\"Correlation coefficient\")\nax.set_title(\"Correlation Coefficients w.r.t Sale Price\");","742af9c5":"# above 0.5 +ve correlation\ncorr=data1[[\"SalePrice\",\"OverallQual\",\"GrLivArea\",\"GarageCars\",\n                  \"GarageArea\",\"GarageYrBlt\",\"TotalBsmtSF\",\"1stFlrSF\",\"FullBath\",\n                  \"TotRmsAbvGrd\",\"YearBuilt\",\"YearRemodAdd\"]].corr()\n\nsns.set(font_scale=1.10)\nplt.figure(figsize=(10, 10))\n\nsns.heatmap(corr, vmax=.8, linewidths=0.01,\n            square=True,annot=True,cmap='magma',linecolor=\"black\")\n# (columns,max range,width of lines,square shape,color mapping,color of line)\nplt.title('Correlation between features');","baec0361":"# Categorical Variable compared with Target Variable \n\n#data1[['OverallQual','SalePrice']]\ndata1[['OverallQual','SalePrice']].groupby(['OverallQual'],\nas_index=False).mean().sort_values(by='OverallQual', ascending=False)","0d5ec742":"data1[['GarageCars','SalePrice']].groupby(['GarageCars'],\nas_index=False).mean().sort_values(by='GarageCars', ascending=False)","b1c5ff0b":"data1[['Fireplaces','SalePrice']].groupby(['Fireplaces'],\nas_index=False).mean().sort_values(by='Fireplaces', ascending=False)","8d880e99":"# Checking which numbers are frequently occuring in a column\n\nsns.distplot(data1['SalePrice'], color=\"r\", kde=False)\n# sns.distplot(column, color, curve)\nplt.title(\"Distribution of Sale Price\")\nplt.ylabel(\"Number of Occurences\")\nplt.xlabel(\"Sale Price\");","11ce03c3":"data1['SalePrice'].skew()","d4086f07":"data1['SalePrice'].kurt()","79edc124":"#upperlimit = np.percentile(houses.SalePrice.values, 99.5)\n#houses['SalePrice'].ix[houses['SalePrice']>upperlimit] = upperlimit\n#upperlimit\nplt.scatter(range(data1.shape[0]), data1[\"SalePrice\"].values,color='orange')\nplt.title(\"Distribution of Sale Price\")\nplt.xlabel(\"Number of Occurences\")\nplt.ylabel(\"Sale Price\");","f273dc7b":"# One Way of dealing with outliers\n\nupperlimit = np.percentile(data1.SalePrice.values, 99.5)\ndata1['SalePrice'].loc[data1['SalePrice']>upperlimit] = upperlimit\n#upperlimit\nplt.scatter(range(data1.shape[0]), data1[\"SalePrice\"].values,color='orange')\nplt.title(\"Distribution of Sale Price\")\nplt.xlabel(\"Number of Occurences\")\nplt.ylabel(\"Sale Price\");","4056bdfb":"null_columns=data1.columns[data1.isnull().any()]\nlabels = []\nvalues = []\nfor col in null_columns:\n    labels.append(col)\n    values.append(data1[col].isnull().sum())\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(12,50))\nax.barh(ind, np.array(values), color='r')\nax.set_yticks(ind+((width)\/2.))\nax.set_yticklabels(labels, rotation='horizontal')\nax.set_xlabel(\"Count of missing values\")\nax.set_ylabel(\"Column Names\")\nax.set_title(\"Variables with missing values\");","5fd7d619":"# Counting missing values column-wise\n\nmissing_column = (data1.isnull().sum())\nprint(missing_column[missing_column > 0])\n\n#null_columns=houses.columns[houses.isnull().any()]\n#houses[null_columns].isnull().sum()","7d6159f8":"# We have to fill na values, thus we can fill it with column values that is highly correlated with this column.\ndata1['LotFrontage'].corr(data1['LotArea'])","78b578b0":"# Take the square root and this increase the correlation\ndata1['SqrtLotArea']=np.sqrt(data1['LotArea'])\ndata1['LotFrontage'].corr(data1['SqrtLotArea'])","527ba141":"# Draw a plot of two variables with bivariate and univariate graphs\nsns.jointplot(data1['LotFrontage'],\n              data1['SqrtLotArea'],\n              color='red');","8c2f7cce":"filter = data1['LotFrontage'].isnull()\ndata1.LotFrontage[filter]=data1.SqrtLotArea[filter]","128efbb3":"missing_column = (data1.isnull().sum())\nprint(missing_column[missing_column > 0])","d8e2c818":"plt.scatter(data1[\"MasVnrArea\"],data1[\"SalePrice\"])\nplt.title(\"MasVnrArea Vs SalePrice \")\nplt.ylabel(\"SalePrice\")\nplt.xlabel(\"Mas Vnr Area in sq feet\");","abaca5f0":"# For categorical variable missing values\nsns.boxplot(\"MasVnrType\",\"SalePrice\",data=data1)","2815cc1d":"data1[\"MasVnrType\"] = data1[\"MasVnrType\"].fillna('None')\ndata1[\"MasVnrArea\"] = data1[\"MasVnrArea\"].fillna(0.0)","9691ab84":"missing_column = (data1.isnull().sum())\nprint(missing_column[missing_column > 0])","0dbc7fe9":"sns.boxplot(\"Electrical\",\"SalePrice\",data=data1)\nplt.title(\"Electrical Vs SalePrice \")\nplt.ylabel(\"SalePrice\")\nplt.xlabel(\"Electrical\")","ee2a820f":"data1[\"Electrical\"] = data1[\"Electrical\"].fillna('SBrkr')","4374482b":"missing_column = (data1.isnull().sum())\nprint(missing_column[missing_column > 0])","1733db95":"#sns.boxplot(\"Alley\",\"SalePrice\",data=data1)\nsns.stripplot(x=data1[\"Alley\"], y=data1[\"SalePrice\"],jitter=True);","a50e8a45":"data1[\"Alley\"] = data1[\"Alley\"].fillna('None')","71a1b070":"missing_column = (data1.isnull().sum())\nprint(missing_column[missing_column > 0])","bcaccadb":"X_train = data1.drop('SalePrice',axis=1)\nX_train = X_train.select_dtypes(exclude=['object'])\ny_train = data1.SalePrice\nX_train = X_train.drop('SqrtLotArea',axis=1)","72339366":"X_test = data2.select_dtypes(exclude=['object'])","6e011567":"\nimputed_X_train = X_train.copy()\nimputed_X_test = X_test.copy()\n# Copying the orginal data,original data should not change(avoid it)\ncol_missing_val = (col for col in X_train.columns if X_train[col].isnull().any())\n# Any column having missing values, it will be put into above variable\nfor col in col_missing_val:\n    imputed_X_train[col +'_was_missing'] = imputed_X_train[col].isnull()\n    imputed_X_test[col +'_was_missing'] = imputed_X_test[col].isnull()\n#Imputer\nmy_imputer = Imputer()\nimputed_X_train = my_imputer.fit_transform(imputed_X_train)\nimputed_X_test = my_imputer.transform(imputed_X_test)\n\n# Predicting prices\nmodel = RandomForestRegressor()\nmodel.fit(imputed_X_train,y_train)\npreds = model.predict(imputed_X_test)\nprint(preds)","c54c8e47":"submission = pd.DataFrame({'Id': data2.Id, 'SalePrice': preds})\n# you could use any filename. We choose submission here\nsubmission.to_csv('FirstCompetition.csv', index=False)","4ab905df":"Correlations are the best way to know the important columns.","85615d9f":"Positive Skewness means when the tail on the right side of the distribution is longer or fatter. The mean and median will be greater than the mode","8b5ab618":"Now checking what can be filled in place of missing values of \"MasVnrArea\" and \"MasVnrTyp\"","36cc6446":"Making correlation heatmap will not be a good idea !!! <br>\nfig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(data1.corr(),annot=True)","dd910c4b":"<font size=\"3\">**Univariate Analysis**<\/font>","f9a44a52":"Positive kurtosis. A distribution with a positive kurtosis value indicates that the distribution has heavier tails than the normal distribution. For example, data that follow a t distribution have a positive kurtosis value","2f4bc8e8":"** data1.get_dtype_counts() --> Data types counts **"}}