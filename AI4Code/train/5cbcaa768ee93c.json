{"cell_type":{"316ac139":"code","9ff21c0b":"code","1f7c77eb":"code","0a1ad03d":"code","dcd72c43":"code","c0bdb1d8":"code","b9fb9281":"code","0c089748":"code","2db6bf9f":"code","1d116b0d":"code","2b487016":"code","7fabf333":"code","0f1ead73":"code","cb702928":"code","1468b781":"code","e3028e25":"code","5f3540f8":"code","56938c99":"code","8764c7e4":"code","e1c6e986":"code","7daf7c8e":"code","6e7fca6d":"code","47e34a21":"code","a6ba61ef":"code","28db484a":"code","abf9e306":"code","ab0517da":"code","7edfe56e":"code","0ce42a6c":"code","b8d811b6":"code","6c856b67":"code","57547f13":"code","694f481f":"code","e6b54bfa":"code","116e6eeb":"code","de0b10e7":"code","4255a471":"code","264e4fa2":"code","3f5b95a4":"code","e6f3e066":"code","fc132daa":"code","9ad27c93":"code","b2483f0e":"code","bd1b2f0f":"code","86119777":"code","adc7bc4a":"code","2977b13c":"code","710015f4":"code","cd4d7788":"code","0a732c47":"code","fbedb4a1":"code","fbc832f9":"code","d1d3f349":"code","ced242f2":"code","8a4fafc1":"code","574f50ea":"code","46f0c1c8":"code","4067ca1d":"code","8a19da4e":"code","16e1f4ca":"code","d345c0d2":"code","0979f9df":"code","97a56741":"code","63309c43":"code","c03fedbb":"code","46dfacec":"code","603fcca4":"code","960f4e40":"code","09a82532":"code","da270b02":"code","442c5a15":"code","4fc925a3":"code","d1a93922":"markdown","1ac3ae2e":"markdown","5a8cb00a":"markdown","9b6fab2f":"markdown","944925f4":"markdown","3d23520f":"markdown","fbfc5a28":"markdown","3bd8c4e0":"markdown","07a0f5ae":"markdown","e7f83eba":"markdown","ca2faf75":"markdown","866be938":"markdown","caf39258":"markdown","941e8576":"markdown","cc982fde":"markdown","86e64238":"markdown","fe603870":"markdown","31206476":"markdown","175ffc59":"markdown","dceef2c4":"markdown","9a1ab730":"markdown","553dd9d4":"markdown","2bd9a542":"markdown","0fc72d32":"markdown","d93034a2":"markdown","a2aba62d":"markdown","536e4501":"markdown","2f6dbd58":"markdown","b7fb69f6":"markdown","1f6983b7":"markdown","b4a0f177":"markdown","187c0834":"markdown","ba6bfd0c":"markdown","904098a3":"markdown","285df59b":"markdown","53415b1d":"markdown","4ece45c0":"markdown","c53b0589":"markdown","e091b752":"markdown","83aa5e0b":"markdown","b662f015":"markdown","06e7c3a5":"markdown","9d41f918":"markdown","8f54bf28":"markdown","3f6ed2a4":"markdown","b09af9fe":"markdown","608196cc":"markdown","f9d7e95a":"markdown","543153cf":"markdown","f4e8434c":"markdown","df91439c":"markdown","83956da6":"markdown","6f4ee57d":"markdown","215051c1":"markdown","83914abc":"markdown","d73238f3":"markdown","5717ff3a":"markdown","18ec8893":"markdown","ced6c4dc":"markdown","17f2ce5b":"markdown","1775a1a2":"markdown","dd1d89ab":"markdown","2f9d66c4":"markdown","8cd51a20":"markdown","ba282321":"markdown","b741a5fb":"markdown","754b2d43":"markdown","85f6883b":"markdown","6cd3ef07":"markdown","96f436fb":"markdown","f392922b":"markdown","2df03359":"markdown","dc235235":"markdown","7ccd413a":"markdown","720a0418":"markdown","e7d8f907":"markdown","676e8469":"markdown","cba7b2b0":"markdown","e0130e22":"markdown","fc4390c1":"markdown","5be86fa0":"markdown","39e2dddb":"markdown","ba6ad9c9":"markdown","f4f5df93":"markdown","8dc1d65a":"markdown","118d940d":"markdown","eec3b00c":"markdown"},"source":{"316ac139":"# scientific computing libaries\nimport pandas as pd\nimport numpy as np\n\n# data mining libaries\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.decomposition import PCA#, FastICA\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, GridSearchCV, learning_curve\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve, auc, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score, roc_auc_score\n\nfrom imblearn.pipeline import make_pipeline, Pipeline\nfrom imblearn.over_sampling import SMOTE\n\n#plot libaries\nimport plotly\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True) # to show plots in notebook\n\n# online plotly\n#from plotly.plotly import plot, iplot\n#plotly.tools.set_credentials_file(username='XXXXXXXXXXXXXXX', api_key='XXXXXXXXXXXXXXX')\n\n# offline plotly\nfrom plotly.offline import plot, iplot\n\n# do not show any warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nSEED = 17 # specify seed for reproducable results\npd.set_option('display.max_columns', None) # prevents abbreviation (with '...') of columns in prints","9ff21c0b":"RANDOM_FOREST_PARAMS = {\n    'clf__max_depth': [25, 50, 75],\n    'clf__max_features': [\"sqrt\"], # just sqrt is used because values of log2 and sqrt are very similar for our number of features (10-19) \n    'clf__criterion': ['gini', 'entropy'],\n    'clf__n_estimators': [100, 300, 500, 1000]\n}\n\nDECISION_TREE_PARAMS = {\n    'clf__max_depth': [25, 50, 75],\n    'clf__max_features': [\"sqrt\"], # just sqrt is used because values of log2 and sqrt are very similar for our number of features (10-19)\n    'clf__criterion': ['gini', 'entropy'],\n    'clf__min_samples_split': [6, 10, 14],\n}\n\nLOGISTIC_REGRESSION_PARAMS = {\n    'clf__solver': ['liblinear'],\n    'clf__C': [0.1, 1, 10],\n    'clf__penalty': ['l2', 'l1']\n}\n\nKNN_PARAMS = {\n    'clf__n_neighbors': [5, 15, 25, 35, 45, 55, 65],\n    'clf__weights': ['uniform', 'distance'],\n    'clf__p': [1, 2, 10]\n}\n\nKNN_PARAMS_UNIFORM = {\n    'clf__n_neighbors': [5, 15, 25, 35, 45, 55, 65],\n    'clf__weights': ['uniform'],\n    'clf__p': [1, 2, 10]\n}\n\nSVM_PARAMS = [\n{\n    'clf__kernel': ['linear'],\n    'clf__C': [0.1, 1, 10],\n}, \n{\n    'clf__kernel': ['rbf'],\n    'clf__C': [0.01, 0.1, 1, 10, 100],\n    'clf__gamma': [0.01, 0.1, 1, 10, 100],\n}]","1f7c77eb":"# load the dataset\ndf = pd.read_csv('..\/input\/bigml_59c28831336c6604c800002a.csv')\n\nprint(\"The dataset has %d rows and %d columns.\" % df.shape)","0a1ad03d":"# check for null values in the dataset\nprint(\"There are \" + (\"some\" if df.isnull().values.any() else \"no\")  + \" null\/missing values in the dataset.\")","dcd72c43":"df.head(3)","c0bdb1d8":"def preprocess_data(df):\n    pre_df = df.copy()\n    \n    # Replace the spaces in the column names with underscores\n    pre_df.columns = [s.replace(\" \", \"_\") for s in pre_df.columns]\n    \n    # convert string columns to integers\n    pre_df[\"international_plan\"] = pre_df[\"international_plan\"].apply(lambda x: 0 if x==\"no\" else 1)\n    pre_df[\"voice_mail_plan\"] = pre_df[\"voice_mail_plan\"].apply(lambda x: 0 if x==\"no\" else 1)\n    pre_df = pre_df.drop([\"phone_number\"], axis=1)\n    le = LabelEncoder()\n    le.fit(pre_df['state'])\n    pre_df['state'] = le.transform(pre_df['state'])\n    \n    return pre_df, le","b9fb9281":"pre_df, _ = preprocess_data(df)\npre_df.head(3)","0c089748":"pre_df.describe()","2db6bf9f":"colors = plotly.colors.DEFAULT_PLOTLY_COLORS\nchurn_dict = {0: \"no churn\", 1: \"churn\"}","1d116b0d":"y = df[\"churn\"].value_counts()\n\ndata = [go.Bar(x=[churn_dict[x] for x in y.index], y=y.values, marker = dict(color = colors[:len(y.index)]))]\nlayout = go.Layout(\n    title='Churn distribution',\n    autosize=False,\n    width=400,\n    height=400,\n    yaxis=dict(\n        title='#samples',\n    ),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='basic-bar15')","2b487016":"churn_perc = df[\"churn\"].sum() * 100 \/ df[\"churn\"].shape[0]\nprint(\"Churn percentage is %.3f%%.\" % churn_perc)","7fabf333":"state_churn_df = df.groupby([\"state\", \"churn\"]).size().unstack()\ntrace1 = go.Bar(\n    x=state_churn_df.index,\n    y=state_churn_df[0],\n    marker = dict(color = colors[0]),\n    name='no churn'\n)\ntrace2 = go.Bar(\n    x=state_churn_df.index,\n    y=state_churn_df[1],\n    marker = dict(color = colors[1]),\n    name='churn'\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title='Churn distribution per state',\n    autosize=True,\n    barmode='stack',\n    margin=go.layout.Margin(l=50, r=50),\n    xaxis=dict(\n        title='state',\n        tickangle=45\n    ),\n    yaxis=dict(\n        title='#samples',\n        automargin=True,\n    ),\n    legend=dict(\n        x=0,\n        y=1,\n    ),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='stacked-bar')","0f1ead73":"churn = pre_df[pre_df[\"churn\"] == 1]\nno_churn = pre_df[pre_df[\"churn\"] == 0]","cb702928":"def create_churn_trace(col, visible=False):\n    return go.Histogram(\n        x=churn[col],\n        name='churn',\n        marker = dict(color = colors[1]),\n        visible=visible,\n    )\n\ndef create_no_churn_trace(col, visible=False):\n    return go.Histogram(\n        x=no_churn[col],\n        name='no churn',\n        marker = dict(color = colors[0]),\n        visible = visible,\n    )\n\nfeatures_not_for_hist = [\"state\", \"phone_number\", \"churn\"]\nfeatures_for_hist = [x for x in pre_df.columns if x not in features_not_for_hist]\nactive_idx = 0\ntraces_churn = [(create_churn_trace(col) if i != active_idx else create_churn_trace(col, visible=True)) for i, col in enumerate(features_for_hist)]\ntraces_no_churn = [(create_no_churn_trace(col) if i != active_idx else create_no_churn_trace(col, visible=True)) for i, col in enumerate(features_for_hist)]\ndata = traces_churn + traces_no_churn\n\nn_features = len(features_for_hist)\nsteps = []\nfor i in range(n_features):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data)],\n        label = features_for_hist[i],\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    step['args'][1][i + n_features] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = active_idx,\n    currentvalue = dict(\n        prefix = \"Feature: \", \n        xanchor= 'center',\n    ),\n    pad = {\"t\": 50},\n    steps = steps,\n)]\n\nlayout = dict(\n    sliders=sliders,\n    yaxis=dict(\n        title='#samples',\n        automargin=True,\n    ),\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename='histogram_slider')","1468b781":"def create_box_churn_trace(col, visible=False):\n    return go.Box(\n        y=churn[col],\n        name='churn',\n        marker = dict(color = colors[1]),\n        visible=visible,\n    )\n\ndef create_box_no_churn_trace(col, visible=False):\n    return go.Box(\n        y=no_churn[col],\n        name='no churn',\n        marker = dict(color = colors[0]),\n        visible = visible,\n    )\n\nfeatures_not_for_hist = [\"state\", \"phone_number\", \"churn\"]\nfeatures_for_hist = [x for x in pre_df.columns if x not in features_not_for_hist]\n# remove features with too less distinct values (e.g. binary features), because boxplot does not make any sense for them\nfeatures_for_box = [col for col in features_for_hist if len(churn[col].unique())>5]\n\nactive_idx = 0\nbox_traces_churn = [(create_box_churn_trace(col) if i != active_idx else create_box_churn_trace(col, visible=True)) for i, col in enumerate(features_for_box)]\nbox_traces_no_churn = [(create_box_no_churn_trace(col) if i != active_idx else create_box_no_churn_trace(col, visible=True)) for i, col in enumerate(features_for_box)]\ndata = box_traces_churn + box_traces_no_churn\n\nn_features = len(features_for_box)\nsteps = []\nfor i in range(n_features):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data)],\n        label = features_for_box[i],\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    step['args'][1][i + n_features] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = active_idx,\n    currentvalue = dict(\n        prefix = \"Feature: \", \n        xanchor= 'center',\n    ),\n    pad = {\"t\": 50},\n    steps = steps,\n    len=1,\n)]\n\nlayout = dict(\n    sliders=sliders,\n    yaxis=dict(\n        title='value',\n        automargin=True,\n    ),\n    legend=dict(\n        x=0,\n        y=1,\n    ),\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename='box_slider')","e3028e25":"corr = pre_df.corr()\ntrace = go.Heatmap(z=corr.values.tolist(), x=corr.columns, y=corr.columns)\ndata=[trace]\nlayout = go.Layout(\n    title='Heatmap of pairwise correlation of the columns',\n    autosize=False,\n    width=850,\n    height=700,\n    yaxis=go.layout.YAxis(automargin=True),\n    xaxis=dict(tickangle=40),\n    margin=go.layout.Margin(l=0, r=200, b=200, t=80)\n)\n\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='labelled-heatmap1')","5f3540f8":"from scipy.cluster import hierarchy as hc\nX = np.random.rand(10, 10)\nnames = pre_df.columns\ninverse_correlation = 1 - abs(pre_df.corr())\nfig = ff.create_dendrogram(inverse_correlation.values, orientation='left', labels=names, colorscale=colors, linkagefun=lambda x: hc.linkage(x, 'average'))\nfig['layout'].update(dict(\n    title=\"Dendogram of clustering the features according to correlation\",\n    width=800, \n    height=600,\n    margin=go.layout.Margin(l=180, r=50),\n    xaxis=dict(\n        title='distance',\n    ),\n    yaxis=dict(\n        title='features',\n        automargin=True,\n    ),\n))\niplot(fig, filename='dendrogram_corr_clustering')","56938c99":"# save the duplicate features for later usage\nduplicate_features = [\"total_day_charge\", \"total_eve_charge\", \"total_night_charge\", \"total_intl_charge\"]","8764c7e4":"# splitting the dataset into feature vectors and the target variable\ndf_y = pre_df[\"churn\"]\ndf_X = pre_df.drop([\"churn\"], axis=1)","e1c6e986":"# normalize the dataset (note: for decision tree\/random forest it would not be needed)\ndf_X_normed = (df_X - df_X.mean()) \/ df_X.std()","7daf7c8e":"# calculate the principal components\npca = PCA(random_state=SEED)\ndf_X_pca = pca.fit_transform(df_X_normed)","6e7fca6d":"tot = sum(pca.explained_variance_) # total explained variance of all principal components\nvar_exp = [(i \/ tot) * 100 for i in sorted(pca.explained_variance_, reverse=True)] # individual explained variance\ncum_var_exp = np.cumsum(var_exp) # cumulative explained variance","47e34a21":"trace_cum_var_exp = go.Bar(\n    x=list(range(1, len(cum_var_exp) + 1)), \n    y=var_exp,\n    name=\"individual explained variance\",\n)\ntrace_ind_var_exp = go.Scatter(\n    x=list(range(1, len(cum_var_exp) + 1)),\n    y=cum_var_exp,\n    mode='lines+markers',\n    name=\"cumulative explained variance\",\n    line=dict(\n        shape='hv',\n    ))\ndata = [trace_cum_var_exp, trace_ind_var_exp]\nlayout = go.Layout(\n    title='Individual and Cumulative Explained Variance',\n    autosize=True,\n    yaxis=dict(\n        title='percentage of explained variance',\n    ),\n    xaxis=dict(\n        title=\"principal components\",\n        dtick=1,\n    ),\n    legend=dict(\n        x=0,\n        y=1,\n    ),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='basic-bar')","a6ba61ef":"n_components = 10\ndf_X_reduced = np.dot(df_X_normed.values, pca.components_[:n_components,:].T)\ndf_X_reduced = pd.DataFrame(df_X_reduced, columns=[\"PC#%d\" % (x + 1) for x in range(n_components)])","28db484a":"# prints the best grid search scores along with their parameters.\ndef print_best_grid_search_scores_with_params(grid_search, n=5):\n    if not hasattr(grid_search, 'best_score_'):\n        raise KeyError('grid_search is not fitted.')\n    print(\"Best grid scores on validation set:\")\n    indexes = np.argsort(grid_search.cv_results_['mean_test_score'])[::-1][:n]\n    means = grid_search.cv_results_['mean_test_score'][indexes]\n    stds = grid_search.cv_results_['std_test_score'][indexes]\n    params = np.array(grid_search.cv_results_['params'])[indexes]\n    for mean, std, params in zip(means, stds, params):\n        print(\"%0.3f (+\/-%0.03f) for %r\" % (mean, std * 2, params))","abf9e306":"def do_gridsearch_with_cv(clf, params, X_train, y_train, cv, smote=None):\n\n    if smote is None:\n        pipeline = Pipeline([('clf', clf)])\n    else:\n        pipeline = Pipeline([('sm', sm), ('clf', clf)])\n        \n    gs = GridSearchCV(pipeline, params, cv=kf, n_jobs=-1, scoring='f1', return_train_score=True)\n    gs.fit(X_train, y_train)\n    return gs\n\ndef score_on_test_set(clfs, datasets):\n    scores = []\n    for c, (X_test, y_test) in zip(clfs, datasets):\n        scores.append(c.score(X_test, y_test))\n    return scores","ab0517da":"# split data into train and test set in proportion 4:1 for all differntly preprocessed datasets\nX_train, X_test, y_train, y_test = train_test_split(df_X_normed, df_y, test_size=0.2, random_state=SEED)\nX_train_pca, X_test_pca, y_train_pca, y_test_pca = train_test_split(df_X_reduced, df_y, test_size=0.2, random_state=SEED)\ncols_without_duplicate = [x for x in df_X_normed.columns if x not in duplicate_features]\nX_train_red, X_test_red, y_train_red, y_test_red = train_test_split(df_X_normed[cols_without_duplicate], df_y, test_size=0.2, random_state=SEED)","7edfe56e":"print(\"Shape of the full train dataset:\", X_train.shape)\nprint(\"Shape of the train dataset with reduced features\", X_train_red.shape)\nprint(\"Shape of the transformed train dataset using the first 10 Principal Components\", X_train_pca.shape)","0ce42a6c":"sm = SMOTE(random_state=SEED)\nkf = StratifiedKFold(n_splits=5, random_state=SEED)\nclf_rf = RandomForestClassifier(random_state=SEED)\nclf_balanced = RandomForestClassifier(random_state=SEED, class_weight=\"balanced\")","b8d811b6":"%%time\ngs_full = do_gridsearch_with_cv(clf_rf, RANDOM_FOREST_PARAMS, X_train, y_train, kf, smote=None)\ngs_red = do_gridsearch_with_cv(clf_rf, RANDOM_FOREST_PARAMS, X_train_red, y_train_red, kf, smote=None)\ngs_pca = do_gridsearch_with_cv(clf_rf, RANDOM_FOREST_PARAMS, X_train_pca, y_train_pca, kf, smote=None)\ngss_raw = [gs_full, gs_red, gs_pca]","6c856b67":"test_results_raw = score_on_test_set(gss_raw, [(X_test, y_test), (X_test_red, y_test_red), (X_test_pca, y_test_pca)])","57547f13":"%%time\ngs_full_balanced = do_gridsearch_with_cv(clf_balanced, RANDOM_FOREST_PARAMS, X_train, y_train, kf, smote=None)\ngs_red_balanced = do_gridsearch_with_cv(clf_balanced, RANDOM_FOREST_PARAMS, X_train_red, y_train_red, kf, smote=None)\ngs_pca_balanced = do_gridsearch_with_cv(clf_balanced, RANDOM_FOREST_PARAMS, X_train_pca, y_train_pca, kf, smote=None)\ngss_balanced_weights = [gs_full_balanced, gs_red_balanced, gs_pca_balanced]","694f481f":"test_results_balanced_weights = score_on_test_set(gss_balanced_weights, [(X_test, y_test), (X_test_red, y_test_red), (X_test_pca, y_test_pca)])","e6b54bfa":"%%time\ngs_full_smote = do_gridsearch_with_cv(clf_rf, RANDOM_FOREST_PARAMS, X_train, y_train, kf, smote=sm)\ngs_red_smote = do_gridsearch_with_cv(clf_rf, RANDOM_FOREST_PARAMS, X_train_red, y_train_red, kf, smote=sm)\ngs_pca_smote = do_gridsearch_with_cv(clf_rf, RANDOM_FOREST_PARAMS, X_train_pca, y_train_pca, kf, smote=sm)\ngss_smote = [gs_full_smote, gs_red_smote, gs_pca_smote]","116e6eeb":"test_results_smote = score_on_test_set(gss_smote, [(X_test, y_test), (X_test_red, y_test_red), (X_test_pca, y_test_pca)])","de0b10e7":"dataset_strings = [\"full dataset\", \"data set with reduced features\", \"dataset with first 10 principal components\"]\nmethod_strings = [\"without any balancing\", \"using balanced class weights\", \"using SMOTE\"]\n\nresult_strings = dict()\nfor ms, results in zip(method_strings, [test_results_raw, test_results_balanced_weights, test_results_smote]):\n    for ds, res in zip(dataset_strings, results):\n        string = \"%.3f\" % res + \"     \" + ds + \" \" + ms\n        result_strings[string] = res\n        2\nresult_strings = sorted(result_strings.items(), key=lambda kv: kv[1], reverse=True)\nprint(\"F1 score  dataset and method\")\nfor k, _ in result_strings:\n    print(k)","4255a471":"def get_color_with_opacity(color, opacity):\n    return \"rgba(\" + color[4:-1] + \", %.2f)\" % opacity\n\n# partially based on https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_learning_curve.html\ndef plot_learning_curve(estimator, title, X, y, cv=None, n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"\n    Generate a simple plot of the test and training learning curve.\n\n    Parameters\n    ----------\n    estimator : object type that implements the \"fit\" and \"predict\" methods\n        An object of that type which is cloned for each validation.\n\n    title : string\n        Title for the chart.\n\n    X : array-like, shape (n_samples, n_features)\n        Training vector, where n_samples is the number of samples and\n        n_features is the number of features.\n\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\n        Target relative to X for classification or regression;\n        None for unsupervised learning.\n\n    cv : int, cross-validation generator or an iterable, optional\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n          - None, to use the default 3-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, optional (default=None)\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like, shape (n_ticks,), dtype float or int\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the dtype is float, it is regarded as a\n        fraction of the maximum size of the training set (that is determined\n        by the selected validation method), i.e. it has to be within (0, 1].\n        Otherwise it is interpreted as absolute sizes of the training sets.\n        Note that for classification the number of samples usually have to\n        be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    \n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, scoring=\"f1\", random_state=SEED)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    \n    trace1 = go.Scatter(\n        x=train_sizes, \n        y=train_scores_mean - train_scores_std, \n        showlegend=False,\n        mode=\"lines\",\n        name=\"\",\n        hoverlabel = dict(\n            namelength=20\n        ),\n        line = dict(\n            width = 0.1,\n            color = get_color_with_opacity(colors[0], 0.4),\n        ),\n    )\n    trace2 = go.Scatter(\n        x=train_sizes, \n        y=train_scores_mean + train_scores_std, \n        showlegend=False,\n        fill=\"tonexty\",\n        mode=\"lines\",\n        name=\"\",\n        hoverlabel = dict(\n            namelength=20\n        ),\n        line = dict(\n            width = 0.1,\n            color = get_color_with_opacity(colors[0], 0.4),\n        ),\n    )\n    trace3 = go.Scatter(\n        x=train_sizes, \n        y=train_scores_mean, \n        showlegend=True,\n        name=\"Train score\",\n        line = dict(\n            color = colors[0],\n        ),\n    )\n    \n    trace4 = go.Scatter(\n        x=train_sizes, \n        y=test_scores_mean - test_scores_std, \n        showlegend=False,\n        mode=\"lines\",\n        name=\"\",\n        hoverlabel = dict(\n            namelength=20\n        ),\n        line = dict(\n            width = 0.1,\n            color = get_color_with_opacity(colors[1], 0.4),\n        ),\n    )\n    trace5 = go.Scatter(\n        x=train_sizes, \n        y=test_scores_mean + test_scores_std, \n        showlegend=False,\n        fill=\"tonexty\",\n        mode=\"lines\",\n        name=\"\",\n        hoverlabel = dict(\n            namelength=20\n        ),\n        line = dict(\n            width = 0.1,\n            color = get_color_with_opacity(colors[1], 0.4),\n        ),\n    )\n    trace6 = go.Scatter(\n        x=train_sizes, \n        y=test_scores_mean, \n        showlegend=True,\n        name=\"Test score\",\n        line = dict(\n            color = colors[1],\n        ),\n    )\n    \n    data = [trace1, trace2, trace3, trace4, trace5, trace6]\n    layout = go.Layout(\n        title=title,\n        autosize=True,\n        yaxis=dict(\n            title='F1 Score',\n        ),\n        xaxis=dict(\n            title=\"#Training samples\",\n        ),\n        legend=dict(\n            x=0.8,\n            y=0,\n        ),\n    )\n    fig = go.Figure(data=data, layout=layout)\n    return iplot(fig, filename=title)","264e4fa2":"def plot_feature_importance(feature_importance, title):\n    trace1 = go.Bar(\n        x=feature_importance[:, 0],\n        y=feature_importance[:, 1],\n        marker = dict(color = colors[0]),\n        name='feature importance'\n    )\n    data = [trace1]\n    layout = go.Layout(\n        title=title,\n        autosize=True,\n        margin=go.layout.Margin(l=50, r=100, b=150),\n        xaxis=dict(\n            title='feature',\n            tickangle=30\n        ),\n        yaxis=dict(\n            title='feature importance',\n            automargin=True,\n        ),\n    )\n    fig = go.Figure(data=data, layout=layout)\n    return iplot(fig, filename=title)","3f5b95a4":"%%time\nclf_lr = LogisticRegression(random_state=SEED)\ngs_lr = do_gridsearch_with_cv(clf_lr, LOGISTIC_REGRESSION_PARAMS, X_train, y_train, kf, smote=sm)","e6f3e066":"print_best_grid_search_scores_with_params(gs_lr)","fc132daa":"gs_lr_score = gs_lr.score(X_test, y_test)\ny_pred_lr = gs_lr.predict(X_test)\ncm_lr = confusion_matrix(y_test, y_pred_lr)\ncm_lr = cm_lr.astype('float') \/ cm_lr.sum(axis=1)[:, np.newaxis] # normalize the confusion matrix","9ad27c93":"cm_df = pd.DataFrame(cm_lr.round(3), index=[\"true no churn\", \"true churn\"], columns=[\"predicted no churn\", \"predicted churn\"])\ncm_df","b2483f0e":"plot_learning_curve(gs_lr.best_estimator_, \"Learning Curve of Logistic Regression\", X_train, y_train, cv=5)","bd1b2f0f":"%%time\nclf_knn = KNeighborsClassifier()\ngs_knn = do_gridsearch_with_cv(clf_knn, KNN_PARAMS, X_train, y_train, kf, smote=sm)","86119777":"print_best_grid_search_scores_with_params(gs_knn)","adc7bc4a":"gs_knn_score = gs_knn.score(X_test, y_test)\ny_pred_knn = gs_knn.predict(X_test)\ncm_knn = confusion_matrix(y_test, y_pred_knn)\ncm_knn = cm_knn.astype('float') \/ cm_knn.sum(axis=1)[:, np.newaxis] # normalize the confusion matrix","2977b13c":"cm_df = pd.DataFrame(cm_knn.round(3), index=[\"true no churn\", \"true churn\"], columns=[\"predicted no churn\", \"predicted churn\"])\ncm_df","710015f4":"plot_learning_curve(gs_knn.best_estimator_, \"Learning Curve of KNN\", X_train, y_train, cv=5)","cd4d7788":"clf_knn_uni = KNeighborsClassifier()\ngs_knn_uniform = do_gridsearch_with_cv(clf_knn_uni, KNN_PARAMS_UNIFORM, X_train, y_train, kf, smote=sm)","0a732c47":"print_best_grid_search_scores_with_params(gs_knn_uniform, 1)","fbedb4a1":"plot_learning_curve(gs_knn_uniform.best_estimator_, \"Learning Curve of KNN with uniform weights\", X_train, y_train, cv=5)","fbc832f9":"%%time\nclf_svm = svm.SVC(random_state=SEED, probability=True)\ngs_svm = do_gridsearch_with_cv(clf_svm, SVM_PARAMS, X_train, y_train, kf, smote=sm)","d1d3f349":"print_best_grid_search_scores_with_params(gs_svm)","ced242f2":"gs_svm_score = gs_svm.score(X_test, y_test)\ny_pred_svm = gs_svm.predict(X_test)\ncm_svm = confusion_matrix(y_test, y_pred_svm)\ncm_svm = cm_svm.astype('float') \/ cm_svm.sum(axis=1)[:, np.newaxis] # normalize the confusion matrix","8a4fafc1":"pd.DataFrame(cm_svm.round(3), index=[\"true no churn\", \"true churn\"], columns=[\"predicted no churn\", \"predicted churn\"])","574f50ea":"plot_learning_curve(gs_svm.best_estimator_, \"Learning Curve of SVM\", X_train, y_train, cv=5)","46f0c1c8":"%%time\nclf_dt = DecisionTreeClassifier(random_state=SEED)\ngs_dt = do_gridsearch_with_cv(clf_dt, DECISION_TREE_PARAMS, X_train, y_train, kf, smote=sm)","4067ca1d":"print_best_grid_search_scores_with_params(gs_dt)","8a19da4e":"gs_dt_score = gs_dt.score(X_test, y_test)\ny_pred_dt = gs_dt.predict(X_test)\ncm_dt = confusion_matrix(y_test, y_pred_dt)\ncm_dt = cm_dt.astype('float') \/ cm_dt.sum(axis=1)[:, np.newaxis] # normalize the confusion matrix","16e1f4ca":"cm_df = pd.DataFrame(cm_dt.round(3), index=[\"true no churn\", \"true churn\"], columns=[\"predicted no churn\", \"predicted churn\"])\ncm_df","d345c0d2":"feature_importance = np.array(sorted(zip(X_train.columns, gs_dt.best_estimator_.named_steps['clf'].feature_importances_), key=lambda x: x[1], reverse=True))\nplot_feature_importance(feature_importance, \"Feature importance in the decision tree\")","0979f9df":"plot_learning_curve(gs_dt.best_estimator_, \"Learning Curve of the Decision Tree\", X_train, y_train, cv=5)","97a56741":"%%time\nclf_rf = RandomForestClassifier(random_state=SEED)\ngs_rf = do_gridsearch_with_cv(clf_rf, RANDOM_FOREST_PARAMS, X_train, y_train, kf, smote=sm)","63309c43":"print_best_grid_search_scores_with_params(gs_rf)","c03fedbb":"gs_rf_score = gs_rf.score(X_test, y_test)\ny_pred_rf = gs_rf.predict(X_test)\ncm_rf = confusion_matrix(y_test, y_pred_rf)\ncm_rf = cm_rf.astype('float') \/ cm_rf.sum(axis=1)[:, np.newaxis] # normalize the confusion matrix","46dfacec":"cm_df = pd.DataFrame(cm_rf.round(3), index=[\"true no churn\", \"true churn\"], columns=[\"predicted no churn\", \"predicted churn\"])\ncm_df","603fcca4":"feature_importance_rf = np.array(sorted(zip(X_train.columns, gs_rf.best_estimator_.named_steps['clf'].feature_importances_), key=lambda x: x[1], reverse=True))\nplot_feature_importance(feature_importance_rf, \"Feature importance in the Random Forest\")","960f4e40":"plot_learning_curve(gs_dt.best_estimator_, \"Learning Curve of the Random Forest\", X_train, y_train, cv=5)","09a82532":"# code partially from https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_roc.html\ndef plot_roc_curve(classifiers, legend, title, X_test, y_test):\n    trace1 = go.Scatter(\n        x=[0, 1], \n        y=[0, 1], \n        showlegend=False,\n        mode=\"lines\",\n        name=\"\",\n        line = dict(\n            color = colors[0],\n        ),\n    )\n    \n    data = [trace1]\n    aucs = []\n    for clf, string, c in zip(classifiers, legend, colors[1:]):\n        y_test_roc = np.array([([0, 1] if y else [1, 0]) for y in y_test])\n        y_score = clf.predict_proba(X_test)\n        \n        # Compute ROC curve and ROC area for each class\n        fpr = dict()\n        tpr = dict()\n        roc_auc = dict()\n        for i in range(2):\n            fpr[i], tpr[i], _ = roc_curve(y_test_roc[:, i], y_score[:, i])\n            roc_auc[i] = auc(fpr[i], tpr[i])\n\n        # Compute micro-average ROC curve and ROC area\n        fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test_roc.ravel(), y_score.ravel())\n        roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n        aucs.append(roc_auc['micro'])\n\n        trace = go.Scatter(\n            x=fpr['micro'], \n            y=tpr['micro'], \n            showlegend=True,\n            mode=\"lines\",\n            name=string + \" (area = %0.2f)\" % roc_auc['micro'],\n            hoverlabel = dict(\n                namelength=30\n            ),\n            line = dict(\n                color = c,\n            ),\n        )\n        data.append(trace)\n\n    layout = go.Layout(\n        title=title,\n        autosize=False,\n        width=550,\n        height=550,\n        yaxis=dict(\n            title='True Positive Rate',\n        ),\n        xaxis=dict(\n            title=\"False Positive Rate\",\n        ),\n        legend=dict(\n            x=0.4,\n            y=0.06,\n        ),\n    )\n    fig = go.Figure(data=data, layout=layout)\n    return aucs, iplot(fig, filename=title)","da270b02":"classifiers = [gs_lr, gs_knn, gs_svm, gs_dt, gs_rf]\nclassifier_names = [\"Logistic Regression\", \"KNN\", \"SVM\", \"Decision Tree\", \"Random Forest\"]\nauc_scores, roc_plot = plot_roc_curve(classifiers, classifier_names, \"ROC curve\", X_test, y_test)\nroc_plot","442c5a15":"accs = []\nrecalls = []\nprecision = []\nresults_table = pd.DataFrame(columns=[\"accuracy\", \"precision\", \"recall\", \"f1\", \"auc\"])\nfor (i, clf), name, auc in zip(enumerate(classifiers), classifier_names, auc_scores):\n    y_pred = clf.predict(X_test)\n    row = []\n    row.append(accuracy_score(y_test, y_pred))\n    row.append(precision_score(y_test, y_pred))\n    row.append(recall_score(y_test, y_pred))\n    row.append(f1_score(y_test, y_pred))\n    row.append(auc)\n    row = [\"%.3f\" % r for r in row]\n    results_table.loc[name] = row","4fc925a3":"results_table","d1a93922":"In the following we plot the Scree Plot to determine how many components we use.","1ac3ae2e":"These numbers are hard to interpret in this format, so we create some graphs which visualize them in a better way. First, we look at the distribution of the our target variable:","5a8cb00a":"### Using class weights in the loss function ###","9b6fab2f":"The Analysis was conducted in Python 3.7.0 using Jupyter Notebook which is a web application that allows you to create an interactive environment that contains live code, visualizations and text.\nIn addition, the following packages were used:\n- pandas: pandas provides high-performance data structures and operations for manipulating numerical tables and time series.\n- numpy: NumPy provides scientific computing capabilities such as a powerful N-dimensional array object, linear algebra, and random number capabilities.\n- sklearn: scikit-learn provides tools for data mining and data analysis.\n- imblearn: imbalanced-learn provides a number of re-sampling techniques commonly used in datasets showing strong between-class imbalance.\n- plotly: Plot.ly is a graphing library which can produce interactive graphs.","944925f4":"In order to reduce the dimensionality of a dataset $X$ with $n$ variables to a new dataset with $k$ variables using PCA the following steps have to be followed:\n* standardize the data\n* calculate the Eigenvectors and Eigenvalues from the covariance matrix or correlation matrix, or perform Singular Vector Decomposition.\n* sort the Eigenvectors according to their Eigenvalues in decreasing order\n* build the $n\u00d7k$-dimensional projection matrix $W$ by putting the top $k$ Eigenvectors into the columns of $W$\n* transform the dataset $X$ by multiplying it with $W$: $X_{t} = XW$","3d23520f":"The K-Nearest Neighbors algorithm (KNN) is a non-parametric method, which considers the K closest training examples to the point of interest for predicting its class. This is done by a simple majority vote over the K closest points.","fbfc5a28":"Similar to the SVM, also the Decision Tree has some bias towards predicting no churn, resulting in a poor performance in classifying the true churn clients.","3bd8c4e0":"In order to investigate the pair-wise correlations between two variables $X$ and $Y$, we use the Pearson correlation. Let $\\sigma_X, \\sigma_Y$ be the standard deviation of X,Y and $\\text{cov}(X, Y) = E[(X-E[X])(Y-E[Y])]$. Then we can define the Pearson correlation as the following:<br\/>\n$\\rho_{X, Y} = \\frac{\\text{cov}(X, Y)}{\\sigma_X \\sigma_Y}\\,$.\n\nTo visualize these correlations we use a heatmap plot, in which high correlations are coloured more to the red and lower ones more to the blue.","07a0f5ae":"The hyperparameters of a random forest include the following ones, which can be passed to the RandomForestClassifier of sklearn.ensemble:\n- n_estimators: the number of trees \n- criterion: the criterion which decides the feature and the value at the split (default='gini')\n- max_depth: the maximum depth of each tree (default=None)\n- min_samples_split: the minimum number of samples in a node to be considered for further splitting (default=2)\n- max_features: the number of features which are considered for a split (default='sqrt')","e7f83eba":"In this report, a dataset on churn data of a Telecom company is analysed. It can be found here: https:\/\/www.kaggle.com\/becksddf\/churn-in-telecoms-dataset.","ca2faf75":"In the following, the normalized confusion matrix is shown:","866be938":"We can see that we have clearly more samples for customers without churn than for customers with churn. So we have a class imbalance for the target variable which could lead to predictive models which are biased towards the majority (i.e. no churn). In order to deal with this issue we will investigate into the use of oversampling when building the models.\n\nNext, we look at the churn distribution per state, to see how much the state influences our target:","caf39258":"In conclusion, we use the full dataset and apply SMOTE in the following classification chapter.","941e8576":"To prepare the dataset for the following analysis we split it into the target column and the other predictors. In addition, we standardize all features to avoid e.g. higher impact of features with higher absolute values in classifiers which are based on a distance metric.","cc982fde":"The Random Forest classifier shows also some bias towards predicting no churn, but not as much as the Decision Tree. Furthermore the results are very good by misclassifying just very few test samples.","86e64238":"We can see that the most important features for the Decision Tree are the customer service calls and the total day minutes. These were also found to be correlated with the target variable in the data exploration. Interestingly, the area code is the third most important feature, but the area code has near zero correlation with the churn column.","fe603870":"Principal component analysis (PCA) is a statistical procedure that uses an orthogonal transformation to convert the variables of a dataset into a new set of variables which are linearly uncorrelated and called principal components. The principal components are ranked according to the variance of data along them. This technique can be used to reduce the dimensionality of the dataset by considering just the most important principal components.","31206476":"## Conclusion ##","175ffc59":"When we look at the box plot for the number of voice mail messages (\"number_vmail_messages\"), we can see that we have some outliers for the customers with churn, but most of them have send zero voice mail messages. The customers which did not churn instead tend to do more voice mail messages.<br\/>\nSimilar to our findings in the histograms, we can see also in the box plot that the median of the total day minutes and the total day charge for churn clients is higher than the one of no-churn clients.<br\/>\nLooking at the total international calls (\"total_intl_calls\"), the box plot shows that both churn and no-churn  customers are doing a similar amount of international calls, but the churn-customers tend to do longer calls as the median of churn customers for the total international minutes is higher than for the no-churn customers.<br\/>\nFinally, the plot for the number of customer service calls shows that clients with churn have a higher median and a higher variance for the customer service calls.","dceef2c4":"The confusion matrix of the Logistic Regression shows that the probability to predict the correct class is with 0.76 and 0.79 similar for both classes. This means that the Logistic Regression has just a slight bias towards predicting a customer as churn.","9a1ab730":"We define $x_i$ as the $n$-dimensional feature vector of a given sample and $\\beta_{0},\\,\\boldsymbol{\\beta} = (\\beta_{1}, ..., \\beta_{n})^T$ as the model parameters. Then the logistic regression model is defined as:\n\n$P(Y=1 \\vert x_i)= \\frac{\\text{exp}(\\beta_{0} + x_i^T\\boldsymbol{\\beta} )}{1+\\text{exp}(\\beta_{0} + x_i^T\\boldsymbol{\\beta} )} = \\frac{1}{1+\\text{exp}(-(\\beta_{0} + x_i^T\\boldsymbol{\\beta} ))}$","553dd9d4":"We can see that the Random Forest classifier has with 0.98 the highest AUC value, followed by the SVM, the KNN and the Decision Tree with 0.96, 0.92 and 0.91, respectively. The Logistic Regression performs worse with an AUC of just 0.81.","2bd9a542":"Every classifier has a set of hyperparameters, which can be tuned by training the classifier with different values for these hyperparameters and selecting the classifier with the best score. In order to estimate the performance of a classifier in a more reliable way, k-fold cross validation (CV) is used. In k-fold CV, the training set is divided into a k subsets. Then we train k times our classifier on different unions of k-1 subsets and calculate its score on the subset which was not used for training. Then the final score is calculated by averaging the score of each iteration. In detail, let $C_1, C_2, ... C_k$ be the indices of the samples in each of the $K$ parts of the dataset and let $n_k$ be the number of observations in part $k$. Then the score from the cross validation is computed as follows:\n\n$\\text{Score}_{CV(K)} = \\sum_{k=1}^{K} \\frac{n_k}{n}\\text{Score}_k$.\n\nIn our hyper parameter tuning the Score is the f1-Score defined above.\n\nTo do this analysis, we use the sklearn.model_selection.GridSearchCV object, to which we pass a classifier, a dictionary of hyperparameters with values and a $k$-fold object. For a good trade-off between runtime and accuracy of the score we choose $k=5$, so the classifiers are trained on 80% of the train data in each iteration.","0fc72d32":"The following interactive graph shows the distribution of each feature for customer with churn and for the ones without churn. The slider can be used to switch between the different features.","d93034a2":"The most important feature for the Random Forest are the number of customer service calls, the total day minutes and the total day charge. The latter two basically contain the same information as they are highly correlated. Other important features are if the user has an international plan and the total international calls. The area code was not found as important as in the Decision Tree.","a2aba62d":"The Decision Tree class of sklearn also computes an importance value for each feature. This is done by weighting the decrease of impurity at each split by the probability of reaching this node for each node which split involves the feature of interest. Then these weighted decreases of impurity are summed up for each feature and this gives the feature importance.","536e4501":"For the learning curve of the Logistic Regression on the train set we can not see a clear trend, but on the train set the score increases with the number of training examples. Trained on all training samples the f1-score on the train set and on the test set is very similar, so the Logistic Regression is not overfitting the train data.","2f6dbd58":"The confusion matrix shows that the SVM classifier has a clear bias towards predicting no churn. This is not desirable in our case, because we do not want to miss out on churn-customers.","b7fb69f6":"In the Random Forest the feature importances are obtained by computing it for all trees and taking the average.","1f6983b7":"### Support-Vector Machine ###","b4a0f177":"Then the f1-score is given by the following equation:\n\n$F_{1}=2\\,\\frac{\\text{precision}\\, \\times \\,\\text{recall}}{\\text{precision} \\, +\\, \\text{recall}}$","187c0834":"One interesting histogram is of the feature \"international_plan\". While the proportion of churn for customers which have the international plan is much higher than the proportion of churn for customers without.\n\nThe histograms for the \"total_day_minutes\" and \"total_day_charge\" are very similar and we can see that the customer with a higher value for these two features are more likely to churn. Interestingly, this does not apply to the number of day calls, which means that these customers seem to do longer calls. The minutes, charge and #calls for other times of the day (i.e. evening, night) do not show different distributions for customers with churn and without churn.\n\nAnother interesting pattern is shown by the \"total_intl_calls\" feature. The data for the customers with churn are more left skewed than the data of the customers of the customer who did not churn.","ba6bfd0c":"The learning curve shows that the f1-score on the test set constantly increases, which makes sense because the KNN can consider more training examples and therefore it can do a more accurate prediction on the test points. The train score has also an increasing trend but does not improve between 692 and 1652 training samples.","904098a3":"## Comparison of differently preprocessed datasets for classification ##","285df59b":"In this chapter we apply one classifier to the different version of the dataset. The Random Forest classifier is used because it is considered as a great baseline model for most applications. It is described in more detail in the next chapter. The following different versions of the dataset are investigated:\n- full dataset\n- dataset with variables reduced by the clustering according to the correlation\n- dataset reduced by considering the first ten principal components after applying PCA","53415b1d":"Next, we take a look at the box plots for each feature. A box plot visualizes the following statistics:\n- median\n- the first quartile (Q1) and the third quartile (Q3) building the interquartile range (IQR)\n- the lower fence (Q1 - 1.5 * IQR) and the upper fence (Q3 + 1.5 * IQR)\n- the maximum and the minimum value","4ece45c0":"Our goal was to identify clients which are likely to churn, so we can do special-purpose marketing strategies to avoid the churn event. For this we evaluated differently preprocessed datasets and different classifiers. The analysis has shown that the PCA transformation was not found to be useful. Instead, we suggest to use the whole dataset and apply a oversampling technique in order to deal with the unbalanced target variable. <br\/>\nIn the classification chapter we have trained several different classifiers, including a Logistic Regression, a K-Nearest Neighbors Classifier, a Support-Vector Machine, a Decision Tree and a Random Forest. It was found that the best performance in accuracy, as well as f1-score and AUC is achieved by the Random Forest. One of the most important predictors for the Random Forest is the number of customer service calls. This might imply that the company should improve its customer service. Another important feature is the total day minutes and the total day charge, which basically hold the same information. So the company could try to either lower its charge per minute for clients, which have many day minutes or it could offer flat rates for calls.<br\/>\nConcluding, we suggest the Telecom company to use the Random Forest model to identify potential churn customers and according to the customers life-time value present them special offers.","c53b0589":"Customer churn is the loss of clients or customers. Predicting churn can help the Telecom company, so it can effectively focus a customer retention marketing program (e.g. a special offer) to the subset of clients which are most likely to change their carrier. Therefore, the \u201cchurn\u201d column is chosen as target and the following predictive analysis is a supervised classification problem.","e091b752":"The Decision Tree is highly overfitted as the train score is about 0.3 higher than the test score. Both the train and especially the test score have an increasing trend with the number of samples.","83aa5e0b":"## Exploration ##","b662f015":"## Principal component analysis ##","06e7c3a5":"The f1-score of 1 on the train set is a bit strange on the first sight. This behavior is caused by using the \"distance\" weights for the vote of the neighbors. This means that in the majority vote every point has a vote weight equal to the inverse of its distance to the point of interest. Because the point of interest is in the train set the distance to the nearest point is 0. So the weight of the vote of this point is infinite and the prediction is therefore equal to the class of the point itself. This applies to all training samples which results in a f1-score of 1.\n\nTo show a more interesting learning curve on the train set, we train another KNN classifier using uniform weights instead of the distance weights:","9d41f918":"The results show that the Logistic Regression has with about 0.32 a very low precision value, which means that when it predicts a customer to churn, it is just in 32% of the cases correct.<br\/>\nMoreover, in accuracy the Decision Tree performs with 0.89 better than the KNN, which achieves 0.86. But in the AUC measure the KNN outperforms with 0.92 the Decision Tree with 0.91.<br\/>\nThe KNN even has the highest recall value, but it achieves poor results for the precision, which also makes its f1-score the second worst of all classifiers.<br\/>\nThe SVM has with 0.58 the second highest precision score but is far behind the best precision score of 0.83 of the Random Forest. This also impacts the f1-score for which the SVM also achieves the second highest with an value of 0.67, but again being worse than the Random Forest, which achieves a f1-score of 0.82.","8f54bf28":"### Logistic Regression ###","3f6ed2a4":"Finally, we compute the accuracy, precision, recall and f1-score on the test set for every classifier. The following table shows the results:","b09af9fe":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Introduction<\/a><\/span><\/li><li><span><a href=\"#Exploration\" data-toc-modified-id=\"Exploration-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Exploration<\/a><\/span><\/li><li><span><a href=\"#Principal-component-analysis\" data-toc-modified-id=\"Principal-component-analysis-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Principal component analysis<\/a><\/span><\/li><li><span><a href=\"#Comparison-of-differently-preprocessed-datasets-for-classification\" data-toc-modified-id=\"Comparison-of-differently-preprocessed-datasets-for-classification-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Comparison of differently preprocessed datasets for classification<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Without-additional-balancing-techniques\" data-toc-modified-id=\"Without-additional-balancing-techniques-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Without additional balancing techniques<\/a><\/span><\/li><li><span><a href=\"#Using-class-weights-in-the-loss-function\" data-toc-modified-id=\"Using-class-weights-in-the-loss-function-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Using class weights in the loss function<\/a><\/span><\/li><li><span><a href=\"#Using-Synthetic-Minority-Over-sampling-Technique\" data-toc-modified-id=\"Using-Synthetic-Minority-Over-sampling-Technique-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Using Synthetic Minority Over-sampling Technique<\/a><\/span><\/li><li><span><a href=\"#Comparison\" data-toc-modified-id=\"Comparison-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;<\/span>Comparison<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Classification\" data-toc-modified-id=\"Classification-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Classification<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Logistic-Regression\" data-toc-modified-id=\"Logistic-Regression-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;<\/span>Logistic Regression<\/a><\/span><\/li><li><span><a href=\"#K-Nearest-Neighbors\" data-toc-modified-id=\"K-Nearest-Neighbors-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;<\/span>K-Nearest Neighbors<\/a><\/span><\/li><li><span><a href=\"#Support-Vector-Machine\" data-toc-modified-id=\"Support-Vector-Machine-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;<\/span>Support-Vector Machine<\/a><\/span><\/li><li><span><a href=\"#Decision-Tree\" data-toc-modified-id=\"Decision-Tree-5.4\"><span class=\"toc-item-num\">5.4&nbsp;&nbsp;<\/span>Decision Tree<\/a><\/span><\/li><li><span><a href=\"#Random-Forest\" data-toc-modified-id=\"Random-Forest-5.5\"><span class=\"toc-item-num\">5.5&nbsp;&nbsp;<\/span>Random Forest<\/a><\/span><\/li><li><span><a href=\"#Comparison\" data-toc-modified-id=\"Comparison-5.6\"><span class=\"toc-item-num\">5.6&nbsp;&nbsp;<\/span>Comparison<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Conclusion\" data-toc-modified-id=\"Conclusion-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Conclusion<\/a><\/span><\/li><\/ul><\/div>","608196cc":"### Comparison ###","f9d7e95a":"The classifier trained on the PCA-transformed dataset performs the worst. The best results are obtained using the full dataset with SMOTE, closely followed by the reduced features dataset with SMOTE. So using SMOTE achieved better results than applying balanced class weights.","543153cf":"A linear Support-Vector Machine (SVM) finds the optimal hyperplane between the points of two classes such that the distance of the nearest points to the decision boundary is maximized. This distance is called margin.\n\nIf the data set is not linearly separable, we can map the samples ${\\bf x}$ into a feature space of higher dimensions:\n${\\bf x} \\longrightarrow \\phi({\\bf x})$ in which the classes can be linearly separated. This results in a non-linear decision boundary in the original dimensions.\n\nAs the vectors ${\\bf x}_i$ appear only in inner products in both the decision\nfunction and the learning law, the mapping function $\\phi({\\bf x})$ does not \nneed to be explicitly specified. Instead, we define a so-called kernel function:\n\n$ K({\\bf x}_1,{\\bf x}_2)=\\phi({\\bf x}_1)^T\\phi({\\bf x}_2)$.\n\nIn the gridsearch we consider the following two kernels:\n- linear kernel: $ K({\\bf x}_1,{\\bf x}_2) = {\\bf x}_1 \\cdot {\\bf x}_2$\n- radial basis function: $ K({\\bf x}_1,{\\bf x}_2) = exp(-\\gamma({\\Vert {\\bf x}_1 - {\\bf x}_2 \\Vert}^2))$","f4e8434c":"Gini impurity: Let $j$ be the number of classes and $p_i$ the fraction of items of class $i$ in a subset $p$, for $i \\in \\{1,2,..., j\\}$. Then the gini impurity is defined as follows: $\\;I_G(p) = 1- \\sum_{i=1}^j {p_i}^2$.\n\n\nInformation gain: It measures the reduction in entropy when applying the split. The entropy is defined as $H(t) = - \\sum_{i=1}^j p_i\\, \\text{log}_2\\,p_i$. Then we define the information gain to split $n$ samples in parent node $p$ into $k$ partitions, where $n_i$ is the number of samples in partition $i$ as $IG = H(p) - \\sum_{i = 1}^k \\frac{n_i}{n} H(i)$.","df91439c":"To compare the performance of the different classification model, we consider several evalutation metric in addition to the in chapter 4 defined precision, recall and f1-score. Further, let TP, FP, TN, FN be defined as in chapter 4.\n\n**Accuracy**<br\/>\nThe accuracy is the percentage of samples classified correctly: $\\text{accuracy} = \\frac{TP + TN}{TP + FP + TN + FN}$.\n\n**Area Under the Receiver Operating Characteristic curve (AUC)**<br\/>\nTo introduce this concept, we define the following two metrics:\n- True positive rate (TPR): this is the same as the recall: $FPR = \\text{recall} = \\frac{TP}{FN + TP}$\n- False positive rate (FPR): this corresponds to the proportion of negative data points that are mistakenly considered as positive, with respect to all negative data points: $FPR = \\frac{FP}{TN + FP}$\n\nTo plot the Receiver Operating Characteristic (ROC) curve we choose a number of different classification thresholds and compute the TPR and the FPR. So the curve shows the trade-off between these two. To combine the TPR and the FPR into one evaluation metric the area under the ROC curve (AUC) is computed.","83956da6":"## Classification ##","6f4ee57d":"In the following, the normalized confusion matrix is shown:","215051c1":"The train score of the SVM does not improve with the number of training samples. The test score, however, improves for the first 692 samples but stays the same with more samples. This could be due to the fact that the decision boundary of the SVM depends just on the support vectors and therefore changes just in the case that the additional training samples are support vectors. Furthermore, the train score is always by more than 0.1 higher than the test score which means that the SVM is overfitting on the train data.","83914abc":"**Statistical overview of the data**\n\nThe following statistical measures can be seen for each column using the describe-function of DataFrame of the pandas library:\n- count: number of samples\n- mean: the mean of this attribute among all samples\n- std: the standard deviation of this attribute\n- min: the minimal value of this attribute\n- 25%: the lower percentile\n- 50%: the median\n- 75%: the upper percentile\n- max: the maximal value of this attribute","d73238f3":"A random forest is an ensemble model that fits a number of decision tree classifiers on various sub-samples of the dataset which are created by the use of bootstrapping. In the inference stage it uses a majority vote over all trees to obtain the prediction. This improves the predictive accuracy and controls over-fitting. ","5717ff3a":"# Analysis of Churn Data of a Telecom company #","18ec8893":"In the following, the normalized confusion matrix is shown. It demonstrates the proportion of samples which are true churn and predicted as churn\/no churn and the proportion of samples which are true no churn and predicted as churn\/no churn.","ced6c4dc":"First, we take a look at some data points to get a feeling what the values of the various columns look like.","17f2ce5b":"The four feature pairs which are each clustered together at a very low distance are:\n- total_night_minutes and total_night_charge\n- total_eve_minutes and total_eve_charge\n- total_intl_minutes and total_intl_charge\n- total_day_minutes and total_day_charge\n\nWe save the all the charge features as duplicate features to be removed for our reduced dataset.","1775a1a2":"In the following, the normalized confusion matrix is shown:","dd1d89ab":"The hyperparameters of a logistic regression include the following ones, which can be passed to the LogisticRegression of sklearn.linear_model:\n- penalty: the norm used for penalization (default='l2')\n- C: the inverse of the regularization strength (default=1.0)","2f9d66c4":"The KNN classifier shows a small bias towards predicting no churn.","8cd51a20":"## Introduction ##","ba282321":"### Decision Tree ###","b741a5fb":"It can be seen that the test score of the Random Forest constantly increases with the number of samples. The train score is with over 0.9 always very high and shows that also the Random Forest overfits on the data.","754b2d43":"Furthermore, we apply two different methods to deal with the unbalanced target variable. First, we try adjusting the weights for the penalization when the classifier makes a mistake in the training and then we try to oversample the data using the Synthetic Minority Over-sampling Technique.\n\nFor the evaluation of the classifiers on the different datasets, a hold-out test set is used, which has 20% of all the data. To account for the class imbalance of our target variable, we use the f1-score as our main evaluation metric.\nWe define:\n- TP = #samples for which the prediction is positive and the true label is positive\n- FP = #samples for which the prediction is positive but the true label is negative\n- TN = #samples for which the prediction is negative and the true label is negative\n- FN = #samples for which the prediction is negative but the true label is positive\n\nThen we define the following:\n\n$\\text{precision} = \\frac{TP}{TP + FP} \\;\\;\\; \\text{and} \\;\\;\\; \\text{recall} = \\frac{TP}{TP + FN}$","85f6883b":"We can see from the graph that the first five components explain the most individual variance, followed by the next nine components which explain less variance. The last five components explain near no variance. We choose to reduce our dataset by using the first ten components which explain about 80% of the total variance.","6cd3ef07":"The Synthetic Minority Over-sampling Technique (SMOTE) algorithm applies KNN approach where it selects one of the k nearest neighbors and computes the vector between the original point and the selected neighbor. The difference is multiplied by random number between (0, 1) and it is added back to original point to obtain the new synthetic point. Geometrically, the synthetic point is somewhere on the line between the original point and its neighbor.\n\nIn the following, we use the SMOTE implementation SMOTE of the imblearn.over_sampling library. Furthermore, we create a Pipeline of applying Smote and then training the classifier, so that it is executed in every fold of x-fold cross validation.","96f436fb":"### Random Forest ###","f392922b":"The sklearn library offers for all parametric classifiers a parameter class_weight, which can be set to \"balanced\". Then, mistakes are weighted inversely proportional to the class frequencies. This means that mistakes for the minority class are penalized more than mistakes made for the majority class.","2df03359":"We apply PCA to the dataset in order to reduce the number of features.","dc235235":"The dataset contains data on the customers of a Telecom company.\nEach row represents a customer and the columns contain customer\u2019s attributes which are described in the following:\n- state: the state the user lives in\n- account length: the number of days the user has this account\n- area code: the code of the area the user lives in\n- phone number: the phone number of the user\n- international plan: true if the user has the international plan, otherwise false\n- voice mail plan: true if the user has the voice mail plan, otherwise false\n- number vmail messages: the number of voice mail messages the user has sent\n- total day minutes: total number of minutes the user has been in calls during the day\n- total day calls: total number of calls the user has done during the day\n- total day charge: total amount of money the user was charged by the Telecom company for calls during the day\n- total eve minutes: total number of minutes the user has been in calls during the evening\n- total eve calls: total number of calls the user has done during the evening\n- total eve charge: total amount of money the user was charged by the Telecom company for calls during the evening\n- total night minutes: total number of minutes the user has been in calls during the night\n- total night calls: total number of calls the user has done during the night\n- total night charge: total amount of money the user was charged by the Telecom company for calls during the night\n- total intl minutes: total number of minutes the user has been in international calls\n- total intl calls: total number of international calls the user has done\n- total intl charge: total amount of money the user was charged by the Telecom company for international calls\n- customer service calls: number of customer service calls the user has done\n- churn: true if the user terminated the contract, otherwise false","7ccd413a":"The hyperparameters of a SVM include the following ones, which can be passed to the SVC of sklearn.svm:\n- C: the inverse of the regularization strength (default=1.0)\n- kernel: the kernel used (default='rbf')\n- gamma: The higher the gamma value it tries to exactly fit the training data set (default='auto_deprecated')","720a0418":"The hyperparameters of KNN include the following ones, which can be passed to the KNeighborsClassifier of sklearn.neighbors:\n- n_neighbors: corresponds to K, the number of nearest neighbors considered for the prediction (default=5) \n- weights: \n  - if uniform, then all neighbors have the same weight for the voting (default)\n  - if distance, then the votes of the neighbors are weighted by the inverse of the distance for the voting\n- p: the power parameter for the Minkowski metric (default=2)","e7d8f907":"A decision tree for classification consists of several splits, which determine for a input sample, the predicted class, which is a leaf node in the tree. The construction of the decision trees is done with a greedy algorithm, because the theoretical minimum of function exists but it is NP-hard to determine it, because number of partitions has a factorial growth.\nSpecifically, a greedy top-down approach is used which chooses a variable at each step that best splits the set of items. For measuring the \"best\" different metrics can be used, which generally measure the homogeneity of the target variable within the subsets. For this analysis we consider the following two metrics:","676e8469":"### Using Synthetic Minority Over-sampling Technique ###","cba7b2b0":"In the following, the normalized confusion matrix is shown:","e0130e22":"We can see that some states have less proportion of customer with churn like AK, HI, IA and some have a higher proportion such as WA, MD and TX. This shows that we should incorporate the state into our further analysis, because it could be help to predict if a customer is going to churn.","fc4390c1":"We can see that the columns \"state\", \"international plan\", \"voice mail plan\" and \"churn\" have String values. The latter three seem to have just the values \"yes\" or \"no\" and are therefore converted to 1 and 0 respectively.\n\nThe \"state\" column is converted using the LabelEncoder, which replaces each unique label with a unique integer.\nIn this case, a label encode is used instead of dummy variables because of the many distinct values, which when converted into dummy variables would mess up the for example the PCA and the feature importance of the tree-based models.\n\nThe \"phone number\" column is removed, because every customer has its own phone number.","5be86fa0":"The following plot shows the ROC curves of the classifiers trained in the previous chapters:","39e2dddb":"We can see a high correlation between the voice mail plan and the number of voice mail messages. It makes sense that customers with the voice mail plan also send more voice mail messages.<br\/>\nHowever, the international plan is just slightly correlated with the total international minutes and the international charge.<br\/>\nAs seen also in our previous analysis, the total day charge and the total day minutes a very highly correlated. Probably, this Telecom company charges per minute. The same behavior can be seen for the evening, the night and the international calls.<br\/>\nThe highest correlation with the churn variable have the international plan, the total_day_charge, the total_day_minutes and the number of customer service calls.\n\nIn order to reduce the dimensionality of our dataset, we can identify and remove duplicate features according to their pairwise correlation with others. For this, we conduct a clustering of the features using agglomerative hierarchical clustering with average linkage. This method starts by creating one cluster for each feature and by computing the pair-wise distance\/dissimilarity\/similarity between all the clusters, which in our case is the correlation. Then it select the two clusters with the highest average correlation to be merged. In the next iteration, the next pair of clusters is selected to be merged. This process is repeated until we end up with one cluster.\n\nTo visualize the clustering process a dendrogram is shown in the following:","ba6ad9c9":"The hyperparameters of a Decision Tree include the following ones, which can be passed to the DecisionTreeClassifier of sklearn.tree:\n- criterion: the criterion which decides the feature and the value at the split (default='gini')\n- max_depth: the maximum depth of each tree (default=None)\n- min_samples_split: the minimum number of samples in a node to be considered for further splitting (default=2)","f4f5df93":"### Comparison ###","8dc1d65a":"We train the Random Forest on the full dataset, on the dataset with reduced features and on the dataset transformed using the first ten principal components.","118d940d":"### Without additional balancing techniques ###","eec3b00c":"### K-Nearest Neighbors ###"}}