{"cell_type":{"8ecbf5d4":"code","b455474f":"code","5bf99237":"code","335ce1cc":"code","48dc9a0b":"code","e258ad37":"code","2e247790":"code","ed8940d0":"code","dec71532":"code","48c850f8":"code","bd104a29":"code","6b3255e5":"code","b3eb3df9":"code","626d87ea":"code","96f5b201":"code","ef33e2d1":"code","6f14ba55":"code","b26aa8b9":"code","a405c586":"code","165aa872":"code","290dae3c":"code","d6c94f40":"code","7a822afa":"code","49e27361":"code","6cc99adc":"code","5e3b49a7":"code","62be93d8":"code","05d55502":"code","a2947512":"code","b98223c3":"code","6564b00d":"code","7d9d48be":"code","8bc8cf4f":"code","53e692ed":"code","e0e64554":"markdown","c958b062":"markdown","54277d0a":"markdown","4426344c":"markdown","9eee4f9a":"markdown","29d693ef":"markdown","903f89d9":"markdown","734088da":"markdown","688196d1":"markdown","63817ae3":"markdown","22e5949a":"markdown","66f3329a":"markdown","2af43c08":"markdown","25941121":"markdown","635a8b79":"markdown","161d8bf3":"markdown","74c57f46":"markdown","355fbd71":"markdown","0e897a1c":"markdown"},"source":{"8ecbf5d4":"import numpy as np\nimport pandas as pd","b455474f":"movies = pd.read_csv('..\/input\/movielens-1m-dataset\/movies.csv',sep=';',encoding='latin-1').drop('Unnamed: 3',axis=1)\nprint('Shape of this dataset :',movies.shape)\nmovies.head()","5bf99237":"ratings = pd.read_csv('..\/input\/movielens-1m-dataset\/ratings.csv',sep=';')\nprint('Shape of this dataset :',ratings.shape)\nratings.head()","335ce1cc":"users = pd.read_csv('..\/input\/movielens-1m-dataset\/users.csv',sep=';')\nprint('Shape of this dataset :',users.shape)\nusers.head()","48dc9a0b":"rating_pivot = ratings.pivot_table(values='rating',columns='userId',index='movieId').fillna(0)\nprint('Shape of this pivot table :',rating_pivot.shape)\nrating_pivot.head()","e258ad37":"from sklearn.neighbors import NearestNeighbors\nnn_algo = NearestNeighbors(metric='cosine')\nnn_algo.fit(rating_pivot)","2e247790":"class Recommender:\n    def __init__(self):\n        # This list will stored movies that called atleast ones using recommend_on_movie method\n        self.hist = [] \n        self.ishist = False # Check if history is empty\n    \n    # This method will recommend movies based on a movie that passed as the parameter\n    def recommend_on_movie(self,movie,n_reccomend = 5):\n        self.ishist = True\n        movieid = int(movies[movies['title']==movie]['movieId'])\n        self.hist.append(movieid)\n        distance,neighbors = nn_algo.kneighbors([rating_pivot.loc[movieid]],n_neighbors=n_reccomend+1)\n        movieids = [rating_pivot.iloc[i].name for i in neighbors[0]]\n        recommeds = [str(movies[movies['movieId']==mid]['title']).split('\\n')[0].split('  ')[-1] for mid in movieids if mid not in [movieid]]\n        return recommeds[:n_reccomend]\n    \n    # This method will recommend movies based on history stored in self.hist list\n    def recommend_on_history(self,n_reccomend = 5):\n        if self.ishist == False:\n            return print('No history found')\n        history = np.array([list(rating_pivot.loc[mid]) for mid in self.hist])\n        distance,neighbors = nn_algo.kneighbors([np.average(history,axis=0)],n_neighbors=n_reccomend + len(self.hist))\n        movieids = [rating_pivot.iloc[i].name for i in neighbors[0]]\n        recommeds = [str(movies[movies['movieId']==mid]['title']).split('\\n')[0].split('  ')[-1] for mid in movieids if mid not in self.hist]\n        return recommeds[:n_reccomend]","ed8940d0":"# linitializing the Recommender Object\nrecommender = Recommender()  ","dec71532":"# Recommendation based on past watched movies, but the object just initialized. So, therefore no history found\nrecommender.recommend_on_history()    ","48c850f8":"# Recommendation based on this movie \nrecommender.recommend_on_movie('Father of the Bride Part II (1995)')","bd104a29":"# Recommendation based on past watched movies, and this time a movie is there in the history.\nrecommender.recommend_on_history()","6b3255e5":"# Recommendation based on this movie\nrecommender.recommend_on_movie('Tigerland (2000)')","b3eb3df9":"# Recommendation based on past watched movies, and this time two movies is there in the history.\nrecommender.recommend_on_history()","626d87ea":"# Recommendation based on this movie\nrecommender.recommend_on_movie('Dracula')","96f5b201":"# Recommendation based on past watched movies, and this time three movies is there in the history.\nrecommender.recommend_on_history()","ef33e2d1":"# Recommendation based on this movie\nrecommender.recommend_on_movie('Money Train (1995)')","6f14ba55":"# Recommendation based on past watched movies, and this time four movies is there in the history.\nrecommender.recommend_on_history()","b26aa8b9":"# Recommendation based on this movie\nrecommender.recommend_on_movie('GoldenEye (1995)')","a405c586":"# Recommendation based on past watched movies, and this time five movies is there in the history.\nrecommender.recommend_on_history()","165aa872":"from sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(stop_words='english')\ngenres = vectorizer.fit_transform(movies.genres).toarray()\ncontents = pd.DataFrame(genres,columns=vectorizer.get_feature_names())\nprint('Shape of the content table :',contents.shape)\ncontents.head()","290dae3c":"from sklearn.neighbors import NearestNeighbors\nnn_algo = NearestNeighbors(metric='cosine')\nnn_algo.fit(contents)","d6c94f40":"class Recommender:\n    def __init__(self):\n        # This list will stored movies that called atleast ones using recommend_on_movie method\n        self.hist = [] \n        self.ishist = False # Check if history is empty\n    \n    # This method will recommend movies based on a movie that passed as the parameter\n    def recommend_on_movie(self,movie,n_reccomend = 5):\n        self.ishist = True\n        iloc = movies[movies['title']==movie].index[0]\n        self.hist.append(iloc)\n        distance,neighbors = nn_algo.kneighbors([contents.iloc[iloc]],n_neighbors=n_reccomend+1)\n        recommeds = [movies.iloc[i]['title'] for i in neighbors[0] if i not in [iloc]]\n        return recommeds[:n_reccomend]\n    \n    # This method will recommend movies based on history stored in self.hist list\n    def recommend_on_history(self,n_reccomend = 5):\n        if self.ishist == False:\n            return print('No history found')\n        history = np.array([list(contents.iloc[iloc]) for iloc in self.hist])\n        distance,neighbors = nn_algo.kneighbors([np.average(history,axis=0)],n_neighbors=n_reccomend + len(self.hist))\n        recommeds = [movies.iloc[i]['title'] for i in neighbors[0] if i not in self.hist]\n        return recommeds[:n_reccomend]","7a822afa":"# linitializing the Recommender Object\nrecommender = Recommender()  ","49e27361":"# Recommendation based on past watched movies, but the object just initialized. So, therefore no history found\nrecommender.recommend_on_history()    ","6cc99adc":"# Recommendation based on this movie \nrecommender.recommend_on_movie('Father of the Bride Part II (1995)')","5e3b49a7":"# Recommendation based on past watched movies, and this time a movie is there in the history.\nrecommender.recommend_on_history()","62be93d8":"# Recommendation based on this movie\nrecommender.recommend_on_movie('Tigerland (2000)')","05d55502":"# Recommendation based on past watched movies, and this time two movies is there in the history.\nrecommender.recommend_on_history()","a2947512":"# Recommendation based on this movie\nrecommender.recommend_on_movie('Dracula')","b98223c3":"# Recommendation based on past watched movies, and this time three movies is there in the history.\nrecommender.recommend_on_history()","6564b00d":"# Recommendation based on this movie\nrecommender.recommend_on_movie('Money Train (1995)')","7d9d48be":"# Recommendation based on past watched movies, and this time four movies is there in the history.\nrecommender.recommend_on_history()","8bc8cf4f":"# Recommendation based on this movie\nrecommender.recommend_on_movie('GoldenEye (1995)')","53e692ed":"# Recommendation based on past watched movies, and this time five movies is there in the history.\nrecommender.recommend_on_history()","e0e64554":"<b>1) Content-Based Recommendation System :<\/b> It is a type of recommendation system which works on the principle of similar content. If a user is watching a movie, then the system will check about other movies of similar content or the same genre of the movie the user is watching. There are various fundamentals attributes that are used to compute the similarity while checking about similar content. \n\n<b>2) Collaborative Filtering :<\/b> It is considered to be one of the very smart recommender systems that work on the similarity between different users and also items that are widely used as an e-commerce website and also online movie websites. It checks about the taste of similar users and does recommendations. \n\n##### I will used first Collaborative Filtering and then Content Based Filtering to build the same Recommendation Engine.","c958b062":"#### **Pivot Table with respect to ratings given by users to movies**","54277d0a":"### **Types of Recommendation System :**","4426344c":"#### **Developing the class of Content Based filtering Recommendation Engine**","9eee4f9a":"#### **Observation of this Recommendation Engine on some Movies**","29d693ef":"## **What Are Recommendation Systems ?**\n\nRecommender systems are the systems that are designed to recommend things to the user based on many different factors. These systems predict the most likely product that the users are most likely to purchase and are of interest to. Companies like Netflix, Amazon, etc. use recommender systems to help their users to identify the correct product or movies for them. \n\n \n\nThe recommender system deals with a large volume of information present by filtering the most important information based on the data provided by a user and other factors that take care of the user\u2019s preference and interest. It finds out the match between user and item and imputes the similarities between users and items for recommendation. \n\n \n\nBoth the users and the services provided have benefited from these kinds of systems. The quality and decision-making process has also improved through these kinds of systems.\n\nIn this project I will develop a Movie Recommendation Engine on a popular MovieLens Dataset to recommend Ideal Movies to its Ideal viewers. \nLets start this project with importing datasets.","903f89d9":"### **Import Datasets**","734088da":"<br>","688196d1":"<div align='center'><img src='https:\/\/ml8ygptwlcsq.i.optimole.com\/fMKjlhs-GfJ463X-\/w:1000\/h:600\/q:auto\/rt:fill\/g:ce\/https:\/\/www.unite.ai\/wp-content\/uploads\/2020\/08\/RecommendationEngine.png'><\/div>","63817ae3":"#### **Machine Learning Model training for Recommending movies based on movies contents.**","22e5949a":"#### **Developing the class of Collaborative filtering Recommendation Engine**","66f3329a":"\n\n<div align='center'><img src='https:\/\/miro.medium.com\/max\/1313\/1*Qkv3n2Wt9xBmvel_Ee9QGA.png'><\/div>\n\n## **Recommendation System using Collaborative Filtering**\n\n##### This Recommendation System will works like \"people who watching and like this movie also watch and like that movies\".","2af43c08":"# <center> **Movie Recommendation System**","25941121":"# <center> **Thank You**","635a8b79":"<div align='center'><img src='https:\/\/miro.medium.com\/max\/792\/1*P63ZaFHlssabl34XbJgong.jpeg'><\/div>\n\n## **Recommendation System using Content Based Filtering**\n\n##### This Recommendation System will works like \"This movies are similar to the movie you recently watched\".","161d8bf3":"#### **Machine Learning Model training for Recommending movies based on users ratings.**","74c57f46":"#### **Vectorization of contents of movies**","355fbd71":"<div align='center'><img src='https:\/\/miro.medium.com\/max\/998\/1*O_GU8xLVlFx8WweIzKNCNw.png'><\/div>","0e897a1c":"#### **Observation of this Recommendation Engine on some Movies**"}}