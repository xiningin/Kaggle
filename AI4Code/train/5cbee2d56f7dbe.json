{"cell_type":{"552b01e4":"code","c4f3630e":"code","42baac6e":"code","d87cec2c":"code","2b7b611c":"code","8be8573b":"code","83862f31":"code","18d73757":"code","8d36cd17":"code","34a0473d":"code","403198a5":"code","3ea6aadf":"code","e124695d":"code","0fdae462":"code","cc1f7611":"code","227b5dfb":"code","c84fb213":"code","392dcc7d":"code","8e6c5e4c":"markdown","a5318948":"markdown","2ba73728":"markdown","876ccb79":"markdown","105d6694":"markdown","be48582f":"markdown","14281df3":"markdown","e6e6e466":"markdown","e17b1610":"markdown"},"source":{"552b01e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nfrom sklearn import impute\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4f3630e":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","42baac6e":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer()","d87cec2c":"y = train_data[\"Survived\"]\nfeatures = [\"Pclass\", \"SibSp\", \"Parch\"]\nX = train_data[features]","2b7b611c":" X = pd.DataFrame(imputer.fit_transform(X))","8be8573b":"numSex = train_data[\"Sex\"]\nnumSex\n\nfor i in range(len(numSex)): \n    if numSex[i] == \"male\":\n        numSex[i] = 1\n    if numSex[i] == \"female\":\n        numSex[i] = 2\n        \nprint (numSex)","83862f31":"numSex = numSex[:,np.newaxis]\nprint(numSex.shape)","18d73757":"X = np.append(X,numSex,1)\nx0 = np.ones(len(numSex))\nx0 = x0[:,np.newaxis]\nX = np.append(x0,X,1)\nprint(X)","8d36cd17":"import random as ran\ntheta = np.array([])\nrows, col = X.shape\nfor n in range (col):\n    theta= np.append(theta,ran.random())\n                    \nprint (theta)","34a0473d":"def sigmoid (input):\n    return (1\/(1 + np.exp(-input)))","403198a5":"def hypo (X, theta):\n   H = np.array(np.matmul(X, theta))\n   H1 = np.array(np.zeros(len(H)))\n   for j in range(len(H)):\n      H1[j] = sigmoid(H[j])\n  \n   return H1\n    #print (H)","3ea6aadf":"def cost (X,y,theta,rows,lamb):\n   \n    H1 = hypo(X,theta)  \n    J = (-1\/rows) * sum((np.multiply(y,np.log(H1))) +\n                      np.multiply((1-y),np.log(1-H1))) + (lamb\/(2*rows)) * sum(np.square(theta))\n            \n                       \n                 \n    return J","e124695d":"def graddec (X,y,theta,rows,lamb):\n\n    H1 = hypo(X,theta)\n    tlen = len(theta)\n    temp = np.array(np.zeros(tlen))\n    for i in range(tlen):\n       if i == 0:\n          temp[i] = theta[i] - (1\/rows) * sum(np.multiply((H1-y),X[:,i]))\n       else:\n          temp[i] = theta[i] - (1\/rows) * sum(np.multiply((H1-y),X[:,i])) + ((lamb\/rows) * theta[i])\n\n    #theta = temp\n    #print(theta)\n    return temp","0fdae462":"costs = np.empty(0)","cc1f7611":"lamb = 0.05\nfor i in range(150):\n   CurrentCost = cost(X,y,theta,rows,0.05)\n   #print (CurrentCost)\n   costs = np.append(costs,CurrentCost)\n   theta = graddec(X,y,theta,rows,lamb)\n   #print(theta)\n   \n\n\n\nprint(cost(X,y,theta,rows,0.05))\n","227b5dfb":"epoch = list(range(1, 151))\n\nhistory =pd.DataFrame(costs,columns =['cost'])\nhistory.plot()\nplt.xlabel(\"Training cycles\")\nplt.ylabel(\"Cost\")","c84fb213":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nX_test = test_data[features]\nX_test = pd.DataFrame(imputer.transform(X_test))\nTest_sex = test_data[\"Sex\"]\nfor i in range(len(Test_sex)): \n    if Test_sex[i] == \"male\":\n        Test_sex[i] = 1\n    if Test_sex[i] == \"female\":\n        Test_sex[i] = 2\n        \nTest_sex = Test_sex[:,np.newaxis]\nX_test = np.append(X_test,Test_sex,1)\nX0_test = np.ones(len(Test_sex))\nX0_test = X0_test[:,np.newaxis]\nX_test = np.append(X0_test,X_test,1)\n\nY = hypo(X_test,theta)\n\n\n\npredictions = []\n\nfor i in range(len(Y)):\n    if Y[i] >= 0.5:\n        predictions.append(\"1\")\n    else:\n        predictions.append(\"0\")\n        \nprint (predictions)   ","392dcc7d":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8e6c5e4c":"**Cost\/loss function**","a5318948":"**Hypothesis for each example**","2ba73728":"**Gradient descent**","876ccb79":"**Sigmoid function**","105d6694":"**Data manipulation** ","be48582f":"**Converting to array**","14281df3":"**Making predictions**","e6e6e466":"Cost against No. training cycles Graph","e17b1610":"**Create CSV and submission**"}}