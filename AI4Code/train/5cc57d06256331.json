{"cell_type":{"f8e28656":"code","ecb1ebf2":"code","d05aa715":"code","9184b2a1":"code","4334bac5":"code","c2e745e6":"code","edb9b582":"code","df3a71bd":"code","7db7c987":"code","1292ea6d":"code","847a716b":"code","21ca5242":"code","860e9213":"code","f4fee0ab":"code","31c390bb":"code","e9124dc3":"code","975cabf4":"code","e9fdd933":"code","6ff6c399":"code","910e8f41":"code","a5fc0238":"code","b98fd89a":"code","07cd313a":"code","2fe4f88d":"code","5b8dc293":"code","e682bd87":"code","f904be55":"code","6c92a6a7":"code","5722c783":"code","54f36005":"code","bf8a0719":"code","a7336f15":"markdown","ba4b0f44":"markdown","a15b891c":"markdown","52cf67eb":"markdown","78ba94d4":"markdown","eac83b5d":"markdown","36e7378e":"markdown","47273148":"markdown","c9171e70":"markdown","7e61460d":"markdown"},"source":{"f8e28656":"!pip install \"dask[complete]\"","ecb1ebf2":"!pip install dask_image\nimport dask_image.imread\nimport dask_image.ndfilters\nimport dask_image.ndmeasure\nimport dask.array as da","d05aa715":"!pip install scikit-image --upgrade-strategy only-if-needed","9184b2a1":"from keras.models import Model, Sequential\nfrom keras.layers import Activation, Dense, BatchNormalization, Dropout, Conv2D, Conv2DTranspose, MaxPooling2D, UpSampling2D, Input, Reshape\nfrom keras import backend as K\nfrom keras.optimizers import Adam, SGD\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport glob\nimport gc\nimport cv2\nimport PIL\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport cv2\n%matplotlib inline\n\nimport os\nfrom skimage import data, io\n\nfrom sklearn.model_selection import train_test_split\nfrom warnings import filterwarnings\n\nfilterwarnings('ignore')\nplt.rcParams[\"axes.grid\"] = False\nnp.random.seed(101)","4334bac5":"!mkdir temp\n!mkdir temp-test\n!mkdir temp-train","c2e745e6":"filename_pattern = os.path.join('temp', '\/kaggle\/input\/siic-melanoma-384x384-test\/train\/ISIC_*.jpg')\nisic_images = dask_image.imread.imread(filename_pattern)\nprint(isic_images)\n\nfilename_pattern1 = os.path.join('temp-test', '\/kaggle\/input\/siic-melanoma-384x384-test\/test\/ISIC_*.jpg')\nisic_test = dask_image.imread.imread(filename_pattern1)\nprint(isic_test)\n\nfilename_pattern2 = os.path.join('temp-train', '\/kaggle\/input\/siic-melanoma-384x384-test\/train\/ISIC_*.jpg')\nisic_train = dask_image.imread.imread(filename_pattern2)\nprint(isic_train)","edb9b582":"def grayscale(rgb):\n    result = ((rgb[..., 0] * 0.2125) +\n              (rgb[..., 1] * 0.7154) +\n              (rgb[..., 2] * 0.0721))\n    return result","df3a71bd":"from PIL import Image\npixels = []\ni = Image.open(\"\/kaggle\/input\/siic-melanoma-384x384-test\/test\/ISIC_0546632.jpg\").convert(\"LA\") \np = i.load()\nfor b in range(4):\n    block = []\n    for x in range(32):\n        for y in range(32):\n            block.append(p[x,y][0])\n            \n            \n   ","7db7c987":"from PIL import Image\n  \ndef main():\n    try:\n        #Relative Path\n        img = Image.open(\"\/kaggle\/input\/siic-melanoma-384x384-test\/test\/ISIC_0546632.jpg\") \n          \n        #splitting the image\n        print (img.split)\n    except IOError:\n        pass\n  \nif __name__ == \"__main__\":\n    main()","1292ea6d":"from PIL import Image\n  \n# opening a multiband image (RGB specifically)\nim = Image.open(r\"\/kaggle\/input\/siic-melanoma-384x384-test\/test\/ISIC_0546632.jpg\")\n  \n# split() method\n# this will split the image in individual bands\n# and return a tuple\nim1 = Image.Image.split(im)\n  \n# showing each band\nim1[0].show()\nim1[1].show()\nim1[2].show()","847a716b":"fig, ax = plt.subplots(nrows=2, ncols=2)\nax[0,0].imshow(im1[0])\nax[0,1].imshow(im1[1])\nax[1,0].imshow(im1[2])\nplt.show()\n","21ca5242":"from skimage import data\nfrom skimage import color\nfrom skimage.util import view_as_blocks\n\n# get astronaut from skimage.data in grayscale\nl = color.rgb2gray(data.astronaut())\n\n# size of blocks\nblock_shape = (4, 4)\n\n# see astronaut as a matrix of blocks (of shape block_shape)\nview = view_as_blocks(l, block_shape)\n\n# collapse the last two dimensions in one\nflatten_view = view.reshape(view.shape[0], view.shape[1], -1)\n\nprint(flatten_view.shape)","860e9213":"!mkdir temp-tiles1","f4fee0ab":"mkdir temp-tiles","31c390bb":"!ls temp-tiles","e9124dc3":"fig, ax = plt.subplots(nrows=2, ncols=2)\nax[0,0].imshow(isic_images[0])\nax[0,1].imshow(isic_images[1])\nax[1,0].imshow(isic_images[2])\nax[1,1].imshow(isic_images[3])\nplt.show()","975cabf4":"def grayscale(rgb):\n    result = ((rgb[..., 0] * 0.2125) +\n              (rgb[..., 1] * 0.7154) +\n              (rgb[..., 2] * 0.0721))\n    return result","e9fdd933":"import os\nfilename = os.path.join('temp-tiles', '\/kaggle\/input\/siic-melanoma-384x384-test\/test\/ISIC_0546632.jpg')\nprint(filename)","6ff6c399":"isic_test = dask_image.imread.imread(filename)\nprint(isic_test)\nplt.imshow(isic_test[0, ...])","910e8f41":"single_image_result = grayscale(isic_test)\nprint(single_image_result)\nsingle_image_result.visualize()","a5fc0238":"print(\"Original image dimensions: \", isic_test.shape)\nprint(\"Processed image dimensions:\", single_image_result.shape)\n\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2)\nax0.imshow(isic_test[0, ...])            # display the first (and only) frame of the image\nax1.imshow(single_image_result[0, ...], cmap='gray')  # display the first (and only) frame of the image\n\n# Subplot headings\nax0.set_title('Original image')\nax1.set_title('Processed image')\n\n# Don't display axes\nax0.axis('off')\nax1.axis('off')\n\n# Display images\nplt.show(fig)","b98fd89a":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('\/kaggle\/input\/siic-melanoma-384x384-test\/test\/ISIC_0546632.jpg')\n\nblur = cv2.GaussianBlur(img,(5,5),0)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()","07cd313a":"img = cv2.imread('\/kaggle\/input\/siic-melanoma-384x384-test\/test\/ISIC_0546632.jpg')\n\nblur = cv2.GaussianBlur(img,(5,5),0)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()","2fe4f88d":"plt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nplt.imshow(isic_test[0])\nplt.xlabel(\"Dimensions: \"+str(np.array(isic_test[0]).shape))\nplt.subplot(1,2,2)\nplt.imshow(isic_train[0], plt.cm.binary_r)\nplt.xlabel(\"Dimensions: \"+str(np.array(isic_train[0]).shape))\nplt.show()","5b8dc293":"!pip install dask_ml","e682bd87":"import dask_ml.datasets\nimport dask_ml.cluster\nimport matplotlib.pyplot as plt","f904be55":"from dask.distributed import Client\nclient = Client(n_workers=4, threads_per_worker=1)\nclient","6c92a6a7":"import dask.array as da\nfrom dask_ml.datasets import make_classification\n\n\nn, d = 100000, 100\n\nX, y = make_classification(n_samples=n, n_features=d,\n                           chunks=n \/\/ 10, flip_y=0.2)\nX","5722c783":"from dask_ml.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nX_train","54f36005":"threshold_value = 0.75 * da.max(isic_test).compute()\nprint(threshold_value)","bf8a0719":"label_image, num_labels = dask_image.ndmeasure.label(threshold_image)","a7336f15":"### Learning Outcome\n\n* Analysing images on a single desktop using dask\n* Preprocessing of image dataset","ba4b0f44":"> We could notice the difference in the dimension by placing the images side by side ","a15b891c":"Preprocessing of images is like data cleaning for tabular data.\n\n","52cf67eb":"### **References**\n\n* https:\/\/docs.dask.org\/en\/latest\/why.html\n* https:\/\/examples.dask.org\/applications\/image-processing.html#Setting-up-your-environment\n* https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification","78ba94d4":"### Importing the libraries","eac83b5d":"![image.png](attachment:26316104-3829-4733-9f91-abda2c67ea86.png)![image.png](attachment:bde69095-b9e1-4aaa-b68c-ac49898439da.png)\n\n[https:\/\/dask.org\/](http:\/\/)\n","36e7378e":"### About the dataset\n\nThe datasets was publicly made available by Kaggle but provided by the International Skin Imaging Collaboration (ISIC), funded by the International Society for Digital Imaging of the Skin, is an international initiative to improve melanoma diagnosis (ISDIS). The ISIC Archive houses the world's largest collection of high-resolution dermoscopic photographs of skin lesions. \nThe datasets can be downloaded from this link\n[https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification](http:\/\/)\n","47273148":"**Taking a bitchunk of the images and analysing it**","c9171e70":"### Why did I choose to use Dask?\n\nDask enables natural scaling of Pandas, Scikit-Learn, and Numpy workflows with little rewriting when dealing with large datasets with a single computer. It works effectively with these tools, copying the majority of their API and internal data structures. Furthermore, Dask collaborates with these libraries to guarantee that they progress in a consistent manner, reducing friction when moving from a local laptop to a multi-core workstation, and finally to a distributed cluster. ","7e61460d":"Splitting one of the isic image into 4 non-overlapping tiles for segmentation purpose\n"}}