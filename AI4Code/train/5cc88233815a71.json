{"cell_type":{"55663b49":"code","4813611f":"code","a01c2112":"code","fad4d621":"code","3f79d91a":"code","b1b77555":"code","615e592d":"code","61a11161":"code","d8b2edc0":"code","dbb15842":"code","749aee99":"code","395451dc":"code","e789c3d6":"code","1571b732":"code","8f142300":"code","25f76644":"code","8c429023":"code","03cdece2":"code","399de4d0":"code","459fc3b0":"code","07b7366d":"code","4d159810":"code","1669aab6":"code","f63f3d04":"code","247b3985":"code","1a2f273c":"code","60aba9db":"code","ea797ab0":"code","b4012c49":"code","8abb0ca7":"code","b23966d4":"code","06f7735f":"code","1ce19173":"code","b75e6204":"code","a6a28dce":"code","aa6c79d4":"code","cd8d5f16":"code","dd186347":"code","14982122":"code","55528b1e":"code","fb39188a":"code","afc3f098":"code","b0ec0488":"code","95f3e3a0":"markdown","d5670709":"markdown","12aeb2ed":"markdown","bb869901":"markdown","033b1551":"markdown","3665c3c9":"markdown","0876177d":"markdown","2ce3d144":"markdown","d49af7fd":"markdown","d0bacec7":"markdown","756c63a2":"markdown","dafe35b8":"markdown","0d863909":"markdown","c0c7a0c7":"markdown","4d2d9f3f":"markdown","cf96832f":"markdown","81a1e93b":"markdown","588ba4fd":"markdown","be9446a3":"markdown","902f40f1":"markdown","c44914c4":"markdown","9430c257":"markdown","4f24fd13":"markdown","166f67a2":"markdown","dede9154":"markdown","7efbf0e8":"markdown"},"source":{"55663b49":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4813611f":"import plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=False)\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\nimport plotly_express as px\nfrom wordcloud import WordCloud\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom gensim.models import Word2Vec\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Dropout, LSTM, GlobalMaxPool1D, Activation\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.snowball import PorterStemmer\nfrom sklearn import preprocessing","a01c2112":"zomato_data = pd.read_csv('\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv')\nzomato_data.head()","fad4d621":"zomato_data.shape","3f79d91a":"total_of_all = zomato_data.isnull().sum().sort_values(ascending=False)\npercent_of_all = (zomato_data.isnull().sum()\/zomato_data.isnull().count()).sort_values(ascending=False)\nmissing_data_test = pd.concat([total_of_all, percent_of_all], axis=1, keys=['Total', 'Percent'])\nmissing_data_test.head(10)","b1b77555":"# Deleting Unnnecessary Columns\n\nzomato_data = zomato_data.drop(['url','dish_liked','phone'], axis=1)","615e592d":"# Replace New by NaN\n\nzomato_data[\"rate\"] = zomato_data[\"rate\"].replace(\"NEW\", np.nan)\nzomato_data.dropna(how=\"any\", inplace=True)","61a11161":"# Changing the data type from approx_cost columns\n\nzomato_data['approx_cost'] = zomato_data['approx_cost(for two people)'].astype(str).apply(lambda x: x.replace(',', ''))\nzomato_data['approx_cost'] = zomato_data['approx_cost'].astype(float)","d8b2edc0":"all_ratings = []\n\nfor name,ratings in tqdm(zip(zomato_data['name'],zomato_data['reviews_list'])):\n    ratings = eval(ratings)\n    for score, doc in ratings:\n        if score:\n            score = score.strip(\"Rated\").strip()\n            doc = doc.strip('RATED').strip()\n            score = float(score)\n            all_ratings.append([name,score, doc])","dbb15842":"zomato_rating_data = pd.DataFrame(all_ratings,columns=['name','rating','review'])\nzomato_rating_data['review'] = zomato_rating_data['review'].apply(lambda x : re.sub('[^a-zA-Z0-9\\s]',\"\",x))","749aee99":"# most common type of restaurants \n\nrestaurants_type_analysis = pd.DataFrame(zomato_data['rest_type'].value_counts().sort_values(ascending=False))\nrestaurants_type_analysis = restaurants_type_analysis.rename(columns={'rest_type':'count'})\n\ntrace = go.Bar(x = restaurants_type_analysis.index[:15],\n              y = restaurants_type_analysis['count'][:15],\n              marker = dict(color='rgba(125, 215, 180, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top 15 restaurants Type\",\n                  xaxis=dict(title='Type of restaurant',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Counts',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","395451dc":"franchises_analysis = pd.DataFrame(zomato_data['name'].value_counts().sort_values(ascending=False))\nfranchises_analysis = franchises_analysis.rename(columns={'name':'count'})\n\ntrace = go.Bar(x = franchises_analysis.index[:15],\n              y = franchises_analysis['count'][:15],\n              marker = dict(color='rgba(150, 200, 100, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Franchises of Bangluru\",\n                  xaxis=dict(title='Franchises Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Counts',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e789c3d6":"location_analysis = pd.DataFrame(zomato_data['location'].value_counts().sort_values(ascending=False))\nlocation_analysis = location_analysis.rename(columns={'location':'count'})\n\ntrace = go.Bar(x = location_analysis.index[:15],\n              y = location_analysis['count'][:15],\n              marker = dict(color='rgba(125, 115, 180, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Locations\",\n                  xaxis=dict(title='Location Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency of Restaurants',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1571b732":"trace = go.Pie(labels=['yes', 'No',], values=zomato_data['online_order'].value_counts())\ndata = [trace]\nlayout = go.Layout(title='Accepting vs Not Accepting online orders')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8f142300":"trace = go.Pie(labels=['yes', 'No',], values=zomato_data['book_table'].value_counts())\ndata = [trace]\nlayout = go.Layout(title='Booking of Table vs No Booking of Table')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","25f76644":"zomato_data['rate'] = zomato_data['rate'].astype(str).apply(lambda x: x.split('\/')[0])\nwhile True:\n    try:\n        zomato_data['rate'] = zomato_data['rate'].astype(float)\n        break\n    except ValueError as e1:\n        noise_entry = str(e1).split(\":\")[-1].strip().replace(\"'\", \"\")\n        print(f'Threating noisy entrance on rate: {noise_entry}')\n        zomato_data['rate'] = zomato_data['rate'].apply(lambda x: x.replace(noise_entry, str(np.nan)))","8c429023":"high_rating_yes = zomato_data[(zomato_data[\"rate\"] >= 4.5) & (zomato_data[\"online_order\"] == \"Yes\")]\nhigh_rating_no = zomato_data[(zomato_data[\"rate\"] >= 4.5) & (zomato_data[\"online_order\"] == \"No\")]\n\nmedium_rating_yes = zomato_data[(zomato_data[\"rate\"] >= 3.5) & (zomato_data[\"rate\"] <= 4.4) & (zomato_data[\"online_order\"] == \"Yes\")]\nmedium_rating_no = zomato_data[(zomato_data[\"rate\"] >= 3.5) & (zomato_data[\"rate\"] <= 4.4) & (zomato_data[\"online_order\"] == \"No\")]\n\nlow_rating_yes = zomato_data[(zomato_data[\"rate\"] < 3.5) & (zomato_data[\"online_order\"] == \"Yes\")]\nlow_rating_no = zomato_data[(zomato_data[\"rate\"] < 3.5) & (zomato_data[\"online_order\"] == \"No\")]","03cdece2":"top_rating_yes = pd.DataFrame(high_rating_yes['name'].value_counts().sort_values(ascending=False))\ntop_rating_yes = top_rating_yes.rename(columns={'name':'count'})\n\ntrace = go.Bar(x = top_rating_yes.index[:15],\n              y = top_rating_yes['count'][:15],\n              marker = dict(color='rgba(250, 200, 150, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Rating Frenchises with online order\",\n                  xaxis=dict(title='Frenchises Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","399de4d0":"top_rating_no = pd.DataFrame(high_rating_no['name'].value_counts().sort_values(ascending=False))\ntop_rating_no = top_rating_no.rename(columns={'name':'count'})\n\ntrace = go.Bar(x = top_rating_no.index[:15],\n              y = top_rating_no['count'][:15],\n              marker = dict(color='rgba(200, 180, 250, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Rating Frenchises without online order\",\n                  xaxis=dict(title='Frenchises Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","459fc3b0":"lower_rating_no = pd.DataFrame(low_rating_no['name'].value_counts().sort_values(ascending=False))\nlower_rating_no = lower_rating_no.rename(columns={'name':'count'})\n\ntrace = go.Bar(x = lower_rating_no.index[:15],\n              y = lower_rating_no['count'][:15],\n              marker = dict(color='rgba(200, 50, 70, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Low Rating Frenchises without online order\",\n                  xaxis=dict(title='Frenchises Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","07b7366d":"lower_rating_yes = pd.DataFrame(low_rating_yes['name'].value_counts().sort_values(ascending=False))\nlower_rating_yes = lower_rating_yes.rename(columns={'name':'count'})\n\ntrace = go.Bar(x = lower_rating_yes.index[:15],\n              y = lower_rating_yes['count'][:15],\n              marker = dict(color='rgba(100, 50, 270, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Low Rating Frenchises with online order\",\n                  xaxis=dict(title='Frenchises Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","4d159810":"# low budget restaurent\nlow_budget = zomato_data.groupby(['name','rest_type','cuisines', 'rate', 'reviews_list'])['approx_cost'].sum().sort_values(ascending=True).reset_index()\nlow_budget = low_budget[low_budget[\"approx_cost\"] <= 1000]\n\n# mid budget restaurent\nmid_budget = zomato_data.groupby(['name','rest_type','cuisines', 'rate', 'reviews_list'])['approx_cost'].sum().sort_values(ascending=True).reset_index()\nmid_budget = mid_budget[(mid_budget[\"approx_cost\"] > 1000) & (mid_budget[\"approx_cost\"] <= 3000)]\n\n# High budget restaurent\nhigh_budget = zomato_data.groupby(['name','rest_type','cuisines',  'rate', 'reviews_list'])['approx_cost'].sum().sort_values(ascending=True).reset_index()\nhigh_budget = high_budget[(high_budget[\"approx_cost\"] > 3000) & (high_budget[\"approx_cost\"] <= 6000)]","1669aab6":"low_budget_cuisines = pd.DataFrame(low_budget['cuisines'].value_counts().sort_values(ascending=False))\nlow_budget_cuisines = low_budget_cuisines.rename(columns={'cuisines':'count'})\n\n\ntrace = go.Bar(x = low_budget_cuisines.index[:15],\n              y = low_budget_cuisines['count'][:15],\n              marker = dict(color='rgba(200, 150, 270, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Low Budget Cuisines\",\n                  xaxis=dict(title='Cuisines Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","f63f3d04":"low_budget_rest_type = pd.DataFrame(low_budget['rest_type'].value_counts().sort_values(ascending=False))\nlow_budget_rest_type = low_budget_rest_type.rename(columns={'rest_type':'count'})\n\n\ntrace = go.Bar(x = low_budget_rest_type.index[:15],\n              y = low_budget_rest_type['count'][:15],\n              marker = dict(color='rgba(120, 150, 120, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Low Budget Restaurant type\",\n                  xaxis=dict(title='Restaurant type',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","247b3985":"low_budget_rest_name = pd.DataFrame(low_budget['name'].value_counts().sort_values(ascending=False))\nlow_budget_rest_name = low_budget_rest_name.rename(columns={'name':'count'})\n\n\ntrace = go.Bar(x = low_budget_rest_name.index[:15],\n              y = low_budget_rest_name['count'][:15],\n              marker = dict(color='rgba(50, 130, 90, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Low Budget Restaurant\",\n                  xaxis=dict(title='Restaurant Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1a2f273c":"medium_budget_cuisines = pd.DataFrame(mid_budget['cuisines'].value_counts().sort_values(ascending=False))\nmedium_budget_cuisines = medium_budget_cuisines.rename(columns={'cuisines':'count'})\n\n\ntrace = go.Bar(x = medium_budget_cuisines.index[:15],\n              y = medium_budget_cuisines['count'][:15],\n              marker = dict(color='rgba(150, 130, 90, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Medium Budget Cuisines\",\n                  xaxis=dict(title='Cuisines Name',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\nfig.update_layout(\n    autosize=False,\n    width=1200,\n    height=700,)\niplot(fig)","60aba9db":"medium_budget_rest_type = pd.DataFrame(mid_budget['rest_type'].value_counts().sort_values(ascending=False))\nmedium_budget_rest_type = medium_budget_rest_type.rename(columns={'rest_type':'count'})\n\n\ntrace = go.Bar(x = medium_budget_rest_type.index[:15],\n              y = medium_budget_rest_type['count'][:15],\n              marker = dict(color='rgba(120, 145, 170, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Medium Budget Restaurant types\",\n                  xaxis=dict(title='Restaurant Type',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","ea797ab0":"medium_budget_rest_name = pd.DataFrame(mid_budget['name'].value_counts().sort_values(ascending=False))\nmedium_budget_rest_name = medium_budget_rest_name.rename(columns={'name':'count'})\n\n\ntrace = go.Bar(x = medium_budget_rest_name.index[:15],\n              y = medium_budget_rest_name['count'][:15],\n              marker = dict(color='rgba(190, 15, 70, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top Medium Budget Restaurant Names\",\n                  xaxis=dict(title='Restaurant Names',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","b4012c49":"high_budget_cuisines = pd.DataFrame(high_budget['cuisines'].value_counts().sort_values(ascending=False))\nhigh_budget_cuisines = high_budget_cuisines.rename(columns={'cuisines':'count'})\n\n\ntrace = go.Bar(x = high_budget_cuisines.index[:15],\n              y = high_budget_cuisines['count'][:15],\n              marker = dict(color='rgba(90, 135, 160, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top High Budget Cuisines Names\",\n                  xaxis=dict(title='Cuisines Names',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","8abb0ca7":"high_budget_rest_type = pd.DataFrame(high_budget['rest_type'].value_counts().sort_values(ascending=False))\nhigh_budget_rest_type = high_budget_rest_type.rename(columns={'rest_type':'count'})\n\n\ntrace = go.Bar(x = high_budget_rest_type.index[:15],\n              y = high_budget_rest_type['count'][:15],\n              marker = dict(color='rgba(90, 185, 10, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top High Budget Restaurant Type\",\n                  xaxis=dict(title='Restaurant Type',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","b23966d4":"high_budget_rest_name = pd.DataFrame(high_budget['name'].value_counts().sort_values(ascending=False))\nhigh_budget_rest_name = high_budget_rest_name.rename(columns={'name':'count'})\n\n\ntrace = go.Bar(x = high_budget_rest_name.index[:15],\n              y = high_budget_rest_name['count'][:15],\n              marker = dict(color='rgba(90, 185, 140, 0.5)',\n              line = dict(color='rgb(0,0,0)', width=1.5)))\n\nlayout = go.Layout(title=\"Top High Budget Restaurant Name\",\n                  xaxis=dict(title='Restaurant Names',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis=dict(title='Frequency',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font=dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)')\n)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\nfig.update_layout(\n    autosize=False,\n    width=1200,\n    height=700,)\niplot(fig)","06f7735f":"# sentimental analysis if review is greater than 3 then positive else negative\n\nzomato_rating_data['sentiment'] = zomato_rating_data['rating'].apply(lambda x: 'positive' if int(x)>3 else 'negative')","1ce19173":"zomato_rating_data.head()","b75e6204":"review_text = []\nfor i in zomato_rating_data['review']:\n    review_text.append(i.split())\nprint(review_text[:2])","a6a28dce":"w2vz_model = Word2Vec(review_text, size=50, workers=32, window=3, min_count=1)\nprint(w2vz_model)","aa6c79d4":"zomato_token = Tokenizer(24512)\nzomato_token.fit_on_texts(zomato_rating_data['review'])\nzomato_review = zomato_token.texts_to_sequences(zomato_rating_data['review'])\nzomato_review = pad_sequences(zomato_review)","cd8d5f16":"label = preprocessing.LabelEncoder()\ny = label.fit_transform(zomato_rating_data['sentiment'])\ny = to_categorical(y)\nprint(y[:5])","dd186347":"X_train, X_test, y_train, y_test = train_test_split(np.array(zomato_review), y, test_size=0.2, stratify=y)","14982122":"model = Sequential()\nmodel.add(w2vz_model.wv.get_keras_embedding(True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(GlobalMaxPool1D())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(50))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\nmodel.compile(loss='categorical_crossentropy', metrics=['acc'], optimizer='adam')\nmodel.summary()","55528b1e":"model.fit(X_train, y_train, batch_size=1024, epochs=2, validation_data=(X_test, y_test))","fb39188a":"labels = label.classes_\nprint(labels)","afc3f098":"# check prediction\n\npredicted = model.predict(X_test)","b0ec0488":"for i in range(40,60,2):\n    print(zomato_rating_data['review'].iloc[i][:50], \"...\")\n    print(\"Actual category: \", labels[np.argmax(y_test[i])])\n    print(\"predicted category: \", labels[np.argmax(predicted[i])])","95f3e3a0":"# **If you found this kernel helpful, please upvote it**","d5670709":"# **Exploratory Data Analysis**","12aeb2ed":"**Read the data**","bb869901":"**Initiate Word2vec model**","033b1551":"**Label encoding of Sentiments**","3665c3c9":"**Top High rated restaurants that with accepting online order and with out accepting online order**","0876177d":"**Top locations that have most no. of restaurants**","2ce3d144":"**Most common types of restaurants in Bangluru**","d49af7fd":"**Let's see shape of the data**","d0bacec7":"**Popular Franchises in Bangluru**","756c63a2":"**how many restaurant that accepts Book Table and how many do not Book Table**","dafe35b8":"**Tokenize the data**","0d863909":"**Low Budgest restaurant type, name and cuisines**","c0c7a0c7":"**how many restaurant that accepts online order and how many do not accept online order**","4d2d9f3f":"# **About Dataset**","cf96832f":"# **Data Modeling**","81a1e93b":"**The basic idea of analyzing the Zomato dataset is to get a fair idea about the factors affecting the establishment\nof different types of restaurant at different places in Bengaluru, aggregate rating of each restaurant, Bengaluru\nbeing one such city has more than 12,000 restaurants with restaurants serving dishes from all over the world.**","588ba4fd":"# **Budget Analysis**","be9446a3":"**Let's check for missing values**","902f40f1":"**Medium Budgest restaurant type, name and cuisines**","c44914c4":"**Train Test spliting of Data**","9430c257":"**Top Low rated restaurants that with accepting online order and with out accepting online order**","4f24fd13":"# **Include Libraries**","166f67a2":"**Build Keras Sequential model**","dede9154":"# **Online Order(Yes \/ No) wise Rating Restaurants**","7efbf0e8":"**High Budgest restaurant type, name and cuisines**"}}