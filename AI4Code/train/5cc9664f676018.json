{"cell_type":{"bbdff8a6":"code","68700fe4":"code","880141a9":"code","2b767a07":"code","e5978aaa":"code","2dad98be":"code","188d459e":"code","2a642cfd":"code","e4fb6826":"code","3eec65eb":"code","5ec8ba1e":"code","516d0ab5":"code","173e68ed":"code","116c9d4b":"code","1e41e25b":"code","76e1f51b":"code","ae04921d":"code","b489ef99":"code","e0d66aec":"code","03e2a257":"code","8130357e":"code","137b8919":"code","c66cfa7e":"code","d24bea71":"code","eef494da":"code","f3bfcdd8":"code","12b11a79":"code","ab5226ed":"code","86f833f1":"code","9871c102":"code","af1cb5a9":"code","9aee70eb":"code","40654ebf":"code","e8ffcd3d":"code","373a36d2":"code","b5e2df40":"code","00f4dd04":"code","d4ca6896":"code","9c3b8310":"code","ef9935bb":"code","373a5433":"code","37002567":"code","112ae0e0":"code","a2ffefc5":"code","b4064804":"code","5812d0c7":"code","2e75a0a1":"code","2bf56927":"code","18ad8510":"markdown"},"source":{"bbdff8a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68700fe4":"print('Hello World')","880141a9":"df = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndf.to_csv('submission.csv', index=False)","2b767a07":"# import training data, test data and sample submit data\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","e5978aaa":"train.head(0)","2dad98be":"print(train.shape)\nprint(test.shape)\nprint(gender_submission.shape)","188d459e":"print(train.columns)\nprint('-' * 10)\nprint(test.columns)","2a642cfd":"train.info()","e4fb6826":"test.info()","3eec65eb":"train.head()","5ec8ba1e":"train.isnull().sum()","516d0ab5":"# concat\u3000train and test\ndf_full = pd.concat([train, test], axis=0, sort=False)\nprint(df_full.shape) #count the number of column and row of df_full\ndf_full.describe() ","173e68ed":"# specify\u3000from 10% to 90% by 10% at percentiles\ndf_full.describe(percentiles = [.1, .2, .3, .4, .5, .6, .7, .8, .9])","116c9d4b":"df_full.describe(include='O')","1e41e25b":"from pandas_profiling import ProfileReport\nimport pandas_profiling as pdp\nprofile = pdp.ProfileReport(train) \nprofile","76e1f51b":"import matplotlib.pyplot as plt\nimport seaborn as sns","ae04921d":"sns.countplot(x='Survived', data=train)\nplt.title('the number of who survived and dead')\nplt.xticks([0, 1], ['dead', 'survived'])\nplt.show","b489ef99":"display(train['Survived'].value_counts())\ndisplay(train['Survived'].value_counts()\/len(train['Survived']))","e0d66aec":"sns.countplot(x='Sex', hue='Survived', data=train)\nplt.title('the number of servived separated by sex')\nplt.legend(['dead', 'survived'])\nplt.show()","03e2a257":"display(pd.crosstab(train[\"Sex\"], train['Survived']))\ndisplay(pd.crosstab(train['Sex'], train['Survived'], normalize='index'))","8130357e":"sns.countplot(x='Pclass', hue='Survived', data=train)\nplt.title('the number of survived and dead separated by class')\nplt.legend(['dead', 'survived'])\nplt.show()","137b8919":"display(pd.crosstab(train['Pclass'], train['Survived']))\ndisplay(pd.crosstab(train['Pclass'], train['Survived'], normalize='index'))","c66cfa7e":"sns.distplot(train['Age'].dropna(), kde=False, bins=30, label='whole')\nsns.distplot(train[train['Survived'] == 0].Age.dropna(), kde=False, bins=30, label='dead')\nsns.distplot(train[train['Survived'] == 1].Age.dropna(), kde=False, bins=30, label='survived')\nplt.title('Age distribution of passengers')\nplt.legend()\n# kde is nani\n","d24bea71":"train['CategoricalAge'] = pd.cut(train['Age'], 8)\ndisplay(pd.crosstab(train['CategoricalAge'], train['Survived']))\ndisplay(pd.crosstab(train['CategoricalAge'], train['Survived'], normalize='index'))","eef494da":"sns.countplot(x='SibSp', data=train)\nplt.title('the number of family members')","f3bfcdd8":"train['SibSp_0_1_2over'] = [i if i <= 1 else 2 for i in train['SibSp']]","12b11a79":"sns.countplot(x='SibSp_0_1_2over', hue='Survived', data=train)\nplt.legend(['dead', 'survived'])\nplt.xticks([0, 1, 2], ['on one', '1 person', 'over 2 persons'])\nplt.title('the number of survived or dead separated by the number of family members')\nplt.show()","ab5226ed":"display(pd.crosstab(train['SibSp_0_1_2over'], train['Survived']))\ndisplay(pd.crosstab(train['SibSp_0_1_2over'], train['Survived'], normalize='index'))","86f833f1":"sns.countplot(x='Parch', data=train)\nplt.title('the number of Number of parents or children riding with passengers')","9871c102":"train['Parch_0_1_2_3over'] = [i if i <= 2 else 3 for i in train['Parch']]","af1cb5a9":"sns.countplot(x='Parch_0_1_2_3over', hue='Survived', data=train)\nplt.legend(['dead', 'survived'])\nplt.xticks([0, 1, 2, 3], ['on one', '1 person', '2 persons', 'over 3 persons'])\nplt.xlabel('Parch')\nplt.show()","9aee70eb":"display(pd.crosstab(train['Parch_0_1_2_3over'], train['Survived']))\ndisplay(pd.crosstab(train['Parch_0_1_2_3over'], train['Survived'], normalize='index'))","40654ebf":"# + 1 is one's self. SibSp + Parch is the number of family ride with passenger.\ntrain['FamilySize'] = train['SibSp'] + train['Parch'] + 1","e8ffcd3d":"train['IsAlone'] = 0\ntrain.loc[train['FamilySize'] >= 2, 'IsAlone'] = 1","373a36d2":"sns.countplot(x='IsAlone', hue='Survived', data=train)\nplt.xticks([0, 1], ['1 person', 'over 2 persons'])\nplt.legend(['dead', 'survived'])\nplt.title('one or over 2 persons')\nplt.show()","b5e2df40":"display(pd.crosstab(train['IsAlone'], train['Survived']))\ndisplay(pd.crosstab(train['IsAlone'], train['Survived'], normalize='index'))","00f4dd04":"sns.distplot(train['Fare'].dropna(), kde=False, hist=True)\nplt.title('fare distribution')","d4ca6896":"train['CategoricalFare'] = pd.qcut(train['Fare'], 4)\ntrain[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean()","9c3b8310":"display(pd.crosstab(train['CategoricalFare'], train['Survived']))\ndisplay(pd.crosstab(train['CategoricalFare'], train['Survived'], normalize='index'))","ef9935bb":"train['Name'][0:5]","373a5433":"set(train.Name.str.extract('([A-Za-z]+)\\.', expand=False))","37002567":"train.Name.str.extract('([A-Za-z]+)\\.', expand=False).value_counts()","112ae0e0":"train['Title'] =train.Name.str.extract('([A-Za-z]+)\\.', expand=False)\ntrain.groupby('Title').mean()['Age']","a2ffefc5":"def title_to_num(title):\n    if title == 'Master':\n        return 1\n    elif title == 'Miss':\n        return 2\n    elif title == 'Mr':\n        return 3\n    elif title == 'Mrs':\n        return 4\n    else:\n        return 5","b4064804":"test['Title'] = test.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n\ntrain['Title_num'] = [title_to_num(i) for i in train['Title']]\ntest['Title_num'] = [title_to_num(i) for i in test['Title']]","5812d0c7":"train = pd.get_dummies(train, columns=['Sex', 'Embarked'])\ntest = pd.get_dummies(test, columns=['Sex', 'Embarked'])","2e75a0a1":"train.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)","2bf56927":"# show train\ndisplay(train.head())","18ad8510":"# Preprocessing"}}