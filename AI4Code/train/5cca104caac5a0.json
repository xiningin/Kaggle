{"cell_type":{"edf5e5a2":"code","bd774368":"code","557a59b6":"code","c8d51b58":"code","32c67868":"code","828918dc":"code","276d98b9":"code","91280b5a":"code","7c4fe264":"code","2251de52":"code","2ef1e241":"code","41eaf2c6":"code","f9faa0d7":"code","e3319d25":"code","1ac0aedb":"code","da76c9ec":"code","ffb1797d":"code","cd058aac":"code","82774f26":"code","0dbc7d7b":"code","8c8f77b1":"code","85428be1":"code","552125f5":"code","78ac53ce":"code","27704606":"code","7540c0d9":"code","babc0f01":"code","01b73e73":"code","741cb32e":"markdown","4975913c":"markdown","21e63397":"markdown","51edc4e5":"markdown","5723b4b3":"markdown","aa0ab4bb":"markdown","e6b87d76":"markdown","35186186":"markdown","4af53aef":"markdown","c5ab501f":"markdown","c05f1208":"markdown","6643cbb1":"markdown"},"source":{"edf5e5a2":"# Loading necessary packages:\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport calendar\n%matplotlib inline\nimport csv\nfrom pandas import DataFrame\nimport warnings\nwarnings.filterwarnings('ignore')\nimport datetime\nsns.set(style=\"white\", color_codes=True)\ndateparse = lambda x: datetime.datetime.strptime(x,'%Y-%m-%d %H:%M:%S')","bd774368":"# Importing data\ndf = pd.read_csv('..\/input\/911.csv')","557a59b6":"# Getting necessary info from the data:\ndf.info()","c8d51b58":"for i in df.columns:\n    print(i, \"\\t\", df.loc[:, i].isnull().sum()\/len(df))\n# Since one of the columns (zip code) has almost 12% of missing values, I am not going to use that for further analysis.","32c67868":"reason = np.unique(df['title'])\nreason.size","828918dc":"df['type'] = df[\"title\"].apply(lambda x: x.split(':')[0])\ndf[\"type\"].value_counts()\n\n# The highest being EMS","276d98b9":"# Plotting the reasons(categories) for 911 calls:\n\n# adding 'Reasons' column in main df\ndf['Reason'] = df['title'].apply(lambda x: x.split(':')[0])\ndf.head()\n\n# Frequencies of each reason\nsns.countplot(x='Reason',data=df,palette='cubehelix')\n","91280b5a":"# Pie chart depicting three main reasons(categories) of call:\n\nlabels = 'EMS', 'Traffic', 'Fire'\nsizes =  161441,116065,48919\n\ncolors = ['gold', 'yellowgreen', 'lightcoral']\nexplode = (0.1, 0.1, 0.1)  # explode 1st slice\n \nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\n \nplt.axis('equal')\nplt.show()","7c4fe264":"df2 = df['title'].value_counts().head(5)\ndf2","2251de52":"# Makeing category and sub-category column for each emergency:\ndf['Category'] = df['title'].apply(lambda x: x.split(':')[0])\ndf['Sub-Category'] = df['title'].apply(lambda x: ''.join(x.split(':')[1]))","2ef1e241":"df[df['Category'] == 'EMS']['Sub-Category'].value_counts().head(5)","41eaf2c6":"df[df['Category'] == 'Fire']['Sub-Category'].value_counts().head(5)","f9faa0d7":"df[df['Category'] == 'Traffic']['Sub-Category'].value_counts().head(5)","e3319d25":"df[df['Category'] == 'EMS']['twp'].value_counts().head(10)","1ac0aedb":"# Plotting the top ten EMS call towns with frequencies:\nplt.figure(figsize = (10,5))\nplt.title('Top places for EMS category')\nsns.countplot('twp', data = df[(df['Category'] == 'EMS') & (df['twp'].isin(['NORRISTOWN', 'LOWER MERION', 'ABINGTON',\n                                                              'POTTSTOWN', 'LOWER PROVIDENCE', 'UPPER MERION', \n                                                              'CHELTENHAM', 'UPPER MORELAND', 'HORSHAM', \n                                                              'PLYMOUTH']))], palette = 'cubehelix')\nplt.xticks(rotation = 60)","da76c9ec":"df[df['Category'] == 'Fire']['twp'].value_counts().head(10)","ffb1797d":"# Plotting the top ten Fire call towns with frequencies:\nplt.figure(figsize = (10,5))\nplt.title('Top places for Fire category')\nsns.countplot('twp', data = df[(df['Category'] == 'Fire') & (df['twp'].isin(['LOWER MERION', 'ABINGTON',\n                                                              'NORRISTOWN','CHELTENHAM','POTTSTOWN','UPPER MERION','WHITEMARSH','UPPER PROVIDENCE','LIMERICK','UPPER MORELAND', \n                                                              ]))], palette = 'cubehelix')\nplt.xticks(rotation = 60)","cd058aac":"df[df['Category'] == 'Traffic']['twp'].value_counts().head(10)","82774f26":"# Plotting the top ten Traffic call towns with frequencies:\nplt.figure(figsize = (12,5))\nplt.title('Top places for Traffic category')\nsns.countplot('twp', data = df[(df['Category'] == 'Traffic') & (df['twp'].isin(['LOWER MERION','UPPER MERION','ABINGTON',\n                                                              'CHELTENHAM','PLYMOUTH','UPPER DUBLIN','UPPER MORELAND','MONTGOMERY','HORSHAM','NORRISTOWN' \n                                                              ]))], palette = 'cubehelix')\nplt.xticks(rotation = 60)","0dbc7d7b":"# Sub-Category plotting(EMS)\nplt.figure(figsize = (15,5))\nsns.countplot('Sub-Category', data = df[df['Category'] == 'EMS'], palette = 'cubehelix')\nplt.xticks(rotation = 90)","8c8f77b1":"# Sub-Category plotting(Traffic)\nplt.figure(figsize = (10,5))\nsns.countplot('Sub-Category', data = df[df['Category'] == 'Traffic'], palette = 'cubehelix')\nplt.xticks(rotation = 60)","85428be1":"# Sub-Category plotting(Fire)\nplt.figure(figsize = (15,5))\nsns.countplot('Sub-Category', data = df[df['Category'] == 'Fire'], palette = 'cubehelix')\nplt.xticks(rotation = 90)","552125f5":"#Converting the time data set into datetime format\ntype(df['timeStamp'].iloc[0])\ndf['timeStamp'] = pd.to_datetime(df['timeStamp'])\ndf['timeStamp'].iloc[0]","78ac53ce":"#Grabbing the date from this timestamp.\ndf['Hour'] = df['timeStamp'].apply(lambda time:time.hour)","27704606":"#Now doing the same for day of weeks:\ndf['Day of Week'] = df['timeStamp'].apply(lambda time:time.dayofweek)","7540c0d9":"# Making day of the week as string:\ndmap = {0:'mon', 1:'tue',2:'wed', 3:'thu', 4:'fri', 5:'sat', 6:'sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)","babc0f01":"# importing date in the data:\ndf['date'] = df['timeStamp'].apply(lambda t:t)","01b73e73":"dayHour = df.groupby(by = ['Day of Week', 'Hour']).count()['Category'].unstack()\ndayHour\nfig = plt.figure(figsize = (10,7))\nsns.heatmap(dayHour, cmap = 'Blues')","741cb32e":"Top 5 reasons for 'Traffic' 911 calls:","4975913c":"What are the number of missing values in each colum?","21e63397":"Heatmap representing the paticular hours and days of the weeks where calls where made the maximum","51edc4e5":"Top towns where maximum 'EMS' calls were made from:","5723b4b3":"Three main reasons(catrgories) to call 911:","aa0ab4bb":"Using timestamp to deduce time, hour, day of the week and month where calls were made","e6b87d76":"Total number of unique reasons to make 911 calls?","35186186":"Top 5 reasons to call 911 covering over-all categories:","4af53aef":"Top 5 reasons for 'EMS' 911 calls:","c5ab501f":"Top towns where maximum 'Fire' calls were made from:","c05f1208":"Top 5 reasons for 'Fire' 911 calls:","6643cbb1":"Top towns where maximum 'Traffic' calls were made from:"}}