{"cell_type":{"d3a802cf":"code","ca3115ca":"code","b509cf69":"code","e6282375":"code","87914854":"code","2952fbde":"code","3abdf275":"code","c8affb48":"code","5f5a4051":"code","ddeb281c":"code","84c33695":"code","a4c1476e":"code","d13b7f18":"code","033d1501":"markdown","76b7143a":"markdown","9730538e":"markdown","2d84764f":"markdown","341a1603":"markdown","249f25b6":"markdown","95292434":"markdown","c3471d63":"markdown","b9238d19":"markdown","fdee6410":"markdown","328620d7":"markdown","1c1c29dd":"markdown","92def045":"markdown","83c0e51a":"markdown"},"source":{"d3a802cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca3115ca":"# load training data and show the first 5 rows\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","b509cf69":"# load testing data and show the first 5 rows\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","e6282375":"# examine all columns in dataset\nprint(train_data.head())\n\n# calculate the percentage of women that survived\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\nprint(\"% of women who survived:\", rate_women)\n\n# calculate the percentage of men that survived\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\nprint(\"% of men who survived:\", rate_men)\n\n# check for missing data\ntrain_missing_data = train_data.isna().sum()\nprint(train_missing_data)\n\n# fill the missing data\ntrain_data.fillna(method = 'pad', inplace = True)\n\n# check for missing data\ntest_missing_data = train_data.isna().sum()\nprint(test_missing_data)\n\n# fill the missing data\ntest_data.fillna(method = 'pad', inplace = True)\n","87914854":"from sklearn.ensemble import RandomForestClassifier\n\nfeatures = [\"Sex\", \"Fare\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.20, random_state = 1111) \n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=4)\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)","2952fbde":"print(classification_report(y_test, predictions))\nprint(model.score(X_test, y_test))","3abdf275":"from sklearn import neighbors\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.20, random_state = 1111) \n\nknn = neighbors.KNeighborsClassifier(n_neighbors=6)\nknn.fit(X_train, y_train)\n\npredictions = knn.predict(X_test)","c8affb48":"print(classification_report(y_test, predictions))\nprint(model.score(X_test, y_test))","5f5a4051":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.20, random_state = 1) \n\nparam_grid = {'alpha':[0.0001, 0.0003, 0.001, 0.003, 0.01, 0.3], 'loss':['hinge', 'log'], 'penalty':['l1','l2']}\n\nlinear_classifier = SGDClassifier(random_state=1)\n\nmodel = GridSearchCV(linear_classifier, param_grid, cv=10)\nmodel.fit(X_train, y_train)\n\npredicitions = model.predict(X_test)","ddeb281c":"print(classification_report(y_test, predictions)) \nprint(model.score(X_test, y_test))","84c33695":"from sklearn.tree import DecisionTreeClassifier\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.20, random_state = 1111) \n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)","a4c1476e":"print(classification_report(y_test, predictions))\nprint(model.score(X_test, y_test))","d13b7f18":"from sklearn.tree import DecisionTreeClassifier\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_test = pd.get_dummies(test_data[features]) \n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","033d1501":"<h1>Load Data<\/h1>\n<h4>Load training data<\/h4>","76b7143a":"#### Nearest Neighbors model","9730538e":"#### Decision Trees model so it will be used to create the submission file","2d84764f":"# Models","341a1603":"#### Evaluating Nearest Neighbors model","249f25b6":"#### Decision Trees model","95292434":"#### Evaluating SGDClassifier model","c3471d63":"#### SGDClassifier model","b9238d19":"#### Evaluating Decision Trees model","fdee6410":"<h1>Exploratory data analysis<\/h1>","328620d7":"<h4>Load testing data<\/h4>","1c1c29dd":"#### Evaluating Random Forest Classifier model","92def045":"#### Random Forest Classifier model","83c0e51a":"# Best model used for submission"}}