{"cell_type":{"b237c147":"code","63c8410a":"code","182190f5":"code","bc5724d2":"code","2da1a228":"code","649aed6d":"code","2de63ed6":"code","b2b04e82":"markdown","18461b9e":"markdown","0cba64cf":"markdown","bbb9c1c9":"markdown","05cbd3a8":"markdown"},"source":{"b237c147":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nimport numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","63c8410a":"num_classes = 1\n\nmy_model = Sequential()\nmy_model.add(ResNet50(include_top = False, weights = 'imagenet',pooling = 'avg'))\nmy_model.add(Dense(num_classes, activation = 'sigmoid'))\n\nmy_model.layers[0].trainable = False\n\nmy_model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","182190f5":"my_model.summary()","bc5724d2":"image_size = 224\n\ndatagenerator = ImageDataGenerator(preprocessing_function = preprocess_input,\n                                   horizontal_flip = True, width_shift_range = 0.2, height_shift_range = 0.2)\n\ntrain_generator = datagenerator.flow_from_directory('\/kaggle\/input\/barcode-test-set\/training_set',\n                                                   target_size = (image_size, image_size),\n                                                   batch_size = 24,\n                                                   class_mode = 'binary')\n\nval_generator = datagenerator.flow_from_directory('\/kaggle\/input\/barcode-test-set\/test_set',\n                                                 target_size = (image_size, image_size),\n                                                 class_mode = 'binary')\n\n","2da1a228":"my_model.fit(train_generator, steps_per_epoch = 7, \n          validation_data = val_generator, validation_steps = 1, epochs = 1)","649aed6d":"val_generator.class_indices","2de63ed6":"preds = my_model.predict(val_generator)\nlabels = np.argmax(preds, axis = 1)\nfor i in labels:\n    if i == 0:\n        print('The model predicted the image as a barcode')\n    else:\n        pass","b2b04e82":"# Building model based on ResNet50","18461b9e":"# Predicting with the model","0cba64cf":"# Training the model","bbb9c1c9":"# Importing all the neccessary libraries","05cbd3a8":"# Generating dataset with ImageDataGenerator"}}