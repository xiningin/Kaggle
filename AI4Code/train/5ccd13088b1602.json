{"cell_type":{"d798b7cf":"code","332e5d4b":"code","e26b18ac":"code","cf1b1ec4":"code","5a87bdff":"code","4c8c0d22":"code","aec0ccb5":"code","9dc11d8c":"code","aabfdbba":"code","5e03a909":"code","65048922":"code","ec8eb951":"code","485f0d56":"code","a0e58e11":"code","b834d8e3":"code","2b8c9422":"code","9c036dad":"code","cf876077":"code","12ace514":"code","2fc0b7b9":"code","2362ee0c":"code","77097301":"code","cde2cd0a":"code","cad334f7":"code","b354fa98":"code","9137b60f":"code","0b852580":"code","00ee6149":"code","acaaf310":"code","bf96703a":"code","f88b7d5c":"code","d673d5ae":"code","f2c54c29":"code","28c55b19":"code","99bdcb99":"code","86f076c1":"code","ce49258a":"code","5af43f37":"code","198f179f":"markdown","27cd1cda":"markdown","caa95f96":"markdown","68678cc1":"markdown","a016e279":"markdown","5f7d402d":"markdown"},"source":{"d798b7cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","332e5d4b":"##Load libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc","e26b18ac":"data = pd.read_csv(\"..\/input\/Womens Clothing E-Commerce Reviews.csv\")","cf1b1ec4":"data.head(3)","5a87bdff":"data.describe()","4c8c0d22":"data.info()","aec0ccb5":"data.isnull().sum()","9dc11d8c":"data.shape","aabfdbba":"###Plot missing values\nsns.set(rc={'figure.figsize':(11,4)})\npd.isnull(data).sum().plot(kind='bar')\nplt.ylabel('Number of missing values')\nplt.title('Missing values per Feature')","5e03a909":"sns.set(rc={'figure.figsize':(11,5)})\nplt.hist(data['Age'],bins=40)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Review\")\nplt.title(\"Number of review per page\")","65048922":"sns.boxplot(x='Rating',y='Age',data=data)\nplt.title('Rating Distribution per age')","ec8eb951":"###Plot frequency distribution of Recommended IND\nsns.countplot(x='Recommended IND',data=data)\nplt.title(\"Distribution of Recommended IND\")","485f0d56":"##Frequency distribution of rating\nsns.countplot(x='Rating',data=data)\nplt.title(\"Frequency Distribution of Rating\")","a0e58e11":"##Frequency distribution of division name\nsns.countplot(x='Division Name',data=data)\nplt.title(\"Distribution of Division Name\")","b834d8e3":"###Frequency distribution of Department Name\nsns.countplot(x='Department Name',data=data)\nplt.title(\"Distribution of Department Name\")","2b8c9422":"### Frequency distribution of class name\nsns.countplot(x='Class Name',data=data)\nplt.title(\"Distribution of Class Name\")\nplt.xticks(rotation=45)","9c036dad":"###plot the most Recommended and not Recommended item \nrecommended = data[data['Recommended IND']==1]\nnot_recommended = data[data['Recommended IND']==0]","cf876077":"fig = plt.figure(figsize=(14,14))\nax1 = plt.subplot2grid((2,2),(0,0))\nax1 = sns.countplot(recommended['Division Name'],color=\"green\",alpha=0.8,label=\"Recommended\")\nax1 = sns.countplot(not_recommended['Division Name'],color=\"red\",alpha=0.8,label=\"Not Recommended\")\nax1 = plt.title(\"Recommended items in each Division\")\nax1 = plt.legend()","12ace514":"ax2 = plt.subplot2grid((2,2),(0,0))\nax2 = sns.countplot(recommended['Department Name'] , color=\"yellow\",alpha=0.8,label=\"Recommended\")\nax2 = sns.countplot(not_recommended['Department Name'] , color=\"red\",alpha=0.8,label=\"Not Recommended\")\nax2 = plt.title(\"Recommended Items in each Department name\")\nax2 = plt.legend()","2fc0b7b9":"ax3 = plt.subplot2grid((2, 2), (1, 0), colspan=2)\nax3 = plt.xticks(rotation=45)\nax3 = sns.countplot(recommended['Class Name'], color=\"cyan\", alpha = 0.8, label = \"Recommended\")\nax3 = sns.countplot(not_recommended['Class Name'], color=\"blue\", alpha = 0.8, label = \"Not Recommended\")\nax3 = plt.title(\"Recommended Items in each Class\")\nax3 = plt.legend()","2362ee0c":"####Top 50 Most Popular item\nfig = plt.figure(figsize=(14, 9))\nplt.xticks(rotation=45)\nplt.xlabel('item ID')\nplt.ylabel('popularity')\nplt.title(\"Top 50 Popular Items\")\ndata['Clothing ID'].value_counts()[:50].plot(kind='bar');","77097301":"##Check co relation between the variables\ncorrmat = data.corr()\nsns.heatmap(corrmat,square=True, cmap=\"YlGnBu\");","cde2cd0a":"data['Review Text'] = data['Review Text'].fillna('')","cad334f7":"import re \nimport nltk\nnltk.download('wordnet')\n\ndef clean_and_tokenize(review):\n    text = review.lower()\n    \n    tokenizer = nltk.tokenize.TreebankWordTokenizer()\n    tokens = tokenizer.tokenize(text)\n    \n    stemmer = nltk.stem.WordNetLemmatizer()\n    text = \" \".join(stemmer.lemmatize(token) for token in tokens)\n    text = re.sub(\"[^a-z']\",\" \", text)\n    return text\ndata[\"Clean_Review\"] = data[\"Review Text\"].apply(clean_and_tokenize)","b354fa98":"data.head(3)","9137b60f":"### Set rating flase if it is >=4 else set it as positive\ndata = data[data['Rating'] !=3]\ndata['Sentiment'] = data['Rating'] >=4\ndata.head()","0b852580":"###Set True sentiment  as positive review and False as negative review\npositive_reviews = data[data['Sentiment'] == True]\nnegative_reviews = data[data['Sentiment'] == False]\n","00ee6149":"def wc(data,bgcolor,title):\n    plt.figure(figsize = (100,100))\n    wc = WordCloud(background_color = bgcolor, max_words = 1000,  max_font_size = 50)\n    wc.generate(' '.join(data))\n    plt.imshow(wc)\n    plt.axis('off')","acaaf310":"wc(positive_reviews['Review Text'],'black','Most Used Words')","bf96703a":"wc(negative_reviews['Review Text'],'black','Most Used Words')","f88b7d5c":"vectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['Review Text'])\ny = data['Recommended IND']","d673d5ae":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.8,random_state=0)","f2c54c29":"lr = LogisticRegression()\nlr.fit(X_train,y_train)","28c55b19":"lr_pred = lr.predict(X_test)","99bdcb99":"##making confusion matrix\nfrom sklearn.metrics import confusion_matrix \ncm = confusion_matrix(y_test,lr_pred)\ncm","86f076c1":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,lr_pred)","ce49258a":"# calculate the fpr and tpr for all thresholds of the classification\nfrom sklearn import metrics\nprobs = lr.predict_proba(X_test)\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)","5af43f37":"plt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n","198f179f":"### from above plot we can see variables are strongly corelated with itslef and strong relationship found between rating and recommended IND","27cd1cda":"#### from above Initmates Division Name are most recommended","caa95f96":"## Predict model","68678cc1":"### Data Preprocess","a016e279":"### Bottoms department is most recommended where as Trend Departmet as rarely recommended","5f7d402d":"### above histogram shows that age between 25-50 are most revivwing age group"}}