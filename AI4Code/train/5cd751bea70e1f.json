{"cell_type":{"7556b2da":"code","725d80c5":"code","5011c45a":"code","08b57d29":"code","a6ff1ada":"code","295dd012":"code","f0396703":"code","757e4a13":"code","de628c07":"code","e4dfc324":"code","a5a8b1d4":"code","53cbbd18":"code","5e3beb27":"code","3cf33186":"code","70bf7b12":"code","d49f1150":"code","5e2c6505":"code","237223de":"code","9c91b073":"code","7c8bfa76":"code","3340131c":"code","cc3e9596":"code","4d61a47c":"code","b8fd39bd":"code","07d096f3":"code","c4d8ee32":"markdown","4a32f1d4":"markdown","f1b58adc":"markdown","f7c383e2":"markdown","d341f2a5":"markdown","e91bf11a":"markdown"},"source":{"7556b2da":"from fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation, performance_metrics\nfrom statsmodels.base.transform import BoxCox\nimport pandas_datareader as web\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport itertools\nimport pandas as pd\nimport numpy as np","725d80c5":"plt.rcParams['figure.figsize'] =  20, 15\nplt.style.use('seaborn')","5011c45a":"ticker = 'TSLA'\nstart = dt.datetime(2014,1,1)\ndf = web.get_data_yahoo(ticker, start)\ndf['Date'] = df.index\ndf = df[['Date', 'Close']]\ndf.columns = ['ds', 'y']\ndf","08b57d29":"df['y'].plot()","a6ff1ada":"# making data normal would help prophet to learn better\nbc = BoxCox()\ndf['y'], lmbda = bc.transform_boxcox(df['y'])","295dd012":"data = df[['ds', 'y']]\ndata","f0396703":"df.y.plot()","757e4a13":"model_params = {\n   \"daily_seasonality\": False,\n   \"weekly_seasonality\": False,\n   \"yearly_seasonality\": True,\n   \"seasonality_mode\": \"multiplicative\",\n   \"growth\": \"logistic\"\n}\n\nmodel = Prophet(**model_params)\ndata['cap'] = data['y'].max() + data['y'].std() * 0.05\ndata ","de628c07":"model.fit(data)\n\nfuture = model.make_future_dataframe(periods=365)\nfuture['cap'] = data['cap'].max()\nfuture","e4dfc324":"forecast = model.predict(future)\nmodel.plot_components(forecast);","a5a8b1d4":"model.plot(forecast);","53cbbd18":"# Un Box-cox the data\nforecast['yhat'] = bc.untransform_boxcox(x = forecast['yhat'], lmbda = lmbda)\nforecast['yhat_lower'] = bc.untransform_boxcox(x = forecast['yhat_lower'], lmbda = lmbda)\nforecast['yhat_upper'] = bc.untransform_boxcox(x = forecast['yhat_upper'], lmbda = lmbda)\nforecast.plot(x = 'ds', y = ['yhat_lower', 'yhat', 'yhat_upper'])","5e3beb27":"#forecast.set_index('ds', inplace=True)\nplt.plot(forecast.yhat, label='Forecast')\nplt.plot(bc.untransform_boxcox(x = data['y'], lmbda = lmbda), label='Original')\nplt.legend()","3cf33186":"# Make model more robust by adding seasonality\nmodel = Prophet(**model_params)\nmodel = model.add_seasonality(name = 'monthly' , period = 30 , fourier_order= 10)\nmodel = model.add_seasonality(name = 'quarterly' , period =  92.25, fourier_order= 10)\n\nmodel.add_country_holidays('US')\n\nmodel.fit(data)\n\nfuture = model.make_future_dataframe(periods = 365)\nfuture['cap'] = data['cap'].max()\n\nforecast = model.predict(future)\nmodel.plot_components(forecast);","70bf7b12":"model.plot(forecast);","d49f1150":"# Un Box-cox the data \nforecast['yhat'] = bc.untransform_boxcox(x = forecast['yhat'], lmbda = lmbda)\nforecast['yhat_lower'] = bc.untransform_boxcox(x = forecast['yhat_lower'], lmbda = lmbda)\nforecast['yhat_upper'] = bc.untransform_boxcox(x = forecast['yhat_upper'], lmbda = lmbda)\nforecast.plot(x = 'ds', y = ['yhat_lower', 'yhat', 'yhat_upper'])","5e2c6505":"#forecast.set_index('ds', inplace=True)\nplt.plot(forecast.yhat, label='Forecast')\nplt.plot(bc.untransform_boxcox(x = data.y, lmbda = lmbda), label='Original')\nplt.legend()","237223de":"# More param, like 'changepoint_prior_scale','seasonality_prior_scale' tuning might give rise to better fit\nparam_grid = {\n   \"daily_seasonality\" : [False],\n   \"weekly_seasonality\" : [False],\n   \"yearly_seasonality\" : [True],\n   \"growth\" : ['logistic'],\n   'changepoint_prior_scale': [0.001,0.01,0.1,0.5],\n   'seasonality_prior_scale': [0.01,0.1,0.5,10.0]\n\n}\n\n#generate all combiations of parameters\nall_params = [\n             dict(zip(param_grid.keys(), v))\n             for v in itertools.product(*param_grid.values())\n]\n\nrmses = []  # Store the RMSEs for each params here\n\n# Use cross validation to evaluate all parameters. I will comment the for loop and tuning results \n# avoiding long training\n'''\nfor params in all_params:\n    m = Prophet(**params).fit(data)  # Fit model with given params\n    df_cv = cross_validation(m, horizon='365 days', parallel=\"processes\")\n    df_p = performance_metrics(df_cv, rolling_window=1)\n    rmses.append(df_p['rmse'].values[0])\n\n# Find the best parameters\ntuning_results = pd.DataFrame(all_params[4:])\ntuning_results['rmse'] = rmses\nprint(tuning_results)\n'''","9c91b073":"'''best_params = all_params[np.argmin(rmses)]\nprint(best_params)'''","7c8bfa76":"best_params = {'daily_seasonality': False, 'weekly_seasonality': False, \n 'yearly_seasonality': True, 'growth': 'logistic', \n 'changepoint_prior_scale': 0.001, 'seasonality_prior_scale': 0.1}","3340131c":"#foarecast with the best parameters\nbest_model = Prophet(**best_params)\n\nbest_model = best_model.add_seasonality(name = 'monthly', period = 30, fourier_order = 5)\nbest_model = best_model.add_seasonality(name = 'quarterly', period = 92.25, fourier_order = 10)\n\nbest_model.add_country_holidays(country_name = \"US\")\n\nbest_model.fit(data)\n\nfuture = best_model.make_future_dataframe(periods=365, freq = 'D')\n\nfuture['cap'] = data['cap'].max()\n\nforecast = best_model.predict(future)","cc3e9596":"best_model.plot(forecast);","4d61a47c":"best_model.plot_components(forecast);","b8fd39bd":"forecast['yhat'] = bc.untransform_boxcox(x = forecast['yhat'], lmbda = lmbda)\nforecast['yhat_lower'] = bc.untransform_boxcox(x = forecast['yhat_lower'], lmbda = lmbda)\nforecast['yhat_upper'] = bc.untransform_boxcox(x = forecast['yhat_upper'], lmbda = lmbda)\nforecast.plot(x = 'ds', y = ['yhat_lower', 'yhat', 'yhat_upper'])","07d096f3":"#forecast.set_index('ds', inplace=True)\nplt.plot(forecast.yhat, label='Forecast')\nplt.plot(bc.untransform_boxcox(x = data.y, lmbda = lmbda), label='Original')\nplt.legend()","c4d8ee32":"So, it seems that forecast is terrible at training. Looks like fore future also it will not be good. So far the last model seem to be great. Of course, learning more about the data and tweaking parameters more might give us better result. Good Luck. Thanks for being here. Please upvote if you like the work. Cheers:)","4a32f1d4":"# Hyperparameter tuning for better fit\n\n- changepoint_prior_scale: This is probably the most impactful parameter. It determines the flexibility of the trend, and in particular how much the trend changes at the trend changepoints. As described in this documentation, if it is too small, the trend will be underfit and variance that should have been modeled with trend changes will instead end up being handled with the noise term. If it is too large, the trend will overfit and in the most extreme case you can end up with the trend capturing yearly seasonality. The default of 0.05 works for many time series, but this could be tuned; a range of [0.001, 0.5] would likely be about right. Parameters like this (regularization penalties; this is effectively a lasso penalty) are often tuned on a log scale.\n\n- seasonality_prior_scale: This parameter controls the flexibility of the seasonality. Similarly, a large value allows the seasonality to fit large fluctuations, a small value shrinks the magnitude of the seasonality. The default is 10., which applies basically no regularization. That is because we very rarely see overfitting here (there\u2019s inherent regularization with the fact that it is being modeled with a truncated Fourier series, so it\u2019s essentially low-pass filtered). A reasonable range for tuning it would probably be [0.01, 10]; when set to 0.01 you should find that the magnitude of seasonality is forced to be very small. This likely also makes sense on a log scale, since it is effectively an L2 penalty like in ridge regression.\n\nOne may refer to the source of the above text, https:\/\/facebook.github.io\/prophet\/docs\/diagnostics.html#hyperparameter-tuning, for further info. It is wonderful. The code below was taken from the same link.","f1b58adc":"# IMPORTS","f7c383e2":"Running two cell above gives the output as in the next cell. I am not running it, because it takes lot of time.","d341f2a5":"# Preprocessing","e91bf11a":"# Modelling"}}