{"cell_type":{"9e791a4b":"code","ce7aa032":"code","5e18f61d":"code","3626ed3d":"code","436a6de4":"code","0acf03b9":"code","ccb2cccc":"code","34407b26":"code","1dd7fed8":"code","2d3e5cf4":"code","3abb5559":"code","7fc3064f":"code","1c1a3f53":"code","25391344":"code","cc3ee75c":"markdown","170b2c9c":"markdown","2b4feeb6":"markdown","407aa9fc":"markdown","67ad2a9c":"markdown","d4d7d0d6":"markdown"},"source":{"9e791a4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce7aa032":"import zipfile\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\",\"r\") as z:\n    z.extractall(\".\")","5e18f61d":"with zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\",'r') as z:\n    z.extractall(\".\")","3626ed3d":"import os\nimport skimage.io as io\nimport random\nfrom skimage.transform import resize\nfrom tqdm import tqdm\nimport pandas as pd\nimport matplotlib.pyplot as plt","436a6de4":"path = '\/kaggle\/working\/train\/'\nf_l = os.listdir(path)\nlen(f_l)","0acf03b9":"sample = random.sample(f_l, int(len(f_l)\/10))\nsample_image = random.choice(sample)\nimage = io.imread(path + sample_image)\n%matplotlib notebook\nplt.imshow(image)","ccb2cccc":"target = []\nimg_l = []\nfor file in tqdm(sample):\n    img = io.imread(path+file)\n    img = resize(img, (150, 150, 3))\n    img_l.append(img)\n    \n    if 'cat' in file:\n        target.append(1)\n    elif 'dog' in file:\n        target.append(0)\n        \ndf_image=pd.DataFrame(\n    {\"filename\":sample,\n    \"target\":target}\n)\ntarget = pd.Series(target)","34407b26":"%matplotlib notebook\nplt.imshow(img)","1dd7fed8":"df_image","2d3e5cf4":"%matplotlib notebook\ndf_image['target'].value_counts().plot.bar()","3abb5559":"target","7fc3064f":"retrain = []\nfor i in range(len(img_l)):\n    retrain.append(img_l[i].reshape(150*150*3))\npixel = []\nfor i in range(150*150*3):\n    pixel.append('pixel_{}'.format(i))\ndf = pd.DataFrame(retrain, columns=pixel)","1c1a3f53":"df","25391344":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nimport numpy as np\n\nk_fold = KFold(n_splits=5, shuffle = True, random_state = 45)\n\nscores = np.zeros(5)\nfor i, (tr_idx, te_idx) in enumerate(k_fold.split(df)):\n    X_train, y_train = df.iloc[tr_idx], target.iloc[tr_idx]\n    x_test, y_test = df.iloc[te_idx], target.iloc[te_idx]\n    \n    clf = RandomForestClassifier()\n    clf.fit(X_train, y_train)\n    predict = clf.predict(x_test)\n    score = accuracy_score(y_test, predict)\n    print(score)\n    scores[i] = score\n\nprint(round(np.mean(score)*100, 2))","cc3ee75c":"Sampling due to cpu overload","170b2c9c":"# **Modeling & Scoring**","2b4feeb6":"# **Data Dimension Reduction**","407aa9fc":"# **Preprocessing Data**","67ad2a9c":"> **Image resize & Cats and Dogs file classification**","d4d7d0d6":"> **Load library**"}}