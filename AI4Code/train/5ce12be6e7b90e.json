{"cell_type":{"3b95e023":"code","b0ed327b":"code","fe2b6279":"code","7154f9ac":"code","34cf37f6":"code","77414867":"code","77cdf2ad":"code","8e2bf4f9":"code","6cfdc941":"code","51d0a368":"code","45bfc614":"code","f4ee0984":"code","f0cf9044":"code","187fc177":"code","a06e3f93":"code","58ef8b5b":"code","b24eda83":"code","f5511659":"code","3677c0f6":"code","64f831cf":"code","b9558a8e":"code","7ef4975c":"code","c2e06338":"code","4c7a4511":"code","c2a97b41":"code","c1818dc7":"code","58b0f648":"code","9f09fea4":"code","6d9776f3":"code","416df686":"code","2a33df48":"code","478ccecc":"code","b5698902":"code","755558f7":"code","898ed580":"code","d8dfeee1":"code","fa8aa69b":"code","b3faae5c":"code","5a43dbac":"code","cff46fbb":"code","704ac625":"code","f4996f8c":"code","5d4f80da":"code","8f531f4d":"code","5f0705b1":"code","573a7e9d":"code","e87e25b3":"code","4fff1a50":"code","28e2b57a":"code","2b580947":"code","ec799790":"code","993b795a":"code","dd6d1c40":"code","3de87041":"code","f99aae43":"code","9d4ebe4d":"code","21879967":"code","86663910":"code","00e9db9d":"code","b0291b0b":"code","b1efa080":"code","660ef991":"code","4be07ae5":"code","579dc4f2":"code","0d7fa05c":"code","0f481059":"code","78ff8489":"code","4a56aec3":"code","68789bbf":"code","43dffefa":"code","08af52ff":"code","ca146d94":"code","05bb5f86":"code","972f003e":"code","cb393cf9":"code","8e8d77b8":"code","68124ce0":"code","0275a17e":"code","e155f091":"code","cdc4d163":"code","753681ec":"code","e4118d6d":"code","67a3dfc1":"code","b8778233":"markdown","30028528":"markdown","94947560":"markdown","cc474068":"markdown","d7c210c3":"markdown","446d1318":"markdown","83c4aaac":"markdown","c7a543e2":"markdown","defce4b0":"markdown","7dc9c16c":"markdown","f1b2844c":"markdown","3a5ebcdc":"markdown","22284451":"markdown","cd722c02":"markdown","199bd186":"markdown","8d735c1d":"markdown","457c4bf6":"markdown","86df3d6c":"markdown","90541721":"markdown","d967b190":"markdown","c9ee3417":"markdown","6af9e0f6":"markdown","c8bb553d":"markdown","261d2203":"markdown","b8e5a1d2":"markdown","f05642b0":"markdown","178b0997":"markdown","f71a85f7":"markdown","ab28b5a9":"markdown","c04f47b3":"markdown","01047b1d":"markdown","f61d1184":"markdown","162ed7ee":"markdown","07faae0e":"markdown","0cf3afa7":"markdown","207b4774":"markdown","7cd34a1e":"markdown","c0958c68":"markdown","91a1d7b0":"markdown","38a3e19e":"markdown","a452e238":"markdown","bfe2df66":"markdown","24a3fd96":"markdown","9361a66d":"markdown","015c83dd":"markdown","42636d74":"markdown","50512f5b":"markdown","68192c20":"markdown","87817715":"markdown","8cfcafbd":"markdown","bb610c42":"markdown","31779a99":"markdown","66ce6d6c":"markdown","4568723c":"markdown","8f8fb537":"markdown","41d3074d":"markdown","78b9c174":"markdown","4a583c27":"markdown","39b07b92":"markdown","b0666053":"markdown","f2534a5e":"markdown","56dc8557":"markdown","dfadd527":"markdown","e6810729":"markdown","8abebb6a":"markdown","8ac71058":"markdown","fd2fb3d6":"markdown","3478ea09":"markdown","ff0cdebd":"markdown","49b44c86":"markdown","98f7eb71":"markdown","c64e701b":"markdown","6083d8f4":"markdown","0865ae17":"markdown","08b89e13":"markdown","602617a5":"markdown","0905ce02":"markdown","100eacf4":"markdown","06b1eb05":"markdown","41bbe547":"markdown","0783d9ec":"markdown","f9f792cf":"markdown","cd17cd93":"markdown","85e15330":"markdown","beecd225":"markdown","1a6cc659":"markdown","f207e306":"markdown","dffe8a00":"markdown"},"source":{"3b95e023":"print(\"Hello World!\")","b0ed327b":"print(\"Welcome to Python!\")","fe2b6279":"print(\"The product of 7 and 8 is\", 7 * 8)","7154f9ac":"# Your code here:\n","34cf37f6":"a = 5","77414867":"print(a)","77cdf2ad":"a + 7","8e2bf4f9":"type(a)","6cfdc941":"type(a)","51d0a368":"x = 5.12312983\ntype(x)","45bfc614":"value = True # Camelcase\ntype(value)","f4ee0984":"# Your code here","f0cf9044":"print(\"This will be printed\")\n# print(\"This will not be printed\")\nprint(\"Another example\") # of a comment ","187fc177":"a = 5\nb = 2","a06e3f93":"a + b","58ef8b5b":"a - b","b24eda83":"a * b","f5511659":"a**b","3677c0f6":"a \/ b","64f831cf":"a \/\/ b","b9558a8e":"a % b","7ef4975c":"# Your code here","c2e06338":"# Your code here","4c7a4511":"# Your code here","c2a97b41":"10 == 10    # Note: '==', not '='","c1818dc7":"10 > 5","58b0f648":"5 > 10","9f09fea4":"a != b","6d9776f3":"b < 5","416df686":"b <= 5","2a33df48":"a = 10\nb = 2\n\nif a > b:\n    print('Yes')","478ccecc":"if a < b:\n    print('Yes')","b5698902":"c = 20\nif c > a and c > b:\n    print(\"C is big!\")","755558f7":"d = 7\nif d > a and d > b:\n    print(\"D is big\")\nif d > a or d > b:\n    print(\"D is bigger than a or b\")","898ed580":"import random\ngrade = random.randint(0, 10)\n\n# Your code goes here","d8dfeee1":"# Your code here","fa8aa69b":"n = random.randint(0, 20)\n\nif n % 2 == 0:\n    print(n, 'is an even number')\nelse:\n    print(n, 'is not an even number')\n    \nprint('End of program')","b3faae5c":"kmh = random.randint(80, 150)\n\n# Your code goes here80","5a43dbac":"trials = 1\nrandom_num = random.randint(1, 100)\n\nwhile random_num <= 90:        # condition\n    print(random_num)           # indented block\n    random_num = randint(1,100) # indented block\n    trials = trials + 1\nprint ('Found a number greater than 90 (', random_num, ') after ', trials, 'trials.')","cff46fbb":"# 11 represents J, 12 represents Q, 13 represents K, 14 represents A\ncard_one = random.randint(0, 14)\ncard_two = random.randint(0, 14)\n\n# Your code goes in the brackets of the parentheses.\nwhile():\n    card_one = random.randint(0, 14)\n    card_two = random.randint(0, 14)\n    \nprint(\"Yes! got aces\", card_one, card_two)","704ac625":"x = \"Jupyter\"\ny = 'I love Python'\nprint(x)\nprint(y)","f4996f8c":"type(x)","5d4f80da":"cheeseshop_dialog =\"\"\"Customer: 'Not much of a cheese shop really, is it?'\nShopkeeper: 'Finest in the district, sir.'\nCustomer: 'And what leads you to that conclusion?'\nShopkeeper: 'Well, it's so clean.'\nCustomer: 'It's certainly uncontaminated by cheese.'\n\"\"\"\nprint(cheeseshop_dialog)\ntype(cheeseshop_dialog)","8f531f4d":"print(x + \"2019\")","5f0705b1":"n = len(dna)\nprint(\"The length of the DNA variable is\", n)\n\ndna = dna + \"AGCTGA\"\nprint(\"Now it is\", len(dna))","573a7e9d":"x = 10\nx *= 7\nprint(x)","e87e25b3":"text = \"A musician wakes from a terrible nightmare.\"","4fff1a50":"print(text[0])\nprint(text[5])","28e2b57a":"print(text[-1])\nprint(text[-4])","2b580947":"# get the 1st and 6th letters\nprint(text[0])\nprint(text[5])","ec799790":"# get the last letter\nprint(text[-1])\n# get 5th letter from the end\nprint(text[-5])","993b795a":"# get the 3rd to 8th letters\nprint(text[2:8])","dd6d1c40":"# get the first 5 letters\nprint(text[0:5])\n# or simply:\nprint(text[:5])\n\n# get 3rd to last letters:\nprint(text[3:])\n\n# last 3 letters\nprint(text[-3:])","3de87041":"seq = \"CAAGTAATGGCAGCCATTAA\"\n\n# Your code goes here","f99aae43":"# a list of strings\napes = [\"Human\", \"Gorilla\", \"Chimpanzee\"]\nprint(apes)","9d4ebe4d":"# a list of numbers\nnums = [7, 13, 2, 400]\nprint(nums)","21879967":"# a mixed list\nmixed = [12, 'Mouse', True]\nprint(mixed)","86663910":"print(apes[0])\nprint(apes[-1])","00e9db9d":"new_apes = apes.copy() # make a copy of the apes list\nnew_apes[2] = 'Bonobo'\nprint(new_apes)","b0291b0b":"apes.append(\"Macaco\")\nprint(apes)","b1efa080":"apes.insert(2, \"Kofiko\")\nprint(apes)","660ef991":"apes.remove(\"Human\")\nprint(apes)","4be07ae5":"print(apes.pop(3))\nprint(apes)","579dc4f2":"i = apes.index('Kofiko')\nprint(i, apes[i])","0d7fa05c":"# get the first 3 objects\nshopping_list = ['tomatoes', 'sugar', 'tea', 'cereal', 'bananas', 'rice']\nprint(shopping_list[:3])","0f481059":"birds = ['Owl', 'Sparrow', 'Parrot']\nsnakes = ['Viper', 'Mamba', 'Python']\n# Your code goes here","78ff8489":"for ape in apes:\n    print(ape, \"is an ape\")","4a56aec3":"dna = \"ACGTAAAACGTACAAGA\"\ncount_a = 0\n\nfor letter in dna:\n    if letter == \"G\":\n        count_a = count_a + 1\n        \nprint(\"# of G's\", count_a)","68789bbf":"sentence = 'Please count the number of whitespace in this sentence'\ncount_space = 0\n\n# Your code here\n\nprint(\"Number of spaces in our sentence is :\", count_space)","43dffefa":"for i in range(10): \n    print(i)","08af52ff":"n = 97 # try other numbers\n\n\n\n\n\n","ca146d94":"capitals = {\n    'Israel': 'Jerusalem', \n    'France': 'Paris', \n    'England': 'London', \n    'USA': 'Washington DC',\n    'Korea' : 'Seoul',\n    'Spain' : 'Madrid'\n}","05bb5f86":"print(capitals['Korea'])\nprint(capitals['Spain'])","972f003e":"capitals['Spain'] = 'Barcelona'\nprint(capitals['Spain'])","cb393cf9":"capitals['Germany'] = 'Berlin'\nprint(capitals['Germany'])","8e8d77b8":"for country in capitals:\n    print(capitals[country], \"is the capital of\", country)","68124ce0":"'Israel' in capitals","0275a17e":"'Japan' in capitals","e155f091":"# Your code goes here","cdc4d163":"def multiply(x, y):\n    z = x * y\n    return z","753681ec":"x = 3\ny = multiply(x, 2)\nprint(y)","e4118d6d":"z = multiply(7, 5)\nprint(z)","67a3dfc1":"secret = \"\"\"Mq osakk le eh ue usq qhp, mq osakk xzlsu zh Xcahgq,\nmq osakk xzlsu eh usq oqao ahp egqaho,\nmq osakk xzlsu mzus lcemzhl gehxzpqhgq ahp lcemzhl oucqhlus zh usq azc, mq osakk pqxqhp ebc Zokahp, msauqjqc usq geou dat rq,\nmq osakk xzlsu eh usq rqagsqo,\nmq osakk xzlsu eh usq kahpzhl lcebhpo,\nmq osakk xzlsu zh usq xzqkpo ahp zh usq oucqquo,\nmq osakk xzlsu zh usq szkko;\nmq osakk hqjqc obccqhpqc, ahp qjqh zx, mszgs Z pe heu xec a dedqhu rqkzqjq, uszo Zokahp ec a kaclq iacu ex zu mqcq obrfblauqp ahp ouacjzhl, usqh ebc Qdizcq rqtehp usq oqao, acdqp ahp lbacpqp rt usq Rczuzos Xkqqu, mebkp gacct eh usq oucbllkq, bhuzk, zh Lep\u2019o leep uzdq, usq Hqm Meckp, mzus akk zuo iemqc ahp dzlsu, ouqio xecus ue usq cqogbq ahp usq kzrqcauzeh ex usq ekp.\"\"\"\n\n# A dictionary to crack the code.\ncode = {'w': 'x', 'L': 'G', 'c': 'r', 'x': 'f', 'G': 'C', 'E': 'O', 'h': 'n', 'O': 'S', 'y': 'q', 'R': 'B', 'd': 'm', 'f': 'j', 'i': 'p', 'o': 's', 'g': 'c', 'a': 'a', 'u': 't', 'k': 'l', 'q': 'e', 'r': 'b', 'V': 'Z', 'X': 'F', 'N': 'K', 'B': 'U', 'T': 'Y', 'M': 'W', 'U': 'T', 'm': 'w', 'C': 'R', 'J': 'V', 't': 'y', 'S': 'H', 'v': 'z', 'e': 'o', 'D': 'M', 'p': 'd', 'K': 'L', 'A': 'A', 'P': 'D', 'l': 'g', 's': 'h', 'W': 'X', 'H': 'N', 'j': 'v', 'z': 'i', 'I': 'P', 'b': 'u', 'Z': 'I', 'F': 'J', 'Y': 'Q', 'Q': 'E', 'n': 'k'}\n\ndef decode (secret, code):\n    decipher = \"\"\n    \n    # Your code goes here\n    \n    print (decipher)\n\ndecode(secret, code)\n","b8778233":"### Access\nAccessing a dictionary record is similar to what we did with lists, only this time we'll use a _key_ instead of an _index_:","30028528":"# Conditional statements\n## `if` statements\n\nThe `if` statement allows us to condition the program flow on its data.","94947560":"## `int`\nThe **`int`** type is for integers:","cc474068":"Decimal division:","d7c210c3":"`insert` adds an element at a given index:","446d1318":"Indexes work from the tail as well, using negative indices:","83c4aaac":"Add the correct expression to the while parentheses so that the while loop will only end <br>\nwhen both your cards are aces.","c7a543e2":"# **Exercise** : Variables\n* Declare a variable named *num* and set it's value to 3.\n* Declare a string named *sentence* and set it's value to 'My Python Sentence'\n* print both variables to the screen","defce4b0":"Python\u2019s `for` loop syntax allows us to iterate over the elements of a `list`, or any `iterable` value. Python's `for` is similar to the `foreach` statement in other languages, rather than `for(i=0; i<n; i++)`:\n\n```py\nfor loop_variable in iterable:\n    statement1\n    statement2\n    statement3\n    ...\n```","7dc9c16c":"### Dictionaries as containers\nWe can check if a dictionary contains a *key* using the `in` operator:","f1b2844c":"## `for` loops\n\nSay we want to print each element of our list:","3a5ebcdc":"### Looping over dictionaries\n\nBy default, `for` loops over the dictionary keys:","22284451":"Substract:","cd722c02":"# Comments\n\nEverything between a hashtag symbol `#` and the end of the line is a comment.","199bd186":"# Colophon\nThis notebook was written by [Yoav Ram](http:\/\/python.yoavram.com) and is part of the [_Scientific Computing with Python_](https:\/\/scicompy.yoavram.com\/) course at IDC Herzliya.\n\nThe notebook was written using [Python](http:\/\/python.org\/) 3.6.5.\nDependencies listed in [environment.yml](..\/environment.yml).\n\nThis work is licensed under a CC BY-NC-SA 4.0 International License.\n\n![Python logo](https:\/\/www.python.org\/static\/community_logos\/python-logo.png)","8d735c1d":"# Variable names\n* You *can't include spaces*. \n* In principle, you can use any unicode symbol.\n* You can override words that have special meaning in python (for example `print`), but don't do it unless you have a good reason.\n* The convention is to use *lowercase only* and separate words with *underscores*: `num_atoms`, `first_template`.","457c4bf6":"## `float`\n\n**`float`** is for decimal point numbers, and is usually implemented using a double in C:","86df3d6c":"## **Exercise**: Operators","90541721":"### List methods\n\nLists also have many methods. \nThe most useful ones we'll see here make use of the fact that lists are **mutable**.\n\n`append` adds an element to the end of the list:","d967b190":"### Access\n\nYou can access list elements just like strings, using indexes (starting from 0):","c9ee3417":"### Access: Slicing\n  \nWe can slice lists just like we did with strings, to get partial lists.  \nFor example:","6af9e0f6":"# Functions\n\nWe _define_ functions with the __def__ command.\nThe general syntax is:\n\n```py\ndef function_name(input1, input2, input3,...):\n    # some processes\n    .\n    .\n    .\n    return output1, output2, ...\n```\n\nFor example:","c8bb553d":"Once a variable has been declared, we can use its name to get its value:","261d2203":"# Hello Jupyter!\n\nTo execute code in Jupyter notebook press `Shift+Enter` (or `Shift+Return`) or press `Control+Enter` (or `Command+Return`). The former will execute and advance, the later will execute and stay.\nYou can also use the \u25b6\ufe0f button on the command pallete above.","b8e5a1d2":"### Access: Indexing\n\nWe can acces specific characters (sequence items) in a string using square brackets `[i]`:","f05642b0":"## Strings\n\nStrings are ordered collections of _characters_. \n\n_Ordered collections_ means that elements are numbered with _indexes_: 0, 1, 2, 3, 4...  \nNote that the first index is 0, __not__ 1!\n\nWe can create new string usings single- or double-quotes: `'` or `\"`.","178b0997":"Print to the screen the following sentences:  \n\n- \"I love Python!\"\n- \"7 + 6 = RESULT\", replacing `RESULT` with the computation of 6+7\n- \"my name is NAME\", replacing `NAME` with your name","f71a85f7":"We can access specific indexes of the list (_starting from 0_)","ab28b5a9":"### Multiline strings\n\nMultiline strings can be defined using `\"\"\"`:","c04f47b3":"Multipy:","01047b1d":"Integer division:","f61d1184":"# Python tutorial\n\n## Credit for this notebook goes to : [Yoav Ram](http:\/\/yoavram.com)","162ed7ee":"Remainder (modulo):","07faae0e":"We use `while` loops to do something again and again, as long as a condition is met.  \n\n![while](http:\/\/www.tutorialspoint.com\/images\/python_while_loop.jpg)\n\nThe syntax is very similar to that of `if` statement.\n\nLet's count how many times it takes to get a random number greater than 90. ","0cf3afa7":"## ** Exercise ** if\n\nprint to the screen awesome if *grade* is greater then 65. <br>\nAt the end print 'finished' in any case.","207b4774":"Notice the colon and the indented block. The syntax is always:\n\n```py\nif condition:  \n    statement1\n    statement2\n    statement3\n    ...\n```\n\nThe condition does not need to be surrounded by round brackets `(...)`.\n\n**Whitespaces mark block code**: Only commands within the indented block are conditional. Other commands will be executed, no matter if the condition is met or not. There is no use of curly brackets or `end` command: unindenting will close the code block.\n\nAlso, the condition does not need to be surrounded by round brackets `(...)`.\n\n__Note__: the condition expression is always converted to a boolean -- if it's not already a boolean, it will be implicitly converted into one. \nThe indented commands only occur if the boolean has a `True` value.\nTherefore, we can use logical operators to create more complex conditions.","7cd34a1e":"### Exercise: Lists\n\n- Use the lists `birds` and `snakes` to create a single list of strings with the animal names. \n- Add the string `Cobra` to the list. \n- Remove the `Owl` from the list. ","c0958c68":"## range\n\nSometimes we want to loop over consecutive numbers.\n\nThis is accomplished using the `range` function.\n\n`range` accepts one, two, or three arguments: the bottom and upper limits and the step size.  \nThe bottom limit can be omitted - the default is zero - and the step can be omitted, too - the default is one.\nThe upper limit is __not__ included.","91a1d7b0":"## Comparison operators\nThese operators are used to compare values. They always return boolean values: `True` or `False`.\n\n| Symbol | Operator          | Use    |\n|--------|-------------------|--------|\n| ==     | Equals            | x == y |\n| !=     | Not equals        | x != y |\n| <      | Smaller than      | x < y  |\n| >      | Larger than       | x > y  |\n| <=     | Smaller or equals | x <= y |\n| >=     | Larger or equals  | x >= y |","38a3e19e":"We can get a range of indexes using _\\[start:end\\]_","a452e238":"## `else` statements\n\nWe can add _else_ statements to perform commands in case the condition is __not__ met, or in other words, if the boolean is False.\n\n![if else flow](https:\/\/raw.githubusercontent.com\/yoavram\/Py4Life\/master\/lec1_images\/if_else_flow.jpg)","bfe2df66":"## `str`\n\n**`str`** is for strings, used for both characters and text. \nWill deal with strings later.","24a3fd96":"Augmented assignment also work with numbers and other operators:","9361a66d":"Count the number of spaces in the sentence below.","015c83dd":"# Variables\n\nA variable is a _name_ that references a an _object_ in memory.\nAn object has a _value_ and a _type_.\n\nTo bind an _object_ to a _variable_, we use the _assignment_ operator `=`.","42636d74":"In this dictionary, the _keys_ are the coutnries and the _values_ are the capital city. Both are of type `str`.","50512f5b":"Lists are dynamic and mutable - you can append, remove and insert into them. This is done using _list methods_.\n\nWe can access and change list elements:","68192c20":"# Sequences","87817715":"### Concatenation \nWe can concatenate strings using the addition operator `+`.","8cfcafbd":"### Exercise: String access","bb610c42":"Here, the last element is accessed using -1 index, and so on.","31779a99":"# Types\n\nThese are the basic Python data types:\n\n| Type | Description | Range | Use |\n|--------|-----------|-------|--------|\n| `int`  | Integers | -oo to oo | counting, indexing |\n| `float` | Decimal fractions | limited precision, depends on machine | calculations |\n| `complex` | Complex numbers | just two floats | complex calculations  |\n| `str` | Strings | unicode | text, categories |\n| `bool` | Booleans | `True` and `False` | boolean logic |\n\nWe can determine a variable's type using the `type` function.","66ce6d6c":"Power:","4568723c":"Python uses **zero-count** indexing: the first element has index 0.\n\nIn addition, there is also support for **reverse indexing** using negative numbers:","8f8fb537":"### Changing and adding records\nWe can change the dictionary by simply assigning a new value to a key.","41d3074d":"### Exercise: primality check\n\nImplement a simple primality check for the variable `n=97` (or some other value of your choice).\n\nFor each number `k` between 2 and `n` (or some other range if you prefer), check if `k` is a divider of `n` (using the modulo operation, right?).\nIf `k` is a divider you can break the loop using `break`.\n\n**Note** `for` can have an `else` clause that will be executed if we exited the `for` normally, without a `break` or an exception.","78b9c174":"Strings are objects of type `str`:","4a583c27":"`print` is a builtin function, and it can print text along with some execution -- in general `print` accepts as many arguments as we want, and separates them with spaces.","39b07b92":"# Dictionaries","b0666053":"The sequence below (named _seq_) consists of 20 characters. \n\n1. Print the 2nd and 7th characters.\n2. Print the 2nd character from the end.\n3. Slice the first half of the sequence.  \n4. Slice the second half of the sequence.  \n5. Slice the middle 10 characters","f2534a5e":"* Find the operation for which, `a` ? `b` = 336 ","56dc8557":"`pop` deletes an elements from a list by its index:","dfadd527":"### Strings as sequences\n\nStrings are text but can represent other things, too. For example, DNA sequences.\n\nAgain we can concat strings:","e6810729":"## `while` loop","8abebb6a":"**Dictionaries** are hashtables or maps: a data structure used to store collections of elements to be accessed with a _key_.\nKeys can be of any _immutable_ type - strings, integers, floats, etc.\nEach key refers to a single _value_.","8ac71058":"# Operators\n\n## Arithmetic operators\n\n| Symbol | Operator                    | Use    |\n|--------|-----------------------------|--------|\n| +      | Addition                    | x + y  |\n| -      | Substraction                | x - y  |\n| *      | Multiplication              | x * y  |\n| **     | Power                   | x ** y |\n| \/      | Decimal division            | x \/ y  |\n| \/\/     | Integer division            | x \/\/ y |\n| %      | Integer remainder           | x % y  |\n\nThis is fairly straightforward except maybe integer division `\/\/` and power `**`.","fd2fb3d6":"There are shortcuts for taking the first and last characters:","3478ea09":"Notice that the _start_ position is included, but not the _end_ position. We actually take the characters with indexes 2,3,4,5,6,7.","ff0cdebd":"![Python loop](http:\/\/2.bp.blogspot.com\/-7lXe1_Gou3k\/UX92PWche3I\/AAAAAAAAAFA\/JxD4u8St-9g\/s1600\/python+loop.jpg)","49b44c86":"## Lists\n\nLists are similar to strings in being sequential, only they can contain **any type of data**, not just characters. They are also mutable (we'll get back to that distinction).\n\nLists could even include mixed variable types.\n\nWe define a list just like any other variable, but use `[ ]` to surround the list elements and `,` to separate the elements.","98f7eb71":"### Access: Slicing\nWe can extract subsets of a string by using _slicing_, with the corresponding indexes.  \nRemember: indexes start from **0**!","c64e701b":"### Exercise: string loop","6083d8f4":"We can find the length of a string using the command `len`:","0865ae17":"## Exercise: Functions (HARD)\nWrite a function which given a secret and a code, decodes the secret and prints it out.\n","08b89e13":"## Exercise: if and else\n\n","602617a5":"`remove` finds and deletes an element from list:","0905ce02":"This is because strings are **immutable** whereas lists are **mutable**. We'll get back to this notion soon.","100eacf4":"## `bool`\n\nLastly, **`bool`** is for boolean variables that are either `True` or `False`:","06b1eb05":"# Exercise : Dictionary\nCreate a dictionary with 5 records.<br>\nEach record should be a song name as the key and the artist who preforms it as the value.","41bbe547":"If grade is  lower than 50 than add 10 points to it and print the new value.<br>\nAt the end print 'finished' in any case.","0783d9ec":"## **Exercise**: `print`","f9f792cf":"## Exercise: Find another exercise","cd17cd93":"Similarly, we can use this syntax to add new records: ","85e15330":"### Looping over strings\n","beecd225":"Add:","1a6cc659":"Define two variables, `a` and `b`, set 'a' to 2019 and 'b' to 6. <br>\n* Find the operation for which, `a` ? `b` = 336.5<br>","f207e306":"* Find the operation for which, `a` ? `b` =  3","dffe8a00":"If kmh is bigger than 120 print 'SLOW DOWN!' if it is not print 'safe driver',"}}