{"cell_type":{"d27b3295":"code","9c20d4ef":"code","d8a0793a":"code","611d495a":"code","35ff8115":"code","c0288745":"code","a9311a74":"code","9d63371f":"code","f9cbf3c5":"code","dbcbb9f3":"code","9ad32956":"code","77b8fac6":"code","0a95f1a7":"code","46467b67":"code","8c023b3e":"code","af91d5ff":"code","7b68fbcb":"code","5c9d7a6e":"code","9aa9d1e3":"code","f1e0f07a":"code","8747e5c7":"code","f30b3f23":"code","c5a0b0d4":"code","9cc5265a":"code","5a9acd39":"code","6a391d32":"code","df489d24":"code","498cf8fb":"code","ad3a185c":"code","7f88e7d2":"code","693c4875":"code","ca02d31f":"code","e640eed1":"code","709ce06c":"code","28ee7d8d":"code","cd7145b9":"code","e7cf6adb":"code","559b9a91":"code","fe9c536d":"code","730a91af":"code","ee6c4785":"code","c24cf8ff":"code","c1eab6f1":"code","aabac64c":"code","63315b7c":"code","7f55d407":"code","de0393f7":"code","7868aaa4":"code","4eecf679":"code","d53bb51f":"code","1b916c27":"code","38f34600":"code","fa89001c":"code","5d1fa4d1":"code","36462516":"code","8c0eecd0":"code","7cc643a3":"code","18c67c88":"code","9b0140d2":"code","e11d8423":"code","9525102e":"code","128dce1e":"code","86679986":"code","41ddad6c":"code","c32171f2":"code","bb547aae":"markdown","d3cd1a40":"markdown","d73fbf18":"markdown","0511e9da":"markdown","0d9bf0f4":"markdown","be07bd24":"markdown","779d54c5":"markdown","8d8f4209":"markdown","f5405994":"markdown","94f0b2d9":"markdown","50cf22ad":"markdown","39492e37":"markdown","90cff8cb":"markdown","2df84fb9":"markdown","f3c7da62":"markdown","9ab70dbf":"markdown","fe6d5ae9":"markdown","6c215152":"markdown","bfa1eafe":"markdown","7212d4a5":"markdown","4302be67":"markdown","942839ec":"markdown","20623d6a":"markdown","5b111df4":"markdown","347375e5":"markdown","3e7b6837":"markdown","66f32f58":"markdown","430c471f":"markdown","06c3e2bd":"markdown","fcd50f2f":"markdown","7888213e":"markdown","59c82c85":"markdown","1d7cf8e2":"markdown","9bc71d22":"markdown","c03a1ca5":"markdown","7ae1a0ef":"markdown","1341e989":"markdown","fc1ef4d6":"markdown","7cf460f8":"markdown","6a8de7c0":"markdown","8034e9bc":"markdown","fd1d6330":"markdown","f427fc68":"markdown","7557dc53":"markdown","55372184":"markdown"},"source":{"d27b3295":"myname=\"elvinagammed\" ","9c20d4ef":"import numpy as np \nimport pandas as pd \nimport os\nimport datetime\nfrom datetime import datetime\nfrom scipy import stats\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport re\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom collections import Counter\n\nimport gc\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nusers=pd.read_csv('..\/input\/meta-kaggle\/Users.csv')\nuser_ach=pd.read_csv('..\/input\/meta-kaggle\/UserAchievements.csv')\nfollowers=pd.read_csv('..\/input\/meta-kaggle\/UserFollowers.csv')\nsubmissions=pd.read_csv('..\/input\/meta-kaggle\/Submissions.csv')\ncompetitions=pd.read_csv(\"..\/input\/meta-kaggle\/Competitions.csv\")\nteams_mem=pd.read_csv('..\/input\/meta-kaggle\/TeamMemberships.csv')\nkernels=pd.read_csv('..\/input\/meta-kaggle\/Kernels.csv')\nforum_msg=pd.read_csv('..\/input\/meta-kaggle\/ForumMessages.csv')\nteams=pd.read_csv('..\/input\/meta-kaggle\/Teams.csv')\ndataset=pd.read_csv('..\/input\/meta-kaggle\/Datasets.csv')","d8a0793a":"gc.collect()","611d495a":"my_id=int(users[users['UserName']==myname]['Id'])\nmydisplayname=users[users['UserName']==myname]['DisplayName'].to_string().split(\"  \")[-1]\ntotal_medals_df=user_ach[user_ach['UserId']==my_id]\ntotal_medal=sum(total_medals_df['TotalGold'])+sum(total_medals_df['TotalSilver'])+sum(total_medals_df['TotalBronze'])\nkaggle_names=list(users['UserName'])\n\nmy_followers=followers[followers['FollowingUserId']==my_id].shape[0]\nmy_following=followers[followers['UserId']==my_id].shape[0]\n\nmy_join_date=users[users['UserName']==myname]['RegisterDate'].to_string().split(\"  \")[-1]\ntoday = datetime.now()\ndays_in_kaggle=(today-pd.to_datetime(my_join_date)).days\n\nmy_team_req=teams_mem[teams_mem['UserId']==my_id]['TeamId']\nmy_total_competitions=teams[teams['Id'].isin(list(my_team_req))&(teams['PrivateLeaderboardRank'].notnull())]['Id'].nunique()\n\n\n\nmy_total_kernels=kernels[kernels['AuthorUserId']==my_id].shape[0]\nmy_total_discussion=forum_msg[forum_msg['PostUserId']==my_id].shape[0]\nmy_total_dataset=dataset[dataset['CreatorUserId']==my_id].shape[0]\nmy_total_participation=my_total_competitions+my_total_kernels+my_total_discussion+my_total_dataset","35ff8115":"def get_tier(name):\n    tier=int(users[users['UserName']==name]['PerformanceTier'])\n    if (tier==0):\n        return \"Novice\"\n    elif (tier==1):\n        return \"Contributor\"\n    elif (tier==2):\n        return \"Expert\"\n    elif (tier==3):\n        return \"Master\"\n    else :\n        return \"Grandmaster\"\n    \nmy_tier=get_tier(myname)\n\nall_areas_list=[my_total_competitions,my_total_kernels,my_total_discussion,my_total_dataset]\nall_areas=pd.DataFrame({'areas':['Competition','Notebook','Discussion','Dataset'],'count':all_areas_list})","c0288745":"fig = make_subplots(\n    rows=4, cols=2,\n    specs=[[{\"type\": \"indicator\"},{\"type\": \"indicator\"} ],\n           [{\"type\": \"indicator\"},None],\n          [{\"type\": \"indicator\"},{\"type\": \"bar\",'rowspan':2}],\n          [{\"type\": \"indicator\"},None]])\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(days_in_kaggle),\n    title = {'text': \"Total Number of Days in Kaggle\",'font': {'color': 'white','size':15}},\n    number={'font':{'color': 'magenta','size':48}},\n),row=1, col=1)\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(total_medal),\n    title = {'text': \"Total Medals\",'font': {'color': 'white','size':15}},\n    number={'font':{'color': 'magenta','size':48}},\n   \n),row=2, col=1)\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(my_followers),\n    title = {'text': \"Total Followers\",'font': {'color': 'white','size':15}},\n    number={'font':{'color': 'magenta','size':48}},\n   \n),row=3, col=1)\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(my_following),\n   title = {'text': \"Total Following \",'font': {'color': 'white','size':15}},\n    number={'font':{'color': 'magenta','size':48}},\n   \n),row=4, col=1)\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(my_total_participation),\n   title = {'text': \"Total Participation \",'font': {'color': 'white','size':15}},\n    number={'font':{'color': 'magenta','size':48}},\n   \n),row=1, col=2)\n\nfig.add_trace(go.Bar(\n    x=all_areas['areas'],y=all_areas['count'],\n    marker={'color': \"magenta\"},  \n    text=all_areas['count'],\n    name=\"Participation - All Areas \",\n    textposition ='auto'),row=3, col=2)\n\nfig.update_layout(\n    title_text=mydisplayname+\" - \"+my_tier+\" - (\"+str(my_join_date)+\" -     )\",title_font_family=\"Times New Roman\",font=dict(size=18),\n    title_x=0.5,\n)\n\nfig.update_layout(template=\"plotly_dark\")\nfig.show()","a9311a74":"gc.collect()","9d63371f":"\ndef get_tier_name(tier):\n    if (tier==0):\n        return \"Novice\"\n    elif (tier==1):\n        return \"Contributor\"\n    elif (tier==2):\n        return \"Expert\"\n    elif (tier==3):\n        return \"Master\"\n    else :\n        return \"Grandmaster\"\n    \nfeatured_comp=competitions[(competitions['CanQualifyTiers']==True)]['Id']\ntier_tab=user_ach[user_ach['UserId']==my_id][['AchievementType','Tier','CurrentRanking','HighestRanking','Points']]\ntier_tab['tier_name']=tier_tab['Tier'].apply(lambda x:get_tier_name(x))\n\nmedal_tab=user_ach[user_ach['UserId']==my_id][['AchievementType','TotalGold','TotalSilver','TotalBronze']]\ntotal_colab=[my_total_competitions,my_total_kernels,my_total_discussion]\nmedal_tab['Total Medals']=medal_tab['TotalGold']+medal_tab['TotalSilver']+medal_tab['TotalBronze']\nmedal_tab['Total Participation']=total_colab\nmedal_tab['Medal Rate (%)']=round(medal_tab['Total Medals']\/medal_tab['Total Participation']*100)","f9cbf3c5":"competitions_teams_df=teams[['Id','CompetitionId','Medal','MedalAwardDate']][(teams['Id'].isin(list(my_team_req)))&(teams['CompetitionId'].isin(list(featured_comp)))&(teams['Medal'].notnull())]#['CompetitionId']\ncompetitions_teams_df['year']=pd.to_datetime(competitions_teams_df['MedalAwardDate']).dt.year\nyear_competition=competitions_teams_df['year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','year':'count'}).sort_values('year')\n\nkernels_df=kernels[['AuthorUserId','Medal','MedalAwardDate']][(kernels['AuthorUserId']==my_id)&kernels['Medal'].notnull()]\nkernels_df['year']=pd.to_datetime(kernels_df['MedalAwardDate']).dt.year\nyear_kernel=kernels_df['year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','year':'count'}).sort_values('year')\n\nmsg_df=forum_msg[['PostUserId','MedalAwardDate','Medal']][(forum_msg['PostUserId']==my_id)&(forum_msg['Medal'].notnull())]\nmsg_df['year']=pd.to_datetime(msg_df['MedalAwardDate']).dt.year\nyear_msg=msg_df['year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','year':'count'}).sort_values('year')","dbcbb9f3":"colorscale=[[0, '#4d004c'],[.5, '#f2e5ff'],[1, '#ffffff']]\nfig = ff.create_table(medal_tab, height_constant=60,colorscale=colorscale)\n\ntrace1 = go.Bar(x=year_competition['year'], y=year_competition['count'], xaxis='x3', yaxis='y3',\n                 text=year_competition['count'],\n                textposition=\"auto\",\n                marker=dict(color='dodgerblue'),\n                name='Competition Medals')\ntrace2 = go.Bar(x=year_kernel['year'], y=year_kernel['count'], xaxis='x3', yaxis='y3',\n                text=year_kernel['count'],\n                textposition=\"auto\",\n                marker=dict(color='green'),\n                name='Notebook Medals')\ntrace3 = go.Bar(x=year_msg['year'], y=year_msg['count'], xaxis='x3', yaxis='y3',\n                text=year_msg['count'],\n                textposition=\"auto\",\n                marker=dict(color='sienna'),\n                name='Discussion Medals')\n\nfig.add_traces([trace1, trace2,trace3])\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig['layout']['xaxis3'] = {}\nfig['layout']['yaxis3'] = {}\n\nfig.layout.yaxis.update({'domain': [0, .45]})\nfig.layout.yaxis3.update({'domain': [.6, 1]})\n\nfig.layout.yaxis3.update({'anchor': 'x3'})\nfig.layout.xaxis3.update({'anchor': 'y3'})\nfig.layout.yaxis3.update({'title': 'Number of Medals '})\n\nfig.layout.margin.update({'t':75, 'l':50})\nfig.layout.update({'title': 'Medalling Rate (Competiton,Script,Discussion) ','title_x':0.5})\n\nfig.layout.update({'height':800,'width':1200})\nfig.show()\n","9ad32956":"def rank_maintain(curr,high):\n    if(curr>high):\n        res= ((curr-high)\/curr)*100\n        return res\n    elif(curr==high):\n        res=curr\n        return ((curr-high)\/curr)*100\n    else:\n        return None","77b8fac6":"if(len(tier_tab)>0):\n    tier_tab['rank_maintain']=tier_tab.apply(lambda x:rank_maintain(x.CurrentRanking,x.HighestRanking),axis=1)\n\n    first_rank_comp=int(user_ach[['AchievementType','Points']][user_ach['AchievementType']==\"Competitions\"].sort_values('Points',ascending=False)['Points'][:1])\n    first_rank_note=int(user_ach[['AchievementType','Points']][user_ach['AchievementType']==\"Scripts\"].sort_values('Points',ascending=False)['Points'][:1])\n    first_rank_diss=int(user_ach[['AchievementType','Points']][user_ach['AchievementType']==\"Discussion\"].sort_values('Points',ascending=False)['Points'][:1])\n    first_rank_points=[first_rank_comp,first_rank_note,first_rank_diss]\n\n    tier_tab['First Rank']=first_rank_points\n    tier_tab['More to first']=tier_tab['First Rank']-tier_tab['Points']\n    tier_tab['percentage_more_points']=((tier_tab['First Rank']-tier_tab['Points'])\/tier_tab['First Rank'])*100\n    \n    \n    \n    high_comp_main=tier_tab[(tier_tab['AchievementType']=='Competitions')]['rank_maintain'].to_string().split(\" \")[-1]\n    high_comp_main= 0 if high_comp_main=='None' else float(round(tier_tab[(tier_tab['AchievementType']=='Competitions')]['rank_maintain'],3))\n\n    high_script_main=tier_tab[(tier_tab['AchievementType']=='Scripts')]['rank_maintain'].to_string().split(\" \")[-1]\n    high_script_main= 0 if high_script_main=='None' else float(round(tier_tab[(tier_tab['AchievementType']=='Scripts')]['rank_maintain'],3))\n\n    high_dis_main=tier_tab[(tier_tab['AchievementType']=='Discussion')]['rank_maintain'].to_string().split(\" \")[-1]\n    high_dis_main= 0 if high_dis_main=='None' else float(round(tier_tab[(tier_tab['AchievementType']=='Discussion')]['rank_maintain'],3))\n\n    curr_comp=float(tier_tab[(tier_tab['AchievementType']=='Competitions')]['CurrentRanking'])\n    curr_comp=curr_comp if curr_comp>0 else 0\n\n    curr_note=float(tier_tab[(tier_tab['AchievementType']=='Scripts')]['CurrentRanking'])\n    curr_note=curr_note if curr_note>0 else 0\n\n    curr_dis=float(tier_tab[(tier_tab['AchievementType']=='Discussion')]['CurrentRanking'])\n    curr_dis=curr_dis if curr_dis>0 else 0\n\n\n    fig = make_subplots(\n        rows=6, cols=3,\n        specs=[[{\"type\": \"indicator\"},{\"type\": \"indicator\"} ,{\"type\": \"indicator\"} ],\n           [{\"type\": \"indicator\"},{\"type\": \"indicator\"} ,{\"type\": \"indicator\"} ],\n          [{\"type\": \"indicator\"},{\"type\": \"indicator\"} ,{\"type\": \"indicator\"} ],\n          [{\"type\": \"indicator\"},{\"type\": \"indicator\"} ,{\"type\": \"indicator\"} ],\n          [{\"type\": \"indicator\"},{\"type\": \"indicator\"} ,{\"type\": \"indicator\"} ],\n          [{\"type\": \"indicator\"},{\"type\": \"indicator\"} ,{\"type\": \"indicator\"} ]])\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        title = {'text': \"Competitions\",'font': {'color': 'dodgerblue','size':30}},\n        number={'font':{'color': 'magenta','size':30}},\n),row=1, col=1)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = curr_comp,\n\n        title = {'text': \"Current Rank\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':30}},\n),row=2, col=1)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value =  float(tier_tab[(tier_tab['AchievementType']=='Competitions')]['HighestRanking']),\n        title = {'text': \"High Rank\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':30}},   \n),row=3, col=1)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = high_comp_main ,\n        title = {'text': \"How far is high rank\",'font': {'color': 'white','size':15}},\n        number={'suffix':\"%\",'font':{'color': 'magenta','size':20}},\n   \n),row=4, col=1)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Competitions')]['Points']),\n        title = {'text': \"Total Points\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':20}},\n   \n),row=5, col=1)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Competitions')]['percentage_more_points']),\n        title = {'text': \"More % of points to be first\",'font': {'color': 'white','size':15}},\n        number={'suffix':\"%\",'font':{'color': 'magenta','size':20}},\n   \n),row=6, col=1)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n       title = {'text': \"Notebooks \",'font': {'color': 'green','size':30}},\n        number={'font':{'color': 'magenta','size':30}},\n   \n),row=1, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = curr_note ,\n       title = {'text': \"Current Rank\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':30}},\n   \n),row=2, col=2)\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Scripts')]['HighestRanking']),\n       title = {'text': \"High Rank\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':30}},\n   \n),row=3, col=2)\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value =  high_script_main ,\n        title = {'text': \"How far is high rank\",'font': {'color': 'white','size':15}},\n        number={'suffix':\"%\" ,'font':{'color': 'magenta','size':20}},\n   \n),row=4, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Scripts')]['Points']),\n        title = {'text': \"Total Points\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':20}},\n   \n),row=5, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Scripts')]['percentage_more_points']),\n        title = {'text': \"More % of points to be first\",'font': {'color': 'white','size':15}},\n        number={'suffix':\"%\",'font':{'color': 'magenta','size':20}},\n   \n),row=6, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n       title = {'text': \"Discussion\",'font': {'color': 'sienna','size':30}},\n        number={'font':{'color': 'magenta','size':30}},\n   \n),row=1, col=3)\n\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = curr_dis,\n        title = {'text': \"Current Rank\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':30}},\n   \n),row=2, col=3)\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Discussion')]['HighestRanking']),\n        title = {'text': \"High Rank\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':30}},\n   \n),row=3, col=3)\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = high_dis_main,\n       title = {'text': \"How far is high rank\",'font': {'color': 'white','size':15}},\n        number={'suffix':\"%\" ,'font':{'color': 'magenta','size':20}},\n   \n),row=4, col=3)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Discussion')]['Points']),\n        title = {'text': \"Total Points\",'font': {'color': 'white','size':15}},\n        number={'font':{'color': 'magenta','size':20}},\n   \n),row=5, col=3)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = float(tier_tab[(tier_tab['AchievementType']=='Discussion')]['percentage_more_points']),\n        title = {'text': \"More % of points to be first\",'font': {'color': 'white','size':15}},\n        number={'suffix':\"%\",'font':{'color': 'magenta','size':20}},\n   \n),row=6, col=3)\n    fig.update_layout(title=\"Ranking Proficiency - 3 Areas \",title_x=0.5,\n        font=dict(size=24),\n        template=\"plotly_dark\")\n    fig.show()\nelse:\n    print(\"You need to achieve atleast one rank \")\n    ","0a95f1a7":"my_team_req=teams_mem[teams_mem['UserId']==my_id]['TeamId']\nmy_total_competitions=teams[(teams['Id'].isin(list(my_team_req)))&(teams['PrivateLeaderboardRank'].notnull())]['Id']\n\nmy_team_temp=teams[teams['Id'].isin(list(my_total_competitions))]\nmy_team_temp_df1=pd.merge(my_team_temp,submissions,left_on=\"Id\",right_on=\"TeamId\",how=\"left\")\nmy_team_data=pd.merge(my_team_temp_df1,competitions,left_on=\"CompetitionId\",right_on=\"Id\",how=\"left\")\nmy_team_data['Medal']=np.where(my_team_data['Medal'].isnull(),\"No Medal\",np.where(my_team_data['Medal']==1.0,\"Gold\",\n                                                                                  np.where(my_team_data['Medal']==2.0,\"Silver\",\n                                                                                     np.where(my_team_data['Medal']==3.0,\"Bronze\",\"Null\"))))\nmy_team_data['MedalAwardDate']=pd.to_datetime(my_team_data['MedalAwardDate'])\ntitle_med=my_team_data[['Title','Medal']].groupby(['Title','Medal']).size().reset_index().rename(columns={0:'count'})\n\n\nmy_team_data['SubmissionDate']=pd.to_datetime(my_team_data['SubmissionDate'])\nsub_daily=my_team_data['SubmissionDate'].value_counts().to_frame().reset_index().rename(columns={'index':'Date','SubmissionDate':'count'}).sort_values('Date')\nmonth_df = sub_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"M\").sum().reset_index()\n\nmed_comps=title_med['Medal'].value_counts().to_frame().reset_index().rename(columns={'index':'Medal','Medal':'count'})\n\nmy_team_ids=my_team_data['Id_x'].unique()\nmy_whole_mates=teams_mem[teams_mem['TeamId'].isin(list(my_team_ids))]\nmy_whole_mates_df=my_whole_mates['TeamId'].value_counts().to_frame().reset_index()\nmy_whole_mates_df['num_mem']=np.where(my_whole_mates_df['TeamId']>1,\"Teamed\",\"Solo\")\nteamed_or_not=my_whole_mates_df['num_mem'].value_counts().to_frame().reset_index().rename(columns={'index':'Teamed_or_not','num_mem':'count'})\n","46467b67":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=(\"Medals\",\"Teaming\",\"Submissions over month\"),\n    specs=[[{\"type\": \"pie\"},{\"type\": \"pie\" }],\n          [ {\"type\": \"scatter\",\"colspan\": 2} , None]])\n\n\ncolors=['lightblue','silver','indianred','gold']\ncolors2=['green','orange']\n\nfig.add_trace(go.Pie(labels=med_comps['Medal'], values=med_comps['count'],marker_colors=colors,textinfo='percent+label'),row=1, col=1)\n\nfig.add_trace(go.Pie(labels=teamed_or_not['Teamed_or_not'], values=teamed_or_not['count'],marker_colors=colors2,textinfo='percent+label'),row=1, col=2)\n\nfig.add_trace(go.Scatter(x=month_df['Date'],\n                                y=month_df['count'],\n                               mode='markers+lines',\n                               name=\"Submissions\",\n                               marker_color='dodgerblue'),row=2, col=1)\n\nfig.update_layout(\n    title_text='Competition - Mini Infograph ',\n    template=\"plotly_dark\",\n    title_x=0.5)\nfig.show()\n","8c023b3e":"temp_title_med=pd.merge(title_med,competitions[competitions['HostSegmentTitle']=='Featured'],on=\"Title\",how=\"left\")\ntemp_title_med['DeadlineDate']=pd.to_datetime(temp_title_med['DeadlineDate']).dt.date\ntitle_medal=temp_title_med[['Title','Medal','count','DeadlineDate']].sort_values('DeadlineDate')\nprint(\"Average Submission per competition: {} \".format(round(title_medal['count'].mean())))","af91d5ff":"fig = px.scatter(title_medal, x=\"Title\", y=\"count\", color=\"Medal\",color_discrete_sequence=[\"lightblue\", \"indianred\",\"silver\",\"gold\"],\n                 title=\"String 'size' values mean discrete colors\")\nfig.update_xaxes(tickangle=45)\nfig.update_traces(marker=dict(size=12,\n                             ),\n                  selector=dict(mode='markers'))\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='My Submissions vs My Medals ',title_x=0.5,\n                  xaxis_title=\"Competitions \",\n                  yaxis_title=\"Number of Submissions \",height=800,\n                 legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1))\n\nfig.show()\n","7b68fbcb":"fig = go.Figure(data=go.Scatter(x=sub_daily['Date'],\n                                y=sub_daily['count'],\n                                mode='lines',\n                               marker_color='dodgerblue')) \n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title=\"Daily Submissions for Competitions \",\n                  xaxis_title=\"Date \",\n                  yaxis_title=\"Number of Submissions \",title_x=0.5)\nfig.show()\n","5c9d7a6e":"week_df = sub_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"W\").mean().reset_index()\nfig = go.Figure(data=go.Scatter(x=week_df['Date'],\n                                y=week_df['count'],\n                               mode='markers+lines',\n                               marker_color='dodgerblue')) \n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title=\"Weekly Average Submissions \",xaxis_title=\"Date \",\n                  yaxis_title=\"Number of Submissions \",title_x=0.5,\n                  xaxis=dict(tickformat=\"%b-%Y\",nticks=20))\nfig.show()\n","9aa9d1e3":"title_rank=my_team_data[['Title','PrivateLeaderboardRank']].groupby(['Title','PrivateLeaderboardRank']).size().reset_index().rename(columns={0:'count'})","f1e0f07a":"fig = go.Figure(data=[go.Histogram(x=title_rank['count'],  \n                                  marker_color=\"dodgerblue\",\n                      )])\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title=\"Distribution of Ranks \",\n                  xaxis_title=\"Rank \",\n                  yaxis_title=\"Counts\",title_x=0.5)\nfig.show()\n","8747e5c7":"fig = go.Figure(data=go.Scatter(x=title_rank['PrivateLeaderboardRank'],\n                                y=title_rank['count'],\n                                mode='markers',\n                               marker_color='dodgerblue'))  \nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title='Rank vs Submission',\n                  xaxis_title=\"Rank Achieved \",\n                  yaxis_title=\"Number of Submissions \")\nfig.show()\n","f30b3f23":"my_team_data['sub_month']=pd.to_datetime(my_team_data['SubmissionDate']).dt.strftime('%B') \nmy_team_data['sub_day']=pd.to_datetime(my_team_data['SubmissionDate']).dt.strftime('%A') \n\nmonthly_sub=my_team_data['sub_month'].value_counts().to_frame().reset_index().rename(columns={'index':'Month','sub_month':'Count'})\ncustom_dict ={\"January\":0,\"February\":1,\"March\":2, \"April\":3,\"May\":4,\"June\":5,\"July\":6,\"August\":7,\"September\":8,\"October\":9,\"November\":10,\"December\":11}\nmonthly_sub['Month'] = pd.Categorical(monthly_sub['Month'], categories=sorted(custom_dict, key=custom_dict.get), ordered=True)\nmonthly_sub=monthly_sub.sort_values('Month').reset_index(drop=True)\n\ndays_sub=my_team_data['sub_day'].value_counts().to_frame().reset_index().rename(columns={'index':'Days','sub_day':'Count'})\ncustom_dict_days ={\"Monday\":0,\"Tuesday\":1,\"Wednesday\":2, \"Thursday\":3,\"Friday\":4,\"Saturday\":5,\"Sunday\":6}\ndays_sub['Days'] = pd.Categorical(days_sub['Days'], categories=sorted(custom_dict_days, key=custom_dict_days.get),ordered=True)\ndays_sub=days_sub.sort_values('Days').reset_index(drop=True)\n","c5a0b0d4":"fig = make_subplots(\n    rows=1, cols=2,subplot_titles=(\"Months\",\"Days\"),\n    specs=[[{\"type\": \"scatter\"},{\"type\": \"scatter\" }],\n          ])\n\nfig.add_trace(go.Bar(\n    x=monthly_sub['Month'],y=monthly_sub['Count'],\n    marker={'color': \"darkblue\"},  \n    text=monthly_sub['Count'],\n    textposition = \"outside\",\n    name=\"Months\",\n), row=1,col=1)\n\nfig.add_trace(go.Bar(\n    x=days_sub['Days'],y=days_sub['Count'],\n    marker={'color': \"dodgerblue\"},  \n    text=days_sub['Count'],\n     name=\"Days\",\n    textposition = \"outside\",\n), row=1,col=2)\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='Favourite - Months\/Days',xaxis_title=\"Month \",\n                  yaxis_title=\"Number of Submissions \",title_x=0.5)\nfig.show()","9cc5265a":"top_10_dedication=my_team_data['Title'].value_counts().to_frame().reset_index().rename(columns={'index':'Title','Title':'count'})[:10]\ntop_10_best_ranks=my_team_data[['Title','PrivateLeaderboardRank']].drop_duplicates().reset_index(drop=True).sort_values('PrivateLeaderboardRank')[:10]","5a9acd39":"fig = make_subplots(\n    rows=1, cols=2,subplot_titles=(\"Top 10 Ranks Achieved\",\"Most Submitted Competitions\"),\n    specs=[[{\"type\": \"table\"},{\"type\": \"table\"}]]\n)\n\ncolors1=['lightgreen','lightpink']\nfig.add_trace(go.Table(header=dict(values=['Title', 'Rank'],line_color='black', fill_color='dodgerblue',\n                                  align='center',font=dict(color='white', size=14)),\n                 cells=dict(values=[top_10_best_ranks['Title'], top_10_best_ranks['PrivateLeaderboardRank']],line_color=\"black\",\n                           align='center', font=dict(color='black', size=12))\n                              ),row=1, col=1)\nfig.add_trace(go.Table(header=dict(values=['Title', 'Total Submissions'],line_color='black', fill_color='dodgerblue',\n                                  align='center',font=dict(color='white', size=14)),\n                 cells=dict(values=[top_10_dedication['Title'], top_10_dedication['count']],line_color=\"black\",\n                           align='center', font=dict(color='black', size=12))\n                              ),row=1, col=2)\n\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(\n    showlegend=False,\n    title_text=\"Top 10 Achievements\/Dedications \",title_x=0.5)\n\nfig.show()\n","6a391d32":"del competitions,teams_mem,teams,my_team_req,my_team_temp_df1,my_whole_mates,my_whole_mates_df\ngc.collect()","df489d24":"kv=pd.read_csv('..\/input\/meta-kaggle\/KernelVersions.csv')\nkernel_vote=pd.read_csv('..\/input\/meta-kaggle\/KernelVotes.csv')","498cf8fb":"my_kernels_list=kernels[kernels['AuthorUserId']==my_id]\nmy_kernels_list['public_year']=pd.to_datetime(my_kernels_list['MadePublicDate']).dt.year\nyear_kernels=my_kernels_list['public_year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','public_year':'count'})\nmy_total_upvotes=my_kernels_list['TotalVotes'].sum()\nmy_total_views=my_kernels_list['TotalViews'].sum()\n\nnon_medaled_kernel=my_kernels_list[my_kernels_list['Medal'].isnull()].shape[0]\nmedaled_kernel=my_kernels_list[my_kernels_list['Medal'].notnull()].shape[0]\nawarded_col=[\"Awarded\",\"Not Awarded\"]\nawarded_count=[medaled_kernel,non_medaled_kernel]\nmedal_or_not_df=pd.DataFrame({'Awarded_or_Not':awarded_col,'Count':awarded_count})\n\nfork=my_kernels_list[my_kernels_list['ForkParentKernelVersionId'].notnull()].shape[0]\nnon_fork=my_kernels_list[my_kernels_list['ForkParentKernelVersionId'].isnull()].shape[0]\nfork_df=pd.DataFrame({'forkornot':['Fork','No Fork'],'count':[fork,non_fork]})\n","ad3a185c":"fig = make_subplots(\n    rows=2, cols=3,subplot_titles=(\"\",\"\",\"\", \"Awarded or Not\",\"Kernels Created By Year \",\"\"),\n    specs=[[{\"type\": \"indicator\"},{\"type\": \"indicator\"},{\"type\": \"indicator\"} ],\n          [{\"type\": \"pie\"}, {\"type\": \"Bar\",'colspan':2} , None]])\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(my_total_kernels),\n    number={'font':{'color': 'green','size':50}},\n    title = {'text': \"Total Notebooks\",'font': {'color': 'white','size':20}},\n),row=1, col=1)\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(my_total_upvotes),\n    number={'font':{'color': 'green','size':50}},\n    title = {'text': \"Total Votes\",'font': {'color': 'white','size':20}},\n),row=1, col=2)\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(my_total_views),\n    number={'font':{'color': 'green','size':50}},\n    title = {'text': \"Total Views\",'font': {'color': 'white','size':20}},\n),row=1, col=3)\n\ncolorspie=['blue','red']\nfig.add_trace(go.Pie(labels=medal_or_not_df['Awarded_or_Not'], marker_colors=colorspie,\n                     values=medal_or_not_df['Count'],textinfo='value+percent',\n                             insidetextorientation='radial'),row=2, col=1)\n\n\nfig.add_trace(go.Bar(\n    x=year_kernels['year'],y=year_kernels['count'],\n    marker={'color': \"green\"},  \n    text=year_kernels['count'],\n    name=\"Kernels by Year\",\n    textposition ='auto',\n),row=2, col=2)\n\nfig.update_layout(\n    title_text='Notebook - Mini Infograph ',\n    template=\"plotly_dark\",\n    title_x=0.5)\n\nfig.show()","7f88e7d2":"kernel_daily=my_kernels_list['MadePublicDate'].value_counts().to_frame().reset_index().rename(columns={'index':'Date','MadePublicDate':'count'})\nkernel_daily['Date']=pd.to_datetime(kernel_daily['Date'])\nmonth_kernel_df = kernel_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"M\").sum().reset_index()\n\nmy_versions_df=kv[(kv['AuthorUserId']==my_id)]\nmy_versions_df['Date']=pd.to_datetime(my_versions_df['CreationDate']).dt.date\nversion_daily=my_versions_df['Date'].value_counts().to_frame().reset_index().rename(columns={'index':'Date','Date':'count'})\nversion_daily['Date']=pd.to_datetime(version_daily['Date'])\nmonth_version_df = version_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"M\").sum().reset_index()","693c4875":"fig = make_subplots(rows=2, cols=1,\n                   shared_xaxes=True, \n                    vertical_spacing=0.02) \nfig.add_trace(go.Scatter(x=month_kernel_df['Date'],\n                                y=month_kernel_df['count'],\n                                mode='markers+lines',\n                                name=\"Kernels\",\n                               marker_color='green'),row=1,col=1) \n\nfig.add_trace(go.Scatter(x=month_version_df['Date'],\n                                y=month_version_df['count'],\n                                mode='markers+lines',\n                                name=\"Versions\",\n                               marker_color='violet'),row=2,col=1) \n\n\nfig.update_layout(title='Monthly Kernels & Verisons',\n                  xaxis_title=\"Date \",\n                  yaxis_title=\"Number of Kernels & Versions \",title_x=0.5)\nfig.show()\n","ca02d31f":"if(len(my_kernels_list)>1):\n    import scipy.stats\n\n    corr_vote=round(scipy.stats.pearsonr(my_kernels_list['TotalViews'], my_kernels_list['TotalVotes'])[0],4)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(my_kernels_list['TotalViews'],my_kernels_list['TotalVotes'])\n    line = slope*my_kernels_list['TotalViews']+intercept\n\n    fig=go.Figure()\n    fig.add_traces(go.Scatter(\n                  x=my_kernels_list['TotalViews'],\n                  y=my_kernels_list['TotalVotes'],\n                  mode='markers',\n                  text=my_kernels_list['CurrentUrlSlug'],\n                  marker = dict(\n                  color = 'green'\n                  )))\n\n    fig.add_traces(go.Scatter(\n                  x=my_kernels_list['TotalViews'],\n                  y=line,\n                  mode='lines',\n                  marker=go.Marker(color='red'),\n                  name='Fit'\n                  ))\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_layout(title_text='Votes vs Views - Correlation: {} '.format(corr_vote),\n        xaxis_title_text='Total Views ',\n        yaxis_title_text='Total Votes ', \n        title_x=0.5,showlegend=False)\n\n    fig.show()\nelse:\n    print(\"You need to create more than 1 notebook to check Views and Votes relationship \")\n    ","e640eed1":"if(len(my_kernels_list)>0):\n    fig = make_subplots(\n        rows=3, cols=2,subplot_titles=(\"Distribution-Votes\",\"Average Votes\",\"Distribution-Views\",\"Average Views\",\"Distribution-Comments\",\"Average Comments\"),\n        specs=[[{\"type\": \"histogram\"},{\"type\": \"indicator\"}],\n           [{\"type\": \"histogram\"},{\"type\": \"indicator\"}],\n          [{\"type\": \"histogram\"}, {\"type\": \"indicator\"}]])\n\n    fig.add_trace(go.Histogram(x=my_kernels_list[\"TotalVotes\"],marker_color='green',name=\"Total Votes per Kernel\", \n        opacity=1),row=1, col=1)\n    \n    fig.add_trace(go.Histogram(x=my_kernels_list[\"TotalViews\"],marker_color='green',name=\"Total Views per Kernel\",\n        opacity=1),row=2, col=1)\n\n    fig.add_trace(go.Histogram(x=my_kernels_list[\"TotalComments\"],marker_color='green',name=\"Total Comments per Kernel\",\n        opacity=1),row=3, col=1)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(my_kernels_list[\"TotalVotes\"].mean()),\n        number={'font':{'color': 'green','size':60}},\n),row=1, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(my_kernels_list[\"TotalViews\"].mean()),\n        number={'font':{'color': 'green','size':60}},\n),row=2, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(my_kernels_list[\"TotalComments\"].mean()),\n        number={'font':{'color': 'green','size':60}},\n),row=3, col=2)\n\n    fig.update_layout(\n    title_text='Votes-Views-Comments ',template=\"ggplot2\",showlegend=False,\n    title_x=0.5,\n)\n\n    fig.show()\nelse:\n    print(\"You did not publish any notebook \")","709ce06c":"if(len(my_kernels_list)>1):\n    \n    x=my_kernels_list['TotalViews']\n    y=my_kernels_list['TotalVotes']\n    fig = go.Figure()\n    fig.add_trace(go.Histogram2dContour(\n            x = x,\n            y = y,\n            colorscale = 'gray',\n            reversescale = True,\n            xaxis = 'x',\n            yaxis = 'y'\n        ))\n    fig.add_trace(go.Scatter(\n            x = x,\n            y = y,\n            xaxis = 'x',\n            yaxis = 'y',\n            mode = 'markers',\n            marker = dict(\n                color = 'green',  \n                size = 3\n            )\n        ))\n    fig.add_trace(go.Histogram(\n            y = y,\n            xaxis = 'x2',\n            marker = dict(\n                color = 'rgba(0,0,0,1)'\n            )\n        ))\n    fig.add_trace(go.Histogram(\n            x = x,\n            yaxis = 'y2',\n            marker = dict(\n                color = 'rgba(0,0,0,1)'\n            )\n        ))\n\n    fig.update_layout(\n        autosize = False,\n        xaxis = dict(\n            zeroline = False,\n            domain = [0,0.85],\n            showgrid = False,\n            title=\"Views\"\n        ),\n        yaxis = dict(\n            zeroline = False,\n            domain = [0,0.85],\n            showgrid = False,\n            title=\"Votes\"\n        ),\n        xaxis2 = dict(\n            zeroline = False,\n            domain = [0.85,1],\n            showgrid = False\n        ),\n        yaxis2 = dict(\n            zeroline = False,\n            domain = [0.85,1],\n            showgrid = False\n        ),\n        height = 600,\n        width = 800,\n        bargap = 0,\n        hovermode = 'closest',\n        showlegend = False,\n        title_text=\"2D HistContour Views Vs Votes \",title_x=0.5\n    )\n\n    fig.show()\nelse:\n    print(\"You need to create more than 1 notebook to check Views and Votes relationship \")","28ee7d8d":"if(len(my_kernels_list)>0):\n    kernel_vote_df=kernel_vote[kernel_vote['KernelVersionId'].isin(list(my_versions_df['Id']))]\n    kernel_vote_df['VoteDate']=pd.to_datetime(kernel_vote_df['VoteDate'])\n\n    daily_votes=kernel_vote_df['VoteDate'].value_counts().reset_index().rename(columns={'index':'Date','VoteDate':'Count'}).sort_values('Date')\n    daily_vote_mean=daily_votes[daily_votes['Date']>'2020-02-29']['Count'].mean() \n    daily_vote_mean=round(daily_votes[daily_votes['Date']>'2020-02-29']['Count'].mean()) if(daily_vote_mean>0) else 0\n\n    fig = go.Figure(go.Indicator(\n    mode = \"number\",\n        value = daily_vote_mean,\n        title = {\"text\": \"Last 6 Month Average Upvotes per Day\",'font': {'size':26}},\n        number={'font':{'color': 'green','size':50}},\n        domain = {'y': [0.50, 1], 'x': [0.50, 0.50]}))\n\n    fig.add_trace(go.Scatter(x=daily_votes['Date'],\n                                    y=daily_votes['Count'],\n                                    mode='lines',\n                                   marker_color='green'))  \n    fig.update_xaxes(rangeslider_visible=True)\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_layout(title='Daily Upvotes ',\n                      xaxis_title=\"Date \",\n                      yaxis_title=\"Number of Upvotes \",title_x=0.5)\n    fig.show()\nelse:\n    print(\"You did not publish any notebook \")\n    ","cd7145b9":"if(len(my_kernels_list)>0):\n    title=list(my_kernels_list['CurrentUrlSlug'])\n    corpus=[]\n    for x in list(my_kernels_list['CurrentUrlSlug'].str.split(\"-\").dropna()):\n        for i in x:\n            corpus.append(i)\n\n    fig, (ax2) = plt.subplots(1,1,figsize=[17, 10])\n    wordcloud2 = WordCloud(background_color='black',colormap=\"Greens_r\", \n                            width=600,height=400).generate(\" \".join(corpus))\n    ax2.imshow(wordcloud2,interpolation='bilinear')\n    ax2.axis('off')\n    ax2.set_title('Most Used Words in Title ',fontsize=35)\nelse:\n    print(\"You did not publish any notebook \")","e7cf6adb":"top_10_kernels=my_kernels_list[['CurrentUrlSlug','TotalVotes']].sort_values('TotalVotes',ascending=False)[:10]\ncolorscaleg=[[0, '#006400'],[.5, '#32CD32'],[1, '#90EE90']]\nfig = ff.create_table(top_10_kernels,colorscale=colorscaleg)\nfig.show()","559b9a91":"del kernels,my_kernels_list,kv,kernel_vote,month_kernel_df,kernel_daily,my_versions_df,version_daily,month_version_df,kernel_vote_df,daily_votes\ngc.collect()","fe9c536d":"forums=pd.read_csv('..\/input\/meta-kaggle\/Forums.csv')\nforums_topic=pd.read_csv('..\/input\/meta-kaggle\/ForumTopics.csv')\nforum_msg_vote=pd.read_csv('..\/input\/meta-kaggle\/ForumMessageVotes.csv')\nforum_msg=pd.read_csv('..\/input\/meta-kaggle\/ForumMessages.csv')","730a91af":"my_discussion_list=forum_msg[forum_msg['PostUserId']==my_id]\ntotal_discussion_votes=forum_msg_vote[forum_msg_vote['ToUserId']==my_id].shape[0]\ntotal_replies=my_discussion_list[my_discussion_list['ReplyToForumMessageId'].notnull()].shape[0]\n\nmedal_discussion=my_discussion_list[my_discussion_list['Medal'].notnull()].shape[0]\nnon_medal_discussion=my_discussion_list[my_discussion_list['Medal'].isnull()].shape[0]\nmedal_df_discussion=pd.DataFrame({'medalornot':['Medal','No Medal'],'count':[medal_discussion,non_medal_discussion]})\n\nmy_discussion_list['year']=pd.to_datetime(my_discussion_list['PostDate']).dt.year\nyear_discussion=my_discussion_list['year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','year':'count'}).sort_values('year')","ee6c4785":"fig = make_subplots(\n    rows=2, cols=3,subplot_titles=(\"\",\"\",\"\", \"Awarded or Not\",\"Discussion Created By Year\",\"\"),\n    specs=[[{\"type\": \"indicator\"},{\"type\": \"indicator\"},{\"type\": \"indicator\"} ],\n          [{\"type\": \"pie\"}, {\"type\": \"Bar\",'colspan':2} , None]])\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(my_discussion_list.shape[0]),\n    number={'font':{'color': 'sienna','size':60}},\n    title = {'text': \"Total Discussions\",'font': {'color': 'white','size':20}},\n),row=1, col=1)\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(total_discussion_votes),\n    number={'font':{'color': 'sienna','size':60}},\n    title = {'text': \"Total Votes\",'font': {'color': 'white','size':20}},\n),row=1, col=2)\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = int(total_replies),\n    number={'font':{'color': 'sienna','size':60}},\n    title = {'text': \"Total Replies\",'font': {'color': 'white','size':20}},\n),row=1, col=3)\n\ncolorspie=['blue','red']\nfig.add_trace(go.Pie(labels=medal_df_discussion['medalornot'], marker_colors=colorspie,\n                     values=medal_df_discussion['count'],textinfo='value+percent',\n                             insidetextorientation='radial'),row=2, col=1)\n\nfig.add_trace(go.Bar(\n    x=year_discussion['year'],y=year_discussion['count'],\n    marker={'color': \"sienna\"},  \n    text=year_discussion['count'],\n    name=\"Discussions by Year\",\n    textposition ='auto',\n),row=2, col=2)\n\n\nfig.update_layout(\n    title_text='Discussions - Mini Infograph ',\n    template=\"plotly_dark\",\n    title_x=0.5,\n)\n\nfig.show()\n","c24cf8ff":"my_discussion_list['Date']=pd.to_datetime(my_discussion_list['PostDate']).dt.date\ndiscussion_daily=my_discussion_list['Date'].value_counts().to_frame().reset_index().rename(columns={'index':'Date','Date':'count'})\ndiscussion_daily['Date']=pd.to_datetime(discussion_daily['Date'])\nmonth_discussion_df = discussion_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"M\").sum().reset_index()\nweek_discussion_df = discussion_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"W\").sum().reset_index()","c1eab6f1":"if(len(my_discussion_list)>0):\n    fig=go.Figure(go.Scatter(x=month_discussion_df['Date'],\n                                y=month_discussion_df['count'],\n                                mode='markers+lines',\n                                name=\"Discussion\",\n                               marker_color='sienna'))\n\n    fig.update_xaxes(nticks=20,tickangle=45)\n    fig.update_layout(title='Monthly Discussions ',xaxis_title=\"Date \",\n                      yaxis_title=\"Number of Discussions \",title_x=0.5,\n                xaxis_tickformat=\"%b-%Y\",)\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)    \n    fig.show()\nelse:\n    print(\"You have made no discussion\")\n    ","aabac64c":"if(len(my_discussion_list)>0):\n    fig=go.Figure(go.Scatter(x=week_discussion_df['Date'],\n                                y=week_discussion_df['count'],\n                                mode='markers+lines',\n                                name=\"Discussion\",\n                               marker_color='sienna'))\n\n    fig.update_xaxes(nticks=40,tickangle=45)\n    fig.update_layout(title='Weekly Discussions ',xaxis_title=\"Date \",\n                      yaxis_title=\"Number of Discussions \",title_x=0.5,\n                xaxis_tickformat=\"%b-%Y\",)\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.show()\nelse:\n    print(\"You have made no discussion\")\n    ","63315b7c":"if(len(my_discussion_list)>0):\n    my_discussion_votes=forum_msg_vote[forum_msg_vote['ToUserId']==my_id]\n    my_discussion_votes['VoteDate']=pd.to_datetime(my_discussion_votes['VoteDate'])\n\n    daily_discussion_votes=my_discussion_votes['VoteDate'].value_counts().reset_index().rename(columns={'index':'Date','VoteDate':'Count'}).sort_values('Date')\n    daily_discussion_vote_mean=daily_discussion_votes[daily_discussion_votes['Date']>'2020-02-29']['Count'].mean() \n    daily_discussion_vote_mean =round(daily_discussion_votes[daily_discussion_votes['Date']>'2020-02-29']['Count'].mean()) if(daily_discussion_vote_mean>0) else 0 \n\n\n    fig = go.Figure(go.Indicator(\n    mode = \"number\",\n    value = daily_discussion_vote_mean,\n    title = {\"text\": \"Last 6 Month Average Upvotes per Day\",'font': {'size':26}},\n    number={'font':{'color': 'sienna','size':50}},\n    domain = {'y': [0.50, 1], 'x': [0.50, 0.50]}))\n\n    fig.add_trace(go.Scatter(x=daily_discussion_votes['Date'],\n                                y=daily_discussion_votes['Count'],\n                                mode='lines',\n                               marker_color='sienna'))  \n    fig.update_xaxes(rangeslider_visible=True)\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_layout(title='Daily Upvotes ',\n                      xaxis_title=\"Date \",\n                      yaxis_title=\"Number of Upvotes \",title_x=0.5)\n    fig.show()\nelse:\n    print(\"You have made no discussion\")\n    ","7f55d407":"def remove_tag(string):\n    text=re.sub('<.*?>','',string)\n    return text\n\ndef remove_newline(string):\n    text=re.sub('\\n','',string)\n    return text\n\ndef remove_url(string): \n    text = re.sub('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+','',string)\n    return text\n\ndef remove_number(text):\n    line=re.sub(r'[0-9]+','',text)\n    return line\n\ndef find_at(text):\n    line=re.findall(r'(?<=@)\\w+',text)\n    return \" \".join(line)\n\ndef remove_punct(text):\n    line = re.sub(r'[!\"\\$%&\\'()*+,\\-.\\\/:;=#@?\\[\\\\\\]^_`{|}~]*','',text)\n    #string=\"\".join(line)\n    return line\n\n\nmy_discussion_list['comment']=my_discussion_list['Message'].apply(lambda x:remove_tag(str(x)))\nmy_discussion_list['comment']=my_discussion_list['comment'].apply(lambda x:remove_newline(x))\nmy_discussion_list['comment']=my_discussion_list['comment'].apply(lambda x:remove_url(x))\nmy_discussion_list['comment']=my_discussion_list['comment'].apply(lambda x:remove_number(x))\nmy_discussion_list['mentions']=my_discussion_list['comment'].apply(lambda x:find_at(x))\nmy_discussion_list['comment']=my_discussion_list['comment'].apply(lambda x:remove_punct(x))\nmy_discussion_list['text_length']=my_discussion_list['comment'].str.split().map(lambda x: len(x))","de0393f7":"if(len(my_discussion_list)>0):\n    \n    fig = go.Figure(go.Indicator(\n        mode = \"number\",\n        value = my_discussion_list['text_length'].mean(),\n        title = {\"text\": \"Average Length of Comments\",'font': {'size':26}},\n        number={'font':{'color': 'sienna','size':50}},\n        domain = {'y': [0.50, 1], 'x': [0.50, 0.50]}))\n\n    fig.add_trace(go.Histogram(x=my_discussion_list['text_length'],marker_color='sienna',name=\"Comment Length\",\n        opacity=1))\n\n\n    fig.update_layout(title='Length of comments ',\n                      xaxis_title=\"Length of Comments \",\n                      yaxis_title=\"Number of Comments \",title_x=0.5)\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.show()\nelse:\n    print('You have zero Discussion')\n","7868aaa4":"\nall_mentions=list(my_discussion_list[my_discussion_list['mentions']!=\"\"]['mentions'].str.split(\" \"))\nall_mentions_uni=[j for i in all_mentions for j in i]\nfilter_mentions=[item for item in all_mentions if any(x in item for x in all_mentions_uni)]\nfilter_mentions=[j for i in filter_mentions for j in i]\nfilter_mentions=[i for i in filter_mentions if i in kaggle_names]\nfilter_mentions_df=dict(Counter(filter_mentions))\nfilter_mentions_df=pd.DataFrame(list(filter_mentions_df.items()),columns = ['word','count']).sort_values('count',ascending=False)[:20]","4eecf679":"if(len(my_discussion_list)>0):\n    fig = go.Figure(data=[go.Bar(\n            y=filter_mentions_df['word'][::-1], x=filter_mentions_df['count'][::-1],marker_color=\"sienna\",\n            text=filter_mentions_df['count'][::-1],orientation='h',\n            textposition='outside',\n        )])\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_layout(title_text=\"Top Mentions By You\",title_x=0.5,\n        xaxis_title_text='Number of Mentions',\n        yaxis_title_text='Kaggle Users')\n\n    fig.show()\nelse:\n    print(\"You have made no discussion\")\n    ","d53bb51f":"all_message = [y.lower() for x in list(my_discussion_list['comment'].dropna()) for y in x.split(' ')]\nstop_words = set(stopwords.words('english'))\nfiltered_message = [w for w in all_message if not w in stop_words] \nfinal_message= [word for word in filtered_message if word.isalnum()]\nmessage_words=dict(Counter(final_message))\nmessage_count = pd.DataFrame(list(message_words.items()),columns = ['word','count']).sort_values('count',ascending=False)[:5000]\nmsg_cloud = dict(zip(message_count['word'].tolist(), message_count['count'].tolist()))\n","1b916c27":"if(len(my_discussion_list)>0):\n    fig, (ax2) = plt.subplots(1,1,figsize=[17, 10])\n    wordcloud2 = WordCloud(background_color='black',colormap=\"BrBG_r\", \n                        width=600,height=400).generate_from_frequencies(msg_cloud)\n\n    ax2.imshow(wordcloud2,interpolation='bilinear')\n    ax2.axis('off')\n    ax2.set_title('Most Used Words in Comments ',fontsize=35)\nelse:\n    print(\"You have made no discussions \")\n    ","38f34600":"def get_title_com(id):\n    return my_discussion_list[my_discussion_list['Id']==id]['Message'].to_string().split(\"  \")[-1]\n\nmy_voted=my_discussion_votes[my_discussion_votes['ForumMessageId'].isin(list(my_discussion_list['Id']))]\nmy_voted=my_voted['ForumMessageId'].value_counts().to_frame().reset_index().rename(columns={'index':'Id','ForumMessageId':'count'})[:10]\nmy_voted['Message']=my_voted['Id'].apply(lambda x:get_title_com(x))\nmy_voted=my_voted[['Message','count']].sort_values('count',ascending=False)","fa89001c":"colorscale=[[0, '#A0522D'],[.5, '#F4A460'],[1, '#F5DEB3']]\nfig = ff.create_table(my_voted, colorscale=colorscale)\nfig.show()","5d1fa4d1":"del kaggle_names,forums,forums_topic,forum_msg_vote,forum_msg,week_discussion_df,month_discussion_df,discussion_daily,all_mentions,filter_mentions_df,all_message,msg_cloud,message_words\ngc.collect()","36462516":"dv=pd.read_csv('..\/input\/meta-kaggle\/DatasetVersions.csv')\ndata_vote=pd.read_csv('..\/input\/meta-kaggle\/DatasetVotes.csv')","8c0eecd0":"my_dataset_version=dv[dv['CreatorUserId']==my_id]\nmy_dataset=dataset[dataset['CreatorUserId']==my_id]\nmy_data_version_id=dv[dv['CreatorUserId']==my_id]['Id']\ntotal_dataversion=len(my_data_version_id)\ntotal_data_vote=dataset[dataset['CreatorUserId']==my_id]['TotalVotes'].sum()\ntotal_data_views=dataset[dataset['CreatorUserId']==my_id]['TotalViews'].sum()\ntotal_data_kernels=dataset[dataset['CreatorUserId']==my_id]['TotalKernels'].sum()\ntotal_data_downloads=dataset[dataset['CreatorUserId']==my_id]['TotalDownloads'].sum()\ntotal_data_vote=dataset[dataset['CreatorUserId']==my_id]['TotalVotes'].sum()\n\nmy_dataset['year']=pd.to_datetime(my_dataset['CreationDate']).dt.year\nyear_dataset=my_dataset['year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','year':'count'}).sort_values('year')","7cc643a3":"if(len(my_dataset)>0):\n    fig = make_subplots(\n        rows=3, cols=3,subplot_titles=(\"\",\"\",\"\", \"\",\"\",\"\",\"Dataset Created By Year\",\"\",\"\"),\n        specs=[[{\"type\": \"indicator\"},{\"type\": \"indicator\"},{\"type\": \"indicator\"} ],\n           [{\"type\": \"indicator\"},{\"type\": \"indicator\"},{\"type\": \"indicator\"} ],\n          [None, {\"type\": \"Bar\"} , None]])\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(my_dataset.shape[0]),\n        number={'font':{'color': 'olive','size':60}},\n        title = {'text': \"Total Dataset\",'font': {'color': 'white','size':20}},\n    ),row=1, col=1)\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(total_data_vote),\n        number={'font':{'color': 'olive','size':60}},\n        title = {'text': \"Total Votes\",'font': {'color': 'white','size':20}},\n),row=1, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(total_dataversion),\n        number={'font':{'color': 'olive','size':60}},\n        title = {'text': \"Total Versions\",'font': {'color': 'white','size':20}},\n),row=1, col=3)\n\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(total_data_views),\n        number={'font':{'color': 'olive','size':60}},\n        title = {'text': \"Total Views\",'font': {'color': 'white','size':20}},\n),row=2, col=1)\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(total_data_kernels),\n        number={'font':{'color': 'olive','size':60}},\n        title = {'text': \"Total Kernels\",'font': {'color': 'white','size':20}},\n),row=2, col=2)\n\n    fig.add_trace(go.Indicator(\n        mode = \"number\",\n        value = int(total_data_downloads),\n        number={'font':{'color': 'olive','size':60}},\n        title = {'text': \"Total Downloads\",'font': {'color': 'white','size':20}},\n),row=2, col=3)\n\n\n    fig.add_trace(go.Bar(\n        x=year_dataset['year'],y=year_dataset['count'],\n        marker={'color': \"olive\"},  \n        text=year_dataset['count'],\n        name=\"Discussions by Year\",\n        textposition ='auto',\n),row=3, col=2)\n\n\n    fig.update_layout(\n    title_text='Dataset - Mini Infograph ',template=\"plotly_dark\",\n    title_x=0.5,\n)\n\n    fig.show()\nelse:\n    print(\"You have not created any Dataset \")","18c67c88":"my_dataset['Date']=pd.to_datetime(my_dataset['CreationDate'])\ndata_daily=my_dataset['Date'].value_counts().to_frame().reset_index().rename(columns={'index':'Date','Date':'count'})\ndata_daily['Date']=pd.to_datetime(data_daily['Date'])\nmonth_data_df = data_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"M\").sum().reset_index()\n\n\n\nmy_dataset_version['Date_Ver']=pd.to_datetime(my_dataset_version['CreationDate']).dt.date\ndata_version_daily=my_dataset_version['Date_Ver'].value_counts().to_frame().reset_index().rename(columns={'index':'Date','Date_Ver':'count'})\ndata_version_daily['Date']=pd.to_datetime(data_version_daily['Date'])\nmonth_data_version_df = data_version_daily[[\"Date\", \"count\"]].set_index(\"Date\").resample(\"M\").sum().reset_index()","9b0140d2":"if(len(my_dataset)>0):\n    fig = make_subplots(rows=2, cols=1,\n                   shared_xaxes=True, \n                    vertical_spacing=0.02) \n    fig.add_trace(go.Scatter(x=month_data_df['Date'],\n                                y=month_data_df['count'],\n                                mode='markers+lines',\n                                name=\"Kernels\",\n                               marker_color='olive'),row=1,col=1) \n\n    fig.add_trace(go.Scatter(x=month_data_version_df['Date'],\n                                y=month_data_version_df['count'],\n                                mode='markers+lines',\n                                name=\"Versions\",\n                               marker_color='violet'),row=2,col=1) \n\n    fig.update_layout(title='Monthly Dataset and Verisons ',\n                      xaxis_title=\"Date \",\n                      yaxis_title=\"Number of Datasets & Versions\",title_x=0.5)\n\n    fig.show()\nelse:\n    print(\"You have not created any Dataset \")","e11d8423":"if(len(my_dataset)>1):\n    my_combined_data=pd.merge(my_dataset,dv[['DatasetId','Title']][dv['VersionNumber']==1.0],left_on=\"Id\",right_on=\"DatasetId\",how='left')\n    import scipy.stats\n\n\n    corr_vote=round(scipy.stats.pearsonr(my_combined_data['TotalViews'], my_combined_data['TotalVotes'])[0],4)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(my_combined_data['TotalViews'],my_combined_data['TotalVotes'])\n    line = slope*my_combined_data['TotalViews']+intercept\n\n    fig=go.Figure()\n    fig.add_traces(go.Scatter(\n                  x=my_combined_data['TotalViews'],\n                  y=my_combined_data['TotalVotes'],\n                  mode='markers',\n                  text=my_combined_data['Title'],\n                  marker = dict(\n                  color = 'olive'\n                  )))\n\n    fig.add_traces(go.Scatter(\n                  x=my_combined_data['TotalViews'],\n                  y=line,\n                  mode='lines',\n                  marker=go.Marker(color='red'),\n                  name='Fit'\n                  ))\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_layout(title_text='Votes vs Views - Correlation: {}'.format(corr_vote),\n        xaxis_title_text='Total Views',\n        yaxis_title_text='Total Votes', \n        title_x=0.5,showlegend=False)\n\n\n    fig.show()\nelse:\n    print(\"You need to create more than 1 datasets to check Views and Votes relationship\")","9525102e":"if(len(my_dataset)>0):\n    \n    import scipy.stats\n\n    corr_vote=round(scipy.stats.pearsonr(my_combined_data['TotalViews'], my_combined_data['TotalKernels'])[0],4)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(my_combined_data['TotalViews'],my_combined_data['TotalKernels'])\n    line = slope*my_combined_data['TotalViews']+intercept\n\n    fig=go.Figure()\n    fig.add_traces(go.Scatter(\n                  x=my_combined_data['TotalViews'],\n                  y=my_combined_data['TotalKernels'],\n                  mode='markers',\n                  text=my_combined_data['Title'],\n                  marker = dict(\n                  color = 'olive'\n                  )))\n\n    fig.add_traces(go.Scatter(\n                  x=my_combined_data['TotalViews'],\n                  y=line,\n                  mode='lines',\n                  marker=go.Marker(color='red'),\n                  name='Fit'\n                  ))\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_layout(title_text='Kernels vs Views - Correlation: {}'.format(corr_vote),\n        xaxis_title_text='Total Kernels ',\n        yaxis_title_text='Total Votes ', \n        title_x=0.5,showlegend=False)\n    fig.show()\nelse:\n    print(\"You need to create more than 1 datasets to check Views and Kernels relationship \")","128dce1e":"if(len(my_dataset)>0):\n    \n    all_mydata_votes=data_vote[data_vote['DatasetVersionId'].isin(list(my_data_version_id))]\n    all_mydata_votes['VoteDate']=pd.to_datetime(all_mydata_votes['VoteDate'])\n\n    daily_data_votes=all_mydata_votes['VoteDate'].value_counts().reset_index().rename(columns={'index':'Date','VoteDate':'Count'}).sort_values('Date')\n    daily_data_vote_mean=daily_data_votes[daily_data_votes['Date']>'2020-02-29']['Count'].mean()\n    daily_data_vote_mean= round(daily_data_votes[daily_data_votes['Date']>'2020-02-29']['Count'].mean()) if (daily_data_vote_mean>0) else 0\n\n    fig = go.Figure(go.Indicator(\n        mode = \"number\",\n        value = daily_data_vote_mean,\n        title = {\"text\": \"Last 6 Month Average Upvotes per Day\",'font': {'size':26}},\n        number={'font':{'color': 'green','size':50}},\n        domain = {'y': [0.50, 1], 'x': [0.50, 0.50]}))\n\n    fig.add_trace(go.Scatter(x=daily_data_votes['Date'],\n                                y=daily_data_votes['Count'],\n                                mode='lines',\n                               marker_color='olive'))  \n    fig.update_xaxes(rangeslider_visible=True)\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_layout(title='Daily Upvotes ',xaxis_title=\"Date \",yaxis_title=\"Number of Upvotes\",title_x=0.5)\n\n    fig.show()\nelse:\n    print(\"You have not created any Dataset \")\n    ","86679986":"if(len(my_dataset)>0):\n    \n    all_data_title = [y.lower() for x in list(my_combined_data['Title'].dropna()) for y in x.split(' ')]\n    stop_words = set(stopwords.words('english'))\n    filtered_message_data = [w for w in all_data_title if not w in stop_words] \n    final_message_data= [word for word in filtered_message_data if word.isalnum()]\n    data_words=dict(Counter(final_message_data))\n    data_title_count = pd.DataFrame(list(data_words.items()),columns = ['word','count']).sort_values('count',ascending=False)[:5000]\n    word_title_cloud = dict(zip(data_title_count['word'].tolist(), data_title_count['count'].tolist()))\n\n    fig, (ax2) = plt.subplots(1,1,figsize=[17, 10])\n    wordcloud2 = WordCloud(background_color='black',colormap=\"cool\", \n                        width=600,height=400).generate_from_frequencies(word_title_cloud)\n\n    ax2.imshow(wordcloud2,interpolation='bilinear')\n    ax2.axis('off')\n    ax2.set_title('Most Used Words in Title',fontsize=35)\nelse:\n    print(\"You have not created any Dataset\")","41ddad6c":"if(len(my_dataset)>0):\n    most_upvoted=my_combined_data[['Title','TotalVotes']].sort_values('TotalVotes',ascending=False)[:10]\n\n    colorscale=[[0, '#808000'],[.5, '#BDB76B'],[1, '#F0E68C']]\n    fig = ff.create_table(most_upvoted, colorscale=colorscale)\n    fig.show()\nelse:\n    print(\"You have not created any Dataset\") ","c32171f2":"del data_vote,dv,dataset\ngc.collect()","bb547aae":"<font color=\"olive\" size=+2>5.5 How much upvotes do I get daily<\/font>","d3cd1a40":"<a href=\"#top\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Go to TOP<\/a>","d73fbf18":"<font color=\"Magenta\" size=+2>1.2 My Medalling Rate in all 3 areas<\/font>","0511e9da":"<font color=\"dodgerblue\" size=+2>2.7 My Busiest Months \/ Days<\/font>","0d9bf0f4":"<font color=\"olive\" size=+2>5.6 Most Used Words in Dataset Title<\/font>","be07bd24":"<font color=\"green\" size=+2>3.7 My Best Notebooks<\/font>","779d54c5":"<font color=\"green\" size=+2>3.2 How much kernels and versions did I create monthly<\/font>","8d8f4209":"<font color=\"dodgerblue\" size=+2>2.2 Did more submissions fetch me more medals?<\/font>","f5405994":"<font color=\"olive\" size=+2>5.1 My Dataset<\/font>","94f0b2d9":"<font color=\"sienna\" size=+2>4.4 How much upvotes do i get daily<\/font>","50cf22ad":"# Introduction\n\nEveryone wants to know how they are performing in Kaggle.They would like to see their past track records and the area they want to improvise.Hence Past data can set a pathway to trigger good future results.I am here with insightful kernel that could help you boost your productivity in kaggle.\n\nInspired by [SRK](https:\/\/www.kaggle.com\/sudalairajkumar\/a-look-back-at-your-kaggle-journey) & [Shivam](https:\/\/www.kaggle.com\/shivamb\/analyse-your-kaggle-profile-framework) kernels,I was delighted to work on such theme that could ultimately help everyone.This notebook would be a detailed analysis of your own.Just enter your name,run the kernel and wait for less than 3 minutes,The report will be ready.\n\nI have saved your time.You can fork it and reuse it regularly to keep an eye on your performance and track records.","39492e37":"<font color=\"olive\" size=+2>5.3 Are my dataset Views getting converted to Votes<\/font>","90cff8cb":"<font color=\"sienna\" size=+2>4.3 My Weekly Discussions<\/font>","2df84fb9":"<font color=\"olive\" size=+3><b>5. Dataset<\/b><\/font>","f3c7da62":"<font color=\"olive\" size=+2>5.2 My Monthly Dataset Creation & Version runs<\/font>","9ab70dbf":"<font color=\"dodgerblue\" size=+2>2.5 Which Rank did I achieve often<\/font>","fe6d5ae9":"<font color=\"dodgerblue\" size=+2>2.1 My Competition Profile<\/font>","6c215152":"<font color=\"dodgerblue\" size=+2>2.8 My Best Competitions<\/font>","bfa1eafe":"<font color=\"dodgerblue\" size=+3><b>2. Competition<\/b><\/font>","7212d4a5":"![](https:\/\/thumbs.gfycat.com\/CanineIdleJabiru-size_restricted.gif)\nsource:gfycat","4302be67":"<font color=\"olive\" size=+2>5.7 My Most Voted Datasets<\/font>","942839ec":"<font color=\"olive\" size=+2>5.4 Are my dataset Views getting converted to Kernels<\/font>","20623d6a":"<font size=\"+3\" color=purple><b> <center><u>Kaggle Profiler \ud83d\udd75\ufe0f<\/u><\/center><\/b><\/font>","5b111df4":"<font color=\"darkblue\" size=+2.5><b>End Note<\/b><\/font>","347375e5":"<font size=+2 color=\"darkblue\">More Analysis & Viz on the way...  <i>Keep Self Evaluating Yourself...<\/i><\/font>","3e7b6837":"<font color=\"sienna\" size=+2>4.8 Most Awarded comment<\/font>","66f32f58":"<font color=\"green\" size=+2>3.3 Did more views get me more votes? Linear or not?<\/font>","430c471f":"<font color=\"green\" size=+2>3.1 My Notebook Profile<\/font>","06c3e2bd":"<font color=\"Magenta\" size=+2>1.3 My Ranking Proficiency<\/font>","fcd50f2f":"<font color=\"green\" size=+2>3.4 Distribution of VVC<\/font>","7888213e":"<font color=\"green\" size=+2>3.6 Most common words in Title<\/font>","59c82c85":"<font color=\"sienna\" size=+2>4.6 Top Mentioned Users by me<\/font>","1d7cf8e2":"<font color=\"sienna\" size=+2>4.7 Most Used Words<\/font>","9bc71d22":"<font color=\"green\" size=+3><b>3. Notebook<\/b><\/font>","c03a1ca5":"<a id=\"top\"><\/a>\n<font size=\"+2\">Enter your Username below:<\/font><br>\nHint : If you are not sure about your username,take it from your url: https:\/\/www.kaggle.com\/<font color=\"red\" size=+2>raenish<\/font><br>\n(I will be using profile of one of the greatest grandmasters of all time in kaggle. - Sudalairajkumar aka SRK)","7ae1a0ef":"<font color=\"sienna\" size=+2>4.2 My Monthly Discussions<\/font>","1341e989":"\n\nI hope you enjoyed your analysis with my kernel.This kernel will aid you to track your progress.Please dont forget to appreciate me with an <font size=+1 color=\"red\"><b>Upvote<\/b><\/font>.I will try to add more analysis here.So please stay tuned.\n\nThanks for your time.\n\nHappy Kaggling!!!","fc1ef4d6":"<font color=\"dodgerblue\" size=+2>2.6 Did more submissions fetch me good rank?<\/font>","7cf460f8":"<font color=\"sienna\" size=+2>4.1 My Discussion Profile<\/font>","6a8de7c0":"<font color=\"green\" size=+2>3.5 How much upvotes do i get everyday<\/font>","8034e9bc":"<font color=\"dodgerblue\" size=+2>2.3 My Active Days with Submissions<\/font>","fd1d6330":"<font color=\"sienna\" size=+2>4.5 How much words do I make per comment<\/font>","f427fc68":"<font color=\"dodgerblue\" size=+2>2.4 My Weekly Submissions<\/font>","7557dc53":"<font color=\"Magenta\" size=+2>1.1 My Profile<\/font>","55372184":"<font color=\"sienna\" size=+3><b>4. Discussion<\/b><\/font>"}}