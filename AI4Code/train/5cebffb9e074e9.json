{"cell_type":{"a6696c5f":"code","d65ecf4b":"code","54489d40":"code","7f28b201":"code","c367a3df":"code","1e27313c":"code","b3f97639":"code","057e339a":"code","9f3f98b0":"code","d287733e":"code","7b555bee":"code","6f60d539":"code","7c3091d8":"code","67925ec3":"code","d8a69606":"code","6b1a0dfc":"code","e4f54c67":"code","088d5a44":"code","1efe4102":"markdown","5d7d3e5e":"markdown","bcba1f34":"markdown","713f2a12":"markdown","a9542d77":"markdown","4853eced":"markdown","b514b5fb":"markdown","d6804b63":"markdown","0abd39cc":"markdown","c12d7060":"markdown","b12d6621":"markdown","4655209a":"markdown","1c6083e5":"markdown","9ef5347a":"markdown"},"source":{"a6696c5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d65ecf4b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","54489d40":"def get_clf_eval(y_test, pred, pred_proba):\n    print(f'Accuracy: {accuracy_score(y_test, pred)}')\n    print(f'Confusion Matrix:\\n{confusion_matrix(y_test, pred)}')\n    print(f'Precision: {precision_score(y_test, pred)}, Recall: {recall_score(y_test, pred)}')\n    print(f'F1: {f1_score(y_test, pred)}, AUC: {roc_auc_score(y_test, pred_proba)}')","7f28b201":"def precision_recall_curve_plot(y_test, pred_proba):\n    # threshold ndarray\uc640 \uc774 threshold\uc5d0 \ub530\ub978 \uc815\ubc00\ub3c4, \uc7ac\ud604\uc728 ndarray \ucd94\ucd9c\n    precisions, recalls, thresholds = precision_recall_curve(y_test, pred_proba)\n    \n    # x\ucd95\uc744 threshold\uac12\uc73c\ub85c, y\ucd95\uc740 \uc815\ubc00\ub3c4, \uc7ac\ud604\uc728 \uac12\uc73c\ub85c \uac01\uac01 Plot \uc218\ud589. \uc815\ubc00\ub3c4\ub294 \uc810\uc120\uc73c\ub85c \ud45c\uc2dc.\n    plt.figure(figsize=(8, 6))\n    threshold_boundary = thresholds.shape[0]\n    plt.plot(thresholds, precisions[0:threshold_boundary], linestyle='--', label='precision')\n    plt.plot(thresholds, recalls[0:threshold_boundary], label='recall')\n    \n    # threshold \uac12 x\ucd95\uc758 scale\uc744 0.1\ub2e8\uc704\ub85c \ubcc0\uacbd\n    start, end = plt.xlim()\n    plt.xticks(np.round(np.arange(start, end, 0.1), 2))\n    \n    # x\ucd95, y\ucd95 label\uacfc legend, grid \uc124\uc815\n    plt.xlabel('Threshold value')\n    plt.ylabel('Precision and Recall value')\n    plt.legend()\n    plt.grid()\n    plt.show()","c367a3df":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve\nfrom sklearn.preprocessing import StandardScaler, Binarizer\nfrom sklearn.linear_model import LogisticRegression","1e27313c":"diabetes_data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndiabetes_data.info()","b3f97639":"diabetes_data['Outcome'].value_counts()","057e339a":"X = diabetes_data.iloc[:, :-1]\ny = diabetes_data.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=156, stratify=y)\n\n# StandardScaler \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \ud53c\uccd0 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \uc77c\uad04\uc801\uc73c\ub85c \uc2a4\ucf00\uc77c\ub9c1 \uc801\uc6a9\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ub85c \ud559\uc2b5, \uc608\uce21 \ubc0f \ud3c9\uac00 \uc218\ud589\nlr_clf = LogisticRegression()\nlr_clf.fit(X_train, y_train)\npred = lr_clf.predict(X_test)\npred_proba = lr_clf.predict_proba(X_test)[:, 1]","9f3f98b0":"get_clf_eval(y_test, pred, pred_proba)","d287733e":"precision_recall_curve_plot(y_test, pred_proba)","7b555bee":"diabetes_data.describe()","6f60d539":"sns.distplot(diabetes_data['Glucose'])","7c3091d8":"# 0\uac12\uc744 \uac80\uc0ac\ud560 \ud53c\uccd0 \uba85 \ub9ac\uc2a4\ud2b8\nzero_features = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\n\n# \uc804\uccb4 \ub370\uc774\ud130 \uac74\uc218\ntotal_count = diabetes_data['Glucose'].count()\n\nfor feature in zero_features:\n    zero_count = diabetes_data[diabetes_data[feature] == 0][feature].count()\n    print(f'Feature: {feature}, Zero count: {zero_count}, Percentage: {100 * zero_count \/ total_count}')","67925ec3":"diabetes_data[zero_features] = diabetes_data[zero_features].replace(0, diabetes_data[zero_features].mean())","d8a69606":"X = diabetes_data.iloc[:, :-1]\ny = diabetes_data.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=156, stratify=y)\n\n# StandardScaler \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \ud53c\uccd0 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \uc77c\uad04\uc801\uc73c\ub85c \uc2a4\ucf00\uc77c\ub9c1 \uc801\uc6a9\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ub85c \ud559\uc2b5, \uc608\uce21 \ubc0f \ud3c9\uac00 \uc218\ud589\nlr_clf = LogisticRegression()\nlr_clf.fit(X_train, y_train)\npred = lr_clf.predict(X_test)\npred_proba = lr_clf.predict_proba(X_test)[:, 1]","6b1a0dfc":"get_clf_eval(y_test, pred, pred_proba)","e4f54c67":"precision_recall_curve_plot(y_test, pred_proba)","088d5a44":"# \uc784\uacd7\uac12\uc744 0.48\ub85c \uc124\uc815\ud55c Binarizer \uc0dd\uc131\nbinarizer = Binarizer(threshold=0.48)\n\n# \uc704\uc5d0\uc11c \uad6c\ud55c lr_clf\uc758 predict_proba() \uc608\uce21 \ud655\ub960 array\uc5d0\uc11c 1\uc5d0 \ud574\ub2f9\ud558\ub294 \uce7c\ub7fc\uac12\uc744 Binarizer \ubcc0\ud658\npred_th_048 = binarizer.fit_transform(pred_proba.reshape(-1, 1))\n\nget_clf_eval(y_test, pred_th_048, pred_proba)","1efe4102":"Null \uac12\uc740 \uc5c6\uc73c\uba70, \ud53c\uccd0\uc758 \ud0c0\uc785\uc740 \ubaa8\ub450 \uc22b\uc790\ud615\uc785\ub2c8\ub2e4. \uc784\uc2e0 \ud69f\uc218, \ub098\uc774\uc640 \uac19\uc740 \uc22b\uc790\ud615 \ud53c\uccd0\uc640 \ub2f9\ub1e8 \uac80\uc0ac \uc218\uce58 \ud53c\uccd0\ub85c \uad6c\uc131\ub41c \ud2b9\uc9d5\uc73c\ub85c \ubcfc \ub54c \ubcc4\ub3c4\uc758 \ud53c\uccd0 \uc778\ucf54\ub529\uc740 \ud544\uc694\ud558\uc9c0 \uc54a\uc544 \ubcf4\uc785\ub2c8\ub2e4.","5d7d3e5e":"\ub2e4\uc2dc \ud559\uc2b5\/\ub370\uc774\ud130 \uc138\ud2b8\ub85c \ub098\ub204\uace0 \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ub97c \uc801\uc6a9\ud574 \uc131\ub2a5 \ud3c9\uac00 \uc9c0\ud45c\ub97c \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4.","bcba1f34":"\uc774\uc81c \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ub97c \uc774\uc6a9\ud574 \uc608\uce21 \ubaa8\ub378\uc744 \uc0dd\uc131\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ud53c\uccd0 \ub370\uc774\ud130 \uc138\ud2b8\uc640 \ud074\ub798\uc2a4 \ub370\uc774\ud130 \uc138\ud2b8\ub85c \ub098\ub204\uace0, \ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8\ub85c \ubd84\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ub97c \uc774\uc6a9\ud574 \uc608\uce21\uc744 \uc218\ud589\ud558\uace0 \uc131\ub2a5 \ud3c9\uac00 \uc9c0\ud45c\ub97c \ucd9c\ub825\ud558\uace0 \uc7ac\ud604\uc728 \uace1\uc120\uc744 \uc2dc\uac01\ud654\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","713f2a12":"\ud53c\ub9c8 \uc778\ub514\uc5b8 \ub2f9\ub1e8\ubcd1 \ub370\uc774\ud130 \uc138\ud2b8\ub294 \ub2e4\uc74c \ud53c\uccd0\ub85c \uad6c\uc131\ub3fc \uc788\uc2b5\ub2c8\ub2e4.\n\n- Pregnancies: \uc784\uc2e0 \ud69f\uc218\n- Glucose: \ud3ec\ub3c4\ub2f9 \ubd80\ud558 \uac80\uc0ac \uc218\uce58\n- BloodPressure: \ud608\uc555(mm Hg)\n- SkinThickness: \ud314 \uc0bc\ub450\uadfc \ub4a4\ucabd\uc758 \ud53c\ud558\uc9c0\ubc29 \uce21\uc815\uac12(mm)\n- Insulin: \ud608\uccad \uc778\uc290\ub9b0(mu U\/ml)\n- BMI: \uccb4\uc9c8\ub7c9\uc9c0\uc218 (\uccb4\uc911(kg) \/ \ud0a4(m)^2)\n- DiabetesPedigreeFunction: \ub2f9\ub1e8 \ub0b4\ub825 \uac00\uc911\uce58 \uac12\n- Age: \ub098\uc774\n- Outcome: \ud074\ub798\uc2a4 \uacb0\uc815 \uac12 (0 \ub610\ub294 1)","a9542d77":"\uc804\uccb4 768\uac1c\uc758 \ub370\uc774\ud130 \uc911\uc5d0\uc11c Negative \uac12 0 \uc774 500\uac1c, Positive \uac12 1\uc774 268\uac1c\ub85c Negative\uac00 \uc0c1\ub300\uc801\uc73c\ub85c \ub9ce\uc2b5\ub2c8\ub2e4. ","4853eced":"# Disclaimer\n\n\uc774 \ucee4\ub110\uc740 \uc704\ud0a4\ubd81\uc2a4 \ucd9c\ud310 '\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc' \ub3c4\uc11c\ub97c \ub2e4\ub7c9 \ucc38\uace0\ud558\uc5ec \uc791\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n","b514b5fb":"\uc774\ubc88\uc5d0\ub294 \ud53c\ub9c8 \uc778\ub514\uc5b8 \ub2f9\ub1e8\ubcd1 (Pima Indian Diabetes) \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc774\uc6a9\ud574 \ub2f9\ub1e8\ubcd1 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\ub294 \uba38\uc2e0\ub7ec\ub2dd \uc608\uce21 \ubaa8\ub378\uc744 \uc218\ub9bd\ud558\uace0, \uc9c0\uae08\uae4c\uc9c0 \uc124\uba85\ud55c \ud3c9\uac00 \uc9c0\ud45c\ub97c \uc801\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud53c\ub9c8 \uc778\ub514\uc5b8 \ub2f9\ub1e8\ubcd1 \ub370\uc774\ud130 \uc138\ud2b8\ub294 \ubd81\uc544\uba54\ub9ac\uce74 \ud53c\ub9c8 \uc9c0\uc5ed \uc6d0\uc8fc\ubbfc\uc758 Type-2 \ub2f9\ub1e8\ubcd1 \uacb0\uacfc \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \ubcf4\ud1b5 \ub2f9\ub1e8 \uc6d0\uc778\uc73c\ub85c \uc2dd\uc2b5\uad00\uacfc \uc720\uc804\uc744 \uaf3d\uc2b5\ub2c8\ub2e4. \ud53c\ub9c8 \uc9c0\uc5ed\uc740 \uace0\ub9bd\ub41c \uc9c0\uc5ed\uc5d0\uc11c \uc778\ub514\uc5b8 \uace0\uc720\uc758 \ud608\ud1b5\uc774 \uc9c0\uc18d\ub3fc \uc654\uc9c0\ub9cc, 20\uc138\uae30 \ud6c4\ubc18\uc5d0 \ub4e4\uc5b4\uc11c\uba74\uc11c \uc11c\uad6c\ud654\ub41c \uc2dd\uc2b5\uad00\uc73c\ub85c \ub9ce\uc740 \ub2f9\ub1e8 \ud658\uc790\uac00 \uc0dd\uaca8\ub0ac\uc2b5\ub2c8\ub2e4. \uace0\ub9bd\ub41c \uc720\uc804\uc801 \ud2b9\uc131 \ub54c\ubb38\uc5d0 \ub2f9\ub1e8\ud559\ud68c\uc5d0\uc11c\ub294 \ud53c\ub9c8 \uc778\ub514\uc5b8\uc758 \ub2f9\ub1e8\ubcd1 \uc790\ub8cc\uc5d0 \ub300\ud574 \ub9ce\uc740 \uc5f0\uad6c\ub97c \ud588\uc2b5\ub2c8\ub2e4.","d6804b63":"SkinThickness\uc640 Insulin\uc758 0 \uac12\uc740 \uac01\uac01 \uc804\uccb4\uc758 29%, 48%\ub85c \ub300\ub2e8\ud788 \ub9ce\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \ub370\uc774\ud130 \uac74\uc218\uac00 \ub9ce\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc774\ub4e4 \ub370\uc774\ud130\ub97c \uc77c\uad04\uc801\uc73c\ub85c \uc0ad\uc81c\ud560 \uacbd\uc6b0\uc5d0\ub294 \ud559\uc2b5\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc218\ud589\ud558\uae30 \uc5b4\ub824\uc6b8 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc704 \ud53c\uccd0\uc758 0 \uac12\uc744 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ud558\uaca0\uc2b5\ub2c8\ub2e4.","0abd39cc":"min() \uac12\uc774 0\uc73c\ub85c \ub3fc \uc788\ub294 \ud53c\uccd0\uc5d0 \ub300\ud574 0\uac12\uc758 \uac74\uc218 \ubc0f \uc804\uccb4 \ub370\uc774\ud130 \uac74\uc218 \ub300\ube44 \uba87 \ud37c\uc13c\ud2b8\uc758 \ube44\uc728\ub85c \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud655\uc778\ud560 \ud53c\uccd0\ub294 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI'\uc785\ub2c8\ub2e4 (Pregnancies\ub294 \ucd9c\uc0b0 \ud69f\uc218\ub97c \uc758\ubbf8\ud558\ubbc0\ub85c \uc81c\uc678\ud569\ub2c8\ub2e4).","c12d7060":"min() \uac12\uc774 0\uc73c\ub85c \ub3fc \uc788\ub294 \ud53c\uccd0\uac00 \uc0c1\ub2f9\ud788 \ub9ce\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Glucose \ud53c\uccd0\ub294 \ud3ec\ub3c4\ub2f9 \uc218\uce58\uc778\ub370 min \uac12\uc774 0\uc778 \uac83\uc740 \ub9d0\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Glucose \ud53c\uccd0\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \ud655\uc778\ud574 \ubcf4\uba74 0 \uac12\uc774 \uc77c\uc815 \uc218\uc900 \uc874\uc7ac\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","b12d6621":"# \uc774 \ucee4\ub110\uc5d0\uc11c \uc5bb\uac8c \ub420 \uac83\n\n- \uc774\uc9c4 \ubd84\ub958\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ub2e4\uc591\ud55c \ud3c9\uac00 \uc9c0\ud45c (Accuracy, Confusion Matrix, Precision, Recall, F1, AUC)\n- Precision-Recall Curve\n- \uc784\uacd7\uac12 \ub0ae\ucd94\uae30 (predict_proba()\uc640 Binarizer \uc0ac\uc6a9)","4655209a":"\uc55e\uc5d0\uc11c \ud559\uc2b5\ub41c \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0 \ubaa8\ub378\uc744 \uc774\uc6a9\ud574 \uc784\uacd7\uac12\uc744 0.48\ub85c \ub0ae\ucd98 \uc0c1\ud0dc\uc5d0\uc11c \ub2e4\uc2dc \uc608\uce21\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc0ac\uc774\ud0b7\ub7f0\uc758 predict() \uba54\uc11c\ub4dc\ub294 \uc784\uacd7\uac12\uc744 \ub9c8\uc74c\ub300\ub85c \ubcc0\ud658\ud560 \uc218 \uc5c6\uc73c\ubbc0\ub85c \ubcc4\ub3c4\uc758 \ub85c\uc9c1\uc73c\ub85c \uc774\ub97c \uad6c\ud574\uc57c \ud569\ub2c8\ub2e4. \uc55e\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 Binarizer \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 predict_proba()\ub85c \ucd94\ucd9c\ud55c \uc608\uce21 \uacb0\uacfc \ud655\ub960\uac12\uc744 \ubcc0\ud658\ud574 \ubcc0\uacbd\ub41c \uc784\uacd7\uac12\uc5d0 \ub530\ub978 \uc608\uce21 \ud074\ub798\uc2a4 \uac12\uc744 \uad6c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","1c6083e5":"\uc608\uce21 \uc815\ud655\ub3c4\uac00 77.27%, \uc7ac\ud604\uc728\uc740 59.26%\ub85c \uce21\uc815\ub410\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \ub370\uc774\ud130\uc758 65%\uac00 Negative\uc774\ubbc0\ub85c \uc815\ud655\ub3c4\ubcf4\ub2e4\ub294 \uc7ac\ud604\uc728 \uc131\ub2a5\uc5d0 \uc870\uae08 \ub354 \ucd08\uc810\uc744 \ub9de\ucdb0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc815\ubc00\ub3c4 \uc7ac\ud604\uc728 \uace1\uc120\uc744 \ubcf4\uace0 \uc784\uacd7\uac12\ubcc4 \uc815\ubc00\ub3c4\uc640 \uc7ac\ud604\uc728 \uac12\uc758 \ubcc0\ud654\ub97c \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4.","9ef5347a":"\uc7ac\ud604\uc728 \uace1\uc120\uc744 \ubcf4\uba74 \uc784\uacd7\uac12\uc744 0.42 \uc815\ub3c4\ub85c \ub0ae\ucd94\uba74 \uc815\ubc00\ub3c4\uc640 \uc7ac\ud604\uc728\uc774 \uc5b4\ub290 \uc815\ub3c4 \uade0\ud615\uc744 \ub9de\ucd9c \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub450 \uac1c\uc758 \uc9c0\ud45c \ubaa8\ub450 0.7\uc774 \uc548 \ub418\ub294 \uc218\uce58\ub85c \ubcf4\uc785\ub2c8\ub2e4. \uc5ec\uc804\ud788 \ub450 \uc9c0\ud45c\uc758 \uac12\uc774 \ub0ae\uc2b5\ub2c8\ub2e4. \uc784\uacd7\uac12\uc744 \uc778\uc704\uc801\uc73c\ub85c \uc870\uc791\ud558\uae30 \uc804\uc5d0 \ub370\uc774\ud130 \uac12\uc744 \ub2e4\uc2dc \uc810\uac80\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc6d0\ubcf8 \ub370\uc774\ud130 DataFrame\uc758 describe() \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud574 \ud53c\uccd0 \uac12\uc758 \ubd84\ud3ec\ub3c4\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."}}