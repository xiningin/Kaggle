{"cell_type":{"e0f1ed31":"code","ed2419be":"code","f62fcc1d":"code","27a00f4a":"code","a3dd35b2":"code","da99f4cf":"code","6d400852":"code","1dbf2eae":"markdown","9c8019f1":"markdown","8d12808d":"markdown","834a1b63":"markdown","7b40256b":"markdown"},"source":{"e0f1ed31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed2419be":"training = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntesting = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","f62fcc1d":"# Testing has the same features as training but excludes labels so we can just examine the training data set.\nprint(training.describe())\nprint(training.head(10))\nprint(training.columns)","27a00f4a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n","a3dd35b2":"y = training[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = training[features]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\n# Actual testing data used for submission\nX_submission = pd.get_dummies(testing[features])","da99f4cf":"linear_model = LinearRegression()\nknn_model = KNeighborsClassifier(n_neighbors=4)\nmodels = {'linear': linear_model, 'knn': knn_model}\nbest_model, best_score = None, None\nfor model in models:\n    # Train\n    models[model].fit(X_train, y_train)\n    # Test\n    predictions = models[model].predict(X_test)\n    # Round predictions (if num < 0.5: 0, else: 1)\n    predictions = np.round(predictions, 0).astype('int')\n    # Capture score of the model\n    score = accuracy_score(y_test, predictions)\n    print(model, score)\n    # Compare current model performance to current best model performance and update if necessary\n    if not best_model:\n        best_model, best_score = model, score\n    if score > best_score:\n        best_score, best_model = score, model\nprint('best: ', best_model, best_score)\n# Capture predictions using the best model on the actual testing data used for submisison\npredictions = models[best_model].predict(X_submission)","6d400852":"output = pd.DataFrame({'PassengerId': testing.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n","1dbf2eae":"# Import models and tools","9c8019f1":"# Handle data. Here we split 20% of our training data to use for testing and scoring the models we test.","8d12808d":"# Here we train various models and score the predictions they make on the testing data. The model that scores the best will be used for submission.","834a1b63":"# Examine data","7b40256b":"# Load training and testing data"}}