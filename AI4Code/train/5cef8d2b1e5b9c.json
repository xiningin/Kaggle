{"cell_type":{"2c1de975":"code","e036e215":"code","5d5f55c3":"code","9da07f1f":"code","2a9c5ad6":"code","1dd3560f":"code","ec6f520d":"code","9363f376":"code","75e7ccbe":"code","7cbc0272":"code","91c242cf":"code","c90b09fa":"code","a659bab0":"code","202141d3":"code","4724568a":"code","33c4970b":"code","ade41153":"code","813bc103":"code","4107cf97":"code","bb9fc585":"code","82e44dff":"code","8511bf22":"code","ffdc33f1":"code","91d9dbfa":"code","bf582d4a":"code","1a102ac9":"markdown","ddf38f69":"markdown","0c3799c9":"markdown","3c91237e":"markdown","b1ebb71a":"markdown"},"source":{"2c1de975":"import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn import metrics","e036e215":"train = pd.read_csv(\"..\/input\/songs-folds\/train_folds.csv\")\ntest = pd.read_csv(\"..\/input\/song-popularity-prediction\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")","5d5f55c3":"train.shape, test.shape","9da07f1f":"train.tail()","2a9c5ad6":"useful_cols = [col for col in train.columns if col not in ('id', 'kfold', 'song_popularity')]\ncat_cols = [col for col in useful_cols if train[col].nunique() < 30]\n\n## selecting only the original columns from test-dataset\ntest = test.loc[:, useful_cols]\ntest.shape","1dd3560f":"# handling missing values with fillna Approach\nfor col in useful_cols:\n    train.loc[:, useful_cols] = train.loc[:, useful_cols].fillna(-999)\n    test.loc[:, useful_cols] = test.loc[:, useful_cols].fillna(-999)","ec6f520d":"final_predictions = []\nfor fold in range(5):\n    df_train = train.loc[train.kfold!=fold].reset_index(drop=True)\n    df_valid = train.loc[train.kfold==fold].reset_index(drop=True)\n    x_test = test.copy()\n       \n    y_train = df_train.song_popularity.values\n    y_valid = df_valid.song_popularity.values\n    \n    x_train = df_train[useful_cols]\n    x_valid = df_valid[useful_cols]\n    \n    model = linear_model.LogisticRegressionCV(cv=10,\n                                              class_weight=\"balanced\",\n                                              n_jobs=-1,\n                                              random_state=0,\n                                              scoring=\"accuracy\")\n    model.fit(x_train, y_train)\n    print(f\"fold: {fold} Accuracy Score:\", model.score(x_train, y_train))\n    \n    preds_valid = model.predict_proba(x_valid)[:, 1]\n    \n    auc = metrics.roc_auc_score(y_valid, preds_valid)\n    print(f\"fold: {fold} ROC AUC Score:\",auc)\n    print()\n    \n    test_preds = model.predict(x_test)\n    final_predictions.append(test_preds)","9363f376":"preds_test = np.mean(np.column_stack(final_predictions), axis=1)\npreds_test","75e7ccbe":"import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn import metrics","7cbc0272":"train = pd.read_csv(\"..\/input\/songs-folds\/train_folds.csv\")\ntest = pd.read_csv(\"..\/input\/song-popularity-prediction\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")\n\ntrain['isTrain'] = True\ntest[\"isTrain\"] = False\n\ntt = pd.concat((train, test), axis=0)","91c242cf":"tt.shape, train.shape, test.shape","c90b09fa":"tt.columns","a659bab0":"na_cols = [ \n    col for col in tt.columns if tt[col].isna().any() \n           and col not in ('id', 'kfold', 'song_popularity', 'isTrain')\n]\n\nprint(na_cols)","202141d3":"# Adding new feature for accounting missing features count along each observation \ntt['n_missing'] = tt[na_cols].isna().sum(axis=1)\n\n# # Adding new feature for missing cols with suffix \"_missing\"\ntt_missing_tag_df = tt[na_cols].isna()\ntt_missing_tag_df.columns = [f\"{col}_missing\" for col in tt_missing_tag_df.columns]\ntt = pd.concat([tt, tt_missing_tag_df], axis=1)\n\nprint(tt.shape)\ntt.head()","4724568a":"# fetching train data from tt\ndf_train = tt.query('isTrain==True')\ndf_train = df_train.drop(columns=['isTrain'], axis=1)\ndf_train.shape","33c4970b":"df_test = tt.loc[tt.isTrain==False]\ndf_test = df_test.drop(columns=['song_popularity', 'kfold', 'isTrain'], axis=1)\ndf_test.shape","ade41153":"# original features from the dataset\nFEATURES = [\n    \"song_duration_ms\",\n    \"acousticness\",\n    \"danceability\",\n    \"energy\",\n    \"instrumentalness\",\n    \"key\",\n    \"liveness\",\n    \"loudness\",\n    \"audio_mode\",\n    \"speechiness\",\n    \"tempo\",\n    \"time_signature\",\n    \"audio_valence\",\n]\n\nmissing_tags_cols = [ \n    'n_missing',\n    'song_duration_ms_missing', \n    'acousticness_missing',\n    'danceability_missing', \n    'energy_missing', \n    'instrumentalness_missing',\n    'key_missing', \n    'liveness_missing', \n    'loudness_missing'\n]\n\n\n# missing cols\nna_cols = ['song_duration_ms',\n 'acousticness',\n 'danceability',\n 'energy',\n 'instrumentalness',\n 'key',\n 'liveness',\n 'loudness']\n\n# categorical cols\ncat_cols = [ 'key', 'audio_mode', 'time_signature']\n\nuseful_cols = [col for col in df_train.columns if col not in ('id', 'kfold', 'song_popularity')]","813bc103":"print(useful_cols)","4107cf97":"## handling missing value with fillna\nfor na_col in na_cols:\n    df_train.loc[:, na_col] =  df_train.loc[:, na_col].fillna(-999)\n    df_test.loc[:, na_col] = df_test.loc[:, na_col].fillna(-999)\n    \n# no need to select same\ndf_test = df_test.loc[:, useful_cols]","bb9fc585":"final_predictions = []\nfor fold in range(5):\n    df_train = df_train.loc[train.kfold!=fold].reset_index(drop=True)\n    df_valid = df_train.loc[train.kfold==fold].reset_index(drop=True)\n    x_test = df_test.copy()\n       \n    y_train = df_train.song_popularity.values\n    y_valid = df_valid.song_popularity.values\n    \n    x_train = df_train[useful_cols]\n    x_valid = df_valid[useful_cols]\n    \n    model = linear_model.LogisticRegressionCV(cv=10,\n                                              solver='liblinear',\n                                              class_weight=\"balanced\",\n                                              n_jobs=-1,\n                                              random_state=0,\n                                              scoring=\"accuracy\")\n    model.fit(x_train, y_train)\n    print(f\"fold: {fold} Accuracy Score:\", model.score(x_train, y_train))\n    \n    preds_valid = model.predict_proba(x_valid)[:, 1]\n    \n    auc = metrics.roc_auc_score(y_valid, preds_valid)\n    print(f\"fold: {fold} ROC AUC Score:\",auc)\n    print()\n    \n    test_preds = model.predict(x_test)\n    final_predictions.append(test_preds)","82e44dff":"preds_test = np.mean(np.column_stack(final_predictions), axis=1)\n\nsubmission = pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")\nsubmission.song_popularity = preds_test\n\nsubmission.to_csv(\"submission.csv\", index=False)","8511bf22":"from sklearn.ensemble import RandomForestClassifier\n\nfinal_predictions = []\nfor fold in range(5):\n    df_train = df_train.loc[train.kfold!=fold].reset_index(drop=True)\n    df_valid = df_train.loc[train.kfold==fold].reset_index(drop=True)\n    x_test = df_test.copy()\n       \n    y_train = df_train.song_popularity.values\n    y_valid = df_valid.song_popularity.values\n    \n    x_train = df_train[useful_cols]\n    x_valid = df_valid[useful_cols]\n    \n    model = RandomForestClassifier(n_jobs=-1)\n    \n    model.fit(x_train, y_train)\n    print(f\"fold: {fold} Accuracy Score:\", model.score(x_train, y_train))\n    \n    preds_valid = model.predict_proba(x_valid)[:, 1]\n    \n    auc = metrics.roc_auc_score(y_valid, preds_valid)\n    print(f\"fold: {fold} ROC AUC Score:\",auc)\n    print()\n    \n    test_preds = model.predict(x_test)\n    final_predictions.append(test_preds)","ffdc33f1":"final_predictions","91d9dbfa":"preds_test = np.mean(np.column_stack(final_predictions), axis=1)\npreds_test[10:20]","bf582d4a":"preds_test = np.mean(np.column_stack(final_predictions), axis=1)\n\nsubmission = pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")\nsubmission.song_popularity = preds_test\n\nsubmission.to_csv(\"submission.csv\", index=False)","1a102ac9":"## Approach 1: handling missing values with fillna ","ddf38f69":"## Approach 2: handling missing values with fillna and adding missisng indicator","0c3799c9":"### Testing with RandomForest","3c91237e":"------------------","b1ebb71a":"### Conclusion: \n- There is significant improvement by using missing indicator tags of missing features"}}