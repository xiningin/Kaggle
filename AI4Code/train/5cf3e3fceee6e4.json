{"cell_type":{"bd93fd75":"code","c51b0d92":"code","a021d5d8":"code","775349a1":"code","fd52ada5":"code","53abebc5":"code","adfa1abf":"code","221013e2":"code","e906120a":"code","d8ff21b8":"code","6293c7ee":"code","9f141f9a":"code","ffc0e0ff":"code","8930a0d8":"code","b43e677a":"code","81a5ca84":"code","bfcf5d71":"code","59cdab65":"code","e4b84129":"code","b73e57e3":"code","5ea93600":"code","0cac41a5":"code","48a87749":"code","da20ece2":"code","e8858440":"code","be7ac21c":"code","be1d3553":"markdown","3f29b169":"markdown","bb2f061d":"markdown","d634c106":"markdown","9034987b":"markdown","038638ee":"markdown","2d3e7040":"markdown","a4a8aaaf":"markdown","18e3422c":"markdown","cc7f4dee":"markdown","9876d513":"markdown","cb809749":"markdown","bcd7f717":"markdown","6e6c27b3":"markdown","df23d02f":"markdown","951e43dd":"markdown"},"source":{"bd93fd75":"# For data manipulation\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\n\n# For widgets\nimport ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual\n\n# For visualization\nimport cufflinks as cf\nimport plotly\n\n# To run this visualization without external connections\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()","c51b0d92":"# Import data and check samples\ndf = pd.read_csv('\/kaggle\/input\/the-complete-disciples-ii-dataset\/Disciples.csv') \ndf.head(5)","a021d5d8":"# Find all columns with missing values and they numbers\ndf.isnull().sum()","775349a1":"#Select all nulls in Effect_1 column\ndf[pd.isnull(df.Effect_1)].Type_1","fd52ada5":"#But lets nullify this values in Effect_1 column\ndf.Effect_1.fillna(value = 0, inplace = True)","53abebc5":"df.columns.to_list()","adfa1abf":"# Rename some columns\ndf = df.rename(columns={'Available_in_Citadel': 'Available', \n                   'Basic_level': 'Level',\n                   'Evolution_branch': 'Evol',\n                   'Hit_points': 'HP', \n                   'Double_hit': 'x2', \n                   'Critical_damage_1': 'Crit_1',\n                   'Critical_damage_2': 'Crit_2'}).copy()","221013e2":"# Define function for count values in new columns with rules above\n\ndef vitality(row):\n    row.Vitality = round(row.HP \/ (1 - row.Armor \/ 100), 2)\n    return row\n\n# Define function which bild new empty row, apply function, convert values to numbers and fill empty values\ndef apply_v(data):\n    \n    data = data.assign(Vitality=\"\")\n    data = data.apply(vitality, axis='columns')\n    data.Vitality = pd.to_numeric(data.Vitality)\n    data.Vitality = data.Vitality.fillna(0)\n\n    return data\n    \n# Apply functions\ndf = apply_v(df)","e906120a":"# Define function for count values in new columns with rules above\n\ndef first_attack(row):\n    if isinstance(row.x2, str) and isinstance(row.Crit_1, str):\n        try:\n            row.First_Attack = round((float(row.Effect_1) * float(row.Accuracy_1\/100) + float(row.Effect_1)*0.1)* 2, 2)\n        except ValueError:\n            pass\n    elif isinstance(row.Crit_1, str):\n        try:\n            row.First_Attack = round(float(row.Effect_1) + float(row.Effect_1)*0.1, 2)\n        except ValueError:\n            pass\n    elif isinstance(row.x2, str):\n        try:\n            row.First_Attack = round(float(row.Effect_1) * float(row.Accuracy_1\/100) * 2, 2)\n        except ValueError:\n            pass\n    else:\n        try:\n            row.First_Attack = round(float(row.Effect_1) * float(row.Accuracy_1\/100), 2)\n        except ValueError:\n            pass\n    return row\n\ndef second_attack(row):\n    if isinstance(row.x2, str) and isinstance(row.Crit_2, str):\n        try:\n            row.Second_Attack = round((float(row.Effect_2) * float(row.Accuracy_2\/100) + float(row.Effect_2)*0.1)* 2, 2)\n        except ValueError:\n            pass\n    elif isinstance(row.Crit_2, str):\n        try:\n            row.Second_Attack = round(float(row.Effect_2) + float(row.Effect_2)*0.1, 2)\n        except ValueError:\n            pass\n    elif isinstance(row.x2, str):\n        try:\n            row.Second_Attack = round(float(row.Effect_2) * float(row.Accuracy_2\/100) * 2, 2)\n        except ValueError:\n            pass\n    else:\n        try:\n            row.Second_Attack = round(float(row.Effect_2) * float(row.Accuracy_2\/100), 2)\n        except ValueError:\n            pass\n    return row\n\n# Define function which bild new empty row, apply function, convert values to numbers and fill empty values\ndef apply_fs(data):\n    \n    data = data.assign(First_Attack=\"\")\n    data = data.apply(first_attack, axis='columns')\n    data.First_Attack = pd.to_numeric(data.First_Attack)\n    data.First_Attack = data.First_Attack.fillna(0)\n    \n    data = data.assign(Second_Attack=\"\")\n    data = data.apply(second_attack, axis='columns')\n    data.Second_Attack = pd.to_numeric(data.Second_Attack)\n    data.Second_Attack = data.Second_Attack.fillna(0)\n    \n    return data\n\n# Apply functions\ndf = apply_fs(df)","d8ff21b8":"# Define function for count values in new columns with rules above\n\ndef summary_attack(row):\n    try:\n        row.Summary_attack = float(row.First_Attack) + float(row.Second_Attack)\n    except ValueError:\n        pass\n    return row\n\n# Define function which bild new empty row, apply function, convert values to numbers and fill empty values\ndef applyer_sum(data):\n    \n    data = data.assign(Summary_attack=\"\")\n    data = data.apply(summary_attack, axis='columns')\n    data.Summary_attack = pd.to_numeric(data.Summary_attack)\n    data.Summary_attack = data.Summary_attack.fillna(0)\n    \n    return data\n\n# Apply functions\ndf = applyer_sum(df)","6293c7ee":"# Choose required columns in each dataset\ndf_norm = df.iloc[:, 30:34]","9f141f9a":"# Define function for data normalization and apply this \n\ndef normalizer(data):\n    \n    scaler = preprocessing.MinMaxScaler(feature_range=(0, 2))\n\n    names = data.columns\n    d = scaler.fit_transform(data)\n\n    return pd.DataFrame(d, columns=names)\n\ndf_norm = normalizer(df_norm)\ndf_norm","ffc0e0ff":"# Combine sought DataFrame with normalized and drop excess columns\nleft = df\nright = df_norm\ndf_with_norm = left.join(right, rsuffix='_norm')\n\ndf_with_norm.drop(columns = ['Vitality', 'First_Attack', 'Second_Attack','Summary_attack'])","8930a0d8":"# Define function for sum vitality and attack points in new columns with rules above\n\ndef summary_points(row):\n    try:\n        row.Summary_points = float(row.Vitality_norm) + float(row.Summary_attack_norm)\n    except ValueError:\n        pass\n    return row\n\ndef applyer_sum(data):\n    \n    data = data.assign(Summary_points=\"\")\n    data = data.apply(summary_points, axis='columns')\n    data.Summary_points = pd.to_numeric(data.Summary_points)\n    data.Summary_points = data.Summary_points.fillna(0)\n    \n    return data\n\n# Apply functions\ndf = applyer_sum(df_with_norm)","b43e677a":"#Check row with maximum vitality among units avalible in citadel\ndf_level = df.sort_values(by=['Vitality_norm'],axis=0, ascending=False)\ndf_level.loc[(df.Available == True)].groupby(by = 'Level').first()","81a5ca84":"#Check row with maximum Summary points among all units \ndf.iloc[[df[u'Vitality_norm'].idxmax()]]","bfcf5d71":"# Lets pick out this groups\nwarrior = df.loc[((df.Targets == 'closest') |\n                  (df.Targets == 'any')) &\n                 ((df.Type_1 == 'normal damage') |\n                  (df.Type_1 == 'frost') | \n                  (df.Type_1 == 'vampirism') | \n                  (df.Type_1 == 'thaumaturgy') | \n                  (df.Type_1 == 'burn') | \n                  (df.Type_1 == 'poison'))].copy()\n\nmage = df.loc[(df.Targets == 'all') & \n             ((df.Type_1 == 'normal damage') | \n              (df.Type_1 == 'frost') | \n              (df.Type_1 == 'vampirism') | \n              (df.Type_1 == 'thaumaturgy') | \n              (df.Type_1 == 'burn') | \n              (df.Type_1 == 'poison'))].copy()","59cdab65":"#Check winners in mage catigory\nwarrior_level = warrior.sort_values(by=['Summary_attack_norm'],axis=0, ascending=False)\nwarrior_level.loc[(warrior.Available == True)].groupby(by = 'Level').first()","e4b84129":"#Check winners in mage catigory\nmage_level = mage.sort_values(by=['Summary_attack_norm'],axis=0, ascending=False)\nmage_level.loc[(mage.Available == True)].groupby(by = 'Level').first()","b73e57e3":"df.iloc[[df[u'Summary_attack'].idxmax()]]","5ea93600":"#Check row with maximum Summary points among all units \ndf.iloc[[df[u'Summary_points'].idxmax()]]","0cac41a5":"#Check winners in mage catigory\nwarrior_level = warrior.sort_values(by=['Summary_points'],axis=0, ascending=False)\nwarrior_level.loc[(warrior.Available == True)].groupby(by = 'Level').first()","48a87749":"#Check winners in mage catigory\nmage_level = mage.sort_values(by=['Summary_points'],axis=0, ascending=False)\nmage_level.loc[(mage.Available == True)].groupby(by = 'Level').first()","da20ece2":"#Let's drop all normalized columns. They no need any more\ndf = df.drop(columns = ['Vitality_norm', 'First_Attack_norm', 'Second_Attack_norm', 'Summary_attack_norm', 'Summary_points'])","e8858440":"#For this visualization we use decorator ('@interact') from ipywidgets\n# and cufflinks+plotly combibnation\n@interact\ndef disciples_plot(x=list(df.select_dtypes('number').columns), \n                 y=list(df.select_dtypes('number').columns)[1:],\n                 theme=list(cf.themes.THEMES.keys()), \n                 colorscale=list(cf.colors._scales_names.keys())):\n    df.loc[df.Available == True].iplot(kind='scatter', x=x, y=y, mode='markers',\n                                       xTitle=x, yTitle=y,\n                                       title=f'{y} and {x}',\n                                       theme=theme, colorscale=colorscale)","be7ac21c":"#For this visualization we use decorator ('@interact') from ipywidgets\n@interact\ndef show_disciples_units(column=['HP', 'Vitality', 'First_Attack', 'Second_Attack', 'Summary_attack'], x=(10, 5000, 10)):\n    return df.loc[df[column] > x]","be1d3553":"Nice! Some units apply buffs or spells without any effect because their attack type is the effect(such paralysis or petrification) <br>\n","3f29b169":"## Questions from childhood about Disciples II\n\nWhen I was young I spend a lot of time in this game <br>\nI have many questions like this:\n- what the best pumping line among all avalible units?\n- what the best unit?\n\nLet's try to answer these questions and make some interactive visualisation","bb2f061d":"Winners of second competition \nAvailable in Citadel:\n1. Level 1 - Mankub(warrior), Yeti(mage)\n2. Level 2 - Skylord(warrior), Doomdrake(mage)\n3. Level 3 - Ice Giant(warrior), Tempest Giant(mage)\n4. Level 4 - Demon Lord(warrior), Votan's Heir(mage)\n5. Level 5 - Holy Avenger(warrior), Tiamath(mage)\n\nWinner among all units: \n* Super Champion - Hydra\n\n**And we find the last pumping lines! <br>\n... -> Mountain Giant -> Tempest Giant or Ice Giant -> Votan's Heir (Dwarf) <br>\nThis line give us a the strongest units on level 3 and 4**","d634c106":"For simple comparing lets sum this two Attack values <br>\n\n$$Summary\\_Attack = {First\\_Attack + Second\\_Attack}$$\n","9034987b":"### Make some visualization! ","038638ee":"Make shorten some bulky names ","2d3e7040":"Characteristics such as Summary_attack or Vitality have diffrent ranges of values <br>\nThis is not good if we want to combine this two in one <br> \nSo we need normalized data in this columns <br>","a4a8aaaf":"### Nice! We can prepare our data so lets find winners in diffrent categories!","18e3422c":"### The next question: Who is the best unit in a party?\nLets try to find our \"Chuck Norris\" in this data set <br>\n\nThis guy have a balance between Vitality and Summary Attack <br>","cc7f4dee":"\u0415verything is within the expected except nulls in Effect_1 column <br>\nLets check this out","9876d513":"### Who is hardest guy in a party?\nLets try to find our \"John McClane\" <br>\n\nAvailable in Citadel:\n1. Level 1 - Titan\n2. Level 2 - Marble Gargoyle\n3. Level 3 - Onyx Gargoyle\t\n4. Level 4 - Dracolich\n5. Level 5 - Abyssal Devil\n\nWinner among all units: \n* Super Champion - Nebiros\n\n**And we find nice pumping line! <br>\nGargoyle -> Marble Gargoyle -> Onyx Gargoyle (Damned) <br>\nThis line give us a hardest units on level 2 and 3 (this huge!)**","cb809749":"We have two vitality characteristics such as Armor and HP <br>\nArmor shows us how much percent of damage can be blocked (Armor = Percent of damage can be blocked) <br>\nThis is cool so we can combine this characteristics and convert to one single varible called Vitality:<br>\n<br>\n$$Vitality = {HP\\ \/\\ (1\\ -\\ Armor\\ \/\\ 100)}$$","bcd7f717":"### The next question: Who is strongest guy in a party?\nLets try to find our \"Hulk\" in this data set <br>\n\nThis is very complex question <br>\nFirst lets divided all units into groups:\n* Warrior (attack one single target)\n* Mage (attack all targets)\n* Healer\n* Summoner\n* Buffer (give buff)\n* Charmer(put spell without any dammage)\n\nIn this case we concentrate only on two groups Warrior and Mage(only this groups have damage)","6e6c27b3":"### In the end\nI show only little part of Disciples<br>\nHonestly this analysis not right because we did not:\n- use columns like immunity\n- analysed Healer, Summoner, Buffer, Charmer (this is huge part of units)\n- take into account vampirism(heal unit him self) and thaumaturgy(heal all party)\n- answer who the best unit between warriors and mages\n- and etc.\n\nI hope you can find this answers!<br>","df23d02f":"Final winners\nAvailable in Citadel:\n1. Level 1 - Mankub(warrior), Yeti(mage)\n2. Level 2 - Skylord(warrior), Doomdrake(mage)\n3. Level 3 - Ice Giant(warrior), Tempest Giant(mage)\n4. Level 4 - Demon Lord(warrior), Votan's Heir(mage)\n5. Level 5 - Overlord(warrior), Tiamath(mage)\n\nWinner among all units: \n* Super Champion - Nebiros\n\n**And we find the last pumping lines! <br>\n... -> ... -> Moloch -> Demon Lord -> Overlord (Damned) <br>\nThis line give us a the best units on level 4 and 5 (this huge!)**","951e43dd":"We have two basic attack characteristics such as Effect, Accuracy and additional Crit, X2 <br>\nEffect shows us value of damage can be done and Accuracy percent of succes attacks <br>\nCrit shows that unit give 10% additional damage and X2 means that unit can hit twice per turn <br>\nSo we can combine this characteristics(as we did before) and convert in two varibles called First and Second Attack:<br>\n\n$$First\\_Attack = {(Effect\\_1 \\times Accuracy\\_1) + Effect\\_1 \\times 0.1 (if\\ unit\\ have\\ Critical\\ hit)\\ \\ \\ | \\ \\times 2\\ (if\\ unit\\ have\\ Double\\ hit)}$$\n\n$$Second\\_Attack = {(Effect\\_2 \\times Accuracy\\_2) + Effect\\_2 \\times 0.1 (if\\ unit\\ have\\ Critical\\ hit)\\ \\ \\ | \\ \\times 2\\ (if\\ unit\\ have\\ Double\\ hit)}$$"}}