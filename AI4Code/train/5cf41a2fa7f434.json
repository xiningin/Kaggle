{"cell_type":{"4f8ff2e8":"code","5f3b9937":"code","b6ea91f8":"code","26da9917":"code","5edde565":"code","928b8eb5":"code","f53d6029":"code","b60ced7d":"code","bd42cadb":"code","44ded06b":"code","b1f30dd3":"code","2b527656":"code","c3f871fe":"markdown","b0fdc6bc":"markdown","c0cd78ef":"markdown","c3b2a1a9":"markdown","b2b3ba6b":"markdown","e9709ea5":"markdown"},"source":{"4f8ff2e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5f3b9937":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom random import random\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport gc\nimport fbprophet\nfrom fbprophet.plot import add_changepoints_to_plot","b6ea91f8":"features = ['Province_State','Country_Region','Date','ConfirmedCases','Fatalities']\ndf=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\",usecols=features)\ndf.fillna(' ',inplace=True)\ndf['Lat']=df['Province_State']+df['Country_Region']\ntop10=df\ndf['ConfirmedCases_cum'] = df.groupby(['Country_Region','Date'])['ConfirmedCases'].transform(pd.Series.sum)\ntop10 = df.groupby(['Country_Region']).agg({ 'Country_Region':'min','ConfirmedCases': 'sum'})\ncountries_list=df.Lat.unique()\n\n#read in test file \ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv\")\ntest.fillna(' ',inplace=True)\ntest['Lat']=test['Province_State']+test['Country_Region']\n","26da9917":"top10Countries = top10.sort_values(['ConfirmedCases'],ascending=False)['Country_Region'].head(10).to_numpy()\ndisplay(top10Countries)","5edde565":"# Plot the data with Matplotlib defaults\nsns.set() \ndf_top=df.loc[df['Country_Region'].isin(top10Countries)]\ndf_top=df_top.drop('Lat',axis=1 )\n#display(df_top )\nplt.figure(figsize=(16, 6))\n#sns.set_context(\"talk\")\nsns.set_style(\"whitegrid\")\nax = sns.lineplot(x=\"Date\", y=\"ConfirmedCases_cum\", hue=\"Country_Region\",\n                   estimator=None, lw=1, \n                  data=df_top)\nplt.draw()\nax.set_xticklabels(ax.get_xticklabels(), rotation=75, ha='right')","928b8eb5":"def is_Off_Season(ds,start=8,end=11):\n    date = pd.to_datetime(ds)\n    return (date.month > start or date.month < end)\n\n#### Forecaster\ndef forecast(df,ds,y,y_label='y',title=\"Projection\", plot=False,flexibility=0.25,changepoints = []):\n    df = df[[ds, y]]\n    df=df.rename(columns={ds: 'ds', y: 'y'})\n    prophet = fbprophet.Prophet(changepoint_prior_scale=flexibility,weekly_seasonality=False)\n    df['off_season'] = df['ds'].apply(is_Off_Season)\n    prophet.add_seasonality(name='off_season', period=120, fourier_order=10, condition_name='off_season')\n    prophet.fit(df)\n    forecast = prophet.make_future_dataframe(periods=240, freq='D')\n    forecast['off_season'] = forecast['ds'].apply(is_Off_Season)\n    forecast = prophet.predict(forecast)\n    # Avoid negative\n    forecast[\"yhat\"] = np.where(forecast[\"yhat\"]<0,0,forecast[\"yhat\"])\n    forecast[\"yhat_lower\"] = np.where(forecast[\"yhat_lower\"]<0,0,forecast[\"yhat_lower\"])\n    forecast[\"yhat_upper\"] = np.where(forecast[\"yhat_upper\"]<0,0,forecast[\"yhat_upper\"])\n    if plot :\n        fig=prophet.plot(forecast, xlabel = 'Date', ylabel = y_label)\n        a = add_changepoints_to_plot(fig.gca(), prophet, forecast)\n        prophet.plot_components(forecast)\n        plt.title(title);\n    return (forecast,prophet)","f53d6029":"def dateplot(x, y, **kwargs):\n    ax = plt.gca()\n    data = kwargs.pop(\"data\")\n    data.plot(x=x, y=y, ax=ax, grid=False, **kwargs)\n\n#display(df[df.Country_Region == \"US\"].head(10))\ng = sns.FacetGrid(df[df.Country_Region == \"US\"], col=\"Country_Region\", col_wrap=2, height=3.5, aspect=2)\ng = g.map_dataframe(dateplot, \"Date\", \"ConfirmedCases\")","b60ced7d":"## Using profit to get trends for us \nmodelDs = df_top [df_top['Country_Region'].str.find(\"US\")!=-1][['Date', 'ConfirmedCases_cum' ]]\nforecast(modelDs,'Date','ConfirmedCases_cum','Confirmed Cases','Confirmed Cases US',True) \n#del df_top\ngc.collect()","bd42cadb":"#collect residual garbage\ngc.collect()\n#display(df [df['Lat'].str.find(\"US\")!=-1].head(2))\n#groupByLat = df[df['Lat'].str.find(\"Afghanistan\")!=-1].groupby('Lat')\ngroupByLat = df.groupby('Lat')\ncols = ['Lat','ConfirmedCase_Forecast','Fatalities_Forecast']\nsub_cols= ['ForecastId','ConfirmedCases','Fatalities']\nsubmissions= pd.DataFrame(columns=sub_cols)\nresults = pd.DataFrame(columns=cols)\ni=1;\nfor name, group in groupByLat:\n    print(\"Forecasting for group : %s:%s\"%(i,name))\n    forecast_cc = forecast(group,'Date','ConfirmedCases',flexibility=0.35) \n    forecast_fat = forecast(group,'Date','Fatalities',flexibility=0.35) \n    # Populate test data set \n    for index, row in test[test['Lat']==name].iterrows():\n        cc=forecast_cc[0][forecast_cc[0]['ds']==row['Date']][\"yhat\"].values[0]\n        f=forecast_fat[0][forecast_fat[0]['ds']==row['Date']][\"yhat\"].values[0]\n        submissions=submissions.append(pd.Series([int(row['ForecastId']),round(cc),round(f)],index=sub_cols),ignore_index=True )\n    results = results.append(pd.Series([name,forecast_cc[0],forecast_fat[0]],index=cols),ignore_index=True )\n    del forecast_cc\n    del forecast_fat\n    gc.collect()\n    #for index, row in group.iterrows():\n    #    results = results.append(pd.Series([name,row['ConfirmedCases'],row['Fatalities']],index=cols),ignore_index=True )\n    i=i+1\ndel groupByLat","44ded06b":"## Create submission File\n#os.remove(\"\/kaggle\/working\/submission.csv\")\n#pd.options.display.float_format = '{:,.0f}'.format\n# Convert forecast Id to Integer\nsubmissions[\"ForecastId\"] =submissions.ForecastId.astype('int64')\nsubmissions.to_csv('submission.csv', index=False)\n#print(check_output([\"ls\", \"..\/working\"]).decode(\"utf8\"))\ndisplay(submissions)","b1f30dd3":"# see forecast for Massachussets \ngroupByLat = df[df['Lat'].str.find(\"Massachusetts\")!=-1].groupby('Lat')\nfor name, group in groupByLat:\n    forecast_cc = forecast(group,'Date', 'ConfirmedCases','ConfirmedCases Massachusetts', 'ConfirmedCases',True,flexibility=0.35) \n    #forecast_cc = forecast(group,'Date', 'ConfirmedCases','ConfirmedCases Massachusetts', 'ConfirmedCases',True,flexibility=0.15)\n    forecast_fat = forecast(group,'Date','Fatalities','Fatalities Massachusetts', 'Fatalities',True,flexibility=0.25)\n    \n# see forecast for NY \ngroupByLat = df[df['Lat'].str.find(\"New York\")!=-1].groupby('Lat')\nfor name, group in groupByLat:\n    forecast_cc = forecast(group,'Date', 'ConfirmedCases','ConfirmedCases New York', 'ConfirmedCases',True,flexibility=0.35) \n    #forecast_cc = forecast(group,'Date', 'ConfirmedCases','ConfirmedCases Massachusetts', 'ConfirmedCases',True,flexibility=0.15)\n    forecast_fat = forecast(group,'Date','Fatalities','Fatalities New York', 'Fatalities',True,flexibility=0.25)    ","2b527656":"# India Forecast\ngroupByLat = df[df['Lat'].str.find(\"India\")!=-1].groupby('Lat')\nfor name, group in groupByLat:\n    forecast_cc = forecast(group,'Date', 'ConfirmedCases','ConfirmedCases India', 'ConfirmedCases',True) \n    forecast_fat = forecast(group,'Date','Fatalities','Fatalities India', 'Fatalities',True)","c3f871fe":"# Forecast for MA and NY","b0fdc6bc":"# **Visualize Country Curves Top 10 Countries by confirmed cases**","c0cd78ef":"# **Predicted US trend**","c3b2a1a9":"#  Define Prophet Model\n\nAssumptions\n\nAssuming seasonal pattern\nNeed to see if can include population density\nNeed to see if can include impact of social distancing by a regressor","b2b3ba6b":"# Run model on test data","e9709ea5":"# Forecast for India"}}