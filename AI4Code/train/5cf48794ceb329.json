{"cell_type":{"6c07b216":"code","52ccffe8":"code","6dbf5f8a":"code","62a0cdf7":"code","05a2f17f":"code","663a69c4":"code","b09dd900":"code","dfc2e693":"code","3bb20b83":"code","6e794622":"code","618e554d":"code","503a07ff":"code","8145cdd5":"code","aafd158e":"code","4f8d76b3":"code","b6604180":"code","1311f078":"code","e5d6fd48":"code","dd117760":"code","8f90f950":"code","65f49cd7":"code","e79b73ed":"code","55a55524":"code","560f063e":"code","390a4f82":"code","86426683":"code","5f73b9f2":"code","101a937f":"code","5135b3a0":"code","bb53f648":"code","a7c53fc4":"code","06b54189":"code","2de78c49":"code","c08477f3":"code","643d56d5":"code","22d0e4a7":"code","88f7b1a2":"code","e4f506c3":"code","9f635dae":"code","87179929":"code","04b8fd56":"code","fb641e3b":"code","7f01678a":"code","ff9db2ea":"code","637d3a1a":"code","fccc77ab":"code","9afea2ed":"code","87328408":"code","931dbb3e":"code","d43426a5":"code","de35db78":"code","450ab38e":"code","4cbd4550":"code","8a9954e2":"code","ac8f4cd4":"code","0e10d46c":"code","eec4f3e3":"code","7aa09c90":"code","55f8488f":"code","35dd8a03":"code","502df632":"code","351ef960":"code","d8512883":"code","482c0200":"code","a0d902cc":"code","c36e672a":"code","d6ac87e0":"code","2a95b797":"code","f73520d5":"code","91631c9c":"code","0851d7d9":"code","dd5e40c7":"code","82acd927":"code","3b8caecd":"code","fe301eb9":"code","340f4a56":"code","0c0cf1f2":"code","9ba709f4":"code","3ac7afe5":"code","0308b180":"code","ba8922d7":"code","7799fc7c":"code","8be9a18f":"code","b13705a3":"code","118abeb3":"code","b38308f7":"code","4af2a6d6":"code","0529a96f":"code","545f587a":"code","58095752":"code","acb384e2":"code","76e2ad77":"code","be2950bb":"code","a109b1f1":"code","3865c364":"markdown","8eec22ec":"markdown","562887b0":"markdown","2b919e64":"markdown","42fa4d54":"markdown","0162f4e4":"markdown","3c6e2836":"markdown","c647c7c6":"markdown","65ba94fc":"markdown","48922dce":"markdown","1f1af8ab":"markdown","5bc7ae9d":"markdown","da065dfd":"markdown","e9822f05":"markdown","fe3f3ea2":"markdown","ffe45d5f":"markdown","3c9c2379":"markdown","1879e8bd":"markdown","e29707e6":"markdown","903e810f":"markdown","3f5c6008":"markdown","5435935a":"markdown"},"source":{"6c07b216":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52ccffe8":"import numpy as np \nimport pandas as pd\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6dbf5f8a":"train = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\nsample_sub = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv')\ndf=train.copy()","62a0cdf7":"test.head(2)","05a2f17f":"df.head(2)","663a69c4":"df.shape","b09dd900":"df.info()","dfc2e693":"df.columns","3bb20b83":"df.isnull().values.any()","6e794622":"df.isnull().sum()","618e554d":"df.corr()","503a07ff":"df[df.duplicated() == True]","8145cdd5":"\ndf_gender=df['Gender'].value_counts().to_frame().reset_index().rename(columns={'index':'Gender','Gender':'count'})\n\n\nfig = go.Figure([go.Pie(labels=df_gender['Gender'], values=df_gender['count'],hole=0.2)])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\n\nfig.update_layout(title=\"Gender Count\",title_x=0.5)\nfig.show()","aafd158e":"# Violin Boxplot\ndf_agevi=df['Age']\nfig = go.Figure(data=go.Violin(y=df_agevi, box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='Age'))\n\nfig.update_layout(yaxis_zeroline=False,title=\"Distribution Of Age\",title_x=0.5)\nfig.show()","4f8d76b3":"fig = go.Figure(go.Box(y=df['Age'],name=\"Age \")) # to get Horizonal plot change axis   \nfig.update_layout(title=\"Distribution of Age \",title_x=0.5)\nfig.show()","b6604180":"plt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(df['Age'], color = 'BlueViolet')\nplt.title('Distribution of Age', fontsize = 20)\nplt.show()","1311f078":"df['age_category']=np.where((df['Age']<20),\"below 20\",\n                                 np.where((df['Age']>19)&(df['Age']<=30),\"20-30\",\n                                    np.where((df['Age']>30)&(df['Age']<=50),\"31-50\",\n                                                np.where(df['Age']>50,\"Above 50\",\"NULL\"))))\n\nage=df['age_category'].value_counts().to_frame().reset_index().rename(columns={'index':'age_category','age_category':'Count'})\n\n\nfig = go.Figure(data=[go.Scatter(\n    x=age['age_category'], y=age['Count'],\n    mode='markers',\n    marker=dict(\n        color=age['Count'],\n        size=age['Count']*0.0005,\n        showscale=True\n    ))])\n\nfig.update_layout(title=' Age ',xaxis_title=\"Age Category\",yaxis_title=\"Number Of People\",title_x=0.5)\nfig.show()","e5d6fd48":"df_VD=df.groupby(by =['Gender','age_category','Vehicle_Damage'])['Age'].count().to_frame().reset_index().rename(columns={'Gender':'Gender','Vehicle_Damage':'Vehicle_Damage','age_category':'Age Category','Age':'Count'})\ndf_VD['Vehicle_Damage']=df_VD['Vehicle_Damage'].astype('category')\ndf_VD\n\nfig = px.bar(df_VD, x=\"Vehicle_Damage\", y=\"Count\",color=\"Age Category\",barmode=\"group\",\n             facet_row=\"Gender\"\n             )\nfig.update_layout(title_text='Age Category With Vehicle Damage And Gender',title_x=0.5)\nfig.show()","dd117760":"df_Vehicle_Damage=df['Vehicle_Damage'].value_counts().to_frame().reset_index().rename(columns={'index':'Vehicle_Damage','Vehicle_Damage':'count'})\n\n\nfig = go.Figure([go.Pie(labels=df_Vehicle_Damage['Vehicle_Damage'], values=df_Vehicle_Damage['count'])])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\n\nfig.update_layout(title=\" Vehicle Damage\",title_x=0.5)\nfig.show()","8f90f950":"df_Vintage=df.groupby(by =['Gender','age_category'])['Vintage'].mean().to_frame().reset_index().rename(columns={'Gender':'Gender','age_category':'Age Category','Vintage':'Days'})\ndf_Vintage\n\nfig = px.bar(df_Vintage, x=\"Age Category\", y=\"Days\",\n             color=\"Gender\",barmode=\"group\")\n               \nfig.update_layout(title_text='Average Vintage Days With Gender,Age Class',title_x=0.5)\nfig.show()","65f49cd7":"df_PSC=df.Policy_Sales_Channel.value_counts().to_frame().reset_index()[0:10]\n\ndf_PSC['index']='PSC_Cod '+df_PSC['index'].astype('str')\n\n\nfig = go.Figure(go.Bar(\n    x=df_PSC['index'],y=df_PSC['Policy_Sales_Channel'],\n    marker={'color': df_PSC['Policy_Sales_Channel'], \n    'colorscale': 'sunsetdark'},  \n    text=df_PSC['Policy_Sales_Channel'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text=' Top 10 Policy Sales Channel Code',xaxis_title=\"Value\",yaxis_title=\"Number Of People\",title_x=0.5)\nfig.show()","e79b73ed":"df_PSC=df.Policy_Sales_Channel.value_counts().to_frame().reset_index()[0:10]\nindexs=df_PSC['index']\ndf_PSC_age=df.groupby('Policy_Sales_Channel')['Age'].mean().to_frame().reset_index()\n\navg_age = []\nage_cod=[]\nfor number in indexs:\n    \n    df_PSC_age_top1=df_PSC_age[df_PSC_age['Policy_Sales_Channel']==number]['Age']\n    avg_age.extend(df_PSC_age_top1)\n        \n         \ndf_PSC_age = pd.DataFrame(avg_age)\ndf_PSC_Cod= pd.DataFrame(indexs)\n\n\nframes = [df_PSC_age, df_PSC_Cod]\n\nresult = pd.concat(frames,axis=1)\n\nresult.columns = ['Age', 'Cod']\n\nresult['Cod']='PSC_Cod '+result['Cod'].astype('str')\n\nfig = go.Figure(go.Bar(\n    x=result['Cod'],y=result['Age'],\n    marker={'color': result['Age'], \n    'colorscale': 'sunsetdark'},  \n    text=result['Age'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text=' Top 10 Policy Sales Channel Code Average Age',xaxis_title=\"Policy Sales Channel\",yaxis_title=\"Age\",title_x=0.5)\nfig.show()","55a55524":"df_DL=df.groupby(by =['Gender','Driving_License'])['Age'].count().to_frame().reset_index().rename(columns={'Gender':'Gender','age_category':'Age Category','Age':'count'})\ndf_DL['Driving_License']=df_DL['Driving_License'].astype('category')\ndf_DL\n\nfig = px.bar(df_DL, x=\"Driving_License\", y=\"count\",\n             color=\"Gender\",barmode=\"group\")\n               \nfig.update_layout(title_text='Gender With Driving License',title_x=0.5)\nfig.show()","560f063e":"df_Driving_License=df['Driving_License'].value_counts().to_frame().reset_index().rename(columns={'index':'Driving_License','Driving_License':'count'})\n\n\nfig = go.Figure([go.Pie(labels=df_Driving_License['Driving_License'], values=df_Driving_License['count'],hole=0.2)])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\n\nfig.update_layout(title=\" Customer Driving License\",title_x=0.5)\nfig.show()","390a4f82":"df_RGC=df.Region_Code.value_counts().to_frame().reset_index()[0:10]\n\ndf_RGC['index']='R_Cod '+df_RGC['index'].astype('str')\n\n\nfig = go.Figure(go.Bar(\n    x=df_RGC['index'],y=df_RGC['Region_Code'],\n    marker={'color': df_RGC['Region_Code'], \n    'colorscale': 'portland'},  \n    text=df_RGC['Region_Code'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Top 10 Region Code',xaxis_title=\"Region Code\",yaxis_title=\"Number Of People\",title_x=0.5)\nfig.show()","86426683":"\n\ndf_V_Age=df['Vehicle_Age'].value_counts().to_frame().reset_index().rename(columns={'index':'Vehicle_Age','Vehicle_Age':'Count'})\n\n\nfig = go.Figure(data=[go.Scatter(\n    x=df_V_Age['Vehicle_Age'], y=df_V_Age['Count'],\n    mode='markers',\n    marker=dict(\n        color=df_V_Age['Count'],\n        size=df_V_Age['Count']*0.0005,\n        showscale=True\n    ))])\n\nfig.update_layout(title='Vehicle Age ',xaxis_title=\" Vehicle Age \",yaxis_title=\"Number Of Vehicle\",title_x=0.5)\nfig.show()","5f73b9f2":"df_VAge_AP_mean=df.groupby(by =['Vehicle_Age'])['Annual_Premium'].mean().to_frame().reset_index().rename(columns={'Vehicle_Age':'Vehicle_Age','Annual_Premium':'Annual_Premium'})\ndf_VAge_AP_mean\n\n\nfig = go.Figure(go.Bar(\n    x=df_VAge_AP_mean['Vehicle_Age'],y=df_VAge_AP_mean['Annual_Premium'],\n    marker={'color': df_VAge_AP_mean['Annual_Premium'], \n    'colorscale': 'portland'},  \n    text=df_VAge_AP_mean['Annual_Premium'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Vehicle Age With Annual Premium',xaxis_title=\"Vehicle Age\",yaxis_title=\"Premium Price\",title_x=0.5)\nfig.show()","101a937f":"df_Response=df['Response'].value_counts().to_frame().reset_index().rename(columns={'index':'Response','Response':'count'})\n\n\nfig = go.Figure([go.Pie(labels=df_Response['Response'], values=df_Response['count'],hole=0.2)])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\n\nfig.update_layout(title=\" Response\",title_x=0.5)\nfig.show()","5135b3a0":"df_gender_Previously_Insured=df.groupby(by =['Gender','Previously_Insured'])['Age'].count().to_frame().reset_index().rename(columns={'Gender':'Gender','Previously_Insured':'Previously_Insured','Age':'Count'})\ndf_gender_Previously_Insured['Previously_Insured']=df_gender_Previously_Insured['Previously_Insured'].astype('category')\n\nfig = px.bar(df_gender_Previously_Insured, x=\"Gender\", y=\"Count\",color=\"Previously_Insured\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Gender With Previously Insured',title_x=0.5)\nfig.show()","bb53f648":"df_gender_response=df.groupby(by =['Gender','Response'])['Age'].count().to_frame().reset_index().rename(columns={'Gender':'Gender','Response':'Response','Age':'Count'})\ndf_gender_response['Response']=df_gender_response['Response'].astype('category')\n\nfig = px.bar(df_gender_response, x=\"Gender\", y=\"Count\",color=\"Response\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Gender With Response',title_x=0.5)\nfig.show()","a7c53fc4":"\ndf_gender_Vehicle_Age=df.groupby(by =['Response','Vehicle_Age'])['Age'].count().to_frame().reset_index().rename(columns={'Response':'Response','Vehicle_Age':'Vehicle_Age','Age':'Count'})\ndf_gender_Vehicle_Age['Response']=df_gender_Vehicle_Age['Response'].astype('category')\n\nfig = px.bar(df_gender_Vehicle_Age, x=\"Response\", y=\"Count\",color=\"Vehicle_Age\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Response With Vehicle Age',title_x=0.5)\nfig.show()","06b54189":"print(\"Correlation Matrix\")\nplt.rcParams['figure.figsize']=(8,6)\nsns.heatmap(df.corr(),cmap='coolwarm',linewidths=.5,fmt=\".2f\",annot = True);","2de78c49":"test=pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\ndf_model=train.copy()\ndf_model=df_model.drop(['id'], axis=1)\ndf_model.head(5)","c08477f3":"gender_map= {'Male':0,'Female':1}\nvehicle_age_map= {'< 1 Year':0,'1-2 Year':1,'> 2 Years':2}\nvehicle_damage_map= {'Yes':1,'No':0}\n\ndf_model['Gender']= df_model['Gender'].map(gender_map)\ndf_model['Vehicle_Age']= df_model['Vehicle_Age'].map(vehicle_age_map)\ndf_model['Vehicle_Damage']= df_model['Vehicle_Damage'].map(vehicle_damage_map)\ndf_model.head(5)","643d56d5":"df_model['Region_Code']=df_model['Region_Code'].astype(int)\ndf_model['Policy_Sales_Channel']=df_model['Policy_Sales_Channel'].astype(int)\n\ndf_model.info()","22d0e4a7":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)","88f7b1a2":"df_out=df_model.copy()\nclf.fit_predict(df_out)\ndf_scores = clf.negative_outlier_factor_","e4f506c3":"df_scores[0:10]","9f635dae":"np.sort(df_scores)[0:20]","87179929":"threshold_value = np.sort(df_scores)[1]\nthreshold_value","04b8fd56":"Outlier_df= df_out[df_scores < threshold_value]\nindexs=Outlier_df.index\nOutlier_df","fb641e3b":"# Kick Outliers\nfor i in indexs:\n    df_model.drop(i, axis = 0,inplace = True)","7f01678a":"y=df_model['Response']\nX=df_model.drop('Response',axis=1)\n\nprint('X shape :',X.shape)\nprint('y shape :',y.shape)","ff9db2ea":"# Normalize\nX = (X - np.min(X)) \/ (np.max(X) - np.min(X)).values\nX.head(2)","637d3a1a":"# Data split\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nX_train,X_test,y_train,y_test=train_test_split(X,y,\n                                               test_size=0.2,\n                                               random_state=42)","fccc77ab":"print('X_train :',X_train.shape)\nprint('X_test :',X_test.shape)\nprint('y_train :',y_train.shape)\nprint('y_test :',y_test.shape)","9afea2ed":"from sklearn.linear_model import LogisticRegression\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","87328408":"y_pred_loj = loj_model.predict(X_test)","931dbb3e":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_loj)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':11}, cmap = 'PuBu',fmt=\".1f\");","d43426a5":"print(\"Training Accuracy :\", loj_model.score(X_train, y_train))\n\nprint(\"Testing Accuracy :\", loj_model.score(X_test, y_test))","de35db78":"print(classification_report(y_test, y_pred_loj))","450ab38e":"cross_val_score(loj_model, X_test, y_test, cv = 10).mean()","4cbd4550":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","8a9954e2":"y_pred_nb = nb_model.predict(X_test)","ac8f4cd4":"accuracy_score(y_test, y_pred_nb)","0e10d46c":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_nb)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","eec4f3e3":"print(classification_report(y_test, y_pred_nb))","7aa09c90":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","55f8488f":"y_pred_knn = knn_model.predict(X_test)","35dd8a03":"accuracy_score(y_test, y_pred_knn)","502df632":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_knn)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","351ef960":"print(classification_report(y_test, y_pred_knn))","d8512883":"from sklearn.neural_network import MLPClassifier\nmlpc = MLPClassifier().fit(X_train, y_train)","482c0200":"y_pred_mlpc = mlpc.predict(X_test)\naccuracy_score(y_test,y_pred_mlpc)","a0d902cc":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_mlpc)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","c36e672a":"print(classification_report(y_test, y_pred_mlpc))","d6ac87e0":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier().fit(X_train, y_train)","2a95b797":"y_pred_rf = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred_rf)","f73520d5":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_rf)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","91631c9c":"print(classification_report(y_test, y_pred_rf))","0851d7d9":"Importance = pd.DataFrame({\"Importance\": rf_model.feature_importances_*100},\n                         index = X_train.columns)","dd5e40c7":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Variable Significance Levels\")","82acd927":"from sklearn.ensemble import GradientBoostingClassifier","3b8caecd":"gbm_model = GradientBoostingClassifier().fit(X_train, y_train)","fe301eb9":"y_pred_gbm = gbm_model.predict(X_test)\naccuracy_score(y_test, y_pred_gbm)","340f4a56":"print(classification_report(y_test, y_pred_gbm))","0c0cf1f2":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_gbm)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","9ba709f4":"from xgboost import XGBClassifier\nimport xgboost as xgb\nxgb_model = XGBClassifier().fit(X_train, y_train)","3ac7afe5":"y_pred_xgb_model = xgb_model.predict(X_test)\naccuracy_score(y_test, y_pred_xgb_model)","0308b180":"print(classification_report(y_test, y_pred_xgb_model))","ba8922d7":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_xgb_model)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","7799fc7c":"xgb.plot_importance(xgb_model)","8be9a18f":"from sklearn.metrics import roc_curve, auc\n\nxgb_model=XGBClassifier().fit(X_train, y_train)\n\ny_score = xgb_model.predict_proba(X_test)[:, 1]\n\n\nfpr, tpr, thresholds = roc_curve(y_test, y_score)\n\nfig = px.area(\n    x=fpr, y=tpr,\n    title=f'ROC Curve (AUC={auc(fpr, tpr):.4f})',\n    labels=dict(x='False Positive Rate', y='True Positive Rate'),\n    width=700, height=500\n)\nfig.add_shape(\n    type='line', line=dict(dash='dash'),\n    x0=0, x1=1, y0=0, y1=1\n)\n\nfig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\nfig.update_xaxes(constrain='domain')\nfig.show()","b13705a3":"# Model Tuning\nXGB_model = XGBClassifier(random_state = 42, max_depth = 8, n_estimators = 3000, \n                          reg_lambda = 1.2, reg_alpha = 1.2, \n                          min_child_weight = 1,objective = 'binary:logistic',\n                         learning_rate = 0.15, gamma = 0.3, colsample_bytree = 0.5,\n                          eval_metric = 'auc').fit(X_train, y_train)","118abeb3":"y_pred_XGB_model = XGB_model.predict(X_test)\naccuracy_score(y_test, y_pred_XGB_model)","b38308f7":"print(classification_report(y_test, y_pred_XGB_model))","4af2a6d6":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_XGB_model)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","0529a96f":"from lightgbm import LGBMClassifier","545f587a":"LGB_model = LGBMClassifier(random_state=42, max_depth= 8,n_estimators=3000,\n                    reg_lambda=1.2, reg_alpha=1.2, min_child_weight=1,verbose= 1,\n                    learning_rate = 0.15, gamma = 0.3, colsample_bytree = 0.5,\n                    eval_metric = 'auc', is_higher_better = 1, plot = True)\nLGB_model.fit(X_train, y_train)","58095752":"y_pred_lgbm_model = LGB_model.predict(X_test)\naccuracy_score(y_test, y_pred_lgbm_model)","acb384e2":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_lgbm_model)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","76e2ad77":"print(classification_report(y_test, y_pred_lgbm_model))","be2950bb":"models = [\n    knn_model,\n    loj_model,\n    nb_model,\n    mlpc,\n    gbm_model,\n    LGB_model,\n    xgb_model,\n    XGB_model,\n    rf_model,\n      \n]\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(names + \":\" )\n    print(\"Accuracy: {:.4%}\".format(accuracy))","a109b1f1":"result = []\n\nresults = pd.DataFrame(columns= [\"Models\",\"Accuracy\"])\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)    \n    result = pd.DataFrame([[names, accuracy*100]], columns= [\"Models\",\"Accuracy\"])\n    results = results.append(result)\n    \n    \nsns.barplot(x= 'Accuracy', y = 'Models', data=results, color=\"r\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy Ratios of Models'); ","3865c364":"## **Data Description** <br>\n**id** <br> Unique ID for the customer <br>\n**Gender**<br> Gender of the customer <br>\n**Age**<br> Age of the customer <br>\n**Driving_License** <br>\n 0 : Customer does not have DL <br>\n 1 : Customer already has DL <br>\n**Region_Code**<br> Unique code for the region of the customer <br>\n**Previously_Insured** <br>\n1 : Customer already has Vehicle Insurance <br>\n0 : Customer doesn't have Vehicle Insurance <br>\n**Vehicle_Age** <br> Age of the Vehicle <br>\n**Vehicle_Damage**: <br>\n1 : Customer got his\/her vehicle damaged in the past.<br>\n0 : Customer didn't get his\/her vehicle damaged in the past. <br>\n**Annual_Premium**: The amount customer needs to pay as premium in the year <br>\n**PolicySalesChannel**<br> Anonymized Code for the channel of outreaching to the customer ie. Different Agents, Over Mail, Over Phone, In Person, etc.<br>\n**Vintage**<br> Number of Days, Customer has been associated with the company <br>\n**Response** <br>\n1 : Customer is interested <br>\n0 : Customer is not interested <br>","8eec22ec":"# <a id='1'> 1. Importing Libraries <\/a>","562887b0":"## <a id='14'>  Conclusion <\/a>","2b919e64":"# Table of contents\n\n<a href='#1'>1. Importing Libraries and Dataset <\/a> <br>\n<a href='#2'>2. Dataset <\/a> <br>\n<a href='#3'>3. Exploratory Data Analysis And Data Visualisation <\/a> <br>\n<a href='#4'>4. Data Preprocessing<\/a> <br>\n<a href='#5'>5. Logistic Regression <\/a> <br>\n<a href='#6'>6. Gaussian Naive Bayes <\/a> <br>\n<a href='#7'>7. KNN <\/a> <br>\n<a href='#8'>8. Artificial Neural Networks <\/a> <br>\n<a href='#9'>9. Random Forest <\/a> <br>\n<a href='#10'>10. Gradient Boosting Machines <\/a> <br>\n<a href='#11'>11. Xgboost <\/a> <br>\n<a href='#12'>12. LightGBM <\/a> <br>\n<a href='#13'>13. Comparison of All Models <\/a> <br>\n<a href='#14'>14. Conclusion <\/a> <br>\n<a href='#15'>15. End Note <\/a> <br>\n","42fa4d54":" ## <a id='8'>8.Artificial Neural Networks <\/a>","0162f4e4":"# <a id='3'> 3. Exploratory Data Analysis And Data Visualisation <\/a> \n","3c6e2836":"I hope you enjoyed my kernel.If you like this notebook, an Upvote would be great ! :)\n\nI am new with data science. Please comments me your feedbacks to help me improve myself.\n\nThanks for your time","c647c7c6":" ## <a id='9'>9.Random Forest <\/a>","65ba94fc":"\n ## <a id='5'> 5.Logistic Regression<\/a>","48922dce":"> # <a id='2'> 2. Data Set<\/a>","1f1af8ab":"## <a id='15'> <font color=\"LIGHTSEAGREEN\" size=+2.5><b>End Note<\/b><\/font> <\/a>","5bc7ae9d":"## Local Outlier Factor\n\n![](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4e\/LOF-idea.svg)\n*  The local outlier factor is based on a concept of a local density, where locality is given by k nearest neighbors, whose distance is used to estimate the density. By comparing the local density of an object to the local densities of its neighbors, one can identify regions of similar density, and points that have a substantially lower density than their neighbors. These are considered to be outliers.","da065dfd":" ## <a id='11'>11.XGBoost  <\/a>","e9822f05":"## <a id='13'> 13.Comparison of All Models <\/a>","fe3f3ea2":" ## <a id='6'> 6.Gaussian Naive Bayes<\/a>","ffe45d5f":"# <a id='4'>4.Data Preprocessing <\/a>","3c9c2379":" ## <a id='7'> 7.KNN<\/a>","1879e8bd":"<font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>My Other Kernels<\/b><\/font><br>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/book-review-ratings-data-analysis-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Book Review Ratings Analysis & Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/fish-market-data-visualisation-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Fish Market Data Visualisation & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/seabron-plotly-for-beginners\" class=\"btn btn-primary\" style=\"color:white;\">Seabron & Plotly For Beginners<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/basketball-players-stats-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Basketball Players Stats Data Visualisation<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/women-s-football-results-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Women's Football Results Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/estonia-disaster-visualization-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Estonia Disaster Visualization & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/us-police-shootings-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Us Police Shootings Data Visualisation<\/a>\n","e29707e6":" ## <a id='10'>10.Gradient Boosting Machines <\/a>","903e810f":" ## <a id='12'>12.LightGBM  <\/a>","3f5c6008":"               Driving_License \n         0 : Customer does not have DL \n         1 : Customer already has DL ","5435935a":"This dataset is unstable.<br>\nLearning is less because the dataset is unstable.<br>\nF1 score so low.We say that every incoming data does not take.<br>\nWe can create new data columns.<br>\nWe can drop the columns that are not important.We need do feature engineering.<br>"}}