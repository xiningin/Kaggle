{"cell_type":{"754993d2":"code","af7313da":"code","06af0665":"code","34d4a50e":"code","6d5eaf97":"code","f80b80f5":"code","ce5d9ff2":"code","2b6d5fd9":"code","a607f68e":"code","3c5b69d0":"markdown","0467c6df":"markdown","43692104":"markdown"},"source":{"754993d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as ny # linear algebra\nimport pandas as ps # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as plex\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af7313da":"train1 = ps.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest1 = ps.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngen_sub = ps.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\n\ntrain1.head(10)","06af0665":"train1.describe()","34d4a50e":"train1.isnull().sum() ## NaNs to clean up.","6d5eaf97":"# Correlation between labels on the training dataset.\n\nheatmap = plex.imshow(train1.corr())\nheatmap.show()\n#Pclass, Age and SibSp show darker corr towards survival rate below.","f80b80f5":"# patterns : % men and women who survived\n\nwomen = train1.loc[train1.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)\n\nmen = train1.loc[train1.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","ce5d9ff2":"# Supporting above observation with a barplot\n\nbarplot = plex.bar(train1, x='Survived', y='Sex',title=\"Survived vs Age\")\nbarplot.show()","2b6d5fd9":"# How does passenger class hold up survival counts ?\n\npclass_vs_surv = train1.groupby('Pclass')['Survived'].sum()\npclasses = train1['Pclass'].unique()\n\npiechart = plex.pie(values = pclass_vs_surv,names = pclasses, title = \"Pclass vs survival %\")\npiechart.show()","a607f68e":"# Using the RandomForest API \n\nfrom sklearn.ensemble import RandomForestClassifier\n\ny = train1[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = ps.get_dummies(train1[features])\nX_test = ps.get_dummies(test1[features])\n\nmodel = RandomForestClassifier(n_estimators=50, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = ps.DataFrame({'PassengerId': test1.PassengerId, 'Survived': predictions})\noutput.head(10)\noutput.to_csv('II_titanic_submission_1.csv', index=False)\nprint(\"Your submission was successfully saved!\")","3c5b69d0":"# 1. Primary checks","0467c6df":"# 3. Modelling","43692104":"# 2. Plots"}}