{"cell_type":{"46b2c72a":"code","114e8a26":"code","bbd1e6f7":"code","8a272a8c":"code","af830afc":"code","0fdcc45b":"code","6a7783d0":"code","b7c848af":"code","84d6f209":"code","31083875":"code","15aa4e16":"code","370feb1f":"code","99d174b9":"code","4b67f664":"code","bf422b5e":"code","8497c894":"code","9b64f12b":"code","47a29696":"code","566c791c":"code","0bc15dcd":"code","dbd6a0a9":"code","5cc24489":"code","d578143e":"code","453ebcfb":"code","4b30bfc6":"code","15b0dc0c":"code","35a9438a":"code","d6344211":"code","e69f4cb9":"code","b40b6445":"code","a11804f0":"markdown","6627a3f8":"markdown","793fd30a":"markdown","42fea664":"markdown","01d8f9b1":"markdown","29ca1fd3":"markdown","a044dedf":"markdown","efd19566":"markdown","a1a5da62":"markdown","085e2f2b":"markdown","ad9048ae":"markdown","2784e2a3":"markdown","e7cc370f":"markdown","2663c00f":"markdown","ec9586f6":"markdown","0a92d594":"markdown","ae084d82":"markdown","ee3548fb":"markdown","14732a71":"markdown","04c0be2e":"markdown"},"source":{"46b2c72a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","114e8a26":"wine = pd.read_csv('..\/input\/wine-pca\/Wine.csv')\nwine","bbd1e6f7":"wine.info()","8a272a8c":"wine.describe()","af830afc":"wine.columns","0fdcc45b":"X = wine.drop(columns=['Customer_Segment'])\nY = wine['Customer_Segment']","6a7783d0":"X.shape[1]","b7c848af":"import matplotlib.pyplot as plt\n\nplt.boxplot(X[0:14])\nplt.show()","84d6f209":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_scale = scaler.fit_transform(X)","31083875":"import matplotlib.pyplot as plt\n\nplt.boxplot(X_scale[0:14])\nplt.show()","15aa4e16":"from sklearn.model_selection import train_test_split\n\nx_train_all, x_test, y_train_all, y_test = train_test_split(X_scale,Y,test_size = 0.2)\nx_train, x_val, y_train, y_val = train_test_split(x_train_all,y_train_all,test_size = 0.2)","370feb1f":"x_test","99d174b9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\n# Make Instance\nlr = LogisticRegression()\n\n# Grid Search for find best parameter of the model\ngrid_values = {'C':[0.001,0.01,0.1,1,10,100,1000], 'max_iter':[500,1000,5000],\n               'random_state':[0,1,100], 'penalty':['l1','l2','elasticnet'], 'solver':['liblinear','saga','lbfgs']}\ngscv = GridSearchCV(lr, param_grid = grid_values, return_train_score=True)\ngscv.fit(x_train, y_train)","4b67f664":"gscv.best_params_, gscv.best_index_, gscv.best_score_, gscv.best_estimator_","bf422b5e":"lr_real = LogisticRegression(C=0.1, max_iter=500, penalty='l1',random_state=0, solver='liblinear')\nlr_real.fit(x_train, y_train)\n\npred_lr = lr_real.predict(x_test)\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, pred_lr))","8497c894":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, pred_lr))","9b64f12b":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import VotingClassifier\n\nclflog = LogisticRegression(random_state=1)\nclfdt = DecisionTreeClassifier(random_state=1)\nclfgn = GaussianNB()\neclf_h = VotingClassifier(estimators=[('lr',clflog),('dt',clfdt),('gnb',clfgn)], voting='hard')\neclf_s = VotingClassifier(estimators=[('lr',clflog),('dt',clfdt),('gnb',clfgn)], voting='soft')\n\nmodels = [clflog, clfdt, clfgn, eclf_h, eclf_s]","47a29696":"c_params = [0.1,5.0,7.0,10.0,15.0,20.0,100.0]\nparams = {\n    'lr__solver': ['liblinear'], 'lr__penalty':['l2'], 'lr__C':c_params,\n    'dt__criterion':['gini','entropy'],\n    'dt__max_depth':[10,8,7,6,5,4,3,2],\n    'dt__min_samples_leaf':[1,2,3,4,5,6,7,8,9]\n}","566c791c":"from sklearn.model_selection import GridSearchCV\ngrid = GridSearchCV(estimator = eclf_s, param_grid = params, cv=5)\ngrid = grid.fit(x_train,y_train)\ngrid.best_params_","0bc15dcd":"from sklearn.metrics import classification_report\neclf_s.fit(x_train, y_train)\npred_vt = eclf_s.predict(x_test)\nprint(classification_report(y_test, pred_vt))\n\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, pred_vt))","dbd6a0a9":"Y_dum = pd.get_dummies(Y)\n\ny_per_train_A, y_per_test = train_test_split(Y_dum, test_size = 0.2)\ny_per_train, y_per_val = train_test_split(y_per_train_A, test_size = 0.2)","5cc24489":"y_per_train","d578143e":"import tensorflow as tf\nfrom tensorflow.keras import layers\n\nmetrics_nm = ['accuracy','categorical_accuracy',]\n\nregular = 0.00001  # regularization amount\n\nmodel = tf.keras.Sequential()\n\nmodel.add(layers.Input(shape=x_train.shape[1]))\nmodel.add(layers.Dense(12, activation='relu',\n         kernel_regularizer = tf.keras.regularizers.l2(regular),  # Dense Regularization\n         activity_regularizer = tf.keras.regularizers.l2(regular)))  # Dense Regularization\nmodel.add(layers.Dense(8, activation='relu'))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(3, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy',optimizer='Adam', metrics=metrics_nm)\n\nmodel.fit(x_train, y_per_train, epochs=100, validation_data=(x_val,y_per_val), batch_size = 16)","453ebcfb":"hist = model.fit(x_train, y_per_train, epochs=100, validation_data=(x_val,y_per_val), batch_size=16)\n\nhist.history.keys()","4b30bfc6":"import matplotlib.pyplot as plt\n\nweights, biases = model.layers[1].get_weights()\nprint(weights.shape, biases.shape)\n\nplt.subplot(212)\nplt.plot(weights,'x')\nplt.plot(biases, 'o')\nplt.title('L2 - 0.1')\n\nplt.subplot(221)\nplt.plot(hist.history['accuracy'],'^--',label='accuracy')\nplt.plot(hist.history['val_accuracy'],'^--', label='v_accuracy')\nplt.legend()\nplt.title('L2 - 0.1')\n\nplt.subplot(222)\nplt.plot(hist.history['loss'],'x--',label='loss')\nplt.plot(hist.history['val_loss'],'x--', label='val_loss')\nplt.legend()\nplt.title('L2 - 0.1')\n\nplt.show()","15b0dc0c":"# x_test = standardScaler.transform(x_test)","35a9438a":"model.predict(x_test)","d6344211":"pred_pc = model.predict(x_test)\nnp.argmax(pred_pc,axis=1)","e69f4cb9":"pred_pc = model.predict(x_test)\n\ntest_class = np.argmax(y_per_test.values, axis=1)\npred_class = np.argmax(pred_pc, axis=1)\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(test_class, pred_class))","b40b6445":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(test_class, pred_class)","a11804f0":"# Traditional ML Model","6627a3f8":"# Perceptron","793fd30a":"## Logistic Regression","42fea664":"Very high score!","01d8f9b1":"### split train & test","29ca1fd3":"**Scale test data with given standard above**\n\n- Doesn't work well ","a044dedf":"**Predict Values look like 3 columns data**","efd19566":"There is no null data! Great!","a1a5da62":"**\u2b07\u2b07Let's see how the values are located\u2b07\u2b07**","085e2f2b":"### Scaling\n\nIf the range of values is too big, make the range small for better prediction","ad9048ae":"**Check out the changes of the losses(metrics)**","2784e2a3":"# \ubd84\uc11d\uc6a9 \ub370\uc774\ud130 \uad6c\ucd95_\uc724\ud61c\uc778","e7cc370f":"# Data Configuration","2663c00f":"### As the Dependent variables are seperated by 3 groups, need to get dummies for Perceptron","ec9586f6":"**Veryfying by graph with weights & bias**","0a92d594":"## Tensorflow\n\n- input shape is decided by the columns of independent variables\n- output shape is rely on dependent shape\n- in this analysis, we have 3 groups of dependent variables! so put 3 nods for last Dense\n\n- more than 2 groups of dependent variables > loss : categorical crossentropy","ae084d82":"**Make the prediction look like dependent variables using argmax**\n\n**It's like masks or threshold in python**","ee3548fb":"**Compare Prediction & Test results**","14732a71":"## Voting Classifier","04c0be2e":"Again, Very high score"}}