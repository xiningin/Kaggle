{"cell_type":{"19198e94":"code","d28b5c7a":"code","211826d8":"code","be317bc0":"code","2e551d33":"code","36f332da":"code","de8ce425":"code","b6ae7f71":"code","ee9e4eb3":"code","221d8dff":"markdown","f47834b3":"markdown","41f350df":"markdown","af36f250":"markdown","bf4b5709":"markdown","f574fba3":"markdown","b6a4886f":"markdown"},"source":{"19198e94":"from tensorflow import keras\n\nbase_model = keras.applications.VGG16(\n    weights='imagenet',\n    input_shape=(224, 224, 3),\n    include_top=False)","d28b5c7a":"base_model.trainable = False","211826d8":"inputs = keras.Input(shape=(224, 224, 3))\n\nx = base_model(inputs, training=False)\n\n#pooling layer \nx = keras.layers.GlobalAveragePooling2D()(x)\n\n#final dense layer\noutputs = keras.layers.Dense(6, activation = 'softmax')(x)\n\nmodel = keras.Model(inputs,outputs)","be317bc0":"model.summary()","2e551d33":"model.compile(loss = \"categorical_crossentropy\" , metrics = [\"accuracy\"])","36f332da":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    rotation_range=10,  # randomly rotate images \n    zoom_range=0.1,  # Randomly zoom image\n    width_shift_range=0.1,  # randomly shift images horizontally \n    height_shift_range=0.1,  # randomly shift images vertically \n    horizontal_flip=True,  # randomly flip images horizontally\n    vertical_flip=False) ","de8ce425":"train_it = datagen.flow_from_directory('..\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train', \n                                       target_size=(224, 224), \n                                       color_mode='rgb', \n                                       class_mode=\"categorical\")\nvalid_it = datagen.flow_from_directory('..\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test', \n                                      target_size=(224, 224), \n                                      color_mode='rgb', \n                                      class_mode=\"categorical\")","b6ae7f71":"model.fit(train_it,\n          validation_data=valid_it,\n          steps_per_epoch=train_it.samples\/train_it.batch_size,\n          validation_steps=valid_it.samples\/valid_it.batch_size,\n          epochs=20)","ee9e4eb3":"model.evaluate(valid_it, steps=valid_it.samples\/valid_it.batch_size)","221d8dff":"Add New Layers\n","f47834b3":"Compile the model","41f350df":"Train the Model","af36f250":"Data Augmentation","bf4b5709":"Evaluate","f574fba3":"Freeze Base Model\n","b6a4886f":"Load Dataset"}}