{"cell_type":{"979319af":"code","0fc38fae":"code","130e73a2":"code","0d18d50a":"code","acef81f6":"code","0df6521b":"code","b5ac9c3c":"code","b4bd72d1":"code","efe42b24":"code","6a6076a1":"code","766d0eac":"code","5cb1fab3":"code","1051988c":"code","8307b44b":"code","02db14cb":"code","bafb08e4":"code","6a2b17e2":"code","f3b967cc":"code","5aaa4535":"code","560bf900":"code","d5cd0949":"code","ce00820c":"code","53faf81b":"code","8a26fdd0":"code","b4acfae2":"code","cc06aeb9":"code","ed91b944":"code","7100f8e6":"code","59d7abe0":"code","7b2e968f":"code","1b47edde":"code","6781b1c1":"code","446aa814":"code","822b0cae":"markdown","d873bbd7":"markdown","026a79ed":"markdown","2fa94792":"markdown","13706c4d":"markdown","4dc98f3e":"markdown","a3baef0b":"markdown","a2874af2":"markdown","532a1780":"markdown","6679854c":"markdown","e6b8f7f5":"markdown","aad79ccd":"markdown","cc35f302":"markdown"},"source":{"979319af":"import pandas as pd\nimport numpy as np \nimport matplotlib .pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn .preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.feature_selection import SelectFromModel\nimport seaborn as sns\n","0fc38fae":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","130e73a2":"print(train_data.shape)\nprint(test_data.shape)\nprint(submission.shape)","0d18d50a":"train_data.head()","acef81f6":"describe_data = train_data.describe()\ndescribe_data","0df6521b":"y = train_data['Survived']\nprint(y)\nprint(y.shape)","b5ac9c3c":"##histogram\n##draw the oytput \"y\" \n\nsns.distplot(y);","b4bd72d1":"##Draw the relationship between input \"PassengerId\" and the output \"Survived\"\nz = train_data['PassengerId']\nprint(z.shape)\nfig, ax = plt.subplots(1,2)\nax[0].bar(z,y)\nax[1].hist2d(z, y,cmap='Reds')\n","efe42b24":"##Draw the relationship between input \"Pclass\" and the output \"Survived\"\na = train_data['Pclass']\nprint(z.shape)\nfig, ax = plt.subplots(1,2)\nax[0].bar(a,y)\nax[1].hist2d(a, y,cmap='Reds')","6a6076a1":"##Draw the relationship between input \"Age\" and the output \"Survived\"\nd = train_data['SibSp']\nprint(d.shape)\nfig, ax = plt.subplots(1,2)\nax[0].bar(d,y)\nax[1].hist2d(d, y,cmap='Reds')\n\n","766d0eac":"##Draw the relationship between input \"Fare\" and the output \"Survived\"\na = train_data['Fare']\nprint(z.shape)\nfig, ax = plt.subplots(1,2)\nax[0].bar(a,y)\nax[1].hist2d(a, y,cmap='Reds')","5cb1fab3":"oe=OrdinalEncoder()\n##convert train_data\nfor col in train_data:\n    train_data[col]=oe.fit_transform(np.asarray(train_data[col].astype('str')).reshape(-1,1))\n##.........................................................................\n##convert test_data\nfor col in test_data:\n    test_data[col]=oe.fit_transform(np.asarray(test_data[col].astype('str')).reshape(-1,1))","1051988c":"print(train_data.shape)\ntrain_data.head()\n","8307b44b":"print(test_data.shape)\ntest_data.head()","02db14cb":"y = train_data['Survived']\nX = train_data.drop(columns = 'Survived')\nprint(X.shape)\nprint(y.shape)\n","bafb08e4":"## Scaling Model \n## scale to train_data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nprint(X.shape)","6a2b17e2":"## spliting data into X_train , y_train,X_test,y_test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=44, shuffle =True)","f3b967cc":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","5aaa4535":"RandomForestClassifierModel = RandomForestClassifier(n_estimators=100,max_depth=9, random_state=44,min_samples_split=10,min_samples_leaf=5\n                                                    ,n_jobs = -1) \nRandomForestClassifierModel.fit(X_train,y_train)\n\n","560bf900":"#Calculating Details\nprint('Random Forest Classifier Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))\nprint('Random Forest Classifier Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))","d5cd0949":"#Calculating Prediction\ny_pred =  RandomForestClassifierModel.predict(X_test)\n\nprint('Predicted Value for RandomForestClassifierModelis : ' , y_pred)\n\nprint(y_pred.shape)","ce00820c":"MAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average')\nprint(\"MAEValue is :\" ,MAEValue)","53faf81b":"MSEValue= mean_squared_error(y_test, y_pred, multioutput='raw_values')\nprint(\"MSEValue is : \" , MSEValue)","8a26fdd0":"confusionMatrix = confusion_matrix(y_test,y_pred)\nprint('confusionMatrix is : ',confusionMatrix)\n# drawing confusion matrix\nsns.heatmap(confusionMatrix, center = True)\nplt.show()","b4acfae2":"AccuracyScore = accuracy_score(y_test,y_pred)\nprint('AccuracyScore is : ',AccuracyScore)\n","cc06aeb9":"FScore = f1_score(y_test,y_pred)\nprint('FScore is ',FScore)","ed91b944":"## Knowing the best features \nsel = SelectFromModel(RandomForestClassifier( )) \nsel.fit(X,y)\nselected_features = sel.transform(X)\nsel.get_support()","7100f8e6":"feature_importance = RandomForestClassifierModel.feature_importances_\nfeature_importance","59d7abe0":"test_preds = RandomForestClassifierModel.predict(test_data)","7b2e968f":"test_preds","1b47edde":"submission['Survived'] = test_preds","6781b1c1":"submission.head(10)","446aa814":"submission.to_csv('submission.csv', index=False)","822b0cae":"# **** Read Data ","d873bbd7":"# **** Import Library","026a79ed":"##delete empty rows from train_data\ntrain_data.dropna(subset = [\"Age\"], inplace=True)\nprint(train_data.shape)\n##...............................................\n##delete empty rows from test_data\ntest_data.dropna(subset = [\"Age\"], inplace=True)\nprint(test_data.shape)","2fa94792":"# ****Spliting data to \"X\" and \"y\"","13706c4d":"# ****Submission","4dc98f3e":"# ****Scaling Data","a3baef0b":"# ****Convert data from string to numbers","a2874af2":"# ****Apply the RandomForestClassfier Algorithm","532a1780":"# ****Delete empty rows","6679854c":"# ****Draw the Relationship between the numerical variable input and autput","e6b8f7f5":"# ****Make Predictions","aad79ccd":"# ****Spliting data to X_train, y_train,X_test and y_test","cc35f302":"# ****knowing the best features"}}