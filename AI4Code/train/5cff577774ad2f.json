{"cell_type":{"b835e39d":"code","d2efe936":"code","1d972a6d":"code","185c151d":"code","e6427441":"code","719014fb":"code","c8c9afd8":"code","113b8f9d":"code","df1d4fe6":"code","372c8b28":"code","20da3ae3":"code","d5b4da70":"code","744e19b3":"code","e2e45db8":"code","670f8e84":"code","8b0a71bb":"code","df134f1a":"markdown","ae229c7e":"markdown"},"source":{"b835e39d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","d2efe936":"df = pd.read_csv(\"..\/input\/mushrooms.csv\")","1d972a6d":"df.head()","185c151d":"abt = pd.get_dummies(df)","e6427441":"abt.head()","719014fb":"#Models\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\n#Building everything\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\n#Evaluation\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n#Saving the model\nimport pickle","c8c9afd8":"df[\"class\"].replace([\"e\", \"p\"], [1, 0], inplace= True)","113b8f9d":"# Create separate object for target variable\ny = df[\"class\"]\n# Create separate object for input features\nX = abt.drop([\"class_e\", \"class_p\"], axis= 1).astype(float)","df1d4fe6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state= 1234)","372c8b28":"print(len(X_train), len(X_test), len(y_train), len(y_test))","20da3ae3":"pipelines = {\n    \"rf\": make_pipeline(StandardScaler(), RandomForestClassifier(random_state=123)),\n    \"gb\": make_pipeline(StandardScaler(), GradientBoostingClassifier(random_state=123))\n}","d5b4da70":"rf_hyperparameters = {\n    \"randomforestclassifier__n_estimators\": [100, 200],\n    \"randomforestclassifier__max_features\": [\"auto\", \"sqrt\", 0.33]\n}\ngb_hyperparameters = {\n    \"gradientboostingclassifier__n_estimators\": [100, 200],\n    'gradientboostingclassifier__learning_rate': [0.05, 0.1, 0.2],\n    'gradientboostingclassifier__max_depth': [1, 3, 5]\n}\nhyperparameters = {\"rf\": rf_hyperparameters,\n                   \"gb\": gb_hyperparameters}","744e19b3":"# Create empty dictionary called fitted_models\nfitted_models = {}\n\n# Loop through model pipelines, tuning each one and saving it to fitted_models\nfor name, pipeline in pipelines.items():\n    # Create cross-validation object from pipeline and hyperparameters\n    model = GridSearchCV(pipeline, hyperparameters[name], cv= 10, n_jobs= -1)\n    \n    # Fit model on X_train, y_train\n    model.fit(X_train, y_train)\n    \n    # Store model in fitted_models[name] \n    fitted_models[name] = model\n    \n    # Print '{name} has been fitted'\n    print(name, 'has been fitted.')","e2e45db8":"for name, model in fitted_models.items():\n    print(name, model.best_score_)","670f8e84":"for name, model in fitted_models.items():\n    print(name)\n    print(\"-----------\")\n    pred = model.predict(X_test)\n    print('Acc:', accuracy_score(y_test, pred))\n    print(\"cm:\\n\", confusion_matrix(y_test, pred))","8b0a71bb":"with open('final_model.pkl', 'wb') as f:\n    pickle.dump(fitted_models['rf'].best_estimator_, f)","df134f1a":"### Finished!","ae229c7e":"#  Random Forests and Gradient Boosting on Mushroom Classification\n\nThis is my first kernel on kaggle. This kernel is designed to classify mushrooms as edible or non edible based on the various features given.\nI have used classification models:\n* Random Forest Classifier\n* Gradient Boosted Classifier\n\nThis dataset has only categorical features and as I don't have any domain knowledge about mushrooms, I've skipped feature engineering for now."}}