{"cell_type":{"6f66949f":"code","115a4ce6":"code","ce2773b8":"code","896de128":"code","a9da87ee":"code","14af3836":"code","49155bc2":"code","5de22bd9":"code","5589f9d5":"code","4852a256":"code","9e7d7c04":"code","0b473ab5":"code","0cd1792f":"code","1ca46a82":"code","a34b300f":"code","ce40ae5f":"code","ad347564":"code","6d0b870c":"code","ce3353ab":"code","0dac3a7c":"code","c44777c7":"code","b8b171cf":"code","17ee4c0a":"code","3e4e6c9d":"code","04a1a4b3":"code","dbdb97c1":"code","40347c1d":"code","1fe0a678":"code","ca6ba3ba":"code","eddfa0c6":"code","33044ce0":"code","4360b95c":"code","b91ea677":"code","4c0761e3":"code","004ba116":"code","d5137d69":"code","49ed1300":"code","defa4802":"code","e5bc0fd2":"code","1ec209f1":"code","b3117a40":"code","28b0624c":"code","2e2368f3":"code","7726bbe0":"code","aadaf558":"code","0751f33b":"code","50f73324":"code","759f6c59":"code","f5e95071":"markdown","4f307ac9":"markdown","c7508c15":"markdown","b0c4931d":"markdown","8bc137b9":"markdown","8faef753":"markdown","630fc162":"markdown","c5018aeb":"markdown","3bfe770a":"markdown","3a164db2":"markdown","836791a1":"markdown","e9d54b99":"markdown","6b1583be":"markdown","6327a1c9":"markdown","56c31e93":"markdown","74d96f78":"markdown","9d03e132":"markdown","6dc877e1":"markdown","8f05ab06":"markdown","0b909c94":"markdown","ed9bd257":"markdown","c9f18cb8":"markdown","dfaf6f8b":"markdown","0a282b5c":"markdown","45d574d3":"markdown","f080ab13":"markdown","beafd7d4":"markdown","5b39b098":"markdown","9cdd2b0c":"markdown","f58d9b4d":"markdown"},"source":{"6f66949f":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","115a4ce6":"dataStore = pd.read_csv('..\/input\/googleplaystore.csv') \ndataStore = dataStore.dropna(axis=0,how='any')\ndataUserReview = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')","ce2773b8":"dataStore.info()","896de128":"dataStore.count()","a9da87ee":"dataStore.describe()","14af3836":"dataUserReview.info()","49155bc2":"dataStore.groupby('Category').size()","5de22bd9":"dataStore.corr()","5589f9d5":"dataUserReview.corr()","4852a256":"f,ax = plt.subplots(figsize=(3,3))\nsns.heatmap(dataStore.corr(), annot=True, linewidths=.5,fmt = '.2f', ax=ax)\nplt.show()","9e7d7c04":"f ,ax = plt.subplots(figsize=(2,2))\nsns.heatmap(dataUserReview.corr(),annot=True,linewidths=1.0,fmt='.1f',ax=ax)\nplt.show()","0b473ab5":"dataStore.head(3)","0cd1792f":"dataUserReview.head(12)","1ca46a82":"dataStore.columns","a34b300f":"dataUserReview.columns","ce40ae5f":"dataStore.tail()","ad347564":"dataStore.shape","6d0b870c":"dataUserReview.shape","ce3353ab":"dataStore.Rating.plot(kind='line',color='brown', label='Rating',linewidth=0.5)\nplt.legend(loc='lower left') \nplt.title('Rating')\nplt.show()","0dac3a7c":"# Rating\ndataStore.plot(kind='scatter' , x='Rating', y='Rating' , color = 'red')\nplt.xlabel('Rating')\nplt.ylabel('Rating')\nplt.title('Info')\nplt.show()","c44777c7":"dataStore.Rating.plot(kind='hist',bins = 50,figsize=(5,5))\nplt.show()","b8b171cf":"ratingSeries = dataStore['Rating']\nratingDataFrame = dataStore[['Rating']]\n\nfor index,value in dataStore[['Rating']][0:5].iterrows():\n    print(index,\" : \",value)","17ee4c0a":"filtre = dataStore['Rating'] > 4.5\ndataStore[filtre]","3e4e6c9d":"dataStore[np.logical_and(dataStore['Rating'] > 4.7, dataStore['Category'] == 'ART_AND_DESIGN')]","04a1a4b3":"category = iter(dataStore['Category'])\nprint(next(category))\nprint(*category)","dbdb97c1":"dataStore[\"Degree\"] = [\"Very Good\" if i > 4.5 else \"Good\" if i > 4.0 else \"So-So\"  for i in dataStore.Rating]\ndataStore.loc[:100,[\"Degree\",\"Rating\"]]","40347c1d":"print(dataStore['Category'].value_counts(dropna = False))","1fe0a678":"dataStore.boxplot(column='Rating', by='Price')\nplt.show()","ca6ba3ba":"newDataStore = dataStore.head()\nmelted = pd.melt(frame=newDataStore, id_vars='App', value_vars=['Reviews','Rating'])\nmelted","eddfa0c6":"melted.pivot(index='App', columns='variable', values='value')","33044ce0":"data1 = dataStore.head()\ndata2 = dataStore.tail()\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data_row","4360b95c":"data1 = dataStore['Rating'].head()\ndata2 = dataStore['Reviews'].head()\nconc_data_col = pd.concat([data1,data2],axis=1)\nconc_data_col","b91ea677":"dataStore['Reviews'] = dataStore['Reviews'].astype(\"float\")","4c0761e3":"dataStore.info()","004ba116":"dataStore['Reviews'].value_counts(dropna=False)","d5137d69":"assert dataStore['Reviews'].notnull().all() # true","49ed1300":"assert dataStore.columns[3] == 'Reviews' # true","defa4802":"assert dataStore.columns[3] == 'Rating' # error","e5bc0fd2":"assert dataStore.Rating.dtypes == np.float # true","1ec209f1":"assert dataStore.Rating.dtypes == np.int # error","b3117a40":"dataStore.plot(kind='hist',x='Reviews',y='Rating')\nplt.show()","28b0624c":"#close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ndata3 = dataStore.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata3['_____date_____'] = datetime_object # _____date_____ fixed column for date\ndata3 = data3.set_index('_____date_____') \ndata3","2e2368f3":"print(data3.loc[\"1992-03-10\":\"1993-03-16\"])","7726bbe0":"data3.resample(\"A\").mean() # A -> year","aadaf558":"data3.resample(\"M\").mean() # M -> Month","0751f33b":"data3.resample(\"M\").first().interpolate(\"linear\") # fill","50f73324":"data3.resample(\"M\").mean().interpolate(\"linear\") # fill with mean","759f6c59":"dataReview = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')\n# dataReview = dataReview.set_index(\"App\")\ndataReview.index.name = \"index\"\ndataReview.head()","f5e95071":"**Manipulating Data Frames with Pandas**","4f307ac9":"**Tidy Data - melt() and pivot()**","c7508c15":"**PANDAS**","b0c4931d":"**Value Counts**","8bc137b9":"**Shape**","8faef753":"**ITERATION**","630fc162":"**Correlation Map**","c5018aeb":"**LIST COMPREHENSION**","3bfe770a":"**Read Data Folders**","3a164db2":"*horizontal*","836791a1":"**Line Plot**","e9d54b99":"**Indexing and Resampling Pandas Time Series******","6b1583be":"**Count**","6327a1c9":"**Describe**","56c31e93":"**FILTRE**","74d96f78":"*vertical*","9d03e132":"**concat() - vertical and horizontal**","6dc877e1":"**Google Play Store data info**","8f05ab06":"***MATPLOTLIB***","0b909c94":"**Assert Test**","ed9bd257":"**Head, Tail and Columns**","c9f18cb8":"**MISSING DATA**","dfaf6f8b":"**Data Type Convert**","0a282b5c":"**Box Plots**","45d574d3":"**Group By Size**","f080ab13":"**Google Play Store User Reviews data info**","beafd7d4":"**Histogram**","5b39b098":"**Correlation For All**","9cdd2b0c":"**Scatter Plot**","f58d9b4d":"**Resample**"}}