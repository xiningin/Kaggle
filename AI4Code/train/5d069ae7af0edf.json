{"cell_type":{"176cdf8f":"code","a5d93bba":"code","9f6977fd":"code","7efbbc18":"code","88414af9":"code","9c653473":"code","7e0378e5":"code","56299726":"code","824b5716":"code","b136f381":"code","d8aa9c18":"code","f63c52fa":"code","93a432ae":"code","6acea51a":"code","da3669ce":"markdown","25d178c2":"markdown","0d47e0f7":"markdown","53aaa977":"markdown","1be90a2b":"markdown","1d948ff9":"markdown"},"source":{"176cdf8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a5d93bba":"df = pd.read_csv(\"..\/input\/tmdb_5000_credits.csv\")\ndf.sample()","9f6977fd":"df1 = pd.read_csv(\"..\/input\/tmdb_5000_movies.csv\")\ndf1.sample()","7efbbc18":"df1 = df1.rename(columns={'id': 'movie_id'})\ndf_initial = pd.merge(df, df1, on=['movie_id','title'])\ndf_initial.sample()#.release_date.head().apply(lambda(x):x[:-2])","88414af9":"#Columns that contain `null` values\nfor i in list(df_initial.columns):\n    if df_initial[i].isnull().values.any():\n        print(i, end=\",\")","9c653473":"# replacing NaN values with unkowns and defaults\ndf_initial[\"homepage\"].fillna(\"Unknown\", inplace=True)\ndf_initial[\"overview\"].fillna(\"Unknown\", inplace=True)\ndf_initial[\"release_date\"].fillna(\"2000-01-01\", inplace=True)\ndf_initial[\"runtime\"].fillna(\"0\", inplace=True)\ndf_initial[\"tagline\"].fillna(\"0\", inplace=True)\ndf_initial.isnull().values.any()","7e0378e5":"df_Genre = pd.DataFrame(columns = ['movie_id','genre','revenue','title','vote_average'])\ndef pop_name(record):\n    global df_Genre\n    d = {}\n    d['movie_id']=record['movie_id']\n    genre_names = np.array([g['name'] for g in eval(record['genres'])])\n    d['genre'] = []\n    d['genre'].extend(genre_names)\n    d['revenue']=record['revenue']\n    d['title']=record['title']\n    d['vote_average']=record['vote_average']\n    df_Genre = df_Genre.append(pd.DataFrame(d), ignore_index=True, sort=True)\n    \n    \ndf_initial.apply(pop_name, axis=1)\ndf_Genre = df_Genre[['movie_id','genre','revenue','title','vote_average']]\ndf_Genre = df_Genre.infer_objects()\ndf_Genre.sample()","56299726":"df_counts = pd.DataFrame(df_Genre['genre'].value_counts().reset_index())\ndf_counts.columns = ['Genre', 'Count']\n\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x=\"Count\", y=\"Genre\", data=df_counts)\n\n# f, ax = plt.subplots(figsize=(23, 9))\n# sns.barplot(x = 'Count', y = 'Genre', data=df_counts.sort_values(by=['Genre', 'Count']))\n# ax.set_title('.: occurences per genre :.')\n# ax.set_xlabel('occurrences')\n# ax.set_ylabel('genres')\n# plt.show()","824b5716":"genre_frequency = df_counts.values.tolist()\ngenre_frequency[0:5]","b136f381":"from wordcloud import WordCloud, STOPWORDS\n%matplotlib inline\nwords = dict()\ntoken_frequency = genre_frequency\nfor s in token_frequency:\n    words[s[0]] = s[1]\ntone = 100 # define the color of the words\nf, ax = plt.subplots(figsize=(14, 6))\nwordcloud = WordCloud(width=550,height=300, background_color='black', \n                      max_words=1628,relative_scaling=0.6,\n                      color_func=lambda *args, **kwargs: \"cyan\",\n                      normalize_plurals=False)\nwordcloud.generate_from_frequencies(words)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","d8aa9c18":"df_revenue = df_Genre.groupby('genre').agg('sum').reset_index()\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x=\"revenue\", y=\"genre\", data=df_revenue)","f63c52fa":"import datetime\ndecade_diff = int(datetime.datetime.now().strftime('%Y'))-10\ndf_initial['release_date'] = pd.to_datetime(df_initial['release_date'], \n                                            errors='coerce', format='%Y-%m-%d')\n\ndf_last_decade = df_initial.loc[df_initial['release_date'].dt.year > decade_diff]\ndf_last_decade.shape","93a432ae":"df_Actor = pd.DataFrame(columns = ['actor','movie','release_year','vote_average'])\ndef pop_actor(record):\n    global df_Actor\n    d = {}\n    actors = np.array([g['name'] for g in eval(record['cast'])])\n    d['actor'] = []     \n    d['actor'].extend(actors)\n    d['movie'] = record['title']\n    d['vote_average'] = record['vote_average']\n    d['release_year'] = record['release_date'].year\n    \n    df_Actor = df_Actor.append(pd.DataFrame(d), ignore_index=True, sort=True)\n    \ndf_last_decade[df_last_decade['vote_average']>5].apply(pop_actor, axis=1)\ndf_Actor = df_Actor[['actor','movie','release_year','vote_average']]\ndf_Actor = df_Actor.infer_objects()\ndf_Actor[df_Actor.vote_average>5].groupby('release_year')['actor'].value_counts().loc[lambda x:x>2]\n#df_Actor.groupby([ 'release_year', 'actor']).size().unstack(fill_value=0).T","6acea51a":"def recommend_by_genre(df, genre):\n    list_genres = df['genre'].unique()\n    movies = []\n    #filter on movies that have votes higher than 5\n    df_sample = df[(df['vote_average']>5) & (df['genre']==genre)]\n    df_sample = df_sample.sort_values(by=['vote_average','revenue'], ascending=False).head()\n    movies.extend(df_sample['title'])\n    return movies\n\nmovies_by_genre = {}\nfor genre in df_Genre['genre'].unique():\n    movies_by_genre[genre] = recommend_by_genre(df_Genre, genre)\n    if movies_by_genre[genre] :\n        print(\"Genre : \" + genre )    \n        print(\"Movies : \" + '\\n\\t '.join(movies_by_genre[genre]))    ","da3669ce":"Let us restrict our search on the last 10 years","25d178c2":"Lets find out the genre in which maximum number of movies were made.","0d47e0f7":"Let us try to recommend top 5 movies based on each genre. \n\nWe will consider movies with voting averge>5 and those which have generated great revenue","53aaa977":"Let us check out the actors with more than 2 movies and an average vote > 5 for the last decade","1be90a2b":"Now, lets check out the genre that generated maximum revenue ","1d948ff9":"The distribution is pretty clear, but lets try to create a wordcloud for the same"}}