{"cell_type":{"dd3aaf40":"code","a321d749":"code","fe0316f9":"code","e8744807":"code","01b7ce3f":"code","a4446a24":"code","ae1178bf":"code","fccb444e":"code","f04972c1":"code","9d1893b5":"code","a0b84e94":"code","965fcf23":"code","35839c1d":"code","86178a8a":"code","e26423d0":"code","e49714e0":"code","c85968e7":"code","739585d5":"code","4a429046":"code","0f3faa1e":"code","26b0431d":"code","acc1f4b7":"code","76799e6a":"code","8c107162":"code","fa5dad7f":"markdown","a02c7803":"markdown","271c7a98":"markdown","377f8bf1":"markdown","9db091f5":"markdown"},"source":{"dd3aaf40":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.offline\nimport cufflinks as cf \ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\ncf.set_config_file(theme='white')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a321d749":"patient=pd.read_csv('\/kaggle\/input\/coronavirusdataset\/patient.csv')\ntime=pd.read_csv('\/kaggle\/input\/coronavirusdataset\/time.csv')\nroute=pd.read_csv('\/kaggle\/input\/coronavirusdataset\/route.csv')\ntrend=pd.read_csv('\/kaggle\/input\/coronavirusdataset\/trend.csv')","fe0316f9":"patient.head()","e8744807":"time.head()","01b7ce3f":"route.head()","a4446a24":"trend.head()","ae1178bf":"def date_time_col(df, col, form='%Y\/%m\/%d'):\n    df[col] = pd.to_datetime(df[col], format=form)\n    return df[col]\n\npatient['confirmed_date'] = date_time_col(patient,'confirmed_date')\npatient['released_date'] = date_time_col(patient,'released_date')\ntime['date'] = date_time_col(time,'date')","fccb444e":"patient['month_confirmed'] = patient['confirmed_date'].dt.month\npatient['dow_confirmed'] = patient['confirmed_date'].dt.day_name()\npatient['day_confirmed'] = patient['confirmed_date'].dt.day","f04972c1":"total = len(patient)\nplt.figure(figsize=(15,19))\n\nplt.subplot(311)\ng = sns.countplot(x=\"day_confirmed\", data=patient)\ng.set_title(\"Confirmed Patient by DAY OF MONTH\", fontsize=20)\ng.set_ylabel(\"Count\",fontsize= 17)\ng.set_xlabel(\"Day of Confirmations\", fontsize=17)\nsizes=[]\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\ng.set_ylim(0, max(sizes) * 1.15)\n\nplt.subplot(312)\ng2 = sns.countplot(x=\"dow_confirmed\", data=patient)\ng2.set_title(\"Confirmed Patient by DAY OF WEEK\", fontsize=20)\ng2.set_ylabel(\"Count\",fontsize= 17)\ng2.set_xlabel(\"Day of the Week of Confirmations\", fontsize=17)\nsizes=[]\nfor p in g2.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g2.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=14) \ng2.set_ylim(0, max(sizes) * 1.15)\n\nplt.subplot(313)\ng1 = sns.countplot(x=\"month_confirmed\", data=patient)\ng1.set_title(\"Confirmed Patient by MONTHS\", fontsize=20)\ng1.set_ylabel(\"Count\",fontsize= 17)\ng1.set_xlabel(\"\", fontsize=17)\nsizes=[]\nfor p in g1.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=14) \ng1.set_ylim(0, max(sizes) * 1.15)\n\nplt.subplots_adjust(hspace = 0.3)\n\nplt.show()","9d1893b5":"sex_series = patient['sex'].value_counts()\nsex_series.iplot(kind='bar', yTitle='Count', title='the sex of the patient')","a0b84e94":"country_series = patient['country'].value_counts()\ncountry_series.iplot(kind='bar', yTitle='Count', title='the country of the patient')","965fcf23":"region_series = patient['region'].value_counts()\nregion_series.iplot(kind='bar', yTitle='Count', title='the region of the patient')","35839c1d":"group_series = patient['group'].value_counts()\ngroup_series.iplot(kind='bar', yTitle='Count', title='the collective infection')","86178a8a":"infection_reason_series = patient['infection_reason'].value_counts()\ninfection_reason_series.iplot(kind='bar', yTitle='Count', title='the reason of infection')","e26423d0":"state_series = patient['state'].value_counts()\nstate_series.iplot(kind='bar', yTitle='Count', title='isolated \/ released \/ deceased')","e49714e0":"center = [37.541, 126.986] # seoul \nm = folium.Map(location=center, zoom_start=6.5)\n\ndf = route[['id', 'latitude', 'longitude']]\n\n\nfor i in df.index[:]:\n    folium.CircleMarker(location =df.loc[i, ['latitude', 'longitude']],\n                        tooltip = df.loc[i, 'id'], radius = 6,\n                        fill=True,\n                        fill_opacity=0.7\n                        ).add_to(m)\n\nm","c85968e7":"province_series = route['province'].value_counts()\nprovince_series.iplot(kind='bar', yTitle='Count', title='Special City \/ Metropolitan City \/ Province(-do)')","739585d5":"visit_series = route['visit'].value_counts()\nvisit_series.iplot(kind='bar', yTitle='Count', title='the type of place visited')","4a429046":"acc_df = time[['date','acc_test','acc_negative','acc_confirmed','acc_released','acc_deceased']].set_index(\"date\")","0f3faa1e":"py.iplot([{\n    'x': acc_df.index,\n    'y': acc_df[col],\n    'name': col\n}  for col in acc_df.columns], filename='cufflinks\/simple-line')","26b0431d":"new_df = time[['date','new_test', 'new_negative', 'new_confirmed', 'new_released', 'new_deceased']].set_index(\"date\")","acc1f4b7":"py.iplot([{\n    'x': new_df.index,\n    'y': new_df[col],\n    'name': col\n}  for col in new_df.columns], filename='cufflinks\/simple-line')","76799e6a":"trend_df = trend[['date','cold', 'flu', 'pneumonia', 'coronavirus']].set_index(\"date\")","8c107162":"py.iplot([{\n    'x': trend_df.index,\n    'y': trend_df[col],\n    'name': col\n}  for col in trend_df.columns], filename='cufflinks\/simple-line')","fa5dad7f":"# Visualization of data\n* Epidemiological data of COVID-19 patients in South Korea\n* Route data of COVID-19 patients in South Korea (where they had visited)\n* Time series data of COVID-19 status in South Korea\n* Trend data of the keywords searched in NAVER","a02c7803":"# Load the data\nLet's load the dataset file first","271c7a98":"# convert date to datetime\n\nfor extract month, day_name, day! ","377f8bf1":"# latitude & longitude\nLet's visualize the locations of the route","9db091f5":"# Load packages"}}