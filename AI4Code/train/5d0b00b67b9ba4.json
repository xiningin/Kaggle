{"cell_type":{"bf588aa3":"code","a201df79":"code","33076bb8":"code","cfac09d5":"code","ac492280":"code","4d3b03cc":"code","9882a6c8":"code","cb94767a":"code","b26693b3":"code","82818d4e":"code","a367c976":"code","2135ef23":"code","89c12487":"code","a62135ce":"code","8d2cc701":"code","c51d141d":"code","bded8bf8":"code","d459baf4":"code","48b33a16":"code","b814d9f3":"code","762ec4ea":"code","6ebae6e7":"code","bf9ccef9":"code","8237d525":"code","112b5a44":"markdown","f1e4fd9d":"markdown","8d855c73":"markdown","0438d073":"markdown","fd80a280":"markdown","009e2c51":"markdown","c616c85b":"markdown","526caf86":"markdown","b2d60bcb":"markdown","18c3cd32":"markdown","99d19402":"markdown","da899d20":"markdown"},"source":{"bf588aa3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output\ndata = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","a201df79":"data.head()","33076bb8":"#Total number of columns and rows\ndata.shape","cfac09d5":"name=[]\ncnt=[]\nfor column in data.columns:\n    name.append(column)\n    cnt.append(data[column].isna().sum())\ntmp=pd.DataFrame(cnt,name)\nprint('Count of Na values in dataset')\ntmp","ac492280":"#test\nname=[]\ncnt=[]\nfor column in test.columns:\n    name.append(column)\n    cnt.append(test[column].isna().sum())\ntmp=pd.DataFrame(cnt,name)\nprint('Count of Na values in dataset')\ntmp","4d3b03cc":"#from above we get to know that our dataset contain 3 columns with Na values so we ha ve to  handle this Na\ndata.Age=data.Age.fillna(data.Age.mean())\ndata.Embarked=data.Embarked.fillna(data.Embarked.mode()[0])\ntest.Age=test.Age.fillna(test.Age.mean())","9882a6c8":"(data.Cabin.isnull().sum()\/(data.shape[0]))*100","cb94767a":"data=data.drop(['Cabin'],1)\ndata.sample(3)","b26693b3":"# Now we will do analyasis \n# find all unique value from columns\nl=[]\nfor column in data.columns:\n    if len(data[column].unique())< 42:\n        l.append(column)\nfor column in l:\n    print(column,end='\\n')\n    for i in data[column].unique():\n        print('\\t',i)\n    print()","82818d4e":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(5,5))\nsns.countplot('Survived',data=data).set_title('Survival Count')\n","a367c976":"sns.countplot(data['Embarked'],hue=data['Survived'])\nplt.show()","2135ef23":"sns.countplot(data['Parch'],hue=data['Survived'])\nplt.show()","89c12487":"sns.countplot(data['SibSp'],hue=data['Survived'])\nplt.show()","a62135ce":"sns.countplot(data['Pclass'],hue=data['Survived'])\nplt.show()","8d2cc701":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=data);","c51d141d":"a1=data[(data.Age <= 10) & (data.Survived == 1)].count()[0]\na2=data[((data.Age>10)&(data.Age<=20))&(data.Survived==1)].count()[0]\na3=data[((data.Age>20)&(data.Age<=30))&(data.Survived==1)].count()[0]\na4=data[((data.Age>30)&(data.Age<=40))&(data.Survived==1)].count()[0]\na5=data[((data.Age>40)&(data.Age<=50))&(data.Survived==1)].count()[0]\na6=data[((data.Age>50)&(data.Age<=60))&(data.Survived==1)].count()[0]\na7=data[((data.Age>60)&(data.Age<=70))&(data.Survived==1)].count()[0]\na8=data[((data.Age>70)&(data.Age<=80))&(data.Survived==1)].count()[0]\na9=data[(data.Age>80)&(data.Survived==1)].count()[0]\nplt.figure(figsize=(8,6))\nplt.pie([a1,a2,a3,a4,a5,a6,a7,a8,a9],labels=['0-10 ','10-20','20-30','30-40','40-50','50-60','60-70','70-80','80 above'],autopct='%1.1f%%', shadow=True, startangle=140,radius=1.6)\nplt.show()\n         ","bded8bf8":"data=data.drop(['Name','Ticket','Fare','Parch'],1)\ntest=test.drop(['Name','Ticket','Fare','Parch','Cabin'],1)","d459baf4":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndata['Sex']= le.fit_transform(data['Sex'])\ndata['Embarked']= le.fit_transform(data['Embarked'])\ntest['Sex']= le.fit_transform(test['Sex'])\ntest['Embarked']= le.fit_transform(test['Embarked'])\n","48b33a16":"x=data.drop(['Survived'],1)\ny=data['Survived']","b814d9f3":"\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=1300, min_samples_leaf=16,bootstrap = True,\n                               max_features = 'sqrt')\n# Fit on training data\nmodel.fit(x,y)\n\nprediction=model.predict(test)","762ec4ea":"sub=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nYt=sub['Survived'].values","6ebae6e7":"from sklearn.metrics import precision_score,accuracy_score\n\nprint(\"Accuaracy:\",accuracy_score(Yt, prediction))\n\nprint(\"Precision:\", precision_score(Yt, prediction))\n","bf9ccef9":"testf=pd.read_csv('..\/input\/titanic\/test.csv')","8237d525":"submission = pd.DataFrame({'PassengerId':testf['PassengerId'],'Survived':prediction})\n\n#Visualize the first 5 rows\nsubmission.head()\nfilename = 'Titanic1.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","112b5a44":"- **Survived**: Outcome of survival (0 = No; 1 = Yes)\n- **Pclass**: Socio-economic class (1 = Upper class; 2 = Middle class; 3 = Lower class)\n- **Name**: Name of passenger\n- **Sex**: Sex of the passenger\n- **Age**: Age of the passenger (Some entries contain `NaN`)\n- **SibSp**: Number of siblings and spouses of the passenger aboard\n- **Parch**: Number of parents and children of the passenger aboard\n- **Ticket**: Ticket number of the passenger\n- **Fare**: Fare paid by the passenger\n- **Cabin** Cabin number of the passenger (Some entries contain `NaN`)\n- **Embarked**: Port of embarkation of the passenger (C = Cherbourg; Q = Queenstown; S = Southampton)","f1e4fd9d":"> *From above analysis we can conclude that passenger who were female ,also they port from Southampton , and were a 1st and 2nd class passenger also had 1 or more parent or chidren and also had one sibling and were between age group had survived most*","8d855c73":"from above passenger from 1st and 2nd class survived most","0438d073":"Found that around 77% of data is missing so we cant't replace it so we need to drop cabin columns","fd80a280":"so we got around 81% percision for our model","009e2c51":"*Also other features like Name,PassengerId,Fare,Ticket,Parch had less importance for building the model so we can drop it*","c616c85b":"**from above ,passenger with age group between 1 to 40 survived most**","526caf86":"**From above we can say that around 500-550 passenger were not survivde**","b2d60bcb":"from above graph we got know that passenger who had one sibiling have survived the most","18c3cd32":"* from  above we can say that passenger who had 1 or 2 parent or children have Survived the most ","99d19402":"from above we can say that most of the passenger from Southampton surived","da899d20":"from above we got to know that passenger who were female and also they where 1st and 2nd class passenger had survived the most"}}