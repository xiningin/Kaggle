{"cell_type":{"d638eb40":"code","a73a5321":"code","22400044":"code","d3e1822a":"code","0464bdd4":"code","dbfe3171":"code","cee80ce0":"code","71ef2d36":"code","2c2193f3":"code","aa1a5ecf":"code","14a9d4c1":"code","604ba593":"code","886810c8":"code","48c554e6":"code","f1ea9459":"code","efd811d1":"code","040c14a5":"code","29bbe857":"code","d24aa6ac":"code","5a2b6478":"code","9c1e7a84":"code","c6db4ee6":"code","81a53ea9":"code","e6358801":"code","4d8874e5":"code","ce53fded":"code","aa95fd60":"code","838ba011":"code","19f73f4d":"code","a53ab0fd":"code","0af615fd":"code","2bc43d1f":"code","2899973c":"code","ff949bc8":"code","68718c60":"code","b9bba398":"code","7fd7d3c5":"code","5e82cbff":"code","943f77a0":"code","5dde2ff3":"markdown"},"source":{"d638eb40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a73a5321":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","22400044":"train.head(3)","d3e1822a":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head(3)","0464bdd4":"train.info()","dbfe3171":"test.info()","cee80ce0":"train.nunique()","71ef2d36":"test.nunique()","2c2193f3":"train.isnull().sum()","aa1a5ecf":"test.isnull().sum()","14a9d4c1":"train['Sex'] = train['Sex'].astype(str)\ntrain['Embarked'] = train['Embarked'].astype(str)\ntest['Sex'] = test['Sex'].astype(str)\ntest['Embarked'] = test['Embarked'].astype(str)\n\n","604ba593":"from sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder()\ntrain['Sex'] = lb.fit_transform(train['Sex'])\ntrain['Embarked'] = lb.fit_transform(train['Embarked'])\ntest['Sex'] = lb.fit_transform(test['Sex'])\ntest['Embarked'] = lb.fit_transform(test['Embarked'])\n","886810c8":"train.head(3)","48c554e6":"train.describe()","f1ea9459":"column_means_train = train.mean()\ncolumn_means_test = test.mean()\ntrain = train.fillna(column_means_train)\ntest = test.fillna(column_means_test)\n","efd811d1":"train[\"Survived\"].value_counts().plot(kind='bar')","040c14a5":"bins_age = [-1,10,20,30,40,50,60,70,80]\nlabels_age = [0,1,2,3,4,5,6,7]\ntrain['Age_bucket']=pd.cut(train[\"Age\"],bins = bins_age,labels=labels_age)\ntest['Age_bucket']=pd.cut(test[\"Age\"],bins = bins_age,labels=labels_age)\nsns.barplot(x='Age_bucket',y='Survived',data=train)","29bbe857":"sns.barplot(x=\"Sex\",y=\"Survived\",data=train)","d24aa6ac":"sns.barplot(x=\"Pclass\",y=\"Survived\",data=train)","5a2b6478":"sns.barplot(x=\"Parch\",y=\"Survived\",data=train)","9c1e7a84":"sns.scatterplot(x=\"Fare\",y=\"Survived\",data=train)","c6db4ee6":"sns.barplot(x=\"Embarked\",y=\"Survived\",data=train)","81a53ea9":"sns.barplot(x=\"SibSp\",y=\"Survived\",data=train)","e6358801":"train.head(3)","4d8874e5":"passenger_test = test[\"PassengerId\"]","ce53fded":"train.drop(['Name','PassengerId','Age','Ticket','Cabin'],axis=1,inplace=True)\ntest.drop(['Name','PassengerId','Age','Ticket','Cabin'],axis=1,inplace=True)","aa95fd60":"X=train.drop([\"Survived\"],axis=1)\ny=train[\"Survived\"]","838ba011":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","19f73f4d":"X.shape","a53ab0fd":"y.shape","0af615fd":"X.isnull().sum()","2bc43d1f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\nprediction = lr.predict(X_test)\nprint(accuracy_score(y_test,prediction)*100)\n","2899973c":"from sklearn.neighbors import KNeighborsClassifier\nknn= KNeighborsClassifier()\nknn.fit(X_train,y_train)\nprediction =knn.predict(X_test)\nprint(accuracy_score(y_test,prediction)*100)\n\n","ff949bc8":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nrf = RandomForestClassifier()\nrf.fit(X_train,y_train)\nprediction = rf.predict(X_test)\nprint(accuracy_score(y_test,prediction)*100)\n","68718c60":"from sklearn.naive_bayes import GaussianNB\ngb = GaussianNB()\ngb.fit(X_train,y_train)\nprediction = gb.predict(X_test)\nprint(accuracy_score(y_test,prediction)*100)\n\n","b9bba398":"prediction_f = gb.predict(test)","7fd7d3c5":"result_df = pd.DataFrame({\"Survived\":prediction_f,\"PassengerId\":passenger_test})\nresult_df.set_index('PassengerId')","5e82cbff":"result_df[\"Survived\"].value_counts().plot(kind ='bar')","943f77a0":"result_df.to_csv(\"my_submissions\",index=False)\nprint(\"Submission Successful!\")","5dde2ff3":"RandomForest Gives best result"}}