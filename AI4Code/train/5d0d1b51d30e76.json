{"cell_type":{"4c13d5c5":"code","35c24066":"code","6f1c7df4":"code","279beb1b":"code","312f2a9c":"code","b43e58d9":"code","d745eee5":"code","abae1b90":"code","f79f56fe":"code","e93c3307":"code","ae68d19c":"code","c90055ca":"code","8aeddc11":"code","97853e05":"code","96e2fcb9":"code","b403a554":"code","4d6a2f71":"code","40decbe4":"code","5ac3e3b5":"code","604fd7b7":"code","9aed93e6":"code","41e9b73c":"code","0b93bf80":"code","25f92349":"markdown","a88c5b0a":"markdown","dda8ffa2":"markdown"},"source":{"4c13d5c5":"!pip install \/kaggle\/input\/iterative-stratification\/iterative-stratification-master\/","35c24066":"import sys\npackage_path = '..\/input\/efficientnet-pytorch\/EfficientNet-PyTorch\/EfficientNet-PyTorch-master'\nsys.path.append(package_path)\n\n","6f1c7df4":"import pandas as pd\nimport numpy as np\nfrom fastai.vision.all import *\nimport pickle\nimport os","279beb1b":"path = Path('..\/input\/hpa-cell-tiles-sample-balanced-dataset')","312f2a9c":"df = pd.read_csv(path\/'cell_df.csv')","b43e58d9":"df.head()","d745eee5":"len(df)","abae1b90":"labels = [str(i) for i in range(19)]\nfor x in labels: df[x] = df['image_labels'].apply(lambda r: int(x in r.split('|')))","f79f56fe":"#dfs = df.sample(frac=0.1, random_state=42)\n\n#dfs = df.sample(frac=1, random_state=42)\n\n#let try less data for efficientnetb5\n\ndfs = df.sample(frac=1, random_state=42)\n\n\ndfs = dfs.reset_index(drop=True)\nlen(dfs)","e93c3307":"unique_counts = {}\nfor lbl in labels:\n    unique_counts[lbl] = len(dfs[dfs.image_labels == lbl])\n\nfull_counts = {}\nfor lbl in labels:\n    count = 0\n    for row_label in dfs['image_labels']:\n        if lbl in row_label.split('|'): count += 1\n    full_counts[lbl] = count\n    \ncounts = list(zip(full_counts.keys(), full_counts.values(), unique_counts.values()))\ncounts = np.array(sorted(counts, key=lambda x:-x[1]))\ncounts = pd.DataFrame(counts, columns=['label', 'full_count', 'unique_count'])\ncounts.set_index('label').T\n","ae68d19c":"len(dfs)","c90055ca":"nfold = 5\nseed = 42\n\ny = dfs[labels].values\nX = dfs[['image_id', 'cell_id']].values\n\ndfs['fold'] = np.nan\n\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\nmskf = MultilabelStratifiedKFold(n_splits=nfold, random_state=seed)\nfor i, (_, test_index) in enumerate(mskf.split(X, y)):\n    dfs.iloc[test_index, -1] = i\n    \ndfs['fold'] = dfs['fold'].astype('int')","8aeddc11":"dfs['is_valid'] = False\ndfs['is_valid'][dfs['fold'] == 0] = True","97853e05":"dfs.is_valid.value_counts()","96e2fcb9":"def get_x(r): return path\/'cells'\/(r['image_id']+'_'+str(r['cell_id'])+'.jpg')\nimg = get_x(dfs.loc[12])\nimg = PILImage.create(img)\nimg.show();","b403a554":"def get_y(r): return r['image_labels'].split('|')\nget_y(dfs.loc[12])","4d6a2f71":"sample_stats = ([0.07237246, 0.04476176, 0.07661699], [0.17179589, 0.10284516, 0.14199627])","40decbe4":"import albumentations","5ac3e3b5":"class AlbumentationsTransform(DisplayedTransform):\n    split_idx,order=0,2\n    def __init__(self, train_aug): store_attr()\n    \n    def encodes(self, img: PILImage):\n        aug_img = self.train_aug(image=np.array(img))['image']\n        return PILImage.create(aug_img)","604fd7b7":"def get_train_aug(): return albumentations.Compose([\n            #albumentations.HueSaturationValue(\n                #hue_shift_limit=0.2, \n                #sat_shift_limit=0.2, \n                #val_shift_limit=0.2, \n                #p=0.5\n            #),\n            albumentations.CoarseDropout(p=0.5),\n            albumentations.RandomContrast(p = 0.6)\n])","9aed93e6":"item_tfms = [RandomResizedCrop(224, min_scale=0.75, ratio=(1.,1.)),AlbumentationsTransform(get_train_aug()) ]\nbatch_tfms = [*aug_transforms(flip_vert=True, size=128, max_warp=0),  Normalize.from_stats(*sample_stats)]\nbs=256","41e9b73c":"dblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock(vocab=labels)),\n                splitter=ColSplitter(col='is_valid'),\n                get_x=get_x,\n                get_y=get_y,\n                item_tfms=item_tfms,\n                batch_tfms=batch_tfms\n                )\ndls = dblock.dataloaders(dfs, bs=bs)","0b93bf80":"dls.show_batch(nrows=3, ncols=3)","25f92349":"## Using multilabel stratification for the train-validation split.\n\nThere is some leakage in the code below (cells belonging to the same image should be in the same split). However, when I fixed that, I got a lower score... coincidence? ","a88c5b0a":"## Change below to `frac=1` to run on the whole training sample","dda8ffa2":"Using https:\/\/www.kaggle.com\/dragonzhang\/fastai-cell-tile-prototyping-training ! Thanks for the great kernel."}}