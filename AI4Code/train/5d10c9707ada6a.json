{"cell_type":{"e854ff8b":"code","cc16f212":"code","1e9c2ba8":"code","cfbeca95":"code","4b03cd64":"code","27b0aa43":"code","2ef11f8a":"code","aba0c9a2":"code","0d22fdcc":"code","3b57e657":"code","d5c2ee22":"code","93a5e966":"code","d6bd6f1d":"code","97329b7e":"code","c71b7a74":"code","68d39d34":"code","39b0d8ad":"code","4667e845":"code","69378bc2":"code","97f7a9c2":"code","7c12d2eb":"markdown","a93160a9":"markdown","412ce1be":"markdown","8b1e093c":"markdown","efb75f17":"markdown","f80735d6":"markdown","f48808ab":"markdown","0b4d8d5e":"markdown","75ccf5ed":"markdown","26e07178":"markdown","76ddd9e1":"markdown","59e4e0c0":"markdown","d2dbaaa6":"markdown","48104966":"markdown"},"source":{"e854ff8b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = pd.read_csv(\"..\/input\/CableTVSubscribersData.csv\")","cc16f212":"data.groupby('subscribe').size()","1e9c2ba8":"data.head()","cfbeca95":"data.shape","4b03cd64":"data.dtypes","27b0aa43":"data.describe()","2ef11f8a":"data[['gender','ownHome','subscribe','Segment']].describe()","aba0c9a2":"import missingno as msno","0d22fdcc":"msno.matrix(data)","3b57e657":"catdf = pd.get_dummies(data[['gender','ownHome','Segment']])\ndata = pd.concat([data, catdf],axis=1, sort=False)\ndata.head()","d5c2ee22":"data.drop(columns = ['gender', 'ownHome', 'Segment'], inplace = True)\ndata['subscribe'] = pd.Categorical(data['subscribe'])\ndata['subscribe'] = data['subscribe'].cat.codes","93a5e966":"data.columns","d6bd6f1d":"sns.countplot(data['subscribe'])\nplt.xticks([0,1], ['subNo', 'subYes'])\nplt.show()","97329b7e":"data.groupby(['subscribe']).size()","c71b7a74":"from sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.over_sampling import RandomOverSampler","68d39d34":"x_train, x_test, y_train, y_test = train_test_split(data, data['subscribe'])","39b0d8ad":"df_class_0 = x_train[x_train['subscribe'] == 0]\ndf_class_1 = x_train[x_train['subscribe'] == 1]","4667e845":"df_class_1_over = df_class_1.sample(len(df_class_0.index), replace=True)\ndf_test_over = pd.concat([df_class_0, df_class_1_over], axis=0)\n\ndf_test_over['subscribe'].value_counts()\nsns.countplot(df_test_over['subscribe'])\nplt.xticks([0,1], ['subNo', 'subYes'])\nplt.show()","69378bc2":"data_train = df_test_over","97f7a9c2":"plt.figure(figsize = (12,9))\nsns.heatmap(data_train.corr(), cmap='YlGnBu', annot=True)\nplt.show()","7c12d2eb":"We have a very imbalanced number of observation for our target classes. To deal with imbalance data for classification we may approach it in two ways: undersampling or oversampling. Since the minor class only have 40 observations, undersampling is not recommended, thus we go for oversampling. \n<hr>\nBut before that we will first split our test and training set before performing oversampling on the training dataset, accourding to [this page](https:\/\/beckernick.github.io\/oversampling-modeling\/) this is the proper way of oversampling","a93160a9":"# Cable TV Subscriber Classification","412ce1be":"## Dataset Exploration","8b1e093c":"----- To be continued ----","efb75f17":"Categorical columns","f80735d6":"### Missing values","f48808ab":"Looks like we don't have any null values, Nice","0b4d8d5e":"### Feature normalization","75ccf5ed":"We now have balance classes, for the next step let us find the most important predictors","26e07178":"We want our categorical values to be integers for better analysis.","76ddd9e1":"**Insights:**\n1. Segment_Suburb mix is correlated to our target variable (Negative correlation) as well as Segment_Moving up (Positive correlation).\n1. Income and age are highly correlated with each other, we may remove one of them later.\n1. Age is also highly correlated with Segment_Travelers, kids and Segment_Urban hip\n1. income is highly correlated with Segment_Urban hip\n1. Gender_Male and Gender Male is 100% correlated with each other, duhh. (same with ownHome_Yes and ownHome_No)\n\nNot much interesting inferences from the correlation map, let us proceed to feature importance using Random Forest\n<hr>","59e4e0c0":"For this kernel, we will try to classify wheter someone will subscribe to tv services","d2dbaaa6":"## Variable analysis","48104966":"Numerical columns"}}