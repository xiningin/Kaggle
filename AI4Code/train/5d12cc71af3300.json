{"cell_type":{"6745323d":"code","a921da71":"code","94222e71":"code","d6ecc336":"code","e43cf2dc":"code","d14feff8":"code","3a4b6300":"code","54f0fc8d":"code","9051c142":"code","1d8b2ed3":"code","a7e8916b":"code","1d6cea35":"code","be3546f5":"code","7dd7edaa":"code","494acf6a":"code","1d514c6e":"code","051b4d9e":"code","f4d6115b":"code","d10cf488":"code","03d75a51":"code","8dd38c40":"code","d6f2cb92":"code","36adb453":"code","21404948":"code","31348e42":"code","e21be0cf":"code","783f7fa0":"code","38ea0b32":"code","4a6092be":"code","2f5ce837":"code","77dc6182":"code","2c7c0f30":"code","9b56c66c":"code","54860566":"code","9ab14c12":"code","3b050488":"code","332e9e56":"code","da55f8bc":"code","99c5494b":"code","fceb6bf5":"code","56150ff3":"code","f5be69b4":"code","d4f546a3":"markdown","aeda2d89":"markdown","2246165d":"markdown","07d67219":"markdown","b20d29d4":"markdown","84e19dac":"markdown","8953287e":"markdown","a31a6b9d":"markdown","b12f5126":"markdown","08820a5d":"markdown","2f11e871":"markdown","5c7f2283":"markdown","8f8e9afb":"markdown"},"source":{"6745323d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a921da71":"data = pd.read_csv('\/kaggle\/input\/basketball-players-stats-per-season-49-leagues\/players_stats_by_season_full_details.csv')","94222e71":"data.head()","d6ecc336":"data.columns","e43cf2dc":"plt.figure(figsize=(20, 6))\nsns.countplot(data.League, order = data['League'].value_counts().index)\nl=plt.xticks(rotation=90)","d14feff8":"data.Season.unique()","3a4b6300":"nba = data[data.League == 'NBA']","54f0fc8d":"nba.groupby('nationality').count().reset_index().iloc[:,:2].sort_values('League', ascending=False).head(10)","9051c142":"# Not USA\nplt.figure(figsize=(15, 6))\nsns.countplot(nba[nba['nationality'] != 'United States'].nationality, order = nba[nba['nationality'] != 'United States']['nationality'].value_counts().iloc[:10].index)\nl=plt.xticks(rotation=90)","1d8b2ed3":"# Not USA\nplt.figure(figsize=(15, 6))\nsns.countplot(nba[(nba['nationality'] != 'United States') & (nba['Season'] == '2019 - 2020')].nationality, order = nba[(nba['nationality'] != 'United States') & (nba['Season'] == '2019 - 2020')]['nationality'].value_counts().iloc[:10].index)\nl=plt.xticks(rotation=90)","a7e8916b":"nba['Age'] = nba['Season'].str.split('-').str[1].astype(float) - nba['birth_year']","1d6cea35":"nba.groupby('Season')['Age'].mean()","be3546f5":"hw = nba[['Season', 'height_cm', 'weight_kg',]]","7dd7edaa":"hw = hw.groupby('Season').mean().reset_index()","494acf6a":"hw","1d514c6e":"plt.figure(figsize=(15, 6))\nax = sns.lineplot(x=\"Season\", y=\"height_cm\", data=hw)\nax2 = ax.twinx()\nax2 = sns.lineplot(x=\"Season\", y=\"weight_kg\", data=hw, c='red')","051b4d9e":"# Height decreases a very little but weight decreases a lot (-+3kg) in 10 years","f4d6115b":"scorers = nba[['Season', 'Stage', 'Player', 'Team', 'GP', 'PTS']]","d10cf488":"scorers['PTS\/G'] = round(scorers['PTS'] \/ scorers['GP'],2)\n\n# Regular season\nscorers = scorers[scorers['Stage'] == 'Regular_Season']","03d75a51":"idx = scorers.groupby('Season')['PTS\/G'].transform(max) == scorers['PTS\/G']\nbest_scorers = scorers[['Season', 'Player', 'Team', 'PTS\/G']][idx]\nbest_scorers","8dd38c40":"plt.figure(figsize=(18, 6))\nax = sns.lineplot(x=\"Season\", y=\"PTS\/G\", data=best_scorers)\nax.set(ylim=(27, 37))\nfor index, row in best_scorers.iterrows():\n    ax.annotate(row['Player'], (row['Season'], row['PTS\/G'] + 0.5),  xycoords='data', xytext=(-27, -10), textcoords='offset points', size=12)","d6f2cb92":"pas = nba[['Season', 'Stage', 'Player', 'Team', 'GP', 'AST']]","36adb453":"pas['AST\/G'] = round(pas['AST'] \/ pas['GP'],2)\n\n# Regular season\npas = pas[pas['Stage'] == 'Regular_Season']","21404948":"idx = pas.groupby('Season')['AST\/G'].transform(max) == pas['AST\/G']\nbest_pas = pas[['Season', 'Player', 'Team', 'AST\/G']][idx]\nbest_pas","31348e42":"plt.figure(figsize=(18, 6))\nax = sns.lineplot(x=\"Season\", y=\"AST\/G\", data=best_pas)\nax.set(ylim=(9.5, 12))\nfor index, row in best_pas.iterrows():\n    ax.annotate(row['Player'], (row['Season'], row['AST\/G']),  xycoords='data', xytext=(-27, -10), textcoords='offset points', size=12)","e21be0cf":"reb = nba[['Season', 'Stage', 'Player', 'Team', 'GP', 'REB']]","783f7fa0":"reb['REB\/G'] = round(reb['REB'] \/ reb['GP'],2)\n\n# Regular season\nreb = reb[reb['Stage'] == 'Regular_Season']","38ea0b32":"idx = reb.groupby('Season')['REB\/G'].transform(max) == reb['REB\/G']\nbest_reb = reb[['Season', 'Player', 'Team', 'REB\/G']][idx]\nbest_reb","4a6092be":"plt.figure(figsize=(18, 6))\nax = sns.lineplot(x=\"Season\", y=\"REB\/G\", data=best_reb)\nax.set(ylim=(12, 16.5))\nfor index, row in best_reb.iterrows():\n    ax.annotate(row['Player'], (row['Season'], row['REB\/G']),  xycoords='data', xytext=(-27, -10), textcoords='offset points', size=12)","2f5ce837":"stl = nba[['Season', 'Stage', 'Player', 'Team', 'GP', 'STL']]","77dc6182":"stl['STL\/G'] = round(stl['STL'] \/ stl['GP'],2)\n\n# Regular season\nstl = stl[stl['Stage'] == 'Regular_Season']","2c7c0f30":"idx = stl.groupby('Season')['STL\/G'].transform(max) == stl['STL\/G']\nbest_stl = stl[['Season', 'Player', 'Team', 'STL\/G']][idx]\nbest_stl","9b56c66c":"plt.figure(figsize=(18, 6))\nax = sns.lineplot(x=\"Season\", y=\"STL\/G\", data=best_stl)\nax.set(ylim=(2, 2.6))\nfor index, row in best_stl.iterrows():\n    ax.annotate(row['Player'], (row['Season'], row['STL\/G']),  xycoords='data', xytext=(-27, -10), textcoords='offset points', size=12)","54860566":"blk = nba[['Season', 'Stage', 'Player', 'Team', 'GP', 'BLK']]","9ab14c12":"blk['BLK\/G'] = round(blk['BLK'] \/ blk['GP'],2)\n\n# Regular season\nblk = blk[blk['Stage'] == 'Regular_Season']","3b050488":"idx = blk.groupby('Season')['BLK\/G'].transform(max) == blk['BLK\/G']\nbest_blk = blk[['Season', 'Player', 'Team', 'BLK\/G']][idx]\nbest_blk","332e9e56":"plt.figure(figsize=(18, 6))\nax = sns.lineplot(x=\"Season\", y=\"BLK\/G\", data=best_blk)\nax.set(ylim=(2.3, 3.8))\nfor index, row in best_blk.iterrows():\n    ax.annotate(row['Player'], (row['Season'], row['BLK\/G']),  xycoords='data', xytext=(-27, -10), textcoords='offset points', size=12)","da55f8bc":"pm3 = nba[['Season', 'Stage', 'Player', 'Team', '3PM', '3PA']]","99c5494b":"pm3['3P%'] = round(round(pm3['3PM'] \/ pm3['3PA'],3)*100,3)\n\n# Regular season\npm3 = pm3[pm3['Stage'] == 'Regular_Season']","fceb6bf5":"idx = pm3.groupby('Season')['3PM'].transform(max) == pm3['3PM']\nbest_pm3 = pm3[['Season', 'Player', 'Team', '3PM', '3P%']][idx]\nbest_pm3","56150ff3":"plt.figure(figsize=(18, 6))\nax = sns.lineplot(x=\"Season\", y=\"3PM\", data=best_pm3)\nax.set(ylim=(150, 420))\nfor index, row in best_pm3.iterrows():\n    ax.annotate(row['Player'] +' ' + str(row['3P%'])+'%', (row['Season'], row['3PM']+10),  xycoords='data', xytext=(-27, -10), textcoords='offset points', size=12)","f5be69b4":"plt.figure(figsize=(18, 6))\nax = sns.barplot(x=\"Season\", y=\"3PM\", data=best_pm3)\nax2 = ax.twinx()\nax2 = sns.lineplot(x=\"Season\", y=\"3P%\", data=best_pm3)\nfor index, row in best_pm3.iterrows():\n    ax2.annotate(row['Player'].split( )[1] +' ' + str(row['3P%'])+'%', (row['Season'], row['3P%']),  xycoords='data', xytext=(-27, -10), textcoords='offset points', size=12)","d4f546a3":"# Best passers per season","aeda2d89":"# Mean age per Season","2246165d":"# Leagues","07d67219":"# Best scorers per season","b20d29d4":"# Focus on NBA","84e19dac":"# Best Blocks per Season","8953287e":"# Height and weight","a31a6b9d":"# Seasons","b12f5126":"# Best steals per season","08820a5d":"# Most 3PM per Season","2f11e871":"# Nationalities","5c7f2283":"### In 2019-2020","8f8e9afb":"# Best rebonders per season"}}