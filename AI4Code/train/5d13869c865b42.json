{"cell_type":{"d301a27f":"code","bd021f94":"code","a8df442d":"code","b820725e":"code","54824c38":"code","43500863":"code","76402b6e":"code","2752f49d":"code","5f631812":"code","f82ce1dd":"code","81745b07":"code","5e5fe3be":"code","8c95375d":"code","3eadd4de":"code","fe009e00":"code","9acd0051":"code","29bc8bea":"code","c6270fd5":"code","e097e903":"code","4d973046":"code","31a0f688":"code","fda91ebc":"markdown","0ca161dc":"markdown","fff7d9f8":"markdown","242e532d":"markdown","9e7dfda6":"markdown"},"source":{"d301a27f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd021f94":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","a8df442d":"fake = pd.read_csv('..\/input\/fake-and-real-news-dataset\/Fake.csv', delimiter = ',')\ntrue = pd.read_csv('..\/input\/fake-and-real-news-dataset\/True.csv', delimiter = ',')","b820725e":"fake.head()","54824c38":"fake_text = fake['text'].tolist()\ntrue_text = true['text'].tolist()","43500863":"def combine_text(list_of_text):\n    '''Takes a list of text and combines them into one large chunk of text.'''\n    combined_text = ' '.join(list_of_text)\n    return combined_text","76402b6e":"fake_string = combine_text(fake_text)\ntrue_string = combine_text(true_text)","2752f49d":"# remove words inside brackets, punctuation and words that have number in them\nimport re\nimport string\n\ndef clean_text(text):\n    text = text.lower()\n    text = re.sub('\\(.*?\\)', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text","5f631812":"fake_cleaned_text = clean_text(fake_string)\ntrue_cleaned_text = clean_text(true_string)","f82ce1dd":"combined_clean_text_dict = {\"fake\":fake_cleaned_text, \"true\":true_cleaned_text}\ndata_df = pd.DataFrame.from_dict(combined_clean_text_dict, orient='index', columns=['text'])","81745b07":"data_df.head()","5e5fe3be":"from sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(stop_words='english')\ndata_cv = cv.fit_transform(data_df.text)\ndata_dtm = pd.DataFrame(data_cv.toarray(), columns=cv.get_feature_names())\ndata_dtm.index = data_df.index\ndata_dtm","8c95375d":"# Find the top 30 words used by fake news and true news\ndata_dtm = data_dtm.transpose()\ntop_dict = {}\nfor c in data_dtm.columns:\n    top = data_dtm[c].sort_values(ascending=False).head(30)\n    top_dict[c]= list(zip(top.index, top.values))\n\ntop_dict","3eadd4de":"# add the top 30 word from each label\nwords = []\nfor label in data_dtm.columns:\n    top = [word for (word, count) in top_dict[label]]\n    for t in top:\n        words.append(t)\nwords","fe009e00":"from collections import Counter\n\nCounter(words).most_common()","9acd0051":"from sklearn.feature_extraction import text\n\n# add the common words to stop word list\nnew_stop_words = [word for word, count in Counter(words).most_common() if count >=2]\nstop_words = text.ENGLISH_STOP_WORDS.union(new_stop_words)\n\n# repeat the process using counterVectorizer\ncv = CountVectorizer(stop_words = stop_words)\ndata_cv = cv.fit_transform(data_df.text)\ndata_dtm = pd.DataFrame(data_cv.toarray(), columns=cv.get_feature_names())\ndata_dtm.index = data_df.index\n\ndata_dtm = data_dtm.transpose()\ntop_dict = {}\nfor c in data_dtm.columns:\n    top = data_dtm[c].sort_values(ascending=False).head(30)\n    top_dict[c]= list(zip(top.index, top.values))\n\ntop_dict","29bc8bea":"# fakew news tends to use more verbs and adverbs, and true news uses more adjectives and nouns","c6270fd5":"from wordcloud import WordCloud\n\nwc = WordCloud(stopwords = stop_words, background_color = \"white\", colormap = \"Dark2\", max_font_size = 100, random_state = 40)\nplt.rcParams['figure.figsize'] = [16,80]\n\n\nfor index, label in enumerate(data_dtm.columns):\n    wc.generate(data_df.text[label])\n    plt.subplot(3,4, index+1)\n    plt.imshow(wc,interpolation = \"bilinear\")\n    plt.axis(\"off\")\n    plt.title(label)\n    \nplt.show()","e097e903":"import string\n\npun_count_fake, pun_count_true = 0,0\n\nfor i in fake_string:\n    if i in string.punctuation:\n        pun_count_fake+=1\nfor i in true_string:\n    if i in string.punctuation:\n        pun_count_true+=1\npun_count_fake","4d973046":"pun_count_true","31a0f688":"# fake news use 27.6798% more puctuations than true news","fda91ebc":"# **data_clean**","0ca161dc":"## read data (both fake and real news)","fff7d9f8":"## count most used words","242e532d":"## add a column indicating the label","9e7dfda6":"## count punctuations"}}