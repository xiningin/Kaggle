{"cell_type":{"91a84c18":"code","2b64662e":"code","7456dbe0":"code","20b7eef4":"code","c7ee2278":"code","518b1357":"code","6650ac76":"code","7261670e":"code","772ca070":"code","6ff3a743":"code","9d6b4f52":"code","ce9c1dab":"code","c6340c14":"code","98f2db7c":"markdown","70618542":"markdown","8f611e0e":"markdown","16e56366":"markdown","fec84553":"markdown","0c7e3b95":"markdown","6217deea":"markdown","b2880f11":"markdown","1aa8838e":"markdown","763f1783":"markdown","c3764cb6":"markdown","80fe97cd":"markdown","db10a5fc":"markdown"},"source":{"91a84c18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b64662e":"import matplotlib.pyplot as plt\nimport scipy\nimport sys\nimport pickle\nimport librosa\nimport librosa.display as lpt\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport tensorflow as tf\nfrom tensorflow import keras","7456dbe0":"# Sample rate\nsr = 45600\n\n# Normalize function for Spectral rolloff\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n\n# Start and End for Zero Crossing-Rate\nstart = 1000\nend = 1200","20b7eef4":"blues_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/blues\/blues.00000.wav'\nclassical_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/classical\/classical.00000.wav'\ncountry_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/country\/country.00000.wav'\ndisco_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/disco\/disco.00000.wav'\nhipHop_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/hiphop\/hiphop.00000.wav'\njazz_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/jazz\/jazz.00000.wav'\nmetal_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/metal\/metal.00000.wav'\npop_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/pop\/pop.00000.wav'\nraggae_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/reggae\/reggae.00000.wav'\nrock_sample = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/rock\/rock.00000.wav'","c7ee2278":"    # BLUES\ndata_blues, sr = librosa.load(blues_sample, sr=sr)\n    # CLASSICAL\ndata_classical, sr = librosa.load(classical_sample, sr=sr)\n    # COUNTRY\ndata_country, sr = librosa.load(country_sample, sr=sr)\n    # DISCO\ndata_disco, sr = librosa.load(disco_sample, sr=sr)\n    # HIP HOP\ndata_hipHop, sr = librosa.load(hipHop_sample, sr=sr)\n    # JAZZ\ndata_jazz, sr = librosa.load(jazz_sample, sr=sr)\n    # METAL\ndata_metal, sr = librosa.load(metal_sample, sr=sr)\n    # POP\ndata_pop, sr = librosa.load(pop_sample, sr=sr)\n    # RAGGAE\ndata_raggae, sr = librosa.load(raggae_sample, sr=sr)\n    # ROCK\ndata_rock, sr = librosa.load(rock_sample, sr=sr)\n\nsongs = {\n    'BLUES': data_blues,\n    'CLASSICAL': data_classical,\n    'COUNTRY': data_country,\n    'DISCO': data_disco,\n    'HIP HOP': data_hipHop,\n    'JAZZ': data_jazz,\n    'METAL': data_metal,\n    'POP': data_pop,\n    'RAGGAE': data_raggae,\n    'ROCK': data_rock\n}","518b1357":"for genre, song in songs.items():\n    plt.figure(figsize=(12, 4))\n    lpt.waveplot(song)\n    plt.title(genre)","6650ac76":"for genre, song in songs.items():\n    stft = librosa.stft(song)\n    plt.figure(figsize=(14, 6))\n    lpt.specshow(stft, sr=sr, x_axis='time', y_axis='hz')\n    plt.title(genre + ' Spectogram')\n    plt.colorbar()","7261670e":"for genre, song in songs.items():\n    stft = librosa.stft(song)\n    magphase, _ = librosa.magphase(stft)\n    mel_scale_sgram = librosa.feature.melspectrogram(S=magphase, sr=sr)\n    mel_sgram = librosa.amplitude_to_db(mel_scale_sgram, ref=np.min)\n    plt.figure(figsize=(14, 6))\n    librosa.display.specshow(mel_sgram, sr=sr, x_axis='time', y_axis='mel')\n    plt.title(genre + ' Mel Spectogram')\n    plt.colorbar(format='%+2.0f dB')","772ca070":"for genre, song in songs.items():\n    spectral_centroids = librosa.feature.spectral_centroid(song, sr=sr)[0]\n    t = librosa.frames_to_time(range(len(spectral_centroids)))\n    spectral_rollof = librosa.feature.spectral_rolloff(song+0.01, sr=sr)[0]\n    plt.figure(figsize=(12, 4))\n    lpt.waveplot(song, sr=sr, alpha=0.4)\n    plt.plot(t, normalize(spectral_rollof), color='r')\n    plt.title(genre + ' Spectral Rollof')","6ff3a743":"for genre, song in songs.items():\n    chroma = librosa.feature.chroma_stft(song, sr=sr)\n    plt.figure(figsize=(16, 6))\n    lpt.specshow(chroma, sr=sr, x_axis='time', y_axis='chroma', cmap='coolwarm')\n    plt.colorbar()\n    plt.title(genre + ' Chroma Feature')","9d6b4f52":"for genre, song in songs.items():\n    plt.figure(figsize=(14, 5))\n    plt.plot(song[start:end], color='#2B4F72')\n    plt.title(genre + ' Zero Crossing-Rate')\n    plt.grid()\n    zero_crossings = librosa.zero_crossings(song[start:end], pad=False)\n    print('Zero crossings ' + genre + ':', sum(zero_crossings))","ce9c1dab":"for genre, song in songs.items():\n    spectral_centroids = librosa.feature.spectral_centroid(song, sr=sr)[0]\n    t = librosa.frames_to_time(range(len(spectral_centroids)))\n    plt.figure(figsize=(12,4))\n    lpt.waveplot(song, sr=sr, alpha=0.4)\n    plt.plot(t, normalize(spectral_centroids), color='r')\n    plt.title(genre + ' Spectral Centroids')","c6340c14":"for genre, song in songs.items():\n    mfccs = librosa.feature.mfcc(song, sr=sr)\n    print(mfccs.shape)\n    plt.figure(figsize=(14, 6))\n    librosa.display.specshow(mfccs, sr=sr, x_axis='time')\n    plt.title(genre + ' MFCCS')","98f2db7c":"# **Load the paths of one song in each genre**","70618542":"# **Declare variables and functions**","8f611e0e":"5. Zero Crossing-Rate","16e56366":"2. Mel Spectogram dB","fec84553":"3. Spectral Rollof","0c7e3b95":"4. Chroma Feature","6217deea":"1. Normal Spectrograms","b2880f11":"6. Spectral Centroids","1aa8838e":"# **Vizualizing audio files**","763f1783":"# **Importing libraies**","c3764cb6":"* **Spectrograms**","80fe97cd":"# **Load one song from each genre**","db10a5fc":"* **Waveforms**"}}