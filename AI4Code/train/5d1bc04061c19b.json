{"cell_type":{"29421867":"code","7b9f8501":"code","56817ae8":"code","84eab950":"code","6ad64dda":"code","2e30813a":"code","90ba151d":"code","fe70bbcf":"code","52eb9444":"code","dd0e6cc9":"code","3d16f8ee":"markdown","44110664":"markdown"},"source":{"29421867":"!pip install -q git+https:\/\/github.com\/tensorflow\/docs\n!pip install imutils\nfrom tensorflow_docs.vis import embed\nfrom tensorflow import keras\nfrom imutils import paths\n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport imageio\nimport cv2\nimport os\nimport warnings","7b9f8501":"IMG_SIZE = 224\nBATCH_SIZE = 64\nEPOCHS = 13\n\nMAX_SEQ_LENGTH = 20\nNUM_FEATURES = 2048","56817ae8":"train_df = pd.read_csv(\"\/kaggle\/input\/ucf101-dataset\/ucf101_top5\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/ucf101-dataset\/ucf101_top5\/test.csv\")\n\nprint(f\"Total videos for training: {len(train_df)}\")\nprint(f\"Total videos for testing: {len(test_df)}\")\n\ntrain_df.head(10)","84eab950":"def crop_center_square(frame):\n    y, x = frame.shape[0:2]\n    min_dim = min(y, x)\n    start_x = (x \/\/ 2) - (min_dim \/\/ 2)\n    start_y = (y \/\/ 2) - (min_dim \/\/ 2)\n    return frame[start_y : start_y + min_dim, start_x : start_x + min_dim]\n\n\ndef load_video(path, max_frames=0, resize=(IMG_SIZE, IMG_SIZE)):\n    cap = cv2.VideoCapture(path)\n    frames = []\n    try:\n        while True:\n            ret, frame = cap.read()\n            if not ret:\n                break\n            frame = crop_center_square(frame)\n            frame = cv2.resize(frame, resize)\n            frame = frame[:, :, [2, 1, 0]]\n            frames.append(frame)\n\n            if len(frames) == max_frames:\n                break\n    finally:\n        cap.release()\n    return np.array(frames)","6ad64dda":"def build_feature_extractor():\n    \n    feature_extractor = keras.applications.InceptionV3(\n        weights=\"imagenet\",\n        include_top=False,\n        pooling=\"avg\",\n        input_shape=(IMG_SIZE, IMG_SIZE, 3),\n    )\n    \n    preprocess_input = keras.applications.inception_v3.preprocess_input\n\n    inputs = keras.Input((IMG_SIZE, IMG_SIZE, 3))\n    preprocessed = preprocess_input(inputs)\n\n    outputs = feature_extractor(preprocessed)\n    return keras.Model(inputs, outputs, name=\"feature_extractor\")","2e30813a":"import warnings\n\nfeature_extractor = build_feature_extractor()","90ba151d":"label_processor = keras.layers.StringLookup(\n    num_oov_indices=0, vocabulary=np.unique(train_df[\"tag\"])\n)\nprint(label_processor.get_vocabulary())","fe70bbcf":"def prepare_all_videos(df, root_dir):\n    num_samples = len(df)\n    video_paths = df[\"video_name\"].values.tolist()\n    labels = df[\"tag\"].values\n    labels = label_processor(labels[..., None]).numpy()\n\n    # `frame_masks` and `frame_features` are what we will feed to our sequence model.\n    # `frame_masks` will contain a bunch of booleans denoting if a timestep is\n    # masked with padding or not.\n    frame_masks = np.zeros(shape=(num_samples, MAX_SEQ_LENGTH), dtype=\"bool\")\n    frame_features = np.zeros(\n        shape=(num_samples, MAX_SEQ_LENGTH, NUM_FEATURES), dtype=\"float32\"\n    )\n\n    # For each video.\n    for idx, path in enumerate(video_paths):\n        # Gather all its frames and add a batch dimension.\n        frames = load_video(os.path.join(root_dir, path))\n        frames = frames[None, ...]\n\n        # Initialize placeholders to store the masks and features of the current video.\n        temp_frame_mask = np.zeros(shape=(1, MAX_SEQ_LENGTH,), dtype=\"bool\")\n        temp_frame_features = np.zeros(\n            shape=(1, MAX_SEQ_LENGTH, NUM_FEATURES), dtype=\"float32\"\n        )\n\n        # Extract features from the frames of the current video.\n        for i, batch in enumerate(frames):\n            video_length = batch.shape[0]\n            length = min(MAX_SEQ_LENGTH, video_length)\n            for j in range(length):\n                temp_frame_features[i, j, :] = feature_extractor.predict(\n                    batch[None, j, :]\n                )\n            temp_frame_mask[i, :length] = 1  # 1 = not masked, 0 = masked\n\n        frame_features[idx,] = temp_frame_features.squeeze()\n        frame_masks[idx,] = temp_frame_mask.squeeze()\n\n    return (frame_features, frame_masks), labels\n\n\ntrain_data, train_labels = prepare_all_videos(train_df, \"\/kaggle\/input\/ucf101-dataset\/ucf101_top5\/train\/\")\ntest_data, test_labels = prepare_all_videos(test_df, \"\/kaggle\/input\/ucf101-dataset\/ucf101_top5\/test\/\")\n\nprint(f\"Frame features in train set: {train_data[0].shape}\")\nprint(f\"Frame masks in train set: {train_data[1].shape}\")","52eb9444":"# Utility for our sequence model.\ndef get_sequence_model():\n    class_vocab = label_processor.get_vocabulary()\n\n    frame_features_input = keras.Input((MAX_SEQ_LENGTH, NUM_FEATURES))\n    mask_input = keras.Input((MAX_SEQ_LENGTH,), dtype=\"bool\")\n\n    x = keras.layers.GRU(16, return_sequences=True)(\n        frame_features_input, mask=mask_input\n    )\n    x = keras.layers.GRU(8)(x)\n    x = keras.layers.Dropout(0.4)(x)\n    x = keras.layers.Dense(8, activation=\"relu\")(x)\n    output = keras.layers.Dense(len(class_vocab), activation=\"softmax\")(x)\n\n    rnn_model = keras.Model([frame_features_input, mask_input], output)\n\n    rnn_model.compile(\n        loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"]\n    )\n    return rnn_model\n\n\n# Utility for running experiments.\ndef run_experiment():\n    filepath = \"train\/cp.ckpt\"\n    checkpoint = keras.callbacks.ModelCheckpoint(\n        filepath, save_weights_only=True, save_best_only=True, verbose=1\n    )\n\n    seq_model = get_sequence_model()\n    history = seq_model.fit(\n        [train_data[0], train_data[1]],\n        train_labels,\n        validation_split=0.3,\n        epochs=EPOCHS,\n        callbacks=[checkpoint],\n    )\n\n    seq_model.load_weights(filepath)\n    _, accuracy = seq_model.evaluate([test_data[0], test_data[1]], test_labels)\n    print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")\n\n    return history, seq_model\n\n\n_, sequence_model = run_experiment()","dd0e6cc9":"def prepare_single_video(frames):\n    frames = frames[None, ...]\n    frame_mask = np.zeros(shape=(1, MAX_SEQ_LENGTH,), dtype=\"bool\")\n    frame_features = np.zeros(shape=(1, MAX_SEQ_LENGTH, NUM_FEATURES), dtype=\"float32\")\n\n    for i, batch in enumerate(frames):\n        video_length = batch.shape[0]\n        length = min(MAX_SEQ_LENGTH, video_length)\n        for j in range(length):\n            frame_features[i, j, :] = feature_extractor.predict(batch[None, j, :])\n        frame_mask[i, :length] = 1  # 1 = not masked, 0 = masked\n\n    return frame_features, frame_mask\n\n\ndef sequence_prediction(path):\n    class_vocab = label_processor.get_vocabulary()\n\n    frames = load_video(os.path.join(\"\/kaggle\/input\/ucf101-dataset\/ucf101_top5\/test\/\", path))\n    frame_features, frame_mask = prepare_single_video(frames)\n    probabilities = sequence_model.predict([frame_features, frame_mask])[0]\n\n    for i in np.argsort(probabilities)[::-1]:\n        print(f\"  {class_vocab[i]}: {probabilities[i] * 100:5.2f}%\")\n    return frames\n\n\ndef to_gif(images):\n    converted_images = images.astype(np.uint8)\n    imageio.mimsave(\"animation.gif\", converted_images, fps=10)\n    return embed.embed_file(\"animation.gif\")\n\n\n# test_video = np.random.choice(test_df[\"video_name\"].values.tolist())\ntest_video =\"v_Punch_g06_c02.avi\"\nprint(f\"Test video path: {test_video}\")\ntest_frames = sequence_prediction(test_video)\nto_gif(test_frames[:MAX_SEQ_LENGTH])","3d16f8ee":"# Data preparation","44110664":"# Define hyperparameters"}}