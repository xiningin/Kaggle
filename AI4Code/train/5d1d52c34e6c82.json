{"cell_type":{"775cedb0":"code","d0f12b00":"code","c53933f7":"code","005c1b02":"code","3102f35f":"code","ad3f2029":"code","c497c673":"code","545b51e7":"code","ed617dba":"code","1c006967":"code","217144bf":"code","96d6dcfd":"code","612746ea":"code","daf60fe5":"code","385888da":"code","911432f2":"code","f0d991b7":"code","b1206009":"code","f46115b9":"code","853c8bf7":"code","2492207f":"code","3d49c5bc":"code","e93a4a53":"code","6fff8d0c":"code","522768b4":"code","2eba15e7":"code","05a4e26c":"code","d7b9d26a":"code","8cef5214":"code","a0859a35":"code","f02e7e6f":"markdown","fe74492e":"markdown","ba3b4a61":"markdown","4eb18092":"markdown","9cf89ac0":"markdown","670b5123":"markdown","aa7b066c":"markdown","1bf0c714":"markdown"},"source":{"775cedb0":"import numpy as np \nimport pandas as pd \nimport os","d0f12b00":"!pip install pyecharts","c53933f7":"import numpy as np \nimport pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Graph\nimport torch\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset,TensorDataset,DataLoader\nfrom keras.preprocessing import sequence\nfrom transformers import BertTokenizer, BertForSequenceClassification\n\nimport os\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore')","005c1b02":"marked_sentence_df = pd.read_csv('\/kaggle\/input\/covid19-knowledge-graphs-relation-files\/marked_sentence\/marked_sentence.csv')\nmarked_sentence_df.sample(15)","3102f35f":"def Build_graph(df,relation=False,repulsion=40,title='COVID-19 knowledge graph',labelShow=False):\n    entity_type_dic = dict(df.drop_duplicates(['start_entity']).set_index(['start_entity'])['start_entity_type'])\n    entity_type_dic.update(dict(df.drop_duplicates(['end_entity']).set_index(['end_entity'])['end_entity_type']))\n    color = {'Disease':'#FF7F50','Gene':'#48D1CC','Chemical':'#B3EE3A'}\n    cate =  {'Disease':0,'Gene':1,'Chemical':2}\n    categories = [{'name':'Disease','itemStyle': {'normal': {'color': color['Disease']}}},{'name':'Gene','itemStyle': {'normal': {'color': color['Gene']}}},{'name':'Chemical','itemStyle': {'normal': {'color': color['Chemical']}}}]\n    nodes = []\n    for entity in list(set(df['start_entity'])|set(df['end_entity'])):\n        nodes.append({'name': entity, 'symbolSize': max(10,np.log1p(df.loc[(df['start_entity']==entity)|(df['end_entity']==entity)].shape[0])*10\/\/1),\n                     'category':cate[entity_type_dic[entity]]})\n    links = []\n    for i in df.index:\n        if not relation:\n            links.append({'source': df.loc[i,'start_entity'], 'target': df.loc[i,'end_entity'],'value':df.loc[i,'marked_sentence']})\n        else:\n            links.append({'source': df.loc[i,'start_entity'], 'target': df.loc[i,'end_entity'], 'value':df.loc[i,'theme']})\n    g = (\n        Graph()\n        .add('', nodes, links,categories, repulsion=repulsion,label_opts=opts.LabelOpts(is_show=labelShow))\n        .set_global_opts(title_opts=opts.TitleOpts(title=title),legend_opts=opts.LegendOpts(orient='vertical', pos_left='2%', pos_top='40%',legend_icon='circle'))\n        .render_notebook()\n        )\n    g1 = (\n        Graph()\n        .add('', nodes, links,categories, repulsion=repulsion,label_opts=opts.LabelOpts(is_show=labelShow))\n        .set_global_opts(title_opts=opts.TitleOpts(title=title),legend_opts=opts.LegendOpts(orient='vertical', pos_left='2%', pos_top='40%',legend_icon='circle'))\n        .render(path=title+'.html')\n        )\n    return g\n","ad3f2029":"g = Build_graph(marked_sentence_df.sample(800),title='subsample of topology graph')\ng","c497c673":"class Args:\n    task_type = 'chemical-disease'\n    max_seq_len = 64\n    bs = 64\n\nclass Conf:\n    # some information can be found in:\n    # Percha B, Altman R B. A global network of biomedical relationships derived from text[J]. Bioinformatics, 2018, 34(15): 2614-2624.\n    relation_type = {'chemical-disease':['T', 'C', 'Sa', 'Pr', 'Pa', 'J'],\n                     'disease-chemical':['Mp'],\n                     'chemical-gene':['A+', 'A-', 'B', 'E+', 'E-', 'E', 'N'],\n                     'gene-chemical':['O', 'K', 'Z'],\n                     'gene-disease':['U', 'Ud', 'D', 'J', 'Te', 'Y', 'G'],\n                     'disease-gene':['Md', 'X', 'L'],\n                     'gene-gene':['B', 'W', 'V+', 'E+', 'E', 'I', 'H', 'Rg', 'Q'],\n                     }\n\nargs = Args()\nconf = Conf()\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\ndevice","545b51e7":"# load pretrained Bert model\ndef Bert_model(taskType,bertPath):\n    label_df = pd.read_csv('\/kaggle\/input\/covid19-knowledge-graphs-relation-files\/%s_label.csv'%taskType)\n    tokenizer = BertTokenizer.from_pretrained(bertPath,do_lower_case=False)\n    model = BertForSequenceClassification.from_pretrained(bertPath, num_labels=label_df['label'].nunique())\n    return label_df,tokenizer,model\n\n# bulid data loader\ndef Data_loader(x,y=None,bs=128,shuffle=False,numWorkers=0):\n    if y is not None:\n        data = TensorDataset(x,y)\n    else:\n        data = TensorDataset(x)\n    data_loader = DataLoader(dataset=data,batch_size=bs,shuffle=shuffle,num_workers=numWorkers)\n    return data_loader\n\ndef Prepare_predict_data(tokenizer,bs):\n    marked_sentences = marked_sentence_df.loc[(marked_sentence_df['start_entity_type'].apply(lambda x:x.lower())==args.task_type.split('-')[0])&\\\n                                              (marked_sentence_df['end_entity_type'].apply(lambda x:x.lower())==args.task_type.split('-')[1]),'marked_sentence']\n    # convert tokens to ids\n    ids = marked_sentences.apply(lambda x:tokenizer.convert_tokens_to_ids(tokenizer.tokenize(x))).tolist()\n    # padding ids\n    ids = sequence.pad_sequences(ids,args.max_seq_len, truncating='post', padding='post')\n    # we cannot confirm order of entities, so predict two possibilities\n    reverse_marked_sentences = marked_sentence_df.loc[(marked_sentence_df['start_entity_type'].apply(lambda x:x.lower())==args.task_type.split('-')[0])&\\\n                                              (marked_sentence_df['end_entity_type'].apply(lambda x:x.lower())==args.task_type.split('-')[1]),'marked_sentence']\\\n                                              .apply(lambda x:x.replace('start_entity','init_start_entity').replace('end_entity','start_entity').replace('init_start_entity','end_entity'))\n    reverse_ids = reverse_marked_sentences.apply(lambda x:tokenizer.convert_tokens_to_ids(tokenizer.tokenize(x))).tolist()\n    reverse_ids = sequence.pad_sequences(reverse_ids,args.max_seq_len, truncating='post', padding='post')\n    predict_data_loader = Data_loader(torch.LongTensor(ids),torch.LongTensor(reverse_ids),bs=bs)\n    return marked_sentences.values,predict_data_loader\n\ndef Predict():\n    reverse_task_type = args.task_type.split('-')[1] + '-' + args.task_type.split('-')[0]\n    def Filter(x):\n        if x['init_pred'] in conf.relation_type[args.task_type]:\n            if x['reverse_pred'] not in conf.relation_type[reverse_task_type]:\n                # init_pred is a correct relation but reverse_pred not\n                return 'init_pred'\n            else:\n                # init_pred and reverse_pred both are correct relations\n                if x['init_pred_prob'] >= x['reverse_pred_prob']:\n                    # init_pred_prob greater than or equal to reverse_pred_prob\n                    return 'init_pred'\n                else:\n                    return 'reverse_pred'\n        else:\n            if x['reverse_pred'] not in conf.relation_type[reverse_task_type]:\n                # init_pred and reverse_pred both are uncorrect relations\n                return 'uncorrect'\n            else:\n                # reverse_pred is a correct relation but init_pred not\n                return 'reverse_pred'\n    label_df,tokenizer,model = Bert_model(args.task_type,'\/kaggle\/input\/covid19-knowledge-graphs-relation-files\/%s\/'%args.task_type)\n    marked_sentences,predict_data_loader = Prepare_predict_data(tokenizer,args.bs)\n    model = model.to(device)\n    preds = []\n    preds_prob = []\n    reverse_preds = []\n    reverse_preds_prob = []\n    for data in tqdm(predict_data_loader):\n        ids,reverse_ids = [t.to(device) for t in data]\n        outputs = model(input_ids=ids)\n        logits = outputs[0]\n        pred_prob, pred = torch.max(F.softmax(logits.data,1), 1)\n        preds.extend(list(pred.cpu().detach().numpy()))\n        preds_prob.extend(list(pred_prob.cpu().detach().numpy()))\n        reverse_outputs = model(input_ids=reverse_ids)\n        reverse_logits = reverse_outputs[0]\n        reverse_pred_prob, reverse_pred = torch.max(F.softmax(reverse_logits.data,1), 1)\n        reverse_preds.extend(list(reverse_pred.cpu().detach().numpy()))\n        reverse_preds_prob.extend(list(reverse_pred_prob.cpu().detach().numpy()))\n\n    pred_df = pd.DataFrame({'marked_sentence':marked_sentences,'init_pred':preds,'init_pred_prob':preds_prob,'reverse_pred':reverse_preds,'reverse_pred_prob':reverse_preds_prob})\n    # map label(0, 1, 2...) to raw label(T, C, Sa...) \n    pred_df['init_pred'] = pred_df['init_pred'].replace(dict(label_df.set_index(['label'])['label_raw']))\n    pred_df['reverse_pred'] = pred_df['reverse_pred'].replace(dict(label_df.set_index(['label'])['label_raw']))\n    # judge the order of a pair of entities\n    pred_df['filter'] = pred_df.apply(lambda x:Filter(x), axis=1)\n    pred_df['pred'] = pred_df['init_pred']\n    pred_df['pred_prob'] = pred_df['init_pred_prob']\n    pred_df.loc[pred_df['filter']=='reverse_pred','pred'] = pred_df.loc[pred_df['filter']=='reverse_pred','reverse_pred']\n    pred_df.loc[pred_df['filter']=='reverse_pred','pred_prob'] = pred_df.loc[pred_df['filter']=='reverse_pred','reverse_pred_prob']\n    pred_df = pred_df.loc[pred_df['filter']!='uncorrect']\n    pred_df = marked_sentence_df.merge(pred_df,how='inner',on='marked_sentence')\n    pred_df['init_start_entity'] = pred_df['start_entity']\n    pred_df['init_start_entity_type'] = pred_df['start_entity_type']\n    pred_df.loc[pred_df['filter']=='reverse_pred','start_entity'] = pred_df.loc[pred_df['filter']=='reverse_pred','end_entity']\n    pred_df.loc[pred_df['filter']=='reverse_pred','start_entity_type'] = pred_df.loc[pred_df['filter']=='reverse_pred','end_entity_type']\n    pred_df.loc[pred_df['filter']=='reverse_pred','end_entity'] = pred_df.loc[pred_df['filter']=='reverse_pred','init_start_entity']\n    pred_df.loc[pred_df['filter']=='reverse_pred','end_entity_type'] = pred_df.loc[pred_df['filter']=='reverse_pred','init_start_entity_type']\n    pred_df.drop(['init_start_entity','init_start_entity_type'],axis=1,inplace=True)\n    torch.cuda.empty_cache()\n    return label_df,pred_df\n# chemical-disease relation prediction\nargs.task_type = 'chemical-disease'\nimport pickle\n\ntry:\n    c_d_label_df,c_d_pred_df = pickle.load(open(\"\/kaggle\/input\/covid19-knowledge-graphs-relation-files\/chem_disease.pickle\", \"rb\"))\nexcept (OSError, IOError) as e:\n    c_d_label_df,c_d_pred_df = Predict()\n    pickle.dump((c_d_label_df,c_d_pred_df), open(\"chem_disease.pickle\", \"wb\"))","ed617dba":"# chemical-disease relation theme\nc_d_label_df.rename(columns={'label_raw': 'pred'}, inplace=True)\nc_d_label_df","1c006967":"# chemical-disease classification results\nc_d_pred_df=c_d_pred_df.merge(c_d_label_df, on='pred')\nc_d_pred_df.sample(5)","217144bf":"# chemical-gene relation prediction\nargs.task_type = 'chemical-gene'\ntry:\n    c_g_label_df,c_g_pred_df = pickle.load(open(\"\/kaggle\/input\/covid19-knowledge-graphs-relation-files\/chem_gene.pickle\", \"rb\"))\nexcept (OSError, IOError) as e:\n    c_g_label_df,c_g_pred_df = Predict()\n    pickle.dump((c_g_label_df,c_g_pred_df), open(\"chem_gene.pickle\", \"wb\"))","96d6dcfd":"# chemical-gene relation theme\nc_g_label_df.rename(columns={'label_raw': 'pred'}, inplace=True)\nc_g_label_df","612746ea":"# chemical-gene classification results\nc_g_pred_df=c_g_pred_df.merge(c_g_label_df, on='pred')\nc_g_pred_df.sample(5)","daf60fe5":"# gene-disease relation prediction\nargs.task_type = 'gene-disease'\ntry:\n    g_d_label_df,g_d_pred_df = pickle.load(open(\"\/kaggle\/input\/covid19-knowledge-graphs-relation-files\/gene_disease.pickle\", \"rb\"))\nexcept (OSError, IOError) as e:\n    g_d_label_df,g_d_pred_df = Predict()\n    pickle.dump((g_d_label_df,g_d_pred_df), open(\"gene_disease.pickle\", \"wb\"))","385888da":"# gene-disease relation theme\ng_d_label_df.rename(columns={'label_raw': 'pred'}, inplace=True)\ng_d_label_df","911432f2":"# gene-disease classification results\ng_d_pred_df=g_d_pred_df.merge(g_d_label_df, on='pred')\ng_d_pred_df.sample(5)","f0d991b7":"# gene-gene relation prediction\nargs.task_type = 'gene-gene'\ntry:\n    g_g_label_df,g_g_pred_df = pickle.load(open(\"\/kaggle\/input\/covid19-knowledge-graphs-relation-files\/gene_gene.pickle\", \"rb\"))\nexcept (OSError, IOError) as e:\n    g_g_label_df,g_g_pred_df = Predict()\n    pickle.dump((g_g_label_df,g_g_pred_df), open(\"gene_gene.pickle\", \"wb\"))","b1206009":"# gene-gene relation theme\ng_g_label_df.rename(columns={'label_raw': 'pred'}, inplace=True)\ng_g_label_df","f46115b9":"# gene-gene classification results\ng_g_pred_df=g_g_pred_df.merge(g_g_label_df, on='pred')\ng_g_pred_df.sample(5)","853c8bf7":"# chemical-COVID-19 relations\ng = Build_graph(c_d_pred_df.loc[(c_d_pred_df['start_entity']=='COVID-19')|(c_d_pred_df['end_entity']=='COVID-19')],relation=True,repulsion=800,title='chemical-COVID-19 knowledge graph',labelShow=True)\ng","2492207f":"# gene-COVID-19 relations\ng = Build_graph(g_d_pred_df.loc[(g_d_pred_df['start_entity']=='COVID-19')|(g_d_pred_df['end_entity']=='COVID-19')],relation=True,repulsion=60,title='gene-COVID-19 knowledge graph',labelShow=True)\ng","3d49c5bc":"marked_sentence_df","e93a4a53":"# gene-COVID-19 relations\ng = Build_graph(marked_sentence_df.loc[(marked_sentence_df['start_entity']=='COVID-19')&(marked_sentence_df['end_entity_type']=='Disease')|(marked_sentence_df['start_entity_type']=='Disease')&(marked_sentence_df['end_entity']=='COVID-19')],relation=False,repulsion=60,title='disease-COVID-19 knowledge graph',labelShow=True)\ng","6fff8d0c":"# merge all relation prediction and save results\ncols = ['start_entity','end_entity','start_entity_type','end_entity_type','marked_sentence','pred','pred_prob','theme']\nrelation_df = pd.concat([c_d_pred_df[cols],c_g_pred_df[cols],g_d_pred_df[cols],g_g_pred_df[cols]]).append(marked_sentence_df.loc[(marked_sentence_df['start_entity_type'].isin(['Chemical','Disease'])&(marked_sentence_df['start_entity_type']==marked_sentence_df['end_entity_type']))]).reset_index(drop=True)\nrelation_df.loc[(relation_df['pred'].isna())&(relation_df['start_entity_type']=='Chemical'),'pred'] = 'CC'\nrelation_df.loc[(relation_df['pred'].isna())&(relation_df['start_entity_type']=='Disease'),'pred'] = 'DD'\nrelation_df = relation_df[cols]\nrelation_df.to_csv('relation.csv',index=False)","522768b4":"labels_df= pd.concat([c_d_label_df,c_g_label_df,g_d_label_df,g_g_label_df])","2eba15e7":"# subsample of Combined knowledge graph\ntemp=relation_df.loc[(relation_df['start_entity']=='COVID-19')|(relation_df['end_entity']=='COVID-19')]\ntemp = temp[cols]\ng = Build_graph(temp.sample(200),relation=True,repulsion=15,title='subsample of COVID-19 knowledge graph',labelShow=True)\ng","05a4e26c":"ch1='Chemical'\nch2='Disease'\nch3=2","d7b9d26a":"ch1=input('enter choice 1 : Chemical,Gene,Disease = You selected ')\nch2=input('enter choice 2 : Chemical,Gene,Disease = You selected ')\nch3=int(input('enter 2-Covid19 related OR  1- Not specific to Covid  = You selected '))\nif ch3==1:\n    temp=relation_df.loc[((relation_df['start_entity_type']==ch1)&(relation_df['end_entity_type']==ch2))|((relation_df['start_entity_type']==ch2)&(relation_df['end_entity_type']==ch1))]#\n    temp = temp[cols]\n    g = Build_graph(temp,relation=True,repulsion=15,title= ch1+'_'+ch2+'_knowledge graph',labelShow=True)\n    temp.to_csv(ch1+'_'+ch2+'_knowledge graph.csv')\nelse:\n    temp=relation_df.loc[((relation_df['start_entity_type']==ch1)&(relation_df['end_entity_type']==ch2))|((relation_df['start_entity_type']==ch2)&(relation_df['end_entity_type']==ch1))]#\n    temp=temp.loc[(relation_df['start_entity']=='COVID-19')|(relation_df['end_entity']=='COVID-19')]\n    temp = temp[cols]\n    g = Build_graph(temp,relation=True,repulsion=15,title= 'Covid19 Specific_'+ch1+'_'+ch2+'_knowledge graph',labelShow=True)\n    temp.to_csv('Covid19 Specific_'+ch1+'_'+ch2+'_knowledge graph.csv')\ng","8cef5214":"labels_df","a0859a35":"import re\nch5='Mutations affect disease course'\n# ch5=input('enter desired relationship')\ntemp=relation_df.loc[(relation_df['theme']==ch5)]#\nif temp is None:\n    print('yes')\ntemp = temp[cols]\nch5=re.sub(r'\/', '_', ch5)\ng = Build_graph(temp,relation=True,repulsion=15,title=ch5+'_knowledge graph',labelShow=True)\ntemp.to_csv(ch5+'_knowledge graph.csv')\ng","f02e7e6f":"# Knowledge graph between pair of entities(Covid specific and Non specific also)","fe74492e":"# Answering researchers questions","ba3b4a61":"# COVID-19 knowledge graph","4eb18092":"# Search based on desired relationships","9cf89ac0":"Relations between chemicals, genes and disease offer insights into the mechanisms behind higher order biochemical phenomena, such as drug-drug interactions, drug response and gene-disease associations. This work focused on extracting relations between chemicals, genes and disease from research articles to build a biomedical knowledge graph related to COVID-19.","670b5123":"# Classify relations\nPercha B 2018 revealed 10 broad themes for chemical-gene relations, 7 for chemical-disease, 10 for gene-disease and 9 for gene\u2013gene in Medline abstracts. We used these labeled sentences to train a model to classify sentences in this work. As we cannot confirm order of entities, we predicted two possibilities(init_pred and reverse_pred) and retrieved the higher one. The details can be seen here","aa7b066c":"**Load marked sentences**\nThese sentences containing more than two biomedical entities were extracted from abstracts and stored in a csv file. We combined the pairwise entities in each sentence to build relations.","1bf0c714":"# Show relation between covid-19 and other entities\npycharts cannot show multiple relations between two entities, so the graph is incomplete. Complete relations can be seen in pred_df."}}