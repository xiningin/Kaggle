{"cell_type":{"0defa5ef":"code","7a3f5761":"code","3c8ad009":"code","e6ffd2aa":"code","7b308864":"code","9cba47f2":"code","e5a65fdc":"code","077f252e":"code","2a3590a3":"code","7f92b466":"code","c6de85cb":"code","3da95bd4":"code","2680cc04":"code","75ba81bb":"code","a4570f77":"code","507ea7ad":"code","4411bd1b":"code","d5597898":"code","8202611f":"code","b61efe93":"code","dca602b7":"code","3f2d59e0":"code","09a0b959":"code","84308d65":"code","77f21f47":"code","6cf9802a":"code","885185d0":"code","35ee70b4":"code","a07fff63":"code","a9098f59":"code","3d8b503f":"code","301e0811":"code","7ef53c1e":"code","1b352c01":"code","3842e887":"code","708920e0":"code","10b0fb1a":"code","77fabe14":"code","007416a6":"code","acda1518":"code","28b1a93c":"code","aae053db":"code","d9494560":"code","6e7efe5c":"code","cc334326":"code","ca795ef5":"code","4c9f95e8":"code","9b4f66bf":"code","238b1276":"code","e43b592c":"code","eceac2c2":"code","299263cd":"code","90dcf71a":"code","3f3eaa98":"markdown","f356317c":"markdown","8f47922a":"markdown","52b978a6":"markdown","88642295":"markdown","3a9e4254":"markdown","7872129e":"markdown","acd40f3e":"markdown","68201049":"markdown","bb48174d":"markdown","21441c2a":"markdown","bdd0bba4":"markdown","b240458e":"markdown","c3089513":"markdown"},"source":{"0defa5ef":"# Importing all required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\n%matplotlib inline","7a3f5761":"#Importing dataset\nmedia = pd.read_csv('..\/input\/mediacompany.csv')\nmedia = media.drop('Unnamed: 7',axis = 1)","3c8ad009":"#Let's explore the top 5 rows\nmedia.head()","e6ffd2aa":"# Converting date to Pandas datetime format\nmedia['Date'] = pd.to_datetime(media['Date'])\nmedia['Date2'] = datetime(2017, 2, 28)","7b308864":"media.head()","9cba47f2":"# Deriving \"days since the show started\"\nfrom datetime import date\n\nd0 = media.Date2\nd1 = media.Date\ndelta = d1 - d0\nmedia['day']= delta\nmedia = media.drop(columns = ['Date2'], axis=1)","e5a65fdc":"media.head()","077f252e":"# Cleaning days\nmedia['day'] = media['day'].astype(str)\nmedia['day'] = media['day'].map(lambda x: x[0:2])\nmedia['day'] = media['day'].astype(int)","2a3590a3":"media.head()","7f92b466":"# days vs Views_show\nmedia.plot.line(x='day', y='Views_show')","c6de85cb":"plt.figure(figsize=(8, 6))\ndf_time = media.groupby([\"Date\"]).Views_show.mean()\nsns.tsplot(df_time)","3da95bd4":"# Scatter Plot (days vs Views_show)\ncolors = (0,0,0)\narea = np.pi*3\nplt.scatter(media.day, media.Views_show, s=area, c=colors, alpha=0.5)\nplt.title('Scatter plot pythonspot.com')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()","2680cc04":"# plot for days vs Views_show and days vs Ad_impressions\n\nfig = plt.figure()\nhost = fig.add_subplot(111)\n\npar1 = host.twinx()\npar2 = host.twinx()\n\nhost.set_xlabel(\"Day\")\nhost.set_ylabel(\"View_Show\")\npar1.set_ylabel(\"Ad_impression\")\n\ncolor1 = plt.cm.viridis(0)\ncolor2 = plt.cm.viridis(0.5)\ncolor3 = plt.cm.viridis(.9)\n\np1, = host.plot(media.day,media.Views_show, color=color1,label=\"View_Show\")\np2, = par1.plot(media.day,media.Ad_impression,color=color2, label=\"Ad_impression\")\n\nlns = [p1, p2]\nhost.legend(handles=lns, loc='best')\n\n# right, left, top, bottom\npar2.spines['right'].set_position(('outward', 60))      \n# no x-ticks                 \npar2.xaxis.set_ticks([])\n# Sometimes handy, same for xaxis\n#par2.yaxis.set_ticks_position('right')\n\nhost.yaxis.label.set_color(p1.get_color())\npar1.yaxis.label.set_color(p2.get_color())\n\nplt.savefig(\"pyplot_multiple_y-axis.png\", bbox_inches='tight')","75ba81bb":"# Derived Metrics\n# Weekdays are taken such that 1 corresponds to Sunday and 7 to Saturday\n# Generate the weekday variable\nmedia['weekday'] = (media['day']+3)%7\nmedia.weekday.replace(0,7, inplace=True)\nmedia['weekday'] = media['weekday'].astype(int)\nmedia.head()","a4570f77":"# Putting feature variable to X\nX = media[['Visitors','weekday']]\n\n# Putting response variable to y\ny = media['Views_show']","507ea7ad":"from sklearn.linear_model import LinearRegression","4411bd1b":"# Representing LinearRegression as lr(Creating LinearRegression Object)\nlm = LinearRegression()","d5597898":"# fit the model to the training data\nlm.fit(X,y)","8202611f":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_1 = sm.OLS(y,X).fit()\nprint(lm_1.summary())","b61efe93":"# create Weekend variable, with value 1 at weekends and 0 at weekdays\ndef cond(i):\n    if i % 7 == 5: return 1\n    elif i % 7 == 4: return 1\n    else :return 0\n    return i\n\nmedia['weekend']=[cond(i) for i in media['day']]","dca602b7":"media.head()\n","3f2d59e0":"# Putting feature variable to X\nX = media[['Visitors','weekend']]\n\n# Putting response variable to y\ny = media['Views_show']","09a0b959":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_2 = sm.OLS(y,X).fit()\nprint(lm_2.summary())","84308d65":"# Putting feature variable to X\nX = media[['Visitors','weekend','Character_A']]\n\n# Putting response variable to y\ny = media['Views_show']","77f21f47":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_3 = sm.OLS(y,X).fit()\nprint(lm_3.summary())","6cf9802a":"# Create lag variable\nmedia['Lag_Views'] = np.roll(media['Views_show'], 1)\nmedia.Lag_Views.replace(108961,0, inplace=True)","885185d0":"media.head()","35ee70b4":"# Putting feature variable to X\nX = media[['Visitors','Character_A','Lag_Views','weekend']]\n\n# Putting response variable to y\ny = media['Views_show']","a07fff63":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_4 = sm.OLS(y,X).fit()\nprint(lm_4.summary())","a9098f59":"plt.figure(figsize = (20,10))        # Size of the figure\nsns.heatmap(media.corr(),annot = True)","3d8b503f":"# Putting feature variable to X\nX = media[['weekend','Character_A','Views_platform']]\n\n# Putting response variable to y\ny = media['Views_show']","301e0811":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_5 = sm.OLS(y,X).fit()\nprint(lm_5.summary())","7ef53c1e":"# Putting feature variable to X\nX = media[['weekend','Character_A','Visitors']]\n\n# Putting response variable to y\ny = media['Views_show']","1b352c01":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_6 = sm.OLS(y,X).fit()\nprint(lm_6.summary())","3842e887":"# Putting feature variable to X\nX = media[['weekend','Character_A','Visitors','Ad_impression']]\n\n# Putting response variable to y\ny = media['Views_show']","708920e0":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_7 = sm.OLS(y,X).fit()\nprint(lm_7.summary())","10b0fb1a":"# Putting feature variable to X\nX = media[['weekend','Character_A','Ad_impression']]\n\n# Putting response variable to y\ny = media['Views_show']","77fabe14":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_8 = sm.OLS(y,X).fit()\nprint(lm_8.summary())","007416a6":"#Ad impression in million\nmedia['ad_impression_million'] = media['Ad_impression']\/1000000","acda1518":"# Putting feature variable to X\nX = media[['weekend','Character_A','ad_impression_million','Cricket_match_india']]\n\n# Putting response variable to y\ny = media['Views_show']","28b1a93c":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_9 = sm.OLS(y,X).fit()\nprint(lm_9.summary())","aae053db":"# Putting feature variable to X\nX = media[['weekend','Character_A','ad_impression_million']]\n\n# Putting response variable to y\ny = media['Views_show']","d9494560":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_10 = sm.OLS(y,X).fit()\nprint(lm_10.summary())","6e7efe5c":"# Making predictions using the model\nX = media[['weekend','Character_A','ad_impression_million']]\nX = sm.add_constant(X)\nPredicted_views = lm_10.predict(X)","cc334326":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(media.Views_show, Predicted_views)\nr_squared = r2_score(media.Views_show, Predicted_views)","ca795ef5":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","4c9f95e8":"#Actual vs Predicted\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nplt.plot(c,Predicted_views, color=\"red\",  linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Views', fontsize=16)                               # Y-label","9b4f66bf":"# Error terms\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show-Predicted_views, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('Views_show-Predicted_views', fontsize=16)                # Y-label","238b1276":"# Making predictions using the model\nX = media[['weekend','Character_A','Visitors']]\nX = sm.add_constant(X)\nPredicted_views = lm_6.predict(X)","e43b592c":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(media.Views_show, Predicted_views)\nr_squared = r2_score(media.Views_show, Predicted_views)","eceac2c2":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","299263cd":"#Actual vs Predicted\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nplt.plot(c,Predicted_views, color=\"red\",  linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Views', fontsize=16)                               # Y-label","90dcf71a":"# Error terms\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show-Predicted_views, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('Views_show-Predicted_views', fontsize=16)                # Y-label","3f3eaa98":"#### Running fifth model (lm5) Character_A, weekend & Views_platform","f356317c":"#### Running seventh model (lm7) Character_A, weekend & ad_impressions_million","8f47922a":"Problem Statement: A digital media company (similar to Voot, Hotstar, Netflix, etc.) had launched a show. Initially, the show got a good response, but then witnessed a decline in viewership. The company wants to figure out what went wrong.","52b978a6":"#### Running first model (lm1) Weekday & visitors ","88642295":"#### Running sixth model (lm6) Character_A, weekend & Visitors","3a9e4254":"#### Running second model (lm2) visitors & weekend","7872129e":"#### Running eight model (lm8) Character_A, weekend & Ad_impressions","acd40f3e":"#### Running seventh model (lm7) Character_A, weekend, Visitors, ad_impressions_million & Cricket_match_india","68201049":"#### Making predictions using lm6","bb48174d":"#### Running third model (lm3) visitors, weekend & Character_A","21441c2a":"#### Making predictions using lm10","bdd0bba4":"#### Running fourth model (lm4) visitors, Character_A, Lag_views & weekend","b240458e":"#### Running seventh model (lm7) Character_A, weekend, Visitors & Ad_impressions","c3089513":"## Media Company Case Study"}}