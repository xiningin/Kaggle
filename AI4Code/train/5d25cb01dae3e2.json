{"cell_type":{"517f654e":"code","45f11ea5":"code","94b4ef5c":"code","5adb981a":"code","78cca954":"code","d6acae2b":"code","7f1eba81":"code","5713c309":"code","c9106202":"code","e0138b77":"code","7af09127":"code","c82ef1fb":"code","fc2e56b2":"code","a5fb5251":"markdown","3ed3477d":"markdown","fb7824d2":"markdown","c148c20c":"markdown","672e390c":"markdown","5f64313d":"markdown","8ce447fe":"markdown","8c51b228":"markdown","51875bde":"markdown","9a30c190":"markdown","b670e66a":"markdown","aa9821a0":"markdown","b2ff1db9":"markdown"},"source":{"517f654e":"%matplotlib inline\nimport glob\nimport json\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","45f11ea5":"def create_data_frame(raw_data):\n    \"\"\"\n    Create a Pandas DataFrame and a list for all the latex expressions\n\n    Parameters\n    ----------\n    raw_data : list\n        A list that contains all the image information\n\n    Returns\n    ----------\n    df: DataFrame\n        A Pandas DataFrame for running the analysis\n    all_latex_lst: list\n        A list for all the tokens, used for creating the token distribution\n    \"\"\"\n    data = {}\n    data['latex'] = []\n    data['seq_len'] = []\n    data['font'] = []\n    data['image_ratio'] = []\n    data['image_width'] = []\n    data['image_height'] = []\n    all_latex_lst = []\n    for image in raw_data:\n        data['latex'].append(image['image_data']['full_latex_chars'])\n        data['seq_len'].append(len(image['image_data']['full_latex_chars']))\n        data['font'].append(image['font'])\n        data['image_ratio'].append(round(image['image_data']['width'] \/ image['image_data']['height'],1))\n        data['image_width'].append(image['image_data']['width'])\n        data['image_height'].append(image['image_data']['height'])\n        all_latex_lst = all_latex_lst + image['image_data']['full_latex_chars']\n    df = pd.DataFrame.from_dict(data)\n    return df, all_latex_lst","94b4ef5c":"# Load data into a Pandas DataFrame and store all the tokens into a list.\nwith open(file='\/kaggle\/input\/ocr-data\/batch_1\/JSON\/kaggle_data_1.json') as f:\n    raw_data = json.load(f)\ndf, all_latex_lst = create_data_frame(raw_data)","5adb981a":"df.columns","78cca954":"df.describe()","d6acae2b":"def plot_dist(df, field, bins, color, xlabel, ylabel, title):\n    \"\"\"\n    Plot an univariate distribution of observations\n    \n    Parameters\n    ----------\n    df : DataFrame\n        A Panadas Dataframe used for plotting the sequence length distribution and image ratio distribution\n    field : String\n        A string that represents what column you would like to use for the plots\n    bins : Int\n        Specification of hist bins\n    color : String\n        The Color for the plot\n    xlabel: String\n        The Name for the x-axis label\n    ylabel: String\n        The Name for the y-axis label\n    title: String\n        The Title for the plot\n    \"\"\"\n    sns.set(color_codes=True)\n    fig, ax = plt.subplots(figsize=(18,6))\n    sns.distplot(df[field], bins=bins, color=color, ax=ax)\n    ax.set_xlabel(xlabel, fontsize=13)\n    ax.set_ylabel(ylabel, fontsize=13)\n    ax.set_title(title, fontsize=20)\n    plt.show()","7f1eba81":"plot_dist(df=df, field='seq_len', bins=50, color='b', xlabel='Sequence Length', ylabel='Frequency', title='Sequence Length Distribution (10k Images)')","5713c309":"plot_dist(df=df, field='image_ratio', bins=10, color='r', xlabel='Image Ratio (Image Width \/ Image Height)', ylabel='Frequency', title='Image Ratio Distribution (10k Images)')","c9106202":"g = sns.jointplot(\"image_width\", \"image_height\", data=df, kind=\"kde\", space=0, color=\"r\")\ng.set_axis_labels(\"Image Width\", \"Image Height\")","e0138b77":"def create_count_df(df, field, index):\n    \"\"\"\n    Create a Group DataFrame by a Series of columns\n\n    Parameters\n    ----------\n    df : DataFrame\n        A Pandas DataFrame used for the groupby operation\n    filed: String\n        A string that used to determine the groups for the groupby\n    Index: String\n        A string that used to compute count of group\n\n    Returns\n    ----------\n    count_df: DataFrame\n        A Pandas DataFrame that represents the count for each group\n    \"\"\"\n    count=df.groupby(field)[index].count().sort_values(ascending=False)\n    count_df = count.to_frame().reset_index()\n    count_df.columns = [field, field + '_count']\n    return count_df\n\ndef plot_count_df(df, field, random_sample, color, rotation, xlabel, ylabel, title):\n    \"\"\"\n    Create a bar plot for the font distribution and token distribution\n    \n    Parameters\n    ----------\n    df : DataFrame\n        A Panadas Dataframe used for ploting the font distribution and token distribution\n    field : String\n        A string that represents what column you would like to use for the plot\n    random_sample : Boolean\n        A boolean to specify if we are going to take a random sample or not\n    color : String\n        The Color for the plot\n    rotation: Int\n        The rotation for the x-axis label\n    xlabel: String\n        The Name for the x-axis label\n    ylabel: String\n        The Name for the y-axis label\n    title: String\n        The Title for the plot\n    \"\"\"\n    fig, ax = plt.subplots(figsize=(18,6))\n    if random_sample:\n        df = df.sample(n=50, random_state=1)\n    ax.bar(df[field], df[field + '_count'], color=color, align='center',alpha=0.5)\n    ax.set_xticklabels(df[field],rotation=rotation, fontsize=13)\n    ax.set_xlabel(xlabel, fontsize=13)\n    ax.set_ylabel(ylabel, fontsize=13)\n    ax.set_title(title, fontsize=20)\n    plt.show()","7af09127":"font_count_df = create_count_df(df=df, field='font', index='latex')\nplot_count_df(df=font_count_df, field='font', random_sample=True, color='y', rotation=90, xlabel='Font Name', ylabel='Number of Images', title='Font Distribution (50 Random Fonts of 210 Total Fonts)')","c82ef1fb":"token_df = pd.DataFrame(all_latex_lst, columns =['token'])\ntoken_df['index']=token_df.index","fc2e56b2":"token_count_df = create_count_df(df=token_df, field='token', index='index')\nplot_count_df(df=token_count_df, field='token', random_sample=False, color='g', rotation=90, xlabel='Token', ylabel='Number of Tokens', title='Token Distribution (10k Images)')","a5fb5251":"# Aida Calculus Math Handwriting Recognition Dataset\n\n##  Exploratory Data Analysis and Starting Notebook\n\n---\n\n## Introduction\n\nThis notebook is designed to help you to understand the Aida Calculus math handwriting recognition dataset. The dataset consists of 100,000 images, and they have been randomly divided into 10 batches. This notebook runs analysis on one batch of the dataset, since each batch is nearly identical. Each image contains a photo of handwritten calculus math expression (specifically, expressions involving limits) written with a dark utensil on plain paper. All images are synthetically generated and are accompanied by ground truth math expressions, and bounding boxes and pixel-level masks per character.","3ed3477d":"## Load Data \n\nThe data is loaded as a Pandas DataFrame. The Pandas DataFrame contains all the information needed for the data explorary analysis, which includes information like LaTex expressions, sequence length, font, image ratio (image width\/image height), image width and image height.","fb7824d2":"## Helper-functions for plotting the font distribution and token distribution","c148c20c":"## A helper-function for loading the data into a Pandas DataFrame\n\nEach batch of the Aida Calculus dataset has exactly 10,000 images. We are going to load one bach of the dataset to run the analysis, since each batch is nearly identical.","672e390c":"We can use the Pandas built-in `columns` to get the column names in the created Pandas DataFrame.","5f64313d":"We can use the Pandas built-in `describe()` to generate the descriptive statistics of the Aida Calculus images.","8ce447fe":"## Token Distribution\nThe token distribution shows that the braces are the most common tokens. The braces are used to group the Latex expressions in areas where handwritten math does not need explicit parentheses (such as expressions within fractions, or expressions in exponents). \"\\lim_\" and \"\\to\" are also very (and equally) common, which is expected, since the dataset is based on Limits.","8c51b228":"## Imports","51875bde":"## Jointplot for the Image Width and Image Height\nAccording to the jointplot between image width and image height, most of the images have a height of 300 pixels and a width of 1000 pixels.","9a30c190":"## Font Distribution\nThe dataset has about 50 images for each font.  This relatively uniform distribution accurately reflects that.","b670e66a":"## A helper-function for plotting the sequence length distribution and image ratio distribution","aa9821a0":"## Image Ratio Distribution\nImage ratio is a ratio between image width and image height: the higher this number, the wider the image is relative to its height. About 70% of the images have an image ratio between 2 and 5.  This makes sense because math is often written horizontally.","b2ff1db9":"## Sequence Length Distribution\nThe majority of the math expressions have about 18 - 40 tokens. About 5% of the dataset has 30 tokens. The very short expressions (less than 10 tokens) and the very long expressions (more than 80 tokens) take only less than 0.1%."}}