{"cell_type":{"ad3f6ad7":"code","1168d36e":"code","6353c734":"code","b73d1163":"code","a2742101":"code","7b636d91":"code","7debff04":"code","8b67e261":"code","ce5267f0":"code","9dbc3553":"code","1af07d0e":"code","e83d72b4":"code","edd06ed9":"code","e1a3b28c":"markdown","80196ba9":"markdown","d20a815f":"markdown","973636a5":"markdown","95b264e3":"markdown","b5513173":"markdown"},"source":{"ad3f6ad7":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils.np_utils import to_categorical\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping","1168d36e":"treino = pd.read_csv('..\/input\/emnist\/emnist-balanced-train.csv')","6353c734":"x = np.array(treino.iloc[:,1:].values)\ny = np.array(treino.iloc[:,0].values)","b73d1163":"fig,axes = plt.subplots(3,5,figsize=(10,8))\nfor i,ax in enumerate(axes.flat):\n    ax.imshow(x[i].reshape([28,28]))","a2742101":"x = x\/255\n\ntreino_shape = treino.shape[0]\ntreino_height = 28\ntreino_width = 28\ntreino_size = treino_height*treino_width\n\nx = x.reshape(treino_shape, treino_height, treino_width, 1)","7b636d91":"classes = len(treino['45'].unique())","7debff04":"y = to_categorical(y, classes)","8b67e261":"x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=.15, stratify=y)\nprint(x_treino.shape, y_treino.shape)\nprint(x_teste.shape, y_teste.shape)","ce5267f0":"modelo = Sequential()\nmodelo.add(Conv2D(32, 3, input_shape=(28,28,1)))\nmodelo.add(MaxPool2D(2,2))\nmodelo.add(Flatten(input_shape=(28,28,1)))\nmodelo.add(Dense(512, activation='relu'))\nmodelo.add(Dense(128, activation='relu'))\nmodelo.add(Dense(classes, activation='softmax'))\nmodelo.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","9dbc3553":"parada = EarlyStopping(monitor='val_accuracy', min_delta=0, verbose=0, restore_best_weights=True, patience=3,\n                      mode='max')\nredutor = ReduceLROnPlateau(monitor='val_loss', patience=3, factor=0.2, mil_lr=0.0001)","1af07d0e":"aug = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,\n        rotation_range=3,  # Gira a imagem em 3 graus\n        zoom_range = 0.1, # Da um zoom na imagem de forma aleat\u00f3ria\n        width_shift_range=0.1,  # Move a imagem de forma aleat\u00f3ria horizontalmente\n        height_shift_range=0.1)  # Move a imagem de forma aleat\u00f3ria verticalmente\naug.fit(x_treino)","e83d72b4":"epochs = 100\nbatch_size = 64\n\n\nhistory = modelo.fit(aug.flow(x_treino, y_treino, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_teste, y_teste),\n                              verbose = 1, steps_per_epoch=x_treino.shape[0] \/\/ batch_size\n                              , callbacks=[redutor,parada])","edd06ed9":"fig, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].plot(history.history['accuracy'])\naxes[0].plot(history.history['val_accuracy'])\naxes[0].set_xlabel('Epochs')\naxes[0].set_ylabel('Acur\u00e1cia')\naxes[0].legend(['Acur\u00e1cia em Treino','Acur\u00e1cia em Teste'])\naxes[0].grid(True)\n\naxes[1].plot(history.history['loss'])\naxes[1].plot(history.history['val_loss'])\naxes[1].set_xlabel('Epochs')\naxes[1].set_ylabel('Erro')\naxes[1].legend(['Erro em Treino','Erro em Teste'])\naxes[1].grid(True)","e1a3b28c":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Callback<\/p>","80196ba9":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Number of Class<\/p>","d20a815f":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Model<\/p>","973636a5":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">EMNIST<\/p>","95b264e3":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Augmentation<\/p>","b5513173":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Normalize and Reshaping<\/p>"}}