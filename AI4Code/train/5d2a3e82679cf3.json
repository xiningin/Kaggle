{"cell_type":{"0e1c9f66":"code","e2b93282":"code","5050f5d0":"code","ed96283b":"code","eccb80a8":"code","5ed14d4b":"code","6f56e76b":"code","cd3d86a1":"code","8291f92d":"code","9ce36ba6":"code","76b39d56":"code","b5b560b8":"code","4a374129":"code","3110af10":"code","79472f5b":"code","fc86de2a":"code","37911c92":"code","ca38af3c":"code","027b2647":"code","e6919472":"code","eea2be75":"code","29e2e668":"code","faf552a0":"code","0b4dfda3":"code","4ab7f9bc":"code","62959c3a":"code","843e7d12":"code","a6fb2585":"code","6f422913":"code","1b87d693":"code","cdddee5c":"code","65b40440":"code","f71b3029":"code","03ef4737":"code","f2eb0d9c":"code","99cf67b8":"code","b633f8d6":"code","0c89cb65":"code","181a76b9":"code","f7c0d80d":"code","87136ff0":"code","e7a55363":"code","f2082e3f":"code","c7768ee2":"code","b9b06523":"code","ace74ff9":"code","ee9b7c1f":"code","df54d5f5":"code","05d0fa61":"code","9ab797f7":"code","1a3e7fbc":"code","92000b1d":"code","19cdf982":"code","dc92628e":"code","2e0cc412":"code","1842c3f6":"code","3fd575c3":"code","69f125d1":"code","a49a5262":"code","b41281db":"code","49d7d6af":"code","9e136275":"markdown","3269c2dd":"markdown","df44663f":"markdown","41144f01":"markdown","b840f716":"markdown","b77ed778":"markdown","d9470caa":"markdown","bda27bff":"markdown","fa78e1a7":"markdown","6e637e4c":"markdown","0be00efe":"markdown","d3ae8010":"markdown","4db8cc66":"markdown","f8eb30d8":"markdown","827039ae":"markdown","5c4fcc9d":"markdown","a0f8598a":"markdown","e7763e35":"markdown"},"source":{"0e1c9f66":"from warnings import filterwarnings\nfilterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nHitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf=Hitters.copy()\ndf.head()","e2b93282":"df.info()","5050f5d0":"df.isnull().sum()","ed96283b":"df.describe().T","eccb80a8":"import seaborn as sns\nsns.boxplot(x=df[\"Salary\"]);","5ed14d4b":"NAdf= df[df.isnull().any(axis=1)]\nNAdf.describe().T","6f56e76b":"notNAdf=df[df.notnull().all(axis=1)]\nnotNAdf.describe().T","cd3d86a1":"notNAdf.corr()","8291f92d":"print(\"New League= A\" ,notNAdf[notNAdf[\"NewLeague\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"New League= N\" ,notNAdf[notNAdf[\"NewLeague\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= A\" ,notNAdf[notNAdf[\"League\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= N\" ,notNAdf[notNAdf[\"League\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= E\" ,notNAdf[notNAdf[\"Division\"]==\"E\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= W\" ,notNAdf[notNAdf[\"Division\"]==\"W\"].agg({\"Salary\":\"mean\"}))","9ce36ba6":"df.head(2)","76b39d56":"df.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'E'),\"Salary\"]=624.27\ndf.head(2)","b5b560b8":"df.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'W'),\"Salary\"]=450.87\ndf.isnull().sum().sum()","4a374129":"df[df[\"Salary\"]<0]    ","3110af10":"dff = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndff.head()","79472f5b":"import numpy as np\nfrom sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.05)\nclf.fit_predict(dff)\ndff_scores = clf.negative_outlier_factor_\nnp.sort(dff_scores)[0:20]","fc86de2a":"sns.boxplot(x=dff_scores);","37911c92":"threshold = np.sort(dff_scores)[13]\ndff.loc[dff_scores < threshold]","ca38af3c":"dff.loc[(dff_scores < threshold)&(dff[\"Salary\"]>1500)]","027b2647":"df[\"Salary\"].describe([0.75,0.90,0.95,0.99]).T","e6919472":"dff.loc[(dff_scores < threshold)&(dff[\"Salary\"]>1500),\"Salary\"]=1967\ndff.loc[dff_scores < threshold]","eea2be75":"dff.loc[dff_scores < threshold]","29e2e668":"df1=dff.loc[df1_scores > esik_deger]","faf552a0":"df1.shape","0b4dfda3":"import seaborn as sns\nsns.pairplot(df1)","4ab7f9bc":"plt.figure(figsize=(12,10))\ncor = df1.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","62959c3a":"CHits_cor=abs(cor[\"CHits\"])\nCHits_relevant_features = CHits_cor[CHits_cor>0.9]\nCHits_relevant_features","843e7d12":"import matplotlib.pyplot as plt\nplt.scatter(df[\"CHits\"],df[\"CAtBat\"], alpha=0.3,\n            cmap='viridis');","a6fb2585":"df1=df1.drop(\"CHits\", axis=1)\ndf1=df1.drop(\"CAtBat\", axis=1)","6f422913":"plt.figure(figsize=(12,10))\ncor = df1.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","1b87d693":"df1=df1.drop(\"CRBI\", axis=1)\ndf1=df1.drop(\"CWalks\", axis=1)","cdddee5c":"plt.figure(figsize=(12,10))\ncor = df1.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","65b40440":"df1.describe().T","f71b3029":"df1.shape","03ef4737":"from sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\nSS=StandardScaler()\ncol=df1.columns\ndf2=SS.fit_transform(df1)\ndf3=pd.DataFrame(df2, columns=col)\ndf3.head(2)\n\n\n","f2eb0d9c":"df6=preprocessing.normalize(df1, axis=0)\ncol=df1.columns\ndf7=pd.DataFrame(df6, columns=col)\ndf7.head(2)","99cf67b8":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import LinearRegression","b633f8d6":"y=df1[\"Salary\"]\nX=df1.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))\n","0c89cb65":"print(\"intercept(b0):\",reg_model.intercept_)\nprint(\"coefficients(b1,b2..):\",\"\\n\",reg_model.coef_)","181a76b9":"reg_model.predict(X)[0:10]","f7c0d80d":"y.head(10)","87136ff0":"df1[y<0]","e7a55363":"# df3 (Standar Scaler)\n\ny=df3[\"Salary\"]\nX=df3.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f2082e3f":"#df7 (Normalize)\n\ny=df7[\"Salary\"]\nX=df7.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))\n","c7768ee2":"y=df1[\"Salary\"]\nX=df1.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","b9b06523":"ridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","ace74ff9":"alphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nridge_cv.alpha_","ee9b7c1f":"ridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","df54d5f5":"y=df1[\"Salary\"]\nX=df1.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                   random_state=46)\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.linear_model import RidgeCV, LassoCV","05d0fa61":"lasso_model = Lasso().fit(X_train, y_train)\ny_pred=lasso_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","9ab797f7":"alphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nlasso_cv_model = LassoCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\n","1a3e7fbc":"print(lasso_cv_model.alpha_)","92000b1d":"lasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","19cdf982":"from sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV\n\n\ny=df1[\"Salary\"]\nX=df1.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                   random_state=46)","dc92628e":"enet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","2e0cc412":"alphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nenet_cv_model = ElasticNetCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\n","1842c3f6":"enet_cv_model.alpha_","3fd575c3":"enet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","69f125d1":"enet_params = {\"l1_ratio\": [0,0.01,0.05,0.1,0.2,0.4,0.5,0.6,0.8,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1,2,5,7,10,13,20,45,99,100]}\nenet_model = ElasticNet().fit(X, y)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\n","a49a5262":"gs_cv_enet.best_params_","b41281db":"enet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","49d7d6af":"# Note for me\n\ndff=dff.drop(\"CRBI\", axis=1)\ndff=dff.drop(\"CWalks\", axis=1)\ndff=dff.drop(\"CHits\", axis=1)\ndff=dff.drop(\"CAtBat\", axis=1)\ndff=dff.loc[df1_scores > esik_deger]\ny=dff[\"Salary\"]\nX=dff.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","9e136275":"Standard Scaler(df3)","3269c2dd":"#  4) DETECT THE OUTLIERS","df44663f":"# RIDGE REGRESSION","41144f01":"## I filled NA Values","b840f716":"# There isn't strong correlation btw any x variables and Y.","b77ed778":"A data frame with 322 observations of major league players on the following 20 variables.\n\n- AtBat: Number of times at bat in 1986\n- Hits: Number of hits in 1986\n- HmRun: Number of home runs in 1986\n- Runs: Number of runs in 1986\n- RBI: Number of runs batted in in 1986\n- Walks: Number of walks in 1986\n- Years: Number of years in the major leagues\n- CAtBat: Number of times at bat during his career\n- CHits: Number of hits during his career\n- CHmRun: Number of home runs during his career\n- CRuns: Number of runs during his career\n- CRBI: Number of runs batted in during his career\n- CWalks:Number of walks during his career\n- League: A factor with levels A and N indicating player's league at the end of 1986\n- Division: A factor with levels E and W indicating player's division at the end of 1986\n- PutOuts: Number of put outs in 1986\n- Assists: Number of assists in 1986\n- Errors: Number of errors in 1986\n- Salary: 1987 annual salary on opening day in thousands of dollars\n- NewLeague: A factor with levels A and N indicating player's league at the beginning of 1987\n\n","d9470caa":"# 2) DESCRIBE AND TRY TO FILL NA VALUES","bda27bff":"# LASSO REGRESSION","fa78e1a7":"# 1) IMPORT THE DATA","6e637e4c":"# Data Description\nMajor League Baseball Data from the 1986 and 1987 seasons.\n","0be00efe":"# PREPROCESSING IS FINISHED HERE.","d3ae8010":"# CLASSIC REGRESSION","4db8cc66":"# ELASTIC NET REGRESSION","f8eb30d8":"# I wanted to learn dtypes.\n\n-  Then i saw that there are missing values in Salary variable.","827039ae":"# I will fill NA values according to these division levels salary means.\n- It is clear that League and New League levels aren't decisive in \"Salary\"\n- It is obvious that if the player's division level  is E, the salary is higher and if the player's division level  is W, the salary is less. \n","5c4fcc9d":"# 3) ONE HOT ENCODING","a0f8598a":"- In real life, we know that there are huge differences btw baseball players' salaries.\n- Therefore, i won't evaulate the salaries which are more than 1500 as outliers.  ","e7763e35":"Normalize(df7)"}}