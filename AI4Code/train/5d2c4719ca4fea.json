{"cell_type":{"c28e77be":"code","348d5e43":"code","388e1e35":"code","a8daa8ee":"code","7eb61211":"code","0bf854c4":"code","6f648427":"code","75cddebb":"code","f55e8b84":"code","d7b3f664":"markdown","e544e148":"markdown","b2d6c4e4":"markdown","e4bb15ea":"markdown","39080a8b":"markdown"},"source":{"c28e77be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","348d5e43":"# libraries\nfrom keras.models import Sequential \nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nimport matplotlib.pyplot as plt\nfrom glob import glob","388e1e35":"train_path = \"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/\"\ntest_path = \"\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test\"","a8daa8ee":"img = load_img(train_path + \"buildings\/10032.jpg\")\nplt.imshow(img)\nplt.axis(\"off\")\nplt.show()","7eb61211":"x = img_to_array(img)\nprint(x.shape)","0bf854c4":"className = glob(train_path + '\/*' )\nnumberOfClass = len(className)\nprint(\"NumberOfClasses: \",numberOfClass)","6f648427":"model = Sequential()\nmodel.add(Conv2D(64,(3,3),input_shape = x.shape))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3)))  \nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(numberOfClass)) # output\nmodel.add(Activation(\"softmax\"))\n\nmodel.compile(loss = \"categorical_crossentropy\",\n              optimizer = \"rmsprop\",\n              metrics = [\"accuracy\"])\n\nbatch_size = 32\n","75cddebb":"train_datagen = ImageDataGenerator(rescale= 1.\/255,\n                   shear_range = 0.3,\n                   horizontal_flip=True,\n                   zoom_range = 0.3)\n\ntest_datagen = ImageDataGenerator(rescale= 1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n        train_path, \n        target_size=x.shape[:2],\n        batch_size = batch_size,\n        color_mode= \"rgb\",\n        class_mode= \"categorical\")\n\ntest_generator = test_datagen.flow_from_directory(\n        test_path, \n        target_size=x.shape[:2],\n        batch_size = batch_size,\n        color_mode= \"rgb\",\n        class_mode= \"categorical\")\n\nhist = model.fit_generator(\n        generator = train_generator,\n        steps_per_epoch = 1400 \/\/ batch_size,\n        epochs=30,\n        validation_data = test_generator,\n        validation_steps = 600 \/\/ batch_size)","f55e8b84":"plt.figure(figsize=[10,6])\nplt.plot(hist.history[\"accuracy\"], label = \"Train acc\")\nplt.plot(hist.history[\"val_accuracy\"], label = \"Validation acc\")\nplt.legend()\nplt.show()","d7b3f664":"- This kernel is about classifying six image scenes (street,glacier,mountain,sea,buildings and forest)","e544e148":"> **Number of Classes**","b2d6c4e4":"# CNN Model\n\n                  Input --> ConvolutionL Layer--> MaxPooling --> Full Connected --> Output\n                             - Relu                                  - Flatten\n                                                                     - DroupOut\n                                                                     - Softmax","e4bb15ea":"# Image Scene Classification - CNN","39080a8b":"**Load the Data**"}}