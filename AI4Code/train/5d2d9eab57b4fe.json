{"cell_type":{"6e918999":"code","7647cd88":"code","d031e598":"code","6ed30531":"code","9353b4f0":"code","a245ffd4":"code","f3d5f46b":"code","556fec5c":"code","852b2bd5":"code","02ec8147":"code","6228baab":"code","9ea71f67":"code","8f54ff4e":"code","e44de082":"code","3a8cc6ed":"code","8aad4614":"code","524fbc25":"code","5e9f5ec9":"code","eb50a32f":"code","c232ca1f":"code","4eddf347":"code","b527024d":"code","3cae3ee1":"code","d1b8a04f":"markdown","c9b07a11":"markdown","aac20f17":"markdown","0533576c":"markdown","9aea3201":"markdown","9e2368be":"markdown","f979ea39":"markdown","cffc0d72":"markdown","4856c5c5":"markdown","ff9db6be":"markdown"},"source":{"6e918999":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7647cd88":"#read the data\ndata = pd.read_csv('..\/input\/train_V2.csv')","d031e598":"data.shape","6ed30531":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","9353b4f0":"data_sample = data.sample(frac=0.1)\ndata_sample.head()","a245ffd4":"data_sample.matchType.unique()","f3d5f46b":"def merge_matchType(x):\n    if x in {'normal-squad-fpp', 'crashfpp', 'crashtpp', 'normal-duo-fpp',\n       'flarefpp', 'normal-solo-fpp', 'flaretpp', 'normal-duo',\n       'normal-squad', 'normal-solo'}:\n        return 'others'\n    else:\n        return x","556fec5c":"data_sample['matchType'] = data_sample.matchType.apply(merge_matchType)\n\ndata_sample.matchType.unique()","852b2bd5":"data_sample_dumm = pd.get_dummies(data_sample, columns=['matchType'])\ndata_sample_dumm.head()","02ec8147":"data_sample_dumm = data_sample_dumm.drop('matchType_others', axis=1)","6228baab":"data_sample_dumm.columns","9ea71f67":"data_sample = data_sample_dumm.loc[:,['Id', 'groupId', 'matchId', 'assists', 'boosts', 'damageDealt', 'DBNOs',\n       'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n       'killStreaks', 'longestKill', 'matchDuration', 'maxPlace', 'numGroups',\n       'rankPoints', 'revives', 'rideDistance', 'roadKills', 'swimDistance',\n       'teamKills', 'vehicleDestroys', 'walkDistance', 'weaponsAcquired',\n       'winPoints', 'matchType_duo', 'matchType_duo-fpp',\n       'matchType_solo', 'matchType_solo-fpp', 'matchType_squad',\n       'matchType_squad-fpp', 'winPlacePerc']]","8f54ff4e":"print(data_sample.shape)\ndata_sample.head()","e44de082":"# split data into X and y\nX = data_sample.iloc[:,3:33]\nY = data_sample.iloc[:,33]\nX.head()","3a8cc6ed":"# split data into train and test sets\nseed = 7\ntest_size = 0.33\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)","8aad4614":"model = XGBRegressor()\nmodel.fit(X_train, y_train, eval_metric='mae')","524fbc25":"# make predictions for test data\ny_pred = model.predict(X_test)","5e9f5ec9":"y_pred","eb50a32f":"# evaluate predictions\nfrom sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(y_test, y_pred)\nprint(\"MAE: {}\".format(mae))","c232ca1f":"from xgboost import plot_importance\n\nplot_importance(model)","4eddf347":"from xgboost import to_graphviz\n\nto_graphviz(model, num_trees=1)","b527024d":"pd.Series(y_pred).plot(kind='hist',bins=10)","3cae3ee1":"pd.Series(y_test).plot(kind='hist', bins=10)","d1b8a04f":"For this demonstration, I am going with the XGBRegressor as the output is numeric. The evaluation metric is Mean Absolute Error.","c9b07a11":"Below is an example tree from the XGBoost model.","aac20f17":"**Introduction**\n\nHi, I will trying to implement a XGBoost model in this kernel. This is my very first time implementing this. \nThe data is from the PUBG competition.\n\nThe purpose of this kernel is sharing my learning and also a little demonstration by a beginner for beginner.","0533576c":"The data was split into 67% train, 33% test set.","9aea3201":"I have decided to group a few of the matchType into others.\n'normal-squad-fpp', 'crashfpp', 'crashtpp', 'normal-duo-fpp', 'flarefpp', 'normal-solo-fpp', 'flaretpp', 'normal-duo', 'normal-squad', 'normal-solo' are converted into others.","9e2368be":"**Conclusion**\n\nHope you have learnt something from this implementation of the XGBoost model. The Mean Absolute Error from my model is pretty high as compared to the other submissions in the competition.","f979ea39":"I have also plot the histogram of my prediction and the actual winPlacePerc. Both of them looks pretty different.","cffc0d72":"I have also plot the feature importance. killPlace is the most important feature, followed by walkDistance and kills","4856c5c5":"For this first trial, I will only be using 10% of the data provided.","ff9db6be":"In order to use the XGBoost algorithm, the categorical variables need to be converted into numerical. I have thus generated dummy variables for the matchType variable. matchType_others was dropped from the dataframe."}}