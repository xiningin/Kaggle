{"cell_type":{"e0c640eb":"code","7a39b021":"code","4fdf9598":"code","be19d096":"code","300e62e8":"code","62b59502":"code","58b138db":"code","f6a9d418":"code","36d7326f":"code","f1d5003c":"code","b47ac95f":"code","12e4f12e":"code","4efd1c4c":"code","41ee5d65":"code","62bc5bf4":"code","f6ff7183":"code","0f39cdf2":"code","322bdf73":"code","f8a2964b":"code","388967d0":"code","ab708dcc":"code","bfe873c2":"code","48efdb7c":"code","4f3f5521":"code","6b6c95f6":"code","3a42e1a0":"code","43c32fd4":"code","1fee7120":"code","9bc67345":"code","fa7b0198":"code","3b61de15":"code","b82a90fd":"code","0db49e4b":"code","3d775460":"code","40ebb27a":"code","c323fe75":"code","8aa4f33b":"code","f6a8030d":"code","2cdeb4fb":"code","491ed859":"markdown","d4f95cdf":"markdown","edf4471f":"markdown","303c2b18":"markdown","727d4b0e":"markdown","949f2645":"markdown","2e0bb185":"markdown","0404912d":"markdown","969e1911":"markdown","7ea3c9a2":"markdown","e9baba28":"markdown","5b741cfb":"markdown","e3fabcc2":"markdown","117053e8":"markdown","eaa6e054":"markdown","28acab9a":"markdown","368f90c2":"markdown","f75a4657":"markdown","1ec0fdd9":"markdown","186acca9":"markdown","bf2b2956":"markdown","481273f2":"markdown","d97cffe9":"markdown","86c6871c":"markdown","bf23e956":"markdown"},"source":{"e0c640eb":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.ensemble import RandomForestClassifier\n","7a39b021":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df= pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ncombine = [train_df, test_df]\ntest_ids = test_df[\"PassengerId\"]","4fdf9598":"print(train_df.columns.values)","be19d096":"# preview the data\ntrain_df.head()","300e62e8":"train_df.tail()","62b59502":"train_df.describe()","58b138db":"train_df.describe(include=['O'])","f6a9d418":"train_df.describe(include=['O'])","36d7326f":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f1d5003c":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b47ac95f":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","12e4f12e":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","4efd1c4c":"print(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n\n\ntrain_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]\n\n\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape","41ee5d65":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])","62bc5bf4":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n     'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","f6ff7183":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()","0f39cdf2":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape","322bdf73":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","f8a2964b":"guess_ages = np.zeros((2,3))\nguess_ages","388967d0":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","ab708dcc":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True) ","bfe873c2":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()","48efdb7c":"train_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()","4f3f5521":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","6b6c95f6":"for dataset in combine:\n    dataset['Alone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'Alone'] = 1\n\ntrain_df[['Alone', 'Survived']].groupby(['Alone'], as_index=False).mean()","3a42e1a0":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()","43c32fd4":"for dataset in combine:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)","1fee7120":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","9bc67345":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","fa7b0198":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","3b61de15":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","b82a90fd":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","0db49e4b":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)","3d775460":"test_df.head(10)","40ebb27a":"X_train = train_df.drop(\"Survived\", axis=1)\ny_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, y_train.shape, X_test.shape","c323fe75":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\ny_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nacc_random_forest","8aa4f33b":"submission_preds = random_forest.predict(X_test)","f6a8030d":"df=pd.DataFrame({\"PassengerId\":test_ids.values,\n                \"Survived\": submission_preds,})","2cdeb4fb":"df.to_csv(\"Submission.csv\", index=False)","491ed859":"### Examining the dataset to see what features are available.","d4f95cdf":"#### Drop Parch, SibSp, and FamilySize features in favor of Alone.","edf4471f":"#### Round off the fare to two decimals as it represents currency","303c2b18":"#### Create Age bands and determine correlations with Survived.","727d4b0e":"#### we want to drop the Cabin and Ticket features.","949f2645":"#### We can replace many titles with a common name or classify them as \"Rare\"","2e0bb185":"#### Converting categorical feature to numeric\n#### converting the EmbarkedFill feature by creating a new numeric Port feature.","0404912d":"### Model, predict and solve\n#### Random Forest is a well-known supervised machine learning algorithm. In machine learning, it can be used for both classification and regression. It is based on ensemble learning, which is the process of integrating numerous classifiers to solve a complex problem and improve the model's performance.","969e1911":"#### Converting a categorical feature\n#### Starting by converting Sex feature to a new feature called Gender where female=1 and male=0.","7ea3c9a2":"#### Ticket is a mix of numeric and alphanumeric. \n#### Cabin is alphanumeric.\n#### As there are several ways to express a name, the name feature may contain errors or typos.","e9baba28":"#### Creating new feature for FamilySize = Parch + SibSp. to drop Parch and SibSp from our datasets.","5b741cfb":"#### Completing a numerical continuous feature\n#### Empty array to contain guessed Age values based on Pclass x Gender combinations.","e3fabcc2":"#### Convert the Fare feature to ordinal values based on the FareBand.","117053e8":"##### Categorical: Survived, Sex, and Embarked. Ordinal: Pclass.\n\n##### Continous: Age, Fare. Discrete: SibSp, Parch.","eaa6e054":"#### Creating another feature called Alone.","28acab9a":"## Aquiring the data\n### Combining these datasets in order to perform certain operations on both datasets at the same time.","368f90c2":"#### Replace Age with ordinals based on these bands.","f75a4657":"#### drop the Name feature from training and testing datasets and PassengerId feature in the training dataset.","1ec0fdd9":"## Titanic - Machine Learning from Disaster","186acca9":"#### Iterating over Sex (0 or 1) and Pclass (1, 2, 3) to calculate guessed values of Age for the six combinations.","bf2b2956":"#### Cabin, Age, Embarked features contain a number of null values.\n#### Cabin,A ge are incomplete in case of test dataset.\n#### 7 features are integer or floats. 6 in case of test dataset.\n#### 5 features are strings (object).","481273f2":"### Completing a categorical feature\n#### Embarked feature takes S, Q, C values based on port of embarkation.\n#### The Training dataset has two missing values. We can simply fill these with the most common occurance.","d97cffe9":"#### Creating new feature extracting from existing","86c6871c":"#### Create an artificial feature combining Pclass and Age.","bf23e956":"#### converting the categorical titles to ordinal"}}