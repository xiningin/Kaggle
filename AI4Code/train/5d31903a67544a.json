{"cell_type":{"a425cdff":"code","8274ed8d":"code","8e2eda43":"code","d4470bf3":"code","ad59ad51":"code","d8f6302c":"code","db0db03b":"code","c6968b63":"code","e412b2e5":"code","480e2fd1":"code","5ace8de4":"code","3f2f4098":"code","356da2ac":"code","493fb3de":"code","8475fead":"code","9925afbd":"code","4654635d":"code","aa2e78e3":"code","a77d9e4a":"code","ed015299":"code","180a4333":"code","eadcaf8c":"code","e3ae1f39":"code","feaceebf":"code","dad05165":"code","8e8e3fc0":"code","b9e97d20":"code","9f1f763b":"code","376403a1":"code","e875785a":"code","814c33f1":"code","cecb93dd":"code","57e2db65":"code","1353b271":"code","b7243fde":"code","d717b706":"code","396fa9e5":"code","45e7afb6":"code","2ea5eb52":"code","63c90feb":"code","1f72fe45":"code","2e69ef0c":"code","3f5050fc":"code","7e4259a2":"code","a94edb12":"code","de519153":"code","3348c9dc":"code","e84c7193":"code","544125f5":"code","21f6f6ea":"code","56792913":"code","99607634":"code","a203b0c5":"markdown","408c5965":"markdown","91668ddc":"markdown","a513616d":"markdown","3ea82cdf":"markdown","48def8ef":"markdown","d15bb799":"markdown","613f178b":"markdown","146efccc":"markdown","2258aa55":"markdown","4ed4ba52":"markdown","92b00ece":"markdown","99b796b6":"markdown","42752025":"markdown","5088ae32":"markdown","e0fd5e2a":"markdown","8d5f19a4":"markdown","1a861b55":"markdown","1879fd7d":"markdown","91dc6888":"markdown"},"source":{"a425cdff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8274ed8d":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","8e2eda43":"train_data.head()","d4470bf3":"test_data.head()","ad59ad51":"print(train_data.shape)\nprint(test_data.shape)","d8f6302c":"from matplotlib import pyplot as plt\nimport seaborn as sns","db0db03b":"sex_pivot = train_data.pivot_table(index='Sex', values=\"Survived\")\nsex_pivot.plot.bar()\nplt.show()","c6968b63":"class_pivot = train_data.pivot_table(index='Pclass', values=\"Survived\")\nclass_pivot.plot.bar()\nplt.show()","e412b2e5":"train_data['Age'].describe()","480e2fd1":"survived = train_data[train_data[\"Survived\"]==1]\nsurvived.head()","5ace8de4":"died = train_data[train_data[\"Survived\"]==0]\ndied.head()","3f2f4098":"survived[\"Age\"].plot.hist(alpha=0.75, color='green', bins=50)\ndied[\"Age\"].plot.hist(alpha=0.25, color='red', bins=50)\nplt.legend(['Survived','Died'])\nplt.show()","356da2ac":"sns.scatterplot(x=train_data['Survived'], y=train_data['Embarked'])","493fb3de":"sns.scatterplot(x=train_data['Age'], y=train_data['Embarked'])","8475fead":"sns.scatterplot(x=train_data['Pclass'], y=train_data['Embarked'])","9925afbd":"sns.barplot(x=train_data['Age'], y=train_data['Sex'])","4654635d":"train_data = train_data.drop(['PassengerId'], axis = 1)","aa2e78e3":"train_data = train_data.drop(['Name', 'Ticket'], axis = 1)","a77d9e4a":"train_data.head()","ed015299":"train_data.shape","180a4333":"test_data = test_data.drop(['PassengerId', 'Name', 'Ticket'], axis = 1)","eadcaf8c":"test_data.head()","e3ae1f39":"test_data.shape","feaceebf":"train_data.isnull().sum()","dad05165":"train_data = train_data.drop(['Cabin'], axis = 1)\ntest_data = test_data.drop(['Cabin'], axis = 1)","8e8e3fc0":"train_data = train_data.drop(['Embarked'], axis = 1)\n","b9e97d20":"train_data.shape","9f1f763b":"y = train_data['Survived']\ny","376403a1":"X = train_data.drop(['Survived'], axis=1)\nX.head()","e875785a":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n","814c33f1":"X_train.head()","cecb93dd":"X_valid.head()","57e2db65":"s = (X_train.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","1353b271":"from sklearn.preprocessing import LabelEncoder\n\n# Make copy to avoid changing original data \nlabel_X_train = X_train.copy()\nlabel_X_valid = X_valid.copy()\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_X_train[col] = label_encoder.fit_transform(X_train[col])\n    label_X_valid[col] = label_encoder.transform(X_valid[col])\n\n","b7243fde":"label_X_train.head()","d717b706":"X_train.isnull().sum()\n","396fa9e5":"X_valid.isnull().sum()","45e7afb6":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(label_X_train))\nimputed_X_valid = pd.DataFrame(my_imputer.transform(label_X_valid))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\n","2ea5eb52":"imputed_X_train.head()","63c90feb":"imputed_X_train.isnull().sum()","1f72fe45":"from sklearn.linear_model import LogisticRegression # Logistic Regression\nfrom sklearn.metrics import accuracy_score  #for accuracy_score\nfrom sklearn.metrics import mean_absolute_error #evaluate the erroe\n\n\nmodel = LogisticRegression()\nmodel.fit(imputed_X_train,y_train)\nprediction_lr=model.predict(imputed_X_valid)\nprint(accuracy_score(y_valid, prediction_lr))\nprint(mean_absolute_error(y_valid, prediction_lr))","2e69ef0c":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=1000)\nmodel.fit(imputed_X_train,y_train)\nprediction_rf=model.predict(imputed_X_valid)\n\nprint(accuracy_score(y_valid, prediction_rf))\nprint(mean_absolute_error(y_valid, prediction_rf))","3f5050fc":"from sklearn.svm import SVC, LinearSVC\n\nmodel = SVC()\nmodel.fit(imputed_X_train,y_train)\nprediction_svm=model.predict(imputed_X_valid)\nprint(accuracy_score(y_valid, prediction_svm))\nprint(mean_absolute_error(y_valid, prediction_svm))","7e4259a2":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nmodel= LinearDiscriminantAnalysis()\nmodel.fit(imputed_X_train,y_train)\nprediction_lda=model.predict(imputed_X_valid)\nprint(accuracy_score(y_valid, prediction_lda))\nprint(mean_absolute_error(y_valid, prediction_lda))","a94edb12":"categorical_cols = [cname for cname in X_train.columns if X_train[cname].nunique() < 10 and \n                        X_train[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train.columns if X_train[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train[my_cols].copy()\nX_valid = X_valid[my_cols].copy()","de519153":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer()\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer()),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","3348c9dc":"model = LogisticRegression()\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline.fit(imputed_X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(imputed_X_valid)\n\n# Evaluate the model\nscore = accuracy_score(y_valid, preds)\nprint('MAE:', score)\nprint(mean_absolute_error(y_valid, prediction_lda))","e84c7193":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nmy_model.fit(imputed_X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(imputed_X_valid, y_valid)], \n             verbose=False)","544125f5":"# predictions = my_model.predict(imputed_X_valid)\n# print(accuracy_score(predictions, y_valid))","21f6f6ea":"train_data.shape","56792913":"test_data.head()","99607634":"# test_data_sub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\n# output = pd.DataFrame({'Id': test_data_sub.index, 'Survived': prediction_rf})\n# output.to_csv('submission.csv', index=False)\n# print('done!')","a203b0c5":"# show the train and test data","408c5965":"# step 5 \n# Handing the object columns","91668ddc":"### show the Age of Passengers","a513616d":"# step 6 \n# Handing The Missnig Value (NaN)","3ea82cdf":"### show the relationship between the Sex of passengers Age column","48def8ef":"### show the relationship between the Pcalss columns and their impact on the Survived column","d15bb799":"# third model\n# support vector machine","613f178b":"# first model\n# Logistic Regression","146efccc":"# step 2\n# vizualizations","2258aa55":"# step 1\n# Read the data\n","4ed4ba52":"### show the impact of Embarked column with others","92b00ece":"# with pipelines\n","99b796b6":"# step 7\n# Applying differnt model into train-valid data and get the score of the best model","42752025":"# step 4\n# Break train and validation set from training data\n","5088ae32":"# show the shape of data","e0fd5e2a":"# fourth model\n# LinearDiscriminantAnalysis\n","8d5f19a4":"### show the relationship between the Sex of passengers and their impact on the Survived column","1a861b55":"# step 3 \n# Delete unnecessary columns","1879fd7d":"# second model\n# RandomForestClassifier\n","91dc6888":"### show the relationship between the Age of passengers and their impact on the Survived column"}}