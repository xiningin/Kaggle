{"cell_type":{"9c9ad0e1":"code","3447937a":"code","570e1a53":"code","3957669e":"code","a7c42a07":"code","7150f7a7":"code","d7edef06":"code","b1ac207b":"markdown","b1f48089":"markdown","446cb552":"markdown","968b0d3a":"markdown","2980ed28":"markdown","60ac4df2":"markdown","d719edaa":"markdown"},"source":{"9c9ad0e1":"%matplotlib inline\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport re #search in strings.\n\nimport plotly.plotly as py\nimport cufflinks as cf\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nfrom wordcloud import WordCloud","3447937a":"input_dir = '..\/input\/cityofla\/CityofLA\/Job Bulletins\/'\n\ndef getListOfFiles(dirName):\n# create a list of file and sub directories \n# names in the given directory \n    listOfFile = os.listdir(dirName)\n    allFiles = list()\n    # Iterate over all the entries\n    for entry in listOfFile:\n    # Create full path\n        fullPath = os.path.join(dirName, entry)\n        # If entry is a directory then get the list of files in this directory \n        if os.path.isdir(fullPath):\n            allFiles = allFiles + getListOfFiles(fullPath)\n        else:\n            allFiles.append(fullPath)\n    return allFiles\nlistOfFiles = getListOfFiles(input_dir)\ndf_bulletins = pd.DataFrame(listOfFiles, columns = ['job_position'])","570e1a53":"# Clean up of the job_position name\ndf_positions = pd.DataFrame()\ndf_positions['job_position'] = (df_bulletins['job_position']\n                                .str.replace(input_dir, '', regex=False)\n                                .str.replace('.txt', '', regex=False)\n                                .str.replace('\\d+', '')\n                                .str.replace(r\"\\s+\\(.*\\)\",\"\")\n                                .str.replace(r\"REV\",\"\"))\n\n#Remove the numbers\ndf_positions['class_code'] = (df_bulletins['job_position']\n                              .str.replace(input_dir, '', regex=False)\n                              .str.replace('.txt', '', regex=False)\n                              .str.extract('(\\d+)'))\n\ndisplay(df_positions.head())\n# Add the Text fields of Salary, Duties and Minimum REQ\n","3957669e":"#Convert the txt files to a table:\nimport glob\npath = input_dir # use your path\nall_files = glob.glob(path + \"\/*.txt\")\nli = []\n\nfor filename in all_files:\n    with open (filename, \"r\",errors='replace') as myfile:\n        data=pd.DataFrame(myfile.readlines())\n        #df = pd.read_csv(filename, header=0,error_bad_lines=False, encoding='latin-1')\n    li.append(data)\nframe = pd.concat(li, axis=1, ignore_index=True)\n#pd.read_csv(listOfFiles,header = None)\nframe = frame.replace('\\n','', regex=True)\n","a7c42a07":"# Here the loop should start, for each text file do:\ndef getString(col_i, frame):\n    try:\n        filter = frame[col_i] != \"\"\n        bulletin = frame[col_i][filter]\n        #display(salary)\n        isal = min(bulletin[bulletin.str.contains('SALARY',na=False)].index.values) #take the sum to convert the array to an int...TO CHANGE\n        inot = min(bulletin[bulletin.str.contains('NOTES',na=False)].index.values) # NOTES\n        idut = min(bulletin[bulletin.str.contains('DUTIES',na=False)].index.values) # DUTIES\n        ireq = min(bulletin[bulletin.str.contains('REQUIREMENT',na=False)].index.values) #REQUIREMENTS\n        ipro = min(bulletin[bulletin.str.contains('PROCESS',na=False)].index.values) # PROCESS NOTES\n\n        #isal = sum(bulletin.loc[bulletin == 'ANNUAL SALARY'].index.values) #take the sum to convert the array to an int...TO CHANGE\n        #inot = sum(bulletin.loc[bulletin == 'NOTES:'].index.values) # NOTES\n        #idut = sum(bulletin.loc[bulletin == 'DUTIES'].index.values) # DUTIES\n        #ireq = sum(bulletin.loc[bulletin == '(.*)REQUIREMENTS(.*)'].index.values) #REQUIREMENTS\n        #ipro = sum(bulletin.loc[bulletin == '(.*)PROCESS(.*)'].index.values) # PROCESS NOTES\n\n        icode = min(bulletin[bulletin.str.contains('Class Code',na=False)].index.values)\n        class_code = sum(bulletin.str.extract('(\\d+)').iloc[icode].dropna().astype('int'))\n        salary = (bulletin.loc[isal+1:inot-1]).to_string()\n        duties = (bulletin.loc[idut+1:ireq-1]).to_string()\n        requirements = (bulletin.loc[ireq+1:ipro-1]).to_string()\n        return (class_code, salary, duties, requirements)\n    except:\n        return (np.nan,np.nan,np.nan,np.nan)\n    \njobsections = pd.DataFrame()\n#getString(0,bulletin)\nfor col_i in range(frame.shape[1]):\n    #print(col_i)\n    #print(list(getString(col_i,frame)))\n    prop = getString(col_i,frame)\n    prop = pd.DataFrame(list(prop)).T\n    jobsections = jobsections.append(prop)","7150f7a7":"jobsections.head()","d7edef06":"jobsections.columns = ['class_code','salary','duties','requirements']\njobsections['class_code'] = pd.to_numeric(jobsections['class_code'],downcast='integer')\ndf_positions['class_code'] = pd.to_numeric(df_positions['class_code'], downcast='integer')\n#df_positions['class_code']\ndf_jobs = df_positions.merge(jobsections, left_on='class_code',right_on='class_code', how='outer')\ndisplay(df_jobs.dropna())\n","b1ac207b":"#### Packages","b1f48089":"## Load file titles","446cb552":"## City of LA - Converting the job bulletins to a pd dataframe ","968b0d3a":"Look for keywords, and append the following strings to the final dataframe","2980ed28":"### Clean up the file names","60ac4df2":"### Convert the information in the txt files in a table\n","d719edaa":"The goal of this kernel is to extract the usefull information from the txt files:\n* Job Positions\n* Starting Salary\n* Duties\n* Minimum Requirements"}}