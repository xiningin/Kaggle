{"cell_type":{"7e7a785f":"code","2eba07b8":"code","79f8ca39":"code","578c7870":"code","377def30":"code","163cd3bf":"code","758e8e6a":"code","c6e3a6e7":"code","b19fd0ab":"code","a91d9bc3":"code","b3ee544e":"code","31304c76":"code","ece7bb23":"code","11bed78e":"code","99020e2c":"code","e537ae7e":"code","bec4f73c":"code","a6707dd2":"code","3a5d7f2a":"code","c057b05e":"code","1d85fd1b":"code","8d3c1946":"code","85949ebb":"code","be788267":"code","3a021171":"markdown","d23f0853":"markdown","acaea727":"markdown","cc00b740":"markdown"},"source":{"7e7a785f":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score,precision_score,confusion_matrix,f1_score,classification_report","2eba07b8":"train_df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"..\/input\/titanic\/test.csv\")","79f8ca39":"train_df[\"Ticket\"].unique()","578c7870":"train_df.isnull().sum()","377def30":"test_df.isnull().sum()","163cd3bf":"def train_preprocess(train_df,test_df):    \n    train_df = train_df.fillna(train_df.groupby('Survived').transform('median'))\n    train_df=pd.get_dummies(train_df, prefix='', prefix_sep='', \n                            columns=['Sex', 'Embarked'])\n    \n    train_df=train_df.drop(['Name','Cabin','Ticket'],axis=1)\n    test_df=test_preprocess(test_df)\n    train_df,test_df=pval_calculation(train_df,test_df)\n    test_df=test_df.drop(['Name','Cabin','Ticket'],axis=1)\n    print(train_df.head())\n    \n    X=np.asarray(train_df.drop(['Survived'],axis=1))\n    y=np.asarray(train_df['Survived'])\n    return X,y,test_df","758e8e6a":"def test_preprocess(test_df):\n    for i in test_df.columns:\n        if test_df[i].isnull().sum()!=0:\n            if test_df[i].dtype=='int64' or test_df[i].dtype=='float64':\n                mean=test_df[str(i)].median()\n                test_df[str(i)].replace(np.nan,mean, inplace=True)\n    \n    test_df=pd.get_dummies(test_df, prefix='', prefix_sep='', \n                            columns=['Sex', 'Embarked'])\n    \n    #test_df=test_df.drop(['Name','Cabin','Ticket'],axis=1)\n    X=np.asarray(test_df)\n   \n    return test_df","c6e3a6e7":"def pval_calculation(df,test_df):\n    for i,j  in enumerate(df.columns):\n        pearson_coefficient, p_val = stats.pearsonr(df[str(j)], df['Survived'])\n        if p_val>0.05:\n            df=df.drop([str(j)],axis=1)\n            test_df=test_df.drop([str(j)],axis=1)\n            print(str(j),\":\",\"Pearson:\",pearson_coefficient,'p_value: ',p_val)\n    return df,test_df","b19fd0ab":"X,y,Test_X=train_preprocess(train_df,test_df)\nTest_X=np.array(Test_X)","a91d9bc3":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=42)","b3ee544e":"classifier=tree.DecisionTreeClassifier(max_depth=2,random_state=0)\nclassifier.fit(X_train,y_train)\npredictions=classifier.predict(X_test)\n\nprint(accuracy_score(y_test,predictions))\nprint(precision_score(y_test,predictions))","31304c76":"dt_pred=classifier.predict(Test_X)","ece7bb23":"model = GaussianNB()\nmodel.fit(X_train, y_train)\npredicted = model.predict(X_test)\nprint(accuracy_score(y_test, predicted))\nprint(precision_score(y_test, predicted,average='micro'))\n\nprint(classification_report(y_test, predicted))","11bed78e":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier(n_estimators=100,max_depth=4,random_state=0)\ngb.fit(X_train, y_train)\npredicted = gb.predict(X_test)\nprint(\"Accuracy score: \",accuracy_score(y_test, predicted))\nprint(\"Precision score: \",precision_score(y_test, predicted))\nprint(classification_report(y_test, predicted))","99020e2c":"gb_predictions=gb.predict(Test_X)","e537ae7e":"from sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier(n_estimators=100,max_depth=5,random_state=0)\n\nrandom_forest.fit(X_train, y_train)\nprediction=random_forest.predict(X_test)\nprint(\"Accuracy  score: \",accuracy_score(y_test, prediction))\nprint(\"Precision score: \",precision_score(y_test, prediction))\nprint(classification_report(y_test, prediction))","bec4f73c":"rf_predict=random_forest.predict(Test_X)","a6707dd2":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\nprint('The accuracy of the Knn classifier on training data is {:.2f}'.format(knn.score(X_train, y_train)))\nprint('The accuracy of the Knn classifier on test data is {:.2f}'.format(knn.score(X_test, y_test)))\nknnpre = knn.predict(X_test)\ncm = confusion_matrix(y_test, knnpre)\nprint(cm)","3a5d7f2a":"from sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nsvclassifier = SVC(C=2.5,kernel='linear')\nsvclassifier.fit(X_train, y_train)\ny_pred = svclassifier.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision score: \",precision_score(y_test, y_pred))","c057b05e":"pred_svm=svclassifier.predict(Test_X)","1d85fd1b":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import StandardScaler\nmlp = MLPClassifier(hidden_layer_sizes=(50),learning_rate_init=0.001,momentum=0.9,random_state=0)\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)\nmlp.fit(X_train_scaled, y_train)\nprint(\"Accuracy on training set: {:.2f}\".format(mlp.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.2f}\".format(mlp.score(X_test_scaled, y_test)))","8d3c1946":"mlp_pred=mlp.predict(Test_X)\nmlp_pred","85949ebb":"import csv\nwith open('.\/submission_gbv2.csv', 'w', newline='') as csvfile:\n            filewriter = csv.writer(csvfile, delimiter=',',\n                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n            \n\n            filewriter.writerow(['PassengerId','Survived'])\n            for i in range(len(test_df)):\n                filewriter.writerow([test_df['PassengerId'][i],gb_predictions[i]])","be788267":"submission_csv=pd.read_csv(\".\/submission_gbv2.csv\")\nsubmission_csv","3a021171":"# **Classification Methods**","d23f0853":"##### ","acaea727":"# **Submission File**","cc00b740":"# **Data Analysis**"}}