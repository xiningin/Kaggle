{"cell_type":{"f48c518b":"code","daf97eab":"code","e4699928":"code","8e2c1655":"code","64ee42fa":"code","7d736426":"code","6075bdba":"code","25270bf9":"code","af355f9e":"code","318aaa04":"code","d7fd4efb":"code","2edbabf8":"code","37d630d7":"code","90f5c7f0":"code","5415f909":"code","cc420d44":"code","63fbf296":"code","82ca8b2e":"code","1426d077":"code","eaf8178c":"code","b7f8f73d":"code","0f230169":"code","df30babb":"code","1c5e666c":"code","f677df69":"code","bc4b7aba":"code","127d814a":"code","37217714":"code","db7ab41b":"code","9e5eed9f":"code","fe173676":"code","49bfa853":"code","98020c69":"code","374e520b":"code","42797287":"code","b61c7bb4":"code","d2d04812":"code","10763bfd":"code","a1326c1c":"code","1df3d108":"code","f3aaa9c9":"code","03462072":"code","111a1264":"code","db9cdb91":"code","e4638b05":"code","66ef6974":"code","c5590ca2":"code","69f40805":"code","13e5183e":"code","11c045cc":"code","1647ada6":"code","16fee49d":"code","c6243323":"code","85a1efdc":"code","d470cf51":"code","0db77dc4":"markdown","436b6dca":"markdown","81efa446":"markdown"},"source":{"f48c518b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","daf97eab":"import numpy as np                               # vectors and matrices\nimport pandas as pd                              # tables and data manipulations\nimport matplotlib.pyplot as plt","e4699928":"df=pd.read_excel('\/kaggle\/input\/data30mars\/data (1).xlsx')\ndate_parser=lambda x: datetime.strptime(x, '%m\/%d\/%Y %H:%M')\n","8e2c1655":"df.head()","64ee42fa":"df['Cas test\u00e9s positifs'].plot(style=['r-'], figsize=(30, 10))","7d736426":"\nidata=df[['Jour','Cas test\u00e9s positifs','R\u00e9tablis','Morts']]\nidata.rename(columns={'Jour':'Date','Cas test\u00e9s positifs':'Confirmed','R\u00e9tablis':'Recovered','Morts': 'Deaths'}, inplace=True)\nidata['Confirmed'] = pd.to_numeric(idata['Confirmed'], errors='coerce')\nidata['Recovered'] = pd.to_numeric(idata['Recovered'] , errors='coerce')\nidata['Deaths'] = pd.to_numeric(idata['Deaths'], errors='coerce')","6075bdba":"plt.figure(figsize=(20,10))\nplt.bar(idata.Date, idata.Confirmed,label=\"Confirm\")\nplt.bar(idata.Date, idata.Deaths,label=\"Death\")\nplt.bar(idata.Date, idata.Recovered,label=\"Recovery\")\n\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title(\"Confirmation vs Recoverey vs Death\",fontsize=50)\nplt.show()","25270bf9":"\nidata.set_index(\"Date\", inplace = True)\nidata.plot()","af355f9e":"from fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot","318aaa04":"pr_data_test = df.loc[:,['Jour','Cas test\u00e9s positifs']]\npr_data_test.columns = ['ds','y']\npr_data_test.head()","d7fd4efb":"m = Prophet()\nm.fit(pr_data_test)\nfuture=m.make_future_dataframe(periods=15)\nforecast_test=m.predict(future)\nforecast_test","2edbabf8":"test = forecast_test.loc[:,['ds','trend']]\ntest = test[test['trend']>0]\ntest.head()\ntest=test.tail(15)\ntest.columns = ['Date','Cas positif']\ntest.head()","37d630d7":"import plotly.offline as py\n\nfig_test = plot_plotly(m, forecast_test)\npy.iplot(fig_test) \n\nfig_test = m.plot(forecast_test,xlabel='Date',ylabel='cas positif')","90f5c7f0":"figure=m.plot_components(forecast_test)\n","5415f909":"pr_data_cm = df.loc[:,['Jour','Morts']]\npr_data_cm.columns = ['ds','y']\npr_data_cm.head()","cc420d44":"m=Prophet()\nm.fit(pr_data_cm)\nfuture=m.make_future_dataframe(periods=15)\nforecast_cm=m.predict(future)\nforecast_cm","63fbf296":"cnfrm = forecast_cm.loc[:,['ds','trend']]\ncnfrm = cnfrm[cnfrm['trend']>0]\ncnfrm=cnfrm.tail(15)\ncnfrm.columns = ['Date','death']\ncnfrm.head()","82ca8b2e":"fig_cm = plot_plotly(m, forecast_cm)\npy.iplot(fig_cm) \n\nfig_cm = m.plot(forecast_cm,xlabel='Date',ylabel='death')","1426d077":"figure=m.plot_components(forecast_cm)","eaf8178c":"\npr_data_r = df.loc[:,['Jour','R\u00e9tablis']]\npr_data_r.columns = ['ds','y']\npr_data_r.head()","b7f8f73d":"m=Prophet()\nm.fit(pr_data_r)\nfuture=m.make_future_dataframe(periods=15)\nforecast_r=m.predict(future)\nforecast_r","0f230169":"rec = forecast_r.loc[:,['ds','trend']]\nrec = rec[rec['trend']>0]\nrec=rec.tail(15)\nrec.columns = ['Date','Recovery']\nrec.head()","df30babb":"fig_r = plot_plotly(m, forecast_r)\npy.iplot(fig_r) \n\nfig_r = m.plot(forecast_r,xlabel='Date',ylabel='Recovery Count')","1c5e666c":"figure=m.plot_components(forecast_r)\n","f677df69":"df1=df[['Cas test\u00e9s positifs']]\nx = np.arange(len(df1)).reshape(-1, 1)\ny = df1.values","bc4b7aba":"pr_data = df.loc[:,['Jour','Cumul Patients']]\npr_data.columns = ['ds','y']\npr_data.head()","127d814a":"\nm=Prophet()\nm.fit(pr_data)\nfuture=m.make_future_dataframe(periods=365)\nforecast=m.predict(future)\nforecast","37217714":"fig = plot_plotly(m, forecast)\npy.iplot(fig) \n\nfig = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","db7ab41b":"figure=m.plot_components(forecast)\n","9e5eed9f":"arima_data=pr_data\n\narima_data.columns = ['confirmed_date','count']\narima_data=arima_data[:-1]\narima_data","fe173676":"from statsmodels.tsa.arima_model import ARIMA\n","49bfa853":"model = ARIMA(arima_data['count'].values, order=(0, 2,4))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nfit_model.summary()","98020c69":"fit_model.plot_predict()\nplt.title('Forecast vs Actual')\npd.DataFrame(fit_model.resid).plot()","374e520b":"forcast = fit_model.forecast(steps=7)\npred_y = forcast[0].tolist()\npd.DataFrame(pred_y)","42797287":"dataset = arima_data\ndataset.set_index(\"confirmed_date\", inplace = True)\ndataset.head()","b61c7bb4":"data = np.array(dataset).reshape(-1, 1)\ntrain_data = dataset[5:len(dataset)-5]\ntest_data = dataset[len(dataset)-5:]","d2d04812":"from keras.models import Sequential\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.preprocessing.sequence import TimeseriesGenerator\n#from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator","10763bfd":"scaler = MinMaxScaler()\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)\nscaled_test_data = scaler.transform(test_data)\nn_input =5\nn_features =1\n                             \ngenerator = TimeseriesGenerator(scaled_train_data,scaled_train_data, length=n_input, batch_size=1)\n\nlstm_model = Sequential()\nlstm_model.add(LSTM(units = 50, return_sequences = True, input_shape = (n_input, n_features)))\nlstm_model.add(Dropout(0.2))\nlstm_model.add(LSTM(units = 50, return_sequences = True))\nlstm_model.add(Dropout(0.2))\nlstm_model.add(LSTM(units = 50))\nlstm_model.add(Dropout(0.2))\nlstm_model.add(Dense(units = 1))\nlstm_model.compile(optimizer = 'adam', loss = 'mean_squared_error')\nlstm_model.fit_generator( generator,epochs = 30)","a1326c1c":"lstm_model.history.history.keys()\n","1df3d108":"\nlosses_lstm = lstm_model.history.history['loss']\nplt.figure(figsize = (30,4))\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.xticks(np.arange(0,100,1))\nplt.plot(range(len(losses_lstm)), losses_lstm)","f3aaa9c9":"lstm_predictions_scaled = []\n\nbatch = scaled_train_data[-n_input:]\ncurrent_batch = batch.reshape((1, n_input, n_features))\n\nfor i in range(len(test_data)):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    lstm_predictions_scaled.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","03462072":"\nprediction = pd.DataFrame(scaler.inverse_transform(lstm_predictions_scaled))\nprediction","111a1264":"times = np.arange(1,31)\ndf=arima_data[['count']]\nvar=df.to_numpy()","db9cdb91":"from sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR","e4638b05":"clf = SVR(degree=5,C=1000)\nvals=clf.fit(times.reshape(-1,1),var).predict(times.reshape(-1,1))\nplt.plot(times.reshape(-1,1),vals)\nplt.scatter(times.reshape(-1,1),var)\nplt.show()","66ef6974":"value = clf.predict(np.arange(1,37).reshape(-1,1))\nplt.plot(np.arange(1,37),value)\nplt.scatter(np.arange(1,37),value)\nplt.show()\n#print(f'Prediction of deaths using SVR on {int(day)} is {int(value)}')","c5590ca2":"idata.describe()\n","69f40805":"\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error, r2_score","13e5183e":"df=pd.read_excel('\/kaggle\/input\/data30mars\/data (1).xlsx')\ndate_parser=lambda x: datetime.strptime(x, '%m\/%d\/%Y %H:%M')","11c045cc":"x=df.loc[:,['Cas test\u00e9s']]\ny=df.loc[:,['Cas test\u00e9s positifs']]\nx=np.array(x)\ny=np.array(y)\nreg = linear_model.LinearRegression(normalize='Ture')","1647ada6":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)\n\nX_train = X_train.reshape(-1, 1)\nX_test = X_test.reshape(-1, 1)\n\n\nreg.fit(X_train, y_train)\n\nprint(reg.score(X_train, y_train))","16fee49d":"reg.coef_\n","c6243323":"reg.intercept_\n","85a1efdc":"import seaborn as sns\n","d470cf51":"sns.regplot(x=X_train,y=y_train)\n","0db77dc4":"**Cas test\u00e9s Positifs**","436b6dca":"**Prophet Algorithm** \nWhat is Prophet? Prophet is a facebooks\u2019 open source time series prediction. Prophet decomposes time series into trend, seasonality and holiday. It has intuitive hyper parameters which are easy to tune.","81efa446":"For documentation \nhttps:\/\/github.com\/imadhaj\/Prediction-of-Covid-19-Morroco-31-march-2020"}}