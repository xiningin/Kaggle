{"cell_type":{"726314e7":"code","6fc1c2f9":"code","703e76c8":"code","a3db5724":"code","e8c751d8":"code","c7e5657e":"code","2d0e5e2d":"code","c14a3d92":"code","2d55ef7b":"code","47946208":"code","cfb90b8f":"code","e12d85e9":"code","3519abd2":"code","cf66401d":"code","b31fa702":"code","ec8b9e74":"code","e693e525":"code","29ae2bad":"code","28722720":"code","2ddeb5a0":"code","05e055e1":"code","357af9d8":"code","8636160e":"code","dce28a90":"code","fb6b4879":"code","316d315c":"code","6839f57c":"code","fb32c464":"markdown","918a1108":"markdown","c69a8287":"markdown","52846f6f":"markdown","638d5b8d":"markdown","f76e1961":"markdown","b217f4fd":"markdown","426ddd36":"markdown","04092e7b":"markdown","d3f6a673":"markdown","3ceb3073":"markdown","483cb740":"markdown","0db23700":"markdown","a78df289":"markdown","1534c69b":"markdown"},"source":{"726314e7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set_style('darkgrid')\n%matplotlib inline \n\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn ","6fc1c2f9":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","703e76c8":"df_train.info()","a3db5724":"df_train.describe().T","e8c751d8":"nulls = df_train.isnull().sum()\nnulls[nulls > 0].reset_index()","c7e5657e":"df_train['LotFrontage'].describe()","2d0e5e2d":"df_train['Alley'].value_counts()","c14a3d92":"df_train['FireplaceQu'].value_counts()","2d55ef7b":"df_train['PoolQC'].value_counts()","47946208":"df_train['Fence'].value_counts()","cfb90b8f":"df_train['MiscFeature'].value_counts()","e12d85e9":"from sklearn.neighbors import LocalOutlierFactor\ndect = LocalOutlierFactor(n_neighbors=50,metric='manhattan',contamination=0.01)\ndf_train['outlier'] = dect.fit_predict(df_train[['GrLivArea']])\nsns.scatterplot(x='GrLivArea',y='SalePrice',hue='outlier',palette=\"tab10\",data=df_train)\n\ndf_train = df_train.query('outlier > 0').drop(columns=['outlier'],axis=1)","3519abd2":"qualitative =  df_train.select_dtypes(include='object').columns.to_list()\nquantitative = df_train.select_dtypes(exclude='object').columns.to_list()\nquantitative.remove('Id')\nquantitative.remove('SalePrice')","cf66401d":"# qualitative_features = df[qualitative]\nfor c in qualitative:\n    df_train[c] = df_train[c].astype('category')\ndef boxplot(x, y, **kwargs):\n    sns.boxplot(x=x, y=y)\n    x=plt.xticks(rotation=90)\n#create a box plot to show how the output changes with qualitative features\nf = pd.melt(df_train, id_vars=['SalePrice'], value_vars=qualitative)\ng = sns.FacetGrid(f, col= \"variable\",  col_wrap=3, sharex=False, sharey=False, size=5)\ng = g.map(boxplot, \"value\", \"SalePrice\")","b31fa702":"from scipy import stats\nfrom scipy.stats import norm, skew\n#histogram\nsns.distplot(df_train['SalePrice'] , fit=norm);\n\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df_train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()\n\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","ec8b9e74":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ndf_train[\"SalePrice\"] = np.log1p(df_train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(df_train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df_train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","e693e525":"corr_matrix = df_train.corr()[['SalePrice']].sort_values(by = ['SalePrice'], ascending = False).drop(['SalePrice'])\ncorr_matrix.style.background_gradient(cmap = 'coolwarm').set_precision(2)","29ae2bad":"df = pd.concat((df_train, df_test)).reset_index(drop=True)\ndf.drop(['SalePrice'], axis=1, inplace=True)\nprint(df.shape)","28722720":"# Check the skew of all numerical features\nskewed_feats = df[quantitative].apply(lambda x: skew(x)).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","2ddeb5a0":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    df[feat] = boxcox1p(df[feat], lam)","05e055e1":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nencoder = LabelEncoder()\nfor col in qualitative:\n    df[col].fillna(value='missing',inplace=True)\n    df[col] = encoder.fit_transform(df[col])\n\nfor col in quantitative:\n    df[col].fillna(value=df[col].mean())\ndf[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\nscaler = StandardScaler()\ndf[quantitative] = scaler.fit_transform(df[quantitative])\ndf.dropna(axis=1,inplace=True)","357af9d8":"from sklearn.feature_selection import mutual_info_regression\n\ndef mutual_info_scores(X, y, discrete_features):\n    mi_scores = mutual_info_regression(X, y, discrete_features)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","8636160e":"x_train = df.iloc[:len(df_train),:]\ny_train = df_train[\"SalePrice\"]","dce28a90":"mi_scores = mutual_info_scores(x_train.drop(columns=['Id'],axis=1), y_train, discrete_features=False)\nplt.figure(dpi=100, figsize=(8, 15))\nplot_mi_scores(mi_scores)","fb6b4879":"top_40=pd.DataFrame(mi_scores[:40]).reset_index()['index'].to_list()","316d315c":"from sklearn.linear_model import Ridge,LinearRegression\nfrom sklearn.model_selection import train_test_split,KFold,GridSearchCV\nfrom sklearn.metrics import r2_score,mean_squared_error\n\nparams = {'alpha':np.arange(20,60)}\n\nk_fold = KFold(n_splits=10)\nreg = Ridge(random_state=42)\nreg_cv = GridSearchCV(reg,param_grid=params,cv=k_fold)\nreg_cv.fit(x_train.drop(columns=['Id'],axis=1),y_train)\n\nprint(f'best value of alpha{reg_cv.best_params_}')\nprint(f'best val r2 score{reg_cv.best_score_}')\nprint(r2_score(y_train,reg_cv.predict(x_train.drop(columns=['Id'],axis=1))))\nprint(mean_squared_error(y_train,reg_cv.predict(x_train.drop(columns=['Id'],axis=1))))","6839f57c":"x_test = df.iloc[len(df_train):,:]\n\ny_pred =np.expm1(reg_cv.predict(x_test.drop(columns=['Id'],axis=1)))\nsubmission = pd.DataFrame({'id': x_test['Id'], 'SalePrice': y_pred})\nsubmission.to_csv(\"my_submission.csv\",index = False)","fb32c464":"## **Target variable**","918a1108":"**LotFrontage**: Linear feet of street connected to property.","c69a8287":"* Based on the above cells we can come with some reason for the missing values of these features. and we come with conclusion that we can impute all the missing value for these features with NoExist representing that this properties have n't these feautres. and we will drop the other recoreds as they represent a small number for data records.","52846f6f":"## **Feature Selection**","638d5b8d":"# **Exploratory Data Analysis**","f76e1961":"**FireplaceQu**: Fireplace quality. All **Na** records represent No Fireplace for this property.","b217f4fd":"**PoolQC**: Pool quality. All **NA** records represent no pool for this property.\n","426ddd36":"## **Qualitative features**","04092e7b":"## **Null Values**","d3f6a673":"**Fence**: Fence quality. All **NA** records represent No Fence for this property.","3ceb3073":"## **Removing Outliers**","483cb740":"## **Target Transformation**","0db23700":"**Alley**: Type of alley access to property. All **NA** records represent No alley access.","a78df289":"**MiscFeature**: Miscellaneous feature not covered in other categories. All **NA** records are represent *None* is missing.","1534c69b":"### **Statisical Information**"}}