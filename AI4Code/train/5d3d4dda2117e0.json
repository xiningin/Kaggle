{"cell_type":{"82dd7958":"code","7533fecc":"code","51bd8156":"code","c39315c9":"code","68bac223":"code","e731ece0":"code","3fe0a896":"code","8b5d9cde":"code","afed6b7c":"code","a1c554d8":"code","98278c15":"code","2b914c09":"code","a560484c":"code","3f76f1d5":"code","d5dd1f6f":"code","ef335959":"code","2a9fb888":"code","7c361dbb":"code","d14c1622":"code","556f2c70":"code","70ec4106":"code","98d9c3c4":"code","5ed14022":"code","e2352389":"code","af2152bc":"markdown","20e9bb37":"markdown","c9397a1d":"markdown","323db840":"markdown","2a0d8495":"markdown","681ce079":"markdown","3aab4c85":"markdown","4dae962e":"markdown","916e5e8a":"markdown","046e6f3a":"markdown","99f35d93":"markdown","ba77c53b":"markdown","e4e16a12":"markdown","6612c004":"markdown"},"source":{"82dd7958":"# import all libraries and dependencies for dataframe\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom datetime import datetime, timedelta\n\n# import all libraries and dependencies for data visualization\npd.options.display.float_format='{:.4f}'.format\nplt.rcParams['figure.figsize'] = [8,8]\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', -1) \nsns.set(style='darkgrid')\nimport matplotlib.ticker as ticker\nimport matplotlib.ticker as plticker\n\n# import all libraries and dependencies for machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.base import TransformerMixin\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import preprocessing\nfrom sklearn.base import TransformerMixin","7533fecc":"# Local file path. Please change the file path accordingly\n\npath = '..\/input\/pro-kabaddi-2019\/'","51bd8156":"# Reading the Team_leaderboard file on which Analysis needs to be done\n\nfile = path + '2019_Pro_Kabaddi.xlsx'\ndf_mr = pd.read_excel(file)\n\ndf_mr.head(100)","c39315c9":"df_mr = df_mr.drop(['Week','Team 1_Score','Team 2_Score','MarginScore'],axis=1)\ndf_mr.head() ","68bac223":"#Building the model\n\ndf_mr = df_mr.reset_index(drop=True)\ndf_mr.loc[df_mr.Winner == df_mr.Team_1,'winning_team']=1\ndf_mr.loc[df_mr.Winner == df_mr.Team_2, 'winning_team']=2\ndf_mr = df_mr.drop(['winning_team'], axis=1)\n\ndf_mr.head()","e731ece0":"#convert team-1 and team-2 from categorical variables to continous inputs \n# Get dummy variables\nfinal = pd.get_dummies(df_mr, prefix=['Team_1', 'Team_2'], columns=['Team_1', 'Team_2'])\n\n# Separate X and y sets\nX = final.drop(['Winner'], axis=1)\ny = final[\"Winner\"]\n\n\n# Separate train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=100)","3fe0a896":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nY_pred = logreg.predict(X_test)\n\nscore = logreg.score(X_train, y_train)\nscore2 = logreg.score(X_test, y_test)\n\nprint(\"Training set accuracy: \", '%.3f'%(score))\nprint(\"Test set accuracy: \", '%.3f'%(score2))","8b5d9cde":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\nY_pred = decision_tree.predict(X_test)\n\n\nscore = decision_tree.score(X_train, y_train)\nscore2 = decision_tree.score(X_test, y_test)\n\nprint(\"Training set accuracy: \", '%.3f'%(score))\nprint(\"Test set accuracy: \", '%.3f'%(score2))","afed6b7c":"rf = RandomForestClassifier(n_estimators=100, max_depth=20,\n                              random_state=100)\nrf.fit(X_train, y_train) \n\n\nscore = rf.score(X_train, y_train)\nscore2 = rf.score(X_test, y_test)\n\n\nprint(\"Training set accuracy: \", '%.3f'%(score))\nprint(\"Test set accuracy: \", '%.3f'%(score2))","a1c554d8":"#adding WINS\n#the team which is positioned higher on the WIN table will be considered \"favourite\" for the match\n#and therefore, will be positioned under the \"Team_1\" column\n\npath = '..\/input\/pro-kabaddi-2019\/'\nfile = path + '2019_Pro_Kabaddi.xlsx'\nranking = pd.read_excel(file,'Points Table_2019')\n\nfixtures = pd.read_csv('..\/input\/pro-kabaddi-2019\/kabbadi_fixtures.csv')\n\n# List for storing the group stage games\npred_set = []\nfixtures.head(135)\nranking.head(12)","98278c15":"# Create new columns with wins of each team\nfixtures.insert(1, 'First_Position', fixtures['Team_1'].map(ranking.set_index('Team')['WINS']))\nfixtures.insert(2, 'Second_Position', fixtures['Team_2'].map(ranking.set_index('Team')['WINS']))\n","2b914c09":"# We only need the group stage games, so we have to slice the dataset\nfixtures = fixtures.iloc[:131, :]\nfixtures.head(10)","a560484c":"# Loop to add teams to new prediction dataset based on the wins of each team\nfor index, row in fixtures.iterrows():\n    if row['First_Position'] > row['Second_Position']:\n        pred_set.append({'Team_1': row['Team_1'], 'Team_2': row['Team_2'], 'winning_team': None})\n    else:\n        pred_set.append({'Team_1': row['Team_2'], 'Team_2': row['Team_1'], 'winning_team': None})\n        \npred_set = pd.DataFrame(pred_set)\nbackup_pred_set = pred_set","3f76f1d5":"# Get dummy variables and drop winning_team column\npred_set = pd.get_dummies(pred_set, prefix=['Team_1', 'Team_2'], columns=['Team_1', 'Team_2'])\n\n# Add missing columns compared to the model's training dataset\nmissing_cols = set(final.columns) - set(pred_set.columns)\n\nfor c in missing_cols:\n    pred_set[c] = 0\npred_set = pred_set[final.columns]\n\n\npred_set = pred_set.drop(['Winner'], axis=1)\npred_set.head()","d5dd1f6f":"#group matches \npredictions = rf.predict(pred_set)\nfor i in range(fixtures.shape[0]):\n    print(backup_pred_set.iloc[i, 1] + \" and \" + backup_pred_set.iloc[i, 0])\n    if predictions[i] == 1:\n        print(\"Winner: \" + backup_pred_set.iloc[i, 1])\n    \n    else:\n        print(\"Winner: \" + backup_pred_set.iloc[i, 0])\n    print(\"\")","ef335959":"def clean_and_predict(matches, ranking, final, rf):\n\n   \n    positions = []\n\n    # Loop to retrieve each team's position according to Wins\n    for match in matches:\n        positions.append(ranking.loc[ranking['Team'] == match[0],'WINS'].iloc[0])\n        positions.append(ranking.loc[ranking['Team'] == match[1],'WINS'].iloc[0])\n    \n    # Creating the DataFrame for prediction\n    pred_set = []\n\n   \n    i = 0\n    j = 0\n\n   \n    while i < len(positions):\n        dict1 = {}\n\n        # If wins of first team is better then this team will be the 'Team_1' team, and vice-versa\n        if positions[i] > positions[i + 1]:\n            dict1.update({'Team_1': matches[j][0], 'Team_2': matches[j][1]})\n        else:\n            dict1.update({'Team_1': matches[j][1], 'Team_2': matches[j][0]})\n\n        # Append updated dictionary to the list, that will later be converted into a DataFrame\n        pred_set.append(dict1)\n        i += 2\n        j += 1\n        \n        # Convert list into DataFrame\n    pred_set = pd.DataFrame(pred_set)\n    backup_pred_set = pred_set\n\n    # Get dummy variables and drop winning_team column\n    pred_set = pd.get_dummies(pred_set, prefix=['Team_1', 'Team_2'], columns=['Team_1', 'Team_2'])\n\n    # Add missing columns compared to the model's training dataset\n    missing_cols2 = set(final.columns) - set(pred_set.columns)\n    for c in missing_cols2:\n        pred_set[c] = 0\n    pred_set = pred_set[final.columns]\n\n    pred_set = pred_set.drop(['Winner'], axis=1)\n\n    # Predict\n    predictions = rf.predict(pred_set)\n    for i in range(len(pred_set)):\n        print(backup_pred_set.iloc[i, 1] + \" and \" + backup_pred_set.iloc[i, 0])\n        if predictions[i] == 1:\n            print(\"Winner: \" + backup_pred_set.iloc[i, 1])\n        else:\n            print(\"Winner: \" + backup_pred_set.iloc[i, 0])\n        print(\"\")","2a9fb888":"elim1 = [('Haryana Steelers', 'Bengaluru Bulls')]\nelim2 = [('U Mumba', 'UP Yoddha')]","7c361dbb":"clean_and_predict(elim1, ranking, final, rf)","d14c1622":"clean_and_predict(elim2, ranking, final, rf)","556f2c70":"semi1 = [('Haryana Steelers', 'Dabang Delhi')]\nsemi2 = [('UP Yoddha', 'Bengal Warriors')]","70ec4106":"clean_and_predict(semi1, ranking, final, rf)","98d9c3c4":"clean_and_predict(semi2, ranking, final, rf)","5ed14022":"finale = [('Dabang Delhi','Bengal Warriors')]","e2352389":"clean_and_predict(finale, ranking, final, rf)","af2152bc":"#### If this Kernel helped you in any way, some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated","20e9bb37":"#### For other analysis of Pro Kabaddi.Please do visit below kernels and show some support.\n- [Player Analysis](https:\/\/www.kaggle.com\/hellbuoy\/player-analysis-pro-kabaddi-2019-season-7)\n- [Team Analysis](https:\/\/www.kaggle.com\/hellbuoy\/team-analysis-pro-kabaddi-2019)","c9397a1d":"### Step 2: Splitting the Data into Training and Testing Sets\n\nAs you know, the first basic step for regression is performing a train-test split.","323db840":"#### Based on our Model The Dabang Delhi would be going to win Pro Kabaddi Season 7.","2a0d8495":"#### If this Kernel helped you in any way, some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated","681ce079":"#### Logistic Regression","3aab4c85":"### Step 1: Reading and Understanding the Data\n\nLet us first import all libraries and dependencies","4dae962e":"Let\u2019s get started with some basics of kabaddi. Here are some links that you can visit in order to familiarise yourself with the sport. I recommend that you go through the links in the same order that they are provided:\n\n \n\n[Basics of Kabaddi](https:\/\/medium.com\/@Khel_Gyani\/how-to-play-kabaddi-basics-and-rules-c3a95eb8cf2f)\n\n[How to play Kabaddi](https:\/\/medium.com\/@Khel_Gyani\/how-to-play-kabaddi-basics-and-rules-c3a95eb8cf2f)","916e5e8a":"### Who will win the Pro Kabaddi 2019??\nPS : Prediction based on the data till 30th Sep 2019","046e6f3a":"#### Random Forest","99f35d93":"#### Decision Tree","ba77c53b":"![](http:\/\/www.kabaddiadda.com\/sites\/default\/files\/2019-06\/PKL7_Banner_Mob_0.jpeg)","e4e16a12":"### Step 3: Building a ML model","6612c004":"### Interesting Facts about Kabaddi and the Pro Kabaddi League:\n\n \n\nThere have been three kabaddi world cups so far (the fourth one will be held this year), and India won the title all three times in the men\u2019s category. Interestingly, Iran was the runner-up in all the three world cups.\n\n- The Indian women\u2019s kabaddi team also won all the three world cups organised so far."}}