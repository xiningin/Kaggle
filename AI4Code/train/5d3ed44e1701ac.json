{"cell_type":{"a6c95891":"code","4da78285":"code","ba96738f":"code","26ae6e9b":"code","c68ce931":"code","602901f0":"code","2c7aa19f":"code","c1a447ef":"code","9b7807ea":"code","0d0f10a3":"code","f5734f8a":"code","8114446a":"code","4c72ac54":"code","85d5e92f":"code","b83249ea":"code","55392a13":"code","8c6a200a":"code","a814e45e":"code","b57c0a8a":"code","98cdb675":"code","da8481f6":"code","7a6d4b80":"code","1f30ea3b":"code","2801e378":"code","bacd8fbd":"code","65c67219":"code","eafb4339":"code","fa6384bb":"code","a26dfab9":"markdown"},"source":{"a6c95891":"import numpy as np\nimport pandas as pd\nimport pylab as pl\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport math\nfrom tqdm import tqdm\nimport os\n\nimport tensorflow as tf\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split","4da78285":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","ba96738f":"train0 = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest0 = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","26ae6e9b":"print(train0.shape)\ntrain0.head()","c68ce931":"print(test0.shape)\ntest0.head()","602901f0":"X0 = train0.iloc[:,1:]\ny0 = train0.iloc[:,0]","2c7aa19f":"X1=np.array(X0)\ntest1=np.array(test0)\n\nprint(X1.shape)\nprint(test1.shape)","c1a447ef":"X2=[]\nfor i in tqdm(range(len(X1))):\n    obj0 = X1[i]\n    obj1 = Image.fromarray(np.uint8(obj0))\n    obj2 = np.asarray(obj1.resize((56,56*3))) \n    X2 += [obj2]","9b7807ea":"test1=np.array(test0)\n    \ntest2=[]\nfor i in tqdm(range(len(test1))):\n    obj0 = test1[i]\n    obj1 = Image.fromarray(np.uint8(obj0))\n    obj2 = np.asarray(obj1.resize((56,56*3))) \n    test2 += [obj2]  ","0d0f10a3":"print(np.array(X2).shape)\nprint(np.array(test2).shape)","f5734f8a":"X=(np.array(X2)).reshape(-1,56*56*3)\ntest=(np.array(test2)).reshape(-1,56*56*3)\n\nprint(X.shape)\nprint(test.shape)","8114446a":"binencoder = LabelBinarizer()\ny = binencoder.fit_transform(y0)\ny","4c72ac54":"X_images = X.reshape(-1,56,56,3)\ntest_images = test.reshape(-1,56,56,3)\n\nprint(X_images.shape)\nprint(test_images.shape)","85d5e92f":"plt.figure(figsize=(6,6), dpi=50)\nplt.imshow(X1[5].reshape(28,28))\nplt.xticks([])\nplt.yticks([])\nplt.show()","b83249ea":"plt.figure(figsize=(18,6), dpi=50)\nplt.imshow(X_images[5].reshape(56,56*3))\nplt.xticks([])\nplt.yticks([])\nplt.show()","55392a13":"X_train, X_test, y_train, y_test = train_test_split(X_images, y, test_size = 0.2, random_state=90)","8c6a200a":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","a814e45e":"X_train = X_train\/255\nX_test = X_test\/255\n\nX_train = X_train.reshape(-1,56,56,3).astype('float32')\nX_test = X_test.reshape(-1,56,56,3).astype('float32')","b57c0a8a":"test_images2 = test_images\/255\ntest = test_images2.reshape(-1,56,56,3).astype('float32')","98cdb675":"pretrained_model = tf.keras.applications.DenseNet201(input_shape=(56,56,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model.trainable = False","da8481f6":"inputs = pretrained_model.input\nx = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)\noutputs = tf.keras.layers.Dense(10, activation='softmax')(x)\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)","7a6d4b80":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n# model.summary()","1f30ea3b":"his = model.fit(X_train, y_train, validation_split=0.2, epochs=50, batch_size=92, verbose=2)","2801e378":"get_acc = his.history['accuracy']\nvalue_acc = his.history['val_accuracy']\nget_loss = his.history['loss']\nvalidation_loss = his.history['val_loss']\n\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","bacd8fbd":"epochs = range(len(get_loss))\nplt.plot(epochs, get_loss, 'r', label='Loss of Training data')\nplt.plot(epochs, validation_loss, 'b', label='Loss of Validation data')\nplt.title('Training vs validation loss')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","65c67219":"pred2=model.predict(test)\nprint(test.shape)\nprint(pred2.shape)\n\nPRED=[]\nfor item in pred2:\n    value2=np.argmax(item)      \n    PRED+=[value2]","eafb4339":"sample=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsample","fa6384bb":"submit=sample\nsubmit['Label']=PRED\nsubmit.to_csv('submission.csv',index=False)\nsubmit","a26dfab9":"##### \n# DenseNet201 model, handling 28 x 28 shape data"}}