{"cell_type":{"54a2ef07":"code","326edd59":"code","67705b77":"code","8baec6f3":"code","7ff5f1c2":"code","8a7e0c66":"code","7f4ef18c":"code","ba96622e":"code","6ea840ac":"code","0e01ecfb":"code","2590bf3a":"code","16897593":"code","82b4baab":"code","e2bb7837":"code","2a18a3a1":"code","7f059492":"code","87c5346c":"code","40c235c7":"code","b0c29f14":"code","ad2b30b7":"code","49e8ea40":"code","d92bcfca":"code","44bc066f":"code","211832f6":"code","f3f8c39d":"code","88b20c0d":"code","69d8e146":"code","2052a348":"code","de75760d":"code","6b2d2c84":"code","0f8a0272":"code","03d37cf0":"code","72259c4b":"code","12197cf0":"code","9b4b72ec":"code","c22ef7b1":"code","c10b7954":"code","9baee5bc":"code","9e819f43":"code","fe524ee2":"code","0010669f":"code","ca5205ab":"code","1a2719fc":"markdown","de6b836f":"markdown","f5f08055":"markdown","4b6df2d5":"markdown","52e91c2d":"markdown","58c12585":"markdown","8bb01ffe":"markdown","eed44955":"markdown","ed6dc34f":"markdown","47153141":"markdown","9a3444a3":"markdown","4acbd291":"markdown","4b9f1939":"markdown","863eb7a1":"markdown","970b3d59":"markdown","8f89a1c6":"markdown","46f64527":"markdown","e50eed7f":"markdown","baf9cc39":"markdown","0044ced5":"markdown","8ac7fa72":"markdown","a0130303":"markdown"},"source":{"54a2ef07":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport time\nfrom datetime import datetime\nfrom datetime import timedelta\nimport urllib.request\nimport re\nfrom bs4 import BeautifulSoup\nimport requests\nimport matplotlib\nimport jieba\npd.set_option('display.max_columns', None) ","326edd59":"# First we use urllib to build a spider. Just to scrpe videos from ranking charts doesn't need us to login.\n\nopener = urllib.request.build_opener()\nopener.addheaders = [('User-Agent','Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/52.0.2743.116 Safari\/537.36'), \n                       ]\nurllib.request.install_opener(opener)","67705b77":"# The auto-tune-remix-themed content is mostly in the following two categories:Videomad\/Vocalmad\n\ndef spider(start,end):\n    madurl = 'https:\/\/s.search.bilibili.com\/cate\/search?&main_ver=v3&search_type=video&view_type=hot_rank&order=click&copy_right=-1&cate_id=26&page=1&pagesize=30&jsonp=jsonp&time_from={}&time_to={}'.format(str(start),str(end))\n\n    guideurl = 'https:\/\/s.search.bilibili.com\/cate\/search?&main_ver=v3&search_type=video&view_type=hot_rank&order=click&copy_right=-1&cate_id=22&page=1&pagesize=30&jsonp=jsonp&time_from={}&time_to={}'.format(str(start),str(end))\n\n    mad = opener.open(madurl).read().decode(\"utf-8\",\"ignore\")\n    guide = opener.open(guideurl).read().decode(\"utf-8\",\"ignore\")\n\n    aid = '\"arcurl\":\"(.*?)\",'\n    tag = '\"tag\":\"(.*?)\",'\n    mid = '\"mid\":(.*?),'\n    tit = '\"title\":\"(.*?)\"}'\n    review = '\"review\":(.*?),'\n    play = '\"play\":\"(.*?)\"'\n    danmu ='\"video_review\":(.*?),'\n    fav = '\"favorites\":(.*?),'\n\n    aid1 = re.compile(aid).findall(mad)\n    aid2 = re.compile(aid).findall(guide)\n    aid0 = aid1 + aid2\n    \n    tag1 = re.compile(tag).findall(mad)\n    tag2 = re.compile(tag).findall(guide)\n    tag0 = tag1 + tag2\n\n    mid1 = re.compile(mid).findall(mad)\n    mid2 = re.compile(mid).findall(guide)\n    mid0 = mid1 + mid2\n\n    tit1 = re.compile(tit).findall(mad)\n    tit2 = re.compile(tit).findall(guide)\n    tit0 = tit1 + tit2\n    \n    play1 = re.compile(play).findall(mad)\n    play2 = re.compile(play).findall(guide)\n    play0 = play1 + play2\n    \n    review1 = re.compile(review).findall(mad)\n    review2 = re.compile(review).findall(guide)\n    review0 = review1 + review2\n    \n    danmu1 = re.compile(danmu).findall(mad)\n    danmu2 = re.compile(danmu).findall(guide)\n    danmu0 = danmu1 + danmu2\n    \n    fav1 = re.compile(fav).findall(mad)\n    fav2 = re.compile(fav).findall(guide)\n    fav0 = fav1 + fav2\n    \n    if (len(aid0) == len(tag0) == len(mid0) == len(tit0) == len(review0) == len(play0) == len(danmu0) == len(fav0) ):\n        df = pd.DataFrame(list(zip(aid0,tag0, mid0,tit0,review0,play0,danmu0,fav0)), \n               columns =['url','tag', 'mid','tit','review','play','danmu','fav']) \n        df['aid'] = re.compile('av(\\d*)').findall(str(df['url']))\n        \n        for i in range(0,len(df)):\n            df['tag'][i] = eval('u\"'+df['tag'][i]+'\"')\n            df['tit'][i] = eval('u\"'+df['tit'][i]+'\"')\n            df['url'][i] = df['url'][i].replace(\"\\\\\",\"\")\n    \n        df['start'] = str(start)\n        df['end'] = str(end)\n    else:\n        df = pd.DataFrame()\n        print(len(aid0) ,len(tag0) ,len(mid0), len(tit0) ,len(review0), len(play0), len(danmu0), len(fav0))\n    return df","8baec6f3":"# import a file for creating date range:2018\/01\/01 - 2020\/04\/19\n\nperiod = pd.read_excel('..\/input\/bilibili\/datelist1.xlsx')\nperiod.head()","7ff5f1c2":"# Store data\n\ndataall = []\ndataall=pd.DataFrame(dataall)   \n\nfor i in range(period.shape[0]):\n    spd = spider(period['start'][i],period['end'][i])\n    if len(spd) > 0:\n        dataall = dataall.append(spd)\n    else:\n        print(\"error:\"+str(i))\n    print(str(i))\n","8a7e0c66":"# We now get Top 30 videos for each category every week for more than 2 years. Each week has 60 hot videos with their url, creator-made tags, creator id, video title, review_num, play_num, danmaku_num, add_to_favorite_num, video id and the week_num.\n\ndataall.head()","7f4ef18c":"len(dataall)","ba96622e":"dataall=dataall.reset_index()\ndataall = dataall.drop(['index'], axis=1)\ndataall.to_csv(r'spider.csv',encoding='utf-8-sig')","6ea840ac":"#dataall = pd.read_csv('..\/input\/bilibili-data\/spider.csv')","0e01ecfb":"# The tag is str, sep with ','. So first we collect all words into a long string and split them with ','.\n\ntaglist=str()\nfor i in range(len(dataall)):\n    taglist = taglist + str(dataall['tag'][i]) + ','\ntagword = taglist.split(',')\n\n#take a look\ntagword[0:5]","2590bf3a":"# Count the occurence of all words.\n\nfrom collections import Counter\n\ntag_stat = Counter(tagword)\ntag_stat.most_common(100)","16897593":"# Del some words. Some of them are event names, category names and some adjectives creators usually use to describe their video.\n\nstop_words = ['\u9b3c\u755c\u8c03\u6559','\u97f3MAD','\u97f3mad','\u6d17\u8111','\u641e\u7b11','\u6d17\u8111\u5faa\u73af','\u539f\u66f2\u4e0d\u4f7f\u7528','\u6076\u641e','\u5168\u80fd\u6253\u5361\u6311\u6218','bilibili\u65b0\u661f\u8ba1\u5212','\u6691\u671f\u7206\u809d\u6311\u6218','\u4eba\u529bVOCALOID','\u521b\u4f5c\u65b0\u79c0\u5956','2019\u65b0\u4eba\u5609\u5e74\u534e', 'VAN\u6837', '\u65b0\u661f\u8ba1\u5212','\u732b\u548c\u8001\u9f20\u9b3c\u755c\u914d\u97f3','\u5168\u52e4\u6311\u6218','\u641e\u7b11\u89c6\u9891','\u81ea\u5236','\u9b3c\u755c','\u65b0\u4eba','JOJO', 'Vtuber','\u5bd2\u5047\u4e0d\u518d\u5495\u5495\u5495','\u4eae\u5251','\u5408\u4f5c','\u94c1\u9053\u97f3MAD','van','LOL','WINDOWS','\u4e1c\u65b9project','\u5e72\u676f\uff01\u6821\u56ed\u5b63','\u5de8\u9b54','\u8001\u516b']\nfor s in stop_words:\n    del tag_stat[s]","82b4baab":"# Create a wordcloud to demonstrate the most popular contents.\n# The Chinese caracter isn't supported, so I have to import my own font.\n\nimport imageio\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,ImageColorGenerator\n\nfont_path='..\/input\/chfont\/SIMHEI.TTF'\n\nwc = WordCloud(max_words=100, \n               #stopwords=stop_word,\n               scale = 15,\n              #max_font_size=200, \n              font_path=font_path, \n              background_color='white',\n               #width=1000,  \n               #height=860  \n              )\n\n#back_color = 'red'\n#image_colors = ImageColorGenerator(back_color)\nplt.figure(figsize=(8,8),dpi=180)\nwc.generate_from_frequencies(tag_stat)\nplt.imshow(wc)\nplt.axis('off')","e2bb7837":"# Since all these tags are from different categories. I divide them into 3 types: Person, Events, Materials.\n\ndataall['tag_list'] = np.nan\nfor i in range(len(dataall)):\n    try:\n        dataall['tag_list'][i] = dataall['tag'][i].split(',')\n    except AttributeError as reason:\n        print(str(reason)+str(i))","2a18a3a1":"dataall.dtypes","7f059492":"dataall[dataall['play'] == '--']","87c5346c":"# There's an old video has wrong play_num. Simply drop it.\n\nprint(dataall.iloc[447,])\ndataall = dataall.drop([447])","40c235c7":"# change the data type as we will do some calculation later.\n\ndataall['play'] = dataall['play'].astype('int')\ndataall['review'] = dataall['review'].astype('int')\ndataall['danmu'] = dataall['danmu'].astype('int')\ndataall['fav'] = dataall['fav'].astype('int')","b0c29f14":"#tidy-up\n\ndataall = dataall.reset_index()\ndataall = dataall.drop(['index'], axis=1)","ad2b30b7":"# Now we sum up the play_num for each tag by week. Note that videos has multiple tags, so they will have the same play_num and danmu_num if they are from the same clip.\n\ntag = []\nplay = []\ndanmu = []\nweek = []\n\n\nfor i in range(len(dataall['tag_list'])):\n    try:\n        for j in range(len(dataall['tag_list'][i])):\n            try:\n                tag = tag + [dataall['tag_list'][i][j]]\n                play = play + [dataall['play'][i]]\n                danmu = danmu + [dataall['danmu'][i]]\n                week = week + [dataall['start'][i]]\n            except TypeError as reason:\n                print(str(reason) + str(i)+\":\"+str(j))\n    except TypeError as reason:\n        print(str(reason) + str(i))\n\n\ndf = pd.DataFrame(list(zip(tag, play,danmu,week)), \n               columns =['tag', 'play','danmu','week']) \ndf.head()","49e8ea40":"# Create B.com dictionary. Seperate the tags into 3 categories: Person, Event, Material.\n\ntagindex = { 'p':['\u8521\u5f90\u5764','\u5b59\u7b11\u5ddd','\u5362\u672c\u4f1f','\u4e94\u4e94\u5f00','\u5434\u4ea6\u51e1', 'PDD','\u836f\u6c34\u54e5','\u82b1\u6cfd\u9999\u83dc','\u81ea\u4fe1\u59d0','\u8096\u6218','\u845b\u5e73','\u53e4\u529b\u5a1c\u624e','\u4e54\u78a7\u841d','\u9ec4\u6653\u660e','\u5218\u5fb7\u534e','\u5ddd\u666e','\u5468\u6da6\u53d1','\u5468\u6dd1\u6021','pdd','\u5468\u6770\u4f26','\u516d\u5c0f\u9f84\u7ae5','\u4e94\u5f00','giao\u54e5','\u738b\u5883\u6cfd','\u6731\u4e39','\u5764\u5764','\u9cb2\u5b66\u5bb6','\u8d75\u672c\u5c71','\u6731\u5e7f\u6743','\u9a6c\u4e91','\u9a6c\u5316\u817e','\u9762\u7b4b\u54e5','\u5f20\u4e00\u5c71','\u5927\u5f20\u4f1f','\u8d1d\u7237','DONALDTRUMP','\u8096\u6218','\u5b8b\u4e39\u4e39','\u97e9\u7ea2','\u5a1c\u624e','\u5168\u660e\u661fRAP','\u9ad8\u97f3\u54e5','VITAS','\u6770\u54e5','billie eilish','\u7f57\u5fd7\u7965','\u5f20\u5927\u4ed9','\u6768\u7d2b','papi\u9171','\u6210\u9f99','\u6e23\u6e23\u8f89','\u5b5f\u9e64\u5802','\u960e\u9e64\u7965','\u5fb7\u4e91\u793e','\u5468\u4e5d\u826f','\u5cb3\u4e91\u9e4f','\u90ed\u5fb7\u7eb2','\u90ed\u9e92\u9e9f','\u5b59\u8d8a','\u5468\u661f\u9a70','\u534e\u6668\u5b87','\u5965\u5df4\u9a6c','\u7279\u6717\u666e','\u6768\u6c38\u4fe1','\u7ae0\u91d1\u83b1','\u534e\u519c\u5144\u5f1f','\u6885\u897f','\u848b\u660c\u5efa','\u5218\u6ce2','\u5f20\u7ff0','\u90d1\u723d','MC\u5929\u4f51','MC','GIAO','giao\u54e5','Giao\u54e5','cxk','\u817e\u683c\u5c14','\u51af\u5de9','\u90ed\u51ac\u4e34','\u5434\u519b\u8c79','\u6492\u8d1d\u5b81','\u738b\u5609\u5c14','\u767d\u656c\u4ead','\u9b4f\u5927\u52cb','\u9ec4\u660e\u660a','GEE','\u5c40\u5ea7','\u5b59\u7ea2\u96f7','\u97e9\u7f8e\u5a1f','\u738b\u521a','\u5f90\u68a6\u5706','\u738b\u4e00\u535a','\u6797\u6b22','\u7fdf\u5929\u4e34','\u6797\u540c\u5b66','Trump','\u7c73\u6d25\u7384\u5e08','\u674e\u6c38\u4e50','\u738b\u6e90','\u9ec4\u5b50\u97ec','\u96f7\u519b','\u738b\u955c\u6cfd','\u5fb7\u56fdBOY','\u5218\u6148\u6b23','\u9648\u51a0\u5e0c','\u6768\u8d85\u8d8a','\u738b\u5c3c\u739b','\u5510\u6cbb\u840d','\u8521\u4f9d\u6797','\u8521\u660e','\u90ed\u8001\u5e08','\u4e45\u672c\u96c5\u7f8e', '\u9648\u5c0f\u6625', '\u6556\u5382\u957f','\u6f58\u73ae\u67cf', '\u5f20\u5bb6\u8f89', '\u53e4\u5929\u4e50', '\u9648\u6d69\u6c11', '\u5218\u56fd\u6881', '\u5f20\u7ee7\u79d1', '\u9a6c\u9f99', '\u6d1b\u5929\u4f9d', '\u7b77\u5b50\u5144\u5f1f', '\u8d75\u4e3d\u84c9', 'MC\u4f20\u5947', '\u5468\u9e3f\u794e', '\u79d1\u6bd4', '\u9a6c\u98de','\u9a6c\u98de\u98de','\u674e\u8fde\u6770', '\u90ed\u5bcc\u57ce', 'Giao', '729\u58f0\u5de5\u573a', '\u5de8\u77f3\u5f3a\u68ee', '\u6296\u68ee', '\u6770\u68ee\u65af\u5766\u68ee', '\u674e\u739f', 'LexBurner', '\u4f5f\u5927\u4e3a', '\u4f0a\u4e3d\u838e\u767d\u9f20', '\u738b\u83ca', 'MC\u4f20\u5947', 'MOMOLAND', '\u6797\u4fca\u6770', '\u6731\u4e00\u9f99', '\u767d\u5b87', 'EMINEM', '\u706b\u7bad\u5c11\u5973101','\u738b\u5fc3\u51cc','\u674e\u5065', 'mc\u77f3\u5934', '\u5929\u624d\u54e5', '\u8bb8\u5d69', '\u5e9e\u9ea6\u90ce', '\u5f20\u5b87', '\u7f57\u7fd4', 'Jony J', '\u674e\u7199\u51dd', '\u79e6\u725b\u6b63\u5a01', '\u8fea\u4e3d\u70ed\u5df4','\u8d3e\u65af\u6c40\u6bd4\u4f2f','\u65ed\u65ed\u5b9d\u5b9d',\n                 ],\n        'e':['\u5168\u80fd\u6253\u5361\u6e38\u620f','bilibili\u65b0\u661f\u8ba1\u5212','\u9ec4\u7eff\u5408\u62184th','\u9ec4\u7eff\u5408\u6218','\u6297\u51fb\u80ba\u708e\u5927\u4f5c\u6218','\u6691\u671f\u7206\u809d\u6311\u6218','227\u5927\u56e2\u7ed3','227','227\u4e8b\u4ef6','AO3','2019\u65b0\u4eba\u5609\u5e74\u534e','2019\u9ad8\u8003\u5e94\u63f4','\u5168\u80fd\u6253\u5361\u6311\u6218','#\u521b\u4f5c\u65b0\u79c0\u5956#','\u521b\u4f5c\u65b0\u79c0\u5956','\u518d\u89c12018','\u518d\u89c12019','\u5bd2\u5047\u4e0d\u518d\u5495\u5495\u5495','\u767e\u4e07\u526a\u8f91\u5e08\u6311\u6218','\u53cc\u5341\u4e00\u79cd\u8349\u5927\u4f1a','\u9ad8\u8003','\u5168\u52e4\u6311\u6218','NBA\u7bee\u7403\u5927\u4f7f','\u5e72\u676f\uff01\u6821\u56ed\u5b63','\u5f00\u5b66','\u65b0\u5e74','\u767e\u4e07\u8c03\u97f3\u5e08','\u8fc7\u5e74','\u82b1\u5f0f\u62dc\u5e74\u5927\u8d5b','\u65b0\u661f\u8ba1\u5212','\u62dc\u5e74','2019\u62dc\u5e74\u796d','\u62dc\u5e74\u796d','2018\u62dc\u5e74\u796d\u5355\u54c1', '\u5e72\u676f\uff01\u4e16\u754c\u676f', '\u5f00\u5b66\u5927\u4f5c\u6218','\u53cc\u5341\u4e00','\u5723\u8bde\u8282','\u641e\u7b11\u7ade\u6280\u5927\u8d5b'],\n        'm':['\u9e21\u4f60\u592a\u7f8e','\u67aa\u5f39\u8f68\u8ff9','\u6d77\u7ef5\u5b9d\u5b9d','\u5f71\u6d41\u4e4b\u4e3b','\u6597\u5730\u4e3b','\u5c9b\u5e02\u8001\u516b','\u9e21','\u8bf8\u845b\u4eae','\u5c71\u4e1c\u536b\u89c6','\u8be5\u6765\u7684\u8fd8\u662f\u6765\u4e86','\u6211\u7684\u5973\u53cb\u8981\u5f81\u5a5a','\u6253\u5f00\u4f60\u7684\u5fc3\u7ed3','\u6c99\u96d5','\u604b\u7231\u5faa\u73af','\u8d4c\u795e','\u7bee\u7403','\u7231\u60c5\u516c\u5bd3','\u51ac\u6cf3\u602a\u9e3d','\u6d3e\u5927\u661f','\u732b\u548c\u8001\u9f20','\u674e\u4e91\u9f99','\u8001\u798f\u7279','\u738b\u53f8\u5f92','\u73af\u592a\u5e73\u6d0b','\u996d\u5708','\u673a\u7532\u6218\u58eb','\u8292\u79cd','\u7a9d\u7a9d\u5934','\u738b\u601d\u5987','\u4eae\u5251','\u6211\u548c\u4f60\u8361\u79cb\u5343','\u7231\u60c5\u516c\u5bd3','\u7231\u60c5\u516c\u5bd35','\u5bb6\u6709\u513f\u5973','\u6e38\u4e50\u738b\u5b50','\u9489\u9489','\u5de8\u9b54','\u5de8\u9b54\u6218\u5c06','\u66fe\u5c0f\u8d24','\u5415\u5b50\u4e54','\u5218\u661f','\u8001\u516b','\u6ce2\u6f9c\u54e5','\u91ce\u72fcdisco','Flower dance','\u8e29\u70b9','\u5f97\u5f97\u5f97','\u5e26\u5e26\u5927\u5e08\u5144','\u4f60\u592a\u7f8e','\u5510\u4f2f\u864e\u70b9\u79cb\u9999','\u5934\u53f7\u73a9\u5bb6','\u51cc\u9704','\u5df4\u5566\u5566\u5c0f\u9b54\u4ed9','\u82f1\u96c4\u8054\u76df','JOJO\u7684\u5947\u5999\u5192\u9669','jojo','jojo\u7684\u5947\u5999\u5192\u9669','\u9489\u9489','\u6539\u9769\u6625\u98ce\u5439\u6ee1\u5730','\u7c73\u5947\u5999\u5999\u5c4b','\u563b\u5530\u5530','\u8fd8\u73e0\u683c\u683c','\u5143\u9996','\u7c73Hotel','\u95f9\u592a\u5957','\u4e09\u56fd','\u4e2d\u56fd\u8bdd','\u7a77\u54c8','\u96e8\u5973\u65e0\u74dc','\u53ef\u53e3\u53ef\u4e50','\u5076\u50cf\u7ec3\u4e60\u751f','\u660e\u65e5\u65b9\u821f','LOL','\u7ae0\u9c7c\u54e5','\u5934\u6587\u5b57D','\u77ed\u7b1b\u5927\u9b54\u738b','\u5fa1\u5742\u7f8e\u7434','\u5148\u8fdb\u56fd','\u76d1\u72f1\u98ce\u4e91','\u840c\u5ba0','\u8d4c\u602a','\u5f20\u4f1f','\u8bf8\u845b\u5927\u529b','YOUTUBE','\u5348\u591c\u51f6\u94c3','\u8d1e\u5b50','\u5f71 \u6d41 \u4e4b \u4e3b','\u4e03\u6708\u4e03\u7231\u604b','\u7435\u7436\u884c','skr','SKR','\u5403\u9e21','\u7a9d\u7a9d\u5934\u4e00\u5757\u94b1\u56db\u4e2a','\u846b\u82a6\u5a03','\u6253\u7bee\u7403','\u846b\u82a6\u5144\u5f1f','\u91ce\u5473','\u91d1\u9986\u957f','\u6625\u665a','\u590f\u4e1c\u6d77','\u9b54\u517d\u4e16\u754c','\u514b\u7f57\u5730\u4e9a\u72c2\u60f3\u66f2','\u5965\u7279\u66fc','\u4e07\u5408\u5929\u5b9c','\u590d\u4ec7\u8005\u8054\u76df','\u706d\u9738','\u4ed9\u5251\u5947\u4fa0\u4f20','\u5492\u6028','\u77ac\u72f1\u5f71\u6740\u9635','\u738b\u8005\u8363\u8000','\u738b\u8005\u519c\u836f','\u7edd\u5730\u6c42\u751f','\u6f2b\u5a01','\u4e2d\u9910\u5385','\u590f\u96ea','\u85e4\u539f\u5343\u82b1','\u610f\u8bc6\u6d41','\u8c6b\u7ae0\u4e66\u9662','\u98df\u795e','\u54ea\u5412','\u6211\u7684\u4e16\u754c','dnf','DNF','\u6b22\u4e50\u6597\u5730\u4e3b','\u6881\u975e\u51e1','\u897f\u6e38\u964d\u9b54\u7bc7','\u5feb\u4e50\u661f\u7403','\u695a\u4e91\u98de','JOJO','\u9a9a\u745e','\u9a9a\u51f9\u745e','\u6b66\u6797\u5916\u4f20','\u4e00\u4eba\u996e\u9152\u9189','\u5047\u9762\u9a91\u58eb','\u56fe\u56fe','WINDOWS','WIN10','\u5929\u6c14\u4e4b\u5b50','\u5c0f\u732a\u4f69\u5947','\u718a\u51fa\u6ca1','\u5343\u672c\u6a31','\u91dc\u5c71\u884c','\u91d1\u5777\u5783','\u5c0f\u9ec4\u4eba','\u6b7b\u4f8d','\u4f60\u597d\u9a9a\u554a','\u4fe1\u8a93\u65e6\u65e6','\u5143\u9996\u7684\u6124\u6012','\u6c38\u4e50\u5927\u5e1d','\u9648\u60c5\u4ee4','\u84dd\u5fd8\u673a','\u9b4f\u65e0\u7fa1','\u9b54\u9053\u7956\u5e08','\u5929\u4f7f\u964d\u4e34\u5230\u6211\u8eab\u8fb9','\u5927\u53f8\u9a6c','\u548c\u73c5','\u897f\u6e38\u8bb0','\u5927\u7897\u5bbd\u9762','\u94a2\u94c1\u4fa0','\u62f3\u7687','\u706b\u5f71\u5fcd\u8005','\u7a7a\u6761\u627f\u592a\u90ce','\u90a3\u4e2a\u7537\u4eba','\u9b3c\u6ce35','\u5634\u5df4\u561f\u561f','\u7231\u7684\u9b54\u529b\u8f6c\u5708\u5708','\u70ed\u8840\u9ad8\u6821','\u5730\u94c1','\u6211\u7684\u82f1\u96c4\u5b66\u9662','\u7089\u77f3\u4f20\u8bf4','\u661f\u9645\u4e89\u9738','\u6587\u4f53\u4e24\u5f00\u82b1','PRODUCE 48','\u6211\u8981\u5438\u65fa\u4ed4\u725b\u5976','\u751f\u50fb\u5b57','\u6d2a\u4e16\u8d24','\u516d\u5b66','\u4e1c\u65b9PROJECT','\u4e1c\u65b9project', 'UNDERTALE','\u4f20\u8bf4\u4e4b\u4e0b','YTPMV','\u30c0\u30c0\u30c0\u30c0\u5929\u4f7f', '\u56e7\u4ed9','MINECRAFT','COOKIE\u2606','VTuber','VAN','\u6f6e\u6c55\u82f1\u8c6a\u4f20', '\u55b5\u5185', '\u4e1c\u65b9\u9b3c\u5f62\u517d','\u8f89\u591c\u5927\u5c0f\u59d0\u60f3\u8ba9\u6211\u544a\u767d','\u6587\u827a\u590d\u5174','\u5218\u9192','\u9ec4\u91d1\u4e4b\u98ce','SANS','\u865a\u62dfYOUTUBER','\u865a\u62df\u4e3b\u64ad', '\u55b5\u5e15\u65af','\u690d\u7269\u5927\u6218\u50f5\u5c38','\u4e1c\u65b9\u9985\u6302\u7092\u996d','\u522b\u4eba\u7684\u4e16\u754c', '\u771f\u590f\u306e\u591c\u306e\u6deb\u5922', '\u6771\u65b9\u4e71\u3005\u6d41', '\u84dd\u84dd\u8def', '\u521b\u4ef7\u5b66\u4f1a', '\u53e4\u5178\u6d3e\u6deb\u5922', '\u661f\u4e4b\u5361\u6bd4', '\u5730\u94c1\u97f3MAD', '\u8d2a\u73a9\u84dd\u6708', '\u604b\u4e0e\u5236\u4f5c\u4eba', '\u9a6c\u51ac\u6885', '\u9ad8\u8fbe', '\u5fa1\u5742\u7434\u9b54', '\u65fa\u4ed4\u725b\u5976', '\u5730\u4e0b\u57ce\u4e0e\u52c7\u58eb', '\u54c6\u5566A\u68a6', '\u9752\u86d9\u65c5\u884c', '\u4e2d\u56fd\u6709\u563b\u54c8','\u661f\u7403\u5927\u6218', '\u4e2d\u56fd\u68a6\u4e4b\u58f0','\u5df4\u62c9\u62c9\u5c0f\u9b54\u4ed9', '\u4f60\u7684\u540d\u5b57', '\u6210\u9f99\u5386\u9669\u8bb0', '\u82b1Q', '\u6d77\u8349\u821e', '\u5012\u60ac\u7684\u6a58\u5b50', '\u997f\u72fc\u4f20\u8bf4', '\u70e4\u9762\u7b4b', '\u7075\u9b42\u6492\u76d0', '\u5b59\u609f\u7a7a','\u4ebf\u4e07\u8c03\u97f3\u5e08', '\u7231\u9171', '\u7b2c\u4e94\u4eba\u683c', 'fantastic baby', '\u8d77\u98ce\u4e86', 'B\u7ad9\u65b9\u6587\u5c71', '\u5510\u4f2f\u864e', '\u5d29\u574f3', '\u5d29\u574f\u4e09','panama', '\u6d41\u6d6a\u8bd7\u4eba', '\u541f\u6e38\u8bd7\u4eba','\u5927\u79e6\u5e1d\u56fd', '\u7ea2\u8b66', '\u60c5\u6df1\u6df1\u96e8\u8499\u8499', '\u590d\u4ec7\u8005\u8054\u76df3',  '\u5317\u6597\u795e\u62f3', '\u4e16\u754c\u676f', 'mugen', '\u62fc\u591a\u591a', '\u521b\u9020101','NBA', 'Megalo Box', '\u5b66\u732b\u53eb', '\u5f69\u8679\u516d\u53f7', '\u9547\u9b42', '\u5de5\u4f5c\u7ec6\u80de', '\u7ea2\u8272\u8b66\u6212', '\u4e2d\u56fd\u65b0\u8bf4\u5531', '\u4e2d\u56fd\u597d\u58f0\u97f3','\u6765\u81ea\u661f\u661f\u7684\u4f60', 'DOTA2', '\u5965\u8fd0\u4f1a', '\u5361\u8def\u91cc', '\u521b\u9020101', '\u751f\u5316\u5371\u673a7', '1818\u9ec4\u91d1\u773c', '\u6cfd\u91ce\u87b3\u8782', '\u6211\u7684\u6ed1\u677f\u978b', 'HandClap', '\u5168\u5458\u6076\u4eba', 'FATE', '\u5e95\u7279\u5f8b\uff1a\u53d8\u4eba', '\u6781\u4e50\u51c0\u571f', 'UNITY', '\u94c1\u9f7f\u94dc\u7259\u7eaa\u6653\u5c9a', '\u7eaa\u6653\u5c9a', '\u592a\u543e\u7ed8\u5377', '\u6c99\u6f20\u9a86\u9a7c', '\u902e\u867e\u6237', '\u540d\u4fa6\u63a2\u67ef\u5357','\u5e95\u7279\u5f8b', '\u597d\u55e8\u54df', 'havana', '\u5927\u5b8b\u63d0\u5211\u5b98', '\u591a\u5566A\u68a6', 'RED ZONE', 'Godzilla','\u5904\u5904\u543b','\u62ac\u68fa','\u9ed1\u4eba\u62ac\u68fa', '\u7504\u5b1b\u4f20', '\u9b3c\u706b\u5c11\u5e74', '\u6de1\u9ec4\u7684\u957f\u88d9', '\u9752\u6625\u6709\u4f602', '\u6de1\u9ec4\u7684\u957f\u88d9\uff0c\u84ec\u677e\u7684\u5934\u53d1', '\u4e1c\u65b9\u590f\u94f6\u68a6', '\u54b1\u4eec\u88f8\u718a', '\u53e3\u888b\u5996\u602a', '\u5ba0\u7269\u5c0f\u7cbe\u7075', '\u7cbe\u7075\u5b9d\u53ef\u68a6', '\u7956\u5b89', '\u539a\u5927\u6cd5\u8003','\u52a8\u68ee'\n             ]\n        }","d92bcfca":"# Assign class type to data\n\ndf['class']= np.nan\nfor i in range(len(df)):\n    if df['tag'][i] in tagindex['p']:\n        df['class'][i] = 'p'\n    elif df['tag'][i] in tagindex['e']:\n        df['class'][i] = 'e'\n    elif df['tag'][i] in tagindex['m']:\n        df['class'][i] = 'm'\n    else:\n        df['class'][i] = 'non'\n        \ndf.to_csv(r'df.csv',encoding='utf-8-sig')","44bc066f":"# Now we get the overall top 10 celebrities in Bilibili.\n\ntopplayp = df[df['class']=='p'].play.groupby(df.tag).sum().sort_values(ascending= False)\ntopplaym = df[df['class']=='m'].play.groupby(df.tag).sum().sort_values(ascending= False)\n\ntopplayp.head(10)","211832f6":"matplotlib.font_manager.FontProperties().get_family()","f3f8c39d":"#matplotlib.rcParams['font.family'] = font_path\n#myfont = matplotlib.font_manager.FontProperties(fname= font_path)  \n#myfont = matplotlib.font_manager.FontProperties(fname=\"Droid Sans Fallback\")\n#matplotlib.rcParams['axes.unicode_minus']=False#\u89e3\u51b3\u4fdd\u5b58\u56fe\u50cf\u65f6\u8d1f\u53f7'-'\u663e\u793a\u4e3a\u65b9\u5757\u7684\u95ee\u9898\n#plt.rcParams['font.sans-serif']=['SIMHEI'] \n#plt.rcParams['font.family'] = ['Droid Sans Fallback']# \u7528\u6765\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u6807\u7b7e  \n#plt.rcParams['font.family'] = ['Times New Roman']\n\n\n#topplayp.head(10).plot(kind = 'barh')","88b20c0d":"# Create table data by week, tag, class and sorted by play_num\n\ntopplay = df.groupby(['week', 'tag','class'], as_index=False)['play'].sum().sort_values(by=['week','play'],ascending= False)\n\ntopplay.to_excel(r'topplay.xlsx',encoding='utf-8-sig')\n\nfor i in range(len(topplay)):\n    topplay['week'][i] = datetime.strptime(str(topplay['week'][i]),'%Y%m%d').date()\n    \ntopplay.head()","69d8e146":"# Instead the overall Top 10, what about the everyweek performance? \n# Do bilibili fans stick to their favorites for a long time in this fast-food environment?\n\nfrom matplotlib import style\nstyle.use('fivethirtyeight')\n\np_week = topplay[topplay['class'] == 'p']\np_week = p_week.reset_index()\np_week['Rank'] = p_week.groupby(by=['week'])['play'].transform(lambda x: x.rank(method='first', ascending=False))\ntopweek = p_week[p_week['Rank'] == 1]\ntopweek = topweek.reset_index()\ntopweek2020 = topweek[:15]\ntopweek2019 = topweek[15:67]\ntopweek2018 = topweek[67:]","2052a348":"# Now because all Chinese Characters can't show up, I just just use my screen shot instead. \n# Here it is, the top celebrity of each week for 3 years.\n\n''''\ntop2020 = plt.bar(topweek2020['week'],topweek2020['play'],width = 5)\n\n\n# zip joins x and y coordinates in pairs\nfor x,y,z in zip(topweek2020['week'],topweek2020['play'],topweek2020['tag']):\n\n    label = str(z)\n\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 size = 10,\n                 ha='center') # horizontal alignment can be left, right or center\n''''","de75760d":"# I picked 3 new, good looking, discussion raised idols:\n# Chirs Wu: a Chinese-Canadian actor, rapper, singer, record producer, and model. He is a former member of South Korean-Chinese boy band EXO and its subgroup EXO-M under SM Entertainment. https:\/\/en.wikipedia.org\/wiki\/Kris_Wu\n# Cai XuKun: better known as Kun, a Chinese singer, dancer, rapper, and songwriter. He is active as a solo artist and was the leader and center of the Chinese boy group, Nine Percent. https:\/\/en.wikipedia.org\/wiki\/Cai_Xukun\n# Xiao Zhan: also known as Sean Xiao, a Chinese actor and singer. He is a member of the male idol group X Nine. Xiao received recognition for his roles in the drama The Untamed (2019). https:\/\/en.wikipedia.org\/wiki\/Xiao_Zhan\n\nplt.figure(figsize=[14, 7])\nplt.plot(topplay[topplay['tag'] == '\u8521\u5f90\u5764']['week'],topplay[topplay['tag'] == '\u8521\u5f90\u5764']['play'])\nplt.plot(topplay[topplay['tag'] == '\u5434\u4ea6\u51e1']['week'],topplay[topplay['tag'] == '\u5434\u4ea6\u51e1']['play'])\nplt.plot(topplay[topplay['tag'] == '\u8096\u6218']['week'],topplay[topplay['tag'] == '\u8096\u6218']['play'])\nplt.ylabel('View_num')\nplt.legend(labels = ['Cai Xu Kun','Chris Wu','Xiao Zhan'], loc = 'best')","6b2d2c84":"# Get the detail info for these 3.\n\ncai = []\nfor i in range(len(dataall)):\n    try:\n        if '\u8521\u5f90\u5764' in dataall.loc[i,'tag_list']:\n            cai = cai + [str(i)]\n        else:\n            pass\n    except TypeError as reason:\n        print(str(reason) + str(i))\n        \ncai_data = dataall.iloc[cai]\n\nwu = []\nfor i in range(len(dataall)):\n    try:\n        if '\u5434\u4ea6\u51e1' in dataall.loc[i,'tag_list']:\n            wu = wu + [str(i)]\n        else:\n            pass\n    except TypeError as reason:\n        print(str(reason) + str(i))\n        \nwu_data = dataall.iloc[wu]\n\nxiao = []\nfor i in range(len(dataall)):\n    try:\n        if '\u8096\u6218' in dataall.loc[i,'tag_list']:\n            xiao = xiao + [str(i)]\n        else:\n            pass\n    except TypeError as reason:\n        print(str(reason) + str(i))\n        \nxiao_data = dataall.iloc[xiao]\n\nwu_data.head()","0f8a0272":"# Here's the tricky part, if we want to scrap Danmaku from a video, we need to get the cid first.\n# This time we use Request, becuase the unicode problem.\n\ndef get_cid(aid):\n    # print(aid)\n    url = \"https:\/\/www.bilibili.com\/video\/av\"+aid\n    r = requests.get(url, headers=header)\n    match_list = re.findall('\"stat\":{\"aid\":'+aid+'.*?\"cid\":\\d*?,', r.text)\n    if len(match_list) == 0:\n        print('============================================')\n        print(str(aid))\n        print('============================================')\n        cid = \"\"\n    else:\n    # print (match_list)\n        cid = match_list[0][match_list[0].index('cid')+5:-1]\n        print (\"cid = \" + cid)\n    return cid\n","03d37cf0":"# I pick this video becuase it's a fun video. \n# It is about Wu's famous not-so-good rap impromptu remix with Lady Gaga's Poker Face.\n# Note this clip was before the release of Wu's EP.\n\nwu_data.loc[3691]","72259c4b":"# Create header and get the cid.\n\nheader = {\n    'Accept-Language': 'zh-CN,zh;q=0.8',\n    'Referer': 'http:\/\/www.bilibili.com\/',\n    'User-Agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64; rv:45.0) Gecko\/20100101 Firefox\/45.0'\n}\n\nget_cid('45559730')","12197cf0":"# Using cid we can now locate the danmaku for a video. \n# And because there are simply too many danmaku, bilibili clears some of them from time to time. So we also need to retrieve historical data.\n\ndef get_danmuku(cid,date):\n    danmuku_api = \"https:\/\/api.bilibili.com\/x\/v2\/dm\/history?type=1&oid={}&date={}\".format(str(cid),str(date))\n    r2 =requests.get(danmuku_api, headers=header)\n    soup = BeautifulSoup(r2.content, 'lxml')\n    danmus = soup.find_all('d')\n    content = []\n    t1 = []\n    timestr = []\n    for danmu in danmus:\n        content = content + [danmu.string]\n        attr = danmu['p'].split(',')\n        t1 = t1 + [str(attr[0])]\n        t2 = attr[4]\n        timestr = timestr + [time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(float(t2)))]\n    danmaku = pd.DataFrame(list(zip(content,t1, timestr)), \n               columns =['conent','t_video', 'time_real'])\n    return danmaku","9b4b72ec":"# Get the daily danmaku, and simply combine together.\n\ndef getall(cid,start, end):\n    date_pointer = datetime.strptime(start, '%Y-%m-%d').date()\n    while date_pointer <= datetime.strptime(end, '%Y-%m-%d').date():\n        danmaku = get_danmuku(str(cid), str(date_pointer))\n        danmaku_all = pd.DataFrame()\n        danmaku_all = danmaku_all.append(danmaku)\n        date_pointer += timedelta(days=1)\n    return danmaku_all","c22ef7b1":"# For historical danmaku, we need to login.\n\nheader = {\n        'User-Agent':'Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/52.0.2743.116 Safari\/537.36', \n                     'Cookie': \"l=v; _uuid=C6B1B71C-8DFE-7F26-C786-F74F9000A54535885infoc; LIVE_BUVID=AUTO2415744214359471; CURRENT_FNVAL=16; sid=lshjf3et; stardustvideo=1; rpdid=|(umu)ukYY)k0J'ul~Rl|||Rm; laboratory=1-1; stardustpgcv=0606; im_notify_type_8950700=0; INTVER=1; CURRENT_QUALITY=80; buvid3=9EDB7255-52DF-401B-B1D9-F909000AB196155816infoc; DedeUserID=8950700; DedeUserID__ckMd5=bf19e4ca395f1eca; SESSDATA=4297ed45%2C1599117382%2C0f227*31; bili_jct=3344d49c3da9bb2b0b646bf0bddb8383; bp_t_offset_8950700=363949515715854964\"\n}","c10b7954":"# The new EP \u5927\u7897\u5bbd\u9762 is release 2019.04.19, so we divide the danmaku into BEFORE and AFTER.\n\ncid = '79773675'\ngetall1 = getall(cid,'2019-03-07', '2019-03-16')\ngetall2 = getall(cid,'2019-04-19', '2019-04-28')","9baee5bc":"# collect all danmaku together in a str\n\ndanmulist1=str()\nfor i in range(len(getall1)):\n    danmulist1 = danmulist1 + str(getall1['conent'][i]) + ','\n\ndanmulist2=str()\nfor i in range(len(getall2)):\n    danmulist2 = danmulist2 + str(getall2['conent'][i]) + ','\n\n# import Word Segmentation Dictionary\nimport jieba","9e819f43":"# Add and delete some words for our case\n\njieba.add_word('\u8521\u5f90\u5764')\njieba.add_word('\u6587\u4f53\u4e24\u5f00\u82b1')\njieba.add_word('\u4e24\u5f00\u82b1')\njieba.add_word('\u9632\u6291\u90c1')\njieba.add_word('\u82cf\u97f5\u9526')\njieba.add_word('\u6709\u624d')\njieba.add_word('\u6f6e\u7537')\njieba.add_word('\u5965\u5229\u7ed9')\njieba.add_word('\u70e6\u70e6')\njieba.add_word('\u6709\u624d')\njieba.add_word('\u26a1')\njieba.add_word('\u6881\u975e\u51e1') \njieba.add_word('\u975e\u51e1\u54e5')\njieba.add_word('\u5927\u7897\u5bbd\u9762')\njieba.add_word('\u6768\u8d85\u8d8a')\njieba.add_word('\u74dc\u6002')\njieba.add_word('\u6211\u9519\u4e86')\njieba.add_word('\u51e1\u51e1')\njieba.add_word('\u6296\u817f')\njieba.add_word('\u6253\u8138')\njieba.add_word('\u7528\u4ec0\u4e48\u8fd8')\njieba.add_word('\u9000\u51fa\u76f4\u64ad\u95f4')\njieba.add_word('\u90aa\u9b45\u4e00\u7b11')\njieba.add_word('\u4ea6\u51e1\u54e5')\njieba.add_word('\u771f\u7537\u4eba')\njieba.add_word('\u7b11\u6b7b')\njieba.add_word('\u518d\u6765')\n\njieba.del_word('\u540d')\njieba.del_word('\u573a\u9762')\njieba.del_word('\u624d')\njieba.del_word('\u6709')\njieba.del_word('\u6f6e')\njieba.del_word('\u7537')\njieba.del_word('\u5965\u5229')\njieba.del_word('\u7ed9')\njieba.del_word('\u770b\u70e6')\njieba.add_word('\u540d\u573a\u9762') \njieba.del_word('\u7684')\njieba.del_word('\u8fd9\u4e2a')\njieba.del_word('\u6253\u884c')\njieba.del_word('\u52a0\u62ff')\njieba.del_word('\u6253')\njieba.del_word('\u8138')\njieba.del_word('\u5927\u4eba')\njieba.del_word('\u6211\u9519')\njieba.del_word('\u4e4b\u4f5c')\njieba.del_word('\u76f4\u64ad')\njieba.del_word('\u5171')\njieba.del_word('\u90aa')\njieba.del_word('\u771f')\njieba.del_word('\u4ea6')\njieba.del_word('\u9000\u51fa')","fe524ee2":"# Word Seperation\n\nseg_list1=jieba.cut_for_search(danmulist1)\nword_split1 = ' '.join(seg_list1)\n\nseg_list2=jieba.cut_for_search(danmulist2)\nword_split2 = ' '.join(seg_list2)","0010669f":"danmuwc1 = WordCloud(max_words=100, \n               #stopwords=stop_word,\n               scale = 15,\n              #max_font_size=200, \n              background_color='white',\n              font_path=font_path,\n              stopwords=['\u54c8\u54c8','\u54c8\u54c8\u54c8','\u54c8\u54c8\u54c8\u54c8'],\n               #width=1000, \n               #height=860 \n              )\n#image_colors = ImageColorGenerator(back_color)\nplt.figure(figsize=(8,8),dpi=180)\ndanmuwc1.generate(word_split1)\nplt.imshow(danmuwc1)\nplt.axis('off')\n","ca5205ab":"danmuwc2 = WordCloud(max_words=100, \n               #stopwords=stop_word,\n               scale = 15,\n              #max_font_size=200, \n              background_color='white',\n              font_path=font_path,\n              stopwords=['\u54c8\u54c8','\u54c8\u54c8\u54c8','\u54c8\u54c8\u54c8\u54c8'],\n               #width=1000, \n               #height=860 \n              )\n#image_colors = ImageColorGenerator(back_color)\nplt.figure(figsize=(8,8),dpi=180)\ndanmuwc2.generate(word_split2)\nplt.imshow(danmuwc2)\nplt.axis('off')","1a2719fc":"### The red line is the video viewer count of Chris Wu. The spikes are respectively the following events:\n* Became a mentor in *The Rap of China*, a Chinese rap reality show.\n* New movie *Never Gone* released where he plays the leading actor part.\n* The continous halo effects of TV and reality shows.\n* New EP released where he underbrags himself as people were talking about his not-so-good improvised rap performance in a reality show.(yes, he's in several reality shows.)\n* People compare his with the new star Cai Xu Kun.\n* The end of year All Star Auto-tune recap.\n\nDespite the tendency that idols are more likely to be overrated by their fans, Chris Wu seems to progress in 2019. Espeically after his well-received EP: \u5927\u7897\u5bbd\u9762 *Big Bowl Thick Noodle*, where he admited that his rap performance is not that good but he was always happy to amuse others. This modest gesture, making fun of himself, gained some idol points for him.","de6b836f":"### Here's some fun part about Chinese newly emerged idols. Most of them became famous from talents shows and soon grew to THE megastars lacking of any dancing\/acting\/singing skills but were supported by huge fans base,aka the power of capital.\n### The modern-day fan economy in China is very special and different from any other places. As the stars are so liked by their fans who strive to make their idols' song hit in any music charts, which is a new ritual imported from Korea k-pop culture. And these wins lead to precious opportunites. The popular stars get movies and TV shows, become brand ambassador and profit from their massive fan base.\n### \u201cNo Fan, no market\u201d is therefore the new credo in China's entertainment market. But at the meanwhile, the new rising stars don't have the abilities to shine constantly. This inevitably causes a decline in quality of Chinese pop music\/TV series and movie industry.\n### Conerned about this phenonmenon, I'm curious about the \u201cLittle Fresh Meat\u201d and wondering if they are popular on Bilibili.com.\n","f5f08055":"topplayp.head(10).plot(kind = 'barh')","4b6df2d5":"## Tag Anlaysis","52e91c2d":"## Recap\n\n* We used two approach to scrape a website.\n* We used wordcloud to see the most popular contents on Bilibili.com and get an idea about people's sentiment change before and after a rapper's EP release.\n* We analyzed the Bilibili video tags and learnt the top 10 celebrities\/events\/materials for each week\/each year.\n* We compared 3 \"little fresh meat\" idols by their viewer number.","58c12585":"#### People come and go, but classics stay.","8bb01ffe":"#### The Before-EP Danmaku style is more of a sarcasm and discussion about the content.","eed44955":"![topplay.png](attachment:topplay.png)","ed6dc34f":"#### The release of \u5927\u7897\u5bbd\u9762 makes me wonder if bilibili fans changes attitude towards Chris Wu.","47153141":"### The yellow line is a new actor came into the public sight thanks to a bromance\/BL TV series around July 2019.\nWhile that TV show is not so attractive to bilibili fans, he hit TOP 1 in the chart later in March 2020 as his fans tip-off the AO3 (Archive of Our Own) website to china government, pushing the latter to put a ban on the fanfiction website and hence starting a huge discuss of responsibilities of idols and boundries of fans.\nAs him and his fans gave the content creation platform a hard time, some screenwriters\/directors and other creators have made an annoncement of not using the new star ever again. The water that bears the boat is the same that swallows it up.","9a3444a3":"#### The top 10 celebrities are E-sports players, Internet singers, Internet celebrities, emerging idols, a comedian and a singer.","4acbd291":"## Web Scraping","4b9f1939":"#### The After-EP Danmaku style is full of apologizes. Partly because the EP \u5927\u7897\u5bbd\u9762, partly because they think Cai XuKun is worse.","863eb7a1":"### The blue line is the video viewer count of Cai Xu Kun, the newly rising star from a tanlent show.\nHe claims to be good at singing\/dancing\/rap\/basketball skills and Bilibili users are more than happy to promote.\n\nDespite the lack of work, he constantly stays on the chart. And his popularity didn't get weak after the young rap star sued Bilibili for inaction of auto-tune videos in April 2019.\n","970b3d59":"### The auto-tune remix-themed content (oto MAD) videos are huge in China and compose a big part of content in B.com. More importantly, the content is all user generated, hence it's THE sensitive barometer for us to discover the most famous(if not popular) celebrities among the young generation.","8f89a1c6":"![b.jpg](attachment:b.jpg)","46f64527":"#### Tags are used to identify the video content. We can use this information directly.","e50eed7f":"### This is a spider project of Bilibili.com, a Chinese video sharing website. It attracts mostly Y generation people and is very famous for the feature: bullet comments (Danmaku in Japanese), as viewers can type in their real time short comments on the screen and share with everyone. You can't send the bullet comments unless you're a member. And the membership is also something worth talking about. To join the website, instead of simply typying in your user_name and password, you need to pass an exam. It's more like a test to check if you're an insider of the new generation world. Of course you can pick the genre you think you're good at: music, movie, cartoon, tech, history, etc. Increasing the difficulty of joining creates an insider proud and that's why it attracts so many yongsters as they know that they will find people have common interests here. More info here: https:\/\/en.wikipedia.org\/wiki\/Bilibili\n\n#### - Goal\nThis project aims to create web scraping spider to get top videos on the webiste by month\/week, indentify the hottest stat\/idols in China and get an idea about their populairty by sentiment analysis.\n\n#### - Content\n* Website Scraping\n* Tag Analysis\n* Popularity demonstration of 3 idols\n* Danmaku Analysis\n\n#### -package: \n* urllib.request\n* requests\n* re\n* bs4\n* matplotlib\n* wordcloud\n* time\n* datetime\n* jieba","baf9cc39":"![2020.png](attachment:2020.png)\n![2019.png](attachment:2019.png)\n![2018.png](attachment:2018.png)","0044ced5":"Wanted to create the plot, but the Chinese characters just can't show up. I've tried several solutions I found online, but...\nSo I put a screenshot I runned on my computer.","8ac7fa72":"## Popularity demonstration of 3 idols","a0130303":"## Comment Bullets(Danmaku) Analysis"}}