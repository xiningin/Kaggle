{"cell_type":{"4aba8932":"code","f8d3835b":"code","108a6de6":"code","817482ed":"code","f72ca67c":"code","33f40f46":"code","ce700ab2":"code","43281a53":"code","c7d3d168":"code","2c861f8c":"code","2f4ae6ba":"code","5b894b7e":"code","0c90cdee":"code","823b6237":"code","6604d67e":"markdown","9f2db21c":"markdown","ca367591":"markdown","0b678509":"markdown","a58c1bdf":"markdown","6b42cb11":"markdown","e5b0908c":"markdown"},"source":{"4aba8932":"from google.colab import drive\ndrive.mount('\/content\/drive')","f8d3835b":"!unzip \"\/content\/drive\/MyDrive\/Colab Notebooks\/Dog_Cat\/train.zip\" -d \"\/content\/drive\/MyDrive\/Colab Notebooks\/Dog_Cat\/\"","108a6de6":"!pip install tensorflow-addons\nimport tensorflow_addons as tfa\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","817482ed":"import glob\nbase_path = \"\/content\/drive\/MyDrive\/Colab Notebooks\/Dog_Cat\/\"\ntrain_path = f\"{base_path}\/train\"\ntest_path = f\"{base_path}\/test\"\ndog_train_set = (glob.glob(f\"{train_path}\/dog.*.jpg\"))\ncat_train_set = (glob.glob(f\"{train_path}\/cat.*.jpg\"))\nprint(f\"{len(dog_train_set)}, {len(cat_train_set)}\")","f72ca67c":"class_name = {0:\"cat\", 1:\"dog\"}\nX_df = pd.DataFrame(columns=[\"path\", \"target\"])\nfor path in dog_train_set:\n    s = pd.Series([path, 1], index=[\"path\", \"target\"])\n    X_df = X_df.append(s, ignore_index=True)\nfor path in cat_train_set:\n    s = pd.Series([path, 0], index=[\"path\", \"target\"])\n    X_df = X_df.append(s, ignore_index=True)\nX_df","33f40f46":"from keras.preprocessing.image import load_img\nimport random\nnum = random.randint(0, len(X_df.index))\nimg = load_img(X_df[\"path\"][num], target_size=(224,224))\nplt.axis(\"off\")\nplt.title(class_name[X_df[\"target\"][num]])\nplt.imshow(img)","ce700ab2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_df[\"path\"],\n                              X_df[\"target\"],\n                              test_size=0.1,\n                              random_state=1031)\nX_train.shape, X_test.shape, y_train.value_counts(), y_test.value_counts()","43281a53":"train_df = pd.concat([X_train, y_train], axis=1)\nvalid_df = pd.concat([X_test, y_test], axis=1)\ntrain_df[\"target\"] = [str(val) for val in train_df[\"target\"]]\nvalid_df[\"target\"] = [str(val) for val in valid_df[\"target\"]]\ntrain_df.shape, valid_df.shape","c7d3d168":"batch_size, target_size = 32, (224,224)\ntrain_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\nvalid_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\ntrain_generator = train_datagen.flow_from_dataframe(dataframe=train_df,x_col=\"path\",y_col=\"target\",target_size=target_size,batch_size=batch_size,class_mode='categorical')\nvalid_generator = valid_datagen.flow_from_dataframe(dataframe=valid_df,x_col=\"path\",y_col=\"target\",target_size=target_size,batch_size=batch_size,class_mode='categorical',shuffle=False)","2c861f8c":"vgg = VGG16(include_top=False, input_shape=(224,224,3))\nvgg.trainable = False\n#vgg.summary(), vgg.layers","2f4ae6ba":"from keras.models import Model\nfrom keras.layers import Flatten, Dense, BatchNormalization, GlobalAveragePooling2D\nfor l in vgg.layers:\n    l.trainable = False\n#x = BatchNormalization()(vgg.output)\nx = GlobalAveragePooling2D()(vgg.output)\nx = Flatten()(x)\nx = Dense(units=2048, activation=\"relu\")(x) #\u524d\u4e00\u5c64\u53c3\u6578\u91cf7*7*512=25088\uff0c\u6bcf\u4e00\u5c64\u964d\u4f4e1\/10 = 25088\/2508\uff0c\u627e2508\u6700\u63a5\u8fd1\u76842\u5e73\u65b9\u500d\u6578\nx = Dense(units=256, activation=\"relu\")(x)\nx = Dense(units=2, activation=\"softmax\")(x)\ncnn = Model(inputs=vgg.input, outputs=x)\ncnn.compile(optimizer=tfa.optimizers.RectifiedAdam(), loss='categorical_crossentropy', metrics=['accuracy'])\ncnn.summary()","5b894b7e":"import os\nmodel_dir = base_path\nfile_name = \"dog_cat_vgg16-best-model\"\nmodelfile = f\"{model_dir}\/{file_name}.h5\"\nlogfile = f\"{model_dir}\/{file_name}_training.log\"\nif not os.path.exists(model_dir):\n  os.makedirs(model_dir)\nmodel_chpo = keras.callbacks.ModelCheckpoint(modelfile, monitor='val_accuracy', save_best_only=True)\nearlystop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=3, verbose=1)\ncsv_logger = keras.callbacks.CSVLogger(logfile)\ncallbacks_list = [model_chpo, earlystop, csv_logger]","0c90cdee":"epochs = 50\ncnn.fit(train_generator,\n    epochs=epochs,\n    validation_data=valid_generator,\n    # class_weight=class_weights,\n    batch_size=batch_size,\n    callbacks=callbacks_list)","823b6237":"model_dir = base_path\nfile_name = \"dog_cat_vgg16-best-model\"\nlogfile = f\"{model_dir}\/{file_name}_training.log\"\n\ndef plot_accuracy_loss(file_name):\n    import pandas as pd\n    log_data = pd.read_csv(file_name)\n    acc = log_data['accuracy']\n    val_acc = log_data['val_accuracy']\n    loss = log_data['loss']\n    val_loss = log_data['val_loss']\n    import matplotlib.pyplot as plt\n    plt.style.use('ggplot')\n    plt.figure(figsize=(16, 8))\n    plt.subplot(1, 2, 1)\n    plt.plot(log_data['epoch'], acc, label='Training Accuracy')\n    plt.plot(log_data['epoch'], val_acc, label='Validation Accuracy')\n    plt.legend(loc='lower right')\n    plt.title('Training and Validation Accuracy')\n    plt.subplot(1, 2, 2)\n    plt.plot(log_data['epoch'], loss, label='Training Loss')\n    plt.plot(log_data['epoch'], val_loss, label='Validation Loss')\n    plt.legend(loc='upper right')\n    plt.title('Training and Validation Loss')\n    return plt.show()\nplot_accuracy_loss(logfile)","6604d67e":"# \u8a13\u7df4\u6a21\u578b","9f2db21c":"# \u5c0e\u5165VGG16\u6a21\u578b","ca367591":"# \u4fdd\u7559VGG16_Flatten\u524d\u6240\u6709\u7d50\u69cb\uff0c\u81ea\u884c\u4fee\u6539\u8f38\u51fa\u5c64\u3002","0b678509":"# \u5207\u5206\u8cc7\u6599","a58c1bdf":"# \u8a2d\u5b9a\u5132\u5b58\u6700\u4f73\u6a21\u578b\u53c3\u6578\u3001\u63d0\u65e9\u505c\u6b62\u6a21\u578b\u8a13\u7df4\u3001\u5132\u5b58History","6b42cb11":"# \u4f7f\u7528ImageDataGenerator\u6e96\u5099\u8cc7\u6599\u7684\u65b9\u6cd5","e5b0908c":"# \u8a2d\u5b9a\u8cc7\u6599\u3001\u986f\u793a\u5716\u7247"}}