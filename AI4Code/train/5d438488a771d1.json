{"cell_type":{"55aa0f03":"code","16a8a5c5":"code","aca55080":"code","ed92af30":"code","59504f5c":"code","3bd3dbef":"code","dd7a1895":"code","c7bcbd97":"code","540590c0":"code","d015e8a7":"code","66c5616b":"code","ac4290a0":"code","4c570865":"code","fcb1e4c6":"code","f7ed327a":"code","eb160e35":"code","465a9947":"code","c2755eaa":"code","85f54844":"code","96d866de":"code","328ea023":"markdown","dd1f56f8":"markdown","bf91b392":"markdown","26afdb29":"markdown","c9524929":"markdown","5f165c68":"markdown","2a2ebc83":"markdown","89fe4d26":"markdown","cbd41991":"markdown","033a712f":"markdown","dcaf1e07":"markdown","c418bcb7":"markdown","43077053":"markdown","82522e3c":"markdown"},"source":{"55aa0f03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.ensemble import RandomForestRegressor\nimport datetime\nsns.set()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16a8a5c5":"def map_container(x):\n    if x == '330ml':\n        container = 'can'\n    elif x == '500ml':\n        container = 'glass'\n    else:\n        container = 'plastic' \n    return container\n\ndef map_capacity(x):\n    if x == 'can':\n        capacity = '330ml'\n    elif x == 'glass':\n        capacity = '500ml'\n    else:\n        capacity = '1.5lt'\n    return capacity\n\ndef graph_demand(df, brands, a):\n    fig, axes = plt.subplots(nrows = len(brands), figsize = (15, 25))\n    for i in range(len(brands)):\n        sns.scatterplot(x=train.quantity[train.brand == brands[i]], y=train.price[train.brand == brands[i]], \n                    hue = train.shop[train.brand == brands[i]], alpha = a, ax = axes[i])\n        axes[i].set(title = brands[i], xlabel = 'Quantity', ylabel = 'Price')\n\n    fig.tight_layout()\n    plt.show()","aca55080":"train = pd.read_csv('\/kaggle\/input\/predict-demand\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/predict-demand\/test.csv')\ntrain.dropna(how = 'all', inplace = True)\ntest.dropna(how = 'all', inplace = True)\ntrain.date = pd.to_datetime(train.date)\ntest.date = pd.to_datetime(test.date)\ntrain.set_index('date', inplace = True)\ntest.set_index('date', inplace = True)","ed92af30":"print(train.info(), '\\n')\nprint(test.info(), '\\n')\nprint(train.tail())\nprint(test.head())","59504f5c":"print(train.describe())\nprint(test.describe())","3bd3dbef":"pd.DataFrame(train.groupby(['shop', 'long']).size().rename('frequency'))","dd7a1895":"train.corr()","c7bcbd97":"fig, axes = plt.subplots(ncols = 2, figsize = (18, 7))\nsns.distplot(train.quantity, kde = True, ax = axes[0])\nsns.distplot(train.price, kde = True, ax = axes[1])","540590c0":"fig, axes = plt.subplots(nrows = 2, ncols = 2, figsize = (18, 18))\nsns.countplot(x = 'city', data = train, ax = axes[0, 0])\nsns.countplot(x = 'shop', data = train, ax = axes[0, 1])\nsns.countplot(x = 'brand', data = train, ax = axes[1, 0])\nsns.countplot(x = 'container', data = train, ax = axes[1, 1])","d015e8a7":"brands = np.array(train.brand.unique())\ngraph_demand(train, brands, 0.8)","66c5616b":"train_kincola_pivot = train[train.brand == 'kinder-cola'].pivot_table(index = ['price'], values = ['quantity'], aggfunc = np.mean)\ntrain_aducola_pivot = train[train.brand == 'adult-cola'].pivot_table(index = ['price'], values = ['quantity'], aggfunc = np.mean)\ntrain_orpow_pivot = train[train.brand == 'orange-power'].pivot_table(index = ['price'], values = ['quantity'], aggfunc = np.mean)\ntrain_gazoza_pivot = train[train.brand == 'gazoza'].pivot_table(index = ['price'], values = ['quantity'], aggfunc = np.mean)\ntrain_lemboost_pivot = train[train.brand == 'lemon-boost'].pivot_table(index = ['price'], values = ['quantity'], aggfunc = np.mean)\n\nsns.scatterplot(x=train_kincola_pivot.quantity, y=train_kincola_pivot.index)\nsns.scatterplot(x=train_aducola_pivot.quantity, y=train_aducola_pivot.index)\nsns.scatterplot(x=train_orpow_pivot.quantity, y=train_orpow_pivot.index)\nsns.scatterplot(x=train_gazoza_pivot.quantity, y=train_gazoza_pivot.index)\nsns.scatterplot(x=train_lemboost_pivot.quantity, y=train_lemboost_pivot.index)","ac4290a0":"fig, ax = plt.subplots(nrows = 4, figsize = (13, 13))\nsns.lineplot(x = train.index, y = train.quantity, ax = ax[0])\nsns.lineplot(x = train.index, y = train.price, ax = ax[1])\nsns.lineplot(x = train.index, y = train.quantity, hue = train.brand, ax = ax[2])\nsns.lineplot(x = train.index, y = train.price, hue = train.brand, ax = ax[3])\nax[1].axhline(np.mean(train.price))","4c570865":"train.loc[train.container.isnull(), 'container'] = train.loc[train.container.isnull(), 'capacity'].apply(map_container)\ntrain.loc[train.capacity.isnull(), 'capacity'] = train.loc[train.capacity.isnull(), 'container'].apply(map_capacity)\n\ntest.loc[test.container.isnull(), 'container'] = test.loc[test.container.isnull(), 'capacity'].apply(map_container)\ntest.loc[test.capacity.isnull(), 'capacity'] = test.loc[test.capacity.isnull(), 'container'].apply(map_capacity)","fcb1e4c6":"train.drop(columns = ['id', 'capacity', 'lat', 'long'], inplace = True)\ntest.drop(columns = ['id', 'capacity', 'lat', 'long'], inplace = True)","f7ed327a":"print(train.info(), '\\n')\nprint(test.info(), '\\n')","eb160e35":"train['label'] = 1\ntest['label'] = 2\ntemp = pd.concat([train, test])\ntemp = pd.get_dummies(temp)\ntrain = temp[temp.label == 1]\ntest = temp[temp.label == 2]","465a9947":"train.drop(columns = ['label'], inplace = True)\ntest.drop(columns = ['label'], inplace = True)","c2755eaa":"forest = RandomForestRegressor(n_estimators = 500, random_state = 42)\nforest.fit(train.drop(columns = ['quantity']), train['quantity'])","85f54844":"predictions = forest.predict(test.drop(columns = ['quantity']))\nmae = metrics.mean_absolute_error(test.quantity, predictions)\nmse = metrics.mean_squared_error(test.quantity, predictions)\nmape = np.mean(np.abs(test.quantity - predictions) \/ np.abs(test.quantity))\n\nprint('Random Forest Regressor:\\n', 16 *'-')\nprint('Mean Absolute Error: ', mae)\nprint('Mean Squared Error: ', mse)\nprint('Mean Absolute Percentage Error: ', 100 * mape, '%')","96d866de":"fig, ax = plt.subplots()\nplt.scatter(predictions, test.quantity - predictions, c = 'maroon', marker = '.')\nax.axhline(y = 0, xmin = 0, c = 'r')\nax.set(title = 'Residual Plot', xlabel = 'Predicted Value', ylabel = 'Actual - Predicted')","328ea023":"# FUNCTION DEFINITIONS\nThe training and test data frames contain missing values. In most cases, either container capacity or container material is missing, but not both. I wrote two functions:\n* ***map_container(x)*** takes container capacity as an input and outputs the container material\n* ***map_capacity(x)*** takes container material as an input and outputs the container capacity","dd1f56f8":"# DATA TIDYING","bf91b392":"I constructed scatter plots of price and quantity of beverage demanded for each store. As is the convention in economics, price (the independent variable) is located on the vertical axis, whereas quantity demanded (the dependent variable) is located on the horizontal axis. \n\nThe scatter plot for each beverage somewhat reflects the overall negative relationship between price and quantity demanded that economics posits. However, the relationship in this dataset is not very clear, since there are multiple variables that are not constant. Price is determined simultaneously by demand and supply. There might also be a temporal relationship that the scatterplots would ignore. Variables that change throughout the year, such as temperature, might be affecting sales.","26afdb29":"# DATA IMPORTATION","c9524929":"After applying the ***map_container*** and ***map_capacity*** functions and dropping the redundant variables, there are no more missing values in the training and test data sets.","5f165c68":"# INTRODUCTION\nThis python program uses a random forest regressor algorithm to forecast demand for types of beverages in different Greek stores.","2a2ebc83":"# MODEL 1: RANDOM FOREST REGRESSOR\n## This model does not account for temporal effects on demand for beverages.","89fe4d26":"The following time series do a much better job of describing how overall demand for beverages changes throughout the year. Prices have changed over time, but they tend to be fairly close to their mean value of 1.2, so changes in prices are likely not the best explanation for the large variation in sales throughout the year.","cbd41991":"The variable ***id*** is the index for each data point, so it is redundant. Similarly, since there is a one-to-one correspondence between ***container*** and ***capacity***, only one of the variables is necessary. Thus, I dropped ***capacity***. Similarly, ***lat*** and ***long*** identify the geographic location where each sale took place. Each pair of values represents a specific shop. Thus, I dropped ***lat*** and ***long*** and retained the variable ***shop***, which implicitly contains the geographic information.","033a712f":"# DATA EXPLORATION","dcaf1e07":"# DATA VISUALIZATION","c418bcb7":"The training set is a *6480x12* data frame. It contains:\n* 51 missing values (= 6480 - 6429) for the variable ***lat***\n* 46 missing values (= 6480 - 6434) for the variable ***long***\n* 16 missing values (= 6480 - 6464) for the variable ***container***\n* 15 missing values (= 6480 - 6465) for the variable ***capacity***\n\nThe test set is a *1080x12* data frame. It contains:\n* 8 missing values (= 1080 - 1072) for the variable ***lat***\n* 13 missing values (= 1080 - 1067) for the variable ***long***\n* 3 missing values (= 1080 - 1077) for the variable ***container***\n* 4 missing values (= 1080 - 1076) for the variable ***capacity***","43077053":"I concatenated the training and test data sets, created dummy variables for the 'object' data types, and seperated the data into the original training and test data sets.","82522e3c":"# LIBRARIES"}}