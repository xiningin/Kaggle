{"cell_type":{"336a89ea":"code","9539ee32":"code","288dac41":"code","36e5507b":"code","faa294c0":"code","5fe9fff5":"code","4eb3120c":"code","e7406aec":"code","317123b0":"code","25bef49b":"code","ab38e4a2":"code","7348c94b":"code","2dda637a":"code","7f096748":"code","643720ea":"code","1e0f525a":"code","7ca284b3":"code","424778ae":"markdown","3369e08c":"markdown","702b511f":"markdown","58043e24":"markdown","3abc9615":"markdown","618d3eeb":"markdown","9bd8177a":"markdown","52853013":"markdown"},"source":{"336a89ea":"#All imports\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","9539ee32":"#set seed value for reproducibility\nseed_val=42\n\ntf.random.set_seed(seed_val)\nnp.random.seed(seed_val)","288dac41":"#Read data\ntrain_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain_df.head()","36e5507b":"train_df.info()","faa294c0":"#Check if any null pixel value\nnull_count = train_df.isnull().sum()\nnull_count[null_count.values > 0].index","5fe9fff5":"#check distribution of samples for each label(i.e digit 0-9)\nsns.countplot(train_df['label'])\nplt.show()","4eb3120c":"#display few images from train dataset\nfig, ax = plt.subplots(1,5, sharey=True, figsize=(10,6))\n\nfor i in range(5):  \n  img = np.array(train_df.iloc[i, 1:])\n  ax[i].imshow(img.reshape(28,28))","e7406aec":"IMG_SHAPE =28\nBATCH_SZ=64","317123b0":"X = train_df.iloc[:,1:]\ny = train_df.iloc[:,0]\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.9, random_state=100)","25bef49b":"#reshape the images\ndef preprocess_img(img):\n  img = img\/255.0\n  img = np.array(img, dtype=np.float32)\n  img = img.reshape(IMG_SHAPE, IMG_SHAPE) \n  img = img[:,:,np.newaxis]\n  return img","ab38e4a2":"#Convert datasets to rank 4 dimension(#ofsamples, height, width, depth)\nX_train = X_train.apply(lambda x:preprocess_img(x), axis=1)\nX_val = X_val.apply(lambda x:preprocess_img(x), axis=1)\n\nX_train = np.stack(X_train)\nX_val = np.stack(X_val)\n\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=10)\ny_val = tf.keras.utils.to_categorical(y_val, num_classes=10)","7348c94b":"data_gen = tf.keras.preprocessing.image.ImageDataGenerator(featurewise_center=True,\n                                                           featurewise_std_normalization=True,\n                                                           rotation_range = 20,\n                                                           zoom_range=0.2,\n                                                           width_shift_range=0.2,\n                                                           height_shift_range=0.2\n                                                           )\n\n#compute statistics to perform standardization\ndata_gen.fit(X_train)\n\n#perform standardization on validation data\nX_val = data_gen.standardize(X_val)","2dda637a":"#Define CNN\nmodel = tf.keras.models.Sequential([\n          tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu', input_shape=(IMG_SHAPE,IMG_SHAPE, 1)),\n          tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n          \n          tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu'),\n          tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n          \n          tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu'),\n          tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n          \n          tf.keras.layers.Dropout(0.2),\n          \n          tf.keras.layers.Flatten(),    \n\n          tf.keras.layers.Dense(512, activation='relu'),\n          tf.keras.layers.Dropout(0.2),\n          tf.keras.layers.Dense(10, activation='softmax')\n        ])\n\nmodel.compile(optimizer='adam', loss=tf.keras.losses.CategoricalCrossentropy(), metrics=['accuracy'])","7f096748":"#stop iterations if model does not show any improvement for 50 consecutive epochs\nmodel_checkpoint = tf.keras.callbacks.ModelCheckpoint('best_model.h5', monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\nearly_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy',patience=50, mode='max')\n\nmodel.fit(data_gen.flow(X_train,y_train,batch_size=BATCH_SZ),\n          steps_per_epoch=np.ceil(len(X_train)\/BATCH_SZ),\n          epochs=100,\n          validation_data=(X_val, y_val),\n          validation_steps = np.ceil(len(X_val)\/BATCH_SZ),\n          callbacks = [model_checkpoint, early_stopping]          \n          )","643720ea":"final_model = tf.keras.models.load_model('.\/best_model.h5')","1e0f525a":"X_test = test_df.apply(lambda x:preprocess_img(x), axis=1)\nX_test = np.stack(X_test)\n\npredictions = []\nfor i in range(10):\n    preds = final_model.predict_generator(data_gen.flow(X_test, batch_size=BATCH_SZ, shuffle=False), steps = len(X_test)\/BATCH_SZ)\n    predictions.append(preds)   \n    \navg_predictions = np.mean(predictions, axis=0)\ntest_predictions = np.argmax(avg_predictions, axis=1)","7ca284b3":"submission = pd.DataFrame({'ImageId':test_df.index.values+1, 'Label':test_predictions})\nsubmission.to_csv('.\/submission.csv', index=False)","424778ae":"**Prediction on test set using test time augmentation**","3369e08c":"**Data Preprocessing**","702b511f":"**Data Reading and Understanding**","58043e24":"**Number of samples for each digit are close in count**","3abc9615":"**Fetch the saved best model**","618d3eeb":"**Modelling**","9bd8177a":"### **Approach - <br><br> 1.Data reading and understanding<br> 2. Image Preparation - <br> => Rescaling<br> => Reizing<br> => ImageDataAugmentation using standardization and contrast, zoom<br> 3. Modelling - <br> => CNN with MaxPooling<br> => Dropout<br> => Dense layer<br> 4. Test predictions using test time augmentation**","52853013":"**Image Data Generator to perform featurewise center and standardization**"}}