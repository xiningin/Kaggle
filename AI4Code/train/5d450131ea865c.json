{"cell_type":{"9bf113c3":"code","6b42662b":"code","3bb688f1":"code","4a84fb0f":"code","7f04b606":"code","087f489e":"code","ae943e44":"code","2d1db2e6":"code","282d0cd1":"code","6e3298a0":"code","0958af0c":"code","4d80d4d4":"code","35812fef":"code","3bbf3870":"code","6ccb4d5b":"code","6ff4a281":"code","fd50073e":"code","a93396f5":"code","785d337f":"code","0c055c89":"code","4bbbbac3":"code","db109e6c":"code","04cec394":"code","5f7da75a":"code","1f114df4":"code","1e4601d0":"code","5225b015":"code","86f85d8b":"code","1b498fdd":"code","a998c009":"code","a4fd5454":"code","b424badd":"code","488a224c":"code","0af23653":"code","5028b6e9":"code","49861406":"code","dae08e92":"code","52a438e1":"code","81633fdd":"code","b3839e9e":"code","7a1f062b":"markdown","50ab0c5e":"markdown","1242330d":"markdown","4bc09e22":"markdown","911db031":"markdown"},"source":{"9bf113c3":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nimport xgboost\nimport math\nfrom sklearn import metrics","6b42662b":"df = pd.read_csv('..\/input\/breast-cancer-diagnostic\/breast cancer diagnosis .csv')","3bb688f1":"df.shape","4a84fb0f":"df.head()","7f04b606":"#rename field\ndf = df.rename(columns = {'node-caps' : 'node_caps', 'breast-quad' : 'breast_quad'})\ndf.head()","087f489e":"df.describe()","ae943e44":"df.info()","2d1db2e6":"#handling missing value\ndf.dropna(inplace = True)","282d0cd1":"#heatmap correlation\nplt.figure(figsize = (8,6))\nsns.heatmap(df.corr(), annot = True, cmap = 'OrRd')\nplt.title(\"Pearson Correlation\")\nplt.show()","6e3298a0":"#handling categorical variable\ndf['menopause'] = df['menopause'].astype('category')\ndf['node_caps'] = df['node_caps'].astype('category')\ndf['breast'] = df['breast'].astype('category')\ndf['breast_quad'] = df['breast_quad'].astype('category')\ndf['irradiat'] = df['irradiat'].astype('category')\ndf['Class'] = df['Class'].astype('category')\nprint(df.dtypes)","0958af0c":"#handling categorical data\ndf['menopause'] = df['menopause'].cat.codes\ndf['node_caps'] = df['node_caps'].cat.codes\ndf['breast'] = df['breast'].cat.codes\ndf['breast_quad'] = df['breast_quad'].cat.codes\ndf['irradiat'] = df['irradiat'].cat.codes\ndf['Class'] = df['Class'].cat.codes\ndf.head()","4d80d4d4":"#split data\nX = df.drop('Class', axis = 1)\ny = df['Class']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","35812fef":"#prepare models\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5),\n    SVC(kernel = 'linear', gamma = 'auto', C = 5, probability = True),\n    LinearSVC(),\n    DecisionTreeClassifier(max_depth = 3),\n    RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1),\n    XGBClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]","3bbf3870":"#report models\nlog_cols=[\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns = log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    print(\"=\" * 30)\n    print(name)\n    print('****Results****')\n    \n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\".format(acc))\n    \n    train_predictions = clf.predict(X_test)\n    ll = log_loss(y_test, train_predictions)\n    print(\"Log Loss: {}\".format(ll))\n    print(\"\\n\")\n    \n    log_entry = pd.DataFrame([[name, acc * 100, ll]], columns = log_cols)\n    log = log.append(log_entry)\n    \nprint(\"=\" * 30)","6ccb4d5b":"#visualize accuracy models\nplt.figure(figsize = (10,6))\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"deepskyblue\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy of Classification Model')\nplt.show()\nsns.set_color_codes(\"muted\")\nplt.show()","6ff4a281":"#visualize log loss models\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Log Loss', y = 'Classifier', data = log, color = \"lime\")\nplt.xlabel('Log Loss')\nplt.title('Log Loss of Classification Model')\nplt.show()","fd50073e":"#build model\nlda = LinearDiscriminantAnalysis()\n%time lda.fit(X_train, y_train)\nlda.score(X_test, y_test)","a93396f5":"#prediction\ny_pred = lda.predict(X_test)\nprint(y_pred)","785d337f":"#report of MSE & RMSE \nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('MSE: '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE: '+ str(rmse))","0c055c89":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, square = True)\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","4bbbbac3":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","db109e6c":"#transform menopause\ndf.menopause[df['menopause'] == 0] = 'ge40'\ndf.menopause[df['menopause'] == 1] = 'lt40'\ndf.menopause[df['menopause'] == 2] = 'premeno'\n\n#transform node caps\ndf.node_caps[df['node_caps'] == 0] = 'no'\ndf.node_caps[df['node_caps'] == 1] = 'yes'\n\n#transform breast\ndf.breast[df['breast'] == 0] = 'left'\ndf.breast[df['breast'] == 1] = 'right'\n\n#transform breast quad\ndf.breast_quad[df['breast_quad'] == 0] = 'central'\ndf.breast_quad[df['breast_quad'] == 1] = 'left_low'\ndf.breast_quad[df['breast_quad'] == 2] = 'left_up'\ndf.breast_quad[df['breast_quad'] == 3] = 'right_low'\ndf.breast_quad[df['breast_quad'] == 4] = 'right_up'\n\n#transform irradiat\ndf.irradiat[df['irradiat'] == 0] = 'no'\ndf.irradiat[df['irradiat'] == 1] = 'yes'\n\n#transform class\ndf.Class[df['Class'] == 0] = 'no-recurrence-events'\ndf.Class[df['Class'] == 1] = 'recurrence-events'\ndf.head()","04cec394":"#visualize start age ~ class\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Class', y = 'Start Age')\nplt.title(\"Class ~ Start Age\")\nplt.show()","5f7da75a":"#visualize end age ~ class\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Class', y = 'End Age', palette = 'Set1')\nplt.title(\"Class ~ End Age\")\nplt.show()","1f114df4":"#group menopause ~ class\nmenopause_class = df.groupby(['Class', 'menopause']).size().reset_index(name = 'Count')\nprint(menopause_class)","1e4601d0":"#visualize menopause ~ class\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Class', y = 'Count', hue = 'menopause', data = menopause_class)\nplt.title(\"Class ~ Menopause\")\nplt.show()","5225b015":"#visualize start tumor size ~ class\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Class', y = 'Start tumor size', palette = 'Set2')\nplt.title(\"Class ~ Start Tumor Size\")\nplt.show()","86f85d8b":"#visualize end tumor size ~ class\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Class', y = 'End tumor size', palette = 'Set1')\nplt.title(\"Class ~ End Tumor Size\")\nplt.show()","1b498fdd":"#visualize start env nodes ~ class\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Class', y = 'Start_env_nodes')\nplt.title(\"Class ~ Start Env Nodes\")\nplt.show()","a998c009":"#visualize end env nodes ~ class\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Class', y = 'end_env_nodes', palette = 'Set1')\nplt.title(\"Class ~ End Env Nodes\")\nplt.show()","a4fd5454":"#group node caps & class\nnode_class = df.groupby(['Class', 'node_caps']).size().reset_index(name = 'Count')\nprint(node_class)","b424badd":"#visualize node caps ~ class\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Class', y = 'Count', hue = 'node_caps', data = node_class, palette = 'Set2')\nplt.title(\"Class ~ Node Caps\")\nplt.show()","488a224c":"#visualize deg malig ~ class\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Class', y = 'deg-malig')\nplt.title(\"Class ~ Deg Maliq\")\nplt.show()","0af23653":"#group breast ~ class\nbreast_class = df.groupby(['Class', 'breast']).size().reset_index(name = 'Count')\nprint(breast_class)","5028b6e9":"#visualize breast ~ class\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Class', y = 'Count', hue = 'breast', data = breast_class, palette = 'Set1')\nplt.title(\"Class ~ Breast\")\nplt.show()","49861406":"#group breast quad ~ class\nquad_class = df.groupby(['Class', 'breast_quad']).size().reset_index(name = 'Count')\nprint(quad_class)","dae08e92":"#visualize breast quad ~ class\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Class', y = 'Count', hue = 'breast_quad', data = quad_class)\nplt.title(\"Class ~ Breast Quad\")\nplt.show()","52a438e1":"#group irradiat ~ class\nirradiat_class = df.groupby(['Class', 'irradiat']).size().reset_index(name = 'Count')\nprint(irradiat_class)","81633fdd":"#visualize irradiat ~ class\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Class', y = 'Count', hue = 'irradiat', data = irradiat_class, palette = 'Set2')\nplt.title(\"Class ~ Irradiat\")\nplt.show()","b3839e9e":"#visualize class\nplt.figure(figsize = (8,6))\nx = [np.count_nonzero(df['Class'] == 'no-recurrence-events'),\n    np.count_nonzero(df['Class'] == 'recurrence-events')]\nactivities = ['no-recurrence-events', 'recurrence-events']\nplt.pie(x, labels = activities, startangle = 50, autopct = '%.1f%%', shadow = True)\nplt.title(\"Class\")\nplt.show()","7a1f062b":"### Linear Discriminant Analysis Model is the best score result","50ab0c5e":"## Classification Model","1242330d":"# Breast Cancer Diagnostic Prediction","4bc09e22":"## Data Extraction","911db031":"## Visualization"}}