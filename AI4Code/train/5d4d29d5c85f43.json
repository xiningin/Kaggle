{"cell_type":{"89e7312f":"code","8e896b7c":"code","5208c5ec":"code","454c4df9":"code","137d8d9b":"code","c9f0bec6":"code","9cebacdc":"code","fc477fe1":"code","8631ebce":"code","8905b9ef":"code","596d7aa8":"code","2bae6b18":"code","ed76d11b":"markdown","bd20c5bd":"markdown","3267b252":"markdown","48b804a7":"markdown","78635ca1":"markdown","6af6cc65":"markdown","5450eed9":"markdown","172fa281":"markdown","931589fd":"markdown","de2b8831":"markdown","e89c71f0":"markdown","deb92617":"markdown","7b074afb":"markdown","181b0b5c":"markdown","1a4207fc":"markdown","f753cb26":"markdown"},"source":{"89e7312f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8e896b7c":"import folium\nimport json\nimport pandas as pd\n","5208c5ec":"with open('\/kaggle\/input\/world-countries\/world-countries.json') as data_file:\n   country_geo = json.load(data_file)","454c4df9":"data = pd.read_csv('\/kaggle\/input\/world-development-indicators\/Indicators.csv')\ndata.shape","137d8d9b":"data.head()","c9f0bec6":"countries = data['CountryName'].unique().tolist()\nindicators = data['IndicatorName'].unique().tolist()\nprint(len(countries))\nprint(len(indicators))","9cebacdc":"data['IndicatorName'][:25]","fc477fe1":"hist_indicator =  'Life expectancy at birth'\nhist_year = 2013\nmask1 = data['IndicatorName'].str.contains(hist_indicator) \nmask2 = data['Year'].isin([hist_year])\n# apply our mask\nstage = data[mask1 & mask2]\nstage.head()","8631ebce":"data_to_plot = stage[['CountryCode','Value']]\ndata_to_plot.head()","8905b9ef":"hist_indicator = stage.iloc[0]['IndicatorName']","596d7aa8":"map = folium.Map(location=[100, 0], zoom_start=1.5)\nmap.choropleth(geo_data=country_geo, data=data_to_plot,\n             columns=['CountryCode', 'Value'],\n             key_on='feature.id',\n             fill_color='YlGnBu', fill_opacity=0.7, line_opacity=0.2,\n             legend_name=hist_indicator)","2bae6b18":"# Create Folium plot\nx = map.save('plot_data.html')\n# Import the Folium interactive html file\nfrom IPython.display import IFrame\nIFrame(src= '.\/plot_data.html', width=1000 ,height=450)\n","ed76d11b":"## Importing the necessary libraries","bd20c5bd":"So there are total 247 countries with 1344 unique indicator levels.Let us check the first 25 indicators","3267b252":"## Setting up the country co-ordinates\n\nSince we are dealing with geospatial maps , we also need the country coordinates for plotting. Download the .json file from [here](https:\/\/github.com\/python-visualization\/folium\/blob\/master\/examples\/data\/world-countries.json) and upload it to your kernel.","48b804a7":"## Folium\n\n![](https:\/\/warehouse-camo.cmh1.psfhosted.org\/1c10c4237e95bf5c721f765c7d6b6117469dfa80\/687474703a2f2f707974686f6e2d76697375616c697a6174696f6e2e6769746875622e696f2f666f6c69756d2f5f696d616765732f666f6c69756d5f6c6f676f2e6a7067)\n\n[Folium](https:\/\/pypi.org\/project\/folium\/) is a powerful data visualisation library in Python that was built primarily to help people visualize geospatial data. With Folium, one can create a map of any location in the world as long as its latitude and longitude values are known. Also, the maps created by Folium are interactive in nature, so one can zoom in and out after the map is rendered, which is a super useful feature.\nFolium builds on the data wrangling strengths of the Python ecosystem and the mapping strengths of the Leaflet.js library. The data is manipulated in Python and then visualised in a Leaflet map via folium.","78635ca1":"It looks like we got back the indicators we wanted. So, let\u2019s set up our data for plotting by keeping just the country code and the values that we\u2019ve plotted.","6af6cc65":"The \u2018key on\u2019 parameter refers to the label in the json object which has the country code as the feature ID attached to each country\u2019s border information. This it the tie that we need to set up in our data. Our country code in the data frame should match the feature ID in the json object.\n\nThe output of this plot is going to be saved as a html file which is actually interactive.So what we\u2019ll need to do is to save it and read it back into the notebook in order to interact with it on the map.","5450eed9":"## Create the Folium interactive map\n","172fa281":"## Loading the data to pandas dataframe","931589fd":"## Exploring the data\n","de2b8831":"We\u2019ll also want to extract the name of the indicator for use as the legend in the figure.","e89c71f0":"## Objective\n\nIn this notebook we will get started in Geo Data Science with Folium.We will work through analyzing and visualizing the Life expectancy of female population in the world.","deb92617":"![](https:\/\/miro.medium.com\/max\/1356\/1*os3Fd-HqNBg25n_eAobTPw.gif)","7b074afb":"Notice first the dark colors imply higher life expectancy for females .Clearly US and majority of Europe have a higher life expectancy for females.","181b0b5c":"**Life expectancy at birth, female (years)** appears to be good indicator for investigation. So let\u2019s pull out the life expectancy data for all the countries in 2013. We are just choosing the year at random .","1a4207fc":"The beauty of using Python is that it offers libraries for every data visualisation need. One such library is Folium which comes in handy for visualising Geographic data (Geo data). Geographic data (Geo data) science is a subset of data science that deals with location-based data i.e description of objects and their relationship in space.\n\n","f753cb26":"It seems that the indicators dataset have different indicators for different countries with the year and value of the indicator.Let us check the no of countries and indicators provided."}}