{"cell_type":{"6045e3a7":"code","aa370f01":"code","6c1194ac":"code","9980f8cd":"code","058797b4":"code","869f4b32":"code","78558943":"code","c44cbeb4":"code","5777e2a9":"code","e88d4144":"code","9b44b3aa":"code","43510a38":"code","596ac348":"markdown","05da70cb":"markdown","06370d0e":"markdown","da92566f":"markdown","665defb8":"markdown","45d980b1":"markdown","bca43aa7":"markdown","d2bd3352":"markdown","c5d60127":"markdown","d7ddceca":"markdown"},"source":{"6045e3a7":"import re\nimport string\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom itertools import groupby\n\nfrom nltk.corpus import stopwords\n\nre_url = r'(?:http|ftp|https):\/\/(?:[\\w_-]+(?:(?:\\.[\\w_-]+)+))(?:[\\w.,@?^=%&:\/~+#-]*[\\w@?^=%&\/~+#-])?'","aa370f01":"def clean_text(text):\n    '''Make text lowercase, remove reply, remove text in square brackets, remove links, remove user mention,\n    remove punctuation, remove numbers and remove words containing numbers.'''\n        \n    text = text.lower()\n    text = re.sub('^rt', '', text)\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub(re_url, '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('@\\w+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    \n    return text\n\ndef get_consecutive_chars(text):\n    ''' Count how many consecutive chars, consecutive upper chars and consecutive punctuation'''\n    result = [(label, sum(1 for _ in group)) for label, group in groupby(text)]\n    \n    consecutive_chars = 0\n    consecutive_chars_upper = 0\n    consecutive_punctuations = 0\n    \n    for i in result:\n        if i[1] > 1:\n            if i[0] in string.punctuation:\n                consecutive_punctuations += i[1]\n            elif i[0].upper() == i[0]:\n                consecutive_chars_upper += i[1]\n            else:\n                consecutive_chars += i[1]\n                \n    return {\n        'qtd_consecutive_chars' : consecutive_chars,\n        'qtd_consecutive_chars_upper': consecutive_chars_upper,\n        'qtd_consecutive_punctuation' : consecutive_punctuations,\n    }","6c1194ac":"clean_text('Test 123 of the function clean_text!! https:\/\/fake_url\/2020')","9980f8cd":"get_consecutive_chars('test of the function get_consecutive_chars!! lool...')","058797b4":"# Read datasets\ndf_train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndf_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\n\n# Store idx for train and test\nidx_train = df_train['id'].values\nidx_test = df_test['id'].values\n\n\n# I'll treat both dataframes as one to do cleaning only once, i should split it later\ndf_full = pd.concat([df_train, df_test], sort=False)","869f4b32":"stop_words = stopwords.words('english')\n\n# Apply cleaning function\ndf_full['text_cleaned'] = df_full['text'].apply(clean_text)\n\n# Remove stop words\ndf_full['text_cleaned'] = df_full['text_cleaned'].str.split() \\\n    .apply(lambda x: [word for word in x if word not in stop_words]) \\\n    .apply(lambda x: ' '.join(x))","78558943":"df_full['qnt_words'] = df_full['text_cleaned'].str.split().apply(lambda x : len(x))\ndf_full['qnt_unique_words'] = df_full['text_cleaned'].str.split().apply(lambda x : len(set(x)))\ndf_full['qnt_chars'] = df_full['text'].str.len()\ndf_full['qnt_hashtags'] = df_full['text'].str.findall(r'#(\\w+)').apply(lambda x : len(x))\ndf_full['qnt_user_mention'] = df_full['text'].str.findall(r'@(\\w+)').apply(lambda x : len(x))\ndf_full['qnt_punctuation'] = df_full['text'].str.replace(r'[\\w\\s#]+', '').apply(lambda x : len(x))\ndf_full['qnt_urls'] = df_full['text'].str.findall(re_url).apply(lambda x : len(x))\ndf_full['mean_chars_words'] = df_full['text'].str.split().apply(lambda x: np.mean([len(w) for w in x]))\n\ndf_full['qnt_stop_words'] = df_full['text'].str.split() \\\n    .apply(lambda x: len([w for w in x if w.lower() in stop_words]))","c44cbeb4":"df_full['contains_hashtags'] = df_full['text'].str.findall(r'#(\\w+)').apply(lambda x : 0 if len(x) == 0 else 1)\ndf_full['contains_user_mention'] = df_full['text'].str.findall(r'@(\\w+)').apply(lambda x : 0 if len(x) == 0 else 1)\ndf_full['contains_punctuation'] = df_full['text'].str.replace(r'[\\w\\s#]+', '').apply(lambda x : 0 if len(x) == 0 else 1)\ndf_full['contains_urls'] = df_full['text'].str.findall(re_url).apply(lambda x : len(x))\n\ndf_full['is_reply'] = df_full['text'].str.startswith('RT') + 0","5777e2a9":"df_consecutive = df_full['text'].apply(lambda x : pd.Series(get_consecutive_chars(x)))\n\nfor col in df_consecutive.columns:\n    df_full[col] = df_consecutive[col]","e88d4144":"df_full.columns","9b44b3aa":"df_full.head()","43510a38":"df_train = df_full[df_full['id'].isin(idx_train)]\ndf_test = df_full[df_full['id'].isin(idx_test)]","596ac348":"# Clean tweets","05da70cb":"# Functions","06370d0e":"## Check up of our features","da92566f":"## How many consecutive chars or punctuation the text has","665defb8":"# Extract features","45d980b1":"# Cleaning and feature extraction from tweets\n\nThis notebook demonstrate a few ideais to clean tweets and also extract features of it without having to wait more than seconds to extract those features (no loops or messy sintax)","bca43aa7":"# Split cleaned dataframe in train and test","d2bd3352":"# Read dataset","c5d60127":"## Extract quantity values","d7ddceca":"## Text contains hashtags, user mentions, urls or punctuation"}}