{"cell_type":{"908fbf5e":"code","4c6ed205":"code","f75bf35e":"code","97ab501d":"code","d5f6dadb":"code","da9ca58b":"code","335eceb9":"code","d394861e":"code","2e39ac5b":"code","c0aa59b2":"code","5491225c":"code","625207f6":"code","eef7b26f":"code","2eff2826":"markdown","3317df62":"markdown","97a3c84c":"markdown","f1c18b05":"markdown","317804fc":"markdown"},"source":{"908fbf5e":"#import all needed packages\nimport pandas as pd\nimport numpy as np\nimport csv as csv\nimport seaborn as sns\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nfrom sklearn.cross_validation import StratifiedKFold\nfrom sklearn.neighbors import KNeighborsClassifier\n\naddpoly = True\nplot_lc = 0 ","4c6ed205":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","f75bf35e":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u043f\u043e\u043b \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\nprint(df_train[['Sex', 'Survived']].groupby(['Sex']).mean())\nsns.catplot(x='Sex', y='Survived',  kind='bar', data=df_train)","97ab501d":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\nprint(df_train[['Pclass', 'Survived']].groupby(['Pclass'], \n                                                    as_index=False).mean().sort_values(by='Survived', ascending=False))","d5f6dadb":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u043e \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\nsns.catplot(x='SibSp', y='Survived', data=df_train, kind='bar')","da9ca58b":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a Parch \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c \nprint(df_train[[\"Parch\", \"Survived\"]].groupby(['Parch'], \n                                                   as_index=False).mean().sort_values(by='Survived', ascending=False))","335eceb9":"#Age\ntrain_random_ages = np.random.randint(df_train[\"Age\"].mean() - df_train[\"Age\"].std(),\n                                          df_train[\"Age\"].mean() + df_train[\"Age\"].std(),\n                                          size = df_train[\"Age\"].isnull().sum())\n\ntest_random_ages = np.random.randint(df_test[\"Age\"].mean() - df_test[\"Age\"].std(),\n                                          df_test[\"Age\"].mean() + df_test[\"Age\"].std(),\n                                          size = df_test[\"Age\"].isnull().sum())\n\ndf_train[\"Age\"][np.isnan(df_train[\"Age\"])] = train_random_ages\ndf_test[\"Age\"][np.isnan(df_test[\"Age\"])] = test_random_ages\ndf_train['Age'] = df_train['Age'].astype(int)\ndf_test['Age']    = df_test['Age'].astype(int)\n\n# Embarked \ndf_train[\"Embarked\"].fillna('S', inplace=True)\ndf_test[\"Embarked\"].fillna('S', inplace=True)\ndf_train['Port'] = df_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndf_test['Port'] = df_test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\ndel df_train['Embarked']\ndel df_test['Embarked']\n\n# Fare\ndf_test[\"Fare\"].fillna(df_test[\"Fare\"].median(), inplace=True)\n\n# Cabin \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 Has_Cabin\ndf_train['Has_Cabin'] = df_train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ndf_test['Has_Cabin'] = df_test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n\nall_data = [df_train,df_test]\n\n# \u0422\u0430\u043a \u043a\u0430\u043a \u0432\u044b\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0432 \u043e\u0434\u0438\u043d\u043e\u0447\u043a\u0443 \u0432\u044b\u0448\u0435, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a IsAlone\nfor dataset in all_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\nfor dataset in all_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\nfor dataset in all_data:\n    dataset['FamilySizeGroup'] = 'Small'\n    dataset.loc[dataset['FamilySize'] == 1, 'FamilySizeGroup'] = 'Alone'\n    dataset.loc[dataset['FamilySize'] >= 5, 'FamilySizeGroup'] = 'Big'\n    \nfamily_mapping = {\"Small\": 0, \"Alone\": 1, \"Big\": 2}\n\nfor dataset in all_data:\n    dataset['FamilySizeGroup'] = dataset['FamilySizeGroup'].map(family_mapping)\n\n    \n# \u041c\u0435\u043d\u044f\u0435\u043c Age, Sex \u0438 Fare    \nfor dataset in all_data:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n        \nfor dataset in all_data:    \n    dataset.loc[ dataset['Age'] <= 14, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 14) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\n\nfor dataset in all_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\n# \u0414\u0435\u043b\u0430\u0435\u043c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a    \nfor dataset in all_data:\n    dataset['IsChildandRich'] = 0\n    dataset.loc[(dataset['Age'] <= 0) & (dataset['Pclass'] == 1 ),'IsChildandRich'] = 1  \n    dataset.loc[(dataset['Age'] <= 0) & (dataset['Pclass'] == 2 ),'IsChildandRich'] = 1  \n\n# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\ndel df_train['Name']\ndel df_test['Name']\n\ndel df_train['SibSp']\ndel df_test['SibSp']\n\ndel df_train['Parch']\ndel df_test['Parch']\n\ndel df_train['FamilySize']\ndel df_test['FamilySize']\n\ndel df_train['Cabin']\ndel df_test['Cabin']\n\ndel df_train['Ticket']\ndel df_test['Ticket']\n\ndel df_train['Port']\ndel df_test['Port']","d394861e":"print('train dataset: %s, test dataset %s' %(str(df_train.shape), str(df_test.shape)) )\ndf_train.head()\n\n\n","2e39ac5b":"del df_train['PassengerId']\n\nX_train = df_train.drop(\"Survived\",axis=1)\nY_train = df_train[\"Survived\"]\nX_test  = df_test.drop(\"PassengerId\",axis=1).copy()\n\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)\n\n\n\n\n","c0aa59b2":"# KNN\nalg_KNN = KNeighborsClassifier(n_neighbors=3)\nalg_KNN.fit(X_train,Y_train)\n\nresult_train = alg_KNN.score(X_train,Y_train)\nresult_val = cross_val_score(alg_KNN, X_train, Y_train, cv=5).mean()\nprint(result_train,result_val)","5491225c":"# Logistic Regression\nlogreg = LogisticRegression() \nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\n\nresult_train = logreg.score(X_train, Y_train)\nresult_val = cross_val_score(logreg,X_train, Y_train, cv=5).mean()\nprint(result_train , result_val)","625207f6":"# RandomForest\nrandom_forest = RandomForestClassifier(criterion='gini', \n                             n_estimators=1000,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\n\nseed= 42\nrandom_forest =RandomForestClassifier(n_estimators=1000, criterion='entropy', max_depth=5, min_samples_split=2,\n                           min_samples_leaf=1, max_features='auto',    bootstrap=False, oob_score=False, \n                           n_jobs=1, random_state=seed,verbose=0)\n\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\n\nresult_train = random_forest.score(X_train, Y_train)\nresult_val = cross_val_score(random_forest,X_train, Y_train, cv=5).mean()\n\nprint(result_train , result_val)","eef7b26f":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('titanic.csv', index=False)\n","2eff2826":"\u0427\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u044b\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c","3317df62":"\u0416\u0435\u043d\u0449\u0438\u043d \u0441\u043f\u0430\u0441\u043b\u043e\u0441\u044c \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435","97a3c84c":"\u0412\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 1 \u043a\u043b\u0430\u0441\u0441\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e","f1c18b05":"\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","317804fc":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438"}}