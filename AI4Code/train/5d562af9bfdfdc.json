{"cell_type":{"9fc6f233":"code","c1c32858":"code","920ef721":"code","792a7ef4":"code","54dd1449":"code","692f2855":"code","7ec244ee":"code","0b8a0991":"code","6c75b0cf":"code","fb7139b4":"code","fdb2e516":"code","7340dc2f":"code","8b66c059":"code","8cebc12c":"code","2270573b":"code","af3084ce":"code","672359a4":"code","f0ab69f1":"code","3a57adc3":"code","4fee2793":"code","208c7fe2":"code","3a05853e":"code","f7cf5923":"code","2ffa7b0e":"code","7425485f":"code","7cd81a35":"code","ab528292":"code","ad9ac5cd":"code","dd997425":"code","993a263c":"code","77363623":"code","b6f0aeab":"code","0892f7e4":"code","986a035c":"code","dbd4d2b9":"code","05265740":"code","6b297073":"code","40156761":"code","57c236ff":"code","ec8fed39":"code","c55f690c":"code","f63e7e4c":"code","b77968b3":"code","d527362f":"code","6d6e63ba":"code","96b9f138":"code","194873fb":"code","1fd8b5e6":"code","7c26c144":"code","1411901e":"code","0ed9c6f3":"code","ec8e9929":"code","101bc91b":"markdown","eafc8f70":"markdown","8cd46b05":"markdown","5a4d0bb1":"markdown","999f4ade":"markdown","d02f278e":"markdown","3cb0e849":"markdown","2619febf":"markdown","e0aaaa94":"markdown","a727935c":"markdown","a341be21":"markdown","88f1e858":"markdown","e3cdf319":"markdown","0f3ab8b3":"markdown","0f2aec3c":"markdown","2ac5f057":"markdown","ad7eff67":"markdown","807c03f0":"markdown","4f6c15f6":"markdown","69acfd01":"markdown","54743755":"markdown","a7e16dec":"markdown","0166dd2e":"markdown","11dc0da0":"markdown","c2c0d7b7":"markdown","967fd45a":"markdown","886dcf60":"markdown","f0bcd600":"markdown","fe7ace32":"markdown","688f1a17":"markdown","4eef00cf":"markdown","0a1a70b6":"markdown","d5fe8db4":"markdown","9e0c4d41":"markdown","7e0cf8d7":"markdown","6a2c8203":"markdown","388772f6":"markdown","18b0b9a2":"markdown","429464ba":"markdown","a505699a":"markdown","5d3c561c":"markdown","f2b0d04a":"markdown","6cc25f4f":"markdown"},"source":{"9fc6f233":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1c32858":"df = pd.read_csv('..\/input\/pokemon\/Pokemon.csv')\ndf.head(3)","920ef721":"df.info()","792a7ef4":"df.describe()","54dd1449":"df.shape","692f2855":"df.columns","7ec244ee":"columns = df.columns.tolist()\ncolumns[0] = 'id'\ndf.columns = columns\ndf.columns","0b8a0991":"df.isnull().sum()","6c75b0cf":"df['Name'][0:5]\n\n##Read more than one columns\ndf[['Name', 'Attack','Type 2']][0:4]","fb7139b4":"df_tmp = df[['Name', 'Type 1', 'Attack']]\ndf_tmp.head(2)","fdb2e516":"df.iloc[1]","7340dc2f":"df.iloc[3,2]","8b66c059":"# for index, row in df.iterrows():\n#     ##print(index, row)\n#     print(index, row['Name'])","8cebc12c":"df.loc[df['Type 1'] == 'Fire'][0:3]","2270573b":"##Sort dataframe in ascending order(default) through a particular column.\ndf.sort_values('Attack')\n\n##Sort dataframe in descending order.\ndf.sort_values('Attack', ascending =False)\n\n##Sort dataframe using multiple columns with different order\ndf.sort_values(['Attack', 'Defense'], ascending =(0,1))[:5]","af3084ce":"df['Total'] = df['HP'] + df['Attack'] + df['Defense'] + df['Sp. Atk'] +df['Sp. Def'] +df['Speed']\ndf.head(3)\n\n##Add new column using iloc[row, column].sum(axis = 1 for horizontal sum & 0 for vertical sum) \ndf['Total_iloc_use'] = df.iloc[:, 4:10].sum(axis = 1)\ndf.head(3)","672359a4":"df = df.drop(columns =['Total_iloc_use'])\ndf[:3]","f0ab69f1":"##Save your datsframe as new csv file without index\ndf.to_csv('modified_new.csv', index=False)\n\n##Save in excel format i.e xlsx\ndf.to_excel('modified_new_excel.xlsx', index=False)","3a57adc3":"df.loc[(df['Type 1'] =='Grass') & (df['Type 2']=='Poison') & (df['Attack'] >=69)][:4]\n\n##Save this filtered data in new dataframe\nnew_df = df.loc[(df['Type 1'] =='Grass') & (df['Type 2']=='Poison') & (df['Attack'] >=69)][:4]\n\n##new_df.head(3)\n\n##Reset index of new dataframe\nnew_df.reset_index(drop =True, inplace=True)\nnew_df.head(3)","4fee2793":"##Find value in 'Name' column which contains mega word\n\ndf.loc[df['Name'].str.contains('Mega')][:4]\n\n##Remove those Name from data which contains mega word  \n\ndf.loc[~df['Name'].str.contains('Mega')].head(3)","208c7fe2":"import re\n\n##Find 'Name' which starts with 'pi' in Name column\n\ndf.loc[df['Name'].str.contains('^pi[a-z]*', flags =re.I, regex= True)].head(4)","3a05853e":"##Changing the value 'Fire' to 'Flamer' in the 'Name' column \n\ndf.loc[df['Type 1'] =='Fire', 'Type 1'] ='Flamer'\ndf\n\n##Make all fire type pokemon legendery\ndf.loc[df['Type 1'] =='Flamer', 'Legendary'] =True\ndf\n\n##Add new column and assign true value whose attack value is greater than 69\ndf.loc[df['Attack'] > 69, 'Beast'] = True\ndf.loc[df['Attack'] < 69, 'Beast'] = False\ndf.head(5)","f7cf5923":"df_mod = pd.read_csv('modified_new.csv')\ndf_mod.head(3)","2ffa7b0e":"##Aggregate Statistics will be done with groupby(), sum(), count() and mean() function.\n\n##Use groupby function to find mean of all Type 1 pokemon and sort in ascending order w.r.t Attack.\n\ndf_mod.groupby(['Type 1']).mean().sort_values('Attack', ascending=False)\n\n##Sum up all Type 1 pokemon features\ndf_mod.groupby(['Type 1']).sum()\n\n##Count number of Type 1 pokemon in dataframe\ndf_mod.groupby(['Type 1']).count()\n\n##Make another column count to count Type 1 pokemon more efficiently &  it is helpful in big data \ndf_mod['count'] =1\n\ndf_mod.groupby(['Type 1']).count()['count']\n\n##Apply multiple parameters \ndf_mod.groupby(['Type 1', 'Type 2']).count()['count']","7425485f":"##Read chunk size data when data is too big\n##For example read 5 rows at a time\n\n# for df_mod in pd.read_csv('modified_new.csv', chunksize=5):\n#     print(\"Chunk Df\")\n#     print(df)","7cd81a35":"## Check number of variable available under numeric_data\nnumeric_data = df.select_dtypes(exclude = [object])\nnumeric_data.shape","ab528292":"corr_matrix = numeric_data.corr()\ncorr_matrix","ad9ac5cd":"plt.figure(figsize=(30,20))\nsns.heatmap(corr_matrix,annot=True,cmap='YlGnBu')\nplt.show()","dd997425":"sns.pairplot(numeric_data, kind='scatter',hue='Legendary')","993a263c":"## Drop Type 2 and Beast columns and chack info\ndf_clean = df.drop(columns = ['Type 2','Beast'])\ndf_clean.info()","77363623":"sns.countplot(x ='Type 1', data=df_clean)\nplt.xticks(rotation='vertical')\nplt.show()","b6f0aeab":"sns.countplot(x='Legendary', data=df_clean)\nplt.show()","0892f7e4":"sns.boxplot(x='Type 1', y='Total', data = df_clean)\nplt.xticks(rotation='vertical')\nplt.show()","986a035c":"sns.boxplot(x='Legendary', y='Total', data = df_clean)\nplt.show()","dbd4d2b9":"## Box whiskers plot & histogram on the same window \n## Split the plotting window into 2 parts\n\nf, (ax_box, ax_hist)= plt.subplots(2, gridspec_kw={\"height_ratios\": (.15, .85)})\n## Add and create  box plot\nsns.boxplot(df_clean['Total'], ax=ax_box)\n\nsns.distplot(df_clean[\"Total\"], ax=ax_hist)\nplt.show()","05265740":"##Principal Component Analysis(PCA) used for dimension reduction of dataset\n\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n%matplotlib inline","6b297073":"pca_col =['HP','Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']","40156761":"scaler = StandardScaler()\nscaler.fit(df_mod[pca_col])","57c236ff":"scaled_data = scaler.transform(df_mod[pca_col])","ec8fed39":"np.mean(scaled_data), np.std(scaled_data)","c55f690c":"scaled_data","f63e7e4c":"feature_cols = ['feature'+str(i) for i in range(scaled_data.shape[1])]\nnormalised_pokemon = pd.DataFrame(scaled_data,columns=feature_cols)\nnormalised_pokemon.tail()","b77968b3":"from sklearn.decomposition import PCA","d527362f":"pca = PCA(n_components = 0.6)\nprincipal_components =pca.fit(scaled_data)","6d6e63ba":"x_pca = pca.transform(scaled_data)\nscaled_data.shape","96b9f138":"x_pca.shape","194873fb":"principal_comp_df = pd.DataFrame(data = x_pca, columns = ['Principal_comp_1', 'Principal_comp_2'])\nprincipal_comp_df.head(4)","1fd8b5e6":"## Make a correlation matrix of PCA dataframe\ncorrelation_mat = principal_comp_df.corr()\ncorrelation_mat","7c26c144":"## PLot correlation matrix for better understanding\nsns.heatmap(correlation_mat, annot=True, cmap='YlGnBu' )\nplt.show()","1411901e":"print('Explained variation per principal component: {}'.format(pca.explained_variance_ratio_))","0ed9c6f3":"data_labels = df[\"Name\"].copy()\ndf['Type 1'].value_counts()","ec8e9929":"plt.figure()\nplt.figure(figsize=(10,10))\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=14)\nplt.xlabel('Principal_comp_1',fontsize=20)\nplt.ylabel('Principal_comp_2',fontsize=20)\nplt.title(\"Principal Component Analysis of Pokemon Type 1\",fontsize=20)\ntargets = ['Water','Normal','Grass','Bug','Psychic','Flamer','Electric','Rock','Dragon','Ground','Ghost',        \n'Dark', 'Poison', 'Steel','Fighting','Ice','Fairy','Flying']\ncolors = ['r', 'g', 'y','c','#2c3e50','#ee9ca7','#1565C0','#91EAE4','#654ea3','#ffd89b','#799F0C','#dd1818',\n         '#FFF200','#FF8C00','#30E8BF','#603813','#b29f94','#24FE41','#a80077']\nfor target, color in zip(targets,colors):\n    indicesToKeep = df['Type 1'] == target\n    plt.scatter(principal_comp_df.loc[indicesToKeep, 'Principal_comp_1']\n               , principal_comp_df.loc[indicesToKeep, 'Principal_comp_2'], c = color, s = 50)\n\nplt.legend(targets,prop={'size': 7})\nplt.show()","101bc91b":"# LEARNING PANDAS ","eafc8f70":"# DATA VISUALIZATION","8cd46b05":"#### Boxplot between 'Legendary' and 'Total' variable","5a4d0bb1":"#### Box plot between 'Total' and 'Type 1' variable","999f4ade":"#### Iterate through each row","d02f278e":"### Load data file into pandas dataframe","3cb0e849":"#### Apply conditional statements and read only those who satisfies","2619febf":"#### Plot a graph of frequency distribution of 'Type 1' pokemon","e0aaaa94":"#### Selecting numeric columns in which PSA technique has to apply to reduce dimension ","a727935c":"### Save modified data in new data file(.csv, .xlsx)","a341be21":"### Use the sklearn library to import the PCA module","88f1e858":"#### Read any row using iloc function using its index","e3cdf319":"# PCA - Principal Component Analysis \n#### It is a linear dimensionality reduction technique. \n\n### Why PCA ?\n####  Because there are a large number of variables or dimensions along which the data is distributed, visualization can be a challenge. Hence, PCA can do that for you since it projects the data into a lower dimension, thereby allowing you to visualize the data in a 2D or 3D space with a naked eye.","0f3ab8b3":"#### Change column name '#' to 'id'\n","0f2aec3c":"#### Read modified data","2ac5f057":"### Sorting data with respect to a particular\/specify column ","ad7eff67":"#### Read more than 1 column at a time and store in new dataframe.","807c03f0":"Plot a graph of frequency distribution of 'Legendary' pokemon","4f6c15f6":"### Find correlation between numeric variables in dataframe\nCorrelation :- Calculate relationship between two numerical variables.\n\nExcluding null valuees & excluding the categorical variables to find the Pearson's correlation\n\n\u2022 Positive correlation \u2013 the other variable has a tendency to also increase\n\n\u2022 Negative correlation \u2013 the other variable has a tendency to decrease\n\n\u2022 No correlation \u2013 the other variable does not tend to either increase or decreas","69acfd01":"#### It has been converted into array and this is based on Standard Deviation is 1 and Mean = 0.\n","54743755":"### Regex library for further filtering operations","a7e16dec":"#### Shape function tells shape or dimension of dataframe i.e no. of rows & columns.\n","0166dd2e":"#### Read summary of a dataframe including dtype and non-null value count.","11dc0da0":"#### Standardizing the data since PCA's output is influenced based on the scale of the features of the data.","c2c0d7b7":"#### Read a value from specific row & column","967fd45a":"#### Drop columns in a dataframe","886dcf60":"### Data Manipulation :- Adding new column in dataframe \n","f0bcd600":"#### Let's convert the normalized features into a tabular format with the help of DataFrame","fe7ace32":"### Let's create a DataFrame that will have the principal component values for all 800 samples.","688f1a17":"#### Projecting the six-dimensional data to two-dimensional principal components. You will pass the number of components (n_components=0.6) and finally call fit_transform on the aggregate data.","4eef00cf":"#### Read any particular column.","0a1a70b6":"### Pairplot between Legendary variable with other numeric variables\nPairwise Plot :- Used to plot relationship in a dataset\n\nCreates scatter plots for join relationship and histogram for univariate distributions","d5fe8db4":"### Filtering Dataframe","9e0c4d41":"### Now, find the explained_variance_ratio. It will provide you with the amount of information or variance each principal component holds after projecting the data to a lower dimensional subspace.","7e0cf8d7":"#### Box whiskers and histogram plot of 'Total' variable","6a2c8203":"#### In the heatmap of correlation matrix the darker the color of tile the correlation between the variables is highly positive.And lighter the color of tile the correlation between the variables is highly negative.","388772f6":"#### Shape of dataframe after PCA reduction technique.","18b0b9a2":"#### Read headers i.e column name\n","429464ba":"#### Check total null values in each column of dataframe","a505699a":"### Now, plot PCA variables w.r.t Type 1 Pokemon","5d3c561c":"### Aggregate functions i.e groupby(), sum(), count() and mean()","f2b0d04a":"#### While applying StandardScaler, each feature of your data should be normally distributed such that it will scale the distribution to a mean of zero and a standard deviation of one.","6cc25f4f":"### Conditional changes in dataframe"}}