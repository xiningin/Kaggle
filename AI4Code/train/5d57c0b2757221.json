{"cell_type":{"32902987":"code","02365dc7":"code","7ff36bd0":"code","5b453c71":"code","748d7a14":"code","27cbc7c5":"code","fcaa1d1b":"code","c93f42ca":"code","7cb8b928":"code","1e0d2d8d":"code","f1473c48":"code","4d14fe21":"code","4197a1f0":"code","fd0c247c":"code","2c0ddd2c":"code","f15ff9ae":"code","3d9ea7d7":"code","fb26c277":"code","d14c9cfb":"code","04b039a0":"code","b5882c3f":"code","34927f41":"code","4f10636c":"code","78a119ad":"code","1bc712b6":"code","ce57e4f8":"code","583565d6":"code","fc8a0138":"code","3c1e4855":"code","4981e7b2":"code","c424a115":"code","c6e12338":"markdown","c8c49a1e":"markdown","d71fbea1":"markdown","0adcb4b2":"markdown"},"source":{"32902987":"#importing required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","02365dc7":"path = '..\/input\/bank-marketing\/bank-additional-full.csv'\ndf  = pd.read_csv(path, sep=';')\ndf.head()","7ff36bd0":"df.info()","5b453c71":"print(df.y.value_counts())\n\ndfgrouped = df.groupby('y')","748d7a14":"for type,data in dfgrouped:\n  display(type)\n  display(data)","27cbc7c5":"def feature_perc(feature, groupby= 'yes'):\n\n  count = dfgrouped.get_group(groupby)[feature].value_counts()\n  total_count = df[feature].value_counts()[count.index]\n\n  perc = (count\/total_count)*100\n  return perc \n\n\ndef plot_barh(array,incrementer, bias,ax= None, text_color ='blue', palette_style = 'darkgrid',palette_color = 'RdBu'):\n\n  sns.set_style(palette_style)\n  sns.set_palette(palette_color)\n    \n  sns.barplot(x= array, y= array.index, ax=ax)\n  #plt.barh(array.index, width = array.values, height = .5)\n  plt.yticks(np.arange(len(array)))\n  plt.xticks( range(0, round(max(array)) +bias, incrementer ))\n\n  for index, value in enumerate(array.values):\n    plt.text(value +.5, index, s= '{:.1f}%'.format(value), color = text_color)\n\n  #plt.show()\n  return plt","fcaa1d1b":"object_feature_list = list(df.dtypes[df.dtypes == 'object'].index)\n\nfor feature in object_feature_list[:-1]:\n    \n    feature_perct =  feature_perc(feature)\n    plt.title('Success rate by {}'.format(feature))\n    plot_barh(feature_perct.sort_values(ascending= False),5,10, text_color = 'blue')\n    plt.show()","c93f42ca":"int_feature_list = list(df.dtypes[df.dtypes != 'object'].index)\n\nfor feature in int_feature_list:\n    \n    fig, ax = plt.subplots(1,2, figsize= (12,6))\n    sns.boxplot(x='y', y=feature, data =df, showmeans=True, ax = ax[0])\n    sns.distplot(df[feature], ax = ax[1], kde= False)\n    ax[0].set_title('{} variation'.format(feature))\n    plt.show()\n","7cb8b928":"#df.drop(df[df['duration']>4000].index,  inplace =True)","1e0d2d8d":"#df.drop( df[df.previous>100].index, inplace=True)","f1473c48":"df['y'] = df.y.apply(lambda x:0 if x=='no' else 1)\ndisplay(df.head())","4d14fe21":"df2 = pd.get_dummies(df)\ndisplay(df2.head())","4197a1f0":"display(df2.corr()['y'].sort_values(ascending= False))","fd0c247c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix,accuracy_score","2c0ddd2c":"X_train, X_test, y_train, y_test = train_test_split(df2.drop('y',axis=1),\n                                                    df2['y'],\n                                                    test_size=.25, random_state = 42,\n                                                    stratify= df2['y'])","f15ff9ae":"stsc = StandardScaler()\ns_X_train = stsc.fit_transform(X_train)\ns_X_test = stsc.transform(X_test)","3d9ea7d7":"model = LogisticRegression()\n#model = SVC()\n#model = RandomForestClassifier()\nmodel.fit(s_X_train,y_train)","fb26c277":"model.score(s_X_train,y_train)","d14c9cfb":"model.score(s_X_test,y_test)","04b039a0":"confusion_matrix(y_train, model.predict(s_X_train))","b5882c3f":"print(classification_report(y_train, model.predict(s_X_train)))","34927f41":"confusion_matrix(y_test, model.predict(s_X_test))","4f10636c":"print(classification_report(y_test, model.predict(s_X_test)))","78a119ad":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.pipeline import Pipeline","1bc712b6":"X_train, X_test, y_train, y_test  = train_test_split(\n                                    df2.drop('y', axis=1), df2['y'], test_size=.25, random_state = 0, stratify= df2['y'])","ce57e4f8":"#model = LogisticRegression()\n#model = DecisionTreeClassifier()\nmodel = RandomForestClassifier()\n#model = SVC","583565d6":"steps = [('scaler', StandardScaler()),\n         ('model', model)]\npipeline = Pipeline(steps)\npipeline.fit(X_train,y_train)","fc8a0138":"y_pred = pipeline.predict(X_test)\nprint(y_pred)","3c1e4855":"print('confusion matrix for training data:')\nprint(confusion_matrix(y_train, pipeline.predict(X_train)))\nprint('==============================')\nprint('confusion matrix for testing data:')\nprint(confusion_matrix(y_test, pipeline.predict(X_test)))","4981e7b2":"print('classification report for training data:')\nprint(classification_report(y_train, pipeline.predict(X_train)))\nprint('==============================')\nprint('classification report for testing data:')\nprint(classification_report(y_test, pipeline.predict(X_test)))","c424a115":"accuracy_score(y_test, pipeline.predict(X_test))","c6e12338":"## ML Model Building","c8c49a1e":"The data is related with direct marketing campaigns of a Portuguese banking institution. \n   The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, \n   in order to access if the product (bank term deposit) would be (or not) subscribed. \n\n> Number of Instances: 41188\n\n> Number of Attributes: 20 + output attribute.\n\n\nThe classification goal is to predict if the client will subscribe a term deposit (variable y).\n","d71fbea1":"## Still not completed.","0adcb4b2":"# Attribute information:\n   Input variables:\n  \n   ## Bank client data:\n   \n   1 - age (numeric)\n  \n   2 - Job : type of job (categorical: 'admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management', 'retired', 'self-employed', 'services', 'student', 'technician', 'unemployed', 'unknown')\n   \n   3 - marital : marital status (categorical: 'divorced', 'married', 'single', 'unknown' ; note: 'divorced' means divorced or widowed)\n  \n   4 - Education (categorical: 'basic.4y', 'basic.6y', 'basic.9y', 'high.school', 'illiterate', 'professional.course', 'university.degree', 'unknown')\n\n   \n   5 - Default: has credit in default? (categorical: 'no', 'yes', 'unknown')\n  \n   6 - Housing: has housing loan? (categorical: 'no', 'yes', 'unknown')\n  \n   7 - Loan: has personal loan? (categorical: 'no', 'yes', 'unknown')\n  \n   ## Related with the last contact of the current campaign:\n   \n   8 - contact: contact communication type (categorical: \"unknown\",\"telephone\",\"cellular\") \n  \n   9 - Dayofweek: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')\n  \n   10 - month: last contact month of year (categorical: \"jan\", \"feb\", \"mar\", ..., \"nov\", \"dec\")\n  \n   11 - Duration: last contact duration, in seconds (numeric). \n   \nImportant note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.\n\n  \n   ## other attributes:\n  \n  12 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n  \n  13 - Pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n  \n  14 - previous: number of contacts performed before this campaign and for this client (numeric)\n\n  15 - poutcome: outcome of the previous marketing campaign (categorical: \"unknown\",\"other\",\"failure\",\"success\")\n  \n  ## Social and economic context attributes:\n  \n  16 - Emp.var.rate: employment variation rate - quarterly indicator (numeric)\n  \n  17 - Cons.price.idx: consumer price index - monthly indicator (numeric)\n  \n  18 - Cons.conf.idx: consumer confidence index - monthly indicator (numeric)\n  \n  19 - Euribor3m: euribor 3 month rate - daily indicator (numeric)\n  \n  20 - Nr.employed: number of employees - quarterly indicator (numeric)\n\n# Output variable (desired target):\n\n  21 - y - has the client subscribed a term deposit? (binary: \"yes\",\"no\")"}}