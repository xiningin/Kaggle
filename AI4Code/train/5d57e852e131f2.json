{"cell_type":{"c9f47178":"code","b4b3fbda":"code","2428e82c":"code","826e8934":"code","84f1a4ef":"code","9c00ce6e":"code","c441301c":"code","f37b2aef":"code","28d44ad0":"code","2cff3d86":"code","dbe41faa":"code","aa14797b":"code","2b0d7a91":"code","bef8f8c6":"code","a3ab259d":"code","0261d1f8":"code","70345e2b":"code","c5b83bc6":"code","60f1d504":"code","30269884":"code","d2a342e7":"code","9a8cfb93":"code","3578982b":"code","d9cd5633":"code","1de2a20b":"code","ee749d44":"code","c1b63aec":"code","0f64be3a":"code","b546754d":"code","bc979ae8":"code","b957b8f0":"code","4db71a91":"code","b468fe7a":"code","d3951edf":"code","7245bf16":"code","f9fcaa78":"markdown","77f40b64":"markdown","f9ab9de4":"markdown","7299ca65":"markdown","10c24873":"markdown","b0c0c488":"markdown"},"source":{"c9f47178":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.layers import Conv1D, Conv2D, MaxPooling1D, MaxPooling2D, Flatten, Dense, Reshape, Dropout, LSTM, RepeatVector, TimeDistributed","b4b3fbda":"train = pd.read_csv(\"..\/input\/janatahack-mobility-analysis\/train.csv\")\ntest = pd.read_csv(\"..\/input\/janatahack-mobility-analysis\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/janatahack-mobility-analysis\/sample_submission.csv\")","2428e82c":"train.head()","826e8934":"test.head()","84f1a4ef":"train.isnull().sum().sum()","9c00ce6e":"train.fillna(train.mean(),inplace=True)\ntrain.fillna(train.mode().iloc[0],inplace=True)\n\ntest.fillna(test.mean(),inplace=True)\ntest.fillna(test.mode().iloc[0],inplace=True)","c441301c":"# imp = SimpleImputer(missing_values=np.nan,strategy=\"most_frequent\")\n# imp.fit_transform(train)","f37b2aef":"train.isnull().sum().sum()","28d44ad0":"train.shape","2cff3d86":"#train.dropna(inplace=True)","dbe41faa":"for col in [\"Trip_Distance\",\"Customer_Since_Months\",\"Life_Style_Index\",\"Var1\",\"Var2\",\"Var3\"]:\n  plt.figure(figsize=(10,4))\n  plt.xlim(train[col].min(), train[col].max())\n  sns.boxplot(x=train[col])","aa14797b":"# train = train[train['Life_Style_Index']<4.8]\ntrain = train[train['Var1']<200]\ntrain = train[train['Var2']<120]\ntrain = train[train['Var3']<2000]","2b0d7a91":"train.shape","bef8f8c6":"le = LabelEncoder()\ntrain[\"Type_of_Cab_label\"] = le.fit_transform(train.Type_of_Cab)\ntrain = train.drop('Type_of_Cab',axis=1)\n\nle = LabelEncoder()\ntest[\"Type_of_Cab_label\"] = le.fit_transform(test.Type_of_Cab)\ntest = test.drop('Type_of_Cab',axis=1)","a3ab259d":"le = LabelEncoder()\ntrain[\"Confidence_Life_Style_Index_label\"] = le.fit_transform(train.Confidence_Life_Style_Index)\ntrain = train.drop('Confidence_Life_Style_Index',axis=1)\n\nle = LabelEncoder()\ntest[\"Confidence_Life_Style_Index_label\"] = le.fit_transform(test.Confidence_Life_Style_Index)\ntest = test.drop('Confidence_Life_Style_Index',axis=1)","0261d1f8":"le = LabelEncoder()\ntrain[\"Destination_Type_label\"] = le.fit_transform(train.Destination_Type)\ntrain = train.drop('Destination_Type',axis=1)\n\nle = LabelEncoder()\ntest[\"Destination_Type_label\"] = le.fit_transform(test.Destination_Type)\ntest = test.drop('Destination_Type',axis=1)","70345e2b":"le = LabelEncoder()\ntrain[\"Gender_label\"] = le.fit_transform(train.Gender)\ntrain = train.drop('Gender',axis=1)\n\nle = LabelEncoder()\ntest[\"Gender_label\"] = le.fit_transform(test.Gender)\ntest = test.drop('Gender',axis=1)","c5b83bc6":"train.head()","60f1d504":"test.head()","30269884":"train.Surge_Pricing_Type.unique()","d2a342e7":"X = train.copy()\ny = X['Surge_Pricing_Type']\nX = X.drop(['Surge_Pricing_Type','Trip_ID'],axis=1)","9a8cfb93":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=18)","3578982b":"test = test.drop(['Trip_ID'],axis=1)","d9cd5633":"model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=10, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=10, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=150,\n                       n_jobs=None, oob_score=False, random_state=42, verbose=0,\n                       warm_start=False)\nmodel.fit(X_train,y_train)","1de2a20b":"# model = LogisticRegression(random_state=42,solver = 'liblinear').fit(X_train, y_train)","ee749d44":"# model = DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,\n#                        criterion='gini', max_depth=9, max_features='auto',\n#                        max_leaf_nodes=None,\n#                        min_impurity_decrease=0.0, min_impurity_split=None,\n#                        min_weight_fraction_leaf=0.0,\n#                        random_state=42)\n# model.fit(X_train,y_train)","c1b63aec":"# model = SVC(kernel='rbf')\n# model.fit(X_train,y_train)","0f64be3a":"# model = Sequential()\n# model.add(Reshape((1,X_train.shape[1],1)))\n# model.add(Conv2D(filters = 32, kernel_size = (2,2),padding = 'Same',\n#              activation ='relu', input_shape = (1,X_train.shape[1],1)))\n# model.add(Flatten())\n# model.add(Dense (500, activation='tanh'))\n# model.add(Dropout(0.1))\n# model.add(Dense (100, activation='tanh'))\n# model.add(Dense (1, activation='softmax'))\n# model.compile(loss='categorical_crossentropy', optimizer='adam',\n#               metrics=['accuracy'])","b546754d":"# model.fit(np.array(X_train), np.array(y_train), epochs=5, batch_size=1000, validation_data=(np.array(X_val),np.array(y_val)))","bc979ae8":"preds = model.predict(X_val)","b957b8f0":"accuracy_score(y_val, preds)","4db71a91":"preds = model.predict(test)","b468fe7a":"submission = sample_submission.copy()","d3951edf":"submission['Surge_Pricing_Type'] = preds","7245bf16":"submission.to_csv(\"submission.csv\",index=False)","f9fcaa78":"Predict","77f40b64":"CNN","f9ab9de4":"SVM","7299ca65":"Logistic Regression","10c24873":"Decision Tree Classifier","b0c0c488":"Random Forest"}}