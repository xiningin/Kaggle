{"cell_type":{"0d407b5f":"code","5ba2fe4a":"code","1090b98e":"code","9e107985":"code","653f7398":"code","369e453e":"code","684e5801":"code","20cf3bf6":"code","d1168b6e":"code","f58b9693":"code","62575944":"code","57c90e25":"code","a775efac":"code","5793503a":"code","e804cfbb":"code","5eb2f5b3":"code","c3ef5c62":"code","3a4c0699":"code","f02fb7f0":"markdown","f03122dd":"markdown","35cc8dca":"markdown","31787581":"markdown","540dcd75":"markdown","e0778a49":"markdown","d150b42a":"markdown","5e11b75c":"markdown","8157fb26":"markdown","e156e11b":"markdown","d8cd468b":"markdown","bf36c2f0":"markdown","7df108e0":"markdown","75e5b4e8":"markdown","47b91247":"markdown","87852e81":"markdown"},"source":{"0d407b5f":"import pandas as pd\nimport csv\nimport numpy as np\nfrom scipy.spatial.distance import pdist\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","5ba2fe4a":"raw_data = pd.read_csv('..\/input\/energy-molecule\/roboBohr.csv')","1090b98e":"raw_data.shape","9e107985":"raw_data.columns","653f7398":"raw_data.isnull().sum().sum()","369e453e":"Eat = raw_data['Eat']\n\nEat.describe()","684e5801":"sns.distplot(Eat, kde=True, color=\"g\")\nplt.xlabel('Atomization Energy')\nplt.ylabel('Frequency')\nplt.title('Atomization Energy Distribution');","20cf3bf6":"ids = raw_data['pubchem_id'].values\nnids = len(ids)","d1168b6e":"processed_data_path = '..\/input\/processed-data\/'\n\npos_vec = np.loadtxt(processed_data_path + 'pos_vec_pad.txt')\nfull_charges_vec = np.loadtxt(processed_data_path + 'full_charges_vec_pad.txt')\n\npos_vec = pos_vec.reshape(16242, 50, 3)\nfull_charges_vec = full_charges_vec.reshape(16242, 50)","f58b9693":"# from pubchempy import get_compounds\n\n# pos_vec = []\n# full_charges_vec = []\n\n# for i, cid in enumerate(ids):\n#     print('Getting id {} of {}.'.format(i,  nids))\n\n#     c = get_compounds(cid, 'cid', record_type='3d')[0]\n\n#     pos = []\n#     charges = []\n#     for j, at in enumerate(c.atoms):\n#         at = at.to_dict()\n        \n#         el = at['element']\n#         number = at['number']\n#         x, y, z = at['x'], at['y'], at['z']\n\n#         pos.append([x, y, z])\n#         charges.append(number)\n    \n#     pos_vec.append(pos)\n#     full_charges_vec.append(charges)","62575944":"# We zero-pad the position and full charge vectors\n\n# maxlen = max([len(x) for x in pos_vec])\n\n# pos_vec_pad = []\n# for i in range(len(pos_vec)):\n#     pos_vec[i] += [[0, 0, 0]] * (maxlen - len(pos_vec[i]))\n#     pos_vec_pad.append(pos_vec[i])\n    \n# pos_vec_pad = np.array(pos_vec_pad)\n\n# full_charges_vec_pad = []\n# for i in range(len(full_charges_vec)):\n#     full_charges_vec[i] += [0] * (maxlen - len(full_charges_vec[i]))\n#     full_charges_vec_pad.append(full_charges_vec[i])\n    \n# full_charges_vec_pad = np.array(full_charges_vec_pad)","57c90e25":"mask = full_charges_vec <= 2\nvalence_charges = full_charges_vec * mask\n\nmask = np.logical_and(full_charges_vec > 2, full_charges_vec <= 10)\nvalence_charges += (full_charges_vec - 2) * mask\n\nmask = np.logical_and(full_charges_vec > 10, full_charges_vec <= 18)\nvalence_charges += (full_charges_vec - 10) * mask","a775efac":"overlapping_precision = 1e-1\nsigma = 2.0\nmin_dist = np.inf\n\nfor i in range(nids):\n    n_atoms = np.sum(full_charges_vec[i] != 0)\n    pos_i = pos_vec_pad[i, :n_atoms, :]\n    min_dist = min(min_dist, pdist(pos_i).min())\n\ndelta = sigma * np.sqrt(-8 * np.log(overlapping_precision))\npos_vec_pad = pos_vec * delta \/ min_dist","5793503a":"M, N, O = 192, 128, 96\n\ngrid = np.mgrid[-M\/\/2:-M\/\/2+M, -N\/\/2:-N\/\/2+N, -O\/\/2:-O\/\/2+O]\ngrid = np.fft.ifftshift(grid)","e804cfbb":"from kymatio.torch import HarmonicScattering3D\n\n# number of scales.\nJ = 2\n# number of l values\nL = 3\n# List of exponents to the power of which moduli are raised before integration.\nintegral_powers = [0.5, 1.0, 2.0, 3.0]\n\nscattering = HarmonicScattering3D(J=J,\n                                  shape=(M, N, O),\n                                  L=L,\n                                  sigma_0=sigma, # bandwidth of mother wavelet\n                                  integral_powers=integral_powers)","5eb2f5b3":"import torch\n\nif torch.cuda.is_available():\n    device = 'cuda'\nelse:\n    device = 'cpu'\n\nscattering.to(device)\n\nprint('Using', device)","c3ef5c62":"batch_size = 8\nn_batches = int(np.ceil(nids \/ batch_size))\n\nprint('n_batches = ', n_batches)","3a4c0699":"from kymatio.scattering3d.backend.torch_backend import compute_integrals\nfrom kymatio.scattering3d.utils import generate_weighted_sum_of_gaussians\n\norder_0, orders_1_and_2 = [], []\nprint('Computing solid harmonic scattering coefficients of {} molecules from the QM7 database on {}'.format(\n                                                            nids, {'cuda': 'GPU', 'cpu': 'CPU'}[device]))\nprint('sigma: {}, L: {}, J: {}, integral powers: {}'.format(sigma, L, J, integral_powers))\n\nthis_time = None\nlast_time = None\nfor i in range(n_batches):\n    this_time = time.time()\n    if last_time is not None:\n        dt = this_time - last_time\n        print(\"Iteration {} ETA: [{:02}:{:02}:{:02}]\".format(\n                    i + 1, int(((n_batches - i - 1) * dt) \/\/ 3600),\n                    int((((n_batches - i - 1) * dt) \/\/ 60) % 60),\n                    int(((n_batches - i - 1) * dt) % 60)))\n    else:\n        print(\"Iteration {} ETA: {}\".format(i + 1, '-'))\n    last_time = this_time\n    time.sleep(1)\n\n    # Extract the current batch.\n    start = i * batch_size\n    end = min(start + batch_size, nids)\n\n    pos_batch = pos_vec_pad[start:end]\n    full_batch = full_charges_vec_pad[start:end]\n    val_batch = valence_charges[start:end]\n\n    # Calculate the density map for the nuclear charges and transfer to PyTorch.\n    full_density_batch = generate_weighted_sum_of_gaussians(grid, pos_batch, full_batch, sigma)\n    full_density_batch = torch.from_numpy(full_density_batch)\n    full_density_batch = full_density_batch.to(device).float()\n\n    # Compute zeroth-order, first-order, and second-order scattering coefficients of the nuclear charges.\n    full_order_0 = compute_integrals(full_density_batch, integral_powers)\n    full_scattering = scattering(full_density_batch)\n\n    # Compute the map for valence charges.\n    val_density_batch = generate_weighted_sum_of_gaussians(grid, pos_batch, val_batch, sigma)\n    val_density_batch = torch.from_numpy(val_density_batch)\n    val_density_batch = val_density_batch.to(device).float()\n\n    # Compute scattering coefficients for the valence charges.\n    val_order_0 = compute_integrals(val_density_batch, integral_powers)\n    val_scattering = scattering(val_density_batch)\n\n    # Take the difference between nuclear and valence charges, then\n    # compute the corresponding scattering coefficients.\n    core_density_batch = full_density_batch - val_density_batch\n\n    core_order_0 = compute_integrals(core_density_batch, integral_powers)\n    core_scattering = scattering(core_density_batch)\n\n    # Stack the nuclear, valence, and core coefficients into arrays and append them to the output.\n    batch_order_0 = torch.stack((full_order_0, val_order_0, core_order_0), dim=-1)\n    batch_orders_1_and_2 = torch.stack((full_scattering, val_scattering, core_scattering), dim=-1)\n\n    order_0.append(batch_order_0)\n    orders_1_and_2.append(batch_orders_1_and_2)","f02fb7f0":"From the nuclear charges, we compute the number of valence electrons, which we store as the valence charge of that atom.","f03122dd":"## Reading data","35cc8dca":"Given the rescaled positions and charges, we are now ready to compute the density maps by placing Gaussians at the different positions weighted by the appropriate charge. These are fed into the 3D solid harmonic scattering transform to obtain features that are used to regress the energies. In order to do this, we must first define a grid.","31787581":"Columns in the dataset:\n\n- 'Unnamed: 0' - Index for each molecule.\n- '0'-'1274' - Coulomb matrix elements, i.e. molecular features.\n- 'pubchem_id' - Pubchem Id where the molecular structures are obtained. A unique identifier for each molecule\n- 'Eat' - atomization energy calculated by simulations using the Quantum Espresso package.","540dcd75":"Note: I already extracted and processed the data. I leave the code below commented in case you need.","e0778a49":"We then check whether a GPU is available, in which case we transfer our scattering object there.","d150b42a":"The maps computed for each molecule are quite large, so the computation has to be done by batches. Here we select a small batch size to ensure that we have enough memory when running on the GPU. Dividing the number of molecules by the batch size then gives us the number of batches.","5e11b75c":"## Get atomic positions","8157fb26":"We are now ready to compute the scattering transforms. In the following loop, each batch of molecules is transformed into three maps using Gaussians centered at the atomic positions, one for the nuclear charges, one for the valence charges, and one with their difference (called the \u201ccore\u201d charges). For each map, we compute its scattering transform up to order two and store the results.","e156e11b":"# Representing molecules as surrogate electronic densities using 3D scattering transform","d8cd468b":"## Compute valence electrons number","bf36c2f0":"We extract the atomic positions and nuclear charges of each molecule from [PubChem](https:\/\/pubchem.ncbi.nlm.nih.gov\/). In orderd to do that, we use the function 'get_compounds' from the module 'pubchempy'. <br>","7df108e0":"We then normalize the positions of the atoms. Specifically, the positions are rescaled such that two Gaussians of width sigma placed at those positions overlap with amplitude less than overlapping_precision.","75e5b4e8":"## Importing libraries","47b91247":"<font color='red'>This notebook is meant to serve only as example of how to use scattering transform for classification task. The anlysis is incomplete. <\/font>\n\nIn this notebook I train a classifier combined with a scattering transform on the RoboBohr dataset to represent molecules as surrogate electronic densities. To compute 3D scattering transforms, I use the kymatio Scattering3D class[1].\n\nScattering transform is defined as a complex-valued convolutional neural network whose filters are fixed to be wavelets and the non-linearity is a complex modulus. <br>\nUsing wavelets representing Gaussian-type orbital functions, we create surrogate electronic densities of the molecule from which we compute invariant \u201dsolid harmonic scattering coefficients\u201d. Scattering coefficients are invariant to rigid body motion and stable to deforrmaiton of the input density [2].\nSimilarly to the Density Functional which computes the ground state energy for an input density, scattering transform takes as input a surrogate density \u03c1 and output an approximation of the ground-state energy. <br>\nFrom these invariant coefficients, the ground state energy of molecules can be computed by mean of regression.\n\n\nThis notebook follows the example in this [link](https:\/\/www.kymat.io\/gallery_3d\/scattering3d_qm7_torch.html#sphx-glr-gallery-3d-scattering3d-qm7-torch-py) that shows the same analysis on a similar dataset.\n\n\n[1] \"Kymatio: Scattering Transforms in Python\" Andreux M. at al., https:\/\/arxiv.org\/abs\/1812.11214 <br>\n[2] \"Solid Harmonic Wavelet Scattering for Predictions of Molecule Properties\", Eickenberg et al., arXiv:1805.00571","87852e81":"# Scattering Transform"}}