{"cell_type":{"a61be0f1":"code","009394d5":"code","e0e0a3bd":"code","4f957a66":"code","a97027ee":"code","910ac1cc":"markdown","2bc10d90":"markdown","8f322bdb":"markdown","e6810d7c":"markdown"},"source":{"a61be0f1":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.6 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.6.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","009394d5":"%%writefile AlbertEinsteinAcademic.py\nfrom kaggle_environments.envs.football.helpers import *\nimport numpy\n\n# @human_readable_agent wrapper modifies raw observations \n# provided by the environment:\n# https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md#raw-observations\n# into a form easier to work with by humans.\n# Following modifications are applied:\n# - Action, PlayerRole and GameMode enums are introduced.\n# - 'sticky_actions' are turned into a set of active actions (Action enum)\n#    see usage example below.\n# - 'game_mode' is turned into GameMode enum.\n# - 'designated' field is removed, as it always equals to 'active'\n#    when a single player is controlled on the team.\n# - 'left_team_roles'\/'right_team_roles' are turned into PlayerRole enums.\n# - Action enum is to be returned by the agent function.        \n\n@human_readable_agent\ndef agent(obs):\n        \n    # Make sure player is running.\n    if Action.Sprint not in obs['sticky_actions']:\n        return Action.Sprint\n    # We always control left team (observations and actions\n    # are mirrored appropriately by the environment).\n    controlled_player_pos = obs['left_team'][obs['active']]\n    # Does the player we control have the ball?\n    \n    \n    if obs['ball_owned_team'] == 0 and obs['ball_owned_player'] == obs['active']:\n        \n        # Shot if we are 'close' to the goal (based on 'x-y' coordinate).\n        if controlled_player_pos[0] >= 0.7 and controlled_player_pos[1] > 0.3:\n            return numpy.random.choice([Action.Shot, Action.TopRight, Action.Right])\n        \n        if controlled_player_pos[0] >= 0.7 and controlled_player_pos[1] < -0.3:\n            return  numpy.random.choice([Action.Shot, Action.BottomRight, Action.Right])\n        \n        if controlled_player_pos[0] > 0.5 and (controlled_player_pos[1] >= -0.5 and controlled_player_pos[1] <= 0.5):\n            return numpy.random.choice([Action.Shot, Action.TopRight, Action.BottomRight]) \n        \n        if controlled_player_pos[0] >= 0.7:\n            if controlled_player_pos[1] >= -0.3 and controlled_player_pos[1] <= 0.3:\n                return Action.Shot \n            \n        \n        if controlled_player_pos[0] < 0.0:\n            return numpy.random.choice([Action.ShortPass, Action.LongPass, Action.HighPass])\n        \n        #go forward and remove ball in dangerous place.\n        if controlled_player_pos[0] < -0.5:\n            return Action.Right\n        \n        if controlled_player_pos[0] >= 0.0:\n            return Action.Right\n\n        \n        # Run towards the goal otherwise.\n        return Action.Right \n        \n    else:\n        \n        right_player_pos = obs['right_team'][obs['active']]\n        \n        # Run towards the ball.\n        if obs['ball'][0] > controlled_player_pos[0] + 0.05:\n            return numpy.random.choice([Action.Right, Action.BottomRight, Action.TopRight])\n\n        if obs['ball'][0] < controlled_player_pos[0] - 0.05:\n            return numpy.random.choice([Action.Left, Action.TopLeft, Action.BottomLeft])\n\n        if obs['ball'][1] > controlled_player_pos[1] + 0.05:\n            return numpy.random.choice([Action.Bottom, Action.BottomLeft, Action.BottomRight])\n\n        if obs['ball'][1] < controlled_player_pos[1] - 0.05:\n            return numpy.random.choice([Action.Top, Action.TopLeft, Action.TopRight])\n        \n        #run toward the opposite player\n        if right_player_pos[0] > controlled_player_pos[0] + 0.05:\n            return numpy.random.choice([Action.Right, Action.BottomRight, Action.TopRight])\n        \n        if right_player_pos[0] < controlled_player_pos[0] - 0.05:\n            return numpy.random.choice([Action.Left, Action.BottomLeft, Action.TopLeft])\n        \n        if right_player_pos[1] > controlled_player_pos[1] + 0.05:\n            return numpy.random.choice([Action.Bottom, Action.BottomRight, Action.BottomLeft])\n        \n        if right_player_pos[1] < controlled_player_pos[1] - 0.05:\n            return numpy.random.choice([Action.Top, Action.TopLeft, Action.TopRight])\n\n        # Try to take over the ball if close to the ball.\n        return Action.Slide","e0e0a3bd":"%%writefile NeilsBohrAcademic.py\nfrom kaggle_environments.envs.football.helpers import *\nimport numpy\n\n# @human_readable_agent wrapper modifies raw observations \n# provided by the environment:\n# https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md#raw-observations\n# into a form easier to work with by humans.\n# Following modifications are applied:\n# - Action, PlayerRole and GameMode enums are introduced.\n# - 'sticky_actions' are turned into a set of active actions (Action enum)\n#    see usage example below.\n# - 'game_mode' is turned into GameMode enum.\n# - 'designated' field is removed, as it always equals to 'active'\n#    when a single player is controlled on the team.\n# - 'left_team_roles'\/'right_team_roles' are turned into PlayerRole enums.\n# - Action enum is to be returned by the agent function.        \n\n@human_readable_agent\ndef agent(obs):\n        \n    # Make sure player is running.\n    if Action.Sprint not in obs['sticky_actions']:\n        return Action.Sprint\n    # We always control left team (observations and actions\n    # are mirrored appropriately by the environment).\n    controlled_player_pos = obs['left_team'][obs['active'] - 5]\n    \n    # Does the player we control have the ball?\n    right_player_pos = obs['right_team'][obs['active']]\n    goalKeeperR = obs['right_team'][0] #opponent goal keeper\n    \n################################### Team Strategy ###############################################################   \n\n    if obs['ball_owned_team'] == 0 and obs['ball_owned_player'] == obs['active']:\n        \n        # single player have a ball.\n        player_pos = obs['left_team'][obs['active']]\n        u_vector = numpy.zeros((2, 1)) # \n        w_vector = u_vector.copy()\n        \n        u_vector[0] = goalKeeperR[0] - player_pos[0]\n        u_vector[1] = goalKeeperR[1] - player_pos[1]\n        distanceG_P = numpy.linalg.norm(u_vector, 2) # distance between active players and goal keeper oppenent\n        \n        w_vector[0] = player_pos[0] - right_player_pos[0]\n        w_vector[1] = player_pos[1] - right_player_pos[0]\n        distanceP_P = numpy.linalg.norm(w_vector, 2) # distance between active player and opponent\n        \n        #left goal keeper kicks a ball in dangerous place\n        if obs['active'] == 0: \n            x = numpy.random.choice([Action.Shot, Action.LongPass])\n            print('GoalKeeper: ', x, ' Active players: ', obs['active'])\n            return x\n        \n        \n        #*************************** controlling only one players *******************************#\n        \n        # player's prepares  to score.\n        if player_pos[0] > 0.5 and (player_pos[1] >= -0.5 and player_pos[1] <= 0.5):\n            x = numpy.random.choice([Action.TopRight, Action.BottomRight, Action.Right, \n                                     Action.Shot, Action.Top, Action.Bottom]) \n            return x\n        \n        #player echap or dribble\n        if distanceP_P < 0.025:\n            return numpy.random.choice([Action.ReleaseSprint, Action.BottomRight, Action.TopRight, \n                                        Action.ReleaseDribble])\n        \n        # Shot if we are 'close' to the goal (based on 'x-y' coordinate).\n        if player_pos[0] >= 0.7:\n            \n            #player tends to adjust a ball to go to score\n            if player_pos[1] > 0.5:\n                x = numpy.random.choice([Action.TopRight, Action.Top, Action.Shot])\n                return x\n            \n            if player_pos[1] < -0.5:\n                x = numpy.random.choice([Action.BottomRight, Action.Bottom, Action.Shot])\n                return  x\n            \n            if distanceG_P < 0.05:\n                return numpy.random.choice([Action.BottomRight, Action.TopRight, Action.Shot])\n            \n            if player_pos[1] >= -0.5 and player_pos[1] <= 0.5:\n                x = Action.Shot\n                return x\n        #******************************************************************************************#\n            \n        # make some passing ball forward\n        if (controlled_player_pos[0] - player_pos[0]) > 0: \n            x = numpy.random.choice([Action.ShortPass, Action.LongPass, Action.HighPass])\n            return x\n        \n        # Run towards the goal otherwise.\n        return Action.Right \n        \n    else:\n        \n        # Run towards the ball.\n        if (obs['ball'][0] > controlled_player_pos[0] + 0.05) and (right_player_pos[0] > controlled_player_pos[0] + 0.05):\n            return numpy.random.choice([Action.Right, Action.BottomRight, Action.TopRight])\n\n        if (obs['ball'][0] < controlled_player_pos[0] - 0.05) and (right_player_pos[0] < controlled_player_pos[0] - 0.05):\n            return numpy.random.choice([Action.Left, Action.TopLeft, Action.BottomLeft])\n\n        if (obs['ball'][1] > controlled_player_pos[1] + 0.05) and (right_player_pos[1] > controlled_player_pos[1] + 0.05):\n            return numpy.random.choice([Action.Bottom, Action.BottomLeft, Action.BottomRight])\n\n        if (obs['ball'][1] < controlled_player_pos[1] - 0.05) and (right_player_pos[1] < controlled_player_pos[1] - 0.05):\n            return numpy.random.choice([Action.Top, Action.TopLeft, Action.TopRight])\n        \n        # Run towards the ball.\n        if obs['ball'][0] > controlled_player_pos[0] + 0.05:\n            return numpy.random.choice([Action.Right, Action.BottomRight, Action.TopRight])\n\n        if obs['ball'][0] < controlled_player_pos[0] - 0.05:\n            return numpy.random.choice([Action.Left, Action.TopLeft, Action.BottomLeft])\n\n        if obs['ball'][1] > controlled_player_pos[1] + 0.05:\n            return numpy.random.choice([Action.Bottom, Action.BottomLeft, Action.BottomRight])\n\n        if obs['ball'][1] < controlled_player_pos[1] - 0.05:\n            return numpy.random.choice([Action.Top, Action.TopLeft, Action.TopRight])\n\n        # Try to take over the ball if close to the ball.\n        return Action.Slide","4f957a66":"print('Welcome to this beautiful Kaggle stadium. We are going to watch a big derby between Einstein Academic Physics football and Bohr Academic Physics football. Goodluck!')","a97027ee":"from kaggle_environments import make\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\noutput = env.run([\"\/kaggle\/working\/AlbertEinsteinAcademic.py\", \"\/kaggle\/working\/NeilsBohrAcademic.py\"])[-1]\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\nenv.render(mode=\"human\", width=300, height=400)","910ac1cc":"Now it is time to implement the two bots. It consists of a single function **agent**, which is called by the Kaggle Environment on each step.\n**Agent** receives Kaggle-specific observations as a parameter, which contain GFootball environment observations under **players_raw** key.\nDetailed description of the GFootball observations is available [here](https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md).","2bc10d90":"# GFootball Academy \n\nBelow we present academic football with two simples Bot playing GFootball. The first step is to install required tools:","8f322bdb":"# Match: Quantum Mechanics(right team) vs General Relativity(left team)\n\n**Manager left team**: Albert Einstein.\n\n**Manager right team**: Neils Bohr\n\n**Referee**: Nature and Physics.","e6810d7c":"# Submit to Competition\n1. \"Save & Run All\" (commit) this Notebook\n1. Go to the notebook viewer\n1. Go to \"Data\" section and find submission.py file.\n1. Click \"Submit to Competition\"\n1. Go to [My Submissions](https:\/\/www.kaggle.com\/c\/football\/submissions) to view your score and episodes being played."}}