{"cell_type":{"bd089b10":"code","77bec3bd":"code","0e53939a":"code","14ee3112":"code","5c9d11bd":"code","e5d94031":"code","aa251fb7":"code","8e7d525d":"code","4bf97622":"code","d6fc1aa6":"code","d613a6d3":"code","7956ea9f":"code","ea6aedc2":"markdown","ac4951a3":"markdown","31ada7af":"markdown","2273bdc0":"markdown","0da610aa":"markdown","f02da685":"markdown","44621683":"markdown","45ce7698":"markdown"},"source":{"bd089b10":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","77bec3bd":"\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv( '..\/input\/test.csv' )\n\n#Reading data using Pandas\nX_train=  (train_df.iloc[:,1:].values).astype('float32')\nprint(X_train.shape)\nY_train = (train_df.iloc[:,0].values).astype('int32')\nX_test=  (test_df.iloc[:,:].values).astype('float32')\nprint(X_test.shape)\n#Y_test = (test_df.iloc[:,0].values).astype('int32')\n\n","0e53939a":"from keras.utils.np_utils import to_categorical\nX_train = X_train\/255\nX_test = X_test\/255\nY_train = to_categorical(Y_train)\n","14ee3112":"from keras.models import Sequential\nfrom keras.layers import Dense,Activation\nmodel = Sequential()\n# Note here that input_shape does not take number of training samples as input\n# Adding Activation as a separate layer is same as specifing the activation parameter in Dense layer\n\nmodel.add(Dense(5, activation = 'relu', input_shape= X_train.shape[1:]))\nmodel.add(Dense(3, activation = 'relu'))\nmodel.add(Dense(10, activation='softmax'))\n","5c9d11bd":"from keras.optimizers import RMSprop\nmodel.compile(optimizer=RMSprop(lr=0.001),\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\nhistory = model.fit(X_train, Y_train, epochs=10, verbose=1)","e5d94031":"print(history.history.keys())\nplt.plot(history.history['loss'])\nplt.plot(history.history['acc'])\nplt.title('model loss')\nplt.ylabel('loss\/acc')\nplt.xlabel('epoch')\nplt.legend(['loss', 'acc'])\nplt.show()","aa251fb7":"predictions = model.predict(X_test)\npredicted_vals = np.argmax(predictions, axis = 1)","8e7d525d":"\nimg = X_test[5]\nimg = np.reshape(img, (28, 28) )\nplt.imshow(img)\nprint(\"Predicted vals: \" + str(predicted_vals[5]))","4bf97622":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\n\nseed = 7\nnp.random.seed(seed)\n\n# note that  tensorflow backend accepts input in form of (rows, columns, channels) wheres theano accepts it as (chnanel, rows, columns)\ndef create_model():\n    model = Sequential()\n    model.add(Conv2D(32, (5, 5), input_shape=( 28, 28, 1), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu'))\n    model.add(Dense(10, activation='softmax'))\n    # Compile model\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n","d6fc1aa6":"\n\n# build the model\nmodel = create_model()\nX_train =  np.reshape(X_train, ( X_train.shape[0], 28,  28, 1) )\n# Fit the model\nhistory = model.fit(X_train, Y_train, epochs=10, validation_split= 0.3, batch_size=200, verbose=1)\nX_test =  np.reshape(X_test, ( X_test.shape[0], 28,  28, 1) )\nprint(X_test.shape)\n\n\n","d613a6d3":"predictions = model.predict(X_test)\npredicted_vals = np.argmax(predictions, axis = 1)\npredicted_vals = predicted_vals\n","7956ea9f":"results = pd.Series(predicted_vals,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,len(predicted_vals) + 1 ),name = \"ImageId\"),results],axis =1 )\nsubmission.to_csv(\"cnn_mnist_predict_new.csv\",index=False)","ea6aedc2":"###  Plotting the training history to tune parameters.","ac4951a3":"  ## 1. Simple Neural Network","31ada7af":"# Introduction\n\n<font size=5>After completing specialization on deep learning from coursera, this is my attempt to improve my understanding on various deep learning models, get a better graps of Keras, pandas, matlotlib and develop a deeper understanding of machine learning theory.\nI would start by applying a simple  neural network on this dataset, followed by CNN and on the way highlight the learning that I gained during the process. <\/font>\n\n","2273bdc0":"### Train the model on training set","0da610aa":"### iv. Plot the test image which is being predicted","f02da685":"###  Create Model","44621683":"## 2. CNN ","45ce7698":"### iii.Predict using the model\n"}}