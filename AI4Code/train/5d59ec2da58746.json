{"cell_type":{"1a297c67":"code","ad1a4184":"code","2a987b6d":"code","d609e55e":"code","6795f1b1":"code","999518e0":"code","032971f6":"code","11397a9c":"code","cba286df":"code","c099a7d8":"code","c11abe6d":"code","9eaa3c99":"code","7d71c6d7":"code","2bbb5891":"code","b5c51a7f":"markdown","648f6a1d":"markdown","f33de81d":"markdown","e5ace163":"markdown","3f2c2b17":"markdown","c2a1eda1":"markdown","c92dfe3b":"markdown","6176308b":"markdown","d63504f5":"markdown","c6202cf1":"markdown","c9ba5569":"markdown"},"source":{"1a297c67":"import pandas as pd\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.linear_model import LogisticRegression\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","ad1a4184":"train_df.info()\ntest_df.isnull().sum()","2a987b6d":"train_df.describe()","d609e55e":"train_df.head(10)","6795f1b1":"train_df.isnull().sum()","999518e0":"def preprocess(df):\n    # Fill in missing ages with average\n    df['Age'] = train_df['Age'].fillna(df['Age'].mean())\n    \n    # Convert to ints\n    df['Age'] = df['Age'].astype(int)\n\n    # Derrive titles\n    df['Title'] = df['Name'].str.extract(r'(?<=\\, )(.*?)(?=\\.)', expand=True)\n\n    # Embarked fill with most common\n    df['Embarked'] = df['Embarked'].fillna('S')\n\n    # Family Group Size\n    df['FamilyGroupSize'] = df['SibSp'] + df['Parch']\n\n    # Drop useless columns\n    df = df.drop(['Cabin', 'Name', 'Ticket'], axis=1)\n\n    # Convert features to numerics\n    df = pd.get_dummies(df, drop_first=True)\n    \n    return df\n\ntrain_df = preprocess(train_df)\ntrain_df = train_df.drop('PassengerId', axis=1)\ntest_df = preprocess(test_df)\n\ntrain_df.info()\n","032971f6":"ax = sns.countplot(x = 'Pclass', hue = 'Survived', palette = 'Set1', data = train_df)\nax.set(title = 'Passenger status (Survived\/Died) against Passenger Class', \n       xlabel = 'Passenger Class', ylabel = 'Total')\nplt.show()","11397a9c":"ax = sns.countplot(x = 'Sex_male', hue = 'Survived', palette = 'Set1', data = train_df)\nax.set(title = 'Total Survivors According to Sex (0 = female, 1 = male)', xlabel = 'Sex', ylabel='Total')\nplt.show()","cba286df":"plt.figure(figsize=(15,8))\nax = sns.kdeplot(train_df[\"Age\"][train_df['Survived'] == 1], color=\"darkturquoise\", shade=True)\nsns.kdeplot(train_df[\"Age\"][train_df['Survived'] == 0], color=\"lightcoral\", shade=True)\nplt.legend(['Survived', 'Died'])\nplt.title('Age of surivors')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","c099a7d8":"X_train = train_df.drop('Survived', axis=1)\ny_train = train_df['Survived']\n\nlogreg = LogisticRegression(max_iter=1000)\nrfe_cv = RFECV(logreg, step=1, cv=5, scoring='accuracy')\nrfe_cv = rfe_cv.fit(X_train, y_train)\n\nSelected_features = list(X_train.columns[rfe_cv.support_])\nprint(\"Features Selected: {}\".format(Selected_features))\n                                                  \nplt.figure()\nplt.xlabel(\"Number of features selected\")\nplt.ylabel(\"Cross validation score (nb of correct classifications)\")\nplt.plot(range(1, len(rfe_cv.grid_scores_) + 1), rfe_cv.grid_scores_)\nplt.show()","c11abe6d":"plt.subplots(figsize=(40,20))\nsns.heatmap(X_train[Selected_features].corr(), annot=True, cmap=\"RdYlGn\")\nplt.show()","9eaa3c99":"from sklearn.model_selection import train_test_split\n\nX = X_train[Selected_features]\ny = y_train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nlogreg = LogisticRegression(max_iter=1000)\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\n\nprint(\"accuracy:\", accuracy_score(y_test, y_pred))\n","7d71c6d7":"from sklearn.metrics import accuracy_score, roc_curve, roc_auc_score\n\ny_pred_proba = logreg.predict_proba(X_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test, y_pred_proba)\nauc = roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","2bbb5891":"test_df[['Title_Major', 'Title_Jonkheer', 'Title_Lady', 'Title_the Countess', 'Title_Mlle', 'Title_Don', 'Title_Mme', 'Title_Col', 'Title_Sir']] = 0\ntest_df['Survived'] = logreg.predict(test_df[Selected_features])\n\nsubmit = test_df[['PassengerId','Survived']]\nsubmit.to_csv(\"submit.csv\", index=False)\n\nsubmit.head()\n","b5c51a7f":"## Model Evaluation","648f6a1d":"# Exploring Data\nLooking at the data for inconsistencies and possible errors, this will give information for what type of preprocessing is needed.\n\n## Fields\n- survival\tSurvival\t0 = No, 1 = Yes\n- pclass\tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n- sex\tSex\t\n- Age\tAge in years\t\n- sibsp\t# of siblings \/ spouses aboard the Titanic\t\n- parch\t# of parents \/ children aboard the Titanic\t\n- ticket\tTicket number\t\n- fare\tPassenger fare\t\n- cabin\tCabin number\t\n- embarked\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton","f33de81d":"# Logistic Regression","e5ace163":"### Class\nTaking a look at whether the class influenced survivability.","3f2c2b17":"# Setup\nImporting the needed packages and load the original data into variables.","c2a1eda1":"# Preprocessing\nThe above data needs: \n- type conversions\n- looks like there is something wrong with the age data as the min is 0.42\n- can extract titles\n- can derive family size\n- drop useless columns","c92dfe3b":"# Analysis","6176308b":"## Feature Selection","d63504f5":"### Age\n\nTaking a look at if ages affected the survival rate.","c6202cf1":"## Visualization","c9ba5569":"### Sex\nTaking a look at whether the sex influenced survivability.\n"}}