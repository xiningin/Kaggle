{"cell_type":{"87555be5":"code","b728e05a":"code","fe7eef6c":"code","4970c6a0":"code","75c28b8d":"code","34ba798b":"code","44c182e8":"code","75011646":"code","0ff909e2":"code","27cc27c1":"code","4fcfb580":"code","9abc1fa3":"code","684cb603":"code","f270b3ac":"code","1b689789":"markdown","37784a9d":"markdown","c324906f":"markdown","d790fe51":"markdown","e7fb1308":"markdown","aef02098":"markdown","8ff5a1f3":"markdown","57be6341":"markdown","838cda8e":"markdown","29331afd":"markdown","142ef724":"markdown","398d14b8":"markdown"},"source":{"87555be5":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n\nsns.set(style='white', context='notebook', palette='deep')","b728e05a":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\ndf_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ndf_train.head()","fe7eef6c":"df_test_id = df_test[\"PassengerId\"]\ndf_train = df_train[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\",\"Survived\"]]\ndf_test = df_test[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"]]\n\ndf_train.head()","4970c6a0":"df_train.info()","75c28b8d":"df_test.info()","34ba798b":"# Age\u306e\u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\nage_ave = df_train['Age'].mean()\ndf_train['Age'] = df_train['Age'].fillna(age_ave)\ndf_test['Age'] = df_test['Age'].fillna(age_ave)\n\n# Fare\u306e\u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\nfare_ave = df_train['Fare'].mean()\ndf_train['Fare'] = df_train['Fare'].fillna(fare_ave)\ndf_test['Fare'] = df_test['Fare'].fillna(fare_ave)\n\n# Embarked\u306e\u6b20\u640d\u5024\u3092\u6700\u983b\u5024\"S\"\u3067\u57cb\u3081\u308b\ndf_train['Embarked'] = df_train['Embarked'].fillna(\"S\")\ndf_test['Embarked'] = df_test['Embarked'].fillna(\"S\")","44c182e8":"# SibSp\u3068Parch\u306e\u548c\u304c1\u4ee5\u4e0a\u3067\u3042\u308c\u30701\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u30700\u3068\u306a\u308b\u5217\"hasFamily\"\u3092\u8ffd\u52a0\ndf_train[\"FamilyNum\"] = df_train[\"SibSp\"] + df_train[\"Parch\"]\ndf_train[\"hasFamily\"] = df_train[\"FamilyNum\"].apply(lambda x : 1 if x >= 1 else 0)\ndf_train = df_train.drop(labels = [\"SibSp\"], axis = 1)\ndf_train = df_train.drop(labels = [\"Parch\"], axis = 1)\n\ndf_test[\"FamilyNum\"] = df_test[\"SibSp\"] + df_test[\"Parch\"]\ndf_test[\"hasFamily\"] = df_test[\"FamilyNum\"].apply(lambda x : 1 if x >= 1 else 0)\ndf_test = df_test.drop(labels = [\"SibSp\"], axis = 1)\ndf_test = df_test.drop(labels = [\"Parch\"], axis = 1)","75011646":"# \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u3092\u30c0\u30df\u30fc\u5909\u6570\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\ndf_train = pd.get_dummies(df_train, columns=[\"Sex\", \"Pclass\", \"Embarked\"])\ndf_test = pd.get_dummies(df_test, columns=[\"Sex\", \"Pclass\", \"Embarked\"])\n\n# \u30a8\u30f3\u30b3\u30fc\u30c9\u5f8c\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u8868\u793a\ndf_train.head()","0ff909e2":"# \u7279\u5fb4\u91cf\u3068\u30e9\u30d9\u30eb\u306b\u5206\u5272\nY_train = df_train[\"Survived\"]\nX_train = df_train.drop(labels = [\"Survived\"], axis = 1)\nX_test = df_test\n\ndel df_train\ndel df_test","27cc27c1":"# \u5b66\u7fd2\u7528\u30bb\u30c3\u30c8\u3068\u691c\u8a3c\u7528\u30bb\u30c3\u30c8\u306b\u5206\u5272\nrandom_seed = 1\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.5, random_state = random_seed)","4fcfb580":"# \u5b66\u7fd2\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\nparams = {\n    \"n_estimators\" : [2, 5, 10, 15, 20, 30, 50, 75, 100, 200, 500, 1000],\n    \"criterion\" : [\"gini\"],\n    \"min_samples_split\" : [2, 3, 5, 10, 15, 20, 30],\n    \"max_depth\" : [2, 3, 5, 10, 15, 20, 30],\n    \"random_state\" : [1],\n    \"verbose\" : [False],\n}\n\n# \u30e2\u30c7\u30eb\u69cb\u7bc9\nmodel = GridSearchCV(RandomForestClassifier(), params, cv = 3)\nmodel = model.fit(X_train, Y_train)\nmodel = model.best_estimator_\n\n# \u691c\u8a3c\u7528\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3066\u8a55\u4fa1\nmodel.score(X_val, Y_val)","9abc1fa3":"# \u4e88\u6e2c\nresults = model.predict(X_test)\nresults = pd.Series(results, name = \"Survived\")","684cb603":"# \u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\nsubmission = pd.concat([df_test_id, results], axis = 1)\nsubmission.to_csv(\"titanic_submission.csv\", index = False)\nsubmission","f270b3ac":"features = X_train.columns\nimportance = model.feature_importances_\nindices = np.argsort(importance)\n\nplt.figure(figsize = (8,6))\nplt.barh(range(len(indices)), importance[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.show()","1b689789":"\u30b3\u30f3\u30da\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u3001pandas\u306eDataframe\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3002","37784a9d":"# \uff13\uff0e\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3068\u4e88\u6e2c\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3001\u4e88\u6e2c\u3092\u884c\u3046\u3002","c324906f":"### \u6b20\u640d\u5024\u306e\u78ba\u8a8d\u3068\u51e6\u7406\n\ninfo()\u30e1\u30bd\u30c3\u30c9\u3067\u78ba\u8a8d\u3059\u308b\u3068\u3001Age\u3001Fare\u3001Embarked\u306b\u6b20\u640d\u5024\uff08Null\uff09\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002Aget\u3068Fare\u306e\u6b20\u640d\u5024\u306f\u5e73\u5747\u5024\u3067\u57cb\u3081\u3001Embarked\u306f\u6700\u983b\u5024\u3067\u3042\u308b\"S\"\u3067\u57cb\u3081\u308b\u3002","d790fe51":"# \uff14\uff0e\u8003\u5bdf\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u5b66\u7fd2\u7d50\u679c\u306b\u304a\u3051\u308b\u5404\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u30b0\u30e9\u30d5\u306b\u53ef\u8996\u5316\u3059\u308b\u3068\u3001\u3084\u306f\u308a\u6027\u5225\u3084\u5e74\u9f62\u304c\u91cd\u8981\u306a\u56e0\u5b50\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u8aad\u307f\u53d6\u308c\u308b\u3002","e7fb1308":"### \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u51e6\u7406\n\nSex\u3001Embarked\u306f\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306a\u306e\u3067\u3001pandas\u306eget_dummies()\u3067\u30c0\u30df\u30fc\u5909\u6570\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u3002","aef02098":"# Appendix.\u53c2\u8003\u8cc7\u6599\n* [Pandas\u3067\u6b20\u640d\u5024\u51e6\u7406 - Qiita](https:\/\/qiita.com\/0NE_shoT_\/items\/8db6d909e8b48adcb203)\n    * Pandas\u3092\u7528\u3044\u305f\u6b20\u640d\u5024\u306e\u51e6\u7406\u65b9\u6cd5\u306e\u624b\u5f15\u304d\u3068\u3057\u3066\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n* [3.2.4.3.1. sklearn.ensemble.RandomForestClassifier - scikit-learn 0.22 documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier)\n    * scikit-learn\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30af\u30e9\u30b9\u5206\u985e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3002","8ff5a1f3":"\u5b66\u7fd2\u7528\u30bb\u30c3\u30c8\uff08X_train,Y_train\uff09\u306e\u4e00\u90e8\u3092\u691c\u8a3c\u7528\u30bb\u30c3\u30c8\uff08X_val,Y_val\uff09\u3068\u3057\u3066\u8e74\u308a\u51fa\u3059\u3002\u4f55\u3082\u8003\u3048\u305a\u30e9\u30f3\u30c0\u30e0\u3067\u5206\u5272\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5b9f\u884c\u3059\u308b\u5ea6\u306b\u5b66\u7fd2\u306b\u7528\u3044\u3089\u308c\u308b\u30c7\u30fc\u30bf\u304c\u5909\u308f\u308a\u7d50\u679c\u306b\u5f71\u97ff\u3092\u53ca\u307c\u3059\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3002","57be6341":"\u3053\u3053\u307e\u3067\u3067\u30c7\u30fc\u30bf\u306e\u4e8b\u524d\u51e6\u7406\u3092\u4e00\u901a\u308a\u7d42\u3048\u305f\u305f\u3081\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3084\u4e88\u6e2c\u3092\u3057\u6613\u3044\u5f62\u306b\u5909\u63db\u3057\u3066\u3044\u304f\u3002\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\uff08X_train\uff09\u3068\u30e9\u30d9\u30eb\uff08Y_train\uff09\u306b\u5206\u5272\u3059\u308b\u3002","838cda8e":"\u3071\u3063\u3068\u601d\u3044\u3064\u304f\u6539\u5584\u70b9\u3068\u3057\u3066\u306f\u3001\n* \u30e2\u30c7\u30eb\u306e\u9078\u629e\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574\n* \u5229\u7528\u305b\u305a\u306b\u6368\u3066\u3066\u3044\u308b\u7279\u5fb4\u5024\uff08\u540d\u524d\u306a\u3069\uff09\u3092\u4e0a\u624b\u304f\u5229\u7528\u3067\u304d\u306a\u3044\u304b","29331afd":"### \u540c\u4e57\u5bb6\u65cf\u306e\u6709\u7121\u3092\u8868\u3059\u5217\u306e\u8ffd\u52a0\n\u5bb6\u65cf\u3068\u540c\u4e57\u3057\u3066\u3044\u308b\u304b\u304c\u751f\u5b58\u7387\u306b\u95a2\u4fc2\u3057\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u3001\u65b0\u3057\u3044\u5909\u6570\"hasFamily\"\u3092\u8ffd\u52a0\u3059\u308b\u3002SibSp\u304bParch\u306e\u5c11\u306a\u304f\u3068\u3082\u3069\u3061\u3089\u304b\u304c1\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001\u5909\u6570hasFamily\u306e\u5024\u30921\u3068\u3059\u308b\u3002\u3069\u3061\u3089\u30820\u3067\u3042\u308c\u3070\u5909\u6570\u306e\u5024\u30920\u3068\u3059\u308b\u3002","142ef724":"# \uff12\uff0e\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\n\n\u307e\u305a\u306f\u3001\u4e88\u6e2c\u306b\u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u5207\u308a\u51fa\u3059\u3002\u4eca\u56de\u306fPclass\u3001Sex\u3001Age\u3001SibSp\u3001Parch\u3001Fare\u3001Embarked\u3092\u7528\u3044\u308b\u3053\u3068\u306b\u3057\u305f\uff08\u304b\u306e\u6709\u540d\u306a\u6620\u753b\u300e\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u300f\u3067\u306f\u3001\u5b50\u4f9b\u3084\u5973\u6027\u512a\u5148\u3067\u6551\u547d\u30dc\u30fc\u30c8\u306b\u4e57\u3063\u3066\u3044\u305f\u8a18\u61b6\u304c\u3042\u308b\u306e\u3067\u3001Sex\u3084Age\u304c\u52b9\u3044\u3066\u304d\u305d\u3046\u3060\u3068\u3044\u3046\u76f4\u611f\u7684\u306a\u4e88\u60f3\u306f\u7acb\u3061\u305d\u3046\u3067\u3059\uff09\u3002","398d14b8":"\u672c\u7a3f\u306f\u3001kaggle\u521d\u5fc3\u8005\u304c\u5206\u6790\u30b3\u30f3\u30da\"Titanic: Machine Learning from Disaster\"\u306b\u30c8\u30e9\u30a4\u3057\u305f\u969b\u306eNotebook\u3067\u3059\u3002\u5177\u4f53\u7684\u306a\u5185\u5bb9\u3068\u3057\u3066\u306f\u3001Null\u5024\u88dc\u5b8c\u306a\u3069\u306e\u5fc5\u8981\u6700\u4f4e\u9650\u306a\u524d\u51e6\u7406\u3092\u30c7\u30fc\u30bf\u306b\u65bd\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u4e88\u6e2c\u7d50\u679c\u3092\u63d0\u51fa\u3059\u308b\u307e\u3067\u306e\u4e00\u901a\u308a\u306e\u6d41\u308c\u3092\u8ffd\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \uff11\uff0e\u4e8b\u524d\u6e96\u5099\n\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3002"}}