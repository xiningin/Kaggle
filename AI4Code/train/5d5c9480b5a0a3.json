{"cell_type":{"3e551373":"code","7fb01d52":"code","2affcc37":"code","3d212375":"code","3d777471":"code","55426048":"code","4f173936":"code","87e965c5":"code","b601ee97":"code","1e466efe":"code","49247a4e":"code","60ccedb9":"code","c40f5d3c":"code","8b514274":"code","e39ffe52":"code","4510b43e":"code","64cf756c":"code","a5590ed7":"code","170ff2ab":"code","c33ade42":"code","324cfe0b":"code","6923bd28":"code","21fe49df":"code","8512e202":"code","7a057486":"code","b974286e":"markdown","8dccf1e6":"markdown","f807c45e":"markdown","b123d5f1":"markdown","572430c8":"markdown","58cb3668":"markdown","843a86b4":"markdown","7081c64d":"markdown","89866d31":"markdown","927207fd":"markdown"},"source":{"3e551373":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fb01d52":"gender = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","2affcc37":"train_df.head()","3d212375":"train_df.isnull().sum()","3d777471":"train_df.describe()","55426048":"train_df.drop('Fare', inplace=True, axis=1)\ntrain_df.drop('Parch', inplace=True, axis=1)\ntrain_df.drop('SibSp', inplace=True, axis=1)\ntrain_df.describe()","4f173936":"gender.head()\ngender['Survived'].value_counts()","87e965c5":"axis = sns.countplot(x='Survived', data=gender)\naxis.bar_label(axis.containers[0])\nplt.show()","b601ee97":"train_df.nunique()","1e466efe":"train_df['Pclass'].value_counts()","49247a4e":"train_df['Survived'].value_counts()","60ccedb9":"#Replacing the null values with relevant ones\ndef clean(dt):\n    dt['Age'] = dt['Age'].replace(np.NaN, dt['Age'].mean())\n    dt['Embarked'] = train_df['Embarked'].fillna(method='ffill')\n    \n    return dt\n\n\ntrain_df = clean(train_df)\ntest_df = clean(test_df)\n\ntrain_df.head()","c40f5d3c":"train_df.isnull().sum()\ntrain_df.drop('Cabin', inplace=True, axis=1)","8b514274":"test_df.drop('Cabin', inplace=True, axis=1)\ntest_df.drop('Fare', inplace=True, axis=1)\ntest_df.drop('Parch', inplace=True, axis=1)\ntest_df.drop('SibSp', inplace=True, axis=1)","e39ffe52":"train_df.describe(), test_df.describe()","4510b43e":"def label(dt):\n    labelencoder= LabelEncoder()\n    \n    dt['Sex']=labelencoder.fit_transform(dt['Sex'])\n    dt['Embarked']=labelencoder.fit_transform(dt['Embarked'])\n    \n    return dt\n\ntrain_df=label(train_df)\ntest_df=label(test_df)\n\ntrain_df.head(), test_df.head()","64cf756c":"sns.swarmplot(x=train_df['Survived'], y=train_df['Age'])\nplt.title('Age vs. Survival Plot')\nplt.show()","a5590ed7":"sns.FacetGrid(train_df, col='Pclass', row='Survived').map(sns.distplot, 'Age', bins=5)\nplt.show()","170ff2ab":"sns.catplot(x='Age', y='Embarked', hue='Survived', row='Pclass', data=train_df)\nplt.show()","c33ade42":"#correlation \nc = train_df.corr()\nsns.heatmap(c, annot=True)\nplt.show()","324cfe0b":"train_df.drop('Name', inplace=True, axis=1)\ntest_df.drop('Name', inplace=True, axis=1)","6923bd28":"train_df.drop('Ticket', inplace=True, axis=1)\ntrain_df.drop('PassengerId', inplace=True, axis=1)\ntest_df.drop('Ticket', inplace=True, axis=1)\ntrain_df\ntest_df","21fe49df":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, f1_score, accuracy_score, precision_score, recall_score, roc_auc_score\n\nX_train = train_df.drop('Survived', axis=1)\nY_train = train_df['Survived']\nX_test = test_df.drop('PassengerId', axis=1).copy()\n\n#Logistic Regression\nlr = LogisticRegression()\nlr.fit(X_train, Y_train)\nY_pred = lr.predict(X_test)\nacc_log = round(lr.score(X_train, Y_train) * 100, 2)\nacc_log\n\n#KNN\nknn = KNeighborsClassifier(n_neighbors = 4)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn\n\n#SVM\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc\n\nprint(Y_pred)","8512e202":"model = pd.DataFrame({'Model':['Logistic Regression', 'KNN', 'Support Vector Machines'],\n                     'Score': [acc_log, acc_knn, acc_svc]})\nmodel.sort_values(by = 'Score', ascending = False)","7a057486":"#Prediction and Submission\npredicted = pd.DataFrame({'PassengerId' : test_df['PassengerId'], 'Survived': Y_pred})\npredicted","b974286e":"# Visualization for the purpose of understanding","8dccf1e6":"# Modelling the Data","f807c45e":"Now that we know how many females(266) and how many males(152) have survived, let's see if we can leverage the information to reach a conclusion.","b123d5f1":"We can clearly see that most people died from the tragedy. Moreover, number of people who died is significant within the age range 18-32 years.","572430c8":"Whereas almost all combinations are negatively relation. There are some that are positive and provide insight.\nFor example: Pclass and Embarked are positively correlated to survival.","58cb3668":"342 passengers survived while 549 passengers died","843a86b4":"We can somewhat make out that more Class 3 passengers died as opposed to Class 1 and Class 2. Infact, Class 1 has the highest \nsurvival rate.","7081c64d":"Again, it has become evident that people from Class 3 had the highest death rate.","89866d31":"There were 216 1st class passengers, 184 2nd class passengers and 491 3rd class passengers","927207fd":"Age, Cabin and Embarked seems to have rows with null values in them. We might need to populate those rows later on."}}