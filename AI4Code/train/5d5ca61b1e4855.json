{"cell_type":{"366a54a5":"code","ec5ac78f":"code","c0a97404":"code","ff3e99a4":"code","88cc2efc":"code","61414701":"code","2f52d720":"code","154d4ad3":"code","1afbe056":"code","857da989":"code","4dd71b0e":"code","8d442271":"code","80b22b25":"code","3fc5dda0":"code","ea0baaeb":"code","69fabe38":"code","43699e45":"code","13427fb2":"code","1cd0afb1":"code","cf250376":"code","5ae58d01":"code","05abe583":"code","ac82c68b":"code","1258edd6":"code","d485f4c7":"code","69afbadd":"code","6143fc94":"code","561dfea5":"code","c02f7578":"code","02bdd6c0":"code","0b5fcdd6":"markdown","ab3ead5e":"markdown","2ae199c7":"markdown","a04b276a":"markdown","f12342d5":"markdown","cc0b8b61":"markdown","6b8a7310":"markdown","418a138e":"markdown","bfd25a4c":"markdown","a81cbbbc":"markdown","05c41ac4":"markdown","21c20af9":"markdown","5a081721":"markdown","0a939b01":"markdown"},"source":{"366a54a5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#importando os dados\ndados = pd.read_csv('..\/input\/precos-de-combustiveis-de-2004-a-2020\/SerieHistorica_Estado_2004a2020.tsv', sep = '\\t', na_values = ['-'], decimal = ',')\n\ndados.head()","ec5ac78f":"dados.dtypes","c0a97404":"dados.info()","ff3e99a4":"print(f'Dimens\u00f5es: {dados.shape} ({dados.ndim} dimens\u00f5es)\\nLinhas: {len(dados)} Colunas: {len(dados.iloc[0])}')","88cc2efc":"dados.describe(include = 'all')","61414701":"dados.isnull().sum()","2f52d720":"dados['ano'] = pd.to_datetime(dados.data_final).dt.year\nanos = dados.ano.unique().tolist()","154d4ad3":"def preco_por_estado():\n    produtos = dados.produto.sort_values().unique().tolist()\n\n    precos_revenda = dados[['ano', 'estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                          .groupby(['ano', 'estado', 'produto']) \\\n                          .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average}) \\\n                          .reset_index()\n\n    precos_distribuicao = dados[['ano', 'estado', 'produto', 'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o']] \\\n                               .groupby(['ano', 'estado', 'produto']) \\\n                               .agg({'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o' : np.average}) \\\n                               .reset_index()\n   \n    margens = dados[['ano', 'estado', 'produto', 'margem_m\u00e9dia_revenda']] \\\n                   .groupby(['ano', 'estado', 'produto']) \\\n                   .agg({'margem_m\u00e9dia_revenda' : np.average}) \\\n                   .reset_index()\n    linhas = 3\n    colunas = 2\n    \n    for e in dados.estado.sort_values().unique().tolist():\n        fig, ax = plt.subplots(figsize = (15, 15), nrows = linhas, ncols = colunas)\n\n        p = 0\n\n        for i in range(linhas):\n            for j in range(colunas):            \n                ax[i, j].grid()\n                ax[i, j].set_xlabel('Ano')\n                ax[i, j].set_ylabel('Valor m\u00e9dio em R$')\n\n                anos = precos_revenda.loc[(precos_revenda.estado == e) & (precos_revenda.produto == produtos[p]), 'ano'].unique().tolist()        \n\n                revenda = precos_revenda.loc[(precos_revenda.estado == e) & (precos_revenda.produto == produtos[p]), 'pre\u00e7o_m\u00e9dio_revenda'].tolist()\n\n                distrib = precos_distribuicao.loc[(precos_distribuicao.estado == e) & (precos_distribuicao.produto == produtos[p]), 'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o'].tolist()\n\n                lucro = margens.loc[(margens.estado == e) & (margens.produto == produtos[p]), 'margem_m\u00e9dia_revenda'].tolist()\n\n                #quando n\u00e3o h\u00e1 dados sobre o produto atual (exemplo: GNV em Roraima)\n                if(len(anos) == 0):\n                    anos = dados.ano.unique().tolist()\n\n                if(len(revenda) == 0):\n                    revenda = np.zeros(shape=(len(anos), 1)).tolist()\n\n                if(len(distrib) == 0):\n                    distrib = np.zeros(shape=(len(anos), 1)).tolist()\n\n                if(len(lucro) == 0):\n                    lucro = np.zeros(shape=(len(anos), 1)).tolist()\n\n                ax[i, j].set_title(f'Pre\u00e7o m\u00e9dio do(a) {produtos[p]} no Estado da\/de\/do {e}')\n                ax[i, j].set_xticks(np.arange(min(anos), max(anos) + 1, 1))\n\n                ax[i, j].plot(anos, revenda, label = 'Pre\u00e7o m\u00e9dio de revenda')\n                ax[i, j].plot(anos, distrib, label = 'Pre\u00e7o m\u00e9dio de distribui\u00e7\u00e3o')\n                ax[i, j].plot(anos, lucro, label = 'Margem m\u00e9dia de lucro')\n\n                ax[i, j].legend()\n\n                p += 1\n                p %= len(produtos)\n    \n        plt.tight_layout(pad = 2)\n        plt.show()\n    \n    precos_revenda['pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o'] = precos_distribuicao.pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o\n    precos_revenda['margem_m\u00e9dia_revenda'] = margens.margem_m\u00e9dia_revenda\n    \n    return precos_revenda\n\npreco_por_estado()","1afbe056":"def preco_por_regiao():\n    produtos = dados.produto.sort_values().unique().tolist()\n\n    precos_revenda = dados[['ano', 'regi\u00e3o', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                          .groupby(['ano', 'regi\u00e3o', 'produto']) \\\n                          .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average}) \\\n                          .reset_index()\n\n    precos_distribuicao = dados[['ano', 'regi\u00e3o', 'produto', 'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o']] \\\n                               .groupby(['ano', 'regi\u00e3o', 'produto']) \\\n                               .agg({'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o' : np.average}) \\\n                               .reset_index()\n   \n    margens = dados[['ano', 'regi\u00e3o', 'produto', 'margem_m\u00e9dia_revenda']] \\\n                   .groupby(['ano', 'regi\u00e3o', 'produto']) \\\n                   .agg({'margem_m\u00e9dia_revenda' : np.average}) \\\n                   .reset_index()\n    \n    linhas = 3\n    colunas = 2\n        \n    for r in dados.regi\u00e3o.sort_values().unique().tolist():\n        fig, ax = plt.subplots(figsize = (15, 15), nrows = linhas, ncols = colunas)\n    \n        p = 0\n        \n        for i in range(linhas):\n            for j in range(colunas):            \n                ax[i, j].grid()\n                ax[i, j].set_xlabel('Ano')\n                ax[i, j].set_ylabel('Valor m\u00e9dio em R$')\n\n                anos = precos_revenda.loc[(precos_revenda.regi\u00e3o == r) & (precos_revenda.produto == produtos[p]), 'ano'].unique().tolist()\n\n                revenda = precos_revenda.loc[(precos_revenda.regi\u00e3o == r) & (precos_revenda.produto == produtos[p]), 'pre\u00e7o_m\u00e9dio_revenda'].tolist()\n\n                distrib = precos_distribuicao.loc[(precos_revenda.regi\u00e3o == r) & (precos_revenda.produto == produtos[p]), 'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o'].tolist()\n\n                lucro = margens.loc[(precos_revenda.regi\u00e3o == r) & (precos_revenda.produto == produtos[p]), 'margem_m\u00e9dia_revenda'].tolist()\n\n                #quando n\u00e3o h\u00e1 dados sobre o produto atual (exemplo: GNV em Roraima)\n                if(len(anos) == 0):\n                    anos = dados.ano.unique().tolist()\n\n                if(len(revenda) == 0):\n                    revenda = np.zeros(shape=(len(anos), 1)).tolist()\n\n                if(len(distrib) == 0):\n                    distrib = np.zeros(shape=(len(anos), 1)).tolist()\n\n                if(len(lucro) == 0):\n                    lucro = np.zeros(shape=(len(anos), 1)).tolist()\n\n                ax[i, j].set_title(f'Pre\u00e7o m\u00e9dio do(a) {produtos[p]} na regi\u00e3o {r}')\n                ax[i, j].set_xticks(np.arange(min(anos), max(anos) + 1, 1))\n\n                ax[i, j].plot(anos, revenda, label = 'Pre\u00e7o m\u00e9dio de revenda')\n                ax[i, j].plot(anos, distrib, label = 'Pre\u00e7o m\u00e9dio de distribui\u00e7\u00e3o')\n                ax[i, j].plot(anos, lucro, label = 'Margem m\u00e9dia de lucro')\n\n                ax[i, j].legend()\n\n                p += 1\n                p %= len(produtos)\n    \n        plt.tight_layout(pad = 2)\n        plt.show()\n    \n    precos_revenda['pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o'] = precos_distribuicao.pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o\n    precos_revenda['margem_m\u00e9dia_revenda'] = margens.margem_m\u00e9dia_revenda\n    \n    return precos_revenda\n\npreco_por_regiao()","857da989":"def preco_por_combustivel():\n    produtos = dados.produto.sort_values().unique().tolist()\n\n    precos_revenda = dados[['ano', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                          .groupby(['ano', 'produto']) \\\n                          .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average}) \\\n                          .reset_index()\n\n    precos_distribuicao = dados[['ano', 'produto', 'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o']] \\\n                               .groupby(['ano', 'produto']) \\\n                               .agg({'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o' : np.average}) \\\n                               .reset_index()\n   \n    margens = dados[['ano', 'produto', 'margem_m\u00e9dia_revenda']] \\\n                   .groupby(['ano', 'produto']) \\\n                   .agg({'margem_m\u00e9dia_revenda' : np.average}) \\\n                   .reset_index()\n\n    linhas = 3\n    colunas = 2\n\n    fig, ax = plt.subplots(figsize = (15, 15), nrows = linhas, ncols = colunas)\n    \n    p = 0\n        \n    for i in range(linhas):\n        for j in range(colunas):            \n            ax[i, j].grid()\n            ax[i, j].set_xlabel('Ano')\n            ax[i, j].set_ylabel('Valor m\u00e9dio em R$')\n\n            anos = precos_revenda.loc[(precos_revenda.produto == produtos[p]), 'ano'].unique().tolist()        \n            \n            revenda = precos_revenda.loc[(precos_revenda.produto == produtos[p]), 'pre\u00e7o_m\u00e9dio_revenda'].tolist()\n            \n            distrib = precos_distribuicao.loc[(precos_distribuicao.produto == produtos[p]), 'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o'].tolist()\n            \n            lucro = margens.loc[(margens.produto == produtos[p]), 'margem_m\u00e9dia_revenda'].tolist()\n            \n            #quando n\u00e3o h\u00e1 dados sobre o produto atual (exemplo: GNV em Roraima)\n            if(len(anos) == 0):\n                anos = dados.ano.unique().tolist()\n            \n            if(len(revenda) == 0):\n                revenda = np.zeros(shape=(len(anos), 1)).tolist()\n            \n            if(len(distrib) == 0):\n                distrib = np.zeros(shape=(len(anos), 1)).tolist()\n                \n            if(len(lucro) == 0):\n                lucro = np.zeros(shape=(len(anos), 1)).tolist()\n                            \n            ax[i, j].set_title(f'Pre\u00e7o m\u00e9dio do(a) {produtos[p]} no Brasil')\n            ax[i, j].set_xticks(np.arange(min(anos), max(anos) + 1, 1))\n\n            ax[i, j].plot(anos, revenda, label = 'Pre\u00e7o m\u00e9dio de revenda')\n            ax[i, j].plot(anos, distrib, label = 'Pre\u00e7o m\u00e9dio de distribui\u00e7\u00e3o')\n            ax[i, j].plot(anos, lucro, label = 'Margem m\u00e9dia de lucro')\n\n            ax[i, j].legend()\n\n            p += 1\n            p %= len(produtos)\n    \n    plt.tight_layout(pad = 2)\n    plt.show()\n    \n    precos_revenda['pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o'] = precos_distribuicao.pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o\n    precos_revenda['margem_m\u00e9dia_revenda'] = margens.margem_m\u00e9dia_revenda\n    \n    return precos_revenda\n\npreco_por_combustivel()","4dd71b0e":"def calculaVariacao(array):\n    return ((max(array) - min(array)) \/ min(array)) * 100\n\ndef variacao_preco_estado():\n    dados_variacao = dados[['estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                            .groupby(['estado', 'produto']) \\\n                            .agg({'pre\u00e7o_m\u00e9dio_revenda' : calculaVariacao}) \\\n                            .sort_values('pre\u00e7o_m\u00e9dio_revenda')\n    \n    menor_alta_baixa = 'alta' if (dados_variacao.head(1).pre\u00e7o_m\u00e9dio_revenda.values >= 0) else 'baixa'\n    maior_alta_baixa = 'alta' if (dados_variacao.tail(1).pre\u00e7o_m\u00e9dio_revenda.values >= 0) else 'baixa'\n    \n    menor_preco = dados_variacao.head(1).pre\u00e7o_m\u00e9dio_revenda.values[0]\n    maior_preco = dados_variacao.tail(1).pre\u00e7o_m\u00e9dio_revenda.values[0]\n    \n    menor_estado = dados_variacao.head(1).index.values[0][0]\n    maior_estado = dados_variacao.tail(1).index.values[0][0]\n    \n    menor_produto = dados_variacao.head(1).index.values[0][1]\n    maior_produto = dados_variacao.tail(1).index.values[0][1]\n\n    print(f'Estado com a menor {menor_alta_baixa} de pre\u00e7o entre {min(anos)} e {max(anos)}: {menor_estado} ({menor_produto}, {menor_preco:.2f}%)\\n' +\n          f'Estado com a maior {maior_alta_baixa} de pre\u00e7o entre {min(anos)} e {max(anos)}: {maior_estado} ({maior_produto}, {maior_preco:.2f}%)')\n    \n    return dados_variacao\n\nvariacao_preco_estado()","8d442271":"def variacao_preco_produto():\n    dados_variacao = dados[['estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                            .groupby(['produto']) \\\n                            .agg({'pre\u00e7o_m\u00e9dio_revenda' : calculaVariacao}) \\\n                            .sort_values('pre\u00e7o_m\u00e9dio_revenda')\n    \n    menor_alta_baixa = 'alta' if (dados_variacao.head(1).pre\u00e7o_m\u00e9dio_revenda.values >= 0) else 'baixa'\n    maior_alta_baixa = 'alta' if (dados_variacao.tail(1).pre\u00e7o_m\u00e9dio_revenda.values >= 0) else 'baixa'\n    \n    menor_preco = dados_variacao.head(1).pre\u00e7o_m\u00e9dio_revenda.values[0]\n    maior_preco = dados_variacao.tail(1).pre\u00e7o_m\u00e9dio_revenda.values[0]\n    \n    menor_produto = dados_variacao.head(1).index.values[0]\n    maior_produto = dados_variacao.tail(1).index.values[0]\n\n    print(f'Produto com a menor {menor_alta_baixa} de pre\u00e7o entre {min(anos)} e {max(anos)}: {menor_produto} ({menor_preco:.2f}%)\\n' +\n          f'Produto com a maior {maior_alta_baixa} de pre\u00e7o entre {min(anos)} e {max(anos)}: {maior_produto} ({maior_preco:.2f}%)')\n    \n    return dados_variacao\n\nvariacao_preco_produto()","80b22b25":"def estado_mais_postos():\n    estado = dados[['estado', 'n\u00famero_de_postos_pesquisados']] \\\n                .sort_values('n\u00famero_de_postos_pesquisados')\\\n                .tail(1)\\\n                .iat[0, 0]\n    \n    print(f'Estado com o maior n\u00famero de postos de combust\u00edveis: {estado}')\n\nestado_mais_postos()","3fc5dda0":"def estado_maior_diferenca_distrib_revenda():\n    precos = dados[['estado', 'produto', 'pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o', 'pre\u00e7o_m\u00e9dio_revenda']].dropna()\n    precos['diferenca'] = precos.pre\u00e7o_m\u00e9dio_revenda - precos.pre\u00e7o_m\u00e9dio_distribui\u00e7\u00e3o\n    precos = precos.groupby(['estado', 'produto']).agg({'diferenca' : np.average})\n    precos.sort_values('diferenca', inplace = True)\n    \n    resposta = precos.tail(1)\n    estado = resposta.index.values[0][0]\n    produto = resposta.index.values[0][1]\n    diferenca = resposta.iat[0, 0]\n    \n    print(f'{estado} \u00e9 o estado com a maior diferen\u00e7a entre o pre\u00e7o m\u00e9dio de distribui\u00e7\u00e3o e o pre\u00e7o m\u00e9dio de ' +\n          f'revenda no per\u00edodo entre {min(anos)} e {max(anos)}: {produto}, R$ {diferenca:.2f} (margem de lucro)')\n    \n    return precos\n\nestado_maior_diferenca_distrib_revenda()","ea0baaeb":"def estado_maior_revenda_combustivel():    \n    produtos = dados.produto.unique().tolist()\n    \n    revenda_p = dados[['produto', 'estado', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                    .groupby(['produto', 'estado']) \\\n                    .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average}) \\\n                    .sort_values('pre\u00e7o_m\u00e9dio_revenda')\n    \n    for p in produtos:\n        idx = pd.IndexSlice\n        produto_atual = revenda_p.loc[idx[p, :], :]\n        \n        menor = produto_atual.head(1).iat[0, 0]\n        maior = produto_atual.tail(1).iat[0, 0]\n                \n        estado_menor = produto_atual.head(1).index.values[0][1]\n        estado_maior = produto_atual.tail(1).index.values[0][1]\n        \n        print(f'{p} -> mais caro em\/na\/no {estado_maior} (R$ {maior:.2f}); ' +\n              f'mais barato em\/na\/no {estado_menor} (R$ {menor:.2f})')\n    \n    return revenda_p\n\nestado_maior_revenda_combustivel()","69fabe38":"def produtos_preco_estado():    \n    estados = dados.estado.sort_values().unique().tolist()\n    \n    precos = dados[['produto', 'estado', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                .groupby(['estado', 'produto']) \\\n                .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average}) \\\n                .sort_values('pre\u00e7o_m\u00e9dio_revenda')\n\n    for e in estados:\n        idx = pd.IndexSlice\n        estado_atual = precos.loc[idx[e, :], :]\n        \n        menor = estado_atual.head(1).iat[0, 0]\n        maior = estado_atual.tail(1).iat[0, 0]\n\n        produto_barato = estado_atual.head(1).index.values[0][1]\n        produto_caro = estado_atual.tail(1).index.values[0][1]\n                \n        print(f'{e} -> {produto_barato} \u00e9 o combust\u00edvel mais barato (R$ {menor:.2f}); ' +\n              f'{produto_caro} \u00e9 o combust\u00edvel mais caro (R$ {maior:.2f})')\n    \n    return precos\n        \nprodutos_preco_estado()","43699e45":"def produtos_preco_regiao():    \n    regioes = dados.regi\u00e3o.sort_values().unique().tolist()\n    \n    precos = dados[['produto', 'regi\u00e3o', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                  .groupby(['regi\u00e3o', 'produto']) \\\n                  .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average}) \\\n                  .sort_values('pre\u00e7o_m\u00e9dio_revenda')\n    \n    for r in regioes:\n        idx = pd.IndexSlice\n        regiao_atual = precos.loc[idx[r, :], :]\n        \n        menor = regiao_atual.head(1).iloc[0, 0]\n        maior = regiao_atual.tail(1).iloc[0, 0]\n        \n        produto_barato = regiao_atual.head(1).index.values[0][1]\n        produto_caro = regiao_atual.tail(1).index.values[0][1]\n                \n        print(f'{r} -> {produto_barato} \u00e9 o combust\u00edvel mais barato (R$ {menor:.2f}); ' +\n              f'{produto_caro} \u00e9 o combust\u00edvel mais caro (R$ {maior:.2f})')\n    \n    return precos\n        \nprodutos_preco_regiao()","13427fb2":"def produtos_preco_pais():\n    precos = dados[['produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                  .groupby('produto') \\\n                  .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average}) \\\n                  .sort_values('pre\u00e7o_m\u00e9dio_revenda')\n\n    menor = precos.head(1).iloc[0, 0]\n    maior = precos.tail(1).iloc[0, 0]\n    \n    produto_barato = precos.head(1).index.values[0]\n    produto_caro = precos.tail(1).index.values[0]\n\n    print(f'{produto_barato} \u00e9 o combust\u00edvel mais barato (R$ {menor:.2f})\\n' +\n          f'{produto_caro} \u00e9 o combust\u00edvel mais caro (R$ {maior:.2f})')\n    \n    return precos\n        \nprodutos_preco_pais()","1cd0afb1":"#importando bibliotecas para dados geogr\u00e1ficos\nimport geopandas as gpd\nimport descartes\nimport time\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\nimport seaborn as sns\nsns.set_style('whitegrid')\n\ngeo_data = gpd.read_file('..\/input\/precos-de-combustiveis-de-2004-a-2020\/Dados IBGE')","cf250376":"geo_data","5ae58d01":"geo_data.info()","05abe583":"#adequa\u00e7\u00e3o dos nomes dos estados e das regi\u00f5es ao dataset principal\n\ndic_estados = {'ROND\u00d4NIA' : 'RONDONIA', 'PAR\u00c1' : 'PARA', 'AMAP\u00c1' : 'AMAPA', 'MARANH\u00c3O' : 'MARANHAO',\n               'PIAU\u00cd' : 'PIAUI', 'CEAR\u00c1' : 'CEARA', 'PARA\u00cdBA' : 'PARAIBA', 'ESP\u00cdRITO SANTO' : 'ESPIRITO SANTO',\n               'S\u00c3O PAULO' : 'SAO PAULO', 'PARAN\u00c1' : 'PARANA', 'GOI\u00c1S' : 'GOIAS', 'ACRE' : 'ACRE',\n               'AMAZONAS' : 'AMAZONAS', 'RORAIMA' : 'RORAIMA', 'TOCANTINS' : 'TOCANTINS', \n               'RIO GRANDE DO NORTE' : 'RIO GRANDE DO NORTE', 'PERNAMBUCO' : 'PERNAMBUCO', \n               'ALAGOAS' : 'ALAGOAS', 'SERGIPE' : 'SERGIPE', 'BAHIA' : 'BAHIA', 'MINAS GERAIS' : 'MINAS GERAIS',\n               'RIO DE JANEIRO' : 'RIO DE JANEIRO', 'SANTA CATARINA' : 'SANTA CATARINA', \n               'MATO GROSSO DO SUL' : 'MATO GROSSO DO SUL', 'MATO GROSSO' : 'MATO GROSSO', \n               'DISTRITO FEDERAL' : 'DISTRITO FEDERAL', 'RIO GRANDE DO SUL' : 'RIO GRANDE DO SUL'}\n\ngeo_data['NM_ESTADO'] = geo_data.NM_ESTADO.map(dic_estados)\n\ngeo_data[\"NM_REGIAO\"] = geo_data.NM_REGIAO.str.replace('-', ' ')\n\ngeo_data","ac82c68b":"#Coordinate Reference System (CRS) : posiciona as coordenadas do IBGE em rela\u00e7\u00e3o ao globo terrestre\ngeo_data.crs = {\"init\": \"epsg:4326\"}\n\ngeo_data.dissolve(by = 'NM_REGIAO')","1258edd6":"#obter dados geogr\u00e1ficos por regi\u00e3o\ngeo_data_regioes = geo_data.dissolve(by = 'NM_REGIAO').reset_index()[['NM_REGIAO', 'geometry']]\ngeo_data_regioes.rename(columns = {'NM_REGIAO' : 'regi\u00e3o'}, inplace = True)\n\ngeo_data_regioes","d485f4c7":"#calcular a varia\u00e7\u00e3o percentual por regi\u00e3o\/produto\nvariacao_regiao = dados[['regi\u00e3o', 'estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                        .groupby(['regi\u00e3o', 'produto']) \\\n                        .agg({'pre\u00e7o_m\u00e9dio_revenda' : calculaVariacao})\n\nvariacao_regiao.reset_index(inplace = True)\nvariacao_regiao.rename(columns = {'pre\u00e7o_m\u00e9dio_revenda' : 'varia\u00e7\u00e3o'}, inplace = True)\n\nvariacao_regiao","69afbadd":"#merge com geo_data_regioes\ngeo_variacao_regioes = geo_data_regioes.merge(variacao_regiao, on = 'regi\u00e3o')\n\ngeo_variacao_regioes","6143fc94":"def mapa_regiao_percentual():    \n    #calcular a varia\u00e7\u00e3o percentual por regi\u00e3o\/produto\n    variacao_regiao = dados[['regi\u00e3o', 'estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                            .groupby(['regi\u00e3o', 'produto']) \\\n                            .agg({'pre\u00e7o_m\u00e9dio_revenda' : calculaVariacao})\n\n    variacao_regiao.reset_index(inplace = True)\n    variacao_regiao.rename(columns = {'pre\u00e7o_m\u00e9dio_revenda' : 'varia\u00e7\u00e3o'}, inplace = True)\n\n    #obter dados geogr\u00e1ficos por regi\u00e3o\n    geo_data_regioes = geo_data.dissolve(by = 'NM_REGIAO').reset_index()[['NM_REGIAO', 'geometry']]\n    geo_data_regioes.rename(columns = {'NM_REGIAO' : 'regi\u00e3o'}, inplace = True)\n\n    #merge com geo_data_regioes\n    geo_variacao_regioes = geo_data_regioes.merge(variacao_regiao, on = 'regi\u00e3o')\n\n    linhas = 2\n    colunas = 3\n\n    produtos = geo_variacao_regioes.produto.unique().tolist()\n\n    fig, ax = plt.subplots(figsize = (20, 10), nrows = linhas, ncols = colunas)\n\n    i = 0\n\n    for lin in range(linhas):\n        for col in range(colunas):\n            divider = make_axes_locatable(ax[lin, col])\n            cax = divider.append_axes('right', size = '5%', pad = 0.1)\n\n            percentuais = geo_variacao_regioes[geo_variacao_regioes.produto == produtos[i]]\n\n            percentuais.plot(column = 'varia\u00e7\u00e3o', legend = True, ax = ax[lin, col],\n                             cmap = 'RdYlGn_r', cax = cax, edgecolor = 'black')\n\n            anos = dados.loc[dados.produto == produtos[i], 'ano'].unique().tolist()\n\n            ax[lin, col].set_title(produtos[i] + ' de ' + str(min(anos)) + ' a ' + str(max(anos)))\n            ax[lin, col].set_xlabel('Longitude')\n            ax[lin, col].set_ylabel('Latitude')\n\n            #cax: axes on which to draw the legend in case of color map\n            cax.set_yticklabels(['{0:3.0f}%'.format(ytick) for ytick in cax.get_yticks()])\n\n            i += 1\n\n    fig.suptitle('Varia\u00e7\u00e3o percentual dos pre\u00e7os m\u00e9dios de revenda dos combust\u00edveis ' +\n                 'por regi\u00e3o do Brasil no per\u00edodo entre 2004 e 2020', fontsize = 20)\n    plt.tight_layout(pad = 5)\n    plt.show()\n\n    return geo_variacao_regioes\n\nmapa_regiao_percentual()","561dfea5":"def mapa_estado_percentual():    \n    #calcular a varia\u00e7\u00e3o percentual por estado\/produto\n    variacao_estado = dados[['regi\u00e3o', 'estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                            .groupby(['estado', 'produto']) \\\n                            .agg({'pre\u00e7o_m\u00e9dio_revenda' : calculaVariacao})\n\n    variacao_estado.reset_index(inplace = True)\n    variacao_estado.rename(columns = {'pre\u00e7o_m\u00e9dio_revenda' : 'varia\u00e7\u00e3o'}, inplace = True)\n\n    #obter dados geogr\u00e1ficos por estado\n    geo_data_estado = geo_data.drop('NM_REGIAO', axis = 1)[['NM_ESTADO', 'geometry']]\n    geo_data_estado.rename(columns = {'NM_ESTADO' : 'estado'}, inplace = True)\n\n    #merge com geo_data_estado\n    geo_variacao_estados = geo_data_estado.merge(variacao_estado, on = 'estado')\n    \n    linhas = 2\n    colunas = 3\n\n    produtos = geo_variacao_estados.produto.unique().tolist()\n\n    fig, ax = plt.subplots(figsize = (20, 10), nrows = linhas, ncols = colunas)\n\n    i = 0\n\n    for lin in range(linhas):\n        for col in range(colunas):\n            divider = make_axes_locatable(ax[lin, col])\n            cax = divider.append_axes('right', size = '5%', pad = 0.1)\n\n            percentuais = geo_variacao_estados[geo_variacao_estados.produto == produtos[i]]\n\n            percentuais.plot(column = 'varia\u00e7\u00e3o', legend = True, ax = ax[lin, col],\n                             cmap = 'RdYlGn_r', cax = cax, edgecolor = 'black')\n\n            anos = dados.loc[dados.produto == produtos[i], 'ano'].unique().tolist()\n\n            ax[lin, col].set_title(produtos[i] + ' de ' + str(min(anos)) + ' a ' + str(max(anos)))\n            ax[lin, col].set_xlabel('Longitude')\n            ax[lin, col].set_ylabel('Latitude')\n\n            #cax: axes on which to draw the legend in case of color map\n            cax.set_yticklabels(['{0:3.0f}%'.format(ytick) for ytick in cax.get_yticks()])\n\n            i += 1\n\n    fig.suptitle('Varia\u00e7\u00e3o percentual dos pre\u00e7os m\u00e9dios de revenda dos combust\u00edveis ' +\n                 'por Estado no Brasil no per\u00edodo entre 2004 e 2020', fontsize = 20)\n    plt.tight_layout(pad = 5)\n    plt.show()\n\n    return geo_variacao_estados\n\nmapa_estado_percentual()","c02f7578":"def mapa_estado_combustivel():    \n    #calcular a m\u00e9dia do pre\u00e7o m\u00e9dio de revenda por estado\/produto\n    preco_estado = dados[['regi\u00e3o', 'estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                        .groupby(['estado', 'produto']) \\\n                        .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average})\n\n    preco_estado.reset_index(inplace = True)\n    preco_estado.rename(columns = {'pre\u00e7o_m\u00e9dio_revenda' : 'pre\u00e7o_m\u00e9dio'}, inplace = True)\n\n    #obter dados geogr\u00e1ficos por estado\n    geo_data_estado = geo_data.drop('NM_REGIAO', axis = 1)[['NM_ESTADO', 'geometry']]\n    geo_data_estado.rename(columns = {'NM_ESTADO' : 'estado'}, inplace = True)\n\n    #merge com geo_data_estado\n    geo_precos_estados = geo_data_estado.merge(preco_estado, on = 'estado')\n    \n    linhas = 2\n    colunas = 3\n\n    produtos = geo_precos_estados.produto.unique().tolist()\n\n    fig, ax = plt.subplots(figsize = (20, 10), nrows = linhas, ncols = colunas)\n\n    i = 0\n\n    for lin in range(linhas):\n        for col in range(colunas):\n            divider = make_axes_locatable(ax[lin, col])\n            cax = divider.append_axes('right', size = '5%', pad = 0.1)\n\n            precos = geo_precos_estados[geo_precos_estados.produto == produtos[i]]\n\n            precos.plot(column = 'pre\u00e7o_m\u00e9dio', legend = True, ax = ax[lin, col],\n                        cmap = 'RdYlGn_r', cax = cax, edgecolor = 'black')\n\n            anos = dados.loc[dados.produto == produtos[i], 'ano'].unique().tolist()\n\n            ax[lin, col].set_title(produtos[i] + ' de ' + str(min(anos)) + ' a ' + str(max(anos)))\n            ax[lin, col].set_xlabel('Longitude')\n            ax[lin, col].set_ylabel('Latitude')\n\n            #cax: axes on which to draw the legend in case of color map\n            cax.set_yticklabels(['R$ {0:2.2f}'.format(ytick) for ytick in cax.get_yticks()])\n\n            i += 1\n\n    fig.suptitle('Pre\u00e7o m\u00e9dio dos combust\u00edveis por Estado no per\u00edodo entre 2004 e 2020', fontsize = 20)\n    plt.tight_layout(pad = 5)\n    plt.show()\n\n    return geo_precos_estados\n\nmapa_estado_combustivel()","02bdd6c0":"def comparacao_combustivel_estado():\n    preco_estado = dados[['regi\u00e3o', 'estado', 'produto', 'pre\u00e7o_m\u00e9dio_revenda']] \\\n                        .groupby(['estado', 'produto']) \\\n                        .agg({'pre\u00e7o_m\u00e9dio_revenda' : np.average})\n\n    preco_estado.reset_index(inplace = True)\n    preco_estado.rename(columns = {'pre\u00e7o_m\u00e9dio_revenda' : 'pre\u00e7o_m\u00e9dio'}, inplace = True)\n\n    #obter dados geogr\u00e1ficos por estado\n    geo_data_estado = geo_data.drop('NM_REGIAO', axis = 1)[['NM_ESTADO', 'geometry']]\n    geo_data_estado.rename(columns = {'NM_ESTADO' : 'estado'}, inplace = True)\n\n    #merge com geo_data_estado\n    geo_precos_estados = geo_data_estado.merge(preco_estado, on = 'estado')\n\n    mais_baratos, mais_caros = pd.DataFrame(), pd.DataFrame()\n    estados = geo_precos_estados.estado.unique().tolist()\n\n    for e in estados:\n        grupo_estado = geo_precos_estados[geo_precos_estados.produto != 'GLP'].groupby('estado').get_group(e)\n\n        combustivel = grupo_estado[grupo_estado.pre\u00e7o_m\u00e9dio == grupo_estado.pre\u00e7o_m\u00e9dio.min()]\n        mais_baratos = mais_baratos.append(combustivel)\n\n        combustivel = grupo_estado[grupo_estado.pre\u00e7o_m\u00e9dio == grupo_estado.pre\u00e7o_m\u00e9dio.max()]\n        mais_caros = mais_caros.append(combustivel)\n\n    fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (20, 10))\n\n    #choropleths of cheapest and most expensive fuels\n    mais_baratos.plot(column = 'produto', cmap = 'Pastel2', ax = ax[0], \n                      edgecolor = 'black', legend = True, legend_kwds = {'fontsize' : 14})\n    \n    mais_caros.plot(column = 'produto', cmap = 'rainbow', ax = ax[1], \n                    edgecolor = 'black', legend = True, legend_kwds = {'fontsize' : 14})\n\n    #format figure and axes\n    ax[0].set_title('Combust\u00edveis mais baratos', fontsize = 20)\n    ax[0].set_xlabel('Longitude', fontsize = 18)\n    ax[0].set_ylabel('Latitude', fontsize = 18)\n        \n    ax[1].set_title('Combust\u00edveis mais caros (exceto GLP)', fontsize = 20)\n    ax[1].set_xlabel('Longitude', fontsize = 18)\n    ax[1].set_ylabel('Latitude', fontsize = 18)\n\n    plt.suptitle('Brasil: compara\u00e7\u00e3o de combust\u00edveis por Estado', fontsize = 28)\n    plt.tight_layout(pad = 3)\n    plt.show()\n\ncomparacao_combustivel_estado()","0b5fcdd6":"### Produto mais barato\/caro por estado","ab3ead5e":"### Compara\u00e7\u00e3o de combust\u00edveis por Estado","2ae199c7":"### Varia\u00e7\u00e3o percentual dos pre\u00e7os m\u00e9dios de revenda dos combust\u00edveis por estado no per\u00edodo entre 2004 e 2020","a04b276a":"# An\u00e1lise da S\u00e9rie hist\u00f3rica do levantamento de pre\u00e7os e de margens de comercializa\u00e7\u00e3o de combust\u00edveis\n\nA ANP (Ag\u00eancia Nacional do Petr\u00f3leo, G\u00e1s Natural e Biocombust\u00edveis) disponibiliza a s\u00e9rie hist\u00f3rica do Levantamento de Pre\u00e7os e de Margens de Comercializa\u00e7\u00e3o de Combust\u00edveis semanal e mensal. As s\u00e9ries hist\u00f3ricas incluem os seguintes combust\u00edveis: gasolina comum, etanol hidratado, \u00f3leo diesel n\u00e3o aditivado, g\u00e1s natural veicular (GNV), g\u00e1s liquefeito de petr\u00f3leo (GLP \u2013 botij\u00e3o de 13 quilos) e o \u00f3leo diesel S-10.\n\nAqui ser\u00e1 analisada a s\u00e9rie hist\u00f3rica semanal por estado da federa\u00e7\u00e3o.\n\n## Objetivos\n\n* Realizar uma an\u00e1lise explorat\u00f3ria dos dados disponibilizados pela ANP.\n* Determinar os estados em que houve a maior alta\/baixa de pre\u00e7os de combust\u00edveis no per\u00edodo dispon\u00edvel (2004 a 2020).\n* Determinar os combust\u00edveis que sofreram os maiores aumentos\/as maiores baixas de pre\u00e7o no per\u00edodo dispon\u00edvel (2004 a 2020).\n* Determinar o estado com o maior n\u00famero de postos de combust\u00edveis.\n* Determinar o estado com a maior diferen\u00e7a entre o pre\u00e7o m\u00e9dio de distribui\u00e7\u00e3o e o pre\u00e7o m\u00e9dio de revenda.\n* Determinar o estado com o maior\/o menor pre\u00e7o de revenda de cada combust\u00edvel.\n* Determinar o produto mais barato\/caro por estado.\n* Determinar o produto mais barato\/caro por regi\u00e3o.\n* Determinar o produto mais barato\/caro no pa\u00eds.\n\n### An\u00e1lise Explorat\u00f3ria dos Dados","f12342d5":"### Pre\u00e7o m\u00e9dio dos combust\u00edveis por Estado no per\u00edodo entre 2004 e 2020","cc0b8b61":"### Estado com a maior diferen\u00e7a entre o pre\u00e7o m\u00e9dio de distribui\u00e7\u00e3o e o pre\u00e7o m\u00e9dio de revenda","6b8a7310":"### Produto mais barato\/caro no pa\u00eds","418a138e":"### Varia\u00e7\u00e3o percentual dos pre\u00e7os m\u00e9dios de revenda dos combust\u00edveis por regi\u00e3o no per\u00edodo entre 2004 e 2020","bfd25a4c":"### Combust\u00edveis que sofreram os maiores aumentos\/as maiores baixas de pre\u00e7o no per\u00edodo dispon\u00edvel (2004 a 2020)","a81cbbbc":"### Estado com o maior\/o menor pre\u00e7o de revenda de cada combust\u00edvel","05c41ac4":"### Estados em que houve a maior alta\/baixa de pre\u00e7os de combust\u00edveis no per\u00edodo dispon\u00edvel (2004 a 2020)","21c20af9":"### Produto mais barato\/caro por regi\u00e3o","5a081721":"### Estado com o maior n\u00famero de postos de combust\u00edveis","0a939b01":"## Visualiza\u00e7\u00e3o Geogr\u00e1fica dos Dados"}}