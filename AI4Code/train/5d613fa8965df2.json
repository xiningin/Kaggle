{"cell_type":{"cb43ac1c":"code","b9bba7f1":"code","587fe37e":"code","cf0f74b0":"code","fc894582":"code","802c1d2c":"code","29db5458":"code","188edfe1":"code","72641eea":"code","d4d4e1d1":"code","b0048a44":"code","1c9b80a5":"code","5c3c9451":"code","98924385":"code","b19cff1a":"code","65b87758":"code","25aefb54":"code","541dc460":"code","d59e01d3":"code","83f9956a":"code","06214755":"code","959ebd92":"code","1daee7a3":"code","993c4fe0":"code","188a0d0f":"code","c2db6cfc":"code","3dd8b4bf":"code","a3c0d4f1":"code","3fdb8174":"code","3cf04018":"code","55a32eb1":"code","4269c3a7":"code","79f4da4e":"code","603535cf":"code","02195d54":"code","8e3395c3":"code","191e1c9b":"code","352e3c7d":"code","bc69fd0c":"code","44d288dc":"code","6f8de1ff":"code","f5a800ca":"code","a773dca2":"code","c9cd357d":"code","5c3b9ed8":"code","3d93d4d7":"code","579a03b8":"code","810aba7b":"code","d160a8ff":"code","dc94dfe3":"code","748bcc29":"code","8354dff4":"code","3ceb1e52":"code","7c955cff":"markdown","1300c52d":"markdown","70af1dba":"markdown"},"source":{"cb43ac1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b9bba7f1":"import pandas as pd\nCOVID19_line_list_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\nCOVID19_open_line_list = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\")\ndata = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nconfirmed = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndeaths = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\nrecovered = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")","587fe37e":"import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","cf0f74b0":"deaths.head()","fc894582":"deaths.reset_index()","802c1d2c":"deaths = deaths.rename(columns =  {'Country\/Region' : 'country'})\nconfirmed = confirmed.rename(columns =  {'Country\/Region' : 'country'})\nrecovered = recovered.rename(columns =  {'Country\/Region' : 'country'})","29db5458":"deaths.head()","188edfe1":"np.shape(deaths)","72641eea":"deaths.columns","d4d4e1d1":"deaths.groupby(['country', 'value']).max().sort_values('value', ascending = False).reset_index()","b0048a44":"#deaths = deaths.reset_index()\ndeaths = pd.melt(deaths, id_vars='country', value_vars=['1\/22\/20', '1\/23\/20',\n       '1\/24\/20', '1\/25\/20', '1\/26\/20', '1\/27\/20', '1\/28\/20', '1\/29\/20',\n       '1\/30\/20', '1\/31\/20', '2\/1\/20', '2\/2\/20', '2\/3\/20', '2\/4\/20', '2\/5\/20',\n       '2\/6\/20', '2\/7\/20', '2\/8\/20', '2\/9\/20', '2\/10\/20', '2\/11\/20', '2\/12\/20',\n       '2\/13\/20', '2\/14\/20', '2\/15\/20', '2\/16\/20', '2\/17\/20', '2\/18\/20',\n       '2\/19\/20', '2\/20\/20', '2\/21\/20', '2\/22\/20', '2\/23\/20', '2\/24\/20',\n       '2\/25\/20', '2\/26\/20', '2\/27\/20', '2\/28\/20', '2\/29\/20', '3\/1\/20',\n       '3\/2\/20', '3\/3\/20', '3\/4\/20', '3\/5\/20', '3\/6\/20', '3\/7\/20', '3\/8\/20',\n       '3\/9\/20', '3\/10\/20', '3\/11\/20'])","1c9b80a5":"confirmed = pd.melt(confirmed, id_vars='country', value_vars=['1\/22\/20', '1\/23\/20',\n       '1\/24\/20', '1\/25\/20', '1\/26\/20', '1\/27\/20', '1\/28\/20', '1\/29\/20',\n       '1\/30\/20', '1\/31\/20', '2\/1\/20', '2\/2\/20', '2\/3\/20', '2\/4\/20', '2\/5\/20',\n       '2\/6\/20', '2\/7\/20', '2\/8\/20', '2\/9\/20', '2\/10\/20', '2\/11\/20', '2\/12\/20',\n       '2\/13\/20', '2\/14\/20', '2\/15\/20', '2\/16\/20', '2\/17\/20', '2\/18\/20',\n       '2\/19\/20', '2\/20\/20', '2\/21\/20', '2\/22\/20', '2\/23\/20', '2\/24\/20',\n       '2\/25\/20', '2\/26\/20', '2\/27\/20', '2\/28\/20', '2\/29\/20', '3\/1\/20',\n       '3\/2\/20', '3\/3\/20', '3\/4\/20', '3\/5\/20', '3\/6\/20', '3\/7\/20', '3\/8\/20',\n       '3\/9\/20', '3\/10\/20', '3\/11\/20'])","5c3c9451":"recovered = pd.melt(recovered, id_vars='country', value_vars=['1\/22\/20', '1\/23\/20',\n       '1\/24\/20', '1\/25\/20', '1\/26\/20', '1\/27\/20', '1\/28\/20', '1\/29\/20',\n       '1\/30\/20', '1\/31\/20', '2\/1\/20', '2\/2\/20', '2\/3\/20', '2\/4\/20', '2\/5\/20',\n       '2\/6\/20', '2\/7\/20', '2\/8\/20', '2\/9\/20', '2\/10\/20', '2\/11\/20', '2\/12\/20',\n       '2\/13\/20', '2\/14\/20', '2\/15\/20', '2\/16\/20', '2\/17\/20', '2\/18\/20',\n       '2\/19\/20', '2\/20\/20', '2\/21\/20', '2\/22\/20', '2\/23\/20', '2\/24\/20',\n       '2\/25\/20', '2\/26\/20', '2\/27\/20', '2\/28\/20', '2\/29\/20', '3\/1\/20',\n       '3\/2\/20', '3\/3\/20', '3\/4\/20', '3\/5\/20', '3\/6\/20', '3\/7\/20', '3\/8\/20',\n       '3\/9\/20', '3\/10\/20', '3\/11\/20'])","98924385":"deaths.head()","b19cff1a":"deaths.describe().T","65b87758":"type(deaths)","25aefb54":"print(deaths.shape)\nprint('\\n')\nprint(confirmed.shape)","541dc460":"deaths['variable'] = pd.to_datetime(deaths['variable'])\nconfirmed['variable'] = pd.to_datetime(confirmed['variable'])\nrecovered['variable'] = pd.to_datetime(recovered['variable'])","d59e01d3":"deaths['variable']","83f9956a":"confirmed_china = confirmed[confirmed['country'] == 'China'].groupby('variable')[['country', 'value', 'variable']].sum().reset_index()\n#confirmed_china.drop(49, inplace = True)","06214755":"deaths_china = deaths[deaths['country'] == 'China'].groupby('variable')[['country', 'value', 'variable']].sum().reset_index()\n#deaths_china.drop(49, inplace = True)","959ebd92":"fig, ax = plt.subplots(1,1,figsize=(15,9))\nsns.set_style('darkgrid')\nplt.xticks(rotation=35)\nsns.lineplot(data = deaths_china, x = 'variable', y ='value', linewidth = 4, color = 'darkred', label = 'Deaths')\nsns.lineplot(data = confirmed_china, x = 'variable', y ='value', linewidth = 4, color = 'darkblue', label = 'Confirmed')\nplt.title(\"China's Confirmed cases\", size = 18)\nplt.ylabel('Deaths', size= 13)\nplt.xlabel('Date', size = 13)\nplt.legend(loc=\"upper left\")","1daee7a3":"confirmed_ger = confirmed[confirmed['country'] == 'Germany'].groupby('variable')[['country', 'value', 'variable']].sum().reset_index()\nconfirmed_ger.drop(49, inplace = True)","993c4fe0":"deaths_ger = deaths[deaths['country'] == 'Germany'].groupby('variable')[['country', 'value', 'variable']].sum().reset_index()\ndeaths_ger.drop(49, inplace = True)","188a0d0f":"fig, ax = plt.subplots(1,1,figsize=(15,9))\nsns.set_style('darkgrid')\nplt.xticks(rotation=35)\nsns.lineplot(data = deaths_ger, x = 'variable', y ='value', linewidth = 4, color = 'darkred', label = 'Deaths')\nsns.lineplot(data = confirmed_ger, x = 'variable', y ='value', linewidth = 4, color = 'darkblue', label = 'Confirmed')\nplt.title(\"Germany\", size = 18)\nplt.ylabel('Deaths', size= 13)\nplt.xlabel('Date', size = 13)\nplt.legend(loc=\"upper left\")","c2db6cfc":"confirmed_ita = confirmed[confirmed['country'] == 'Italy'].groupby('variable')[['country', 'value', 'variable']].sum().reset_index()\nconfirmed_ita.drop(49, inplace = True)","3dd8b4bf":"deaths_ita = deaths[deaths['country'] == 'Italy'].groupby('variable')[['country', 'value', 'variable']].sum().reset_index()\ndeaths_ita.drop(49, inplace = True)","a3c0d4f1":"fig, ax = plt.subplots(1,1,figsize=(15,9))\nsns.set_style('darkgrid')\nplt.xticks(rotation=35)\nsns.lineplot(data = deaths_ita, x = 'variable', y ='value', linewidth = 4, color = 'darkred', label = 'Deaths')\nsns.lineplot(data = confirmed_ita, x = 'variable', y ='value', linewidth = 4, color = 'darkblue', label = 'Confirmed')\nplt.title(\"Italy\", size = 18)\nplt.ylabel('Deaths', size= 13)\nplt.xlabel('Date', size = 13)\nplt.legend(loc=\"upper left\")","3fdb8174":"five_ = confirmed[(confirmed['country'] == 'Italy') | (confirmed['country'] == 'Germany') | (confirmed['country'] == 'Netherlands')].groupby(['variable', 'country'])[['country', 'value', 'variable']].sum().reset_index()\n#confirmed_ita.drop(49, inplace = True)","3cf04018":"five_","55a32eb1":"plt.figure(figsize=(10,9))\nsns.lineplot(data = five_, x = 'variable', y = 'value', hue = 'country', linewidth = 4)\nplt.title('Confirmed Cases')\nplt.xticks(rotation=55)","4269c3a7":"data.head()","79f4da4e":"data = data.rename(columns = {'Country\/Region' : 'country', 'ObservationDate':'Date'})","603535cf":"data.shape","02195d54":"d = data[data['Date'] == max(data['Date'])]\nd = d.groupby('country').sum().sort_values('Confirmed', ascending=False)\nd = d[d['Deaths']>0]\nd.drop('SNo', axis=1, inplace=True)\nd.style.background_gradient(cmap='Reds')","8e3395c3":"import plotly.express as px","191e1c9b":"d = d.reset_index()","352e3c7d":"\nfig = px.treemap(d.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"country\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(d.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"country\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n","bc69fd0c":"data.head()","44d288dc":"data[data['country'] == 'Mainland China'][['country', 'Confirmed', 'Deaths']]","6f8de1ff":"alle = data.groupby('Date')['Confirmed'].max()\nalle.reset_index().sort_values('Confirmed', ascending=  False)","f5a800ca":"comp = data.groupby('country')[['country', 'Confirmed', 'Deaths', 'Recovered']].max().sort_values('Confirmed', ascending = False).head(5)\ncomp","a773dca2":"comp1 = pd.melt(comp, id_vars = 'country', value_vars = ['Confirmed', 'Deaths', 'Recovered'])\ncomp1","c9cd357d":"fig, ax = plt.subplots(1,1,figsize=(15,9))\nsns.barplot(data = comp1, x = 'variable', y = 'value', hue='country')","5c3b9ed8":"data.head()","3d93d4d7":"per_coun = data.groupby(['country', 'Date'])[['country', 'Date', 'Confirmed', 'Deaths']].max().reset_index()\nper_coun","579a03b8":"ger_ne = per_coun[(per_coun['country'] == 'Netherlands') | (per_coun['country'] == 'Germany')]\nger_ne","810aba7b":"fig, ax = plt.subplots(1,1,figsize=(15,9))\nplt.xticks(rotation=45)\nsns.lineplot(data = ger_ne, x = 'Date', y = 'Confirmed', hue='country')","d160a8ff":"data.sort_values('Deaths', ascending = False).head(30)","dc94dfe3":"! pip install calmap","748bcc29":"import calmap ","8354dff4":"data.head()","3ceb1e52":"import pandas as pd\nCOVID19_line_list_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\nCOVID19_open_line_list = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\")\ncovid_19_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ntime_series_covid_19_confirmed = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ntime_series_covid_19_deaths = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\ntime_series_covid_19_recovered = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")","7c955cff":"# Germany","1300c52d":"## Treemap","70af1dba":"# China"}}