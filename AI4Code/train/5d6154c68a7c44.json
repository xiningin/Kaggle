{"cell_type":{"df4de80a":"code","5d508be0":"code","99996a56":"code","dbe0cf85":"code","50daf647":"code","9905d484":"code","d50829bd":"code","ae4cab8c":"code","4fbc4011":"code","1326270b":"code","d8f61f12":"code","41d57cf8":"code","f6e086ec":"code","f1e126b0":"code","9f690581":"code","420b6833":"code","4d90a370":"code","7def456a":"code","63846942":"code","9f77cf20":"code","1b0ee0e7":"code","ca7e202e":"code","82639efd":"code","c64bcfdd":"code","e59ee27a":"code","34393238":"code","561624af":"code","c0c1c6e3":"code","0ecafa63":"code","854fa399":"code","f88a70b5":"code","9b415b67":"code","e11aadb9":"code","0b692262":"code","4a14f9be":"code","ecc82476":"code","7bea7f02":"code","10792ed7":"code","e12e0cc3":"code","b7f630f4":"code","6d97e5f3":"code","86a82198":"code","1618e630":"code","4fa22516":"code","b2d9f66e":"markdown","06f5a371":"markdown","839780bf":"markdown","70113c7f":"markdown","f5719aef":"markdown","abae861a":"markdown","382b1bb0":"markdown","75fa5b74":"markdown","4dc74fae":"markdown","12c95002":"markdown","602a1ccd":"markdown","b78ae7dd":"markdown","dc587402":"markdown","7070214e":"markdown","61eadd68":"markdown","98c9280f":"markdown","22a6eda0":"markdown","f098e398":"markdown","b2be8b65":"markdown","8ca277f3":"markdown","5ca4fb1a":"markdown","de5dbf37":"markdown","51648963":"markdown","899641d4":"markdown","8130ca7e":"markdown","b97caa6c":"markdown","12ba2437":"markdown","3931f13d":"markdown","2e4c6068":"markdown","9ca477df":"markdown"},"source":{"df4de80a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d508be0":"import seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom datetime import datetime\n%matplotlib inline","99996a56":"train=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")","dbe0cf85":"test.head()","50daf647":"test.info()","9905d484":"train.info()","d50829bd":"train.shape","ae4cab8c":"test.shape","4fbc4011":"train.isnull().sum()","1326270b":"test.isnull().sum()","d8f61f12":"ID=train[\"Id\"]\nFID=test[\"ForecastId\"]","41d57cf8":"train=train.drop(columns=['County','Province_State','Id'])\ntest=test.drop(columns=['County','Province_State','ForecastId'])","f6e086ec":"sns.pairplot(train)","f1e126b0":"sns.barplot(x=\"Target\",y=\"TargetValue\",data=train)","9f690581":"sns.barplot(x='Target',y='Population',data=train)","420b6833":"fig=plt.figure(figsize=(45,30))\nfig=px.pie(train, values='TargetValue', names='Country_Region')\nfig.update_traces(textposition='inside')\n#fig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","4d90a370":"#We Group Or Add Every Rows With Same Country Region\ndf_grouped=train.groupby(['Country_Region']).sum()\ndf_grouped.TargetValue","7def456a":"top5=df_grouped.nlargest(5,'TargetValue')\ntop5","63846942":"sns.catplot(y=\"Population\", x=\"TargetValue\",kind=\"bar\", data=top5)\nplt.title('Top 5 Target Values',size=20)\nplt.show()","9f77cf20":"top5pop=df_grouped.nlargest(5,'Population')\ntop5pop","1b0ee0e7":"fig = px.treemap(train, path=['Country_Region'], values='TargetValue',\n                  color='Population', hover_data=['Country_Region'],\n                  color_continuous_scale='matter')\nfig.show()","ca7e202e":"#If \u2018coerce\u2019, then invalid parsing will be set as NaN.\n#strftime=Return an Index of formatted strings specified by date\n\ndateee= pd.to_datetime(train['Date'], errors='coerce')\ntrain['Date']= dateee.dt.strftime(\"%Y%m%d\").astype(int)\ndateee= pd.to_datetime(test['Date'], errors='coerce')\ntest['Date']= dateee.dt.strftime(\"%Y%m%d\").astype(int)","82639efd":"top2000=train.nlargest(2000,'TargetValue')\ntop2000","c64bcfdd":"fig, ax = plt.subplots(figsize=(10,10))\n\nh=pd.pivot_table(top2000,values='TargetValue',index=['Country_Region'],columns='Date')\n\nsns.heatmap(h,cmap=\"RdYlGn\",linewidths=0.05)","e59ee27a":"top2000pop=train.nlargest(2000,'Population')\ntop2000pop","34393238":"fig ,ax=plt.subplots(figsize=(20,10))\nh=pd.pivot_table(top2000pop,values='TargetValue',index=['Country_Region'],columns=\"Date\")\nsns.heatmap(h,cmap=\"RdYlGn\",linewidths=0.005)","561624af":"train.info()","c0c1c6e3":"from sklearn.preprocessing import LabelEncoder\nenco = LabelEncoder()\n\ntemp=train.iloc[:,0].values\ntrain.iloc[:,0]=enco.fit_transform(temp)\n\ntemp=train.iloc[:,4].values\ntrain.iloc[:,4]=enco.fit_transform(temp)","0ecafa63":"train.info()","854fa399":"test.info()","f88a70b5":"temp=test.iloc[:,0].values\ntest.iloc[:,0]=enco.fit_transform(temp)\n\ntemp=test.iloc[:,4].values\ntest.iloc[:,4]=enco.fit_transform(temp)","9b415b67":"test.info()","e11aadb9":"target=train[\"TargetValue\"]\ndf_train=train.drop([\"TargetValue\"],axis=1)\n\nfrom sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(df_train,target,test_size=0.3,random_state=0)","0b692262":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","4a14f9be":"pipe = Pipeline([(\"scaler2\",StandardScaler()),(\"RandomForestRegressor:\",RandomForestRegressor())])\n\npipe.fit(x_train,y_train)\n\nprediction=pipe.predict(x_test)","ecc82476":"acc=pipe.score(x_test,y_test)\nacc","7bea7f02":"predict=pipe.predict(test)","10792ed7":"output=pd.DataFrame({'id':FID,'TargetValue':predict})\noutput","e12e0cc3":"a=output.groupby(['id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=output.groupby(['id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=output.groupby(['id'])['TargetValue'].quantile(q=0.95).reset_index()","b7f630f4":"a.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\n\ntotal=pd.concat([a,b['q0.5'],c['q0.95']],axis=1)\n\n\ntotal","6d97e5f3":"sub=pd.melt(total, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\n\nprint(sub)","86a82198":"#Removing the character \"q\"\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\n#Formating ForecastId with in this format \"Id_variable\"\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\n\nsub['TargetValue']=sub['value']","1618e630":"sub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\n\n\nsub.to_csv(\"submission.csv\",index=False)","4fa22516":"sub","b2d9f66e":"**Green Means More And Red Means Less**","06f5a371":"**Creating heatmaps for top 2000 entries in terms of Target Value**","839780bf":"# Now we edit the output according to the problem statement","70113c7f":"*Quantiles are points in a distribution that relate to the rank order of values in that distribution.\nFor a sample, you can find any quantile by sorting the sample. The middle value of the sorted sample (middle quantile, 50th percentile) is known as the median. The limits are the minimum and maximum values. Any other locations between these points can be described in terms of centiles\/percentiles.*\n\n**Lets Implements Quantile Via Numpy**","f5719aef":"**Lets now plot top 2000 populated states heatmap**","abae861a":"**Coverting Date to Int format in both test and train dataset!**","382b1bb0":"**From above heatmap we can see US is in a bad state and Brazil And Indias Count Is Slowly Rising**","75fa5b74":"**Top 5 countries with the higest target value!**","4dc74fae":"# Data Processing","12c95002":"**Population vs target Value**","602a1ccd":"# Data Visualisations","b78ae7dd":"*To make analysis of data in table easier, we can reshape the data into a more computer-friendly form using Pandas in Python. \nPandas.melt() is one of the function to do so..\nPandas.melt() unpivots a DataFrame from wide format to long format.*\n\n*melt() function is useful to massage a DataFrame into a format where one or more columns are identifier variables, while all other columns, considered measured variables, are unpivoted to the row axis, leaving just two non-identifier columns, variable and value*","dc587402":"**Target Vs Target Value**","7070214e":"**Lets Read The Data**","61eadd68":"**Plotting Top 5 Target Values vs Its Population**","98c9280f":"**Dropping Attributes Which Has Many Null Values**","22a6eda0":"# Exploratory Data Analysis","f098e398":"**We see that the obj values are in row 0 and row 4 so we will label encode those features**","b2be8b65":"**Visualizing Treemaps(nested rectangles)in terms of population,target value of every country. Each group is represented by a rectangle, which area is proportional to its value. Using color schemes, it is possible to represent several dimensions: groups, subgroups**","8ca277f3":"**We Do The Same For Test Dataset**","5ca4fb1a":"**A Pie Chart To Show Country_Region vs TargetValue**","de5dbf37":"**Bringing all the calculated values into the same dataframe i.e values of q0.05 , q0.5 , 0.95 !!**","51648963":"# Modelling","899641d4":"**In the above plot the color represents population and the area of the sqaure represents target value**","8130ca7e":"**So a lot can be depicted from this heatmap we see how it all started in china and slowly infected iran,italy,spain and finally the US in the worse manner possible**","b97caa6c":"**Top 5 Countries With Highest Population**","12ba2437":"**Lets Make Prediction**","3931f13d":"Lets Inititalize Cat Features of Both train and test","2e4c6068":"**The above graph shows only the numerical features**","9ca477df":"**Saving the Id For Furture Use**"}}