{"cell_type":{"eb368a14":"code","606f78f5":"code","2134acf5":"code","228df8cf":"code","f6f4e607":"code","fee0d2b4":"code","82ad6577":"code","47937df1":"code","3fa14c5b":"code","944f4a59":"code","334779a2":"code","17b84ce7":"code","e61d1aaf":"code","c5e7a813":"code","5032d05d":"code","10dba384":"code","be704cb9":"code","203ebbbb":"code","776a6a4c":"code","aca6e756":"code","53296055":"code","3110ad19":"code","5f784a67":"code","2fb335f0":"code","3064d0fe":"code","ad884ced":"code","8e7e18ee":"code","94cb0ab1":"code","86c3db8a":"code","e451793a":"code","62b1871f":"code","5f593ce7":"code","55dfa803":"code","c00ffd1c":"code","5fb95dec":"code","34cc14b9":"code","9451732d":"code","0465b99e":"code","0e2d724e":"code","af53482c":"markdown","282bdfc9":"markdown","fe02bbec":"markdown","dc1505dc":"markdown","cd953b17":"markdown","d7813bdd":"markdown","8ab6158e":"markdown","9470795c":"markdown","f5b4ac4c":"markdown","d770dc10":"markdown"},"source":{"eb368a14":"import pandas as pd\nimport numpy as np\nfrom statsmodels.tools.eval_measures import rmse\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf \nfrom statsmodels.tsa.seasonal import seasonal_decompose \n#from pmdarima import auto_arima                        \nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings(\"ignore\")","606f78f5":"df_adjusted = pd.read_excel('..\/input\/salesdata\/Retail and Food Services.xlsx')\ndf_seasonal = pd.read_excel('..\/input\/salesdata\/Seasonal Factors.xlsx')","2134acf5":"df_adjusted.tail()","228df8cf":"df_1 = pd.melt(df_adjusted, id_vars=['YEAR'], value_vars=['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'], var_name='MONTH')\ndf_1['ds'] = pd.to_datetime(df_1['YEAR'].astype(str) + df_1['MONTH'], format='%Y%b')\ndf_1 = df_1.drop(['YEAR','MONTH'], axis=1)\ndf_1.columns = ['y', 'ds']\ndf_1 = df_1[['ds', 'y']]\ndf_1 = df_1.sort_values(['ds'], ascending=True)\ndf_1 = df_1.reset_index(drop=True)\ndf_1.tail(10)","f6f4e607":"df1 = df_1.iloc[0:340]","fee0d2b4":"%matplotlib inline\ndf1.set_index('ds').plot(figsize=(15,8))","82ad6577":"df_2 = pd.melt(df_seasonal, id_vars=['YEAR'], value_vars=['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'], var_name='MONTH')\ndf_2['ds'] = pd.to_datetime(df_2['YEAR'].astype(str) + df_2['MONTH'], format='%Y%b')\ndf_2 = df_2.drop('YEAR', axis=1)\ndf_2 = df_2.drop('MONTH', axis=1)\ndf_2.columns = ['factor', 'ds']\ndf_2 = df_2[['ds', 'factor']]\ndf_2 = df_2.sort_values(['ds'], ascending=True)\ndf_2 = df_2.reset_index(drop=True)\ndf_2.tail(10)","47937df1":"df2 = df_2.iloc[0:340]","3fa14c5b":"d3 = pd.DataFrame(df2, columns=['ds', 'factor']).set_index('ds')\nd3.index = [d3.index.month, d3.index.year]\nd3 = d3.factor.unstack().interpolate()\nplot = d3.plot(legend=0, figsize=(12,6))","944f4a59":"df = pd.DataFrame(df1[['ds']], index=df1.index, columns=['ds'])\ndf['y'] = df1['y'] * df2['factor']\ndf.head()","334779a2":"df.y = np.log(df.y)\nts = df.copy()","17b84ce7":"ts.set_index('ds').plot(figsize=(15,8))","e61d1aaf":"train_data = ts[:len(ts)-12]\ntest_data = ts[len(ts)-12:]","c5e7a813":"# auto_arima(ts['y'], seasonal=True, m=12,max_p=7, max_d=5,max_q=7, max_P=4, max_D=4,max_Q=4).summary()","5032d05d":"arima_model = SARIMAX(train_data['y'], order = (2,1,2), seasonal_order = (4,0,0,12))\narima_result = arima_model.fit()\narima_result.summary()  ","10dba384":"arima_pred = arima_result.predict(start = len(train_data), end = len(ts)-1, typ=\"levels\").rename(\"ARIMA Predictions\")\narima_pred","be704cb9":"test_data['y'].plot(figsize = (16,5), legend=True)\narima_pred.plot(legend = True)","203ebbbb":"arima_rmse_error = rmse(test_data['y'], arima_pred)\narima_mse_error = arima_rmse_error**2\nmean_value = ts['y'].mean()\n\nprint(f'MSE Error: {arima_mse_error}\\nRMSE Error: {arima_rmse_error}\\nMean: {mean_value}')","776a6a4c":"test_data['ARIMA_Predictions'] = arima_pred","aca6e756":"import datetime\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\n\nmodel = Prophet()\nmodel.fit(train_data)","53296055":"future = model.make_future_dataframe(periods=22, freq='MS')\nforecast = model.predict(future)","3110ad19":"plot = model.plot(forecast)","5f784a67":"plot = model.plot_components(forecast)","2fb335f0":"df_visualise = pd.merge(test_data, forecast, left_on='ds', right_on='ds', how='outer')\ndf_visualise = df_visualise.set_index('ds')\ndf_visualise[['y','yhat']].plot(figsize=(15,8),)","3064d0fe":"prophet_pred = pd.DataFrame({\"Date\" : forecast[-12:]['ds'], \"Pred\" : forecast[-12:][\"yhat\"]})","ad884ced":"prophet_pred = prophet_pred.set_index(\"Date\")","8e7e18ee":"test_data[\"Prophet_Predictions\"] = prophet_pred['Pred'].values","94cb0ab1":"prophet_rmse_error = rmse(test_data['y'], test_data[\"Prophet_Predictions\"])\nprophet_mse_error = prophet_rmse_error**2\nmean_value = test_data['y'].mean()\n\nprint(f'MSE Error: {prophet_mse_error}\\nRMSE Error: {prophet_rmse_error}\\nMean: {mean_value}')","86c3db8a":"rmse_errors = [arima_rmse_error, prophet_rmse_error]\nmse_errors = [arima_mse_error, prophet_mse_error]\nerrors = pd.DataFrame({\"Models\" : [\"ARIMA\", \"Prophet\"],\"RMSE Errors\" : rmse_errors, \"MSE Errors\" : mse_errors})","e451793a":"plt.figure(figsize=(16,9))\nplt.plot_date(test_data.index, test_data[\"y\"], linestyle=\"-\")\nplt.plot_date(test_data.index, test_data[\"ARIMA_Predictions\"], linestyle=\"-.\")\nplt.plot_date(test_data.index, test_data[\"Prophet_Predictions\"], linestyle=\":\")\nplt.legend(['Actual','ARIMA','PROPHET'])\nplt.show()","62b1871f":"print(f\"Mean: {test_data['y'].mean()}\")\nerrors","5f593ce7":"test_data","55dfa803":"d_f = pd.DataFrame(df_1[['ds']], index=df_1.index, columns=['ds'])\nd_f['y'] = df_1['y'] * df_2['factor']\nd_f","c00ffd1c":"d_f.y = np.log(d_f.y)\nt_s = d_f.copy()","5fb95dec":"t_s.tail(9)","34cc14b9":"ts_pred = t_s.iloc[340:]","9451732d":"arima_pred = arima_result.predict(start = 340, end = 347, typ=\"levels\").rename(\"ARIMA Predictions\")\narima_pred","0465b99e":"ts_pred['exp_yhat'] = np.exp(arima_pred)","0e2d724e":"ts_pred","af53482c":"In this notebook, we will use a time series dataset(published by US Sensus Bureau) that is made up of retail and food services related monthly figures(in USD) for the period Jan 1992 to April 2020.\n\nSales data are adjusted for seasonal, holiday, and trading-day differences. So recover the original data by applying the seasonal factors.","282bdfc9":"Now, we wil log tranform the unadjusted monthly sales and plot the resulting time series","fe02bbec":"# ARIMA\nhttps:\/\/www.statisticshowto.com\/autoregressive-model\/","dc1505dc":"Let's run auto_arima() function to get best p,d,q,P,D,Q values","cd953b17":"# Prophet\n**Reason:**\nIt works best with time series that have strong seasonal effects and several seasons of historical data and robust to missing data,shifts in the trend, and typically handles outliers well.","d7813bdd":"Monthly adjustment factor for each year in a single line chart","8ab6158e":"Line chart for Monthly adjusted sales ","9470795c":"We can now recover the unadjusted monthly sales ","f5b4ac4c":"Both the dataframes need to be converted into time series format.Hence, the below code tranforms df_adjusted into df1","d770dc10":"Hence, the RMSE is quite good and both the algorithms are performing real good, but i am taking ARIMA because of visual explanation."}}