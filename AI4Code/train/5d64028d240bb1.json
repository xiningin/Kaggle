{"cell_type":{"5c537d83":"code","8ea9cdeb":"code","b99e4138":"code","495f5546":"code","e3b30a9f":"code","6ed8e451":"code","6cd9feac":"code","29dc0c84":"code","3e757f50":"code","d895e80f":"code","e56ed47f":"code","a7d2d8e0":"code","b80f33eb":"code","87828cbf":"code","f99caaab":"code","7a62f66d":"code","a0fa6d68":"code","c1a7a527":"code","b5fbb2ea":"code","698dde0a":"code","03ed6f11":"code","9a1c1cd0":"code","184ce8b7":"code","e7495259":"code","546d02fd":"code","8297cbc7":"code","5d0010bb":"code","5d853bbb":"code","2702a911":"code","4a8e5601":"code","5860fc49":"code","6a4904b6":"code","7121b89d":"code","0fe08eef":"code","5c3dc3b3":"code","a16966ba":"code","9dec824c":"code","65656069":"code","0c901c46":"code","c5509646":"code","4d0d47b0":"code","861d521b":"code","97eb3933":"code","d471ae70":"code","cd685df4":"code","b353da81":"code","ce3ffbd5":"code","897ad8df":"code","2a653a9d":"code","657efedb":"code","7584e8b4":"code","907273b2":"code","37a8ee66":"code","503b58a1":"code","94e167c8":"code","96399f11":"code","e42ef7fb":"code","590c7f93":"code","8f0fd43a":"code","7f96d114":"code","cfd8828f":"code","d3a6883a":"code","ec666def":"code","f19a1cfe":"code","c81ee735":"code","89823ab3":"code","8d1e7d11":"code","b44dd5f9":"code","81e8ef2a":"code","c2bfb1aa":"code","dead7a8c":"code","e306a44f":"code","cfbb8f2e":"code","08153502":"code","a0787cb6":"code","be925155":"code","3d9aac85":"markdown","fbf2f24a":"markdown","571878d5":"markdown","6d87210a":"markdown","ef2bf306":"markdown","9f6007ce":"markdown","10b98b70":"markdown","644cebf9":"markdown","e3612eb1":"markdown","3a71e467":"markdown","92a4066c":"markdown","41dc5f2d":"markdown","7bb26b20":"markdown","e64951df":"markdown","209478d8":"markdown","be37499c":"markdown","da624f6b":"markdown","80574eef":"markdown","7dbb0c65":"markdown","4911357d":"markdown","579ae6d0":"markdown","4b93e845":"markdown","4863d9f4":"markdown","5d86c556":"markdown","cda303b1":"markdown","483fffff":"markdown","37bfa087":"markdown","66ee4389":"markdown","360188d3":"markdown","27b7bb6e":"markdown","386480dc":"markdown","10188566":"markdown","b4ac8f37":"markdown","d0b4e19b":"markdown","7eed2f10":"markdown","0d076e58":"markdown","1d6fdfc5":"markdown","9f24718a":"markdown"},"source":{"5c537d83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ea9cdeb":"data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndata.head()","b99e4138":"y_train = data.SalePrice","495f5546":"X_train = pd.DataFrame()","e3b30a9f":"print(data.columns.size)","6ed8e451":"columns = list(data.columns)","6cd9feac":"numerical_data = [\"MSSubClass\", \"LotFrontage\", \"LotArea\", \"OverallQual\", \"OverallCond\", \n                  \"MasVnrArea\", \"BsmtUnfSF\", \"TotalBsmtSF\", \"1stFlrSF\", \"2ndFlrSF\", \n                  \"LowQualFinSF\", \"GrLivArea\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\", \n                  \"HalfBath\", \"KitchenAbvGr\", \"TotRmsAbvGrd\", \"Fireplaces\",  \"GarageCars\", \n                  \"GarageArea\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \n                  \"ScreenPorch\", \"PoolArea\", \"MiscVal\", \"BsmtFinSF1\", \"BsmtFinSF2\", \n                  \"BedroomAbvGr\"]\nfor col in numerical_data:\n    print(col, data[col].isnull().sum())\n    X_train[col] = data[col]","29dc0c84":"X_train.LotFrontage = X_train.LotFrontage.fillna(0)\nX_train.LotFrontage.isnull().sum()","3e757f50":"X_train.MasVnrArea = X_train.MasVnrArea.fillna(0)\nX_train.MasVnrArea.isnull().sum()","d895e80f":"other_columns = []\nfor col in columns:\n    if numerical_data.count(col) < 1:\n        other_columns.append(col)\nprint(other_columns)","e56ed47f":"import math","a7d2d8e0":"def Sturges_interval(data, column):\n    \n    x_max = data[column].max()\n    x_min = data[column].min()\n    \n    n = data[column].size # count elements\n\n    m = 1 + math.log(n, 2) # count intervals\n    h = math.ceil((x_max - x_min) \/ m) # Sturges's formula \n    x_start = round(x_min - h \/ 2)\n    \n    intervals = []\n    for i in range(round(m)):\n        \n        interval = [x_start, x_start + h]\n        intervals.append(interval)\n        x_start = interval[1]\n    \n    return intervals ","b80f33eb":"def col_new(data, column, intervals):\n    m = 0\n    for inter in intervals:\n        m = m + 1\n    i = 0\n    for interval in intervals:\n        i = i + 1\n        value = []\n        if i == m:\n            for value_col in data[column]:\n                if value_col <= int(interval[1]) and value_col >= int(interval[0]):\n                    val = 1\n                else:\n                    val = 0\n                value.append(val)\n        else:\n            for value_col in data[column]:\n                if value_col < int(interval[1]) and value_col >= int(interval[0]):\n                    val = 1\n                else:\n                    val = 0\n                value.append(val)\n    \n        X_train[\"[\"+str(interval[0])+\" ,\"+str(interval[1]) + \")\"] = value","87828cbf":"X_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","f99caaab":"date_data = [\"YearBuilt\", \"YearRemodAdd\", \"GarageYrBlt\"]\n\nfor col in date_data:\n    print(col, \" train :\", data[col].min(), data[col].max())\n    print(col, \" test :\", X_test[col].min(), X_test[col].max())","7a62f66d":"X_train.shape","a0fa6d68":"date_data = [\"YearBuilt\", \"YearRemodAdd\", \"GarageYrBlt\"]\n\nfor col in date_data:\n    intervals = Sturges_interval(data, col)\n    print(col, intervals)\n    col_new(data, col, intervals)\n\nX_train = X_train.drop(\"[2013 ,2019)\", axis=1)","c1a7a527":"X_train.shape","b5fbb2ea":"Month = [i + 1 for i in range(12)] \nMonth","698dde0a":"# date data Sold: \"MoSold\", \"YrSold\"\n\nmonths = [i + 1 for i in range(12)] \n\nfor month in months:\n    X_train[\"month_\" + str(month)] = [int(val == month) for val in data.MoSold]","03ed6f11":"X_train.shape","9a1c1cd0":"YrSold = list(data.YrSold.unique())\n\nfor year in YrSold:\n    X_train[\"year_sold_\" + str(year)] = [int(val == year) for val in data.YrSold]","184ce8b7":"X_train.shape","e7495259":"date_data = [\"YearBuilt\", \"YearRemodAdd\", \"GarageYrBlt\", \"YrSold\", \"MoSold\"]","546d02fd":"cotegorical_columns = []\nfor col in other_columns:\n    if date_data.count(col) < 1:\n        cotegorical_columns.append(col)\nprint(cotegorical_columns)","8297cbc7":"for col in cotegorical_columns:\n    print(col, \" nan % = \", 100 * (data[col].size - data[col].value_counts().sum()) \/ data[col].size)","5d0010bb":"drop_columns = [\"SalePrice\", \"Id\", \"Alley\", \"FireplaceQu\", \"PoolQC\", \"Fence\", \"MiscFeature\"]\n\ncotegorical_nim_nan_columns = []\nfor col in cotegorical_columns:\n    if drop_columns.count(col) < 1:\n        cotegorical_nim_nan_columns.append(col)\nprint(cotegorical_nim_nan_columns)","5d853bbb":"cotegorical_have_nan_columns = []\ncotegorical_columns = []\nfor col in cotegorical_nim_nan_columns:\n    percent = 100 * (data[col].size - data[col].value_counts().sum()) \/ data[col].size\n    if percent > 0:\n        cotegorical_have_nan_columns.append(col)\n    else:\n        cotegorical_columns.append(col)\nprint(cotegorical_columns)","2702a911":"data.MSZoning.unique()","4a8e5601":"new_msz = {\"RL\": 4, \"RM\": 3, \"RH\": 2, \"FV\": 1, \"C (all)\": 0} #categorical variable\n\nX_train[\"MSZoning\"] = [new_msz[val] for val in data.MSZoning]","5860fc49":"data.Street.unique()","6a4904b6":"new_Street = {\"Pave\": 0, \"Grvl\": 1} #binary variable\n\nX_train[\"Street\"] = [new_Street[val] for val in data.Street]","7121b89d":"data.Utilities.unique()","0fe08eef":"new_Utilities= {\"NoSeWa\": 0, \"AllPub\": 1} #binary variable\n\nX_train[\"Utilities\"] = [new_Utilities[val] for val in data.Utilities]","5c3dc3b3":"new_LandSlope = {'Gtl': 2, 'Mod' : 1, 'Sev' : 0}\n\nX_train[\"LandSlope\"] = [new_LandSlope[val] for val in data.LandSlope]","a16966ba":"Condition = {'Norm': 6, 'Feedr': 1, 'PosN': 8, 'Artery': 0, 'RRAe': 3, 'RRNn': 5, 'RRAn': 2, 'PosA': 7, 'RRNe': 4}\n\nX_train[\"Condition1\"] = [Condition[val] for val in data.Condition1]\nX_train[\"Condition2\"] = [Condition[val] for val in data.Condition2]\n","9dec824c":"BldgType = {'1Fam': 4, '2fmCon': 0, 'Duplex': 3, 'TwnhsE': 2, 'Twnhs': 0}\n\nX_train[\"BldgType\"] = [BldgType[val] for val in data.BldgType]","65656069":"HouseStyle = {'2Story':5, '1Story':0, '1.5Fin':2, '1.5Unf':1, 'SFoyer':4, 'SLvl':3, '2.5Unf': 6,'2.5Fin': 7}\n\nX_train[\"HouseStyle\"] = [HouseStyle[val] for val in data.HouseStyle]\n","0c901c46":"RoofStyle = {'Gable':4, 'Hip':3, 'Gambrel':2, 'Mansard':5, 'Flat': 0, 'Shed':1}\nX_train[\"RoofStyle\"] = [RoofStyle[val] for val in data.RoofStyle]\n","c5509646":"roof = pd.DataFrame()\nroof[\"material\"] = ['CompShg', 'WdShngl', 'Metal', 'WdShake', 'Membran', 'Tar&Grv', 'Roll', 'ClyTile']\nroof[\"min_price\"] = [9, 30, 6, 4.50, 3, 2.50, 1.50, 10]\nroof[\"max_price\"] = [12, 75, 12, 9, 4, 5, 2.50, 18]\nroof[\"year\"] = [50, 75, 30, 20, 20, 20, 10, 100]\nroof[\"$_year\"] = ((roof.max_price + roof.min_price) \/ 2) \/roof.year\nroof.sort_values(by=[\"$_year\", \"year\"])","4d0d47b0":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nsns.barplot(x=\"material\" , y=\"$_year\", data=roof)","861d521b":"plt.figure(figsize=(10,5))\nsns.barplot(x=\"material\" , y=\"year\", data=roof)","97eb3933":"roof.sort_values(by=[\"$_year\", \"year\"])","d471ae70":"RoofMatl = {'CompShg': 4, 'WdShngl': 0, 'Metal': 2, 'WdShake':1, 'Membran': 6, 'Tar&Grv': 5, 'Roll': 3, 'ClyTile': 7}\n\nX_train[\"RoofMatl\"] = [RoofMatl[val] for val in data.RoofMatl]\n","cd685df4":"Foundation = {'PConc':5, 'CBlock':2, 'BrkTil':1, 'Wood':0, 'Slab':4, 'Stone':3}\n\nX_train[\"Foundation\"] = [Foundation[val] for val in data.Foundation]\n","b353da81":"Heating = {'GasA':4, 'GasW':5, 'Grav':3, 'Wall':0, 'OthW':2, 'Floor':1}\nX_train[\"Heating\"] = [Heating[val] for val in data.Heating]\n","ce3ffbd5":"meaning = {'Ex': 4, 'Gd':3, 'TA':2, 'Fa':1, 'Po':0}\nX_train[\"HeatingQC\"] = [meaning[val] for val in data.HeatingQC]\nX_train[\"KitchenQual\"] = [meaning[val] for val in data.KitchenQual]\n","897ad8df":"CentralAir = {'Y':1, 'N':0}\nX_train[\"CentralAir\"] = [CentralAir[val] for val in data.CentralAir]\n","2a653a9d":"PavedDrive = {'Y':2, 'N':0, 'P':1}\nX_train[\"PavedDrive\"] = [PavedDrive[val] for val in data.PavedDrive]\n","657efedb":"cotegorical_have_nan_columns","7584e8b4":"meaning = {'Ex': 5, 'Gd':4, 'TA':3, 'Fa':2, 'Po':1, \"Na\":0}\n\nX_train[\"BsmtQual\"] = data.BsmtQual.fillna(\"Na\")\nX_train[\"BsmtQual\"] = [meaning[val] for val in X_train.BsmtQual]\n\nX_train[\"BsmtCond\"] = data.BsmtCond.fillna(\"Na\")\nX_train[\"BsmtCond\"] = [meaning[val] for val in X_train.BsmtCond]\n\nX_train[\"GarageQual\"] = data.GarageQual.fillna(\"Na\")\nX_train[\"GarageQual\"] = [meaning[val] for val in X_train.GarageQual]\n\nX_train[\"GarageCond\"] = data.GarageCond.fillna(\"Na\")\nX_train[\"GarageCond\"] = [meaning[val] for val in X_train.GarageCond]","907273b2":"meaning = {'No':1, 'Gd':4, 'Mn':2, 'Av':3, \"Na\":0}\n\nX_train[\"BsmtExposure\"] = data.BsmtExposure.fillna(\"Na\")\nX_train[\"BsmtExposure\"] = [meaning[val] for val in X_train.BsmtExposure]","37a8ee66":"meaning = {'GLQ':6, 'ALQ':5, 'Unf':1, 'Rec':3, 'BLQ':4, \"Na\":0, 'LwQ':2}\n\nX_train[\"BsmtFinType1\"] = data.BsmtFinType1.fillna(\"Na\")\nX_train[\"BsmtFinType1\"] = [meaning[val] for val in X_train.BsmtFinType1]\n\nX_train[\"BsmtFinType2\"] = data.BsmtFinType2.fillna(\"Na\")\nX_train[\"BsmtFinType2\"] = [meaning[val] for val in X_train.BsmtFinType2]","503b58a1":"X_train[\"MasVnrType\"] = data.MasVnrType.fillna(\"None\")\nX_train[\"Electrical\"] = data.Electrical.fillna(\"Mix\")\nX_train[\"GarageType\"] = data.GarageType.fillna(\"Na\")\n\none_hot_columns = [\"MasVnrType\", \"Electrical\", \"GarageType\"]\nfor col in one_hot_columns:\n    uniques = list(X_train[col].unique())\n    for unique in uniques:\n        X_train[col + '_' + str(unique)] = [int(val == unique) for val in X_train[col]]\n    X_train = X_train.drop(col, axis=1)","94e167c8":"meaning = {'RFn':2, 'Unf':1, 'Fin':3, \"Na\":0}\n\nX_train[\"GarageFinish\"] = data.GarageFinish.fillna(\"Na\")\nX_train[\"GarageFinish\"] = [meaning[val] for val in X_train.GarageFinish]","96399f11":"one_hot_columns = [\"LotShape\", \"LandContour\", \"LotConfig\", \"Neighborhood\", 'Exterior1st', \n                   'Exterior2nd', \"Functional\", \"SaleType\", \"SaleCondition\"]\n\nfor col in one_hot_columns:\n    uniques = list(data[col].unique())\n    for unique in uniques:\n        X_train[col + '_' + str(unique)] = [int(val == unique) for val in data[col]]","e42ef7fb":"def X_standardization(data, col):\n    mean = data[col].mean()\n    std = data[col].std()\n    data[col] -= mean\n    data[col] \/= std\n\ndef y_standardization(y):\n    mean = y.mean()\n    std = y.std()\n    y -= mean\n    y \/= std","590c7f93":"def z_normalization_X(data, col):\n    N = data[col].size\n    x_mean = data[col].mean()\n    s_x = 1 \/ N * sum(abs(data[col]-x_mean))\n    data[col] = (data[col] - x_mean) \/ s_x\n\ndef z_normalization_y(y):\n    N = y.size\n    y_mean = y.mean()\n    s_y = 1 \/ N * sum(abs(y-y_mean))\n    y = (y - y_mean) \/ s_y","8f0fd43a":"def normalization_X(data, col):\n    x_min = data[col].min()\n    x_max = data[col].max()\n    data[col] = (data[col] - x_min) \/ (x_max - x_min)\n\ndef normalization_y(y):\n    y_min = y.min()\n    y_max = y.max()\n    y = (y - y_min) \/ (y_max - y_min)","7f96d114":"X_train_stand = X_train\ny_train_stand = y_train\n\nX_train_z_norm = X_train\ny_train_z_norm = y_train\n\nX_train_norm = X_train\ny_train_norm = y_train\n\nfor col in list(X_train.columns):\n    X_standardization(X_train_stand, col)\n    z_normalization_X(X_train_z_norm, col)\n    normalization_X(X_train_norm, col)\n\ny_standardization(y_train_stand)\nz_normalization_y(y_train_z_norm)\nnormalization_y(y_train_norm)","cfd8828f":"X_train.head()","d3a6883a":"for col in list(X_train.columns):\n    if X_train[col].isnull().sum() > 0:\n        print(col, X_train[col].isnull().sum())","ec666def":"X_train.shape","f19a1cfe":"y_train.shape","c81ee735":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","89823ab3":"np.random.seed(42)\n\nmodel = Sequential()\n\nmodel.add(Dense(500, input_dim=214, activation=\"relu\"))\nmodel.add(Dense(700, activation=\"relu\"))\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(1))\n\nmodel.compile(loss=\"mse\", optimizer=\"adam\", metrics=['mae'])\n\nprint(model.summary())","8d1e7d11":"history_stand = model.fit(X_train_stand, y_train_stand, batch_size=1, epochs=10, validation_split=0.2, verbose=1)","b44dd5f9":"model_1 = Sequential()\n\nmodel_1.add(Dense(500, input_dim=214, activation=\"relu\"))\nmodel_1.add(Dense(700, activation=\"relu\"))\nmodel_1.add(Dense(1000, activation=\"relu\"))\nmodel_1.add(Dense(1))\n\nmodel_1.compile(loss=\"mse\", optimizer=\"adam\", metrics=['mae'])\nhistory_z_norm = model_1.fit(X_train_z_norm, y_train_z_norm, batch_size=1, epochs=10, validation_split=0.2, verbose=1)","81e8ef2a":"model_2 = Sequential()\n\nmodel_2.add(Dense(500, input_dim=214, activation=\"relu\"))\nmodel_2.add(Dense(700, activation=\"relu\"))\nmodel_2.add(Dense(1000, activation=\"relu\"))\nmodel_2.add(Dense(1))\n\nmodel_2.compile(loss=\"mse\", optimizer=\"adam\", metrics=['mae'])\nhistory_norm = model_2.fit(X_train_norm, y_train_norm, batch_size=1, epochs=10, validation_split=0.2, verbose=1)","c2bfb1aa":"print(history_stand.history.keys())","dead7a8c":"history_data_stand = pd.DataFrame([history_stand.history[\"loss\"],\n                                   history_stand.history[\"val_loss\"],\n                                   history_stand.history[\"mae\"],\n                                   history_stand.history[\"val_mae\"]]).T\nhistory_data_stand = history_data_stand.rename(columns={0:\"loss\", 1: \"val_loss\", 2:\"mae\", 3:\"val_mae\"})\nhistory_data_stand.head()","e306a44f":"history_data_z_norm = pd.DataFrame([history_z_norm.history[\"loss\"],\n                                   history_z_norm.history[\"val_loss\"],\n                                   history_z_norm.history[\"mae\"],\n                                   history_z_norm.history[\"val_mae\"]]).T\nhistory_data_z_norm = history_data_z_norm.rename(columns={0:\"loss\", 1: \"val_loss\", 2:\"mae\", 3:\"val_mae\"})\nhistory_data_z_norm.head()","cfbb8f2e":"history_data_norm = pd.DataFrame([history_norm.history[\"loss\"],\n                                   history_norm.history[\"val_loss\"],\n                                   history_norm.history[\"mae\"],\n                                   history_norm.history[\"val_mae\"]]).T\nhistory_data_norm = history_data_norm.rename(columns={0:\"loss\", 1: \"val_loss\", 2:\"mae\", 3:\"val_mae\"})\nhistory_data_norm.head()","08153502":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 5))\nsns.lineplot(data=history_data_stand)","a0787cb6":"plt.figure(figsize=(10, 5))\nsns.lineplot(data=history_data_z_norm)","be925155":"plt.figure(figsize=(10, 5))\nsns.lineplot(data=history_data_norm)","3d9aac85":"## Heating","fbf2f24a":"## PavedDrive","571878d5":"## Condition1 and Condition2\n\n1. Artery\tAdjacent to arterial street\n2. Feedr\tAdjacent to feeder street\t\n3. Norm\tNormal\t\n4. RRNn\tWithin 200' of North-South Railroad\n5. RRAn\tAdjacent to North-South Railroad\n6. PosN\tNear positive off-site feature--park, greenbelt, etc. \n7. PosA\tAdjacent to postive off-site feature\n8. RRNe\tWithin 200' of East-West Railroad\n9. RRAe\tAdjacent to East-West Railroad","6d87210a":"## BldgType\n1. 1Fam\tSingle-family Detached\t\n2. 2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n3. Duplx\tDuplex\n4. TwnhsE\tTownhouse End Unit\n5. TwnhsI\tTownhouse Inside Unit","ef2bf306":"# Train","9f6007ce":"If not have LotFrontage, then LotFrontage = 0 (not frontage)","10b98b70":"# standardization","644cebf9":"# Categorical columns","e3612eb1":"# Create train data","3a71e467":"Test data contains incorrect data (example: GarageYrBlt.max() = 2207 year), so I won't check on test data\n\ud83d\ude15","92a4066c":"## CentralAir","41dc5f2d":"## Utilities\n(\u0422\u0438\u043f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0439): Type of utilities available","7bb26b20":"## HeatingQC and KitchenQual","e64951df":"## Other columns: categorical and date","209478d8":"## Street \n(\u0422\u0438\u043f \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u043d\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0438): Type of road access","be37499c":"1. 'RL' - Residential Low Density. The RL district is applied to areas of the city appropriate for low density residential uses in a neighborhood with predominately detached single-family dwellings, but allows a diversity of compatible housing types and lot sizes from larger lot single-family dwellings to cottages, cluster, courtyard, and patio homes, and duplexes, at densities of two and one-half to 10 units per net acre. The RL district is consistent with and implements the low density residential (LDR) land use designation of the general plan.\n2. 'RM' - Residential Medium Density. The RM district is applied to areas of the city appropriate for residential uses with attached and detached dwellings, including a variety of housing types such as small lot single-family dwellings, townhomes, row houses, and cluster housing, at densities of 11 to 33 units per net acre, with provisions for appropriately scaled and located live\/work units. The RM district is consistent with and implements the medium density residential (MDR) land use designation of the general plan. \n3. 'C (all)', \n4. 'FV' - Floating Village Residential, \n5. 'RH' - Residential High Density. The RH district is applied to areas of the city appropriate for compact, high density, multifamily residential development including apartments, townhomes, and condominiums at densities ranging from 33 to 100 units per net acre, with limited provisions for appropriately scaled and located live\/work units. The RH district is consistent with and implements the high density residential (HDR) land use designation of the general plan.","da624f6b":"# Categorical data: shortcut encoding or One-Hot Encoding","80574eef":"## train z-normalization","7dbb0c65":"## train standardization","4911357d":"1. AllPub - All public Utilities (E,G,W,& S)\t\n2. NoSeWa - Electricity and Gas Only","579ae6d0":"## one_hot_columns","4b93e845":"## MSZoning \n(\u041e\u0431\u0449\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f): The general zoning classification","4863d9f4":"## RoofMatl \n\n[link](https:\/\/www.thespruce.com\/basic-types-and-cost-of-roofing-materials-1822016)\n### price:\n1. 'CompShg' - ```$9 to $12```, 50 years \n2. 'WdShngl' - ```$30 to $75```, 75 to 200 years \n3. 'Metal', - ```$6 to $12```, 30 to 50 years\n4. 'WdShake' - ```$4.50 to $9```, 20 years\n5. 'Membran' - ```$3 to $4```, 20 to 35 years \n6. 'Tar&Grv', - ```$2.50 to $5```, 20 to 30 years\n7. 'Roll' - ```$1.50 to $2.50```; 10 years\n8. 'ClyTile' - ```$10 to $18```, very long (100) ","5d86c556":"## Foundation","cda303b1":"## LandSlope \n(\u041d\u0430\u043a\u043b\u043e\u043d \u043b\u0430\u043d\u0448\u0430\u0444\u0442\u0430): Slope of property","483fffff":"# cotegorical_have_nan_columns","37bfa087":"## RoofStyle\n![](https:\/\/www.cupapizarras.com\/wp-content\/uploads\/2018\/09\/types_of_roofs.jpg)","66ee4389":"# Columns DROP","360188d3":"Columns Drop: \n1. Id - not needed for train\n2. SalePrice - y_train\n3. too much unknown data:\n    * Alley\n    * FireplaceQu\n    * PoolQC\n    * Fence\n    * MiscFeature","27b7bb6e":"# z-normalization","386480dc":"# date data","10188566":"## HouseStyle\n\n1. 1Story\tOne story\n2. 1.5Fin\tOne and one-half story: 2nd level finished\n3. 1.5Unf\tOne and one-half story: 2nd level unfinished\n4. 2Story\tTwo story\n5. 2.5Fin\tTwo and one-half story: 2nd level finished\n6. 2.5Unf\tTwo and one-half story: 2nd level unfinished\n7. SFoyer\tSplit Foyer\n8. SLvl\tSplit Level","b4ac8f37":"# Data fields\n\nHere's a brief version of what you'll find in the data description file.\n\n1. SalePrice (**\u0446\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438**) - the property's sale price in dollars. This is the target variable that you're trying to predict. \n2. MSSubClass (**\u041a\u043b\u0430\u0441\u0441 \u0437\u0434\u0430\u043d\u0438\u044f**): The building class\n3. MSZoning (**\u041e\u0431\u0449\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f**): The general zoning classification\n4. LotFrontage (**\u0440\u0430\u0437\u043c\u0435\u0440(\u0448\u0438\u0440\u0438\u043d\u0430) \u0444\u0430\u0441\u0430\u0434\u0430(\u043e\u0442 \u0434\u043e\u043c\u0430 \u0434\u043e \u0434\u043e\u0440\u043e\u0433\u0438)**): Linear feet of street connected to property\n5. LotArea (**\u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0434\u043e\u043c\u0430**): Lot size in square feet\n6. Street (**\u0422\u0438\u043f \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u043d\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0438**): Type of road access\n7. Alley (**\u0422\u0438\u043f \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u043a \u0430\u043b\u043b\u0435\u0435**): Type of alley access\n8. LotShape (**\u041e\u0431\u0449\u0438\u0439 \u0432\u0438\u0434 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438**): General shape of property\n9. LandContour (**\u043a\u043e\u043d\u0442\u0443\u0440 \u0437\u0435\u043c\u043b\u0438**): Flatness of the property\n10. Utilities (**\u0422\u0438\u043f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0439**): Type of utilities available\n11. LotConfig (**\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f**): Lot configuration\n12. LandSlope (**\u041d\u0430\u043a\u043b\u043e\u043d \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438**): Slope of property\n13. Neighborhood (**\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0447\u0435\u0440\u0442\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u042d\u0439\u043c\u0441**): Physical locations within Ames city limits\n14. Condition1 (**\u0411\u043b\u0438\u0437\u043e\u0441\u0442\u044c \u043a \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0435 \u0438\u043b\u0438 \u0436\u0435\u043b\u0435\u0437\u043d\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0435**): Proximity to main road or railroad\n15. Condition2 (**\u0411\u043b\u0438\u0437\u043e\u0441\u0442\u044c \u043a \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0435 \u0438\u043b\u0438 \u0436\u0435\u043b\u0435\u0437\u043d\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0435 (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0432\u0442\u043e\u0440\u043e\u0439)**): Proximity to main road or railroad (if a second is present)\n16. BldgType (**\u0422\u0438\u043f \u0436\u0438\u043b\u044c\u044f**): Type of dwelling\n17. HouseStyle (**\u0421\u0442\u0438\u043b\u044c \u0436\u0438\u043b\u0438\u0449\u0430**): Style of dwelling\n18. OverallQual (**\u041e\u0431\u0449\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u0438 \u043e\u0442\u0434\u0435\u043b\u043a\u0438**): Overall material and finish quality\n19. OverallCond (**\u041e\u0431\u0449\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f**): Overall condition rating\n20. YearBuilt (**\u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430**): Original construction date\n21. YearRemodAdd (**\u0414\u0430\u0442\u0430 \u0440\u0435\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438**): Remodel date\n22. RoofStyle (**\u0422\u0438\u043f \u043a\u0440\u044b\u0448\u0438**): Type of roof\n23. RoofMatl (**\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043a\u0440\u044b\u0448\u0438**): Roof material\n24. Exterior1st (**\u041d\u0430\u0440\u0443\u0436\u043d\u043e\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u0434\u043e\u043c\u0430**): Exterior covering on house\n25. Exterior2nd (**\u041d\u0430\u0440\u0443\u0436\u043d\u043e\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u0434\u043e\u043c\u0430 (\u0435\u0441\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430)**): Exterior covering on house (if more than one material)\n26. MasVnrType (**\u0422\u0438\u043f \u043e\u0431\u043b\u0438\u0446\u043e\u0432\u043a\u0438 \u043a\u043b\u0430\u0434\u043a\u0438**): Masonry veneer type\n27. MasVnrArea (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043e\u0431\u043b\u0438\u0446\u043e\u0432\u043a\u0438 \u043a\u0430\u043c\u0435\u043d\u043d\u043e\u0439 \u043a\u043b\u0430\u0434\u043a\u043e\u0439 \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Masonry veneer area in square feet\n28. ExterQual (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0440\u0443\u0436\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432**): Exterior material quality\n29. ExterCond (**\u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u0441\u043d\u0430\u0440\u0443\u0436\u0438**): Present condition of the material on the exterior\n30. Foundation (**\u0422\u0438\u043f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430**): Type of foundation\n31. BsmtQual (**\u0412\u044b\u0441\u043e\u0442\u0430 \u043f\u043e\u0434\u0432\u0430\u043b\u0430**): Height of the basement\n32. BsmtCond (**\u041e\u0431\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0434\u0432\u0430\u043b\u0430**): General condition of the basement\n33. BsmtExposure (**\u0421\u0442\u0435\u043d\u044b \u043f\u043e\u0434\u0432\u0430\u043b\u0430 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0441\u0430\u0434\u0430 \u0438\u043b\u0438 \u0432\u044b\u0445\u043e\u0434\u0430**): Walkout or garden level basement walls\n34. BsmtFinType1 (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u043e\u0434\u0432\u0430\u043b\u0430**): Quality of basement finished area\n35. BsmtFinSF1 (**\u0413\u043e\u0442\u043e\u0432\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0438\u043f\u0430 1**): Type 1 finished square feet\n36. BsmtFinType2 (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 (\u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438)**): Quality of second finished area (if present)\n37. BsmtFinSF2 (**\u0413\u043e\u0442\u043e\u0432\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0438\u043f\u0430 2**): Type 2 finished square feet\n38. BsmtUnfSF (**\u041d\u0435\u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u044b\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u0432\u0430\u043b\u0430**): Unfinished square feet of basement area\n39. TotalBsmtSF (**\u041e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u043e\u0434\u0432\u0430\u043b\u0430 \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Total square feet of basement area\n40. Heating (**\u0422\u0438\u043f \u043e\u0442\u043e\u043f\u043b\u0435\u043d\u0438\u044f**): Type of heating\n41. HeatingQC (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442\u043e\u043f\u043b\u0435\u043d\u0438\u044f**): Heating quality and condition\n42. CentralAir (**\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043d\u0434\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435**): Central air conditioning\n43. Electrical (**\u042d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430**): Electrical system\n44. 1stFlrSF (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430**): First Floor square feet\n45. 2ndFlrSF (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430**): Second floor square feet\n46. LowQualFinSF (**\u041d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043e\u0442\u0434\u0435\u043b\u043a\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u043e\u0432 (\u0432\u0441\u0435 \u044d\u0442\u0430\u0436\u0438)**): Low quality finished square feet (all floors)\n47. GrLivArea (**\u041d\u0430\u0434\u0437\u0435\u043c\u043d\u0430\u044f \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u043e\u0432**): Above grade (ground) living area square feet\n48. BsmtFullBath (**\u041f\u043e\u043b\u043d\u044b\u0435 \u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0432 \u043f\u043e\u0434\u0432\u0430\u043b\u0435**): Basement full bathrooms\n49. BsmtHalfBath (**\u0426\u043e\u043a\u043e\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u0443\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b**): Basement half bathrooms\n50. FullBath (**\u041f\u043e\u043b\u043d\u044b\u0435 \u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0432\u044b\u0448\u0435 \u0443\u0440\u043e\u0432\u043d\u044f**): Full bathrooms above grade\n51. HalfBath (**\u041f\u043e\u043b\u0443\u0432\u0430\u043d\u043d\u044b \u043d\u0430\u0434 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u043c\u043e\u0440\u044f**): Half baths above grade\n52. BedroomAbvGr (**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u0435\u043d \u043d\u0430\u0434 \u0446\u043e\u043a\u043e\u043b\u044c\u043d\u044b\u043c \u044d\u0442\u0430\u0436\u043e\u043c**): Number of bedrooms above basement level\n53. KitchenAbvGr (**\u041a\u043e\u043b-\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c**): Number of kitchens\n54. KitchenQual (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043d\u0438**): Kitchen quality\n55. TotRmsAbvGrd (**\u0412\u0441\u0435\u0433\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0432\u044b\u0448\u0435 \u0443\u0440\u043e\u0432\u043d\u044f (\u0431\u0435\u0437 \u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043d\u0430\u0442)**): Total rooms above grade (does not include bathrooms)\n56. Functional (**\u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430**): Home functionality rating\n57. Fireplaces (**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043c\u0438\u043d\u043e\u0432**): Number of fireplaces\n58. FireplaceQu (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043c\u0438\u043d\u0430**): Fireplace quality\n59. GarageType (**\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0433\u0430\u0440\u0430\u0436\u0430**): Garage location\n60. GarageYrBlt (**\u0413\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0433\u0430\u0440\u0430\u0436\u0430**): Year garage was built\n61. GarageFinish (**\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043e\u0442\u0434\u0435\u043b\u043a\u0430 \u0433\u0430\u0440\u0430\u0436\u0430**): Interior finish of the garage\n62. GarageCars (**\u0420\u0430\u0437\u043c\u0435\u0440 \u0433\u0430\u0440\u0430\u0436\u0430 \u0432 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0430\u0448\u0438\u043d\u044b**): Size of garage in car capacity\n63. GarageArea (**\u0420\u0430\u0437\u043c\u0435\u0440 \u0433\u0430\u0440\u0430\u0436\u0430 \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Size of garage in square feet\n64. GarageQual (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u0430\u0440\u0430\u0436\u0430**): Garage quality\n65. GarageCond (**\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0433\u0430\u0440\u0430\u0436\u0430**): Garage condition\n66. PavedDrive (**\u0410\u0441\u0444\u0430\u043b\u044c\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u043e\u0440\u043e\u0433\u0430**): Paved driveway\n67. WoodDeckSF (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u0442\u0435\u0440\u0440\u0430\u0441\u044b \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Wood deck area in square feet\n68. OpenPorchSF (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0439 \u0432\u0435\u0440\u0430\u043d\u0434\u044b \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Open porch area in square feet\n69. EnclosedPorch (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043a\u0440\u044b\u043b\u044c\u0446\u0430 \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Enclosed porch area in square feet\n70. 3SsnPorch (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u044b\u043b\u044c\u0446\u0430 \u043d\u0430 \u0442\u0440\u0438 \u0441\u0435\u0437\u043e\u043d\u0430 \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Three season porch area in square feet\n71. ScreenPorch (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u044b\u043b\u044c\u0446\u0430 \u044d\u043a\u0440\u0430\u043d\u0430 \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Screen porch area in square feet\n72. PoolArea (**\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0430 \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u0430\u0445**): Pool area in square feet\n73. PoolQC (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0430**): Pool quality\n74. Fence (**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0431\u043e\u0440\u0430**): Fence quality\n75. MiscFeature (**\u041f\u0440\u043e\u0447\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0435 \u0432 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438**): Miscellaneous feature not covered in other categories\n76. MiscVal (**\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439**): Value of miscellaneous feature\n77. MoSold (**\u041c\u0435\u0441\u044f\u0446 \u043f\u0440\u043e\u0434\u0430\u0436\u0438**): Month Sold\n78. YrSold (**\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442**): Year Sold\n79. SaleType (**\u0422\u0438\u043f \u043f\u0440\u043e\u0434\u0430\u0436\u0438**): Type of sale\n80. SaleCondition (**\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0430\u0436\u0438**): Condition of sale","d0b4e19b":"http:\/\/web.stanford.edu\/class\/stats191\/data\/amesdoc.txt","7eed2f10":"data dont have nan","0d076e58":"1. Gtl - Gentle slope\n2. Mod - Moderate Slope\t\n3. Sev - Severe Slope\n\t","1d6fdfc5":"## train normalization minmax","9f24718a":"# normalization minmax"}}