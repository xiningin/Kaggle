{"cell_type":{"0938ce09":"code","40ca329b":"code","d7dc913c":"code","0e1c5a93":"code","95febfa9":"code","3e094ff3":"code","3dabed3b":"code","881f5a4c":"code","91d692f3":"code","fdd416c8":"code","eb2595ac":"code","80b45d51":"code","2d759f93":"code","f0762ae3":"code","66b1d319":"code","be68bad8":"code","a2dfba5e":"code","a13c865f":"code","21e28940":"code","8735b5c2":"code","ac279dbf":"code","7f1d484e":"code","c68d3a5d":"code","a88e2b95":"markdown"},"source":{"0938ce09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40ca329b":"sub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')","d7dc913c":"df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')","0e1c5a93":"df.sample(3)","95febfa9":"print(f'df shape: {df.shape}')\nprint(df.columns)\nprint(df.row_id.nunique())\nprint(df['country'].nunique())\nprint(df['store'].nunique())\nprint(df['product'].nunique())","3e094ff3":"print(df['country'].unique())\nprint(df['product'].unique())\nprint(df['store'].unique())","3dabed3b":"sns.countplot(df['store'])","881f5a4c":"sns.countplot(df['product'])","91d692f3":"sns.countplot(df['country'])","fdd416c8":"df.groupby(['country','store']).agg({'num_sold':'sum'}).reset_index()","eb2595ac":"df['date'] = pd.to_datetime(df['date'])","80b45d51":"print(df['date'].max())\nprint(df['date'].min())","2d759f93":"test['date'] = pd.to_datetime(test['date'])\nprint(test['date'].max())\nprint(test['date'].min())","f0762ae3":"import holidays\n    \n    \ndef apply_holidays(df, years_list):\n    \n    # for Finland\n    holiday_list = []\n    for ptr in holidays.Finland(years=years_list, observed=True).items():\n        holiday_list.append(ptr[0])\n    \n    finland_df = df[df['country']=='Finland']\n    finland_df.loc[:,'is_holiday'] = finland_df['date'].apply(lambda x: 1 if x in holiday_list else 0)\n    \n    # for Norway\n    holiday_list = []\n    for ptr in holidays.Norway(years=years_list, observed=True).items():\n        holiday_list.append(ptr[0])\n    \n    norway_df = df[df['country']=='Norway']\n    norway_df.loc[:,'is_holiday'] = norway_df['date'].apply(lambda x: 1 if x in holiday_list else 0)\n    \n    # For Sweden\n    holiday_list = []\n    for ptr in holidays.Sweden(years=years_list, observed=True).items():\n        holiday_list.append(ptr[0])\n    \n    sweden_df = df[df['country']=='Sweden']\n    sweden_df.loc[:,'is_holiday'] = sweden_df['date'].apply(lambda x: 1 if x in holiday_list else 0)\n    \n    \n    tmp = pd.concat([finland_df, norway_df, sweden_df], ignore_index=False)\n    \n    return tmp\n\n\ndf = apply_holidays(df, [2015,2016,2017,2018])\ntest = apply_holidays(test, [2019])","66b1d319":"from sklearn.preprocessing import LabelEncoder\n\ndef get_subdate(tmp):\n    tmp['year'] = tmp['date'].dt.year\n    tmp['month'] = tmp['date'].dt.month\n    tmp['day'] = tmp['date'].apply(lambda x: x.strftime(\"%A\"))\n    \n    return tmp\n\n\ndef labelEncode(tmp,tst):\n    le = LabelEncoder()\n    country_fit = le.fit(tmp['country'])\n    tmp['country'] = country_fit.transform(tmp['country'])\n    tst['country'] = country_fit.transform(tst['country'])\n    \n    le = LabelEncoder()\n    store_fit = le.fit(tmp['store'])\n    tmp['store'] = store_fit.transform(tmp['store'])\n    tst['store'] = store_fit.transform(tst['store'])\n    \n    le = LabelEncoder()\n    product_fit = le.fit(tmp['product'])\n    tmp['product'] = product_fit.transform(tmp['product'])\n    tst['product'] = product_fit.transform(tst['product'])\n    \n    le = LabelEncoder()\n    day_fit = le.fit(df['day'])\n    tmp['day'] = day_fit.transform(tmp['day'])\n    tst['day'] = day_fit.transform(tst['day'])\n    \n    return tmp,tst\n    \n    \n\ndf = get_subdate(df)\ntest = get_subdate(test)\n\ndf, test = labelEncode(df,test)\n","be68bad8":"df.sample(3)","a2dfba5e":"df.sample(3)","a13c865f":"test.sample(3)","21e28940":"# df.groupby(['country','day']).agg({'num_sold':'sum'}).reset_index()","8735b5c2":"from sklearn.metrics import accuracy_score, mean_squared_error\n\ndef fit_model(model, X_train, y_train, X_test, y_test):\n    model.fit(X_train, y_train)\n    \n    y_hat = model.predict(X_test)\n    print('MSE: ', type(model).__name__, round(mean_squared_error(y_hat, y_test),2))\n    \n    \ndef get_preds(model, tmp):\n    return model.predict(tmp)\n","ac279dbf":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n\nX = df[['country','store','product','day','is_holiday']]\ny = df['num_sold'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.05, random_state=42)\n","7f1d484e":"rfr_params = {'n_estimators':1000, 'min_samples_leaf':30, 'n_jobs':-1}\nrfr = RandomForestRegressor(**rfr_params)\n\nxgb_params = {'eta':0.12, 'min_child_weight':1, 'max_depth':6, 'colsample_bytree':0.8, 'eval_metric':'rmse'}\nxgb = XGBRegressor(**xgb_params)\n\n\ngbm = GradientBoostingRegressor()\n\n\nfit_model(rfr, X_train, y_train, X_test, y_test)\nfit_model(xgb, X_train, y_train, X_test, y_test)\nfit_model(gbm, X_train, y_train, X_test, y_test)","c68d3a5d":"y_hat = get_preds(rfr, test[['country','store','product','day','is_holiday']])\n\nsub = pd.DataFrame({'row_id':test['row_id'], 'num_sold':y_hat})\n\nsub.to_csv('\/kaggle\/working\/submission.csv', index=False)\n","a88e2b95":"- In all three stores in all three countreis, Kaggel Hat is the most selling product\n- In all three countries, Kaggle Rama stores has more number of items sold overall\n"}}