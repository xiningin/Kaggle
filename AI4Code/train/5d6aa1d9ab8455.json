{"cell_type":{"e49787b4":"code","f2fdc11d":"code","3c628791":"code","850ee722":"code","84c3a587":"code","e68ba223":"code","d373186c":"code","8a24e1b5":"markdown"},"source":{"e49787b4":"import pandas as pd \nimport numpy as np \nimport os \nimport json\nimport re\nimport spacy\nfrom spacy.matcher import PhraseMatcher\nfrom spacy.lang.en import English","f2fdc11d":"df=pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/train.csv')\n\nnlp = spacy.load(\"en_core_web_sm\")\nnlp.max_length = 150000000\n\nterms=df['dataset_label'].unique().tolist()\n\nmatcher = PhraseMatcher(nlp.vocab)\n\n# Only run nlp.make_doc to speed things up\npatterns = [nlp.make_doc(text) for text in terms]\nmatcher.add('Dataset_Label',patterns)","3c628791":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower())","850ee722":"test_root='..\/input\/coleridgeinitiative-show-us-the-data\/test'\ntest_files=os.listdir('..\/input\/coleridgeinitiative-show-us-the-data\/test')","84c3a587":"TEST_DATA = dict()\n\nfor file in test_files:\n    with open(os.path.join(test_root,file), encoding=\"utf8\") as f:\n        TEXTS = json.loads(f.read())\n\n        \n    file_list=[]\n        \n    for i,(key,value) in enumerate(TEXTS):\n        file_list.append(TEXTS[i][value])\n    \n    TEST_DATA[file.split('.')[0]]=file_list","e68ba223":"test_labels=dict()\n\nfor key,item in TEST_DATA.items():\n    labels=[]\n    for i in np.arange(len(item)):\n        \n        if (len(TEST_DATA[key][i])<100000):\n            doc=nlp(TEST_DATA[key][i],disable=[\"tagger\", \"parser\",'ner','textcat','lemmatizer'])\n            matches = matcher(doc)\n            for match_id, start, end in matches:\n                span = doc[start:end]  # The matched span\n                labels.append(clean_text(span.text))\n  \n            \n    labels=set(labels)\n    test_labels[key]=\"|\".join(str(e) for e in labels)\n        \ndf = pd.DataFrame(list(test_labels.items()),columns = ['Id','PredictionString']) \n    \ndf['PredictionString'].fillna('alzheimer s disease neuroimaging initiative',inplace=True)\n\ndf.to_csv('.\/submission.csv',index=False)\n\n","d373186c":"df.head()","8a24e1b5":"This is a simple baseline for NER detection for Coleridge competition . Here the idea is to train a simple Spacy phrase matcher to identify the labels which we encounter in the train set to test set. This can also generalize into a very strong final solution if you are looking at small subset of dataset to recognize in your data. \n\nThis notebook scores 0.48 in F1 metric in private test set. "}}