{"cell_type":{"92dc9621":"code","0bf452ac":"code","46d67bc7":"code","0fdc5376":"code","adf6e84c":"code","3eaf3591":"code","cc20356a":"code","026ed94f":"code","35ef39ed":"code","adb2a461":"code","83779fc0":"code","ab119008":"code","58aa76d0":"code","d6aadb1b":"code","e1f1e70b":"code","fad49af6":"markdown","24cdd28a":"markdown","4fba2ad3":"markdown","5244a10a":"markdown","3d129185":"markdown","54261fe5":"markdown","8600b01b":"markdown","c6e4f684":"markdown","bb3186e7":"markdown","ef02d106":"markdown","b3cffa42":"markdown","2a0ba04b":"markdown","830c42d9":"markdown","d37fb499":"markdown","cee16033":"markdown","f8298865":"markdown"},"source":{"92dc9621":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os, cv2, random\nimport seaborn as sns\n\nfrom tensorflow.keras.preprocessing.image import *\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models\nfrom tensorflow.keras import applications\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras import callbacks\n\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0bf452ac":"train_path = '..\/input\/digit-recognizer\/train.csv'\ntest_path = '..\/input\/digit-recognizer\/test.csv'","46d67bc7":"df = pd.read_csv(train_path)\ndf.head()","0fdc5376":"X = df.drop('label',axis=1)\ny = df['label']","adf6e84c":"X_train, X_valid, y_train , y_valid = train_test_split(X,y,test_size=0.2,random_state=42)\n\nX_train = X_train.to_numpy().reshape(-1,28,28,1)\nX_valid = X_valid.to_numpy().reshape(-1,28,28,1)\ny_train = pd.get_dummies(y_train).to_numpy() # One-hot encoding\ny_valid = pd.get_dummies(y_valid).to_numpy() # One-hot encoding\n\nprint(X_train.shape)\nprint(X_valid.shape)\nprint(y_train.shape)\nprint(y_valid.shape)","3eaf3591":"fig, ax = plt.subplots(3,3,figsize=(10,12))\nfor i in range(3):\n    for j in range(3):\n        img = X_train[3*i+j]\n        label = y_train[3*i+j].tolist().index(1)\n        ax[i][j].imshow(img)\n        ax[i][j].set_title(label)","cc20356a":"train_datagen = ImageDataGenerator(rescale = 1\/255,\n                                   rotation_range=5,\n                                   shear_range=0.2,\n                                  )\ntest_datagen = ImageDataGenerator(rescale = 1\/255)\n\ntrain_set = train_datagen.flow(X_train, y_train,\n                               shuffle=True,\n                               batch_size=64)\nvalid_set = test_datagen.flow(X_valid,y_valid,shuffle=False,batch_size=32)","026ed94f":"fig, ax = plt.subplots(3,3,figsize=(10,10))\nnext_batch = train_set.next()\nimg_list = next_batch[0]\nlabel_list = next_batch[1]\nfor i in range(3):\n    for j in range(3):\n        img = img_list[3*i+j]\n        label = label_list[3*i+j].tolist().index(1)\n        ax[i][j].imshow(img)\n        ax[i][j].set_title(label)","35ef39ed":"model = models.Sequential([\n    layers.InputLayer(input_shape=(28,28,1)),\n    layers.Flatten(),\n    layers.Dense(256,activation='relu'),\n    layers.Dense(128,activation='relu'),\n    layers.Dense(64,activation='relu'),\n    layers.Dropout(0.3),\n    layers.Dense(32,activation='relu'),\n    layers.Dropout(0.3),\n    layers.Dense(10,activation='softmax'),\n])\n\nopt = optimizers.Adam(learning_rate = 0.01)\nmodel.compile(loss='categorical_crossentropy',optimizer=opt,metrics=['acc'])\nmodel.optimizer.get_config()","adb2a461":"checkpoint = callbacks.ModelCheckpoint(\"model.h5\", \n                             monitor='val_acc', \n                             verbose=1, \n                             save_best_only=True, \n                             save_weight_only=False, \n                             mode='auto')\n\nearly = callbacks.EarlyStopping(monitor='val_acc', \n                      min_delta=0, \n                      patience=10, \n                      verbose=1, \n                      mode='auto')\n\nhistory = model.fit(train_set,\n                    validation_data=valid_set,\n                    steps_per_epoch=train_set.n\/\/train_set.batch_size,\n                    epochs = 50,\n                    callbacks=[checkpoint,early])","83779fc0":"legend = ['train','validation']\n\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title(\"Accuracy\")\nplt.xlabel(\"epochs\")\nplt.ylabel(\"acc\")\nplt.legend(legend,loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title(\"Categorical cross-entropy loss\")\nplt.xlabel(\"epochs\")\nplt.ylabel(\"loss\")\nplt.legend(legend,loc='upper left')\nplt.show()","ab119008":"model = models.load_model('.\/model.h5')","58aa76d0":"test_df = pd.read_csv(test_path)\nprint(test_df.shape)","d6aadb1b":"pred_imgs = test_df.to_numpy().reshape(-1,28,28,1)\nraw_result = model.predict(pred_imgs)\nlabel = np.argmax(raw_result,axis=1)\n\nfig, ax = plt.subplots(3,3,figsize=(10,10))\nfor i in range(3):\n    for j in range(3):\n        ax[i][j].imshow(pred_imgs[3*i+j])\n        ax[i][j].set_title(label[3*i+j])","e1f1e70b":"test_df['Label'] = label\ntest_df['ImageId'] = test_df.index+1\ntest_df = test_df[['ImageId','Label']]\ntest_df.to_csv('submission.csv',index=False)","fad49af6":"# Data augumentation (if needed)\n> Note: Do not flip image!","24cdd28a":"# Load data","4fba2ad3":"# Predict and visualize","5244a10a":"# Import library","3d129185":"# Digit recognizer - MLP model\n---","54261fe5":"# Create submission file","8600b01b":"# Load model ","c6e4f684":"# Training model","bb3186e7":"# Create path to data","ef02d106":"# Visualize data","b3cffa42":"# Plot loss and accuracy","2a0ba04b":"# Create input and output","830c42d9":"# Plot augumented data","d37fb499":"# Create model\n\nI use the dropout layers in order to prevent from overfitting","cee16033":"## Load testing data","f8298865":"# Split data"}}