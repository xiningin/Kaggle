{"cell_type":{"10c89520":"code","db4a6a8c":"code","fc94d26e":"code","71094088":"code","84ee3041":"code","80d564f9":"code","9d4bbadc":"code","44680a83":"code","993888e5":"code","6dc67c8d":"code","d68802fa":"markdown","eab9335b":"markdown","dc19ecda":"markdown","6e87a13e":"markdown","261e21b9":"markdown","9ec6d551":"markdown","1fe1abdf":"markdown","f847fe76":"markdown"},"source":{"10c89520":"from kaggle_environments import make, evaluate\n\n# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)","db4a6a8c":"def my_agent(obs, config):\n    \n    ################################\n    # Imports and helper functions #\n    ################################\n    \n    import numpy as np\n    import random\n\n    # Gets board at next step if agent drops piece in selected column\n    def drop_piece(grid, col, piece, config):\n        next_grid = grid.copy()\n        for row in range(config.rows-1, -1, -1):\n            if next_grid[row][col] == 0:\n                break\n        next_grid[row][col] = piece\n        return next_grid\n    \n    \n    # Helper function for get_heuristic: checks if window satisfies heuristic conditions\n    def check_window(window, num_discs, piece, config):\n        return (window.count(piece) == num_discs and window.count(0) == config.inarow-num_discs)\n\n    # Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\n    def count_windows(grid, num_discs, piece, config):\n        num_windows = 0\n        # horizontal\n        for row in range(config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[row, col:col+config.inarow])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1\n        # vertical\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns):\n                window = list(grid[row:row+config.inarow, col])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1\n        # positive diagonal\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1\n        # negative diagonal\n        for row in range(config.inarow-1, config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n                if check_window(window, num_discs, piece, config):\n                    num_windows += 1\n        return num_windows\n\n        # Helper function for minimax: calculates value of heuristic for grid\n    def get_heuristic(grid, mark, config):\n        A = 1e15\n        B = 100\n        C = 10\n        D = -10\n        E = -1e6\n        num_twos = count_windows(grid, 2, mark, config)\n        num_threes = count_windows(grid, 3, mark, config)\n        num_fours = count_windows(grid, 4, mark, config)\n        num_twos_opp = count_windows(grid, 2, mark%2+1, config)\n        num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n        score = A*num_fours + B*num_threes + C*num_twos + D*num_twos_opp + E*num_threes_opp\n        return score\n    \n        # Uses minimax to calculate value of dropping piece in selected column\n    def score_move(grid, col, mark, config, nsteps):\n        next_grid = drop_piece(grid, col, mark, config)\n        score = minimax(next_grid, nsteps-1, False, mark, config)\n        return score\n\n    # Helper function for minimax: checks if agent or opponent has four in a row in the window\n    def is_terminal_window(window, config):\n        return window.count(1) == config.inarow or window.count(2) == config.inarow\n\n    # Helper function for minimax: checks if game has ended\n    def is_terminal_node(grid, config):\n        # Check for draw \n        if list(grid[0, :]).count(0) == 0:\n            return True\n        # Check for win: horizontal, vertical, or diagonal\n        # horizontal \n        for row in range(config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[row, col:col+config.inarow])\n                if is_terminal_window(window, config):\n                    return True\n        # vertical\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns):\n                window = list(grid[row:row+config.inarow, col])\n                if is_terminal_window(window, config):\n                    return True\n        # positive diagonal\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n                if is_terminal_window(window, config):\n                    return True\n        # negative diagonal\n        for row in range(config.inarow-1, config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n                if is_terminal_window(window, config):\n                    return True\n        return False\n\n    # Minimax implementation\n    def minimax(node, depth, maximizingPlayer, mark, config):\n        is_terminal = is_terminal_node(node, config)\n        valid_moves = [c for c in range(config.columns) if node[0][c] == 0]\n        if depth == 0 or is_terminal:\n            return get_heuristic(node, mark, config)\n        if maximizingPlayer:\n            value = -np.Inf\n            for col in valid_moves:\n                child = drop_piece(node, col, mark, config)\n                value = max(value, minimax(child, depth-1, False, mark, config))\n            return value\n        else:\n            value = np.Inf\n            for col in valid_moves:\n                child = drop_piece(node, col, mark%2+1, config)\n                value = min(value, minimax(child, depth-1, True, mark, config))\n            return value\n\n    # Returns True if dropping piece in column results in game win\n    def check_winning_move(grid, config, col, piece):\n        # Convert the board to a 2D grid\n#         grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n        next_grid = drop_piece(grid, col, piece, config)\n        inarow = config.inarow\n        # horizontal\n        for row in range(config.rows):\n            for col in range(config.columns-(inarow-1)):\n                window = list(next_grid[row,col:col+inarow])\n                if window.count(piece) == inarow:\n                    return True\n        # vertical\n        for row in range(config.rows-(inarow-1)):\n            for col in range(config.columns):\n                window = list(next_grid[row:row+inarow,col])\n                if window.count(piece) == inarow:\n                    return True\n        # positive diagonal\n        for row in range(config.rows-(inarow-1)):\n            for col in range(config.columns-(inarow-1)):\n                window = list(next_grid[range(row, row+inarow), range(col, col+inarow)])\n                if window.count(piece) == inarow:\n                    return True\n        # negative diagonal\n        for row in range(inarow-1, config.rows):\n            for col in range(config.columns-(inarow-1)):\n                window = list(next_grid[range(row, row-inarow, -1), range(col, col+inarow)])\n                if window.count(piece) == inarow:\n                    return True\n        return False\n    \n    def get_valid_moves(config, grid):\n        return [col for col in range(config.columns) if grid[0][col] == 0]\n    \n    def board_to_grid(config, board):\n        return np.asarray(board).reshape(config.rows, config.columns)\n    \n    def grid_to_board(config, grid):\n        return grid.reshape(-1).tolist()\n    \n    def gives_two_winning_moves(grid, config, col, piece):\n        \n        next_grid = drop_piece(grid, move, piece, config)\n        next_valid_moves = get_valid_moves(config, next_grid)\n        total_win_moves=0\n        for next_move in next_valid_moves:\n            if check_winning_move(next_grid, config, next_move, piece): \n                total_win_moves = total_win_moves+1\n                if total_win_moves>1:\n                    return True\n        return False\n    \n    def check_give_opp_winning_move(grid, config, move, piece):\n        # Should return True if this move gives a winning position to the opponent\n        \n        next_grid = drop_piece(grid, move, piece, config)\n        next_valid_moves = get_valid_moves(config, next_grid)\n        opp_piece = 1 if piece==2 else 2\n        \n        for next_move in next_valid_moves:\n            if check_winning_move(next_grid, config, next_move, opp_piece):\n                return True\n        return False\n        \n    def print_debug(str):\n        if DEBUG: print(str)\n    \n    #########################\n    # Agent makes selection #\n    #########################\n    \n    DEBUG = False\n    \n    agent_mark = obs.mark\n    opp_mark = 1 if agent_mark==2 else 2\n    grid = board_to_grid(config, obs.board)\n    \n    valid_moves = get_valid_moves(config, grid)\n    \n    print_debug('valid moves:')\n    print_debug(valid_moves)\n    #if first move, play center !\n    if grid.sum().sum()==0 : \n        print_debug('first move')\n        return int((config.columns\/2))\n    \n    # Check for winning move\n    for move in valid_moves:\n        if check_winning_move(grid, config, move, agent_mark):\n            print_debug('win move')\n            return move     \n        \n    # Check for opponent winning move\n    for move in valid_moves:\n        if check_winning_move(grid, config, move, opp_mark):\n            print_debug('avoid opponent win move')\n            return move     \n        \n    # Check if a valid play gives one wining move to opponent.\n    selected_moves = []\n    for move in valid_moves:\n        if not check_give_opp_winning_move(grid, config, move, agent_mark):\n            selected_moves.append(move)        \n\n    print_debug('selected moves:')\n    print_debug(selected_moves)   \n    \n    if len(selected_moves)==0:\n        print_debug('no selected moves')\n        return random.choice(valid_moves) #loosing move\n\n    # Check for a place giving me 2 winning moves\n        #if any, play that to win.\n    for move in selected_moves:\n        if gives_two_winning_moves(grid, config, move, agent_mark):\n            print_debug('gives 2 win moves') \n            return move\n    \n    N_STEPS = 2  # 3 makes the game timeout\n        \n    # Get list of valid moves\n    valid_moves = selected_moves # [c for c in range(config.columns) if obs.board[c] == 0]\n    # Use the heuristic to assign a score to each possible board in the next step\n    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, config, N_STEPS) for col in valid_moves]))\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    # Select at random from the maximizing columns\n    return random.choice(max_cols)\n        ","fc94d26e":"# Play as first position against random agent.\ntrainer = env.train([None, \"negamax\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = my_agent(observation, env.configuration)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\nenv.render()","71094088":"# Agents play one game round\nout = env.run([my_agent, 'negamax'])","84ee3041":"# Show the game\nenv.render(mode=\"ipython\")","80d564f9":"# To learn more about the evaluate() function, check out the documentation here: (insert link here)\ndef get_win_percentages(agent1, agent2, n_rounds=100):\n    import random\n    import numpy as np\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,0])\/len(outcomes)*100, 1))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([0,1])\/len(outcomes)*100, 1))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0.5]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0.5, None]))\n    print(\"Number of Draws (in {} game rounds):\".format(n_rounds), outcomes.count([0.5, 0.5]))","9d4bbadc":"get_win_percentages(agent1=my_agent, agent2='random', n_rounds=100)","44680a83":"get_win_percentages(agent1=my_agent, agent2='negamax', n_rounds=100)","993888e5":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","6dc67c8d":"import sys\nfrom kaggle_environments import utils\n\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","d68802fa":"# Play it","eab9335b":"## Debug","dc19ecda":"This notebook is mostly based on a combination of the starter notebook https:\/\/www.kaggle.com\/alexisbcook\/create-a-connectx-agent and the [N-step lookahead exercise](http:\/\/)https:\/\/www.kaggle.com\/alexisbcook\/exercise-n-step-lookahead from the [Kaggle course](https:\/\/www.kaggle.com\/learn\/intro-to-game-ai-and-reinforcement-learning).\n\nI have added a starter hard-coded check for win\/lose move before the lookahead.","6e87a13e":"# Create an agent\n\nTo create the submission, the agent function should be fully encapsulated.  In other words, it should have no external dependencies: all of the imports and helper functions need to be included.","261e21b9":"# Check score against random\/negamax","9ec6d551":"# Create a submission file\n\nThe next code cell writes your agent to a Python file that can be submitted to the competition.","1fe1abdf":"# Create the game environment","f847fe76":"# Validate your submission file\n\nThe code cell below has the agent in your submission file play one game round against itself.\n\nIf it returns \"Success!\", then you have correctly defined your agent."}}