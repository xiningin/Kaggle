{"cell_type":{"82dad957":"code","a769e860":"code","f99c190c":"code","37a482da":"code","cd75bf15":"code","817506e4":"code","62b279f2":"code","26a72c08":"code","10185998":"code","d19a6f6e":"code","7d20555b":"code","6dff340f":"code","2012497d":"code","77885ab5":"code","d5fb6b6d":"code","ad77964e":"code","d2744638":"code","1eb1e347":"code","d11218ab":"code","dcdeda72":"code","c824bfe3":"code","84d130b3":"code","2bc1d585":"code","b0f64ed1":"code","c1766caa":"markdown","5ae070a6":"markdown","c8b97530":"markdown","8278d974":"markdown","f579351a":"markdown"},"source":{"82dad957":"%matplotlib inline\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport os\nimport ast\nimport datetime as dt\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Activation\nfrom tensorflow.keras.metrics import categorical_accuracy, top_k_categorical_accuracy, categorical_crossentropy\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import load_model\n\nstart = dt.datetime.now()","a769e860":"DP_DIR = '..\/input\/shuffle-csvs\/'\nINPUT_DIR = '..\/input\/quickdraw-doodle-recognition\/'\nBASE_SIZE = 256\nNCSVS = 100\nNCATS = 340\nnp.random.seed(seed=1987)\ntf.set_random_seed(seed=1987)\ndef f2cat(filename: str) -> str:\n    return filename.split('.')[0]\n\ndef list_all_categories():\n    files = os.listdir(os.path.join(INPUT_DIR, 'train_simplified'))\n    return sorted([f2cat(f) for f in files], key=str.lower)","f99c190c":"def apk(actual, predicted, k=3):\n    \"\"\"\n    Source: https:\/\/github.com\/benhamner\/Metrics\/blob\/master\/Python\/ml_metrics\/average_precision.py\n    \"\"\"\n    if len(predicted) > k:\n        predicted = predicted[:k]\n\n    score = 0.0\n    num_hits = 0.0\n\n    for i, p in enumerate(predicted):\n        if p in actual and p not in predicted[:i]:\n            num_hits += 1.0\n            score += num_hits \/ (i + 1.0)\n\n    if not actual:\n        return 0.0\n\n    return score \/ min(len(actual), k)\n\ndef mapk(actual, predicted, k=3):\n    \"\"\"\n    Source: https:\/\/github.com\/benhamner\/Metrics\/blob\/master\/Python\/ml_metrics\/average_precision.py\n    \"\"\"\n    return np.mean([apk(a, p, k) for a, p in zip(actual, predicted)])\n\n\ndef preds2catids(predictions):\n    return pd.DataFrame(np.argsort(-predictions, axis=1)[:, :3], columns=['a', 'b', 'c'])","37a482da":"def custom_single_cnn(size, conv_layers=(8, 16, 32, 64), dense_layers=(512, 256), conv_dropout=0.2,\n                      dense_dropout=0.2):\n    model = Sequential()\n    model.add( Conv2D(conv_layers[0], kernel_size=(3, 3), padding='same', activation='relu', input_shape=(size, size, 1)) )\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    #if conv_dropout:\n    #    model.add(Dropout(conv_dropout))\n\n    for conv_layer_size in conv_layers[1:]:\n        model.add(Conv2D(conv_layer_size, kernel_size=(3, 3), activation='relu'))\n        model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n        if conv_dropout:\n            model.add(Dropout(conv_dropout))\n\n    model.add(Flatten())\n    if dense_dropout:\n        model.add(Dropout(dense_dropout))\n\n    for dense_layer_size in dense_layers:\n        model.add(Dense(dense_layer_size, activation='relu'))\n        model.add(Activation('relu'))\n        if dense_dropout:\n            model.add(Dropout(dense_dropout))\n\n    model.add(Dense(NCATS, activation='softmax'))\n    return model\n\ndef top_3_accuracy(y_true, y_pred):\n    return top_k_categorical_accuracy(y_true, y_pred, k=3)\n\ndef top3_acc( tgt, pred ):\n    sc = np.mean( (pred[:,0]==tgt) | (pred[:,1]==tgt) | (pred[:,2]==tgt) )\n    return sc","cd75bf15":"STEPS = 500\nsize = 32\nbatchsize = 512","817506e4":"model = custom_single_cnn(size=size,\n                          conv_layers=[128, 128],\n                          dense_layers=[2048],\n                          conv_dropout=False,\n                          dense_dropout=0.10 )\nmodel.compile(optimizer=Adam(lr=0.002), loss='categorical_crossentropy',\n              metrics=[categorical_crossentropy, categorical_accuracy, top_3_accuracy])\nprint(model.summary())","62b279f2":"def draw_cv2(raw_strokes, size=256, lw=6):\n    img = np.zeros((BASE_SIZE, BASE_SIZE), np.uint8)\n    for stroke in raw_strokes:\n        for i in range(len(stroke[0]) - 1):\n            _ = cv2.line(img, (stroke[0][i], stroke[1][i]), (stroke[0][i + 1], stroke[1][i + 1]), 255, lw)\n    if np.random.rand()>0.5:\n        img = np.fliplr(img)\n    if np.random.rand()>0.75:\n        if np.random.rand()>0.50:\n            img = img[ 4:, 4: ]\n        else:\n            img = img[ :-4, :-4 ]\n    if np.random.rand()>0.50:\n        img2 = cv2.resize(img, (200, 200))\n        img = np.zeros((BASE_SIZE, BASE_SIZE), np.uint8)\n        img[18:218,18:218] = img2\n\n    if size != BASE_SIZE:\n        return cv2.resize(img, (size, size))\n    else:\n        return img\n\ndef image_generator(size, batchsize, ks, lw=6):\n    while True:\n        for k in np.random.permutation(ks):\n            filename = os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(k))\n            for df in pd.read_csv(filename, chunksize=batchsize):\n                df['drawing'] = df['drawing'].apply(ast.literal_eval)\n                x = np.zeros((len(df), size, size))\n                for i, raw_strokes in enumerate(df.drawing.values):\n                    x[i] = draw_cv2(raw_strokes, size=size, lw=lw)\n                x = x \/ 255.\n                x = x.reshape((len(df), size, size, 1)).astype(np.float32)\n                y = keras.utils.to_categorical(df.y, num_classes=NCATS)\n                yield x, y\n\ndef df_to_image_array(df, size, lw=6):\n    df['drawing'] = df['drawing'].apply(ast.literal_eval)\n    x = np.zeros((len(df), size, size))\n    for i, raw_strokes in enumerate(df.drawing.values):\n        x[i] = draw_cv2(raw_strokes, size=size, lw=lw)\n    x = x \/ 255.\n    x = x.reshape((len(df), size, size, 1)).astype(np.float32)\n    return x","26a72c08":"valid_df = pd.read_csv(os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(NCSVS - 1)), nrows=55555)\nx_valid = df_to_image_array(valid_df, size)\ny_valid = keras.utils.to_categorical(valid_df.y, num_classes=NCATS)\nprint(x_valid.shape, y_valid.shape)\nprint('Validation array memory {:.2f} GB'.format(x_valid.nbytes \/ 1024.**3 ))","10185998":"train_datagen = image_generator(size=size, batchsize=batchsize, ks=range(NCSVS - 1))","d19a6f6e":"x, y = next(train_datagen)\nn = 10\nfig, axs = plt.subplots(nrows=n, ncols=n, sharex=True, sharey=True, figsize=(10, 10))\nfor i in range(n**2):\n    ax = axs[i \/\/ n, i % n]\n    ax.imshow(x[i, :, :, 0], cmap=plt.cm.gray)\n    ax.axis('off')\nplt.tight_layout()\nplt.show();","7d20555b":"callbacks = [\n    #EarlyStopping(monitor='val_top_3_accuracy', patience=15, min_delta=0.001, mode='max'),\n    ReduceLROnPlateau(monitor='val_top_3_accuracy', factor=0.5, patience=5, min_delta=0.005, mode='max', cooldown=3),\n    ModelCheckpoint(\".\/black-white-7.model\",monitor='val_top_3_accuracy', mode = 'max', save_best_only=True, verbose=1)\n]\nhist = model.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=10, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks = callbacks\n)","6dff340f":"hist = model.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=10, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks = callbacks\n)","2012497d":"hist = model.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=10, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks = callbacks\n)","77885ab5":"hist = model.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=10, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks = callbacks\n)","d5fb6b6d":"hist = model.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=10, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks = callbacks\n)","ad77964e":"hist = model.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=10, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks = callbacks\n)","d2744638":"hist_df = pd.DataFrame(hist.history)\nfig, axs = plt.subplots(nrows=2, sharex=True, figsize=(16, 10))\naxs[0].plot(hist_df.val_categorical_accuracy, lw=5)\naxs[0].set_ylabel('Accuracy')\naxs[0].set_xlabel('Epoch')\naxs[0].grid()\naxs[1].plot(hist_df.val_categorical_crossentropy, lw=5)\naxs[1].set_ylabel('MLogLoss')\naxs[1].grid()\nplt.show();","1eb1e347":"#Load Best Epoch\n#model = load_model(\".\/black-white-1.model\", custom_objects={'top_3_accuracy': top_3_accuracy } )\nvalid_predictions1 = model.predict(x_valid, batch_size=128, verbose=1)\nmap3 = mapk(valid_df[['y']].values, preds2catids(valid_predictions1).values)\ntop3 = top3_acc(valid_df[['y']].values.flatten(), preds2catids(valid_predictions1).values)\nprint('Map3: {:.3f}'.format(map3))\nprint('Top3: {:.3f}'.format(top3))\n\nx_valid2 = np.array( [ np.fliplr(x_valid[i]) for i in range(x_valid.shape[0])] )\nvalid_predictions2 = model.predict(x_valid2, batch_size=128, verbose=1)\nmap3 = mapk(valid_df[['y']].values, preds2catids(valid_predictions2).values)\ntop3 = top3_acc(valid_df[['y']].values.flatten(), preds2catids(valid_predictions2).values)\nprint('Map3: {:.3f}'.format(map3))\nprint('Top3: {:.3f}'.format(top3))\n\nmap3 = mapk(valid_df[['y']].values, preds2catids(0.5*valid_predictions1+0.5*valid_predictions2).values)\ntop3 = top3_acc(valid_df[['y']].values.flatten(), preds2catids(0.5*valid_predictions1+0.5*valid_predictions2).values)\nprint('Map3: {:.3f}'.format(map3))\nprint('Top3: {:.3f}'.format(top3))","d11218ab":"test = pd.read_csv(os.path.join(INPUT_DIR, 'test_simplified.csv'))\ntest.head()\nx_test = df_to_image_array(test, size)\nprint(test.shape, x_test.shape)\nprint('Test array memory {:.2f} GB'.format(x_test.nbytes \/ 1024.**3 ))","dcdeda72":"test_predictions1 = model.predict(x_test, batch_size=128, verbose=1)\n\nx_test2 = np.array( [ np.fliplr(x_test[i]) for i in range(x_test.shape[0])] )\ntest_predictions2 = model.predict(x_test2, batch_size=128, verbose=1)\n\ntest_predictions = 0.5*test_predictions1 + 0.5*test_predictions2","c824bfe3":"top3 = preds2catids(test_predictions)\ntop3.head()\ntop3.shape","84d130b3":"cats = list_all_categories()\nid2cat = {k: cat.replace(' ', '_') for k, cat in enumerate(cats)}\ntop3cats = top3.replace(id2cat)\ntop3cats.head()\ntop3cats.shape","2bc1d585":"test['word'] = top3cats['a'] + ' ' + top3cats['b'] + ' ' + top3cats['c']\nsubmission = test[['key_id', 'word']]\nsubmission.to_csv('bw_cnn_submission_{}.csv'.format(int(map3 * 10**4)), index=False)\nsubmission.head()\nsubmission.shape","b0f64ed1":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","c1766caa":"# Keras Simple CNN Benchmark\n\nI assume you are already familiar with the competition dataset. This benchmark helps you to reach 0.78 MAP@3.\n\nThis kernel has three main components:\n\n* Simple configurable Convolutional Network\n* Fast and memory efficient Image Generator\n* Flip Augmentation\n* Full training & submission with Kaggle Kernel\n* TTA\n\nI did some paramer search but it should not be hard to improve the current score. Simplified versions could be trained without GPU.","5ae070a6":"## Create Submission","c8b97530":"## Simple ConvNet","8278d974":"## Acknowledments\nThanks for @jpmiller and @mihaskalic for publishing their starter kernels quite early.\n\n [1] https:\/\/www.kaggle.com\/jpmiller\/image-based-cnn\n \n[2] https:\/\/www.kaggle.com\/mihaskalic\/when-in-doubt-convnets","f579351a":"## Training with Image Generator"}}