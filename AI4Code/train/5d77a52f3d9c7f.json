{"cell_type":{"88943d9d":"code","0a17abe7":"code","67b9bd8f":"code","3406d4e0":"code","5cadf0d3":"code","bcce5564":"code","ea2e8094":"code","9bfaa75a":"code","a982caa8":"code","5adeba20":"code","1d3cfe9d":"code","1d912ab1":"code","4748fe29":"code","da0513c0":"code","4ecb56da":"code","e16a7e54":"code","e5de1170":"code","2cf7521c":"code","62f06eaf":"code","687b8bb7":"code","cb70b785":"code","65d74a85":"code","a2439a8e":"code","b7742b0f":"code","97d1ae7d":"code","2285779f":"code","8c2286ed":"code","1fa145f5":"code","ff8248a6":"code","fb6b977b":"code","a47b06c3":"code","947e65db":"code","22b94245":"code","301cdceb":"code","4af98efb":"code","36ce4e04":"code","ca4792ae":"code","7b07abd8":"code","8dcb7775":"code","63213a8b":"code","600b46d9":"code","f9d8e535":"code","a7bc4e0e":"code","dabf163b":"code","e458ed7a":"code","455067a0":"code","8ffc723d":"code","e9de8fd7":"code","ef6467e1":"code","100f00a9":"code","76ad68d3":"code","52806c5f":"code","680d5ffb":"code","e5a160e8":"code","ad691af8":"code","a1062445":"code","62a098d0":"code","9acdf795":"code","d4db88b7":"code","e39996a2":"code","81659940":"code","e9d699eb":"code","a6c9f986":"code","49c33485":"code","45692bdd":"code","829eb380":"code","16e0fddd":"code","c754e3a6":"code","3670f02c":"code","34c6d5ff":"code","a315f22f":"code","322d4c49":"code","2c93d542":"code","6f1659fb":"code","edb21f43":"code","4e5260ea":"markdown","eea03003":"markdown","926d9a8b":"markdown","5f0f203b":"markdown","cea0edac":"markdown","9f9d852d":"markdown","993e5032":"markdown","8fbf7b00":"markdown","7ff334d1":"markdown","1d33d4d7":"markdown","2b261b0e":"markdown","2f4f98bd":"markdown","8c564f7b":"markdown","88e4f87f":"markdown","c47636a5":"markdown","0e2f7cb6":"markdown","55d469e7":"markdown","7709f07f":"markdown","d06c4c88":"markdown","fc0ffa8d":"markdown"},"source":{"88943d9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport datetime as dt\nimport numpy as np                 # linear algebra\nimport pandas as pd                # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\n\n# For visulaizations\nimport matplotlib.pyplot as plt \nfrom matplotlib.pyplot import figure\nimport seaborn as sns\nfrom pandas.plotting import autocorrelation_plot\n%matplotlib inline\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\n\n# Input data files are available in the read-only \"..\/input\/\" directory\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","0a17abe7":"dateparse = lambda x: pd.datetime.strptime(x, '%d-%m-%Y')\n\ndata = pd.read_csv(\"..\/input\/customer\/cust_seg.csv\", header = 0, date_parser = dateparse, parse_dates = [8])\ndata.head(5)","67b9bd8f":"data = data.iloc[:, 1:]\ndata.head(2)","3406d4e0":"data.shape","5cadf0d3":"# data['Frequency'] = data['NumDealsPurchases'] + data['NumWebPurchases'] + data['NumCatalogPurchases'] + data['NumStorePurchases'] + data['NumWebVisitsMonth']\n# data[\"Monetary\"] = data[\"MntWines\"] + data[\"MntFruits\"] + data[\"MntMeatProducts\"] + data[\"MntFishProducts\"] + data[\"MntSweetProducts\"] + data[\"MntGoldProds\"]\n# data[\"loyal_for_#_month\"] = 12.0 * (2021 - data.date_parsed.dt.year ) + (1 - data.date_parsed.dt.month)\n# data['Promo_accepted'] = data['AcceptedCmp1'] + data['AcceptedCmp2'] + data['AcceptedCmp3'] + data['AcceptedCmp4'] + data['AcceptedCmp4']\n# data[\"kids\"] = data[\"Kidhome\"] + data[\"Teenhome\"]\n# data[\"Is_parent\"] = np.where(data[\"kids\"] > 0, 1, 0)\n# data.head()","bcce5564":"# columns = ['Birth_Year', 'Education', 'Marital_Status', 'Kidhome', 'Teenhome', 'date_parsed', 'MntWines', \n#           'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']\n# data.drop(columns = columns, inplace = True)","ea2e8094":"# columns1 = ['NumDealsPurchases', 'NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth',\n#            'AcceptedCmp1', 'AcceptedCmp2','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5', 'Z_CostContact', 'Z_Revenue', 'Response']\n# data.drop(columns = columns1, inplace = True)\n# data.head()","9bfaa75a":"# data['Kids'] = data.kids\n# data['promo'] = data.Promo_accepted\n# data['complain'] = data.Complain\n# data.head()","a982caa8":"# data.drop(columns = ['Complain', 'Promo_accepted', 'kids'], inplace=True)\n# data.rename(columns = {'complain': 'Complain', \n#                       'promo': 'Promo_accepted'}, inplace=True)","5adeba20":"# data","1d3cfe9d":"data['date_parsed'].dtype","1d912ab1":"data.tail()","4748fe29":"df = data[['date_parsed', 'MntWines', 'MntFruits', 'MntMeatProducts', \n          'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']]\ndf.head()","da0513c0":"names = {\n    'date_parsed': 'Date',\n    'MntWines': 'Wine_Sales',\n    'MntFruits': 'Fruit_Sales',\n    'MntMeatProducts': 'Meat_Sales',\n    'MntFishProducts': 'Fish_Sales',\n    'MntSweetProducts': 'Sweet_Sales',\n    'MntGoldProds': 'Gold_Sales'\n}\n\ndf.rename(columns = names, inplace = True)\ndf.head()","4ecb56da":"df = df.sort_values(by = ['Date'], axis = 0)","e16a7e54":"df = df[(df['Date'] > '2018-07-31')]","e5de1170":"df.tail(5)","2cf7521c":"df = df.groupby('Date').sum()\ndf","62f06eaf":"df.shape","687b8bb7":"df = df.reset_index(level = 0)\ndf.tail(5)","cb70b785":"plt.figure(figsize=(12,6))\nplt.plot(df['Wine_Sales'], color='#EC7063', label = 'Daily Revenue')\nplt.xticks(rotation = 45)\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('Revenue Generated', fontsize=16)\nplt.legend(fontsize=16)\nplt.show()","65d74a85":"resampled_df = df.resample('M', on='Date').mean()\nresampled_df.head()","a2439a8e":"resampled_df.shape","b7742b0f":"resampled_df.tail(1)","97d1ae7d":"plt.figure(figsize=(12,6))\nplt.plot(resampled_df['Wine_Sales'], color='#EC7063', label = 'Monthly Revenue')\nplt.xticks(rotation = 45)\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('Revenue Generated', fontsize=16)\nplt.legend(fontsize=16)\nplt.show()","2285779f":"new_df = df.resample('W', on='Date').mean()\nnew_df.head()","8c2286ed":"plt.figure(figsize=(12,6))\nplt.plot(new_df['Wine_Sales'], color='#EC7063', label = 'Weekly Revenue')\nplt.xticks(rotation = 45)\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('Revenue Generated', fontsize=16)\nplt.legend(fontsize=16)\nplt.show()","1fa145f5":"new_df.Wine_Sales.plot()","ff8248a6":"autocorrelation_plot(resampled_df['Wine_Sales'])","fb6b977b":"plot_pacf(resampled_df['Wine_Sales'], lags=7)","a47b06c3":"result = seasonal_decompose(resampled_df['Wine_Sales'], model = 'additive', period = 3)\nresult.plot()\nplt.xticks(rotation = 45, fontsize=11)\nplt.show()","947e65db":"wine_sarima = SARIMAX(resampled_df['Wine_Sales'], order=(10, 1, 2), seasonal_order=(0, 0, 11, 3))","22b94245":"wine_sarima = wine_sarima.fit()","301cdceb":"ypred = wine_sarima.predict()\n\npalette = [\"#682F2F\",\"#F3AB60\"]\nplt.plot(resampled_df['Wine_Sales'], color=\"green\", label='Real')\nplt.plot(ypred, color='red', label='Predicted')\nplt.plot(wine_sarima.forecast(9), color = \"#682F2F\", label='Forecasted')\nplt.title(\"Wine Sales Forecast\", fontsize=15)\nplt.xticks(rotation=45, fontsize =11)\nplt.yticks(fontsize=11)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Wine Sales ($)\", fontsize=12)\nplt.axvline(x=resampled_df.tail(1).index, color='purple')\nplt.axvline(x='2020-07-31', color='purple', ls='--')\n\nplt.axvline(x='2021-03-31', color='purple', ls='--')\nplt.axvline(x='2021-04-30', color='purple')\nplt.legend(fontsize=12)\nplt.show()","4af98efb":"mean_squared_error(resampled_df['Wine_Sales'], ypred)","36ce4e04":"resampled_df['Fruit_Sales'].plot()","ca4792ae":"fruit_decompose = seasonal_decompose(resampled_df['Fruit_Sales'], model = 'additive', period=4)\nfruit_decompose.plot()\nplt.xticks(rotation = 45, fontsize=11)\nplt.show()","7b07abd8":"autocorrelation_plot(resampled_df['Fruit_Sales'])","8dcb7775":"plot_pacf(resampled_df['Fruit_Sales'], lags=10)","63213a8b":"fruit_sarima = SARIMAX(resampled_df['Fruit_Sales'], order = (10, 1, 3), seasonal_order = (0, 0, 12, 4))","600b46d9":"fruit_sarima = fruit_sarima.fit()","f9d8e535":"fruit_pred = fruit_sarima.predict()\n\nplt.plot(resampled_df['Fruit_Sales'], color=\"green\", label='Real')\nplt.plot(fruit_pred, color='red', label='Predicted')\nplt.plot(fruit_sarima.forecast(9), color = \"#682F2F\", label='Forecasted')\nplt.title(\"Fruit Sales Forecast\", fontsize=15)\nplt.xticks(rotation=45, fontsize =11)\nplt.yticks(fontsize=11)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Fruit Sales ($)\", fontsize=12)\nplt.axvline(x=resampled_df.tail(1).index, color='purple')\nplt.axvline(x='2020-07-31', color='purple', ls='--')\n\nplt.axvline(x='2021-03-31', color='purple', ls='--')\nplt.axvline(x='2021-04-30', color='purple')\nplt.legend(fontsize=12)\nplt.show()","a7bc4e0e":"mean_squared_error(resampled_df['Fruit_Sales'], fruit_pred)","dabf163b":"resampled_df['Meat_Sales'].plot()","e458ed7a":"meat_seasonal = seasonal_decompose(resampled_df.Meat_Sales, model = 'additive', period = 3)\nmeat_seasonal.plot()\nplt.xticks(rotation = 45, fontsize=11)\nplt.show()","455067a0":"autocorrelation_plot(resampled_df['Meat_Sales'])","8ffc723d":"plot_pacf(resampled_df['Meat_Sales'], lags=10)","e9de8fd7":"meat_sarima = SARIMAX(resampled_df['Meat_Sales'], order= (10, 1, 2), seasonal_order=(0, 0, 13, 3))","ef6467e1":"meat_sarima = meat_sarima.fit()","100f00a9":"meat_preds = meat_sarima.predict()\n\nplt.plot(resampled_df['Meat_Sales'], color=\"green\", label='Real')\nplt.plot(meat_preds, color='red', label='Predicted')\nplt.plot(meat_sarima.forecast(9), color = \"#682F2F\", label='Forecasted')\nplt.title(\"Meat Sales Forecast\", fontsize=15)\nplt.xticks(rotation=45, fontsize =11)\nplt.yticks(fontsize=11)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Meat Sales ($)\", fontsize=12)\nplt.axvline(x=resampled_df.tail(1).index, color='purple')\nplt.axvline(x='2020-07-31', color='purple', ls='--')\n\nplt.axvline(x='2021-03-31', color='purple', ls='--')\nplt.axvline(x='2021-04-30', color='purple')\nplt.legend(fontsize=12)\nplt.show()","76ad68d3":"mean_squared_error(resampled_df['Meat_Sales'], meat_preds)","52806c5f":"resampled_df['Fish_Sales'].plot()","680d5ffb":"fish_season = seasonal_decompose(resampled_df.Fish_Sales, model='additive', period = 4)\nfish_season.plot()\nplt.xticks(rotation = 45, fontsize=11)\nplt.show()","e5a160e8":"autocorrelation_plot(resampled_df['Fish_Sales'])","ad691af8":"plot_pacf(resampled_df['Fish_Sales'], lags =10)","a1062445":"fish_sarima = SARIMAX(resampled_df['Fish_Sales'], order = (7, 1, 1), seasonal_order = (0, 0, 12, 4))","62a098d0":"fish_sarima = fish_sarima.fit()","9acdf795":"fish_preds = fish_sarima.predict()\n\nplt.plot(resampled_df['Fish_Sales'], color=\"green\", label='Real')\nplt.plot(fish_preds, color='red', label='Predicted')\nplt.plot(fish_sarima.forecast(9), color = \"#682F2F\", label='Forecasted')\nplt.title(\"Fish Sales Forecast\", fontsize=15)\nplt.xticks(rotation=45, fontsize =11)\nplt.yticks(fontsize=11)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Fish Sales ($)\", fontsize=12)\nplt.axvline(x=resampled_df.tail(1).index, color='purple')\nplt.axvline(x='2020-07-31', color='purple', ls='--')\n\nplt.axvline(x='2021-03-31', color='purple', ls='--')\nplt.axvline(x='2021-04-30', color='purple')\nplt.legend(fontsize=12)\nplt.show()","d4db88b7":"mean_squared_error(resampled_df['Fish_Sales'], fish_preds)","e39996a2":"resampled_df.Sweet_Sales.plot()","81659940":"sweet_season = seasonal_decompose(resampled_df['Sweet_Sales'], model='additive', period =4)\nsweet_season.plot()\nplt.xticks(rotation = 45, fontsize=11)\nplt.show()","e9d699eb":"autocorrelation_plot(resampled_df['Sweet_Sales'])","a6c9f986":"plot_pacf(resampled_df['Sweet_Sales'], lags=10)","49c33485":"sweet_sarima = SARIMAX(resampled_df['Sweet_Sales'], order=(14, 1, 1), seasonal_order = (0, 0, 15, 4))","45692bdd":"sweet_sarima = sweet_sarima.fit()","829eb380":"sweet_preds = sweet_sarima.predict()\n\nplt.plot(resampled_df['Sweet_Sales'], color=\"green\", label='Real')\nplt.plot(sweet_preds, color='red', label='Predicted')\nplt.plot(sweet_sarima.forecast(9), color = \"#682F2F\", label='Forecasted')\nplt.title(\"Sweet Forecasting\", fontsize=15)\nplt.xticks(rotation=45, fontsize =11)\nplt.yticks(fontsize=11)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Sweet Sales ($)\", fontsize=12)\nplt.axvline(x=resampled_df.tail(1).index, color='purple')\nplt.axvline(x='2020-07-31', color='purple', ls='--')\n\nplt.axvline(x='2021-03-31', color='purple', ls='--')\nplt.axvline(x='2021-04-30', color='purple')\nplt.legend(fontsize=12)\nplt.show()","16e0fddd":"mean_squared_error(resampled_df['Sweet_Sales'], sweet_preds)","c754e3a6":"resampled_df['Gold_Sales'].plot()","3670f02c":"gold_season = seasonal_decompose(resampled_df.Gold_Sales, model='additive', period = 3)\ngold_season.plot()\nplt.xticks(rotation = 45, fontsize=11)\nplt.show()","34c6d5ff":"autocorrelation_plot(resampled_df['Gold_Sales'])","a315f22f":"plot_pacf(resampled_df['Gold_Sales'], lags=10)","322d4c49":"gold_sarima = SARIMAX(resampled_df['Gold_Sales'], order=(9, 1, 2), seasonal_order=(0, 0, 16, 3))","2c93d542":"gold_sarima = gold_sarima.fit()","6f1659fb":"gold_preds = gold_sarima.predict()\n\nplt.plot(resampled_df['Gold_Sales'], color=\"green\", label='Real')\nplt.plot(gold_preds, color='red', label='Predicted')\nplt.plot(gold_sarima.forecast(9), color = \"#682F2F\", label='Forecasted')\nplt.title(\"Gold Forecasting\", fontsize=15)\nplt.xticks(rotation=45, fontsize =11)\nplt.yticks(fontsize=11)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Gold Sales ($)\", fontsize=12)\nplt.axvline(x=resampled_df.tail(1).index, color='purple')\nplt.axvline(x='2020-07-31', color='purple', ls='--')\n\nplt.axvline(x='2021-03-31', color='purple', ls='--')\nplt.axvline(x='2021-04-30', color='purple')\nplt.legend(fontsize=12)\nplt.show()","edb21f43":"mean_squared_error(resampled_df['Gold_Sales'], gold_preds)","4e5260ea":"Lowest: (14, 1, 1)(0, 0, 15, 4)","eea03003":"# Customer Personality Analysis","926d9a8b":"## Meat Sales","5f0f203b":"MSE: 114503.170 FINAL","cea0edac":"MSE: 2827.313863494962","9f9d852d":"## Gold Metal Sales","993e5032":"MSE: 1072.9815359593247","8fbf7b00":"## DATA PREPARATION","7ff334d1":"Lowest: (9, 1, 2) (0, 0, 16, 3)","1d33d4d7":"## Downsampling of data (Monthly)","2b261b0e":"Lowest: (10, 1, 3) (0, 0, 12, 4)","2f4f98bd":"MSE: 2309.734551907929","8c564f7b":"MSE: 43865.69","88e4f87f":"MSE: 951.67","c47636a5":"Lowest: (10, 1, 2) (0, 0, 13, 3)","0e2f7cb6":"Lowest: (7, 1, 1) (0, 0, 12, 4)","55d469e7":"## Fruit Sales","7709f07f":"## Sweet Sales\n","d06c4c88":"Lowest: (10, 1, 2)(0, 0, 11, 3)","fc0ffa8d":"## Fish Sales"}}