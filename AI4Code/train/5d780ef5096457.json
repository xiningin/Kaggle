{"cell_type":{"a20b254c":"code","143d5eb4":"code","efeb0547":"code","559a82e3":"code","cd9c17ec":"code","e8d9ebcb":"code","6f3dc84a":"code","c8af5192":"code","8da3b341":"code","7c478199":"code","840c7049":"code","b3408b70":"code","849e2d65":"code","b5edbb3a":"code","4077dd15":"code","b26c1c08":"code","b58c7810":"markdown","23f620aa":"markdown","5475612d":"markdown","e5a76006":"markdown","1565349b":"markdown","66251bae":"markdown","e7ad265a":"markdown","417ccdad":"markdown","76518559":"markdown","6a3e34d8":"markdown","b399b660":"markdown","a3fd75fc":"markdown","cee859f3":"markdown","4da06aa0":"markdown"},"source":{"a20b254c":"\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n###############################################################################\n#                           CARREGANDO OS DADOS\n###############################################################################\ntitanic = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","143d5eb4":"#Exibindo uma amostra de linhas\ntitanic.head()","efeb0547":"#Descri\u00e7\u00e3o das colunas:\n#  PassengerId : unique id number to each passenger\n#  Survived : passenger survived(1) or died(0)\n#  Pclass : passenger class\n#  Name : name\n#  Sex : gender of passenger\n#  Age : age of passenger\n#  SibSp : number of siblings or spouses\n#  Parch : number of parent or children\n#  Ticket : amount of money spend of ticket\n#  Fare : fare of ticket\n#  Cabin : cabin category\n#  Embarked : port where passenger embarked(C= Cherbourg, S=Southampton Q)\n\ntitanic.info()","559a82e3":"#Exibindo uma descri\u00e7\u00e3o estat\u00edstica simples\ntitanic.describe(include = 'all')","cd9c17ec":"#Lista a quantidade de nulls por coluna ---------------------------------------\ntitanic.isnull().sum()\n","e8d9ebcb":"#Criando uma nova coluna de categoria com o CUT. \nbins = [0,3,12,17,65,150]\nlabels = ['Baby\/Infant','Child','Teen','Adult','Elderly']\n\ncategory = pd.cut( titanic['Age'], bins=bins, labels=labels )\n\ntitanic.insert(5,'AgeCategory',category)\n\ntitanic.head()","6f3dc84a":"#Extraindo os pronomes de tratamento\ntitanic.insert(5,'Title', titanic['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False) )\n\ntitanic.head()","c8af5192":"#Baseado na crosstab Title vs Age\ntitleXages_dict = { 'Capt'     : 'Elderly',\n                    'Col'      : 'Adult',\n                    'Countess' : 'Adult',\n                    'Don'      : 'Adult',\n                    'Dona'     : 'Adult',#S\u00f3 encontrado em test\n                    'Dr'       : 'Adult',\n                    'Jonkheer' : 'Adult',\n                    'Lady'     : 'Adult',\n                    'Major'    : 'Adult',\n                    'Master'   : 'Child',\n                    'Miss'     : 'Adult', #Aqui temos trabalho ainda por fazer\n                    'Mlle'     : 'Adult',\n                    'Mme'      : 'Adult',\n                    'Mr'       : 'Adult', #Aqui temos trabalho ainda por fazer, por\u00e9m \u00e9 menos importante que Miss\n                    'Mrs'      : 'Adult', #Aqui podemos realmente ignorar o trabalho por fazer\n                    'Ms'       : 'Adult',\n                    'Rev'      : 'Adult',\n                    'Sir'      : 'Adult'}\n\n#Para toda chave no Dict de Pronomes de Tratamento, se a Idade foi NaN sete a \n#categoria da idade para o definidio no Dict\nfor key in titleXages_dict:\n    titanic.loc[(titanic['Age'].isna()) & (titanic['Title'] == key), 'AgeCategory'  ] = titleXages_dict[key]\n","8da3b341":"titanic[titanic['AgeCategory'].isna()]","7c478199":"#complete embarked with mode\ntitanic['Embarked'].fillna(titanic['Embarked'].mode()[0], inplace = True)\n\ntitanic[titanic['Embarked'].isna()]","840c7049":"#Criar Atributo Family Size ---------------------------------------------------\ntitanic['FamilySize'] = titanic['SibSp'] + titanic['Parch'] + 1\n\n#Criar Atributo isAlone -------------------------------------------------------\ntitanic['IsAlone'] = 1 #initialize to yes\/1 is alone\ntitanic.loc[titanic.FamilySize> 1, 'IsAlone'] = 0 # now update to no\/0 if family size is greater than 1\n\n#Transformar o valor do t\u00edcket em dado categ\u00f3rico. Nesse caso estou dividindo nos quartils [0, .25, .5, .75, 1.]\ntitanic['FareBin'] = pd.qcut(titanic['Fare'], 4)\n","b3408b70":"from sklearn.preprocessing import LabelEncoder\n#Transformando as cate'gorias em n\u00fameros\nlabel = LabelEncoder()\ntitanic['Sex_Code'] = label.fit_transform(titanic['Sex'])\ntitanic['Age_Code'] = label.fit_transform(titanic['AgeCategory'])\ntitanic['Embarked_Code'] = label.fit_transform(titanic['Embarked'])\ntitanic['Title_Code'] = label.fit_transform(titanic['Title'])\ntitanic['Fare_Code'] = label.fit_transform(titanic['FareBin'])\n\ntitanic.head()","849e2d65":"#Selecionando colunas para treinamento\n# PassengerId   - N\u00c3O - N\u00e3o adiciona informa\u00e7\u00e3o ao passageiro\n# Survived      - SIM - Resposta que desejamos\n# Pclass        - SIM - J\u00e1 \u00e9 categ\u00f3rico e num\u00e9rico\n# Name          - N\u00c3O - N\u00e3o adiciona informa\u00e7\u00e3o ao passageiro\n# Sex           - N\u00c3O - Ser\u00e1 substituido por Sex_Code que \u00e9 o male ou female codificados\n# Title         - N\u00c3O - Ser\u00e1 substituido por Title_Code\n# AgeCategory   - N\u00c3O - Ser\u00e1 substituido por Age_Code\n# Age           - N\u00c3O - Foi substituido por categorias em AgeCategory\n# SibSp         - N\u00c3O - Foi substituido por FamilySize e isAlone\n# Parch         - N\u00c3O - Foi substituido por FamilySize e isAlone\n# Ticket        - N\u00c3O - N\u00e3o adiciona informa\u00e7\u00e3o ao passageiro\n# Fare          - N\u00c3O - Foi subistituido por categorias em FareBin\n# Cabin         - N\u00c3O - N\u00e3o adiciona informa\u00e7\u00e3o ao passageiro\n# Embarked      - N\u00c3O - Ser\u00e1 substituido por Embarked_Code\n# FamilySize    - SIM - Tamanho da fam\u00edlia do passageiro\n# IsAlone       - SIM - Se o passageiro viaja s\u00f3\n# FareBin       - N\u00c3O - Ser\u00e1 substituido por Fare_Code\n# Sex_Code      - SIM - Vari\u00e1vel categorizada e codificada\n# Age_Code      - SIM - Vari\u00e1vel categorizada e codificada\n# Embarked_Code - SIM - Vari\u00e1vel categorizada e codificada\n# Title_Code    - SIM - Vari\u00e1vel categorizada e codificada\n# Fare_Code     - SIM - Vari\u00e1vel categorizada e codificada\nX = titanic[['Pclass', 'FamilySize', 'IsAlone', 'Sex_Code', 'Age_Code', 'Embarked_Code', 'Title_Code', 'Fare_Code']]\n\n#Resposta para o classificador\ny = titanic['Survived']\n\nX.head()","b5edbb3a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.3, random_state=0)","4077dd15":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier()\n\ntree.fit( X_train, y_train)\n\ny_predict = tree.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_test, y_predict))\n\nTN, FP, FN, TP = confusion_matrix(y_test, y_predict).ravel()\n\nprint(TN,FP,FN,TP)\n\n#Existem m\u00e9todos prontos para fazer esses c\u00e1lculos, prefira sempre o uso de m\u00e9todos prontos\n\n \nacuracia = (TP+TN) \/ (TN + FP + FN + TP)\n\nsensibilidade = TP \/ (TP + FN)\n\nespecificidade = TN \/ (TN + FP)\n\nprecisao = TP \/ (TP + FP)\n\nimport math \nphi = ( (TP*TN) - (FP*FN) )  \/ math.sqrt( (TP + FP) * (TP + FN) * (TN + FP) * (TN + FN) )\n\n\nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_predict)\nauc = metrics.auc(fpr, tpr)\n\nprint(\"Acur\u00e1cia:       %.2f\" % acuracia)\nprint(\"Sensibilidade:  %.2f\" % sensibilidade)\nprint(\"Especificidade: %.2f\" % especificidade)\nprint(\"Precis\u00e3o: %.2f\" % precisao)\nprint(\"PHI: %.2f\" % phi)\nprint(\"AUC: %.2f\" % auc)","b26c1c08":"from sklearn.svm import SVC\n\nsvc = SVC()\n\nsvc.fit( X_train, y_train)\n\ny_predict = svc.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_test, y_predict))\n\nTN, FP, FN, TP = confusion_matrix(y_test, y_predict).ravel()\n\nprint(TN,FP,FN,TP)\n\n#Existem m\u00e9todos prontos para fazer esses c\u00e1lculos, prefira sempre o uso de m\u00e9todos prontos\n\n \nacuracia = (TP+TN) \/ (TN + FP + FN + TP)\n\nsensibilidade = TP \/ (TP + FN)\n\nespecificidade = TN \/ (TN + FP)\n\nprecisao = TP \/ (TP + FP)\n\nimport math \nphi = ( (TP*TN) - (FP*FN) )  \/ math.sqrt( (TP + FP) * (TP + FN) * (TN + FP) * (TN + FN) )\n\n\nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_predict)\nauc = metrics.auc(fpr, tpr)\n\nprint(\"Acur\u00e1cia:       %.2f\" % acuracia)\nprint(\"Sensibilidade:  %.2f\" % sensibilidade)\nprint(\"Especificidade: %.2f\" % especificidade)\nprint(\"Precis\u00e3o: %.2f\" % precisao)\nprint(\"PHI: %.2f\" % phi)\nprint(\"AUC: %.2f\" % auc)","b58c7810":"# 2 - Observando o dataset","23f620aa":"### Ap\u00f3s corrigir os faltantes vamos criar algumas features novas que podem nos ajudar no processo de classifica\u00e7\u00e3o.","5475612d":"### Avaliando o SVC para comparar com a DecisionTree\n","e5a76006":"### Dividiremos o conjunto de dados em Treino e Teste","1565349b":"### Vamos come\u00e7ar eliminando as idades faltantes\n\n### Primeiro vamos criar categorias para idades.","66251bae":"# 4 - Selecionando as colunas e dividindo o dataset em treino e teste\n","e7ad265a":"### Uma estrat\u00e9gia \u00e9 inferir a categoria da idade pelo pronome de tratamento","417ccdad":"### Agora podemos tratar os nulos do local de embarque.","76518559":"# 1 - Carregando o conjunto de dados (dataset).","6a3e34d8":"###Vamos avaliar qu\u00e3o completo \u00e9 o dataset.","b399b660":"### Nosso \u00faltimo passo \u00e9 transformar os valores categ\u00f3ricos em n\u00fameros para os algortimos de ML trabalharem de forma devida.","a3fd75fc":"# 5 - Treinando modelos e comparando resultados\n\n\n### Vamos agora treinar um modelo simples, uma \u00e1rvore de decis\u00e3o\n\n#### Lembrando:\n\n1. **ACUR\u00c1CIA**: A propor\u00e7\u00e3o de predi\u00e7\u00f5es corretas, sem levar em considera\u00e7\u00e3o o que \u00e9 positivo e o que \u00e9 negativo. Esta medida \u00e9 altamente suscetivel a desbalanceamentos do conjunto de dados e pode facilmente induzir a uma conclus\u00e3o errada sobre o desempenho do sistema.\n2. **SENSIBILIDADE**: Deve ser usada em uma situa\u00e7\u00e3o em que os **Falsos Negativos s\u00e3o considerados mais prejudiciais** que os Falsos Positivos. Por exemplo, o modelo deve de qualquer maneira encontrar todos os pacientes doentes, mesmo que classifique alguns saud\u00e1veis como doentes (situa\u00e7\u00e3o de Falso Positivo) no processo. Ou seja, o modelo deve ter alto recall, pois classificar pacientes doentes como saud\u00e1veis pode ser uma trag\u00e9dia.\n3. **ESPECIFICIDADE**: A propor\u00e7\u00e3o de verdadeiros negativos: a capacidade do sistema em predizer corretamente a aus\u00eancia da condi\u00e7\u00e3o para casos que realmente n\u00e3o a t\u00eam.\n4. **PRECIS\u00c3O**: Deve ser usada em uma situa\u00e7\u00e3o em que os **Falsos Positivos s\u00e3o considerados mais prejudiciais** que os Falsos Negativos. Por exemplo, ao classificar uma a\u00e7\u00e3o como um bom investimento, \u00e9 necess\u00e1rio que o modelo esteja correto, mesmo que acabe classificando bons investimentos como maus investimentos (situa\u00e7\u00e3o de Falso Negativo) no processo. Ou seja, o modelo deve ser preciso em suas classifica\u00e7\u00f5es, pois a partir do momento que consideramos um investimento bom quando na verdade ele n\u00e3o \u00e9, uma grande perda de dinheiro pode acontecer.\n5. **COEFICIENTE DE CORRELA\u00c7\u00c3O DE MATTHEWS \u2013 COEFICIENTE (PHI)**: O coeficiente de correla\u00e7\u00e3o de Matthews \u00e9 uma medida de qualidade de duas classifica\u00e7\u00f5es bin\u00e1rias que pode ser usada mesmo se as classes possuem tamanhos bastante diferentes. Retorna um valor entre (-1) e (+1), em que um coeficiente de (+1) representa uma predicao perfeita, (0) representa uma predicao aleatoria media, e (-1) uma predicao inversa. Esta estatistica \u00e9 equivalente ao coeficiente phi, e tenta, assim como a efici\u00eancia, resumir a qualidade da tabela de conting\u00eancia em um \u00fanico valor num\u00e9rico passivel de ser comparado.","cee859f3":"### Verificando quantas idades ainda s\u00e3o NaN","4da06aa0":"# 3 - Vamos come\u00e7ar a fazer a etapa de preprocessamento\n\n### Aqui nosso objetivo \u00e9 ser o mais simples e did\u00e1tico poss\u00edvel. N\u00e3o vamos tentar no in\u00edcio utilizar t\u00e9cnicas mais elaboradas de engenharia de features.\n\n### Trabalhamos aqui nos 4 Cs:\n1. Correcting\n2. Completing\n3. Creating\n4. Converting\n"}}