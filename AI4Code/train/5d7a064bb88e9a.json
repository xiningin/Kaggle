{"cell_type":{"fc5fd778":"code","2d170d0b":"code","d3d83ef1":"code","6a13ad1f":"code","924baba1":"code","6b741b07":"code","1d54d15f":"code","a0044b3d":"code","1fd8b6a0":"code","fc3decfc":"code","5bb1105e":"code","4553e650":"code","edeed7f0":"code","2cea4d62":"code","38b33b49":"code","85a4d25a":"code","5f74b0e9":"code","d5b67572":"code","38addb1e":"code","424d042b":"code","2e09bb01":"code","08e19853":"code","851184e1":"code","f140d0d8":"code","d77858e6":"code","f0783495":"code","ddf2a5f6":"code","3e5ad529":"code","d15a1bee":"code","8647a3cf":"code","a21113ba":"code","5334408e":"code","fd96ba8a":"code","ec036f40":"code","f0eba083":"code","ebe301c9":"code","556e654e":"code","cc880953":"code","27d27a50":"code","7f337481":"code","ac4d1a85":"code","970f0a8b":"code","eb2d0b99":"code","3acaa697":"code","1405d019":"code","a9b19107":"code","90a32fa0":"markdown","be84e46d":"markdown"},"source":{"fc5fd778":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d170d0b":"df = pd.read_csv(\"..\/input\/telecom-users-dataset\/telecom_users.csv\")\ndf.drop(columns=\"Unnamed: 0\",axis=1,inplace=True)\ndf.head(10)","d3d83ef1":"df.columns","6a13ad1f":"df.info()","924baba1":"df.describe()","6b741b07":"#no null values\ndf.isnull().sum()","1d54d15f":"#there seems to be some unbalance in the data about Churn\nsns.countplot(x=\"Churn\", data=df)","a0044b3d":"\nfig, axes = plt.subplots(ncols = 5, figsize=(20,10))\n\nsns.countplot(df[\"gender\"], ax=axes[0])\nsns.countplot(df[\"PhoneService\"], ax=axes[1])\nsns.countplot(df[\"InternetService\"], ax=axes[2])\nsns.countplot(df[\"OnlineSecurity\"], ax=axes[3])\nsns.countplot(df[\"OnlineBackup\"], ax=axes[4])","1fd8b6a0":"#from the plots above:\n#There is somewhat of an equality in the genders registered for the service\n#The majority of clients use the phone service\n#more and more people can afford\/desire having Fiber over DSL\n#There is still need to showcase the importance of Online backup and Online security to the people, still close regardless","fc3decfc":"fig, axes = plt.subplots(ncols = 4, figsize=(20,10))\nsns.countplot(df[\"DeviceProtection\"], ax=axes[0])\nsns.countplot(df[\"TechSupport\"], ax=axes[1])\nsns.countplot(df[\"StreamingTV\"], ax=axes[2])\nsns.countplot(df[\"StreamingMovies\"], ax=axes[3])","5bb1105e":"#seems like Streaming is the activity thats been adopted more lately within the culture of these clients, but still bound to grow","4553e650":"plt.figure(figsize=(12,8))\nsns.countplot(x=\"PaymentMethod\",data=df, hue=\"Churn\")","edeed7f0":"#Observation: People paying with electronic checks tend to churn way more than usual","2cea4d62":"sns.histplot(x=\"tenure\",data=df,kde=False)","38b33b49":"#Seems like a lot of people unsubscribe from the service within the first 5 months, thats a worrying trend\n#people post 6yrs to 7 yrs tend to start leaving the service, \n#there might be a need to start rewarding long term clients, like a points system for example","85a4d25a":"fig, axes = plt.subplots(ncols=2,figsize=(12,8))\nsns.countplot(x=\"Contract\",data=df,ax = axes[0])\nsns.countplot(x=\"Contract\",data=df, hue=\"Churn\",ax = axes[1])","5f74b0e9":"#Most people opt for the month to month contract, but as apparent in the 2nd graph, they still have a very high churn rate\n#which also validates the previous hypothesis, that people tend to leave in the first 5 to 6 months","d5b67572":"plt.figure(figsize=(12,8))\nsns.countplot(x=\"PaymentMethod\",data=df,hue=\"gender\")","38addb1e":"#unbalanced data \ndf.Churn.value_counts().plot(kind='pie', autopct='%.2f')","424d042b":"a = df.groupby(df[\"gender\"])[\"PaymentMethod\"].value_counts()\na","2e09bb01":"#you might not have noticed, but TotalCharges was actually a string not a float, and it also contained empty values, \n#gotta clear those first\nnulls = df[df['TotalCharges'] == ''].index.tolist()\n#list of indexes that has a null value in total charges\nnulls","08e19853":"df.drop(nulls,inplace=True)","851184e1":"df[df['TotalCharges'] == ''].index","f140d0d8":"#replacing some space existing in the strings of totalcharges, so that we can safely convert them\nimport re\nfor i in range(df.count().max()):\n    if i not in nulls:\n        df['TotalCharges'][i]=re.sub('^[ \\t]+','',df['TotalCharges'][i])\n    ","d77858e6":"df['TotalCharges'] = df['TotalCharges'].astype(float)","f0783495":"print(df.dtypes)","ddf2a5f6":"#categorial fields to numerical, in preparation for training the models\n\nlist = [\"gender\",\"Partner\",\"PhoneService\",\"MultipleLines\",\"InternetService\",\"OnlineSecurity\",\"OnlineBackup\",\"DeviceProtection\",\"TechSupport\",\"StreamingTV\",\"StreamingMovies\",\"Contract\",\"PaperlessBilling\",\"PaymentMethod\",\"Churn\"]\nfor col in list:\n    df[col] = pd.Categorical(df[col])\n    df[col] = df[col].cat.codes\n\ndf.head(5)","3e5ad529":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","d15a1bee":"#standardizing the numerical data cause there is a huge gap in the scale between them\n#Defining the columns for the inputs and the output\nss= StandardScaler()\nX = df[[\"gender\",\"tenure\",\"Partner\",\"PhoneService\",\"MultipleLines\",\"InternetService\",\"OnlineSecurity\",\"OnlineBackup\",\"DeviceProtection\",\"TechSupport\",\"StreamingTV\",\"StreamingMovies\",\"Contract\",\"PaperlessBilling\",\"PaymentMethod\",\"MonthlyCharges\",\"TotalCharges\"]]\nY = df[\"Churn\"]","8647a3cf":"#Standardizing only the numerical cols\nnum_cols = X.select_dtypes(include=[\"int64\",\"float64\"]).columns.tolist()\nX[num_cols] = ss.fit_transform(X[num_cols])\nX","a21113ba":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)","5334408e":"from keras.models import Sequential\nfrom keras.layers import Dense","fd96ba8a":"#Trying neural networks first\nmodel = Sequential()\nmodel.add(Dense(8,input_dim=17,activation=\"relu\"))\nmodel.add(Dense(4,activation=\"relu\"))\nmodel.add(Dense(1,activation=\"sigmoid\"))","ec036f40":"from keras import metrics\nmodel.compile(optimizer='adam',loss = 'binary_crossentropy', metrics=['accuracy'])","f0eba083":"history = model.fit(X_train,y_train,epochs = 60, batch_size=32)","ebe301c9":"#setting predictions and test data\ny_pred = model.predict_classes(X_test)\n\npred = []\nfor i in range(len(y_pred)):\n    pred.append(np.argmax(y_pred[i]))\ny_test.reset_index(drop=True,inplace=True)  \ntest = []\nfor i in range(len(y_test)):\n    test.append(np.argmax(y_test[i]))   ","556e654e":"y_pred","cc880953":"#accuracy hit: 80%\nfrom sklearn.metrics import confusion_matrix,classification_report\nprint(classification_report(y_test,y_pred))","27d27a50":"#2nd alogrithm: logistic regression\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()","7f337481":"lr.fit(X_train,y_train)","ac4d1a85":"#accuracy: 80%\npr = lr.predict(X_test)\nprint(classification_report(y_test,pr))","970f0a8b":"pr","eb2d0b99":"#final algorithm: random forest classifier\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()","3acaa697":"rf.fit(X_train,y_train)\nrf_pred = rf.predict(X_test)","1405d019":"#accuracy: 79%\nprint(classification_report(y_test,rf_pred))","a9b19107":"#this shows that despite the model is decent, the disparity in the data between Churn and non churn is huge \n#(shown by difference between false negatives and true positives)\n#and creates some conflict to not obtain higher precision in the models\nprint(\"NN :\" ,confusion_matrix(y_test,y_pred), \"\\n\\nLR: \", confusion_matrix(y_test,pr),\"\\n\\nRF :\", confusion_matrix(y_test,rf_pred))","90a32fa0":"Hitting 80% in accuracy for such a problem is still big, as the company can still predict the churning for around 8 out of 10 clients right, and that for sure can help them take better actions to prevent either current churning clients or potential ones","be84e46d":"****"}}