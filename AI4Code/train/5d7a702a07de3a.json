{"cell_type":{"53954e69":"code","9a6854aa":"code","3620161d":"code","e2547c2a":"code","b2db13b7":"code","60e2fae4":"code","e56b607e":"markdown","b00e3a62":"markdown","5c1a93d0":"markdown","cb29c162":"markdown","360a7b39":"markdown","3be53c7b":"markdown"},"source":{"53954e69":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.layers import Dense\nimport pandas as pd\nfrom PIL import Image as im\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.datasets import fashion_mnist","9a6854aa":"# importing data\ntrain = pd.read_csv(\"..\/input\/cap-4611-2021-fall-assignment-4\/train.csv\")\nval = pd.read_csv(\"..\/input\/cap-4611-2021-fall-assignment-4\/eval.csv\")\n\n\n\n#dropping id\ntrain = train.drop('id', 1)\nval = val.drop('id',1)\n\n# validation set \nval= val.values\nval = val \/ 255.0\nval = val.reshape(10000, 28, 28, 1)\n\n# reshaping data train set\nx = train.values[:,1:]\nx = x \/ 255.0\nx = x.reshape(60000, 28, 28, 1)\ny = keras.utils.to_categorical(train.label,10)\n\n# shape validation\nprint(x.shape)\nprint(y.shape)\nprint(val.shape)\n\n# split trainning and test data\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.2, random_state=1234)\n\n","3620161d":"# creating model\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras import layers\nnum_classes = 10\ninput_shape = (28, 28, 1) \n\nmodel = keras.Sequential(\n    [\n         keras.Input(shape=input_shape),\n         layers.Conv2D(32, kernel_size=(5,5), kernel_regularizer= regularizers.l2(4e-5), activation=\"relu\"), #C1\n         layers.MaxPooling2D(pool_size=(2,2)), # S2 Subsampling\n         layers.Dropout(0.25),\n         layers.Conv2D(64, kernel_size=(5,5), kernel_regularizer= regularizers.l2(4e-5), activation=\"relu\"), # C3\n         layers.MaxPooling2D(pool_size=(2,2)), # S4 Subsampling\n         layers.Dropout(0.25),\n         layers.Conv2D(64, kernel_size=(3,3), kernel_regularizer= regularizers.l2(4e-5), activation=\"relu\"), # C3\n         layers.Flatten(), # Convert 2D convolution layer to 1D fully connected layer\n         layers.Dense(64,activation = \"relu\"),\n         layers.Dense(num_classes, activation=\"softmax\"), # OUTPUT\n     ]\n )\nmodel.summary()","e2547c2a":"# running model\nepochs = 20\nsgd = keras.optimizers.SGD(learning_rate=0.9, momentum=.9, nesterov=True)\nmodel.compile(loss= \"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nhistory = model.fit(x_train, y_train, batch_size=64, epochs=epochs,validation_data = (x_test,y_test))","b2db13b7":"# evaluate model\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])\n","60e2fae4":"from IPython.display import HTML\n\n# \nid = a_list = list(range(0, 10000))\ndf = pd.DataFrame(a_list,columns = ['id'])\n\n\n\npred=model.predict(val) \npred=np.argmax(pred,axis=1)\ndf['label'] =pred.tolist()\nprint(pred.shape)\n\ndf.to_csv('data.csv', index=False)\n\ndef create_download_link(title = \"Download CSV file\", filename = \"data.csv\"):  \n    html = '<a href={filename}>{title}<\/a>'\n    html = html.format(title=title,filename=filename)\n    return HTML(html)\nprint(df.to_string())\n\n# create a link to download the dataframe which was saved with .to_csv method\ncreate_download_link(filename='data.csv')\n\n\n","e56b607e":"# Prepering Model","b00e3a62":"# Data Prossessing ","5c1a93d0":"# Evaluate Model","cb29c162":"# Create Output","360a7b39":"# Imports","3be53c7b":"# Running Model"}}