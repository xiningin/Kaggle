{"cell_type":{"a5e7b1a6":"code","de56de03":"code","c175583a":"code","062c6d25":"code","0d80f4fe":"code","ff12570a":"code","98af60e7":"code","606e0b9e":"code","c133ec89":"code","61bd6efc":"code","cbb02d19":"code","4510bad9":"code","4d1e9e8c":"code","33d521e7":"code","8f68b7fc":"code","c120eb78":"code","4ca4c655":"code","7116ffd9":"code","498f6baa":"code","6159eedf":"code","e51a8431":"code","cd2f30eb":"code","4f7172bd":"code","2519f23d":"code","ad867b75":"code","b1eda537":"code","7823439e":"markdown","d420a1e9":"markdown","6bc26b5f":"markdown","a6fdf630":"markdown","31fb11c6":"markdown","9e0a2274":"markdown","a48df6fe":"markdown","8ec1829c":"markdown","85dea80c":"markdown"},"source":{"a5e7b1a6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","de56de03":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","c175583a":"train = pd.read_csv('..\/input\/google-stock-price\/Google_Stock_Price_Train.csv')","062c6d25":"train.head()","0d80f4fe":"#This will create Dataframe, not numpy array, as we want Dataframe\ntraindf = train.iloc[: , 1:2].values","ff12570a":"traindf.shape","98af60e7":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\n\ntrainsc = scaler.fit_transform(traindf)","606e0b9e":"xtrain = []\nytrain = []\n\nfor i in range(60, 1258):\n  xtrain.append(trainsc[i-60:i, 0])\n  ytrain.append(trainsc[i, 0])\n\nxtrain = np.array(xtrain)\nytrain = np.array(ytrain)","c133ec89":"xtrain.shape, ytrain.shape","61bd6efc":"xtrain[1].shape","cbb02d19":"# Reshaping xtrain as per required input shape for xtrain\nxtrain = np.reshape(xtrain, (xtrain.shape[0], xtrain.shape[1], 1))","4510bad9":"xtrain.shape","4d1e9e8c":"from tensorflow import keras","33d521e7":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout","8f68b7fc":"# Initialize Neural Network\n\nregressor = Sequential()","c120eb78":"#First LSTM Layer\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (xtrain.shape[1], 1)))\nregressor.add(Dropout(0.2))","4ca4c655":"# Second LSTM Layer\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))","7116ffd9":"# Third LSTM Layer\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))","498f6baa":"# Fourth LSTM Layer\nregressor.add(LSTM(units = 50, return_sequences = False))   # return_sequences default value False\nregressor.add(Dropout(0.2))","6159eedf":"# Output Layer, as its Regression analysis hence only 1 output requires\nregressor.add(Dense(units = 1))","e51a8431":"# Keeping model as simple as possible\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')","cd2f30eb":"regressor.fit(xtrain, ytrain, epochs = 100, batch_size = 32)","4f7172bd":"# Read test data for validation\ntest = pd.read_csv('..\/input\/google-stock-price\/Google_Stock_Price_Test.csv')","2519f23d":"real_stock_price = test.iloc[:, 1:2].values","ad867b75":"dataset_total = pd.concat((train['Open'], test['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = scaler.transform(inputs)\nX_test = []\nfor i in range(60, 80):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)","b1eda537":"plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","7823439e":"Basically we have 45 rows with xtrain and these 45 values will predict output ytrain","d420a1e9":"We will predict model based on Open price, so we will neglect other columns\nWe can use them as well, will show that with my next notebook","6bc26b5f":"# Reading Data","a6fdf630":"With RNN I always prefer MinmaxScaler over other, hence we will use Minmaxscaler for Feature engineering","31fb11c6":"# Building RNN Model","9e0a2274":"# Result Visualization ( Model validation)","a48df6fe":"# Data Preparation","8ec1829c":"* Aim of this Notebook, we are going to predict Open stock price of Google Stock. \n* We are going to use only Opening price to build model.\n* Aim is to predict price of stock but to predict Trends i.e. Uptrend and Down Trend in stock\n* For Stock analyst, its rather important to know when Stock will carry out rally and direction of that rally.\n* Kindly consider upvoting this notebook, if you get useful information, Thanks!! Enjoy Learning","85dea80c":"Creating a dataset with 60 timesteps and 1 output, I.e. it will use 60 days older data to predict next days output,\n We can try from 1 day to any number of day, 60 gives best result"}}