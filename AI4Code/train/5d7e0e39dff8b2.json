{"cell_type":{"691b9678":"code","5c301b8b":"code","4af39402":"code","59a63192":"code","d22e08ba":"code","e9f8f5f4":"code","fe813ef4":"code","f7fda36c":"code","488cce05":"code","7f904d26":"code","a87a7217":"code","65a4a7df":"code","d6f44009":"code","f66218e9":"code","40d9577e":"code","3b5f927f":"code","adf5858b":"code","a28e4cee":"code","faa20a3a":"code","e1d6e7c2":"code","95efb19b":"code","cb6173de":"code","a59bfe52":"code","bb244684":"code","c3f50ed5":"code","a5761987":"code","914b7cad":"code","104c5a74":"code","6a0d8fda":"code","d960d603":"code","72fde02a":"code","d0589fa7":"code","3cda3017":"markdown","04a380fd":"markdown","a206b420":"markdown"},"source":{"691b9678":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c301b8b":"#LOADING DATASET\nimport zipfile\nz=zipfile.ZipFile('\/kaggle\/input\/movie-review-sentiment-analysis-kernels-only\/train.tsv.zip')\ntrain = pd.read_csv(z.open('train.tsv'),delimiter='\\t')","4af39402":"train.head()","59a63192":"# REMOVING EXTRA SPACES\n\ndef remove_space(text):\n    text=text.strip()\n    text=text.split()\n    text=[i.lower() for i in text]\n    return ' '.join(text)\n","d22e08ba":"# TOKENIZATION\nimport nltk\nnltk.download('punkt')\n\nfrom nltk.tokenize import word_tokenize\ndef tokenize(text):\n    tokens=word_tokenize(text)\n    return tokens\n","e9f8f5f4":"# CONTRACTION MAPPING (CHANGE SHORTHAND WORD TO FULL)\nimport itertools\n\ncontraction = {\n\"'cause\": 'because',\n',cause': 'because',\n';cause': 'because',\n\"ain't\": 'am not',\n'ain,t': 'am not',\n'ain;t': 'am not',\n'ain\u00b4t': 'am not',\n'ain\u2019t': 'am not',\n\"aren't\": 'are not',\n'aren,t': 'are not',\n'aren;t': 'are not',\n'aren\u00b4t': 'are not',\n'aren\u2019t': 'are not',\n\"I'd\"   : 'I had',\n\"n't\"   :  'not',\n \"'d\"  :  'had',\n\"hv'v\":   'have it'\n}\n\ndef mapping_replacer(x, dic=contraction):\n    for word in dic.keys():\n        if \" \" + word + \" \" in x:\n            x = x.replace(\" \" + word + \" \", \" \" + dic[word] + \" \")\n        elif word in x:\n            x=x.replace(word,dic[word])    \n    return word_tokenize(x)\ndef mapping(tokenize_sent,dic=contraction):\n    return list(itertools.chain(*[mapping_replacer(word) for word in tokenize_sent]))  # flatting array to shape(-1,) \n                                                                                       #Itertools.chain for flatting","fe813ef4":"# stemming\nfrom nltk.stem import SnowballStemmer\ndef stemming(word):\n    s=SnowballStemmer('english')\n    return s.stem(word)\ndef stem_process(list_of_word):\n    return [stemming(word) for word in list_of_word]","f7fda36c":"#stopword \nfrom nltk.corpus import stopwords \ndef remove_stopword(list_of_word):\n    stop_words = set(stopwords.words('english'))\n    filtered_list_of_word = [w for w in list_of_word if w not in stop_words] \n    return filtered_list_of_word\n    ","488cce05":"# full preprocessing steps (use of all above functions)\n\ndef preprocessing_steps(batch_of_text):\n    process = [remove_space(text) for text in batch_of_text]\n    tokenize_sents = [tokenize(text) for text in process]\n    mapped_sents = [mapping(tokenize_sent) for tokenize_sent in tokenize_sents]\n    stopped = [remove_stopword(list_of_word) for list_of_word in mapped_sents]\n    stemmed = [stem_process(list_of_word) for list_of_word in stopped]\n    return stemmed\n    \n    \n    ","7f904d26":"# vocab creation and giving word to unique id\ndef create_vocab(batch):\n    vocab =['PADPAD','UNKUNK'] + list(set(itertools.chain(*batch)))\n    n_tokens=len(vocab)\n    word_to_id={}\n    id_to_word={}\n    for i,j in enumerate(vocab):\n        word_to_id[j]=i\n        id_to_word[i]=j\n    return vocab,word_to_id,id_to_word,n_tokens","a87a7217":"# Converting sentences to matrix representation \n\ndef to_mat(batch,word_to_id):\n    mat=[]\n    for i in batch:\n        mat1=[]\n        for j in i:\n            try:\n                mat1.append(word_to_id[j])\n            except:\n                mat1.append(1)\n        mat.append(mat1)\n    return mat    ","65a4a7df":"# Picking up 10000 rows of sample from training data for testing  \nX=train.Phrase.values[:]\ny=train.Sentiment.values[:]\nfrom sklearn.model_selection import train_test_split\nX_train,X_valid,y_train,y_valid=train_test_split(X,y,test_size=0.20,random_state=0,stratify=y)","d6f44009":"print(\"X_train -----------------------------------------------------------\")\nprint(X_train[:5])\nprint(\"X_valid -------------------------------------------------------------------------\")\nprint(X_valid[:5])\nprint(\"y_train --------------------------------------------------------------------------\")\nprint(y_train[:5])\nprint(\"y_valid -------------------------------------\")\nprint(y_valid[:5])","f66218e9":"# preprocessing steps\n\nX_train=preprocessing_steps(X_train)\nvocab,word_to_id,id_to_word,n_tokens = create_vocab(X_train)\nX_train = to_mat(X_train,word_to_id)\nX_valid = preprocessing_steps(X_valid)\nX_valid = to_mat(X_valid,word_to_id)","40d9577e":"print(n_tokens)\nprint(\"X_train -----------------------------------------------------------\")\nprint(X_train[:5])\nprint(\"X_valid -------------------------------------------------------------------------\")\nprint(X_valid[:5])\nprint(\"y_train --------------------------------------------------------------------------\")\nprint(y_train[:5])\nprint(\"y_valid -------------------------------------\")\nprint(y_valid[:5])","3b5f927f":"import tensorflow as tf\nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense,LSTM,Embedding,Dropout\nfrom keras.layers import Input","adf5858b":"# post padding with 0 \n\nX_train=tf.keras.preprocessing.sequence.pad_sequences(\n    X_train, maxlen=10, dtype='int32', padding='post',\n    value=0.0)\nX_valid=tf.keras.preprocessing.sequence.pad_sequences(\n    X_valid, maxlen=10, dtype='int32', padding='post',\n    value=0.0)","a28e4cee":"print(\"X_train -----------------------------------------------------------\")\nprint(X_train[:5])\nprint(\"X_valid -------------------------------------------------------------------------\")\nprint(X_valid[:5])","faa20a3a":"# convert labels(sentiments range 1 - 5) to one hot \ny_train=np.array(tf.keras.backend.one_hot(y_train,num_classes=5))\ny_valid=np.array(tf.keras.backend.one_hot(y_valid,num_classes=5))","e1d6e7c2":"print(\"y_train --------------------------------------------------------------------------\")\nprint(y_train[:5])\nprint(\"y_valid -------------------------------------\")\nprint(y_valid[:5])","95efb19b":"# # Simple lstm model for testing\n\n# keras.backend.clear_session()\n# model1=Sequential()\n# model1.add(Embedding(n_tokens,10))\n# model1.add(LSTM(10,return_sequences=False))\n# model1.add(Dense(5,activation='softmax'))\n# model1.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n# model1.summary()\n# print(model1.input_shape)\n# print(model1.output_shape)","cb6173de":"# model1.fit(X_train,y_train,batch_size=32,validation_data=[X_valid,y_valid],epochs=5)","a59bfe52":"tf.keras.backend.clear_session()\ninputL=tf.keras.Input(shape=(None,))\nembeddingL=tf.keras.layers.Embedding(n_tokens,100)(inputL)\nlstmL1=tf.keras.layers.LSTM(300,return_sequences=True,activation='relu')(embeddingL)\nbn1=tf.keras.layers.BatchNormalization(axis = -1, name = 'bn1')(lstmL1)\ndropout1=tf.keras.layers.Dropout(0.5)(bn1)\nlstmL2=tf.keras.layers.LSTM(300,return_sequences=False,activation='relu')(dropout1)\nbn2=tf.keras.layers.BatchNormalization(axis = -1, name = 'bn2')(lstmL2)\ndropout2=tf.keras.layers.Dropout(0.5)(bn2)\ndenseL2=tf.keras.layers.Dense(100,activation='relu')(dropout2)\ndenseL1=tf.keras.layers.Dense(5,activation='sigmoid')(denseL2)\nmodel=tf.keras.Model(inputs=inputL,outputs=denseL1)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nprint(model.summary())\nprint(model.input_shape)\nprint(model.output_shape)","bb244684":"model.fit(X_train,y_train,batch_size=64,validation_data=[X_valid,y_valid],epochs=20)","c3f50ed5":"sm=['worst at all','good movie','best quality having lot of fun','seems fine','worthless give it to 0']\n# sm=['good but not too much' 'hello this is good']\nsm = preprocessing_steps(sm)\nsm = to_mat(sm,word_to_id)\n                 \nsm=tf.keras.preprocessing.sequence.pad_sequences(\n    sm, maxlen=10, dtype='int32', padding='post',\n    value=0.0)\nprint(sm)","a5761987":"# print(model1.predict(sm))\n# print(np.argmax(model1.predict(sm),axis=1))","914b7cad":"print(model.predict(sm))\nprint(np.argmax(model.predict(sm),axis=1))","104c5a74":"tz=zipfile.ZipFile('\/kaggle\/input\/movie-review-sentiment-analysis-kernels-only\/test.tsv.zip')\ntest = pd.read_csv(tz.open('test.tsv'),delimiter='\\t')","6a0d8fda":"tx=test.Phrase.values\nptx=preprocessing_steps(tx)\nmtx=to_mat(ptx,word_to_id)\npmtx=tf.keras.preprocessing.sequence.pad_sequences(\n    mtx, maxlen=10, dtype='int32', padding='post',\n    value=0.0)\n","d960d603":"Sentiment0=pd.DataFrame((np.argmax(model.predict(pmtx),axis=1)).astype('int32').reshape(-1,1),columns=['Sentiment'])\ndf=pd.concat([test,Sentiment0],axis=1)\ndf=df[['PhraseId','Sentiment']]\ndf.to_csv('submission.csv',index=False)","72fde02a":"df.Sentiment.value_counts()","d0589fa7":"# # spelling correction\n# def edits1(word):\n#     letters='abcdefghijklmnopqrstuvwxyz'\n#     splits =[(word[:i],word[i:]) for i in range(len(word)+1)]\n#     deletes=[ L+R[1:]  for L,R in splits if R]\n#     transposes = [L + R[1] +R[0] + R[2:] for L,R in splits if len(R)>1]\n#     replaces = [L + c + R[1:] for L,R in splits if R for c in letters]\n#     inserts = [L + c + R  for L,R in splits for c in letters]\n#     return (set(deletes+transposes+replaces+inserts))\n# def edits2(word):\n#     return (e2 for e1 in edits1(word) for e2 in edits1(e1))","3cda3017":"**Again training model with different model**","04a380fd":"# IF YOU WANT TO RUN BELOW CODE AGAIN THEN START FROM HERE\nbecause of use of same variable over again and again might give error","a206b420":"**OUT OF CODE**"}}