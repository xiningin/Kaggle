{"cell_type":{"4e4dbd5b":"code","d3c6b6be":"code","f7f61164":"code","826ba0c8":"code","d755028f":"code","3f4dbe7b":"code","c275a089":"code","88d5bf2d":"code","d200b771":"code","01a2f042":"code","e3efe9b9":"code","f4f35a79":"code","d9275efe":"code","68b27388":"code","e39c3327":"code","d88b122e":"code","2d8e0646":"code","92e469c5":"code","a6dfc255":"code","aed88084":"code","193329bf":"code","67c0a63d":"code","251e6f0f":"code","6249fb26":"code","7839550c":"code","0053ab88":"code","4e2e3b7e":"code","c187c230":"code","62e09b5e":"code","c1ae954a":"code","ed449a3c":"code","c3cee5fd":"code","3804999d":"markdown","b1c9ddc6":"markdown","52c5d8ba":"markdown","ec20bbfb":"markdown","bdc3799a":"markdown","617917e3":"markdown","49a71fe2":"markdown"},"source":{"4e4dbd5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d3c6b6be":"import calendar\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","f7f61164":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","826ba0c8":"path = \"\/kaggle\/input\/ufcdata\/raw_total_fight_data.csv\"\ndf_total_fight_data = pd.read_csv(filepath_or_buffer=path, sep=';')\ndf_total_fight_data.shape","d755028f":"df_total_fight_data.head()","3f4dbe7b":"def get_success_percentage(obj):\n    obj = str(obj).strip().split('of') # Returns list of length 3\n    landed = int(obj[0])\n    attempted = int(obj[-1])\n    if attempted == 0:\n        return -1 # To indicate no attempts\n    success_percentage = round(landed * 100 \/ attempted, 2)\n    return success_percentage\n\n\ndef alter_percentages(obj):\n    obj = str(obj)[:-1]\n    obj = float(obj)\n    return obj\n\n\ndef extract_minutes(obj):\n    \"\"\" Helper function \"\"\"\n    obj = str(obj).split(':')\n    secs = int(obj[0]) * 60 + int(obj[-1])\n    mins = round(secs \/ 60, 2)\n    return mins\n\n\ndef day_of_week(date):\n    \"\"\"\n    Takes in Pandas datetime, and returns the name of day of that date.\n    \"\"\"\n    day_index = date.weekday()\n    day = calendar.day_name[day_index]\n    return day\n\n\ndef alter_date(date_obj):\n    month_mapper = {\n        'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, 'July': 7,\n        'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12\n    }\n    mmdd, yy = str(date_obj).split(',')\n    mm, dd = mmdd.split(' ')\n    yy = str(yy).strip()\n    dd = str(dd)\n    mm = str(month_mapper[mm])\n    final_date = pd.to_datetime(\"{}\/{}\/{}\".format(mm, dd, yy))\n    return final_date\n\n\ndef map_categories(df, column):\n    df_temp = df.copy()\n    mapper_dict = dict()\n    new_column = column + '_'\n    categories = df_temp[column].dropna().unique().tolist()\n    for i, category in enumerate(categories):\n        mapper_dict[category] = i+1\n    df_temp[new_column] = df_temp[column].map(mapper_dict)\n    df_temp[new_column] = df_temp[new_column].astype(str)\n    return df_temp\n\n\ndef extract_country(obj):\n    country = str(obj).split(',')[-1].strip().upper()\n    return country","c275a089":"def engineer_features(df_raw):\n    df_temp = df_raw.copy()\n    df_temp.dropna(inplace=True)\n    df_temp['date'] = df_temp['date'].apply(alter_date)\n    \n    # Success percentages\n    features = ['R_KD', 'B_KD', 'R_TD', 'B_TD', 'R_HEAD', 'B_HEAD', 'R_BODY', 'B_BODY', 'R_LEG', 'B_LEG',\n                'R_SIG_STR.', 'B_SIG_STR.', 'R_TOTAL_STR.', 'B_TOTAL_STR.', 'R_CLINCH', 'B_CLINCH',\n                'R_GROUND', 'B_GROUND']\n    for feature in features:\n        new_feature = feature + '_success_percent'\n        df_temp[new_feature] = df_temp[feature].apply(get_success_percentage)\n    df_temp.drop(labels=features, axis=1, inplace=True)\n    \n    # Clean-up percentage signs (inplace)\n    features = ['R_SIG_STR_pct', 'B_SIG_STR_pct', 'R_TD_pct', 'B_TD_pct']\n    for feature in features:\n        df_temp[feature] = df_temp[feature].apply(alter_percentages)\n    \n    # Calculate minutes per fight\n    fight_mins = ((df_temp['last_round'] - 1) * 5) + df_temp['last_round_time'].apply(extract_minutes)\n    df_temp['fight_mins'] = fight_mins\n    \n    # Alter 'Winner' column into 'Result' column with [Red, Blue, Draw]\n    condn_red_wins = (df_temp['Winner'] == df_temp['R_fighter'])\n    condn_blue_wins = (df_temp['Winner'] == df_temp['B_fighter'])\n    condn_draw = ~ (condn_red_wins | condn_blue_wins)\n    \n    df_red_wins = df_temp.loc[condn_red_wins, :].copy()\n    df_red_wins['Result'] = 'Red'\n    df_blue_wins = df_temp.loc[condn_blue_wins, :].copy()\n    df_blue_wins['Result'] = 'Blue'\n    df_draws = df_temp.loc[condn_draw, :].copy()\n    df_draws['Result'] = 'Draw'\n    df_results_added = pd.concat(objs=[df_red_wins, df_blue_wins, df_draws], ignore_index=True, sort=False)\n    df_results_added.sort_values(by='date', ascending=False, inplace=True)\n    df_results_added.reset_index(drop=True, inplace=True)\n    \n    # Get few additional features and add categorical mapping\n    df_results_added['day_of_week'] = df_results_added['date'].apply(day_of_week)\n    df_results_added['country'] = df_results_added['location'].apply(extract_country)\n    df_results_added = map_categories(df=df_results_added, column='day_of_week')\n    df_results_added = map_categories(df=df_results_added, column='country')\n    df_results_added = map_categories(df=df_results_added, column='win_by')\n\n    features_to_drop = ['R_DISTANCE', 'B_DISTANCE', 'win_by', 'last_round', 'last_round_time', 'Format', 'Referee',\n                        'date', 'location', 'Fight_type', 'Winner', 'day_of_week', 'country']\n    if features_to_drop:\n        df_results_added.drop(labels=features_to_drop, axis=1, inplace=True)\n    return df_results_added","88d5bf2d":"%%time\ndf_examples = engineer_features(df_raw=df_total_fight_data)","d200b771":"df_examples.head()","01a2f042":"df_examples.shape","e3efe9b9":"to_drop = ['R_fighter', 'B_fighter', 'day_of_week_', 'country_', 'win_by_']\nif to_drop:\n    df_examples.drop(labels=to_drop, axis=1, inplace=True)","f4f35a79":"df_examples.shape","d9275efe":"df_examples.head()","68b27388":"holdout = 100\ndf_examples = df_examples[df_examples['Result'] != 'Draw']\ndf_holdout = df_examples.head(holdout)\ndf_examples = df_examples.tail(len(df_examples) - holdout)","e39c3327":"df_examples.shape, df_holdout.shape","d88b122e":"if df_examples.isnull().sum().sum() == 0:\n    print(\"No missing values!\")\nelse:\n    print(\"There are missing values!\")","2d8e0646":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm, naive_bayes\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nimport joblib","92e469c5":"X = df_examples.drop(labels=['Result'], axis=1)\ny = df_examples['Result'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Feature Scaling\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","a6dfc255":"classifier = RandomForestClassifier(n_estimators=30, criterion='gini', max_depth=30)\nmodel = classifier.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nmodel_accuracy = accuracy_score(y_true=y_test, y_pred=y_pred, normalize=True) * 100\nmodel_accuracy = round(model_accuracy, 2)\nmodel_accuracy","aed88084":"scores = cross_val_score(estimator=model, X=X, y=y, cv=20, scoring='accuracy')\nscores.mean()","193329bf":"param_grid = dict(\n    n_estimators=np.arange(10,100+1,10),\n    criterion=['gini', 'entropy'],\n    max_depth=np.arange(10,100+1,10),\n    min_samples_split=[1,2,3]\n)\n\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, cv=10, scoring='accuracy')","67c0a63d":"grid.estimator","251e6f0f":"classifier = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n                       max_depth=30, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=30,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)\nmodel = classifier.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nmodel_accuracy = accuracy_score(y_true=y_test, y_pred=y_pred, normalize=True) * 100\nmodel_accuracy = round(model_accuracy, 2)\nmodel_accuracy","6249fb26":"cm = confusion_matrix(y_true=y_test, y_pred=y_pred)\ncm","7839550c":"df_holdout['Result'].value_counts()","0053ab88":"df_holdout_X = df_holdout.drop(labels='Result', axis=1)\n\nsc = StandardScaler()\nX_holdout = sc.fit_transform(df_holdout_X)\n\ny_pred = model.predict(X_holdout)\n\nmodel_accuracy = accuracy_score(y_true=df_holdout['Result'].values, y_pred=y_pred, normalize=True) * 100\nmodel_accuracy = round(model_accuracy, 2)\nmodel_accuracy","4e2e3b7e":"def get_feature_importances(model, df):\n    feature_column = 'Feature'\n    importance_column = 'Importance_Percentage'\n    data = {\n        feature_column: df.columns,\n        importance_column: model.feature_importances_\n    }\n    df_feature_importances = pd.DataFrame(data=data).sort_values(by=importance_column, ascending=False)\n    df_feature_importances[importance_column] = df_feature_importances[importance_column] * 100\n    df_feature_importances[importance_column] = df_feature_importances[importance_column].apply(round, args=[2])\n    df_feature_importances.reset_index(drop=True, inplace=True)\n    return df_feature_importances","c187c230":"feat_importance = get_feature_importances(model=model, df=X)\nfeat_importance.head(10)","62e09b5e":"feat_importance.head(10).set_index('Feature').plot(kind='barh', color='purple')\nplt.show()","c1ae954a":"%%time\n\n# Testing different algorithms\/models\nuse_cross_val = True\ndict_model_accuracy = dict()\nalgorithms = ['knn', 'rfc', 'logistic_regression', 'svm', 'naive_bayes']\nfor algorithm in algorithms:\n    if algorithm == 'knn':\n        classifier = KNeighborsClassifier(n_neighbors=55, metric='minkowski', p=2)\n    elif algorithm == 'rfc':\n        classifier = RandomForestClassifier(n_estimators=30, criterion='gini', max_depth=30)\n    elif algorithm == 'logistic_regression':\n        classifier = LogisticRegression(solver='sag')\n    elif algorithm == 'svm':\n        classifier = svm.SVC(kernel='rbf')\n    elif algorithm == 'naive_bayes':\n        classifier = naive_bayes.GaussianNB()\n\n    model = classifier.fit(X_train, y_train)\n    \n    if use_cross_val:\n        # Evaluate with k-fold cross-validation\n        scores = cross_val_score(estimator=model, X=X, y=y, cv=20, scoring='accuracy')\n        dict_model_accuracy[algorithm] = scores.mean()\n    else:        \n        # Evaluate with just the model\n        y_pred = model.predict(X_test)\n        # cm = confusion_matrix(y_test, y_pred)\n        model_accuracy = accuracy_score(y_true=y_test, y_pred=y_pred, normalize=True) * 100\n        model_accuracy = round(model_accuracy, 2)\n        dict_model_accuracy[algorithm] = model_accuracy\n#\nrename_dict = {\n    'index': 'algorithm',\n    0: 'accuracy_percentage'\n}\ndf_accuracies = pd.DataFrame(dict_model_accuracy, index=[0]).T.reset_index().rename(mapper=rename_dict, axis=1)\ndf_accuracies = df_accuracies.sort_values(by='accuracy_percentage', ascending=False).reset_index(drop=True)","ed449a3c":"df_accuracies","c3cee5fd":"df_accuracies.set_index('algorithm').plot(kind='barh', color='orange')\nplt.show()","3804999d":"# Feature Engineering and Data Cleaning","b1c9ddc6":"# Feature Engineering pipeline","52c5d8ba":"# Model selection via experimentation\n\n### Testing different algorithms\/models","ec20bbfb":"# Feature selection and Modeling","bdc3799a":"# Hyperparameter tuning","617917e3":"# Create a hold-out dataset before modeling","49a71fe2":"# Make predictions on holdout dataset"}}