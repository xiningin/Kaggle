{"cell_type":{"4ee86dd9":"code","23273c3c":"code","2d08dec3":"code","f40ed85c":"code","223a817b":"code","e0c983ae":"code","d5fc1159":"code","d638cf5f":"code","bae32d5f":"code","680bec3f":"code","7a51db0b":"code","f9509406":"code","77224e72":"code","7b6cfb5c":"code","86034644":"code","def1893e":"code","2835eb1c":"code","2f77525c":"code","0a69f2af":"code","6ec42386":"code","80b2b171":"code","f82225bb":"code","9cdd29d7":"code","4d4cf595":"code","972b80f8":"code","28c76d57":"code","7930bf7b":"code","78f64b87":"code","6cc26f30":"code","17f0c6b9":"code","a996ee92":"code","d2af5674":"code","c648313e":"code","2993850f":"code","e6891981":"code","73e24476":"code","30d33348":"code","bca10b44":"code","961bcc91":"code","3f9d0623":"code","68d32d2c":"code","921519f0":"code","ef12676b":"code","a992f5f2":"code","89104447":"code","cf293aca":"code","ad43b9ce":"code","f7688ed0":"code","bf68b6f4":"code","8ec1c787":"code","430ac5d4":"code","036d1c6a":"code","4b2bb1ba":"code","c36cd133":"code","726a194b":"code","e970189a":"code","5ce2111e":"markdown","c6a792fc":"markdown","966d4c39":"markdown","2bbf215c":"markdown"},"source":{"4ee86dd9":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.utils import shuffle","23273c3c":"df = pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndf.head(10)","2d08dec3":"df.columns","f40ed85c":"df.shape","223a817b":"df.info()","e0c983ae":"df.TotalCharges.values","d5fc1159":"df.MonthlyCharges.values","d638cf5f":"df[pd.to_numeric(df.TotalCharges,errors=\"coerce\").isnull()]","bae32d5f":"df_new = df.copy()\ndf_new.head()","680bec3f":"df_new.shape","7a51db0b":"df_new[pd.to_numeric(df_new.TotalCharges,errors=\"coerce\").isnull()]","f9509406":"df_new = df_new[df_new.TotalCharges!=\" \"]\ndf_new.shape","77224e72":"df_new.TotalCharges = pd.to_numeric(df_new.TotalCharges)","7b6cfb5c":"df_new.info()","86034644":"df_new.drop(\"customerID\",axis=\"columns\",inplace=True)","def1893e":"df_new[df_new.Churn==\"No\"]","2835eb1c":"def correlation(dataset, threshold):\n    col_corr = set() #set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range (i):\n            if abs(corr_matrix.iloc[i,j])> threshold: #we are interested in absolute coeff value\n                colname = corr_matrix.columns[i] #getting the name of column\n                col_corr.add(colname)\n    return col_corr\n","2f77525c":"corr_features=correlation(df_new,0.8)\nlen(set(corr_features))\n","0a69f2af":"corr_features","6ec42386":"df_new.drop(corr_features, axis=1,inplace = True)","80b2b171":"df_new.columns","f82225bb":"def print_unique_col_values(df):\n    for column in df_new:\n        if df_new[column].dtypes==\"object\":\n            print(f'{column}: {df_new[column].unique()}')","9cdd29d7":"df_new.replace(\"No internet service\",\"No\",inplace=True)\ndf_new.replace(\"No phone service\",\"No\",inplace=True)","4d4cf595":"print_unique_col_values(df_new)","972b80f8":"yes_no_columns=[\"Partner\",\"Dependents\",\"PhoneService\",\"MultipleLines\",\"OnlineSecurity\",\"OnlineBackup\",\"DeviceProtection\",\n               \"TechSupport\",\"StreamingTV\",\"StreamingMovies\",\"PaperlessBilling\",\"Churn\"]\n\nfor col in yes_no_columns:\n    df_new[col].replace({\"Yes\":1,\"No\":0},inplace=True)\n    ","28c76d57":"for col in df_new:\n    print(f'{col}: {df_new[col].unique()}')","7930bf7b":"df_new[\"gender\"].replace({\"Female\":1,\"Male\":0},inplace=True)","78f64b87":"df1=pd.get_dummies(data=df_new,columns=[\"InternetService\",\"Contract\",\"PaymentMethod\"])","6cc26f30":"df1.columns","17f0c6b9":" df1 =df1.drop_duplicates()","a996ee92":"df1=shuffle(df1)\ndf1","d2af5674":"cols_to_scale = [\"tenure\",\"MonthlyCharges\"]\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\ndf1[cols_to_scale]= scaler.fit_transform(df1[cols_to_scale])","c648313e":"X= df1.drop(\"Churn\",axis=\"columns\")\nY= df1[\"Churn\"]","2993850f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.2,random_state=5)","e6891981":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","73e24476":"y_train.value_counts()","30d33348":"from imblearn import over_sampling\nfrom imblearn.over_sampling import SMOTE","bca10b44":"sm = SMOTE(random_state=12)\nX_train, y_train = sm.fit_sample(X_train,y_train)","961bcc91":"print(X_train.shape)\nprint(y_train.shape)","3f9d0623":"y_train.value_counts()","68d32d2c":"25,30,40,40,40,30,20,15","921519f0":"model = keras.Sequential()\nmodel.add(keras.layers.Dense(20,activation=\"elu\",kernel_initializer= \"he_normal\",input_dim = X_train.shape[1]))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.Dense(20,activation=\"elu\",kernel_initializer= \"he_normal\"))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.Dense(2,activation=\"softmax\"))\n\nmodel.compile(optimizer=keras.optimizers.Adam(lr=0.01,decay=1e-4),loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])","ef12676b":"history = model.fit(X_train, y_train, epochs=30, validation_split= 0.2, batch_size= 128)","a992f5f2":"pd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\nplt.show()","89104447":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","cf293aca":"pred_y = model.predict(X_test)","ad43b9ce":"pred_y","f7688ed0":"y_test.value_counts()","bf68b6f4":"rounded_prediction= np.argmax(pred_y,axis=1)","8ec1c787":"rounded_prediction","430ac5d4":"cm= confusion_matrix(y_test,y_test)\ncm","036d1c6a":"cm= confusion_matrix(rounded_prediction,y_test)\ncm","4b2bb1ba":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                        normalize=False,\n                        title='Confusion matrix',\n                        cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n            horizontalalignment=\"center\",\n            color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","c36cd133":"cm_plot_labels = ['no_Churn','Churn']\n\n\nplot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='Confusion Matrix')\n\n","726a194b":"print(classification_report(rounded_prediction,y_test))","e970189a":"model.save(\"churn_model.h5\")","5ce2111e":"Now I have to improve this model more.","c6a792fc":"**After find the best number of neurons and layers with the help of keras Tuner**, let's built our model.","966d4c39":"# model built","2bbf215c":"Our model got 79% accuracy in our test case and predict 251 customers out of 386 correctly those leave the company in a year."}}