{"cell_type":{"27c3e42a":"code","16aad7fc":"code","33e7aca0":"code","23b48825":"code","6900b88f":"code","475c56a2":"code","2862e44b":"code","93beefce":"code","0c297bbd":"code","6abbab7d":"code","c3839cc5":"code","90cd52fe":"code","f0ceb665":"code","fb917a5a":"code","ea98e4da":"code","233eb82e":"code","98a019ca":"markdown","4e8b437e":"markdown","b7097fa2":"markdown","95341027":"markdown","9b32620d":"markdown","4f1e7784":"markdown","0b931eeb":"markdown","318e9a30":"markdown","de016088":"markdown","992a374f":"markdown","5fd3c386":"markdown","45e09552":"markdown","bf6a01d1":"markdown"},"source":{"27c3e42a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16aad7fc":"#Libraries\nfrom matplotlib import pyplot as plt\nimport pandas as pd\n\ndata_url = '..\/input\/home-data-for-ml-course\/train.csv'\n\ndf = pd.read_csv(data_url, index_col=0) #index_col=0 means first column will become index, otherwise specify with column name 'example name'\n\n\nprint (df.head())\nprint (df.dtypes)\nprint (df.shape)\nprint (df.columns)\n\n\n","33e7aca0":"df=df.select_dtypes(include=['number'])\n","23b48825":"df.describe()","6900b88f":"corr = df.corr()\nprint(corr)\n\nimport statsmodels.api as sm\nsm.graphics.plot_corr(corr, xnames=list(corr.columns))\nplt.show()","475c56a2":"df_2 = df[['OverallQual','TotalBsmtSF','1stFlrSF','GrLivArea','GarageCars','GarageArea','SalePrice']]\n#print (df_2['SalePrice'])","2862e44b":"df_2.isna().sum()\nprint (df_2.shape)\ndf_2.dropna(axis = 0,how = 'any' ,inplace = True)\ndf_2.isna().sum()\nprint (df_2.shape)","93beefce":"\nX = df_2[['OverallQual','TotalBsmtSF','1stFlrSF','GrLivArea','GarageCars','GarageArea']].values\ny = df_2['SalePrice'].values\n#print (X)\n#print (y.shape)\n","0c297bbd":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nprint (X)\nscaling = MinMaxScaler().fit(X)\nX = scaling.transform(X)\nprint (X)\n","6abbab7d":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=5) \nkf.get_n_splits(X)\nprint(kf)\nprint (kf.split(X))\n\nfor train_index, test_index in kf.split(X):\n print('TRAIN:', train_index, 'TEST:', test_index)\n X_train, X_test = X[train_index], X[test_index]\n y_train, y_test = y[train_index], y[test_index]\n\n","c3839cc5":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X_train, y_train)\ny_predict=reg.predict(X_test)\ntabulate = pd.DataFrame({'predict':y_predict, 'actual':y_test})\nprint (tabulate)\nprint (reg.coef_)\n\ntemp2=tabulate.head(21)\ntemp2.plot(kind='bar',figsize=(10,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","90cd52fe":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(reg, X_train, y_train)\nprint(\"Cross-validation scores: {}\".format(scores))","f0ceb665":"print ('Model score =', reg.score(X_train, y_train))\n\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nprint ('Mean of y_test =',y_test.mean())\nprint('MS error =', mean_squared_error(y_predict,y_test))\nprint('RMS error =', sqrt(mean_squared_error(y_predict,y_test)))","fb917a5a":"test_url = '..\/input\/home-data-for-ml-course\/test.csv'\ndf_test = pd.read_csv(test_url, index_col=0)\nind=df_test.index\n#print (df_test.dtypes)\ndf_test=df_test.select_dtypes(include=['number'])\n#print (df_test.dtypes)\n\n#print(df_test.isna().sum())\n\nmedian=df_test['LotFrontage'].median()\ndf_test['LotFrontage'].fillna(median, inplace=True)\n\nmedian=df_test['MasVnrArea'].median()\ndf_test['MasVnrArea'].fillna(median, inplace=True)\n\nmedian=df_test['BsmtFinSF1'].median()\ndf_test['BsmtFinSF1'].fillna(median, inplace=True)\n\nmedian=df_test['BsmtFinSF2'].median()\ndf_test['BsmtFinSF2'].fillna(median, inplace=True)\n\nmedian=df_test['BsmtUnfSF'].median()\ndf_test['BsmtUnfSF'].fillna(median, inplace=True)\n\nmedian=df_test['TotalBsmtSF'].median()\ndf_test['TotalBsmtSF'].fillna(median, inplace=True)\n\nmedian=df_test['BsmtFullBath'].median()\ndf_test['BsmtFullBath'].fillna(median, inplace=True)\n\nmedian=df_test['BsmtHalfBath'].median()\ndf_test['BsmtHalfBath'].fillna(median, inplace=True)\n\nmedian=df_test['GarageYrBlt'].median()\ndf_test['GarageYrBlt'].fillna(median, inplace=True)\n\nmedian=df_test['GarageCars'].median()\ndf_test['GarageCars'].fillna(median, inplace=True)\n\nmedian=df_test['GarageArea'].median()\ndf_test['GarageArea'].fillna(median, inplace=True)\n\n#df_test.dropna(axis = 0, how ='any', inplace = True)\n#df_test.isna().sum()\nprint (df_test.shape)\n#print (df.shape)\n\ndf_2 = df_test[['OverallQual','TotalBsmtSF','1stFlrSF','GrLivArea','GarageCars','GarageArea']]\nX = df_2[['OverallQual','TotalBsmtSF','1stFlrSF','GrLivArea','GarageCars','GarageArea']].values\n\n\n#X=df_test.iloc[:,0:36].values\n#y=df_test.iloc[:,36].values\n\n\nX = scaling.transform(X)\n\n","ea98e4da":"y_predict=reg.predict(X)\n","233eb82e":"df_save = pd.DataFrame({'Id':ind,'SalePrice':y_predict})\ndf_save.to_csv(\"predict.csv\") ","98a019ca":"Save the predicted results as csv","4e8b437e":"Using test csv to make another prediction. Replace the NA using respective median.","b7097fa2":"Using KFold for cross validate","95341027":"Data cleansing to drop NA row","9b32620d":"Define Libraries and read csv","4f1e7784":"Determine the correlation between SalePrice and other features","0b931eeb":"Train linear regression model and make prediction.Then, visualize the first 20 sample.","318e9a30":"Select the numerical features ","de016088":"Make prediction using model trained previously","992a374f":"Select the desired features\/targets (by choosing features which correlation >0.6 respective to SalePrice)","5fd3c386":"Find the score of cross validation","45e09552":"Score of trained model ","bf6a01d1":"Input as X & y for Linear Regression"}}