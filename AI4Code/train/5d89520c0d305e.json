{"cell_type":{"5dc78a44":"code","fa809e57":"code","b67a35e2":"code","91c3cca7":"code","b09b3875":"code","f522468a":"code","f4f8e508":"code","0a492eed":"code","72ee7d44":"code","05c1cc37":"code","26ea5ab3":"code","c0beefd0":"code","58d7a253":"code","62b82f4a":"code","3b80347d":"code","01eff8a4":"code","f3df7a78":"code","a1844b07":"code","0e42da10":"code","e82d305c":"code","a114d750":"code","ba9e5949":"code","58f1c189":"code","b09e981e":"code","e2d13f22":"code","1d2703a0":"code","d22d7034":"code","2010ab8e":"code","9b7fdfb7":"code","533df948":"code","71ee5d1a":"code","fa090b5c":"code","381eb32b":"code","b0445b0b":"code","2d32b3d9":"code","633a1c5b":"code","33c98a87":"code","fd94d6e7":"code","03dc1ce0":"code","b7fc176b":"code","f65ce770":"code","bc7a0c20":"code","1e011e0a":"markdown","fa5fbe62":"markdown","1c826d5e":"markdown","84fa4a7d":"markdown","15007372":"markdown","4fcaa181":"markdown","d3dda25f":"markdown","32b274e7":"markdown","c39d7bfb":"markdown","b9b45cdc":"markdown","125fc52e":"markdown"},"source":{"5dc78a44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom pandas import Grouper\nfrom pandas.plotting import lag_plot\nfrom pandas.plotting import autocorrelation_plot\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.tsa.ar_model import AutoReg\nfrom fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation\nfrom fbprophet.diagnostics import performance_metrics\nfrom fbprophet.plot import plot_cross_validation_metric\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa809e57":"data = pd.read_csv('https:\/\/raw.githubusercontent.com\/jbrownlee\/Datasets\/master\/daily-min-temperatures.csv', header=0, parse_dates=[0],index_col=0, squeeze=True)","b67a35e2":"data.head()","91c3cca7":"data.size","b09b3875":"type(data)","f522468a":"print(data['1987-01'])","f4f8e508":"data.describe()","0a492eed":"plt.figure(figsize=(20,10))\ndata.plot(style='k-')","72ee7d44":"plt.figure(figsize=(20,10))\ndata.plot(style='k.')","05c1cc37":"groups = data.groupby(Grouper(freq='A'))\nyears = pd.DataFrame()\nfor name,group in groups:\n    years[name.year] = group.values\nplt.figure(figsize=(10,6))\nyears.plot(subplots=True, legend=False)\nplt.show()","26ea5ab3":"data.hist()","c0beefd0":"data.plot(kind='kde')","58d7a253":"years.boxplot()","62b82f4a":"last_year = data['1990']\ngroups = last_year.groupby(Grouper(freq='M'))\nmonths = pd.concat([pd.DataFrame(x[1].values) for x in groups], axis=1)\nmonths.columns = range(1,13)\nmonths.boxplot()\n","3b80347d":"months\n","01eff8a4":"years","f3df7a78":"plt.figure(figsize=(10,6))\nplt.matshow(years.T,interpolation=None, aspect='auto')","a1844b07":"plt.figure(figsize=(10,6))\nplt.matshow(months,interpolation=None, aspect='auto')","0e42da10":"lag_plot(data)","e82d305c":"lag_plot(months)","a114d750":"autocorrelation_plot(data)","ba9e5949":"values = pd.DataFrame(data.values)\ndf = pd.concat([values.shift(1),values],axis=1)\ndf.columns = ['t-1','t+1']\ndf.head()","58f1c189":"X = df.values\ntrain_size = int(len(X)*0.7)\ntrain, test = X[1:train_size], X[train_size:]\ntrain_X,train_y = train[:,0],train[:,1]\ntest_X,test_y = test[:,0],test[:,1]\n","b09e981e":"def model_persistence(x):\n    return x\npred = list()\nfor x in test_X:\n    y1= model_persistence(x)\n    pred.append(y1)\n    \nerror = mean_squared_error(test_y,pred)\nprint('MSE : %.3f' % error)\n","e2d13f22":"plt.figure(figsize=(20,10))\nplt.plot(train_y)\nplt.plot([None for i in train_y]+[x for x in test_y])\nplt.plot([None for i in train_y]+[x for x in pred])\n\n","1d2703a0":"df.corr()","d22d7034":"plot_acf(data, lags=40)","2010ab8e":"X = data.values\ntrain,test = X[1:len(X)-7],X[len(X)-7:]\nmodel = AutoReg(train, lags=29)\nmodel_fit = model.fit()\ncoef = model_fit.params\nprint(coef)","9b7fdfb7":"pred = model_fit.predict(start= len(train), end=len(train)+len(test)-1, dynamic=False)\nfor x in range(len(pred)):\n    print('Predicted temperature is %f , while actual temp is %f'%(pred[x],test[x]))","533df948":"mse = mean_squared_error(pred,test)\nprint('MSE is %f' %mse)","71ee5d1a":"plt.plot(test)\nplt.plot(pred, color='red')","fa090b5c":"window = 29\nmodel = AutoReg(train, lags=29)\nmodel_fit = model.fit()\ncoef = model_fit.params\n# walk forward over time steps in test\nhistory = train[len(train)-window:]\nhistory = [history[i] for i in range(len(history))]\npredictions = list()\nfor t in range(len(test)):\n\tlength = len(history)\n\tlag = [history[i] for i in range(length-window,length)]\n\tyhat = coef[0]\n\tfor d in range(window):\n\t\tyhat += coef[d+1] * lag[window-d-1]\n\tobs = test[t]\n\tpredictions.append(yhat)\n\thistory.append(obs)\n\tprint('predicted=%f, expected=%f' % (yhat, obs))\nrmse = mean_squared_error(test, predictions)\nprint('Test RMSE: %.3f' % rmse)\n# plot\nplt.plot(test)\nplt.plot(predictions, color='red')\n","381eb32b":"data_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/jbrownlee\/Datasets\/master\/daily-min-temperatures.csv')\ndata_df = data_df.rename(columns = {'Date':'ds','Temp':'y'}, inplace=False)\ndata_df.head()","b0445b0b":"model = Prophet()\nmodel.fit(data_df)\n","2d32b3d9":"future = model.make_future_dataframe(periods=365)\nfuture.shape, data_df.shape","633a1c5b":"future.head(),data_df.head(),future.tail(),data_df.tail()","33c98a87":"forecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","fd94d6e7":"model.plot(forecast)","03dc1ce0":"model.plot_components(forecast)","b7fc176b":"df_cv = cross_validation(model, initial='730 days', period='180 days', horizon = '365 days')\ndf_cv.head()","f65ce770":"df_p = performance_metrics(df_cv)\ndf_p.head()","bc7a0c20":"fig = plot_cross_validation_metric(df_cv, metric='rmse')","1e011e0a":"# Introduction","fa5fbe62":"No we build our model and evaluate it:","1c826d5e":"We'll start with a naive model that forecasts the temperature the same as the lagged one.","84fa4a7d":"# TS Forecasting","15007372":"# Read the data as a series","4fcaa181":"Time series forecasting is an important area of machine learning that is often neglected.\n\nIt is important because there are so many prediction problems that involve a time component. These problems are neglected because it is this time component that makes time series problems more difficult to handle.\n\nIn this notebook, you will discover time series analysis and forecasting.\n\nCredits goes to https:\/\/machinelearningmastery.com\/\n\n\n","d3dda25f":"# Explore the TS","32b274e7":"Let's now try forecasting using Prophet model which is better in detecting seasonality, but first we have to read our data as a dataframe with date column name (ds) and the readings column -to be forecasted- is (y):","c39d7bfb":"Then we'll try forecasting with Autoreg model after studying the auto-correlations between temperatures. We previously did auto-correlation plot and lag-plot, but we'll also study it using .corr() method and acf plot.","b9b45cdc":"# Load Libraries","125fc52e":"# TS Analysis\/Visualization"}}