{"cell_type":{"c7cdb2d1":"code","c261a94f":"code","dfc35e63":"code","0091aeae":"code","e12e3be9":"code","35be2f1f":"code","09dcb6b5":"code","6593c678":"code","fc0acf72":"code","6c8e5b61":"code","ac3e0559":"code","c96e605c":"code","0c786127":"code","74692110":"code","5baae1ff":"code","82d3b2f8":"code","1431872c":"code","2aa9e555":"code","faaf1a98":"code","73d864c4":"code","691de758":"code","a7839c5e":"code","0a9c884f":"code","cdb2922c":"code","6ea0bdc0":"code","7d6588e8":"code","888a92b9":"code","446706f1":"code","e1d6c7d5":"code","02755c9d":"code","06a72192":"code","1fbd218e":"code","9f3a7533":"code","c938814d":"code","21cc19be":"code","62774d19":"code","10672f5f":"code","6d52a1c7":"code","e481dce4":"code","2a4163ea":"code","dcbd0a16":"code","d93d1f99":"code","b983ea29":"code","0fc2082c":"code","bacb7cc0":"code","fcf2446b":"code","6fa3e1a3":"code","d863b70a":"code","0961969b":"code","55a3d365":"code","a72fa954":"code","4a12d1cd":"code","f5ba2f76":"code","6db120dc":"code","bff79119":"code","5e9fd0a9":"code","c2da7c5a":"code","2f0b37e8":"code","673f8d09":"code","d6c77869":"code","eab5e067":"code","a83a3c29":"code","0795d3a3":"code","b3009a88":"code","cda12daf":"code","2483e69a":"code","8de6fc5c":"code","90d11a03":"code","0e7f5da7":"code","4f9ab5b1":"code","79664840":"code","dd5f3e34":"code","da999b31":"code","007459b0":"code","4d4942b4":"code","05389fcb":"code","ded1e6aa":"code","04699fd2":"code","54ddbd53":"code","662defa4":"code","9f77b86a":"code","0b32961f":"code","f83fa430":"code","a5e314f0":"code","5b021c82":"code","70d02c0d":"code","04d4ac85":"code","1d7055e3":"code","e4631ce2":"code","2261f64c":"code","9f73edc6":"code","93714e9f":"code","7b39e318":"code","d75e09a1":"code","7a5ebedf":"code","9c2ebf89":"code","f1515dad":"code","5dbc2d35":"code","a7535796":"code","4090d7ca":"code","9a84c7ea":"code","4b8d69c5":"code","fb06b841":"code","1e20dd47":"code","5b5aa4ab":"code","94b95055":"code","988dfefa":"code","5db4fa2e":"code","9c042e14":"code","3c2709b6":"code","74bc74ed":"code","c589060b":"code","7c1f5cb1":"code","f2e14ff8":"code","16765da3":"code","7dd6768c":"code","e326a18b":"code","71cda479":"code","2df87d5b":"code","45133fb6":"code","c67a8118":"markdown","332c1c24":"markdown","e5f0ad7b":"markdown","211a79f5":"markdown","14d7dd92":"markdown","119f688c":"markdown","05245717":"markdown","8d77a7d9":"markdown","fa1c29ed":"markdown","be9af04d":"markdown","31ad10a2":"markdown","c87dfd5d":"markdown","0ebd61e7":"markdown","2867e9ce":"markdown","4ee8cd25":"markdown","4bcbd2ab":"markdown","4e564c62":"markdown","71bbe6af":"markdown","6a97bbd4":"markdown","4a88118b":"markdown","d6f971ec":"markdown","ab1991e6":"markdown","68acf9b2":"markdown","c2ffe925":"markdown","81b6aa85":"markdown","01ef9c2f":"markdown","9704b6ee":"markdown","75fe395e":"markdown","1a539f3c":"markdown","ae4731ed":"markdown","ec572e4a":"markdown","40bc73a1":"markdown","2dfcdd0d":"markdown","64c86b32":"markdown","438c45ab":"markdown","5d599dd3":"markdown","43d053c1":"markdown","15fe58cc":"markdown","cb81e1e4":"markdown","7bf1aada":"markdown","2a278d99":"markdown","a6c8a93b":"markdown","f94e36b1":"markdown","d424789b":"markdown","f06118f0":"markdown","fd205dba":"markdown","2d6d476e":"markdown","895004d4":"markdown","95ab213e":"markdown","7731e54b":"markdown","ed38dfe0":"markdown","dd241998":"markdown","c447196a":"markdown","7009d010":"markdown","e0e7e38d":"markdown","464e8091":"markdown","5ad4d4ce":"markdown","90720400":"markdown","bd5e13ea":"markdown","c38b251b":"markdown","8a3b1251":"markdown","1a06ca0c":"markdown","eeec98b7":"markdown","6d4f4f4d":"markdown","0e9d2de9":"markdown","37288dc6":"markdown","8755cb27":"markdown","bf65c5b3":"markdown","16727fd8":"markdown","f9ff00a2":"markdown","a6f0b204":"markdown","b2660652":"markdown","652b2ead":"markdown","61b17603":"markdown","5ea88281":"markdown","71eab618":"markdown","63fb25e0":"markdown","44733a06":"markdown","967cdfd4":"markdown","59b9c364":"markdown","873e4f08":"markdown","0d89abd6":"markdown","ebb2a44c":"markdown","47bfa69b":"markdown","ea392bf9":"markdown","53c43a25":"markdown","c9f0bfbe":"markdown","180d1c19":"markdown","eed8fba6":"markdown","83051fa6":"markdown","0900b5c2":"markdown"},"source":{"c7cdb2d1":"%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # graphs and charts\nimport pandas_profiling # generating Profile Report\n\nimport bq_helper # accessing bigQuery database\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split # data splitting\nimport statsmodels.api as sm\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression # Linear model\n\nimport wordcloud","c261a94f":"stackoverflow = bq_helper.BigQueryHelper(\"bigquery-public-data\",\"stackoverflow\")","dfc35e63":"stackoverflow.list_tables()","0091aeae":"stackoverflow.head(\"posts_questions\")","e12e3be9":"stackoverflow.table_schema(\"posts_questions\")","35be2f1f":"queryx = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >= 2009 and extract(year from creation_date) < 2019\n        group by year\n        order by year\n        \"\"\"\n\nPostsCount = stackoverflow.query_to_pandas(queryx)\nprint(PostsCount)","09dcb6b5":"PostsCount.describe()","6593c678":"# data.isnull.sum()\n# data['favorite_count'].fillna(0,inplace=True)\n# data.head()","fc0acf72":"data = pd.DataFrame(PostsCount)\npandas_profiling.ProfileReport(data)","6c8e5b61":"PostsCount.head()","ac3e0559":"query4 = \"\"\"SELECT tags\n         FROM `bigquery-public-data.stackoverflow.posts_questions`\n         LIMIT 200000;\n         \"\"\"\n\nalltags = stackoverflow.query_to_pandas_safe(query4)\ntags = ' '.join(alltags.tags).lower()","c96e605c":"cloud = wordcloud.WordCloud(background_color='black',\n                            max_font_size=200,\n                            width=1600,\n                            height=800,\n                            max_words=300,\n                            relative_scaling=.5).generate(tags)\nplt.figure(figsize=(20,10))\nplt.axis('off')\nplt.savefig('stackOverflow.png')\nplt.imshow(cloud);","0c786127":"pd.to_numeric(PostsCount['year'])","74692110":"year=PostsCount['year'].values.reshape(-1,1)\n#print (year)\nposts=PostsCount['posts'].values.reshape(-1,1)\n#print (posts)","5baae1ff":"reg = LinearRegression()","82d3b2f8":"X_train, X_test, y_train, y_test = train_test_split(year,posts,test_size=0.2,shuffle=False)\n# print(X_train)\n# print(X_test)\n# print(y_train)\n# print(y_test)","1431872c":"reg.fit(X_train,y_train)\npredictions = reg.predict(X_test)","2aa9e555":"print('Predicted values\\n',predictions)","faaf1a98":"plt.scatter(X_train,y_train, color = \"black\")\nplt.scatter(X_test, y_test, color = \"green\")\nplt.plot(X_test, predictions, color = \"red\")\nplt.gca().legend(('Y-Predicted','Y-Train', 'Y-Test'))\nplt.title('Y-train and Y-test and Y-predicted')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","73d864c4":"plt.scatter(X_test, y_test, color = \"green\")\nplt.plot(X_test, predictions, color = \"red\")\nplt.gca().legend(('Y-Train','Y-Test'))\nplt.title('Y-test and Y-predicted')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","691de758":"reg.score(X_test,y_test)","a7839c5e":"print('Mean Squared Error:', metrics.mean_squared_error(y_test, predictions))","0a9c884f":"print('Root Mean Squared Error:',np.sqrt(metrics.mean_squared_error(y_test, predictions)))","cdb2922c":"#angularjs,bootstrap,php,html,javascript,css\nquery = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and (tags like '%bootstrap%' or \n        tags like '%angularjs%' or tags like '%php%' or tags like '%html%' or tags like '%javascript%' or tags like '%css%')\n        group by year\n        order by year\n        \"\"\"\n\nWebDev_Posts = stackoverflow.query_to_pandas(query)\nWebDev_Posts['posts']= WebDev_Posts['posts']*100\/PostsCount.posts\nWebDev_Posts","6ea0bdc0":"WebDev_Posts.describe()","7d6588e8":"pd.to_numeric(WebDev_Posts['year'])","888a92b9":"WebDevYear=WebDev_Posts['year'].values.reshape(-1,1)\n#print (WebDevYear)\nWebDevPosts=WebDev_Posts['posts'].values.reshape(-1,1)\n#print (WebDevPosts)","446706f1":"XWebDev_train, XWebDev_test, yWebDev_train, yWebDev_test = train_test_split(WebDevYear,WebDevPosts,test_size=0.2,shuffle=False)\n# print(XWebDev_train)\n# print(XWebDev_test)\n# print(yWebDev_train)\n# print(yWebDev_test)","e1d6c7d5":"WebDevReg=LinearRegression()\nWebDevReg.fit(XWebDev_train,yWebDev_train)\nWebDevPredictions = WebDevReg.predict(XWebDev_test)\nprint('Predicted Values:\\n',WebDevPredictions)","02755c9d":"plt.scatter(XWebDev_train,yWebDev_train, color = \"black\")\nplt.scatter(XWebDev_test, yWebDev_test, color = \"green\")\nplt.plot(XWebDev_test, WebDevPredictions, color = \"red\")\nplt.gca().legend(('Y-Predicted','Y-Train', 'Y-Test'))\nplt.title('WEB DEVELOPMENT')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","06a72192":"plt.scatter(XWebDev_test, yWebDev_test, color = \"green\")\nplt.plot(XWebDev_test, WebDevPredictions, color = \"red\")\nplt.gca().legend(('Y-Train','Y-Test'))\nplt.title('Web Development')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","1fbd218e":"WebDevReg.score(XWebDev_test,yWebDev_test)","9f3a7533":"print('Mean Squared Error:',metrics.mean_squared_error(yWebDev_test, WebDevPredictions))","c938814d":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(yWebDev_test, WebDevPredictions)))","21cc19be":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%angularjs%'\n        group by year\n        order by year\n        \"\"\"\n\nAngularJSPosts = stackoverflow.query_to_pandas(query)\nAngularJSPosts['posts']= AngularJSPosts['posts']*100\/PostsCount.posts\nAngularJSPosts","62774d19":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%bootstrap%'\n        group by year\n        order by year\n        \"\"\"\n\nBootstrapPosts = stackoverflow.query_to_pandas(query)\nBootstrapPosts['posts']= BootstrapPosts['posts']*100\/PostsCount.posts\npd.to_numeric(BootstrapPosts['year'])\nBootstrapPosts","10672f5f":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%php%'\n        group by year\n        order by year\n        \"\"\"\n\nPHPPosts = stackoverflow.query_to_pandas(query)\nPHPPosts['posts']= PHPPosts['posts']*100\/PostsCount.posts\npd.to_numeric(PHPPosts['year'])\nPHPPosts","6d52a1c7":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%html%'\n        group by year\n        order by year\n        \"\"\"\n\nhtmlPosts = stackoverflow.query_to_pandas(query)\nhtmlPosts['posts']= htmlPosts['posts']*100\/PostsCount.posts\npd.to_numeric(htmlPosts['year'])\nhtmlPosts","e481dce4":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%javascript%'\n        group by year\n        order by year\n        \"\"\"\n\nJavaScriptPosts = stackoverflow.query_to_pandas(query)\nJavaScriptPosts['posts']= JavaScriptPosts['posts']*100\/PostsCount.posts\npd.to_numeric(JavaScriptPosts['year'])\nJavaScriptPosts","2a4163ea":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%css%'\n        group by year\n        order by year\n        \"\"\"\n\nCSSPosts = stackoverflow.query_to_pandas(query)\nCSSPosts['posts']= CSSPosts['posts']*100\/PostsCount.posts\npd.to_numeric(CSSPosts['year'])\nCSSPosts","dcbd0a16":"WebDev= pd.merge(PHPPosts, htmlPosts, how='inner', on = 'year')\nWebDev=WebDev.set_index('year')\nWebDev= pd.merge(WebDev, JavaScriptPosts, how='inner', on = 'year')\nWebDev =WebDev.set_index('year')\nWebDev=pd.merge(WebDev,AngularJSPosts,how='inner',on='year')\nWebDev = WebDev.set_index('year')\nWebDev=pd.merge(WebDev,BootstrapPosts,how='inner',on='year')\nWebDev = WebDev.set_index('year')\nWebDev=pd.merge(WebDev,CSSPosts,how='inner',on='year')\nWebDev = WebDev.set_index('year')\n\nWebDev.plot(kind='line')\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Posts %', fontsize=15)\ny_pos=[2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\n\nplt.xticks(y_pos,fontsize=10)\nplt.yticks(fontsize=10)\nplt.title('Web Development')\nplt.legend(['PHP','HTML','JavaScript','AngularJS','BootStrap','CSS'],loc=[1.0,0.5])\nplt.show()","d93d1f99":"#mysql,mongodb,nosql,postgresql,cassandra\nquery = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date)>= 2009 and extract(year from creation_date) < 2019 \n        and (tags like '%mysql%' or tags like '%nosql%' or tags like '%mongodb%' \n        or tags like '%postgresql%' or tags like '%cassandra%')\n        group by year\n        order by year\n        \"\"\"\n\nDataBase_Posts = stackoverflow.query_to_pandas(query)\nDataBase_Posts['posts']= DataBase_Posts['posts']*100\/PostsCount.posts\nDataBase_Posts","b983ea29":"DataBase_Posts.describe()","0fc2082c":"pd.to_numeric(DataBase_Posts['year'])","bacb7cc0":"DataBaseYear=DataBase_Posts['year'].values.reshape(-1,1)\n# print (DataBaseYear)\nDataBasePosts=DataBase_Posts['posts'].values.reshape(-1,1)\n# print (DataBasePosts)","fcf2446b":"XDataBase_train, XDataBase_test, yDataBase_train, yDataBase_test = train_test_split(DataBaseYear,DataBasePosts,test_size=0.2,shuffle=False)\n# print(XDataBase_train)\n# print(XDataBase_test)\n# print(yDataBase_train)\n# print(yDataBase_test)","6fa3e1a3":"DataBaseReg=LinearRegression()\nDataBaseReg.fit(XDataBase_train,yDataBase_train)\nDataBasePredictions = DataBaseReg.predict(XDataBase_test)\nprint('Predicted Values:\\n',DataBasePredictions)","d863b70a":"plt.scatter(XDataBase_train,yDataBase_train, color = \"black\")\nplt.scatter(XDataBase_test, yDataBase_test, color = \"green\")\nplt.plot(XDataBase_test, DataBasePredictions, color = \"red\")\nplt.gca().legend(('Y-Predicted', 'Y-Train','Y-Test'))\nplt.title('Database Technologies')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","0961969b":"plt.scatter(XDataBase_test, yDataBase_test, color = \"green\")\nplt.plot(XDataBase_test, DataBasePredictions, color = \"red\")\nplt.gca().legend(('Y-Train','Y-Test'))\nplt.title('Database Technologies')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","55a3d365":"DataBaseReg.score(XDataBase_test, yDataBase_test)","a72fa954":"print('Mean Squared Error:', metrics.mean_squared_error(yDataBase_test, DataBasePredictions))","4a12d1cd":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(yDataBase_test, DataBasePredictions)))","f5ba2f76":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%mysql%'\n        group by year\n        order by year\n        \"\"\"\n\nMySQLPosts = stackoverflow.query_to_pandas(query)\nMySQLPosts['posts']= MySQLPosts['posts']*100\/PostsCount.posts\npd.to_numeric(MySQLPosts['year'])\nMySQLPosts","6db120dc":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%mongodb%'\n        group by year\n        order by year\n        \"\"\"\n\nMongoDBPosts = stackoverflow.query_to_pandas(query)\nMongoDBPosts['posts']= MongoDBPosts['posts']*100\/PostsCount.posts\npd.to_numeric(MongoDBPosts['year'])\nMongoDBPosts","bff79119":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%nosql%'\n        group by year\n        order by year\n        \"\"\"\n\nNoSQLPosts = stackoverflow.query_to_pandas(query)\nNoSQLPosts['posts']= NoSQLPosts['posts']*100\/PostsCount.posts\npd.to_numeric(NoSQLPosts['year'])\nNoSQLPosts","5e9fd0a9":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%postgresql%'\n        group by year\n        order by year\n        \"\"\"\n\nPostgreSQLPosts = stackoverflow.query_to_pandas(query)\nPostgreSQLPosts['posts']= PostgreSQLPosts['posts']*100\/PostsCount.posts\npd.to_numeric(PostgreSQLPosts['year'])\nPostgreSQLPosts","c2da7c5a":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 \n        and tags like '%cassandra%'\n        group by year\n        order by year\n        \"\"\"\n\nCassandraPosts = stackoverflow.query_to_pandas(query)\nCassandraPosts['posts']= CassandraPosts['posts']*100\/PostsCount.posts\npd.to_numeric(CassandraPosts['year'])\nCassandraPosts","2f0b37e8":"DataBase= pd.merge(MySQLPosts, NoSQLPosts, how='inner', on = 'year')\nDataBase=DataBase.set_index('year')\nDataBase= pd.merge(DataBase, MongoDBPosts, how='inner', on = 'year')\nDataBase=DataBase.set_index('year')\nDataBase= pd.merge(DataBase, PostgreSQLPosts, how='inner', on = 'year')\nDataBase=DataBase.set_index('year')\nDataBase= pd.merge(DataBase, CassandraPosts, how='inner', on = 'year')\nDataBase=DataBase.set_index('year')\n\n\nDataBase.plot(kind='line')\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Posts %', fontsize=15)\ny_pos=[2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\n\nplt.xticks(y_pos,fontsize=10)\nplt.yticks(fontsize=10)\nplt.title('Database Technologies')\nplt.legend(['MySQL','NoSQL','MongoDB','PostgreSQL','Cassandra'],loc=[1.0,0.5])\nplt.show()","673f8d09":"#hadoop,hive,spark,hbase,kafka\nquery = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date)>= 2009 and extract(year from creation_date) < 2019 and (tags like '%hadoop%' or \n        tags like '%spark%' or tags like '%hive%' or tags like '%hbase%' or tags like '%kafka%')\n        group by year\n        order by year\n        \"\"\"\n\nBigData_Posts = stackoverflow.query_to_pandas(query)\nBigData_Posts['posts']= BigData_Posts['posts']*100\/PostsCount.posts\nBigData_Posts","d6c77869":"BigData_Posts.describe()","eab5e067":"pd.to_numeric(BigData_Posts['year'])","a83a3c29":"BigDataYear=BigData_Posts['year'].values.reshape(-1,1)\n# print (BigDataYear)\nBigDataPosts=BigData_Posts['posts'].values.reshape(-1,1)\n# print (BigDataPosts)","0795d3a3":"XBigData_train, XBigData_test, yBigData_train, yBigData_test = train_test_split(BigDataYear,BigDataPosts,test_size=0.2,shuffle=False)\n# print(XBigData_train)\n# print(XBigData_test)\n# print(yBigData_train)\n# print(yBigData_test)","b3009a88":"BigDataReg=LinearRegression()\nBigDataReg.fit(XBigData_train,yBigData_train)\nBigDataPredictions = BigDataReg.predict(XBigData_test)\nprint('Predicted Values:\\n',BigDataPredictions)","cda12daf":"plt.scatter(XBigData_train,yBigData_train, color = \"black\")\nplt.scatter(XBigData_test, yBigData_test, color = \"green\")\nplt.plot(XBigData_test, BigDataPredictions, color = \"red\")\nplt.gca().legend(('Y-Predicted', 'Y-Train','Y-Test'))\nplt.title('Big Data')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","2483e69a":"plt.scatter(XBigData_test, yBigData_test, color = \"green\")\nplt.plot(XBigData_test, BigDataPredictions, color = \"red\")\nplt.gca().legend(('Y-Train','Y-Test'))\nplt.title('Big Data')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","8de6fc5c":"BigDataReg.score(XBigData_test, yBigData_test)","90d11a03":"print('Mean Squared Error:', metrics.mean_squared_error(yBigData_test, BigDataPredictions))","0e7f5da7":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(yBigData_test, BigDataPredictions)))","4f9ab5b1":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%hadoop%'\n        group by year\n        order by year\n        \"\"\"\n\nHadoopPosts = stackoverflow.query_to_pandas(query)\nHadoopPosts['posts']= HadoopPosts['posts']*100\/PostsCount.posts\npd.to_numeric(HadoopPosts['year'])\nHadoopPosts","79664840":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%hive%'\n        group by year\n        order by year\n        \"\"\"\n\nHivePosts = stackoverflow.query_to_pandas(query)\nHivePosts['posts']= HivePosts['posts']*100\/PostsCount.posts\npd.to_numeric(HivePosts['year'])\nHivePosts","dd5f3e34":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%spark%'\n        group by year\n        order by year\n        \"\"\"\n\nSparkPosts = stackoverflow.query_to_pandas(query)\nSparkPosts['posts']= SparkPosts['posts']*100\/PostsCount.posts\npd.to_numeric(SparkPosts['year'])\nSparkPosts","da999b31":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%hbase%'\n        group by year\n        order by year\n        \"\"\"\n\nHBasePosts = stackoverflow.query_to_pandas(query)\nHBasePosts['posts']= HBasePosts['posts']*100\/PostsCount.posts\npd.to_numeric(HBasePosts['year'])\nHBasePosts","007459b0":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%kafka%'\n        group by year\n        order by year\n        \"\"\"\n\nKafkaPosts = stackoverflow.query_to_pandas(query)\nKafkaPosts['posts']= KafkaPosts['posts']*100\/PostsCount.posts\npd.to_numeric(KafkaPosts['year'])\nKafkaPosts","4d4942b4":"df = pd.DataFrame({\"year\":[2009,2010],\"posts\":[0,0]})\nKafkaPosts = KafkaPosts.append(df, ignore_index = True)\nKafkaPosts.sort_values(\"year\", axis = 0, ascending = True, inplace = True)\nKafkaPosts = KafkaPosts.reset_index(drop=True)\nKafkaPosts","05389fcb":"BigData= pd.merge(HadoopPosts, SparkPosts, how='inner', on = 'year')\nBigData=BigData.set_index('year')\nBigData= pd.merge(BigData, HivePosts, how='inner', on = 'year')\nBigData=BigData.set_index('year')\nBigData= pd.merge(BigData, HBasePosts, how='inner', on = 'year')\nBigData=BigData.set_index('year')\nBigData= pd.merge(BigData, KafkaPosts, how='inner', on = 'year')\nBigData=BigData.set_index('year')\n\nBigData.plot(kind='line')\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Posts %', fontsize=15)\ny_pos=[2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\n\nplt.xticks(y_pos,fontsize=10)\nplt.yticks(fontsize=10)\nplt.title('Big Data')\nplt.legend(['Hadoop','Spark','Hive','HBase','Kafka'],loc=[1.0,0.5])\nplt.show()","ded1e6aa":"#pandas,matplotlib,regression,svm,kaggle\nquery = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date)>= 2009 and extract(year from creation_date) < 2019 \n        and (tags like '%pandas%' or tags like '%matplotlib%'\n        or tags like '%regression%' or tags like '%svm%' or tags like '%kaggle%')\n        group by year\n        order by year\n        \"\"\"\n\nDataScience_Posts = stackoverflow.query_to_pandas(query)\nDataScience_Posts['posts']= DataScience_Posts['posts']*100\/PostsCount.posts\nDataScience_Posts","04699fd2":"DataScience_Posts.describe()","54ddbd53":"pd.to_numeric(DataScience_Posts['year'])","662defa4":"DataScienceYear=DataScience_Posts['year'].values.reshape(-1,1)\n# print (DataScienceYear)\nDataSciencePosts=DataScience_Posts['posts'].values.reshape(-1,1)\n# print (DataSciencePosts)","9f77b86a":"XDataScience_train, XDataScience_test, yDataScience_train, yDataScience_test = train_test_split(DataScienceYear,DataSciencePosts,test_size=0.2,shuffle=False)\n# print(XDataScience_train)\n# print(XDataScience_test)\n# print(yDataScience_train)\n# print(yDataScience_test)","0b32961f":"DataScienceReg=LinearRegression()\nDataScienceReg.fit(XDataScience_train,yDataScience_train)\nDataSciencePredictions = DataScienceReg.predict(XDataScience_test)\nprint('Predicted Values:\\n',DataSciencePredictions)","f83fa430":"plt.scatter(XDataScience_train,yDataScience_train, color = \"black\")\nplt.scatter(XDataScience_test, yDataScience_test, color = \"green\")\nplt.plot(XDataScience_test, DataSciencePredictions, color = \"red\")\nplt.gca().legend(('Y-Predicted', 'Y-Train','Y-Test'))\nplt.title('Data Science')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","a5e314f0":"plt.scatter(XDataScience_test, yDataScience_test, color = \"green\")\nplt.plot(XDataScience_test, DataSciencePredictions, color = \"red\")\nplt.gca().legend(('Y-Train','Y-Test'))\nplt.title('Data Science')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","5b021c82":"DataScienceReg.score(XDataScience_test,yDataScience_test)","70d02c0d":"print('Mean Squared Error:', metrics.mean_squared_error(yDataScience_test, DataSciencePredictions))","04d4ac85":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(yDataScience_test, DataSciencePredictions)))","1d7055e3":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%pandas%'\n        group by year\n        order by year\n        \"\"\"\n\nPandasPosts = stackoverflow.query_to_pandas(query)\nPandasPosts['posts']= PandasPosts['posts']*100\/PostsCount.posts\npd.to_numeric(PandasPosts['year'])\nPandasPosts","e4631ce2":"df = pd.DataFrame({\"year\":[2009],\"posts\":[0]})\nPandasPosts = PandasPosts.append(df, ignore_index = True)\nPandasPosts.sort_values(\"year\", axis = 0, ascending = True, inplace = True)\nPandasPosts = PandasPosts.reset_index(drop=True)\nPandasPosts","2261f64c":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%matplotlib%'\n        group by year\n        order by year\n        \"\"\"\n\nMatplotlibPosts = stackoverflow.query_to_pandas(query)\nMatplotlibPosts['posts']= MatplotlibPosts['posts']*100\/PostsCount.posts\npd.to_numeric(MatplotlibPosts['year'])\nMatplotlibPosts","9f73edc6":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 \n        and tags like '%regression%'\n        group by year\n        order by year\n        \"\"\"\n\nRegressionPosts = stackoverflow.query_to_pandas(query)\nRegressionPosts['posts']= RegressionPosts['posts']*100\/PostsCount.posts\npd.to_numeric(RegressionPosts['year'])\nRegressionPosts","93714e9f":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 \n        and tags like '%svm%'\n        group by year\n        order by year\n        \"\"\"\n\nSVMPosts = stackoverflow.query_to_pandas(query)\nSVMPosts['posts']= SVMPosts['posts']*100\/PostsCount.posts\npd.to_numeric(SVMPosts['year'])\nSVMPosts","7b39e318":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 \n        and tags like '%kaggle%'\n        group by year\n        order by year\n        \"\"\"\n\nKagglePosts = stackoverflow.query_to_pandas(query)\nKagglePosts['posts']= KagglePosts['posts']*100\/PostsCount.posts\npd.to_numeric(KagglePosts['year'])\nKagglePosts","d75e09a1":"df = pd.DataFrame({\"year\":[2009,2010],\"posts\":[0,0]})\nKagglePosts = KagglePosts.append(df, ignore_index = True)\nKagglePosts.sort_values(\"year\", axis = 0, ascending = True, inplace = True)\nKagglePosts = KagglePosts.reset_index(drop=True)\nKagglePosts","7a5ebedf":"DataScience= pd.merge(PandasPosts, MatplotlibPosts, how='inner', on = 'year')\nDataScience=DataScience.set_index('year')\nDataScience= pd.merge(DataScience, RegressionPosts, how='inner', on = 'year')\nDataScience=DataScience.set_index('year')\nDataScience= pd.merge(DataScience, SVMPosts, how='inner', on = 'year')\nDataScience=DataScience.set_index('year')\nDataScience= pd.merge(DataScience, KagglePosts, how='inner', on = 'year')\nDataScience=DataScience.set_index('year')\n\nDataScience.plot(kind='line')\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Posts %', fontsize=15)\ny_pos=[2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\n\nplt.xticks(y_pos,fontsize=10)\nplt.yticks(fontsize=10)\nplt.title('Data Science')\nplt.legend(['Pandas','Matplotlib','Regression','SVM','Kaggle'],loc=[1.0,0.5])\nplt.show()","9c2ebf89":"#C++,ruby,java,c#,python\nquery = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >= 2009 and extract(year from creation_date) < 2019 \n        and (tags like '%c++%' or tags like '%python%' or tags like '%ruby%' \n        or tags like '%c#%' or (tags like '%java%' and tags not like '%javascript%'))\n        group by year\n        order by year\n        \"\"\"\n\nProgLang_Posts = stackoverflow.query_to_pandas(query)\nProgLang_Posts['posts']=ProgLang_Posts['posts']*100\/PostsCount.posts\nProgLang_Posts","f1515dad":"ProgLang_Posts.describe()","5dbc2d35":"pd.to_numeric(ProgLang_Posts['year'])","a7535796":"ProgLangYear=ProgLang_Posts['year'].values.reshape(-1,1)\n# print (ProgLangYear)\nProgLangPosts=ProgLang_Posts['posts'].values.reshape(-1,1)\n# print (ProgLangPosts)","4090d7ca":"XProgLang_train, XProgLang_test, yProgLang_train, yProgLang_test = train_test_split(ProgLangYear,ProgLangPosts,test_size=0.2,shuffle=False)\n# print(XProgLang_train)\n# print(XProgLang_test)\n# print(yProgLang_train)\n# print(yProgLang_test)","9a84c7ea":"ProgLangReg=LinearRegression()\nProgLangReg.fit(XProgLang_train,yProgLang_train)\nProgLangPredictions = ProgLangReg.predict(XProgLang_test)\nprint('Predicted Values:\\n',ProgLangPredictions)","4b8d69c5":"plt.scatter(XProgLang_train,yProgLang_train, color = \"black\")\nplt.scatter(XProgLang_test, yProgLang_test, color = \"green\")\nplt.plot(XProgLang_test, ProgLangPredictions, color = \"red\")\nplt.gca().legend(('Y-Predicted', 'Y-Train','Y-Test'))\nplt.title('Programming Languages')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","fb06b841":"plt.scatter(XProgLang_test, yProgLang_test, color = \"green\")\nplt.plot(XProgLang_test, ProgLangPredictions, color = \"red\")\nplt.gca().legend(('Y-Train','Y-Test'))\nplt.title('Programming Languages')\nplt.xlabel('Year')\nplt.ylabel('Posts')\nplt.show()","1e20dd47":"ProgLangReg.score(XProgLang_test, yProgLang_test)","5b5aa4ab":"print('Mean Squared Error:', metrics.mean_squared_error(yProgLang_test, ProgLangPredictions))","94b95055":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(yProgLang_test, ProgLangPredictions)))","988dfefa":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%c++%'\n        group by year\n        order by year\n        \"\"\"\n\nCplusPosts = stackoverflow.query_to_pandas(query)\nCplusPosts['posts']= CplusPosts['posts']*100\/PostsCount.posts\npd.to_numeric(CplusPosts['year'])\nCplusPosts","5db4fa2e":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%ruby%'\n        group by year\n        order by year\n        \"\"\"\n\nRubyPosts = stackoverflow.query_to_pandas(query)\nRubyPosts['posts']= RubyPosts['posts']*100\/PostsCount.posts\npd.to_numeric(RubyPosts['year'])\nRubyPosts","9c042e14":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%java%' and tags not like '%javascript%'\n        group by year\n        order by year\n        \"\"\"\n\nJavaPosts = stackoverflow.query_to_pandas(query)\nJavaPosts['posts']= JavaPosts['posts']*100\/PostsCount.posts\npd.to_numeric(JavaPosts['year'])\nJavaPosts","3c2709b6":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%c#%'\n        group by year\n        order by year\n        \"\"\"\n\nCHashPosts = stackoverflow.query_to_pandas(query)\nCHashPosts['posts']= CHashPosts['posts']*100\/PostsCount.posts\npd.to_numeric(CHashPosts['year'])\nCHashPosts","74bc74ed":"query = \"\"\"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%python%'\n        group by year\n        order by year\n        \"\"\"\n\nPythonPosts = stackoverflow.query_to_pandas(query)\nPythonPosts['posts']= PythonPosts['posts']*100\/PostsCount.posts\npd.to_numeric(PythonPosts['year'])\nPythonPosts","c589060b":"ProgLang= pd.merge(RubyPosts, CplusPosts, how='inner', on = 'year')\nProgLang =ProgLang.set_index('year')\nProgLang= pd.merge(ProgLang, PythonPosts, how='inner', on = 'year')\nProgLang =ProgLang.set_index('year')\nProgLang=pd.merge(ProgLang,CHashPosts,how='inner',on='year')\nProgLang = ProgLang.set_index('year')\nProgLang=pd.merge(ProgLang,JavaPosts,how='inner',on='year')\nProgLang = ProgLang.set_index('year')\n\nProgLang.plot(kind='line')\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Posts %', fontsize=15)\ny_pos=[2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\n\nplt.xticks(y_pos,fontsize=10)\nplt.yticks(fontsize=10)\nplt.title('Programming Languages')\nplt.legend(['Ruby','C++','Python','C#','Java'],loc=[1.0,0.5])\nplt.show()","7c1f5cb1":"PastTrends= pd.merge(WebDev_Posts, DataBase_Posts, how='inner', on = 'year')\nPastTrends =PastTrends.set_index('year')\nPastTrends= pd.merge(PastTrends, BigData_Posts, how='inner', on = 'year')\nPastTrends =PastTrends.set_index('year')\nPastTrends=pd.merge(PastTrends,DataScience_Posts,how='inner',on='year')\nPastTrends = PastTrends.set_index('year')\nPastTrends=pd.merge(PastTrends,ProgLang_Posts,how='inner',on='year')\nPastTrends = PastTrends.set_index('year')\n\nPastTrends.plot(kind='line')\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Posts %', fontsize=15)\ny_pos=[2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\n\nplt.xticks(y_pos,fontsize=10)\nplt.yticks(fontsize=10)\nplt.title('Past Trends')\nplt.legend(['Web Development','DataBase Technologies','Big Data','Data Science','Programming Languages'],\n           loc=[1.0,0.5])\nplt.show()","f2e14ff8":"def trends(dfall, labels=None, Year = 2019, title=\"Trends in Technologies in \", **kwargs):\n\n    plt.figure(figsize=(20,10))\n   \n    predict = []\n    for df in dfall :\n        year=df['year'].values.reshape(-1,1)\n        posts=df['posts'].values.reshape(-1,1)\n        reg=LinearRegression()\n        X_train = year\n        Y_train = posts\n        X_test = [[Year]]\n        reg.fit(X_train,Y_train)\n        predictions = reg.predict(X_test)\n        predict.append(predictions)\n\n    trend = pd.DataFrame(columns = ['Technology','Posts %'])\n    trend['Technology'] = labels\n    trend['Posts %'] = predict\n    \n    x_pos = np.arange(len(trend['Technology']))\n    plt.bar(x_pos,trend['Posts %'])\n    plt.xticks(x_pos, trend['Technology'],fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.xlabel('Technologies',fontsize=20)\n    plt.ylabel('Posts Percentage',fontsize=20)\n    plt.title(title+str(Year),fontsize=30)\n    plt.show()","16765da3":"trends([WebDev_Posts, DataBase_Posts, BigData_Posts, DataScience_Posts, ProgLang_Posts],\n       [\"Web Development\",'DataBase Technologies','Big Data','Data Science','Programming Languages'])","7dd6768c":"def PastTrends(dfall, labels = None, title=\"Past Trends\", **kwargs):\n\n    query1 = \"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts from `bigquery-public-data.stackoverflow.posts_questions` where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%\"\n    query3 =\"%' group by year order by year\"\n    df = []\n    \n    if labels==None:\n        labels = dfall\n        \n    l = len(dfall)\n    for i in range(l):\n        query2 = dfall[i]\n        query = query1+query2+query3\n        Posts = stackoverflow.query_to_pandas(query)\n        Posts['posts']= Posts['posts']*100\/PostsCount.posts\n        pd.to_numeric(Posts['year'])\n        df.append(Posts)\n    \n    trend = pd.merge(df[0], df[1], how='inner', on = 'year')\n    trend = trend.set_index('year')\n    if(l>2):\n        for i in range(2,l):\n            trend = pd.merge(trend, df[i], how='inner', on = 'year')\n            trend = trend.set_index('year')\n            \n    trend.plot(kind='line')\n    plt.xlabel('Year', fontsize=15)\n    plt.ylabel('Posts %', fontsize=15)\n    y_pos=[2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\n    plt.xticks(y_pos,fontsize=10)\n    plt.yticks(fontsize=10)\n    plt.title(title)\n    plt.legend(labels, loc=[1.0,0.5])\n    plt.show()","e326a18b":"PastTrends([\"android\",\"javascript\",\"cassandra\"])","71cda479":"def FutureTrends(dfall, Year = 2019, labels = None, title=\"Trends in Technologies in \", **kwargs):\n\n    plt.figure(figsize=(20,10))\n    \n    query1 = \"select EXTRACT(year FROM creation_date) AS year, sum(id) as posts from `bigquery-public-data.stackoverflow.posts_questions` where extract(year from creation_date) >=2009 and extract(year from creation_date) < 2019 and tags like '%\"\n    query3 =\"%' group by year order by year\"\n    df = []\n    l = len(dfall)\n    \n    if (labels==None):\n        labels = dfall\n        \n    for i in range(l):\n        query2 = dfall[i]\n        query = query1+query2+query3\n        Posts = stackoverflow.query_to_pandas(query)\n        Posts['posts']= Posts['posts']*100\/PostsCount.posts\n        pd.to_numeric(Posts['year'])\n        df.append(Posts)\n        \n    predict = []\n    for d in df:\n        year=d['year'].values.reshape(-1,1)\n        posts=d['posts'].values.reshape(-1,1)\n        reg=LinearRegression()\n        X_train = year\n        Y_train = posts\n        X_test = [[Year]]\n        reg.fit(X_train,Y_train)\n        predictions = reg.predict(X_test)\n        predict.append(predictions)\n    #print(predict)\n    \n    trend = pd.DataFrame(columns = ['Technology','Posts %'])\n    trend['Technology'] = labels\n    trend['Posts %'] = predict\n    \n    x_pos = np.arange(len(trend['Technology']))\n    plt.bar(x_pos,trend['Posts %'])\n    plt.xticks(x_pos, trend['Technology'],fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.xlabel('Technologies',fontsize=20)\n    plt.ylabel('Posts Percentage',fontsize=20)\n    plt.title(title+str(Year),fontsize=30)\n    plt.show()","2df87d5b":"FutureTrends([\"spark\",\"hive\",\"python\"])","45133fb6":"FutureTrends([\"jquery\",\"javascript\",\"html\"],2020, ['JQuery','JavaScript','HTML'])","c67a8118":"# **1) Pandas**\n   * Finding the percentage of Pandas posts with respect to total posts each year","332c1c24":"# **1) MySQL**\n   * Finding the percentage of MySQL posts with respect to total posts each year","e5f0ad7b":"### **2) Table Schema**\n   * Finding the schema of the table queried to get some more details about the table columns","211a79f5":"# **3) PHP**\n   * Finding the percentage of PHP posts with respect to total posts each year","14d7dd92":"## **Reformatting the column type**\n   * Changing the datatype of the column **'_year_'** in the dataframe to **'_numeric_'** type","119f688c":"This kernel provides an analysis on the StackOverflow Data loaded as Google's BigQuery Dataset. It aims to find out the trend of various technologies from 2009 to 2018 and predict the future technological trends using Linear Regression.\n\nThese are some of the questions that this notebook aims to answer for now:  \n1) What is the trend in the technologies from 2009 - 2018?  \n2) What is the trend in the various categories of each technology?  \n3) What will be the upcoming trends in the technologies?  \n4) What will be the upcoming trend in the various categories of each technology?\n\nThese are some of the technologies that this kernel discusses:\n   * **Web Development**\n      * AngularJs\n      * BootStrap\n      * PHP\n      * HTML\n      * JavaScript\n      * CSS\n   * **DataBase Technologies**\n      * MySQL\n      * MongoDB\n      * NoSQL\n      * PostgreSQL\n      * Cassandra\n   * **Big Data**\n      * Hadoop\n      * Hive\n      * Spark\n      * HBase\n      * Kafka\n   * **Data Science**\n      * Pandas\n      * Matplotlib\n      * Regression\n      * Support Vector Machines (SVM)\n      * Kaggle\n   * **Programming Languages**\n      * C++\n      * Ruby\n      * Java\n      * C#\n      * Python","05245717":"# **Dataset Tables**\n   * Listing the tables in the dataset","8d77a7d9":"## **Reformatting the columns and Reshaping**\n   * Changing the datatype of **'_year_'** column to **'_numeric_'** type\n   * Storing the reshaped columns of the dataframe in new variables","fa1c29ed":"## **Reformatting the columns and Reshaping**\n   * Changing the datatype of the **'_year_'** column to **'_numeric_'** type\n   * Storing the reshaped columns of the dataframe in new variables","be9af04d":"# **BIG DATA**\n  * Finding the percentage of Big Data posts with respect to total posts each year","31ad10a2":"# **1) Hadoop**\n   * Finding the percentage of Hadoop posts with respect to total posts each year","c87dfd5d":"## **Visualisations**\n   * Visualising the training data and the test data and the predictions for better understanding","0ebd61e7":"   * Visualising the test values and the predicted values to check the accuracy of the model","2867e9ce":"## **Model Accuracy Score and Error**","4ee8cd25":"# **3) Spark**\n   * Finding the percentage of Spark posts with respect to total posts each year","4bcbd2ab":"# **Importing the Packages**","4e564c62":"## **Linear Regression Model and Prediction**","71bbe6af":"# **Comparisons: WebDev**\n   * Comparing the popularities of the various categories under Web Development","6a97bbd4":"# **TECHNOLOGIES DISCUSSED**:","4a88118b":"## **Reformatting the columns and Reshaping**\n  * Changing the datatype of the **'_year_'** column to **'_numeric_'** type\n  * Storing the reshaped columns of the dataframe in new variables","d6f971ec":"## **Train data and Test data**\n   * Splitting the data into train and test using *'train_test_split()'* method","ab1991e6":"# **3) Java**\n   * Finding the percentage of Java posts with respect to total posts each year","68acf9b2":"# **4) SVM**\n   * Finding the percentage of SVM posts with respect to total posts each year","c2ffe925":"# **Cleaning the Data**\n## **Posts Count**\n   * Removing irrelevant data\n   * Querying the year and the number of posts per year from the '*posts_questions*' table","81b6aa85":"# **6) CSS**\n   * Finding the percentage of CSS posts with respect to total posts each year","01ef9c2f":"# **2) Hive**\n   * Finding the percentage of Hive posts with respect to total posts each year","9704b6ee":"# **Past Trends Comparison**\n","75fe395e":"# **5) Cassandra**\n  * Finding the percentage of Cassandra posts with respect to total posts each year","1a539f3c":"## **Model Accuracy Score and Error**","ae4731ed":"# **5) Python**\n   * Finding the percentage of Python posts with respect to total posts each year","ec572e4a":"# **2) BootStrap**\n   * Finding the percentage of BootStrap posts with respect to total posts each year","40bc73a1":"## **Reformatting the columns and Reshaping**\n   * Changing the datatype of the **'_year_'** column to **'_numeric_'** type\n   * Storing the reshaped columns of the dataframe in new variables","2dfcdd0d":"# **WordCloud**","64c86b32":"# **5) Kafka**\n   * Finding the percentage of Kafka posts with respect to total posts each year","438c45ab":"# **Visualisations**\n   * Visualising the training data and the test data and the predictions for better understanding","5d599dd3":"## **Linear Regression Model and  Prediction**","43d053c1":"   * Visualising the test values and the predicted values to check the accuracy of the model","15fe58cc":"* Taking care of the null\/missing values in the dataset","cb81e1e4":"# **3) Regression**\n   * Finding the percentage of Regression posts with respect to total posts each year","7bf1aada":"# **4) HBase**\n   * Finding the percentage of HBase posts with respect to total posts each year","2a278d99":"# **DATABASE TECHNOLOGIES**\n  * Finding the percentage of Database Technologies posts with respect to total posts each year","a6c8a93b":"   * Visualising only the test values and the predicted values to check the accuracy of the model","f94e36b1":"# **Generalized evaluator for technologies**\n<p style='text-align: justify;'>This function takes in a list of tags for which the user wants to find the past trends. These tags are queried within the function to get the past data for each tag and these are merged into one datframe with each column as one tag. This dataframe is then used to plot a line graph which shows the past trends in the technologies mentioned as the tags list.<\/p>\n<p style='text-align: justify;'>The function can also take optional parameters, namely labels and title. *'title'* is set to **'Trends in Technologies in 2019'** as default, while labels is equal to the list of tags if not mentioned explicitly.<\/p>","d424789b":"# **Introduction**","f06118f0":"   * Visualising the test values and the predicted values to check the accuracy of the model","fd205dba":"## **Fitting and Predicting**\n   * Training the model using the training data and then using it to predict the values for the test data ","2d6d476e":"## **Visualisations**\n  * Visualising the training data and the test data and the predictions for better understanding","895004d4":"## **Visualisations**\n   * Visualising the training data and the testing data and the predictions for better understanding","95ab213e":"# **2) Matplotlib**\n   * Finding the percentage of Matplotlib posts with respect to total posts each year","7731e54b":"# **WEB DEVELOPMENT**\n   * Finding the percentage of Web Development posts with respect to total posts each year","ed38dfe0":"## **Train data and Test data**\n   * Splitting the data into train and test using *'train_test_split()'* method","dd241998":"# **Generalized predictor for technologies**\n<p style='text-align: justify;'>This function takes in a list of tags for which the user wants to find the future trends. These tags are queried within the function to get the past data for each tag and a linear regression model is built for each of the tags and future predictions are made using the queried past data and a bar graph is created which shows the predicted future trends in 2019 for the given tags.<\/p>\n<p style='text-align: justify;'>The function can also take optional parameters, namely labels and title. *'title'* is set to **'Trends in Technologies in 2019'** as default, while labels is equal to the list of tags if not mentioned explicitly. The function can also take *'year'* as one of the arguments, which controls the year for which predictions are made. By default, *'year'* is set to 2019.<\/p>","c447196a":"# **Data Profiling**\n   * Displaying the Profile Report of the dataframe using the '_ProfileReport()_' method of the '*pandas_profiling*' library","7009d010":"## **Linear Regression Model and Prediction**","e0e7e38d":"# **Comparisons: BigData**\n   * Comparing the popularities of the various categories under Big Data","464e8091":"## **Train data and Test data**\n   * Splitting the data into train and test data using *'train_test_split()'* method","5ad4d4ce":"# **4) C#**\n   * Finding the percentage of C# posts with respect to total posts each year","90720400":"# **DATA SCIENCE**\n   * Finding the percentage of Data Science posts with respect to total posts each year","bd5e13ea":"## **Train data and Test data**\n   * Splitting the data into train and test using *'train_test_split()* method","c38b251b":"# **3) NoSQL**\n   * Finding the percentage of NoSQL posts with respect to total posts each year","8a3b1251":"# **Linear Regression**\n   * Performing Linear Regression to predict future values using the past data\n   * Creating the model","1a06ca0c":"## **Reformatting the columns and Reshaping**\n   * Changing the datatype of **'_year_'** column to **'_numeric_'** type\n   * Storing the reshaped columns of the dataframe in new variables","eeec98b7":"# **PROGRAMMING LANGUAGES**\n   * Finding the percentage of programming languages posts with respect to total posts each year","6d4f4f4d":"## **Train data and Test data**\n   * Splitting the data into train and test using '*train_test_split()*' method","0e9d2de9":"# **Model Accuracy Score and Error**\n* Finding the score of the model for this data\n* Finding the mean squared error and root mean squared error","37288dc6":"# **5) JavaScript**\n   * Finding the percentage of JavaScript posts with respect to total posts each year","8755cb27":"  * Visualising the test values and the predicted values to check the accuracy of the model","bf65c5b3":"## **Model Accuracy Score and Error**","16727fd8":"## **Linear Regression Model and Prediction**","f9ff00a2":"# **1) AngularJS**\n   * Finding the percentage of AngularJS posts with respect to total posts each year","a6f0b204":"## **Model Accuracy Score and Error**","b2660652":"## **Visualisations**\n   * Visualising the training data and the test data and the predictions for better understanding","652b2ead":"# **Accessing the Dataset**\n   * Accessing the required dataset from BigQuery\n   \n### About '*bq_helper*'\n   * <p style='text-align: justify;'> bq_helper package simplifies common read-only tasks in BigQuery by dealing with object references and unpacking result objects into pandas dataframes.<\/p>\n   * <p style='text-align: justify;'> It currently only works here on Kaggle as it does not have any handling for the BigQuery authorization functions that Kaggle handles behind the scenes. <\/p>\n   * <p style='text-align: justify;'>bq_helper requires the creation of one BigQueryHelper object per dataset. Let's make one now. We'll need to pass it two arguments: <\/p>\n      1) The name of the BigQuery project, which on Kaggle should always be bigquery-public-data  \n      2) The name of the dataset, which can be found in the dataset description  ","61b17603":"## **PostsCount Basic Look**\n   * Viewing the top five rows of the '_PostsCount_' dataframe to get an idea about the dataframe's structure","5ea88281":"# **2) MongoDB**\n   * Finding the percentage of MongoDB posts with respect to total posts each year","71eab618":"## **Visualisations**\n   * Visualising the training data and the test data and the predictions for better understanding","63fb25e0":"# **4) PostgreSQL**\n   * Finding the percentage of PostgreSQL posts with respect to total posts each year","44733a06":"# **4) HTML**\n   * Finding the percentage of HTML posts with respect to total posts each year","967cdfd4":"## **Train and Test Data**\n   * Splitting the data into train and test using '*train_test_split()*' method","59b9c364":"# **Exploratory Data Analysis (EDA)**\n\n### **1) 'head' function**\n   * Used to view top n rows of the table - \"posts_questions\" in the dataset, by default n=5","873e4f08":"# **Comparisons: DataScience**\n   * Comparing the popularities of the various categories under Data Science","0d89abd6":"## **Model Accuracy Score and Error**","ebb2a44c":"# **Comparisons: DataBase**\n   * Comparing the popularities of the various categories under Database Technologies","47bfa69b":"# **1) C++**\n   * Finding the percentage of C++ posts with respect to total posts each year","ea392bf9":"# **Future Trends Comparison**\n<p style='text-align: justify;'>The following function is used to create stacked graphs visualisations for any of the various technologies to compare the trends amongst them. The datasets for the technolgies or their sub categories can be passed as the parameter and these datasets can be variable in number starting from 2.<\/p> \n<p style='text-align: justify;'>The labels for the various technologies and the title for the visualisation can also be passed, but these fields are optional and are set to **None** and **'Trends in Technologies in 2019'** by default, respectively. *'Year'* can also be passed as a parameter to the function and the function predicts the trends for the passed year or 2019 as default.<\/p>","53c43a25":"# **5) Kaggle**\n   * Finding the percentage of Kaggle posts with respect to total posts each year","c9f0bfbe":"# **Comparisons: ProgLang**\n   * Comparing the popularities of the various categories under Programming Languages","180d1c19":"## **Linear Regression Model and Prediction**","eed8fba6":"## **Reshaping the columns**\n   * Storing reshaped columns of the dataframe in new variables","83051fa6":"   * Visualising the test values and the predicted values to check the accuracy of the model","0900b5c2":"# **2) Ruby**\n   * Finding the percentage of Ruby posts with respect to total posts each year"}}