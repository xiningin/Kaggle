{"cell_type":{"9ef1e3b0":"code","4422e4b8":"code","2eeb5359":"code","d468d186":"code","1b7b0f1c":"code","d4a102f5":"code","b44cd379":"code","8632ce3a":"code","2ee89543":"code","68cc13c9":"code","d26fb3ec":"code","d7d170db":"code","5fe5ee25":"code","c3282c48":"code","81261edc":"code","d597798e":"code","5a905ebc":"code","e8cdaaf9":"code","055a89d6":"code","18e754ee":"code","17a05e65":"code","ac4b5ce2":"code","4b73259c":"code","629684bf":"markdown","4ed5390c":"markdown","4b57d388":"markdown","63fd6003":"markdown","6c4703d0":"markdown","7a7606b8":"markdown","d97bca08":"markdown","8ff0bd9e":"markdown","6c1b78ea":"markdown","73440c5b":"markdown","a551b365":"markdown","2a0a0020":"markdown","ab1a1f82":"markdown","b57bc77b":"markdown","2db31dc6":"markdown","c509622d":"markdown","6cf99ffb":"markdown","7509ba06":"markdown"},"source":{"9ef1e3b0":"# import pandas\nimport pandas as pd \n\n# import numpy \nimport numpy as np\n\n# what we need to plot\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfrom PIL import Image\n\n# set up the display function\nfrom IPython.display import display\n\nimport os\nfrom pathlib import Path\n\n# import the convertor\nfrom skimage.color import rgb2gray\n\nimport matplotlib as mpl\n\n# import HOG\nfrom skimage.feature import hog\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\n# import train_test_split from sklearn's model selection module\nfrom sklearn.model_selection import train_test_split \n\n# import SVC from sklearn's svm module\nfrom sklearn.svm import SVC\n\n# import accuracy_score from sklearn's metrics module\nfrom sklearn.metrics import roc_curve, auc, accuracy_score, classification_report","4422e4b8":"# Open an image\nimg = Image.open('..\/input\/intel-image-classification\/seg_train\/seg_train\/buildings\/4.jpg')\n\n# The image size\nprint('The image size is:', img.size)\n\n# Seeing the image\nimg","2eeb5359":"# Crop the image\nimg_cropped = img.crop([25, 25, 75, 75])\ndisplay(img_cropped)\n\n# Rotate the image\nimg_rotated = img.rotate(45)\ndisplay(img_rotated)\n\n# Flip the image left to right\nimg_flipped = img.transpose(Image.FLIP_LEFT_RIGHT)\ndisplay(img_flipped)","d468d186":"# Trun the image into a numpy array \nimg_data = np.array(img)\n\n# Get the shape of the aaray\nprint('The shape of the array is:', img_data.shape)\n\n# Plot the data with imshow\nplt.imshow(img_data)\nplt.show()\n\n# Plot the red channel \nplt.imshow(img_data[:,:,0], cmap=plt.cm.Reds_r)\nplt.show()\n\n# Plot the green channel\nplt.imshow(img_data[:,:,1], cmap=plt.cm.Greens_r)\nplt.show()\n\n# Plot the blue channel\nplt.imshow(img_data[:,:,2], cmap=plt.cm.Blues_r)\nplt.show()","1b7b0f1c":"# Resize the image\nimg_resized = np.array(img.resize((50,50)))\n# Plot the data with imshow\nplt.imshow(img_resized)\nplt.show()\n\nimg_resized.shape","d4a102f5":"# Plot the Kernel Density Estimate\ndef plot_kde(channel, color):\n    data = channel.flatten()\n    return pd.Series(data).plot.density(c=color)\n\n# The list of channels\nchannels = ['r', 'g', 'b']\n\ndef plot_rgb(image_data):\n    for i, color in enumerate(channels):\n        plot_kde(image_data[:,:,i], color)\n    plt.show()\n    \nplot_rgb(img_resized)","b44cd379":"path = '..\/input\/intel-image-classification\/seg_train\/seg_train'\nfor folder in os.listdir(path):\n    print(folder)\n    for file in os.listdir(Path(path, folder))[0:3]:\n        image = Image.open(Path(path, folder, file))\n        image_data = np.array(image.resize((150, 150)))\n        plt.subplot(1, 2, 1).imshow(image_data)\n        plt.subplot(1, 2, 2)\n        plot_rgb(image_data)\n","8632ce3a":"# Convert image to grayscale\nimg_bw = img.convert('L')\ndisplay(img_bw)\n\n# Convert to the image to array\nimg_bw_arr = np.array(img_bw.resize((150,150)))\n\n# Get the shape\nprint('The shape of the array:', img_bw_arr.shape)\n\n# Plot the array using matplotlib\nplt.imshow(img_bw_arr, cmap=plt.cm.gray)\nplt.show()\n\n# Plot the kde of the new array\nplot_kde(img_bw_arr, 'k')","2ee89543":"# Labels as a dictionary\nimage_labels = { 'buildings':0, 'forest':1, 'glacier':2, 'mountain':3, 'sea':4, 'street':5}\n\n# Labels as a dictionary (inverse)\nimage_labels_inv = { 0:'buildings', 1:'forest', 2:'glacier', 3:'mountain', 4:'sea', 5:'street'}\n\n\n# create an empty list\nlabels = []\n\n# Loop over images\nfor folder in os.listdir(path):\n    for file in os.listdir(Path(path, folder)):\n        img = Image.open(Path(path, folder, file))\n        #if np.array(img).shape == (150, 150, 3): \n        labels.append([(int(os.path.splitext(file)[0])), image_labels.get(folder)])\n        \nlabels = pd.DataFrame(labels, columns=['id','label'])\nlabels = labels.set_index('id')\nlabels.head()","68cc13c9":"# Convert an image id into the numpy array of the corresponding image\ndef get_image(row_id):\n    filename = '{}.jpg'.format(row_id)\n    folder = image_labels_inv.get(labels.loc[row_id, 'label'])\n    filepath = Path(path, folder, filename)\n    img = Image.open(filepath)\n    return np.array(img.resize((150,150)))","d26fb3ec":"#  Data from the tenth id in the sea images\nsea_id = labels[labels.label == 4].index[9]\n\nplt.imshow(get_image(sea_id))\nplt.show() ","d7d170db":"# Number of images per class\nfor i in range(6):\n    print(i, labels[labels.label == i].size)","5fe5ee25":"# the mentioned sea image\nsea = get_image(sea_id)\n\n# Get the shape of the sea image\nprint('The color image has shape: ', sea.shape)\n\n# Convert to greyscale using rgb2gray\ngray_sea = rgb2gray(sea)\n\n# Show the greyscale image\nplt.imshow(gray_sea, cmap=mpl.cm.gray)\n\n\n# Get the shape of the gray image\nprint('The gray image has shape: ', gray_sea.shape)","c3282c48":"# Applying HOG on the gray sea\nhog_features, hog_image = hog(gray_sea, visualize=True, block_norm='L2-Hys', pixels_per_cell=(16,16))\n\n# Show the HOG image\nplt.imshow(hog_image, cmap=mpl.cm.gray)","81261edc":"def create_features(img):\n    # Flatten the color image\n    color_features = img.flatten()\n    # Convert image to grayscale\n    gray_image = rgb2gray(img)\n    # Get HOG of the gray image\n    hog_features = hog(gray_image, block_norm='L2-Hys', pixels_per_cell=(16,16))\n    # Combine color features\n    flat_features = np.hstack((color_features, hog_features))\n    return flat_features\n    \nsea_features = create_features(sea)\n\n# Get the shape of sea image features\nprint(sea_features.shape)\n\nimage_features = sea_features","d597798e":"def create_feature_matrix(df):\n    features_list = []\n    \n    for img_id in df.index:\n        # Load image\n        img = get_image(img_id)\n        # Get features for image\n        image_features = create_features(img).astype(np.float32)\n        # Add to the list\n        #features_list = np.hstack((features_list, image_features))\n        features_list.append(image_features)\n\n    # Convert the list into a matrix\n    features_list = np.array(features_list)\n    return features_list\n\n# Run the defined function\nfeature_matrix = create_feature_matrix(labels)","5a905ebc":"# Get the shape of feature matrix\nprint('The shape of the feature matrix is:', feature_matrix.shape)","e8cdaaf9":"# Initiate StandardScaler\nss = StandardScaler()\n# Apply the scaler\nfeature_matrix = ss.fit_transform(feature_matrix)","055a89d6":"pca = PCA(n_components=7000)\n# use fit_transform to run PCA on our standardized matrix\nfeature_matrix = pca.fit_transform(feature_matrix)\n# look at new shape\nprint('PCA matrix shape is: ', feature_matrix.shape)","18e754ee":"y = labels.label.values\nX_train, X_test, y_train, y_test = train_test_split(feature_matrix, y, test_size=.3)\n\n# look at the distrubution of labels in the train set\npd.Series(y_train).value_counts()","17a05e65":"# define support vector classifier\nsvm = SVC(kernel='linear', probability=True)\n\n# fit model\nsvm.fit(X_train, y_train)","ac4b5ce2":"# generate predictions\ny_pred = svm.predict(X_test)\n\n# calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('Model accuracy is: ', accuracy)","4b73259c":"classification_report(y_test, y_pred)","629684bf":"Hello all,\n\nI've done this work based on what I've learned from my data science journey, especially with DataCamp, which involves manipulatiion, visualization, and classification using SVM (let's call it shallow learning ;-) Although expected to be less accurate than the neural networks, I wanted to see the performance \/ accuracy of SVM for this dataset. This kernel will be followed by another one on Deep Learning with CNN. Your questions, comments and tips are more than welcome.\n\nCheers,\n\nBehrouz","4ed5390c":"### 2. Opening images with PIL","4b57d388":"### 8. Multi-Labeles","63fd6003":"### 5. Explore the channels","6c4703d0":"### 13. StandardScaler","7a7606b8":"### 9. Color to gray using rgb2gray","d97bca08":"### 14. Split into train and test sets","8ff0bd9e":"### 6. Image from differnt classes","6c1b78ea":"### 4. Image as an array of data","73440c5b":"### 10. Histogram of oriented gradients (HOG)","a551b365":"### 7. Convert to grayscale","2a0a0020":"### 12. Create features for all the images","ab1a1f82":"### 11. Create image features","b57bc77b":"These results show that the Kernel Density Estimate is not a suitable method for differentiating different image classes.","2db31dc6":"### 1. Import the needed libraries","c509622d":"### 3. Image manipulation","6cf99ffb":"### 16. Accuracy","7509ba06":"### 15. Support Vector Machine (SVM) "}}