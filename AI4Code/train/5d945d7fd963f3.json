{"cell_type":{"5511eb3d":"code","516f4545":"code","66bcfe41":"code","4fc250dd":"code","87d8570c":"code","e37edec4":"code","b9b9168c":"code","534dfc61":"code","422ea4a6":"code","1f782e85":"code","2af4dc27":"code","5cdd2519":"code","6c78c86c":"code","c460f0b6":"code","66a841ee":"code","8b0febab":"code","d3ee9832":"code","017b83b9":"code","b17aef1b":"code","38cd567a":"code","3f42cf7e":"code","5c704e10":"code","a996052e":"code","ce0ab093":"code","1696c8c1":"code","f8ebfc07":"code","50154b8b":"code","00b8b47e":"code","fe40de7d":"code","baf0cfcb":"code","ec48c0dc":"code","a696d9e2":"code","a4c1455c":"code","3bf47c55":"code","407f68fe":"code","25052efe":"code","f11e0071":"code","3a46b308":"code","ea634662":"code","aa815c0f":"code","67f71de8":"code","4ece537d":"code","c75c4352":"code","cfa3a449":"code","7dbb0565":"code","c7b3b3bd":"code","6d698e2b":"code","4d6c3e9f":"code","92dc3432":"code","5c5445fc":"code","0784f081":"code","efff46c5":"code","6e23b861":"code","13a5df5a":"code","d050d4cf":"code","8f62f569":"code","4f95268e":"code","6e38c527":"code","37c35588":"code","af1285be":"code","85d67390":"code","255c2d7c":"code","1bd5caa9":"code","deafe322":"code","646ed163":"code","861fda48":"code","ee093c3f":"code","17504ee4":"code","ffe125b1":"code","91019ddb":"code","41e1844f":"code","5310d6f0":"code","7958c45c":"code","15334804":"code","de64e348":"code","e2b0a463":"code","7a890a2a":"code","a13e68ab":"code","6090a540":"code","547dd29d":"code","489ed766":"code","18c51d03":"code","28d0a798":"code","80b8fea0":"code","c9a2fc1d":"code","4c1ddb43":"code","17e621dc":"code","459b2794":"code","ec5a3dad":"code","3c09f022":"code","8b6b12bd":"code","87e12717":"code","e77be1e5":"code","6806fa58":"code","b61a5a62":"code","81083697":"code","f6ffada6":"code","b474071d":"code","7344fa90":"code","d3777512":"code","a2be2eae":"code","b470d1d1":"code","9110ddd0":"code","3025a6f5":"code","04018450":"code","62d864a9":"code","8558c7a0":"code","b0d13b6d":"code","a115ecfc":"code","ce43391d":"code","3a278b89":"code","85a9e924":"code","9e581f40":"code","15840e87":"code","bb8a4503":"code","4f7be358":"code","09522e04":"code","6ebbcaac":"code","11bf65f5":"code","c767dd85":"code","a9b3bc83":"code","085bba74":"code","704ec80c":"code","00a85f2c":"code","69718723":"code","6c9ee87e":"code","96256dd6":"code","e1c1e81e":"code","440fe840":"code","4892a286":"code","03e70611":"code","6766dc36":"code","077f862b":"code","e9839101":"code","08f19da3":"code","0bdccc38":"code","3a72c8bf":"code","4a9df1a8":"code","1b2a3c7e":"code","aa8d2366":"code","c381b482":"code","442529fe":"code","7d237799":"code","0db19ea2":"code","157c6f43":"code","b21b1a3e":"code","4050cb35":"code","8f09c504":"code","3b829310":"code","a59f1c1a":"code","6b2e13d2":"code","ac80d420":"code","167697e9":"code","3d08fb1e":"code","9c71dc1e":"code","e853777f":"code","59cab868":"code","b50deb53":"code","9391abd5":"code","0ae224c1":"code","25ee9710":"code","715d1c59":"code","1df1c6a2":"code","5629a343":"code","74f809fc":"code","904016cb":"code","7fe40bc4":"code","b82d3c93":"code","5f65597c":"code","5f91f773":"code","cfe658f6":"code","b34d1aed":"code","b9153f54":"code","72ba22ce":"code","19788f23":"code","df8df9ca":"code","09d927a9":"code","80cc0f45":"code","75982577":"code","e137b587":"code","e3408323":"code","f99cb758":"code","30cada05":"code","56f95836":"code","d6fc3bbe":"markdown","9e3548a2":"markdown","992dccc0":"markdown","4f22ba75":"markdown","47bc72bf":"markdown","4cf039b1":"markdown","76ed82ec":"markdown","359d1d98":"markdown","6799be93":"markdown","be06bb10":"markdown","b9e04dbb":"markdown","6a8d88ee":"markdown","dc9fe4b6":"markdown","14607aa9":"markdown","a3480eb3":"markdown","e64b9df0":"markdown","bc3e9a24":"markdown","626d3182":"markdown","522b661c":"markdown","9e8cafee":"markdown","bb212d78":"markdown","ee8b42c8":"markdown","79bb4f40":"markdown","b7597c8f":"markdown","f428393d":"markdown","55bb41bc":"markdown","c83ce309":"markdown","052aeec2":"markdown","4ce4657e":"markdown","e02ea449":"markdown","151c3530":"markdown","97d5744d":"markdown","dae1f230":"markdown","6bc1ea8c":"markdown","f8293fd6":"markdown","374b1a64":"markdown","82883b45":"markdown","05c0cdca":"markdown","ca57e748":"markdown","33a1a657":"markdown","8fa5bd79":"markdown","d3452055":"markdown","df59d323":"markdown","f4c415c9":"markdown","3a55f1c9":"markdown","f9ca5409":"markdown","951b39b6":"markdown","00327281":"markdown","158b187e":"markdown","2906295a":"markdown","ed91b6dc":"markdown","cd307a10":"markdown","10150d0d":"markdown","6d5ad621":"markdown","5bab8c9a":"markdown","01fbab67":"markdown","fcfeafc0":"markdown","ba8e6b62":"markdown","2283fb66":"markdown","15232975":"markdown","34b45ff7":"markdown","28f41836":"markdown","9e15869c":"markdown","d568b65e":"markdown","ae678aa0":"markdown","b7c75838":"markdown"},"source":{"5511eb3d":"# import all requiring libraries\n\n# Pandas & NumPy Profiling\n\nimport pandas as pd\nimport numpy as np\nimport pandas_profiling as pdp\nfrom pandas_profiling import ProfileReport\n\n# Visialisation profiling\n\nfrom PIL import Image\nimport scipy.misc\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.patches as patches\nfrom matplotlib import animation,rc\nfrom matplotlib import animation\nfrom matplotlib.animation import FFMpegWriter\nimport matplotlib.animation as animation\nimport seaborn as sns\nimport dateutil\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nfrom IPython.display import Video\n\nimport io\nimport re\nimport os\n#from os import startfile\nimport os.path as path\nimport requests\nfrom glob import glob # for combining several CSV files\nimport altair as alt\nfrom math import radians","516f4545":"# open Dataframe CSV file \ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\ngames","66bcfe41":"# Check Dataframe shape\ngames.shape","4fc250dd":"# Check Dataframe info()\ngames.info()","87d8570c":"# check Dataframe NULL values\ngames.isnull().sum()","e37edec4":"# Check Dataframe duplication\ngames.duplicated().sum()","b9b9168c":"#Check Dataframe unique values\ngames.nunique()","534dfc61":"# correct data type for \"gameDate , gameTimeEastern\" to be time stamp\ngames.gameDate = pd.to_datetime(games.gameDate)\ngames.gameTimeEastern = pd.to_datetime(games.gameTimeEastern)","422ea4a6":"# open Dataframe CSV file \nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\nplays.head(2)","1f782e85":"# Check Dataframe shape\nplays.shape","2af4dc27":"# Check Dataframe info()\nplays.info()","5cdd2519":"# Check Dataframe duplication\nplays.duplicated().sum()","6c78c86c":"# check Dataframe NULL values\nplays.isnull().sum()","c460f0b6":"plays.columns","66a841ee":"# complete missing data in column \"gameClock\" from column\"playDescription\"\nplays['gameClock'] = plays.playDescription.str.split(')', n = 1, expand = True)\nplays.gameClock = plays.gameClock.apply(lambda x:x.replace('(:', '00:'))\nplays.gameClock = plays.gameClock.apply(lambda x:x.strip('('))","8b0febab":"# correct data type for \"gameClock\" to be time stamp\nplays.gameClock = pd.to_datetime(plays.gameClock)","d3ee9832":"plays.info()","017b83b9":"# convert cells have \"EMPTY\" value at colomn\"offenseFormation\" to Nan Value\nplays.offenseFormation = plays.offenseFormation.replace('EMPTY',np.nan)","b17aef1b":"plays.offenseFormation.unique()","38cd567a":"# replace NUll Value with data at column \"playDescription\"\nplays.offenseFormation.fillna(plays.playDescription,inplace =True)","3f42cf7e":"plays.offenseFormation.unique()","5c704e10":"# remove 1st word from text\nplays.offenseFormation = plays.offenseFormation.str.split(n=1).str[-1]","a996052e":"# keep current 1st word now and remove prackets\nplays.offenseFormation = plays.offenseFormation.str.split(')', n = 1, expand = True)\nplays.offenseFormation = plays.offenseFormation.apply(lambda x:x.strip('('))","ce0ab093":"plays.offenseFormation.unique()","1696c8c1":"# replace \"shotgun\" by \"'SHOTGUN'\"\nplays.offenseFormation = plays.offenseFormation.replace('Shotgun','SHOTGUN')","f8ebfc07":"# convert unspecified cells to Null\ndef clean(x):\n    if x == 'I_FORM' or x == 'SINGLEBACK' or x == 'SHOTGUN' or x == 'PISTOL' or x == 'WILDCAT' or x == 'No Huddle' or x == 'JUMBO' or x == 'No Huddle, Shotgun':\n        \n        return x\n    else: \n        return np.nan\nplays.offenseFormation = plays.offenseFormation.apply(clean)","50154b8b":"plays.offenseFormation.unique()","00b8b47e":"plays = plays.drop(['penaltyCodes','penaltyJerseyNumbers'],axis = 1)","fe40de7d":"plays.isnull().sum()","baf0cfcb":"# get mean for each item in columns \"defendersInTheBox, numberOfPassRushers, preSnapVisitorScore, preSnapHomeScore and absoluteYardlineNumber\" \n# and full NULL value\nplays.defendersInTheBox = plays.defendersInTheBox.fillna(plays.groupby('playId')['defendersInTheBox'].transform('mean'))\nplays.numberOfPassRushers = plays.numberOfPassRushers.fillna(plays.groupby('playId')['numberOfPassRushers'].transform('mean'))\nplays.preSnapVisitorScore = plays.preSnapVisitorScore.fillna(plays.groupby('playId')['preSnapVisitorScore'].transform('mean'))\nplays.preSnapHomeScore = plays.preSnapHomeScore.fillna(plays.groupby('playId')['preSnapHomeScore'].transform('mean'))\nplays.absoluteYardlineNumber = plays.absoluteYardlineNumber.fillna(plays.groupby('playId')['absoluteYardlineNumber'].transform('mean'))","ec48c0dc":"plays.isnull().sum()","a696d9e2":"# create list for all 3-letter team code corresponding to line-of-scrimmage\nyard_list = list(plays.yardlineSide.unique())","a4c1455c":"# check the list created\nyard_list","3bf47c55":"# remove Null value from the created list\nyard_list = [x for x in yard_list if str(x) != 'nan']","407f68fe":"# check list\nyard_list","25052efe":"# replace NUll Value with data at column \"playDescription\"\nplays.yardlineSide.fillna(plays.playDescription,inplace =True)","f11e0071":"plays.yardlineSide.unique()","3a46b308":"# create function to replace items in the list \"yard_list\" at column \"yardlineSide\"\ndef find_at_word(text):\n    word=re.findall(r'\\b(?:{})\\b'.format('|'.join(map(re.escape, yard_list))),text)\n    return \" \".join(word)\n\nplays.yardlineSide = plays.yardlineSide.apply(lambda x: find_at_word(x))","ea634662":"plays.yardlineSide.unique()","aa815c0f":"# remove repeated words\nplays.yardlineSide = plays.yardlineSide.str.replace(r'\\b(\\w+)(\\s+\\1)+\\b', r'\\1')","67f71de8":"plays.yardlineSide.unique()","4ece537d":"# add \",\" between team codes corresponding to line-of-scrimmage\nplays.yardlineSide = plays.yardlineSide.str.replace(' ', ',')","c75c4352":"plays.yardlineSide.unique()","cfa3a449":"# Drop un-nessesary column\"playDescription\"\nplays = plays.drop('playDescription',axis = 1)","7dbb0565":"plays.isnull().sum()","c7b3b3bd":"# open Dataframe CSV file \nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\nplayers.head(2)","6d698e2b":"players.info()","4d6c3e9f":"players.birthDate = pd.to_datetime(players.birthDate)","92dc3432":"players.groupby('height').count()","5c5445fc":"# modify the heights and remove \"-\" then convert data type from feet-inch to inches only\ndef height_convert(height):\n    h = height.split('-')\n    if len(h) > 1:\n        return (int(h[0]) * 12 + int(h[1]))\n    else:\n        return height","0784f081":"# change Heights formatted to inches.\nplayers.height = players.height.apply(lambda x: height_convert(x))","efff46c5":"# onvert Datatype at column \"heights\" from string to integer.\nplayers.height = players.height.astype(int)","6e23b861":"players.head(10)","13a5df5a":"players.groupby('height').count()","d050d4cf":"# calculate player Age according to \"birthDate\" column\ndef cal_age(birthDate):\n    today = pd.to_datetime('today')\n    return (today - birthDate).days \/ 365.25","8f62f569":"players['age'] = players.birthDate.apply(cal_age)","4f95268e":"# create bmi column at \"players\" dataFrame using formula \" [weight (lb) \/ height (in) \/ height (in)] x 703 \"\nplayer_weight = players.weight.astype(float)\nplayer_height = players.height.astype(float)\nplayers['bmi'] = player_weight \/ player_height \/ player_height * 703","6e38c527":"players.head(2)","37c35588":"players.info()","af1285be":"## using glob function to combine several CSV files with same strucure \nfiles = sorted (glob('..\/input\/nfl-big-data-bowl-2021\/week*.csv'))\nfiles","85d67390":"# using concat to combined all files and assign() methods\nweeks = pd.concat((pd.read_csv(file).assign(filename = file) for file in files), ignore_index = True)\nweeks","255c2d7c":"weeks.filename.unique()","1bd5caa9":"# modify file path to week number.\nweeks.filename = weeks.filename.str.replace('..\/input\/nfl-big-data-bowl-2021\/', '')\nweeks.filename = weeks.filename.str.replace('.csv', '')\nweeks.filename = weeks.filename.str.replace('week', '')\nweeks","deafe322":"# change column \"filename to \"week\"\nweeks = weeks.rename(columns = {'filename' :'week'})","646ed163":"# convert Datatype at column \"week\" from string to integer.\nweeks.week = weeks.week.astype('int64')","861fda48":"weeks.info()","ee093c3f":"weeks.head(2)","17504ee4":"# Check Dataframe duplication\nweeks.duplicated().sum()","ffe125b1":"# drop douplication at df_weeks\nweeks = weeks.drop_duplicates()","91019ddb":"weeks.info()","41e1844f":"# Copying the original DataFrames\ndf_games = games.copy()\ndf_plays = plays.copy()\ndf_players = players.copy()\ndf_weeks = weeks.copy()","5310d6f0":"df_games.info()","7958c45c":"df_games['game_date'] = pd.to_datetime(df_games.gameDate)","15334804":"date = df_games.game_date.groupby([df_games.game_date.dt.month, df_games.game_date.dt.year]).count()\nax = date.plot(kind ='line',figsize = (10,8), marker = 'o')       \nplt.title('Matches Played per Month', weight = 'bold', size = 15)\nplt.xlabel('Date(Month-Year)', size = 15)\nplt.ylabel('Total Matches Played', size = 15)\nplt.xticks([0, 1, 2, 3], ['Sep-18', 'Oct-18', 'Nov-18', 'Dec-18'])\nplt.grid(True)\nplt.show();","de64e348":"date = df_games.game_date.groupby([df_games.game_date.dt.month,df_games.game_date.dt.day]).count()\nax = date.plot(kind ='line',figsize = (20,8), marker = 'o')\nplt.title('Matches Played per Day', weight = 'bold', size = 15)\nplt.xlabel('Date(Day-Month)', size = 15)\nplt.ylabel('Total Matches Played', size = 15)\nplt.xticks([0, 4, 10, 13, 17, 21, 24, 30, 36, 39, 43, 49],\n           ['6th-Sep', '16th-Sep', '30th-Sep', '7th-Oct', '15th-Oct', '25th-Oct', '1st-Nov', '15th-Nov', '29th-Nov', '6th-Dec', '15th-Dec', '30th-Dec'])\nplt.grid(True)\nplt.show();","e2b0a463":"# combine 2 colums \"homeTeamAbbr\" & \"gameId\" then sort home teams desending regarding number of games played results\ndf_play_home_game_sort = df_games.groupby('homeTeamAbbr')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = False )\n\n# combine 2 colums \"visitorTeamAbbr\" & \"gameId\" then sort away teams desending regarding number of games played results\ndf_play_away_game_sort = df_games.groupby('visitorTeamAbbr')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = False )","7a890a2a":"fig,(ax1,ax2) = plt.subplots (1,2,figsize = (16,20))\n\n# figure \"a\" represent number of Home Teams in NFL \na = sns.barplot (x = df_play_home_game_sort.gameId, y = df_play_home_game_sort.homeTeamAbbr, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# figure \"a\" represent number of Visitor Teams in NFL \nb = sns.barplot (x = df_play_away_game_sort.gameId, y = df_play_away_game_sort.visitorTeamAbbr, ax = ax2 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of Matches in each Home Teams\nfor i,j in enumerate(df_play_home_game_sort.gameId):\n        ax1.text(.07,i+0.15,j,weight = \"bold\", size = 15)\n\n# create loop to count number of Matches in each Visitor Teams\nfor k,l in enumerate(df_play_away_game_sort.gameId):\n        ax2.text(.07,k+0.15,l,weight = \"bold\", size = 15)     \n        \na.set_title(\"Total Games played as Home Team\" , weight = 'bold', size = 15)\na.set_xlabel('Total Home Games Count', size = 15)\na.set_ylabel('NFL Team', size = 15)\n\nb.set_title(\"Total Games played as Visitor Team\" , weight = 'bold', size = 15)\nb.set_xlabel('Total Visitor Games Count', size = 15)\nb.set_ylabel('NFL Team', size = 15)\nplt.show();","a13e68ab":"# combine 2 colums \"week\" & \"gameId\" then sort weeks desending regarding number of games played results\ndf_week_game_sort = df_games.groupby('week')['gameId'].count().reset_index().sort_values( by = 'week' )","6090a540":"fig, ax1 = plt.subplots (1,figsize = (8,12))\n\n# figure \"a\" represent number of Games played per week\na = sns.barplot (x = df_week_game_sort.gameId, y = df_week_game_sort.week, ax = ax1 , linewidth = 1 ,\n                 alpha = 0.7, palette = 'Blues_r', orient = 'h')\n\n\n# create loop to count number of games in each week\nfor i,j in enumerate(df_week_game_sort.gameId):\n        ax1.text(0.5,i+0.1,j,weight = \"bold\", size = 15)\n\na.set_title(\"Total Total Games Count per Week Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Games Count', size = 15)\na.set_ylabel('Weeks Number', size = 15)\nplt.yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n           ['Week 1','Week 2','Week 3','Week 4','Week 5','Week 6','Week 7','Week 8','Week 9','Week 10','Week 11','Week 12','Week 13','Week 14','Week 15','Week 16','Week 17'])\nplt.show();","547dd29d":"# Count total Number of Team joined NFL?\nprint ('='*80+'\\n')\nprint('we have {} Teams Joined in NFL Champions, listed as below:\\n\\n {}'.format(df_games.homeTeamAbbr.nunique(), df_games.homeTeamAbbr.unique()))\nprint ('\\n'+'='*80)","489ed766":"df_players.height.describe()","18c51d03":"# plot the players Hight distribution\nplt.figure(figsize =[15,6])\nbins = np.arange(df_players.height.min(), df_players.height.max() + 1, 1)\nplt.hist(x = df_players.height,bins = bins, ec = 'black', alpha = 0.7)\n\nplt.xlabel('Height (Inches)',size = 14)\nplt.ylabel('Total Plyers Count',size = 14)\nplt.title(\"Player Height Distribution\",size = 16, weight = 'bold')\nplt.show();","28d0a798":"# combine 2 colums \"displayName\" & \"height\" then Player's name desending regarding the heighest players.\ndf_height_sort = pd.DataFrame(df_players.groupby('height')['displayName'].value_counts().sort_values( ascending = False))\ndf_height_sort = df_height_sort.drop('displayName', axis = 1).reset_index()","80b8fea0":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of player heighest\na = sns.barplot (x = df_height_sort.height, y = df_height_sort.displayName[:20], ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count players depend on height player.\nfor i,j in enumerate(df_height_sort.height[:20]):\n        ax1.text(.7,i+0.08,'{:0.1f}'.format(j),weight = \"bold\", size = 15)\n\na.set_title(\"Top Players Heighst Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Player Height (Inches)', size = 15)\na.set_ylabel('Player\\'s  Distribution', size = 15)\nplt.show();","c9a2fc1d":"# plot the players Weight distribution\nplt.figure(figsize =[20,8])\nbins = np.arange(df_players.weight.min(), df_players.weight.max() + 1, 1)\nplt.hist(x = df_players.weight, bins = bins, ec = 'black', alpha = 0.7)\n\nplt.xticks([150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350],\n           ['150','160','170','180','190','200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350'])\nplt.xlabel('Weight (Ibs)',size = 15)\nplt.ylabel('Total Plyers Count',size = 14)\nplt.title(\"Player Weight Distribution\",size = 15, weight = 'bold')\nplt.show();","4c1ddb43":"# combine 2 colums \"displayName\" & \"weight\" then Player's name desending regarding the player's weight.\ndf_weight_sort = pd.DataFrame(df_players.groupby('weight')['displayName'].value_counts().sort_values( ascending = False))\ndf_weight_sort = df_weight_sort.drop('displayName', axis = 1).reset_index()","17e621dc":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of player weight\na = sns.barplot (x = df_weight_sort.weight, y = df_weight_sort.displayName[:20], ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count players depend on weight player.\nfor i,j in enumerate(df_weight_sort.weight[:20]):\n        ax1.text(.7,i+0.08,'{:0.1f}'.format(j),weight = \"bold\", size = 15)\n\na.set_title(\"Top Players Weight Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Player Weight (Ibs)', size = 15)\na.set_ylabel('Player\\'s  Distribution', size = 15)\nplt.show();","459b2794":"# plot the players Age distribution\nplt.figure(figsize =[20,8])\nbins = np.arange(df_players.age.min(), df_players.age.max() + 1, 1)\nplt.hist(x = df_players.age, bins = bins, ec = 'black', alpha = 0.7)\n\nplt.xticks([22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],\n           ['22','23','24','25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44'])\n\nplt.xlabel('Age (Year)',size = 15)\nplt.ylabel('Total Plyers Count',size = 15)\nplt.title(\"Player Age Distribution\",size = 15, weight = 'bold')\nplt.show();","ec5a3dad":"# combine 2 colums \"displayName\" & \"age\" then Player's name desending regarding the player'sage.\ndf_age_sort = pd.DataFrame(df_players.groupby('age')['displayName'].value_counts().sort_values( ascending = False))\ndf_age_sort = df_age_sort.drop('displayName', axis = 1).reset_index()","3c09f022":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of player age.\na = sns.barplot (x = df_age_sort.age, y = df_age_sort.displayName[:20], ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count players depend on age player.\nfor i,j in enumerate(df_age_sort.age[:20]):\n        ax1.text(.7,i+0.08,'{:0.2f}'.format(j),weight = \"bold\", size = 15)\n\na.set_title(\"Top Players Age Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Player Age', size = 15)\na.set_ylabel('Player\\'s  Distribution', size = 15)\nplt.show();","8b6b12bd":"# create bmi column at \"players\" dataFrame using formula \" [weight (lb) \/ height (in) \/ height (in)] x 703 \"\ndf_players['bmi'] = df_players.weight \/ df_players.height \/ df_players.height * 703","87e12717":"# check creatig new column\ndf_players.head()","e77be1e5":"# plot the players BMI distribution\nplt.figure(figsize =[20,8])\nbins = np.arange(df_players.bmi.min(), df_players.bmi.max() + 1, 1)\nplt.hist(x = df_players.bmi, bins = bins, ec = 'black', alpha = 0.7)\n\nplt.xticks([22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48],\n           ['22','24','26','28','30','32', '34', '36', '38', '40', '42', '44', '46', '48'])\nplt.xlabel('BMI',size = 15)\nplt.ylabel('Total Plyers Count',size = 14)\nplt.title(\"Player BMI Distribution\",size = 15, weight = 'bold')\nplt.show();","6806fa58":"# combine 2 colums \"displayName\" & \"bmi\" then Player's name desending regarding the player's bmi.\ndf_bmi_sort = pd.DataFrame(df_players.groupby('bmi')['displayName'].value_counts().sort_values( ascending = False))\ndf_bmi_sort = df_bmi_sort.drop('displayName', axis = 1).reset_index()","b61a5a62":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of player weight\na = sns.barplot (x = df_bmi_sort.bmi, y = df_bmi_sort.displayName[:20], ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count players depend on weight player.\nfor i,j in enumerate(df_bmi_sort.bmi[:20]):\n        ax1.text(.7,i+0.08,'{:0.1f}'.format(j),weight = \"bold\", size = 15)\n\na.set_title(\"Top Players BMI Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('BMI', size = 15)\na.set_ylabel('Player\\'s  Distribution', size = 15)\nplt.show();","81083697":"# combine 2 colums \"collegeName\" & \"nflId\" then sort colleges desending regarding number of players \ndf_team_sort = df_players.groupby('collegeName')['nflId'].count().reset_index().sort_values( by = 'nflId', ascending = False )","f6ffada6":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of players in top 20 colleges \na = sns.barplot (x = df_team_sort.nflId, y = df_team_sort.collegeName[:20], ax = ax1, linewidth = 1, alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players in each college\nfor i,j in enumerate(df_team_sort.nflId[:20]):\n        ax1.text(.7,i+0.15,j,weight = \"bold\", size = 15)\n\na.set_title(\"Top 20 College Name Vs. Players Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Players count', size = 15)\na.set_ylabel('Top 20 College Vs. Dstribution', size = 15)\nplt.show();","b474071d":"# combine 2 colums \"position\" & \"nflId\" then sort postions desending regarding number of players\ndf_position_sort = df_players.groupby('position')['nflId'].count().reset_index().sort_values( by = 'nflId', ascending = False)","7344fa90":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of players in All Position\na = sns.barplot (x = df_position_sort.nflId, y = df_position_sort.position, ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players in each Position\nfor i,j in enumerate(df_position_sort.nflId):\n        ax1.text(.7,i+0.08,j,weight = \"bold\", size = 15)\n\na.set_title(\"Positions Vs. Players Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Players count', size = 15)\na.set_ylabel('Player Positions Distribution', size = 15)\nplt.show();","d3777512":"# Create Heatmap for player attributions(height, weight,bmi,age)\nplt.figure(figsize=(12,6))\nsns.heatmap(df_players[['height','weight','age','bmi']].describe()[1:].transpose(),annot=True,cmap = plt.cm.plasma, \n            linecolor=\"white\",linewidths=2)\nplt.title('Player attributes Summary', weight = 'bold', size = 20)\nplt.ylabel('', size = 15)\nplt.show();","a2be2eae":"# get correlation in specific columns\ncorrelation = df_players.corr()\nplt.figure(figsize=(6,5))\n\n# create heatmap plot\nsns.heatmap(correlation,annot=True ,cmap = plt.cm.plasma, linecolor='white', linewidths=2)\nplt.title('Correlation Between Variables')\nplt.show();","b470d1d1":"# Count total Number of players joined NFL?\nprint ('='*80+'\\n')\nprint('we have {} of players Joined in NFL Champions, listed as below:\\n\\n {}'.format(df_players.displayName.nunique(), list(df_players.displayName.unique())))\nprint ('\\n'+'='*80)","9110ddd0":"# Count total Number of College joined NFL?\nprint ('='*80+'\\n')\nprint('we have {} college Joined in NFL Champions, listed as below:\\n\\n {}'.format(df_players.collegeName.nunique(), list(df_players.collegeName.unique())))\nprint ('\\n'+'='*80)","3025a6f5":"df_plays.offenseFormation.value_counts()","04018450":"# 1st plot: \"offenseFormation\" analysis\nplt.figure(figsize=[16, 6])\ncolor_base = sns.color_palette()[0]\n\nax = sns.countplot(data = df_plays, x = 'offenseFormation', color = color_base, order = df_plays.offenseFormation.value_counts().index)\n\nfor i,j in enumerate (df_plays.offenseFormation.value_counts()):\n    ax.text(i,100 + df_plays.offenseFormation.value_counts()[i], j, weight = \"bold\", size = 13,va='baseline', ha='center')\n    \nplt.yticks([0, 2000, 4000, 6000, 8000, 10000, 12000, 14000],['0','2K','4K','6K','8K','10K','12K','14K'])\nplt.xlabel('Offense Formation', size = 15)\nplt.ylabel('Total Player Count', size = 15)\nplt.title('Player Position Distribution', size = 15, weight = 'bold')\nplt.show();","62d864a9":"# Two plots: \"defendersInTheBox\" and \"numberOfPassRushers\" analysis\nplt.figure(figsize=[18, 6])\nbins_defendersInTheBox = np.arange(df_plays.defendersInTheBox.min(), df_plays.defendersInTheBox.max() + 1, 1)\nbins_numberOfPassRushers = np.arange(df_plays.numberOfPassRushers.min(), df_plays.numberOfPassRushers.max() + 1, 1)\n\nplt.subplot(1, 2, 1)\nplt.hist(x = df_plays.defendersInTheBox, bins = bins_defendersInTheBox ,ec = 'black', alpha = 0.7)\nplt.yticks([0, 2000, 4000, 6000, 8000],['0','2K','4K','6K','8K'])\nplt.xlabel('defendersInTheBox', size = 15)\nplt.ylabel('Total Player Count', size = 15)\nplt.title('Number Of Defenders Distribution', size = 15, weight = 'bold')\n\nplt.subplot(1, 2, 2)\nplt.hist(x = df_plays.numberOfPassRushers, bins = bins_numberOfPassRushers,  ec = 'black', alpha = 0.7)\nplt.yticks([0, 2000, 4000, 6000, 8000, 10000, 12000],['0','2K','4K','6K','8K', '10K', '12K'])\nplt.xlabel('numberOfPassRushers', size = 15)\nplt.ylabel('Total Player Count', size = 15)\nplt.title('Number Of Pass Rushers Distribution', size = 15, weight = 'bold')\nplt.show();","8558c7a0":"# plot: \"absoluteYardlineNumber\" distribution\nplt.figure(figsize =[20,8])\nbins = np.arange(df_plays.absoluteYardlineNumber.min(), df_plays.absoluteYardlineNumber.max() + 1, 1)\nplt.hist(x = df_plays.absoluteYardlineNumber, bins = bins, ec = 'black', alpha = 0.7)\nplt.xticks([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],\n           ['10','20','30', '40', '50', '60', '70', '80', '90', '100', '110']);\n\nplt.xlabel('absolute Yard line Number',size = 15)\nplt.ylabel('Total Plyers Count',size = 15)\nplt.title(\"Absolute Yard line Number Distribution\",size = 15, weight = 'bold')\nplt.show();","b0d13b6d":"#Plot : \"offensePlayResult\" Distribution\nplt.figure(figsize =[14,8])\nbins = np.arange(df_plays.offensePlayResult.min(), df_plays.offensePlayResult.max() + 1, 1)\nplt.hist(x = df_plays.offensePlayResult, bins = bins, ec = 'black', alpha = 0.7)\n\nplt.xticks([-20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80],\n           ['-20','-10','0', '10', '20', '30', '40', '50', '60', '70', '80']);\nplt.yticks([1000, 2000, 3000, 4000, 5000, 6000, 7000],['1K', '2K', '3K', '4K', '5K', '6K', '7K'])\nplt.xlabel('offensePlayResult',size = 15)\nplt.ylabel('Total Plyers Count',size = 15)\nplt.title(\"offense Play Result Distribution\",size = 15, weight = 'bold')\nplt.show();","a115ecfc":"# two plots: \"preSnapHomeScore\" and \"preSnapVisitorScore\" at Home\/Visitor  Distribution\nplt.figure(figsize=[18, 6])\nbins_preSnapHomeScore = np.arange(df_plays.preSnapHomeScore.min(), df_plays.preSnapHomeScore.max() + 1, 1)\nbins_preSnapVisitorScore = np.arange(df_plays.preSnapVisitorScore.min(), df_plays.preSnapVisitorScore.max() + 1, 1)\n\nplt.subplot(1, 2, 1)\nplt.hist(x = df_plays.preSnapHomeScore,bins = bins_preSnapHomeScore, ec = 'black', alpha = 0.7)\nplt.yticks([0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000],['0','0.5K','1K','1.5K','2K', '2.5K', '3K', '3.5K', '4K'])\nplt.xlabel('preSnapHomeScore', size = 15)\nplt.ylabel('Total Player Count', size = 15)\nplt.title('preSna pHome Scores Distribution', size = 15, weight = 'bold')\n\nplt.subplot(1, 2, 2)\nplt.hist(x = df_plays.preSnapVisitorScore, bins = bins_preSnapVisitorScore,  ec = 'black', alpha = 0.7)\nplt.yticks([0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000],['0','0.5K','1K','1.5K','2K', '2.5K', '3K', '3.5K', '4K'])\nplt.xlabel('preSnapVisitorScore', size = 15)\nplt.ylabel('Total Player Count', size = 15)\nplt.title('preSnap Visitor Score Distribution', size = 15, weight = 'bold')\nplt.show();","ce43391d":"# combine 2 colums \"possessionTeam\" & \"playId\" then sort Teams desending regarding number of players \ndf_postion_player_sort = df_plays.groupby('possessionTeam')['playId'].count().reset_index().sort_values( by = 'playId', ascending = False )","3a278b89":"fig, ax1 = plt.subplots (1,figsize = (10,16))\n\n# figure \"a\" represent number of players in all teams. \na = sns.barplot (x = df_postion_player_sort.playId, y = df_postion_player_sort.possessionTeam, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players in each team\nfor i,j in enumerate(df_postion_player_sort.playId):\n        ax1.text(0.7,i+0.2,j,weight = \"bold\", size = 15)\n\n# create loop to count number of players in each college\n\na.set_title(\"Total Number of Players per Team Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Player Count', size = 15)\na.set_ylabel('Team Distribution', size = 15)\nplt.show();","85a9e924":"# combine 3 colums \"possessionTeam\", \"passResult\" & \"playId\" then sort team positions desending regarding number of players achieve pass attempts result\ndf_postion_pass_player_sort = df_plays.groupby(['possessionTeam', 'passResult'])['playId'].count().reset_index().sort_values( by = 'playId', ascending = False )\ndf_complete_postion_pass_player_sort = df_postion_pass_player_sort.query('passResult == \"C\"')","9e581f40":"fig, ax1 = plt.subplots (1,figsize = (14,20))\n\n# figure \"a\" represent number of players acheive pass attempts result in all teams.\na = sns.barplot (x = df_complete_postion_pass_player_sort.playId, y = df_complete_postion_pass_player_sort.possessionTeam, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players players acheive pass attempts result in each teams.\nfor i,j in enumerate(df_complete_postion_pass_player_sort.playId):\n        ax1.text(.7,i+0.1,j,weight = \"bold\", size = 15)\n        #ax1.text(3.7,i+0.1,j \/ df_postion_player_sort.playId, weight = \"bold\", size = 15)\n        \n# create loop to count number of players in each college\n\na.set_title(\"Total Number of Players Completing the pass attempt Vs. Positions Team Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Counts of Player Completing the pass attempts', size = 15)\na.set_ylabel('Positions Team', size = 15)\nplt.show();","15840e87":"df_complete_postion_pass_player_percentage = df_complete_postion_pass_player_sort.copy()\ndf_complete_postion_pass_player_percentage = df_complete_postion_pass_player_percentage.merge(df_postion_player_sort, how = 'left', on=['possessionTeam'])\ndf_complete_postion_pass_player_percentage = df_complete_postion_pass_player_percentage.rename(columns = {'playId_y' :'total_playId', 'playId_x' : 'complete_pass_playId'})\ndf_complete_postion_pass_player_percentage['complete_pass_%'] = (df_complete_postion_pass_player_percentage.complete_pass_playId \n                                                                 \/ df_complete_postion_pass_player_percentage.total_playId) * 100\ndf_complete_postion_pass_player_percentage","bb8a4503":"fig, ax1 = plt.subplots (1,figsize = (14,20))\n\n# figure \"a\" represent number of players acheive pass attempts result in all teams.\na = sns.barplot (x = df_complete_postion_pass_player_percentage['complete_pass_%'], y = df_complete_postion_pass_player_percentage.possessionTeam, \n                 ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players players acheive pass attempts % in each teams.\nfor i,j in enumerate(df_complete_postion_pass_player_percentage['complete_pass_%']):\n        ax1.text(.01,i+0.1,'{:0.2f} %'.format(j),weight = \"bold\", size = 15)\n             \n# create loop to count number of players in each college\na.set_title(\"Percentage of Players Completing the pass attempt Vs. Positions Team Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Percentage of Player Completing the pass attempts', size = 15)\na.set_ylabel('Positions Team', size = 15)\nplt.xticks([0, 10, 20, 30, 40, 50, 60, 70],['0%','10%','20%','30%','40%','50%','60%', '70%'])\nplt.show();","4f7be358":"# combine 2 colums \"typeDropback\" & \"playId\" then sort Player position desending regarding DropBack Type \ndf_dropback_type_sort = df_plays.groupby('typeDropback')['playId'].count().reset_index().sort_values( by = 'playId', ascending = False )","09522e04":"fig, ax1 = plt.subplots (1,figsize = (10,6))\n\n# figure \"a\" represent number of players in all Dropback type\na = sns.barplot (x = df_dropback_type_sort.playId, y = df_dropback_type_sort.typeDropback, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players in each Dropback type\nfor i,j in enumerate(df_dropback_type_sort.playId):\n        ax1.text(0.7,i+0.05,j,weight = \"bold\", size = 15)\n\n# create loop to count number of players in each college\n\na.set_title(\"Total Number of Players Vs. DropBack Type Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Player Counts', size = 15)\na.set_ylabel('DropBack Type', size = 15)\nplt.xticks([0, 2000, 4000, 6000, 8000, 10000, 12000, 14000, 16000],['0','2K','4K','6K','8K','10K', '12K', '14K', '16K'])\nplt.show();","6ebbcaac":"# combine 2 colums \"passResult\" & \"playId\" then sort Player pass result desending regarding number of players \ndf_player_pass_sort = df_plays.groupby('passResult')['playId'].count().reset_index().sort_values( by = 'playId', ascending = False )","11bf65f5":"fig, ax1 = plt.subplots (1,figsize = (10,6))\n\n# figure \"a\" represent number of players in all pass results.\na = sns.barplot (x = df_player_pass_sort.playId, y = df_player_pass_sort.passResult, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players in each pass results.\nfor i,j in enumerate(df_player_pass_sort.playId):\n        ax1.text(0.7,i+0.05,j,weight = \"bold\", size = 15)\n\n# create loop to count number of players in each college\n\na.set_title(\"Total Number of Players Vs. Pass Attempts Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Player Counts', size = 15)\na.set_ylabel('Eeach Pass Attempts', size = 15)\nplt.yticks([0, 1, 2, 3, 4],['Complete pass','Incomplete pass','Quarterback sack' ,'Intercepted pass', 'R'])\nplt.xticks([0, 2000, 4000, 6000, 8000, 10000],['0','2K','4K','6K','8K','10K'])\nplt.show();","c767dd85":"# combine 2 colums \"possessionTeam\" & \"playId\" then sort Player pass result per position desending regarding players results\ndf_player_result_sort = df_plays.groupby('possessionTeam')['playResult'].sum().reset_index().sort_values( by = 'playResult', ascending = False )","a9b3bc83":"fig, ax1 = plt.subplots (1,figsize = (14,20))\n\n# figure \"a\" represent number of players in all pass results per position\na = sns.barplot (x = df_player_result_sort.playResult, y = df_player_result_sort.possessionTeam, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of players in each pass results per position\nfor i,j in enumerate(df_player_result_sort.playResult):\n        ax1.text(.7,i+0.1,j,weight = \"bold\", size = 15)\n              \n# create loop to count number of players in each college\na.set_title(\"Total Play Results Vs. Positions Team Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total Play Results', size = 15)\na.set_ylabel('Positions Team', size = 15)\nplt.xticks([0, 1000, 2000, 3000, 4000, 5000],['0','1K','2K','3K','4K','5K'])\nplt.show();","085bba74":"# combine 2 colums \"personnelD\" & \"offensePlayResult\" then sort mean reult of offensive formation\ndf_offense_play_sort = df_plays.groupby('personnelD')['offensePlayResult'].mean().reset_index().sort_values( by = 'offensePlayResult', ascending = False )","704ec80c":"# plot: \"offensePlayResult\" Distribution\ndf_offense_play_sort.plot(x ='offensePlayResult', y ='personnelD', kind='scatter', s=30, color='blue', figsize = (12,20))\nplt.axvline(x = df_offense_play_sort.offensePlayResult.mean(), color = 'r', linewidth = 3)\nplt.title('Offensive Vs. Defense Formation', weight = 'bold', size = 15)\nplt.xlabel('personne lD', size = 15)\nplt.ylabel('offense Play Result', size = 15)\nplt.xticks([-5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70],\n           ['-5','0','5','10','15','20', '25', '30', '35', '40', '45', '50', '55', '60', '65', '70'])\nplt.show();","00a85f2c":"# combine 2 colums \"possessionTeam\" & \"playId\" then sort mean reult of Complete play pass at each NFL Teams\ndf_plays_team_pass_sort = df_plays.groupby('possessionTeam')['playId'].nunique().reset_index().sort_values( by = 'playId', ascending = False )","69718723":"#plot: Play Pass in eah teams analysis \ndf_plays_team_pass_sort.plot(x ='playId', y ='possessionTeam', kind='scatter', s=30, color='blue', figsize = (10,15))\nplt.axvline(x = df_plays_team_pass_sort.playId.mean(), color = 'r', linewidth = 3)\nplt.title('Teams Vs. Play Pass Distribution',weight = 'bold', size = 15)\nplt.xlabel('Plays Pass', size = 15)\nplt.ylabel('NFL Team', size = 15)\nplt.xticks([400, 450, 500, 550, 600, 650, 700],['400', '450', '500', '550', '600', '650', '700'])\nplt.show();","6c9ee87e":"# combine 2 colums \"playType\" & \"gameId\" then sort play type desending regarding number of games played results\ndf_play_type_sort = df_plays.groupby('playType')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = False )","96256dd6":"fig,ax1 = plt.subplots (1,figsize = (10,4))\n\n# figure \"a\" represent number of play type in all games \na = sns.barplot (x = df_play_type_sort.gameId*100\/df_plays.gameId.count(), y = df_play_type_sort.playType, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, \n        palette = 'Blues_r', orient = 'h')\n\n# create loop to count number of play type in each game\nfor i,j in enumerate(df_play_type_sort.gameId):\n        ax1.text(0.01,i+0.04,'{:0.2f} %'.format(j *100 \/df_plays.gameId.count()),weight = \"bold\", size = 15)\n            \na.set_title(\"Total play type Percentage Distribution\" , weight = 'bold', size = 15)\na.set_xlabel('Total %', size = 15)\na.set_ylabel('Play type', size = 15)\nplt.xticks([0, 10, 20, 30, 40, 50, 60, 70, 80,90,100],['0%','10%','20%','30%','40%','50%','60%', '70%', '80%', '90%', '100%'])\nplt.show();","e1c1e81e":"# get correlation in specific columns\ncorrelation = df_plays.corr()\nplt.figure(figsize=(22,15))\n\n# create heatmap plot\nsns.heatmap(correlation,annot=True ,cmap = plt.cm.plasma, linecolor='white', linewidths=2)\nplt.title('Correlation Between Variables')\nplt.show();","440fe840":"# combine 2 colums \"event\" & \"gameId\" then events desending regarding to All Games. \ndf_event_sort = df_weeks.groupby('event')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = False )","4892a286":"fig, ax1 = plt.subplots (1,figsize = (10,16))\n\n# figure \"a\" represent number of total events at all Games. \na = sns.barplot (x = df_event_sort.gameId, y = df_event_sort.event[1:], ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of each events at all games.\nfor i,j in enumerate(df_event_sort.gameId[1:]):\n        ax1.text(.05,i+0.15,j,weight = \"bold\", size = 13)\n\n# create loop to count number of players in each college\na.set_title(\"Events Vs. Games Distribution\" , weight = 'bold', size = 16)\na.set_xlabel('Total Events Count', size = 15)\na.set_ylabel('Events Distribution', size = 14)\nplt.xticks([0, 50000, 100000, 150000, 200000, 250000],['0','50K','100K','150K','200K','250K'])\nplt.show();","03e70611":"# get correlation in specific columns\ncorrelation = df_weeks.corr()\nplt.figure(figsize=(30,10))\n\n# create heatmap plot\nsns.heatmap(correlation,annot=True ,cmap = plt.cm.plasma, linecolor='white', linewidths=2)\nplt.title('Correlation Between Variables')\nplt.show();","6766dc36":"# get player counts value acheived gameId > 32000 \ntop_rate = df_weeks[df_weeks.gameId  > 32000 ]['displayName'].value_counts().index\n\n# using bckground\" WorldCloud\nw_c = WordCloud(background_color=\"white\",scale=2).generate(\" \".join(top_rate))\nfig = plt.figure(figsize=(15,8))\n\n# plot show in \"bilionear style\"\nplt.imshow(w_c,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Top Rated Players\")\nplt.show();","077f862b":"df_players.columns","e9839101":"df_weeks.columns","08f19da3":"df_weeks_displayname = df_weeks[['nflId', 'displayName', 'gameId']]","0bdccc38":"df_players_displayname = df_players[['nflId', 'displayName']]","3a72c8bf":"# check Dataframe duplication\ndf_weeks_displayname.duplicated().sum()","4a9df1a8":"# drop douplication at df_players_team\ndf_weeks_displayname = df_weeks_displayname.drop_duplicates()","1b2a3c7e":"# merge 2 Dataframe \"df_players\" and \"df_team\"\ndf_displayname = pd.merge(df_players_displayname, df_weeks_displayname, how = 'left', on =['nflId','displayName'])\ndf_displayname","aa8d2366":"# combine 2 colums \"displayName\" & \"gameId\" then sort players desending regarding to total number of games played. \ndf_game_player_sort = df_displayname.groupby('displayName')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = False )","c381b482":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of top players palaying a max. number of games. \na = sns.barplot (x = df_game_player_sort.gameId, y = df_game_player_sort.displayName[:30], ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of max. games player by each player.\nfor i,j in enumerate(df_game_player_sort.gameId[:30]): \n        ax1.text(.05,i+0.15,j,weight = \"bold\", size = 15)\n\na.set_title(\"Total Number of Games played by the top 30 players Distribution\" , weight = 'bold', size = 16)\na.set_xlabel('Total Games Count', size = 15)\na.set_ylabel('Top 20 Player Vs. Games Distribution', size = 14)\nplt.xticks([0, 5, 10, 15, 20, 25, 30, 35],\n           ['0','5','10','15','20','25','30', '35'])\nplt.show();","442529fe":"# combine 2 colums \"displayName\" & \"gameId\" then sort players desending regarding to no games played. \ndf_game_player_nogame_sort = df_displayname.groupby('displayName')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = True )","7d237799":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of top players palaying a zero number of games. \na = sns.barplot (x = df_game_player_nogame_sort.gameId, y = df_game_player_nogame_sort.displayName[:8], ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of max. games player by each player.\nfor i,j in enumerate(df_game_player_nogame_sort.gameId[:8]): \n        ax1.text(.05,i+0.15,j,weight = \"bold\", size = 15)\n\na.set_title(\"Total Number of Games played by the top 30 players Distribution\" , weight = 'bold', size = 16)\na.set_xlabel('Total Games Count', size = 15)\na.set_ylabel('Top 20 Player Vs. Games Distribution', size = 14)\nplt.xticks([0, 5, 10, 15, 20, 25, 30, 35],\n           ['0','5','10','15','20','25','30', '35'])\nplt.show();","0db19ea2":"df_weeks_direction = df_weeks[['nflId', 'displayName', 'playDirection']]\ndf_players_direction = df_players[['nflId', 'displayName']]","157c6f43":"# check Dataframe duplication\ndf_weeks_direction.duplicated().sum()","b21b1a3e":"# drop douplication at df_players_team\ndf_weeks_direction = df_weeks_direction.drop_duplicates()","4050cb35":"# merge 2 Dataframe \"df_players\" and \"df_team\"\ndf_direction = pd.merge(df_players_direction, df_weeks_direction, how = 'left', on =['nflId','displayName'])\ndf_direction","8f09c504":"df_direction['direction'] = df_direction.nflId.duplicated()","3b829310":"df_direction.direction = df_direction.direction.replace(True, 'both')\ndf_direction","a59f1c1a":"df_direction_both = df_direction.query('direction == \"both\"')","6b2e13d2":"df_direction_both.drop('playDirection', axis = 1)","ac80d420":"# merge 2 Dataframe \"df_players\" and \"df_team\"\ndf_direction = pd.merge(df_direction, df_direction_both, how = 'left', on =['nflId','displayName'])\ndf_direction = df_direction.drop(['direction_x', 'playDirection_y'], axis = 1)\ndf_direction = df_direction.rename(columns = {'playDirection_x': 'playDirection', 'direction_y': 'direction'})\ndf_direction.direction = df_direction.direction.fillna(df_direction.playDirection)\ndf_direction.direction = df_direction.direction.fillna('Not playing Any Games')\ndf_direction = df_direction.drop('playDirection', axis = 1)\ndf_direction = df_direction.rename(columns = {'direction': 'playDirection'})\ndf_direction = df_direction.drop_duplicates()\n\ndf_direction","167697e9":"df_direction.groupby('playDirection')['nflId'].count().reset_index().sort_values( by = 'nflId', ascending = False )","3d08fb1e":"# combine 2 colums \"displayName\" & \"gameId\" then sort players desending regarding to no games played. \ndf_direction_sort = df_direction.groupby('playDirection')['nflId'].count().reset_index().sort_values( by = 'nflId', ascending = False )","9c71dc1e":"fig, ax1 = plt.subplots (1,figsize = (8,5))\n\n# figure \"a\" represent number of top players palaying a zero number of games. \na = sns.barplot (x = df_direction_sort.nflId, y = df_direction_sort.playDirection, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of max. games player by each player.\nfor i,j in enumerate(df_direction_sort.nflId): \n        ax1.text(.7,i+0.03,j,weight = \"bold\", size = 15)\n\na.set_title(\"Players Direction Distribution\" , weight = 'bold', size = 16)\na.set_xlabel('Total Play Direction Count', size = 15)\na.set_ylabel('Direction Distribution', size = 14)\nplt.xticks([0, 200, 400, 600, 800, 1000, 1200],\n           ['0','200','400','600','800','1K','1.2K'])\nplt.show();","e853777f":"quarters = df_plays[['gameId','quarter']]","59cab868":"quarters.duplicated().sum()","b50deb53":"quarters = quarters.drop_duplicates()","9391abd5":"quarters.quarter = quarters.quarter.replace(1, np.nan)\nquarters.quarter = quarters.quarter.replace(2, np.nan)\nquarters.quarter = quarters.quarter.replace(3, np.nan)\nquarters = quarters.dropna(axis = 0)\nquarters","0ae224c1":"quarters['direction'] = quarters.gameId.duplicated()","25ee9710":"quarters.direction = quarters.direction.replace(True, 'both')\nquarters","715d1c59":"quarters_both = quarters.query('direction == \"both\"')","1df1c6a2":"quarters_both","5629a343":"quarters_both.drop('quarter', axis = 1)","74f809fc":"# merge 2 Dataframe \"quarters\" and \"quarters_both\"\nquarters = pd.merge(quarters, quarters_both, how = 'left', on ='gameId')\nquarters = quarters.drop(['direction_x', 'quarter_y'], axis = 1)\nquarters = quarters.rename(columns = {'quarter_x': 'quarter', 'direction_y': 'direction'})\nquarters.direction = quarters.direction.fillna(quarters.quarter)\nquarters = quarters .drop('quarter', axis = 1)\nquarters = quarters .rename(columns = {'direction': 'quarter'})\nquarters = quarters.drop_duplicates()\nquarters.quarter = quarters.quarter.replace('both','Five')\nquarters.quarter = quarters.quarter.replace(4,'Four')\n\nquarters","904016cb":"quarters.groupby('quarter')['gameId'].count().reset_index().sort_values( by = 'quarter', ascending = False )","7fe40bc4":"# combine 2 colums \"quarter\" & \"gameId\" then sort games quarters desending regarding to total number of quarters played. \ndf_game_gurter_sort = quarters.groupby('quarter')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = False )","b82d3c93":"fig, ax1 = plt.subplots (1,figsize = (12,4))\n\n# figure \"a\" represent number of top players palaying a max. number of games. \na = sns.barplot (x = df_game_gurter_sort.gameId, y = df_game_gurter_sort.quarter, ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of max. games player by each player.\nfor i,j in enumerate(df_game_gurter_sort.gameId): \n        ax1.text(.05,i+0.08,j,weight = \"bold\", size = 15)\n\na.set_title(\"Quarters per Games Distribution\" , weight = 'bold', size = 16)\na.set_xlabel('Total Games Count', size = 15)\na.set_ylabel('Games Quarters\\n Distribution', size = 14)\nplt.yticks([0,1],['Quarter 4','Quarter 5'])\nplt.show();","5f65597c":"def NFL_field(line_numbers = True, end_zones = True, home_zones = True, visitor_zones = True, gameId = True,  highlight_line = False,\n              highlight_line_number = 50, highlight_home_number = 50, highlight_away_number = 50, highlight_first_down_line=False, \n              yards_to_go = 10, highlight_name = 'Scrimmage_Line', fifty_lose = False):\n    \n    #create function for plotting football field\n    rect = patches.Rectangle((0,0), 120, 53.3, linewidth = 0.2, edgecolor = 'r', facecolor = 'darkgreen', zorder = 0)\n    fig,ax = plt.subplots(1, figsize = (18,10.5))\n    ax.add_patch(rect)\n    \n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80, 80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3], \n             color = 'w')\n   \n    if fifty_lose:\n        plt.plot([60, 60], [0, 53.3], color = 'gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color = 'gold')\n       \n    if home_zones == True:\n        home_zone = patches.Rectangle((0, 0), 10, 53.3, linewidth = 0.1, edgecolor = 'r', facecolor = 'darkblue', alpha = 0.7, zorder = 0)\n        plt.text(3, 27, 'Home Team', verticalalignment = 'center', fontsize = 20, color = 'red', rotation = 90)\n        ax.add_patch(home_zone)\n        \n    else:\n        h = ('gameId == \"{}\"').format(home_zones)\n        home_zone = patches.Rectangle((0, 0), 10, 53.3, linewidth = 0.1, edgecolor = 'r', facecolor = 'darkblue', alpha = 0.7, zorder = 0)\n        plt.text(3, 27, df_games.query(h)['homeTeamAbbr'].values[0] + ' Team', verticalalignment = 'center', fontsize = 20, color = 'red', rotation = 90)\n        ax.add_patch(home_zone)\n        \n    if visitor_zones == True:\n        visitor_zone = patches.Rectangle((110, 0), 120, 53.3, linewidth = 0.1, edgecolor = 'r', facecolor = 'darkblue', alpha = 0.7, zorder = 0)\n        plt.text(113, 27, 'Visitor Team', verticalalignment = 'center', fontsize = 20, color = 'yellow', rotation = 90)\n        ax.add_patch(visitor_zone)\n        \n    else:\n        a = ('gameId == \"{}\"').format(visitor_zones)\n        visitor_zone = patches.Rectangle((110, 0), 120, 53.3, linewidth = 0.1, edgecolor = 'r', facecolor = 'darkblue', alpha = 0.7, zorder = 0)\n        plt.text(113, 27, df_games.query(h)['visitorTeamAbbr'].values[0] + ' Team', verticalalignment = 'center', fontsize = 20, color = 'yellow', rotation = 90)\n        ax.add_patch(visitor_zone)\n       \n    plt.xlim(0, 120)\n    plt.ylim(-5, 59)\n    plt.axis('off')\n   \n    if line_numbers:\n        for x in range(10, 110, 97):\n            number = x\n            plt.text(x + 1.5, 5, str('G'), horizontalalignment = 'center', fontsize = 20, color = 'w')\n            plt.text(x + 1.5, 53.3 - 5, str('G'), horizontalalignment = 'center', fontsize = 20, color = 'w', rotation = 180)\n            \n            \n        for x in range(20, 110, 10):\n            number = x\n            if x > 50:\n                number = 120 - x\n                plt.text(x, 5, str(number - 10), horizontalalignment = 'center', fontsize = 20, color = 'w')\n                plt.text(x - 0.9, 53.3 - 5, str(number - 10), horizontalalignment = 'center', fontsize = 20, color = 'w', rotation = 180)\n            elif x <= 50:\n                number = 0 + x\n                plt.text(x, 5, str(number - 10), horizontalalignment = 'center', fontsize = 20, color = 'w')\n                plt.text(x - 0.9, 53.3 - 5, str(number - 10), horizontalalignment = 'center', fontsize = 20, color = 'w', rotation = 180) \n                          \n    if end_zones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n    \n    for x in hash_range:\n        ax.plot([x, x], [1.5, 0.5], color='white')\n        ax.plot([x, x], [22.5, 23.5], color='white')\n        ax.plot([x, x], [29.5, 30.5], color='white')\n        ax.plot([x, x], [52.8, 51.8], color='white') \n        \n    if highlight_line == True:\n        h = highlight_line_number + 10\n        plt.plot([h, h], [0, 53.3], color = 'red', linewidth = 3)\n        plt.text(h + 2, 50, '<- {}'.format(highlight_name), color = 'red', size = 16, weight = 'bold')\n    \n    elif highlight_first_down_line:\n        y = highlight_line_number + 10 + yards_to_go\n        plt.plot([y, y], [0, 53.3], color='yellow', linewidth = 3)\n    \n    elif highlight_line == False:\n        \n        if highlight_home_number > 50:\n            h_1 = 50 - highlight_home_number\n            plt.plot([h_1, h_1], [0, 53.3], color = 'red', linewidth = 3)\n            plt.text(h_1 + 2, 45, '<- {} \\nat {} Team'.format(highlight_name, df_games.query(h)['homeTeamAbbr'].values[0]),\n                     color = 'red', size = 16, weight = 'bold',rotation = 0)\n            \n        elif highlight_home_number < 50:\n            h_1 = highlight_home_number + 10\n            plt.plot([h_1, h_1], [0, 53.3], color = 'red', linewidth = 3)\n            plt.text(h_1 + 2, 45, '<- {} \\nat {} Team'.format(highlight_name, df_games.query(h)['homeTeamAbbr'].values[0]),\n                     color = 'red', size = 16, weight = 'bold',rotation = 0)\n        \n        if highlight_away_number > 50:\n            h_2 = 50 - highlight_away_number\n            plt.plot([h_2, h_2], [0, 53.3], color = 'yellow', linewidth = 3)\n            plt.text(h_2 + 2, 45, '<- {} \\nat {} Team'.format(highlight_name, df_games.query(h)['visitorTeamAbbr'].values[0]),\n                     color = 'yellow', size = 16, weight = 'bold', rotation = 0)\n        \n        elif highlight_away_number < 50:\n            h_1 = highlight_away_number + 10\n            plt.plot([h_1, h_1], [0, 53.3], color = 'yellow', linewidth = 3)\n            plt.text(h_1 + 2, 45, '<- {} \\nat {} Team'.format(highlight_name, df_games.query(h)['visitorTeamAbbr'].values[0]),\n                     color = 'yellow', size = 16, weight = 'bold',rotation = 0)\n            \n    return fig, ax\nplt.show();","5f91f773":"NFL_field()\nplt.show();","cfe658f6":"def match_players(game_id, event = 'first_contact', pos = 'RB'):\n    fig ,ax = NFL_field(home_zones = '{}'.format(game_id), visitor_zones = '{}'.format(game_id))\n                        \n    home = ('gameId == \"{}\" and team == \"home\" and event == \"{}\" and position == \"{}\"').format(game_id, str(event), str(pos))\n    home = df_weeks.query(home)\n    home.plot(x='x', y='y', kind='scatter',ax = ax, s=50, color='red',marker='o', label = 'Home Players')\n    \n    away = ('gameId == \"{}\" and team == \"away\" and event == \"{}\" and position == \"{}\"').format(game_id, str(event), str(pos))\n    away = df_weeks.query(away)\n    away.plot(x='x', y='y', kind='scatter',ax = ax, s=50, color='yellow',marker='o', label = 'Visitor Players')\n    \n    plt.title('\\nPlayers at Game No.\"{}\" \\nwith event :\"{}\" \\nat position Group : \"{}\".'.format(game_id, event, pos),\n              color = 'black',size = 16, weight = 'bold')\n    return fig, ax\nplt.show();","b34d1aed":"match_players(2018090600, 'first_contact','RB')\nplt.show();","b9153f54":"def players_path(game_id, player_home_id, player_away_id):\n    fig ,ax = NFL_field(home_zones = '{}'.format(game_id), visitor_zones = '{}'.format(game_id))\n                        \n    home = ('gameId == \"{}\" and team == \"home\" and playId == \"{}\"').format(game_id, player_home_id)\n    home = df_weeks.query(home)\n    home.plot(x='x', y='y', kind='scatter',ax = ax, s=30, color='red',marker='o',label = 'Home Player Path')\n    \n    away = ('gameId == \"{}\" and team == \"away\" and playId == \"{}\"').format(game_id, player_away_id)\n    away = df_weeks.query(away)\n    away.plot(x='x', y='y', kind='scatter',ax = ax, s=30, color='yellow',marker='o', label = 'Visitor Player Path')\n    #plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full' )\n    plt.title('\\nPlayers at Game No.\"{}\" \\nHome Player Path No. :\"{}\" Vs. Visitor Player Path No. : \"{}\".'.format(game_id, player_home_id, player_away_id), \n              color = 'black',size = 16, weight = 'bold')\n    return fig, ax\nplt.show();","72ba22ce":"players_path(2018090600, 1085, 521)\nplt.show();","19788f23":"def Scrimmage_line(game_id, player_home_id, player_away_id):\n    \n    home_player_weeks = ('team == \"home\" and playId == \"{}\"').format(player_home_id)\n    home_player_plays = ('gameId == \"{}\" and playId == \"{}\"').format(game_id, player_home_id)\n    away_player_weeks = ('team == \"away\" and playId == \"{}\"').format(player_away_id)\n    away_player_plays = ('gameId == \"{}\" and playId == \"{}\"').format(game_id, player_away_id)\n    \n    home_line = df_plays.query(home_player_plays)['yardlineNumber'].tolist()[0]\n    away_line = df_plays.query(away_player_plays)['yardlineNumber'].tolist()[0]\n    \n    fig ,ax = NFL_field( highlight_home_number = home_line , highlight_away_number = away_line, home_zones = '{}'.format(game_id),\n                        visitor_zones = '{}'.format(game_id))\n                        \n    home = ('gameId == \"{}\" and team == \"home\" and playId == \"{}\"').format(game_id, player_home_id)\n    home = df_weeks.query(home)\n    home.plot(x='x', y='y', kind='scatter',ax = ax, s=30, color='red', label = 'Home Player')\n    \n    away = ('gameId == \"{}\" and team == \"away\" and playId == \"{}\"').format(game_id, player_away_id)\n    away = df_weeks.query(away)\n    away.plot(x='x', y='y', kind='scatter',ax = ax, s=30, color='yellow', label = 'Visitor Player')\n    \n    plt.title('\\nPlayers at Game No.\"{}\" \\nHome Player No. :\"{}\" Vs. Visitor Player No. : \"{}\".'\n              .format(game_id, player_home_id, player_away_id),color = 'black',size = 16, weight = 'bold')\n    return fig, ax\nplt.show();","df8df9ca":"Scrimmage_line(2018090600, 320,146)\nplt.show();","09d927a9":"def calculate_dx_dy_arrow(x, y, angle, speed, multiplier):\n    if angle > 0 and angle <= 90:\n        angle = angle\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    elif angle > 90 and angle <= 180:\n        angle = angle - 90\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = -np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    elif angle > 180 and angle <= 270:\n        angle = angle - 180\n        dx = -(np.sin(radians(angle)) * multiplier * speed)\n        dy = -(np.cos(radians(angle)) * multiplier * speed)\n        return dx, dy\n    else:\n        angle = angle - 270\n        dx = -np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy","80cc0f45":"def animate_player_movement(game_Id, play_id):\n    \n    home_player_weeks_team = ('gameId == \"{}\" and playId == \"{}\" and team == \"home\"').format(game_Id, play_id)\n    home_plays_team = ('gameId == \"{}\" and playId == \"{}\"').format(game_Id, play_id)\n    home_play = df_weeks.query(home_player_weeks_team)\n    \n    \n    away_player_weeks_team = ('gameId == \"{}\" and playId == \"{}\" and team == \"away\"').format(game_Id, play_id)\n    away_plays_team = ('gameId == \"{}\" and playId == \"{}\"').format(game_Id, play_id)\n    away_play = df_weeks.query(away_player_weeks_team)\n    \n    \n    ball_team = ('gameId == \"{}\" and playId == \"{}\" and team == \"football\"').format(game_Id, play_id)\n    ball_play = df_weeks.query(ball_team)\n    \n    yard_line = ('gameId == \"{}\" and playId == \"{}\"').format(game_Id, play_id)\n    yard_line_number = df_plays.query(yard_line)['yardlineNumber'].item()\n    yards_To_Go = df_plays.query(yard_line)['yardsToGo'].item()\n    absolute_Yard_line_Number = df_plays.query(yard_line)['absoluteYardlineNumber'].item() - 10\n    play_Dir = home_play['playDirection'].values[0]\n    \n    home_play.time = home_play.time.apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    away_play.time = away_play.time.apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    ball_play.time = ball_play.time.apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n       \n    if (home_play.team.count() >= int(away_play.team.count())) :\n        max_time = int(home_play.time.max())\n        min_time = int(home_play.time.min())\n    \n    else:\n        max_time = int(away_play.time.max())\n        min_time = int(away_play.time.min())\n    \n    if (absolute_Yard_line_Number > 50):\n        yard_line_number = 100 - yard_line_number\n    if (absolute_Yard_line_Number <= 50):\n        yard_line_number = yard_line_number\n        \n    if (play_Dir == 'left'):\n        yards_To_Go = -yards_To_Go\n    else:\n        yards_To_Go = yards_To_Go\n    \n    fig, ax = NFL_field(highlight_line=True, highlight_line_number = yard_line_number, highlight_first_down_line = True, yards_to_go = yards_To_Go,\n                        home_zones = '{}'.format(game_Id), visitor_zones = '{}'.format(game_Id))\n    h = ('gameId == \"{}\"').format(game_Id)\n    a = ('gameId == \"{}\"').format(game_Id)\n    home_team = df_games.query(h)['homeTeamAbbr'].values[0]\n    away_team = df_games.query(a)['visitorTeamAbbr'].values[0]\n   \n    \n    plt.title('\\nPlayers at Game No. : \"{}\" \\nHome Team :\"{}\" Team Vs. Visitor Team : \"{}\" Team.'.format(game_Id,home_team, away_team), \n              color = 'black',size = 16, weight = 'bold')\n    \n    \n    def update_animation(time):\n        patch = []\n        # Home players' location\n        homeX = home_play.query('time == ' + str(time))['x']\n        homeY =home_play.query('time == ' + str(time))['y']\n        homeNum = home_play.query('time == ' + str(time))['jerseyNumber']\n        homeOrient = home_play.query('time == ' + str(time))['o']\n        homeDir = home_play.query('time == ' + str(time))['dir']\n        homeSpeed = home_play.query('time == ' + str(time))['s']\n        patch.extend(plt.plot(homeX, homeY, 'o',c='yellow', ms=20, mec='red'))\n        \n        # Home players' jersey number \n        for x, y, num in zip(homeX, homeY, homeNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='red', size='medium'))\n            \n        # Home players' orientation\n        for x, y, orient in zip(homeX, homeY, homeOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='yellow', width=0.5, shape='full', ec = 'red'))\n        \n        # Home players' direction\n        for x, y, direction, speed in zip(homeX, homeY, homeDir, homeSpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full' ))\n        \n        # away players' location\n        awayX = away_play.query('time == ' + str(time))['x']\n        awayY = away_play.query('time == ' + str(time))['y']\n        awayNum = away_play.query('time == ' + str(time))['jerseyNumber']\n        awayOrient = away_play.query('time == ' + str(time))['o']\n        awayDir = away_play.query('time == ' + str(time))['dir']\n        awaySpeed = away_play.query('time == ' + str(time))['s']\n        patch.extend(plt.plot(awayX, awayY, 'o',c='red', ms=20, mec='white'))\n        \n        # Away players' jersey number \n        for x, y, num in zip(awayX, awayY, awayNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='white', size='medium'))\n            \n        # Away players' orientation\n        for x, y, orient in zip(awayX, awayY, awayOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='red', width=0.5, shape='full', ec = 'white'))\n        \n        # Away players' direction\n        for x, y, direction, speed in zip(awayX, awayY, awayDir, awaySpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full'))\n        \n        # Ball location\n        ballX = ball_play.query('time == ' + str(time))['x']\n        ballY = ball_play.query('time == ' + str(time))['y']\n        patch.extend(plt.plot(ballX, ballY, 'o', c='black', ms=10, mec='white', data=ball_play.query('time == ' + str(time))['team']))\n        \n        \n        return patch\n    \n    ims = [[]]\n    for time in np.arange(min_time, max_time+1):\n        patch = update_animation(time)\n        ims.append(patch)\n        \n    anim = animation.ArtistAnimation(fig, ims, repeat=False)\n    \n    return anim","75982577":"anim = animate_player_movement(2018090600, 320)","e137b587":"writer = animation.FFMpegWriter(fps=10, metadata=dict(artist='Desgined by Peter Girgis for NFL 2018'), bitrate=1800)\npath = 'animation at Game No. 2018090600.mp4'\nanim.save(path , writer = writer)\nVideo(path)","e3408323":"def animate_Full_Game(game_id):\n    \n    home_player_weeks_team = ('gameId == \"{}\" and team == \"home\"').format(game_id)\n    home_play = df_weeks.query(home_player_weeks_team)\n    \n    \n    away_player_weeks_team = ('gameId == \"{}\" and team == \"away\"').format(game_id)\n    away_play = df_weeks.query(away_player_weeks_team)\n\n    \n    ball_team = ('gameId == \"{}\" and team == \"football\"').format(game_id)\n    ball_play = df_weeks.query(ball_team)\n    \n    play_Dir = home_play['playDirection'].values[0]\n    \n    home_play.time = home_play.time.apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    away_play.time = away_play.time.apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    ball_play.time = ball_play.time.apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    \n    if (home_play.team.count() >= int(away_play.team.count())) :\n        max_time = int(home_play.time.max())\n        min_time = int(home_play.time.min())\n    \n    else:\n        max_time = int(away_play.time.max())\n        min_time = int(away_play.time.min())\n    \n    \n    \n    fig, ax = NFL_field(highlight_line=False, highlight_first_down_line = False, home_zones = '{}'.format(game_id),\n                        visitor_zones = '{}'.format(game_id))\n    h = ('gameId == \"{}\"').format(game_id)\n    a = ('gameId == \"{}\"').format(game_id)\n    home_team = df_games.query(h)['homeTeamAbbr'].values[0]\n    away_team = df_games.query(a)['visitorTeamAbbr'].values[0]\n   \n    \n    plt.title('\\nPlayers at Game No. : \"{}\" \\nHome Team :\"{}\" Team Vs. Visitor Team : \"{}\" Team.'.format(game_id,home_team, away_team), \n              color = 'black',size = 16, weight = 'bold')\n    \n    \n    def update_animation(time):\n        patch = []\n        # Home players' location\n        homeX = home_play.query('time == ' + str(time))['x']\n        homeY = home_play.query('time == ' + str(time))['y']\n        homeNum = home_play.query('time == ' + str(time))['jerseyNumber']\n        homeOrient = home_play.query('time == ' + str(time))['o']\n        homeDir = home_play.query('time == ' + str(time))['dir']\n        homeSpeed = home_play.query('time == ' + str(time))['s']\n        patch.extend(plt.plot(homeX, homeY, 'o',c = 'yellow', ms = 20, mec= 'red'))\n        \n        # Home players' jersey number \n        for x, y, num in zip(homeX, homeY, homeNum):\n            patch.append(plt.text(x, y, int(num), va = 'center', ha = 'center', color = 'red', size = 'medium'))\n            \n        # Home players' orientation\n        for x, y, orient in zip(homeX, homeY, homeOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color = 'yellow', width = 0.5, shape = 'full', ec = 'red'))\n        \n        # Home players' direction\n        for x, y, direction, speed in zip(homeX, homeY, homeDir, homeSpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color = 'black', width = 0.25, shape = 'full' ))\n        \n        # away players' location\n        awayX = away_play.query('time == ' + str(time))['x']\n        awayY = away_play.query('time == ' + str(time))['y']\n        awayNum = away_play.query('time == ' + str(time))['jerseyNumber']\n        awayOrient = away_play.query('time == ' + str(time))['o']\n        awayDir = away_play.query('time == ' + str(time))['dir']\n        awaySpeed = away_play.query('time == ' + str(time))['s']\n        patch.extend(plt.plot(awayX, awayY, 'o',c = 'red', ms = 20, mec = 'white'))\n        \n        # Away players' jersey number \n        for x, y, num in zip(awayX, awayY, awayNum):\n            patch.append(plt.text(x, y, int(num), va = 'center', ha = 'center', color = 'white', size = 'medium'))\n            \n        # Away players' orientation\n        for x, y, orient in zip(awayX, awayY, awayOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color = 'red', width = 0.5, shape = 'full', ec = 'white'))\n        \n        # Away players' direction\n        for x, y, direction, speed in zip(awayX, awayY, awayDir, awaySpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color = 'black', width = 0.25, shape = 'full'))\n        \n       # # Ball location\n        ballX = ball_play.query('time == ' + str(time))['x']\n        ballY = ball_play.query('time == ' + str(time))['y']\n        patch.extend(plt.plot(ballX, ballY, 'o', c = 'black', ms = 10, mec = 'white', data = ball_play.query('time == ' + str(time))['team']))\n        \n        \n        return patch\n    \n    ims = [[]]\n    for time in np.arange(min_time, max_time + 1):\n        patch = update_animation(time)\n        ims.append(patch)\n        \n    anim = animation.ArtistAnimation(fig, ims, repeat=False)\n    \n    return anim","f99cb758":"# rendering full match required 5 hours.\nanim = animate_Full_Game(2018090600)","30cada05":"# saving a full match required 5 hours, required code as below\nwriter = animation.FFMpegWriter(fps = 10, metadata = dict(artist='Desgined by Peter Girgis for NFL 2018'), bitrate = 1800)\npath = 'full match at Game No.2018090600.mp4'\nanim.save(path , writer = writer)","56f95836":"df_games_profile = pdp.ProfileReport(df_games)\ndf_games_profile","d6fc3bbe":"### <span style=\"color:orange\">  5. **Mixed DataFrame :** <\/span>","9e3548a2":"> ### Q8: What's the total number of players at each position?","992dccc0":"> ### Q11: providing Profile Report for each Dataframe \n>> ##### 01. **`df_games`** \n>> ##### 02. **`df_plays `** \n>> ##### 03. **`df_players`**\n>> ##### 04. **`df_weeks`**","4f22ba75":"> ### Q5: What's the Player BMI (Body Mass Index) Distribution?","47bc72bf":"### <span style=\"color:orange\">  2. **Players DataFrame :** <\/span>","4cf039b1":"> ### Q2: How Many Matches played per Day?","76ed82ec":"> ### Q4: What's the Heavy 20 Players at NFL?","359d1d98":"# File descriptions\n> #### `Game data`: The `games.csv` contains the teams playing in each game. The key variable is `gameId`.\n>\n> #### `Player data`: The `players.csv` file contains player-level information from players that participated in any of the tracking data files. The key variable is `nflId`.\n>\n> #### `Play data`: The `plays.csv` file contains play-level information from each game. The key variables are `gameId` and `playId`.\n>\n> #### `Tracking data`: Files `week[week].csv` contain player tracking data from all games in week `[week]`. The key variables are `gameId`, `playId`, and `nflId`. There are 17 weeks to a typical NFL Regular Season, and thus 17 data frames with player tracking data are provided.","6799be93":"# Player data\n\n> ##### - `nflId`: Player identification number, unique across players (numeric)\n> ##### - `height`: Player height (text)\n> ##### - `weight`: Player weight (numeric)\n> ##### - `birthDate`: Date of birth (YYYY-MM-DD)\n> ##### - `collegeName`: Player college (text)\n> ##### - `position`: Player position (text)\n> ##### - `displayName`: Player name (text)","be06bb10":"> ### Q3:What's the Player Weight Distribution?","b9e04dbb":"> ### Q7: Create paths of `one player at Home Team` and `one player at Visitor Team` at certain Game ?\n>> ##### 1. **`gameId`** : to choosing which game we need to get the comparison. \n>> ##### 2. **`team `** : for choosing Home Team Vs. Visitor Team.\n>> ##### 3. **`player`** : Tagged play details, including moment of (first contact, ball snap, pass release, pass catch, tackle, etc...).","6a8d88ee":"> ### Q11: What's the Total Number of players joined NFL?","dc9fe4b6":"> ### Q12: What's the Offensive Formation related Defense Formation?","14607aa9":"> ### Q10: Describe the Player pass Results Distribution?","a3480eb3":"> ### Q4: What's Total Games played per Week?","e64b9df0":"> ### Q11: What's the Total Players Result at each Position Team?","bc3e9a24":"> ### Q2: What's the players didn't play any game?","626d3182":"### <span style=\"color:orange\">  3. **Plays DataFrame :** <\/span>","522b661c":"> ### Q16: What's Correlation Between Variables ?","9e8cafee":"> ### Q13: Complete play pass at each NFL Teams?","bb212d78":"### Q9: Create Video paths for `one player at Home Team` starting from `YardlineNumber`at certain Game ?\n>> ##### 01. **`gameId`** : to choosing which game we need to get the comparison. \n>> ##### 02. **`team `** : for choosing Home Team .\n>> ##### 03. **`playId`** : Play identifier.\n>> ##### 04. **`yardlineNumber`** : Yard line at line-of-scrimmage.\n>> ##### 05. **`yardsToGo`** : Distance needed for a first down.\n>> ##### 06. **`absoluteYardlineNumber`** : Distance from end zone for possession team.\n>> ##### 07. **`playDirection`** : Direction that the offense is moving.\n>> ##### 08. **`x`** : Player position along the long axis of the field, 0 - 120 yards.\n>> ##### 09. **`y`** : Player position along the short axis of the field, 0 - 53.3 yards.\n>> ##### 10. **`s`** : Speed in yards\/second (numeric)\n>> ##### 11. **`o`** : Player orientation (deg), 0 - 360 degrees.\n>> ##### 12. **`dir`** : Angle of player motion (deg), 0 - 360 degrees.\n>> ##### 13. **`jerseyNumber`** : Jersey number of player.","ee8b42c8":"> ### Q5: What's the Total Number of Team joined NFL?","79bb4f40":"> ### Q2: What's the Number Of Defenders Distribution and Number of Pass Rushers?","b7597c8f":"> ### Q7: What's the Total Players at top 20 College?","f428393d":"> ### Q8: What's the percentage of players \/ postion sucessfully complete the pass attempts at each postion team?","55bb41bc":"> ### Q4: What's the Oldest 20 players in NFL?","c83ce309":"> ### Q14: What's the play type Percentage?","052aeec2":"### <span style=\"color:orange\">  4. **Weeks DataFrame :** <\/span>","4ce4657e":"> ### Q7: What's the total number of players \/ postion sucessfully complete the pass attempts at each postion team?","e02ea449":"### Q10: Create Full Video Game?\n>> ##### 01. **`gameId`** : to choosing which game we need to get the comparison. \n>> ##### 02. **`team `** : for choosing Home Team .\n>> ##### 03. **`playId`** : Play identifier.\n>> ##### 04. **`playDirection`** : Direction that the offense is moving.\n>> ##### 05. **`x`** : Player position along the long axis of the field, 0 - 120 yards.\n>> ##### 06. **`y`** : Player position along the short axis of the field, 0 - 53.3 yards.\n>> ##### 07. **`s`** : Speed in yards\/second (numeric)\n>> ##### 08. **`o`** : Player orientation (deg), 0 - 360 degrees.\n>> ##### 09. **`dir`** : Angle of player motion (deg), 0 - 360 degrees.\n>> ##### 10. **`jerseyNumber`** : Jersey number of player.","151c3530":"> ### Q2: What's the Heighest 20 Players at NFL?","97d5744d":"> ### Q9: Whats Players Attributes Summary?","dae1f230":"> ### Q1: What's the Total Number of Games played by the top 30 players?","6bc1ea8c":"> ### Q3: What's the Absolute Yard line Number at Possession team?","f8293fd6":"> ### Q1: What's the Player Positions?","374b1a64":"> ### Q3: How Many Players in each Direction at All Games ?","82883b45":"> ### Q10: What's Correlation Between Variables ?","05c0cdca":"### 5- Copying DataFrames","ca57e748":"> ### Q5: How We Can Create a Football Field ?","33a1a657":"> ### Q3: What's Total Games played per Team as (Home \/ Visitor) Team?","8fa5bd79":"> ### Q6: How we Compare between 2 teams (Home Team Vs. Visitor Team) related several parameters as below?\n>> ##### 1. **`gameId`** : to choosing which game we need to get the comparison. \n>> ##### 2. **`team `** : for choosing Home Team Vs. Visitor Team.\n>> ##### 3. **`event`**  : Tagged play details, including moment of (first contact, ball snap, pass release, pass catch, tackle, etc...).\n>> ##### 4. **`position_group`** :  Player position group ( FB, HB, QB, RB, TE and WR).\n","d3452055":"> ### Q4: What's the Offense Play Result?","df59d323":"### 1- Open and Wrangling **`Games`** DataFrame","f4c415c9":"> ### Q6: What's the biggest BMI Players at NFL?","3a55f1c9":"<a id='Data Gathering and wrangling'><\/a>\n## Data Gathering and wrangling\n\n> **Tip**: In this section of the report:\n> 1. I'll load using data from different CSV files. \n> 2. I'll check for cleanliness, and then trim and clean all the dataset for analysis. ","f9ca5409":"> ### Q5: What's the PreSnap score at (Home\/ Visitor)?","951b39b6":"> ### Q3: Using funny shape called\"worldcloud\" to print top players overall_rating","00327281":"# Tracking data\n\n> #### Each of the 17 `week[week].csv` files contain player tracking data from all passing plays during Week `[week]` of the 2018 regular season. Nearly all plays from each `[gameId]` are included; certain plays or games with insufficient data are dropped. Each team and player plays no more than 1 game in a given week.\n> ##### - `time`: Time stamp of play (time, yyyy-mm-dd, hh:mm:ss)\n> ##### - `x`: Player position along the long axis of the field, 0 - 120 yards. See Figure 1 below. (numeric)\n> ##### - `y`: Player position along the short axis of the field, 0 - 53.3 yards. See Figure 1 below. (numeric)\n> ##### - `s`: Speed in yards\/second (numeric)\n> ##### - `a`: Acceleration in yards\/second^2 (numeric)\n> ##### - `dis`: Distance traveled from prior time point, in yards (numeric)\n> ##### - `o`: Player orientation (deg), 0 - 360 degrees (numeric)\n> ##### - `dir`: Angle of player motion (deg), 0 - 360 degrees (numeric)\n> ##### - `event`: Tagged play details, including moment of ball snap, pass release, pass catch, tackle, etc (text)\n> ##### - `nflId`: Player identification number, unique across players (numeric)\n> ##### - `displayName`: Player name (text)\n> ##### - `jerseyNumber`: Jersey number of player (numeric)\n> ##### - `position`: Player position group (text)\n> ##### - `team`: Team (away or home) of corresponding player (text)\n> ##### - `frameId`: Frame identifier for each play, starting at 1 (numeric)\n> ##### - `gameId`: Game identifier, unique (numeric)\n> ##### - `playId`: Play identifier, not unique across games (numeric)\n> ##### - `playDirection`: Direction that the offense is moving (text, left or right)\n> ##### - `route`: Route ran by offensive player (text)\n","158b187e":"> ### Q2: What's Correlation Between Variables ?","2906295a":"# Game data\n\n> ##### - `gameId`: Game identifier, unique (numeric)\n> ##### - `gameDate`: Game Date (time, mm\/dd\/yyyy)\n> ##### - `gameTimeEastern`: Start time of game (time, HH:MM:SS, EST)\n> ##### - `homeTeamAbbr`: Home team three-letter code (text)\n> ##### - `visitorTeamAbbr`: Visiting team three-letter code (text)\n> ##### - `week`: Week of game (numeric)","ed91b6dc":"> ### Q4: What's the Quarters per games?","cd307a10":"<a id='eda'><\/a>\n## Exploratory Data Analysis (Analyzing and Visualization)\n\n### <span style=\"color:orange\">  1. **Games DataFrame :** <\/span>","10150d0d":"### 2- Open and Wrangling **`Plays`** DataFrame","6d5ad621":"> ### Q6: What's the total number of player at each Team?","5bab8c9a":"> ### Q1: How Many Matches played per Month?","01fbab67":"> ### Q9: What's the Number Of plays per each DropBack Type?","fcfeafc0":"# Data Description\n> #### The 2021 Big Data Bowl data contains player tracking, play, game, and player level information for all possible passing plays during the 2018 regular season. For purposes of this event, passing plays are considered to be ones on a pass was thrown, the quarterback was sacked, or any one of five different penalties was called (defensive pass interference, offensive pass interference, defensive holding, illegal contact, or roughing the passer). On each play, linemen (both offensive and defensive) data are not provided. The focus of this year's contest is on pass coverage.\n>\n> #### Here, you'll find a summary of each data set in the 2021 Data Bowl, a list of key variables to join on, and a description of each variable.","ba8e6b62":"### 4- Open and Wrangling **`weeks`** DataFrame","2283fb66":"# (NFL 2020 DATA Visualization Competition.)\n## by (Peter Gamal Girgis)\n\n## Project Overview:\n\n> ### In American football, there are a plethora of defensive strategies and outcomes. The National Football League (NFL) has used previous Kaggle competitions to focus on offensive plays, but as the old proverb goes, \u201cdefense wins championships.\u201d Though metrics for analyzing quarterbacks, running backs, and wide receivers are consistently a part of public discourse, techniques for analyzing the defensive part of the game trail and lag behind. Identifying player, team, or strategic advantages on the defensive side of the ball would be a significant breakthrough for the game.\n\n> ### This competition uses NFL\u2019s Next Gen Stats data, which includes the position and speed of every player on the field during each play. You\u2019ll employ player tracking data for all drop-back pass plays from the 2018 regular season. The goal of submissions is to identify unique and impactful approaches to measure defensive performance on these plays. There are several different directions for participants to \u2018tackle\u2019 (ha)\u2014which may require levels of football savvy, data aptitude, and creativity. As examples:\n>\n>> ### - **What are coverage schemes (man, zone, etc) that the defense employs? What coverage options tend to be better performing?**\n>> ### - **Which players are the best at closely tracking receivers as they try to get open?**\n>> ### - **Which players are the best at closing on receivers when the ball is in the air?**\n>> ### - **Which players are the best at defending pass plays when the ball arrives?**\n>> ### - **Is there any way to use player tracking data to predict whether or not certain penalties \u2013 for example, defensive pass interference \u2013 will be called?**\n>> ### - **Who are the NFL\u2019s best players against the pass?**\n>> ### - **How does a defense react to certain types of offensive plays?**\n>> ### - **Is there anything about a player \u2013 for example, their height, weight, experience, speed, or position \u2013 that can be used to predict their performance on defense?**\n>\n> #### What does data tell us about defending the pass play? You are about to find out.","15232975":"> ### Q12: What's the Total Number of players's college joined NFL?","34b45ff7":"> ### Q8: Create paths of `one player at Home Team` and `one player at Visitor Team` starting from `YardlineNumber` at certain Game ?\n>> ##### 1. **`gameId`** : to choosing which game we need to get the comparison. \n>> ##### 2. **`team `** : for choosing Home Team .\n>> ##### 3. **`playId`** : Play identifier.\n>> ##### 4. **`yardlineNumber`** : Yard line at line-of-scrimmage.","28f41836":"> ### Q5: What's the Oldest Player's inn NFL?","9e15869c":"### 3- Open and Wrangling **`Players`** DataFrame","d568b65e":"> ### Q1: What's the Player Height Distribution?","ae678aa0":"> ### Q1: What's the total count of each Events at All Games?","b7c75838":"# Play data\n> ##### - `gameId`: Game identifier, unique (numeric)\n> ##### - `playId`: Play identifier, not unique across games (numeric)\n> ##### - `playDescription`: Description of play (text)\n> ##### - `quarter`: Game quarter (numeric)\n> ##### - `down`: Down (numeric)\n> ##### - `yardsToGo`: Distance needed for a first down (numeric)\n> ##### - `possessionTeam`: Team on offense (text)\n> ##### - `playType`: Outcome of dropback: sack or pass (text)\n> ##### - `yardlineSide`: 3-letter team code corresponding to line-of-scrimmage (text)\n> ##### - `yardlineNumber`: Yard line at line-of-scrimmage (numeric)\n> ##### - `offenseFormation`: Formation used by possession team (text)\n> ##### - `personnelO`: Personnel used by offensive team (text)\n> ##### - `defendersInTheBox`: Number of defenders in close proximity to line-of-scrimmage (numeric)\n> ##### - `numberOfPassRushers`: Number of pass rushers (numeric)\n> ##### - `personnelD`: Personnel used by defensive team (text)\n> ##### - `typeDropback`: Dropback categorization of quarterback (text)\n> ##### - `preSnapHomeScore`: Home score prior to the play (numeric)\n> ##### - `preSnapVisitorScore`: Visiting team score prior to the play (numeric)\n> ##### - `gameClock`: Time on clock of play (MM:SS)\n> ##### - `absoluteYardlineNumber`: Distance from end zone for possession team (numeric)\n> ##### - `penaltyCodes`: NFL categorization of the penalties that ocurred on the play. For purposes of this contest, the most important penalties are Defensive Pass Interference (DPI), Offensive Pass Interference (OPI), Illegal Contact (ICT), and Defensive Holding (DH). Multiple penalties on a play are separated by a ; (text)\n> ##### - `penaltyJerseyNumber`: Jersey number and team code of the player commiting each penalty. Multiple penalties on a play are separated by a ; (text)\n> ##### - `passResult`: Outcome of the passing play (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, text)\n> ##### - `offensePlayResult`: Yards gained by the offense, excluding penalty yardage (numeric)\n> ##### - `playResul`t: Net yards gained by the offense, including penalty yardage (numeric)\n> ##### - `epa`: Expected points added on the play, relative to the offensive team. Expected points is a metric that estimates the average of every next scoring outcome given the play's down, distance, yardline, and time remaining (numeric)\n> ##### - `isDefensivePI`: An indicator variable for whether or not a DPI penalty ocurred on a given play (TRUE\/FALSE)\n"}}