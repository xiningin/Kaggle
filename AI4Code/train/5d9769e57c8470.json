{"cell_type":{"98b74c7c":"code","080aa7c6":"code","79446682":"code","cdd0e090":"code","997207b4":"code","b64996fb":"code","434967e9":"code","21eeb410":"code","14358e41":"code","7d5027e5":"code","9314aa45":"code","dc59b0fb":"code","eb8136ab":"code","456dd6ac":"code","7fda5628":"code","59abaeb3":"code","7b747f04":"code","26e86232":"code","c1c5a540":"code","ffcb13b9":"code","1cd1dd43":"code","d9c63e0d":"code","3e4604e9":"code","355cde99":"code","1b7cab6e":"code","677417f8":"code","f7f9b6be":"code","b622a5c5":"code","19e2f196":"code","c9ef5fbf":"code","15eeb515":"code","203ae9d1":"code","c15ed780":"code","0c75306e":"markdown","d66f7f8a":"markdown","bb8d991c":"markdown","349da14d":"markdown","699ef52f":"markdown","2b18978d":"markdown","e47e411a":"markdown","d3c05bd1":"markdown","eb933ae7":"markdown","2e1b7ec4":"markdown","d6beb54d":"markdown","d52d3489":"markdown","1b71ada5":"markdown"},"source":{"98b74c7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndf = pd.read_csv('\/kaggle\/input\/brasilian-houses-to-rent\/houses_to_rent_v2.csv')\n# Any results you write to the current directory are saved as output.","080aa7c6":"df.info()","79446682":"df.dtypes","cdd0e090":"df.corr()['rent amount (R$)']","997207b4":"df[['hoa (R$)','total (R$)']]","b64996fb":"# sns.pairplot(df)","434967e9":"df.info()","21eeb410":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(),cmap='coolwarm')","14358e41":"df.corr()['rent amount (R$)'].sort_values(ascending=False)","7d5027e5":"df.drop(['total (R$)','property tax (R$)','hoa (R$)','fire insurance (R$)'],axis=1,inplace=True)","9314aa45":"for i in df.select_dtypes('object'):\n    print(i,df[i].unique())","dc59b0fb":"df['floor'] = df['floor'].apply(lambda x: 0 if x == '-' else x).astype(int)    ","eb8136ab":"df","456dd6ac":"df['avg_area_per_division'] = df['area']\/(df['bathroom']+df['rooms']+1) # plus 1 for common\/living area\ndf['bathroom_room_ratio'] = df['bathroom']\/df['rooms']\ndf['unique_inclusions_cnt'] = np.where(df['parking spaces']>0,1,0)+np.where(df['furniture']=='furnished',1,0)+np.where(df['animal']=='acept',1,0)","7fda5628":"from sklearn.model_selection import train_test_split,cross_validate\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler,PowerTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n\nonehot = OneHotEncoder(sparse=False,handle_unknown='ignore')\nscaler = PowerTransformer()\nsd = StandardScaler()\n\n\nX = df.drop(columns=['rent amount (R$)'])\ny = df['rent amount (R$)']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=100)","59abaeb3":"cat_cols = X_train.select_dtypes('object').columns.tolist()","7b747f04":"num_cols = X_train.select_dtypes('int').columns.tolist()+X_train.select_dtypes('float').columns.tolist()","26e86232":"col_transform_sd = ColumnTransformer([('onehot',onehot,cat_cols),('scaler',sd,num_cols)])\ncol_transform_pt = ColumnTransformer([('onehot',onehot,cat_cols),('scaler',scaler,num_cols)])","c1c5a540":"baseline = Pipeline(steps=[('preprocess',col_transform_sd),('model',LinearRegression())])","ffcb13b9":"base_score = cross_validate(baseline,X_train,y_train,scoring='r2',cv=5,return_train_score=True)\nprint(\"Train Score: \",np.mean(base_score['train_score']))\nprint(\"Test Score: \",np.mean(base_score['test_score']))","1cd1dd43":"power_tranform = Pipeline(steps=[('preprocess',col_transform_pt),('model',LinearRegression())])","d9c63e0d":"pt_score = cross_validate(power_tranform,X_train,y_train,scoring='r2',cv=5,return_train_score=True)\nprint(\"Train Score: \",np.mean(pt_score['train_score']))\nprint(\"Test Score: \",np.mean(pt_score['test_score']))","3e4604e9":"add_cat = []\nfor x in cat_cols:\n    for y in cat_cols:\n        pass\n    add_cat.append(pd.Series(df[x]+'_'+df[y],name=x+'_'+y))\ncat_interactions = pd.concat(add_cat,axis=1)","355cde99":"df_interactions = pd.concat([df,cat_interactions],axis=1)\n\nX = df_interactions.drop(columns=['rent amount (R$)'])\ny = df_interactions['rent amount (R$)']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=100)","1b7cab6e":"# Update ColumnTransformer\nnum_cols = X_train.select_dtypes('int').columns.tolist()+X_train.select_dtypes('float').columns.tolist()\ncat_cols = X_train.select_dtypes('object').columns.tolist()\n\ncol_transform_pt = ColumnTransformer([('onehot',onehot,cat_cols),('scaler',scaler,num_cols)])\n\npower_tranform = Pipeline(steps=[('preprocess',col_transform_pt),('model',LinearRegression())])","677417f8":"pt_score = cross_validate(power_tranform,X_train,y_train,scoring='r2',cv=5,return_train_score=True)\nprint(\"Train Score: \",np.mean(pt_score['train_score']))\nprint(\"Test Score: \",np.mean(pt_score['test_score']))","f7f9b6be":"from sklearn.preprocessing import PolynomialFeatures\n\nnum_inter = PolynomialFeatures(interaction_only=True)\n\nX = df.drop(columns=['rent amount (R$)'])\ny = df['rent amount (R$)']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=100)","b622a5c5":"num_cols = X_train.select_dtypes('int').columns.tolist()+X_train.select_dtypes('float').columns.tolist()\ncat_cols = X_train.select_dtypes('object').columns.tolist()\n\nnum_preprocess = Pipeline(steps=[('interactions',num_inter),('scaler',scaler)])\n\ncol_transform_pt = ColumnTransformer([('onehot',onehot,cat_cols),('num_preprocess',num_preprocess,num_cols)])\n\npower_tranform = Pipeline(steps=[('preprocess',col_transform_pt),('model',LinearRegression())])","19e2f196":"pt_score = cross_validate(power_tranform,X_train,y_train,scoring='r2',cv=5,return_train_score=True)\nprint(\"Train Score: \",np.mean(pt_score['train_score']))\nprint(\"Test Score: \",np.mean(pt_score['test_score']))","c9ef5fbf":"X = df_interactions.drop(columns=['rent amount (R$)'])\ny = df_interactions['rent amount (R$)']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=100)","15eeb515":"num_cols = X_train.select_dtypes('int').columns.tolist()+X_train.select_dtypes('float').columns.tolist()\ncat_cols = X_train.select_dtypes('object').columns.tolist()\n\nnum_preprocess = Pipeline(steps=[('interactions',num_inter),('scaler',scaler)])\n\ncol_transform_pt = ColumnTransformer([('onehot',onehot,cat_cols),('num_preprocess',num_preprocess,num_cols)])\n\npower_tranform = Pipeline(steps=[('preprocess',col_transform_pt),('model',LinearRegression())])","203ae9d1":"pt_score = cross_validate(power_tranform,X_train,y_train,scoring='r2',cv=5,return_train_score=True)\nprint(\"Train Score: \",np.mean(pt_score['train_score']))\nprint(\"Test Score: \",np.mean(pt_score['test_score']))","c15ed780":"power_tranform.fit(X_train,y_train)\ntrain_preds = power_tranform.predict(X_train)\ntest_preds = power_tranform.predict(X_test)\n\nprint(\"Train Score :\",r2_score(y_train,train_preds))\nprint(\"Test Score :\",r2_score(y_test,test_preds))","0c75306e":"> Based on the observed unique instances of the feature `floor`, '1' and '-' seem to indicated the same thing. However, a better inference would be that `floor` indicates which floor of an appartment\/condominium building is located. As such it would make sense to add another column to identify whether the property being rented is an appartment unit or not. Another, interpretation could be to to treat '-' as a null value and will be imputed and partnered with a isnull column. For the sake of having a baselin, let's indicate the '-' value first as 0 and observe performance and revisit abovementioned ideas later on.","d66f7f8a":"> Now let's try feature interactions on numerical features via PolynomialFeatures to see if there is improvement on the model","bb8d991c":"# 1 Data Cleaning and Feature Engineering","349da14d":"# 4 Feature Interactions & Improvements","699ef52f":"> Slight Improvement on Train and Test scores. However, the model overfits slightly as well.","2b18978d":"# 2 Feature Engineering","e47e411a":"> Below are some feature engineering ideas that would also be interesting to explore apart from the usual OneHotEncoding.","d3c05bd1":"> Fire insurance has a very strong positive correlation with rent amount which may indicate that the value is proportional to the value of rent. As such, we should consider taking this feature out of the data set\nOn another note, it would also make sense to exclude total, property tax, and hoa from the data set, like fire insurance, are computed during the point of knowing the rent. Retaining these features would only cause data leakage.","eb933ae7":"# 3 Baseline Model & Scaler Comparison","2e1b7ec4":"# 5 Validation","d6beb54d":"> There is a sizeable increase on performance with Numerical Feature Interactions. Let's see what happens when we incorporate both numerical and categorical.","d52d3489":"> Very minute improvement. We can get away with not including Categorical Feature Interactions but for now let's just stick with it as if we are fighting for every point of improvement.","1b71ada5":"> It is clear that applying an exponential scaling transforms the numerical data into normal distributions which are highly compatible with LinearRegression models. Apart from this, we can also observe that with StandardScaler the model overfits. As such, we shall be using PowerTransformer moving forward."}}