{"cell_type":{"f54c55fe":"code","907fbd10":"code","09739b38":"code","17ede432":"code","13a8775a":"code","0a966c23":"code","f2dc095b":"code","e157b7a2":"code","85c01543":"code","2a7bc008":"code","8b0522d3":"code","c5c7923a":"code","c20a205d":"code","9ba9e8f7":"code","67578573":"code","af6fefd8":"code","9b547b8e":"code","c8324059":"code","b0a4ddbb":"code","b5888357":"code","31274511":"code","ce6ce9f7":"code","782433b3":"code","146912e3":"code","72beaa41":"code","453abe0f":"code","a3069683":"code","9dc92a38":"code","58f6fd05":"code","8a7c9ffc":"code","3793efcc":"code","0258a79d":"code","887b53e0":"code","ec768c23":"code","8a2a0e0b":"code","1bd99135":"code","1614ef82":"code","49a26823":"code","52e93eb7":"code","fc9843e2":"code","4ab3f260":"code","d5dc11c7":"markdown","64357cab":"markdown","8ee4ae51":"markdown","8bf26da4":"markdown","826a5e23":"markdown","957e0b3f":"markdown","56168adf":"markdown","0f424fc6":"markdown","689103c6":"markdown","b6525728":"markdown","b60985f0":"markdown"},"source":{"f54c55fe":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","907fbd10":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","09739b38":"attack_df = pd.read_csv('\/kaggle\/input\/shark-attack-dataset\/attacks.csv')\nattack_df.head()","17ede432":"# There is a lot of missing value at the end of this dataset!\nattack_df.tail()","13a8775a":"attack_df.isna().sum()","0a966c23":"attack_df[attack_df['Date'].isna()].sample(10)","f2dc095b":"# I will drop row that contains NaN value using Date as a base\nattack_df = attack_df[~attack_df['Date'].isna()]\nattack_df.isna().sum()","e157b7a2":"attack_df.columns","85c01543":"# For this visualization, I want Date to Species columns only \nattack_df = attack_df.loc[:,\"Case Number\":\"Species \"]\nattack_df.head()","2a7bc008":"# Checking the Year Column\nattack_df['Year'].unique()\n\n# There are wired input like 0 500 and so on. Lets look into that.","8b0522d3":"attack_df[attack_df['Year'] < 1543][['Case Number','Date']]\n\n# Given that year can be extract from either Case Number or Date column, with these given input,\n# mostly in range. I will not include these data points in the visulization","c5c7923a":"attack_df = attack_df[attack_df['Year'] >= 1543]\nattack_df['Year'].unique()\n\n# No longer have wired year input","c20a205d":"byYear_attack = attack_df.groupby('Year')['Date'].count().reset_index()\nfig = px.line(byYear_attack,x='Year', y='Date', title='Shark Attack by Year')\nfig.show()","9ba9e8f7":"# Close up from 1850 to 2018\nbyYear_attack = attack_df.groupby('Year')['Date'].count().reset_index()\nfig = px.line(byYear_attack.iloc[77:,:],\n              x='Year', y='Date', title='Shark Attack from 1853 to 2018')\nfig.show()","67578573":"# Removing the Space in Sex column name\nattack_df = attack_df.rename(columns={'Sex ':'Sex'})\nattack_df.columns","af6fefd8":"# Checking the unique value of Sex\nattack_df['Sex'].unique()\n\n# F and M represents Female and Male respectively\n# There are a few of uncategories letter - fixing that ","9b547b8e":"# Current Count \nattack_df['Sex'].value_counts()","c8324059":"# Modifying the value in Sex column\n# Fill NaN value first\nattack_df['Sex'] = attack_df['Sex'].fillna(\"Unknown\")\n\n# Male\nattack_df.loc[attack_df['Sex'].str.contains(\"M|M \"), 'Sex'] = \"Male\"\n\n# Female\nattack_df.loc[attack_df['Sex'].str.contains(\"F\"), 'Sex'] = \"Female\"\n\n# Value other than Female and Male becomes Unspecified\nattack_df.loc[~attack_df['Sex'].str.contains(\"Male|Female\"), 'Sex'] = \"Unknown\"\n\nbySex_count = attack_df['Sex'].value_counts().reset_index().rename(columns={'index':'Gender','Sex':'Count'})\nbySex_count","b0a4ddbb":"# Distribution Male, Female and Unspecified\nfig = px.pie(data_frame = bySex_count,\n             values = 'Count',\n             names = 'Gender',\n             title = 'Shark Attack by Gender',\n             color_discrete_sequence=px.colors.qualitative.Pastel\n             )\n\nfig.update_traces(textposition ='outside',\n                  textinfo = 'label+percent')\nfig.update_layout(paper_bgcolor='cornsilk',\n                  legend_title = 'Gender',\n                  font = dict(\n                      family = \"Courier New, monospace\",\n                      size = 18,\n                      color = 'black'\n                  ))\n\nfig.show()","b5888357":"# Checking count for Activity\nattack_df['Activity'].value_counts().head()","31274511":"attack_df['Type'].value_counts()","ce6ce9f7":"# After looking at the type of the attack, it seems that \"Boating\", \"Boat\", and \"Boatomg\" meant the same type \n# of attack, I will change the type of attack to just Boat\n\nattack_df.loc[(attack_df['Type'] == 'Boating') | (attack_df['Type'] == 'Boatomg'), \"Type\"] = \"Boat\"\nbyType_count = attack_df['Type'].value_counts().reset_index().rename(columns={'Type':'Count','index':'Type'})\nbyType_count","782433b3":"# Distribution Type of Attack\nfig = px.pie(data_frame = byType_count,\n             values = 'Count',\n             names = 'Type',\n             title = 'Shark Attack Type',\n             color_discrete_sequence=px.colors.qualitative.Safe\n             )\n\nfig.update_traces(textposition ='inside',\n                  textinfo = 'label+percent')\nfig.update_layout(paper_bgcolor='cornsilk',\n                  legend_title = 'Type',\n                  uniformtext_minsize=18,\n                  uniformtext_mode='hide',\n                  font = dict(\n                      family = \"Courier New, monospace\",\n                      size = 18,\n                      color = 'black'\n                  ))\n\nfig.show()","146912e3":"attack_df.groupby(['Type','Activity'])['Date'].count()","72beaa41":"attack_df.rename(columns={'Species ':'Species'},inplace=True)\nattack_df['Species'].value_counts()","453abe0f":"import re\n\n# Filling NaN value with string \"Unknown shark\"\nattack_df['Species'] = attack_df['Species'].fillna('Unknown shark')\n\n# Create new column to stored the extracted Shark species\nattack_df['New Species'] = None\n\n# Regular Expression pattern used to extract shark species (ultimately getting everything infront of the word \"shark\")\nshark_pattern = r'.* (shark|Shark)'\n\n# Looping through every row in the dataFrame\nfor row in range(len(attack_df)):\n    try:\n        shark_species = re.search(shark_pattern, attack_df.iat[row, attack_df.columns.get_loc('Species')]).group()\n        attack_df.iat[row, attack_df.columns.get_loc('New Species')] = shark_species\n    except:\n        # Assuming that if there is nothing before string shark OR doesn't contain string shark at all,\n        # then I will put the string Shark involvement not confirmed instead\n        attack_df.iat[row, attack_df.columns.get_loc('New Species')] = \"Shark involvement not confirmed\"\n\nbySpecies_count = attack_df['New Species'].value_counts().reset_index().rename(columns={'New Species':'Count','index':'Species'})\nbySpecies_count.head()","a3069683":"# Visualization - I won't be including first two rows of this dataFrame because the species of Shark is unknwon\nfig = px.pie(data_frame = bySpecies_count.iloc[2:12,:],\n             values = 'Count',\n             names = 'Species',\n             title = 'Top 10 Shark Species',\n             color_discrete_sequence=px.colors.qualitative.Prism\n             )\n\nfig.update_traces(textposition ='outside',\n                  textinfo = 'percent', pull = [0.1]*10)\nfig.update_layout(paper_bgcolor='cornsilk',\n                  legend_title = 'Shark Type',\n                  font = dict(\n                      family = \"Courier New, monospace\",\n                      size = 18,\n                      color = 'black'\n                  ))\n\nfig.show()","9dc92a38":"byCountry_count = attack_df['Country'].value_counts().reset_index().rename(columns={'Country':'Count','index':'Country'})\nbyCountry_count.head()","58f6fd05":"# World Map Plot\nfig = px.choropleth(data_frame = byCountry_count,\n                    locations = 'Country',\n                    color = 'Count',\n                    locationmode = 'country names',\n                    scope = 'world',\n                    title = 'Shark Attack around the World')\n\nfig.show()","8a7c9ffc":"# Top 5 Country with highest number of Shark Attack\n\nplt.figure(dpi=120)\nsns.barplot(data=byCountry_count.head(5), y='Country', x='Count', palette='Set2')\nplt.title('Top 5 Countries with Highest number of Shark Attack cases')\nplt.show()","3793efcc":"byAreaUS_count = attack_df[attack_df['Country'] == \"USA\"]['Area'].value_counts().reset_index().rename(columns={'Area':'Count','index':'Area'})\nbyAreaUS_count.head()","0258a79d":"# Changing Area to State Code\n# got this dict of states from this medium post (here is the link): \n# https:\/\/medium.com\/geekculture\/create-a-choropleth-map-of-state-unemployment-rates-with-plotly-1354050e0cfd\n\nstates_code = {'Alabama': 'AL','Alaska': 'AK','Arizona': 'AZ','Arkansas': 'AR','California': 'CA',\n               'Colorado': 'CO','Connecticut': 'CT','Delaware': 'DE','District of Columbia': 'DC',\n               'Florida': 'FL','Georgia': 'GA','Hawaii': 'HI','Idaho': 'ID','Illinois': 'IL','Indiana': 'IN',\n               'Iowa': 'IA','Kansas': 'KS','Kentucky': 'KY','Louisiana': 'LA','Maine': 'ME','Maryland': 'MD',\n               'Massachusetts': 'MA','Michigan': 'MI','Minnesota': 'MN','Mississippi': 'MS','Missouri': 'MO',\n               'Montana': 'MT','Nebraska': 'NE','Nevada': 'NV','New Hampshire': 'NH','New Jersey': 'NJ',\n               'New Mexico': 'NM','New York': 'NY','North Carolina': 'NC','North Dakota': 'ND','Ohio': 'OH',\n               'Oklahoma': 'OK','Oregon': 'OR','Pennsylvania': 'PA','Rhode Island': 'RI','South Carolina': 'SC',\n               'South Dakota': 'SD','Tennessee': 'TN','Texas': 'TX','Utah': 'UT','Vermont': 'VT','Virginia': 'VA',\n               'Washington': 'WA','West Virginia': 'WV','Wisconsin': 'WI','Wyoming': 'WY'}\n\nbyAreaUS_count['State Code'] = byAreaUS_count['Area'].map(states_code)\nbyAreaUS_count.head()","887b53e0":"# Shark Attack in the USA\nfig = px.choropleth(data_frame = byAreaUS_count,\n                    locations = 'State Code',\n                    color = 'Count',\n                    locationmode = 'USA-states',\n                    scope = 'usa',\n                    title = 'Shark Attack in the USA',\n                    hover_name = 'Area')\n\nfig.show()","ec768c23":"attack_df['Fatal (Y\/N)'].value_counts()","8a2a0e0b":"attack_df['Fatal (Y\/N)'].unique()","1bd99135":"attack_df['Fatal (Y\/N)'].value_counts()","1614ef82":"# Filling in NaN value with UNKNOWN\nattack_df['Fatal (Y\/N)'] = attack_df['Fatal (Y\/N)'].fillna('UNKNOWN')\n\n# Strip Space before N\nattack_df['Fatal (Y\/N)'] = attack_df['Fatal (Y\/N)'].str.strip()\n\n# Changing N to NO\nattack_df.loc[attack_df['Fatal (Y\/N)'] == \"N\", 'Fatal (Y\/N)'] = 'NO'\n\n# Changing Y to YES and adding them up\nattack_df.loc[attack_df['Fatal (Y\/N)'].str.contains(\"Y|y\"), 'Fatal (Y\/N)'] = \"YES\"\n\n# Change all other input that is not YES or NO to UNKNOWN\nattack_df.loc[~attack_df['Fatal (Y\/N)'].str.contains(\"YES|NO\")] = \"UNKNOWN\"\n\nbyFatal_count = attack_df['Fatal (Y\/N)'].value_counts().reset_index().rename(columns = {'Fatal (Y\/N)':'Count','index':'Fatality Status'})\nbyFatal_count","49a26823":"# Distribution Type of Attack\nfig = px.pie(data_frame = byFatal_count,\n             values = 'Count',\n             names = 'Fatality Status',\n             title = 'Fatality Status after Shark Attacks',\n             color_discrete_sequence=px.colors.qualitative.Safe\n             )\n\nfig.update_traces(textposition ='inside',\n                  textinfo = 'label+percent')\nfig.update_layout(paper_bgcolor='cornsilk',\n                  legend_title = 'Fatality Status',\n                  uniformtext_minsize=18,\n                  uniformtext_mode='hide',\n                  font = dict(\n                      family = \"Courier New, monospace\",\n                      size = 18,\n                      color = 'black'\n                  ))\n\nfig.show()","52e93eb7":"attack_df['Time'].value_counts().head()","fc9843e2":"# Filling NaN value with string \"Unknown shark\"\nattack_df['Time'] = attack_df['Time'].fillna('Unknown')\n\n# Create new column to stored the extracted Shark species\nattack_df['New Time'] = None\n\n# Regular Expression pattern used to extract shark species (ultimately getting everything infront of the word \"shark\")\ntime_pattern = r'[0-9]{2}h[0-9]{2}'\n\n# Looping through every row in the dataFrame\nfor row in range(len(attack_df)):\n    try:\n        time = re.search(time_pattern, attack_df.iat[row, attack_df.columns.get_loc('Time')]).group()\n        attack_df.iat[row, attack_df.columns.get_loc('New Time')] = time\n    except:\n        # Putting in the orignial value from the original Date column\n        attack_df.iat[row, attack_df.columns.get_loc('New Time')] = attack_df['Time'].iloc[row]\n\n\nbyTime_count = attack_df['New Time'].value_counts().reset_index().rename(columns={'New Time':'Count','index':'Time'})\nbyTime_count.head()","4ab3f260":"# Distribution Time of Shark Attack\nfig = px.pie(data_frame = byTime_count.iloc[1:11,:],\n             values = 'Count',\n             names = 'Time',\n             title = 'Time of Shark Attack',\n             color_discrete_sequence=px.colors.qualitative.Set2\n             )\n\nfig.update_traces(textposition ='outside',\n                  textinfo = 'label+percent',\n                  pull = [0.1] * 10)\nfig.update_layout(paper_bgcolor='cornsilk',\n                  legend_title = 'Time of Incident',\n                  uniformtext_minsize=18,\n                  uniformtext_mode='hide',\n                  font = dict(\n                      family = \"Courier New, monospace\",\n                      size = 18,\n                      color = 'black'\n                  ))\n\nfig.show()","d5dc11c7":"# Shark Species","64357cab":"# Sex","8ee4ae51":"# Cleaning the Data","8bf26da4":"# Year of the Attack","826a5e23":"# Reported Time of the Incident","957e0b3f":"# Country","56168adf":"# Condition Fatal (Y\/N)","0f424fc6":"# Activity and Type","689103c6":"# Shark Atttack Visualization","b6525728":"### Shark Attack in the USA","b60985f0":"# Thank you for checking out my nootebook"}}