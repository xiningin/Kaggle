{"cell_type":{"ba3d579a":"code","a381fa21":"code","b0597d4a":"code","ad14b041":"code","40b6cc45":"code","7eb6524f":"code","dbc8c7cb":"code","55660b8f":"code","dc7d11a7":"code","58a1fa1e":"code","199c3f70":"code","a736a710":"code","c5db2134":"code","47f927c2":"code","4880467d":"code","66a06f37":"markdown","e8124995":"markdown","975346c2":"markdown","fdb3b4d9":"markdown"},"source":{"ba3d579a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a381fa21":"data = pd.read_csv(\"..\/input\/wall-following-robot\/sensor_readings_24.csv\")\n\n\nprint(\"Data size - \", data.shape)","b0597d4a":"\n\n\ndataa = np.loadtxt(\"\/kaggle\/input\/wall-following-robot\/sensor_readings_24.csv\", delimiter=',', dtype=np.str)\n\ndata = pd.DataFrame(dataa[:,:24], dtype=np.float)\ndata = pd.concat([data, pd.DataFrame(dataa[:, 24], columns=['Label'])], axis=1)\n                      \nprint(\"Data size - \", data.shape)\n\n","ad14b041":"data.head()","40b6cc45":"data.groupby(['Label']).count()[0]","7eb6524f":"def parse_values(each):\n    if  (each ==\"Move-Forward\"):\n       return 1\n    elif (each ==\"Slight-Right-Turn\"):\n       return 2\n    elif (each ==\"Sharp-Right-Turn\"):\n       return 3\n    else:\n       return 4\n\ndata['Label'].apply(parse_values)","dbc8c7cb":"\ny= data.Label.values\nx_data=data.drop([\"Label\"],axis=1)","55660b8f":"x =(x_data -np.min(x_data))\/(np.max(x_data)-np.min(x_data))","dc7d11a7":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)","58a1fa1e":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3) # n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(\" {} nn score: {} \".format(3,knn.score(x_test,y_test)))","199c3f70":"score_list = []\nfor each in range(1,15):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,15),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()\n","a736a710":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(\"accuracy:\",nb.score(x_test,y_test))","c5db2134":"from sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(x_train,y_train)\nprint(\"accuracy of svm algo:\",svm.score(x_test,y_test))","47f927c2":"y_pred =knn.predict(x_test)\ny_true=y_test\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5 ,linecolor =\"red\",fmt =\".0f\",ax=ax)\nplt.show()","4880467d":"y_pred =svm.predict(x_test)\ny_true=y_test\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5 ,linecolor =\"red\",fmt =\".0f\",ax=ax)\nplt.show()","66a06f37":"Confusion matrix of KNN","e8124995":"KNN ","975346c2":"Best K Value","fdb3b4d9":" 1=Move-Forward,\n 2=Slight-Right-Turn,\n 3=Sharp-Right-Turn,\n 4=Slight-Left-Turn\n Bunlar\u0131 ay\u0131r"}}