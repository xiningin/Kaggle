{"cell_type":{"b2f0f516":"code","b560d3e6":"code","ad9657d7":"code","8cc1c8c2":"code","1d7e9631":"code","85771d83":"code","b583506b":"code","1c25c596":"code","1a9691ee":"code","e588bde4":"code","f9288fab":"code","2351ef4d":"code","f7b43cc4":"code","7483140f":"code","aa9e9149":"code","6ae4a020":"code","652365fc":"code","fd0ba6b3":"code","353e76e5":"code","f50fcb1a":"markdown","44c691e2":"markdown","060954d5":"markdown","da825852":"markdown","3766b919":"markdown","a6cb8fcc":"markdown","a493a5e0":"markdown","feb7deb0":"markdown"},"source":{"b2f0f516":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b560d3e6":"import matplotlib.pyplot as plt\ndf = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv')","ad9657d7":"df.tail()","8cc1c8c2":"df.info()","1d7e9631":"df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s')\ndf.set_index(df['Timestamp'], inplace=True)\ndf.drop('Timestamp', axis=1, inplace=True)","85771d83":"df['Open'].plot();","b583506b":"convertion={\n    'Open':'first',\n    'High':'max',\n    'Low':'min',\n    'Close':'mean',\n    'Volume_(BTC)':'sum',\n    'Volume_(Currency)':'sum'\n}\n\nds_df = df.resample('W').apply(convertion)\nds_df","1c25c596":"import plotly.graph_objects as go\n\nfrom datetime import datetime\n\nfig = go.Figure(go.Candlestick(\n        x=ds_df.index,\n        open=ds_df['Open'],\n        high=ds_df['High'],\n        low=ds_df['Low'],\n        close=ds_df['Close']\n    ))\n\nfig.update_layout(\n    title='Bitcoin Price',\n    yaxis_title='BTC Stock',\n    shapes = [dict(\n        x0='2015-12-09', x1='2016-12-09', y0=0, y1=0.5, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x='2016-06-26', y=0.3, xref='x', yref='paper',\n        showarrow=True, xanchor='left', text='This is a strange peak!')]\n)\nfig.update_yaxes(type=\"log\")\nfig.show()\n","1a9691ee":"col = list(df.columns)\n\nnull_val = []\nfor i in col:\n    null_val.append(df[i].isna().value_counts())\npd.DataFrame(null_val)","e588bde4":"df.dropna(inplace=True)","f9288fab":"df[(df.index > '2016-06-19') & (df.index < '2016-07-03')]['Low'].plot()","2351ef4d":"df[(df.index > '2016-06-23 12:00') & (df.index < '2016-06-23 13:00')]['Low'].plot()","f7b43cc4":"df[(df.index > '2016-06-23 12:30') & (df.index < '2016-06-23 12:45')]['Low']","7483140f":"df.loc[(df.index == '2016-06-23 12:36:00'), ('Low')] = np.nan\ndf['Low'].interpolate(method='linear', axis=0, inplace=True)\ndf[(df.index > '2016-06-23 12:30') & (df.index < '2016-06-23 12:45')]['Low']","aa9e9149":"ds_df = df.resample('W').apply(convertion)\nds_df\n\nfig = go.Figure(go.Candlestick(\n        x=ds_df.index,\n        open=ds_df['Open'],\n        high=ds_df['High'],\n        low=ds_df['Low'],\n        close=ds_df['Close']\n    ))\n\nfig.update_layout(\n    title='Bitcoin Price',\n    yaxis_title='BTC Stock',\n    shapes = [dict(\n        x0='2015-12-09', x1='2016-12-09', y0=0, y1=0.5, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x='2016-06-26', y=0.3, xref='x', yref='paper',\n        showarrow=True, xanchor='left', text='There is no more outlier here!')]\n)\nfig.update_yaxes(type=\"log\")\nfig.show()\n","6ae4a020":"N=100\n\nds_df['rolling_mean' + str(N)] = ds_df.Close.rolling(window=5).mean()\nds_df['rolling_ema_'+ str(N)]  = ds_df.Close.ewm(min_periods=N, span=N).mean()","652365fc":"'''fig = go.Figure(go.Candlestick(\n        x=ds_df.index,\n        open=ds_df['Open'],\n        high=ds_df['High'],\n        low=ds_df['Low'],\n        close=ds_df['Close']\n    ))\n'''\nfig = go.Figure()\n\n\n\nfig.update_layout(\n    title='Bitcoin Price',\n    yaxis_title='BTC Stock'\n)\nfig.update_yaxes(type=\"log\")\n\nfig.add_trace(go.Scatter(x=ds_df.index, y=ds_df['Close'],\n                        mode='lines',\n                        name='Close'))\n\nfig.add_trace(go.Scatter(x=ds_df.index, y=ds_df['rolling_mean' + str(N)],\n                    mode='lines',\n                    name='MEAN ' + str(N),\n                    line=dict(color='royalblue', width=2)))\n\nfig.add_trace(go.Scatter(x=ds_df.index, y=ds_df['rolling_ema_' + str(N)],\n                    mode='lines',\n                    name='EMA ' + str(N),\n                    line=dict(color='#555555', width=2)))\n\nfig.add_annotation(x='2014-10-15', y=2.8, showarrow=True, startarrowhead=7,text='cross point')\n\nfig.show()","fd0ba6b3":"# import talib as ta","353e76e5":"# to be continued...","f50fcb1a":"<div style=\"text-align: center;\"><font color=#0b57a7><h1>Let's look at the data!<\/h1><\/font><\/div>","44c691e2":"<hr>\n<div style=\"text-align: center;\"><font color=#0b57a7>\n    <h1>For extract features from data we need to use Technical Indicators.<\/h1>\n    <h1>For that we will use Technical Analisys library TA-lib<\/h1>\n    <\/font>\n<\/div>","060954d5":"<div style=\"text-align: center;\"><font color=#0b57a7><h1>We have found the peak and now we'll drop and interpolate it.<\/h1><\/font><\/div>","da825852":"<div style=\"text-align: center;\"><font color=#0b57a7><h1>We must find NA rows and drop or maybe fill it.<\/h1><\/font><\/div>","3766b919":"<div style=\"text-align: center;\"><font color=#0b57a7><h1>Let's look at the cost of bitcoin on a logarithmic scale.<\/h1><\/font><\/div>","a6cb8fcc":"Firstly, let's try to build a simple moving average","a493a5e0":"<div style=\"text-align: center;\"><font color=#0b57a7>\n    <h1>For example some of the most commonly used:<\/h1>\n    <\/font>\n<\/div>\n\n* BBANDS              Bollinger Bands\n* EMA                 Exponential Moving Average\n* MA                  All Moving Average\n* MACD                Moving Average Convergence\/Divergence\n* STOCH               Stochastic\n* WILLR               Williams' %R\n\nFull list of indicators used can be found at the link https:\/\/pypi.org\/project\/TA-Lib\/","feb7deb0":"<div style=\"text-align: center;\"><font color=#0b57a7><h1>Now we can try to find some interesting in the data!<\/h1><\/font><\/div>"}}