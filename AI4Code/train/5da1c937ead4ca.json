{"cell_type":{"ab2b9068":"code","99e88c28":"code","b303f6d9":"code","222e1e52":"code","4867f82f":"code","a26ed1d2":"code","4097f8f5":"code","1360bea7":"code","b60662b6":"code","019e7fde":"code","4a3cbace":"code","86aa1e02":"code","1955ae0c":"code","94693dd7":"code","17b986cf":"code","1474fbc2":"code","b857b20a":"code","cfd578c5":"code","24171bb3":"code","ac2b3544":"code","576e213b":"code","145d28bd":"code","2adaa653":"code","fdc59fe9":"markdown","70ec7816":"markdown","553e2c90":"markdown","5f6a31ef":"markdown","673afba3":"markdown","924bf7c4":"markdown","18199271":"markdown"},"source":{"ab2b9068":"from mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport os # accessing directory structure\nimport pandas as pd \nimport seaborn as sns\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n\nimport warnings  \nwarnings.filterwarnings('ignore')","99e88c28":"nRowsRead = 1000\ndataframe = pd.read_csv('\/kaggle\/input\/bee_sperm.csv', delimiter=',', nrows = nRowsRead,skiprows=3, error_bad_lines=False)\ndataframe.dataframeName = 'bee_sperm.csv'\nnRow, nCol = dataframe.shape","b303f6d9":"dataframe.columns = ['Specimen', 'Treatment', 'Environment', 'TreatmentNCSS', 'Sample ID','Colony', 'Cage', 'Sample', 'SpermVolumePer500ul', 'Quantity',\n       'ViabilityRawPercentage', 'Quality', 'Age', 'Infertil', 'AliveSperm','Quantity_Millions', 'Alive_Sperm_Millions', 'Dead_Sperm_Millions']","222e1e52":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","4867f82f":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","a26ed1d2":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","4097f8f5":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# bee_sperm.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndataframe = pd.read_csv('\/kaggle\/input\/bee_sperm.csv', delimiter=',', nrows = nRowsRead,skiprows=3, error_bad_lines=False)\ndataframe.dataframeName = 'bee_sperm.csv'\nnRow, nCol = dataframe.shape\nprint(f'There are {nRow} rows and {nCol} columns')","1360bea7":"dataframe.head(5)","b60662b6":"def corrplot(df):\n    plt.figure(figsize=(21,21))\n    plt.title(\"Spearman Correlation Heatmap\")\n    corr = df.corr(method='spearman')\n    mask = np.tril(df.corr())\n    sns.heatmap(corr, \n               xticklabels=corr.columns.values,\n               yticklabels=corr.columns.values,\n               annot = True, # to show the correlation degree on cell\n               vmin=-1,\n               vmax=1,\n               center= 0,\n               fmt='0.2g', #\n               cmap= 'coolwarm',\n               linewidths=3, # cells partioning line width\n               linecolor='white', # for spacing line color between cells\n               square=False,#to make cells square \n               cbar_kws= {'orientation': 'vertical'}\n               )\n\n    b, t = plt.ylim() \n    b += 0.5  \n    t -= 0.5  \n    plt.ylim(b,t) \n    plt.show()\n    \ncorrplot(dataframe)","019e7fde":"#Alligned Correlation plot for better understanding correlations\ndef allignedCorrelationPlot(dataframe):\n    df = dataframe.copy(deep=True)\n    corr = df.corr(method='spearman')\n    plt.figure(figsize=(18,10))\n    mask = np.tril(df.corr())\n    sns.heatmap(corr, \n               xticklabels=corr.columns.values,\n               yticklabels=corr.columns.values,\n               annot = True,\n               vmin=-1,\n               vmax=1,\n               center= 1,\n               cmap= 'Set2',\n               linewidths=0.3,\n               linecolor='green',\n               square=False,\n               cbar_kws= {'orientation': 'horizontal'},\n               mask= mask)\n\n    #To adjust the trim at bottom and top\n    b, t = plt.ylim() \n    b += 1  \n    t -= 2  \n    plt.ylim(b, t) \n\n    plt.show()","4a3cbace":"allignedCorrelationPlot(dataframe)","86aa1e02":"processedFrame = dataframe.copy(deep=True)","1955ae0c":"Cage = processedFrame[\"Cage\"]\nColony = processedFrame[\"Colony\"]\nfig = go.Figure()\nfig.add_trace(go.Box(x=Cage,name=\"Cage\"))\nfig.add_trace(go.Box(x=Colony,name= \"Colony\"))\nfig.show()","94693dd7":"fig = px.violin(dataframe, y=\"Cage\", box=True, # draw box plot inside the violin\n                points='all', # can be 'outliers', or False\n               )\nfig.show()","17b986cf":"fig = px.violin(dataframe, y=\"Colony\", box=True, # draw box plot inside the violin\n                points='all', # can be 'outliers', or False\n               )\nfig.show()","1474fbc2":"fig = go.Figure()\nTreatmentNCSS = processedFrame[\"TreatmentNCSS\"]\nfig.add_trace(go.Box(x=TreatmentNCSS,name= \"TreatmentNCSS\"))\nfig.show()","b857b20a":"fig = px.violin(dataframe, y=\"TreatmentNCSS\", box=True, # draw box plot inside the violin\n                points='all', # can be 'outliers', or False\n               )\nfig.show()","cfd578c5":"# Specimen\nSpecimen = processedFrame[\"Specimen\"]\nfig = go.Figure()\nfig.add_trace(go.Box(x=Specimen,name=\"Specimen\"))\nfig.show()","24171bb3":"fig = px.violin(dataframe, y=\"Specimen\", box=True, # draw box plot inside the violin\n                points='all', # can be 'outliers', or False\n               )\nfig.show(size=(21,12))","ac2b3544":"#Sperm_Vol_per500 vs Quantity\nSperm_Vol_per500 = processedFrame[\"Sperm Volume per 500 ul\"]\nQuantity = processedFrame[\"Quantity\"]\nfig = go.Figure()\nfig.add_trace(go.Box(x=Sperm_Vol_per500,name=\"Sperm_Vol_per500\"))\nfig.add_trace(go.Box(x=Quantity,name= \"Quantity\"))\nfig.show()","576e213b":"Colony = processedFrame[\"Colony\"]\nCage = processedFrame[\"Cage\"]\nSample = processedFrame[\"Sample\"]\nViabilityRaw = processedFrame[\"ViabilityRaw (%)\"]\nQuality = processedFrame[\"Quality\"]\n\nfig = go.Figure()\n# Use x instead of y argument for horizontal plot.\nfig.add_trace(go.Box(x=Quality,name= \"Quality\"))\nfig.add_trace(go.Box(x=ViabilityRaw,name = \"ViabilityRaw\"))\nfig.add_trace(go.Box(x=Colony,name= \"Colony\"))\nfig.add_trace(go.Box(x=Cage,name=\"Cage\"))\nfig.add_trace(go.Box(x=Sample,name = \"Sample\" ))\n\nfig.show()","145d28bd":"fig = px.violin(processedFrame, y=\"ViabilityRaw (%)\", box=True, # draw box plot inside the violin\n                points='all', # can be 'outliers', or False\n               )\nfig.show()","2adaa653":"fig = px.violin(dataframe, y=\"Quality\", box=True, # draw box plot inside the violin\n                points='all', # can be 'outliers', or False\n               )\nfig.show()","fdc59fe9":"**Column renaming**","70ec7816":"There is 1 csv file in the current version of the dataset:\n","553e2c90":"Distribution graphs (histogram\/bar graph) of sampled columns:","5f6a31ef":"### Let's start investigation","673afba3":"Let's take a quick look at what the data looks like:","924bf7c4":"**Correlation Plots:**","18199271":"Now we're ready to read in the data and use the plotting functions to visualize the data."}}