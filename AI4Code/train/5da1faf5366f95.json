{"cell_type":{"a938419b":"code","f249d030":"code","35367718":"code","e0df1cc4":"code","88c90fdb":"code","d0f6b99f":"code","9071996b":"code","1bc2feaa":"code","8dda3e08":"code","e59cbcca":"code","9984236c":"code","eda976a3":"code","16d0a7ab":"code","cebebf9d":"code","0e015d3e":"code","9ccbc370":"code","51fbdc09":"code","3fb214e0":"code","52790ce5":"code","f64ad854":"code","4bb2a088":"code","e936eb1a":"code","779e4212":"code","d69d2fbd":"code","0484663c":"code","6cac14f8":"code","2cec7eb4":"code","af55166f":"code","13c93ad1":"code","b8cd325b":"code","165dea3b":"code","bd7481f0":"code","47998f19":"code","59ab7269":"markdown","13b9ffdc":"markdown","8852a231":"markdown","a53cb590":"markdown","ded81271":"markdown","19ef0723":"markdown","3d9c53d4":"markdown","791f4139":"markdown","af693ddd":"markdown","6fe56073":"markdown","f62d4bfe":"markdown"},"source":{"a938419b":"import numpy as np \nimport pandas as pd \n\nimport warnings\nwarnings.filterwarnings\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","f249d030":"data = pd.read_csv('..\/input\/Housing.csv')\ndata.head()","35367718":"data.describe()","e0df1cc4":"#Look for more info on data set \ndata.info()","88c90fdb":"#first get all features with data type as object\ndata.columns[data.dtypes == object]","d0f6b99f":"#Convert all nominal data to numerical data\ndata['mainroad'] = data['mainroad'].map({'yes':1,'no':0})\ndata['guestroom'] = data['guestroom'].map({'yes':1,'no':0})\ndata['basement'] = data['basement'].map({'yes':1,'no':0})\ndata['hotwaterheating'] = data['hotwaterheating'].map({'yes':1,'no':0})\ndata['airconditioning'] = data['airconditioning'].map({'yes':1,'no':0})\ndata['prefarea'] = data['prefarea'].map({'yes':1,'no':0})","9071996b":"data.head()","1bc2feaa":"#check furnishingstatus values\ndata.furnishingstatus.value_counts()","8dda3e08":"## Creating a dummy variable for 'furnishingstatus'\nfurnishingstatus = pd.get_dummies(data['furnishingstatus'])\nfurnishingstatus.head()","e59cbcca":"# we don't need 3 columns.\n# we can use drop_first = True to drop the first column from furnishingstatus df.\nfurnishingstatus = pd.get_dummies(data['furnishingstatus'],drop_first=True)","9984236c":"#Adding the results to the master dataframe\ndata = pd.concat([data,furnishingstatus],axis=1)","eda976a3":"# Now let's see the head of our dataframe.\ndata.head()","16d0a7ab":"# Dropping furnishingstatus as we have created the dummies for it\ndata.drop(['furnishingstatus'],axis=1,inplace=True)\n\n# Now let's see the head of our dataframe.\ndata.head()","cebebf9d":"# Let us create the new metric and assign it to \"areaperbedroom\"\ndata['areaperbedroom'] = data['area']\/data['bedrooms']\n# Metric:bathrooms per bedroom\ndata['bbratio'] = data['bathrooms']\/data['bedrooms']\ndata.head()","0e015d3e":"def normalize (x): \n    return ( (x-np.min(x))\/ (max(x) - min(x)))\n                                            \n                                              \n# applying normalize ( ) to all columns \ndata = data.apply(normalize) ","9ccbc370":"# Putting feature variable to X\nX = data[data.columns[1:]]\n# Putting response variable to y\ny = data[data.columns[:1]]\n\n#random_state is the seed used by the random number generator, it can be any integer.\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)","51fbdc09":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","3fb214e0":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","52790ce5":"# Running RFE with the output number of the variable equal to 9\nlm = LinearRegression()\nrfe = RFE(lm, 9)             # running RFE\nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)           # Printing the boolean results\nprint(rfe.ranking_)  ","f64ad854":"col = X_train.columns[rfe.support_]\ncol","4bb2a088":"# Creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]","e936eb1a":"# Adding a constant variable \nimport statsmodels.tools.tools as sm  \nX_train_rfe = sm.add_constant(X_train_rfe)","779e4212":"import statsmodels.regression.linear_model as sm\nlm = sm.OLS(y_train,X_train_rfe).fit()   # Running the linear model","d69d2fbd":"#Let's see the summary of our linear model\nprint(lm.summary())","0484663c":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nX = data.drop(['price','area','bedrooms','stories','basement','semi-furnished','areaperbedroom'], axis=1)\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif[\"features\"] = X.columns","6cac14f8":"vif.sort_values(by='VIF Factor', ascending=False)","2cec7eb4":"# Now let's use our model to make predictions.\n\n# Creating X_test_6 dataframe by dropping variables from X_test\nX_test_rfe = X_test[col]\n\n# Adding a constant variable \nX_test_rfe = sm.add_constant(X_test_rfe)\n\n# Making predictions\ny_pred = lm.predict(X_test_rfe)","af55166f":"# Now let's check how well our model is able to make predictions.\n\n# Importing the required libraries for plots.\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","13c93ad1":"# Actual and Predicted\nc = [i for i in range(1,165,1)] # generating index \nfig = plt.figure() \nplt.plot(c,y_test, color=\"blue\", linewidth=2.5, linestyle=\"-\") #Plotting Actual\nplt.plot(c,y_pred, color=\"red\",  linewidth=2.5, linestyle=\"-\") #Plotting predicted\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Housing Price', fontsize=16)                       # Y-label","b8cd325b":"# Error terms\nc = [i for i in range(1,165,1)]\nfig = plt.figure()\nplt.plot(c,y_test.price - y_pred, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('ytest-ypred', fontsize=16)                # Y-label","165dea3b":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)                          # Y-label","bd7481f0":"# Plotting the error terms to understand the distribution.\nfig = plt.figure()\nsns.distplot((y_test.price-y_pred),bins=50)\nfig.suptitle('Error Terms', fontsize=20)                  # Plot heading \nplt.xlabel('y_test-y_pred', fontsize=18)                  # X-label\nplt.ylabel('Index', fontsize=16)                          # Y-label","47998f19":"# Now let's check the Root Mean Square Error of our model.\nimport numpy as np\nfrom sklearn import metrics\nprint('RMSE :', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","59ab7269":"## Model Evaluation","13b9ffdc":"## Rescaling the Features\n\nwe can rescale using normalization(min-max scaling)","8852a231":"# 3. Split data into train and test sets","a53cb590":" We can see there are no null values in our data set. But, there are 7 features with object type.\n ","ded81271":"The variable 'furnishingstatus' had three levels. We need to convert it to integer.","19ef0723":"## Build model using sklearn","3d9c53d4":"## Creating a new variable","791f4139":"# Understand data\nProblem Statement:\n\nConsider a real estate company that has a dataset containing the prices of properties in the Delhi region. It wishes to use the data to optimise the sale prices of the properties based on important factors such as area, bedrooms, parking, etc.\n\nEssentially, the company wants \u2014\n\nTo identify the variables affecting house prices, e.g. area, number of rooms, bathrooms, etc.\n\nTo create a linear model that quantitatively relates house prices with variables such as number of rooms, area, number of bathrooms, etc.\n\nTo know the accuracy of the model, i.e. how well these variables can predict house prices.\n\n\n## 1. Import libraries and data set","af693ddd":"# 4. Feature selection\nFeature Selection is the process where you automatically or manually select those features which contribute most to your prediction variable or output in which you are interested in.","6fe56073":"## Make predictions","f62d4bfe":"## 2. Data Preparation"}}