{"cell_type":{"8e7411d1":"code","a9f5ce67":"code","93e14577":"code","8c67eb42":"code","fe844809":"code","cded6703":"code","231b5c37":"code","2c1656db":"code","538c46a1":"code","a11dd3ec":"code","5a219259":"code","b8e32267":"code","cef072b5":"code","62784e8e":"code","2aad2649":"code","cb163dd5":"code","3307777b":"code","2cfefbfe":"code","6aa8bbbc":"code","194594fc":"markdown","28670a05":"markdown","756ae94d":"markdown","ee2d3f00":"markdown","cf9b7493":"markdown","c2885847":"markdown","6bd01e30":"markdown","cab3fbb4":"markdown","2debe801":"markdown","0c25b084":"markdown","2deb0eb0":"markdown","2f19588f":"markdown","da072ba0":"markdown","3a0ecf0c":"markdown","2e03b758":"markdown","ce3dc30a":"markdown"},"source":{"8e7411d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n%matplotlib inline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\nimport time\nimport os\nfrom itertools import product\nfrom pylab import rcParams\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_log_error\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess, Fourier","a9f5ce67":"import os\nfor dirname , _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname,filename))\n\ndatafolder ='..\/input\/store-sales-time-series-forecasting\/'","93e14577":"oil= pd.read_csv(os.path.join(datafolder,'oil.csv'))\nholidays_events=pd.read_csv(os.path.join(datafolder,'holidays_events.csv'))\nstores= pd.read_csv(os.path.join(datafolder,'stores.csv'))\ntrain= pd.read_csv(os.path.join(datafolder,'train.csv'))\ntest= pd.read_csv(os.path.join(datafolder,'test.csv'))\ntransactions= pd.read_csv(os.path.join(datafolder,'transactions.csv'))","8c67eb42":"stores.head()","fe844809":"calendar = pd.DataFrame(index=pd.date_range('2013-01-01', '2017-08-31'))\n\n# moving average\ndf_oil = pd.read_csv(datafolder + 'oil.csv', parse_dates=['date'], infer_datetime_format=True, index_col='date')\ndf_oil['ma_oil'] = df_oil['dcoilwtico'].rolling(7).mean()\n\ncalendar = calendar.merge(df_oil, how='left', left_index=True, right_index=True)\ncalendar['ma_oil'].fillna(method='ffill', inplace=True)","cded6703":"calendar['dofw'] = calendar.index.dayofweek","231b5c37":"df_events = pd.read_csv(datafolder + 'holidays_events.csv', parse_dates=['date'], infer_datetime_format=True)\ndf_events['date'] = df_events['date'].replace({'2013-04-29' : \n                                         pd.to_datetime('2013-03-29')}) # 'Good Friday' mistake correction\n\ndf_events = df_events.set_index('date').sort_index()\ndf_events = df_events[df_events.locale == 'National'] \ndf_events = df_events.groupby(df_events.index).first() # Keep one event only","2c1656db":"calendar['wd'] = True\n\ncalendar.loc[calendar.dofw > 4, 'wd'] = False\ncalendar = calendar.merge(df_events, how='left', left_index=True, right_index=True)\ncalendar.loc[calendar.type == 'Bridge'  , 'wd'] = False\ncalendar.loc[calendar.type == 'Work Day', 'wd'] = True\ncalendar.loc[calendar.type == 'Transfer', 'wd'] = False\ncalendar.loc[(calendar.type == 'Holiday') & (calendar.transferred == False), 'wd'] = False\ncalendar.loc[(calendar.type == 'Holiday') & (calendar.transferred == True ), 'wd'] = True","538c46a1":"df_train = pd.read_csv(datafolder + 'train.csv',\n                       usecols=['store_nbr', 'family', 'date', 'sales'],\n                       dtype={'store_nbr': 'category', 'family': 'category', 'sales': 'float32'},\n                       parse_dates=['date'], infer_datetime_format=True)\ndf_train.date = df_train.date.dt.to_period('D')\ndf_train = df_train.set_index(['store_nbr', 'family', 'date']).sort_index()\n\ndf_test = pd.read_csv(datafolder + 'test.csv',\n                      usecols=['store_nbr', 'family', 'date'],\n                      dtype={'store_nbr': 'category', 'family': 'category'},\n                      parse_dates=['date'], infer_datetime_format=True)\ndf_test.date = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()","a11dd3ec":"end_date='2017-08-15'\nstart_date='2017-04-01'","5a219259":"y = df_train.unstack(['store_nbr', 'family']).loc[start_date:end_date]\n\nfourier = CalendarFourier(freq='W', order=4)\ndp = DeterministicProcess(index=y.index,\n                          constant=False,\n                          order=1,\n                          seasonal=False,\n                          additional_terms=[fourier],\n                          drop=True)\nX = dp.in_sample()\n\n# Extentions\n\nX['oil']  = calendar.loc[start_date:end_date]['ma_oil'].values\nX['dofw'] = calendar.loc[start_date:end_date]['dofw'].values\nX['wd']   = calendar.loc[start_date:end_date]['wd'].values\nX['type'] = calendar.loc[start_date:end_date]['type'].values\n\nX = pd.get_dummies(X, columns=['dofw'], drop_first=True)\nX = pd.get_dummies(X, columns=['type'], drop_first=False)\n\nmodel = Ridge(fit_intercept=True, solver='auto', alpha=0.9, normalize=True) # try alpha,0.1 ,0.3 ,0.6 and 0.9\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","b8e32267":"y_pred   = y_pred.stack(['store_nbr', 'family']).reset_index()\ny_target = y.stack(['store_nbr', 'family']).reset_index().copy()\ny_target['sales_pred'] = y_pred['sales'].clip(0.) \ny_target.groupby('family').apply(lambda r: mean_squared_log_error(r['sales'], r['sales_pred']))","cef072b5":"df_train.unstack(['store_nbr', 'family']).loc['2014':].loc(axis=1)['sales', :, 'SCHOOL AND OFFICE SUPPLIES'].plot(legend=None)","62784e8e":"from joblib import Parallel, delayed\nimport warnings\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble     import RandomForestRegressor\n\nclass CustomRegressor():\n    \n    def __init__(self, n_jobs=-2, verbose=0):  #-1\n        \n        self.n_jobs = n_jobs\n        self.verbose = verbose\n        \n        self.estimators_ = None\n        \n    def _estimator_(self, X, y):\n    \n        warnings.simplefilter(action='ignore', category=FutureWarning)\n        \n        if y.name[2] == 'SCHOOL AND OFFICE SUPPLIES':\n            \n            model = RandomForestRegressor(n_estimators = 300, n_jobs=-2, random_state=0) #random state 1\n            \n        else:\n            \n            model = Ridge(fit_intercept=True, solver='auto', alpha=0.9, normalize=True)\n            \n        model.fit(X, y)\n\n        return model\n\n    def fit(self, X, y):\n\n        self.estimators_ = Parallel(n_jobs=self.n_jobs, \n                              verbose=self.verbose,\n                              )(delayed(self._estimator_)(X, y.iloc[:, i]) for i in range(y.shape[1]))\n        \n        return\n    \n    def predict(self, X):\n        \n        y_pred = Parallel(n_jobs=self.n_jobs, \n                          verbose=self.verbose)(delayed(e.predict)(X) for e in self.estimators_)\n        \n        return np.stack(y_pred, axis=1)","2aad2649":"\nmodel = CustomRegressor(n_jobs=-2, verbose=0) #-1\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","cb163dd5":"y_pred   = y_pred.stack(['store_nbr', 'family']).reset_index()\ny_target = y.stack(['store_nbr', 'family']).reset_index().copy()\ny_target['sales_pred'] = y_pred['sales'].clip(0.) \ny_target.groupby('family').apply(lambda r: mean_squared_log_error(r['sales'], r['sales_pred']))","3307777b":"end_test='2017-08-31'\nstart_test='2017-08-16'\nX_test = dp.out_of_sample(steps=16)\n\n# Extentions\nX_test['oil']  = calendar.loc[start_test:end_test]['ma_oil'].values\nX_test['dofw'] = calendar.loc[start_test:end_test]['dofw'].values\nX_test['wd']   = calendar.loc[start_test:end_test]['wd'].values\n\nX_test = pd.get_dummies(X_test, columns=['dofw'], drop_first=True)\n\n# No national level events in this period\nX_test[['type_Additional', 'type_Event', 'type_Holiday', 'type_Transfer']] = 0\n\nsales_pred = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=y.columns)\nsales_pred = sales_pred.stack(['store_nbr', 'family'])\nsales_pred[sales_pred < 0] = 0. ","2cfefbfe":"My_submission = pd.read_csv(datafolder + 'sample_submission.csv', index_col='id')\nMy_submission.sales = sales_pred.values\nMy_submission.to_csv('submission.csv', index=True)","6aa8bbbc":"My_submission","194594fc":"# TEST THE PREDICTIONS","28670a05":"#### The Schools and Office supplies category seems to be a bit to noisy for linear regression, hence lets take the Randomforest Model approach","756ae94d":"#### NOW FOR LOADING THE DATA ####","ee2d3f00":"#### Day of week","cf9b7493":"#### Calender and Moving average","c2885847":"#### Work days inclusion on calender","6bd01e30":"#### LOADING LIBRARIES ####\n\n### libraries are more of the tools we will require to perfom our data anaylysis.\n","cab3fbb4":"#### RandomForest Model results","2debe801":"#### Holiday events","0c25b084":"# Create a Submission","2deb0eb0":"# MODELING THE DATA","2f19588f":"#### Printing the results of the model","da072ba0":"#### Ploting the sales of School and Office Supplies from 2014.","3a0ecf0c":"### Ridge Regression","2e03b758":"### RandomForest and Ridge Regression","ce3dc30a":"# DATA MANUPILATION\n### Creation of calender from 2013 to 2017 August 31st\n### Moving Average for Oil\n### Creating a variable day of the week\n### Correction of Holiday event data\n"}}