{"cell_type":{"126896de":"code","5896fa01":"code","828ac86c":"code","34794255":"code","aa77883b":"code","ed6533b1":"code","a7d5f66e":"code","ddf84506":"code","300f9640":"code","4249b6b0":"code","e04fd617":"code","12f4f043":"code","cf7f44c1":"code","2c53af5d":"code","58c7f3d4":"code","6da60b26":"code","1f041d19":"code","cdcd48fa":"code","5fd48ab6":"markdown","6a7979fc":"markdown","64f521c2":"markdown","df50915d":"markdown","0090b3a9":"markdown"},"source":{"126896de":"import numpy as np \nimport pandas as pd\nfrom sklearn.svm import SVR\nfrom sklearn.multioutput import MultiOutputRegressor, RegressorChain\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold","5896fa01":"DATA_PATH = '\/kaggle\/input\/trends-assessment-prediction\/'","828ac86c":"loading = pd.read_csv(DATA_PATH + 'loading.csv')\nloading.head()","34794255":"fnc = pd.read_csv(DATA_PATH + 'fnc.csv')\nfnc[fnc.columns[1:]] \/= 600 \nfnc.head()","aa77883b":"dataset = loading.merge(fnc, on='Id')\ndataset.head()","ed6533b1":"y_train = pd.read_csv(DATA_PATH + 'train_scores.csv')\nprint('Number of training samples: {}'.format(len(y_train)))\ny_train.head()","a7d5f66e":"y_train = y_train.fillna(y_train.mean()) #interpolate(method='nearest')\ny_train.head()","ddf84506":"x_train = dataset.loc[dataset['Id'].isin(y_train['Id'])]\nx_train.head()","300f9640":"x_test = dataset.loc[~dataset['Id'].isin(y_train['Id'])]\ntest_ids = x_test['Id'] # Needed for submission\nprint('Number of test samples: {}'.format(len(x_test)))\nx_test.head()","4249b6b0":"x_train = x_train.drop('Id', axis=1).values\nx_test = x_test.drop('Id', axis=1).values\ny_train = y_train.drop('Id', axis=1).values","e04fd617":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","12f4f043":"model = RegressorChain(BayesianRidge(alpha_init=1e-4))","cf7f44c1":"def score(y_pred, y_true):\n     return sum(list(map(lambda w, s: w * s, [.3, .175, .175, .175, .175], np.sum(np.abs(y_true - y_pred), axis=0) \/ np.sum(y_true, axis=0))))","2c53af5d":"n = 10\ny_test = np.zeros((len(x_test), 5, n))\nscores = np.zeros(n)\nfor i, (train_indexes, valid_indexes) in enumerate(KFold(n).split(x_train)):\n    print('Split {} of {} ...'.format(i + 1, n))\n    x, x_valid = x_train[train_indexes], x_train[valid_indexes]\n    y, y_valid = y_train[train_indexes], y_train[valid_indexes]\n    \n    model.fit(x, y)\n\n    y_pred = model.predict(x_valid)\n    scores[i] = score(y_pred, y_valid)\n    print('Score = {}'.format(scores[i]))\n    print('Predicted : {}'.format(y_pred[0]))\n    print('Expected  : {}\\n'.format(y_valid[0]))\n    \n    y_test[:,:,i] = model.predict(x_test)","58c7f3d4":"print('Average score = {}'.format(scores.mean()))","6da60b26":"y_test = y_test.mean(axis=2)\nprint(y_test)","1f041d19":"outputs = ['age', 'domain1_var1', 'domain1_var2', 'domain2_var1', 'domain2_var2']\nids = ['{}_{}'.format(int(id_), output)  for id_ in test_ids for output in outputs]\npredicted = y_test.reshape(5 * len(y_test))\n\nassert len(predicted) == 29385\nsubmission = pd.DataFrame({'Id': ids, 'Predicted': predicted})\nsubmission.head(10)","cdcd48fa":"submission.to_csv('submission.csv', index = False)\n!head submission.csv","5fd48ab6":"# Submission","6a7979fc":"# Model","64f521c2":"# Prediction","df50915d":"# Training and Evaluation","0090b3a9":"# Dataset"}}