{"cell_type":{"5fc52030":"code","78ad3494":"code","eb2db67a":"code","12fa2fd6":"code","65b48edf":"code","ae1e800d":"code","936d79d9":"code","cb7f22b8":"code","c111fee1":"code","559ca789":"code","a6a3c9f0":"code","a6175cea":"code","cf6e986d":"code","96b42307":"code","24d5f0f0":"code","d4089c2b":"code","a363b646":"code","20f53fdf":"code","f61c89a6":"code","5a23b037":"code","56c7e39f":"markdown"},"source":{"5fc52030":"import cv2\n\nimg = cv2.imread(\"..\/input\/brain-tumor-classification-mri\/Testing\/meningioma_tumor\/image(1).jpg\")\n\nimg.shape","78ad3494":"import matplotlib.pyplot as plt\n\nplt.imshow(img)\nplt.show()","eb2db67a":"train_dir = \"..\/input\/brain-tumor-classification-mri\/Training\"\ntest_dir = \"..\/input\/brain-tumor-classification-mri\/Testing\"","12fa2fd6":"import tensorflow as tf\n\ntrain_data = tf.keras.preprocessing.image_dataset_from_directory(train_dir,\n                                                                 image_size=(224,224),\n                                                                 label_mode = \"categorical\",\n                                                                 batch_size = 32\n                                                                 )\ntest_data =tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n                                                               image_size =(224,224),\n                                                               label_mode = \"categorical\",\n                                                               batch_size = 32\n                                                               )","65b48edf":"for image, label in train_data:\n  print(image.shape)\n  print(label.shape)\n  break","ae1e800d":"label_names = train_data.class_names\n\nlabel_names, len(label_names)","936d79d9":"import matplotlib.pyplot as plt\nimport tensorflow as tf\n\nplt.figure(figsize=(12,12))\n\nfor image, label in train_data.take(1):\n\n  for i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(image[i].numpy().astype(\"uint8\"))\n    plt.title(label_names[tf.argmax(label[i])])\n    plt.axis(\"off\")\n","cb7f22b8":"# building a efficientnet model\n\nimport tensorflow as tf\n\nbase_model = tf.keras.applications.EfficientNetB5(include_top= False)\nbase_model.trainable = False","c111fee1":"# building the model\nimport tensorflow as tf\nfrom tensorflow.keras import layers\n\ninputs = tf.keras.Input(shape=(224,224,3))\n\nx = base_model(inputs)\n\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(128, activation= \"relu\")(x)\nx = layers.Dropout(0.2)(x)\nx = layers.Dense(128, activation = \"relu\")(x)\nx = layers.Dropout(0.2)(x)\nx = layers.Dense(64, activation = \"relu\")(x)\n\noutputs = layers.Dense(4, activation=\"softmax\")(x)\n\nmodel = tf.keras.Model(inputs,outputs)\n","559ca789":"model.summary()","a6a3c9f0":"# compiling the model\n\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(learning_rate= 0.001),\n    metrics = [\"accuracy\"]\n)","a6175cea":"# fiiting data to the model\n\nmodel.fit(train_data,\n          epochs = 10,\n          steps_per_epoch = len(train_data),\n          validation_data = test_data,\n          validation_steps = len(test_data)\n)","cf6e986d":"base_model_evluation = model.evaluate(test_data)","96b42307":"print(f\"Base Modle Accuracy: {base_model_evluation[1] *100:0.2f} %\")","24d5f0f0":"# tunning the model\nbase_model.trainable = True\n\nfor layer in base_model.layers[:-1]:\n  base_model.trainable = False\n\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(learning_rate= 0.001),\n    metrics = [\"accuracy\"]\n)\n","d4089c2b":"model.summary()","a363b646":"# fitting data to the tuned model\n\nmodel.fit(train_data,\n          epochs = 10,\n          steps_per_epoch = len(train_data),\n          validation_data = test_data,\n          validation_steps = len(test_data)\n          )","20f53fdf":"# evaluatinn the model\nmodel_evaluation = model.evaluate(test_data)","f61c89a6":"print(f\"Model Accuracy:{model_evaluation[1] *100: 0.2f} %\")","5a23b037":"# predicting and visualizing the test data\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(14,14))\n\nfor image, label in test_data.take(1):\n  model_prediction = model.predict(image)\n\n  for i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(image[i].numpy().astype(\"uint8\"))   \n    plt.title(f\"Model Prediction :{label_names[tf.argmax(model_prediction[i])]}\\n Original : {label_names[tf.argmax(label[i])]}\")\n","56c7e39f":"**Tunning the model**"}}