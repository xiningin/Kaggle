{"cell_type":{"1a90d5c1":"code","a1555766":"code","0eee53fb":"code","70302395":"code","9c0a410b":"code","8ffa9e06":"code","1e19d05b":"code","9c437f6c":"code","62e23529":"code","071971f2":"code","6e0d190b":"code","9a9cbbdc":"code","a3ba0cb0":"code","dc856696":"code","e6ee1b05":"code","9c00c963":"code","7a0b9667":"code","79212972":"code","8383b5d3":"code","a3fdc226":"code","a544f0ec":"code","bed671a8":"code","011170ba":"code","60712de0":"code","92f1133e":"code","016c6a12":"code","d4f69cd0":"code","de80407f":"code","44dd22d7":"markdown"},"source":{"1a90d5c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1555766":"%matplotlib inline\nimport numpy as np\nfrom scipy import misc\nimport matplotlib.pyplot as plt\nimport imageio","0eee53fb":"#Code by Muhammad Maaz https:\/\/www.kaggle.com\/muhammadmaaz2594\/satellite-image-processing-using-numpy\n\nfrom skimage import data\nimport cv2\n\nphoto_data = cv2.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\n\n# Note: In the video, this is mentioned as an ndarray. Don't worry about the type for now, it should\n# still work as usual.\ntype(photo_data)","70302395":"plt.figure(figsize=(15,15))\nplt.imshow(photo_data);","9c0a410b":"photo_data.shape\n\nprint(photo_data)","8ffa9e06":"photo_data.size","1e19d05b":"photo_data.min(), photo_data.max()","9c437f6c":"photo_data.mean()","62e23529":"photo_data[150, 250]","071971f2":"photo_data[150, 250, 1]","6e0d190b":"#photo_data = misc.imread('..\/input\/wildfire\/sd-3layers.jpg')\nphoto_data[150, 250] = 0\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data);","9a9cbbdc":"photo_data = cv2.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\n\nphoto_data[200:800, : ,1] = 255\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data);","a3ba0cb0":"photo_data = cv2.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\n\nphoto_data[200:800, :] = 255\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data);","dc856696":"photo_data = imageio.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\n\nphoto_data[200:800, :] = 0\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data);","e6ee1b05":"photo_data = cv2.imread('..\/input\/\/minecraft-skin-dataset\/Collage.png')\nprint(\"Shape of photo_data:\", photo_data.shape)\nlow_value_filter = photo_data < 50\nprint(\"Shape of low_value_filter:\", low_value_filter.shape)","9c00c963":"# import random\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data)\nphoto_data[low_value_filter] = 0\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data);","7a0b9667":"rows_range = np.arange(len(photo_data))\ncols_range = rows_range\nprint(type(rows_range))","79212972":"photo_data[rows_range, cols_range] = 255","8383b5d3":"plt.figure(figsize=(15,15))\nplt.imshow(photo_data);","a3fdc226":"total_rows, total_cols, total_layers = photo_data.shape\n#print(\"photo_data = \", photo_data.shape)\n\nX, Y = np.ogrid[:total_rows, :total_cols]\n#print(\"X = \", X.shape, \" and Y = \", Y.shape)","a544f0ec":"center_row, center_col = total_rows \/ 2, total_cols \/ 2\n#print(\"center_row = \", center_row, \"AND center_col = \", center_col)\n#print(X - center_row)\n#print(Y - center_col)\ndist_from_center = (X - center_row)**2 + (Y - center_col)**2\n#print(dist_from_center)\nradius = (total_rows \/ 2)**2\n#print(\"Radius = \", radius)\ncircular_mask = (dist_from_center > radius)\n#print(circular_mask)\nprint(circular_mask[1500:1700,2000:2200])","bed671a8":"photo_data = cv2.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\nphoto_data[circular_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data)","011170ba":"X, Y = np.ogrid[:total_rows, :total_cols]\nhalf_upper = X < center_row # this line generates a mask for all rows above the center\n\nhalf_upper_mask = np.logical_and(half_upper, circular_mask)","60712de0":"photo_data = imageio.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\nphoto_data[half_upper_mask] = 255\n#photo_data[half_upper_mask] = random.randint(200,255)\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data);","92f1133e":"photo_data = imageio.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\nred_mask   = photo_data[:, : ,0] < 150\n\nphoto_data[red_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data);","016c6a12":"photo_data = imageio.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\ngreen_mask = photo_data[:, : ,1] < 150\n\nphoto_data[green_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data);","d4f69cd0":"photo_data = imageio.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\nblue_mask  = photo_data[:, : ,2] < 150\n\nphoto_data[blue_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data);","de80407f":"photo_data = imageio.imread('..\/input\/minecraft-skin-dataset\/Collage.png')\n\nred_mask   = photo_data[:, : ,0] < 150\ngreen_mask = photo_data[:, : ,1] > 100\nblue_mask  = photo_data[:, : ,2] < 100\n\nfinal_mask = np.logical_and(red_mask, green_mask, blue_mask)\nphoto_data[final_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data);","44dd22d7":"Acknowledgement:\n\nMuhammad Maaz\n\nhttps:\/\/www.kaggle.com\/muhammadmaaz2594\/satellite-image-processing-using-numpy"}}