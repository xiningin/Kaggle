{"cell_type":{"5e0e6855":"code","5f958811":"code","987e780c":"code","c9738870":"code","aee3b157":"code","2682b303":"code","45742df7":"code","686260d5":"code","3319c325":"code","a2baba04":"code","890a31ae":"code","212beedb":"code","62e9a3fd":"code","9c38aaab":"code","2e7eba77":"code","3f1cb3d6":"code","53dd8196":"code","f94437f8":"code","9820bea2":"code","356c8084":"code","5b670d8f":"code","3b5a289d":"code","8af62e78":"code","2e1c5ab3":"code","0fe2752f":"code","1803e843":"code","b33c0d83":"markdown","421e1767":"markdown","5ffa5adb":"markdown","92d2fe06":"markdown","62356b71":"markdown","b168b05a":"markdown","8bd6397d":"markdown","223c1881":"markdown","8d3e500c":"markdown","ef207106":"markdown","eb99f54e":"markdown","adc313ed":"markdown"},"source":{"5e0e6855":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f958811":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom  xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,BaggingRegressor,GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import train_test_split,cross_validate\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV,StratifiedKFold\nfrom sklearn.tree import DecisionTreeRegressor\nimport time","987e780c":"df=pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\ntest_data=pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')\ndf","c9738870":"df.info()","aee3b157":"df['datetime'] = pd.to_datetime(df['datetime'], \n format = '%Y-%m-%dT%H:%M:%S', \n errors = 'coerce')\ndf['Year'] = df['datetime'].dt.year\ndf['Month'] = df['datetime'].dt.month\ndf['Day'] = df['datetime'].dt.day\ndf['Hour'] = df['datetime'].dt.hour\n\ndf","2682b303":"df['Weekday']=pd.DatetimeIndex(df['datetime']).day_name()\ndf","45742df7":"df.drop('datetime',axis=1,inplace=True)","686260d5":"df","3319c325":"df['Hour'].value_counts()","a2baba04":"df['Weekday']=pd.factorize(df['Weekday'])[0].reshape(-1, 1)\ndf.info()","890a31ae":"c=[]\nfor i in df['Hour']:\n    \n    if i>= 6 or i<= 18 :\n        c.append(\"Day\")\n    else:\n        c.append(\"Night\")\ndf['DayorNight']=c\ndf['DayorNight']=pd.factorize(df['DayorNight'])[0].reshape(-1, 1)\nc=[]\ndf","212beedb":"\ncor_mat= df[:].corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)] = False\nfig=plt.gcf()\nfig.set_size_inches(30,12)\nsns.heatmap(data=cor_mat,mask=mask,square=True,annot=True,cbar=True)","62e9a3fd":"df.drop(['Weekday','registered','casual'],axis=1,inplace=True)","9c38aaab":"Y=np.log1p(df['count'])\nplt.figure(figsize=(10, 8))\nsns.histplot(Y);\nplt.title(\"Bike Count\");","2e7eba77":"X=df.drop('count',axis=1)\nX","3f1cb3d6":"X_train, X_valid, y_train, y_valid = train_test_split(X,Y, train_size=0.8, test_size=0.2,random_state=0)\nX_train.info()","53dd8196":"import xgboost as xgb\nfrom sklearn.ensemble import ExtraTreesRegressor\nmodels=[RandomForestRegressor(),AdaBoostRegressor(),BaggingRegressor(),SVR(),LinearRegression(),DecisionTreeRegressor(),XGBRegressor(),ExtraTreesRegressor(),GradientBoostingRegressor()]\nmodel_names=['RandomForestRegressor','AdaBoostRegressor','BaggingRegressor','SVR','LinearRegression','DecisionTreeRegressor','XGBRegressor','ExtraTreesRegressor','GradientBoostingRegressor']\nrmsle=[]\nd={}\n\nfor model in range (len(models)):\n    clf=models[model]\n    clf.fit(X_train,y_train)\n    print(\"model_name : \",model_names[model])\n    print(clf.get_params())\n    test_pred=clf.predict(X_valid)\n    #print(test_pred)\n    rmsle.append(np.sqrt(mean_squared_log_error(abs(test_pred),(y_valid))))\n    \nd={'Modelling Algo':model_names,'RMSLE':rmsle}   \nd","f94437f8":"rmsle_frame=pd.DataFrame(d)\nrmsle_frame","9820bea2":"sns.factorplot(y='Modelling Algo',x='RMSLE',data=rmsle_frame,kind='bar',size=5,aspect=2)","356c8084":"def rmsle(y_pred,y_true):\n    log1=np.log(y_pred + 1)\n    log2=np.log(y_true + 1)\n    se = (log1 - log2) ** 2 \n    mse=np.mean(se)\n    return np.sqrt(mse)\n\nfrom sklearn.metrics import make_scorer\nmyScorer = make_scorer(rmsle, greater_is_better=False)","5b670d8f":"param_grid =  {'n_estimators': [50,100,150,300,500,40]}\nkfold = StratifiedKFold(n_splits=2, shuffle=True, random_state=1)\n\nbest = GridSearchCV(estimator=BaggingRegressor(DecisionTreeRegressor(min_samples_split = 10)), param_grid=param_grid, scoring=myScorer, cv=5, n_jobs=None,verbose=0)\nbest.fit(X, Y)\nprint(-best.best_score_,best.best_estimator_,best.best_params_)","3b5a289d":"test_data.info()","8af62e78":"test_data['datetime'] = pd.to_datetime(test_data['datetime'], \n format = '%Y-%m-%dT%H:%M:%S', \n errors = 'coerce')\ntest_data['Year'] = test_data['datetime'].dt.year\ntest_data['Month'] = test_data['datetime'].dt.month\ntest_data['Day'] = test_data['datetime'].dt.day\ntest_data['Hour'] = test_data['datetime'].dt.hour","2e1c5ab3":"c=[]\nfor i in test_data['Hour']:\n    \n    if i>= 6 or i<= 18 :\n        c.append(\"Day\")\n    else:\n        c.append(\"Night\")\ntest_data['DayorNight']=c\ntest_data['DayorNight']=pd.factorize(test_data['DayorNight'])[0].reshape(-1, 1)\ntest_data","0fe2752f":"\ndf_copy=test_data.drop(['datetime'],axis=1)\n\npred=np.round(np.expm1(best.predict(df_copy))).astype(int)\n#df_copy","1803e843":"output = pd.DataFrame({'datetime':test_data.datetime,\n                       'count': pred})\noutput.to_csv('submission.csv', index=False)\n\nprint(\"Your submission was successfully saved!\")","b33c0d83":"# Correlation","421e1767":"#### working Day have high correlation with the 'weekday','registered','casual' so I will drop Them","5ffa5adb":"# Grid Search","92d2fe06":"# Datetime handling","62356b71":"# Submission File Generation","b168b05a":"### The best model is Bagging Regressor or XGboost","8bd6397d":"# Testing","223c1881":"### Adding WeekDays","8d3e500c":"# Building the Model","ef207106":"### Data Encoding","eb99f54e":"***No missing Data***","adc313ed":"# Data Spliting"}}