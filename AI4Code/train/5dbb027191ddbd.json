{"cell_type":{"cc7706d4":"code","94148d86":"code","dd194aa9":"code","9e97d04f":"code","95857c6d":"code","7f1ed1f8":"code","995c5f12":"code","f480df57":"code","e042a2ed":"code","b13a14ce":"code","b4716a3b":"code","9a51db84":"code","1b3ada8b":"code","3028fcab":"code","12c75656":"code","c4a45207":"code","edac0e26":"code","5572dd76":"code","7939007c":"code","e6ee1453":"code","89259084":"code","f560ac03":"code","21962aa5":"code","f064292b":"markdown","01bed7ae":"markdown","79808c12":"markdown"},"source":{"cc7706d4":"import xgboost as xgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","94148d86":"import tensorflow as tf\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","dd194aa9":"train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")","9e97d04f":"train","95857c6d":"test","7f1ed1f8":"print(train.info())\nprint(test.info())","995c5f12":"target = train['claim']\ndata = train.drop(['claim','id'],axis=1)\ntest = test.drop('id',axis=1)","f480df57":"columns=data.columns.to_list()\nprint(columns)","e042a2ed":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n        'objective': trial.suggest_categorical('objective',['reg:logistic','reg:tweedie']), \n        'tree_method': trial.suggest_categorical('tree_method',['gpu_hist']),  # 'gpu_hist','hist'\n        'lambda': trial.suggest_loguniform('lambda',1e-3,10.0),\n        'alpha': trial.suggest_loguniform('alpha',1e-3,10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.008,0.01,0.012,0.014,0.016,0.018,0.02]),\n        'n_estimators': trial.suggest_categorical('n_estimators', [1000,2000,4000,8000]),\n        'max_depth': trial.suggest_categorical('max_depth', [5,7,9,11,13,15,17,20]),\n        'random_state': trial.suggest_categorical('random_state', [24,48,2020]),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1,300),\n        'use_label_encoder': trial.suggest_categorical('use_label_encoder',[False])\n    }\n    model = xgb.XGBClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","b13a14ce":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=8)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","b4716a3b":"study.trials_dataframe()","9a51db84":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","1b3ada8b":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","3028fcab":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","12c75656":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['colsample_bytree','max_depth'])","c4a45207":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","edac0e26":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","5572dd76":"Best_trial=study.best_trial.params\nprint(Best_trial)","7939007c":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsample","e6ee1453":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = xgb.XGBClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","89259084":"model","f560ac03":"print(preds.shape)\nprint(pd.Series(preds).value_counts())","21962aa5":"subm = sample\nsubm['claim'] = np.where(preds<0.5,0,1).astype(int)\nsubm.to_csv('submission.csv',index=False)\nsubm","f064292b":"# XGBoost with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna","01bed7ae":"train=train.fillna(0)\ntest=test.fillna(0)","79808c12":"### Objective candidate for XGBoost\n* Objective candidate: survival:aft\n* Objective candidate: binary:hinge\n* Objective candidate: multi:softmax\n* Objective candidate: multi:softprob\n* Objective candidate: rank:pairwise\n* Objective candidate: rank:ndcg\n* Objective candidate: rank:map\n* Objective candidate: reg:squarederror\n* Objective candidate: reg:squaredlogerror\n* Objective candidate: reg:logistic\n* Objective candidate: reg:pseudohubererror\n* Objective candidate: binary:logistic\n* Objective candidate: binary:logitraw\n* Objective candidate: reg:linear\n* Objective candidate: count:poisson\n* Objective candidate: survival:cox\n* Objective candidate: reg:gamma\n* Objective candidate: reg:tweedie"}}