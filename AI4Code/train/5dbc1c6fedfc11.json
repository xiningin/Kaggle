{"cell_type":{"ee8aeec3":"code","50db4b14":"code","e64f7083":"code","ffb5a7ef":"code","13afd64c":"code","e9ea9624":"code","5aa6c9e5":"code","02b378e4":"code","ce053101":"code","2aaf4f21":"code","78670910":"code","2ea25db1":"code","c6ec5a07":"code","37b0a9ff":"code","9819432d":"code","b408c760":"code","7cf986c4":"code","2bec9370":"code","47a77a78":"code","e37c0c9d":"code","34b1966e":"code","3385155c":"code","5519a861":"code","5d2108d2":"code","5d28816a":"code","63c89b9c":"code","b8397626":"code","0796b63c":"code","195e9f82":"code","3f8f974e":"code","d8db71e4":"code","5ffa3882":"code","0ed2f522":"code","1536de93":"code","c3bfe907":"code","c9d13e7c":"code","c055a247":"code","942aaa0c":"code","cdc2b961":"code","dafd7131":"code","063e2f50":"code","0e8f9087":"code","5d836341":"code","ea7eddbd":"code","38042ecb":"code","25e645cf":"code","d48f76a2":"code","fdcacbdc":"code","22efcdfd":"code","4b9142c3":"code","674e1f98":"code","0269081d":"code","b177269b":"code","2dd09a10":"code","c6ce6343":"code","56cc3677":"code","0ea70785":"code","82376d85":"code","83caae21":"code","8ba91f6c":"code","ff3eda28":"code","8664700d":"code","717fab20":"code","404e9287":"code","e0a4ef7a":"code","ab0dc93a":"code","331cf2a4":"code","d97d8a8f":"code","ecd18e95":"code","45d48927":"code","10f4d609":"code","2bc361d6":"code","d13e59bb":"code","fc0d9581":"code","f85ba54b":"code","c8ed50ff":"code","8be2a3ca":"code","31c859c7":"code","d773751c":"code","0ecce933":"code","8722c5e6":"code","22538610":"code","732b190e":"code","38211b7b":"code","3278e438":"code","6319fc23":"code","0ec45c49":"code","5907255b":"markdown","5fecba97":"markdown","62687647":"markdown","09e713f1":"markdown","27620ad9":"markdown","00e65c9d":"markdown","70af23a0":"markdown","714c9e8f":"markdown","c8a55bd0":"markdown","40314227":"markdown","8d57b8dd":"markdown","1e957617":"markdown"},"source":{"ee8aeec3":"# Python 3 environment with analytics libraries installed\n# as defined by the kaggle\/python Docker \n\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","50db4b14":"#other libraries for math and plotting\nimport seaborn as sns\n\nimport statsmodels.api as sm\n\nimport matplotlib\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\n\n#map plotting libraries\nimport folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\n\n#ML models\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import preprocessing\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom sklearn.linear_model import LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\n#ignore error messages\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")    \n    ","e64f7083":"df1=pd.read_csv(\"..\/input\/us-airbnb-open-data\/AB_US_2020.csv\")\ndf1","ffb5a7ef":"#how many NaNs in the dataset?\ndf1.isnull().sum().sum()","13afd64c":"df1.name.isnull().sum().sum()","e9ea9624":"df1.host_name.isnull().sum().sum()","5aa6c9e5":"df1.reviews_per_month.isnull().sum().sum()","02b378e4":"##replace the NaNs in some columns\ndf1[['name', 'host_name']] = df1[['name', 'host_name']].fillna(value='None')","ce053101":"#replace NaNs with 0s\ndf1[['reviews_per_month']] = df1[['reviews_per_month']].fillna(value=0)","2aaf4f21":"#over 100,000 entries are NaN in this column\ndf1.neighbourhood_group.isnull().sum().sum()","78670910":"#missing dates\ndf1.last_review.isnull().sum().sum()","2ea25db1":"#dropped 2 columns with several NaNs\ndf2=df1.drop(['neighbourhood_group', 'last_review'], axis=1)","c6ec5a07":"# create a list of our conditions\nconditions = [\n    (df2['city'] == 'New York City'),\n    (df2['city'] == 'Columbus'),\n    (df2['city'] == 'Hawaii'),\n    (df2['city'] == 'Asheville'),\n     (df2['city'] == 'Jersey City'),\n    \n     (df2['city'] == 'Washington D.C.'),\n    (df2['city'] == 'Clark County'),\n     (df2['city'] == 'Rhode Island'),\n     (df2['city'] == 'Portland'),\n     (df2['city'] == 'Austin'),\n    \n    (df2['city'] == 'Broward County'),\n    (df2['city'] == 'Seattle'),\n    (df2['city'] == 'Twin Cities MSA'),\n    (df2['city'] == 'New Orleans'),\n    \n    (df2['city'] == 'Chicago'),\n    (df2['city'] == 'Nashville'),\n    (df2['city'] == 'Denver'),\n        \n    (df2['city'] == 'Cambridge') | (df2['city'] == 'Boston') | (df2['city'] == 'Salem'),\n    \n    (df2['city'] == 'Los Angeles') | (df2['city'] == 'Oakland') | (df2['city'] == 'San Diego') |\n    (df2['city'] == 'San Francisco') | (df2['city'] == 'Santa Cruz County') |\n    (df2['city'] == 'Pacific Grove')| (df2['city'] == 'San Clara Country') | (df2['city'] == 'San Mateo County')\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['NY', 'OH', 'HI', 'NC', 'NJ',\n          'DC', 'NV', 'RI', \n          'OR', 'TX', 'FL','WA', \n          'MN', 'LA', 'IL', 'TN',\n         'CO', 'MA', 'CA']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf2['state'] = np.select(conditions, values)\n\n# display updated DataFrame\ndf2.head()","37b0a9ff":"#name is an intro to the property\ndf2.name.unique()","9819432d":"df2.room_type.value_counts()","b408c760":"df2.describe(include='all')","7cf986c4":"st_count = df2['state'].value_counts()\nsns.set(style=\"darkgrid\")\nsns.barplot(st_count.index, st_count.values, alpha=0.9)\nplt.title('Frequency of States')\nplt.ylabel('Occurrences', fontsize=10)\nplt.xlabel('State', fontsize=12)\nplt.show()","2bec9370":"#find possible outliers\n#boxplot of columns\nboxplot = df2.boxplot(figsize=(8,7),rot=45)","47a77a78":"#drop column 'host_id'\ndf3=df2.drop(['host_id'], axis=1)","e37c0c9d":"corr1=df3.corr()\nsns.heatmap(corr1, cmap=\"YlOrBr\")","34b1966e":"df3['room_type'].value_counts().plot(kind='barh', figsize=(6,4), \n                                     edgecolor=(0,0,0),color='tan', title='Room Type')","3385155c":"df3['state'].value_counts().plot(kind='barh', figsize=(6,6), \n                                     edgecolor=(0,0,0),color='lightblue', title='State')","5519a861":"df3.plot(x='price', y='availability_365', style='+', color='salmon')  \nplt.xlabel('Id')  \nplt.ylabel('SalePrice')  \nplt.show()","5d2108d2":"##map \n#a map of North America\nUS = folium.Map(location=[54.5260, -105.2551],\n                   zoom_start = 3)\n\n\n# List comprehension to make a list of lists\nheat_data = [[row['latitude'],row['longitude']] for index, row in df3.iterrows()]\n\n# Plot it on the map\nHeatMap(heat_data).add_to(US)\n\n# Display the map\nUS","5d28816a":"df3.plot(kind='density', subplots=True, layout=(14,1), sharex=False, figsize=(10,10))\nplt.show()","63c89b9c":"sns.lmplot(x='price', y='id', data=df3, logistic=False,  markers=[\"^\"])","b8397626":"#drop outliers: minimum_nights 31 and higher\ndf3=df3[df3['minimum_nights'] < 31]\n#verify changes\ndf3.shape","0796b63c":"#Linear regression\nX = df3['price'].values.reshape(-1,1)\ny = df3['availability_365'].values.reshape(-1,1)","195e9f82":"#split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=0)\n\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train) #train the model","3f8f974e":"#Intercept\nprint(regressor.intercept_)\n#Slope\nprint(regressor.coef_)","d8db71e4":"#Predict\ny_pred = regressor.predict(X_test)","5ffa3882":"#actual value and predicted value\ndfLinReg = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndfLinReg","0ed2f522":"plt.scatter(X_test, y_test,  color='purple')\nplt.plot(X_test, y_pred, color='yellow', linewidth=2)\nplt.show()","1536de93":"#comparison \nfirst20preds=dfLinReg.head(20)\nc='darkgreen', 'steelblue'\nfirst20preds.plot(kind='bar',figsize=(9,6), color=c)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","c3bfe907":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","c9d13e7c":"#Convert to Numeric\n# creating instance of labelencoder\nlabelencoder = LabelEncoder()# Assigning numerical values and storing in another column\ndf3['room_type_Cat'] = labelencoder.fit_transform(df3['room_type'])\ndf3['city_Cat'] = labelencoder.fit_transform(df3['city'])\ndf3['state_Cat'] = labelencoder.fit_transform(df3['state'])\ndf3.head()","c055a247":"#multiple regression\n\nX_ = df3[['calculated_host_listings_count', 'room_type_Cat', \n          'room_type_Cat', 'city_Cat', 'state_Cat']] # multiple variable regression. \nY = df3['price']\n \n# with sklearn\nregr = LinearRegression()\nregr.fit(X_, Y)\n\nprint('Intercept: ', regr.intercept_)\nprint('Coefficients: ', regr.coef_)\n\nprint (regr)","942aaa0c":"y_pred2 = regr.predict(X_)","cdc2b961":"dfmult= pd.DataFrame({'Actual': Y, 'Predicted': y_pred2.flatten()})\ndfmult","dafd7131":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y, y_pred2)))","063e2f50":"#comparison \nfirst20preds2=dfmult.head(20)\nfirst20preds2.plot(kind='bar',figsize=(9,5))\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","0e8f9087":"# create a list of conditions\nconditions = [\n    (df3['price'] < 100),\n    (df3['price'] >= 100) & (df3['price'] < 250),\n     (df3['price'] >= 250) & (df3['price'] < 600),\n    (df3['price'] >= 600) ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['economic', 'low-mid', 'high-mid','high']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf3['price_range'] = np.select(conditions, values)","5d836341":"df3['price_range'].value_counts()","ea7eddbd":"labelencoder = LabelEncoder()# Assigning numerical values and storing in another column\ndf3['price_rng_Cat'] = labelencoder.fit_transform(df3['price_range'])","38042ecb":"df4=df3[['id','minimum_nights','availability_365', \n         'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count',\n         'room_type_Cat','city_Cat', 'state_Cat', 'price', 'price_rng_Cat']]","25e645cf":"df4.corr().style.background_gradient(cmap='magma')","d48f76a2":"#K-nearest neighbors (KNN)\n##Best performing model\n\nneigh = KNeighborsClassifier(n_neighbors=3)\n\nX1=df4.iloc[:, :-1].values\nY1=df4['price_rng_Cat'].values\n\n# Split into training and test  \nX_train, X_test, y_train, y_test = train_test_split( \n             X1, Y1, test_size = 0.4, random_state=1) \n\n#standardize data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n#fit the model\nneigh.fit(X_train, y_train)","fdcacbdc":"# Predicted class\ny_pred3=neigh.predict(X_test)","22efcdfd":"KNNmod = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred3.flatten()})\nKNNmod","4b9142c3":"# Calculate the accuracy of the model \nprint(neigh.score(X_test, y_test)) ","674e1f98":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred3)))","0269081d":"#comparison \nfirst20preds3=KNNmod.head(20)\nc2='darkkhaki', 'dimgray'\nfirst20preds3.plot(kind='barh',figsize=(9,6), color=c2)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='orange')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","b177269b":"#find possible outliers\n#boxplot of columns\nboxplot5 = df4.boxplot(figsize=(8,7),rot=45)","2dd09a10":"#find possible outliers\n#boxplot of columns\nboxplot6 = df4.boxplot(column=['minimum_nights', 'availability_365', 'number_of_reviews',\n       'reviews_per_month', 'calculated_host_listings_count', 'room_type_Cat',\n       'city_Cat', 'state_Cat', 'price_rng_Cat'],\n                       figsize=(8,7),rot=45)\n","c6ce6343":"#Scatter plot \nplt.figure(figsize=(9, 6))\nsns.scatterplot(\n    data=df4, x=\"calculated_host_listings_count\", y=\"price_rng_Cat\", hue=\"room_type_Cat\", \n    sizes=(10, 200), hue_norm=(0, 4), legend=\"full\")","56cc3677":"df4.corr().style.background_gradient(cmap='mako')","0ea70785":"pRange_count = df4['price_rng_Cat'].value_counts()\nsns.set(style=\"darkgrid\")\nsns.barplot(pRange_count.index, pRange_count.values, alpha=0.9)\nplt.title('Price Range occurances')\nplt.ylabel('Occurrences', fontsize=10)\nplt.xlabel('Price Range', fontsize=12)\nplt.show()","82376d85":"sns.catplot(x='price_rng_Cat', y='price', data=df4)","83caae21":"#KNN Regression \nknn = KNeighborsRegressor(algorithm='auto')\ncols = df4[['calculated_host_listings_count', 'room_type_Cat']].values\n\nX2=cols\nY2=df4['price_rng_Cat'].values","8ba91f6c":"#normalize \nX_normalized = preprocessing.normalize(X2, norm='max')\nX_normalized","ff3eda28":"# Split into training and test  \nX_train, X_test, y_train, y_test = train_test_split( \n             X_normalized, Y2, test_size = 0.3) \n\n#fit the model\nknn.fit(X_train, y_train)","8664700d":"# Predicted class\ny_pred4=knn.predict(X_test)","717fab20":"KNNreg = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred4.flatten()})\nKNNreg","404e9287":"KNNreg['squared_error'] = (KNNreg['Predicted'] - KNNreg['Actual'])**(2)\nmse = KNNreg['squared_error'].mean()\nrmse2 = mse ** (1\/2)\nrmse2","e0a4ef7a":"#comparison \nfirst20preds4=KNNreg.head(20)\nc2='teal', 'orchid','gray'\nfirst20preds4.plot(kind='bar',figsize=(9,6), color=c2)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='goldenrod')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","ab0dc93a":"Treedf=df4[[ 'minimum_nights', 'availability_365', 'number_of_reviews',\n       'reviews_per_month', 'calculated_host_listings_count', 'room_type_Cat',\n       'city_Cat', 'state_Cat', 'price_rng_Cat']]","331cf2a4":"##Decision Tree\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.tree import plot_tree\n\n#split dataset in features and target variable\nfeature_cols = ['room_type_Cat', 'calculated_host_listings_count']\nX = Treedf[feature_cols].values # Features\ny = Treedf.price_rng_Cat.values # Target variable","d97d8a8f":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,\n                                                   random_state = 5)\n\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n","ecd18e95":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train_scaled,y_train)\n\n#Predict the response for test dataset\ny_pred6 = clf.predict(X_test)","45d48927":"# Model Accuracy: how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred6))","10f4d609":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred6)))","2bc361d6":"Treecls = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred6.flatten()})\nTreecls","d13e59bb":"a=Treecls.Actual\nb=Treecls.Predicted\nplt.plot(a, b, color='peru', linewidth=1)\nplt.show()\n","fc0d9581":"#plot tree\nfig = plt.figure(figsize=(25,26))\n_ = tree.plot_tree(clf)\n","f85ba54b":"##Results\n\nKNNmod","c8ed50ff":"df4.columns","8be2a3ca":"ids=df4[['id']]\nids","31c859c7":"df4.id.nunique()","d773751c":"y_pred3.size","0ecce933":"# Predicted class\ny_predALL=neigh.predict(X1)","8722c5e6":"y_predALL","22538610":"y_predALL.size","732b190e":"sub = pd.DataFrame()\nsub['Price_Range_Predicted'] = y_predALL","38211b7b":"final=pd.concat([ids, sub], axis=1)\nfinal","3278e438":"#nulls\nfinal.isnull().sum().sum()\n","6319fc23":"final=final.dropna()\nfinal","0ec45c49":"\n\n\n#join two dataframes\n#answerSubm = pd.concat([ids, sub], axis=1)\n#rename 0 to target\n\n#answerSubm=answerSubm.rename(columns={0: \"target\"})\n\n#answerSubm","5907255b":"The above linear regression model is not ideal.   \nChanges to test size and random state did not impact the results.","5fecba97":"### Models and predictions\n-**Price** is the desired prediction.","62687647":"The above model did not work with the original price parameters. The changing number of neighbors, test size or random state make insignificant improvement to the **RMSE**.   \nThe model improve significantly after grouping prices.","09e713f1":"The above KNN regresion is not optimal to predict price or price range.   \nChanging parameters did not improve performance.","27620ad9":"3- KNN","00e65c9d":"Grouping prices into economic, low-mid, high-mid, and high to improve the model.","70af23a0":"**Task:**   \nPredict the price of U.S. AirBnB rentals.     \nEvaluate the solution with reproduceable low root-mean-squared error (RMSE) based on cross-validation.   \n\n**Data:**   \nAs of October 2020, the dataset has 226030 rows and 17 columns of Airbnb listings in the U.S.   \nThe dataset includes NaNs, and data is of mixed types.   \n\nThe average price is about $219.72.   \nMinimum night averages between 4 and 5.  \nThere are 4 categories of room type: Entire home\/apt, Private room, Shared room, and Hotel room. \n\nThere is minimal correlation between price and other columns in the dataset.   \n\nAdded a column (state). Grouped prices into ranges to improve model performance.   \n\n**Models:**   \nLinear and multple linear regressions did not perform well for this datase.   \nKNN regression performed better and so did decision tree.   \nKNN classifier performed best.   \n\n\n\n\n\n","714c9e8f":"2- Multiple Reression","c8a55bd0":"Expected Submission   \nUsers should submit a CSV file with each listing from the data set and the model-predicted price:   \n\nid, price   \n49091, 83   \n50646, 81   \n56334, 69   \n...   \n","40314227":"Added a new colunm: State","8d57b8dd":"4- Decision Tree","1e957617":"1. Linear Regression"}}