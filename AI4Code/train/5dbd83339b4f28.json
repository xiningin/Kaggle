{"cell_type":{"25b90ef5":"code","85746c92":"code","b79cd98c":"code","8f13ed33":"code","0f6434a8":"code","5cdde4a6":"code","f54e46b7":"code","1ad1ef09":"code","f3d14e4a":"code","f80df01a":"code","2b2fda5a":"code","967acefb":"code","c37f139b":"code","d18c884b":"code","f40cd5b4":"code","57e450c5":"code","49675185":"code","89103d19":"code","2cc24f4e":"code","2e65d840":"code","66977e4b":"code","8057da02":"code","a59036e9":"code","ec64ab99":"code","4669a062":"code","4f176bbd":"code","cbe7e572":"code","28712b9e":"code","ab07de3e":"code","b9fb7795":"code","7406af4c":"code","a8e2d337":"code","b8e3a874":"code","d20b7d7a":"code","ab5414a2":"code","0656287e":"code","f231b9a7":"code","2f59419c":"code","8779ff1f":"markdown"},"source":{"25b90ef5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85746c92":"path=\"\/\/kaggle\/\/input\/\/Data.csv\"","b79cd98c":"# First Original Data\ndf=pd.read_csv(path)","8f13ed33":"df.head()","0f6434a8":"df=df.drop(columns=[\"order_id\",\"line_item_type_id\"])","5cdde4a6":"df.head()","f54e46b7":"df.info()","1ad1ef09":"df[\"site_id\"].unique()","f3d14e4a":"site351=df[df[\"site_id\"]==351]\ndf=df.dropna()","f80df01a":"#site351.plot.bar(x=\"geo_id\",y=\"ad_type_id\")","2b2fda5a":"site351.head()","967acefb":"second=site351[:100]","c37f139b":"second.plot.bar(x=\"ad_type_id\",y=\"geo_id\")","d18c884b":"df[:1000].plot.bar(x=\"monetization_channel_id\",y=\"geo_id\")","f40cd5b4":"df[\"monetization_channel_id\"].unique()","57e450c5":"temp1=[]\ntemp2=[]\nfor each in df[\"monetization_channel_id\"].unique():\n    val=df[df[\"monetization_channel_id\"]==each].count()\n    temp1.append(each)\n    temp2.append(val[0])\n    print(each,val[0])\nplt.bar(temp1,temp2)\nplt.show()","49675185":"# 19> 4> 1> 2==21","89103d19":"df[:1000].plot.line(x=\"monetization_channel_id\",y=\"total_impressions\",rot=0)","2cc24f4e":"# Most Impressions through Monetization ID 19","2e65d840":"df[:1000].plot.line(x=\"monetization_channel_id\",y=\"total_revenue\",rot=0)","66977e4b":"# More revenue from 19 > 4","8057da02":"df[:1000].plot.line(x=\"total_impressions\",y=\"total_revenue\",rot=0)","a59036e9":"df[\"total_impressions\"].corr(df[\"total_revenue\"])","ec64ab99":"df.corr()","4669a062":"((df[\"total_revenue\"]\/df[\"total_impressions\"])*1000).unique()[:100]","4f176bbd":"pd.get_dummies(df[\"site_id\"],prefix=\"siteid\")","cbe7e572":"pd.get_dummies(df[\"os_id\"],prefix=\"os\")","28712b9e":"pd.get_dummies(df[\"ad_type_id\"],prefix=\"adid\")","ab07de3e":"#Here I'm trying to figure out the correlations between different Columns\ncl=\"total_impressions\"\ndf[\"ad_type_id\"].corr(df[cl]) #Neg\ndf[\"site_id\"].corr(df[cl]) #0.01\ndf[\"geo_id\"].corr(df[cl]) #0.12\ndf[\"device_category_id\"].corr(df[cl]) #Neg\ndf[\"advertiser_id\"].corr(df[cl]) #0.0\ndf[\"os_id\"].corr(df[cl])  #0.0\ndf[\"integration_type_id\"].corr(df[cl]) #Nan\ndf[\"monetization_channel_id\"].corr(df[cl]) #0.0\ndf[\"ad_unit_id\"].corr(df[cl]) #Neg\ndf[\"total_revenue\"].corr(df[cl]) #7.38\ndf[\"revenue_share_percent\"].corr(df[cl]) #Nan","b9fb7795":"#Here I'm trying to figure out the correlations between different Columns\ncl=\"total_revenue\"\n# df[\"ad_type_id\"].corr(df[cl]) #Neg\n# df[\"site_id\"].corr(df[cl]) #Neg\n# df[\"geo_id\"].corr(df[cl]) #0.12\n# df[\"device_category_id\"].corr(df[cl]) #Neg\n# df[\"advertiser_id\"].corr(df[cl]) #Neg\n# df[\"os_id\"].corr(df[cl])  #0.0\n# df[\"integration_type_id\"].corr(df[cl]) #Nan\n# df[\"monetization_channel_id\"].corr(df[cl]) #0.0\n# df[\"ad_unit_id\"].corr(df[cl]) #Neg\n# df[\"total_impressions\"].corr(df[cl]) #7.38\n# df[\"revenue_share_percent\"].corr(df[cl]) #Nan","7406af4c":"df[(df[\"revenue_share_percent\"]==1)].nunique()","a8e2d337":"df[df[\"total_impressions\"]==14452.0]","b8e3a874":"data=df.nlargest(10000,[\"total_impressions\"])[\"site_id\"]\ndata=list(data)\nans={}\nfor each in data:\n    ans.update({each:data.count(each)})\nans","d20b7d7a":"df.nlargest(20,[\"total_revenue\"])[[\"site_id\",\"total_revenue\",\"total_impressions\",\"ad_type_id\"]]\n","ab5414a2":"\"\"\"\nHere I'm plotting all the relational Values between total_revenue to inference what drive more revenue\n\"\"\"\n\ndef plotter(one,two,c):\n    first1=[]\n    second1=[]\n    for each in df[one].unique():\n        first1.append(each)\n        temp=df[df[one]==each][two].sum()\n        second1.append(temp)\n    #     print(each,temp)\n    print(\"Relation between {} and {}\".format(one,two))\n    plt.bar(first1,second1,color=c,align=\"center\")\n    # ax.autoscale(tight=True)\n    plt.show()\n#Relations between the Site_id and Total_impressions\nplotter(\"site_id\",\"total_impressions\",\"b\")\n#Relations between the Site_id and Total_revenue\n\nplotter(\"site_id\",\"total_revenue\",\"g\")\n\nplotter(\"geo_id\",\"total_revenue\",\"y\")\nplotter(\"device_category_id\",\"total_revenue\",\"y\")\nplotter(\"advertiser_id\",\"total_revenue\",\"g\")\n\n# plotter(\"advertiser_id\",\"total_revenue\",\"y\")\n","0656287e":"plotter(\"os_id\",\"total_revenue\",\"b\")\nplotter(\"ad_type_id\",\"total_revenue\",\"b\")","f231b9a7":"first=df[df[\"ad_type_id\"]==10]\nsecond=first[first[\"site_id\"]==349]\nsecond.describe()","2f59419c":"df[\"ad_type_id\"].unique()","8779ff1f":"# INFERENCE\n## I figured out on which websites, pricings can be putted more than the other.\n## So Here's list of sites which can have higgest revenue base\n### 1) Site like 349 (Site_id)\n### 2) Geo Id 180\n### 3) Device Category Id 1\n### 4) Ad Type ID 10\n### 5) Os ID 55\n\n## The reason why I came up with these numbers is that -> \n## I tried correlating different matrices but then these numbers were the one which have the highest revenue outcome.\n## So If the user have a website with these conditions. They can expect to put a higher biding base than other website.\n## Below is my complete approach for this project.\n### As No Previous data related to pricing was given, I couldn't tell the pricing exactly.\n### But if it was given. Then my approach would be to use basic regression with different columns and figuring the best relation.\n"}}