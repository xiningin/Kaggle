{"cell_type":{"eb83f541":"code","12d0e9a5":"code","dec94353":"code","989a2695":"code","987670fa":"code","cf31adf5":"code","f4a16690":"code","4d32169f":"code","4ca656cb":"code","f64945c0":"code","4dadab02":"code","bcae057d":"code","2a35d5ab":"code","16c471ef":"code","4c90495f":"markdown","5b498d7d":"markdown","ced4db35":"markdown","2191cc3b":"markdown","c12ca451":"markdown","e42185f5":"markdown","41132a35":"markdown","118f4390":"markdown"},"source":{"eb83f541":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","12d0e9a5":"%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline","dec94353":"from fastai.imports import *\nfrom fastai.structured import *\n\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\nimport datetime\nfrom sklearn import metrics","989a2695":"PATH = \"..\/input\"\ndf_raw = pd.read_csv(f'{PATH}\/train.csv', low_memory=False, \n                     parse_dates=[\"Open Date\"])","987670fa":"df_test = pd.read_csv(f'{PATH}\/test.csv', low_memory=False, \n                     parse_dates=[\"Open Date\"])","cf31adf5":"train_cats(df_raw)","f4a16690":"df_raw.Type.cat.categories","4d32169f":"df_test.groupby(['Type'])['Type'].count()","4ca656cb":"arrId_MB = df_test[df_test['Type'].str.contains('MB')].Id","f64945c0":"df_test_copia = df_test.copy()","4dadab02":"apply_cats(df_test,df_raw)","bcae057d":"df_test.Type.cat.categories","2a35d5ab":"df_test.groupby(['Type'])['Type'].count()","16c471ef":"df_test[df_test.Id.isin(arrId_MB)].head()","4c90495f":"Una de las operaciones que se realizan con las features de los dataset que son String es categorizarlos, es decir, convertirlos en categor\u00edas y posteriormente asignarle un valor num\u00e9rico. Esta operaci\u00f3n se realiza mediante la funci\u00f3n fastai denominada **train_cats**. El dataset Test se ha de realizar la misma operaci\u00f3n y respetar la misma codificaci\u00f3n que se ha aplicado en el TrainSeet; para ello se hace uso de la funci\u00f3n **apply_cats**.","5b498d7d":"Sacamos las filas que ten\u00edan como valor MB para ver que dato tienen tras aplicar cats.","ced4db35":"Vemos que en el DataSet TEST tenemos el valor MB (290 registros) que no tenemos categorizado en df_raw (TRAIN). \nVamos a ver cuando realicemos el apply_cats que valor se le estar\u00eda asignando a estos registros.","2191cc3b":"Vemos que la categor\u00eda MB **no** aparece. Pedimos los contadores por cada valor y vemos que tampoco aparece.","c12ca451":"Pero, que pasa si en el DataSet de Traing para un feature tenemos 3 valores de una cateogr\u00eda (Alto, Medio, Bajo) y en el DataSet Test aparece un cuarto valor,** \u00bfqu\u00e9 c\u00f3digo de categor\u00eda se le asigna?**","e42185f5":"Vemos que le coloca un **NaN** (not a number como valor a la feature). **\u00bfC\u00f3mo afectar\u00eda esto al comportamiento del RandomForest?**","41132a35":"Vemos que categor\u00edas tiene la columna Type tras aplicar cats.","118f4390":"Nos quedamos con los IDs de las filas que tienen Type='MB'; la idea es ver que valores de categor\u00eda se le asignan a estos registros"}}