{"cell_type":{"3d2bc224":"code","bf32fc43":"code","3ca0398d":"code","610dc5b9":"code","3fc9c53b":"code","6bd168bc":"code","fa5bf8c0":"code","2d8f4b96":"code","31f595b5":"code","9c4e5587":"code","6c5ea442":"code","d9fb2a1c":"code","67db8af0":"code","ebd3e606":"code","feb108e8":"code","51f76fa5":"code","ebde61eb":"code","89b513f2":"code","25eff1e2":"code","0550dd68":"code","7473e61d":"code","8001385f":"code","29e1c40f":"code","2b8c8981":"code","7d9b2a59":"code","b87da659":"code","94f9e0be":"code","65dd770e":"code","887c0627":"code","afed189c":"code","e27b048c":"code","424de854":"code","76dcd767":"code","184e97e8":"code","3ea4aa6e":"code","cf887d16":"code","de6a3b68":"code","44b14fb4":"code","abde43a1":"markdown","295d1270":"markdown","af610583":"markdown","8d2b66ef":"markdown","14998f56":"markdown","54adc1ca":"markdown","e57fea12":"markdown"},"source":{"3d2bc224":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf32fc43":"import matplotlib.pyplot as plt\n","3ca0398d":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","610dc5b9":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","3fc9c53b":"football","6bd168bc":"edu = pd.read_csv('\/kaggle\/input\/ense32020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\n","fa5bf8c0":"edu","2d8f4b96":"edu.head(10)","31f595b5":"edu.tail()","9c4e5587":"edu.describe()","6c5ea442":"edu['Value']","d9fb2a1c":"edu['GEO']","67db8af0":"edu[10:14]","ebd3e606":"edu.iloc[90:94][['TIME','GEO']]","feb108e8":"edu[edu['Value'] > 6.5].tail()","51f76fa5":"(edu['Value']>6.5).tail()","ebde61eb":"edu[edu[\"Value\"].isnull()].head()","89b513f2":"edu.max(axis = 0)","25eff1e2":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","0550dd68":"s = edu[\"Value\"]\/100\ns.head()","7473e61d":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","8001385f":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","29e1c40f":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","2b8c8981":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","7d9b2a59":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","b87da659":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","94f9e0be":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","65dd770e":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","887c0627":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","afed189c":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","e27b048c":"edu.sort_index(axis = 0, ascending = False, inplace = True)\nedu.head()","424de854":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","76dcd767":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()\n","184e97e8":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","3ea4aa6e":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","cf887d16":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = True, method = 'dense').sort_values().head()","de6a3b68":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","44b14fb4":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","abde43a1":"# Question 4\n\n* Which measures does the result show? \n\ncount : nombre de valeur dans la colonne\n\nmean : moyenne\n\nstd : \u00e9cart type\n\nmin : valeur minimale\n\n25% : premier quartile\n\n50% : m\u00e9diane \n\n75% : troisieme quartile\n\nmax : valeur maximale\n****\n\n* It seems that it shows some default values, can you guess which ones?\n\n\n","295d1270":"# Question 7\n\n* What do you observe regarding the parameter ascending=False?\n\nascending=False correspond \u00e0 l'ordre d\u00e9croissant.","af610583":"# Question 5\n\n* What does this index return? \n\nIl retourne les colonne 'Time' et 4geo' pour les lignes comprises entre 90 et 94.\n\n* What does the first index represent? \n\nIl repr\u00e9sente la plage des lignes.\n\n* And the second one?\n\nIl represente les colonnes que l'on veut afficher","8d2b66ef":"# Question 3\n* What does the method tail()return?\n\nIt returns the 5th last rows.","14998f56":"# Question 1\n\n* Which is the size of the edu DataFrame (rows x columns)?\n\n384 rows \u00d7 3 columns","54adc1ca":"# Question 6\n\n* What does the operation edu['Value'] > 6.5 produce? \n\nCela renvoie un tableau de 384 lignes de bool\u00e9ens, indiquant si pour la ligne N la valeur de 'Value' est sup\u00e9rieur \u00e0 6.5.\n\n* And if we apply the index edu[edu[\u2019Value\u2019] > 6.5]?\n\n\nCela retourne un tableau contenant toutes les lignes dont la valeur de 'Value' est sup\u00e9rieur \u00e0 6.5.\n\n* Is this a Series or a DataFrame?\n\nedu[\u2019Value\u2019] > 6.5  est une s\u00e9rie\n\nedu[edu[\u2019Value\u2019] > 6.5] est un DataFrame","e57fea12":"# Question 2\n\n* What happens if we give a number as argument to the method head()?\n\nedu.head(N) returns the N first rows."}}