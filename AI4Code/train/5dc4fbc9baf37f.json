{"cell_type":{"0c54a635":"code","05efcdc6":"code","385cb811":"code","f9d8de36":"code","59cc9e67":"code","e4d8bef5":"code","25319e4b":"code","5169d0b1":"code","bba91be3":"code","8c2665b6":"code","309ee36c":"code","8877937d":"code","af81a965":"code","38b714c8":"code","91b24dc0":"code","6c94a75a":"code","3b9a4100":"code","817ae299":"code","6d9b31e4":"code","7cdefba2":"code","7d245d72":"code","64dc5a44":"code","8e023118":"code","50eab9fe":"code","56fa4b0f":"code","329b55ac":"markdown","69baa61f":"markdown","bc039039":"markdown","8157e41d":"markdown","98a9d8a1":"markdown","f7931f45":"markdown","1efe72be":"markdown","fe8ad96e":"markdown","e97ed5c5":"markdown","55f02e2d":"markdown","8b8440c6":"markdown","6adf3e02":"markdown","ef148620":"markdown"},"source":{"0c54a635":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05efcdc6":"train = pd.read_csv('..\/input\/titanic\/train.csv')","385cb811":"train.corr()","f9d8de36":" train.describe ","59cc9e67":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'SibSp', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Sibsp\")","e4d8bef5":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Parch', hue = 'Survived', data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Parch\")","25319e4b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Embarked', hue = 'Survived', data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Embarked\")","5169d0b1":"sns.distplot(train[train['Survived'] == 0].Fare, kde=False,rug=False)\nsns.distplot(train[train['Survived'] == 1].Fare,  kde=False,rug=False)","bba91be3":"train.isnull().sum()","8c2665b6":"train.Age.median()","309ee36c":"train.drop(['PassengerId','Name','Cabin','Ticket', ], axis=1, inplace=True)\ntrain[\"Age\"].fillna(train[\"Age\"].median(skipna=True), inplace=True)\ntrain[\"Embarked\"].fillna(train['Embarked'].value_counts().idxmax(), inplace=True)","8877937d":"train['Alone']=np.where((train[\"SibSp\"]+train[\"Parch\"])>0, 0, 1)\ntrain.drop(['SibSp', 'Parch'], axis=1, inplace=True)","af81a965":"train[['Pclass','Embarked','Sex']]","38b714c8":"pd.get_dummies(train['Sex'])","91b24dc0":"training = pd.get_dummies(train, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntraining","6c94a75a":"training.dtypes","3b9a4100":"from sklearn.preprocessing import StandardScaler\ntrain_standard = StandardScaler()\ntrain_copied = training.copy()\ntrain_standard.fit(train_copied[['Age','Fare']])\ntrain_std = pd.DataFrame(train_standard.transform(train_copied[['Age','Fare']]))\ntrain_std","817ae299":"training[['Age','Fare'] ] = train_std\ntraining","6d9b31e4":"from sklearn.linear_model import LogisticRegression\ncols = [\"Age\",\"Fare\",\"Alone\",\"Pclass_2\",\"Pclass_2\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"] \nX = training[cols]\ny = training['Survived']\n# Build a logreg and compute the feature importances\nmodel = LogisticRegression()\n# create the RFE model and select 8 attributes\nmodel.fit(X,y)","7cdefba2":"from sklearn.metrics import accuracy_score\ntrain_predicted = model.predict(X)\naccuracy_score(train_predicted, y)","7d245d72":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.isnull().sum()","64dc5a44":"test.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntest[\"Age\"].fillna(28, inplace=True)\ntest[\"Embarked\"].fillna(test['Embarked'].value_counts().idxmax(), inplace=True)\ntest[\"Fare\"].fillna(train.Fare.median(), inplace=True)\ntest['Alone']=np.where((test[\"SibSp\"]+test[\"Parch\"])>0, 0, 1)\ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntesting=pd.get_dummies(test, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\nprint(testing.dtypes)\ntest_copied = testing.copy()\ntest_std = train_standard.transform(test_copied[['Age','Fare']])\ntest_std\ntesting[['Age','Fare']] = test_std\ntesting","8e023118":"cols = [\"Age\",\"Fare\",\"Alone\",\"Pclass_2\",\"Pclass_2\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"] \nX_test=testing[cols]\nprint(X_test.dtypes)\ntest_predicted = model.predict(X_test)","50eab9fe":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","56fa4b0f":"sub['Survived'] = list(map(int, test_predicted))\nsub.to_csv('submission.csv', index=False)","329b55ac":"## \u63d0\u51fa\u306e\u6e96\u5099","69baa61f":"## Fare\u3068\u306e\u95a2\u4fc2\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u78ba\u8a8d","bc039039":"## Age\u3068Fare\u306e\u6a19\u6e96\u5316","8157e41d":"## \u6b20\u640d\u5024\u306e\u51e6\u7406","98a9d8a1":"## \u540c\u69d8\u306bEmbarked\u306b\u3064\u3044\u3066\u3082\u30b0\u30e9\u30d5\u3092\u4f5c\u308b","f7931f45":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c","1efe72be":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","fe8ad96e":"## SibSp\u3068\u751f\u5b58\u306e\u95a2\u4fc2","e97ed5c5":"## \u65b0\u3057\u3044\u7279\u5fb4\u91cf\u306e\u4f5c\u6210","55f02e2d":"## \u7279\u5fb4\u91cf\u306e\u78ba\u8a8d","8b8440c6":"## \u30c0\u30df\u30fc\u5909\u6570\u306e\u4f5c\u6210","6adf3e02":"## \u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u30b9\u56de\u5e30","ef148620":"## \u540c\u69d8\u306bParch\u306b\u3064\u3044\u3066\u3082\u30b0\u30e9\u30d5\u3092\u4f5c\u308b"}}