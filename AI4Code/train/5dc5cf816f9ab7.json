{"cell_type":{"5d0e15f1":"code","f804a6ee":"code","d122907d":"code","26c67ef9":"code","8ea2ab47":"code","016b220b":"code","28d26bd4":"code","24db9bd7":"code","0e5cdb34":"code","4180b22f":"code","8ac7af79":"code","48b256c0":"code","06a26131":"code","ee9f4b9b":"code","f305f9dc":"code","e3f92423":"code","2d1a8fe7":"code","489f827f":"code","61fc4685":"code","fc15cffb":"code","4409f3ab":"code","bfedb381":"code","6d55e886":"code","1b043f54":"code","795e998d":"code","5fb58343":"code","d7c59573":"code","4b73f4ee":"code","e5b09214":"code","ac7eca90":"code","c2bb4fc7":"code","8c0011cf":"code","b447be65":"code","414e23a0":"code","80a66291":"code","61c76c04":"code","0429a20e":"code","41d4372c":"code","d17dc2b1":"code","9829ddb6":"code","691cdafa":"code","35d120b4":"code","84de217b":"code","7b684a26":"code","3ae0b16a":"code","37aca268":"code","aff44fed":"code","c93b14da":"code","03a4c02d":"code","2b846a8e":"code","983d9755":"code","1d983046":"code","834b7bb5":"code","c426afc1":"code","21e330f2":"code","a615fe5a":"code","69f51fed":"code","3cfced80":"code","bd8285cf":"code","0fa60be7":"code","c0788067":"code","738d4382":"code","841957c4":"code","df71670e":"code","8e6e0cd7":"code","76d29381":"code","72c87637":"code","043486ba":"code","0b84ddf4":"code","efd89f06":"code","1fc4253d":"code","73c9205e":"code","66f8361b":"code","f588e696":"code","36606f91":"code","965c5196":"code","dd0307ee":"code","586a17b2":"code","eaacd0c4":"code","a1acede8":"code","54de7b6f":"code","f493c6a0":"code","871dac74":"code","8f4e9645":"code","f3c8e7b4":"code","2a50fdbd":"code","91644ae6":"code","0824c35c":"code","c97aaae2":"code","566c3468":"code","eaa996d2":"code","d3cbd202":"code","3584e562":"code","d666e519":"code","ae422a68":"code","96439c1a":"code","50efa83a":"code","e07d426f":"code","584b19f7":"code","00ba67cd":"code","3dda7f2c":"code","5a8ba6e5":"code","7c9b31ec":"code","b22674be":"code","b4e60550":"code","c0fdbd21":"code","c4cd8d29":"markdown"},"source":{"5d0e15f1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","f804a6ee":"data1=pd.read_csv('churn_data.csv')\ndata2=pd.read_csv('customer_data.csv')\ndata3=pd.read_csv('internet_data.csv')","d122907d":"data=pd.merge(data1,data2, on = \"customerID\", how = \"inner\") \ndata.head(2)","26c67ef9":"data=pd.merge(data,data3, on = \"customerID\", how = \"inner\") \ndata.head(2)","8ea2ab47":"data.columns","016b220b":"data.shape","28d26bd4":"data.describe()","24db9bd7":"data.info()","0e5cdb34":"data.head(2)","4180b22f":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ncols = ['PhoneService', 'PaperlessBilling', 'Churn','Partner','Dependents']\ndata[cols]= data[cols].apply(labelencoder.fit_transform)\ndata.head(1)","8ac7af79":"data['gender'] = pd.get_dummies(data['gender'], drop_first=True)\ndata.head(2)","48b256c0":"data = pd.get_dummies(data,columns=['Contract', 'PaymentMethod', 'InternetService'], drop_first=True)\ndata.head(2)\ndata.shape","06a26131":"ml = pd.get_dummies(data['MultipleLines'], prefix='MultipleLines')\nml1 = ml.drop(['MultipleLines_No phone service'], 1)\ndata = pd.concat([data,ml1], axis=1)\nos = pd.get_dummies(data['OnlineSecurity'], prefix='OnlineSecurity')\nos1 = os.drop(['OnlineSecurity_No internet service'], 1)\ndata = pd.concat([data,os1], axis=1)\nob = pd.get_dummies(data['OnlineBackup'], prefix='OnlineBackup')\nob1 = ob.drop(['OnlineBackup_No internet service'], 1)\ndata = pd.concat([data,ob1], axis=1)\ndp = pd.get_dummies(data['DeviceProtection'], prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'], 1)\ndata = pd.concat([data,dp1], axis=1)\nts = pd.get_dummies(data['TechSupport'], prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'], 1)\ndata = pd.concat([data,ts1], axis=1)\nst =pd.get_dummies(data['StreamingTV'], prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'], 1)\ndata = pd.concat([data,st1], axis=1)\nssm = pd.get_dummies(data['StreamingMovies'], prefix='StreamingMovies')\nssm1 = ssm.drop(['StreamingMovies_No internet service'], 1)\ndata = pd.concat([data,ssm1], axis=1)","ee9f4b9b":"data = pd.get_dummies(data,columns=['MultipleLines', 'OnlineSecurity','OnlineBackup','DeviceProtection',\n                                   'TechSupport','StreamingTV','StreamingMovies'], drop_first=True)\ndata.head(2)\ndata.shape","f305f9dc":"data.isnull().sum()","e3f92423":"data.shape","2d1a8fe7":"data = data.drop(['Contract','PaymentMethod','gender','MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies'], 1)\n","489f827f":"data['TotalCharges'] = pd.to_numeric(data[\"TotalCharges\"].replace(\" \",\"\"),downcast=\"float\")","61fc4685":"data.info()","fc15cffb":"data.head(1)","4409f3ab":"data.dtypes","bfedb381":"plt.figure(figsize=(15,3))\nplt.subplot(1,3,1)\nsns.boxplot(data[[\"tenure\"]])\nplt.title(\"Tenure\",size=15)\n\nplt.subplot(1,3,2)\nsns.boxplot(data[[\"MonthlyCharges\"]])\nplt.title(\"MonthlyCharges\",size=15)\n\nplt.subplot(1,3,3)\nsns.boxplot(data[[\"TotalCharges\"]])\nplt.title(\"TotalCharges\",size=15)","6d55e886":"data.isnull().sum()","1b043f54":"data = data[~np.isnan(data['TotalCharges'])]","795e998d":"data.isnull().sum()","5fb58343":"data.corr()","d7c59573":"plt.figure(figsize = (20,10))\nsns.heatmap(round(data.corr(),1),annot = True)\nplt.show()","4b73f4ee":"x = data.drop(['Churn','customerID'], axis=1)\ny=data['Churn']","e5b09214":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)\nprint('x_train:',x_train.shape)\nprint('x_test:',x_test.shape)\nprint('y_train:',y_train.shape)\nprint('y_test:',y_test.shape)","ac7eca90":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(x_train[['tenure','MonthlyCharges','TotalCharges']])\nx_train[['tenure','MonthlyCharges','TotalCharges']] = sc.transform(x_train[['tenure','MonthlyCharges','TotalCharges']])\nx_train.head()","c2bb4fc7":"p = (sum(y_train)\/len(y_train))\nprint(f\"p: {p}\")\n\nk = x_train.shape[1]\nprint(f\"k: {k}\")\n\nN = 10 * k \/ p\nprint(f\"N: {int(N)}\")","8c0011cf":"import statsmodels.api as sm\nlogmodel = sm.GLM(y_train,(sm.add_constant(x_train)), family = sm.families.Binomial())\nlogmodel.fit().summary()","b447be65":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\nlogreg = LogisticRegression()\nrfe = RFE(logreg, 15)\nrfe = rfe.fit(x_train, y_train)","414e23a0":"col = x_train.columns[rfe.support_]\ncol","80a66291":"x_train_sm = sm.add_constant(x_train[col])\nlogm2 = sm.GLM(y_train,x_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","61c76c04":"y_pred = res.predict(x_train_sm)\ny_pred[:10]","0429a20e":"y_pred = y_pred.values.reshape(-1)","41d4372c":"y_pred_final = pd.DataFrame({'Churn':y_train.values, 'Churn_Prob':y_pred})\ny_pred_final['CustID'] = y_train.index\ny_pred_final.head()","d17dc2b1":"y_pred_final['predicted'] = y_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_pred_final.head()","9829ddb6":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy (Training Set): \",round(accuracy_score(y_pred_final.Churn, y_pred_final.predicted),4))","691cdafa":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_pred_final.Churn, y_pred_final.predicted))","35d120b4":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = pd.DataFrame()\nvif['Features'] = x_train[col].columns\nvif['VIF'] = [variance_inflation_factor(x_train[col].values, i) for i in range(x_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","84de217b":"col = col.drop('MonthlyCharges',1)\ncol","7b684a26":"vif = pd.DataFrame()\nvif['Features'] = x_train[col].columns\nvif['VIF'] = [variance_inflation_factor(x_train[col].values, i) for i in range(x_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3ae0b16a":"# Let's re-run the model using the selected variables\nx_train_sm = sm.add_constant(x_train[col])\nlogm3 = sm.GLM(y_train,x_train_sm, family = sm.families.Binomial())\nres = logm3.fit()\nres.summary()","37aca268":"y_train_pred = res.predict(x_train_sm).values.reshape(-1)\ny_pred_final['Churn_Prob'] = y_train_pred\ny_pred[:10] ","aff44fed":"y_pred_final['predicted'] = y_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_pred_final.head()","c93b14da":"print(\"Accuracy: \",round(accuracy_score(y_pred_final.Churn, y_pred_final.predicted),4))","03a4c02d":"vif = pd.DataFrame()\nvif['Features'] = x_train[col].columns\nvif['VIF'] = [variance_inflation_factor(x_train[col].values, i) for i in range(x_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","2b846a8e":"col = col.drop('MultipleLines_Yes',1)\ncol","983d9755":"x_train_sm = sm.add_constant(x_train[col])\nlogm4 = sm.GLM(y_train,x_train_sm, family = sm.families.Binomial())\nres = logm4.fit()\nres.summary()","1d983046":"y_pred = res.predict(x_train_sm).values.reshape(-1)\ny_pred_final['Churn_Prob'] = y_train_pred\ny_pred[:10]","834b7bb5":"y_pred_final['predicted'] = y_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_pred_final.head()","c426afc1":"print(\"Accuracy (Training Set): \",round(accuracy_score(y_pred_final.Churn, y_pred_final.predicted),4))","21e330f2":"vif = pd.DataFrame()\nvif['Features'] = x_train[col].columns\nvif['VIF'] = [variance_inflation_factor(x_train[col].values, i) for i in range(x_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","a615fe5a":"col = col.drop('TotalCharges')\ncol","69f51fed":"x_train_sm = sm.add_constant(x_train[col])\nlogm5 = sm.GLM(y_train,x_train_sm, family = sm.families.Binomial())\nres = logm5.fit()\nres.summary()","3cfced80":"y_pred = res.predict(x_train_sm).values.reshape(-1)\ny_pred_final['Churn_Prob'] = y_pred\ny_pred[:10]","bd8285cf":"y_pred_final['predicted'] = y_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_pred_final.head()","0fa60be7":"print(\"Accuracy (Training Set): \",round(accuracy_score(y_pred_final.Churn, y_pred_final.predicted),4))","c0788067":"vif = pd.DataFrame()\nvif['Features'] = x_train[col].columns\nvif['VIF'] = [variance_inflation_factor(x_train[col].values, i) for i in range(x_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","738d4382":"confusion = confusion_matrix(y_pred_final.Churn, y_pred_final.predicted )\nconfusion","841957c4":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","df71670e":"#Accuracy of the final model\naccuracy = (TN + TP)\/float(TN+FN+TP+FP)\nprint(\"Accuracy of the model: \",round(accuracy,3))\n\n# Sensitivity of the final model\nsensitivity = TP \/ float(TP+FN)\nprint(\"Sensitivity of the model: \",round(sensitivity,3))\n\n# Specificity of the final model\nspecificity = TN \/ float(TN+FP)\nprint(\"Specificity of the model: \",round(specificity,3))","8e6e0cd7":"numbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_pred_final[i]= y_pred_final.Churn_Prob.map(lambda x: 1 if x > i else 0)\ny_pred_final.head()","76d29381":"cutoff_df = pd.DataFrame( columns = ['Probability','Accuracy','Sensitivity','Specificity'])\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = confusion_matrix(y_pred_final.Churn, y_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","72c87637":"cutoff_df.plot.line(x='Probability', y=['Accuracy','Sensitivity','Specificity'])\nplt.xlabel(\"Thresh-hold\")\nplt.ylabel(\"Scores\")\nplt.title(\"Sensitivity and Specificity Trade-off\",size=15)\nplt.show()","043486ba":"y_pred_final['final_predicted'] = y_pred_final.Churn_Prob.map( lambda x: 1 if x > 0.3 else 0)\ny_pred_final.head()","0b84ddf4":"confusion2 = confusion_matrix(y_pred_final.Churn, y_pred_final.final_predicted )\nconfusion2","efd89f06":"TP = confusion2[1,1] \nTN = confusion2[0,0]\nFP = confusion2[0,1]\nFN = confusion2[1,0]","1fc4253d":"#Accuracy of the final model\naccuracy = (TN + TP)\/float(TN+FN+TP+FP)\nprint(\"Accuracy of the model: \",round(accuracy,3))\n\n# Sensitivity of the final model\nsensitivity = TP \/ float(TP+FN)\nprint(\"Sensitivity of the model: \",round(sensitivity,3))\n\n# Specificity of the final model\nspecificity = TN \/ float(TN+FP)\nprint(\"Specificity of the model: \",round(specificity,3))","73c9205e":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    \n    return None","66f8361b":"from sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve( y_pred_final.Churn, y_pred_final.Churn_Prob, drop_intermediate = False )\ndraw_roc(y_pred_final.Churn, y_pred_final.Churn_Prob)","f588e696":"# Precision of the final model\nprecision = TP \/ float(TP+FP)\nprint(\"Precision of the model: \",round(precision,3))\n\n# Recall of the final model\nrecall = TP \/ float(TP+FN)\nprint(\"Recall of the model: \",round(recall,3))","36606f91":"from sklearn.metrics import precision_recall_curve\np, r, thresholds = precision_recall_curve(y_pred_final.Churn, y_pred_final.Churn_Prob)","965c5196":"plt.plot(thresholds, p[:-1], \"g-\",label=\"Precision\")\nplt.plot(thresholds, r[:-1], \"r-\",label=\"Recall\")\nplt.xlabel(\"Thresh-hold\")\nplt.ylabel(\"Scores\")\nplt.title(\"Precision and Recall Trade-off\",size=15)\nplt.legend()\nplt.show()","dd0307ee":"x_test[['tenure','MonthlyCharges','TotalCharges']] = sc.transform(x_test[['tenure','MonthlyCharges','TotalCharges']])","586a17b2":"x_test = x_test[col]\nx_test.head()","eaacd0c4":"x_test_sm = sm.add_constant(x_test)\ny_test_pred = res.predict(x_test_sm)","a1acede8":"y_test_pred[:10]","54de7b6f":"y_pred_1 = pd.DataFrame(y_test_pred)\ny_pred_1.head()","f493c6a0":"y_test_df = pd.DataFrame(y_test)","871dac74":"y_test_df['CustID'] = y_test_df.index","8f4e9645":"y_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)","f3c8e7b4":"y_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)\ny_pred_final.head()","2a50fdbd":"y_pred_final= y_pred_final.rename(columns={ 0 : 'Churn_Prob'})\ny_pred_final.head()","91644ae6":"y_pred_final['final_predicted'] = y_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.3 else 0)\ny_pred_final.head()","0824c35c":"confusion2 = confusion_matrix(y_pred_final.Churn, y_pred_final.final_predicted )\nconfusion2","c97aaae2":"TP = confusion2[1,1] \nTN = confusion2[0,0]\nFP = confusion2[0,1]\nFN = confusion2[1,0]","566c3468":"accuracy = (TN + TP)\/float(TN+FN+TP+FP)\nprint(\"Accuracy of the model: \",round(accuracy,3))\nsensitivity = TP \/ float(TP+FN)\nprint(\"Sensitivity of the model: \",round(sensitivity,3))\nspecificity = TN \/ float(TN+FP)\nprint(\"Specificity of the model: \",round(specificity,3))","eaa996d2":"model  = pd.DataFrame({\"Features\": x_train_sm.columns,\"Coefficient\":res.params.values})\nmodel[\"Odds_Ratio\"] = model[\"Coefficient\"].apply(lambda x: np.exp(x))\nmodel[[\"Coefficient\",\"Odds_Ratio\"]] = model[[\"Coefficient\",\"Odds_Ratio\"]].apply(lambda x: round(x,2))\nmodel[\"Perc_Impact\"] = model[\"Odds_Ratio\"].apply(lambda x: (x-1)*100)\nmodel","d3cbd202":"from sklearn.decomposition import PCA","3584e562":"pca=PCA(svd_solver='randomized',random_state=42)","d666e519":"pca.fit(x_train)","ae422a68":"pca.components_","96439c1a":"colnames=list(x_train.columns)\npca_df=pd.DataFrame({'PC1':pca.components_[0],'PC2':pca.components_[1],'Feature':colnames})","50efa83a":"pca_df.head()","e07d426f":"pca.explained_variance_ratio_","584b19f7":"plt.figure(figsize=(5,5))\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('No. of components')\nplt.ylabel('Cummulative Sum')\nplt.show()","00ba67cd":"pca_last=PCA(n_components=3)\ndf_train_pca3=pca_last.fit_transform(x_train)","3dda7f2c":"learner_pca3=LogisticRegression()\nmodel_pca3=learner_pca3.fit(df_train_pca3,y_train)","5a8ba6e5":"pca_test_pca3=PCA(n_components=3)\ndf_train_pca3=pca_test_pca3.fit_transform(x_test)","7c9b31ec":"learner_pca3=LogisticRegression()\nmodel_pca3=learner_pca3.fit(df_train_pca3,y_train)\npred_prob_test3=model_pca3.predict_proba(df_test_pca3) [:,1]","b22674be":"y_pred=model_pca3.predict(x_test)","b4e60550":"print('accuracy:',accuracy_score(y_test,y_pred))","c0fdbd21":"fpr, tpr, thresholds = metrics.roc_curve()","c4cd8d29":"We have completed all steps for solving a classification problem. We have seen that the model we built gives good accuracy score of 77% on the Training dataset and 74% on the Testing dataset along with other metrics. For this problem we preffered to use Sensitivity and Specificity metrics for the evauation. We have also seen impact of each variable on the probability of churn. Below are few observations about the model:\n\nA customer with long term contracts like One year and Two Year are less likely to churn than the customer having Monthly contract.\n\nA customer who is associated with the company from longer time is less likely to churn than a customer who is associated from few months. Reason can be the customer is happy with the services and wishes to continue with them.\n\nCustomer using Internet Services, Fiber Optics, Streaming TV and Movies servies are more likely to churn than customer who are not using these services. Reason can be company not providing good Internet services and need to work on that.\n\nCustomer who have opted for Payment Method through Credit Card or Mailed check are less likely to churn then other customers.\n\nOverall, company need to provide better internet services and other services associated with internet to retain their customers."}}