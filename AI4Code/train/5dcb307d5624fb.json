{"cell_type":{"64dcc6db":"code","5a722aac":"code","45da205f":"code","2c9ca693":"code","ba8073ae":"code","7a5730c8":"code","68fe3f67":"code","95183177":"code","3c9c1975":"code","52db1d0d":"code","d37af264":"code","4fbdce82":"code","e9964eee":"code","fd722212":"code","881cdddf":"code","8212d62b":"code","0e63d3bd":"code","9f2cacb0":"markdown","127b0aa4":"markdown","48f490e7":"markdown","2655637d":"markdown","23b6ab00":"markdown","b27e462e":"markdown","a4b73704":"markdown"},"source":{"64dcc6db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport ast\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5a722aac":"trainDF=pd.read_csv('..\/input\/train.csv')","45da205f":"trainDF.head(1)","2c9ca693":"trainDF.belongs_to_collection=trainDF.belongs_to_collection.fillna('[{}]')\n\nbelongs_to_collectionList=[]\nfor index,row in trainDF.belongs_to_collection.iteritems():\n    belongs_to_collectionStr=''\n    listofDict=ast.literal_eval(row)\n    for dic in listofDict:\n        \n        if('name' in dic.keys()):\n            belongs_to_collectionStr=belongs_to_collectionStr+';'+dic['name'] \n    belongs_to_collectionStr=belongs_to_collectionStr.strip(';') # trim leading ;\n    belongs_to_collectionList.append(belongs_to_collectionStr)\n    \ntempDF=pd.DataFrame(belongs_to_collectionList,columns=['belongs_to_collection'])\ntrainDF.belongs_to_collection=tempDF['belongs_to_collection']","ba8073ae":"trainDF.belongs_to_collection.value_counts().head()","7a5730c8":"trainDF.genres=trainDF.genres.fillna('[{}]')\n\ngenresList=[]\nfor index,row in trainDF.genres.iteritems():\n    genresStr=''\n    listofDict=ast.literal_eval(row)\n    for dic in listofDict:\n        \n        if('name' in dic.keys()):\n            genresStr=genresStr+';'+dic['name'] \n    genresStr=genresStr.strip(';') # trim leading ;\n    genresList.append(genresStr)\n    \ntempDF=pd.DataFrame(genresList,columns=['genres'])\ntrainDF.genres=tempDF['genres']","68fe3f67":"trainDF.genres.head(10) # semicolon seperated values","95183177":"trainDF.production_companies[0] # Actual value","3c9c1975":"trainDF.production_companies=trainDF.production_companies.fillna('[{}]')\n\nproduction_companiesList=[]\nfor index,row in trainDF.production_companies.iteritems():\n    production_companiesStr=''\n    listofDict=ast.literal_eval(row)\n    for dic in listofDict:\n        \n        if('name' in dic.keys()):\n            production_companiesStr=production_companiesStr+';'+dic['name'] \n    production_companiesStr=production_companiesStr.strip(';') # trim leading ;\n    production_companiesList.append(production_companiesStr)\n    \ntempDF=pd.DataFrame(production_companiesList,columns=['production_companies'])\ntrainDF.production_companies=tempDF['production_companies']","52db1d0d":"trainDF.production_companies.head() # Extracted Value","d37af264":"trainDF.production_countries[56] # actual values","4fbdce82":"trainDF.production_countries=trainDF.production_countries.fillna('[{}]')\n\nproduction_countriesList=[]\nfor index,row in trainDF.production_countries.iteritems():\n    production_countriesStr=''\n    listofDict=ast.literal_eval(row)\n    for dic in listofDict:\n        \n        if('name' in dic.keys()):\n            production_countriesStr=production_countriesStr+';'+dic['name'] \n    production_countriesStr=production_countriesStr.strip(';') # trim leading ;\n    production_countriesList.append(production_countriesStr)\n    \ntempDF=pd.DataFrame(production_countriesList,columns=['production_countries'])\ntrainDF.production_countries=tempDF['production_countries']","e9964eee":"trainDF.production_countries.head()","fd722212":"dateSplit=trainDF.release_date.str.extract('([0-9]+)\/([0-9]+)\/([0-9]+)')\ndateSplit.columns=['ReleaseMonth','ReleaseDate','ReleaseYear']","881cdddf":"dateSplit.loc[dateSplit.ReleaseYear.astype(int)>20,'ReleaseYear']='19'+dateSplit.loc[dateSplit.ReleaseYear.astype(int)>20,'ReleaseYear']\n\ndateSplit.loc[dateSplit.ReleaseYear.astype(int)<=20,'ReleaseYear']='20'+dateSplit.loc[dateSplit.ReleaseYear.astype(int)<=20,'ReleaseYear']\n","8212d62b":"trainDF=pd.concat([trainDF,dateSplit],axis=1)","0e63d3bd":"trainDF.head()","9f2cacb0":"#  Extracting information from  **production_countries** column","127b0aa4":"#  Extracting information from  **release_date** column","48f490e7":"# Extracting information from **belongs_to_collection** Column","2655637d":"if year is between 00 to 19.. Then it could be between 2000 to 2019\n\nElse year is between 20 to 99 then it could be between 1920 to 1999","23b6ab00":"# Extracting information from **Genres** column","b27e462e":"# Reading Data","a4b73704":" # Extracting information from **production_companies** column"}}