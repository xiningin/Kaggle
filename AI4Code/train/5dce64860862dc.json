{"cell_type":{"90503357":"code","62c99d0a":"code","32390a42":"code","5010ead1":"code","b897ee8b":"code","afe2f657":"code","8f4bd213":"code","effa82b1":"code","2671575e":"code","c5929e65":"code","1abdba21":"markdown"},"source":{"90503357":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62c99d0a":"import numpy as np\nimport random\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","32390a42":"def getTokens(inputString): #custom tokenizer. ours tokens are characters rather than full words\n    tokens = []\n    for i in inputString:\n        tokens.append(i)\n    return tokens","5010ead1":"data = pd.read_csv(r'..\/input\/data.csv', error_bad_lines=False)\ndata = pd.DataFrame(data)\npasswords = np.array(data)\nrandom.shuffle(passwords) #shuffling randomly for robustness\ny = [d[1] for d in passwords] #labels\nallpasswords= [d[0] for d in passwords]","b897ee8b":"vectorizer = TfidfVectorizer(tokenizer=getTokens) #vectorizing\nX = vectorizer.fit_transform(allpasswords)\ndata_process = np.concatenate((np.array(y).reshape(669640, 1), X.toarray()), axis=1)\ndf = pd.DataFrame(data_process)","afe2f657":"df.rename(columns={0: 'Label'})","8f4bd213":"df.to_csv('data_process.csv', index=False)","effa82b1":"from collections import Counter\nimport re\n\n\ndef repeat(string):\n    # print(list(filter(lambda x: x[-1] > 1, Counter(string).values())))\n    n = sum(list(filter(lambda x: x > 1, Counter(string).values())))\n    \n    return - n * (n - 1)\n\n\ndef consecutive_upper(string):\n    re_ = re.compile('[A-Z]{2,}')\n    result = sum(map(len, re_.findall(string)))\n    return - (result * 2)\n\n\ndef consecutive_lower(string):\n    re_ = re.compile('[a-z]{2,}')\n    result = sum(map(len, re_.findall(string)))\n    return - (result * 2)\n\n\n\n\ncheck_list = {\n    \"Number of characters in the password\": (lambda x: len(x) * 4),\n    \"Number of LC characters\": (lambda x: (len(x) - len([c for c in x if c.islower()])) * 2),\n    \"Number of UC characters \": (lambda x: (len(x) - len([c for c in x if c.isupper()])) * 2),\n    \"Number of digits\": (lambda x: len([d for d in x if d.isdigit()]) * 4),\n    \"Number of symbols\": (lambda x: len([c for c in x if not c.isalnum()]) * 6),\n    \"Characters only\": (lambda x: -1 * len([c for c in x if c.isalpha()])),\n    \"Digits only\": (lambda x: -1 * len([d for d in x if d.isdigit()])),\n    \"Number of repeat characters\": (lambda x: repeat(x)),\n    \"Number of consecutive uppercase characters\": (lambda x: consecutive_upper(x)),\n    \"Number of consecutive lower characters\": (lambda x: consecutive_lower(x))\n}","2671575e":"pw = \"P@ssword123!\"\nfor key, value in check_list.items():\n    print(value(pw))\nprint(\"Score: \", sum([value(pw) for key, value in check_list.items()]))","c5929e65":"Counter(pw).values()","1abdba21":"# T\u00ednh score"}}