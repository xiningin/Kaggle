{"cell_type":{"93bc766d":"code","ef7fd41b":"code","466b7bf8":"code","7b8399e1":"code","bbcd7c35":"code","78f5cf06":"code","dd3d4443":"code","827177f1":"code","f4ec1a15":"code","4f68b010":"code","cea42c96":"code","50e43b45":"code","31aa11e5":"code","5e8d1cdc":"code","1d746ea3":"code","eab80655":"code","4d794697":"code","fb47a311":"code","1767b55d":"code","19426d89":"code","f8c23f6e":"code","830c880f":"code","5876af80":"code","a465cc51":"markdown","d16f97fa":"markdown","c907795d":"markdown","7a954339":"markdown","66768570":"markdown","da51c7d8":"markdown","29148543":"markdown","86c752cc":"markdown","167958cf":"markdown","a3d8a1bd":"markdown","810ecae6":"markdown","42259833":"markdown","92617bbb":"markdown","faa07dd4":"markdown","3798732b":"markdown","7ddd532a":"markdown"},"source":{"93bc766d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef7fd41b":"import matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly.express as px \nimport plotly.graph_objects as go\nimport gc \nimport math \nfrom tqdm import tqdm \nfrom wordcloud import WordCloud \nimport warnings \nimport math \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom lightgbm import LGBMRegressor\n\npd.set_option(\"display.max_columns\", None)\nwarnings.simplefilter(\"ignore\")","466b7bf8":"df = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")\ndf = df.iloc[1:, :].reset_index(drop=True)\ndf.head()","7b8399e1":"def get_language(df: pd.DataFrame):\n    usecols = []\n    # get use columns name and fill values.\n    for col in df.columns.to_list():\n        if col.find(\"Q7_Part\") >= 0:\n            lang = df[col].value_counts().index[0]\n            usecols.append(col)\n            df[col] = df[col].fillna(\"none\")\n            \n    a = []  \n    for row in range(df.shape[0]):\n        x = df.iloc[row]\n        b = []\n        for cols in usecols:\n            c = x[cols]\n            if c != \"none\":\n                b.append(c.lower())\n            else:\n                continue \n        a.append(\",\".join(b))\n        del b, c \n        \n    use_lang_len = [len(aa.split(\",\")) for aa in a]\n    is_python = []\n    for aa in a:\n        if aa.find(\"python\") >= 0:\n            is_python.append(1)\n        else:\n            is_python.append(0)\n            \n    assert len(a) == len(use_lang_len) == len(is_python)\n    gc.collect()\n                \n    return pd.DataFrame({\"language\": a, \"use_lang_len\": use_lang_len, \"is_python\": is_python})\n            ","bbcd7c35":"%%time \n\nlang = get_language(df)\ndf = pd.merge(df, lang, how=\"left\", left_index=True, right_index=True)\ndf = df[df[\"language\"] != \"\"].reset_index(drop=True)\n\ndel lang\ngc.collect()\n\ndf[[\"language\", \"use_lang_len\", \"is_python\"]].head()","78f5cf06":"# create numericcal dataset \n\ndef trans_age(x):\n    if x.find(\"-\") >= 0:\n        return ( int(x.split(\"-\")[0]) + int(x.split(\"-\")[1]) ) \/ 2\n    elif x.find(\"+\"):\n        return 70.0 \n    else:\n        return x \n    \ndef trans_employer(x):\n    x = str(x)\n    if x.find(\"-\") >= 0:\n        if x.find(\",\") >= 0:\n            return ( int(x.split(\"-\")[0]) + 9999) \/ 2 \n        else:\n            return int(x.split(\"-\")[0]) + int(x.split(\"-\")[1].split(\" \")[0]) \/ 2 \n    elif x.find(\",\"):\n        return 10000\n    else:\n        return x \n    \ndef trans_experience(x):\n    x = str(x)\n    if x.find(\"-\") >= 0:\n        return ( int(x.split(\"-\")[0]) + int(x.split(\"-\")[1].split(\" \")[0]) \/ 2 )\n    elif x.find(\"+\") >= 0:\n        return 20 \n    elif x.find(\"<\") >= 0:\n        return 0\n    else:\n        return x    \n    \ndef trans_money(x):\n    x = str(x)\n    x = x.replace(\"$\", \"\")\n    x = x.replace(\",\", \"\")\n    if x.find(\"-\") >= 0:\n        return ( int(x.split(\"-\")[0]) + int(x.split(\"-\")[-1]) \/ 2)\n    elif x.find(\"<\") >= 0:\n        return 1000000\n    else:\n        return 0\n    \ndef trans_student(x):\n    if x == \"Student\":\n        return 1\n    else:\n        return 0 \n    \ndef trans_data_engineer(x):\n    x = str(x)\n    if x.find(\"Data\") >= 0 or x.find(\"Machine\") >= 0 or x.find(\"Scientist\") >= 0:\n        return 1 \n    else:\n        return 0 \n    \ndef trans_sex(x):\n    x = str(x)\n    if x == \"Man\":\n        return 0 \n    elif x == \"Woman\":\n        return 1 \n    else:\n        return 2\n    \ndef get_numerical(df: pd.DataFrame):\n    q_time = df.iloc[:, 0].astype(int)\n    age = df[\"Q1\"].apply(trans_age)\n    employ = df[\"Q21\"].apply(trans_employer)\n    money = df[\"Q25\"].apply(trans_money)\n    is_python = df[\"is_python\"]\n    is_student = df[\"Q5\"].apply(trans_student)\n    is_data = df[\"Q5\"].apply(trans_data_engineer)\n    sex = df[\"Q2\"].apply(trans_sex)\n    exp = df[\"Q6\"].apply(trans_experience)\n    use_lang_num = df[\"use_lang_len\"]\n    lang = df[\"language\"]\n    \n    train = pd.DataFrame({\"language\": lang, \n                          \"q_time\": q_time, \n                         \"age\": age, \n                         \"employment\": employ,\n                         \"is_python\": is_python,\n                         \"is_student\": is_student, \n                         \"is_data_analysis\": is_data, \n                         \"sex\": sex, \n                         \"experience\": exp,\n                         \"use_lang_number\": use_lang_num,\n                         \"money\": money})\n    train[\"money\"] = train.money.apply(lambda x: train[\"money\"].mean() if x == 0 else x)\n    return train\n    ","dd3d4443":"train = get_numerical(df)\n\nplt.figure(figsize=(20, 20))\nsns.heatmap(round(train.corr(), 1), cmap=\"Blues\", annot=True, fmt=\"\")\nplt.show()","827177f1":"def viz_group(df: pd.DataFrame, col_name: str, title: str, xaxis_title: str, n: int=10, sort: bool=True):\n    if sort:\n        x = df.groupby(col_name).mean().loc[:, [\"use_lang_len\"]].sort_values(\"use_lang_len\", ascending=False)[:n]\n    else:\n        x = df.groupby(col_name).mean().loc[:, [\"use_lang_len\"]][:n]\n    fig = go.Figure(data=[\n        go.Bar(name=xaxis_title, y=x.values.ravel()),\n    ])\n\n    # Change the bar mode\n    fig.update_layout(\n        barmode='group',\n        title=title,\n        xaxis_title=xaxis_title,\n        yaxis_title=\"use language count\",\n        xaxis = dict(\n            tickmode = 'array',\n            tickvals = [x for x in range(x.shape[0])],\n            ticktext = x.index\n        )\n    )\n    fig.show()\n    \ndef viz_pie(df: pd.DataFrame, col_name: str, title: str, n=10):\n    x = df[col_name].value_counts().to_frame().sort_values(col_name, ascending=False)\n    xx = x[:n]\n    fig = px.pie(values=xx[col_name], names=xx.index, title=title)\n    fig.update_traces(textposition='inside', textinfo='percent+label')\n    fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\n    fig.show()\n    \ndef viz_location(df: pd.DataFrame, title: str):\n    x = df.groupby(\"Q3\").mean().loc[:, [\"use_lang_len\"]]\n    x[\"country\"] = x.index \n    x.reset_index(drop=True, inplace=True)\n    \n    fig = px.choropleth(x, \n                    locations = 'country',  \n                    color = \"use_lang_len\",\n                    locationmode = 'country names', \n                    color_continuous_scale = 'viridis',\n                    title =  title,\n                    range_color = [0, x[\"use_lang_len\"].max()])\n    fig.update(layout=dict(title=dict(x=0.5)))\n    fig.show()\n    \ndef viz_word(df: pd.DataFrame, col_name: str, title: str):\n    unique_word = df[col_name].unique()\n    fig, axes = plt.subplots(len(unique_word), 1, figsize=(30, 60))\n    ax = axes.ravel()\n    \n    def create_word(ser: pd.Series):\n        word_list = {}\n        for se in ser.to_list():\n            if len(se.split(\",\")) > 1:\n                for lang in se.split(\",\"):\n                    if lang not in word_list:\n                        word_list[lang] = 1 \n                    else:\n                        word_list[lang] += 1 \n            else:\n                lang = se \n                if lang not in word_list:\n                    word_list[lang] = 1 \n                else:\n                    word_list[lang] += 1 \n        return word_list \n                \n    for i, word in enumerate(unique_word):\n        x = df.loc[df[col_name] == word, \"language\"]\n        word_cloud = WordCloud(background_color=\"white\", width=2200, height=1440).generate_from_frequencies(create_word(x))\n        ax[i].imshow(word_cloud)\n        ax[i].set_title(word)\n        ax[i].set_xticks([])\n        ax[i].set_yticks([])\n        \n    plt.tight_layout()\n    plt.suptitle(title)\n    del x \n    gc.collect()","f4ec1a15":"viz_pie(df, \"use_lang_len\", \"number of language\")","4f68b010":"viz_location(df, \"use language value counts by country\")","cea42c96":"viz_pie(df, \"language\", \"popular combination language\")","50e43b45":"nums = sorted(df[\"use_lang_len\"].unique().tolist())\nfor num in nums:\n    viz_pie(df[df[\"use_lang_len\"] == num], \"language\", f\"language usage {str(num)}\")","31aa11e5":"viz_pie(df[df[\"is_python\"] != 1], \"language\", \"number of language by NOT Python\")","5e8d1cdc":"viz_group(df, \"Q1\", \"use language count by Age\", \"age\", n=11, sort=False)","1d746ea3":"viz_group(df, \"Q4\", \"use language count by Education\", \"education\")","eab80655":"viz_group(df, \"Q5\", \"use language count by employment\", \"employer\")","4d794697":"viz_word(df, \"Q4\", \"language used by each business operator.\")","fb47a311":"viz_group(df, \"Q2\", \"use language count by Gender\", \"gender\")","1767b55d":"train.head()","19426d89":"def fit(df: pd.DataFrame):\n    x, y = df.drop([\"language\", \"money\"], axis=1), df[[\"money\"]]\n    x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.25, stratify=df[\"use_lang_number\"], random_state=42)\n    model = LGBMRegressor(random_state=42, n_estimators=2000)\n    model.fit(x_train, y_train,\n             eval_set=[(x_train, y_train), (x_val, y_val)], verbose=100)\n    \n    pred = model.predict(x_val).flatten()\n    \n    def mae(pred, corr):\n        return np.mean(np.abs(pred - corr))\n    print(f\"mae: {mae(pred, y_val.values.ravel())}\")\n    return model \n\ndef predict(model: object, df: pd.DataFrame):\n    train = df.drop([\"language\", \"money\"], axis=1)\n    num_lang = train[\"use_lang_number\"].unique()\n    sample_mean_predict, sample_std_predict, use_lang_num_list, ns = [], [], [], []\n    for num in num_lang:\n        x = train[train[\"use_lang_number\"] == num]\n        ns.append(x.shape[0])\n        sample_std_predict.append(np.std(model.predict(x).flatten()))\n        sample_mean_predict.append(np.mean(model.predict(x).flatten()))\n        use_lang_num_list.append(num)\n        \n#     population_mean_predict = []\n#     for n, mu, std in zip(ns, sample_mean_predict, sample_std_predict):\n#         r_min = round(mu - 1.96 * (std \/ math.sqrt(n)), 1)\n#         r_max = round(mu + 1.96 * (std \/ math.sqrt(n)), 1)\n#         r = f\"{r_min} ~ {r_max}\"\n#         population_mean_predict.append(r)\n        \n    result = pd.DataFrame({\"use_lang_number\": use_lang_num_list, \"predict_income\": sample_mean_predict}).sort_values(\"use_lang_number\").reset_index(drop=True)\n    return result.set_index(\"use_lang_number\")","f8c23f6e":"model = fit(train)","830c880f":"df_predict = predict(model, train)\n\nincome = train.groupby(\"use_lang_number\").mean().loc[:, [\"money\"]]\nmu = train[\"money\"].mean()\n\nfig = go.Figure(data=[\n    go.Bar(name='income', y=income.values.ravel()),\n    go.Bar(name='predict_income', y=df_predict.values.ravel()),\n\n])\n\n# Change the bar mode\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0=mu, y1=mu,\n      xref= 'x', x0= -0.5, x1= income.shape[0]-0.5\n    )],\n    barmode='group',\n    title=f'number of language by income',\n    xaxis_title='number of language',\n    yaxis_title='income',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(income.shape[0])],\n        ticktext = income.index\n    )\n)\n\nfig.add_annotation(x=income.shape[0]*0.95, y=mu, xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\n\nfig.show()","5876af80":"importance = pd.DataFrame({\"feature_importance\": model.feature_importances_ \/ np.sum(model.feature_importances_)}, index=train.drop([\"language\", \"money\"], axis=1).columns)\n\nfig = px.pie(values=importance[\"feature_importance\"], names=importance.index, title=\"Impact on income.\")\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","a465cc51":"# Number of language x Country","d16f97fa":"# Predict income\nBuild a model that predicts your income. Let's see how much it affects the number of languages used by comparing the importance of the trained model.","c907795d":"## not Python","7a954339":"+ Python is a popular language and always ranks high in combination.\n+ Software developers are required to use more languages, about 0.5 counts, compared to data analysts.\n+ Python seems to be the top in every job. However, keep in mind that the survey target is biased around the data analyst.  \n+ It seems to be used relatively frequently in African countries.","66768570":"# Number of language x job","da51c7d8":"# Number of language x Gender","29148543":"# Number of language x Age ","86c752cc":"## Overall","167958cf":"+ Income may increase depending on the number of languages used.\n+ Especially when it exceeds 8, you can see the rise. However, be aware of data bias.","a3d8a1bd":"## feature importance ","810ecae6":"# Number of language x Educate ","42259833":"# Number of language x Language","92617bbb":"## compare predict and labels","faa07dd4":"## number of","3798732b":"# Number of language RATE","7ddd532a":"+ It gives a positive correlation to years of experience, albeit slightly as the number of languages used increases. The ability to use python also has an impact.  \n+ However, its impact on income is small, and just because you can use a lot of languages does not seem to increase it."}}