{"cell_type":{"d18902d1":"code","6d6e726e":"code","30fb73ac":"code","27e74519":"code","c7f1ec99":"code","915ab8cd":"code","88d42456":"code","d3d5721f":"code","a7c0e2a3":"code","a510bd36":"code","e7d674fb":"code","07d0f445":"code","09785ee7":"code","c6b5864d":"code","1c721e9a":"code","de761a1d":"code","2a1744e5":"code","68a50e18":"code","fb92bb92":"code","69c8ab4e":"code","107f64e9":"code","94ff4ff9":"code","c5113a5d":"code","8306a5bd":"code","bf6a565b":"code","ff90bd6f":"code","45467ea5":"code","c0026742":"code","6c017c04":"code","ba1caf99":"code","6b951135":"code","2ea031e8":"code","87989ba7":"code","79523453":"code","eca95215":"code","dc9761c7":"code","756c8a26":"code","c3573dc1":"code","1d9428eb":"code","2c388f21":"code","8f57aab0":"code","afbf57d5":"code","8d22620c":"markdown","2b638c28":"markdown","9c6ce263":"markdown","4ef2c338":"markdown","1970abbd":"markdown","652ea73f":"markdown","a84d1ffd":"markdown","acf11340":"markdown","6f02cfe6":"markdown","0f0004da":"markdown"},"source":{"d18902d1":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np","6d6e726e":"# import os\n# print(os.listdir(\"..\/input\/time-series\/case.xlsx\"))","30fb73ac":"dataset = pd.read_csv('..\/input\/datacovid19\/case_time_series.csv')","27e74519":"dataset.info()","c7f1ec99":"dataset['date'] = pd.to_datetime(dataset['Date'])","915ab8cd":"dataset.info()","88d42456":"import seaborn as sns\nplt.figure(figsize=(20,10))\ng = sns.jointplot(dataset['date'],dataset['Total Confirmed'], kind=\"kde\", height=7, space=0)\nplt.gcf().autofmt_xdate()\nplt.show()","d3d5721f":"plt.figure(figsize=(15,10))\nsns.set(style=\"darkgrid\")\nsns.lineplot(x='date', y='Total Confirmed',\n             data=dataset,  linewidth=3)\nplt.gcf().autofmt_xdate()\nplt.show()","a7c0e2a3":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport numpy as np\nimport datetime as dt\nplt.figure(figsize=(15,10))\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))\nplt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=10))\nplt.plot(dataset['date'],dataset['Total Confirmed'], linewidth=3)\nplt.gcf().autofmt_xdate()\nplt.show()","a510bd36":"df = dataset.groupby(['date'])[['Daily Confirmed','Daily Recovered','Daily Deceased']].sum()\n\nplt.figure(figsize=(15,10))\nplt.title('DAILY CASES OF COVID-19 CASES IN INDIA', fontsize=30)\nplt.xlabel('date')\nplt.ylabel('NO OF CASES')\nplt.plot(df.index,df['Daily Confirmed'], label='daily_confirmed', linewidth=3)\nplt.plot(df.index,df['Daily Recovered'], label='daily_recovered', linewidth=3, color='green')\nplt.plot(df.index,df['Daily Deceased'], label='daily_deceased', linewidth=3, color='red')\nplt.bar(df.index,df['Daily Confirmed'], alpha=0.2, color='c')\nplt.style.use('ggplot')\nplt.legend()\n","e7d674fb":"# total cases\ndf_total = dataset.groupby(['date'])[['Total Confirmed','Total Recovered','Total Deceased']].sum()\nplt.figure(figsize=(15,10))\nplt.title('TOTAL CASES OF COVID-19 CASES IN INDIA', fontsize=30)\nplt.xlabel('date', fontsize=20)\nplt.ylabel('Total Number of Cases', fontsize=20)\nplt.plot(df_total.index,df_total['Total Confirmed'], label='Total Confirmed',linewidth=3)\nplt.plot(df_total.index,df_total['Total Recovered'], label='Total Recovered', linewidth=3)\nplt.plot(df_total.index,df_total['Total Deceased'], label='Total Deceased', linewidth=3)\nplt.bar(df_total.index,df_total['Total Confirmed'], label='Total Confirmed', alpha=0.2, color='c')\nplt.style.use('ggplot')\nplt.legend(loc='best')\n","07d0f445":"#df\nlabels = 'Total Recovered','Total Deceased'\nrecovered = dataset['Total Recovered']\ndeceased = dataset['Total Deceased']\nsizes = [recovered.sum() , deceased.sum()]\nexplode = [0,0.1]\ncolors = ['yellowgreen','lightcoral']\nplt.figure(figsize=(10,20))\n\nplt.title('Dsitribution of confirmed cases Till 4th MAY', fontsize=20)\nplt.pie(sizes, autopct='%1.1f%%', labels=labels,explode=explode,colors=colors, shadow=True)\nplt.legend(labels, loc='best')\nplt.show()","09785ee7":"df = pd.read_excel('..\/input\/time-series\/case.xlsx')","c6b5864d":"df.head()","1c721e9a":"df = df.set_index(['date'])","de761a1d":"df.head()","2a1744e5":"plt.figure(figsize=(10,8))\nplt.plot(df)","68a50e18":"df.isnull().sum()","fb92bb92":"# rolling mean\n\nrolmean = df.rolling(window=6).mean()\nrolstd = df.rolling(window=6).std()","69c8ab4e":"print(rolmean,rolstd)","107f64e9":"plt.figure(figsize=(10,8))\nplt.plot(df, color='blue', label='original cases')\nplt.plot(rolmean, color='red', label='rolling mean')\nplt.plot(rolstd, color='black', label='rolling standard deviation')\nplt.legend(loc='best')\nplt.show()","94ff4ff9":"from statsmodels.tsa.stattools import adfuller\ndef test(data):\n    rolmean = data.rolling(window=4).mean()\n    rolstd = data.rolling(window=4).std()\n    plt.figure(figsize=(10,8))\n    plt.plot(data, color='blue', label='original cases')\n    plt.plot(rolmean, color='red', label='rolling mean')\n    plt.plot(rolstd, color='black', label='rolling standard deviation')\n    plt.legend(loc='best')\n    plt.show()\n    \n    dftest = adfuller(data['Total Confirmed'], autolag = 't-stat')\n    dfoutput = pd.Series(dftest[0:4], index=['test statitics','p_value','lags used','number of observations'])\n    for key,value in dftest[4].items():\n        dfoutput['critcal value (%s)'%key] = value\n        \n    print(dfoutput)","c5113a5d":"test(df)","8306a5bd":"df_log = np.log(df)\nplt.figure(figsize=(10,8))\nplt.plot(df_log)\nplt.gcf().autofmt_xdate()\nplt.show()\ndf_log.tail()","bf6a565b":"test(df_log)","ff90bd6f":"movingaverage = df_log.rolling(window=4).mean()\nrolstd = df_log.rolling(window=4).std()\nplt.figure(figsize=(10,8))\nplt.plot(df_log, color='blue', label='original cases')\nplt.plot(movingaverage, color='red', label='rolling mean')\nplt.plot(rolstd, color='black', label='rolling standard deviation')\nplt.legend(loc='best')\nplt.show()","45467ea5":"df_log_minus = df_log - movingaverage\ndf_log_minus.dropna(inplace=True)\ndf_log_minus.tail(12)","c0026742":"test(df_log_minus)","6c017c04":"data_shift = df_log_minus - df_log_minus.shift()\nplt.figure(figsize=(10,8))\nplt.plot(data_shift)","ba1caf99":"data_shift.dropna(inplace=True)\ntest(data_shift)","6b951135":"# TO CALCULATE P AND Q VALUE FOR ARIMA MODEL\n# TO CALCULATE ACF AND PACF\n\nfrom statsmodels.tsa.stattools import acf, pacf\n\nlag_acf = acf(data_shift, nlags=20)\nlag_pacf = pacf(data_shift, nlags=20, method='ols')\n\nplt.figure(figsize=(10,8))\n#plot acf\nplt.subplot(211)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(data_shift)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(data_shift)), linestyle='--', color='gray')\nplt.title('ACF')\nplt.legend(loc='best')\n\n#plot pacf\nplt.subplot(212)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(data_shift)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(data_shift)), linestyle='--', color='gray')\nplt.title('PACF')\nplt.legend(loc='best')","2ea031e8":"from statsmodels.tsa.arima_model import ARIMA\nimport warnings\nwarnings.filterwarnings('ignore')\nmodel = ARIMA(df_log, order=(4,1,4))\nresult = model.fit(disp=-1)\nplt.figure(figsize=(10,8))\nplt.plot(data_shift)\nplt.plot(result.fittedvalues, color='blue')\nplt.title('RSS %-4F'% sum((result.fittedvalues- data_shift['Total Confirmed'])**2))","87989ba7":"pred_arima_diff = pd.Series(result.fittedvalues, copy=True)\npred_arima_diff","79523453":"# we will take cumsum\npred_arima_diff_cumsum = pred_arima_diff.cumsum()\npred_arima_diff_cumsum.tail()","eca95215":"prediction = pd.Series(df_log['Total Confirmed'].iloc[0], index=df_log.index)\nprediction = prediction.add(pred_arima_diff_cumsum, fill_value=0)\nprediction.tail()","dc9761c7":"pred = np.exp(prediction)\nplt.figure(figsize=(10,8))\nplt.plot(df)\nplt.plot(pred, color='green')","756c8a26":"pred.tail()","c3573dc1":"df","1d9428eb":"\nresult.plot_predict(1,106)\nplt.figure(figsize=(10,8))","2c388f21":"x = result.forecast(steps=10)","8f57aab0":"x = np.exp(x[0])","afbf57d5":"for i in x:\n    print(i)","8d22620c":"**WE WILL DO 10 DAYS PREDICTION 5 MAY TO 15 MAY , 2020**","2b638c28":"**WE WILL USE ARIMA MODEL **","9c6ce263":"**# TREND ANALYSIS USING LOG TRANSFORMATION**","4ef2c338":"***TIME SEREIS ANALYIS FOR UPCOMING NEXT 10 DAYS******","1970abbd":"**WE WILL DO DICKEY-FULLER TEST TO CHECK STATIONARITY OF DATA\nAND TO REJECT NULL HYPOTHESIS**","652ea73f":"**HERE P_VALUE IS FAR LESS THAN CRITICAL VALUE SO WE CAN REJECT NULL HYPOTHESIS AND WE CAN SAY OUR DATA IS STATIONARY**","a84d1ffd":" **WE WILL TAKE ONLY TWO COLUMNS FOR ANALYSIS - 'date' and 'Total Confirmed'**","acf11340":"**HERE P_VALUE IS LARGER THAN 0.5 SO WE CANNOT REJECT NULLL HYPOTHESIS THAT DATA IS NOT STATIONARY**","6f02cfe6":"**WE WILL CHANGE INDEX TO DATE INDEX**","0f0004da":"**5 may actual case = 49,391**\n**Predicted one = 50,246**\n   "}}