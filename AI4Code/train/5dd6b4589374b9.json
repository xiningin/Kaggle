{"cell_type":{"724ad4c7":"code","5f408ff1":"code","71080162":"code","84b6c437":"code","8b814854":"code","343159a5":"code","ff1a2213":"code","2f38ad72":"code","47baa6b0":"code","b7c60528":"code","e9de80d9":"code","c3dc2b8c":"code","2ae48f9c":"code","de9d639a":"code","d0195273":"code","d1831aa1":"code","3d94c718":"code","6a062c0f":"markdown","79614d9f":"markdown","0fc2c496":"markdown","51c9f892":"markdown","cff49c56":"markdown","9fb63963":"markdown","8e086e23":"markdown","85ea1c8d":"markdown","7fec021a":"markdown","1730df18":"markdown"},"source":{"724ad4c7":"import os\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\n\nfrom tensorflow.keras import models, layers\n\n\ndef RMSE(mse):\n    RMSE = np.square(mse)\n    return RMSE","5f408ff1":"df = pd.read_csv('\/kaggle\/input\/cern-electron-collision-data\/dielectron.csv')\ndf.head()","71080162":"df.info()","84b6c437":"df_to_predict =df[ df.M.isnull()]","8b814854":"fig,ax = plt.subplots(nrows=4,ncols=1,figsize=(16,20))\n\nsns.scatterplot(ax= ax[0],data=df, x='pt1', y='pt2', hue='M', hue_norm=(df.M.min(),df.M.max()))\nax[0].set_title('Mass by linear momentum')\nsns.scatterplot(ax= ax[1],data=df, x='eta1', y='eta2', hue='M', hue_norm=(df.M.min(),df.M.max()))\nax[1].set_title('Mass by pseudorapidity')\nsns.scatterplot(ax= ax[2],data=df, x='E1', y='E2', hue='M', hue_norm=(df.M.min(),df.M.max()))\nax[2].set_title('Mass by energy')\nsns.scatterplot(ax= ax[3],data=df, x='phi1', y='phi2', hue='M', hue_norm=(df.M.min(),df.M.max()))\nax[3].set_title('Mass by phi angle')\n\nplt.show()","343159a5":"sns.set_style(style='dark')\nplt.figure(figsize=(16,9))\nheatmap = sns.heatmap(df.corr(), vmin=-1,vmax=1, annot=True,cmap='viridis')\n\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","ff1a2213":"df_traintest = df.drop(index=df_to_predict.index)\n\ny = df_traintest.M\nX = df_traintest.drop(columns=['M','Run','Event'])\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=42)\nX_topred = df_to_predict.drop(columns=['M','Run','Event'])","2f38ad72":"RFR = RandomForestRegressor(n_jobs=3, random_state=42)\n\nRFR.fit(X_train,y_train)\nY_pred = RFR.predict(X_test)\n\nRMSE_RFR = RMSE(mean_squared_error(y_test,Y_pred))","47baa6b0":"fig = plt.figure(figsize=(10,7))\n\nplt.plot(np.arange(0,len(y_test)),sorted(y_test), c='b', label='Actual')\nplt.plot(np.arange(0,len(y_test)),sorted(Y_pred), c='r', label='Predicted')\n\nplt.title('Random Forest Regressor Prediction.\\nRMSE = {}'.format(RMSE_RFR))\nplt.ylabel('Mass Invariant (GeV)')\nplt.legend(loc='best')\n\nplt.show()","b7c60528":"GBR = GradientBoostingRegressor(random_state=42)\n\nGBR.fit(X_train,y_train)\nY_pred = GBR.predict(X_test)\n\nRMSE_GBR = RMSE(mean_squared_error(y_test,Y_pred))","e9de80d9":"fig = plt.figure(figsize=(10,7))\n\nplt.plot(np.arange(0,len(y_test)),sorted(y_test), c='b', label='Actual')\nplt.plot(np.arange(0,len(y_test)),sorted(Y_pred), c='r', label='Predicted')\n\nplt.title('Gradient Boosting Regressor Prediction.\\nRMSE = {}'.format(RMSE_GBR))\nplt.ylabel('Mass Invariant (GeV)')\nplt.legend(loc='best')\n\nplt.show()","c3dc2b8c":"NNR = models.Sequential()\n\nNNR.add(layers.Dense(20, activation='sigmoid', input_shape=(X.shape[1],)))\nNNR.add(layers.Dense(4, activation='sigmoid'))\nNNR.add(layers.Dense(1, activation='relu'))\n\nNNR.compile(loss='mse',\n           optimizer='adam',\n           metrics=['mse'])\n\nNNR.fit(X_train,y_train,\n       batch_size=500,\n       epochs = 500,\n       validation_data=(X_test,y_test))","2ae48f9c":"Y_pred_NNR = NNR.predict(X_test)\n\nRMSE_NNR = RMSE(mean_squared_error(y_test,Y_pred_NNR))","de9d639a":"fig = plt.figure(figsize=(10,7))\n\nplt.plot(np.arange(0,len(y_test)),sorted(y_test), c='b', label='Actual')\nplt.plot(np.arange(0,len(y_test)),sorted(Y_pred_NNR), c='r', label='Predicted')\n\nplt.title('Neural Network Regressor Prediction.\\nRMSE = {}'.format(RMSE_NNR))\nplt.ylabel('Mass Invariant (GeV)')\nplt.legend(loc='best')\n\nplt.show()","d0195273":"Y_nan_RFR = RFR.predict(X_topred)\nY_nan_GBR = GBR.predict(X_topred)\nY_nan_NNR = NNR.predict(X_topred)\n\nfig = plt.figure(figsize=(10,7))\n\nplt.plot(np.arange(0,len(X_topred)),sorted(Y_nan_RFR), c='b', label='Random Forest Regressor, RMSE: {:.2f}'.format(RMSE_RFR))\nplt.plot(np.arange(0,len(X_topred)),sorted(Y_nan_GBR), c='r', label='Gradient Boosting Regressor, RMSE: {:.2f}'.format(RMSE_GBR))\nplt.plot(np.arange(0,len(X_topred)),sorted(Y_nan_NNR), c='g', label='Neural Network Regressor, RMSE: {:.2f}'.format(RMSE_NNR))\n\nplt.title('Predictions with each regressor for NaN values of M')\nplt.ylabel('Mass Invariant (GeV)')\nplt.legend(loc='best')\n\nplt.show()","d1831aa1":"df_pred = pd.DataFrame(np.array([Y_nan_RFR,Y_nan_GBR,Y_nan_NNR.ravel()]).T,\n                      columns = ['M_RFR','M_GBR','M_NNR'],index=X_topred.index)\n\ndf_nan = df_to_predict.drop(columns='M')\ndf_nan = pd.concat([df_nan,df_pred], axis=1)","3d94c718":"df_nan","6a062c0f":"## Prediction of Nan values ","79614d9f":"### Neural Network Regressor","0fc2c496":"### Random Forest Regressor","51c9f892":"### Correlation","cff49c56":"## Data","9fb63963":"# Predicting Mass Invariant of electron pairs","8e086e23":"## Visualization","85ea1c8d":"## Model prediction\n\n### Data selection","7fec021a":"### Gradient Boosting Regressor\n","1730df18":"Great correlation between Mass invariant (M) and:\n* Energies: [E1,E2]\n* Linear momentums: [pt1,pt2]"}}