{"cell_type":{"347a871c":"code","5071d39a":"code","d2b53db3":"code","8c3593c5":"code","6b833263":"code","59e6348a":"code","a435ac29":"code","4d266286":"code","14669b6a":"code","ba8c54ac":"code","c3c4f5cd":"code","3b42142d":"code","239559e0":"markdown"},"source":{"347a871c":"from tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score,precision_score,recall_score\nfrom sklearn.metrics import ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport glob\nimport cv2\nimport tensorflow as tf\n","5071d39a":"features = []\nlabels = []","d2b53db3":"classes = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\nfor i in range(len(classes)):\n    file_list = glob.glob(\"\/kaggle\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\/\" + classes[i] + \"\/*.jpg\")\n    for item in range(1100):\n        features.append(file_list[item])\n        labels.append([i])\nprint(\"Dataset Feature size : \",len(features))\nprint(\"Dataset labels size : \",len(labels))","8c3593c5":"#Shuffle the array\nfeatures,labels = shuffle(features,labels,random_state=0)","6b833263":"classes = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', \n           'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', \n           'W', 'X', 'Y', 'Z', 'nothing', 'space', 'del']","59e6348a":"x_train = []\ny_train = []\nx_test = []\ny_test = []\n\nfor i in features:\n    x_train.append(cv2.imread(i,cv2.IMREAD_COLOR))\n    x_train[-1] = np.reshape(x_train[-1],[200,200,3])\n\nfor i in labels:\n    y_train.append(i)","a435ac29":"x_train,x_test,y_train,y_test = train_test_split(x_train,y_train,test_size=0.3)\nprint(\"Train data : \",len(x_train),len(y_train))\nprint(\"Validation data : \",len(x_test),len(y_test))","4d266286":"alpha = [chr(c) for c in range(65,92)]\nun,count = np.unique(x_train,return_counts=True)\nj=1\nplt.figure(figsize=(100,100))\nfor i in un:\n    plt.subplot(7,4,j)\n    plt.imshow(x_train[np.where(y_train == np.array(i))[1][1]])\n    plt.axis('off')\n    plt.title(alpha[i],fontdict=dict({'fontsize' : 100}))\n    j=j+1","14669b6a":"model =Sequential()\n\nmodel.add(keras.layers.Conv2D(32,(3,3),activation=\"relu\",padding=\"same\",input_shape=(200,200,3)))\nmodel.add(keras.layers.Conv2D(32,(3,3),activation=\"relu\",padding=\"same\"))\nmodel.add(keras.layers.MaxPooling2D(3,3))\n\nmodel.add(keras.layers.Conv2D(64,(3,3),activation=\"relu\",padding=\"same\"))\nmodel.add(keras.layers.Conv2D(64,(3,3),activation=\"relu\",padding=\"same\"))\nmodel.add(keras.layers.MaxPooling2D(3,3))\n\nmodel.add(keras.layers.Conv2D(128,(3,3),activation=\"relu\",padding=\"same\"))\nmodel.add(keras.layers.Conv2D(128,(3,3),activation=\"relu\",padding=\"same\"))\nmodel.add(keras.layers.MaxPooling2D(3,3))\n\nmodel.add(keras.layers.Conv2D(256,(3,3),activation=\"relu\",padding=\"same\"))\nmodel.add(keras.layers.Conv2D(256,(3,3),activation=\"relu\",padding=\"same\"))\n\nmodel.add(keras.layers.Flatten())\n\nmodel.add(keras.layers.Dense(512,activation=\"relu\"))\nmodel.add(keras.layers.Dropout(0.5))\n\nmodel.add(keras.layers.Dense(29,activation=\"softmax\"))\n\nopt = keras.optimizers.Adam(learning_rate=0.0001)\nmodel.compile(optimizer=opt,loss=\"sparse_categorical_crossentropy\",metrics=['accuracy'])\nmodel.summary()","ba8c54ac":"x_train = np.array(x_train)\ny_train = np.array(y_train) \nx_test = np.array(x_test)\ny_test = np.array(y_test)\nhistory = model.fit(x_train,\n          y_train,\n          epochs=10,\n          validation_data = (x_test,y_test))","c3c4f5cd":"plt.style.use('seaborn')\nplt.figure(figsize=(10,10))\nplt.plot(history.history['loss'], color='b', label=\"Training loss\")\nplt.plot(history.history['val_loss'], color='r', label=\"Validation loss\")\nplt.legend()\nplt.show()\n\nplt.figure()\n\nplt.figure(figsize=(8,8))\nplt.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nplt.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nplt.legend()\nplt.show()","3b42142d":"y_pred = np.argmax(model.predict(x_test),1)\nprint(\"Precision : {:.2f} %\".format(precision_score(y_pred,y_test,average='macro')))\nprint(\"Recall    : {:.2f} %\".format(precision_score(y_pred,y_test,average='macro')))\nprint(\"F1 Score  : {:.2f} %\".format(precision_score(y_pred,y_test,average='macro')))","239559e0":"<h1>Model Evaluation<\/h1>"}}