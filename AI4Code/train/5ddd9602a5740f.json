{"cell_type":{"0be69290":"code","66accefe":"code","51ab7472":"code","1d776167":"code","33b0aa2d":"code","693cc92c":"code","6de2831e":"code","a1686aa9":"code","b77bb664":"code","5cba32b9":"code","21b95973":"code","77e8bcc4":"code","82a721bb":"code","7274b842":"code","da4df80d":"code","910258a5":"code","ffd9cbf2":"code","2373fd4f":"markdown","afc49008":"markdown","0f5ca158":"markdown","2b51de25":"markdown","308a596a":"markdown"},"source":{"0be69290":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","66accefe":"df = pd.read_csv('..\/input\/heights-and-weights\/data.csv')\ndf.head()","51ab7472":"df.info()","1d776167":"df.describe()","33b0aa2d":"df.isnull().sum()","693cc92c":"sns.pairplot(df)","6de2831e":"# Basically, we want to figure out how to create this line\nsns.regplot(x='Height',y='Weight',data=df)","a1686aa9":"x = df['Height']\ny = df['Weight']","b77bb664":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)\n","5cba32b9":"# Returns highest order coef first!\nnp.polyfit(x_train,y_train,1)","21b95973":"def linear_model(future_height):\n    return 61.47893258 * future_height +  -39.19981742","77e8bcc4":"predictions = x_test.apply(linear_model)","82a721bb":"plt.scatter(x_test,y_test)\nplt.plot(x_test, predictions, color='r')\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.show()","7274b842":"future_height = 1.67\nlinear_model(future_height)","da4df80d":"from sklearn.metrics import mean_absolute_error, mean_squared_error","910258a5":"mae = mean_absolute_error(y_test, predictions)\nmae","ffd9cbf2":"rmse = np.sqrt(mean_squared_error(y_test, predictions))\nrmse","2373fd4f":"# Let's go ahead and start solving: $$y=mx+b$$","afc49008":"# Now we created our model, let's use it for predicting some future height data","0f5ca158":"# Least  Squares Line","2b51de25":"# We can use np.polyfit for simple regression instead of using sklearn, use help(np.polyfit) for more\n\n# Basically this method accepts x,y and degreee of model trying to fit and returns the coefficients (highest order first)","308a596a":"# **IMPORTS**"}}