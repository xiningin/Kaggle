{"cell_type":{"71a73739":"code","0dfb3152":"code","0f281b74":"code","2e0a0a58":"code","9433710a":"code","5cf44dfe":"code","5a042a79":"code","e3a89f28":"code","992ecd71":"code","01a865c0":"code","1a31a7b8":"code","792e4d6e":"code","38308ae1":"code","874dc33b":"code","5ab31a0f":"code","da810813":"code","b832319a":"code","1aad2829":"code","2ac8a2b2":"code","8ed0ad5a":"code","f4ce5573":"code","3443b44b":"code","1e46e433":"code","4db3d7c3":"code","712b73ea":"code","7a388289":"code","5562d434":"code","09662891":"code","a45d98fe":"code","b547c277":"code","0ae26c8d":"code","22032445":"code","6e68382d":"code","28ade434":"code","97f5844f":"code","248f0ad1":"code","c8d17e06":"code","41ff5564":"code","d952cc33":"markdown","4277d77c":"markdown","4ff315f2":"markdown","a801756f":"markdown","69ccb754":"markdown","4a172306":"markdown","b5d14609":"markdown"},"source":{"71a73739":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom numpy import arange\nimport math\nimport random\nimport seaborn as sns\nfrom pprint import pprint","0dfb3152":"data = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')","0f281b74":"data.dtypes","2e0a0a58":"data.info()","9433710a":"print(data.head())","5cf44dfe":"data.describe()\n","5a042a79":"print(data.columns)","e3a89f28":"#Changing datatype and declaring columns which are essential\ndata['url']= data['url'].astype(str)\ndata['votes']= data['votes'].astype(int)\nessential_columns=['name', 'rate', 'location', 'rest_type', 'cuisines', 'approx_cost(for two people)']","992ecd71":"#Function for turning string data to binary data\ndef Yes_or_No(value):\n    if(value=='Yes'):\n        return 1\n    if(value=='No'):\n        return 0\n","01a865c0":"#Converting String Data to Binary Data for Online Order Column\ndata['online_order']=data.online_order.apply(Yes_or_No)\ndata['book_table']=data.book_table.apply(Yes_or_No)","1a31a7b8":"#Function for removing comma which are unnecessary\ndef remove_comma(value):\n    value= value.replace(\",\",\"\")\n    value= value.replace(\"nan\",\"0\")\n    return value\n\n#Removing comma present in cost price (i.e 1,300)\ndata['approx_cost(for two people)']= data['approx_cost(for two people)'].astype(str).apply(remove_comma)\n# data['approx_cost(for two people)']=data['approx_cost(for two people)'].fillna(0)\ndata['approx_cost(for two people)']= data['approx_cost(for two people)'].astype(int)\n","792e4d6e":"#Function to convert collection of words to list object \ndef split_words(words):\n    words= str(words).replace(\", \",\",\")\n    words = str(words).split(',')\n    return (words) \n\ndata['dish_liked'] = data['dish_liked'].apply(split_words)\ndata['cuisines'] = data['cuisines'].apply(split_words)","38308ae1":"#Function to clean data in ratings column\ndef remove_rating_extras(string):\n    if string is None:\n        return 0\n    elif string!=0:\n        return(float(str(string)[0:3]))\n\ndata.rate.replace(to_replace='NEW', value=np.nan, inplace=True)\ndata.rate.replace(to_replace='-', value=np.nan, inplace=True)\ndata.rate.replace(to_replace=[None], value=np.nan, inplace=True)\ndata['rate']=data.rate.fillna(0)\ndata['rate']=data.rate.apply(remove_rating_extras)\n# data.rate.apply(remove_rating_extras)","874dc33b":"#Checking for the most rated restaurant in Bangalore\nprint([i for i in sorted(data[data.rate==4.9].name.unique())])","5ab31a0f":"#Checking for Maximum & Minimum Rating\nprint(\"Maximum Rating {0} Minimum rating {1}\".format(max(data.rate), min(data.rate))) \n\n#Checking for Maximum & Minimum Cost\nprint(\"Maximum Cost {0} Minimum Cost {1}\".format(max(data['approx_cost(for two people)']), min(data[data['approx_cost(for two people)']!=0]['approx_cost(for two people)']))) \n\n#Visualizing the distribution of restaurant ratings \ndata.hist(column='rate',bins=7)\n\n#Visualizing the distribution of average cost  of restaurant\ndata.hist(column='approx_cost(for two people)', bins=12)","da810813":"#1.Average Cost of Dining in Bangalore\n\n#Creating a new sub dataframe to leave the original dataset untampered\naverage_cost = (data[data['approx_cost(for two people)']!=0]['approx_cost(for two people)']).mean()\naverage_rating = (data[data['rate']!=0]['rate']).mean()\n\n#Creating a variable to find min and max cost \nmin_cost=min(data[data['approx_cost(for two people)']!=0]['approx_cost(for two people)'])\nmax_cost=max(data[data['approx_cost(for two people)']!=0]['approx_cost(for two people)'])\n\n#Printing the data which is obtained\nprint(\"Average Cost of Dining in Bangalore: {0}\".format(int(average_cost)))\nprint(\"Minimum dining cost for two: {0}\".format(min_cost))\nprint(\"Maximum dining cost for two: {0}\".format(max_cost))","b832319a":"#2.Average cost of dining in a good rated restaurant\n\n#Creating a list containg various rating - 2, 2.5, 3, 3.5....4.8\nfinal_rating_list= list(arange(2.0, 5.0, 0.5))\nfinal_rating_list.append(4.8)\n\n#Initializing empty dictionary to store average dining cost of restaurant based on rating\nrating_to_cost = {}\n\n#Adding rating and corresponding cost of eating in the restaurant to the dictionary\nfor rating in final_rating_list:\n    average_cost_in_rated_rest = (data[data['rate']>=rating]['approx_cost(for two people)']).mean()\n    rating_to_cost[rating]= int(average_cost_in_rated_rest)\n    #print(\"Average Cost of Dining in a {0} rating restaurant: {1}\".format(rating, int(average_cost_in_rated_rest)))\n\n#Creating axis values for plotting the points\nx_axis_values = list(arange(2.0, 5.0, 0.5))\ny_axis_values=[]\n\nfor rating in x_axis_values:\n    value=(data[data['rate']>=rating]['approx_cost(for two people)']).mean()\n    y_axis_values.append(int(value))\n    \n#Plotting the graph - Line Graph\ncost_plotting= list(rating_to_cost.values())\nplt.plot(final_rating_list, cost_plotting)\n\n#Plotting the Points\/Values\nfor i,j in zip(x_axis_values,y_axis_values):\n    plt.plot(i, j, \"-o\")\n    plt.annotate(str(j),xy=(i-0.1 ,j+17))\n\n#Axes Values and title\nplt.title('Rating Vs Cost of Restaurants')\nplt.xlabel('Rating of Restaurant')\nplt.ylabel('Average Dining Cost for two')\nplt.xticks(list(arange(2.0, 5.5, 0.5)))\nplt.yticks(list(arange(500, 1400, 100)))\n\nplt.show()","1aad2829":"#2B. Number of Restaurants with corresponding rating\n\n#Creating a new rating list with new differnece of 0.1\nrating_list = np.round(np.arange(2, 5, 0.1),2)\nrating_count = []\n\n#Counting number of restaurant in each rating \nfor i in rating_list:\n    rating_count.append(data[data['rate']==i].rate.count())\n    #print(i, rating_count)\n\n\n#Plotting the Graph\nplt.plot(rating_list, rating_count)\n\n#Axes Values and title\nplt.title('Number of Restaurants with corresponding rating')\nplt.xlabel('Rating of Restaurant')\nplt.ylabel('Number of Restaurants')\nplt.xticks(list(arange(2.0, 5.5, 0.5)))\nplt.yticks(list(arange(0, 5000, 500)))\n\nplt.show()","2ac8a2b2":"#3. Which Cuisine dominate Bangalore\n\n#Emplty dictionary for storing storing cuisine and total number of restaurant with the cuisine\ncuisines = {}\n\n#Function to append storing cuisine and total number of restaurant with the cuisine to the dictionary\ndef add_cuisines(element_list):\n    for element in element_list:\n        element = element.strip()\n        #Increasing the count of value when the cuisine is already present in dictionary\n        if element in cuisines.keys():\n            cuisines[element] = cuisines[element]+1\n        #Appending the cuisine to dictionary if it is not already present in the dictionary\n        else:\n            cuisines[element] = 1\n    \n#Calling the function to count the restaurant count with respect to cuisine\ndata.cuisines.apply(add_cuisines)\n\n#Sorting and storing the top and bottom 15 cuisines\ntop_15_cuisines = dict(sorted(cuisines.items(), key=lambda x: x[1], reverse=True)[15::-1])\nbottom_15_cuisines = dict(sorted(cuisines.items(), key=lambda x: x[1], reverse=True)[-15:])\n\n#Creating Key Value list to store values from the dictionary\nkeys =[]\nvalues =[]\nplotting_point=[]\n\n#Appending the cuisine to key list\nfor key in top_15_cuisines.keys():\n    keys.append(key)\n\n#Appending the count to value list\nfor value in top_15_cuisines.values():\n    values.append(value)\n    plotting_point.append(' '+str(round(value*100\/len(data.cuisines),2))+'%')\n    ","8ed0ad5a":"#Choosing random Colors for the ploting of Cuisine count\nall_colors = list(plt.cm.colors.cnames.keys())\nc = random.choices(all_colors, k=len(keys))\n\n#Plotting the Cuisines that dominate Bangalore\nplt.figure(figsize=(16,5), dpi= 80)\nplt.scatter(values, keys, color=c)\nplt.hlines(xmin=0, xmax=values, y=keys, color=c, alpha=0.7, linewidth=2)\n\n#Plotting\/ Annotating the Points\/Values\nfor i,j,k in zip(values, keys, plotting_point):\n    plt.plot(i, j, \"-o\")\n    plt.annotate(str(k),xy=(i, j))\n\n# Decoration\nplt.title('Cusine Dominance in Bangalore', fontsize=22)\nplt.xlabel('Cuisines')\nplt.ylabel('Percentage of Restaurant listed')\nplt.plot()","f4ce5573":"#4.Which cuisine of restaurant is cost effective and costly \n\n#Breaking the main datafrmae into subdataframe containing Cuisine and Cost\ncuisine_break = data.explode('cuisines')[['name','cuisines','approx_cost(for two people)', 'rate']].reset_index()\ncuisine_break = cuisine_break.drop(['index'], axis=1)\ncuisine_break.cuisines = cuisine_break['cuisines'].str.strip()\n# cuisine_break = (cuisine_break[cuisine_break['cuisines'].isin(keys)])\n\n#Finding Mean Cost for two in different cuisine\nmean_cost_per_cuisine = cuisine_break.drop(['name'], axis=1)\n#Grouping the rows based on cuisine and finding average values\nmean_cost_per_cuisine = mean_cost_per_cuisine.groupby('cuisines').mean()\nmean_cost_per_cuisine['approx_cost(for two people)'] = mean_cost_per_cuisine['approx_cost(for two people)'].astype(int)\n#Sorting the dataframe\nmean_cost_per_cuisine = mean_cost_per_cuisine.sort_values('approx_cost(for two people)', ascending=False)\n\n#Appending Cuisines to one dataframe for Visualization- Only top 5, middle 5 and last 6\nmean_cost_per_cuisine_graph = mean_cost_per_cuisine.head(5)\nmean_cost_per_cuisine_graph = mean_cost_per_cuisine_graph.append(mean_cost_per_cuisine[mean_cost_per_cuisine.index.isin(keys[-5:])])\nmean_cost_per_cuisine_graph = mean_cost_per_cuisine_graph.append(mean_cost_per_cuisine.tail(6))\nmean_cost_per_cuisine_graph = mean_cost_per_cuisine_graph[mean_cost_per_cuisine_graph.index!='nan']\n\nprint(mean_cost_per_cuisine_graph)","3443b44b":"#Cuisines Vs Cost Graph\n\n#Plotting the mean_cost_per_cuisine_graph data\nplt.figure(figsize=(16,8), dpi= 80)\nplt.bar(mean_cost_per_cuisine_graph.index, mean_cost_per_cuisine_graph['approx_cost(for two people)'], color=c, width=0.5)\n\n#Annotating or Printing the value on the graph\nfor i, val in enumerate(mean_cost_per_cuisine_graph['approx_cost(for two people)'].values):\n    plt.text(i, val, int(val), horizontalalignment='center', verticalalignment='bottom', fontdict={'fontweight':500, 'size':12})\n\n# Decoration\nplt.gca().set_xticklabels(mean_cost_per_cuisine_graph.index, rotation=60, horizontalalignment= 'right')\nplt.title(\"Cuisines Vs Cost Graph\", fontsize=22)\nplt.ylabel('Cost in Rupees')\n# plt.ylim(100,2850)\nplt.show()\n","1e46e433":"#5.Location Vs Cost \n\n#Breaking the main datafrmae into subdataframe containing Rating and Cost\nLocation_data = data.filter(['listed_in(city)', 'approx_cost(for two people)', 'rate'])\nLocation_data['total_restaurant'] = 1\n#Using groupby to create subdataframe with aggregate functionality\nLocation_data= Location_data.groupby('listed_in(city)').agg({'approx_cost(for two people)':'mean',\n                                                             'total_restaurant':'sum',\n                                                             'rate':'mean'\n                                                            })\n#Rounding off the rating column\nLocation_data.rate = np.round(Location_data.rate,2)\nLocation_data =Location_data.sort_values('approx_cost(for two people)', ascending=False)\n#Changing datatype of cost column\nLocation_data['approx_cost(for two people)'] = Location_data['approx_cost(for two people)'].astype(int)\n#Sorting the dataframe\nLocation_data= Location_data.sort_values('approx_cost(for two people)', ascending=True)\n\nprint(Location_data.total_restaurant)","4db3d7c3":"# Diverging Dot Plot for Visualizing Location Vs Rating \n\n#Setting green color for restaurants that more than average cost of dining and red for the lesser cost\nLocation_data['colors'] = ['red' if  x< average_cost else 'darkgreen' for x in Location_data['approx_cost(for two people)']]\n\n# Drawing the plot with the data\nplt.figure(figsize=(10,14), dpi= 80)\nplt.scatter(Location_data['approx_cost(for two people)'], Location_data.index, s=450, alpha=.6, color=Location_data.colors)\n#Annotating\nfor x, y, tex in zip(Location_data['approx_cost(for two people)'], Location_data.index, Location_data['approx_cost(for two people)']):\n    t = plt.text(x, y, round(tex, 1), horizontalalignment='center', \n                 verticalalignment='center', fontdict={'color':'white'})\n\n\n# Decorations\n# Lighten borders\nplt.gca().spines[\"top\"].set_alpha(.3)\nplt.gca().spines[\"bottom\"].set_alpha(.3)\nplt.gca().spines[\"right\"].set_alpha(.3)\nplt.gca().spines[\"left\"].set_alpha(.3)\n# plt.yticks(df.index, df.cars)\nplt.title('Diverging Dotplot of Average dining cost for two in different location', fontdict={'size':20})\nplt.xlabel('Price in Rupees')\nplt.grid(linestyle='--', alpha=0.5)\n# plt.xlim(-2.5, 2.5)\nplt.show()","712b73ea":"#6.Location Vs Rating\n\n#Breaking the main datafrmae into subdataframe containing Rating and Cost\nLocation_rating_data = data.filter(['listed_in(city)', 'rate'])\nLocation_rating_data= Location_rating_data.groupby('listed_in(city)').agg({'rate':'mean'})\n\nLocation_data= Location_data.sort_values('rate', ascending=True)\n\nprint(Location_data)","7a388289":"# Diverging Dot Plot for Visualizing Location Vs Rating \n\n#Setting green color for restaurants that more than average rating and red for the lesser rating than average\nLocation_data['colors'] = ['red' if  x< average_rating else 'darkgreen' for x in Location_data['rate']]\n\n# Drawing the plot\nplt.figure(figsize=(10,14), dpi= 80)\nplt.scatter(Location_data['rate'], Location_data.index, s=450, alpha=.6, color=Location_data.colors)\n#Annotate\nfor x, y, tex in zip(Location_data['rate'], Location_data.index, Location_data['rate']):\n    t = plt.text(x, y, round(tex, 2), horizontalalignment='center', \n                 verticalalignment='center', fontdict={'color':'white'})\n\n# Decorations\n# Lighten borders\nplt.gca().spines[\"top\"].set_alpha(.3)\nplt.gca().spines[\"bottom\"].set_alpha(.3)\nplt.gca().spines[\"right\"].set_alpha(.3)\nplt.gca().spines[\"left\"].set_alpha(.3)\n\n# plt.yticks(df.index, df.cars)\nplt.title('Diverging Dotplot of Rating Vs Location', fontdict={'size':20})\nplt.xlabel('Rating')\nplt.grid(linestyle='--', alpha=0.5)\n# plt.xlim(-2.5, 2.5)\nplt.show()","5562d434":"#7. Most Underated and Overrated restaurant\n\n#Creating a dictionary for rating vs cost \nrating_cost_dict= pd.Series(cost_plotting,index=final_rating_list).to_dict()\nessential_columns.append('price_difference_from_mean')\nfinal_rating_list = np.asarray(final_rating_list)\n\n#Finding difference between the price of the restaurant from the average price\ndef find_difference(price):\n    idx = (np.abs(final_rating_list - price)).argmin()\n    row_rating = final_rating_list[idx]\n    return rating_cost_dict[row_rating] - price\n\n#Filtering data with condition min cost more than 100 and minimum rating of 2\ndata=data[(data['approx_cost(for two people)']>100) &  (data['rate']>2)]\ndata['price_difference_from_mean']= data['approx_cost(for two people)'].apply(find_difference)\n\n#Finding most expensive and most cheapest restaurants\ntop_5_expensive_restaurants= (data[essential_columns].sort_values(by=['price_difference_from_mean']).head(10)).name.unique()\ntop_5_value_for_money_restaurants = (data[essential_columns].sort_values(by=['price_difference_from_mean', 'rate'], ascending=False).head(20)).name.unique()\n\nprint(\"Best Value for Money Restaurants: \", top_5_value_for_money_restaurants)\nprint()\nprint(\"Expensive yet best Restaurants: \", top_5_expensive_restaurants)","09662891":"#8.Most favorite Cuisine and Food of Customers\n\n#Creating a dictionary to hold the count of dishes based on the presence of dish in the best dishes column\ndishes_set = {}\n\n#Funtion to keep the dishes count\ndef find_favt_dish(dishes):\n    for dish in dishes:\n        if dish in dishes_set.keys():\n            dishes_set[dish]+=1\n        else:\n            dishes_set[dish]=1\n\ndata.dish_liked.apply(find_favt_dish)\n#Deleting nan value\ndel dishes_set['nan']\n#Sorting the dataframe \nliked_dishes_list = (sorted(dishes_set.items(), key=lambda x: x[1], reverse=True))\n\n","a45d98fe":"#Creating a base dictionary for the counting the favorite dish\ntop_dishes ={'Biryani':0, 'Pasta':0, 'Burgers':0, 'Coffee':0, 'Pizza':0, 'Sandwiches':0, 'Fried Rice':0 , 'Chocolate':0, 'Noodles':0, 'Paratha':0, 'Beer':0, 'Tea':0, 'Thali':0, 'Tandoori ':0, 'Sizzlers':0, 'Fries':0, 'Dosa':0, 'Shawarma':0, 'Mojito':0,'Cocktails':0, 'Naan':0, 'Salad':0, 'Waffles':0}\n\n#Increamenting the value of dish on its other presence \nfor dish in dishes_set.keys():\n    for top_dish in top_dishes.keys():\n        if str(top_dish) in str(dish):\n            top_dishes[top_dish]+=dishes_set[dish]\n#             print(top_dish, \" : \", top_dishes[top_dish])\n\n#Sorting the dishes dataframe and displaying the best\ntop_dishes = (sorted(top_dishes.items(), key=lambda x: x[1], reverse=True))\npprint(top_dishes)","b547c277":"#9.Best Dishes in each Cuisine  \n\n#Funtion to count the dish count in the data passed which is data from each cuisine\ndef find_favt_dish_in_cuisine(rest_data):\n    if (cuisine[0] in rest_data.cuisines):\n        for dish in rest_data.dish_liked:\n            #Increasing the count value if the dish is already present\n            if dish in dishes_in_cuisine_set.keys():\n                dishes_in_cuisine_set[dish]+=1\n            #Creating a new entry of dish if it is not present already\n            else:\n                dishes_in_cuisine_set[dish]=1\n                \n#Converting dict to list\ntop_15_cuisines = (sorted(top_15_cuisines.items(), key=lambda x: x[1], reverse=True))\n\n#Iterating through top 5 cuisines\nfor cuisine in (top_15_cuisines[0:5]):\n    #Creating a new dictionary to contain the dishes and its count for each cuisine\n    dishes_in_cuisine_set = {}\n    #Calling the function to calculate the count of each dishes in the cuisine\n    data.apply(find_favt_dish_in_cuisine, axis=1)\n    #Deleting nan value from dictionary\n    del dishes_in_cuisine_set['nan']\n    #Printing Cuisine and the dishes count in each cuisine\n    print('*'*75, '\\n', cuisine[0])\n    print((sorted(dishes_in_cuisine_set.items(), key=lambda x: x[1], reverse=True))[:5])","0ae26c8d":"#10.Cuisine Vs Locality\n\n#Creating a new list for having the top cuisine\ntop_cuisines = list()\n[top_cuisines.append(i[0]) for i in top_15_cuisines]\n\n#initializing a new column with cuisine name in location dataframe\nfor cuisine in top_cuisines:\n    Location_data[cuisine]=0\n\n#Location Vs Cuisine dataframe\n\n#Iterating through various location\nfor location in Location_data.index:\n    #Iterating through the cuisines based in location location\n    for row in data[data['listed_in(city)']==location].cuisines:\n        #Iterating through each cuisine present in all cuisine\n        for cuisine in row:\n            #Checking if the cuisine is in the top 15 cuisine\n            if cuisine in top_cuisines:\n                #Increasing the cuisine column value for corresponding location \n                Location_data.loc[location, cuisine]+=1\n\n#Converting list into dictionary\ntop_15_cuisines=dict(top_15_cuisines)\n\n#Converting the values into percentage\nfor cuisine in top_cuisines:\n    Location_data[cuisine] = Location_data[cuisine]*100\/top_15_cuisines[cuisine]\n\n#Dropping of columns that are not used for visualizing\nLocation_data = Location_data.drop(['approx_cost(for two people)', 'total_restaurant', 'rate', 'colors'], axis=1)","22032445":"#Plotting heat map of Location Vs Cuisine \nfig, ax = plt.subplots(figsize=(10,10))         \nsns.heatmap(Location_data, annot=True, linewidths=.5, ax=ax, cmap=\"BuPu\")  \nplt.show()","6e68382d":"#11.Average rating of cuisines \n\n#Creating a dataframe with cuisine and average rating of it\ncuisine_vs_rating = (cuisine_break.drop(['name', 'approx_cost(for two people)'], axis=1))\ncuisine_vs_rating = (np.round(cuisine_vs_rating.groupby('cuisines').mean(),2))\n\n#Including the cuisine count to the dataframe\ncuisine_count=((cuisine_break['cuisines'].value_counts()))\ncuisine_vs_rating['total_count'] = cuisine_count[cuisine_vs_rating.index]\n\n#Filtering cuisine with atleast 750 restaurant presence \ncuisine_vs_rating = cuisine_vs_rating.drop('nan')\ncuisine_vs_rating = cuisine_vs_rating[cuisine_vs_rating.total_count>750]\n\nprint((cuisine_vs_rating))","28ade434":"#Sorting the cuisine_vs_rating dataframe\ncuisine_vs_rating = cuisine_vs_rating.sort_values('rate', ascending=False)\nprint(cuisine_vs_rating)","97f5844f":"#Bar plot of Cuisine Vs Rating\n\nplt.figure(figsize=(12,6), dpi= 80)\nsns.barplot(x=cuisine_vs_rating.index, y=cuisine_vs_rating.rate)\nplt.gca().set_xticklabels(cuisine_vs_rating.index, rotation=90, horizontalalignment= 'right')\nplt.ylim(3.2,4.2)\n\n\n#Decorators\nplt.title('Bar Plot of Cuisine Vs Rating', fontdict={'size':20})\nplt.xlabel('Cuisine')\nplt.ylabel('Rating')\n\n#Annotate\nfor i, val in enumerate(cuisine_vs_rating.rate):\n    plt.text(i, val, val, horizontalalignment='center', verticalalignment='bottom', fontdict={'fontweight':500, 'size':8})\n","248f0ad1":"#12.Largest Chain of restaurant\n\n#Dictionary for storing restaurant chain and their restaurant number\nrestaurant_count = {}\n\n#iterating through restaurant names\nfor restaurant in data.name:\n        #Increasing restaurant count if the restaurant was added to dict previously\n        if restaurant in restaurant_count.keys():\n            restaurant_count[restaurant]+=1\n        #Creating a new entry to dict with restaurant name if not present already\n        else:\n            restaurant_count[restaurant]=1\n\n#Sorting the restaurant count dictionary\ntop_restaurant_by_count = ((sorted(restaurant_count.items(), key=lambda x: x[1], reverse=True))[:11])\nprint(top_restaurant_by_count)","c8d17e06":"#Creating a new dataframe to store branch count, avg rate and avg cost\nrestaurant_branch_count = pd.DataFrame(columns = ['name', 'branch count', 'avg cost', 'avg rate'])\n\n#Iterating through rows of the dataframe\nfor row in top_restaurant_by_count:\n    #Appending restaurant name, branch count, avg price and avg rating to dataframe\n    avg_price = (np.round(data[data['name']==row[0]]['approx_cost(for two people)'].mean(),0))\n    avg_rating = (np.round(data[data['name']==row[0]]['rate'].mean(),2))\n    new_row = {'name': row[0], 'branch count': row[1], 'avg cost': avg_price, 'avg rate': avg_rating}\n    restaurant_branch_count = restaurant_branch_count.append(new_row, ignore_index = True)\n    \nprint(restaurant_branch_count)","41ff5564":"from matplotlib.pyplot import figure\n\nplt.figure(figsize=(10, 5), dpi=80)\n\n#Creating list of random colors\nc = random.choices(all_colors, k=len(restaurant_branch_count['avg cost']))\n\n#Creating a scatter plot\nplt.scatter(restaurant_branch_count['avg cost'], restaurant_branch_count['avg rate'], color=c)\n\n#Creating list out of dataframe column\navg_cost = restaurant_branch_count['avg cost']\navg_rate = restaurant_branch_count['avg rate']\n\n#Annotate\nfor i,j, label in zip(restaurant_branch_count['avg cost'], restaurant_branch_count['avg rate'], restaurant_branch_count['name']):\n    plt.plot(i, j, \"-o\")\n    plt.annotate(label,xy=(i-10 ,j-0.075))\n\n#plotting best fit line\nsns.regplot(restaurant_branch_count['avg cost'], restaurant_branch_count['avg rate'])\n    \n# # Decoration\nplt.title(\"Top Restaurant Chain Cost Vs Rating\", fontsize=22)\nplt.xlabel('Cost in Rupees')\nplt.ylabel('Ratings')\nplt.xlim(200,900)\nplt.ylim(3,4.5)\nplt.show()","d952cc33":"**3.Data Cleaning**","4277d77c":"****Thank you for making it all through this notebook. If you find it good or helpful please give the notebook a upcount ****","4ff315f2":"**4.Uncovering Facts from Data and Visualizing it**","a801756f":"**1. Importing the Dataset**","69ccb754":"Zomato Bangalore Restaurants Analysis","4a172306":"**Since restaurant list same dish in different category or flavor. I have created a base dictionary with the damous dishes to find the real count. Example restaurant list biryani in many form - Chicken Biryani, Mutton Biryani, Veg Biryani etc**","b5d14609":"**2.Basic Data Analysis**"}}