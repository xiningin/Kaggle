{"cell_type":{"4b1d5399":"code","4db882b2":"code","368149ee":"code","e3311885":"code","0fbefb4a":"code","d73717a3":"code","125f6b91":"code","0d1633cc":"code","7bfa6174":"code","a68bbae5":"code","7c566112":"markdown","df5aa846":"markdown","328afc0d":"markdown","c2c5d65d":"markdown"},"source":{"4b1d5399":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nimport torchvision\nimport gc\n\nimport time\nfrom torchvision import transforms,models,datasets\nimport torch\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torch.optim as optim\nimport torch.nn as nn\nfrom collections import OrderedDict\nfrom PIL import Image\nimport seaborn as sns\nimport helper\nimport numpy as np \nimport pandas as pd \nimport json\nimport os\nos.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"\nprint(os.listdir(\"..\/input\/coriandr-vs-parsley\/Coriander-vs-Parsley-master\"))","4db882b2":"train_transforms=transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], \n                             [0.229, 0.224, 0.225])\n    ])\ntest_transforms=transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], \n                             [0.229, 0.224, 0.225])\n    ])\ntrain_datasets = datasets.ImageFolder('..\/input\/coriandr-vs-parsley\/Coriander-vs-Parsley-master\/train',transform=train_transforms)\ntest_datasets = datasets.ImageFolder('..\/input\/coriandr-vs-parsley\/Coriander-vs-Parsley-master\/test',transform=test_transforms)\n\ntrainloader=torch.utils.data.DataLoader(train_datasets, batch_size=64, shuffle=True)\ntestloader=torch.utils.data.DataLoader(test_datasets, batch_size=64, shuffle=True)\nprint(\"train size: \" , len(trainloader.dataset))\nprint(\"test size: \" , len(testloader.dataset))\n","368149ee":"def imshow(image, ax=None, title=None, normalize=True):\n  \"\"\"Imshow for Tensor.\"\"\"\n  if ax is None:\n      fig, ax = plt.subplots()\n  image = image.numpy().transpose((1, 2, 0))\n\n  if normalize:\n      mean = np.array([0.485, 0.456, 0.406])\n      std = np.array([0.229, 0.224, 0.225])\n      image = std * image + mean\n      image = np.clip(image, 0, 1)\n\n  ax.imshow(image)\n  ax.spines['top'].set_visible(False)\n  ax.spines['right'].set_visible(False)\n  ax.spines['left'].set_visible(False)\n  ax.spines['bottom'].set_visible(False)\n  ax.tick_params(axis='both', length=0)\n  ax.set_xticklabels('')\n  ax.set_yticklabels('')\n\n  return ax\ndata_iter = iter(trainloader)\nimages, labels = next(data_iter)\nimshow(images[0])\nprint(labels[0])\n","e3311885":"# we will use a pretrained model and we are going to change only the last layer \nmodel = models.densenet201(pretrained=True)\nfor param in model.parameters():\n  param.requires_grad= True","0fbefb4a":"print(model)","d73717a3":"classifier  = nn.Sequential(nn.Linear(1920, 256),\n                          nn.ReLU(),\n                          nn.Linear(256, 2),\n                          nn.LogSoftmax(dim = 1))\nmodel.classifier=classifier\n","125f6b91":"if torch.cuda.is_available():\n  model.to('cuda')\n  device='cuda'\nelse:\n    model.to('cpu')\n    device='cpu'\nprint(device)\ncriterion = nn.NLLLoss()\noptimizer = optim.Adam(model.classifier.parameters(), lr=0.00001,weight_decay=0)\ntest_loss_min = 99 #just a big number I could do np.Inf\nsave_file='mymodel.pth'","0d1633cc":"epochs = 200\ntrain_losses = [] \ntest_losses = []\nprint_every = 10\nrunning_loss = 0\nfor epoch in range(epochs):\n    time0=time.time()\n    model.train()\n    for inputs, labels in trainloader:\n        # Move inp  ut and label tensors to the default device\n        inputs, labels = inputs.to(device), labels.to(device)\n        optimizer.zero_grad()\n        prediction = model.forward(inputs)\n        loss = criterion(prediction, labels)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n    \n    else:\n        train_losses.append(running_loss\/(len(trainloader)))\n        running_loss = 0\n        if ((epoch % print_every) == 0):\n            test_loss = 0\n            accuracy = 0\n            model.eval()\n            with torch.no_grad():\n                for inputs, labels in testloader:\n                    inputs, labels = inputs.to(device), labels.to(device)\n                    logps = model.forward(inputs)\n                    batch_loss = criterion(logps, labels)\n                    test_loss += batch_loss.item()\n\n                        # Calculate accuracy\n                    ps = torch.exp(logps)\n                    top_p, top_class = ps.topk(1, dim=1)\n                    equals = top_class == labels.view(*top_class.shape)\n                    accuracy += torch.mean(equals.type(torch.FloatTensor)).item()\n                total_loss=test_loss\/len(testloader)        \n                print(f\"Epoch {epoch+1}\/{epochs}.. \"\n                f\"Train loss: {running_loss\/(len(trainloader) * print_every):.3f}.. \"\n                f\"test loss: {test_loss\/len(testloader):.3f}.. \"\n                f\"test accuracy: {accuracy\/len(testloader):.3f}\")\n                time_total=time.time() - time0\n                print(\"time for this epoch: \",end=\"\")\n                print(time_total)\n#                 train_losses.append(running_loss\/(len(trainloader) * print_every))\n                test_losses.append(total_loss)\n                if (total_loss) <= test_loss_min:\n                    print('test loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(test_loss_min,total_loss))\n                    torch.save(model.state_dict(), save_file)\n                    test_loss_min = total_loss\n                running_loss = 0\n","7bfa6174":"plt.plot(train_losses)\n# plt.plot([k for k in range(0,epochs,print_every)],test_losses)\nplt.show()","a68bbae5":"del model\ndel testloader\ndel trainloader\ndel inputs\ndel labels\ntorch.cuda.empty_cache()","7c566112":"updating the last layer","df5aa846":"Hello, I am going to build a Deep learning model which will classify Coriander and Parsley","328afc0d":"training the model","c2c5d65d":"Plot a sample from the trainloader"}}