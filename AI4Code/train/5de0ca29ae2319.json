{"cell_type":{"3413f982":"code","7bb39e6f":"code","e000d5d9":"code","bcdac29d":"code","ccf313ed":"code","636440df":"code","2ce1c605":"code","ea0b9259":"code","0c764c26":"code","f1cc849a":"code","31c7c3f6":"code","40982b2e":"code","e93c9fae":"code","762e3bdf":"code","8ea84820":"code","4595f203":"code","691f11f8":"code","6d7ba592":"code","a2707706":"code","9433387f":"code","be74d667":"code","bf1f7313":"code","43757d1a":"code","400da86d":"code","d1dc49aa":"code","c66f40eb":"code","8cfc5ccf":"code","261313ca":"code","23148bf8":"code","41f858e4":"code","b197ba52":"code","6a9bc33b":"code","c57a6795":"code","5c0730b2":"code","93bd4fb4":"code","ea1a9458":"code","4119cb08":"code","2de0bf5f":"code","e0b13d0d":"code","abfb6bbd":"code","a6816afd":"code","299f8ff8":"code","68089a66":"code","1abc9bb5":"code","4e8d7191":"code","e83f5e54":"markdown","36341729":"markdown","3991a8c3":"markdown"},"source":{"3413f982":"import math\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nparameters = {'axes.grid': True}\nplt.rcParams.update(parameters)\n\nimport plotly as py\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.model_selection import GridSearchCV\nimport lightgbm as lgb\nimport xgboost as xgb\nimport optuna\nfrom optuna.samplers import TPESampler\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","7bb39e6f":"df = pd.read_csv('..\/input\/stock-prediction-wig20\/wig.csv')\ndf.head()","e000d5d9":"df.info()","bcdac29d":"df.describe()","ccf313ed":"fig = make_subplots(rows = 2, cols = 1)\nfig.add_trace(go.Ohlc(x = df['Data'], open = df['Otwarcie'], high = df['Najwyzszy'], low = df['Najnizszy'], close = df['Zamkniecie'],\n                      name = 'Price'), row = 1, col = 1)\nfig.update(layout_xaxis_rangeslider_visible = False)\nfig.update_layout(autosize = False, width = 1000, height = 800)\nfig.add_trace(go.Scatter(x = df['Data'], y = df['Wolumen'], name = 'Wolumen'), row = 2, col = 1)\nfig.show()","636440df":"result = seasonal_decompose(x = df['Zamkniecie'], period = 365, model = 'additive')","2ce1c605":"fig = make_subplots(rows = 4, cols = 1, x_title = 'Date')\nfig.add_trace(go.Scatter(x = df['Data'], y = result.observed, name = 'Observed'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = result.trend, name = 'Trend'), row = 2, col = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = result.seasonal, name = 'Seasonal'), row = 3, col = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = result.resid, name = 'Residual'), row = 4, col = 1)\nfig.update_layout(autosize = False, width = 1000, height = 1200)\nfig.show()","ea0b9259":"df['EMA_9'] = df['Zamkniecie'].ewm(9).mean().shift()\ndf['SMA_5'] = df['Zamkniecie'].rolling(5).mean().shift()\ndf['SMA_10'] = df['Zamkniecie'].rolling(10).mean().shift()\ndf['SMA_15'] = df['Zamkniecie'].rolling(15).mean().shift()\ndf['SMA_30'] = df['Zamkniecie'].rolling(30).mean().shift()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = df['Data'], y = df['EMA_9'], name = 'EMA 9'))\nfig.add_trace(go.Scatter(x = df['Data'], y = df['SMA_5'], name = 'SMA 5'))\nfig.add_trace(go.Scatter(x = df['Data'], y = df['SMA_10'], name = 'SMA 10'))\nfig.add_trace(go.Scatter(x = df['Data'], y = df['SMA_15'], name = 'SMA 15'))\nfig.add_trace(go.Scatter(x = df['Data'], y = df['SMA_30'], name = 'SMA 30'))\nfig.add_trace(go.Scatter(x = df['Data'], y = df['Zamkniecie'], name = 'Close', opacity = 0.2))\nfig.update_layout(autosize = False, width = 1000, height = 600)\nfig.show()","0c764c26":"def relative_strength_idx(df, n):\n    \n    delta = df['Zamkniecie'].diff()\n    price_up = delta.map(lambda x: 0 if x < 0 else x)\n    price_down = delta.map(lambda x: 0 if x > 0 else x)\n    roll_up = price_up.rolling(n).mean()\n    roll_down = price_down.abs().rolling(n).mean()\n    rs = roll_up \/ roll_down\n    rsi = 100.0 - (100.0 \/ (1.0 + rs))\n    \n    return rsi","f1cc849a":"df['RSI'] = relative_strength_idx(df, 20).fillna(0)","31c7c3f6":"fig = go.Figure()\nfig.add_traces(go.Scatter(x = df['Data'], y = df['RSI'], name = 'RSI', showlegend = True))\nfig.update_layout(autosize = False, width = 1000, height = 400)\nfig.show()","40982b2e":"EMA_12 = df['Zamkniecie'].ewm(span = 12, min_periods = 12).mean()\nEMA_26 = df['Zamkniecie'].ewm(span = 26, min_periods = 26).mean()\n\ndf['MACD'] = EMA_12 - EMA_26\ndf['MACD_signal'] = df['MACD'].ewm(span = 9, min_periods = 9).mean()","e93c9fae":"fig = make_subplots(rows = 2, cols = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = df['Zamkniecie'], name = 'Close'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = EMA_12, name = 'EMA 12'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = EMA_26, name = 'EMA 26'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = df['MACD'], name = 'MACD'), row = 2, col = 1)\nfig.add_trace(go.Scatter(x = df['Data'], y = df['MACD_signal'], name = 'Signal line'), row = 2, col = 1)\nfig.update_layout(autosize = False, width = 1000, height = 800)\nfig.show()","762e3bdf":"df['Zamkniecie'] = df['Zamkniecie'].shift(-1)","8ea84820":"df.isnull().sum()","4595f203":"df = df.iloc[33:]\ndf = df.iloc[:-1]\ndf.index = range(len(df))","691f11f8":"df.isnull().sum()","6d7ba592":"scaler = StandardScaler()\n\ndf_scaler = pd.DataFrame(scaler.fit_transform(df.drop('Data', axis = 1)), \n                         columns = df.drop('Data', axis = 1).columns)\ndf_scaler['Data'] = df['Data']","a2707706":"df_scaler.head()","9433387f":"test_size = 0.15\nvalid_size = 0.15\n\nvalid_split_idx = int(df_scaler.shape[0] * (1 - (valid_size + test_size)))\ntest_split_idx  = int(df_scaler.shape[0] * (1 - test_size))\n\ntrain_df = df_scaler.iloc[:valid_split_idx].copy()\nvalid_df = df_scaler.iloc[valid_split_idx + 1:test_split_idx].copy()\ntest_df = df_scaler.iloc[test_split_idx + 1:].copy()","be74d667":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = train_df['Data'], y = train_df['Zamkniecie'], name = 'Training'))\nfig.add_trace(go.Scatter(x = valid_df['Data'], y = valid_df['Zamkniecie'], name = 'Validation'))\nfig.add_trace(go.Scatter(x = test_df['Data'], y = test_df['Zamkniecie'], name = 'Test'))\nfig.update_layout(autosize = False, width = 1000, height = 500)\nfig.show()","bf1f7313":"df_scaler.columns","43757d1a":"X_train = train_df.loc[:, 'EMA_9':'MACD_signal']\ny_train = train_df['Zamkniecie']\n\nX_valid = valid_df.loc[:, 'EMA_9':'MACD_signal']\ny_valid = valid_df['Zamkniecie']\n\nX_test = test_df.loc[:, 'EMA_9':'MACD_signal']\ny_test = test_df['Zamkniecie']","400da86d":"X_train.shape, X_valid.shape, X_test.shape","d1dc49aa":"def objective(trial):\n    params = {'n_estimators': 2000,\n              'subsample': trial.suggest_discrete_uniform('subsample', 0.7, 0.9, 0.1),\n              'colsample_bytree': trial.suggest_discrete_uniform('colsample_bytree', 0.7, 0.9, 0.1),\n              'max_depth': trial.suggest_int(\"max_depth\", 5, 50, 15),\n              'reg_alpha': trial.suggest_int(\"reg_alpha\", 0, 60, 20),\n              'reg_lambda': trial.suggest_int('reg_lambda', 0, 60, 20),\n              'learning_rate': trial.suggest_loguniform('learning_rate', 0.05, 0.3)}\n        \n    model = lgb.LGBMRegressor(**params, random_state = 17, device = 'gpu')\n    \n    model.fit(X_train, y_train, eval_set = [(X_train, y_train), (X_valid, y_valid)], early_stopping_rounds = 100)\n    preds = model.predict(X_test)\n    score = np.sqrt(mean_squared_error(y_test, preds))\n    \n    return score","c66f40eb":"%%time\n\nstudy = optuna.create_study(direction = \"minimize\", sampler = TPESampler())\nstudy.optimize(objective, n_trials = 600)","8cfc5ccf":"params = study.best_params\nparams","261313ca":"best_score = study.best_value\nbest_score","23148bf8":"model = lgb.LGBMRegressor(**params, random_state = 17, device = 'gpu')\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","41f858e4":"print(f'RSME:                  {np.sqrt(mean_squared_error(y_test, y_pred)):0.6}')\nprint(f'Mean absolute error:   {mean_absolute_error(y_test, y_pred):0.6}')","b197ba52":"lgb.plot_importance(model)","6a9bc33b":"fig = make_subplots(rows = 2, cols = 1)\nfig.add_trace(go.Scatter(x = df_scaler['Data'], y = df_scaler['Zamkniecie'], name = 'True', marker_color = 'LightSkyBlue'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df_scaler.iloc[test_split_idx + 1:]['Data'], y = y_pred, name = 'Prediction',\n                         marker_color = 'MediumPurple'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df_scaler.iloc[test_split_idx + 1:]['Data'], y = y_test, name = 'True', marker_color = 'LightSkyBlue',\n                         showlegend = False), row = 2, col = 1)\nfig.add_trace(go.Scatter(x = df_scaler.iloc[test_split_idx + 1:]['Data'], y = y_pred, name = 'Prediction', marker_color = 'MediumPurple',\n                         showlegend = False), row = 2, col = 1)\nfig.show()","c57a6795":"df_scaler = df_scaler.iloc[2000:].copy()\ndf_scaler.head()","5c0730b2":"test_size = 0.15\nvalid_size = 0.15\n\nvalid_split_idx = int(df_scaler.shape[0] * (1 - (valid_size + test_size)))\ntest_split_idx  = int(df_scaler.shape[0] * (1 - test_size))\n\ntrain_df = df_scaler.iloc[:valid_split_idx].copy()\nvalid_df = df_scaler.iloc[valid_split_idx + 1:test_split_idx].copy()\ntest_df = df_scaler.iloc[test_split_idx + 1:].copy()","93bd4fb4":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = train_df['Data'], y = train_df['Zamkniecie'], name = 'Training'))\nfig.add_trace(go.Scatter(x = valid_df['Data'], y = valid_df['Zamkniecie'], name = 'Validation'))\nfig.add_trace(go.Scatter(x = test_df['Data'], y = test_df['Zamkniecie'], name = 'Test'))\nfig.update_layout(autosize = False, width = 1000, height = 500)\nfig.show()","ea1a9458":"df_scaler.columns","4119cb08":"X_train = train_df.loc[:, 'EMA_9':'MACD_signal']\ny_train = train_df['Zamkniecie']\n\nX_valid = valid_df.loc[:, 'EMA_9':'MACD_signal']\ny_valid = valid_df['Zamkniecie']\n\nX_test = test_df.loc[:, 'EMA_9':'MACD_signal']\ny_test = test_df['Zamkniecie']","2de0bf5f":"X_train.shape, X_valid.shape, X_test.shape","e0b13d0d":"%%time\n\nparameters = {'learning_rate': [0.001, 0.005, 0.01, 0.05, 0.1, 0.5], 'max_depth': [8, 10, 12, 15], \n              'gamma': [0.001, 0.005, 0.01, 0.05, 0.1, 0.5], 'tree_method': ['gpu_hist'], 'predictor': ['gpu_predictor'], \n              'sampling_method': ['gradient_based'], 'n_jobs': [-1]}\n\nmodel = xgb.XGBRegressor(random_state = 42)\nclf = GridSearchCV(model, parameters, verbose = 5, n_jobs = -1, scoring = 'neg_mean_squared_error')\nclf.fit(X_train, y_train, eval_set = [(X_train, y_train), (X_valid, y_valid)], early_stopping_rounds = 20)","abfb6bbd":"best_params = clf.best_params_\nbest_params","a6816afd":"score = clf.best_estimator_.score(X_test, y_test)\nscore","299f8ff8":"model = xgb.XGBRegressor(**best_params, random_state = 42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","68089a66":"print(f'RSME:                  {np.sqrt(mean_squared_error(y_test, y_pred)):0.6}')\nprint(f'Mean absolute error:   {mean_absolute_error(y_test, y_pred):0.6}')","1abc9bb5":"xgb.plot_importance(model)","4e8d7191":"fig = make_subplots(rows = 2, cols = 1)\nfig.add_trace(go.Scatter(x = df_scaler['Data'], y = df_scaler['Zamkniecie'], name = 'True', marker_color = 'LightSkyBlue'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df_scaler.iloc[test_split_idx + 1:]['Data'], y = y_pred, name = 'Prediction',\n                         marker_color = 'MediumPurple'), row = 1, col = 1)\nfig.add_trace(go.Scatter(x = df_scaler.iloc[test_split_idx + 1:]['Data'], y = y_test, name = 'True', marker_color = 'LightSkyBlue',\n                         showlegend = False), row = 2, col = 1)\nfig.add_trace(go.Scatter(x = df_scaler.iloc[test_split_idx + 1:]['Data'], y = y_pred, name = 'Prediction', marker_color = 'MediumPurple',\n                         showlegend = False), row = 2, col = 1)\nfig.show()","e83f5e54":"## EDA + Feature Engineering","36341729":"## LightGBM + Optuna","3991a8c3":"## XGBoost + GridSearchCV"}}