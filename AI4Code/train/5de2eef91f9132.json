{"cell_type":{"5552c673":"code","7ea34f2e":"code","de516eca":"code","dcf9192c":"code","118631e2":"code","76c33be9":"code","d1e30a33":"code","cc25e02e":"code","afd65289":"code","80d65d06":"code","098ade57":"code","e5c9abe0":"code","bac93aea":"markdown","631adede":"markdown","e613c31b":"markdown","6b2ab221":"markdown"},"source":{"5552c673":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ea34f2e":"from sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","de516eca":"train = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2022\/test.csv\")","dcf9192c":"X = train.drop([\"row_id\",\"target\"], axis = 1)\ny = train['target']","118631e2":"Xtr, Xval, ytr, yval = train_test_split(X, y, train_size = 0.8)\n\nmodel = ExtraTreesClassifier(n_estimators = 800, random_state = 0, n_jobs = -1)\nmodel.fit(Xtr, ytr)\n\ny_pred = model.predict(Xval) \naccuracy = accuracy_score(yval, y_pred) \nprint(\"Accuracy: %.6f\" % (accuracy))","76c33be9":"pred = model.predict(test.drop(\"row_id\", axis = 1))","d1e30a33":"test['target'] = pred\nfull_data = pd.concat([train, test])","cc25e02e":"X = full_data.drop([\"row_id\",\"target\"], axis = 1)\ny = full_data['target']","afd65289":"Xtr, Xval, ytr, yval = train_test_split(X, y, train_size = 0.8)\n\nmodel = ExtraTreesClassifier(n_estimators = 800, random_state = 0, n_jobs = -1)\nmodel.fit(Xtr, ytr)\n\ny_pred = model.predict(Xval) \naccuracy = accuracy_score(yval, y_pred) \nprint(\"Accuracy: %.6f%%\" % (accuracy))","80d65d06":"submission = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2022\/sample_submission.csv\")\nsubmission.head()","098ade57":"predicts = model.predict(test.drop([\"row_id\",\"target\"], axis = 1))\n\nsubmission['target'] = predicts\nsubmission.head()","e5c9abe0":"submission.to_csv(\"submission_labels.csv\", index = False)","bac93aea":"Well, I don't know if this is a good thing or if I did it right, but it's a start.\n\nThe technique is to add values to the test data in order to create a larger training dataset.\n\nFor more information about the method, I recommend reading:\n[https:\/\/www.kaggle.com\/cdeotte\/pseudo-labeling-qda-0-969](http:\/\/)","631adede":"## Add the generated labels on the test data, concat the train and test and repeat the training with the new dataset","e613c31b":"## Train a model and generate labels from tests","6b2ab221":"## Submission"}}