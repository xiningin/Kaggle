{"cell_type":{"b6d26ca2":"code","ef0c4e31":"code","0449acd8":"code","aacf27c1":"code","e8917dae":"code","78a6dcda":"code","a6352412":"code","3bc60ea0":"code","4cb94733":"code","6b799d9b":"code","03c0a79c":"code","5471e66a":"code","6e0535b8":"code","b97589a0":"code","b26b233b":"code","bb08026f":"code","4c3629f3":"code","e0cf753a":"code","6fb072f6":"code","18706fdc":"code","83ec6219":"code","31c1d80b":"code","b765bd5d":"code","a574af5e":"code","9ca70794":"code","e114e6de":"markdown","817f771e":"markdown"},"source":{"b6d26ca2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef0c4e31":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nimport seaborn as sns\nimport pickle\nimport random","0449acd8":"plt.style.use(\"ggplot\")\n%matplotlib inline","aacf27c1":"main_train_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/\")\nmain_test_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Test\/\")\n\nprint(main_train_dir)\nprint(main_test_dir)","e8917dae":"two_thousand_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/2Thousandnote\/\")\nfive_hundered_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/5Hundrednote\/\")\ntwo_hundered_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/2Hundrednote\/\")\none_hundered_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/1Hundrednote\/\")\nfifty_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/Fiftynote\/\")\ntwenty_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/Twentynote\/\")\nten_dir = os.path.join(\"\/kaggle\/input\/indian-currency-notes-classifier\/Train\/Tennote\/\")","78a6dcda":"two_thousand_names = os.listdir(two_thousand_dir)\nfive_hundered_names = os.listdir(five_hundered_dir)\ntwo_hundered_names = os.listdir(two_hundered_dir)\none_hundered_names = os.listdir(one_hundered_dir)\nfifty_names = os.listdir(fifty_dir)\ntwenty_names = os.listdir(twenty_dir)\nten_names = os.listdir(ten_dir)\n","a6352412":"print(two_thousand_names[:10])\nprint(five_hundered_names[:10])\nprint(two_hundered_names[:10])\nprint(one_hundered_names[:10])\nprint(fifty_names[:10])\nprint(twenty_names[:10])\nprint(ten_names[:10])","3bc60ea0":"print(f\"total training of 2Thousand Notes : {len(two_thousand_names)}\")\nprint(f\"total training of 5Hundered Notes : {len(five_hundered_names)}\")\nprint(f\"total training of 2Hundered Notes : {len(two_hundered_names)}\")\nprint(f\"total training of 1Hundered Notes: {len(one_hundered_names)}\")\nprint(f\"total training of 50Notes : {len(fifty_names)}\")\nprint(f\"total training of 20Notes : {len(twenty_names)}\")\nprint(f\"total training of 10Notes : {len(ten_names)}\")","4cb94733":"# parameters for graph, we'll output images in a 4x4\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0","6b799d9b":"\n# set up matplotlib fig, and size it to fit 4x4 pics\nfig = plt.gcf()\nfig.set_size_inches(ncols * 2, nrows * 2)\n\npic_index += 8\n\ntwo_thousand_pix = [os.path.join(two_thousand_dir, fname) \n                for fname in two_thousand_names[pic_index-8:pic_index]]\n\nfive_hundered_pix = [os.path.join(five_hundered_dir, fname) \n                for fname in five_hundered_names[pic_index-8:pic_index]]\n\n\nfor i, img in enumerate(two_thousand_pix + five_hundered_pix):\n    sub_plot = plt.subplot(nrows, ncols, i + 1)\n    sub_plot.axis(\"Off\")\n    img_read = mpimg.imread(img)\n    plt.imshow(img_read)\n    \nplt.show()","03c0a79c":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation=\"relu\", input_shape=(150,150,3)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation=\"relu\"),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation=\"relu\"),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation=\"relu\"),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Dropout(0.3),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation=\"relu\"),\n    tf.keras.layers.Dense(7, activation=\"softmax\")\n])","5471e66a":"model.summary()","6e0535b8":"# tell the model what loss and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","b97589a0":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1\/255,\n                                   height_shift_range=0.2,\n                                   featurewise_center=True,\n                                   rotation_range=0.4,\n                                   horizontal_flip = True,\n                                   shear_range=0.2,\n                                   zoom_range=0.2)\n\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","b26b233b":"train_set=train_datagen.flow_from_directory('..\/input\/indian-currency-notes-classifier\/Train',\n                                            target_size=(150,150),\n                                            batch_size=64,\n                                            class_mode='categorical')","bb08026f":"test_set=test_datagen.flow_from_directory('..\/input\/indian-currency-notes-classifier\/Test',\n                                            target_size=(150,150),\n                                            batch_size=64,\n                                            class_mode='categorical')","4c3629f3":"# fit the model\nfrom PIL import _imaging\nfrom PIL import Image\nimport PIL\n\nr = model.fit_generator(\n  train_set,\n  validation_data=test_set,\n  epochs=100,\n  steps_per_epoch=len(train_set),\n  validation_steps=len(test_set))","e0cf753a":"r.history","6fb072f6":"import matplotlib.pyplot as plt\n# plot the loss\n\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.xlabel(\"Epoch number\")\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.xlabel('Epoch Number')\nplt.ylabel('accuracy percentage')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","18706fdc":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","83ec6219":"path = \"\/kaggle\/input\/testing-image-2\/WhatsApp Image 2020-12-01 at 5.10.18 PM.jpeg\"\nimg = image.load_img(path, target_size=(150, 150))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict_classes(images, batch_size=10)\n\n\n\nif classes[0] == 0:\n    print(path + \" is hundred Rupees\")\nelif classes[0] == 1:\n    print(path + \" is two hundred Rupees\")\nelif classes[0] == 2:\n    print(path + \" is two thousand Rupees\")\nelif classes[0] == 3:\n    print(path + \" is fifty Rupees\")\nelif classes[0] == 4:\n    print(path, + \"is twenty  Rupees\")\nelif classes[0] == 5:\n    print(path + \" is ten Rupees\")\nelif classes[0] == 6:\n    print(path + \" is five hundred Rupees\")\n\n    \nimg = mpimg.imread(path)\nplt.imshow(img)\nplt.show()","31c1d80b":"path = \"\/kaggle\/input\/testing-image-3\/WhatsApp Image 2020-12-01 at 5.10.53 PM.jpeg\"\nimg = image.load_img(path, target_size=(150, 150))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict_classes(images, batch_size=10)\n\n\n\nif classes[0] == 0:\n    print(path + \" is hundred Rupees\")\nelif classes[0] == 1:\n    print(path + \" is two hundred Rupees\")\nelif classes[0] == 2:\n    print(path + \" is two thousand Rupees\")\nelif classes[0] == 3:\n    print(path + \" is fifty Rupees\")\nelif classes[0] == 4:\n    print(path, + \"is twenty  Rupees\")\nelif classes[0] == 5:\n    print(path + \" is ten Rupees\")\nelif classes[0] == 6:\n    print(path + \" is five hundred Rupees\")\n    \nimg = mpimg.imread(path)\nplt.imshow(img)\nplt.show()","b765bd5d":"path='\/kaggle\/input\/testing-image-4\/WhatsApp Image 2020-12-01 at 5.10.45 PM.jpeg'\nimg = image.load_img(path, target_size=(150, 150))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict_classes(images, batch_size=10)\n\n\n\nif classes[0] == 0:\n    print(path + \" is hundred Rupees\")\nelif classes[0] == 1:\n    print(path + \" is two hundred Rupees\")\nelif classes[0] == 2:\n    print(path + \" is two thousand Rupees\")\nelif classes[0] == 3:\n    print(path + \" is fifty Rupees\")\nelif classes[0] == 4:\n    print(path, + \"is twenty  Rupees\")\nelif classes[0] == 5:\n    print(path + \" is ten Rupees\")\nelif classes[0] == 6:\n    print(path + \" is five hundred Rupees\")\n    \nimg = mpimg.imread(path)\nplt.imshow(img)\nplt.show()\n","a574af5e":"path = \"\/kaggle\/input\/testing-data-5\/WhatsApp Image 2020-12-01 at 5.10.07 PM.jpeg\"\nimg = image.load_img(path, target_size=(150, 150))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict_classes(images, batch_size=10)\n\n\n\nif classes[0] == 0:\n    print(path + \" is hundred Rupees\")\nelif classes[0] == 1:\n    print(path + \" is two hundred Rupees\")\nelif classes[0] == 2:\n    print(path + \" is two thousand Rupees\")\nelif classes[0] == 3:\n    print(path + \" is fifty Rupees\")\nelif classes[0] == 4:\n    print(path, + \"is twenty  Rupees\")\nelif classes[0] == 5:\n    print(path + \" is ten Rupees\")\nelif classes[0] == 6:\n    print(path + \" is five hundred Rupees\")\n\n    \nimg = mpimg.imread(path)\nplt.imshow(img)\nplt.show()","9ca70794":"path='..\/input\/testing-image\/WhatsApp Image 2020-12-01 at 4.59.56 PM.jpeg'\nimg = image.load_img(path, target_size=(150, 150))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict_classes(images, batch_size=10)\n\n\n\nif classes[0] == 0:\n    print(path + \" is hundred Rupees\")\nelif classes[0] == 1:\n    print(path + \" is two hundred Rupees\")\nelif classes[0] == 2:\n    print(path + \" is two thousand Rupees\")\nelif classes[0] == 3:\n    print(path + \" is fifty Rupees\")\nelif classes[0] == 4:\n    print(path, + \"is twenty  Rupees\")\nelif classes[0] == 5:\n    print(path + \" is ten Rupees\")\nelif classes[0] == 6:\n    print(path + \" is five hundred Rupees\")\n\n    \nimg = mpimg.imread(path)\nplt.imshow(img)\nplt.show()","e114e6de":"What is **LOSS**\n\n\nLoss is the penalty for a bad prediction. That is, loss is a number indicating how bad the model's prediction was on a single example. If the model's prediction is perfect, the loss is zero; otherwise, the loss is greater.","817f771e":"This Dataset contains 195 images of 7 categories of Indian Currency Notes, this data is collected from Google images, Shutter-stock images and Data flicr respectively, you can Play with this Dataset, to recognize type of Indian Note, from the Photo, or real Time Applications.\n\nThis Dataset looks forward, as a Image Classification Data, which contains 7 Distinct types of Indian Currency Notes, the images are not reduced to any single size, they may have different proportions.\n\n\n\nThese Distinct Types of Indian Currency can be Classified as:\n1)Ten Rupee Notes\n2)Twenty Rupee Notes\n3)Fifty Rupee Notes\n4)Hundred Rupee Notes\n5)Two Hundred Rupee Notes\n6)Five Hundred Rupee Notes, and,\n7)Two Thousand Rupee Notes."}}