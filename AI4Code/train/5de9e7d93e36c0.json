{"cell_type":{"09bb94bf":"code","549d2172":"code","b1eee633":"code","95c377bd":"code","907ca6ca":"code","06e7488a":"code","29fe2400":"code","bdc6ca6f":"code","433d64a9":"code","eecd4fb2":"code","b269139a":"code","8a040e87":"code","80e81d66":"code","b9192f60":"code","b7d67561":"code","a066d845":"code","607edf1f":"code","95f03700":"code","49aa21d2":"code","8a5847ab":"code","29599283":"code","f281aa4c":"code","4d6432a2":"code","1a3c32b0":"code","e180e7fb":"code","30406351":"code","27732b92":"code","7e1ec127":"code","4d317e15":"code","9a72fd6b":"code","88eaac58":"code","06231439":"code","09749602":"code","8a383dfe":"code","f3da2d2c":"code","a556ab4b":"code","1bb6a9a1":"code","ebb36e37":"code","40490056":"code","fa331abd":"code","56bf950d":"code","e1e855b5":"code","a2575f86":"code","4772104b":"code","3102f0bc":"code","7697a731":"code","2a4af8a6":"code","89a8034f":"code","c43f8b1d":"code","8a298df0":"code","2b8dbeeb":"code","d6700d7e":"code","e2135fa4":"code","5f91bbb8":"code","718e0817":"code","e34f5e93":"code","cce1c416":"code","f9749420":"code","ca199ad0":"code","5af34154":"code","d33e8e3d":"code","cf61ffc5":"code","70bf0d0f":"code","4361fe26":"code","8b91af20":"code","1e2418bd":"code","a822eca1":"code","a61ee9e6":"code","56176e62":"code","59fa1379":"code","5a23ba93":"code","61d19bc5":"code","d6fbd108":"code","29902a08":"code","64da3f5f":"code","6dd5d375":"code","b504f51b":"code","5fd0f0d5":"code","273f53ce":"code","77bacb8f":"code","95323617":"code","f71c4b46":"code","eddfb55a":"code","fb3055a8":"code","51dc1634":"code","d1a29849":"code","1e779392":"code","92adaf0a":"code","87b22716":"code","a4e08920":"code","1007447f":"code","47d27bc3":"code","e064db67":"code","d3832d0d":"code","66b667ad":"code","eb2dc5f3":"code","720b912e":"code","edc019ef":"code","8fe9e1fb":"code","c4c3165f":"code","4f6e8b44":"code","f15ba7d6":"code","ed651358":"code","ba6d23da":"code","9b7718cf":"code","9c6107ea":"code","f6eafbd1":"code","c5c10120":"code","a1fe3f14":"code","5be61306":"code","f064e953":"code","f16ceeaf":"code","e7a29cb5":"code","934c69b6":"code","a3f4cb04":"code","79226bc0":"code","e2f2a092":"code","1702fc3f":"code","01e1de5d":"code","530c4d48":"code","cc834d14":"code","45022ec5":"markdown","2616eaca":"markdown","7968ac4d":"markdown","69fcbe5c":"markdown","47ea6be0":"markdown","2f3c0770":"markdown","880b0bf7":"markdown","8c674899":"markdown","8813d433":"markdown","1eb24a20":"markdown","607ee588":"markdown","adcfed17":"markdown","8df23101":"markdown","a168a577":"markdown","b815fe8e":"markdown","ff99309d":"markdown","a710f9cd":"markdown","0581d5fa":"markdown","5536d5d8":"markdown","85ddcf8c":"markdown","bcd22005":"markdown","31f33b2a":"markdown","c3fef539":"markdown","179ef0a9":"markdown","03529c6a":"markdown","4d32c82a":"markdown","8c7e5806":"markdown","1275563e":"markdown","46f1cd07":"markdown","e97da19f":"markdown","b3613e1e":"markdown","095131cc":"markdown","5e120cf3":"markdown","21e133a0":"markdown","f3508bc1":"markdown","23063f23":"markdown","121a17dd":"markdown","6baf6ec8":"markdown","dcefdfcf":"markdown","59de0a78":"markdown","896b8885":"markdown","6e96a933":"markdown","c61ccae7":"markdown","fbc4605c":"markdown","8d1d535f":"markdown","d506dbf1":"markdown","e72ee8ed":"markdown","39b31783":"markdown","0944ebc2":"markdown","4be53976":"markdown","16bd7b31":"markdown","1a67a4a1":"markdown","cf369066":"markdown","43a3ffba":"markdown","ec33115f":"markdown","e391f9c6":"markdown"},"source":{"09bb94bf":"# Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","549d2172":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b1eee633":"# Reading the csv file\ndata = pd.read_csv('\/kaggle\/input\/pakistans-largest-ecommerce-dataset\/Pakistan Largest Ecommerce Dataset.csv')\ndf = data.copy()","95c377bd":"df.head()","907ca6ca":"df.tail()","06e7488a":"df.columns","29fe2400":"df.dtypes","bdc6ca6f":"# Checking for missing \/ NaN values\ndf.isnull().sum()","433d64a9":"# Doing a visual inspection of all columns\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","eecd4fb2":"df.drop([\"Unnamed: 21\", \"Unnamed: 22\", \"Unnamed: 23\", \"Unnamed: 24\", \"Unnamed: 25\"], axis = 1, inplace=True)\ndf.dropna(subset=[\"item_id\"], axis=0, inplace=True)\ndf.rename(columns={\" MV \": \"MV\", \"category_name_1\": \"category_name\"}, inplace = True)","b269139a":"df=df.drop_duplicates()","8a040e87":"print(\"The number of rows with negative or zero Quantity:\",sum(n <= 0 for n in df.qty_ordered))\nprint(\"The number of rows with negative Price:\",sum(n < 0 for n in df.price))","80e81d66":"df['sku']=df['sku'].str.upper()","b9192f60":"df['status'].value_counts()","b7d67561":"df.groupby('BI Status')['status'].value_counts()","a066d845":"df['status'] = df['status'].replace('complete', 'Completed')\ndf['status'] = df['status'].replace('closed', 'Completed')\ndf['status'] = df['status'].replace('received', 'Completed')\ndf['status'] = df['status'].replace('paid', 'Completed')\ndf['status'] = df['status'].replace('cod', 'Completed')\ndf['status'] = df['status'].replace('order_refunded', 'Refund')\ndf['status'] = df['status'].replace('refund', 'Refund')\ndf['status'] = df['status'].replace('exchange', 'Refund')\ndf['status'] = df['status'].replace('pending', 'Pending')\ndf['status'] = df['status'].replace('payment_review', 'Pending')\ndf['status'] = df['status'].replace('processing', 'Pending')\ndf['status'] = df['status'].replace('holded', 'Pending')\ndf['status'] = df['status'].replace('pending_paypal', 'Pending')\ndf['status'] = df['status'].replace(r'\\\\N', 'Pending', regex=True)\ndf['status'] = df['status'].replace('fraud', 'Fraud')\ndf['status'] = df['status'].replace('canceled', 'Cancelled')","607edf1f":"df['status'].value_counts()","95f03700":"df['BI Status'] = df['BI Status'].replace('#REF!', 'Net')","49aa21d2":"df['BI Status'].value_counts()","8a5847ab":"df[df['status'].isnull()]","29599283":"df['status'].fillna(\"Cancelled\",inplace=True)","f281aa4c":"df['category_name'].value_counts()","4d6432a2":"df['category_name'] = df['category_name'].replace(r'\\\\N', 'Unknown', regex=True)\ndf['category_name'].fillna(\"Unknown\",inplace=True)","1a3c32b0":"df[df['sku'].isnull()]","e180e7fb":"df['sku'].fillna(\"Missing\",inplace=True)","30406351":"df['sales_commission_code'].value_counts()","27732b92":"df[df['sales_commission_code'].isnull()]","7e1ec127":"df['sales_commission_code'].fillna(\"Missing\",inplace=True)\ndf['sales_commission_code'] = df['sales_commission_code'].replace(r'\\\\N', 'Missing', regex=True)","4d317e15":"df[df['Customer ID'].isnull()]","9a72fd6b":"df['Customer ID'].fillna(\"0\",inplace=True)\ndf['Customer Since'].fillna(\"1-2018\",inplace=True)","88eaac58":"df.isnull().sum()","06231439":"df[[\"item_id\"]] = df[[\"item_id\"]].astype(\"str\")\ndf[[\"Month\"]] = df[[\"Month\"]].astype(\"int\")\ndf[[\"Year\"]] = df[[\"Year\"]].astype(\"int\")\ndf['created_at'] = pd.to_datetime(df['created_at'])\ndf[[\"qty_ordered\"]] = df[[\"qty_ordered\"]].astype(\"int\")\ndf[[\"Customer ID\"]] = df[[\"Customer ID\"]].astype(\"int\")\ndf[[\"increment_id\"]] = df[[\"increment_id\"]].astype(\"str\")\n\n## creating new columns to drill down the time dimension\ndf['day_of_week'] = df['created_at'].dt.dayofweek.astype(str) # 0 = monday.\n#df['weekday_flag'] = (df['day_of_week'] \/\/ 5 != 1).astype(str)\ndf['date_of_month'] = df['created_at'].dt.day\ndf['Week'] = df['created_at'].dt.week","09749602":"df.info()","8a383dfe":"df = df.reset_index()","f3da2d2c":"df['payment_method'] = df['payment_method'].replace('Easypay_MA', 'Easypay')\ndf['payment_method'] = df['payment_method'].replace('cashatdoorstep', 'cod')\ndf['payment_method'] = df['payment_method'].replace(['marketingexpense','financesettlement','productcredit', 'internetbanking', 'mygateway', 'mcblite', 'ublcreditcard', 'apg'], 'Others')","a556ab4b":"df = df.loc[df['status']=='Completed',:].reset_index()\ndf.head()","1bb6a9a1":"df_sales_segment = df.groupby('Customer ID')['grand_total'].sum().reset_index()\ndf_sales_segment","ebb36e37":"df_purchases = df.groupby('Customer ID')['item_id'].count().reset_index()\ndf_purchases","40490056":"df_sales_segment.describe()","fa331abd":"df_sales_segment.loc[df_sales_segment['grand_total'] > 5000000, :]\ndf_sales_segment = df_sales_segment.drop(37552, axis=0)\ndf_sales_segment","56bf950d":"df_sales_segment['sales_segment'] = ''\ndf_sales_segment.loc[df_sales_segment['grand_total'] <= 1000, 'sales_segment'] = 'very low'\ndf_sales_segment.loc[(df_sales_segment['grand_total'] > 1000) & (df_sales_segment['grand_total'] <= 10000), 'sales_segment'] = 'low'\ndf_sales_segment.loc[(df_sales_segment['grand_total'] > 10000) & (df_sales_segment['grand_total'] <= 50000), 'sales_segment'] = 'medium'\ndf_sales_segment.loc[df_sales_segment['grand_total'] > 50000, 'sales_segment'] = 'high'\ndf_sales_segment","e1e855b5":"sales_segment_total = df_sales_segment.groupby('sales_segment')['grand_total'].sum().reset_index()\nsales_segment_total","a2575f86":"plt.figure(figsize=(15,6));\nsns.countplot(x='sales_segment', order=['very low','low', 'medium','high'], data=df_sales_segment)","4772104b":"plt.figure(figsize=(15,6));\nsns.barplot(x='sales_segment', y='grand_total' ,order=['very low','low', 'medium', 'high'], data=sales_segment_total)","3102f0bc":"df_vlow = df_sales_segment.loc[df_sales_segment['grand_total'] < 1900, ['Customer ID','grand_total']]\ndf_vlow","7697a731":"df_vlow_segment = df_vlow.merge(df, how='inner', on='Customer ID')\ndf_vlow_segment = df_vlow_segment[['Customer ID','created_at','category_name','payment_method','grand_total_y']]\ndf_vlow_segment","2a4af8a6":"vlow_sales_segment_total = df_vlow_segment.groupby('category_name')['grand_total_y'].sum().reset_index()\nvlow_sales_segment_total = vlow_sales_segment_total.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nvlow_sales_segment_total","89a8034f":"plt.figure(figsize=(15,8));\nsns.countplot(y='category_name', data=df_vlow_segment, order = df_vlow_segment['category_name'].value_counts().index)\nplt.show()","c43f8b1d":"plt.figure(figsize=(15,8));\nsns.barplot(y='category_name', data=vlow_sales_segment_total, x='grand_total_y', order = vlow_sales_segment_total['category_name'])\nplt.show()","8a298df0":"vlow_sales_segment_datewise = df_vlow_segment.groupby('created_at')['grand_total_y'].sum().reset_index()\nvlow_sales_segment_datewise","2b8dbeeb":"vlow_sales_segment_datewise.set_index('created_at')['grand_total_y'].plot(figsize=(15,8))","d6700d7e":"vlow_sales_segment_payment = df_vlow_segment.groupby('payment_method')['grand_total_y'].sum().reset_index()\nvlow_sales_segment_payment = vlow_sales_segment_payment.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nvlow_sales_segment_payment","e2135fa4":"plt.figure(figsize=(15,8));\nsns.barplot(y='payment_method', data=vlow_sales_segment_payment, x='grand_total_y')\nplt.show()","5f91bbb8":"df_vlow_transactions = df_vlow_segment.groupby(['Customer ID','created_at']).size().reset_index(name='count')\ndf_vlow_transactions","718e0817":"vlow_customer_count = df_vlow_transactions.loc[df_vlow_transactions['count'] > 1, :]\nvlow_customer_count","e34f5e93":"df_vlow_returning_customers = df_vlow_transactions.groupby('Customer ID')['created_at'].count().reset_index()\ndf_vlow_returning_customers","cce1c416":"vlow_customer_returning = df_vlow_returning_customers.loc[df_vlow_returning_customers['created_at'] > 1, :]\nvlow_customer_returning","f9749420":"df_low = df_sales_segment.loc[(df_sales_segment['grand_total'] > 1900) & (df_sales_segment['grand_total'] < 5750), ['Customer ID','grand_total']]\ndf_low","ca199ad0":"df_low_segment = df_low.merge(df, how='inner', on='Customer ID')\ndf_low_segment = df_low_segment[['Customer ID','created_at','category_name','payment_method','grand_total_y']]\ndf_low_segment","5af34154":"low_sales_segment_total = df_low_segment.groupby('category_name')['grand_total_y'].sum().reset_index()\nlow_sales_segment_total = low_sales_segment_total.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nlow_sales_segment_total","d33e8e3d":"plt.figure(figsize=(15,8));\nsns.countplot(y='category_name', data=df_low_segment, order = df_low_segment['category_name'].value_counts().index)\nplt.show()","cf61ffc5":"plt.figure(figsize=(15,8));\nsns.barplot(y='category_name', data=low_sales_segment_total, x='grand_total_y', order = low_sales_segment_total['category_name'])\nplt.show()","70bf0d0f":"low_sales_segment_datewise = df_low_segment.groupby('created_at')['grand_total_y'].sum().reset_index()\nlow_sales_segment_datewise","4361fe26":"low_sales_segment_datewise.set_index('created_at')['grand_total_y'].plot(figsize=(15,8))","8b91af20":"low_sales_segment_payment = df_low_segment.groupby('payment_method')['grand_total_y'].sum().reset_index()\nlow_sales_segment_payment = low_sales_segment_payment.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nlow_sales_segment_payment","1e2418bd":"plt.figure(figsize=(15,8));\nsns.barplot(y='payment_method', data=low_sales_segment_payment, x='grand_total_y')\nplt.show()","a822eca1":"df_low_transactions = df_low_segment.groupby(['Customer ID','created_at']).size().reset_index(name='count')\ndf_low_transactions","a61ee9e6":"low_customer_count = df_low_transactions.loc[df_low_transactions['count'] > 1, :]\nlow_customer_count","56176e62":"df_low_returning_customers = df_low_transactions.groupby('Customer ID')['created_at'].count().reset_index()\ndf_low_returning_customers","59fa1379":"low_customer_returning = df_low_returning_customers.loc[df_low_returning_customers['created_at'] > 1, :]\nlow_customer_returning","5a23ba93":"df_medium = df_sales_segment.loc[(df_sales_segment['grand_total'] > 5750) & (df_sales_segment['grand_total'] < 23000), ['Customer ID','grand_total']]\ndf_medium","61d19bc5":"df_medium_segment = df_medium.merge(df, how='inner', on='Customer ID')\ndf_medium_segment = df_medium_segment[['Customer ID','created_at','category_name','payment_method','grand_total_y']]\ndf_medium_segment","d6fbd108":"plt.figure(figsize=(15,8));\nsns.countplot(y='category_name', data=df_medium_segment, order = df_medium_segment['category_name'].value_counts().index)\nplt.show()","29902a08":"medium_sales_segment_total = df_medium_segment.groupby('category_name')['grand_total_y'].sum().reset_index()\nmedium_sales_segment_total = medium_sales_segment_total.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nmedium_sales_segment_total","64da3f5f":"plt.figure(figsize=(15,8));\nsns.barplot(y='category_name', data=medium_sales_segment_total, x='grand_total_y', order = medium_sales_segment_total['category_name'])\nplt.show()","6dd5d375":"medium_sales_segment_datewise = df_medium_segment.groupby('created_at')['grand_total_y'].sum().reset_index()\nmedium_sales_segment_datewise","b504f51b":"medium_sales_segment_datewise.set_index('created_at')['grand_total_y'].plot(figsize=(15,8))","5fd0f0d5":"medium_sales_segment_payment = df_medium_segment.groupby('payment_method')['grand_total_y'].sum().reset_index()\nmedium_sales_segment_payment = medium_sales_segment_payment.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nmedium_sales_segment_payment","273f53ce":"plt.figure(figsize=(15,8));\nsns.barplot(y='payment_method', data=medium_sales_segment_payment, x='grand_total_y')\nplt.show()","77bacb8f":"df_medium_transactions = df_medium_segment.groupby(['Customer ID','created_at']).size().reset_index(name='count')\ndf_medium_transactions","95323617":"medium_customer_count = df_medium_transactions.loc[df_medium_transactions['count'] > 1, :]\nmedium_customer_count","f71c4b46":"df_medium_returning_customers = df_medium_transactions.groupby('Customer ID')['created_at'].count().reset_index()\ndf_medium_returning_customers","eddfb55a":"medium_customer_returning = df_medium_returning_customers.loc[df_medium_returning_customers['created_at'] > 1, :]\nmedium_customer_returning","fb3055a8":"df_high = df_sales_segment.loc[df_sales_segment['grand_total'] > 23000, ['Customer ID','grand_total']]\ndf_high","51dc1634":"df_high_segment = df_high.merge(df, how='inner', on='Customer ID')\ndf_high_segment = df_high_segment[['Customer ID','created_at','category_name','payment_method','grand_total_y']]\ndf_high_segment","d1a29849":"plt.figure(figsize=(15,8));\nsns.countplot(y='category_name', data=df_high_segment, order = df_high_segment['category_name'].value_counts().index)\nplt.show()","1e779392":"high_sales_segment_total = df_high_segment.groupby('category_name')['grand_total_y'].sum().reset_index()\nhigh_sales_segment_total = high_sales_segment_total.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nhigh_sales_segment_total","92adaf0a":"plt.figure(figsize=(15,8));\nsns.barplot(y='category_name', data=high_sales_segment_total, x='grand_total_y', order = high_sales_segment_total['category_name'])\nplt.show()","87b22716":"high_sales_segment_datewise = df_high_segment.groupby('created_at')['grand_total_y'].sum().reset_index()\nhigh_sales_segment_datewise","a4e08920":"high_sales_segment_datewise.set_index('created_at')['grand_total_y'].plot(figsize=(15,8))","1007447f":"high_sales_segment_payment = df_high_segment.groupby('payment_method')['grand_total_y'].sum().reset_index()\nhigh_sales_segment_payment = high_sales_segment_payment.sort_values(['grand_total_y'], ascending=False).reset_index(drop=True)\nhigh_sales_segment_payment","47d27bc3":"plt.figure(figsize=(15,8));\nsns.barplot(y='payment_method', data=high_sales_segment_payment, x='grand_total_y')\nplt.show()","e064db67":"df_high_transactions = df_high_segment.groupby(['Customer ID','created_at']).size().reset_index(name='count')\ndf_high_transactions","d3832d0d":"high_customer_count = df_high_transactions.loc[df_high_transactions['count'] > 1, :]\nhigh_customer_count","66b667ad":"df_high_returning_customers = df_high_transactions.groupby('Customer ID')['created_at'].count().reset_index()\ndf_high_returning_customers","eb2dc5f3":"high_customer_returning = df_high_returning_customers.loc[df_high_returning_customers['created_at'] > 1, :]\nhigh_customer_returning","720b912e":"pivoted= pd.pivot_table(df,index='Customer ID',columns='category_name', values='grand_total',aggfunc='sum',fill_value=0)","edc019ef":"pivoted","8fe9e1fb":"pivoted.dtypes","c4c3165f":"new = pivoted.reset_index()\nnew","4f6e8b44":"X= new.drop('Customer ID',axis=1)\nX.head()","f15ba7d6":"from sklearn.cluster import KMeans\nfrom sklearn import metrics ","ed651358":"# generating random clutser with value set to 5\nkmeans = KMeans(n_clusters=5, random_state=0)\nkmeans.fit(X)","ba6d23da":"pred = X.copy()\npred['kmean1'] = kmeans.labels_\npred.head()","9b7718cf":"col_names = X.columns\ncol_names","9c6107ea":"from sklearn.preprocessing import MinMaxScaler","f6eafbd1":"scaler = MinMaxScaler()","c5c10120":"scaled = scaler.fit_transform(X)","a1fe3f14":"scaled=pd.DataFrame(columns=col_names,data=scaled)","5be61306":"scaled.head()","f064e953":"cost = []\n# run for cluster 1 to 15\nfor k in range(1, 15):\n    kmeanModel = KMeans(n_clusters=k, random_state=0).fit(scaled)\n    cost.append([k,kmeanModel.inertia_])","f16ceeaf":"plt.figure(figsize=(15,6))\nsns.set_context('poster')\nplt.plot(pd.DataFrame(cost)[0], pd.DataFrame(cost)[1])\nplt.xlabel('k')\nplt.ylabel('Cost')\nplt.title('The Elbow Method showing the optimal k') \nplt.show()","e7a29cb5":"#pred = scaled.copy()\n\n#Write code here\nkmean4 = KMeans(n_clusters=4, random_state=0)\n\n#write code to fit\nkmean4.fit(scaled)\n\n#Write code to assign labels to predicted data\npred['kmean4'] = kmean4.labels_\n\n#View the final data set i.e top 5 rows\npred.head()","934c69b6":"pred = pred.drop('kmean1',axis=1)\npred.head()","a3f4cb04":"pivoted = pred.groupby('kmean4')[\"Appliances\", \"Beauty & Grooming\",\"Books\",\"Computing\",\"Entertainment\", \"Health & Sports\", \"Home & Living\",\"Kids & Baby\",\"Men's Fashion\",\"Mobiles & Tablets\",\"Others\",\"School & Education\",\"Soghaat\",\"Superstore\",\"Unknown\",\"Women's Fashion\"].sum().reset_index()\npivoted","79226bc0":"pivoted['Name'] = ''\npivoted.loc[pivoted['kmean4'] == 0, 'Name'] = 'Cluster 0'\npivoted.loc[pivoted['kmean4'] == 1, 'Name'] = 'Cluster 1'\npivoted.loc[pivoted['kmean4'] == 2, 'Name'] = 'Cluster 2'\npivoted.loc[pivoted['kmean4'] == 3, 'Name'] = 'Cluster 3'","e2f2a092":"import re\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot","1702fc3f":"plt_cols = [\"Appliances\", \"Beauty & Grooming\",\"Books\",\"Computing\",\"Entertainment\", \"Health & Sports\", \"Home & Living\",\"Kids & Baby\",\"Men's Fashion\",\"Mobiles & Tablets\",\"Others\",\"School & Education\",\"Soghaat\",\"Superstore\",\"Unknown\",\"Women's Fashion\",\"Appliances\"]\n#top_fwds.reset_index(inplace=True)\n\nplt_data = [] \nfor i in range(0,1):\n    trace = go.Scatterpolar(\n        r = pivoted.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = pivoted.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 550000000],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Segments based on Category Name\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","01e1de5d":"plt_cols = [\"Appliances\", \"Beauty & Grooming\",\"Books\",\"Computing\",\"Entertainment\", \"Health & Sports\", \"Home & Living\",\"Kids & Baby\",\"Men's Fashion\",\"Mobiles & Tablets\",\"Others\",\"School & Education\",\"Soghaat\",\"Superstore\",\"Unknown\",\"Women's Fashion\",\"Appliances\"]\n#top_fwds.reset_index(inplace=True)\n\nplt_data = [] \nfor i in range(1,2):\n    trace = go.Scatterpolar(\n        r = pivoted.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = pivoted.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 20000000],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Segments based on Category Name\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","530c4d48":"plt_cols = [\"Appliances\", \"Beauty & Grooming\",\"Books\",\"Computing\",\"Entertainment\", \"Health & Sports\", \"Home & Living\",\"Kids & Baby\",\"Men's Fashion\",\"Mobiles & Tablets\",\"Others\",\"School & Education\",\"Soghaat\",\"Superstore\",\"Unknown\",\"Women's Fashion\",\"Appliances\"]\n#top_fwds.reset_index(inplace=True)\n\nplt_data = [] \nfor i in range(2,3):\n    trace = go.Scatterpolar(\n        r = pivoted.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = pivoted.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 80000000],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Segments based on Category Name\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","cc834d14":"plt_cols = [\"Appliances\", \"Beauty & Grooming\",\"Books\",\"Computing\",\"Entertainment\", \"Health & Sports\", \"Home & Living\",\"Kids & Baby\",\"Men's Fashion\",\"Mobiles & Tablets\",\"Others\",\"School & Education\",\"Soghaat\",\"Superstore\",\"Unknown\",\"Women's Fashion\",\"Appliances\"]\n#top_fwds.reset_index(inplace=True)\n\nplt_data = [] \nfor i in range(3,4):\n    trace = go.Scatterpolar(\n        r = pivoted.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = pivoted.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 25000000],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Segments based on Category Name\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","45022ec5":"##### Observations\n- The column has a large number of NaN values and there are more than 7000 types of values in this column\n- The column does not seem to add any value for further analysis and can be dropped at a later stage\n- At this stage, NaN values as well as unicode labels can be replaced with 'Missing'\n\n##### Actions\n- Replacing NaN and unicode values with **'Missing'**","2616eaca":"#### Handling NaN values in 'sku' column","7968ac4d":"#### Out of 18,265 customers, only 1145 (6%) were returning customers and made more than one purchase on the E-commerce platform","69fcbe5c":"##### Convert all values in 'sku' column to upper case for uniformity","47ea6be0":"#### Big spikes of greater than Rs 3.0M spending seen on 'Black Friday' period in both 2016 and 2017. Also a spike of Rs 3.0M seen in the period of Feb-Mar 2018 that corresponds to some annual deals","2f3c0770":"#### In the 'high' sales segment, out of 125,096 transactions made by 6,431 customers, 4,368 or 68% of the customers made more than one purchase or were returning customers","880b0bf7":"#### Exploring each segment to check\n- which items are purchased most by each segment?\n- how many customers purchase more than one item during a single transaction?\n- how many customers return to the store for doing more transactions?","8c674899":"#### Handling missing values in 'Sales_commission_code' column","8813d433":"#### Handling NaN values in 'category_name' column","1eb24a20":"##### Handling Null values in 'status' column","607ee588":"## Segmentation based on sales in different categories","adcfed17":"### High Sales segment","8df23101":"##### The plot shows that optimal method for K is 4","a168a577":"#### Customers belonging to this segment were very active on annual Black Friday in November 2017. Another active period was Mar-Apr 2018 and significant activity on Black Friday 2016 and Eid-ul-Fitr 2017.","b815fe8e":"##### Dropping duplicate entries, if any, from the dataset","ff99309d":"#### Highest sales revenue generated by the 'high' segment, followed by 'medium' sales segment. Least sales revenue is generated by the 'very low' segment, despite close to 20,000 customers belonging to this segment","a710f9cd":"## Step 1: Data Pre-processing","0581d5fa":"##### Observations\n- All transactions marked as either **'complete' or 'closed'**, fall in the **'Net' category** for 'BI Status'\n- All transactions marked as **'received','paid','cod','exchanged' or something related to refund** are marked in **'Valid' category**\n- All transactions marked as **either 'canceled' or something to do with incomplete transation** are marked in **'Gross' category**\n- '#REF!' looks an erroneus label.\n\n##### Actions\n**Replace values inside the 'status' column by creating new labels**\n\n- **'complete','closed','received','paid','cod'** will belong to category **'Completed'**\n- **'order_refunded','refund', 'exchange'** will belong to category **'Refund'**\n- **'pending','payment_review','processing','holded','pending_paypal','\\N'** will beling to **'Pending'**\n- **'canceled'** will belong to **'Cancelled'**\n- **'fraud'** will belong to **'Fraud'**\n**Also replace the '#REF!'' entry to 'Net' in 'BI status'**","5536d5d8":"#### Checking for Null values again and setting appropriate datatypes","85ddcf8c":"#### Mobiles & Tablets generate the highest amount of revenue for the 'medium' sales segment of customers, which is about 3 times higher than the 2nd best category 'Appliances'","bcd22005":"## Summary\n\n#### Very Low Sales segment\n- Total customers: 18,265\n- Total Revenue generated: Rs.10.7 Million\n- 6% were returning customers on the E-commerce platform\n- Average revenue generated per customer: Rs 590\n- Top 3 revenue generating product categories are\n    - Men's Fashion\n    - Mobiles & Tablets\n    - Beauty & Grooming\n\n#### Low Sales segment\n- Total customers: 37,105\n- Total Revenue generated: Rs.136 Million\n- 25% were returning customers on the E-commerce platform\n- Average revenue generated per customer: Rs 3,747\n- Top 3 revenue generating product categories are\n    - Men's Fashion\n    - Women's Fashion\n    - Mobiles & Tablets\n\n#### Medium  Sales segment\n- Total customers: 17,385\n- Total Revenue generated: Rs.394 Million\n- 42% were returning customers on the E-commerce platform\n- Average revenue generated per customer: Rs 22,713\n- Top 3 revenue generating product categories are\n    - Mobiles & Tablets\n    - Appliances\n    - Entertainment\n\n\n#### High  Sales segment\n- Total customers: 6,431\n- Total Revenue generated: Rs.1,054 Million\n- 68% were returning customers on the E-commerce platform\n- Average revenue generated per customer: Rs 163,997. \n- Top 3 revenue generating product categories are\n    - Mobiles & Tablets\n    - Appliances\n    - Entertainment","31f33b2a":"### Segmentation based on net amout spent by each customer on E-commerce store\n\nA good estimate would be to use the values of 25th, 50th and 75th percentile. Based on these values, the 3 segments are\n- very low: net amount spent less than Rs 1000\n- low: net amount spent between Rs 1000 and Rs 10,000\n- medium: net amount spent between Rs 10,000 and Rs 50,000\n- high: net amount spent greater than Rs 50,000","c3fef539":"##### Obsevations\n- 20 NaN values for **'sku'** exist in the dataset and these values can be replaced.\n\n##### Action\n- Replace NaN values with a new sku code **'Missing'**","179ef0a9":"##### Observations\n- There are a total of 11 rows where the 'Customer ID' column is NaN and exactly the same rows in 'Customer since' are also NaN, which makes sense and shows that these columns have a relationship.\n- All 11 records are from FY18, with the first record from 01-2018.\n- For keeping the records in dataset for analysis, a fake 'Customer ID' value of '0' can be assigned with '01-2018' assigned to all records in 'Customer Since' column\n\n##### Actions\n- Replaced 'Customer ID' with value **'0'** and 'Customer Since' with value **'01-2018'** for all NaN values","03529c6a":"#### Working only with completed transactions","4d32c82a":"#### Out of 37,105 customers in this segment, 9,167 (25%) were returning customers and made more than one purchase on the E-commerce store","8c7e5806":"### Medium Sales segment","1275563e":"#### The product category with the highest revenue from sales is \"Men's Fashion\" followed by \"Women's Fashion\" and \"Mobiles & Tablets\"","46f1cd07":"#### Handling missing values in 'Customer ID' and 'Customer Since' columns","e97da19f":"##### Observations\n- There are 164 NaN values in the **'category_name'** column that can be filled using some information from **'sku'** column. Not doing it right now\n- 7850 transactions have a unicode label associated with them.\n- 164 transactions have NaN values.\n\n##### Actions\n- Replacing the unicode label and NaN values with label 'Unknown'","b3613e1e":"##### Basic data quality and integrity checks","095131cc":"##### Observation\n- 15 NaN values in 'status' column have 'Gross' in the BI column meaning all these transactions are not valid\n\n##### Actions\n- Replacing NaN values with label **'Cancelled'** in line with our understanding of the data","5e120cf3":"### Low Sales segment","21e133a0":"#### Big spike of more than Rs 30M seen on annual Black Friday sales in 2017 with smaller spikes of greater than Rs 10M seen on other public holidays and annual sales","f3508bc1":"#### The product category with the highest sales is \"Men's Fashion\" followed by \"Mobiles & Tablets\" and \"Beauty & Grooming\"","23063f23":"### Very Low Sales segment","121a17dd":"#### In the 'medium' sales segment, out of 83,389 transactions made by 17,385 customers, 7,278 or 42% of the customers made more than one purchase or were returning customers","6baf6ec8":"#### Mobiles & Tablets is the category which has highest number of transactions for 'high' sales segment","dcefdfcf":"#### Exploring all columns, finding and Imputing Null Values\n#### Categorical Variables","59de0a78":"#### The biggest segment in terms of number of customers is the 'low' sales segment with almost 36,000 customers belonging to this segment. 'very low' and medium' segment have close to 20,000 customers and the 'high' sales segment the lowest with around 5000 customers","896b8885":"#### 'cod' or Cash on Delivery is the most used method by customers belonging to this segment and almost 100M revenue out of total 136M is generated through this payment method.","6e96a933":"#### Biggest spike of Rs 0.5M seen on Black Friday sales in 2016. Smaller spikes seen around the annual deals offered on 'Black Friday' 2017 and around the holiday period of Eid-ul-Fitr","c61ccae7":"#### Choosing K for Kmeans","fbc4605c":"#### Convert the datatypes of columns","8d1d535f":"#### Total 80,122 unique customers did 'completed' transactions on the E-commerce store. 1 customer has spent Rs 35M with the next highest being close to Rs 5M. The customer who has spent Rs 35 has been considered as an outlier and not considered for further analysis.","d506dbf1":"#### 'cod' or Cash on Delivery still contributes about 1\/4th of the total revenue generated by this segment but other digital payment methods like Easypay_voucher, Payaxis, Easypay and bankalfalah have significant share in the overall revenue.","e72ee8ed":"#### 'cod' or Cash on Delivery is the preferred payment method for this segment. Other payment methods have a very small contribution towards the total revenue.","39b31783":"## Step 2: Customer Segmentation","0944ebc2":"#### Combining some options for the payment method column to reduce the labels for this column","4be53976":"##### Observations\n- Out of 26 columns, last 5 columns in the dataset contain NaN values for all records\n- Records at 464051 indices (from the bottom) contain NaN values for all columns\n- ' MV ' is an ambiguous column name with extra spaces\n- Some of the columns have incorrect data types\n\n##### Actions\n- Last 5 columns need to be dropped from the dataset\n- 464051 rows, containing NaN values need to be dropped from the dataset\n- Renamed the columns ' MV ' and 'category_name_1' to 'MV' and 'category_name'","16bd7b31":"##### Performing scaling for implementation of Kmeans","1a67a4a1":"#### The predictions would only be made for the 'completed' transactions","cf369066":"#### 'Mobiles & Tablets' is the most favourite product category in terms of revenue generated by the 'high' sales segment group and almost 3 times more revenue is generated as compared to the next product category 'Appliances. The pattern is very much similar to the pattern seen in the 'medium' sales segment","43a3ffba":"#### Out of 394M, almost 175M is collected through 'cod' or Cash on Delivery payment method but other payment methods have a better share for this segment than 'very low' and 'low' sales segments","ec33115f":"## Summary\nThe clustering algorithm focuses on segmentation based on spending within a particular product category and hence the results are a bit different from the overall spending. However, it gives a different insight into the spending patterns of customer segement witin the dataset.","e391f9c6":"##### Observations\n- There are a lot of labels for 'status' column.\n- Need to check if any relationship exists between 'status' and 'BI Status' columns"}}