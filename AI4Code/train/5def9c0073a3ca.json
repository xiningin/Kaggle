{"cell_type":{"5d6780bc":"code","0784dd23":"code","3ad9605f":"code","d8d1929c":"code","8165372d":"code","a6d16481":"code","1452b059":"code","7dcf46fd":"code","fbf28bcb":"code","badaf886":"code","590d28dc":"code","099a8caa":"code","7f878c02":"code","170bfc4e":"code","dad15e91":"code","1bda4e2c":"code","439e9c21":"code","80653108":"code","34f064f6":"code","5298f9cd":"code","0cd052e8":"code","fb683710":"code","d3c47769":"code","5d7cf50f":"code","67372278":"code","b16d2fbd":"code","9a02fcf8":"code","36fdba5d":"code","a69c6a50":"code","46889a7d":"code","cdb21c16":"code","ea7c0b66":"code","f9c990ea":"code","08d18438":"code","f33bd346":"code","d09e6cbd":"code","97ec2301":"code","e5abfaf5":"code","60920a77":"code","5b8dfec0":"code","d1ee91d9":"code","e01991d9":"code","53dc17af":"code","f7bffa5f":"markdown","e8d2c531":"markdown","5ae1cb21":"markdown","b00df108":"markdown","fe293dcb":"markdown","3bad72ce":"markdown","436492f0":"markdown","27566ac7":"markdown","b9077558":"markdown","8d4afb5b":"markdown","f9485eee":"markdown","a256ceb4":"markdown","278e19ae":"markdown","11aca1c1":"markdown","4e5b88b8":"markdown","acc69774":"markdown","68f8dcd5":"markdown","31871c98":"markdown","b35fae3f":"markdown","bfa27443":"markdown","407c70d9":"markdown","70aee206":"markdown","ddacf52c":"markdown","0c55d851":"markdown","0081cd00":"markdown","61d2686c":"markdown","0d813120":"markdown","f3e79195":"markdown","975e0fe1":"markdown","e5b2e90c":"markdown","b7a732e4":"markdown","801dcfa8":"markdown"},"source":{"5d6780bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0784dd23":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df =  pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_PassengerID = test_df[\"PassengerId\"]","3ad9605f":"train_df.columns","d8d1929c":"train_df.head()","8165372d":"train_df.describe()","a6d16481":"train_df.info()","1452b059":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))           ","7dcf46fd":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","fbf28bcb":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","badaf886":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","590d28dc":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","099a8caa":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","7f878c02":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","170bfc4e":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","dad15e91":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","1bda4e2c":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st Quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd Quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR \n        IQR = Q3 - Q1 \n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n            \n        ","439e9c21":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]\n","80653108":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","34f064f6":"train_df.head()","5298f9cd":"train_df.columns[train_df.isnull().any()]","0cd052e8":"train_df.isnull().sum()","fb683710":"train_df[train_df[\"Embarked\"].isnull()]","d3c47769":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","5d7cf50f":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","67372278":"train_df[train_df[\"Fare\"].isnull()]","b16d2fbd":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","9a02fcf8":"train_df[train_df[\"Fare\"].isnull()]","36fdba5d":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","a69c6a50":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)","46889a7d":"g = sns.factorplot(x=\"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","cdb21c16":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","ea7c0b66":"g = sns.FacetGrid(train_df,col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","f9c990ea":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2 )\ng.map(plt.hist,\"Age\", bins = 25)\ng.add_legend()\nplt.show()","08d18438":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","f33bd346":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","d09e6cbd":"train_df[train_df[\"Age\"].isnull()]","97ec2301":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","e5abfaf5":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","60920a77":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","5b8dfec0":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","d1ee91d9":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","e01991d9":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","53dc17af":"train_df[train_df[\"Age\"].isnull()]","f7bffa5f":"# Fill Missing: Age Feature","e8d2c531":"* Find Missing Value\n* Fill Missing Value","5ae1cb21":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","b00df108":"# Fill Missing Value","fe293dcb":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","3bad72ce":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","436492f0":"# Embarked -- Sex -- Pclass -- Survived","27566ac7":"* Pclass 1 have a lot survived probability.","b9077558":"# Visualization","8d4afb5b":"# Basic Data Analysis","f9485eee":"# Parch -- Survived","a256ceb4":"# Load and Check Data","278e19ae":"# SibSp -- Survived","11aca1c1":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.\n* Having less of SibSp have a lot chance to survive.","4e5b88b8":"# Categorical Variable","acc69774":"Fare feature seems to have correlation with survived feature (0.26)","68f8dcd5":"# Embarked -- Sex -- Fare -- Survived","31871c98":"# Missing Value","b35fae3f":"* Passsengers who pay higher fare have better survival. \n* Fare can be used as categorical for training\n* Embarked C seems to have a lot survived rate","bfa27443":"* Plass 3 have less survived and have died rate in their 20s ages.\n* pclass is important feature for model training.","407c70d9":"# Outlier Detection","70aee206":"# Pclass -- Survived -- Age","ddacf52c":"# Pclass -- Survived","0c55d851":"# Age -- Survived","0081cd00":"# Find Missing Value","61d2686c":"* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","0d813120":"**Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived**","f3e79195":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","975e0fe1":"# Numerical Variable","e5b2e90c":"* Embarked has 2 missing value\n* Fare has only 1","b7a732e4":"* Sex is not informative for age prediction, age distribution seems to be same.","801dcfa8":"* Female passengers have much better survival rate than males.\n* males have better survival rate in pclass 3 in C.\n* embarked and sex will be used in training."}}