{"cell_type":{"9e6edf68":"code","1a3f0cd3":"code","8ceffdb0":"code","cf9970be":"code","383af304":"code","49421b01":"code","aea26f20":"code","fba30c8c":"code","45a28e09":"code","cc142b46":"code","43b5d805":"code","a2088eb2":"code","8963206a":"code","bb9150a9":"code","94c126eb":"code","87acaaea":"code","3c89f331":"code","9372de47":"code","71360754":"code","5584f52c":"code","62829eb9":"code","a0554d1f":"code","b369b1b0":"code","ec9346a3":"code","66887471":"code","fa5b77a9":"code","c9143127":"code","76b8280c":"code","1d45ac8c":"code","17d61ca9":"code","45cb8495":"code","c1c50eb5":"code","49125e20":"code","fdae8305":"code","7fea3969":"code","8d19ddbb":"code","8d2c56f0":"code","2f69ef58":"code","ff312200":"code","c7ddba61":"code","b92212af":"code","cd85567f":"code","f7c3ecdd":"code","f2e50362":"code","70360d76":"code","52fbe9f9":"code","0cb8b12b":"code","5502b356":"code","b79b89b1":"code","c5db92d9":"code","a70a8342":"code","b728f087":"code","811cae7d":"code","4b6d9069":"code","20859d08":"code","cc58e2dd":"code","98d47993":"code","d1888294":"code","82c75b24":"code","9d1c2d07":"code","8f478cf9":"code","d9f86d99":"code","3af678cc":"code","2b793d80":"code","7774b14a":"markdown","97c6bba4":"markdown","96344cea":"markdown","366ea15c":"markdown","e4d6ef60":"markdown","06e88d1b":"markdown","1e159ec8":"markdown","960f1101":"markdown","39691550":"markdown","bc2fcf1a":"markdown","2cc7e0d4":"markdown","d5e18730":"markdown","a44fc2c7":"markdown","ab8db3db":"markdown","f1c8c131":"markdown","8392d0ee":"markdown","9ea498a3":"markdown","b0c2e943":"markdown","8134bff9":"markdown","03f02133":"markdown","a0cf8bd9":"markdown","1a995dbf":"markdown","b7c5e8e5":"markdown","a8aa5374":"markdown","6d27ed1e":"markdown","dc2d6841":"markdown","32753ebd":"markdown","a5e9d257":"markdown","c8273d76":"markdown","3507dc35":"markdown","e2270c4e":"markdown","18e4385f":"markdown","36d5cd44":"markdown","81e81dfc":"markdown","4134b163":"markdown","4122fb9f":"markdown","ca83e63a":"markdown","030a3014":"markdown","56aea659":"markdown","c3cad7a5":"markdown","d8dad788":"markdown","c767b72e":"markdown"},"source":{"9e6edf68":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings # Ignores any warning\nwarnings.filterwarnings(\"ignore\")\n!ls ..\/input\/bigmart-sales-data\ntrain = pd.read_csv(\"..\/input\/bigmart-sales-data\/Train.csv\") \ntest = pd.read_csv(\"..\/input\/bigmart-sales-data\/Test.csv\") ","1a3f0cd3":"train.head()","8ceffdb0":"train.info()","cf9970be":"train.describe()","383af304":"#Check for duplicates\nidsUnique = len(set(train.Item_Identifier))\nidsTotal = train.shape[0]\nidsDupli = idsTotal - idsUnique\nprint(\"There are \" + str(idsDupli) + \" duplicate IDs for \" + str(idsTotal) + \" total entries\")","49421b01":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(12,7))\nsns.distplot(train.Item_Outlet_Sales, bins = 25)\nplt.ticklabel_format(style='plain', axis='x', scilimits=(0,1))\nplt.xlabel(\"Item_Outlet_Sales\")\nplt.ylabel(\"Number of Sales\")\nplt.title(\"Item_Outlet_Sales Distribution\")\n","aea26f20":"print (\"Skew is:\", train.Item_Outlet_Sales.skew())\nprint(\"Kurtosis: %f\" % train.Item_Outlet_Sales.kurt())","fba30c8c":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.dtypes","45a28e09":"numeric_features.corr()","cc142b46":"corr = numeric_features.corr()\n\nprint (corr['Item_Outlet_Sales'].sort_values(ascending=False))","43b5d805":"#correlation matrix\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr, vmax=.8, square=True);","a2088eb2":"train.Item_Fat_Content.value_counts()","8963206a":"sns.countplot(train.Item_Fat_Content)\n","bb9150a9":"train.Item_Type.value_counts()","94c126eb":"sns.countplot(train.Item_Type)\nplt.xticks(rotation=90)","87acaaea":"train.Outlet_Size.value_counts()","3c89f331":"sns.countplot(train.Outlet_Size)","9372de47":"train.Outlet_Location_Type.value_counts()","71360754":"sns.countplot(train.Outlet_Location_Type)","5584f52c":"train.Outlet_Type.value_counts()","62829eb9":"sns.countplot(train.Outlet_Type)\nplt.xticks(rotation=90)","a0554d1f":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_Weight\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_Weight and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_Weight, train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","b369b1b0":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_Visibility\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_Visibility and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_Visibility, train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","ec9346a3":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_MRP\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_MRP and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_MRP, train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","66887471":"Outlet_Establishment_Year_pivot = \\\ntrain.pivot_table(index='Outlet_Establishment_Year', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Establishment_Year_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Establishment_Year\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Establishment_Year on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","fa5b77a9":"numeric_features = train.select_dtypes(include=[np.object])\nnumeric_features.dtypes","c9143127":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_Identifier\")\nplt.ylabel(\"SQRT Item_Outlet_Sales\")\nplt.title(\"Item_Identifier  and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_Identifier , train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","76b8280c":"Item_Fat_Content_pivot = \\\ntrain.pivot_table(index='Item_Fat_Content', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nItem_Fat_Content_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Item_Fat_Content\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Item_Fat_Content on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","1d45ac8c":"Outlet_Identifier_pivot = \\\ntrain.pivot_table(index='Outlet_Identifier', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Identifier_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Identifier \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Identifier on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","17d61ca9":"train.pivot_table(values='Outlet_Type', columns='Outlet_Identifier',aggfunc=lambda x:x.mode())","45cb8495":"train.pivot_table(values='Outlet_Type', columns='Outlet_Size',aggfunc=lambda x:x.mode())","c1c50eb5":"Outlet_Size_pivot = \\\ntrain.pivot_table(index='Outlet_Size', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Size_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Size \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Size on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","49125e20":"Outlet_Location_Type_pivot = \\\ntrain.pivot_table(index='Outlet_Location_Type', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Location_Type_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Location_Type \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Location_Type on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","fdae8305":"train.pivot_table(values='Outlet_Location_Type', columns='Outlet_Type',aggfunc=lambda x:x.mode())","7fea3969":"Outlet_Type_pivot = \\\ntrain.pivot_table(index='Outlet_Type', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Type_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Type \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Type on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","8d19ddbb":"pivoTable = \\\ntrain.pivot_table(index='Item_Type', values=\"Item_Outlet_Sales\", aggfunc=np.mean)\n\npivoTable.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Item_Type \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Item_Type on Item_Outlet_Sales\")\nplt.xticks(rotation=90)\nplt.show()","8d2c56f0":"pivoTable = \\\ntrain.pivot_table(index='Item_Type', values=\"Item_Visibility\", aggfunc=np.mean)\n\npivoTable.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Item_Type \")\nplt.ylabel(\"Item_Visibility\")\nplt.title(\"Item_Type vs Item_Visibility\")\nplt.xticks(rotation=90)\nplt.show()","2f69ef58":"# Join Train and Test Dataset\ntrain['source']='train'\ntest['source']='test'\n\ndata = pd.concat([train,test], ignore_index = True)\ndata.to_csv(\"data.csv\",index=False)\nprint(train.shape, test.shape, data.shape)","ff312200":" #aggfunc is mean by default! Ignores NA by default\nitem_avg_weight = data.pivot_table(values='Item_Weight', index='Item_Identifier')\nprint(item_avg_weight)","c7ddba61":"def impute_weight(cols):\n    Weight = cols[0]\n    Identifier = cols[1]\n    \n    if pd.isnull(Weight):\n        return item_avg_weight['Item_Weight'][item_avg_weight.index == Identifier]\n    else:\n        return Weight","b92212af":"print ('Orignal #missing: %d'%sum(data['Item_Weight'].isnull()))\ndata['Item_Weight'] = data[['Item_Weight','Item_Identifier']].apply(impute_weight,axis=1).astype(float)\nprint ('Final #missing: %d'%sum(data['Item_Weight'].isnull()))","cd85567f":"#Import mode function:\nfrom scipy.stats import mode\n\n#Determing the mode for each\noutlet_size_mode = data.pivot_table(values='Outlet_Size', columns='Outlet_Type',aggfunc=lambda x:x.mode())\noutlet_size_mode","f7c3ecdd":"def impute_size_mode(cols):\n    Size = cols[0]\n    Type = cols[1]\n    if pd.isnull(Size):\n        return outlet_size_mode.loc['Outlet_Size'][outlet_size_mode.columns == Type][0]\n    else:\n        return Size\n\nprint ('Orignal #missing: %d'%sum(data['Outlet_Size'].isnull()))\ndata['Outlet_Size'] = data[['Outlet_Size','Outlet_Type']].apply(impute_size_mode,axis=1)\nprint ('Final #missing: %d'%sum(data['Outlet_Size'].isnull()))","f2e50362":"#Creates pivot table with Outlet_Type and the mean of Item_Outlet_Sales. Agg function is by default mean()\ndata.pivot_table(values='Item_Outlet_Sales', columns='Outlet_Type')","70360d76":"#Get all Item_Visibility mean values for respective Item_Identifier\nvisibility_item_avg = data.pivot_table(values='Item_Visibility',index='Item_Identifier')","52fbe9f9":"def impute_visibility_mean(cols):\n    visibility = cols[0]\n    item = cols[1]\n    if visibility == 0:\n        return visibility_item_avg['Item_Visibility'][visibility_item_avg.index == item]\n    else:\n        return visibility\n\nprint ('Original #zeros: %d'%sum(data['Item_Visibility'] == 0))\ndata['Item_Visibility'] = data[['Item_Visibility','Item_Identifier']].apply(impute_visibility_mean,axis=1).astype(float)\nprint ('Final #zeros: %d'%sum(data['Item_Visibility'] == 0))","0cb8b12b":"#Years:\ndata['Outlet_Years'] = 2013 - data['Outlet_Establishment_Year']\ndata['Outlet_Years'].describe()","5502b356":"#Get the first two characters of ID:\ndata['Item_Type_Combined'] = data['Item_Identifier'].apply(lambda x: x[0:2])\n#Rename them to more intuitive categories:\ndata['Item_Type_Combined'] = data['Item_Type_Combined'].map({'FD':'Food',\n                                                             'NC':'Non-Consumable',\n                                                             'DR':'Drinks'})\ndata['Item_Type_Combined'].value_counts()","b79b89b1":"#Change categories of low fat:\nprint('Original Categories:')\nprint(data['Item_Fat_Content'].value_counts())\n\nprint('\\nModified Categories:')\ndata['Item_Fat_Content'] = data['Item_Fat_Content'].replace({'LF':'Low Fat',\n                                                             'reg':'Regular',\n                                                             'low fat':'Low Fat'})\n\nprint(data['Item_Fat_Content'].value_counts())","c5db92d9":"#Mark non-consumables as separate category in low_fat:\ndata.loc[data['Item_Type_Combined']==\"Non-Consumable\",'Item_Fat_Content'] = \"Non-Edible\"\ndata['Item_Fat_Content'].value_counts()","a70a8342":"func = lambda x: x['Item_Visibility']\/visibility_item_avg['Item_Visibility'][visibility_item_avg.index == x['Item_Identifier']][0]\ndata['Item_Visibility_MeanRatio'] = data.apply(func,axis=1).astype(float)\ndata['Item_Visibility_MeanRatio'].describe()","b728f087":"#Import library:\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n#New variable for outlet\ndata['Outlet'] = le.fit_transform(data['Outlet_Identifier'])\nvar_mod = ['Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Item_Type_Combined','Outlet_Type','Outlet']\nle = LabelEncoder()\nfor i in var_mod:\n    data[i] = le.fit_transform(data[i])","811cae7d":"#Dummy Variables:\ndata = pd.get_dummies(data, columns=['Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Outlet_Type',\n                              'Item_Type_Combined','Outlet'])\n\ndata.dtypes","4b6d9069":"#Drop the columns which have been converted to different types:\ndata.drop(['Item_Type','Outlet_Establishment_Year'],axis=1,inplace=True)\n\n#Divide into test and train:\ntrain = data.loc[data['source']==\"train\"]\ntest = data.loc[data['source']==\"test\"]\n\n#Drop unnecessary columns:\ntest.drop(['Item_Outlet_Sales','source'],axis=1,inplace=True)\ntrain.drop(['source'],axis=1,inplace=True)\n\n#Export files as modified versions:\ntrain.to_csv(\"train_modified.csv\",index=False)\ntest.to_csv(\"test_modified.csv\",index=False)","20859d08":"train_df = pd.read_csv('train_modified.csv')\ntest_df = pd.read_csv('test_modified.csv')","cc58e2dd":"#Define target and ID columns:\ntarget = 'Item_Outlet_Sales'\nIDcol = ['Item_Identifier','Outlet_Identifier']\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_validate\n\n\ndef modelfit(alg, dtrain, dtest, predictors, target, IDcol, filename):\n    #Fit the algorithm on the data\n    alg.fit(dtrain[predictors], dtrain[target])\n        \n    #Predict training set:\n    dtrain_predictions = alg.predict(dtrain[predictors])\n\n    #Perform cross-validation:\n    cv_score = cross_validate(alg, dtrain[predictors],(dtrain[target]) , cv=20, scoring='neg_mean_squared_error')\n    cv_score = np.sqrt(np.abs(cv_score['test_score']))\n    \n    #Print model report:\n    print(\"\\nModel Report\")\n    print(\"RMSE : %.4g\" % np.sqrt(metrics.mean_squared_error((dtrain[target]).values, dtrain_predictions)))\n    print(\"CV Score : Mean - %.4g | Std - %.4g | Min - %.4g | Max - %.4g\" % (np.mean(cv_score),np.std(cv_score),np.min(cv_score),np.max(cv_score)))\n    \n    #Predict on testing data:\n    dtest[target] = alg.predict(dtest[predictors])\n    \n    #Export submission file:\n    IDcol.append(target)\n    submission = pd.DataFrame({ x: dtest[x] for x in IDcol})\n    submission.to_csv(filename, index=False)","98d47993":"from sklearn.linear_model import LinearRegression\nLR = LinearRegression(normalize=True)\n\npredictors = train_df.columns.drop(['Item_Outlet_Sales','Item_Identifier','Outlet_Identifier'])\nmodelfit(LR, train_df, test_df, predictors, target, IDcol, 'LR.csv')\n\ncoef1 = pd.Series(LR.coef_, predictors).sort_values()\ncoef1.plot(kind='bar', title='Model Coefficients')","d1888294":"from sklearn.linear_model import Ridge\nRR = Ridge(alpha=0.05,normalize=True)\nmodelfit(RR, train_df, test_df, predictors, target, IDcol, 'RR.csv')\n\ncoef2 = pd.Series(RR.coef_, predictors).sort_values()\ncoef2.plot(kind='bar', title='Model Coefficients')","82c75b24":"from sklearn.tree import DecisionTreeRegressor\nDT = DecisionTreeRegressor(max_depth=15, min_samples_leaf=100)\nmodelfit(DT, train_df, test_df, predictors, target, IDcol, 'DT.csv')\n\ncoef3 = pd.Series(DT.feature_importances_, predictors).sort_values(ascending=False)\ncoef3.plot(kind='bar', title='Feature Importances')","9d1c2d07":"RF = DecisionTreeRegressor(max_depth=8, min_samples_leaf=150)\nmodelfit(RF, train_df, test_df, predictors, target, IDcol, 'RF.csv')\n\ncoef4 = pd.Series(RF.feature_importances_, predictors).sort_values(ascending=False)\ncoef4.plot(kind='bar', title='Feature Importances')","8f478cf9":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(n_estimators=2500, learning_rate=.02, tree_method='gpu_hist', objective='reg:squarederror', n_jobs=10, colsample_bytree=.8, max_depth=8, random_state=42, importance_type='total_gain', reg_alpha=.5)\nxgb.fit(train_df[predictors], train_df[target], early_stopping_rounds=10, \n             eval_set=[(test_df[predictors], test_df[target])], verbose=False)\n\n","d9f86d99":"#Predict training set:\ntrain_df_predictions = xgb.predict(train_df[predictors])\n\n# make predictions\npredictions = xgb.predict(test_df[predictors])\n","3af678cc":"from sklearn.metrics import mean_absolute_error\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, test_df[target])))\nprint(\"RMSE : %.4g\" % np.sqrt(metrics.mean_squared_error((train_df[target]).values, train_df_predictions)))","2b793d80":"    IDcol.append(target)\n    submission = pd.DataFrame({ x: test_df[x] for x in IDcol})\n    submission.to_csv(\"XGboost.csv\", index=False)","7774b14a":"<h4> 4.3. Exporting Data<\/h4>\n","97c6bba4":"<h5>1.2.1.3. Item_MRP and Item_Outlet_Sales Analysis<\/h5>","96344cea":"## Project #1: Bigmart Sale Prediction","366ea15c":"<h4> 3.1. Should we combine Outlet_Type?<\/h4>\n","e4d6ef60":"<h5>1.2.2.1. Impact of Item_Identifier on Item_Outlet_Sales<\/h5>","06e88d1b":"<h5>1.2.1.4. Outlet_Establishment_Year and Item_Outlet_Sales Analysis<\/h5>","1e159ec8":"<h5>1.2.2.5. Impact of Outlet_Location_Type on Item_Outlet_Sales<\/h5>","960f1101":"<h3> 2.3. Imputing Outlet_size with the mode<\/h3>\n","39691550":"<h3> 2.2. Imputing Missing Values <\/h3>","bc2fcf1a":"<h4 style = \"text-align:justify;font-family:Verdana;font-size:14px\">\nRandom Forest Model\n<\/h4>","2cc7e0d4":"<h4>1.1.3. Categorical Variables<\/h4>\n<h5>1.1.3.1. Distribution of the Item_Fat_Content<\/h5>","d5e18730":"<h2>2. Data Pre-Processing<\/h2>\n<h3> 2.1. Looking for missing\u00a0values<\/h3>","a44fc2c7":"<h5>1.2.2.2. Impact of Item_Fat_Content on Item_Outlet_Sales<\/h5>","ab8db3db":"<h4 style = \"text-align:justify;font-family:Verdana;font-size:14px\">\nLinear Regression Model\n<\/h4>","f1c8c131":"<h5>1.1.3.2. Distribution of the Item_Type<\/h5>","8392d0ee":"<h4> 3.5. Modify categories of Item_Fat_Content<\/h4>\n","9ea498a3":"<h3>1.2. Bivariate Distribution<\/h3>\n<h4>1.2.1. Numerical Variables<\/h4>\n<h5>1.2.1.1. Item_Weight and Item_Outlet_Sales Analysis<\/h5>","b0c2e943":"<h2>5. Model, predict and solve the problem<\/h2>","8134bff9":"<h2>3. Feature Engineering<\/h2>","03f02133":"<h4 style = \"text-align:justify;font-family:Verdana;font-size:14px\">\nxgboost\n<\/h4>","a0cf8bd9":"<h2>1. Exploratory Data Analysis (EDA)<\/h2>\n<h3>1.1. Univariate Distribution<\/h3>\n<h4>1.1.1.  Distribution of the target variable\u00a0: Item_Outlet_Sales<\/h4>","1a995dbf":"<h5>1.2.2.7. Impact of Item_Type on Item_Outlet_Sales<\/h5>","b7c5e8e5":"<a id = \"#viewdata\"><\/a>\n<h2>Taking a peak at our data<\/h2>","a8aa5374":"<h4> 4.1. Creating variable Item_Visibility_MeanRatio<\/h4>","6d27ed1e":"<h5>1.2.2.8. Impact of Item_Type vs Item_Visibility<\/h5>","dc2d6841":"<h5>1.2.2.4. Impact of Outlet_Size on Item_Outlet_Sales<\/h5>","32753ebd":"<h4> 3.2. Item_Visibility minimum value 0<\/h4>","a5e9d257":"<h4>1.1.2. Numerical Variables<\/h4>\n","c8273d76":"<h4> 4.2. Numerical and Categorical Variables \u2013 Dummy variables<\/h4>","3507dc35":"<a id = \"#initialization\"><\/a>\n<h2>Initializing Packages and Importing Data<\/h2>","e2270c4e":"<h2>4. Feature Transformations<\/h2>","18e4385f":"<h5>1.2.1.2. Item_Visibility and Item_Outlet_Sales Analysis<\/h5>","36d5cd44":"<h5>1.2.2.6. Impact of Outlet_Type on Item_Outlet_Sales<\/h5>","81e81dfc":"<h4>1.2.2. Categorial Variables<\/h4>","4134b163":"<h5>1.1.3.4. Distribution of the Outlet_Location_Type<\/h5>","4122fb9f":"<h5>1.1.3.3. Distribution of the Outlet_Size<\/h5>","ca83e63a":"<h4 style = \"text-align:justify;font-family:Verdana;font-size:14px\">\nRidge Regression Model\n<\/h4>","030a3014":"<h5>1.1.3.5. Distribution of the Outlet_Type<\/h5>","56aea659":"<h5>1.2.2.3. Impact of Outlet_Identifier on Item_Outlet_Sales<\/h5>","c3cad7a5":"<h4 style = \"text-align:justify;font-family:Verdana;font-size:14px\">\nDecision Tree Model\n<\/h4>","d8dad788":"<h4> 3.4. Create a broad category of Type of Item<\/h4>","c767b72e":"<h4> 3.3. Determine the years of operation of a store<\/h4>\n"}}