{"cell_type":{"e844b18d":"code","2693a7ae":"code","8ff18ecf":"code","a69c2370":"code","0e9b02d9":"code","2b6684bc":"code","b0d338a1":"code","8094cbca":"code","b391a877":"code","26d429ba":"code","a90f3adb":"code","c0860c43":"code","a1fa1e1a":"code","ecbf90c4":"code","00329c92":"code","00f6ec23":"code","22d27d80":"code","e4ba14d4":"code","d64644ea":"code","939ac05c":"markdown","dec4164c":"markdown","33bd59fe":"markdown","176b5090":"markdown","d4248ed0":"markdown","61060475":"markdown"},"source":{"e844b18d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport tensorflow as tf\nfrom sklearn.utils import shuffle","2693a7ae":"res = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WNCAATourneyCompactResults.csv')\nseed = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WNCAATourneySeeds.csv')\n\nseason_res = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WRegularSeasonCompactResults.csv')\n\ntest = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WSampleSubmissionStage1_2020.csv')","8ff18ecf":"season_res.head()","a69c2370":"def prepare(df, seed, season_score):\n    merged = pd.merge(df, seed, left_on = ['Season', 'WTeamID'], right_on = ['Season', 'TeamID'], how = 'left')\n    merged.rename(columns = {'Seed':'WSeed'}, inplace = True)\n    merged.drop(['TeamID'], axis = 1, inplace = True)\n    merged = pd.merge(merged, seed, left_on = ['Season', 'LTeamID'], right_on = ['Season', 'TeamID'], how = 'left')\n    merged.rename(columns = {'Seed':'LSeed'}, inplace = True)\n    merged.drop(['TeamID'], axis = 1, inplace = True)\n    \n    merged['WSeed'] = merged['WSeed'].apply(lambda x: int(x[1:3]))\n    merged['LSeed'] = merged['LSeed'].apply(lambda x: int(x[1:3]))\n    \n    merged = pd.merge(merged, season_score, left_on = ['Season', 'WTeamID'], right_on = ['Season', 'TeamID'], how = 'left')\n    merged.rename(columns = {'Score':'WScoreT'}, inplace = True)\n    merged.drop(['TeamID'], axis = 1, inplace = True)\n    merged = pd.merge(merged, season_score, left_on = ['Season', 'LTeamID'], right_on = ['Season', 'TeamID'], how = 'left')\n    merged.rename(columns = {'Score':'LScoreT'}, inplace = True)\n    merged.drop(['TeamID'], axis = 1, inplace = True)\n    \n    return merged","0e9b02d9":"# Drop irrelevant columns\nres.drop(['DayNum', 'NumOT', 'WLoc', 'WScore', 'LScore'], axis = 1, inplace = True)","2b6684bc":"season_res_w = season_res[['Season', 'WScore', 'WTeamID']]\nseason_res_l = season_res[['Season', 'LScore', 'LTeamID']]\nseason_res_w.rename(columns = {'WScore':'Score', 'WTeamID':'TeamID'}, inplace = True)\nseason_res_l.rename(columns = {'LScore':'Score', 'LTeamID':'TeamID'}, inplace = True)\nseason_res = pd.concat((season_res_w, season_res_l)).reset_index(drop = True)\nseason_score = season_res.groupby(['Season', 'TeamID']).sum().reset_index()","b0d338a1":"# Extracting Season, Winning Team Id, Losing Team Id form test csv file\ntest['Season'] = test['ID'].map(lambda x: int(x[:4]))\ntest['WTeamID'] = test['ID'].map(lambda x: int(x[5:9]))\ntest['LTeamID'] = test['ID'].map(lambda x: int(x[10:14]))","8094cbca":"df = prepare(res, seed, season_score)\ndf_test = prepare(test, seed, season_score)","b391a877":"df.drop(['Season', 'WTeamID', 'LTeamID'], inplace = True, axis = 1)\ndf_test.drop(['ID', 'Season', 'WTeamID', 'LTeamID'], inplace = True, axis = 1)","26d429ba":"wins = df\nloss = wins.copy()\n\nloss['WSeed'] = wins['LSeed']\nloss['LSeed'] = wins['WSeed']\nloss['WScoreT'] = wins['LScoreT']\nloss['LScoreT'] = wins['WScoreT']\n\nwins['Margin'] = wins['WScoreT'] - wins['LScoreT']\nloss['Margin'] = loss['WScoreT'] - loss['LScoreT']\nwins['Margin_seed'] = wins['WSeed'] - wins['LSeed']\nloss['Margin_seed'] = loss['WSeed'] - loss['LSeed']\n\nwins['result'] = 1\nloss['result'] = 0\n\ntrain = pd.concat((wins, loss)).reset_index(drop = True)\nx_train = train.drop(['result'], axis = 1)\ny_train = train['result']","a90f3adb":"# Shuffle to avoid bias\nfrom sklearn.utils import shuffle\nx_train, y_train = shuffle(x_train, y_train)","c0860c43":"# Extracting additionsl features\ndf_test['Margin'] = df_test['WScoreT'] - df_test['LScoreT']\ndf_test['Margin_seed'] = df_test['WSeed'] - df_test['LSeed']","a1fa1e1a":"df_test.drop(['Pred'], axis = 1, inplace = True)","ecbf90c4":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nx_train['WScoreT'] = scaler.fit_transform(x_train['WScoreT'].to_numpy().reshape(-1, 1))\nx_train['LScoreT'] = scaler.fit_transform(x_train['LScoreT'].to_numpy().reshape(-1, 1))\n\ndf_test['WScoreT'] = scaler.fit_transform(df_test['WScoreT'].to_numpy().reshape(-1, 1))\ndf_test['LScoreT'] = scaler.fit_transform(df_test['LScoreT'].to_numpy().reshape(-1, 1))","00329c92":"model = tf.keras.models.Sequential([ \n    tf.keras.layers.Dense(128, input_shape=(6,), activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),     \n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.summary()","00f6ec23":"model.compile(loss='binary_crossentropy',optimizer=tf.keras.optimizers.Adam(0.0001))","22d27d80":"history = model.fit(x_train, y_train,\n                    epochs=100,\n                    verbose=0)","e4ba14d4":"# Prediction\n\ny_test = model.predict(df_test)\n\nsub = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WSampleSubmissionStage1_2020.csv')\n\nsub['Pred'] = y_test\nsub['Pred'].hist()","d64644ea":"sub.to_csv('submission.csv', index = False)","939ac05c":"## Preprocessing","dec4164c":"# Neural Network Starter for NCAA March Madness\n![](https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/2\/28\/March_Madness_logo.svg\/440px-March_Madness_logo.svg.png)\n#### Credits - [https:\/\/www.kaggle.com\/hiromoon166\/2020-women-s-starter-kernel](https:\/\/www.kaggle.com\/hiromoon166\/2020-women-s-starter-kernel)","33bd59fe":"## Scaling Score data ","176b5090":"## Labelling Training Data","d4248ed0":"## Utility function for preprocessing\n1. Match Teams with their respective seed\n2. Match Teams with their season scores","61060475":"## Reading .csv Files\n* Compact Results - Winner\/Loser, Points, etc\n* Seeds - A seed is a competitor or team in a sport or other tournament who is given a preliminary ranking for the purposes of the draw.\n* Season Results - Total Points throughout the seasons"}}