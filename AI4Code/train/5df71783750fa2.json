{"cell_type":{"45709b7d":"code","76c366b7":"code","d7cf442c":"code","9d60cc4a":"code","fc170f83":"markdown","c9abffc4":"markdown","88d94824":"markdown"},"source":{"45709b7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pprint import pprint\n#import zipfile\nimport time\n#import json\nimport io\ng = 0\n\neventdir = '..\/input\/baseball-events-from-retrosheetorg\/'\ngamedir = '..\/input\/baseball-events-from-retrosheetorg\/gl1871_2020\/'\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nroster_columns_names = ['playerID', 'nameLast', 'nameFirst', 'batting_hand', 'throwing_hand', 'team', 'position']\n\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\nprint('Packages loaded!')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","76c366b7":"s = time.time()\n#[x for x in os.listdir(eventdir) if x[-4:] == '.csv']\nteams_df = pandas.read_csv(eventdir+'teamids.csv', header=None)\nteams_df.columns = ['teamID','league','city','nickname','yearFirst','yearLast']\nteams_df = teams_df.drop(0)\nteams_df.loc[:, 'yearFirst'] = pandas.to_numeric(teams_df['yearFirst'], errors='coerce', downcast='integer')\nteams_df.loc[:, 'yearLast'] = pandas.to_numeric(teams_df['yearLast'], errors='coerce', downcast='integer')\n#teams_df = teams_df.set_index('teamID')\n\nteams_nicknames_df = pandas.read_csv(eventdir+'teams_nicknames.csv')\nteams_nicknames_df.index.name = 'nicknameID'\n\nballparks_df = pandas.read_csv(eventdir+'ballparks.csv')\nballparks_df.columns = [x.lower() for x in ballparks_df.columns]\nballparks_df = ballparks_df.rename(columns={'parkid': 'parkID'})\nballparks_df = ballparks_df.set_index('parkID')\n\nbiodata_df = pandas.read_csv(eventdir+'biodata.csv')\nbiodata_df.columns = [x.lower().replace(' ','_') for x in biodata_df.columns]\n\nprint('\\tfixing columns and data types...')\nbiodata_df = biodata_df.rename(columns={'playerid': 'playerID', 'last': 'nameLast', 'first':'nameFirstMiddle', 'play_debut': 'player_debut', 'play_lastgame': 'player_lastgame'})\nfor x in [x for x in biodata_df.columns if (('debut' in x) or ('lastgame') in x)]:\n    biodata_df.loc[:, x] = pandas.to_datetime(biodata_df[x], errors='coerce')\nbiodata_df = biodata_df.assign(nameFirst = biodata_df['nameFirstMiddle'].apply(lambda x: str(x).split(' ')[0]))\nbiodata_df = biodata_df.assign(nameMiddle = biodata_df[biodata_df['nameFirstMiddle'].apply(lambda x: str(x).find(\" \")) > -1]['nameFirstMiddle'].apply(lambda x: str(x).split(\" \")[1]))\nbiodata_df.loc[:, 'nameMiddle'] = biodata_df['nameMiddle'].fillna('')\nbiodata_df = biodata_df.assign(height_inches = biodata_df['height'].dropna().apply(lambda x: float(x.split('-')[0])*12+float(x.split('-')[1])))\nbiodata_df.loc[biodata_df['hof'] == 'HOF', 'hof'] = True\nbiodata_df.loc[biodata_df['hof'] == 'NOT', 'hof'] = False\nbiodata_df.loc[:, 'HOF'] = biodata_df['hof'].astype('bool')\n\nprint('\\tfinding players vs. non-players...')\nbiodata_df = biodata_df.assign(is_player = np.nan)\nbiodata_df.loc[biodata_df['player_debut'].notnull(), 'is_player'] = True\nbiodata_df.loc[biodata_df['player_debut'].isnull(), 'is_player'] = False\nprint('fixing duplicate(s)...')\nbiodata_df.loc[(biodata_df['playerID'] == 'leppd101') & (biodata_df['nameFirstMiddle'] == 'Donald George'), 'playerID'] = 'leppd102'\n#biodata_df\n\nprint('saving output data...')\nteams_df.to_csv('teams.csv', encoding='utf-8')\nteams_nicknames_df.to_csv('teams_nicknames.csv', encoding='utf-8')\nballparks_df.to_csv('ballparks.csv', encoding='utf-8')\nbiodata_df.to_csv('biodata.csv', encoding='utf-8')\n\ne = time.time()\n\nprint('Read and saved:')\nprint('\\t{0:,.0f} teams'.format(len(teams_df)))\nprint('\\t{0:,.0f} nicknames'.format(len(teams_nicknames_df)))\nprint('\\t{0:,.0f} ballparks'.format(len(ballparks_df)))\nprint('\\t{0:,.0f} biographies'.format(len(biodata_df)))\nprint('in {0:,.1f} seconds!'.format(e-s))\n#teams_df\n#teams_df[teams_df['yearLast'].apply(lambda x: int(x) == np.nan)]#.dtypes","d7cf442c":"s = time.time()\nfirstyear = 1903\nfinalyear = 2020\n\nroster_df = pandas.DataFrame(data=None, columns=roster_columns_names)\nunsorted_rosterfiles = []\nsorted_rosterfiles = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if (filename[-4:] == '.ROS'):\n            unsorted_rosterfiles.append('{0:}\/{1:}'.format(dirname,filename))\n#        print([x for x in os.path.join(dirname, filename) if x[-4:] == '.ROS'])\n\nyearset = sorted(set([int(x[-8:-4]) for x in unsorted_rosterfiles if x[-8] in ['1', '2']]))\n\n\nfor thisyear in yearset:\n    sorted_rosterfiles += sorted([x for x in unsorted_rosterfiles if ((x[-8:-4] == str(thisyear)) & (x.split('\/')[-2] not in ['allas', 'allpost']))])\n    sorted_rosterfiles += sorted([x for x in unsorted_rosterfiles if ((x[-8:-4] == str(thisyear)) & (x.split('\/')[-2] == 'allas'))])\n    sorted_rosterfiles += sorted([x for x in unsorted_rosterfiles if ((x[-8:-4] == str(thisyear)) & (x.split('\/')[-2] == 'allpost'))])\ne = time.time()\ng += e-s\n\nprint('Found {0:,.0f} files in {1:.1f} seconds!'.format(len(sorted_rosterfiles), e-s))\n\n\ns = time.time()\nrosters_df = pandas.DataFrame()\n\ncurrent_year = firstyear\n\nfor thisfile in sorted_rosterfiles:\n    #print(thisfile)\n    this_roster_df = pandas.read_csv(thisfile, names=roster_columns_names, header=None)\n    this_roster_df = this_roster_df[(this_roster_df['playerID'] != '\\x1a')]\n#     this_roster_df = this_roster_df.assign(allstargame = False)\n#     this_roster_df = this_roster_df.assign(postseason = False)\n    thisyear = int(thisfile[-8:-4])\n    #print(thisyear)\n    if (thisyear != current_year):\n        if (np.mod(thisyear, 10) == 0):\n            print('Reading roster files from {0:.0f}...'.format(thisyear))\n        current_year = thisyear\n#     if (current_year > 1960):\n#         break\n    this_roster_df = this_roster_df.assign(theyear = thisyear)\n    if (thisyear == firstyear):\n        this_roster_df.loc[:, 'team'] = thisfile[-11:-8]\n        rosters_df = pandas.concat((rosters_df, this_roster_df), axis=0)\n    else:\n        if ('allas' in thisfile):\n#            this_roster_df.loc[:, 'allstargame'] = True\n            if (len(this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))]) > 0):\n                #print(thisfile)\n                if (thisyear == 1949):\n                    roster_df = pandas.concat((roster_df, this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))]), axis=0)\n                else:\n                    print('\\t{0:.0f}: Found {1:.0f} players in all-star game not on regular season roster!'.format(thisyear, len(this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))])))\n                    print(this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))])\n        elif ('allpost' in thisfile):\n#            this_roster_df.loc[:, 'postseason'] = True\n            if (len(this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))]) > 0):\n#                print(thisfile[-11:-8])\n                if (thisyear >= 1915):\n                    print('\\t{0:.0f}: Found {1:.0f} players in postseason not on regular season roster!'.format(thisyear, len(this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))])))\n                this_roster_df.loc[:, 'team'] = thisfile[-11:-8]\n                if (thisyear == 1945):\n                    this_roster_df.loc[(this_roster_df['playerID'] == 'mccuc101'), 'position'] = 'PH'\n                    rosters_df = pandas.concat((rosters_df, this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))]), axis=0)\n                elif ((thisyear < 1915) | (thisyear == 1949)):\n                    rosters_df = pandas.concat((rosters_df, this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))]), axis=0)\n                else:\n                    print(this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))])\n                    #print(this_roster_df[(~this_roster_df['playerID'].isin(rosters_df[(rosters_df['theyear'] == thisyear)]['playerID'].tolist()))])\n#                 rosters_df = pandas.concat((rosters_df, this_roster_df), axis=0)\n        else:\n            rosters_df = pandas.concat((rosters_df, this_roster_df), axis=0)\n\nprint('dropping weird duplicates...')\nrosters_df = rosters_df.drop(rosters_df[(rosters_df['playerID'] == 'rackm101') & (rosters_df['theyear'] == 1949)].tail(1).index)\nrosters_df = rosters_df.drop(rosters_df[(rosters_df['playerID'] == 'donap101') & (rosters_df['theyear'] == 1910)].tail(1).index)\nrosters_df = rosters_df.drop(rosters_df[(rosters_df['playerID'] == 'robed004') & (rosters_df['theyear'] == 2019)].tail(1).index)\nrosters_df = rosters_df.drop(rosters_df[(rosters_df['playerID'] == 'powem102') & (rosters_df['theyear'] == 1905)].tail(1).index)\nrosters_df = rosters_df.drop(rosters_df[(rosters_df['playerID'] == 'crand101') & (rosters_df['theyear'] == 1913)].tail(1).index)\n\n#rosters_df.groupby(['playerID', 'theyear', 'team']).size().sort_values(ascending=False)[0:5]\n\nrosters_df = rosters_df.reset_index(drop=True)\nrosters_df.index.name = 'rownumber'\n\nprint('saving rosters...')\nrosters_df.to_csv('rosters.csv', encoding='utf-8')\ne = time.time()\nprint('Parsed and saved {0:,.0f} roster rows in {1:,.1f} seconds!'.format(len(rosters_df), e-s))\n#rosters_df.sample(5)\n\n#rosters_df.groupby(['playerID', 'theyear', 'team']).size().sort_values(ascending=False)\n#rosters_df[rosters_df['theyear'] == 1903]","9d60cc4a":"s = time.time()\n\nfirstyear = 1874\nfinalyear = 2020\n\n\nfilenames = []\nprint('Finding filenames...')\n# for thisyear in years:\n#     filenames.append('GL'+str(thisyear)+'.TXT')\n\ngamedata_df = pandas.DataFrame()\n\nprint(gamedir)\nfilenames = sorted([gamedir+x for x in os.listdir(gamedir)])\n\nprint('Found {0:,.0f} files...'.format(len(filenames)))\nfor thisfile in filenames:\n    thisyear = int(thisfile[-8:-4])\n    if (np.mod(thisyear, 20) == 0):\n        print('\\tParsing game logs from {0:.0f}...'.format(thisyear))\n    df = pandas.read_csv(thisfile, header=None, dtype={19: str, 20:str})\n    gamedata_df = pandas.concat((gamedata_df, pandas.read_csv(thisfile, header=None)), axis=0)\n\n# Columns given at http:\/\/www.retrosheet.org\/gamelogs\/glfields.txt\ncolnames = ['date','gameno','dayofweek']\ncolnames += ['visitor','visitor_league','visitor_gameno']\ncolnames += ['home','home_league','home_gameno']\ncolnames += ['visitor_score','home_score']\ncolnames += ['nOuts','day_night','completed','forfeit','protest','parkID','attendance','length']\ncolnames += ['visitor_linescore','home_linescore']\ncolnames += ['visitor_ab','visitor_h','visitor_2b','visitor_3b','visitor_hr']\ncolnames += ['visitor_rbi','visitor_sac','visitor_sacfly','visitor_hbp']\ncolnames += ['visitor_bb','visitor_ibb','visitor_k','visitor_sb','visitor_cs']\ncolnames += ['visitor_gidp','visitor_ci','visitor_lob','visitor_nPitchers']\ncolnames += ['visitor_er_ind','visitor_er_team','visitor_wp','visitor_balk']\ncolnames += ['visitor_putout','visitor_assist','visitor_e','visitor_pb']\ncolnames += ['visitor_dp','visitor_tp','home_ab','home_h','home_2b','home_3b']\ncolnames += ['home_hr','home_rbi','home_sac','home_sacfly','home_hbp','home_bb']\ncolnames += ['home_ibb','home_k','home_sb','home_cs','home_gidp','home_ci']\ncolnames += ['home_lob','home_nPitchers','home_er_ind','home_er_team','home_wp']\ncolnames += ['home_balk','home_putout','home_assist','home_e','home_pb']\ncolnames += ['home_dp','home_tp']\ncolnames += ['ump_home_id','ump_home_name','ump_1b_id']\ncolnames += ['ump_1b_name','ump_2b_id','ump_2b_name','ump_3b_id','ump_3b_name']\ncolnames += ['ump_lf_id','ump_lf_name','ump_rf_id','ump_rf_name']\ncolnames += ['visitor_manager_id','visitor_manager_name','home_manager_id','home_manager_name']\ncolnames += ['winning_pitcher_id','winning_pitcher_name','losing_pitcher_id']\ncolnames += ['losing_pitcher_name','saving_pitcher_id','saving_pitcher_name']\ncolnames += ['gw_rbi_batter_id','gw_rbi_batter_name','visitor_starting_pitcher_id']\ncolnames += ['visitor_starting_pitcher_name','home_starting_pitcher_id']\ncolnames += ['home_starting_pitcher_name']\ncolnames += ['visitor_batter1_id','visitor_batter1_name','visitor_batter1_pos']\ncolnames += ['visitor_batter2_id','visitor_batter2_name','visitor_batter2_pos']\ncolnames += ['visitor_batter3_id','visitor_batter3_name','visitor_batter3_pos']\ncolnames += ['visitor_batter4_id','visitor_batter4_name','visitor_batter4_pos']\ncolnames += ['visitor_batter5_id','visitor_batter5_name','visitor_batter5_pos']\ncolnames += ['visitor_batter6_id','visitor_batter6_name','visitor_batter6_pos']\ncolnames += ['visitor_batter7_id','visitor_batter7_name','visitor_batter7_pos']\ncolnames += ['visitor_batter8_id','visitor_batter8_name','visitor_batter8_pos']\ncolnames += ['visitor_batter9_id','visitor_batter9_name','visitor_batter9_pos']\ncolnames += ['home_batter1_id','home_batter1_name','home_batter1_pos']\ncolnames += ['home_batter2_id','home_batter2_name','home_batter2_pos']\ncolnames += ['home_batter3_id','home_batter3_name','home_batter3_pos']\ncolnames += ['home_batter4_id','home_batter4_name','home_batter4_pos']\ncolnames += ['home_batter5_id','home_batter5_name','home_batter5_pos']\ncolnames += ['home_batter6_id','home_batter6_name','home_batter6_pos']\ncolnames += ['home_batter7_id','home_batter7_name','home_batter7_pos']\ncolnames += ['home_batter8_id','home_batter8_name','home_batter8_pos']\ncolnames += ['home_batter9_id','home_batter9_name','home_batter9_pos']\ncolnames += ['misc','acquisition']\n\ngamedata_df.columns = colnames\n\nprint('Calculating gameID...')\ngamedata_df = gamedata_df.assign(gameID = gamedata_df.apply(lambda row: row['home']+str(row['date'])+str(row['gameno']), axis=1))\n\nprint('Fixing data types...')\ngamedata_df['date'] = pandas.to_datetime(gamedata_df['date'], format='%Y%m%d', errors='coerce')\ngamedata_df['visitor_linescore'] = '\"'+gamedata_df['visitor_linescore'].astype('str')+'\"'\ngamedata_df['home_linescore'] = '\"'+gamedata_df['home_linescore'].astype('str')+'\"'\ngamedata_df.loc[gamedata_df['visitor_linescore'] == 'nan', 'visitor_linescore'] = 'n\/a'\ngamedata_df.loc[gamedata_df['home_linescore'] == 'nan', 'home_linescore'] = 'n\/a'\n\ngamedata_df = gamedata_df.set_index('gameID')\n\nprint('Saving games...')\ngamedata_df.to_csv('games.csv', encoding='utf-8')\n\ne = time.time()\nprint('\\nParsed and saved {0:,.0f} game logs in {1:,.0f} seconds!'.format(len(gamedata_df), e-s))\n    \ngamedata_df.sample(1).T[0:32]","fc170f83":"# Get game data for use in events","c9abffc4":"# Read ancillary data","88d94824":"# Parse roster data"}}