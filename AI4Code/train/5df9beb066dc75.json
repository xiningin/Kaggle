{"cell_type":{"5c07dce5":"code","d0a71ac3":"code","c50dd3f8":"code","c0f13ce6":"code","01627dcd":"code","d971b5d9":"code","fa52e6a0":"code","0a7557d8":"code","1a4a68a4":"code","28a93ccf":"code","4337f5e7":"code","46e0a233":"code","e21a8f0e":"code","3718bfb2":"code","05db3a0d":"code","07833a1b":"code","a1b868c5":"code","841d9ba4":"code","9a151dfc":"code","8e1e6c5f":"code","90158684":"code","b27d5cc6":"code","911f1c1e":"code","8a536ce8":"code","3cae647e":"code","a15f7f95":"code","05d3d66f":"code","5df5e72e":"code","fea65ac8":"code","331263a0":"code","390b1734":"code","91a2536b":"code","42d688a2":"code","d2137c63":"code","9f03f399":"code","cb47a449":"code","24ea4769":"code","4c4b620c":"code","d1b5fe4c":"code","2de6d8e1":"code","84f9d2f1":"code","f48cfb7b":"code","c3cf26dd":"markdown","e13eb439":"markdown","02245cb3":"markdown","bd459dd5":"markdown","dcf86095":"markdown","e6ce3c9b":"markdown","f32c7940":"markdown","e9db9059":"markdown","085475ed":"markdown","3571dbfd":"markdown","19e99e15":"markdown","e889d343":"markdown","beeeb65b":"markdown","e163d2e1":"markdown","8975fcf9":"markdown","0ec4f729":"markdown","0cf8c06b":"markdown","a23dc7c9":"markdown","5aec04b9":"markdown","44cb4959":"markdown","e437cac7":"markdown","5acd97f4":"markdown","e8531d22":"markdown","772c4ca3":"markdown"},"source":{"5c07dce5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime","d0a71ac3":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\n\ndf.info()\n\ndf","c50dd3f8":"df.describe()","c0f13ce6":"df.Class.value_counts()","01627dcd":"target = \"Class\"\npredictors = [x for x in df.columns if x != target]","d971b5d9":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_test, y_train, y_test = train_test_split(df[predictors], \n                                                    df[target], \n                                                    stratify = df[target], \n                                                    test_size = 0.3, \n                                                    random_state = 42)","fa52e6a0":"from sklearn.preprocessing import StandardScaler\n\nfor col in [\"Amount\", \"Time\"]:\n    scaler = StandardScaler()\n    X_train[col] = scaler.fit_transform(X_train[col].values.reshape(-1, 1))\n    X_test[col] = scaler.transform(X_test[col].values.reshape(-1, 1))","0a7557d8":"from sklearn.metrics import plot_confusion_matrix, roc_auc_score\nfrom imblearn.metrics import classification_report_imbalanced\n\ndef model_results(model, X_train, y_train, X_test, y_test):\n    sns.set_style(\"dark\")\n    fig, axes = plt.subplots(1, 2, figsize = (15, 5))\n    \n    start = datetime.now()\n    \n    model.fit(X_train, y_train)\n    train_preds = model.predict(X_train)\n    test_preds = model.predict(X_test)\n    end = datetime.now()    \n    \n    plot_confusion_matrix(model, X_train, y_train, \n                          cmap = plt.cm.Blues, display_labels = [\"Non-Fraud\", \"Fraud\"], \n                          values_format = \"6d\", normalize = None, ax = axes[0], colorbar = False)\n    \n    plot_confusion_matrix(model, X_test, y_test, \n                          cmap = plt.cm.Blues, display_labels = [\"Non-Fraud\", \"Fraud\"], \n                          values_format = \"6d\", normalize = None, ax = axes[1], colorbar = False)\n    \n    axes[0].set_title(\"Training Set\")\n    axes[1].set_title(\"Test Set\")\n    \n\n    \n    print(\"For training set: \\n\")\n    print(classification_report_imbalanced(y_train, train_preds, target_names = [\"Non-Fraud\", \"Fraud\"], digits = 3))\n    print(\"Roc-Auc Score: \" , roc_auc_score(y_train, train_preds).round(3))\n \n    print(\"For test set: \\n\")\n    print(classification_report_imbalanced(y_test, test_preds, target_names = [\"Non-Fraud\", \"Fraud\"], digits = 3))    \n    print(\"Roc-Auc Score: \" , roc_auc_score(y_test, test_preds).round(3))\n    \n    print(\"Total seconds: \",(end-start).total_seconds())\n","1a4a68a4":"from sklearn.utils.class_weight import compute_class_weight\n\nclass_weights = compute_class_weight(\"balanced\", classes = np.unique(y_train), y = y_train)\n\nclass_weights","28a93ccf":"289.77325581 \/ 0.50086423","4337f5e7":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(random_state = 42, n_jobs = -1)\n\n# model_results(rfc, X_train, y_train, X_test, y_test)","46e0a233":"rfc_balanced = RandomForestClassifier(random_state = 42, n_jobs = -1, class_weight = \"balanced\")\n\n# model_results(rfc_balanced, X_train, y_train, X_test, y_test)","e21a8f0e":"from sklearn.tree import DecisionTreeClassifier\n\ndtc = DecisionTreeClassifier(random_state = 42)\n\nmodel_results(dtc, X_train, y_train, X_test, y_test)","3718bfb2":"dtc_balanced = DecisionTreeClassifier(random_state = 42, class_weight = \"balanced\")\n\n\nmodel_results(dtc_balanced, X_train, y_train, X_test, y_test)","05db3a0d":"from imblearn.ensemble import BalancedBaggingClassifier\n\nbbc_notminority = BalancedBaggingClassifier(random_state = 42, n_jobs = -1, sampling_strategy = \"not minority\")\n\nmodel_results(bbc_notminority, X_train, y_train, X_test, y_test)","07833a1b":"bbc_050 = BalancedBaggingClassifier(random_state = 42, n_jobs = -1, sampling_strategy = 0.5)\n\nmodel_results(bbc_050, X_train, y_train, X_test, y_test)","a1b868c5":"bbc_001 = BalancedBaggingClassifier(random_state = 42, n_jobs = -1, sampling_strategy = 0.01)\n\nmodel_results(bbc_001, X_train, y_train, X_test, y_test)","841d9ba4":"from imblearn.ensemble import BalancedRandomForestClassifier\n\nbrfc = BalancedRandomForestClassifier(random_state = 42, n_jobs = -1, sampling_strategy = 0.01)\n\nmodel_results(brfc, X_train, y_train, X_test, y_test)","9a151dfc":"from imblearn.ensemble import EasyEnsembleClassifier\n\neec = EasyEnsembleClassifier(random_state = 42, n_jobs = -1)\n\nmodel_results(eec, X_train, y_train, X_test, y_test)","8e1e6c5f":"eec_001 = EasyEnsembleClassifier(random_state = 42, n_jobs = -1, sampling_strategy = 0.01)\n\nmodel_results(eec_001, X_train, y_train, X_test, y_test)","90158684":"import lightgbm as lgb\n\nlgbc = lgb.LGBMClassifier(random_state = 42, n_jobs = -1)\n\nmodel_results(lgbc, X_train, y_train, X_test, y_test)","b27d5cc6":"lgbc_balanced = lgb.LGBMClassifier(random_state = 42, n_jobs = -1, class_weight = \"balanced\")\n\nmodel_results(lgbc_balanced, X_train, y_train, X_test, y_test)","911f1c1e":"lgbc_balanced2 = lgb.LGBMClassifier(random_state = 42, n_jobs = -1, class_weight = {0: 0.5, 1: 200})\n\nmodel_results(lgbc_balanced2, X_train, y_train, X_test, y_test)","8a536ce8":"import xgboost as xgb\n\nxgbc = xgb.XGBClassifier(random_state = 42, n_jobs = -1, objective ='binary:logistic')\n\n# model_results(xgbc, X_train, y_train, X_test, y_test)","3cae647e":"xgbc_balanced = xgb.XGBClassifier(random_state = 42, n_jobs = -1, objective ='binary:logistic', \n                                  scale_pos_weight = 578.5465116279071)\n\n# model_results(xgbc_balanced, X_train, y_train, X_test, y_test)","a15f7f95":"from catboost import CatBoostClassifier\n\ncat = CatBoostClassifier(random_state = 42, verbose = 0)\n\n# model_results(cat, X_train, y_train, X_test, y_test)","05d3d66f":"cat_balanced = CatBoostClassifier(random_state = 42, verbose = 0, class_weights = {0: 0.5, 1: 290})\n\n# model_results(cat_balanced, X_train, y_train, X_test, y_test)","5df5e72e":"# from sklearn.ensemble import VotingClassifier\n\n# vc = VotingClassifier(\n#     [\n#         (\"rfc\", rfc),\n#         (\"bbc\", bbc_001),\n#         (\"brfc\", brfc),\n#         (\"lgb\", lgbc_balanced2),\n#         (\"catboost\", cat_balanced)\n#     ],\n#     voting = \"hard\",\n#     weights = [1, 1, 3, 5, 3]\n#                      )\n\n# model_results(vc, X_train, y_train, X_test, y_test)","fea65ac8":"def plot_sample(X_train, y_train, X_resampled, y_resampled):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 8))\n    \n    X = X_train.values\n    y = y_train.values\n    X_res = X_resampled.values\n    y_res = y_resampled.values\n    \n    ax1.scatter(X[y == 0, 0], X[y == 0, 1], label=\"Non-Fraud\", alpha=0.1, linewidth=0.15)\n    ax1.scatter(X[y == 1, 0], X[y == 1, 1], label=\"Fraud\", alpha=0.1, linewidth=0.15, c='r')\n    ax1.legend()\n    \n    ax2.scatter(X_res[y_res == 0, 0], X_res[y_res == 0, 1], label=\"Non-Fraud\", alpha=0.1, linewidth=0.15)\n    ax2.scatter(X_res[y_res == 1, 0], X_res[y_res == 1, 1], label=\"Fraud\", alpha=0.1, linewidth=0.15, c='r')\n    ax2.legend()\n    \n    ax1.set_title(\"For Original Data \\n\\n Fraud Ratio: \"+ str((y_train.value_counts()[0] \/ len(y_train)).round(5)*100) + \n                  \"\\n Non Fraud Ratio: \" + str((y_train.value_counts()[1] \/ len(y_train)).round(5)*100))\n    \n    ax2.set_title(\"For Resampled Data \\n\\n Fraud Ratio: \"+ str((y_resampled.value_counts()[0] \/ len(y_resampled)).round(5)*100) + \n                  \"\\n Non Fraud Ratio: \" + str((y_resampled.value_counts()[1] \/ len(y_resampled)).round(5)*100))","331263a0":"from imblearn.over_sampling import SMOTE\n\nsmote_01 = SMOTE(random_state = 42, n_jobs = -1, sampling_strategy = 0.1)\nsmote_notmajority = SMOTE(random_state = 42, n_jobs = -1, sampling_strategy = \"not majority\")\n\nX_sm, y_sm = smote_01.fit_resample(X_train, y_train)\nX_sm_nm, y_sm_nm = smote_notmajority.fit_resample(X_train, y_train)","390b1734":"plot_sample(X_train, y_train, X_sm, y_sm)","91a2536b":"plot_sample(X_train, y_train, X_sm_nm, y_sm_nm)","42d688a2":"model_results(lgbc, X_sm, y_sm, X_test, y_test)","d2137c63":"model_results(lgbc, X_sm_nm, y_sm_nm, X_test, y_test)","9f03f399":"# model_results(rfc, X_sm, y_sm, X_test, y_test)","cb47a449":"model_results(dtc, X_sm, y_sm, X_test, y_test)","24ea4769":"# model_results(xgbc, X_sm, y_sm, X_test, y_test)","4c4b620c":"from sklearn.model_selection import GridSearchCV\n\ngridsearch = GridSearchCV(\n    lgbc,\n    param_grid = {\n        \"max_depth\": [5, 50, 100],\n        \"num_leaves\": [10, 100, 1000]\n    },\n    scoring = \"f1\",\n    n_jobs = -1,\n    cv = 3,\n    verbose = 1    \n).fit(X_sm, y_sm)\n\n\nprint(gridsearch.best_params_)\nprint(gridsearch.best_score_)","d1b5fe4c":"from imblearn.pipeline import Pipeline\n\npipe = Pipeline([(\"smote\", smote_01), (\"clf\", lgbc)])\n\ngridsearch_pipe = GridSearchCV(\n    pipe,\n    param_grid = {\n        \"clf__max_depth\": [5, 50, 100],\n        \"clf__num_leaves\": [10, 100, 1000]\n    },\n    scoring = \"f1\",\n    n_jobs = -1,\n    cv = 3,\n    verbose = 1    \n).fit(X_train, y_train)\n\n\nprint(gridsearch_pipe.best_params_)\nprint(gridsearch_pipe.best_score_)","2de6d8e1":"# lgb_sampling = Pipeline([(\"smote\", smote_01), (\"clf\", lgbc)])\n# rfc_sampling = Pipeline([(\"smote\", smote_01), (\"clf\", rfc)])\n# dtc_sampling = Pipeline([(\"smote\", smote_01), (\"clf\", dtc)])\n# xgb_sampling = Pipeline([(\"smote\", smote_01), (\"clf\", xgbc)])\n\n# models = {\n#     \"RandomForest\": rfc,\n#     \"RandomForest_Balanced\": rfc_balanced,\n#     \"DecisionTree\": dtc,\n#     \"DecisionTree_Balanced\": dtc_balanced,\n#     \"BalancedBagging_NotMinority\": bbc_notminority,\n#     \"BalancedBagging_050\": bbc_050,\n#     \"DecisionTree_001\": bbc_001,\n#     \"BalancedRandomForest_001\": brfc,\n#     \"EasyEnsemble\": eec,\n#     \"EasyEnsemble_001\": eec_001,\n#     \"LGBM\": lgbc,\n#     \"LGBM_balanced\": lgbc_balanced,\n#     \"LGBM_400\": lgbc_balanced2,\n#     \"XGBoost\": xgbc,\n#     \"XGBoost_Balanced\": xgbc_balanced,\n#     \"CatBoost\": cat,\n#     \"CatBoost_400\": cat_balanced,\n#     \"LGBM_400\": lgbc_balanced2,\n#     \"LGBM_Smote_001\": lgb_sampling,\n#     \"RandomForest_Smote_001\": rfc_sampling,\n#     \"DecisionTree_Smote_001\": dtc_sampling,\n#     \"XGBoost_Smote_001\": xgb_sampling\n# }","84f9d2f1":"# from sklearn.metrics import roc_auc_score, recall_score, precision_score, f1_score\n\n# precision_test = {}\n# roc_test = {}\n# recall_test = {}\n# f1_test = {}\n# seconds = {}\n# for name, model in models.items():\n#     start = datetime.now()\n#     model.fit(X_train, y_train)\n#     test_predictions = model.predict(X_test)\n#     end = datetime.now()\n    \n#     seconds[name] = (end-start).total_seconds()\n#     roc_test[name] = roc_auc_score(y_test, test_predictions).round(4)\n#     recall_test[name] = recall_score(y_test, test_predictions).round(4)\n#     f1_test[name] = f1_score(y_test, test_predictions).round(4)\n#     precision_test[name] = precision_score(y_test, test_predictions).round(4)","f48cfb7b":"# scores = pd.DataFrame([roc_test, precision_test, recall_test, f1_test, seconds], \n#                       index=[\"roc_test\", \"precision_test\", \"recall_test\", \"f1_test\", \"seconds\"]).T\n\n# scores.sort_values(\"seconds\", ascending = False)","c3cf26dd":"# Parameter Tuning with Sampling","e13eb439":"**For cat**;\n\nPrecision: 0.948\n\nRecall: 0.743\n\nF1: 0.833\n\nIt took 51 seconds for fitting and predicting\n\n**For cat_balanced**;\n\nPrecision: 0.787\n\nRecall: 0.824\n\nF1: 0.805\n\nIt took 45 seconds for fitting and predicting.","02245cb3":"# Metric\n\n-Precision: True Positives over all positives\n\n-Recall: True Positives over (True Positives + False Negatives)\n\nand F1 is harmonic average of precision and recall.\n\nIn this problem;\n\nPrecision: Observations we correctly identify as a fraud out of all the fraud observations.\n\nRecall : Ratio of successfully detected fraud observations over all fraud observations.\n\n\nIf we have high recall and low precision, our model is good at detecting fraud observations but fail to predicting non fraud observations. After a while, detecting non fraud transactions as a fraud will be cause churn.\n\nIf we have low recall and high precision, our model fails at detecting fraud observations.\n\nMy goal is getting higher precision and recall score. I choose F1 score as a metric. For the importance of precision and recall, we can define custom metric with weighting both metric.\n\nAnd, for that kind of problems, time is an also import metric. I try to use faster algorithms for model selection.","bd459dd5":"# Imblearn\n\n\n[Imblearn package](https:\/\/imbalanced-learn.org\/stable\/) contains some models to train and predict. These are classical models that you can found in scikit learn. Imblearn gives us a chance to apply sampling (random under samping) with \"sampling_strategy\" parameter. In this way, we can use Bagging Classifier, Random Forest Classifier etc.\n\n**BalancedRandomForestClassifier** - Random under sampling with using **Random Forest Classifier** (uses bootstrap)\n\n**BalancedBaggingClassifier** - Random under sampling with **Bagging** Classifier\n\n**RUSBoostClassifier**- Random under sampling with **AdaBoost**\n\n**EasyEnsembleClassifier** - Random under sampling with **ensemble of** **AdaBoost** Classifiers\n","dcf86095":"As you can see above, applying cross validation for resampled data will cause data leakage, with 99% f1 score.\n\nApplying cross validation with a pipeline gives 84% f1 score, it is correct way.","e6ce3c9b":"XGBoost Classifier has no class weight parameter. To adjust weights we need to use scale_pos_weight parameter that takes float as an input. That is ratio of majority class to minority class.","f32c7940":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAA7gAAAGaCAYAAAAlwu9PAAAgAElEQVR4Xuy9b8yVVZruuXq+zOCnOUDsD2UYNePBZMbo0ISjhca0fxljwxyrDFqIpaBSoogIloyAgAhiCdKIQGELWCKlqHjUqWOwSk2MMk7ndGjUOYkcJ2o4ViIOeLD7NMx8mZpca\/rec7\/rXc9+nv1\/v\/v97aTiy7PXs9Z9\/9ZaO+t6rrWe+rM\/\/elPfwp8IAABCEAAAhCAAAQgAAEIQAACI5zAnyFwR3gPEj4EIAABCEAAAhCAAAQgAAEIRAIIXAYCBCAAAQhAAAIQgAAEIAABCAwEAQTuQHQjSUAAAhCAAAQgAAEIQAACEIAAApcxAAEIQAACEIAABCAAAQhAAAIDQQCBOxDdSBIQgAAEIAABCEAAAhCAAAQggMBlDEAAAhCAAAQgAAEIQAACEIDAQBBA4A5EN5IEBCAAAQhAAAIQgAAEIAABCCBwGQMQgAAEIAABCEAAAhCAAAQgMBAEELgD0Y2DmcSRI0fC559\/HmbMmFE5wWbuqVx5ScHTp0+HRYsWhdmzZ4epU6cOK33w4MGwZ8+esGnTpjBmzJiWmm0mz2buaSnIf77Zc9GlegyaibGZe\/bu3RtuueWW8Oijj4YVK1YE1XHfffeFp59+OkycODGbdjPtNHNPO5i3ow6N1zVr1gSxGjduXDuqpA4IQAACEIAABCDQcQII3I4jpoFmCJgouuyyy8KsWbMqVdHMPZUq7rNCzeTZzD3tSruqwG0mxmbuUV4Sbueee24cWydOnIj\/\/fbbb8O+ffuyAreZdpq5p13M21EPArcdFKkDAhCAAAQgAIFuE0Dgdpv4ALdnC\/qTJ08G\/U\/Oz7Zt28IjjzwSs\/7oo4+is6mF86WXXhqvvfjii1kBm5Y5++yza\/dYPebCqR45cVdccUVpvSl+H7PEzbXXXhvjlnOsOo8dOxYefPDBkGs\/jfGGG26oObjnn39+zOudd94JF154YRROx48fr7mXR48eDTNnzgyffPJJmDdvXnR1Dx06VGtT13vNRvk1ykA5SzxanysHz0X8ixzcbvW5b2fXrl3hb\/\/2b8OkSZPC\/v37Cx3cbsVW9PNgItyPpwkTJsTxtmPHjtoY0v12zcay3FffJ5o\/ylflNE\/9uNf9Nm41Pm0eHzhwIDreNtfkevOBAAQgAAEIQAAC\/UgAgduPvTJCY0odKwnFDz\/8sCbetMjesmVLWLBgQdwWOn78+LBq1arwzDPPDNsC6euaNm1auPfee2NZffTfDRs2xEW7d3ibccz8PSbEVKcErW3PVJtp+xJ+aR4Wk7Yo65Nu77Qtysp97ty5kYEJjbRNCQpjl25n7hYb7+BVZeD70vJdt25dePjhh+PW7XoCt1t55cZJ2RblbsVWNPVzbqrm15dffhnHkTnSut\/GjcajXGp\/TQ9RVHbnzp21+aP5JVGrer7++uva\/a+\/\/np8GOHLVt1NMUJ\/wggbAhCAAAQgAIEBIIDAHYBO7JcU0jOoWkjro4WzHCiJxJ\/\/\/OdR8NY766h7vKCYPHlyze3Ud94RNSdYLqgJqWa2Ndu5WYtZbrA5jd5ttfbXr18\/LA+fvwlXuWv6yDUzcXf33XeHX\/7ylzUGJlR8mxIiRU5nt9j4M8NVGShH73b6fmlE4Hajz\/04aUTgdjK2orlsfe7H0\/vvv19zynWfHrrYxzusuXm4dOnSsH379vjQwcaq\/ladNme9qNaOBj\/X2nGOvF9+t4gDAhCAAAQgAIHBIoDAHaz+7Gk2qcCt4uDWe7GPuVLewc29AEjixJxgbYm2s5VVYFjMP\/rRj8KSJUvitk1zU01gnjp1qubgWvu2ZdScaOXxq1\/9qiYa\/EumLA+5wqqznoNrbdYTuMqrG2y8wK3KQPx+85vfRFdeokj5VHVwu5VXMw5ut2KrMma9W2sOrt3n55wcXH00H9KdFObKpgI35+D6l0z5ucaLp6r0FmUgAAEIQAACEOg2AQRut4kPcHupwM25TlXP4AqTnbHVOU590jOA\/lyhvQ3X31NlO2V6Btefh\/UOanreVyK13hlcbb+2M7a5M7gSsKkj5kVtmcDtBpv0rc+NMJDTeM0114SxY8fWtpOXObjd7vNGHNxuxVb08yBhmY4njbH0nLc\/l2tncM8444zauVzV78\/gpgLX7zzwZ3D9WXqbawP8U0ZqEIAABCAAAQiMYAII3BHceYTeOoGy\/2uf1lugBghAAAIQgAAEIAABCECgWwQQuN0iTTuFBLwTa4WK3iDcboz9LnB7yabdrH19\/ZxXP8fWyT6hbghAAAIQgAAEIDAIBBC4g9CL5AABCEAAAhCAAAQgAAEIQAACAYHLIIAABCAAAQhAAAIQgAAEIACBgSCAwB2IbiQJCEAAAhCAAAQgAAEIQAACEEDgMgYgAAEIQAACEIAABCAAAQhAYCAIRIH7Z3\/2ZwORDElAAAIQgEBvCPzpT3\/qTcO0CgEIQAACEIAABByBKHBPnToFFAhAAAIQgEDTBPT\/t8sHAhCAAAQgAAEI9JoAArfXPUD7EIAABAaAAAJ3ADqRFCAAAQhAAAIDQACBOwCdSAoQgAAEek0AgdvrHqB9CEAAAhCAAAREAIHLOIAABCAAgZYJIHBbRkgFEIAABCAAAQi0gQACtw0QqQICEIDAaCeAwB3tI4D8IQABCEAAAv1BAIFbsR8+\/vjjcNVVVw0p\/e6774ZLLrmkYg1Di6m+9evXh927d4exY8c2XEcaj2Jrtq6ixr\/44otw5MiRcP311zccX+6G06dPh4ceeijs3LkzzJ07NzzxxBNhzJgxtaI+J7GdOHFiuP3224P+1sdyVEzWF9YHdu8FF1wQ9uzZE84777y2xNytSqqy8fl5XitWrAh33XVXXV69YFMvr++\/\/760f5XX0qVLQzo2NO9y1xrpr6rMVWc61zV3L7\/88jj\/037w8TbKvF5M+\/btCxMmTMj+5ojls88+GxYuXBjnVG4+6P45c+ZERJ3IB4HbyOijLAQgAAEIQAACnSKAwK1INhWk+vdLL700TKRVrC4uQFsVuK3cXxanLbSnTp0aZs6cWVa80vfK+YMPPoiCxQsE3az2HnvssXDbbbfFup5\/\/vmwfPnymgA2sX3llVcOK7dkyZKwY8eOKPBOnDgRDhw4EBYsWFAppn4pVI+NxMuqVavi\/\/QxIfPee+\/FhwA5Me95bd68uWds6uXl2fuHKb\/73e+G5OXFm8aJ8p83b17YsGFD4Xip0q\/NjkcTjyYS03gVY7PMi2LSfFmzZs0wYao8xW727NlhypQp8fdI7afjRd\/rwY8EsDFMxXCr+SBwq4w6ykAAAhCAAAQg0GkCCNyKhFNBKjfk4MGDcUGpxawWn\/rs2rUrTJ8+PTqVP\/zwQ3jttddqzqO+N0fypz\/9aTh58mR0XSXKtAD97LPPas7mW2+9VXNb5AJJvEm0eRczJ3BtsevrOnz4cHj88cfDd999FxYtWhRdoNQB9e6OXDO5U1ZGObVD5HoHSjyPHj06pN4tW7aEadOmRY5epHrBILe7qJzuy9VbsYt7WqweGy\/wFKSJJwk9G3fekUt5WWK9YFPW5\/Zww3JS\/5qY03fKa\/z48WH\/\/v3hjTfeiHPEcq03Dqp0ZllsufrtYYMeKkyePDm6qWm8fldHo8w1f23sW\/vjxo2LvxGHDh3KOriffvppUJmcgPXjxXaKpA8MJIbbkQ8Ct8qoowwEIAABCEAAAp0mgMCtSDjdEpzbemiu7urVq8PKlSuD3M+rr746ilq5lhJ0JoolYH\/729+Gp556KjzwwAPx+4suuigKY92njxfQ+rdtQVVZffyWab9FNa1LgtbEsO5Te8uWLYt1rF27Nqxbty5+793aTji4ZYLCtqwqLr\/dOt0qXVRO9W\/atGlEblEuE7jekdPf6uOtW7dGB1Pixr6XiMltLe8Vm7I+V1\/7eL2Tb3np4Y\/ErRz91J3U3ErHS8UpHcpiy40z23mguax5pTlrOw\/SfmiWuT1sSh8sVd2inDLyY0Ns\/O6JduaDwK068igHAQhAAAIQgEAnCSBwK9L1Dq6cM\/3bRJgXvzpbagL35ptvrolW\/a3tufrYGT0tLrVolwu3cePG6KJoEfvVV1+Fc845Z4jA1b\/NGVZdtlBNheDixYuH1SU31rZTf\/PNNzW3WHWYUD9+\/HhNMPsc2rlFuVERp4W5d2zFJ92umy7ei9zLit3cs2JlYsvGmB5qyCHUww5z5Ioc7nTrci\/YlOUl4OZUFsWrbenHjh2LZ8EthxtvvDE62bZtOx0HVTqy0fGoLb16OJSeCS\/qB8XQKHPFpI92TPi\/da2qwPVncP140XU9QNPvh8ZQ0RnoZvNB4FYZdZSBAAQgAAEIQKDTBBC4FQl7gatb5BxpkfiTn\/wkuqByYvXyIwnJIoHbioNbReDagjXn4JrA1YLbHNyis5uWj4S82m3H9mQxKztnamdLVda2rGpR7rev5rbrtkPsVBwGHStWdh7UGCgAcZKrqe3x6blcz05CpeyBQMcS+ueKy87gpgIwd944l6s\/U5rmXDWnZsajiT8TmzoDnTvv6vumEfFdT3RXFbieh40XifPnnnsuHgHIzft25IPArTryKAcBCEAAAhCAQCcJIHAr0s2dwdV2WC0aJTj0ZmA5TVoA25bf1MG1Lcgq68\/g+rcC29uFtYXZb1GuInBNRNrWZatLZ3D9C7HS87b20ic7z2lvri3aKlkR2bBi\/g2x1oY\/c+jjsu2Z6dthVWmuXKtv1G02p3bdV8Ym91bc3LUcr16yKcurXrxFb4y2M7i5cdBIf5TFVq\/+VIhqzpXFWyU276qmb0b3bfp5o3rL3qKsMnbOX3\/Xq7veWNO9RW+PR+BW6WHKQAACEIAABCDQaQII3E4Tpn4IQAACo4AAAncUdDIpQgACEIAABEYAAQTuCOgkQoQABCDQ7wQQuP3eQ8QHAQhAAAIQGB0EELijo5\/JEgIQgEBHCSBwO4qXyiEAAQhAAAIQqEgAgVsRFMUgAAEIQKCYAAKX0QEBCEAAAhCAQD8QQOD2Qy8QAwQgAIERTgCBO8I7kPAhAAEIQAACA0IAgTsgHUkaEIAABHpJAIHbS\/q0DQEIQAACEICAEYgCFxwQgAAEIAABCEAAAhCAAAQgAIGRTgCBO9J7kPghAAEIQAACEIAABCAAAQhAIBJA4DIQIAABCEAAAhCAAAQgAAEIQGAgCCBwB6IbSQICEIAABCAAAQhAAAIQgAAEELiMAQhAAAIQgAAEIAABCEAAAhAYCAIjVuCeOHEizJo1K8yePTv+d82aNeHgwYNh7969Ydy4cfHfjzzySOyka6+9Nl7XWz4XLVoUduzYUeu8efPmhU2bNoUxY8a03KF\/8zd\/E2644YbYfu5jMb\/zzjuh1XaPHDkSPv\/88zBjxozKcYvPpZdeGst\/9NFHYerUqZFZek3fq\/777rsvPP3002HixImV26hX8PTp0zX+ufwtlgsvvDDs27cvtlsl5vPPPz+OAXH1\/V3UD21Jps2VVGVjfVeUs8ZE1T5ucwrZ6hrNS2NSH82Vbdu2hSVLloRTp05l+zeXayM5NRub2tDvyxVXXFE4h\/R7c8sttwyZa1Vi8\/ep\/IsvvhimTZtWy7\/evFH5Rx99NKxYsaI2b2wujR8\/vjLDsjlnbVTJhzIQgAAEIAABCECg2wRGrMAVKC3E7rnnnrB69eqwcuXKsHXr1rjg1OLzj3\/8Y0246t\/6aLEsgXvZZZfFxZ4JTi0IbWHdbAcoFrVjAjtXj8rs2bMnLF++PNxxxx1xIdpMu7YwtzyqxGz36IGAPopj3bp14eGHH44PCeyaxL4Jim+\/\/bYmNKu0UVZG+b\/\/\/vsxby8QTNAsW7YsrF27NlYjcaO+Xb9+fZg7d268tnPnzrB06dJh19T\/9oCiGeFfFnc3vq\/HRn2n8e055HKWsPWisIihv7fTuTWT19GjR8PMmTPDxRdfPOzhk\/VvLlfN70YeVDUTm+o3AaiHRHrQkDKfM2dO2LVrV02c2\/eNxKZ+sQdmBw4cCGeffXb8rdDvi\/1tfffmm2\/GOOxBlMbLhg0bwvz588Px48fD22+\/HX\/37GMMr7nmmmHjauHChdnYf\/\/73w9po9PjhvohAAEIQAACEIBAswRGtMBV0ubUmqsg0XrvvfeGVatWDXMeU2GYClzv+prDqcWgFtuffPJJzXX1jpIckt\/85jdh+\/bt0Rk2tzjnHuZEsHdsVJcWpXJpfD1pXMrbXDo5PFrw5lxYPyg8F10XHzGTy62\/7ZoWxmpv0qRJYf\/+\/W11cP3iXCy+\/vrr+KDBBK4JAf1bcdx0003h5ZdfjkLBronPCy+8EK677rp4zS\/e\/cJ+JLm3yqMeG32vBw9lOUvMvPLKK7HfNF5tDBfd2+yPRiP3NZPX4cOHgxzH3bt3x743YZgKt1yunY5N80gPYiQmp0yZEuOsF4d3ohsRuOn8sLxyAjf3u2Xl03o8Q5VJ55xEr8RsOobqtdEIc8pCAAIQgAAEIACBThMY8QLXuylyOPzW2gkTJtS2xEowygHUQs1vUTZhrIXjhx9+GIXEoUOHYrktW7aEBQsWRMdRgs\/cXwnK1K2t4uB6QW5bDV9\/\/fVauxJ1+kjESfipXYnANC7LQw6uti+aoDeR+swzzwzbJu25WLn7778\/ClxtQ07v7cQW5TKB6x1c\/b148eKswFWsJoy9Yz5S3dsqAtcexlhZE\/A+Z\/2tsSGHVg9hPM8cr07\/uLSSV04YVsm1kQcbZeI7x9x2Hmhe6ndAAjfH3OJIdypUZZ477uD714t+c\/cVi\/W52ld+Tz755JBdGJ6hZ6y49PsjgStx68eQfoc2b94cdxCkbVTNh3IQgAAEIAABCECgWwRGtMD1Z1rN8RS41ME18emFoS34tQA999xzw5dffhmZazFnbufPf\/7zKHjtHKoWjCpnW51NKMspM\/Fab4uydap3knXNBKwWmIpF53glprV1WFt607i0TVeOsQTu5MmTaw6zyvnzq34QVXVwTRx3W+AqVntYob7Uw4qcg6trGzdurG1l9gt6cyrbdWa4W5OwTAiaa2jbt4ty9uLFnLp6vLqRX6MPNZSjxFlO4Pr+zeWqB0PtErg55nrgogde\/qy3hKC28ussvHdH7by\/5nCjxxCUW7qt2I431HtfQG4HQ3rNMywSuLl8jOtI3iXRjfFOGxCAAAQgAAEI9J7AiBa4WjzrLOlzzz0XHnvssdrZ2twZXC0Q6wlcLzTLHFwTxyZqJUolNLXVN+eeWjfnzgKXCdycg6u8tbVQ7XoHt56wa+QMrtyhTgjcsjOPdm5QTIrOj\/ozgipn90hQ2N+NiJzeT8H\/L4Ky88npVlKJuTTnVJTpHn8e1PPqFqNm8soJ3FRY5XJt5xncnPjzAtqEu86+pmfHFcevf\/3ruKW8mYct6bbinOC1cVvU5\/qtSR+IpOMld7Zb88vfa2MovdYo636ZZ8QBAQhAAAIQgMDgExixAtfOxtqLpeyFU\/b2XX9mTN0ol9W2GfstykVvWM69Zdi2FdtLcHTOMX1LqdoqcnFzjrNeIFPPwU1jtrjs7K7O4Opjb2yt94bTem8pTp3fTghc\/9Zai9Mv3qvG588tK397YVizL\/Pph2lexqZqzrk34Obu7VbOzeSl2FIHN+foFr0BvGpuzcZmc9xe9pTGoW28dm5fZeudy8\/Fmp6zTX\/LNOb1QM1c3qpvH6\/HsOqby4t2iFRlTjkIQAACEIAABCDQaQIjVuB2Ggz1QwACEIAABCAAAQhAAAIQgMDIIoDAbXN\/+bcuW9WNOjithpQ6PqrPnM5W6+Z+CEAAAhCAAAQgAAEIQAAC\/UoAgduvPUNcEIAABCAAAQhAAAIQgAAEINAQAQRuQ7goDAEIQAACEIAABCAAAQhAAAL9SgCB2689Q1wQgAAEIAABCEAAAhCAAAQg0BABBG5DuCgMAQhAAAIQgAAEIAABCEAAAv1KIArcU6dO9Wt8xAUBCEAAAiOAgP5\/dvlAAAIQgAAEIACBXhNA4Pa6B2gfAhCAwAAQQOAOQCeSAgQgAAEIQGAACCBwB6ATSQECEIBArwkgcHvdA7QPAQhAAAIQgIAIIHAZBxCAAAQg0DIBBG7LCKkAAhCAAAQgAIE2EEDgtgEiVUAAAhAY7QQQuKN9BJA\/BCAAAQhAoD8IdETgnj59Ojz00ENh586dtSznzp0bnnjiiTBmzJiGM7f6pk6dGmbOnNn0\/T6eXbt2NVVXvcZ3794dZsyYEcaOHZst9v3334fbb789vPvuu6EVHqr8iy++CEeOHAnXX399ZR4ff\/xxuOqqq2J5xXDJJZeE3DWrf\/HixWHjxo3hvPPOq9xGvYJ+XOTyrxffBRdcEPbs2RNjaSSPtgTehUrazSbHy1\/rQkqxiXp5+fmgshqbmkMa1\/rb4h03blxt3tQr1+g4bYa5cVu\/fn24\/PLL4xzat29fmDNnTnZeNcrc16UK9Ts1ffr02u9p1XmTi0n1ifmzzz4bFi5cGH+Lc3Op6r3pGELgdmtW0Q4EIAABCEAAAvUIdFTgmiC1heTNN98cF4SNftolcJsVyFXi1UJRi14t0IsErsq89NJLcbE6f\/78sHTp0q7x8H2gfBTH6tWrw8qVK4P6xa7pIYTKSogfO3asJiqrMCgro\/w\/+OCDmLcXCCaEHnvssXDbbbfFap5\/\/vnISPGsWrUqXtPCfN68eWHDhg3Dykn8atGu2P0Cviymfvm+XWx27NgR7rrrrnDixIlw4MCBMGvWrMjPMzRx043c6+Xl27cHNj\/+8Y\/rxmvlrrzyyrB58+YhuS5YsKChlBplvnz58iGiUA+JJk6cWBtvNvZmz549bNw2w9wemEnwNzpvcvPhm2++CYptypQpMT4\/V3zsVe7NPahE4DY0\/CgMAQhAAAIQgECHCHRF4JpTI2Ezfvz4uMj67LPPhjg2jz\/+ePjuu+\/idXNXzUmQC3LmmWfGxbocXImjNWvWRCS2yDRnVNfuv\/\/+8I\/\/+I\/RQfYOSE7gpnVddNFFUYD+8MMP4eTJk2H79u2xPdVl7okJQLWt2J577rm4yFUZc6FyIjcngr1borokTrRQ9\/WkMSpHc2KV34QJE4Y5s+l4UR888MADYdmyZfGrtWvXhhUrVkSO\/tq6detivuLwxhtvtNXBVa6K1Zzjo0ePDnHRt2zZEqZNmxbjM3FmYlXXTNDs3bt3SDnds3\/\/\/hivxo+50x2aMx2ptl1sbNxprInv1VdfXRNgnmHRQ5h2J1eWl9rTfLK+tQcZEoRpvL6cj99ybXR3R1ls6XjUvNQ80sMCucWTJ08e8oDK3FH9vplIbJa5z6lenN6RzbXlv9fDAbnhFpsEb715U+9eBG67Zwr1QQACEIAABCDQLgIdFbh+S7DElASufVJH0dzPP\/zhD+HgwYNDXE65JBKwP\/vZz+Lt+l4OxOHDh6MYe+qpp6J4MwFtW2sPHToUy5pTafHYtkH73tdlgtbEsBaXX331Vc11POecc6JIS93aKg6uYjexamL5rbfequWjRb4+ErnKV\/lIpKT5+hglYFLhKh6pgNHi1riYwL3nnnuiwNU2ZLtm9\/ryjW79LBqcZYLCHoTofrlX+nj30f8tPlZObqUcXzlsGldWrlsirh2TsV1slLPq2rRpUxQyEjQ5ht1iU5aX2Pnt9iYgzXH2fZnblu9zbXSclsWWjkcxs50Hmpf2sMb6377T71WrzP1xh1YEbrpTwotWCdx686bevQjcdsx66oAABCAAAQhAoBMEOipwJRInTZoUHdtFixZFty49nyu3TR9tmTWhqb\/vvPPO6CxKfJ111llR8Ko+iU19JP7Mlbz33nujUDOBK3dSQk1b+\/xW3NTB1QIurWvJkiXR8bLt1N49VVkJdblL\/oyx5VC2Rdk60G+51jUTsBK4EtB25k4xaGtiUYyer5xLfYrO\/FV1cHslcIuEjZ3HlGMt5\/fGG2+Mbp8XQBpf2k6t88hFLl8nJk876ywTMTnBlLLRgxETrp5DvXLtzCFXV5mI1D3mlJpAtXOh1ueWV1rOzydzgBsR7o0y17zXwySb77bLQmJPvwf+CEZRDlV4S8hrB4NtuS6LM7fLIReT2k4Frp3j9+Olyr0I3Co9SRkIQAACEIAABHpBoOMCV6LWuyzaEpeKuJzA9edUG3VwqwpcxVXkjtpi1Tu4uQ6SqFU+EvLWbtEi2wS1CWQJ1DKBm3Nw5e5oUat2vYNbz8Fq5AyuFq+dcHDrnXnMbbW89dZbwwsvvBAdbX2Uc277Zyp6B+0MbiNs\/JlliWI99EkZNnMetNkfp7IzuOkDiarbles5vVVjbXQ8+gcIXnSmwrsoh6ov2Eu3XDdzVljHJrR1P\/1N8GPJ73aw+aWxUeVeBG7VUUY5CEAAAhCAAAS6TaArAte2+smB05tH7Q2pdq5WW\/1SB9fc3LSsf6OoYPkzuI06uDk32c7gmsD1b3o1d1Tt2jni9E2v+q7oRVO+LnN\/bEu28s05uBaPba+286V2dldncPWxt7imW8H9gDJXqcobdjshcD1vi9O7Vf48sp3DzsVcr5yNiWZeZtbtyefbaxebqm+i7lauZXmlb\/VVXLk+r1eu2T4viy03zoybCVz\/TgF9V\/Qm6Ea2T3vxrDrL4kx5+d8nH5MevJW9Rbkon9y96RjiJVPdmlW0AwEIQAACEIBAPQIdEbgghwAEIACB0UUAgTu6+ptsIQABCEAAAv1KAIHb5p6RI2nurlVd783KbW4+VpeeG9a1Tvz\/\/nYiduqEAARGJgEE7sjsN6KGAAQgAAEIDBoBBO6g9Sj5QAACEOgBAQRuD6DTJAQgAAEIQAACwwggcBkUEIAABCDQMgEEbssIqQACEIAABCAAgTYQQOC2ASJVQAACEBjtBBC4o30EkD8EIAABCECgPwggcPujH4gCAhCAwIgmgMAd0d1H8BCAAAQgAIGBIRAF7sBkQyIQgAAEIAABCEAAAhCAAAQgMGoJIHBHbbUkcFYAACAASURBVNeTOAQgAAEIQAACEIAABCAAgcEigMAdrP4kGwhAAAIQgAAEIAABCEAAAqOWAAJ31HY9iUMAAhCAAAQgAAEIQAACEBgsAgjcwepPsoEABCAAAQhAAAIQgAAEIDBqCQyswN27d2\/Ys2dP0H+PHz8eZs6cGR588MEwa9ascOTIkfjvTz75JHb8iy++GK8fPHgwXHrppUMGw0cffRSmTp3a8gBRm59\/\/nmYMWPGsLpOnz4dFi1aFHbs2FH7bt68eWHTpk1hzJgxw8orTuVW9H3Lwf5zBWpnzZo1keG4ceNartbnmcvP8zfudu3CCy8M+\/btCxMnToxxnDhxImzbti0sWbIkMsrd23LAXaygKpuqHNJySkV9ecUVV7RlPFdFUy8v9aHm3TvvvBOru\/baa+NY0zyxeVhvHLTa51WZK7b0d8CzzI3RZmPzMVkfTpgwofb78Oijj4YVK1Zk8VtM559\/fl2ufmz4OK3uXOzql1tuuSW2267fxKpjiHIQgAAEIAABCECgEQIDK3BtofijH\/0o8vjjH\/8YBeHRo0ejuN26dWtc6Et43nfffeHpp5+OQtgLOi3qPvzww5aFpMVy2WWXxYVn+km\/t4W\/FrI5cT1SBa7ifv\/99+MCPRVbYrBy5cowd+7ciGfnzp1h4cKFsdzatWvjNRO01ocXX3xx7Bt90ntXr16dfTjQyOToZtl6bDQeli1bVonDhg0bwvz58+NYfvvtt6Mw0sdES7fFSb28PF97AHTNNdcM68ulS5fG+erz+sUvftFynzc6Hm1MeZaTJk0KKfNbb721NlZPnTo15EFM2ZhSX7\/++uvhzjvvrBXV75A++u3Q32efffaw34Wi\/vVcc2PjzTffDBLE9uCoaB7u2rUrPkxqNJ+yfPkeAhCAAAQgAAEItJvAwApcgTKnVn+b+6cF4pdffpl1QVLH0gtcE1Vyfb37KAH2yCOPxH4x8eDdDrkics3MkTK32HdkPYE7fvz4mtvsHS5zcLVotfZV9w033BBFzcmTJ2POdo\/+PyrNJc5ds5y0gDVXTQ8CVE+7HFy\/OBfrr7\/+eojgl1i97rrrIhqJMy8UdM0W6P\/xP\/7HIC67d++uObjpvSbs2j1hOlVfPTberS7jYPF5viaQJWKmTJnSVQe3rM8Vr8a\/9a12CtTrS59Xq31eFluu\/nosLbbJkyeHV155Jezfvz\/uEmnkoYLfXWJzUoLXRG1u3hTFlHLNjY3c71c9runOiU7NB+qFAAQgAAEIQAACzRIYaIFrwlFwbDuvFnT6yEX0W\/EkDrWI9FuUbSufxJREn+6RYyPxJDdWH3N4Dx06FN1GOY\/6r3drqzq4fotyuhXR6pg9e3ZsN92ibK7uunXrwsMPPxzbnzZtWi1uiUmLVWLi3HPPjfWY2FfMds3KaWFt27zbsUW5TFCYc624zLXyzqX9rVjShXZ6bzvibXZSNXNfmcCtysHYPfnkk7WHOuaWawzk3L9m4q16T1mfq550+35RX6oun1erfV4WW67+IpY+NuWk3wE5vnpg5MdtGTfvKtscsHvMwdW\/\/U6QophyxyJ8nNr6bDsf9Bvnx5jVnz7c6sU29zJmfA8BCEAAAhCAAAQ8gYEWuN5JNec0dXC9+NTi329R1gJx1apV4f77748uqbYxywWzOgykhK8Ww\/fee28sr+2hJpTlwnjRWWWLsuo1wWmOrIlfuUFe4EpY59qSEDYxrr+1NVgff37Puzf6TqLa59TuM7jNiDg7jynXWdu1tU01FbheRCj+RgRFv\/wclIktexhTj4M\/r23u3U033RQWLFgw7Jxrtx4AlOUl\/uYYam6l27HTvvR5bdy4sbZtu5k+b3Q8Ll68uC5Li03brL\/99tt43r7IRa0y7syt9b8Beo+A5oGd5S86x+ydcNt+bG3mYirjajtA9FvSjncSVMmfMhCAAAQgAAEIQKAZAgMrcG3hpwWZF672wil\/BtdeQFUkcCX8JBKqOLje8TCB\/Mwzz8RzeHJIGxW4clh1ny1yvYN79913h\/Xr1wfVLyEot9XEdCpwUwdXg0X1ptu1\/bbsdju4ZedM7YytYpPLPGfOnKCzfxK1+viXSnkH158LtHtNCDczKXpxT9l5UNvCW8ahyOnVfUXnNzuZb9kZ3FRs5bZjS6SnYlZi8+WXX45b1Jvt80bHox9TxlLnV1Pmis3H68dtGevceVvdY9v56\/Wh\/y7HtUqcNudSri+88EI8PpCK5bJ8+B4CEIAABCAAAQh0m8DACly5k\/ZiKUHVtmK9cEoiNX2Lsp11826odUTuDctW3ur17qrcDe+M2lZjc5PrncH1W5TTN8pqu\/Sf\/\/mfx3OpEuJezOo+uUZjx46NwlDtpwLX3FyVtboVv523zb2xtd1ncP0bYo2L+sJehpRz3Ku+RTl3b7cnUyvtlbGpyqHe23t7IXDL8sqd6aw3DsQ4d9Y9N6\/K+qMstnpjKnV\/i9767OMti0ff52Iqi9Pq9THluObGRm5cpXnrTLF\/67z9fnRrF0AVbpSBAAQgAAEIQAACRmBgBS5dDAEIQAACEIAABCAAAQhAAAKjiwACt8v9nZ57VfPNuE9dDpvmIAABCEAAAhCAAAQgAAEI9D0BBG7fdxEBQgACEIAABCAAAQhAAAIQgEAVAgjcKpQoAwEIQAACEIAABCAAAQhAAAJ9TwCB2\/ddRIAQgAAEIAABCEAAAhCAAAQgUIUAArcKJcpAAAIQgAAEIAABCEAAAhCAQN8TiAJX\/z+ifCAAAQhAAALNEjjjjDOavZX7IAABCEAAAhCAQNsIIHDbhpKKIAABCIxeAgjc0dv3ZA4BCEAAAhDoJwII3H7qDWKBAAQgMEIJIHBHaMcRNgQgAAEIQGDACCBwB6xDSQcCEIBALwggcHtBnTYhAAEIQAACEEgJIHAZExCAAAQg0DIBBG7LCKkAAhCAAAQgAIE2EEDgtgFiO6o4ffp0eOihh8LOnTtjdbt27QozZ84srHr37t1hxowZ4ciRI+Gqq64aUu7dd98Nl1xyScthffHFF7H+66+\/vuW6VIHPce7cueGJJ54IY8aMqdX98ccf13JRDhMnTgy333570N\/6KE\/lPXbs2PD999+HZ599NixcuDDWkd7bjvzbknTFSqqyueCCC8KePXvCeeedV6t5\/fr14fLLL499nuNg13L3Vgyv6WL18lIfFvWvGszl5XPYt29fmDNnToytmTFflbmvP8ey6rUqEH1MlutZZ51V+22oMm9s7JfNkaL55X9TVqxYEZYuXVppfiFwq\/QwZSAAAQhAAAIQ6DQBBG6nCVesX4t5fbSYtIW\/\/s4JNS2oVV5iT4tR+1vCT4v+gwcPDhOPFcOoFbOF9tSpU+sK7UbqVdwffPBBzNGLFxO\/jz32WLjttttilc8\/\/3xYvnx5TQB7sa2\/Z8+eHaZMmRLzVKwmdv3fXjw3EmcvytZjo\/GwatWq+D99csJeAu+iiy4KKcMlS5aEHTt2hLvuuiucOHEiHDhwICxYsKBrKdbLyweRPkwx0Wh5bd68eUgOs2bNarnPGx2POZZ33HFHSGPLXavKXH395ptvRuFvH83pCRMmxN8C\/3e9efPNN980NEc8\/9\/97nfx4ZI9RNGcqjc3LU4EbtemFQ1BAAIQgAAEIFCHAAK3D4aHFrUPPPBAWLZs2RBnTqGZmPvss8+ig7l9+\/YoDuX06t\/z588P27ZtqzmbXuDaIlf3eudH969ZsyZmbs6Xd8Pk2sgRNGe4zE2uitAvziUujh49OkQ8b9myJUybNi1W54WYFtgmIiTiP\/300zBu3LjoZMrBVZ779+8Pb7zxRlCuzbh5VXPoVLl6bLwTp\/aNhf6W6JUQmTx5chRARQxVNse8U\/nkxFlR+2n\/mqD3eVl9uTpSp7JqTs2OxyKWudgaZe7nu83Zl19+Ofz93\/99nPOpg1s0NjQnqs6RlH\/6+yCxaw9V\/PjTXPQfBG7VkUc5CEAAAhCAAAQ6SQCB20m6FevWonbx4sVh48aNwwSuVWGO6s033xwveQfXb1G2bY1a3MoFklsqZ0\/bn+XG6mMO7+HDh2M9Jpq9W9sJB7dMUJhzrRhtK7L+zm2V9gt7LebN8VXc5namC\/CK3dGTYmUC1zu49rdEhx5E6EGBOXxFDFX\/pk2bhm1v7nSyZX2e619z931eKleUQ7oboGpOZbE1wjIXWzPMvaus+\/X56quvalvQ7ZodXygSuOk2\/npzxM8v79bqN0RjTQ+RXn311fhfBG7V0UU5CEAAAhCAAAR6RQCB2yvyrt16Dm56NtfOoxZtUdZide3ateGee+6JLq2JZi2MtVC2j22FNuf4+PHjNcdWLtHq1avDypUroyiudxa4EXzNiDgt1M2V9OdOU4FrZ4VTN6qR+HpZtkxs2ZZdPcyQU3vjjTdG19+fT37qqaeiu2tbmVOh3ws2ZXmJue\/fsnO5PgdtQdeDGz30aebMdbPjUTHnWFa9VnWcmft76tSpeN5ecyF1hBsRuEVzJDe\/fI4aawjcqr1GOQhAAAIQgAAEek0AgdvrHvjn9ovO4OrM6jnnnBOmT59eW8yPHz8+ilgJmvQMrglcbTOWAKri4KZuqdUth1Btt0vglp0zzW2DlIjx25Otu\/zC3ru2+t6fUe2T7i0No+w8qN+WnOZnQi23lVTipJ7oLQ2sxQJlZ3DriW6fV87B3rt3b9zS7h98NBJuo+Mxx1KuZso3d03xV9lR4B1ay19Otj6ah1XP4GreVJkjqtfPr9x573nz5oUNGzYUno835mxRbmT0URYCEIAABCAAgU4RQOB2imyD9aZObfr2Um09PvPMM4NernP11VfXXkKjM7g33HDDkNbszKx\/o66d3VNB\/7ZmO6\/qz91Z23Yut11ncH2O1oYEuZ239eeArc2i85Vlb4htxtFrsMvaWryMTb03IacvIbI3C+fGQbfPJ5flVe\/8bOqw2lZ85aCHPHrRmM5c6+PfsF21Y8piy43Hem+pVrvGt9m3eudiyr3tWVuObd4UjY0qcyTHv9m3QiNwq448ykEAAhCAAAQg0EkCCNxO0qVuCEAAAqOEAAJ3lHQ0aUIAAhCAAAT6nAACt887iPAgAAEIjAQCCNyR0EvECAEIQAACEBh8Agjcwe9jMoQABCDQcQII3I4jpgEIQAACEIAABCoQQOBWgEQRCEAAAhCoTwCBywiBAAQgAAEIQKAfCCBw+6EXiAECEIDACCeAwB3hHUj4EIAABCAAgQEhgMAdkI4kDQhAAAK9JIDA7SV92oYABCAAAQhAwAhEgQsOCEAAAhCAAAQgAAEIQAACEIDASCeAwB3pPUj8EIAABCAAAQhAAAIQgAAEIBAJIHAZCBCAAAQgAAEIQAACEIAABCAwEAQQuAPRjSQBAQhAAAIQgAAEIAABCEAAAghcxgAEIAABCEAAAhCAAAQgAAEIDAQBBG4fdePevXvDnj17gv57\/PjxMHPmzPDggw+GWbNmhSNHjsR\/f\/LJJzHiF198MV4\/ePBguPTSS4dk8dFHH4WpU6e2nJna\/Pzzz8OMGTNarksVnD59OixatCjs2LEjzJs3L2zatCmMGTOmVrfPxXJo5tqjjz4aVqxY0ZaYu1VJVTYXXnhh2LdvX5g4cWIttDVr1oQrrrgi9rnGzi233BK\/q8ewH\/I6ceJEHMPvvPNODOfaa68NW7ZsCQsWLCi9pjw1Nm3sNzPmqzIvYunHmXLZtm1bWLJkSRzTNm5z\/VWPvY\/J7p0wYUKleWPlx48fP4xrEa+iONN8LGY\/1ro1hmgHAhCAAAQgAAEINEIAgdsIrQ6XtcXtj370o9jSH\/\/4xygCjx49GsXt1q1bo4iR8LzvvvvC008\/HYWwFp1awI4bNy7+98MPPxwmHhsN3WK57LLL4mK5HR8tpt9\/\/\/0oPtOFstpbuXJlmDt3bmxq586dYenSpWH9+vWl11avXh1+\/\/vfh\/PPP3+I8GtHzN2qox4biY1ly5aFtWvXxnByQkoCT\/nbd6dOnYp\/z5kzJ+zatSsKL7tmIqwbudXLy7efe5hS79o111wzbLxoHPgHJmX5NToei8aZPXy6+OKL47wT56L+KotJff3666+HO++8s1a0LM4NGzaE+fPnx9+Ct99+O4ph+xjDHC\/NL\/2mpPem+RhTE8PNPEwoy5vvIQABCEAAAhCAQLsIIHDbRbJN9djiUtWZUyfR+uWXX2ZdSS06iwSuCWO5vt4xVflHHnkkRmyLVe\/8yZmSI2jumLnFraaoNs4+++wo0hX3119\/PUQ8Sxxcd911sRlbqFe9lsup1Xi7eX89Nt5NU0wmaPS3hJTc3ClTpgxx7e2e6dOnh7feeivs378\/uv\/dFidlfa4c9HDDctJDmirXVMbEvGdi91fpu7LYcmMvN84OHz4c5Jru3r172IOERmPzOzVszkrw1ps3lms6pzzXMl7+3jQfCVx7yJIba1VYUwYCEIAABCAAAQh0iwACt1ukK7ZjzqmK2xZeLar1kfPpt+xKeGrh67cop9sUdc+kSZOiqyM3Vh9zeA8dOhTFsdxS\/de7tZ1wcMsEhW1ZVYzmSFe5dsYZZ9TcPAkNc88aETsVu6djxcoErncE7W8JPD2I0IMCE0AWoDnk4qH+lfvoncVusSnrc8XbqHurLfNFor+RvMpiS8devXHm40kd3EbGo3drFZ99ygSuyj755JNDtq97rvV45e5NtyjbeMqNtY5NCiqGAAQgAAEIQAACTRBA4DYBrZO3eCfVnNPUwfXiUwtf7+BqUbtq1apw\/\/33R5dW25jlulgdFruErxax9957byyv7Y0mlOUcrVu3Ljz88MNDRG+reTcq4hYvXhw2btxY25oroZC7pq279Zy\/VuPuxv1lYssebOicqhzwm266adhZVdUhEaaHGbNnz65tZ7dz1DmntNO5leVlD3Lk3PtzxeaeFl3rtMBNt4WnIjVlWXQG1\/pL24AbEd\/iYq6q\/i4TuCqTxuQZlvGql48Ee3pW2h5AdXr8UD8EIAABCEAAAhBolAACt1FiHSxvjpHEiReu9sIpfwbXXkBVJHC1zVgv66ni4PrFqgnkZ555Jm4BPffcc7tyBje3AJeIe\/nll+O2T320jbXomhfC\/oxqB7urrVVXPWepRtP8vIhMhWG987ttTaCgsrIzuM1sT5ZQzJ3ZbucZ3KLxWDTO6m0jb2Q8mmsrQWn9KrRFZ9eLhLgedPht3zleCxcujA\/H7Gy3F\/FFL5nyY60b44c2IAABCEAAAhCAQKMEELiNEutgeS027cVSakZOnF44JZGavkXZzudpm3H6FuXcG5atvNWrNxnrY2cy\/dlCezusucntOoPr3xBrbSgvO29b5F7bW4G9o51ea\/attR3szoaqLmNTLz8THdqO7N+0LfdQ37X6tuGGEkkKl+WVE1JVr7Xa52Wx5cZj1bcONxtbLqayOHNvGs8xzMWUu1ddiMBtZdRzLwQgAAEIQAACvSSAwO0lfdqGAAQgAAEIQAACEIAABCAAgbYRQOC2DSUVQQACEIAABCAAAQhAAAIQgEAvCSBwe0mftiEAAQhAAAIQgAAEIAABCECgbQQQuG1DSUUQgAAEIAABCEAAAhCAAAQg0EsCCNxe0qdtCEAAAhCAAAQgAAEIQAACEGgbAQRu21BSEQQgAAEIQAACEIAABCAAAQj0kkAUuKdOneplDLQNAQhAAAIjnID+v3f5QAACEIAABCAAgV4TQOD2ugdoHwIQgMAAEEDgDkAnkgIEIAABCEBgAAggcAegE0kBAhCAQK8JIHB73QO0DwEIQAACEICACCBwGQcQgAAEINAyAQRuywipAAIQgAAEIACBNhBA4LYBIlVAAAIQGO0EELijfQSQPwQgAAEIQKA\/CCBwm+yH06dPh4ceeijs3Lkz1rBr164wc+bMwtp2794dZsyYEY4cORKuuuqqIeXefffdcMkllzQZyf9\/2xdffBHrv\/766wvrsrinTp0a4\/34449r8VgcuWstBxdC8Mzmzp0bnnjiiTBmzJha1dbuBRdcEPbs2RPOO++8+N33338fnn322bBw4cJYft++fWHOnDnxu07H3I68q9RRj43yv\/3222Ou+mj8aDz5saTvJk6cmC03duzYYQyrxNSOMlX73Pdlrn8tlvXr14fLL788zpei8VI17mZiK5svK1asCEuXLm05Ns3l559\/Pixfvjy89dZbtfGe+63JxVR1jlTJ56677iocV541ArfqyKMcBCAAAQhAAAKdJIDAbZKuFtr6aDFrAkR\/54SqFpEqb6LE\/pbw0EL04MGDw8Reo2GlwrXoflvQSpBPnz49ivSbb745Fn\/ppZfC6tWrw8qVK4dcS4Voo7FZebX9wQcfRGZeqJiIXbVqVdD\/9DFB+80334TZs2eHKVOmREbK076zv+fNmxc2bNgQbrvttnivCQMvnpuNuVv31WPjY7CHGFdeeWV47LHHCnP2Dzv0t2fYTS718lL\/pTnMnz8\/PtzQwwzf14rZxq7E\/EUXXRQ2b94cJL5OnDgRDhw4EBYsWNBQdzUa25IlS7Lj7L333osPF+yBjOJuJTaby0omnXv2oEy\/HfpUZZibI1XzyY2\/3EM0BG5Dw4\/CEIAABCAAAQh0iAACtwmwErQPPPBAWLZsWW1Ra9WYmPjss8+i07Z9+\/Yo5uT06t9awG\/bti2K3VTgmpjTvd7h1P1r1qyJTZhj6R0auUZytcwZLnKTLW79d9asWeHqq6+u5aG6165dG1SX2lJudu2pp56Ksbb6UcwTJkyouW9Hjx6tud7epVU7JhDEZNy4cTXR48WZ3SPxZqLI39uOmFvNuer99dhYHV44KbctW7aEadOmxa+9wEvLffrpp4UMq8bXbLmyvIpyUHt+TCgnPfyQiJw8efKQB0kSqn4sVY210dg0Z+zhih9nupbOT4uhmdgU13fffRf+6Z\/+qbZrQfUV1VWFYdEc2bt377AxlPu9UfvpuEo5I3CrjjzKQQACEIAABCDQSQII3CboSsQuXrw4bNy4cZjA9WLEu6PewfVblG07rkSctqHK3ZQ7pXu1jVgfc3gPHz4cxbKJZttmbItPu6doq7QWzlo0qx7dO2nSpFoeqkMC95577omLdeVm17olcL2Da3\/X215rLrDcs5zwGDSBm25Bt50D6id7YKK\/c1vV023eTQz7pm4pE5FFOagx7\/Lb3xKy9pBEZVT\/pk2bhmxprxpoo7Gp3nSc3XrrrWHr1q3RSdcc9uO2mdhsa7J3su2hTureWp5VGBbNEdWh3x0bQ2rLXPU0n7IjEAjcqiOPchCAAAQgAAEIdJIAArcJuvUc3PRsrp2bLNqirEVjKizlUmlx\/NVXX9Wis63Q5hwfP3685tjK7bWtxV70+tQUsxbfEsHa9qhy\/eTgKlbbgqoHANrqre2nOYFrjLW1WuWK3N9BE7jm1Gl8WH\/alm4vrHw5L4L8OeYmhn1Tt5S59rmHGhJZ9nDI+jd3Btlv0zXHv5E+bzQ2bZt+9dVXo6uqT9pmzuEscz1TqH5nhr6z3Rj6nchtwy4aBzmGqTi\/8cYbYw65MaS2i3YM2FbsNHYEblNThJsgAAEIQAACEGgzAQRuk0CLzuDqjOk555wz5Hzr+PHjo4iVE6oXA\/kzuCZwtTVY4rWKg5u6dVa3FrBqO+fg+pfJWMr\/9t\/+2\/D666\/3xRlcv5hWfF6Mpe5jKuBy5xD1cp5unjVtchjVbis7g5uKjSJRr5xzYq9XDm7Zueuc827bZnNCykSpHMkix79qXzQam3dr1YbOestp1QMjf3Zc24H9Nf\/woWpsaX8VbU8uGgcpw7KzuibYU9HbyM4IBG7V3qUcBCAAAQhAAAKdJIDAbZJu6tTm3p565pln1s662jZALYhvuOGGIa2aS+NFqJ3BVUH\/tmY7g+vPyVnb5v7Ue6Nz0VuU\/ZuLW307bRFSz8xi9s5Ulbco+3PKaid9o3D6BuYmu7frt5WxyQlU7\/ZZnxcJ2V4J3LK80hy0bV4CUefQff+aM5u6rrbdv5k3kTcam3\/reNl8afVN5Lk3h\/ut2X7eVGVob932sefGUG4eVhk\/CNyu\/2zQIAQgAAEIQAACGQIIXIYFBCAAAQi0TACB2zJCKoAABCAAAQhAoA0EELhtgNhvVXh312Ir+\/\/p7bcciAcCEBhZBBC4I6u\/iBYCEIAABCAwqAQQuIPas+QFAQhAoIsEELhdhE1TEIAABCAAAQgUEkDgMjggAAEIQKBlAgjclhFSAQQgAAEIQAACbSCAwG0DRKqAAAQgMNoJIHBH+wggfwhAAAIQgEB\/EEDg9kc\/EAUEIACBEU0AgTuiu4\/gIQABCEAAAgNDIArcgcmGRCAAAQhAAAIQgAAEIAABCEBg1BJA4I7aridxCEAAAhCAAAQgAAEIQAACg0UAgTtY\/Uk2EIAABCAAAQhAAAIQgAAERi0BBO6o7XoShwAEIAABCEAAAhCAAAQgMFgEELiD1Z9kAwEIQAACEIAABCAAAQhAYNQSGFiBe\/DgwXDppZcO6dgXX3wxzJo1q+nO7kSdZcGcPn06LFq0KMyePTtMnTq1Vlyx7NmzJ2zatCmMGTOmrJr4vY\/\/o48+ivXlrqnskSNHwn333ReefvrpMHHixEr1lxWyXHbs2BHmzZs3LHaL5cILLwz79u2L7VaN2Zd79NFHw4oVK8rC6avvq7JR0GnfFfFKOaxZsyZcccUVQ8ZRpyE0k5diOnHiRNi2bVtYsmRJOHXqVJy377zzTgz32muvDXv37g2ff\/55bY4bk0byqReb2i9r0\/P18Wo+Fs2rqvFp\/u3cuTOsXr26Nr+V89lnnz2s\/3LzRmVvueWW2FzKxo+DXLncXGo1n6p5Uw4CEIAABCAAAQi0SmCgBa4WclrAjRs3rlVONYHY7jrLAmuXwPX1qE2J43Xr1oWHH344ime7JsFsguLbb7+tCc2yOKt8r0Xy+++\/H8VnKrYkEJYtWxbWrl0bOWszwwAAIABJREFUq5K4ueeee8L69evD3Llz4zUt+JcuXTrsmkTA73\/\/+3D++ee3TYxXyaedZcrYeLGnv+fMmRMZel4Sg0UcTKA0IwRbybNeXhqTK1euHNK\/6sujR4+GmTNnhosvvnjYQxAJPxO2KRPlX\/Vhj3KqF5vP2dqcMWNGePPNN4eNM33v49X8aSU2m6uKwR5gqa8feeSRYWI1N280Nnbt2lV7OGCxeOGtcaD5koszHUNF\/dQI61bGEPdCAAIQgAAEIACBRgiMOoFri9FPPvmk5gQJmLk1csN+85vfhO3bt4fLLrssXtfi8txzz43uSU7gaqEsN+fYsWNB9ZpT7N0Rc3tSJ0SLTO8UPfjgg+Ef\/uEfglxO1XPDDTdEB\/fkyZNRbHr3yhzcQ4cOlTpZWgjfe++9YdWqVXF86L+KSYtmf23Dhg0xx0mTJoX9+\/e31cH1DpQ4fP311zVH3Ttgik9x3HTTTeHll1+OC3W7Nn\/+\/PDCCy+E6667Ll57++23Ix8TALrWbRHXyIQrKluPjcbsK6+8EvtD4ysVJ56NBIv61HMwESRHfMqUKV11cOvlZQIu7cvDhw+H8ePHh927d8e+NyEloaVxoTFw\/PjxYUz8DocqfVIWm+rwbepBWW6cpfFKoKf91Uhsiuu7774L\/\/k\/\/+eaSFUf\/rt\/9++GObi5eSM+9lAvdcL1ECk3Dnw5MU7HkIR22k9VGFMGAhCAAAQgAAEIdJvAQAtcv0XZb+O0hatt\/dW\/U+GqReaHH34Yli9fHiQ6JQK1qM7Vqet2\/4EDB+J95o6aSFYbRSJzwYIF0dXUot62Bf\/d3\/3dsHpM7KpOiW0JXN0nEeBF6jPPPDPMtfZbjk3g3n\/\/\/XEhq23Ids3u7cQW5TKB6x1c\/b148eKswFWsttVcdZ5xxhk1J1AMrZ52OffdmJRlAte2q8odNDYbN26sObi6prGwefPm6Ih6DhK92pqsBwq5La6dzK9MRNpWYMXgd1ukW371vXdS\/RZeYyI3u5E+L4stbdM7mek48\/FK4Kb9VTU2y0u\/A6nAz21RTh3cdOz7nRL2d24c2Hd6sGWuus8xnXONcO7k+KJuCEAAAhCAAAQgkBIYaIGbc1v9uTvBkBumRZ3ErlxTuyZnVY7nX\/7lXwY5pHIw9N8iB9e7qTlnVWdO77777vDzn\/88unD6SHSrTS0oTeBKqEpkahtmuo1YLpDa10eCRd\/n6rTzq76zqzq4vRK4itXcbbnUyjXn4OpaKuy8eEgdt5Ey5csErsaDtsj6\/GyrrvHyzp2VEy89QEnPr3ZLoDT6UMP6MidwzUWUA+nFbrN9XkXg+jb9WErbTAVurr+qMPe7PtSef29A2RlcPw700Mef3S86U5yWy+VYNudGyhwjTghAAAIQgAAERgeBUSdwbbuxuaHpy5vse9ua\/O\/\/\/b8Pf\/VXfxUdQwmwRgSuba3UYjzdEmwvbrKFZ5nA\/dGPfhSdWi1aixzcei+DauQMruLuhINbdh7Ttp9q6hWdwV24cGHtfKHK2VZmL3r9mcORMo3LzuDmzidv3bo1btc1XkXncm0cFgmkTjIqy8v6yvrSRHoqcHOCMmXS7jO4jbSZ2wqcno9u5MxqTuDn+s\/HaONAHH7961\/HLcW53wRfTyrgy870pv3UybFD3RCAAAQgAAEIQKAZAgMtcHNvUdYWTV2Xe\/rnf\/7n4dZbbw2TJ0+OL4mRs5q+kVYvOsq90ddgy2Gx7cLm8pqD68+y2Rnc9FyuFvQSz2UCt94Z3Ndff732xtR6bxCu95bidAt3JwSud88tTrVj52irxucZmsOVu7eZCdGre6qyUXxV3qKc9qfu64XALcsr15eKNRV4OcHX6pt9y2Kr12bKt91vUS4TuPXmjfjZ75n+tnP75iDbONAW5Fw52xngcyzqp17NF9qFAAQgAAEIQAACRQQGVuC2o8ub+b\/iaUe71AEBCEAAAhCAAAQgAAEIQAACjRNA4BYwM8ei1f\/v3Ma7pPU7\/JterbaRmEfrJKgBAhCAAAQgAAEIQAACEBhNBBC4o6m3yRUCEIAABCAAAQhAAAIQgMAAE0DgDnDnkhoEIAABCEAAAhCAAAQgAIHRRACBO5p6m1whAAEIQAACEIAABCAAAQgMMAEE7gB3LqlBAAIQgAAEIAABCEAAAhAYTQSiwD116tRoyplcIQABCECgzQTOOOOMNtdIdRCAAAQgAAEIQKBxAgjcxplxBwQgAAEIJAQQuAwJCEAAAhCAAAT6gQACtx96gRggAAEIjHACCNwR3oGEDwEIQAACEBgQAgjcAelI0oAABCDQSwII3F7Sp20IQAACEIAABIwAApexAAEIQAACLRNA4LaMkAogAAEIQAACEGgDgZ4I3I8\/\/jhcddVVQ8J\/9913wyWXXNJUSqpv\/fr1Yffu3WHs2LEN15HGo9iarauo8S+++CIcOXIkXH\/99cOKnD59Ojz00ENh586dte\/mzp0bnnjiiTBmzJhh5RXvSy+9VPh9wwAKbmiVa1qtzzOXn+8HGw\/+2ooVK8LSpUtDrpza+v7778Ozzz4bFi5cmOXWLi6dqKcqmwsuuCDs2bMnjBs3Ltx+++1BnPSxMfuHP\/whzJkzJ16rx7ATOeTqrJeX+iuXg+Zw2pe5Pt+3b9+wXBvJqypzz7Jem\/oNuvzyy+PvmMVr\/XXeeec1ElrQ78Xzzz8fli9fXhvLanvChAnDfidzbdWbN2VjSL9TGk8+9qI555NC4DbUxRSGAAQgAAEIQKBDBHomcL0gbVWwtSrEWr2\/rG9sIT116tQwc+bMQoFr39vCX2IuJ\/pb5VUWr33fbi6q74MPPogi1YsBtSdGjz32WLjtttti87a4f++998LEiRODCYSict98802YPXt2mDJlSseFf1V+jZSrx0bjYdWqVfF\/+qQi3h6e\/PjHP659J05WLmXYSFytlq2Xl6\/bPwDS374vfS72t76X0NfDDP997oFQUQ6Njsf58+cXtmkCUA8VNF7r9VcZU\/u9UDl7yKX5smbNmtpDC6tDZTdv3hzuuuuucOLEiXDgwIGwYMGC8Lvf\/W7YvMmVs3r8GEpjr8oagVvWs3wPAQhAAAIQgEA3CPSFwJUzcfDgwbiY0yJMCzl9du3aFaZPnx7dzR9++CG89tprNadK35v789Of\/jScPHkyuq5a5GlB9tlnnwVzCd96662a0yNXQotBLQLN9ZJjkXOAbaHt6zp8+HB4\/PHHw3fffRcWLVoUHRVzo80x8y6PXEe5OlZGOaUiNxXAXuCOHz++lo+P1xzcqry08DeX2Orx14yVYslxbcYZTwewd6AkCI4ePTqExZYtW8K0adPibbZQt4W9rhnfXLlPP\/00upomehoROt2YaGVt1GPj3UzVY0JFfeIFju8jf48fI63slCjLIfd9WZ\/rnjSHtC\/18GL\/\/v3hjTfeiPM6zaFZ574sttw4sxx9m4pfolAPYSZPnhyFpT1cSPurCkPFpd+Xf\/qnf6oJeP2uHTp0KOvgWp1+TuXmTa5cyl\/\/TmO\/8sorgx6SFPG3ehG4VXqXMhCAAAQgAAEIdJpAzwSu36Kc28ZnLuXq1avDypUrg9zNq6++OoovOYASRyaKJWB\/+9vfhqeeeio88MAD8fuLLrooCjrdp48X0Pq3RK7VpX\/7eCRK\/fe+LglaE8O6T+0tW7YstrF27dqwbt26+L13a6s6uH6Lsm3HtQFgddx8883xUrpFuRFeEjznnHNOrOerr76qOap2LeXaru3aZYLChL3iUpsSqebqSrx6Z0l9Z+VM2DUrdDo9yarUXyZwfe72t\/Iu2vpuDrnGbo5hOx5YtJqX3Z\/LwfelBK45+iYmxcBySHcDVIlLZRodj56Zb9P+1m+Sfh9SB9f3V1lstjXZu8X2sKZoi7LlsmnTpviA56yzzirsc9Vh5WxXhOef7hZQ7HpgKHGr7dI5\/pYTAresd\/keAhCAAAQgAIFuEOiZwDWRKLdA4sxElD\/rJVfRBK6EnQlN\/a2trvrYmUzVpwWY3N+NGzdGN0WLOQk4CTcvcPVvc4ZNMKYOrhZ9ixcvHlaX3FgTl7YtVq6SPibUjx8\/XhPMPoeqW5RVl+LxcZr4tTOXFoMcZRPnVXnZwPIuj65JVNvHc+2GwM0trL2IMZfvxhtvjA6mbdf14mFQBa76xOaF+lrb1vUARoLLXEa\/hVsPdjSu0+3tRW5vJ39oykSk2k5z0LVU4Nr5dZ+D7UDI5Volp2YeKqRtFp0jtnOsaX+VxeV3f6is3\/FRT+CqbK5\/q1xL+adjTQ7usWPH4vsD6o0hBG5Z7\/I9BCAAAQhAAALdINBzgask5cZpMf6Tn\/wkuqByYrVAlIgrEritOLhVBK7fJpw6uCYutdgzBzf3EhmJZMtHQl7tVjmD6wWuCfRUkCuGO++8MwrwRnlJIOqjeMzBtcHmt4ubM94ugVt2zjTdGpmKWX3vzwMqZr9ddyQL3LLzoJancq63\/TUVK2Xndzv9I1N2BrfKFmvvGvr8n3vuubilvdEXOFnOjY5HPVTYu3dvYZsmQPV7keuvRrbN58ZyTuDmHgzpXLJ\/CGTzRkdA0gdDiqloy7ux1pzz9xa9yA2B2+nZRP0QgAAEIAABCFQh0HOBKxfKts1pwarFk9xKuQb6zrb8pg6uiU6V9WdwzTlR8v4MbqMOru5P3WQt8uSY+u3B6Xlbe4GSnSO2rcZWrt4ZXL9F2Z+3tTeannnmmWHWrFlxG6QX\/43ysrrt4YJcYXOftb3Rzup6ru3Y0urfWmtc9BDAztt6lsYp94bYXDnlMpIFbhmbHIc0X39mXDxyY0hbWJsVhFV+UNIyZXkV9VnZW5T92XSfayPjtCy2dJxNmjSpdh4+12bqCKdvIm6EX5nA9fMm94bjsjcr2znmXDtV703zQeA20sOUhQAEIAABCECgUwR6InA7lQz1QgACEIBAbwggcHvDnVYhAAEIQAACEBhKAIHb5RGRnntV8zlXt8th0RwEIACBlgggcFvCx80QgAAEIAABCLSJAAK3TSCpBgIQgMBoJoDAHc29T+4QgAAEIACB\/iGAwO2fviASCEAAAiOWAAJ3xHYdgUMAAhCAAAQGigACd6C6k2QgAAEI9IYAArc33GkVAhCAAAQgAIGhBBC4jAgIQAACEGiZAAK3ZYRUAAEIQAACEIBAGwhEgduGeqgCAhCAAAQgAAEIQAACEIAABCDQUwII3J7ip3EIQAACEIAABCAAAQhAAAIQaBcBBG67SFIPBCAAAQhAAAIQgAAEIAABCPSUAAK3p\/hpHAIQgAAEIAABCEAAAhCAAATaRQCB2y6S1AMBCEAAAhCAAAQgAAEIQAACPSWAwG0D\/tOnT4dFixaFHTt21Gp78cUXw6xZsyrXfvDgwbBnz56wadOmMGbMmCH3Wf2zZ88OU6dOrVRnLibd+NFHH1Wuo1JDDRTyMc2bN29YrmJw6aWXxhotzqrXdM+JEyfCtm3bwpIlS4YxbCDMnhStx0Z5aSy98847MbZrr702bNmyJSxYsGDItb1794bPP\/+8EsNuJdloXj6HCy+8MOzbty9MnDgxlI2DRx99NKxYsaKhtFqJTQ1Zm\/Vi8zlUCc73tc0R3We\/L7l5kxv7FlOOYRpTOm9y9470+VWFPWUgAAEIQAACEBgMAgjcNvSjLZQvu+yyKESOHDkSZs6cGbZu3dozMWlpNSOO24AkW4UWzu+\/\/34UImvWrAlXXHFFjY\/iXLlyZZg7d268d+fOnWHhwoVh165dUbCeOnUqitd77rknrF+\/fki51atXh6NHj0bmF198cfYhQadyale99dj4NjS2JGJnzJhRu2zXrrnmmkoMu\/kAoNG8lMOGDRvC\/Pnzw\/Hjx8Pbb78dbr311tqDCxsHyuH3v\/99OP\/886MAbubTaGxi\/uabbw5p04tDi23OnDlxfK9duzaG1chDFwn8s88+O84L+1t1FM0bfWe\/Nzb2FceyZcuGtK95o98jz1WiOb1X9aX8c+XSh3DN8OceCEAAAhCAAAQg0AkCCNw2UE0FrqrUAvfcc88NN9xwwzD3Rd+bIyM3zlwrc3Bff\/31cMstt8TI5BJpMa\/y5uCq7kceeSR+L6dz0qRJ8fuTJ09Gx8vqHDduXEgFrhb1qvPYsWPhwQcfjIvpKq5pGzDVFuxavCuOr7\/+eojLLff6uuuui01J2OjvV155Jezfvz988sknNVc3LafcDx8+HMaPHx927949Ih1cL2xybMREfWniQ32bu1aVYTv6s0odzealuo3D5MmTs+MgnQdVdzdY3M3ElrapMZeOUYluE7VeMFqfVeGmMhaf5omJ3tzYSMe+fwiQa9\/XUW\/eVC1XNR\/KQQACEIAABCAAgW4QQOC2gXKRwFXVErlffvllzbXUv\/X58MMPo9MowaJrWsBK4K5bty48\/PDDwdxgEzEmcLXYtXsPHToUhbTcTv1X90ybNi2KRrmkWvDnBK7KavGsz7333htWrVoV\/9Z\/JX4lnv21Z555JjS6OM9hLRMUtj3TFvdy8JSbHNrUlbLt36rTYhvJW5TL2IhJPffWHN2qDNvRn1WmTrN56b4nn3wyPrDRJx0HGt+bN2+OTr5EpjmWjeTVaGx+l4G1efvtt8cHMH6MLl68OGzcuLHmoDYTm\/ractYDr3oCV3xSJ9k7uL59z9Wc79y8qVquyhigDAQgAAEIQAACEOgmAQRuG2jXc3Albs1tVVMSkPbxZwb9GVwJV3NVdebORK8cXG1V1Ef3amEqgbp06dKwffv26PCam2tub07gmlNs23rljuqjs3na\/qv6\/DU7B9kqqnqCQrmki3KJh2+\/\/TZuxzX38qabbioUD4MucM2d9Vty\/bWqDLVNtREh2Eq\/VxGRubzswY4eAGnbcjoOfA45Z7tKzJ2Mzc5CazeFHjQ1wjw9j18lzqJztLn2U15F86ZquSqsKQMBCEAAAhCAAAS6RQCB2wbSqcA1F00iVI6rObjWlBas3sHVdZ1HTV8yJRdHTqoW+XJdJVrrObiNCly5oubgejcnvdYGRLGKemce\/SJbZZVzKma17VPnG+1crpUz8TCSBW7ZedAq25OrMuynM7g5EZU+6EgdURsHzZ5ztfHcKPP0AUJRHP68q9pq5Ayu5ry252vHRtU4VS7X95oX1n56Lti7ulXd35E8v9r1G0Y9EIAABCAAAQj0PwEEbhv6qN5blP1bUe3tpRMmTKh7Blfizlzf9AyuObT2xmZ\/BrdRgasXxUhs+\/O+EuW5a23AVNsurdjtDbR+Qe\/btbdQ595QmyuXLvJH2ktw\/BjKscmJi6Ktpdaf9Ri2oz+r1NFMXmVvTE7fsN3om4ot7lZiq\/qG50Zj82d8Faf60J\/jz42N3Niv9xZllfdvUy9yf8vKVel\/ykAAAhCAAAQgAIFuE0Dgdps47UEAAhCAAAQgAAEIQAACEIBARwggcDuClUohAAEIQAACEIAABCAAAQhAoNsEELjdJk57EIAABCAAAQhAAAIQgAAEINARAgjcjmClUghAAAIQgAAEIAABCEAAAhDoNgEEbreJ0x4EIAABCEAAAhCAAAQgAAEIdIQAArcjWKkUAhCAAAQgAAEIQAACEIAABLpNIApc\/f+h8oEABCAAAQg0S+CMM85o9lbugwAEIAABCEAAAm0jgMBtG0oqggAEIDB6CSBwR2\/fkzkEIAABCECgnwggcPupN4gFAhCAwAglgMAdoR1H2BCAAAQgAIEBI4DAHbAOJR0IQAACvSCAwO0FddqEAAQgAAEIQCAlgMBlTEAAAhCAQMsEELgtI6QCCEAAAhCAAATaQKBpgfvxxx+Hq666akgI7777brjkkkuGhXX69Onw0EMPhZtvvjn7fRvyiFVYO1OnTg0TJkyoHF+V9pXv+vXrw+7du8PYsWOr3DKkTMpL7Jqtq6jxL774Ihw5ciRcf\/312SI+Buur3DXdrLoWL14cNm7cGM4777yG8y264fvvvw+33357UPsrVqwIS5cuHVJ03759Yc6cObHvPB\/Fc+DAgbBgwYJYXvU8++yzYeHChWHMmDHB8rjgggvCnj172hpz25KvU5GN3Z07d4a5c+eGJ554IuZluRoz\/dvYqK9tDorlXXfdVWNbVK5ojnYqx3p5qc3c+LMxoO\/TeDUHL7\/88vg70mqft8o8nUN+7BXNq6qcxUC\/YcqzEYY2p4raL5o3nnWOf5V8ELhVe5dyEIAABCAAAQh0kkBLAtcLPi2KDh48OGRhboH3SuD6+LRAe+mll7LxVQHcDoHbikAui9GL+5kzZw4r7vtAX4rF6tWrw8qVK+ODB7smYaWyElTHjh1ru1jUONFn+vTp4bHHHgu33XZbTYxKxD7\/\/PNh+fLl4ZtvvqkJWltc2+Jd5WbPnh2mTJkS+1Pxrlq1Kv5PHy98y7j1y\/fK8YMPPoiC34u4ND7\/EON3v\/tdmDhxYlbMW7krr7yyxll1GV8Tz53Ov15e6jcbAxbb\/Pnz45jTgwt9n3uIIWF50UUXhc2bN0dRf+LEiSEPP6rm1CjzHEvFqzHox57GZlEOVWJT\/69Zs6Ym7sviTMdBjqvNKT9vFEsV\/vPmzQsbNmyIc7XeGELgVuldykAAAhCAAAQg0GkCHRG4WnhqgabPrl27opgxB3f8+PFRnHz22WdDnKjHH388fPfdd\/G67pFI865B7po5KOY4yEE588wzw6xZs6L7USTAi+L74YcfwmuvvVaLS\/Gbc\/bTn\/40nDx5MrqKWlBbDua2vfXWW9F51EdxaOEtt9G7bTmBa2JNeVtdhw8fDsZj0aJFQ9zoNGe1J+EnV8vcPGPlB4+cmwceeCAsW7YsXl67dm28T\/3kr61bty5yk4B444032u7gbtmyJUybNi2KMu9SKSbv0nqnSTw0bszB\/fTTT8O4ceOyIkL1mPBpxmnv9IQrqt+z0Lg\/evRonAP+I+HiczMhpDLe6UzLGXOV8y54N3Ity6tebH4M2EMMjZvJkycP2QlSxKssv7LYdH8ZS\/3WmAi3sSch\/N5778X5o3ndiGuunPX7cujQoZqD6+eFnz+WXzoO9NAjjUm\/R3po1Mi88fyfe+65OG\/rjSEEbtmI43sIQAACEIAABLpBoCWB67co57aGmmvqnULbwpw6iib+\/vCHP0QnWIJY7ogcLYmbIkEmkSbhpnJa2EmQ\/uxnPxu2RblKfNrafPXVV8c6VJ9EhrnSErC\/\/e1vw1NPPVVrTyJQceo+faysRIg+tmXUtuF6Xn5Lqb73dXlxrnpSYWoiVO2aCCpzcP2WYxO499xzTxS42oZs15SfhGGntiiXCVzv4Hq3sd4W5dTBNTd30ASud2+9SyfR4nNOt6rbtnD1cbu3xZf9SJWJyHqxeSfb\/tactK27alv1b9q0qamdBmWxqf4ylirjdw\/obz38kriVa+rHZiPjMX34Yw\/x0odXuXEg9\/vVV1+NLriJbv0Wqf30oUFOCFucnn+VMYTALZsNfA8BCEAAAhCAQDcItCRwvSOphaBEqASSPxsoV9ILXBNyOmuoj9wNfWz7sNw6\/X3nnXdGZ9GfAfVup+6RaJVAk2hSubPOOqsmOL1I1CJOYtsW994ZLopP23a1ZVQfCVDboqxFq4lCcyG\/+uqrcM455wwRuPq3d65VT+rgpiJSi1jVJTfWeMh1MbfYctb2x+PHj9ccW5+DF71+AFV1cHspcE2wyAm\/8cYbw1\/8xV+EO+64I55FrXoGVw8R9BDFFvTdmETtaKOK2Mq5d2q7yGXU+FS\/pwJM\/25EbLWSX728imJTf\/sz+\/7ctmJJz2en+VeNt1HmRfHa752NPTm42t6vs\/DtiM229ethlv87zdPa0txpReDm+FcZQwjcqiOPchCAAAQgAAEIdJJA2wWuXMGtW7fWhG561lOiMSf+UoGbOrh64dEjjzwSnnnmmSh87cVHtvjNObgmKAVQrqyEz09+8pMhQjyNzwS4BG4rDm4VgetjTx1c46FFqzm4uZc9+QcLEvJqt9UzuCYoO\/GSqXpncL275M\/gqv\/qCVx9b1t39fcgnsFNhVIqtoqcOM\/Uc+qWwK13frQotr1799a2sac\/fiZKtVujiuiq9+NZdrY1xzzlfOutt4YXXnghPlCxsacHUum5XHsZWtUfcy++G3lIoPjqnZlNmadncPUAz7Yj+9\/Yek6v5YTArdq7lIMABCAAAQhAoJMEWhK46VuU\/XlbObRyMrSQti219jIj3Zeel00FrhaIcnPTc6X+DZ\/pG0PLzuBqK6MWb1qsFcXnBa53m\/0Z3NShVqzawuy3KFcRuOrY1E22vP0LsXI5+3N3xqFoG6MNoNxbZ4veRNupLcrejfPnqu3MKW9R3ll7u3TRmWR7QVSu79K35Krv\/fjJnc\/u5A+MfwOwf0mYnQVOY5s0adKQHQupW5uKPft9aOScq+VbFltVlvXmldpqJjafp58zxsO\/WKuReV329nHF63eMWHs6OmLvGCgaQwjcTs4k6oYABCAAAQhAoCqBpgVu1QYoBwEIQAACg08AgTv4fUyGEIAABCAAgZFAAIE7EnqpwRi9u2u3dtu5azBkikMAAiOcAAJ3hHcg4UMAAhCAAAQGhAACd0A6kjQgAAEI9JIAAreX9GkbAhCAAAQgAAEjgMBlLEAAAhCAQMsEELgtI6QCCEAAAhCAAATaQACB2waIVAEBCEBgtBNA4I72EUD+EIAABCAAgf4ggMDtj34gCghAAAIjmgACd0R3H8FDAAIQgAAEBoZAFLgDkw2JQAACEIAABCAAAQhAAAIQgMCoJYDAHbVdT+IQgAAEIAABCEAAAhCAAAQGiwACd7D6k2wgAAEIQAACEIAABCAAAQiMWgII3FHb9SQOAQhAAAIQgAAEIAABCEBgsAggcAerP8kGAhCAAAQgAAEIQAACEIDAqCXQE4F78ODBcOmll9agX3vttWHv3r1h3LhxlTri9OnTYdGiRWH27Nlh6tSpw+5R\/XsJhHaPAAAgAElEQVT27AmbNm0KY8aMqVRnGpNumjdvXkN1lDV04sSJMGvWrPDOO++0XPeRI0fC559\/HmbMmFHWbO17n+NHH30U2eWu6QbVf99994Wnn346TJw4sXIb9Qpav+3YsSObfyPxqZ01a9aEK664YkgeF154Ydi3b1\/bYm5L4hUqKWNjVZTlbAw9B8\/10UcfDStWrKgQUXuK1MvLzwe1pt+BLVu2hAULFsQ5Ytf026Cxbr8Z6dhtts\/LmOe41WNpfXP++efX5rnPoervm+4Rm23btoUlS5bE37B67fo8PAtxu+WWW0Lumv\/NtXJq98UXX4yx22\/A22+\/HX9rczG1Z4RQCwQgAAEIQAACEGgvgZ4JXC0GTdTq7z\/+8Y9tFZPNYmpGHFdty+pevnx5uOOOO6LQyAn0svpsQXvZZZfVFqNV79FDAX30AGDdunXh4Ycfjg8K7JoeCpw6dSrW++2337ZVLCr\/999\/P+bthZraVk4rV64Mc+fOjbHs3LkzLF26NKxfv37ItdWrVw9Z8EvsTJo0KWzYsCHMnz8\/HD9+PPhFeRmXfvm+HhuL0UROUc6\/+MUvshzefPPNINHVrgcVjTCrkpeJqfSBjT3Eueaaa7JjY+vWrS31eVlsOW5FLH3f+DndzIMo3TNz5sxw8cUX134T6\/WhxPDrr78e7rzzzlrX6NqyZcvC2rVr48MBzTvNDxPNhw4dCl9\/\/XWc53\/zN38TbrjhhiEPGC0feyCSi6mRcUBZCEAAAhCAAAQg0C0CfSFwtXhatWpVeOaZZ+o6NYIih0GLMXNwvVtiToVEjjm4R48ejYvFTz75pOYaanGnhduxY8fide9aeIGr9tTOyZMn4\/8kuiTMvANpZYpcSd+RqtsLe33n3RPFr0WonGPvsOieRx55JFYlcaOPuVmK\/eyzzx7mbqUDSAvee++9N3LWR\/8VA9Xrr0koqj2Jxv3797fVwVWuitWcY1tgW6wS19ddd138p4nU3DVbvEuwTZkyZchDAjFO6+3WZGqlnTI2jebsOaTjp5mHKs3mVpaX6tXDDXtAYS6nv6YyJsz0d1q22T4viy3HLXetqG9yeVXhePjw4TB+\/Piwe\/fumoNbrw9NfPrfOM9JAjedE5a75rl+4\/T7lbr+isHmYS6mKrlQBgIQgAAEIAABCHSbQN8IXG2HleD667\/+62EiTFsW5fppwSUxZiLMnMdUNJpI1T1yBPVfW8jJ9ZTIsnsOHDgQPvzww5pTkhO45pRqUfjll1\/WHMhzzz039ld6zbb45TrTFqq2\/VnOi7WvvPSRyFUdilsLU\/tewlz3m9BWXNOmTRsmXPWgIN0O6bccm8C9\/\/77o8DVNmS7Zvd2YotymaCwLauKxdz93DVzf8XGBLPd8+STT7bVde7WhCxj00jOqss4TJgwoeZ+av6Yq9fIdtlWGJTlpbpzLqe\/5rfrpgLX59qoQ10vNr+jwLhpPm7evDn+pniWEt\/aKp+Ox2bcW2Od5my7G3J96J1o5aSPfj+KXFeNJd1jZW1M6MGgfltsl4TuZ4tyK6OfeyEAAQhAAAIQ6AWBvhG4Eq4SXBJ+ciL0kaOgLapy8fxZUH8G1zsQusccTjm4d999d\/jlL39Zu9cEqhaj5vBKNPrzujmBa2d9vYuitiTI9TF31a6VnXH0W4x1jxe4Es3eodbWQn1Up7mw2rq7ffv2IIE7efLkmkNtzHJnUKs6uL0SuH5LpfLQonvx4sVh48aNcZulv5Y7o5lz\/rol4toxceuJrdxZVX9mvcwB7SWbKgLXXHovUP21egJX7Jt1SqvEVlS\/tXnTTTdlzwyLeS6vqmMlPYNr95Xlam62fhdMrGoXixeuqitXf3oNgVu1tygHAQhAAAIQgEA\/EegLgauFpkSeRJxeqiKxa4tdW9ybgyun91e\/+lUUeOlLpiRAJRDl6km01nNwmxG43sG1TsxdK+pgxaePctS2QAnUMoGbc3DVplwj5eod3HoOln8ooDbrncHVS2064eDWO\/OYEzESDy+\/\/HLkpU+6NdUEirapmwtlQliieCQJ3LLzoH68aXznci56IOAfEvgXF3Xjh6gsryriPHc+e+HChXE3g3\/40Wifl41HP6bEbc6cOUPaTFl6wVwmRMvY+\/mgM\/FpLPbyKdXjXVuLwW8vtrqmT58ey8qhNdErp9df844tAresl\/geAhCAAAQgAIF+JNAzgVv0FmV\/JtVecOLfIJqewdVCzs7Y5s7gyqG1tmxbsHdtG3FwvZNmbal9ezNy2dtc\/f12xtZvkZaASx3cnEOtM5TGSTz00dtS9an3ltx6b9hNY++EwPVve\/Uvr7FFte97Oxedu5aKvXpvg+7HSZeLqYxN1ZzrvYm6bHx2glVZXlWcRMVV9nZoe7NyIzmUxdbIfDGhaVvmixzYqvEVvUXZ96E5xNqGbudo\/fzPndu1+VT2ZmXFicCt2luUgwAEIAABCECgnwj0ROD2EwBigQAEIAABCEAAAhCAAAQgAIHBIIDAbXM\/+jeaWtWN\/v\/8thpSelZY9fk3RbdaP\/dDAAIQgAAEIAABCEAAAhDoRwII3H7sFWKCAAQgAAEIQAACEIAABCAAgYYJIHAbRsYNEIAABCAAAQhAAAIQgAAEINCPBBC4\/dgrxAQBCEAAAhCAAAQgAAEIQAACDRNA4DaMjBsgAAEIQAACEIAABCAAAQhAoB8JRIGr\/59FPhCAAAQgAIFmCZxxxhnN3sp9EIAABCAAAQhAoG0EELhtQ0lFEIAABEYvAQTu6O17MocABCAAAQj0EwEEbj\/1BrFAAAIQGKEEELgjtOMIGwIQgAAEIDBgBBC4A9ahpAMBCECgFwQQuL2gTpsQgAAEIAABCKQEELiMCQhAAAIQaJkAArdlhFQAAQhAAAIQgEAbCIxKgXv69Onw0EMPhZ07d9YQ7tq1K8ycObMy0o8\/\/ji89NJL4YknnghjxowZcp\/Vf\/PNN4dLLrmkUp25mHTju+++W7mOsoYU81VXXRWLWb25a\/r+iy++CIsXLw4bN24M5513XlnVlb73Oc6dO3cYO4vlggsuCHv27IntlsW8YsWKsHTp0rBv374wZ86cIblVCqpPClVlk46J77\/\/Pjz77LNh4cKFcRyW8WrneKqCrp\/z6ufY0n4Va43xCRMmDPs9qNrn9ebI+vXrw+WXXx7rLvpNyMXkxwACt8qMoAwEIAABCEAAAp0mMKoF7tSpU6OolZibPXt22LRpU9vEZLMd14w4rtKWr1flJc5Xr14dVq5cGSTE7ZoEu8refvvt4dixYzWhWaWNsjJaOH\/wwQdRkPoFte7T4nnVqlXxf\/pItM2bNy9s2LAh3HbbbfHa888\/H5YvXx7ee++9MHHixJrw9gtvxe4FX1lM\/fJ9PTbK6bHHHhvG4ZtvvonjdsqUKfFhgT5puSVLlmQZpg9lOsWhn\/Pq19js98j6VX2l+bJmzZphD7xyYyPX5\/Pnz49zWQ9C0jliglYPPy666KJKYy03fhC4nZpF1AsBCEAAAhCAQCMEELj\/7NpqAXnOOeeE6dOn19xdcxkF1BxfOaC7d+8OR44cqTm4b731Vs09lKOoRaTKm4Nri1PVY4tIff\/DDz+E1157LbqqqnPs2LFx8env1eLz8ccfD999911YtGhRdHCqurB+IEgEPvDAA2HZsmXx8tq1a4Ni1aLZX1u3bl1cTGuh+8Ybb7TVwfUOlPI6evRozTX3IlXxbd68Odx4443h1VdfjTzt2l133RUFrOI2nt4lL3OZGpkc3Sxbj43i2LJlS5g2bVoM6cCBA2HBggXh008\/DePGjcsKF89r7969w+7tVm79nFe\/xpbr1xMnToRDhw5lHdx0bMyaNav2kMePA\/2+6JM+ENJDJe2WmDx5cnxwZA+I\/L16mOLHGgK3WzOIdiAAAQhAAAIQaJQAAtcJXMGTyP3qq69qLqP+rc\/BgwejSybhpWsSmt4FNTdYZb1IlYizew8fPhzF4\/bt2+N\/dc\/VV18d3VK5mhJqOYGrshLA+lQRqU899VQUy\/7jtxzrugTuPffcE4WitiHbNbu3E1uUywSud3D1t4RtKnBvvfXWsHXr1uhmasFt91i+qTPc6IToVfkysSVRonGijz0MyYmVnDhRudy93ci1n\/Pq59ga2aKcjg31a24c5OaIzRf9Tuk3rUjg6t6yh0c4uN2YUbQBAQhAAAIQgEAZAQRu4uBK3Jo7KHhyOe0jEWoffwZXwtVcVbm+fuuvtuTqo3vNRdUWQi1A5fDKKfWObU7g2llf25L62WefxTp1VlWxKkZ\/zc6v+s6v6uD2SuAqVtsqKZYS+0UOri3UxUoPHOTqylHyHMsGfr9936j4l7BPRYffeqr8zAXXf23rd\/pAoNMc+jmvfo6tqsBNt\/YXPRjKzRETxtpVoo\/mneZ\/btcEArfTM4X6IQABCEAAAhBoFwEE7syZUXiaiyonwxxcg6yFsHdwdV0vZElfMiXXU86obfOVgK3n4DYqcCVgzMG1Fz954VrvZVCNnMGVWOyEg1t25tHEqvgWncHVWUI56f6srpze5557Lm7DbdcLsdo1warWU3Y+uciRS7d2p2dw\/dlLE70SO6nDXzXORsv1c179HFsjAjcdG36Xg\/rLzq7XmyMm9ovO4Oo3AQe30dFPeQhAAAIQgAAEekFgVAvc3FuUvathb\/M966yz6p7BlTAz1zc9g2sOrbXlz+A2KnC1yPRvQs29Qdiu5QZTvbcU+zcX695OCFz\/1lqLU+3YmdKq8aXlFK9etmQutj\/T3ItJ1UybZWx8v\/s3fhe9Rdn3Z9G9zcTZ6D39nFc\/x1YmcP28yfVvo3MkdbM1h9LfBARuo6Of8hCAAAQgAAEI9ILAqBS4vQBNmxCAAAQGmQBncAe5d8kNAhCAAAQgMHIIIHBHTl9VjtS\/tdluavT\/57dyYxSEAAQgEEJA4DIMIAABCEAAAhDoBwII3H7oBWKAAAQgMMIJIHBHeAcSPgQgAAEIQGBACCBwB6QjSQMCEIBALwkgcHtJn7YhAAEIQAACEDACCFzGAgQgAAEItEwAgdsyQiqAAAQgAAEIQKANBBC4bYBIFRCAAARGOwEE7mgfAeQPAQhAAAIQ6A8CUeD+h+\/\/n\/6IhiggAAEIQGBEEviXY\/+LERk3QUMAAhCAAAQgMFgEELiD1Z9kAwEIQKAnBBC4PcFOoxCAAAQgAAEIJAQQuAwJCEAAAhBomQACt2WEVAABCEAAAhCAQBsIIHDbAJEqIAABCIx2Agjc0T4CyB8CEIAABCDQHwQQuP3RD0QBAQhAYEQTQOCO6O4jeAhAAAIQgMDAEOg7gft\/\/1+nw9qHHwj7fvNsDfKTv94Tpt\/4s8rQD\/3t\/xre2LcnLFv3VPgv\/6sxQ+6z+v+nmbPDpH\/140p15mLSjS+9\/WHlOuo1lKt\/5s\/vysaveurlVymhioXUzrYNj4UNz+4J\/\/W\/GFfxruJiPs9cfmrv5usuixUYW7t2\/n9\/YfjrnS+Hc\/7bf1lrQLFdfNkVsQ\/qlWs58C5UUI\/Nyf90Iiy5a3b48P13YiSXXXFtWPGrp8OaX9435Jr66cv\/cCQyLOPVhZRiE630eW4cVB0bVfJrlLnNA\/XHb3duD3PvXRxOnz41rG\/8fPFjtEpMuTJvvfrb8OAvZhf+HubGvr9Hc+ncfzmxcpzpvVXnFwK32R7mPghAAAIQgAAE2kmgbwXu5Esui6L2q\/\/jP4T7594UVv7qmbaIyVbgNSOOq7Rn9VrOJmjmL1mezXmkClzF\/b99+H5QXunCXwyeXr8q\/PSWuRHZay\/uDPPufyi8+Ny28LO5d4f\/dOJE+OAPb4fb7r4\/fm+Lei3e\/7sL\/4ew85mN2XJV+PdDmXpsfHyaD19+8Xm48n+cXrts1y79y6sLOXheVR\/stINLvbxSoSjR+JNZt4X9e5+viUddu+WO+WHHXz8xZGzcOm9B2Prk2vDAisdimCY40wda9XJohrn9Hl34F\/9q2AOotG86wfyVF54L1\/zVv649cBLDp9YsH8Ihx1Bi3NjUi1NC2It34180Dz1fBG47Zgx1QAACEIAABCDQKoG+F7hKUGLorP\/m3HDtX\/3rmrtrDqC+N8dXzpa5WObgvvO\/\/Jua+7Hwf14dF84qbw6u6t78+MrI0cSSvv\/Hf\/ghvP1v9kW3zByZVOBqAbv1yUfD8f\/zuzD33iXhrAlnFzqQVn9OXNQTuP9i3Pgo8D\/\/3z+pxSKXzvKTsLP45XQbozT+MWPOGMbJXzOe3pG67l\/\/v+2dbcyVRZrnaz5iMsYF1k66XaK2Br+4GkKIDtpmRRRZBjvtOOgghpduURBphI1sAwICDq4gg6A0Nm9ppBVtHEHHRVETo8RMsmFRsxmJM7aLdqftAMExA183\/5pcZ+vUU\/fbOfc5z8v53YnhcJ96ua5fVR3rX1dVMc199+3Z2iK4igyJkUWEvj75ZVNkfs+2v3M3TZzs2yIUsyZoLb1N6i+\/crT7z2PGNS0CqE3ictsdJN3IX8RGNqifmJC3iHrqXRVenfYtzy8Jrf\/52svurddf9f1b40\/9PX6n\/hL3jR\/fPaMhxORDzKWMX60wl53\/YfhId+A3u\/1viYnGuB3y+mgZ21JpUn07XCRIcQi\/l61V7Izzxv0qthGB22rLkg8CEIAABCAAgToJDBqBK6clcr\/+v180IoD6u57\/9dEHPpqiSa7eSURJAC55bJ3b8PgyZ5FREwkmcCWELO\/\/+fh\/eyG97pnnfWRIeX50y21+W59FUlMC17bwquzV\/22Be3jpKm+TopE\/X\/a4+7t1jzW9W\/nUlj7bfVNblCXGVa89Yd16F2\/Btqhu6HNof+ircVI5eTy1OHDo5Re6JnAtci27wm2eEiI7t25obFG26K98MsGsPHG6OgdKp8sqI7byordhRLcsr077ZG2StaghfxSp15jRwooikYo+vv36q03vLEqrsWh9Q3+GkUv7XGUrfavMU8IvbpusPtoO8zh6q7LiCG7MId4pUcXOOG\/R+ELgttO65IUABCAAAQhAoC4Cg0bgmri1aKUASATaE4rBcAuvhKud61SU0gSgIrjaLqtHeTVRlEB9YNF\/d\/t2PucjvNr6GkZ7UwLXhOYfvv6qEWlVmToDuWTlerdh9VIfnbJ38TlSvY8juHqXilrrvaJceqzePP9C+0NfjVkYvU7xrPsMbp6gKJqoW+Tpv955d\/LsaVFEs64B06lyyogti2KG55BT76xPaSGjiFen\/LFyiyK4tt3a2nf8f5noTv3pG78FO2zznVs2Nrbhmoiz88baZaEor7ay1y1wU3xTAjdMlzoz3e45dgnTeFeDMbat0CEH250R3zVQxs6svGG\/SrFG4HZ6NFE+BCAAAQhAAAJlCAx4gRueR1XEziKO4QQ6jODqvS4eiiOcmiAqqrp0zf\/wEVpN\/PIiuFUFriJQFsE1AWKiWRGqUJTEDZMncOVvuD1bdpnAnT7nQffLTeudosK2bTkU8KHAjSO4KiOMiKd41h3BLXseU7aYOEsJGxMxJp50brDdaF6ZwdLJNEXnQctsTy5aJAjFZid9CcsuavPU+dH4bG14ptT6hr2T0NLTiTO4Wdu\/i7b9hv7XxTxr631oY8jhxd3b\/Xb\/8Hcnyx\/lC+2MRX1RvzJ\/EbjdGlXUAwEIQAACEIBAHoEBK3BTtyiHkRG7Jfb7l\/yn3DO44RnV+AyuCUCrKzyDW1Xg6nxbePuobTFOvcsSuKHP4XliuxV35H+82N0x7b4+W7CVTxcMXXjR8CYBHwrc0FcrW3bY7bwpnnWfwQ23YhufMDIVsrKbs1M3K4diPNz+Gt\/APJiGfhGbVNQw64xkFoe6xFYVrkV+5d2crXrsNu28vpG6MbqMjUW2pfiq3Ph9VrpYOJaxKStN3HbhuIlvUVYZdm5fn8PxnrUQYOWHZ\/7DvBYtD9skthWB204LkxcCEIAABCAAgboIDDiBW5djlAMBCEAAAt0jgMDtHmtqggAEIAABCEAgmwACt8u9Iz73quqr\/ju\/XTaZ6iAAAQgUEkDgFiIiAQQgAAEIQAACXSCAwO0CZKqAAAQgMNQJIHCHegvjHwQgAAEIQGBwEEDgDo52wkoIQAACA5oAAndANw\/GQQACEIAABHqGAAK3Z5oaRyEAAQh0jgACt3NsKRkCEIAABCAAgfIEELjlWZESAhCAAAQyCCBw6RoQgAAEIAABCAwEAl7gnjt3biDYgg0QgAAEIDBICVxwwQWD1HLMhgAEIAABCEBgKBFA4A6l1sQXCEAAAv1EAIHbT+CpFgIQgAAEIACBJgIIXDoEBCAAAQi0TQCB2zZCCoAABCAAAQhAoAYCCNwaIFIEBCAAgV4ngMDt9R6A\/xCAAAQgAIGBQQCBOzDaASsgAAEIDGoCCNxB3XwYDwEIQAACEBgyBBC4JZvyo48+crfccktT6l27drlp06aVLKFvsk6UWWTM+fPn3aOPPuruueced\/311zeSy5YXX3zRPfnkk27YsGFFxbT0vdW9c+dON2fOnD51GY+rr77a7d2711155ZVu\/\/79bvbs2b6+d955x9sccluxYoVbunRp412YtyUj+ylTWTZFHFK8Uu+65WZVv0aPHu1mzZrl21qPxtzu3bvdiRMnGuPP+oH5sH79enfTTTc19ecy\/lW1Lex7YT8L+2NeHy1jUypNaGeqf8f1pxg+\/fTT7pFHHunDdfjw4e7MmTPu+eefdwsXLmwa+yHX1JiLbUXgttrC5IMABCAAAQhAoE4CCNySNDXB04RPk21NCut4OlFmkV39KXDl7\/vvv+8FaSxKNMletWqV\/0+PJtwzZszwQlcTb9ltk\/B3333XaRIvAaxH323evNndf\/\/97vTp0+7w4cNuwYIFRSgG1Pd5bOTf2rVr3cyZM73Ne\/bsccuXL3cxh1CoGK8shp1axIihtuKX2fb55597YTthwoSk\/0pnwisWvWUat6pt8+bN84syYR+dO3eu27BhQ2HblLEnK43a9eDBg174x0+qzUOhagynTJnSyBq+02f1kXHjxjUtOMVc33jjjaYxl7IVgdtOK5MXAhCAAAQgAIG6CCBwS5LMEqM2Qfz0008b0SYVaVEoRVx27Njhxdn48eN9xFfi7rLLLnOjRo1KimbV9bd\/+7fuT3\/6k1O5FikOI3Fx5FJ1apIfR29+\/vOfu++++84paqpypk6d6iO43377rfvtb3\/bFCGzCO7x48czo2UlcSWTyX75bJGwkydPNiLg4URdmU2w2mJC+L2+W7Nmja8jFjZiF5bbjr3dzNsKG\/WpLA6pqFxWpK6Tfub5pXq3bNniJk2a5E0IFybCRQv1gVQ6WxTRQsfYsWMrR3CrMr\/rrrvcK6+84hdcwj66b9++Pj5ojGe1TVXe4W9MvPNB3x04cMC99tpr\/rciHA8xQ9Ubv\/vkk0\/ciBEjGgtJWjRIcS3jDwK3asuSHgIQgAAEIACBThBA4JakGm8njrcKhpFRFRlHezWZPnr0qBeXy5Yt8\/+dOnWqaduzlan3lv\/IkSM+3+rVq93KlSsbIll1aCKqbYcqS8+6deuchK\/eKUo6cuRIt3jxYrdx40Z37NixPuWY2JXwlvCUwA3tszK1vbGOqHWRoAgjuPbZ6rWI77XXXtuI5mliHqZT+Zs2bWpsby7ZtAMiWREbi16bsLrvvvvcs88+6yOHMQfrf\/G23Va38rYDqEjgqg9bZDLcHRFHHlPpzB8taNjCSRVbqzKXwNXiikVww\/4a+iCRaBH3VNtUsVFpw0izbNZjRyPEySL6+g0Kx0NR9NbsiBc+Yq55Yy70BYFbtWVJDwEIQAACEIBAJwggcEtSzYrghufjVJQiKJoQSigqamrvFFmV8PzRj37kFCHVVkf9mdr2HJ6HVZpUZFWRnJ\/97Gf+P0Vu9Eggb9261UeOTOBK9EqgaqunyjGhbGdwVb8eiSF9nyrTzsOWRJWZrEjs2CKCzl0qyqstxxILqTPDqqRMhKpdm7uVv6rYEhsT\/yGHFK+sbend8K3Ir6xFDYvYKjobb19XHkVRs86UlvWryLZ4UUHM7Syw9dEs0ZtqmzoWieIdCqGIzYp621Z+cQm5pgSuykidgS7jDwK3bM8jHQQgAAEIQAACnSSAwC1JN0vg2nZji4bGlzfZ97Y1+Z\/+6Z\/c5MmTfQQmq8wsgRueTbRorcSsIrg2ibVIV5HA\/f73v+9FgsRjVgQ3nBiXxJSbrOjMo21LViEmLrS9W1tYQ\/9SZ3XDs5Fx9LcO2ztdRhGb+Axu6jyo2jPmlSVqOu2PlV907jolItXPwy3qRdvXQ6Faxa+qzJcsWeK2b9\/uF16sj4ZnnPVOdseiN3WBUxU7w6ht7Gvq7Hq8hbpInGZtXbe6tDgXj7n4Qir5g8Ct0qqkhQAEIAABCECgUwQQuCXJZt14rK2RiuYoenrxxRe76dOnuzFjxviLWxRZjW9bXbRoUWMLbV6ZYdTWPodnT+0MbnwuV5NvRWCKBG7eGdxDhw41bi62ekpiyk0WRrutXEWg7OxlfIuyCjOO+hzfqFt0k20dNnerjKpsJPjL8NJlVLpwy6L8xrCOaGIZNkV+hf3XzpqnBFcqndXfqsAtsi3mm2Ie3\/RtPqTyluGVSlPWTuW1M7hVzmAXCdys26NjWxG4rbYw+SAAAQhAAAIQqJMAArdOmgVlhZHZbt1i20X3qAoCEOhhAgjcHm58XIcABCAAAQgMIAII3C41hkWg2v23c7tkLtVAAAIQqEQAgVsJF4khAAEIQAACEOgQAQRuh8BSLAQgAIFeIoDA7aXWxlcIQAACEIDAwCWAwB24bYNlEIAABAYNAQTuoGkqDIUABCAAAQgMaQII3CHdvDgHAQhAoDsEELjd4UwtEIAABCAAAQjkE0Dg0kMgAAEIQKBtAgjcthFSAAQgAAEIQAACNRDwAreGcigCAhCAAAQgAAEIQAACEIAABCDQrwQQuP2Kn8ohAAEIQAACEMA3GvAAACAASURBVIAABCAAAQhAoC4CCNy6SFIOBCAAAQhAAAIQgAAEIAABCPQrAQRuv+KncghAAAIQgAAEIAABCEAAAhCoiwACty6SlAMBCEAAAhCAAAQgAAEIQAAC\/UogU+CeP3\/eLVq0yG3fvr1h4Ny5c92mTZvcsGHD+hh99OhRt3fv3szv6\/JS9axZs8bt3LnT\/1nWvir11+WLMVTd4nbu3Dk3ffp0t2LFCjd+\/PikSSdOnHCfffaZu+GGG3xaPfv27XMjRozwf957773uhRdecJdeemnbvEM\/T5486eu94447qqCqlDbsU6m+JHvk9zXXXOP279\/vRo8e7cs\/ffq0e+6559ySJUt837N0+u7xxx\/3PMN3H374YSbfSgZ3MXFZNjLJ\/MvzWWPj5ptv9hyyuHbDvXb9svZN9QOzP\/S1ik9FtqXqtDFY1A519sfQzpCH+Zqqq+hd0biJx1y7rKu0C2khAAEIQAACEIBAOwQKBe6NN97ohZYmPHnirC5RWORMLHDL2ldUbie+DyemEiVXXXVVLkNLL58mTZrk07711lte0IwZM6ax4CCBa+K3DrvDeussN7ZNbffee+95QRqLEvWvZcuWuXXr1vlsJmglvKdNm+auu+66xuLJwYMHPUsTwLJ\/5cqVbs6cOT6vFj9Wr16dXIipg1cnyshjk\/Jv4cKFbteuXV70a+EktQBgfS7FNbVINRD8Uru9\/fbbTe0ru7TwE\/cDvTch18qiRh7zVJ0hZ\/s8f\/58t379+qa+l9c2rTCWnV9++aUf81oomzx5cnLxx2yaPXt2sm\/EXLPGTWrMtcu6Fb\/JAwEIQAACEIAABFoh0JLAHTlypJ9sfvzxx+62227zkUVF\/yyCu2HDBvfYY495eyTGfvKTn3hxdvbsWR+Zszz6dxMtSpx6Z1E+i3xK7KlelWMR3JTATdknW0wwWhmy+\/Dhwz4qqqjh9773PXffffc1oqNPPPGE+8UvftHH7qyyFGUNnzhCtHz5cvfTn\/60EcGVyDNOmqDrUQRTzy9\/+Uv393\/\/9+6iiy5yf\/mXf+kF70MPPeTOnDlTykbZEpdvIln89N\/DDz\/sDh065P76r\/\/aTZgwwdcre\/7xH\/\/Rt+mpU6fcqlWr3NatW30Eud1HZSrybFFFm7Sr3DBipL+rD82bN8999dVXTu25e\/fuRgQ39kti1wRemLcOm9v1uWz+qmxuvfVWLwQPHDjgx6EJPFsokPgfN26cF4r9ySbPL7ExwabPb775pv89iNtX\/eX48eN9+kHsa9auiKw2KLItVaeVZf01FJPW97LapmxfyEqn3xMbF9a3Jfxffvnlpn6g8RK\/E5sU1xT\/TrBu13fyQwACEIAABCAAgbIECgVuuAU43h5nAm7GjBm+vniLskV1TSiGkUlF8SRwPvjgAz\/J1cTt8ssv9+V88cUXjSifvbN0r776qq8ntUU5z76wLitjy5YtbsGCBb4ui67KF9v+W8ZuK8u2EYfgjY\/EhsT5gw8+6LZt2+brC+05duxY07brkJMWB\/75n\/\/ZTZw40R05csT967\/+q9P3VWxMlS+xX6Z9rC3Kdqi8dEUiLow02mdN5GPxa9FaTeSVbvHixe6ll17yAriXBK7ErSKeWgAyXhKz2pqs\/qU+on6dxbWONi0qo0hE2s4QlaO0WvSK21dR\/bgfKAJtuwDM17oFrmwq2qqbWkCQwE21TTsLLsZJPur3wx4JXNuxYP1g1qxZfepXns2bN\/tIs40b2y0RH4VI+d0u66J+wvcQgAAEIAABCECgLgKFAtcipKpQkxwJTovImvi16KMJXAkqi0QqCmtCUeLRooj6rO2qesIJWxhl0HcSrfbYWcvwDG5Z+8K6bJuzxIEils8884wbNWqUjx6lxGOe3VZWnsBVmXoUKdYjXqE9mrwqOrt06VIvgEOBK\/EmYavniiuucGJb1ca4fPljUVS1WSjkNdmVL4oKSkxb2jo6XJHYse2miubLPkVwU8LGbLGI1t13392TAvePf\/yjPzMdctCCjRZT9IS7KzQeY651tGlRGa0uaqjcOGIZis1wV0foaxURWdQfU0IvXNRTH03tPJDAjdvG+nIRr6Lvw+3KSmtn9sN+UFR\/2F82btzYOBaQtahUB+siv\/geAhCAAAQgAAEI1EWgJYGrqF4odMMIrqKUOpOmba22bTlL4MYRXDmlcuOooSaiWRHclMBN2ddOBDcWuKmyigRuuCgggZuK4KoMReDEwM7gStRLDCsitGfPHr91uYzAzYsQxwI3jKBL4GrSrCjan\/3Zn9W2PVltW3TO1LZfKm14pjQWNvGZ0tQ5yF44g6uFnvjMsp2tNfGmBaUsrnX9iOSVU3TuOt4+rcWKUHRl9YPwDHEoVKv4VHQGNyVw4zOwWeej89qmio1KK\/\/02OKTfTb74vGgbdNx\/Vnv7By3ygq3P2dFrltlXdVn0kMAAhCAAAQgAIFWCRQK3HCLchwRyju3qnyKJAwfPtxPnDThioVieHGSlW2TN0Wh7DZdi66qzPgMbln7wkubFBXW5DY8g6uJtZ4pU6b02f4b223bmWVjWFbWGVwT4eGFOKHvqtfOUNotrXYG16Lb4rdjxw63du3aUgI3VX4YPQ8juJq0a6u13dBsYvwHP\/hBU3S91U5m+VK3wUpM29nLqrcoh7ct9+dNwe1yUf5W2OTd1BtHJ1O3U9dhd1EZRX6FtxLb5Wll+4HV3aroKrItFrh2+ZJ2N+hJ\/R7a7d+dukXZ7iWQLfG4CX9H8m5RDsdNin\/sdx2LCUX9hO8hAAEIQAACEIBAXQR65t\/BDW951jbfcGtuLGCLzvKlysr655PqaqhulhNvw+xm3dQFAQhAAAIQgAAEIAABCECgVQI9I3DtkhY7nxhHTAUw79\/5DQGnytI2YrsR2dLW\/c\/5tNrIVfLFl\/5UOdNYpR7SQgACEIAABCAAAQhAAAIQqJtAzwjcusFRHgQgAAEIQAACEIAABCAAAQgMLAII3IHVHlgDAQhAAAIQgAAEIAABCEAAAi0SQOC2CI5sEIAABCAAAQhAAAIQgAAEIDCwCCBwB1Z7YA0EIAABCEAAAhCAAAQgAAEItEjAC9xz5861mJ1sEIAABCAAAecuuOACMEAAAhCAAAQgAIF+J4DA7fcmwAAIQAACg58AAnfwtyEeQAACEIAABIYCAQTuUGhFfIAABCDQzwQQuP3cAFQPAQhAAAIQgIAngMClI0AAAhCAQNsEELhtI6QACEAAAhCAAARqIIDArQEiRUAAAhDodQII3F7vAfgPAQhAAAIQGBgEekbgnj9\/3j366KNu\/Pjxbtq0aU30P\/\/8czdjxgz36aef+ve7du3yaT766CN3yy23NKV955133OjRo92sWbP8+927d7vhw4e7\/fv3u9mzZzfyppr3zJkzPp\/KmDNnjnvyySfdsGHDWuoJsvnEiRNuypQppfOH\/siG66+\/vslHe6cCVf7ixYvdxo0b3ZVXXlm6jryE1gY7d+5M+m\/2XX311W7v3r2NesXt+eefdwsXLvS8jLXqKvKjFsO7UEhZNqHPZtb69evdTTfd5NtTT8wrK10X3HKt+JVq35QPWf2lrF+t2Jaqs9P9MbRzxYoVbunSpU0u5nEI+0YqXeo3oSz\/mDMCt2zPIx0EIAABCEAAAp0k0PMC18Ttpk2bvEAIhd2pU6ecJoihiD169KgXyvPmzfPiSv9de+21\/p2Em4njVKNpMvniiy828muiaqKkSiPnifWscizPPffc45PIjtWrV7uVK1e68J1Et9JKiH\/zzTdNQrOKjVn+v\/\/++36CnhJlq1atcvpPjwnar7\/+2i8+jBs3zi8IyDb7zj7PnTvXbdiwwc2cOdPn3bNnj1u+fHnLiwft+tlKfvWNLDbyc+3atUn\/TKCY0Lf+bLxsASVO14qNreSp6pfGlRY3tJgRtrX8CH3QmNu8ebO7\/\/773enTp93hw4fdggULKplY1bYlS5a47du3N9U5ffr0jvdH2Xny5Em\/6LZlyxY3adKkxuKPGGVxCHlpUS4eX6lxU5Z\/6ncLgVup+5EYAhCAAAQgAIEOEeh5gatoxe9+97s+URHx1gQxT+BedNFFbvLkyW7ixInukUce8ZEzTXjjCLG1XVye3ofREkUuNWHXRF2RYxPWsmHNmjW+GAkZPRZZlqAeNWpU4+9hFDbsM7JNNi5btsy\/XrdunVM0SOWG75544gnvswTEa6+9VmsEV77KVosc26Rd9oRRR\/3dJu0SuCNGjGiInjDibXkkgE0UhXkVWR8sTx4b+WDCRp9NzMl\/iRZF2MeOHeu5fvLJJ314pdJ1i0srfpltYZ+QkIt9DcdV2JfK+taObaHoTNm7Y8cOL0TD9iprV1a6UMym+nZoU9zmEri2MBSOkX379mXaWZa\/2YvAbbeFyQ8BCEAAAhCAQB0Eel7gSszpUVQx3K4XC0elsa2zElyKcN5xxx3uX\/7lX9yECRPcu+++67777rvkFuiwoUys2hblQ4cOOUWFFZ2UqNMjkavyZZMm7vb98ePHvfjctm2b\/1PbrU1chyL16aef9tumwyeMTOu9BO78+fO9wNU2ZHtneTuxRblI4IYRJvssP4q23GZN3oeSwLXt7WqncOFDW5PVR2zhQN\/HvCxaHqer4wekqIwiEZnyy8oMo\/xZPqh87b4It7QX2WTft2pbVp2hvXl+lbUvTGflaREj3qKsdLFNMa84ghuOtfi4RRX+oY0I3FZaljwQgAAEIAABCNRNoOcFbhzBDbf\/SjSEEVyJPot8KhqqbZQStnp++MMfOgnQ1BnfuNHCOvRdKHAvu+wyN3XqVL+NWVuHtW1Vjya1FoXVVklFY1TXmDFjms4Px+dXre6yEdz+Eriy0xYYFJ3WRF5CPyVww+3WSpcV\/R0qAteicbZ9W3+q76kPhhF9E75x5M3OfYtxuDOg7h+TVHmtLGooSm\/939o3z4eiyGaWn63YZn0qrDNlb9ZiTbvMU5FjK9Nsuuuuu5J9Q2f21f42vpROi2phv9LnqvytfgRuu61LfghAAAIQgAAE6iDQ8wI3dQZXW14XLVrko2J5AleiUwJUW3klOLUtMU\/gWrRY4sQuvCoSuKkIroSM6pMYDiO4eZdBVTmDqwluJyK4RWcebVuymISXSsURydQ5xKwzqnUMkm6UkcemSMCHQk22ZkW843QD1S\/bNpvqz+ZDVkSyyqJGVeZZgjC2t6i9qnKXz3p09CH8bG2dJ6aNV3hm2cZX1tb+Mvw5g1u1FUkPAQhAAAIQgEC3CPScwNVFUPbYhVDxLcq2fVgR2fgWZeWRqLQtxCpLwvW5557z24zzBG54i7JF0o4cOZIbwQ0vsFJddsY2vLVZ73WDs57ULavmb94tqnHktxMCN3UbrOqxM6VlblG2S6fsxmvjaNGprAh2twZUq\/UUsQnPascXmQ1kgVvVr3hHQhxxjqOuNj6zzp7ntUdV2+Kb1VXnyJEjm3ZQhOPaxmTexXNl+kvqtmeNg3jchL8PVm6KVzhG4n5VhX9sOxHcMq1JGghAAAIQgAAEOk2gZwRup0FSPgQgAIFeJoDA7eXWx3cIQAACEIDAwCGAwK25LeJosIrv9rnH8NZlc6\/dKFLNmCgOAhAYYgQQuEOsQXEHAhCAAAQgMEgJIHAHacNhNgQgAIGBRACBO5BaA1sgAAEIQAACvUsAgdu7bY\/nEIAABGojgMCtDSUFQQACEIAABCDQBgEEbhvwyAoBCEAAAv9OAIFLT4AABCAAAQhAYCAQQOAOhFbABghAAAKDnAACd5A3IOZDAAIQgAAEhggBL3CHiC+4AQEIQAACEIAABCAAAQhAAAI9TACB28ONj+sQgAAEIAABCEAAAhCAAASGEgEE7lBqTXyBAAQgAAEIQAACEIAABCDQwwQQuD3c+LgOAQhAAAIQgAAEIAABCEBgKBFA4A6l1sQXCEAAAhCAAAQgAAEIQAACPUwAgRs0\/tGjR92aNWvcvn373IgRI5q6hd4\/9thj\/t1tt93m0+jW0EWLFrnt27c30s6dO9dt2rTJvfrqq+7ee+91L7zwgps+fbo7ffq0\/1NPqvzz58\/7smbMmOHGjx+f2yVl5969e309w4YN61j3zePRSqXmo3gZp9B+1XfDDTe4a665xu3fv9+NHj3a2TvV9+GHHzbYiOdzzz3nlixZ4hmk8rZiY3\/lKcsm5qC\/q2\/efPPNTf0mfJfFsBu+tuJXnr2xr3E\/qOJTK7Zp7Gpch+1Q1G8ff\/xxt2LFiiqmNaUN7UyVlVd\/0VjKGjdZ4yvV\/1p2jIwQgAAEIAABCECgAwQQuCUEribVv\/\/97xuCUn\/XI3ElUXrjjTc2iVhNZr\/88ks\/ETYhd+zYMS\/eTBzHAroXBK4m0++9956f7KeEyrJly9y6des8W4nX+fPnu\/Xr17s5c+b4dzt37nSrV692J0+edNOmTXPXXXedb5Nz5865OK8J3w6MmY4UmcdGfWPlypV9OITCPhT\/Jlr0bsyYMZl5O+JIVGhVv5YuXZps85SvJ06caOoHVRd7qtq2cOFCt2vXLj\/u1eesjz777LNu3rx57tSpU+7NN9\/0vwkHDx50V111lV+kafeRnfo90QKZ+vvkyZMb5apvbNiwoan+Bx54oM+7++67r7EgZLbPnj3bj8NwzMm3eHzJ\/qz+165v5IcABCAAAQhAAAJ1E0DgFghcRTIeeught2rVqj6TVROlWQL317\/+tRs+fLjbunWrO3z4sHv99dfd2bNncyO4+l7RSxPCmjRLzH388ceNd5999lkjgqvJrUWWFS3+yU9+4ifYcTlhtDkVgTYhrsmvJtJvvfWWrzfL3lY6oqJfl156qY80hpN2lRVGjPR3+XX33Xe7l156yQsKeych8dVXX7mRI0e63bt3N4mNOF28iNCKzd3Kk8dGNpiw0WcTUWImYS8RNW7cOM81fieRZZHukGG32FT1KxRiob36HPt6\/Pjxpn5QVeBWtU3jyp5U5Djs0+GOj3DxoZ3+FIrZVPvFY0p12buxY8e6l19+2R04cMD\/lsimrL4xFMdXO9zJCwEIQAACEIDA4CKAwC0QuIoSPfzww+6ZZ55xo0aNamxJlkhURFET2XCLsm0h1OT5gw8+cBdeeKGbOHGiO3LkiLviiiv81uW8LcoSyyZSTTjLxDDCq7\/HW5Rt2\/ITTzzhfvGLX\/io8qRJk7xYtYiy7JFQkni8\/PLLvedffPFFI6Jq7yydbFU9KXtb6eZFAjeMwurz4sWLkwJXk\/tQYMQRXCunWyKuFRZxniKxldriblFwRfds4SB+N9AFbuyXuKQEud5pG3boq9K2s0W5FebWbvEOBJX11FNP+cUp\/U5YxFMLMXX0R+OkRYzUduewfosah+9kt+2AsPGi8bVx48ZGBDe0Mx5f\/blIUsf4ogwIQAACEIAABHqHAAK3QOCmIrh2NtUEbihENfENheKdd97poyZ6br\/9drdt27ZSZ3DjbdAmohV5CQWubX3WO0VhTeDqLK+2p9q5Xm0N1hNOjsMok76TOLdH6eo+g1skKGxrrRYPNJHPiuDGAjfcvmp5FekdKgLXorK2ldTE\/4IFC3ykXY\/83rJli0u9S0XBu8WmjkUN9YPYL1t06ZTATTEXf9sJkTorn4qwFkVdq\/6vJhWltTLy6r\/11lvdH\/\/4R3fHHXf4xTLb1qzdIHZ0QmPOxg0Ct2rLkB4CEIAABCAAgYFCAIFbIHD1deoMriaaZQSuzsPNnDnTSegqApV1iZVFaH\/wgx80ne1VhFWC2aK6mlibwH3wwQf9eUVtgbZty1kCV5GvMIKrMlSuRXANg0We7aKsOiO4RWcebdItW\/LO4ErQprY0a3JueYfSGdwsX02khiIybEdFdQfyGdyUXzoXunnz5uR5Y\/kW+9qOwC06E56KWurYQXgGNmvxIYyMhpehtfLDL5\/1aDdG+FnvytRvCyKxTTrjbueH43ETtw1ncFtpOfJAAAIQgAAEINAfBBC4kcBVNMOe8EKoONppF\/jEtyhbHp25laBU1EcTTEV5JTiKBG58dtYiLLoN9Xvf+57TGUWVI+FpYlbRXUVodN5XIlF1xBFci+Yqrdlok2ZFAe221XAbdt1ncFO3wWoLuJ0pLXsbrE3sh+otyrbNPWQT3t5rN3PHYja8fTuOnMa3U3frx6aozVN+5d2IXafArWqbzrHaeXjxs3FkY1Tv7Lxtnbd6p2571kVQ8bhJ1V\/2XXjb8lAcX93q79QDAQhAAAIQgED\/E0Dg9n8bYAEEIAABCEAAAhCAAAQgAAEI1EAAgVsDxKpFxNFg5Y+jclXLJD0EIAABCEAAAhCAAAQgAIFeJ4DA7fUegP8QgAAEIAABCEAAAhCAAASGCAEE7hBpSNyAAAQgAAEIQAACEIAABCDQ6wQQuL3eA\/AfAhCAAAQgAAEIQAACEIDAECGAwB0iDYkbEIAABCAAAQhAAAIQgAAEep2AF7jnzp3rdQ74DwEIQAACbRC44IIL2shNVghAAAIQgAAEIFAPAQRuPRwpBQIQgEBPE0Dg9nTz4zwEIAABCEBgwBBA4A6YpsAQCEAAAoOXAAJ38LYdlkMAAhCAAASGEgEE7lBqTXyBAAQg0E8EELj9BJ5qIQABCEAAAhBoIoDApUNAAAIQgEDbBBC4bSOkAAhAAAIQgAAEaiCAwK0BYtkiPvroI7d+\/Xq3e\/duN3z48KZser9mzRr\/7pZbbvFphg0b5h599FG3c+fORto5c+a4J5980h06dMjNnj3b7dq1y02bNs2dOXPGzZo1y6dLlW8FnD9\/3pc5fvx4n082qT4977zzjrv++uuT78r6mJfO6pY\/5od8tMdsufrqq93evXvdlVdeWcq+0aNHe99lf8gvZlyHD50qoyybonZKMdy\/f7\/vK2HeTvkRl9uKXypD\/fn55593CxcudCoj1b4nTpzo03er+NWqbapD4\/Wmm25qGi9hv419CPt5FRuVNrRzxYoVbunSpU1FpMZw3OZ5Y6Qq65QNMgiBW7VlSQ8BCEAAAhCAQCcIIHA7QTWjzCyBq8nyH\/7wBy9cNRHW3\/Voch+KUROxmuCePHnSixYTisePH\/eTfRPHWeLOJsMSxlOnTvXl33PPPb6+F1980a1evdqtXLmy6Z3Z1S4q1f3+++\/7CXooEEwMrFq1yuk\/PRI3c+fOdRs2bHAzZ8707\/bs2eOWLFnS593y5cs9Nz2ff\/65k\/CZMmVKu+Z2NX8eGwmctWvXFnIQm+3bt7v777\/fnT592h0+fNhNnz69SSiaaGxHcFUBU9UvteXXX3\/tZsyY4caNG9cYE1ante9f\/MVftO1XK7aJm40hLahIOMb9VuM2z4cq\/JRW9Wm8a0Fqy5YtbtKkSX7xR0+qb8ybN88vENniQNzm4RjR5yLWGktvvPGG99XqTfmAwK3asqSHAAQgAAEIQKATBBC4naBaQeBKtD7yyCNu2bJlfSaPcbQ1Frj79u3zkeCnn37aHTlyxL355pvu7NmzmRFcq0t\/SvhMnDixUbdMXrdunVN0RpFk2WPvVH4d0VBFlUaNGtWIetmk3QSuTcT1982bN7u77rrLvfLKK36ibu8k3uS3Jvl6JOIWLFjQmOwrn9LUYW8Xu4bLYyM7TNiEPqfemc2hKLJ3YaSuWwK3Fb8++eQTN2LEiIZIM1s1Hqx9JeAPHDjgXnvtNffpp582dh9UabNWbBNDCVoJvbFjx3rRF\/db9T8J3JQPVeyL04b+W\/8O2zQcI6nvxTEuowxrlRXuMLGdHrF9CNx2Wpe8EIAABCAAAQjURQCBWxfJEuWkIriKoCxevNht3LjRXXLJJY0tyYrEbtu2zU8swy3Ktj1Qk\/OjR4+6P\/\/zP3cTJkxw7777rvvhD3\/oDh48mClwleff\/u3fnKK92qI8ZsyYRt0mZufPn+8FruzptsANI2H6LGGbEriyK7Ude7BGb+VPkdhKbUHP2pausjZt2tTY5m1dM46al+iybSdpxS9VmhLjceRREX1FfCXarO9UWdhoxTZjqMUZLdbEEdzQjjoXFKytdYQg3KJcJHDjNk+NkSLWYZRYoj2LNQK37eFCARCAAAQgAAEI1EAAgVsDxLJFpARuKoJr6Uzg2nlZ1aMJ62WXXearlMD98Y9\/7KNYem699Vb3q1\/9KilwLfKkLcnacqwyB1IEV\/bb1k+Je03kUxFcvVMUz7Yyh5PtePtm2XYZCOmKotsp8Z\/FQf6EkTo7y62t6OLazaeqX\/JTIjUlusL2DYVaKrJZxseqtmnBRbst4rPedhbY+q3tIKhT4Jo\/cWQ+S+BmtXlqjBSxDlnmsUbglul1pIEABCAAAQhAoNMEELidJhyUX+UMrtKWEbg\/\/elP\/ZZcCV1depN1iVV4EY2Z9A\/\/8A\/u1VdfHRBncMOJs+zLOoMbni9UOtuyqgn9YN2ebOI+73xyme3bWeLftnTnnZ\/s1DAoOned2t6bErixsLIFm\/DMtgRola3XrdomViaOr7322ka\/s35rdtQlcFWXHp3BDT\/bQkZ8PltR7R07djSd1Y0XPcJId2xnq6wRuJ0aRZQLAQhAAAIQgEAVAgjcKrTaTBuLzPBCqPCMm6pRlEiT5\/gWZcujM7eK4FpkTxFZbZnMErhmetYtyqmbi+NbYdt0P3kbrCJxdo427xbl0JbwhtjwFuluX6DULo8wf+qm3JBNyufUu\/hG3ZEjR\/pLhHROVU\/RJWR1+mSiyvqwba8v8kv5YtGVEoup24Or2N8Kcys\/jv6KazduUbZL5XTGN2vcyMZUm8cC3HypwjrvNwGBW6X3kRYCEIAABCAAgU4RQOB2iizlQgACEOghAgjcHmpsXIUABCAAAQgMYAII3AHcOK2aFkeDVY5FOlstk3wQgAAE8gggcOkfEIAABCAAAQgMBAII3IHQCtgAAQhAYJATQOAO8gbEfAhAAAIQgMAQIYDAHSINiRsQgAAE+pMAArc\/6VM3BCAAAQhAaBGYdAAAEIxJREFUAAJGAIFLX4AABCAAgbYJIHDbRkgBEIAABCAAAQjUQACBWwNEioAABCDQ6wQQuL3eA\/AfAhCAAAQgMDAIeIE7MEzBCghAAAIQgAAEIAABCEAAAhCAQOsEELitsyMnBCAAAQhAAAIQgAAEIAABCAwgAgjcAdQYmAIBCEAAAhCAAAQgAAEIQAACrRNA4LbOjpwQgAAEIAABCEAAAhCAAAQgMIAIIHAHUGNgCgQgAAEIQAACEIAABCAAAQi0TgCB2zq7fs959OhRt2bNGrdv3z43YsSIJnv0\/rHHHvPvbrvtNp9Gt5wuWrTIbd++vZF27ty5btOmTe7VV1919957r3vhhRfc9OnT3enTp\/2felLlt+L8+fPnG\/VbvcOGDfNFWX1vvfVWk82fffaZu+GGG\/y7Dz\/80I0fP97J7\/DdVVdd5W2N88ZMWrG5W3ny2FgbqH1CDmqX+F3MJsVL77r1FPkV2vv444+7FStWNExTH7755puTbR77Fect419Z26655hq3f\/9+N3r06EZffe6559ySJUuc+m+n+2M4NuJxI4NSDO1daHveu6zxZVzz2qkMa9JAAAIQgAAEIACBbhFA4HaLdAfqyRK4Ega\/\/\/3vvXDVBFx\/16MJuQTujTfe2CRiJSq+\/PJLL5ZsAn3s2DEvIk0c1yEWZe97773nRUwoXmI0J06ccCZsTUicO3fO6fP8+fPd+vXr3Zw5c3y2nTt3utWrV3s\/9VjeO+64owPEO1dkHhsJnJjD7Nmz3a5du3ybGpvUuyJenfPo30suavODBw86LVCYeDR7TFBpUWPMmDFu5cqVfdr87bffTuYt61OebRK\/GzZscPPmzXOnTp1yb775ph876l\/Tpk1z1113nR9felK21dkftZBx6aWXeqEffjY\/Y4bqL8uWLXPr1q3zSWzcPPvss03+PPDAA6W5ZrVTWdakgwAEIAABCEAAAt0igMDtFukO1JMSuJrcPvTQQ27VqlV9RINFrLIE7q9\/\/Ws3fPhwt3XrVnf48GH3+uuvu7Nnz9YWwQ0n57JdotqixIYnFhYvv\/yyO3DggPv4448bEVwJi8mTJ\/ssJjz0OcxbhyDvQJNlFlmGjTKHYjeMfkvETJ061R06dKiJl8SjiWPlN9HWLT5FfoU7DSxCbwJNonfcuHFexKZ80DvbpWB5q7RZkW2h2La+evz4cTdy5Ei3e\/fuRgS3m\/0xJXBjhkVtbmNv0qRJpbmm2qkKa9JCAAIQgAAEIACBbhFA4HaLdAfqSQlcRZgefvhh98wzz7hRo0Y1tgQrEqtopyaq4RZl24KoifMHH3zgLrzwQjdx4kR35MgRd8UVV\/ity3VtUS4jKMIIrD5bhFZRyjAqldo+PVijt+oaZdgoXSrybe8kvGJeixcvdi+99JIXYwNN4GpBwqKfst3aV8JVW5MlKhW5TAk2Ras3b97so7ph3irCvQxzpXnqqadytyhnbeevuz+G48EWN1IM1eYbN25sRHCNq9iE\/ohbvHCQ4qodF+2y7sDPH0VCAAIQgAAEIACBJAEE7iDuGGUjuJbOBK5FcE0wXX755Z6CBO6dd97pI4B6br\/9drdt27auClyLhil6FwoEi87efffdmZP3MO9ga9YisWXR9xkzZvitqnrid1m8BqrADdsobN8FCxY0nafesmVLrkhvNXJfxNzsi8uPt4yHCy+hmKyzP2oM7927t3HsINW\/Qztti78WttRftNXaxH\/IOq9vpLi2ynqwjUfshQAEIAABCEBg8BJA4A7etvPnG1OXTKXO4CptGYGrc3kzZ870QldRtKxLrFrBVnQeMyUk4rOE4TlT2WBbbnWBVre337bCICtPEZuUWIrfZZ29zDuzXKcPqbKKzhbH7WsXN6ksE6CpM7gLFy70fTM8ZxrmLeNXFdtC4Zo6Ex1HyOvsj1q4CLfih74VnbdVWkVpNW5CXvInjMwqnX4fUlzjvOEFW2U4kwYCEIAABCAAAQh0kwACt5u0a64rvNlURYcXQoVn5vSdXdYT36JseXTmVhFcCQZNfhXl1fbQOgVueGutbY0OJ++p86WpW4HD24PDW58H88Q7j43OG+tiI51DtnbWxVq6ECx8Jy55t07HtwHX3B2TxRW1eepmXysojrDq0rOiW4Gr+FTWNhs\/FjmP+2mn+2M8ltXnx44d2xC9ddyYXMQ1r52qMCctBCAAAQhAAAIQ6DQBBG6nCVM+BCAAAQhAAAIQgAAEIAABCHSFAAK3K5ipBAIQgAAEIAABCEAAAhCAAAQ6TQCB22nClA8BCEAAAhCAAAQgAAEIQAACXSGAwO0KZiqBAAQgAAEIQAACEIAABCAAgU4TQOB2mjDlQwACEIAABCAAAQhAAAIQgEBXCCBwu4KZSiAAAQhAAAIQgAAEIAABCECg0wS8wD137lyn66F8CEAAAhAYwgT0b\/\/yQAACEIAABCAAgf4mgMDt7xagfghAAAJDgAACdwg0Ii5AAAIQgAAEhgABBO4QaERcgAAEINDfBBC4\/d0C1A8BCEAAAhCAgAggcOkHEIAABCDQNgEEbtsIKQACEIAABCAAgRoIIHBrgEgREIAABHqdAAK313sA\/kMAAhCAAAQGBoFBIXDPnz\/vHn30Ubdz584GtTlz5rgnn3zSDRs2rA\/Jjz76yL344ouZ39eFXvWsX7\/ebdu2zf9Z1r4q9dfpi8q65ZZbfPXvvPOOu\/766134zpgeP368T7oqNmelDdsx1X5my9VXX+327t3rrrzyyib7UjbbO9V55swZ9\/zzz7uFCxcm+0UdPnSqjCI2ef6p791000192jNko\/xhuk75EZdb5FeqT+7fv9\/Nnj27qZ9auSlfw\/5Sxa8i21J2hPauWLHCLV261FcZ972sdFXsi9PKnlGjRvl2Dp+icR2Pm6LxVeR33K\/MFgRuO61LXghAAAIQgAAE6iIwqATu+PHj3bRp0\/xkctasWX5yGU\/2BKZOUZgHOha4Ze2rq\/GqlGOT+XvuucdnswWAzZs3u8suu8xz1ZOVLrWQUKV+a5f333\/ft1ssttSmq1at8v\/pkVCdO3eu27Bhg5s5c6Z\/t2fPHrdkyZI+75YvX+6+\/vprN2PGDDdu3LiOL2xU9btMevWlLDbK\/\/nnnyf9M3Ej0XHttde6tWvXNvESG7VdmC41ZsrY2EqaPL\/U12J7582b5xc3tEih78MFi9hX9d3777\/fnT592h0+fNgtWLCgkol5toWCNbTj3XffdaNHj\/aLL\/ak2uaNN97ok66ScVFijZc1a9Y0Fqbs67IMNTa0IBiOL72LWafepcah9avQTARuOy1MXghAAAIQgAAE6iIw6AXuyJEj\/cT\/008\/9VHH3bt3uxMnTjQJOE0M9ezatctNnTrVR4O\/\/fZb99vf\/raRRyLAosRWTvjOIo6aUEpcS1D81V\/9lTt79mwjgpsSuCn7ZEtchuw+cuSIj1wpwnLxxRe76dOn+4iNxOjq1avdypUr+9idVdbw4cOb+ogm7I888ohbtmyZf79u3Tr3xBNPNEWexWfixIl90j399NMuLq+VDhhGoCQuTp482RDWoaBQ2RIvd911l3vllVe82LF3EjT79u1zkyZN8u9M2HzyySduxIgRjQl7HYK8FR9bzZPHRmWm\/LNFAYmtsWPH+sWeLVu29GGTSteqnVXzFfmVstfqiEWmxFnoq6WL+1JZG4tsS9mhfmm\/JxbJTLWNCVKVkRXxLGunOEjEHzt2LBnBjRlqbBw4cMC99tpr\/ndR9UuU22KBjaUJEyY4CfYwXbj4EfLfsWNHn34V24\/ALduipIMABCAAAQhAoJMEBpXADbcAh9sDBago8mhRXROKEqMScxYJltg6evSoj3JYVFPl\/u53v2tEHBXp1GPpDh065H7zm98ktyjn2RfWZWVIREqAKrqpyajs+pu\/+Zs+AjfPbitLYjkWpIoyLV682G3cuNH7IIEbCld9r3fz58\/3E\/isdO10xiKBG0Zw9VnCNiVwZYP46Al9HcxblMuIrdg\/i4KrP9nWVdvdELJJpWunHavkLfIrZa+VH0b5s3xQ+Zs2bWpsaa\/TttiOMEKuxRTrrxpr8QKNRabjdFXsi9NmbVGOGUoMa7eDoqz6XbSxpN81i+DqTy0MStyG6fTefjtC\/nntZHYicNtpXfJCAAIQgAAEIFAXgUElcC1CKuc1+ZLgtIisiV9FK\/TYFtzwPKmisCZwtVVXE1ZFbfVZ20P12Jk6q8OiNfq7RKs9Spe1RbnIvrAuK0OTTBOWl1xyibdL\/sYR3Dy7rayUwE1FcEOBa98\/9NBDbuvWrU2R3m5EcMXMtqAqgq5IUiqCq3fxRN0m5b0kcMOdBGInZmqnmI0WCbRwYuPCdifUEZEv8yNUdVFDbWk7J9TX1Q9MXGX5IBa2XbmKX0XiO1w0i7d1x3Vm9b1WbUuxTQnceGu\/CddvvvnGTZkyxQtcY6OdLWp\/G1+K4KbSpfjHi0+hEEbglhkJpIEABCAAAQhAoFsEBr3AVYQ1FLrhGdOf\/exnPhKpib9tW84SuHEEVw2gci2Caw2iSWZWBDclwFP2tRPBjQVuqqyUwE1FuCWidebRRH14YVZ8VreOLb9F5zFtIi7WWWdwwzOaShcKm8EscIvO4MrXLP9M+KS2oWpLt4m+rAhgJ39syp5zDdvStqCH51zD8adFH\/laRnTl+VbE3Lb+mh2pc+J2oVlqO3V43rWOi8+yBG689TheBLKxtH37dn9m2cZX6lyu7LTtyKHfcR1hv0LgdnIEUTYEIAABCEAAAlUJDCqBG25RDs\/b6nPeuVXlU7RCE307dxoLRYvmKq2VLZh2VtZuHrXoqtLFZ3DL2mdboxWRUlRYE+3wDK4mqHpuv\/32wgiubWeOy0pFslK3FOfdmNrq7bRZnTC8tda2cGtrtJ2jzbtFObQltFnnhu2CrMEscIvYlBG4ijJmsVH+\/hC4RX7F9o4ZM6Zxpl42xxHnOOoa3wpe5QcwzzadY7Wz\/aEdFgWNx0bWLcp1jqHQ93DcpNo872blvFuUwzsDQr\/tfgC9C8dcyJstylV6H2khAAEIQAACEOgUgUEhcDvlfH+VG97yrC3U4SVSsfAuuvE2VVbWP5\/UX\/5SLwQgMPQJIHCHfhvjIQQgAAEIQGAwEEDg9kMrxWcK7ZbVMBKT9+\/8hianytIZ3\/DscF7UpR\/cp0oIQGAIEkDgDsFGxSUIQAACEIDAICSAwB2EjYbJEIAABAYaAQTuQGsR7IEABCAAAQj0JgEEbm+2O15DAAIQqJUAArdWnBQGAQhAAAIQgECLBBC4LYIjGwQgAAEI\/H8CCFx6AwQgAAEIQAACA4EAAncgtAI2QAACEBjkBBC4g7wBMR8CEIAABCAwRAh4gTtEfMENCEAAAhCAAAQgAAEIQAACEOhhAgjcHm58XIcABCAAAQhAAAIQgAAEIDCUCCBwh1Jr4gsEIAABCEAAAhCAAAQgAIEeJoDA7eHGx3UIQAACEIAABCAAAQhAAAJDiQACdyi1Jr5AAAIQgAAEIAABCEAAAhDoYQII3B5ufFyHAAQgAAEIQAACEIAABCAwlAggcIdSa+ILBCAAAQhAAAIQgAAEIACBHiaAwO3hxsd1CEAAAhCAAAQgAAEIQAACQ4kAAncotSa+QAACEIAABCAAAQhAAAIQ6GEC\/w8E49JHNdF5jgAAAABJRU5ErkJggg==)","e9db9059":"**For rfc**;\n\nPrecision: 0.957\n\nRecall: 0.757\n\nF1: 0.845\n\nIt took 88 seconds for fitting and predicting\n\n**For rfc_balanced**;\n\nPrecision: 0.972\n\nRecall: 0.716\n\nF1: 0.825\n\nIt took 44 seconds for fitting and predicting\n\nAdding class weights doesn't work for this situation but it decrease time significantly.","085475ed":"# Splitting Data\n\nWe have to split the data before scaling or sampling techniques. \n\n-If splitting data after over sampling, that method create new samples from minority class. New synthetic samples just like original samples and after than fitting and predicting model, we get very good results but it would be over optimistic results and it cause to sort of data leakage.\n\n-If we split data after under sampling, that method remove observations from majority class. We also get good results but we lost lots of information. For example, we remove almost 280k observation that is non-fraud. Our new dataset could be 450 fraud - 450 non fraud for training and 150-150 for test set. We can have good model for that kind of distribution, but in real world, we will facing with lots of non-fraud observations. In this situation, our model couldn't predict non-fraud observations well.\n","3571dbfd":"**For xgbc**;\n\nPrecision: 0.943\n\nRecall: 0.777\n\nF1: 0.852\n\nIt took 50 seconds for fitting and predicting.\n\n**For xgbc_balanced**;\n\nPrecision: 0.913\n\nRecall: 0.784\n\nF1: 0.844\n\nIt took 58 seconds for fitting and predicting.","19e99e15":"If you want to tune hyperparameters, or performing cross validation, you have to use pipeline to avoid data leakage.\n\nI use simple grid search with just two parameters and. \nAt first search, wrong usage, I use resampled train values for fit. \nFor second search, right usage of parameter tuning. I create a pipeline with sampling method and model.","e889d343":"First of all, my goal is not creating best model for this problem. Deep learning probably achieve better results on that kind of problem. I just want to create this notebook to using another problems that have imbalanced target. Generally, I want to show different aspects. I don't have lots of experience for imbalanced datasets, in this example, fraud detection.\n\nIn this notebook;\n\n- Splitting data\n- Sklearn Models with & without class weight\n- Imblearn Models \n- Boosting Algorithms with & without class weights\n- Sampling (SMOTE)\n- Models with resampled data\n- Parameter Tuning and Cross Validating with Sampling","beeeb65b":"# Class Weights","e163d2e1":"# Models\n\nI just use models with default parameters and also try them with setting class weights.","8975fcf9":"Setting class weight parameter to balanced works well in this problem. Also, instead of weighting balanced, you can adjust weights 60-40, 65-35 etc.\n\nAlso, we can use scale_pos_weight parameter to balancing data for binary classification problems.","0ec4f729":"**For rfc, with smote**;\n\nPrecision: 0.894\n\nRecall: 0.797\n\nF1: 0.843\n\nIt took 67 seconds for fitting and predicting","0cf8c06b":"# Model Comparison","a23dc7c9":"# Sampling\n\nAs I mentioned earlier, we don't need to create 50%-50% dataset. Our minority class observations, fraud cases, are stay in background. We need to make them noticeable. To do it, we need to use sampling techniques with setting sampling strategy parameter to float that is fraction of classes.\n\nAlso, there will significant difference for model speeds.","5aec04b9":"When applying, we don't need to create equally distributed target classes. If you try it with setting sampling_strategy to \"not minority\" or \"auto\", you got too few non-fraud observations and that cause to to problem on learning. In other words, our model predicts  non-fraud examples as fraud and finally we get low precision score.\n\nFor this reason, applying sampler with float number on sapling_strategy (a desired ratio of # minority class over # majority class), gives better results.","44cb4959":"For decision trees, setting class weights decrease the time, but our models don't have good results.","e437cac7":"We can use voting classifier to create final ensemble model.","5acd97f4":"Sklearn based models generally have parameter called as \"class_weight\" to adjust class weights.\n\nWith using compute_class_weight function from sklearn.utils.class_weight, we can learn our class weights.","e8531d22":"# Boosting","772c4ca3":"**For xgb, with smotec**;\n\nPrecision: 0.878\n\nRecall: 0.818\n\nF1: 0.846\n\nIt took 70 seconds for fitting and predicting"}}