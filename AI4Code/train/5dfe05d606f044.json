{"cell_type":{"ecbdf081":"code","c773e7ae":"code","b0c44ee2":"code","f0d2b988":"code","0ef8e64d":"code","a45ebb68":"code","2522ef45":"code","31c9adbb":"code","bc0fbbf9":"code","03e91831":"code","11b0b7e6":"code","5985f2f7":"code","ee766beb":"code","3e60a521":"code","ef4a09c7":"code","acb1ae34":"code","deded76c":"code","af410c46":"code","0c053e86":"code","b3cd02d9":"code","f1c2efd5":"code","cf8e62dc":"code","ce4049fd":"code","8f40edcf":"code","d0e7e618":"code","c1b0b760":"code","fa8b81bc":"code","16f83d76":"code","31b5cec9":"markdown","fd44edef":"markdown","58a81540":"markdown","4e93d8e9":"markdown","04fc1b3b":"markdown","103310f7":"markdown","fee40c5d":"markdown","41d6f359":"markdown","14d6409a":"markdown","6526d0bc":"markdown","70d03435":"markdown","f5b1968d":"markdown"},"source":{"ecbdf081":"#Importing Re module\nimport re","c773e7ae":"#Normal String\ns = 'a\\tb'\nprint(s)","b0c44ee2":"#Raw String\ns = r'a\\tb'\nprint(s)","f0d2b988":"text = '42 is a number '\npattern =r'\\d+'\nmatch = re.match(pattern, text)","0ef8e64d":"if match:\n    print(match.group(0))\n    \nelse:\n    print('No Match')","a45ebb68":"def is_integer(text):\n    pattern = r'^\\d+$'\n    match = re.match(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False","2522ef45":"is_integer('rtf')","31c9adbb":"def test_is_integer():\n    pass_list = ['123', '456', '800', '0091']\n    fail_list = ['a123', '342a', '1 2 3', '1\\t2', ' 12', '45 ']\n    \n    for text in pass_list:\n        if not is_integer(text):\n            print('Failed to dect an integer ', text)\n            \n    for text in fail_list:\n        if is_integer(text):\n            print('Incorrectly classified as integer ',text)\n            \n    print(\"Test Complete\")","bc0fbbf9":"test_is_integer()","03e91831":"pattern = r\"\\d+\" # one or more digits\n\ntext = \"42 is my lucky number\"\n\nmatch = re.search(pattern,text)\n\n# check if match was successful\nif match:\n    print('Found a match:', match.group(0), 'at index:', match.start())\nelse:\n    print (\"No match\")      ","11b0b7e6":"pattern = r\"\\d+\" # \\d = digit. + = one or more.  This pattern matches one or more digits\n\n# search method will look for the first match anywhere in the text\ntext = \"my lucky number is 42\"\n\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match:',match.group(0), 'at index:', match.start())\nelse:\n    print(\"No Match\")   ","5985f2f7":"# But, it finds only the first match in the text\n\npattern = r\"\\d+\" # \\d = digit. + = one or more.  This pattern matches one or more digits\n\n# search method will look ONLY for the first match anywhere in the text\ntext = \"my lucky numbers are 42 and 24\"\n\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match:',match.group(0), 'at index:', match.start())\nelse:\n    print(\"No Match\")   ","ee766beb":"# Find all numbers in the text\npattern = r\"\\d+\"\ntext = \"NY Postal Codes are 10001, 10002, 10003, 10004\"\n\nprint ('Pattern',pattern)\n# successful match\nmatch = re.findall(pattern, text)\n\nif match:\n    print('Found matches:', match)\nelse:\n    print(\"No Match\")     ","3e60a521":"pattern = r\"\\d+\"\ntext = \"NY Postal Codes are 10001, 10002, 10003, 10004\"\n\nprint ('Pattern',pattern)\n# successful match\nmatch_iter = re.finditer(pattern, text)\n\nprint ('Matches')\nfor match in match_iter:\n    print('\\t', match.group(0), 'at index:', match.start())","ef4a09c7":"pattern = r\"\\d+\"\ntext = \"NY Postal Codes are 10001, 10002, 10003, 10004\"\n\nprint ('Pattern',pattern)\n# successful match\nmatch_iter = re.finditer(pattern, text)\n\nprint ('Matches')\n\ni = 0\n\nfor match in match_iter:\n    print('\\t', match.group(0), 'at index:', match.start())\n    i += 1\n    \n    if i > 2:\n        break","acb1ae34":"pattern = r\"\\d+\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())\n        \nelse:\n    print(\"No Match\")","deded76c":"pattern = r\"\\d{4}\\d{2}\\d{2}\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())\n        \nelse:\n    print(\"No Match\")","af410c46":"pattern = r\"(\\d{4})\\d{2}\\d{2}\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())\n    \n    print('Groups', match.groups())\n        \nelse:\n    print(\"No Match\")","0c053e86":"pattern = r\"(\\d{4})(\\d{2})(\\d{2})\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())\n    \n    print('Groups', match.groups())\n        \nelse:\n    print(\"No Match\")","b3cd02d9":"pattern = r\"(\\d{4})(\\d{2})(\\d{2})\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())\n    \n    print('Groups', match.groups())\n    \n    print(match.group(1))\n    print(match.group(2))\n    print(match.group(3))    \n    \nelse:\n    print(\"No Match\")","f1c2efd5":"pattern = r\"(\\d{4})(\\d{2})(\\d{2})\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())\n    \n    print('Groups', match.groups())\n        \n    for idx, value in enumerate(match.groups()):\n        print ('\\tGroup', idx+1, value, '\\tat index', match.start(idx+1))\n        \nelse:\n    print(\"No Match\")","cf8e62dc":"# Separate year, month and day\npattern = r\"(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())    \n    print('\\t',match.groupdict())\nelse:\n    print(\"No Match\")  ","ce4049fd":"# Separate year, month and day\npattern = r\"(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})\"\ntext = \"Start Date: 20200920\"\n\nprint(\"Pattern\",pattern)\nmatch = re.search(pattern, text)\n\nif match:\n    print('Found a match', match.group(0), 'at index:', match.start())    \n    print('\\tYear:',match.group('year'))\n    print('\\tMonth:',match.group('month'))\n    print('\\tDay:',match.group('day'))    \nelse:\n    print(\"No Match\") ","8f40edcf":"# Format date\n#  20200920 => 09-20-2020\n\npattern = r\"(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})\"\ntext = \"Start Date: 20200920, End Date: 20210920\"\n\n# substitute with value space dollars\nreplacement_pattern = r\"\\g<month>-\\g<day>-\\g<year>\"\n\nprint ('original text\\t', text)\nprint()\n\n# find and replace\nnew_text= re.sub(pattern, replacement_pattern, text)\n\nprint('new text\\t', new_text)","d0e7e618":"# Format \n#   20200920 => Sep-20-2020\nimport datetime","c1b0b760":"def format_date(match):   \n    in_date = match.groupdict()\n    \n    year = int(in_date['year'])\n    month = int(in_date['month'])\n    day = int(in_date['day'])\n    \n    #https:\/\/docs.python.org\/3\/library\/datetime.html#strftime-strptime-behavior\n    return datetime.date(year,month,day).strftime('%b-%d-%Y')","fa8b81bc":"# Format date\npattern = r\"(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})\"\ntext = \"Start Date: 20200920, End Date: 20210920\"\n\nprint ('original text\\t', text)\nprint()\n\n# find and replace\nnew_text= re.sub(pattern, format_date, text)\n\nprint('new text\\t', new_text)","16f83d76":"pattern = r\",\"\n\ntext = \"a-c,x,y,1\"\n\nre.split(pattern,text)","31b5cec9":"<h2>re.sub - find and replace<\/h2>","fd44edef":"<h3>two patterns: one to find the text and another pattern with replacement text<\/h3>","58a81540":"<h2>re.finditer - Iterator<\/h2>\nmethod returns an iterator with the first match and you have control to ask for more matches.\n","4e93d8e9":"<h2>re.search - Find the first match anywhere<\/h2>\nre.search() method will search the regular expression pattern and return the first occurrence. Unlike Python re.match(), it will check all lines of the input string. The Python re.search() method returns a match object when the pattern is found and \u201cnull\u201d if the pattern is not found","04fc1b3b":"<h2>re.split - split text based on specified pattern<\/h2>","103310f7":"<h3>access by group name<\/h3>","fee40c5d":"# **What is Regular Expression?**\nA regular expression is a specific kind of text pattern that you can use \nwith many modern applications and programming languages. We can use them to verify whether input fits into the text pattern, to \nfind text that matches the pattern within a larger body of text, to \nreplace text matching the pattern with other text or rearranged bits of \nthe matched text, to split a block of text into a list of subtexts, and to \nshoot yourself in the foot. If you use regular expressions with skill, they simplify many \nprogramming and text processing tasks, and allow many that wouldn\u2019t \nbe at all feasible without the regular expressions. You would need dozens if not hundreds of lines of procedural code to \nextract all email addresses from a document\u2014code that is tedious to \nwrite and hard to maintain. But with the proper regular expression, it takes just a few lines of code, \nor maybe even one line. There is no official standard that defines exactly which text patterns are \nregular expressions and which aren\u2019t. As we can imagine, every designer of programming languages and \nevery developer of text processing applications has a different idea of \nexactly what a regular expression should be. So now we\u2019re stuck with a \nwhole palette of regular expression flavors. In this series we would see the Python-style regex flavour.","41d6f359":"<h2>groups - find sub matches <\/h2>\ngroup 0 = refers to the text in a string that matched the pattern<br>\ngroup 1..n onwards refer to the sub-groups","14d6409a":"# re.match method\nre.match() method of re in Python will search the regular expression pattern and return the first occurrence. The Python RegEx Match method checks for a match only at the beginning of the string. So, if a match is found in the first line, it returns the match object. But if a match is found in some other line, the Python RegEx Match function returns null.","6526d0bc":"<h3>named groups<\/h3>","70d03435":"<h3>custom function to generate replacement text<\/h3>","f5b1968d":"<h2>re.findall - Find all the matches<\/h2>\nmethod returns only after scanning the entire text\nIn contrast, search() module will only return the first occurrence that matches the specified pattern. \nfindall() will iterate over all the lines of the file and will return all non-overlapping matches of pattern in a single step.\n"}}