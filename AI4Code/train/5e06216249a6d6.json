{"cell_type":{"2fb0ad7e":"code","f89f52d7":"code","ccaaeba7":"code","2a50c8e6":"code","a17a9319":"code","16d0232b":"code","361afc0c":"code","5b02db9d":"code","23794762":"code","7180fc77":"code","21d0add7":"code","551de7c6":"code","ba67d446":"code","3bd3f110":"code","a01c2b41":"code","93e20dc5":"code","b7731125":"code","614b3307":"code","1f464fa0":"code","be56a2b7":"code","93609177":"code","cedc12b2":"markdown","485d6c5b":"markdown","1f15d771":"markdown","1c5fa010":"markdown","e56fd473":"markdown"},"source":{"2fb0ad7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","f89f52d7":"median_house_hold_in_come = pd.read_csv('..\/input\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('..\/input\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","ccaaeba7":"percentage_people_below_poverty_level[\"Geographic Area\"].unique()","2a50c8e6":"percentage_people_below_poverty_level.columns","a17a9319":"#percantage poverty level according to area\npercentage_people_below_poverty_level.poverty_rate.replace(\"-\",0.0,inplace=True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\narea = list(percentage_people_below_poverty_level[\"Geographic Area\"].unique())\nliste = []\nfor i in area:\n    x=percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    mean = sum(x.poverty_rate)\/len(x)\n    liste.append(mean)\ndata = pd.DataFrame({\"area\":area,\"value\":liste})\nfirst_sorted = (data[\"value\"].sort_values(ascending = False)).index.values\nsorted_data = data.reindex(first_sorted)\n#vizualiton time :)\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data[\"area\"],y=sorted_data[\"value\"])\nplt.xticks(rotation=90)\nplt.xlabel(\"city\")\nplt.ylabel(\"poverty rate\")\nplt.title(\"poverty rate of each state\")\n","16d0232b":"#Most common name of killed people\nseparated = kill.name[kill.name != \"TK TK\"].str.split()\na,b = zip(*separated)\nnew_list = a+b\ncount_name = Counter(new_list)\nmost_common = count_name.most_common(15)\nx,y = zip(*most_common)\nx,y = list(x),list(y)\n# vizualiton\nplt.figure(figsize=(15,10))\nax = sns.barplot(x=x,y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')","361afc0c":"percent_over_25_completed_highSchool.percent_completed_hs.replace(\"-\",0.0,inplace=True)\narea = list(percent_over_25_completed_highSchool[\"Geographic Area\"].unique())\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\nliste = []\nfor i in area:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool[\"Geographic Area\"]==i]\n    mean = sum(x.percent_completed_hs)\/len(x)\n    liste.append(mean)\ndata = pd.DataFrame({\"area\":area,\"value_value\":liste})\nsorted_data1 = (data[\"value_value\"].sort_values(ascending = False)).index.values\nnew_sorted_data = data.reindex(sorted_data1)\n#vizualition\nplt.figure(figsize=(15,10))\nsns.barplot(x=new_sorted_data[\"area\"],y=new_sorted_data[\"value_value\"])\n","5b02db9d":"share_race_city.columns","23794762":"#It is horizontal barplot we wanto bar plot we write indew x to y\narea_last=list(share_race_city[\"Geographic area\"].unique())\nshare_race_city.replace(\"(X)\",0.0,inplace=True)\nshare_race_city.loc[:,[\"share_white\",\"share_black\",\"share_native_american\",\"share_asian\",\"share_hispanic\"]]=share_race_city.loc[:,[\"share_white\",\"share_black\",\"share_native_american\",\"share_asian\",\"share_hispanic\"]].astype(float)\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_last:\n    x = share_race_city[share_race_city[\"Geographic area\"] == i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black)\/len(x))\n    share_native_american.append(sum(x.share_native_american)\/len(x))\n    share_asian.append(sum(x.share_asian)\/len(x))\n    share_hispanic.append(sum(x.share_hispanic)\/len(x))\n#andddd vizualition\nplt.figure(figsize=(10,15))\nsns.barplot(x=share_white,y=area_last,alpha = 0.5,color = \"blue\",label=\"white\")\nsns.barplot(x=share_black,y=area_last,alpha=0.6,color=\"red\",label=\"black\")\nsns.barplot(x=share_native_american,y=area_last,alpha=0.5,color=\"lime\",label=\"native\")\nsns.barplot(x=share_asian,y=area_last,alpha=0.6,color=\"yellow\",label=\"asian\")\nsns.barplot(x=share_hispanic,y=area_last,alpha=0.7,color=\"cyan\",label=\"hispanic\")\nplt.yticks(rotation=-45)\nplt.xlabel(\"values\")\nplt.ylabel(\"state\")\nplt.title(\"mean of race of each state\")\nplt.legend(loc=\"lower right\")","7180fc77":"percentage_people_below_poverty_level.head()","21d0add7":"new_sorted_data.head()","551de7c6":"#Point plot is line plot + scatter plot\nsorted_data[\"value\"] = sorted_data[\"value\"]\/max( sorted_data[\"value\"])\nnew_sorted_data[\"value_value\"] = new_sorted_data[\"value_value\"]\/max( new_sorted_data[\"value_value\"])\ndata = pd.concat([sorted_data,new_sorted_data[\"value_value\"]],axis=1)\ndata.sort_values(\"value\",inplace=True)\n#vizualition\nplt.figure(figsize=(20,10))\nsns.pointplot(x=\"area\",y=\"value\",data=data,color=\"blue\",alpha=0.6)\nsns.pointplot(x=\"area\",y=\"value_value\",data=data,color=\"green\",alpha=0.6)\nplt.text(40,0.6,'high school graduate ratio',color='green',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='blue',fontsize = 18,style = 'italic')\nplt.xticks(rotation=90)\nplt.xlabel(\"area\")\nplt.ylabel(\"value\")\nplt.title(\"poverty rate vs high school graduation\",color=\"red\",fontsize=24)","ba67d446":"#kde plot + violinplot = jointplot(kind = kde)\nsns.jointplot(data[\"value\"],data[\"value_value\"],kind=\"kde\",size=7)\nplt.show()","3bd3f110":"#Scatter plot + barplot = jointpoint\nsns.jointplot(\"value\",\"value_value\",data=data,size=5,ratio = 3,color=\"r\")\nplt.show()","a01c2b41":"kill.race.value_counts()","93e20dc5":"# Race rates according in kill data \nlabels = kill.race.value_counts().index\nexplode = [0,0,0,0,0,0]\nsize = kill.race.value_counts().values\ncolors = [\"cyan\",\"yellow\",\"blue\",\"lime\",\"red\",\"green\"]\n#vizualition\nplt.pie(size,explode = explode,labels = labels,colors = colors,autopct = \"%1.1f%%\")\nplt.legend()\nplt.show()","b7731125":"# Race rates according in kill data  with countplot\nsns.set(style='darkgrid')\nax = sns.countplot(y = kill.race)","614b3307":"data17","1f464fa0":"# Race rates according in kill data\n# we want to draw data big to smal we do so\nkil_race_values = kill.race.value_counts().values\nkill_race_index = kill.race.value_counts().index\ndata19 = pd.DataFrame({\"race\":kill_race_index,\"count\":kil_race_values})\ndata18 =(data19[\"count\"].sort_values(ascending=False)).index.values\ndata17 = data19.reindex(data18)\nsns.set(style = \"darkgrid\")\nax = sns.barplot(x=\"count\",y=\"race\",data = data17)\nplt.title(\"The number of race in kill\")","be56a2b7":"kill.columns","93609177":"#There is my lmplot working maybe it is looking silly but everything for learning\n#i did \u0131 seperated kill data male or female and i draft age according to id and seperated mental illnes\nax = sns.lmplot(x = \"id\",y=\"age\",data=kill,col=\"signs_of_mental_illness\")","cedc12b2":"**Welcome to my kernel**","485d6c5b":"**Conclusion**","1f15d771":"I  explored Fatal police shooting in the USA .I hope you like my kernel.I am beginer on python.","1c5fa010":"\u0131 hope yo like my plot working with seaborn library.I am 16 years old \u0131 am studied data science.I am sure you like my work because you are the best people :)can you write my mistake and your advise","e56fd473":"if we want to processing data  before of all we know data"}}