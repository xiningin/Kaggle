{"cell_type":{"8f36db2b":"code","42390b3c":"code","eefe2fc9":"code","6ed7f6f2":"code","6a66c4ca":"code","0609d6ff":"code","438d117c":"code","a2eec33e":"code","ed8bebb0":"code","29bca76d":"code","23815839":"code","9e07c4de":"code","41fa88d0":"code","f5f5189d":"code","dc9ec4ed":"code","4801fa12":"code","a96261ba":"code","c542a03d":"code","d352c149":"code","aaed8e65":"code","c758e7b1":"code","514b6b78":"code","3b802737":"code","92341c70":"code","06711787":"code","93185cfb":"code","c14ae320":"code","124b1668":"code","f92a3239":"code","7aa95037":"code","b843e4a1":"code","2b92a557":"code","6945e415":"code","07892b97":"code","292902fc":"code","c74a58a6":"markdown","135cd825":"markdown","33e49ab8":"markdown","24d12678":"markdown","c9a153bb":"markdown","3f4a5d4a":"markdown","6bee1d1f":"markdown","83345662":"markdown","97887826":"markdown","072187f5":"markdown","809ec89e":"markdown","2b91a520":"markdown","8915f3da":"markdown","882bd57a":"markdown","484eab2e":"markdown","1d6287e5":"markdown","f2d7fb77":"markdown","cca9b7a7":"markdown","9c695ae6":"markdown","d14960d0":"markdown","f76a6670":"markdown","cf12e387":"markdown"},"source":{"8f36db2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","42390b3c":"import cv2#open cv library for image reading\nimport matplotlib.pyplot as plt#for plotting of graph and visualising it \n%matplotlib inline","eefe2fc9":"import os \nimport random\nimport gc","6ed7f6f2":"train_dir='..\/input\/train'\ntest_dir='..\/input\/test'","6a66c4ca":"train_dogs=['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'dog' in i]#get dog image\ntrain_cats=['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'cat' in i]#get dog image","0609d6ff":"test_image=['..\/input\/test\/{}'.format(i) for i in os.listdir(test_dir) ]#get test image","438d117c":"train_image=train_dogs[:2000]+train_cats[:2000]#slice dataset upto 2000 samples\nrandom.shuffle(train_image)","a2eec33e":"del train_dogs\ndel train_cats","ed8bebb0":"gc.collect()#collect garbage to save memory","29bca76d":"import matplotlib.image as mpimg#importing image into numpy array\nfor ima in train_image[0:3]:\n    img=mpimg.imread(ima)\n    imgplot = plt.imshow(img)#plotting image as numpy array\n    plt.show()\n    ","23815839":"nrows=150\nncolums=150\nchannel=3","9e07c4de":"#a function to read and process our data in acceptable format\ndef read_process(list_of_img):\n    x=[]#features\n    y=[]#labels\n    for image in list_of_img:\n        x.append(cv2.resize(cv2.imread(image,cv2.IMREAD_COLOR),(nrows,ncolums),interpolation=cv2.INTER_CUBIC))#read image\n        #get labels\n        if 'dog' in image:\n            y.append(1)\n        elif 'cat' in image:\n            y.append(0)\n    return x,y\nx, y = read_process(train_image)\n#x is now an array of image pixel values and y is a list of labels","41fa88d0":"#display 5 train image \nplt.figure(figsize=(20,10))\ncolums=5\nfor i in range(colums):\n    plt.subplot(5\/colums+1,colums,i+1)\n    plt.imshow(x[i])","f5f5189d":"import seaborn as sns\ndel train_image\ngc.collect()","dc9ec4ed":"#convert to array \nx=np.array(x)\ny=np.array(y)","4801fa12":"sns.countplot(y)\nplt.title('labels for cats and dogs')","a96261ba":"print(x.shape)\nprint(y.shape)","c542a03d":"#spilit into train and validation set\nfrom sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val=train_test_split(x,y,test_size=.20,random_state=2)\nprint(x_train.shape)\nprint(x_val.shape)\n","d352c149":"del x\ndel y\ngc.collect()","aaed8e65":"n_train=len(x_train)\nn_val=len(x_val)","c758e7b1":"batch_size=32","514b6b78":"from keras.applications import InceptionResNetV2\nconv_base=InceptionResNetV2(weights='imagenet',include_top=False,input_shape=(150,150,3))","3b802737":"from keras import  layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array,load_img","92341c70":"#creating last layer and adding to to pre-trained model\nmodel=models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256,activation='relu'))\nmodel.add(layers.Dense(1,activation='sigmoid'))","06711787":"model.summary()","93185cfb":"#freeze conv_base and train our own only\nprint(\"no of trainable weight before freezing:\",len(model.trainable_weights))","c14ae320":"conv_base.trainable=False\nprint(\"no of trainable weight after freezing:\",len(model.trainable_weights))\n","124b1668":"#specify loss and optimizers\nmodel.compile(loss='binary_crossentropy',optimizer=optimizers.RMSprop(lr=.0002),metrics=['acc'])","f92a3239":"#data argumentation\ntrain_datagen=ImageDataGenerator(rescale=1.\/255, rotation_range=40,width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\n","7aa95037":"val_datagen=ImageDataGenerator(rescale=1.\/255)#only rescaling in validation set","b843e4a1":"#creating image generators\ntrain_generator=train_datagen.flow(x_train,y_train,batch_size=batch_size)\nval_generator=val_datagen.flow(x_val,y_val,batch_size=batch_size)","2b92a557":"#training the dataset\nhistory=model.fit_generator(train_generator,steps_per_epoch=n_train\/\/batch_size,epochs=20,validation_data=val_generator,validation_steps=n_val\/\/batch_size)","6945e415":"#saving trained models so tey can be reused\nmodel.save_weights('model_wieghts.h5')\nmodel.save('model_keras.h5')","07892b97":"#predicting first 10 images\nx_test,y_test=read_process(test_image[0:10])\nX=np.array(x_test)\ntest_datagen=ImageDataGenerator(rescale=1.\/255)","292902fc":"#loop that iterates over the Images from the generator to make predictions. \ni=0\ntext_labels=[]\nplt.figure(figsize=(30,20))\nfor batch in test_datagen.flow(X,batch_size=1):\n    pred=model.predict(batch)\n    if pred>0.5:\n        text_labels.append('dogs')\n    else:\n         text_labels.append('cats')\n    plt.subplot(5\/colums+1,colums,i+1)\n    plt.title(text_labels[i])\n    imgplot=plt.imshow(batch[0])\n    i+=1\n    if i%10==0:\n        break\n    plt.show()\n        \n","c74a58a6":"<font size=\"4\">Importing important libraries<\/font>","135cd825":"<font size=\"3\">Deleting  variables that are no longer required<\/font>","33e49ab8":"<font size=\"4\">Training the dataset<\/font>","24d12678":"<font size=\"3\">visualising traning images<\/font>","c9a153bb":"<font size=\"4\">Loading dataset into test and train data<\/font>","3f4a5d4a":"<font size=\"3\">Data argumentation<\/font>","6bee1d1f":"<font size=\"4\">Spilitting into training and validating set<\/font>","83345662":"<font size=\"10\">TRANSFER LEARNING<\/font>[](http:\/\/)","97887826":"<font size=\"4\">Using Resnet pretrained  model<\/font>","072187f5":"<font size=\"5\">Dog vs cat dataset<\/font>","809ec89e":"<font size=\"3\">Predicting test images<\/font>","2b91a520":"<font size=\"4\">Getting test images from dataset<\/font>","8915f3da":"<font size=\"3\">Saving the trained model<\/font>","882bd57a":"**Resizing image now**","484eab2e":"The training archive contains 25,000 images of dogs and cats.But we will use only 2000 images each of dogs and cats.","1d6287e5":"<font size=\"3\">Specify loss and optimizers<\/font>","f2d7fb77":"<font size=\"3\">Taking only 2000 images for training anf shuffling it<\/font>","cca9b7a7":"<font size=\"3\">Freezing pretrained model and training only fully connected layers<\/font>","9c695ae6":"<font size=\"4\">Plotting some random training images<\/font>","d14960d0":"<font size=\"4\">Getting training images from dataset<\/font>","f76a6670":"<font size=\"4\">Adding output fully connected layers to pretrained model <\/font>","cf12e387":"It is a technique when in which model pre-trained for one task is reused for another task.In practice, very few people train an entire Convolutional Network from scratch (with random initialization), because it is relatively rare to have a dataset of sufficient size. Instead, it is common to pretrain a ConvNet on a very large dataset (e.g. ImageNet, which contains 1.2 million images with 1000 categories), and then use the ConvNet either as an initialization or a fixed feature extractor for the task of interest. "}}