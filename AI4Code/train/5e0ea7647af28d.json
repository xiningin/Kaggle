{"cell_type":{"077e7fe6":"code","34199b7f":"code","5e24b1ee":"code","690d850e":"code","af58b0f8":"code","ad39c180":"code","ac53b36f":"code","23fd6f34":"code","a07c1857":"code","bb16461c":"code","d844442f":"code","8917ed9d":"code","2d9ce9fe":"code","be342bd1":"code","09bdf261":"code","68bdef89":"code","70c146e2":"code","7509f2f8":"code","7a677bc8":"code","f6ecb2ff":"code","f4391dfc":"code","ccb969c6":"code","cf2d69e6":"code","14c06af7":"code","bd48cc30":"code","806baf05":"code","1a490fae":"code","78822e99":"code","3811754d":"code","facfb17d":"code","b3144a21":"code","7759b277":"code","cedec0cc":"code","a8e9840c":"code","1bdda967":"markdown","f8876bb1":"markdown","e9b2a1ea":"markdown","a1cbef0a":"markdown","0ef9de0a":"markdown"},"source":{"077e7fe6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34199b7f":"import pandas as pd\nimport numpy as np\n#plotly\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom pandas import plotting\n#plotly\nimport plotly.offline as py\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.express as px","5e24b1ee":"df=pd.read_csv('..\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')\ndf.head()","690d850e":"df.isnull().sum()","af58b0f8":"df['Genre'].value_counts().plot(kind='barh', figsize=(10,10))\nplt.grid(b=True, which='both')","ad39c180":"dat=ff.create_table(df.head(10))\npy.iplot(dat)","ac53b36f":"# checks if there is any null value or not\ndf.isnull().any().any()","23fd6f34":"plt.rcParams['figure.figsize'] = (9, 9)\nlabels=['Non-Fiction', 'Fiction']\nplt.pie(df['Genre'].value_counts(), explode=(0,0.1), labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Type ', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","a07c1857":"col = \"Genre\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\"\", height=600, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","bb16461c":"col = \"Year\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\nplt.figure(figsize=(10,10))\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\"\", height=800, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","d844442f":"df['Genre'].value_counts().plot(kind='barh')","8917ed9d":"d1 = df[df[\"Genre\"] == \"Fiction\"]\nd2 = df[df[\"Genre\"] == \"Non Fiction\"]\n\ncol = \"Year\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(x=vc1[col], y=vc1[\"count\"], name=\"Fiction\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=vc2[col], y=vc2[\"count\"], name=\"Non Fiction\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","2d9ce9fe":"df.head()","be342bd1":"d1 = df[df[\"Genre\"] == \"Fiction\"]\nd2 = df[df[\"Genre\"] == \"Non Fiction\"]\n\ncol = \"Year\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"Fiction\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Non Fiction\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","09bdf261":"d1 = df[df[\"Genre\"] == \"Fiction\"]\nd2 = df[df[\"Genre\"] == \"Non Fiction\"]\n\ncol = \"Genre\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"Fiction\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Non Fiction\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","68bdef89":"df.columns","70c146e2":"df['User Rating'].sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))\nplt.grid(b=True)\nplt.show()","7509f2f8":"df['Reviews'].sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))\nplt.grid(b=True)\nplt.show()","7a677bc8":"col = \"User Rating\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"Fiction\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Non-Fiction\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Rating count of Fiction and Non-Fiction show\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","f6ecb2ff":"df.columns","f4391dfc":"col = \"Author\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"Fiction\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Non-Fiction\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Rating count of Fiction and Non-Fiction show\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","ccb969c6":"df['Author'].value_counts().sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))\nplt.grid(b=True)\nplt.show()","cf2d69e6":"df['Author'].value_counts().sort_values(ascending=False).iloc[1:51].plot(kind='barh', figsize=(15,15))\nplt.grid(b=True)\nplt.show()","14c06af7":"df.head()","bd48cc30":"df.shape","806baf05":"for i in df.columns:\n    null_rate=df[i].isnull().sum()\/len(df)*100\n    if null_rate>0:\n        print(\"{} 's null rate {}%\".format(i, round(null_rate,2)))","1a490fae":"fig = plt.figure()\nax = fig.add_subplot(111, projection = '3d')\n\nx = df['Year']\ny = df['User Rating']\nz = df['Reviews']\n\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"User Review\")\nax.set_zlabel(\"Ratings\")\n\nax.scatter(x, y, z)\n\nplt.show()","78822e99":"df.columns","3811754d":"import plotly.express as px\nfig = px.scatter_3d(df, x='Year', y='Reviews', z='User Rating',\n              color='Genre')\nfig.show()","facfb17d":"import plotly.express as px\nfig = px.scatter(y=df['User Rating'], x=df['Reviews'])\nfig.show()","b3144a21":"df.columns","7759b277":"from wordcloud import WordCloud,STOPWORDS\n\ntext=' '.join(d1['Author'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","cedec0cc":"text=' '.join(d2['Author'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","a8e9840c":"Ratings = df['User Rating'].value_counts()\nVisualization = px.funnel(Ratings,title='Types of Rating on Netflix')\n\nVisualization.show()","1bdda967":"# Word cloud of the Fiction Book's Author ","f8876bb1":"**Obs**\n* The data is equally distributed \n* It can be seen that the data well separated ","e9b2a1ea":"# Word cloud of the Non-Fiction Book's Author ","a1cbef0a":"# Count of Genre","0ef9de0a":"**Obs**\n* There is no null value"}}