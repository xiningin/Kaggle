{"cell_type":{"6f082c3a":"code","29055937":"code","ae277fea":"code","28eba3f2":"code","87f71bed":"code","2f3240fc":"code","f40e6a70":"code","553dfb77":"markdown","193971db":"markdown","4ee5f9c9":"markdown","f038b644":"markdown","4b68aaec":"markdown","d89dec5f":"markdown","e2fcab37":"markdown","8bf0b1e1":"markdown"},"source":{"6f082c3a":"import numpy as np\nimport pandas as pd\nimport os\nimport fastai\nfrom fastai.vision import *\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nimport pydicom\nimport torchvision.models as models\nfrom tqdm import tqdm","29055937":"class RegMetrics(Callback):\n  \"Stores predictions and targets to perform calculations on epoch end.\"\n  def on_epoch_begin(self, **kwargs):\n    self.targs, self.preds = Tensor([]), Tensor([])\n\n  def on_batch_end(self, last_output:Tensor, last_target:Tensor, **kwargs):\n    assert last_output[:, 1].numel() == last_target.numel(), \"Expected same numbers of elements in pred {} & targ {}\".format(last_output.shape, last_target.shape)\n    self.preds = torch.cat((self.preds, partial(F.softmax, dim=-1)(last_output)[:, 1].cpu()))\n    self.targs = torch.cat((self.targs, last_target.cpu().float()))\n\n# Define some custom metrics \nclass AUCROC(RegMetrics):\n  \"\"\" Compute the area under the receiver operating characteristic curve. \"\"\"\n  def on_epoch_begin(self, **kwargs):\n    super().on_epoch_begin()\n    \n  def on_epoch_end(self, **kwargs):\n    self.metric = roc_auc_score(self.targs, self.preds)","ae277fea":"df_train = pd.read_csv('..\/input\/train.csv')\nsample_set = df_train.sample(6)\nprint('Train.csv samples:')\nprint(sample_set)\n\nprint('\\nNumber of training samples:{0}'.format(len(os.listdir('..\/input\/train\/train'))))\nprint('Number of test samples:{0}'.format(len(os.listdir('..\/input\/test\/test'))))","28eba3f2":"fig, ax = plt.subplots(2, 3)\nindex = 0\nfor row in ax:\n    for col in row:\n        img = open_image('..\/input\/train\/train\/'+str(sample_set.iloc[index][\"id\"]))\n        img.show(col, title='Cactus:'+str(sample_set.iloc[index][\"has_cactus\"]))\n        index += 1","87f71bed":"train_path = '..\/input\/train\/train'\n\nnumber_epochs=5\n\ndef train(arch):\n    tfms = get_transforms(do_flip=True, flip_vert=False, max_rotate=10.,\n                            max_zoom=1.1, max_lighting=0.2, max_warp=0.2, \n                            p_affine=1.0, p_lighting=0.0)\n    \n    #setup data source\n    data = ImageDataBunch.from_df(path=train_path, df=df_train, label_col=1, bs=16, size=32, ds_tfms=tfms)\n\n    #define learner\n    learn = cnn_learner(data, arch, metrics=[accuracy, AUCROC()], model_dir='..\/..\/..\/models')\n\n    #train\n    learn.fit_one_cycle(number_epochs, 3e-3)\n    \n    return learn\n","2f3240fc":"resnet50_learner = train(models.resnet50)\ndensenet121_learner = train(models.densenet121)\nvgg_learner = train(models.vgg19_bn)","f40e6a70":"result_csv = 'submission.csv'\ntest_path = '..\/input\/test\/test\/'\n\ndef ensemble_predition(test_img):\n    img = open_image(test_path + test_img)\n    \n    resnet50_predicition = resnet50_learner.predict(img)\n    densenet121_predicition = densenet121_learner.predict(img)\n    vgg_predicition = vgg_learner.predict(img)\n    \n    #ensemble average\n    sum_pred = resnet50_predicition[2] + densenet121_predicition[2] + vgg_predicition[2]\n    prediction = sum_pred \/ 3\n    \n    #prediction results\n    predicted_label = torch.argmax(prediction).item()\n    \n    return predicted_label\n\n#to give np array the correct style\nsubmission_data = np.array([['dummy', 0]])\n\n#progress bar\nwith tqdm(total=len(os.listdir(test_path))) as pbar:       \n    #test all test images\n    for img in os.listdir(test_path):\n        label = ensemble_predition(img)\n        new_np_array = np.array([[img, label]])\n        submission_data = np.concatenate((submission_data, new_np_array), axis=0)\n        pbar.update(1)\n\n#remove dummy\nsubmission_data = np.delete(submission_data, 0, 0)\n\n#save final submission\nresult_df = pd.DataFrame(submission_data, columns=['id','has_cactus'])\nresult_df.to_csv(result_csv, index=False)\n\n","553dfb77":"# Build ensemble\n\nBuild an ensemble and use it for prediction","193971db":"# Data analysis\n\nPrint the number of train and test examples and show the style of train csv","4ee5f9c9":"Show the cactus images from sample dataframe","f038b644":"# Imports","4b68aaec":"# Define AUC_ROC metric callback\n\nThis is the fastai callback for visualization of the AUC_ROC score during training","d89dec5f":"First let's define the function for training with the architecture as input parameters. I selected a batch size of 16 and applied data augmentation to it.","e2fcab37":"# Modelling\n\nI want to train three different models and let them work in an ensemble together.","8bf0b1e1":"Lets train the three different model architectures: Resnet50, densenet121 and vgg19_bn"}}