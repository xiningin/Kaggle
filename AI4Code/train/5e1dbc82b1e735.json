{"cell_type":{"d65e6608":"code","4189bfcf":"code","e81df8a3":"code","3ae8b34d":"code","2f38acd9":"code","ed338181":"code","a40da4c2":"code","e5a26622":"code","0fc188fa":"code","d8e25705":"code","b9ae0acf":"code","5652d369":"code","cfe01c7f":"markdown","6643c9fc":"markdown","e47757bb":"markdown","6f976aca":"markdown","a473cc05":"markdown"},"source":{"d65e6608":"# Python 3 environment defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","4189bfcf":"filepath = '..\/input\/ios-core-motion-activities\/motion.csv'\ndata = pd.read_csv(filepath, index_col='date_time', parse_dates=[['date','time']])\n\n# Convert String 'True'\/'False' columns\n# Python considers 'True' and 'False' to be Booleans, so they can be used like numbers\ndata[['unknown','stationary','walking','running','cycling','automotive']] *= 1\n\n# Convert 'low', 'medium', 'high' values in 'confidence' column to 0, 1, 2 respectively\n#data['confidence'] = pd.Categorical(data['confidence'])\n#data['confidence'] = 2 - data['confidence'].cat.codes","e81df8a3":"print(\"Total Row Count: {0} \\nTotal Column Count: {1}\".format(data.shape[0], data.shape[1]))","3ae8b34d":"data.head()","2f38acd9":"data.info()","ed338181":"data.isnull().sum()","a40da4c2":"# Motion events which do not fit any attributes\nunlabelled_data = data[(data.unknown == 0) & (data.stationary == 0) & (data.walking == 0) & (data.running == 0) & (data.cycling == 0) & (data.automotive == 0)]\nprint(\"{0} unlabelled motion events\".format(unlabelled_data.shape[0]))","e5a26622":"data_by_day = data.groupby(pd.Grouper(freq='D')).agg(len).drop(columns=['stationary','walking','running','cycling','automotive','confidence'])\ndata_by_day.rename(columns={'unknown':'event_count'}, inplace=True)\n\nax = sns.barplot(x=data_by_day.index.strftime('%d\/%m'), y=data_by_day.event_count)\nax.set_title('Total Motion Events, by Day', weight='bold')\nax.set_ylabel('Motion Events Count')\nax.set_xlabel('Date');","0fc188fa":"event_count_per_hour = data.groupby(data.index.hour).count().drop(columns=['stationary','walking','running','cycling','automotive','confidence'])\n\n_,ax = plt.subplots(figsize=(10,4))\nevent_count_per_hour.plot(ax=ax,legend=False)\n\nax.set_title('Total Motion Events, by Hour of Day', weight='bold')\nax.set_ylabel('Motion Events Count')\nax.set_xlabel('Hour of Day')\nax.xaxis.set_ticks(range(0,24));","d8e25705":"def plot_heatmap(values_column, ax, cbar_kws=None):\n    piv = pd.pivot_table(\n        data=data,\n        index=data.index.strftime('%d\/%m'),\n        columns=data.index.hour,\n        values=values_column,\n        aggfunc='sum',\n        fill_value=0)\n\n    sns.heatmap(\n        piv,\n        ax=ax,\n        cmap=sns.cm.rocket_r,\n        cbar_kws=cbar_kws)\n    \n    events_name = values_column.capitalize()\n    ax.set_title(f'{events_name} Events', weight='bold')\n    ax.set_xlabel('Hour')\n    ax.set_ylabel('Day')\n    ax.collections[0].colorbar.set_label(f'Count')\n\n_,ax = plt.subplots(2, 2, figsize=(14,8))\nplt.subplots_adjust(hspace=0.4)\n\nplot_heatmap('walking', ax[0, 0])\nplot_heatmap('automotive', ax[0, 1])\nplot_heatmap('running', ax[1, 0], cbar_kws={\"ticks\":[0,1,2]})\nplot_heatmap('cycling', ax[1, 1], cbar_kws={\"ticks\":[0,1,2]})","b9ae0acf":"confidence_data = data.confidence.value_counts()\n\n_,ax = plt.subplots(figsize=(8,6))\nconfidence_data.plot(kind='pie', ax=ax, autopct='%.0f%%')\nax.set_title('Confidence', weight='bold')\nax.set_ylabel(None);","5652d369":"data.loc[data.confidence == 'medium'].drop(columns=['confidence']).sum()","cfe01c7f":"The total count of motion events by hour of day approximately mirrors the amount of physical movement\/activity per hour.","6643c9fc":"# Imports & Setup","e47757bb":"# Data Visualisation","6f976aca":"# Understanding Dataset","a473cc05":"No actual running or cycling occurred during data gathering, but the system presumably interpreted some movement as being around that speed and labelled it as such.\n\nCycling events ocurred around the same time as automotive events, which makes sense as cycling is the next fastest mode of travel after 'automotive' that is supported by iOS at the time of writing. Similarly, all running events occurred around the same time as walking events, but not all hours with a high count of walking events also had associated running events recorded."}}