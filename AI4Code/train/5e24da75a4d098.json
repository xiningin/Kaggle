{"cell_type":{"93fe005a":"code","62ccd85b":"code","1ae1af5b":"code","6d86c744":"code","78970eab":"code","9c558962":"code","2b81e9a7":"code","d60ca58e":"code","ebf2dba0":"code","197ab9dd":"code","6b8f0dac":"code","c273bd78":"code","eb9383b1":"code","a97dc635":"code","14b0d565":"markdown","c5412e3c":"markdown","c7c47030":"markdown","3295319d":"markdown","1fc62b05":"markdown","a2e501e9":"markdown","2e81126b":"markdown","315853ff":"markdown"},"source":{"93fe005a":"li = [\"abc\", 34, 4.34, 23]\nprint(li)","62ccd85b":"st = \"Hello World\"\n\nprint(st)\n\nst = 'Hello World'\n\nprint(st)\n  \nst = \"\"\"This is a multi-line string that uses triple quotes. \"\"\"\n\nprint(st)\n  \n","1ae1af5b":"tu = (23, 'abc', 4.56, (2,3), 'def')\nprint(tu[1])\nprint(tu[-1])","6d86c744":"for fruit in ['apple','banana','mango']:\n    print(\"I like\",fruit)","78970eab":"import numpy as np\nnp_2d = np.array([[1.73, 1.68, 1.71, 1.89, 1.79],\n [65.4, 59.2, 63.6, 88.4, 68.7]]) ","9c558962":"np_2d.shape ","2b81e9a7":"import numpy as np\nnp_height = np.array([1.73, 1.68, 1.71, 1.89, 1.79])\nnp_weight = np.array([65.4, 59.2, 63.6, 88.4, 68.7]) \n\nbmi = np_weight \/ np_height ** 2\n\nprint(\" BMI : \", bmi)","d60ca58e":"import numpy as np\n\nnp_city = np.array([[ 1.64, 71.78],\n[ 1.37, 63.35],\n[ 1.6 , 55.09],\n[ 2.04, 74.85],\n[ 2.04, 68.72],\n[ 2.01, 73.57]])\n\nprint(np_city)\nprint(type(np_city))","ebf2dba0":"print(\"Mean Height : \",np.mean(np_city[:,0]))","197ab9dd":"print(\"Median Height : \",np.median(np_city[:,0]))","6b8f0dac":"np.corrcoef(np_city[:,0], np_city[:,1])","c273bd78":"np.std(np_city[:,0])","eb9383b1":"fam = [1.73, 1.68, 1.71, 1.89]\ntallest = max(fam)\nprint(\"Tallest : \", tallest)","a97dc635":"height = np.round(np.random.normal(1.75,0.20,5000),2)\nweight = np.round(np.random.normal(60.32,15,5000),2)\nnp_city = np.column_stack((height,weight))\nprint(np_city)","14b0d565":"### Calculating BMI ","c5412e3c":" \n ## Introduction\n \n The Python 3 environment comes with many helpful analytics libraries installed. It is defined by the kaggle\/python docker image: \n \n https:\/\/github.com\/kaggle\/docker-python\n\nFor example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n Input data files are available in the \"..\/input\/\" directory.\n \n For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nAny results you write to the current directory are saved as output.","c7c47030":"### Creating 2D Numpy Array","3295319d":"# Basic Statistical Analysis\n","1fc62b05":"# Iterating Through a List\n\nUsing a for loop we can iterate though each item in a list.\n\n","a2e501e9":"## Tuple, Strings and Lists\n\nTuples are defined using parentheses (and commas).\n    >>> tu = (23, \u2018abc\u2019, 4.56, (2,3), \u2018def\u2019)\nLists are defined using square brackets (and commas).\n   >>> li = [\u201cabc\u201d, 34, 4.34, 23]\n   \nStrings are defined using quotes (\u201c, \u2018, or \u201c\u201c\u201c).\n  ","2e81126b":"## Data Generation and Statistics","315853ff":"# Numpy Arrays"}}