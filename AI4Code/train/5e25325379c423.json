{"cell_type":{"9e1f46d7":"code","39f7c991":"code","ca1e903a":"code","af080703":"code","26c181f9":"code","9e90835b":"code","ebc5568e":"code","6db63cdf":"code","1e02b46b":"code","aac433c5":"code","e987ce09":"code","25b5686b":"code","50ea5bd6":"code","c7168d5e":"code","4555c58f":"code","be4e0a5a":"code","90998398":"code","d6dae22e":"code","6f7979d2":"code","b5fa8902":"code","dcf5b919":"code","7a4f5ae3":"code","df8a853e":"code","0a30d59f":"code","fb224316":"code","663571cb":"code","652c0d3f":"code","0cd04983":"code","e772ed03":"code","1c1f7c49":"code","32edcfdf":"code","c3ed9c82":"code","6986ff6f":"code","0854eeab":"code","daf30c42":"code","e7f47533":"code","90500576":"markdown","d20121c6":"markdown","1c6699bf":"markdown","89fe63c1":"markdown","f9b9d93c":"markdown","ff601e90":"markdown","789c933d":"markdown","4bd9af26":"markdown","bd64e4d1":"markdown","9a37f3bb":"markdown","5efcc9d9":"markdown","2498b2dc":"markdown","10ee1a38":"markdown","77953a22":"markdown","9141fb0c":"markdown","32dd767b":"markdown"},"source":{"9e1f46d7":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\n%matplotlib inline","39f7c991":"train = pd.read_csv(\"..\/input\/train_set.csv\", date_parser=\"SALEDATE\")\ntest = pd.read_csv(\"..\/input\/test_set.csv\", date_parser=\"SALEDATE\")\nprint(\"train shape:\", train.shape)\nprint(\"test shape:\", test.shape)","ca1e903a":"#\u76ee\u7684\u95a2\u6570\u306e\u5bfe\u6570\u3092\u6e96\u5099\ntrain[\"log_PRICE\"] = np.log(train[\"PRICE\"])\n#\u3053\u306e\u6642\u70b9\u3067\u76ee\u7684\u5909\u6570\u304c\u5916\u308c\u5024\u306e\u3082\u306e\u306f\u306e\u305e\u3044\u3066\u304a\u304f\uff083\u4ef6\uff09\ntrain = train[train[\"log_PRICE\"] != 0]\n#\u30e2\u30c7\u30eb\u306b\u4f7f\u7528\u3057\u306a\u3044\u4e88\u5b9a\u306e\u5909\u6570\u306f\u3053\u3053\u3067\u843d\u3068\u3057\u3066\u304a\u304f\ntrain = train.drop([\"FULLADDRESS\", \"CITY\", \"STATE\", \"ZIPCODE\", \"NATIONALGRID\", \"ASSESSMENT_NBHD\",\"GIS_LAST_MOD_DTTM\", \n                                \"ASSESSMENT_SUBNBHD\", \"CENSUS_TRACT\", \"CENSUS_BLOCK\", \"X\", \"Y\", \"PRICE\"], axis=1)\n\n\ntrain_C = train[train[\"SOURCE\"] ==\"Condominium\"]\ntrain_R = train[train[\"SOURCE\"] ==\"Residential\"]\nprint(\"shape of C:\", train_C.shape)\nprint(\"shape of R:\", train_R.shape)","af080703":"def miss_kakunin(data):\n    missing = data.isnull().sum()\n    missing = missing[missing > 0]\n    missing = missing.sort_values(ascending=False)\n    missing.plot.bar()\n    return missing","26c181f9":"miss_kakunin(train_C)","9e90835b":"#20051\u500b\u6b20\u640d\u304c\u3042\u308b\u5909\u6570\u306f\u4f7f\u7528\u3057\u306a\u3044\ntrain_C[\"AYB\"] = np.where(train_C[\"AYB\"].isnull(), train_C[\"AYB\"].mode(), train_C[\"AYB\"])\ntrain_C[\"YR_RMDL\"] = np.where(train_C[\"YR_RMDL\"].isnull(), train_C[\"AYB\"], train_C[\"YR_RMDL\"]) #\u30ea\u30e2\u30c7\u30eb\u3057\u3066\u306a\u3044\u7269\u4ef6\u306f\u5efa\u7bc9\u5e74\u3067\u57cb\u3081\u308b)\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059(Residential\u306e\u307f\u306e\u5909\u6570)\ntrain_C = train_C.drop([\"ROOF\", \"STORIES\", \"GBA\", \"STYLE\", \"STRUCT\", \"GRADE\", \"CNDTN\", \n                                          \"EXTWALL\", \"INTWALL\", \"KITCHENS\",\"NUM_UNITS\"], axis=1)\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059\uff08\u610f\u5473\u4e0d\u660e\u306a\u3082\u306e\uff09\ntrain_C = train_C.drop([\"Id\", \"SALE_NUM\", \"BLDG_NUM\", \"USECODE\", \"SOURCE\", \"CMPLX_NUM\"], axis=1)","ebc5568e":"\"\"\"\n\u547d\u540d\u898f\u5247\n# \u5909\u6570\u3092\u4e38\u3081\u305f\u308a\u5c11\u3057\u52a0\u5de5\u3057\u305f\u3060\u3051\u306e\u3082\u306e\u306f\u5909\u6570\u540d+\u6570\u5b57\n# \u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u65b0\u5909\u6570\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u63a5\u982dNEW_\n\"\"\"\n#\u6570\u5024\u5909\u6570\ntrain_C[\"HF_BATHRM2\"] =  np.where(train_C[\"HF_BATHRM\"] >= 3, 3, train_C[\"HF_BATHRM\"]) \ntrain_C[\"NEW_total_BATHRM\"] =  train_C[\"BATHRM\"] + train_C[\"HF_BATHRM\"]\ntrain_C[\"ROOMS2\"] = np.where(train_C[\"ROOMS\"] >= 10, 10, train_C[\"ROOMS\"])\ntrain_C[\"NEW_BED\/ROOMS\"] = np.where(train_C[\"ROOMS2\"]!=0, train_C[\"BEDRM\"] \/ train_C[\"ROOMS2\"], 0)\ntrain_C[\"AYB2\"] = np.abs(1950 - train_C[\"AYB\"])\ntrain_C[\"YR_RMDL2\"] = np.where(train_C[\"YR_RMDL\"] == 20, train_C[\"AYB2\"], train_C[\"YR_RMDL\"])\ntrain_C[\"NEW_AYB_to_RMDL\"] = train_C[\"YR_RMDL2\"] - train_C[\"AYB2\"]\ntrain_C[\"NEW_AYB_to_EYB\"] = train_C[\"EYB\"] - train_C[\"AYB2\"]\ntrain_C[\"NEW_EYB_to_YR_RMDL\"] = np.abs(np.abs(train_C[\"YR_RMDL2\"] - train_C[\"EYB\"]) - 60)\ntrain_C[\"FIREPLACES2\"] = np.where(train_C[\"FIREPLACES\"] > 5, 5, train_C[\"FIREPLACES\"])\ntrain_C[\"SQUARE\"] = train_C[\"SQUARE\"].astype(\"int\") #C\u306eSQUARE\u306f\u305d\u306e\u306e\u30de\u30de\u3067\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u308b\ntrain_C[\"SALEDATE_Y\"] = pd.to_datetime(train_C[\"SALEDATE\"]).dt.year\n#\u6570\u5024\u5909\u6570(\u8ffd\u52a0)\ntrain_C[\"NEW_LANDAREA\/LIVING_GBA\"] = np.where(train_C[\"LIVING_GBA\"]==0, 0, train_C[\"LANDAREA\"] \/ train_C[\"LIVING_GBA\"])\ntrain_C[\"NEW_RMDL_to_SALE\"] = train_C[\"SALEDATE_Y\"] - train_C[\"YR_RMDL2\"]\ntrain_C[\"NEW_SQUARE\/LIVING_GBA\"] = np.where(train_C[\"LIVING_GBA\"]==0, 0, train_C[\"SQUARE\"] \/ train_C[\"LIVING_GBA\"])\ntrain_C[\"NEW_BATH\/ROOMS\"] = np.where(train_C[\"ROOMS2\"]==0, 0, train_C[\"NEW_total_BATHRM\"] \/ train_C[\"ROOMS2\"])\n\n#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\ntrain_C[\"AC2\"] = np.where(train_C[\"AC\"]==\"0\", \"N\", train_C[\"AC\"])\ntrain_C[\"dum_AC_Y\"] = np.where(train_C[\"AC2\"]==\"Y\", 1, 0)\ntrain_C[\"dum_QUALIFIED_Q\"] = np.where(train_C[\"QUALIFIED\"]==\"Q\", 1, 0)\ntrain_C[\"dum_WARD_1\"] = np.where(train_C[\"WARD\"]==\"Ward 1\", 1, 0)\ntrain_C[\"dum_WARD_2\"] = np.where(train_C[\"WARD\"]==\"Ward 2\", 1, 0)\ntrain_C[\"dum_WARD_3\"] = np.where(train_C[\"WARD\"]==\"Ward 3\", 1, 0)\ntrain_C[\"dum_WARD_4\"] = np.where(train_C[\"WARD\"]==\"Ward 4\", 1, 0)\ntrain_C[\"dum_WARD_5\"] = np.where(train_C[\"WARD\"]==\"Ward 5\", 1, 0)\ntrain_C[\"dum_WARD_6\"] = np.where(train_C[\"WARD\"]==\"Ward 6\", 1, 0)\ntrain_C[\"dum_WARD_7\"] = np.where(train_C[\"WARD\"]==\"Ward 7\", 1, 0)\ntrain_C[\"dum_QUADRANT_NW\"] = np.where(train_C[\"QUADRANT\"]==\"NW\", 1, 0)\ntrain_C[\"dum_QUADRANT_SE\"] = np.where(train_C[\"QUADRANT\"]==\"SE\", 1, 0)\ntrain_C[\"dum_QUADRANT_NE\"] = np.where(train_C[\"QUADRANT\"]==\"NE\", 1, 0)\n\n#\u5909\u63db\u5143\u306e\u5909\u6570\u306f\u843d\u3068\u3059(HEAT\u306f\u5f8c\u3067\u8003\u3048\u308b)\ntrain_C = train_C.drop([\"HF_BATHRM\", \"ROOMS\", \"AYB\", \"YR_RMDL\", \"FIREPLACES\", \"SALEDATE\", \"AC\", \"AC2\", \"QUALIFIED\", \"WARD\", \"QUADRANT\", \"HEAT\"], axis=1)","6db63cdf":"#\u5909\u6570\u540c\u58eb\u306e\u76f8\u95a2\u3092\u78ba\u8a8d\nplt.figure(figsize=(18,18))\nsns.heatmap(train_C.corr('pearson'),\n            annot=True,\n            fmt='.2f',\n            vmin=-1,\n            vmax=1,\n            cmap=\"seismic\")","1e02b46b":"#\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u5909\u6570\u3092\u843d\u3068\u3059\ntrain_C = train_C.drop([\"BATHRM\", \"BEDRM\", \"EYB\"], axis=1)","aac433c5":"#\u5b66\u7fd2\u7528\u306b\u30c7\u30fc\u30bf\u3092\u6574\u5f62\nC_y = train_C[\"log_PRICE\"]\nC_X = train_C.drop(\"log_PRICE\", axis=1)\n\n#\u624b\u5143\u3067\u7cbe\u5ea6\u78ba\u8a8d\u7528\u306btrain test\u306b\u5206\u5272\nC_tr_X, C_te_X, C_tr_y, C_te_y = train_test_split(C_X, C_y, test_size=0.3, random_state=42)\nprint(\"shape of C_tr_X:\", C_tr_X.shape)\nprint(\"shape of C_tr_y:\", C_tr_y.shape)\nprint(\"shape of C_te_X:\", C_te_X.shape)\nprint(\"shape of C_te_y:\", C_te_y.shape)","e987ce09":"#\u30e2\u30c7\u30eb\u3092\u4f5c\u6210(\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3068\u308a\u3042\u3048\u305a\u9069\u5f53)\nclf_C = XGBRegressor(max_depth=8, n_estimators=5000, seed=3, learning_rate=0.01)\nclf_C","25b5686b":"clf_C.fit(C_tr_X, C_tr_y, early_stopping_rounds=15, eval_set=[[C_te_X, C_te_y]])","50ea5bd6":"#\u5909\u6570\u91cd\u8981\u5ea6\u306e\u78ba\u8a8d\nfeature_importances = pd.DataFrame(clf_C.feature_importances_,\n                                   index = C_tr_X.columns,\n                                    columns=['importance']).sort_values('importance',ascending=False)\nprint(feature_importances.head(20))\n\nfeature_importances = feature_importances.sort_values('importance',ascending=True).tail(20)\nplt.barh(feature_importances.index, feature_importances.importance)","c7168d5e":"miss_kakunin(train_R)","4555c58f":"#SALEDATE\u6b20\u640d\u5148\u306f\u524a\u9664\u3059\u308b(1\u4ef6\u3060\u3057\u3001\u91cd\u8981\u5ea6\u304c\u9ad8\u3044\u305f\u3081)\ntrain_R = train_R[train_R[\"SALEDATE\"].notnull()]\n\n#29054\u500b\u6b20\u640d\u304c\u3042\u308b\u5909\u6570\u306f\u4f7f\u7528\u3057\u306a\u3044\ntrain_R[\"AYB\"] = np.where(train_R[\"AYB\"].isnull(), train_R[\"AYB\"].mode(), train_R[\"AYB\"])\ntrain_R[\"YR_RMDL\"] = np.where(train_R[\"YR_RMDL\"].isnull(), train_R[\"AYB\"], train_R[\"YR_RMDL\"]) #\u30ea\u30e2\u30c7\u30eb\u3057\u3066\u306a\u3044\u7269\u4ef6\u306f\u5efa\u7bc9\u5e74\u3067\u57cb\u3081\u308b)\ntrain_R[\"QUADRANT\"] = np.where(train_R[\"QUADRANT\"].isnull(), train_R[\"QUADRANT\"].mode(), train_R[\"QUADRANT\"])\ntrain_R[\"STORIES\"] = np.where(train_R[\"STORIES\"].isnull(), train_R[\"STORIES\"].mode(), train_R[\"STORIES\"])\n\n\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059(Condominiam\u306e\u307f\u306e\u5909\u6570)\ntrain_R = train_R.drop([\"LIVING_GBA\", \"CMPLX_NUM\"], axis=1)\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059\uff08\u610f\u5473\u4e0d\u660e\u306a\u3082\u306e\uff09\ntrain_R = train_R.drop([\"Id\", \"SALE_NUM\", \"BLDG_NUM\", \"USECODE\", \"SOURCE\"], axis=1)","be4e0a5a":"def GRADE_to_num(x):\n    if x == \"Low Quality\":\n        y = 0\n    elif x == \"Fair Quality\":\n        y = 1\n    elif x == \"Average\":\n        y = 2\n    elif x == \"Above Average\":\n        y = 3\n    elif x == \"Good Quality\":\n        y = 4\n    elif x == \"Very Good\":\n        y = 5\n    elif x == \"Excellent\":\n        y = 6\n    elif x == \"Superior\":\n        y = 7\n    elif x == \"Exceptional-A\":\n        y = 8\n    elif x == \"Exceptional-B\":\n        y = 9\n    elif x == \"Exceptional-C\":\n        y = 10\n    elif x == \"Exceptional-D\":\n        y = 11\n    elif x == \"No Data\": #test_R\u306b\u6f5c\u3093\u3067\u3044\u308b\u306e\u3067\u6ce8\u610f\n        y = -1\n    return y\n\ndef CNDTN_to_num(x):\n    if x == \"Poor\":\n        y = 0\n    elif x == \"Fair\":\n        y = 1\n    elif x == \"Average\":\n        y = 2\n    elif x == \"Good\":\n        y = 3\n    elif x == \"Very Good\":\n        y = 4\n    elif x == \"Excellent\":\n        y = 5\n    elif x == \"Default\": #test_R\u306b\u6f5c\u3093\u3067\u3044\u308b\u306e\u3067\u6ce8\u610f\n        y = 2\n    return y","90998398":"#\u6570\u5024\u5909\u6570\ntrain_R[\"HF_BATHRM2\"] =  np.where(train_R[\"HF_BATHRM\"] >= 3, 3, train_R[\"HF_BATHRM\"])\ntrain_R[\"NEW_total_BATHRM\"] =  train_R[\"BATHRM\"] + train_R[\"HF_BATHRM\"]\ntrain_R[\"ROOMS2\"] = np.where(train_R[\"ROOMS\"] >= 10, 10, train_R[\"ROOMS\"])\ntrain_R[\"NEW_BED\/ROOMS\"] = np.where(train_R[\"ROOMS2\"]!=0, train_R[\"BEDRM\"] \/ train_R[\"ROOMS2\"], 0)\ntrain_R[\"AYB2\"] = np.abs(1950 - train_R[\"AYB\"])\ntrain_R[\"YR_RMDL2\"] = np.where(train_R[\"YR_RMDL\"] == 20, train_R[\"AYB2\"], train_R[\"YR_RMDL\"])\ntrain_R[\"STORIES2\"] = np.where(train_R[\"STORIES\"] > 2, 2, train_R[\"STORIES\"])\ntrain_R[\"NEW_LAND\/GBA\"] = train_R[\"LANDAREA\"] \/ train_R[\"GBA\"]\ntrain_R[\"NEW_AYB_to_RMDL\"] = train_R[\"YR_RMDL2\"] - train_R[\"AYB2\"]\ntrain_R[\"NEW_AYB_to_EYB\"] = train_R[\"EYB\"] - train_R[\"AYB2\"]\ntrain_R[\"NEW_EYB_to_YR_RMDL\"] = np.abs(np.abs(train_R[\"YR_RMDL2\"] - train_R[\"EYB\"]) - 60)\ntrain_R[\"KITCHENS2\"] = np.where(train_R[\"KITCHENS\"] > 5, 5, train_R[\"KITCHENS\"])\ntrain_R[\"KITCHENS3\"] = np.abs(train_R[\"KITCHENS2\"] - 3) ** 2\ntrain_R[\"FIREPLACES2\"] = np.where(train_R[\"FIREPLACES\"] > 5, 5, train_R[\"FIREPLACES\"])\ntrain_R[\"SQUARE\"] = np.where(train_R[\"SQUARE\"] == \"PAR \", train_R[\"SQUARE\"].mode(), train_R[\"SQUARE\"])\ntrain_R[\"SQUARE\"] = train_R[\"SQUARE\"].astype(\"int\") #\"PAR \"\u3092\u7f6e\u63db\u3057\u3066\u304b\u3089\u6570\u5024\u306b\u3059\u308b\ntrain_R[\"SALEDATE_Y\"] = pd.to_datetime(train_R[\"SALEDATE\"]).dt.year\n#\u6570\u5024\u5909\u6570(\u8ffd\u52a0)\ntrain_R[\"NEW_RMDL_to_SALE\"] = train_R[\"SALEDATE_Y\"] - train_R[\"YR_RMDL2\"]\ntrain_R[\"NEW_SQUARE\/GBA\"] = np.where(train_R[\"GBA\"]==0, 0, train_R[\"SQUARE\"] \/ train_R[\"GBA\"])\ntrain_R[\"NEW_BATH\/ROOMS\"] = np.where(train_R[\"ROOMS2\"]==0, 0, train_R[\"NEW_total_BATHRM\"] \/ train_R[\"ROOMS2\"])\n\n\n#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\n#(HEAT, STYLE\u3001STRUCT,EXTWALL,ROOF,INTWALL(cadinary\u304c\u591a\u3044\u3084\u3064)\u306f\u3042\u3068\u3067\u8003\u3048\u308b)\ntrain_R[\"AC2\"] = np.where(train_R[\"AC\"]==\"0\", \"N\", train_R[\"AC\"])\ntrain_R[\"dum_AC_Y\"] = np.where(train_R[\"AC2\"]==\"Y\", 1, 0)\ntrain_R[\"dum_QUALIFIED_Q\"] = np.where(train_R[\"QUALIFIED\"]==\"Q\", 1, 0)\ntrain_R[\"dum_WARD_1\"] = np.where(train_R[\"WARD\"]==\"Ward 1\", 1, 0)\ntrain_R[\"dum_WARD_2\"] = np.where(train_R[\"WARD\"]==\"Ward 2\", 1, 0)\ntrain_R[\"dum_WARD_3\"] = np.where(train_R[\"WARD\"]==\"Ward 3\", 1, 0)\ntrain_R[\"dum_WARD_4\"] = np.where(train_R[\"WARD\"]==\"Ward 4\", 1, 0)\ntrain_R[\"dum_WARD_5\"] = np.where(train_R[\"WARD\"]==\"Ward 5\", 1, 0)\ntrain_R[\"dum_WARD_6\"] = np.where(train_R[\"WARD\"]==\"Ward 6\", 1, 0)\ntrain_R[\"dum_WARD_7\"] = np.where(train_R[\"WARD\"]==\"Ward 7\", 1, 0)\ntrain_R[\"dum_QUADRANT_NW\"] = np.where(train_R[\"QUADRANT\"]==\"NW\", 1, 0)\ntrain_R[\"dum_QUADRANT_SE\"] = np.where(train_R[\"QUADRANT\"]==\"SE\", 1, 0)\ntrain_R[\"dum_QUADRANT_NE\"] = np.where(train_R[\"QUADRANT\"]==\"NE\", 1, 0)\ntrain_R[\"GRADE\"] = train_R[\"GRADE\"].apply(GRADE_to_num)\ntrain_R[\"CNDTN\"] = train_R[\"CNDTN\"].apply(CNDTN_to_num)\n\n#\u5909\u63db\u5143\u306e\u5909\u6570\u306f\u843d\u3068\u3059\ntrain_R = train_R.drop([\"HF_BATHRM\", \"ROOMS\", \"AYB\", \"YR_RMDL\", \"FIREPLACES\", \"SALEDATE\", \"AC\", \"AC2\", \"QUALIFIED\", \"WARD\", \"QUADRANT\", \"HEAT\"], axis=1)\ntrain_R = train_R.drop([\"STYLE\", \"STRUCT\", \"EXTWALL\", \"INTWALL\", \"ROOF\"], axis=1)","d6dae22e":"#\u5909\u6570\u540c\u58eb\u306e\u76f8\u95a2\u3092\u78ba\u8a8d\nplt.figure(figsize=(18,18))\nsns.heatmap(train_R.corr('pearson'),\n            annot=True,\n            fmt='.2f',\n            vmin=-1,\n            vmax=1,\n            cmap=\"seismic\")","6f7979d2":"#\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u5909\u6570\u3092\u843d\u3068\u3059\ntrain_R = train_R.drop([\"NUM_UNITS\", \"KITCHENS\", \"KITCHENS2\", \"YR_RMDL2\"], axis=1)","b5fa8902":"#\u5b66\u7fd2\u7528\u306b\u30c7\u30fc\u30bf\u3092\u6574\u5f62\nR_y = train_R[\"log_PRICE\"]\nR_X = train_R.drop(\"log_PRICE\", axis=1)\n\n#\u624b\u5143\u3067\u7cbe\u5ea6\u78ba\u8a8d\u7528\u306btrain test\u306b\u5206\u5272\nR_tr_X, R_te_X, R_tr_y, R_te_y = train_test_split(R_X, R_y, test_size=0.3, random_state=42)\nprint(\"shape of R_tr_X:\", C_tr_X.shape)\nprint(\"shape of R_tr_y:\", C_tr_y.shape)\nprint(\"shape of R_te_X:\", C_te_X.shape)\nprint(\"shape of R_te_y:\", C_te_y.shape)","dcf5b919":"#\u5ff5\u306e\u305f\u3081XGB\u3067\u78ba\u8a8d(\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3068\u308a\u3042\u3048\u305a\u9069\u5f53)\nclf_R = XGBRegressor(max_depth=8, n_estimators=5000, seed=3, learning_rate=0.01)\nclf_R","7a4f5ae3":"clf_R.fit(R_tr_X, R_tr_y, early_stopping_rounds=15, eval_set=[[R_te_X, R_te_y]])","df8a853e":"#\u5909\u6570\u91cd\u8981\u5ea6\u306e\u78ba\u8a8d\nfeature_importances = pd.DataFrame(clf_R.feature_importances_,\n                                   index = R_tr_X.columns,\n                                    columns=['importance']).sort_values('importance',ascending=False)\nprint(feature_importances.head(20))\n\nfeature_importances = feature_importances.sort_values('importance',ascending=True).tail(20)\nplt.barh(feature_importances.index, feature_importances.importance)","0a30d59f":"#\u30e2\u30c7\u30eb\u306b\u4f7f\u7528\u3057\u306a\u3044\u4e88\u5b9a\u306e\u5909\u6570\u306f\u3053\u3053\u3067\u843d\u3068\u3057\u3066\u304a\u304f\ntest = test.drop([\"FULLADDRESS\", \"CITY\", \"STATE\", \"ZIPCODE\", \"NATIONALGRID\", \"ASSESSMENT_NBHD\",\"GIS_LAST_MOD_DTTM\", \n                                \"ASSESSMENT_SUBNBHD\", \"CENSUS_TRACT\", \"CENSUS_BLOCK\", \"X\", \"Y\"], axis=1)\n\n\ntest_C = test[test[\"SOURCE\"] ==\"Condominium\"]\ntest_R = test[test[\"SOURCE\"] ==\"Residential\"]\nprint(\"shape of C:\", test_C.shape)\nprint(\"shape of R:\", test_R.shape)","fb224316":"miss_kakunin(test_C)","663571cb":"#\u7d71\u8a08\u5024\u3067\u6b20\u640d\u3092\u57cb\u3081\u308b\u6642\u306ftrain\u306e\u7d71\u8a08\u5024\u3092\u4f7f\u3046\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff08\u2192\u8b0e\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3068\u308a\u3042\u3048\u305atest\u3067\u57cb\u3081\u3066\u304a\u304f\uff09\ntest_C[\"AYB\"] = np.where(test_C[\"AYB\"].isnull(), test_C[\"AYB\"].mode(), test_C[\"AYB\"])\ntest_C[\"YR_RMDL\"] = np.where(test_C[\"YR_RMDL\"].isnull(), test_C[\"AYB\"], test_C[\"YR_RMDL\"]) #\u30ea\u30e2\u30c7\u30eb\u3057\u3066\u306a\u3044\u7269\u4ef6\u306f\u5efa\u7bc9\u5e74\u3067\u57cb\u3081\u308b)\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059(Residential\u306e\u307f\u306e\u5909\u6570)\ntest_C = test_C.drop([\"ROOF\", \"STORIES\", \"GBA\", \"STYLE\", \"STRUCT\", \"GRADE\", \"CNDTN\", \n                                          \"EXTWALL\", \"INTWALL\", \"KITCHENS\",\"NUM_UNITS\"], axis=1)\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059\uff08\u610f\u5473\u4e0d\u660e\u306a\u3082\u306e\uff09\ntest_C = test_C.drop([\"Id\", \"SALE_NUM\", \"BLDG_NUM\", \"USECODE\", \"SOURCE\", \"CMPLX_NUM\"], axis=1)","652c0d3f":"#\u6570\u5024\u5909\u6570\ntest_C[\"HF_BATHRM2\"] =  np.where(test_C[\"HF_BATHRM\"] >= 3, 3, test_C[\"HF_BATHRM\"]) \ntest_C[\"NEW_total_BATHRM\"] =  test_C[\"BATHRM\"] + test_C[\"HF_BATHRM\"]\ntest_C[\"ROOMS2\"] = np.where(test_C[\"ROOMS\"] >= 10, 10, test_C[\"ROOMS\"])\ntest_C[\"NEW_BED\/ROOMS\"] = np.where(test_C[\"ROOMS2\"]!=0, test_C[\"BEDRM\"] \/ test_C[\"ROOMS2\"], 0)\ntest_C[\"AYB2\"] = np.abs(1950 - test_C[\"AYB\"])\ntest_C[\"YR_RMDL2\"] = np.where(test_C[\"YR_RMDL\"] == 20, test_C[\"AYB2\"], test_C[\"YR_RMDL\"])\ntest_C[\"NEW_AYB_to_RMDL\"] = test_C[\"YR_RMDL2\"] - test_C[\"AYB2\"]\ntest_C[\"NEW_AYB_to_EYB\"] = test_C[\"EYB\"] - test_C[\"AYB2\"]\ntest_C[\"NEW_EYB_to_YR_RMDL\"] = np.abs(np.abs(test_C[\"YR_RMDL2\"] - test_C[\"EYB\"]) - 60)\ntest_C[\"FIREPLACES2\"] = np.where(test_C[\"FIREPLACES\"] > 5, 5, test_C[\"FIREPLACES\"])\ntest_C[\"SQUARE\"] = test_C[\"SQUARE\"].astype(\"int\") #C\u306eSQUARE\u306f\u305d\u306e\u306e\u30de\u30de\u3067\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u308b\ntest_C[\"SALEDATE_Y\"] = pd.to_datetime(test_C[\"SALEDATE\"]).dt.year\n#\u8ffd\u52a0\u5206\ntest_C[\"NEW_LANDAREA\/LIVING_GBA\"] = np.where(test_C[\"LIVING_GBA\"]==0, 0, test_C[\"LANDAREA\"] \/ test_C[\"LIVING_GBA\"])\ntest_C[\"NEW_RMDL_to_SALE\"] = test_C[\"SALEDATE_Y\"] - test_C[\"YR_RMDL2\"]\ntest_C[\"NEW_SQUARE\/LIVING_GBA\"] = np.where(test_C[\"LIVING_GBA\"]==0, 0, test_C[\"SQUARE\"] \/ test_C[\"LIVING_GBA\"])\ntest_C[\"NEW_BATH\/ROOMS\"] = np.where(test_C[\"ROOMS2\"]==0, 0, test_C[\"NEW_total_BATHRM\"] \/ test_C[\"ROOMS2\"])\n\n#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\ntest_C[\"AC2\"] = np.where(test_C[\"AC\"]==\"0\", \"N\", test_C[\"AC\"])\ntest_C[\"dum_AC_Y\"] = np.where(test_C[\"AC2\"]==\"Y\", 1, 0)\ntest_C[\"dum_QUALIFIED_Q\"] = np.where(test_C[\"QUALIFIED\"]==\"Q\", 1, 0)\ntest_C[\"dum_WARD_1\"] = np.where(test_C[\"WARD\"]==\"Ward 1\", 1, 0)\ntest_C[\"dum_WARD_2\"] = np.where(test_C[\"WARD\"]==\"Ward 2\", 1, 0)\ntest_C[\"dum_WARD_3\"] = np.where(test_C[\"WARD\"]==\"Ward 3\", 1, 0)\ntest_C[\"dum_WARD_4\"] = np.where(test_C[\"WARD\"]==\"Ward 4\", 1, 0)\ntest_C[\"dum_WARD_5\"] = np.where(test_C[\"WARD\"]==\"Ward 5\", 1, 0)\ntest_C[\"dum_WARD_6\"] = np.where(test_C[\"WARD\"]==\"Ward 6\", 1, 0)\ntest_C[\"dum_WARD_7\"] = np.where(test_C[\"WARD\"]==\"Ward 7\", 1, 0)\ntest_C[\"dum_QUADRANT_NW\"] = np.where(test_C[\"QUADRANT\"]==\"NW\", 1, 0)\ntest_C[\"dum_QUADRANT_SE\"] = np.where(test_C[\"QUADRANT\"]==\"SE\", 1, 0)\ntest_C[\"dum_QUADRANT_NE\"] = np.where(test_C[\"QUADRANT\"]==\"NE\", 1, 0)\n\n#\u5909\u63db\u5143\u306e\u5909\u6570\u306f\u843d\u3068\u3059(HEAT\u306f\u5f8c\u3067\u8003\u3048\u308b)\ntest_C = test_C.drop([\"HF_BATHRM\", \"ROOMS\", \"AYB\", \"YR_RMDL\", \"FIREPLACES\", \"SALEDATE\", \"AC\", \"AC2\", \"QUALIFIED\", \"WARD\", \"QUADRANT\", \"HEAT\"], axis=1)","0cd04983":"#\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u5909\u6570\u3092\u843d\u3068\u3059\ntest_C = test_C.drop([\"BATHRM\", \"BEDRM\", \"EYB\"], axis=1)","e772ed03":"#\u30e2\u30c7\u30eb\u5f53\u3066\u306f\u3081\npred_C_XGB = clf_C.predict(test_C)","1c1f7c49":"miss_kakunin(test_R)","32edcfdf":"#29054\u500b\u6b20\u640d\u304c\u3042\u308b\u5909\u6570\u306f\u4f7f\u7528\u3057\u306a\u3044\ntest_R[\"AYB\"] = np.where(test_R[\"AYB\"].isnull(), test_R[\"AYB\"].mode(), test_R[\"AYB\"])\ntest_R[\"YR_RMDL\"] = np.where(test_R[\"YR_RMDL\"].isnull(), test_R[\"AYB\"], test_R[\"YR_RMDL\"]) #\u30ea\u30e2\u30c7\u30eb\u3057\u3066\u306a\u3044\u7269\u4ef6\u306f\u5efa\u7bc9\u5e74\u3067\u57cb\u3081\u308b)\ntest_R[\"QUADRANT\"] = np.where(test_R[\"QUADRANT\"].isnull(), test_R[\"QUADRANT\"].mode(), test_R[\"QUADRANT\"])\ntest_R[\"STORIES\"] = np.where(test_R[\"STORIES\"].isnull(), test_R[\"STORIES\"].mode(), test_R[\"STORIES\"])\ntest_R[\"KITCHENS\"] = np.where(test_R[\"KITCHENS\"].isnull(), test_R[\"KITCHENS\"].mode(), test_R[\"KITCHENS\"])\n#(train\u3067\u306f\u6b20\u640d\u3058\u3083\u306a\u304b\u3063\u305f\u30ad\u30c3\u30c1\u30f3\u304c\u6b20\u640d\u306a\u306e\u304c\u30c4\u30e9\u30a4\u6c17\u6301\u3061)\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059(Condominiam\u306e\u307f\u306e\u5909\u6570)\ntest_R = test_R.drop([\"LIVING_GBA\", \"CMPLX_NUM\"], axis=1)\n\n#\u4f7f\u7528\u3057\u306a\u3044\u5909\u6570\u3092\u843d\u3068\u3059\uff08\u610f\u5473\u4e0d\u660e\u306a\u3082\u306e\uff09\ntest_R = test_R.drop([\"Id\", \"SALE_NUM\", \"BLDG_NUM\", \"USECODE\", \"SOURCE\"], axis=1)","c3ed9c82":"#\u6570\u5024\u5909\u6570\ntest_R[\"HF_BATHRM2\"] =  np.where(test_R[\"HF_BATHRM\"] >= 3, 3, test_R[\"HF_BATHRM\"]) \ntest_R[\"NEW_total_BATHRM\"] =  test_R[\"BATHRM\"] + test_R[\"HF_BATHRM\"]\ntest_R[\"ROOMS2\"] = np.where(test_R[\"ROOMS\"] >= 10, 10, test_R[\"ROOMS\"])\ntest_R[\"NEW_BED\/ROOMS\"] = np.where(test_R[\"ROOMS2\"]!=0, test_R[\"BEDRM\"] \/ test_R[\"ROOMS2\"], 0)\ntest_R[\"AYB2\"] = np.abs(1950 - test_R[\"AYB\"])\ntest_R[\"YR_RMDL2\"] = np.where(test_R[\"YR_RMDL\"] == 20, test_R[\"AYB2\"], test_R[\"YR_RMDL\"])\ntest_R[\"STORIES2\"] = np.where(test_R[\"STORIES\"] > 2, 2, test_R[\"STORIES\"])\ntest_R[\"NEW_LAND\/GBA\"] = test_R[\"LANDAREA\"] \/ test_R[\"GBA\"]\ntest_R[\"NEW_AYB_to_RMDL\"] = test_R[\"YR_RMDL2\"] - test_R[\"AYB2\"]\ntest_R[\"NEW_AYB_to_EYB\"] = test_R[\"EYB\"] - test_R[\"AYB2\"]\ntest_R[\"NEW_EYB_to_YR_RMDL\"] = np.abs(np.abs(test_R[\"YR_RMDL2\"] - test_R[\"EYB\"]) - 60)\ntest_R[\"KITCHENS2\"] = np.where(test_R[\"KITCHENS\"] > 5, 5, test_R[\"KITCHENS\"])\ntest_R[\"KITCHENS3\"] = np.abs(test_R[\"KITCHENS2\"] - 3) ** 2\ntest_R[\"FIREPLACES2\"] = np.where(test_R[\"FIREPLACES\"] > 5, 5, test_R[\"FIREPLACES\"])\ntest_R[\"SQUARE\"] = np.where(test_R[\"SQUARE\"] == \"PAR \", test_R[\"SQUARE\"].mode(), test_R[\"SQUARE\"])\ntest_R[\"SQUARE\"] = test_R[\"SQUARE\"].astype(\"int\") #\"PAR \"\u3092\u7f6e\u63db\u3057\u3066\u304b\u3089\u6570\u5024\u306b\u3059\u308b\ntest_R[\"SALEDATE_Y\"] = pd.to_datetime(test_R[\"SALEDATE\"]).dt.year\n#\u8ffd\u52a0\u5206\ntest_R[\"NEW_RMDL_to_SALE\"] = test_R[\"SALEDATE_Y\"] - test_R[\"YR_RMDL2\"]\ntest_R[\"NEW_SQUARE\/GBA\"] = np.where(test_R[\"GBA\"]==0, 0, test_R[\"SQUARE\"] \/ test_R[\"GBA\"])\ntest_R[\"NEW_BATH\/ROOMS\"] = np.where(test_R[\"ROOMS2\"]==0, 0, test_R[\"NEW_total_BATHRM\"] \/ test_R[\"ROOMS2\"])\n\n\n#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\n#(HEAT, STYLE\u3001STRUCT,EXTWALL,ROOF,INTWALL(cadinary\u304c\u591a\u3044\u3084\u3064)\u306f\u3042\u3068\u3067\u8003\u3048\u308b)\ntest_R[\"AC2\"] = np.where(test_R[\"AC\"]==\"0\", \"N\", test_R[\"AC\"])\ntest_R[\"dum_AC_Y\"] = np.where(test_R[\"AC2\"]==\"Y\", 1, 0)\ntest_R[\"dum_QUALIFIED_Q\"] = np.where(test_R[\"QUALIFIED\"]==\"Q\", 1, 0)\ntest_R[\"dum_WARD_1\"] = np.where(test_R[\"WARD\"]==\"Ward 1\", 1, 0)\ntest_R[\"dum_WARD_2\"] = np.where(test_R[\"WARD\"]==\"Ward 2\", 1, 0)\ntest_R[\"dum_WARD_3\"] = np.where(test_R[\"WARD\"]==\"Ward 3\", 1, 0)\ntest_R[\"dum_WARD_4\"] = np.where(test_R[\"WARD\"]==\"Ward 4\", 1, 0)\ntest_R[\"dum_WARD_5\"] = np.where(test_R[\"WARD\"]==\"Ward 5\", 1, 0)\ntest_R[\"dum_WARD_6\"] = np.where(test_R[\"WARD\"]==\"Ward 6\", 1, 0)\ntest_R[\"dum_WARD_7\"] = np.where(test_R[\"WARD\"]==\"Ward 7\", 1, 0)\ntest_R[\"dum_QUADRANT_NW\"] = np.where(test_R[\"QUADRANT\"]==\"NW\", 1, 0)\ntest_R[\"dum_QUADRANT_SE\"] = np.where(test_R[\"QUADRANT\"]==\"SE\", 1, 0)\ntest_R[\"dum_QUADRANT_NE\"] = np.where(test_R[\"QUADRANT\"]==\"NE\", 1, 0)\ntest_R[\"GRADE\"] = test_R[\"GRADE\"].apply(GRADE_to_num)\ntest_R[\"CNDTN\"] = test_R[\"CNDTN\"].apply(CNDTN_to_num)\n\n#\u5909\u63db\u5143\u306e\u5909\u6570\u306f\u843d\u3068\u3059\ntest_R = test_R.drop([\"HF_BATHRM\", \"ROOMS\", \"AYB\", \"YR_RMDL\", \"FIREPLACES\", \"SALEDATE\", \"AC\", \"AC2\", \"QUALIFIED\", \"WARD\", \"QUADRANT\", \"HEAT\"], axis=1)\ntest_R = test_R.drop([\"STYLE\", \"STRUCT\", \"EXTWALL\", \"INTWALL\", \"ROOF\"], axis=1)","6986ff6f":"#\u76f8\u95a2\u304c\u9ad8\u3044\u5909\u6570\u3092\u843d\u3068\u3059\ntest_R = test_R.drop([\"NUM_UNITS\", \"KITCHENS\", \"KITCHENS2\", \"YR_RMDL2\"], axis=1)","0854eeab":"pred_R_XGB = clf_R.predict(test_R)","daf30c42":"test_C_Id = test[test[\"SOURCE\"] ==\"Condominium\"][\"Id\"]\ntest_R_Id= test[test[\"SOURCE\"] ==\"Residential\"][\"Id\"]\ntest_C_Id.reset_index(drop=True, inplace=True) \n\npred_C_XGB2 = pd.concat([test_C_Id, pd.Series(pred_C_XGB)], axis=1, ignore_index=True)\npred_C_XGB2 = pred_C_XGB2.rename(columns={0: \"Id\", 1:\"PRICE_log\"})\n\npred_R_XGB2 = pd.concat([test_R_Id, pd.Series(pred_R_XGB)], axis=1, ignore_index=True)\npred_R_XGB2 = pred_R_XGB2.rename(columns={0: \"Id\", 1:\"PRICE_log\"})\nprint(pred_C_XGB2.shape)\nprint(pred_R_XGB2.shape)\n\nsubmit2 = pd.concat([pred_C_XGB2, pred_R_XGB2], axis=0, ignore_index=True)\nsubmit2[\"PRICE\"] = np.exp(submit2[\"PRICE_log\"]).astype(\"float32\")\nsubmit2 = submit2.drop(\"PRICE_log\", axis=1)\nsubmit2 = submit2.sort_values(\"Id\")\nprint(submit2.shape)","e7f47533":"##\u51fa\u529b\nsubmit2.to_csv(\"submit_20190123_1.csv\", header=True, index=False)","90500576":"## \u30c7\u30fc\u30bf\u8aad\u8fbc","d20121c6":"#### \u6b20\u640d\u51e6\u7406","1c6699bf":"### \u6b20\u640d\u51e6\u7406","89fe63c1":"#### \u6b20\u640d\u51e6\u7406","f9b9d93c":"### \u30b3\u30f3\u30c9\u30df\u30cb\u30a2\u30e0","ff601e90":"#### \u5909\u6570\u3092\u4f5c\u6210","789c933d":"### \u30ec\u30b8\u30c7\u30f3\u30b7\u30e3\u30eb\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210","4bd9af26":"#### \u5909\u6570\u4f5c\u6210","bd64e4d1":"#### \u5909\u6570\u3092\u4f5c\u6210","9a37f3bb":"### \u30b3\u30f3\u30c9\u30df\u30cb\u30a2\u30e0\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210","5efcc9d9":"## \u6295\u7a3f\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","2498b2dc":"## \u30c7\u30fc\u30bf\u52a0\u5de5","10ee1a38":"#### \u6b20\u640d\u51e6\u7406","77953a22":"### \u30ec\u30b8\u30c7\u30f3\u30b7\u30e3\u30eb","9141fb0c":"## test\u30c7\u30fc\u30bf\u3078\u306e\u5f53\u3066\u306f\u3081\n- \u4e0a\u3068\u540c\u3058\u51e6\u7406\u3092\u3059\u308b","32dd767b":"### \u5909\u6570\u4f5c\u6210"}}