{"cell_type":{"1b3f7a96":"code","42936202":"code","a109b898":"code","c32b733c":"code","363df344":"code","824ca216":"code","fd408db3":"code","45c3a5c5":"code","24918870":"code","13a6fa68":"code","4cdee6b1":"code","f659388b":"code","064f69f6":"code","db5a1dd6":"code","375a7059":"code","9a218845":"code","8cccafec":"code","2e2e7362":"code","70b54f17":"code","6bca4026":"code","77b6dbda":"code","58192956":"code","3d703ea6":"code","5586f175":"code","39d452d3":"code","e0db1b4a":"code","9c1467da":"code","bdfdd4fd":"code","f5f214cb":"code","f9ec8ebb":"code","5bef0f36":"code","37e71657":"code","be3df112":"code","a33634ba":"code","d4d12884":"code","f27b8729":"code","74666f9c":"markdown"},"source":{"1b3f7a96":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')","42936202":"df=pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","a109b898":"df.head()","c32b733c":"sns.heatmap(df.isnull(), cmap ='viridis', cbar=False, yticklabels=False)","363df344":"sns.countplot(data=df, x='stroke')","824ca216":"df['stroke'].value_counts()","fd408db3":"sns.countplot(data=df, x='stroke', hue='gender', palette='rainbow')","45c3a5c5":"sns.countplot(data=df, x='stroke', hue='hypertension', palette='rainbow')","24918870":"sns.countplot(data=df, x='stroke', hue='heart_disease', palette='rainbow')","13a6fa68":"sns.pairplot(df, hue='stroke', palette='bwr')","4cdee6b1":"df['bmi'].fillna(df['bmi'].mean(),inplace=True)","f659388b":"sns.heatmap(df.isnull(), cmap ='viridis', cbar=False, yticklabels=False)","064f69f6":"df.head()","db5a1dd6":"df.info()","375a7059":"Gen = pd.get_dummies(df['gender'], drop_first=True)\nMarried = pd.get_dummies(df['ever_married'], drop_first=True)\nWork = pd.get_dummies(df['work_type'], drop_first=True)\nRes = pd.get_dummies(df['Residence_type'], drop_first=True)\nSmoking = pd.get_dummies(df['smoking_status'], drop_first=True)","9a218845":"df.drop(['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'], axis=1, inplace=True)","8cccafec":"df.head()","2e2e7362":"df = pd.concat([df, Gen, Married, Work, Res, Smoking], axis=1)","70b54f17":"df.head()","6bca4026":"df.drop(['id'], axis=1, inplace=True)","77b6dbda":"df.head()","58192956":"# Shuffle the Dataset.\nshuffled_df = df.sample(frac=1,random_state=4)\n\n# Put all the yes stroke class in a separate dataset.\nstr_yes_df = shuffled_df.loc[shuffled_df['stroke'] == 1]\n\n#Randomly select 249 observations from the no stroke (majority class)\nstr_no_df = shuffled_df.loc[shuffled_df['stroke'] == 0].sample(n=249,random_state=42)\n\n# Concatenate both dataframes again\nnormalized_df = pd.concat([str_yes_df, str_no_df])\n\n#plot the dataset after the undersampling\nplt.figure(figsize=(8, 8))\nsns.countplot('stroke', data=normalized_df)\nplt.title('Balanced Classes')\nplt.show()","3d703ea6":"normalized_df.info()","5586f175":"from sklearn.model_selection import train_test_split","39d452d3":"X_train, X_test, y_train, y_test = train_test_split(normalized_df.drop('stroke',axis=1), normalized_df['stroke'], test_size=0.30, random_state=101)","e0db1b4a":"from sklearn.linear_model import LogisticRegression","9c1467da":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","bdfdd4fd":"predictions = logmodel.predict(X_test)","f5f214cb":"from sklearn.metrics import classification_report","f9ec8ebb":"print(classification_report(y_test,predictions))","5bef0f36":"from sklearn.metrics import accuracy_score","37e71657":"accuracy_score(y_test,predictions)","be3df112":"from sklearn.metrics import confusion_matrix","a33634ba":"confusion_matrix(y_test,predictions)","d4d12884":"normalized_df.info()","f27b8729":"from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\ncm = confusion_matrix(y_test, predictions, labels=logmodel.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=logmodel.classes_)\ndisp.plot()","74666f9c":"# We have an imbalanced data set here. To make it a balanced data set, we can make use of undersampling"}}