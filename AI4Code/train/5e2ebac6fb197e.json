{"cell_type":{"6346b9f6":"code","95ae8c6d":"code","8e091b88":"code","bbaa23b7":"code","45e44a05":"code","a26137e9":"code","d096cef3":"code","d21adced":"code","235e40de":"code","7586682c":"code","bb729b29":"code","58e92cb8":"code","304d72f6":"markdown","4a4ea051":"markdown","3c5cc486":"markdown","cc89d035":"markdown","4aae48a2":"markdown","b94e07c6":"markdown"},"source":{"6346b9f6":"import pathlib\nfrom pathlib import Path\nimport json\n\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport albumentations as A\nfrom tqdm import tqdm","95ae8c6d":"ROOT = Path('\/kaggle\/input\/global-wheat-detection\/')\nTRAIN_DIR = ROOT \/ 'train'\nTEST_DIR = ROOT \/ 'test'\n\nWORKING_DIR = Path('\/kaggle\/working\/')\n\nIMG_SIZE = 224","8e091b88":"def load_dataframe(csv_path: pathlib.PosixPath, image_dir: pathlib.PosixPath) -> pd.DataFrame:\n    df = pd.read_csv(csv_path)\n    \n    # Merge all bboxes of each corresponding image\n    # Format: [[x1 y1 w1 h1], [x2 y2 w2 h2], [x3 y3 w3 h3], ...]\n    df.bbox = df.bbox.apply(lambda x: ' '.join(np.array(json.loads(x), dtype=str)))\n    df.bbox = df.groupby(['image_id']).bbox.transform(lambda x: '|'.join(x))\n    df.drop_duplicates(inplace=True, ignore_index=True)\n    df.bbox = df.bbox.apply(lambda x: np.array([item.split(' ') for item in x.split('|')], dtype=np.float32).tolist())\n    \n    # Create a path to each image\n    df['image_path'] = df.image_id.apply(lambda x: str(image_dir \/ (x + '.jpg')))\n    \n    return df\n\ndef load_image(image_path: str) -> np.array:\n    image = cv2.imread(image_path, cv2.IMREAD_COLOR)\n\n    return image\n\ndef fix_out_of_range(bbox: list, max_size: int = 1024) -> list:\n    bbox[2] = min(bbox[2], max_size - bbox[0])\n    bbox[3] = min(bbox[3], max_size - bbox[1])\n\n    return bbox","bbaa23b7":"df = load_dataframe(ROOT \/ 'train.csv', TRAIN_DIR)","45e44a05":"df","a26137e9":"mkdir train","d096cef3":"transform = A.Compose(\n    [\n        A.Resize(height=IMG_SIZE, width=IMG_SIZE, p=1),\n    ], \n    p=1.0, \n    bbox_params=A.BboxParams(\n        format='coco',\n        min_area=0, \n        min_visibility=0,\n        label_fields=['labels']\n    )\n)\n\nlist_of_image_ids = []\nlist_of_bboxes = []\nlist_of_sources = []\n\nfor idx, row in tqdm(df.iterrows(), total=df.shape[0]):\n    image = load_image(row.image_path)\n    bboxes = row.bbox\n\n    # Fix \"out-of-range\" bboxes\n    bboxes = [fix_out_of_range(bbox) for bbox in bboxes]\n    \n    result = transform(image=image, bboxes=bboxes, labels=np.ones(len(bboxes)))\n    new_image = result['image']\n    new_bboxes = np.array(result['bboxes']).tolist()\n    \n    # Save new image\n    cv2.imwrite(str(WORKING_DIR \/ 'train' \/ (row.image_id + '.jpg')), new_image)\n\n    for new_bbox in new_bboxes:\n        list_of_image_ids.append(row.image_id)\n        list_of_bboxes.append(new_bbox)\n        list_of_sources.append(row.source)","d21adced":"new_data_dict = {\n    'image_id': list_of_image_ids,\n    'width': [IMG_SIZE] * len(list_of_image_ids),\n    'height': [IMG_SIZE] * len(list_of_image_ids),\n    'bbox': list_of_bboxes,\n    'source': list_of_sources\n}","235e40de":"new_df = pd.DataFrame(new_data_dict)","7586682c":"new_df.to_csv('train.csv', index=False)","bb729b29":"!cp $ROOT\/sample_submission.csv .\/\n!cp -r $ROOT\/test .\/","58e92cb8":"!zip -rm -qq global-wheat-detection.zip train test train.csv sample_submission.csv","304d72f6":"<a id=\"define_helper_functions\"><\/a>\n# Define helper-functions\n[Bach to Table of Contents](#toc)","4a4ea051":"<a id=\"resize_images_and_corresponding_bboxes\"><\/a>\n# Resize images and corresponding bboxes\n[Bach to Table of Contents](#toc)","3c5cc486":"<a id=\"toc\"><\/a>\n# Table of Contents\n1. [Import libraries](#import_libraries)\n1. [Configure hyper-parameters](#configure_hyper_parameters)\n1. [Define helper-functions](#define_helper_functions)\n1. [Resize images and corresponding bboxes](#resize_images_and_corresponding_bboxes)\n1. [Save and compress the results](#save_and_compress_the_result)","cc89d035":"<a id=\"save_and_compress_the_result\"><\/a>\n# Save and compress the results\n[Bach to Table of Contents](#toc)","4aae48a2":"<a id=\"configure_hyper_parameters\"><\/a>\n# Configure hyper-parameters\n[Bach to Table of Contents](#toc)","b94e07c6":"<a id=\"import_libraries\"><\/a>\n# Import libraries\n[Bach to Table of Contents](#toc)"}}