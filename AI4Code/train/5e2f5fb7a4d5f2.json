{"cell_type":{"248564d6":"code","befddf42":"code","4e63dd83":"code","abcb6442":"code","990ac8d0":"code","5e89bf53":"code","7397c94b":"code","4b195a22":"code","5a8a253d":"code","f72a2bc1":"code","b3575008":"code","b762c4cc":"code","b45e535a":"code","bdf14757":"code","d495b542":"code","f1e81499":"code","0b7f5bd2":"code","0b0b6890":"code","c98eba36":"code","c1b7359f":"code","75dbd19c":"code","c44ac0b7":"code","4861d0ce":"code","96ec54be":"code","45b96637":"code","3067321b":"code","7ee74565":"code","90815799":"code","8078fb5a":"code","2bdc797c":"code","b34a9c5a":"code","26be1b9d":"markdown","1a632043":"markdown","ae872d81":"markdown","ab0db4e9":"markdown","f54b5b1d":"markdown","cdc21497":"markdown","4f03d727":"markdown","4a8f4402":"markdown","bed3103b":"markdown","c37727cc":"markdown","a818e5ff":"markdown","19d04130":"markdown","5563243b":"markdown","e8b2eb5f":"markdown","6830c441":"markdown","ec4f13ab":"markdown","97a29137":"markdown","ba815e77":"markdown","f169526b":"markdown","7996a46a":"markdown","acba3cd8":"markdown","0fcbab05":"markdown","ee116048":"markdown","d21d8f08":"markdown","d15e32fd":"markdown","b2430b2f":"markdown","7d7b16b7":"markdown","ac832899":"markdown"},"source":{"248564d6":"# Data and arrays handling\nimport numpy as np\nimport pandas as pd\n\n# Plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Interactive plotting\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\n# Inline plots\n%matplotlib inline\n\n# Ignore warns\nimport warnings\nwarnings.filterwarnings('ignore')","befddf42":"%%time\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","4e63dd83":"train.head(3).T","abcb6442":"train.info()","990ac8d0":"plt.figure(figsize=(8,6))\nsns.distplot(train['assists'], kde=False)\nplt.show()","5e89bf53":"assist_df = train[['assists', 'winPlacePerc']]\nassist_df['assists'] = assist_df['assists'].apply(lambda x: 'zero' if x == 0 else '1 or more')","7397c94b":"assist_df['assists'].value_counts(normalize=True)","4b195a22":"plt.figure(figsize=(8,7))\nsns.boxplot(x='assists', y='winPlacePerc', data=assist_df)\nplt.title('Zero assists vs. one or more assists')\nplt.show()","5a8a253d":"plt.figure(figsize=(8,6))\nsns.distplot(train['boosts'], kde=False)\nplt.show()","f72a2bc1":"boosts_df = train[['boosts', 'winPlacePerc']]\nboosts_df['boosts'] = boosts_df['boosts'].apply(lambda x: 'zero' if x == 0 else '1 or more')\nboosts_df['boosts'].value_counts()","b3575008":"plt.figure(figsize=(8,7))\nsns.boxplot(x='boosts', y='winPlacePerc', data=boosts_df, order=['zero', '1 or more'])\nplt.show()","b762c4cc":"attrs_for_boxplots = ['damageDealt', 'DBNOs',\n                       'headshotKills', 'heals', 'kills',\n                       'killStreaks', 'longestKill', 'revives',\n                       'rideDistance', 'roadKills', 'swimDistance', 'teamKills',\n                       'vehicleDestroys', 'walkDistance', 'weaponsAcquired']\n\nother_attr = ['killPlace', 'killPoints', 'maxPlace', 'winPoints', 'numGroups']\n\ntarget = 'winPlacePerc'","b45e535a":"%%time\n\n# Number of columns in our big picture\ncolumns = 2\n\n# Number of rows\nrows = len(attrs_for_boxplots)\n\n# Position index\nplot_position_in_grid = 1\n\n# Iterate through all attributes\nfor attr in attrs_for_boxplots:\n    \n    # Set figure size\n    plt.figure(figsize=(12, 4 * rows))\n    \n    # fix the subplot position\n    # plot the distribution\n    plt.subplot(rows, columns, plot_position_in_grid)\n    sns.distplot(train[attr], kde=False)\n    \n    # Create compare df\n    temp_df = train[[attr, target]]\n    temp_df[attr] = temp_df[attr].apply(lambda x: 'zero' if x == 0 else 'more')\n\n    # fix the subplot position\n    # plot the boxplot\n    plt.subplot(rows, columns, plot_position_in_grid+1)\n    sns.boxplot(x=attr, y=target, data=temp_df, order=['zero', 'more'])\n\n    plot_position_in_grid += 2","bdf14757":"%%time\ncorr_matrix = train.corr()\n\nplt.figure(figsize=(24,23))\nsns.set(font_scale=1.3)\nsns.heatmap(corr_matrix, annot=True, fmt='.1f')\nplt.show()","d495b542":"corr_with_target = train.drop(['Id', 'matchId', 'groupId', 'winPlacePerc'], 1).corrwith(train['winPlacePerc'])","f1e81499":"# Set our dots\ntrace0 = go.Scatter(\n    x = corr_with_target.index,\n    y = corr_with_target.values,\n    name = 'corrs',\n    mode='markers',\n    marker = {\n        'size' : 20,\n        'color' : corr_with_target.values,\n        'colorscale' : 'Jet',\n        'showscale' : True,\n        'symbol' : 202,\n        'opacity' : .76\n    }\n)\n\n# Create data array and layout\ndata = [trace0]\nlayout = {'title': 'Correlation between winPlacePerc and other attributes',\n          'yaxis' : {'title' : 'winPlacePerc'},\n          'xaxis' : {'tickangle' : 45}}\n\n# Display it\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","0b7f5bd2":"plt.figure(figsize=(8,6))\nplt.scatter(train['killPlace'], train['damageDealt'], alpha=.8, c='orange')\nplt.xlabel('killPlace')\nplt.ylabel('damageDealth')\nplt.title('killPlace vs damageDealt scatter plot')\nplt.show()","0b0b6890":"plt.figure(figsize=(8,6))\nplt.scatter(train['heals'], train['boosts'], alpha=.8, c='green')\nplt.xlabel('heals')\nplt.ylabel('boosts')\nplt.title('Heals vs boots scatter plot')\nplt.show()","c98eba36":"def get_subplot_row_columns(df, corr_threshold):\n    corr = df.corr()\n    n = corr[(corr > corr_threshold) & (corr != 1)].dropna(axis=0, how='all') \\\n                                           .dropna(axis=1, how='all') \\\n                                           .notnull().sum().sum()\n    cols = 3\n\n    return cols, int(np.ceil(n \/ cols))","c1b7359f":"%%time\n# It takes some time to display all graphs\n\n# Feel free to play with this value\nthreshold = .5\n\n# All attributes\nattrs = train.columns.values\n\n# Array for pairs already checked\nseen_pairs = []\n\n# Params for subplotting\nsubplot_number = 0\ncols, rows = get_subplot_row_columns(train, threshold)\n\nfig, axs = plt.subplots(rows, cols, figsize=(18, 5 * rows))\nplt.subplots_adjust(wspace=0.45, hspace=0.35)\naxs = axs.ravel()\n\nprint(f'{rows} x {cols}')\n\nfor first_attr in attrs:\n    for second_attr in attrs:       \n        # Skip same\n        if first_attr == second_attr:\n            continue\n        \n        # Skip swap attributes\n        if (first_attr, second_attr) in seen_pairs:\n            continue\n        else:\n            seen_pairs.append((second_attr, first_attr))\n        \n        # Check threshold\n        current_corr = train[[first_attr]].corrwith(train[second_attr])[first_attr]\n        \n        if current_corr > threshold:  \n            print(f'{subplot_number} - {first_attr} x {second_attr}')\n            axs[subplot_number].set_title(f'{first_attr} vs {second_attr}\\n(correlation = {current_corr})')\n            axs[subplot_number].scatter(train[first_attr], train[second_attr], alpha=.8, c='green')\n            axs[subplot_number].set_xlabel(first_attr)\n            axs[subplot_number].set_ylabel(second_attr)\n            \n            \n            subplot_number += 1\n\n            \nfor i in range(subplot_number, cols*rows):\n    fig.delaxes(axs[i])\n    \nprint(f'{subplot_number} graphs plotted')","75dbd19c":"plt.figure(figsize=(8,6))\nsns.lineplot(x='vehicleDestroys', y='winPlacePerc',\n             data=train)\nplt.title('vehicleDestroys impact on winPlacePerc')","c44ac0b7":"solos = train[train['numGroups']>50]\nduos = train[(train['numGroups']>25) & (train['numGroups']<=50)]\nsquads = train[train['numGroups']<=25]\ngames_count = train.shape[0]\n\n\ngame_types_df = pd.DataFrame({'Games count' : [solos.shape[0],\n                                         duos.shape[0],\n                                         squads.shape[0]],\n                              'Normalized' : [solos.shape[0] \/ games_count,\n                                         duos.shape[0] \/ games_count,\n                                         squads.shape[0] \/ games_count]},\n                              index=['solos', 'duos', 'squads'])","4861d0ce":"game_types_df","96ec54be":"plt.figure(figsize=(18,8))\n\nsns.pointplot(x='kills', y='winPlacePerc', data=solos, color='green')\nsns.pointplot(x='kills', y='winPlacePerc', data=duos, color='red')\nsns.pointplot(x='kills', y='winPlacePerc', data=squads, color='black')\n\nplt.text(14,0.5,'Solos',color='green',fontsize = 17,style = 'italic')\nplt.text(14,0.45,'Duos',color='red',fontsize = 17,style = 'italic')\nplt.text(14,0.40,'Squads',color='black',fontsize = 17,style = 'italic')\n\nplt.title('Kills in different play modes impact pn winPlacePerc')\n\nplt.grid()","45b96637":"train['playersJoined'] = train.groupby('matchId')['matchId'].transform('count')","3067321b":"data = train.copy()\ndata = data[data['playersJoined']>49]\nplt.figure(figsize=(18,9))\nsns.countplot(data['playersJoined'])\nplt.title(\"Players Joined\",fontsize=15)\nplt.show()","7ee74565":"train['killsNorm'] = train['kills']*((100-train['playersJoined'])\/100 + 1)\ntrain['damageDealtNorm'] = train['damageDealt']*((100-train['playersJoined'])\/100 + 1)\n\ntrain[['playersJoined', 'kills', 'killsNorm', 'damageDealt', 'damageDealtNorm']].head(4)","90815799":"train['healsAndBoosts'] = train['heals']+train['boosts']\ntrain['totalDistance'] = train['walkDistance']+train['rideDistance']+train['swimDistance']","8078fb5a":"train['boostsPerWalkDistance'] = train['boosts']\/(train['walkDistance']+1) #The +1 is to avoid infinity, because there are entries where boosts>0 and walkDistance=0. Strange.\ntrain['boostsPerWalkDistance'].fillna(0, inplace=True)\ntrain['healsPerWalkDistance'] = train['heals']\/(train['walkDistance']+1) #The +1 is to avoid infinity, because there are entries where heals>0 and walkDistance=0. Strange.\ntrain['healsPerWalkDistance'].fillna(0, inplace=True)\ntrain['healsAndBoostsPerWalkDistance'] = train['healsAndBoosts']\/(train['walkDistance']+1) #The +1 is to avoid infinity.\ntrain['healsAndBoostsPerWalkDistance'].fillna(0, inplace=True)\ntrain[['walkDistance', 'boosts', 'boostsPerWalkDistance' ,'heals',  'healsPerWalkDistance', 'healsAndBoosts', 'healsAndBoostsPerWalkDistance']][40:45]","2bdc797c":"train['killsPerWalkDistance'] = train['kills']\/(train['walkDistance']+1) #The +1 is to avoid infinity, because there are entries where kills>0 and walkDistance=0. Strange.\ntrain['killsPerWalkDistance'].fillna(0, inplace=True)\ntrain[['kills', 'walkDistance', 'rideDistance', 'killsPerWalkDistance', 'winPlacePerc']].sort_values(by='killsPerWalkDistance').tail(10)","b34a9c5a":"train['team'] = [1 if i>50 else 2 if (i>25 & i<=50) else 4 for i in train['numGroups']]","26be1b9d":"Now we will try to find out difference between people end with 0 assist and people end with 1 or more","1a632043":"### 2.2 Correlations\n\n#### Correlation matrix","ae872d81":"#### Assists\n*Description:* Number of enemy players this player damaged that were killed by teammates.  \n\nLet's look though assist distribution","ab0db4e9":"# PUBG Finish Placement Prediction\n\n## Content\n- Overview the data\n    - Load the data\n    - Columns dtypes\n    \n    \n- EDA\n    - Distributions and Box plots\n    - Correlations\n    - Other analysis\n        \n\n- Feature engineering\n    - Count players in each game\n    - Normalize attributes\n    - Sum boosts and distance\n    - Boosts per distance\n    - Kills per distance\n    - Teams\n    ","f54b5b1d":"#### Team play","cdc21497":"### 3.6 Teams","4f03d727":"#### Loop it\nWe can set the threshold for significant correlation and create scatter plots in loop","4a8f4402":"So boosted players are always winning!","bed3103b":"#### 2.3 Other analysis\nThanks Dimitrios Effrosynidis for his great kernel. I take some analysis and feature engineering from his work.  \n\nCheck it out: [Eda is fun!](https:\/\/www.kaggle.com\/deffro\/eda-is-fun)","c37727cc":"#### Another attributes\n\nLet's deal with other attrbutes the same way.","a818e5ff":"- Heals vs boosts","19d04130":"### 3.2 Normalize attributes","5563243b":"## 3. Feature Engineering\nAlso from Dimitrios Effrosynidis [kernel](https:\/\/www.kaggle.com\/deffro\/eda-is-fun).","e8b2eb5f":"## 1. Overview the data\n### 1.1 Load data","6830c441":"- DBNOs vs damageDealth  \nIt's obvious why them are correlated. Maybe it will be better to keep only one of this attributes. So we will see it later","ec4f13ab":"#### Correlations with target","97a29137":"#### Correlations within attributes (no target)\n\nAs we can see at heatmap - there is lot of attributes higly correlated with each-other. Let's find out who are they.","ba815e77":"We can see the pattern!","f169526b":"### 3.4 Boosts per distance","7996a46a":"#### Boosts\n*Description:* Number of boost items used.","acba3cd8":"## 2. EDA\nSo, our target column is `winPlacePerc`. Let's go through all the columns and try to find out any interconnections.\n\n### 2.1 Distributions and Box plots\nIn this step we will plot the distribution of each attribute. After that we will make some box plots to see the impact of different features on winPlacePerc - our target.","0fcbab05":"#### Vechicle destroy vs winPlacePerc","ee116048":"### 3.5 Kills per distance","d21d8f08":"- killPlace vs damageDealt","d15e32fd":"### 3.3 Sum boosts and distance","b2430b2f":"### 1.2 Columns dtypes","7d7b16b7":"#### Team kills","ac832899":"### 3.1 Count players in each game"}}