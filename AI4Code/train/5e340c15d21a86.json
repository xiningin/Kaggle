{"cell_type":{"b906e18d":"code","62ef49a8":"code","ab1556ce":"code","bd79f558":"code","98ca8213":"code","1291ef63":"code","854812c9":"code","d3d8d952":"code","d290e4c6":"code","21588599":"code","76f986f0":"code","9943cd26":"code","be58f908":"code","3cee2b5e":"code","b8c6959b":"code","03fcdc50":"code","59dd4083":"code","0697e10e":"code","d6c41425":"code","b604c0be":"code","e7560943":"code","8c62e057":"code","79747675":"code","8daaca64":"code","5a2ac7f3":"code","a160bdab":"code","b88e754c":"code","8aaf9c8f":"code","77035173":"code","6247f2a1":"code","66aed8a7":"code","6380ae59":"code","6e47e61f":"code","c57c28e9":"code","3240ca53":"code","596ed58a":"code","8ad475d4":"code","1455fda5":"code","2204acf8":"code","bc15ee34":"code","b2c6eb58":"code","154f2364":"code","8f5377bf":"code","dddf751c":"code","91aaf869":"code","63d38d23":"code","d25f61ce":"code","5407c501":"code","9213276d":"code","a99ffae6":"code","0e05dbab":"code","8c6f1eee":"code","35807b8e":"code","a9007c45":"code","b30e0072":"code","61788b7f":"code","f7e7fa82":"code","85367a57":"code","7f1364ea":"code","a385248a":"code","bb8efc5e":"code","e94476bd":"code","6bd26ff7":"code","2f2ab1ea":"code","f2054f95":"code","b4117d21":"code","d56f9e3e":"code","a8d04c69":"code","9ea5b804":"code","fd4d36fe":"code","7b57b7c0":"code","5f2727ce":"code","5a67c05a":"code","9bde2d29":"code","f61a0849":"code","1e78e8b2":"code","75938f38":"code","fe7fd98a":"code","19fe00f2":"code","031aa8bc":"code","b8fe3ed1":"code","7d68ef03":"code","7d85285a":"code","08611c03":"code","82b3e70c":"code","7c75ab28":"code","e3c84ee3":"code","9009eea3":"code","aba0bbcd":"code","9cd7fa77":"code","539e38fc":"code","17690492":"code","121de2e7":"code","d28584c4":"code","807a9345":"code","9831cff6":"code","328c45a8":"code","3dba9e28":"code","0fb5cbe9":"code","4380ad1b":"markdown","1afcddad":"markdown","3bae28c7":"markdown","ecbedd94":"markdown","4e1107e0":"markdown","8347ed05":"markdown","921d2473":"markdown","c339c7c5":"markdown","330bdec7":"markdown","90bc632d":"markdown","d26ee815":"markdown","38a4a053":"markdown"},"source":{"b906e18d":"# Loan Eligibility model prediction\n## Kumar Gaurav, Msc (Data Science ) student","62ef49a8":"!python --version # version of python","ab1556ce":"import sklearn\nsklearn.__version__","bd79f558":"import pandas\npandas.__version__","98ca8213":"import pandas as pd\nimport numpy as np\n","1291ef63":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","854812c9":"train_loan = pd.read_csv('..\/input\/loan-eligible-dataset\/loan-train.csv')","d3d8d952":"train_loan.head()","d290e4c6":"test_loan = pd.read_csv('..\/input\/loan-eligible-dataset\/loan-test.csv')","21588599":"test_loan.head()","76f986f0":"train_loan.shape","9943cd26":"test_loan.shape","be58f908":"train_loan.columns","3cee2b5e":"train_loan.info()","b8c6959b":"train_loan.describe()","03fcdc50":"test_loan.describe()","59dd4083":"import missingno as msno","0697e10e":"msno.matrix(train_loan)","d6c41425":"msno.matrix(test_loan)","b604c0be":"train_loan.corr()","e7560943":"corr_train = train_loan.corr()","8c62e057":"import seaborn as sns","79747675":"sns.heatmap(corr_train)","8daaca64":"col_names = train_loan.columns","5a2ac7f3":"count = 0 # categorial features count\nfor i in col_names: \n    if train_loan[i].dtype == 'object' :\n        count = count + 1\nprint(count)","a160bdab":"print(train_loan['Loan_ID'].dtype)","b88e754c":"print(train_loan['ApplicantIncome'].dtype)","8aaf9c8f":"msno.bar(train_loan)","77035173":"train_loan.info()","6247f2a1":"train_loan.notnull().sum()","66aed8a7":"train_loan['Gender'].isna().sum()","6380ae59":"test_loan.notnull().count()","6e47e61f":"msno.matrix(train_loan)","c57c28e9":"train_loan.isnull().any()","3240ca53":"train_loan['Gender'].isnull().any()","596ed58a":"train_loan['Gender'].isnull().sum()","8ad475d4":"train_loan.isnull().sum()","1455fda5":"test_loan.isnull().sum()","2204acf8":"count = 0 # Null columns count \nfor i in col_names: \n    if train_loan[i].isnull().any() == True :\n        count = count + 1\nprint(count)","bc15ee34":"def null_feature(data):\n    count= 0\n    col_names = data.columns\n    for i in col_names:\n        if data[i].isnull().any() == True :\n            count = count + 1\n    print(count)\ndata = train_loan\nnull_feature(data)","b2c6eb58":"null_feature(test_loan)","154f2364":"def fill_null(data):\n    col_names = data.columns\n    for i in col_names:\n        if data[i].isnull().any() == True :\n            data[i] = data[i].fillna(method = 'ffill')\n    print(data.isnull().sum())","8f5377bf":"fill_null(train_loan)","dddf751c":"train_loan.isnull().sum()","91aaf869":"train_loan['LoanAmount'].fillna(train_loan['LoanAmount'].mean(),inplace =True)","63d38d23":"train_loan.isnull().sum()","d25f61ce":"null_feature(train_loan)","5407c501":"train_loan.isnull().sum()","9213276d":"fill_null(test_loan)","a99ffae6":"msno.matrix(test_loan)","0e05dbab":"msno.matrix(train_loan)","8c6f1eee":"msno.bar(train_loan)","35807b8e":"msno.bar(test_loan)","a9007c45":"train_loan['Loan_Status'].unique","b30e0072":"train_loan['Loan_Status'] = np.where(train_loan['Loan_Status']=='Y',1,0)","61788b7f":"train_loan['Loan_Status']","f7e7fa82":"train_loan.Gender = train_loan.Gender.replace({\"Male\":1,\"Female\":0})","85367a57":"train_loan.Gender","7f1364ea":"train_loan.Married = train_loan.Married.replace({\"Yes\": 1, \"No\" : 0})\ntest_loan.Married = test_loan.Married.replace({\"Yes\": 1, \"No\" : 0})\n\ntrain_loan.Self_Employed = train_loan.Self_Employed.replace({\"Yes\": 1, \"No\" : 0})\ntest_loan.Self_Employed = test_loan.Self_Employed.replace({\"Yes\": 1, \"No\" : 0})\n\ntest_loan.Gender = test_loan.Gender.replace({\"Male\":1,\"Female\":0})","a385248a":"test_loan.head()","bb8efc5e":"train_loan.head()","e94476bd":"test_loan[\"Gender\"].unique()","6bd26ff7":"train_loan[\"Gender\"].unique()","2f2ab1ea":"train_loan.shape,test_loan.shape","f2054f95":"from sklearn.preprocessing import LabelEncoder\ncol_feature = ['Property_Area','Education', 'Dependents']\nle = LabelEncoder()\nfor col in col_feature:\n    train_loan[col] = le.fit_transform(train_loan[col])\n    test_loan[col] = le.fit_transform(test_loan[col])","b4117d21":"train_loan.head()","d56f9e3e":"test_loan.head()","a8d04c69":"new_train_corr = train_loan.corr()\nnew_train_corr","9ea5b804":"new_test_corr = test_loan.corr()\nnew_test_corr","fd4d36fe":"sns.heatmap(new_train_corr)","7b57b7c0":"sns.heatmap(new_test_corr)","5f2727ce":"import matplotlib.pyplot as plt\n%matplotlib inline","5a67c05a":"sns.set_style('dark')\ntrain_loan.plot(figsize= (18,8))\nplt.show()","9bde2d29":"plt.figure(figsize=(18, 6))\nplt.subplot(1, 2, 1)\n\n\ntrain_loan['ApplicantIncome'].hist(bins=10)\nplt.title(\"Loan Application Amount \")\n\nplt.subplot(1, 2, 2)\nplt.grid()\nplt.hist(np.log(train_loan['LoanAmount']))\nplt.title(\"Log Loan Application Amount \")\n\nplt.show()","f61a0849":"plt.figure(figsize=(18, 6))\nplt.title(\"Relation Between Applicatoin Income vs Loan Amount \")\n\nplt.grid()\nplt.scatter(train_loan['ApplicantIncome'] , train_loan['LoanAmount'], c='k', marker='x')\nplt.xlabel(\"Applicant Income\")\nplt.ylabel(\"Loan Amount\")\nplt.show()","1e78e8b2":"plt.figure(figsize=(12, 6))\nplt.plot(train_loan['Loan_Status'], train_loan['LoanAmount'])\nplt.title(\"Loan Application Amount \")\nplt.show()","75938f38":"plt.figure(figsize=(12,8))\nsns.heatmap(new_train_corr.corr(), cmap='coolwarm', annot=True, fmt='.1f', linewidths=.1)\nplt.show()","fe7fd98a":"from sklearn.linear_model import LogisticRegression","19fe00f2":"from sklearn.metrics import accuracy_score,classification_report","031aa8bc":"logistic_model = LogisticRegression()","b8fe3ed1":"train_features = ['Credit_History', 'Education', 'Gender']\n\nx_train = train_loan[train_features].values\ny_train = train_loan['Loan_Status'].values\n\nx_test = test_loan[train_features].values\n","7d68ef03":"x_train.shape","7d85285a":"y_train.shape,x_test.shape","08611c03":"logistic_model.fit(x_train,y_train)","82b3e70c":"predicted = logistic_model.predict(x_test)","7c75ab28":"score = logistic_model.score(x_train,y_train)\nscore","e3c84ee3":"logistic_model.coef_","9009eea3":"logistic_model.intercept_","aba0bbcd":"score = logistic_model.score(x_train, y_train)\nprint('accuracy_score overall :', score)\nprint('accuracy_score percent :', round(score*100,2))","9cd7fa77":"x1_train = train_loan.drop(['Loan_Status'],axis = 1)","539e38fc":"x1_train.shape","17690492":"x1_train.head()","121de2e7":"y1_train = train_loan['Loan_Status']","d28584c4":"y1_train.shape","807a9345":"test_loan.shape","9831cff6":"from sklearn.ensemble import RandomForestRegressor","328c45a8":"rfc = RandomForestRegressor()","3dba9e28":"rfc.fit(x_train,y_train)","0fb5cbe9":"rfc.score(x_train,y_train)","4380ad1b":"# correlation through Heatmap","1afcddad":"### Fill all null values","3bae28c7":"## Dataset downloaded from kaggle ","ecbedd94":"## tried Random forest but got poor accuracy","4e1107e0":"## model intercept","8347ed05":"# Fill null values","921d2473":"## EDA and final correlation","c339c7c5":"## Logistic Model apply","330bdec7":"## Missing values Visualization","90bc632d":"## Score","d26ee815":"### correlation visualization","38a4a053":"# Model accuracy"}}