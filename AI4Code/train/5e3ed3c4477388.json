{"cell_type":{"9861c183":"code","e6aa7cb8":"code","0ef3540f":"code","92f9dbf5":"code","898e1cd8":"code","565ccefc":"code","981e7097":"code","98f3324f":"code","4407bf4a":"code","39295183":"code","e7dfc870":"code","51373170":"code","30e13c84":"code","871f7ade":"code","dbf1ad5f":"code","a7daa31c":"code","040819a2":"code","572999dd":"code","9388b647":"code","01f167aa":"code","c230fed6":"code","9a42c329":"markdown","a2dd7be2":"markdown","6bcf2e75":"markdown","c26da5d6":"markdown"},"source":{"9861c183":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e6aa7cb8":"# reading data\n\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","0ef3540f":"train_data.head()","92f9dbf5":"# checking for nan values\/ missing values\ntrain_data.isnull().sum()","898e1cd8":"test_data.isnull().sum()","565ccefc":"# filling nan values with mean values for 'AGE'\n\ntrain_data['Age'].fillna(int(train_data['Age'].mean()), inplace=True)\ntest_data['Age'].fillna(int(test_data['Age'].mean()), inplace=True)\n\n# for column['Embarked'] --> filling wit hmost frequent values\ntrain_data['Embarked'].fillna(train_data['Embarked'].value_counts().index[0], inplace=True)","981e7097":"# clearing the data --> removing columns with NAN values and strings as values\n\ntrain_data.drop(['Name', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)\ntest_data.drop(['Name', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)","98f3324f":"# rearranging columns of train_data\n\ncols = train_data.columns.tolist()\ncols = cols[:1] + cols[2:]+ cols[1:2]\ntrain_data = train_data[cols]","4407bf4a":"#converting to numerical data\n\nfrom sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder()\n\ntest_data.iloc[:, 2] = lb.fit_transform(test_data.iloc[:,2])\ntrain_data.iloc[:, 2] = lb.fit_transform(train_data.iloc[:,2])\n\ntrain_data.iloc[:, -2] = lb.fit_transform(train_data.iloc[:,-2])\ntest_data.iloc[:, -1] = lb.fit_transform(test_data.iloc[:,-1])","39295183":"train_data   # viewing changes","e7dfc870":"test_data   #viewing changes","51373170":"# Analysing Data\n\nsns.heatmap(train_data.corr(), annot=True, cmap='Greens')\nplt.show()","30e13c84":"# splitting data\n\nX_train = train_data.iloc[:, :7]  # input features\nY_train = train_data.iloc[:, 7]  #output","871f7ade":"# normalising data\n\nfrom sklearn.preprocessing import StandardScaler\n\nsdc = StandardScaler()\nX_train = sdc.fit_transform(X_train)\nX_test = sdc.fit_transform(test_data)","dbf1ad5f":"#setting architecture\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras import regularizers\n\n#setting layers\n\n# dropout selected via trial and error between values [0.2-0.5] to maximise accuracy on kaggle dataset  \n# regularizers used to avoid overfitting\nmodel = Sequential([\n    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n    Dropout(0.3),\n    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n    Dropout(0.3),\n    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n    Dropout(0.3),\n    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n    Dropout(0.3),\n    Dense(1, activation='sigmoid', kernel_regularizer=regularizers.l2(0.01)),\n])\n\n# setting metrics\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","a7daa31c":"# providing training data to model            \nmodel.fit(X_train, Y_train, batch_size=30, epochs=100)","040819a2":"model.evaluate(X_train, Y_train)","572999dd":"prediction = model.predict(X_test).tolist()","9388b647":"arr = []\nfor val in prediction:\n    if val[0] >= 0.45:\n        arr.append(1)\n    else:\n        arr.append(0)","01f167aa":"# final result\nprint(arr)","c230fed6":"# submitting on kaggle --> EXTRAS\n\nsubmission = pd.DataFrame({'PassengerId':test_data['PassengerId'],'Survived':arr})\nsubmission\n\n# saving file\nfilename = 'predictTitanic.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","9a42c329":"# Neural Network - Training and Evaluation","a2dd7be2":"# Data preparation","6bcf2e75":"# Prediction for Dataset","c26da5d6":"# Submission"}}