{"cell_type":{"cdcb11dd":"code","1b863fcb":"code","04311725":"code","545ca1b6":"code","02886e15":"code","72bace5b":"code","3c17406a":"code","c6d9e0bc":"code","24f8b254":"code","53ca10c1":"code","b2658885":"code","1ed0f543":"code","8338f01d":"code","e0b1eb66":"code","d5efc17a":"code","625121af":"code","7c707c6a":"code","a5afb843":"code","465b8176":"code","016cbde6":"code","15a2bad0":"code","67b43647":"code","2b4985aa":"code","3d29450a":"code","ce3f1956":"code","a42c211c":"code","b64e48f1":"code","e24a8ece":"code","7850137b":"code","1c2e71c8":"code","6f5b928a":"code","fc995c57":"code","e5f1f470":"code","c5e8b4f1":"code","407e6871":"code","1e04ab81":"code","79528c69":"code","f3ad7489":"code","f0101c68":"code","324c3459":"code","79a6c71a":"code","1e66090f":"code","7478d458":"code","d2132c8f":"code","2b828a56":"code","9e0916ce":"code","de96b2cf":"code","53defef5":"code","68dffb79":"code","968542a7":"code","b1daf708":"code","b6f05886":"code","4a095bfd":"code","8063db05":"code","2c22053b":"code","3968856b":"code","24d07b16":"code","7f8b5499":"code","227800a7":"code","78b2ec50":"code","013c9d82":"code","5cc911f9":"code","0d4f1c4d":"code","5f413243":"code","93e9661f":"code","c6c521cf":"code","2f5be600":"code","4e7051d2":"code","324d39c1":"code","342c611b":"code","9f878283":"code","71d61ebb":"code","946924d0":"code","1c38bd33":"markdown","3bebb4a6":"markdown","87b8f091":"markdown","0798e876":"markdown","8d11482e":"markdown","902490cd":"markdown","e46a0184":"markdown","26cb03dc":"markdown","ee9398d7":"markdown","398df881":"markdown","1bb44587":"markdown","f35384e3":"markdown","1ce326a9":"markdown","9f8a8fb4":"markdown","ef518c99":"markdown","04d78e00":"markdown","bbc9b651":"markdown","96b23752":"markdown","a0e78902":"markdown","148e7302":"markdown","68f7c7e4":"markdown","119fe390":"markdown","8ee1376f":"markdown","336000a1":"markdown","5a0f6848":"markdown","fb6100f2":"markdown","d0bdd8fb":"markdown","a7d397fe":"markdown","f853d867":"markdown","31b9bc3e":"markdown","deb9509c":"markdown","8718a666":"markdown","bd8834d2":"markdown","5dec116b":"markdown","939cf3d7":"markdown","c556b03c":"markdown","1192babe":"markdown","8d271389":"markdown","11637e56":"markdown","a86c8d86":"markdown","564bd932":"markdown","7acb4bea":"markdown","d546237e":"markdown","ba716b47":"markdown","aef1900e":"markdown","b61bf8a7":"markdown","1a24502f":"markdown","d0f0bff5":"markdown","bc94df8c":"markdown","cdb3efad":"markdown","bea6f836":"markdown","0b7af0f6":"markdown","338f4f55":"markdown","85c24b20":"markdown","58d2b731":"markdown","4ad5a51f":"markdown","5fd00a77":"markdown","1247da67":"markdown","1fd9b787":"markdown","37d85e39":"markdown","af544690":"markdown","50fe3a50":"markdown","f2383582":"markdown","bd3513fb":"markdown","c6f53a00":"markdown","016d385c":"markdown","f5166498":"markdown","e026675f":"markdown","7c37775c":"markdown","722fa142":"markdown","7478d5c2":"markdown","3c11bb9a":"markdown","342b0907":"markdown","bda0c300":"markdown","c3c81a44":"markdown","55018ac6":"markdown"},"source":{"cdcb11dd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom pylab import rcParams","1b863fcb":"%matplotlib inline\nwarnings.filterwarnings('ignore')","04311725":"plt.style.use('ggplot')","545ca1b6":"df = pd.read_csv(\"..\/input\/googleplaystore.csv\")","02886e15":"df.head()","72bace5b":"print(\"The shape of the data is \",df.shape)","3c17406a":"df.describe().T","c6d9e0bc":"plt.figure(figsize=(8,6,))\nsns.heatmap(df.isnull(), cbar = False)","24f8b254":"total = df.isnull().sum().sort_values(ascending  = False)\npercent = (df.isnull().sum()\/df.count()).sort_values(ascending = False)\ntemp = pd.concat([total, percent], axis = 1, keys = ['total','percentage'])\ntemp.head()","53ca10c1":"#Dropping observations having missing values in any column\ndf.dropna(how = 'any', inplace = True)","b2658885":"print(\"Length of Unique App names = \", len(df['App'].unique()))\nprint(\"Legth of the Total App name = \", df.shape[0])\nprint(\"Duplicate Apps = \",df.shape[0]- len(df['App'].unique()))","1ed0f543":"df[df['App'] == 'Coloring book moana']","8338f01d":"df.drop_duplicates(subset = 'App', keep = 'first', inplace = True)","e0b1eb66":"temp = df['Category'].value_counts().reset_index() #A temporary dataframe for this plot\n\nplt.figure(figsize=(12,12))\nax = plt.subplot(111)\nplt.pie(x = temp['Category'], labels= temp['index'],autopct= '%1.1f%%')\nplt.legend()\nax.legend(bbox_to_anchor=(1.4, 1))\nplt.show()","d5efc17a":"plt.figure(figsize=(10,7))\nsns.distplot(df['Rating'])\nplt.legend(['Rating'])\nplt.show()","625121af":"print(\"The average rating in the appstore is \",np.average(df['Rating']))","7c707c6a":"top = np.array(df.Category.value_counts().reset_index()['index'])\nprint(\"Most Occuring Categories\\n\",top[:6])","a5afb843":"plt.figure(figsize= (15,10))\nplt.suptitle(\"Ratings of Different Categories\",fontsize = 22)\n\nplt.subplot(2,3,1)\nsns.kdeplot(df[df['Category'] == 'FAMILY']['Rating'], shade = True)\nplt.title('Rating of FAMILY Apps')\n\nplt.subplot(2,3,2)\nsns.kdeplot(df[df['Category'] == 'GAME']['Rating'], shade = True)\nplt.title('Rating of GAME Apps')\n\n\nplt.subplot(2,3,3)\nsns.kdeplot(df[df['Category'] == 'TOOLS']['Rating'], shade = True)\nplt.title('Rating of TOOLS Apps')\n\n\nplt.subplot(2,3,4)\nsns.kdeplot(df[df['Category'] == 'FINANCE']['Rating'], shade = True)\nplt.title('Rating of FINANCE Apps')\n\n\nplt.subplot(2,3,5)\nsns.kdeplot(df[df['Category'] == 'LIFESTYLE']['Rating'], shade = True)\nplt.title('Rating of LIFESTYLE Apps')\n\n\nplt.subplot(2,3,6)\nsns.kdeplot(df[df['Category'] == 'PRODUCTIVITY']['Rating'], shade = True)\nplt.title('Rating of PRODUCTIVITY Apps')\n\nplt.show()","465b8176":"import scipy.stats as stats\nhtest = stats.f_oneway(df[df['Category'] == 'FAMILY']['Rating'],\n              df[df['Category'] == 'GAME']['Rating'],\n              df[df['Category'] == 'TOOLS']['Rating'],\n              df[df['Category'] == 'FINANCE']['Rating'],\n              df[df['Category'] == 'PRODUCTIVITY']['Rating'],\n              df[df['Category'] == 'LIFESTYLE']['Rating'],\n              )\nprint(\"The P value of the test is \",htest[1])","016cbde6":"plt.figure(figsize=(18,9))\nf = sns.violinplot(x = df['Category'], y = df['Rating'], palette= 'coolwarm')\nf.set_xticklabels(f.get_xticklabels(), rotation = 90)\nplt.show()","15a2bad0":"print(df['Reviews'].head())","67b43647":"df['Reviews'] = df['Reviews'].astype(dtype = 'int')\nplt.figure(figsize=(15,8))\nsns.kdeplot(df['Reviews'], color = 'Green', shade = True)\nplt.title('Distribution of Ratings')","2b4985aa":"print(\"Number of Apps with more than 1M reviews\",df[df['Reviews'] > 1000000].shape[0])\nprint(\"\\nTop 20 apps with most reviews: \\n\",df[df['Reviews'] > 1000000].sort_values(by = 'Reviews', ascending = False).head(20)['App'])","3d29450a":"print(\"For all apps\")\nsns.jointplot(x = 'Reviews', y= 'Rating',data = df[df['Reviews']>100000], color = 'darkorange') \nplt.show()\n\nprint(\"For apps below 1M reviews\")\nsns.jointplot(x = 'Reviews', y= 'Rating',data = df[df['Reviews']<100000], color = 'darkorange') \nplt.show()","ce3f1956":"df['Installs'].dtype","a42c211c":"df['Installs'].head()","b64e48f1":"df['Installs'] = df['Installs'].apply(lambda x: x.replace(',',''))\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('+',''))\ndf['Installs'] = df['Installs'].astype(dtype = 'int')","e24a8ece":"df['Installs'].head()","7850137b":"df['Installs'].unique()","1c2e71c8":"plt.figure(figsize=(12,8))\nf = sns.countplot(df['Installs'], palette= \"viridis\" )\nf.set_xticklabels(f.get_xticklabels(), rotation = 30)\nplt.show()","6f5b928a":"sorted_values = sorted(df['Installs'].unique())\ndf['Installs Classes'] = df['Installs'].replace(sorted_values, range(0,len(sorted_values)))\ndf['Installs Classes'].head()","fc995c57":"plt.figure(figsize=(12,9))\nsns.boxplot(y = df['Rating'], x = df['Installs Classes'], palette= 'Blues')\nplt.show()","e5f1f470":"import scipy.stats as sp\n\nplt.figure(figsize=(13,13))\nplt.subplot(2,2,1)\nf = sns.kdeplot(df[df['Installs Classes'] == 5]['Rating'], shade = True, color = 'purple')\nplt.title(\"Ratings variation for apps above 5 installs\")\nf.set_xticks([1,2,3,4,5])\n\nplt.subplot(2,2,2)\nf = sns.kdeplot(df[df['Installs Classes'] == 6]['Rating'], shade = True, color = 'purple')\nplt.title(\"Ratings variation for apps above 500 installs\")\nf.set_xticks([1,2,3,4,5])\n\nplt.subplot(2,2,3)\nf = sns.kdeplot(df[df['Installs Classes'] == 17]['Rating'], shade = True, color = 'purple')\nplt.title(\"Ratings variation for apps above 500M installs\")\nf.set_xticks([1,2,3,4,5])\n\nplt.subplot(2,2,4)\nf = sns.kdeplot(df[df['Installs Classes'] == 18]['Rating'], shade = True, color = 'purple')\nplt.title(\"Ratings variation for apps above 1B installs\")\nf.set_xticks([1,2,3,4,5])\n\nplt.show()\nprint(\"Variation in Rating of installs above 100 installs \",sp.variation(df[df['Installs Classes'] == 5]['Rating']))\nprint(\"Variation in Rating of installs above 500 installs \",sp.variation(df[df['Installs Classes'] == 6]['Rating']))\nprint(\"Variation in Rating of installs above 500M installs \",sp.variation(df[df['Installs Classes'] == 17]['Rating']))\nprint(\"Variation in Rating of installs above 1B installs \",sp.variation(df[df['Installs Classes'] == 18]['Rating']))\n","c5e8b4f1":"df['Size'].head()","407e6871":"print(df['Size'].unique())","1e04ab81":"df['Size'] = df['Size'].apply(lambda x: x.replace('M', '*1000'))\ndf['Size'] = df['Size'].apply(lambda x: x.replace('k', ''))","79528c69":"df['Size'].replace('Varies with device', '-1', inplace = True)","f3ad7489":"df['Size'] = df['Size'].apply(lambda x: eval(x))","f0101c68":"df['Size'] = df['Size'].replace(-1,np.nan) #Changing the values to null then we can fill them with mean value\ndf['Size'].fillna(np.mean(df['Size']), inplace = True) ","324c3459":"plt.figure(figsize=(18,9))\nsns.distplot(df['Size'], color = 'darkred')\nplt.xlabel('Size in KBs')\nplt.xticks(list(range(0, int(max(df['Size'])), 5000)))\nplt.show()","79a6c71a":"plt.figure(figsize=(10,10))\nplt.scatter(x = df['Size'], y = df['Rating'], color = 'orange')\nplt.xlabel('Size in KBs')\nplt.ylabel('Rating')\nplt.title('Rating vs Size')\nplt.show()","1e66090f":"plt.figure(figsize= (12,12))\nsns.regplot(y = df['Size'], x = df['Installs Classes'], color = 'grey')\nplt.title('Size vs Installs')\nplt.show()","7478d458":"temp = df['Type'].value_counts().reset_index()\n\n# plt.figure(figsize=(9,9))\nrcParams['figure.figsize'] = 9,9\nplt.pie(x = temp['Type'], labels= temp['index'], autopct= '%1.1f%%', colors = ['lightblue','lightgreen'], \n        shadow= True, explode=(0.25,0), startangle= 90)\nplt.show()","d2132c8f":"df['Price'].unique()","2b828a56":"df['Price'] = df['Price'].apply(lambda x: x.replace('$',''))\ndf['Price'] = df['Price'].astype('float')","9e0916ce":"plt.figure(figsize=(10,7))\nsns.kdeplot(df[df['Type'] == 'Paid']['Price'], color = 'blue', shade = True)\nplt.xlabel('Prices of Apps')\nplt.title('Pricing Distribution of Paid Apps')\nplt.show()","de96b2cf":"paid_prices = df[df['Type'] == 'Paid']['Price']","53defef5":"sns.jointplot(y = df[df['Type'] == 'Paid']['Rating'], x = df[df['Type'] == 'Paid']['Price'], color= 'teal')\nplt.show()","68dffb79":"df.loc[df['Price'] == 0,'Price_Class'] = 'Free'\ndf.loc[(df['Price'] > 0) & (df['Price'] <=1), 'Price_Class'] = 'Cheap'\ndf.loc[(df['Price'] > 1) & (df['Price'] <=3), 'Price_Class'] = 'Above Cheap'\ndf.loc[(df['Price'] > 3) & (df['Price'] <=6), 'Price_Class'] = 'Average'\ndf.loc[(df['Price'] > 6) & (df['Price'] <=16), 'Price_Class'] = 'Above Average'\ndf.loc[(df['Price'] > 16) & (df['Price'] <=40), 'Price_Class'] = 'Expensive'\ndf.loc[(df['Price'] > 40), 'Price_Class'] = 'Too Expensive'","968542a7":"temp = df[df['Type'] == 'Paid']['Price_Class'].value_counts().reset_index()\n\nsns.barplot(x = temp['index'], y = temp['Price_Class'], palette= 'autumn')\nplt.xlabel('Price Classes')\nplt.ylabel('Counts')\nplt.show()","b1daf708":"df[['Price_Class','Rating','Reviews']].groupby('Price_Class').mean()","b6f05886":"plt.figure(figsize=(13,10))\nf = sns.violinplot(x = df['Price_Class'], y = df['Rating'], palette= 'Wistia')\nf.set_xticklabels(f.get_xticklabels(), fontdict= {'fontsize':13})\nf.set_xlabel('Price Class', fontdict= {'fontsize':17})\nf.set_ylabel('Rating', fontdict= {'fontsize':17})\nf.set_title('Rating vs Price Class',fontdict= {'fontsize':17})\nplt.show()","4a095bfd":"df['Content Rating'].head()","8063db05":"df['Content Rating'].unique()","2c22053b":"plt.figure(figsize=(16,7))\nplt.suptitle('Content Rating Shares on playstore')\nplt.subplot(1,2,1)\nsns.countplot(x = df['Content Rating'], palette='summer')\n\nplt.subplot(1,2,2)\ntemp = df['Content Rating'].value_counts().reset_index()\nplt.pie(x = temp['Content Rating'], labels = temp['index'])\n\nplt.show()","3968856b":"sns.boxplot(x = df['Content Rating'], y = df['Rating'], palette= 'hls')","24d07b16":"df['Genres'].head()","7f8b5499":"df['Genres'].unique()","227800a7":"df['Genres'].value_counts()","78b2ec50":"df['Genres'] = df['Genres'].apply(lambda x: x.split(';')[0])\ndf['Genres'].unique()","013c9d82":"df['Genres'].value_counts()","5cc911f9":"df['Genres'].replace('Music & Audio','Music', inplace = True)","0d4f1c4d":"df['Genres'].value_counts().tail()","5f413243":"temp = df[['Genres','Rating','Reviews']].groupby(by = 'Genres').mean().sort_values(by = 'Rating',ascending = False)\nprint(temp.head(1))\nprint(temp.tail(1))","93e9661f":"plt.figure(figsize=(14,8))\nf = sns.boxplot(x = df['Genres'], y = df['Rating'], palette= 'rainbow')\nf.set_xticklabels(f.get_xticklabels(), rotation = 90)\nplt.show()","c6c521cf":"df['Last Updated'].head(10)","2f5be600":"from datetime import datetime","4e7051d2":"df['Last Updated'] = pd.to_datetime(df['Last Updated'])","324d39c1":"df['Last Updated'].max()","342c611b":"df['Last Updated TimeDelta'] = df['Last Updated'].max() - df['Last Updated'] \nprint(df['Last Updated TimeDelta'][0])","9f878283":"sns.jointplot(df['Last Updated TimeDelta'].dt.days, df['Rating'], COLOR = 'brown')\nplt.show()","71d61ebb":"plt.figure(figsize=(12,10))\nsns.heatmap(df.corr(), annot = True, cmap = 'Reds')\nplt.show()","946924d0":"sns.regplot(x = df['Reviews'], y = df['Installs'], color = 'green')","1c38bd33":"### -----------------------------------------------------Last_Updated---------------------------------------------------------------------------","3bebb4a6":"There's not a very strong effect of update on the app ratings","87b8f091":"### -----------------------------------------------------RATING-----------------------------------------------------------------------","0798e876":"#### Data Summary","8d11482e":"It is pretty evident from the plot that mid-sized apps tend to perform mostly better.","902490cd":"We can observe that largest number of apps belong to 1M+ installs ","e46a0184":"![Fb](https:\/\/parentinfo.org\/sites\/default\/files\/styles\/main_article_image\/public\/Social_Media_image_New_IG_Logo.png?itok=jDLmx9B5)\n","26cb03dc":"### -----------------------------------------------------PRICE---------------------------------------------------------------------------","ee9398d7":"Since the data type is still object we should convert it to integer for plotting ","398df881":"______","1bb44587":"Any suggestions or corrections are very much welcome!\n","f35384e3":"### Importing the data","1ce326a9":"### -----------------------------------------------------GENRE---------------------------------------------------------------------------","9f8a8fb4":"We can see that there are 1181 duplicate apps, and this is true as we can see for some apps like:","ef518c99":"### -----------------------------------------------------INSTALLS---------------------------------------------------------------------------","04d78e00":"Pricing of the Apps is found to be mostly above Average(Normal)","bbc9b651":"There are some amount of missing values in other columns as well which are initially not observable in the heatmap","96b23752":"# de nada!","a0e78902":"There's an uncanny observation as a value has label like *'Varies with device'* rather than the actual size. So we better replace it with some mean or median values","148e7302":"We can observe that ratings vary according to the categories","68f7c7e4":"### -----------------------------------------------------ContentRating---------------------------------------------------------------------------","119fe390":"As can be observed the **Too Expensive** apps have average **Rating** less than others.","8ee1376f":"The observation above has a timedelta format so we can get days count from it","336000a1":"We can't omit the Ms and Ks since that would mess up the KB and MB size scale. So we convert the MBs to KBs.  \nOne way to do this is below","5a0f6848":"Since the **p-Value** is small we reject the Null Hypothesis","fb6100f2":"Many of the **Genres** in the column have sub-genres so we better omit them","d0bdd8fb":"# Android Market Analysis","a7d397fe":"Finding the lastest update in the data","f853d867":"### Imports","31b9bc3e":"First glance at the missing values","deb9509c":"Visualising the most often rated catgories","8718a666":"### -----------------------------------------------------SIZE---------------------------------------------------------------------------","bd8834d2":"### Rating vs Pricing","5dec116b":"--------------","939cf3d7":"Geeting the mean **Rating** and **Reviews** of each genre.","c556b03c":"There is not much effect of the **Content Rating** on the **Rating**, the better rating trend in adult and unrated apps is due to very few observations.","1192babe":"As observed the **Adult** or **Unrated** apps are almost nil","8d271389":"You can follow the kernel [here](https:\/\/www.kaggle.com\/hashbanger\/data-cleaning-challenge-parsing-dates) for datetime handling in pandas","11637e56":"## Missing values","a86c8d86":"So we better remove duplicacy as well and keeping first observations","564bd932":"The **FAMILY**, **EVENTS** and **TOOLS** are the most dominating applications in the playstore","7acb4bea":"Using -1 as the signal for the values 'Varies with device' as it will allow eval to be used on the column.","d546237e":"Categories like **EVENTS** , **BOOKS_AND_REFERENCE** and **HEALTH_AND_FITNESS** are the best performing with more than half of the apps rated above average.  \nWhile categories like **DATING** are worst performing.","ba716b47":"Converting the value to integer type","aef1900e":"We can clearly observe the peaks near 20MBs and 4-5MBs so most apps are commonly of that size ","b61bf8a7":"The dates need to parsed from strings to dates","1a24502f":"Observation: (**Joint Scatter Plot**)  \nThe most reviewed apps are likely to be better rated as well","d0f0bff5":"### -------------------------------------------Exploring_Correlations--------------------------------------------------------------","bc94df8c":"We can observe that there are considerable missing values in the **Rating** column","cdb3efad":"Getting the last update in days form","bea6f836":"## EDA","0b7af0f6":"There's one noticeable strong relation between **Reviews** and **Installs** which could mean that people tend to reviewed(likely download) the apps more reviewed than most rated.  ","338f4f55":"There are two problems with this column:  \n* It contains values named 'Varies with device'\n* It contains *M*s and *k*s in the size\n* Type of values is string","85c24b20":"by [Prashant Brahmbhatt](https:\/\/www.github.com\/hashbanger)","58d2b731":"We can better visualize pricing by breaking them down in different intervals.","4ad5a51f":"As we can observe that **Music** and **Music & Audio** are redundant so we better convert them as one.","5fd00a77":"Noew all the sizes in the data are in KB scale","1247da67":"Null Hypothesis - All Means are equal  \nAlternate Hypothesis - Atleast one mean is different","1fd9b787":"Rating is the only numerical column in the data","37d85e39":"![App](https:\/\/ewerdroid.com.br\/wp-content\/uploads\/2018\/02\/maxresdefault-1440x564_c.jpg)","af544690":"#### Checking for Duplicate apps","50fe3a50":"We can observe that even in the paid apps most of the apps are cheap!","f2383582":"From the above distributions it is evident that higher installed apps have less variation in their ratings.","bd3513fb":"Only 7.4% of the Apps in the store are paid apps","c6f53a00":"Visualising the percetages of CATEGORIES in the playstore","016d385c":"We can treat these values as intervals and map them to numeric categories as:  \n5+ installs --> 1  \n50+ installs --> 2\n","f5166498":"As observed the **Dating** genre is the least rated on average, but there is not a very vast difference to the highest averagely rated **Events** genre.","e026675f":"### -----------------------------------------------------REVIEWS---------------------------------------------------------------------------","7c37775c":"The above suggests that even the most expensive apps do not have exceptionally better rating and even less rated than many cheaper apps.","722fa142":"### -----------------------------------------------------TYPE---------------------------------------------------------------------------","7478d5c2":"It seems that there is less variation in **Rating** of apps with higher **Installs**","3c11bb9a":"converting the type to float","342b0907":"### Ratings vs Reviews","bda0c300":"Before parsing to integer we better remove the commas and plus symbols","c3c81a44":"Now we can look if there's a relation with rating and last update","55018ac6":"#### ANOVA Analysis"}}