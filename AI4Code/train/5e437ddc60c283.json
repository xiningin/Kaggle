{"cell_type":{"579bb673":"code","71f4df8e":"code","37f5df20":"code","531fade3":"code","808e37dd":"code","d95c3a27":"code","173bb3b2":"code","17b90314":"code","f7e7c836":"code","095cce4f":"code","b770e53e":"code","d64d08c3":"code","4cf98677":"code","d3835b70":"code","5ab9be91":"code","2d2bf6c8":"code","213726e0":"code","30ff8bf5":"code","dc02cc84":"markdown","c5b7dc6c":"markdown","18a175ca":"markdown"},"source":{"579bb673":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71f4df8e":"import matplotlib.pyplot as plt\nimport janestreet\nimport warnings\nimport seaborn as sns\nimport matplotlib.ticker as mtick\n\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score\n\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (12, 4)\nwarnings.filterwarnings('ignore')","37f5df20":"def utility_score_numba(date, weight, resp, action):\n    Pi = np.bincount(date, weight * resp * action)\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi ** 2)) * np.sqrt(250 \/ len(Pi))\n    u = min(max(t, 0), 6) * np.sum(Pi)\n    return u\n\ndef jane_utility(data, action_column=\"action\"):\n    return utility_score_numba(data[\"date\"].values, \n                               data[\"weight\"].values, \n                               data[\"resp\"].values, \n                               data[action_column].values)","531fade3":"data = pd.read_csv(\"\/kaggle\/input\/jane-street-market-prediction\/train.csv\")\n### Undersample to prototype\n#data = data.sample(frac=0.05)","808e37dd":"data[\"resp\"].describe()","d95c3a27":"TARGET_THRESHOLDS = [-1e-2, -1e-4, -1e-5, 0, 1e-5, 1e-4, 1e-2]\nTIME_SPLIT = 300\nTIME_COLUMN = \"date\"\nTARGET = \"action\"","173bb3b2":"features = [col for col in data.columns if \"feature\" in col]","17b90314":"for threshold in TARGET_THRESHOLDS:\n    data[\"action_\" + str(threshold)] = data[\"resp\"] > threshold","f7e7c836":"in_time = data[data[TIME_COLUMN] <= TIME_SPLIT]\nout_of_time = data[data[TIME_COLUMN] > TIME_SPLIT]","095cce4f":"train, test = train_test_split(in_time, \n                               test_size=0.2, \n                               random_state=42)","b770e53e":"models = [LGBMClassifier() for threshold in TARGET_THRESHOLDS]\nfor i, model in enumerate(models):\n    threshold = TARGET_THRESHOLDS[i]\n    model.fit(train[features], train[\"action_\" + str(threshold)])\n    test[\"model_\" + str(threshold)] = model.predict(test[features])\n    out_of_time[\"model_\" + str(threshold)] = model.predict(out_of_time[features])","d64d08c3":"for threshold in TARGET_THRESHOLDS:\n    pd.concat([test, out_of_time]).groupby(\"date\").apply(lambda x: np.sum(x[\"resp\"] * x[\"weight\"] * x[\"model_\" + str(threshold)])).rolling(60).mean().plot(label=\"model_\" + str(threshold))\n\nxmin, xmax, ymin, ymax = plt.axis()\nplt.vlines(TIME_SPLIT, ymin, ymax, linestyle=\"dotted\", color=\"red\", label=\"Out of time split\")\nplt.legend(bbox_to_anchor=(1.05, 1.0))\nplt.title(\"Performance moving average of 60 periods window for both test and out of time periods\", pad=16)\nplt.ylabel(\"sum(Weight * Resp * Action)\")\nplt.xlabel(\"Date\")\nplt.show()    ","4cf98677":"for threshold in TARGET_THRESHOLDS:\n    print(\"-----------\")\n    print(threshold)\n    print(\"Test Jane Utility (in time): {:.2f}\".format(jane_utility(test, \"model_\" + str(threshold))))\n    print(\"Out of time Jane Utility: {:.2f}\".format(jane_utility(out_of_time, \"model_\" + str(threshold))))","d3835b70":"N_BOOT = 50","5ab9be91":"experiment_dict = {threshold: {} for threshold in TARGET_THRESHOLDS}\nfor key, values in experiment_dict.items():\n    experiment_dict[key][\"test_utility\"] = []\n    experiment_dict[key][\"oot_utility\"] = []\n    \nfor n_round in range(N_BOOT):\n    \n    resampled_data = data.sample(frac=1.0, replace=True)\n    in_time = resampled_data[resampled_data[TIME_COLUMN] <= TIME_SPLIT]\n    out_of_time = resampled_data[resampled_data[TIME_COLUMN] > TIME_SPLIT]\n    train, test = train_test_split(in_time, \n                               test_size=0.2, \n                               random_state=42)\n    \n    for i, model in enumerate(models):\n        threshold = TARGET_THRESHOLDS[i]\n        model.fit(train[features], train[\"action_\" + str(threshold)])\n        test[\"model_\" + str(threshold)] = model.predict(test[features])\n        out_of_time[\"model_\" + str(threshold)] = model.predict(out_of_time[features])\n        \n        experiment_dict[threshold][\"test_utility\"].append(jane_utility(test, \"model_\" + str(threshold))) \n        experiment_dict[threshold][\"oot_utility\"].append(jane_utility(out_of_time, \"model_\" + str(threshold)))\n        ","2d2bf6c8":"metrics = [\"test_utility\", \"oot_utility\"]\n\nresults = pd.concat([pd.DataFrame.from_dict(experiment_dict).transpose()[[metric]].explode(metric) for metric in metrics], axis=1)\nresults[\"threshold\"] = results.index * 10e3\nresults = results.astype(float)\n","213726e0":"fig, ax = plt.subplots(figsize=(12, 4))\n\nsns.boxplot(data=results, x=\"threshold\", y=\"test_utility\")\n\nplt.title(\"Test set Jane Utility for different action thresholds\")\nplt.xticks(rotation=45)\nplt.show()","30ff8bf5":"fig, ax = plt.subplots(figsize=(12, 4))\nsns.boxplot(data=results, x=\"threshold\", y=\"oot_utility\")\nplt.title(\"Out of time set Jane Utility for different action thresholds\")\nplt.xlabel(\"Threshold to define target (10e-3)\")\nplt.xticks(rotation=45)\nplt.show()","dc02cc84":"# Conclusion\n\nThere's a range around the threshold 0 when building the target that might offer a margin for investigation. ","c5b7dc6c":"# Target definition\n\nMaking the action positive when `resp > 0` is the logical thing to do. But I wanted to check how Jane utility would change for different thresholds. ","18a175ca":"## Bootstrapping\n\nIn order to make our comparison more robust, we use bootstrapping. "}}