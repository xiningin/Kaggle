{"cell_type":{"a9bf8889":"code","ef8f99da":"code","acb1455d":"code","371b79a0":"code","cdae367f":"code","982ee51b":"code","b391440d":"code","628b1b0d":"code","c5445f3a":"code","1c3680b9":"code","0e6888a9":"code","926bd8cf":"code","a880d4d6":"code","014374f5":"code","cd336ba5":"code","0824ff92":"code","c715efb8":"code","c708cd87":"code","f330c98e":"code","c35e7234":"code","a6035779":"markdown","22f8011f":"markdown","a7cc02a5":"markdown","c66406e0":"markdown","11a231ca":"markdown","57320b44":"markdown","af8c7de7":"markdown","7a139a2a":"markdown"},"source":{"a9bf8889":"# Importing the usual libraries and filter warnings\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.pyplot import xticks\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ef8f99da":"#train = pd.read_csv('train.csv')\n#test = pd.read_csv('test.csv')\n\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nprint(train.shape,test.shape)\n#In the beginning it's important to check the size of your train and test data which later helps in \n#deciding the sample size while testing your model on train data","acb1455d":"train.head(5)","371b79a0":"test.head(5)","cdae367f":"# Lets see if we have a null value in the whole dataset\n#Usuall we will check isnull().sum() but here in our dataset we have 784 columns and a groupby won't fit the buffer\nprint(np.unique([train.isnull().sum()]))\nprint(np.unique([test.isnull().sum()]))","982ee51b":"y = train['label']\ndf_train = train.drop(columns=[\"label\"],axis=1)\nprint(y.shape,df_train.shape)","b391440d":"sns.countplot(y)","628b1b0d":"#Lets see the first 50 images of the dataset\ndf_train_img = df_train.values.reshape(-1,28,28,1)\nplt.figure(figsize=(15,8))\nfor i in range(50):\n    plt.subplot(5,10,i+1)\n    plt.imshow(df_train_img[i].reshape((28,28)),cmap='gray')\n    plt.axis(\"off\")\nplt.show()","c5445f3a":"def augment(df_aug,y):\n    col_list = df_aug.columns.tolist()\n    col_list = ['label']+col_list\n    list1=[]\n    list2=[]\n    list3=[]\n    global df1\n    global df2\n    global df3\n    df_train_img = df_aug.values.reshape(-1,28,28,1)\n    for i in range(len(df_aug)):\n        list1.append([y[i]]+np.rot90(df_train_img[i],1).flatten().tolist())\n        list2.append([y[i]]+np.rot90(df_train_img[i],2).flatten().tolist())\n        list3.append([y[i]]+np.rot90(df_train_img[i],3).flatten().tolist())\n    df1= pd.DataFrame(list1,columns=col_list)\n    df2 = pd.DataFrame(list2,columns=col_list)\n    df3 = pd.DataFrame(list3,columns=col_list)","1c3680b9":"#Function is called\naugment(df_train,y)","0e6888a9":"#3 new dataframes are created with same size as tarining set as expected\nprint(df1.shape,df2.shape,df3.shape)","926bd8cf":"df_train1 = df1.drop(columns=[\"label\"],axis=1)\ndf_train_img1 = df_train1.values.reshape(-1,28,28,1)\n#Lets see the first 50 images of the dataset\nplt.figure(figsize=(15,8))\nfor i in range(50):\n    plt.subplot(5,10,i+1)\n    plt.imshow(df_train_img1[i].reshape((28,28)),cmap='gray')\n    plt.axis(\"off\")\nplt.show()\n","a880d4d6":"df_train2 = df2.drop(columns=[\"label\"],axis=1)\ndf_train_img2 = df_train2.values.reshape(-1,28,28,1)\n#Lets see the first 50 images of the dataset\nplt.figure(figsize=(15,8))\nfor i in range(50):\n    plt.subplot(5,10,i+1)\n    plt.imshow(df_train_img2[i].reshape((28,28)),cmap='gray')\n    plt.axis(\"off\")\nplt.show()\n","014374f5":"df_train3 = df3.drop(columns=[\"label\"],axis=1)\ndf_train_img3 = df_train3.values.reshape(-1,28,28,1)\n#Lets see the first 50 images of the dataset\nplt.figure(figsize=(15,8))\nfor i in range(50):\n    plt.subplot(5,10,i+1)\n    plt.imshow(df_train_img3[i].reshape((28,28)),cmap='gray')\n    plt.axis(\"off\")\nplt.show()\n","cd336ba5":"#Lets merge all the dataframes\nframes = [train,df1,df2,df3]\nfinal_df = pd.concat(frames)\nfinal_df.shape","0824ff92":"y = final_df['label']\ndf_train = final_df.drop(columns=[\"label\"],axis=1)\nprint(y.shape,df_train.shape)","c715efb8":"# Normalize the dataset\ndf_train = df_train \/ 255\ntest = test \/ 255","c708cd87":"#Looks like the values are equally distributed in the dataset\ny.value_counts()","f330c98e":"sns.countplot(y)","c35e7234":"fig,axs = plt.subplots(2,2)\naxs[0,0].imshow(df_train_img[26].reshape((28,28)),cmap='gray')\naxs[0,1].imshow(df_train_img[27].reshape((28,28)),cmap='gray')\naxs[1,0].imshow(df_train_img2[26].reshape((28,28)),cmap='gray')\naxs[1,1].imshow(df_train_img2[27].reshape((28,28)),cmap='gray')\naxs[0, 0].set_title(\"label=\"+str(y.iloc[26]))\naxs[0, 1].set_title(\"label=\"+str(y.iloc[27]))\naxs[1, 0].set_title(\"label=\"+str(y.iloc[26]))\naxs[1, 1].set_title(\"label=\"+str(y.iloc[27]))\nfig.tight_layout()","a6035779":"<img src = \"https:\/\/images.unsplash.com\/photo-1523601690549-b1f89abff70c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1051&q=80\" width=500 height=500\/>","22f8011f":"<a id='DF2'><\/a>","a7cc02a5":"# Image Augmentation in Digit Recognition with numpy for beginners ...\n\n1) Image Augmentation is a technique to modify the images in order to expand the dataset,<br>\n2) Take below image for example of an inverted mountain , human eye will call it a mountain even if it sees from any angle.<br>\n3) Similar concept we will apply to image training models by rotating them on different axis .<br>\n4) Since it is sometimes hard to get relevant number of images for your model so you would enhance the existing images to increase the training size to improve performance<br>\n5) Don't miss the [caveat](#IA1) in the end ","c66406e0":"<a id='DF1'><\/a>","11a231ca":"# Visualization\nIts quite evident that this is a multiclass classification problem and the target classes are almost uniformly distributed in the dataset having digits from 0-9","57320b44":"<a id='IA1'><\/a>\n# Caveat:\n - Digits 6 and 9 could look similar to the model in inverted positions , so you might loose some accuracy there <br>\n - Lets see in the below example..  rotating the digits by 180&#176; , 6 becomes 9 and vice versa , even a human eye will misjudge the actual label","af8c7de7":"# Function for image augmentation\n\n 1. Below function takes the taining set pixels and lables as input\n 2. Defines 3 global dataframe variables which will store the images roatated at various angles\n 3. For loop rotates an image to various angles using nympy function rot90 and appends to 3 diiferent different lists\n 4. Finally 3 dataframes are created just like training set but having inverted images\n 5.  Visualize the various datasets\n - [Images rotated by 90 &#176;](#DF1)\n - [Images rotated by 180 &#176;](#DF2)\n - [Images rotated by 270 &#176;](#DF3)","7a139a2a":"<a id='DF3'><\/a>"}}