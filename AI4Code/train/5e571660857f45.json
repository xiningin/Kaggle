{"cell_type":{"ccf5a3d0":"code","03639555":"code","63eb201a":"code","c38228ed":"code","4244d5fe":"code","ebc1b20b":"code","7f67808e":"code","70fcdadc":"code","140da0f0":"code","15b96075":"code","6fb90e49":"markdown","e0cded9c":"markdown","81ab9570":"markdown","550ebcb2":"markdown","c4539b80":"markdown","1773c12d":"markdown","c66dfe47":"markdown"},"source":{"ccf5a3d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","03639555":"import warnings\nwarnings.filterwarnings('ignore') # to suppress some matplotlib deprecation warnings\n\nimport ast\nimport math\n\n# Have you installed your own package in Kernels yet? \n# If you need to, you can use the \"Settings\" bar on the right to install `simplification`\nfrom simplification.cutil import simplify_coords\n\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n","63eb201a":"data = pd.read_csv('..\/input\/train_simplified\/roller coaster.csv',\n                   index_col='key_id',\n                   nrows=100)\ndata.head()","c38228ed":"data['word'] = data['word'].replace(' ', '_', regex=True)\ndata.head()","4244d5fe":"test_raw = pd.read_csv('..\/input\/test_raw.csv', index_col='key_id')\nfirst_ten_ids = test_raw.iloc[:10].index\nraw_images = [ast.literal_eval(lst) for lst in test_raw.loc[first_ten_ids, 'drawing'].values]","ebc1b20b":"def resample(x, y, spacing=1.0):\n    output = []\n    n = len(x)\n    px = x[0]\n    py = y[0]\n    cumlen = 0\n    pcumlen = 0\n    offset = 0\n    for i in range(1, n):\n        cx = x[i]\n        cy = y[i]\n        dx = cx - px\n        dy = cy - py\n        curlen = math.sqrt(dx*dx + dy*dy)\n        cumlen += curlen\n        while offset < cumlen:\n            t = (offset - pcumlen) \/ curlen\n            invt = 1 - t\n            tx = px * invt + cx * t\n            ty = py * invt + cy * t\n            output.append((tx, ty))\n            offset += spacing\n        pcumlen = cumlen\n        px = cx\n        py = cy\n    output.append((x[-1], y[-1]))\n    return output\n  \ndef normalize_resample_simplify(strokes, epsilon=1.0, resample_spacing=1.0):\n    if len(strokes) == 0:\n        raise ValueError('empty image')\n\n    # find min and max\n    amin = None\n    amax = None\n    for x, y, _ in strokes:\n        cur_min = [np.min(x), np.min(y)]\n        cur_max = [np.max(x), np.max(y)]\n        amin = cur_min if amin is None else np.min([amin, cur_min], axis=0)\n        amax = cur_max if amax is None else np.max([amax, cur_max], axis=0)\n\n    # drop any drawings that are linear along one axis\n    arange = np.array(amax) - np.array(amin)\n    if np.min(arange) == 0:\n        raise ValueError('bad range of values')\n\n    arange = np.max(arange)\n    output = []\n    for x, y, _ in strokes:\n        xy = np.array([x, y], dtype=float).T\n        xy -= amin\n        xy *= 255.\n        xy \/= arange\n        resampled = resample(xy[:, 0], xy[:, 1], resample_spacing)\n        simplified = simplify_coords(resampled, epsilon)\n        xy = np.around(simplified).astype(np.uint8)\n        output.append(xy.T.tolist())\n\n    return output","7f67808e":"simplified_drawings = []\nfor drawing in raw_images:\n    simplified_drawing = normalize_resample_simplify(drawing)\n    simplified_drawings.append(simplified_drawing)","70fcdadc":"for index, raw_drawing in enumerate(raw_images, 0):\n    \n    plt.figure(figsize=(6,3))\n    \n    for x,y,t in raw_drawing:\n        plt.subplot(1,2,1)\n        plt.plot(x, y, marker='.')\n        plt.axis('off')\n\n    plt.gca().invert_yaxis()\n    plt.axis('equal')\n\n    for x,y in simplified_drawings[index]:\n        plt.subplot(1,2,2)\n        plt.plot(x, y, marker='.')\n        plt.axis('off')\n\n    plt.gca().invert_yaxis()\n    plt.axis('equal')\n    plt.show()  ","140da0f0":"submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='key_id')\n# Don't forget, your multi-word labels need underscores instead of spaces!\nmy_favorite_words = ['donut', 'roller_coaster', 'smiley_face']  \nsubmission['word'] = \" \".join(my_favorite_words)\nsubmission.to_csv('my_favorite_words.csv')","15b96075":"submission.head()","6fb90e49":"### Fixing labels\n\nNotice the `word` values for this label have a space. This aligns with the original Quick Draw data set that is already public. The Kaggle metric code for MAP@K requires each label to be separated by a single space. It parses \"roller coaster\" as two labels, \"roller\" and \"coaster\". Thus, `word` values with spaces need to be updated to use underscores. This is easily done, e.g.,","e0cded9c":"## Viewing  Drawings\nAren't these fun to plot?!?!","81ab9570":"## This Notebook Demonstrates:\n1. Reading the data in python, preparing it for analysis, and adjusting the labels to contain underscores\n2. The code that simplfies a Raw drawing to the Simplified drawing\n3. How to make a submission file with predictions in the required format","550ebcb2":"## From Raw to Simplified\n\nThis code demonstrates how the `simplified` data was generated from the `raw` data.\n\n(Code by Jonas Jongejan)","c4539b80":"## Making a Submission","1773c12d":"### Let's look at some images\nWe're going to grab the first 10 images from the `test_raw.csv` file. Since the `word` values are read as a string, we need to convert them to a list using the `ast.literal_eval` function.","c66dfe47":"### Let's read some of the training data"}}