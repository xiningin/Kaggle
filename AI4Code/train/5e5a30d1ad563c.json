{"cell_type":{"32f6f2fb":"code","f3088235":"code","adee70f9":"code","3c3da60a":"code","b9c00868":"code","e3ae7759":"code","7af07177":"code","8c6a12f3":"code","f2d18afd":"code","3db2d1ce":"code","9d49aad1":"code","0ce499fd":"code","98360cd9":"code","713b1799":"code","88c8743c":"code","b7c6796d":"code","1eb145ee":"code","b65f0aed":"code","137503cf":"code","6e824384":"code","a9ab9cd5":"code","6d7ebf44":"code","a70101b7":"code","951dacd9":"code","61b717dc":"code","fca84779":"code","9ab5c3a3":"code","5aed05bf":"code","fb953c21":"code","b546f606":"code","29c6528f":"code","15511e6d":"code","3463d53e":"code","fd6bd543":"code","98733e8f":"code","19f8e20f":"code","05e69266":"code","8b50d12a":"code","9925784e":"code","06b6e1d9":"code","d6ce2fd8":"code","45ada155":"code","41c18a85":"code","2dea7446":"code","e1e81c62":"code","a8bceb80":"code","9e5f768e":"code","0e7b48f7":"code","4c3c3b4e":"code","0cf6d069":"code","32f982cb":"code","e95fcd4a":"code","65d70c87":"code","bb84f9d8":"code","ca27c7a0":"code","0ae960bb":"code","42eb1e9f":"code","9c35759a":"code","b58a0bd1":"code","3827a4f7":"markdown","1f8a15a8":"markdown","6553cf57":"markdown","96081484":"markdown","72fc8af2":"markdown","5088a8af":"markdown","38198431":"markdown","33e49d71":"markdown","b2e00d6e":"markdown","71a0016f":"markdown","2acaaa79":"markdown","7e166970":"markdown","3b1bc731":"markdown","644acac0":"markdown","d44429c0":"markdown","9e209253":"markdown","8fd7ea17":"markdown","57ae5a94":"markdown","375dbd12":"markdown","2800742b":"markdown","be1ddc09":"markdown","f2d02841":"markdown","fe6dedbc":"markdown","615cce20":"markdown","a1b51852":"markdown","009ab0fd":"markdown","29eb3feb":"markdown","c968ab81":"markdown","987cb1f7":"markdown","10465486":"markdown","67a317c2":"markdown","9e313adb":"markdown","2813c2d0":"markdown","cbc14117":"markdown","3b8797ee":"markdown","0a410814":"markdown","642c4f02":"markdown","463497ea":"markdown","22c5f667":"markdown","17083552":"markdown","5f66873c":"markdown","7eb61364":"markdown","722133bd":"markdown","0cf00207":"markdown","dd9ec4e8":"markdown","0df221c1":"markdown","6c394602":"markdown","6bce34ba":"markdown","c678bb61":"markdown","c6af93ee":"markdown","c1c78a0a":"markdown","f1caa2f7":"markdown","bec65f4e":"markdown","72059a3e":"markdown","1beea7b4":"markdown","0586d852":"markdown","9b0bab08":"markdown","e2af5749":"markdown","296fd5e4":"markdown"},"source":{"32f6f2fb":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats.mstats import winsorize\nfrom sklearn.metrics import f1_score as score #Scoring metric for the competition\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nimport time\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\npd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_rows\",None)\nsns.set_palette(\"Set2\")\nsns.set_style(\"ticks\")","f3088235":"train_labels = pd.read_csv(\"..\/input\/train_labels.csv\")\ntrain_values = pd.read_csv(\"..\/input\/train_values.csv\")\ntest_values = pd.read_csv(\"..\/input\/test_values.csv\")","adee70f9":"print(\"# Train Values: {}\".format(train_values.shape))\nprint(\"# Train Labels: {}\".format(train_labels.shape))\nprint(\"# Test Values: {}\".format(test_values.shape))","3c3da60a":"train_labels.head()","b9c00868":"train_values.head()","e3ae7759":"test_values.head()","7af07177":"train_values.isnull().sum() * 100 \/ len(train_values)","8c6a12f3":"train_labels.isnull().sum() * 100 \/ len(train_values)","f2d18afd":"test_values.isnull().sum() * 100 \/ len(train_values)","3db2d1ce":"train_values.dtypes","9d49aad1":"train_labels.dtypes","0ce499fd":"test_values.dtypes","98360cd9":"sns.countplot(x=\"damage_grade\", data=train_labels)\nplt.title(\"Damage Grade Distribution\")\nplt.show()","713b1799":"plt.figure(figsize=(12,6))\nsns.countplot(train_values[\"count_floors_pre_eq\"], hue=train_labels[\"damage_grade\"])\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"# of Floors Before Earthquake\")\nplt.xticks(rotation=90)\nplt.title(\"# of Floors Before Earthquake Histograms\")\nplt.legend([\"damage_grade = 1\",\"damage_grade = 2\",\"damage_grade = 3\"])\nplt.show()","88c8743c":"plt.figure(figsize=(12,6))\nsns.countplot(x=train_values[\"age\"],hue=train_labels[\"damage_grade\"])\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Building's Age\")\nplt.xticks(rotation=90)\nplt.title(\"Age Histograms\")\nplt.legend([\"damage_grade = 1\",\"damage_grade = 2\",\"damage_grade = 3\"])\nplt.show()","b7c6796d":"plt.figure(figsize=(18,9))\nsns.countplot(x=train_values[\"area_percentage\"],hue=train_labels[\"damage_grade\"])\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Area Percentage\")\nplt.xticks(rotation=90)\nplt.title(\"Area Percentage Histograms\")\nplt.legend([\"damage_grade = 1\",\"damage_grade = 2\",\"damage_grade = 3\"])\nplt.show()","1eb145ee":"plt.figure(figsize=(12,6))\nsns.countplot(x=train_values[\"height_percentage\"],hue=train_labels[\"damage_grade\"])\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Height Percentage\")\nplt.xticks(rotation=90)\nplt.title(\"Height Percentage Histograms\")\nplt.legend([\"damage_grade = 1\",\"damage_grade = 2\",\"damage_grade = 3\"])\nplt.show()","b65f0aed":"sns.countplot(x = train_values[\"land_surface_condition\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Land Surface Condition Distribution\")\nplt.show()","137503cf":"sns.countplot(x = train_values[\"foundation_type\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Foundation Type Distribution\")\nplt.show()","6e824384":"sns.countplot(x = train_values[\"roof_type\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Roof Type Distribution\")\nplt.show()","a9ab9cd5":"sns.countplot(x = train_values[\"ground_floor_type\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Ground Floor Type Distribution\")\nplt.show()","6d7ebf44":"sns.countplot(x = train_values[\"other_floor_type\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Other Floor Type Distribution\")\nplt.show()","a70101b7":"sns.countplot(x = train_values[\"position\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Position Distribution\")\nplt.show()","951dacd9":"sns.countplot(x = train_values[\"plan_configuration\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Plan Configuration Distribution\")\nplt.show()","61b717dc":"sns.countplot(x = train_values[\"has_superstructure_adobe_mud\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Adobe\/Mud Distribution\")\nplt.show()","fca84779":"sns.countplot(x = train_values[\"has_superstructure_mud_mortar_stone\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Mortar\/Stone Distribution\")\nplt.show()","9ab5c3a3":"sns.countplot(x = train_values[\"has_superstructure_mud_mortar_brick\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Mortar\/Brick Distribution\")\nplt.show()","5aed05bf":"sns.countplot(x = train_values[\"has_superstructure_cement_mortar_brick\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Cement\/Mortar\/Brick Distribution\")\nplt.show()","fb953c21":"sns.countplot(x = train_values[\"has_superstructure_timber\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Timber Distribution\")\nplt.show()","b546f606":"sns.countplot(x = train_values[\"has_superstructure_bamboo\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Bamboo Distribution\")\nplt.show()","29c6528f":"sns.countplot(x = train_values[\"has_superstructure_rc_non_engineered\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Non-engineered Reinforced Concrete Distribution\")\nplt.show()","15511e6d":"sns.countplot(x = train_values[\"has_superstructure_rc_engineered\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Engineered Reinforced Concrete Distribution\")\nplt.show()","3463d53e":"sns.countplot(x = train_values[\"has_superstructure_other\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Superstructure Other Distribution\")\nplt.show()","fd6bd543":"sns.countplot(x = train_values[\"legal_ownership_status\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Legal Ownership Status Distribution\")\nplt.show()","98733e8f":"plt.figure(figsize=(18,9))\nsns.countplot(x=train_values[\"count_families\"],hue=train_labels[\"damage_grade\"])\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"# of Families\")\nplt.xticks(rotation=90)\nplt.title(\"# of Families Histograms\")\nplt.legend([\"damage_grade = 1\",\"damage_grade = 2\",\"damage_grade = 3\"])\nplt.show()","19f8e20f":"sns.countplot(x = train_values[\"has_secondary_use\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Distribution\")\nplt.show()","05e69266":"sns.countplot(x = train_values[\"has_secondary_use_agriculture\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Agricultural Distribution\")\nplt.show()","8b50d12a":"sns.countplot(x = train_values[\"has_secondary_use_hotel\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Hotel Distribution\")\nplt.show()","9925784e":"sns.countplot(x = train_values[\"has_secondary_use_rental\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Rental Distribution\")\nplt.show()","06b6e1d9":"sns.countplot(x = train_values[\"has_secondary_use_institution\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Institution Distribution\")\nplt.show()","d6ce2fd8":"sns.countplot(x = train_values[\"has_secondary_use_school\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use School Distribution\")\nplt.show()","45ada155":"sns.countplot(x = train_values[\"has_secondary_use_industry\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Industry Distribution\")\nplt.show()","41c18a85":"sns.countplot(x = train_values[\"has_secondary_use_health_post\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Health Post Distribution\")\nplt.show()","2dea7446":"sns.countplot(x = train_values[\"has_secondary_use_gov_office\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Government Office Distribution\")\nplt.show()","e1e81c62":"sns.countplot(x = train_values[\"has_secondary_use_use_police\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Police Distribution\")\nplt.show()","a8bceb80":"sns.countplot(x = train_values[\"has_secondary_use_other\"], hue = train_labels[\"damage_grade\"])\nplt.title(\"Has Secondary Use Other\")\nplt.show()","9e5f768e":"#Data source\nname = \"age\"\ndata = train_values[name]\n\n#Before winsorization\nsns.boxplot(data)\nplt.title(\"{} Before Winsorization\".format(name))\nplt.show()\n\n#Winsorization\nwinsorized_data = winsorize(data,(0, 0.05))\n\n#After winsorization\nsns.boxplot(winsorized_data)\nplt.title(\"{} After Winsorization\".format(name))\nplt.show()\n\n#Replace data in dataset\ntrain_values[name] = winsorized_data","0e7b48f7":"#Data source\nname = \"area_percentage\"\ndata = train_values[name]\n\n#Before winsorization\nsns.boxplot(data)\nplt.title(\"{} Before Winsorization\".format(name))\nplt.show()\n\n#Winsorization\nwinsorized_data = winsorize(data,(0, 0.055))\n\n#After winsorization\nsns.boxplot(winsorized_data)\nplt.title(\"{} After Winsorization\".format(name))\nplt.show()\n\n#Replace data in dataset\ntrain_values[name] = winsorized_data","4c3c3b4e":"#Data source\nname = \"height_percentage\"\ndata = train_values[name]\n\n#Before winsorization\nsns.boxplot(data)\nplt.title(\"{} Before Winsorization\".format(name))\nplt.show()\n\n#Winsorization\nwinsorized_data = winsorize(data,(0, 0.04))\n\n#After winsorization\nsns.boxplot(winsorized_data)\nplt.title(\"{} After Winsorization\".format(name))\nplt.show()\n\n#Replace data in dataset\ntrain_values[name] = winsorized_data","0cf6d069":"train_values.drop(columns=[\"building_id\"], inplace=True)\ntrain_labels.drop(columns=[\"building_id\"], inplace=True)","32f982cb":"train_values = pd.get_dummies(train_values, drop_first = True)","e95fcd4a":"plt.figure(figsize=(10,10))\ncorrelations = train_values.corrwith(train_labels[\"damage_grade\"])\nsns.heatmap(pd.DataFrame(correlations), annot=True)\nplt.show()","65d70c87":"X = train_values\ny = train_labels\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\n#Decision Tree\ndt = DecisionTreeClassifier(max_features = None,\n                            max_depth = 45,\n                            min_samples_split = 3,\n                            min_samples_leaf = 30,\n                            random_state=42)\nstart_time = time.time()\nmodel = dt.fit(X_train, y_train)\ndt_time_fit = time.time() - start_time\n\n#Predictions - Decision Tree\nstart_time = time.time()\nmodel.predict(X_test)\ndt_time_pred = time.time() - start_time\nprint(\"Decision Tree\")\nprint(\"Fit Time: {} seconds\".format(dt_time_fit))\nprint(\"Prediction Time: {} seconds\".format(dt_time_pred))\nprint(\"Training Score: {}\".format(dt.score(X_train, y_train)))\nprint(\"Test Score: {}\".format(dt.score(X_test, y_test)))\nprint(\"----------------------------------------\")\n\n#Random Forest\nrf = RandomForestClassifier(max_features = None,\n                            max_depth = 45,\n                            min_samples_split = 3,\n                            min_samples_leaf = 30,\n                            random_state=42)\nstart_time = time.time()\nmodel = rf.fit(X_train, y_train)\nrf_time_fit = time.time() - start_time\n\n#Predictions - Decision Tree\nstart_time = time.time()\nmodel.predict(X_test)\nrf_time_pred = time.time() - start_time\nprint(\"Random Forest\")\nprint(\"Fit Time: {} seconds\".format(rf_time_fit))\nprint(\"Prediction Time: {} seconds\".format(rf_time_pred))\nprint(\"Training Score: {}\".format(rf.score(X_train, y_train)))\nprint(\"Test Score: {}\".format(rf.score(X_test, y_test)))\n\n","bb84f9d8":"y_pred = rf.predict(X_test)\n\ndata = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(data, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (10,7))\nsns.heatmap(cm, annot=True, fmt=\"d\", annot_kws={\"size\": 12})\nplt.title(\"Confusion Matrix\")\nplt.show()","ca27c7a0":"results = list(zip(X, rf.feature_importances_))\nimportance = pd.DataFrame(results, columns = [\"Feature\", \"Importance\"])\nimportance = importance.sort_values(by=\"Importance\", ascending=False)\nimportance","0ae960bb":"importance_10 = importance.head(10)\nplot = sns.barplot(x=importance_10[\"Feature\"], y=importance_10[\"Importance\"])\nplot.set_xticklabels(plot.get_xticklabels(), rotation=90)\nplt.title(\"10 Most Important Features\")\nplt.show()","42eb1e9f":"test_building_id = test_values[\"building_id\"]\ntest_values.drop(columns = [\"building_id\"], inplace=True)\n\n#Outliers\ntest_values[\"age\"] = winsorize(test_values[\"age\"],(0, 0.05))\ntest_values[\"area_percentage\"] = winsorize(test_values[\"area_percentage\"],(0, 0.055))\ntest_values[\"height_percentage\"] = winsorize(test_values[\"height_percentage\"],(0, 0.04))\n\n#Dummies\ntest_values = pd.get_dummies(test_values, drop_first = True)\n\n#Predictions\npredictions = rf.predict(test_values)\n\n#Create Submission File\nsubmission = pd.DataFrame()\nsubmission[\"building_id\"] = test_building_id\nsubmission[\"damage_grade\"] = predictions\nsubmission.head()\nsubmission.to_csv(\"submission.csv\", index=False)","9c35759a":"predictions = rf.predict(test_values)","b58a0bd1":"submission = pd.DataFrame()\nsubmission[\"building_id\"] = test_building_id\nsubmission[\"damage_grade\"] = predictions\nsubmission.head()\nsubmission.to_csv(\"submission.csv\", index=False)","3827a4f7":"## **Data Types**","1f8a15a8":"Most of the buildings had only 1 familiy living in them. We also have buildings were up to 9 families were living in, this buildings could be the same as those buildings with 9 floors. ","6553cf57":"This is a categorical variable that indicates the legal ownership status of the land where building was built. Possible values: a, r, v, w.","96081484":"This is a flag variable that indicates if the superstructure was made of Mud Mortar - Brick.","72fc8af2":"This is a flag variable that indicates if the superstructure was made of non-engineered reinforced concrete.","5088a8af":"Let's now compare the score of a single decision tree against that of a random forest. For both models, I'll use the best parameters previously obtained through GridSearchCV (ran in my own machine to speed up the process). I'll use the module time to compare if the added complexity and extra calculation time of the random forest is justified by a better score.","38198431":"From the previous plot, it is easy to see that our dataset is very imbalanced. The reason why this dataset is imbalanced could be due to the fact that the data was collected after the 2015 Nepal's Earthquake, and it is very likely that the damage grade of the buildings is highly correlated to the intensity of the earthquake. It is important to mention that decision trees and random forests are extremely sensitive to imbalanced data. ","33e49d71":"As it was previously mentioned, our dataset is very imbalanced and mainly contains *damage_grade = 2* values. Random forests and decision trees are highly sensitive to outliers, so fixing this issue should be a priority. RandomForestClassifier has a setting that let us deal with class imbalances named \"class_weight.\" By setting class_weight = \"balanced\", the classes will be automatically weighted inversely proportional to the frequency in which they appear in the dataset. After some trial and error I determined that class_weight = \"balanced\" will no yield as good results as class_weight = None, because it is very likely that the test data is imbalanced as well.","b2e00d6e":"This is a flag variable that indicates if the building was used for rental purposes.","71a0016f":"## **Data Distribution**","2acaaa79":"This is a flag variable that indicates if the superstructure was made of any other material.","7e166970":"This is a categorical variable that indicates the building plan configuration. Possible values: a, c, d, f, m, n, o, q, s, u.","3b1bc731":"The normalized area of the building footprint is less than 20% for most buildings. It is important to mention that some values go up to 100%, so it is important for us to take care of the outliers of this feature.","644acac0":"This is a categorical variable that indicates the type of constructions used in higher than the ground floors (except of roof). Possible values: j, q, s, x.","d44429c0":"<a href=\"submission.csv\"> Download File <\/a>","9e209253":"This is a categorical variable that indicates the position of the building. Possible values: j, o, s, t.","8fd7ea17":"This is a flag variable that indicates if the superstructure was made of Bamboo.","57ae5a94":"From the previous plot we can conclude that the geographic region (geo_level_1_id, geo_level_2_id, geo_level_3_id) in which a building exists, and the foundation type \"r\" are the most important features to determine the damage grade that a building will suffer during an earthquake.","375dbd12":"## ** Competition Overview**","2800742b":"This is a flag variable that indicates if the superstructure was made of Adobe\/Mud.","be1ddc09":"This is a categorical variable that indicates the type of foundation used while building. Possible values: h, i, r, u, w.","f2d02841":"This is a flag variable that indicates if the building was used fas a government office.","fe6dedbc":"This is a flag variable that indicates if the superstructure was made of Mud Mortar - Stone.","615cce20":"This is a flag variable that indicates if the building was used for any secondary purpose.","a1b51852":"We have buildings around 995 years old, which at first glance seems like a error in the collection of data. After a quick Google search, I was able to determine that buildings in Nepal can be that old. Nevertheless, we still have to deal with the outliers.","009ab0fd":"This is a categorical variable that indicates the surface condition of the land where the building was built. Possible values: n, o, t.","29eb3feb":"This is a categorical variable that indicates the type of the ground floor. Possible values: f, m, v, x, z.","c968ab81":"## **Confusion Matrix**","987cb1f7":"## **Outliers**","10465486":"The random forest model took 7x more to be trained and 5x more to make predictions when compared to the single decision tree. The random forest performed better, but no significantly better than a single decision tree. In this scenario, 18 extra seconds of training time is not a big deal for us.","67a317c2":"This is a flag variable that indicates if the building was used as a location of any institution.","9e313adb":"This is a flag variable that indicates if the superstructure was made of Timber.","2813c2d0":"## **Correlations**","cbc14117":"<img src=\"https:\/\/s3.amazonaws.com\/drivendata-public-assets\/nepal-quake-bm-2.JPG\" width=\"500\">","3b8797ee":"This is a flag variable that indicates if the superstructure was made of engineered reinforced concrete.","0a410814":"This is a flag variable that indicates if the superstructure was made of Cement Mortar - Brick.","642c4f02":"This is a flag variable that indicates if the building was used as a health post.","463497ea":"Once again, we have another variable that needs to have its outliers removed. Most of the data for this feature is less than 10%, but we have some buildings with values up to 32%.","22c5f667":"This is a flag variable that indicates if the building was used as a school.","17083552":"## **Missing Values**","5f66873c":"## **Output File**","7eb61364":"## **Feature Importance**","722133bd":"This is a categorical variable that indicates the type of roof used while building. Possible values: n, q, x","0cf00207":"This is a flag variable that indicates if the building was used as a hotel.","dd9ec4e8":"Random Forests are a machine learning model based on decision trees, which are believed to perform strong even when the data contains outliers. However, this is a common misconception...","0df221c1":"## **Decision Tree vs. Random Forest**","6c394602":"Our main objectives for any Exploratory Data Analysis should be the following:\n* Check for missing values\n* Know the data type of each variable\n* Observe the distribution of the data\n* Identify and deal with outliers\n* Make relevant conclusions about the data","6bce34ba":"The data was collected through surveys by the Central Bureau of Statistics that work under the National Planning Commission Secretariat of Nepal. This survey is one of the largest post-disaster datasets ever collected, containing valuable information on earthquake impacts, household conditions, and socio-economic-demographic statistics.","c678bb61":"## **Import Data**","c6af93ee":"This is a flag variable that indicates if the building was used for industrial purposes.","c1c78a0a":"Let's start by taking a look at how balanced our datasets really is.","f1caa2f7":"## **Import Libraries**","bec65f4e":"This is a flag variable that indicates if the building was used as a police station.","72059a3e":"# **Exploratory Data Analysis**","1beea7b4":"There are buildings in the dataset with up to 9 floors, but the majority of the affect had only 2.","0586d852":"This is a flag variable that indicates if the building was secondarily used for other purposes.","9b0bab08":"For this Kernel, I decided to give it a shoot at the drivendata.org competition: \"**Richter's Predictor: Modeling Earthquake Damage.**\" Based on aspects of building location and construction, your goal is to predict the level of damage to buildings caused by the 2015 Gorkha earthquake in Nepal.","e2af5749":"The dataset looks very clean and we don't seem to have any missing data.","296fd5e4":"This is a flag variable that indicates if the building was used for agricultural purposes."}}