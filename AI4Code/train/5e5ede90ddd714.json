{"cell_type":{"4c1f8c7d":"code","16a8a072":"code","e6304962":"code","819b8f33":"code","34cf8327":"code","453c2940":"code","85421735":"code","2f95e3bd":"code","270a1fa7":"code","deece4ae":"code","c836a424":"code","d74567d4":"code","f25fccf4":"code","a3079376":"code","94a5f8e1":"code","95cb10c5":"code","116bab3b":"code","3d86a753":"code","180bda29":"code","0dcdfba0":"code","0c9e6eb1":"code","e3765a6c":"code","fe321a6e":"code","473aa114":"code","d174badd":"markdown","1afc6dcb":"markdown","f81196af":"markdown","be2eaa35":"markdown","f4cf0f46":"markdown","c447eac2":"markdown","a934dc2a":"markdown","4b428ea6":"markdown","079d60e3":"markdown","50c93579":"markdown","893a6dd3":"markdown","7164ee2b":"markdown","dbf475fa":"markdown"},"source":{"4c1f8c7d":"import pandas as pd\nimport numpy as np\nimport seaborn as sbn\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\nfrom matplotlib.ticker import AutoMinorLocator\nimport os","16a8a072":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz, plot_tree\nimport graphviz","e6304962":"from sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix","819b8f33":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nData = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\npd.set_option(\"display.max_columns\", 7)\nData.head()","34cf8327":"# \"class\" to Binary data (\"Abnormal\" = 1, \"Normal\" = 0)\nData[\"class\"] = np.where(Data[\"class\"] == \"Abnormal\", 1, 0)","453c2940":"Data.head()","85421735":"Missing_values_percent = 100*(Data.isnull().sum()\/len(Data[\"class\"]))\nprint(Missing_values_percent)","2f95e3bd":"Data.dtypes","270a1fa7":"sbn.pairplot(Data, hue = \"class\")\nplt.show()","deece4ae":"plt.figure(figsize = (14, 8))\nsbn.heatmap(Data.corr(), annot = True, vmin = -1, cmap = \"coolwarm\", linewidth = 2, linecolor=\"darkblue\")\nplt.show()","c836a424":"triu = np.triu(Data.corr())\nplt.figure(figsize = (14, 8))\nsbn.heatmap(Data.corr(), annot = True, vmin = -1, cmap = \"coolwarm\", mask = triu)\nplt.show()","d74567d4":"tril = np.tril(Data.corr())\nplt.figure(figsize = (14, 8))\nsbn.heatmap(Data.corr(), annot = True, vmin = -1, cmap = \"coolwarm\", mask = tril)\nplt.show()","f25fccf4":"Font1 = {\"family\": \"serif\", \"weight\": \"bold\", \"color\": \"darkred\", \"size\": 16}","a3079376":"Sacral_slope = np.array(Data[\"sacral_slope\"], dtype = float)\nPelvic_incidence = np.array(Data[\"pelvic_incidence\"], dtype = float)\nlumbar_lordosis_angle = np.array(Data[\"lumbar_lordosis_angle\"], dtype = float)\nSacral_slope = Sacral_slope.reshape(-1, 1)\nLinearModel = LinearRegression()\nLinearModel2 = LinearRegression()\nLinearModel.fit(Sacral_slope, Pelvic_incidence)\nLinearModel2.fit(Sacral_slope, lumbar_lordosis_angle)","94a5f8e1":"fig, axs = plt.subplots(nrows=1, ncols=2, figsize = (15, 7))\naxs[0].scatter(Sacral_slope, Pelvic_incidence, marker = \"o\", color = \"darkblue\")\naxs[0].plot(Sacral_slope, Sacral_slope*LinearModel.coef_ + LinearModel.intercept_, color = \"darkred\", linewidth = 2.6)\naxs[0].set_xlabel(\"Sacral slope\", fontdict = Font1)\naxs[0].set_ylabel(\"Pelvic incidence\", fontdict = Font1)\n# minor_locator - Major_locator\naxs[0].xaxis.set_minor_locator(AutoMinorLocator())\naxs[0].yaxis.set_minor_locator(AutoMinorLocator())\naxs[0].tick_params(axis = \"both\", direction = \"in\", labelcolor='black', labelsize=16, top = True, right = True)\naxs[0].tick_params(which = \"major\", direction = \"in\", color='black', length=7, width = 3)\naxs[0].tick_params(which = \"minor\", direction = \"in\", color='black', length=4, width = 2, top = True, right = True)\nfor axis in [\"left\", \"bottom\", \"right\", \"top\"]:\n    axs[0].spines[axis].set_linewidth(1.4)\naxs[1].scatter(Sacral_slope, lumbar_lordosis_angle, marker = \"o\", color = \"darkblue\")\naxs[1].plot(Sacral_slope, Sacral_slope*LinearModel2.coef_ + LinearModel2.intercept_, color = \"darkred\", linewidth = 2.6)\naxs[1].set_xlabel(\"Sacral slope\", fontdict = Font1)\naxs[1].set_ylabel(\"Lumbar lordosis angle\", fontdict = Font1)\n# minor_locator - Major_locator\naxs[1].xaxis.set_minor_locator(AutoMinorLocator())\naxs[1].yaxis.set_minor_locator(AutoMinorLocator())\naxs[1].tick_params(axis = \"both\", direction = \"in\", labelcolor='black', labelsize=16, top = True, right = True)\naxs[1].tick_params(which = \"major\", direction = \"in\", color='black', length=7, width = 3)\naxs[1].tick_params(which = \"minor\", direction = \"in\", color='black', length=4, width = 2, top = True, right = True)\nfor axis in [\"left\", \"bottom\", \"right\", \"top\"]:\n    axs[1].spines[axis].set_linewidth(1.4)    \nplt.show()","95cb10c5":"x = Data.drop([\"class\"], axis = 1)\ny = Data[\"class\"]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33, random_state = 45)","116bab3b":"ModelTree = DecisionTreeClassifier()","3d86a753":"criterion = [\"gini\", \"entropy\"]\nmax_depth = np.array([3, 4, 5, 6, 7, 8, 9])\nmin_samples_split = np.array([3, 4, 5, 6, 7, 8, 9])\nparam_grid = {\"criterion\": criterion, \"max_depth\": max_depth, \"min_samples_split\": min_samples_split}\nGridTree = GridSearchCV(estimator = ModelTree, param_grid = param_grid, cv = 5)\nGridTree.fit(x_train, y_train)\nprint(f\"best criterion: {GridTree.best_estimator_.criterion}\")\nprint(f\"max_depth: {GridTree.best_estimator_.max_depth}\")\nprint(f\"min_samples_split: {GridTree.best_estimator_.min_samples_split}\")","180bda29":"ModelTree = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 3, min_samples_split=3)\nModelTree.fit(x_train, y_train)","0dcdfba0":"dot_data = export_graphviz(ModelTree, out_file=None, feature_names=list(x_train.columns), filled=True, rounded=True, special_characters=True)\ngraph = graphviz.Source(dot_data) \ngraph","0c9e6eb1":"y_pred = ModelTree.predict(x_test)","e3765a6c":"confusion_matrix = confusion_matrix(y_test, y_pred)","fe321a6e":"plt.figure(figsize = (10,7))\nsbn.heatmap(confusion_matrix, annot = True, vmin = 0, vmax = 70, cmap = \"coolwarm\", linewidth = 2, linecolor=\"darkred\")\nplt.xlabel(\"Predict Values\")\nplt.ylabel(\"True Values\")\nplt.show()","473aa114":"print(f\"Accuracy = {accuracy_score(y_test, y_pred)}\")\nprint(f\"precision_score = {precision_score(y_test, y_pred)}\")\nprint(f\"recall_score = {recall_score(y_test, y_pred)}\")\nprint(f\"f1_score = {f1_score(y_test, y_pred)}\")","d174badd":"${\\color{green}{\\textbf{There are NO missing values in the dataset!!}}}$","1afc6dcb":"${\\color{green}{\\textbf{Prediction}}}$","f81196af":"${\\color{green}{\\textbf{3.1 Missing Values Treatment}}}$","be2eaa35":"${\\color{green}{\\textbf{Scoring}}}$","f4cf0f46":"${\\color{green}{\\textbf{Pelvic incidence x Sacral slope and lumbar lordosis angle x Sacral slope}}}$","c447eac2":"# 2. Reading the data","a934dc2a":"# 4. Decision Tree Classifier","4b428ea6":"# 1. Importing Libraries","079d60e3":"${\\color{green}{\\textbf{Confusion matrix}}}$","50c93579":"${\\color{green}{\\textbf{3.2 Dtypes}}}$","893a6dd3":"# 3. Data Preprocessing","7164ee2b":"${\\color{green}{\\textbf{3.4 Data split}}}$","dbf475fa":"${\\color{green}{\\textbf{3.3 Correlation}}}$"}}