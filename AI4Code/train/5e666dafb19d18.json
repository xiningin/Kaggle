{"cell_type":{"c1ff5a33":"code","ce21182f":"code","7d2015cc":"code","aacb588f":"code","40894bfa":"code","8bfe94b1":"code","66f14761":"code","6a5766f6":"code","b517cd52":"code","1679b869":"code","66ff6371":"code","c8e46fec":"code","7a946ede":"code","ff9e65e9":"code","4d440d2b":"code","b36b04a5":"code","5b95b3e0":"code","33001876":"code","32a169a7":"code","917f8deb":"code","9ec87113":"code","7bf56a07":"code","a0942add":"markdown","af6a4343":"markdown","8d95f70c":"markdown"},"source":{"c1ff5a33":"import pandas as pd","ce21182f":"df = pd.read_csv('Raw data\/ball_by_ball.csv')\ndf_player = pd.read_csv('Raw data\/player.csv')\ndf_match = pd.read_csv('Raw data\/match.csv')\ndf_player_match = pd.read_csv('Raw data\/player_match.csv')\ndf_season = pd.read_csv('Raw data\/season.csv')\ndf_team = pd.read_csv('Raw data\/team.csv')","7d2015cc":"class player_profile:\n    def __init__(self,id):\n        self.id = id\n        self.detailed_scores = [0,0,0,0,0,0,0]\n        self.score = []\n        self.total_runs = 0\n        self.match_ids = set(df_player_match[df_player_match['Player_Id'] == self.id]['Match_Id'])\n        self.dismissal_types = list(df[(df['Bowler_Id']==self.id)]['Dissimal_Type'])\n        self.match_wise_scores = [0]\n        self.no_of_dissmals = 0\n        self.no_of_wickets = 0\n        self.number_of_overs_bowled = 0\n        self.dismissal_types = []\n        self.matchwise_wickets = [0]\n        self.runsgiven_match_wise = [0]\n        self.feldingtype = list(df[df['Fielder_Id'] == self.id]['Dissimal_Type'])\n        self.runouts = 0\n        self.catches = 0\n        self.stumps = 0\n        self.orangecap = 0\n        self.purplecap = 0\n        self.playerofseries = 0\n        self.batting_average = 0.00\n        self.bowling_average = 0.00\n        self.strike_rate = 0.00\n        self.economy_rate = 0.00\n        self.numofballs = 0\n        self.number_of_wickets = 0\n        \n        \n    def get_scores(self):\n        lis = list(df[df['Striker_Id'] == self.id]['Batsman_Scored'].values)\n        self.score = [int(x) for x in lis if x not in [' ','Do_nothing'] ]\n        self.total_runs = sum(self.score)\n        for i in self.score:\n            self.detailed_scores[i]+=1\n    \n    def get_number_of_fours(self):\n        return(self.detailed_scores[4])\n    \n    def get_number_of_sixes(self):\n        return(self.detailed_scores[6])\n    \n    def get_number_of_dot_balls(self):\n        return(self.detailed_scores[0])\n    \n    def get_total_runs(self):\n        return(self.total_runs)\n    \n    def get_total_num_of_balls(self):\n        self.numofballs = sum(self.detailed_scores)\n    \n    def get_total_matches(self):\n        return(len(self.match_ids))\n    \n    def get_match_wise_scores(self):\n        for i in self.match_ids:\n            s = list(df[(df['Striker_Id'] == self.id ) & (df['Match_Id']==i)]['Batsman_Scored'].values)\n            s = [int(x) for x in s if x not in [' ','Do_nothing'] ]\n            self.match_wise_scores.append(sum(s))\n            \n    def number_of_half_centuries(self):\n        count = 0\n        for i in self.match_wise_scores:\n            if (i>=50) and (i<100):\n                count+=1\n        return(count)\n    \n    def number_of_centuries(self):\n        count = 0\n        for i in self.match_wise_scores:\n            if (i>=100) and (i<200):\n                count+=1\n        return(count)\n    \n    def number_of_ducks(self):\n        count = 0\n        for i in self.match_wise_scores:\n            if i == 0:\n                count+=1\n        return (count)\n    \n    def get_best_score(self):\n        return(max(self.match_wise_scores))\n    \n    def  get_number_of_outs(self):\n        li = list(df[df['Player_dissimal_Id']==str(self.id)]['Player_dissimal_Id'].values)\n        li = [int(x) for x in li if x!=' ']\n        self.no_of_dissmals = len(li)\n        \n    \n    def get_number_of_wickets(self):\n        count = 0\n        for i in list(df[(df['Bowler_Id']==self.id)]['Dissimal_Type']):\n            if i in['bowled','caught','caught and bowled','lbw','stumped']:\n                count+=1\n        return(count)\n        \n    def get_number_of_oversbowled(self):\n        overs = []\n        for i in self.match_ids:\n            li = set(df[(df['Bowler_Id']==self.id) & (df['Match_Id']==i)]['Over_Id'])\n            overs.append(len(li))\n        self.number_of_overs_bowled = sum(overs)\n        return(self.number_of_overs_bowled)\n    \n    def get_match_wise_wicket(self):\n        for i in self.match_ids:\n            li = list(df[(df['Bowler_Id']==self.id) & df['Match_Id']==i]['Dissimal_Type'])\n            l = []\n            for x in li :\n                if x in ['bowled','caught','caught and bowled','lbw','stumped']:\n                    l.append(x)\n            self.matchwise_wickets.append(len(l))\n    \n    def highest_wickets(self):\n        return(max(self.matchwise_wickets))\n    \n    def fifersinamatch(self):\n        return(self.matchwise_wickets.count(5))\n    \n    def get_number_of_runs_given(self):\n        for i in self.match_ids:\n            li = list(df[(df['Bowler_Id']==self.id) & (df['Match_Id']==i)]['Batsman_Scored'])\n            li = [int(x) for x in li if x not in [' ','Do_nothing']]\n            self.runsgiven_match_wise.append(sum(li))\n    \n    def highest_runs_given(self):\n        return(max(self.runsgiven_match_wise))\n    \n    \n    def number_of_catches(self):\n        feldingtype = list(df[df['Fielder_Id'] == self.id]['Dissimal_Type'])\n        self.catches = feldingtype.count(['caught','caught and bowled'])\n        return(self.catches)\n    \n    def number_of_runouts(self):\n        self.runouts = self.feldingtype.count('run out')\n        return(self.runouts)\n    \n    def number_of_stumps(self):\n        self.stumps = self.feldingtype.count('stumped')\n        return(self.stumps)\n    \n    def number_of_orangecaps(self):\n        li = list(df_season['Orange_Cap_Id'])\n        self.orangecap = li.count(self.id)\n        return(self.orangecap)\n    \n    def number_of_purplecaps(self):\n        li = list(df_season['Purple_Cap_Id'])\n        self.purplecap = li.count(self.id)\n        return(self.purplecap)\n    \n    def number_of_series(self):\n        li = list(df_season['Man_of_the_Series_Id'])\n        self.playerofseries = li.count(self.id)\n        return(self.playerofseries)\n    \n    def battingaverage(self):\n        if self.no_of_dissmals !=0:\n            self.batting_average = (self.total_runs)\/(self.no_of_dissmals)\n        else:\n            self.batting_average = 0\n        return(self.batting_average)\n    \n    def bowlingaverage(self):\n        self.bowling_average = (sum(self.runsgiven_match_wise))\/\/(sum(self.matchwise_wickets))\n    def strikerate(self):\n        if self.numofballs !=0:\n            self.strike_rate = (self.total_runs*100)\/(self.numofballs)\n        else:\n            self.strike_rate = 0\n        return(self.strike_rate)\n    \n    def economy(self):\n        self.economy_rate = (sum(self.runsgiven_match_wise))\/\/(self.number_of_overs_bowled)\n        return(self.economy_rate)\n                ","aacb588f":"li = []\nfor i in list(df_player.Player_Id):\n    a = player_profile(i)\n    a.get_scores()\n    a.get_number_of_outs()\n    a.get_total_num_of_balls()\n    li.append(a.strikerate())","40894bfa":"cricket_df['strike_rate'] = li\ncricket_df.to_csv('player_stats.csv')","8bfe94b1":"deliveries = pd.read_csv('deliveries.csv')\nmatches = pd.read_csv('matches.csv')","66f14761":"for i in range(60):\n    deliveries = df_deliveries[df_deliveries['match_id'] !=i]","6a5766f6":"matches['team1'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\nmatches['team2'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\n\nmatches['winner'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\nmatches['toss_winner'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\n\ndeliveries['batting_team'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\ndeliveries['bowling_team'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)","b517cd52":"def venue(id):\n    return(matches[matches['id'] == id]['venue'].values[0])\n\ndeliveries['venue'] = deliveries['match_id'].progress_map(venue)","1679b869":"def year(id):\n    return(matches[matches['id'] == id]['season'].values[0])\ndeliveries['year'] = deliveries['match_id'].progress_map(year)","66ff6371":"player_scores =  pd.DataFrame()\n\n\nli = []\n#getting players names\nli1 = list(deliveries['batsman'].values)\nli2 = list(deliveries['non_striker'].values)\nli3 = list(deliveries['bowler'].values)\nli = li1+li2+li3\nnames = set(li)\n\n\nplayer_scores['Names'] = list(names)\n\n\nli=[]\n#getting team names\nli1 = []\nli2 = []\nli1 = list(matches['team1'].values)\nli2 = list(matches['team2'].values)\nli = li1+li2\nli = set(li)\nteams = list(li)\n\n\nfor i in tqdm_notebook(range(len(teams)),desc = 'Adding columns to Dataframe:'):\n    player_scores.insert(i+1, teams[i], [0]*len(player_scores), True)\n\n    \nplayer_scores = player_scores.set_index('Names')\n\n\nfor i in tqdm_notebook(player_scores.index,desc=\"getting players scores\"):\n    for j in player_scores.columns:\n        s = sum(deliveries[(deliveries['batsman']==i) & (deliveries['bowling_team'] == j)]['batsman_runs'])\n        player_scores.loc[i,j] = s\n\n\n\nplayer_scores.head()","c8e46fec":"player_scores.to_csv(\"runs_aganist_teams.csv\")","7a946ede":"player_scores_venues = pd.DataFrame()\n\n#getting venues\nvenues = set(matches['venue'])\nvenues = list(venues)\n\nplayer_scores_venues['Names'] = list(names)\n\nfor i in tqdm_notebook(range(len(venues)),desc=\"Adding clomns to the data frame :\"):\n    player_scores_venues.insert(i+1, venues[i], [0]*len(player_scores_venues), True)\n\n\n\nplayer_scores_venues = player_scores_venues.set_index('Names')\n\n\nfor i in tqdm_notebook(player_scores_venues.index,desc =\"Getting players scores venues wise :\"):\n    for j in player_scores_venues.columns:\n        s = sum(deliveries[(deliveries['batsman']==i) & (deliveries['venue'] == j)]['batsman_runs'])\n        player_scores_venues.loc[i,j] = s\n\n\nplayer_scores_venues.head()","ff9e65e9":"player_scores_venues.to_csv(\"runs_in_venues.csv\")","4d440d2b":"player_wickets = pd.DataFrame()\n\nplayer_wickets['Names'] = list(names)\n\nfor i in tqdm_notebook(range(13),desc=\"Adding columns to the Data Frame\"):\n    player_wickets.insert(i+1, teams[i], [0]*len(player_scores), True)\n    \n    \nplayer_wickets = player_wickets.set_index('Names')\n\n\nfor i in tqdm_notebook(player_scores.index,desc=\"Getting player wickets:\"):\n    for j in player_scores.columns:\n        wickets = 0\n        s = list(deliveries[(deliveries['bowler']==i) & (deliveries['batting_team'] == j)]['dismissal_kind'])\n        for k in s:\n            if k in['caught','bowled','lbw','stumped','caught and bowled']:\n                wickets+=1\n        player_wickets.loc[i,j] = wickets\n\n\nplayer_wickets.head()","b36b04a5":"player_wickets.to_csv(\"wickets_aganist_teams.csv\")","5b95b3e0":"player_wickets_venues = pd.DataFrame()\n\nplayer_wickets_venues['Names'] = list(names)\n\nfor i in tqdm_notebook(range(len(venues)),desc=\"Adding columns to Data Frame\"):\n    player_wickets_venues.insert(i+1, venues[i], [0]*len(player_wickets_venues), True)\n    \nplayer_wickets_venues = player_wickets_venues.set_index('Names')\n\nfor i in tqdm_notebook(player_wickets_venues.index,desc=\"Getting players wickets venue wise\"):\n    for j in player_wickets_venues.columns:\n        wickets = 0\n        s = list(deliveries[(deliveries['bowler']==i) & (deliveries['venue'] == j)]['dismissal_kind'])\n        for k in s:\n            if k in['caught','bowled','lbw','stumped','caught and bowled']:\n                wickets+=1\n        player_wickets_venues.loc[i,j] = wickets\n\n        \nplayer_wickets_venues.head()","33001876":"player_wickets_venues.to_csv(\"wickets_in_venues.csv\")","32a169a7":"player_year_scores =  pd.DataFrame()\n\n\nli = []\n#getting players names\nli1 = list(deliveries['batsman'].values)\nli2 = list(deliveries['non_striker'].values)\nli3 = list(deliveries['bowler'].values)\nli = li1+li2+li3\nnames = set(li)\n\n\nplayer_year_scores['Names'] = list(names)\nyears = list(range(2008,2017))\n\n\n\n\n\nfor i in tqdm_notebook(range(len(years)),desc = 'Adding columns to Dataframe:'):\n    player_year_scores.insert(i+1, years[i], [0]*len(player_year_scores), True)\n\n    \nplayer_year_scores = player_year_scores.set_index('Names')\n\n\nfor i in tqdm_notebook(player_year_scores.index,desc=\"getting players scores\"):\n    for j in player_year_scores.columns:\n        s = sum(deliveries[(deliveries['batsman']==i) & (deliveries['year'] == j)]['batsman_runs'])\n        player_year_scores.loc[i,j] = s\n\n\n\nplayer_year_scores.head()","917f8deb":"player_year_scores.to_csv(\"year_wise_scores.csv\")","9ec87113":"player_year_wickets = pd.DataFrame()\n\nplayer_year_wickets['Names'] = list(names)\n\nfor i in tqdm_notebook(range(len(years)),desc=\"Adding columns to the Data Frame\"):\n    player_year_wickets.insert(i+1, years[i], [0]*len(player_year_wickets), True)\n    \n    \nplayer_year_wickets = player_year_wickets.set_index('Names')\n\n\nfor i in tqdm_notebook(player_year_wickets.index,desc=\"Getting player wickets:\"):\n    for j in player_year_wickets.columns:\n        wickets = 0\n        s = list(deliveries[(deliveries['bowler']==i) & (deliveries['year'] == j)]['dismissal_kind'])\n        for k in s:\n            if k in['caught','bowled','lbw','stumped','caught and bowled']:\n                wickets+=1\n        player_year_wickets.loc[i,j] = wickets\n\n\nplayer_year_wickets.head()","7bf56a07":"player_year_wickets.to_csv(\"year_wise_wickets.csv\")","a0942add":"<h3>This dataset is collected from <\/h3>\n\n-https:\/\/www.kaggle.com\/manasgarg\/ipl","af6a4343":"<h3>This data sets are collected from<\/h3>\n\n- https:\/\/www.kaggle.com\/harsha547\/indian-premier-league-csv-dataset\n","8d95f70c":"<h4> This note book is just a template for modifying the data from other datasets <\/h4>"}}