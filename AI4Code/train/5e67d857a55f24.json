{"cell_type":{"6076d187":"code","4d78facc":"code","9843cca4":"code","cb7a1be3":"code","52389397":"code","b7e2fbdc":"code","6e938583":"code","bd9c1045":"code","86c99fe2":"code","cfc8bcce":"code","755a356c":"code","aa58f4dc":"code","e4fde493":"code","6265a2ee":"code","fdc76bfa":"code","24acf9e9":"code","5638180b":"code","90f220b0":"markdown","19c763fa":"markdown","8ada8952":"markdown"},"source":{"6076d187":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d78facc":"df=pd.read_csv('\/kaggle\/input\/demodatapractice\/Train.csv')","9843cca4":"#Shows top five rows of dataframe\ndf.head()","cb7a1be3":"# Info of data frame in terms of elements in each row\ndf.info()","52389397":"#Calculate mean of each row\nprint(df.mean())","b7e2fbdc":"# calculate median of each row using\nprint(df.median())","6e938583":"#min and max value using\nprint(df['Age'].min())\nprint(df['Age'].max())","bd9c1045":"# FInd about the distribution of data\ndf.quantile(0.75)","86c99fe2":"#Print value count of each element in the column\ndf['Age'].value_counts()","cfc8bcce":"# print sum of attrition rate for the employee of same age\ndf.groupby(df['Age'])['Attrition_rate'].sum()","755a356c":"#Setting limit to display rows and columns to none to see complete dataframe\n#pd.options.display.max_rows=None\n#pd.options.display.max_columns=None","aa58f4dc":"df","e4fde493":"print(df.sort_values('Age',ascending=False))","6265a2ee":"print(df.sort_values(['Age','Time_of_service'],ascending=[False,True]))","fdc76bfa":"df.reset_index()","24acf9e9":"df=df.sort_index(level=['Age','Time_of_service'],ascending=[True,False])","5638180b":"df","90f220b0":"# Transforming Data\n## 1) sort_values('column_name', ascending= True\/False)\n## 2) sort_values(by=['region','family_members'],ascending=[True,False]) \/\/ multiple sorting\n## 3) agg() : to apply cutomize function on data set.\n## Example : unemp_fuel_stats = sales.groupby('type')['unemployment','fuel_price_usd_per_l'].agg(fuc_list)","19c763fa":"# Slicing and Indexing\n## 1) dfone=df.set_index('city') \/ to create a index name \n## 2) df.reset_index() : Index resetted while content is preserved.\n## 3) df.isin(condition) : Selects the data if it statisfy the condition\n###    Example:\n###    Make a list of cities to subset on\n###    cities = list([\"Moscow\",\"Saint Petersburg\"])\n###   Subset temperatures using square brackets\n###   print(temperatures[temperatures[\"city\"].isin(cities)])\n## 4) df.loc[value] : output the value from data frame\n## 5) df.sort_index(level=[\"country\",\"city\"],ascending=[True,False]))\n## 6) # Pivot avg_temp_c by country and city vs year\n#### temp_by_country_city_vs_year = temperatures.pivot_table(\"avg_temp_c\",index=['country','city'],columns='year')\n\t\n## 7) # Get the total number of avocados sold of each size\n### nb_sold_by_size = avocados.groupby(\"size\")[\"nb_sold\"].sum()","8ada8952":"# Summarizing data\n## 1)  df.head(): shows top 5 rows\n## \t2) df.info() : shows the datatype and number of elements in df\n## \t3) df.mean() : Calculate mean of each columns in dataframe\n## \t4) df.max(), df['column'].max() : Max of each column \/ max of column specified\n## \t5) df.min()\n## \t6) df.drop_duplicates()\n## \t7) column.quantile():\n## \t8) df['column'].value_counts() : give frequency of each element in the column\n## \t9) # Subset for type A stores, calc total weekly sales\n##        sales_A = sales[sales[\"type\"] == \"A\"][\"weekly_sales\"].sum()\n## \t10) sales.groupby(['type','is_holiday'])[\"weekly_sales\"].sum()"}}