{"cell_type":{"4a7a23f4":"code","40e08323":"code","98598efa":"code","6270407e":"code","8ecc2119":"code","3742bf19":"code","a2a00237":"code","58bde0d2":"code","5f80eb0c":"code","1d0ffc4b":"code","646f7d98":"code","1eabfdb1":"code","49ac91a2":"code","1216a3fa":"code","1fad27e2":"code","4250cbe8":"code","c67e329e":"code","dc81905f":"markdown","5800904d":"markdown","1afb4a4a":"markdown","de3c186a":"markdown","9f94a5c5":"markdown","f3896644":"markdown","5f05886f":"markdown","57611156":"markdown","7a921ea8":"markdown","c41a8680":"markdown"},"source":{"4a7a23f4":"#Gabriel Faustino Lima da Rocha, Matricula 190013249\n#Introdu\u00e7\u00e3o a intelegencia artificial 2021.1\n#Professor: D\u00edbio\n\n#algumas partes do C\u00f3digo foram retiradas do pr\u00e1tica de referencia disponibilizada pelo professor\n\n\n\nimport pandas as pd       \nimport matplotlib as mat\nimport matplotlib.pyplot as plt    \nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\npd.options.display.max_colwidth = 100\n\nimport random\nimport os\n\nfrom numpy.random import seed\nseed(42)\n\nrandom.seed(42)\nos.environ['PYTHONHASHSEED'] = str(42)\nos.environ['TF_DETERMINISTIC_OPS'] = '1'\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport glob\nimport cv2\n\nfrom tensorflow.random import set_seed\nset_seed(42)\n\nimport warnings\nwarnings.filterwarnings('ignore')","40e08323":"IMG_SIZE = 150\nBATCH = 32\nSEED = 42\n\nMAIN_PATH = \"..\/input\/labeled-chest-xray-images\/chest_xray\"\n\n#caminho do treino\nTRAIN_PATH = os.path.join(MAIN_PATH,\"train\")\n#caminho dos testes\nTEST_PATH = os.path.join(MAIN_PATH,\"test\")\n\nTRAIN_NORMAL = glob.glob(TRAIN_PATH+\"\/NORMAL\/*.jpeg\")\n\nTRAIN_PNEUMONIA = glob.glob(TRAIN_PATH+\"\/PNEUMONIA\/*.jpeg\")\n\nTEST_NORMAL = glob.glob(TEST_PATH+\"\/NORMAL\/*.jpeg\")\n\nTEST_PNEUMONIA = glob.glob(TEST_PATH+\"\/PNEUMONIA\/*.jpeg\")","98598efa":"train_list = [x for x in TRAIN_NORMAL]\n\ntrain_list.extend([x for x in TRAIN_PNEUMONIA])\n\ndf_train = pd.DataFrame(np.concatenate([['Normal']*len(TRAIN_NORMAL) , \n                                        ['Pneumonia']*len(TRAIN_PNEUMONIA)]), columns = ['class'])\ndf_train['image'] = [x for x in train_list]\n\ntest_list = [x for x in TEST_NORMAL]\n\ntest_list.extend([x for x in TEST_PNEUMONIA])\n\ndf_test = pd.DataFrame(np.concatenate([['Normal']*len(TEST_NORMAL) , \n                                       ['Pneumonia']*len(TEST_PNEUMONIA)]), columns = ['class'])\ndf_test['image'] = [x for x in test_list]","6270407e":"df_train","8ecc2119":"df_test","3742bf19":"plt.figure(figsize=(6,4))\n\nax = sns.countplot(x = 'class', data = df_train, palette = \"viridis\")\n\nplt.title(\"Treino\", fontsize = 14)\nplt.xlabel(\"Classe\", fontsize = 12)\n \nplt.ylabel(\"N\u00famero de Amostras\", fontsize = 12)\nplt.ylim(0,5000 )\nplt.xticks([0 ,1], ['Normal', 'Pneumonia'], fontsize = 11)\n\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x() + 0.30, p.get_height() + 300), fontsize = 13)\n    \nplt.show()","a2a00237":"plt.figure(figsize = (7,5))\n\ndf_train['class'].value_counts().plot(kind = 'pie',labels = ['',''], autopct= '%1.1f%%', colors = ['blue','salmon'], explode = [0,0.05], textprops = {\"fontsize\":15})\n\nplt.title(\"Treino\", fontsize = 14)\n\nplt.legend(labels=['Pneumonia' ,  'Normal'])\nplt.show()","58bde0d2":"plt.figure(figsize=(6,4))\n\nax = sns.countplot(x='class', data=df_test, palette=\"viridis\")\nplt.title(\"Teste\", fontsize = 14)\n\nplt.xlabel(\"Classe\", fontsize= 12)\nplt.ylabel(\"N\u00famero de amostras\", fontsize= 12)\nplt.ylim(0,500)\nplt.xticks([0,1], ['Normal', 'Pneumonia'], fontsize = 11)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.32, p.get_height()+20), fontsize = 13)\n    \nplt.show()","5f80eb0c":"plt.figure(figsize = (7,5))\n\nplt.title(\"Teste\", fontsize = 14)\n\ndf_test['class'].value_counts().plot(kind = 'pie',labels = ['',''], autopct='%1.1f%%', colors = ['blue','salmon'], explode = [0,0.05], textprops = {\"fontsize\":15})\n\nplt.legend(labels=['Pneumonia', 'Normal'])\nplt.show()","1d0ffc4b":"# Preparando os dados","646f7d98":"train_df, val_df = train_test_split(df_train, test_size = 0.20, random_state = SEED, stratify = df_train['class'])\n\ntrain_df","1eabfdb1":"val_df","49ac91a2":"train_datagen = ImageDataGenerator(rescale=1\/255., zoom_range = 0.1, width_shift_range = 0.1,\n                                  height_shift_range = 0.1)\n\nval_datagen = ImageDataGenerator(rescale=1\/255.)\n\nds_train = train_datagen.flow_from_dataframe(train_df, x_col = 'image', y_col = 'class', \n                                             target_size = (IMG_SIZE, IMG_SIZE), class_mode = 'binary',\n                                             batch_size = BATCH, seed = SEED)\n\nds_val = val_datagen.flow_from_dataframe(val_df,x_col = 'image', y_col = 'class', \n                                         target_size = (IMG_SIZE, IMG_SIZE),\n                                         class_mode = 'binary', batch_size = BATCH, seed = SEED)\n\nds_test = val_datagen.flow_from_dataframe(df_test, x_col = 'image', y_col = 'class',\n                                            target_size = (IMG_SIZE, IMG_SIZE), class_mode = 'binary',\n                                            batch_size = 1, shuffle = False)","1216a3fa":"early_stopping = callbacks.EarlyStopping(\n    monitor='val_loss',\n    patience=5,\n    min_delta=0.0000001,\n    restore_best_weights=True,\n)\n\nplateau = callbacks.ReduceLROnPlateau(\n    monitor='val_loss',\n    factor = 0.2,                                     \n    patience = 2,                                   \n    min_delt = 0.0000001,                                \n    cooldown = 0,                               \n    verbose = 1\n) ","1fad27e2":"def get_model():\n    \n    #Input shape = [width, height, color channels]\n    inputs = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))\n    \n    # Block One\n    x = layers.Conv2D(filters=1, kernel_size=3, padding='valid')(inputs)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation('relu')(x)\n    x = layers.MaxPool2D()(x)\n\n    # Block Two\n    x = layers.Conv2D(filters=3, kernel_size=3, padding='valid')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation('relu')(x)\n    x = layers.MaxPool2D()(x)\n    \n    # Block Three\n    x = layers.Conv2D(filters=6, kernel_size=3, padding='valid')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation('relu')(x)\n    x = layers.MaxPool2D()(x)\n    x = layers.Dropout(0.5)(x)\n\n    # Head\n    #x = layers.BatchNormalization()(x)\n    x = layers.Flatten()(x)\n    x = layers.Dense(128, activation='relu')(x)\n    x = layers.Dropout(0.5)(x)\n    \n    #Final Layer (Output)\n    output = layers.Dense(1, activation='sigmoid')(x)\n    \n    model = keras.Model(inputs=[inputs], outputs=output)\n    \n    return model","4250cbe8":"keras.backend.clear_session()\n\nmodel = get_model()\nmodel.compile(loss='binary_crossentropy'\n              , optimizer = keras.optimizers.Adam(learning_rate=0.00003), metrics='binary_accuracy')\n\nmodel.summary()","c67e329e":"history = model.fit(ds_train,\n          batch_size = BATCH, epochs = 100,\n          validation_data=ds_val,\n          callbacks=[early_stopping, plateau],\n          steps_per_epoch=(len(train_df)\/BATCH),\n          validation_steps=(len(val_df)\/BATCH));","dc81905f":"<h1 style=\"text-align: center;\">Detec\u00e7\u00e3o de Pneumonia utilizando Redes Neuronais Convolucionais <\/h1>","5800904d":"# Explorando os dados","1afb4a4a":"# Introdu\u00e7\u00e3o\n\nA projeto prop\u00f5e a implementa\u00e7\u00e3o de uma Rede Neuro Convolucional(RNC) para detectar com base nos dados dispon\u00edveis clicando <a href=\"https:\/\/www.kaggle.com\/tolgadincer\/labeled-chest-xray-images\">aqui<\/a>. A RNC a ser implementada \u00e9 baseada no modelo de Lian e Zheng. Ap\u00f3s a implementa\u00e7\u00e3o e execi\u00e7\u00e3o deve-se comparar os resultados obtidos com os obetidos por <a href=\"https:\/\/www.kaggle.com\/jonaspalucibarbosa\/chest-x-ray-pneumonia-cnn-transfer-learning\/notebook\">Jonas Paluci <\/a>. Os dados consistem de imagens da regi\u00e3o pulmonar de pacientes com e sem pneumonia, parao trieno da RNC.","de3c186a":"<h4 style=\"text-align: center; font-weight: 400;\">Universidade de Bras\u00edlia - Departamento de Ci\u00eancia da Computa\u00e7\u00e3o<br>Introdu\u00e7\u00e3o \u00e0 Intelig\u00eancia Artificial - Professor Dr. Dibio Leandro Borges <br> Pr\u00e9dio CIC\/EST - Campus Universit\u00e1rio Darcy Ribeiro <br>","9f94a5c5":"# V\u00e1ri\u00e1veis utilizadas para definir o caminho das imagens","f3896644":"# Definindo o Modelo","5f05886f":"# Imports Utilizados e caba\u00e7alho","57611156":"# Carregando e preparando as imagens para o modelo","7a921ea8":"# Cria\u00e7\u00e3o do data Frame no pandas","c41a8680":"<h2 style=\"text-align: center\">Gabriel Faustino Lima da Rocha<\/h2>"}}