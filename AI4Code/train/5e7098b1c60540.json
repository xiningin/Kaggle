{"cell_type":{"b52c57b3":"code","9c984749":"code","65c4b8cc":"code","c22ed3c9":"code","9ecbbec6":"code","7206784c":"code","c323f321":"code","3a95f722":"code","89c649c2":"code","14e3d3dc":"code","61178b3a":"code","7fc03b23":"code","aad70228":"code","40c69e82":"code","2f07f500":"code","a1cfcd4e":"code","f6dcf4d7":"code","dfad41f7":"code","7dd5d740":"code","d7f9611e":"code","36448274":"code","0ba49d33":"code","7925d32a":"code","6e5c33de":"code","28b12d92":"code","c3943312":"code","e22f80ad":"code","51eeebe9":"code","151b7512":"code","962ad330":"code","a6e95713":"code","e70cbc1e":"code","7f245cf6":"code","ea08cb97":"code","8061b71b":"code","22d7abbe":"code","cc97358d":"code","870053b7":"code","1b0226a0":"code","019e962c":"code","85a4401f":"code","edbc27ab":"code","f5829542":"code","d199404d":"code","61cc58cc":"code","ab68df20":"code","37c37c11":"code","87c8c068":"code","8cf2519c":"code","b3ed2c34":"code","f4dc134d":"code","f6c09571":"code","e65f7c82":"code","e0201a18":"code","1ecce1fc":"code","d22d3816":"code","0e6f2191":"code","67c8d92f":"code","fd3499ca":"code","45b08ad9":"code","c1ca208c":"code","4ac5cf8f":"markdown","54314138":"markdown","af155d40":"markdown"},"source":{"b52c57b3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n","9c984749":"df = pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv', sep=\"\\t\")","65c4b8cc":"df.head()","c22ed3c9":"df.shape","9ecbbec6":"df.isna().sum()","7206784c":"df.dtypes","c323f321":"df.dropna(inplace=True)\ndf.shape","3a95f722":"df['Dt_Customer'].max()","89c649c2":"df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'])\ndf['Customers_for'] = (df['Dt_Customer'] -  df['Dt_Customer'].max()).dt.days\ndf['Customers_for'] = -df['Customers_for']","14e3d3dc":"df['Age'] = 2015-df['Year_Birth']","61178b3a":"df.head(3)","7fc03b23":"df['Marital_Status'].unique()","aad70228":"df['Marital_Status'].replace({'Single':'not in a relationship', 'Together':'in a relationship', 'Married': 'in a relationship', 'Divorced': 'not in a relationship', 'Widow': 'not in a relationship', 'Alone': 'not in a relationship', 'Absurd': 'not in a relationship', 'YOLO': 'not in a relationship'}, inplace = True)","40c69e82":"df['Marital_Status'].unique()","2f07f500":"df['Children'] = df['Kidhome'] + df['Teenhome']","a1cfcd4e":"df.head(1)","f6dcf4d7":"df['Children'] = df['Children'].astype(str)\ndf['Children'].replace({'0': 'No', '1': 'Yes', '2': 'Yes', '3': 'Yes'}, inplace = True)","dfad41f7":"df['Total_discount_acpt'] = df['AcceptedCmp1'] + df['AcceptedCmp2'] + df['AcceptedCmp3'] + df['AcceptedCmp4'] + df['AcceptedCmp5']","7dd5d740":"df[\"Spent\"] = df[\"MntWines\"]+ df[\"MntFruits\"]+ df[\"MntMeatProducts\"]+ df[\"MntFishProducts\"]+ df[\"MntSweetProducts\"]+ df[\"MntGoldProds\"]","d7f9611e":"df.rename(columns={'MntWines': 'Wines', 'MntFruits': 'Fruits', 'MntMeatProducts': 'Meat', 'MntFishProducts': 'Fish', 'MntSweetProducts': 'Sweet', 'MntGoldProds': 'Gold'}, inplace = True)\ndf.rename(columns={'NumDealsPurchases': 'DealsPurchases', 'NumWebPurchases': 'WebPurchases', 'NumCatalogPurchases': 'CatalogPurchases', 'NumStorePurchases': 'StorePurchases', 'NumWebVisitsMonth': 'WebVisitsMonth'}, inplace = True)","36448274":"df.drop(['Year_Birth', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Z_CostContact', 'Z_Revenue', 'AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Response'], inplace = True, axis = 1)","0ba49d33":"df.head(1)","7925d32a":"import seaborn as sns","6e5c33de":"sns.set(rc = {'figure.figsize':(15,10)})\nsns.boxplot(data=df)","28b12d92":"cols = ['Income', 'Age'] # one or more\n\nQ1 = df[cols].quantile(0.25)\nQ3 = df[cols].quantile(0.75)\nIQR = Q3 - Q1\n\ndf = df[~((df[cols] < (Q1 - 1.5 * IQR)) |(df[cols] > (Q3 + 1.5 * IQR))).any(axis=1)]\n ","c3943312":"df.head(1)","e22f80ad":"df1 = df.copy()","51eeebe9":"df1.drop(columns=['ID', 'Spent'], inplace = True)","151b7512":"df1['Education'].unique()","962ad330":"\"\"\"df = pd.get_dummies(df, columns=['Education', 'Marital_Status'], drop_first=True)\ndf.head()\nfrom sklearn.preprocessing import OrdinalEncoder\nenc = OrdinalEncoder()\nX = [['2n Cycle', 0], ['Basic', 1], ['Graduation', 2], ['Master', 3], ['PhD', 4]]\nenc.fit(X)\nenc.transform(df[''])\"\"\"","a6e95713":"df1.shape","e70cbc1e":"df1 = pd.get_dummies(df1, columns=['Marital_Status'], drop_first=True)","7f245cf6":"from sklearn.preprocessing import OrdinalEncoder","ea08cb97":"enc = OrdinalEncoder()\nX = [['2n Cycle', 0], ['Basic', 1], ['Graduation', 2], ['Master', 3], ['PhD', 4]]\nenc.fit(X)\ndf1[[\"Education\"]] = enc.fit_transform(df1[['Education']])","8061b71b":"Xs = [['Yes', 1], ['No', 0]]\nenc.fit(Xs)\ndf1[[\"Children\"]] = enc.fit_transform(df1[['Children']])","22d7abbe":"df1.head()","cc97358d":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()","870053b7":"ss.fit(df1)\nssdf1 = pd.DataFrame(ss.transform(df1),columns= df1.columns )\nssdf1.head()","1b0226a0":"from sklearn.decomposition import PCA","019e962c":"pca = PCA(n_components=3)","85a4401f":"pca.fit(ssdf1)\npca_df = pd.DataFrame(pca.transform(ssdf1), columns = ['col1', 'col2', 'col3'])\n","edbc27ab":"pca.explained_variance_ratio_","f5829542":"import plotly.graph_objects as go","d199404d":"x = pca_df['col1']\ny = pca_df['col2']\nz = pca_df['col3']\n\nfig = plt.figure()\n\nax = plt.axes(projection = '3d')\nax.set_facecolor('#fff')\nax.scatter3D(x, y, z, c='#FF8C90')\n\nplt.show()","61cc58cc":"from yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import KMeans","ab68df20":"k = range(1,20)\ninertias = []\n\nfor i in k:\n  model = KMeans(n_clusters=i)\n  model.fit(pca_df)\n  inertias.append(model.inertia_)\n\n\nplt.plot(k, inertias, '-o')\nplt.xlabel('K')\nplt.ylabel('ineria')\nplt.xticks(k)\nplt.show()\n\n\n","37c37c11":"k_means = KMeans(n_clusters = 4, random_state = 50)\ny_pred = k_means.fit_predict(pca_df)\npca_df['Cluster'] = y_pred","87c8c068":"ax = plt.axes(projection = '3d')\nax.scatter(x, y, z, c=pca_df['Cluster'], cmap = 'magma')\nplt.show()","8cf2519c":"df['Cluster'] = y_pred","b3ed2c34":"df.head(1)","f4dc134d":"\nsns.countplot(x=df['Cluster'], palette = 'crest')","f6c09571":"#fig, ax = plt.subplots(1, 2, constrained_layout = True)\nsns.set(rc = {'figure.figsize':(10,8)}, palette = 'magma')\nsns.scatterplot(data=df, x='Income', y='Spent', hue='Cluster',palette = 'magma')\n","e65f7c82":"sns.set(rc = {'figure.figsize':(7,5)})","e0201a18":"df.head(1)","1ecce1fc":"profile = ['Education', 'Marital_Status', 'Children']\n\nfor i in profile:\n  plt.figure()\n  sns.countplot(x='Cluster', data=df, hue=df[i],palette = 'magma')\n  plt.show()","d22d3816":"\nsns.kdeplot(data=df, x='Age', hue='Cluster')","0e6f2191":"df.sample(1)","67c8d92f":"df.groupby('Cluster')[['WebPurchases', 'CatalogPurchases', 'StorePurchases']].agg('mean').plot(kind='bar')","fd3499ca":"sns.barplot(y=df['DealsPurchases'], x=df.Cluster)","45b08ad9":"for i in ['Recency', 'WebVisitsMonth', 'Complain', 'Customers_for']:\n  plt.figure()\n  sns.barplot(x='Cluster', y=df[i], data=df)","c1ca208c":"df.groupby('Cluster')[['Wines', 'Fruits', 'Meat', 'Fish', 'Sweet', 'Gold']].agg('mean').plot(kind='bar')","4ac5cf8f":"### Cleaning","54314138":"### Conclusion","af155d40":"\nCluster 2: Lowest to moderate income **lowest spent**. , \n\n*   Age: mostly around 40s, relatively younger than 1 and 2\n*   Mostly have kids.\n*   Dont like to purchase with catalog.\n*   Frequently visit product through website\n\nCluster 3: Moderate to high income > **High spent**.  \n*   More the 2\/3 of them dont have children. \n*   Like to buy things with discount\n*   Also likes to buy Gold besides Wines and Meat\n\nCluster 0: Moderate income > **low spent**. \n*   Mostly have kids. \n*   Dont like to purchase with catalog. Like to buy things with discount\n*   Frequently visit product through website\n\nCluster 1: Highest income > **Highest Spent**.  \n*   Mostly dont have children, half of them arent in a relationship. \n*   Proportion of higher education is higher than the others.\n*   Like to purchase using catalog and directly at store. \n*   Besides Wines and Meat, these customers also equally like to purchase Fruits, Fish, Sweet,  Gold"}}