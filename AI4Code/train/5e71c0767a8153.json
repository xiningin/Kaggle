{"cell_type":{"08b06be6":"code","201a9178":"code","1602fc51":"code","5f1135be":"code","eeb39866":"code","e0e1a4be":"code","8f770a3a":"code","9fd0972c":"code","fde755af":"code","1b1b3462":"code","4c5f7251":"code","102b02f7":"code","b9fbd1e9":"code","34d05faf":"code","dbe7449c":"code","effc27bb":"code","66646dd1":"code","d99804f9":"code","d2e177d3":"code","d8c006f0":"code","5bf8d00a":"code","1dbb370d":"code","7137cfdb":"code","b43b5efe":"code","c1063783":"code","08b5a351":"code","0f2cc589":"code","8748561f":"code","25e0033f":"code","3cc5dfda":"code","15bd5284":"code","af16f229":"code","2e13c60c":"code","49fba3d9":"code","931f3957":"code","d7cee9c6":"code","7d8e5b74":"code","69e61f08":"code","005ccb94":"code","177e62c1":"code","3c529dfb":"code","df0b3e92":"code","51152838":"code","97824688":"code","70390137":"code","16176206":"code","01a75ccc":"code","207535ed":"code","bbc0e7c1":"markdown","41c3fa87":"markdown","c01f187d":"markdown","5d1ceb96":"markdown","f2ae24c8":"markdown","8cc2fd82":"markdown","5ea131cb":"markdown","6cd3f327":"markdown","cef9ab61":"markdown","abf3c563":"markdown","e5de077c":"markdown","030bc764":"markdown","3477a60a":"markdown","c303a650":"markdown","157d14a3":"markdown","8b986474":"markdown","089e1d6f":"markdown","6a0a40c9":"markdown","b02d5b5b":"markdown","64f00114":"markdown","c021d91a":"markdown","4cfd1d1a":"markdown","208a9ef7":"markdown","cdb5cb13":"markdown","75fc2b22":"markdown","f108bcd1":"markdown","e3889f4d":"markdown","96b0ab96":"markdown","2427db5d":"markdown","fb216183":"markdown","9d74f223":"markdown","7ae3f116":"markdown","351b5e14":"markdown","972f293c":"markdown","22dd0814":"markdown","b4fc2809":"markdown","ee229c9d":"markdown"},"source":{"08b06be6":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","201a9178":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntrain.head()","1602fc51":"train.info()","5f1135be":"train.isnull().sum()","eeb39866":"test.info()","e0e1a4be":"test.isnull().sum()","8f770a3a":"msno.matrix(df=train.iloc[:, :], figsize=(6, 4), color=(0.3, 0.5, 0.2))","9fd0972c":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df= pd.DataFrame([survived, dead])\n    df.index = ['Survived', 'Dead']\n    df.plot(kind = 'bar', stacked='True',color = ('r', 'orange','yellow','green','blue','navy','violet'),figsize=(10,5))","fde755af":"f, ax = plt.subplots(1, 2, figsize=(8, 5))\n\ntrain[train['Survived']==1]['Sex'].value_counts().plot.pie( autopct='%1.1f%%',colors =['gray','w'],labels =('M', 'W'), ax=ax[0], shadow=True)\nax[0].set_title('Sex - Survived')\ntrain[train['Survived']==0]['Sex'].value_counts().plot.pie( autopct='%1.1f%%',colors =['gray','w'],labels =('M', 'W'), ax=ax[1], shadow=True)\nax[1].set_title('Sex - Dead')\nplt.show()","1b1b3462":"bar_chart('Pclass')","4c5f7251":"bar_chart(\"SibSp\")","102b02f7":"bar_chart(\"Parch\")","b9fbd1e9":"bar_chart(\"Embarked\")","34d05faf":"fig, ax = plt.subplots(1, 2, figsize=(15, 7))\nplot = sns.distplot(train['Fare'], color='black', ax =ax[0])\nplot2 = sns.distplot(train['Fare'][train[\"Survived\"]==1], color='green',  ax =ax[1])\nplot2 = sns.distplot(train['Fare'][train[\"Survived\"]==0], color='black',  ax =ax[1])\nplot= plot.legend(loc='best')","dbe7449c":"train.describe(include='all')","effc27bb":"train = train.drop(['Ticket', 'Cabin'], axis=1)\ntest = test.drop(['Ticket', 'Cabin'], axis=1)","66646dd1":"southhampton= train[train[\"Embarked\"]=='S'].shape[0]\nprint('S : ', southhampton)\ncherbourg= train[train[\"Embarked\"]=='C'].shape[0]\nprint('C : ',cherbourg)\nqueenstown = train[train[\"Embarked\"]=='Q'].shape[0]\nprint('D : ',cherbourg)","d99804f9":"train=train.fillna({\"Embarked\" : \"S\"})","d2e177d3":"embarked_mapping = {'S': 1 , \"C\" : 2 , \"Q\" : 3}\ntrain[\"Embarked\"] = train[\"Embarked\"].map(embarked_mapping)\ntest[\"Embarked\"] = test[\"Embarked\"].map(embarked_mapping)\ntrain.head()","d8c006f0":"combine = [train, test]\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand = False)\npd.crosstab(train['Title'],train['Sex'])","5bf8d00a":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady','Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'],'Other')\n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mile', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain[['Title', 'Survived']].groupby(['Title'], as_index = False).mean()","1dbb370d":"train.loc[(train.Age.isnull())&(train.Title=='Mr'),'Age'] = 33\ntrain.loc[(train.Age.isnull())&(train.Title=='Mrs'),'Age'] = 36\ntrain.loc[(train.Age.isnull())&(train.Title=='Master'),'Age'] = 5\ntrain.loc[(train.Age.isnull())&(train.Title=='Miss'),'Age'] = 22\ntrain.loc[(train.Age.isnull())&(train.Title=='Other'),'Age'] = 46\n\ntest.loc[(test.Age.isnull())&(test.Title=='Mr'),'Age'] = 33\ntest.loc[(test.Age.isnull())&(test.Title=='Mrs'),'Age'] = 36\ntest.loc[(test.Age.isnull())&(test.Title=='Master'),'Age'] = 5\ntest.loc[(test.Age.isnull())&(test.Title=='Miss'),'Age'] = 22\ntest.loc[(test.Age.isnull())&(test.Title=='Other'),'Age'] = 46","7137cfdb":"title_mapping = {'Mr' : 1, 'Miss' : 2, \"Mrs\" : 3, \"Master\" : 4, \"Royal\" : 5, \"Rare\" : 6 }\nfor dataset in combine:\n    dataset['Title']= dataset[\"Title\"].map(title_mapping)\n    dataset['Title']= dataset['Title'].fillna(0)\ntrain.head()","b43b5efe":"train = train.drop(['Name', 'PassengerId'] , axis = 1)\ntest = test.drop(['Name', 'PassengerId'] , axis = 1)\ncombine = [train, test]\ntrain.head()","c1063783":"sex_mapping = {\"male\" : 0 , \"female\" : 1}\nfor dataset in combine:\n    dataset['Sex']= dataset['Sex'].map(sex_mapping)","08b5a351":"bins = [0, 6, 12, 17, 24, 37, 60, np.inf]\nlabels = ['Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\ntrain.head()","0f2cc589":"age_mapping={'Baby' :1, 'Child':2, 'Teenager':3, 'Student':4, 'Young Adult':5, 'Adult':6, 'Senior':7}\ntrain[\"AgeGroup\"]= train[\"AgeGroup\"].map(age_mapping)\ntest[\"AgeGroup\"]= test[\"AgeGroup\"].map(age_mapping)\ntrain = train.drop(['Age'] , axis =1)\ntest = test.drop(['Age'], axis = 1)","8748561f":"test.loc[test.Fare.isnull(), 'Fare'] = test['Fare'].mean() \n\ntrain['Fare'] = train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ntest['Fare'] = test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","25e0033f":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\nfare_plot = sns.distplot(train['Fare'], color='black', ax=ax)\nfare_plot = fare_plot.legend(loc='best')","3cc5dfda":"train_data = train.drop([\"Survived\"], axis=1)\ntarget = train[\"Survived\"]","15bd5284":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","af16f229":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits = 10 , shuffle =True, random_state = 0)","2e13c60c":"clf = RandomForestClassifier(n_estimators = 13)\n\n","49fba3d9":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)\n","931f3957":"round(np.mean(score)*100,2)","d7cee9c6":"clf = KNeighborsClassifier(n_neighbors=10)","7d8e5b74":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","69e61f08":"round(np.mean(score)*100,2)","005ccb94":"clf =SVC()","177e62c1":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","3c529dfb":"round(np.mean(score)*100,2)","df0b3e92":"clf =DecisionTreeClassifier()","51152838":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","97824688":"round(np.mean(score)*100,2)","70390137":"clf = SVC()\nclf.fit(train_data, target)","16176206":"prediction = clf.predict(test)","01a75ccc":"test_Passenger = pd.read_csv('..\/input\/test.csv')\nsubmission = pd.DataFrame({\"PassengerId\":test_Passenger[\"PassengerId\"], \"Survived\" : prediction})\nsubmission.to_csv('Team4 test.csv', index=False)","207535ed":"submission = pd.read_csv('Team4 test.csv')\nsubmission.head()","bbc0e7c1":"\uc774\uc81c \ud559\uc2b5\ub370\uc774\ud130\uc758 feature\uacfc label\uc744 \ubd84\ub9ac\ud569\ub2c8\ub2e4.","41c3fa87":"\ud0d1\uc2b9 \uc9c0\uc5ed\ubcc4 \uc0dd\uc874 \ud604\ud669\uc785\ub2c8\ub2e4. \n\nQ,S\uc9c0\uc5ed\uc758 \uacbd\uc6b0 \uc8fd\uc740 \uc0ac\ub78c\uc774 \ub354 \ub9ce\uace0 C\uc9c0\uc5ed\uc740 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uc2b5\ub2c8\ub2e4.","c01f187d":"\uc131\ubcc4\uc744 \uc22b\uc790\ub85c mapping\ud569\ub2c8\ub2e4.","5d1ceb96":"\uc608\uce21\uacb0\uacfc\ub97c \ub370\uc774\ud130 csv\ud30c\uc77c\ub85c \uc800\uc7a5\ud569\ub2c8\ub2e4.","f2ae24c8":"KNeighborsClassifier 82.49%","8cc2fd82":"\ud568\uaed8 \ud0d1\uc2b9\ud55c \ud615\uc81c\uc640 \ubc30\uc6b0\uc790\uc758 \uc218\uac00 1\uba85\uc77c\uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc774 \ub354 \ub192\uc2b5\ub2c8\ub2e4.\n\n0\uba85 \ud639\uc740 2\uba85 \uc774\uc0c1\uc77c \uacbd\uc6b0\ub294 \uc8fd\uc740 \uc218\uac00 \ub354 \ub9ce\ub124\uc694.","5ea131cb":"Name\uc815\ubcf4\ub294 \uc0ac\uc6a9\ud574 Title\ub85c \uac00\uacf5\ud588\uc73c\ub2c8 \uc81c\uac70\ud574\uc90d\ub2c8\ub2e4.\n\nPassengerId\ub294 \uc0dd\uc874\uc5ec\ubd80\uc640 \ubcc4\ub85c \uc0c1\uad00\uc5c6\uc5b4 \ubcf4\uc5ec \uac19\uc774 \uc81c\uac70\ud569\ub2c8\ub2e4. ","6cd3f327":"\uc2a4\ucf00\uc77c\ub9c1\ub41c Fare\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc785\ub2c8\ub2e4.","cef9ab61":" \ub370\uc774\ud130 \ubd84\uc11d\uc5d0 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.","abf3c563":"\ucef4\ud4e8\ud130\uac00 \uc778\uc2dd\ud558\ub3c4\ub85d \ubb38\uc790\ub97c \uc22b\uc790\ub85c mapping\ud569\ub2c8\ub2e4.","e5de077c":"\ud63c\uc790 \ud0d1\uc2b9\ud55c \uacbd\uc6b0 \uc8fd\uc740 \uc0ac\ub78c\uc774 \ub354 \ub9ce\uc9c0\ub9cc,\n\n\ud568\uaed8 \ud0d1\uc2b9\ud55c \ubd80\ubaa8, \uc544\uc774\uc758 \uc218\uac00 1~2\uba85\uc778 \uacbd\uc6b0 \uc0dd\uc874\ud655\ub960\uc774 \ub354 \ub192\uc740 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","030bc764":"\"Embarked\"\uc758 \uacb0\uce21 \ub370\uc774\ud130\uac00 2\uac1c\uac00 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\ucd5c\ube48\uac12\uc778 southhampton\ub85c \ucc44\uc6cc\ub123\uaca0\uc2b5\ub2c8\ub2e4.","3477a60a":"SVC 83.16%","c303a650":"\ub300\ub7b5 \uc801\uc778 train\uc758 \uc815\ubcf4\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\nnon-null\ub370\uc774\ud130\uc758 \uc218\uac00 \ub2e4\ub978 \uac83\uc744 \ubcf4\uc544 \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc911 \uacb0\uce21\uce58\uac00 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","157d14a3":"\uac00\uc7a5 \ub192\uc740 \uc815\ud655\ub3c4\ub97c \uac00\uc9c4 \ub514\uc2dc\uc804\ud2b8\ub9ac \ubaa8\ub378\uc744 \uc120\ud0dd\ud558\uace0 \ud559\uc2b5\ud569\ub2c8\ub2e4.","8b986474":"\uc8fc\uc5b4\uc9c4 train\ub370\uc774\ud130\uc640 test\ub370\uc774\ud130\ub97c csv\ud615\ud0dc\ub85c \uc77d\uace0, train\ub370\uc774\ud130\uc758 \uc0c1\uc7045\uac1c\uc758 \ud56d\ubaa9\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","089e1d6f":"Age\ub97c \ub098\uc774\ub300\ubcc4\ub85c \uce74\ud14c\uace0\ub9ac\ud654 \ud569\ub2c8\ub2e4.\n\n\ub108\ubb34 \ub9ce\uc740 \ubd84\ub958\uae30\uc900\uc740 \uc624\ud788\ub824 \uc131\ub2a5\uc744 \uc548\uc88b\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","6a0a40c9":"\uce74\ud14c\uace0\ub9ac\ud654\ud55c \ubb38\uc790\ub370\uc774\ud130\ub97c \uc22b\uc790\ub85c mapping\ud569\ub2c8\ub2e4.\n\n\uc774\uac83\uc73c\ub85c \uc0c8\ub85c\uc6b4 AgeGroup \uceec\ub7fc\uc774 \uc0dd\uacbc\uc73c\ubbc0\ub85c Age\ub294 \uc81c\uac70\ud569\ub2c8\ub2e4.","b02d5b5b":"train\ub370\uc774\ud130 \uc911 \ube44\uc5b4\uc788\ub294 \ubd80\ubd84\uc774 \uc5bc\ub9c8\ub098 \ub418\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n'Age'\uc758 \uacbd\uc6b0 177\uac1c, 'Cabin'\uc758 \uacbd\uc6b0 687\uac1c, 'Embarked'\uc758 \uacbd\uc6b0 2\uac1c\uc758 \ud56d\ubaa9\uc774 \ube44\uc5b4\uc788\ub294 \uac12 \uc785\ub2c8\ub2e4.","64f00114":"\ud0d1\uc2b9 \ud56d\uad6c\ubcc4 \uc0ac\ub78c \uc218 \uc785\ub2c8\ub2e4. \n\nsouthhampton\uac00 \uac00\uc7a5 \ub9ce\uc2b5\ub2c8\ub2e4.","c021d91a":"\uc774\ub984\uc744 \ud1a0\ub300\ub85c \ub098\uc774\ub97c \uc608\uce21\ud558\uc5ec \uacb0\uce21\uce58\ub97c \ucc44\uc6e0\uc2b5\ub2c8\ub2e4.\n\n\ub300\ub7b5 \uc544\uc774\uc774\ub984, \uacb0\ud63c \uc5ec\ubd80\ub85c \uc608\uce21\ub41c \uc218\uce58\uc785\ub2c8\ub2e4.","4cfd1d1a":"\uba38\uc2e0\ub7ec\ub2dd\uc744 \ud558\uae30\uc704\ud574\uc11c \ucef4\ud4e8\ud130\uc5d0\uac8c \uc815\ubcf4\ub97c \uc54c\ub824\uc918\uc57c\ud569\ub2c8\ub2e4.\n\n\ubb38\uc790\uc758 \uacbd\uc6b0 \uc778\uc2dd\uc744 \ud558\uc9c0\ubabb\ud558\ubbc0\ub85c \ubb38\uc790\ub370\uc774\ud130\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud558\uc5ec \uc801\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\nmap\ud568\uc218\ub97c \ud1b5\ud574 \"Embarked\" column\uc758 \ub370\uc774\ud130\uc758 \uc774\ub984\uc744 \uc22b\uc790\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4.","208a9ef7":"KFold\uc758 \uad50\ucc28\uac80\uc99d\uc744 \uc774\uc6a9\ud574 \uc5b4\ub290 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560\uc9c0 \ud310\ub2e8\ud569\ub2c8\ub2e4.","cdb5cb13":"'Cabin'\uc758 \uacbd\uc6b0 \ube44\uc5b4\uc788\ub294 \ub370\uc774\ud130\uac00 \ub9ce\uace0 \ucd08\ubcf4\uc790\uac00 \uac00\uacf5\ud558\uae30 \uc5b4\ub824\uc6cc\ubcf4\uc785\ub2c8\ub2e4.\n\n\uc5f0\uc2b5 \ub2e8\uacc4\uc774\ubbc0\ub85c 'Cabin'\uacfc \ubcc4 \uc758\ubbf8\ub97c \ub2f4\uace0\uc788\uc9c0 \uc54a\uc740 \uac83 \uac19\uc740 'Ticket'\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4.","75fc2b22":"\uc800\uc7a5\ub0b4\uc5ed\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","f108bcd1":"msno\ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec Train \uacb0\uce21\uce58\ub97c \uc2dc\uac01\ud654 \ud588\uc2b5\ub2c8\ub2e4.","e3889f4d":"\uc774\uc81c feature\uacfc 'Survived'\uc0ac\uc774\uc5d0 \uadf8\ub9bc\uc744 \uadf8\ub824 \uc0c1\uad00\uad00\uacc4\ub97c \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","96b0ab96":"'Age'\uc758 \uacbd\uc6b0 86\uac1c, 'Cabin'\uc758 \uacbd\uc6b0 327\uac1c, 'Fare'\uc758 \uacbd\uc6b0 1\uac1c\uc758 \ud56d\ubaa9\uc774 \ube44\uc5b4\uc788\ub294 \uac12 \uc785\ub2c8\ub2e4.","2427db5d":"\uc5ec\uc131\uc758 \uacbd\uc6b0 \ub0a8\uc131\ubcf4\ub2e4 \uc0dd\uc874\ub960\uc774 \ub192\uace0, \uc8fd\uc740 \uc0ac\ub78c\uc740 \ub300\ubd80\ubd84 \ub0a8\uc790\uc785\ub2c8\ub2e4.\n\n\uc131\ubcc4\uc740\uc0dd\uc874\uc5d0 \uc0c1\ub2f9\ud55c \uc601\ud5a5\uc744 \uc8fc\ub294 feature\ub85c \uc0dd\uac01\ub429\ub2c8\ub2e4.","fb216183":"\uc774\ubc88\uc5d0\ub294 test\ub370\uc774\ud130\uc758 \uc815\ubcf4\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.\n\n'Age'\uc640 'Fare', 'Cabin'\uc758 \ub370\uc774\ud130\uac00 \ubd80\ubd84\ubd80\ubd84 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4.","9d74f223":"DecisionTreeClassifier() 78.91%","7ae3f116":"\uc774\ubd80\ubd84\uc774 \uc57d\uac04 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \ud0d1\uc2b9\uac1d\uc758 \uc774\ub984\uc5d0\ub294 Mr, Miss\uac19\uc740 \uc815\ubcf4\uac00 \ub2f4\uaca8\uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774 \uc815\ubcf4\ub85c \ub098\uc774\ub97c \uc608\uce21\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4.\n\n\uc815\uaddc\ud654\uc2dd\uc744\ud1b5\ud574 \uc5b4\ub5a4 \ub2e8\uc5b4\uac00 \ub9ce\uc774 \ub4f1\uc7a5\ud588\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","351b5e14":"\uac01\uc790 \uc131\ubcc4\uc5d0 \ub9de\ub294 \uc774\ub984\uacfc \ub9e4\uce58\ud558\uace0, \uc790\uc8fc \ub4f1\uc7a5\ud558\uc9c0 \uc54a\ub294 \ub2e8\uc5b4\ub294 Other\ub85c \ud1b5\ud569\ud558\uc5ec \uc0c8\ub85c\uc6b4 'Title' \uceec\ub7fc\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n\n'Countess', 'Lady', 'Sir'\uc758 \uacbd\uc6b0 \uadc0\uc871\uc5d0\uac8c \ubd99\ub294 \uc774\ub984\uc774\ub77c Royal\ub85c \ubb36\uc5c8\ub294\ub370 \n\nRoyal\uc758 \uacbd\uc6b0 \ubaa8\ub450 \uc0dd\uc874\ud588\uc2b5\ub2c8\ub2e4.","972f293c":"\uc624\ub978\ucabd \uadf8\ub798\ud504\ub294 'Fare'\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \ub098\ud0c0\ub0c8\uc2b5\ub2c8\ub2e4. 0~100\uc0ac\uc774\uc758 \uac12\uc774 \ub300\ubd80\ubd84\uc744 \ucc28\uc9c0\ud569\ub2c8\ub2e4.\n\uc624\ub978\ucabd\uc758 \uadf8\ub798\ud504\ub294 \uac80\uc740\uc120\uc758 \uacbd\uc6b0 Dead, \ucd08\ub85d \uc120\uc740 Survived\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n\ub0ae\uc740 \uc6b4\uc784\uc758 \uacbd\uc6b0 \uc8fd\uc740 \uc0ac\ub78c\uc774 \ub354\ub9ce\uace0 \ub192\uc740 \uc6b4\uc784\uc77c\uc218\ub85d \ud655\uc2e4\ud788 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uc2b5\ub2c8\ub2e4","22dd0814":"test\uc758 \ube44\uc5b4\uc788\ub294 Fare\ub370\uc774\ud130 \ud558\ub098\ub97c \ud3c9\uade0 \uac12\uc73c\ub85c \ucc44\uc6cc\ub123\uc2b5\ub2c8\ub2e4.\n\nFare\uc758 \ub370\uc774\ud130\ub294 0~800\uc73c\ub85c \ub2e4\uc591\ud569\ub2c8\ub2e4. \ub113\uc740 \ubc94\uc704\uc758 \ub370\uc774\ud130\ub294 \uba38\uc2e0\ub7ec\ub2dd\uc5d0 \uc545\uc601\ud5a5\uc744 \uc904 \uc218 \uc788\uc73c\ubbc0\ub85c\n\n\ub85c\uadf8\uc2a4\ucf00\uc77c\ub9c1\uc744 \ud574\uc90d\ub2c8\ub2e4.","b4fc2809":"describe\ud568\uc218\ub97c \uc774\uc6a9\ud574 \uc804\uccb4\uc801\uc778 \ud1b5\uacc4\uc815\ubcf4\ub97c \uc694\uc57d\ud574\uc11c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\uc774\uc0c1\uce58\ub97c \ud310\ubcc4\ud558\ub294\ub370 \uc720\uc6a9\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","ee229c9d":"\ud0d1\uc2b9 Class\ubcc4 \uc0dd\uc874\ud604\ud669\uc785\ub2c8\ub2e4.\n\n\uc0dd\uc874\uc790\uc758 \uacbd\uc6b0 1, 2, 3 class\uac00 \uace0\ub974\uac8c \ubd84\ud3ec\ud55c \ubc18\uba74, \uc8fd\uc740 \uc0ac\ub78c\uc740 \ub0ae\uc740 class\uc77c\uc218\ub85d \ub354 \ub9ce\uc2b5\ub2c8\ub2e4.\n\n\uc0dd\uc874\uacfc \uc0c1\uad00 \uad00\uacc4\uac00 \uc788\ub294 feature\ub85c \ud310\ub2e8\ub429\ub2c8\ub2e4."}}