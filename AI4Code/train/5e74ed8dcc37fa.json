{"cell_type":{"9123533d":"code","836e7f1e":"code","2135bf88":"code","8a15b909":"code","ae677b78":"code","6a3eeab9":"code","bdfe3bdf":"code","a1fd2619":"code","d431e6a2":"code","9270952b":"code","365c0e7a":"code","46a9942c":"code","878d65a1":"code","15959bfa":"code","e13cd397":"code","ea016765":"code","00eb39a0":"code","82de6c3d":"code","dc2d57f6":"code","b0517595":"code","8d591c39":"code","3347f328":"code","17459d63":"code","447bf766":"code","83273567":"code","64e95678":"code","5660cabe":"code","dfce1f2f":"code","61bb146d":"code","83d3599a":"code","c4a8f8bf":"code","51a4c28c":"code","c66ee7bd":"code","39bcae3d":"code","3066f0df":"code","c1c8b8fc":"code","dfeea12c":"code","61fadf6c":"code","20c05065":"code","8004743a":"code","8078b36b":"code","3a2065b1":"code","bf6d9503":"code","1fbc511a":"code","2a156ce9":"code","07b78dd8":"code","5e015a37":"code","6e48f2a8":"code","ed81e18e":"code","6997d1fa":"code","689fcb2a":"code","6199d42d":"code","872ae759":"code","e7c706a0":"code","872ca5ed":"code","c3e561e6":"code","bf5f27f3":"code","f4e4b5e7":"code","8da2f1f6":"code","11cdaee0":"code","e5bbaa51":"code","e90e7838":"code","a451465b":"code","481c69a9":"code","a51c03dd":"code","11559c5e":"code","d84680b8":"code","e151e588":"code","6baa9512":"code","71338b4b":"code","40e4c631":"code","da0fe3eb":"code","d3637f2f":"code","276b640c":"code","2c551846":"code","7bfa3ff1":"code","4dddb940":"code","ef3aed09":"code","b8658c07":"markdown","6f8fae6a":"markdown","b363c3d0":"markdown","ab1b6c22":"markdown","2f6426cc":"markdown","99750e42":"markdown","e67f3f20":"markdown","0dff7363":"markdown","9b589957":"markdown","025f0a71":"markdown","f0cb17fa":"markdown","de0f4de2":"markdown","508a0c32":"markdown","9cbf16ac":"markdown","e7e413e0":"markdown","21ac216c":"markdown","f937ece5":"markdown","d3dcadd1":"markdown","93b2a138":"markdown","c8fed4f8":"markdown","fc100227":"markdown","c6072a66":"markdown","1d44e8da":"markdown","ad98efd8":"markdown","20d3e822":"markdown","4520be95":"markdown","1ac1d843":"markdown","25987f72":"markdown","5d5c7cc8":"markdown"},"source":{"9123533d":"# 1.0 Clear memory\n%reset -f\n\n# 1.1 Call data manipulation libraries\nimport pandas as pd\nimport numpy as np\n\n# 1.2 Feature creation libraries\nfrom sklearn.random_projection import SparseRandomProjection as sr  # Projection features\nfrom sklearn.cluster import KMeans                    # Cluster features\nfrom sklearn.preprocessing import PolynomialFeatures  # Interaction features\n\n# 1.3 For feature selection\n# Ref: http:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.feature_selection\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import mutual_info_classif  # Selection criteria\n\n# 1.4 Data processing\n# 1.4.1 Scaling data in various manner\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, scale\n# 1.4.2 Transform categorical (integer) to dummy\nfrom sklearn.preprocessing import OneHotEncoder\n\n# 1.5 Splitting data\nfrom sklearn.model_selection import train_test_split\n\n# 1.6 Decision tree modeling\n# http:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.tree\n# http:\/\/scikit-learn.org\/stable\/modules\/tree.html#tree\nfrom sklearn.tree import  DecisionTreeClassifier as dt\n\n# 1.7 RandomForest modeling\nfrom sklearn.ensemble import RandomForestClassifier as rf\n\n# 1.8 Plotting libraries to plot feature importance\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 1.9 Misc\nimport os, time, gc\n","836e7f1e":"\n\n# 2.1 Read train\/test files\nheart = pd.read_csv(\"..\/input\/heart.csv\")\n\nheart.head(5)\nheart.shape         ## 303 x 14","2135bf88":"# 2.2 Split into Test and Training Data\nX_train, X_test, y_train, y_test = train_test_split(\n        heart.drop('target', 1), \n        heart['target'], \n        test_size = 0.3, \n        random_state=10\n        ) ","8a15b909":"# 2.3 Look at data\nX_train.head(2)\nX_train.shape                        # 212 x 13\nX_test.shape                         # 91 x 13\n\ny_test.shape                        # 91 x \ny_train.shape                       # 212 x\n\n# Data types\nX_train.dtypes.value_counts()   # All afeatures re integers \n","ae677b78":"# 2.4 Target classes are almost balanced\nheart.target.value_counts()\n","6a3eeab9":"# 3 Check if there are Missing values? None\nX_train.isnull().sum().sum()  # 0\nX_test.isnull().sum().sum()   # 0","bdfe3bdf":"## i)   Shooting in dark. These features may help or may not help\n## ii)  There is no exact science as to which features will help\n\n","a1fd2619":"#  4. Feature 1: Row sums of features 1:13. More successful\n#                when data is binary.\n\nX_train['sum'] = X_train.sum(numeric_only = True, axis=1)  # numeric_only= None is default\nX_test['sum'] = X_test.sum(numeric_only = True,axis=1)","d431e6a2":"# 4.1 Assume that value of '0' in a cell implies missing feature\n#     Transform train and test dataframes\n#     replacing '0' with NaN\n#     Use pd.replace()\ntmp_train = X_train.replace(0, np.nan)\ntmp_test = X_test.replace(0,np.nan)","9270952b":"# 4.2 Check if tmp_train is same as train or is a view\n#     of train? That is check if tmp_train is a deep-copy\n\ntmp_train is X_train                # False\ntmp_train._is_view                # False","365c0e7a":"# 4.3 Check if 0 has been replaced by NaN\ntmp_train.head(1)\ntmp_test.head(1)\n","46a9942c":"# 5. Feature 2 : For every row, how many features exist\n#                that is are non-zero\/not NaN.\n#                Use pd.notna()\ntmp_train.notna().head(1)\nX_train[\"count_not0\"] = tmp_train.notna().sum(axis = 1)\nX_test['count_not0'] = tmp_test.notna().sum(axis = 1)","878d65a1":"# 6. Similary create other statistical features\n#    Feature 3\n#    Pandas has a number of statistical functions\n#    Ref: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/frame.html#computations-descriptive-stats\n\nfeat = [ \"var\", \"median\", \"mean\", \"std\", \"max\", \"min\"]\nfor i in feat:\n    X_train[i] = tmp_train.aggregate(i,  axis =1)\n    X_test[i]  = tmp_test.aggregate(i,axis = 1)\n","15959bfa":"# 7 Delete not needed variables and release memory\ndel(tmp_train)\ndel(tmp_test)\ngc.collect()","e13cd397":"# 7.1 So what do we have finally\nX_train.shape                \nX_train.head(1)\nX_test.shape                 \nX_test.head(2)","ea016765":"# 8. Before we proceed further, keep target feature separately\ntarget = y_train\ntarget.tail(2)","00eb39a0":"# 9. Store column names of our data somewhere\n#     We will need these later (at the end of this code)\ncolNames = X_train.columns.values\ncolNames\n","82de6c3d":"\n# 10. Random projection is a fast dimensionality reduction feature\n#     Also used to look at the structure of data\n","dc2d57f6":"# 11. Generate features using random projections\n#     First stack train and test data, one upon another\ntmp = pd.concat([X_train,X_test],\n                axis = 0,            # Stack one upon another (rbind)\n                ignore_index = True\n                )\n","b0517595":"# 12.1\ntmp.shape     # 303 X 21\n","8d591c39":"# 12.2 Transform tmp t0 numpy array\n#      Henceforth we will work with array only\ntmp = tmp.values\ntmp.shape       # 303 X 21\n","3347f328":"# 13. Let us create 8 random projections\/columns\n#     This decision, at present, is arbitrary\nNUM_OF_COM = 8","17459d63":"# 13.1 Create an instance of class\nrp_instance = sr(n_components = NUM_OF_COM)","447bf766":"# 13.2 fit and transform the (original) dataset\n#      Random Projections with desired number\n#      of components are returned\nrp = rp_instance.fit_transform(tmp[:, :13])","83273567":"# 13.3 Look at some features\nrp[: 5, :  3]\n","64e95678":"# 13.4 Create some column names for these columns\n#      We will use them at the end of this code\nrp_col_names = [\"r\" + str(i) for i in range(8)]\nrp_col_names\n","5660cabe":"# 14. Before clustering, scale data\n# 15.1 Create a StandardScaler instance\nse = StandardScaler()\n# 15.2 fit() and transform() in one step\ntmp = se.fit_transform(tmp)\n# 15.3\ntmp.shape               # 303 X 21 ","dfce1f2f":"# 16. Perform kmeans using 13 features.\n#     No of centroids is no of classes in the 'target'\ncenters = target.nunique()    # 2 unique classes\ncenters               # 2","61bb146d":"# 17.1 Begin clustering\nstart = time.time()\n\n# 17.2 First create object to perform clustering\nkmeans = KMeans(n_clusters=centers, # How many clusters\n                n_jobs = 4)         # Parallel jobs for n_init\n\n# 17.3 Next train the model on the original data only\nkmeans.fit(tmp[:, : 13])\n\nend = time.time()\n(end-start)\/60.0      # 0.007 minutes","83d3599a":"# 18 Get clusterlabel for each row (data-point)\nkmeans.labels_\nkmeans.labels_.size   # 303\n\n","c4a8f8bf":"# 19. Cluster labels are categorical. So convert them to dummy\n","51a4c28c":"# 19.1 Create an instance of OneHotEncoder class\nohe = OneHotEncoder(sparse = False)\n","c66ee7bd":"# 19.2 Use ohe to learn data\n#      ohe.fit(kmeans.labels_)\nohe.fit(kmeans.labels_.reshape(-1,1))     # reshape(-1,1) recommended by fit()\n                                          # '-1' is a placeholder for actual\n","39bcae3d":"# 19.3 Transform data now\ndummy_clusterlabels = ohe.transform(kmeans.labels_.reshape(-1,1))\ndummy_clusterlabels\ndummy_clusterlabels.shape    # 303 X 2 (as many as there are classes)\n\n","3066f0df":"# 19.4 We will use the following as names of new two columns\n#      We need them at the end of this code\n\nk_means_names = [\"k\" + str(i) for i in range(2)]\nk_means_names\n","c1c8b8fc":"\n# 21. Will require lots of memory if we take large number of features\n#     Best strategy is to consider only impt features\n\ndegree = 2\npoly = PolynomialFeatures(degree,                 # Degree 2\n                          interaction_only=True,  # Avoid e.g. square(a)\n                          include_bias = False    # No constant term\n                          )\n\n","dfeea12c":"# 21.1 Consider only first 8 features\n#      fit and transform\ndf =  poly.fit_transform(tmp[:, : 8])\n\n\ndf.shape     # 303 X 36\n","61fadf6c":"# 21.2 Generate some names for these 36 columns\npoly_names = [ \"poly\" + str(i)  for i in range(36)]\npoly_names\n\n","20c05065":"\n\n# 22 Append now all generated features together\n# 22 Append random projections, kmeans and polynomial features to tmp array\n\ntmp.shape          # 303 X 21\n","8004743a":"#  22.1 If variable, 'dummy_clusterlabels', exists, stack kmeans generated\n#       columns also else not. 'vars()'' is an inbuilt function in python.\n#       All python variables are contained in vars().\n\nif ('dummy_clusterlabels' in vars()):               #\n    tmp = np.hstack([tmp,rp,dummy_clusterlabels, df])\nelse:\n    tmp = np.hstack([tmp,rp, df])       # No kmeans      <==\n\n\ntmp.shape          # 303 X 67\n","8078b36b":"# 22.1 Combine train and test into X and y to split compatible datasets\nX = tmp\nX.shape        # 303 X 67\n","3a2065b1":"# 22.2 Combine y_train and y_test into y to split into compatible datasets later\ny = pd.concat([y_train,y_test],\n                axis = 0,            # Stack one upon another (rbind)\n                ignore_index = True\n                )\ny.shape        # 303,","bf6d9503":"# 22.3 Delete tmp - as a good programming practice\ndel tmp\ngc.collect()\n","1fbc511a":"# 23. Split the feature engineered data into new training and test dataset\nX_train, X_test, y_train, y_test = train_test_split(\n                                                    X,\n                                                    y,\n                                                    test_size = 0.3)","2a156ce9":"# 23.1\nX_train.shape    # 212 X 67 \n","07b78dd8":"X_test.shape     # 91 X 67","5e015a37":"# 24 Decision tree classification\n# 24.1 Create an instance of class\nclf1_dt = dt(min_samples_split = 5,\n         min_samples_leaf= 3\n        )","6e48f2a8":"start = time.time()\n# 24.2 Fit\/train the object on training data\n#      Build model\nclf1_dt = clf1_dt.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60                     # << 1 minute\n","ed81e18e":"# 24.3 Use model to make predictions\nclasses1_dt = clf1_dt.predict(X_test)","6997d1fa":"# 24.4 Check accuracy\n(classes1_dt == y_test).sum()\/y_test.size      ","689fcb2a":"# 25. Instantiate RandomForest classifier\nclf1_rf = rf(n_estimators=50)\n","6199d42d":"# 25.1 Fit\/train the object on training data\n#      Build model\n\nstart = time.time()\nclf1_rf = clf1_rf.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60                    # 0.001 min\n","872ae759":"# 25.2 Use model to make predictions\nclasses1_rf = clf1_rf.predict(X_test)","e7c706a0":"# 25.3 Check accuracy\n(classes1_rf == y_test).sum()\/y_test.size      ","872ca5ed":"# 26. Get feature importance\nclf1_rf.feature_importances_        # Column-wise feature importance\nclf1_rf.feature_importances_.size   # 67","c3e561e6":"# 26.1 To our list of column names, append all other col names\n#      generated by random projection, kmeans (onehotencoding)\n#      and polynomial features\n#      But first check if kmeans was used to generate features\n\nif ('dummy_clusterlabels' in vars()):       # If dummy_clusterlabels labels are defined\n    colNames = list(colNames) + rp_col_names+ k_means_names + poly_names\nelse:\n    colNames = colNames = list(colNames) + rp_col_names +  poly_names      # No kmeans      <==","bf5f27f3":"# 26.1.1 So how many columns?\nlen(colNames)           # 67 with kmeans ","f4e4b5e7":"# 26.2 Create a dataframe of feature importance and corresponding\n#      column names. Sort dataframe by importance of feature\nfeat_imp = pd.DataFrame({\n                   \"importance\": clf1_rf.feature_importances_ ,\n                   \"featureNames\" : colNames\n                  }\n                 ).sort_values(by = \"importance\", ascending=False)","8da2f1f6":"feat_imp.shape                   # 67 X 2 \nfeat_imp.head(13)","11cdaee0":"# 26.3 Plot feature importance for first 20 features\ng = sns.barplot(x = feat_imp.iloc[  : 20 ,  1] , y = feat_imp.iloc[ : 20, 0])\ng.set_xticklabels(g.get_xticklabels(),rotation=90)\n\n","e5bbaa51":"# 27 Select top 13 columns and get their indexes\n#      Note that in the selected list few kmeans\n#      columns also exist\nnewindex = feat_imp.index.values[:13]\nnewindex","e90e7838":"# 28 Use these top 13 columns for classification\n# 28.1  Create DTree classifier object\nclf2_dt = dt(min_samples_split = 5, min_samples_leaf= 3)","a451465b":"# 28.2 Train the object on data\nstart = time.time()\nclf2_dt = clf2_dt.fit(X_train[: , newindex], y_train)\nend = time.time()\n(end-start)\/60                     # 3.322362899780273e-05 minute","481c69a9":"# 28.3  Make prediction\nclasses2_dt = clf2_dt.predict(X_test[: , newindex])","a51c03dd":"# 28.4 Accuracy?\n(classes2_dt == y_test).sum()\/y_test.size ","11559c5e":"# 28.5  Create RForest classifier object\nclf2_rf = rf(n_estimators=50)","d84680b8":"# 28.6 Traion the object on data\nstart = time.time()\nclf2_rf = clf2_rf.fit(X_train[: , newindex], y_train)\nend = time.time()\n(end-start)\/60                     # 0.0008496324221293132 minute","e151e588":"# 28.7  Make prediction\nclasses2_rf = clf2_rf.predict(X_test[: , newindex])\n","6baa9512":"# 28.8 Accuracy?\n(classes2_rf == y_test).sum()\/y_test.size  \n","71338b4b":"# 29 Select top 20 columns and get their indexes\n#      Note that in the selected list few kmeans\n#      columns also exist\nnewindex2 = feat_imp.index.values[:20]\nnewindex2","40e4c631":"# 30.1  Create DTree classifier object\nclf3_dt = dt(min_samples_split = 5, min_samples_leaf= 3)\n","da0fe3eb":"# 30.2 Train the object on data\nstart = time.time()\nclf3_dt = clf3_dt.fit(X_train[: , newindex2], y_train)\nend = time.time()\n(end-start)\/60                     # 0 minute\n","d3637f2f":"# 30.3  Make prediction\nclasses3_dt = clf3_dt.predict(X_test[: , newindex2])\n","276b640c":"# 30.4 Accuracy?\n(classes3_dt == y_test).sum()\/y_test.size\n","2c551846":"# 30.5  Create RForest classifier object\n# increasing the number of estimators to 100 from 50...\nclf3_rf = rf(n_estimators=100)\n","7bfa3ff1":"# 30.6 Train the object on data\nstart = time.time()\nclf3_rf = clf3_rf.fit(X_train[: , newindex2], y_train)\nend = time.time()\n(end-start)\/60                     # 0.0014 minute\n","4dddb940":"# 30.7  Make prediction\nclasses3_rf = clf3_rf.predict(X_test[: , newindex2])\n","ef3aed09":"# 26.4 Accuracy?\n(classes3_rf == y_test).sum()\/y_test.size \n","b8658c07":"# concatenate all features now ","6f8fae6a":"## Notice the number of derived parameters making into the top important features\n*******************","b363c3d0":"# Feature creation using kmeans \n\n","ab1b6c22":"# BB. Feature Engineering #########################","2f6426cc":"# *This is an alpha work in Data Analytics.*","99750e42":"# Heart Disease UCI\n## https:\/\/archive.ics.uci.edu\/ml\/datasets\/Heart+Disease","e67f3f20":"## Now try using top 20 features for classification as per newindex2","0dff7363":"*********\n## 80.2% accuracy from rforest after feature selection - 13 features\n*********","9b589957":" ****************************************\n## Using feature importance given by model\n****************************************\n","025f0a71":"## Note: \n### 1. DTree accuracy has gone up from 67% to 73.6% with feature selection... ok\n### 2. Rforest accuracy has gone up from 76.9% to 80.2% with feature selection... ok\n### 3. Rforest provides highest accuracy of 80.2% with feature selection... ok \n### Let's try something else to check impact on accuracy?\n************************","f0cb17fa":"*********\n## 76.9% accuracy from dtree after feature selection - 20 features\n*********","de0f4de2":"*********\n## 67% accuracy from dtree with all features\n*********","508a0c32":"# Model building \n","9cbf16ac":"# 2.0 Set working directory and read file","e7e413e0":"# Feature creation Using Random Projections ","21ac216c":"## we now have the following data for model creation and testing\n### X_train: Training Data with new features\n### y_train: expected output for training data\n\n### X_test: test data with new features\n### y_test: expected output for test data","f937ece5":"## Note: \n### 1. DTree accuracy has gone from 67% (all features) to 73.6% (13 feature) to 76.9% (20 features)\n### 2. Rforest accuracy has gone from 76.9% (all features) to 80.2% (13 feature) to 80.2% (20 features)\n### 3. Rforest accuracy is peaking at accuracy of 80.2% \n### Observations #1 & 2 are expected and #3 is slightly disappointing!!\n**********\n## Play with hyper parameters newindex2, min_samples_split, min_samples_leaf, n_estimators\n************************","d3dcadd1":"##","93b2a138":"# 1. Import","c8fed4f8":"# Feature selection ","fc100227":"#  Using Statistical Numbers \n","c6072a66":"*********\n## 80.2% accuracy from dtree after feature selection - 20 features\n*********","1d44e8da":"## Notice the K-means parameters... they're found to be most relevant!!\n***********","ad98efd8":"# Creating Interaction features \n# Using Polynomials","20d3e822":"*********\n## 76.9% accuracy from rforest with all features\n*********","4520be95":"### Conclusions\n\n### 1. DTree accuracy has gone from 67% (all features) to 73.6% (13 feature) to 76.9% (20 features)\n### 2. Rforest accuracy has gone from 76.9% (all features) to 80.2% (13 feature) to 80.2% (20 features)\n### 3. Rforest accuracy is peaking at accuracy of 80.2% \n### Observations #1 & 2 are expected and #3 needs more experimentation!!\n\n**********\n## Playing with hyper parameters for feature selection:\n#### min_samples_split and min_samples_leaf in Dtree\n#### n_estimators in RForest\n\n### ==> in order to tune accuracy of prediction by RForest\n\n************************","1ac1d843":"************\n##Do we see an improvement when increased the number of derived features\n##Play with hyper parameters newindex2, min_samples_split, min_samples_leaf, n_estimators\n*************","25987f72":"**Description**:  Context\nThis database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. \nThe \"goal\" field refers to the presence of heart disease in the patient. \nIt is integer valued from 0 (no presence) to 1 (presence).\n#\nContent\n\nAttribute Information: \n> 1. age \n> 2. sex \n> 3. chest pain type (4 values) \n> 4. resting blood pressure \n> 5. serum cholestoral in mg\/dl \n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved \n> 9. exercise induced angina \n> 10. oldpeak = ST depression induced by exercise relative to rest \n> 11. the slope of the peak exercise ST segment \n> 12. number of major vessels (0-3) colored by flourosopy \n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n\n\n#\n#\nAcknowledgements\nCreators: \n1. Hungarian Institute of Cardiology. Budapest: Andras Janosi, M.D. \n2. University Hospital, Zurich, Switzerland: William Steinbrunn, M.D. \n3. University Hospital, Basel, Switzerland: Matthias Pfisterer, M.D. \n4. V.A. Medical Center, Long Beach and Cleveland Clinic Foundation: Robert Detrano, M.D., Ph.D.\n\nDonor: David W. Aha (aha '@' ics.uci.edu) (714) 856-8779\n#\nThe main emphasis in the exercie is:\n\ni) To create as many new features as possible\nii) Use RandomForest to make predictions\niii) Evaluate feature importance \n","5d5c7cc8":"*********\n## 73.6% accuracy from dtree after feature selection - 13 features\n*********"}}