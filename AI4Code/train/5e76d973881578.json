{"cell_type":{"e9eedbe6":"code","fbf3cc93":"code","53c2b0e8":"code","91819fe0":"code","67fc315b":"code","6d2c655d":"code","910a3b15":"code","86d020b8":"code","1e9f9ef7":"code","85005dc8":"code","d03b6405":"code","94160c8f":"code","6a387226":"code","395fb94d":"code","a56e1189":"code","e0e3f35e":"code","5f89915e":"code","08cacfca":"code","b4eaaa84":"code","450a50e5":"code","dfa33c1a":"code","106826fb":"code","d8b8475e":"code","1bb20ba8":"code","85533a41":"code","a6b64107":"code","3a6d0908":"code","e902ee6b":"code","422970f6":"code","d64f7cf8":"code","51633050":"code","28a6c60b":"code","6e1d2d80":"code","f79ca6fc":"code","bc1a37d7":"code","877fa4de":"code","8f56505b":"code","0f72227e":"code","c0134044":"code","e7e8c9c2":"code","a61343c3":"code","46dfb1ca":"code","70853efb":"code","21405150":"code","e59e2f4d":"code","7cf1f690":"code","70b7146f":"code","a40a5a81":"markdown","009cb423":"markdown","332ef6e0":"markdown","ff13833e":"markdown","48d0da83":"markdown","d64835e5":"markdown","86b88222":"markdown","39f03dfb":"markdown","aff97916":"markdown","391536e3":"markdown","3c73d2bf":"markdown","0b2e8158":"markdown","24158021":"markdown","3af6fc70":"markdown","ca641650":"markdown","de65921e":"markdown","053bdb30":"markdown","488dfd47":"markdown","1e5a4703":"markdown","37211282":"markdown","77b35b62":"markdown","f83ba52a":"markdown","3db0bf2f":"markdown","ac28410d":"markdown","d7d9c01c":"markdown","796be44c":"markdown","ede0a826":"markdown","47048e6c":"markdown","c2e55664":"markdown","3a01df37":"markdown","3ec6a692":"markdown","3e1dab5e":"markdown","68325efe":"markdown","04599065":"markdown","d8c6436f":"markdown","cddb4644":"markdown","8c8dbc84":"markdown","6b713e95":"markdown","96150b74":"markdown","6245c9a1":"markdown","a505e1ad":"markdown","68b99976":"markdown","e3983b55":"markdown","4397e31a":"markdown","940825c0":"markdown","24ad0fb7":"markdown","695bcd75":"markdown","f23ceaf8":"markdown","41b7e4e8":"markdown","acff0a97":"markdown","e60be45e":"markdown","2a6b585d":"markdown","6d0b7241":"markdown","d2a07444":"markdown","bef1d22b":"markdown"},"source":{"e9eedbe6":"import pandas as pd\nfrom pandas import DataFrame\nimport matplotlib as plt\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nimport seaborn\nimport warnings\nimport seaborn as sns\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import scale\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\nimport statsmodels.formula.api as sm\nfrom statsmodels.compat import lzip\nimport numpy as np\nimport statsmodels.api as sm\nfrom plotly.plotly import plot_mpl\nfrom plotly.offline import init_notebook_mode, iplot_mpl","fbf3cc93":"df2=pd.read_csv('..\/input\/WDIData.csv')","53c2b0e8":"df2=df2[(df2['Country Name'].str.contains('African|Benin|Burkina|Burundi|Cabo Verde|Cameroon|CAR|Chad|Comoros|Congo|Ivoire|Guinea|Eritrea|Eswatini|Ethiopia|Gambia|Ghana|Guinea|Guinea-Bissau|Kenya|Lesotho|Liberia|Madagascar|Malawi|Mali|Mauritania|Mauritius|Mozambique|Niger|Nigeria|Rwanda|Sao Tome|Senegal|Sierra Leone|South Sudan|Sudan|Tanzania|Togo|Uganda|Zambia|Zimbabwe')==True)]\ndf2['Indicator Name']=df2['Indicator Name'].str.replace('(',':').str.replace(')',':')\ndf2=df2[df2['Indicator Name'].str.contains(\"GDP per capita, PPP :current international\")==True]\ndf2.index=df2['Country Name']\ndf2=df2[df2.index.str.contains('Sao Tome and Principe|South Sudan|Papua New Guinea|Equatorial Guinea|Mauritius')==False]\ndf2=df2.fillna(method='bfill',axis=1)\ndf2=df2.fillna(method='ffill',axis=1)\ndf2=df2.iloc[:,34:-2]\nts=df2.mean()\nts=pd.DataFrame(ts)\nts.columns=['GDP per capita']","91819fe0":"X=pd.to_datetime(ts.index)\ny=ts['GDP per capita']\nlayout = go.Layout(title= 'Sub-Saharan African GDP per capita PPP 1990-2017 current international $',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20))\ndata = [go.Scatter(x=X,y=y)]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","67fc315b":"ts_2=ts\nts_2['log_GDP_pc']=np.log(ts['GDP per capita'])\nX=ts['log_GDP_pc'].index\ny_1=ts['log_GDP_pc']\nlayout = go.Layout(title= 'Sub-Saharan African LOG GDP per capita PPP 1990-2017 current international $',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20),legend=dict(x=0.7, y=1))\ntrace0 = go.Scatter(x=X,y=y_1, mode = 'lines',name=\"SSA GDPpc PPP $ growth 1990-2017\", marker = dict(size=12, color='red'))\ndata = [trace0]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","6d2c655d":"f, ax = plt.subplots(figsize=(15, 5)); plt.title('Distribution')\nsns.distplot(ts['GDP per capita'],color='blue', bins=18,rug=True,hist_kws={\"density\":True})\nplt.rc('xtick', labelsize=14)    # fontsize of the tick X labels \nplt.rc('ytick', labelsize=14)    # fontsize of the tick Y labels\nplt.title('TIME SERIES - Histogram and probability density function (PDF)', size=18)\nplt.xlabel('GDP per capita annual growth', size=16)\nplt.show()","910a3b15":"ts_1=ts\nts_1['mean']=ts['GDP per capita'].pct_change().fillna(0).mean()\nX=ts['GDP per capita'].index\ny_2=ts['GDP per capita'].pct_change().fillna(0)\ny1=ts_1['mean']\nlayout = go.Layout(title= 'Sub-Saharan African GDP per capita PPP growth dynamic 1990-2017 current international $',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20),legend=dict(x=0.7, y=1))\ntrace0 = go.Scatter(x=X,y=y_2, mode = 'lines',name=\"SSA GDPpc PPP $ growth 1990-2017\", marker = dict(size=12, color='red'))\ntrace1 = go.Scatter(x=X,y=y1, mode = 'lines', name=\"TS Mean \", marker = dict(size=12, color='darkcyan'))\ndata = [trace0,trace1]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","86d020b8":"returns1 = ts['GDP per capita'].pct_change().fillna(0)\nret_index_1 = (1+returns1).cumprod()\nX_1=ret_index_1.index\ny_1=ret_index_1.values\nlayout = go.Layout(title= 'Sub-Saharan African GDP per capita PPP 1990-2017 accumulative growth (Index 1=1990)',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20))\ndata = [go.Bar(x=X_1,y=y_1,marker =dict(color='lightsalmon'))]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","1e9f9ef7":"trace1 = go.Box(\n    y=ts['GDP per capita'].pct_change().fillna(0),\n    name='Time series growth dynamic with Mean & SD',boxpoints='all',\n    marker=dict(\n        color='darkcyan',opacity=0.7),boxmean='sd')\ndata = [trace1]\nlayout = go.Layout(title='')\nfig =go.Figure(data=data, layout=layout)\niplot(data)","85005dc8":"fig = {\"data\": [{\"type\": 'violin', \"y\": y, \"box\": {\"visible\": True}, \"line\": {\"color\": 'black'},\"meanline\": \n                 {\"visible\": True },\"fillcolor\": 'darkcyan',\"opacity\": 0.7,\"x0\": 'Violin'}],\n    \"layout\" : { \"title\": \"Violin Plot - Time series growth dynamic\", \"yaxis\": { \"zeroline\": False,}}}\n\nfig =go.Figure(data=fig, layout=layout)\niplot(fig)","d03b6405":"f, ax = plt.subplots(figsize=(15, 5)); plt.title('Distribution')\nsns.distplot(ts['GDP per capita'].pct_change().fillna(0),bins=15, hist_kws={'cumulative': True},color='darkcyan', \n             kde_kws={'cumulative': True},rug=True)\nplt.rc('xtick', labelsize=14)    # fontsize of the tick X labels \nplt.rc('ytick', labelsize=14)    # fontsize of the tick Y labels\nplt.title('Time series growth dynamic - Cumulative Distribution Function (CDF)', \n          size=18)\nSIZE2=12\nplt.xlabel('GDPpc PP anual growth', size=14)\nplt.ylabel('Accumulated probability [0,1]', size=14)\nplt.show()","94160c8f":"f, ax = plt.subplots(figsize=(16, 5)); plt.title('Distribution')\nsns.distplot(ts['GDP per capita'].pct_change().fillna(0),color='darkcyan', bins=20,rug=True,hist_kws={\"density\":True})\nplt.rc('xtick', labelsize=SIZE2)    # fontsize of the tick X labels \nplt.rc('ytick', labelsize=SIZE2)    # fontsize of the tick Y labels\nplt.title('Time series growth dynamic - Histogram and probability density function (PDF)', size=18)\nplt.xlabel('GDP per capita annual growth', size=14)\nplt.show()","6a387226":"import statsmodels.api as sm\nfig, ax = plt.subplots(figsize=(15,5))\nax.set_facecolor('silver')\nsm.graphics.tsa.plot_acf(y,ax=ax,lags=27)\nplt.show()","395fb94d":"import statsmodels.api as sm\nfig, ax = plt.subplots(figsize=(15,5))\nax.set_facecolor('silver')\nsm.graphics.tsa.plot_pacf(y,ax=ax)\nplt.show()","a56e1189":"from statsmodels.tsa.stattools import adfuller\ndef test_stationarity(timeseries):\n\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(window=12).mean()\n    rolstd = timeseries.rolling(window=12).std()\n\n    #Plot rolling statistics:\n    fig = plt.figure(figsize=(12, 8))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.rc('xtick', labelsize=8); plt.rc('ytick', labelsize=16) \n    plt.xticks([])\n    \n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    \n    plt.show()\n    \n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)","e0e3f35e":"test_stationarity(y)","5f89915e":"ts.index = pd.to_datetime(ts.index)\nfrom statsmodels.tsa.seasonal import seasonal_decompose","08cacfca":"from pylab import rcParams\nrcParams['figure.figsize'] = 13, 7\nSIZE2=15  \nplt.rc('xtick', labelsize=SIZE2)    # fontsize of the tick X labels \nplt.rc('ytick', labelsize=SIZE2)    # fontsize of the tick Y labels\ndecomposition = seasonal_decompose(ts, model='additive')\nfig = decomposition.plot()\nplt.show()","b4eaaa84":"# first order difference of the time series\ny_diff = (y).diff().dropna()\ny_diff = pd.Series(y_diff )","450a50e5":"layout = go.Layout(title= 'Sub-Saharan African GDP First order differencing',\nxaxis = dict(ticks='', nticks=43),\nyaxis = dict(nticks=20),legend=dict(x=0.7, y=1))\n\ntrace0 = go.Scatter(x=y_diff.index, y=y_diff.values, mode = 'lines+markers',name=\"SSA GDPpc PPP $ growth 1990-2017\", marker = dict(size=12, color='black'))\ndata = [trace0]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","dfa33c1a":"test_stationarity(y_diff)","106826fb":"# log difference time series\ny_diff2 = (y).diff().diff().dropna()\ny_diff2 = pd.Series(y_diff2)\ntest_stationarity(y_diff2)","d8b8475e":"layout = go.Layout(title= 'Sub-Saharan African GDP Second order differencing', xaxis = dict(ticks='', nticks=43),yaxis = dict(nticks=20),legend=dict(x=0.7, y=1))\ntrace0 = go.Scatter(x=y_diff2.index, y=y_diff2.values, mode = 'lines+markers',name=\"SSA GDPpc PPP $ growth 1990-2017\", marker = dict(size=12, color='black'))\ndata = [trace0]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","1bb20ba8":"fig, ax = plt.subplots(figsize=(15,5))\nax.set_facecolor('silver')\nplt.rc('xtick', labelsize=16)\nsm.graphics.tsa.plot_acf(y_diff2,ax=ax,lags=25)\nplt.show()","85533a41":"fig, ax = plt.subplots(figsize=(15,5))\nax.set_facecolor('silver')\nsm.graphics.tsa.plot_pacf(y_diff2,ax=ax, lags=25)\nplt.show()","a6b64107":"mod = sm.tsa.statespace.SARIMAX(ts['GDP per capita'].values,order=(3,2,3),enforce_stationarity=True,enforce_invertibility=True, maxiter=1000, method='css')\nresults1 = mod.fit()\nprint(results1.summary())","3a6d0908":"results1.plot_diagnostics(figsize=(15, 12),lags=25)\nplt.show()","e902ee6b":"prediction_summary=results1.get_prediction(start=0, end=40).summary_frame()\nprediction_summary.index=['1990-01-01', '1991-01-01','1992-01-01','1993-01-01', '1994-01-01', '1995-01-01',\n               '1996-01-01', '1997-01-01', '1998-01-01', '1999-01-01',\n               '2000-01-01', '2001-01-01', '2002-01-01', '2003-01-01',\n               '2004-01-01', '2005-01-01', '2006-01-01', '2007-01-01',\n               '2008-01-01', '2009-01-01', '2010-01-01', '2011-01-01',\n               '2012-01-01', '2013-01-01', '2014-01-01', '2015-01-01',\n               '2016-01-01', '2017-01-01', '2018-01-01', '2019-01-01',\n               '2020-01-01', '2021-01-01', '2022-01-01', '2023-01-01',\n               '2024-01-01', '2025-01-01', '2026-01-01', '2027-01-01',\n               '2028-01-01', '2029-01-01', '2030-01-01']","422970f6":"forecast=results1.predict(start=0,end=40)\nforecast=pd.DataFrame(forecast, columns = ['projection'])\nforecast.index=['1990', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998',\n       '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007',\n       '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016',\n       '2017','2018','2019','2020','2021','2022','2023','2024','2025','2026','2027','2028','2029','2030']\n","d64f7cf8":"# Create traces\ntrace0 = go.Scatter(\n    x = ts.index,\n    y = ts['GDP per capita'],\n    mode = 'markers',\n    name = 'Actual GDP PPP',marker = dict(size=7))\ntrace1 = go.Scatter(\n    x = forecast.iloc[2:].index,\n    y = forecast.iloc[2:].projection,\n    mode = 'lines+markers',\n    name = 'Arima model (5,2,0) in sample model & 2030 projection',marker = dict(size=7),opacity = 0.6)\n\n\nlayout = go.Layout(title= 'In-sample prediction and out-of-sample forecasting to 2030 per capita - GDP PPP US$ SSA',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20), legend=dict(x=0.1, y=1))\ndata = [trace0, trace1]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='scatter-mode')","51633050":"# Create traces\ntrace0 = go.Scatter(\n    x = ts.index,\n    y = ts['GDP per capita'],\n    mode = 'markers',\n    name = 'Actual GDP PPP',marker = dict(size=7))\n\n\ntrace2 =go.Scatter(x=prediction_summary.iloc[2:].index, y=prediction_summary.iloc[2:].mean_ci_lower.values, name='ARIMA model 95% Lower CI', mode = 'lines',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n\ntrace3 =go.Scatter(x=prediction_summary.iloc[2:].index, y=prediction_summary.iloc[2:].mean_ci_upper.values,name='ARIMA model 95% Upper CI', mode = 'lines',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n\ntrace4 =go.Scatter(x=prediction_summary.iloc[28:].index, y=prediction_summary.iloc[28:]['mean'].values,name='ARIMA model mean projected values', mode = 'markers',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n\nlayout = go.Layout(title= 'In-sample prediction and out-of-sample forecasting 95% CI - GDPpc PPP US$ SSA',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20), legend=dict(x=0.1, y=1))\ndata = [trace0,trace2,trace3,trace4]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='scatter-mode')","28a6c60b":"df3=pd.read_csv('..\/input\/WDIData.csv')\ndf3=df3[df3['Country Name']=='World']\ndf3['Indicator Name']=df3['Indicator Name'].str.replace('(',':').str.replace(')',':')\ndf3=df3[df3['Indicator Name'].str.contains(\"GDP per capita, PPP :current international\")==True]\ndf3.index=df3['Country Name']\ndf3=df3.dropna(axis=1)\ndf3.drop(['Country Name','Country Code','Indicator Name','Indicator Code'], axis=1, inplace=True)\nts2=df3 ; ts2=ts2.T\nts2.index = pd.to_datetime(ts2.index)\nts2.columns=['GDP per capita']\nts2['world_percentatge']=ts['GDP per capita']\/ts2['GDP per capita']","6e1d2d80":"layout = go.Layout(title= 'World & SSA GDP per capita PPP constant $ 1990-2017',\nxaxis = dict(ticks='', nticks=43),\nyaxis = dict(nticks=20), legend=dict(x=0.1, y=1))\ntrace0 =go.Scatter(x=ts2.index, y=ts2['GDP per capita'],\n                   name='World GDP per capita PPP TS 1990-2017', marker = dict(size=12, color='green'))\ntrace1 =go.Scatter(x=ts.index,y=ts['GDP per capita'],\n                   name='SSA GDP per capita PPP TS 1990-2017',marker = dict(size=12, color='blue'))\ndata = [trace0]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","f79ca6fc":"trace1 = go.Box(\n    y=ts['GDP per capita'].pct_change().fillna(0),\n    name='SSA GDPpc growth TS',\n    marker=dict(\n        color='blue'),boxmean='sd')\n\ntrace2 = go.Box(\n    y=ts2['GDP per capita'].pct_change().fillna(0),\n    name='World GDPpc growth TS',\n    marker=dict(\n        color='green'),boxmean='sd')\ndata = [trace1,trace2]\nfig =go.Figure(data=data, layout=layout)\niplot(data)","bc1a37d7":"SSA_growth=ts['GDP per capita'].pct_change().fillna(0)\nWorld_growth=ts2['GDP per capita'].pct_change().fillna(0)","877fa4de":"layout = go.Layout(title= 'SSA vs World GDP per capita PPP growth % 1990-2017',\n    xaxis = dict(ticks='', nticks=43), yaxis = dict(nticks=20),legend=dict(x=0.1, y=1))\n\ntrace0 =go.Scatter(x=ts.index, y=SSA_growth*100, name='SSA GDP per capita PPP anual growth', mode = 'markers+lines',\n                   marker = dict(size=12, color='blue'))\n\ntrace1 =go.Scatter(x=ts2.index, y=World_growth*100,name='World GDP per capita PPP anual growth', mode = 'markers+lines',\n                   marker = dict(size=12, color='green'))\ndata = [trace0, trace1]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","8f56505b":"ts2['world_percentatge']=ts\/ts2\nlayout = go.Layout(title= 'SSA GDP per capita PPP annual ratio with the world average 1990-2017',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20))\ntrace0 =go.Scatter(x=ts2.index, y=ts2['world_percentatge'],\n                   mode = 'markers+lines',marker = dict(size=12, color='coral'))\ndata = [trace0]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","0f72227e":"ts2.index = pd.to_datetime(ts2.index)","c0134044":"# log difference time series\nts2_diff2 = ((ts2['GDP per capita']).diff().diff().fillna(0))\nts2_diff2 = pd.Series(ts2_diff2)\ntest_stationarity(ts2_diff2)","e7e8c9c2":"fig, ax = plt.subplots(figsize=(15,5))\nax.set_facecolor('silver')\nsm.graphics.tsa.plot_acf(ts2_diff2,ax=ax, lags=25)\nplt.show()","a61343c3":"mod = sm.tsa.statespace.SARIMAX((ts2['GDP per capita']), order=(0,2,2),\n                                enforce_stationarity=True, enforce_invertibility=True,)\nresults2 = mod.fit()\nprint(results2.summary())","46dfb1ca":"results2.plot_diagnostics(figsize=(15, 12),lags=20)\nplt.show()","70853efb":"prediction_summary2=results2.get_prediction(start=0, end=40).summary_frame()\nprediction_summary2.index=['1990-01-01', '1991-01-01','1992-01-01','1993-01-01', '1994-01-01', '1995-01-01',\n               '1996-01-01', '1997-01-01', '1998-01-01', '1999-01-01',\n               '2000-01-01', '2001-01-01', '2002-01-01', '2003-01-01',\n               '2004-01-01', '2005-01-01', '2006-01-01', '2007-01-01',\n               '2008-01-01', '2009-01-01', '2010-01-01', '2011-01-01',\n               '2012-01-01', '2013-01-01', '2014-01-01', '2015-01-01',\n               '2016-01-01', '2017-01-01', '2018-01-01', '2019-01-01',\n               '2020-01-01', '2021-01-01', '2022-01-01', '2023-01-01',\n               '2024-01-01', '2025-01-01', '2026-01-01', '2027-01-01',\n               '2028-01-01', '2029-01-01', '2030-01-01']","21405150":"forecast2=results2.predict(start=2,end=40)\n\nforecast1=results1.predict(start=0,end=40)\n\n# Create traces\ntrace0 = go.Scatter(\n    x = ts.index,\n    y = ts['GDP per capita'],\n    mode = 'markers',\n    name = 'SSA Actual GDP PPP',marker = dict(size=7))\n\ntrace1 = go.Scatter(\n    x = forecast.iloc[2:].index,\n    y = forecast.iloc[2:].projection,\n    mode = 'lines',\n    name = 'SSA Arima model (5,2,0) prediction',marker = dict(size=7),opacity = 0.5)\n\n# Create traces\ntrace2 = go.Scatter(\n    x = ts2.index,\n    y = ts2['GDP per capita'],\n    mode = 'markers',\n    name = 'World Actual GDP PPP',marker = dict(size=7))\n\n\ntrace3 = go.Scatter(\n    x = forecast2.index,\n    y = forecast2.values,\n    mode = 'lines',\n    name = 'World Arima model (0,2,1) prediction',marker = dict(size=7),opacity = 0.5)\n\n\nlayout = go.Layout(title= 'In-sample prediction and out-of-sample projection to 2030 (GDPpc PPP US$) SSA & WA',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20), legend=dict(x=0.1, y=1))\n\ndata = [trace0, trace1,trace2,trace3]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='scatter-mode')","e59e2f4d":"forecast\n# Create traces\ntrace0 = go.Scatter(\n    x = ts.index,\n    y = ts['GDP per capita'],\n    mode = 'markers',\n    name = 'Actual GDP PPP',marker = dict(size=7))\n\n\ntrace2 =go.Scatter(x=prediction_summary.iloc[2:].index, y=prediction_summary.iloc[2:].mean_ci_lower.values, name='95% CI', mode = 'lines',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n\ntrace3 =go.Scatter(x=prediction_summary.iloc[2:].index, y=prediction_summary.iloc[2:].mean_ci_upper.values, name='95% CI', mode = 'lines',\n   marker = dict(size=10, color='red'),opacity = 0.3)\n\n# Create traces\ntrace4 = go.Scatter(\n    x = ts2.index,\n    y = ts2['GDP per capita'],\n    mode = 'markers',\n    name = 'World Actual GDP PPP',marker = dict(size=7,color='green'))\n\ntrace5 =go.Scatter(x=prediction_summary2.iloc[2:].index, y=prediction_summary2.iloc[2:].mean_ci_lower.values, name='95% CI', mode = 'lines',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n\ntrace6 =go.Scatter(x=prediction_summary2.iloc[2:].index, y=prediction_summary2.iloc[2:].mean_ci_upper.values, name='95% CI', mode = 'lines',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n\n\nlayout = go.Layout(title= 'In-sample prediction and out-of-sample projection to 2030 95% CI (GDPpc PPP US$) SSA & WA',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20), legend=dict(x=0.1, y=1))\ndata = [trace0,trace2,trace3,trace4,trace5,trace6]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='scatter-mode')","7cf1f690":"trace5 =go.Scatter(x=prediction_summary2.iloc[2:].index, y=prediction_summary2.iloc[2:].mean_ci_lower.values, name='95% CI', mode = 'lines',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n\ntrace6 =go.Scatter(x=prediction_summary2.iloc[2:].index, y=prediction_summary2.iloc[2:].mean_ci_upper.values, name='95% CI', mode = 'lines',\n                   marker = dict(size=10, color='red'),opacity = 0.3)\n","70b7146f":"ts2['world_percentatge']=ts\/ts2\nfuture_ratio=results1.predict(start=27,end=40)\/results2.predict(start=27,end=40)\n\nratio_l_CI=prediction_summary.iloc[2:28].mean_ci_lower\/prediction_summary2.iloc[2:28].mean_ci_lower\nratio_h_CI=prediction_summary.iloc[2:28].mean_ci_upper\/prediction_summary2.iloc[2:28].mean_ci_upper\nfuture_ratio_l_CI=prediction_summary.iloc[27:].mean_ci_lower\/prediction_summary2.iloc[27:].mean_ci_lower\nfuture_ratio_h_CI=prediction_summary.iloc[27:].mean_ci_upper\/prediction_summary2.iloc[27:].mean_ci_upper\nlayout = go.Layout(title= 'SSA GDPpc PPP as a ratio of the World average future prediction to 2030',\n    xaxis = dict(ticks='', nticks=43),\n    yaxis = dict(nticks=20),legend=dict(x=0.7, y=1))\n\ntrace0 =go.Scatter(x=ts2.index, y=ts2['world_percentatge'],\n                   mode = 'markers',name = '1990-2017 actual ratio', marker = dict(size=12, color='coral'),opacity=0.8)\ntrace10 =go.Scatter(x=future_ratio.index, y=future_ratio,\n                   mode = 'markers',name = 'predicted ratio', marker = dict(size=12, color='red'),opacity=0.5)\ntrace5 =go.Scatter(x=ratio_l_CI.index, y=ratio_l_CI.values,\n                   mode = 'lines',name = '2017-2030 actual ratio 95% CI', marker = dict(size=10, color='black'),opacity = 0.8)\n\ntrace6 =go.Scatter(x=ratio_h_CI.index, y=ratio_h_CI.values,\n                   mode = 'lines',name = '2017-2030 actual ratio 95% CI', marker = dict(size=10, color='black'),opacity = 0.8)\ntrace2 =go.Scatter(x=future_ratio_l_CI.index, y=future_ratio_l_CI.values,\n                   mode = 'lines',name = '2017-2030 projected ratio 95% CI', marker = dict(size=10, color='red'),opacity = 0.5)\ntrace3 =go.Scatter(x=future_ratio_h_CI.index, y=future_ratio_h_CI.values,\n                   mode = 'lines',name = '2017-2030 projected ratio 95% CI', marker = dict(size=10, color='red'),opacity = 0.5)\ndata = [trace0,trace2,trace3,trace10,trace5,trace6]\nfig =go.Figure(data=data, layout=layout)\niplot(fig, filename='heatmap',show_link=False)","a40a5a81":"Gaussian white noise:\n    $$ U_t \\sim N(0,1) $$","009cb423":"The standarized residual plot of the fitted model in the upper right corner appears to be white noise as it does not display any pattern. The histogram plot in the upper right corner pair with the kernel density estimation (orange line) indicates that the time series is almost normally distributed (green line) and aproximates **Gaussian White Noise.**\n\n\nThe correlogram (autocorrelation plot) confirms this resuts, since the time series residuals show low correlations with lagged residuals. There aren't any statistically significant peaks at 5% significance level. Hence we can state that the the correlogram looks like that of discrete white noise. \n\nWe can conclude that the model is a good fit for our time series data. ","332ef6e0":"# MODELING AND FORECASTING SUB-SAHARAN GDP per capita PPP using ARIMA models\n\n     \u201cPrediction is very difficult, especially about the future\u201d. Niels Bohr","ff13833e":"### 5) Times series comparison with the world average","48d0da83":"As expected we see a very **asymetric distribution with a long right side tail.**","d64835e5":"### Data preparation\n\nUnfortunately we only can account for 27 year observations, from 1990 to 2017 (very few SSA countries have reliable GDP per capita PPP data up to the 60s), which is short of the 50 recommended to build an ARIMA model based on the Box-Jenkins methodology of time series forecasting.\n\nFrom the World Bank database, we have collected GDP PPP data for 27 years from 1990 to 2016. The sample is composed of 36 Sub-Saharan economies.","86b88222":"Altought both series are stationary,while  the World GDP per capita shows a much more exponential growth pattern, SSA follows a more constant additive growth pattern.","39f03dfb":"To fit the time series data to an ARIMA model with parameters ARIMA(p, d, q) we need to find the optimal parameter setting that strips away the systematic information and leaves us with gaussian white  noise residuals. Thus for selecting, the best fitting model we iteratively generate different models with a given parameter combination and fit the data to it. For each of these models we compute the Akaike Information Criterion (AIC) and eventually choose the model for which the fitted data results in the lowest AIC. In this case, we want to choose a simple ARIMA model that generalizes well the behaviour of the series. \n\n**ORDER p**\n- The PACF shows conveys the pure correlation between a lag and the series. Order 3 is the first above the significance line. We choose this value in order to keep the model as simple as possible.\n\n**ORDER d**\n- We already detected order of integration 2 in order to make the series stationary.\n\n**ORDER q**\n- Using ACF plot we can gauge the number of MA terms. An MA term is technically, the error of the lagged forecast. Order 3 is the first above the significance line; we choose this value in order to keep the model as simple as possible. \n\n**The Akaike Information Criterion**\n\nThe Akaike information criterion (AIC) is a measure of the relative quality of statistical models for a given set of data. Given a collection of models for the data, AIC estimates the quality of each model, relative to each of the other models. Hence, AIC provides a means for model selection. AIC measures the trade-off between the goodness of fit of the model and the complexity of the model (number of included and estimated aprameters). The AIC is calculated as follows :\n\n**AIC = 2k - 2ln(L)**\n\nWhere k corresponds to the number of estimated parameters in the model and L refers to the maximum value of the likelihood function for the model. The AIC only measures the in-sample model fit of the data.","aff97916":"**5.3 Growth distribution of both TS**","391536e3":"- We can see how since 1990 there has been a growing divergence of the SSA GDP per capita PPP and the world average. \n\n\n- While in 1990 SSA GDP per capita was around 20% of the world average, in 2017 it only represented around 15%. In these 24 years SSA Africa has diverged 5 points from the world average.","3c73d2bf":"A visual examination of the correlogram to lag 27 confirms that the data is clearly non-stationary and follows an accumulative autoregressive growth pattern up to the 9th lag, and starts accumulating negative autocorrelation from the 10th lag onward.  It is the expected result for a growing additive time series, with no sesonality. The blue margin shows the 95% confidence interval. ","0b2e8158":"**1.3 Time Series growth dynamic distribution examination**","24158021":"**2.1 First-Order Difference**\n\nWe assume that we can remove the trend\/seasonality from our data using the first order differencing. \n(we take the first differences between values in the series, the order tells us how far apart these values are) Yt-Yt-1","3af6fc70":"Partial autocorrelation is as the correlation between the series and its lag, excluding the contributions from the intermediate lags. PACF conveys the pure correlation between a lag and the series. ","ca641650":"### 3) ARIMA (p,d,q) model","de65921e":"Analyzing the growth dynamic of the time series; We can identify some cyclic patterns. Thus, from 1990 to 1994 the growth is the lowest of the series. From 1994 to 1996 we see growth accelearating, with a slowdown in 1998. From 1998 to 2007, growth reaccelerates progressively (expect for the period 2001-2003); reaching a peak in 2006  (6.16%) (pre-depression period). The post-depression dynamics are marked by a recovery of the growth rates (rates higher than series 3% average) with a sharp drop in 2015 (growth of 1.5%). As of this year, the recent period initiates a bullish tends towards the 3% average of the series.","053bdb30":"With a median value of 4%, the world TS accumulates higher % growth. Standard deviation is very similar in both series.","488dfd47":"**Concept of Stationarity :**\n\n*A stochastic process is called strongly stationary if the distribution of original time series is exactly the same as its lagged versions. So the the distribution of the time series is unchanged for any abritrary shift in time.*\n\n*This assumption, however, doesn't apply to real time series and a milder assumption enters the picture, covariance stationarity. This just means that the mean and variance of the series should not be a function of time (they have to be finite and independent of time) and that the  autocovariance between time points and is also finite and only depends on the distance between the two points.* \n\n*Why is making our time series stationary important? If our series is consistently increasing\/decreasing over time, it means that either the mean is not constant or the variance-autocovariances are time-dependent, which makes more difficult to develop mathematical theory and models for time series. In summary, we can only study the series patterns for the given period and we cannot build generalized predictive ARIMA models with it*.","1e5a4703":"Our time series separated into its trend, seasonal, and residual components. As our time series is anual, we can discard any kind of seasonality. We can discard also any underlying pattern in the residuals.\n","37211282":"**5.1 Data Preparation**","77b35b62":"**1.1 Time Series plot**","f83ba52a":"The BJ methodology consists of four steps :\n    \n    1) Time series identification: In short, we have to find the appropiate values for p,d and q.\n    2) Model estimation: After having identified the appropiate parameters of the ARIMA model. \n    3) Model diagnostic: We have to check that the model residuals follow a white noise distribution.\n    4) Forecasting: We can project statistical predictive inference. ","3db0bf2f":"### ARIMA models \n\nThe publication in 1970 of Time Series Analysis: Forecasting and Control by Box and Jenkins, ushered a new generation of forecasting tools capabale to analize the stochastic properties of time series utilizing the underlying information in the data. \n\nWith the underlying philosophy of *\"leting the data speak for herself\"*, the ARIMA acronym is very direct, capturing the key aspects of the model itself. Briefly :\n\n- **AR: Autoregression**-> The evolving response variable is regressed on its own lagged prior values.\n\n- **I: Integrated.**-> The use of differencing of raw observations (e.g. subtracting an observation from an observation at the previous time step) in order to make the time series stationary. \n    \n- **MA: Moving Average.**-> The MA part indicates that the regression error is actually a linear combination of error terms whose values occurred contemporaneously and at various times in the past.\n\nEach of these components have to be explicitly specified in the model as a parameter with standard notation of ARIMA(p,d,q) where the parameters are substituted with integer values which indicate the specific ARIMA model being used. The parameters are defined as follows:\n\n- **p:** The number of lag observations included in the model, also called the lag order.\n\n- **d:** The number of times that the raw observations are differenced, also called the degree of differencing.\n\n- **q:** The size of the moving average window, also called the order of moving average.\n\nContrary to OLS linear regression, Arima models do not involve independent regressors, but rather they make use of the information in the time series itself to generate prediction. ARIMA models therefore, rely heavily on the underlying autocorrelation patterns in the data.\n\nARIMA models have proven themselves to be relatively robust especially when generating short-run forecasts.","ac28410d":"We see that our in sample performance shows very strong alignment, and apart from the start of the series, our relative error is within the range of 95% confidence interval, which is relatively strong. Our ARIMA (3,2,3) model predicts that **without any underlying economic structural change**; at the current growth patterns, the GDP per capita in SSA will only surpass the 4.000 US dollars barrier by 2030.\n\nWe have to account that the forecasting results of this model are only predicted values, accounting for the underlying structure of the Time Series over the last 24 years.","d7d9c01c":"The box-plot shows us visually the same indicators identified before.","796be44c":"**5.6 Diagnostic plots for standardized residuals**","ede0a826":"Violin plots are similar to histograms  in that they show an abstract representation of the probability distribution of the data, rather than showing counts of data points that fall into bins or order statistics, violin plots use the kernel density estimation (KDE) to compute an empirical distribution of the data.\n\nThe violin plot shows the presence of different peaks, their position and \"relative amplitude\". ","47048e6c":"We see that the DF test statistic is already smaller that 1% percent significance. However, since there are spikes in the ACF and PACF plots which lie outsite the insignificant zone it can be concluded that the residuals are still not random. This implies that there is an information patterns left in the residuals which can be extracted by autoregressive and moving average models.\n\nWhen looking at the PACF and ACF plot of the transformed second order differenced time series a significant spike in the residuals at lag 15 can be detected. This is an indication of an unusual component, which has not been extracted from the series completely.","c2e55664":"**1.6 Time series decomposition**\n\nThe decomposition of time series is a statistical task that deconstructs a time series into several components, each representing one of the underlying categories of patterns. We will use an additive model as it seems we are dealing with a liniar trend fairly constant over time. A multiplicative model is more appropriate when we are increasing (or decreasing) at a non-linear rate.\n\nHowever, based off the previous charts, it looks like the trend in some periods is slightly increasing at a higher rate than just linear.","3a01df37":"**5.7 In sample prediction and out of sample forecast**","3ec6a692":"**1.2 Time Series growth dynamic examination**","3e1dab5e":"We see that our p value got a lot closer to 0.05, however, we still don't have a stationary series.\n\nThe application of the first difference  seems to have extracted quite well the trend as well and made the time series standard deviation stationary. However, the test statistic is still larger than the critical value for a significance level of 5%. ","68325efe":"**1.5 Rolling Mean, Std and Dickey-Fuller Test:**","04599065":"Altought by visualizing the time series it is fairly easy to identify a changing mean or variation in the data, for a more accurate stationary assessment we have to undertake the Dickey-Fuller test. ","d8c6436f":"### 4) In-sample prediction and out-of-sample forecasting of SSA GDP per capita to 2030","cddb4644":"### 2) Stationarize the time series\nWe need to transform the data to make it stationary. ","8c8dbc84":"**2.2 Second-Order Differencing**\n\nAs our differenced data is still not stationary another differencing step has to be included. This step indicates a higher order integration of the underlying process. We interpret the second level of differenced data as the \u201cchange of changes\u201d. ","6b713e95":"**ARIMA (0,2,2) world model**\n\nAIC different ARIMA models with pm.auto_arima (not usable in Kaggle) :\n\n    Fit ARIMA: order=(1, 2, 1); AIC=nan, BIC=nan, Fit time=nan seconds\n    Fit ARIMA: order=(0, 2, 0); AIC=367.759, BIC=370.351, Fit time=0.016 seconds\n    Fit ARIMA: order=(1, 2, 0); AIC=368.733, BIC=372.620, Fit time=0.031 seconds\n    Fit ARIMA: order=(0, 2, 1); AIC=361.559, BIC=365.447, Fit time=0.016 seconds\n    Fit ARIMA: order=(0, 2, 2); AIC=360.588, BIC=365.771, Fit time=0.187 seconds\n    Fit ARIMA: order=(1, 2, 3); AIC=nan, BIC=nan, Fit time=nan seconds\n    Fit ARIMA: order=(1, 2, 2); AIC=nan, BIC=nan, Fit time=nan seconds\n    Fit ARIMA: order=(0, 2, 3); AIC=nan, BIC=nan, Fit time=nan seconds\n\nWe choose the ARIMA (0,2,2) as the best fit to model the world GDP per capita time-series. ","96150b74":"The world GDP per capita presents higher growth in almost all years of the time series, except 1996, 2009 with the effects of the great depression and 2014.","6245c9a1":"**1.4 ACF (Auto Correlation Function Plot) & PACF (Partial Auto Correlation Function Plot)**\n\nThe first test of stationarity has to be autocorrelation function ACF.  \n\nThe ACF at lag k denoted as :\n\n$$ p_k = covarience_k  \/  variance $$\n\nWhere we have each observation covariance at lag k. As both the variance and the covariance are measured in the same units of measurement the autocorrelation function is unitless and it lies between -1 and 1 as any other correlation coeficient. ","a505e1ad":"** 5.5 Arima modeling World GDP per capita PPP **","68b99976":"From the time series figure above, the visual inspection of the time plot clearly indicates that Sub-Saharan GDP PPP per capita follows a **positive additive growth pattern.** The mean and the variance are clearly not constant. Therefore, we regard it as a non-stationary time series. *(further below we will discuss the importance of making the time series stationary for model building)*","e3983b55":"## 1) Time series identification & exploratory analisys","4397e31a":"*Following the Box-Jenkins methodology, we will build an Autoregressive Integrated Moving Average model to predict the Sub-Saharan GDP per capita (PPP), according to the ARIMA recognition rules (stationary test, white gaussian noise residuals,..), under the AIC criterion. Using this optimzied ARIMA model, we'll generate a projection for the SSA GDP per capita in PPP to 2030. Finally, after building a second optimized ARIMA model to project the world GDPpc in PPP to 2030, we'll analize how the SSA projection fathoms with the world average. We will derive our own conclusions from the underlying chacracteristics of both projected time series, and analize which the structural transformation pattern needed for SSA to converge with the world average.*","940825c0":"The \"smoothing effect\" of the log transformation is valuable both for making patterns of the data easy interpretable. The see that the log transformed time seriues follows the same growth dynamic as the original time series.","24ad0fb7":"The cumulative distribution function (CDF) is the probability that the variable takes a value less than or equal to an certain X value. For instance, we see that the probability that a given time series year reports GDPpc growth < 3% is higher than 45%. \n\n- 75% of the years are compressed between a growth of 1.8% and 4.6%. \n- Only 25% of the years registered growth higher than 4.6%.","695bcd75":"**5.4 SSA total GDPpc PPP as a % of the World average 1990-2017**","f23ceaf8":"**5.2 World Time series identification & exploratory analisys**","41b7e4e8":"### Conclusions\n\nTaking into account the underlying patterns of both time series, without a structural change in the regional GDPpc time series, SSA will continue being the underdog of the global economy for the next decade and the divergence with the world average is only likely to increase. Our model indicates that if the current underlying trends are to continue, the regional GDPpc as a percentatge of the world average will decrease to around 15% at the end of the 30s decade from the current value of around 17%. The current structural trend of the region\u2019s GDPpc growth remains weak. A much more explosive growth pattern is highly needed to converge with the world average. Returning to pre-crisis levels of around 5% growth would bring the region in the convergence world average path.\n\nAltough, its true that the region is experiencing a much explosive population growth than the rest of the world; it also departs from a much lower position, which allows to accumulate higher scaled levels of economic output.\n\nMany economists suggest that SSA is too resourced-focus and manufacture-absent, which historical data tells it is the \"standard model\" followed by the majority of countries to have successfully transitioned from low-to middle or high income status. It's also true that western agricultural and commercial policies are still very damaging to SSA economic interests, but the region will only converge with the world average if decisive \"game-changing\" socio-economic and institutional reforms are implemented. Regarding the later, the Ethiopian example, one of the poorest countries in the world in 2000 and now one of the fastest-growing economies in the world, sheds some light, into the path to follow for the most vulnerable nations.\n\nNote: We have to remember, that the forecasting result of these model are only predicted values. The economy is complex and dynamic system. The adjustments of macro and investment policy, institutional integrity and environment, social stability, plus other numerous internal external and internal factors can cause drastic changes in terms of GDP per capita growth in any region of the world.","acff0a97":"- The (0, 2, 2) ARIMA model fitted is adequate since the standardized residuals show a white gaussian noise pattern and fluctuate around 0.\n\n- 2009, (the year that the great depression struck the hardest), represents a huge outlier, however, even if it doesn't bring any underlying information behaviour to the model, we cannot omit this year to simplify the modeling procedure (stationary & discrete white noise residuals) because with such small sample, the predictive accuracy of the model would be compromised. Altought we have not been able to extract information about this \"unusual component\" the predictive value of the model remains intact. \n\n- We can get to the same conclusions as with the SSA time series and we conclude that the residuals follow and aproximates Gaussian White Noise trend. At 20 lags the correlogram doesn't show any significant peak higher than 5% significance level. Hence we can state that the the correlogram is discrete white noise.","e60be45e":"**3.1 Diagnostic plots for standardized residuals**","2a6b585d":"This indexed series (1990=1) gives us a good perspective on the cumulative growth dynamic of the series. We can identify a very regular trend.","6d0b7241":"**Box-Jenkins methodology**","d2a07444":"**5.8 Future prediction SSA total GDPpc PPP as a % of the World average 2018-2030**","bef1d22b":" Judging from the rolling mean plot, it is evident that there is a trend in the data and that the data is not trend stationary. \n \n The result of the Dickey-Fuller Test also confirms it."}}