{"cell_type":{"587bf12f":"code","78a1957d":"code","ffd5167b":"code","de067738":"code","9c872cf7":"code","e6c83bb2":"code","740f0d01":"code","96bfcbd3":"code","7360aa19":"code","a65e2646":"code","77a17446":"code","37344725":"code","8f57576d":"code","1eaa4ce4":"code","febf8009":"code","95d78b11":"code","9d475f4b":"code","2d7b737c":"markdown","7c821484":"markdown","0ff76d02":"markdown","059b0670":"markdown","c7d79aee":"markdown","0e1f3a34":"markdown","271e5f33":"markdown","0b0572d8":"markdown","0f1a1a80":"markdown","90589fea":"markdown","c378ad55":"markdown","821b891c":"markdown","f8bafc9d":"markdown","46bef42d":"markdown","ce886a77":"markdown","f641238e":"markdown","4756ba93":"markdown","effa2104":"markdown","24b28984":"markdown","83f25c2a":"markdown","6454d959":"markdown","66963abb":"markdown"},"source":{"587bf12f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78a1957d":"# Import extra packages\nimport matplotlib.pyplot as plt # for plotting graphs","ffd5167b":"# create grouped bar graph function\ndef plot_multiple_bar_graph(l_1,l_2,l_3,title,label_1,label_2):\n    # create data\n    fig, ax = plt.subplots(figsize=(12, 8))\n    x = np.arange(len(l_3))\n\n    # Define bar width. We need this to offset the second bar.\n    bar_width = 0.35\n\n\n    b1 = ax.bar(x, l_1, width=bar_width)\n    # Same thing, but offset the x.\n    b2 = ax.bar(x + bar_width, l_2, width=bar_width)\n\n    # Fix the x-axes.\n    ax.set_xticks(x + bar_width \/ 2)\n    ax.set_xticklabels(l_3)\n\n    # Add legend.\n    ax.legend()\n\n    # Add axis and chart labels.\n    ax.set_ylabel(\"Passed Students (%)\", labelpad=15)\n    ax.set_title(title, pad=15)\n    \n    # calling the styling function\n    graph_styling()\n\n    # add yticks and legend\n    ax.set_yticks(np.arange(0, 111, 10))\n    ax.legend(labels=[label_1, label_2], loc='upper right')\n\n    # Label with label_type 'center' instead of the default 'edge'\n    ax.bar_label(b1, label_type='edge', fmt='%.1f')\n    ax.bar_label(b2, label_type='edge', fmt='%.1f')\n\n    # To load the display window\n    plt.show()\n\n\n# create styling function\ndef graph_styling():\n    # Axis styling.\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_color('#DDDDDD')\n    ax.tick_params(bottom=False, left=False)\n    ax.set_axisbelow(True)\n    ax.yaxis.grid(True, color='#EEEEEE')\n    ax.xaxis.grid(False)","de067738":"# reading the dataset\nfilename = \"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\"\ndf = pd.read_csv(filename)","9c872cf7":"df.head()","e6c83bb2":"print(df.shape)","740f0d01":"# check the datatype of the dataframe columns\ndf.info(verbose=False)","96bfcbd3":"# check summary statistics and find if there is Nan in any numeric columns\ndf.describe()","7360aa19":"# changing columns name for simplicity\ndf.rename(columns={\"race\/ethnicity\":\"origin\", \"parental level of education\":\"parent's education\",\"lunch\":\"lunch before exam\",\"test preparation course\":\"exam preparation\"}, inplace = True)\n\n# get column names\ndf.columns","a65e2646":"# let's examine the types of the column labels\nall(isinstance(column, str) for column in df.columns)","77a17446":"# pass marks for each subject\npassing_marks = 50\nnum_subjects = 3\ntotal_marks = passing_marks * num_subjects\n\n# adding an extra column to get total score of all subjects\ndf[\"total score\"] = df[[\"math score\", \"reading score\", \"writing score\"]].sum(axis = 1)\n\n# adding an extra columns to check pass\/fail for each subject\ndf[\"maths result\"] = np.where(df['math score'] >= passing_marks, \"Pass\", \"Fail\")\ndf[\"reading result\"] = np.where(df['reading score'] >= passing_marks, \"Pass\", \"Fail\")\ndf[\"writing result\"] = np.where(df['writing score'] >= passing_marks, \"Pass\", \"Fail\")\n\n# adding an extra column to check pass\/fail for total score\ndf['overall result'] = df.apply(lambda x: 'Pass' if (x['total score'] >= total_marks) else 'Fail', axis=1)\n\n# check the top 5 records\ndf.head()","37344725":"# create empty lists for subjects and count of pass students\nsubjects = []\np_count = []\nf_count = []\n\n# iterate to get values\nfor col in df.columns[-4:]:\n    df_temp = df[col].value_counts()\n    #apend the lists\n    subjects.append(col)\n    p_count.append((df_temp.get(0)\/df.shape[0])*100)\n    f_count.append((df_temp.get(1)\/df.shape[0])*100)\n\n# plot the graph\nwidth = 0.35\nfig, ax = plt.subplots(figsize=(12, 8))\np1 = ax.bar(subjects, p_count, width, color='c')\np2 = ax.bar(subjects, f_count, width, bottom=p_count, color='r')\n\n# Naming the y-axis and the whole graph\nplt.ylabel(\"Students (%)\")\nplt.title(\"Performance of Students\")\n  \n# add tyticks and legend\nax.set_yticks(np.arange(0, 121, 15))\nax.legend(labels=['Pass', 'Fail'], loc='upper right')\n\n# Label with label_type 'center' instead of the default 'edge'\nax.bar_label(p1, label_type='center', fmt='%.1f')\nax.bar_label(p2, label_type='center', fmt='%.1f')\n\ngraph_styling()\n\n# To load the display window\nplt.show()","8f57576d":"# create empty lists for subjects and count of pass students - gender wise\nsubjects_gender, p_male, p_female = ([] for i in range(3))\n\n# iterate to get values\nfor col in df.columns[-4:]:\n    #apend the subject list\n    subjects_gender.append(col)\n    \n    # get total count of records for each gender\n    df_gender = df.groupby('gender')[col].count()\n    \n    # get count of records for passed students\n    df_gender_pass = df[df[col] == 'Pass']\n    df_gender_count = df_gender_pass.groupby('gender')[col].count()\n    \n    # apend the list for passed males and females\n    p_female.append((df_gender_count.get(0)\/df_gender.loc['female'].sum())*100)\n    p_male.append((df_gender_count.get(1)\/df_gender.loc['male'].sum())*100)\n\n\n# plot the graph\nplot_multiple_bar_graph(p_male,p_female,subjects_gender,\"Passed Students - Gender Wise\",\"Male\",\"Female\")","1eaa4ce4":"#create empty lists for subjects and count of pass students - origin wise\nsubjects_origin, p_maths, p_reading, p_writing, p_overall = ([] for i in range(5))\n\n#iterate to get values\nfor col in df.columns[-4:]:\n    # apend the subject list\n    subjects_origin.append(col)\n    \n    # get total count of records for each gender\n    df_origin = df.groupby('origin')[col].count()\n    \n    # get count of records for passed students\n    df_origin_pass = df[df[col] == 'Pass']\n    df_origin_count = df_origin_pass.groupby('origin')[col].count()\n    \n    for group in range(len(df_origin.index)):\n        if col == 'maths result':\n            p_maths.append((df_origin_count[group]\/df_origin[group])*100)\n        elif col == 'reading result':\n            p_reading.append((df_origin_count[group]\/df_origin[group])*100)\n        elif col == 'writing result':\n            p_writing.append((df_origin_count[group]\/df_origin[group])*100)\n        else:\n            p_overall.append((df_origin_count[group]\/df_origin[group])*100)\n\n\n# defining plot size\nfig, axs = plt.subplots(2, 2, figsize=(12, 8), constrained_layout=True, sharex=True, sharey=True)\n\n# definging data for plotting\ngroup_subject_data = [p_maths, p_reading, p_writing, p_overall]\ngroups = ['Group A', 'Group B', 'Group C', 'Group D', 'Group E']\n\n#plot graph\nfor nn, ax in enumerate(axs.flat):\n    p1 = ax.bar(groups, group_subject_data[nn])\n    ax.bar_label(p1, label_type='edge', fmt='%.1f')\n    ax.set_title(subjects_origin[nn], fontsize='medium', loc='left')\n\n# add labels    \nfig.supxlabel('Groups')\nfig.supylabel('Passed Students (%)')\nfig.suptitle(\"Passed Students - Race\/Ethnicity Wise\", fontsize=16)\n\nplt.show()","febf8009":"#create empty lists for subjects and count of pass students - exam preparation wise\nsubjects_prep, p_prepare, p_unprepare = ([] for i in range(3))\n\n#iterate to get values\nfor col in df.columns[-4:]:      \n    # apend the subject list\n    subjects_prep.append(col)\n    \n    # get total count of records for each gender\n    df_prep = df.groupby('exam preparation')[col].count()\n    \n    # get count of records for passed students\n    df_prepare_pass = df[df[col] == 'Pass']\n    df_prepare_count = df_prepare_pass.groupby('exam preparation')[col].count()\n    \n    # apend the list for prepartion as yes or no\n    p_prepare.append((df_prepare_count.get(0)\/df_prep.loc['completed'].sum())*100)\n    p_unprepare.append((df_prepare_count.get(1)\/df_prep.loc['none'].sum())*100)\n\n\n# plot the graph\nplot_multiple_bar_graph(p_prepare,p_unprepare,subjects_prep,\"Passed Students by Exam Preparation\",\"Prepared\",\"Not Prepared\")","95d78b11":"#create empty lists for subjects and count of pass students - exam preparation wise\nsubjects_lunch, p_lunch_full, p_lunch_less = ([] for i in range(3))\n\n#iterate to get values\nfor col in df.columns[-4:]:      \n    # apend the subject list\n    subjects_lunch.append(col)\n    \n    # get total count of records for each gender\n    df_lunch = df.groupby('lunch before exam')[col].count()\n    \n    # get count of records for passed students\n    df_lunch_pass = df[df[col] == 'Pass']\n    df_lunch_count = df_lunch_pass.groupby('lunch before exam')[col].count()\n    \n    # apend the list for prepartion as yes or no\n    p_lunch_less.append((df_lunch_count.get(0)\/df_lunch.loc['free\/reduced'].sum())*100)\n    p_lunch_full.append((df_lunch_count.get(1)\/df_lunch.loc['standard'].sum())*100)\n\n\n# plot the graph\nplot_multiple_bar_graph(p_lunch_less,p_lunch_full,subjects_lunch,\"Passed Students - Lunch Befor Exam\",\"Less than Standard Lunch\",\"Standard Lunch\")","9d475f4b":"#create empty lists for subjects and count of pass students - origin wise\nsubjects_parent, p_math, p_read, p_write, p_total = ([] for i in range(5))\n\n#iterate to get values\nfor col in df.columns[-4:]:\n    # apend the subject list\n    subjects_parent.append(col)\n    \n    # get total count of records for each gender\n    df_parent = df.groupby('parent\\'s education')[col].count()\n    \n    # get count of records for passed students\n    df_parent_pass = df[df[col] == 'Pass']\n    df_parent_count = df_parent_pass.groupby('parent\\'s education')[col].count()\n    \n    for group in range(len(df_parent.index)):\n        if col == 'maths result':\n            p_math.append((df_parent_count[group]\/df_parent[group])*100)\n        elif col == 'reading result':\n            p_read.append((df_parent_count[group]\/df_parent[group])*100)\n        elif col == 'writing result':\n            p_write.append((df_parent_count[group]\/df_parent[group])*100)\n        else:\n            p_total.append((df_parent_count[group]\/df_parent[group])*100)\n\n\n# defining plot size\nfig, axs = plt.subplots(2, 2, figsize=(16, 8), constrained_layout=True, sharex=True, sharey=True)\n\n# definging data for plotting\nparent_subject_data = [p_math, p_read, p_write, p_total]\nparent_edu = ['bachelor\\'s', 'some college', 'master\\'s', 'associate\\'s', 'high school', 'some high school']\n\n#plot graph\nfor nn, ax in enumerate(axs.flat):\n    p1 = ax.bar(parent_edu, parent_subject_data[nn], color='c')\n    ax.bar_label(p1, label_type='edge', fmt='%.1f')\n    ax.set_title(subjects_parent[nn], fontsize='x-large', loc='left')\n\n# add labels    \nfig.supxlabel('Parent\\'s Level Of Education')\nfig.supylabel('Students (%)')\nfig.suptitle(\"Passed Students - Based on Parent\\'s Education\", fontsize=16)\n\nplt.show()\n","2d7b737c":"#### 4. For consistency, ensure that all column labels of type string.","7c821484":"We can say that:\n* Reading and Writing has more passing percentage of females, when compared to the Males\n* Maths, on the other hand has more Males passing the subject than the Females\n* On comparing overall result, the Females has the upper hand than their Males counterpart","0ff76d02":"#### 7. Which Gender fared better (Group Bar Chart)","059b0670":"#### 1. Get basic information about the dataframe","c7d79aee":"#### 3. Rename some of the columns - important of better understanding","0e1f3a34":"We may infer from these graphs that:\n* Parent's having some education improves the performance of the child in exams\n    * the percentage of student's passing exams are higher when their parent's have attended college or acquired some degress, than the group of parents who stopped their education after high school\n* The data also shows that percentage of student's passing is the least when the parent's have highest degree (master's degree in this case)\n    * This may be because the parents are busy within themselves in their study\/work after they acquire higher degrees\n    * The parents with highest degree may not be able to spend time with their kids, and  prepare them for the exam","271e5f33":"The current dataset shows that:\n* Lunch before the exam does result in better performance\n    * the difference is significant for maths exam\n    * while for other subjects, the difference though is not significant but still the numbers of passing students having lunch before the exam is higher than the counterparts, who has less or no lunch before the exam","0b0572d8":"#### Create reusable functions for bar chart","0f1a1a80":"### The dataset contains students marks for 3 subjects. I am trying to analyse and answer questions\n* Does student performance at the exam depends on:\n     1. exam preparation\n     2. their food habits before the exam\n     3. education of the parents\n* Visualizing marks for the students for each indicatior of the dataset\n ","90589fea":"Couple of observations can be made from the above charts:\n* Group E has higher passing percentage of students in each subject and the overall result\n* Group A has the least numbers in all categories, when comparing with all the other groups","c378ad55":"The above graph shows result from the overall data set and we can infer that:\n* Reading had highest percentage of students passed, while maths had the lowest. \n* Almost 90% of the students passed in all the 3 subjects.","821b891c":"#### 10. How does hunger (Lunch) affect the exam performance (Group Bar Chart)","f8bafc9d":"#### Let's take a look at the first five items in our dataset.","46bef42d":"#### 11. Impact of parent's education on performance of the students (Sub Plot - Bar Chart)","ce886a77":"From the current dataset, we see that:\n* the percentage of students passing, when they have prepared for the exam is higher than the students who have not prepared for the exam\n* the dataset, however shows that there is no significant difference in the percentage of students passing between these two groups","f641238e":"#### 2. Summary statistics","4756ba93":"#### 9. Does preparing for the exam affect student performance (Group Bar Chart)","effa2104":"#### 6. Lets plot the % of students passed in each subject and in all subjects - overall dataset (Stacked Bar Chart)","24b28984":"#### Let's find out how many entries there are in our dataset.","83f25c2a":"#### Download the dataset and read it into a pandas dataframe.","6454d959":"#### 8. Performance of student - By race\/ethnicity (Sub Plot - Bar Chart)","66963abb":"#### 5. Checking how many students have passed or failed (in each subject and total marks)"}}