{"cell_type":{"9bf407a3":"code","e61f2e08":"code","41e96b4f":"code","487548d8":"code","e95b2043":"code","5d097fe9":"code","8041196a":"code","fc14f2c5":"code","20bad3dd":"code","b651fd4b":"code","84f6782e":"code","097a4367":"code","cc30105e":"code","06b083c2":"code","39045563":"code","de5c964f":"code","f2b385f2":"markdown"},"source":{"9bf407a3":"import numpy as np\nimport pandas as pd \nimport os, gc\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\n\n# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True, figsize=(11, 5))\nplt.rc(\"axes\",\n       labelweight=\"bold\",\n       labelsize=\"large\",\n       titleweight=\"bold\",\n       titlesize=14,\n       titlepad=10,)\nplot_params = dict(color=\"0.75\",\n                   style=\".-\",\n                   markeredgecolor=\"0.25\",\n                   markerfacecolor=\"0.25\",\n                   legend=False,)","e61f2e08":"BASE_PATH = Path('\/kaggle\/input\/tabular-playground-series-jul-2021')\n\ntrain_df = pd.read_csv(BASE_PATH \/ 'train.csv')\ntest_df  = pd.read_csv(BASE_PATH \/ 'test.csv')\n\ntargets = ['target_carbon_monoxide', 'target_benzene',  'target_nitrogen_oxides']\nsensors = ['sensor_1','sensor_2','sensor_3','sensor_4','sensor_5']\nother_cols = ['deg_C', 'relative_humidity', 'absolute_humidity',]","41e96b4f":"train_df['date_time'] = pd.to_datetime(train_df['date_time'])\ntest_df['date_time'] = pd.to_datetime(test_df['date_time'])\ntrain_range = pd.date_range(start='2010-03-10 18', end='2011-01-01 00', freq='H')\ntest_range = pd.date_range(start='2011-01-01 00', end='2011-04-04 14', freq='H')\n\n# \nprint(len(train_df), len(train_range))\nprint(len(test_df), len(test_range))\ndel train_range, test_range\n\n# submission_df['date_time'] = pd.to_datetime(submission_df['date_time'])\ntrain_df['month'] = train_df['date_time'].dt.month\ntest_df['month'] = test_df['date_time'].dt.month\ntrain_df['hour'] = train_df['date_time'].dt.hour\ntest_df['hour'] = test_df['date_time'].dt.hour","487548d8":"for col in targets:\n    train_df[f'{col}_cumsum'] = train_df[col].cumsum()\n\nfor col in targets:\n    sns.lineplot(data=train_df, x='date_time', y=f'{col}_cumsum')\n    plt.show()","e95b2043":"for col in targets:\n    train_df[f'{col}_cumsum'] = train_df[col].cumsum()\n\nfor col in targets:\n    sns.lineplot(data=train_df, x='date_time', y=f'{col}_cumsum')\n    plt.show()","5d097fe9":"targets_cumsum = [f'{s}_cumsum' for s in targets]\nall_df = pd.concat([train_df.drop(columns=targets), test_df[1:]])\nfor col in sensors+other_cols:\n    all_df[f'{col}_1D_mean'] = all_df[col].rolling(24).mean()\n    all_df[f'{col}_7D_mean'] = all_df[col].rolling(24*7).mean()\n    all_df[f'{col}_cumsum'] = all_df[col].cumsum()\ntmp_df = all_df[:len(train_df)]\ntrain_df = pd.concat([tmp_df,train_df[targets]],axis=1)\ntest_df = all_df[len(train_df)-1:].reset_index(drop=True)\ntrain_df.head(3)","8041196a":"# from sklearn.model_selection import train_test_split,TimeSeriesSplit\nfrom sklearn.linear_model import LinearRegression\n# tr_df = train_df.loc[train_df.date_time<'2010-10-01']\n# val_df = train_df.loc[train_df.date_time>='2010-10-01']\n\ntraining_features = [s for s in train_df.columns.tolist() if ('sensor' in s) and 'cumsum' in s]+['deg_C_cumsum', 'relative_humidity_cumsum', 'absolute_humidity_cumsum']\n# X_train = tr_df[training_features]\n# y_train = tr_df[targets_cumsum].values\n# X_val   = val_df[training_features]\n# y_val   = val_df[targets_cumsum].values\nX_train = train_df[training_features]\ny_train = train_df[targets_cumsum].values\nX_test =  test_df[training_features]","fc14f2c5":"model = LinearRegression()\nmodel.fit(X_train,y_train)\nsub_preds = model.predict(X_test)","20bad3dd":"for i,target in enumerate(targets_cumsum):\n    test_df[target] = sub_preds[:,i]\nfor i, col in enumerate(targets_cumsum):\n    sns.lineplot(data=train_df, x='date_time', y=col)\n    sns.lineplot(data=test_df, x='date_time', y=col)\n    plt.legend(['train','test'])\n    plt.show()","b651fd4b":"# https:\/\/codereview.stackexchange.com\/questions\/117183\/extracting-original-values-from-cumulative-sum-values\ndef inverse_cumsum(x_cumsum):\n    x_cumsum_shifted = np.insert(np.delete(x_cumsum, -1), 0, 0)\n    return x_cumsum - x_cumsum_shifted\n    \nfor i, col in enumerate(targets_cumsum):\n    x_cumsum = train_df[targets_cumsum[i]].values\n    print(col, inverse_cumsum(x_cumsum))","84f6782e":"x_cumsums = pd.concat([train_df.loc[:len(train_df)-2, targets_cumsum],test_df[targets_cumsum]]).values\n\nfor i, (col, col_cumsum) in enumerate(zip(targets,targets_cumsum)):\n    pred = inverse_cumsum(x_cumsums[:,i])\n    test_df[col] = pred[len(train_df)-1:]\nfor col in targets:\n    test_df.loc[0, col] = train_df[col].tail(1).values\n    test_df[col] = np.clip(test_df[col].values,0,None)","097a4367":"train_df[targets].head(3)","cc30105e":"test_df[targets].head(3)","06b083c2":"submission_df = pd.read_csv(BASE_PATH \/ 'sample_submission.csv')\nfor col in targets:\n    submission_df[col] = test_df[col].astype(np.float32)","39045563":"submission_df.to_csv('submission.csv', index=False)\npd.read_csv('submission.csv').head(3)","de5c964f":"all_df = pd.concat([train_df.loc[:len(train_df)-2, ['date_time']+targets], test_df[['date_time']+targets]], axis=0)\nfor col in targets:\n    sns.lineplot(data=all_df, x='date_time', y=col)\n    plt.show()","f2b385f2":"# TabularPlaygroundSeriesJul2021"}}