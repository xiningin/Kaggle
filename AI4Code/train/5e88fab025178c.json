{"cell_type":{"383316c6":"code","d3f6739f":"code","49ee7994":"code","0066f427":"code","344572f6":"code","817d0ffa":"code","974a481b":"code","5c54020e":"code","da3063cc":"code","b4b7da94":"code","0d93f60d":"code","5149cb54":"code","1410bb28":"code","e147cc53":"code","929795fe":"code","5791e75d":"code","1397d526":"code","26c982e9":"code","08277d1b":"code","02905f4e":"code","5ec78aca":"code","c9f892f5":"code","3a587eaf":"code","b187aabc":"code","7f92f6ef":"code","e03f48a2":"code","83d8b67c":"code","48739d64":"code","519e0fe5":"markdown"},"source":{"383316c6":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.metrics import classification_report, accuracy_score\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected = True)","d3f6739f":"data = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","49ee7994":"data.columns","0066f427":"data.head()","344572f6":"data.describe()","817d0ffa":"data.shape","974a481b":"data.isnull().values.any()","5c54020e":"LABELS =['Normal','Fraud']\ncount_classes = pd.value_counts(data['Class'], sort = True)\ncount_classes.plot(kind ='bar',rot =0)\nplt.title('Transaction Class Distribution')\nplt.xticks(range(2),LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")","da3063cc":"Fraud = data[data['Class']==1]\nNormal = data[data['Class']==0]","b4b7da94":"Fraud.shape, Normal.shape","0d93f60d":"Fraud.Amount.describe()","5149cb54":"Normal.Amount.describe()","1410bb28":"f,(ax1,ax2) = plt.subplots(2,1, sharex = True)\nf.suptitle('Amount per transaction by class')\nbins = 50\nax1.hist(Fraud.Amount, bins = bins)\nax1.set_title(\"Fraud Amount distribution\")\nax2.hist(Normal.Amount, bins = bins)\nax2.set_title(\"Normal Amount distribution\")\nplt.xlabel(\"Amount($)\")\nplt.ylabel(\"Number of transactions\")\nplt.xlim(0,20000)\nplt.yscale('log')\nplt.show()","e147cc53":"f,(ax1,ax2) = plt.subplots(2,1, sharex = True)\nf.suptitle(\"Distribution of Amount vs time\")\nax1.scatter(Fraud.Time, Fraud.Amount)\nax1.set_title(\"Fraud - Time vs Amount\")\nax2.scatter(Normal.Time, Normal.Amount)\nax2.set_title(\"Normal - Time vs Amount\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Amount\")\nplt.show()","929795fe":"trace = go.Scatter(\n            x = Fraud.Time,\n            y = Fraud.Amount,\n            mode = 'markers')\ndata =[trace]","5791e75d":"iplot({'data':data})","1397d526":"data = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndata1 = data.sample(frac = 0.1, random_state=1)\ndata1.shape","26c982e9":"data1.hist(figsize =(20,20))\nplt.show()","08277d1b":"Fraud = data1[data1['Class']==1]\nValid = data1[data1['Class']==0]\noutlier_fraction = len(Fraud)\/float(len(Valid))","02905f4e":"outlier_fraction","5ec78aca":"len(Fraud), len(Valid)","c9f892f5":"import seaborn as sns\ncorrelation_matrix = data1.corr()\nfig = plt.figure(figsize =(15,8))\nsns.heatmap(correlation_matrix, vmax =0.8, square = True)\nplt.show()","3a587eaf":"X = data1.drop(['Class'],axis =1)\nY= data1.Class","b187aabc":"import scipy\nstate = np.random.RandomState(42)\nX_outliers = state.uniform(low=0 , high=1, size =(X.shape[0], X.shape[1]))\n","7f92f6ef":"X.shape, Y.shape","e03f48a2":"#Model prediction\n","83d8b67c":"classifiers = {\n    'Isolation Forest': IsolationForest(n_estimators = 100, max_samples = len(X),contamination = outlier_fraction,random_state = state, verbose =0), #Contamination - The amount of contamination of the data set, i.e. the proportion of outliers in the data set\n    'Local Outlier Factor' : LocalOutlierFactor(n_neighbors = 20, algorithm ='auto',leaf_size =30, metric = 'minkowski',p=2, metric_params = None, contamination=outlier_fraction),\n    'Support Vector Machine' : OneClassSVM(kernel ='rbf',degree=3, gamma =0.1, nu =0.05, max_iter =-1,random_state = state)\n}","48739d64":"n_outliers = len(Fraud)\nfor i, (clf_name,clf) in enumerate(classifiers.items()):\n    #Fit the data and tag outliers\n    if clf_name == \"Local Outlier Factor\":\n        y_pred = clf.fit_predict(X)\n        scores_prediction = clf.negative_outlier_factor_\n    elif clf_name == \"Support Vector Machine\":\n        clf.fit(X)\n        y_pred = clf.predict(X)\n    else:    \n        clf.fit(X)\n        scores_prediction = clf.decision_function(X)\n        y_pred = clf.predict(X)\n    #Reshape the prediction values to 0 for Valid transactions , 1 for Fraud transactions\n    y_pred[y_pred == 1] = 0\n    y_pred[y_pred == -1] = 1\n    n_errors = (y_pred != Y).sum()\n    # Run Classification Metrics\n    print(\"{}: {}\".format(clf_name,n_errors))\n    print(\"Accuracy Score :\")\n    print(accuracy_score(Y,y_pred))\n    print(\"Classification Report :\")\n    print(classification_report(Y,y_pred))","519e0fe5":"Reference : https:\/\/www.kaggle.com\/pavansanagapati\/anomaly-detection-credit-card-fraud-analysis"}}