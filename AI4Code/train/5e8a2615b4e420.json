{"cell_type":{"75e336b5":"code","c16f7a5e":"code","ccfb4e0a":"code","5c2203eb":"code","8cc1c2b7":"code","8dfa9365":"code","f198979a":"code","701fd7e2":"code","b8d84800":"code","0731d9f8":"code","49d22a1b":"code","eff0d968":"code","8ca7cc66":"code","cc94d7df":"code","f4b02854":"code","950f5c5c":"code","05d6e237":"code","ec4a4629":"code","51da5cce":"code","7c36a278":"code","47ed3bf1":"code","059c1767":"code","49449537":"code","9b48e5c7":"code","bdaf7473":"code","28217021":"code","13ebba24":"markdown","ed7096eb":"markdown","8b8d9e14":"markdown","5651da8d":"markdown","2974dd84":"markdown"},"source":{"75e336b5":"%matplotlib inline","c16f7a5e":"%matplotlib notebook","ccfb4e0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport cv2\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, decode_predictions, preprocess_input\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import BatchNormalization, Conv2D, Conv2DTranspose, Dense, Dropout, Flatten, MaxPooling2D, Reshape\nfrom keras.preprocessing.image import load_img\nimport tensorflow as tf\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\"It is showing nothing in my ..\/input files   I am very conufesd\"","5c2203eb":"pwd","8cc1c2b7":"preprocess_input\n#What does this do?","8dfa9365":"modelv2 = InceptionResNetV2( input_shape = (224, 224, 3), weights = None)\n#so the pictures are 224x224 pixels?\n","f198979a":"#path_to_weights = \"\/..your..path..\/efficientnet-b5_noisy-student_notop.h5\"\n#model = EfficientNetB5(include_top=False)\n#model.load_weights(path_to_weights, by_name=True)","701fd7e2":"#os.listdir()\n#os.getcwd()\nprint(os.listdir(\"..\/input\"))\n","b8d84800":"#np.load('\/MMDB_ID_74246_PDB_ID_1RON_Human_Neuropeptide_Y_01.png')\n#np.load('\/cnn-bio\/molecular_thing.png')\nimages_train = load_img('..\/input\/cnn-bio\/MMDB_ID_74246_PDB_ID_1RON_Human_Neuropeptide_Y_01.png')\nimages_test = load_img('..\/input\/cnn-bio\/molecular_thing.png')\n","0731d9f8":"#images_train = np.load('..\/input\/cnn-bio\/MMDB_ID_74246_PDB_ID_1RON_Human_Neuropeptide_Y_01.png')\n#images_test = np.load('..\/input\/cnn-bio\/molecular_thing.png')\n#Working theory - you only need to np.load() once then you can keras.preprocessing.image.load_img - maybe\n#I do not know what these are","49d22a1b":"#images_train.save()\n#images_test.save()\n#I need to understand this in relation to pickling\n#I am not at all sure that I understand this: It seems my images do not need to be reloaded or saved at all","eff0d968":"plt.imshow(images_train)\n#Where in the original document that has images_lab... ... ...","8ca7cc66":"#plt.imshow(images_test)\n","cc94d7df":"#input","f4b02854":"#activation layer","950f5c5c":"width = 30 \nheight = 30\nsize = [30, 30]","05d6e237":"model = Sequential()","ec4a4629":"#model.add(Conv2D(32, input_dim=(3, 3), activation='relu', input_shape=(width, height, size)))\n#I need to find the relevant difference between these two lines of code\nmodel.add(Conv2D(6,3,3,input_shape=(256,768,1),activation='relu'))","51da5cce":"#model.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(6,3,3,input_shape=(256,768,1),activation='relu'))","7c36a278":"model.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))","47ed3bf1":"model.add(Conv2D(68, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(4, 4)))\nmodel.add(Dropout(0.25))\n#This failed but the previous block did not","059c1767":"#There is a strong size mismatch\n\"\"\"model.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(4, 4)))\nmodel.add(Dropout(0.25))\"\"\"","49449537":"#Retry but make it match *these* dimensions:\n#Conv2D,Maxpooling2D, Conv2D, Maxpooling2D, Flatten, Fully Connected layer\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n#It seems reasonable that I should add a Fully Connected Layer\n","9b48e5c7":"#tf.reshape(model, shape=[-1,height,width, 3]) #For a RGB image\n#tinker","bdaf7473":"model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","28217021":"#model.add(Conv2D(strides=1, kernel_size=3, filters=12))","13ebba24":"## Input Image\n","ed7096eb":"**Notes**","8b8d9e14":"I am getting pretty good at math and code.  I *feels* like it still takes me a long time to complete projects.  I am not entirely sure how to set the parameters of a neural net; thought, it seems logical to match the number of nodes in a layer or two to the number of pixels or a multiple of the number of pixels","5651da8d":"## Output Image","2974dd84":"## Expected Output"}}