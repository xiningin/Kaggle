{"cell_type":{"8c012022":"code","8d85a8a8":"code","6cb3dcf6":"code","afb6f579":"code","4e5f2a87":"code","8877f6d5":"code","e0d1a9dc":"code","a9d5e770":"code","1f9b8175":"code","27e00221":"code","77c63c2c":"code","98eab844":"code","119a6b60":"code","be61b65e":"code","c0f82451":"code","2a456b14":"code","75363b41":"code","390c47a3":"code","eee19c3d":"code","622df9ed":"code","3775b9c0":"code","3021f257":"code","6d288a1f":"code","a80f80e3":"code","0f49cfd6":"code","0da859c9":"code","bedd738c":"code","6d9e13bb":"code","d3389e4e":"code","093e830e":"code","77c6d717":"code","3eb26fe8":"code","bb9e9122":"markdown","fc5e98a7":"markdown","7bb1fa81":"markdown","4afc5670":"markdown","a97ee655":"markdown","cc63d6ff":"markdown","7bc2d255":"markdown","8a385507":"markdown","1c9b6ab7":"markdown","cf5ef616":"markdown"},"source":{"8c012022":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'): \n    for filename in filenames: print(os.path.join(dirname, filename))","8d85a8a8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import GridSearchCV , train_test_split\nfrom sklearn.preprocessing import LabelEncoder , StandardScaler\nfrom sklearn.metrics import roc_auc_score , r2_score","6cb3dcf6":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","afb6f579":"data.head()","4e5f2a87":"data.info()","8877f6d5":"data.isnull().sum()","e0d1a9dc":"num_cols = ['id',\n            'host_id',\n            'latitude',\n            'longitude',\n            'price',\n            'minimum_nights',\n            'number_of_reviews',\n            'reviews_per_month',\n            'calculated_host_listings_count',\n            'availability_365']\ncat_cols = ['last_review',\n            'room_type',\n            'neighbourhood',\n            'neighbourhood_group',\n            'host_name',\n            'name']","a9d5e770":"corr = data[num_cols].corr()\nax , fig  = plt.subplots(figsize =(15,15))\nsns.heatmap(corr ,vmin = -1 , cmap='coolwarm', annot = True)\nplt.show()","1f9b8175":"plt.figure(figsize=(10, 100), dpi=100)\nn = len(num_cols)\nfor i, col in enumerate(num_cols):\n    plt.subplot(2*n, 2, 2*i+1)\n    plt.hist(data[col], bins=10)\n    plt.title(col)\n    plt.subplot(2*n, 2, 2*i+2)\n    plt.boxplot(data[col].values)","27e00221":"sns.countplot(x=\"room_type\", data=data);","77c63c2c":"plt.figure(figsize=(14, 6));\nsns.barplot(data['neighbourhood_group'], data['price'], hue=data['room_type']);","98eab844":"data.fillna({'reviews_per_month':0}, inplace=True)\ndata.fillna({'name':\"NoName\"}, inplace=True)\ndata.fillna({'host_name':\"NoName\"}, inplace=True)\ndata.fillna({'last_review':\"NotReviewed\"}, inplace=True)","119a6b60":"data.isnull().sum()","be61b65e":"data.head()","c0f82451":"cat_data = [ 'neighbourhood_group' , \n             'room_type' ,\n            'neighbourhood',\n                ]","2a456b14":"le = LabelEncoder()\nfor col in cat_data:\n    data[col] = le.fit_transform(data[col])\n    data[col] = data[col].astype('int')","75363b41":"data.head()","390c47a3":"feature_data  = ['price' ,\n                 'neighbourhood_group'  ,\n                  'neighbourhood' ,\n                  'room_type' ,\n                 'minimum_nights' ,\n                 'calculated_host_listings_count',\n                 'availability_365']","eee19c3d":"data[feature_data].head()","622df9ed":"next_data = data[feature_data]","3775b9c0":"y = next_data['price']\nX = next_data.drop(['price'],axis=1)\nX_train, X_test, y_train , y_test=train_test_split(X, y, test_size=0.2)","3021f257":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","6d288a1f":"print('R-squared train score: {:.3f}'.format(model.score(X_train, y_train)))\nprint('R-squared test score: {:.3f}'.format(model.score(X_test, y_test)))\n","a80f80e3":"from sklearn.tree import DecisionTreeRegressor\ntree=DecisionTreeRegressor(min_samples_leaf = 0.0001)\ntree.fit(X_train,y_train)\ny_pred_tree = tree.predict(X_test)\nprint('R-squared score (training): {:.3f}'.format(tree.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(tree.score(X_test, y_test)))","0f49cfd6":"params = {'max_depth' : [4, 5, 6 , 7 , 8 , 9  ,10 , 11],\n          'min_samples_leaf' :[0.0001 , 0.001 , 0.01 , 0.1 , 1]\n          }","0da859c9":"grid = GridSearchCV(tree,params , n_jobs= -1 , cv = 5)\ngrid.fit(X_train,y_train)\ngrid_pred = tree.predict(X_test)","bedd738c":"print('R-squared score (training): {:.3f}'.format(grid.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(grid.score(X_test, y_test)))","6d9e13bb":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(max_depth = 9)\nregressor.fit(X_train,y_train)\nreg_pred = regressor.predict(X_test)","d3389e4e":"print('R-squared score (training): {:.3f}'.format(regressor.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(regressor.score(X_test, y_test)))","093e830e":"params_tree = {'max_depth' : [4, 5, 6 , 7 , 8 , 9  ,10 , 11],\n          'min_samples_leaf' :[0.0001 , 0.001 , 0.01 , 0.1 , 1]\n          }","77c6d717":"regressor_grid = GridSearchCV(regressor , params_tree , cv = 5 , n_jobs= -1)\nregressor_grid.fit(X_train,y_train)\nregressor_grid.predict(X_test)","3eb26fe8":"print('R-squared score (training): {:.3f}'.format(regressor_grid.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(regressor_grid.score(X_test, y_test)))","bb9e9122":"## Displaying data for categorical features","fc5e98a7":"## Displaying data for numeric attributes","7bb1fa81":"## Uploading data","4afc5670":"## Replacing Nan values with 0","a97ee655":"## LogisticRegression and GridSearchCV","cc63d6ff":"## RandomForestRegressor and GridSearchCV\n","7bc2d255":"## Selecting features for a dataset","8a385507":"## Processing of categorical features","1c9b6ab7":"## DecisionTree and GridSearchCV\n","cf5ef616":"## Distribution accrued and categorical features"}}