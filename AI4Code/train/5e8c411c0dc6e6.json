{"cell_type":{"a1194bee":"code","20e58e19":"code","db496cce":"code","7500c105":"code","70c6d8a2":"code","d6bbc6db":"code","f2066450":"code","3b8ea97d":"code","df751f65":"code","cb98fe30":"code","1167b402":"code","06bb07ac":"code","4e0787dc":"code","10b14303":"code","13d477f1":"code","97ae91d3":"code","dde1c96f":"code","44483716":"code","2b15c5d0":"code","ffa17dde":"markdown","59b09820":"markdown","92fa9bcf":"markdown","42dc4137":"markdown","348a8912":"markdown","b2243712":"markdown","6ff6762e":"markdown","ac8cd2cd":"markdown"},"source":{"a1194bee":"import numpy as np\nimport pandas as pd\nimport math\n\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","20e58e19":"path = '..\/input\/wine-quality\/winequalityN.csv'\ndf = pd.read_csv(path)\ndf.head()","db496cce":"labels = np.unique(df['type'].values)\nidx_to_labels = { k:v for k,v in enumerate(labels) }\nlabels_to_idx = { v:k for k,v in enumerate(labels) }","7500c105":"labels = df.replace(labels_to_idx)['type'].values\ndf = df.drop(columns=['type'])\n\n# one hot encoding\nlabels = np.eye(len(idx_to_labels))[labels]","70c6d8a2":"# normalized data\ndf = (df-df.mean())\/df.std()\n\n# replace NaN with Standard Deviation\ndf = df.fillna(df.std())\n\ndf.head()","d6bbc6db":"features = df.values","f2066450":"X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.33, random_state=42)","3b8ea97d":"gamma = {}\ngamma[\"ndims\"] = features.shape[1]\ngamma[\"nclasses\"] = len(idx_to_labels.values())","df751f65":"np.random.seed(1337)\ndef generate_weights(gamma):\n    '''\n        Generate Weights and use Xavier Initiation\n    '''\n    scale = 1\/max(1., (2+2)\/2.)\n    limit = math.sqrt(3.0 * scale)\n\n    gamma['w0'] = np.random.uniform(-limit, limit, size=(gamma['ndims'], gamma['ndims']))\n    gamma['w1'] = np.random.uniform(-limit, limit, size=(gamma['ndims'], gamma['nclasses']))\n    \n    return gamma","cb98fe30":"gamma = generate_weights(gamma)\nprint('w0 shape:', gamma['w0'].shape, ' - w1 shape:', gamma['w1'].shape)","1167b402":"def sigmoid(x):\n    return 1. \/ (1. + np.exp(-x))\n\ndef dsigmoid(x):\n    return x * (1. - x)","06bb07ac":"def loss(y, y_hat):\n    '''\n        Addition of all Squared Mean Errors\n    '''\n    return np.sum(np.mean(np.square(np.subtract(y, y_hat)), axis=0))","4e0787dc":"def forward(X, gamma):\n    '''\n        Forward Propagation\n    '''\n    l0 = X\n    l1 = sigmoid(np.dot(l0, gamma['w0']))\n    l2 = sigmoid(np.dot(l1, gamma['w1']))\n    \n    return l0, l1, l2","10b14303":"def backward(y, theta, gamma, lr):\n    '''\n        Backward Propagation\n    '''\n    l0, l1, l2 = theta\n    \n    l2_error = y - l2\n    l2_delta = l2_error * dsigmoid(l2)\n    l1_error = l2_delta.dot(gamma['w1'].T)\n    l1_delta = l1_error * dsigmoid(l1)\n    \n    # update using SGD\n    gamma['w0'] += lr * l0.T.dot(l1_delta)\n    gamma['w1'] += lr * l1.T.dot(l2_delta)\n    \n    return gamma","13d477f1":"def train(X, y, gamma, iterations=60, lr=0.01):\n    '''\n        Function to Train Dataset\n    '''\n    errors = []\n    for i in range(iterations):\n        # forward propagation\n        theta = forward(X, gamma)\n        \n        e = loss(theta[-1], y)\n        if(i % 4 == 0):\n            print('I:{0:4d}, --  Mean Error:{1:1.4f}'.format(i, np.mean(e)))\n        errors.append(e)\n\n        # backward propagation\n        gamma = backward(y, theta, gamma, lr)\n            \n    return gamma, errors","97ae91d3":"gamma, errors = train(X_train, y_train, gamma)","dde1c96f":"plt.plot(errors)","44483716":"def accuracy(y, gamma):\n    '''\n    Function to calculate accuracy\n    '''\n    acc_y = []\n    for x in X_test:\n        y = np.argmax(forward(x.reshape(1, 12), gamma)[-1])\n        y = np.eye(gamma[\"nclasses\"])[y]\n        acc_y.append(y)\n\n    acc_y = np.array(acc_y)\n    wrong = len(np.where(np.equal(y_test, acc_y).astype(int) == 0)[0])\n    return 1 - (len(y) \/ wrong)","2b15c5d0":" print('Accuracy:{0:3d}%'.format(int(accuracy(y_train, gamma) * 100)))","ffa17dde":"# Accuracy","59b09820":"# Training","92fa9bcf":"# Prepare Data","42dc4137":"# Activation Function and Derivative","348a8912":"# Plot Error Lost","b2243712":"# Generate Weights","6ff6762e":"# Wine Quality using Artificial Neural Network (ANN)","ac8cd2cd":"# Parameters"}}