{"cell_type":{"a7b01046":"code","2afee0e2":"code","3cd6772a":"code","b749d3ad":"code","547f65b7":"code","919ee816":"code","98fea843":"code","be2e5314":"code","e7fe46fb":"code","40292476":"code","6e042153":"code","42b15350":"code","6fcc268b":"code","daf2add3":"code","2f286460":"code","03ce184a":"code","46960717":"code","71c8462e":"code","4599d924":"code","7adff9f6":"code","b3a326f1":"code","1f7a8609":"code","0a1a02db":"code","ce7957d2":"code","322712a3":"code","d626d7d1":"code","df49eb8b":"code","c6ea902d":"code","cca07a1d":"code","0013a1a4":"markdown"},"source":{"a7b01046":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2afee0e2":"# Load data set:\ntrain = pd.read_csv(\"..\/input\/train.csv\")\n\ntest = pd.read_csv(\"..\/input\/test.csv\")","3cd6772a":"X,y = train.drop(\"label\",axis=1),train[\"label\"]","b749d3ad":"sns.countplot(y)","547f65b7":"print(X.shape,y.shape)","919ee816":"\nexample_digit = X.iloc[np.random.randint(0,42000)]\nexample_digit_image  = example_digit.values.reshape(28,28)\nplt.imshow(example_digit_image,cmap=matplotlib.cm.binary,interpolation=\"nearest\")\nplt.axis(\"off\")\n\n","98fea843":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train,y_test = train_test_split(X[0:]\/255.0,y[0:],test_size = 0.30,random_state =42)\n","be2e5314":"from sklearn.neighbors import KNeighborsClassifier\nknc = KNeighborsClassifier(n_neighbors = 4,weights=\"distance\")\n","e7fe46fb":"knc.fit(X_train,y_train)\n","40292476":"predictions = knc.predict(X_test[0:])","6e042153":"from sklearn.metrics import confusion_matrix","42b15350":"con_mat = confusion_matrix(y_test,predictions)","6fcc268b":"sns.heatmap(con_mat)","daf2add3":"row_sums = con_mat.sum(axis=1, keepdims=True)","2f286460":"sns.heatmap(con_mat\/row_sums)","03ce184a":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test,predictions))","46960717":"X.iloc[2]= X.iloc[2] \nexample_digit = X.iloc[2]\nexample_digit_image  = example_digit.values.reshape(28,28)\nplt.imshow(example_digit_image,cmap=matplotlib.cm.binary,interpolation=\"nearest\")\nplt.axis(\"on\")","71c8462e":"example2 = np.roll(example_digit_image,2,axis=1)\nplt.imshow(example2,cmap=matplotlib.cm.binary,interpolation=\"nearest\")\nplt.axis(\"on\")","4599d924":"print(\"X: Number of images before:\"+ str(len(X)))\nprint(\"Y: Number of images before:\"+ str(len(X)))\nappend_count = 1000\nfor i in range(0,append_count):\n    byby = X.iloc[i].values.reshape(28,28)\n    redf= np.roll(byby,np.random.randint(-3,3),axis=1) # Move random int to right\n    redf=np.roll(byby,np.random.randint(-3,3),axis =0) # Move random int to top\n    redf = redf.reshape(784,1)  \n    X = X.append(pd.DataFrame(redf.transpose(),columns=X.columns,index=[len(X)+1]))\n    y[len(y)+1] = y[i]\nprint(\"X: Number of images after:\"+ str(len(X)))\nprint(\"Y: Number of images after:\"+ str(len(X)))\n","7adff9f6":"example_digit = X.iloc[np.random.randint(0,43000)]\nexample_digit_image  = example_digit.values.reshape(28,28)\nplt.imshow(example_digit_image,cmap=matplotlib.cm.binary,interpolation=\"nearest\")\nplt.axis(\"on\")","b3a326f1":"X_train, X_test, y_train,y_test = train_test_split(X[0:],y[0:],test_size = 0.30,random_state =42)\nkncc = KNeighborsClassifier(n_neighbors = 5,weights=\"distance\")\nkncc.fit(X_train,y_train)\npredictions = kncc.predict(X_test[0:])","1f7a8609":"print(accuracy_score(y_test,predictions))","0a1a02db":"con_mat = confusion_matrix(y_test,predictions)\nrow_sums = con_mat.sum(axis=1, keepdims=True)\nsns.heatmap(con_mat\/row_sums)","ce7957d2":"con_mat","322712a3":"len(predictions)","d626d7d1":"y_test[12000]","df49eb8b":"import matplotlib.pyplot as plt\nmiss_arr = []\nplt.figure(figsize=(25,40))\nx=0\nfor i,y in enumerate(y_test[0:8000]):\n    \n    tests = y-predictions[i]\n    if tests != 0 and x < 17*17:\n        x +=1\n        plt.subplot(17,17,x)\n        plt.axis(\"off\")\n        grid_data = X_test.iloc[i].values.reshape(28,28)  # reshape from 1d to 2d pixel array\n        plt.imshow(grid_data, interpolation = \"none\", cmap = \"bone_r\")\n        plt.title(\"Predicted as \"+str(predictions[i]))\n        plt.xticks([])\n        plt.yticks([]) \n        ","c6ea902d":"#predict for submission\n\npredictions = kncc.predict(test)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"DR.csv\", index=False, header=True)","cca07a1d":"test","0013a1a4":"**2. Shifting of Pixels**"}}