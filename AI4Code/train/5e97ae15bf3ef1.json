{"cell_type":{"083478fc":"code","66b4e057":"code","0abe89cb":"code","91ac889b":"code","9150cb74":"code","5db96cf4":"code","400fb6f4":"code","70d36a5b":"code","5c93f4da":"code","acaa029b":"code","85ca080a":"code","34bbaac5":"code","5ff02650":"code","39523bd1":"code","c884d86b":"code","256cf719":"code","a7c41784":"code","6bedf75a":"code","9a960393":"code","f66671d8":"code","c5efb1e4":"code","d87a5d14":"code","5bbef0d9":"code","0c0af2e5":"code","00b3bf95":"code","db3a39ec":"code","a3bae72c":"code","8f8de9ca":"code","ef15cffc":"code","f9f10026":"code","d7b79ad6":"code","6374d74f":"code","9a2d728f":"code","22ff9b44":"code","a452e38f":"code","0c4af765":"code","abcfd426":"code","da55bc78":"code","39a02f7c":"code","c02b8cba":"code","57b821ab":"code","b76742cf":"code","be1b3973":"markdown","2c0d4c84":"markdown","a820e5b8":"markdown","2e753533":"markdown","442d48e8":"markdown","ddd43cb9":"markdown","a7f682e4":"markdown","69f3a0cf":"markdown","84df6157":"markdown","1003bd19":"markdown","7ce6b742":"markdown","f6d418f0":"markdown","46ddfefe":"markdown","fd1d3f46":"markdown","4de690e1":"markdown","fdc824b4":"markdown","382490cd":"markdown","71d1e0a3":"markdown","83b4b043":"markdown","67fb2272":"markdown","41bcfe4c":"markdown","3120b752":"markdown","b2d33b84":"markdown","28624bb5":"markdown","4342a42e":"markdown","fda79de5":"markdown","6f679a0b":"markdown","dd6cd265":"markdown","a4b6404a":"markdown","fc4938c4":"markdown","d3646290":"markdown","2832dd36":"markdown","2ef129c3":"markdown","d7d4f010":"markdown","899a620d":"markdown","7ece9065":"markdown","2ee96194":"markdown","339861e4":"markdown"},"source":{"083478fc":"!wget -nc https:\/\/github.com\/weiyunchen\/code1\/raw\/master\/data.xlsx\n!pip install plotly_express","66b4e057":"### \u5bfc\u5165\u6a21\u5757\nimport datetime\nfrom datetime import datetime\nfrom math import sqrt\nimport numpy as np\nimport pandas as pd\nfrom numpy import concatenate\nimport folium\nimport lightgbm as lgb\nfrom folium.plugins import HeatMap\nfrom keras.models import Sequential\nfrom keras import backend as K\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom keras.layers.core import Dense, Dropout, Activation\nfrom keras.optimizers import Adam\nfrom keras.layers.embeddings import Embedding\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\nfrom scipy import stats\nfrom scipy.stats import norm, skew \nimport plotly_express as px\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})\n\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\n#\u663e\u793a\u6240\u6709\u5217\npd.set_option('display.max_columns', None)\n#\u663e\u793a\u6240\u6709\u884c\npd.set_option('display.max_rows', None)\n#\u8bbe\u7f6evalue\u7684\u663e\u793a\u957f\u5ea6\u4e3a50\npd.set_option('max_colwidth',50)","0abe89cb":"# \u8f7d\u5165\u6570\u636e\ndf = pd.read_excel('data.xlsx',encoding='gbk',sheetname=4)\ndf0 = pd.read_excel('data.xlsx',encoding='gbk',sheetname=0)\ndf1 = pd.read_excel('data.xlsx',encoding='gbk',sheetname=1)\ndf2 = pd.read_excel('data.xlsx',encoding='gbk',sheetname=2)\ndf3 = pd.read_excel('data.xlsx',encoding='gbk',sheetname=3)\n# \u6570\u636e\u5408\u5e76\ndff = pd.concat([df0,df1,df2,df3])\n# \u6570\u636e\u9884\u5904\u7406\ndff[\"tube_name\"] = dff[\"city\"] + dff[\"tube_name\"]\ndff.drop(labels=['city'],axis=1,inplace=True)\n# \u6570\u636e\u5408\u5e76\ndata = pd.merge(df,dff,on=\"tube_name\")\n                \ndata.rename(columns={'\u79df\u91d1\u4e2d\u4f4d\u6570\uff08\u5143\/\u6708\uff09':'area_price_level', '\u5c45\u4f4f\u4fbf\u5229\u5ea6':'convenience', 'tube_distance\uff08m\uff09':'tube_distance'},inplace = True)","91ac889b":"data['city_cn']=data['city']\ndata.city[data.city=='\u4e0a\u6d77'] = 'shanghai'\ndata.city[data.city=='\u5e7f\u5dde'] = 'guangzhou'\ndata.city[data.city=='\u5317\u4eac'] = 'beijing'\ndata.city[data.city=='\u6df1\u5733'] = 'shenzhen'","9150cb74":"# \u5bf9\u7c7b\u522b\u7279\u5f81\u7f16\u7801\nlb=LabelEncoder()\ndata['city_encode'] = lb.fit_transform(data['city'].values)\ndata['floor_encode'] = lb.fit_transform(data['floor'].values)\ndata['towards_encode'] = lb.fit_transform(data['towards'].values)","5db96cf4":"data.head(3)","400fb6f4":"px.scatter(data,x=\"price_area\",y=\"rent_room\",color='city_cn',size=\"convenience\",size_max=6)","70d36a5b":"px.scatter(data[(data['city']=='guangzhou')|(data['city']=='shenzhen')],x=\"price_area\",y=\"rent_room\",color='tube_name',size=\"convenience\",size_max=6)","5c93f4da":"test=data[(data.rent_room<=1000)&(data.price_area>=70)]\n\ndrop1=[x for i,x in enumerate(data.index) if (data['rent_room'].iloc[i]<=1000)&(data['price_area'].iloc[i]>=60)]\n\ndata=data.drop(drop1,axis=0) ","acaa029b":"p = sns.pairplot(pd.DataFrame(list(zip(data['rent_room'], data['city'], data['room_no'], data['tube_distance'], data['convenience'])), \n                        columns=['rent_room','city', 'room_no', 'tube_distance', 'convenience']), hue='city', palette=\"Set2\")","85ca080a":"plt.figure(figsize=(6,6))\nsns.heatmap(data.corr(),linewidths=0.1,linecolor='black',square=True,cmap='summer')","34bbaac5":"number_of_room_in_tube = data['tube_name'].value_counts().sort_values(ascending=True)\n\ndt = [go.Pie(\n        labels = number_of_room_in_tube.index,\n        values = number_of_room_in_tube.values,\n        hoverinfo = 'label+value'\n    \n)]\n\nplotly.offline.iplot(dt, filename='active_category')","5ff02650":"shanghai=data[data.city=='shanghai']\nbeijing=data[data.city=='beijing']\nshenzhen=data[data.city=='shenzhen']\nguangzhou=data[data.city=='guangzhou']\n\nguangdong=data[(data.city=='guangzhou')|(data.city=='shenzhen')]\nguangdong = guangdong.groupby('tube_name').first()\n\nprint(len(shanghai))\nprint(len(beijing))\nprint(len(shenzhen))\nprint(len(guangzhou))\nprint(len(guangdong))","39523bd1":"sh_map = folium.Map(location=[31.216199,121.469405],\n                        zoom_start=12,\n                   tiles=\"cartodbpositron\")\n\n\nfor i in range(275):\n    lat = shanghai['latitude'].iloc[i] \n    long = shanghai['longitude'].iloc[i] \n    radius = shanghai['rent_room'].iloc[i]\/550 \n\n    if shanghai['rent_room'].iloc[i] > 4500:\n        color = \"#008080\"  # \u84dd\u8272\u4e3a\u9ad8\u4ef7\u623f\n    elif shanghai['rent_room'].iloc[i] < 3000:\n        color = \"#9BCD9B\"  # \u7070\u8272\u4e3a\u4f4e\u4ef7\u623f\n    else:\n        color = \"#9C9C9C\"  #\u7eff\u8272\u4e3a\u5e73\u4ef7\u623f\n    \n    popup_text = \"\"\"\u57ce\u5e02 : {}<br>\n                \u697c\u5c42 : {}<br>\n                \u79df\u91d1 : {}<br>\n                \u671d\u5411 : {}<br>\n                \u9762\u79ef : {}<br>\n                \u623f\u95f4\u6570\u91cf : {}<br>\n                \u5c45\u4f4f\u4fbf\u5229\u5ea6 : {}<br>\n                \u8857\u533a : {}<br>\"\"\"\n    popup_text = popup_text.format(shanghai['city_cn'].iloc[i] ,\n                               shanghai['floor'].iloc[i] ,\n                               shanghai['rent_room'].iloc[i] ,\n                               shanghai['towards'].iloc[i] ,\n                               shanghai['price_area'].iloc[i] ,\n                               shanghai['room_no'].iloc[i],\n                               shanghai['convenience'].iloc[i],\n                               shanghai['tube_name'].iloc[i]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text,radius = radius, color = color, fill = True).add_to(sh_map)\n\nsh_map","c884d86b":"gz_map = folium.Map(location=[23.133180,113.319719],\n                        zoom_start=13,\n                   tiles=\"CartoDB dark_matter\")\n\n\nfor i in range(819):\n    lat = guangzhou['latitude'].iloc[i] \n    long = guangzhou['longitude'].iloc[i] \n    radius = guangzhou['rent_room'].iloc[i]\/490 \n\n    if guangzhou['rent_room'].iloc[i] > 3000:\n        color = \"#008080\"  # \u84dd\u8272\u4e3a\u9ad8\u4ef7\u623f\n    elif guangzhou['rent_room'].iloc[i] < 2000:\n        color = \"#CD950C\"  # \u68d5\u8272\u4e3a\u4f4e\u4ef7\u623f\n    else:\n        color = \"#9C9C9C\"  #\u7070\u8272\u4e3a\u5e73\u4ef7\u623f\n    \n    popup_text = \"\"\"\u57ce\u5e02 : {}<br>\n                \u697c\u5c42 : {}<br>\n                \u79df\u91d1 : {}<br>\n                \u671d\u5411 : {}<br>\n                \u9762\u79ef : {}<br>\n                \u623f\u95f4\u6570\u91cf : {}<br>\n                \u5c45\u4f4f\u4fbf\u5229\u5ea6 : {}<br>\n                \u8857\u533a : {}<br>\"\"\"\n    popup_text = popup_text.format(guangzhou['city_cn'].iloc[i] ,\n                               guangzhou['floor'].iloc[i] ,\n                               guangzhou['rent_room'].iloc[i] ,\n                               guangzhou['towards'].iloc[i] ,\n                               guangzhou['price_area'].iloc[i] ,\n                               guangzhou['room_no'].iloc[i],\n                               guangzhou['convenience'].iloc[i],\n                               guangzhou['tube_name'].iloc[i]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text,radius = radius, color = color, fill = True).add_to(gz_map)\n\ngz_map","256cf719":"sz_map = folium.Map(location=[22.540045,114.069211],\n                        zoom_start=13,\n                   tiles=\"cartodbpositron\")\n\n\nfor i in range(215):\n    lat = shenzhen['latitude'].iloc[i] \n    long = shenzhen['longitude'].iloc[i] \n    radius = shenzhen['rent_room'].iloc[i]\/500 \n\n    if shanghai['rent_room'].iloc[i] > 4500:\n        color = \"#008080\"  # \u84dd\u8272\u4e3a\u9ad8\u4ef7\u623f\n    elif shanghai['rent_room'].iloc[i] < 3000:\n        color = \"#9BCD9B\"  # \u7070\u8272\u4e3a\u4f4e\u4ef7\u623f\n    else:\n        color = \"#9C9C9C\"  #\u7eff\u8272\u4e3a\u5e73\u4ef7\u623f\n    \n    popup_text = \"\"\"\u57ce\u5e02 : {}<br>\n                \u697c\u5c42 : {}<br>\n                \u79df\u91d1 : {}<br>\n                \u671d\u5411 : {}<br>\n                \u9762\u79ef : {}<br>\n                \u623f\u95f4\u6570\u91cf : {}<br>\n                \u5c45\u4f4f\u4fbf\u5229\u5ea6 : {}<br>\n                \u8857\u533a : {}<br>\"\"\"\n    popup_text = popup_text.format(shenzhen['city_cn'].iloc[i] ,\n                               shenzhen['floor'].iloc[i] ,\n                               shenzhen['rent_room'].iloc[i] ,\n                               shenzhen['towards'].iloc[i] ,\n                               shenzhen['price_area'].iloc[i] ,\n                               shenzhen['room_no'].iloc[i],\n                               shenzhen['convenience'].iloc[i],\n                               shenzhen['tube_name'].iloc[i]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text,radius = radius, color = color, fill = True).add_to(sz_map)\n\nsz_map","a7c41784":"num = 20\n\nlat = np.array(guangdong[\"latitude\"][0:num])                       \nlon = np.array(guangdong[\"longitude\"][0:num])                        \nrent_room = np.array(guangdong[\"area_price_level\"][0:num],dtype=float)    \n\n\ndata1 = [[lat[i],lon[i],rent_room[i]] for i in range(num)]    \n\nmap_osm = folium.Map(location=[22.7,113.5],zoom_start=10)   \nHeatMap(data1).add_to(map_osm) \n\nfolium.TileLayer('cartodbpositron').add_to(map_osm)\n\nmap_osm","6bedf75a":"sns.distplot(data['rent_room'] , fit=norm);\n\n(mu, sigma) = norm.fit(data['rent_room'])\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('rent_room distribution')\n\n#Get QQ-plot\nfig = plt.figure()\nres = stats.probplot(data['rent_room'], plot=plt)\nplt.show()\n","9a960393":"data.head()","f66671d8":"col=['price_area', 'tube_distance','convenience', 'floor_encode', 'latitude', 'longitude','towards_encode']\n\nX=data[col]\ny=data['rent_room']\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.2)","c5efb1e4":"# \u5bfc\u5165\u5230lightgbm\u77e9\u9635\nlgb_train = lgb.Dataset(X_train, y_train, feature_name=col, categorical_feature=['floor_encode'])\nlgb_test = lgb.Dataset(X_test, y_test, feature_name=col, categorical_feature=['floor_encode'], reference=lgb_train)\n\n# \u8bbe\u7f6e\u53c2\u6570\nparams = {'nthread': 4,  # \u8fdb\u7a0b\u6570\n              'objective': 'regression',\n              'learning_rate':0.001,\n              #'num_leaves': 1024, \n              #'max_depth': 10, \n              'feature_fraction': 0.7,  # \u6837\u672c\u5217\u91c7\u6837\n              'lambda_l1':0.001,  # L1 \u6b63\u5219\u5316\n              'lambda_l2': 0,  # L2 \u6b63\u5219\u5316\n              'bagging_seed': 100,  # \u968f\u673a\u79cd\u5b50\n              }\nparams['metric'] = ['rmse']\n\nevals_result = {}  #\u8bb0\u5f55\u8bad\u7ec3\u7ed3\u679c\n\nprint('\u5f00\u59cb\u8bad\u7ec3...')\ngbm_start=datetime.now() \n# train\ngbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=3000,\n                valid_sets=[lgb_train, lgb_test],\n                evals_result=evals_result,\n                verbose_eval=10)\ngbm_end=datetime.now() \nprint('spendt time :'+str((gbm_end-gbm_start).seconds)+'(s)')","d87a5d14":"ax = lgb.plot_metric(evals_result, metric='rmse')\nplt.show()","5bbef0d9":"ax = lgb.plot_importance(gbm, max_num_features=7)\nplt.show()","0c0af2e5":"df_counts = data.groupby(['rent_room', 'city_cn']).size().reset_index(name='counts')\npx.scatter(df_counts,x=\"rent_room\",y=\"counts\",color='city_cn',size=\"counts\",size_max=20)","00b3bf95":"data['convenience'].describe()","db3a39ec":"predict_lgb=gbm.predict(data[col]) \n\ndata['rent_room_lgb']=predict_lgb","a3bae72c":"plt.figure(figsize=(12,6))\nsns.regplot(data['price_area'],data['rent_room'],color='pink',label = 'true', marker = '+')\nsns.regplot(data['price_area'],data['rent_room_lgb'],color='teal', label = 'lgb', marker = 'x')\nplt.legend()\nplt.xlabel('price_area')\nplt.ylabel('rent_room')\nplt.show()","8f8de9ca":"predict=gbm.predict(test[col]) \n\ntest['rent_room_pre']=predict","ef15cffc":"plt.figure(figsize=(12,6))\nsns.regplot(test['price_area'],test['rent_room_pre'],color='teal', label = 'rent_lgb', marker = 'x')\nsns.regplot(test['price_area'],test['rent_room'],color='orange',label = 'rent_label', marker = '+')\nplt.legend()\nplt.xlabel('price_area')\nplt.ylabel('rent_room')\nplt.show()","f9f10026":"col=['price_area', 'tube_distance','convenience', 'latitude', 'longitude']\n\nX=data[col].values\ny=data['rent_room'].values\n\nX = X[:,0:5]\nY = y[:,]","d7b79ad6":"# \u968f\u673a\u62c6\u5206\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, Y, test_size=0.3)\n \n# \u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc\nmodel = Sequential()\ninput = X.shape[1]\n# \u9690\u85cf\u5c42256\nmodel.add(Dense(256, input_shape=(input,)))\nmodel.add(Activation('relu'))\n#Dropout\u5c42\u7528\u4e8e\u9632\u6b62\u8fc7\u62df\u5408\nmodel.add(Dropout(0.2))\n\n# \u9690\u85cf\u5c42128\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\n# \u9690\u85cf\u5c4264\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\n# \u56de\u5f52\u95ee\u9898\u8f93\u51fa\u5c42\u4e0d\u9700\u8981\u6fc0\u6d3b\u51fd\u6570\nmodel.add(Dense(1))\n# \u7528 ADAM \u4f18\u5316\u7b97\u6cd5\u4ee5\u53ca\u4f18\u5316\u7684\u6700\u5c0f\u5747\u65b9\u8bef\u5dee\u635f\u5931\u51fd\u6570\nmodel.compile(loss='mean_squared_error', optimizer=Adam())\n# early stoppping\nfrom keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', patience=50, verbose=2)\n# \u8bad\u7ec3\nhistory = model.fit(train_X, train_y, epochs=80, batch_size=20, validation_data=(test_X, test_y), verbose=2, shuffle=False, callbacks=[early_stopping])\n","6374d74f":"# loss\u66f2\u7ebf\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show()","9a2d728f":"# \u9884\u6d4b\nyhat = model.predict(test_X)\n# \u9884\u6d4by\u9006\u6807\u51c6\u5316\ninv_yhat0 = concatenate((test_X, yhat), axis=1)\ninv_yhat = inv_yhat0[:,-1]\n# \u539f\u59cby\u9006\u6807\u51c6\u5316\ntest_y = test_y.reshape((len(test_y), 1))\ninv_y0 = concatenate((test_X,test_y), axis=1)\ninv_y = inv_y0[:,-1]\n# \u8ba1\u7b97 RMSE\nrmse = sqrt(mean_squared_error(inv_y, inv_yhat))\nprint('Test RMSE: %.3f' % rmse)\nplt.plot(inv_y)\nplt.plot(inv_yhat)\nplt.show()","22ff9b44":"predict_nn=model.predict(data[col]) \n\ndata['rent_room_pre_nn']=predict_nn","a452e38f":"plt.figure(figsize=(12,6))\nsns.regplot(data['price_area'],data['rent_room'],color='pink', label = 'true', marker = 'o')\nsns.regplot(data['price_area'],data['rent_room_pre_nn'],color='orange',label = 'nn', marker = 'x')\nsns.regplot(data['price_area'],data['rent_room_lgb'],color='teal',label = 'lgb',marker = '+')\nplt.legend()\nplt.xlabel('price_area')\nplt.ylabel('rent_room')\nplt.show()","0c4af765":"def build_embedding_network():\n \n    inputs = []\n    embeddings = []\n    \n    \n    input_cate_feature_1 = Input(shape=(1,))\n    embedding = Embedding(4, 2, input_length=1)(input_cate_feature_1)\n    embedding = Reshape(target_shape=(2,))(embedding)\n    inputs.append(input_cate_feature_1)\n    embeddings.append(embedding)\n    \n    input_cate_feature_2 = Input(shape=(1,))\n    embedding = Embedding(39, 6, input_length=1)(input_cate_feature_2)\n    embedding = Reshape(target_shape=(6,))(embedding)\n    inputs.append(input_cate_feature_2)\n    embeddings.append(embedding)\n    \n    input_numeric = Input(shape=(5,))\n    embedding_numeric = Dense(256)(input_numeric) \n    inputs.append(input_numeric)\n    embeddings.append(embedding_numeric)\n \n    x = Concatenate()(embeddings)\n   \n    x = Dense(128, activation='relu')(x)\n    x = Dropout(.15)(x)\n    x = Dense(64, activation='relu')(x)\n    x = Dropout(.15)(x)\n    \n    output = Dense(1, activation='relu')(x)\n    \n    model = Model(inputs, output)\n \n    model.compile(loss='mean_squared_error', optimizer=Adam())\n    print(model.summary())\n    \n    return model","abcfd426":"col=['floor_encode', 'towards_encode', 'price_area', 'tube_distance','convenience', 'latitude', 'longitude']\ncate1=['floor_encode']\ncate2=['towards_encode']\ncont=['price_area', 'tube_distance','convenience', 'latitude', 'longitude']\n\nX=data[col].values\ny=data['rent_room'].values\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, Y, test_size=0.3)\n\n# \u8c03\u6574train\u6570\u636e\u96c6\ntr_cate_feature_1 = train_X[:,0:1]\ntr_cate_feature_2 = train_X[:,1:2]\ntr_contious_feature = train_X[:,2:7]\n\ntr_X = []\ntr_X.append(tr_cate_feature_1)\ntr_X.append(tr_cate_feature_2)\ntr_X.append(tr_contious_feature)\n\ntr_label = train_y[:,]\ntr_Y = []\ntr_Y.append(tr_label)\n\n# \u8c03\u6574test\u6570\u636e\u96c6\nte_cate_feature_1 = test_X[:,0:1]\nte_cate_feature_2 = test_X[:,1:2]\nte_contious_feature = test_X[:,2:7]\n\nte_X = []\nte_X.append(te_cate_feature_1)\nte_X.append(te_cate_feature_2)\nte_X.append(te_contious_feature)\n\nte_label = test_y[:,]\nte_Y = []\nte_Y.append(te_label)","da55bc78":"import tensorflow as tf\nimport random as rn\n \n#random seeds for stochastic parts of neural network \nnp.random.seed(10)\nfrom tensorflow import set_random_seed\nset_random_seed(15)\n \nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Concatenate, Reshape, Dropout\nfrom keras.layers.embeddings import Embedding","39a02f7c":"early_stopping = EarlyStopping(monitor='val_loss', patience=50, verbose=2)\nembedding_nn = build_embedding_network()\nhistory = embedding_nn.fit(tr_X, tr_Y, epochs=200, batch_size=20, validation_data=(te_X, te_Y), verbose=2, shuffle=False, callbacks=[early_stopping])","c02b8cba":"# \u9884\u6d4b\nyhat = embedding_nn.predict(te_X)\n# \u9884\u6d4by\u9006\u6807\u51c6\u5316\n\ninv_yhat0 = concatenate((test_X, yhat), axis=1)\ninv_yhat = inv_yhat0[:,-1]\n# \u539f\u59cby\u9006\u6807\u51c6\u5316\ntest_y = test_y.reshape((len(test_y), 1))\ninv_y0 = concatenate((test_X,test_y), axis=1)\ninv_y = inv_y0[:,-1]\n# \u8ba1\u7b97 RMSE\nrmse = sqrt(mean_squared_error(inv_y, inv_yhat))\nprint('Test RMSE: %.3f' % rmse)\nplt.plot(inv_y)\nplt.plot(inv_yhat)\nplt.show()","57b821ab":"col=['floor_encode', 'towards_encode', 'price_area', 'tube_distance','convenience', 'latitude', 'longitude']\ncate1=['floor_encode']\ncate2=['towards_encode']\ncont=['price_area', 'tube_distance','convenience', 'latitude', 'longitude']\n\ncate_feature_1 = data[cate1].values\ncate_feature_2 = data[cate2].values\ncontious_feature = data[cont].values\n\nTX = []\nTX.append(cate_feature_1)\nTX.append(cate_feature_2)\nTX.append(contious_feature)\n\nTY = data['rent_room'].values\n\npreds_emnn = embedding_nn.predict(TX)[:,0]\ndata['rent_room_emnn'] = preds_emnn","b76742cf":"plt.figure(figsize=(12,6))\nsns.regplot(data['price_area'],data['rent_room'],color='pink', label = 'true', marker = 'o')\nsns.regplot(data['price_area'],data['rent_room_lgb'],color='gray',label = 'lgb',marker = '+')\nsns.regplot(data['price_area'],data['rent_room_pre_nn'],color='orange',label = 'nn', marker = 'x')\nsns.regplot(data['price_area'],data['rent_room_emnn'],color='teal',label = 'nn_em',marker = '*')\nplt.legend()\nplt.xlabel('price_area')\nplt.ylabel('rent_room')\nplt.show()","be1b3973":"\u63a5\u4e0b\u6765\u6211\u4eec\u5efa\u7acbLGBM\u6a21\u578b\u5e76\u8fd0\u884c","2c0d4c84":"\u9996\u5148\u6211\u4eec\u9009\u62e9\u7279\u5f81\u5e76\u5c06\u6570\u636e\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\uff0c\u6d4b\u8bd5\u96c6\u4e3a\u4e4b\u524d\u7b5b\u9009\u7684\u865a\u5047\u623f\u6e90\u4fe1\u606f\u6570\u636e\u96c6","a820e5b8":"### \u9884\u6d4b\u623f\u4ef7","2e753533":"\u663e\u793a\u8bad\u7ec3\u8bef\u5dee\u548c\u7279\u5f81\u6743\u91cd","442d48e8":"\u5728\u5efa\u7acbLGBM\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e86\u4e00\u4e2a\u7c7b\u522b\u7279\u5f81\u697c\u5c42\uff0c\u800c\u697c\u5c42\u5bf9\u623f\u4ef7\u7684\u5f71\u54cd\u5f88\u5c0f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5efa\u7acb\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u6765\u9884\u6d4b\u623f\u4ef7\uff0c\u6211\u4eec\u5c06\u5efa\u7acb\u4e24\u4e2a\u795e\u7ecf\u7f51\u7edc\u6a21\u578b:\n\n- \u4e0d\u5e26embedding\u5c42\u7684\u591a\u5c42\u795e\u7ecf\u7f51\u7edc\uff1a\u5728\u8be5\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u6211\u4eec\u53bb\u9664\u6240\u6709\u7c7b\u522b\u7279\u5f81\uff0c\u4ec5\u4f7f\u7528\u8fde\u7eed\u6570\u503c\u7279\u5f81\u8fdb\u884c\u8bad\u7ec3\n- \u5e26\u6709embedding\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\uff1aembedding\u5c42\u53ef\u4ee5\u5c06\u7c7b\u522b\u7279\u5f81\u5904\u7406\u6210\u5bc6\u96c6\u5411\u91cf\uff0c\u6211\u4eec\u5c06\u4f7f\u75285\u4e2a\u8fde\u7eed\u6570\u503c\u7279\u5f81\u548c2\u4e2a\u7c7b\u522b\u7279\u5f81\u8fdb\u884c\u8bad\u7ec3","ddd43cb9":"\u672c\u6587\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u56db\u90e8\u5206","a7f682e4":"\u53ef\u4ee5\u770b\u51fa\uff0c\u623f\u4ef7\u6570\u636e\u6574\u4f53\u5448\u73b0\u51fa\u504f\u6001\u5206\u5e03\uff0c\u5176\u4e2d\u57285000\u5143\u4ef7\u4f4d\u4ee5\u4e0b\u7684\u623f\u6e90\u8fd1\u4f3c\u670d\u4ece\u6b63\u6001\u5206\u5e03\uff0c\u800c\u57285000\u5143\u9644\u8fd1\u7684\u623f\u6e90\u5219\u5b8c\u5168\u504f\u79bb\u4e86\u6b63\u6001\u5206\u5e03\u3002\u7531\u4e8e\u6574\u4f53\u7684\u504f\u79fb\u5e76\u4e0d\uff0c\u660e\u663e\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u5fc5\u5904\u7406\u3002","69f3a0cf":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u521b\u5efa\u795e\u7ecf\u7f51\u7edc\uff0c\u7528\u4e8eembedding\u5c42\u5fc5\u987b\u5904\u5728\u7f51\u7edc\u7684\u7b2c\u4e00\u5c42\uff0c\u4e14\u7c7b\u522b\u7279\u5f81\u548c\u8fde\u7eed\u7279\u5f81\u4e0d\u80fd\u540c\u65f6\u6570\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u5efa\u7acbembedding\u5c42\uff0c\u7136\u540e\u62fc\u63a5","84df6157":"- \u8f7d\u5165\u6570\u636e\u3001\u6570\u636e\u9884\u5904\u7406\n- \u6570\u636e\u53ef\u89c6\u5316\u3001\u6570\u636e\u9884\u5904\u7406\n- LightGBM\u5efa\u7acb\u623f\u4ef7\u9884\u6d4b\u6a21\u578b\n- \u795e\u7ecf\u7f51\u7edc\u5efa\u7acb\u623f\u4ef7\u9884\u6d4b\u6a21\u578b","1003bd19":"\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528\u68af\u5ea6\u63d0\u5347\u6811\u6a21\u578bLGBM\u5efa\u6a21\u5e76\u5206\u6790\u5f71\u54cd\u623f\u4ef7\u7684\u56e0\u7d20","7ce6b742":"- \u623f\u5c4b\u9762\u79ef\u548c\u5730\u7406\u4f4d\u7f6e\u662f\u5f71\u54cd\u623f\u5c4b\u4ef7\u683c\u7684\u4e3b\u8981\u56e0\u7d20","f6d418f0":"## \u8f7d\u5165\u6570\u636e","46ddfefe":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u5c06\u539f\u59cb\u6570\u636e\u96c6\u7684\u6807\u7b7e\u623f\u4ef7\u548c\u9884\u6d4b\u7ed3\u679c\u8868\u793a\u5728\u540c\u4e00\u4e2a\u56fe\u7247\u4e2d\u8fdb\u884c\u5bf9\u6bd4","fd1d3f46":"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6570\u636e\u96c6\u5904\u7406\u6210\u7279\u6b8a\u7684\u77e9\u9635\u5f62\u5f0f\u4ee5\u4fdd\u8bc1\u53ef\u4ee5\u704c\u5165\u6211\u4eec\u7684\u795e\u7ecf\u7f51\u7edc","4de690e1":"\u63a5\u4e0b\u6765\u6211\u4eec\u7ed8\u5236\u5e7f\u5dde\u548c\u6df1\u5733\u79df\u91d1\u7684\u70ed\u56fe\uff0c\u7531\u4e8e\u6570\u636e\u8fc7\u5c11\u56e0\u6b64\u5e76\u4e0d\u4f1a\u5f88\u660e\u663e","fdc824b4":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u67e5\u770b\u623f\u6e90\u7684\u9762\u79ef\u3001\u79df\u91d1\u4ee5\u53ca\u6240\u5728\u57ce\u5e02\u7684\u5206\u5e03\u60c5\u51b5","382490cd":"\u53ef\u4ee5\u770b\u51fa\uff0c\u9884\u6d4b\u7ed3\u679c\u7684\u5206\u5e03\u57fa\u672c\u7b26\u5408\u539f\u6570\u636e\u96c6\u6807\u7b7e\u7684\u5206\u5e03\uff0c\u8bf4\u660e\u4e86\u6211\u4eec\u7684\u9884\u6d4b\u7ed3\u679c\u8f83\u4e3a\u5408\u7406","71d1e0a3":"- \u7ecf\u5ea6\u7279\u5f81\u5bf9\u623f\u4ef7\u7684\u5f71\u54cd\u8981\u5927\u4e8e\u7eac\u5ea6\u7279\u5f81\u5bf9\u623f\u4ef7\u5f71\u54cd\n\n\u5404\u4e2a\u623f\u6e90\u7684\u7ecf\u7eac\u5ea6\u5305\u542b\u4e86\u5f88\u591a\u5730\u7406\u4f4d\u7f6e\u7684\u4fe1\u606f\uff0c\u5982\u57ce\u5e02\u5dee\u5f02\u3001\u8857\u533a\u5dee\u5f02\u7b49\uff0c\u63d0\u5347\u6811\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7\u6811\u7684\u5206\u88c2\u5b66\u4e60\u5230\u8fd9\u4e9b\u7ec6\u8282\u5dee\u5f02\u3002\u5728\u8fd9\u4e2a\u6570\u636e\u96c6\u4e2d\uff0c\u5e7f\u5dde\u7684\u603b\u4f53\u623f\u4ef7\u8981\u660e\u663e\u4f4e\u4e8e\u5176\u4ed6\u4e09\u5ea7\u57ce\u5e02\uff0c\u800c\u5e7f\u5dde\u7684\u623f\u6e90\u4fe1\u606f\u5360\u5230\u4e86\u6570\u636e\u96c6\u7684\u4e00\u534a\u4ee5\u4e0a\uff0c\u5728\u56db\u5ea7\u57ce\u5e02\u91cc\uff0c\u5e7f\u5dde\u5904\u5728\u6700\u897f\u8fb9\uff0c\u5177\u6709\u660e\u663e\u7684\u7ecf\u5ea6\u7279\u5f81\uff0c\u56e0\u6b64\u68af\u5ea6\u63d0\u5347\u6811\u6a21\u578b\u5728\u5206\u88c2\u6811\u65f6\u4f1a\u5224\u65ad\u51fa\u7ecf\u5ea6\u7279\u5f81\u7684\u53d8\u5316\u5e26\u6765\u7684\u589e\u76ca\u5927\u4e8e\u7eac\u5ea6\u7279\u5f81\u7684\u53d8\u5316\uff0c\u6240\u4ee5\u7ecf\u5ea6\u7279\u5f81\u7684\u6743\u91cd\u66f4\u9ad8\u3002\n\u4e0b\u9762\u6211\u4eec\u5c06\u5404\u57ce\u5e02\u4e0d\u540c\u4ef7\u4f4d\u623f\u6e90\u7684\u6570\u91cf\u7edf\u8ba1\u7ed8\u5236\u5230\u6563\u70b9\u56fe\u4e0a\uff0c\u6a2a\u8f74\u4ee3\u8868\u623f\u4ef7\uff0c\u7eb5\u8f74\u548c\u6563\u70b9\u5927\u5c0f\u4ee3\u8868\u8be5\u623f\u4ef7\u6570\u91cf\uff1a","83b4b043":"\u865a\u5047\u623f\u6e90\u4fe1\u606f\u7684\u6807\u6ce8\u623f\u4ef7\u548c\u9884\u6d4b\u623f\u4ef7\u5bf9\u6bd4","67fb2272":"\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e9b\u9762\u79ef\u8f83\u5927\u4f46\u4ef7\u683c\u4f4e\u5f97\u4e0d\u5408\u5e38\u7406\u7684\u623f\u5b50\u5206\u6563\u5728\u5404\u4e2a\u5730\u533a\uff0c\u8bf4\u660e\u8fd9\u79cd\u73b0\u8c61\u5e76\u4e0d\u662f\u7531\u4e8e\u5730\u7406\u4f4d\u7f6e\u5bfc\u81f4\u7684\uff0c\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\uff0c\u6211\u4eec\u63a8\u65ad\u8fd9\u4e9b\u4e0d\u5408\u7406\u7684\u623f\u6e90\u4fe1\u606f\u6709\u53ef\u80fd\u662f\u4e00\u4e9b\u4e2d\u4ecb\u6295\u653e\u7684\u865a\u5047\u5e7f\u544a\uff0c\u4ee5\u8d85\u4f4e\u4ef7\u4f4d\u5438\u5f15\u79df\u623f\u8005\u8054\u7cfb\u4e2d\u4ecb\u3002\n\u901a\u8fc7\u56fe\u50cf\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e9b\u865a\u5047\u623f\u6e90\u7684\u9762\u79ef\u901a\u5e38\u572860\u5e73\u4ee5\u4e0a\uff0c\u79df\u91d1\u901a\u5e38\u57281000\u5143\u4ee5\u4e0b\uff0c\u8fd9\u5728\u56fd\u5185\u7684\u4e00\u7ebf\u57ce\u5e02\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u6570\u636e\u96c6\u5b58\u653e\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u6761\u4ef6\u7684\u6570\u636e\uff0c\u540e\u7eed\u9884\u4f30\u8fd9\u4e9b\u865a\u5047\u623f\u6e90\u7684\u623f\u4ef7\uff0c\u540c\u65f6\u4e3a\u4e86\u4fdd\u8bc1\u540e\u7eed\u5206\u6790\u7684\u53ef\u89e3\u91ca\u6027\u548c\u623f\u4ef7\u6a21\u578b\u7684\u51c6\u786e\u6027\uff0c\u6211\u4eec\u5220\u9664\u539f\u6570\u636e\u96c6\u4e2d\u8fd9\u4e9b\u865a\u5047\u7684\u623f\u6e90\u6570\u636e","41bcfe4c":"### \u4e0d\u5e26embedding\u5c42\u7684\u591a\u5c42\u795e\u7ecf\u7f51\u7edc","3120b752":"\u53ef\u4ee5\u770b\u5230\uff0c\u865a\u5047\u623f\u6e90\u7684\u539f\u59cb\u6807\u6ce8\u623f\u4ef7\u8981\u8fdc\u4f4e\u4e8e\u9884\u6d4b\u623f\u4ef7\uff0c\u8fd9\u4e5f\u8bc1\u660e\u4e86\u6211\u4eec\u4e4b\u524d\u5bf9\u865a\u5047\u623f\u6e90\u7684\u7b5b\u9009\u6ca1\u6709\u95ee\u9898\uff0c\u8fd9\u4e9b\u623f\u6e90\u4fe1\u606f\u53ef\u4fe1\u5ea6\u975e\u5e38\u4f4e\uff0c\u5b58\u5728\u5f88\u5927\u7684\u95ee\u9898","b2d33b84":"## \u6570\u636e\u53ef\u89c6\u5316","28624bb5":"## LGBM","4342a42e":"\u8fd9\u4e2aexcel\u6570\u636e\u96c6\u4e2d\u5171\u67095\u4e2a\u8868\u683c\u30021\u4e2a\u8868\u683c\u7edf\u8ba1\u4e864\u4e2a\u57ce\u5e02\u6240\u6709\u7684\u623f\u6e90\u4fe1\u606f\u3002\u5269\u4e0b\u76844\u4e2a\u8868\u683c\u5206\u522b\u7edf\u8ba1\u4e864\u4e2a\u57ce\u5e02\u7684\u8857\u533a\u4fe1\u606f\uff0c\u8fd94\u4e2a\u8868\u683c\u4e2d\u6570\u636e\u7684\u7279\u5f81\u53d8\u91cf\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u7eb5\u5411\u5408\u5e76\uff1b\u53e6\u5916\uff0c\u8fd94\u4e2a\u8857\u533a\u4fe1\u606f\u8868\u683c\u4e2d\u7684`city`\u548c`tube_name`\u7279\u5f81\u548c\u623f\u6e90\u4fe1\u606f\u8868\u683c\u7684\u91cd\u590d\uff0c\u4f46\u662f\u8857\u533a\u4fe1\u606f\u8868\u683c\u7684`tube_name`\u7f3a\u5c11\u57ce\u5e02\u524d\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u6309\u7167\u4ee5\u4e0b\u6d41\u7a0b\u5904\u7406\u53ca\u5408\u5e76\u6570\u636e\u96c6\u4e2d\u7684\u8868\u683c\u3002\n\n- \u5c064\u4e2a\u8857\u533a\u4fe1\u606f\u8868\u683c\u7eb5\u5411\u5408\u5e76\uff0c\u5f97\u5230\u6570\u636e\u96c6`dff`\n- \u5c06\u6570\u636e\u96c6`dff`\u4e2d\u8857\u533a\u6570\u636e\u7684\u7279\u5f81`city`\u548c`tube_name`\u7684\u5b57\u7b26\u5408\u5e76\uff0c\u5b58\u653e\u5230\u7279\u5f81`tube_name`\u4e2d\n- \u5c06\u8857\u533a\u4fe1\u606f\u6570\u636e\u96c6`dff`\u548c\u623f\u6e90\u4fe1\u606f\u6570\u636e\u96c6`df`\u5408\u5e76\uff0c\u5408\u5e76\u7684\u6bcd\u8282\u70b9\u4e3a\u7279\u5f81`tube_name`\uff0c\u5f97\u5230\u65b0\u6570\u636e\u96c6`data`\n- \u5c06`data`\u4e2d\u7684\u5bb9\u6613\u4fee\u6539\u7684\u6c49\u5b57\u66f4\u6539\u4e3a\u5b57\u6bcd\uff0c\u5c3d\u53ef\u80fd\u907f\u514d matplotlib \u7ed8\u56fe\u663e\u793a\u9519\u8bef\n- LightGBM\u5728\u51b3\u7b56\u6811\u7b97\u6cd5\u4e0a\u589e\u52a0\u4e86\u7c7b\u522b\u7279\u5f81\u7684\u51b3\u7b56\u89c4\u5219\uff0c\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u6570\u5b57\u5f62\u5f0f\u7684\u7c7b\u522b\u7279\u5f81\u4e14\u6bd4\u4f20\u7edf\u4f7f\u7528\u7684\u72ec\u70ed\u7f16\u7801\u7684\u7b97\u6cd5\u66f4\u5148\u8fdb\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u7c7b\u522b\u7279\u5f81\u8fdb\u884c\u666e\u901a\u7f16\u7801\u5373\u53ef","fda79de5":"## \u795e\u7ecf\u7f51\u7edc\u5efa\u7acb\u623f\u4ef7\u9884\u6d4b\u6a21\u578b","6f679a0b":"\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e09\u4e2a\u6a21\u578b\u7684\u6548\u679c\u5dee\u4e0d\u591a\uff0c\u8bf4\u660e\u623f\u5c4b\u4e2d\u4ecb\u548c\u623f\u4e1c\u5728\u5bf9\u4e00\u7ebf\u57ce\u5e02\u623f\u5c4b\u5b9a\u4ef7\u65f6\u8fd8\u6dfb\u52a0\u4e00\u4e9b\u968f\u673a\u7684\u4e0d\u53ef\u9884\u6d4b\u7684\u4e0d\u7a33\u5b9a\u6761\u4ef6\uff0c\u4e5f\u8fdb\u4e00\u6b65\u8bf4\u660e\u623f\u5c4b\u4ef7\u683c\u6613\u53d7\u5e02\u573a\u4ee5\u53ca\u653f\u7b56\u56e0\u7d20\u7684\u5f71\u54cd","dd6cd265":"\u63a5\u4e0b\u6765\u6211\u4eec\u7528\u997c\u72b6\u56fe\u67e5\u770b\u6570\u636e\u96c6\u4e2d\u8857\u533a\u7684\u5206\u5e03\u60c5\u51b5","a4b6404a":"\u63a5\u4e0b\u6765\u6211\u4eec\u7ed8\u5236\u6563\u70b9\u56fe\u77e9\u9635\u548c\u76f8\u5173\u6027\u77e9\u9635\u6765\u67e5\u770b\u7279\u5f81\u4e4b\u95f4\u5927\u81f4\u7684\u5173\u7cfb\u548c\u5206\u5e03\u60c5\u51b5","fc4938c4":"\u53ef\u4ee5\u770b\u51fa\uff0c\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8868\u73b0\u51fa\u4e86\u4e0d\u9519\u7684\u6cdb\u5316\u80fd\u529b","d3646290":"\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u865a\u5047\u623f\u6e90\u4fe1\u606f\u7684\u623f\u4ef7\uff0c\u5e76\u548c\u539f\u6765\u6807\u6ce8\u7684\u623f\u4ef7\u8fdb\u884c\u5bf9\u6bd4","2832dd36":"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u623f\u6e90\u4fe1\u606f\u8868\u793a\u5728\u5730\u56fe\u4e2d\u67e5\u770b\u5b83\u4eec\u5206\u5e03\u7684\u5b9e\u9645\u60c5\u51b5\uff0c\u5176\u4e2d\u6bcf\u4e2a\u623f\u6e90\u7684\u6807\u8bb0\u90fd\u5b58\u653e\u4e86\u623f\u6e90\u4fe1\u606f\u7684\u6807\u7b7e\uff0c\u70b9\u51fb\u5373\u53ef\u67e5\u770b\u623f\u6e90\u7684\u8be6\u7ec6\u4fe1\u606f","2ef129c3":"\u7531\u4e8e\u6211\u4eec\u5728\u505a\u4ea4\u53c9\u9a8c\u8bc1\u540e\u5c06\u6570\u636e\u96c6\u8f6c\u6362\u4e3a\u4e86\u591a\u4e2a\u62fc\u63a5\u7684\u77e9\u9635\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u91cd\u65b0\u5c06\u539f\u6570\u636e\u96c6\u548c\u6d4b\u8bd5\u96c6\u590d\u73b0\u4e3a\u8fd9\u4e2a\u7279\u6b8a\u683c\u5f0f\u7136\u540e\u8fdb\u884c\u9884\u6d4b","d7d4f010":"\u6211\u4eec\u4f7f\u7528LGBM\u5efa\u7acb\u4e86\u6a21\u578b\u5e76\u5f97\u5230\u4e86\u6bcf\u4e2a\u56e0\u7d20\u5bf9\u623f\u4ef7\u5f71\u54cd\u7684\u6743\u91cd\uff0c\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba","899a620d":"\u6211\u4eec\u6ce8\u610f\u5230\u5728\u79df\u91d11000\u5143\u4ee5\u4e0b\u7684\u623f\u6e90\u6570\u636e\u5b58\u5728\u4e00\u4e9b\u79bb\u7fa4\u70b9\uff0c\u8fd9\u4e9b\u623f\u6e90\u9762\u79ef\u5927\u90e8\u5206\u90fd\u5927\u4e8e100\u5e73\uff0c\u8fd9\u5728\u4e00\u7ebf\u57ce\u5e02\u91cc\u662f\u6781\u5176\u53cd\u5e38\u7684\uff0c\u8fd9\u4e9b\u53cd\u5e38\u7684\u623f\u6e90\u4fe1\u606f\u57fa\u672c\u90fd\u4f4d\u4e8e\u5e7f\u5dde\u548c\u6df1\u5733\uff0c\u8003\u8651\u5230\u4e00\u7ebf\u57ce\u5e02\u4e5f\u53ef\u80fd\u6709\u4e2a\u522b\u5730\u6bb5\u975e\u5e38\u504f\u50fb\uff0c\u4e0b\u9762\u6211\u4eec\u67e5\u770b\u5e7f\u5dde\u548c\u6df1\u5733\u7684\u623f\u6e90\u5206\u5e03\u770b\u662f\u5426\u6709\u53ef\u80fd\u662f\u7531\u4e8e\u8fd9\u4e2d\u60c5\u51b5\u5bfc\u81f4\u7684","7ece9065":"### \u5e26embedding\u5c42\u7684\u591a\u5c42\u795e\u7ecf\u7f51\u7edc","2ee96194":"- \u5c45\u4f4f\u4fbf\u5229\u5ea6\u548c\u697c\u5c42\u671d\u5411\u5bf9\u623f\u4ef7\u5f71\u54cd\u4e0d\u5927\n\n\u8fd9\u56db\u5ea7\u57ce\u5e02\u662f\u56fd\u5185\u6700\u53d1\u8fbe\u7684\u4e00\u7ebf\u57ce\u5e02\uff0c\u62e5\u6709\u53d1\u8fbe\u7684\u4ea4\u901a\u7f51\u7edc\u7cfb\u7edf\u548c\u5bc6\u96c6\u7684\u57ce\u5e02\u751f\u6d3b\u5e7f\u573a\uff0c\u56e0\u6b64\u6211\u4eec\u4ece\u6570\u636e\u7edf\u8ba1\u8868\u4e2d\u53ef\u4ee5\u770b\u5230\u4fbf\u5229\u6307\u6570convenience\u7684\u5747\u503c\u4e3a97.3\uff0c\u65b9\u5dee\u4e3a3.26\uff0c\u5404\u4e2a\u623f\u6e90\u7684\u4fbf\u5229\u6307\u6570\u5e76\u6ca1\u6709\u660e\u663e\u5dee\u8ddd\uff0c\u5c45\u4f4f\u4fbf\u5229\u5ea6\u5e76\u4e0d\u662f\u5f71\u54cd\u623f\u4ef7\u7684\u5173\u952e\u56e0\u7d20\u3002","339861e4":"\u6211\u4eec\u4f7f\u7528LightGBM\u5efa\u7acb\u623f\u4ef7\u6a21\u578b\uff0c\u9996\u5148\uff0c\u6211\u4eec\u5148\u67e5\u770b\u79df\u91d1\u5206\u5e03\u7684\u65b9\u5dee\u548c\u5747\u503c"}}