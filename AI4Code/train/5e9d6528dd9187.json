{"cell_type":{"689c06a4":"code","2717a319":"code","f8ae7886":"code","7605581c":"code","cffd9b8b":"code","34608200":"code","e11da493":"code","332d3abd":"code","8b2117b9":"code","0f683df7":"code","521d3b8f":"code","d0cfa896":"code","cfb4b883":"code","fac05746":"code","bbca071d":"code","5c86bfa6":"code","30b96f39":"code","e545a263":"code","d18635d0":"code","d08939d1":"code","815e7857":"code","9f3a1412":"code","22d59bfe":"code","ce747487":"code","7fe0634a":"code","13053e5b":"code","51c0eab2":"code","3a3ec743":"code","2526c507":"code","9e60b96b":"code","7f2693d3":"code","bccb36aa":"code","d3e267fb":"code","4b7c1583":"code","59eb3060":"code","25f44b01":"code","2a8c9b86":"code","325934e6":"markdown","c4096d01":"markdown","e4220b63":"markdown","d9a04498":"markdown","a96d2383":"markdown"},"source":{"689c06a4":"# Import library\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Models\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n","2717a319":"# Import the dataset\ndf = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndf.head()","f8ae7886":"# Check any null values\ndf.isna().sum()","7605581c":"# Check the value counts for output\ndf.output.value_counts()","cffd9b8b":"# visualize it\nwith plt.xkcd():\n    plt.figure(figsize=(20,4), facecolor='#f1f33f')\n    df.output.value_counts().plot(kind='barh', color=['salmon', 'lightgreen'])\n    plt.title(\"Output Value Counts\")\n    plt.xlabel(\"Count\")\n    plt.ylabel(\"Heart Attack\")\n    \n    num = df.output.value_counts()\n    \n    for index, count in enumerate(num):\n           plt.text(count, index,\n                     str(count))\n    plt.title(\"Heart Attack\")","34608200":"# Gender\ndf['sex'].value_counts()","e11da493":"# visualize it\nwith plt.xkcd():\n    plt.figure(figsize=(20,4), facecolor='#ccccff')\n    df.sex.value_counts().plot(kind='barh', color=['#ffa180', '#ffb865'])\n    plt.xlabel(\"Count\")\n    plt.ylabel(\"Sex\")\n    \n    num = df.sex.value_counts()\n    \n    for index, count in enumerate(num):\n           plt.text(count, index,\n                     str(count))\n    plt.title(\"Heart Attack\")","332d3abd":"with plt.xkcd():\n    sns.distplot(df['sex'])","8b2117b9":"\nplt.figure(figsize=(10,5))\nsns.displot(x='age', hue='sex', data=df, alpha=0.6)\nplt.title(\"Gender\")\nplt.show()","0f683df7":"# plot age with heart attack\n\nplt.figure(figsize=(10,5))\nsns.displot(x='age', hue='output', data=df, alpha=0.6)\nplt.title(\"Heart Attack Analysis with Age\")\nplt.show()","521d3b8f":"# which age group people has more chest pain\n\nplt.figure(figsize=(10,5))\nsns.displot(x='age',hue='cp',data=df,alpha=0.6)\nplt.title(\"Chest Pain With Respect to Age\")\nplt.show()","d0cfa896":"# Cholestrol\nwith plt.xkcd():\n    plt.figure(figsize=(10,5))\n    sns.kdeplot(data=df['chol'],shade=True,color='red')\n    plt.xlabel(\"Cholestrol\")\n    plt.title(\"Cholestrol\")\n","cfb4b883":"\nplt.figure(figsize=(10,5))\nsns.scatterplot( df['age'],df['chol'], hue=df['output'])\nplt.xlabel(\"Age\",)\nplt.ylabel(\"Cholestrol\")\nplt.title(\"Cholestrol Level Regarding Age\")\nplt.axhline(df['chol'].mean(), linestyle='--', color='black')\nplt.grid(True)\nplt.style.use(\"ggplot\")","fac05746":"plt.figure(figsize=(10,5))\nsns.scatterplot( df['age'],df['trtbps'], hue=df['output'])\nplt.xlabel(\"Age\",)\nplt.ylabel(\"BloodPressure\")\nplt.title(\"BloodPressure\")\nplt.axhline(df['trtbps'].mean(), linestyle='--', color='red')\nplt.grid(True)\nplt.style.use(\"ggplot\")\n","bbca071d":"plt.figure(figsize=(10,5))\nsns.displot(x='chol',hue='fbs',data=df,alpha=0.6)\nplt.title(\"Cholestrol with Fasting Blood Sugar\")","5c86bfa6":"plt.figure(figsize=(10,5))\nsns.scatterplot(df['age'],df['thalachh'],hue=df['output'])\nplt.title(\"Maximum Heart Rate\")\nplt.axhline(df['thalachh'].mean(), linestyle='--', color='green')","30b96f39":"# Histogram\nsns.distplot(a=df['chol'], label='Cholestrol', kde=False)\nsns.distplot(a=df['thalachh'], label='Heart Rate', kde=False)\nsns.distplot(a=df['trtbps'], label='Blood Pressure', kde=False)\n\nplt.legend()\nplt.xlabel(\"Level\")\nplt.title(\"Histogram \")","e545a263":"# KDE plots\n\nsns.kdeplot(data=df['chol'], label='Cholestrol', shade=True)\nsns.kdeplot(data=df['thalachh'], label='Heart Rate', shade=True)\nsns.kdeplot(data=df['trtbps'], label='Blood Pressure', shade=True)\nplt.title(\"Distribution Plot\")\nplt.xlabel(\"Level\")\n\nplt.legend()","d18635d0":"sns.lineplot(data=df)\nplt.xlabel(\"Count\")\nplt.title(\"Total Column Plot\")","d08939d1":"sns.pairplot(data=df)","815e7857":"## Correlation\nplt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot=True)\nplt.title(\"Correlation\")","9f3a1412":"# our dataset is imbalanced, balance it using SMOTE\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\n\n# split the dataset\nX = df.drop(\"output\", axis=1)\ny = df['output']\n\n# Split into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n\nprint(\"----Imbalanced Dataset----\")\ncounter = Counter(y)\nprint(counter)\n\n# transform the dataset\nover = SMOTE()\nX, y = over.fit_resample(X, y)\n\nprint(\"---Balanced Dataset----\")\ncounter = Counter(y)\nprint(counter)","22d59bfe":"## RandomForestClassifer\nnp.random.seed(42)\nmodel1 = RandomForestClassifier()\nmodel1.fit(X_train, y_train)\ny_preds1 = model1.predict(X_test)\ncv = cross_val_score(model1,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","ce747487":"# GradientBoosting Classifier\nnp.random.seed(42)\nmodel2 = GradientBoostingClassifier()\nmodel2.fit(X_train, y_train)\ny_preds2 = model2.predict(X_test)\ncv = cross_val_score(model2,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","7fe0634a":"# DecisionTreeClassifier\nnp.random.seed(42)\nmodel3 = DecisionTreeClassifier()\nmodel3.fit(X_train, y_train)\ny_preds3 = model3.predict(X_test)\ncv = cross_val_score(model3,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","13053e5b":"#KNN\nnp.random.seed(42)\nmodel4 = KNeighborsClassifier()\nmodel4.fit(X_train, y_train)\ny_preds4 = model4.predict(X_test)\ncv = cross_val_score(model4,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","51c0eab2":"#LogisticRegression\nnp.random.seed(42)\nmodel5 = LogisticRegression()\nmodel5.fit(X_train, y_train)\ny_preds5 = model5.predict(X_test)\ncv = cross_val_score(model5,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","3a3ec743":"# GaussianNB\nnp.random.seed(42)\nmodel6 = GaussianNB()\nmodel6.fit(X_train, y_train)\ny_preds6 = model6.predict(X_test)\ncv = cross_val_score(model6,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","2526c507":"# SGD\nnp.random.seed(42)\nmodel7 = SGDClassifier()\nmodel7.fit(X_train, y_train)\ny_preds7 = model7.predict(X_test)\ncv = cross_val_score(model7,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","9e60b96b":"# CatBoost\nnp.random.seed(42)\nmodel8 = CatBoostClassifier(verbose=0)\nmodel8.fit(X_train, y_train)\ny_preds8 = model8.predict(X_test)\ncv = cross_val_score(model8,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","7f2693d3":"# XGb\nnp.random.seed(42)\nmodel9 = XGBClassifier()\nmodel9.fit(X_train, y_train)\ny_pred9 = model9.predict(X_test)\ncv = cross_val_score(model9,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","bccb36aa":"# LGBM\nnp.random.seed(42)\nmodel10 = LGBMClassifier()\nmodel10.fit(X_train, y_train)\ny_preds10 = model10.predict(X_test)\ncv = cross_val_score(model4,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","d3e267fb":"# metrics with best performed model\nprint(f\"Precision score: {precision_score(y_test, y_preds5)}\")\nprint(f\"Recall Score : { recall_score(y_test, y_preds5)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds5)}\")\nprint()\nprint(\"-------------Classification Report_________\")\nprint(classification_report(y_test, y_preds5))\nprint()\nsns.heatmap(confusion_matrix(y_test, y_preds5), annot=True)\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")","4b7c1583":"grid = {\"penalty\": ['l2' ,'elasticnet'],\n       \"C\" : [0.001,0.01,0.1,1.0],\n       'solver':['liblinear', 'saga'],\n       'multi_class':['ovr','multinomial']}\n\nrandomized = RandomizedSearchCV(estimator=LogisticRegression(),\n                               param_distributions=grid,\n                               n_iter=20,\n                               cv=5,\n                               verbose=1)\nrandomized.fit(X_train, y_train)","59eb3060":"randomized.best_params_","25f44b01":"model = LogisticRegression(penalty='l2',\n                          C=1.0,\n                          solver='liblinear',\n                          multi_class='ovr')\nmodel.fit(X_train, y_train)\nmodel.score(X_test,y_test)","2a8c9b86":"# Make predictions\nmodel.predict(X_test)","325934e6":"* **Age** : Age of the patient\n\n* **Sex** : Sex of the patient\n\n* **exang**: exercise induced angina (1 = yes; 0 = no)\n\n* **ca** : number of major vessels (0-3)\n\n* **cp** : Chest Pain type chest pain type\n\n    * Value 1: typical angina\n    * Value 2: atypical angina\n    * Value 3: non-anginal pain\n    * Value 4: asymptomatic\n* **trtbps** : resting blood pressure (in mm Hg)\n\n* **chol** : cholestoral in mg\/dl fetched via BMI sensor\n\n* **fbs** : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n \n* **rest_ecg** : resting electrocardiographic results\n\n    *     Value 0: normal\n    *     Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n    *     Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n* **thalach** : maximum heart rate achieved\n\n* **output** : 0= less chance of heart attack 1= more chance of heart attack","c4096d01":"## Evaluation Metrics","e4220b63":"## Data Description","d9a04498":"## Hyperparameter Tuning","a96d2383":"## Modelling"}}