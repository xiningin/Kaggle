{"cell_type":{"b7ba3e6f":"code","bbd91b15":"code","17c0157c":"code","dff547f3":"code","2bf5b8e0":"code","aaf0dd92":"code","e2c21718":"code","df4d384a":"code","f122b4f9":"code","58ad8aa4":"code","6622fd04":"code","ad9edcac":"code","86a553fe":"code","04b306a9":"code","96e2241b":"code","b2165e5b":"code","6ebfb91d":"code","273c4acd":"code","a93be1dc":"code","3e1f0b07":"code","fad49bcf":"code","c6991eb8":"code","2802eeab":"code","0653ee40":"code","f473cda8":"code","86c3f172":"code","9b3865e7":"code","de18b3aa":"code","b4f77d5a":"code","aa4f293d":"code","08c566fe":"code","8f8fb4b0":"code","614a54d0":"code","69a4fde1":"code","7d27d1a3":"code","b100c851":"code","288e4f1c":"code","6ec165d5":"code","92da9daf":"code","7a5314bd":"code","08132e69":"code","71c700d0":"code","48a0b23a":"code","e181c504":"code","6d9c278d":"code","44052006":"code","49a79ff1":"code","dce11b97":"code","897fd5da":"code","964c2de9":"code","c014a9f4":"markdown","371071f4":"markdown","97a21321":"markdown","bfa229f2":"markdown","41767f2c":"markdown","1e06a89b":"markdown","a697b19d":"markdown","8e1236b2":"markdown","a6007491":"markdown","25ffbb72":"markdown","4c0e5aac":"markdown","3ee30851":"markdown","353308c7":"markdown","dde023d9":"markdown","b1b0db02":"markdown","0fcc8100":"markdown","ef668347":"markdown","dee447a4":"markdown","eadcb308":"markdown","a30c7364":"markdown","216a078d":"markdown","753e5c80":"markdown","12bb7936":"markdown","aaa57289":"markdown","dfc719e1":"markdown","a9629583":"markdown","dac1a283":"markdown","1b89ccb5":"markdown","78feb190":"markdown","00bf8677":"markdown","7a45cc3d":"markdown","02db790e":"markdown","6476adbb":"markdown","23cb1c9f":"markdown","bc0cf46b":"markdown","7358f6d5":"markdown","7f3089bd":"markdown","e24d3bab":"markdown","f1953347":"markdown","b3a77ba6":"markdown","63ebed8f":"markdown","8d6048af":"markdown","b7165210":"markdown","2fbaa261":"markdown","2bac5037":"markdown"},"source":{"b7ba3e6f":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nfrom plotly.subplots import make_subplots\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.preprocessing import LabelEncoder\n\n\nimport xgboost as xgb\n\npyo.init_notebook_mode()","bbd91b15":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\ndf = df.iloc[:, :-2]\ndf.head()","17c0157c":"df.loc[:2].info()","dff547f3":"df.nunique()","2bf5b8e0":"df.set_index('CLIENTNUM', inplace=True)","aaf0dd92":"df.isna().sum()","e2c21718":"(df == 'Unknown').sum()","df4d384a":"len(df[(df == 'Unknown').any(axis=1)].index)","f122b4f9":"categorical = ['Education_Level', 'Marital_Status', 'Income_Category']\n\nencoders = {}\n\nfor cat in categorical:\n    encoder = LabelEncoder()\n    encoders[cat] = encoder\n    values = df[cat]\n    known_values = values[values != 'Unknown']\n    df[cat] = pd.Series( encoder.fit_transform(known_values), index=known_values.index)\n\nimp_cat = IterativeImputer(estimator=RandomForestClassifier(),\n                           initial_strategy='most_frequent',\n                           max_iter=10, random_state=0)\n\n\ndf[categorical] = imp_cat.fit_transform(df[categorical])\n\nfor cat in categorical:\n    df[cat] = encoders[cat].inverse_transform(df[cat].astype(int))","58ad8aa4":"def make_categorical(data: pd.DataFrame, column: str, categories: list, ordered: bool = False):\n    data[column] = pd.Categorical(df[column],\n                                       categories=categories,\n                                       ordered=ordered)","6622fd04":"df['Attrition_Flag'] = df['Attrition_Flag'] == 'Attrited Customer'","ad9edcac":"make_categorical(df, 'Gender', ['F', 'M'])","86a553fe":"make_categorical(df, 'Education_Level', ['Uneducated', 'High School', 'Graduate', 'College', 'Post-Graduate', 'Doctorate'], True)","04b306a9":"make_categorical(df, 'Marital_Status', ['Married', 'Single', 'Divorced'])","96e2241b":"make_categorical(df, 'Income_Category', ['Less than $40K', '$40K - $60K', '$60K - $80K', '$80K - $120K', '$120K +'], True)","b2165e5b":"make_categorical(df, 'Card_Category', ['Blue', 'Silver', 'Gold', 'Platinum'], True)","6ebfb91d":"age_bins = [20, 40, 60, 80]\nage_labels = ['20 - 40', '40 - 60', '60 - 80']\ndf['Age_Range'] = pd.cut(df['Customer_Age'], age_bins, labels=age_labels, ordered=True)","273c4acd":"df['No_Revolving_Bal'] = df['Total_Revolving_Bal'] == 0","a93be1dc":"df['New_Customer'] = df['Months_on_book'] <= 24","3e1f0b07":"df['Optimal_Utilization'] = df['Avg_Utilization_Ratio'] <= 0.3","fad49bcf":"df.dtypes","c6991eb8":"df.describe().T","2802eeab":"df.describe(include=[bool, 'category']).T","0653ee40":"LABELS = {\n    'Age_Range': 'Age',\n    'Card_Category': 'Card',\n    'Dependent_Count': 'Dependents',\n    'Income_Category': 'Income',\n    'Months_Inactive_12_mon': 'Months Inactive',\n    'Contacts_Count_12_mon': 'Contacts',\n    'Total_Revolving_Bal': 'Revolving Bal'\n}\n\ndef format_label(label: str) -> str:\n    if label in LABELS:\n        return LABELS[label]\n    else:\n        return ' '.join(w.capitalize() for w in label.split('_'))\n\ndef format_labels(labels: list) -> dict:\n    return {l: format_label(l) for l in labels}\n\ndef group_and_count_by(data, column_names:list, reset_index:bool = True) -> pd.DataFrame:\n    index_name = data.index.name\n    _df = data.filter(column_names).reset_index().groupby(column_names).count().rename(columns={index_name: 'count'})\n    if reset_index:\n        _df = _df.reset_index()\n    return _df.sort_values(by=['count'], ascending=False)\n\ndef plot_bars_with_color(data, x:str, color:str, barmode:str = 'group', width:int=-1, height:int=-1):\n    categories = [x, color]\n    categories_orders = { v: list(data[v].cat.categories) for v in categories if data[v].dtype.name == 'category'}\n    labels = { v: format_label(v) for v in categories }\n    fig = px.bar(\n        data,\n        x=x,\n        y='count',\n        color=color,\n        barmode=barmode,\n        category_orders=categories_orders,\n        labels=format_labels(['count', x, color])\n    )\n    if(height > 0 and width > 0):\n        fig.update_layout(width=width, height=height)\n    fig.show()\n\ndef pie_plot(data, fig, row, col, top:int = -1):\n    labels = data['labels']\n    values = data['values']\n    if top > 0:\n        labels = data['labels'][:top]\n        labels.loc[labels.index.max() + 1] = \"Others\"\n        values = data['values'][:top]\n        values.loc[values.index.max() + 1] = data['values'][top:].sum()\n    fig.add_trace(\n        go.Pie(labels=labels,\n               values=values, automargin=False,\n               name=data['name']),\n        row, col\n    )\n\ndef pie_plots(plots_data:list, height:int, width:int, top:int = -1):\n    list_size = len(plots_data)\n    rows = int(list_size \/ 2)\n    if list_size % 2 == 1:\n        rows = rows + 1\n    fig = make_subplots(\n        rows=rows,\n        cols=2,\n        specs= np.full((rows, 2), {\"type\": \"domain\"}).tolist(),\n        vertical_spacing = 0.05,\n        subplot_titles=[plot_data['name'] for plot_data in plots_data]\n    )\n    for index, plot_data in enumerate(plots_data):\n        pie_plot(plot_data, fig, 1 + int(index \/ 2), 1 + (index % 2), top)\n    \n    fig.update_layout(\n        width=width, \n        height=height\n    )\n    fig.show()","f473cda8":"columns = ['Customer_Age', 'Gender', 'Dependent_count', 'Education_Level', 'Marital_Status']\nfig = make_subplots(rows=int(len(columns)\/2) + len(columns) % 2, cols= 2)\n\nfor index, column in enumerate(columns):\n    fig.append_trace(\n        go.Histogram(x=df[column], name= format_label(column)),\n        1 + int(index \/ 2), 1 + (index % 2))\n    \nfig.update_layout(height=900, width=900)\nfig.show()","86c3f172":"columns = ['Education_Level', 'Gender', 'Income_Category', 'Marital_Status']\nlabels = format_labels(columns)\n\ncustomers = group_and_count_by(df, columns).dropna()\nfig = px.bar(customers,\n             x='Gender',\n             y='count',\n             color='Marital_Status',\n             category_orders={\n                 'Income_Category': list(df['Income_Category'].cat.categories),\n                 'Education_Level': list(df['Education_Level'].cat.categories)\n             },\n             labels=labels,\n             facet_row='Education_Level',\n             facet_col='Income_Category')\nfig.update_layout(width=900,\n                  height=1200,\n                  legend=dict(\n                    orientation=\"h\",\n                    yanchor=\"bottom\",\n                    xanchor=\"center\",\n                    x=0.5\n                  )\n)\nfig.update_xaxes(automargin=True)\nfig.show()","9b3865e7":"fig = px.sunburst(customers,\n                  path=columns,\n                  values='count'\n)\nfig.update_layout(width=900,\n                  height=1200\n)\nfig.show()","de18b3aa":"fig = px.parallel_categories(\n    customers,\n    dimensions=columns,\n                color='count', color_continuous_scale='deep',\n                labels=labels)\n\nfig.update_layout(width=900,\n                  height=900\n)\n\nfig.show()","b4f77d5a":"df_by_age_and_gender = group_and_count_by(df, ['Age_Range', 'Gender'])\nplot_bars_with_color(df_by_age_and_gender, 'Age_Range', 'Gender')\n","aa4f293d":"df_by_education_and_age = group_and_count_by(df, ['Age_Range', 'Education_Level'])\ncrosstab = pd.crosstab(df['Age_Range'], df['Education_Level'])\ncrosstab","08c566fe":"fig = px.imshow(crosstab, color_continuous_scale='Viridis')\nfig.show()","8f8fb4b0":"df_by_income_and_age = group_and_count_by(df, ['Age_Range', 'Income_Category'])\ncrosstab = pd.crosstab(df['Age_Range'], df['Income_Category'])\nfig = px.imshow(crosstab, color_continuous_scale='Viridis')\nfig.show()","614a54d0":"x = 'Dependent_count'\ny = 'count'\ncolor = 'Marital_Status'\n\ndf_by_dependents_and_status = group_and_count_by(df, [x, color])\n# plot_bars_with_color(df_by_dependents_and_status, 'Dependent_count', 'Marital_Status')\nfig = px.scatter(\n    df_by_dependents_and_status.sort_values(by=[x]),\n    x=x,\n    y=y,\n    color=color,\n    size=y,\n    labels=format_labels([x, y, color])\n)\nfig.show()","69a4fde1":"relevant = (df['Income_Category'] == 'Less than $40K') & ((df['Dependent_count'] == 2) | (df['Dependent_count'] == 3)) & (df['Age_Range'] == '40 - 60') & (df['Education_Level'] == 'Graduate')\nrelevant.name = 'Relevancy'\npx.histogram(relevant, color='value')","7d27d1a3":"columns = ['Attrition_Flag', 'Card_Category', 'Months_on_book', 'Total_Relationship_Count', 'Credit_Limit']\nfig = make_subplots(rows=int(len(columns)\/2) + len(columns) % 2, cols= 2)\n\nfor index, column in enumerate(columns):\n    fig.append_trace(\n        go.Histogram(x=df[column], name= format_label(column)),\n        1 + int(index \/ 2), 1 + (index % 2))\n    \nfig.update_layout(height=900, width=900)\nfig.show()","b100c851":"x = 'Income_Category'\ny = 'count'\ncolor = 'Card_Category'\n\ndata = group_and_count_by(df, [x, color])\nplot_bars_with_color(data, x, color, 'stack', 900, 600)","288e4f1c":"pd.crosstab(df[x], df[color])","6ec165d5":"plots_data = []\nfor income in data['Income_Category'].cat.categories:\n    plots_data.append({\n            'labels': data['Card_Category'].cat.categories.values,\n            'values': (data[data['Income_Category'] == income])['count'],\n            'name': income\n    })\n\npie_plots(plots_data, 800, 800)","92da9daf":"trace0 = go.Histogram(x=df[df['Attrition_Flag'] == False]['Months_on_book'], name='Accounts Created')\ntrace1 = go.Histogram(x=df[df['Attrition_Flag'] == True]['Months_on_book'], name='Accounts Closed')\nfig = go.Figure()\nfig.add_trace(trace0)\nfig.add_trace(trace1)\nfig.update_layout(barmode='overlay')\nfig.show()","7a5314bd":"fig = px.line(group_and_count_by(df[df['Attrition_Flag'] == False], ['Months_on_book', 'Card_Category']).sort_values(by=['Card_Category', 'Months_on_book']), x=\"Months_on_book\", y='count', color='Card_Category')\nfig.update_layout(\n    height=600,\n    width=900\n)\nfig.show()","08132e69":"fig = px.box(df, y='Credit_Limit', color='Card_Category')\nfig.show()","71c700d0":"columns = ['Total_Relationship_Count', 'Income_Category']\ndf_products_by_income = group_and_count_by(df, columns)\nplot_bars_with_color(df_products_by_income,\n                    x='Total_Relationship_Count', color='Income_Category')","48a0b23a":"fig = px.box(df[df['Attrition_Flag'] == True], y='Total_Revolving_Bal', color='Card_Category')\nfig.show()","e181c504":"columns = ['Months_Inactive_12_mon', 'Contacts_Count_12_mon', 'Total_Revolving_Bal', \n           'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', \n           'Avg_Utilization_Ratio', 'Avg_Open_To_Buy']\nfig = make_subplots(rows=int(len(columns)\/2) + len(columns) % 2, cols= 2)\n\nfor index, column in enumerate(columns):\n    fig.append_trace(\n        go.Histogram(x=df[column], name= format_label(column)),\n        1 + int(index \/ 2), 1 + (index % 2))\n\nfig.update_layout(height=1200, width=900)\nfig.show()","6d9c278d":"fig = px.scatter(df[df['New_Customer'] == True], x='Credit_Limit', y='Avg_Utilization_Ratio', color='Card_Category')\nfig.show()","44052006":"fig = px.scatter(df[df['New_Customer'] == True], x='Total_Ct_Chng_Q4_Q1', y='Total_Amt_Chng_Q4_Q1', color='Card_Category', labels=format_labels(['Total_Ct_Chng_Q4_Q1', 'Total_Amt_Chng_Q4_Q1']))\nfig.show()","49a79ff1":"fig = px.scatter(df, x='Total_Ct_Chng_Q4_Q1', y='Total_Amt_Chng_Q4_Q1', color='New_Customer', labels=format_labels(['Total_Ct_Chng_Q4_Q1', 'Total_Amt_Chng_Q4_Q1', 'New_Customer']))\nfig.show()","dce11b97":"fig = px.density_contour(df, x=\"Total_Revolving_Bal\", y=\"Credit_Limit\", color=\"Gender\")\nfig.show()","897fd5da":"fig = px.scatter(df[df['Attrition_Flag'] == False], x='Total_Trans_Ct', y='Total_Trans_Amt', color='New_Customer')\nfig.show()","964c2de9":"fig = px.strip(\n    df[df['Attrition_Flag'] == True].sort_values(by=['Contacts_Count_12_mon']), \n    x=\"Total_Revolving_Bal\", \n    y=\"Months_Inactive_12_mon\", \n    color=\"Optimal_Utilization\", \n    facet_col=\"Contacts_Count_12_mon\",\n    labels=format_labels(['Total_Revolving_Bal', 'Months_Inactive_12_mon', 'Optimal_Utilization', 'Contacts_Count_12_mon'])\n)\nfig.show()","c014a9f4":"### Income Category\n\nI add order to `Income_Category`.","371071f4":"### Gender\n\nIt's not really necessary, but I'm making the `Gender` column categorical because why not.","97a21321":"### Revolving Balance\n\nI add a flag for detecting those customers that haven't paid their balance in full.","bfa229f2":"## Transactions\n\nWe can take the information related to transactions (counts and amounts) to further analyze spending habits. The chart shows 3 groups. In each group the amount spent doesn't change much, regardless of the number of transactions. Most of the New Customers seem to fall under the lower group: those who operate and spend less.","41767f2c":"With the previous plot we learn that most of the customers have 2 or 3 dependents, which probably speaks of families\nwith a couple of kids.\n\n\n# Conlusion on Customers\n\nHaving created different plots for customers, we can conclude that a good number seem to be in their forties and fifties, with only a high-school degree, low incomes and 2 or 3 people in their care.","1e06a89b":"The plot clearly indicates that, although Blue Cards tend to impose lower extraction limits, the other categories offer pretty much the same limits.\n\n## Products held by Income\n\nThe following chart is used to check if there's any relationship between the number of products held by the customers and their income. The idea is to determine if people that earn more use more products. Unfortunately, there doesn't seem to be any relationship between these two columns (we could always calculate the correlation, but I won't bother).","a697b19d":"The previous plot shows how expenditure has, in general, reduce in both, total transactions, and total spent. This speaks of customer using their cards for about the same kind of purchases, but not that frequently as the previous year.\n\nWhen compared against the rest of the customers, we see that the New Customers seem to be more conservative (i.e: they are largely piled up together in the same region.","8e1236b2":"### Active Customer (`Attrition_Flag`)\n\nI convert the values for `Attrition_Flag` into booleans.","a6007491":"# Loading the data","25ffbb72":"Obviously, a univariate analysis doesn't tell us anything about the relationship between features.\n\n## The big picture\n\nWith the following, I plot the number of customers grouped by income, education, marital status and gender.\nGiven the number of subplots, the information in each of them might not be very clear, and that's fine.\nAt this point I'm only interested in getting some insight on the demographics.\n\nNote: if you are not familiar with Plotly, know that you can click on the different legends at the bottom of the plot to\nhide individual groups. You can also hover over the different bars to get a tooltip with the information for that\nparticular bar.","4c0e5aac":"### Types\n\nHaving formatted the columns, added all the additional information, and imputed the missing values, we can begin\nanalysing the data. I start by printing the data types to make sure everything looks good.","3ee30851":"\n# Basic Information\n\nI begin by printing some basic information before doing any real analysis.\n\n## Non nulls and types","353308c7":"This tells us that we have three columns that need some work. They are: `Education_Level`, `Marital_Status` and `Income_Category`.\n\nRows with an `Unknown` field amount to 3046 (a third of the whole dataset), as we can see by executing the following:","dde023d9":"Given the number of records affected by this -- and the nature of the columns -- none of the more standard techniques for\ndealing with missing data seem appropriate. However, we can use an `IterativeImputter` from\nthe `scikit-learn` library, to replace the `Unknown` values with estimates produced by a model\n(a `RandomForestClassifier` in this case).","b1b0db02":"The pie plots above confirm that regardless of income:\n- Blue cards are about 90% of the total.\n- Silver cards are around 5% ~ 6%.\n- Gold cards account for only 1% or 2% of the total cards.\n\n## Months on Book\n\nI now turn to study how accounts have been opened and closed through time.","0fcc8100":"The preceeding plot shows how clients tend not to accumulate much debt, especially those with the Platinum Card. \n\n# Account Activity","ef668347":"### Marital Status\n\nThis is another one of those columns that I don't really have to make Categorical, but I do it for the sake of expressiveness.","dee447a4":"## Adding additional columns\n\nNext, I aggregate the dataset with additional columns that will help extract some useful information.\n\n### Age Range\n\nCustomers vary in age from 26 to 73. I create a new column with 20-year bins.","eadcb308":"## Card Category by Income Category\n\nOne of the first interesting we can look at while studying customers and accounts is to see what category of cards customers with different incomes choose most frequently.","a30c7364":"### Card Category\n\nI also add order to `Card_Category`.","216a078d":"## Credit limits and debts by Gender\n\nWith the next plot we can see how men tend to have higher credit limits.","753e5c80":"## Customers by Education and Age","12bb7936":"### Average Utilization Ratio\n\nSupposedly, keeping your utilization ratio below 30% helps to improve your credit score. Therefore, I added a column\nfor flagging customers that keep their utilization ratio below that threshold.","aaa57289":"## Using `CLIENTNUM` as index\n\nBy looking at the number of unique values, we can see that `CLIENTNUM` doesn't contain duplicates. Moreover,\nbeing a client identifier, it's the perfect choice as index.","dfc719e1":"## Credit Limits by Card Category\n\nAnother interesting information we can extract is how the credit limits are affected by the card category.","a9629583":"## Contact made to people with debt (and closed accounts)\n\nThe last plot tries presents how the bank contacts customers that closed their account and are no longer active. I use the `Optimal_Utilization` flag for the colors. Thus, we can see how the bank tends to contact bad customers repeatdely after 2 months of inactivity. This chart also shows how even some customers who don't use their cards much (less than 30% of the available credit) default their debt too.","dac1a283":"Yet another way of visualizing the same information can be done through a parallel categories plot, which allows us to detect\nthe most relevant combination of attributes really easy.","1b89ccb5":"### New Customers\n\nI set another flag for detecting those customers that opened their account 2 years ago or less.","78feb190":"\n## Spending habits for new customers (Q4 over Q1)\n\nLet's now take a closer look at \"new customers\" (those that joined the bank less than 2 years ago) and see how much of their credit they are spending.\n\nThe next chart makes evident that those customers with cards with lower credit limit use almot all of their credit, while all clients with more than $13K in credit spend less than 20% of that amount. Having this low utilization ratio increases these customers credit score.","00bf8677":"### Education Level\n\nI add order to the `Education_Level` column.","7a45cc3d":"# Data Transformation\n\n## Deleting unnecessary columns\n\nThe last two columns in the original dataset have to be deleted. I've already done to get a cleaner output from the last two commands.","02db790e":"However, this is misleading. Some columns contain cells with `Unknown`. We can count the records affected by this situation\nwith:","6476adbb":"The chart above shows that clearly, something happened 36 months ago. Probably there was a massive ad campaign. There was, also, a significant number of accounts closed that same month -- maybe some people opened their account and quickly changed their mind.\n\nWith the next chart, I visualize how new customers have joined the bank historically (segregated by card category). The chart reveals the huge impact of the new Blue Cards 36 months ago.","23cb1c9f":"As we can see, for all the different income categories, the card that predominates is the Blue Card. One interesting I note is that the proportion of higher tier cards doesn't seem to increase with the income category. To further analyze this, we can plot a series of pie charts.","bc0cf46b":"It's important to note that we need to keep the `LabelEncoder` instances, so we can call the `inverse_transform` on them\nafter imputing the `Unknown` values, converting the values from numeric back to string.\n\n## Formatting Columns and Enforcing Types\n\nI proceed to format columns with the appropriate types.","7358f6d5":"With the heatmap above we can see that most customers seem to be between their forties and fifties, with incomes heavily skewed toward the lower categories.\n\n## Customers by Dependent Count and Marital Status\n","7f3089bd":"From the previous plot, it's clear that the Graduates between 40 and 60 years old are, by far, the most frequent customers.\n\n\n## Customers by Age and Income\n\nSimilar to the previous plot, we can check the income by age:","e24d3bab":"\n# Accounts","f1953347":"## Duplicated Records\n\nHaving detected that there are no duplicated clients -- `CLIENTNUM` (which is the only column that identifies clients)\nhas nothing but unique values -- there's no need for us to check for duplicates.\n\n## Missing Data Analysis\n\nAs anticipated by the output of the `info` method, none of the columns contain missing data. You can double-check\nthis by running:","b3a77ba6":"# Descriptive Statistics\n\nNow, let's take a look at some statistics for our data.","63ebed8f":"These columns can be split into:\n- Customer Information: `CLIENTNUM`, `Customer_Age`, `Gender`, `Dependent_count`, `Education_Level`, `Marital Status`.\n- Account Information: `Attrition_Flag`, `Card_Category`, `Month_on_book`, `Total_Relationship_Count`, `Credit_Limit`, `Avg_Open_To_Buy`.\n- Activity Information: `Months_Inactive_12_mon`, `Contacts_Count_12_mon`, `Total_Revolving_Bal`, `Total_Amt_Chng_Q4_Q1`, `Total_Trans_Amt`, `Total_Trans_Ct`, `Total_Ct_Chng_Q4_Q1`, `Avg_Utilization_Ratio`.\n\nI ignored the last two, as they are not meaningful to us.\n\n## Unique Counts","8d6048af":"## Customers that left the bank owing money","b7165210":"With the previous plot we can see some interesting facts:\n\n- There are no women customers with education higher than \"College\" and incomes above $60K.\n- Of the total customers, a good number are women in the lowest income category.\n- Most men are on the higher income categories.\n\nThe same information can be plotted using `sunburst`. While having multiple `bar charts` is useful for looking at individual groups, `sunburts` help see the big picture.\n\n**Note**: if you are not familiar with Plotly's sunburst, know that you can click on individual sections to change the aggregation level. ","2fbaa261":"# Customers\n\nI start by looking at the information available regarding customers. A deep understanding of this data can help the bank launch better ads campaigns and advertising.\n\n## Univariate Analysis\n\nWe can begin by plotting a histogram for each customer-related column, to see how the values are distributed.","2bac5037":"Although the previous chart might not look like much, it tells that out of the 540 possible possibilities (3 age bins, 6 total dependents values, 6 education levels, 5 income categories), the one we selected accounts for 8% of the customers."}}