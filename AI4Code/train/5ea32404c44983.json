{"cell_type":{"08ba17a0":"code","c2888b50":"code","68335c47":"code","ff19a83b":"code","c1a91590":"code","d48a40b3":"code","9839dad1":"code","e4ca9517":"code","51c278ba":"code","099ba5a0":"code","20ff0600":"code","201056c4":"code","6cb5417e":"code","04f37fb5":"code","554f23d8":"code","775d88bb":"code","36c2c94c":"code","888f4b73":"code","068172a0":"code","172c3af4":"code","14942cd1":"code","6d01fc26":"code","660df365":"code","c40af746":"code","ab8d7d16":"code","48ea1315":"markdown","221928c6":"markdown","eaf01abc":"markdown","169f5d55":"markdown","31320212":"markdown","4a4e807b":"markdown","d9542fad":"markdown","13fb1f44":"markdown","6ea4fa44":"markdown","ba3453a2":"markdown","0f0bf67d":"markdown","53f5d417":"markdown","8539fa7a":"markdown","cfba61be":"markdown","1e44a9bb":"markdown","87ebfe64":"markdown","ae5f4516":"markdown","c184fbf0":"markdown"},"source":{"08ba17a0":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c2888b50":"# reference : https:\/\/www.kaggle.com\/subinium\/dark-mode-visualization-apple-version\nfrom cycler import cycler\n\nmpl.rcParams['figure.dpi'] = 120\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False\n# mpl.rcParams['font.family'] = 'serif'\n\nraw_light_palette = [\n    (0, 122, 255), # Blue\n    (255, 149, 0), # Orange\n    (52, 199, 89), # Green\n    (255, 59, 48), # Red\n    (175, 82, 222),# Purple\n    (255, 45, 85), # Pink\n    (88, 86, 214), # Indigo\n    (90, 200, 250),# Teal\n    (255, 204, 0)  # Yellow\n]\n\nlight_palette = np.array(raw_light_palette)\/255\n\n\nmpl.rcParams['axes.prop_cycle'] = cycler('color',light_palette)\n\nsurvived_palette = ['#dddddd', mpl.colors.to_hex(light_palette[2])]\nsex_palette = [light_palette[0], light_palette[3]]","68335c47":"# https:\/\/stackoverflow.com\/questions\/38783027\/jupyter-notebook-display-two-pandas-tables-side-by-side\nfrom IPython.display import display, HTML\n\nCSS = \"\"\"\n.output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","ff19a83b":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\nprint('train shape : ', train.shape)\nprint('test shape : ', test.shape)\ntrain.head()","c1a91590":"train['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])","d48a40b3":"train.describe(include='O')","9839dad1":"for col in ['country', 'store', 'product']:\n    print(col, train[col].unique())","e4ca9517":"print('train date duration : ', train['date'].min(), train['date'].max())\nprint('test date duration : ', test['date'].min(), test['date'].max())","51c278ba":"for col in ['country', 'store', 'product']:\n    display(pd.DataFrame(train[col].value_counts()))","099ba5a0":"for col in ['country', 'store', 'product']:\n    display(pd.DataFrame(test[col].value_counts()))","20ff0600":"train_date = train.set_index('date').pivot(columns=['country', 'store', 'product'], values='num_sold')\ntrain_date.head()","201056c4":"train_month = train.set_index('date').groupby([pd.Grouper(freq='M'), 'country', 'store', 'product'])['num_sold'].mean().unstack([1, 2, 3])\ntrain_month_country = train.set_index('date').groupby([pd.Grouper(freq='M'), 'country'])['num_sold'].mean().unstack()\ntrain_month.head()","6cb5417e":"fig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_monthly = train.set_index('date').groupby([pd.Grouper(freq='M')])[['num_sold']].mean()\n\nsns.lineplot(x=\"date\", y=\"num_sold\", data=train, ax=ax, label='daily')\nsns.lineplot(x=\"date\", y=\"num_sold\", data=train_monthly, ax=ax, label='monthly mean', color='black')\nax.set_title('Monthly Trend', fontsize=20, fontweight='bold', loc='left', y=1.03)\nax.grid(alpha=0.5)\nax.legend()\nplt.show()","04f37fb5":"country_daily = train.groupby(['date','country'])[['num_sold']].sum().reset_index(level=[0,1])\nfor country in train['country'].unique():\n    display(country_daily[country_daily['country']==country].sort_values(by=['num_sold'], ascending=False).head(30))","554f23d8":"fig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_monthly_country = train.set_index('date').groupby([pd.Grouper(freq='M'),'country'])[['num_sold']].mean()\nsns.lineplot(x=\"date\", y='num_sold', hue='country', data=train_monthly_country, ax=ax)\n\nax.set_ylabel('num_sold')\nax.set_title('Monthly Trend by Country', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","775d88bb":"train['dayofweek'] = train['date'].dt.dayofweek\ntest['dayofweek'] = test['date'].dt.dayofweek","36c2c94c":"fig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_dayofweek = train.set_index('date').groupby([pd.Grouper(freq='M'), 'dayofweek'])[['num_sold']].mean()\n\nsns.lineplot(x=\"date\", y='num_sold', hue='dayofweek', data=train_dayofweek, ax=ax)\nax.set_title('Trend by day of the week', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","888f4b73":"train['weekend'] = train['dayofweek'].apply(lambda x : x >= 5)\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_weekend = train.set_index('date').groupby([pd.Grouper(freq='M'), 'weekend'])[['num_sold']].mean()\nsns.lineplot(x=\"date\", y=\"num_sold\", hue='weekend', data=train_weekend, ax=ax)\nax.set_title('Weekend vs. Weekday Trend Comparison', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","068172a0":"fig, ax = plt.subplots(figsize=(12, 9))\ncountry_dayofweek = pd.pivot_table(train, index='country', columns='dayofweek', values='num_sold', aggfunc=np.mean)\ncountry_dayofweek = pd.DataFrame(country_dayofweek.divide(country_dayofweek.sum(axis=1), axis=0).unstack()).reset_index(level=[0,1])\ncountry_dayofweek.rename(columns={0:'num_sold'}, inplace=True)\n# country_dayofweek.reset_index(level=[0,1])\nsns.barplot(x='dayofweek', y='num_sold', hue='country',data=country_dayofweek, ax=ax)\nax.grid(axis='y',alpha=0.5, )\nax.set_xticklabels(['MON', 'TUE', 'WED','THU','FRI','SAT','SUN'])\nax.set_title('Percentage by day of the week by country', fontsize=15, fontweight='bold', loc='left')\nplt.show()","172c3af4":"country_product = pd.pivot_table(train, index='country', columns='product', values='num_sold', aggfunc=np.mean)\ncountry_product.divide(country_product.sum(axis=1), axis=0)","14942cd1":"country_product_dayofweek = pd.pivot_table(train, index='dayofweek', columns='product', values='num_sold', aggfunc=np.mean)\ncountry_product_dayofweek.divide(country_product_dayofweek.sum(axis=1), axis=0)","6d01fc26":"!pip install -qqq bar_chart_race","660df365":"import bar_chart_race as bcr","c40af746":"bcr.bar_chart_race(df=train_month_country,\n                   n_bars=3,\n                   period_length=800,\n                   filename=None)","ab8d7d16":"bcr.bar_chart_race(df=train_month,\n                   n_bars=9,\n                   period_length=800,\n                   filename=None)","48ea1315":"Train dataset is data for 3 years from 2015 to 2018, and test dataset is data for 1 year from 2019.","221928c6":"## Simple Stats\n\nThere are a total of 3 columns: country, store, and product.","eaf01abc":"As a result of counting for each column, it appears to be a (very) balanced dataset.","169f5d55":"## Preprocessing & Visualization\n\nTime series data needs to be preprocessed for data analysis, feature engineering, visualization, etc.\n\n### Pivot Table (time)\n\n- by date","31320212":"## Animation(Bar Chart Race)","4a4e807b":"### Day of Week\n\nTime-series data, such as product sales, often have different distributions on weekends and weekdays. Using the day of the week as a feature is often very effective.","d9542fad":"Grouping by month makes it easier to see overall trends. You can see the trend of peaking at the beginning and end of the year and decreasing before and after.","13fb1f44":"### Bar Chart Race (Country)\n\nFor time series data, you can use bar chart races for fun.","6ea4fa44":"The date column type is text. Convert to datetime type for easy handling in pandas.","ba3453a2":"You can check the following to see if there is a preference for each day of week, and there does not seem to be a significant difference.","0f0bf67d":"- by month\n    - For grouping by month, I recommend using pandas' latest feature grouper.","53f5d417":"### Pivot (etc)\n\n- product ratio by country\n\nYou can check the following to see if there is a preference for each country, and there does not seem to be a significant difference.","8539fa7a":"## [TPS-Jan] Happy New Year \ud83c\udf05\n\n> Thank you to Kaggle management for conducting TPS in 2022 following 2021!\n\n**Keywords**\n\n- Time Series \n- Regression\n    - targe value : `num_sold`","cfba61be":"### Bar Chart Race (Detail)","1e44a9bb":"## Import Library & Dataset","87ebfe64":"The following is a comparison by creating a weekend column in more detail.","ae5f4516":"Here's a visualization of the average of the days of the week by month to see the weekend trends:\n\n**fyi**\n\n- `0` : mon\n- `1` : tue\n- `2` : wed\n- `3` : thu\n- `4` : fri\n- `5` : sat\n- `6` : sun","c184fbf0":"It can be seen that even Friday has a higher percentage compared to other days."}}