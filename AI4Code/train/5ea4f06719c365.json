{"cell_type":{"15c3759c":"code","2dfd9b9c":"code","ecaa1ebd":"code","42a28454":"code","1fd9ef8e":"code","202e8b71":"code","89e876c6":"code","216b3fe9":"code","ec7f6ae8":"code","61e005d5":"code","f719cec0":"code","0988e65d":"code","cf51c4cc":"code","4c75cdd5":"code","36682bee":"code","e6647ae7":"code","4c215fc9":"code","388b0a7c":"markdown","2ec6c2f1":"markdown","ef914db3":"markdown"},"source":{"15c3759c":"from __future__ import absolute_import, division, print_function\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PIL import Image\nimport os\ndir=\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\"","2dfd9b9c":"from sklearn.datasets import load_files\nimport numpy as np\n\ndef load_dataset(path):\n    data = load_files(path)\n    files = np.array(data['filenames'])\n    targets = np.array(data['target'])\n    target_labels = np.array(data['target_names'])\n    return files,targets,target_labels\n    \n_,_, labels_name = load_dataset(dir)\nprint('Loading complete!')\n\n\n","ecaa1ebd":"infected = os.listdir('..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Parasitized\/') \nuninfected = os.listdir('..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Uninfected\/')","42a28454":"data = []\nlabels = []\n\nfor i in infected:\n    try:\n        image = cv2.imread(dir+\"\/Parasitized\/\"+i)\n        image_array = Image.fromarray(image , 'RGB')\n        resize_img = image_array.resize((50 , 50))\n        data.append(np.array(resize_img))\n        labels.append(1)\n        \n    except AttributeError:\n        print('')\n    \nfor u in uninfected:\n    try:\n        \n        image = cv2.imread(dir+\"\/Uninfected\/\"+u)\n        image_array = Image.fromarray(image , 'RGB')\n        resize_img = image_array.resize((50 , 50))\n        data.append(np.array(resize_img))\n        labels.append(0)\n    except AttributeError:\n        print('')","1fd9ef8e":"images = np.array(data)\nlabels = np.array(labels)\n\nnp.save('Cells' , images)\nnp.save('Labels' , labels)","202e8b71":"print('Cells : {} | labels : {}'.format(images.shape , labels.shape))","89e876c6":"plt.figure(1 , figsize = (16 , 10))\nn = 0 \nfor i in range(6):\n    n += 1 \n    r = np.random.randint(0 , images.shape[0] , 1)\n    plt.subplot(2 , 3, n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.imshow(images[r[0]])\n    plt.title('{} '.format( 'Parasitized' if labels[r[0]] == 1 else  'Unifected' ,\n                               labels[r[0]]) )\n    plt.xticks([]) , plt.yticks([])\n    \nplt.show()","216b3fe9":"images = images.astype(np.float32)\nlabels = labels.astype(np.int32)\nimages = images\/255","ec7f6ae8":"from sklearn.model_selection import train_test_split\n\ntrain_x , x , train_y , y = train_test_split(images , labels , \n                                            test_size = 0.2 ,\n                                            random_state = 111)\n\neval_x , test_x , eval_y , test_y = train_test_split(x , y , \n                                                    test_size = 0.5 , \n                                                    random_state = 111)","61e005d5":"print('train data shape {} ,eval data shape {} , test data shape {}'.format(train_x.shape,\n                                                                           eval_x.shape ,\n                                                                           test_x.shape))","f719cec0":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(50, 50, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.summary()","0988e65d":"model.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\nprint('Compiled!')","cf51c4cc":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy') > 0.987 ):\n            print(\"\\nReached 98.7% accuracy so cancelling training!\")\n            self.model.stop_training = True ","4c75cdd5":"callbacks=myCallback()\nhistory = model.fit(train_x,train_y,\n        batch_size = 80,\n        epochs=50,\n        validation_data=(eval_x, eval_y),\n        callbacks = callbacks,\n        verbose=1, shuffle=True)","36682bee":"# evaluate and print test accuracy\nscore = model.evaluate(test_x, test_y, verbose=0)\nprint('\\n', 'Test accuracy:', score[1])","e6647ae7":"import matplotlib.pyplot as plt \nplt.figure(1)  \n# summarize history for accuracy  \nplt.subplot(211)  \nplt.plot(history.history['accuracy'])  \nplt.plot(history.history['val_accuracy'])  \nplt.title('model accuracy')  \nplt.ylabel('accuracy')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'test'], loc='upper left')  \n   \n # summarize history for loss  \n   \nplt.subplot(212)  \nplt.plot(history.history['loss'])  \nplt.plot(history.history['val_loss'])  \nplt.title('model loss')  \nplt.ylabel('loss')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'test'], loc='upper left')  \nplt.show()","4c215fc9":"\ny_pred = model.predict(test_x)\n\n# plot a random sample of test images, their predicted labels, and ground truth\nfig = plt.figure(figsize=(16, 9))\nfor i, idx in enumerate(np.random.choice(test_x.shape[0], size=6, replace=False)):\n    ax = fig.add_subplot(2, 3, i + 1, xticks=[], yticks=[])\n    ax.imshow(np.squeeze(test_x[idx]))\n    pred_idx = np.argmax(y_pred[idx])\n    true_idx = test_y[idx]\n    ax.set_title(\"{} ({})\".format(labels_name[pred_idx], labels_name[true_idx]),\n                 color=(\"green\" if pred_idx == true_idx else \"red\"))","388b0a7c":"# Dataset Loading","2ec6c2f1":"## Visualization a potion of sample training dataset","ef914db3":"# Spliting dataset into train, test , validation dataset"}}