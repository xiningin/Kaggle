{"cell_type":{"e4bef7da":"code","40c6e6a1":"code","9ab630f9":"code","4d5d865b":"code","72bff41b":"code","78a85452":"code","411ad8f6":"code","ee86813b":"code","daad518c":"code","8daf22ef":"code","d63a1408":"code","2138d654":"code","788022eb":"code","86f0b386":"code","044adfb0":"code","1c341c97":"code","4d7f9ab4":"code","07ae930f":"code","86089031":"code","4aad192c":"code","293e18aa":"code","1c7ec4fe":"code","e20eb057":"code","20cf8915":"code","78e412af":"code","c65ba467":"code","f8bef2a7":"code","e0d5e4bb":"code","b56a7274":"code","11b28f25":"code","8ad322c9":"code","a25ba14e":"code","9b20c834":"code","6ad7106e":"code","e680149e":"code","89bf4ff1":"markdown","bcbc849a":"markdown","e500b6d6":"markdown","02dc5473":"markdown","c3ea1964":"markdown","802a3878":"markdown","993e0080":"markdown","2966438f":"markdown","6f51bc1d":"markdown","f44d02d1":"markdown","b958ccd3":"markdown","f88f9c22":"markdown","8bc5b605":"markdown","6eeb7b50":"markdown","4d3f72cd":"markdown","dcd68ef9":"markdown","271f149f":"markdown","ff1fdf08":"markdown"},"source":{"e4bef7da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40c6e6a1":"data=pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","9ab630f9":"data.head()","4d5d865b":"data.info() ","72bff41b":"data.corr()","78a85452":"f,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(),annot=True,linewidths=.4, fmt='.2f',ax=ax)\n\n#f,ax=plt.subplots(figsize=(15,15))\n#sns.heatmap(data.corr(),annot=True,linewidths=.5,cmap=\"YlGnBu\", fmt='.1f',ax=ax)","411ad8f6":"data.columns","ee86813b":"#line plot\nplt.plot(data.year,data.population, color=\"red\", label=\"suicide\")\n#data.year is x label,data.population is y label\n#if one label not specified, x label will be index of the data frame automatically. \n\nplt.xlabel(\"year\")\nplt.ylabel(\"population\")\nplt.title(\"year-population\")\nplt.legend()\n\nplt.show","daad518c":"#another line plot\ndata.year.plot(kind = 'line', color = 'g',label = 'year',linewidth=1,alpha = 0.8,grid = True,linestyle = ':')\n#alpha =opacity\nplt.legend(loc='upper right') #loc= location\nplt.ylabel('years')\nplt.xlabel('index')\nplt.title('Line Plot-year') #figure title\nplt.show()\n#if you want, you can add different features with different color lines or linestyles","8daf22ef":"#scatter plot\ndata.plot(kind='scatter', x='year', y='population',alpha = 0.4,color = 'red')\n#also you can do like this, it's the same\n#plt.scatter(data.year,data.population,color=\"red\",label=\"scatter\",alpha = 0.4)\nplt.xlabel('year')\nplt.ylabel('population')\nplt.title('Scatter Plot')\nplt.show()","d63a1408":"#histogram\ndata.population.plot(kind='hist',bins=30,figsize=(5,5),color='black')\n#bins= number of bar in figure\n#or you can do like this\n#plt.hist(data.population, bins=30,color='black')\nplt.show()","2138d654":"#subplot\nplt.subplot(2,1,1)\nplt.plot(data.year, color=\"red\",label=\"year\")\nplt.ylabel(\"year\")\n# there are 2 columns. Second row of first column\nplt.subplot(2,1,2) \nplt.plot(data.population,color=\"green\",label=\"population\")\nplt.ylabel(\"population\")","788022eb":"plt.clf() #cleans the plot.","86f0b386":"data.head()","044adfb0":"series=data['suicides_no']\ndataFrame= data[['suicides_no']]\n\nprint(\"dataFrame\" ,type(dataFrame))\n\nprint(\"series\" ,type(series))","1c341c97":"print(dataFrame)\nprint(\"--------\")\nprint(series)","4d7f9ab4":"data[(data['suicides_no']>9000) & (data['year']>2010 )]\n#show suicides_no greater than 9000 and  year greater than 2010 from the data\n\n#y=data['year']>2010\n#s=data['suicides_no']>9000\n#data[s&y]","07ae930f":"print(data['suicides_no'][0])\nprint(data['suicides_no'][1])\nprint(data['suicides_no'][0]>=data['suicides_no'][1])","86089031":"data[(data['sex']=='male') & (data['year']>=2015 )]","4aad192c":"albaniaCount=0 # albania count in data\nothers=0 #other countries count in data\nfor i in data['country']:\n    if i=='Albania':\n        albaniaCount+=1\n    else:\n        others+=1\nprint(\"Ratio of Albania to other countries= \",albaniaCount\/others)","293e18aa":"for index,value in data[['generation']][-5:].iterrows():\n    print(index,\" : \",value) \n    #last 5 values and index","1c7ec4fe":"data['country'].unique() #all different countries","e20eb057":"dic={} #create empty dictionary\nfor each in data['country'].unique(): \n    dic[each]=0 #all different countries are our keys and all values are zero\n\nfor i in data['country']:\n    dic[i]+=1 #return all country data, increase own value for each country.\n\nfor key,value in dic.items():\n    print(key,\":\",value) #all keys and values\n\n#print(dic)    ","20cf8915":"lis=[]\nfor each in data['generation'].unique(): #different generations\n    lis.append(each) # add this generations to list\n    \nfor index, value in enumerate(lis):\n    print(index,\":\",value)\n","78e412af":"#built in scope\nimport builtins \ndir(builtins)","c65ba467":"sex=\"male\" #global scope\n\ndef female():\n    \"\"\"show sex variable\"\"\"\n    sex=\"female\" #local scope\n    print(sex)\nif data.sex[2] ==\"female\":\n    female()\nprint(\"...\")\nprint(sex)","f8bef2a7":"sex=\"female\" #global scope\n\ndef female(): #there is no local scope\n    \"\"\"show sex variable\"\"\"\n    print(sex)\nif data.sex[2] ==\"female\":\n    female()","e0d5e4bb":"def albania(): #first function\n    \"\"\"return ratio of suicide numbers to years of Albania\"\"\"\n    def albaniaSuicide(): #second function inside first func.\n        \"\"\"return sum of suicide numbers in data\"\"\"\n        summ=0\n        for index, value in enumerate(data[\"country\"]):\n            if value==\"Albania\": #if the country is Albania\n                summ+=data.suicides_no[index] #then add the number of suicides in that index\n        return summ \n    year=len(data['year'].unique()) #1985-2016\n    return albaniaSuicide()\/year\n        \nalbania()  ","b56a7274":"#default arguments\ndef sexRatio(a=3): #a=3 default argument, a is number of digits after comma\n    \"\"\"show the suicide ratio of female to male in the world\"\"\"\n    dictionary={\"male\":0,\"female\":0}\n    for index,value in enumerate(data[\"sex\"]):\n        dictionary[value]+=data[\"suicides_no\"][index]\n    print(\"ratio of female to male: \" ,round(dictionary[\"female\"]\/dictionary[\"male\"],a))\n    \nsexRatio() # used default argument(a=3)\nsexRatio(1) # used a=1","11b28f25":"def show(country,*args): #flexible argument\n    \"\"\"print some details about suicide\"\"\"\n    print(\"country:\",country)\n    print(\"other details: \")\n    for i in args:\n        print(i)\nfor i in [1,2,3]:   \n    show(data[\"country\"][i],data[\"age\"][i],data[\"population\"][i])\n#different number of parameters\nfor i in [1,2,3]:   \n    show(data[\"country\"][i],data[\"age\"][i])    ","8ad322c9":"def x(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():            \n        print(key, \":\", value,\".\")\nfor i in [1,2,3]:   \n    x(year = data[\"year\"][i], suicides_no = data[\"suicides_no\"][i])","a25ba14e":"rate= lambda x,y: x\/y #x,y are names of arguments\nprint(rate(data[\"suicides_no\"][5],data[\"population\"][5]))","9b20c834":"y = map(lambda x:round(x,-1),data.suicides_no)\nprint(list(y)[:15]) #first 15 items","6ad7106e":"years=[2000,2001,2002,2003]\nsuicides_no=[]\n\nfor each in years:\n    s=0\n    x=data['year']==each\n    s=sum(data[x].suicides_no) #sum all suicide numbers each year\n    suicides_no.append(s) # add list  \n#zip        \nz=zip(years,suicides_no) \nprint(type(z))\nlist_z=(list(z)) #convert list\nprint(list_z)\nprint(\".....\")\n\n#unzip\nun_z=zip(*list_z)\nun_1,un_2=list(un_z)\nprint(un_1)\nprint(un_2)","e680149e":"x=data.suicides_no\ny=[\"too much\" if i>50 else \"much\" if i>10 else \"normal\" for i in x]\nprint(y[:50])","89bf4ff1":"**SCOPE**\n\nVariables can be global, local, built in scope. \n\nGlobal variables defined main body but local variables defined in functions.Local ones can only be accessed within the function, global ones can be accessed from anywhere. If a variable is defined differently in the main body and function, it is used local one within the defined function. Built in scope is predefined, such as print, len. If you want to take a look at all;\n","bcbc849a":"For data visualization with the matplotlib library, line plot, scatter plot and histogram are mostly used. If the x-axis is time, it makes more sense to use a line plot. We use scatter plot to see the relation between the two features and histogram to see the frequency of the data.","e500b6d6":"**LIST COMPREHENSION**\n\nList comprehension is a structure that saves us from writing unnecessary long code. It provides if and for loop usage in a single line.","02dc5473":"**USER DEFINED FUNCTION**\n\n* We use def when creating a function. \n* Docstring should be used to make it understandable to others about what the function does. It's like \"\"\"command\"\"\"\n\nFor example\n\n![user.PNG](attachment:user.PNG)\n    ","c3ea1964":"Sometimes, we need to filter. So we use some operators. Basic examples is as below.\n\n![log.PNG](attachment:log.PNG)\n","802a3878":"We can also show this with a correlation map. We need to matplotlib and seaborn libraries. \n* figsize means heatmap size. You can use whatever size you want.\n* annot parameter means whether numbers appear on heatmap.\n* fmt means how many digits to use for numbers.\n* if you want, you can use a different colormap with the parameter cmap=\"YlGnBu\"\n","993e0080":"**DEFAULT and FLEXIBLE ARGUMENTS**\n\ndef func(a,b=5): #b=5 is default argument\n\ndef func(*args): #When we want to send different number of parameters to the same function, we use  *args instead of creating a new function.\n\nif the argument is *kwargs, parameters should be dictionary.\n","2966438f":"We should run the code above. The output path should be added in pd.read_csv(' ') like below.","6f51bc1d":"Use head() function for the first 5 row of data. In this way, we can have an idea about data. If you want to see more than 5 rows, you can add parameters like head(10)![head%2810%29.PNG](attachment:head%2810%29.PNG)","f44d02d1":"Column names are our features. We use corr() to easily understand the relationship of features with each other. If it is close to 1, it means there is positive relation between features. So these two features are directly proportional. However if it is close to -1, it means negative relation. 0 means that there is no relation between them.","b958ccd3":"**zip() and unzip()**\n\nzip(), combines by indexes.\n\nunzip(), separates by indexes.","f88f9c22":"**ANONYMOUS FUNCTION**\n\nIt's like a lambda function but you can apply the function to multiple items with this.\n\nmap(function,items(ex. list, series)) ","8bc5b605":"**DICTIONARIES**\n\nDictionaries have keys and values. Dictionary usage is as follows.\n\n![dict.PNG](attachment:dict.PNG)\n","6eeb7b50":"**LAMBDA FUNCTION**\n\nLambda functions allow us to write functions in one line.","4d3f72cd":"We can use info() for more detail like column names, data types, memory usage, data count. We have 12 columns, 27820 rows and 3 different data types","dcd68ef9":"**NESTED FUNCTIONS**\n\nit is means create a function inside another function.","271f149f":"Pandas include series and data frames. It's not the same.","ff1fdf08":"**LOOPS**\n\nWhile loop example:\n\n![while.PNG](attachment:while.PNG)\n\nFor loop example:\n\n![for.PNG](attachment:for.PNG)\n"}}