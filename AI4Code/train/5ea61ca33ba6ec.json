{"cell_type":{"c0178748":"code","58c4a18f":"code","7c3858d8":"code","4ea9cceb":"code","bb021ac1":"code","8ce1d954":"code","eea656c6":"code","346f5373":"code","778f5b29":"code","5f4bb2e8":"code","4cd166cf":"code","e4e77e1c":"code","2692e8d6":"code","4b5fbcfd":"code","0437631e":"code","6e87c150":"code","949ffc73":"code","6acbb9a0":"code","1fb91a54":"code","fa506b1b":"code","ff172665":"code","b6aadacf":"code","7599b338":"code","f239a6cd":"code","2ee2f7ca":"code","75404b7f":"code","241a35f0":"code","edd37481":"code","fff4d43f":"code","bfcda889":"markdown","32b85d4c":"markdown","553e8144":"markdown","887799ad":"markdown","5bffea91":"markdown","30efbdc3":"markdown","f02eaad2":"markdown","17cd1d8c":"markdown","3ad5df90":"markdown","a39d5191":"markdown","26c0479b":"markdown","fbad765a":"markdown","ee312348":"markdown","b417ac12":"markdown","f3b785dd":"markdown","82124620":"markdown"},"source":{"c0178748":"# \u5bfc\u5165\u5e93\nimport math, re, os\n# \u8bbe\u7f6elog\u7b49\u7ea7\uff0c\u53ea\u8f93\u51faError\u548cFatal\u7ea7\u522b\u7684\u4fe1\u606f\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets   # \u7528\u4e8e\u8bbf\u95eeGoogle\u4e91\u670d\u52a1\u5668\u4e0a\u7684\u6570\u636e\u96c6\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nprint(\"Tensorflow version \" + tf.__version__)","58c4a18f":"# \u68c0\u6d4b\u5e76\u94fe\u63a5 TPU \ntpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\nstrategy = tf.distribute.TPUStrategy(tpu)\nAUTO = tf.data.experimental.AUTOTUNE   # \u5e76\u884c\u5316\u8bad\u7ec3\u6a21\u5f0f\nprint(\"Number of accelerators: \", strategy.num_replicas_in_sync)","7c3858d8":"IMAGE_SIZE = [512, 512]   # \u8f93\u5165\u56fe\u50cf\u7684\u5c3a\u5bf8\nEPOCHS = 13  # \u8bad\u7ec3\u4ee3\u6570\nBATCH_SIZE = 32 * strategy.num_replicas_in_sync  # \u6839\u636eTPU\u52a0\u901f\u5668\u6570\u91cf\u8bbe\u5b9a\u6279\u5904\u7406\u5927\u5c0f","4ea9cceb":"GCS_DS_PATH = KaggleDatasets().get_gcs_path() # \u83b7\u53d6\u6570\u636e\u96c6\u5728Google Cloud Storage\u4e0a\u7684\u5730\u5740 \nGCS_DS_PATH","bb021ac1":"GCS_PATH_SELECT = { # \u4e0d\u540c\u5c3a\u5bf8\u7684\u6570\u636e\u96c6\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_PATH = GCS_PATH_SELECT[IMAGE_SIZE[0]]  # \u8fd4\u56de512x512\u6570\u636e\u96c6\u7684\u8def\u5f84\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')  # \u8fd4\u56de\u8bad\u7ec3\u96c6\u6587\u4ef6\u5217\u8868\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')  # \u8fd4\u56de\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5217\u8868\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') # \u8fd4\u56de\u6d4b\u8bd5\u96c6\u6d4b\u8bd5\u96c6\u6587\u4ef6\u5217\u8868","8ce1d954":"# \u8bad\u7ec3\u96c6\u76ee\u5f55\u5217\u8868\nTRAINING_FILENAMES","eea656c6":"# \u9a8c\u8bc1\u96c6\u76ee\u5f55\u5217\u8868\nVALIDATION_FILENAMES","346f5373":"# \u6d4b\u8bd5\u96c6\u76ee\u5f55\u5217\u8868\nTEST_FILENAMES","778f5b29":"# 104\u79cd\u82b1\u6735\u540d\u79f0\uff08\u6807\u7b7e\uff09\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     \n           'wild geranium',     'tiger lily',           'moon orchid',          'bird of paradise', \n           'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', \n           'yellow iris',       'globe-flower',         'purple coneflower',    'peruvian lily', \n           'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',   \n           'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian',\n           'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        \n           'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',          'great masterwort', \n           'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    \n           'bolero deep blue',  'wallflower',           'marigold',             'buttercup',    \n           'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',   \n           'lilac hibiscus',    'bishop of llandaff',   'gaura',                'geranium',   \n           'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',\n           'californian poppy', 'osteospermum',         'spring crocus',        'iris',      \n           'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',      \n           'thorn apple',       'morning glory',        'passion flower',       'lotus',    \n           'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',   \n           'desert-rose',       'tree mallow',          'magnolia',             'cyclamen ',  \n           'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',   \n           'bougainvillea',     'camellia',             'mallow',               'mexican petunia', \n           'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose'] # 100 - 103","5f4bb2e8":"LR_START = 0.00001  # \u5b66\u4e60\u7387\u521d\u503c\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync  # \u5b66\u4e60\u7387\u6700\u5927\u503c\nLR_MIN = 0.00001   # \u5b66\u4e60\u7387\u6700\u5c0f\u503c\nLR_RAMPUP_EPOCHS = 4   # \u5b66\u4e60\u7387\u589e\u957f\u4ee3\u6570\nLR_SUSTAIN_EPOCHS = 0  # \u5b66\u4e60\u7387\u4fdd\u6301\u4e0d\u53d8\u7684\u4ee3\u6570\nLR_EXP_DECAY = .8  # \u5b66\u4e60\u7387\u8870\u51cf\u56e0\u5b50\n\n# \u5b66\u4e60\u7387\u8c03\u5ea6\u51fd\u6570\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n# \u5b66\u4e60\u7387\u56de\u8c03\u51fd\u6570   \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\n# \u7ed8\u5236\u5b66\u4e60\u7387\u53d8\u5316\u66f2\u7ebf\uff0c\u89c2\u5bdf\u6a21\u578b\u8bad\u7ec3\u671f\u95f4\u5b66\u4e60\u7387\u53d8\u5316\u89c4\u5f8b\nrng = range(EPOCHS)\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(f\"\u5b66\u4e60\u7387\u8c03\u5ea6\u7b56\u7565\uff0c\u4ece\u6700\u5c0f\u503c {y[0]} \u5230\u6700\u5927\u503c\uff1a {max(y)} \u518d\u8870\u51cf\u5230\uff1a {y[-1]}\")","4cd166cf":"# \u63a7\u5236\u8f93\u51fa\u7684\u663e\u793a\u65b9\u5f0f\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data): # \u6570\u636e\u96c6\u8f6c\u6362\u4e3a Numpy\u7c7b\u578b\n    images, labels = data  # \u56fe\u50cf\u548c\u6807\u7b7e\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # \u5bf9\u4e8e\u6d4b\u8bd5\u96c6\uff0cnumpy_labels\u8fd4\u56de\u503c\u4e3a None\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label): # \u9884\u6d4b\u6807\u7b7e\u4e0e\u771f\u5b9e\u6807\u7b7e\u6bd4\u8f83\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', \"?\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):  # \u663e\u793a\u4e00\u5e45\u82b1\u6735\u56fe\u7247\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), \n                  color='red' if red else 'black', \n                  fontdict={'verticalalignment':'center'}, \n                  pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):  # \u6279\u91cf\u663e\u793a\n    \"\"\"\n    \u7528\u6cd5:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # \u8bbe\u5b9a\u884c\u6570\u548c\u5217\u6570\uff0c\u4e0d\u663e\u793a\u4e0d\u591f\u6574\u884c\u7684\u56fe\u7247\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # \u663e\u793a\u5c3a\u5bf8\u548c\u95f4\u8ddd\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # \u663e\u793a\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 \n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    # \u5e03\u5c40\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\ndef display_confusion_matrix(cmat, score, precision, recall): # \u663e\u793a\u6df7\u6dc6\u77e9\u9635\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', \n                                               'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \n# \u663e\u793a\u6a21\u578b\u8bad\u7ec3\u66f2\u7ebf    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # \u9996\u6b21\u8c03\u7528\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","e4e77e1c":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3) # image format uint8 [0,255]\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) \n    dataset = dataset.with_options(ignore_order) \n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    image = tf.image.random_flip_left_right(image)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() \n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) \n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) \n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nVALIDATION_STEPS = -(-NUM_VALIDATION_IMAGES \/\/ BATCH_SIZE)\nTEST_STEPS = -(-NUM_TEST_IMAGES \/\/ BATCH_SIZE) \nprint(f'\u8bad\u7ec3\u96c6\u56fe\u50cf\u6570\u91cf: {NUM_TRAINING_IMAGES} \uff0c\\\n      \u9a8c\u8bc1\u96c6\u56fe\u50cf\u6570\u91cf\uff1a {NUM_VALIDATION_IMAGES}\uff0c\\\n      \u6d4b\u8bd5\u96c6\u56fe\u50cf\u6570\u91cf\uff1a{NUM_TEST_IMAGES}')","2692e8d6":"# data dump\nprint(\"Training data shapes:\")\nfor image, label in get_training_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())\nprint(\"Validation data shapes:\")\nfor image, label in get_validation_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Validation data label examples:\", label.numpy())\nprint(\"Test data shapes:\")\nfor image, idnum in get_test_dataset().take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","4b5fbcfd":"# \u89c2\u5bdf\u8bad\u7ec3\u96c6\ntraining_dataset = get_training_dataset()\ntraining_dataset = training_dataset.unbatch().batch(20)\ntrain_batch = iter(training_dataset)","0437631e":"# \u968f\u673a\u62bd\u6837\ndisplay_batch_of_images(next(train_batch))","6e87c150":"# \u89c2\u5bdf\u6d4b\u8bd5\u96c6\ntest_dataset = get_test_dataset()\ntest_dataset = test_dataset.unbatch().batch(20)\ntest_batch = iter(test_dataset)","949ffc73":"# \u968f\u673a\u62bd\u6837\ndisplay_batch_of_images(next(test_batch))","6acbb9a0":"with strategy.scope():\n    load_locally = tf.saved_model.LoadOptions(experimental_io_device='\/job:localhost')\n    pretrained_model = hub.KerasLayer('https:\/\/tfhub.dev\/tensorflow\/efficientnet\/b7\/feature-vector\/1', \n                                      trainable=True,\n                                      input_shape=[*IMAGE_SIZE, 3], \n                                      load_options=load_locally)\n    model = tf.keras.Sequential([\n        # the expected image format for all TFHub image models is float32 in [0,1) range\n        tf.keras.layers.Lambda(lambda data: tf.image.convert_image_dtype(data, tf.float32), input_shape=[*IMAGE_SIZE, 3]),\n        pretrained_model,\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy'],\n    steps_per_execution=16\n)\nmodel.summary()","1fb91a54":"history = model.fit(get_training_dataset(), \n                    steps_per_epoch=STEPS_PER_EPOCH, \n                    epochs=EPOCHS,\n                    validation_data=get_validation_dataset(), \n                    validation_steps=VALIDATION_STEPS,\n                    callbacks=[lr_callback])","fa506b1b":"display_training_curves(history.history['loss'], history.history['val_loss'], 'loss', 211)\ndisplay_training_curves(history.history['sparse_categorical_accuracy'], \n                        history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","ff172665":"save_locally = tf.saved_model.SaveOptions(experimental_io_device='\/job:localhost')\nmodel.save('.\/EfficientNetB7', options=save_locally) # saving in Tensorflow's \"SavedModel\" format","b6aadacf":"load_locally = tf.saved_model.LoadOptions(experimental_io_device='\/job:localhost')\nmodel = tf.keras.models.load_model('.\/EfficientNetB7', options=load_locally)","7599b338":"cmdataset = get_validation_dataset(ordered=True) # \u9a8c\u8bc1\u96c6\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\n# \u771f\u5b9e\u6807\u7b7e\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\n# \u9884\u6d4b\u6807\u7b7e\ncm_probabilities = model.predict(images_ds, steps=VALIDATION_STEPS)\ncm_predictions = np.argmax(cm_probabilities, axis=-1)\nprint(\"\u9a8c\u8bc1\u96c6\u771f\u5b9e\u6807\u7b7e: \", cm_correct_labels.shape, cm_correct_labels)\nprint(\"\u9a8c\u8bc1\u96c6\u9884\u6d4b\u6807\u7b7e: \", cm_predictions.shape, cm_predictions)","f239a6cd":"cmat = confusion_matrix(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)))\nscore = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\nprecision = precision_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\nrecall = recall_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\ncmat = (cmat.T \/ cmat.sum(axis=1)).T # normalized\ndisplay_confusion_matrix(cmat, score, precision, recall)\nprint('f1 score: {:.3f}, precision: {:.3f}, recall: {:.3f}'.format(score, precision, recall))","2ee2f7ca":"test_ds = get_test_dataset(ordered=True)\n\nprint('\u5728\u6d4b\u8bd5\u96c6\u4e0a\u505a\u9884\u6d4b...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds, steps=TEST_STEPS)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('\u751f\u6210\u9884\u6d4b\u7ed3\u679c\u6587\u4ef6 submission.csv...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), \n           fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n!head submission.csv","75404b7f":"dataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","241a35f0":"# \u5728\u9a8c\u8bc1\u96c6\u4e0a\u968f\u673a\u62bd\u6837\u89c2\u5bdf\nimages, labels = next(batch)\nprobabilities = model.predict(images)\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)","edd37481":"dataset = get_test_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","fff4d43f":"# \u5728\u6d4b\u8bd5\u96c6\u4e0a\u968f\u673a\u62bd\u6837\u89c2\u5bdf\nimages, labels = next(batch)\nprobabilities = model.predict(images)\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)","bfcda889":"## 7 \u6a21\u578b\u8bad\u7ec3","32b85d4c":"## 8 \u663e\u793a\u51c6\u786e\u7387\u548c\u635f\u5931\u51fd\u6570\u66f2\u7ebf","553e8144":"## 1 \u4f7f\u7528TPU\u8bad\u7ec3\u6a21\u578b\n\u4e3a\u4e86\u4f7f\u7528TPU\uff0c\u9700\u8981\u9996\u5148\u68c0\u6d4b\u548c\u94fe\u63a5TPU\uff0c\u5e76\u6839\u636e\u53ef\u7528\u7684TPU\u52a0\u901f\u5355\u5143\u6570\u91cf\uff0c\u51b3\u5b9a\u6279\u5904\u7406\u5927\u5c0f\u3002\u5b66\u4e60\u7387\u52a8\u6001\u8c03\u5ea6\u7b56\u7565\u4e5f\u8003\u8651\u4e86\u8fd9\u4e00\u70b9\u3002","887799ad":"##  3 \u5b66\u4e60\u7387\u8c03\u5ea6\u51fd\u6570\n\u5b66\u4e60\u7387\u5bf9\u6a21\u578b\u8bad\u7ec3\u5f02\u5e38\u91cd\u8981\u3002\u4e3a\u6b64\uff0c\u6307\u5b9a\u5b66\u4e60\u7387\u52a8\u6001\u8c03\u5ea6\u7b56\u7565\u975e\u5e38\u5fc5\u8981\uff01","5bffea91":"# EfficientNetB7 \u8fc1\u79fb\u5b66\u4e60\n\u8fd9\u662f\u53ef\u80fd\u4f1a\u4ee4\u4f60\u975e\u5e38\u81ea\u8c6a\u7684\u4e00\u4e2a\u7a0b\u5e8f\uff01\u8fd9\u4e2a\u7a0b\u5e8f\u8fc7\u540e\uff0c\u6216\u8bb8\u4f60\u53ef\u4ee5\u786e\u4fe1\u505a\u51fa\u7c7b\u4f3c\u82b1\u4f34\u4fa3\u8fd9\u6837\u9177\u7684\u5e94\u7528\uff01<br\/>\n<a href=\"http:\/\/www.aiplants.net\/\">\u82b1\u4f34\u4fa3<\/a><br\/>\n\u82b1\u8349\u6811\u6728\uff0c\u4e00\u62cd\u5448\u540d\u3002\u53ea\u9700\u8981\u62cd\u6444\u690d\u7269\u7684\u82b1\u3001\u679c\u3001\u53f6\u7b49\u7279\u5f81\u90e8\u4f4d\uff0c\u5373\u53ef\u5feb\u901f\u8bc6\u522b\u690d\u7269\u3002\u82b1\u4f34\u4fa3\u80fd\u8bc6\u522b\u4e2d\u56fd\u91ce\u751f\u53ca\u683d\u57f9\u690d\u72693000\u5c5e\uff0c\u8fd15000\u79cd\uff0c\u51e0\u4e4e\u6db5\u76d6\u8eab\u8fb9\u6240\u6709\u5e38\u89c1\u82b1\u8349\u6811\u6728\u3002","30efbdc3":"## 2 \u6570\u636e\u96c6\u76ee\u5f55\u89c2\u5bdf\n\u82b1\u6735\u6570\u636e\u96c6\u5305\u542b\u56db\u79cd\u5c3a\u5bf8\u89c4\u683c\u7684\u56fe\u7247\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4efb\u610f\u9009\u62e9\u3002\u8fd9\u91cc\u9009\u5b9a512x512\u7684\u6570\u636e\u96c6\u3002","f02eaad2":"\u81f3\u6b64\uff0c\u9887\u6709\u6210\u5c31\u611f\uff01\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u6027\u80fd\u975e\u5e38\u597d\u7684\u82b1\u6735\u8bc6\u522b\u6a21\u578b\u3002\u867d\u7136\u53ea\u6709104\u79cd\u82b1\u6735\u3002\u53ea\u8981\u60a8\u6709\u65b0\u7684\u6570\u636e\u96c6\uff0c\u60a8\u5b8c\u5168\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u7ee7\u7eed\u8fd0\u7528\u8fc1\u79fb\u5b66\u4e60\u8fed\u4ee3\u4e0b\u53bb\uff0c\u8bc6\u522b\u66f4\u591a\u7c7b\u578b\u7684\u82b1\u6735\uff01\uff01","17cd1d8c":"## 4 \u53ef\u89c6\u5316\u51fd\u6570\n\u5b9a\u4e49\u663e\u793a\u56fe\u50cf\u51fd\u6570\u3001\u663e\u793a\u6a21\u578b\u8bad\u7ec3\u66f2\u7ebf\u51fd\u6570\u3001\u663e\u793a\u6df7\u6dc6\u77e9\u9635\u7684\u51fd\u6570\uff0c\u5206\u522b\u7528\u4e8e\u89c2\u5bdf\u6570\u636e\u96c6\u3001\u89c2\u5bdf\u6a21\u578b\u8bad\u7ec3\u6548\u679c\u548c\u9884\u6d4b\u7ed3\u679c\u3002","3ad5df90":"## 10 \u6a21\u578b\u8bc4\u4f30--\u6df7\u6dc6\u77e9\u9635\u3001F1-Score","a39d5191":"### \u6570\u636e\u96c6\u89c2\u5bdf\n\u62bd\u6837\u663e\u793a\u6570\u636e\u96c6\u56fe\u7247\uff0c\u5efa\u7acb\u611f\u6027\u8ba4\u8bc6","26c0479b":"##  6 \u5b9a\u4e49\u6a21\u578b EfficientNetB7\n\u7528TPU\u6a21\u5f0f\u5b9a\u4e49","fbad765a":"## 5 \u5b9a\u4e49\u6570\u636e\u96c6\n\u5175\u9a6c\u672a\u52a8\uff0c\u7cae\u8349\u5148\u884c\uff0c\u6570\u636e\u96c6\u9884\u5904\u7406\u59cb\u7ec8\u662f\u5efa\u6a21\u7b2c\u4e00\u6b65\uff01\u7ec6\u5fc3\u5bf9\u5f85\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\uff01","ee312348":"##  11 \u6a21\u578b\u9884\u6d4b\n\u5728\u6d4b\u8bd5\u96c6\u4e0a\u9884\u6d4b\uff0c\u4fdd\u5b58\u9884\u6d4b\u7ed3\u679c\u5230 submission.csv \u6587\u4ef6\u4e2d...","b417ac12":"### \u5bf9\u6d4b\u8bd5\u96c6\u9884\u6d4b\u7ed3\u679c\u7684\u53ef\u89c6\u5316\u89c2\u5bdf","f3b785dd":"###  \u5bf9\u9a8c\u8bc1\u96c6\u9884\u6d4b\u7ed3\u679c\u7684\u53ef\u89c6\u5316\u89c2\u5bdf","82124620":"## 9 \u4fdd\u5b58\u6a21\u578b"}}