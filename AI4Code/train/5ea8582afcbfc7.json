{"cell_type":{"5d6e2b49":"code","6e8f23b5":"code","5466d716":"code","c9a60fe4":"code","fe7e67aa":"code","f45a4775":"code","77b58491":"code","9b5e2fa1":"code","8bef21f9":"code","1acc6faa":"code","6442d06c":"code","7c1bbdcb":"code","e0b7760b":"code","a1e7ff69":"code","22642c73":"code","f56a47ee":"code","1fbf6140":"markdown","b9fb70cf":"markdown","d1a136cd":"markdown","e3c069f1":"markdown"},"source":{"5d6e2b49":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport math","6e8f23b5":"data = pd.read_csv(\"..\/input\/mushrooms.csv\")","5466d716":"data.head()","c9a60fe4":"data.info()","fe7e67aa":"data['stalk-root'].value_counts()","f45a4775":"100*len(data.loc[data['stalk-root']=='?']) \/ sum(data['stalk-root'].value_counts())","77b58491":"data = data.drop('stalk-root', 1)","9b5e2fa1":"Y = pd.get_dummies(data.iloc[:,0],  drop_first=False)\nX = pd.DataFrame()\nfor each in data.iloc[:,1:].columns:\n    dummies = pd.get_dummies(data[each], prefix=each, drop_first=False)\n    X = pd.concat([X, dummies], axis=1)\n    ","8bef21f9":"\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.optimizers import SGD\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import cross_val_score\nfrom keras import backend as K\nfrom keras.layers import BatchNormalization\nseed = 123456 \n\ndef create_model():\n    model = Sequential()\n    model.add(Dense(20, input_dim=X.shape[1], kernel_initializer='uniform', activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    #model.add(Dense(20, input_dim=X.shape[1], kernel_initializer='uniform', activation='relu'))\n    #model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    model.add(Dense(2, activation='softmax'))\n    #sgd = SGD(lr=0.01, momentum=0.7, decay=0, nesterov=False)\n    model.compile(loss='binary_crossentropy' , optimizer='adam', metrics=['accuracy'])\n    return model","1acc6faa":"model = create_model()\nhistory = model.fit(X.values, Y.values, validation_split=0.50, epochs=100, batch_size=50, verbose=0)\n\n\n","6442d06c":"history.history.keys()","7c1bbdcb":"# list all data in history\nprint(history.history.keys())\n# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","e0b7760b":"print(\"Training accuracy: %.2f%% \/ Validation accuracy: %.2f%%\" % \n      (100*history.history['accuracy'][-1], 100*history.history['val_accuracy'][-1]))","a1e7ff69":"from keras import backend as K\nimport numpy as np\n\nlayer_of_interest=0\nintermediate_tensor_function = K.function([model.layers[0].input],[model.layers[layer_of_interest].output])\nintermediate_tensor = intermediate_tensor_function([X.iloc[0,:].values.reshape(1,-1)])[0]","22642c73":"intermediates = []\ncolor_intermediates = []\nfor i in range(len(X)):\n    output_class = np.argmax(Y.iloc[i,:].values)\n    intermediate_tensor = intermediate_tensor_function([X.iloc[i,:].values.reshape(1,-1)])[0]\n    intermediates.append(intermediate_tensor[0])\n    if(output_class == 0):\n        color_intermediates.append(\"#0000ff\")\n    else:\n        color_intermediates.append(\"#ff0000\")","f56a47ee":"from sklearn.manifold import TSNE\ntsne = TSNE(n_components=2, random_state=0)\nintermediates_tsne = tsne.fit_transform(intermediates)","1fbf6140":"We build the neural network with Keras:","b9fb70cf":"We train the model and get the associated training graphs:","d1a136cd":"More than 30% of the values of **stalk-root** are missing values","e3c069f1":"We prepare the data to be used in the neural network model:"}}