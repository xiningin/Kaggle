{"cell_type":{"295d645e":"code","d3d46042":"code","b21cc7f7":"code","3612b7c9":"code","ab8bdc47":"code","01835aa7":"code","009ebfe9":"code","3f34b5fb":"code","5d6df9a7":"code","e40837e0":"markdown","d54084f9":"markdown","b4b759c9":"markdown"},"source":{"295d645e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.plotting import scatter_matrix\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d3d46042":"filename='\/kaggle\/input\/top50spotify2019\/top50.csv'\nspotify_data=pd.read_csv(filename,encoding='ISO-8859-1')\nspotify_data.head()","b21cc7f7":"#Understand the data\n#spotify_data.info()\n#for columns in spotify_data.columns:\n#    print(spotify_data[columns].value_counts())","3612b7c9":"new_spotify_data=spotify_data.drop(['Track.Name','Unnamed: 0'],axis=1,inplace=False)\nprint(new_spotify_data.info())","ab8bdc47":"#for columns in spotify_data.columns:\n#    print(columns,spotify_data[columns].value_counts())\nnew_spotify_data.describe()\nnumericalattributes=new_spotify_data.columns[2:]\nprint(new_spotify_data.columns)\nscatter_matrix(new_spotify_data,figsize=(15,20))\nprint(new_spotify_data.corr())\n","01835aa7":"from sklearn.model_selection import train_test_split\nprint(new_spotify_data.columns)\npopula_array=new_spotify_data['Popularity']\nnew_spotify_data.drop(['Popularity'],axis=1,inplace=True)\nX_train, X_test, y_train, y_test = train_test_split(new_spotify_data,popula_array ,test_size=0.2, random_state=42)","009ebfe9":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline,FeatureUnion\nfrom sklearn.preprocessing import StandardScaler,LabelBinarizer,LabelEncoder\nclass DataFrameSelector(BaseEstimator, TransformerMixin): \n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names \n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n            return X[self.attribute_names].values\n        \nfrom sklearn.base import BaseEstimator, TransformerMixin\nclass new_LabelBina(BaseEstimator, TransformerMixin): \n    def __init__(self):\n        self.encoder=LabelBinarizer()\n    def fit(self, X, y=None):\n        self.encoder.fit(X)\n        return self\n    def transform(self, X):\n            return self.encoder.transform(X)\nclass new_Labelencoder(BaseEstimator, TransformerMixin): \n    def __init__(self):\n        self.encoder=LabelEncoder()\n    def fit(self, X, y=None):\n        self.encoder.fit(X)\n        return self\n    def transform(self, X):\n            return self.encoder.transform(X).reshape(-1,1)           ","3f34b5fb":"\n\n\nnum_pipeline=Pipeline([('selector',DataFrameSelector(numericalattributes[:-1])),\n    ('std_scalar',StandardScaler())])\n\nartist_pipeline = Pipeline([\n('selector', DataFrameSelector(['Artist.Name'])), ('label_binarizer', new_LabelBina()),\n])\ngenre_pipeline = Pipeline([\n('selector', DataFrameSelector(['Genre'])), ('label_binarizer2',new_LabelBina()),\n])\nfull_pipeline = FeatureUnion(transformer_list=\n                             [ (\"num_pipeline\", num_pipeline), (\"artist_pipeline\", artist_pipeline),\n                                              (\"genre_pipeline\", genre_pipeline)])\nspotify_preparared=full_pipeline.fit_transform(X_train)\n","5d6df9a7":"#Training Model\nfrom sklearn.linear_model import LinearRegression\nlinear=LinearRegression()\nscale_output=StandardScaler()\nnew_y=scale_output.fit_transform(np.array(y_train).reshape(-1,1))\nlinear.fit(spotify_preparared,new_y)\ntest_data=full_pipeline.transform(X_test)\npredictions=linear.predict(test_data)\nfrom sklearn.metrics import mean_squared_error\nnew_y=scale_output.transform(np.array(y_test).reshape(-1,1))\n\nlin_mse = np.sqrt(mean_squared_error(new_y,predictions))\nprint(lin_mse)\n\n","e40837e0":"The learning so far are\nThere were 12 columns and 50 examples.\n\nWe dropped the Track.Name as it is \n*  There is no sufficient proof to link the Track.Name to the popularity of the song.\n*  It is important to reduce redundant features as we dont have many examples.\n\n","d54084f9":"    For liveness and spechiness most of the values are concentrated on certain values. \n    \n    It is clear that using standard scalar might not best bring out this distribution, \n    it might squish the values.","b4b759c9":"Results:\nAfter One hot encoding with genre- linear regression rmse = 2.67\n"}}