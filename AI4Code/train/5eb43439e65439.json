{"cell_type":{"e1b51600":"code","8ee511d2":"code","066589c2":"code","7918de5a":"code","f068b500":"code","200f452c":"code","fde023d9":"code","19997103":"code","1a4ec90c":"code","3dc6f327":"code","61f3fd7b":"code","209ccb1d":"code","e9d42275":"code","63a48222":"code","e97d392e":"code","0a49cb56":"code","602b7755":"code","38b96c48":"code","f56f9ed6":"code","3f258be8":"code","88a01ac4":"code","cb2bc0dc":"code","fa0de674":"code","7e66f58f":"code","1f00d43d":"code","3a3ded63":"code","83f57c73":"code","49760b5a":"code","27ac7375":"code","1d3dea67":"code","7f0f4ea2":"code","ba8ab40a":"code","4e26228b":"code","341c5ab3":"code","db941be3":"code","6010fa5b":"code","07f00089":"code","0711b244":"code","7748eb46":"code","af3b816b":"code","5094a421":"code","0a0fe42f":"code","d338a4f1":"code","cd5125f8":"code","114e3c0b":"code","8daadb16":"code","52a3b6e3":"code","b8cb88f2":"code","9e0814cd":"code","05c4223b":"code","2e2cd6a3":"code","c8953ad0":"code","1b0521c7":"code","a777f8ea":"code","478e4105":"code","d8b45fdb":"code","d5bfb985":"code","ba14e312":"code","72abf206":"code","0c6adcc6":"code","76bdd682":"code","d59e4651":"code","c36aa816":"code","03c30e82":"code","25111404":"code","8e3f9f69":"code","e901e91a":"code","d2dccbe7":"markdown","4f785f15":"markdown","0e82f20d":"markdown","cc62b25e":"markdown","fc9a63b5":"markdown","d80ab7e0":"markdown","6766d639":"markdown","f6f0ddd9":"markdown","08d4d9c2":"markdown","683b8e2d":"markdown","513468ed":"markdown","9e66b67e":"markdown","1e81cb4a":"markdown","26c878a0":"markdown","b45e8af6":"markdown"},"source":{"e1b51600":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model","8ee511d2":"train = pd.read_csv(\"train_ml.csv\")","066589c2":"test = pd.read_csv(\"test_ml.csv\")","7918de5a":"train.head()","f068b500":"test.head()","200f452c":"train.info()","fde023d9":"test.info()","19997103":"train[\"SalePrice\"]","1a4ec90c":"test[\"SalePrice\"]","3dc6f327":"train.info()","61f3fd7b":"test.info()","209ccb1d":"train.isnull().sum()","e9d42275":"test.isnull().sum()","63a48222":"nan_values = train.isna()","e97d392e":"nan_columns = nan_values.any()","0a49cb56":"columns_with_nan = train.columns[nan_columns].tolist()","602b7755":"print(columns_with_nan)","38b96c48":"train.info()","f56f9ed6":"train[\"LotFrontage\"] = train[\"LotFrontage\"].replace(np.NAN, train[\"LotFrontage\"].mean())\ntrain[\"Alley\"] = train[\"Alley\"].replace(np.NAN, \"Unknown\")\ntrain[\"MasVnrType\"] = train[\"MasVnrType\"].replace(np.NAN, \"Unknown\")\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].replace(np.NAN, train[\"MasVnrArea\"].mean())\ntrain[\"BsmtQual\"] = train[\"BsmtQual\"].replace(np.NAN, \"Unknown\")\ntrain[\"BsmtCond\"] = train[\"BsmtCond\"].replace(np.NAN, \"Unknown\")\ntrain[\"BsmtExposure\"] = train[\"BsmtExposure\"].replace(np.NAN, \"Unknown\")\ntrain[\"BsmtFinType1\"] = train[\"BsmtFinType1\"].replace(np.NAN, \"Unknown\")\ntrain[\"BsmtFinType2\"] = train[\"BsmtFinType2\"].replace(np.NAN, \"Unknown\")\ntrain[\"Electrical\"] = train[\"Electrical\"].replace(np.NAN, \"Unknown\")\ntrain[\"FireplaceQu\"] = train[\"FireplaceQu\"].replace(np.NAN, \"Unknown\")\ntrain[\"GarageType\"] = train[\"GarageType\"].replace(np.NAN, \"Unknown\")\ntrain[\"GarageYrBlt\"] = train[\"GarageYrBlt\"].replace(np.NAN, train[\"GarageYrBlt\"].mean())\ntrain[\"GarageFinish\"] = train[\"GarageFinish\"].replace(np.NAN, \"Unknown\")\ntrain[\"GarageQual\"] = train[\"GarageQual\"].replace(np.NAN, \"Unknown\")\ntrain[\"GarageCond\"] = train[\"GarageCond\"].replace(np.NAN, \"Unknown\")\ntrain[\"PoolQC\"] = train[\"PoolQC\"].replace(np.NAN, \"Unknown\")\ntrain[\"Fence\"] = train[\"Fence\"].replace(np.NAN, \"Unknown\")\ntrain[\"MiscFeature\"] = train[\"MiscFeature\"].replace(np.NAN, \"Unknown\")","3f258be8":"nan_values = test.isna()\nnan_columns = nan_values.any()\ncolumns_with_nan = test.columns[nan_columns].tolist()\n\nprint(columns_with_nan)","88a01ac4":"test[\"MSZoning\"] = test[\"MSZoning\"].replace(np.NAN, \"Unknown\")\ntest[\"LotFrontage\"] = test[\"LotFrontage\"].replace(np.NAN, test[\"LotFrontage\"].mean())\ntest[\"Alley\"] = test[\"Alley\"].replace(np.NAN, \"Unknown\")\ntest[\"Utilities\"] = test[\"Utilities\"].replace(np.NAN, \"Unknown\")\ntest[\"Exterior1st\"] = test[\"Exterior1st\"].replace(np.NAN, \"Unknown\")\ntest[\"Exterior2nd\"] = test[\"Exterior2nd\"].replace(np.NAN, \"Unknown\")\ntest[\"MasVnrType\"] = test[\"MasVnrType\"].replace(np.NAN, \"Unknown\")\ntest[\"MasVnrArea\"] = test[\"MasVnrArea\"].replace(np.NAN, test[\"MasVnrArea\"].mean())\ntest[\"BsmtQual\"] = test[\"BsmtQual\"].replace(np.NAN, \"Unknown\")\ntest[\"BsmtCond\"] = test[\"BsmtCond\"].replace(np.NAN, \"Unknown\")\ntest[\"BsmtExposure\"] = test[\"BsmtExposure\"].replace(np.NAN, \"Unknown\")\ntest[\"BsmtFinType1\"] = test[\"BsmtFinType1\"].replace(np.NAN, \"Unknown\")\ntest[\"BsmtFinSF1\"] = test[\"BsmtFinSF1\"].replace(np.NAN, test[\"BsmtFinSF1\"].mean())\ntest[\"BsmtFinType2\"] = test[\"BsmtFinType2\"].replace(np.NAN, \"Unknown\")\ntest[\"BsmtFinSF2\"] = test[\"BsmtFinSF2\"].replace(np.NAN, test[\"BsmtFinSF2\"].mean())\ntest[\"BsmtUnfSF\"] = test[\"BsmtUnfSF\"].replace(np.NAN, test[\"BsmtUnfSF\"].mean())\ntest[\"TotalBsmtSF\"] = test[\"TotalBsmtSF\"].replace(np.NAN, test[\"TotalBsmtSF\"].mean())\ntest[\"BsmtFullBath\"] = test[\"BsmtFullBath\"].replace(np.NAN, test[\"BsmtFullBath\"].mean())\ntest[\"BsmtHalfBath\"] = test[\"BsmtHalfBath\"].replace(np.NAN, test[\"BsmtHalfBath\"].mean())\ntest[\"KitchenQual\"] = test[\"KitchenQual\"].replace(np.NAN, \"Unknown\")\ntest[\"Functional\"] = test[\"Functional\"].replace(np.NAN, \"Unknown\")\ntest[\"FireplaceQu\"] = test[\"FireplaceQu\"].replace(np.NAN, \"Unknown\")\ntest[\"GarageType\"] = test[\"GarageType\"].replace(np.NAN, \"Unknown\")\ntest[\"GarageYrBlt\"] = test[\"GarageYrBlt\"].replace(np.NAN, test[\"GarageYrBlt\"].mean())\ntest[\"GarageFinish\"] = test[\"GarageFinish\"].replace(np.NAN, \"Unknown\")\ntest[\"GarageCars\"] = test[\"GarageCars\"].replace(np.NAN, test[\"GarageCars\"].mean())\ntest[\"GarageArea\"] = test[\"GarageArea\"].replace(np.NAN, test[\"GarageArea\"].mean())\ntest[\"GarageQual\"] = test[\"GarageQual\"].replace(np.NAN, \"Unknown\")\ntest[\"GarageCond\"] = test[\"GarageCond\"].replace(np.NAN, \"Unknown\")\ntest[\"PoolQC\"] = test[\"PoolQC\"].replace(np.NAN, \"Unknown\")\ntest[\"Fence\"] = test[\"Fence\"].replace(np.NAN, \"Unknown\")\ntest[\"MiscFeature\"] = test[\"MiscFeature\"].replace(np.NAN, \"Unknown\")\ntest[\"SaleType\"] = test[\"SaleType\"].replace(np.NAN, \"SaleType\")","cb2bc0dc":"\ndf = pd.concat([test.assign(ind=\"test\"), train.assign(ind=\"train\")])","fa0de674":"cat_columns = df.select_dtypes(['object']).columns","7e66f58f":"cat_columns","1f00d43d":"df['MSZoning'] = df['MSZoning'].astype('category')\ndf['Street'] = df['Street'].astype('category')\ndf['Alley'] = df['Alley'].astype('category')\ndf['LotShape'] = df['LotShape'].astype('category')\ndf['LandContour'] = df['LandContour'].astype('category')\ndf['Utilities'] = df['Utilities'].astype('category')\ndf['LotConfig'] = df['LotConfig'].astype('category')\ndf['LandSlope'] = df['LandSlope'].astype('category')\ndf['Neighborhood'] = df['Neighborhood'].astype('category')\ndf['Condition1'] = df['Condition1'].astype('category')\ndf['Condition2'] = df['Condition2'].astype('category')\ndf['BldgType'] = df['BldgType'].astype('category')\ndf['HouseStyle'] = df['HouseStyle'].astype('category')\ndf['RoofStyle'] = df['RoofStyle'].astype('category')\ndf['RoofMatl'] = df['RoofMatl'].astype('category')\ndf['Exterior1st'] = df['Exterior1st'].astype('category')\ndf['Exterior2nd'] = df['Exterior2nd'].astype('category')\ndf['MasVnrType'] = df['MasVnrType'].astype('category')\ndf['ExterQual'] = df['ExterQual'].astype('category')\ndf['ExterCond'] = df['ExterCond'].astype('category')\ndf['Foundation'] = df['Foundation'].astype('category')\ndf['BsmtQual'] = df['BsmtQual'].astype('category')\ndf['BsmtCond'] = df['BsmtCond'].astype('category')\ndf['BsmtExposure'] = df['BsmtExposure'].astype('category')\ndf['BsmtFinType1'] = df['BsmtFinType1'].astype('category')\ndf['BsmtFinType2'] = df['BsmtFinType2'].astype('category')\ndf['Heating'] = df['Heating'].astype('category')\ndf['HeatingQC'] = df['HeatingQC'].astype('category')\ndf['CentralAir'] = df['CentralAir'].astype('category')\ndf['Electrical'] = df['Electrical'].astype('category')\ndf['KitchenQual'] = df['KitchenQual'].astype('category')\ndf['Functional'] = df['Functional'].astype('category')\ndf['FireplaceQu'] = df['FireplaceQu'].astype('category')\ndf['GarageType'] = df['GarageType'].astype('category')\ndf['GarageFinish'] = df['GarageFinish'].astype('category')\ndf['BsmtCond'] = df['BsmtCond'].astype('category')\ndf['GarageQual'] = df['GarageQual'].astype('category')\ndf['GarageCond'] = df['GarageCond'].astype('category')\ndf['PavedDrive'] = df['PavedDrive'].astype('category')\ndf['PoolQC'] = df['PoolQC'].astype('category')\ndf['Fence'] = df['Fence'].astype('category')\ndf['MiscFeature'] = df['MiscFeature'].astype('category')\ndf['SaleType'] = df['SaleType'].astype('category')\ndf['SaleCondition'] = df['SaleCondition'].astype('category')","3a3ded63":"cat_columns = df.select_dtypes(['category']).columns","83f57c73":"cat_columns","49760b5a":"df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes)","27ac7375":"\ndf.head()","1d3dea67":"df.info()","7f0f4ea2":"test, train = df[df[\"ind\"].eq(\"test\")], df[df[\"ind\"].eq(\"train\")]","ba8ab40a":"train.head()","4e26228b":"train.info()","341c5ab3":"test.head()","db941be3":"test.info()","6010fa5b":"train = train.drop('ind', 1)","07f00089":"test = test.drop('ind', 1)","0711b244":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","7748eb46":"train.iloc[:,0:-1] = scaler.fit_transform(train.iloc[:,0:-1].to_numpy())","af3b816b":"train.head()\n","5094a421":"train.info()","0a0fe42f":"test.iloc[:,0:-1] = scaler.fit_transform(test.iloc[:,0:-1].to_numpy())","d338a4f1":"test.head()","cd5125f8":"test.info()","114e3c0b":"X = train.drop(['SalePrice'], axis=1) \ny = train['SalePrice'] \nm=len(y)","8daadb16":"def featureNormalize(X):\n    \n    X_norm = (X - np.mean(X))\/np.std(X)\n    mu = np.mean(X)\n    sigma = np.std(X)\n    return X_norm, mu, sigma\n\n\nX, mean, std = featureNormalize(X) ","52a3b6e3":"X = np.append(np.ones([m,1]), X, axis=1)","b8cb88f2":"y = np.array(y).reshape(-1,1)","9e0814cd":"theta = np.zeros([81,1])","05c4223b":"def computeCostMulti(X,y, theta):\n    \n    m = len(y) \n    h = X.dot(theta)\n    J = 1\/(2*m)*(np.sum((h-y)**2))\n    return J\n\ncost = computeCostMulti(X,y,theta) \n\nprint(cost)","2e2cd6a3":"def gradientDescentMulti(X, y, theta, alpha, iter):\n    \n    J_history = [] \n    m = len(y) \n    for i in range(iter): \n        h = X.dot(theta) \n        theta = theta - (alpha\/m)*(X.T.dot(h-y)) \n        J_history.append(computeCostMulti(X, y, theta)) \n    return theta, J_history \n\n\niter = 400 \nalpha = 0.01 \n\n\nnew_theta, J_history = gradientDescentMulti(X, y, theta, alpha, iter)\n\nprint (new_theta)","c8953ad0":"new_cost = computeCostMulti(X,y,new_theta)","1b0521c7":"print(new_cost)","a777f8ea":"plt.plot(J_history)\nplt.ylabel('SalePrice ')\nplt.xlabel('Number of Iterations')\nplt.title('Minimizing Cost Using Gradient Descent')","478e4105":"theta_1, J_history_1 = gradientDescentMulti(X, y, theta, 0.3, 50)\ntheta_2, J_history_2 = gradientDescentMulti(X, y, theta, 0.1, 50)\ntheta_3, J_history_3 = gradientDescentMulti(X, y, theta, 0.03, 50)\ntheta_4, J_history_4 = gradientDescentMulti(X, y, theta, 0.01, 50)\ntheta_5, J_history_5 = gradientDescentMulti(X, y, theta, 0.003, 50)\ntheta_6, J_history_6 = gradientDescentMulti(X, y, theta, 0.001, 50)","d8b45fdb":"plt.plot(J_history_1, label='0.3')\nplt.plot(J_history_2, label='0.1')\nplt.plot(J_history_3, label='0.03')\nplt.plot(J_history_4, label='0.01')\nplt.plot(J_history_5, label='0.003')\nplt.plot(J_history_6, label='0.001')\nplt.title('Testing Different Learning Rates')\nplt.xlabel('Number of Iterations')\nplt.ylabel('Cost J')\nplt.legend(bbox_to_anchor=(1.05, 1.0))","d5bfb985":"X = np.array([7, 0,2,0,4,5,11,3,1,34,1,19,0,2,9,5,4,7,1,1,1,1,11,10,1,1,12,1,1,1,0.1,1,1.2,1,1,1,1,1,1,1,1,1.7,1,1.8,1,1,1,1,4,1,1,1,3,1,1,1,1,2,1,1,1,1,5,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1.6])\n\nX = (X - mean)\/std\n\nX = np.append(1, X)\n\nX = np.reshape(X, (1,81)) \n\nprint(X) ","ba14e312":"def prediction(X, theta):\n    \n    return np.dot(X, theta)","72abf206":"pred = prediction(X, theta)","0c6adcc6":"print(pred)","76bdd682":"df = pd.read_csv(\"train_ml.csv\")\ndf","d59e4651":"df = pd.read_csv(\"test_ml.csv\")\ndf","c36aa816":"reg = linear_model.LinearRegression()\nreg.fit(train[['MSSubClass',\n    'MSZoning',       \n    'LotFrontage',    \n    'LotArea',       \n    'Street',      \n    'Alley',      \n    'LotShape',     \n    'LandContour',    \n    'Utilities',   \n   'LotConfig',\n   'LandSlope',      \n   'Neighborhood',    \n   'Condition1', \n   'Condition2',     \n   'BldgType',   \n   'HouseStyle',     \n   'OverallQual',   \n   'OverallCond', \n   'YearBuilt', \n   'YearRemodAdd',   \n   'RoofStyle', \n   'RoofMatl',   \n   'Exterior1st',   \n   'Exterior2nd', \n   'MasVnrType', \n   'MasVnrArea',   \n   'ExterQual',  \n   'ExterCond',   \n   'Foundation',   \n   'BsmtQual',      \n   'BsmtCond',\n   'BsmtExposure',  \n   'BsmtFinType1',   \n   'BsmtFinSF1',    \n   'BsmtFinType2',  \n   'BsmtFinSF2',     \n   'BsmtUnfSF',      \n   'TotalBsmtSF',     \n   'Heating',        \n   'HeatingQC',     \n   'CentralAir',    \n   'Electrical',    \n   '1stFlrSF',      \n   '2ndFlrSF',      \n   'LowQualFinSF',    \n   'GrLivArea',      \n   'BsmtFullBath',  \n   'BsmtHalfBath',    \n   'FullBath',       \n   'HalfBath',      \n   'BedroomAbvGr',  \n   'KitchenAbvGr',   \n   'KitchenQual',   \n   'TotRmsAbvGrd',   \n   'Functional',    \n   'Fireplaces',     \n   'FireplaceQu',   \n   'GarageType',    \n   'GarageYrBlt',    \n   'GarageFinish',   \n   'GarageCars',    \n   'GarageArea',     \n   'GarageQual',    \n   'GarageCond',     \n   'PavedDrive',    \n   'WoodDeckSF',      \n   'OpenPorchSF',    \n   'EnclosedPorch',    \n   '3SsnPorch',      \n   'ScreenPorch',    \n   'PoolArea',      \n   'PoolQC',        \n   'Fence',         \n   'MiscFeature',   \n   'MiscVal',       \n   'MoSold',        \n   'YrSold',        \n   'SaleType',      \n   'SaleCondition']],train.SalePrice)","03c30e82":"reg.coef_","25111404":"reg.intercept_","8e3f9f69":"reg.predict([[7,0,2,0,4,5,11,3,1,34,1,19,0,2,9,5,4,7,1,1,1,1,11,10,1,1,12,1,1,1,0.1,1,1.2,1,1,1,1,1,1,1,1,1.7,1,1.8,1,1,1,1,4,1,1,1,3,1,1,1,1,2,1,1,1,1,5,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,6]])","e901e91a":"reg = linear_model.LinearRegression()\nreg.fit(test[['MSSubClass',\n    'MSZoning',       \n    'LotFrontage',    \n    'LotArea',       \n    'Street',      \n    'Alley',      \n    'LotShape',     \n    'LandContour',    \n    'Utilities',   \n   'LotConfig',\n   'LandSlope',      \n   'Neighborhood',    \n   'Condition1', \n   'Condition2',     \n   'BldgType',   \n   'HouseStyle',     \n   'OverallQual',   \n   'OverallCond', \n   'YearBuilt', \n   'YearRemodAdd',   \n   'RoofStyle', \n   'RoofMatl',   \n   'Exterior1st',   \n   'Exterior2nd', \n   'MasVnrType', \n   'MasVnrArea',   \n   'ExterQual',  \n   'ExterCond',   \n   'Foundation',   \n   'BsmtQual',      \n   'BsmtCond',\n   'BsmtExposure',  \n   'BsmtFinType1',   \n   'BsmtFinSF1',    \n   'BsmtFinType2',  \n   'BsmtFinSF2',     \n   'BsmtUnfSF',      \n   'TotalBsmtSF',     \n   'Heating',        \n   'HeatingQC',     \n   'CentralAir',    \n   'Electrical',    \n   '1stFlrSF',      \n   '2ndFlrSF',      \n   'LowQualFinSF',    \n   'GrLivArea',      \n   'BsmtFullBath',  \n   'BsmtHalfBath',    \n   'FullBath',       \n   'HalfBath',      \n   'BedroomAbvGr',  \n   'KitchenAbvGr',   \n   'KitchenQual',   \n   'TotRmsAbvGrd',   \n   'Functional',    \n   'Fireplaces',     \n   'FireplaceQu',   \n   'GarageType',    \n   'GarageYrBlt',    \n   'GarageFinish',   \n   'GarageCars',    \n   'GarageArea',     \n   'GarageQual',    \n   'GarageCond',     \n   'PavedDrive',    \n   'WoodDeckSF',      \n   'OpenPorchSF',    \n   'EnclosedPorch',    \n   '3SsnPorch',      \n   'ScreenPorch',    \n   'PoolArea',      \n   'PoolQC',        \n   'Fence',         \n   'MiscFeature',   \n   'MiscVal',       \n   'MoSold',        \n   'YrSold',        \n   'SaleType',      \n   'SaleCondition']],test.SalePrice)","d2dccbe7":"# Task 1\n### 1.1 Loaded parametres train and test","4f785f15":"### 1.4 Predicted column is contained in train dataset , and is not present in test dataset","0e82f20d":"## 2.4 Normalize data and scaling","cc62b25e":"# Task 3\n## 3.1 Creating a matrix","fc9a63b5":"# Task 4","d80ab7e0":"### 1.2 Information about data ","6766d639":"### 2.3 Convert string data to numbers","f6f0ddd9":"## 4.1 Creating a regression example","08d4d9c2":"# Task 2\n### 2.1 Calculate empty cells in a column","683b8e2d":"### 1.3 Column name that we are trying to predict","513468ed":"### 3.2 Calculate cost function","9e66b67e":"## 4.2 For test","1e81cb4a":"### 3.3 Implement gradient descent algorithm","26c878a0":"### 2.2 Fill columns with values\n","b45e8af6":" ### 3.4 Optimized theta values by gradient descent algorithm."}}