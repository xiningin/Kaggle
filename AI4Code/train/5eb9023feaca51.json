{"cell_type":{"33b1baa8":"code","c4124574":"code","f29ff179":"code","52da29b7":"code","caceb52e":"code","c85d1211":"code","8d96ca24":"code","dfba09b6":"code","e2890fbb":"code","8d45d36b":"code","876c3c8d":"code","7125d94b":"code","cadd781a":"code","8085327d":"code","4b05e069":"code","79899bf5":"code","f94bfde4":"code","03a51f29":"code","4714e310":"code","0ddd2c71":"markdown","17562bad":"markdown","305674e0":"markdown","dd0cf3cc":"markdown","4629b187":"markdown","8c4a8df8":"markdown","495a5e1a":"markdown"},"source":{"33b1baa8":"import os\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nprint(os.listdir(\"..\/input\"))","c4124574":"%%time \npath=Path('..\/input')\ntrain=pd.read_csv(path\/'train.csv')\ntest=pd.read_csv(path\/'test.csv')\nstruct=pd.read_csv(path\/'structures.csv')","f29ff179":"print(f'The shape of train is {train.shape}')\nprint(f'The shape of test is {test.shape}')\nprint(f'The shape of struct is {struct.shape}')\nprint(f\"\\nThe number of NA's in train is {train.isna().sum().sum()}.\")\nprint(f\"The number of NA's in test is {test.isna().sum().sum()}.\")\nprint(f\"The number of NA's in struct is {struct.isna().sum().sum()}.\")\nprint(f\"\\nThe column names of train are \\n{train.columns}.\")\nprint(f\"\\nThe column names of test are \\n{test.columns}.\")\nprint(f\"\\nThe column names of struct are \\n{struct.columns}.\")","52da29b7":"train.head(20)","caceb52e":"test.head(20)","c85d1211":"struct.head(20)","8d96ca24":"%%time\n\ncols=test.columns\n\ndata=pd.concat([train[cols], test])","dfba09b6":"data.describe()","e2890fbb":"print(f\"The number of molecules in the train set is {train['molecule_name'].nunique()}.\")\nprint(f\"The number of molecules in the test set is {test['molecule_name'].nunique()}\")\n\nprint(f\"\\nThe number of interaction types in the train set is {train['type'].nunique()}.\")\nprint(f\"The number of interaction types in the test set is {test['type'].nunique()}\")\nprint(f\"The number of interaction types in the train and test sets combined is {data['type'].nunique()}\")\n\nprint(f\"\\nThe number of atomic types in struct is {struct['atom'].nunique()}\")","8d45d36b":"types_count = data['type'].value_counts()\ntypes_order = types_count.index.values\ntypes_count","876c3c8d":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nwidth = 22\nheight = 7\nfs = '24'\n\nplt.figure(figsize=(width, height))\n\nsns.set(font_scale=1.6)\n\nplt.subplot(1, 3, 1)\nsns.countplot(data['type'], order=types_order)\nplt.title('train+test', fontsize=fs)\nplt.ylabel('Counts')\n\nplt.subplot(1, 3, 2)\nsns.countplot(train['type'], order=types_order)\nplt.title('train', fontsize=fs)\nplt.ylabel('Counts')\n\nplt.subplot(1, 3, 3)\nsns.countplot(test['type'], order=types_order)\nplt.title('test', fontsize=fs)\nplt.ylabel('Counts')\n\nplt.tight_layout()","7125d94b":"struct['atom'].value_counts()","cadd781a":"width = 6\nheight = 6\nfs = '20'\nfs_label = '17'\n\nplt.figure(figsize=(width, height))\n\nsns.set(font_scale=1.2)\n\nsns.countplot(x='atom', data=struct, order = struct['atom'].value_counts().index)\nplt.title(\"Atoms present in the 'struct' file\", fontsize=fs)\nplt.xlabel('Atoms', fontsize=fs_label)\nplt.ylabel('Counts', fontsize=fs_label)\n\nplt.tight_layout()","8085327d":"print(f\"The minimum values of the 'atom_index_1' and 'atom_index_2' are {data.atom_index_0.min()}\" \\\n      f\" and {data.atom_index_1.min()}, respectively.\")\n\nprint(f\"The maximum values of the 'atom_index_1' and 'atom_index_2' are {data.atom_index_0.max()}\" \\\n      f\" and {data.atom_index_1.max()}, respectively.\")","4b05e069":"atom_counts = data.groupby('molecule_name').size().reset_index(name='count')\natom_counts.head()","79899bf5":"atom_counts.tail()","f94bfde4":"print(f\"The total number of molecules in train and test is {len(atom_counts)}.\")\nprint(f\"The minimum number of couplings per molecule is {np.min(atom_counts['count'].values)}.\")\nprint(f\"The maximum number of couplings per moluecule is {np.max(atom_counts['count'].values)}.\")","03a51f29":"coupling_types = train['type'].unique()\n\ncoupling_types","4714e310":"%%time\n\nvsize = 4\nhsize = 2\n\nplt.figure()\nfig, ax = plt.subplots(vsize,hsize,figsize=(18,20))\n\nfor (i, ct) in enumerate(coupling_types):\n    i += 1\n    plt.subplot(vsize, hsize, i)\n\n    sns.distplot(train.loc[train['type'] == ct, 'scalar_coupling_constant'], color='blue', bins=60, label=ct)\n    \n    plt.title(\"Scalar Coupling Type \"+ct, fontsize='20')\n    plt.xlabel('Scalar Coupling Constant', fontsize='16')\n    plt.ylabel('Density', fontsize='16')\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='x', which='major', labelsize=16)#, pad=-40)\n    plt.tick_params(axis='y', which='major', labelsize=16)\n    #plt.legend(loc='best', fontsize='16')\n    \nplt.tight_layout()    \nplt.show()","0ddd2c71":"The distributions of the interaction types are very similar in train and test.","17562bad":"### Reading and inspecting data","305674e0":"### Counting values","dd0cf3cc":"### Importing libraries","4629b187":"Thus, the largest number of atoms in a molecule is 29.","8c4a8df8":"Let's take a little bit closer look at the number of atoms per molecule.","495a5e1a":"## Scalar Coupling Constants\n\nLet's take a look at the numerical values of the scalar coupling counstants in the train set. We will be groupping our observations by the interaction type.\n\nThe list of unique coupling types:"}}