{"cell_type":{"4e090f57":"code","74a793eb":"code","a02b6b18":"code","6909a811":"code","1774794e":"code","683a9da5":"code","c1d27d72":"code","faf295dd":"code","8aaed769":"code","033533b6":"code","77a80a2f":"code","98982752":"code","cf6473b0":"code","cd9356e3":"code","3e8f1d9c":"code","690cb0f0":"code","84f696d8":"code","ab84188c":"code","cfd7aba9":"code","76597e87":"code","cc5935b7":"code","afb39f28":"code","212eeb1e":"code","fe5551cf":"code","e387c225":"code","9889c777":"code","cb14d65f":"code","a6f1ad5b":"code","b5c99313":"code","68798e17":"code","01c2a34c":"code","aa078e2f":"code","958fbd5a":"code","c3e9475b":"code","e47ef019":"code","1056d6bf":"code","8463734d":"code","57ebc435":"code","ae248cd3":"code","13bc7e4f":"code","e7908613":"code","25a9cd39":"code","20632f94":"code","0b8fea2e":"code","4c2230d6":"code","e4c031e5":"code","5602416d":"markdown","13328795":"markdown","db2c9916":"markdown","f335a4ae":"markdown","39fb59f5":"markdown","8ecc0601":"markdown","eb14e918":"markdown","d8368ac0":"markdown","17e1c159":"markdown","154ccb1b":"markdown","65cd28c8":"markdown","80469413":"markdown","33670c41":"markdown","f288ece3":"markdown","f52be4e8":"markdown","9a8ade02":"markdown"},"source":{"4e090f57":"# numerical computation\nimport numpy as np\n\n# data processing\/manipulation\nimport pandas as pd\npd.options.mode.chained_assignment = None\nimport re\n\n# data visualization\nimport matplotlib.pyplot as plt\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport plotly.express as px\n\n# stopwords, tokenizer, stemmer\nimport nltk  \nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\nfrom nltk.probability import FreqDist\n\n# spell correction, lemmatization\nfrom textblob import TextBlob\nfrom textblob import Word\n\n# sklearn\nfrom sklearn.model_selection import train_test_split","74a793eb":"# Loading each dataset\ntrump_df = pd.read_csv('..\/input\/us-election-2020-tweets\/hashtag_donaldtrump.csv', lineterminator='\\n')\nbiden_df = pd.read_csv('..\/input\/us-election-2020-tweets\/hashtag_joebiden.csv', lineterminator='\\n')","a02b6b18":"# Looking at the first 5 rows of trump_df\ntrump_df.head()","6909a811":"# Looking at the shape of trump_df (rows, columns)\ntrump_df.shape","1774794e":"# Getting some insights on trump_df dataset (with describe())\ntrump_df.describe()","683a9da5":"# More insights on trump_dfset with info()\ntrump_df.info()","c1d27d72":"# Looking at the first 5 rows of biden_df\nbiden_df.head()","faf295dd":"# Looking at the shape of biden_df (rows, columns)\nbiden_df.shape","8aaed769":"# Getting some insights on biden_df dataset with describe()\nbiden_df.describe()","033533b6":"# More insights on trump_dfset with info()\nbiden_df.info()","77a80a2f":"# Remove unneeded columns\ntrump_df = trump_df.drop(columns=['tweet_id','user_id','user_name','user_screen_name',\n                                  'user_description','user_join_date','collected_at'])\nbiden_df = biden_df.drop(columns=['tweet_id','user_id','user_name','user_screen_name',\n                                  'user_description','user_join_date','collected_at'])\n\n# Renaming columns\ntrump_df = trump_df.rename(columns={\"likes\": \"Likes\", \"retweet_count\": \"Retweets\", \n                                    \"state\": \"State\", \"user_followers_count\": \"Followers\"})\nbiden_df = biden_df.rename(columns={\"likes\": \"Likes\", \"retweet_count\": \"Retweets\", \n                                    \"state\": \"State\", \"user_followers_count\": \"Followers\"})\n\n# Update United States country name for consistency\nd = {\"United States of America\":\"United States\"}\ntrump_df['country'].replace(d, inplace=True)\nbiden_df['country'].replace(d, inplace=True)\n\ntrump_df = trump_df.loc[trump_df['country'] == \"United States\"]\nbiden_df = biden_df.loc[biden_df['country'] == \"United States\"]\n\n# Drop null rows\ntrump_df = trump_df.dropna()\nbiden_df = biden_df.dropna()","98982752":"to_remove = r'\\d+|http?\\S+|[^A-Za-z0-9]+'\nstop_words = set(stopwords.words('english'))\nps = PorterStemmer()\n\n# Function to preprocess tweet \ndef clean_tweet(tweet, stem=False, lemmatize=False):\n\n    # Make all text lowercase\n    tweet = tweet.lower()\n    \n    # Remove links, special characters, punctuation, numbers, etc.\n    tweet = re.sub(to_remove, ' ', tweet)\n        \n    filtered_tweet = []\n    words = word_tokenize(tweet) \n\n    # Remove stopwords and stem\n    for word in words:\n        if not word in stop_words:\n            if stem:\n                filtered_tweet.append(ps.stem(word))\n            elif lemmatize:\n                filtered_tweet.append(Word(word).lemmatize())\n            else:\n                filtered_tweet.append(word)\n            \n    return filtered_tweet","cf6473b0":"# Filtering all trump and biden tweets by applying cleantweet()\ntrump_df.tweet = trump_df.tweet.apply(lambda x: clean_tweet(x))\nbiden_df.tweet = biden_df.tweet.apply(lambda x: clean_tweet(x))","cd9356e3":"# Looking at 5 trump tweets after filtering\ntrump_df.tweet.head()","3e8f1d9c":"# Looking at 5 trump tweets after filtering\nbiden_df.tweet.head()","690cb0f0":"# Function to perform sentitment analysis on trump and biden dataframes\ndef sentiment_analysis(df):\n    \n    # Determine polarity and subjectivity\n    df['Polarity'] = df['tweet'].apply(lambda x: TextBlob(' '.join(x)).sentiment.polarity)\n    df['Subjectivity'] = df['tweet'].apply(lambda x: TextBlob(' '.join(x)).sentiment.subjectivity)\n    \n    # Classify overall sentiment\n    df.loc[df.Polarity > 0,'Sentiment'] = 'positive'\n    df.loc[df.Polarity == 0,'Sentiment'] = 'neutral'\n    df.loc[df.Polarity < 0,'Sentiment'] = 'negative'\n    \n    return df[['tweet','Polarity','Subjectivity','Sentiment']].head()","84f696d8":"# Perform sentiment analysis on trump_df\nsentiment_analysis(trump_df)","ab84188c":"# Perform sentiment analysis on biden_df\nsentiment_analysis(biden_df)","cfd7aba9":"# Overall sentiment breakdown - Trump \nprint(\"Trump Tweet Sentiment Breakdown\")\n\ntrump_positive = len(trump_df.loc[trump_df.Sentiment=='positive'])\ntrump_neutral = len(trump_df.loc[trump_df.Sentiment=='neutral'])\ntrump_negative = len(trump_df.loc[trump_df.Sentiment=='negative'])\n\nprint(\"Number of Positive Tweets: \", trump_positive)\nprint(\"Number of Neutral Tweets: \", trump_neutral)\nprint(\"Number of Negative Tweets: \", trump_negative)","76597e87":"# Graphing the number of trump tweets by sentiment\ndata_t = {'Positive':trump_positive,'Neutral':trump_neutral,'Negative':trump_negative}\nsentiment_t = list(data_t.keys()) \nnum_tweets_t = list(data_t.values()) \n\nplt.figure(figsize = (8, 5)) \n\nplt.bar(sentiment_t, num_tweets_t, color ='red', width = 0.5, edgecolor='black',) \n\nplt.xlabel(\"Sentiment\", fontweight ='bold') \nplt.ylabel(\"Number of Tweets\", fontweight ='bold') \nplt.title(\"Trump Tweets by Sentiment\", fontweight ='bold') \nplt.show() ","cc5935b7":"# Overall sentiment breakdown - Biden \nprint(\"Biden Tweet Sentiment Breakdown\")\n\nbiden_positive = len(biden_df.loc[biden_df.Sentiment=='positive'])\nbiden_neutral = len(biden_df.loc[biden_df.Sentiment=='neutral'])\nbiden_negative = len(biden_df.loc[biden_df.Sentiment=='negative'])\n\nprint(\"Number of Positive Tweets: \", biden_positive)\nprint(\"Number of Neutral Tweets: \", biden_neutral)\nprint(\"Number of Negative Tweets: \", biden_negative)","afb39f28":"# Graphing the number of biden tweets by sentiment\ndata_b = {'Positive':biden_positive,'Neutral':biden_neutral,'Negative':biden_negative}\nsentiment_b = list(data_b.keys()) \nnum_tweets_b = list(data_b.values()) \n\nplt.figure(figsize = (8, 5)) \n\nplt.bar(sentiment_b, num_tweets_b, color ='blue', width = 0.5, edgecolor='black') \n\nplt.xlabel(\"Sentiment\", fontweight ='bold') \nplt.ylabel(\"Number of Tweets\", fontweight ='bold') \nplt.title(\"Biden Tweets by Sentiment\", fontweight ='bold') \nplt.show() ","212eeb1e":"# Calculate relative percentages by sentiment - Trump\ntotal_tweets_t = len(trump_df.Sentiment)\nprop_tweets_t = list(map(lambda x: round(x\/total_tweets_t,2), num_tweets_t))\n\n# Calculate relative percentages by sentiment - Biden\ntotal_tweets_b = len(biden_df.Sentiment)\nprop_tweets_b = list(map(lambda x: round(x\/total_tweets_b,2), num_tweets_b))","fe5551cf":"# Graphing relative percentages of both trump and biden tweets\nbar_width = 0.25\nplt.subplots(figsize=(8,8))\n\nbr1 = np.arange(3) \nbr2 = [x + bar_width for x in br1] \n\nt = plt.bar(br1, prop_tweets_t, color ='r', width = bar_width, \n            edgecolor ='black', label ='Trump') \nb = plt.bar(br2, prop_tweets_b, color ='b', width = bar_width, \n            edgecolor ='black', label ='Biden') \n   \nplt.xlabel('Sentiment',fontweight ='bold') \nplt.ylabel('Percentage of Tweets',fontweight ='bold') \nplt.xticks([r + bar_width\/2 for r in range(3)],['Positive','Neutral','Negative'])\nplt.legend([t,b],['Percentage of Trump Tweets','Percentage of Biden Tweets'])\nplt.ylim(0.0, 1.0)\nplt.title('Proportions of Tweets By Sentiment',fontweight ='bold')\n\nplt.show()","e387c225":"# Function to return a string of all words in all tweets\ndef get_all_tweets(df,by_sentiment=False,sentiment=\"positive\"):\n    \n    # Combine all words in tweets into a string\n    if by_sentiment:\n        if sentiment == \"positive\":\n            words = ' '.join((df.loc[df.Sentiment=='positive'])['tweet'].apply(lambda x: ' '.join(x)))\n        elif sentiment == \"neutral\":\n            words = ' '.join((df.loc[df.Sentiment=='neutral'])['tweet'].apply(lambda x: ' '.join(x)))\n        else:\n            words = ' '.join((df.loc[df.Sentiment=='negative'])['tweet'].apply(lambda x: ' '.join(x)))\n    else:\n        words = ' '.join(df['tweet'].apply(lambda x: ' '.join(x)))\n        \n    return words","9889c777":"# Create word strings\nwords_trump = get_all_tweets(trump_df)\nwords_pos_trump = get_all_tweets(trump_df,True,\"positive\")\nwords_neu_trump = get_all_tweets(trump_df,True,\"neutral\")\nwords_neg_trump = get_all_tweets(trump_df,True,\"negative\")\n\nwords_biden = get_all_tweets(biden_df)\nwords_pos_biden = get_all_tweets(biden_df,True,\"positive\")\nwords_neu_biden = get_all_tweets(biden_df,True,\"neutral\")\nwords_neg_biden = get_all_tweets(biden_df,True,\"negative\")\n\n# Tokenize word strings\ntokens_trump = word_tokenize(words_trump)\ntokens_pos_trump = word_tokenize(words_pos_trump)\ntokens_neu_trump = word_tokenize(words_neu_trump)\ntokens_neg_trump = word_tokenize(words_neg_trump)\n\ntokens_biden = word_tokenize(words_biden)\ntokens_pos_biden = word_tokenize(words_pos_biden)\ntokens_neu_biden = word_tokenize(words_neu_biden)\ntokens_neg_biden = word_tokenize(words_neg_biden)","cb14d65f":"# Function to plot most frquent words\ndef plot_word_freq(tokens,sentiment,t_or_b,color):\n    fdist = FreqDist(tokens)\n    fdist_df = pd.DataFrame(fdist.most_common(10), columns = [\"Word\",\"Frequency\"])\n    fig = px.bar(fdist_df, x=\"Word\", y=\"Frequency\",\n                 title=\"<b>Most Frequently Used Words in <\/b>\" + sentiment + \" \" + t_or_b + \"<b>-Related Tweets<\/b>\")\n    fig.update_traces(marker=dict(color=color),selector=dict(type=\"bar\"),\n                      marker_line_color='black', marker_line_width=1.5, opacity=0.6)\n    fig.show()","a6f1ad5b":"# Most frequent words in all trump tweets\nplot_word_freq(tokens_trump,\"<b>ALL<\/b>\",\"<b>Trump<\/b>\",\"red\")","b5c99313":"# Most frequent words in positive trump tweets\nplot_word_freq(tokens_pos_trump,\"<b>POSITIVE<\/b>\",\"<b>Trump<\/b>\",\"red\")","68798e17":"# Most frequent words in neutral trump tweets\nplot_word_freq(tokens_neu_trump,\"<b>NEUTRAL<\/b>\",\"<b>Trump<\/b>\",\"red\")","01c2a34c":"# Most frequent words in negative trump tweets\nplot_word_freq(tokens_neg_trump,\"<b>NEGATIVE<\/b>\",\"<b>Trump<\/b>\",\"red\")","aa078e2f":"# Most frequent words in all biden tweets\nplot_word_freq(tokens_biden,\"<b>ALL<\/b>\",\"<b>Biden<\/b>\",\"blue\")","958fbd5a":"# Most frequent words in positive biden tweets\nplot_word_freq(tokens_pos_biden,\"<b>POSITIVE<\/b>\",\"<b>Biden<\/b>\",\"blue\")","c3e9475b":"# Most frequent words in neutral biden tweets\nplot_word_freq(tokens_neu_biden,\"<b>NEUTRAL<\/b>\",\"<b>Biden<\/b>\",\"blue\")","e47ef019":"# Most frequent words in negative biden tweets\nplot_word_freq(tokens_neg_biden,\"<b>NEGATIVE<\/b>\",\"<b>Biden<\/b>\",\"blue\")","1056d6bf":"# Function to generate word cloud\ndef create_wordcloud(words):\n    \n    # create wordcloud\n    wordcloud = WordCloud(max_font_size=200, max_words=200, \n                          background_color=\"white\").generate(words)\n\n    # display the generated image\n    plt.figure(1,figsize=(13, 13))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()","8463734d":"# Generate word cloud of trump tweets\ncreate_wordcloud(words_trump)","57ebc435":"# Generate word cloud of biden tweets\ncreate_wordcloud(words_biden)","ae248cd3":"# Ploting polarity by state\nfig = px.scatter(trump_df, x=\"State\", y=\"Polarity\", color=\"Polarity\",\n                title=\"<b>Trump-Related Tweet Polarity by State<\/b>\",\n                color_continuous_scale=px.colors.sequential.Inferno,\n                width=1000, height=800)\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","13bc7e4f":"# Average polarity by state (trump)\ntrump_state_polarity = trump_df.groupby(\"State\",as_index=False).mean()\n\nfig = px.bar(trump_state_polarity, x=\"State\", y=\"Polarity\",\n            title=\"<b>Average Polarity of Trump-Related Tweets by State<\/b>\")\nfig.update_traces(marker=dict(color=\"red\"),selector=dict(type=\"bar\"),\n                  marker_line_color='black', marker_line_width=0.8, opacity=0.6)\nfig.show()","e7908613":"# Ploting polarity by state - Biden\nfig = px.scatter(biden_df, x=\"State\", y=\"Polarity\", color=\"Polarity\",\n                title=\"<b>Biden-Related Tweet Polarity by State<\/b>\",\n                color_continuous_scale=px.colors.sequential.Inferno,\n                width=1000, height=800)\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","25a9cd39":"# Average polarity by state - Biden\nbiden_state_polarity = biden_df.groupby(\"State\",as_index=False).mean()\n\nfig = px.bar(biden_state_polarity, x=\"State\", y=\"Polarity\",\n            title=\"<b>Average Polarity of Biden-Related Tweets by State<\/b>\")\nfig.update_traces(marker=dict(color=\"blue\"),selector=dict(type=\"bar\"),\n                  marker_line_color='black', marker_line_width=0.8, opacity=0.6)\nfig.show()","20632f94":"# Polarity by Likes - Trump\nfig = px.scatter(trump_df, x=\"Likes\", y=\"Polarity\", color=\"Polarity\",\n                title=\"<b>Trump-Related Tweet Polarity by Number of Likes<\/b>\",\n                color_continuous_scale=px.colors.sequential.Inferno,\n                width=1000, height=800)\nfig.show()","0b8fea2e":"# Polarity by Likes - Biden\nfig = px.scatter(biden_df, x=\"Likes\", y=\"Polarity\", color=\"Polarity\",\n                title=\"<b>Biden-Related Tweet Polarity by Number of Likes<\/b>\",\n                color_continuous_scale=px.colors.sequential.Inferno,\n                width=1000, height=800)\nfig.show()","4c2230d6":"# Polarity by Retweets - Trump\nfig = px.scatter(trump_df, x=\"Retweets\", y=\"Polarity\", color=\"Polarity\",\n                title=\"<b>Trump-Related Tweet Polarity by Number of Retweets<\/b>\",\n                color_continuous_scale=px.colors.sequential.Inferno,\n                width=1000, height=800)\nfig.show()","e4c031e5":"# Polarity by Retweets - Biden\nfig = px.scatter(biden_df, x=\"Retweets\", y=\"Polarity\", color=\"Polarity\",\n                title=\"<b>Biden-Related Tweet Polarity by Number of Retweets<\/b>\",\n                color_continuous_scale=px.colors.sequential.Inferno,\n                width=1000, height=800)\nfig.show()","5602416d":"<a id=\"Trump-Tweets\"><\/a>\n# Trump Tweets - First Glance","13328795":"<a id=\"Sentiment-by-Retweets\"><\/a>\n## Polarity by Retweets","db2c9916":"<a id=\"Loading-Necessary-Libraries\"><\/a>\n# Loading Necessary Libraries","f335a4ae":"<a id=\"Number-of-Tweets-by-Sentiment\"><\/a>\n## Number of Tweets by Sentiment","39fb59f5":"<a id=\"Dataset-Alterations\"><\/a>\n# Dataset Alterations","8ecc0601":"<a id=\"Word-Frequencies\"><\/a>\n## Word Frequencies","eb14e918":"# Table of Contents\n* [Loading Necessary Libraries](#Loading-Necessary-Libraries)\n* [Reading the Datasets](#Reading-the-Datasets)\n* [Trump Tweets - First Glance](#Trump-Tweets)\n* [Biden Tweets - First Glance](#Biden-Tweets)\n* [Dataset Alterations](#Dataset-Alterations)\n* [Preprocessing Tweets](#Preprocessing-Tweets)\n* [Sentiment Analysis](#Sentiment-Analysis)\n* [Data Visualization](#Data-Visualization)\n    - [Number of Tweets by Sentiment](#Number-of-Tweets-by-Sentiment)\n    - [Word Frequencies](#Word-Frequencies)   \n    - [Word Clouds](#Word-Clouds)\n    - [Polarity by State](#Polarity-by-State)    \n    - [Polarity by Likes](#Polarity-by-Likes)\n    - [Polarity by Retweets](#Polarity-by-Retweets)    ","d8368ac0":"<a id=\"Data-Visualization\"><\/a>\n# Data Visualization","17e1c159":"<a id=\"Word-Clouds\"><\/a>\n## Word Clouds","154ccb1b":"<a id=\"Reading-the-Datasets\"><\/a>\n# Reading the Datasets","65cd28c8":"<a id=\"Preprocessing-Tweets\"><\/a>\n# Preprocessing Tweets","80469413":"<a id=\"Sentiment-by-Likes\"><\/a>\n## Polarity by Likes","33670c41":"<a id=\"Sentiment-Analysis\"><\/a>\n# Sentiment Analysis","f288ece3":"<a id=\"Polarity-by-State\"><\/a>\n## Polarity by State","f52be4e8":"# Sentiment Analysis of Tweets Pertaining to Donald Trump and Joe Biden\n\nSeeing what insights can be derived from performing a sentiment analysis on Tweets scraped from Twitter using Snsscrape and Twitter API with keywords #DonaldTrump and #Trump (hashtag_donaldtrump.csv) and #JoeBiden and #Biden (hashtag_joebiden.csv).\n\nThe data files include over 1.7 million tweets collectively and were collected between the dates of 10\/15\/2020 and 11\/04\/2020.","9a8ade02":"<a id=\"Biden-Tweets\"><\/a>\n# Biden Tweets - First Glance"}}