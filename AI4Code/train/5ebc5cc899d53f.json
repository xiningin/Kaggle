{"cell_type":{"7d605c4d":"code","11910e8e":"code","2df4f5d2":"code","a2be18b3":"code","189405c7":"code","1a5d1e63":"code","c317f4dd":"code","ea68a7d7":"code","50d17d1e":"code","33a1a3ca":"code","19a5576e":"code","e89594d9":"code","61285c0d":"code","864ae1f2":"code","4cc33784":"code","4b1361ba":"code","2fca3cea":"code","e2a0dd52":"code","ecab8ae9":"code","556685ac":"code","988be1c3":"code","31ec9b99":"code","ba817092":"code","2f64b532":"code","92fadd3d":"code","6ac1770b":"code","aedf865c":"code","fc1af83b":"code","aa20d052":"code","ec8a2ca1":"code","6b6d3ee7":"code","6b7bb4ef":"code","9ea975a2":"code","6f1e567c":"code","0f364793":"code","5b44c119":"code","b743746d":"code","f7b8cddd":"code","c3fbefec":"code","a30571c8":"code","ef66530d":"code","385c9332":"code","450b899b":"code","9a929e35":"code","380470d3":"code","7b395366":"code","67037e41":"markdown","ed09d9aa":"markdown","0807071b":"markdown","f0fd74b6":"markdown","5a2f4db9":"markdown","73712944":"markdown","fa4f0fde":"markdown","6f82e7d7":"markdown"},"source":{"7d605c4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11910e8e":"df = pd.read_csv('\/kaggle\/input\/hr-analytics\/HR_comma_sep.csv')","2df4f5d2":"import seaborn as sns\nfrom matplotlib import pyplot as plt","a2be18b3":"df.left = df.left.map({\n    0:'False',  #True (1) or False (0) in boolean logic. \n    1:'True'\n})\ndf","189405c7":"df.dtypes","1a5d1e63":"df.isnull().sum()","c317f4dd":"df = df.apply(lambda x: x.strip() if isinstance(x, str) else x)","ea68a7d7":"_=sns.heatmap(df.drop(['Department', 'salary'], axis=1).corr(), annot=True,cmap='YlGnBu')","50d17d1e":"\nplt.figure(figsize=(8,8))\nax=sns.countplot(data=df,x=df['left'],order=df['left'].value_counts().index)\nplt.xlabel('Target Variable- Salary')\nplt.ylabel('Distribution of target variable')\nplt.title('Distribution of Salary')\ntotal = len(df)\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100*p.get_height()\/total), (p.get_x()+0.1, p.get_height()+100))","33a1a3ca":"\nax=pd.crosstab(df.salary,df.left).plot(kind='bar',figsize=(8,8))\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100*p.get_height()\/total), (p.get_x()+0.1, p.get_height()+100))","19a5576e":"\nax=pd.crosstab(df.Department,df.left).plot(kind='bar',figsize=(8,8))\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100*p.get_height()\/total), (p.get_x()+0.1, p.get_height()+60))","e89594d9":"_=sns.boxplot(y=df.left,x=df.satisfaction_level,orient='horizontal',hue=df.left, palette=\"Set2\")\n","61285c0d":"_=sns.boxplot(y=df.left,x=df.last_evaluation,orient='horizontal',hue=df.left, palette=\"Set3\")","864ae1f2":"_=sns.boxplot(y=df.left,x=df.number_project,orient='horizontal',hue=df.left, palette=\"Set1\")","4cc33784":"a=df[(df.left=='False') & (df.number_project==6)]\nprint(df.shape)\na","4b1361ba":"df=df[df.apply(lambda x: x.values.tolist() not in a.values.tolist(), axis=1)]\ndf.shape","2fca3cea":"sns.boxplot(y=df.left,x=df.number_project,orient='horizontal',hue=df.left, palette=\"Set1\")","e2a0dd52":"_=sns.boxplot(y=df.left,x=df.average_montly_hours,orient='horizontal',hue=df.left, palette=\"Set2\")","ecab8ae9":"_=sns.boxplot(y=df.left,x=df.time_spend_company,orient='horizontal',hue=df.left, palette=\"Set3\")","556685ac":"df.shape","988be1c3":"df = df[df.time_spend_company<8]\ndf.shape","31ec9b99":"sns.boxplot(y=df.left,x=df.promotion_last_5years,orient='horizontal',hue=df.left, palette=\"Set1\")","ba817092":"df.drop('promotion_last_5years', inplace=True, axis=1)\ndf.head()","2f64b532":"_=sns.distplot(df['satisfaction_level'],kde=False)","92fadd3d":"_=sns.distplot(df['last_evaluation'],kde=False)","6ac1770b":"_=sns.distplot(df['number_project'],kde=False)","aedf865c":"_=sns.distplot(df['average_montly_hours'],kde=False)","fc1af83b":"_=sns.distplot(df['time_spend_company'],kde=False)","aa20d052":"df.head()","ec8a2ca1":"dummies1 = pd.get_dummies(df.salary)\ndummies1 = dummies1.drop('low', axis=1)\ndummies1","6b6d3ee7":"df.drop('salary',axis=1,inplace=True)","6b7bb4ef":"dummies2 = pd.get_dummies(df.Department)\ndummies2 = dummies2.drop('sales', axis=1)\ndummies2","9ea975a2":"df.drop('Department',axis=1,inplace=True)","6f1e567c":"df = pd.concat([df,dummies1], axis='columns') \ndf = pd.concat([df,dummies2], axis='columns') \ndf","0f364793":"X = df.drop('left', axis=1).values\nX","5b44c119":"y = df.left\ny","b743746d":"from sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit(X).transform(X.astype(float))\nX","f7b8cddd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=10)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)\n","c3fbefec":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import jaccard_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression","a30571c8":"drugTree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4) #max_depth maximum depth of tree\ndrugTree.fit(X_train,y_train) ","ef66530d":"#itterating to find the best k value\nKs = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","385c9332":"#Plot model accuracy for Different number of Neighbors\n\nplt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10) #showing 68% data\nplt.legend(('Accuracy ', '+\/- 1xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()\n","450b899b":"#Training\n\nk = 1\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nneigh\n","9a929e35":"LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)\nLR\n","380470d3":"print(\"Decision Tree's Accuracy: \", metrics.accuracy_score(y_test, drugTree.predict(X_test)))\nprint(\"KNN's Accuracy: \", metrics.accuracy_score(y_test, neigh.predict(X_test)))\nprint(\"LR's Accuracy: \", metrics.accuracy_score(y_test, LR.predict(X_test)))\n","7b395366":"print(\"DT:\", classification_report(y_test,  drugTree.predict(X_test)))\nprint(\"KNN:\", classification_report(y_test,  neigh.predict(X_test)))\nprint(\"Logr:\", classification_report(y_test, LR.predict(X_test)))\n","67037e41":"## KNN","ed09d9aa":"**One Hote Encoding**","0807071b":"**Impact of salary on employee retention**","f0fd74b6":"## Decision Tree","5a2f4db9":"### Model Evaluation","73712944":"**Department wise employee retention rate**","fa4f0fde":"## Logistic Regression","6f82e7d7":"## Modeling"}}