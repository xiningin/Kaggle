{"cell_type":{"0906bce4":"code","2e3d2243":"code","57b33baf":"code","4d1e3b06":"code","c5af90a7":"code","2e2df754":"code","f672b1b0":"code","908ece73":"code","b4fbbb91":"code","75bbb7bc":"code","8ada6ca7":"code","9854ad7b":"code","6c00c916":"code","3d630d0c":"code","a0c294db":"code","4e5e9386":"code","4ecbf05d":"code","5eba10e0":"code","a5557791":"code","52c0e759":"code","b875bc94":"code","5ba26b33":"code","9bbcb993":"code","20bca382":"code","23cae51d":"markdown","1a1b4bd1":"markdown","a83001b0":"markdown","54d374e0":"markdown","a2587f78":"markdown","43738a03":"markdown","d3515241":"markdown","c78ec208":"markdown"},"source":{"0906bce4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n","2e3d2243":"data_1 = pd.read_csv(\"..\/input\/311-nyc-open-data-hpd\/fhrw-4uyv.csv\")\ndata_1.head()","57b33baf":"\n# Combine values because heat\/hot water is same as heating, and so on. \ndata_1['complaint_type'] = data_1['complaint_type'].replace(\"HEAT\/HOT WATER\",\"HEATING\").replace(\"Plumbing\",\"PLUMBING\").replace((\"General\",\"GENERAL\",\"CONSTRUCTION\"),\"GENERAL CONSTRUCTION\").replace(\"Unsanitary Condition\",\"UNSANITARY CONDITION\").replace(\"Safety\",\"SAFETY\").replace(\"Outside Building\",\"OUTSIDE BUILDING\").replace(\"Appliance\",\"APPLIANCE\").replace(\"Electric\",\"ELECTRIC\").replace(\"PAINT - PLASTER\",\"PAINT\/PLASTER\").replace((\"STRUCTURAL\",\"AGENCY\",\"VACANT APARTMENT\",\"Mold\"),\"OTHER\")\ndata_1['complaint_type'].value_counts()","4d1e3b06":"#pie chart\ndf_complaint = data_1['complaint_type'].value_counts()\ndf_complaint = pd.DataFrame(df_complaint)\ndf_complaint = df_complaint.reset_index()\ndf_complaint.columns = ['Complaint_type',\"Count\"]\ndf_complaint = df_complaint.set_index(\"Complaint_type\")\n\nexplode_list = [0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0.2,0.2]\ndf_complaint['Count'].plot(kind=\"pie\",\n                 figsize=(14,8),\n                 autopct='%1.2f%%',\n                 shadow=True,\n                 labels=None,\n                 pctdistance=1.12,\n                 explode=explode_list)\n\n\nplt.title(\"Pie Chart\")\nplt.axis('equal')\nplt.legend(labels=df_complaint.index, loc='best') ","c5af90a7":"df_complaint.plot(kind='barh',\n                 figsize=(14,8))\nplt.title(\"Bar Chart for Complaint Types\")\nplt.xlabel(\"Total Number\")\nplt.ylabel(\"Complaint Types\")","2e2df754":"data_heat_time = data_1[['created_date','complaint_type']]\ndata_heat_time = data_heat_time.loc[data_heat_time['complaint_type']=='HEATING']\ndata_heat_time.created_date = pd.to_datetime(data_heat_time.created_date)\ndata_heat_time = data_heat_time.groupby(data_heat_time['created_date'].dt.year).count()\ndata_heat_time = data_heat_time.assign(complaint_type='HEATING')\ndata_heat_time.drop('complaint_type',inplace=True,axis=1)\ndata_heat_time\nplt.bar(data_heat_time.index, data_heat_time.created_date,\n       color='red')\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number\")\nplt.title(\"The Total Number of Complaint Type HEATING Yearly Occurance\")","f672b1b0":"# I created a new dataframe with slected objects.\ntop_complaint = data_1[['complaint_type','incident_zip','street_name','borough']]\ntop_complaint = top_complaint[top_complaint.complaint_type=='HEATING'].reset_index(drop=True)\ntop_complaint.head()","908ece73":"# Bar chart based zip code.\ncolors=['r','b','yellow','grey','green','pink','orange','black','brown','purple']\nseries_zip = top_complaint['incident_zip'].value_counts().head(10)\ntotal_value = series_zip.sum()\ntop_complaint['incident_zip'].value_counts().head(10).plot(kind=\"barh\",\n                                                          figsize=(10,6),\n                                                          color=colors)\nplt.xlabel('Zip Code') # add to x-label to the plot\nplt.ylabel('Number of occurance') # add y-label to the plot\nplt.title('HEATING Reports Amount by Borough') # add title to the plot\n#\nfor index, value in enumerate(series_zip):\n    label =  '{}%'.format(round((value\/total_value)*100, 2)) \n    plt.annotate(label, xy=(value + 2000, index- 0.05), color='black')\n\nplt.show()","b4fbbb91":"# Bar chart based borough.\ncolors=['r','b','yellow','grey','green','pink','orange','black','brown','purple']\nseries_zip = top_complaint['borough'].value_counts().head(10)\ntotal_value = series_zip.sum()\ntop_complaint['borough'].value_counts().head(10).plot(kind=\"barh\",\n                                                          figsize=(10,6),\n                                                          color=colors)\nplt.xlabel('Borough') # add to x-label to the plot\nplt.ylabel('Number of occurance') # add y-label to the plot\nplt.title('HEATING Reports Amount by Borough') # add title to the plot\n#\nfor index, value in enumerate(series_zip):\n    label =  '{}%'.format(round((value\/total_value)*100, 2)) \n    plt.annotate(label, xy=(value + 2000, index- 0.05), color='black')\n\nplt.show()","75bbb7bc":"# Bar chart based on street.\ncolors=['r','b','yellow','grey','green','pink','orange','black','brown','purple']\nseries_zip = top_complaint['street_name'].value_counts().head(10)\ntotal_value = series_zip.sum()\ntop_complaint['street_name'].value_counts().head(10).plot(kind=\"barh\",\n                                                          figsize=(10,6),\n                                                          color=colors)\nplt.xlabel('Number of occurance') # add to x-label to the plot\nplt.ylabel('Street Name') # add y-label to the plot\nplt.title('HEATING Reports Amount by street_name') # add title to the plot\n#\nfor index, value in enumerate(series_zip):\n    label =  '{}%'.format(round((value\/total_value)*100, 2)) \n    plt.annotate(label, xy=(value + 2000, index- 0.05), color='black')\n\nplt.show()","8ada6ca7":"top_complaint[top_complaint.street_name == 'GRAND CONCOURSE'].head(10)\ntop_complaint[top_complaint.incident_zip == 11226.0].head(10)","9854ad7b":"#Create a new data fram that only contain HEATING complaint type, incident address and borough that is \"BRONX\"\ndf_bronx_complaint = data_1[[\"complaint_type\", 'incident_address',\"borough\"]]\nprint(df_bronx_complaint.shape)\ndf_bronx_complaint = df_bronx_complaint[(df_bronx_complaint.complaint_type==\"HEATING\") &(df_bronx_complaint.borough==\"BRONX\")].reset_index(drop=True)\nprint(df_bronx_complaint.shape)\nprint(df_bronx_complaint.head())\n#Create a data frame that has total number of complaint reports regarding to heating for each address\ndf_bronx_total = df_bronx_complaint.groupby(\"incident_address\").count()\ndf_bronx_total.drop(\"borough\",inplace=True,axis=1)\ndf_bronx_total.columns=['Total']\ndf_bronx_total","6c00c916":"#Import dataset for the house characterics of borough of BRONX\ndf_bronx = pd.read_csv((\"..\/input\/311-nyc-open-data-hpd\/BX_18v1.csv\"))\n\n#Select some important features.\ndf_bronx = df_bronx[['BldgArea','BldgDepth','Address',\"BuiltFAR\", \"CommFAR\", \n                    \"FacilFAR\", \"Lot\", \"LotArea\", \"LotDepth\", \"NumBldgs\", \"NumFloors\", \n                    \"OfficeArea\", \"ResArea\", \"ResidFAR\", \"RetailArea\", \"YearBuilt\", \"YearAlter1\", \"ZipCode\", \"YCoord\",\"XCoord\"]]\nprint(\"original shape:\", df_bronx.shape)\n\n#Check missing value from address columns and then drop rows\nprint(\"number of missing address: \",df_bronx['Address'].isnull().sum())\ndf_bronx = df_bronx.dropna(subset=['Address'])\nprint(\"after removing missing address shape: \",df_bronx.shape)\nprint(\"check to see if there are duplicate address:\" ,all(df_bronx['Address'].value_counts()==1))\n#check and remove duplicated address\ndf_bronx.drop_duplicates(subset=\"Address\", keep=\"first\", inplace=True)\nprint(\"After removing duplicated rows: \",df_bronx.shape)\n\nprint(\"check to see if there are duplicate address: \",any(df_bronx['Address'].value_counts()==1))\n#Merge two data frame\ndf_merged = pd.merge(df_bronx_total, df_bronx, right_on = \"Address\", left_index = True, how =\"right\")\ndf_merged.head()\n\n#correlation\ncorr1 = df_merged.corr(method=\"pearson\")\ncorr1","3d630d0c":"fig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\ncax = ax.matshow(corr1,cmap='coolwarm', vmin=-1, vmax=1)\nfig.colorbar(cax)\nticks = np.arange(0,len(df_merged.columns),1)\nax.set_xticks(ticks)\nplt.xticks(rotation=90)\nax.set_yticks(ticks)\nax.set_xticklabels(df_merged.columns)\nax.set_yticklabels(df_merged.columns)\nplt.show()","a0c294db":"# In this case, the better correlation is Spearman.In a monotonic relationship, the variables tend to move in the same relative direction, but not necessarily at a constant rate.\ncorr2 = df_merged.corr(method=\"spearman\")\ncorr2","4e5e9386":"fig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\ncax = ax.matshow(corr2,cmap='coolwarm', vmin=-1, vmax=1)\nfig.colorbar(cax)\nticks = np.arange(0,len(df_merged.columns),1)\nax.set_xticks(ticks)\nplt.xticks(rotation=90)\nax.set_yticks(ticks)\nax.set_xticklabels(df_merged.columns)\nax.set_yticklabels(df_merged.columns)\nplt.show()","4ecbf05d":"new_merged = df_merged.dropna(subset=['Total'])\nnew_merged.corr(method=\"spearman\")\n# Na values do not affect the result of correlation","5eba10e0":"from scipy import stats\n\npval_df = pd.DataFrame(columns = new_merged.columns[1:], index=['Spearman','P-value'])\n\nfor i in pval_df.columns:\n    spearman_coef, p_value = stats.spearmanr(new_merged['Total'],new_merged[i])\n    pval_df[i]['Spearman'] = spearman_coef\n    pval_df[i]['P-value'] = p_value\npval_df","a5557791":"df_merged.head()\ndf_merged.plot(kind=\"scatter\",x='BldgArea', y= 'Total')","52c0e759":"# First approch is classification. we create a new data frame contain response variable complaint type that can either be heating or not heating. \n# I use the predictive variables I achieved from question 3, they are \"BldgArea\",\"BldgDepth\",\"BuiltFAR\",\"LotArea\",\"NumFloors\",\"ResArea\". \n\n#Create a datafram with binary value for response variable\ndf_cf = df_merged[['Total',\"BldgArea\",\"BldgDepth\",\"BuiltFAR\",\"LotArea\",\"NumFloors\",\"ResArea\",\"LotArea\"]]\ndf_cf = df_cf.fillna(0)\ndf_cf['Total'] = np.where(df_cf['Total']>0, 1, 0)\ndf_cf.head()\n\n# split dataset into train and test set.\nfrom sklearn.model_selection import train_test_split\nx = df_cf.drop(['Total'], axis = 1)\ny = df_cf[['Total']]\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state=3)","b875bc94":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\n\nfor i in range(1,15):\n    Tree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = i)\n    Tree # it shows the default parameters\n    Tree.fit(x_train, y_train)\n    predTree = Tree.predict(x_test)\n    print(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_test, predTree),\"When max depth is: \",i)\n\n    \n# The best max depth is 5 because it has highest accuracy","5ba26b33":"# SVM\nfrom sklearn import svm\nclf = svm.SVC(kernel='rbf')\nclf.fit(x_train, y_train) \nyhat = clf.predict(x_test)\nprint(\"SVM's Accuracy: \", metrics.accuracy_score(y_test, predTree))\n","9bbcb993":"# Logistic Regression\n\n#standarlize all predictive variables because their values are \nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nx_train = preprocessing.StandardScaler().fit(x_train).transform(x_train)\nx_test = preprocessing.StandardScaler().fit(x_test).transform(x_test)\n\nlogit = LogisticRegression()\nlogit.fit(x_train,y_train)\nyhat = logit.predict(x_test)\nprint(\"The accuracy of logistic is: \",round(metrics.accuracy_score(y_test, yhat),2))\n\n\n","20bca382":"# K-Nearest Neighbors\nimport warnings\nfrom sklearn.exceptions import DataConversionWarning\nwarnings.filterwarnings(action='ignore', category=DataConversionWarning)\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nfor k in range(4,10): \n    neigh = KNeighborsClassifier(n_neighbors = k).fit(x_train,y_train)\n    yhat = neigh.predict(x_test)\n    print(\"The accuracy of KNN is :\", round(metrics.accuracy_score(yhat, y_test),2), \"when k is :\" ,k)\n    \n    \n","23cae51d":"Fromt the results above, we can see that the street name Grand Concourse which locates in Bronx has a lot of complaint about heating issue. And the zipcode 11226.0 is located in Brooklyn which are our top two boroughs having highest number of heating complaints. Therefore, the Department of Housing Preservation and Development of New York City should focus on Brooklyn and Bronx.","1a1b4bd1":"The people of New Yorker use the 311 system to report complaints about the non-emergency problems to local authorities. Various agencies in New York are assigned these problems. The Department of Housing Preservation and Development of New York City is the agency that processes 311 complaints that are related to housing and buildings.\nIn the last few years, the number of 311 complaints coming to the Department of Housing Preservation and Development has increased significantly. Although these complaints are not necessarily urgent, the large volume of complaints and the sudden increase is impacting the overall efficiency of operations of the agency.\n\nTherefore, the Department of Housing Preservation and Development has approached your organization to help them manage the large volume of 311 complaints they are receiving every year.\n\nThe agency needs answers to several questions. The answers to those questions must be supported by data and analytics. These are their  questions:\n\n1. Which type of complaint should the Department of Housing Preservation and Development of New York City focus on first?\n2. Should the Department of Housing Preservation and Development of New York City focus on any particular set of boroughs, ZIP codes, or street (where the complaints are severe) for the specific type of complaints you identified in response to Question 1?\n3. Does the Complaint Type that you identified in response to question 1 have an obvious relationship with any particular characteristic or characteristics of the houses or buildings?\n4. Can a predictive model be built for a future prediction of the possibility of complaints of the type that you have identified in response to question 1?","a83001b0":"# Question 1: Which type of complaint should the Department of Housing Preservation and Development of New York City focus on first?","54d374e0":"It is obvious that the type of complaint should the Department of Housing Preservation and Development of New York City focus on first is heating issue. It weighted 34.85% of all compaint reports.","a2587f78":"# Question 4: Can a predictive model be built for a future prediction of the possibility of complaints of the type that you have identified in response to question 1?","43738a03":"From the spearman correlation chart above, we can see that \"BldgArea\",\"BldgDepth\",\"BuiltFAR\",\"FacilFAR\",\"LotArea\",\"NumFloors\",\"ResArea\" these feature has more than 43% of positive correlation with number of heating complaint reports.","d3515241":"# Question 2: Should the Department of Housing Preservation and Development of New York City focus on any particular set of boroughs, ZIP codes, or street (where the complaints are severe) for the specific type of complaints you identified in response to Question 1","c78ec208":"# 3. Does the Complaint Type that you identified in response to question 1 have an obvious relationship with any particular characteristic or characteristics of the houses or buildings?"}}