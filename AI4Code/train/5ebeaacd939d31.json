{"cell_type":{"cc24d0f1":"code","e9bdd7ef":"code","a9507d25":"code","e6dee578":"code","3c786107":"code","823a90a2":"code","9cd830ac":"code","16816da7":"code","031bf78a":"code","7255faa6":"code","beda6ad2":"code","e27c6c0c":"code","aa35a4b6":"code","3b44a19a":"code","b52ed48c":"code","e0518c6f":"code","82084679":"code","bb1e2f2d":"code","baf3d00f":"code","a27b844f":"code","c493b77a":"code","072666d2":"code","82c7d92e":"code","bf4b96db":"code","ac1c2812":"code","b24d4d0f":"code","09d799bf":"code","3571f816":"code","b008b3ab":"code","5ae62285":"code","3dcb8a39":"code","d0cab3f4":"code","ef803afe":"markdown","1f1b5e66":"markdown","afc0858e":"markdown","f2fdfa03":"markdown","19242690":"markdown","5638b0cc":"markdown","d2969889":"markdown","7e95e5a5":"markdown","76376d56":"markdown","20958b43":"markdown","d10a1939":"markdown","f9bf9214":"markdown","e8030ccb":"markdown","0fc9b26f":"markdown","fcb817e4":"markdown","65aa7a24":"markdown"},"source":{"cc24d0f1":"## FinanceDataReader \uc124\uce58 (for \uad6c\uae00 Colab)\n\n!pip install -q finance-datareader","e9bdd7ef":"import FinanceDataReader as fdr\nimport pandas as pd\n\npd.set_option('display.float_format', lambda x: '%.2f' % x)","a9507d25":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = (14,8)\nplt.rcParams['font.size'] = 16\nplt.rcParams['lines.linewidth'] = 2\nplt.rcParams[\"axes.grid\"] = True\nplt.rcParams['axes.axisbelow'] = True\nplt.rcParams['axes.unicode_minus'] = False\nplt.rcParams[\"axes.formatter.limits\"] = -10000, 10000","e6dee578":"# matplotlib \uceec\ub7ec\ub9f5 \uc0dd\uc131\nimport matplotlib as mpl\nimport numpy as np\n\ndef make_colors(n, colormap=plt.cm.Spectral):\n    return colormap(np.linspace(0.1, 1.0, n))\n\ndef make_explode(n):\n    explodes = np.zeros(n)\n    explodes[0] = 0.15\n    return explodes","3c786107":"import FinanceDataReader as fdr\n\nsp500 = fdr.StockListing('S&P500')\nsp500.head(10)","823a90a2":"len(sp500)","9cd830ac":"df","16816da7":"import pandas as pd\n\ndfs = pd.read_html('https:\/\/finviz.com\/quote.ashx?t=AAPL')\ndf = dfs[6]\ndf.columns = ['key', 'value'] * 6\ndf","031bf78a":"df_list = [df.iloc[:, i*2: i*2+2] for i in range(6)]\ndf_factor = pd.concat(df_list, ignore_index=True)\n\ndf_factor.set_index('key', inplace=True)\ndf_factor.head(20)","7255faa6":"df_factor.tail(10)","beda6ad2":"len(df_factor)","e27c6c0c":"v = df_factor.value\n\nmarcap = v['Market Cap']\ndividend = v['Dividend %']\nper = v['P\/E']\npbr = v['P\/B']\nbeta = v['Beta']\nroe = v['ROE']\n\nmarcap, dividend, per, pbr, beta, roe ","aa35a4b6":"import re\n\ndef _conv_to_float(s):\n    if s[-1] == '%':\n        s = s.replace('%', '')\n    if s[-1] in list('BMK'):\n        powers = {'B': 10 ** 9, 'M': 10 ** 6, 'K': 10 ** 3, '': 1}\n        m = re.search(\"([0-9\\.]+)(M|B|K|)\", s)\n        if m:\n            val, mag = m.group(1), m.group(2)\n            return float(val) * powers[mag]\n    try:\n        result = float(s)\n    except:\n        result = None\n    return result","3b44a19a":"marcap = _conv_to_float(marcap)\ndividend = _conv_to_float(dividend)\nper = _conv_to_float(per)\npbr = _conv_to_float(pbr)\nbeta = _conv_to_float(beta)\nroe = _conv_to_float(roe)\n\nmarcap, dividend, per, pbr, beta, roe  ","b52ed48c":"import pandas as pd\nimport re\n\n## \ub370\uc774\ud130 \uc804\ucc98\ub9ac \ubcc0\ud658\ndef _conv_to_float(s):\n    if s[-1] == '%':\n        s = s.replace('%', '')\n    if s[-1] in list('BMK'):\n        powers = {'B': 10 ** 9, 'M': 10 ** 6, 'K': 10 ** 3, '': 1}\n        m = re.search(\"([0-9\\.]+)(M|B|K|)\", s)\n        if m:\n            val, mag = m.group(1), m.group(2)\n            return float(val) * powers[mag]\n    try:\n        result = float(s)\n    except:\n        result = None\n    return result\n\ndef stock_factors(sym):\n    url = 'https:\/\/finviz.com\/quote.ashx?t=' + sym\n    df = pd.read_html(url)[6]\n    df.columns = ['key', 'value'] * 6\n\n    ## \uceec\ub7fc\uc744 \ud589\uc73c\ub85c \ub9cc\ub4e4\uae30\n    df_list = [df.iloc[:, i*2: i*2+2] for i in range(6)]\n    df_factor = pd.concat(df_list, ignore_index=True)\n    df_factor.set_index('key', inplace=True)\n\n    v = df_factor.value\n    marcap = _conv_to_float(v['Market Cap'])\n    dividend = _conv_to_float(v['Dividend %'])\n    per = _conv_to_float(v['P\/E'])\n    pbr = _conv_to_float(v['P\/B'])\n    beta = _conv_to_float(v['Beta'])\n    roe = _conv_to_float(v['ROE'])\n\n    return {'MarCap':marcap, 'Dividend':dividend, 'PER':per, 'PBR':pbr, 'Beta':beta, 'ROE':roe}","e0518c6f":"stock_factors('AAPL')","82084679":"stock_factors('NFLX')","bb1e2f2d":"# \ub514\ub809\ud1a0\ub9ac\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\nimport os\n\nfolder = \"sp500_factors\/\"\n\nif not os.path.isdir(folder):\n    os.mkdir(folder)","baf3d00f":"import json\nimport pandas as pd\n\nre_map_sym = {'BRKB': 'BRK-B', 'BR': 'BRK-A', 'BFB':'BF-B'}\n\nfor ix, row in sp500[:10].iterrows(): # \uc885\ubaa9 10\uac1c\ub9cc \uc9c4\ud589\ud574 \ubd05\ub2c8\ub2e4.\n    sym, name = row['Symbol'], row['Name']\n    json_fn = folder + '%s.json' % (sym)\n    if os.path.exists(json_fn):\n        print('skip', json_fn)\n        continue\n\n    if sym in re_map_sym:\n        sym = re_map_sym[sym]\n    factors = stock_factors(sym)\n    with open(json_fn, 'w') as f:\n        json.dump(factors, f)\n    print(sym, name)","a27b844f":"folder = '..\/input\/sp500_factors\/sp500_factors\/'\n\n# JSON \ud329\ud130 \ub370\uc774\ud130 \uc77d\uae30\nfor ix, row in sp500.iterrows():\n    sym, name = row['Symbol'], row['Name']\n    json_fn = folder + '%s.json' % (sym)\n\n    try:\n        with open(json_fn, 'r') as f:\n            factors = json.load(f)\n            for f in ['MarCap', 'Dividend', 'PER', 'PBR', 'Beta', 'ROE']:\n                sp500.loc[ix,f] = factors[f]\n    except FileNotFoundError as e:\n        print(e)","c493b77a":"sp500.head(20)","072666d2":"sector_count = sp500.groupby('Sector')['Symbol'].count().sort_values(ascending=False)\nsector_count","82c7d92e":"# sector_count \uc139\ud130\ubcc4 \uc885\ubaa9\uc218\nvalues = sector_count.values\nlabels = sector_count.index\n\nn = len(labels)\nplt.pie(values, labels=labels, colors=make_colors(n), explode=make_explode(n), autopct='%1.1f%%', shadow=True, startangle=135)\nplt.axis('equal')\nplt.show()","bf4b96db":"sector_marcap = sp500.groupby('Sector')['MarCap'].sum().sort_values(ascending=False)\nsector_marcap","ac1c2812":"# sector_marcap \uc2dc\uac00\ucd1d\uc561\nvalues = sector_marcap.values\nlabels = sector_marcap.index\n\nn = len(labels)\n\nplt.pie(values, labels=labels, colors=make_colors(n), explode=make_explode(n), autopct='%1.1f%%', shadow=True, startangle=135)\nplt.axis('equal')\nplt.show()","b24d4d0f":"_ = sector_marcap.plot(kind='bar', color='orange', alpha=0.7)","09d799bf":"sp500.groupby('Sector').describe()['PER'].sort_values('mean', ascending=False)","3571f816":"sp500[sp500['Sector']=='Consumer Discretionary'].sort_values(by='PER', ascending=False)[:10]","b008b3ab":"sp500.groupby('Sector').describe()['PBR'].sort_values('mean', ascending=False)","5ae62285":"sp500.groupby('Sector').describe()['ROE'].sort_values('mean', ascending=False)","3dcb8a39":"sp500.groupby('Sector').describe()['Beta'].sort_values('mean', ascending=False)","d0cab3f4":"sp500.groupby('Sector').describe()['Dividend'].sort_values('mean', ascending=False)","ef803afe":"## \ud329\ud130 \ub370\uc774\ud130 - finviz.com \nEPS, P\/E \ub4f1 72\uac1c factor\n\nhttps:\/\/finviz.com\/quote.ashx?t=AAPL\n\n<img src=\"https:\/\/i.imgur.com\/3akddOs.png\" >\n    ","1f1b5e66":"## \uc804\uc885\ubaa9 \ud329\ud130 \ub370\uc774\ud130 \uc218\uc9d1\uacfc \uc800\uc7a5(JSON)","afc0858e":"# S&P 500 \uc885\ubaa9 \ub9ac\uc2a4\ud2b8","f2fdfa03":"## JSON \ud329\ud130 \ub370\uc774\ud130 \uc77d\uae30\n\n\uc774\ud558\ub294 Kaggle\uc5d0 \uc5c5\ub85c\ub4dc\ud55c Dataset\uc73c\ub85c \uc9c4\ud589\ud569\ub2c8\ub2e4.","19242690":"# S&P 500 \ud329\ud130 \ub370\uc774\ud130 \uc218\uc9d1\uacfc \ubd84\uc11d\n\n<img src=\"https:\/\/i.imgur.com\/tdpkZmM.png\" >\n\n### \uc774\uc2b9\uc900 plusjune@financedata.kr \n###  2019 FinanceData.KR","5638b0cc":"## \uc8fc\uc694 \ud329\ud130\n\n* Market Cap\n* Dividend yield\n* PER\n* PBR\n* ROE\n* Beta","d2969889":"## \uc139\ud130\ubcc4 \ud329\ud130 \ubd84\uc11d","7e95e5a5":"###  2019 FinanceData.KR","76376d56":"## \uceec\ub7fc\uc744 \ud589\uc73c\ub85c \ub9cc\ub4e4\uae30","20958b43":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n1. \ub2e8\uc704(B, M, K) \uc218\uce58\uac12\uc73c\ub85c \ubcc0\ud658\n1. '%' \uc0ad\uc81c\n1. float \ud0c0\uc785 \ubcc0\ud658\n","d10a1939":"## \ud329\ud130 \ub370\uc774\ud130 \uc218\uc9d1\npandas.read_html(url)\ub85c table \ub4e4\uc744 \uc77d\uc5b4 \uc635\ub2c8\ub2e4.\n\n\uc77d\uc740 table \uc911\uc5d0\uc11c 8\ubc88\uc9f8([7])\ub97c \uc77d\uc5b4 \uc635\ub2c8\ub2e4.\n\n```python\ndfs = pd.read_html('https:\/\/finviz.com\/quote.ashx?t=AAPL')\ndf = dfs[6]\n```\n\n\uc704 \uc2e4\ud589\uc5d0 \ubb38\uc81c\uac00 \uc788\ub294 \uacbd\uc6b0 \uba87 \ubc88\uc9f8 \ud14c\uc774\ube14\uc778\uc9c0 \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4. \ud398\uc774\uc9c0 \uad6c\uc131 \ub530\ub77c [6]\uc744 \uc77d\uc5b4\uc57c \ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n```python\ndf = dfs[6]\n```","f9bf9214":"## \ud329\ud130 \ud06c\ub864\ub9c1, \ud568\uc218\ub85c \uc815\ub9ac\ud558\uae30","e8030ccb":"## \uc139\ud130\ubcc4 \uc2dc\uac00\ucd1d\uc561","0fc9b26f":"## \uc139\ud130\ubcc4 \uc885\ubaa9\uc218","fcb817e4":"Outlier: UAA(\uc5b8\ub354 \uc544\uba38) - \uc2a4\ud3ec\uce20 \uc6a9\ud488 \ube0c\ub79c\ub4dc, \uae30\uc5b4\ub77c\ub294 \uae30\ub2a5\uc131 \uc18c\uc7ac\ub85c \uc720\uba85","65aa7a24":"## FinanceDataReader\nhttps:\/\/financedata.github.io\/FinanceDataReader\/"}}