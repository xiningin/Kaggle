{"cell_type":{"1cb4a510":"code","9f3ac366":"code","3f2ff91f":"code","a40fd613":"code","76128edb":"code","0b1f13a8":"code","03a1936a":"code","79fd0491":"code","4bdbbb2d":"code","d6ef24d3":"code","cb985e20":"code","959e01ee":"markdown","952e7ea6":"markdown","279fdb67":"markdown","8b1243ab":"markdown","b732816d":"markdown","d805a798":"markdown"},"source":{"1cb4a510":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nfrom sklearn.metrics import accuracy_score, f1_score\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","9f3ac366":"data = pd.read_csv('..\/input\/patient-treatment-classification\/data-ori.csv')","3f2ff91f":"data","a40fd613":"data.info()","76128edb":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Binary encoding\n    df['SEX'] = df['SEX'].replace({'F': 0, 'M': 1})\n    \n    # Split df into X and y\n    y = df['SOURCE']\n    X = df.drop('SOURCE', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","0b1f13a8":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","03a1936a":"X_train","79fd0491":"y_train.value_counts()","4bdbbb2d":"models = {\n    \"Logistic Regression\": LogisticRegression(),\n    \"      Decision Tree\": DecisionTreeClassifier(),\n    \"     Neural Network\": MLPClassifier(),\n    \"      Random Forest\": RandomForestClassifier(),\n    \"  Gradient Boosting\": GradientBoostingClassifier()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","d6ef24d3":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    print(name + \" Accuracy: {:.2f}%\".format(acc * 100))","cb985e20":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    f1 = f1_score(y_test, y_pred, pos_label='in')\n    print(name + \" F1-Score: {:.5f}\".format(f1))","959e01ee":"# Task for Today  \n\n***\n\n## Patient Type Prediction  \n  \nGiven *data about hospital patients*, let's try to predict if a given patient will be **an outpatient or an inpatient**.  \n  \nWe will use a variety of classification models to make our predictions.","952e7ea6":"# Preprocessing","279fdb67":"# Results","8b1243ab":"# Training","b732816d":"# Getting Started","d805a798":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/KCuHu-omxYE"}}