{"cell_type":{"ca702174":"code","0c3e61ec":"code","85355a17":"code","1250588f":"code","7546e746":"code","5d42a9a7":"code","6d897ff5":"code","7b9ee6f4":"code","c037d5b0":"code","11b1021d":"code","c9cec6f6":"code","be024c16":"code","5b2f0652":"code","805ec4d0":"code","b473e3f6":"code","4372deb9":"code","fb42935e":"code","bfb88a33":"code","dd0e0726":"markdown","7a8bd429":"markdown","de4e60ae":"markdown","4d159155":"markdown","ce812388":"markdown","3df27dee":"markdown","9af3a21f":"markdown","e8a11bf5":"markdown","c79da460":"markdown","7be603c0":"markdown","0df05b5b":"markdown","1dc9caf9":"markdown","763f6001":"markdown","ab12a0e9":"markdown","2cdeec28":"markdown"},"source":{"ca702174":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import KBinsDiscretizer  \n\nsns.set()","0c3e61ec":"raw_data = pd.read_csv('..\/input\/titanic\/train.csv')\nraw_data.describe(include='all')","85355a17":"survived_df = raw_data.query('Survived == 1')\nnot_survived_df = raw_data.query('Survived == 0')\nbins = 5\n\nf, axes = plt.subplots(1, 2, figsize=(10, 5), sharex=True)\n\nsns.distplot(survived_df[\"Age\"] , color=\"green\", label=\"Survived\", bins=bins, ax=axes[0])\nsns.distplot(not_survived_df[\"Age\"] , color=\"red\", label=\"Not survived\", bins=bins, ax=axes[1])","1250588f":"sns.distplot(raw_data[\"Fare\"])","7546e746":"raw_data['Cabin'].describe(include='all')","5d42a9a7":"data = raw_data.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1)","6d897ff5":"data['Age'].fillna(raw_data[\"Age\"].median(skipna=True), inplace=True)\ndata['Embarked'].fillna(raw_data['Embarked'].value_counts().idxmax(), inplace=True)","7b9ee6f4":"data.describe(include='all')","c037d5b0":"def get_title(name):\n    title_dictionary = {\n        'Capt': 'Dr\/Clergy\/Mil',\n        'Col': 'Dr\/Clergy\/Mil',\n        'Major': 'Dr\/Clergy\/Mil',\n        'Jonkheer': 'Honorific',\n        'Don': 'Honorific',\n        'Dona': 'Honorific',\n        'Sir': 'Honorific',\n        'Dr': 'Dr\/Clergy\/Mil',\n        'Rev': 'Dr\/Clergy\/Mil',\n        'the Countess': 'Honorific',\n        'Mme': 'Mrs',\n        'Mlle': 'Miss',\n        'Ms': 'Mrs',\n        'Mr': 'Mr',\n        'Mrs': 'Mrs',\n        'Miss': 'Miss',\n        'Master': 'Master',\n        'Lady': 'Honorific'\n    }\n\n    key = name.split(',')[1].split('.')[0].strip()\n    \n    return title_dictionary[key]\n\ndata['Title'] = raw_data['Name'].map(get_title)\n\ndata.head()","11b1021d":"data['FamilySize'] = data['Parch'] + data['SibSp'] + 1\n\ndata.head()","c9cec6f6":"data['CabinType'] = raw_data['Cabin'].map(lambda x: x[0] if not pd.isna(x) else 'unknown')","be024c16":"est_age = KBinsDiscretizer(n_bins=5, encode='ordinal', strategy='uniform')\ndata['AgeClass'] = est_age.fit_transform(data[['Age']])\n\nest_fare = KBinsDiscretizer(n_bins=8, encode='ordinal', strategy='uniform')\ndata['FareClass'] = est_fare.fit_transform(data[['Fare']])\n\ndata.head()","5b2f0652":"category_cols = ['AgeClass', 'FareClass', 'Title', 'Sex', 'Pclass', 'Embarked', 'CabinType']\n\ndata_with_dummies = pd.get_dummies(data, columns=category_cols)\ndata_with_dummies.head()","805ec4d0":"data_with_dummies.columns","b473e3f6":"targets = data_with_dummies['Survived']\ninputs = data_with_dummies.drop(['Survived'], axis=1)","4372deb9":"reg = LogisticRegression(random_state=42, solver='liblinear')\nreg.fit(inputs, targets)\nreg.score(inputs, targets)","fb42935e":"raw_test_data = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntest_data = raw_test_data.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1)\n\ntest_data['Age'].fillna(raw_data[\"Age\"].median(skipna=True), inplace=True)\ntest_data['Embarked'].fillna(raw_data['Embarked'].value_counts().idxmax(), inplace=True)\ntest_data['Fare'].fillna(raw_data['Fare'].median(skipna=True), inplace=True)\n\ntest_data['Title'] = raw_test_data['Name'].map(get_title)\n\ntest_data['FamilySize'] = test_data['Parch'] + test_data['SibSp'] + 1\n\ntest_data['AgeClass'] = est_age.transform(test_data[['Age']])\ntest_data['FareClass'] = est_fare.transform(test_data[['Fare']])\n\ntest_data['CabinType'] = raw_test_data['Cabin'].map(lambda x: x[0] if not pd.isna(x) else 'unknown')\n\ntest_data_with_dummies = pd.get_dummies(test_data, columns=category_cols)\n\ntest_data_with_dummies['CabinType_T'] = 0\n\ntest_data_with_dummies.describe(include='all')","bfb88a33":"df = pd.DataFrame()\n\ndf['PassengerId'] = raw_test_data['PassengerId']\ndf['Survived'] = reg.predict(test_data_with_dummies)\n\ndf.to_csv('titanic_submission_4.csv',index=False)","dd0e0726":"Remove useless variables","7a8bd429":"Introduce cabin type","de4e60ae":"Introduce family size","4d159155":"# Train data preprocess","ce812388":"Age distribution","3df27dee":"# Train data analysis","9af3a21f":"# Import libraries","e8a11bf5":"Introduce title","c79da460":"Cabin stats","7be603c0":"Updated data with missing values","0df05b5b":"Overall stats","1dc9caf9":"Fare distribution","763f6001":"Add bins for age and fare","ab12a0e9":"Replace category cols with dummies","2cdeec28":"Add missing data"}}