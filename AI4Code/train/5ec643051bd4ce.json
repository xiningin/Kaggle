{"cell_type":{"b092624b":"code","d9cd93b2":"code","3d2ffd9a":"code","765f2b23":"code","b5860d89":"code","7de80c32":"code","41a99c8b":"code","48f7f54b":"code","8f9790a1":"code","d2713152":"code","41a28481":"code","5a8caad6":"code","a20c75e2":"code","5ae857cd":"code","18bca5f6":"code","d413657b":"code","7a44cae6":"code","539da5ce":"markdown","603c2408":"markdown","b9fea367":"markdown","16f742f1":"markdown","5645d38e":"markdown","7dbf9e73":"markdown","217ae02b":"markdown"},"source":{"b092624b":"import numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nfrom IPython.display import SVG\n# import efficientnet.tfkeras as efn\nfrom keras.utils import plot_model\nimport tensorflow.keras.layers as L\nfrom keras.utils import model_to_dot\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.models import Model\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow.keras.applications import DenseNet121\n\nfrom tqdm import tqdm\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MultiLabelBinarizer\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\ntqdm.pandas()\n\nnp.random.seed(0)\ntf.random.set_seed(0)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d9cd93b2":"EPOCHS = 20\nSAMPLE_LEN = 100\nIMAGE_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train_images\/\"\n#TEST_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/test.csv\"\nTRAIN_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train.csv\"\nSUB_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv\"\n\n\n\nsub = pd.read_csv(SUB_PATH)\n#test_data = pd.read_csv(TEST_PATH)\ntrain_data = pd.read_csv(TRAIN_PATH)","3d2ffd9a":"train_data.head()","765f2b23":"train_data['labels'] = train_data['labels'].apply(lambda string: string.split(' '))\ntrain_data","b5860d89":"s = list(train_data['labels'])\nmlb = MultiLabelBinarizer()\ntrainx = pd.DataFrame(mlb.fit_transform(s), columns=mlb.classes_, index=train_data.index)\ntrainx","7de80c32":"labels = pd.concat([train_data['image'], trainx], axis=1)\nlabels.head()","41a99c8b":"AUTO = tf.data.experimental.AUTOTUNE\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('plant-pathology-2021-fgvc8')","48f7f54b":"def format_path(st):\n    return GCS_DS_PATH + '\/train_images\/' + st \n#test_paths = test_data.image_id.apply(format_path).values\ntrain_paths = labels.image.apply(format_path).values\n\ntrain_labels = (labels.loc[:, 'complex':'scab'].values)","8f9790a1":"def decode_image(filename, label=None, image_size=(512, 512)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    if label is None:\n        return image\n    else:\n        return image, label\n    \ndef data_augment(image, label=None, seed=2020):\n    image = tf.image.random_flip_left_right(image, seed=seed)\n    image = tf.image.random_flip_up_down(image, seed=seed)\n           \n    if label is None:\n        return image\n    else:\n        return image, label","d2713152":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .map(data_augment, num_parallel_calls=AUTO)\n    .repeat()\n    .shuffle(512)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n    )","41a28481":"LR_START = 0.00001\nLR_MAX = 0.0001 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 15\nLR_SUSTAIN_EPOCHS = 3\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","5a8caad6":"from tensorflow.keras.applications import InceptionV3\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","a20c75e2":"def get_model():\n    model = tf.keras.Sequential([\n        InceptionV3(input_shape=(img_size, img_size, 3), weights='imagenet', include_top=False),\n        L.GlobalAveragePooling2D(),\n        L.Dense(train_labels.shape[1], activation='softmax')\n    ])\n    return model","5ae857cd":"img_size =512","18bca5f6":"with strategy.scope():\n    model = get_model()\n    \nmodel.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['categorical_accuracy'])","d413657b":"%%time\n model.fit(\n    train_dataset, \n    steps_per_epoch=train_labels.shape[0] \/\/ BATCH_SIZE,\n    callbacks=[lr_callback],\n    epochs=EPOCHS\n )","7a44cae6":"model.save(\"InceptionV3.h5\")","539da5ce":"***One-hot encoding***","603c2408":"### Helper functions","b9fea367":"### Load the data and define hyperparameters","16f742f1":"***Split string into words***","5645d38e":"### Preprocessing data","7dbf9e73":"### Create Dataset objects","217ae02b":"### Setup TPU Config"}}