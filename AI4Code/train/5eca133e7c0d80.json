{"cell_type":{"fdd39622":"code","4bda13dd":"code","c17456b5":"code","3f66917c":"code","2da03533":"code","97b4ce2a":"code","7507a3aa":"code","b8e1e60b":"code","2497ec33":"code","76de768f":"code","21182185":"code","7d990a1b":"code","1d4e9f77":"code","c4405868":"code","49079f67":"code","31cdd11e":"code","c3218b85":"code","029b77fb":"code","86d368a3":"code","457d2368":"code","b01b0c66":"code","584a928a":"code","e4ab9ffc":"code","c888bd1f":"code","f163094d":"code","fb2bd502":"code","328a8330":"code","8e48a699":"code","cdbcf0ae":"code","a326b72a":"code","35fa3044":"code","a3846190":"markdown","5857a98e":"markdown","f2c0fe45":"markdown","9ef87227":"markdown","474b002b":"markdown","8129d555":"markdown","13f0e067":"markdown","d5590ada":"markdown","f9584648":"markdown","1a6ab94b":"markdown","380795f8":"markdown","77d79a20":"markdown","32b81b0a":"markdown","10d0ad71":"markdown","a16c31d3":"markdown","d9b43136":"markdown","c3cf878f":"markdown","f7a4e9c3":"markdown","abd792c0":"markdown"},"source":{"fdd39622":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import decomposition\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, QuantileTransformer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom tqdm.auto import tqdm\nfrom sklearn import linear_model\nimport xgboost as xgb\nimport operator\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor, CatBoostClassifier\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('seaborn-colorblind')\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4bda13dd":"SEED = 42\nNFOLD = 10","c17456b5":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\n\nfeatures = [f'cont{i}' for i in range(1, 15)]\ntarget_col = 'target'\n\nX_train = train.drop(['id', 'target'], axis=1)\ny_train = train['target']\nX_test = test.drop('id', axis=1)","3f66917c":"print(X_train.shape)\nX_train.head()","2da03533":"print(X_test.shape)\nX_test.head()","97b4ce2a":"y_train.hist()","7507a3aa":"xgb_params = {\n    'colsample_bytree': 0.4,                 \n    'learning_rate': 0.01,\n    'max_depth': 7,\n    'subsample': 1,\n    'min_child_weight': 4,\n    'gamma': 0.24,\n    'alpha': 1,\n    'lambda': 1,\n    'seed': SEED,\n    'n_estimators': 800,\n    'objective': 'reg:squarederror',\n    'eval_metric': 'rmse',\n}\n\nlgb_params = {\n    'num_leaves': 512,\n    'objective': 'regression',\n    'boosting_type': 'gbdt',\n    'max_depth': 12,\n    'learning_rate': 0.01,\n    'subsample': 0.72,\n    'subsample_freq': 4,\n    'feature_fraction': 0.6,\n    'lambda_l1': 1,\n    'lambda_l2': 1,\n    'seed': SEED,\n    'early_stopping_rounds': 80,\n    'metric': 'rmse'\n    \n}\n\ncatb_params = { \n    'task_type': \"CPU\",\n    'learning_rate': 0.01, \n    'iterations': 1200,\n    'colsample_bylevel': 0.5,\n    'random_seed': SEED,\n    'use_best_model': True,\n    'early_stopping_rounds': 80,\n    'loss_function': 'RMSE',\n    'eval_metric': 'RMSE'\n}\n            \ndef fit_gbdt(params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED, modelname='xgb'):\n    cv = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\n    models = []\n    oof_train = np.zeros((len(X_train),))\n    y_preds = np.zeros((len(X_test),))\n    \n    # feature importance\n    fi_df = pd.DataFrame()\n    fi_df['features'] = features\n\n    for fold_id, (train_index, valid_index) in tqdm(enumerate(cv.split(X_train, y_train))):\n        # split\n        X_tr = X_train.loc[train_index, features]\n        X_val = X_train.loc[valid_index, features]\n        y_tr = y_train.loc[train_index].values\n        y_val = y_train.loc[valid_index].values\n        \n        # model\n        if modelname == 'xgb':\n            model = xgb.XGBRegressor(**params)\n            model.fit(X_tr, y_tr, eval_set=[(X_val, y_val)],\n                        early_stopping_rounds=40, verbose=100)\n\n            # feature importance\n            importance = model.get_booster().get_score(importance_type='gain')\n            importance = sorted(importance.items(), key=operator.itemgetter(1))\n            importance = pd.DataFrame(importance, columns=['features', f'importance_cv{fold_id}'])\n            fi_df = fi_df.merge(importance, how='left', on='features')\n            \n        elif modelname == 'lgb':\n            model = lgb.LGBMRegressor(**params)\n            model.fit(X_tr, y_tr, eval_set=[(X_val, y_val)],\n                verbose=-1, categorical_feature=[])\n            fi_df[f'importance_cv{fold_id}'] = model.booster_.feature_importance(importance_type=\"gain\")\n            \n        elif modelname == 'catb':\n            model = CatBoostRegressor(**params)\n            model.fit(X_tr, y_tr, eval_set=(X_val, y_val),\n                verbose=100, cat_features=[])     \n            fi_df[f'importance_cv{fold_id}'] = model.get_feature_importance()       \n\n        # predict\n        oof_train[valid_index] = model.predict(X_val)\n        y_pred = model.predict(X_test[features])\n        y_preds += y_pred \/ n_fold\n        models.append(model)\n        \n    return oof_train, y_preds, models, fi_df","b8e1e60b":"oof_train_xgb, y_preds_xgb, xgb_models, fi_df = fit_gbdt(xgb_params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED, modelname='xgb')","2497ec33":"fi_df['importance_mean'] = fi_df.values[:, 1:].mean(axis=1)\nsns.barplot(x='importance_mean', y='features', data=fi_df.sort_values(by='importance_mean', ascending=False))","76de768f":"oof_train_lgb, y_preds_lgb, lgb_models, fi_df = fit_gbdt(lgb_params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED, modelname='lgb')","21182185":"fi_df['importance_mean'] = fi_df.values[:, 1:].mean(axis=1)\nsns.barplot(x='importance_mean', y='features', data=fi_df.sort_values(by='importance_mean', ascending=False))","7d990a1b":"oof_train_catb, y_preds_catb, catb_models, fi_df = fit_gbdt(catb_params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED, modelname='catb')","1d4e9f77":"fi_df['importance_mean'] = fi_df.values[:, 1:].mean(axis=1)\nsns.barplot(x='importance_mean', y='features', data=fi_df.sort_values(by='importance_mean', ascending=False))","c4405868":"print(f'CV (XGB): {mean_squared_error(y_train, oof_train_xgb, squared=False)}')\nprint(f'CV (LGB): {mean_squared_error(y_train, oof_train_lgb, squared=False)}')\nprint(f'CV (CATB): {mean_squared_error(y_train, oof_train_catb, squared=False)}')","49079f67":"prep = StandardScaler()\ndf = pd.concat([X_train[features], X_test[features]])\ndf[features] = prep.fit_transform(df[features].values)\nX_test[features] = df[features].iloc[len(train):]\nX_train[features] = df[features].iloc[:len(train)]","31cdd11e":"print(X_train.shape)\nX_train.head()","c3218b85":"print(X_test.shape)\nX_test.head()","029b77fb":"import math\nimport random\nfrom typing import List, NoReturn, Union, Tuple, Optional, Text, Generic, Callable, Dict\n\n# tf keras\nimport tensorflow as tf\nimport tensorflow_addons as tfa\n\ndef seed_everything(seed : int):    \n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    tf.random.set_seed(seed)\n\nseed_everything(SEED)    \n\n# adapted from https:\/\/github.com\/ghmagazine\/kagglebook\/blob\/master\/ch06\/ch06-03-hopt_nn.py\nparams = {\n    'input_dropout': 0.0,\n    'hidden_layers': 3,\n    'hidden_units': 128,\n    'hidden_activation': 'relu',\n    'dropout': 0.2,\n    'lr': 1e-2,\n    'batch_size': 128,\n    'epochs': 196\n}\n    \ndef nn_model(params, L):\n    \"\"\"\n    NN hyperparameters and models\n    \n    :INPUT: \n    \n    :L: the number of features (int)\n    \"\"\"\n\n    # NN model architecture\n    n_neuron = params['hidden_units']\n\n    inputs = tf.keras.layers.Input(shape=(L, ))\n    \n    x = tf.keras.layers.Dense(n_neuron, activation=params['hidden_activation'])(inputs)\n    x = tf.keras.layers.Dropout(params['dropout'])(x)\n\n    # stack more layers\n    for i in np.arange(params['hidden_layers'] - 1):\n        x = tf.keras.layers.Dense(n_neuron \/\/ (2 * (i+1)), activation=params['hidden_activation'])(x)\n        x = tf.keras.layers.Dropout(params['dropout'])(x)\n        \n    # output\n    out1 = tf.keras.layers.Dense(1, activation='linear', name = 'out1')(x)\n    model = tf.keras.models.Model(inputs=inputs, outputs=out1)\n\n    # compile\n    loss = 'mse'\n    opt = tfa.optimizers.RectifiedAdam(lr=params['lr'])\n    model.compile(loss=loss, optimizer=opt, metrics=[tf.keras.metrics.RootMeanSquaredError()])\n    \n    return model\n\nmodel = nn_model(params, len(features))\nmodel.summary()","86d368a3":"def cnn_model(params, L):\n    \"\"\"\n    NN hyperparameters and models\n    \n    :INPUT: \n    \n    :L: the number of features (int)\n    \"\"\"\n\n    # NN model architecture\n    n_neuron = params['hidden_units']\n\n    inputs = tf.keras.layers.Input(shape=(L, ))\n    \n    # 1dcnn\n    x = tf.keras.layers.Dense(4096, activation=params['hidden_activation'])(inputs)\n    x = tf.keras.layers.Reshape((256, 16))(x)\n    x = tf.keras.layers.Conv1D(filters=16,\n                      kernel_size=5,\n                      strides=1,\n                      activation=params['hidden_activation'])(x)\n    x = tf.keras.layers.MaxPooling1D(pool_size=2)(x)\n    x = tf.keras.layers.Flatten()(x)\n    \n    # ffn\n    x = tf.keras.layers.Dense(n_neuron, activation=params['hidden_activation'])(x)\n    x = tf.keras.layers.Dropout(params['dropout'])(x)\n\n    # stack more layers\n    for i in np.arange(params['hidden_layers'] - 1):\n        x = tf.keras.layers.Dense(n_neuron \/\/ (2 * (i+1)), activation=params['hidden_activation'])(x)\n        x = tf.keras.layers.Dropout(params['dropout'])(x)\n        \n    # output\n    out1 = tf.keras.layers.Dense(1, activation='linear', name = 'out1')(x)\n    model = tf.keras.models.Model(inputs=inputs, outputs=out1)\n\n    # compile\n    loss = 'mse'\n    opt = tfa.optimizers.RectifiedAdam(lr=params['lr'])\n    model.compile(loss=loss, optimizer=opt, metrics=[tf.keras.metrics.RootMeanSquaredError()])\n    \n    return model\n\nmodel = cnn_model(params, len(features))\nmodel.summary()","457d2368":"def fit_model(params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED, modelname='mlp'):\n    cv = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\n    models = []\n    oof_train = np.zeros((len(X_train),))\n    y_preds = np.zeros((len(X_test),))\n\n    for fold_id, (train_index, valid_index) in tqdm(enumerate(cv.split(X_train, y_train))):\n        # split\n        X_tr = X_train.loc[train_index, features].values\n        X_val = X_train.loc[valid_index, features].values\n        y_tr = y_train.loc[train_index].values\n        y_val = y_train.loc[valid_index].values\n        \n        # model\n        tf.keras.backend.clear_session()\n        if modelname == 'mlp':\n            model = nn_model(params, len(features))\n        elif modelname == 'cnn':\n            model = cnn_model(params, len(features))\n            \n        # callbacks\n        er = tf.keras.callbacks.EarlyStopping(patience=8, restore_best_weights=True, monitor='val_loss')\n        ReduceLR = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=8, verbose=1, mode='min')\n        model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(filepath=f'mybestweight{fold_id}_{modelname}.hdf5', \n                                                              save_weights_only=True, verbose=0, monitor='val_loss', save_best_only=True)\n\n        # fit\n        history = model.fit(X_tr, y_tr, callbacks=[er, ReduceLR, model_checkpoint_callback], \n                            verbose=2, epochs=params['epochs'], batch_size=params['batch_size'],\n                            validation_data=(X_val, y_val)) \n        \n        # predict\n        oof_train[valid_index] = model.predict(X_val).ravel()\n        y_pred = model.predict(X_test[features].values).ravel()\n        y_preds += y_pred \/ n_fold\n        models.append(model)\n        \n    return oof_train, y_preds, models","b01b0c66":"oof_train_mlp, y_preds_mlp, mlp_models = fit_model(params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED, modelname='mlp')","584a928a":"oof_train_cnn, y_preds_cnn, cnn_models = fit_model(params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED, modelname='cnn')","e4ab9ffc":"print(f'CV (MLP): {mean_squared_error(y_train, oof_train_mlp, squared=False)}')\nprint(f'CV (1DCNN): {mean_squared_error(y_train, oof_train_cnn, squared=False)}')","c888bd1f":"lin_params = {\n    'alpha': 80, \n    'fit_intercept': True,\n    'max_iter': 8000, \n    'tol': 1e-04,\n    'random_state': SEED,\n}\ndef fit_linear(params, X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED):\n    cv = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\n    models = []\n    oof_train = np.zeros((len(X_train),))\n    y_preds = np.zeros((len(X_test),))\n    \n    # feature importance\n    fi_df = pd.DataFrame()\n    fi_df['features'] = features\n\n    for fold_id, (train_index, valid_index) in tqdm(enumerate(cv.split(X_train, y_train))):\n        # split\n        X_tr = X_train.loc[train_index, features]\n        X_val = X_train.loc[valid_index, features]\n        y_tr = y_train.loc[train_index].values\n        y_val = y_train.loc[valid_index].values\n        \n        # model\n        model = linear_model.Ridge(**params)\n        model.fit(X_tr, y_tr)\n\n        # feature importance\n        fi_df[f'importance_cv{fold_id}'] = model.coef_.ravel()\n            \n        # predict\n        oof_train[valid_index] = model.predict(X_val)\n        y_pred = model.predict(X_test[features])\n        y_preds += y_pred \/ n_fold\n        models.append(model)\n        \n    return oof_train, y_preds, models, fi_df\n\noof_train_lin, y_preds_lin, lin_models, fi_df = fit_linear(lin_params, \n    X_train, y_train, X_test, features=features, n_fold=NFOLD, seed=SEED)","f163094d":"print(f'CV (Linear): {mean_squared_error(y_train, oof_train_lin, squared=False)}')","fb2bd502":"# train\nstack_train_df = pd.DataFrame()\nstack_train_df['mlp'] = oof_train_mlp\nstack_train_df['1dcnn'] = oof_train_cnn\nstack_train_df['xgb'] = oof_train_xgb\nstack_train_df['lgb'] = oof_train_lgb\nstack_train_df['catb'] = oof_train_catb\nstack_train_df['lin'] = oof_train_lin\n\n# test\nstack_test_df = pd.DataFrame()\nstack_test_df['mlp'] = y_preds_mlp\nstack_test_df['1dcnn'] = y_preds_cnn\nstack_test_df['xgb'] = y_preds_xgb\nstack_test_df['lgb'] = y_preds_lgb\nstack_test_df['catb'] = y_preds_catb\nstack_test_df['lin'] = y_preds_lin","328a8330":"oof_train_lin, y_preds_lin, lin_models, fi_df = fit_linear(lin_params, \n    stack_train_df, y_train, stack_test_df, features=stack_test_df.columns.values.tolist(),\n    n_fold=NFOLD, seed=SEED)","8e48a699":"fi_df['importance_mean'] = fi_df.values[:, 1:].mean(axis=1)\nsns.barplot(x='importance_mean', y='features', data=fi_df.sort_values(by='importance_mean'))","cdbcf0ae":"print(f'CV (stacking): {mean_squared_error(y_train, oof_train_lin, squared=False)}')","a326b72a":"fi_df['importance_mean'] = fi_df.values[:, 1:].mean(axis=1)\nsns.barplot(x='importance_mean', y='features', data=fi_df.sort_values(by='importance_mean'))","35fa3044":"sub = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')\nsub['target'] = y_preds_lin\nsub.to_csv('submission.csv', index=False)\nsub.head()","a3846190":"# Load data","5857a98e":"# GBDT scores","f2c0fe45":"# Stacking score","9ef87227":"# Config","474b002b":"# Linear model","8129d555":"# Target\nNormal?","13f0e067":"## XGB","d5590ada":"# Libraries","f9584648":"## 1DCNN\nInspired from https:\/\/www.kaggle.com\/sishihara\/1dcnn-for-tabular-from-moa-2nd-place\n\nMake sure you upvote the kernel.","1a6ab94b":"# Submit","380795f8":"# MLP score","77d79a20":"## MLP","32b81b0a":"Yes, linear stacking of GBDT and NN! A Promised Method:)","10d0ad71":"# NN\nWe use a simple MLP!","a16c31d3":"## Scaling\nTo make sure similar range across features","d9b43136":"## CatB","c3cf878f":"## LGB","f7a4e9c3":"# GBDT","abd792c0":"# Stacking"}}