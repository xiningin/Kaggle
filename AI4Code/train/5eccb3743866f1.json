{"cell_type":{"6550dc3f":"code","eaffe146":"code","f42e35ca":"code","c4782da3":"code","459ff805":"code","ef0745f6":"code","be1681fc":"code","d594590d":"code","5402b96b":"code","d59b1a49":"code","3e24f32e":"code","296f97fe":"code","31480c92":"code","e6b0495f":"code","c2616362":"code","b7f16f33":"code","7ca4882f":"code","b6f2bd8b":"code","32ee70df":"code","bcc7abdc":"code","9ddfadb8":"code","07c2a275":"code","e5d1ed7b":"code","ee04d92a":"code","82a7a9e1":"code","4399ae61":"code","f2001099":"code","04e007b3":"code","b4172d08":"code","4441f3e4":"code","bb8eed91":"code","41e6677f":"code","56a253ce":"code","a0d33a65":"code","dbd671b9":"code","0ba4abcd":"code","9683c9ef":"code","7c4b262d":"code","fb5da635":"code","c0ee5150":"code","2a517894":"code","cce76d21":"code","fe54ebcc":"code","09fe5a47":"code","ce7bddbf":"code","5cb4630e":"code","a240fee4":"code","10f28bff":"code","20aeeeac":"code","192ab5ce":"code","927b0f59":"code","8e9f5d03":"code","152cbbc4":"code","239b946e":"code","3a8bf379":"code","21a0d005":"code","14bc526b":"code","ae6ce645":"code","72e9100b":"code","521357c4":"code","add0d51d":"code","ea22bc0c":"code","2b370d45":"code","de74572a":"code","3a75f6fe":"code","dfc9e32e":"code","d8c985b2":"code","79ea81ba":"code","8e8cd4ba":"code","dbcdc5ce":"code","5624cde0":"code","c4ba7d65":"code","968a1d28":"code","a853969f":"code","5e2f9a2c":"code","7c89b479":"code","15f9a751":"code","94737ad9":"code","35a9bf99":"code","c932e865":"code","c76dd7d0":"code","e6f25fc2":"code","bf011720":"code","0b662413":"code","2bb81df2":"code","6d4b5f08":"code","15088af6":"code","bc5ca2cd":"code","1e3da997":"code","edd96e69":"code","c03e266e":"code","3c15f2e7":"code","06e725f8":"code","963faf25":"code","78fcbf68":"code","e86e299e":"code","3e125a30":"code","cd47cd33":"code","83dd85fa":"code","7dbb833f":"code","ad390b7d":"code","9f9a8eb9":"code","8d145c05":"code","6f31f490":"code","76c162df":"code","7c4b1402":"code","28404471":"code","a8d8cf60":"code","ffb4eb28":"markdown","1086b774":"markdown","f7c7328c":"markdown","8a02d64c":"markdown","e20e490e":"markdown","adb4c733":"markdown","4a944313":"markdown","bf31854a":"markdown","d1d9ce08":"markdown","f7088627":"markdown","a2063217":"markdown","852dd0f6":"markdown","23fd1d55":"markdown","7d857c0c":"markdown","f351cd2a":"markdown"},"source":{"6550dc3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)    \nimport seaborn as sns\n# Any results you write to the current directory are saved as output.","eaffe146":"data=pd.read_csv(\"..\/input\/countries of the world.csv\")","f42e35ca":"data.info()","c4782da3":"#data","459ff805":"data.describe() #only numeric features","ef0745f6":"data.head()","be1681fc":"data.tail()","d594590d":"a=data[\"Region\"].value_counts(dropna=False)","5402b96b":"print(a)","d59b1a49":"type(a)","3e24f32e":"df = a.rename(None).to_frame().T","296f97fe":"df2 = a.rename(None).to_frame()","31480c92":"c=list(df.columns)","e6b0495f":"df","c2616362":"df2","b7f16f33":"b=df2[0].tolist()","7ca4882f":"print(type(b))\nb","b6f2bd8b":"#dct={\"Regions:\":c,\"Counts of Countries\":[1,2,4]}\nregions=c\ncoc=b","32ee70df":"list_label=[\"Regions\",\"Counts_of_Countries\"]\nlist_col=[regions,coc]","bcc7abdc":"zipped=list(zip(list_label,list_col))","9ddfadb8":"data_dict=dict(zipped)","07c2a275":"data_dict","e5d1ed7b":"dataf1=pd.DataFrame(data_dict)","ee04d92a":"dataf1","82a7a9e1":"trace = go.Bar(\n                x = dataf1.Regions,\n                y = dataf1.Counts_of_Countries,\n                name = \"counts\",\n                marker = dict(color = 'rgb(100, 174, 255)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dataf1.Regions)\ndatag = [trace]\nfig = go.Figure(data = datag)\npy.offline.iplot(fig)","4399ae61":"filt=data.sort_values(by=['Population'],ascending=False)","f2001099":"#filt","04e007b3":"filt.index=range(0,227,1)","b4172d08":"dfgraph=filt.loc[0:5,[\"Country\",\"Population\"]]","4441f3e4":"dfgraph","bb8eed91":"trace1 = go.Bar(\n                x = dfgraph.Country,\n                y = dfgraph.Population,\n                marker = dict(color = 'rgb(255, 0, 0)',\n                             line=dict(color='rgb(0,0,0)',width=2.0)))\ndatag1 = [trace1]\nfig = go.Figure(data = datag1)\npy.offline.iplot(fig)","41e6677f":"area=data.groupby(\"Region\")[\"Area (sq. mi.)\"].sum()","56a253ce":"#area","a0d33a65":"d=area.values.tolist()","dbd671b9":"len(d)\nd","0ba4abcd":"popl=data.groupby(\"Region\")[\"Population\"].sum()","9683c9ef":"popl","7c4b262d":"e=popl.values.tolist()\ne","fb5da635":"rp=[]\nfor i in range(0,11):\n    num=(e[i]\/d[i])\n    rp.append(\"%.2f\" %num) \n","c0ee5150":"rp","2a517894":"regions=c\npopdor=rp","cce76d21":"list_label2=[\"Regions\",\"Population_Density_of_Regions\"]\nlist_col2=[regions,popdor]\nzipped2=list(zip(list_label2,list_col2))\ndata_dict2=dict(zipped2)\ndataf2=pd.DataFrame(data_dict2)","fe54ebcc":"dataf2","09fe5a47":"#\"%.2f\" % 1.5768319","ce7bddbf":"trace2 = go.Bar(\n                x = dataf2.Regions,\n                y = dataf2.Population_Density_of_Regions,\n                name = \"counts\",\n                marker = dict(color = 'rgb(110, 0, 0)',\n                             line=dict(color='rgb(0,0,0)',width=2.0)),\n                text = dataf1.Regions)\ndatag2 = [trace2]\nfig = go.Figure(data = datag2)\npy.offline.iplot(fig)","5cb4630e":"list_label1=[\"Region\",\"Population\"]\nlist_col1=[regions,e]\nzipped1=list(zip(list_label1,list_col1))\ndata_dict1=dict(zipped1)\ndataf3=pd.DataFrame(data_dict1)","a240fee4":"dataf3","10f28bff":"#some issues in this graph(in SUB-SAHARAN AFRICA population value)\ntrace3 = go.Bar(\n                x = dataf3.Region,\n                y = dataf3.Population,\n                name = \"counts\",\n                marker = dict(color = 'rgb(110, 95, 0)',\n                             line=dict(color='rgb(0,0,0)',width=2.0)))\ndatag3 = [trace3]\nfig3 = go.Figure(data = datag3)\npy.offline.iplot(fig3)\n","20aeeeac":"comp=data[\"Coastline (coast\/area ratio)\"].tolist()","192ab5ce":"arrang=[]\nfor i in data[\"Coastline (coast\/area ratio)\"]:\n    arrang.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])","927b0f59":"data[\"Coastline (coast\/area ratio)\"]=arrang\ndata[\"Coastline (coast\/area ratio)\"]=data[\"Coastline (coast\/area ratio)\"].astype(\"float\")\ndata.info()","8e9f5d03":"filt1=data[\"Coastline (coast\/area ratio)\"]>0","152cbbc4":"sumcoast=filt1.value_counts().tolist()","239b946e":"trace4 = go.Bar(\n                x = [\"Number of Countries with Coastline\",\"Number of Countries without Coastline\"],\n                y = sumcoast,\n                marker = dict(color = 'rgb(110, 95, 147)',\n                             line=dict(color='rgb(0,0,0)',width=2.0)))\ndatag4 = [trace4]\nfig4 = go.Figure(data = datag4)\npy.offline.iplot(fig4)\n","3a8bf379":"data.info() #Below you can see which features have NaN values.","21a0d005":"#data[\"Infant mortality (per 1000 births)\"]","14bc526b":"arrang1=[]\nexample=\"example\"\nfor i in data[\"Infant mortality (per 1000 births)\"]:\n    if((type(i))==type(example)):\n        if(len(i.split(\",\"))>1):\n            type(i)\n            arrang1.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])\n        else:\n            arrang1.append(i)\n    else: #NaN is float variable.\n        arrang1.append(i)","ae6ce645":"len(arrang1)","72e9100b":"data[\"Infant mortality (per 1000 births)\"]=arrang1","521357c4":"data[\"Infant mortality (per 1000 births)\"]=data[\"Infant mortality (per 1000 births)\"].astype(\"float\")","add0d51d":"#data[\"Infant mortality (per 1000 births)\"]","ea22bc0c":"data[\"Infant mortality (per 1000 births)\"].mean()","2b370d45":"data[\"Infant mortality (per 1000 births)\"].fillna(data[\"Infant mortality (per 1000 births)\"].mean(),inplace=True)","de74572a":"#data[\"Infant mortality (per 1000 births)\"]","3a75f6fe":"#data[\"Literacy (%)\"]","dfc9e32e":"arrang2=[]\nfor i in data[\"Literacy (%)\"]:\n    if((type(i))==type(example)):\n        if(len(i.split(\",\"))>1):\n            type(i)\n            arrang2.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])\n        else:\n            arrang2.append(i)\n    else:\n        arrang2.append(i)","d8c985b2":"arrang2\nlen(arrang2)","79ea81ba":"data[\"Literacy (%)\"]=arrang2\ndata[\"Literacy (%)\"]=data[\"Literacy (%)\"].astype(\"float\")\ndata[\"Literacy (%)\"].fillna(data[\"Literacy (%)\"].mean(),inplace=True)","8e8cd4ba":"data.info()\ndata[\"GDP ($ per capita)\"].fillna(data[\"GDP ($ per capita)\"].mean(),inplace=True )","dbcdc5ce":"#data[\"Industry\"]","5624cde0":"arrang3=[]\nfor i in data[\"Industry\"]:\n    if((type(i))==type(example)):\n        if(len(i.split(\",\"))>1):\n            type(i)\n            arrang3.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])\n        else:\n            arrang3.append(i)\n    else:\n        arrang3.append(i)","c4ba7d65":"arrang3\nlen(arrang3)","968a1d28":"data[\"Industry\"]=arrang3\ndata[\"Industry\"]=data[\"Industry\"].astype(\"float\")\ndata[\"Industry\"].fillna(data[\"Industry\"].mean(),inplace=True)","a853969f":"data.info()","5e2f9a2c":"data[\"Agriculture\"]\narrang4=[]\nfor i in data[\"Agriculture\"]:\n    if((type(i))==type(example)):\n        if(len(i.split(\",\"))>1):\n            type(i)\n            arrang4.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])\n        else:\n            arrang4.append(i)\n    else:\n        arrang4.append(i)","7c89b479":"arrang4\nlen(arrang4)\ndata[\"Agriculture\"]=arrang4\ndata[\"Agriculture\"]=data[\"Agriculture\"].astype(\"float\")\ndata[\"Agriculture\"].fillna(data[\"Agriculture\"].mean(),inplace=True)","15f9a751":"data[\"Deathrate\"]\narrang5=[]\nfor i in data[\"Deathrate\"]:\n    if((type(i))==type(example)):\n        if(len(i.split(\",\"))>1):\n            type(i)\n            arrang5.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])\n        else:\n            arrang5.append(i)\n    else:\n        arrang5.append(i)\ndata[\"Birthrate\"]\narrang6=[]\nfor i in data[\"Birthrate\"]:\n    if((type(i))==type(example)):\n        if(len(i.split(\",\"))>1):\n            type(i)\n            arrang6.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])\n        else:\n            arrang6.append(i)\n    else:\n        arrang6.append(i)","94737ad9":"#len(arrang5)\n#len(arrang6)","35a9bf99":"data[\"Deathrate\"]=arrang5\ndata[\"Deathrate\"]=data[\"Deathrate\"].astype(\"float\")\ndata[\"Deathrate\"].fillna(data[\"Deathrate\"].mean(),inplace=True)\ndata[\"Birthrate\"]=arrang6\ndata[\"Birthrate\"]=data[\"Birthrate\"].astype(\"float\")\ndata[\"Birthrate\"].fillna(data[\"Birthrate\"].mean(),inplace=True)","c932e865":"data[\"Crops (%)\"]\narrang7=[]\nfor i in data[\"Crops (%)\"]:\n    if((type(i))==type(example)):\n        if(len(i.split(\",\"))>1):\n            type(i)\n            arrang7.append(i.split(\",\")[0]+\".\"+i.split(\",\")[1])\n        else:\n            arrang7.append(i)\n    else:\n        arrang7.append(i)","c76dd7d0":"data[\"Crops (%)\"]=arrang7\ndata[\"Crops (%)\"]=data[\"Crops (%)\"].astype(\"float\")\ndata[\"Crops (%)\"].fillna(data[\"Crops (%)\"].mean(),inplace=True)","e6f25fc2":"filt3=data.sort_values(by=['GDP ($ per capita)'],ascending=False)","bf011720":"#filt3","0b662413":"filt3.index=range(0,227,1)\nfilt3graph=filt3.loc[0:20,[\"Country\",\"GDP ($ per capita)\"]]\nfilt3graph","2bb81df2":"trace11 = go.Bar(\n                x = filt3graph.Country,\n                y = filt3graph[\"GDP ($ per capita)\"],\n                marker = dict(color = 'rgb(229, 165, 224)',\n                             line=dict(color='rgb(0,0,0)',width=2.0)))\ndatag11 = [trace11]\nfig11 = go.Figure(data = datag11)\npy.offline.iplot(fig11)","6d4b5f08":"data.corr()","15088af6":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n# I think this correlation a little bit confusing because of GDP-Industry relations.","bc5ca2cd":"trace7 = go.Scatter(\n    x = data[\"GDP ($ per capita)\"],\n    y = data[\"Agriculture\"],\n    mode = 'markers'\n)\n\ndata7 = [trace7]\n\n# Plot and embed in ipython notebook!\npy.offline.iplot(data7)","1e3da997":"#confusing because feature has a percentage value\ntrace8 = go.Scatter(\n    x = data[\"GDP ($ per capita)\"],\n    y = data[\"Literacy (%)\"],\n    mode = 'markers'\n)\n\ndata8 = [trace8]\n\n# Plot and embed in ipython notebook!\npy.offline.iplot(data8)","edd96e69":"trace9 = go.Scatter(\n    x = data[\"GDP ($ per capita)\"],\n    y = data[\"Industry\"],\n    mode = 'markers'\n)\n\ndata9 = [trace9]\n\n# Plot and embed in ipython notebook!\npy.offline.iplot(data9)","c03e266e":"trace10 = go.Scatter(\n    x = data[\"GDP ($ per capita)\"],\n    y = data[\"Infant mortality (per 1000 births)\"],\n    mode = 'markers'\n)\n\ndata10 = [trace10]\n\n# Plot and embed in ipython notebook!\npy.offline.iplot(data10)","3c15f2e7":"data[\"Crops (%)\"]","06e725f8":"crop=data[\"Area (sq. mi.)\"].values.tolist()\nlen(crop)","963faf25":"cropper=data[\"Crops (%)\"].values.tolist()\nlen(cropper)\n#cropper","78fcbf68":"cropf=[]\nfor i in range(0,227):\n    cropf.append(\"%.2f\" % (crop[i]*cropper[i]))","e86e299e":"len(cropf)\ndata[\"Crops_Field (sq.mi.)\"]=cropf\ndata[\"Crops_Field (sq.mi.)\"]=data[\"Crops_Field (sq.mi.)\"].astype(\"float\")","3e125a30":"data.head()","cd47cd33":"cropsum=data.groupby(\"Region\")[\"Crops_Field (sq.mi.)\"].sum()","83dd85fa":"cropsuml=cropsum.tolist()\ncropsuml","7dbb833f":"trace5 = go.Bar(\n                x = c,\n                y = cropsuml,\n                marker = dict(color = 'rgb(229, 165, 121)',\n                             line=dict(color='rgb(0,0,0)',width=2.0)))\ndatag5 = [trace5]\nfig5 = go.Figure(data = datag5)\npy.offline.iplot(fig5)","ad390b7d":"br=data[\"Birthrate\"].values.tolist()\ndr=data[\"Deathrate\"].values.tolist()","9f9a8eb9":"sumbrdr=[]\nfor i in range(0,227):\n    sumbrdr.append(\"%.2f\" %(br[i]-dr[i]))","8d145c05":"#sumbrdr","6f31f490":"data[\"Birthrate-Deathrate\"]=sumbrdr\ndata[\"Birthrate-Deathrate\"]=data[\"Birthrate-Deathrate\"].astype(\"float\")","76c162df":"data.head()","7c4b1402":"filt2=data[\"Birthrate-Deathrate\"]>0","28404471":"brdr=filt2.value_counts().tolist()","a8d8cf60":"trace6 = go.Bar(\n                x = [\"Countries with Increasing Population\",\"Countries with Decreasing Population\"],\n                y = brdr,\n                marker = dict(color = 'rgb(229, 228, 121)',\n                             line=dict(color='rgb(0,0,0)',width=2.0)))\ndatag6 = [trace6]\nfig6 = go.Figure(data = datag6)\npy.offline.iplot(fig6)","ffb4eb28":"# Countries of the World\n\nAs it is my first kernel, there may be mistakes in it, for example the population in regions graph. So if you have an idea about changes, problem solving, shortcuts or suggestions please leave a comment.\n\n**Content:**\n1. [Diagnose Data](#1)\n2. [Building & Manipulating DataFrames, Filtering, Missing Data, Visualization, Python Tricks](#2)\n    1. [Countries in the Regions](#3)\n    2. [Top 5 Most Populous Countries](#4)\n    3. [Population Density in  the Regions](#5)\n    4. [Population in the Regions](#6)\n    5. [Coastline](#7)\n    6. [Arrangement of  Features](#8)\n    7. [Heatmap](#9)\n    11. [Top 20 Countries by Gdp(per capita)](#13)\n    8. [Correlations between some features](#10)\n    9. [Crops in the Regions](#11)\n    10. [Countries with Increasing & Decreasing Population (Based on Birth Rate & Death Rate Features)](#12)\n    \n    \n","1086b774":"**Some features need to be edited to use astype() method. So we must turn commas to points.**","f7c7328c":"<a id=\"12\"><\/a> <br>\n### Countries with Increasing & Decreasing Population (Based on Birth Rate & Death Rate Features)","8a02d64c":"<a id=\"3\"><\/a> <br>\n### Countries in the Regions","e20e490e":"<a id=\"5\"><\/a> <br>\n### Population Density in the Regions","adb4c733":"<a id=\"7\"><\/a> <br>\n### Coastline","4a944313":"<a id=\"13\"><\/a> <br>\n### Top 20 Countries by Gdp (per capita)","bf31854a":"<a id=\"9\"><\/a> <br>\n### Heatmap","d1d9ce08":"<a id=\"2\"><\/a> <br>\n# Building & Manipulating DataFrames, Filtering, Missing Data, Visualization, Python Tricks","f7088627":"<a id=\"6\"><\/a> <br>\n### Population in the Regions","a2063217":"<a id=\"11\"><\/a> <br>\n### Crops in the Regions","852dd0f6":"<a id=\"10\"><\/a> <br>\n### Correlations between some features","23fd1d55":"<a id=\"4\"><\/a> <br>\n### Top 5 Most Populos Countries","7d857c0c":"<a id=\"8\"><\/a> <br>\n### Arrangement of  Features","f351cd2a":"<a id=\"1\"><\/a> <br>\n# Diagnose Data "}}