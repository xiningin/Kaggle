{"cell_type":{"1da173aa":"code","ce4d7a96":"code","f5bb2fd2":"code","d442d07b":"code","04936315":"code","53ddb0ce":"code","3c0e779d":"code","986d645f":"code","99990e86":"code","6be7b600":"code","558fc2c6":"code","888361c4":"code","2b94ebb2":"code","5ed9ab8b":"code","dd400121":"code","a8078f2e":"code","9da7b3ad":"code","4cd77fd1":"code","4579779a":"code","3784f30b":"code","0bc0fa43":"code","4ab380eb":"code","68b8beeb":"code","0acae19a":"code","6d602dac":"code","4f7f43e5":"code","ad669ce5":"code","f48609d1":"code","6785eb06":"code","bde76c96":"code","b556d237":"code","71d960b6":"code","d3c55377":"code","ad99313c":"code","b455f662":"code","2478cca4":"code","f0df2df7":"code","3d762ea2":"code","5199b5ab":"code","ed7b8985":"markdown","584f355c":"markdown","2fa94813":"markdown","5ee3d791":"markdown","ac551a0f":"markdown","fc0f5654":"markdown","dfb4a112":"markdown","25a51ee7":"markdown","9ae079b7":"markdown","8bdb092c":"markdown"},"source":{"1da173aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce4d7a96":"import gensim\nimport pandas as pd\nimport json","f5bb2fd2":"website_text_df = pd.read_csv('..\/input\/hackrx-20-bajaj-fin-serv\/paras-and-lines-website-scraped.csv')\nwebsite_text_df","d442d07b":"#Preprocessing the text obtained from scraping to convert them to tokens\nwebsite_text = website_text_df['lines'].apply(gensim.utils.simple_preprocess)\nwebsite_text","04936315":"#Initializing the model\nmodel = gensim.models.Word2Vec(\n    window=10,   # window size, number of words that'll be in the window at once\n    min_count=2, # minimum number of words in a line for it to be considered\n    workers=4,   # worker threads to concurrently train the model [keep at no. of cores - 1]\n)","53ddb0ce":"#Building vocabulary for the model\nmodel.build_vocab(website_text, progress_per=1000)","3c0e779d":"model.epochs = 50\nprint(model.epochs, model.corpus_count)","986d645f":"%%time\n#Training the word2vec model\nmodel.train(website_text, total_examples=model.corpus_count, epochs=model.epochs)","99990e86":"model.save(\".\/word2vec-only-website-data.model\")","6be7b600":"#Checking model performance\nmodel.wv.most_similar('loan')","558fc2c6":"model.wv.most_similar('insurance')","888361c4":"model.wv.most_similar('demat')","2b94ebb2":"tweets_df = pd.read_csv('\/kaggle\/input\/hackrx-20-bajaj-fin-serv\/tweets-extracted-from-bajaj-finserv-twitter.csv')\ntweets_df","5ed9ab8b":"!pip3 install tweet-preprocessor","dd400121":"import preprocessor as p\nimport re\ntweet_text_cleaned = tweets_df.Text.apply(p.clean)\ntweet_text_cleaned = tweet_text_cleaned.apply(lambda x: re.sub(r\"www\\S+\", \"\", x))\ntweet_text_preprocessed = tweet_text_cleaned.apply(gensim.utils.simple_preprocess)\ntweet_text_preprocessed","a8078f2e":"website_and_twitter_text = website_text\nwebsite_and_twitter_text = website_and_twitter_text.append(tweet_text_preprocessed)","9da7b3ad":"#Initializing the model\nmodel = gensim.models.Word2Vec(\n    window=10,   # window size, number of words that'll be in the window at once\n    min_count=2, # minimum number of words in a line for it to be considered\n    workers=4,   # worker threads to concurrently train the model [keep at no. of cores - 1]\n)","4cd77fd1":"model.build_vocab(website_and_twitter_text)","4579779a":"%%time\nmodel.train(website_and_twitter_text, total_examples=model.corpus_count, epochs=model.epochs)","3784f30b":"model.save('.\/word2vec-website-and-twitter-data.model')","0bc0fa43":"model.wv.most_similar('loan')","4ab380eb":"model.wv.most_similar('insurance')","68b8beeb":"model.wv.most_similar('demat')","0acae19a":"urls_df = pd.read_csv('\/kaggle\/input\/hackrx-20-bajaj-fin-serv\/webpage-urls-to-recommend-from.csv')\nurls_df","6d602dac":"links = urls_df['links']","4f7f43e5":"# model = gensim.models.Word2Vec.load('.\/word2vec-website-and-twitter-data.model')","ad669ce5":"def gen_results_regex(queries, links):\n    results = {}\n  \n    for query in queries:\n        if type(query) == list: \n            query = '-'.join(query)\n    \n        results[query] = {}\n        \n        ranked_list = []\n\n        for link in links:\n            link_score = 0\n            for w in query.split('-'):\n                if link.find(w) != -1:\n                    link_score += 1\n            # link score is incremented for every word \n            # in query that's also in the link\n\n            if link_score > 0:\n                if link_score not in results[query].keys():\n                    results[query][link_score] = []\n                results[query][link_score].append(link)\n\n        # in the ranked list, show the links with the highest score\n        for i in sorted(results[query].keys(), reverse = True):\n            ranked_list += results[query][i]\n        \n        results[query] = ranked_list\n        \n    regex_results_df = {'link': list(links)}\n\n  # doing one hot encoding\n    for query in results.keys():\n        one_hot_encoded_values = []\n        for link in links:\n            value = 0\n            if link in results[query]:\n                value = 1\n            one_hot_encoded_values.append(value)\n            \n        regex_results_df[query] = one_hot_encoded_values\n\n    regex_results_df = pd.DataFrame(regex_results_df)\n    return regex_results_df","f48609d1":"import gensim.downloader as api\nword_vectors = api.load(\"glove-wiki-gigaword-100\") ","6785eb06":"def process_query(wv, query, min_threshold = 0.3, max_threshold = 0.4, viewResults = True):\n    results = {}\n    stop_words = ['and', 'to', 'for', 'on', 'us', 'of']\n    for l in links:\n        lw = [w for w in l.split('\/')[-1].lower().split('-') if (w not in stop_words)]\n        qw = [w for w in query.split(' ') if (w not in stop_words)]\n        similarities = []\n    \n        for q_w in qw:\n            word = ''\n            simi = -100000\n            for w in lw:\n                if w in wv.key_to_index and q_w in wv.key_to_index:\n                # simi = max(simi, wv.similarity(w, q_w))\n                    if simi < wv.similarity(w, q_w):\n                        simi = wv.similarity(w, q_w)\n                        word = 'Word in link: {0} | Word in query: {1} --- Link: '.format(q_w, w)\n\n        similarities.append(simi)\n    \n        if min(similarities) > min_threshold and max(similarities) > max_threshold:\n            results[l] = max(similarities)\n            if viewResults: print('Similarity: {0} | '.format(results[l]) + word + l)\n  \n    results = {k: v for k, v in sorted(results.items(), key=lambda item: item[1], reverse = True)}\n    return results","bde76c96":"def gen_results_glove(queries, links, min_threshold=0.3, max_threshold=0.4, viewResults = True):\n    q_df = {'link': links}\n    for q in queries:\n        q_df[q] = []\n        results = process_query(word_vectors, q, min_threshold, max_threshold, viewResults)\n        for l in links:\n            val = 0\n            if l in results.keys():\n                val = 1\n            q_df[q].append(val)\n    q_df = pd.DataFrame(q_df)\n    return q_df","b556d237":"model = gensim.models.Word2Vec.load('.\/word2vec-website-and-twitter-data.model')","71d960b6":"def gen_results_ourWE(queries, links, min_threshold=0.3, max_threshold=0.4, viewResults = True):\n    q_df = {'link': links}\n    for q in queries:\n        q_df[q] = []\n        results = process_query(model.wv, q, min_threshold, max_threshold, viewResults)\n        for l in links:\n            val = 0\n            if l.split()[-1] in results.keys():\n                val = 1\n            q_df[q].append(val)\n  \n    q_df = pd.DataFrame(q_df)\n    return q_df","d3c55377":"def calculate_precision_and_recall(seriesGold, seriesMarked):\n    gold = list(seriesGold)\n    marked = list(seriesMarked)\n\n    true_positive, false_positive = 0, 0\n    true_negative, false_negative = 0, 0\n\n    for i, j in zip(gold, marked):\n        if i==j:\n            if i == 0:\n                true_negative += 1\n            else:\n                true_positive += 1\n        else:\n            if i == 1:\n                false_negative += 1\n            else:\n                false_positive += 1\n  \n    precision, recall = 0, 0\n  \n    if true_positive + false_positive != 0:\n        precision = true_positive \/ (true_positive + false_positive)\n  \n    if true_positive + false_negative != 0:\n        recall    = true_positive \/ (true_positive + false_negative)\n\n    return precision, recall","ad99313c":"def calculate_precision_and_recall_wrapper(goldSearch, df, queries):\n    precisions, recalls = [], []\n    for q in queries:\n        precision, recall = calculate_precision_and_recall(goldSearch[q], df[q])\n        precisions.append(precision)\n        recalls.append(recall)\n  \n    len_precisions = sum([1 for i in precisions if i!=0])\n    len_recalls    = sum([1 for i in recalls if i!=0])\n\n    print('Precision:', sum(precisions)\/len_precisions)\n    print('Recall:',    sum(recalls)\/len_recalls)","b455f662":"gold = pd.read_csv('..\/input\/hackrx-20-bajaj-fin-serv\/gold-standard-queries-and-results.csv')\ngold","2478cca4":"links = gold['Link']\nqueries = list(gold.columns)[1:]","f0df2df7":"regex_df = gen_results_regex(queries, links)\nregex_df.to_csv('regex-model-search-one-hot-encoded-results.csv', index=False)\nprint('--------------------------------P&R--------------------------------')\nprint('Precision and Recall for Regex Model')\ncalculate_precision_and_recall_wrapper(gold, regex_df, queries)","3d762ea2":"# set viewResults to True to see results and analyses for each query and each link\nglove_df = gen_results_glove(queries, links, min_threshold=0.3, max_threshold=0.4, viewResults = False)\nglove_df.to_csv('.\/glove-model-search-one-hot-encoded-results.csv', index=False)\nprint('--------------------------------P&R--------------------------------')\nprint('Precision and Recall for GLoVE Model')\ncalculate_precision_and_recall_wrapper(gold, glove_df, queries)","5199b5ab":"# set viewResults to True to see results and analyses for each query and each link\nourWE_df = gen_results_ourWE(queries, links, min_threshold=0.3, max_threshold=0.4, viewResults = True)\nourWE_df.to_csv('.\/our-embedding-model-search-results.csv', index=False)\nprint('--------------------------------P&R--------------------------------')\nprint(\"Precision and Recall for Our Embeddings' Model\")\ncalculate_precision_and_recall_wrapper(gold, ourWE_df, queries)","ed7b8985":"# Our simple Embedding Model","584f355c":"## Regex Model Scores","2fa94813":"# Building A Benchmark - Regular Expression-based Search Engine","5ee3d791":"# What are you waiting for? \n\n# Fork this notebook and get better results than us\n![We dare you!](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBQVFBcVFRUYFxcaGxcaGhoaFxoXGhgXFxgaGhcXGxcbICwkGx0pIBcXJTYlKS4wMzMzGyI7PjkyPSwyMzABCwsLEA4QHRISHjIgIiAyMjIyMDIyMjMyMjIyMjIyMjIyMjIyMjIyMjIyMjAyMjAyMjIyMjIyMj09Mj0yMj0yMv\/AABEIALsBDgMBIgACEQEDEQH\/xAAcAAACAwEBAQEAAAAAAAAAAAAFBgMEBwIBAAj\/xABYEAACAQMCAwIJBwULCAcJAAABAgMABBESIQUGMUFRBxMiMmFxgZGhFCNSc7GzwTM0QpKyJDVDU2JydKLR4fAVFiWCtLXS01RjZcLD1PEmNmR1g4STlKP\/xAAZAQADAQEBAAAAAAAAAAAAAAABAgMABAX\/xAAlEQACAgICAgICAwEAAAAAAAAAAQIRAyESMQRBEzJRYSJxgRT\/2gAMAwEAAhEDEQA\/ALPE+ZljBUHele55mkPQ7UBu5CSTmq65NccMSSHGi25kkGN8imvgvMqyEK3WszRDV\/hsjRyK9CUEZmyE9DXo69KqcHv1kjHfiiBqAKKsrbN6qV43+dNNlx5reqklGkNwkcaq7yPoUO5jXOl3JLBWPRD2UHFy0grQwg14TtU44HxH+Jtv\/wBuT\/y9eHgvEO2CA\/zbpif60IoPxcn4DyRUavgwFR3Ylhx4+F4lJADeS8eT0BdCdHd5WOtcuGJ2FaPjzbqhZZIx7JGUGoWtx3VaS3IGTVOW7ANM\/HktCrLFnxtxXxiA61TuOLqvpPdntoa\/F3fzsgDcAdOzGRt3UnxMqt+g\/pXb09KlEYpZfjgRGfGoorEDOM6V2GcbHbGcU2Ny7xJhslsO790v3fUemivHnLozddkela6jUEZHSg95422m8TcKiuESQMkryKVdnXB1IuDmNuw9RXicV0jzl39IOPZmkninF00ZU0HgldqtLC8Y1MQGG3pq+ssh6Z9+aVx49iuVBhhXmKq2bN21cNAKdnadKkUbVwo2qRelSl2MuiNq6QV4a6WiEmQV2K4WuxQAdqBXQxXANeFqxiXWK411Hr3rl5NJquONsWTMUwCalRBVQsa6R8HevSsdR2XVAqYuMVUDVIprWBxHLky6OdOf8b086qzDlyfTIPTitOt8MAfR+FQyd2I9EVw\/kt6qUOFH\/SNr9f8A+DNTjcx+Q3qpO4V++Nr9efuZq2L7o16NipZg5nzfPaNHpAcxpIHyWdYEnYMhUaRpY4IJ809KZqzdP35H9Mf\/AHSK9C6ENCmhV1ZXUMrAhgRkEEYII7RSPwi1CIyMcmOSWMEncpHIyx5J6nRoye00\/Gsg41NL8onjjbSZLoxqw6qZWRdQHo1E+ys3RPJDkqDt8ZJy0dpH40rlXfUEiRh1UuerehQcduKGS8ncS07JbE+ieTPxiAz7a0uwskhRIo1CoihVA7APt9fppU4ZzPLJxe4smVPFIhKEA69SrETls7g+NPZtpFZpPs0MaiZJx+K6t38XNG8THJGcaXAxlldSQw3HTv3FC1nY9WPq\/ur9F80cIS6tpImALYLRkjzZFBKMPsPeCR21+d9JVsIMk4I7cKRld\/URvUZxUejpi3I9mSXQ5YMF0tnOxxg5wT21pYtOZtI0zJ0\/+F\/5NZtPHI0b5yQEcn2KT+FfpuLzR6h9lNidoGRUfn\/mWLiXyho7wtLcSQKqCMISUZphGoESKCdQkPTODW02nLtnoTVaQZ0rnMMec6RnPk9aRufZWi4iLlVDm3t7eXSWKhgsl3kZAODj0Vp1tJqVWxjUoOO7Iz+NOqtiO6RlnhD4Z4icSQWpWJYVLtFCNA0PIzFyowMAg79lBuH8RUEb+Sdj6Ce0D\/0pr8KPNLQK9mIkZZ4GUuzldJk1psoU5xpJ3IrJEmOr3\/j8Nq5\/IxRl\/Y8etmtQEVMVoDype+MhXPnAaf1dt\/ZimCvL48XRjteldDpXhG1fZ2qb7GXRya9WuTXS05iVakBrgV2KUx8TXLNXpNRO1ExXmlwakWcGh19JiqSXldOJaEkZqFxXuAakukKscjFQ5rsLo7FWo1qonoozYWZbrWUW+hpOK2yWwQh1IB2NaXwq5+bGe6lvh1oijcZov43A8mml48q2c+Sal0FLm48hqTuENniNr9efuZqL3Mx8WaBcvNm\/tPrz9zNUMa\/mgejaxWbp+\/I\/pj\/7pFaRWbJ+\/Q\/pj\/7pFd7ENJrKboD5fv28QjHrwyH8K1ask4gR\/lGPPX\/KS4\/q5pZejGuVlXL5\/wDaW7\/mSfsWtarWU8v\/APvNefVyfsW1OY1WvzpwiEFY1I8p0iKnvHi1BAPfX6LNYFwG3EsSIRkhIyO\/8mp291c\/kuoF\/HVyGS44EiWNy+MkW8xB7iInNarH5o9Q+ystneRLK6Q69PyecEu2ofknxp7fea1OLoPUPsqfifV\/2P5SqSM458j1XF36LCP9u8rQrD8lH\/MT9kUhc7Ni4vP\/AJfH+3eU+2H5KP8AmJ+yKvH7S\/wjL6x\/0xzw3pm5i+rT9uas6aU4G\/8AgVpXhqX5+M90cfxeaswibNafZktDVyNflbgR5OhwduzWBkfAfAVpi1kfLbBbqInbDrv6xg\/j761ta87yFUgosEbVwRtUg6VwTXI+woirta4rtaYxKtdZrla6oGPCahkapWNV5KyMCeJGguTRfihwCaU5b86jiuzDtCTCXMHDVMZYCkhxWpyQCSPSe2li85V6larjl6Y0ZV2AuGQ5OTTbw+zZsYG1e8A5WkJ8rpT3acMWJa7sapE5ysE2nDsDery2w7qvMBXgjqhMEXlvlSBS7wWzeO\/syRsZz9zNTs8FU7m2ctFJGE8ZFIJMOSFYCORCMqCR+U7uyovHHlaGTHulO25ZkHEXu3aPxfjDJGo1F9bWyW51E4AACvsM51DpiuZeOXy\/wVsf\/qyf8uqT823o\/gbf\/wDLJ\/y6EskY9sKVj3WJcx34jmiuv4NL95GODnQkjLqHeNKEjHUY76aLrjV5OpRnjhQjDeKVtZHaBI58kY22XO+xFJvO8IFsqKMKhGAOgUDAH2VJ5oykkthpm6IwO46dQew5pA4PwG4Tj11cshELRnQ+2lmdYRpG+cjQ+fUO+s85U8JN3aIsLKk8S7KrEqyr0Cq4z5I7AQfXTvw\/wnyTkiOyAI7Wn29wjzV3OKVtmUW9IfOOX4ggklP6KnSB1ZzsiL3szEAeus64NwTxTLj9EKM5PUKAfZVya7nuHV53UhTlI0BEat2Ocks7jcZJAGTgDrRNJAOu1eb5PkKdKPR3+PicLcipzNFizujv+Qm+7an+PzR6h9lIvFiZYJYgQC8ciBuwGRCoJ9GTVpOYrzGPF22235STs\/1Kp4uWMYtN0L5OOU2mlYN51UtdXKjq1jEB7XuxTzwqUPBEw3DRxsMdxUEfbSS\/jZJ5J5hGpMcUYVCzD5t5XJOpR18bj2V5ZX1xaqI4XjaIeakitqQfQR0PmDsUqcd+Nqos8FN77oSWCbgtdWfeEXhEkkgk8VJJF4oKxQBtBRnbJGc9H647DQPlTwa2d3aRXLzXAaQMcKYwuA7KMBoyRsB20cv+artkdDFb4ZWXPjJDjUCM40b9aB8G5rubC0jgEMLrEpGoyOpYai2caDjrVlkhd32SeOdVXRQ5f5Ihk4neWplmVLYRlGUx6zrCk6iYyp6noBTJzPwuS0MAju5m8Y4Q61tzpBdF1LpiG+GPXI9FJHCOepor+4ult0drnxa6NbAKVwow2nLZx3dtO\/G5ru78UXSGMxsHAV3bLBkYAkoMDyeo76M5QX2onTC\/FuW3igllW9uSY45HAK22CUQsAcQdMiqkT5RSepVT7SBU3EOK3ksUkZjt1Do8eRJIca1K5xo3xmoUTSqjuAHuGK8\/y5Qklxr\/AAaF+zzNSLUQNSqa5AslFek1wDXpNYJyxqGQ1K1QvWMCuIplTSpJZ4Jpzuk2oO8e+9dWGVCSL9s\/kA+ipIbpdVCopfmh6q8gGNzXXgxJ7YGx1g4gqrtipGu9XSlJLk9M1ctr3DAE13JEg2ZcGrCP20NmfIzUkNyMY7azGCQfNVlfysVyklVOIOVYMKVLZgi0g6GhfEocbirmvUoNQzNqXFRy4lKJougZbmoOK2ayRujdCpHq26+irCrg1FxFGaKQL1Kkf49ma8vcZF4Lk0mZpxPl2WFRIGSSNttaZwrdoIPZ6enqq9yfeiN28YCFbSA+CVB32JxtRJbd44HBbAcMGVjj1H7KIcqWge3KsBgsc+w4\/D4V0Ty3F8tnV8XGa4hGbiAA8gjf9Lqo9NBbvjhXOJWJ7gNt9gM5O9MD8GUoEyR6u7qdvjQu\/wCAQhCmGAJB1Lg5K7jIJHp6GoY1C9hnzrQDi5jkG+piO8dKMW3MDsM53AJIxg4HaD0PqqieHIsYjXUTnOogdMBQAM7AAAVFw7hzpKDuCRhNiMu\/krj07lsfyT2VeUICxlNDBPxnQo1F\/K6YUNnPT9IUPl5ijX9MA77srHH6uav8d4U0MfneSWUNjPacZwc4PpFKVxwzUpxjDYxt07cEfChjhCWx5zkugonFmkJ0SI3du65\/WUV67s8bahvgjYgjoe0VTtuFZj0ndi2dWMY2wAD3be+rSodGnc7YY9uOmx76MoxT0InJq2DuSuHiScSN5se\/rffT7sZ9grUUxSny9ahIU0DAbyvScnYn04xR63nOcGkzq9nJewrnaoWNSDpUTmuH2MiOpUqAVKhpjEtemuVNdVjHLCo2qWuGFYJVlXNL96zBthTKy1E1uD1FPGfFitWLNkjY0Hs291W3TFeI65JWopJcmvcxfWyTPlbyhXd5kYYVDneur6TyaqAN2s2uOoYmOuhXDeIBQQTVuG7XVmsYO+Mr55VYaT1qi90AM1BbEltVBChizfAKmvMgk71Ru71UHXegkPGhk70WZBpxgmuhVC0utdXNQ768bPGpl4vQD43wp5Fym4U5YdoUdT6vTU\/LzjxYA7Dv7aLBQwddWkspGR6ume47e6lfl9mV3BBHQ79\/SptXGjvjO6Y4rKNv8e+o5Qp\/RIHf5w+G\/wAKiR+hqcynsFSjotV7RDHaRjy2LMRuMoyqMdvlAZrmxVZJBIxwoOEztk75P2j31BciSQMi+rPdQXiVlfFlCDQqDygQNLADbB9VWUXLVgpR2NHH0DxsCwwens9FALeFZEyDhwMH04HdQ2e6l27hjOcnbtAA+00RtwCucbn7TTRi4I0ql0efJ8g9n41FIRpIHt9nT41amAxQ\/iM2mNj6MD1nastsSSpFzgqMIoh1Gke6i8fnCg3Ld0XXB7Bj3UXjfyqrl1E8z2GUO1RSGuwdqhc15\/sdHldIaiLVLFGW6U1WA8a5VepFei7T6QoPecAmkYlWIFVzyrc\/Tar\/AA\/sHMYhcp9IV149PpClk8s3Y\/TNeHl28+mfjW+D9h5jPrQ9orpdHeKVDwK9HRjXP+Rr76XwND\/n\/ZuaCMnC5OgSh8lnIhy4x7atz30ufPNUndifKYn1mvQx5pNpCOJGD1qhxGfC1ej6kUF4w+DiuxilC1uGLeijNs5yKoWES4z20TijxTegBITasVaF0BgChujAr6JSTWSAELy2ZxqFALmFYzqO1EL\/AIx4pcUk8W4uZT1pW6CkF24\/oPk1Wm5mkPSlsyVwZKjKEZO2hhoteYJNWGOQab+GyB4we3GCe\/Bxn4VlcTksB6RWicOJSNM9CPiB\/fXH5MElo6MEndBlJcVcWQkVQhcNV1pgFx7q4qO7lQStHA6Y78\/jVbiHH7VMo0mScg6Bq0+s5oDd2RYFpHZh9BWKjHpI3NCp3hQY8QntGT7zuarjin7CnfYWe7tNIRXJbfLFcKc9n+BXOcZxuO+gZhhk82LT6s0Qs4DGMaiV7M4yPRnuqs0kuzPXRcZ8iq80SuPK3A39o6VO9Db69VQy53pccbkQzzqILTihichelNHALoyYY0gv5TH107csKAoxV86XE4UOSnaoZGroNtUUrV5nsp6ONVRy8R8XXwNUbwZNWxq5bFl0Ebfj7dxqyvMDUDSMDpUwFddIkGhzA3ca7HMJ7qB4rwrQ4owwDmL0V1\/nEO74UuFa+0VuKCfcUj0vgUE4m5QAg0f4ufnCKAca8yjjf80P6Ka8RAGapTETN1oJPeL0Dr+sK4t7jfyWB9Rr0kTGi2tFTtq3G+TtQWzuSetXhexocNIinuZgDj1GiYMO2asR4VSTQuHilv2zRD1yJ\/bVXjPHYghVJEY\/yXU\/YaLaowC5kv8AU5Apd1VJcylmJNRCpMJ7mvAK9C1Iq0DF7gdrrlX11o93b4iUd39lK3JlrltRHbT5xaPHkY81QD6yoJ+JNcHkT\/kXwrYAhn0neiNvOD20JnjqosrKdqjws6OdaY7WqR\/pb1xfwWrfwS57wN6Uk4qw7d6kPEyevvrRg0ysZr2FWtY12QYqB8CqJvc9teePLHbemaYrmi5ljsNzigVxwOQkkkkncmmjh6YXJ7T9g\/vq0YwaWM3Ho5ckuUqEMcGcU18v2ZjG9XlthnpVmOPFaeVyVEqL4O1RtGTXhbaoFnYGoxjbGbLKWrVBPbb70OvuZxEdLYqFeZI37a6YY62TbCUpVepqP5QnfVNrxH7a80R99VpAL4nj769Eqd4ocFjzjVXDtGNi9akYK607xXoZe8e+hAeM\/wAIK9Aj+mKPE1BTjH5T2Us8wygR79x+ymbjZ+cNJnNp+bHtpcf3Q3o3flz8ztvqYfu1rOfDBEGubUd0Ux\/\/AKRVo3Ln5nbfUw\/drWd+FtC11agfxU\/7cVeguxTPmXGy1pfgfUj5Xq65g+ySlCx4aBu1Png0I8Zd4GB+5x8JKeSpATHm5uEjRnkYIigszMQFUDqST0FVVjtriMMFimjYZBASRWB7juDQ\/n397bz6iT9k0v8AgYcnhx7hPMB6B5J+0n31MIneFjkmG1VLq2TQjvodB5qsVLKyj9FTpYEdM4xjNZcBX6L8L5A4XKT9KMe9wv8A3jSF4JuSorrXdXK640fQkZ82RgAzM4\/SUalwOhOc9KxjM036ZPqBP2VKm\/8AZX6iuuJQWrRQ6CofAAjj8hF1pGpbSMKuqRF9\/YCR1xbgMFwAXQLIpykqgCSNuxlbHwOQe0GgYzLkfgDoiyyqI4gVJeQiMYyB+l39PbV\/mW\/h8cSJYisgztKh8pdiNj3afjR\/id08lmolALi6tI5MDyWeO+hVyqnorYBAOdmprPD4v4qP9Rf7K5\/hUrsaE+Lsx6R49OvWuj6WRpHoz0zQqaMHDKdSkAgjcEHoQa1Dl7ltFubi5kQH55\/ELgaY1GFaQLjAcsGGewDbqc5\/yhws3fyeDJVPFq8jL5wiVVGlT2MzMq57BqPUCkeDjST7LrKpW2ugK8iKfKZQe4kZ91dRyxtsrKT3ZGa3FLW1sYHdI0ijjUu2hMsdIySSPKdvSckmo0itOI26uY1kjfJBZcOpUlTg+cjqQRkHIIqnwL8ifL+jFhDnoKuwxBRk+00S47wr5HK0ZJZMK6MepjcsAGOw1AqwOP5J\/SqG1tC\/lOML2Ke30sO70e+ovG7or8kVGySzvYvFnMsecg48YvTpjr6j7TV23mRxlGVh0ypDDPdtTlyTDFJYxZjQsmuJsouSYXaPJ27QgPtoFzJaeLvX0JhGgifyVAGtXkRzgejxe\/po5cCq0c\/K3bBXy+IHBljB6byL17sZqaGZH3R1YD6LBse6nHlCyiaxtmKIS0SOSUUk+MGvOSP5VKPE0Y3lykIRXknihj8kBQRbxszEDGoL86xHbpoT8ZKOnsykR3F5HH+UdU\/nMB9tVl4nC5wssbE9AHGT7K0fhHAILZfIQM\/6UrANK572fGe\/AGAM7AVFw6\/teIRvhRJGG0MskYwcqGB0sN1ZWUj0GsvEXt7NzMp4rwZJGyaXr6GKM6fGICOzUoPurR+Z+Bi0dTGT4mQsFUkkxOqlyiknJQqrsB+joI6EYNeDm2jazLMiMfHXO5UE7TOOpFNjxNNpvoFmWcOuYyMK6k9wYE+7NWPl0X8bH+uv9tO\/hXt0SK2KIqkyuMqoG3yeXuFNnL1jEbS2JjjJ8TF+gv8AFr6Kd+Om+zWYss6ljocN6mB+ygfFpG19TT74SEVOIqEUKPk0RwoAH5W47BWf8QOWpVj4ypDQ2VBM\/wBI1NbTvnzj0\/sqArU1oPK9n4iqMo0jUuN\/lD6qSucHxGPbTrxv8qfVSJzyfm19dQx\/cl6P0By5+Z231MP3a1nvhYu1iurVm7Ypx7dcR\/CtC5c\/M7b6mH7tayfw+tiSz\/mTftJXcIBY+PITv0rQ\/BfOsj3bJ0+YHtxJmsJ4VZT3EgjgjeRz2KM4z2k9FHpNbh4J+CzWZuop9PjD8nchW1aQyyAAnv8AJPTvouV6Ahn59H+jbz6iX9k0A8DtrJFYOkiMjieTUrDDDUkbDIPTYg+2mTnL8xufq2r7l3z7z+lN9zDQCR83Rq0USsodTc2oKkBgw8cmxB2NUuDcZhhEySFkf5RcHT4uQ+T4whCCqkY0helEOamxHCT\/ANKtPvkqIyy3UkkcchhhjYI7oB4yWTSrsiFgQiAMoLYLE6gNOnJVvZhd49xWK4uhHC5d2ijUKFcNn5SpLaSAdIAJJ6ACtDFK3EriHh8YEUWqWQ9rFnZVZFeWWVzqZV1r1JJLKB1ppFMYROJ+bcj6PEbP+tJYP\/38+2nukPiB\/PR\/2lYfbw2nw0q9gQA4lzEkcjRJG8zrjWI9IEeoalDM7AaiCDpGTggnAIpN8EsDLJOjrh44LVCD2HVNq9h0LR+1jDSXTdpuHz\/qpGg+CipOW9Py+6CkZEFpqwc4bxl0d+44IPtpVK3X4MpeghzrC72FwqKzuU2VVLMxyNgq7k+gVW8HsDpw+JXR421XBKOpRgGuJWXKsARkMDv2EUW49fm3t5JgocouQpYqCSQMFgDgb9xpMk58ulZlFojlTpYxtdyKGHUaltCM+2qBL3PcKmWAkb+Lm\/qvCfxNAUirm95hlupovGQCLRHLpGLgFtTRZPzsCDA0joSfKFTq5qcgMP8AIcuPlMRPmukijuWWMA\/145D7a452nMMsMwGxjuYz2diSD4RvQ3lW50cQCdkkEgPeXidGT+q8tEfClH+4hJgnRIo2\/wCuV7c\/fUy2jDHwC38XaW8f0IYl\/VjUfhSPwM6+Iq7KfKnvXXI6+LLwhh7M1ogwiDuVf2R\/dWe8qOTLZb9Unc9+ZEDk+3VmhJW0GzRJfNPqP2UgeB8\/ueX\/AO2\/2SGtAl80+o\/ZWe+B0\/ueX123+yQ0xg54QPzQH\/rYh+u2g\/BzUHgvP7gH11z989T+EM\/uQfXW\/wB6tVvBZ+96\/W3P3z0PZgX4Yz8zbfWyf7PLTny5+Z231MP3a0l+GX8hbfWv9xJTpy5+Z231MP3a0fZjMPCl++K\/0WL764pAuME0++FQ\/wCkB\/RYvvris\/lG9Rl9isOiMqKsWKDUfV+Iqsat8MHln+b+IrPoqzRuOH5z2Uhc8+Ynrp942fnD6qQOefMT11DF9zn9H6E5c\/M7b6mH7tay7w22TzXNlFGpZ2WUKB36k9wAyfZTdwPnjhqW0CNdxBliiVgSchlRQQdu8VXvOJ291exSQOsipbzAOAdIZpIujEYzgN7q7ZOlYjL3IXL6WVqI1wXJy7j9N+09+B0HoHp3I8L\/AD277Pm7X\/x6q8FumZZMnYOQoAAwAMdfZ8ahh4tFBeXBmfQHjttJKuQ2kzasEAjIyNvTU4O3sWLthLnP8wufqn6b9ncK55W8pJpcMBLPI66lKkqAsathgDg+LyO8EHtrr\/Oyy\/jx+o\/\/AA18ea7PslLehY5GPuCZqg5HzeuYoh33Fuf1ZAx+CmvuTs+Jkz1+UXPuErAfACh11dtdyxsEdIImLqZAUeSQoUU+LO6Iqu\/nAEtjYYyfeHcVS1kljnPi43fxkchGI11KokjduiHUpfLYBD4zkUvJWC9kHOjHxuO+ABfSTcxBgP6lO9InNfHbOSNXhEd1LGwKumJVgBdNchdcgEYUhepZVONsg9\/nbZfx4\/Uf\/hpjC3xJ\/LvB\/wBo2B+PDa0Gsx4hdqxuZVYmN760ZTpbylj\/AMnl3AxkgCN98fomnF+bbJQS04AHUlHAHrJWgvZkJ3H+PrZRXUmxka5lWNPpNhTk\/wAkdT7u2qPgYlczXTSNqeVIpNXaxV5AxPp+cX3ikLnW9E97O8b64zIxQjppYJkj1kVJyzzFJayxzJuUBUoTgSRt5yE9h2BB7CB2ZoJbN0bnz+xHDbtl6rGzD0FSDn4VR8GN6Z7IzEafGSytj05APxBryy564ZdRFJJo01KVeO4Kx7MMMp1+Sw69CRU8HMvDLeNYreWJlGyRW2JTljnAWPOMknc465JpwkPOODNAO0Rzn1AvAAfgaAPsKuSyPJI80g0u4VVTOoRRpkomRsWyzMSO043Ciht6wAwe37O2pSdsVkNnchLi3l7FmjH+rLmI\/CXOK0jmGwE8DRkZy0Te2OVHHxWsmuIpJFkiijlkk0beLjdgjMGMZMgGlDle0jpW0REkAsMEgZHccbinj0FFDmO58VaXMn0IZWHrWNiB8KUOX2QS2J22EkQ9fiWYD3RH3Uc5\/nC2UidspSIDv8Y41+5A59QNJ3CyzKAjBZEZXjJ3AdDtnt0kalOOxjQk9oDZqsvmn1H7KRvBYgED4AGVs84+l8ig1Z9OetF7bm220\/Pn5M42ZZvJQH+TKfIde4g+wHao7PjnDIFZbeaDclyluRK7Mep8XFqYnYDp3CnGIvCRKq2ig9WkTTvjdFeXb04jNReCv971+tuPvmqtxeyk4hkuGgRQRArDyiT50si9mcABc5AJJwTgDOTONJw5pLK9Ihy5kjdvyZVwAy6+g8pSQTjziOoqal\/I1kvhqOLa3bsEzZ9sMlPHLwxaW4PUQxfdrStzfzTwxrdgzQ3rDyo4kZZQZFB0liuQg33J7M9elXOGc9cP8TF4y7iD6E1jcYfSNQxjbfO1OYRvC0+OIL6bWL724pCd8mm7wkcRhur1XgkWVBbxqWXONQlmJXftwyn20pNFU5VyKwutEZq9whMuf5p+0VT0Ve4PnUf5v4ikl0M3IfuMn5w0hc8+Ynrp94x+UNIPPXmpUsX2RL0LXBuHPczRwp5zsBnuHVmPoABNfoGCJIo0jQYRF0qO5V\/Has08D8Kma4YjdY1we7Uwz9grSbvzD7avke6JSJOXnIiJ38pmPXbAP95+FXr+YkAZqhwr8inqb4mpLnzhSIUsJ2VYkqFOvsqVqHsB8zYFQIupqnkG1ewDagE+eMYxgYqJY8VYeopOlazFO\/J8ZE5\/RYY9XQ\/Aml3nXijSsIIydIwX\/lNsVX1D\/HSmi5GcUEtrdPlEnkjzjTR7CZtxnhhiQySbE7IvbqPTY93XHopdSM5VSdAYZVm2GMEg7dlNvPLlroqTkAJgdMasZ6Us8weTcYGwAXA7qtEddDLyzwpW04ww2JPXNN17w7SMrtjBGNsY3+2lvwdnyfUxrQrgbH1UsvwI+yG2lEkYk6bb+gjr7M1Qt7YykyHZOi56kdhxVNto5QNhqG3r00Z4dunsH2UvozOOG3NxbSytFHFKsixjy5XiYGPXnZY3BB19\/ZRI8zXv\/RrdfT8okb+r4lc++oRXYpubNyYI4mZpXV55A5UEKqLojTV5xAJJZjsNTE7dMZOanDm0yUX4h1X20HT8pQbNY2RoGHr3qS2bSdOMequOH+aPXU70lgLaDO329npFCeZODQ3cZikby13STHlI3cfpKehH471fnchGIOMKfspf4Y5Jxnt\/trIyM5vuFSQOY3XJG+U8pWXsZSOo2+BqjHA5YYU7nuI64x6uta9zJbo0eCoPkyY23GEPQ9Qdz0rG5eIS6lOroQR5K7FcAEbbez01ki6dl1IWPVWx6VPXp3d9SNYN9Fv1T\/ZUEfEJQwIbG\/YAO493oq5HfSbnWc+Vv6yP+FfdRii8OiobE9gJ3xsD17R061b4XbFGJIOCvcR1Pq9BqCe7cdCOv0VPnKWPUd4B9gqxwmVmZgxyNIPtz\/effWl0GTP\/2Q==)\n\n# Let us know how you did in the comments ;)","ac551a0f":"# Improving the word embeddings model with more data from Twitter\n\nWe also scraped all the tweets from Bajaj Finserv Twitter Handle and improved our word embeddings model using those tweets. ","fc0f5654":"# Comparing Results On Manually Annotated Queries","dfb4a112":"# Building Another Benchmark - Using GLoVE Embeddings","25a51ee7":"# Training our Word2Vec Embeddings\n\nWe are training domain specific word embeddings using Gensim Library. \n\nConcept of word embeddings can be understood using this [Youtube Video by Codebasics](https:\/\/www.youtube.com\/watch?v=hQwFeIupNP0&t=2s) \n\nWe used [Jupyter Notebook](https:\/\/github.com\/codebasics\/deep-learning-keras-tf-tutorial\/blob\/master\/42_word2vec_gensim\/42_word2vec_gensim.ipynb) and [Youtube Video by Codebasics](https:\/\/www.youtube.com\/watch?v=Q2NtCcqmIww&t=3s) to understand how to train our own word embeddings","9ae079b7":"# Using the model to recommend relavant articles\n\nWe decided to use the headings of the articles that we smartly got from the url of the article to find out which articles should be suggested when a user searches for some keyword ","8bdb092c":"# Calculating Precision and Recall Scores"}}