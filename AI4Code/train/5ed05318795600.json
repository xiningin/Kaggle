{"cell_type":{"e98a6f03":"code","40330f1f":"code","075caac0":"code","871e0da8":"code","2d73da22":"code","c15cc8e4":"code","5566e9e4":"markdown","49bac5d9":"markdown","9cbed337":"markdown","b2879b2e":"markdown"},"source":{"e98a6f03":"import numpy as np\nimport collections, numpy as np\nimport re, random","40330f1f":"def split_contexts(context, astart_ix, tot_paragraphs=10):\n    p_indices =np.array([0] + [i for i, c in enumerate(context) if c=='\\n'] + [len(context)])\n    cix = np.argmin(p_indices<astart_ix)-1\n    if cix == -1:\n        cix = 0\n    \n    #cix = gt paragraph. start = random ix. 0..min(gt par+1, tot_paragraphs); start = gt par + 1 - start\n    p_start = min(cix+1, tot_paragraphs-1)\n    p_start = random.choice(list(range(p_start)))\n    random_ix = p_start\n    p_start = max(0, cix-p_start)\n    p_end = min(p_start + tot_paragraphs, len(p_indices))\n    p_start, p_end = p_indices[p_start], p_indices[p_end-1]\n    \n    while p_start<len(context) and context[p_start]=='\\n':\n        p_start += 1\n    \n    ns = astart_ix-p_start\n    new_context = context[p_start:p_end]\n    \n    return {\"new_context\": new_context, \"new_index\": ns, \"random_ix\": random_ix}","075caac0":"_ = \"\"\"\nfrom tqdm import tqdm\ntqdm.pandas()\n\ndf = pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/train.csv\")\ndf['new_context'] = df.progress_apply(lambda row: split_contexts(row[\"context\"], row[\"answer_start\"]), axis=1)\n\ndef assert_new_context_indices(row):\n    nc = row['new_context']\n    context, aix = nc['new_context'], nc['new_index']\n    answer = row['answer_text']\n    return context[aix:aix+len(answer)]==answer\n\ndf['is_correct'] = df.progress_apply(assert_new_context_indices, axis=1)\ndf[~df['is_correct']]\n\"\"\"","871e0da8":"#max_length = 384 # The maximum length of a feature (question and context)\n#doc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.\n\ndef prepare_train_features(examples, tokenizer=None, max_length=384, doc_stride=128):\n    pad_on_right = tokenizer.padding_side == \"right\"\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","2d73da22":"def prepare_validation_features(examples, tokenizer=None, max_length=384, doc_stride=128):\n    pad_on_right = tokenizer.padding_side == \"right\"\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples","c15cc8e4":"ignore_starts = list(map(chr, range(33, 48)))\nignore_ends = ignore_starts.copy()\nignore_ends.pop(4)\nignore_ends.pop(3)\n\ndef clean_answer(ans):\n    has_dot = False\n    ans = ans.strip()\n    i = 0\n    while i<len(ans) and ans[i] in ignore_starts:\n        i += 1\n    j = len(ans)-1\n    while j>=0 and ans[j] in ignore_ends:\n        has_dot = ans[j]=='.'\n        j -= 1\n    ans = ans[i:j+1]\n    if re.contains('\\d+') and ' ' in ans and has_dot:\n        ans = ans + \".\"\n    return ans\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size=20, \\\n                               max_answer_length=30, squad_v2=False, pp_cleanup=True):\n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        \n        if not squad_v2:\n            answer = best_answer[\"text\"]\n            if pp_cleanup:\n                answer = clean_answer(answer)\n            predictions[example[\"id\"]] = clean_answer(answer)\n        else:\n            answer = best_answer[\"text\"] if best_answer[\"score\"] > min_null_score else \"\"\n            if pp_cleanup:\n                answer = clean_answer(answer)\n            predictions[example[\"id\"]] = clean_answer(answer)\n\n    return predictions","5566e9e4":"# Train features","49bac5d9":"# Postprocess predictions","9cbed337":"# Preprocessing utils","b2879b2e":"# Validation features"}}