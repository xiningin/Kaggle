{"cell_type":{"10ebf493":"code","17917f39":"code","38f4d3c2":"code","e351c566":"code","95fe285d":"code","a2937f5d":"code","4d7827a2":"code","d3d9fe11":"code","69e5121b":"code","fa89316d":"code","122497b9":"code","0334bde4":"markdown","9b903b5b":"markdown","354526cd":"markdown","80a2bb6a":"markdown","9aaa852c":"markdown","1c369362":"markdown"},"source":{"10ebf493":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier\nimport lightgbm as lgb\nfrom tqdm import tqdm_notebook as tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if 'csv' in filename:\n            print(os.path.join(dirname, filename))","17917f39":"def input_train_test():\n    root = '..\/input\/unsw-nb15\/'\n    train = pd.read_csv(root+'UNSW_NB15_training-set.csv')\n    test = pd.read_csv(root+'UNSW_NB15_testing-set.csv')\n    \n    if train.shape[0] == 82332:\n        print(\"Train and test sets are reversed here. Fixing them.\")\n        train, test = test, train\n    drop_columns = ['attack_cat', 'id']\n    for df in [train, test]:\n        for col in drop_columns:\n            if col in df.columns:\n                print('Dropping '+col)\n                df.drop([col], axis=1, inplace=True)\n    return train, test\n\ndef get_cat_columns(train):\n    categorical = []\n    for col in train.columns:\n        if train[col].dtype == 'object':\n            categorical.append(col)\n    return categorical\n    \ndef label_encode(train, test):\n    for col in get_cat_columns(train):\n        le = LabelEncoder()\n        le.fit(list(train[col].astype(str).values) + list(test[col].astype(str).values))\n        train[col] = le.transform(list(train[col].astype(str).values))\n        test[col] = le.transform(list(test[col].astype(str).values))\n    return train, test\n\ndef feature_engineer(df):\n    df.loc[~df['state'].isin(['FIN', 'INT', 'CON', 'REQ', 'RST']), 'state'] = 'others'\n    df.loc[~df['service'].isin(['-', 'dns', 'http', 'smtp', 'ftp-data', 'ftp', 'ssh', 'pop3']), 'service'] = 'others'\n    df.loc[df['proto'].isin(['igmp', 'icmp', 'rtp']), 'proto'] = 'igmp_icmp_rtp'\n    df.loc[~df['proto'].isin(['tcp', 'udp', 'arp', 'ospf', 'igmp_icmp_rtp']), 'proto'] = 'others'\n    return df\n\ndef get_train_test(train, test, label_encoding=False, scaler=None):\n    x_train, y_train = train.drop(['label'], axis=1), train['label']\n    x_test, y_test = test.drop(['label'], axis=1), test['label']\n    \n    x_train, x_test = feature_engineer(x_train), feature_engineer(x_test)\n    \n    categorical_columns = get_cat_columns(x_train)\n    non_categorical_columns = [x for x in x_train.columns if x not in categorical_columns]\n    if scaler is not None:\n        x_train[non_categorical_columns] = scaler.fit_transform(x_train[non_categorical_columns])\n        x_test[non_categorical_columns] = scaler.transform(x_test[non_categorical_columns])\n\n    if label_encoding:\n        x_train, x_test = label_encode(x_train, x_test)\n        features = x_train.columns\n    else:\n        x_train = pd.get_dummies(x_train)\n        x_test = pd.get_dummies(x_test)\n        print(\"Column mismatch {0}, {1}\".format(set(x_train.columns)- set(x_test.columns),  set(x_test.columns)- set(x_train.columns)))\n        features = list(set(x_train.columns) & set(x_test.columns))\n    print(f\"Number of features {len(features)}\")\n    x_train = x_train[features]\n    x_test = x_test[features]\n\n    return x_train, y_train, x_test, y_test\n\ndef show_feature_importance(importance, columns):\n    feature_importance = pd.DataFrame(zip(columns, importance), columns=['Feature', 'Importance'])\n    feature_importance['Importance'] \/= feature_importance['Importance'].sum()*0.01\n    return feature_importance.sort_values(by=\"Importance\", ascending=False)","38f4d3c2":"train, test = input_train_test()\ncategorical_columns = get_cat_columns(train)","e351c566":"folds = 10\nseed = 1\nnum_round = 2000\nkf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=seed)\nX, Y, x_test, y_test = get_train_test(train, test, label_encoding=True, scaler= StandardScaler())\nimportance_dict = {\n    \"feature\": X.columns\n}","95fe285d":"clf = RandomForestClassifier(random_state=1)\nclf.fit(X, Y)\nfeature_importance = clf.feature_importances_\nimportance_dict['train'] =  feature_importance\n# show_feature_importance(feature_importance, X.columns)","a2937f5d":"feature_importances = []\n\nfor tr_idx, val_idx in tqdm(kf.split(X, Y), total=folds):\n    x_train, y_train = X.iloc[tr_idx], Y[tr_idx]\n    # x_val, y_val = X.iloc[val_idx], Y[val_idx]\n    clf = RandomForestClassifier()\n    clf.fit(x_train, y_train)\n    \n    feature_importances.append(clf.feature_importances_)\n\nfeature_importance = np.mean(feature_importances, axis=0)\nimportance_dict['train_10_fold'] =  feature_importance\n# show_feature_importance(feature_importance, X.columns)","4d7827a2":"total_x, total_y = pd.concat([X, x_test]), pd.concat([Y, y_test])","d3d9fe11":"clf = RandomForestClassifier()\nclf.fit(total_x, total_y)\nfeature_importance = clf.feature_importances_\nimportance_dict['combined'] =  feature_importance\n# show_feature_importance(feature_importance, X.columns)","69e5121b":"feature_importances = []\n\nfor tr_idx, val_idx in tqdm(kf.split(total_x, total_y), total=folds):\n    x_train, y_train = total_x.iloc[tr_idx], total_y.iloc[tr_idx]\n    clf = RandomForestClassifier()\n    clf.fit(x_train, y_train)\n    \n    feature_importances.append(clf.feature_importances_)\n\nfeature_importance = np.mean(feature_importances, axis=0)\nimportance_dict['combined_10_fold'] =  feature_importance\n# show_feature_importance(feature_importance, X.columns)","fa89316d":"importance_df = pd.DataFrame(importance_dict)\nfor col in importance_df.columns:\n    if col=='feature':\n        continue\n    importance_df[col] = importance_df[col]*100\/importance_df[col].sum()\n    \nimportance_df['mean'] = importance_df[[col for col in importance_df.columns if col!='feature']].mean(axis=1)\nimportance_df.sort_values('train_10_fold', ascending=False)","122497b9":"importance_df.to_csv(\"importance.csv\", index=False)","0334bde4":"# Prepare data","9b903b5b":"## Ten-fold cross validation","354526cd":"# On train data","80a2bb6a":"#  Utils","9aaa852c":"## Ten-fold cross validation","1c369362":"# Combined data (train+test)"}}