{"cell_type":{"3e6c8d06":"code","64438dd5":"code","506c0579":"code","c97f26e1":"code","c5490bff":"code","940e3feb":"code","72a49209":"markdown"},"source":{"3e6c8d06":"import math\nimport gc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","64438dd5":"train  = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain_X = train[train.columns[1:]]\/255.\ntrain_X = train_X.values.reshape(-1,28,28)\ntrain_X = np.pad(train_X, [(0,0),(2,2),(2,2)], 'constant', constant_values=0).reshape(-1,32,32)\ntrain_y = pd.get_dummies(train.label).values\n\n\ndel train\ngc.collect()","506c0579":"batch = 64\nweights = np.random.uniform(low=0, high=1, size=(25,8))\nfor i in np.arange(0,28,1):\n    for j in np.arange(0,28,1):\n        for f in range(math.ceil(train_X.shape[0]\/batch)):\n            batchimages = train_X[f*batch:(f+1)*batch,i:i+5,j:j+5].reshape(-1,25)\n            hidden = np.maximum(0,np.matmul(batchimages,weights))\n            reconstructedimages = np.maximum(0,np.matmul(hidden,weights.T))\n            reconstructedhidden = np.maximum(0,np.matmul(reconstructedimages,weights))\n            weights += .0001*(np.matmul(batchimages.T,hidden)-np.matmul(reconstructedimages.T,reconstructedhidden))\n\n\n","c97f26e1":"out1 = np.zeros((train_X.shape[0],32,32,8))\nfor f in range(math.ceil(train_X.shape[0]\/batch)):\n    for i in np.arange(0,28,1):\n        for j in np.arange(0,28,1):\n            batchimages = train_X[f*batch:(f+1)*batch,i:i+5,j:j+5].reshape(-1,25)\n            hidden = np.maximum(0,np.matmul(batchimages,weights))\n            out1[f*batch:(f+1)*batch,i+2,j+2,:] = hidden\ndel train_X\ngc.collect()\nout1 \/= out1.max()","c5490bff":"rows = 1\ncols = 8\naxes=[]\nfig=plt.figure(figsize=(16,10))\nfor a in range(rows*cols):\n    axes.append( fig.add_subplot(rows, cols, a+1) )\n    subplot_title=(\"Channel_\"+str(a))\n    axes[-1].set_title(subplot_title)  \n    plt.imshow(out1[0,:,:,a])\nplt.tight_layout()\nplt.show()","940e3feb":"rows = 1\ncols = 8\naxes=[]\nfig=plt.figure(figsize=(16,10))\nfor a in range(rows*cols):\n    axes.append( fig.add_subplot(rows, cols, a+1) )\n    subplot_title=(\"Channel_\"+str(a))\n    axes[-1].set_title(subplot_title)  \n    plt.imshow(out1[1,:,:,a])\nplt.tight_layout()\nplt.show()","72a49209":"A quick notebook whereby all convolutional layers of a traditional CNN (thanks Mr. Chris Deotte) are thrown away and replaced by 8 channels produced by a energy-based convolutional filters produced by energy minimization similar to that for a Restricted Boltzman Machine."}}