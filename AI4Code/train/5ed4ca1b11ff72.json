{"cell_type":{"101004ec":"code","5e1c26be":"code","9e8eccd1":"code","0b54fffb":"code","ff1e3e3f":"code","19a63fc0":"code","2553277f":"code","e793790d":"code","15fa70a9":"code","a70fe734":"code","f3658fed":"code","af961f93":"code","c8862592":"code","baef2aad":"code","3a692f45":"code","f7d08ec9":"code","2be77e11":"markdown","a535f959":"markdown","e4983ec5":"markdown","2c1dc8f5":"markdown"},"source":{"101004ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport pandas\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport altair as alt\nalt.data_transformers.disable_max_rows()\nfrom datetime import date\nfrom dateutil import parser\n\n\n# Visualize\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.offline as pyo\nfrom IPython.display import Image\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e1c26be":"import holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')","9e8eccd1":"df = pandas.read_csv('\/kaggle\/input\/weekly-fuel-prices-in-italy\/weekly_fuel_prices_all_data_from_2005_to_20210823.csv', delimiter=',', encoding = \"ISO-8859-2\")\ndf.head()","0b54fffb":"df.isnull().sum()","ff1e3e3f":"#Code by Aristotle  https:\/\/www.kaggle.com\/aristotle609\/kickstarter-project-eda\/notebook\n\ndef HChart(df,x_axis,y_axis,color_axis):\n    chart = alt.Chart(df).mark_bar().encode(\n        x = x_axis,\n        y = y_axis,\n        color = color_axis\n    )\n    display(chart)","19a63fc0":"#Plotting the state of the project\nHChart(df.sample(100) , \"PRODUCT_NAME\" , \"count()\" , 'PRODUCT_NAME')","2553277f":"#Code by Kohei-mu https:\/\/www.kaggle.com\/koheimuramatsu\/industrial-accident-causal-analysis\/notebook\n\nproduct_cnt = np.round(df['PRODUCT_NAME'].value_counts(normalize=True) * 100)\nhv.Bars(product_cnt).opts(title=\"Product Name Count\", color=\"green\", xlabel=\"PRODUCT NAME\", ylabel=\"Percentage\", yformatter='%d%%')\\\n                .opts(opts.Bars(width=500, height=300,tools=['hover'],show_grid=True)).opts(xrotation=45)","e793790d":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.PRODUCT_NAME)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","15fa70a9":"fig=sns.lmplot(x=\"PRICE\", y=\"CHANGE\",data=df)","a70fe734":"df.plot.area(y=['PRICE','VAT','EXCISE','NET'],alpha=0.4,figsize=(12, 6));","f3658fed":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","af961f93":"corr = df.corr(method='pearson')\nsns.heatmap(corr);","c8862592":"!pip install autoviz","baef2aad":"!pip install xlrd","3a692f45":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","f7d08ec9":"#Generating AutoViz Report\nfilename = \"\" # empty string (\"\") as filename since no file is being used for the data\nsep = \",\"\ndft = AV.AutoViz(\n    '',\n    sep=\",\",\n    depVar=\"\",\n    dfte=df,\n    header=0,\n    verbose=0,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=30,\n     )","2be77e11":"#CHANGE is Negative and Positive so to avoid ValueError: When stacked is True, each column must be either all positive or negative.CHANGE contains both positive and negative values. I removed it from the plot area.","a535f959":"![](https:\/\/i0.wp.com\/lh3.googleusercontent.com\/7IjKCgHawDwGQZ593iPdldZ0ZhPWGXZKjNNuunsd0hSZc0JMvBqiyC_ClYlpW3azSw=h300)androidmapsnavigationapps","e4983ec5":"#That's all for now.","2c1dc8f5":"#Autoviz changed a little bit since the first time I made it in \"AutoViz Owid\" (1 year ago)."}}