{"cell_type":{"ee80ade7":"code","37a989b8":"code","6f73d446":"code","cda6c588":"code","d771bde0":"code","13e07fec":"code","c7253d9f":"code","de03672d":"code","22feb73f":"code","2d004f8d":"code","8da33679":"code","baa1f0df":"code","ca4dba18":"code","763fa36b":"code","79059bda":"code","31967439":"code","3022ba1c":"code","efeb849e":"code","eb8b0936":"code","196c0e0b":"code","ea9e8f3c":"code","9a197148":"code","081c1a5d":"code","0cfcf835":"code","ede6c465":"code","7541071a":"code","22689be5":"code","1477444e":"code","46f548b3":"code","5a3e518a":"code","afe333c3":"code","0364c00a":"code","4d7bf5a2":"code","ef8150bd":"code","311b093d":"code","b4513339":"code","5c13532c":"code","24928d2d":"code","7808e1e0":"code","523faab8":"code","e0b4b34b":"code","3bedb67b":"code","969f9f07":"code","f73613ca":"code","84cb31e5":"code","3b1ca19b":"code","7f079161":"code","dd5f83fb":"code","14564704":"code","2f8c6b58":"code","51005489":"code","c04e6195":"code","0d1c7c0b":"code","eb4d69bd":"code","2d7c0ff3":"code","8173ce4f":"code","ad833250":"code","8ca2ebc9":"code","bccd3746":"code","232da954":"code","51df5582":"code","c1c1c995":"code","58b489ff":"code","a0c46334":"code","3e6f3f8c":"code","8fcfb90b":"code","edafc4bf":"code","44351627":"code","19ac637a":"code","4960b125":"code","d6cc8013":"code","5910bfd2":"code","726e9698":"code","ef87d67b":"code","30cad99d":"code","e136bd70":"code","b6d3764a":"code","bf6cddf5":"code","9a7d7bb7":"code","f70b57aa":"code","ec3207f3":"code","78a16383":"code","d0c80aa4":"code","33722dc0":"code","1218a8d9":"code","44a5920a":"code","361ac897":"code","cefe1fd4":"code","372bfa50":"code","e5424891":"code","54a0ced3":"code","2df86f58":"code","60bfa7ab":"code","0575312e":"code","f37f0321":"code","66e01c53":"code","3edbd13f":"code","98d96529":"code","36905521":"code","398326c7":"code","56028194":"code","c9cf1869":"code","a4860dad":"code","9bfdc369":"code","b4713622":"code","c0077f32":"code","a07bd3f8":"code","26d11d47":"code","0c81c99b":"code","cab8f8ec":"code","2ea2dba5":"code","08021dc6":"markdown","5a405c59":"markdown","787aee93":"markdown","5f6bbe7e":"markdown","0e6aa91a":"markdown","42ffaf86":"markdown","df86db42":"markdown","3c6d498b":"markdown","296728ea":"markdown","60f7cbed":"markdown","f61379b1":"markdown","4981c3e0":"markdown","3810bfb4":"markdown","a400a2cc":"markdown","a310d82e":"markdown","16401e62":"markdown","88df45ad":"markdown","88dae86a":"markdown","2d884509":"markdown","2c5dc267":"markdown","70fc6a6e":"markdown","c918725c":"markdown","77fa379a":"markdown","fc5c7eef":"markdown","9e38f745":"markdown","ce6bcc30":"markdown","5566ed47":"markdown","1e1de4d4":"markdown","af7481e1":"markdown","548633af":"markdown","9d5838d6":"markdown","aadbd516":"markdown","5e0dd7c5":"markdown","73c9f752":"markdown","4bb4deec":"markdown","5d152366":"markdown","195b9e4c":"markdown","8c8c6823":"markdown","d97bac14":"markdown","58ef93e6":"markdown","75ee72f9":"markdown","af53c02e":"markdown","7171bf05":"markdown","9fcfeced":"markdown","53989e4b":"markdown","bda960a4":"markdown","7fd0ae44":"markdown","99ae4818":"markdown","1f56ab6a":"markdown","52fafc3c":"markdown","930cd90a":"markdown","bb0db533":"markdown","471087d8":"markdown"},"source":{"ee80ade7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime as dt\n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nfrom math import isnan","37a989b8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6f73d446":"df = pd.read_csv(r\"\/kaggle\/input\/cricket\/Cricket.csv\",encoding='latin1')\ndf.head()","cda6c588":"df.shape","d771bde0":"df_dub = df.copy()\n# Checking for duplicates and dropping the entire duplicate row if any\ndf_dub.drop_duplicates(subset=None, inplace=True)","13e07fec":"df_dub.shape","c7253d9f":"df.shape","de03672d":"df.info()","22feb73f":"df.describe()","2d004f8d":"(df.isnull().sum() * 100 \/ len(df)).value_counts(ascending=False)","8da33679":"df.isnull().sum().value_counts(ascending=False)","baa1f0df":"(df.isnull().sum(axis=1) * 100 \/ len(df)).value_counts(ascending=False)","ca4dba18":"df.isnull().sum(axis=1).value_counts(ascending=False)","763fa36b":"df.head()","79059bda":"df[['Strt','End']] = df.Span.str.split(\"-\",expand=True) ","31967439":"df[['Strt','End']]=df[['Strt','End']].astype(int)\ndf['Exp']=df['End']-df['Strt']\ndf=df.drop(['Strt','End','Span'], axis = 1) \ndf.head()","3022ba1c":"#Match Played\nplt.figure(figsize = (30,5))\nmat = df[['Player','Mat']].sort_values('Mat', ascending = False)\nax = sns.barplot(x='Player', y='Mat', data= mat)\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","efeb849e":"plt.figure(figsize = (10,5))\nmat_top10 = df[['Player','Mat']].sort_values('Mat', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Mat', data= mat_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","eb8b0936":"#Inns\nplt.figure(figsize = (30,5))\ninns = df[['Player','Inns']].sort_values('Inns', ascending = False)\nax = sns.barplot(x='Player', y='Inns', data= inns)\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","196c0e0b":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','Inns']].sort_values('Inns', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Inns', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","ea9e8f3c":"#NO\nplt.figure(figsize = (30,5))\nno = df[['Player','NO']].sort_values('NO', ascending = False)\nax = sns.barplot(x='Player', y='NO', data= no)\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","9a197148":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','NO']].sort_values('NO', ascending = False).head(10)\nax = sns.barplot(x='Player', y='NO', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","081c1a5d":"#Runs\nplt.figure(figsize = (30,5))\nrun = df[['Player','Runs']].sort_values('Runs', ascending = False)\nax = sns.barplot(x='Player', y='Runs', data= run)\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","0cfcf835":"plt.figure(figsize = (10,5))\nruns_top10 = df[['Player','Runs']].sort_values('Runs', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Runs', data= runs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","ede6c465":"#HS\ndf.HS=df.HS.str.extract('(\\d+)')\ndf.HS=df.HS.astype(int)\nplt.figure(figsize = (30,5))\nhs = df[['Player','HS']].sort_values('HS', ascending = False)\nax = sns.barplot(x='Player', y='HS', data= hs)\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","7541071a":"plt.figure(figsize = (10,5))\nhs_top10 = df[['Player','HS']].sort_values('HS', ascending = False).head(10)\nax = sns.barplot(x='Player', y='HS', data= hs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","22689be5":"#Ave\nplt.figure(figsize = (30,5))\nave = df[['Player','Ave']].sort_values('Ave', ascending = False)\nax = sns.barplot(x='Player', y='Ave', data= ave)\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","1477444e":"plt.figure(figsize = (10,5))\navg_top10 = df[['Player','Ave']].sort_values('Ave', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Ave', data= avg_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","46f548b3":"#BF\nplt.figure(figsize = (30,5))\nbf = df[['Player','BF']].sort_values('BF', ascending = False)\nax = sns.barplot(x='Player', y='BF', data= bf)\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","5a3e518a":"plt.figure(figsize = (10,5))\nbf_top10 = df[['Player','BF']].sort_values('BF', ascending = False).head(10)\nax = sns.barplot(x='Player', y='BF', data= bf_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","afe333c3":"#SR \nplt.figure(figsize = (30,5))\nsr = df[['Player','SR']].sort_values('SR', ascending = False)\nax = sns.barplot(x='Player', y='SR', data= sr)\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","0364c00a":"plt.figure(figsize = (10,5))\nsr_top10 = df[['Player','SR']].sort_values('SR', ascending = False).head(10)\nax = sns.barplot(x='Player', y='SR', data= sr_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","4d7bf5a2":"#100\nplt.figure(figsize = (30,5))\nr100 = df[['Player','100']].sort_values('100', ascending = False)\nax = sns.barplot(x='Player', y='100', data= r100)\nax.set(xlabel = '', ylabel= \"100's Scored\" )\nplt.xticks(rotation=90)\nplt.show()","ef8150bd":"plt.figure(figsize = (10,5))\nr100_top10 = df[['Player','100']].sort_values('100', ascending = False).head(10)\nax = sns.barplot(x='Player', y='100', data= r100_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"100's Scored\")\nplt.xticks(rotation=90)\nplt.show()","311b093d":"#50\nplt.figure(figsize = (30,5))\nr50 = df[['Player','50']].sort_values('50', ascending = False)\nax = sns.barplot(x='Player', y='50', data= r50)\nax.set(xlabel = '', ylabel= \"50s Scored\")\nplt.xticks(rotation=90)\nplt.show()","b4513339":"plt.figure(figsize = (10,5))\nr50_top10 = df[['Player','50']].sort_values('50', ascending = False).head(10)\nax = sns.barplot(x='Player', y='50', data= r50_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"50's Scored\")\nplt.xticks(rotation=90)\nplt.show()","5c13532c":"#0\nplt.figure(figsize = (30,5))\nr0 = df[['Player','0']].sort_values('0', ascending = False)\nax = sns.barplot(x='Player', y='0', data= r0)\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","24928d2d":"plt.figure(figsize = (10,5))\nr0_top10 = df[['Player','0']].sort_values('0', ascending = False).head(10)\nax = sns.barplot(x='Player', y='0', data= r0_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","7808e1e0":"#Exp\nplt.figure(figsize = (30,5))\nexp = df[['Player','Exp']].sort_values('Exp', ascending = False)\nax = sns.barplot(x='Player', y='Exp', data= exp)\nax.set(xlabel = '', ylabel= 'Experience')\nplt.xticks(rotation=90)\nplt.show()","523faab8":"plt.figure(figsize = (10,5))\nexp_top10 = df[['Player','Exp']].sort_values('Exp', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Exp', data= exp_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Exprience')\nplt.xticks(rotation=90)\nplt.show()","e0b4b34b":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (10, 10))\nsns.heatmap(df.corr(), annot = True, cmap=\"rainbow\")\nplt.savefig('Correlation')\nplt.show()","3bedb67b":"sns.pairplot(df,corner=True,diag_kind=\"kde\")\nplt.show()","969f9f07":"df.describe()","f73613ca":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","84cb31e5":"plt.figure(figsize = (30,10))\nfeatures=[ 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'Ave', 'BF', 'SR', '100','50', '0', 'Exp']\nfor i in enumerate(features):\n    plt.subplot(3,4,i[0]+1)\n    sns.distplot(df[i[1]])","3b1ca19b":"Q3 = df.Mat.quantile(0.99)\nQ1 = df.Mat.quantile(0.01)\ndf['Mat'][df['Mat']<=Q1]=Q1\ndf['Mat'][df['Mat']>=Q3]=Q3","7f079161":"Q3 = df.Inns.quantile(0.99)\nQ1 = df.Inns.quantile(0.01)\ndf['Inns'][df['Inns']<=Q1]=Q1\ndf['Inns'][df['Inns']>=Q3]=Q3","dd5f83fb":"Q3 = df.NO.quantile(0.99)\nQ1 = df.NO.quantile(0.01)\ndf['NO'][df['NO']<=Q1]=Q1\ndf['NO'][df['NO']>=Q3]=Q3","14564704":"Q3 = df.Runs.quantile(0.99)\nQ1 = df.Runs.quantile(0.01)\ndf['Runs'][df['Runs']<=Q1]=Q1\ndf['Runs'][df['Runs']>=Q3]=Q3","2f8c6b58":"Q3 = df.HS.quantile(0.99)\nQ1 = df.HS.quantile(0.01)\ndf['HS'][df['HS']<=Q1]=Q1\ndf['HS'][df['HS']>=Q3]=Q3","51005489":"Q3 = df.Ave.quantile(0.99)\nQ1 = df.Ave.quantile(0.01)\ndf['Ave'][df['Ave']<=Q1]=Q1\ndf['Ave'][df['Ave']>=Q3]=Q3","c04e6195":"Q3 = df.BF.quantile(0.99)\nQ1 = df.BF.quantile(0.01)\ndf['BF'][df['BF']<=Q1]=Q1\ndf['BF'][df['BF']>=Q3]=Q3","0d1c7c0b":"Q3 = df.SR.quantile(0.99)\nQ1 = df.SR.quantile(0.01)\ndf['SR'][df['SR']<=Q1]=Q1\ndf['SR'][df['SR']>=Q3]=Q3","eb4d69bd":"Q3 = df.Exp.quantile(0.99)\nQ1 = df.Exp.quantile(0.01)\ndf['Exp'][df['Exp']<=Q1]=Q1\ndf['Exp'][df['Exp']>=Q3]=Q3","2d7c0ff3":"Q3 = df['100'].quantile(0.99)\nQ1 = df['100'].quantile(0.01)\ndf['100'][df['100']<=Q1]=Q1\ndf['100'][df['100']>=Q3]=Q3","8173ce4f":"Q3 = df['50'].quantile(0.99)\nQ1 = df['50'].quantile(0.01)\ndf['50'][df['50']<=Q1]=Q1\ndf['50'][df['50']>=Q3]=Q3","ad833250":"Q3 = df['0'].quantile(0.99)\nQ1 = df['0'].quantile(0.01)\ndf['0'][df['0']<=Q1]=Q1\ndf['0'][df['0']>=Q3]=Q3","8ca2ebc9":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","bccd3746":"# Dropping Player field as final dataframe will only contain data columns\n\ndf_drop = df.copy()\nplayer = df_drop.pop('Player')","232da954":"df_drop.head()","51df5582":"# Calculating Hopkins score to know whether the data is good for clustering or not.\n\ndef hopkins(X):\n    d = X.shape[1]\n    n = len(X)\n    m = int(0.1 * n) \n    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n    rand_X = sample(range(0, n, 1), m)\n \n    ujd = []\n    wjd = []\n    for j in range(0, m):\n        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n        ujd.append(u_dist[0][1])\n        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n        wjd.append(w_dist[0][1])\n \n    HS = sum(ujd) \/ (sum(ujd) + sum(wjd))\n    if isnan(HS):\n        print(ujd, wjd)\n        HS = 0\n \n    return HS","c1c1c995":"# Hopkins score\nHopkins_score=round(hopkins(df_drop),2)","58b489ff":"print(\"{} is a good Hopkins score for Clustering.\".format(Hopkins_score))","a0c46334":"\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df_drop)\ndf_scaled ","3e6f3f8c":"df_df1 = pd.DataFrame(df_scaled, columns = [ 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'Ave', 'BF', 'SR', '100',\n                                            '50', '0', 'Exp'])\ndf_df1.head()","8fcfb90b":"# Elbow curve method to find the ideal number of clusters.\nclusters=list(range(2,8))\nssd = []\nfor num_clusters in clusters:\n    model_clus = KMeans(n_clusters = num_clusters, max_iter=150,random_state= 50)\n    model_clus.fit(df_df1)\n    ssd.append(model_clus.inertia_)\n\nplt.plot(clusters,ssd);","edafc4bf":"# Silhouette score analysis to find the ideal number of clusters for K-means clustering\n\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n\nfor num_clusters in range_n_clusters:\n    \n    # intialise kmeans\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50,random_state= 100)\n    kmeans.fit(df_df1)\n    \n    cluster_labels = kmeans.labels_\n    \n    # silhouette score\n    silhouette_avg = silhouette_score(df_df1, cluster_labels)\n    print(\"For n_clusters={0}, the silhouette score is {1}\".format(num_clusters, silhouette_avg))","44351627":"#K-means with k=4 clusters\n\ncluster = KMeans(n_clusters=4, max_iter=150, random_state= 15)\ncluster.fit(df_df1)","19ac637a":"# Cluster labels\n\ncluster.labels_","4960b125":"# Assign the label\n\ndf['Cluster_Id'] = cluster.labels_\ndf.head()","d6cc8013":"## Number of countries in each cluster\ndf.Cluster_Id.value_counts(ascending=True)","5910bfd2":"# Scatter plot on Original attributes to visualize the spread of the data\n\nplt.figure(figsize = (20,15))\nplt.subplot(3,1,1)\nsns.scatterplot(x = 'Ave', y = 'NO',hue='Cluster_Id',data = df,legend='full',palette=\"Set1\")\nplt.subplot(3,1,2)\nsns.scatterplot(x = 'Ave', y = 'SR',hue='Cluster_Id', data = df,legend='full',palette=\"Set1\")\nplt.subplot(3,1,3)\nsns.scatterplot(x = 'NO', y = 'SR',hue='Cluster_Id', data=df,legend='full',palette=\"Set1\")\nplt.show()\n","726e9698":" #Violin plot on Original attributes to visualize the spread of the data\n\nfig, axes = plt.subplots(2,2, figsize=(15,12))\n\nsns.violinplot(x = 'Cluster_Id', y = 'Ave', data = df,ax=axes[0][0])\nsns.violinplot(x = 'Cluster_Id', y = 'SR', data = df,ax=axes[0][1])\nsns.violinplot(x = 'Cluster_Id', y = 'NO', data=df,ax=axes[1][0])\nsns.violinplot(x = 'Cluster_Id', y = 'Exp', data=df,ax=axes[1][1])\nplt.show()","ef87d67b":"df[['NO','Ave','SR','Cluster_Id']].groupby('Cluster_Id').mean()","30cad99d":"ax=df[['NO','Ave','SR','Cluster_Id']].groupby('Cluster_Id').mean().plot(kind = 'bar',figsize = (15,5))\n\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=0)\nplt.show();","e136bd70":"df[df['Cluster_Id']==0].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Can be Batsman Coach","b6d3764a":"df[df['Cluster_Id']==1].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Openers","bf6cddf5":"df[df['Cluster_Id']==2].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Chockers ","9a7d7bb7":"df[df['Cluster_Id']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Hitters","f70b57aa":"FinalListbyKMean=df[df['Cluster_Id']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False])\nFinalListbyKMean['Player']\nFinalListbyKMean.reset_index(drop=True).Player[:]","ec3207f3":"df_list_no = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['NO'].mean().sort_values(ascending = True)).head()\nax=df_list_no.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Not Out')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Not Out\", fontsize = 12, fontweight = 'bold')\nplt.show()","78a16383":"df_list_ave = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['Ave'].mean().sort_values(ascending = False)).head()\nax=df_list_ave.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Averages')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Averages\", fontsize = 12, fontweight = 'bold')\nplt.show()","d0c80aa4":"df_list_sr = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['SR'].mean().sort_values(ascending = False)).head()\nax=df_list_sr.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Strike Rates')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Strike Rates\", fontsize = 12, fontweight = 'bold')\nplt.show()","33722dc0":"df_df1.head()\n","1218a8d9":"# Single linkage\nplt.figure(figsize = (20,10))\nmergings = linkage(df_df1, method='single',metric='euclidean')\ndendrogram(mergings)\nplt.show()","44a5920a":"# Complete Linkage\nplt.figure(figsize = (20,10))\nmergings = linkage(df_df1, method='complete',metric='euclidean')\ndendrogram(mergings)\nplt.show()","361ac897":"df_hc = df.copy()\ndf_hc = df_hc.drop('Cluster_Id',axis=1)\ndf_hc.head()","cefe1fd4":"# 4 clusters\ncluster_labels = cut_tree(mergings, n_clusters=4).reshape(-1, )\ncluster_labels","372bfa50":"# assign cluster labels\ndf_hc['Cluster_labels'] = cluster_labels\ndf_hc.head()","e5424891":"## Number of countries in each cluster\ndf_hc.Cluster_labels.value_counts(ascending=True)","54a0ced3":"# Scatter plot on Original attributes to visualize the spread of the data\n\nplt.figure(figsize = (20,15))\nplt.subplot(3,1,1)\nsns.scatterplot(x = 'Ave', y = 'NO',hue='Cluster_labels',data = df_hc,legend='full',palette=\"Set1\")\nplt.subplot(3,1,2)\nsns.scatterplot(x = 'Ave', y = 'SR',hue='Cluster_labels', data = df_hc,legend='full',palette=\"Set1\")\nplt.subplot(3,1,3)\nsns.scatterplot(x = 'NO', y = 'SR',hue='Cluster_labels', data=df_hc,legend='full',palette=\"Set1\")\nplt.show()\n","2df86f58":" #Violin plot on Original attributes to visualize the spread of the data\n\nfig, axes = plt.subplots(2,2, figsize=(15,12))\n\nsns.violinplot(x = 'Cluster_labels', y = 'Ave', data = df_hc,ax=axes[0][0])\nsns.violinplot(x = 'Cluster_labels', y = 'SR', data = df_hc,ax=axes[0][1])\nsns.violinplot(x = 'Cluster_labels', y = 'NO', data=df_hc,ax=axes[1][0])\nsns.violinplot(x = 'Cluster_labels', y = 'Exp', data=df_hc,ax=axes[1][1])\nplt.show()","60bfa7ab":"df_hc[['NO','Ave','SR','Cluster_labels']].groupby('Cluster_labels').mean()","0575312e":"ax=df_hc[['NO','Ave','SR','Cluster_labels']].groupby('Cluster_labels').mean().plot(kind = 'bar',figsize = (15,5))\n\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=0)\nplt.show();","f37f0321":"df_hc[df_hc['Cluster_labels']==0].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Can be Batsman Coach","66e01c53":"df_hc[df_hc['Cluster_labels']==1].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#MiddleOrders ","3edbd13f":"df_hc[df_hc['Cluster_labels']==2].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Hitters","98d96529":"df_hc[df_hc['Cluster_labels']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Hitters 2 ","36905521":"FinalListbyHC=df_hc[df_hc['Cluster_labels']==2].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False])\nFinalListbyHC['Player']\nFinalListbyHC.reset_index(drop=True).Player[:]","398326c7":"df_list_hc = pd.DataFrame(FinalListbyHC.groupby(['Player'])['NO'].mean().sort_values(ascending = True)).head()\nax=df_list_no.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Not Out')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Not Out\", fontsize = 12, fontweight = 'bold')\nplt.show()","56028194":"df_list_ave = pd.DataFrame(FinalListbyHC.groupby(['Player'])['Ave'].mean().sort_values(ascending = False)).head()\nax=df_list_ave.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Averages')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Averages\", fontsize = 12, fontweight = 'bold')\nplt.show()","c9cf1869":"df_list_sr = pd.DataFrame(FinalListbyHC.groupby(['Player'])['SR'].mean().sort_values(ascending = False)).head()\nax=df_list_sr.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Strike Rates')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Strike Rates\", fontsize = 12, fontweight = 'bold')\nplt.show()","a4860dad":"## Number of countries in each cluster in K-Means \ndf.Cluster_Id.value_counts(ascending=True)","9bfdc369":"## Number of countries in each cluster for Hierarchical clustering\ndf_hc.Cluster_labels.value_counts(ascending=True)","b4713622":"FinalListbyKMean=df[df['Cluster_Id']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False])\nFinalListbyKMean['Player']\nFinalListbyKMean.reset_index(drop=True).Player[:5]","c0077f32":"df_list_no = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['NO'].mean().sort_values(ascending = True)).head()\nax=df_list_no.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Not Out')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Not Out\", fontsize = 12, fontweight = 'bold')\nplt.show()","a07bd3f8":"# plots\ndf_list_ave = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['Ave'].mean().sort_values(ascending = False)).head()\nax=df_list_ave.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Averages')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Averages\", fontsize = 12, fontweight = 'bold')\nplt.show()","26d11d47":"df_list_sr = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['SR'].mean().sort_values(ascending = False)).head()\nax=df_list_sr.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Strike Rates')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Strike Rates\", fontsize = 12, fontweight = 'bold')\nplt.show()","0c81c99b":"#FinalList with K-Means\nFinalListbyKMean.reset_index(drop=True).Player[:5]","cab8f8ec":"# Final Players list with Hierarchical clustering\nFinalListbyHC.reset_index(drop=True).Player[:5]","2ea2dba5":"# Final Players list\nFinalListbyKMean.reset_index(drop=True).Player[:5]","08021dc6":"# K- means Clustering","5a405c59":"From the business understanding we have learnt that Ave, NO, SR are some important factors which decides the form of a player. Hence, we will proceed with analyzing these 3 components to build some meaningful clusters.","787aee93":"> We will opt for 4 as cluster = 2 is not making sense in decison making.","5f6bbe7e":"Hierarchical clustering involves creating clusters that have a predetermined ordering from top to bottom. For example, all files and folders on the hard disk are organized in a hierarchy. There are two types of hierarchical clustering,\n\n- Divisive\n- Agglomerative.","0e6aa91a":"# Data Cleaning","42ffaf86":"The Hopkins statistic (introduced by Brian Hopkins and John Gordon Skellam) is a way of measuring the cluster tendency of a data set.It acts as a statistical hypothesis test where the null hypothesis is that the data is generated by a Poisson point process and are thus uniformly randomly distributed. A value close to 1 tends to indicate the data is highly clustered, random data will tend to result in values around 0.5, and uniformly distributed data will tend to result in values close to 0.\n\n\u2022 If the value is between {0.01, ...,0.3}, the data is regularly spaced.\n\n\u2022 If the value is around 0.5, it is random.\n\n\u2022 If the value is between {0.7, ..., 0.99}, it has a high tendency to cluster.","df86db42":"### Silhouette Analysis","3c6d498b":"# Final Analysis","296728ea":"All are batsman","60f7cbed":"- Mat and Inns are highly correlated with correlation of 0.99\n- Mat and Runs are highly correlated with correlation of 0.86\n- Runs and Inns are highly correlated with correlation of 0.90","f61379b1":"All are Batsmans","4981c3e0":"silhouette score=(p\u2212q)\/max(p,q)\n\np is the mean distance to the points in the nearest cluster that the data point is not a part of\n\nq is the mean intra-cluster distance to all the points in its own cluster.\n\nThe value of the silhouette score range lies between -1 to 1.\n\nA score closer to 1 indicates that the data point is very similar to other data points in the cluster,\n\nA score closer to -1 indicates that the data point is not similar to the data points in its cluster.","3810bfb4":"# Hopkins Statistics Test","a400a2cc":"Null Percentage: Columns","a310d82e":"# Conclusion","16401e62":"Though Required Clusters have same players , but for Hierarchical clustering has more execution time compared to K-Mean\n\nK-mean is an ideal algorithm for this problem statement.","88df45ad":"All are Batsmans","88dae86a":"## Data Preparation","2d884509":"# Exploratory Data Analytics","2c5dc267":"Null Count: Rows","70fc6a6e":"Plot histogram for each continous variables","c918725c":"# Data Inspection","77fa379a":"All are batsmans","fc5c7eef":"In complete linkage hierarchical clustering, the distance between two clusters is defined as the longest distance between two points in each cluster. For example, the distance between clusters \u201cr\u201d and \u201cs\u201d to the left is equal to the length of the arrow between their two furthest points.","9e38f745":"In single linkage hierarchical clustering, the distance between two clusters is defined as the shortest distance between two points in each cluster. For example, the distance between clusters \u201cr\u201d and \u201cs\u201d to the left is equal to the length of the arrow between their two closest points.","ce6bcc30":"Null Percentage: Rows","5566ed47":"Outlier Analysis","1e1de4d4":"- We have analyzed both K-means and Hierarchial clustering and found clusters formed are identical.\n- The time complexity of K Means is linear i.e. O(n) while that of hierarchical clustering is quadratic i.e. O(n2)\n- Difference in execution was not experienced as dataset was very small.\n- K Means clustering requires prior knowledge of K i.e. no. of clusters we want to divide our data into. But, we can stop at whatever number of clusters we find appropriate in hierarchical clustering by interpreting the dendrogram\n- So, we will proceed with the clusters formed by K-means and based on the information provided by the final clusters we will deduce the final list of players for the team","af7481e1":"Percentile Capping (Winsorization) for outliers handling","548633af":"It seems there are good number of countries in each clusters.","9d5838d6":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","aadbd516":"Null Count: Columns","5e0dd7c5":"## Univariate Analysis","73c9f752":"# Final List of Players who can appointed in a new team for Batsman role ","4bb4deec":"Derived Metrices","5d152366":"# Complete Linkage","195b9e4c":"# Model Building","8c8c6823":"### Elbow Curve to get the right number of Clusters","d97bac14":"## Finding the Optimal Number of Clusters","58ef93e6":"Looking at the above elbow curve it looks good to proceed with 4 clusters.","75ee72f9":"## Cluster Profiling","af53c02e":"### Duplicate Check","7171bf05":"# Final List of Players who can appointed in a new team for Batsman role","9fcfeced":"# Rescaling the Features","53989e4b":"Complete Linkage suggests for 4 clusters ,","bda960a4":"# Hierarchical Clustering","7fd0ae44":"# Cluster Profiling","99ae4818":"We recommend to use K-means for clustering of players and then later we identified few factors like NO,SR & Ave etc which plays a vital role in deciding the final players and builded clusters of players based on that. Based on those clusters we have identified the below list of players for team. The list of players are subject to change as it is based on the few factors like Number of components chosen, Number of Clusters chosen, Clustering method used etc.which we have used to build the model.\n\n","1f56ab6a":"# Final List of Players who can appointed in a new team for Batsman role","52fafc3c":"Single Linkage:","930cd90a":"From the business understanding we have learnt that Ave, NO, SR are some important factors which decides the form of a player. Hence, we will proceed with analyzing these 3 components to build some meaningful clusters.","bb0db533":"There are no missing \/ Null values either in columns or rows","471087d8":"It seems there are good number of countries in each clusters."}}