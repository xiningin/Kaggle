{"cell_type":{"08e23d53":"code","62ad4703":"code","d4245c9c":"code","be2f4dab":"code","18e9a13b":"code","f83bb7f3":"code","cdf06a72":"code","3fa39446":"code","0f52516d":"code","63c0efc7":"code","55e2c97f":"code","f74f367c":"code","398d7097":"code","86aa48d3":"code","02ff8679":"code","74c391dd":"code","18bd20cc":"code","32d6e20a":"code","91da5466":"code","9cdf8ad7":"code","96c50a60":"code","52f82b28":"code","fceabce3":"code","d47e6583":"code","d52ec4a7":"code","7b33881d":"code","3d00968f":"code","ff34db35":"code","7604768a":"code","129980dd":"code","55cce5b8":"code","0520f91b":"code","336360f5":"code","4dc90642":"code","7b204754":"code","f2b4c80b":"code","efbc6065":"code","62df80e5":"code","a4218dea":"code","2935bec2":"code","be67d724":"code","a9c8a586":"code","8e20a56e":"code","0e39bf92":"code","0f604ef9":"code","4f6eb149":"code","06f44c26":"code","431c15da":"code","c5b03976":"code","da58fb4e":"code","44ca5ba0":"code","e7d5a0ed":"code","ed925950":"code","c872c6f3":"code","fddc5989":"code","8669f284":"code","2836b1b0":"code","cee5319c":"code","572906e4":"code","1eb4e837":"code","27c2dfa2":"code","4f182b27":"code","2667d719":"code","dffdf944":"code","ad552557":"code","4b41c0c2":"code","65853ff8":"code","986b3771":"markdown","2ad91b40":"markdown","98bc4203":"markdown","6224dd2b":"markdown","29dff5d4":"markdown","94f03deb":"markdown","2a5c2df9":"markdown","531b7b11":"markdown","13e35599":"markdown","797a832c":"markdown","0f2d68f6":"markdown","e128a7c6":"markdown","2e91929d":"markdown","f4700edb":"markdown","c20e9dbd":"markdown","53771f4b":"markdown","83838cc4":"markdown","da6afef9":"markdown","cc410867":"markdown","9db57e38":"markdown","4d969ebc":"markdown","1bd248e0":"markdown","2227b59a":"markdown","cd974f8a":"markdown","c0196fc1":"markdown","fcd556b1":"markdown","c0485e07":"markdown","fbb3919f":"markdown","f58b3f4c":"markdown","cfe89e7c":"markdown","325e3e7e":"markdown","b223b203":"markdown"},"source":{"08e23d53":"import numpy as np \nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore') ","62ad4703":"pr = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\nsr = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","d4245c9c":"pr.head()","be2f4dab":"print(sorted(pr['Geographic Area'].unique()))","18e9a13b":"print(sorted(kill['state'].unique()))","f83bb7f3":"print(sorted(sr['Geographic area'].unique()))","cdf06a72":"kill.head()","3fa39446":"sr.head()","0f52516d":"pr.head()","63c0efc7":"type(pr.poverty_rate.iloc[0])","55e2c97f":"pr.poverty_rate.value_counts()","f74f367c":"pr.poverty_rate.replace(['0'],\"-\",inplace = True)\npr.poverty_rate.replace(['-'],0.0,inplace = True)","398d7097":"pr.poverty_rate.value_counts()","86aa48d3":"pr.info()","02ff8679":"pr[\"poverty_rate\"]=pr.poverty_rate.astype(\"float\")","74c391dd":"pr.info()","18bd20cc":"type(pr.poverty_rate.iloc[0])","32d6e20a":"pr.groupby(\"Geographic Area\").poverty_rate.mean().head()","91da5466":"poverty_rate_of_state=pr.groupby(\"Geographic Area\").poverty_rate.mean()","9cdf8ad7":"# with pandas\npoverty_rate_of_state.plot(figsize=(15,6));","96c50a60":"# with matplotlib\nplt.figure(figsize=(15,6))\nplt.plot(poverty_rate_of_state);","52f82b28":"# with pandas\npoverty_rate_of_state.plot(kind=\"bar\",rot=45,figsize=(15,6),label=\"Poverty Rate\")\nplt.xlabel(\"States\")\nplt.ylabel(\"Poverty Rate\")\nplt.title(\"Poverty Rate Given States\")\nplt.legend();","fceabce3":"poverty_rate_of_state.sort_values(ascending=False).plot(kind=\"bar\",rot=45,figsize=(15,6),label=\"Poverty Rate\")\nplt.xlabel(\"States\")\nplt.ylabel(\"Poverty Rate\")\nplt.title(\"Poverty Rate Given States\")\nplt.legend();","d47e6583":"# with matplotlib\nplt.figure(figsize=(15,6))\n# plt.bar(x,height,data=)\nplt.bar(poverty_rate_of_state.sort_values(ascending=False).index,poverty_rate_of_state.sort_values(ascending=False))\nplt.xlabel(\"States\")\nplt.ylabel(\"Poverty Rate\")\nplt.title(\"Poverty Rate Given States\")\nplt.xticks(poverty_rate_of_state.sort_values().index, poverty_rate_of_state.sort_values().index, rotation=45)\nplt.legend();","d52ec4a7":"df=pd.DataFrame(poverty_rate_of_state.sort_values(ascending=True)).reset_index()\ndf.head()","7b33881d":"plt.figure(figsize=(15,6))\n# \nsns.barplot(x=\"Geographic Area\", y=\"poverty_rate\", data=df, order=df.sort_values(\"poverty_rate\",ascending=False)[\"Geographic Area\"])\nplt.xticks(rotation=70)\nplt.title(\"Poverty Rate Given States\")\nplt.tight_layout();","3d00968f":"kill.head()","ff34db35":"kill.name.value_counts()","7604768a":"# Problem: TK TK is most probably not a name or surname. We will clean them.\npairs = kill.name[kill.name != 'TK TK'].str.split()\npairs.head()","129980dd":"names=pairs.apply(lambda x: x[0]).value_counts()\nsurnames=pairs.apply(lambda x: x[-1]).value_counts()","55cce5b8":"ax=names[:15].plot(kind=\"bar\", rot=45,figsize=(10,6))\n\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01, p.get_height() * 1.02));","0520f91b":"\nax=surnames[:15].plot(kind=\"bar\", rot=45,figsize=(10,6));\n\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01, p.get_height() * 1.02));","336360f5":"# Alternative Solution with collections Module\n\nnames_surnames=pairs.map(lambda x: (x[0],x[-1]))\nnames,surnames=zip(*names_surnames)","4dc90642":"from collections import Counter\n\ncnt = Counter()\nfor name in names:\n    #cnt[name] += 1\n    cnt.update([name])\nnames_df=pd.DataFrame(cnt.most_common(15),columns=[\"Names\",\"Nums\"])\nnames_df.plot.bar(x=\"Names\",y=\"Nums\",rot=45,figsize=(10,6));","7b204754":"kill.head()","f2b4c80b":"kill.race.unique()","efbc6065":"kill.race.value_counts()","62df80e5":"kill.info()","a4218dea":"kill.isnull().sum()","2935bec2":"kill.dropna(inplace=True)","be67d724":"kill.isnull().sum()","a9c8a586":"# with pandas\nkill.race.value_counts().plot(kind=\"pie\", figsize=(10,6));","8e20a56e":"# with matplotlib\ndf=pd.DataFrame(kill.race.value_counts())\nlabels=df.index\nsizes=df.race\n\nfig, ax = plt.subplots(figsize=(12,8))\n\nax.pie(sizes, labels=labels, autopct='%1.1f%%',startangle=130)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title(\"Killed People According to Races\")\nplt.show()","0e39bf92":"# with seaborn\n\n","0f604ef9":"kill.head()","4f6eb149":"kill.manner_of_death.unique()","06f44c26":"plt.figure(figsize=(10,6))\nsns.boxplot(x=\"manner_of_death\", y=\"age\", data=kill,palette='rainbow',hue=\"gender\");","431c15da":"# alternative\nplt.figure(figsize=(10,6))\nsns.boxplot(x=\"gender\", y=\"age\", data=kill,palette='rainbow',hue=\"manner_of_death\");","c5b03976":"plt.figure(figsize=(9,6))\nsns.swarmplot(x=\"manner_of_death\", y=\"age\",hue='gender',data=kill.sample(500, random_state=101), palette=\"Set1\", split=True);","da58fb4e":"plt.figure(figsize=(9,6))\nsns.swarmplot(x=\"manner_of_death\", y=\"age\",hue='gender',data=kill.sample(500, random_state=101));","44ca5ba0":"sns.countplot(x=\"gender\",data=kill);","e7d5a0ed":"kill.armed.value_counts()","ed925950":"common_weapons=pd.DataFrame(kill.armed.value_counts()).reset_index()\ncommon_weapons.head()","c872c6f3":"plt.figure(figsize=(9,6))\nsns.barplot(x=\"index\",y=\"armed\",data=common_weapons[:7])\nplt.xlabel(\"Weapons Type\")\nplt.ylabel(\"Number of Weapons\")\nplt.title(\"Kill Weapons\");","fddc5989":"killed_by_age={\"above25\":[kill[kill.age>25].shape[0]],\"under25\":[kill[kill.age<=25].shape[0]]}","8669f284":"pd.DataFrame(killed_by_age).T.plot.bar(legend=False,rot=0,title=\"Age of Killed People\")\nplt.xlabel(\"Age\");","2836b1b0":"df=kill.groupby(\"race\").count().sort_values(\"id\",ascending=False)\ndf","cee5319c":"# with barplot\nsns.barplot(x=df.index, y=\"id\", data=df);\nplt.ylabel(\"count\");","572906e4":"# with countplot\nsns.countplot(x=\"race\",data=kill, order=kill.race.value_counts().index);","1eb4e837":"plt.figure(figsize=(12,8))\nsns.countplot(x=\"city\", data=kill, order=kill.city.value_counts()[:12].index);","27c2dfa2":"plt.figure(figsize=(12,8))\nsns.countplot(x=\"state\", data=kill, order=kill.state.value_counts()[:20].index);","4f182b27":"# with pandas\nkill.signs_of_mental_illness.value_counts().plot.bar();","2667d719":"# with seaborn\nsns.countplot(x=\"signs_of_mental_illness\",data=kill);\n","dffdf944":"kill.threat_level.value_counts()","ad552557":"sns.countplot(x=\"threat_level\", data=kill);","4b41c0c2":"kill.flee.value_counts()","65853ff8":"sns.countplot(x=\"flee\", data=kill);","986b3771":"**INSTRUCTION: Demonstrate the Qurtiles of age in both genders separeted by manner of death.**","2ad91b40":"## 4a.Box plot of age in both genders separeted by manner of death.","98bc4203":"**INSTRUCTION-2 : Convert type of poverty_rate colum to a numeric type (float).**","6224dd2b":"**INSTRUCTION: Demonstrate the age in both genders separeted by manner of death by a swarm plot.**","29dff5d4":"## 1. Mean poverty rate of each state","94f03deb":"Problem: data type of poverty_rate colum is object. We need to convert it to a numeric type (float).","2a5c2df9":"Problem: We don't know what does \"-\" mean. We need to clean it. Maybe we can consider it as 0.","531b7b11":"**INSTRUCTION-3.a.2 : Plot Sorted Values With Pandas Built in method:**","13e35599":"## 2. Most common 15 Name or Surname of killed people ","797a832c":"**INSTRUCTION-2: Demonstrate Race Ratio of Killed People by a Pie Chart**","0f2d68f6":"**INSTRUCTION-3 : Plot the Poverty rate of each state. (Demonstrate mean value of each Geogrophic Area (AL, AK, AR).)**","e128a7c6":"**INSTRUCTION-6: Plot 20 most dangerous states**","2e91929d":"**INSTRUCTION-5: Plot 12 most dangerous cities**","f4700edb":"## 4b. Swarm Plot (Do not use in large datasets. The memory will not be enogh!)","c20e9dbd":"**INSTRUCTION-2: Plot 7 most common kill weapons**","53771f4b":"## 3. Killed People According to Races (Pie Chart)","83838cc4":"**INSTRUCTION-3.b : Plot Sorted Values With Matplotlib:** ","da6afef9":"**INSTRUCTION-1: replace the \"-\" with zero.**","cc410867":"**INSTRUCTION-3.a.1 : Plot With Pandas Built in method:**","9db57e38":"**INSTRUCTION-3.c : Plot Sorted Values With Seaborn** ","4d969ebc":"# Clue 1: You need to separate the names and surnames because we are asking most common name OR surname.\n\n# Clue 2 :After seperation make a whole list that contains both names and surnames.\n\n# Clue 3 : How to separate the name and surname pairs?\n\n>>> pairs = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]\n>>> numbers, letters = zip(*pairs)\n>>> numbers\n(1, 2, 3, 4)\n>>> letters\n('a', 'b', 'c', 'd')\n\n# Clue 4: You can use Counter() and most_common() built in functions together to find the most common names or surnames, or you can write your functions for this purpose.","1bd248e0":"## 5. Kill properties (Count Plots)","2227b59a":"**INSTRUCTION-9: Plot number of Flee Types**","cd974f8a":"INSTRUCTIONS\n1. Mean poverty rate of each state\n1. Most common 15 Name or Surname of killed people\n1. Killed People According to Races\n1. Box and Swarm Plots in kill data\n1. Kill properties (Count Plot)\n    * Number of people by gender\n    * Kill weapon\n    * Age of killed people\n    * Race of killed people\n    * Most dangerous cities\n    * Most dangerous states\n    * Having mental ilness or not for killed people\n    * Threat types\n    * Flee types\n<br>","c0196fc1":"Problem: missing value on race column.","fcd556b1":"**INSTRUCTION-7: Plot Having mental ilness or not for killed people**","c0485e07":"**INSTRUCTION-8: Plot number of Threat Types**","fbb3919f":"**INSTRUCTION : Plot Most common 15 Name or Surname of killed people** ","f58b3f4c":"**INSTRUCTION-3: Plot number of age of killed people under two groups : Under 25 and Above 25**","cfe89e7c":"**INSTRUCTION-4: Plot number of killed poeple by race**","325e3e7e":"**INSTRUCTION-1: Drop the all raws that contain missing value (dropna)**","b223b203":"**INSTRUCTION-1: Plot number of poeple by gender**"}}