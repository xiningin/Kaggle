{"cell_type":{"553ecb58":"code","0b4d51d5":"code","8fa43394":"code","d1f837e2":"code","d5ab34d2":"code","9448f486":"code","8a026bda":"code","9dd733e8":"code","0b9e6b92":"code","56b2bfa2":"code","0bbb7d91":"code","b905aa95":"code","d46be902":"code","783f7bb9":"code","0cf68676":"code","8e28a808":"code","35a938b4":"code","edd6dc24":"code","42312061":"code","f7d3932e":"code","99e9c7b2":"code","f9559a5a":"code","607a23a5":"code","e2b11de7":"code","f28116a9":"code","4c4348ce":"code","fb560fb5":"code","1ccccd03":"code","d58fdc86":"code","661f8d8d":"code","83bde5e5":"code","7b529994":"code","b5c3b0bf":"code","9510b96f":"code","7433c497":"code","d4721a70":"code","b0efc0e4":"code","274ae72f":"code","e4a0be51":"code","b6770f13":"code","e50754cd":"code","7b8442de":"code","4465000e":"code","19528c04":"code","bc5552f1":"code","763e1a14":"markdown","d498b71b":"markdown","dd9729da":"markdown","6c497e45":"markdown","6b379fda":"markdown","4f1c8eb9":"markdown","73bb3287":"markdown","09ed75fc":"markdown","d0b3c640":"markdown","10c566e3":"markdown","7dcbfe92":"markdown"},"source":{"553ecb58":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nimport xgboost as xgb\nimport tensorflow as tf\nimport keras","0b4d51d5":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")","8fa43394":"test.head()","d1f837e2":"train.head()","d5ab34d2":"train.describe()","9448f486":"fig,axes= plt.subplots(1,2)\nfig.tight_layout()\n\nsns.countplot(x='Survived',hue='Sex',data=train,ax=axes[0])\nsns.countplot(x='Survived',hue='Pclass',data=train,ax=axes[1])\n\nplt.show()","8a026bda":"fig = plt.subplots(figsize=(10,10)) \nsns.heatmap(train.corr(), annot=True)","9dd733e8":"columnas_importantes= ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Embarked']\ntrain_new=train[columnas_importantes]","0b9e6b92":"train_new.isnull().any()","56b2bfa2":"age_null=train_new[\"Age\"].isnull().sum()\nembarked_null=train_new[\"Embarked\"].isnull().sum()\n\nprint(\"La cantidad de nulos en Age es:\",age_null)\nprint(\"La cantidad de nulos en Embarked es:\",embarked_null)","0bbb7d91":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train_new)","b905aa95":"def imputar_Edad(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    if pd.isnull(Age):\n        if Pclass==1:\n            return 37\n        elif Pclass==2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","d46be902":"train_new['Age'] = train_new[['Age','Pclass']].apply(imputar_Edad,axis=1)","783f7bb9":"train_new['Embarked'] = train_new['Embarked'].fillna(train_new[\"Embarked\"].mode()[0])","0cf68676":"train_new.isnull().sum()","8e28a808":"train_new.head()","35a938b4":"train_new = pd.get_dummies(data=train_new,prefix=\"Embarked_\",columns=[\"Embarked\"],drop_first=True)","edd6dc24":"train_new = pd.get_dummies(data=train_new,prefix=\"Sex_\",columns=[\"Sex\"],drop_first=True)","42312061":"train_new.loc[ train_new['Fare'] <= 7.91, 'Fare'] = 0\ntrain_new.loc[(train_new['Fare'] > 7.91) & (train_new['Fare'] <= 14.454), 'Fare'] = 1\ntrain_new.loc[(train_new['Fare'] > 14.454) & (train_new['Fare'] <= 31), 'Fare']   = 2\ntrain_new.loc[ train_new['Fare'] > 31, 'Fare']= 3\ntrain_new['Fare'] = train_new['Fare'].astype(int)","f7d3932e":"train_new.head()","99e9c7b2":"test.head()","f9559a5a":"columnas_importantes_test= ['Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Embarked']\ntest2=test.copy()\ntest_new= test2[columnas_importantes_test]","607a23a5":"test.head()","e2b11de7":"test_new.isnull().sum()","f28116a9":"test_new['Age'] = test_new[['Age','Pclass']].apply(imputar_Edad,axis=1)","4c4348ce":"test_new['Fare'].fillna(35.6271,inplace=True)","fb560fb5":"test_new.isnull().sum()","1ccccd03":"test_new = pd.get_dummies(data=test_new,prefix=\"Embarked_\",columns=[\"Embarked\"],drop_first=True)","d58fdc86":"test_new = pd.get_dummies(data=test_new,prefix=\"Sex_\",columns=[\"Sex\"],drop_first=True)","661f8d8d":"test_new.loc[ test_new['Fare'] <= 7.91, 'Fare'] = 0\ntest_new.loc[(test_new['Fare'] > 7.91) & (test_new['Fare'] <= 14.454), 'Fare'] = 1\ntest_new.loc[(test_new['Fare'] > 14.454) & (test_new['Fare'] <= 31), 'Fare']   = 2\ntest_new.loc[ test_new['Fare'] > 31, 'Fare']= 3\ntest_new['Fare'] = test_new['Fare'].astype(int)","83bde5e5":"test_new.head()","7b529994":"test.head()","b5c3b0bf":"from sklearn.metrics import accuracy_score","9510b96f":"X= train_new.drop(columns = ['Survived',\"Name\",\"Ticket\"])\ny=train_new['Survived']\ntesteo= test_new.drop(columns=[\"Name\",\"Ticket\"])","7433c497":"rscl=RobustScaler()\nX= rscl.fit_transform(X)\ntesteo=rscl.fit_transform(testeo)","d4721a70":"import sklearn.metrics as metrics\ny_pred = np.zeros(y.shape)\naccuracy_ceros = metrics.accuracy_score(y,y_pred)\nprint(accuracy_ceros)","b0efc0e4":"#Todos Unos\ny_pred = np.ones(y.shape)\naccuracy_unos = metrics.accuracy_score(y,y_pred)\nprint(accuracy_unos)","274ae72f":"gbm = xgb.XGBClassifier()\n","e4a0be51":"gbm.fit(X, y)\nxgb_predictions = gbm.predict(testeo)\nxgb_Score = gbm.score(X,y)\nxgb_Score","b6770f13":"params_xgb = {\n        \"booster\":[\"gbtree\"],\n        \"n_estimators\":[500],\n        \"learning_rate\":[0.8],\n        'min_child_weight': [5],\n        'gamma': [2],\n        'subsample': [0.7],\n        'colsample_bytree': [0.4],\n        'max_depth': [3],\n        'gpu_id': [0],\n        \"predictor\":[\"gpu_predictor\"],\n        'tree_method': ['gpu_hist'],\n        \"objective\": [\"binary:hinge\"],\n        \"single_precision_histogram\":[True],\n        \"updater\":[\"grow_gpu_hist\"],\n        \"sampling_method\":[\"gradient_based\"],\n        \"scale_pos_weight\":[4,5]\n        }","e50754cd":"model_xgb = GridSearchCV(gbm, param_grid=params_xgb, cv=10,n_jobs=-1)\nmodel_xgb.fit(X,y)","7b8442de":"print(\"Mejores parametros: \"+str(model_xgb.best_params_))\nprint(\"Mejor Score: \"+str(model_xgb.best_score_)+'\\n')\n\nscores = pd.DataFrame(model_xgb.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","4465000e":"\"\"\"prueba 1:\nMejores parametros: {'booster': 'gbtree', 'colsample_bytree': 0.6, 'gamma': 2, 'gpu_id': 0, 'learning_rate': 0.01, 'max_depth': 5, 'min_child_weight': 5, 'n_estimators': 500, 'objective': 'binary:hinge', 'predictor': 'gpu_predictor', 'subsample': 0.6, 'tree_method': 'gpu_hist'}\nMejor Score: 0.8249158249158249\n\n\nprueba 2:\nMejores parametros: {'booster': 'gbtree', 'colsample_bytree': 0.4, 'gamma': 2, 'gpu_id': 0, 'learning_rate': 0.5, 'max_depth': 3, 'min_child_weight': 5, 'n_estimators': 500, 'objective': 'binary:hinge', 'predictor': 'gpu_predictor', 'single_precision_histogram': True, 'subsample': 0.6, 'tree_method': 'gpu_hist'}\nMejor Score: 0.8361747536250078\n\nprueba 3: --->(MEJOR MODELO)<---\nMejores parametros: {'booster': 'gbtree', 'colsample_bytree': 0.4, 'gamma': 2, 'gpu_id': 0, 'learning_rate': 0.8, 'max_depth': 3, 'min_child_weight': 5, 'n_estimators': 500, 'objective': 'binary:hinge', 'predictor': 'gpu_predictor', 'sampling_method': 'gradient_based', 'single_precision_histogram': True, 'subsample': 0.7, 'tree_method': 'gpu_hist', 'updater': 'grow_gpu_hist'}\nMejor Score: 0.8361370912058252\n\nprueba 4:\nMejores parametros: {'booster': 'gbtree', 'colsample_bytree': 0.4, 'gamma': 2, 'gpu_id': 0, 'learning_rate': 0.8, 'max_depth': 3, 'min_child_weight': 5, 'n_estimators': 500, 'objective': 'binary:hinge', 'predictor': 'gpu_predictor', 'sampling_method': 'gradient_based', 'single_precision_histogram': True, 'subsample': 0.7, 'tree_method': 'gpu_hist', 'updater': 'grow_gpu_hist'}\nMejor Score: 0.8361370912058252\n\npureba 5:\nMejores parametros: {'booster': 'gbtree', 'colsample_bytree': 0.4, 'gamma': 2, 'gpu_id': 0, 'learning_rate': 0.8, 'max_depth': 3, 'min_child_weight': 5, 'n_estimators': 500, 'objective': 'binary:hinge', 'predictor': 'gpu_predictor', 'sampling_method': 'gradient_based', 'scale_pos_weight': 5, 'single_precision_histogram': True, 'subsample': 0.7, 'tree_method': 'gpu_hist', 'updater': 'grow_gpu_hist'}\nMejor Score: 0.8361370912058252\"\"\"","19528c04":"model_xgb.score(X,y)\n","bc5552f1":"xgb_gpu1=model_xgb.predict(testeo)","763e1a14":"### Visualizacion de Datos","d498b71b":"### Aplicamos tratamiento en test","dd9729da":"### Optimizacion de Hiperparametros","6c497e45":"## Resultados","6b379fda":"##### Gracias Rahul Kumar @rahul8862","4f1c8eb9":"#### XGB_GPU3=0.8361370912058252\n\n\n\n### SUBMISSION:0.78947","73bb3287":"### De categorico a numerico","09ed75fc":"### Modelos","d0b3c640":"### Eliminacion de Columnas sin importancia","10c566e3":"##### Gracias Krishna Kumar Tiwari @borntomine","7dcbfe92":"### Nuevo Modelo : XGBoost"}}