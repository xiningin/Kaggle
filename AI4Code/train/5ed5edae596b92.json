{"cell_type":{"acdbd574":"code","e3ebac8a":"code","92982387":"code","d74e5ddc":"code","8d978b5a":"code","56409756":"code","42ba8d5d":"code","22f79fb1":"code","327393f2":"code","7f1371a7":"code","b0ddcd0c":"code","91efe8d2":"code","03a74734":"code","5a4a94c1":"code","1bf7f895":"code","ac0dc499":"code","64582c48":"code","15a8c33c":"code","9de171f6":"code","7bcbd82e":"code","a8fd15b7":"code","dcd761d2":"code","70181c67":"code","0fa13062":"code","ab730d3a":"code","cb42e586":"code","6a4fea51":"code","4976ac4d":"code","89c0d1e3":"code","5a7d4d9e":"code","48845046":"code","e8ceb97d":"code","65a39dec":"markdown","e8494b9d":"markdown","f79c5249":"markdown","4cb30372":"markdown","db13f3d7":"markdown","534b3919":"markdown","ab2cf53d":"markdown","affbc9ee":"markdown","be2bace6":"markdown","d9516032":"markdown","8769044f":"markdown","83345358":"markdown","1bb64e73":"markdown","7f9e4254":"markdown","4b3271c9":"markdown","c7b3df4b":"markdown","9c484d19":"markdown","706d0dd9":"markdown","e8216de9":"markdown","ca26460d":"markdown","a4f1fec2":"markdown","a5217e7a":"markdown","0fc838f0":"markdown","b17bfb04":"markdown","bcfe201f":"markdown","a0c3e423":"markdown","dbcaff86":"markdown","aa1cf6ba":"markdown"},"source":{"acdbd574":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split as tts\nfrom sklearn import metrics as mt\nfrom sklearn.preprocessing import LabelEncoder\n\nplt.style.use('seaborn-muted')\npd.options.display.max_columns = None","e3ebac8a":"df = pd.read_excel(\"..\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx\")","92982387":"df","d74e5ddc":"df.groupby('PATIENT_VISIT_IDENTIFIER',as_index=False).agg({'WINDOW':list, 'ICU':list}).head()","8d978b5a":"# number of total patient \nn = df['PATIENT_VISIT_IDENTIFIER'].nunique()\n\n# Grouped by each unique patient\ndfg = df.groupby(['PATIENT_VISIT_IDENTIFIER'], as_index=False)\n\n# Only Final Window's data\nindices = np.arange(4,df.shape[0],5)\nsdf = df.iloc[indices,:]","56409756":"fig, ax = plt.subplots(1,1, figsize=(15,10),facecolor='white')\ntmp = (df.groupby('PATIENT_VISIT_IDENTIFIER',as_index=False)['ICU'].sum()['ICU'] > 0).sum()\nplt.bar([0,5],[tmp, n-tmp],tick_label=['ICU', 'Non-ICU'])\nplt.grid(b=True, axis='y')\nplt.show()\nprint(f'Probability of patient in ICU is at {tmp \/ n}%')","42ba8d5d":"tmpdf = dfg.agg({'AGE_ABOVE65': lambda x: x[0], 'ICU': lambda x: x[4]})\nnot_icu_less, in_icu_less, in_icu_over, not_icu_over = tmpdf.groupby('AGE_ABOVE65')['ICU'].value_counts().values\n\nfix, ax = plt.subplots(1,1,figsize=(15,10),facecolor='white')\nx = [0,0.5,4,4.5]\nheight = [not_icu_less, in_icu_less, in_icu_over, not_icu_over]\nax.bar(x, height,color=['green','red','red', 'green'])\nax.set_xticks(x)\nax.set_xticklabels(['Not ICU and AGE<65','In ICU and AGE<65','ICU and AGE>65','Not ICU and AGE>65'],rotation=20)\nax.tick_params()\nplt.show()","22f79fb1":"percentiles = sorted(df['AGE_PERCENTIL'].unique().tolist())\npercentiles","327393f2":"tmpgrp = sdf.groupby(by=['AGE_PERCENTIL'],squeeze=True)['ICU'].value_counts()\n\nicu = []\nnot_icu = []\nfor p in percentiles:\n    icu.append(tmpgrp.loc[(p,1)])\n    not_icu.append(tmpgrp.loc[(p,0)])\nfig, ax = plt.subplots(1,1,figsize=(15,10))\nx_icu = np.arange(0,len(percentiles)*3, 3)\nax.bar(x_icu, icu,label='ICU',alpha=0.5,color='red', width=0.5)\nax.bar(x_icu+1, not_icu,label='NOT ICU', alpha=0.5,align='center',color='green',width=0.5)\nax.legend()\nax.set_xticks(x_icu+.5)\nax.set_xticklabels(percentiles)\nax.grid(b=True,axis='y',color='gray',alpha=0.3)\nplt.show()","7f1371a7":"a,b = sdf.groupby('GENDER')['ICU'].sum()\nfig, ax = plt.subplots(1,1,facecolor='white',figsize=(15,10))\nax.bar([0,2],[a,b],label=['0','1'])\nax.set_xticks([0,2])\nplt.show()","b0ddcd0c":"disease_cols = ['DISEASE GROUPING 1','DISEASE GROUPING 2','DISEASE GROUPING 3',\n                'DISEASE GROUPING 4','DISEASE GROUPING 5','DISEASE GROUPING 6',\n               'HTN','IMMUNOCOMPROMISED']\nin_icu = []\nnotin_icu = []\n\nfor i in disease_cols:\n    in_icu.append(sdf.groupby('ICU')[i].sum()[1])\n    notin_icu.append(sdf.groupby('ICU')[i].sum()[0])\n\nfig, ax = plt.subplots(1,1,figsize=(15,10))\nax.bar(np.arange(0,len(disease_cols)*4,4), in_icu,label='in ICU', color='red',alpha=0.5)\nax.bar(1+np.arange(0,len(disease_cols)*4,4), notin_icu, label='Not in ICU',color='green',alpha=0.5)\nax.legend()\nax.set_xticks(np.arange(0,len(disease_cols)*4,4))\nax.set_xticklabels(disease_cols, rotation=20)\nax.grid(b=True, axis='y', alpha=0.4)\nplt.show()","91efe8d2":"in_icu = sdf.groupby('ICU')['OTHER'].sum()[1]\nnotin_icu = sdf.groupby('ICU')['OTHER'].sum()[0]\n\nfig, ax = plt.subplots(1,1,figsize=(15,10))\nax.bar([1,2], [in_icu,notin_icu], color='red',alpha=0.5,width=0.2)\nax.set_xticks([1,2])\nax.set_xticklabels(['In ICU', 'Not in ICU'])\nax.grid(b=True, axis='y', alpha=0.4)\nplt.show()","03a74734":"indices = np.arange(0,df.shape[0],5)\nwindow1 = df.iloc[indices,:]\nwindow1.head()","5a4a94c1":"fig,ax = plt.subplots(1,1,figsize=(15,10))\n\nax.hist([window1['ALBUMIN_MEDIAN'],window1['ALBUMIN_MEAN'],window1['ALBUMIN_MAX']],density=True,\n        label=['ALBUMIN_MEDIAN','ALBUMIN_MEAN','ALBUMIN_MAX'])\nax.legend()\nplt.show()","1bf7f895":"test_cols = ['ALBUMIN_MEDIAN', 'ALBUMIN_MEAN', 'ALBUMIN_MIN', 'ALBUMIN_MAX',\n       'ALBUMIN_DIFF', 'BE_ARTERIAL_MEDIAN', 'BE_ARTERIAL_MEAN',\n       'BE_ARTERIAL_MIN', 'BE_ARTERIAL_MAX', 'BE_ARTERIAL_DIFF',\n       'BE_VENOUS_MEDIAN', 'BE_VENOUS_MEAN', 'BE_VENOUS_MIN',\n       'BE_VENOUS_MAX', 'BE_VENOUS_DIFF', 'BIC_ARTERIAL_MEDIAN',\n       'BIC_ARTERIAL_MEAN', 'BIC_ARTERIAL_MIN', 'BIC_ARTERIAL_MAX',\n       'BIC_ARTERIAL_DIFF', 'BIC_VENOUS_MEDIAN', 'BIC_VENOUS_MEAN',\n       'BIC_VENOUS_MIN', 'BIC_VENOUS_MAX', 'BIC_VENOUS_DIFF',\n       'BILLIRUBIN_MEDIAN', 'BILLIRUBIN_MEAN', 'BILLIRUBIN_MIN',\n       'BILLIRUBIN_MAX', 'BILLIRUBIN_DIFF', 'BLAST_MEDIAN', 'BLAST_MEAN',\n       'BLAST_MIN', 'BLAST_MAX', 'BLAST_DIFF', 'CALCIUM_MEDIAN',\n       'CALCIUM_MEAN', 'CALCIUM_MIN', 'CALCIUM_MAX', 'CALCIUM_DIFF',\n       'CREATININ_MEDIAN', 'CREATININ_MEAN', 'CREATININ_MIN',\n       'CREATININ_MAX', 'CREATININ_DIFF', 'FFA_MEDIAN', 'FFA_MEAN',\n       'FFA_MIN', 'FFA_MAX', 'FFA_DIFF', 'GGT_MEDIAN', 'GGT_MEAN',\n       'GGT_MIN', 'GGT_MAX', 'GGT_DIFF', 'GLUCOSE_MEDIAN', 'GLUCOSE_MEAN',\n       'GLUCOSE_MIN', 'GLUCOSE_MAX', 'GLUCOSE_DIFF', 'HEMATOCRITE_MEDIAN',\n       'HEMATOCRITE_MEAN', 'HEMATOCRITE_MIN', 'HEMATOCRITE_MAX',\n       'HEMATOCRITE_DIFF', 'HEMOGLOBIN_MEDIAN', 'HEMOGLOBIN_MEAN',\n       'HEMOGLOBIN_MIN', 'HEMOGLOBIN_MAX', 'HEMOGLOBIN_DIFF',\n       'INR_MEDIAN', 'INR_MEAN', 'INR_MIN', 'INR_MAX', 'INR_DIFF',\n       'LACTATE_MEDIAN', 'LACTATE_MEAN', 'LACTATE_MIN', 'LACTATE_MAX',\n       'LACTATE_DIFF', 'LEUKOCYTES_MEDIAN', 'LEUKOCYTES_MEAN',\n       'LEUKOCYTES_MIN', 'LEUKOCYTES_MAX', 'LEUKOCYTES_DIFF',\n       'LINFOCITOS_MEDIAN', 'LINFOCITOS_MEAN', 'LINFOCITOS_MIN',\n       'LINFOCITOS_MAX', 'LINFOCITOS_DIFF', 'NEUTROPHILES_MEDIAN',\n       'NEUTROPHILES_MEAN', 'NEUTROPHILES_MIN', 'NEUTROPHILES_MAX',\n       'NEUTROPHILES_DIFF', 'P02_ARTERIAL_MEDIAN', 'P02_ARTERIAL_MEAN',\n       'P02_ARTERIAL_MIN', 'P02_ARTERIAL_MAX', 'P02_ARTERIAL_DIFF',\n       'P02_VENOUS_MEDIAN', 'P02_VENOUS_MEAN', 'P02_VENOUS_MIN',\n       'P02_VENOUS_MAX', 'P02_VENOUS_DIFF', 'PC02_ARTERIAL_MEDIAN',\n       'PC02_ARTERIAL_MEAN', 'PC02_ARTERIAL_MIN', 'PC02_ARTERIAL_MAX',\n       'PC02_ARTERIAL_DIFF', 'PC02_VENOUS_MEDIAN', 'PC02_VENOUS_MEAN',\n       'PC02_VENOUS_MIN', 'PC02_VENOUS_MAX', 'PC02_VENOUS_DIFF',\n       'PCR_MEDIAN', 'PCR_MEAN', 'PCR_MIN', 'PCR_MAX', 'PCR_DIFF',\n       'PH_ARTERIAL_MEDIAN', 'PH_ARTERIAL_MEAN', 'PH_ARTERIAL_MIN',\n       'PH_ARTERIAL_MAX', 'PH_ARTERIAL_DIFF', 'PH_VENOUS_MEDIAN',\n       'PH_VENOUS_MEAN', 'PH_VENOUS_MIN', 'PH_VENOUS_MAX',\n       'PH_VENOUS_DIFF', 'PLATELETS_MEDIAN', 'PLATELETS_MEAN',\n       'PLATELETS_MIN', 'PLATELETS_MAX', 'PLATELETS_DIFF',\n       'POTASSIUM_MEDIAN', 'POTASSIUM_MEAN', 'POTASSIUM_MIN',\n       'POTASSIUM_MAX', 'POTASSIUM_DIFF', 'SAT02_ARTERIAL_MEDIAN',\n       'SAT02_ARTERIAL_MEAN', 'SAT02_ARTERIAL_MIN', 'SAT02_ARTERIAL_MAX',\n       'SAT02_ARTERIAL_DIFF', 'SAT02_VENOUS_MEDIAN', 'SAT02_VENOUS_MEAN',\n       'SAT02_VENOUS_MIN', 'SAT02_VENOUS_MAX', 'SAT02_VENOUS_DIFF',\n       'SODIUM_MEDIAN', 'SODIUM_MEAN', 'SODIUM_MIN', 'SODIUM_MAX',\n       'SODIUM_DIFF', 'TGO_MEDIAN', 'TGO_MEAN', 'TGO_MIN', 'TGO_MAX',\n       'TGO_DIFF', 'TGP_MEDIAN', 'TGP_MEAN', 'TGP_MIN', 'TGP_MAX',\n       'TGP_DIFF', 'TTPA_MEDIAN', 'TTPA_MEAN', 'TTPA_MIN', 'TTPA_MAX',\n       'TTPA_DIFF', 'UREA_MEDIAN', 'UREA_MEAN', 'UREA_MIN', 'UREA_MAX',\n       'UREA_DIFF', 'DIMER_MEDIAN', 'DIMER_MEAN', 'DIMER_MIN',\n       'DIMER_MAX', 'DIMER_DIFF', 'BLOODPRESSURE_DIASTOLIC_MEAN',\n       'BLOODPRESSURE_SISTOLIC_MEAN', 'HEART_RATE_MEAN',\n       'RESPIRATORY_RATE_MEAN', 'TEMPERATURE_MEAN',\n       'OXYGEN_SATURATION_MEAN', 'BLOODPRESSURE_DIASTOLIC_MEDIAN',\n       'BLOODPRESSURE_SISTOLIC_MEDIAN', 'HEART_RATE_MEDIAN',\n       'RESPIRATORY_RATE_MEDIAN', 'TEMPERATURE_MEDIAN',\n       'OXYGEN_SATURATION_MEDIAN', 'BLOODPRESSURE_DIASTOLIC_MIN',\n       'BLOODPRESSURE_SISTOLIC_MIN', 'HEART_RATE_MIN',\n       'RESPIRATORY_RATE_MIN', 'TEMPERATURE_MIN', 'OXYGEN_SATURATION_MIN',\n       'BLOODPRESSURE_DIASTOLIC_MAX', 'BLOODPRESSURE_SISTOLIC_MAX',\n       'HEART_RATE_MAX', 'RESPIRATORY_RATE_MAX', 'TEMPERATURE_MAX',\n       'OXYGEN_SATURATION_MAX', 'BLOODPRESSURE_DIASTOLIC_DIFF',\n       'BLOODPRESSURE_SISTOLIC_DIFF', 'HEART_RATE_DIFF',\n       'RESPIRATORY_RATE_DIFF', 'TEMPERATURE_DIFF',\n       'OXYGEN_SATURATION_DIFF', 'BLOODPRESSURE_DIASTOLIC_DIFF_REL',\n       'BLOODPRESSURE_SISTOLIC_DIFF_REL', 'HEART_RATE_DIFF_REL',\n       'RESPIRATORY_RATE_DIFF_REL', 'TEMPERATURE_DIFF_REL',\n       'OXYGEN_SATURATION_DIFF_REL']","ac0dc499":"indices = []\nfor i in range(df.shape[0]):\n    if df.loc[i,'WINDOW'] != '6-12' and df.loc[i,'WINDOW'] != 'ABOVE_12':\n        indices.append(i)","64582c48":"# del stat\nstat = {}","15a8c33c":"def build(series,col):\n    step = 3\n    records = series.values[indices]\n    if 'MEDIAN' in k:\n        stat[col+\"_STATUS\"] = []\n    else:\n        stat[col] = []\n        \n    for i in range(0,len(indices),step):\n        tmp_records = records[i:i+step]\n#         print(f\"i begins {i} \\n\", tmp_records)\n        first = None\n        last = None\n        \n        for j in range(0,step):\n            if pd.notnull(tmp_records[j]):\n                first=tmp_records[j]\n                break\n                \n        for j in range(step-1,-1,-1):\n            if pd.notnull(tmp_records[j]):\n                last=tmp_records[j]\n                break\n        if pd.isnull(first) and pd.isnull(last):\n            flag=0\n        elif first > last:\n            flag = -1 # decrease\n        elif first == last:\n            flag = 0 # same\n        else:\n            flag = 1 # increase\n        if 'MEDIAN' in k:\n            stat[col+\"_STATUS\"].append(flag)\n        else:\n            stat[col] = last\n#         print(first, last)","9de171f6":"for k in test_cols:\n    build(df[k],k)","7bcbd82e":"sdf.head()","a8fd15b7":"exp1 = sdf.copy(deep=True)","dcd761d2":"exp1.isnull().sum()","70181c67":"exp1.fillna(exp1.mean(), inplace=True)","0fa13062":"idx = exp1.dtypes=='object'\ncols = exp1.dtypes[idx]\nprint(len(cols),cols)","ab730d3a":"le = LabelEncoder()\nexp1['AGE_PERCENTIL'] = le.fit_transform(exp1['AGE_PERCENTIL'])\nexp1['AGE_PERCENTIL']","cb42e586":"input_cols = [c for c in sdf.columns if c!='ICU' and c!='WINDOW']\noutput_cols = 'ICU'","6a4fea51":"X_train, X_test, y_train, y_test = tts(exp1.loc[:,input_cols],exp1.loc[:,output_cols])\nprint(X_train.shape, y_train.shape,'\\n', X_test.shape, y_test.shape)","4976ac4d":"def confusion(ytrue,yhat):\n    tp = 0 \n    fp = 0 \n    tn = 0 \n    fn = 0 \n    \n    for i in range(len(ytrue)):\n        if ytrue[i] == yhat[i] and yhat[i]==0: # tn\n            tn+=1\n        elif ytrue[i] == yhat[i] and yhat[i]==1: # tp\n            tp+=1\n        elif ytrue[i] != yhat[i] and yhat[i]==0: # fn\n            fn+=1\n        elif ytrue[i] != yhat[i] and yhat[i]==1: # fp\n            fp+=1\n        \n    return [tn,fp,fn,tp]\n\ndef confusion_matrix(ytrue,yhat):\n    \"\"\"\n    Ensure: |TN FP|\n            |     | \n            |FN TP|\n    \"\"\"\n    tn,fp,fn,tp = confusion(ytrue,yhat)\n        \n    return np.array([[tn,fp],[fn,tp]])","89c0d1e3":"lr = LogisticRegression(max_iter=1000)\nlr.fit(X_train, y_train)\ny_hat = lr.predict(X_test)","5a7d4d9e":"confusion_matrix(y_test.values,y_hat)","48845046":"mt.roc_auc_score(y_test, y_hat)","e8ceb97d":"lda = LinearDiscriminantAnalysis(solver='lsqr')\nlda.fit(X_train, y_train)\nyhat = lda.predict(X_test)\nmt.roc_auc_score(y_test, yhat)","65a39dec":"It is visible that **age** is a huge factor on ICU, more than 50% who went to ICU were above 65. Let's dive deeper with age percentile.","e8494b9d":"first look at the data","f79c5249":"attributes from *ALBUMIN_MEDIUM* to *OXYGEN_SATURATION_DIFF_REL* are not guaranteed to be available at all time windows. They are mostly available in 0-2 hrs and ABOVE_12 hrs. And it is almost guranteed that test reports are available between 0-4 hrs. ","4cb30372":"# LDA","db13f3d7":"# Logistic Regression","534b3919":"load the excel file into a dataframe","ab2cf53d":"# Data Prepare","affbc9ee":"looking at disease groups","be2bace6":"## Missing Values","d9516032":"Each patient is splitted into 5 rows for *WINDOW* (aka, time period) attribute.  *ICU* attribute updates if needed in these time periods.","8769044f":"*OTHER* isn't such a strong predictor","83345358":"I don't know how they coded *gender* data, but this is an important discriminator. So let's leave it at that.","1bb64e73":"# EDA After 12 hours\nas we can't use time, let's use data available in last window for each patient as latest data and EDA on them. If they go to ICU before 12hrs, then their status stays the same for at least another day, so we getting the actual *ICU* value","7f9e4254":"As dataset creators have said, we cannot use the information about windows in predicting *ICU*, because in that time period, the other attributes may or may not be available to the doctors. Some of the test result came after taking patient to ICU. Meaning, even though we might get better accuracy by using data from all time periods, it is not helpful to the doctors. So, we'll need to use earlier *WINDOW*'s data and predict final *WINDOW*'s *ICU* feature.","4b3271c9":"the risk of being taken to ICU increases from age percentile 50 and reaches maximum 4 times against the non-icu patients on 90th percentile.","c7b3df4b":"Ergo, the target attribute *ICU* is properly balanced.","9c484d19":"data source: [kaggle](https:\/\/www.kaggle.com\/S%C3%ADrio-Libanes\/covid19)","706d0dd9":"For example, patient 0 was taken to the ICU after 12hrs since the admission. Patient 1 was immedietly (0-2 hrs) taken to the ICU after admission. Patient 3 and 4 did not need ICU at all.","e8216de9":"Let's see how much of our patients are over the age of 65 and how many of them went to ICU.","ca26460d":"# Short Data Introduction\nThis dataset has 385 covid19 patient records. Each patient has 5 rows for 5 different time period. These time periods begin at admission to the hospital. Then continues as 0-2 hours, 2-4 hours, 4-6 hours, 6-12 hours and above 12 hours. \n\n3 features are for patient demographic information. 9 features are for patient's previous group dieseases. 36 features for blood tests. 6 features for other vital signs. \n\nSome features are expanded to other columns for mean, median, max, min, diff and relative diff when pertinent. \n\nOne target feature denotes whether the patient is taken to ICU or not. \n\n# Goal\nPredict if a patient needs to be taken to ICU or not.","a4f1fec2":"I am curious to know the share of each percentiles in ICU","a5217e7a":"So, both logistic regression and LDA performs better at predicting whether a patient will need ICU based on 0-6hrs history.","0fc838f0":"## Handling Categorical Data","b17bfb04":"It is obvious that while all disease groups have little or no impact on *ICU*, *GROUP* 3, 4, 5, and *HTN* patients has more risk of ending up in *ICU*. ","bcfe201f":"Looking at all other attributes like this won't give observable insight. I just want to know whether *MEDIAN* of those attributes has increased or decreased over 0-6 hr window. Use that as a feature, then try to predict *ICU* when *WINDOW: ABOVE_12*. I am focusing more on *ABOVE_12* data because that is the latest, and ignoring other windows for ICU value will let me allow to use those windows' data.","a0c3e423":"The `build` function edited `sdf` dataframe as below:\n* Feature except *ICU* was replaced with the latest value from 0-6 hrs window.\n* All features with 'MEDIAN' in it now has corresponding *\\*_MEDIAN_STATUS* features. Their value [-1,0,1] denotes, -1: Decrease, 0: Same, 1: increase in 0-6hrs window.\n* *ICU* was unchanged. It is the value from 'ABOVE_12' hour window","dbcaff86":"**imports**","aa1cf6ba":"**OTHER**"}}