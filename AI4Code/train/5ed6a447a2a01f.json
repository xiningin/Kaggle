{"cell_type":{"7a723c80":"code","6ead1cc2":"code","6042c8e0":"code","9e02ea61":"code","0fdc8cb9":"code","18e0624b":"code","47899774":"code","c806b0f7":"code","24f85517":"code","f382509d":"code","b59186e4":"code","d3934cd3":"code","008c23e4":"code","7d52cae5":"code","0a05bf2c":"code","f38edddd":"code","db8ac37b":"code","39d90db7":"code","0eddfbbc":"code","99c7b66e":"code","38410028":"code","865da432":"code","b8ddac07":"code","3b6f6e14":"code","b811edd8":"code","8ab9bee7":"code","5c96a806":"code","887de886":"code","d9f13f9f":"code","8e65ffc9":"code","e4ccc3d1":"code","791b46e3":"code","790b513c":"code","b5dead66":"code","3eb04a74":"code","0c14d27a":"code","c3a74ace":"code","1a99e814":"code","e03026a0":"code","de37983c":"code","53233f52":"code","02d27cfe":"code","ca45b81e":"code","787dbbc5":"code","ac51e4df":"code","5f4df811":"code","b4bd59e1":"code","ec448260":"markdown","101554f4":"markdown","38b684e9":"markdown","fab2f4eb":"markdown","56132f2a":"markdown","9d83954b":"markdown","17381e3c":"markdown","639f7ea1":"markdown","b2242e20":"markdown","24dc5a2f":"markdown","d065e053":"markdown","90350a80":"markdown","7aefeb23":"markdown","57e02a71":"markdown"},"source":{"7a723c80":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport skimage\nfrom skimage import transform\nfrom skimage import util\nimport cv2\nimport tensorflow as tf\nfrom math import pi\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings\nimport os\nprint(os.listdir(\"..\/input\"))\nwarnings.filterwarnings(\"ignore\")\n\n# Any results you write to the current directory are saved as output.","6ead1cc2":"df_train = pd.read_csv('..\/input\/train.csv')","6042c8e0":"df_train.head()","9e02ea61":"X_train = df_train.iloc[:, 1:]\nY_train = df_train.iloc[:, 0]","0fdc8cb9":"X_train.head()","18e0624b":"Y_train.head()","47899774":"X_train = np.array(X_train)\nY_train = np.array(Y_train)","c806b0f7":"def plot_digits(X, Y, shape):\n    for i in range(9):\n        plt.subplot(3, 3, i+1)\n        plt.tight_layout()\n        plt.imshow(X[i].reshape((28,28)), interpolation='none', cmap='gray')\n        plt.title('Digit:{}'.format(Y[i]))\n        plt.xticks([])\n        plt.yticks([])\n    plt.show()","24f85517":"plot_digits(X_train, Y_train, 28)","f382509d":"def rotate_image(X, degrees):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = skimage.transform.rotate(img, degrees)\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","b59186e4":"X_rot = rotate_image(X_train, -30)","d3934cd3":"plot_digits(X_rot[42000:], Y_train, 28)","008c23e4":"def flip_digits(X):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = np.fliplr(img)\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","7d52cae5":"X_flip = flip_digits(X_train)","0a05bf2c":"plot_digits(X_flip[42000:], Y_train, 28)","f38edddd":"def noise_image(X):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = skimage.util.random_noise(img, mode='pepper')\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","db8ac37b":"X_noise = noise_image(X_train)","39d90db7":"plot_digits(X_noise[42000:], Y_train, 28)","0eddfbbc":"def scale_up_image(X, scale):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = skimage.transform.rescale(img, scale, clip=True)\n        img = skimage.util.crop(img, ((0, 28), (0, 28)))\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","99c7b66e":"X_scale = scale_up_image(X_train, 2)","38410028":"plot_digits(X_scale[42000:], Y_train, 28)","865da432":"def translate_image(X, h, w):\n    X_flip = []\n    M = np.float32([[1, 0, h], [0, 1, w]])\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = img.astype(np.float32)\n        img = cv2.warpAffine(img, M, (28, 28))\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","b8ddac07":"X_translate = translate_image(X_train, 5, 5)","3b6f6e14":"plot_digits(X_translate[42000:], Y_train, 28)","b811edd8":"def flip_image_tf(X, mode):\n    X_img = tf.placeholder(dtype=tf.float32, shape=(28, 28, 1), name='X')\n    if mode == 1:\n        tf_flip = tf.image.flip_left_right(X_img)\n    elif mode == 2:\n        tf_flip = tf.image.flip_up_down(X_img)\n    elif mode == 3:\n        tf_flip = tf.image.transpose_image(X_img)\n\n    tf.global_variables_initializer()\n    sess = tf.Session()\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28, 1))\n        img_flip = sess.run([tf_flip], feed_dict={X_img:img})\n        X_flip.append(img_flip[0].reshape((784)))\n    return X_flip","8ab9bee7":"X_lr = flip_image_tf(X_train, 1)\nX_lr = np.array(X_lr)","5c96a806":"plot_digits(X_lr, Y_train, 28)","887de886":"X_ud = flip_image_tf(X_train, 2)\nX_ud = np.array(X_ud)","d9f13f9f":"plot_digits(X_ud, Y_train, 28)","8e65ffc9":"X_tr = flip_image_tf(X_train, 3)\nX_tr = np.array(X_tr)","e4ccc3d1":"plot_digits(X_tr, Y_train, 28)","791b46e3":"def rotate_image_tf(X, rot_angle):\n    X_img = tf.placeholder(dtype=tf.float32, shape=(28, 28, 1), name='X')\n    angle = tf.placeholder(dtype=tf.float32, shape=(1), name='angle')\n    tf_rot = tf.contrib.image.rotate(X_img, angle)\n    tf.global_variables_initializer()\n    sess = tf.Session()\n    X_rot = []\n    for i in range(9):\n        img = X[i].reshape((28, 28, 1))\n        rad = [rot_angle*pi\/180]\n        img_rot = sess.run([tf_rot], feed_dict={X_img:img, angle:rad})\n        img_rot = img_rot[0].reshape((784))\n        X_rot.append(img_rot)\n    return X_rot","790b513c":"X_rot = rotate_image_tf(X_train, 45)\nX_rot = np.array(X_rot)","b5dead66":"plot_digits(X_rot, Y_train, 28)","3eb04a74":"from keras.preprocessing.image import ImageDataGenerator","0c14d27a":"def image_aug_keras(X):\n    datagen = ImageDataGenerator(rotation_range=10, zoom_range=0.1, \\\n                                 width_shift_range=0.1, height_shift_range=0.1)\n    X_aug = []\n    for i in range(9):\n        X_train2, Y_train2 = datagen.flow(X_train[i,:].reshape((1, 28, 28, 1)), \\\n                                          Y_train[i].reshape((1, 1, 1, 1))).next()\n        X_aug.append(X_train2.reshape((28,28)))\n    return X_aug","c3a74ace":"X_aug = image_aug_keras(X_train)\nX_aug = np.array(X_aug)","1a99e814":"plot_digits(X_aug, Y_train, 28)","e03026a0":"from imgaug import augmenters as iaa","de37983c":"def flip_image_iaa(X):\n    X_flip = []\n    seq = iaa.Sequential([\n        iaa.Fliplr(1)\n    ])\n    for i in range(9):\n        img = X[i].reshape((1, 28, 28))\n        img_aug = seq.augment_images(img)\n        X_flip.append(img_aug[0].reshape((784)))\n    return X_flip","53233f52":"X_flip = flip_image_iaa(X_train)\nX_flip = np.array(X_flip)","02d27cfe":"plot_digits(X_flip, Y_train, 28)","ca45b81e":"def augment_image_iaa(X):\n    X_rotate = []\n    seq = iaa.Sequential([\n        iaa.Affine(\n            scale={\"x\": (0.8, 1.2), \"y\": (0.8, 1.2)},\n            translate_percent={\"x\": (-0.2, 0.2), \"y\": (-0.2, 0.2)},\n            rotate=(-25, 25),\n            shear=(-8, 8)\n        )\n    ])\n    for i in range(9):\n        img = X[i].reshape((1, 28, 28))\n        img_aug = seq.augment_images(img)\n        X_rotate.append(img_aug.reshape((784)))\n    return X_rotate","787dbbc5":"X_aug = augment_image_iaa(X_train)\nX_aug = np.array(X_aug)","ac51e4df":"plot_digits(X_aug, Y_train, 28)","5f4df811":"X_aug = augment_image_iaa(X_train)\nX_aug = np.array(X_aug)","b4bd59e1":"plot_digits(X_aug, Y_train, 28)","ec448260":"# Add noise","101554f4":"# Let's do the same in TensorFlow\n\n* Flip\n* Rotate\n* Scale\n* Crop\n* Translate","38b684e9":"# Flip Image - LR, Up-Down, Transpose","fab2f4eb":"# Translate image","56132f2a":"# Rotate Image","9d83954b":"# Rotate image","17381e3c":"   # Load data","639f7ea1":"# Let's explore Keras ImageDataGenerator","b2242e20":"# Flip Image","24dc5a2f":"# Plot Digits","d065e053":"# Augmentation with ImgAug","90350a80":"# Scale image","7aefeb23":"# Split train to X and Y","57e02a71":"This kernel has implementation of different data augmentation techniques in Python(skimage, OpenCV), TensorFlow, Keras, ImgAug for Digit Recognizer.\n\n* Rotate\n* Flip\n* Add Noise\n* Scale\n* Translate"}}