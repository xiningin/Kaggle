{"cell_type":{"c85bff7a":"code","55ce0c5f":"code","22b1b62c":"code","2308653e":"code","0ca690d8":"code","679a0ca6":"code","5ca8caad":"code","2da7f5e8":"code","d3447290":"code","94eb69f8":"code","ba861660":"code","781147f3":"code","92f78fa8":"code","e9138e68":"code","d87c5509":"code","de4171b9":"code","443d4e89":"code","d06b5635":"code","8c94180d":"code","3d826d86":"code","76d296fb":"code","dbc6d093":"code","3510612b":"code","129aa119":"code","1f6991b8":"code","cbe8889d":"code","526e91b8":"code","2ae30548":"code","0aec5f6e":"code","739a323a":"code","d1218052":"code","b93d8e1a":"code","113db694":"code","d0bbedb8":"markdown"},"source":{"c85bff7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","55ce0c5f":"data = pd.read_csv('..\/input\/world-bank-wdi-212-health-systems\/2.12_Health_systems.csv')\ndata.head()","22b1b62c":"data.info()","2308653e":"data.Health_exp_per_capita_USD_2016.describe()","0ca690d8":"data['health_development_level']=[\"high\" if i>1037 else \"low\" for i in data.Health_exp_per_capita_USD_2016]\nprint(data['health_development_level'].value_counts(dropna=False))","679a0ca6":"#Visual Exploratory Data Analysis\n\ndata.boxplot(column='Health_exp_per_capita_USD_2016',by='health_development_level',figsize=(9,15))","5ca8caad":"data['category']=[\"best\" if i>8000 else \"good\" if 4000<i<8000 else \"average\" if 2000<i<4000 else \"bad\" if 1000<i<2000 else \"worst\" for i in data.Health_exp_per_capita_USD_2016]\nprint(data['category'].value_counts(dropna=False))","2da7f5e8":"filtr = data.Health_exp_per_capita_USD_2016 > 8000\nf_data = data[filtr]\nprint(f_data)","d3447290":"#Tidy Data(melting)\ndata_new = (data[(data['Health_exp_per_capita_USD_2016']>4000)])\nmelted = pd.melt(frame = data_new, id_vars = 'Country_Region',value_vars = ['Health_exp_pct_GDP_2016','Health_exp_per_capita_USD_2016'])\nprint(melted)\n","94eb69f8":"#pivoting data(reverse of melted)\n\nprint(melted.pivot(index='Country_Region',columns='variable',values='value'))","ba861660":"#concatenating\ndata1 = (data[(data['Health_exp_per_capita_USD_2016']>6000)])\ndata2 = (data[(data['Health_exp_pct_GDP_2016']<3)])\n#vertical concatenate\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data_row","781147f3":"#horizontal concatenate\ndata1 = (data[(data['Health_exp_per_capita_USD_2016']>6000)])\ndata2 = (data[(data['Health_exp_pct_GDP_2016']<3)])\nconc_data_col = pd.concat([data1,data2],axis=1)\nconc_data_col","92f78fa8":"#Data Types\ndata.dtypes","e9138e68":"#Missing Data and Testing with Assert\n#find missing values\ndata.info()","d87c5509":"data['Province_State'].value_counts(dropna=False)","de4171b9":"#drop non-values\ndata11 =data\ndata11['Province_State'].dropna(inplace=True)\nassert data11['Province_State'].notnull().all()\n\n","443d4e89":"#Building Data Frames from Scratch\n # data frames from dictionary\n    \ncountry = data.World_Bank_Name\nHealth_exp = data.Health_exp_per_capita_USD_2016\nlist_label = [\"country\",\"Health_exp\"]\nlist_col =[country, Health_exp]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","d06b5635":"#add new column\ndf['region'] = data.Country_Region\n\n#Broadcasting\ndf['income'] = 0\ndf","8c94180d":"data.info()","3d826d86":"#Visual Exploratory Data Analysis\n\n   #PLOT\ndata1 = data.loc[:,['Health_exp_pct_GDP_2016','Health_exp_out_of_pocket_pct_2016','Health_exp_per_capita_USD_2016']]\ndata1.plot(figsize=(15,15))","76d296fb":"#SUBPLOTS\ndata1.plot(subplots=True, figsize=(15,15))\nplt.show()","dbc6d093":"f,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(),annot=True,linewidth=.5,fmt='.1f',ax=ax)\nplt.show()","3510612b":"data.plot(kind='scatter',x=\"Health_exp_per_capita_USD_2016\", y=\"per_capita_exp_PPP_2016\",figsize=(10,10))","129aa119":"#hist\ndata1.plot(kind='hist',y='Health_exp_per_capita_USD_2016',bins=50,range=(0,250),figsize=(10,10))","1f6991b8":"#histogram subplot with non cumulative and cumulative\nfig,axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind='hist',y='Health_exp_per_capita_USD_2016',bins=50,range=(0,250),ax=axes[0])\ndata1.plot(kind='hist',y='Health_exp_per_capita_USD_2016',bins=50,range=(0,250),ax=axes[1],cumulative=True)\nplt.savefig('graph.png')\nplt","cbe8889d":"#Statistical Exploratory Data Analysis\n\ndata.describe()","526e91b8":"#Indexing Pandas Time Series\ndata2=data.head()\ndate_list=['1996-01-10','1996-02-10','1996-03-10','1996-04-11','1996-05-12']\ndatetime_object=pd.to_datetime(date_list)\ndata2['date']=datetime_object\ndata2=data2.set_index('date')\ndata2","2ae30548":"#Select according to date index\nprint(data2.loc['1996-03-10'])","0aec5f6e":"print(data2.loc['1996-03-10':'1996-05-12'])","739a323a":"#calculate mean according to years\ndata2.resample('A').mean()","d1218052":"#calculate mean according to months\ndata2.resample('M').mean()","b93d8e1a":"#As you seen, some values are NaN, to interpolate as linear method\ndata2.resample('M').first().interpolate('linear')\n","113db694":"#and interpolate, do not change real mean\ndata2.resample('M').mean().interpolate('linear')","d0bbedb8":"#Pandas Foundation\n* Review of Pandas\n* Building Data Frames from Scratch\n* Visual Exploratory Data Analysis\n* Statistical Exploratory Data Analysis\n* Indexing Pandas Time Series\n* Resampling Pandas Time Series"}}