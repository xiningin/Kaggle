{"cell_type":{"6319dd44":"code","a57be508":"code","8344fa0c":"code","3219aadb":"code","9ecee2dc":"code","cdceffb9":"code","1687dbe3":"code","392b68bc":"code","d0c198b3":"code","455ef0b3":"code","e1e6b7b9":"code","5c521800":"code","6c36084f":"code","9c3ac610":"code","f317775d":"code","07b1491e":"code","068d327c":"code","7c28bc6c":"code","b5887a98":"markdown","a712915c":"markdown","6b714424":"markdown","a7e4f6c9":"markdown","4e5f0fad":"markdown","7f15c1a9":"markdown","dfcdf4f8":"markdown","2cbf42fb":"markdown","c25cb974":"markdown","a0fb5b91":"markdown","542ba661":"markdown","db714bf2":"markdown","e59d3c0a":"markdown","26c53df8":"markdown","7bc4a6b8":"markdown","34767c79":"markdown","2080e6b4":"markdown"},"source":{"6319dd44":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport emoji\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import accuracy_score","a57be508":"df= pd.read_csv('..\/input\/iris\/Iris.csv')\n\ndf.drop(columns='Id', inplace= True)\n\ndf = df.rename({'SepalLengthCm': 'sepal_length', \n                 'SepalWidthCm': 'sepal_width', \n                 'PetalLengthCm': 'petal_length', \n                 'PetalWidthCm': 'petal_width',\n                 'Species': 'species'}, axis=1)\n\ndf.head()","8344fa0c":"df.shape","3219aadb":"df.describe()","9ecee2dc":"df.species.value_counts() #super balanced dataset","cdceffb9":"fig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", color=\"species\", symbol=\"species\", size='sepal_length')\nfig.show()","1687dbe3":"fig = px.scatter(df, x=\"petal_length\", y=\"petal_width\", color=\"species\", symbol=\"species\", size='petal_length')\nfig.show()","392b68bc":"fig = px.scatter(df, x=\"sepal_length\", y=\"petal_length\", color=\"species\", symbol=\"species\", size='petal_length')\nfig.show()","d0c198b3":"from pandas.plotting import andrews_curves\nplt.style.use('ggplot')\nplt.figure(figsize=(13,7))\nplt.title('Andrews Curves')\nandrews_curves(df, \"species\")\nplt.show()","455ef0b3":"# split data into features (X) and labels (y)\n\nX = df.iloc[:,0:4]\ny = df.iloc[:,-1]","e1e6b7b9":"print(X.sample(5))\nprint(y.sample(5))","5c521800":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(13,7))\n\ninertia_list = []\nfor num_clusters in range(1, 10):\n    kmeans_model = KMeans(n_clusters=num_clusters, init=\"k-means++\")\n    kmeans_model.fit(X)\n    inertia_list.append(kmeans_model.inertia_)\n    \n# plot the inertia curve\n\nplt.plot(range(1,10),inertia_list)\nplt.scatter(range(1,10),inertia_list)\nplt.scatter(3, inertia_list[3], marker=\"X\", s=300, c=\"r\")\nplt.xlabel(\"Number of Clusters\", size=13)\nplt.ylabel(\"Inertia Value\", size=13)\nplt.title(\"Different Inertia Values for Different Number of Clusters\", size=17)\n","6c36084f":"scaler = StandardScaler()\n\nX_scaled_array = scaler.fit_transform(X)\n\nX_scaled = pd.DataFrame(X_scaled_array, columns = X.columns)\n\nX_scaled.head()","9c3ac610":"km_model = KMeans(n_clusters=3, random_state= 2)\n\nkm_model.fit(X_scaled)\n\npred_species= km_model.predict(X_scaled)\n\n#map iris species\n\ntarget_mapping = {\n    'Iris-setosa': 0,\n    'Iris-versicolor': 1,\n    'Iris-virginica': 2,\n    }\n\ndf['id_species']= df[\"species\"].map(lambda x: target_mapping[x])\n\n# since it is an unsupervised model (output-labels are not in the correct order) we need to convert all the 1s to 0s and 0s to 1s, 2's look fine.\n\ndf['pred_species'] =  np.choose(pred_species, [1, 0, 2]).astype(np.int64)\n\ndf.head()","f317775d":"df.id_species.values","07b1491e":"df.pred_species.values","068d327c":"print (\"Accuracy :\", accuracy_score(df.id_species, df.pred_species))","7c28bc6c":"# Visualization\n\nplt.figure(figsize=(16,6))\nplt.style.use('seaborn-deep')\n\nplt.subplot(1,2,1)\nplt.scatter(df.petal_length, df.petal_width, c=df.id_species)\nplt.title('True Species'); plt.xlabel('petal_length'); plt.ylabel('petal_width')\n\nplt.subplot(1,2,2)\nplt.scatter(df.petal_length, df.petal_width, c=df.pred_species)\nplt.title('K-means Predicted Species'); plt.xlabel('petal_length'); plt.ylabel('petal_width');","b5887a98":"## Model's Accuracy","a712915c":"This notebook explores the Iris dataset (containing 3 famous Iris species) using data visualization and K-means unsupervised ML clustering model! \n\nWe will try to predict all the dataset's classes without giving any labels to the model! \ud83e\udd16","6b714424":"## Let's plot the True Species VS K-MEANS Predicted Species","a7e4f6c9":"<div>\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ea\/K-means_convergence.gif\"  width=\"400\"\/>\n<\/div>","4e5f0fad":"# K-means model: \ud83d\udd2e","7f15c1a9":"## Visualize Data (Petal\/Sepal Lenght-Width)","dfcdf4f8":"### So when we observe the above image, we can clearly see that when x - axis is on 3, graph clearly has an elbow.","2cbf42fb":"## Get Iris-Dataset","c25cb974":"![image info](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/10\/Iris_Flowers_Clustering_kMeans.svg\/675px-Iris_Flowers_Clustering_kMeans.svg.png)","a0fb5b91":"## How Does k-Means Clustering in Machine Learning Work? \ud83d\udc47\n\n**\"K-means clustering uses \u201ccentroids\u201d, K different randomly-initiated points in the data, and assigns every data point to the nearest centroid. After every point has been assigned, the centroid is moved to the average of all of the points assigned to it.*\"","542ba661":"##  Let's try to find the optimal k clusters for our dataset\n#### (Suppose we don't know the true labels)","db714bf2":"## Finding Best K: Elbow Method\n\n* *In cluster analysis, the elbow method is a heuristic used in determining the number of clusters in a data set. The method consists of plotting the explained variation as a function of the number of clusters, and picking the elbow of the curve as the number of clusters to use.*","e59d3c0a":"## Iris Dataset \ud83c\udf38\ud83c\udf38\ud83c\udf38","26c53df8":"# IRIS DATASET - KMEANS CLUSTERING","7bc4a6b8":"![image info](https:\/\/editor.analyticsvidhya.com\/uploads\/62725cluster0.PNG)","34767c79":"#### Import Libraries","2080e6b4":"## Standardize data"}}