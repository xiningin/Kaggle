{"cell_type":{"489f5265":"code","14f387d8":"code","b283a3e9":"code","2f41f224":"code","5c081b9b":"code","299d495a":"code","491b0f70":"code","864ae179":"code","a1f51c8c":"code","ea7bb557":"code","421f6a80":"code","5fd642b1":"code","85c96b1d":"code","da309298":"code","e9e8e842":"code","96425a6a":"markdown","2073be44":"markdown","aca49cf1":"markdown","559e3a4a":"markdown","d2e61888":"markdown","abc1402e":"markdown","66ad0651":"markdown","f20cd1d2":"markdown","989b59ab":"markdown","4127c555":"markdown","0d799814":"markdown"},"source":{"489f5265":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom skimage.measure import label, regionprops","14f387d8":"class SatelliteImage(object):       \n    def load_file(filePath):\n        matrix = cv2.imread(filePath)\n        matrix = cv2.cvtColor(matrix, cv2.COLOR_BGR2RGB)\n        \n        instance = SatelliteImage()\n        instance.image = matrix\n        instance.height = matrix.shape[0]\n        instance.width = matrix.shape[1]\n        instance.shape = (instance.height, instance.width)\n        \n        return instance\n    \n    def __init__(self):\n        self.title = \"\"\n        self.image = None\n        self.width = 0\n        self.height = 0\n        self.shape = (0, 0)\n        self.objects_mask_image = None\n    \n    def set_title(self, title):\n        self.title = title\n    \n    def add_objects(self, rle_masks):   \n        masks = np.zeros(self.shape, dtype = np.uint8)\n        \n        for rle_mask in rle_masks:\n            if isinstance(rle_mask, str):\n                masks += RDE.decode(rle_mask, self.shape)\n        \n        self.objects_mask_image = np.expand_dims(masks, -1)\n    \n    def show(self, with_object_rectangles = False):\n        plt.axis(\"off\")\n        plt.title(self.title)\n        \n        if with_object_rectangles:\n            copy = self.image.copy()\n            for prop in regionprops(label(self.objects_mask_image)): \n                cv2.rectangle(\n                    img = copy, \n                    pt1 = (prop.bbox[1], prop.bbox[0]), \n                    pt2 = (prop.bbox[3], prop.bbox[2]), \n                    color = (250, 0, 0), \n                    thickness = 2\n                )\n            plt.imshow(copy)\n            \n        else:\n            plt.imshow(self.image)","b283a3e9":"# ref: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\nclass RDE(object):\n    def encode(image):\n        pixels = image.T.flatten()\n        pixels = np.concatenate([[0], pixels, [0]])\n        runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n        runs[1::2] -= runs[::2]\n        \n        return ' '.join(str(x) for x in runs)\n    \n    def decode(encoding, shape):\n        strings = encoding.split()\n        starts, lengths = [np.asarray(x, dtype = int) for x in (strings[0:][::2], strings[1:][::2])]\n        starts -= 1\n        ends = starts + lengths\n        image = np.zeros(shape[0] * shape[1], dtype = np.uint8)\n        \n        for lo, hi in zip(starts, ends):\n            image[lo:hi] = 1\n        \n        return image.reshape(shape).T","2f41f224":"PROJECT_DIR = os.path.join(\"..\", \"input\")\nSHIP_MASKS_DATASET_FILE = os.path.join(PROJECT_DIR, \"train_ship_segmentations.csv\")\nIMAGES_PROCESSED_DIR = os.path.join(PROJECT_DIR, \"train\")\nIMAGES_UNPROCESSED_DIR = os.path.join(PROJECT_DIR, \"test\")","5c081b9b":"def create_and_populate_images_dataSet(images_dir):\n    images_dataSet = pd.DataFrame(os.listdir(images_dir), columns = [\"filename\"])\n    images_dataSet[\"id\"] = images_dataSet[\"filename\"].str.split(\".\").str[0].astype(str)\n    images_dataSet[\"filePath\"] = images_dir + \"\/\" + images_dataSet[\"filename\"]\n    images_dataSet.set_index([\"id\"], inplace = True)\n    \n    return images_dataSet","299d495a":"IMAGES_PROCESSED_DATASET = create_and_populate_images_dataSet(IMAGES_PROCESSED_DIR)\nIMAGES_UNPROCESSED_DATASET = create_and_populate_images_dataSet(IMAGES_UNPROCESSED_DIR)\n\nIMAGES_PROCESSED_COUNT = IMAGES_PROCESSED_DATASET.shape[0]\nIMAGES_UNPROCESSED_COUNT = IMAGES_UNPROCESSED_DATASET.shape[0]\nIMAGES_COUNT = IMAGES_PROCESSED_COUNT + IMAGES_UNPROCESSED_COUNT\n\nprint(\"{:,d} images | {:,d} processed images ({:.2f}%) | {:,d} unprocessed images ({:.2f}%)\".format(\n    IMAGES_COUNT,\n    IMAGES_PROCESSED_COUNT, (IMAGES_PROCESSED_COUNT \/ IMAGES_COUNT) * 100,\n    IMAGES_UNPROCESSED_COUNT, (IMAGES_UNPROCESSED_COUNT \/ IMAGES_COUNT) * 100\n))","491b0f70":"SHIP_MASKS_DATASET = pd.read_csv(SHIP_MASKS_DATASET_FILE, names = [\"filename\", \"mask\"], header = 0)\nSHIP_MASKS_DATASET[\"imageId\"] = SHIP_MASKS_DATASET[\"filename\"].str.split(\".\").str[0].astype(str)\nSHIP_MASKS_DATASET = SHIP_MASKS_DATASET.drop(\"filename\", axis = 1)\nSHIP_MASKS_DATASET.set_index([\"imageId\"], inplace = True)\n\nIMAGES_WITH_SHIPS_COUNT = SHIP_MASKS_DATASET.groupby(\"imageId\").count().astype(bool).sum().values[0]\nIMAGES_WITHOUT_SHIPS_COUNT = IMAGES_PROCESSED_COUNT - IMAGES_WITH_SHIPS_COUNT\n\nprint(\"{:,d} processed images | {:,d} images with ships ({:.2f}%) | {:,d} images without ships ({:.2f}%)\".format(\n    IMAGES_PROCESSED_COUNT,\n    IMAGES_WITH_SHIPS_COUNT, (IMAGES_WITH_SHIPS_COUNT \/ IMAGES_PROCESSED_COUNT) * 100,\n    IMAGES_WITHOUT_SHIPS_COUNT, (IMAGES_WITHOUT_SHIPS_COUNT \/ IMAGES_PROCESSED_COUNT) * 100\n))","864ae179":"def create_SatelliteImage_from_sample(index, sample):\n    satelliteImage = SatelliteImage.load_file(sample[\"filePath\"])\n    satelliteImage.set_title(\"#{:s} ({:d} ships)\".format(index.upper(), sample[\"shipsCount\"]))\n    satelliteImage.add_objects(pd.Series(SHIP_MASKS_DATASET.loc[index][\"mask\"]))\n    \n    return satelliteImage","a1f51c8c":"def display_SatelliteImages(satelliteImages, cols = 4, figsize = (5, 5)):\n    w, h = figsize\n    rows = len(satelliteImages) * 1 \/\/ cols + 1\n    plt.figure(figsize = (cols * w, rows * h))\n\n    i = 1    \n    for satelliteImage in satelliteImages:\n        plt.subplot(rows, cols, i)\n        satelliteImage.show(True)\n        i += 1\n\n    plt.tight_layout()\n    plt.show()","ea7bb557":"SHIPS_BY_IMAGE = SHIP_MASKS_DATASET.groupby(\"imageId\").count().astype(int)\nSHIPS_BY_IMAGE = SHIPS_BY_IMAGE.rename(columns = {\"mask\" : \"shipsCount\"})\nIMAGES_PROCESSED_DATASET = IMAGES_PROCESSED_DATASET.join(SHIPS_BY_IMAGE, how = \"inner\")","421f6a80":"SHIPS_BY_IMAGE_COUNT = len(SHIPS_BY_IMAGE)\n\nSHIPS_BY_IMAGE_MEAN = SHIPS_BY_IMAGE[\"shipsCount\"].mean()\nSHIPS_BY_IMAGE_STD = SHIPS_BY_IMAGE[\"shipsCount\"].std()\nSHIPS_BY_IMAGE_LOWER = int(max(0, SHIPS_BY_IMAGE_MEAN - 3 * SHIPS_BY_IMAGE_STD))\nSHIPS_BY_IMAGE_UPPER = int(min(SHIPS_BY_IMAGE_MEAN + 3 * SHIPS_BY_IMAGE_STD, SHIPS_BY_IMAGE[\"shipsCount\"].max()))\n\nSHIPS_BY_IMAGE_OUTLIERS = SHIPS_BY_IMAGE[(SHIPS_BY_IMAGE[\"shipsCount\"] < SHIPS_BY_IMAGE_LOWER) | (SHIPS_BY_IMAGE[\"shipsCount\"] > SHIPS_BY_IMAGE_UPPER)]\nSHIPS_BY_IMAGE_OUTLIERS_COUNT = SHIPS_BY_IMAGE_OUTLIERS.shape[0]\n\nprint(\"{:.2f} \u00b1 {:.2f} ships by image ({:.2f}%) | {:,d} outlier images ({:.2f}%)\".format(\n    SHIPS_BY_IMAGE_MEAN, 3 * SHIPS_BY_IMAGE_STD, ((SHIPS_BY_IMAGE_COUNT - SHIPS_BY_IMAGE_OUTLIERS_COUNT) \/ SHIPS_BY_IMAGE_COUNT) * 100,\n    SHIPS_BY_IMAGE_OUTLIERS_COUNT, (SHIPS_BY_IMAGE_OUTLIERS_COUNT \/ SHIPS_BY_IMAGE_COUNT) * 100\n))","5fd642b1":"def display_shipsCount_frequency(shipsCounts):\n    plt.figure(figsize = (23, 8))\n    ax = sns.countplot(data = shipsCounts, x = \"shipsCount\")\n    \n    for p in ax.patches:\n        x = p.get_bbox().get_points()[:,0]\n        y = p.get_bbox().get_points()[1,1]\n        ax.annotate(\"{:.2f}%\".format(y \/ len(shipsCounts) * 100), (x.mean(), y), ha = \"center\", va = \"bottom\")\n    \n    plt.title(\"Ships Frequency Distribution\")\n    plt.ylabel(\"Frequency\")\n    plt.xlabel(\"Ships count\")\n    plt.show()\n    \ndisplay_shipsCount_frequency(SHIPS_BY_IMAGE)","85c96b1d":"SAMPLES = IMAGES_PROCESSED_DATASET[IMAGES_PROCESSED_DATASET[\"shipsCount\"] == 0].sample(32)\nSATELLITE_IMAGES = [create_SatelliteImage_from_sample(index, sample) for index, sample in SAMPLES.iterrows()]\ndisplay_SatelliteImages(SATELLITE_IMAGES)","da309298":"SAMPLES = IMAGES_PROCESSED_DATASET[(IMAGES_PROCESSED_DATASET[\"shipsCount\"] > 0) & (IMAGES_PROCESSED_DATASET[\"shipsCount\"] < SHIPS_BY_IMAGE_UPPER)].sample(32)\nSATELLITE_IMAGES = [create_SatelliteImage_from_sample(index, sample) for index, sample in SAMPLES.iterrows()]\ndisplay_SatelliteImages(SATELLITE_IMAGES)","e9e8e842":"SAMPLES = IMAGES_PROCESSED_DATASET[IMAGES_PROCESSED_DATASET[\"shipsCount\"] > SHIPS_BY_IMAGE_UPPER].sample(32)\nSATELLITE_IMAGES = [create_SatelliteImage_from_sample(index, sample) for index, sample in SAMPLES.iterrows()]\ndisplay_SatelliteImages(SATELLITE_IMAGES)","96425a6a":"## IMPORTING DATA","2073be44":"# SHIP DETECTION CHALLENGE","aca49cf1":"## TOOLS : CUSTOM FUNCTIONS AND CLASSES","559e3a4a":"### DATA ANALYSIS : IMAGES WITH MANY SHIPS (OUTLIERS)","d2e61888":"#### Insights :","abc1402e":"#### Insights :\n* Most of the images are empty.","66ad0651":"### DATA ANALYSIS : IMAGES WITHOUT SHIP","f20cd1d2":"### DATA ANALYSIS : IMAGES WITH SHIPS","989b59ab":"## DATA ANALYSIS","4127c555":"#### Insights :\n* Some images are corrupted.\n* There are 4 kinds of image : all sea, no sea, shore and sea, cloud and sea.\n* Images are not take all at the same zoom level.","0d799814":"### DATA ANALYSIS : SHIPS FREQUENCY"}}