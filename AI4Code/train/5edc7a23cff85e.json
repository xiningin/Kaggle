{"cell_type":{"078dd65a":"code","b16c7bbb":"code","1b21e812":"code","fa0470f7":"code","16f189fc":"code","5eeef360":"code","75bc81b7":"code","be6f844f":"code","2379686e":"code","6df7412c":"code","764c20fa":"code","0958e74d":"code","2f19e032":"code","3059ed1a":"code","f4bed181":"code","df433e94":"code","f486aaa4":"code","634c0baa":"code","cf6e63fb":"code","b278d029":"code","b4231212":"code","01c59f46":"code","5c14ad9a":"code","53c89ceb":"code","3a362959":"markdown","f4b438f3":"markdown","9b0b3edc":"markdown","7a3d8df8":"markdown","724a4d18":"markdown","4bbb8fb4":"markdown","c027281b":"markdown","ca5474c2":"markdown","6cbc0709":"markdown","4dd9f958":"markdown","a70cb726":"markdown"},"source":{"078dd65a":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","b16c7bbb":"train_data_digit = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_data_digit = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\ntrain_data_fashion = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest_data_fashion = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')","1b21e812":"train_data_digit.head()","fa0470f7":"test_data_fashion.head(10)","16f189fc":"X_train_full_digit = train_data_digit.loc[:,\"pixel0\":\"pixel783\"]\ny_train_full_digit = train_data_digit['label']","5eeef360":"X_train_arr_digit = np.asarray(X_train_full_digit)","75bc81b7":"X_train_arr_digit","be6f844f":"X_train_arr_digit = X_train_arr_digit.reshape(X_train_full_digit.shape[0],28,28)\n\nprint(X_train_arr_digit.shape)","2379686e":"#We'll do this with the y_train_full and test_data\n\n#Y_TRAIN_FULL\n\ny_train_arr_digit = train_data_digit.values[:,1]\n\n#One hot encoding the y_train labels\nfrom keras.utils.np_utils import to_categorical\ny_train_arr = to_categorical(y_train_full_digit)\n\n#X_TEST\n\nX_test_arr_digit = test_data_digit.values[:,:]\nX_test_arr_digit = X_test_arr_digit.reshape(test_data_digit.shape[0],28,28,1)\n\nprint(y_train_arr_digit)\nprint(X_test_arr_digit.shape)","6df7412c":"import matplotlib.pyplot as plt\nnum = 43\nimg = X_train_arr_digit[num]\nplt.imshow(img,cmap = 'gray')\n\nprint(\"Number is \",y_train_full_digit[num])","764c20fa":"X_train_arr_digit = X_train_arr_digit\/255\nx_test_arr_digit = X_test_arr_digit\/255","0958e74d":"num = 43\nimg = X_train_arr_digit[num]\nplt.imshow(img,cmap = 'gray')\n\nprint(\"Number is \",y_train_full_digit[num])","2f19e032":"#First we will reshape the X_train_arr and y_train_arr by adding one more dimension, that will specify it's channel value.\n#As this is Black and White, we will chose 1\n\nX_train_arr_digit = X_train_arr_digit.reshape(X_train_arr_digit.shape[0],28,28,1)\nX_test_arr_digit = X_test_arr_digit.reshape(X_test_arr_digit.shape[0],28,28,1)","3059ed1a":"import keras\n\nfrom keras.models import  Sequential\nfrom keras.layers.core import Dense, Flatten, Dropout\nfrom keras.layers import Conv2D\n\nBATCH_SIZE = 64\nEPOCHS = 30\nROW_DIM = 28\nCOL_DIM = 28\nNUM_CLASSES = 10 #10 numbers in total from 0 to 9","f4bed181":"y = train_data_digit.label\nout_y = keras.utils.to_categorical(y, 10)","df433e94":"from sklearn.model_selection import train_test_split\n\nX_train,X_valid,y_train,y_valid = train_test_split(X_train_arr_digit,out_y,test_size = 0.1,random_state = 42)","f486aaa4":"model1 = Sequential()\n\nmodel1.add(Conv2D(32,kernel_size = (3,3),input_shape = (28,28,1),activation = 'relu'))\nmodel1.add(Conv2D(32,kernel_size = (3,3), activation = 'relu'))\nmodel1.add(Conv2D(64,kernel_size = (3,3), activation = 'relu'))\nmodel1.add(Flatten())\n\nmodel1.add(Dense(128,activation = 'relu'))\nmodel1.add(Dense(NUM_CLASSES,activation = 'softmax'))","634c0baa":"model1.compile( loss = keras.losses.categorical_crossentropy,\n              optimizer = 'adam',\n              metrics = ['accuracy'])","cf6e63fb":"model1.summary()","b278d029":"model1.fit(X_train,y_train,\n          batch_size = 128,\n          epochs = 10,\n          validation_split = 0.2)","b4231212":"preds = model1.predict(X_test_arr_digit)","01c59f46":"preds[2]","5c14ad9a":"test_view = X_test_arr_digit\n\ntest_view = test_view.reshape(X_test_arr_digit.shape[0],28,28)\n\nimport cv2\nimport matplotlib.pyplot as plt\n\nplt.imshow(test_view[2])","53c89ceb":"epochs = [1,2,3,4,5,6,7,8,9,10]\naccuracy = [97.90,98.35,98.47,98.39,98.64,98.52,98.44,98.07,98.54,98.56]\ngoogle_accuracy = [66.72,77.03,79.91,81.43,82.57,83.25,83.77,84.21,84.55,84.92]\n\nsns.lineplot(x = epochs, y = accuracy, marker = 'o', label = 'MNIST Digit')\nsns.lineplot(x = epochs, y = google_accuracy, marker = 'o', color = 'red', label = 'MNIST Fashion')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","3a362959":"## Keras Models","f4b438f3":"## Import Datasets","9b0b3edc":"# **Predicting**","7a3d8df8":"## Standardize the array","724a4d18":"## Viewing a sample image\n### Before Standardisation","4bbb8fb4":"### Handwritten Digit Model","c027281b":"## **Training the Model**","ca5474c2":"## Graph of Epochs vs Accuracy","6cbc0709":"## Import Libraries","4dd9f958":"### After Standardisation","a70cb726":"## **Conversion of images to numpy array**"}}