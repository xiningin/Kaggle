{"cell_type":{"9c09c155":"code","ae247efa":"code","165d5ae3":"code","e173d55a":"code","ceee2ba5":"code","80c01a9f":"code","f4e545d4":"code","8407b03e":"code","3cfdc4e7":"code","9bc63f91":"code","7d3c054e":"code","3c87c069":"code","c088a8d0":"code","465ad2ad":"code","4cb2d242":"code","d5a5c01c":"code","657305ba":"code","4ec037b1":"code","7611e70d":"code","6ca58950":"code","3e3d03c8":"code","42911673":"code","fa5bba73":"code","e7781cd0":"code","518f2be4":"code","5733b412":"code","621ebe29":"code","db9cb8d5":"code","a9328f7c":"code","d82af572":"code","d99bfa19":"code","c19b4f8d":"code","8f4ed514":"code","2664fd2b":"code","671fb95b":"code","88d72cd9":"code","ca631a38":"code","b2c28571":"code","1688dc20":"code","c961f76d":"code","7797ac68":"code","7d56a844":"code","37dc4c5c":"code","c34ef072":"code","5e6771e0":"code","ba946d7e":"code","53af2ef1":"code","652bb6ac":"code","c64c5aca":"code","4e25c266":"code","0560f2ac":"code","42067c61":"code","a9ee3c69":"code","66f8b50e":"code","0686aed5":"code","31c7b953":"code","49e7e35a":"code","8449a238":"code","43004e37":"code","a38e97f8":"code","991e429e":"code","802df52f":"code","4215f97a":"markdown","f12802d2":"markdown","96ba0358":"markdown","f4d06cce":"markdown","39625ed3":"markdown","492e3673":"markdown","8b88d4c5":"markdown","9eccb958":"markdown","f13c7c49":"markdown","866dcd64":"markdown","c387349d":"markdown","f27ceea5":"markdown"},"source":{"9c09c155":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\ndf = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\nprint(\"The Shape of the train_dataSet is {}.\\n\".format(df.shape))\nprint(\"The Shape of the test_dataSet is {}.\\n\".format(test_df.shape))\ndf.head()\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae247efa":"df.info()","165d5ae3":"df.describe()","e173d55a":"df.isnull().sum()","ceee2ba5":"df[df.duplicated()].count()","80c01a9f":"df_copy = df.copy()\ndf_copy.head()","f4e545d4":"df_copy.isnull().sum()","8407b03e":"df_copy.corr()","3cfdc4e7":"corr_matrix=df_copy.corr()\n(corr_matrix['Survived'].sort_values(ascending=False))","9bc63f91":"le=LabelEncoder()\ndf_copy['Sex']=le.fit_transform(df_copy['Sex'])","7d3c054e":"df_copy['Embarked'] = df_copy['Embarked'].fillna(\"Unknown\")\ndf_copy.isnull().sum()","3c87c069":"df_copy['Embarked']=le.fit_transform(df_copy['Embarked'])","c088a8d0":"df_copy['Age'] = df_copy['Age'].fillna(df_copy['Age'].median()) \ndf_copy.isnull().sum()","465ad2ad":"df_copy.info()","4cb2d242":"corr_matrix=df_copy.corr()\n(corr_matrix['Survived'].sort_values(ascending=False))","d5a5c01c":"_ = pd.plotting.scatter_matrix(df_copy,figsize = [18, 12])","657305ba":"plt.figure(figsize=(10,10))\nsns.heatmap(data = df_copy.corr(),annot=True)\nplt.show()","4ec037b1":"print(df_copy[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('-'*20)\nprint(df_copy[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('-'*20)\nprint(df_copy[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('-'*20)\nprint(df_copy[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False))","7611e70d":"g = sns.FacetGrid(df_copy, col='Survived', height=8.2, aspect=1.6)\ng.map(plt.hist, 'Age', bins=20)","6ca58950":"g = sns.FacetGrid(df_copy, col='Survived', height=8.2, aspect=1.6)\ng.map(plt.hist, 'Sex', bins=20)","3e3d03c8":"df_copy.columns","42911673":"X=df_copy.drop(['PassengerId','Name','Survived','Ticket','Cabin'], axis=1)\ny=df_copy['Survived']","fa5bba73":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test =train_test_split(X, y, test_size=0.2, random_state=42)","e7781cd0":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","518f2be4":"from sklearn.metrics import mean_squared_log_error \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier()\n#Fit the trained model\nrf.fit(X_train,y_train)\n\n#Cross validation prediction\nrf_pred=rf.predict(X_test)\nprint(rf_pred.shape)\n\nscores = cross_val_score(rf, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % rf.score(X, y) )\n\nprint('train_score:'+str(rf.score(X_train, y_train)))\nprint('test_score:'+str(rf.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( rf_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( rf_pred , y_test) )))","5733b412":"from sklearn.metrics import roc_curve\ny_pred_prob = rf.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='rf')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","621ebe29":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, rf_pred))\nprint(classification_report(y_test, rf_pred))","db9cb8d5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'max_depth': np.arange(1, 50)}\n\nrfc=RandomForestClassifier()\nrfc2 = GridSearchCV(rfc, param_grid, cv=2)\nrfc2.fit(X_train, y_train)\nrfc2_pred=rfc2.predict(X_test)\n\nprint(rfc2.best_params_)\nprint(rfc2.best_score_)\n\nscores = cross_val_score(rfc2, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % rfc2.score(X, y) )\n\nprint('train_score:'+str(rfc2.score(X_train, y_train)))\nprint('test_score:'+str(rfc2.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( rfc2_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( rfc2_pred , y_test) )))","a9328f7c":"from sklearn.metrics import roc_curve\ny_pred_prob = rfc2.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='rf')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","d82af572":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, rfc2_pred))\nprint(classification_report(y_test, rfc2_pred))","d99bfa19":"from sklearn import tree\ntre = tree.DecisionTreeClassifier()\ntre.fit(X, y)\n#Cross validation prediction\ntre_pred=tre.predict(X_test)\nprint(tre_pred.shape)\n\nscores = cross_val_score(tre, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % tre.score(X, y) )\n\nprint('train_score:'+str(rf.score(X_train, y_train)))\nprint('test_score:'+str(rf.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( tre_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( tre_pred , y_test) )))","c19b4f8d":"from sklearn.metrics import roc_curve\ny_pred_prob = tre.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='tre')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","8f4ed514":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, tre_pred))\nprint(classification_report(y_test, tre_pred))","2664fd2b":"from xgboost.sklearn import XGBClassifier\nxgb = XGBClassifier(learning_rate=0.01 ,\n                                        n_estimators=900,\n                                        max_depth=5,\n                                        subsample=1,\n                                        colsample_bytree=1,\n                                        gamma=6,\n                                        reg_alpha = 14,\n                                        reg_lambda = 3)\n\nxgb.fit(X_train, y_train)\n#Cross validation prediction\nxgb_pred=xgb.predict(X_test)\n\nscores = cross_val_score(xgb, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % xgb.score(X, y) )\n\nprint('train_score:'+str(xgb.score(X_train, y_train)))\nprint('test_score:'+str(xgb.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( xgb_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( xgb_pred , y_test) )))","671fb95b":"from sklearn.metrics import roc_curve\ny_pred_prob = xgb.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='xgb')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","88d72cd9":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, xgb_pred))\nprint(classification_report(y_test, xgb_pred))","ca631a38":"from sklearn.linear_model import LogisticRegression\nlog = LogisticRegression(penalty = 'l2',solver = 'liblinear', C = 0.25)\nlog.fit(X_train, y_train)\n#Cross validation prediction\nlog_pred=log.predict(X_test)\n\nscores = cross_val_score(log, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % log.score(X, y) )\n\nprint('train_score:'+str(log.score(X_train, y_train)))\nprint('test_score:'+str(log.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( log_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( log_pred , y_test) )))","b2c28571":"from sklearn.metrics import roc_curve\ny_pred_prob = log.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='log')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","1688dc20":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, log_pred))\nprint(classification_report(y_test, log_pred))","c961f76d":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\n\nsteps = [('scaler', StandardScaler()),('knn', KNeighborsClassifier())]\npipeline = Pipeline(steps)\n\nparameters = {'knn__n_neighbors': np.arange(1, 50)}\n\ncv = GridSearchCV(pipeline, param_grid=parameters)\ncv.fit(X_train, y_train)\ny_pred = cv.predict(X_test)\n\nscores = cross_val_score(cv, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % cv.score(X, y) )\n\nprint('train_score:'+str(cv.score(X_train, y_train)))\nprint('test_score:'+str(cv.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( y_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( y_pred , y_test) )))","7797ac68":"from sklearn.metrics import roc_curve\ny_pred_prob = cv.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='knn')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","7d56a844":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","37dc4c5c":"from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nqda = QuadraticDiscriminantAnalysis()\nqda.fit(X_train, y_train)\nqda_pred = qda.predict(X_test)\n\nscores = cross_val_score(qda, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % qda.score(X, y) )\n\nprint('train_score:'+str(qda.score(X_train, y_train)))\nprint('test_score:'+str(qda.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( qda_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( qda_pred , y_test) )))","c34ef072":"from sklearn.metrics import roc_curve\ny_pred_prob = qda.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='qda')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","5e6771e0":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, qda_pred))\nprint(classification_report(y_test, qda_pred))","ba946d7e":"from sklearn.svm import SVC\nsvc=SVC()\nsvc.fit(X_train,y_train)\nsvc_pred=svc.predict(X_test)\n\nscores = cross_val_score(svc, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % svc.score(X, y) )\n\nprint('train_score:'+str(svc.score(X_train, y_train)))\nprint('test_score:'+str(svc.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( svc_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( svc_pred , y_test) )))","53af2ef1":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, svc_pred))\nprint(classification_report(y_test, svc_pred))","652bb6ac":"from sklearn.ensemble import AdaBoostClassifier\nada_clf = AdaBoostClassifier()\nada_clf.fit(X_train, y_train)\nada_pred=ada_clf.predict(X_test)\n\nscores = cross_val_score(ada_clf, X, y, cv=5)\nprint(scores.mean())\nprint ('ROC AUC: %0.3f' % ada_clf.score(X, y) )\n\nprint('train_score:'+str(ada_clf.score(X_train, y_train)))\nprint('test_score:'+str(ada_clf.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( ada_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( ada_pred , y_test) )))","c64c5aca":"from sklearn.metrics import roc_curve\ny_pred_prob = ada_clf.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='ada_clf')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","4e25c266":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, ada_pred))\nprint(classification_report(y_test, ada_pred))","0560f2ac":"from sklearn.ensemble import VotingClassifier\nclassifier = VotingClassifier(estimators=[('qda', qda),('ada_clf', ada_clf),('log',log),('cv',cv),('rfc2',rfc2),('xgb',xgb),('tre',tre)],voting='soft')          \n\nclassifier.fit(X_train, y_train)\nclass_pred = classifier.predict(X_test)\n\naccuracies = cross_val_score(classifier, X, y , cv = 5)\nprint(\"5 fold cross validation accuracies {}\".format(accuracies.mean()))\nprint ('ROC AUC: %0.3f' % classifier.score(X, y) )\n\nprint('train_score:'+str(classifier.score(X_train, y_train)))\nprint('test_score:'+str(classifier.score(X_test, y_test)))\nprint ('MSE:' + str(np.sqrt(mean_squared_error ( class_pred , y_test) ))) \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( class_pred , y_test) )))","42067c61":"from sklearn.metrics import roc_curve\ny_pred_prob = classifier.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='classifier')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show();","a9ee3c69":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, class_pred))\nprint(classification_report(y_test, class_pred))","66f8b50e":"test_df.head()","0686aed5":"test_df.info()","31c7b953":"test_df.describe()","49e7e35a":"test_df.isnull().sum()","8449a238":"le=LabelEncoder()\ntest_df['Sex']=le.fit_transform(test_df['Sex'])\ntest_df['Embarked']=le.fit_transform(test_df['Embarked'])","43004e37":"test_df['Age'] = test_df['Age'].fillna(test_df['Age'].median()) \ntest_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())\ntest_df.isnull().sum()","a38e97f8":"test_df.info()","991e429e":"y_test_predicted = classifier.predict(test_df.drop(columns =['PassengerId','Name','Ticket','Cabin']))\ntest_df['Survived'] = y_test_predicted\ntest_df","802df52f":"test_df[['PassengerId', 'Survived']].to_csv('submission4.csv', index=False)","4215f97a":"# > **PREPROCESSING FOR TESTING**","f12802d2":"# > **FEATURES SELECTION FOR TRAINING**","96ba0358":"# > **SUBMISSION**","f4d06cce":"# > **FEATURES CORRELATION**","39625ed3":"# > **DATA VISUALIZATION**","492e3673":"# > **EDA**","8b88d4c5":"# > **PREPROCESSING**","9eccb958":"# > **SPLIT DATA**","f13c7c49":"# > **MACHINE LEARNING MODELS**","866dcd64":"#  **TAITANIC**","c387349d":"# > ** IMPORT LIBERIRES AND READ THE DATA**","f27ceea5":"# > **EDA FOR TESTING**"}}