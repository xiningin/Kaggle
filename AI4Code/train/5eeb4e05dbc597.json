{"cell_type":{"b2894190":"code","b1fdcfb6":"code","58cc6d2c":"code","fc4c6e7a":"code","b51b2e4b":"code","dc48b687":"code","fb56b38e":"code","c6bab569":"code","f0e6ccc6":"code","ba2a0d8b":"code","003de2ef":"code","bc5cec71":"code","3667dd71":"code","e529a447":"code","b2eaa649":"code","88553c63":"code","02b699ab":"code","8419ca15":"code","647cae93":"code","99040475":"code","e159cb6b":"code","d232d1a5":"code","9875152f":"code","c0e1a18c":"code","a27cd839":"code","289af5a4":"code","ae569c0f":"code","e0e5610d":"code","a2fabb2c":"code","9af4d40c":"markdown","88fe6496":"markdown","2acc9359":"markdown","2d057a8e":"markdown","efaac7fb":"markdown"},"source":{"b2894190":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.style.use('fivethirtyeight')\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1fdcfb6":"data = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndata.head()","58cc6d2c":"data.info()","fc4c6e7a":"# Check the options for the categorical variables\nclass cate:\n    def __init__(self,categories_list):\n        self.categories_list = categories_list\n    \n    def options(self):\n        cat_options = {}\n        for cat in self.categories_list:\n            options_num = list(data[cat].unique())\n            cat_options[cat] = options_num\n        return cat_options\n    \n    def numberic_cate(self):\n        for key,values in self.options().items():\n            print(\"Number of unique values of the {} \uff1a{} \".format(key,len(values)))\n            \ncategories_list = ['gender','ever_married','work_type','Residence_type','smoking_status','stroke','hypertension','heart_disease']\nca = cate(categories_list)\nca_options = ca.options()\nca_options","b51b2e4b":"ca.numberic_cate()","dc48b687":"data = data.drop(['id'],axis=1)\ndata.head()","fb56b38e":"data.describe()","c6bab569":"data[\"bmi\"] = data[\"bmi\"].replace('NaN',np.nan)\ndata[\"bmi\"] = data[\"bmi\"].replace(np.nan,data[\"bmi\"].mean())\ndata.info()","f0e6ccc6":"sns.countplot(x = data.gender,hue='stroke',data=data)","ba2a0d8b":"len(data[data['gender'] == 'Other'])","003de2ef":"data = data.drop(data[data['gender'] == 'Other'].index).copy()\nlen(data[data['gender'] == 'Other'])","bc5cec71":"sns.countplot(x = data.ever_married,hue='stroke',data=data)","3667dd71":"plt.figure(figsize=(14,6))\nsns.countplot(x = data.work_type,hue='stroke',data=data)","e529a447":"sns.countplot(x = data.Residence_type,hue='stroke',data=data)","b2eaa649":"plt.figure(figsize=(14,6))\nsns.countplot(x = data.smoking_status,hue='stroke',data=data)","88553c63":"sns.countplot(x = data.stroke)","02b699ab":"stroke_total = len(data[\"stroke\"])\nstroke_0 = len(data[data[\"stroke\"] == 0]) \/ stroke_total\nstroke_1 = len(data[data[\"stroke\"] == 1]) \/ stroke_total\nprint('stroke_0 \/ stroke_total: {}'.format(stroke_0))\nprint('stroke_1 \/ stroke_total: {}'.format(stroke_1))","8419ca15":"sns.heatmap(data.corr(),cbar=False,cmap='BuGn',annot=True)","647cae93":"p=data.hist(figsize = (10,10))","99040475":"data.head()","e159cb6b":"data['hypertension'] = data['hypertension'].replace(0,'no_hypertension')\ndata['hypertension'] = data['hypertension'].replace(1,'yes_hypertension')\ndata['heart_disease'] = data['heart_disease'].replace(0,'no_heart_disease')\ndata['heart_disease'] = data['heart_disease'].replace(1,'yes_heart_disease')\ndata.head()","d232d1a5":"#sample\n# gender = data.pop('gender')\n# data['Male'] = (gender == 'Male') * 1\n# data['Female'] = (gender == 'Female') * 1\n\nclass one_hot:\n    \n    def __init__(self,col_):\n        self.col_ = col_\n    \n    def pop_trans_data(self):\n        for i in self.col_:\n            cat = list(data[i].unique())\n            i_columns= data.pop(i)\n            for ca in cat:\n                data[ca] = (i_columns == ca) * 1\n        \n        pass\ncol_ = ['gender','hypertension','heart_disease','ever_married','work_type','Residence_type','smoking_status']\nhot = one_hot(col_)\nhot.pop_trans_data()\ndata.head()","9875152f":"#standardization-----age avg_glucose_level  bmi\nclass standard:\n    \n    def __init__(self,data_v):\n        self.data_v = data_v\n        \n    def trans(self):\n        for i in self.data_v:\n            data[i] = (data[i] - data[i].mean()) \/ data[i].std()\n        pass\ndata_v = ['age','avg_glucose_level','bmi']\nsta = standard(data_v)\nsta.trans()\ndata.head()","c0e1a18c":"from imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split","a27cd839":"X = data.drop(['stroke'],axis=1)\nY = data['stroke']\nsmo = SMOTE(random_state=10)\nX_smo,Y_smo = smo.fit_resample(X,Y)","289af5a4":"xtrain,xtest,ytrain,ytest = train_test_split(X_smo,Y_smo,test_size=0.3,random_state=0)","ae569c0f":"LR = LogisticRegression(C=1.0,tol=0.01)\nLR.fit(xtrain,ytrain)\nLR_a = accuracy_score(ytest,LR.predict(xtest))\nprint(LR_a)\nf1_a = f1_score(ytest,LR.predict(xtest))\nprint(f1_a)","e0e5610d":"xgb = XGBClassifier(learning_rate=0.05,n_estimators=10,random_state=20)\nxgb.fit(xtrain,ytrain)\nxgb_score = accuracy_score(ytest,xgb.predict(xtest))\nxgb_f1_score = f1_score(ytest,xgb.predict(xtest))\nprint(xgb_score)\nprint(xgb_f1_score)","a2fabb2c":"print('LogisticRegression--accuracy_score:{}'.format(LR_a))\nprint('XGBClassifier--accuracy_score:{}'.format(xgb_score))","9af4d40c":"# Deleting this row of data has little effect","88fe6496":"****We need to process 7 types of data  ----- one-hot\n*  gender\t\n*  hypertension\t\n* heart_disease\t\n* ever_married\t\n*  work_type\t\n* Residence_type\t\n*  smoking_status\n","2acc9359":"# data processing\n* About the Data:\n* id: unique identifier\n* gender: \"Male\", \"Female\" or \"Other\"\n* age: age of the patient\n* hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n* heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n* ever_married: \"No\" or \"Yes\"\n* work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n* Residence_type: \"Rural\" or \"Urban\"\n* avg_glucose_level: average glucose level in blood\n* bmi: body mass index\n* smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n* stroke: 1 if the patient had a stroke or 0 if not\n* Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient","2d057a8e":"# Calculate the ratio of stroke equal to 0 and 1\n# Unbalanced data classification","efaac7fb":"1. **There are missing values in the column where bmi is located**\n2. **I try to fill in with the average**"}}