{"cell_type":{"49353d8e":"code","ed306e57":"code","bc4aefff":"code","08f308c0":"code","e006ad69":"code","1cc82edb":"code","869953d8":"code","a3767d62":"code","1b7e829f":"code","fb594b06":"code","c2d75f00":"code","5e16c8d1":"code","9abed28c":"code","29fe102c":"code","b57843f7":"code","703486eb":"code","e70ca7ef":"code","846d7260":"code","fd935f39":"code","3d1be0dd":"code","cdf5085c":"code","39081f90":"code","ff1ccc11":"code","67cb1e0f":"code","692f0bb0":"markdown"},"source":{"49353d8e":"################## \uc2dc\ud5d8 \uc548\ub0b4 \ubb38\uad6c \ubc0f \ucf54\ub4dc ##################\n# \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n# \uc608\uc2dc) print(df.head())\n\n# getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n# \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n# \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\nimport pandas as pd\nX_test = pd.read_csv(\"..\/input\/hr-data\/X_test.csv\")\nX_train = pd.read_csv(\"..\/input\/hr-data\/X_train.csv\")\ny_train = pd.read_csv(\"..\/input\/hr-data\/y_train.csv\")\n\n# \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n# \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n# \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n# pd.DataFrame({'enrollee_id': X_test.enrollee_id, 'target': pred}).to_csv('003000000.csv', index=False)","ed306e57":"import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","bc4aefff":"print(X_train.shape, y_train.shape)","08f308c0":"X_train.head()","e006ad69":"y_train.head()","1cc82edb":"y_train['target'].value_counts()","869953d8":"# \uacb0\uce21\uce58 \ud655\uc778\nX_train.isna().sum()","a3767d62":"X_test.isna().sum()","1b7e829f":"X_train.info()","fb594b06":"# mode\ub85c \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\ncat_features = X_train.select_dtypes(include=object).columns\n\nfor cat in cat_features:\n    X_train[cat] = X_train[cat].map(lambda x: str(x))\n    X_test[cat] = X_test[cat].map(lambda x: str(x))\n    \n    mode_train = X_train[cat].mode()[0]\n    X_train[cat] = X_train[cat].fillna(mode_train)\n\n    mode_test = X_test[cat].mode()[0]\n    X_test[cat] = X_test[cat].fillna(mode_test)","c2d75f00":"X_train.isna().sum()","5e16c8d1":"X_test.isna().sum()","9abed28c":"X_test['c'] = 'test'\nX_train['c'] = 'train'\n\nconcat = pd.concat([X_train, X_test], axis=0)\n\n# labelEncoding\nfor cat in cat_features:\n    print(cat)\n    le = LabelEncoder()\n    \n    concat[cat] = le.fit_transform(concat[cat])\n\nconcat.head()","29fe102c":"X_train = concat[concat['c'] == 'train'].copy()\nX_test = concat[concat['c'] == 'test'].copy()\n\nX_train.drop(['c'], axis=1, inplace=True)\nX_test.drop(['c'], axis=1, inplace=True)","b57843f7":"# check correlation\nagg = pd.concat([X_train, y_train], axis=1)\ntarget = agg.corr()[['target']].drop('target', axis=0)\ntarget","703486eb":"to_use = target[abs(target['target']) > 0.04].index\nto_use","e70ca7ef":"# help(np.reshape)","846d7260":"final_train = X_train[to_use].copy()\nfinal_test = X_test[to_use].copy()\n\ntrain_id = final_train['enrollee_id']\ntest_id = final_test['enrollee_id']\n\nfinal_train.drop(['enrollee_id'], axis=1, inplace=True)\nfinal_test.drop(['enrollee_id'], axis=1, inplace=True)\n\ny_target = y_train['target']","fd935f39":"final_train.head()","3d1be0dd":"# model compare\nrf = RandomForestClassifier(random_state=42)\nxgb = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')\n\nX_tr, X_val, y_tr, y_val = train_test_split(final_train, y_target, test_size=0.2, stratify=y_target)\nmodels = [rf, xgb]\nfor model in models:\n    name = model.__class__.__name__\n    model.fit(X_tr, y_tr)\n    val_pred = model.predict_proba(X_val)[:, 1]\n    roc_auc = roc_auc_score(y_val, val_pred)\n    print(name, round(roc_auc, 4))","cdf5085c":"# # grid search\n# param_grid = {\n#     'max_depth': [3, 5, 7],\n#     'n_estimators': [100, 500, 1000],\n#     'n_jobs': [-1]\n# }\n\n# search = GridSearchCV(rf, param_grid=param_grid, cv=3, n_jobs=-1, scoring='roc_auc')\n# search.fit(final_train, y_target)\n# print(search.best_score_, search.best_params_)","39081f90":"best_params = {'max_depth': 7, 'n_estimators': 100, 'n_jobs': -1}\nbest_rf = RandomForestClassifier(**best_params, random_state=42)\nbest_rf.fit(X_tr, y_tr)\nval_pred = best_rf.predict_proba(X_val)[:, 1]\nprint(roc_auc_score(y_val, val_pred))","ff1ccc11":"pred = best_rf.predict_proba(final_test)[:, 1]\npred","67cb1e0f":"# \uccb4\uc810(\uc544\ub798 \uc8fc\uc11d \ud480\ub85c \uccb4\uc810)\nimport pickle\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\n\nwith open( \"..\/input\/hr-data\/answer.pickle\", \"rb\" ) as file:\n    ans = pickle.load(file)\n    ans = pd.DataFrame(ans)\nprint(roc_auc_score(ans['target'], pred))","692f0bb0":"## \uccb4\uc810"}}