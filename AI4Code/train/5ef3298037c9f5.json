{"cell_type":{"12955082":"code","b109b830":"code","05ef2447":"code","5bca792b":"code","27cb6153":"code","836a0a61":"code","dbd15155":"code","6e1dab06":"code","6be60349":"code","b81d0cf5":"code","49a08f6c":"code","0f29d1c8":"code","7e307b4c":"code","d78082a9":"code","a160fc1d":"code","e0ab8b32":"code","d9f69113":"code","e4cdedf9":"code","e1fb4cb1":"code","b7adc7f8":"code","e9838cbe":"code","12eee5c3":"code","2cd64f14":"code","f4508c2b":"code","2fa49cde":"code","b88838f0":"code","15ec4b31":"code","b506ca6a":"code","2abddd64":"code","e82fbc4b":"code","6f60e6e5":"code","3a017ef6":"code","a398f746":"code","2867e285":"code","4e6a5be6":"code","df0a00d7":"markdown","84951dd2":"markdown","5e639751":"markdown","11830523":"markdown","f4083a35":"markdown","d161931e":"markdown","05af30ea":"markdown"},"source":{"12955082":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b109b830":"import matplotlib.pyplot as plt","05ef2447":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","5bca792b":"football","27cb6153":"edu = pd.read_csv('\/kaggle\/input\/datalab3-samuel-mathieu\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","836a0a61":"edu.head()","dbd15155":"edu.tail()","6e1dab06":"edu[10:15]","6be60349":"edu.describe()","b81d0cf5":"edu['Value']","49a08f6c":"edu['GEO']","0f29d1c8":"edu.iloc[90:94][['TIME','GEO']]\n","7e307b4c":"edu[edu['Value'] > 6.5].tail()","d78082a9":"edu.max(axis = 0)\n","a160fc1d":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","e0ab8b32":"s = edu[\"Value\"]\/100\ns.head()\n","d9f69113":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","e4cdedf9":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","e1fb4cb1":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","b7adc7f8":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","e9838cbe":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","12eee5c3":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","2cd64f14":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","f4508c2b":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","2fa49cde":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","b88838f0":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","15ec4b31":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","b506ca6a":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","2abddd64":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","e82fbc4b":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","6f60e6e5":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","3a017ef6":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","a398f746":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","2867e285":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")\n","4e6a5be6":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","df0a00d7":"- What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\nIt returns every rows with 'Value'> 6.5. Ad tail() at the end and it gives you the last 5 rows which respect this condition. It's a series because we use an agregate function, which can't return a DataFrame in Python","84951dd2":"- Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nThis returns the \"standard\" statistical values (mean, median, standard deviation, quartile) of the series of floats available in the dataframe.","5e639751":"- Which is the size of the edu DataFrame(rows x columns) ?\n\n384 rows x 3 columns\n","11830523":"- What does the method tail()return?\n\nIt returns the last five rows of the DataFrame","f4083a35":"- What do you observe regarding the parameter ascending=False?\n\nit allows to order the countries in alphabetical order","d161931e":"- What does this index return? What does the first index represent? And the second one?\n\nIt returns the rows 90 to 94 of the columns 'TIME' and 'GEO'","05af30ea":"- What happens if we give a number as argument to the method head()?\n\nIf we give a number as argument, it displays the rows given in the argument"}}