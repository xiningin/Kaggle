{"cell_type":{"883339c5":"code","37e34438":"code","cb6cc59f":"code","7e3259cb":"code","9bde6345":"code","3e560021":"code","ae5b9b46":"code","6de9034f":"code","3e9df4e0":"code","40561db3":"code","031f7f6f":"code","799fe0a0":"code","51a5c7bd":"code","cc4590db":"code","a20bb321":"code","07a5763b":"code","b462d562":"code","ce96ab15":"code","b3942562":"code","8e3ac2e5":"code","45059bbe":"code","036ea044":"code","fa7f55b2":"code","003f607f":"code","e6d329d6":"code","4717db18":"code","fb7ccdca":"code","1d163e5b":"code","a29534f9":"code","29496de0":"code","a7553603":"markdown","0d48510e":"markdown"},"source":{"883339c5":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n","37e34438":"train_data = pd.read_csv(\"..\/input\/train_loan_data.csv\")","cb6cc59f":"train_data.shape","7e3259cb":"target_data = train_data.drop(['Loan_Status'], axis=1)","9bde6345":"train_data.head()","3e560021":"test_data = pd.read_csv(\"..\/input\/test_loan_data.csv\")","ae5b9b46":"test_data.head()","6de9034f":"test_data.columns","3e9df4e0":"combine = [train_data, test_data]\nprint(train_data.info())\nprint(\"-\"*40)\nprint(test_data.info())\n\nfor column in train_data[['Gender', 'Married', 'Dependents', 'Self_Employed', 'LoanAmount', 'Loan_Amount_Term','Credit_History']]:\n    train_data[column].fillna(train_data[column].mode()[0], inplace=True)","40561db3":"train_data.describe()","031f7f6f":"train_data.describe(include=['O'])","799fe0a0":"train_data.head()","51a5c7bd":"# creating a dict file  \ngender = {'Male': 1,'Female': 0} \nmarried = {'Yes': 1, 'No': 0}\neducation = {'Graduate' : 1, 'Not Graduate' : 0}\nself_employed = {'Yes' : 1, 'No' : 0}\nloan_status = {'Y' : 1, 'N' : 0}\nproperty_area = {'Urban' : 1, 'Rural' : 2, 'Semiurban' : 3}\n  \n# traversing through dataframe \n# Gender, Married, Dependents, Education, Self_Employed, Property_Area column and writing \n# values where key matches \ntrain_data.Gender = [gender[item] for item in train_data.Gender]\ntrain_data.Married = [married[item] for item in train_data.Married] \ntrain_data.Education = [education[item] for item in train_data.Education] \ntrain_data.Self_Employed = [self_employed[item] for item in train_data.Self_Employed] \ntrain_data.Loan_Status = [loan_status[item] for item in train_data.Loan_Status] \ntrain_data.Property_Area = [property_area[item] for item in train_data.Property_Area] \n","cc4590db":"target = train_data['Loan_Status']","a20bb321":"print(target)","07a5763b":"embarked_dummies = pd.get_dummies(train_data.Property_Area, prefix='Property_Area')\npd.concat([train_data, embarked_dummies], axis=1)\n","b462d562":"train_data = train_data.replace(to_replace =\"3+\", \n                 value =\"4\") ","ce96ab15":"train_data.head()","b3942562":"train_data = train_data.drop(['Loan_ID'], axis=1)","8e3ac2e5":"train_data.head()","45059bbe":"corr = train_data.corr()\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","036ea044":"train_data.describe()","fa7f55b2":"combine = [train_data]\nfor dataset in combine:\n    dataset.loc[ dataset['ApplicantIncome'] <= 150.0, 'ApplicantIncome'] = 0\n    dataset.loc[(dataset['ApplicantIncome'] > 150.0) & (dataset['ApplicantIncome'] <= 2877.50), 'ApplicantIncome'] = 1\n    dataset.loc[(dataset['ApplicantIncome'] > 2877.50) & (dataset['ApplicantIncome'] <= 3812.50), 'ApplicantIncome']   = 2\n    dataset.loc[ dataset['ApplicantIncome'] > 3812.50, 'ApplicantIncome'] = 3\n    dataset['ApplicantIncome'] = dataset['ApplicantIncome'].astype(int)\n    \ntrain_data.head(10)","003f607f":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(train_data, target, test_size=0.25, random_state=42)\n","e6d329d6":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","4717db18":"# Support Vector Machines\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc\n    \n","fb7ccdca":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","1d163e5b":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","a29534f9":"perceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","29496de0":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","a7553603":"# Next Things yet to come","0d48510e":"# Lets Do Some Exploratory Data Analysis"}}