{"cell_type":{"536da432":"code","fa34c8b1":"code","50d717c1":"code","2f9a6580":"code","8cd21606":"code","cb5e161c":"code","0f66c707":"code","bdbbaeda":"code","2cc0e172":"code","0ff3e9ef":"code","78303fdc":"code","8f9532d8":"code","4b5d6237":"code","526e5685":"code","453d5038":"code","7883d281":"code","e0092c62":"markdown"},"source":{"536da432":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fa34c8b1":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout,BatchNormalization,AveragePooling2D,BatchNormalization\nfrom sklearn.utils import shuffle\nfrom tensorflow.keras.optimizers import Adam\nimport random","50d717c1":"train=pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\nvalidation=pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/Dig-MNIST.csv')","2f9a6580":"def prepare_data(features,target=None):\n    '''\n        here is a helper function to resize training data to (28,28,1)\n        and to categorize the target variable\n    '''\n    #shuffle data first \n    features,target = shuffle(features,target)\n    x = features.values.reshape((len(features),28,28,1))\n    y = to_categorical(target)\n    print(y.shape)\n    # normalize\n    x = x\/255.0\n    return (x,y)\n   \n    ","8cd21606":"X,y = train.loc[:,train.columns!='label'],train.label\nX_val,y_val = validation.loc[:,validation.columns!='label'],validation.label","cb5e161c":"print(\"We have {} training examples and {} validation examples.\".format(X.shape[0],X_val.shape[0]))\nprint(\"X_train: {} | y_train: {} |\\nX_val: {} | y_val: {}\".format(X.shape,y.shape,X_val.shape,y_val.shape))","0f66c707":"x_train,y_train = prepare_data(X,y)\nx_val,y_val = prepare_data(X_val,y_val)","bdbbaeda":"print(\"X_train: {} | y_train: {} |\\nX_val: {} | y_val: {}\".format(x_train.shape,y_train.shape,x_val.shape,y_val.shape))","2cc0e172":"model = Sequential()\n\n# LeNet\n# Input Image Dimensionns : 28x28x1\n\n# 1. Conv2D - kernel : 11x11x96. strides=4,4;padding-valid\nmodel.add(Conv2D(filters = 6, kernel_size = (5,5),strides=(1, 1),padding = 'valid', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\n# 2. Average Pool  -  kernel - 2x2, strides = 2,2\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=(2,2), padding='valid'))\n\n# 3. Conv2d  -  kernel - 5x5x16, strides = 1,1\nmodel.add(Conv2D(filters=16,kernel_size=(5,5),strides=(1,1),padding='valid',activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\n# 4. Average Pool  -  kernel - 2x2, strides = 2,2\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=(2,2), padding='valid'))\n\n# # 5. Convolution - kernel - 5x5x120 ,strides = 1,1\n# model.add(Conv2D(filters=120,kernel_size=(4,4),strides=(1,1),padding='valid',activation='relu'))\n# model.add(BatchNormalization())\n\nmodel.add(Flatten())\n# 6. Fully connected layer - 84 nodes\nmodel.add(Dense(84,activation='relu'))\nmodel.add(BatchNormalization())\n\n# 7. Output layer - 10 nodes\nmodel.add(Dense(10,activation='softmax'))\n\n# Compile \noptimizer=Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999)\nmodel.compile(optimizer=optimizer,loss=['categorical_crossentropy'],metrics=['accuracy'])","0ff3e9ef":"#model.fit(x_train,y_train,epochs=10,validation_data=(x_val,y_val))\nh  = model.fit(x_val,y_val,epochs=10,validation_data=(x_train,y_train),batch_size=64)\n\n","78303fdc":"test = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\ntest_features = test.iloc[0:,test.columns!='id']\ntest_features = test_features.values.reshape((len(test_features),28,28,1))\n","8f9532d8":"test_features = test_features.astype('float')","4b5d6237":"test_features = test_features\/255.0","526e5685":"predictions = model.predict(test_features)\npredictions = np.argmax(predictions,axis=1)\npredictions.shape","453d5038":"final_df = pd.DataFrame({'id':test['id'],'label':predictions})\nfinal_df.head()","7883d281":"final_df.to_csv('submission.csv',index=False)","e0092c62":"# Train"}}