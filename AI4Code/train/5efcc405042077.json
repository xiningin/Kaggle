{"cell_type":{"a2dea302":"code","c1112944":"code","1a099547":"code","e1cc975b":"code","1641a8a1":"code","9e17327a":"code","9d16a2bd":"code","0335947a":"code","3d01cda6":"code","5f7d67e3":"code","3ce90625":"code","c2b01ee8":"code","6c7cba26":"code","337aec72":"code","235409f8":"code","a882de8c":"code","f5e27997":"code","e73ad6a6":"code","6cff24f7":"code","99d38738":"code","3e1d609a":"code","36898d65":"markdown","8a31fb05":"markdown","176fc1d7":"markdown","3b2a9fb5":"markdown","6a37990b":"markdown","c9862516":"markdown","04cd1f63":"markdown","0ad3b683":"markdown","9abc4bf5":"markdown","1068bce0":"markdown","023564bc":"markdown","fd2c52ad":"markdown","2916e2ac":"markdown","3b820b96":"markdown","04a887b3":"markdown","a59868f3":"markdown","4bef31d8":"markdown","2703f81c":"markdown"},"source":{"a2dea302":"from keras.datasets import fashion_mnist, mnist\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Dropout\nfrom keras.models import Model\n\nimport os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20, 10\n\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image\n\nfrom keras.preprocessing.image import load_img\nfrom keras import Model\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.models import load_model\nfrom keras.optimizers import Adam\nfrom keras.utils.vis_utils import plot_model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Input, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate, Dropout\n\n# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image","c1112944":"# get the data\nfilname = '..\/input\/facial-expression\/fer2013\/fer2013.csv'\n\n#different labels of images(not useful known about for current problem)\nlabel_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n\n#different features\/columns names\nnames=['emotion','pixels','usage']\n\n#Reading data in dataframe\ndf=pd.read_csv('..\/input\/facial-expression\/fer2013\/fer2013.csv',names=names, na_filter=False)\n","1a099547":"df.head()","e1cc975b":"im = df['pixels']\nim.head()","1641a8a1":"#reading data and labels from dataset and appending in list\n\ndef getData(filname):\n    # images are 48x48\n    # N = 35887\n    Y = []\n    X = []\n    first = True\n    for line in open(filname):\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    X, Y = np.array(X), np.array(Y)\n    return X, Y","9e17327a":"a = 'i am, hapy'\na.split(',')","9d16a2bd":"#extracting data from dataset\nX, Y = getData(filname)\nnum_class = len(set(Y))\n#print(num_class)","0335947a":"X","3d01cda6":"X.shape","5f7d67e3":"# keras with tensorflow backend\nN, D = X.shape\n\n#reshaping the dataset\nX = X.reshape(N, 48, 48, 1)","3ce90625":"X.shape","c2b01ee8":"#splitting data in train, test\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42, shuffle=True)","6c7cba26":"x_train.shape","337aec72":"n=10","235409f8":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_train[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","a882de8c":"#Normalizing the images\nx_train = x_train.astype('float32') \/ 255.\nx_test = x_test.astype('float32') \/ 255.","f5e27997":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_train[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","e73ad6a6":"#reshaping the images\nx_train = np.reshape(x_train, (len(x_train), 48, 48, 1))  # adapt this if using `channels_first` image data format\nx_test = np.reshape(x_test, (len(x_test), 48, 48, 1))  # adapt this if using `channels_first` image data format\n\n\n#adding noise in data\nnoise_factor = 0.1\n\nx_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) \nx_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) ","6cff24f7":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_train_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","99d38738":"#clipping put data near to 0--->0 aand data near to 1-->1\nx_train_noisy = np.clip(x_train_noisy, 0., 1.)\nx_test_noisy = np.clip(x_test_noisy, 0., 1.)","3e1d609a":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_train_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","36898d65":"# Image after adding Noise","8a31fb05":"# Data Preprocessing","176fc1d7":"# Later Part","3b2a9fb5":"# Data Before reshaping","6a37990b":"# Data After Reshaping","c9862516":"**0 to 1 ko range ma vaye thik6...tara tyo range bahek aru ma gayo vanee chai tei ramge ma rakne**","04cd1f63":"# Extracting Data and splitting train and test ","0ad3b683":"## Reshaping images","9abc4bf5":"**The important thing is that everytime you use 42, you will always get the same output the first time you make the split. This is useful if you want reproducible results, for example in the documentation, so that everybody can consistently see the same numbers when they run the examples.**","1068bce0":"# Image after cliping","023564bc":"# Image After Normalizing IMAGE","fd2c52ad":"* Image denoising is to remove noise from a noisy image, so as to restore the true image\n* In this notebook FER2013 dataset is used which contains approx 35 thousand images of 7 different emotions\n* Image is grayscale of size 48*48","2916e2ac":"**Form of reshape-->(Number of images,height, width, number of channels)**","3b820b96":"# Importing libraries","04a887b3":"## Extract data from CSV","a59868f3":"**I am trying to use the concept:**\n* adding skip connections that allow feature representations to pass through the bottleneck in autoencoder\n* If you find this useful, do upvote","4bef31d8":"## Adding labels and images(pixel values) in respective array","2703f81c":"# Image before preprocessing"}}