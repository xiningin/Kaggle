{"cell_type":{"c123ed0e":"code","09a36cd7":"code","9c3f8229":"code","1bdc1623":"code","2a19099e":"code","a1522d1a":"code","61a52c57":"code","19f028b4":"code","b29c8a9d":"code","b4f0a658":"code","8a2cad4d":"code","7d14b2e7":"code","96c7000f":"code","ffc6981e":"code","c4326264":"code","8a77f11d":"code","c59d283d":"code","8ea28828":"code","f20bdd19":"code","4d0c84cc":"code","11ca5408":"code","472429a4":"code","c5c31592":"code","8742e72a":"code","7759ecab":"code","8a296c6e":"code","39b68f8c":"code","2741a497":"code","248b8c12":"code","c654e675":"code","0521886b":"code","0eb47481":"code","c1adcd73":"code","dd2db905":"code","72dda978":"code","ec506e33":"code","48b82b4a":"code","5bf1f447":"code","e351aea1":"code","a76ad45d":"code","5117addd":"code","45125b6e":"code","600ed504":"code","48102f12":"code","e9ed6ab8":"code","2257471f":"code","456ee968":"code","3ae13e95":"code","45a5d964":"code","f3598f9f":"code","2aa15693":"code","fdd5b9dd":"code","00b75b35":"code","8806ed69":"code","9f04ffe0":"code","eee062e2":"code","52969f0f":"code","678051b5":"code","8c6b1588":"code","05be827c":"code","e54dc873":"code","7b456877":"markdown","c8550160":"markdown","46415e7d":"markdown","83cfc71c":"markdown","3272144c":"markdown","437e4ff3":"markdown","2e9c434d":"markdown","97b34cce":"markdown","67aae254":"markdown","a8ccbb62":"markdown","f52d5158":"markdown","b4795706":"markdown","810126a2":"markdown","487b0ace":"markdown","ba6a4365":"markdown","cffeb11a":"markdown","d6cde543":"markdown","d175c443":"markdown","dd2064b1":"markdown","8e83cace":"markdown","fc78f3df":"markdown","59b91171":"markdown","7da150b4":"markdown","ae76e106":"markdown","d8917d48":"markdown","800fee02":"markdown","002b8471":"markdown","1d6ffca3":"markdown","0268ff13":"markdown","188a39a2":"markdown","da5f0f73":"markdown","ae037804":"markdown","5c0e49f8":"markdown","1226d37b":"markdown","88f655fa":"markdown","e31f9a91":"markdown","5514cd84":"markdown","387cebb4":"markdown","9ca4df0d":"markdown","f013c082":"markdown","240f6ff1":"markdown","01c8cb7a":"markdown","e9e5df6e":"markdown","a7f99b8e":"markdown","fc8e970c":"markdown","c289bc6f":"markdown","0bdac898":"markdown","dad3fa4f":"markdown","f5f47682":"markdown","3a038845":"markdown","b27178bc":"markdown","f999cab4":"markdown","91f10379":"markdown","ea2ae78c":"markdown","4be3cd65":"markdown","e133b916":"markdown","1b33b0e8":"markdown","3e9299f9":"markdown"},"source":{"c123ed0e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt","09a36cd7":"from sklearn.linear_model import (\n    ElasticNet,\n    ElasticNetCV,\n    Lasso,\n    LassoCV,\n    LinearRegression,\n    LogisticRegression,\n    Ridge,\n)\n\nfrom sklearn.ensemble import (\n    AdaBoostClassifier,\n    GradientBoostingClassifier,\n    GradientBoostingRegressor,\n    RandomForestClassifier,\n    RandomForestRegressor,\n    VotingClassifier,\n)\n\nfrom sklearn.model_selection import (\n    GridSearchCV,\n    KFold,\n    RandomizedSearchCV,\n    cross_val_score,\n    train_test_split,\n)","9c3f8229":"import seaborn as sns\nfrom sklearn.base import BaseEstimator\nfrom xgboost import XGBClassifier, XGBRegressor\nimport hyperopt as hp\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe","1bdc1623":"#Import Date\nxtrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")\nxtest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\nxsubmission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")\n# view shape of test and train data\nprint(xtrain.shape)\nprint(xtest.shape)","2a19099e":"# view head of train data\nxtrain.head(10)","a1522d1a":"# view head of test data\nxtest.head(10)","61a52c57":"# view head of submission data\nxsubmission.head(10)","19f028b4":"# date wise value count\nxtrain['Date'].value_counts()","b29c8a9d":"# create ConfirmedCasesgroup by Province_State\nstatevalue = xtrain.groupby('Province_State').max().ConfirmedCases","b4f0a658":"# view top state conformed cases in a barplot\ntop_states = statevalue.sort_values(ascending = False).head(10)\nsns.barplot(x=top_states.index, y=top_states.values)\nplt.xticks(rotation = 'vertical')","8a2cad4d":"# make data as integer\nxtrain.ConfirmedCases = xtrain.ConfirmedCases.astype('int64')\nxtrain.Fatalities = xtrain.Fatalities.astype('int64')","7d14b2e7":"# Date wise confirm case view in an lineplot\nplt.figure(figsize=(15,6))\nsns.lineplot(x=xtrain.Date,y=xtrain.ConfirmedCases,markers=True,style=True)\nplt.xticks(rotation = 'vertical')","96c7000f":"# Date wise Fatalities view in an lineplot\nplt.figure(figsize=(15,6))\nsns.lineplot(x=xtrain.Date,y=xtrain.Fatalities,markers=True,style=True)\nplt.xticks(rotation = 'vertical')","ffc6981e":"# ConfirmedCases and Fatalities column groupby Country Region\ndf_xtrain = xtrain.groupby(['Country_Region'])[['ConfirmedCases', 'Fatalities']].max()\nprint(df_xtrain.sort_values(by=['ConfirmedCases','Fatalities'],ascending=False).head(10))","c4326264":"# view countrywise ConfirmedCases and Fatalities in a plot\nfig,ax = plt.subplots()\nfig.set_figheight(10)\nfig.set_figwidth(40)\nax.plot(df_xtrain[:29].index.values,df_xtrain[:29].ConfirmedCases, color=\"red\", marker=\"o\")\nax.set_xlabel(\"Countries\",fontsize=24)\nax.set_ylabel(\"Confirmed Cases\",color=\"red\",fontsize=24)\nax.tick_params(axis = 'both', which = 'major', labelsize = 24,labelrotation=90)\nax2=ax.twinx()\nax2.plot(df_xtrain[:29].index.values,df_xtrain[:29].Fatalities,color=\"blue\",marker=\"o\")\nax2.set_ylabel(\"Fatalities\",color=\"blue\",fontsize=24)\nax2.tick_params(axis = 'both', which = 'major', labelsize = 24)\nplt.show()","8a77f11d":"# ConfirmedCases and Fatalities data Analysis Exclude China and view in two Plot\nconfirmed_total_date_noChina = xtrain[xtrain['Country_Region']!='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_noChina = xtrain[xtrain['Country_Region']!='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_noChina = confirmed_total_date_noChina.join(fatalities_total_date_noChina)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))\ntotal_date_noChina.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases excluding China\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_noChina.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases excluding China\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","c59d283d":"#ConfirmedCases and Fatalities data Analysis and Visualization for China\nconfirmed_total_date_China = xtrain[xtrain['Country_Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_China = xtrain[xtrain['Country_Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_China = confirmed_total_date_China.join(fatalities_total_date_China)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))\ntotal_date_China.plot(ax=ax1)\nax1.set_title(\"China confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_China.plot(ax=ax2, color='orange')\nax2.set_title(\"China Fatalities cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","8ea28828":"#For Itally\nconfirmed_total_date_Italy = xtrain[xtrain['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = xtrain[xtrain['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n#For Spain\nconfirmed_total_date_Spain = xtrain[xtrain['Country_Region']=='Spain'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = xtrain[xtrain['Country_Region']=='Spain'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\ntotal_date_Italy.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_Spain.plot(ax=plt.gca(), title='Spain')\nplt.ylabel(\"Confirmed infection cases\", size=13)","f20bdd19":"#For UK\nconfirmed_total_date_UK = xtrain[xtrain['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = xtrain[xtrain['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n\n#For Singapore\nconfirmed_total_date_Singapore = xtrain[xtrain['Country_Region']=='Singapore'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = xtrain[xtrain['Country_Region']=='Singapore'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\ntotal_date_UK.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_Singapore.plot(ax=plt.gca(), title='Singapore')\nplt.ylabel(\"Confirmed infection cases\", size=13)","4d0c84cc":"#For Australia\nconfirmed_total_date_Australia = xtrain[xtrain['Country_Region']=='Australia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = xtrain[xtrain['Country_Region']=='Australia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n#For Bangladesh\nconfirmed_total_date_Bangladesh = xtrain[xtrain['Country_Region']=='Bangladesh'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Bangladesh = xtrain[xtrain['Country_Region']=='Bangladesh'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Bangladesh = confirmed_total_date_Bangladesh.join(fatalities_total_date_Bangladesh)\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\ntotal_date_Australia.plot(ax=plt.gca(), title='Australia')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_Bangladesh.plot(ax=plt.gca(), title='Bangladesh')\nplt.ylabel(\"Confirmed infection cases\", size=13)","11ca5408":"pop_italy = 60486683.\npop_spain = 46749696.\npop_UK = 67784927.\npop_singapore = 5837230.\n\ntotal_date_Italy.ConfirmedCases = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Italy.Fatalities = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Spain.ConfirmedCases = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_Spain.Fatalities = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_UK.ConfirmedCases = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_UK.Fatalities = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_Singapore.ConfirmedCases = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\ntotal_date_Singapore.Fatalities = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_Italy.ConfirmedCases.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.06)\n\nplt.subplot(2, 2, 2)\ntotal_date_Spain.ConfirmedCases.plot(ax=plt.gca(), title='Spain')\nplt.ylim(0, 0.06)\n\nplt.subplot(2, 2, 3)\ntotal_date_UK.ConfirmedCases.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.005)\n\nplt.subplot(2, 2, 4)\ntotal_date_Singapore.ConfirmedCases.plot(ax=plt.gca(), title='Singapore')\nplt.ylim(0, 0.005)","472429a4":"# For Itally\nconfirmed_total_date_Italy = xtrain[(xtrain['Country_Region']=='Italy') & xtrain['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = xtrain[(xtrain['Country_Region']=='Italy') & xtrain['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n# For Spain\nconfirmed_total_date_Spain = xtrain[(xtrain['Country_Region']=='Spain') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = xtrain[(xtrain['Country_Region']=='Spain') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\n# For UK\nconfirmed_total_date_UK = xtrain[(xtrain['Country_Region']=='United Kingdom') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = xtrain[(xtrain['Country_Region']=='United Kingdom') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n# For Australia\nconfirmed_total_date_Australia = xtrain[(xtrain['Country_Region']=='Australia') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = xtrain[(xtrain['Country_Region']=='Australia') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n# For Singapore\nconfirmed_total_date_Singapore = xtrain[(xtrain['Country_Region']=='Singapore') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = xtrain[(xtrain['Country_Region']=='Singapore') & (xtrain['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\nitaly = [i for i in total_date_Italy.ConfirmedCases['sum'].values]\nitaly_30 = italy[0:50] \nspain = [i for i in total_date_Spain.ConfirmedCases['sum'].values]\nspain_30 = spain[0:50] \nUK = [i for i in total_date_UK.ConfirmedCases['sum'].values]\nUK_30 = UK[0:50] \nsingapore = [i for i in total_date_Singapore.ConfirmedCases['sum'].values]\nsingapore_30 = singapore[0:50] ","c5c31592":"# Plots\nplt.figure(figsize=(12,6))\nplt.plot(italy_30)\nplt.plot(spain_30)\nplt.plot(UK_30)\nplt.plot(singapore_30)\nplt.legend([\"Italy\", \"Spain\", \"UK\", \"Singapore\"], loc='upper left')\nplt.title(\"COVID-19 infections from the first confirmed case\", size=15)\nplt.xlabel(\"Days\", size=13)\nplt.ylabel(\"Infected cases\", size=13)\nplt.ylim(0, 60000)\nplt.show()","8742e72a":"# Check if there have any null value\nxtrain.isnull().sum()","7759ecab":"# CHANGE TO PD.DATETIME\nxtrain.Date = pd.to_datetime(xtrain.Date, infer_datetime_format=True)\nxtest.Date = pd.to_datetime(xtest.Date, infer_datetime_format=True)","8a296c6e":"# CONCISING THE TRAIN DATASET TO 18TH MARCH 2020.\nMIN_TEST_DATE = xtest.Date.min()\nxtrain = xtrain.loc[xtrain.Date < MIN_TEST_DATE, :]","39b68f8c":"# RESETTING INDEX\nxtrain.reset_index()","2741a497":"# FILLING MISSING VALUES\nxtrain.fillna(\"\", inplace=True)\nxtest.fillna(\"\", inplace=True)","248b8c12":"# CREATING NEW REGION COLUMN\nxtrain[\"Region\"] = xtrain[\"Country_Region\"] + xtrain[\"Province_State\"]\nxtest[\"Region\"] = xtest[\"Country_Region\"] + xtest[\"Province_State\"]","c654e675":"# DROPPING COUNTRY REGION AND PROVINCE STATE\nxtrain.drop(['Country_Region','Province_State'],axis=1,inplace=True)\nxtest.drop(['Country_Region','Province_State'],axis=1,inplace=True)","0521886b":"# CONVERTING DATE COLUMN TO INTEGER\nxtrain.loc[:, 'Date'] = xtrain.Date.dt.strftime(\"%m%d\")\nxtest.loc[:, 'Date'] = xtest.Date.dt.strftime(\"%m%d\")","0eb47481":"# Region wise Confirmed Cases in LinePlot\nsns.lineplot(data=xtrain, x=\"Date\", y=\"ConfirmedCases\", hue=\"Region\")\nplt.show()","c1adcd73":"#  Region wise Fatalities in Line Plot.\nsns.lineplot(data=xtrain, x=\"Date\", y=\"Fatalities\", hue=\"Region\")\nplt.show()","dd2db905":"# CREATING X AND Y for Train Dataset\nX1 = xtrain.drop([\"ConfirmedCases\", \"Fatalities\"], axis=1)\nX2 = xtrain.drop([\"ConfirmedCases\", \"Fatalities\"], axis=1)\ny1 = xtrain[\"ConfirmedCases\"]\ny2 = xtrain[\"Fatalities\"]","72dda978":"# Create TEST 1 AND TEST 2 for Test dataset\ntest_1 = xtest.copy()\ntest_2 = xtest.copy()","ec506e33":"# FUNCTION FOR MEAN ENCODING\nclass MeanEncoding(BaseEstimator):\n\n    def __init__(self, feature, C=0.1):\n        self.C = C\n        self.feature = feature\n\n    def fit(self, X_train, y_train):\n\n        df = pd.DataFrame(\n            {\"feature\": X_train[self.feature], \"target\": y_train}\n        ).dropna()\n\n        self.global_mean = df.target.mean()\n        mean = df.groupby(\"feature\").target.mean()\n        size = df.groupby(\"feature\").target.size()\n\n        self.encoding = (self.global_mean * self.C + mean * size) \/ (self.C + size)\n\n    def transform(self, X_test):\n\n        X_test[self.feature] = (\n            X_test[self.feature].map(self.encoding).fillna(self.global_mean).values\n        )\n\n        return X_test\n\n    def fit_transform(self, X_train, y_train):\n\n        df = pd.DataFrame(\n            {\"feature\": X_train[self.feature], \"target\": y_train}\n        ).dropna()\n\n        self.global_mean = df.target.mean()\n        mean = df.groupby(\"feature\").target.mean()\n        size = df.groupby(\"feature\").target.size()\n        self.encoding = (self.global_mean * self.C + mean * size) \/ (self.C + size)\n\n        X_train[self.feature] = (\n            X_train[self.feature].map(self.encoding).fillna(self.global_mean).values\n        )\n\n        return X_train","48b82b4a":"for f2 in [\"Region\"]:\n    me2 = MeanEncoding(f2, C=0.01 * len(X2[f2].unique()))\n    me2.fit(X2, y2)\n    X2 = me2.transform(X2)\n    test_2 = me2.transform(test_2)","5bf1f447":"for f1 in [\"Region\"]:\n    me1 = MeanEncoding(f1, C=0.01 * len(X1[f1].unique()))\n    me1.fit(X1, y1)\n    X1 = me1.transform(X1)\n    test_1 = me1.transform(test_1)","e351aea1":"# View Test_1\ntest_1","a76ad45d":"# View Test_2\ntest_2","5117addd":"# Load some Basic Library\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection\nimport numpy as np","45125b6e":"# FUNCTION FOR COMPARING DIFFERENT REGRESSORS\ndef algorithim_boxplot_comparison(\n    X, y, algo_list=[], random_state=3, scoring=\"r2\", n_splits=10\n):\n    \n    results = []\n    names = []\n    for algo_name, algo_model in algo_list:\n        kfold = model_selection.KFold(\n            shuffle=True, n_splits=n_splits, random_state=random_state\n        )\n        cv_results = model_selection.cross_val_score(\n            algo_model, X, y, cv=kfold, scoring=scoring\n        )\n        results.append(cv_results)\n        names.append(algo_name)\n        msg = \"%s: %s : (%f) %s : (%f) %s : (%f)\" % (\n            algo_name,\n            \"median\",\n            np.median(cv_results),\n            \"mean\",\n            np.mean(cv_results),\n            \"variance\",\n            cv_results.var(ddof=1),\n        )\n        print(msg)\n    # boxplot algorithm comparison\n    fig = plt.figure()\n    fig.suptitle(\"Algorithm Comparison\")\n    ax = fig.add_subplot(111)\n    plt.boxplot(results)\n    ax.set_xticklabels(names)\n    plt.show()","600ed504":"# REGRESSORS\nlr = LinearRegression(n_jobs=-1)\nrfr = RandomForestRegressor(random_state=96, n_jobs=-1)\ngbr = GradientBoostingRegressor(random_state=96)\nxgbr = XGBRegressor()","48102f12":"# APPENDING THE REGRESSORS IN A LIST\nmodels = []\nmodels.append(('lr',lr))\nmodels.append(('rfr',rfr))\nmodels.append(('gbr',gbr))\nmodels.append(('xgbr',xgbr))","e9ed6ab8":"algorithim_boxplot_comparison(\n    X1, y1, models, random_state=96, scoring=\"neg_root_mean_squared_error\", n_splits=5\n)","2257471f":"# HYPEROPT\ndef auc_model(params):\n    params = {\n        \"n_estimators\": int(params[\"n_estimators\"]),\n        \"max_features\": int(params[\"max_features\"]),\n        \"min_samples_leaf\": int(params[\"min_samples_leaf\"]),\n        \"min_samples_split\": int(params[\"min_samples_split\"]),\n    }\n    clf = RandomForestRegressor(**params, random_state=96, n_jobs=-1)\n    return cross_val_score(\n        clf, X1, y1, cv=3, scoring=\"neg_mean_squared_log_error\"\n    ).mean()\n\n\nparams_space = {\n    \"n_estimators\": hp.quniform(\"n_estimators\", 0, 300, 50),\n    \"max_features\": hp.quniform(\"max_features\", 1, 3, 1),\n    \"min_samples_leaf\": hp.quniform(\"min_samples_leaf\", 1, 50, 1),\n    \"min_samples_split\": hp.quniform(\"min_samples_split\", 1, 50, 1),\n}\nbest = 0\n\n\ndef f(params):\n    global best\n    auc = auc_model(params)\n    if auc > best:\n        print(\"New Best\", best, params)\n    return {\"loss\": -auc, \"status\": STATUS_OK}\n\n\ntrials = Trials()\nbest = fmin(f, params_space, algo=tpe.suggest, max_evals=200, trials=trials)\nprint(\"best:\\n\", best)","456ee968":"# HYPEROPT\ndef auc_model(params):\n    params = {\n        \"n_estimators\": int(params[\"n_estimators\"]),\n        \"max_features\": int(params[\"max_features\"]),\n        \"min_samples_leaf\": int(params[\"min_samples_leaf\"]),\n        \"min_samples_split\": int(params[\"min_samples_split\"]),\n    }\n    clf = RandomForestRegressor(**params, random_state=96, n_jobs=-1)\n    return cross_val_score(\n        clf, X2, y2, cv=3, scoring=\"neg_mean_squared_log_error\"\n    ).mean()\n\n\nparams_space = {\n    \"n_estimators\": hp.quniform(\"n_estimators\", 0, 300, 50),\n    \"max_features\": hp.quniform(\"max_features\", 1, 3, 1),\n    \"min_samples_leaf\": hp.quniform(\"min_samples_leaf\", 1, 50, 1),\n    \"min_samples_split\": hp.quniform(\"min_samples_split\", 1, 50, 1),\n}\nbest = 0\n\n\ndef f(params):\n    global best\n    auc = auc_model(params)\n    if auc > best:\n        print(\"New Best\", best, params)\n    return {\"loss\": -auc, \"status\": STATUS_OK}\n\n\ntrials = Trials()\nbest = fmin(f, params_space, algo=tpe.suggest, max_evals=200, trials=trials)\nprint(\"best:\\n\", best)","3ae13e95":"# RANDOMFORESTREGRESSOR FOR CONFIRMEDCASUALTIES\nrfr1 = RandomForestRegressor(\n    max_features=3,\n    min_samples_leaf=26,\n    min_samples_split=31,\n    n_estimators=200,\n    random_state=96,\n    n_jobs=-1,\n)","45a5d964":"# RANDOMFORESTREGRESSOR FOR FATALITIES\nrfr2 = RandomForestRegressor(\n    max_features=3,\n    min_samples_leaf=17,\n    min_samples_split=17,\n    n_estimators=100,\n    random_state=96,\n    n_jobs=-1,\n)","f3598f9f":"# FITTING RANDOMFORESTREGRESSOR FOR CONFIRMEDCASUALTIES\nrfr1.fit(X1, y1)","2aa15693":"# PREDICTING CONFIRMEDCASUALTIES using RANDOM FOREST REGRESSOR\ny_n_1 = rfr1.predict(test_1)","fdd5b9dd":"# Fit CONFIRMEDCASUALTIES using K neareat neighbour algorithm Classifier\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 4, metric = 'braycurtis', p = 1)\nclassifier.fit(X1, y1)","00b75b35":"### Predict CONFIRMEDCASUALTIES using K neareat neighbour algorithm Classifier\ny_pred1 = classifier.predict(X1)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y1, y_pred1)\nfrom sklearn.metrics import accuracy_score \nprint( 'Accuracy Score confirmed cases :',accuracy_score(y1,y_pred1)*100)","8806ed69":"# FITTING RANDOMFORESTREGRESSOR FOR FATALITIES\nrfr2.fit(X2, y2)","9f04ffe0":"# PREDICTING FATALITIES\ny_n_2 = rfr2.predict(test_2)","eee062e2":"# ### Fit  Fatalities using K neareat neighbour algorithm Classifier\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 4, metric = 'braycurtis', p = 1)\nclassifier.fit(X2, y2)","52969f0f":"### Predict Fatalities using K neareat neighbour algorithm Classifier\ny_pred2 = classifier.predict(X2)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y2, y_pred2)\nfrom sklearn.metrics import accuracy_score \nprint( 'Accuracy Score confirmed cases :',accuracy_score(y2,y_pred2)*100)","678051b5":"# ADDING CONFIRMEDCASES\nxsubmission.ConfirmedCases = round(pd.DataFrame(y_n_1))","8c6b1588":"\n# ADDING FATALITIES\nxsubmission.Fatalities = round(pd.DataFrame(y_n_2))","05be827c":"# View submission data\nxsubmission","e54dc873":"# Save Date to submission file\nxsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file create sucessfully\")","7b456877":"### FITTING FATALITIES DATA USING RANDOMFORESTREGRESSOR ALGORITHM","c8550160":"#### Since China was the initial infected country, the COVID-19 behavior is different from the rest of the world. The medical system was not prepared for the pandemic, in fact no one was aware of the virus until several cases were reported. Moreover, China government took strong contention measures in a considerable short period of time and, while the virus is widely spread, they have been able to control the increasing of the infections.","46415e7d":"##### Fill up missing value in test and train dataset","83cfc71c":"### View date wise Fatalities in a line plot. In this plow show that every day Fatalities increased rapidy.","3272144c":"### Predict Fatalities using K neareat neighbour algorithm Classifier. I have got 98% accuracy","437e4ff3":"### Predict FATALITIES DATA USING RANDOMFORESTREGRESSOR ALGORITHM","2e9c434d":"**In Mean Encoding we take the number of labels into account along with the target variable to encode the labels into machine comprehensible values**","97b34cce":"### FITTING using RANDOM FOREST REGRESSOR algorithm FOR CONFIRMEDCASUALTIES","67aae254":"** TODO : USE MORE ADVANCED HYPERPARAMTER TUNING METHODS LIKE OPTUNA, KEARS-TUNER, HPBANDSTER,TUNE**","a8ccbb62":"#### View X1 and Y1 in an BoxPlot","f52d5158":"# ----- COVID19-Global-Forecasting-Week-2 --- Data Analysis-----","b4795706":"#### In Province_State cplumn there heve 11830 row null value","810126a2":"Add Fatalities into sumbission data","487b0ace":"**To compare metric of different algorithims Paramters-\n       algo_list : a list conataining algorithim models like random forest, decision trees etc.\n       X : dataframe without Target variable\n       y : dataframe with only Target variable\n       random_state : The seed of randomness. Default is 3\n       n_splits : Number of splits used. Default is 3\n       ( Default changes from organization to organization)\n       Returns-\n       median accuracy and the standard deviation accuracy.\n       Box Plot of Acuuracy**","ba6a4365":"# Import all data and view Train and Test data shape ","cffeb11a":"## ConfirmedCases and Fatalities data Analysis and Visualization for Italy and Spain","d6cde543":"Also look at my third weed challenge [https:\/\/www.kaggle.com\/mahmudds\/covid19-global-forecasting-week-3]","d175c443":"### Predict CONFIRMEDCASUALTIES using K neareat neighbour algorithm Classifier","dd2064b1":"### View Region wise Confirmed Cases in a Line Plot.","8e83cace":"#### Fractional Data Analysis acordint to total population of each country","fc78f3df":"#### Creating a column name \"Region\" for test and train dataser","59b91171":"### View First 10 row of Training Data Set","7da150b4":"Since details of the initial breakthrough strongly interfere with the results, it's recomended to analyze China independently. Let's first see the results without China. Both ConfirmedCases and Fatalities are increase day by day.","ae76e106":"## ConfirmedCases and Fatalities data Analysis and Visualization for China","d8917d48":"##### Count Date wise Total Data. In this Data Set we can see all Date there have same quantity of records.","800fee02":"**ConfirmedCases and Fatalities for Australia and Bangladesh are increasing day by day but not like other country. Australia ConfirmedCases  more than 4000 and Fatalities average but in Bangladesh ConfirmedCases is approximately 50  and Fatalities is approximately 10.**\n","002b8471":"###  RANDOMFORESTREGRESSOR FOR CONFIRMEDCASUALTIES","1d6ffca3":"#### According to Country region groupby filtering Italy ConfirmedCases was 105792 and Fatalities was 12428, Spain ConfirmedCases 95923 and Fatalities 8464, US ConfirmedCases was 75833 and Fatalities was 1550, Germany ConfirmedCases was 71808 and Fatalities was 775, China ConfirmedCases was 67801 and Fatalities was 3187, France ConfirmedCases was 52128 and Fatalities was 3523, Iran ConfirmedCases was 44605 and Fatalities was 2898 in the Dataset. ","0268ff13":"### Fit  Fatalities using K neareat neighbour algorithm Classifier","188a39a2":"## ConfirmedCases and Fatalities data Analysis and Visualization for Australia and Bangladesh","da5f0f73":"##### DROPPING COUNTRY REGION AND PROVINCE STATE Column","ae037804":"#### Add Confirmed Cases into sumbission data","5c0e49f8":"** At the same time, UK is a unique case given that it's one of the most important countries in Europe but recently has left the European Union, which has create an effective barrier to human mobility from other countries. The fourth country we will study in this section is Singapore, since it's an asiatic island, is closer to China and its socio-economic conditions is different from the other three countries.**","1226d37b":"#### In order to compare the 4 countries, it's also interesting to see the evolution of the infections from the first confirmed case:","88f655fa":"**Reset Indexing**","e31f9a91":"### RANDOMFORESTREGRESSOR FOR FATALITIES","5514cd84":"## ConfirmedCases and Fatalities data Analysis and Visualization Exclude China","387cebb4":"### Look at the final submission data","9ca4df0d":"### Fit CONFIRMEDCASUALTIES using K neareat neighbour algorithm Classifier","f013c082":"### View Region wise Fatalities in a Line Plot.","240f6ff1":"**CONCISING THE TRAIN DATASET TO 18TH MARCH 2020**","01c8cb7a":"### PREDICTING CONFIRMEDCASUALTIES using RANDOM FOREST REGRESSOR algorithm","e9e5df6e":"# Create Train and Test Dataset","a7f99b8e":"### View First 10 row of Submission Data Set","fc8e970c":"##### Made ConfirmedCases and Fatalities date as integer","c289bc6f":"**Import sklearn for data model**","0bdac898":"#### Belgium ConfirmedCases and Fatalities is very High, second Highest ConfirmedCases and Fatalities position for Austria and Third Highest ConfirmedCases and Fatalities for Brazil","dad3fa4f":"##### View 10 Top States where most ConfirmedCases of CAVID19 in a barplot. This plot show thst most effected people in New York, secord Hunei and third New Jersey.","f5f47682":" ##### Store Confirmed Cases in statevalue using Group by Province_State","3a038845":"## ConfirmedCases and Fatalities data Analysis and Visualization for UK and Singapore","b27178bc":"****Both Italy and Spain are experiencing the larger increase in COVID-19 positives in Europe.****","f999cab4":"# Import all necessary library for analysis and Predict Data","91f10379":"**Change Date column to Datetime**","ea2ae78c":"### View First 10 row of Test Data Set","4be3cd65":"** TODO : USE MORE ADVANCED HYPERPARAMTER TUNING METHODS LIKE OPTUNA, KEARS-TUNER, HPBANDSTER,TUNE**","e133b916":"### View date wise Confirmedcases in a line plot. In this plow show that every day confirmed cases increase rapidy.","1b33b0e8":"## Save Date to submission.csv file. ","3e9299f9":"CONVERT The DATE COLUMN TO INTEGER COLUMN"}}