{"cell_type":{"1bfd189d":"code","9fef65c8":"code","8caf3f0b":"code","2f6053c7":"code","6ddfdb05":"code","7ba139a4":"code","706c21e4":"code","c9c7bee2":"code","1f115f8a":"code","f847f15f":"code","ad998da8":"code","83271d77":"code","1e8c1444":"code","94960835":"code","c025118e":"code","4c9811ad":"code","312b5e6c":"code","fd6adaf7":"code","fcffec62":"code","f14278ea":"markdown","16c3e64e":"markdown","50ff5ba0":"markdown","418fed10":"markdown","2011149e":"markdown","cd55ed15":"markdown","acb3d55d":"markdown","e6977416":"markdown","b8eb7c62":"markdown","02387ef3":"markdown","2df799e3":"markdown","ab72f92a":"markdown","ee81f778":"markdown","803d1127":"markdown","1fbf7cb3":"markdown","76e7d0c8":"markdown","e7d8f1fd":"markdown"},"source":{"1bfd189d":"##Importing the lib \nimport pandas as pd\nimport numpy as np\ndata = pd.read_csv(\"..\/input\/sandp500\/individual_stocks_5yr\/individual_stocks_5yr\/AAPL_data.csv\")\nprint(data.head())\nprint(data.describe())","9fef65c8":"df= data[['date', 'close']]\n## date has dtype of object we will convert it into datatime type\nimport datetime\ndf['date'] = pd.to_datetime(df['date']);\nprint(df.info())\nprint(df.shape)","8caf3f0b":"#Importing lib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(24,6))\nplt.title(\"Price value trands from 2013 to 2019 of price\");\nsns.lineplot(data=df,x=df.date,y=df.close);","2f6053c7":"from sklearn.metrics import mean_squared_error, mean_absolute_error\ndef mean_absolute_percentage_error(y_true, y_pred):\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n","6ddfdb05":"## Import Prophet lib\nfrom fbprophet import Prophet\n\n# Filter the data for close values\ndf_one = df[[\"date\",\"close\"]]\ndf_one = df_one.loc[~(df_one.date.dt.year==2018)]\ndf_one = df_one.rename(columns = {'date':'ds','close':'y'})\n#y is output\ny= df_one.loc[df_one.ds.dt.year==2017]\n\n# x is the input which with two columns\nx= df_one.loc[(df_one.ds.dt.year !=2017)]\nx= x.loc[(x.ds.dt.year !=2018)]\n# x=x.rename(columns = {'date':'ds','close':'y'})","7ba139a4":"# print(df.shape)\n# print(x.shape)\n# 1259\ny.head()","706c21e4":"## Define the model\nmodel_basic=Prophet()\n\n## Train the model\nmodel_basic.fit(x)\n\n## Predict for next year (365 days)\n# y_predict = model_basic.make_future_dataframe(periods=365)\ny_predict = model_basic.predict(df=y.reset_index())","c9c7bee2":"y_predict.head()","1f115f8a":"from fbprophet.plot import plot_plotly\n\nplot_plotly(model_basic, y_predict)","f847f15f":"from fbprophet.plot import add_changepoints_to_plot\nfig = model_basic.plot(y_predict)\na = add_changepoints_to_plot(fig.gca(), model_basic, y_predict)\n","ad998da8":"import seaborn as sns\n\ndef plot_series(df,y_predict):\n    y_predict = pd.concat([y_predict,x])\n    plt.figure(figsize=(24,6))\n    sns.lineplot(df.date, df.close, label = \"Actual\")\n    sns.lineplot(y_predict.ds,y_predict.yhat , label = \"Predicted_value\")\n#     sns.lineplot(y_predict.ds,y_predict.trend , label = \"Predicted_trend\")\n    sns.lineplot(y_predict.ds,y_predict.yhat_lower , label = \"Predicted_lowerBound\")\n    sns.lineplot(y_predict.ds,y_predict.yhat_upper , label = \"Predicted_upperBound\")\n    plt.xlabel('date')\n    plt.ylabel('closing price')\n    plt.title('Stock price prediction using Prophet model')\n    plt.legend()\n \nplot_series(df,y_predict)\nplt.show();","83271d77":"MSE = mean_squared_error(y_true=y.y,y_pred=y_predict.yhat)\n\nMAE = mean_absolute_error(y_true=y.y,y_pred=y_predict.yhat)\n\nMAPE = mean_absolute_percentage_error(y_true=y.y,y_pred=y_predict.yhat)\n\n\nprint ('MSE :',MSE)\nprint ('MAE :',MAE)\nprint ('MAEP', MAPE, '%')","1e8c1444":"changepoints=['2013-09-10','2013-10-22','2014-09-07','2014-10-16','2015-03-09','2015-09-09','2016-09-07','2016-10-27']\nmodel_one=Prophet(changepoints=changepoints) #assign change point list\nmodel_one.add_country_holidays(country_name='US') # Choose a country to use\n\n## Train the model\nmodel_one.fit(x)\n\n## Predict for next year (365 days)\n# y_predict = model_one.make_future_dataframe(periods=365)\ny_predict = model_one.predict(df=y.reset_index())\nplot_series(df,y_predict)\nplt.show()","94960835":"MSE = mean_squared_error(y_true=y.y,y_pred=y_predict.yhat)\n\nMAE = mean_absolute_error(y_true=y.y,y_pred=y_predict.yhat)\n\nMAPE = mean_absolute_percentage_error(y_true=y.y,y_pred=y_predict.yhat)\n\n\nprint ('MSE :',MSE)\nprint ('MAE :',MAE)\nprint ('MAEP', MAPE, '%')","c025118e":"changepoints=['2014-06-02','2014-09-07','2014-10-16','2015-03-09','2015-09-09','2016-09-07','2016-10-27']\nmodel_two=Prophet(changepoints=changepoints, #assign change point list\n                  changepoint_prior_scale=0.1, #As medium trend flexibility set as 0.1 which find best suitable for this series\n                  seasonality_prior_scale=6, # Reduce value as their is not a significant trend in series (default value is 10)\n                  holidays_prior_scale=10, #Keep as default\n                 seasonality_mode='additive') # Select as additive as their is low seasonality\nmodel_two.add_country_holidays(country_name='US');\n","4c9811ad":"## Train the model\nmodel_two.fit(x)\n\n## Predict for next year (365 days)\n# y_predict = model_two.make_future_dataframe(periods=365)\ny_predict = model_two.predict(df=y.reset_index())","312b5e6c":"plot_series(df,y_predict)\nplt.show()","fd6adaf7":"from fbprophet.plot import add_changepoints_to_plot\nfig = model_two.plot(y_predict)\na = add_changepoints_to_plot(fig.gca(), model_two, y_predict)","fcffec62":"MSE = mean_squared_error(y_true=y.y,y_pred=y_predict.yhat)\n\nMAE = mean_absolute_error(y_true=y.y,y_pred=y_predict.yhat)\n\nMAPE = mean_absolute_percentage_error(y_true=y.y,y_pred=y_predict.yhat)\n\n\nprint ('MSE :',MSE)\nprint ('MAE :',MAE)\nprint ('MAEP', MAPE, '%')","f14278ea":"# Trend Changepoints\n","16c3e64e":"### Visualize the predicted values vs actual values","50ff5ba0":"# Hyperparameter tuning\n","418fed10":"### fbprophet has support build-in support tools to visualize the results\n\n***Plotly-express it is an intractive graph and change by selecting the time duration***","2011149e":"# Futhmore hyperparameter tuning that can be set such as following:\n","cd55ed15":"**Hyperparamter tuning and Trend changepoint assignment has significantly improve the result of the time series forecasting as seen above**","acb3d55d":"*  **If you have any suggestion for me please provide feedback :)**\n*  *If you find helpful and have doubts you can ask me I am happy to help*","e6977416":"To expriement with time-series prediction we will use ***Apple stocks data*** and **Facebook's fbprophet library**\n***Apple stocks data*** stock is avalible from the 2013 to 2017","b8eb7c62":"\nThe vertical lines in this figure indicate where the potential changepoints were placed which impact the prediction of the results.","02387ef3":"# fbprophet\n","2df799e3":"\n*changepoint_prior_scale*: This is probably the most impactful parameter. It determines the flexibility of the trend, and in particular how much the trend changes at the trend changepoints. if it is too small, the trend will be underfit and variance that should have been modeled with trend changes will instead end up being handled with the noise term. If it is too large, the trend will overfit. The default of 0.05 works for many time series, but this could be tuned; a range of [0.001, 0.5] would likely be about right. \n\n*seasonality_prior_scale*: This parameter controls the flexibility of the seasonality. Similarly, a large value allows the seasonality to fit large fluctuations, a small value shrinks the magnitude of the seasonality. The default is 10., which applies basically no regularization. That is because we very rarely see overfitting here. A reasonable range for tuning it would probably be [0.01, 10]; when set to 0.01 you should find that the magnitude of seasonality is forced to be very small. This likely also makes sense on a log scale, since it is effectively an L2 penalty like in ridge regression.\n\n*holidays_prior_scale*: This controls flexibility to fit holiday effects. Similar to seasonality_prior_scale, it defaults to 10.0 which applies basically no regularization, since we usually have multiple observations of holidays and can do a good job of estimating their effects. This could also be tuned on a range of [0.01, 10] as with seasonality_prior_scale.\n\n*seasonality_mode*: Options are ['additive', 'multiplicative']. Default is 'additive', but many business time series will have multiplicative seasonality. This is best identified just from looking at the time series and seeing if the magnitude of seasonal fluctuations grows with the magnitude of the time series (see the documentation here on multiplicative seasonality), but when that isn\u2019t possible, it could be tuned.\n\n#### To more about them : [PageLink](https:\/\/facebook.github.io\/prophet\/docs\/diagnostics.html#hyperparameter-tuning)\n    ","ab72f92a":"Values varies between approximatly 84 to 179\/\nWe will use *close* price columns for  predicting price.","ee81f778":"We consider above model as baseline and try to improve it using\nHyperparameter tuning.\n\n*Trend Changepoints* : These are dates that define the trend shift in the sentiments of market so we will should consider them rather defining the arbritaly  in the forcasting. So every year Apple held its Special event where it launch apple product, we condiser all these launch dates as Trend changepoints\n\n\n*Holiday Effects* :we can use a built-in collection of country-specific holidays using the **add_country_holidays method**. The name of the country is specified, and then major holidays for that country will be included.\n\n**Significant improvement in model predictiong can be seen here**\n","803d1127":"The input to **Prophet** required a dataframe with two columns: **ds and y.** The ds (datestamp) column should be of a format expected by Pandas,\nideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.\nFor addtional info : **[Prophet](https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html)**\n\nIn this secnario we cosider data from **2013 to 2016** as input and predict the values for **2017** and compare it with original","1fbf7cb3":"Dataframe **y_predict**  give us various information such as :\n* . predicted price  (*yhat*)\n* . predicted trend (*trend*)\n* . trand range(*trend_lower and trend_upper*) \n* . price range (*yhat_lower and yhat_upper*)\n","76e7d0c8":"# Time series forecasting with Prophet\n\n## Deep dive inside the Prophet lib to improve forcast with Hyperparameter tuning","e7d8f1fd":"### Visulizing the data to understand the trands"}}