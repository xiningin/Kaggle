{"cell_type":{"0f439bde":"code","1bfe29a5":"code","e00b468c":"code","54bd543e":"code","2688af4b":"code","0059bcd2":"code","3ef3a015":"code","d3057fb5":"code","24f144c8":"code","cfcaaee8":"code","c0622424":"code","ea3ca1fd":"code","890ecf83":"code","ae410018":"code","181f8d62":"code","add01507":"code","7df07ea8":"code","7b244ac5":"code","57088297":"code","d7617190":"code","8ed3aa29":"code","a3b40be7":"code","e43574aa":"code","7f9f31c5":"code","efd48667":"code","86aa34cb":"code","e27cec27":"code","b7ce5239":"code","b24938ca":"code","cf85e89c":"code","dd69f7c3":"code","c918a132":"code","bcaf2fd8":"code","3a432c08":"code","b9fe9c80":"code","4da0b477":"code","28213112":"code","904502a2":"code","a9d481b2":"markdown","99b6d960":"markdown","53750aa2":"markdown","d7715abe":"markdown","75086d32":"markdown","2b11fd3b":"markdown","7ca197db":"markdown","c168d351":"markdown","0a472549":"markdown","ecd11c07":"markdown","05fd09c9":"markdown","f3944280":"markdown","c498c6c7":"markdown","41304f91":"markdown","18076afe":"markdown","d5a4aaf4":"markdown","ac5926fa":"markdown","777837b8":"markdown","8f77a34a":"markdown","59d36a9d":"markdown","38043300":"markdown","996849ef":"markdown","c976e62d":"markdown","447aac54":"markdown","3a4c7b8b":"markdown","71252f50":"markdown","bf393b6d":"markdown"},"source":{"0f439bde":"import numpy as np\nimport pandas as pd\n\nimport xgboost as xgb\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_log_error\n\nimport optuna\nfrom optuna import Trial, visualization","1bfe29a5":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","e00b468c":"train.head()","54bd543e":"test.head()","2688af4b":"feature_cols = [col for col in test.columns.tolist() if col not in ['date_time']]\ntarget1 = ['target_carbon_monoxide']\ntarget2 = ['target_benzene']\ntarget3 = ['target_nitrogen_oxides']","0059bcd2":"kf = KFold(n_splits=5, random_state=2021, shuffle=True)\n\nfor i, (trn, val) in enumerate(kf.split(train)):\n    train.loc[val, 'kfold'] = i\ntrain['kfold'] = train['kfold'].astype(int)","3ef3a015":"def fit_xgb(trial, xtr, ytr, xval, yval):\n    params = {\n        \"n_estimators\": trial.suggest_int(\"n_estimators\",200,1200,100),\n        \"subsample\": trial.suggest_discrete_uniform(\"subsample\", 0.6,1,0.1),\n        \"colsample_bytree\": trial.suggest_discrete_uniform(\"colsample_bytree\", 0.6,1,0.1),\n        \"eta\": trial.suggest_loguniform(\"eta\",1e-3,0.1),\n        \"max_depth\": trial.suggest_int(\"max_depth\",5,20),\n        \"reg_alpha\": trial.suggest_int(\"reg_alpha\",1,50),\n    }\n    \n    model = xgb.XGBRegressor(**params, random_state=42, eval_metric=\"rmsle\")\n    model.fit(xtr, ytr.reshape(-1,))\n    \n    y_tr_pred = model.predict(xtr)\n    y_val_pred = model.predict(xval)\n    \n    y_tr_pred = np.clip(y_tr_pred, 0.1, None)\n    y_val_pred = np.clip(y_val_pred, 0.1, None)\n    \n    log = {\n        \"train rmsle\": np.sqrt(mean_squared_log_error(ytr, y_tr_pred)),\n        \"valid rmsle\": np.sqrt(mean_squared_log_error(yval, y_val_pred))\n    }\n    \n    return model, log","d3057fb5":"def objective1(trial):\n    rmsle = 0\n    for fold in range(5):\n        trn_idx = train['kfold'] != fold\n        val_idx = train['kfold'] == fold\n        trn = train.loc[trn_idx, :]\n        val = train.loc[val_idx, :]\n\n        xtr, ytr = trn[feature_cols].values, trn[target1].values\n        xval, yval = val[feature_cols].values, val[target1].values\n        \n        model, log = fit_xgb(trial, xtr, ytr, xval, yval)\n        rmsle += log['valid rmsle']\/5\n        \n    return rmsle","24f144c8":"def objective2(trial):\n    rmsle = 0\n    for fold in range(5):\n        trn_idx = train['kfold'] != fold\n        val_idx = train['kfold'] == fold\n        trn = train.loc[trn_idx, :]\n        val = train.loc[val_idx, :]\n\n        xtr, ytr = trn[feature_cols].values, trn[target2].values\n        xval, yval = val[feature_cols].values, val[target2].values\n        \n        model, log = fit_xgb(trial, xtr, ytr, xval, yval)\n        rmsle += log['valid rmsle']\/5\n        \n    return rmsle","cfcaaee8":"def objective3(trial):\n    rmsle = 0\n    for fold in range(5):\n        trn_idx = train['kfold'] != fold\n        val_idx = train['kfold'] == fold\n        trn = train.loc[trn_idx, :]\n        val = train.loc[val_idx, :]\n\n        xtr, ytr = trn[feature_cols].values, trn[target3].values\n        xval, yval = val[feature_cols].values, val[target3].values\n        \n        model, log = fit_xgb(trial, xtr, ytr, xval, yval)\n        rmsle += log['valid rmsle']\/5\n        \n    return rmsle","c0622424":"study = optuna.create_study(direction=\"minimize\", study_name='Target 1 optimization')\nstudy.optimize(objective1, n_trials=100)","ea3ca1fd":"history = study.trials_dataframe()\nhistory.sort_values(by=\"value\", ascending=True)","890ecf83":"study.best_params","ae410018":"visualization.plot_optimization_history(study)","181f8d62":"visualization.plot_parallel_coordinate(study)","add01507":"visualization.plot_param_importances(study)","7df07ea8":"clf1 = xgb.XGBRegressor(**(study.best_params))","7b244ac5":"clf1.fit(train[feature_cols], train[target1], eval_metric=\"rmsle\")","57088297":"preds1 = clf1.predict(test[feature_cols])\npreds1 = np.clip(preds1, 0.1, None)\nsample[target1] = preds1","d7617190":"study = optuna.create_study(direction=\"minimize\", study_name='Target 2 optimization')\nstudy.optimize(objective2, n_trials=100)","8ed3aa29":"history = study.trials_dataframe()\nhistory.sort_values(by=\"value\", ascending=True)","a3b40be7":"study.best_params","e43574aa":"visualization.plot_optimization_history(study)","7f9f31c5":"visualization.plot_parallel_coordinate(study)","efd48667":"visualization.plot_param_importances(study)","86aa34cb":"clf2 = xgb.XGBRegressor(**(study.best_params))","e27cec27":"clf2.fit(train[feature_cols], train[target2], eval_metric=\"rmsle\")","b7ce5239":"preds2 = clf2.predict(test[feature_cols])\npreds2 = np.clip(preds2, 0.1, None)\nsample[target2] = preds2","b24938ca":"study = optuna.create_study(direction=\"minimize\", study_name='Target 3 optimization')\nstudy.optimize(objective3, n_trials=100)","cf85e89c":"history = study.trials_dataframe()\nhistory.sort_values(by=\"value\", ascending=True)","dd69f7c3":"study.best_params","c918a132":"visualization.plot_optimization_history(study)","bcaf2fd8":"visualization.plot_parallel_coordinate(study)","3a432c08":"visualization.plot_param_importances(study)","b9fe9c80":"clf3 = xgb.XGBRegressor(**(study.best_params))","4da0b477":"clf3.fit(train[feature_cols], train[target3], eval_metric=\"rmsle\")","28213112":"preds3 = clf3.predict(test[feature_cols])\npreds3 = np.clip(preds3, 0.1, None)\nsample[target3] = preds3","904502a2":"sample.to_csv(\"submission.csv\", index=False)","a9d481b2":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">XGBoost + Optuna<\/h1>\n<br>","99b6d960":"### The `visualization` module provides utility functions for plotting the optimization process using plotly and matplotlib\n[https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/index.html](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/index.html)","53750aa2":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Updating Submission file<\/h1>","d7715abe":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Read the Data \ud83d\udcd6<\/h1>","75086d32":"### **NOTE** : The Objective Function should return the metric to be minimized or maximized ","2b11fd3b":"[Visit this site to learn more](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.trial.Trial.html#optuna.trial.Trial)","7ca197db":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Visualizations \ud83d\udcca<\/h1>","c168d351":"### The `visualization` module provides utility functions for plotting the optimization process using plotly and matplotlib\n[https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/index.html](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/index.html)","0a472549":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training Function<\/h1>","ecd11c07":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","05fd09c9":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Retraining on the entire data<\/h1>","f3944280":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Objective Function<\/h1>","c498c6c7":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Visualizations \ud83d\udcca<\/h1>","41304f91":"### The `visualization` module provides utility functions for plotting the optimization process using plotly and matplotlib\n[https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/index.html](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/index.html)","18076afe":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Optimize for Target 2 \ud83d\udcc8<\/h1>","d5a4aaf4":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Create Folds<\/h1>","ac5926fa":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Updating Submission file<\/h1>","777837b8":"1. trial.suggest_categorical : Suggest a value for the categorical parameter. The value is sampled from the `choices`\n2. trial.suggest_discrete_uniform: Suggest a value for the discrete parameter. The value is sampled uniformely from the range `[low,high]`, with some step of discretization\n3. trial.suggest_logunifrom: Suggest a value for the continuous parameter. The value is sampled from the range `[low,high)` in the log domain.\n4. trial.suggest_int: Suggest a value for the integer parameter. The value is sampled from the integers in `[low,high]`","8f77a34a":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Updating Submission file<\/h1>","59d36a9d":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Save Submission File<\/h1>","38043300":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Retraining on the entire data<\/h1>","996849ef":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Re-training on the entire data<\/h1>","c976e62d":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25226\/logos\/header.png?t=2021-01-27-17-34-31)","447aac54":"<h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :blue; border-radius: 100px 100px; text-align:center\">Visualizations \ud83d\udcca<\/h1>","3a4c7b8b":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Optimize for Target 1 \ud83d\udcc8<\/h1>","71252f50":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Optimize for Target 3 \ud83d\udcc8<\/h1>","bf393b6d":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Import Required Libraries \ud83d\udcda<\/h1>"}}