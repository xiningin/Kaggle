{"cell_type":{"57c13797":"code","c31e7796":"code","c9023b26":"code","c1b2cf9e":"code","002f43f1":"code","9a2a91c6":"code","10c77c9f":"code","d582ea5a":"code","626523b1":"code","fa5be502":"code","051d7d92":"code","6a82be52":"code","83d4c2f3":"code","843afdfd":"code","89b0b2bd":"code","cf54932d":"code","0f80c479":"code","3055dea3":"code","9f4828da":"code","131bca28":"code","5ff1497b":"code","72445bb2":"code","d800d748":"code","bbd5b271":"code","ae8e3815":"code","ee238a8b":"code","de26178c":"code","32e189c0":"code","6eada14d":"code","b9edd4e9":"code","337fb41d":"code","51fa03a0":"code","540291c9":"code","6a7f5ff6":"code","d7e261c3":"code","84397f4e":"code","faedf546":"code","996bd0fc":"code","fb5cdcad":"code","aacd2544":"code","6ef8f1e0":"code","b69c9b30":"code","694b8b52":"code","64b7f4d2":"code","71023bf0":"code","ed64fbda":"code","d7fe5536":"code","0857efcd":"code","23f4dc7e":"code","010d29ba":"code","9bcba81c":"code","6286aad0":"code","bb4318b9":"code","2c24575a":"code","b01f62a0":"code","103f9866":"code","655257a0":"code","ffa70684":"code","95d35ee0":"code","c6f1385b":"code","0d036012":"code","c9449008":"code","ec94ce1f":"code","84f1f86d":"code","252012d9":"code","0313c5d4":"code","73dd3df2":"code","e187961a":"code","04fa9286":"code","8cd95d53":"code","5ce36b65":"code","cfed3aad":"code","ef1d6b2a":"code","82f83d52":"code","699146a5":"code","1e59c71d":"code","16f086c9":"code","3bae1fd0":"code","59b98a75":"code","4aecbaa1":"code","150469bf":"code","0648d766":"code","d180ed69":"code","12d18995":"code","76f74689":"code","cec2f2e5":"code","15ca3fe0":"code","ba692d1c":"code","94f6a6b1":"code","4eb828b2":"code","2f0eb8d3":"code","cf21d6e2":"code","7e1f585e":"code","f078bc50":"code","13dc4243":"code","d0af04e0":"code","73d343c9":"code","ff610339":"code","a9edb08f":"code","dd3e03f3":"code","cf5fd5a6":"code","c4ba62c5":"code","497cb15f":"code","1f75f2fb":"code","7a242157":"code","1b163106":"code","3bbd934c":"code","0ae372b6":"code","a52cd9b1":"code","c7fc781f":"code","6ac6eab0":"code","72295961":"code","91c06ad6":"code","ed6a7b7c":"code","299222a0":"code","d1e9d120":"code","0c90d868":"code","e86fb055":"code","454988b8":"code","23215391":"code","5329f2c8":"code","b9c40be6":"code","6e40e16b":"code","226ee8b3":"code","1864cc4d":"code","83d28089":"code","8edf426a":"code","a9ebdc46":"code","4cfe091a":"code","6956774f":"code","675a3e6c":"code","c3602b0d":"code","a695e2af":"code","3de32c56":"markdown","e151f25a":"markdown","9faf2dbd":"markdown","8e712afa":"markdown","0f5e9102":"markdown","d502baa1":"markdown","0bd92c1a":"markdown","68155ff0":"markdown","db9e2d85":"markdown","c5d09eeb":"markdown","0ab43d6b":"markdown","2ed75b47":"markdown","9a062857":"markdown","3b423f73":"markdown","1f7ac487":"markdown","0b3a4dc8":"markdown","0b1310f3":"markdown","90f060b2":"markdown","27393c90":"markdown","dc3fc7a4":"markdown"},"source":{"57c13797":"from IPython.display import Image\nImage(\"https:\/\/coderspace.s3.amazonaws.com\/media\/event\/hero_image\/dt-datathon-yatay-4.png\")","c31e7796":"import os\nimport glob\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import OneHotEncoder\n","c9023b26":"df_train = pd.read_csv(\"..\/input\/dogus-teknoloji-zingat\/zingat_usecase_trainset.csv\") \ndf_train.head(3)","c1b2cf9e":"df_train[\"\u0130nterkom\"]=df_train.\u0130nterkom.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_train[\"depremy\u00f6netmeli\u011fineuygun\"]=df_train.depremy\u00f6netmeli\u011fineuygun.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_train[\"asans\u00f6r\"]=df_train.asans\u00f6r.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_train[\"\u00c7ocukoyunalan\u0131\"]=df_train.\u00c7ocukoyunalan\u0131.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_train[\"giyinmeodas\u0131\"]=df_train.giyinmeodas\u0131.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_train[\"ebeveynbanyosu\"]=df_train.ebeveynbanyosu.map({\"VAR\":1,\"YOK\":0}).astype(int)","002f43f1":"df_train[['Il','Ilce','Mahalle']] = df_train.path.str.split(\"\/\",expand=True,)\n\ndf_train=df_train.drop('path', 1)","9a2a91c6":"df_train.fillna(\"Merkez\" , inplace=True)","10c77c9f":"df_train[['Fiyat','Fiyat_Birim']] = df_train.g\u00fcncel_fiyat.str.split(\" \",expand=True,)\ndf_train=df_train.drop('g\u00fcncel_fiyat', 1)\n\n","d582ea5a":"df_train=df_train.drop('Fiyat_Birim', 1)","626523b1":"df_train['Fiyat'] = df_train['Fiyat'].astype(int)","fa5be502":"df_train = df_train.rename(columns={\"odasay\u0131s\u0131\":\"oda\",\"br\u00fctm\u00b2\":\"brut\",\"netm\u00b2\":\"net\",\"binaya\u015f\u0131\":\"byasi\",\"bulundu\u011fukat\":\"bkat\",\n                                   \"binadakikatsay\u0131s\u0131\":\"toplamkat\",\"is\u0131tmatipi\":\"isitma\",\"\u0130nterkom\":\"interkom\",\n                                    \"depremy\u00f6netmeli\u011fineuygun\":\"deprem\",\"asans\u00f6r\":\"asansor\",\"\u00c7ocukoyunalan\u0131\":\"cocuk\",\n                                   \"giyinmeodas\u0131\":\"giyinme\"})","051d7d92":"#df_train[\"brut\"]=df_train[\"brut\"].astype(object)\n#df_train[\"net\"]=df_train[\"net\"].astype(object)","6a82be52":"df_train","83d4c2f3":"data = pd.concat([df_train['Fiyat'], df_train['emlaktipi']], axis=1)\ndata.plot.scatter(x='emlaktipi', y='Fiyat', alpha=0.3,figsize=(20, 5), ylim=(0,800000));","843afdfd":"df_train.drop(df_train[(df_train['emlaktipi']=='Prefabrik Ev') & (df_train['Fiyat']>300000)].index, inplace=True)","89b0b2bd":"df_train.drop(df_train[(df_train['emlaktipi']=='K\u00f6\u015fk \/ Konak \/ Yal\u0131') & (df_train['Fiyat']>550000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['emlaktipi']=='Yal\u0131 Dairesi') & (df_train['Fiyat']>550000)].index, inplace=True)","cf54932d":"df_train.drop(df_train[(df_train['emlaktipi']=='Villa') & (df_train['Fiyat']<195000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['emlaktipi']=='Yazl\u0131k') & (df_train['Fiyat']<195000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['emlaktipi']=='Rezidans') & (df_train['Fiyat']<120000)].index, inplace=True)","0f80c479":"data = pd.concat([df_train['Fiyat'], df_train['emlaktipi']], axis=1)\ndata.plot.scatter(x='emlaktipi', y='Fiyat', alpha=0.3,figsize=(20, 5), ylim=(0,800000));","3055dea3":"df_train.drop(df_train[(df_train['oda']=='3+2') & (df_train['Fiyat']<149000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['oda']=='5+1') & (df_train['Fiyat']<199000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['oda']=='4+2') & (df_train['Fiyat']<190000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['oda']=='4+1') & (df_train['Fiyat']<190000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['oda']=='1+0') & (df_train['Fiyat']>450000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['oda']=='6+1') & (df_train['Fiyat']<220000)].index, inplace=True)\ndf_train.drop(df_train[(df_train['oda']=='6+2') & (df_train['Fiyat']<220000)].index, inplace=True)","9f4828da":"data = pd.concat([df_train['Fiyat'], df_train['oda']], axis=1)\ndata.plot.scatter(x='oda', y='Fiyat', alpha=0.3,figsize=(20, 5), ylim=(0,800000));","131bca28":"df_train.drop(df_train[(df_train['brut']>5000)].index, inplace=True)","5ff1497b":"data = pd.concat([df_train['Fiyat'], df_train['brut']], axis=1)\ndata.plot.scatter(x='brut', y='Fiyat', alpha=0.3,figsize=(10, 5), ylim=(0,800000));","72445bb2":"df_train.drop(df_train[(df_train['net']>1500)].index, inplace=True)","d800d748":"data = pd.concat([df_train['Fiyat'], df_train['net']], axis=1)\ndata.plot.scatter(x='net', y='Fiyat', alpha=0.3,figsize=(20, 10), ylim=(0,800000));","bbd5b271":"df_train.isnull().sum()","ae8e3815":"df_test = pd.read_csv(\"..\/input\/dogus-teknoloji-zingat\/zingat_usecase_testset_null.csv\") \ndf_test.head(3)","ee238a8b":"df_test[\"\u0130nterkom\"]=df_test.\u0130nterkom.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_test[\"depremy\u00f6netmeli\u011fineuygun\"]=df_test.depremy\u00f6netmeli\u011fineuygun.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_test[\"asans\u00f6r\"]=df_test.asans\u00f6r.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_test[\"\u00c7ocukoyunalan\u0131\"]=df_test.\u00c7ocukoyunalan\u0131.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_test[\"giyinmeodas\u0131\"]=df_test.giyinmeodas\u0131.map({\"VAR\":1,\"YOK\":0}).astype(int)\ndf_test[\"ebeveynbanyosu\"]=df_test.ebeveynbanyosu.map({\"VAR\":1,\"YOK\":0}).astype(int)","de26178c":"df_test[['Il','Ilce','Mahalle']] = df_test.path.str.split(\"\/\",expand=True,)\n\ndf_test=df_test.drop('path', 1)","32e189c0":"df_test=df_test.drop('g\u00fcncel_fiyat', 1)\ndf_test.head(5)","6eada14d":"df_test.fillna(\"Merkez\" , inplace=True)","b9edd4e9":"df_test = df_test.rename(columns={\"odasay\u0131s\u0131\":\"oda\",\"br\u00fctm\u00b2\":\"brut\",\"netm\u00b2\":\"net\",\"binaya\u015f\u0131\":\"byasi\",\"bulundu\u011fukat\":\"bkat\",\n                                   \"binadakikatsay\u0131s\u0131\":\"toplamkat\",\"is\u0131tmatipi\":\"isitma\",\"\u0130nterkom\":\"interkom\",\n                                    \"depremy\u00f6netmeli\u011fineuygun\":\"deprem\",\"asans\u00f6r\":\"asansor\",\"\u00c7ocukoyunalan\u0131\":\"cocuk\",\n                                   \"giyinmeodas\u0131\":\"giyinme\"})","337fb41d":"#df_test[\"brut\"]=df_test[\"brut\"].astype(object)\n#df_test[\"net\"]=df_test[\"net\"].astype(object)","51fa03a0":"y = df_train[\"Fiyat\"]","540291c9":"df_test[\"Fiyat\"]=0","6a7f5ff6":"df_train[\"Train\"]=1\ndf_test[\"Train\"]=0","d7e261c3":"combined=pd.concat([df_train,df_test])\ncombined","84397f4e":"combined[['Yil','Ay','Gun']] = combined.tarih.str.split(\"-\",expand=True,).astype(int)\n\ncombined=combined.drop('tarih', 1)","faedf546":"combined[\"Dolar\"]=0\n","996bd0fc":"# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 1) , 'Dolar'] = 5.21\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 2) , 'Dolar'] = 5.31\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 3) , 'Dolar'] = 5.62\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 4) , 'Dolar'] = 5.95\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 5) , 'Dolar'] = 5.86\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 6) , 'Dolar'] = 5.75\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 7) , 'Dolar'] = 5.52\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 8) , 'Dolar'] = 5.81\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 9) , 'Dolar'] = 5.64\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 10) , 'Dolar'] = 5.73\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 11) , 'Dolar'] = 5.74\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 12) , 'Dolar'] = 5.94\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 1) , 'Dolar'] = 5.97\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 2) , 'Dolar'] = 6.22\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 3) , 'Dolar'] = 6.56\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 4) , 'Dolar'] = 6.97\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 5) , 'Dolar'] = 6.81\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 6) , 'Dolar'] = 6.84\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 7) , 'Dolar'] = 6.93\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 8) , 'Dolar'] = 7.32\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 9) , 'Dolar'] = 7.75\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 10) , 'Dolar'] =7.77 #8.30\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 11) , 'Dolar'] =7.78\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 12) , 'Dolar'] = 7.41","fb5cdcad":"combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 1) , 'Dolar'] = 6#5#5.21\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 2) , 'Dolar'] = 6#5#5.31\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 3) , 'Dolar'] = 6#5.62\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 4) , 'Dolar'] = 6#5.95\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 5) , 'Dolar'] = 6#5.86\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 6) , 'Dolar'] = 6#5.75\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 7) , 'Dolar'] = 6#5.52\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 8) , 'Dolar'] = 6#5.81\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 9) , 'Dolar'] = 6#5.64\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 10) , 'Dolar'] = 6#5.73\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 11) , 'Dolar'] = 6#5.74\ncombined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 12) , 'Dolar'] = 6#5.94\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 1) , 'Dolar'] = 6#5.97\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 2) , 'Dolar'] = 6#6.22\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 3) , 'Dolar'] = 7#6.56\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 4) , 'Dolar'] = 7#6.97\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 5) , 'Dolar'] = 7#6.81\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 6) , 'Dolar'] = 7#6.84\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 7) , 'Dolar'] = 7#6.93\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 8) , 'Dolar'] = 7#7.32\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 9) , 'Dolar'] = 8#7.75\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 10) , 'Dolar'] =8 #8.30\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 11) , 'Dolar'] =8#7.78\ncombined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 12) , 'Dolar'] = 8#7.41","aacd2544":"# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 1) , 'Euro'] = 6#5.98\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 2) , 'Euro'] = 6#6.05\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 3) , 'Euro'] = 6#6.31\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 4) , 'Euro'] = 7#6.67\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 5) , 'Euro'] = 7#6.53\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 6) , 'Euro'] = 7#6.55\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 7) , 'Euro'] = 6#6.15\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 8) , 'Euro'] = 6#6.44\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 9) , 'Euro'] = 6#6.16\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 10) , 'Euro'] = 6#6.37\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 11) , 'Euro'] = #6.31\n# combined.loc[(combined['Yil'] == 2019) & (combined['Ay'] == 12) , 'Euro'] = #6.66\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 1) , 'Euro'] = #6.58\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 2) , 'Euro'] = #6.85\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 3) , 'Euro'] = #7.21\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 4) , 'Euro'] = #7.58\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 5) , 'Euro'] = #7.57\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 6) , 'Euro'] = #7.67\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 7) , 'Euro'] = #8.14\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 8) , 'Euro'] = #8.72\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 9) , 'Euro'] = #9.08\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 10) , 'Euro'] = #9.69\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 11) , 'Euro'] = #9.33\n# combined.loc[(combined['Yil'] == 2020) & (combined['Ay'] == 12) , 'Euro'] = #9.11","6ef8f1e0":"combined['Fiyat']=(combined['Fiyat']\/combined['Dolar']).round(0).astype(int)","b69c9b30":"combined['Fiyat']","694b8b52":"combined","64b7f4d2":"combined['Yil'] = combined['Yil'].astype(str)\ncombined['Ay'] = combined['Ay'].astype(str)\ncombined['Gun'] = combined['Gun'].astype(str)","71023bf0":"combined.dtypes","ed64fbda":"combined.loc[combined['oda'] == '-', 'oda'] = '0+0'","d7fe5536":"combined['oda'].unique()","0857efcd":"combined[['OdaS','Salon']] = combined.oda.str.split(\"+\",expand=True,).astype(int)\ncombined=combined.drop('oda', 1)","23f4dc7e":"combined.loc[combined['banyosayisi'] == '-', 'banyosayisi'] = '0'\ncombined.loc[combined['banyosayisi'] == '6 ve \u00fczeri', 'banyosayisi'] = '7'","010d29ba":"combined.loc[combined['toplamkat'] == '-', 'toplamkat'] = '0'\ncombined.loc[combined['toplamkat'] == '20 ve \u00fczeri', 'toplamkat'] = '25'\ncombined.loc[combined['toplamkat'] == '10-20 aras\u0131', 'toplamkat'] = '20'","9bcba81c":"combined.loc[combined['byasi'] == '-', 'byasi'] = '-1'\ncombined.loc[combined['byasi'] == '16-20 aras\u0131', 'byasi'] = '20'\ncombined.loc[combined['byasi'] == '11-15 aras\u0131', 'byasi'] = '15'\ncombined.loc[combined['byasi'] == '26-30 aras\u0131', 'byasi'] = '30'\ncombined.loc[combined['byasi'] == '21-25 aras\u0131', 'byasi'] = '25'\ncombined.loc[combined['byasi'] == '6-10 aras\u0131', 'byasi'] = '10'\ncombined.loc[combined['byasi'] == '36-40 aras\u0131', 'byasi'] = '40'\ncombined.loc[combined['byasi'] == '31-35 aras\u0131', 'byasi'] = '35'\ncombined.loc[combined['byasi'] == '40 ve \u00fczeri', 'byasi'] = '45'","6286aad0":"combined[\"toplamkat\"]=combined[\"toplamkat\"].astype(int)\ncombined[\"brut\"]=combined[\"brut\"].astype(int)\ncombined[\"banyosayisi\"]=combined[\"banyosayisi\"].astype(int)\ncombined[\"net\"]=combined[\"net\"].astype(int)\ncombined[\"byasi\"]=combined[\"byasi\"].astype(int)","bb4318b9":"combined.dtypes","2c24575a":"combined.isnull().sum()","b01f62a0":"combined_ohe=pd.get_dummies(combined)","103f9866":"combined_ohe","655257a0":"train_df_ohed=combined_ohe[combined_ohe[\"Train\"]==1]\ntest_df_ohed=combined_ohe[combined_ohe[\"Train\"]==0]\ntrain_df_ohed=train_df_ohed.drop('Train', 1)\ntest_df_ohed=test_df_ohed.drop('Train', 1)\ntest_df_ohed=test_df_ohed.drop('Fiyat', 1)","ffa70684":"train_df_ohed['Dolar']=train_df_ohed['Dolar'].round(0).astype(int)","95d35ee0":"train_df_ohed['Dolar']","c6f1385b":"train_df_ohed=train_df_ohed.astype(int)\ntest_df_ohed=test_df_ohed.astype(int)  \ntrain_df_ohed.dtypes","0d036012":"# machine learning\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.linear_model import Lasso,BayesianRidge, LassoLarsIC\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split,KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.pipeline import make_pipeline\n\n\n","c9449008":"import lightgbm as lgb\nimport xgboost as xgb","ec94ce1f":"train_df_one=train_df_ohed.drop(\"Ilan_ID\", axis=1)","84f1f86d":"train_df_one=train_df_one.drop(\"Dolar\", axis=1)","252012d9":"X = train_df_one.drop(\"Fiyat\", axis=1)\ny = train_df_one[\"Fiyat\"]\n#X_test_df  = test_df\nX.shape, y.shape","0313c5d4":"print(y)","73dd3df2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","e187961a":"from sklearn.preprocessing import StandardScaler","04fa9286":"scaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","8cd95d53":"X_train.shape","5ce36b65":"# from sklearn.ensemble import IsolationForest\n","cfed3aad":"# ee = IsolationForest(n_estimators=25,max_samples='auto',contamination=float(0.2),random_state=42)\n# yhat = ee.fit_predict(X_train)\n# # select all rows that are not outliers\n# mask = yhat != -1\n# X_train, y_train = X_train[mask, :], y_train[mask]","ef1d6b2a":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\n\ndef cross_val(model):\n    pred = cross_val_score(model, X, y, cv=10)\n    return pred.mean()\n\ndef print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')\n    \ndef evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","82f83d52":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X_train)\n    rmse= np.sqrt(-cross_val_score(model, X_train, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","699146a5":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.01, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=7200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","1e59c71d":"# Support Vector Regressor\n#svr = SVR(kernel='rbf',C= 20, epsilon= 0.08, gamma=0.003)","16f086c9":"# model_lasso = Lasso(alpha=0.1, \n#               precompute=True, \n# #               warm_start=True, \n#               positive=True, \n#               selection='random',\n#               random_state=42)","3bae1fd0":"#model_elastic = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)","59b98a75":"rf_reg = RandomForestRegressor(n_estimators=1500,\n                          max_depth=15,\n                          min_samples_split=5,\n                          min_samples_leaf=5,\n                          max_features=None,\n                          oob_score=True,\n                          random_state=42)","4aecbaa1":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.01, n_estimators=7200,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","150469bf":"GBoost = GradientBoostingRegressor(n_estimators=2000, learning_rate=0.01,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","0648d766":"# score = rmsle_cv(model_xgb)\n# print(\"\\nModel XGB score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","d180ed69":"# score = rmsle_cv(model_lasso)\n# print(\"\\n Lasso Regression Score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","12d18995":"# score = rmsle_cv(model_elastic)\n# print(\"\\n Elastic Net Regression Score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","76f74689":"# score = rmsle_cv(rf_reg)\n# print(\"\\n Random Forest Regression Score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","cec2f2e5":"# score = rmsle_cv(model_lgb)\n# print(\"\\n Light GB Regression Score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","15ca3fe0":"# score = rmsle_cv(GBoost)\n# print(\"\\n GBoost Regression Score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","ba692d1c":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)  ","94f6a6b1":"# model_xgb.fit(X_train,y_train)\n# train_pred2 = model_xgb.predict(X_train)\n# test_pred2 = model_xgb.predict(X_test)\n# print('Test set evaluation:\\n_____________________________________')\n# print_evaluate(y_test, test_pred2)\n# print('Train set evaluation:\\n_____________________________________')\n# print_evaluate(y_train, train_pred2)","4eb828b2":"# model_lgb.fit(X_train,y_train)\n# train_pred3 = model_lgb.predict(X_train)\n# test_pred3 = model_lgb.predict(X_test)\n","2f0eb8d3":"# print('Test set evaluation:\\n_____________________________________')\n# print_evaluate(y_test, test_pred3)\n# print('Train set evaluation:\\n_____________________________________')\n# print_evaluate(y_train, train_pred3)","cf21d6e2":"# ypred=abs(test_pred*0.70+test_pred2*0.15+test_pred3*0.15)\n# print('Test set evaluation:\\n_____________________________________')\n# print_evaluate(y_test, ypred)","7e1f585e":"# from tensorflow.keras.models import Sequential\n# from tensorflow.keras.layers import Input, Dense, Activation, Dropout\n# from tensorflow.keras.optimizers import Adam\n# from tensorflow.keras.optimizers import Adadelta\n# from tensorflow.keras.optimizers import RMSprop\n# from tensorflow.keras import initializers\n# optimizer = RMSprop(learning_rate=0.001)\n# from tensorflow.keras.regularizers import l2\n\n\n# def baseline_model():\n\n#     model = Sequential()\n\n#     model.add(Dense(12,input_shape=[X_train.shape[1]], activation='relu',kernel_regularizer='l2'))\n#     model.add(Dropout(0.3, seed=2))\n#     model.add(Dense(14, activation='relu',kernel_regularizer='l2'))\n#     model.add(Dense(16, activation='relu',kernel_regularizer='l2'))\n#     model.add(Dense(32, activation='relu',kernel_regularizer='l2'))\n#     model.add(Dense(64, activation='relu',kernel_regularizer='l2'))\n#     model.add(Dense(128, activation='relu',kernel_regularizer='l2'))\n#     model.add(Dense(256, activation='relu',kernel_regularizer='l2'))\n#     model.add(Dense(512, activation='relu',kernel_regularizer='l2'))\n#     model.add(Dropout(0.1))\n#     model.add(Dense(1,kernel_regularizer='l2'))\n\n#     model.compile(loss='mean_squared_logarithmic_error', optimizer='sgd')\n#     return model\n\n","f078bc50":"\n# model_deep=baseline_model()","13dc4243":"# EPOCHS = 250\n# BATCH_SIZE=16\n# history = model_deep.fit(X_train, y_train, validation_data=(X_test, y_test),batch_size=BATCH_SIZE, shuffle=True,epochs=EPOCHS,  verbose=1)","d0af04e0":"# test_preddeep = model_deep.predict(X_test)\n# train_preddeep = model_deep.predict(X_train)\n\n# print('Test set evaluation:\\n_____________________________________')\n# print_evaluate(y_test, test_preddeep)\n\n# print('Train set evaluation:\\n_____________________________________')\n# print_evaluate(y_train, train_preddeep)","73d343c9":"# results_df_2 = pd.DataFrame(data=[[\"Artficial Neural Network\", *evaluate(y_test, test_pred)]], \n#                             columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square'])\n# results_df = results_df.append(results_df_2, ignore_index=True)\n# results_df","ff610339":"averaged_models = AveragingModels(models = (model_lgb,model_xgb, GBoost,rf_reg))\n\n#score = rmsle_cv(averaged_models)\n#print(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","a9edb08f":"averaged_models.fit(X_train,y_train)\ntrain_pred = averaged_models.predict(X_train)\ntest_pred = averaged_models.predict(X_test)\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)  \nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","dd3e03f3":"from sklearn.ensemble import StackingRegressor","cf5fd5a6":"estimators = [\n     ('model_lgb', model_lgb),\n     ('Gboost', GBoost),\n     ('rf_reg', rf_reg)\n]","c4ba62c5":"stacked_averaged_models = StackingRegressor(estimators =estimators ,\n                                                 final_estimator = model_xgb)","497cb15f":"stacked_averaged_models.fit(X_train,y_train)","1f75f2fb":"# test_preddeep","7a242157":"# flatten_x = np.concatenate(test_preddeep)","1b163106":"# flatten_x.shape","3bbd934c":"# test_pred.shape","0ae372b6":"\n# print('Test set evaluation:\\n_____________________________________')\n# print_evaluate(y_test, flatten_x)","a52cd9b1":"# ypredTest=test_pred*0.8+flatten_x*0.2\n# print('Test set evaluation:\\n_____________________________________')\n# print_evaluate(y_test, ypredTest)","c7fc781f":"test_df_ohed.head(3)","6ac6eab0":"test_df_ohed.isnull().sum()","72295961":"sub = pd.DataFrame()\nsub['Id'] = test_df_ohed['Ilan_ID'].astype(int)\nsub['Dolar'] = test_df_ohed['Dolar']","91c06ad6":"test_df_ohed=test_df_ohed.drop(\"Ilan_ID\", axis=1)\n#test_df_ohed['Dolar']=test_df_ohed['Dolar'].round(0).astype(int)","ed6a7b7c":"test_df_ohed2=test_df_ohed.drop(\"Dolar\", axis=1)","299222a0":"X_test2= scaler.transform(test_df_ohed2)","d1e9d120":"pred = averaged_models.predict(X_test2)","0c90d868":"# pred2=model_deep.predict(X_test2)","e86fb055":"# flatten_x = np.concatenate(pred2)","454988b8":"# ypredTest2=pred*0.8+flatten_x*0.2","23215391":"sub['Expected'] = pred","5329f2c8":"# sub['Yil'] = test_df_ohed['Yil']\n# sub['Ay'] = test_df_ohed['Ay']","b9c40be6":"sub['Expected']=sub['Expected']*sub['Dolar']","6e40e16b":"sub['Expected']=sub['Expected'].round(0).astype(int)","226ee8b3":"sub[\"Expected\"]=(sub[\"Expected\"]\/10000).round(0).astype(int)","1864cc4d":"sub[\"Expected\"]=sub[\"Expected\"]*10000","83d28089":"# sub=sub.drop(\"Dolar\", axis=1)\n","8edf426a":"sub.to_csv('submission.csv', index=False,header = 1)","a9ebdc46":"test_df1=pd.read_csv(\".\/submission.csv\") \n","4cfe091a":"test_df1.head(10)","6956774f":"test_df2=test_df1.drop(\"Dolar\", axis=1)","675a3e6c":"test_df2.to_csv('submission2.csv', index=False,header = 1) # En iyi skor ","c3602b0d":"test_df1[\"Dolar\"]=7\ntest_df3=test_df1.drop(\"Dolar\", axis=1)","a695e2af":"test_df3.to_csv('submission3.csv', index=False,header = 1)","3de32c56":"## Sample Submission","e151f25a":"### Veri \u00d6ni\u015fleme","9faf2dbd":"## Test Data","8e712afa":"## Base Models","0f5e9102":"## Preprocessing","d502baa1":"## Random Forest Regression","0bd92c1a":"## Deep Learning","68155ff0":"### Stacking Regressor \nDokuz saat yetmedi modelin e\u011fitilmesine o y\u00fczden bu y\u00f6ntemi kullanamad\u0131m","db9e2d85":"#### Split G\u00fcncel Fiyat","c5d09eeb":"### Change Column Names","0ab43d6b":"# Do\u011fu\u015f Datathon","2ed75b47":"## Elastic Net Regression","9a062857":"## MODEL LGB","3b423f73":"### Model Fittig","1f7ac487":"## Machine Learning","0b3a4dc8":"### Model Scores","0b1310f3":"## Model XGB","90f060b2":"## Lasso Regression","27393c90":"## Model Light GB","dc3fc7a4":"## Gradient Boosting Regression"}}