{"cell_type":{"efa76aa4":"code","bc8b0249":"code","41d9e020":"code","a6d3becf":"code","240ec8b2":"code","20510015":"code","079bc505":"code","28fd4fa4":"code","b7a51a30":"code","d2e01a60":"code","b35f9343":"code","78daae33":"code","acdb5474":"code","17298276":"code","a8d974e9":"code","3ed06a54":"code","34b22d5e":"code","2a7abf53":"code","0867ae5f":"code","6796cc14":"code","951c1045":"code","0156f9fa":"code","73405571":"code","f37ffcb5":"markdown","8681916f":"markdown","65b4d721":"markdown","fb1e2c5b":"markdown","cd6b3264":"markdown","f38d6de2":"markdown"},"source":{"efa76aa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc8b0249":"import matplotlib.pyplot as plt","41d9e020":"import tensorflow as tf\nimport tensorflow_datasets as tfds\n\ntfds.disable_progress_bar()","a6d3becf":"df = pd.read_csv('\/kaggle\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv', parse_dates = ['date'])","240ec8b2":"df.head()","20510015":"dataset, info = tfds.load('imdb_reviews', with_info = True,\n                                  as_supervised = True)\n\ntrain_dataset, test_dataset = dataset['train'], dataset['test']\ntrain_dataset.element_spec","079bc505":"for review, label in train_dataset.take(1):\n    print(review.numpy())\n    print()\n    print(label.numpy())","28fd4fa4":"BUFFER_SIZE = 10000\nBATCH_SIZE = 64","b7a51a30":"train_dataset = train_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)\ntest_dataset = test_dataset.batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)","d2e01a60":"for example, label in train_dataset.take(1):\n    print('texts: ', example.numpy()[:3])\n    print()\n    print('labels: ', label.numpy()[:3])","b35f9343":"VOCAB_SIZE = 1000\nencoder = tf.keras.layers.experimental.preprocessing.TextVectorization(\n    max_tokens = VOCAB_SIZE\n)\n\nencoder.adapt(train_dataset.map(lambda text, label: text))","78daae33":"vocab = np.array(encoder.get_vocabulary())\nvocab[:10]","acdb5474":"encoded_example = encoder(example)[:3].numpy()\nencoded_example","17298276":"for n in range(3):\n    print(n + 1)\n    print(\"Original: \", example[n].numpy())\n    print()\n    print(\"Round-trip: \", \" \".join(vocab[encoded_example[n]]))\n    print()","a8d974e9":"model = tf.keras.Sequential([\n    encoder,\n    tf.keras.layers.Embedding(\n        input_dim = len(vocab),\n        output_dim = 64,\n        mask_zero = True\n    ),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    tf.keras.layers.Dense(1, activation = 'sigmoid')\n])","3ed06a54":"model.layers","34b22d5e":"model.compile(loss = tf.keras.losses.BinaryCrossentropy(from_logits = True),\n              optimizer = tf.keras.optimizers.Adam(1e-4),\n              metrics = ['accuracy'])","2a7abf53":"history = model.fit(train_dataset, epochs = 10,\n                    validation_data = test_dataset,\n                    validation_steps = 30)","0867ae5f":"def plot_graphs(history, metric):\n    plt.plot(history.history[metric])\n    plt.plot(history.history['val_'+metric], '')\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(metric)\n    plt.legend([metric, 'val_'+metric])","6796cc14":"test_loss, test_acc = model.evaluate(test_dataset)\n\nprint(\"test loss: \", test_loss)\nprint()\nprint(\"test accuracy: \", test_acc)","951c1045":"plt.figure(figsize=(16, 8))\nplt.subplot(1, 2, 1)\nplot_graphs(history, 'accuracy')\nplt.ylim(None, 1)\nplt.subplot(1, 2, 2)\nplot_graphs(history, 'loss')\nplt.ylim(0, None)","0156f9fa":"def predict(text, threshold = 0.50):\n    prediction = model.predict(text)\n    if prediction <= 0.50:\n        return 'neg'\n    else:\n        return 'pos'","73405571":"text_transformed = []\n\nfor i in df.text.values:\n    text_transformed.append([i])","f37ffcb5":"***Seeing the length and breadth of the given dataset, I'm not extracting the sentiments of all the given tweets; however, it is important to acknowledge that the predictions are done on 'list' input, therefore, I have transformed the tweet 'strings' into lists.***","8681916f":"# 4. Train the model","65b4d721":"# 1. Load Dataset for training the RNN","fb1e2c5b":"# 5. Make Predictions","cd6b3264":"# 2. Create the text encoder","f38d6de2":"# 3. Create the model"}}