{"cell_type":{"e80d03ee":"code","bee2b469":"code","803c75ac":"code","dc344b9f":"code","72199e5d":"code","0f9885bb":"code","a7ba39c3":"code","a5fd1b99":"code","5e5775a7":"code","7ac5d118":"code","6b2868ac":"code","4d157415":"code","b7be8cbd":"code","3a9ad4b4":"code","2be40330":"code","dd0a277f":"code","31d7d6f3":"code","9074a509":"code","c73ee32e":"code","1efb834c":"code","81d2554b":"code","e659a2e7":"code","a592fd66":"code","9d18c333":"code","cda04b8d":"code","ed03a7a2":"code","95549e2e":"code","0e3bf046":"code","89f14dca":"markdown"},"source":{"e80d03ee":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.optimizers import Adam\n\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nimport tensorflow as tf\n\nimport cv2\nimport os\n\nimport numpy as np","bee2b469":"#training paths config\n#Covid19\ncovid_path_train = r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/COVID19\"\ncovid_images_train = os.listdir(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/COVID19\")\ncovid_filepaths = [covid_path_train + '\/' + img_id for img_id in covid_images_train]\n#Normal\nnormal_path_train = r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/NORMAL\"\nnormal_images_train = os.listdir(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/NORMAL\")\nnormal_filepaths = [normal_path_train + '\/' + img_id for img_id in normal_images_train]\n#Pneumonia\npneumonia_path_train = r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/PNEUMONIA\"\npneumonia_images_train = os.listdir(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/PNEUMONIA\")\npneumonia_filepaths = [pneumonia_path_train + '\/' + img_id for img_id in pneumonia_images_train]\n#Tuberculosis\nturberculosis_path_train = r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/TURBERCULOSIS\"\nturberculosis_images_train = os.listdir(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/TURBERCULOSIS\")\nturberculosis_filepaths = [turberculosis_path_train + '\/' + img_id for img_id in turberculosis_images_train]\n\n#importation test\nimg = plt.imread(pneumonia_filepaths[4])\nplt.imshow(img)\nplt.show()","803c75ac":"#Data Preprocessing\ndef proc_img(filepath):\n    #Create a DataFrame with the filepath and the labels of the pictures\n    labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepath))\n\n    filepath = pd.Series(filepath, name='Filepath').astype(str)\n    labels = pd.Series(labels, name='Label')\n\n    # Concatenate filepaths and labels\n    df = pd.concat([filepath, labels], axis=1)\n\n    # Shuffle the DataFrame and reset index\n    df = df.sample(frac=1).reset_index(drop = True)\n    \n    return df","dc344b9f":"covid_df = proc_img(covid_filepaths)\nnormal_df = proc_img(normal_filepaths)\npneumonia_df = proc_img(pneumonia_filepaths)\nturberculosis_df = proc_img(turberculosis_filepaths)\ncovid_df.head(1),normal_df.head(1),pneumonia_df.head(1),turberculosis_df.head(1)","72199e5d":"# Display 2 picture of the Normal dataset\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(normal_df.Filepath[i]))\n    ax.set_title(normal_df.Label[i])\nplt.tight_layout(pad=0.5)\nplt.show()","0f9885bb":"# Display 2 picture of the Covid dataset\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(covid_df.Filepath[i]))\n    ax.set_title(covid_df.Label[i])\nplt.tight_layout(pad=0.5)\nplt.show()","a7ba39c3":"# Display 2 pictures of the Pnedumonia dataset\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(pneumonia_df.Filepath[i]))\n    ax.set_title(pneumonia_df.Label[i])\nplt.tight_layout(pad=0.5)\nplt.show()","a5fd1b99":"# Display 2 pictures of the Turberculosis dataset\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(turberculosis_df.Filepath[i]))\n    ax.set_title(turberculosis_df.Label[i])\nplt.tight_layout(pad=0.5)\nplt.show()","5e5775a7":"df = pd.concat([covid_df, normal_df, turberculosis_df, pneumonia_df], axis=0)\ndisplay(df)","7ac5d118":"df.Label.value_counts(), len(df.Label)","6b2868ac":"#train test split\n# Take a .25 sample from the data frame\nint(len(df) * 0.25)    #  >> num of test images","4d157415":"test_df = df.sample(n=1581,random_state=42)\ntest_df.Label.value_counts()","b7be8cbd":"train_df = df.merge(test_df, how = 'outer' ,indicator=True).loc[lambda x : x['_merge']=='left_only']","3a9ad4b4":"train_df.Label.value_counts()","2be40330":"len(train_df.Label)","dd0a277f":"# Train generator\ntrain_generator = ImageDataGenerator(\n    preprocessing_function= preprocess_input,\n    rescale=1.\/255\n)\n\ntrain_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(120, 120),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)","31d7d6f3":"# Test generator\ntest_generator = ImageDataGenerator(\n    preprocessing_function= preprocess_input,\n    rescale=1.\/255\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(120, 120),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)","9074a509":"model= Sequential()\n\nmodel.add(Conv2D(kernel_size=(3,3), filters=32, activation='relu', input_shape=(120,120,1,)))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(4,activation = 'softmax'))  # the output layer","c73ee32e":"model.compile(loss = 'categorical_crossentropy', optimizer ='adam', metrics= ['accuracy'])","1efb834c":"model.summary()","81d2554b":"#Early stop setup\nfrom tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)","e659a2e7":"model.fit(train_images, epochs = 12 , validation_data = test_images, verbose=1, callbacks=early_stop)","a592fd66":"pd.DataFrame(model.history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\") \nplt.show()","9d18c333":"pd.DataFrame(model.history.history)[['loss','val_loss']].plot()\nplt.title(\"Accuracy\") \nplt.show()  ","cda04b8d":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\n# Display the result\nprint(f'The first 5 predictions: {pred[:5]}')\n#print(test_images.classes)\nres = []\nfor i in test_images.classes[:5]:\n    res.append(labels[i])\nprint(f'The first 5 true labels are: {res}')","ed03a7a2":"print(labels[2])","95549e2e":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(test_images.classes, predictions)\nimport seaborn as sns\nsns.heatmap(cm, annot = True, cmap = \"Blues\")","0e3bf046":"#x = list(test_df['Label'])\n#fields = [\"PNEUMONIA\", \"NORMAL\", \"TURBERCULOSIS\", \"COVID19\"]\n#for i in range(len(x)):\n   # x[i] = fields.index(x[i])\n#x = np.array(x)\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\npredictions = pred.reshape(1,-1)[0]\nprint(classification_report(test_images.classes, predictions))","89f14dca":"# **Image Generator **"}}