{"cell_type":{"792dd141":"code","665da545":"code","c420cb2c":"code","8d2d1636":"code","cedec6ca":"code","51057ec6":"markdown","93cc2abc":"markdown"},"source":{"792dd141":"%%writefile submission.py\n\nimport random\nimport pydash\nfrom collections import Counter\n\n# Create a small amount of starting history\nhistory = {\n    \"guess\":      [0,1,2],\n    \"prediction\": [0,1,2],\n    \"expected\":   [0,1,2],\n    \"action\":     [1,2,0],\n    \"opponent\":   [0,1],\n    \"rotn\":       [0,1],\n}\n# observation   =  {'step': 1, 'lastOpponentAction': 1}\n# configuration =  {'episodeSteps': 1000, 'agentTimeout': 60, 'actTimeout': 1, 'runTimeout': 1200, 'isProduction': False, 'signs': 3}\ndef statistical_prediction_agent(observation, configuration):    \n    global history\n    actions          = list(range(configuration.signs))  # [0,1,2]\n    last_action      = history['action'][-1]\n    prev_opp_action  = history['opponent'][-1]\n    opponent_action  = observation.lastOpponentAction if observation.step > 0 else 2\n    rotn             = (opponent_action - prev_opp_action) % configuration.signs\n\n    history['opponent'].append(opponent_action)\n    history['rotn'].append(rotn)\n    \n    # Make weighted random guess based on the complete move history, weighted towards relative moves based on our last action \n    move_frequency   = Counter(history['rotn'])\n    action_frequency = Counter(zip(history['action'], history['rotn'])) \n    move_weights     = [   move_frequency.get(n, 1) \n                         + action_frequency.get((last_action,n), 1) \n                         for n in range(configuration.signs) ] \n    guess            = random.choices( population=actions, weights=move_weights, k=1 )[0]\n    \n    # Compare our guess to how our opponent actually played\n    guess_frequency  = Counter(zip(history['guess'], history['rotn']))\n    guess_weights    = [ guess_frequency.get((guess,n), 1) \n                         for n in range(configuration.signs) ]\n    prediction       = random.choices( population=actions, weights=guess_weights, k=1 )[0]\n\n    # Repeat, but based on how many times our prediction was correct\n    pred_frequency   = Counter(zip(history['prediction'], history['rotn']))\n    pred_weights     = [ pred_frequency.get((prediction,n), 1) \n                         for n in range(configuration.signs) ]\n    expected         = random.choices( population=actions, weights=pred_weights, k=1 )[0]\n\n    \n    # Slowly decay to 50% pure randomness as the match progresses\n    pure_random_chance = observation.step \/ (configuration.episodeSteps * 2)\n    if random.random() < pure_random_chance:\n        action = random.randint(0, configuration.signs-1)\n        is_pure_random_chance = True\n    else:\n        # Play the +1 counter move\n        # action = (expected + 1) % configuration.signs                  # without rotn\n        action = (opponent_action + expected + 1) % configuration.signs  # using   rotn\n        is_pure_random_chance = False\n    \n    # Persist state\n    history['guess'].append(guess)\n    history['prediction'].append(prediction)\n    history['expected'].append(expected)\n    history['action'].append(action)\n\n    # Print debug information\n    print('step                      = ', observation.step)\n    print('opponent_action           = ', opponent_action)\n    print('guess,      move_weights  = ', guess,      move_weights)\n    print('prediction, guess_weights = ', prediction, guess_weights)\n    print('expected,   pred_weights  = ', expected,   pred_weights)\n    print('action                    = ', action)\n    print('pure_random_chance        = ', f'{100*pure_random_chance:.2f}%', is_pure_random_chance)\n    print()\n    \n    return action","665da545":"%run -i 'submission.py'","c420cb2c":"import random\nfrom collections import Counter\ndef random_agent(observation, configuration):\n    return random.randint(0, configuration.signs-1)","8d2d1636":"from kaggle_environments import make\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 10}, debug=True)\n# env.run([\"submission.py\", lambda obs, conf: random.randint(0, 2)])\nenv.run([\"submission.py\", 2])\nprint(env.render(mode=\"ansi\", width=600, height=600))","cedec6ca":"env = make(\"rps\", configuration={\"episodeSteps\": 100}, debug=False)\nenv.run([\"submission.py\", 1])\nenv.render(mode=\"ipython\", width=600, height=600)","51057ec6":"# Rock Paper Scissors - Statistical Prediction\n\nThe goal here is to build a game history, make a statistically weighted guess, then compare that prediction against what our opponent actually played.\n\nWe also use the RotN indexing concept from the [Anti-RotN](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn) agent","93cc2abc":"# Further Reading\n\nThis notebook is part of a series exploring Rock Paper Scissors:\n\nPredetermined\n- [PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-pi-bot)\n- [Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-pi-bot)\n- [Anti-Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-anti-pi-bot)\n- [De Bruijn Sequence](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-de-bruijn-sequence)\n\nRNG\n- [Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-agent)\n- [Random Seed Search](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-seed-search)\n- [RNG Statistics](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-rng-statistics)\n\nOpponent Response\n- [Anti-Rotn](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn)\n- [Sequential Strategies](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-sequential-strategies)\n\nStatistical \n- [Weighted Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-weighted-random-agent)\n- [Statistical Prediction](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-statistical-prediction)\n- [Anti-Rotn Weighted Random](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn-weighted-random)\n\nMemory Patterns\n- [Naive Bayes](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-naive-bayes)\n- [Memory Patterns](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-memory-patterns)\n\nDecision Tree\n- [XGBoost](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-xgboost)\n- [Multi Stage Decision Tree](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-stage-decision-tree)\n- [Decision Tree Ensemble](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-decision-tree-ensemble)\n\nEnsemble\n- [Multi Armed Stats Bandit](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-armed-stats-bandit)\n\nRoShamBo Competition Winners\n- [Iocaine Powder](https:\/\/www.kaggle.com\/jamesmcguigan\/rps-roshambo-comp-iocaine-powder)\n- [Greenberg](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-greenberg)"}}