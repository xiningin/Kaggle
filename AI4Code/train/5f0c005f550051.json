{"cell_type":{"6a7d836c":"code","b6be99e8":"code","67383388":"code","91044484":"code","cf510521":"code","b0a9b34e":"code","8450a646":"code","01fb7de8":"code","fefbf7ce":"code","cb93ef79":"code","584078b4":"code","997e2698":"code","9b96998e":"code","c0b7b7fc":"code","a7caf404":"code","1f34441b":"code","493cb9da":"code","43222464":"code","434d9193":"code","550a85df":"code","d84c7397":"code","29f91f21":"code","3efaba4b":"code","56de2311":"code","59483a5e":"code","2be92f33":"code","a4f8805a":"code","5e23f60b":"code","f6d47763":"code","256bb7f3":"code","59d10695":"code","46b78910":"code","394f6443":"code","3642e0ce":"code","56e41442":"code","f3c82840":"code","3408e515":"code","5d2a3193":"code","6648fd80":"code","ae6be1a6":"code","bb0bf09b":"code","5c25aa68":"code","d8457bbe":"code","d34a517d":"code","774c1958":"code","79e24615":"code","31fb37e9":"code","97cf861e":"code","a9917695":"code","18f77725":"code","83837883":"code","7b3ffbe7":"code","8925c9eb":"code","81e33978":"code","649f6d49":"code","30361a08":"code","2410500e":"code","89253f18":"code","0329ceb1":"code","5b151afd":"code","af8dc300":"code","ea375da3":"code","87a3e986":"code","1bd9f1b4":"code","3df7a8fd":"code","e2dc131c":"code","067c5469":"code","1b99a215":"code","7ace4c99":"code","2d56606c":"code","97466f03":"code","c6f5a703":"code","0c80f459":"code","effb0379":"code","12d06570":"code","9e10e661":"code","23e77cc4":"code","8a6b8cec":"code","2d47fcf7":"code","b1b249c4":"code","04c6ccd8":"code","0b2d776a":"code","eaa67eb9":"code","63b688d1":"code","f59c35fd":"code","c50ba815":"code","66c4abb5":"code","e49b04aa":"code","38c43cca":"code","ce4ef5dc":"code","fb772a34":"code","9c4d535d":"code","c49c995f":"code","d15488db":"code","bb0ffd1e":"code","a6199faf":"code","ca5b342c":"code","f1a07a90":"code","e7b184f1":"code","423f420c":"code","39190c55":"code","6e174d7b":"code","501c9a90":"code","c2f34db8":"code","ce09d4e4":"code","06ff62a2":"code","2ec3464e":"code","2dddbe35":"code","454661f5":"code","bddff678":"code","832a3c10":"code","da275568":"code","0f7de408":"code","073bf7de":"code","f19564c6":"code","c1d46cb9":"code","1f0f1726":"code","90e69691":"code","e0bb3a85":"code","79b3f9ad":"code","2d86de95":"markdown","e8de7d00":"markdown","7954e47d":"markdown","422a933c":"markdown","bbbc54b6":"markdown","966b4409":"markdown","291fb30d":"markdown","b7a03326":"markdown","ced80d37":"markdown","1e13b155":"markdown","31d9eddc":"markdown","1f10a1b9":"markdown","66399020":"markdown","b830b377":"markdown","1be26404":"markdown","4e0f07ba":"markdown","d0a666e6":"markdown","e60ede32":"markdown","41a8e845":"markdown","5fffa818":"markdown","740ac4a2":"markdown","d5bbbbb3":"markdown","f7cadd61":"markdown","22731bd7":"markdown","7be33918":"markdown","77cedbb9":"markdown","b00b3e26":"markdown","69f49c61":"markdown","ececfd12":"markdown","0fafe5f2":"markdown","3357b7f6":"markdown","bff1d906":"markdown","cedc615a":"markdown","e62a3477":"markdown","288bcd09":"markdown","ca17fb81":"markdown","36aaaddc":"markdown","7e1f88cd":"markdown","ac4435ec":"markdown","52a76557":"markdown","6fc6bcc3":"markdown","eaecd85a":"markdown","4888db16":"markdown","d4752b79":"markdown","562ea6ee":"markdown","3fa1e546":"markdown","066a5fe1":"markdown","7d6d5a91":"markdown","a6e691da":"markdown","7a8ba030":"markdown","bb7f76f7":"markdown","3f52761c":"markdown","fdb839ef":"markdown","2ed65b96":"markdown","9722fd79":"markdown","da5d15ae":"markdown","fc1de3ba":"markdown","14b18a93":"markdown","9f1c3dce":"markdown","972cd0a2":"markdown","9af3b4eb":"markdown","910b38b2":"markdown","871ce8a2":"markdown","87274b8f":"markdown","451024ca":"markdown","bfe2b467":"markdown","d8071787":"markdown","1fa81ba4":"markdown","0ad7a297":"markdown","a286371f":"markdown","d486f570":"markdown","cde0c749":"markdown","fb04ab0f":"markdown","25b3d792":"markdown"},"source":{"6a7d836c":"# Import useful libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom scipy import stats\nfrom scipy.stats import norm, skew, boxcox_normmax\nfrom scipy.special import boxcox1p\nimport warnings\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC, Ridge\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom sklearn_pandas import DataFrameMapper\nimport xgboost as xgb\nimport lightgbm as lgb\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n","b6be99e8":"#bring in the six packs\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","67383388":"train.columns","91044484":"train.shape","cf510521":"test.shape","b0a9b34e":"#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\ntrain = train.drop('Id', axis=1)\ntest = test.drop('Id', axis=1)","8450a646":"# Looking for outliers, as indicated in https:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/decock.pdf\nplt.scatter(train.GrLivArea, train.SalePrice, c = \"blue\", marker = \"s\")\nplt.title(\"Looking for outliers\")\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")","01fb7de8":"# Removing outliers\ntrain = train[train.GrLivArea < 4000]","fefbf7ce":"train['SalePrice'].describe()","cb93ef79":"plt.boxplot(train['SalePrice'], vert=False)","584078b4":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)","997e2698":"#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","9b96998e":"train['SalePrice'] = np.log1p (train['SalePrice'])","c0b7b7fc":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)","a7caf404":"#scatter plot LotArea\/saleprice\nvar = 'LotArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice');","1f34441b":"#scatter plot TotRmsAbvGrd\/saleprice\nvar = 'TotRmsAbvGrd'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice');","493cb9da":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","43222464":"#box plot MSSubClass\/saleprice\nvar = 'MSSubClass'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","434d9193":"#box plot MSZoning\/saleprice\nvar = 'MSZoning'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","550a85df":"#box plot Neighborhood\/saleprice\nvar = 'Neighborhood'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 12))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","d84c7397":"#box plot BldgType\/saleprice\nvar = 'BldgType'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","29f91f21":"#box plot OverallCond\/saleprice\nvar = 'OverallCond'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\n","3efaba4b":"#box plot SaleCondition\/saleprice\nvar = 'SaleCondition'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","56de2311":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","59483a5e":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_trainf = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","2be92f33":"#missing data\ntotal = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum()\/all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(35)","a4f8805a":"all_data['PoolQC'].value_counts()","5e23f60b":"all_data['PoolArea'].value_counts()","f6d47763":"all_data[['PoolArea','PoolQC']].loc[all_data['PoolArea'] > 0]","256bb7f3":"all_data.loc[all_data.index[2416],'PoolQC'] = 'Gd'\nall_data.loc[all_data.index[2499],'PoolQC'] = 'Gd'\nall_data.loc[all_data.index[2595],'PoolQC'] = 'Gd'","59d10695":"all_data[['PoolArea','PoolQC']].loc[all_data['PoolArea'] > 0]","46b78910":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","394f6443":"all_data['PoolQC'].value_counts()","3642e0ce":"all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")","56e41442":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")","f3c82840":"all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","3408e515":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","5d2a3193":"#box plot overallqual\/saleprice\nvar = 'Neighborhood'\ndata = pd.concat([all_data['LotFrontage'], all_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 12))\nfig = sns.boxplot(x=var, y=\"LotFrontage\", data=data)\n#fig.axis(ymin=0, ymax=800000);","6648fd80":"all_data[\"GarageType\"] = all_data[\"GarageType\"].fillna(\"None\")\nall_data[\"GarageFinish\"] = all_data[\"GarageFinish\"].fillna(\"None\")\nall_data[\"GarageQual\"] = all_data[\"GarageQual\"].fillna(\"None\")\nall_data[\"GarageCond\"] = all_data[\"GarageCond\"].fillna(\"None\")","ae6be1a6":"all_data['GarageYrBlt'] = all_data['GarageYrBlt'].fillna(0)","bb0bf09b":"all_data[['BsmtExposure','BsmtCond','BsmtQual','BsmtFinType2','BsmtFinType1','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']].loc[pd.isnull(all_data['BsmtExposure']) | pd.isnull(all_data['BsmtCond']) | pd.isnull(all_data['BsmtQual']) | pd.isnull(all_data['BsmtFinType2']) | pd.isnull(all_data['BsmtFinType1']) ]","5c25aa68":"all_data.loc[pd.isnull(all_data['BsmtExposure']) & pd.isnull(all_data['BsmtCond']) & pd.isnull(all_data['BsmtQual']) & pd.isnull(all_data['BsmtFinType2']) & pd.isnull(all_data['BsmtFinType1']),['BsmtExposure','BsmtCond','BsmtQual','BsmtFinType2','BsmtFinType1']] = 'None'","d8457bbe":"all_data[['BsmtExposure','BsmtCond','BsmtQual','BsmtFinType2','BsmtFinType1']].loc[pd.isnull(all_data['BsmtExposure']) | pd.isnull(all_data['BsmtCond']) | pd.isnull(all_data['BsmtQual']) | pd.isnull(all_data['BsmtFinType2']) | pd.isnull(all_data['BsmtFinType1']) ]","d34a517d":"all_data['BsmtExposure'].value_counts()","774c1958":"all_data.loc[all_data.index[946],'BsmtExposure'] = 'No'\nall_data.loc[all_data.index[1483],'BsmtExposure'] = 'No'\nall_data.loc[all_data.index[2344],'BsmtExposure'] = 'No'","79e24615":"all_data['BsmtCond'].value_counts()","31fb37e9":"all_data.loc[all_data.index[2036],'BsmtCond'] = 'TA'\nall_data.loc[all_data.index[2181],'BsmtCond'] = 'TA'\nall_data.loc[all_data.index[2520],'BsmtCond'] = 'TA'","97cf861e":"all_data['BsmtQual'].value_counts()","a9917695":"all_data.loc[all_data.index[2213],'BsmtQual'] = 'Gd'\nall_data.loc[all_data.index[2214],'BsmtQual'] = 'Gd'","18f77725":"all_data['BsmtFinType2'].value_counts()","83837883":"all_data.loc[all_data.index[332],'BsmtFinType2'] = 'Unf'","7b3ffbe7":"all_data[['MasVnrArea','MasVnrType']].loc[pd.isnull(all_data['MasVnrArea']) | pd.isnull(all_data['MasVnrType'])]","8925c9eb":"all_data['MasVnrArea'].value_counts()","81e33978":"all_data['MasVnrType'].value_counts()","649f6d49":"all_data.loc[(pd.isnull(all_data['MasVnrArea']) & pd.isnull(all_data['MasVnrType'])),['MasVnrType']] = 'None'\nall_data.loc[(pd.isnull(all_data['MasVnrArea'])),['MasVnrArea']] = 0\nall_data.loc[(all_data['MasVnrArea'] != 0) & (all_data['MasVnrType'] == 'None'),['MasVnrType']] = 'BrkFace'\nall_data.loc[all_data.index[2606],'MasVnrType'] = 'BrkFace'","30361a08":"all_data['MasVnrArea'].value_counts()","2410500e":"all_data['MasVnrType'].value_counts()","89253f18":"all_data[['MasVnrArea','MasVnrType']].loc[pd.isnull(all_data['MasVnrArea']) | pd.isnull(all_data['MasVnrType'])]","0329ceb1":"all_data[['MSZoning','Neighborhood']].loc[pd.isnull(all_data['MSZoning'])]","5b151afd":"all_data['MSZoning'].loc[all_data['Neighborhood'] == 'IDOTRR'].value_counts()","af8dc300":"all_data['MSZoning'].loc[all_data['Neighborhood'] == 'Mitchel'].value_counts()","ea375da3":"all_data.loc[all_data.index[1911],'MSZoning'] = 'RM'\nall_data.loc[all_data.index[2212],'MSZoning'] = 'RM'\nall_data.loc[all_data.index[2246],'MSZoning'] = 'RM'\nall_data.loc[all_data.index[2900],'MSZoning'] = 'RL'","87a3e986":"all_data['MSZoning'].loc[all_data['Neighborhood'] == 'IDOTRR'].value_counts()","1bd9f1b4":"all_data['MSZoning'].loc[all_data['Neighborhood'] == 'Mitchel'].value_counts()","3df7a8fd":"all_data[['BsmtHalfBath','BsmtFullBath','TotalBsmtSF','BsmtUnfSF','BsmtFinSF1','BsmtFinSF2', 'BsmtExposure', 'BsmtCond', 'BsmtQual']].loc[pd.isnull(all_data['BsmtHalfBath']) | pd.isnull(all_data['BsmtFullBath']) | pd.isnull(all_data['TotalBsmtSF']) | pd.isnull(all_data['BsmtUnfSF']) | pd.isnull(all_data['BsmtFinSF1']) | pd.isnull(all_data['BsmtFinSF2'])]","e2dc131c":"all_data.loc[all_data.index[2116],['BsmtHalfBath','BsmtFullBath','TotalBsmtSF','BsmtUnfSF','BsmtFinSF1','BsmtFinSF2']] = 0\nall_data.loc[all_data.index[2184],['BsmtHalfBath','BsmtFullBath','TotalBsmtSF','BsmtUnfSF','BsmtFinSF1','BsmtFinSF2']] = 0","067c5469":"all_data['Utilities'].value_counts()","1b99a215":"all_data['Utilities'].loc[pd.isnull(all_data['Utilities'])] = 'AllPub'","7ace4c99":"all_data['Utilities'].value_counts()","2d56606c":"all_data['Functional'].value_counts()","97466f03":"all_data['Functional'].loc[pd.isnull(all_data['Functional'])] = 'Typ'","c6f5a703":"all_data['Functional'].value_counts()","0c80f459":"all_data['Electrical'].value_counts()","effb0379":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","12d06570":"all_data['Electrical'].value_counts()","9e10e661":"all_data['Exterior1st'].value_counts()","23e77cc4":"all_data['Exterior2nd'].value_counts()","8a6b8cec":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","2d47fcf7":"all_data['KitchenQual'].value_counts()","b1b249c4":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","04c6ccd8":"all_data[['GarageArea','GarageCars','GarageQual','GarageCond']].loc[pd.isnull(all_data['GarageArea']) | pd.isnull(all_data['GarageCars'])]","0b2d776a":"for col in ('GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","eaa67eb9":"all_data['SaleType'].value_counts()","63b688d1":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","f59c35fd":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\nall_data['MoSold'] = all_data['MoSold'].astype(str)","c50ba815":"#all_data = all_data.drop(['Utilities', 'Street', 'PoolQC',], axis=1)\n\nall_data['YrBltAndRemod']=all_data['YearBuilt']+all_data['YearRemodAdd']\nall_data['TotalSF']=all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n\nall_data['Total_sqr_footage'] = (all_data['BsmtFinSF1'] + all_data['BsmtFinSF2'] +\n                                 all_data['1stFlrSF'] + all_data['2ndFlrSF'])\n\nall_data['Total_Bathrooms'] = (all_data['FullBath'] + (0.5 * all_data['HalfBath']) +\n                               all_data['BsmtFullBath'] + (0.5 * all_data['BsmtHalfBath']))\n\nall_data['Total_porch_sf'] = (all_data['OpenPorchSF'] + all_data['3SsnPorch'] +\n                              all_data['EnclosedPorch'] + all_data['ScreenPorch'] +\n                              all_data['WoodDeckSF'])","66c4abb5":"all_data['haspool'] = all_data['PoolArea'].apply(lambda x: '1' if x > 0 else '0')\nall_data['has2ndfloor'] = all_data['2ndFlrSF'].apply(lambda x: '1' if x > 0 else '0')\nall_data['hasgarage'] = all_data['GarageArea'].apply(lambda x: '1' if x > 0 else '0')\nall_data['hasbsmt'] = all_data['TotalBsmtSF'].apply(lambda x: '1' if x > 0 else '0')\nall_data['hasfireplace'] = all_data['Fireplaces'].apply(lambda x: '1' if x > 0 else '0')","e49b04aa":"numeric_feats = all_data.dtypes[all_data.dtypes != object].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","38c43cca":"skew=all_data.select_dtypes(include=['int','float']).apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskew_df=pd.DataFrame({'Skew':skew})\nskewed_df=skew_df[(skew_df['Skew']>0.5)|(skew_df['Skew']<-0.5)]\nskewed_df.index","ce4ef5dc":"lam=0.1\nfor col in ('MiscVal', 'PoolArea', 'LotArea', 'LowQualFinSF', '3SsnPorch',\n       'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch', 'ScreenPorch',\n       'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF',\n       'LotFrontage', 'GrLivArea', 'BsmtFinSF1', 'BsmtUnfSF', 'Fireplaces',\n       'HalfBath', 'TotalBsmtSF', 'BsmtFullBath', 'OverallCond', 'YearBuilt',\n       'GarageYrBlt'):\n    all_data[col]=boxcox1p(all_data[col],boxcox_normmax(all_data[col] + 1))","fb772a34":"skewness","9c4d535d":"all_data.describe()","c49c995f":"all_data","d15488db":"# Encode some categorical features as ordered numbers when there is information in the order\nall_data = all_data.replace({\"BsmtCond\" : {\"None\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"BsmtExposure\" : {\"None\" : 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n                       \"BsmtFinType1\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtFinType2\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"ExterCond\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"ExterQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"FireplaceQu\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                        \"Functional\" : {\"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \"Maj1\" : 4, \"Mod\": 5, \n                                       \"Min2\" : 6, \"Min1\" : 7, \"Typ\" : 8},\n                       \"GarageCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"HeatingQC\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"KitchenQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"LandSlope\" : {\"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                       \"LotShape\" : {\"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \"Reg\" : 4},\n                       \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \"PoolQC\" : {\"No\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \"Ex\" : 4},\n                       \"Street\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                       \"Utilities\" : {\"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \"AllPub\" : 4}}\n                     )","bb0ffd1e":"final_features = pd.get_dummies(all_data).reset_index(drop=True)\nfinal_features.shape","a6199faf":"y = final_features['LotFrontage'].dropna()\nX = final_features.dropna().drop('LotFrontage', axis=1)\nX_predict = final_features.loc[pd.isnull(final_features['LotFrontage'])].drop('LotFrontage', axis=1)","ca5b342c":"X.shape","f1a07a90":"X_predict.shape","e7b184f1":"y.shape","423f420c":"def rmse(targets, predictions):\n    return np.sqrt(mean_squared_error(targets,predictions))\nrmse_score = make_scorer (rmse, greater_is_better = False)","39190c55":"scaler = RobustScaler ()\nX = scaler.fit_transform(X)\nX_predict = scaler.transform(X_predict)","6e174d7b":"X_train, X_test, y_train, y_test = train_test_split(X,y,random_state = 45)","501c9a90":"params = {'alpha' : [0.01, 0.1, 1, 10, 100, 1000] }\ngridsearch_lasso = GridSearchCV (Lasso(),params, scoring = rmse_score)\ngridsearch_lasso.fit(X_train, y_train)\nprint (\"Meilleurs parametres: \", gridsearch_lasso.best_params_)\ngridsearch_lasso.score(X_test, y_test)","c2f34db8":"params = {'alpha' : [0.01, 0.1, 1, 10, 100, 1000] }\ngridsearch_ridge = GridSearchCV (Ridge(),params, scoring = rmse_score)\ngridsearch_ridge.fit(X_train, y_train)\nprint (\"Meilleurs parametres: \", gridsearch_ridge.best_params_)\ngridsearch_ridge.score(X_test, y_test)","ce09d4e4":"params = {'alpha' : [0.01, 0.1, 1, 10, 100, 1000], \n          'l1_ratio' : [0.1, 0.3, 0.5, 0.7, 0.9]}\ngridsearch_elasticnet = GridSearchCV (ElasticNet(),params, scoring = rmse_score)\ngridsearch_elasticnet.fit(X_train, y_train)\nprint (\"Meilleurs parametres: \", gridsearch_elasticnet.best_params_)\ngridsearch_elasticnet.score(X_test, y_test)","06ff62a2":"rdforest = RandomForestRegressor(bootstrap = True, max_depth = 100, max_features = 3, min_samples_leaf = 3, min_samples_split = 8, n_estimators = 200)\nrdforest.fit(X_train,y_train)\nprint (\"R2 score for train set : \", rdforest.score(X_train, y_train))\nprint (\"R2 score for test set : \", rdforest.score(X_test, y_test))","2ec3464e":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\nKRR.fit(X_train, y_train)\ny_pred = KRR.predict(X_test)\nKRR.score (X_test, y_test)","2dddbe35":"svr = SVR(kernel='rbf', C=100, gamma=0.001)\nsvr.fit(X_train, y_train)\ny_pred = svr.predict(X_test)\nsvr.score(X_test, y_test)","454661f5":"final_features.loc[final_features[\"LotFrontage\"].isnull(),\"LotFrontage\"] = gridsearch_elasticnet.predict(X_predict)\n#y_predict = gridsearch_elasticnet.predict(X_predict)\n#deter_data.loc[df[feature].isnull(), \"Det\" + feature] = model.predict(df[parameters])[df[feature].isnull()]","bddff678":"#missing data\ntotal = final_features.isnull().sum().sort_values(ascending=False)\npercent = (final_features.isnull().sum()\/final_features.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(35)","832a3c10":"scaler_lotfrontage = RobustScaler()\nfinal_features = scaler_lotfrontage.fit_transform(final_features)","da275568":"train = final_features[:ntrain]\ntest = final_features[ntrain:]","0f7de408":"def rmse(targets, predictions):\n    return np.sqrt(mean_squared_error(targets,predictions))\nrmse_score = make_scorer (rmse, greater_is_better = False)","073bf7de":"train.shape","f19564c6":"y_trainf.shape","c1d46cb9":"X_tr, X_val, y_tr, y_val = train_test_split(train, y_trainf, random_state = 3)","1f0f1726":"params = {'alpha' : [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000] }\ngridsearch_lasso = GridSearchCV (Lasso(),params, scoring=rmse_score)\ngridsearch_lasso.fit(X_tr, y_tr)\nprint (\"Meilleurs parametres: \", gridsearch_lasso.best_params_)\ngridsearch_lasso.score(X_val, y_val)","90e69691":"params = {'alpha' : [0.0008, 0.009, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006] }\ngridsearch_lasso = GridSearchCV (Lasso(),params, scoring=rmse_score)\ngridsearch_lasso.fit(X_tr, y_tr)\nprint (\"Meilleurs parametres: \", gridsearch_lasso.best_params_)\ngridsearch_lasso.score(X_val, y_val)","e0bb3a85":"lasso = Lasso(alpha = 0.001)\nlasso.fit(train, y_trainf)\nlasso_pred = np.expm1(lasso.predict(test))\nsub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = lasso_pred\nsub.to_csv('submission.csv',index=False)","79b3f9ad":"sub","2d86de95":"y_train_rdforest = rdforest.predict(X_train)\ny_test_rdforest = rdforest.predict(X_test)\n\n# Plot residuals\nplt.scatter(y_train_rdforest, y_train_rdforest - y_train, c = \"blue\", marker = \"s\", label = \"Training data\")\nplt.scatter(y_test_rdforest, y_test_rdforest - y_test, c = \"lightgreen\", marker = \"s\", label = \"Validation data\")\nplt.title(\"Linear regression with ElasticNet regularization\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Residuals\")\nplt.legend(loc = \"upper left\")\nplt.hlines(y = 0, xmin = 10.5, xmax = 13.5, color = \"red\")\nplt.show()\n\n# Plot predictions\nplt.scatter(y_train, y_train_rdforest, c = \"blue\", marker = \"s\", label = \"Training data\")\nplt.scatter(y_test, y_test_rdforest, c = \"lightgreen\", marker = \"s\", label = \"Validation data\")\nplt.title(\"Linear regression with ElasticNet regularization\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Real values\")\nplt.legend(loc = \"upper left\")\nplt.plot([10.5, 13.5], [10.5, 13.5], c = \"red\")\nplt.show()","e8de7d00":"We fill the blank with the median and most common value : TA","7954e47d":"Encoding of categorical features","422a933c":"5. Relationship between SalePrice and some other variables","bbbc54b6":"Let's fill the blanks with the most common value","966b4409":"The huge majority of basements have an unfinished type 2, let's fill the blanks with \"Unf\"","291fb30d":"Now that we preprocessed the data, we can use regression techniques to predict SalePrice data","b7a03326":"MSZoning","ced80d37":"params = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 200, 300, 1000]\n}\n\ngridsearch_rdforest = GridSearchCV (RandomForestRegressor(),params, scoring = rmse_score)\ngridsearch_rdforest.fit(X_train, y_train)\nprint (\"Meilleurs parametres: \", gridsearch_rdforest.best_params_)\ngridsearch_rdforest.score(X_test, y_test)","1e13b155":"FireplaceQu","31d9eddc":"BsmtXXX","1f10a1b9":"GarageYrBlt","66399020":"# Classifier with tuned parameteres\nclf = svm.SVR(kernel='rbf', C=100, gamma=0.001)\n\n# Set initial scores\nacc = 0\nacc1 = 0\nacc2 = 0\n\n# Defien k-fold object for 10-fold validation\nkf = KFold(n_splits=10, shuffle=True, random_state=3) \n\n# Main evaluator loop over the 10 folds\nfor trn, tst in kf.split(train):\n    \n    # Compute benchmark score prediction based on mean neighbourhood LotFrontage\n    fold_train_samples = train.iloc[trn]\n    fold_test_samples = train.iloc[tst]\n    neigh_means = fold_train_samples.groupby('Neighborhood')['LotFrontage'].mean()\n    all_mean = fold_train_samples['LotFrontage'].mean()\n    y_pred_neigh_means = fold_test_samples.join(neigh_means, on = 'Neighborhood', lsuffix='benchmark')['LotFrontage']\n    y_pred_all_mean = [all_mean] * fold_test_samples.shape[0]\n    \n    # Compute benchmark score prediction based on overall mean LotFrontage\n    u1 = ((fold_test_samples['LotFrontage'] - y_pred_neigh_means) ** 2).sum()\n    u2 = ((fold_test_samples['LotFrontage'] - y_pred_all_mean) ** 2).sum()\n    v = ((fold_test_samples['LotFrontage'] - fold_test_samples['LotFrontage'].mean()) ** 2).sum()\n    \n    # Perform model fitting \n    clf.fit(X_train.iloc[trn], y_lotFrontage.iloc[trn])\n    \n    # Record all scores for averaging\n    acc = acc + mean_absolute_error(fold_test_samples['LotFrontage'], clf.predict(X_train.iloc[tst]))\n    acc1= acc1 + mean_absolute_error(fold_test_samples['LotFrontage'], y_pred_neigh_means)\n    acc2 = acc2 + mean_absolute_error(fold_test_samples['LotFrontage'], y_pred_all_mean)\n\n    \nprint('10-Fold Validation Mean Absolute Error results:')\nprint('\\tSVR: {:.3}'.format(acc\/10))\nprint('\\tSingle mean: {:.3}'.format(acc2\/10))\nprint('\\tNeighbourhood mean: {:.3}'.format(acc1\/10))","b830b377":"**6. Apply regression models on SalePrice**","1be26404":"Functional","4e0f07ba":"Alley","d0a666e6":"LotFrontage","e60ede32":"LotFrontage","41a8e845":"We notice different cases to solve :\n* Both MasVnrArea and MasVnrType are empty : we will consider that there is no masonry and set to 0 and None\n* MasVnrArea is different than 0 and MasVnrType is empty or 'None' : we will set MasVnrType to BrkFace","5fffa818":"Intuitively, we can suppose that MSZoning depends on the Neighborhood. Let's check it","740ac4a2":"params = {'kernel' : [\"rbf\"],\n          'C' : [0.1, 1, 10, 100, 1000, 10000],\n          'gamma' :[\"auto\",0.0001, 0.001, 0.01, 0.1] }\ngridsearch_svr = GridSearchCV (SVR(),params, scorer = rmse_score)\ngridsearch_svr.fit(X_train, y_train)\nprint (\"Meilleurs parametres: \", gridsearch_svr.best_params_)\ngridsearch_svr.score(X_test, y_test)","d5bbbbb3":"Regarding the previous graph, I'm not convinced this is the right method.\nLet's try to do a linear regression to predict missing values.","f7cadd61":"As the huge majority is 'AllPub', we can fill the blanks with this value","22731bd7":"Here there are 11 values different than 0...","7be33918":"The huge majority of basements have a \"typical\" condition, let's fill the blanks with \"TA\"","77cedbb9":"Utilities","b00b3e26":"* BsmtCond","69f49c61":"Regression likes standardized values so let's apply StandardScaler(). I use DataFrameMapper to keep DataFrame format (more information here : http:\/\/ryankresse.com\/convenient-preprocessing-with-sklearn_pandas-dataframemapper\/)","ececfd12":"Unfortunetely, we can notice that the empty lines are not the same contrary to what we could expect.\nWe can defferienciate two cases :\n* the lines are all empties : we can assume that there is no basement\n* At least one line is filled : there is missing data that we need to treat\n\nLet's first solve the first case by filling the cells by \"None\"","0fafe5f2":"5. Corr\u00e9lation entre les variables","3357b7f6":"1. Import useful libraries","bff1d906":"Only 8 values are completed. Let's compare this with PoolArea","cedc615a":"KitchenQual","e62a3477":"For this field, I had a look on the Kernel of Sevign who propose a method, assuming that the lot frontage in a neighborhood should almost be the same for every lot. Let's analyse this by ploting the box plot of Lotfrontage for each neaighborhood.","288bcd09":"skewness = skewness[abs(skewness) > 0.5]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nskewed_features = skewness.index\n\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], boxcox_normmax(all_data[feat] + 1))","ca17fb81":"This is reassuring. The lines filled for PoolQC correpond to lines different than null for PoolArea.\nBut it means that 3 lines have a PoolArea different than 0 but with PoolQC not filled.\n\nI choose to fill them with 'Gd', which is the mean and median of existing values.\nI will consider that the null values for PoolQC means they have no pool (considering that the big majority of people don't have a pool) and fill them to NA","36aaaddc":"2. Dataset Analyse","7e1f88cd":"SaleType","ac4435ec":"Best parameters of gridsearch : {'bootstrap': True, 'max_depth': 100, 'max_features': 3, 'min_samples_leaf': 3, 'min_samples_split': 8, 'n_estimators': 200}","52a76557":"As the numbers of blanks for all columns BsmtXXX are almost the same, we could think that they correspond to the same rows. Let's check it. ","6fc6bcc3":"GarageArea and GarageCars","eaecd85a":"Now that we've done all the steps of features engineering, it's time to predict empty values for LotFrontage, using regression algorithm","4888db16":"4. Saleprice Analyse","d4752b79":"The best score seems to be done with ElasticNet algorithm. So, we are going to predict missing values using this trained algorithm.","562ea6ee":"The huge majority of basements have no exposure, let's fill the 3 blanks with \"No\"","3fa1e546":"We solved most of the empty rows. Let's now analysing column by column the remaining blanks","066a5fe1":"* BsmtExposure","7d6d5a91":"LotFrontage","a6e691da":"The value for GarageQual and GarageCond is set to None which means no Garage. Let's set the blanks to 0","7a8ba030":"MiscFeature","bb7f76f7":"1. Dataset import","3f52761c":"Exterior1st and Exterior2nd","fdb839ef":"We split the set in train and test sets","2ed65b96":"Fence","9722fd79":"Let's take the median which is \"Gd\" to fill the blanks","da5d15ae":"Define the validation strategy","fc1de3ba":"6. Features Engineering","14b18a93":"These lines have already been treated. We considered there is no basement.","9f1c3dce":"improvements : ordinal categorical encoded with numbers + skewness solved + robust scaler instead of StandardScaler (lotfrontage included","972cd0a2":"Electrical","9af3b4eb":"Skewness","910b38b2":"3. Outliers","871ce8a2":"MasVnrArea and MasVnrType","87274b8f":"GarageType, GarageFinish, GarageQual and GarageCond","451024ca":"BsmtHalfBath, BsmtFullBath, TotalBsmtSF, BsmtUnfSF, BsmtFinSF1, BsmtFinSF2 ","bfe2b467":"* BsmtQual","d8071787":"* BsmtFinType2","1fa81ba4":"https:\/\/towardsdatascience.com\/encoding-categorical-features-21a2651a065c","0ad7a297":"Let's fill the blanks with the most common value : Typical","a286371f":"Compare base models","d486f570":"PoolQC","cde0c749":"Let's check if it worked","fb04ab0f":"The intuition we had seems to be right. \nThe neighborhood 'IDOTRR' seems to be mainly Residential Medium Density, so we can fill the blanks with \"RM\".\nThe neighborhood 'Mitchel' seems to be mainly Residential Low Density, so we can fill the blank with \"RL\"","25b3d792":"Transform some quantitative features into numeric"}}