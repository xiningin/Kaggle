{"cell_type":{"f013dd67":"code","9c72b63b":"code","a97fa8db":"code","f5dbe0ff":"code","f1dab5d8":"code","c7d6b41f":"code","28624802":"code","d9b3cfd9":"code","9b2ba1ef":"code","15ecb163":"code","ecd810cc":"code","67bdef1b":"code","7943b82d":"code","11e9da82":"code","b8187b5e":"code","6402912c":"code","b173a2e0":"code","5555b31e":"code","805e3602":"markdown","25e389c4":"markdown","0234e040":"markdown","e8d12020":"markdown","8a3e163a":"markdown","9b8052df":"markdown","304ce766":"markdown","ef386d3d":"markdown","2a9ea86c":"markdown","e256c014":"markdown","c04dce55":"markdown","61a6c323":"markdown","18cc5122":"markdown","6732164e":"markdown","244d21d6":"markdown","1af98e35":"markdown","ceedb830":"markdown","5522218e":"markdown","13bb325b":"markdown","71cd4878":"markdown","e6268892":"markdown","a8ef38ed":"markdown","373c0ff2":"markdown","65b06e0f":"markdown","eff02dc2":"markdown","0717c0c8":"markdown","dee9dcbd":"markdown","6a172bf4":"markdown"},"source":{"f013dd67":"import pandas as pd\n\nDF = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/train.csv')\n\nDF.sample(frac=1).head()","9c72b63b":"import matplotlib.pyplot as plt","a97fa8db":"hindi_count = 0\ntamil_count = 0\n\nfor l in DF['language']:\n    if l == 'hindi': hindi_count+=1\n    else : tamil_count+=1\n\nlanguages  = ['Hindi', 'Tamil']\n    \ndata = [hindi_count,tamil_count]\n\nfig = plt.figure(figsize =(12, 9))\nplt.pie(data, labels = languages)\n\nplt.show()","f5dbe0ff":"DF.iloc[700]['context']","f1dab5d8":"DF.iloc[700]['question']","c7d6b41f":"DF.iloc[700]['answer_text']","28624802":"\ndef plot_bar_graph(Values,Labels,color):\n    \n    fig = plt.figure(figsize = (50, 20))\n\n    X = Values[0]\n    Y = Values[1]\n\n    plt.bar(X,Y,color = color,width = 0.4)\n\n    plt.xlabel(Labels[0])\n    plt.ylabel(Labels[1])\n    plt.title(Labels[2])\n    plt.show()","d9b3cfd9":"#ploting the context len\n\nlen_context = [len(c) for c in DF['context']]\nIds = [id_ for id_ in DF['id']]\n\nX_label = \"Ids\"\nY_label = \"Length\"\nLabel = \"Context Length \"\n\nValues = [Ids,len_context]\nLabels = [X_label,Y_label,Label]\n\nplot_bar_graph(Values,Labels,'maroon')","9b2ba1ef":"#ploting the answer len\n\nlen_context = [len(c) for c in DF['answer_text']]\nIds = [id_ for id_ in DF['id']]\n\nX_label = \"Ids\"\nY_label = \"Length\"\nLabel = \"Answer Length \"\n\nValues = [Ids,len_context]\nLabels = [X_label,Y_label,Label]\n\nplot_bar_graph(Values,Labels,'blue')","15ecb163":"# import \nfrom transformers import AutoModelForQuestionAnswering, AutoTokenizer, pipeline","ecd810cc":"# define tokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"deepset\/xlm-roberta-large-squad2\")\n\n# define model\nmodel = AutoModelForQuestionAnswering.from_pretrained(\"deepset\/xlm-roberta-large-squad2\")","67bdef1b":"# define pipeline \n\nQA_pipeline = pipeline('question-answering', model = model, tokenizer = tokenizer, device = 0)","7943b82d":"td  = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv')\ntd","11e9da82":"sd = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/sample_submission.csv')\nsd","b8187b5e":"submission_data = pd.DataFrame(columns = sd.columns)","6402912c":"for id_, c, q in td[[\"id\",\"context\", \"question\"]].to_numpy():\n    \n    Output = QA_pipeline(context=c, question=q)\n    submission_data.loc[len(submission_data.index)] = [id_,Output['answer']] ","b173a2e0":"submission_data","5555b31e":"submission_data.to_csv('submission.csv', index=False)","805e3602":"# A simple way to generate output ( This will give some intuition about the problem )","25e389c4":"\n#### We can see that the context length can reach up to 50,000 ( and that's a large value for a single data point )\n    ","0234e040":"## Let\u2019s have a closer look to find out more","e8d12020":"## Let\u2019s have a closer look at one of a data point\/example","8a3e163a":"# Problem statemnt \n\n#### Given a text ( eg. history of india ) and a Question ( How is the father of india ? ) find the answer from the text. \n\n#### well finding answer does not mean dedusding the answer, but it means that the answer lies in the given text we just have to find the start and end point of the answer from the text.\n\n#### EG. ( 100s of words ) ........ The Father of India is Mahatma Gandhi and he ........ ( 100s of words ) . \n\n#### As we are extracting the answer from the context ( given text ) it's called Extractive question answering.\n\n#### Here every thing is same just the difference is, Language is not english but it is eigther hindi or tamil.\n\n#### To solve such problems machine needs to develop good understanding of the language. \n","9b8052df":"## Let\u2019s have a look at the context size","304ce766":"## Using Pre-trained model provided by hugging faces\n\n\n\n\n#### In this part we will use the pre-trained model provided by the Huggeging faces, this will give us a good idea of how things flow in the extractive question answering model.\n\n#### (this knowledge will help us when we are developing the model from scratch )\n","ef386d3d":"## let\u2019s have a look over test.csv and subbmition.csv","2a9ea86c":"## Does context size matter?\n\n#### The answer is YES,\n#### For an extractive question answering model, context and question is the input to the model and the model has to predict the output based on this, But high context size means high input size which means high processing power is required to process a huge input, that impacts the training\/inference time","e256c014":"## Does answer size matter?\n\n#### well the answer is Yes and No\n\n#### Answer is the output of the model but we do not need to predict the entire answer instead we just predict the start and endpoint of the answer in the given text\n\n#### i.e the size of the output vector does not depend on the answer length, rather it's fixed.\n\n","c04dce55":"## Let\u2019s find out more about the given data","61a6c323":"#### In the above example, we saw that the context is quite large ( and  it's not even the largest )\n\n\n","18cc5122":"## Context, question, and answer_text are understandable but what is answer_start? \n\n#### answer_start defines the index of the character from where the answer begins ( this helps in the training  of the model ) \n\n#### language identifies the type of language being used \n","6732164e":"\n\n### Happy to hear your thoughts \/ Suggestions on this notebook :)\n\n### Thank you for readings ","244d21d6":"# EDA\n","1af98e35":"#### We can see that there are some context and questions in the test.csv for which we have to generate the answer text and put it in the sumbbmition.csv\n","ceedb830":"#### The above graph clearly shows that there are some very long answers, \n#### at the beginning of the model development, we might want to remove those few data points with large answer text.\n","5522218e":"### Save the submission_data","13bb325b":"### There is still a lot to explore not only with the given data but also with the data out there on the internet, Research continues. ","71cd4878":"##  Let\u2019s see the dataset division for Hindi and Tamil ","e6268892":"#### This must-have cleared some confusion ","a8ef38ed":"#### Well looking at this one might ask\n\n","373c0ff2":"## Lets have a look at the given data","65b06e0f":"# Let\u2019s Begin\n\n#### This notebook is aimed to give an end-to-end review of the problem statement and simple solution.\n#### This problem is related to the standard extractive question answering problem( i.e extracting an answer from a text given a question ).\n\n","eff02dc2":"## How to solve this problem?\n\n#### There are several ways we can tackle this problem (a few are listed below)\n\n* #### Remove the data points with very large context length ( Data loss )\n* #### Use the Sliding windows approach ( divide the context in relatively small parts and use them instead)\n* #### Different Sliding windows\n    * #### Instead of dividing the context into fixed parts we just move over a fixed number of sentences.\n* #### ...\n \n","0717c0c8":"\n## If it's just a standard extractive question answering, why there is a competition?\n\n#### While computers are getting stronger at understanding natural languages, computers are still not capable of completely understanding all the languages there.\n\n#### To build a strong natural language understanding model, along with a good knowledge of related filed one needs to generate a lot of data specific to that language ( or need to extract data from the huge amount of unstructured data available out there on the internet ).\n\n#### This is a research competition, which means a lot of research will be required not only in designing the powerful algorithms but also in gathering the relevant data ( language-specific )\n","dee9dcbd":"#### It looks like we have a lot of data points for Hindi, but relatively fewer data points for Tamil \n#### ( we might need to add some data points for Tamil )\n","6a172bf4":"* #### Tokenizer converts the input text into tensor (vector storing numbers )\n* #### this tensor goes into the model, \n* #### the model generates the prediction tensor \n* #### Again the output gets converted into answer text using tokenizer\n\n#### All this process is raped into a pipeline ( in some sense )\n"}}