{"cell_type":{"eb207106":"code","1e9f6519":"code","d219b9cf":"code","c2645b65":"code","9cd63311":"code","4ad91a8b":"code","0aff2ecd":"code","784d86ba":"code","ddab122c":"code","08efcdaf":"code","f92c1f1e":"markdown","48a30875":"markdown","02c06456":"markdown","fa198820":"markdown","874ec2a5":"markdown","cc9fc48b":"markdown","d3e8b63b":"markdown","65dc57ec":"markdown","313da7ee":"markdown","3a96dc37":"markdown","81b193ed":"markdown"},"source":{"eb207106":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\nvalid_data = pd.read_csv('..\/input\/titanic\/test.csv') #without target(=Survived)\ntrain_data","1e9f6519":"corr_data = train_data.copy()\n\n#I carefully think, name doesn't really matter about Survived :D\ncorr_data = corr_data.drop('Name', axis=1)\n\n#Cabin has so many NaN so.. drop!\ncorr_data = corr_data.drop('Cabin', axis=1)\n\n#Ticket.. I think so..\ncorr_data = corr_data.drop('Ticket', axis=1)\n\n#Sex to integer value(to calculate)\ndef sex_to_int(sex):\n    if sex == 'male':\n        return 1\n    else:\n        return 2\ncorr_data['Sex'] = corr_data['Sex'].map(sex_to_int)\n\n#Fare values rounding(to calculate)\ncorr_data['Fare'] = corr_data['Fare'].round()\n\n#Embarked has values (S, C, Q) so, I turn it into (1, 2, 3)\ndef emb_to_int(emb):\n    if emb == 'S':\n        return 1\n    elif emb == 'C':\n        return 2\n    elif emb == 'Q':\n        return 3\n    else:\n        return 0\ncorr_data['Embarked'] = corr_data['Embarked'].map(emb_to_int)\n\n#final result like..\ncorr_data.head()","d219b9cf":"#Now, calculate correlation to determine features.\nplot_corr = corr_data.corr()\n\nplot_corr = plot_corr.apply(lambda x : round(x, 2))\n\nplot_corr","c2645b65":"#Visualization\nfig, ax = plt.subplots()\nim = ax.imshow(plot_corr, cmap='Reds')\n\ncbar = ax.figure.colorbar(im, ax=ax)\n\nax.set_xticks(np.arange(len(plot_corr.columns)))\nax.set_yticks(np.arange(len(plot_corr.index)))\n\nax.set_xticklabels(plot_corr.columns)\nax.set_yticklabels(plot_corr.columns)\n\nfor x in range(len(plot_corr.columns)):\n    for y in range(len(plot_corr.index)):\n        ax.text(y, x, plot_corr.iloc[y, x], ha='center', va='center', color='k')\n\nfig.tight_layout()   \nplt.show()   ","9cd63311":"#so I guess, Sex, Fare and Pclass are important values.\n#Now, make prediction!\n\nX = train_data.loc[:, ['Sex', 'Fare', 'Pclass']]\ny = train_data['Survived']\n\nX['Sex'] = X['Sex'].map(sex_to_int)\nX['Fare'] = X['Fare'].round()\n\ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.33, random_state=42)","4ad91a8b":"from sklearn.tree import DecisionTreeClassifier\n\ndecision_tree_model = DecisionTreeClassifier()\n\ndecision_tree_model.fit(train_X, train_y)","0aff2ecd":"decision_tree_prediction = decision_tree_model.predict(valid_X)\n\nprint(\"Accuracy:\", metrics.accuracy_score(valid_y, decision_tree_prediction))","784d86ba":"#Now I fit model by raw train data and TEST model!\nX = train_data.loc[:, ['Sex', 'Fare', 'Pclass']]\ny = train_data['Survived']\n\nX['Sex'] = X['Sex'].map(sex_to_int)\nX['Fare'] = X['Fare'].round()\n\ndecision_tree_model = DecisionTreeClassifier()\n\ndecision_tree_model.fit(X, y)","ddab122c":"#predict\nvalid_X = valid_data.loc[:, ['Sex', 'Fare', 'Pclass']]\n\nvalid_X['Sex'] = valid_X['Sex'].map(sex_to_int)\n\navg = valid_X['Fare'].sum() \/ valid_X['Fare'].count()\nvalid_X[valid_X['Fare'].isnull()] = valid_X[valid_X['Fare'].isnull()].fillna(avg)\nvalid_X['Fare'] = valid_X['Fare'].round()\n\ndecision_tree_prediction = decision_tree_model.predict(valid_X)","08efcdaf":"PassengerId = pd.Series(valid_data['PassengerId'], name='PassengerId')\nSurvived = pd.Series(decision_tree_prediction, name='Survived')\nsubmission = pd.concat([PassengerId, Survived], axis=1)\n\nsubmission.head()\nsubmission.to_csv('submission.csv', index=False)","f92c1f1e":"## 3. Calculate correlation","48a30875":"## 5. Preprocessing train data","02c06456":"## 7. Make prediction\ud83d\ude80","fa198820":"## 8. Fitting model by whole train data","874ec2a5":"## 4. Visualize the correlation values","cc9fc48b":"## 2. Preprocessing for calculate correlation","d3e8b63b":"# \ud83d\udef3Titanic Survived Passenger Prediction","65dc57ec":"## 6. Define model\ud83c\udf32 and fitting","313da7ee":"## 10. Make output file\ud83d\udcc1","3a96dc37":"## 9. Finally make prediction using test data set","81b193ed":"## 1. Import modules and read data"}}