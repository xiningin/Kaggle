{"cell_type":{"c5f1288b":"code","d0022bf1":"code","552da5ba":"code","716a0b12":"code","87d8cdb0":"code","aeba3599":"code","f67e0bb5":"code","afd2414b":"code","6797329c":"code","bacda95d":"code","1a05d9d7":"code","9cb915a6":"code","9c5d87aa":"code","3ada62e5":"code","3d9c183c":"code","baf087cd":"code","1bf58343":"code","a3e16834":"code","299e88d1":"code","6d30e845":"code","b797d15c":"code","5f80cff3":"code","006efbf3":"code","1fe01cf2":"code","3c2e6f05":"code","b20af30f":"code","b67a7a2b":"code","d1966289":"code","86e4081b":"code","cc8db010":"code","4bad0700":"code","a0a7cf8b":"code","602fea07":"code","7c84e971":"code","df43de75":"code","0606230f":"code","94152ffa":"code","75c26d94":"code","075c2801":"code","9b59f1d5":"code","b083634c":"code","4ddaa7e8":"code","04e0963f":"code","760bccca":"code","d48aaf12":"code","9847df45":"code","ff717bf2":"code","caba0d7b":"code","46eb9d92":"markdown","0cbbc700":"markdown","57000652":"markdown","c6e08e36":"markdown","33bad9da":"markdown","65160bbb":"markdown","27e445a2":"markdown","246eb652":"markdown","831ac157":"markdown","5897133c":"markdown","3899ce73":"markdown","4dc5ce22":"markdown","024aac26":"markdown","4d72fd7e":"markdown","32d12b68":"markdown","3bfaa09a":"markdown","6aaf0951":"markdown","d734d3ae":"markdown","7b12a2da":"markdown","1fdd47e7":"markdown","f01a87d5":"markdown","aec515c5":"markdown","47b0c0d0":"markdown","0b62dc5d":"markdown","0885aa00":"markdown","e636545a":"markdown","4533140c":"markdown","eef00605":"markdown","d35fd90e":"markdown","6a0c86c4":"markdown","969d54ab":"markdown","89dabc3f":"markdown","497cec42":"markdown","3cced863":"markdown","3feb100c":"markdown","ba6b58b9":"markdown"},"source":{"c5f1288b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0022bf1":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom wordcloud import WordCloud, STOPWORDS\nimport missingno as msno\nimport nltk\nimport re\nimport string\nfrom keras.preprocessing.sequence import pad_sequences\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","552da5ba":"train = pd.read_csv(r'\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv(r'\/kaggle\/input\/nlp-getting-started\/test.csv')","716a0b12":"test.head()","87d8cdb0":"train.head()","aeba3599":"print(train.shape, test.shape)","f67e0bb5":"train.isnull().sum()","afd2414b":"test.isnull().sum()","6797329c":"print(\"Percentage of keywords missing in train data:\", (len(train[train['keyword'].isnull()==True])\/train.shape[0])*100,\"%\")\nprint(\"Percentage of keywords missing in test data:\", (len(test[test['keyword'].isnull()==True])\/test.shape[0])*100,\"%\")\nprint(\"Percentage of location missing in train data:\", (len(train[train['location'].isnull()==True])\/train.shape[0])*100,\"%\")\nprint(\"Percentage of location missing in test data:\", (len(test[test['location'].isnull()==True])\/test.shape[0])*100,\"%\")","bacda95d":"stopwords = set(STOPWORDS)\ndef word_cloud(data, title=None):\n    cloud = WordCloud(background_color = 'black',\n                     stopwords = stopwords,\n                     max_words = 200,\n                     max_font_size = 40,\n                     scale = 3).generate(str(data))\n    fig = plt.figure(figsize=(15,15))\n    plt.axis('off')\n    if title:\n        fig.suptitle(title, fontsize = 20)\n        fig.subplots_adjust(top = 2.25)\n        plt.imshow(cloud)\n        plt.show()","1a05d9d7":"word_cloud(train['text'],'Most Repeated words in train data')","9cb915a6":"word_cloud(test['text'],'Most Repeated words in test data')","9c5d87aa":"word_cloud(train[train['target']==1]['text'],'Most Repeated words in real disaster tweets in train data')","3ada62e5":"word_cloud(train[train['target']==0]['text'],'Most Repeated words in fake disaster tweets in train data')","3d9c183c":"plt.figure(figsize=(7,6))\nsns.countplot(train['target'])","baf087cd":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_len=train[train['target']==1]['text'].str.len()\nax1.hist(tweet_len,color='red')\nax1.set_title('disaster tweets')\ntweet_len=train[train['target']==0]['text'].str.len()\nax2.hist(tweet_len,color='green')\nax2.set_title('Non-disaster tweets')\nfig.suptitle('Characters in tweets')","1bf58343":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_words = train[train['target']==1]['text'].str.split().map(lambda x: len(x))\nax1.hist(tweet_words, color='red')\nax1.set_title('disaster tweets')\ntweet_words = train[train['target']==0]['text'].str.split().map(lambda x: len(x))\nax2.hist(tweet_words, color='green')\nax2.set_title('Non disaster tweets')\nfig.suptitle('Words in a tweet')","a3e16834":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\ntweet_words = train[train['target']==1]['text'].str.split().apply(lambda x: [len(i) for i in x])\nsns.distplot(tweet_words.map(lambda x: np.mean(x)), color='red')\nplt.title('disaster tweets')\nplt.subplot(1,2,2)\ntweet_words = train[train['target']==0]['text'].str.split().apply(lambda x: [len(i) for i in x])\nsns.distplot(tweet_words.map(lambda x: np.mean(x)), color='green')\nplt.title('Non disaster tweets')\nplt.suptitle('Average word length in each tweet')","299e88d1":"def remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)","6d30e845":"train['text'] = train['text'].apply(lambda x: remove_emoji(x))\ntest['text'] = test['text'].apply(lambda x: remove_emoji(x))","b797d15c":"train['text'][0]","5f80cff3":"from nltk.stem import WordNetLemmatizer\nlemma = WordNetLemmatizer()","006efbf3":"def clean_data(data):\n    # Removing urls\n    data = re.sub(r'https?:\/\/\\S+|www\\.\\S+',' ', data)\n    # Remove Punctutaions\n    t = [w for w in data if w not in string.punctuation]\n    data = ''.join(t)\n    # Remove Stopwords\n    t = [w for w in data.split() if w not in stopwords]\n    data = ' '.join(t)\n    # Remove numbers from text'\n    data = re.sub(r'\\d+',' ', data)\n    # Lowercasing the data\n    data = data.lower()\n    # Removing everthing other than alphabets\n    data = re.sub('[^a-zA-Z]',' ', data)\n    # Remove html tags\n    data = re.sub(r'<.*?>',' ', data)\n    # Removing whitespace characters\n    data = re.sub(r'\\s',' ',data)\n    data = re.sub(r' +',' ',data)\n    return data","1fe01cf2":"train['text'] = train['text'].apply(lambda x: clean_data(x))\ntest['text'] = test['text'].apply(lambda x: clean_data(x))","3c2e6f05":"print(train['text'][0])","b20af30f":"disaster_tweets = train[train['target']==1]\nnon_disaster_tweets = train[train['target']==0]","b67a7a2b":"def get_top_n_words(corpus, ngram_range = (1,1), n= None):\n    vec = CountVectorizer(ngram_range = ngram_range, stop_words = 'english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis = 0)\n    word_freq = [(word, sum_words[0,idx]) for word,idx in vec.vocabulary_.items()]\n    word_freq = sorted(word_freq, key = lambda x: x[1], reverse = True)\n    return word_freq[:n]","d1966289":"neg_unigram = get_top_n_words(disaster_tweets['text'],(1,1),40)\npos_unigram = get_top_n_words(non_disaster_tweets['text'],(1,1),40)\n\ndf1 = pd.DataFrame(pos_unigram, columns = ['word','count'])\ndf2 = pd.DataFrame(neg_unigram, columns = ['word','count'])\n\nplt.tight_layout()\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(14,11))\nsns.barplot(x = 'count' , y = 'word', data = df1, orient = 'h',ax = ax1)\nax1.set_title('Most repititve words in non-disaster tweets')\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.grid(False)\nsns.barplot(x = 'count' , y = 'word', data = df2, orient = 'h',ax = ax2)\nax2.set_title('Most repititve words in disaster tweets')\nax2.spines[\"right\"].set_visible(False)\nax2.spines[\"top\"].set_visible(False)\nax2.grid(False)","86e4081b":"neg_unigram = get_top_n_words(disaster_tweets['text'],(2,2),40)\npos_unigram = get_top_n_words(non_disaster_tweets['text'],(2,2),40)\n\ndf1 = pd.DataFrame(pos_unigram, columns = ['word','count'])\ndf2 = pd.DataFrame(neg_unigram, columns = ['word','count'])\n\nplt.tight_layout()\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(14,11))\nsns.barplot(x = 'count' , y = 'word', data = df1, orient = 'h',ax = ax1)\nax1.set_title('Most repititve words in non-disaster tweets')\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.grid(False)\nsns.barplot(x = 'count' , y = 'word', data = df2, orient = 'h',ax = ax2)\nax2.set_title('Most repititve words in disaster tweets')\nax2.spines[\"right\"].set_visible(False)\nax2.spines[\"top\"].set_visible(False)\nax2.grid(False)","cc8db010":"neg_unigram = get_top_n_words(disaster_tweets['text'],(3,3),40)\npos_unigram = get_top_n_words(non_disaster_tweets['text'],(3,3),40)\n\ndf1 = pd.DataFrame(pos_unigram, columns = ['word','count'])\ndf2 = pd.DataFrame(neg_unigram, columns = ['word','count'])\n\nplt.tight_layout()\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(14,11))\nsns.barplot(x = 'count' , y = 'word', data = df1, orient = 'h',ax = ax1)\nax1.set_title('Most repititve words in non-disaster tweets')\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.grid(False)\nsns.barplot(x = 'count' , y = 'word', data = df2, orient = 'h',ax = ax2)\nax2.set_title('Most repititve words in disaster tweets')\nax2.spines[\"right\"].set_visible(False)\nax2.spines[\"top\"].set_visible(False)\nax2.grid(False)","4bad0700":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_words = train[train['target']==1]['text'].str.split().map(lambda x: len(x))\nax1.hist(tweet_words, color='red')\nax1.set_title('disaster tweets')\ntweet_words = train[train['target']==0]['text'].str.split().map(lambda x: len(x))\nax2.hist(tweet_words, color='green')\nax2.set_title('Non disaster tweets')\nfig.suptitle('Words in a tweet')","a0a7cf8b":"train_text = []\ntrain_labels = []\nfor i in range(len(train['text'])):\n    train_text.append(str(train.iloc[i,3]))\n    train_labels.append(train.iloc[i,4])\ntest_text = []\nfor i in range(len(test['text'])):\n    test_text.append(str(test.iloc[i,3]))","602fea07":"embedding_dim = 84\nmax_length = 20\nvocab_size = 15000\npadding_type = 'post'\ntrunc_type = 'post'","7c84e971":"tokenizer = Tokenizer(oov_token='<oov>', num_words = vocab_size)\ntokenizer.fit_on_texts(train_text)\nword_index = tokenizer.word_index\nsequences = tokenizer.texts_to_sequences(train_text)","df43de75":"len(word_index)","0606230f":"padded_train = pad_sequences(sequences, maxlen = max_length , padding = padding_type, truncating = trunc_type)","94152ffa":"test_sequences = tokenizer.texts_to_sequences(test['text'])\npadded_test = pad_sequences(test_sequences, maxlen = max_length , padding = padding_type, truncating = trunc_type)","75c26d94":"y = np.array(train_labels)\ny.shape","075c2801":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val=train_test_split(padded_train,y,test_size=0.05,random_state=12)\nprint(\"Shape of X_train: \" + str(X_train.shape))\nprint(\"Shape of y_train: \" + str(len(y_train)))\nprint(\"Shape of X_val: \" + str(X_val.shape))\nprint(\"Shape of y_val: \" + str(len(y_val)))","9b59f1d5":"def loadEmbeddingMatrix(emb_file):\n    EMBEDDING_FILE = emb_file\n    embed_size = 200\n    embedding_index = dict()\n    f = open(EMBEDDING_FILE)\n    for line in f:\n        value = line.split() # Split line tnto indexed Array\n        word = value[0] # First index is word\n        coef = np.asarray(value[1:],dtype = 'float32') # Rest all are word vectors\n        embedding_index[word] = coef\n    f.close()\n    print('Loaded {} word vectors.'.format(len(embedding_index)))\n    \n    del(embedding_index['-0.29736'])\n    all_emb = np.stack(list(embedding_index.values()))\n    emb_mean, emb_std = all_emb.mean(), all_emb.std()\n    \n    nb_words = len(tokenizer.word_index) # Number of words in our dataset\n    \n    # We get the mean and standard deviation of embedding weights so that we could maintain the same statistics for random generated weights \n    embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\n    # We will fill the embedding matrix with the words common in both \n    embed_count = 0\n    \n    for word,i in tokenizer.word_index.items():\n        i-=1\n        # We will see if the word in glove's dictionary, if yes, get corresponding weights\n        embedding_vector = embedding_index.get(word)\n        # store this in embedding matrix which will be used for training later\n        if embedding_vector is not None:\n            embedding_matrix[i] = embedding_vector\n            embed_count += 1\n        \n    print('Total embedded', embed_count, 'common words')\n    \n    del(embedding_index)\n    \n    return embedding_matrix","b083634c":"embedding_matrix = loadEmbeddingMatrix('\/kaggle\/input\/glove-global-vectors-for-word-representation\/glove.twitter.27B.200d.txt')","4ddaa7e8":"embedding_matrix.shape","04e0963f":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(len(word_index), embedding_matrix.shape[1], input_length = max_length, weights = [embedding_matrix],\n                             trainable = False),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences = True, dropout = 0.2, recurrent_dropout = 0.2)),\n    tf.keras.layers.GlobalMaxPool1D(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(units=8, activation=\"relu\"),\n    tf.keras.layers.Dense(units=1, activation=\"sigmoid\")    \n])\nmodel.summary()","760bccca":"model.compile(loss = 'binary_crossentropy', optimizer = tf.keras.optimizers.RMSprop(lr=4*0.0001), metrics = ['acc'])","d48aaf12":"reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', factor=0.3, verbose=1,\n                              patience=2, min_lr=0.00000001)","9847df45":"history = model.fit(X_train, y_train, epochs = 75, validation_data = (X_val, y_val),callbacks=[reduce_lr], verbose = 1)","ff717bf2":"plt.figure(figsize=(15,7))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['acc'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_acc'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","caba0d7b":"y_pred = model.predict(padded_test)\nmodel_submission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\nmodel_submission['target'] = np.round(y_pred).astype('int')\nmodel_submission.to_csv('model_submission_new.csv', index=False)","46eb9d92":"## Initializing the optimizer and metric ","0cbbc700":"## Distribution of top bigrams","57000652":"# Please UPVOTE if you find this Kernal Informative !!","c6e08e36":"## Using Pretrained Word Embeddings","33bad9da":"## Distribution of top unigrams","65160bbb":"## Fitting the model","27e445a2":"## Initializing the Model","246eb652":"## N-gram exploration","831ac157":"## Distribution of top trigrams","5897133c":"## Applying padding to test data","3899ce73":"## Splitting training data into train and validation sets","4dc5ce22":"## Make training labels as numpy array as it is expected for the training","024aac26":"### Number of words in a tweet","4d72fd7e":"# Problem Statement","32d12b68":"## Checking the missing values","3bfaa09a":"## Importing Libraries","6aaf0951":"## Padding text to make it of same length","d734d3ae":"### Removing emojis","7b12a2da":"## Initializing Callback","1fdd47e7":"### Average Word Length in a tweet","f01a87d5":"Looks like a Balanced Dataset","aec515c5":"## Taking out the text and labels out of train and test dataset","47b0c0d0":"## Initializing parameters","0b62dc5d":"## Visualizing Training and validation sets loss and accuracy score","0885aa00":"## Data Cleaning","e636545a":"## Predicting test data to output the tweet labels","4533140c":"We have to build a machine learning model that predicts which Tweets are about real disasters and which one\u2019s aren\u2019t.","eef00605":"## Importing Datasets","d35fd90e":"## Data Cleaning","6a0c86c4":"As percentage of missing values for both keyword and location are equal for train and test data. So, it may be concluded that both are taken from the same sample","969d54ab":"## Visualizing Most Repeated Words using WordCloud","89dabc3f":"## Tokenizing the text","497cec42":"### Number of characters in a tweet","3cced863":"## Number of words in a tweet after data cleaning","3feb100c":"# Visualizing Counts for each categories of tweet","ba6b58b9":"## Percentage of Missing Values"}}