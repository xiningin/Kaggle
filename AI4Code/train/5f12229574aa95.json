{"cell_type":{"84b6d0c2":"code","2538186a":"code","b3264fc6":"code","7b483701":"code","47ef1ea2":"code","b3fc2a67":"code","27cb5e4c":"code","c1447e28":"code","948aef9a":"code","481cf7ba":"markdown","82a82873":"markdown"},"source":{"84b6d0c2":"# Importing some useful Libraries.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import accuracy_score\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D","2538186a":"df = pd.read_csv('\/kaggle\/input\/devanagari-character-set\/data.csv')\ndf.head()","b3264fc6":"# Printing each character in data with its title:\n\nchar = df['character'].value_counts().index\nchar = char.tolist()\n\nfor name in char:\n    plt.figure(figsize=(4,4))\n    image = (df[df['character']==name].head(1))\n    image = image.iloc[:,:-1].values.reshape(32,32).astype('int32')\n    plt.imshow(image)\n    plt.title(name)","7b483701":"X = df.iloc[:,:-1]\ny = df['character']","47ef1ea2":"# Transforming the data to feed to the model.\n\n# Shape: (data.shape, size of image, feature map)\nX = X.values.reshape(X.shape[0],32,32,1)\n\n# LabelBinarizer is like one-hot-encoding but OneHotEncoder needs data in integer encoded form first to convert into its respective encoding which is not required in the case of LabelBinarizer.\ny = LabelBinarizer().fit_transform(y)","b3fc2a67":"# Splitting data into train and test set.\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,shuffle=True,random_state=101)\n\nX_train, X_test = X_train\/255, X_test\/255","27cb5e4c":"model = Sequential()\n\nmodel.add(Conv2D(64, kernel_size=(3,3), input_shape=(32,32,1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(32,kernel_size=(2,2), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3,3)))\nmodel.add(Dropout(.015))\n\nmodel.add(Flatten())\nmodel.add(Dense(46, activation='softmax'))\nmodel.summary()","c1447e28":"model.compile(optimizer='adam',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])","948aef9a":"model.fit(X_train,y_train, epochs=10)","481cf7ba":"#### Convolutional Neural Network","82a82873":"### Good to GO"}}