{"cell_type":{"b7e45a55":"code","af8124be":"code","1d757848":"code","3a06b849":"code","987f2124":"code","1e59a637":"code","40480901":"code","9bbc8a33":"code","c71493c0":"markdown"},"source":{"b7e45a55":"# imports\nimport os\nimport gc\nimport random\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nfrom joblib import Parallel, delayed\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\nfrom sklearn.model_selection import KFold\n\nimport lightgbm as lgb\n\ntqdm.pandas()\n%matplotlib inline\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nSEED = 2021\nseed_everything(SEED)","af8124be":"# feature utils\ndef calculate_wap(df, rank=\"1\"):\n    \"\"\"\n    Weighted Average Pricing for a stock at a given time ID is given by:\n    (bid_price1 * ask_size1 + bid_size1 * ask_price1)\/(bid_size1 + ask_size1)\n\n    It can further be extended to:\n\n        sum(bid_price_i * ask_size_i + bid_size_i * ask_price_i)\/sum(bid_size_i + ask_size_i)\n\n    :param rank: which wap to calculate\n    :param df: parquet table containing order book\n    :return:\n    \"\"\"\n    return (df[f\"bid_price{rank}\"] * df[f\"ask_size{rank}\"] + df[f\"bid_size{rank}\"] * df[f\"ask_price{rank}\"]) \/ (\n                df[f\"bid_size{rank}\"] + df[f\"ask_size{rank}\"])\n\n\ndef calculate_inter_wap(df, rank=\"1\"):\n    return (df[f\"bid_price{rank}\"] * df[f\"bid_size{rank}\"] + df[f\"ask_size{rank}\"] * df[f\"ask_price{rank}\"]) \/ (\n            df[f\"bid_size{rank}\"] + df[f\"ask_size{rank}\"])\n    pass\n\n\ndef calculate_log_return(series):\n    return np.log(series).diff()\n\n\ndef calculate_rv(series):\n    return np.sqrt(np.sum(np.square(series)))\n\n\ndef count_unique(series):\n    return len(np.unique(series))\n\n\ndef get_stats_window(df, seconds_in_bucket, features_dict, add_suffix=False):\n    df_feature = df[df[\"seconds_in_bucket\"] >= seconds_in_bucket].groupby([\"time_id\"]).agg(features_dict).reset_index()\n    df_feature.columns = [\"_\".join(col) for col in df_feature.columns]\n\n    if add_suffix:\n        df_feature = df_feature.add_suffix(\"_\" + str(seconds_in_bucket))\n\n    return df_feature\n    pass\n\n\ndef window_stats(df, feature_dict, buck_feats, second_windows, additional_dfs=None):\n    df_merged = get_stats_window(df, seconds_in_bucket=0, features_dict=feature_dict)\n\n    if additional_dfs is not None:\n        df_merged = df_merged.merge(additional_dfs, how='left', left_on='time_id_', right_on='time_id')\n\n    temp_dfs = []\n    for window in second_windows:\n        temp_dfs.append(\n            (window,\n             get_stats_window(df, seconds_in_bucket=window, features_dict=buck_feats, add_suffix=True)\n             )\n        )\n\n    for window, temp_df in temp_dfs:\n        df_merged = df_merged.merge(temp_df, how=\"left\", left_on=\"time_id_\", right_on=f\"time_id__{window}\")\n        df_merged.drop(columns=[f\"time_id__{window}\"], inplace=True)\n\n    return df_merged\n    pass\n\n\ndef tendency(price, vol):\n    diff = np.diff(price)\n    val = (diff \/ price[1:]) * 100\n    power = np.sum(val * vol[1:])\n    return power\n    pass\n\n\ndef get_stock_clusters(df, n_clusters=7):\n    pivoted_data = df.pivot(index=\"time_id\", columns=[\"stock_id\"], values=\"target\")\n    corr_pivoted = pivoted_data.corr()\n\n    clusters = KMeans(n_clusters, random_state=cfg.random_state).fit(corr_pivoted.values)\n\n    groups = []\n    for i in range(n_clusters):\n        groups.append([x-1] for x in (corr_pivoted.index+1)*(clusters.labels_ == i) if x > 0)\n    return groups\n    pass\n\n\ndef create_cluster_aggregations(df, groups):\n    feats = []\n\n    for i, idx in enumerate(groups):\n        chunk_df = df.loc[df['stock_id'].isin(idx)]\n        chunk_df = chunk_df.groupby(['time_id']).agg(np.nanmean)\n        chunk_df.loc[:, 'stock_id'] = str(i) + 'c1'\n        feats.append(chunk_df)\n\n    feats = pd.concat(feats).reset_index()\n    if \"target\" in feats.columns:\n        feats.drop(columns=['target'], inplace=True)\n\n    feats = feats.pivot(index='time_id', columns='stock_id')\n    feats.columns = [\"_\".join(x) for x in feats.columns.ravel()]\n    feats.reset_index(inplace=True)\n\n    return pd.merge(df, feats, how=\"left\", on=\"time_id\")\n    pass","1d757848":"# config\nclass cfg:\n    \n    paths = {\n        # train path\n        \"train_csv\": \"..\/input\/optiver-realized-volatility-prediction\/train.csv\",\n        \"train_book\": \"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\",\n        \"train_trade\": \"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\",\n\n        # test path\n        \"test_csv\": \"..\/input\/optiver-realized-volatility-prediction\/test.csv\",\n        \"test_book\": \"..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\",\n        \"test_trade\": \"..\/input\/optiver-realized-volatility-prediction\/trade_test.parquet\",\n\n        # model paths\n        \"xgb_baseline\": \".\/xgbBaseline\/\",\n        \"lgb_baseline\": \".\/lgbBaseline\"  # for inference\n    }\n\n    feature_dict_book = {\n        'seconds_in_bucket': [count_unique],\n        \"wap1\": [np.sum, np.mean, np.max],\n        \"wap2\": [np.sum, np.mean, np.max],\n        \"iwap1\": [np.sum, np.mean, np.max],\n        \"iwap2\": [np.sum, np.mean, np.max],\n        \"log_return1\": [np.sum, calculate_rv, np.mean, np.max],\n        \"log_return2\": [np.sum, calculate_rv, np.mean, np.max],\n        \"inter_log_return1\": [np.sum, calculate_rv, np.mean, np.max],\n        \"inter_log_return2\": [np.sum, calculate_rv, np.mean, np.max],\n        \"wap_balance\": [np.sum, np.mean, np.max],\n        \"volume_imbalance\": [np.sum, np.mean, np.max],\n        \"total_volume\": [np.sum, np.mean, np.max],\n        \"price_spread1\": [np.sum, np.mean, np.max],\n        \"price_spread2\": [np.sum, np.mean, np.max],\n        \"bid_spread\": [np.sum, np.mean, np.max],\n        \"ask_spread\": [np.sum, np.mean, np.max],\n    }\n    \n    feature_dict_book_time = {\n        \"log_return1\": [calculate_rv],\n        \"log_return2\": [calculate_rv],\n        \"inter_log_return1\": [calculate_rv],\n        \"inter_log_return2\": [calculate_rv],\n        \n    }\n\n    feature_dict_trade = {\n        'log_return': [np.sum, calculate_rv, np.mean, np.max],\n        'seconds_in_bucket': [count_unique],\n        'size': [np.sum, np.mean, np.max],\n        'order_count': [np.sum, np.mean, np.max],\n        'amount': [np.sum, np.mean, np.max],\n    }\n\n    feature_dict_trade_time = {\n        'log_return': [calculate_rv],\n        'seconds_in_bucket': [count_unique],\n        'size': [np.sum],\n        'order_count': [np.sum],\n        'amount': [np.mean],\n    }\n    \n    model_params = {\n        \"xgb_bl\": {\n            \"objective\": \"reg:squarederror\",\n            \"booster\": \"gbtree\",\n            \"nthread\": -1,\n            \"eta\": 0.3,\n            \"max_depth\": 8,\n            \"min_child_weight\": 1,\n            \"sampling_method\": \"uniform\",\n            # \"tree_method\": \"gpu_hist\"\n        },\n        \"lgb_bl\": {\n            \"objective\": \"rmse\",\n            \"boosting_type\": \"gbdt\",\n            \"learning_rate\": 0.05,\n            'max_depth': -1,\n            'max_bin':100,\n            'min_data_in_leaf':500,\n            'learning_rate': 0.05,\n            'subsample': 0.72,\n            'subsample_freq': 4,\n            'feature_fraction': 0.5,\n            'lambda_l1': 0.5,\n            'lambda_l2': 1.0,\n            \n            \"categorical_column\": [0],\n            \"n_jobs\": -1,\n            \"verbose\": -1,\n            \"seed\": SEED,\n            \"feature_fraction_seed\": SEED,\n            \"bagging_seed\": SEED,\n            \"drop_seed\": SEED,\n            \"data_random_seed\": SEED,\n        }\n    }\n\n    bucket_windows = [100, 200, 300, 400, 500]\n    random_state = SEED\n    pass","3a06b849":"# order book features\ndef get_book_features(file_path):\n    book_df = pd.read_parquet(file_path)\n\n    # calculate wap\n    book_df['wap1'] = calculate_wap(book_df, rank=\"1\")\n    book_df['wap2'] = calculate_wap(book_df, rank=\"2\")\n    book_df['iwap1'] = calculate_inter_wap(book_df, rank=\"1\")\n    book_df['iwap2'] = calculate_inter_wap(book_df, rank=\"2\")\n\n    # calculate log return\n    book_df[\"log_return1\"] = book_df.groupby([\"time_id\"])[\"wap1\"].apply(calculate_log_return)\n    book_df[\"log_return2\"] = book_df.groupby([\"time_id\"])[\"wap2\"].apply(calculate_log_return)\n    book_df[\"inter_log_return1\"] = book_df.groupby([\"time_id\"])[\"iwap1\"].apply(calculate_log_return)\n    book_df[\"inter_log_return2\"] = book_df.groupby([\"time_id\"])[\"iwap2\"].apply(calculate_log_return)\n\n    # calculate balance\n    book_df[\"wap_balance\"] = abs(book_df[\"wap1\"] - book_df[\"wap2\"])\n    book_df[\"volume_imbalance\"] = abs(\n        (book_df[\"ask_size1\"] + book_df[\"ask_size2\"]) - (book_df[\"bid_size1\"] + book_df[\"bid_size2\"])\n    )\n    book_df[\"total_volume\"] = book_df[\"ask_size1\"] + book_df[\"ask_size2\"] + book_df[\"bid_size1\"] + book_df[\n        \"bid_size2\"]\n\n    # calculate spread\n    book_df[\"price_spread1\"] = (book_df[\"ask_price1\"] - book_df[\"bid_price1\"]) \/ (\n            (book_df[\"ask_price1\"] + book_df[\"bid_price1\"]) \/ 2)\n    book_df[\"price_spread2\"] = (book_df[\"ask_price2\"] - book_df[\"bid_price2\"]) \/ (\n            (book_df[\"ask_price2\"] + book_df[\"bid_price2\"]) \/ 2)\n\n    book_df[\"bid_spread\"] = book_df[\"bid_price1\"] - book_df[\"bid_price2\"]\n    book_df[\"ask_spread\"] = book_df[\"ask_price1\"] - book_df[\"ask_price2\"]\n\n    book_df_merged = window_stats(book_df, cfg.feature_dict_book, cfg.feature_dict_book_time, cfg.bucket_windows)\n\n    book_df_merged[\"row_id\"] = book_df_merged[\"time_id_\"].apply(lambda x: f\"{file_path.split('=')[1]}-{x}\")\n    book_df_merged.drop([\"time_id_\"], axis=1, inplace=True)\n\n    return book_df_merged.bfill().ffill()\n                                                                \n# trade features\ndef get_trade_price_features(df):\n    res = []\n    for n_time_id in df['time_id'].unique():\n        df_id = df[df['time_id'] == n_time_id]\n        vol_tendency = tendency(df_id['price'].values, df_id['size'].values)\n        f_max = np.sum(df_id['price'].values > np.mean(df_id['price'].values))\n        f_min = np.sum(df_id['price'].values < np.mean(df_id['price'].values))\n        df_max = np.sum(np.diff(df_id['price'].values) > 0)\n        df_min = np.sum(np.diff(df_id['price'].values) < 0)\n        abs_diff = np.median(np.abs(df_id['price'].values - np.mean(df_id['price'].values)))\n        energy = np.mean(df_id['price'].values ** 2)\n        iqr_p = np.percentile(df_id['price'].values, 75) - np.percentile(df_id['price'].values, 25)\n        abs_diff_v = np.median(np.abs(df_id['size'].values - np.mean(df_id['size'].values)))\n        energy_v = np.sum(df_id['size'].values ** 2)\n        iqr_p_v = np.percentile(df_id['size'].values, 75) - np.percentile(df_id['size'].values, 25)\n\n        res.append({'time_id': n_time_id,\n                    'tendency': vol_tendency,\n                    'f_max': f_max,\n                    'f_min': f_min,\n                    'df_max': df_max,\n                    'df_min': df_min,\n                    'abs_diff': abs_diff,\n                    'energy': energy,\n                    'iqr_p': iqr_p,\n                    'abs_diff_v': abs_diff_v,\n                    'energy_v': energy_v,\n                    'iqr_p_v': iqr_p_v})\n\n    return pd.DataFrame(res)\n    pass\n\n\ndef tau_features(df, sec, weight):\n    tau_feat = 'tau_' + str(sec)\n    bucket_col = 'trade_seconds_in_bucket_count_unique_' + str(sec)\n    df[tau_feat] = np.sqrt(weight\/df[bucket_col])\n\n    size_feat = 'size_' + str(sec)\n    order_col = 'trade_order_count_sum_' + str(sec)\n    df[size_feat] = np.sqrt(weight\/df[order_col])\n\n    return df\n    pass\n\n\ndef get_trade_features(file_path, buck_windows=cfg.bucket_windows):\n    trade_df = pd.read_parquet(file_path)\n\n    trade_df[\"log_return\"] = trade_df.groupby([\"time_id\"])[\"price\"].apply(calculate_log_return)\n    trade_df[\"amount\"] = trade_df[\"size\"] * trade_df[\"price\"]\n\n    price_features = get_trade_price_features(trade_df)\n    trade_df_merged = window_stats(trade_df, cfg.feature_dict_trade, cfg.feature_dict_trade_time, buck_windows, additional_dfs=price_features)\n\n    trade_df_merged = trade_df_merged.add_prefix(\"trade_\")\n\n    trade_df_merged[\"row_id\"] = trade_df_merged[\"trade_time_id_\"].apply(lambda x: f\"{file_path.split('=')[1]}-{x}\")\n    trade_df_merged.drop([\"trade_time_id_\"], axis=1, inplace=True)\n\n    for sec in buck_windows:\n        trade_df_merged = tau_features(trade_df_merged, sec, weight=sec\/600)\n    return trade_df_merged.bfill().ffill()                                              ","987f2124":"# create dataset\nclass GetData:\n    def __init__(self, df, book_path, trade_path, is_train=True):\n        self.df = df.copy(deep=True)\n        self.order_book_path = book_path\n        self.trade_path = trade_path\n        self.is_train = is_train\n\n        self._get_rowid()\n\n    def _get_rowid(self):\n        self.df[\"row_id\"] = self.df[\"stock_id\"].astype(str) + \"-\" + self.df[\"time_id\"].astype(str)\n\n    def get_time_stock(self, buck_windows=cfg.bucket_windows):\n        vol_cols = []\n        feat_set = ['log_return1_calculate_rv', 'log_return2_calculate_rv', 'trade_log_return_calculate_rv']\n        for feat in feat_set:\n            for sec in buck_windows:\n                vol_cols.append(feat + f'_{sec}')\n        vol_cols += feat_set\n\n        df_stock_id = self.df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min']).reset_index()\n        df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n        df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n        df_time_id = self.df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min']).reset_index()\n        df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n        df_time_id = df_time_id.add_suffix('_' + 'time')\n\n        # Merge with original dataframe\n        self.df = self.df.merge(df_stock_id, how='left', left_on=['stock_id'], right_on=['stock_id__stock'])\n        self.df = self.df.merge(df_time_id, how='left', left_on=['time_id'], right_on=['time_id__time'])\n        self.df.drop(['stock_id__stock', 'time_id__time'], axis=1, inplace=True)\n        return self.df\n\n    def process_features(self, list_stock_ids):\n        def parallel_helper(stock_id):\n            book_sample_path = os.path.join(self.order_book_path, f\"stock_id={stock_id}\")\n            trade_sample_path = os.path.join(self.trade_path, f\"stock_id={stock_id}\")\n\n            return pd.merge(get_book_features(book_sample_path), get_trade_features(trade_sample_path),\n                            on=\"row_id\",\n                            how=\"left\")\n\n        df = Parallel(n_jobs=4, verbose=1)(delayed(parallel_helper)(stock_id) for stock_id in list_stock_ids)\n        df = pd.concat(df, ignore_index=True)\n\n        return df\n\n    def _get_features(self):\n        features_df = self.process_features(self.df[\"stock_id\"].unique())\n        self.df = self.df.merge(features_df, on=[\"row_id\"], how=\"left\")\n\n        return self.get_time_stock()\n        pass\n\n    def get_all_features(self, stock_groups):\n        return create_cluster_aggregations(self._get_features(), stock_groups).bfill().ffill()\n        pass","1e59a637":"# metric utils\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n\ndef feval_rmspe(y_pred, model, is_xgb=True):\n    y_true = model.get_label()\n\n    if is_xgb:\n        return \"RMSPE\", rmspe(y_true, y_pred)\n\n    return \"RMSPE\", rmspe(y_true, y_pred), False","40480901":"# model utils\ndef feval_wrapper(y_pred, model):\n    return feval_rmspe(y_pred, model, is_xgb=False)\n\nclass TrainFer:\n    def __init__(self, params_dict, n_splits, model_path, random_state):\n        self.params = params_dict\n        self.n_splits = n_splits\n        self.random_state = random_state\n        self.model_path = model_path\n        if not os.path.isdir(model_path):\n            os.makedirs(model_path)\n\n    def train(self, X, y, scaler=None):\n        \n        if scaler is not None:\n            X.iloc[:, 1:] = scaler.fit_transform(X.iloc[:, 1:])\n            pickle.dump(scaler, open(os.path.join(self.model_path, \"scaler.pkl\"), \"wb\"))\n            \n        oof_predictions = np.zeros(X.shape[0])\n        kfold = KFold(n_splits=self.n_splits, random_state=0, shuffle=True)\n        oof_scores = []\n\n        for fold, (train_idx, val_idx) in enumerate(kfold.split(X)):\n            print(f\"\\nFold - {fold}\\n\")\n\n            x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n            x_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n\n            dtrain = lgb.Dataset(x_train, y_train, weight=1\/np.square(y_train))\n            dval = lgb.Dataset(x_val, y_val, weight=1\/np.square(y_val))\n\n            model = lgb.train(params=self.params,\n                              num_boost_round=10000,\n                              train_set=dtrain,\n                              valid_sets=[dtrain, dval],\n                              verbose_eval=250,\n                              early_stopping_rounds=200,\n                              feval=feval_wrapper)\n\n            fold_preds = model.predict(x_val)\n            oof_score = rmspe(y_val, fold_preds)\n            print(f\"\\nRMSPE of fold {fold}: {oof_score}\")\n            pickle.dump(model, open(os.path.join(self.model_path, f\"lgb_bl_{fold}_{oof_score}.pkl\"), \"wb\"))\n            \n            oof_scores.append(oof_score)\n            oof_predictions[val_idx] = fold_preds\n        \n        print(f\"\\nOOF Scores: {oof_scores}\\n\")\n        rmspe_score = rmspe(y, oof_predictions)\n        print(f\"OOF RMSPE: {rmspe_score}\")\n        \n    def infer(self, x_test):        \n        test_predictions = np.zeros(x_test.shape[0])\n\n        for mpth in os.listdir(self.model_path):\n            model = pickle.load(open(os.path.join(self.model_path, mpth), \"rb\"))\n            test_predictions += model.predict(x_test)\/5\n\n        return test_predictions","9bbc8a33":"if __name__==\"__main__\":\n    _ = gc.collect()\n    is_train = True\n    \n    train = pd.read_csv(cfg.paths[\"train_csv\"])\n    groups = get_stock_clusters(train)\n    \n    model = TrainFer(cfg.model_params[\"lgb_bl\"], n_splits=5, model_path=cfg.paths[\"lgb_baseline\"], random_state=cfg.random_state)\n    \n    if is_train:\n        train_data = GetData(train, cfg.paths[\"train_book\"], cfg.paths[\"train_trade\"])\n        train_df = train_data.get_all_features(groups)\n        pickle.dump(train_df, open(\".\/processed_train.pkl\", \"wb\"))\n#         train_df = pickle.load(open(\".\/processed_train.pkl\", \"rb\"))\n        model.train(train_df.drop(columns=[\"row_id\", \"target\", \"time_id\"]), train_df[\"target\"], scaler=StandardScaler())\n    else:\n        test = pd.read_csv(cfg.paths[\"test_csv\"])\n        test_data = GetData(test, cfg.paths[\"test_book\"], cfg.paths[\"test_trade\"])\n        test_df = test_data.get_all_features(groups)\n        \n        preds = model.infer(test_df.drop(columns=[\"row_id\", \"time_id\"])) \n        test[\"target\"] = preds\n        test[[\"row_id\", \"target\"]].to_csv(\".\/submission.csv\", index=False)\n        print(test.head())","c71493c0":"EOF"}}