{"cell_type":{"dceb4d65":"code","846b16b6":"code","f1a28eb7":"code","1831c9b7":"code","41d6ef31":"code","49bb1d1b":"code","3213b032":"code","b69d8833":"code","f66a1fff":"code","32d8bc23":"code","367d492b":"code","db689239":"code","2740e1cd":"code","092e89de":"code","5bb4a46d":"code","cac06146":"code","3924e63e":"code","2f2ad333":"code","9075be51":"code","00024025":"code","5ece872c":"code","5fbd1f76":"code","509ea427":"code","a9c9cdc6":"code","04b681bc":"markdown","56460f91":"markdown","b859e263":"markdown","300391e7":"markdown","690feec2":"markdown","b84bd548":"markdown","d7301314":"markdown","14d1a638":"markdown","77b0b956":"markdown","e360a941":"markdown","5c377730":"markdown","366269ef":"markdown","412dffd8":"markdown","eea0389e":"markdown","b0e2dceb":"markdown","f07ac98c":"markdown","773c0208":"markdown","ca0a7c08":"markdown","80321efe":"markdown","04b766ba":"markdown","88bb90ec":"markdown","7f533ed3":"markdown","d1bbb139":"markdown","952eb753":"markdown","dc6b2f3d":"markdown","8b1d2902":"markdown","f6d678b8":"markdown","9c22f5f2":"markdown"},"source":{"dceb4d65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","846b16b6":"apple_training_complete = pd.read_csv('..\/input\/apple-inc-stock\/AAPL.csv')","f1a28eb7":"apple_training_processed = apple_training_complete.iloc[:, 1:2].values","1831c9b7":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range = (0, 1))\n\napple_training_scaled = scaler.fit_transform(apple_training_processed)","41d6ef31":"features_set = []\nlabels = []\nfor i in range(60, 1259):\n    features_set.append(apple_training_scaled[i-60:i, 0])\n    labels.append(apple_training_scaled[i, 0])","49bb1d1b":"features_set, labels = np.array(features_set), np.array(labels)","3213b032":"features_set = np.reshape(features_set, (features_set.shape[0], features_set.shape[1], 1))","b69d8833":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout","f66a1fff":"model = Sequential()","32d8bc23":"model.add(LSTM(units=50, return_sequences=True, input_shape=(features_set.shape[1], 1)))","367d492b":"model.add(Dropout(0.2))","db689239":"model.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))","2740e1cd":"model.add(Dense(units = 1))","092e89de":"model.compile(optimizer = 'adam', loss = 'mean_squared_error')","5bb4a46d":"model.fit(features_set, labels, epochs = 100, batch_size = 32)","cac06146":"apple_testing_complete = pd.read_csv('\/kaggle\/input\/apple-inc-stock\/AAPL (1).csv')\napple_testing_processed = apple_testing_complete.iloc[:, 1:2].values","3924e63e":"apple_total = pd.concat((apple_training_complete['Open'], apple_testing_complete['Open']), axis=0)","2f2ad333":"test_inputs = apple_total[len(apple_total) - len(apple_testing_complete) - 60:].values","9075be51":"test_inputs = test_inputs.reshape(-1,1)\ntest_inputs = scaler.transform(test_inputs)","00024025":"test_features = []\nfor i in range(60, 80):\n    test_features.append(test_inputs[i-60:i, 0])","5ece872c":"test_features = np.array(test_features)\ntest_features = np.reshape(test_features, (test_features.shape[0], test_features.shape[1], 1))","5fbd1f76":"predictions = model.predict(test_features)","509ea427":"predictions = scaler.inverse_transform(predictions)","a9c9cdc6":"plt.figure(figsize=(10,6))\nplt.plot(apple_testing_processed, color='blue', label='Actual Apple Stock Price')\nplt.plot(predictions , color='red', label='Predicted Apple Stock Price')\nplt.title('Apple Stock Price Prediction')\nplt.xlabel('Date')\nplt.ylabel('Apple Stock Price')\nplt.legend()\nplt.show()","04b681bc":"                       **Time Series Analysis with LSTM using Python's Keras Library**\n\n\n**Introduction**\n\nTime series analysis refers to the analysis of change in the trend of the data over a period of time. Time series analysis has a variety of applications. One such application is the prediction of the future value of an item based on its past values. Future stock price prediction is probably the best example of such an application. In this article, we will see how we can perform time series analysis with the help of a recurrent neural network. We will be predicting the future stock prices of the Apple Company (AAPL), based on its stock prices of the past 5 years.\n\n**Dataset**\n\nThe data that we are going to use for this article can be downloaded from Yahoo Finance. For training our algorithm, we will be using the Apple stock prices from 1st January 2013 to 31 December 2017. For the sake of prediction, we will use the Apple stock prices for the month of January 2018. So in order to evaluate the performance of the algorithm, download the actual stock prices for the month of January 2018 as well.\n\nLet's now see how our data looks. Open the Apple stock price training file that contains data for five years. You will see that it contains seven columns: Date, Open, High, Low, Close, Adj Close and Volume. We will be predicting the opening stock price, therefore we are not interested in the rest of the columns.\n\nIf you plot the opening stock prices against the date, you will see the following plot:\n\n![image.png](attachment:image.png)\n\n\nYou can see that the trend is highly non-linear and it is very difficult to capture the trend using this information. This is where the power of LSTM can be utilized. LSTM (Long Short-Term Memory network) is a type of recurrent neural network capable of remembering the past information and while predicting the future values, it takes this past information into account.\n\nEnough of the preliminaries, let's see how LSTM can be used for time series analysis.\n\nPredicting Future Stock Prices\nStock price prediction is similar to any other machine learning problem where we are given a set of features and we have to predict a corresponding value. We will perform the same steps as we do perform in order to solve any machine learning problem. Follow these steps:","56460f91":"In the above script, we import our test data and as we did with the training data, we removed all the columns from the test data except the column that contains opening stock prices.","b859e263":"**Making Predictions**\n\nNow is the time to see the magic. We preprocessed our test data and now we can use it to make predictions. To do so, we simply need to call the predict method on the model that we trained. Execute the following script:","300391e7":"Finally, let's see how well did our algorithm predicted the future stock prices. Execute the following script:","690feec2":"As we did for the training set, we need to scale our test data. Execute the following script:","b84bd548":"**Data Normalization**\n\nAs a rule of thumb, whenever you use a neural network, you should normalize or scale your data. We will use MinMaxScaler class from the sklear.preprocessing library to scale our data between 0 and 1. The feature_range parameter is used to specify the range of the scaled data. Execute the following script:","d7301314":"Finally, we need to convert our data into the three-dimensional format which can be used as input to the LSTM. Execute the following script:","14d1a638":"In order to train LSTM on our data, we need to convert our data into the shape accepted by the LSTM. We need to convert our data into three-dimensional format. The first dimension is the number of records or rows in the dataset which is 1260 in our case. The second dimension is the number of time steps which is 60 while the last dimension is the number of indicators. Since we are only using one feature, i.e Open, the number of indicators will be one. Execute the following script:","77b0b956":"**Import Dataset**\n\nExecute the following script to import the data set. For the sake of this article, the data has been stored in the Datasets folder, inside the \"E\" drive. You can change the path accordingly.","e360a941":"Creating LSTM and Dropout Layers\nLet's add LSTM layer to the model that we just created. Execute the following script to do so:","5c377730":"We call the compile method on the Sequential model object which is \"model\" in our case. We use the mean squared error as loss function and to reduce the loss or to optimize the algorithm, we use the adam optimizer.\n\n**Algorithm Training**\n\nNow is the time to train the model that we defined in the previous few steps. To do so, we call the fit method on the model and pass it our training features and labels as shown below:","366269ef":"Depending upon your hardware, model training can take some time.\n**Testing our LSTM**\n\nWe have successfully trained our LSTM, now is the time to test the performance of our algorithm on the test set by predicting the opening stock prices for the month of January 2018. However, as we did with the training data, we need to convert our test data in the right format.\n\nLet's first import our test data. Execute the following script:","412dffd8":"**Conclusion**\n\nA long short-term memory network (LSTM) is one of the most commonly used neural networks for time series analysis. The ability of LSTM to remember previous information makes it ideal for such tasks. In this article, we saw how we can use LSTM for the Apple stock price prediction. I would suggest that you download stocks of some other organization like Google or Microsoft from Yahoo Finance and see if your algorithm is able to capture the trends.","eea0389e":"**Model Compilation**\n\nFinally, we need to compile our LSTM before we can train it on the training data. The following script compiles the our model.","b0e2dceb":"**Convert Training Data to Right Shape**\n\nAs I said earlier, in a time series problems, we have to predict a value at time T, based on the data from days T-N where N can be any number of steps. In this article, we are going to predict the opening stock price of the data based on the opening stock prices for the past 60 days. I have tried and tested different numbers and found that the best results are obtained when past 60 time steps are used. You can try different numbers and see how your algorithm performs.\n\nOur feature set should contain the opening stock price values for the past 60 days while the label or dependent variable should be the stock price at the 61st day. Execute the following script to create feature and label set.","f07ac98c":"Converting Test Data to Right Format\nFor each day of January 2018, we want our feature set to contain the opening stock prices for the previous 60 days. For the 1st of January, we need the stock prices for the previous 60 days. To do so, we need to concatenate our training data and test data before preprocessing. Execute the following script to do so:","773c0208":"To add a layer to the sequential model, the add method is used. Inside the add method, we passed our LSTM layer. The first parameter to the LSTM layer is the number of neurons or nodes that we want in the layer. The second parameter is return_sequences, which is set to true since we will add more layers to the model. The first parameter to the input_shape is the number of time steps while the last parameter is the number of indicators.\n\nLet's now add a dropout layer to our model. Dropout layer is added to avoid over-fitting, which is a phenomenon where a machine learning model performs better on the training data compared to the test data. Execute the following script to add dropout layer.","ca0a7c08":"Now let's prepare our test inputs. The input for each day should contain the opening stock prices for the previous 60 days. That means we need opening stock prices for the 20 test days for the month of January 2018 and the 60 stock prices from the last 60 days for the training set. Execute the following script to fetch those 80 values.","80321efe":"As we said earlier, we are only interested in the opening price of the stock. Therefore, we will filter all the data from our training set and will retain only the values for the Open column. Execute the following script:","04b766ba":"Above plot is the output.","88bb90ec":"Since we scaled our data, the predictions made by the LSTM are also scaled. We need to reverse the scaled prediction back to their actual values. To do so, we can use the \u00ecnverse_transform method of the scaler object we created during training. Take a look at the following script:","7f533ed3":"Let's add three more LSTM and dropout layers to our model. Run the following script.","d1bbb139":"**Training The LSTM**\n\nWe have preprocessed our data and have converted it into the desired format. now is the time to create our LSTM. The LSTM model that we are going to create will be a sequential model with multiple layers. We will add four LSTM layers to our model followed by a dense layer that predicts the future stock price. Let's first import the libraries that we are going to need in order to create our model:","952eb753":"We scaled our data, now let's prepare our final test input set that will contain previous 60 stock prices for the month of January. Execute the following script:","dc6b2f3d":"If the opening stock prices for the month of January 2018 are plotted against the dates, you should see the following graph.\n\n![image.png](attachment:image.png)\n\nYou can see that the trend is highly non-linear. Overall, the stock prices see small rise at the start of the month followed by a downward trend at the end of the month, with a slight increase and decrease in the stock prices in-between. It is extremely difficult to forecast such a trend. Let's see if the LSTM we trained is actually able to predict such a trend.","8b1d2902":"In the script above we imported the Sequential class from keras.models library and Dense, LSTM, and Dropout classes from keras.layers library.\n\nAs a first step, we need to instantiate the Sequential class. This will be our model class and we will add LSTM, Dropout and Dense layers to this model. Execute the following script","f6d678b8":"In the script above we create two lists: feature_set and labels. There are 1260 records in the training data. We execute a loop that starts from 61st record and stores all the previous 60 records to the feature_set list. The 61st record is stored in the labels list.\n\nWe need to convert both the feature_set and the labels list to the numpy array before we can use it for training. Execute the following script:","9c22f5f2":"**Creating Dense Layer**\n\nTo make our model more robust, we add a dense layer at the end of the model. The number of neurons in the dense layer will be set to 1 since we want to predict a single value in the output."}}