{"cell_type":{"6f7e3eb9":"code","b8d5bd71":"code","b3faee8a":"code","48b6cb34":"code","514a5c6c":"code","1a53d146":"code","c246cf4d":"code","e6a2e2f0":"code","c8398309":"code","72767c4c":"code","3a482e92":"code","ada1a687":"code","c0cf4f0f":"code","8ecc6cba":"code","5158b603":"code","575246bd":"code","8d433da3":"code","a65a9bdb":"code","ac1ec19f":"code","99b2e396":"code","7e01fff2":"code","965c9ac2":"code","895c38eb":"code","4c6e5d07":"code","e2dd50b9":"markdown","02f57253":"markdown","7d263e8a":"markdown","374ac2ca":"markdown","874ce08c":"markdown","d076aa1d":"markdown","73495f5c":"markdown","bbc5051d":"markdown","0e57f771":"markdown"},"source":{"6f7e3eb9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import Lasso, LassoCV\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)\n\n# Any results you write to the current directory are saved as output.","b8d5bd71":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv') #\u8a13\u7df4\u30c7\u30fc\u30bf\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv') #\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\nhouces = pd.concat([train,test],sort=False)\n\n\ntrain.describe()\n","b3faee8a":"test.describe()","48b6cb34":"houces.info()","514a5c6c":"houces.isnull().sum()[houces.isnull().sum()>0].sort_values(ascending=False)","1a53d146":"missing = houces.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()","c246cf4d":"# \u6587\u5b57\u5217\u7cfb\u306e\u6b20\u640d\u5024\u304c\u3042\u308b\u3082\u306e\u3092\u30c1\u30a7\u30c3\u30af\nhouces.select_dtypes(include='object').isnull().sum()[houces.select_dtypes(include='object').isnull().sum()>0]","e6a2e2f0":"print(train.PoolQC.unique())\nprint(train.MiscFeature.unique())\nprint(train.Alley.unique())\nprint(train.Fence.unique())\nprint(train.FireplaceQu.unique())","c8398309":"for col in ('PoolQC','MiscFeature','Alley','Fence','FireplaceQu' ):\n    train[col] = train[col].fillna('Nan')\n    test[col] = test[col].fillna('Nan')","72767c4c":"train.select_dtypes(include='object').isnull().sum()[houces.select_dtypes(include='object').isnull().sum()>0]","3a482e92":"# \u6700\u983b\u5024\u3067\u88dc\u5b8c\nfor col in ('MSZoning','Exterior1st','Exterior2nd','KitchenQual','SaleType','Functional'):\n    train[col]=train[col].fillna(train[col].mode()[0])\n    test[col]=test[col].fillna(test[col].mode()[0])\n\n# None\u3067\u88dc\u5b8c \u2192\u300c\u306a\u3044\u300d\u3053\u3068\u304c\u30c7\u30fc\u30bf\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3002(\u30d7\u30fc\u30eb\u304c\u306a\u3044\u3002\u3068\u304b)\nfor col in ('Utilities','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n            'BsmtFinType2','Electrical','GarageType','GarageFinish','GarageQual','GarageCond'):\n    train[col]=train[col].fillna('None')\n    test[col]=test[col].fillna('None')","ada1a687":"# \u6570\u5024\u7cfb\u306e\u6b20\u640d\u5024\u304c\u3042\u308b\u30c7\u30fc\u30bf\u3092\u30c1\u30a7\u30c3\u30af\nhouces.select_dtypes(include=['int','float']).isnull().sum()[houces.select_dtypes(include=['int','float']).isnull().sum()>0]","c0cf4f0f":"# LotFrontage\uff1a\u5bb6\u306e\u524d\u306e\u9053\u8def\u306e\u5e45 \u2192\u5e73\u5747\u3067\u57cb\u3081\u3066\u304a\u304f\n# MasVnrArea : \u77f3\u6750\u6599\u3092\u4f7f\u3063\u3066\u3044\u308b\u9762\u7a4d(\u305d\u3082\u305d\u3082\u3042\u308b\u304b\u3069\u3046\u304b\u306e\u5909\u6570\u3082\u3042\u308b)\u3000\u2192\uff10\u3067\u826f\u3044\n# BsmtFinSF1\uff1a\u30bf\u30a4\u30d71\u5b8c\u6210\u3057\u305f\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u3000\u2192\u6570\u306a\u3044\u3057\u3001\uff10\n# BsmtFinSF2\uff1a\u30bf\u30a4\u30d72\u5b8c\u6210\u3057\u305f\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8 \u2192\uff10\n# BsmtUnfSF\uff1a\u5730\u4e0b\u5ba4\u306e\u672a\u5b8c\u6210\u306e\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u3000\u2192\uff10\n# TotalBsmtSF\uff1a\u5730\u4e0b\u5ba4\u306e\u7dcf\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8 \u2192\uff10\n# BsmtFullBath\uff1a\u5730\u4e0b\u5ba4\u306e\u30d5\u30eb\u30d0\u30b9\u30eb\u30fc\u30e0\u3000\u2192\uff10\n# BsmtHalfBath\uff1a\u5730\u4e0b\u534a\u5206\u306e\u30d0\u30b9\u30eb\u30fc\u30e0\u3000\u21920\n# GarageYrBlt\uff1a\u30ac\u30ec\u30fc\u30b8\u304c\u5efa\u8a2d\u3055\u308c\u305f\u5e74 \u2192\u3000\u5e73\u5747\n# GarageCars\uff1a\u8eca\u306e\u5bb9\u91cf\u306b\u304a\u3051\u308b\u30ac\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u3000\u2192\u3000\uff10\n# GarageArea\uff1a\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u5358\u4f4d\u306e\u30ac\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u3000\u21920\n\n# \u5e73\u5747\u3067\u88dc\u5b8c\nfor col in ('LotFrontage','GarageCars'):\n    train[col]=train[col].fillna(train[col].mean())\n    test[col]=test[col].fillna(train[col].mean())\n\n# 0\u3067\u88dc\u5b8c\nfor col in ('MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageYrBlt','GarageCars','GarageArea'):\n    train[col]=train[col].fillna(0)\n    test[col]=test[col].fillna(0)\n\nhouces = pd.concat([train,test],sort=False)\nhouces.isnull().sum()","8ecc6cba":"plt.figure(figsize=[30,15])\nsns.heatmap(train.corr(), annot=True)","5158b603":"# \u3053\u308c\u3060\u3068\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3057\u304b\u53cd\u6620\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\n# Label Encoder\u3092\u4f7f\u3046\n# (\u6587\u5b57\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3060\u3068\u3001\u3053\u306e\u5f8c\u4f55\u304b\u3068\u8a08\u7b97\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u9069\u5f53\u306b\u540c\u3058\u6587\u5b57\u5217\u306f\u6570\u5b57\u306b\u5909\u3048\u308b\u3001\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3046)\n# (\u4f8b\uff1a['apple','banana','grape'] \u2192 [0,1,2])\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfor i in range(train.shape[1]):\n    if train.iloc[:,i].dtypes == object:\n        lbl = LabelEncoder()\n        lbl.fit(list(train.iloc[:,i].values) + list(test.iloc[:,i].values))\n        train.iloc[:,i] = lbl.transform(list(train.iloc[:,i].values))\n        test.iloc[:,i] = lbl.transform(list(test.iloc[:,i].values))\n","575246bd":"plt.figure(figsize=[30,15])\n\nsns.heatmap(train.corr(), annot=False)","8d433da3":"# \u591a\u3059\u304e\u3066\u610f\u5473\u304c\u308f\u304b\u3089\u3093\u306e\u3067\u3001SalesPrice\uff08\u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u3082\u306e\u30c8\u30c3\u30d72\uff10\u3060\u3051\u3067\u3060\u3059\uff09\ncorrmat = train.corr() #\u5909\u6570\u540c\u58eb\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6570\u5b57\u3068\u4e00\u81f4\u3059\u308b\u306f\u305a\ntop_corr_features = corrmat.nlargest(21,'SalePrice')['SalePrice'].index\nplt.subplots(figsize=(12,10))\nsns.heatmap(train[top_corr_features].corr(), annot=True)","a65a9bdb":"sns.set()\ncolumns = ['SalePrice','OverallQual','TotalBsmtSF','GrLivArea','GarageCars','FullBath','YearBuilt','YearRemodAdd']\nsns.pairplot(train[columns],size = 2 ,kind ='scatter',diag_kind='kde')\nplt.show()","ac1ec19f":"# \u4ed6\u306e\u65b9\u6cd5\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306efeature_importance\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3070\u3001\u3069\u306e\u5909\u6570\u304c\u4e88\u6e2c\u306b\u5927\u5207\u305d\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3067\u304d\u308b\n\ny_train = train['SalePrice']\nX_train = train.drop(['Id','SalePrice'], axis=1)\nX_test = test.drop('Id', axis=1)\n\n# feature importance using random forest\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=80, max_features='auto')\nrf.fit(X_train, y_train)\n\nranking = np.argsort(-rf.feature_importances_)\nf, ax = plt.subplots(figsize=(11, 9))\nsns.barplot(x=rf.feature_importances_[ranking], y=X_train.columns.values[ranking], orient='h')\nax.set_xlabel(\"feature importance\")\nplt.tight_layout()\nplt.show()\n","99b2e396":"train.columns","7e01fff2":"train['TotalSF'] = train['1stFlrSF'] + train['2ndFlrSF'] + train['TotalBsmtSF'] + train['GrLivArea']","965c9ac2":"plt.scatter(train.TotalSF,train.SalePrice)","895c38eb":"train = train.drop(train[(train['TotalSF']>10000) & (train['SalePrice']<300000)].index)\nplt.scatter(train.TotalSF,train.SalePrice)","4c6e5d07":"sns.set()\ncolumns = ['SalePrice','OverallQual','TotalSF','GarageCars','FullBath','YearBuilt','YearRemodAdd']\nsns.pairplot(train[columns],size = 2 ,kind ='scatter',diag_kind='kde')\nplt.show()","e2dd50b9":"* \u3068\u308a\u3042\u3048\u305a\u53f3\u4e0b\u306e2\u70b9\u306f\u6d88\u3057\u305f\u3044\u3002\uff08\u5e83\u3044\u306e\u306b\u5b89\u3044\uff09","02f57253":"* OverallQual\u3068GrLivArea\u306f\u7d50\u69cb\u76f8\u95a2\u304c\u9ad8\u3044\u306a\u3041\u3063\u3066\u601d\u3046\u3002\n* \u3042\u3068GarageCars\u3068GarageArea\u540c\u58eb\u306e\u76f8\u95a2\u304c0.88\u3067\u9ad8\u3044\u304b\u3089\u3001\u3088\u308aSalePrice\u3068\u76f8\u95a2\u304c\u9ad8\u3044\u3001GrageCars\u3092\u63a1\u7528\u3057\u3088\u3046\u304b\u306a\u3063\u3066\u601d\u3046\u3002\n* TotalBsmsSF(\u5730\u4e0b\u5ba4\u306e\u5e83\u3055)\u3068\uff11\uff53\uff54FltSF(\u4e00\u968e\u306e\u5e83\u3055)\u306f\u5730\u4e0b\u5ba4\u306e\u65b9\u3092\u53d6\u3063\u3066\u304a\u304f\u3002\uff08\u4e00\u968e\u306e\u5e83\u3055\u306f\u4ed6\u306e\u5909\u6570\u3067\u4fdd\u7ba1\u3057\u3084\u3059\u305d\u3046\u3060\u3057\u3002\uff09\n* \u540c\u3058\u3088\u3046\u306bTotRmsAbvGrd\u3068GrLivArea\u306fGrLivArea\u3092\u63a1\u7528\n\n\n\u2192\u3060\u3044\u305f\u3044\u4f7f\u3046\u8aac\u660e\u5909\u6570\u306b\u76ee\u661f\u304c\u3064\u3044\u3066\u304d\u305f\n\n* \u4f7f\u3048\u305d\u3046\u306a\u30c7\u30fc\u30bf\u540c\u58eb\u306e\u76f8\u95a2\u3092\u8a73\u3057\u304f\u307f\u308b","7d263e8a":"## \u3053\u3053\u3067\u5916\u308c\u5024\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u308b\n\n\u9762\u7a4d\u7cfb\u3067\u5727\u5012\u7684\u5916\u308c\u5024\u304c\u898b\u53d7\u3051\u3089\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u9762\u7a4d\u304c\u3070\u304b\u5e83\u3044\u5bb6\u3092\u5916\u3059\u3053\u3068\u306b\u3059\u308b\n","374ac2ca":"* OverallQual: \u5168\u4f53\u7684\u306a\u7d20\u6750\u3068\u4ed5\u4e0a\u3052\u306e\u8cea\n* TotalBsmtSF: Total square feet of basement area\u5730\u4e0b\u5ba4\u306e\u5e83\u3055\n* GrLivArea: Above grade (ground) living area square feet\u5730\u4e0b\u306e\u30ea\u30d3\u30f3\u30b0\u30a8\u30ea\u30a2\n* FullBath: Full bathrooms above grade \u306a\u3093\u304b\u3044\u3044\u304a\u98a8\u5442\uff1f","874ce08c":"PoolQC\/MiscFeature\/Alley\/Fence\/Fireplace \u306fNA\uff1d\u5099\u3048\u4ed8\u3051\u3089\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u60c5\u5831\u3002","d076aa1d":"## \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30fb\u78ba\u8a8d","73495f5c":"## \u6b20\u640d\u5024\u306e\u78ba\u8a8d","bbc5051d":"### \u6b20\u640d\u5024\u306e\u9664\u53bb","0e57f771":"## \u4fa1\u683c\u3068\u95a2\u4fc2\u306e\u5f37\u3044\u30c7\u30fc\u30bf\u3092\u63a2\u3059"}}