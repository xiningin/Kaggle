{"cell_type":{"a87956dc":"code","b7eda24c":"code","1f736711":"code","3ebda662":"code","3dd47b9c":"code","894de3df":"code","e630566e":"code","e7b10b7b":"code","724e793a":"code","3f299868":"code","74731d17":"code","1b7d97a2":"code","621c10a1":"code","ebc12f83":"markdown","a152372c":"markdown","4ea4ac54":"markdown","0473b0f1":"markdown","8d8993da":"markdown","c2e93dfc":"markdown","90cf8a00":"markdown","6595e14d":"markdown","0ec82925":"markdown","5fcb628f":"markdown","a220776f":"markdown","094bea1e":"markdown","9386ec0c":"markdown","5af243a0":"markdown"},"source":{"a87956dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom sklearn import model_selection, linear_model\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7eda24c":"# creating a dataframe of the given data for easier analysis\n\ndf = pd.read_csv(r\"\/kaggle\/input\/student-study-hour-v2\/Student Study Hour V2.csv\")\ndf.head(10)                      # returns first 10 entries","1f736711":"# returns the number of rows and columns\n\ndf.shape","3ebda662":"df.isnull().any()","3dd47b9c":"# We can use lineplot or scatterplot as per our convenience\n\nsns.lineplot(df.Hours, df.Scores, color='indigo')\nplt.title('Study Hours v\/s Scores')","894de3df":"independent_variable = df[['Hours']]\ntarget_variable = df.Scores\n","e630566e":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(independent_variable, target_variable,\n                                                    test_size = 0.2, random_state=0)","e7b10b7b":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)\nprint('Training is Completed')","724e793a":"reg_line = model.coef_ * independent_variable + model.intercept_\nsns.scatterplot(df.Hours, df.Scores, color='blue')\nplt.plot(independent_variable, reg_line, color='indigo')","3f299868":"df['Predicted Values'] = model.predict(df[['Hours']])\ndf.head(11)","74731d17":"print('Student score after studying for 9.5 hours is {}'.format(model.predict([[9.5]])))","1b7d97a2":"print('Accuracy of model = {}'.format(model.score(X_test, Y_test)))","621c10a1":"from sklearn import metrics  \nprint('Mean Absolute Error:', \n      metrics.mean_absolute_error(Y_test, model.predict(X_test)))","ebc12f83":"### Data Preparation","a152372c":"Now we can easily compare the original values with the predicted values and observe the accuracy of our model.\n\n","4ea4ac54":"From the chart, it is clear that more number of studying hours results in better marks in the exams.\n\n","0473b0f1":"### Plotting the Regression line w.r.t data points","8d8993da":"### Plotting the datapoints\n","c2e93dfc":"What will be predicted score if a student studies for 9.25 hrs\/ day?\n","90cf8a00":"This step evaluates the performance of our model. For simplicity, mean absolute error has been chosen.","6595e14d":"Now we will train our model using the training set. This will be done using supervised machine learning algorithm known as Linear Regression.\n\n","0ec82925":"This shows that the data does not contain any null values.\n\n","5fcb628f":"### Accuracy of the Model","a220776f":"After separating attributes and labels, we will split the dataset into training and testing sets using the scikit_learn built in train_test_split method.\n\n","094bea1e":"### Evaluating the Model","9386ec0c":"### Predicting Values","5af243a0":"Now, we divide the data into attributes (input) and labels (output).\n\n"}}